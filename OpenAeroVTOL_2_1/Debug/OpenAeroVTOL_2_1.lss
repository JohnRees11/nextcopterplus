
OpenAeroVTOL_2_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000408  00800100  00007e60  00007ef4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00007e60  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002b9  00800508  00800508  000082fc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000082fc  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000005e0  00000000  00000000  00008330  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00012242  00000000  00000000  00008910  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000031ee  00000000  00000000  0001ab52  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00003dde  00000000  00000000  0001dd40  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000de0  00000000  00000000  00021b20  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000025f2  00000000  00000000  00022900  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000613e  00000000  00000000  00024ef2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000498  00000000  00000000  0002b030  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 fe 0c 	jmp	0x19fc	; 0x19fc <__ctors_end>
       4:	0c 94 42 22 	jmp	0x4484	; 0x4484 <__vector_1>
       8:	0c 94 0a 22 	jmp	0x4414	; 0x4414 <__vector_2>
       c:	0c 94 ed 22 	jmp	0x45da	; 0x45da <__vector_3>
      10:	0c 94 1b 0d 	jmp	0x1a36	; 0x1a36 <__bad_interrupt>
      14:	0c 94 b4 22 	jmp	0x4568	; 0x4568 <__vector_5>
      18:	0c 94 1b 0d 	jmp	0x1a36	; 0x1a36 <__bad_interrupt>
      1c:	0c 94 7b 22 	jmp	0x44f6	; 0x44f6 <__vector_7>
      20:	0c 94 1b 0d 	jmp	0x1a36	; 0x1a36 <__bad_interrupt>
      24:	0c 94 1b 0d 	jmp	0x1a36	; 0x1a36 <__bad_interrupt>
      28:	0c 94 1b 0d 	jmp	0x1a36	; 0x1a36 <__bad_interrupt>
      2c:	0c 94 1b 0d 	jmp	0x1a36	; 0x1a36 <__bad_interrupt>
      30:	0c 94 1b 0d 	jmp	0x1a36	; 0x1a36 <__bad_interrupt>
      34:	0c 94 1b 0d 	jmp	0x1a36	; 0x1a36 <__bad_interrupt>
      38:	0c 94 1b 0d 	jmp	0x1a36	; 0x1a36 <__bad_interrupt>
      3c:	0c 94 1b 0d 	jmp	0x1a36	; 0x1a36 <__bad_interrupt>
      40:	0c 94 1b 0d 	jmp	0x1a36	; 0x1a36 <__bad_interrupt>
      44:	0c 94 1b 0d 	jmp	0x1a36	; 0x1a36 <__bad_interrupt>
      48:	0c 94 1b 0d 	jmp	0x1a36	; 0x1a36 <__bad_interrupt>
      4c:	0c 94 1b 0d 	jmp	0x1a36	; 0x1a36 <__bad_interrupt>
      50:	0c 94 98 23 	jmp	0x4730	; 0x4730 <__vector_20>
      54:	0c 94 1b 0d 	jmp	0x1a36	; 0x1a36 <__bad_interrupt>
      58:	0c 94 1b 0d 	jmp	0x1a36	; 0x1a36 <__bad_interrupt>
      5c:	0c 94 1b 0d 	jmp	0x1a36	; 0x1a36 <__bad_interrupt>
      60:	0c 94 1b 0d 	jmp	0x1a36	; 0x1a36 <__bad_interrupt>
      64:	0c 94 1b 0d 	jmp	0x1a36	; 0x1a36 <__bad_interrupt>
      68:	0c 94 1b 0d 	jmp	0x1a36	; 0x1a36 <__bad_interrupt>
      6c:	0c 94 1b 0d 	jmp	0x1a36	; 0x1a36 <__bad_interrupt>
      70:	0c 94 98 23 	jmp	0x4730	; 0x4730 <__vector_20>
      74:	0c 94 1b 0d 	jmp	0x1a36	; 0x1a36 <__bad_interrupt>
      78:	0c 94 1b 0d 	jmp	0x1a36	; 0x1a36 <__bad_interrupt>
      7c:	f6 28       	or	r15, r6
      7e:	f8 28       	or	r15, r8
      80:	fc 28       	or	r15, r12
      82:	ff 28       	or	r15, r15
      84:	02 29       	or	r16, r2
      86:	05 29       	or	r16, r5
      88:	08 29       	or	r16, r8
      8a:	0a 29       	or	r16, r10
      8c:	0e 29       	or	r16, r14
      8e:	10 29       	or	r17, r0
      90:	12 29       	or	r17, r2
      92:	14 29       	or	r17, r4
      94:	16 29       	or	r17, r6
      96:	18 29       	or	r17, r8
      98:	1a 29       	or	r17, r10
      9a:	1c 29       	or	r17, r12
      9c:	20 29       	or	r18, r0
      9e:	22 29       	or	r18, r2
      a0:	24 29       	or	r18, r4
      a2:	08 4a       	sbci	r16, 0xA8	; 168
      a4:	d7 3b       	cpi	r29, 0xB7	; 183
      a6:	3b ce       	rjmp	.-906    	; 0xfffffd1e <__eeprom_end+0xff7efd1e>
      a8:	01 6e       	ori	r16, 0xE1	; 225
      aa:	84 bc       	out	0x24, r8	; 36
      ac:	bf fd       	.word	0xfdbf	; ????
      ae:	c1 2f       	mov	r28, r17
      b0:	3d 6c       	ori	r19, 0xCD	; 205
      b2:	74 31       	cpi	r23, 0x14	; 20
      b4:	9a bd       	out	0x2a, r25	; 42
      b6:	56 83       	std	Z+6, r21	; 0x06
      b8:	3d da       	rcall	.-2950   	; 0xfffff534 <__eeprom_end+0xff7ef534>
      ba:	3d 00       	.word	0x003d	; ????
      bc:	c7 7f       	andi	r28, 0xF7	; 247
      be:	11 be       	out	0x31, r1	; 49
      c0:	d9 e4       	ldi	r29, 0x49	; 73
      c2:	bb 4c       	sbci	r27, 0xCB	; 203
      c4:	3e 91       	ld	r19, -X
      c6:	6b aa       	std	Y+51, r6	; 0x33
      c8:	aa be       	out	0x3a, r10	; 58
      ca:	00 00       	nop
      cc:	00 80       	ld	r0, Z
      ce:	3f 00       	.word	0x003f	; ????

000000d0 <Acc_Pol>:
      d0:	ff ff 01 ff 01 ff 01 ff ff 01 01 01 ff 01 01 ff     ................
      e0:	ff ff                                               ..

000000e2 <ACC_RPY_Order>:
      e2:	00 01 02 02 00 01 00 01 02 00 01 02 01 00 02 00     ................
      f2:	02 01                                               ..

000000f4 <FUTABA>:
      f4:	01 02 00 03 04 05 06 07                             ........

000000fc <JR>:
      fc:	00 01 02 03 04 05 06 07                             ........

00000104 <Trans_Matrix>:
     104:	05 02 06 01 05 08 03 07 05                          .........

0000010d <Wingdings>:
     10d:	01 02 41 05 0d 00 0f 00 22 00 33 00 44 00 4f 09     ..A.....".3.D.O.
     11d:	01 00 03 00 07 00 0f 00 1f 00 0f 00 07 00 03 00     ................
     12d:	01 00 08 1c 00 1c 00 1c 00 1c 00 7f 00 3e 00 1c     .............>..
     13d:	00 08 00 08 08 00 1c 00 3e 00 7f 00 1c 00 1c 00     ........>.......
     14d:	1c 00 1c 00 05 ff 01 fe 00 7c 00 38 00 10 00 0d     .........|.8....
     15d:	40 00 60 00 70 00 78 00 7c 00 7e 00 7f 00 7e 00     @.`.p.x.|.~...~.
     16d:	7c 00 78 00 70 00 60 00 40 00                       |.x.p.`.@.

00000177 <Verdana14>:
     177:	01 02 20 5b 13 00 bb 00 c5 00 cc 00 cc 00 cc 00     .. [............
     187:	cc 01 03 01 03 01 03 01 16 01 29 01 29 01 29 01     ..........).).).
     197:	36 01 49 01 50 01 50 01 6f 01 88 01 a4 01 c0 01     6.I.P.P.o.......
     1a7:	df 01 fb 02 1a 02 36 02 55 02 74 02 7b 02 7b 02     ......6.U.t.{.{.
     1b7:	7b 02 7b 02 7b 02 94 02 94 02 bc 02 db 02 fd 03     {.{.{...........
     1c7:	22 03 3e 03 5a 03 82 03 a1 03 b4 03 ca 03 ec 04     ".>.Z...........
     1d7:	08 04 2d 04 4c 04 74 04 8d 04 b5 04 d7 04 f9 05     ..-.L.t.........
     1e7:	1e 05 3d 05 65 05 99 05 bb 05 e0 06 02 06 02 06     ..=.e...........
     1f7:	1b 06 1b 06 1b 06 1b 06 1b 06 34 06 50 06 69 06     ..........4.P.i.
     207:	85 06 a1 06 b4 06 d0 06 e9 06 f0 07 00 07 1c 07     ................
     217:	23 07 4e 07 67 07 86 07 a2 07 be 07 d1 07 ea 07     #.N.g...........
     227:	fd 08 16 08 32 08 5d 08 79 08 95 03 00 00 00 00     ....2.].y.......
     237:	00 00 00 00 00 02 fe 67 00 fe 67 00 12 78 00 00     .......g..g..x..
     247:	fe 01 00 02 01 00 02 01 00 02 01 00 fe 41 00 78     .............A.x
     257:	70 00 00 1c 00 00 07 00 e0 00 00 38 00 00 0e 1e     p..........8....
     267:	00 82 7f 00 80 40 00 80 40 00 80 40 00 80 7f 00     .....@..@..@....
     277:	00 1e 00 06 c0 1f 00 f8 ff 00 3c e0 01 07 00 07     ..........<.....
     287:	03 00 06 01 00 04 06 01 00 04 03 00 06 07 00 07     ................
     297:	3c e0 01 f8 ff 00 c0 1f 00 04 00 00 03 00 f0 03     <...............
     2a7:	00 70 00 00 10 00 06 00 03 00 00 03 00 00 03 00     .p..............
     2b7:	00 03 00 00 03 00 00 03 00 02 00 70 00 00 70 00     ...........p..p.
     2c7:	0a f0 0f 00 fc 3f 00 0c 30 00 06 60 00 06 60 00     .....?..0..`..`.
     2d7:	06 60 00 06 60 00 0c 30 00 fc 3f 00 f0 0f 00 08     .`..`..0..?.....
     2e7:	18 60 00 18 60 00 18 60 00 fe 7f 00 fe 7f 00 00     .`..`..`........
     2f7:	60 00 00 60 00 00 60 00 09 0c 70 00 06 78 00 06     `..`..`...p..x..
     307:	6c 00 06 66 00 06 63 00 8e 61 00 fc 60 00 78 60     l..f..c..a..`.x`
     317:	00 00 60 00 09 0c 30 00 06 60 00 06 60 00 86 61     ..`...0..`..`..a
     327:	00 86 61 00 86 61 00 ce 73 00 7c 3f 00 38 1e 00     ..a..a..s.|?.8..
     337:	0a 00 07 00 80 07 00 c0 07 00 f0 06 00 38 06 00     .............8..
     347:	1c 06 00 fe 7f 00 fe 7f 00 00 06 00 00 06 00 09     ................
     357:	00 30 00 fe 60 00 fe 60 00 c6 60 00 c6 60 00 c6     .0..`..`..`..`..
     367:	60 00 c6 31 00 86 3f 00 06 0f 00 0a e0 0f 00 f0     `..1..?.........
     377:	3f 00 9c 30 00 cc 60 00 c6 60 00 c6 60 00 c6 60     ?..0..`..`..`..`
     387:	00 c6 31 00 86 3f 00 00 0f 00 09 06 00 00 06 40     ..1..?.........@
     397:	00 06 70 00 06 7c 00 06 0f 00 c6 03 00 f6 00 00     ..p..|..........
     3a7:	3e 00 00 0e 00 00 0a 38 1e 00 7c 3f 00 ce 71 00     >......8..|?..q.
     3b7:	c6 60 00 c6 60 00 86 61 00 86 61 00 4e 73 00 7c     .`..`..a..a.Ns.|
     3c7:	3f 00 38 1e 00 0a f0 00 00 fc 61 00 8c 63 00 06     ?.8.......a..c..
     3d7:	63 00 06 63 00 06 63 00 06 33 00 0c 39 00 fc 1f     c..c..c..3..9...
     3e7:	00 f0 07 00 02 70 70 00 70 70 00 08 0c 00 00 06     .....pp.pp......
     3f7:	00 00 06 67 00 06 67 00 86 01 00 ce 00 00 fc 00     ...g..g.........
     407:	00 38 00 00 0d 00 40 00 00 78 00 00 3f 00 c0 07     .8....@..x..?...
     417:	00 f8 06 00 3e 06 00 06 06 00 3e 06 00 f8 06 00     ....>.....>.....
     427:	c0 07 00 00 3f 00 00 78 00 00 40 00 0a fe 7f 00     ....?..x..@.....
     437:	fe 7f 00 86 61 00 86 61 00 86 61 00 86 61 00 c6     ....a..a..a..a..
     447:	61 00 7c 73 00 3c 3f 00 00 1e 00 0b e0 07 00 f8     a.|s.<?.........
     457:	1f 00 1c 38 00 0c 30 00 06 60 00 06 60 00 06 60     ...8..0..`..`..`
     467:	00 06 60 00 06 60 00 06 20 00 0c 30 00 0c fe 7f     ..`..`.. ..0....
     477:	00 fe 7f 00 06 60 00 06 60 00 06 60 00 06 60 00     .....`..`..`..`.
     487:	06 60 00 0e 70 00 0c 30 00 38 1c 00 f8 0f 00 e0     .`..p..0.8......
     497:	07 00 09 fe 7f 00 fe 7f 00 c6 60 00 c6 60 00 c6     ..........`..`..
     4a7:	60 00 c6 60 00 c6 60 00 c6 60 00 c6 60 00 09 fe     `..`..`..`..`...
     4b7:	7f 00 fe 7f 00 86 01 00 86 01 00 86 01 00 86 01     ................
     4c7:	00 86 01 00 86 01 00 06 00 00 0d e0 07 00 f8 1f     ................
     4d7:	00 3c 3c 00 0c 30 00 0e 70 00 06 60 00 06 60 00     .<<..0..p..`..`.
     4e7:	06 63 00 06 63 00 06 63 00 06 63 00 0c 3f 00 0c     .c..c..c..c..?..
     4f7:	3f 00 0a fe 7f 00 fe 7f 00 c0 00 00 c0 00 00 c0     ?...............
     507:	00 00 c0 00 00 c0 00 00 c0 00 00 fe 7f 00 fe 7f     ................
     517:	00 06 06 60 00 06 60 00 fe 7f 00 fe 7f 00 06 60     ...`..`........`
     527:	00 06 60 00 07 00 60 00 00 60 00 06 60 00 06 60     ..`...`..`..`..`
     537:	00 06 70 00 fe 3f 00 fe 1f 00 0b fe 7f 00 fe 7f     ..p..?..........
     547:	00 80 03 00 c0 01 00 e0 03 00 70 07 00 38 1c 00     ..........p..8..
     557:	1c 38 00 0e 70 00 06 60 00 02 40 00 09 fe 7f 00     .8..p..`..@.....
     567:	fe 7f 00 00 60 00 00 60 00 00 60 00 00 60 00 00     ....`..`..`..`..
     577:	60 00 00 60 00 00 60 00 0c fe 7f 00 fe 7f 00 0e     `..`..`.........
     587:	00 00 38 00 00 e0 01 00 80 07 00 00 07 00 e0 01     ..8.............
     597:	00 38 00 00 0e 00 00 fe 7f 00 fe 7f 00 0a fe 7f     .8..............
     5a7:	00 fe 7f 00 0e 00 00 3c 00 00 e0 00 00 80 03 00     .......<........
     5b7:	00 1e 00 00 78 00 fe 7f 00 fe 7f 00 0d e0 07 00     ....x...........
     5c7:	f8 1f 00 1c 38 00 0c 30 00 06 60 00 06 60 00 06     ....8..0..`..`..
     5d7:	60 00 06 60 00 06 60 00 0c 30 00 1c 38 00 f8 1f     `..`..`..0..8...
     5e7:	00 e0 07 00 08 fe 7f 00 fe 7f 00 06 03 00 06 03     ................
     5f7:	00 06 03 00 8e 03 00 fc 01 00 f8 00 00 0d e0 07     ................
     607:	00 f8 1f 00 1c 38 00 0c 30 00 06 60 00 06 60 00     .....8..0..`..`.
     617:	06 60 00 06 e0 01 06 e0 03 0c 30 07 1c 38 06 f8     .`........0..8..
     627:	1f 06 e0 07 06 0b fe 7f 00 fe 7f 00 86 01 00 86     ................
     637:	01 00 86 01 00 86 07 00 ce 0e 00 fc 1c 00 78 70     ..............xp
     647:	00 00 60 00 00 40 00 0b 78 30 00 fc 70 00 ce 60     ..`..@..x0..p..`
     657:	00 86 61 00 86 61 00 86 61 00 86 61 00 86 61 00     ..a..a..a..a..a.
     667:	06 33 00 0c 3f 00 00 1e 00 0c 06 00 00 06 00 00     .3..?...........
     677:	06 00 00 06 00 00 06 00 00 fe 7f 00 fe 7f 00 06     ................
     687:	00 00 06 00 00 06 00 00 06 00 00 06 00 00 0a fe     ................
     697:	0f 00 fe 3f 00 00 70 00 00 60 00 00 60 00 00 60     ...?..p..`..`..`
     6a7:	00 00 60 00 00 70 00 fe 3f 00 fe 0f 00 0d 02 00     ..`..p..?.......
     6b7:	00 1e 00 00 fc 00 00 e0 03 00 80 1f 00 00 7c 00     ..............|.
     6c7:	00 60 00 00 7c 00 80 1f 00 e0 03 00 fc 00 00 1e     .`..|...........
     6d7:	00 00 02 00 00 11 06 00 00 7e 00 00 f8 07 00 80     .........~......
     6e7:	3f 00 00 78 00 00 7c 00 c0 0f 00 7e 00 00 06 00     ?..x..|....~....
     6f7:	00 7e 00 00 e0 07 00 00 7e 00 00 70 00 80 7f 00     .~......~..p....
     707:	f8 07 00 7e 00 00 06 00 00 0b 02 40 00 06 60 00     ...~.......@..`.
     717:	1e 78 00 38 1c 00 e0 07 00 80 01 00 e0 07 00 38     .x.8...........8
     727:	1e 00 1e 78 00 06 60 00 02 40 00 0c 02 00 00 06     ...x..`..@......
     737:	00 00 1e 00 00 78 00 00 e0 00 00 c0 7f 00 c0 7f     .....x..........
     747:	00 e0 00 00 78 00 00 1e 00 00 06 00 00 02 00 00     ....x...........
     757:	0b 06 70 00 06 78 00 06 7c 00 06 6e 00 06 67 00     ..p..x..|..n..g.
     767:	c6 63 00 e6 60 00 76 60 00 3e 60 00 1e 60 00 0e     .c..`.v`.>`..`..
     777:	60 00 08 03 00 00 1f 00 00 fe 00 00 f0 07 00 80     `...............
     787:	3f 00 00 fc 01 00 e0 03 00 00 03 08 00 3c 00 30     ?............<.0
     797:	7e 00 30 67 00 30 63 00 30 63 00 30 33 00 e0 7f     ~.0g.0c.0c.03...
     7a7:	00 e0 7f 00 09 ff 7f 00 ff 7f 00 60 20 00 30 60     ...........` .0`
     7b7:	00 30 60 00 30 60 00 70 70 00 e0 3f 00 c0 0f 00     .0`.0`.pp..?....
     7c7:	08 80 0f 00 e0 3f 00 60 30 00 30 60 00 30 60 00     .....?.`0.0`.0`.
     7d7:	30 60 00 30 60 00 60 30 00 09 80 1f 00 e0 3f 00     0`.0`.`0......?.
     7e7:	70 70 00 30 60 00 30 60 00 30 60 00 30 30 00 ff     pp.0`.0`.0`.00..
     7f7:	7f 00 ff 7f 00 09 80 0f 00 e0 3f 00 60 33 00 30     ..........?.`3.0
     807:	63 00 30 63 00 30 63 00 70 63 00 e0 63 00 c0 33     c.0c.0c.pc..c..3
     817:	00 06 30 00 00 fe 7f 00 ff 7f 00 33 00 00 33 00     ..0........3..3.
     827:	00 03 00 00 09 80 1f 00 e0 3f 06 70 70 06 30 60     .........?.pp.0`
     837:	06 30 60 06 30 60 06 30 30 07 f0 ff 03 f0 ff 01     .0`.0`.00.......
     847:	08 ff 7f 00 ff 7f 00 60 00 00 30 00 00 30 00 00     .......`..0..0..
     857:	30 00 00 f0 7f 00 e0 7f 00 02 f6 7f 00 f6 7f 00     0...............
     867:	05 00 00 06 30 00 06 30 00 06 f6 ff 07 f6 ff 03     ....0..0........
     877:	09 ff 7f 00 ff 7f 00 00 06 00 00 07 00 80 0f 00     ................
     887:	c0 38 00 70 70 00 30 60 00 10 40 00 02 ff 7f 00     .8.pp.0`..@.....
     897:	ff 7f 00 0e f0 7f 00 f0 7f 00 60 00 00 30 00 00     ..........`..0..
     8a7:	30 00 00 30 00 00 f0 7f 00 e0 7f 00 60 00 00 30     0..0........`..0
     8b7:	00 00 30 00 00 30 00 00 f0 7f 00 e0 7f 00 08 f0     ..0..0..........
     8c7:	7f 00 f0 7f 00 60 00 00 30 00 00 30 00 00 30 00     .....`..0..0..0.
     8d7:	00 f0 7f 00 e0 7f 00 0a 80 0f 00 e0 3f 00 60 30     ............?.`0
     8e7:	00 30 60 00 30 60 00 30 60 00 30 60 00 60 30 00     .0`.0`.0`.0`.`0.
     8f7:	e0 3f 00 80 0f 00 09 f0 ff 07 f0 ff 07 60 60 00     .?...........``.
     907:	30 60 00 30 60 00 30 60 00 70 70 00 e0 3f 00 c0     0`.0`.0`.pp..?..
     917:	0f 00 09 80 1f 00 e0 3f 00 70 70 00 30 60 00 30     .......?.pp.0`.0
     927:	60 00 30 60 00 30 30 00 f0 ff 07 f0 ff 07 06 f0     `.0`.00.........
     937:	7f 00 f0 7f 00 60 00 00 30 00 00 30 00 00 30 00     .....`..0..0..0.
     947:	00 08 c0 31 00 e0 63 00 30 63 00 30 63 00 30 66     ...1..c.0c.0c.0f
     957:	00 30 66 00 30 3e 00 60 1c 00 06 30 00 00 fe 3f     .0f.0>.`...0...?
     967:	00 fe 7f 00 30 60 00 30 60 00 30 60 00 08 f0 1f     ....0`.0`.0`....
     977:	00 f0 7f 00 00 60 00 00 60 00 00 60 00 00 30 00     .....`..`..`..0.
     987:	f0 7f 00 f0 7f 00 09 10 00 00 f0 00 00 e0 07 00     ................
     997:	00 3e 00 00 60 00 00 3e 00 e0 07 00 f0 00 00 10     .>..`..>........
     9a7:	00 00 0e 30 00 00 f0 03 00 c0 3f 00 00 78 00 00     ...0......?..x..
     9b7:	7c 00 80 07 00 f0 00 00 f0 00 00 c0 07 00 00 3c     |..............<
     9c7:	00 00 70 00 c0 3f 00 f0 03 00 30 00 00 09 10 40     ..p..?....0....@
     9d7:	00 30 60 00 f0 78 00 c0 1d 00 00 07 00 c0 1d 00     .0`..x..........
     9e7:	f0 78 00 30 60 00 10 40 00 09 10 00 00 f0 00 00     .x.0`..@........
     9f7:	e0 07 06 00 bf 07 00 f0 01 00 3f 00 e0 07 00 f0     ..........?.....
     a07:	00 00 10 00 00 08 30 70 00 30 78 00 30 7c 00 30     ......0p.0x.0|.0
     a17:	66 00 30 63 00 f0 61 00 f0 60 00 70 60 00           f.0c..a..`.p`.

00000a25 <Verdana8>:
     a25:	01 02 20 5b 0b 00 bb 00 be 00 c1 00 c1 00 c1 00     .. [............
     a35:	c1 00 d6 00 d6 00 d6 00 dd 00 e4 00 e4 00 e4 00     ................
     a45:	e9 00 f0 00 f3 00 f3 00 fe 01 09 01 14 01 1f 01     ................
     a55:	2c 01 37 01 42 01 4d 01 58 01 63 01 66 01 66 01     ,.7.B.M.X.c.f.f.
     a65:	66 01 66 01 66 01 6f 01 6f 01 7c 01 89 01 98 01     f.f.f.o.o.|.....
     a75:	a7 01 b2 01 bd 01 cc 01 d9 01 e0 01 e9 01 f6 02     ................
     a85:	01 02 10 02 1d 02 2c 02 37 02 46 02 53 02 60 02     ......,.7.F.S.`.
     a95:	6f 02 7c 02 89 02 9c 02 a9 02 b8 02 c5 02 c5 02     o.|.............
     aa5:	c5 02 c5 02 c5 02 c5 02 c5 02 d0 02 db 02 e6 02     ................
     ab5:	f1 02 fc 03 05 03 10 03 1b 03 1e 03 25 03 30 03     ............%.0.
     ac5:	33 03 46 03 51 03 5c 03 67 03 72 03 7b 03 84 03     3.F.Q.\.g.r.{...
     ad5:	8d 03 98 03 a3 03 b2 03 bd 03 c8 01 00 00 01 7e     ...............~
     ae5:	01 0a 0c 00 12 00 12 00 8c 01 60 00 18 00 c6 00     ..........`.....
     af5:	20 01 20 01 c0 00 03 f8 00 06 03 01 04 03 01 04      . .............
     b05:	06 03 f8 00 02 00 04 80 03 03 20 00 20 00 20 00     .......... . . .
     b15:	01 80 01 05 fc 00 02 01 02 01 02 01 fc 00 05 04     ................
     b25:	01 04 01 fe 01 00 01 00 01 05 84 01 42 01 22 01     ............B.".
     b35:	12 01 0c 01 05 84 00 02 01 12 01 12 01 ec 00 06     ................
     b45:	60 00 50 00 48 00 44 00 fe 01 40 00 05 9e 00 12     `.P.H.D...@.....
     b55:	01 12 01 12 01 e2 00 05 f8 00 14 01 12 01 12 01     ................
     b65:	e0 00 05 02 00 82 01 62 00 1a 00 06 00 05 ec 00     .......b........
     b75:	12 01 12 01 12 01 ec 00 05 1c 00 22 01 22 01 a2     ..........."."..
     b85:	00 7c 00 01 98 01 04 02 00 62 01 12 00 0c 00 06     .|.......b......
     b95:	c0 01 78 00 46 00 46 00 78 00 c0 01 06 fe 01 12     ..x.F.F.x.......
     ba5:	01 12 01 12 01 1c 01 e0 00 07 78 00 84 00 02 01     ..........x.....
     bb5:	02 01 02 01 02 01 84 00 07 fe 01 02 01 02 01 02     ................
     bc5:	01 02 01 84 00 78 00 05 fe 01 12 01 12 01 12 01     .....x..........
     bd5:	12 01 05 fe 01 12 00 12 00 12 00 02 00 07 78 00     ..............x.
     be5:	84 00 02 01 02 01 22 01 22 01 e4 00 06 fe 01 10     ......".".......
     bf5:	00 10 00 10 00 10 00 fe 01 03 02 01 fe 01 02 01     ................
     c05:	04 00 01 02 01 02 01 fe 00 06 fe 01 20 00 30 00     ............ .0.
     c15:	48 00 84 00 02 01 05 fe 01 00 01 00 01 00 01 00     H...............
     c25:	01 07 fe 01 06 00 18 00 60 00 18 00 06 00 fe 01     ........`.......
     c35:	06 fe 01 06 00 18 00 60 00 80 01 fe 01 07 78 00     .......`......x.
     c45:	84 00 02 01 02 01 02 01 84 00 78 00 05 fe 01 22     ..........x...."
     c55:	00 22 00 22 00 1c 00 07 78 00 84 00 02 01 02 01     ."."....x.......
     c65:	02 03 84 04 78 04 06 fe 01 22 00 22 00 62 00 9c     ....x....".".b..
     c75:	00 00 01 06 8c 00 12 01 12 01 22 01 22 01 c4 00     .........."."...
     c85:	07 02 00 02 00 02 00 fe 01 02 00 02 00 02 00 06     ................
     c95:	fe 00 00 01 00 01 00 01 00 01 fe 00 06 0e 00 70     ...............p
     ca5:	00 80 01 80 01 70 00 0e 00 09 06 00 78 00 80 01     .....p......x...
     cb5:	78 00 06 00 78 00 80 01 78 00 06 00 06 86 01 48     x...x...x......H
     cc5:	00 30 00 30 00 48 00 86 01 07 02 00 04 00 08 00     .0.0.H..........
     cd5:	f0 01 08 00 04 00 02 00 06 82 01 42 01 22 01 12     ...........B."..
     ce5:	01 0a 01 06 01 05 c0 00 28 01 28 01 28 01 f0 01     ........(.(.(...
     cf5:	05 ff 01 08 01 08 01 08 01 f0 00 05 f0 00 08 01     ................
     d05:	08 01 08 01 90 00 05 f0 00 08 01 08 01 08 01 ff     ................
     d15:	01 05 f0 00 28 01 28 01 28 01 b0 00 04 08 00 fe     ....(.(.(.......
     d25:	01 09 00 09 00 05 f0 00 08 05 08 05 08 05 f8 03     ................
     d35:	05 ff 01 08 00 08 00 08 00 f0 01 01 f9 01 03 00     ................
     d45:	04 08 04 f9 03 05 ff 01 40 00 60 00 90 00 08 01     ........@.`.....
     d55:	01 ff 01 09 f8 01 08 00 08 00 08 00 f0 01 08 00     ................
     d65:	08 00 08 00 f0 01 05 f8 01 08 00 08 00 08 00 f0     ................
     d75:	01 05 f0 00 08 01 08 01 08 01 f0 00 05 f8 07 08     ................
     d85:	01 08 01 08 01 f0 00 05 f0 00 08 01 08 01 08 01     ................
     d95:	f8 07 04 f8 01 10 00 08 00 08 00 04 30 01 28 01     ............0.(.
     da5:	48 01 c8 00 04 08 00 fe 00 08 01 08 01 05 f8 00     H...............
     db5:	00 01 00 01 00 01 f8 01 05 18 00 60 00 80 01 60     ...........`...`
     dc5:	00 18 00 07 78 00 80 01 60 00 18 00 60 00 80 01     ....x...`...`...
     dd5:	78 00 05 08 01 90 00 60 00 90 00 08 01 05 08 00     x......`........
     de5:	70 04 80 03 70 00 08 00 04 88 01 48 01 28 01 18     p...p......H.(..
     df5:	01                                                  .

00000df6 <lcd_commmands>:
     df6:	a2 a0 40 a6 ee c8 2c 2e 2f 24 ac 00 f8 00           ..@...,./$....

00000e04 <pagemap>:
     e04:	07 06 05 04 03 02 01 00                             ........

00000e0c <text_menu>:
     e0c:	10 11 0a 11 fe 10 1c 17 16 17 9b 14 0d 17 0b 17     ................
     e1c:	09 17 f1 16 e9 16 ef 16 ed 16 eb 16 e4 16 df 16     ................
     e2c:	da 16 d5 16 1a 11 3a 11 35 11 2f 11 b6 13 fb 16     ......:.5./.....
     e3c:	f3 16 67 15 84 15 7f 15 79 15 75 15 71 15 04 10     ..g.....y.u.q...
     e4c:	80 11 77 11 88 11 70 11 6b 11 04 10 04 10 04 10     ..w...p.k.......
     e5c:	04 10 04 10 04 10 04 10 12 10 0a 10 ac 11 a6 11     ................
     e6c:	a7 13 a2 13 9f 13 95 13 8b 13 04 10 04 10 05 10     ................
     e7c:	9f 11 9a 11 91 11 04 10 6c 15 04 10 48 14 44 14     ........l...H.D.
     e8c:	3e 14 35 14 04 10 04 10 a7 14 a4 14 4e 10 55 10     >.5.........N.U.
     e9c:	04 10 23 11 04 10 47 11 40 11 ca 16 b8 16 a5 16     ..#...G.@.......
     eac:	93 16 7d 16 6e 16 5a 16 46 16 38 16 29 16 1a 16     ..}.n.Z.F.8.)...
     ebc:	0b 16 fc 15 ed 15 de 15 cf 15 bb 15 a2 15 89 15     ................
     ecc:	3e 10 33 10 28 10 21 10 18 10 a7 14 a4 14 55 10     >.3.(.!.......U.
     edc:	04 10 88 11 80 11 77 11 70 11 6b 11 66 11 61 11     ......w.p.k.f.a.
     eec:	5c 11 57 11 50 11 4a 11 2c 14 25 14 04 10 5a 10     \.W.P.J.,.%...Z.
     efc:	49 10 d6 10 cb 10 04 10 88 10 7f 10 76 10 72 10     I...........v.r.
     f0c:	69 10 61 10 04 10 04 10 04 10 00 17 27 11 f0 10     i.a.........'...
     f1c:	e2 10 dc 10 c3 10 b8 10 04 10 5a 10 55 10 04 10     ..........Z.U...
     f2c:	04 10 04 10 7f 15 79 15 75 15 9b 14 91 14 86 14     ......y.u.......
     f3c:	77 14 69 14 5a 14 4d 14 c1 13 b6 13 aa 13 18 14     w.i.Z.M.........
     f4c:	0e 14 06 14 f9 13 cc 13 ef 13 e5 13 da 13 04 10     ................
     f5c:	04 10 04 10 04 10 04 10 53 15 4b 15 35 15 43 15     ........S.K.5.C.
     f6c:	27 15 1c 15 13 15 0a 15 f2 14 01 15 e3 14 d7 14     '...............
     f7c:	d0 14 c9 14 b5 14 c2 14 ab 14 5b 15 83 13 78 13     ..........[...x.
     f8c:	67 13 5a 13 4f 13 3f 13 2f 13 21 13 11 13 01 13     g.Z.O.?./.!.....
     f9c:	f1 12 e1 12 d1 12 c1 12 b3 12 a5 12 96 12 87 12     ................
     fac:	7a 12 6d 12 61 12 55 12 49 12 3c 12 32 12 28 12     z.m.a.U.I.<.2.(.
     fbc:	1b 12 10 12 03 12 f8 11 eb 11 10 12 de 11 f8 11     ................
     fcc:	04 10 04 10 04 10 04 10 04 10 04 10 b3 10 ae 10     ................
     fdc:	a9 10 a4 10 9f 10 9a 10 95 10 90 10 88 11 80 11     ................
     fec:	77 11 70 11 6b 11 66 11 61 11 5c 11 d5 11 cb 11     w.p.k.f.a.\.....
     ffc:	c3 11 bb 11 b2 11 57 11                             ......W.

00001004 <Dummy0>:
	...

00001005 <Random1>:
    1005:	48 69 67 68 00                                      High.

0000100a <Safety2>:
    100a:	41 72 6d 61 62 6c 65 00                             Armable.

00001012 <Safety1>:
    1012:	41 72 6d 65 64 00                                   Armed.

00001018 <DebugText5>:
    1018:	41 63 63 20 4d 61 67 3a 00                          Acc Mag:.

00001021 <DebugText4>:
    1021:	41 6e 67 6c 65 3a 00                                Angle:.

00001028 <DebugText3>:
    1028:	43 46 20 6f 75 74 70 75 74 3a 00                    CF output:.

00001033 <DebugText2>:
    1033:	41 63 63 53 6d 6f 6f 74 68 3a 00                    AccSmooth:.

0000103e <DebugText1>:
    103e:	44 65 6c 74 61 67 79 72 6f 3a 00                    Deltagyro:.

00001049 <GeneralText5>:
    1049:	46 61 73 74 00                                      Fast.

0000104e <MixerItem15>:
    104e:	53 63 61 6c 65 64 00                                Scaled.

00001055 <MixerItem12>:
    1055:	52 65 76 2e 00                                      Rev..

0000105a <MixerItem11>:
    105a:	4e 6f 72 6d 61 6c 00                                Normal.

00001061 <MixerMenuItem7>:
    1061:	50 69 74 63 68 55 70 00                             PitchUp.

00001069 <MixerMenuItem6>:
    1069:	53 69 64 65 77 61 79 73 00                          Sideways.

00001072 <MixerMenuItem5>:
    1072:	41 66 74 00                                         Aft.

00001076 <MixerMenuItem4>:
    1076:	49 6e 76 65 72 74 65 64 00                          Inverted.

0000107f <MixerMenuItem3>:
    107f:	56 65 72 74 69 63 61 6c 00                          Vertical.

00001088 <MixerMenuItem2>:
    1088:	46 6f 72 77 61 72 64 00                             Forward.

00001090 <MOUT8>:
    1090:	4f 55 54 38 00                                      OUT8.

00001095 <MOUT7>:
    1095:	4f 55 54 37 00                                      OUT7.

0000109a <MOUT6>:
    109a:	4f 55 54 36 00                                      OUT6.

0000109f <MOUT5>:
    109f:	4f 55 54 35 00                                      OUT5.

000010a4 <MOUT4>:
    10a4:	4f 55 54 34 00                                      OUT4.

000010a9 <MOUT3>:
    10a9:	4f 55 54 33 00                                      OUT3.

000010ae <MOUT2>:
    10ae:	4f 55 54 32 00                                      OUT2.

000010b3 <MOUT1>:
    10b3:	4f 55 54 31 00                                      OUT1.

000010b8 <Status5>:
    10b8:	28 44 69 73 61 72 6d 65 64 29 00                    (Disarmed).

000010c3 <Status4>:
    10c3:	28 41 72 6d 65 64 29 00                             (Armed).

000010cb <Status2>:
    10cb:	66 6f 72 20 73 74 61 74 75 73 00                    for status.

000010d6 <Status0>:
    10d6:	50 72 65 73 73 00                                   Press.

000010dc <WizardText2>:
    10dc:	44 6f 6e 65 21 00                                   Done!.

000010e2 <WizardText1>:
    10e2:	48 6f 6c 64 20 61 73 20 73 68 6f 77 6e 00           Hold as shown.

000010f0 <WizardText0>:
    10f0:	4e 6f 20 52 58 20 73 69 67 6e 61 6c 21 00           No RX signal!.

000010fe <PText2>:
    10fe:	48 6f 6c 64 20 73 74 65 61 64 79 00                 Hold steady.

0000110a <PText1>:
    110a:	52 65 73 65 74 00                                   Reset.

00001110 <PText0>:
    1110:	4f 70 65 6e 41 65 72 6f 32 00                       OpenAero2.

0000111a <Disarmed>:
    111a:	44 69 73 61 72 6d 65 64 00                          Disarmed.

00001123 <ErrorText10>:
    1123:	4c 6f 77 00                                         Low.

00001127 <Status3>:
    1127:	42 61 74 74 65 72 79 00                             Battery.

0000112f <ErrorText7>:
    112f:	4d 6f 64 65 6c 00                                   Model.

00001135 <ErrorText6>:
    1135:	4c 6f 73 74 00                                      Lost.

0000113a <ErrorText5>:
    113a:	45 72 72 6f 72 00                                   Error.

00001140 <ErrorText4>:
    1140:	53 69 67 6e 61 6c 00                                Signal.

00001147 <ErrorText3>:
    1147:	4e 6f 00                                            No.

0000114a <ChannelRef12>:
    114a:	45 6c 65 76 2e 00                                   Elev..

00001150 <ChannelRef10>:
    1150:	54 68 72 6f 74 2e 00                                Throt..

00001157 <ChannelRef8>:
    1157:	4e 6f 6e 65 00                                      None.

0000115c <ChannelRef7>:
    115c:	41 55 58 33 00                                      AUX3.

00001161 <ChannelRef6>:
    1161:	41 55 58 32 00                                      AUX2.

00001166 <ChannelRef5>:
    1166:	41 55 58 31 00                                      AUX1.

0000116b <ChannelRef4>:
    116b:	47 65 61 72 00                                      Gear.

00001170 <ChannelRef3>:
    1170:	52 75 64 64 65 72 00                                Rudder.

00001177 <ChannelRef2>:
    1177:	45 6c 65 76 61 74 6f 72 00                          Elevator.

00001180 <ChannelRef1>:
    1180:	41 69 6c 65 72 6f 6e 00                             Aileron.

00001188 <ChannelRef0>:
    1188:	54 68 72 6f 74 74 6c 65 00                          Throttle.

00001191 <MixerItem62>:
    1191:	53 71 72 74 53 69 6e 65 00                          SqrtSine.

0000119a <MixerItem61>:
    119a:	53 69 6e 65 00                                      Sine.

0000119f <MixerItem60>:
    119f:	4c 69 6e 65 61 72 00                                Linear.

000011a6 <MixerItem41>:
    11a6:	4d 6f 74 6f 72 00                                   Motor.

000011ac <MixerItem40>:
    11ac:	53 65 72 76 6f 00                                   Servo.

000011b2 <MixerItem74>:
    11b2:	41 63 63 50 69 74 63 68 00                          AccPitch.

000011bb <MixerItem73>:
    11bb:	41 63 63 52 6f 6c 6c 00                             AccRoll.

000011c3 <MixerItem72>:
    11c3:	47 79 72 6f 59 61 77 00                             GyroYaw.

000011cb <MixerItem71>:
    11cb:	47 79 72 6f 50 69 74 63 68 00                       GyroPitch.

000011d5 <MixerItem70>:
    11d5:	47 79 72 6f 52 6f 6c 6c 00                          GyroRoll.

000011de <MixerItem31>:
    11de:	50 32 20 53 6f 75 72 63 65 20 42 3a 00              P2 Source B:.

000011eb <MixerItem21>:
    11eb:	50 31 20 53 6f 75 72 63 65 20 42 3a 00              P1 Source B:.

000011f8 <MixerItem30>:
    11f8:	50 32 20 56 6f 6c 75 6d 65 3a 00                    P2 Volume:.

00001203 <MixerItem29>:
    1203:	50 32 20 53 6f 75 72 63 65 20 41 3a 00              P2 Source A:.

00001210 <MixerItem2>:
    1210:	50 31 20 56 6f 6c 75 6d 65 3a 00                    P1 Volume:.

0000121b <MixerItem0>:
    121b:	50 31 20 53 6f 75 72 63 65 20 41 3a 00              P1 Source A:.

00001228 <MixerItem43>:
    1228:	50 32 20 5a 20 61 63 63 3a 00                       P2 Z acc:.

00001232 <MixerItem42>:
    1232:	50 31 20 5a 20 61 63 63 3a 00                       P1 Z acc:.

0000123c <MixerItem28>:
    123c:	50 32 20 50 69 74 63 68 20 41 4c 3a 00              P2 Pitch AL:.

00001249 <MixerItem3>:
    1249:	50 31 20 50 69 74 63 68 20 41 4c 00                 P1 Pitch AL.

00001255 <MixerItem27>:
    1255:	50 32 20 52 6f 6c 6c 20 41 4c 3a 00                 P2 Roll AL:.

00001261 <MixerItem7>:
    1261:	50 31 20 52 6f 6c 6c 20 41 4c 3a 00                 P1 Roll AL:.

0000126d <MixerItem26>:
    126d:	50 32 20 59 61 77 20 67 79 72 6f 3a 00              P2 Yaw gyro:.

0000127a <MixerItem6>:
    127a:	50 31 20 59 61 77 20 67 79 72 6f 3a 00              P1 Yaw gyro:.

00001287 <MixerItem25>:
    1287:	50 32 20 50 69 74 63 68 20 67 79 72 6f 3a 00        P2 Pitch gyro:.

00001296 <MixerItem5>:
    1296:	50 31 20 50 69 74 63 68 20 67 79 72 6f 3a 00        P1 Pitch gyro:.

000012a5 <MixerItem24>:
    12a5:	50 32 20 52 6f 6c 6c 20 67 79 72 6f 3a 00           P2 Roll gyro:.

000012b3 <MixerItem4>:
    12b3:	50 31 20 52 6f 6c 6c 20 67 79 72 6f 3a 00           P1 Roll gyro:.

000012c1 <MixerItem56>:
    12c1:	50 32 20 52 75 64 2e 20 76 6f 6c 75 6d 65 3a 00     P2 Rud. volume:.

000012d1 <MixerItem53>:
    12d1:	50 31 20 52 75 64 2e 20 76 6f 6c 75 6d 65 3a 00     P1 Rud. volume:.

000012e1 <MixerItem55>:
    12e1:	50 32 20 45 6c 65 2e 20 76 6f 6c 75 6d 65 3a 00     P2 Ele. volume:.

000012f1 <MixerItem52>:
    12f1:	50 31 20 45 6c 65 2e 20 76 6f 6c 75 6d 65 3a 00     P1 Ele. volume:.

00001301 <MixerItem54>:
    1301:	50 32 20 41 69 6c 2e 20 76 6f 6c 75 6d 65 3a 00     P2 Ail. volume:.

00001311 <MixerItem51>:
    1311:	50 31 20 41 69 6c 2e 20 76 6f 6c 75 6d 65 3a 00     P1 Ail. volume:.

00001321 <Mixeritem50>:
    1321:	54 68 6f 74 74 6c 65 20 63 75 72 76 65 00           Thottle curve.

0000132f <MixerItem33>:
    132f:	50 32 20 54 68 72 2e 20 76 6f 6c 75 6d 65 3a 00     P2 Thr. volume:.

0000133f <MixerItem23>:
    133f:	50 31 20 54 68 72 2e 20 76 6f 6c 75 6d 65 3a 00     P1 Thr. volume:.

0000134f <MixerItem34>:
    134f:	50 32 20 4f 66 66 73 65 74 3a 00                    P2 Offset:.

0000135a <MixerItem35>:
    135a:	50 31 2e 6e 20 4f 66 66 73 65 74 3a 00              P1.n Offset:.

00001367 <MixerItem36>:
    1367:	50 31 2e 6e 20 25 20 6f 66 20 74 72 61 6e 73 3a     P1.n % of trans:
	...

00001378 <MixerItem20>:
    1378:	50 31 20 4f 66 66 73 65 74 3a 00                    P1 Offset:.

00001383 <MixerItem1>:
    1383:	44 65 76 69 63 65 3a 00                             Device:.

0000138b <P5text>:
    138b:	50 31 2e 6e 20 2d 20 50 32 00                       P1.n - P2.

00001395 <P4text>:
    1395:	50 31 20 2d 20 50 31 2e 6e 00                       P1 - P1.n.

0000139f <P3text>:
    139f:	50 32 00                                            P2.

000013a2 <P2text>:
    13a2:	50 31 2e 6e 00                                      P1.n.

000013a7 <P1text>:
    13a7:	50 31 00                                            P1.

000013aa <Transition_P1n>:
    13aa:	54 72 61 6e 73 2e 20 50 31 6e 3a 00                 Trans. P1n:.

000013b6 <Transition>:
    13b6:	54 72 61 6e 73 69 74 69 6f 6e 00                    Transition.

000013c1 <GeneralText9>:
    13c1:	4c 6f 63 6b 20 72 61 74 65 3a 00                    Lock rate:.

000013cc <BattMenuItem2>:
    13cc:	42 61 74 2e 20 4c 56 41 20 78 31 30 3a 00           Bat. LVA x10:.

000013da <GeneralText7>:
    13da:	43 46 20 66 61 63 74 6f 72 3a 00                    CF factor:.

000013e5 <GeneralText6>:
    13e5:	41 63 63 2e 20 4c 50 46 3a 00                       Acc. LPF:.

000013ef <GeneralText3>:
    13ef:	50 57 4d 20 72 61 74 65 3a 00                       PWM rate:.

000013f9 <GeneralText2>:
    13f9:	44 69 73 61 72 6d 20 74 69 6d 65 3a 00              Disarm time:.

00001406 <AutoMenuItem2>:
    1406:	53 61 66 65 74 79 3a 00                             Safety:.

0000140e <Contrast>:
    140e:	43 6f 6e 74 72 61 73 74 3a 00                       Contrast:.

00001418 <MixerMenuItem0>:
    1418:	4f 72 69 65 6e 74 61 74 69 6f 6e 3a 00              Orientation:.

00001425 <RCMenuItem7>:
    1425:	46 75 74 61 62 61 00                                Futaba.

0000142c <RCMenuItem6>:
    142c:	4a 52 2c 53 70 6b 74 6d 00                          JR,Spktm.

00001435 <RXMode3>:
    1435:	53 70 65 6b 74 72 75 6d 00                          Spektrum.

0000143e <RXMode2>:
    143e:	53 2d 42 75 73 00                                   S-Bus.

00001444 <RXMode1>:
    1444:	50 57 4d 00                                         PWM.

00001448 <RXMode0>:
    1448:	43 50 50 4d 00                                      CPPM.

0000144d <RCMenuItem10>:
    144d:	52 75 64 64 65 72 20 70 6f 6c 2e 3a 00              Rudder pol.:.

0000145a <RCMenuItem9>:
    145a:	45 6c 65 76 61 74 6f 72 20 70 6f 6c 2e 3a 00        Elevator pol.:.

00001469 <RCMenuItem8>:
    1469:	41 69 6c 65 72 6f 6e 20 70 6f 6c 2e 3a 00           Aileron pol.:.

00001477 <RCMenuItem2>:
    1477:	50 72 6f 66 69 6c 65 20 43 68 61 6e 2e 3a 00        Profile Chan.:.

00001486 <RCMenuItem0>:
    1486:	43 68 2e 20 6f 72 64 65 72 3a 00                    Ch. order:.

00001491 <RCMenuItem20>:
    1491:	50 57 4d 20 73 79 6e 63 3a 00                       PWM sync:.

0000149b <RCMenuItem1>:
    149b:	52 58 20 74 79 70 65 3a 00                          RX type:.

000014a4 <AutoMenuItem15>:
    14a4:	4f 4e 00                                            ON.

000014a7 <AutoMenuItem11>:
    14a7:	4f 46 46 00                                         OFF.

000014ab <StabMenuItem30>:
    14ab:	59 61 77 20 74 72 69 6d 3a 00                       Yaw trim:.

000014b5 <StabMenuItem12>:
    14b5:	59 61 77 20 49 20 4c 69 6d 69 74 3a 00              Yaw I Limit:.

000014c2 <StabMenuItem9>:
    14c2:	59 61 77 20 44 3a 00                                Yaw D:.

000014c9 <StabMenuItem8>:
    14c9:	59 61 77 20 49 3a 00                                Yaw I:.

000014d0 <StabMenuItem7>:
    14d0:	59 61 77 20 50 3a 00                                Yaw P:.

000014d7 <AutoMenuItem8>:
    14d7:	50 69 74 63 68 20 74 72 69 6d 3a 00                 Pitch trim:.

000014e3 <AutoMenuItem21>:
    14e3:	50 69 74 63 68 20 41 75 74 6f 4c 76 6c 3a 00        Pitch AutoLvl:.

000014f2 <StabMenuItem11>:
    14f2:	50 69 74 63 68 20 49 20 4c 69 6d 69 74 3a 00        Pitch I Limit:.

00001501 <StabMenuItem6>:
    1501:	50 69 74 63 68 20 44 3a 00                          Pitch D:.

0000150a <StabMenuItem5>:
    150a:	50 69 74 63 68 20 49 3a 00                          Pitch I:.

00001513 <AutoMenuItem4>:
    1513:	50 69 74 63 68 20 50 3a 00                          Pitch P:.

0000151c <AutoMenuItem7>:
    151c:	52 6f 6c 6c 20 74 72 69 6d 3a 00                    Roll trim:.

00001527 <AutoMenuItem20>:
    1527:	52 6f 6c 6c 20 41 75 74 6f 4c 76 6c 3a 00           Roll AutoLvl:.

00001535 <StabMenuItem10>:
    1535:	52 6f 6c 6c 20 49 20 4c 69 6d 69 74 3a 00           Roll I Limit:.

00001543 <StabMenuItem3>:
    1543:	52 6f 6c 6c 20 44 3a 00                             Roll D:.

0000154b <StabMenuItem2>:
    154b:	52 6f 6c 6c 20 49 3a 00                             Roll I:.

00001553 <AutoMenuItem1>:
    1553:	52 6f 6c 6c 20 50 3a 00                             Roll P:.

0000155b <StabMenuItem13>:
    155b:	41 63 63 20 56 65 72 74 20 50 3a 00                 Acc Vert P:.

00001567 <SensorMenuItem2>:
    1567:	49 6e 76 2e 00                                      Inv..

0000156c <SensorMenuItem1>:
    156c:	43 61 6c 2e 00                                      Cal..

00001571 <PText19>:
    1571:	41 63 63 00                                         Acc.

00001575 <PText18>:
    1575:	59 61 77 00                                         Yaw.

00001579 <PText17>:
    1579:	50 69 74 63 68 00                                   Pitch.

0000157f <PText16>:
    157f:	52 6f 6c 6c 00                                      Roll.

00001584 <PText15>:
    1584:	47 79 72 6f 00                                      Gyro.

00001589 <MainMenuItem23>:
    1589:	31 39 2e 20 50 6f 73 2e 20 53 65 72 76 6f 20 74     19. Pos. Servo t
    1599:	72 76 6c 2e 20 28 25 29 00                          rvl. (%).

000015a2 <MainMenuItem22>:
    15a2:	31 38 2e 20 4e 65 67 2e 20 53 65 72 76 6f 20 74     18. Neg. Servo t
    15b2:	72 76 6c 2e 20 28 25 29 00                          rvl. (%).

000015bb <MainMenuItem20>:
    15bb:	31 37 2e 20 53 65 72 76 6f 20 64 69 72 65 63 74     17. Servo direct
    15cb:	69 6f 6e 00                                         ion.

000015cf <MainMenuItem18>:
    15cf:	31 36 2e 20 4f 55 54 38 20 4d 69 78 65 72 00        16. OUT8 Mixer.

000015de <MainMenuItem17>:
    15de:	31 35 2e 20 4f 55 54 37 20 4d 69 78 65 72 00        15. OUT7 Mixer.

000015ed <MainMenuItem16>:
    15ed:	31 34 2e 20 4f 55 54 36 20 4d 69 78 65 72 00        14. OUT6 Mixer.

000015fc <MainMenuItem15>:
    15fc:	31 33 2e 20 4f 55 54 35 20 4d 69 78 65 72 00        13. OUT5 Mixer.

0000160b <MainMenuItem14>:
    160b:	31 32 2e 20 4f 55 54 34 20 4d 69 78 65 72 00        12. OUT4 Mixer.

0000161a <MainMenuItem13>:
    161a:	31 31 2e 20 4f 55 54 33 20 4d 69 78 65 72 00        11. OUT3 Mixer.

00001629 <MainMenuItem12>:
    1629:	31 30 2e 20 4f 55 54 32 20 4d 69 78 65 72 00        10. OUT2 Mixer.

00001638 <MainMenuItem11>:
    1638:	39 2e 20 4f 55 54 31 20 4d 69 78 65 72 00           9. OUT1 Mixer.

00001646 <MainMenuItem3>:
    1646:	38 2e 20 46 6c 69 67 68 74 20 70 72 6f 66 69 6c     8. Flight profil
    1656:	65 20 32 00                                         e 2.

0000165a <MainMenuItem2>:
    165a:	37 2e 20 46 6c 69 67 68 74 20 70 72 6f 66 69 6c     7. Flight profil
    166a:	65 20 31 00                                         e 1.

0000166e <MainMenuItem10>:
    166e:	36 2e 20 4c 65 76 65 6c 20 6d 65 74 65 72 00        6. Level meter.

0000167d <MainMenuItem8>:
    167d:	35 2e 20 53 65 6e 73 6f 72 20 63 61 6c 69 62 72     5. Sensor calibr
    168d:	61 74 69 6f 6e 00                                   ation.

00001693 <MainMenuItem7>:
    1693:	34 2e 20 53 74 69 63 6b 20 70 6f 6c 61 72 69 74     4. Stick polarit
    16a3:	79 00                                               y.

000016a5 <MainMenuItem9>:
    16a5:	33 2e 20 52 65 63 65 69 76 65 72 20 69 6e 70 75     3. Receiver inpu
    16b5:	74 73 00                                            ts.

000016b8 <MainMenuItem1>:
    16b8:	32 2e 20 52 65 63 65 69 76 65 72 20 73 65 74 75     2. Receiver setu
    16c8:	70 00                                               p.

000016ca <MainMenuItem0>:
    16ca:	31 2e 20 47 65 6e 65 72 61 6c 00                    1. General.

000016d5 <MenuFrame8>:
    16d5:	53 61 76 65 00                                      Save.

000016da <MenuFrame7>:
    16da:	44 65 66 2e 00                                      Def..

000016df <MenuFrame6>:
    16df:	42 61 63 6b 00                                      Back.

000016e4 <MenuFrame5>:
    16e4:	4d 65 6e 75 00                                      Menu.

000016e9 <MenuFrame1>:
    16e9:	45 00                                               E.

000016eb <MenuFrame4>:
    16eb:	44 00                                               D.

000016ed <MenuFrame3>:
    16ed:	43 00                                               C.

000016ef <MenuFrame2>:
    16ef:	42 00                                               B.

000016f1 <MenuFrame0>:
    16f1:	41 00                                               A.

000016f3 <StatusText9>:
    16f3:	4a 69 74 74 65 72 3a 00                             Jitter:.

000016fb <StatusText8>:
    16fb:	50 6f 73 3a 00                                      Pos:.

00001700 <StatusText7>:
    1700:	42 61 74 74 65 72 79 3a 00                          Battery:.

00001709 <StatusText5>:
    1709:	30 00                                               0.

0000170b <StatusText4>:
    170b:	2e 00                                               ..

0000170d <StatusText3>:
    170d:	50 72 6f 66 69 6c 65 3a 00                          Profile:.

00001716 <StatusText1>:
    1716:	4d 6f 64 65 3a 00                                   Mode:.

0000171c <StatusText0>:
    171c:	56 65 72 73 69 6f 6e 3a 20 56 54 4f 4c 20 42 65     Version: VTOL Be
    172c:	74 61 20 33 35 00                                   ta 35.

00001732 <Gyro_Pol>:
    1732:	01 01 01 01 01 01 01 ff ff ff ff 01 01 ff 01 ff     ................
    1742:	01 01                                               ..

00001744 <Gyro_RPY_Order>:
    1744:	00 01 02 01 02 00 00 01 02 00 01 02 01 00 02 02     ................
    1754:	01 00                                               ..

00001756 <lines>:
    1756:	03 0f 1b 27                                         ...'

0000175a <flight_menu_ranges>:
    175a:	00 7f 01 00 50 00 7f 01 00 32 00 7d 01 00 00 00     ....P....2.}....
    176a:	7f 01 00 00 00 7f 01 00 3c 81 7f 01 00 00 00 7f     ........<.......
    177a:	01 00 50 00 7f 01 00 32 00 7d 01 00 00 00 7f 01     ..P....2.}......
    178a:	00 00 00 7f 01 00 3c 81 7f 01 00 00 00 7f 01 00     ......<.........
    179a:	50 00 7f 01 00 32 00 7d 01 00 00 00 7f 01 00 00     P....2.}........
    17aa:	81 7f 01 00 00 00 7f 01 00 00                       ..........

000017b4 <FlightMenuText>:
	...

000017c6 <mixer_menu_ranges>:
    17c6:	00 01 01 01 00 83 7d 01 00 00 01 63 01 00 32 83     ......}....c..2.
    17d6:	7d 01 00 00 83 7d 01 00 00 00 7d 01 00 64 00 7d     }....}....}..d.}
    17e6:	01 00 64 00 02 01 01 00 83 7d 01 00 00 83 7d 01     ..d......}....}.
    17f6:	00 00 83 7d 01 00 00 83 7d 01 00 00 83 7d 01 00     ...}....}....}..
    1806:	00 83 7d 01 00 00 00 02 01 01 00 00 02 01 01 00     ..}.............
    1816:	00 02 01 01 00 00 02 01 01 00 00 02 01 01 00 00     ................
    1826:	02 01 01 00 00 02 01 01 00 00 02 01 01 00 00 02     ................
    1836:	01 01 00 00 02 01 01 00 00 02 01 01 00 00 02 01     ................
    1846:	01 00 00 0d 01 01 0d 83 7d 01 00 00 00 0d 01 01     ........}.......
    1856:	0d 83 7d 01 00 00 00 0d 01 01 0d 83 7d 01 00 00     ..}.........}...
    1866:	00 0d 01 01 0d 83 7d 01 00 00                       ......}...

00001870 <MixerMenuText>:
    1870:	2e 00 00 00 00 00 00 38 00 00 00 00 00 00 44 44     .......8......DD
    1880:	44 44 44 44 44 44 44 44 44 44 ee 00 ee 00 ee 00     DDDDDDDDDD......
    1890:	ee 00                                               ..

00001892 <servo_menu_ranges>:
    1892:	00 01 01 01 00 83 00 01 00 9c 00 7d 01 00 64        ...........}..d

000018a1 <ServoMenuText>:
    18a1:	8d 8d 8d 8d 8d 8d 8d 8d 00 00 00 00 00 00 00 00     ................
	...

000018b9 <rc_menu_ranges>:
    18b9:	00 03 01 01 01 00 04 01 01 04 00 01 01 01 00 00     ................
    18c9:	08 01 01 04 00 01 01 01 00 00 01 01 01 00 00 01     ................
    18d9:	01 01 00 00 04 01 00 03 00 0a 01 00 00 01 63 01     ..............c.
    18e9:	00 32 00 05 01 01 00 1c 32 01 00 26 00 01 01 01     .2......2..&....
    18f9:	01 00 7f 01 00 1e 00 7f 01 00 00 00 01 01 01 00     ................
    1909:	01 7f 01 00 08 01 64 01 00 1e 00 00 00 00 00 00     ......d.........
    1919:	00 00 00 00                                         ....

0000191d <RCMenuText>:
    191d:	3e 69 74 69 8d 8d 8d 00 00 00 7c 00 2c 00 00 77     >iti......|.,..w
    192d:	00 00 00 00                                         ....

00001931 <SQRTSIN>:
    1931:	00 0d 12 16 19 1c 1f 21 23 26 28 29 2b 2d 2f 30     .......!#&()+-/0
    1941:	32 33 35 36 38 39 3a 3b 3d 3e 3f 40 41 42 43 44     235689:;=>?@ABCD
    1951:	45 46 47 48 49 4a 4b 4c 4d 4d 4e 4f 50 51 51 52     EFGHIJKLMMNOPQQR
    1961:	53 53 54 55 55 56 57 57 58 58 59 59 5a 5a 5b 5b     SSTUUVWWXXYYZZ[[
    1971:	5c 5c 5d 5d 5e 5e 5e 5f 5f 5f 60 60 60 61 61 61     \\]]^^^___```aaa
    1981:	62 62 62 62 62 63 63 63 63 63 63 63 64 64 64 64     bbbbbcccccccdddd
    1991:	64 64 64 64 64                                      ddddd

00001996 <SIN>:
    1996:	00 02 03 05 06 08 0a 0b 0d 0e 10 11 13 14 16 17     ................
    19a6:	19 1a 1c 1d 1f 20 22 23 25 26 28 29 2b 2c 2d 2f     ..... "#%&()+,-/
    19b6:	30 32 33 34 36 37 38 3a 3b 3c 3d 3f 40 41 42 43     0234678:;<=?@ABC
    19c6:	44 46 47 48 49 4a 4b 4c 4d 4e 4f 50 51 52 53 54     DFGHIJKLMNOPQRST
    19d6:	54 55 56 57 58 58 59 5a 5a 5b 5c 5c 5d 5e 5e 5f     TUVWXXYZZ[\\]^^_
    19e6:	5f 60 60 60 61 61 62 62 62 63 63 63 63 63 64 64     _```aabbbcccccdd
    19f6:	64 64 64 64 64 00                                   ddddd.

000019fc <__ctors_end>:
    19fc:	11 24       	eor	r1, r1
    19fe:	1f be       	out	0x3f, r1	; 63
    1a00:	cf ef       	ldi	r28, 0xFF	; 255
    1a02:	d0 e1       	ldi	r29, 0x10	; 16
    1a04:	de bf       	out	0x3e, r29	; 62
    1a06:	cd bf       	out	0x3d, r28	; 61

00001a08 <__do_copy_data>:
    1a08:	15 e0       	ldi	r17, 0x05	; 5
    1a0a:	a0 e0       	ldi	r26, 0x00	; 0
    1a0c:	b1 e0       	ldi	r27, 0x01	; 1
    1a0e:	e0 e6       	ldi	r30, 0x60	; 96
    1a10:	fe e7       	ldi	r31, 0x7E	; 126
    1a12:	02 c0       	rjmp	.+4      	; 0x1a18 <__do_copy_data+0x10>
    1a14:	05 90       	lpm	r0, Z+
    1a16:	0d 92       	st	X+, r0
    1a18:	a8 30       	cpi	r26, 0x08	; 8
    1a1a:	b1 07       	cpc	r27, r17
    1a1c:	d9 f7       	brne	.-10     	; 0x1a14 <__do_copy_data+0xc>

00001a1e <__do_clear_bss>:
    1a1e:	27 e0       	ldi	r18, 0x07	; 7
    1a20:	a8 e0       	ldi	r26, 0x08	; 8
    1a22:	b5 e0       	ldi	r27, 0x05	; 5
    1a24:	01 c0       	rjmp	.+2      	; 0x1a28 <.do_clear_bss_start>

00001a26 <.do_clear_bss_loop>:
    1a26:	1d 92       	st	X+, r1

00001a28 <.do_clear_bss_start>:
    1a28:	a1 3c       	cpi	r26, 0xC1	; 193
    1a2a:	b2 07       	cpc	r27, r18
    1a2c:	e1 f7       	brne	.-8      	; 0x1a26 <.do_clear_bss_loop>
    1a2e:	0e 94 a3 16 	call	0x2d46	; 0x2d46 <main>
    1a32:	0c 94 2e 3f 	jmp	0x7e5c	; 0x7e5c <_exit>

00001a36 <__bad_interrupt>:
    1a36:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00001a3a <glcd_delay>:
;*************************************************************************

	.global glcd_delay
	.func   glcd_delay
glcd_delay:
	nop					// 1 5 * 50ns = 250ns = 4MHz
    1a3a:	00 00       	nop
	ret					// 4 (5 cycles)
    1a3c:	08 95       	ret

00001a3e <bind_master>:
;*************************************************************************

	.global bind_master
	.func   bind_master
bind_master:
	push	YL			//	1
    1a3e:	cf 93       	push	r28
	push	XL			//	1
    1a40:	af 93       	push	r26

	ldi		XL,0x5		// 	1 Master is 5 pulses
    1a42:	a5 e0       	ldi	r26, 0x05	; 5

00001a44 <master_loop>:
master_loop:
	cbi 	BIND		//	2
    1a44:	58 98       	cbi	0x0b, 0	; 11
	ldi		YL,0x76		// 	1 		118us
    1a46:	c6 e7       	ldi	r28, 0x76	; 118
	call	VarDelay	//	4
    1a48:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <VarDelay>
	sbi		BIND		//	2
    1a4c:	58 9a       	sbi	0x0b, 0	; 11
	ldi		YL,0x7A		// 	1 		122us
    1a4e:	ca e7       	ldi	r28, 0x7A	; 122
	call	VarDelay	//	4
    1a50:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <VarDelay>
	dec		XL			//	1
    1a54:	aa 95       	dec	r26
	brne	master_loop	//  2 1
    1a56:	b1 f7       	brne	.-20     	; 0x1a44 <master_loop>

	pop		XL			//	  1
    1a58:	af 91       	pop	r26
	pop		YL			//	  1
    1a5a:	cf 91       	pop	r28
	ret					//	  4 
    1a5c:	08 95       	ret

00001a5e <VarDelay>:
; 5 cycles to configure and call, 4 to return and 2 to change bit afterwards = 11
; 20 cycles makes 1.0us
;*************************************************************************

VarDelay:
	rjmp .+0			// 2
    1a5e:	00 c0       	rjmp	.+0      	; 0x1a60 <VarDelay+0x2>
	rjmp .+0			// 2
    1a60:	00 c0       	rjmp	.+0      	; 0x1a62 <VarDelay+0x4>
	rjmp .+0			// 2
    1a62:	00 c0       	rjmp	.+0      	; 0x1a64 <VarDelay+0x6>
	rjmp .+0			// 2
    1a64:	00 c0       	rjmp	.+0      	; 0x1a66 <VarDelay+0x8>
	rjmp .+0			// 2
    1a66:	00 c0       	rjmp	.+0      	; 0x1a68 <VarDelay+0xa>
	rjmp .+0			// 2
    1a68:	00 c0       	rjmp	.+0      	; 0x1a6a <VarDelay+0xc>
	rjmp .+0			// 2
    1a6a:	00 c0       	rjmp	.+0      	; 0x1a6c <VarDelay+0xe>
	rjmp .+0			// 2
    1a6c:	00 c0       	rjmp	.+0      	; 0x1a6e <VarDelay+0x10>
	nop					// 1
    1a6e:	00 00       	nop
	dec 	YL			// 1
    1a70:	ca 95       	dec	r28
	brne	VarDelay	// 2 1
    1a72:	a9 f7       	brne	.-22     	; 0x1a5e <VarDelay>
	ret					//   4 
    1a74:	08 95       	ret

00001a76 <output_servo_ppm_asm>:

	.global output_servo_ppm_asm
	.func   output_servo_ppm_asm
output_servo_ppm_asm:
// Save regs
	push	ZL			// 2			
    1a76:	ef 93       	push	r30
	push	ZH			// 2
    1a78:	ff 93       	push	r31
	push	XL			// 2
    1a7a:	af 93       	push	r26
	push	XH			// 2
    1a7c:	bf 93       	push	r27
	push	YL			// 2
    1a7e:	cf 93       	push	r28
	push	YH			// 2
    1a80:	df 93       	push	r29
	push	16			// 2
    1a82:	0f 93       	push	r16
	push	17			// 2
    1a84:	1f 93       	push	r17
	push	18			// 2
    1a86:	2f 93       	push	r18
	push	19			// 2
    1a88:	3f 93       	push	r19
	push	20			// 2
    1a8a:	4f 93       	push	r20
	push	21			// 2
    1a8c:	5f 93       	push	r21
	push	22			// 2
    1a8e:	6f 93       	push	r22
	push	23			// 2
    1a90:	7f 93       	push	r23

// Get start address of ServoOut[0] into Z
	mov		ZL, r24		// 1 Low byte
    1a92:	e8 2f       	mov	r30, r24
	mov		ZH, r25		// 1 High byte
    1a94:	f9 2f       	mov	r31, r25

// Save initial address for later
	push	24			// 2
    1a96:	8f 93       	push	r24
	push	25			// 2
    1a98:	9f 93       	push	r25

// Trim 16-bit values to suit individual needs, 
// Save result and copy lower 3 bits to r16 to r23 (96 cycles)

// M1
	ld		XL, Z+ 		// 2			Load XL with data at address in Z
    1a9a:	a1 91       	ld	r26, Z+
	ld		XH, Z+		// 2			Load XH with data at address in Z+1
    1a9c:	b1 91       	ld	r27, Z+
	subi	XL,	0x4a	// 1 			Trim servo pulse
    1a9e:	aa 54       	subi	r26, 0x4A	; 74
	sbci 	XH,	0x03	// 1
    1aa0:	b3 40       	sbci	r27, 0x03	; 3
	push	XL 			// 2			Save trimmed value to the stack
    1aa2:	af 93       	push	r26
	push	XH 			// 2
    1aa4:	bf 93       	push	r27
	andi	XL,	0x07	// 1			And all but first 3 bits
    1aa6:	a7 70       	andi	r26, 0x07	; 7
	mov		r23,XL		// 1 (12)		Copy 8-bit result to regs
    1aa8:	7a 2f       	mov	r23, r26
// M2
	ld		XL, Z+
    1aaa:	a1 91       	ld	r26, Z+
	ld		XH, Z+
    1aac:	b1 91       	ld	r27, Z+
	subi	XL,	0xe6
    1aae:	a6 5e       	subi	r26, 0xE6	; 230
	sbci 	XH,	0x02
    1ab0:	b2 40       	sbci	r27, 0x02	; 2
	push	XL 		
    1ab2:	af 93       	push	r26
	push	XH 		
    1ab4:	bf 93       	push	r27
	andi	XL,	0x07
    1ab6:	a7 70       	andi	r26, 0x07	; 7
	mov		r22,XL	
    1ab8:	6a 2f       	mov	r22, r26
// M3
	ld		XL, Z+
    1aba:	a1 91       	ld	r26, Z+
	ld		XH, Z+
    1abc:	b1 91       	ld	r27, Z+
	subi	XL,	0x82
    1abe:	a2 58       	subi	r26, 0x82	; 130
	sbci 	XH,	0x02
    1ac0:	b2 40       	sbci	r27, 0x02	; 2
	push	XL 		
    1ac2:	af 93       	push	r26
	push	XH 		
    1ac4:	bf 93       	push	r27
	andi	XL,	0x07
    1ac6:	a7 70       	andi	r26, 0x07	; 7
	mov		r21,XL	
    1ac8:	5a 2f       	mov	r21, r26
// M4
	ld		XL, Z+
    1aca:	a1 91       	ld	r26, Z+
	ld		XH, Z+
    1acc:	b1 91       	ld	r27, Z+
	subi	XL,	0x1e
    1ace:	ae 51       	subi	r26, 0x1E	; 30
	sbci 	XH,	0x02
    1ad0:	b2 40       	sbci	r27, 0x02	; 2
	push	XL 	
    1ad2:	af 93       	push	r26
	push	XH 	
    1ad4:	bf 93       	push	r27
	andi	XL,	0x07
    1ad6:	a7 70       	andi	r26, 0x07	; 7
	mov		r20,XL	
    1ad8:	4a 2f       	mov	r20, r26
// M5
	ld		XL, Z+
    1ada:	a1 91       	ld	r26, Z+
	ld		XH, Z+
    1adc:	b1 91       	ld	r27, Z+
	subi	XL,	0xb9
    1ade:	a9 5b       	subi	r26, 0xB9	; 185
	sbci 	XH,	0x01
    1ae0:	b1 40       	sbci	r27, 0x01	; 1
	push	XL 	
    1ae2:	af 93       	push	r26
	push	XH 	
    1ae4:	bf 93       	push	r27
	andi	XL,	0x07
    1ae6:	a7 70       	andi	r26, 0x07	; 7
	mov		r19,XL	
    1ae8:	3a 2f       	mov	r19, r26
// M6
	ld		XL, Z+
    1aea:	a1 91       	ld	r26, Z+
	ld		XH, Z+
    1aec:	b1 91       	ld	r27, Z+
	subi	XL,	0x55
    1aee:	a5 55       	subi	r26, 0x55	; 85
	sbci 	XH,	0x01
    1af0:	b1 40       	sbci	r27, 0x01	; 1
	push	XL 	
    1af2:	af 93       	push	r26
	push	XH 	
    1af4:	bf 93       	push	r27
	andi	XL,	0x07
    1af6:	a7 70       	andi	r26, 0x07	; 7
	mov		r18,XL
    1af8:	2a 2f       	mov	r18, r26
// M7
	ld		XL, Z+
    1afa:	a1 91       	ld	r26, Z+
	ld		XH, Z+
    1afc:	b1 91       	ld	r27, Z+
	subi	XL,	0xf1
    1afe:	a1 5f       	subi	r26, 0xF1	; 241
	sbci 	XH,	0x00
    1b00:	b0 40       	sbci	r27, 0x00	; 0
	push	XL 	
    1b02:	af 93       	push	r26
	push	XH 
    1b04:	bf 93       	push	r27
	andi	XL,	0x07
    1b06:	a7 70       	andi	r26, 0x07	; 7
	mov		r17,XL
    1b08:	1a 2f       	mov	r17, r26
// M8
	ld		XL, Z+
    1b0a:	a1 91       	ld	r26, Z+
	ld		XH, Z+
    1b0c:	b1 91       	ld	r27, Z+
	subi	XL,	0x8d
    1b0e:	ad 58       	subi	r26, 0x8D	; 141
	sbci 	XH,	0x00
    1b10:	b0 40       	sbci	r27, 0x00	; 0
	push	XL
    1b12:	af 93       	push	r26
	push	XH 
    1b14:	bf 93       	push	r27
	andi	XL,	0x07
    1b16:	a7 70       	andi	r26, 0x07	; 7
	mov		r16,XL
    1b18:	0a 2f       	mov	r16, r26
// Time out lower 3 bits of pulse value (Zero to 7us)
// Each chunk is always executed in 1+10+1+147 = 159 cycles or 7.95us
// This does affect the inter-pulse delay, but not the pulsewidth.

// M1
	mov		r25,r23		// 1
    1b1a:	97 2f       	mov	r25, r23
	call	DelayHigh	// 10 (where r25 = 7)
    1b1c:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <DelayHigh>
	sbi 	M1			// 1
    1b20:	46 9a       	sbi	0x08, 6	; 8
	call	DelayLow	// 7 + 140 (where r25 = 0)
    1b22:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <DelayLow>
	call    pwm_delay   // 100us
    1b26:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <pwm_delay>
	call    pwm_delay
    1b2a:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <pwm_delay>

// M2
	mov		r25,r22
    1b2e:	96 2f       	mov	r25, r22
	call	DelayHigh
    1b30:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <DelayHigh>
	sbi 	M2
    1b34:	44 9a       	sbi	0x08, 4	; 8
	call	DelayLow
    1b36:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <DelayLow>
	call    pwm_delay   // 100us
    1b3a:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <pwm_delay>
	call    pwm_delay
    1b3e:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <pwm_delay>

// M3
	mov		r25,r21
    1b42:	95 2f       	mov	r25, r21
	call	DelayHigh
    1b44:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <DelayHigh>
	sbi 	M3
    1b48:	42 9a       	sbi	0x08, 2	; 8
	call	DelayLow
    1b4a:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <DelayLow>
	call    pwm_delay   // 100us
    1b4e:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <pwm_delay>
	call    pwm_delay
    1b52:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <pwm_delay>

// M4
	mov		r25,r20
    1b56:	94 2f       	mov	r25, r20
	call	DelayHigh
    1b58:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <DelayHigh>
	sbi 	M4
    1b5c:	43 9a       	sbi	0x08, 3	; 8
	call	DelayLow
    1b5e:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <DelayLow>
	call    pwm_delay   // 100us
    1b62:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <pwm_delay>
	call    pwm_delay
    1b66:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <pwm_delay>

// M5
	mov		r25,r19
    1b6a:	93 2f       	mov	r25, r19
	call	DelayHigh
    1b6c:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <DelayHigh>
	sbi 	M5
    1b70:	41 9a       	sbi	0x08, 1	; 8
	call	DelayLow
    1b72:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <DelayLow>
	call    pwm_delay   // 100us
    1b76:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <pwm_delay>
	call    pwm_delay
    1b7a:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <pwm_delay>

// M6
	mov		r25,r18
    1b7e:	92 2f       	mov	r25, r18
	call	DelayHigh
    1b80:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <DelayHigh>
	sbi 	M6
    1b84:	40 9a       	sbi	0x08, 0	; 8
	call	DelayLow
    1b86:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <DelayLow>
	call    pwm_delay   // 100us
    1b8a:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <pwm_delay>
	call    pwm_delay
    1b8e:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <pwm_delay>

// M7
	mov		r25,r17
    1b92:	91 2f       	mov	r25, r17
	call	DelayHigh
    1b94:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <DelayHigh>
	sbi 	M7
    1b98:	45 9a       	sbi	0x08, 5	; 8
	call	DelayLow
    1b9a:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <DelayLow>
	call    pwm_delay   // 100us
    1b9e:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <pwm_delay>
	call    pwm_delay
    1ba2:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <pwm_delay>

// M8
	mov		r25,r16
    1ba6:	90 2f       	mov	r25, r16
	call	DelayHigh
    1ba8:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <DelayHigh>
	sbi 	M8
    1bac:	47 9a       	sbi	0x08, 7	; 8
	call	DelayLow
    1bae:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <DelayLow>
// At this point, the largest pulse that we can generate is 256 * 8 = 2.048ms
// However we would like to be able to generate up to 2.100ms (150%) - an extra 52us
// So we can fluff it out another 200us so that we can subtract enough to keep r16 under 0xff or 256 :)
// With this setup, M1 can go down to 850 and M8 can go up to 2150

	call    pwm_delay   // 150us
    1bb2:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <pwm_delay>
	call    pwm_delay
    1bb6:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <pwm_delay>
	call    pwm_delay
    1bba:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <pwm_delay>

// Copy trimmed array data into regs
// This now represents steps of 8us chunks
	pop		XH			// M8
    1bbe:	bf 91       	pop	r27
	pop		XL
    1bc0:	af 91       	pop	r26
	call	shuffle_8
    1bc2:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <shuffle_8>
	mov		r16,XL
    1bc6:	0a 2f       	mov	r16, r26
	pop		XH			// M7
    1bc8:	bf 91       	pop	r27
	pop		XL
    1bca:	af 91       	pop	r26
	call	shuffle_8
    1bcc:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <shuffle_8>
	mov		r17,XL
    1bd0:	1a 2f       	mov	r17, r26
	pop		XH			// M6
    1bd2:	bf 91       	pop	r27
	pop		XL
    1bd4:	af 91       	pop	r26
	call	shuffle_8
    1bd6:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <shuffle_8>
	mov		r18,XL
    1bda:	2a 2f       	mov	r18, r26
	pop		XH			// M5
    1bdc:	bf 91       	pop	r27
	pop		XL
    1bde:	af 91       	pop	r26
	call	shuffle_8
    1be0:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <shuffle_8>
	mov		r19,XL
    1be4:	3a 2f       	mov	r19, r26
	pop		XH			// M4
    1be6:	bf 91       	pop	r27
	pop		XL
    1be8:	af 91       	pop	r26
	call	shuffle_8
    1bea:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <shuffle_8>
	mov		r20,XL
    1bee:	4a 2f       	mov	r20, r26
	pop		XH			// M3
    1bf0:	bf 91       	pop	r27
	pop		XL
    1bf2:	af 91       	pop	r26
	call	shuffle_8
    1bf4:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <shuffle_8>
	mov		r21,XL
    1bf8:	5a 2f       	mov	r21, r26
	pop		XH			// M2
    1bfa:	bf 91       	pop	r27
	pop		XL
    1bfc:	af 91       	pop	r26
	call	shuffle_8
    1bfe:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <shuffle_8>
	mov		r22,XL
    1c02:	6a 2f       	mov	r22, r26
	pop		XH			// M1
    1c04:	bf 91       	pop	r27
	pop		XL
    1c06:	af 91       	pop	r26
	call	shuffle_8
    1c08:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <shuffle_8>
	mov		r23,XL
    1c0c:	7a 2f       	mov	r23, r26

// Loop prep
	ldi 	YL,0x13		// 1			Set loop count to 113h or 275 (275 * 8us = 2200us)
    1c0e:	c3 e1       	ldi	r28, 0x13	; 19
	ldi		YH,0x01		// 1
    1c10:	d1 e0       	ldi	r29, 0x01	; 1
	clr		0			// 1 (7)
    1c12:	00 24       	eor	r0, r0

00001c14 <nloop>:

// Ninja loop - 7 cycles each side (8 x 7 = 56 + 6 to loop + 98 pad = 160 cycles)
// 20 cyles = 1us, 160 cycles = 8us

nloop:
	subi	r23,1		// 1 			ServoOut1
    1c14:	71 50       	subi	r23, 0x01	; 1
	brne	j1			// 2	1	
    1c16:	19 f4       	brne	.+6      	; 0x1c1e <j1>
	cbi 	M1			// 		2		Clear output M1 if done (+5 = 1448 = 72.4us = 48)
    1c18:	46 98       	cbi	0x08, 6	; 8
	jmp		jj1			//		3
    1c1a:	0c 94 11 0e 	jmp	0x1c22	; 0x1c22 <jj1>

00001c1e <j1>:
j1:
	rjmp 	.+0			// 2
    1c1e:	00 c0       	rjmp	.+0      	; 0x1c20 <j1+0x2>
	rjmp 	.+0			// 2
    1c20:	00 c0       	rjmp	.+0      	; 0x1c22 <jj1>

00001c22 <jj1>:
jj1:
	subi	r22,1		// 1			ServoOut2
    1c22:	61 50       	subi	r22, 0x01	; 1
	brne	j2			// 2	1
    1c24:	19 f4       	brne	.+6      	; 0x1c2c <j2>
	cbi 	M2			// 		2		Clear output M2 if done (+11 = 1285 = 64.25us = 40)
    1c26:	44 98       	cbi	0x08, 4	; 8
	jmp		jj2			//		3
    1c28:	0c 94 18 0e 	jmp	0x1c30	; 0x1c30 <jj2>

00001c2c <j2>:
j2:
	rjmp	.+0
    1c2c:	00 c0       	rjmp	.+0      	; 0x1c2e <j2+0x2>
	rjmp	.+0
    1c2e:	00 c0       	rjmp	.+0      	; 0x1c30 <jj2>

00001c30 <jj2>:
jj2:
	subi	r21,1
    1c30:	51 50       	subi	r21, 0x01	; 1
	brne	j3
    1c32:	19 f4       	brne	.+6      	; 0x1c3a <j3>
	cbi 	M3
    1c34:	42 98       	cbi	0x08, 2	; 8
	jmp		jj3
    1c36:	0c 94 1f 0e 	jmp	0x1c3e	; 0x1c3e <jj3>

00001c3a <j3>:
j3:
	rjmp	.+0
    1c3a:	00 c0       	rjmp	.+0      	; 0x1c3c <j3+0x2>
	rjmp	.+0
    1c3c:	00 c0       	rjmp	.+0      	; 0x1c3e <jj3>

00001c3e <jj3>:
jj3:
	subi 	r20,1
    1c3e:	41 50       	subi	r20, 0x01	; 1
	brne	j4
    1c40:	19 f4       	brne	.+6      	; 0x1c48 <j4>
	cbi 	M4
    1c42:	43 98       	cbi	0x08, 3	; 8
	jmp		jj4	
    1c44:	0c 94 26 0e 	jmp	0x1c4c	; 0x1c4c <jj4>

00001c48 <j4>:
j4:
	rjmp 	.+0
    1c48:	00 c0       	rjmp	.+0      	; 0x1c4a <j4+0x2>
	rjmp 	.+0
    1c4a:	00 c0       	rjmp	.+0      	; 0x1c4c <jj4>

00001c4c <jj4>:
jj4:
	subi	r19,1
    1c4c:	31 50       	subi	r19, 0x01	; 1
	brne	j5
    1c4e:	19 f4       	brne	.+6      	; 0x1c56 <j5>
	cbi 	M5
    1c50:	41 98       	cbi	0x08, 1	; 8
	jmp		jj5
    1c52:	0c 94 2d 0e 	jmp	0x1c5a	; 0x1c5a <jj5>

00001c56 <j5>:
j5:
	rjmp 	.+0
    1c56:	00 c0       	rjmp	.+0      	; 0x1c58 <j5+0x2>
	rjmp 	.+0
    1c58:	00 c0       	rjmp	.+0      	; 0x1c5a <jj5>

00001c5a <jj5>:
jj5:
	subi	r18,1
    1c5a:	21 50       	subi	r18, 0x01	; 1
	brne	j6
    1c5c:	19 f4       	brne	.+6      	; 0x1c64 <j6>
	cbi 	M6
    1c5e:	40 98       	cbi	0x08, 0	; 8
	jmp		jj6
    1c60:	0c 94 34 0e 	jmp	0x1c68	; 0x1c68 <jj6>

00001c64 <j6>:
j6:
	rjmp 	.+0
    1c64:	00 c0       	rjmp	.+0      	; 0x1c66 <j6+0x2>
	rjmp	.+0
    1c66:	00 c0       	rjmp	.+0      	; 0x1c68 <jj6>

00001c68 <jj6>:
jj6:
	subi	r17,1
    1c68:	11 50       	subi	r17, 0x01	; 1
	brne	j7
    1c6a:	19 f4       	brne	.+6      	; 0x1c72 <j7>
	cbi 	M7
    1c6c:	45 98       	cbi	0x08, 5	; 8
	jmp		jj7
    1c6e:	0c 94 3b 0e 	jmp	0x1c76	; 0x1c76 <jj7>

00001c72 <j7>:
j7:
	rjmp 	.+0
    1c72:	00 c0       	rjmp	.+0      	; 0x1c74 <j7+0x2>
	rjmp 	.+0
    1c74:	00 c0       	rjmp	.+0      	; 0x1c76 <jj7>

00001c76 <jj7>:
jj7:
	subi 	r16,1		// ServoOut 8
    1c76:	01 50       	subi	r16, 0x01	; 1
	brne	j8
    1c78:	19 f4       	brne	.+6      	; 0x1c80 <j8>
	cbi 	M8
    1c7a:	47 98       	cbi	0x08, 7	; 8
	jmp		jj8
    1c7c:	0c 94 42 0e 	jmp	0x1c84	; 0x1c84 <jj8>

00001c80 <j8>:
j8:
	rjmp 	.+0
    1c80:	00 c0       	rjmp	.+0      	; 0x1c82 <j8+0x2>
	rjmp 	.+0
    1c82:	00 c0       	rjmp	.+0      	; 0x1c84 <jj8>

00001c84 <jj8>:
jj8:
	call	pad_100_delay // (100)
    1c84:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <pad_100_delay>

	subi 	YL,1		// 1
    1c88:	c1 50       	subi	r28, 0x01	; 1
	sbc 	YH,0		// 1
    1c8a:	d0 09       	sbc	r29, r0
	breq	skiploop	// 1	2		Loop until zero - 1 false 2 true
    1c8c:	11 f0       	breq	.+4      	; 0x1c92 <skiploop>
	jmp		nloop		// 3			Can't reach nloop with a brne alone
    1c8e:	0c 94 0a 0e 	jmp	0x1c14	; 0x1c14 <nloop>

00001c92 <skiploop>:

skiploop:
	pop		25			// 		2		Restore regs
    1c92:	9f 91       	pop	r25
	pop		24			// 		2
    1c94:	8f 91       	pop	r24
	pop		23			//		2
    1c96:	7f 91       	pop	r23
	pop		22			//		2
    1c98:	6f 91       	pop	r22
	pop		21			//		2
    1c9a:	5f 91       	pop	r21
	pop		20			//		2
    1c9c:	4f 91       	pop	r20
	pop		19			//		2
    1c9e:	3f 91       	pop	r19
	pop		18			//		2
    1ca0:	2f 91       	pop	r18
	pop		17			//		2
    1ca2:	1f 91       	pop	r17
	pop		16			//		2
    1ca4:	0f 91       	pop	r16
	pop		YH			//		2
    1ca6:	df 91       	pop	r29
	pop		YL			//		2
    1ca8:	cf 91       	pop	r28
	pop		XH			//		2
    1caa:	bf 91       	pop	r27
	pop		XL			//		2
    1cac:	af 91       	pop	r26
	pop		ZH			// 		2
    1cae:	ff 91       	pop	r31
	pop		ZL			//		2
    1cb0:	ef 91       	pop	r30

	ret					//		4
    1cb2:	08 95       	ret

00001cb4 <output_servo_ppm_asm3>:
;*************************************************************************

	.global output_servo_ppm_asm3
	.func   output_servo_ppm_asm3
output_servo_ppm_asm3:
	push	16			// Save regs
    1cb4:	0f 93       	push	r16
	push	17
    1cb6:	1f 93       	push	r17
	push	18
    1cb8:	2f 93       	push	r18

	ldi 	16,0x34		// 1			Set loop count to 834h or 2100
    1cba:	04 e3       	ldi	r16, 0x34	; 52
	ldi		17,0x08	
    1cbc:	18 e0       	ldi	r17, 0x08	; 8
	clr		0
    1cbe:	00 24       	eor	r0, r0

00001cc0 <jump_table>:

jump_table:
	cpi		r24,0x00	; 0				
    1cc0:	80 30       	cpi	r24, 0x00	; 0
	breq	in1
    1cc2:	71 f0       	breq	.+28     	; 0x1ce0 <in1>
	cpi		r24,0x01	; 1
    1cc4:	81 30       	cpi	r24, 0x01	; 1
	breq	in2
    1cc6:	79 f0       	breq	.+30     	; 0x1ce6 <in2>
	cpi		r24,0x02	; 2
    1cc8:	82 30       	cpi	r24, 0x02	; 2
	breq	in3
    1cca:	81 f0       	breq	.+32     	; 0x1cec <in3>
	cpi		r24,0x03	; 3
    1ccc:	83 30       	cpi	r24, 0x03	; 3
	breq	in4
    1cce:	89 f0       	breq	.+34     	; 0x1cf2 <in4>
	cpi		r24,0x04	; 4
    1cd0:	84 30       	cpi	r24, 0x04	; 4
	breq	in5
    1cd2:	91 f0       	breq	.+36     	; 0x1cf8 <in5>
	cpi		r24,0x05	; 5
    1cd4:	85 30       	cpi	r24, 0x05	; 5
	breq	in6
    1cd6:	99 f0       	breq	.+38     	; 0x1cfe <in6>
	cpi		r24,0x06	; 6
    1cd8:	86 30       	cpi	r24, 0x06	; 6
	breq	in7
    1cda:	a1 f0       	breq	.+40     	; 0x1d04 <in7>
	cpi		r24,0x07	; 7
    1cdc:	87 30       	cpi	r24, 0x07	; 7
	breq	in8
    1cde:	a9 f0       	breq	.+42     	; 0x1d0a <in8>

00001ce0 <in1>:

in1:sbi 	M1			// Set output high
    1ce0:	46 9a       	sbi	0x08, 6	; 8
	jmp		loopin
    1ce2:	0c 94 88 0e 	jmp	0x1d10	; 0x1d10 <loopin>

00001ce6 <in2>:
in2:sbi 	M2
    1ce6:	44 9a       	sbi	0x08, 4	; 8
	jmp		loopin
    1ce8:	0c 94 88 0e 	jmp	0x1d10	; 0x1d10 <loopin>

00001cec <in3>:
in3:sbi 	M3	
    1cec:	42 9a       	sbi	0x08, 2	; 8
	jmp		loopin
    1cee:	0c 94 88 0e 	jmp	0x1d10	; 0x1d10 <loopin>

00001cf2 <in4>:
in4:sbi 	M4
    1cf2:	43 9a       	sbi	0x08, 3	; 8
	jmp		loopin
    1cf4:	0c 94 88 0e 	jmp	0x1d10	; 0x1d10 <loopin>

00001cf8 <in5>:
in5:sbi 	M5
    1cf8:	41 9a       	sbi	0x08, 1	; 8
	jmp		loopin
    1cfa:	0c 94 88 0e 	jmp	0x1d10	; 0x1d10 <loopin>

00001cfe <in6>:
in6:sbi 	M6
    1cfe:	40 9a       	sbi	0x08, 0	; 8
	jmp		loopin
    1d00:	0c 94 88 0e 	jmp	0x1d10	; 0x1d10 <loopin>

00001d04 <in7>:
in7:sbi 	M7
    1d04:	45 9a       	sbi	0x08, 5	; 8
	jmp		loopin
    1d06:	0c 94 88 0e 	jmp	0x1d10	; 0x1d10 <loopin>

00001d0a <in8>:
in8:sbi 	M8
    1d0a:	47 9a       	sbi	0x08, 7	; 8
	jmp		loopin
    1d0c:	0c 94 88 0e 	jmp	0x1d10	; 0x1d10 <loopin>

00001d10 <loopin>:

// Loop - 20 cycles = 1us
loopin:
						// <---------	Left column is skip execution path
	rjmp .+0			// 2 	<----	Right column is pulse end execution path
    1d10:	00 c0       	rjmp	.+0      	; 0x1d12 <loopin+0x2>
	rjmp .+0			// 2
    1d12:	00 c0       	rjmp	.+0      	; 0x1d14 <loopin+0x4>
	rjmp .+0			// 2
    1d14:	00 c0       	rjmp	.+0      	; 0x1d16 <loopin+0x6>
	rjmp .+0			// 2
    1d16:	00 c0       	rjmp	.+0      	; 0x1d18 <loopin+0x8>
	rjmp .+0			// 2
    1d18:	00 c0       	rjmp	.+0      	; 0x1d1a <loopin+0xa>
	rjmp .+0			// 2
    1d1a:	00 c0       	rjmp	.+0      	; 0x1d1c <loopin+0xc>

	subi	r22,1		// 1 			Time servo pulse
    1d1c:	61 50       	subi	r22, 0x01	; 1
	sbc 	r23,0		// 1
    1d1e:	70 09       	sbc	r23, r0
	brne	loopout		// 2	1
    1d20:	11 f4       	brne	.+4      	; 0x1d26 <loopout>

// Clear outputs if done
	ldi		r18,0x00	 // 1
    1d22:	20 e0       	ldi	r18, 0x00	; 0
	out 	SERVO_OUT_KK20,r18// 1			Boom.
    1d24:	28 b9       	out	0x08, r18	; 8

00001d26 <loopout>:
	out 	SERVO_OUT_KK21,r18// 1			KK2.1 has a couple of outputs on Port A also.
#endif

// Exit
loopout:
	subi 	16,1		// 1			+4 cycles = total 20 cycles
    1d26:	01 50       	subi	r16, 0x01	; 1
	sbc 	17,0		// 1
    1d28:	10 09       	sbc	r17, r0
	brne	loopin		// 2	1		Loop until zero
    1d2a:	91 f7       	brne	.-28     	; 0x1d10 <loopin>

	pop		18
    1d2c:	2f 91       	pop	r18
	pop		17			// Restore regs
    1d2e:	1f 91       	pop	r17
	pop		16
    1d30:	0f 91       	pop	r16
	ret	
    1d32:	08 95       	ret

00001d34 <pwm_delay>:
;*************************************************************************	
; void pwm_delay(void) 50us output spacing delay (8 cycle loop - 400ns)
;*************************************************************************

pwm_delay:				// 4 to call
	push	16			// 1
    1d34:	0f 93       	push	r16
	ldi 	16,0x65		// 1
    1d36:	05 e6       	ldi	r16, 0x65	; 101

00001d38 <pwm_loop>:

pwm_loop:
	rjmp .+0			// 2
    1d38:	00 c0       	rjmp	.+0      	; 0x1d3a <pwm_loop+0x2>
	rjmp .+0			// 2
    1d3a:	00 c0       	rjmp	.+0      	; 0x1d3c <pwm_loop+0x4>
	rjmp .+0			// 2
    1d3c:	00 c0       	rjmp	.+0      	; 0x1d3e <pwm_loop+0x6>
	subi	r16,1		// 1
    1d3e:	01 50       	subi	r16, 0x01	; 1
	brne	pwm_loop	// 2  1
    1d40:	d9 f7       	brne	.-10     	; 0x1d38 <pwm_loop>

00001d42 <pwm_exit>:

pwm_exit:
	pop		16			//    1
    1d42:	0f 91       	pop	r16
	ret					//    4 to return
    1d44:	08 95       	ret

00001d46 <pad_100_delay>:
; pad_100_delay 98 cycle padding delay
; Takes 4 to call, so we need 94 cycles burnt here
;*************************************************************************

pad_100_delay:
	push	16			// 		2		Save regs
    1d46:	0f 93       	push	r16
	ldi 	16,0x09		// 		1		Set loop count to 09h or 9
    1d48:	09 e0       	ldi	r16, 0x09	; 9

00001d4a <pad_100>:

pad_100:				//				9 cycles, 8 on last
	rjmp .+0			// 2
    1d4a:	00 c0       	rjmp	.+0      	; 0x1d4c <pad_100+0x2>
	rjmp .+0			// 2			8 x 9cyc + 8 = 80
    1d4c:	00 c0       	rjmp	.+0      	; 0x1d4e <pad_100+0x4>
	rjmp .+0			// 2
    1d4e:	00 c0       	rjmp	.+0      	; 0x1d50 <pad_100+0x6>

	subi 	16,1		// 1
    1d50:	01 50       	subi	r16, 0x01	; 1
	brne	pad_100		// 2	1		Loop until zero	
    1d52:	d9 f7       	brne	.-10     	; 0x1d4a <pad_100>

	nop					// 		1		Trim to precisely the right value
    1d54:	00 00       	nop
	rjmp .+0			// 		2
    1d56:	00 c0       	rjmp	.+0      	; 0x1d58 <pad_100+0xe>
	rjmp .+0			// 		2
    1d58:	00 c0       	rjmp	.+0      	; 0x1d5a <pad_100+0x10>

	pop		16			// 		2		Restore regs
    1d5a:	0f 91       	pop	r16
	ret					// 		4 (94 cycles)
    1d5c:	08 95       	ret

00001d5e <us_delay>:
; void us_delay(void) 1us delay for ninja skills
; Takes 4 to call, 4 to return, so we need 12 cycles burnt here
;*************************************************************************

us_delay:
	rjmp .+0			// 2
    1d5e:	00 c0       	rjmp	.+0      	; 0x1d60 <us_delay+0x2>
	rjmp .+0			// 2
    1d60:	00 c0       	rjmp	.+0      	; 0x1d62 <us_delay+0x4>
	rjmp .+0			// 2
    1d62:	00 c0       	rjmp	.+0      	; 0x1d64 <us_delay+0x6>
	rjmp .+0			// 2
    1d64:	00 c0       	rjmp	.+0      	; 0x1d66 <us_delay+0x8>
	ret					// 4 (16 cycles)
    1d66:	08 95       	ret

00001d68 <shuffle_8>:
;*************************************************************************	
; Space-saving macro-ish suroutines
;*************************************************************************

shuffle_8: // (10 cycles)
	lsr		XH			// 1 Rotate right into carry
    1d68:	b6 95       	lsr	r27
	ror		XL			// 1 Rotate right with carry from MSB
    1d6a:	a7 95       	ror	r26
	lsr		XH			// 1
    1d6c:	b6 95       	lsr	r27
	ror		XL			// 1
    1d6e:	a7 95       	ror	r26
	lsr		XH			// 1
    1d70:	b6 95       	lsr	r27
	ror		XL			// 1
    1d72:	a7 95       	ror	r26
	ret					// 4
    1d74:	08 95       	ret

00001d76 <DelayHigh>:
; 10 and 150 cycles at 1us intervals per value in r26
; 
;*************************************************************************

DelayHigh:				// (0)	(1)	(2+) each extra is +20
	ldi		YL,0x07		// 1	1	1
    1d76:	c7 e0       	ldi	r28, 0x07	; 7
	andi	r25,0x07	
    1d78:	97 70       	andi	r25, 0x07	; 7
	eor		YL,r25		// 1 	1	1
    1d7a:	c9 27       	eor	r28, r25
	breq	LoopHighOut1// 2	1	1
    1d7c:	31 f0       	breq	.+12     	; 0x1d8a <LoopHighOut1>

00001d7e <LoopHigh>:
LoopHigh:
	call    us_delay	// 		16	16
    1d7e:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <us_delay>
	dec 	YL			// 		1	1
    1d82:	ca 95       	dec	r28
	breq	LoopHighOut2// 		2	1/2
    1d84:	09 f0       	breq	.+2      	; 0x1d88 <LoopHighOut2>
	rjmp	LoopHigh	// 			2
    1d86:	fb cf       	rjmp	.-10     	; 0x1d7e <LoopHigh>

00001d88 <LoopHighOut2>:
LoopHighOut2:
	rjmp .+0			// 		2	2
    1d88:	00 c0       	rjmp	.+0      	; 0x1d8a <LoopHighOut1>

00001d8a <LoopHighOut1>:
LoopHighOut1:
	nop					// 1	1	1
    1d8a:	00 00       	nop
    ret					// 4	4	4
    1d8c:	08 95       	ret

00001d8e <DelayLow>:
; regardless of the value of r25
;
;*************************************************************************

DelayLow:				// (0)	(1)	(2+) each extra is +20
	mov		YL,r25		// 1	1	
    1d8e:	c9 2f       	mov	r28, r25
	andi	YL,0x07	
    1d90:	c7 70       	andi	r28, 0x07	; 7
	breq	LoopLowOut1	// 2	1	1
    1d92:	31 f0       	breq	.+12     	; 0x1da0 <LoopLowOut1>

00001d94 <LoopLow>:
LoopLow:
	call    us_delay	//		16	16
    1d94:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <us_delay>
	dec 	YL			//		1	1
    1d98:	ca 95       	dec	r28
	breq	LoopLowOut2	//		2	1/2
    1d9a:	09 f0       	breq	.+2      	; 0x1d9e <LoopLowOut2>
	rjmp	LoopLow		//			2
    1d9c:	fb cf       	rjmp	.-10     	; 0x1d94 <LoopLow>

00001d9e <LoopLowOut2>:
LoopLowOut2:
	rjmp .+0			// 		2	2
    1d9e:	00 c0       	rjmp	.+0      	; 0x1da0 <LoopLowOut1>

00001da0 <LoopLowOut1>:
LoopLowOut1:
    ret					// 4	4	4
    1da0:	08 95       	ret

00001da2 <get_raw_accs>:
//***************************************************************
// Fill accADC with RPY data appropriate to the board orientation
//***************************************************************

void get_raw_accs(void)
{
    1da2:	ac e0       	ldi	r26, 0x0C	; 12
    1da4:	b0 e0       	ldi	r27, 0x00	; 0
    1da6:	e7 ed       	ldi	r30, 0xD7	; 215
    1da8:	fe e0       	ldi	r31, 0x0E	; 14
    1daa:	0c 94 a3 3e 	jmp	0x7d46	; 0x7d46 <__prologue_saves__+0x20>
	// Get data from MPU6050 for KK2.1
	uint8_t Accs[6];
	int16_t temp1, temp2;

	// For KK2.1 boards, use the i2c data from the MPU6050
	readI2CbyteArray(MPU60X0_DEFAULT_ADDRESS,MPU60X0_RA_ACCEL_XOUT_H,(uint8_t *)Accs,6);
    1dae:	26 e0       	ldi	r18, 0x06	; 6
    1db0:	ae 01       	movw	r20, r28
    1db2:	4f 5f       	subi	r20, 0xFF	; 255
    1db4:	5f 4f       	sbci	r21, 0xFF	; 255
    1db6:	6b e3       	ldi	r22, 0x3B	; 59
    1db8:	80 ed       	ldi	r24, 0xD0	; 208
    1dba:	0e 94 64 1e 	call	0x3cc8	; 0x3cc8 <readI2CbyteArray>

	// Reassemble data into accADC array and down sample to reduce resolution and noise
	// This notation is true to the chip, but not the board orientation

	temp1 = Accs[0] << 8;					// Accel X
    1dbe:	89 81       	ldd	r24, Y+1	; 0x01
    1dc0:	90 e0       	ldi	r25, 0x00	; 0
    1dc2:	98 2f       	mov	r25, r24
    1dc4:	88 27       	eor	r24, r24
	temp2 = Accs[1];
    1dc6:	2a 81       	ldd	r18, Y+2	; 0x02
	RawADC[ROLL] = (temp1 + temp2) >> 6;
    1dc8:	82 0f       	add	r24, r18
    1dca:	91 1d       	adc	r25, r1
    1dcc:	36 e0       	ldi	r19, 0x06	; 6
    1dce:	95 95       	asr	r25
    1dd0:	87 95       	ror	r24
    1dd2:	3a 95       	dec	r19
    1dd4:	e1 f7       	brne	.-8      	; 0x1dce <get_raw_accs+0x2c>
    1dd6:	98 87       	std	Y+8, r25	; 0x08
    1dd8:	8f 83       	std	Y+7, r24	; 0x07

	temp1 = Accs[2] << 8;					// Accel Y (note: reversed polarity wrt KK2.0
    1dda:	8b 81       	ldd	r24, Y+3	; 0x03
    1ddc:	90 e0       	ldi	r25, 0x00	; 0
    1dde:	98 2f       	mov	r25, r24
    1de0:	88 27       	eor	r24, r24
	temp2 = Accs[3];
    1de2:	2c 81       	ldd	r18, Y+4	; 0x04
	RawADC[PITCH] = -((temp1 + temp2) >> 6);
    1de4:	82 0f       	add	r24, r18
    1de6:	91 1d       	adc	r25, r1
    1de8:	56 e0       	ldi	r21, 0x06	; 6
    1dea:	95 95       	asr	r25
    1dec:	87 95       	ror	r24
    1dee:	5a 95       	dec	r21
    1df0:	e1 f7       	brne	.-8      	; 0x1dea <get_raw_accs+0x48>
    1df2:	91 95       	neg	r25
    1df4:	81 95       	neg	r24
    1df6:	91 09       	sbc	r25, r1
    1df8:	9a 87       	std	Y+10, r25	; 0x0a
    1dfa:	89 87       	std	Y+9, r24	; 0x09

	temp1 = Accs[4] << 8;					// Accel Z
    1dfc:	8d 81       	ldd	r24, Y+5	; 0x05
    1dfe:	90 e0       	ldi	r25, 0x00	; 0
    1e00:	98 2f       	mov	r25, r24
    1e02:	88 27       	eor	r24, r24
	temp2 = Accs[5];
    1e04:	2e 81       	ldd	r18, Y+6	; 0x06
	RawADC[YAW] = (temp1 + temp2) >> 6;
    1e06:	82 0f       	add	r24, r18
    1e08:	91 1d       	adc	r25, r1
    1e0a:	76 e0       	ldi	r23, 0x06	; 6
    1e0c:	95 95       	asr	r25
    1e0e:	87 95       	ror	r24
    1e10:	7a 95       	dec	r23
    1e12:	e1 f7       	brne	.-8      	; 0x1e0c <get_raw_accs+0x6a>
    1e14:	9c 87       	std	Y+12, r25	; 0x0c
    1e16:	8b 87       	std	Y+11, r24	; 0x0b

	// Reorient the data as per the board orientation	
	for (i=0; i<NUMBEROFAXIS; i++)
	{
		// Rearrange the sensors
		accADC[i] = RawADC[(int8_t)pgm_read_byte(&ACC_RPY_Order[Config.Orientation][i])];
    1e18:	20 91 07 06 	lds	r18, 0x0607
    1e1c:	ad e2       	ldi	r26, 0x2D	; 45
    1e1e:	b5 e0       	ldi	r27, 0x05	; 5
    1e20:	43 e0       	ldi	r20, 0x03	; 3
    1e22:	24 02       	muls	r18, r20
    1e24:	90 01       	movw	r18, r0
    1e26:	11 24       	eor	r1, r1
    1e28:	80 e0       	ldi	r24, 0x00	; 0
    1e2a:	90 e0       	ldi	r25, 0x00	; 0
    1e2c:	2e 51       	subi	r18, 0x1E	; 30
    1e2e:	3f 4f       	sbci	r19, 0xFF	; 255
    1e30:	f9 01       	movw	r30, r18
    1e32:	e8 0f       	add	r30, r24
    1e34:	f9 1f       	adc	r31, r25
    1e36:	e4 91       	lpm	r30, Z
    1e38:	ee 0f       	add	r30, r30
    1e3a:	ff 0b       	sbc	r31, r31
    1e3c:	41 e0       	ldi	r20, 0x01	; 1
    1e3e:	50 e0       	ldi	r21, 0x00	; 0
    1e40:	4c 0f       	add	r20, r28
    1e42:	5d 1f       	adc	r21, r29
    1e44:	e4 0f       	add	r30, r20
    1e46:	f5 1f       	adc	r31, r21
    1e48:	46 81       	ldd	r20, Z+6	; 0x06
    1e4a:	57 81       	ldd	r21, Z+7	; 0x07
    1e4c:	4d 93       	st	X+, r20
    1e4e:	5d 93       	st	X+, r21
    1e50:	01 96       	adiw	r24, 0x01	; 1
	RawADC[YAW] = ADCW;

#endif

	// Reorient the data as per the board orientation	
	for (i=0; i<NUMBEROFAXIS; i++)
    1e52:	83 30       	cpi	r24, 0x03	; 3
    1e54:	91 05       	cpc	r25, r1
    1e56:	61 f7       	brne	.-40     	; 0x1e30 <get_raw_accs+0x8e>
	{
		// Rearrange the sensors
		accADC[i] = RawADC[(int8_t)pgm_read_byte(&ACC_RPY_Order[Config.Orientation][i])];
	}
}
    1e58:	2c 96       	adiw	r28, 0x0c	; 12
    1e5a:	e2 e0       	ldi	r30, 0x02	; 2
    1e5c:	0c 94 bf 3e 	jmp	0x7d7e	; 0x7d7e <__epilogue_restores__+0x20>

00001e60 <ReadAcc>:

int16_t accADC[NUMBEROFAXIS];	// Holds Acc ADC values - alwys in RPY order
int16_t accVert = 0;			// Holds the level-zeroed Z-acc value. Used for height damping in hover only.

void ReadAcc()
{
    1e60:	cf 92       	push	r12
    1e62:	df 92       	push	r13
    1e64:	ef 92       	push	r14
    1e66:	ff 92       	push	r15
    1e68:	1f 93       	push	r17
    1e6a:	cf 93       	push	r28
    1e6c:	df 93       	push	r29
	uint8_t i;

	get_raw_accs();				// Updates accADC[] (RPY)
    1e6e:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <get_raw_accs>

	// Use default Config.AccZero for Acc-Z if inverse calibration not done yet
	// Actual zero is held in Config.AccZeroNormZ waiting for inv calibration
	if (!(Config.Main_flags & (1 << inv_cal_done)))
    1e72:	80 91 3c 07 	lds	r24, 0x073C
    1e76:	80 fd       	sbrc	r24, 0
    1e78:	05 c0       	rjmp	.+10     	; 0x1e84 <ReadAcc+0x24>
	{
#ifdef KK21 
		Config.AccZero[YAW] = 0;
    1e7a:	10 92 24 07 	sts	0x0724, r1
    1e7e:	10 92 23 07 	sts	0x0723, r1
    1e82:	0e c0       	rjmp	.+28     	; 0x1ea0 <ReadAcc+0x40>

	// If inverted cal done, Config.AccZeroNormZ and Config.AccZeroDiff have
	// valid values
	else
	{
		Config.AccZero[YAW] = Config.AccZeroNormZ - Config.AccZeroDiff;
    1e84:	80 91 25 07 	lds	r24, 0x0725
    1e88:	90 91 26 07 	lds	r25, 0x0726
    1e8c:	20 91 29 07 	lds	r18, 0x0729
    1e90:	30 91 2a 07 	lds	r19, 0x072A
    1e94:	82 1b       	sub	r24, r18
    1e96:	93 0b       	sbc	r25, r19
    1e98:	90 93 24 07 	sts	0x0724, r25
    1e9c:	80 93 23 07 	sts	0x0723, r24
	{
		// Remove offsets from acc outputs
		accADC[i] -= Config.AccZero[i];

		// Change polarity
		accADC[i] *= (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation][i]);
    1ea0:	20 91 07 06 	lds	r18, 0x0607
    1ea4:	cf e1       	ldi	r28, 0x1F	; 31
    1ea6:	d7 e0       	ldi	r29, 0x07	; 7
    1ea8:	ad e2       	ldi	r26, 0x2D	; 45
    1eaa:	b5 e0       	ldi	r27, 0x05	; 5
    1eac:	83 e0       	ldi	r24, 0x03	; 3
    1eae:	28 02       	muls	r18, r24
    1eb0:	90 01       	movw	r18, r0
    1eb2:	11 24       	eor	r1, r1
    1eb4:	80 e0       	ldi	r24, 0x00	; 0
    1eb6:	90 e0       	ldi	r25, 0x00	; 0
    1eb8:	20 53       	subi	r18, 0x30	; 48
    1eba:	3f 4f       	sbci	r19, 0xFF	; 255
	}

	for (i=0; i<NUMBEROFAXIS; i++)
	{
		// Remove offsets from acc outputs
		accADC[i] -= Config.AccZero[i];
    1ebc:	69 91       	ld	r22, Y+
    1ebe:	79 91       	ld	r23, Y+
    1ec0:	f9 01       	movw	r30, r18
    1ec2:	e8 0f       	add	r30, r24
    1ec4:	f9 1f       	adc	r31, r25

		// Change polarity
		accADC[i] *= (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation][i]);
    1ec6:	14 91       	lpm	r17, Z
	}

	for (i=0; i<NUMBEROFAXIS; i++)
	{
		// Remove offsets from acc outputs
		accADC[i] -= Config.AccZero[i];
    1ec8:	4d 91       	ld	r20, X+
    1eca:	5c 91       	ld	r21, X
    1ecc:	11 97       	sbiw	r26, 0x01	; 1
    1ece:	46 1b       	sub	r20, r22
    1ed0:	57 0b       	sbc	r21, r23

		// Change polarity
		accADC[i] *= (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation][i]);
    1ed2:	14 03       	mulsu	r17, r20
    1ed4:	b0 01       	movw	r22, r0
    1ed6:	15 9f       	mul	r17, r21
    1ed8:	70 0d       	add	r23, r0
    1eda:	11 24       	eor	r1, r1
    1edc:	6d 93       	st	X+, r22
    1ede:	7d 93       	st	X+, r23
    1ee0:	01 96       	adiw	r24, 0x01	; 1
	else
	{
		Config.AccZero[YAW] = Config.AccZeroNormZ - Config.AccZeroDiff;
	}

	for (i=0; i<NUMBEROFAXIS; i++)
    1ee2:	83 30       	cpi	r24, 0x03	; 3
    1ee4:	91 05       	cpc	r25, r1
    1ee6:	51 f7       	brne	.-44     	; 0x1ebc <ReadAcc+0x5c>


	// Recalculate current accVert using filtered acc value
	// Note that AccSmooth[YAW] is already zeroed around 1G so we have to re-add 
	// the zero back here so that Config.AccZeroNormZ subtracts the correct amount
	 accVert = accSmooth[YAW] - Config.AccZero[YAW] + Config.AccZeroNormZ ;
    1ee8:	60 91 23 07 	lds	r22, 0x0723
    1eec:	70 91 24 07 	lds	r23, 0x0724
    1ef0:	88 27       	eor	r24, r24
    1ef2:	77 fd       	sbrc	r23, 7
    1ef4:	80 95       	com	r24
    1ef6:	98 2f       	mov	r25, r24
    1ef8:	0e 94 56 3c 	call	0x78ac	; 0x78ac <__floatsisf>
    1efc:	9b 01       	movw	r18, r22
    1efe:	ac 01       	movw	r20, r24
    1f00:	60 91 76 05 	lds	r22, 0x0576
    1f04:	70 91 77 05 	lds	r23, 0x0577
    1f08:	80 91 78 05 	lds	r24, 0x0578
    1f0c:	90 91 79 05 	lds	r25, 0x0579
    1f10:	0e 94 2a 3b 	call	0x7654	; 0x7654 <__subsf3>
    1f14:	6b 01       	movw	r12, r22
    1f16:	7c 01       	movw	r14, r24
    1f18:	60 91 25 07 	lds	r22, 0x0725
    1f1c:	70 91 26 07 	lds	r23, 0x0726
    1f20:	88 27       	eor	r24, r24
    1f22:	77 fd       	sbrc	r23, 7
    1f24:	80 95       	com	r24
    1f26:	98 2f       	mov	r25, r24
    1f28:	0e 94 56 3c 	call	0x78ac	; 0x78ac <__floatsisf>
    1f2c:	9b 01       	movw	r18, r22
    1f2e:	ac 01       	movw	r20, r24
    1f30:	c7 01       	movw	r24, r14
    1f32:	b6 01       	movw	r22, r12
    1f34:	0e 94 2b 3b 	call	0x7656	; 0x7656 <__addsf3>
    1f38:	0e 94 23 3c 	call	0x7846	; 0x7846 <__fixsfsi>
    1f3c:	70 93 09 05 	sts	0x0509, r23
    1f40:	60 93 08 05 	sts	0x0508, r22

}
    1f44:	df 91       	pop	r29
    1f46:	cf 91       	pop	r28
    1f48:	1f 91       	pop	r17
    1f4a:	ff 90       	pop	r15
    1f4c:	ef 90       	pop	r14
    1f4e:	df 90       	pop	r13
    1f50:	cf 90       	pop	r12
    1f52:	08 95       	ret

00001f54 <CalibrateAcc>:
//***************************************************************
// Calibration routines
//***************************************************************

void CalibrateAcc(int8_t type)
{
    1f54:	a6 e0       	ldi	r26, 0x06	; 6
    1f56:	b0 e0       	ldi	r27, 0x00	; 0
    1f58:	e0 eb       	ldi	r30, 0xB0	; 176
    1f5a:	ff e0       	ldi	r31, 0x0F	; 15
    1f5c:	0c 94 a2 3e 	jmp	0x7d44	; 0x7d44 <__prologue_saves__+0x1e>
	uint8_t i;
	int16_t accZero[NUMBEROFAXIS] = {0,0,0};	// Used for calibrating Accs on ground
    1f60:	1a 82       	std	Y+2, r1	; 0x02
    1f62:	19 82       	std	Y+1, r1	; 0x01
    1f64:	1c 82       	std	Y+4, r1	; 0x04
    1f66:	1b 82       	std	Y+3, r1	; 0x03
    1f68:	1e 82       	std	Y+6, r1	; 0x06
    1f6a:	1d 82       	std	Y+5, r1	; 0x05

	// Calibrate acc
	if (type == NORMAL)
    1f6c:	81 11       	cpse	r24, r1
    1f6e:	51 c0       	rjmp	.+162    	; 0x2012 <CalibrateAcc+0xbe>
    1f70:	10 e2       	ldi	r17, 0x20	; 32
	{
		// Get average zero value (over 32 readings)
		for (i=0; i<32; i++)
		{
			get_raw_accs();						// Updates accADC[] with signals reoriented into (RPY)
    1f72:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <get_raw_accs>

			accZero[ROLL] += accADC[ROLL];
    1f76:	89 81       	ldd	r24, Y+1	; 0x01
    1f78:	9a 81       	ldd	r25, Y+2	; 0x02
    1f7a:	20 91 2d 05 	lds	r18, 0x052D
    1f7e:	30 91 2e 05 	lds	r19, 0x052E
    1f82:	82 0f       	add	r24, r18
    1f84:	93 1f       	adc	r25, r19
    1f86:	9a 83       	std	Y+2, r25	; 0x02
    1f88:	89 83       	std	Y+1, r24	; 0x01
			accZero[PITCH] += accADC[PITCH];						
    1f8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f8c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f8e:	20 91 2f 05 	lds	r18, 0x052F
    1f92:	30 91 30 05 	lds	r19, 0x0530
    1f96:	82 0f       	add	r24, r18
    1f98:	93 1f       	adc	r25, r19
    1f9a:	9c 83       	std	Y+4, r25	; 0x04
    1f9c:	8b 83       	std	Y+3, r24	; 0x03
			accZero[YAW] += accADC[YAW];		
    1f9e:	8d 81       	ldd	r24, Y+5	; 0x05
    1fa0:	9e 81       	ldd	r25, Y+6	; 0x06
    1fa2:	20 91 31 05 	lds	r18, 0x0531
    1fa6:	30 91 32 05 	lds	r19, 0x0532
    1faa:	82 0f       	add	r24, r18
    1fac:	93 1f       	adc	r25, r19
    1fae:	9e 83       	std	Y+6, r25	; 0x06
    1fb0:	8d 83       	std	Y+5, r24	; 0x05
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1fb2:	8f e4       	ldi	r24, 0x4F	; 79
    1fb4:	93 ec       	ldi	r25, 0xC3	; 195
    1fb6:	01 97       	sbiw	r24, 0x01	; 1
    1fb8:	f1 f7       	brne	.-4      	; 0x1fb6 <CalibrateAcc+0x62>
    1fba:	00 c0       	rjmp	.+0      	; 0x1fbc <CalibrateAcc+0x68>
    1fbc:	00 00       	nop
    1fbe:	11 50       	subi	r17, 0x01	; 1

	// Calibrate acc
	if (type == NORMAL)
	{
		// Get average zero value (over 32 readings)
		for (i=0; i<32; i++)
    1fc0:	c1 f6       	brne	.-80     	; 0x1f72 <CalibrateAcc+0x1e>
    1fc2:	fe 01       	movw	r30, r28
    1fc4:	31 96       	adiw	r30, 0x01	; 1
    1fc6:	9e 01       	movw	r18, r28
    1fc8:	29 5f       	subi	r18, 0xF9	; 249
    1fca:	3f 4f       	sbci	r19, 0xFF	; 255
		}

		for (i=0; i<NUMBEROFAXIS; i++)			// For selected axis in RPY order
		{
			// Round and divide by 32
			accZero[i] = ((accZero[i] + 16) >> 5);
    1fcc:	80 81       	ld	r24, Z
    1fce:	91 81       	ldd	r25, Z+1	; 0x01
    1fd0:	40 96       	adiw	r24, 0x10	; 16
    1fd2:	b5 e0       	ldi	r27, 0x05	; 5
    1fd4:	95 95       	asr	r25
    1fd6:	87 95       	ror	r24
    1fd8:	ba 95       	dec	r27
    1fda:	e1 f7       	brne	.-8      	; 0x1fd4 <CalibrateAcc+0x80>
    1fdc:	81 93       	st	Z+, r24
    1fde:	91 93       	st	Z+, r25
			accZero[YAW] += accADC[YAW];		

			_delay_ms(10);						// Get a better acc average over time
		}

		for (i=0; i<NUMBEROFAXIS; i++)			// For selected axis in RPY order
    1fe0:	e2 17       	cp	r30, r18
    1fe2:	f3 07       	cpc	r31, r19
    1fe4:	99 f7       	brne	.-26     	; 0x1fcc <CalibrateAcc+0x78>
			// Round and divide by 32
			accZero[i] = ((accZero[i] + 16) >> 5);
		}

		// Reset zeros to normal cal
		Config.AccZero[ROLL] = accZero[ROLL]; 
    1fe6:	89 81       	ldd	r24, Y+1	; 0x01
    1fe8:	9a 81       	ldd	r25, Y+2	; 0x02
    1fea:	90 93 20 07 	sts	0x0720, r25
    1fee:	80 93 1f 07 	sts	0x071F, r24
		Config.AccZero[PITCH] = accZero[PITCH]; 
    1ff2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ff6:	90 93 22 07 	sts	0x0722, r25
    1ffa:	80 93 21 07 	sts	0x0721, r24
		Config.AccZeroNormZ = accZero[YAW]; 
    1ffe:	8d 81       	ldd	r24, Y+5	; 0x05
    2000:	9e 81       	ldd	r25, Y+6	; 0x06
    2002:	90 93 26 07 	sts	0x0726, r25
    2006:	80 93 25 07 	sts	0x0725, r24

		// Flag that normal cal done
		Config.Main_flags |= (1 << normal_cal_done);
    200a:	80 91 3c 07 	lds	r24, 0x073C
    200e:	82 60       	ori	r24, 0x02	; 2
    2010:	5a c0       	rjmp	.+180    	; 0x20c6 <CalibrateAcc+0x172>

	else
	// Calibrate inverted acc
	{
		// Only update the inverted cal value if preceeded by a normal calibration
		if (Config.Main_flags & (1 << normal_cal_done))
    2012:	80 91 3c 07 	lds	r24, 0x073C
    2016:	81 ff       	sbrs	r24, 1
    2018:	5a c0       	rjmp	.+180    	; 0x20ce <CalibrateAcc+0x17a>
		{
			// Get average zero value (over 32 readings)
			Config.AccZeroInvZ = 0;
    201a:	10 92 28 07 	sts	0x0728, r1
    201e:	10 92 27 07 	sts	0x0727, r1
    2022:	10 e2       	ldi	r17, 0x20	; 32

			for (i=0; i<32; i++)
			{
				get_raw_accs();					// Updates gyroADC[] with reoriented vales
    2024:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <get_raw_accs>
				Config.AccZeroInvZ += accADC[YAW];		
    2028:	80 91 27 07 	lds	r24, 0x0727
    202c:	90 91 28 07 	lds	r25, 0x0728
    2030:	20 91 31 05 	lds	r18, 0x0531
    2034:	30 91 32 05 	lds	r19, 0x0532
    2038:	82 0f       	add	r24, r18
    203a:	93 1f       	adc	r25, r19
    203c:	90 93 28 07 	sts	0x0728, r25
    2040:	80 93 27 07 	sts	0x0727, r24
    2044:	8f e4       	ldi	r24, 0x4F	; 79
    2046:	93 ec       	ldi	r25, 0xC3	; 195
    2048:	01 97       	sbiw	r24, 0x01	; 1
    204a:	f1 f7       	brne	.-4      	; 0x2048 <CalibrateAcc+0xf4>
    204c:	00 c0       	rjmp	.+0      	; 0x204e <CalibrateAcc+0xfa>
    204e:	00 00       	nop
    2050:	11 50       	subi	r17, 0x01	; 1
		if (Config.Main_flags & (1 << normal_cal_done))
		{
			// Get average zero value (over 32 readings)
			Config.AccZeroInvZ = 0;

			for (i=0; i<32; i++)
    2052:	41 f7       	brne	.-48     	; 0x2024 <CalibrateAcc+0xd0>
				Config.AccZeroInvZ += accADC[YAW];		
				_delay_ms(10);					// Get a better acc average over time
			}

			// Round and divide by 32
			Config.AccZeroInvZ = ((Config.AccZeroInvZ + 16) >> 5);		// Inverted zero point
    2054:	20 91 27 07 	lds	r18, 0x0727
    2058:	30 91 28 07 	lds	r19, 0x0728
    205c:	20 5f       	subi	r18, 0xF0	; 240
    205e:	3f 4f       	sbci	r19, 0xFF	; 255
    2060:	f5 e0       	ldi	r31, 0x05	; 5
    2062:	35 95       	asr	r19
    2064:	27 95       	ror	r18
    2066:	fa 95       	dec	r31
    2068:	e1 f7       	brne	.-8      	; 0x2062 <CalibrateAcc+0x10e>
    206a:	30 93 28 07 	sts	0x0728, r19
    206e:	20 93 27 07 	sts	0x0727, r18

			// Test if board is actually inverted relative to board orientation.
			// We have to do this as get_raw_accs() does not reorient the data
#ifdef KK21 
			if ((Config.AccZeroInvZ * (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation][YAW])) < 0) // Upside down
    2072:	80 91 07 06 	lds	r24, 0x0607
    2076:	99 27       	eor	r25, r25
    2078:	87 fd       	sbrc	r24, 7
    207a:	90 95       	com	r25
    207c:	fc 01       	movw	r30, r24
    207e:	ee 0f       	add	r30, r30
    2080:	ff 1f       	adc	r31, r31
    2082:	e8 0f       	add	r30, r24
    2084:	f9 1f       	adc	r31, r25
    2086:	ee 52       	subi	r30, 0x2E	; 46
    2088:	ff 4f       	sbci	r31, 0xFF	; 255
    208a:	44 91       	lpm	r20, Z
    208c:	42 03       	mulsu	r20, r18
    208e:	c0 01       	movw	r24, r0
    2090:	43 9f       	mul	r20, r19
    2092:	90 0d       	add	r25, r0
    2094:	11 24       	eor	r1, r1
    2096:	97 ff       	sbrs	r25, 7
    2098:	1a c0       	rjmp	.+52     	; 0x20ce <CalibrateAcc+0x17a>
			    (((int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation][YAW]) == -1) && (Config.AccZeroInvZ > Config.AccZero[YAW])))  // Vertical and Upside down
#endif
			{

				// Reset zero to halfway between min and max Z
				Config.AccZeroDiff = ((Config.AccZeroNormZ - Config.AccZeroInvZ) >> 1);
    209a:	40 91 25 07 	lds	r20, 0x0725
    209e:	50 91 26 07 	lds	r21, 0x0726
    20a2:	ca 01       	movw	r24, r20
    20a4:	82 1b       	sub	r24, r18
    20a6:	93 0b       	sbc	r25, r19
    20a8:	95 95       	asr	r25
    20aa:	87 95       	ror	r24
    20ac:	90 93 2a 07 	sts	0x072A, r25
    20b0:	80 93 29 07 	sts	0x0729, r24
				Config.AccZero[YAW] = Config.AccZeroNormZ - Config.AccZeroDiff; // Config.AccZero[YAW] is now valid to use
    20b4:	48 1b       	sub	r20, r24
    20b6:	59 0b       	sbc	r21, r25
    20b8:	50 93 24 07 	sts	0x0724, r21
    20bc:	40 93 23 07 	sts	0x0723, r20

				// Flag that inverted cal done
				Config.Main_flags |= (1 << inv_cal_done);
    20c0:	80 91 3c 07 	lds	r24, 0x073C
    20c4:	81 60       	ori	r24, 0x01	; 1
    20c6:	80 93 3c 07 	sts	0x073C, r24

				Save_Config_to_EEPROM();
    20ca:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <Save_Config_to_EEPROM>
			}
		}
	}
}
    20ce:	26 96       	adiw	r28, 0x06	; 6
    20d0:	e3 e0       	ldi	r30, 0x03	; 3
    20d2:	0c 94 be 3e 	jmp	0x7d7c	; 0x7d7c <__epilogue_restores__+0x1e>

000020d6 <init_i2c_accs>:
// Set up the MPU6050 (Acc)
//***************************************************************

void init_i2c_accs(void)
{
	writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_PWR_MGMT_1, 0x01); // Gyro X clock, awake
    20d6:	41 e0       	ldi	r20, 0x01	; 1
    20d8:	6b e6       	ldi	r22, 0x6B	; 107
    20da:	80 ed       	ldi	r24, 0xD0	; 208
    20dc:	0e 94 4c 1e 	call	0x3c98	; 0x3c98 <writeI2Cbyte>
	writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_ACCEL_CONFIG, ACCFS4G); // 4G full scale
    20e0:	48 e0       	ldi	r20, 0x08	; 8
    20e2:	6c e1       	ldi	r22, 0x1C	; 28
    20e4:	80 ed       	ldi	r24, 0xD0	; 208
    20e6:	0e 94 4c 1e 	call	0x3c98	; 0x3c98 <writeI2Cbyte>
    20ea:	08 95       	ret

000020ec <Init_ADC>:
// ADC subroutines
//***********************************************************

void Init_ADC(void)
{
	DIDR0 	= 0b11111111;					// Digital Input Disable Register - ADC0~7 Digital Input Disable
    20ec:	8f ef       	ldi	r24, 0xFF	; 255
    20ee:	80 93 7e 00 	sts	0x007E, r24
	ADCSRB 	= 0b00000000; 					// ADC Control and Status Register B - ADTS2:0
    20f2:	10 92 7b 00 	sts	0x007B, r1
    20f6:	08 95       	ret

000020f8 <read_adc>:
}

void read_adc(uint8_t channel)
{
	ADMUX = channel;
    20f8:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA 	= 0b11000110;					// ADEN, ADSC, ADPS1,2
    20fc:	86 ec       	ldi	r24, 0xC6	; 198
    20fe:	80 93 7a 00 	sts	0x007A, r24
	while (ADCSRA & (1 << ADSC));			// Wait to complete. Result is in ADCW
    2102:	80 91 7a 00 	lds	r24, 0x007A
    2106:	86 fd       	sbrc	r24, 6
    2108:	fc cf       	rjmp	.-8      	; 0x2102 <read_adc+0xa>
}
    210a:	08 95       	ret

0000210c <Display_balance>:
//************************************************************
// Code
//************************************************************

void Display_balance(void)
{
    210c:	af 92       	push	r10
    210e:	bf 92       	push	r11
    2110:	cf 92       	push	r12
    2112:	df 92       	push	r13
    2114:	ef 92       	push	r14
    2116:	0f 93       	push	r16
    2118:	cf 93       	push	r28
    211a:	df 93       	push	r29
	uint16_t ticker_16 = 0;
	uint16_t LoopTCNT1 = 0;
    211c:	c1 2c       	mov	r12, r1
    211e:	d1 2c       	mov	r13, r1
	int16_t	x_pos, y_pos;

	while(BUTTON1 != 0)
    2120:	1f 9b       	sbis	0x03, 7	; 3
    2122:	85 c0       	rjmp	.+266    	; 0x222e <Display_balance+0x122>
	{
		// Read sensors
		ReadGyros();
    2124:	0e 94 1d 1d 	call	0x3a3a	; 0x3a3a <ReadGyros>
		ReadAcc();
    2128:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <ReadAcc>

		// Time the loop for the IMU
		// ticker_16 is incremented at 2.5MHz (400ns) - max 26.2ms
		ticker_16 = (uint16_t)((uint16_t)TCNT1 - LoopTCNT1);	
    212c:	80 91 84 00 	lds	r24, 0x0084
    2130:	90 91 85 00 	lds	r25, 0x0085
    2134:	8c 19       	sub	r24, r12
    2136:	9d 09       	sbc	r25, r13
		LoopTCNT1 = TCNT1;	
    2138:	c0 90 84 00 	lds	r12, 0x0084
    213c:	d0 90 85 00 	lds	r13, 0x0085

		// Refresh accSmooth values
		// Note that because it takes 4.096ms to refresh the whole GLCD this loop cannot run 
		// faster than 244Hz, but that's close enough to the actual loop time so that the 
		// actual Acc LPF effect is closely mirrored on the balance meter.
		getEstimatedAttitude(ticker_16); 
    2140:	0e 94 99 1e 	call	0x3d32	; 0x3d32 <getEstimatedAttitude>

		// Convert acc signal to a pixel position
		x_pos = accSmooth[PITCH] + 32;
    2144:	20 e0       	ldi	r18, 0x00	; 0
    2146:	30 e0       	ldi	r19, 0x00	; 0
    2148:	40 e0       	ldi	r20, 0x00	; 0
    214a:	52 e4       	ldi	r21, 0x42	; 66
    214c:	60 91 72 05 	lds	r22, 0x0572
    2150:	70 91 73 05 	lds	r23, 0x0573
    2154:	80 91 74 05 	lds	r24, 0x0574
    2158:	90 91 75 05 	lds	r25, 0x0575
    215c:	0e 94 2b 3b 	call	0x7656	; 0x7656 <__addsf3>
    2160:	0e 94 23 3c 	call	0x7846	; 0x7846 <__fixsfsi>
    2164:	eb 01       	movw	r28, r22
		y_pos = accSmooth[ROLL] + 64;
    2166:	20 e0       	ldi	r18, 0x00	; 0
    2168:	30 e0       	ldi	r19, 0x00	; 0
    216a:	40 e8       	ldi	r20, 0x80	; 128
    216c:	52 e4       	ldi	r21, 0x42	; 66
    216e:	60 91 6e 05 	lds	r22, 0x056E
    2172:	70 91 6f 05 	lds	r23, 0x056F
    2176:	80 91 70 05 	lds	r24, 0x0570
    217a:	90 91 71 05 	lds	r25, 0x0571
    217e:	0e 94 2b 3b 	call	0x7656	; 0x7656 <__addsf3>
    2182:	0e 94 23 3c 	call	0x7846	; 0x7846 <__fixsfsi>
    2186:	5b 01       	movw	r10, r22

		if (x_pos < 0) x_pos = 0;
    2188:	d7 fd       	sbrc	r29, 7
    218a:	06 c0       	rjmp	.+12     	; 0x2198 <Display_balance+0x8c>
		if (x_pos > 64) x_pos = 64;
    218c:	c1 34       	cpi	r28, 0x41	; 65
    218e:	d1 05       	cpc	r29, r1
    2190:	2c f0       	brlt	.+10     	; 0x219c <Display_balance+0x90>
    2192:	c0 e4       	ldi	r28, 0x40	; 64
    2194:	d0 e0       	ldi	r29, 0x00	; 0
    2196:	02 c0       	rjmp	.+4      	; 0x219c <Display_balance+0x90>

		// Convert acc signal to a pixel position
		x_pos = accSmooth[PITCH] + 32;
		y_pos = accSmooth[ROLL] + 64;

		if (x_pos < 0) x_pos = 0;
    2198:	c0 e0       	ldi	r28, 0x00	; 0
    219a:	d0 e0       	ldi	r29, 0x00	; 0
		if (x_pos > 64) x_pos = 64;
		if (y_pos < 0) y_pos = 0;
    219c:	b7 fc       	sbrc	r11, 7
    219e:	08 c0       	rjmp	.+16     	; 0x21b0 <Display_balance+0xa4>
		if (y_pos > 128) y_pos = 128;
    21a0:	81 e8       	ldi	r24, 0x81	; 129
    21a2:	a8 16       	cp	r10, r24
    21a4:	b1 04       	cpc	r11, r1
    21a6:	34 f0       	brlt	.+12     	; 0x21b4 <Display_balance+0xa8>
    21a8:	80 e8       	ldi	r24, 0x80	; 128
    21aa:	a8 2e       	mov	r10, r24
    21ac:	b1 2c       	mov	r11, r1
    21ae:	02 c0       	rjmp	.+4      	; 0x21b4 <Display_balance+0xa8>
		x_pos = accSmooth[PITCH] + 32;
		y_pos = accSmooth[ROLL] + 64;

		if (x_pos < 0) x_pos = 0;
		if (x_pos > 64) x_pos = 64;
		if (y_pos < 0) y_pos = 0;
    21b0:	a1 2c       	mov	r10, r1
    21b2:	b1 2c       	mov	r11, r1
		if (y_pos > 128) y_pos = 128;

		// Print bottom markers
		LCD_Display_Text(12, (const unsigned char*)Wingdings, 2, 55); 	// Left
    21b4:	27 e3       	ldi	r18, 0x37	; 55
    21b6:	30 e0       	ldi	r19, 0x00	; 0
    21b8:	42 e0       	ldi	r20, 0x02	; 2
    21ba:	50 e0       	ldi	r21, 0x00	; 0
    21bc:	6d e0       	ldi	r22, 0x0D	; 13
    21be:	71 e0       	ldi	r23, 0x01	; 1
    21c0:	8c e0       	ldi	r24, 0x0C	; 12
    21c2:	0e 94 84 1c 	call	0x3908	; 0x3908 <LCD_Display_Text>

		// Draw balance meter
		drawrect(buffer, 0, 0, 128, 64, 1);		// Border
    21c6:	ee 24       	eor	r14, r14
    21c8:	e3 94       	inc	r14
    21ca:	00 e4       	ldi	r16, 0x40	; 64
    21cc:	20 e8       	ldi	r18, 0x80	; 128
    21ce:	40 e0       	ldi	r20, 0x00	; 0
    21d0:	60 e0       	ldi	r22, 0x00	; 0
    21d2:	80 e0       	ldi	r24, 0x00	; 0
    21d4:	91 e0       	ldi	r25, 0x01	; 1
    21d6:	0e 94 c3 1b 	call	0x3786	; 0x3786 <drawrect>
		drawrect(buffer, 54, 22, 21, 21, 1);	// Target
    21da:	05 e1       	ldi	r16, 0x15	; 21
    21dc:	25 e1       	ldi	r18, 0x15	; 21
    21de:	46 e1       	ldi	r20, 0x16	; 22
    21e0:	66 e3       	ldi	r22, 0x36	; 54
    21e2:	80 e0       	ldi	r24, 0x00	; 0
    21e4:	91 e0       	ldi	r25, 0x01	; 1
    21e6:	0e 94 c3 1b 	call	0x3786	; 0x3786 <drawrect>
		drawline(buffer, 64, 8, 64, 56, 1); 	// Crosshairs
    21ea:	08 e3       	ldi	r16, 0x38	; 56
    21ec:	20 e4       	ldi	r18, 0x40	; 64
    21ee:	48 e0       	ldi	r20, 0x08	; 8
    21f0:	60 e4       	ldi	r22, 0x40	; 64
    21f2:	80 e0       	ldi	r24, 0x00	; 0
    21f4:	91 e0       	ldi	r25, 0x01	; 1
    21f6:	0e 94 3b 1b 	call	0x3676	; 0x3676 <drawline>
		drawline(buffer, 32, 32, 96, 32, 1); 
    21fa:	00 e2       	ldi	r16, 0x20	; 32
    21fc:	20 e6       	ldi	r18, 0x60	; 96
    21fe:	40 e2       	ldi	r20, 0x20	; 32
    2200:	60 e2       	ldi	r22, 0x20	; 32
    2202:	80 e0       	ldi	r24, 0x00	; 0
    2204:	91 e0       	ldi	r25, 0x01	; 1
    2206:	0e 94 3b 1b 	call	0x3676	; 0x3676 <drawline>
		fillcircle(buffer, y_pos, x_pos, 8, 1);	// Bubble
    220a:	01 e0       	ldi	r16, 0x01	; 1
    220c:	28 e0       	ldi	r18, 0x08	; 8
    220e:	4c 2f       	mov	r20, r28
    2210:	6a 2d       	mov	r22, r10
    2212:	80 e0       	ldi	r24, 0x00	; 0
    2214:	91 e0       	ldi	r25, 0x01	; 1
    2216:	0e 94 09 1c 	call	0x3812	; 0x3812 <fillcircle>

		// Refresh GLCD 
		write_buffer(buffer,1);
    221a:	61 e0       	ldi	r22, 0x01	; 1
    221c:	80 e0       	ldi	r24, 0x00	; 0
    221e:	91 e0       	ldi	r25, 0x01	; 1
    2220:	0e 94 a1 1a 	call	0x3542	; 0x3542 <write_buffer>
		clear_buffer(buffer);
    2224:	80 e0       	ldi	r24, 0x00	; 0
    2226:	91 e0       	ldi	r25, 0x01	; 1
    2228:	0e 94 db 1a 	call	0x35b6	; 0x35b6 <clear_buffer>
    222c:	79 cf       	rjmp	.-270    	; 0x2120 <Display_balance+0x14>
	}
}
    222e:	df 91       	pop	r29
    2230:	cf 91       	pop	r28
    2232:	0f 91       	pop	r16
    2234:	ef 90       	pop	r14
    2236:	df 90       	pop	r13
    2238:	cf 90       	pop	r12
    223a:	bf 90       	pop	r11
    223c:	af 90       	pop	r10
    223e:	08 95       	ret

00002240 <Display_rcinput>:
// Code
//************************************************************

void Display_rcinput(void)
{
	while(BUTTON1 != 0)
    2240:	1f 9b       	sbis	0x03, 7	; 3
    2242:	03 c1       	rjmp	.+518    	; 0x244a <Display_rcinput+0x20a>
	{
		if (BUTTON4 == 0)
    2244:	1c 9b       	sbis	0x03, 4	; 3
		{
			CenterSticks();
    2246:	0e 94 1f 39 	call	0x723e	; 0x723e <CenterSticks>
		}

		RxGetChannels();
    224a:	0e 94 8f 38 	call	0x711e	; 0x711e <RxGetChannels>

		LCD_Display_Text(114,(const unsigned char*)Verdana8,0,0);
    224e:	20 e0       	ldi	r18, 0x00	; 0
    2250:	30 e0       	ldi	r19, 0x00	; 0
    2252:	40 e0       	ldi	r20, 0x00	; 0
    2254:	50 e0       	ldi	r21, 0x00	; 0
    2256:	65 e2       	ldi	r22, 0x25	; 37
    2258:	7a e0       	ldi	r23, 0x0A	; 10
    225a:	82 e7       	ldi	r24, 0x72	; 114
    225c:	0e 94 84 1c 	call	0x3908	; 0x3908 <LCD_Display_Text>
		LCD_Display_Text(32,(const unsigned char*)Verdana8,0,10);
    2260:	2a e0       	ldi	r18, 0x0A	; 10
    2262:	30 e0       	ldi	r19, 0x00	; 0
    2264:	40 e0       	ldi	r20, 0x00	; 0
    2266:	50 e0       	ldi	r21, 0x00	; 0
    2268:	65 e2       	ldi	r22, 0x25	; 37
    226a:	7a e0       	ldi	r23, 0x0A	; 10
    226c:	80 e2       	ldi	r24, 0x20	; 32
    226e:	0e 94 84 1c 	call	0x3908	; 0x3908 <LCD_Display_Text>
		LCD_Display_Text(115,(const unsigned char*)Verdana8,0,20);
    2272:	24 e1       	ldi	r18, 0x14	; 20
    2274:	30 e0       	ldi	r19, 0x00	; 0
    2276:	40 e0       	ldi	r20, 0x00	; 0
    2278:	50 e0       	ldi	r21, 0x00	; 0
    227a:	65 e2       	ldi	r22, 0x25	; 37
    227c:	7a e0       	ldi	r23, 0x0A	; 10
    227e:	83 e7       	ldi	r24, 0x73	; 115
    2280:	0e 94 84 1c 	call	0x3908	; 0x3908 <LCD_Display_Text>
		LCD_Display_Text(35,(const unsigned char*)Verdana8,0,30);
    2284:	2e e1       	ldi	r18, 0x1E	; 30
    2286:	30 e0       	ldi	r19, 0x00	; 0
    2288:	40 e0       	ldi	r20, 0x00	; 0
    228a:	50 e0       	ldi	r21, 0x00	; 0
    228c:	65 e2       	ldi	r22, 0x25	; 37
    228e:	7a e0       	ldi	r23, 0x0A	; 10
    2290:	83 e2       	ldi	r24, 0x23	; 35
    2292:	0e 94 84 1c 	call	0x3908	; 0x3908 <LCD_Display_Text>

		LCD_Display_Text(109,(const unsigned char*)Verdana8,70,0);
    2296:	20 e0       	ldi	r18, 0x00	; 0
    2298:	30 e0       	ldi	r19, 0x00	; 0
    229a:	46 e4       	ldi	r20, 0x46	; 70
    229c:	50 e0       	ldi	r21, 0x00	; 0
    229e:	65 e2       	ldi	r22, 0x25	; 37
    22a0:	7a e0       	ldi	r23, 0x0A	; 10
    22a2:	8d e6       	ldi	r24, 0x6D	; 109
    22a4:	0e 94 84 1c 	call	0x3908	; 0x3908 <LCD_Display_Text>
		LCD_Display_Text(110,(const unsigned char*)Verdana8,70,10);
    22a8:	2a e0       	ldi	r18, 0x0A	; 10
    22aa:	30 e0       	ldi	r19, 0x00	; 0
    22ac:	46 e4       	ldi	r20, 0x46	; 70
    22ae:	50 e0       	ldi	r21, 0x00	; 0
    22b0:	65 e2       	ldi	r22, 0x25	; 37
    22b2:	7a e0       	ldi	r23, 0x0A	; 10
    22b4:	8e e6       	ldi	r24, 0x6E	; 110
    22b6:	0e 94 84 1c 	call	0x3908	; 0x3908 <LCD_Display_Text>
		LCD_Display_Text(111,(const unsigned char*)Verdana8,70,20);
    22ba:	24 e1       	ldi	r18, 0x14	; 20
    22bc:	30 e0       	ldi	r19, 0x00	; 0
    22be:	46 e4       	ldi	r20, 0x46	; 70
    22c0:	50 e0       	ldi	r21, 0x00	; 0
    22c2:	65 e2       	ldi	r22, 0x25	; 37
    22c4:	7a e0       	ldi	r23, 0x0A	; 10
    22c6:	8f e6       	ldi	r24, 0x6F	; 111
    22c8:	0e 94 84 1c 	call	0x3908	; 0x3908 <LCD_Display_Text>
		LCD_Display_Text(112,(const unsigned char*)Verdana8,70,30);
    22cc:	2e e1       	ldi	r18, 0x1E	; 30
    22ce:	30 e0       	ldi	r19, 0x00	; 0
    22d0:	46 e4       	ldi	r20, 0x46	; 70
    22d2:	50 e0       	ldi	r21, 0x00	; 0
    22d4:	65 e2       	ldi	r22, 0x25	; 37
    22d6:	7a e0       	ldi	r23, 0x0A	; 10
    22d8:	80 e7       	ldi	r24, 0x70	; 112
    22da:	0e 94 84 1c 	call	0x3908	; 0x3908 <LCD_Display_Text>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    22de:	4a e0       	ldi	r20, 0x0A	; 10
    22e0:	6c e4       	ldi	r22, 0x4C	; 76
    22e2:	75 e0       	ldi	r23, 0x05	; 5
    22e4:	80 91 9d 07 	lds	r24, 0x079D
    22e8:	90 91 9e 07 	lds	r25, 0x079E
    22ec:	0e 94 d3 3e 	call	0x7da6	; 0x7da6 <__itoa_ncheck>

		mugui_lcd_puts(itoa(MonopolarThrottle,pBuffer,10),(const unsigned char*)Verdana8,37,0);
    22f0:	20 e0       	ldi	r18, 0x00	; 0
    22f2:	30 e0       	ldi	r19, 0x00	; 0
    22f4:	45 e2       	ldi	r20, 0x25	; 37
    22f6:	50 e0       	ldi	r21, 0x00	; 0
    22f8:	65 e2       	ldi	r22, 0x25	; 37
    22fa:	7a e0       	ldi	r23, 0x0A	; 10
    22fc:	0e 94 89 34 	call	0x6912	; 0x6912 <mugui_lcd_puts>
    2300:	4a e0       	ldi	r20, 0x0A	; 10
    2302:	6c e4       	ldi	r22, 0x4C	; 76
    2304:	75 e0       	ldi	r23, 0x05	; 5
    2306:	80 91 a1 07 	lds	r24, 0x07A1
    230a:	90 91 a2 07 	lds	r25, 0x07A2
    230e:	0e 94 d3 3e 	call	0x7da6	; 0x7da6 <__itoa_ncheck>
		mugui_lcd_puts(itoa(RCinputs[AILERON],pBuffer,10),(const unsigned char*)Verdana8,37,10);
    2312:	2a e0       	ldi	r18, 0x0A	; 10
    2314:	30 e0       	ldi	r19, 0x00	; 0
    2316:	45 e2       	ldi	r20, 0x25	; 37
    2318:	50 e0       	ldi	r21, 0x00	; 0
    231a:	65 e2       	ldi	r22, 0x25	; 37
    231c:	7a e0       	ldi	r23, 0x0A	; 10
    231e:	0e 94 89 34 	call	0x6912	; 0x6912 <mugui_lcd_puts>
    2322:	4a e0       	ldi	r20, 0x0A	; 10
    2324:	6c e4       	ldi	r22, 0x4C	; 76
    2326:	75 e0       	ldi	r23, 0x05	; 5
    2328:	80 91 a3 07 	lds	r24, 0x07A3
    232c:	90 91 a4 07 	lds	r25, 0x07A4
    2330:	0e 94 d3 3e 	call	0x7da6	; 0x7da6 <__itoa_ncheck>
		mugui_lcd_puts(itoa(RCinputs[ELEVATOR],pBuffer,10),(const unsigned char*)Verdana8,37,20);
    2334:	24 e1       	ldi	r18, 0x14	; 20
    2336:	30 e0       	ldi	r19, 0x00	; 0
    2338:	45 e2       	ldi	r20, 0x25	; 37
    233a:	50 e0       	ldi	r21, 0x00	; 0
    233c:	65 e2       	ldi	r22, 0x25	; 37
    233e:	7a e0       	ldi	r23, 0x0A	; 10
    2340:	0e 94 89 34 	call	0x6912	; 0x6912 <mugui_lcd_puts>
    2344:	4a e0       	ldi	r20, 0x0A	; 10
    2346:	6c e4       	ldi	r22, 0x4C	; 76
    2348:	75 e0       	ldi	r23, 0x05	; 5
    234a:	80 91 a5 07 	lds	r24, 0x07A5
    234e:	90 91 a6 07 	lds	r25, 0x07A6
    2352:	0e 94 d3 3e 	call	0x7da6	; 0x7da6 <__itoa_ncheck>
		mugui_lcd_puts(itoa(RCinputs[RUDDER],pBuffer,10),(const unsigned char*)Verdana8,37,30);
    2356:	2e e1       	ldi	r18, 0x1E	; 30
    2358:	30 e0       	ldi	r19, 0x00	; 0
    235a:	45 e2       	ldi	r20, 0x25	; 37
    235c:	50 e0       	ldi	r21, 0x00	; 0
    235e:	65 e2       	ldi	r22, 0x25	; 37
    2360:	7a e0       	ldi	r23, 0x0A	; 10
    2362:	0e 94 89 34 	call	0x6912	; 0x6912 <mugui_lcd_puts>
    2366:	4a e0       	ldi	r20, 0x0A	; 10
    2368:	6c e4       	ldi	r22, 0x4C	; 76
    236a:	75 e0       	ldi	r23, 0x05	; 5
    236c:	80 91 a7 07 	lds	r24, 0x07A7
    2370:	90 91 a8 07 	lds	r25, 0x07A8
    2374:	0e 94 d3 3e 	call	0x7da6	; 0x7da6 <__itoa_ncheck>

		mugui_lcd_puts(itoa(RCinputs[GEAR],pBuffer,10),(const unsigned char*)Verdana8,100,0);
    2378:	20 e0       	ldi	r18, 0x00	; 0
    237a:	30 e0       	ldi	r19, 0x00	; 0
    237c:	44 e6       	ldi	r20, 0x64	; 100
    237e:	50 e0       	ldi	r21, 0x00	; 0
    2380:	65 e2       	ldi	r22, 0x25	; 37
    2382:	7a e0       	ldi	r23, 0x0A	; 10
    2384:	0e 94 89 34 	call	0x6912	; 0x6912 <mugui_lcd_puts>
    2388:	4a e0       	ldi	r20, 0x0A	; 10
    238a:	6c e4       	ldi	r22, 0x4C	; 76
    238c:	75 e0       	ldi	r23, 0x05	; 5
    238e:	80 91 a9 07 	lds	r24, 0x07A9
    2392:	90 91 aa 07 	lds	r25, 0x07AA
    2396:	0e 94 d3 3e 	call	0x7da6	; 0x7da6 <__itoa_ncheck>
		mugui_lcd_puts(itoa(RCinputs[AUX1],pBuffer,10),(const unsigned char*)Verdana8,100,10);
    239a:	2a e0       	ldi	r18, 0x0A	; 10
    239c:	30 e0       	ldi	r19, 0x00	; 0
    239e:	44 e6       	ldi	r20, 0x64	; 100
    23a0:	50 e0       	ldi	r21, 0x00	; 0
    23a2:	65 e2       	ldi	r22, 0x25	; 37
    23a4:	7a e0       	ldi	r23, 0x0A	; 10
    23a6:	0e 94 89 34 	call	0x6912	; 0x6912 <mugui_lcd_puts>
    23aa:	4a e0       	ldi	r20, 0x0A	; 10
    23ac:	6c e4       	ldi	r22, 0x4C	; 76
    23ae:	75 e0       	ldi	r23, 0x05	; 5
    23b0:	80 91 ab 07 	lds	r24, 0x07AB
    23b4:	90 91 ac 07 	lds	r25, 0x07AC
    23b8:	0e 94 d3 3e 	call	0x7da6	; 0x7da6 <__itoa_ncheck>
		mugui_lcd_puts(itoa(RCinputs[AUX2],pBuffer,10),(const unsigned char*)Verdana8,100,20);
    23bc:	24 e1       	ldi	r18, 0x14	; 20
    23be:	30 e0       	ldi	r19, 0x00	; 0
    23c0:	44 e6       	ldi	r20, 0x64	; 100
    23c2:	50 e0       	ldi	r21, 0x00	; 0
    23c4:	65 e2       	ldi	r22, 0x25	; 37
    23c6:	7a e0       	ldi	r23, 0x0A	; 10
    23c8:	0e 94 89 34 	call	0x6912	; 0x6912 <mugui_lcd_puts>
    23cc:	4a e0       	ldi	r20, 0x0A	; 10
    23ce:	6c e4       	ldi	r22, 0x4C	; 76
    23d0:	75 e0       	ldi	r23, 0x05	; 5
    23d2:	80 91 ad 07 	lds	r24, 0x07AD
    23d6:	90 91 ae 07 	lds	r25, 0x07AE
    23da:	0e 94 d3 3e 	call	0x7da6	; 0x7da6 <__itoa_ncheck>
		mugui_lcd_puts(itoa(RCinputs[AUX3],pBuffer,10),(const unsigned char*)Verdana8,100,30);
    23de:	2e e1       	ldi	r18, 0x1E	; 30
    23e0:	30 e0       	ldi	r19, 0x00	; 0
    23e2:	44 e6       	ldi	r20, 0x64	; 100
    23e4:	50 e0       	ldi	r21, 0x00	; 0
    23e6:	65 e2       	ldi	r22, 0x25	; 37
    23e8:	7a e0       	ldi	r23, 0x0A	; 10
    23ea:	0e 94 89 34 	call	0x6912	; 0x6912 <mugui_lcd_puts>

		// Print bottom text and markers
		LCD_Display_Text(12, (const unsigned char*)Wingdings, 0, 57); 	// Left
    23ee:	29 e3       	ldi	r18, 0x39	; 57
    23f0:	30 e0       	ldi	r19, 0x00	; 0
    23f2:	40 e0       	ldi	r20, 0x00	; 0
    23f4:	50 e0       	ldi	r21, 0x00	; 0
    23f6:	6d e0       	ldi	r22, 0x0D	; 13
    23f8:	71 e0       	ldi	r23, 0x01	; 1
    23fa:	8c e0       	ldi	r24, 0x0C	; 12
    23fc:	0e 94 84 1c 	call	0x3908	; 0x3908 <LCD_Display_Text>
		LCD_Display_Text(60, (const unsigned char*)Verdana8, 100, 55); 	// Cal.
    2400:	27 e3       	ldi	r18, 0x37	; 55
    2402:	30 e0       	ldi	r19, 0x00	; 0
    2404:	44 e6       	ldi	r20, 0x64	; 100
    2406:	50 e0       	ldi	r21, 0x00	; 0
    2408:	65 e2       	ldi	r22, 0x25	; 37
    240a:	7a e0       	ldi	r23, 0x0A	; 10
    240c:	8c e3       	ldi	r24, 0x3C	; 60
    240e:	0e 94 84 1c 	call	0x3908	; 0x3908 <LCD_Display_Text>
		LCD_Display_Text(9, (const unsigned char*)Wingdings, 119, 59); 	// Down
    2412:	2b e3       	ldi	r18, 0x3B	; 59
    2414:	30 e0       	ldi	r19, 0x00	; 0
    2416:	47 e7       	ldi	r20, 0x77	; 119
    2418:	50 e0       	ldi	r21, 0x00	; 0
    241a:	6d e0       	ldi	r22, 0x0D	; 13
    241c:	71 e0       	ldi	r23, 0x01	; 1
    241e:	89 e0       	ldi	r24, 0x09	; 9
    2420:	0e 94 84 1c 	call	0x3908	; 0x3908 <LCD_Display_Text>

		// Update buffer
		write_buffer(buffer,1);
    2424:	61 e0       	ldi	r22, 0x01	; 1
    2426:	80 e0       	ldi	r24, 0x00	; 0
    2428:	91 e0       	ldi	r25, 0x01	; 1
    242a:	0e 94 a1 1a 	call	0x3542	; 0x3542 <write_buffer>
		clear_buffer(buffer);
    242e:	80 e0       	ldi	r24, 0x00	; 0
    2430:	91 e0       	ldi	r25, 0x01	; 1
    2432:	0e 94 db 1a 	call	0x35b6	; 0x35b6 <clear_buffer>
    2436:	2f e7       	ldi	r18, 0x7F	; 127
    2438:	8a e1       	ldi	r24, 0x1A	; 26
    243a:	96 e0       	ldi	r25, 0x06	; 6
    243c:	21 50       	subi	r18, 0x01	; 1
    243e:	80 40       	sbci	r24, 0x00	; 0
    2440:	90 40       	sbci	r25, 0x00	; 0
    2442:	e1 f7       	brne	.-8      	; 0x243c <Display_rcinput+0x1fc>
    2444:	00 c0       	rjmp	.+0      	; 0x2446 <Display_rcinput+0x206>
    2446:	00 00       	nop
    2448:	fb ce       	rjmp	.-522    	; 0x2240 <Display_rcinput>
		_delay_ms(100);
	}
	// Exit
}
    244a:	08 95       	ret

0000244c <Display_sensors>:
// Code
//************************************************************

void Display_sensors(void)
{
	while(BUTTON1 != 0)
    244c:	1f 9b       	sbis	0x03, 7	; 3
    244e:	e3 c0       	rjmp	.+454    	; 0x2616 <Display_sensors+0x1ca>
	{
		if (BUTTON4 == 0)
    2450:	1c 99       	sbic	0x03, 4	; 3
    2452:	0e c0       	rjmp	.+28     	; 0x2470 <Display_sensors+0x24>
    2454:	2f e7       	ldi	r18, 0x7F	; 127
    2456:	84 e8       	ldi	r24, 0x84	; 132
    2458:	9e e1       	ldi	r25, 0x1E	; 30
    245a:	21 50       	subi	r18, 0x01	; 1
    245c:	80 40       	sbci	r24, 0x00	; 0
    245e:	90 40       	sbci	r25, 0x00	; 0
    2460:	e1 f7       	brne	.-8      	; 0x245a <Display_sensors+0xe>
    2462:	00 c0       	rjmp	.+0      	; 0x2464 <Display_sensors+0x18>
    2464:	00 00       	nop
		{
			_delay_ms(500);
#ifdef AIRSPEED
			CalibrateAirspeed();
#endif
			CalibrateGyrosFast();
    2466:	0e 94 4a 1d 	call	0x3a94	; 0x3a94 <CalibrateGyrosFast>
			CalibrateAcc(NORMAL); // This also saves the data in eepom
    246a:	80 e0       	ldi	r24, 0x00	; 0
    246c:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <CalibrateAcc>
		}

		if (BUTTON3 == 0)
    2470:	1d 99       	sbic	0x03, 5	; 3
    2472:	0c c0       	rjmp	.+24     	; 0x248c <Display_sensors+0x40>
    2474:	2f e7       	ldi	r18, 0x7F	; 127
    2476:	84 e8       	ldi	r24, 0x84	; 132
    2478:	9e e1       	ldi	r25, 0x1E	; 30
    247a:	21 50       	subi	r18, 0x01	; 1
    247c:	80 40       	sbci	r24, 0x00	; 0
    247e:	90 40       	sbci	r25, 0x00	; 0
    2480:	e1 f7       	brne	.-8      	; 0x247a <Display_sensors+0x2e>
    2482:	00 c0       	rjmp	.+0      	; 0x2484 <Display_sensors+0x38>
    2484:	00 00       	nop
		{
			_delay_ms(500);
			CalibrateAcc(REVERSED);
    2486:	81 e0       	ldi	r24, 0x01	; 1
    2488:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <CalibrateAcc>
		}

		ReadGyros();
    248c:	0e 94 1d 1d 	call	0x3a3a	; 0x3a3a <ReadGyros>
		ReadAcc();
    2490:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <ReadAcc>

		LCD_Display_Text(26,(const unsigned char*)Verdana8,37,0); 	// Gyro
    2494:	20 e0       	ldi	r18, 0x00	; 0
    2496:	30 e0       	ldi	r19, 0x00	; 0
    2498:	45 e2       	ldi	r20, 0x25	; 37
    249a:	50 e0       	ldi	r21, 0x00	; 0
    249c:	65 e2       	ldi	r22, 0x25	; 37
    249e:	7a e0       	ldi	r23, 0x0A	; 10
    24a0:	8a e1       	ldi	r24, 0x1A	; 26
    24a2:	0e 94 84 1c 	call	0x3908	; 0x3908 <LCD_Display_Text>
		LCD_Display_Text(30,(const unsigned char*)Verdana8,77,0); 	// Acc
    24a6:	20 e0       	ldi	r18, 0x00	; 0
    24a8:	30 e0       	ldi	r19, 0x00	; 0
    24aa:	4d e4       	ldi	r20, 0x4D	; 77
    24ac:	50 e0       	ldi	r21, 0x00	; 0
    24ae:	65 e2       	ldi	r22, 0x25	; 37
    24b0:	7a e0       	ldi	r23, 0x0A	; 10
    24b2:	8e e1       	ldi	r24, 0x1E	; 30
    24b4:	0e 94 84 1c 	call	0x3908	; 0x3908 <LCD_Display_Text>
		LCD_Display_Text(27,(const unsigned char*)Verdana8,5,13);	// Roll
    24b8:	2d e0       	ldi	r18, 0x0D	; 13
    24ba:	30 e0       	ldi	r19, 0x00	; 0
    24bc:	45 e0       	ldi	r20, 0x05	; 5
    24be:	50 e0       	ldi	r21, 0x00	; 0
    24c0:	65 e2       	ldi	r22, 0x25	; 37
    24c2:	7a e0       	ldi	r23, 0x0A	; 10
    24c4:	8b e1       	ldi	r24, 0x1B	; 27
    24c6:	0e 94 84 1c 	call	0x3908	; 0x3908 <LCD_Display_Text>
		LCD_Display_Text(28,(const unsigned char*)Verdana8,5,23);	// Pitch
    24ca:	27 e1       	ldi	r18, 0x17	; 23
    24cc:	30 e0       	ldi	r19, 0x00	; 0
    24ce:	45 e0       	ldi	r20, 0x05	; 5
    24d0:	50 e0       	ldi	r21, 0x00	; 0
    24d2:	65 e2       	ldi	r22, 0x25	; 37
    24d4:	7a e0       	ldi	r23, 0x0A	; 10
    24d6:	8c e1       	ldi	r24, 0x1C	; 28
    24d8:	0e 94 84 1c 	call	0x3908	; 0x3908 <LCD_Display_Text>
		LCD_Display_Text(29,(const unsigned char*)Verdana8,5,33);	// Yaw/Z
    24dc:	21 e2       	ldi	r18, 0x21	; 33
    24de:	30 e0       	ldi	r19, 0x00	; 0
    24e0:	45 e0       	ldi	r20, 0x05	; 5
    24e2:	50 e0       	ldi	r21, 0x00	; 0
    24e4:	65 e2       	ldi	r22, 0x25	; 37
    24e6:	7a e0       	ldi	r23, 0x0A	; 10
    24e8:	8d e1       	ldi	r24, 0x1D	; 29
    24ea:	0e 94 84 1c 	call	0x3908	; 0x3908 <LCD_Display_Text>
    24ee:	4a e0       	ldi	r20, 0x0A	; 10
    24f0:	6c e4       	ldi	r22, 0x4C	; 76
    24f2:	75 e0       	ldi	r23, 0x05	; 5
    24f4:	80 91 60 05 	lds	r24, 0x0560
    24f8:	90 91 61 05 	lds	r25, 0x0561
    24fc:	0e 94 d3 3e 	call	0x7da6	; 0x7da6 <__itoa_ncheck>

		mugui_lcd_puts(itoa(gyroADC[ROLL],pBuffer,10),(const unsigned char*)Verdana8,40,13);
    2500:	2d e0       	ldi	r18, 0x0D	; 13
    2502:	30 e0       	ldi	r19, 0x00	; 0
    2504:	48 e2       	ldi	r20, 0x28	; 40
    2506:	50 e0       	ldi	r21, 0x00	; 0
    2508:	65 e2       	ldi	r22, 0x25	; 37
    250a:	7a e0       	ldi	r23, 0x0A	; 10
    250c:	0e 94 89 34 	call	0x6912	; 0x6912 <mugui_lcd_puts>
    2510:	4a e0       	ldi	r20, 0x0A	; 10
    2512:	6c e4       	ldi	r22, 0x4C	; 76
    2514:	75 e0       	ldi	r23, 0x05	; 5
    2516:	80 91 62 05 	lds	r24, 0x0562
    251a:	90 91 63 05 	lds	r25, 0x0563
    251e:	0e 94 d3 3e 	call	0x7da6	; 0x7da6 <__itoa_ncheck>
		mugui_lcd_puts(itoa(gyroADC[PITCH],pBuffer,10),(const unsigned char*)Verdana8,40,23);
    2522:	27 e1       	ldi	r18, 0x17	; 23
    2524:	30 e0       	ldi	r19, 0x00	; 0
    2526:	48 e2       	ldi	r20, 0x28	; 40
    2528:	50 e0       	ldi	r21, 0x00	; 0
    252a:	65 e2       	ldi	r22, 0x25	; 37
    252c:	7a e0       	ldi	r23, 0x0A	; 10
    252e:	0e 94 89 34 	call	0x6912	; 0x6912 <mugui_lcd_puts>
    2532:	4a e0       	ldi	r20, 0x0A	; 10
    2534:	6c e4       	ldi	r22, 0x4C	; 76
    2536:	75 e0       	ldi	r23, 0x05	; 5
    2538:	80 91 64 05 	lds	r24, 0x0564
    253c:	90 91 65 05 	lds	r25, 0x0565
    2540:	0e 94 d3 3e 	call	0x7da6	; 0x7da6 <__itoa_ncheck>
		mugui_lcd_puts(itoa(gyroADC[YAW],pBuffer,10),(const unsigned char*)Verdana8,40,33);
    2544:	21 e2       	ldi	r18, 0x21	; 33
    2546:	30 e0       	ldi	r19, 0x00	; 0
    2548:	48 e2       	ldi	r20, 0x28	; 40
    254a:	50 e0       	ldi	r21, 0x00	; 0
    254c:	65 e2       	ldi	r22, 0x25	; 37
    254e:	7a e0       	ldi	r23, 0x0A	; 10
    2550:	0e 94 89 34 	call	0x6912	; 0x6912 <mugui_lcd_puts>
    2554:	4a e0       	ldi	r20, 0x0A	; 10
    2556:	6c e4       	ldi	r22, 0x4C	; 76
    2558:	75 e0       	ldi	r23, 0x05	; 5
    255a:	80 91 2d 05 	lds	r24, 0x052D
    255e:	90 91 2e 05 	lds	r25, 0x052E
    2562:	0e 94 d3 3e 	call	0x7da6	; 0x7da6 <__itoa_ncheck>

		mugui_lcd_puts(itoa(accADC[ROLL],pBuffer,10),(const unsigned char*)Verdana8,80,13);
    2566:	2d e0       	ldi	r18, 0x0D	; 13
    2568:	30 e0       	ldi	r19, 0x00	; 0
    256a:	40 e5       	ldi	r20, 0x50	; 80
    256c:	50 e0       	ldi	r21, 0x00	; 0
    256e:	65 e2       	ldi	r22, 0x25	; 37
    2570:	7a e0       	ldi	r23, 0x0A	; 10
    2572:	0e 94 89 34 	call	0x6912	; 0x6912 <mugui_lcd_puts>
    2576:	4a e0       	ldi	r20, 0x0A	; 10
    2578:	6c e4       	ldi	r22, 0x4C	; 76
    257a:	75 e0       	ldi	r23, 0x05	; 5
    257c:	80 91 2f 05 	lds	r24, 0x052F
    2580:	90 91 30 05 	lds	r25, 0x0530
    2584:	0e 94 d3 3e 	call	0x7da6	; 0x7da6 <__itoa_ncheck>
		mugui_lcd_puts(itoa(accADC[PITCH],pBuffer,10),(const unsigned char*)Verdana8,80,23);
    2588:	27 e1       	ldi	r18, 0x17	; 23
    258a:	30 e0       	ldi	r19, 0x00	; 0
    258c:	40 e5       	ldi	r20, 0x50	; 80
    258e:	50 e0       	ldi	r21, 0x00	; 0
    2590:	65 e2       	ldi	r22, 0x25	; 37
    2592:	7a e0       	ldi	r23, 0x0A	; 10
    2594:	0e 94 89 34 	call	0x6912	; 0x6912 <mugui_lcd_puts>
    2598:	4a e0       	ldi	r20, 0x0A	; 10
    259a:	6c e4       	ldi	r22, 0x4C	; 76
    259c:	75 e0       	ldi	r23, 0x05	; 5
    259e:	80 91 31 05 	lds	r24, 0x0531
    25a2:	90 91 32 05 	lds	r25, 0x0532
    25a6:	0e 94 d3 3e 	call	0x7da6	; 0x7da6 <__itoa_ncheck>
		mugui_lcd_puts(itoa(accADC[YAW],pBuffer,10),(const unsigned char*)Verdana8,80,33);
    25aa:	21 e2       	ldi	r18, 0x21	; 33
    25ac:	30 e0       	ldi	r19, 0x00	; 0
    25ae:	40 e5       	ldi	r20, 0x50	; 80
    25b0:	50 e0       	ldi	r21, 0x00	; 0
    25b2:	65 e2       	ldi	r22, 0x25	; 37
    25b4:	7a e0       	ldi	r23, 0x0A	; 10
    25b6:	0e 94 89 34 	call	0x6912	; 0x6912 <mugui_lcd_puts>
		LCD_Display_Text(53,(const unsigned char*)Verdana8,5,45);		// Airspeed
		mugui_lcd_puts(itoa((GetAirspeed() - Config.AirspeedZero),pBuffer,10),(const unsigned char*)Verdana8,55,45);
#endif

		// Print bottom markers
		LCD_Display_Text(12, (const unsigned char*)Wingdings, 0, 57); 	// Left
    25ba:	29 e3       	ldi	r18, 0x39	; 57
    25bc:	30 e0       	ldi	r19, 0x00	; 0
    25be:	40 e0       	ldi	r20, 0x00	; 0
    25c0:	50 e0       	ldi	r21, 0x00	; 0
    25c2:	6d e0       	ldi	r22, 0x0D	; 13
    25c4:	71 e0       	ldi	r23, 0x01	; 1
    25c6:	8c e0       	ldi	r24, 0x0C	; 12
    25c8:	0e 94 84 1c 	call	0x3908	; 0x3908 <LCD_Display_Text>
		LCD_Display_Text(25, (const unsigned char*)Verdana8, 75, 55); 	// Inverted Calibrate
    25cc:	27 e3       	ldi	r18, 0x37	; 55
    25ce:	30 e0       	ldi	r19, 0x00	; 0
    25d0:	4b e4       	ldi	r20, 0x4B	; 75
    25d2:	50 e0       	ldi	r21, 0x00	; 0
    25d4:	65 e2       	ldi	r22, 0x25	; 37
    25d6:	7a e0       	ldi	r23, 0x0A	; 10
    25d8:	89 e1       	ldi	r24, 0x19	; 25
    25da:	0e 94 84 1c 	call	0x3908	; 0x3908 <LCD_Display_Text>
		LCD_Display_Text(60, (const unsigned char*)Verdana8, 108, 55); 	// Calibrate
    25de:	27 e3       	ldi	r18, 0x37	; 55
    25e0:	30 e0       	ldi	r19, 0x00	; 0
    25e2:	4c e6       	ldi	r20, 0x6C	; 108
    25e4:	50 e0       	ldi	r21, 0x00	; 0
    25e6:	65 e2       	ldi	r22, 0x25	; 37
    25e8:	7a e0       	ldi	r23, 0x0A	; 10
    25ea:	8c e3       	ldi	r24, 0x3C	; 60
    25ec:	0e 94 84 1c 	call	0x3908	; 0x3908 <LCD_Display_Text>

		// Update buffer
		write_buffer(buffer,1);
    25f0:	61 e0       	ldi	r22, 0x01	; 1
    25f2:	80 e0       	ldi	r24, 0x00	; 0
    25f4:	91 e0       	ldi	r25, 0x01	; 1
    25f6:	0e 94 a1 1a 	call	0x3542	; 0x3542 <write_buffer>
		clear_buffer(buffer);
    25fa:	80 e0       	ldi	r24, 0x00	; 0
    25fc:	91 e0       	ldi	r25, 0x01	; 1
    25fe:	0e 94 db 1a 	call	0x35b6	; 0x35b6 <clear_buffer>
    2602:	2f e7       	ldi	r18, 0x7F	; 127
    2604:	8a e1       	ldi	r24, 0x1A	; 26
    2606:	96 e0       	ldi	r25, 0x06	; 6
    2608:	21 50       	subi	r18, 0x01	; 1
    260a:	80 40       	sbci	r24, 0x00	; 0
    260c:	90 40       	sbci	r25, 0x00	; 0
    260e:	e1 f7       	brne	.-8      	; 0x2608 <Display_sensors+0x1bc>
    2610:	00 c0       	rjmp	.+0      	; 0x2612 <Display_sensors+0x1c6>
    2612:	00 00       	nop
    2614:	1b cf       	rjmp	.-458    	; 0x244c <Display_sensors>
		_delay_ms(100);
	}
}
    2616:	08 95       	ret

00002618 <Display_status>:
//************************************************************
// Code
//************************************************************

void Display_status(void)
{
    2618:	a4 e0       	ldi	r26, 0x04	; 4
    261a:	b0 e0       	ldi	r27, 0x00	; 0
    261c:	e2 e1       	ldi	r30, 0x12	; 18
    261e:	f3 e1       	ldi	r31, 0x13	; 19
    2620:	0c 94 9c 3e 	jmp	0x7d38	; 0x7d38 <__prologue_saves__+0x12>
	int16_t temp;
	uint16_t vbat_temp; 
	int8_t	pos1, pos2, pos3;
	mugui_size16_t size;

	clear_buffer(buffer);
    2624:	80 e0       	ldi	r24, 0x00	; 0
    2626:	91 e0       	ldi	r25, 0x01	; 1
    2628:	0e 94 db 1a 	call	0x35b6	; 0x35b6 <clear_buffer>

	// Display text
	LCD_Display_Text(3,(const unsigned char*)Verdana8,0,0); 		// Version text
    262c:	20 e0       	ldi	r18, 0x00	; 0
    262e:	30 e0       	ldi	r19, 0x00	; 0
    2630:	40 e0       	ldi	r20, 0x00	; 0
    2632:	50 e0       	ldi	r21, 0x00	; 0
    2634:	65 e2       	ldi	r22, 0x25	; 37
    2636:	7a e0       	ldi	r23, 0x0A	; 10
    2638:	83 e0       	ldi	r24, 0x03	; 3
    263a:	0e 94 84 1c 	call	0x3908	; 0x3908 <LCD_Display_Text>
	LCD_Display_Text(5,(const unsigned char*)Verdana8,0,16); 	// RX sync
    263e:	20 e1       	ldi	r18, 0x10	; 16
    2640:	30 e0       	ldi	r19, 0x00	; 0
    2642:	40 e0       	ldi	r20, 0x00	; 0
    2644:	50 e0       	ldi	r21, 0x00	; 0
    2646:	65 e2       	ldi	r22, 0x25	; 37
    2648:	7a e0       	ldi	r23, 0x0A	; 10
    264a:	85 e0       	ldi	r24, 0x05	; 5
    264c:	0e 94 84 1c 	call	0x3908	; 0x3908 <LCD_Display_Text>
	LCD_Display_Text(6,(const unsigned char*)Verdana8,0,27); 	// Profile
    2650:	2b e1       	ldi	r18, 0x1B	; 27
    2652:	30 e0       	ldi	r19, 0x00	; 0
    2654:	40 e0       	ldi	r20, 0x00	; 0
    2656:	50 e0       	ldi	r21, 0x00	; 0
    2658:	65 e2       	ldi	r22, 0x25	; 37
    265a:	7a e0       	ldi	r23, 0x0A	; 10
    265c:	86 e0       	ldi	r24, 0x06	; 6
    265e:	0e 94 84 1c 	call	0x3908	; 0x3908 <LCD_Display_Text>
	LCD_Display_Text(23,(const unsigned char*)Verdana8,88,27); 	// Pos
    2662:	2b e1       	ldi	r18, 0x1B	; 27
    2664:	30 e0       	ldi	r19, 0x00	; 0
    2666:	48 e5       	ldi	r20, 0x58	; 88
    2668:	50 e0       	ldi	r21, 0x00	; 0
    266a:	65 e2       	ldi	r22, 0x25	; 37
    266c:	7a e0       	ldi	r23, 0x0A	; 10
    266e:	87 e1       	ldi	r24, 0x17	; 23
    2670:	0e 94 84 1c 	call	0x3908	; 0x3908 <LCD_Display_Text>
	LCD_Display_Text(133,(const unsigned char*)Verdana8,0,38); 	// Battery
    2674:	26 e2       	ldi	r18, 0x26	; 38
    2676:	30 e0       	ldi	r19, 0x00	; 0
    2678:	40 e0       	ldi	r20, 0x00	; 0
    267a:	50 e0       	ldi	r21, 0x00	; 0
    267c:	65 e2       	ldi	r22, 0x25	; 37
    267e:	7a e0       	ldi	r23, 0x0A	; 10
    2680:	85 e8       	ldi	r24, 0x85	; 133
    2682:	0e 94 84 1c 	call	0x3908	; 0x3908 <LCD_Display_Text>
	
	// Display menu and markers
	LCD_Display_Text(9, (const unsigned char*)Wingdings, 0, 59);	// Down
    2686:	2b e3       	ldi	r18, 0x3B	; 59
    2688:	30 e0       	ldi	r19, 0x00	; 0
    268a:	40 e0       	ldi	r20, 0x00	; 0
    268c:	50 e0       	ldi	r21, 0x00	; 0
    268e:	6d e0       	ldi	r22, 0x0D	; 13
    2690:	71 e0       	ldi	r23, 0x01	; 1
    2692:	89 e0       	ldi	r24, 0x09	; 9
    2694:	0e 94 84 1c 	call	0x3908	; 0x3908 <LCD_Display_Text>
	LCD_Display_Text(14,(const unsigned char*)Verdana8,10,55);	// Menu
    2698:	27 e3       	ldi	r18, 0x37	; 55
    269a:	30 e0       	ldi	r19, 0x00	; 0
    269c:	4a e0       	ldi	r20, 0x0A	; 10
    269e:	50 e0       	ldi	r21, 0x00	; 0
    26a0:	65 e2       	ldi	r22, 0x25	; 37
    26a2:	7a e0       	ldi	r23, 0x0A	; 10
    26a4:	8e e0       	ldi	r24, 0x0E	; 14
    26a6:	0e 94 84 1c 	call	0x3908	; 0x3908 <LCD_Display_Text>

	// Display values
	print_menu_text(0, 1, (62 + Config.RxMode), 45, 16); // Rx mode
    26aa:	40 91 a7 05 	lds	r20, 0x05A7
    26ae:	42 5c       	subi	r20, 0xC2	; 194
    26b0:	00 e1       	ldi	r16, 0x10	; 16
    26b2:	2d e2       	ldi	r18, 0x2D	; 45
    26b4:	61 e0       	ldi	r22, 0x01	; 1
    26b6:	80 e0       	ldi	r24, 0x00	; 0
    26b8:	90 e0       	ldi	r25, 0x00	; 0
    26ba:	0e 94 67 25 	call	0x4ace	; 0x4ace <print_menu_text>
    26be:	4a e0       	ldi	r20, 0x0A	; 10
    26c0:	6c e4       	ldi	r22, 0x4C	; 76
    26c2:	75 e0       	ldi	r23, 0x05	; 5
    26c4:	80 91 23 05 	lds	r24, 0x0523
    26c8:	90 91 24 05 	lds	r25, 0x0524
    26cc:	0e 94 d3 3e 	call	0x7da6	; 0x7da6 <__itoa_ncheck>
	mugui_lcd_puts(itoa(transition,pBuffer,10),(const unsigned char*)Verdana8,110,27); // Raw transition value
    26d0:	2b e1       	ldi	r18, 0x1B	; 27
    26d2:	30 e0       	ldi	r19, 0x00	; 0
    26d4:	4e e6       	ldi	r20, 0x6E	; 110
    26d6:	50 e0       	ldi	r21, 0x00	; 0
    26d8:	65 e2       	ldi	r22, 0x25	; 37
    26da:	7a e0       	ldi	r23, 0x0A	; 10
    26dc:	0e 94 89 34 	call	0x6912	; 0x6912 <mugui_lcd_puts>

	if (Config.RxMode == PWM)
    26e0:	80 91 a7 05 	lds	r24, 0x05A7
    26e4:	81 30       	cpi	r24, 0x01	; 1
    26e6:	d1 f4       	brne	.+52     	; 0x271c <Display_status+0x104>
	{
		LCD_Display_Text(24,(const unsigned char*)Verdana8,77,38); // Interrupt counter text 
    26e8:	26 e2       	ldi	r18, 0x26	; 38
    26ea:	30 e0       	ldi	r19, 0x00	; 0
    26ec:	4d e4       	ldi	r20, 0x4D	; 77
    26ee:	50 e0       	ldi	r21, 0x00	; 0
    26f0:	65 e2       	ldi	r22, 0x25	; 37
    26f2:	7a e0       	ldi	r23, 0x0A	; 10
    26f4:	88 e1       	ldi	r24, 0x18	; 24
    26f6:	0e 94 84 1c 	call	0x3908	; 0x3908 <LCD_Display_Text>
    26fa:	4a e0       	ldi	r20, 0x0A	; 10
    26fc:	6c e4       	ldi	r22, 0x4C	; 76
    26fe:	75 e0       	ldi	r23, 0x05	; 5
    2700:	80 91 0a 05 	lds	r24, 0x050A
    2704:	90 91 0b 05 	lds	r25, 0x050B
    2708:	0e 94 d3 3e 	call	0x7da6	; 0x7da6 <__itoa_ncheck>
		mugui_lcd_puts(itoa(InterruptCount,pBuffer,10),(const unsigned char*)Verdana8,110,38); // Interrupt counter
    270c:	26 e2       	ldi	r18, 0x26	; 38
    270e:	30 e0       	ldi	r19, 0x00	; 0
    2710:	4e e6       	ldi	r20, 0x6E	; 110
    2712:	50 e0       	ldi	r21, 0x00	; 0
    2714:	65 e2       	ldi	r22, 0x25	; 37
    2716:	7a e0       	ldi	r23, 0x0A	; 10
    2718:	0e 94 89 34 	call	0x6912	; 0x6912 <mugui_lcd_puts>
	}

	// Display transition point
	if (transition <= 0)
    271c:	80 91 23 05 	lds	r24, 0x0523
    2720:	90 91 24 05 	lds	r25, 0x0524
    2724:	18 16       	cp	r1, r24
    2726:	19 06       	cpc	r1, r25
    2728:	44 f0       	brlt	.+16     	; 0x273a <Display_status+0x122>
	{
		LCD_Display_Text(48,(const unsigned char*)Verdana8,45,27);
    272a:	2b e1       	ldi	r18, 0x1B	; 27
    272c:	30 e0       	ldi	r19, 0x00	; 0
    272e:	4d e2       	ldi	r20, 0x2D	; 45
    2730:	50 e0       	ldi	r21, 0x00	; 0
    2732:	65 e2       	ldi	r22, 0x25	; 37
    2734:	7a e0       	ldi	r23, 0x0A	; 10
    2736:	80 e3       	ldi	r24, 0x30	; 48
    2738:	30 c0       	rjmp	.+96     	; 0x279a <Display_status+0x182>
	}
	else if (transition >= 100)
    273a:	84 36       	cpi	r24, 0x64	; 100
    273c:	91 05       	cpc	r25, r1
    273e:	44 f0       	brlt	.+16     	; 0x2750 <Display_status+0x138>
	{
		LCD_Display_Text(50,(const unsigned char*)Verdana8,45,27);
    2740:	2b e1       	ldi	r18, 0x1B	; 27
    2742:	30 e0       	ldi	r19, 0x00	; 0
    2744:	4d e2       	ldi	r20, 0x2D	; 45
    2746:	50 e0       	ldi	r21, 0x00	; 0
    2748:	65 e2       	ldi	r22, 0x25	; 37
    274a:	7a e0       	ldi	r23, 0x0A	; 10
    274c:	82 e3       	ldi	r24, 0x32	; 50
    274e:	25 c0       	rjmp	.+74     	; 0x279a <Display_status+0x182>
	}
	else if (transition == Config.Transition_P1n)
    2750:	20 91 b0 05 	lds	r18, 0x05B0
    2754:	33 27       	eor	r19, r19
    2756:	27 fd       	sbrc	r18, 7
    2758:	30 95       	com	r19
    275a:	82 17       	cp	r24, r18
    275c:	93 07       	cpc	r25, r19
    275e:	41 f4       	brne	.+16     	; 0x2770 <Display_status+0x158>
	{
		LCD_Display_Text(49,(const unsigned char*)Verdana8,45,27);
    2760:	2b e1       	ldi	r18, 0x1B	; 27
    2762:	30 e0       	ldi	r19, 0x00	; 0
    2764:	4d e2       	ldi	r20, 0x2D	; 45
    2766:	50 e0       	ldi	r21, 0x00	; 0
    2768:	65 e2       	ldi	r22, 0x25	; 37
    276a:	7a e0       	ldi	r23, 0x0A	; 10
    276c:	81 e3       	ldi	r24, 0x31	; 49
    276e:	15 c0       	rjmp	.+42     	; 0x279a <Display_status+0x182>
	}
	else if (transition < Config.Transition_P1n)
    2770:	82 17       	cp	r24, r18
    2772:	93 07       	cpc	r25, r19
    2774:	44 f4       	brge	.+16     	; 0x2786 <Display_status+0x16e>
	{
		LCD_Display_Text(51,(const unsigned char*)Verdana8,45,27);
    2776:	2b e1       	ldi	r18, 0x1B	; 27
    2778:	30 e0       	ldi	r19, 0x00	; 0
    277a:	4d e2       	ldi	r20, 0x2D	; 45
    277c:	50 e0       	ldi	r21, 0x00	; 0
    277e:	65 e2       	ldi	r22, 0x25	; 37
    2780:	7a e0       	ldi	r23, 0x0A	; 10
    2782:	83 e3       	ldi	r24, 0x33	; 51
    2784:	0a c0       	rjmp	.+20     	; 0x279a <Display_status+0x182>
	}
	else if (transition > Config.Transition_P1n)
    2786:	28 17       	cp	r18, r24
    2788:	39 07       	cpc	r19, r25
    278a:	4c f4       	brge	.+18     	; 0x279e <Display_status+0x186>
	{
		LCD_Display_Text(52,(const unsigned char*)Verdana8,45,27);
    278c:	2b e1       	ldi	r18, 0x1B	; 27
    278e:	30 e0       	ldi	r19, 0x00	; 0
    2790:	4d e2       	ldi	r20, 0x2D	; 45
    2792:	50 e0       	ldi	r21, 0x00	; 0
    2794:	65 e2       	ldi	r22, 0x25	; 37
    2796:	7a e0       	ldi	r23, 0x0A	; 10
    2798:	84 e3       	ldi	r24, 0x34	; 52
    279a:	0e 94 84 1c 	call	0x3908	; 0x3908 <LCD_Display_Text>

	// Display voltage
	uint8_t x_loc = 45;		// X location of voltage display
	uint8_t y_loc = 38;		// Y location of voltage display

	vbat_temp = GetVbat();
    279e:	0e 94 1b 3b 	call	0x7636	; 0x7636 <GetVbat>
    27a2:	6c 01       	movw	r12, r24
	temp = vbat_temp/100;	// Display whole decimal part first
    27a4:	64 e6       	ldi	r22, 0x64	; 100
    27a6:	70 e0       	ldi	r23, 0x00	; 0
    27a8:	0e 94 f3 3d 	call	0x7be6	; 0x7be6 <__udivmodhi4>
    27ac:	8b 01       	movw	r16, r22
    27ae:	4a e0       	ldi	r20, 0x0A	; 10
    27b0:	6c e4       	ldi	r22, 0x4C	; 76
    27b2:	75 e0       	ldi	r23, 0x05	; 5
    27b4:	c8 01       	movw	r24, r16
    27b6:	0e 94 d3 3e 	call	0x7da6	; 0x7da6 <__itoa_ncheck>
	mugui_text_sizestring(itoa(temp,pBuffer,10), (const unsigned char*)Verdana8, &size);
    27ba:	ae 01       	movw	r20, r28
    27bc:	4f 5f       	subi	r20, 0xFF	; 255
    27be:	5f 4f       	sbci	r21, 0xFF	; 255
    27c0:	65 e2       	ldi	r22, 0x25	; 37
    27c2:	7a e0       	ldi	r23, 0x0A	; 10
    27c4:	0e 94 74 33 	call	0x66e8	; 0x66e8 <mugui_text_sizestring>
    27c8:	4a e0       	ldi	r20, 0x0A	; 10
    27ca:	6c e4       	ldi	r22, 0x4C	; 76
    27cc:	75 e0       	ldi	r23, 0x05	; 5
    27ce:	c8 01       	movw	r24, r16
    27d0:	0e 94 d3 3e 	call	0x7da6	; 0x7da6 <__itoa_ncheck>
	mugui_lcd_puts(itoa(temp,pBuffer,10),(const unsigned char*)Verdana8,x_loc,y_loc);
    27d4:	26 e2       	ldi	r18, 0x26	; 38
    27d6:	30 e0       	ldi	r19, 0x00	; 0
    27d8:	4d e2       	ldi	r20, 0x2D	; 45
    27da:	50 e0       	ldi	r21, 0x00	; 0
    27dc:	65 e2       	ldi	r22, 0x25	; 37
    27de:	7a e0       	ldi	r23, 0x0A	; 10
    27e0:	0e 94 89 34 	call	0x6912	; 0x6912 <mugui_lcd_puts>
	pos1 = size.x;

	vbat_temp = vbat_temp - (temp * 100); // Now display the parts to the right of the decimal point
    27e4:	2c e9       	ldi	r18, 0x9C	; 156
    27e6:	20 03       	mulsu	r18, r16
    27e8:	70 01       	movw	r14, r0
    27ea:	21 9f       	mul	r18, r17
    27ec:	f0 0c       	add	r15, r0
    27ee:	11 24       	eor	r1, r1
    27f0:	ec 0c       	add	r14, r12
    27f2:	fd 1c       	adc	r15, r13

	LCD_Display_Text(7,(const unsigned char*)Verdana8,(x_loc + pos1),y_loc);
    27f4:	09 81       	ldd	r16, Y+1	; 0x01
    27f6:	11 27       	eor	r17, r17
    27f8:	07 fd       	sbrc	r16, 7
    27fa:	10 95       	com	r17
    27fc:	03 5d       	subi	r16, 0xD3	; 211
    27fe:	1f 4f       	sbci	r17, 0xFF	; 255
    2800:	26 e2       	ldi	r18, 0x26	; 38
    2802:	30 e0       	ldi	r19, 0x00	; 0
    2804:	a8 01       	movw	r20, r16
    2806:	65 e2       	ldi	r22, 0x25	; 37
    2808:	7a e0       	ldi	r23, 0x0A	; 10
    280a:	87 e0       	ldi	r24, 0x07	; 7
    280c:	0e 94 84 1c 	call	0x3908	; 0x3908 <LCD_Display_Text>
	mugui_text_sizestring(".", (const unsigned char*)Verdana8, &size);
    2810:	ae 01       	movw	r20, r28
    2812:	4f 5f       	subi	r20, 0xFF	; 255
    2814:	5f 4f       	sbci	r21, 0xFF	; 255
    2816:	65 e2       	ldi	r22, 0x25	; 37
    2818:	7a e0       	ldi	r23, 0x0A	; 10
    281a:	83 e0       	ldi	r24, 0x03	; 3
    281c:	95 e0       	ldi	r25, 0x05	; 5
    281e:	0e 94 74 33 	call	0x66e8	; 0x66e8 <mugui_text_sizestring>
	pos3 = size.x;
    2822:	c9 80       	ldd	r12, Y+1	; 0x01
	mugui_text_sizestring("0", (const unsigned char*)Verdana8, &size);
    2824:	ae 01       	movw	r20, r28
    2826:	4f 5f       	subi	r20, 0xFF	; 255
    2828:	5f 4f       	sbci	r21, 0xFF	; 255
    282a:	65 e2       	ldi	r22, 0x25	; 37
    282c:	7a e0       	ldi	r23, 0x0A	; 10
    282e:	85 e0       	ldi	r24, 0x05	; 5
    2830:	95 e0       	ldi	r25, 0x05	; 5
    2832:	0e 94 74 33 	call	0x66e8	; 0x66e8 <mugui_text_sizestring>
	pos2 = size.x;
    2836:	b9 80       	ldd	r11, Y+1	; 0x01
    2838:	dd 24       	eor	r13, r13
    283a:	c7 fc       	sbrc	r12, 7
    283c:	d0 94       	com	r13

	if (vbat_temp >= 10)
    283e:	8a e0       	ldi	r24, 0x0A	; 10
    2840:	e8 16       	cp	r14, r24
    2842:	f1 04       	cpc	r15, r1
    2844:	40 f0       	brcs	.+16     	; 0x2856 <Display_status+0x23e>
    2846:	4a e0       	ldi	r20, 0x0A	; 10
    2848:	6c e4       	ldi	r22, 0x4C	; 76
    284a:	75 e0       	ldi	r23, 0x05	; 5
    284c:	c7 01       	movw	r24, r14
    284e:	0e 94 d3 3e 	call	0x7da6	; 0x7da6 <__itoa_ncheck>
	{
		mugui_lcd_puts(itoa(vbat_temp,pBuffer,10),(const unsigned char*)Verdana8,(x_loc + pos1 + pos3),y_loc);
    2852:	a8 01       	movw	r20, r16
    2854:	15 c0       	rjmp	.+42     	; 0x2880 <Display_status+0x268>
	}
	else
	{
		LCD_Display_Text(8,(const unsigned char*)Verdana8,(x_loc + pos1 + pos3),y_loc);
    2856:	a8 01       	movw	r20, r16
    2858:	4c 0d       	add	r20, r12
    285a:	5d 1d       	adc	r21, r13
    285c:	26 e2       	ldi	r18, 0x26	; 38
    285e:	30 e0       	ldi	r19, 0x00	; 0
    2860:	65 e2       	ldi	r22, 0x25	; 37
    2862:	7a e0       	ldi	r23, 0x0A	; 10
    2864:	88 e0       	ldi	r24, 0x08	; 8
    2866:	0e 94 84 1c 	call	0x3908	; 0x3908 <LCD_Display_Text>
    286a:	4a e0       	ldi	r20, 0x0A	; 10
    286c:	6c e4       	ldi	r22, 0x4C	; 76
    286e:	75 e0       	ldi	r23, 0x05	; 5
    2870:	c7 01       	movw	r24, r14
    2872:	0e 94 d3 3e 	call	0x7da6	; 0x7da6 <__itoa_ncheck>
		mugui_lcd_puts(itoa(vbat_temp,pBuffer,10),(const unsigned char*)Verdana8,(x_loc + pos1 + pos2 + pos3),y_loc);
    2876:	a8 01       	movw	r20, r16
    2878:	4b 0d       	add	r20, r11
    287a:	51 1d       	adc	r21, r1
    287c:	b7 fc       	sbrc	r11, 7
    287e:	5a 95       	dec	r21
    2880:	4c 0d       	add	r20, r12
    2882:	5d 1d       	adc	r21, r13
    2884:	26 e2       	ldi	r18, 0x26	; 38
    2886:	30 e0       	ldi	r19, 0x00	; 0
    2888:	65 e2       	ldi	r22, 0x25	; 37
    288a:	7a e0       	ldi	r23, 0x0A	; 10
    288c:	0e 94 89 34 	call	0x6912	; 0x6912 <mugui_lcd_puts>
	}

	// Display error messages
	if (General_error != 0)
    2890:	80 91 0e 05 	lds	r24, 0x050E
    2894:	88 23       	and	r24, r24
    2896:	09 f4       	brne	.+2      	; 0x289a <Display_status+0x282>
    2898:	58 c0       	rjmp	.+176    	; 0x294a <Display_status+0x332>
	{
		// Create message box
		fillrect(buffer, 14,8, 96, 48, 0);	// White box
    289a:	e1 2c       	mov	r14, r1
    289c:	00 e3       	ldi	r16, 0x30	; 48
    289e:	20 e6       	ldi	r18, 0x60	; 96
    28a0:	48 e0       	ldi	r20, 0x08	; 8
    28a2:	6e e0       	ldi	r22, 0x0E	; 14
    28a4:	80 e0       	ldi	r24, 0x00	; 0
    28a6:	91 e0       	ldi	r25, 0x01	; 1
    28a8:	0e 94 99 1b 	call	0x3732	; 0x3732 <fillrect>
		drawrect(buffer, 14,8, 96, 48, 1); 	// Outline
    28ac:	ee 24       	eor	r14, r14
    28ae:	e3 94       	inc	r14
    28b0:	20 e6       	ldi	r18, 0x60	; 96
    28b2:	48 e0       	ldi	r20, 0x08	; 8
    28b4:	6e e0       	ldi	r22, 0x0E	; 14
    28b6:	80 e0       	ldi	r24, 0x00	; 0
    28b8:	91 e0       	ldi	r25, 0x01	; 1
    28ba:	0e 94 c3 1b 	call	0x3786	; 0x3786 <drawrect>

		// Prioritise error from top to bottom
		if((General_error & (1 << LVA_ALARM)) != 0)
    28be:	80 91 0e 05 	lds	r24, 0x050E
    28c2:	85 ff       	sbrs	r24, 5
    28c4:	11 c0       	rjmp	.+34     	; 0x28e8 <Display_status+0x2d0>
		{
			LCD_Display_Text(134,(const unsigned char*)Verdana14,33,14); // Battery
    28c6:	2e e0       	ldi	r18, 0x0E	; 14
    28c8:	30 e0       	ldi	r19, 0x00	; 0
    28ca:	41 e2       	ldi	r20, 0x21	; 33
    28cc:	50 e0       	ldi	r21, 0x00	; 0
    28ce:	67 e7       	ldi	r22, 0x77	; 119
    28d0:	71 e0       	ldi	r23, 0x01	; 1
    28d2:	86 e8       	ldi	r24, 0x86	; 134
    28d4:	0e 94 84 1c 	call	0x3908	; 0x3908 <LCD_Display_Text>
			LCD_Display_Text(73,(const unsigned char*)Verdana14,46,34); 	// Low
    28d8:	22 e2       	ldi	r18, 0x22	; 34
    28da:	30 e0       	ldi	r19, 0x00	; 0
    28dc:	4e e2       	ldi	r20, 0x2E	; 46
    28de:	50 e0       	ldi	r21, 0x00	; 0
    28e0:	67 e7       	ldi	r22, 0x77	; 119
    28e2:	71 e0       	ldi	r23, 0x01	; 1
    28e4:	89 e4       	ldi	r24, 0x49	; 73
    28e6:	2f c0       	rjmp	.+94     	; 0x2946 <Display_status+0x32e>
		}
		else if((General_error & (1 << NO_SIGNAL)) != 0)
    28e8:	82 ff       	sbrs	r24, 2
    28ea:	11 c0       	rjmp	.+34     	; 0x290e <Display_status+0x2f6>
		{
			LCD_Display_Text(75,(const unsigned char*)Verdana14,51,13); 	// No
    28ec:	2d e0       	ldi	r18, 0x0D	; 13
    28ee:	30 e0       	ldi	r19, 0x00	; 0
    28f0:	43 e3       	ldi	r20, 0x33	; 51
    28f2:	50 e0       	ldi	r21, 0x00	; 0
    28f4:	67 e7       	ldi	r22, 0x77	; 119
    28f6:	71 e0       	ldi	r23, 0x01	; 1
    28f8:	8b e4       	ldi	r24, 0x4B	; 75
    28fa:	0e 94 84 1c 	call	0x3908	; 0x3908 <LCD_Display_Text>
			LCD_Display_Text(76,(const unsigned char*)Verdana14,39,33);  // Signal
    28fe:	21 e2       	ldi	r18, 0x21	; 33
    2900:	30 e0       	ldi	r19, 0x00	; 0
    2902:	47 e2       	ldi	r20, 0x27	; 39
    2904:	50 e0       	ldi	r21, 0x00	; 0
    2906:	67 e7       	ldi	r22, 0x77	; 119
    2908:	71 e0       	ldi	r23, 0x01	; 1
    290a:	8c e4       	ldi	r24, 0x4C	; 76
    290c:	1c c0       	rjmp	.+56     	; 0x2946 <Display_status+0x32e>
		}
		else if((General_error & (1 << THROTTLE_HIGH)) != 0)
    290e:	81 ff       	sbrs	r24, 1
    2910:	11 c0       	rjmp	.+34     	; 0x2934 <Display_status+0x31c>
		{
			LCD_Display_Text(105,(const unsigned char*)Verdana14,28,14); // Throttle
    2912:	2e e0       	ldi	r18, 0x0E	; 14
    2914:	30 e0       	ldi	r19, 0x00	; 0
    2916:	4c e1       	ldi	r20, 0x1C	; 28
    2918:	50 e0       	ldi	r21, 0x00	; 0
    291a:	67 e7       	ldi	r22, 0x77	; 119
    291c:	71 e0       	ldi	r23, 0x01	; 1
    291e:	89 e6       	ldi	r24, 0x69	; 105
    2920:	0e 94 84 1c 	call	0x3908	; 0x3908 <LCD_Display_Text>
			LCD_Display_Text(55,(const unsigned char*)Verdana14,46,34);	// High
    2924:	22 e2       	ldi	r18, 0x22	; 34
    2926:	30 e0       	ldi	r19, 0x00	; 0
    2928:	4e e2       	ldi	r20, 0x2E	; 46
    292a:	50 e0       	ldi	r21, 0x00	; 0
    292c:	67 e7       	ldi	r22, 0x77	; 119
    292e:	71 e0       	ldi	r23, 0x01	; 1
    2930:	87 e3       	ldi	r24, 0x37	; 55
    2932:	09 c0       	rjmp	.+18     	; 0x2946 <Display_status+0x32e>
		}
		else if((General_error & (1 << DISARMED)) != 0)
    2934:	84 ff       	sbrs	r24, 4
    2936:	09 c0       	rjmp	.+18     	; 0x294a <Display_status+0x332>
		{
			LCD_Display_Text(18,(const unsigned char*)Verdana14,25,24); 	// Disarmed
    2938:	28 e1       	ldi	r18, 0x18	; 24
    293a:	30 e0       	ldi	r19, 0x00	; 0
    293c:	49 e1       	ldi	r20, 0x19	; 25
    293e:	50 e0       	ldi	r21, 0x00	; 0
    2940:	67 e7       	ldi	r22, 0x77	; 119
    2942:	71 e0       	ldi	r23, 0x01	; 1
    2944:	82 e1       	ldi	r24, 0x12	; 18
    2946:	0e 94 84 1c 	call	0x3908	; 0x3908 <LCD_Display_Text>
		}
	}

	// Write buffer to complete
	write_buffer(buffer,1);
    294a:	61 e0       	ldi	r22, 0x01	; 1
    294c:	80 e0       	ldi	r24, 0x00	; 0
    294e:	91 e0       	ldi	r25, 0x01	; 1
    2950:	0e 94 a1 1a 	call	0x3542	; 0x3542 <write_buffer>
	clear_buffer(buffer);
    2954:	80 e0       	ldi	r24, 0x00	; 0
    2956:	91 e0       	ldi	r25, 0x01	; 1
    2958:	0e 94 db 1a 	call	0x35b6	; 0x35b6 <clear_buffer>
}
    295c:	24 96       	adiw	r28, 0x04	; 4
    295e:	e9 e0       	ldi	r30, 0x09	; 9
    2960:	0c 94 b8 3e 	jmp	0x7d70	; 0x7d70 <__epilogue_restores__+0x12>

00002964 <Display_sticks>:
//************************************************************
// Code
//************************************************************

void Display_sticks(void)
{
    2964:	a0 e0       	ldi	r26, 0x00	; 0
    2966:	b0 e0       	ldi	r27, 0x00	; 0
    2968:	e8 eb       	ldi	r30, 0xB8	; 184
    296a:	f4 e1       	ldi	r31, 0x14	; 20
    296c:	0c 94 9c 3e 	jmp	0x7d38	; 0x7d38 <__prologue_saves__+0x12>
	int8_t	offset;
	int8_t	temp_aileron, temp_elevator, temp_rudder;
	bool	CalibrateDone = false;

	// Save original settings in case user aborts
	temp_aileron = Config.AileronPol;
    2970:	f0 90 ab 05 	lds	r15, 0x05AB
	temp_elevator = Config.ElevatorPol;
    2974:	10 91 ac 05 	lds	r17, 0x05AC
	temp_rudder = Config.RudderPol;
    2978:	b0 90 ad 05 	lds	r11, 0x05AD

	// Reset to defaults - not ideal, but it works
	Config.AileronPol = NORMAL;
    297c:	10 92 ab 05 	sts	0x05AB, r1
	Config.ElevatorPol =  NORMAL;
    2980:	10 92 ac 05 	sts	0x05AC, r1
	Config.RudderPol = NORMAL;
    2984:	10 92 ad 05 	sts	0x05AD, r1
void Display_sticks(void)
{
	int8_t	i;
	int8_t	offset;
	int8_t	temp_aileron, temp_elevator, temp_rudder;
	bool	CalibrateDone = false;
    2988:	c0 e0       	ldi	r28, 0x00	; 0
	Config.AileronPol = NORMAL;
	Config.ElevatorPol =  NORMAL;
	Config.RudderPol = NORMAL;

	// Until exit button pressed
	while((BUTTON1 != 0) && (!CalibrateDone))
    298a:	1f 9b       	sbis	0x03, 7	; 3
    298c:	a4 c0       	rjmp	.+328    	; 0x2ad6 <Display_sticks+0x172>
    298e:	c1 11       	cpse	r28, r1
    2990:	a4 c0       	rjmp	.+328    	; 0x2ada <Display_sticks+0x176>
	{
		offset = 0;

		// Clear screen buffer
		clear_buffer(buffer);
    2992:	80 e0       	ldi	r24, 0x00	; 0
    2994:	91 e0       	ldi	r25, 0x01	; 1
    2996:	0e 94 db 1a 	call	0x35b6	; 0x35b6 <clear_buffer>
    299a:	92 e0       	ldi	r25, 0x02	; 2
    299c:	d9 2e       	mov	r13, r25
	Config.RudderPol = NORMAL;

	// Until exit button pressed
	while((BUTTON1 != 0) && (!CalibrateDone))
	{
		offset = 0;
    299e:	d0 e0       	ldi	r29, 0x00	; 0
		clear_buffer(buffer);

		// Draw graphic
		for (i = 0; i < 2; i++)
		{
			drawrect(buffer, 17 + offset, 0, 40, 40, 1);			// Box
    29a0:	61 e1       	ldi	r22, 0x11	; 17
    29a2:	6d 0f       	add	r22, r29
    29a4:	ee 24       	eor	r14, r14
    29a6:	e3 94       	inc	r14
    29a8:	08 e2       	ldi	r16, 0x28	; 40
    29aa:	28 e2       	ldi	r18, 0x28	; 40
    29ac:	40 e0       	ldi	r20, 0x00	; 0
    29ae:	80 e0       	ldi	r24, 0x00	; 0
    29b0:	91 e0       	ldi	r25, 0x01	; 1
    29b2:	0e 94 c3 1b 	call	0x3786	; 0x3786 <drawrect>
			drawline(buffer, 38 + offset,20, 48 + offset,  3, 1); 	// Line 1
    29b6:	86 e2       	ldi	r24, 0x26	; 38
    29b8:	c8 2e       	mov	r12, r24
    29ba:	cd 0e       	add	r12, r29
    29bc:	20 e3       	ldi	r18, 0x30	; 48
    29be:	2d 0f       	add	r18, r29
    29c0:	03 e0       	ldi	r16, 0x03	; 3
    29c2:	44 e1       	ldi	r20, 0x14	; 20
    29c4:	6c 2d       	mov	r22, r12
    29c6:	80 e0       	ldi	r24, 0x00	; 0
    29c8:	91 e0       	ldi	r25, 0x01	; 1
    29ca:	0e 94 3b 1b 	call	0x3676	; 0x3676 <drawline>
			drawline(buffer, 41 + offset,21, 56 + offset,  6, 1); 	// Line 2
    29ce:	28 e3       	ldi	r18, 0x38	; 56
    29d0:	2d 0f       	add	r18, r29
    29d2:	69 e2       	ldi	r22, 0x29	; 41
    29d4:	6d 0f       	add	r22, r29
    29d6:	06 e0       	ldi	r16, 0x06	; 6
    29d8:	45 e1       	ldi	r20, 0x15	; 21
    29da:	80 e0       	ldi	r24, 0x00	; 0
    29dc:	91 e0       	ldi	r25, 0x01	; 1
    29de:	0e 94 3b 1b 	call	0x3676	; 0x3676 <drawline>
			fillcircle(buffer, 38 + offset, 21, 2, 1);				// Centre
    29e2:	01 e0       	ldi	r16, 0x01	; 1
    29e4:	22 e0       	ldi	r18, 0x02	; 2
    29e6:	45 e1       	ldi	r20, 0x15	; 21
    29e8:	6c 2d       	mov	r22, r12
    29ea:	80 e0       	ldi	r24, 0x00	; 0
    29ec:	91 e0       	ldi	r25, 0x01	; 1
    29ee:	0e 94 09 1c 	call	0x3812	; 0x3812 <fillcircle>
			fillcircle(buffer, 51 + offset, 5, 4, 1);				// End
    29f2:	63 e3       	ldi	r22, 0x33	; 51
    29f4:	6d 0f       	add	r22, r29
    29f6:	24 e0       	ldi	r18, 0x04	; 4
    29f8:	45 e0       	ldi	r20, 0x05	; 5
    29fa:	80 e0       	ldi	r24, 0x00	; 0
    29fc:	91 e0       	ldi	r25, 0x01	; 1
    29fe:	0e 94 09 1c 	call	0x3812	; 0x3812 <fillcircle>
    2a02:	da 94       	dec	r13

		// Clear screen buffer
		clear_buffer(buffer);

		// Draw graphic
		for (i = 0; i < 2; i++)
    2a04:	11 f0       	breq	.+4      	; 0x2a0a <Display_sticks+0xa6>
			drawline(buffer, 38 + offset,20, 48 + offset,  3, 1); 	// Line 1
			drawline(buffer, 41 + offset,21, 56 + offset,  6, 1); 	// Line 2
			fillcircle(buffer, 38 + offset, 21, 2, 1);				// Centre
			fillcircle(buffer, 51 + offset, 5, 4, 1);				// End

			offset = 52;
    2a06:	d4 e3       	ldi	r29, 0x34	; 52
    2a08:	cb cf       	rjmp	.-106    	; 0x29a0 <Display_sticks+0x3c>
		}

		// Print bottom text and markers
		LCD_Display_Text(12, (const unsigned char*)Wingdings, 0, 57); 		// Left
    2a0a:	29 e3       	ldi	r18, 0x39	; 57
    2a0c:	30 e0       	ldi	r19, 0x00	; 0
    2a0e:	40 e0       	ldi	r20, 0x00	; 0
    2a10:	50 e0       	ldi	r21, 0x00	; 0
    2a12:	6d e0       	ldi	r22, 0x0D	; 13
    2a14:	71 e0       	ldi	r23, 0x01	; 1
    2a16:	8c e0       	ldi	r24, 0x0C	; 12
    2a18:	0e 94 84 1c 	call	0x3908	; 0x3908 <LCD_Display_Text>

		// If uncalibrated
		if (!CalibrateDone)
		{
			RxGetChannels();
    2a1c:	0e 94 8f 38 	call	0x711e	; 0x711e <RxGetChannels>

			// Display "No RX signal" if no input detected
			if(RxChannel[AILERON] == 0)
    2a20:	80 91 41 07 	lds	r24, 0x0741
    2a24:	90 91 42 07 	lds	r25, 0x0742
    2a28:	89 2b       	or	r24, r25
    2a2a:	41 f4       	brne	.+16     	; 0x2a3c <Display_sticks+0xd8>
			{
				LCD_Display_Text(135,(const unsigned char*)Verdana14,14,43); 	// "No RX signal"
    2a2c:	2b e2       	ldi	r18, 0x2B	; 43
    2a2e:	30 e0       	ldi	r19, 0x00	; 0
    2a30:	4e e0       	ldi	r20, 0x0E	; 14
    2a32:	50 e0       	ldi	r21, 0x00	; 0
    2a34:	67 e7       	ldi	r22, 0x77	; 119
    2a36:	71 e0       	ldi	r23, 0x01	; 1
    2a38:	87 e8       	ldi	r24, 0x87	; 135
    2a3a:	15 c0       	rjmp	.+42     	; 0x2a66 <Display_sticks+0x102>
			}

			// Sticks have not moved far enough
			else if ((RxChannel[AILERON] > 3000) && (RxChannel[AILERON] < 4500))
    2a3c:	80 91 41 07 	lds	r24, 0x0741
    2a40:	90 91 42 07 	lds	r25, 0x0742
    2a44:	89 3b       	cpi	r24, 0xB9	; 185
    2a46:	9b 40       	sbci	r25, 0x0B	; 11
    2a48:	88 f0       	brcs	.+34     	; 0x2a6c <Display_sticks+0x108>
    2a4a:	80 91 41 07 	lds	r24, 0x0741
    2a4e:	90 91 42 07 	lds	r25, 0x0742
    2a52:	84 39       	cpi	r24, 0x94	; 148
    2a54:	91 41       	sbci	r25, 0x11	; 17
    2a56:	50 f4       	brcc	.+20     	; 0x2a6c <Display_sticks+0x108>
			{
				LCD_Display_Text(136,(const unsigned char*)Verdana14,9,43); 		// "Hold as shown"
    2a58:	2b e2       	ldi	r18, 0x2B	; 43
    2a5a:	30 e0       	ldi	r19, 0x00	; 0
    2a5c:	49 e0       	ldi	r20, 0x09	; 9
    2a5e:	50 e0       	ldi	r21, 0x00	; 0
    2a60:	67 e7       	ldi	r22, 0x77	; 119
    2a62:	71 e0       	ldi	r23, 0x01	; 1
    2a64:	88 e8       	ldi	r24, 0x88	; 136
    2a66:	0e 94 84 1c 	call	0x3908	; 0x3908 <LCD_Display_Text>
    2a6a:	26 c0       	rjmp	.+76     	; 0x2ab8 <Display_sticks+0x154>

			// Sticks should now be in the right position
			// Reverse wrong input channels
			else
			{
				if (RCinputs[AILERON] < 0)
    2a6c:	40 91 a1 07 	lds	r20, 0x07A1
    2a70:	50 91 a2 07 	lds	r21, 0x07A2
    2a74:	57 ff       	sbrs	r21, 7
    2a76:	03 c0       	rjmp	.+6      	; 0x2a7e <Display_sticks+0x11a>
				{
					Config.AileronPol = REVERSED;
    2a78:	81 e0       	ldi	r24, 0x01	; 1
    2a7a:	80 93 ab 05 	sts	0x05AB, r24
				}

				if (RCinputs[ELEVATOR] < 0)
    2a7e:	20 91 a3 07 	lds	r18, 0x07A3
    2a82:	30 91 a4 07 	lds	r19, 0x07A4
    2a86:	37 ff       	sbrs	r19, 7
    2a88:	03 c0       	rjmp	.+6      	; 0x2a90 <Display_sticks+0x12c>
				{
					Config.ElevatorPol = REVERSED;
    2a8a:	81 e0       	ldi	r24, 0x01	; 1
    2a8c:	80 93 ac 05 	sts	0x05AC, r24
				}

				if (RCinputs[RUDDER] < 0)
    2a90:	80 91 a5 07 	lds	r24, 0x07A5
    2a94:	90 91 a6 07 	lds	r25, 0x07A6
    2a98:	97 ff       	sbrs	r25, 7
    2a9a:	03 c0       	rjmp	.+6      	; 0x2aa2 <Display_sticks+0x13e>
				{
					Config.RudderPol = REVERSED;
    2a9c:	61 e0       	ldi	r22, 0x01	; 1
    2a9e:	60 93 ad 05 	sts	0x05AD, r22
				}

				// If all positive - done!
				if ((RCinputs[AILERON] > 0) && (RCinputs[ELEVATOR] > 0) && (RCinputs[RUDDER] > 0))
    2aa2:	14 16       	cp	r1, r20
    2aa4:	15 06       	cpc	r1, r21
    2aa6:	44 f4       	brge	.+16     	; 0x2ab8 <Display_sticks+0x154>
    2aa8:	12 16       	cp	r1, r18
    2aaa:	13 06       	cpc	r1, r19
    2aac:	2c f4       	brge	.+10     	; 0x2ab8 <Display_sticks+0x154>
    2aae:	c1 e0       	ldi	r28, 0x01	; 1
    2ab0:	18 16       	cp	r1, r24
    2ab2:	19 06       	cpc	r1, r25
    2ab4:	0c f0       	brlt	.+2      	; 0x2ab8 <Display_sticks+0x154>
    2ab6:	c0 e0       	ldi	r28, 0x00	; 0
				}
			}
		}

		// Update buffer
		write_buffer(buffer,1);
    2ab8:	61 e0       	ldi	r22, 0x01	; 1
    2aba:	80 e0       	ldi	r24, 0x00	; 0
    2abc:	91 e0       	ldi	r25, 0x01	; 1
    2abe:	0e 94 a1 1a 	call	0x3542	; 0x3542 <write_buffer>
    2ac2:	8f e7       	ldi	r24, 0x7F	; 127
    2ac4:	9a e1       	ldi	r25, 0x1A	; 26
    2ac6:	26 e0       	ldi	r18, 0x06	; 6
    2ac8:	81 50       	subi	r24, 0x01	; 1
    2aca:	90 40       	sbci	r25, 0x00	; 0
    2acc:	20 40       	sbci	r18, 0x00	; 0
    2ace:	e1 f7       	brne	.-8      	; 0x2ac8 <Display_sticks+0x164>
    2ad0:	00 c0       	rjmp	.+0      	; 0x2ad2 <Display_sticks+0x16e>
    2ad2:	00 00       	nop
    2ad4:	5a cf       	rjmp	.-332    	; 0x298a <Display_sticks+0x26>
		_delay_ms(100);
	}

	// Save value and return
	if (CalibrateDone)
    2ad6:	cc 23       	and	r28, r28
    2ad8:	a9 f0       	breq	.+42     	; 0x2b04 <Display_sticks+0x1a0>
	{
		LCD_Display_Text(137,(const unsigned char*)Verdana14,40,43); 	// "Done!"
    2ada:	2b e2       	ldi	r18, 0x2B	; 43
    2adc:	30 e0       	ldi	r19, 0x00	; 0
    2ade:	48 e2       	ldi	r20, 0x28	; 40
    2ae0:	50 e0       	ldi	r21, 0x00	; 0
    2ae2:	67 e7       	ldi	r22, 0x77	; 119
    2ae4:	71 e0       	ldi	r23, 0x01	; 1
    2ae6:	89 e8       	ldi	r24, 0x89	; 137
    2ae8:	0e 94 84 1c 	call	0x3908	; 0x3908 <LCD_Display_Text>
		// Update buffer
		write_buffer(buffer,1);
    2aec:	61 e0       	ldi	r22, 0x01	; 1
    2aee:	80 e0       	ldi	r24, 0x00	; 0
    2af0:	91 e0       	ldi	r25, 0x01	; 1
    2af2:	0e 94 a1 1a 	call	0x3542	; 0x3542 <write_buffer>
		clear_buffer(buffer);
    2af6:	80 e0       	ldi	r24, 0x00	; 0
    2af8:	91 e0       	ldi	r25, 0x01	; 1
    2afa:	0e 94 db 1a 	call	0x35b6	; 0x35b6 <clear_buffer>
		Save_Config_to_EEPROM();
    2afe:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <Save_Config_to_EEPROM>
    2b02:	06 c0       	rjmp	.+12     	; 0x2b10 <Display_sticks+0x1ac>
 	}
	else
	{
		// Restore old settings if failed
		Config.AileronPol = temp_aileron;
    2b04:	f0 92 ab 05 	sts	0x05AB, r15
		Config.ElevatorPol = temp_elevator;
    2b08:	10 93 ac 05 	sts	0x05AC, r17
		Config.RudderPol = temp_rudder;
    2b0c:	b0 92 ad 05 	sts	0x05AD, r11
	}
}
    2b10:	cd b7       	in	r28, 0x3d	; 61
    2b12:	de b7       	in	r29, 0x3e	; 62
    2b14:	e9 e0       	ldi	r30, 0x09	; 9
    2b16:	0c 94 b8 3e 	jmp	0x7d70	; 0x7d70 <__epilogue_restores__+0x12>

00002b1a <Set_EEPROM_Default_Config>:

const uint8_t	JR[MAX_RC_CHANNELS] PROGMEM 	= {0,1,2,3,4,5,6,7}; 	// JR/Spektrum channel sequence (TAERG123)
const uint8_t	FUTABA[MAX_RC_CHANNELS] PROGMEM = {1,2,0,3,4,5,6,7}; 	// Futaba channel sequence (AETRGF12)

void Set_EEPROM_Default_Config(void)
{
    2b1a:	0f 93       	push	r16
    2b1c:	1f 93       	push	r17
    2b1e:	cf 93       	push	r28
    2b20:	df 93       	push	r29
	uint8_t i;
	
	// Clear entire Config space first
	memset(&Config.setup,0,(sizeof(Config)));
    2b22:	8f eb       	ldi	r24, 0xBF	; 191
    2b24:	91 e0       	ldi	r25, 0x01	; 1
    2b26:	ee e7       	ldi	r30, 0x7E	; 126
    2b28:	f5 e0       	ldi	r31, 0x05	; 5
    2b2a:	df 01       	movw	r26, r30
    2b2c:	9c 01       	movw	r18, r24
    2b2e:	1d 92       	st	X+, r1
    2b30:	21 50       	subi	r18, 0x01	; 1
    2b32:	30 40       	sbci	r19, 0x00	; 0
    2b34:	e1 f7       	brne	.-8      	; 0x2b2e <Set_EEPROM_Default_Config+0x14>

	// Set magic number / setup byte
	Config.setup = MAGIC_NUMBER;
    2b36:	8e e2       	ldi	r24, 0x2E	; 46
    2b38:	80 93 7e 05 	sts	0x057E, r24
    2b3c:	ec ef       	ldi	r30, 0xFC	; 252
    2b3e:	f0 e0       	ldi	r31, 0x00	; 0
    2b40:	cf e7       	ldi	r28, 0x7F	; 127
    2b42:	d5 e0       	ldi	r29, 0x05	; 5
    2b44:	af e0       	ldi	r26, 0x0F	; 15
    2b46:	b7 e0       	ldi	r27, 0x07	; 7

	// Servo defaults
	for (i = 0; i < MAX_RC_CHANNELS; i++)
	{
		Config.ChannelOrder[i] = pgm_read_byte(&JR[i]);
		Config.RxChannelZeroOffset[i] = 3750;
    2b48:	86 ea       	ldi	r24, 0xA6	; 166
    2b4a:	9e e0       	ldi	r25, 0x0E	; 14
	Config.setup = MAGIC_NUMBER;

	// Servo defaults
	for (i = 0; i < MAX_RC_CHANNELS; i++)
	{
		Config.ChannelOrder[i] = pgm_read_byte(&JR[i]);
    2b4c:	24 91       	lpm	r18, Z
    2b4e:	29 93       	st	Y+, r18
		Config.RxChannelZeroOffset[i] = 3750;
    2b50:	8d 93       	st	X+, r24
    2b52:	9d 93       	st	X+, r25
    2b54:	31 96       	adiw	r30, 0x01	; 1

	// Set magic number / setup byte
	Config.setup = MAGIC_NUMBER;

	// Servo defaults
	for (i = 0; i < MAX_RC_CHANNELS; i++)
    2b56:	31 e0       	ldi	r19, 0x01	; 1
    2b58:	e4 30       	cpi	r30, 0x04	; 4
    2b5a:	f3 07       	cpc	r31, r19
    2b5c:	b9 f7       	brne	.-18     	; 0x2b4c <Set_EEPROM_Default_Config+0x32>
	{
		Config.ChannelOrder[i] = pgm_read_byte(&JR[i]);
		Config.RxChannelZeroOffset[i] = 3750;
	}
	// Monopolar throttle is a special case. Set to -100% or -1000
	Config.RxChannelZeroOffset[THROTTLE] = 2750;
    2b5e:	8e eb       	ldi	r24, 0xBE	; 190
    2b60:	9a e0       	ldi	r25, 0x0A	; 10
    2b62:	90 93 10 07 	sts	0x0710, r25
    2b66:	80 93 0f 07 	sts	0x070F, r24
    2b6a:	ea e2       	ldi	r30, 0x2A	; 42
    2b6c:	f6 e0       	ldi	r31, 0x06	; 6
    2b6e:	cf ef       	ldi	r28, 0xFF	; 255
    2b70:	d6 e0       	ldi	r29, 0x06	; 6
    2b72:	07 e0       	ldi	r16, 0x07	; 7
    2b74:	17 e0       	ldi	r17, 0x07	; 7

	// Preset mixers to safe values
	for (i = 0; i < MAX_OUTPUTS; i++)
	{
		Config.Channel[i].P1n_position	= 50;
    2b76:	62 e3       	ldi	r22, 0x32	; 50
		Config.Channel[i].P1_source_a 	= NOMIX;
    2b78:	3d e0       	ldi	r19, 0x0D	; 13
		Config.Channel[i].P1_source_b 	= NOMIX;
		Config.Channel[i].P2_source_a 	= NOMIX;
		Config.Channel[i].P2_source_b 	= NOMIX;
		Config.min_travel[i] = -100;
    2b7a:	5c e9       	ldi	r21, 0x9C	; 156
		Config.max_travel[i] = 100;
    2b7c:	44 e6       	ldi	r20, 0x64	; 100
    2b7e:	cf 01       	movw	r24, r30
    2b80:	46 97       	sbiw	r24, 0x16	; 22
	Config.RxChannelZeroOffset[THROTTLE] = 2750;

	// Preset mixers to safe values
	for (i = 0; i < MAX_OUTPUTS; i++)
	{
		Config.Channel[i].P1n_position	= 50;
    2b82:	22 e3       	ldi	r18, 0x32	; 50
    2b84:	dc 01       	movw	r26, r24
    2b86:	6c 93       	st	X, r22
    2b88:	40 96       	adiw	r24, 0x10	; 16
		Config.Channel[i].P1_source_a 	= NOMIX;
    2b8a:	dc 01       	movw	r26, r24
    2b8c:	3c 93       	st	X, r19
    2b8e:	04 96       	adiw	r24, 0x04	; 4
		Config.Channel[i].P1_source_b 	= NOMIX;
    2b90:	dc 01       	movw	r26, r24
    2b92:	3c 93       	st	X, r19
    2b94:	02 97       	sbiw	r24, 0x02	; 2
		Config.Channel[i].P2_source_a 	= NOMIX;
    2b96:	dc 01       	movw	r26, r24
    2b98:	3c 93       	st	X, r19
		Config.Channel[i].P2_source_b 	= NOMIX;
    2b9a:	30 83       	st	Z, r19
		Config.min_travel[i] = -100;
    2b9c:	59 93       	st	Y+, r21
		Config.max_travel[i] = 100;
    2b9e:	84 e6       	ldi	r24, 0x64	; 100
    2ba0:	d8 01       	movw	r26, r16
    2ba2:	4d 93       	st	X+, r20
    2ba4:	8d 01       	movw	r16, r26
    2ba6:	7d 96       	adiw	r30, 0x1d	; 29
	}
	// Monopolar throttle is a special case. Set to -100% or -1000
	Config.RxChannelZeroOffset[THROTTLE] = 2750;

	// Preset mixers to safe values
	for (i = 0; i < MAX_OUTPUTS; i++)
    2ba8:	b7 e0       	ldi	r27, 0x07	; 7
    2baa:	e2 31       	cpi	r30, 0x12	; 18
    2bac:	fb 07       	cpc	r31, r27
    2bae:	39 f7       	brne	.-50     	; 0x2b7e <Set_EEPROM_Default_Config+0x64>
		Config.min_travel[i] = -100;
		Config.max_travel[i] = 100;
	}

	// Preset simple mixing for primary channels
	Config.Channel[OUT1].P1_throttle_volume = 100;
    2bb0:	80 93 17 06 	sts	0x0617, r24
	Config.Channel[OUT2].P1_aileron_volume = 100;
    2bb4:	80 93 37 06 	sts	0x0637, r24
	Config.Channel[OUT3].P1_elevator_volume = 100;
    2bb8:	80 93 56 06 	sts	0x0656, r24
	Config.Channel[OUT4].P1_rudder_volume = 100;
    2bbc:	80 93 75 06 	sts	0x0675, r24
#ifdef KK21
	Config.Channel[OUT1].P2_throttle_volume = 100;
    2bc0:	80 93 18 06 	sts	0x0618, r24
	Config.Channel[OUT2].P2_aileron_volume = 100;
    2bc4:	80 93 38 06 	sts	0x0638, r24
	Config.Channel[OUT3].P2_elevator_volume = 100;
    2bc8:	80 93 57 06 	sts	0x0657, r24
	Config.Channel[OUT4].P2_rudder_volume = 100;
    2bcc:	80 93 76 06 	sts	0x0676, r24

	// Preset basic axis gyros in P2
	Config.Channel[OUT2].P2_sensors |= (1 << RollGyro);
    2bd0:	80 91 3e 06 	lds	r24, 0x063E
    2bd4:	81 60       	ori	r24, 0x01	; 1
    2bd6:	80 93 3e 06 	sts	0x063E, r24
	Config.Channel[OUT3].P2_sensors |= (1 << PitchGyro);
    2bda:	80 91 5b 06 	lds	r24, 0x065B
    2bde:	82 60       	ori	r24, 0x02	; 2
    2be0:	80 93 5b 06 	sts	0x065B, r24
	Config.Channel[OUT4].P2_sensors |= (1 << YawGyro);
    2be4:	80 91 78 06 	lds	r24, 0x0678
    2be8:	84 60       	ori	r24, 0x04	; 4
    2bea:	80 93 78 06 	sts	0x0678, r24
#endif

	// Misc settings
	Config.RxMode = PWM;				// Default to PWM
    2bee:	81 e0       	ldi	r24, 0x01	; 1
    2bf0:	80 93 a7 05 	sts	0x05A7, r24
	Config.PWM_Sync = GEAR;
    2bf4:	34 e0       	ldi	r19, 0x04	; 4
    2bf6:	30 93 a8 05 	sts	0x05A8, r19
#endif

	// Set up all profiles the same initially
	for (i = 0; i < FLIGHT_MODES; i++)
	{
		Config.FlightMode[i].Roll_P_mult = 80;			// PID defaults		
    2bfa:	80 e5       	ldi	r24, 0x50	; 80
    2bfc:	80 93 b1 05 	sts	0x05B1, r24
		Config.FlightMode[i].Roll_I_mult = 50;	
    2c00:	20 93 b2 05 	sts	0x05B2, r18
		Config.FlightMode[i].Pitch_P_mult = 80;
    2c04:	80 93 b7 05 	sts	0x05B7, r24
		Config.FlightMode[i].Pitch_I_mult = 50;
    2c08:	20 93 b8 05 	sts	0x05B8, r18
		Config.FlightMode[i].Yaw_P_mult = 80;
    2c0c:	80 93 bd 05 	sts	0x05BD, r24
		Config.FlightMode[i].Yaw_I_mult = 50;
    2c10:	20 93 be 05 	sts	0x05BE, r18
		Config.FlightMode[i].A_Roll_P_mult = 60;
    2c14:	9c e3       	ldi	r25, 0x3C	; 60
    2c16:	90 93 b5 05 	sts	0x05B5, r25
		Config.FlightMode[i].A_Pitch_P_mult = 60;
    2c1a:	90 93 bb 05 	sts	0x05BB, r25
#endif

	// Set up all profiles the same initially
	for (i = 0; i < FLIGHT_MODES; i++)
	{
		Config.FlightMode[i].Roll_P_mult = 80;			// PID defaults		
    2c1e:	80 93 c3 05 	sts	0x05C3, r24
		Config.FlightMode[i].Roll_I_mult = 50;	
    2c22:	20 93 c4 05 	sts	0x05C4, r18
		Config.FlightMode[i].Pitch_P_mult = 80;
    2c26:	80 93 c9 05 	sts	0x05C9, r24
		Config.FlightMode[i].Pitch_I_mult = 50;
    2c2a:	20 93 ca 05 	sts	0x05CA, r18
		Config.FlightMode[i].Yaw_P_mult = 80;
    2c2e:	80 93 cf 05 	sts	0x05CF, r24
		Config.FlightMode[i].Yaw_I_mult = 50;
    2c32:	20 93 d0 05 	sts	0x05D0, r18
		Config.FlightMode[i].A_Roll_P_mult = 60;
    2c36:	90 93 c7 05 	sts	0x05C7, r25
		Config.FlightMode[i].A_Pitch_P_mult = 60;
    2c3a:	90 93 cd 05 	sts	0x05CD, r25
	}

	Config.Acc_LPF = 8;					// IMU CF defaults
    2c3e:	88 e0       	ldi	r24, 0x08	; 8
    2c40:	80 93 0d 06 	sts	0x060D, r24
	Config.CF_factor = 30;
    2c44:	8e e1       	ldi	r24, 0x1E	; 30
    2c46:	80 93 0e 06 	sts	0x060E, r24
	Config.FlightChan = GEAR;			// Channel GEAR switches flight mode by default
    2c4a:	30 93 aa 05 	sts	0x05AA, r19
	Config.Orientation = HORIZONTAL;	// Horizontal / vertical etc.
	Config.Contrast = 38;				// Contrast
    2c4e:	96 e2       	ldi	r25, 0x26	; 38
    2c50:	90 93 08 06 	sts	0x0608, r25
	Config.Disarm_timer = 30;			// Default to 30 seconds
    2c54:	80 93 0a 06 	sts	0x060A, r24
	Config.Stick_Lock_rate = 3;
    2c58:	83 e0       	ldi	r24, 0x03	; 3
    2c5a:	80 93 ae 05 	sts	0x05AE, r24
	Config.Transition_P1n = 50;			// Set P1.n point to 50%
    2c5e:	20 93 b0 05 	sts	0x05B0, r18
}
    2c62:	df 91       	pop	r29
    2c64:	cf 91       	pop	r28
    2c66:	1f 91       	pop	r17
    2c68:	0f 91       	pop	r16
    2c6a:	08 95       	ret

00002c6c <eeprom_write_byte_changed>:
	_delay_ms(500);
	LED1 = !LED1;
}

void eeprom_write_byte_changed( uint8_t * addr, uint8_t value )
{ 
    2c6c:	a1 e0       	ldi	r26, 0x01	; 1
    2c6e:	b0 e0       	ldi	r27, 0x00	; 0
    2c70:	ec e3       	ldi	r30, 0x3C	; 60
    2c72:	f6 e1       	ldi	r31, 0x16	; 22
    2c74:	0c 94 a1 3e 	jmp	0x7d42	; 0x7d42 <__prologue_saves__+0x1c>
    2c78:	8c 01       	movw	r16, r24
	if(eeprom_read_byte(addr) != value)
    2c7a:	69 83       	std	Y+1, r22	; 0x01
    2c7c:	0e 94 08 3f 	call	0x7e10	; 0x7e10 <__eerd_byte_m644p>
    2c80:	69 81       	ldd	r22, Y+1	; 0x01
    2c82:	86 17       	cp	r24, r22
    2c84:	19 f0       	breq	.+6      	; 0x2c8c <eeprom_write_byte_changed+0x20>
	{
		eeprom_write_byte( addr, value );
    2c86:	c8 01       	movw	r24, r16
    2c88:	0e 94 10 3f 	call	0x7e20	; 0x7e20 <__eewr_byte_m644p>
	}
}
    2c8c:	21 96       	adiw	r28, 0x01	; 1
    2c8e:	e4 e0       	ldi	r30, 0x04	; 4
    2c90:	0c 94 bd 3e 	jmp	0x7d7a	; 0x7d7a <__epilogue_restores__+0x1c>

00002c94 <eeprom_write_block_changes>:

void eeprom_write_block_changes( const uint8_t * src, void * dest, uint16_t size )
{ 
    2c94:	ef 92       	push	r14
    2c96:	ff 92       	push	r15
    2c98:	0f 93       	push	r16
    2c9a:	1f 93       	push	r17
    2c9c:	cf 93       	push	r28
    2c9e:	df 93       	push	r29
    2ca0:	ec 01       	movw	r28, r24
    2ca2:	8b 01       	movw	r16, r22
    2ca4:	7a 01       	movw	r14, r20
    2ca6:	e8 0e       	add	r14, r24
    2ca8:	f9 1e       	adc	r15, r25
	uint16_t len;

	for(len=0;len<size;len++)
    2caa:	ce 15       	cp	r28, r14
    2cac:	df 05       	cpc	r29, r15
    2cae:	39 f0       	breq	.+14     	; 0x2cbe <eeprom_write_block_changes+0x2a>
	{
		eeprom_write_byte_changed( dest, *src );
    2cb0:	69 91       	ld	r22, Y+
    2cb2:	c8 01       	movw	r24, r16
    2cb4:	0e 94 36 16 	call	0x2c6c	; 0x2c6c <eeprom_write_byte_changed>
		src++;
		dest++;
    2cb8:	0f 5f       	subi	r16, 0xFF	; 255
    2cba:	1f 4f       	sbci	r17, 0xFF	; 255
    2cbc:	f6 cf       	rjmp	.-20     	; 0x2caa <eeprom_write_block_changes+0x16>
	}
}
    2cbe:	cd b7       	in	r28, 0x3d	; 61
    2cc0:	de b7       	in	r29, 0x3e	; 62
    2cc2:	e6 e0       	ldi	r30, 0x06	; 6
    2cc4:	0c 94 bb 3e 	jmp	0x7d76	; 0x7d76 <__epilogue_restores__+0x18>

00002cc8 <Save_Config_to_EEPROM>:
}

void Save_Config_to_EEPROM(void)
{
	// Write to eeProm
	cli();
    2cc8:	f8 94       	cli
	eeprom_write_block_changes((const void*) &Config, (void*) EEPROM_DATA_START_POS, sizeof(CONFIG_STRUCT));	
    2cca:	4f eb       	ldi	r20, 0xBF	; 191
    2ccc:	51 e0       	ldi	r21, 0x01	; 1
    2cce:	60 e0       	ldi	r22, 0x00	; 0
    2cd0:	70 e0       	ldi	r23, 0x00	; 0
    2cd2:	8e e7       	ldi	r24, 0x7E	; 126
    2cd4:	95 e0       	ldi	r25, 0x05	; 5
    2cd6:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <eeprom_write_block_changes>
	sei();
    2cda:	78 94       	sei
	menu_beep(1);
    2cdc:	81 e0       	ldi	r24, 0x01	; 1
    2cde:	0e 94 18 27 	call	0x4e30	; 0x4e30 <menu_beep>
	LED1 = !LED1;
    2ce2:	85 b1       	in	r24, 0x05	; 5
    2ce4:	83 fb       	bst	r24, 3
    2ce6:	88 27       	eor	r24, r24
    2ce8:	80 f9       	bld	r24, 0
    2cea:	91 e0       	ldi	r25, 0x01	; 1
    2cec:	89 27       	eor	r24, r25
    2cee:	80 fd       	sbrc	r24, 0
    2cf0:	2b 9a       	sbi	0x05, 3	; 5
    2cf2:	80 ff       	sbrs	r24, 0
    2cf4:	2b 98       	cbi	0x05, 3	; 5
    2cf6:	2f e7       	ldi	r18, 0x7F	; 127
    2cf8:	84 e8       	ldi	r24, 0x84	; 132
    2cfa:	9e e1       	ldi	r25, 0x1E	; 30
    2cfc:	21 50       	subi	r18, 0x01	; 1
    2cfe:	80 40       	sbci	r24, 0x00	; 0
    2d00:	90 40       	sbci	r25, 0x00	; 0
    2d02:	e1 f7       	brne	.-8      	; 0x2cfc <Save_Config_to_EEPROM+0x34>
    2d04:	00 c0       	rjmp	.+0      	; 0x2d06 <Save_Config_to_EEPROM+0x3e>
    2d06:	00 00       	nop
	_delay_ms(500);
	LED1 = !LED1;
    2d08:	85 b1       	in	r24, 0x05	; 5
    2d0a:	83 fb       	bst	r24, 3
    2d0c:	88 27       	eor	r24, r24
    2d0e:	80 f9       	bld	r24, 0
    2d10:	91 e0       	ldi	r25, 0x01	; 1
    2d12:	89 27       	eor	r24, r25
    2d14:	80 fd       	sbrc	r24, 0
    2d16:	2b 9a       	sbi	0x05, 3	; 5
    2d18:	80 ff       	sbrs	r24, 0
    2d1a:	2b 98       	cbi	0x05, 3	; 5
    2d1c:	08 95       	ret

00002d1e <Initial_EEPROM_Config_Load>:
}

void Initial_EEPROM_Config_Load(void)
{
	// Load last settings from EEPROM
	if(eeprom_read_byte((uint8_t*) EEPROM_DATA_START_POS )!= MAGIC_NUMBER)
    2d1e:	80 e0       	ldi	r24, 0x00	; 0
    2d20:	90 e0       	ldi	r25, 0x00	; 0
    2d22:	0e 94 08 3f 	call	0x7e10	; 0x7e10 <__eerd_byte_m644p>
    2d26:	8e 32       	cpi	r24, 0x2E	; 46
    2d28:	29 f0       	breq	.+10     	; 0x2d34 <Initial_EEPROM_Config_Load+0x16>
	{
		Set_EEPROM_Default_Config();
    2d2a:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <Set_EEPROM_Default_Config>
		// Write to eeProm
		Save_Config_to_EEPROM();
    2d2e:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <Save_Config_to_EEPROM>
    2d32:	08 95       	ret
	} 
	else 
	{
		// Read eeProm
		eeprom_read_block(&Config, (void*) EEPROM_DATA_START_POS, sizeof(CONFIG_STRUCT)); 
    2d34:	4f eb       	ldi	r20, 0xBF	; 191
    2d36:	51 e0       	ldi	r21, 0x01	; 1
    2d38:	60 e0       	ldi	r22, 0x00	; 0
    2d3a:	70 e0       	ldi	r23, 0x00	; 0
    2d3c:	8e e7       	ldi	r24, 0x7E	; 126
    2d3e:	95 e0       	ldi	r25, 0x05	; 5
    2d40:	0e 94 f8 3e 	call	0x7df0	; 0x7df0 <__eerd_block_m644p>
    2d44:	08 95       	ret

00002d46 <main>:
//************************************************************
//* Main loop
//************************************************************

int main(void)
{
    2d46:	a0 e2       	ldi	r26, 0x20	; 32
    2d48:	b0 e0       	ldi	r27, 0x00	; 0
    2d4a:	e9 ea       	ldi	r30, 0xA9	; 169
    2d4c:	f6 e1       	ldi	r31, 0x16	; 22
    2d4e:	0c 94 93 3e 	jmp	0x7d26	; 0x7d26 <__prologue_saves__>
	uint8_t Status_seconds = 0;
	uint8_t Menu_mode = STATUS_TIMEOUT;
	int8_t	old_flight = 3;			// Old flight profile
	int8_t	old_trans_mode = 0;		// Old transition mode
	
	init();							// Do all init tasks
    2d52:	0e 94 37 21 	call	0x426e	; 0x426e <init>
	uint16_t InterruptCounter = 0;
	uint8_t	Disarm_seconds = 0;
	uint8_t Status_seconds = 0;
	uint8_t Menu_mode = STATUS_TIMEOUT;
	int8_t	old_flight = 3;			// Old flight profile
	int8_t	old_trans_mode = 0;		// Old transition mode
    2d56:	1e 8e       	std	Y+30, r1	; 0x1e
	// Locals
	uint16_t InterruptCounter = 0;
	uint8_t	Disarm_seconds = 0;
	uint8_t Status_seconds = 0;
	uint8_t Menu_mode = STATUS_TIMEOUT;
	int8_t	old_flight = 3;			// Old flight profile
    2d58:	23 e0       	ldi	r18, 0x03	; 3
    2d5a:	2f 8f       	std	Y+31, r18	; 0x1f

	// Locals
	uint16_t InterruptCounter = 0;
	uint8_t	Disarm_seconds = 0;
	uint8_t Status_seconds = 0;
	uint8_t Menu_mode = STATUS_TIMEOUT;
    2d5c:	16 e0       	ldi	r17, 0x06	; 6
	uint8_t ServoRate_TCNT2 = 0;

	// Locals
	uint16_t InterruptCounter = 0;
	uint8_t	Disarm_seconds = 0;
	uint8_t Status_seconds = 0;
    2d5e:	19 82       	std	Y+1, r1	; 0x01
	uint8_t Servo_TCNT2 = 0;
	uint8_t ServoRate_TCNT2 = 0;

	// Locals
	uint16_t InterruptCounter = 0;
	uint8_t	Disarm_seconds = 0;
    2d60:	18 a2       	std	Y+32, r1	; 0x20
	uint8_t Ticker_TCNT2 = 0;
	uint8_t Servo_TCNT2 = 0;
	uint8_t ServoRate_TCNT2 = 0;

	// Locals
	uint16_t InterruptCounter = 0;
    2d62:	19 86       	std	Y+9, r1	; 0x09
    2d64:	18 86       	std	Y+8, r1	; 0x08
	uint8_t Refresh_TCNT2 = 0;
	uint8_t Disarm_TCNT2 = 0;
	uint8_t Arm_TCNT2 = 0;
	uint8_t Ticker_TCNT2 = 0;
	uint8_t Servo_TCNT2 = 0;
	uint8_t ServoRate_TCNT2 = 0;
    2d66:	1d 8e       	std	Y+29, r1	; 0x1d
	uint8_t Status_TCNT2 = 0;
	uint8_t Refresh_TCNT2 = 0;
	uint8_t Disarm_TCNT2 = 0;
	uint8_t Arm_TCNT2 = 0;
	uint8_t Ticker_TCNT2 = 0;
	uint8_t Servo_TCNT2 = 0;
    2d68:	1c 8e       	std	Y+28, r1	; 0x1c
	uint8_t Transition_TCNT2 = 0;
	uint8_t Status_TCNT2 = 0;
	uint8_t Refresh_TCNT2 = 0;
	uint8_t Disarm_TCNT2 = 0;
	uint8_t Arm_TCNT2 = 0;
	uint8_t Ticker_TCNT2 = 0;
    2d6a:	1b 8e       	std	Y+27, r1	; 0x1b
	uint16_t RC_Rate_TCNT1 = 0;
	uint8_t Transition_TCNT2 = 0;
	uint8_t Status_TCNT2 = 0;
	uint8_t Refresh_TCNT2 = 0;
	uint8_t Disarm_TCNT2 = 0;
	uint8_t Arm_TCNT2 = 0;
    2d6c:	1f 86       	std	Y+15, r1	; 0x0f
	uint16_t LoopStartTCNT1 = 0;
	uint16_t RC_Rate_TCNT1 = 0;
	uint8_t Transition_TCNT2 = 0;
	uint8_t Status_TCNT2 = 0;
	uint8_t Refresh_TCNT2 = 0;
	uint8_t Disarm_TCNT2 = 0;
    2d6e:	00 e0       	ldi	r16, 0x00	; 0
	// Timer incrementers
	uint16_t LoopStartTCNT1 = 0;
	uint16_t RC_Rate_TCNT1 = 0;
	uint8_t Transition_TCNT2 = 0;
	uint8_t Status_TCNT2 = 0;
	uint8_t Refresh_TCNT2 = 0;
    2d70:	18 8e       	std	Y+24, r1	; 0x18

	// Timer incrementers
	uint16_t LoopStartTCNT1 = 0;
	uint16_t RC_Rate_TCNT1 = 0;
	uint8_t Transition_TCNT2 = 0;
	uint8_t Status_TCNT2 = 0;
    2d72:	1f 8a       	std	Y+23, r1	; 0x17
	uint16_t LoopTCNT1 = 0;

	// Timer incrementers
	uint16_t LoopStartTCNT1 = 0;
	uint16_t RC_Rate_TCNT1 = 0;
	uint8_t Transition_TCNT2 = 0;
    2d74:	1e 8a       	std	Y+22, r1	; 0x16
	uint16_t ticker_16 = 0;
	uint16_t LoopTCNT1 = 0;

	// Timer incrementers
	uint16_t LoopStartTCNT1 = 0;
	uint16_t RC_Rate_TCNT1 = 0;
    2d76:	1d 8a       	std	Y+21, r1	; 0x15
    2d78:	1c 8a       	std	Y+20, r1	; 0x14
	uint16_t Disarm_timer = 0;
	uint16_t ticker_16 = 0;
	uint16_t LoopTCNT1 = 0;

	// Timer incrementers
	uint16_t LoopStartTCNT1 = 0;
    2d7a:	1b 8a       	std	Y+19, r1	; 0x13
    2d7c:	1a 8a       	std	Y+18, r1	; 0x12
	uint16_t RC_Timeout = 0;
	uint16_t Servo_Rate = 0;
	uint16_t Transition_timeout = 0;
	uint16_t Disarm_timer = 0;
	uint16_t ticker_16 = 0;
	uint16_t LoopTCNT1 = 0;
    2d7e:	19 8a       	std	Y+17, r1	; 0x11
    2d80:	18 8a       	std	Y+16, r1	; 0x10
	uint16_t UpdateStatus_timer = 0;
	uint16_t Ticker_Count = 0;
	uint16_t RC_Timeout = 0;
	uint16_t Servo_Rate = 0;
	uint16_t Transition_timeout = 0;
	uint16_t Disarm_timer = 0;
    2d82:	41 2c       	mov	r4, r1
    2d84:	51 2c       	mov	r5, r1
	uint16_t Status_timeout = 0;
	uint16_t UpdateStatus_timer = 0;
	uint16_t Ticker_Count = 0;
	uint16_t RC_Timeout = 0;
	uint16_t Servo_Rate = 0;
	uint16_t Transition_timeout = 0;
    2d86:	21 2c       	mov	r2, r1
    2d88:	31 2c       	mov	r3, r1
	// 16-bit timers
	uint16_t Status_timeout = 0;
	uint16_t UpdateStatus_timer = 0;
	uint16_t Ticker_Count = 0;
	uint16_t RC_Timeout = 0;
	uint16_t Servo_Rate = 0;
    2d8a:	61 2c       	mov	r6, r1
    2d8c:	71 2c       	mov	r7, r1

	// 16-bit timers
	uint16_t Status_timeout = 0;
	uint16_t UpdateStatus_timer = 0;
	uint16_t Ticker_Count = 0;
	uint16_t RC_Timeout = 0;
    2d8e:	1f 82       	std	Y+7, r1	; 0x07
    2d90:	1e 82       	std	Y+6, r1	; 0x06
	uint32_t RC_Rate_Timer = 0;

	// 16-bit timers
	uint16_t Status_timeout = 0;
	uint16_t UpdateStatus_timer = 0;
	uint16_t Ticker_Count = 0;
    2d92:	1e 86       	std	Y+14, r1	; 0x0e
    2d94:	1d 86       	std	Y+13, r1	; 0x0d
	uint32_t Arm_timer = 0;
	uint32_t RC_Rate_Timer = 0;

	// 16-bit timers
	uint16_t Status_timeout = 0;
	uint16_t UpdateStatus_timer = 0;
    2d96:	1d 82       	std	Y+5, r1	; 0x05
    2d98:	1c 82       	std	Y+4, r1	; 0x04
	// 32-bit timers
	uint32_t Arm_timer = 0;
	uint32_t RC_Rate_Timer = 0;

	// 16-bit timers
	uint16_t Status_timeout = 0;
    2d9a:	1b 82       	std	Y+3, r1	; 0x03
    2d9c:	1a 82       	std	Y+2, r1	; 0x02
	bool SlowRC = false;
	bool TransitionUpdated = false;

	// 32-bit timers
	uint32_t Arm_timer = 0;
	uint32_t RC_Rate_Timer = 0;
    2d9e:	81 2c       	mov	r8, r1
    2da0:	91 2c       	mov	r9, r1
    2da2:	54 01       	movw	r10, r8
	bool ServoTick = false;
	bool SlowRC = false;
	bool TransitionUpdated = false;

	// 32-bit timers
	uint32_t Arm_timer = 0;
    2da4:	c1 2c       	mov	r12, r1
    2da6:	d1 2c       	mov	r13, r1
    2da8:	76 01       	movw	r14, r12

int main(void)
{
	bool Overdue = false;
	bool ServoTick = false;
	bool SlowRC = false;
    2daa:	1c 86       	std	Y+12, r1	; 0x0c
//************************************************************

int main(void)
{
	bool Overdue = false;
	bool ServoTick = false;
    2dac:	1b 86       	std	Y+11, r1	; 0x0b
//* Main loop
//************************************************************

int main(void)
{
	bool Overdue = false;
    2dae:	1a 86       	std	Y+10, r1	; 0x0a
		//************************************************************
		//* Check for interruption of PWM generation
		//* The "JitterFlag" flag was reset just before PWM generation
		//************************************************************

		if (JitterFlag == true)
    2db0:	80 91 67 07 	lds	r24, 0x0767
    2db4:	88 23       	and	r24, r24
    2db6:	31 f0       	breq	.+12     	; 0x2dc4 <main+0x7e>
		{
			InterruptCounter++;
    2db8:	28 85       	ldd	r18, Y+8	; 0x08
    2dba:	39 85       	ldd	r19, Y+9	; 0x09
    2dbc:	2f 5f       	subi	r18, 0xFF	; 255
    2dbe:	3f 4f       	sbci	r19, 0xFF	; 255
    2dc0:	39 87       	std	Y+9, r19	; 0x09
    2dc2:	28 87       	std	Y+8, r18	; 0x08

		//************************************************************
		//* State machine for switching between screens safely
		//************************************************************

		switch(Menu_mode) 
    2dc4:	14 30       	cpi	r17, 0x04	; 4
    2dc6:	51 f1       	breq	.+84     	; 0x2e1c <main+0xd6>
    2dc8:	68 f4       	brcc	.+26     	; 0x2de4 <main+0x9e>
    2dca:	11 23       	and	r17, r17
    2dcc:	d9 f0       	breq	.+54     	; 0x2e04 <main+0xbe>
    2dce:	13 30       	cpi	r17, 0x03	; 3
    2dd0:	09 f0       	breq	.+2      	; 0x2dd4 <main+0x8e>
    2dd2:	41 c0       	rjmp	.+130    	; 0x2e56 <main+0x110>
			// Status screen first display
			case STATUS:
				// Reset the status screen period
				UpdateStatus_timer = 0;
				// Update status screen
				Display_status();
    2dd4:	0e 94 0c 13 	call	0x2618	; 0x2618 <Display_status>
				// Force resync on next RC packet
				Interrupted = false;	
    2dd8:	10 92 3e 07 	sts	0x073E, r1
				// Wait for timeout
				Menu_mode = WAITING_TIMEOUT_BD;
    2ddc:	15 e0       	ldi	r17, 0x05	; 5
				break;

			// Status screen first display
			case STATUS:
				// Reset the status screen period
				UpdateStatus_timer = 0;
    2dde:	1d 82       	std	Y+5, r1	; 0x05
    2de0:	1c 82       	std	Y+4, r1	; 0x04
				Display_status();
				// Force resync on next RC packet
				Interrupted = false;	
				// Wait for timeout
				Menu_mode = WAITING_TIMEOUT_BD;
				break;
    2de2:	39 c0       	rjmp	.+114    	; 0x2e56 <main+0x110>

		//************************************************************
		//* State machine for switching between screens safely
		//************************************************************

		switch(Menu_mode) 
    2de4:	16 30       	cpi	r17, 0x06	; 6
    2de6:	69 f1       	breq	.+90     	; 0x2e42 <main+0xfc>
    2de8:	a8 f0       	brcs	.+42     	; 0x2e14 <main+0xce>
    2dea:	17 30       	cpi	r17, 0x07	; 7
    2dec:	a1 f5       	brne	.+104    	; 0x2e56 <main+0x110>
				Menu_mode = IDLE;
				break;

			// In MENU mode, 
			case MENU:
				LVA = 0;	// Make sure buzzer is off :)
    2dee:	29 98       	cbi	0x05, 1	; 5
				// Disarm the FC
				General_error |= (1 << DISARMED);
    2df0:	80 91 0e 05 	lds	r24, 0x050E
    2df4:	80 61       	ori	r24, 0x10	; 16
    2df6:	80 93 0e 05 	sts	0x050E, r24
				// Start the menu system
				menu_main();
    2dfa:	0e 94 28 29 	call	0x5250	; 0x5250 <menu_main>
				// Force resync on next RC packet
				Interrupted = false;
    2dfe:	10 92 3e 07 	sts	0x073E, r1
    2e02:	25 c0       	rjmp	.+74     	; 0x2e4e <main+0x108>
		switch(Menu_mode) 
		{
			// In IDLE mode, the text "Press for status" is displayed ONCE.
			// If a button is pressed the mode changes to STATUS
			case IDLE:
				if((PINB & 0xf0) != 0xf0)
    2e04:	83 b1       	in	r24, 0x03	; 3
    2e06:	80 7f       	andi	r24, 0xF0	; 240
    2e08:	80 3f       	cpi	r24, 0xF0	; 240
    2e0a:	29 f1       	breq	.+74     	; 0x2e56 <main+0x110>
				{
					Menu_mode = STATUS;
					// Reset the status screen timeout
					Status_seconds = 0;
					menu_beep(1);
    2e0c:	81 e0       	ldi	r24, 0x01	; 1
    2e0e:	0e 94 18 27 	call	0x4e30	; 0x4e30 <menu_beep>
    2e12:	1d c0       	rjmp	.+58     	; 0x2e4e <main+0x108>

			// Status screen up, but button still down ;)
			// This is designed to stop the menu appearing instead of the status screen
			// as it will stay here until the button is released
			case WAITING_TIMEOUT_BD:
				if(BUTTON1 == 0)
    2e14:	1f 9b       	sbis	0x03, 7	; 3
    2e16:	1f c0       	rjmp	.+62     	; 0x2e56 <main+0x110>
				{
					Menu_mode = WAITING_TIMEOUT_BD;
				}
				else
				{
					Menu_mode = WAITING_TIMEOUT;
    2e18:	14 e0       	ldi	r17, 0x04	; 4
    2e1a:	1d c0       	rjmp	.+58     	; 0x2e56 <main+0x110>
												
			// Status screen up, waiting for timeout or action
			// but button is back up
			case WAITING_TIMEOUT:
				// In status screen, change back to idle after timing out
				if (Status_seconds >= 10)
    2e1c:	39 81       	ldd	r19, Y+1	; 0x01
    2e1e:	3a 30       	cpi	r19, 0x0A	; 10
    2e20:	c8 f4       	brcc	.+50     	; 0x2e54 <main+0x10e>
				{
					Menu_mode = STATUS_TIMEOUT;
				}

				// Jump to menu if button pressed
				else if(BUTTON1 == 0)
    2e22:	1f 99       	sbic	0x03, 7	; 3
    2e24:	07 c0       	rjmp	.+14     	; 0x2e34 <main+0xee>
				{
					Menu_mode = MENU;
					menu_beep(1);
    2e26:	81 e0       	ldi	r24, 0x01	; 1
    2e28:	0e 94 18 27 	call	0x4e30	; 0x4e30 <menu_beep>
					// Force resync on next RC packet
					Interrupted = false;
    2e2c:	10 92 3e 07 	sts	0x073E, r1
				}

				// Jump to menu if button pressed
				else if(BUTTON1 == 0)
				{
					Menu_mode = MENU;
    2e30:	17 e0       	ldi	r17, 0x07	; 7
    2e32:	11 c0       	rjmp	.+34     	; 0x2e56 <main+0x110>
					// Force resync on next RC packet
					Interrupted = false;
				}

				// Update status screen while waiting to time out
				else if (UpdateStatus_timer > (SECOND_TIMER >> 2))
    2e34:	2c 81       	ldd	r18, Y+4	; 0x04
    2e36:	3d 81       	ldd	r19, Y+5	; 0x05
    2e38:	23 31       	cpi	r18, 0x13	; 19
    2e3a:	33 41       	sbci	r19, 0x13	; 19
    2e3c:	60 f0       	brcs	.+24     	; 0x2e56 <main+0x110>
				{
					Menu_mode = STATUS;
    2e3e:	13 e0       	ldi	r17, 0x03	; 3
    2e40:	0a c0       	rjmp	.+20     	; 0x2e56 <main+0x110>
				break;

			// In STATUS_TIMEOUT mode, the idle screen is displayed and the mode changed to IDLE
			case STATUS_TIMEOUT:
				// Pop up the Idle screen
				idle_screen();
    2e42:	0e 94 92 1c 	call	0x3924	; 0x3924 <idle_screen>
				// Force resync on next RC packet
				Interrupted = false;
    2e46:	10 92 3e 07 	sts	0x073E, r1
				// Switch to IDLE mode
				Menu_mode = IDLE;
    2e4a:	10 e0       	ldi	r17, 0x00	; 0
				break;
    2e4c:	04 c0       	rjmp	.+8      	; 0x2e56 <main+0x110>
				// Start the menu system
				menu_main();
				// Force resync on next RC packet
				Interrupted = false;
				// Switch back to status screen when leaving menu
				Menu_mode = STATUS;
    2e4e:	13 e0       	ldi	r17, 0x03	; 3
				// Reset timeout once back in status screen
				Status_seconds = 0;
    2e50:	19 82       	std	Y+1, r1	; 0x01
				break;
    2e52:	01 c0       	rjmp	.+2      	; 0x2e56 <main+0x110>
			// but button is back up
			case WAITING_TIMEOUT:
				// In status screen, change back to idle after timing out
				if (Status_seconds >= 10)
				{
					Menu_mode = STATUS_TIMEOUT;
    2e54:	16 e0       	ldi	r17, 0x06	; 6
		//************************************************************
		//* Status menu timing
		//************************************************************

		// Update status timeout
		Status_timeout += (uint8_t) (TCNT2 - Status_TCNT2);
    2e56:	80 91 b2 00 	lds	r24, 0x00B2
    2e5a:	2f 89       	ldd	r18, Y+23	; 0x17
    2e5c:	82 1b       	sub	r24, r18
    2e5e:	2a 81       	ldd	r18, Y+2	; 0x02
    2e60:	3b 81       	ldd	r19, Y+3	; 0x03
    2e62:	28 0f       	add	r18, r24
    2e64:	31 1d       	adc	r19, r1
    2e66:	3b 83       	std	Y+3, r19	; 0x03
    2e68:	2a 83       	std	Y+2, r18	; 0x02
		Status_TCNT2 = TCNT2;
    2e6a:	30 91 b2 00 	lds	r19, 0x00B2
    2e6e:	3f 8b       	std	Y+23, r19	; 0x17

		// Count elapsed seconds
		if (Status_timeout > SECOND_TIMER)
    2e70:	2a 81       	ldd	r18, Y+2	; 0x02
    2e72:	3b 81       	ldd	r19, Y+3	; 0x03
    2e74:	2c 34       	cpi	r18, 0x4C	; 76
    2e76:	3c 44       	sbci	r19, 0x4C	; 76
    2e78:	68 f0       	brcs	.+26     	; 0x2e94 <main+0x14e>
		{
			Status_seconds++;
    2e7a:	29 81       	ldd	r18, Y+1	; 0x01
    2e7c:	2f 5f       	subi	r18, 0xFF	; 255
    2e7e:	29 83       	std	Y+1, r18	; 0x01
			Status_timeout = 0;

			// Display the interrupt count each second
			InterruptCount = InterruptCounter;
    2e80:	28 85       	ldd	r18, Y+8	; 0x08
    2e82:	39 85       	ldd	r19, Y+9	; 0x09
    2e84:	30 93 0b 05 	sts	0x050B, r19
    2e88:	20 93 0a 05 	sts	0x050A, r18
			InterruptCounter = 0;
    2e8c:	19 86       	std	Y+9, r1	; 0x09
    2e8e:	18 86       	std	Y+8, r1	; 0x08

		// Count elapsed seconds
		if (Status_timeout > SECOND_TIMER)
		{
			Status_seconds++;
			Status_timeout = 0;
    2e90:	1b 82       	std	Y+3, r1	; 0x03
    2e92:	1a 82       	std	Y+2, r1	; 0x02
			InterruptCount = InterruptCounter;
			InterruptCounter = 0;
		}

		// Status refresh timer
		UpdateStatus_timer += (uint8_t) (TCNT2 - Refresh_TCNT2);
    2e94:	80 91 b2 00 	lds	r24, 0x00B2
    2e98:	38 8d       	ldd	r19, Y+24	; 0x18
    2e9a:	83 1b       	sub	r24, r19
    2e9c:	2c 81       	ldd	r18, Y+4	; 0x04
    2e9e:	3d 81       	ldd	r19, Y+5	; 0x05
    2ea0:	28 0f       	add	r18, r24
    2ea2:	31 1d       	adc	r19, r1
    2ea4:	3d 83       	std	Y+5, r19	; 0x05
    2ea6:	2c 83       	std	Y+4, r18	; 0x04
		Refresh_TCNT2 = TCNT2;
    2ea8:	30 91 b2 00 	lds	r19, 0x00B2
    2eac:	38 8f       	std	Y+24, r19	; 0x18
		//* 
		//* ((Ticker_Count >> 8) &8) 	= 4.77Hz (Disarm and LVA alarms)
		//************************************************************

		// Ticker_Count increments at 19.531 kHz, in loop cycle chunks
		Ticker_Count += (uint8_t) (TCNT2 - Ticker_TCNT2);
    2eae:	80 91 b2 00 	lds	r24, 0x00B2
    2eb2:	4b 8d       	ldd	r20, Y+27	; 0x1b
    2eb4:	84 1b       	sub	r24, r20
    2eb6:	2d 85       	ldd	r18, Y+13	; 0x0d
    2eb8:	3e 85       	ldd	r19, Y+14	; 0x0e
    2eba:	28 0f       	add	r18, r24
    2ebc:	31 1d       	adc	r19, r1
    2ebe:	3e 87       	std	Y+14, r19	; 0x0e
    2ec0:	2d 87       	std	Y+13, r18	; 0x0d
		Ticker_TCNT2 = TCNT2;
    2ec2:	30 91 b2 00 	lds	r19, 0x00B2
    2ec6:	3b 8f       	std	Y+27, r19	; 0x1b
    2ec8:	80 91 0c 05 	lds	r24, 0x050C

		if ((Ticker_Count >> 8) &8) 
    2ecc:	2d 85       	ldd	r18, Y+13	; 0x0d
    2ece:	3e 85       	ldd	r19, Y+14	; 0x0e
    2ed0:	33 ff       	sbrs	r19, 3
    2ed2:	02 c0       	rjmp	.+4      	; 0x2ed8 <main+0x192>
		{
			Alarm_flags |= (1 << BUZZER_ON);	// 4.77Hz beep
    2ed4:	80 64       	ori	r24, 0x40	; 64
    2ed6:	01 c0       	rjmp	.+2      	; 0x2eda <main+0x194>
		}
		else 
		{
			Alarm_flags &= ~(1 << BUZZER_ON);
    2ed8:	8f 7b       	andi	r24, 0xBF	; 191
    2eda:	80 93 0c 05 	sts	0x050C, r24
    2ede:	80 91 0e 05 	lds	r24, 0x050E
		//************************************************************
		//* Alarms
		//************************************************************

		// If RC signals overdue, signal RX error message and disarm
		if (Overdue)
    2ee2:	3a 85       	ldd	r19, Y+10	; 0x0a
    2ee4:	33 23       	and	r19, r19
    2ee6:	91 f0       	breq	.+36     	; 0x2f0c <main+0x1c6>
		{
			General_error |= (1 << NO_SIGNAL);		// Set NO_SIGNAL bit
    2ee8:	98 2f       	mov	r25, r24
    2eea:	94 60       	ori	r25, 0x04	; 4
    2eec:	90 93 0e 05 	sts	0x050E, r25
			
			// If FC is set to "armable" and is currently armed, disarm the FC
			if ((Config.ArmMode == ARMABLE) && ((General_error & (1 << DISARMED)) == 0))
    2ef0:	90 91 09 06 	lds	r25, 0x0609
    2ef4:	91 30       	cpi	r25, 0x01	; 1
    2ef6:	69 f4       	brne	.+26     	; 0x2f12 <main+0x1cc>
    2ef8:	84 fd       	sbrc	r24, 4
    2efa:	0b c0       	rjmp	.+22     	; 0x2f12 <main+0x1cc>
			{
				General_error |= (1 << DISARMED);	// Set flags to disarmed
    2efc:	84 61       	ori	r24, 0x14	; 20
    2efe:	80 93 0e 05 	sts	0x050E, r24
				// Force update of status screen
				Menu_mode = STATUS_TIMEOUT;
				menu_beep(1);						// Signal that FC is now disarmed
    2f02:	81 e0       	ldi	r24, 0x01	; 1
    2f04:	0e 94 18 27 	call	0x4e30	; 0x4e30 <menu_beep>
			// If FC is set to "armable" and is currently armed, disarm the FC
			if ((Config.ArmMode == ARMABLE) && ((General_error & (1 << DISARMED)) == 0))
			{
				General_error |= (1 << DISARMED);	// Set flags to disarmed
				// Force update of status screen
				Menu_mode = STATUS_TIMEOUT;
    2f08:	16 e0       	ldi	r17, 0x06	; 6
    2f0a:	03 c0       	rjmp	.+6      	; 0x2f12 <main+0x1cc>
				menu_beep(1);						// Signal that FC is now disarmed
			}
		}
		else
		{
			General_error &= ~(1 << NO_SIGNAL);	// Clear NO_SIGNAL bit
    2f0c:	8b 7f       	andi	r24, 0xFB	; 251
    2f0e:	80 93 0e 05 	sts	0x050E, r24
		}

		// Beep buzzer if Vbat lower than trigger
		// Vbat is measured in units of 10mV, so a PowerTrigger of 127 equates to 12.7V
		if (GetVbat() < Config.PowerTriggerActual)
    2f12:	0e 94 1b 3b 	call	0x7636	; 0x7636 <GetVbat>
    2f16:	20 91 05 06 	lds	r18, 0x0605
    2f1a:	30 91 06 06 	lds	r19, 0x0606
    2f1e:	50 91 0e 05 	lds	r21, 0x050E
    2f22:	82 17       	cp	r24, r18
    2f24:	93 07       	cpc	r25, r19
    2f26:	10 f4       	brcc	.+4      	; 0x2f2c <main+0x1e6>
		{
			General_error |= (1 << LVA_ALARM);	// Set LVA_Alarm flag
    2f28:	50 62       	ori	r21, 0x20	; 32
    2f2a:	01 c0       	rjmp	.+2      	; 0x2f2e <main+0x1e8>
		}
		else 
		{
			General_error &= ~(1 << LVA_ALARM);	// Clear LVA_Alarm flag
    2f2c:	5f 7d       	andi	r21, 0xDF	; 223
    2f2e:	50 93 0e 05 	sts	0x050E, r21
		}

		// Turn on buzzer if in alarm state (BUZZER_ON is oscillating)
		if	(
			 (
			  (General_error & (1 << LVA_ALARM)) ||
    2f32:	80 91 0e 05 	lds	r24, 0x050E
		{
			General_error &= ~(1 << LVA_ALARM);	// Clear LVA_Alarm flag
		}

		// Turn on buzzer if in alarm state (BUZZER_ON is oscillating)
		if	(
    2f36:	85 fd       	sbrc	r24, 5
    2f38:	02 c0       	rjmp	.+4      	; 0x2f3e <main+0x1f8>
    2f3a:	86 70       	andi	r24, 0x06	; 6
			 (
			  (General_error & (1 << LVA_ALARM)) ||
			  (General_error & (1 << NO_SIGNAL)) ||
    2f3c:	31 f0       	breq	.+12     	; 0x2f4a <main+0x204>
			  (General_error & (1 << THROTTLE_HIGH)) 
			 ) && 
			  (Alarm_flags & (1 << BUZZER_ON))
    2f3e:	80 91 0c 05 	lds	r24, 0x050C
		if	(
			 (
			  (General_error & (1 << LVA_ALARM)) ||
			  (General_error & (1 << NO_SIGNAL)) ||
			  (General_error & (1 << THROTTLE_HIGH)) 
			 ) && 
    2f42:	86 ff       	sbrs	r24, 6
    2f44:	02 c0       	rjmp	.+4      	; 0x2f4a <main+0x204>
			  (Alarm_flags & (1 << BUZZER_ON))
			) 
		{
			LVA = 1;
    2f46:	29 9a       	sbi	0x05, 1	; 5
    2f48:	01 c0       	rjmp	.+2      	; 0x2f4c <main+0x206>
		}
		else 
		{
			LVA = 0;
    2f4a:	29 98       	cbi	0x05, 1	; 5

		//************************************************************
		//* Arm/disarm handling
		//************************************************************

		if (Config.ArmMode == ARMABLE)
    2f4c:	80 91 09 06 	lds	r24, 0x0609
    2f50:	81 30       	cpi	r24, 0x01	; 1
    2f52:	09 f0       	breq	.+2      	; 0x2f56 <main+0x210>
    2f54:	8f c0       	rjmp	.+286    	; 0x3074 <main+0x32e>
		{
			// Manual arm/disarm

			// Increment timer only if Launch mode on to save cycles
			Arm_timer += (uint8_t) (TCNT2 - Arm_TCNT2); // TCNT2 runs at 19.531kHz. SECOND_TIMER amount of TCNT2 is 1 second
    2f56:	50 91 b2 00 	lds	r21, 0x00B2
			Arm_TCNT2 = TCNT2;
    2f5a:	40 91 b2 00 	lds	r20, 0x00B2
    2f5e:	4a 8f       	std	Y+26, r20	; 0x1a

			// If sticks not at extremes, reset manual arm/disarm timer
			// Sticks down and centered = armed. Down and outside = disarmed
			if (
				((-ARM_TIMER_RESET_1 < RCinputs[AILERON]) && (RCinputs[AILERON] < ARM_TIMER_RESET_1)) ||
    2f60:	80 91 a1 07 	lds	r24, 0x07A1
    2f64:	90 91 a2 07 	lds	r25, 0x07A2
    2f68:	9c 01       	movw	r18, r24
    2f6a:	21 54       	subi	r18, 0x41	; 65
    2f6c:	3c 4f       	sbci	r19, 0xFC	; 252
			Arm_timer += (uint8_t) (TCNT2 - Arm_TCNT2); // TCNT2 runs at 19.531kHz. SECOND_TIMER amount of TCNT2 is 1 second
			Arm_TCNT2 = TCNT2;

			// If sticks not at extremes, reset manual arm/disarm timer
			// Sticks down and centered = armed. Down and outside = disarmed
			if (
    2f6e:	2f 37       	cpi	r18, 0x7F	; 127
    2f70:	37 40       	sbci	r19, 0x07	; 7
    2f72:	08 f4       	brcc	.+2      	; 0x2f76 <main+0x230>
    2f74:	45 c0       	rjmp	.+138    	; 0x3000 <main+0x2ba>
				((-ARM_TIMER_RESET_1 < RCinputs[AILERON]) && (RCinputs[AILERON] < ARM_TIMER_RESET_1)) ||
				((-ARM_TIMER_RESET_1 < RCinputs[ELEVATOR]) && (RCinputs[ELEVATOR] < ARM_TIMER_RESET_1)) ||
    2f76:	20 91 a3 07 	lds	r18, 0x07A3
    2f7a:	30 91 a4 07 	lds	r19, 0x07A4
    2f7e:	21 54       	subi	r18, 0x41	; 65
    2f80:	3c 4f       	sbci	r19, 0xFC	; 252
			Arm_TCNT2 = TCNT2;

			// If sticks not at extremes, reset manual arm/disarm timer
			// Sticks down and centered = armed. Down and outside = disarmed
			if (
				((-ARM_TIMER_RESET_1 < RCinputs[AILERON]) && (RCinputs[AILERON] < ARM_TIMER_RESET_1)) ||
    2f82:	2f 37       	cpi	r18, 0x7F	; 127
    2f84:	37 40       	sbci	r19, 0x07	; 7
    2f86:	e0 f1       	brcs	.+120    	; 0x3000 <main+0x2ba>
				((-ARM_TIMER_RESET_1 < RCinputs[ELEVATOR]) && (RCinputs[ELEVATOR] < ARM_TIMER_RESET_1)) ||
				((-ARM_TIMER_RESET_1 < RCinputs[RUDDER]) && (RCinputs[RUDDER] < ARM_TIMER_RESET_1)) ||
    2f88:	20 91 a5 07 	lds	r18, 0x07A5
    2f8c:	30 91 a6 07 	lds	r19, 0x07A6
    2f90:	21 54       	subi	r18, 0x41	; 65
    2f92:	3c 4f       	sbci	r19, 0xFC	; 252

			// If sticks not at extremes, reset manual arm/disarm timer
			// Sticks down and centered = armed. Down and outside = disarmed
			if (
				((-ARM_TIMER_RESET_1 < RCinputs[AILERON]) && (RCinputs[AILERON] < ARM_TIMER_RESET_1)) ||
				((-ARM_TIMER_RESET_1 < RCinputs[ELEVATOR]) && (RCinputs[ELEVATOR] < ARM_TIMER_RESET_1)) ||
    2f94:	2f 37       	cpi	r18, 0x7F	; 127
    2f96:	37 40       	sbci	r19, 0x07	; 7
    2f98:	98 f1       	brcs	.+102    	; 0x3000 <main+0x2ba>
				((-ARM_TIMER_RESET_1 < RCinputs[RUDDER]) && (RCinputs[RUDDER] < ARM_TIMER_RESET_1)) ||
    2f9a:	20 91 9d 07 	lds	r18, 0x079D
    2f9e:	30 91 9e 07 	lds	r19, 0x079E
    2fa2:	23 33       	cpi	r18, 0x33	; 51
    2fa4:	31 05       	cpc	r19, r1
    2fa6:	64 f5       	brge	.+88     	; 0x3000 <main+0x2ba>
		if (Config.ArmMode == ARMABLE)
		{
			// Manual arm/disarm

			// Increment timer only if Launch mode on to save cycles
			Arm_timer += (uint8_t) (TCNT2 - Arm_TCNT2); // TCNT2 runs at 19.531kHz. SECOND_TIMER amount of TCNT2 is 1 second
    2fa8:	2f 85       	ldd	r18, Y+15	; 0x0f
    2faa:	52 1b       	sub	r21, r18
    2fac:	c5 0e       	add	r12, r21
    2fae:	d1 1c       	adc	r13, r1
    2fb0:	e1 1c       	adc	r14, r1
    2fb2:	f1 1c       	adc	r15, r1
				Arm_timer = 0;
			}

			// If arm timer times out, the sticks must have been at extremes for ARM_TIMER seconds
			// If aileron is at min, arm the FC
			if ((Arm_timer > ARM_TIMER) && (RCinputs[AILERON] < -ARM_TIMER_RESET_1))
    2fb4:	3c e4       	ldi	r19, 0x4C	; 76
    2fb6:	c3 16       	cp	r12, r19
    2fb8:	d3 06       	cpc	r13, r19
    2fba:	e1 04       	cpc	r14, r1
    2fbc:	f1 04       	cpc	r15, r1
    2fbe:	18 f1       	brcs	.+70     	; 0x3006 <main+0x2c0>
    2fc0:	80 34       	cpi	r24, 0x40	; 64
    2fc2:	4c ef       	ldi	r20, 0xFC	; 252
    2fc4:	94 07       	cpc	r25, r20
    2fc6:	4c f4       	brge	.+18     	; 0x2fda <main+0x294>
			{
				Arm_timer = 0;
				General_error &= ~(1 << DISARMED);		// Set flags to armed (negate disarmed)
    2fc8:	80 91 0e 05 	lds	r24, 0x050E
    2fcc:	8f 7e       	andi	r24, 0xEF	; 239
    2fce:	80 93 0e 05 	sts	0x050E, r24
				CalibrateGyrosSlow();					// Calibrate gyros
    2fd2:	0e 94 b0 1d 	call	0x3b60	; 0x3b60 <CalibrateGyrosSlow>
				menu_beep(20);							// Signal that FC is ready
    2fd6:	84 e1       	ldi	r24, 0x14	; 20
    2fd8:	10 c0       	rjmp	.+32     	; 0x2ffa <main+0x2b4>

				// Force update of status screen
				Menu_mode = STATUS_TIMEOUT;
			}
			// Else, disarm the FC after DISARM_TIMER seconds if aileron at max
			else if ((Arm_timer > DISARM_TIMER) && (RCinputs[AILERON] > ARM_TIMER_RESET_1))
    2fda:	e2 ee       	ldi	r30, 0xE2	; 226
    2fdc:	ce 16       	cp	r12, r30
    2fde:	e4 ee       	ldi	r30, 0xE4	; 228
    2fe0:	de 06       	cpc	r13, r30
    2fe2:	e1 04       	cpc	r14, r1
    2fe4:	f1 04       	cpc	r15, r1
    2fe6:	78 f0       	brcs	.+30     	; 0x3006 <main+0x2c0>
    2fe8:	81 3c       	cpi	r24, 0xC1	; 193
    2fea:	93 40       	sbci	r25, 0x03	; 3
    2fec:	64 f0       	brlt	.+24     	; 0x3006 <main+0x2c0>
			{
				Arm_timer = 0;
				General_error |= (1 << DISARMED);		// Set flags to disarmed
    2fee:	80 91 0e 05 	lds	r24, 0x050E
    2ff2:	80 61       	ori	r24, 0x10	; 16
    2ff4:	80 93 0e 05 	sts	0x050E, r24
				menu_beep(1);							// Signal that FC is now disarmed
    2ff8:	81 e0       	ldi	r24, 0x01	; 1
    2ffa:	0e 94 18 27 	call	0x4e30	; 0x4e30 <menu_beep>

				// Force update of status screen
				Menu_mode = STATUS_TIMEOUT;
    2ffe:	16 e0       	ldi	r17, 0x06	; 6
    3000:	c1 2c       	mov	r12, r1
    3002:	d1 2c       	mov	r13, r1
    3004:	76 01       	movw	r14, r12
			}

			// Automatic disarm

			// Auto-disarm timer
			Disarm_timer += (uint8_t) (TCNT2 - Disarm_TCNT2);
    3006:	80 91 b2 00 	lds	r24, 0x00B2
			Disarm_TCNT2 = TCNT2;
    300a:	20 91 b2 00 	lds	r18, 0x00B2
    300e:	29 8f       	std	Y+25, r18	; 0x19

			// Reset auto-disarm count if any RX activity or set to zero, or when curently armed
			if ((Flight_flags & (1 << RxActivity)) || (Config.Disarm_timer == 0) || (General_error & (1 << DISARMED)))
    3010:	90 91 0d 05 	lds	r25, 0x050D
    3014:	90 fd       	sbrc	r25, 0
    3016:	13 c0       	rjmp	.+38     	; 0x303e <main+0x2f8>
    3018:	90 91 0a 06 	lds	r25, 0x060A
    301c:	99 23       	and	r25, r25
    301e:	79 f0       	breq	.+30     	; 0x303e <main+0x2f8>
    3020:	90 91 0e 05 	lds	r25, 0x050E
    3024:	94 fd       	sbrc	r25, 4
    3026:	0b c0       	rjmp	.+22     	; 0x303e <main+0x2f8>
			}

			// Automatic disarm

			// Auto-disarm timer
			Disarm_timer += (uint8_t) (TCNT2 - Disarm_TCNT2);
    3028:	80 1b       	sub	r24, r16
    302a:	48 0e       	add	r4, r24
    302c:	51 1c       	adc	r5, r1
				Disarm_timer = 0;
				Disarm_seconds = 0;
			}
		
			// Increment disarm timer (seconds) if armed
			if (Disarm_timer > SECOND_TIMER)
    302e:	3c e4       	ldi	r19, 0x4C	; 76
    3030:	43 16       	cp	r4, r19
    3032:	53 06       	cpc	r5, r19
    3034:	38 f0       	brcs	.+14     	; 0x3044 <main+0x2fe>
			{
				Disarm_seconds++;
    3036:	48 a1       	ldd	r20, Y+32	; 0x20
    3038:	4f 5f       	subi	r20, 0xFF	; 255
    303a:	48 a3       	std	Y+32, r20	; 0x20
    303c:	01 c0       	rjmp	.+2      	; 0x3040 <main+0x2fa>
    303e:	18 a2       	std	Y+32, r1	; 0x20
    3040:	41 2c       	mov	r4, r1
    3042:	51 2c       	mov	r5, r1
				Disarm_timer = 0;
			}

			// Auto-disarm model if timeout enabled and due
			if ((Disarm_seconds >= Config.Disarm_timer) && (Config.Disarm_timer >= 30))	
    3044:	50 91 0a 06 	lds	r21, 0x060A
    3048:	48 a1       	ldd	r20, Y+32	; 0x20
    304a:	24 2f       	mov	r18, r20
    304c:	30 e0       	ldi	r19, 0x00	; 0
    304e:	85 2f       	mov	r24, r21
    3050:	99 27       	eor	r25, r25
    3052:	87 fd       	sbrc	r24, 7
    3054:	90 95       	com	r25
    3056:	28 17       	cp	r18, r24
    3058:	39 07       	cpc	r19, r25
    305a:	a4 f0       	brlt	.+40     	; 0x3084 <main+0x33e>
    305c:	5e 31       	cpi	r21, 0x1E	; 30
    305e:	94 f0       	brlt	.+36     	; 0x3084 <main+0x33e>
			{
				// Disarm the FC
				General_error |= (1 << DISARMED);		// Set flags to disarmed
    3060:	80 91 0e 05 	lds	r24, 0x050E
    3064:	80 61       	ori	r24, 0x10	; 16
    3066:	80 93 0e 05 	sts	0x050E, r24

				// Force update of status screen
				Menu_mode = STATUS_TIMEOUT;
				menu_beep(1);							// Signal that FC is now disarmed
    306a:	81 e0       	ldi	r24, 0x01	; 1
    306c:	0e 94 18 27 	call	0x4e30	; 0x4e30 <menu_beep>
			{
				// Disarm the FC
				General_error |= (1 << DISARMED);		// Set flags to disarmed

				// Force update of status screen
				Menu_mode = STATUS_TIMEOUT;
    3070:	16 e0       	ldi	r17, 0x06	; 6
    3072:	08 c0       	rjmp	.+16     	; 0x3084 <main+0x33e>
			}
		}
		// Arm when ArmMode is OFF
		else 
		{
			General_error &= ~(1 << DISARMED);			// Set flags to armed
    3074:	80 91 0e 05 	lds	r24, 0x050E
    3078:	8f 7e       	andi	r24, 0xEF	; 239
    307a:	80 93 0e 05 	sts	0x050E, r24
    307e:	2f 85       	ldd	r18, Y+15	; 0x0f
    3080:	2a 8f       	std	Y+26, r18	; 0x1a
    3082:	09 8f       	std	Y+25, r16	; 0x19
		//************************************************************
		//* Get RC data
		//************************************************************

		// Update zeroed RC channel data
		RxGetChannels();
    3084:	0e 94 8f 38 	call	0x711e	; 0x711e <RxGetChannels>

		// Check for throttle reset
		if (MonopolarThrottle < THROTTLEIDLE)
    3088:	80 91 9d 07 	lds	r24, 0x079D
    308c:	90 91 9e 07 	lds	r25, 0x079E
    3090:	c2 97       	sbiw	r24, 0x32	; 50
    3092:	5c f4       	brge	.+22     	; 0x30aa <main+0x364>
		{
			// Clear throttle high error
			General_error &= ~(1 << THROTTLE_HIGH);	
    3094:	80 91 0e 05 	lds	r24, 0x050E
    3098:	8d 7f       	andi	r24, 0xFD	; 253
    309a:	80 93 0e 05 	sts	0x050E, r24

			// Reset I-terms at throttle cut. Using memset saves code space
			memset(&IntegralGyro[P1][ROLL], 0, sizeof(int32_t) * 6); 
    309e:	ed e6       	ldi	r30, 0x6D	; 109
    30a0:	f7 e0       	ldi	r31, 0x07	; 7
    30a2:	28 e1       	ldi	r18, 0x18	; 24
    30a4:	11 92       	st	Z+, r1
    30a6:	2a 95       	dec	r18
    30a8:	e9 f7       	brne	.-6      	; 0x30a4 <main+0x35e>
		//* by the Config.TransitionSpeed setting.
		//* The transition will hold at P1n position if directed to
		//************************************************************

		// P2 transition point hard-coded to 50% above center
		if 	(RCinputs[Config.FlightChan] > 500)
    30aa:	e0 91 aa 05 	lds	r30, 0x05AA
    30ae:	ee 0f       	add	r30, r30
    30b0:	ff 0b       	sbc	r31, r31
    30b2:	e1 56       	subi	r30, 0x61	; 97
    30b4:	f8 4f       	sbci	r31, 0xF8	; 248
    30b6:	80 81       	ld	r24, Z
    30b8:	91 81       	ldd	r25, Z+1	; 0x01
    30ba:	85 3f       	cpi	r24, 0xF5	; 245
    30bc:	31 e0       	ldi	r19, 0x01	; 1
    30be:	93 07       	cpc	r25, r19
    30c0:	24 f0       	brlt	.+8      	; 0x30ca <main+0x384>
		{
			Config.FlightSel = 2;			// Flight mode 2 (P2)
    30c2:	42 e0       	ldi	r20, 0x02	; 2
    30c4:	40 93 33 07 	sts	0x0733, r20
    30c8:	09 c0       	rjmp	.+18     	; 0x30dc <main+0x396>
		}
		// P1.n transition point hard-coded to 50% below center
		else if (RCinputs[Config.FlightChan] > -500)
    30ca:	8d 30       	cpi	r24, 0x0D	; 13
    30cc:	9e 4f       	sbci	r25, 0xFE	; 254
    30ce:	24 f0       	brlt	.+8      	; 0x30d8 <main+0x392>
		{
			Config.FlightSel = 1;			// Flight mode 1 (P1.n)
    30d0:	81 e0       	ldi	r24, 0x01	; 1
    30d2:	80 93 33 07 	sts	0x0733, r24
    30d6:	02 c0       	rjmp	.+4      	; 0x30dc <main+0x396>
		}
		// Otherwise the default is P1
		else
		{
			Config.FlightSel = 0;			// Flight mode 0 (P1)
    30d8:	10 92 33 07 	sts	0x0733, r1
		//* For the first startup, set up the right state for the current setup
		//* Check for initial startup - the only time that old_flight should be "3".
		//* Also, re-initialise if the transition setting is changed
		//************************************************************

		if ((old_flight == 3) || (old_trans_mode != Config.TransitionSpeed))
    30dc:	2f 8d       	ldd	r18, Y+31	; 0x1f
    30de:	23 30       	cpi	r18, 0x03	; 3
    30e0:	29 f0       	breq	.+10     	; 0x30ec <main+0x3a6>
    30e2:	80 91 af 05 	lds	r24, 0x05AF
    30e6:	3e 8d       	ldd	r19, Y+30	; 0x1e
    30e8:	38 17       	cp	r19, r24
    30ea:	49 f1       	breq	.+82     	; 0x313e <main+0x3f8>
		{
			switch(Config.FlightSel)
    30ec:	40 91 33 07 	lds	r20, 0x0733
    30f0:	4f 8f       	std	Y+31, r20	; 0x1f
    30f2:	41 30       	cpi	r20, 0x01	; 1
    30f4:	59 f0       	breq	.+22     	; 0x310c <main+0x3c6>
    30f6:	42 30       	cpi	r20, 0x02	; 2
    30f8:	b1 f0       	breq	.+44     	; 0x3126 <main+0x3e0>
    30fa:	41 11       	cpse	r20, r1
    30fc:	1d c0       	rjmp	.+58     	; 0x3138 <main+0x3f2>
			{
				case 0:
					Transition_state = TRANS_P1;
    30fe:	10 92 0f 05 	sts	0x050F, r1
					transition_counter = 0;
    3102:	10 92 11 05 	sts	0x0511, r1
    3106:	10 92 10 05 	sts	0x0510, r1
					break;
    310a:	16 c0       	rjmp	.+44     	; 0x3138 <main+0x3f2>
				case 1:
					Transition_state = TRANS_P1n;
    310c:	84 e0       	ldi	r24, 0x04	; 4
    310e:	80 93 0f 05 	sts	0x050F, r24
					transition_counter = Config.Transition_P1n; // Set transition point to the user-selected point
    3112:	80 91 b0 05 	lds	r24, 0x05B0
    3116:	99 27       	eor	r25, r25
    3118:	87 fd       	sbrc	r24, 7
    311a:	90 95       	com	r25
    311c:	90 93 11 05 	sts	0x0511, r25
    3120:	80 93 10 05 	sts	0x0510, r24
					break;
    3124:	09 c0       	rjmp	.+18     	; 0x3138 <main+0x3f2>
				case 2:
					Transition_state = TRANS_P2;
    3126:	99 e0       	ldi	r25, 0x09	; 9
    3128:	90 93 0f 05 	sts	0x050F, r25
					transition_counter = 100;
    312c:	e4 e6       	ldi	r30, 0x64	; 100
    312e:	f0 e0       	ldi	r31, 0x00	; 0
    3130:	f0 93 11 05 	sts	0x0511, r31
    3134:	e0 93 10 05 	sts	0x0510, r30
					break;
				default:
					break;
			}		 
			old_flight = Config.FlightSel;
			old_trans_mode = Config.TransitionSpeed;
    3138:	20 91 af 05 	lds	r18, 0x05AF
    313c:	2e 8f       	std	Y+30, r18	; 0x1e
		//************************************************************
		//* Transition state handling
		//************************************************************

		// Update timed transition when changing flight modes
		if (Config.FlightSel != old_flight)
    313e:	00 91 33 07 	lds	r16, 0x0733
    3142:	21 e0       	ldi	r18, 0x01	; 1
    3144:	3f 8d       	ldd	r19, Y+31	; 0x1f
    3146:	03 13       	cpse	r16, r19
    3148:	01 c0       	rjmp	.+2      	; 0x314c <main+0x406>
    314a:	20 e0       	ldi	r18, 0x00	; 0
			TransitionUpdated = true;
		}

		// Always in the TRANSITIONING state when Config.TransitionSpeed is 0
		// This prevents state chanegs when controlled by a channel
		if (Config.TransitionSpeed == 0)
    314c:	30 91 af 05 	lds	r19, 0x05AF
    3150:	31 11       	cpse	r19, r1
    3152:	03 c0       	rjmp	.+6      	; 0x315a <main+0x414>
		{
			Transition_state = TRANSITIONING;
    3154:	45 e0       	ldi	r20, 0x05	; 5
    3156:	40 93 0f 05 	sts	0x050F, r20
		}

		// Update transition timer
		Transition_timeout += (uint8_t) (TCNT2 - Transition_TCNT2);
    315a:	80 91 b2 00 	lds	r24, 0x00B2
    315e:	4e 89       	ldd	r20, Y+22	; 0x16
    3160:	84 1b       	sub	r24, r20
    3162:	28 0e       	add	r2, r24
    3164:	31 1c       	adc	r3, r1
		Transition_TCNT2 = TCNT2;
    3166:	40 91 b2 00 	lds	r20, 0x00B2
    316a:	4e 8b       	std	Y+22, r20	; 0x16

		// Update transition state change when control value or flight mode changes
		if (TransitionUpdated)
    316c:	22 23       	and	r18, r18
    316e:	99 f0       	breq	.+38     	; 0x3196 <main+0x450>
		{
			// Update transition state from matrix
			Transition_state = (uint8_t)pgm_read_byte(&Trans_Matrix[Config.FlightSel][old_flight]);
    3170:	80 2f       	mov	r24, r16
    3172:	99 27       	eor	r25, r25
    3174:	87 fd       	sbrc	r24, 7
    3176:	90 95       	com	r25
    3178:	fc 01       	movw	r30, r24
    317a:	ee 0f       	add	r30, r30
    317c:	ff 1f       	adc	r31, r31
    317e:	e8 0f       	add	r30, r24
    3180:	f9 1f       	adc	r31, r25
    3182:	4f 8d       	ldd	r20, Y+31	; 0x1f
    3184:	e4 0f       	add	r30, r20
    3186:	f1 1d       	adc	r31, r1
    3188:	47 fd       	sbrc	r20, 7
    318a:	fa 95       	dec	r31
    318c:	ec 5f       	subi	r30, 0xFC	; 252
    318e:	fe 4f       	sbci	r31, 0xFE	; 254
    3190:	e4 91       	lpm	r30, Z
    3192:	e0 93 0f 05 	sts	0x050F, r30
		}

		// Update state, values and transition_counter every Config.TransitionSpeed if not zero. 195 = 10ms
		if (((Config.TransitionSpeed != 0) && (Transition_timeout > (TRANSITION_TIMER * Config.TransitionSpeed))) ||
    3196:	33 23       	and	r19, r19
    3198:	39 f0       	breq	.+14     	; 0x31a8 <main+0x462>
    319a:	43 ec       	ldi	r20, 0xC3	; 195
    319c:	34 03       	mulsu	r19, r20
    319e:	c0 01       	movw	r24, r0
    31a0:	11 24       	eor	r1, r1
    31a2:	82 15       	cp	r24, r2
    31a4:	93 05       	cpc	r25, r3
    31a6:	18 f0       	brcs	.+6      	; 0x31ae <main+0x468>
    31a8:	22 23       	and	r18, r18
    31aa:	09 f4       	brne	.+2      	; 0x31ae <main+0x468>
    31ac:	a9 c0       	rjmp	.+338    	; 0x3300 <main+0x5ba>
		{
			Transition_timeout = 0;
			TransitionUpdated = false;

			// Fixed, end-point states
			if (Transition_state == TRANS_P1)
    31ae:	80 91 0f 05 	lds	r24, 0x050F
    31b2:	81 11       	cpse	r24, r1
    31b4:	05 c0       	rjmp	.+10     	; 0x31c0 <main+0x47a>
			{
				transition_counter = 0;
    31b6:	10 92 11 05 	sts	0x0511, r1
    31ba:	10 92 10 05 	sts	0x0510, r1
    31be:	22 c0       	rjmp	.+68     	; 0x3204 <main+0x4be>
			}
			else if (Transition_state == TRANS_P1n)
    31c0:	84 30       	cpi	r24, 0x04	; 4
    31c2:	31 f4       	brne	.+12     	; 0x31d0 <main+0x48a>
			{
				transition_counter = Config.Transition_P1n;
    31c4:	80 91 b0 05 	lds	r24, 0x05B0
    31c8:	99 27       	eor	r25, r25
    31ca:	87 fd       	sbrc	r24, 7
    31cc:	90 95       	com	r25
    31ce:	04 c0       	rjmp	.+8      	; 0x31d8 <main+0x492>
			}
			else if (Transition_state == TRANS_P2)
    31d0:	89 30       	cpi	r24, 0x09	; 9
    31d2:	39 f4       	brne	.+14     	; 0x31e2 <main+0x49c>
			{
				transition_counter = 100;
    31d4:	84 e6       	ldi	r24, 0x64	; 100
    31d6:	90 e0       	ldi	r25, 0x00	; 0
    31d8:	90 93 11 05 	sts	0x0511, r25
    31dc:	80 93 10 05 	sts	0x0510, r24
    31e0:	11 c0       	rjmp	.+34     	; 0x3204 <main+0x4be>
			}		

			// Over-ride users requesting silly states
			// If transition_counter is above P1.n but request is P1 to P1.n or 
			// if transition_counter is below P1.n but request is P2 to P1.n...
			if ((Transition_state == TRANS_P1_to_P1n_start) && (transition_counter > Config.Transition_P1n))
    31e2:	81 30       	cpi	r24, 0x01	; 1
    31e4:	79 f4       	brne	.+30     	; 0x3204 <main+0x4be>
    31e6:	80 91 b0 05 	lds	r24, 0x05B0
    31ea:	99 27       	eor	r25, r25
    31ec:	87 fd       	sbrc	r24, 7
    31ee:	90 95       	com	r25
    31f0:	20 91 10 05 	lds	r18, 0x0510
    31f4:	30 91 11 05 	lds	r19, 0x0511
    31f8:	82 17       	cp	r24, r18
    31fa:	93 07       	cpc	r25, r19
    31fc:	1c f4       	brge	.+6      	; 0x3204 <main+0x4be>
			{
				// Reset state to a more appropriate one
				Transition_state = TRANS_P2_to_P1n_start;
    31fe:	98 e0       	ldi	r25, 0x08	; 8
    3200:	90 93 0f 05 	sts	0x050F, r25
			}

			if ((Transition_state == TRANS_P2_to_P1n_start) && (transition_counter < Config.Transition_P1n))
    3204:	80 91 0f 05 	lds	r24, 0x050F
    3208:	88 30       	cpi	r24, 0x08	; 8
    320a:	79 f4       	brne	.+30     	; 0x322a <main+0x4e4>
    320c:	80 91 b0 05 	lds	r24, 0x05B0
    3210:	99 27       	eor	r25, r25
    3212:	87 fd       	sbrc	r24, 7
    3214:	90 95       	com	r25
    3216:	20 91 10 05 	lds	r18, 0x0510
    321a:	30 91 11 05 	lds	r19, 0x0511
    321e:	28 17       	cp	r18, r24
    3220:	39 07       	cpc	r19, r25
    3222:	1c f4       	brge	.+6      	; 0x322a <main+0x4e4>
			{
				// Reset state to a more appropriate one
				Transition_state = TRANS_P1_to_P1n_start;
    3224:	81 e0       	ldi	r24, 0x01	; 1
    3226:	80 93 0f 05 	sts	0x050F, r24
			}

			// Handle timed transition towards P1
			if ((Transition_state == TRANS_P1n_to_P1_start) || (Transition_state == TRANS_P2_to_P1_start))
    322a:	80 91 0f 05 	lds	r24, 0x050F
    322e:	8b 7f       	andi	r24, 0xFB	; 251
    3230:	82 30       	cpi	r24, 0x02	; 2
    3232:	91 f4       	brne	.+36     	; 0x3258 <main+0x512>
			{
				transition_counter--;
    3234:	80 91 10 05 	lds	r24, 0x0510
    3238:	90 91 11 05 	lds	r25, 0x0511
    323c:	01 97       	sbiw	r24, 0x01	; 1
    323e:	90 93 11 05 	sts	0x0511, r25
    3242:	80 93 10 05 	sts	0x0510, r24
				if (transition_counter <= 0)
    3246:	18 16       	cp	r1, r24
    3248:	19 06       	cpc	r1, r25
    324a:	34 f0       	brlt	.+12     	; 0x3258 <main+0x512>
				{
					transition_counter = 0;
    324c:	10 92 11 05 	sts	0x0511, r1
    3250:	10 92 10 05 	sts	0x0510, r1
					Transition_state = TRANS_P1;
    3254:	10 92 0f 05 	sts	0x050F, r1
				}
			}

			// Handle timed transition between P1.n and P1
			if (Transition_state == TRANS_P1_to_P1n_start)
    3258:	80 91 0f 05 	lds	r24, 0x050F
    325c:	81 30       	cpi	r24, 0x01	; 1
    325e:	c1 f4       	brne	.+48     	; 0x3290 <main+0x54a>
			{
				transition_counter++;
    3260:	80 91 10 05 	lds	r24, 0x0510
    3264:	90 91 11 05 	lds	r25, 0x0511
    3268:	01 96       	adiw	r24, 0x01	; 1
    326a:	90 93 11 05 	sts	0x0511, r25
    326e:	80 93 10 05 	sts	0x0510, r24
				if (transition_counter >= Config.Transition_P1n)
    3272:	20 91 b0 05 	lds	r18, 0x05B0
    3276:	33 27       	eor	r19, r19
    3278:	27 fd       	sbrc	r18, 7
    327a:	30 95       	com	r19
    327c:	82 17       	cp	r24, r18
    327e:	93 07       	cpc	r25, r19
    3280:	3c f0       	brlt	.+14     	; 0x3290 <main+0x54a>
				{
					transition_counter = Config.Transition_P1n;
    3282:	30 93 11 05 	sts	0x0511, r19
    3286:	20 93 10 05 	sts	0x0510, r18
					Transition_state = TRANS_P1n;
    328a:	e4 e0       	ldi	r30, 0x04	; 4
    328c:	e0 93 0f 05 	sts	0x050F, r30
				}
			}			
				
			// Handle timed transition between P1.n and P2
			if (Transition_state == TRANS_P2_to_P1n_start)
    3290:	80 91 0f 05 	lds	r24, 0x050F
    3294:	88 30       	cpi	r24, 0x08	; 8
    3296:	c1 f4       	brne	.+48     	; 0x32c8 <main+0x582>
			{
				transition_counter--;
    3298:	80 91 10 05 	lds	r24, 0x0510
    329c:	90 91 11 05 	lds	r25, 0x0511
    32a0:	01 97       	sbiw	r24, 0x01	; 1
    32a2:	90 93 11 05 	sts	0x0511, r25
    32a6:	80 93 10 05 	sts	0x0510, r24
				if (transition_counter <= Config.Transition_P1n)
    32aa:	20 91 b0 05 	lds	r18, 0x05B0
    32ae:	33 27       	eor	r19, r19
    32b0:	27 fd       	sbrc	r18, 7
    32b2:	30 95       	com	r19
    32b4:	28 17       	cp	r18, r24
    32b6:	39 07       	cpc	r19, r25
    32b8:	3c f0       	brlt	.+14     	; 0x32c8 <main+0x582>
				{
					transition_counter = Config.Transition_P1n;
    32ba:	30 93 11 05 	sts	0x0511, r19
    32be:	20 93 10 05 	sts	0x0510, r18
					Transition_state = TRANS_P1n;
    32c2:	f4 e0       	ldi	r31, 0x04	; 4
    32c4:	f0 93 0f 05 	sts	0x050F, r31
				}
			}

			// Handle timed transition towards P2
			if ((Transition_state == TRANS_P1n_to_P2_start) || (Transition_state == TRANS_P1_to_P2_start))
    32c8:	80 91 0f 05 	lds	r24, 0x050F
    32cc:	8b 7f       	andi	r24, 0xFB	; 251
    32ce:	83 30       	cpi	r24, 0x03	; 3
    32d0:	a9 f4       	brne	.+42     	; 0x32fc <main+0x5b6>
			{
				transition_counter++;
    32d2:	80 91 10 05 	lds	r24, 0x0510
    32d6:	90 91 11 05 	lds	r25, 0x0511
    32da:	01 96       	adiw	r24, 0x01	; 1
    32dc:	90 93 11 05 	sts	0x0511, r25
    32e0:	80 93 10 05 	sts	0x0510, r24
				if (transition_counter >= 100)
    32e4:	84 36       	cpi	r24, 0x64	; 100
    32e6:	91 05       	cpc	r25, r1
    32e8:	4c f0       	brlt	.+18     	; 0x32fc <main+0x5b6>
				{
					transition_counter = 100;
    32ea:	24 e6       	ldi	r18, 0x64	; 100
    32ec:	30 e0       	ldi	r19, 0x00	; 0
    32ee:	30 93 11 05 	sts	0x0511, r19
    32f2:	20 93 10 05 	sts	0x0510, r18
					Transition_state = TRANS_P2;
    32f6:	39 e0       	ldi	r19, 0x09	; 9
    32f8:	30 93 0f 05 	sts	0x050F, r19
		// Update state, values and transition_counter every Config.TransitionSpeed if not zero. 195 = 10ms
		if (((Config.TransitionSpeed != 0) && (Transition_timeout > (TRANSITION_TIMER * Config.TransitionSpeed))) ||
			// Update immediately
			TransitionUpdated)
		{
			Transition_timeout = 0;
    32fc:	21 2c       	mov	r2, r1
    32fe:	31 2c       	mov	r3, r1
		//************************************************************
		//* Remaining loop tasks
		//************************************************************

		// Read sensors
		ReadGyros();
    3300:	0e 94 1d 1d 	call	0x3a3a	; 0x3a3a <ReadGyros>
		ReadAcc();	
    3304:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <ReadAcc>

		// ticker_16 is incremented at 2.5MHz (400ns) - max 26.2ms
		ticker_16 = (uint16_t)((uint16_t)TCNT1 - LoopTCNT1);	
    3308:	80 91 84 00 	lds	r24, 0x0084
    330c:	90 91 85 00 	lds	r25, 0x0085
    3310:	28 89       	ldd	r18, Y+16	; 0x10
    3312:	39 89       	ldd	r19, Y+17	; 0x11
    3314:	82 1b       	sub	r24, r18
    3316:	93 0b       	sbc	r25, r19
		LoopTCNT1 = TCNT1;	
    3318:	20 91 84 00 	lds	r18, 0x0084
    331c:	30 91 85 00 	lds	r19, 0x0085
    3320:	39 8b       	std	Y+17, r19	; 0x11
    3322:	28 8b       	std	Y+16, r18	; 0x10

		getEstimatedAttitude(ticker_16); 
    3324:	0e 94 99 1e 	call	0x3d32	; 0x3d32 <getEstimatedAttitude>

		// Calculate PID
		Calculate_PID();
    3328:	0e 94 b0 34 	call	0x6960	; 0x6960 <Calculate_PID>

		// Calculate mix
		ProcessMixer();
    332c:	0e 94 88 2e 	call	0x5d10	; 0x5d10 <ProcessMixer>

		// Transfer Config.Channel[i].value data to ServoOut[i] and check limits
		UpdateServos();
    3330:	0e 94 34 2e 	call	0x5c68	; 0x5c68 <UpdateServos>
		//************************************************************
		//* RC and servo timers
		//************************************************************

		// Work out the current RC rate by measuring between incoming RC packets
		RC_Rate_Timer += (uint16_t) (TCNT1 - RC_Rate_TCNT1);
    3334:	80 91 84 00 	lds	r24, 0x0084
    3338:	90 91 85 00 	lds	r25, 0x0085
    333c:	2c 89       	ldd	r18, Y+20	; 0x14
    333e:	3d 89       	ldd	r19, Y+21	; 0x15
    3340:	82 1b       	sub	r24, r18
    3342:	93 0b       	sbc	r25, r19
    3344:	88 0e       	add	r8, r24
    3346:	99 1e       	adc	r9, r25
    3348:	a1 1c       	adc	r10, r1
    334a:	b1 1c       	adc	r11, r1
		RC_Rate_TCNT1 = TCNT1;
    334c:	20 91 84 00 	lds	r18, 0x0084
    3350:	30 91 85 00 	lds	r19, 0x0085
    3354:	3d 8b       	std	Y+21, r19	; 0x15
    3356:	2c 8b       	std	Y+20, r18	; 0x14

		// Sets the desired SERVO_RATE by flagging ServoTick when PWM due
		// Servo_Rate increments at 19.531 kHz, in loop cycle chunks
		Servo_Rate += (uint8_t) (TCNT2 - ServoRate_TCNT2);
    3358:	80 91 b2 00 	lds	r24, 0x00B2
    335c:	3d 8d       	ldd	r19, Y+29	; 0x1d
    335e:	83 1b       	sub	r24, r19
    3360:	68 0e       	add	r6, r24
    3362:	71 1c       	adc	r7, r1
		ServoRate_TCNT2 = TCNT2;
    3364:	40 91 b2 00 	lds	r20, 0x00B2
    3368:	4d 8f       	std	Y+29, r20	; 0x1d
		
		// Signal RC overdue after RC_OVERDUE time (500ms)
		// RC_Timeout increments at 19.531 kHz, in loop cycle chunks
		RC_Timeout += (uint8_t) (TCNT2 - Servo_TCNT2);
    336a:	80 91 b2 00 	lds	r24, 0x00B2
    336e:	2c 8d       	ldd	r18, Y+28	; 0x1c
    3370:	82 1b       	sub	r24, r18
    3372:	2e 81       	ldd	r18, Y+6	; 0x06
    3374:	3f 81       	ldd	r19, Y+7	; 0x07
    3376:	28 0f       	add	r18, r24
    3378:	31 1d       	adc	r19, r1
    337a:	3f 83       	std	Y+7, r19	; 0x07
    337c:	2e 83       	std	Y+6, r18	; 0x06
		Servo_TCNT2 = TCNT2;
    337e:	30 91 b2 00 	lds	r19, 0x00B2
    3382:	3c 8f       	std	Y+28, r19	; 0x1c
		//************************************************************
		//* Check prescence of RC
		//************************************************************

		// Check to see if the RC input is overdue (500ms)
		if (RC_Timeout > RC_OVERDUE)
    3384:	2e 81       	ldd	r18, Y+6	; 0x06
    3386:	3f 81       	ldd	r19, Y+7	; 0x07
    3388:	26 32       	cpi	r18, 0x26	; 38
    338a:	36 42       	sbci	r19, 0x26	; 38
    338c:	10 f0       	brcs	.+4      	; 0x3392 <main+0x64c>
		{
			Overdue = true;	// This results in a "No Signal" error
    338e:	21 e0       	ldi	r18, 0x01	; 1
    3390:	2a 87       	std	Y+10, r18	; 0x0a
		//************************************************************
		//* Measure incoming RC rate
		//************************************************************		

		// RC input received
		if (Interrupted)
    3392:	80 91 3e 07 	lds	r24, 0x073E
    3396:	88 23       	and	r24, r24
    3398:	81 f0       	breq	.+32     	; 0x33ba <main+0x674>
			RC_Timeout = 0;					// Reset RC timeout
			Overdue = false;				// And no longer overdue

			// Measure incoming RC rate. Threshold is 60Hz.
			// Slow RC rates are synched on every pulse, faster ones are limited to 50Hz
			if (RC_Rate_Timer > SLOW_RC_RATE)
    339a:	31 e0       	ldi	r19, 0x01	; 1
    339c:	3c 87       	std	Y+12, r19	; 0x0c
    339e:	44 ec       	ldi	r20, 0xC4	; 196
    33a0:	84 16       	cp	r8, r20
    33a2:	42 ea       	ldi	r20, 0xA2	; 162
    33a4:	94 06       	cpc	r9, r20
    33a6:	a1 04       	cpc	r10, r1
    33a8:	b1 04       	cpc	r11, r1
    33aa:	08 f4       	brcc	.+2      	; 0x33ae <main+0x668>
    33ac:	1c 86       	std	Y+12, r1	; 0x0c
		//************************************************************		

		// RC input received
		if (Interrupted)
		{
			RC_Timeout = 0;					// Reset RC timeout
    33ae:	1f 82       	std	Y+7, r1	; 0x07
    33b0:	1e 82       	std	Y+6, r1	; 0x06
			else
			{
				SlowRC = false;
			}

			RC_Rate_Timer = 0;
    33b2:	81 2c       	mov	r8, r1
    33b4:	91 2c       	mov	r9, r1
    33b6:	54 01       	movw	r10, r8

		// RC input received
		if (Interrupted)
		{
			RC_Timeout = 0;					// Reset RC timeout
			Overdue = false;				// And no longer overdue
    33b8:	1a 86       	std	Y+10, r1	; 0x0a
		//* Manage desired output update rate when limited by
		//* the PWM rate set to "Normal"
		//************************************************************

		// Flag update required based on SERVO_RATE_LOW
		if (Servo_Rate > SERVO_RATE_LOW)
    33ba:	87 e8       	ldi	r24, 0x87	; 135
    33bc:	68 16       	cp	r6, r24
    33be:	81 e0       	ldi	r24, 0x01	; 1
    33c0:	78 06       	cpc	r7, r24
    33c2:	20 f0       	brcs	.+8      	; 0x33cc <main+0x686>
		{
			ServoTick = true; // Slow device is ready for output generation
			Servo_Rate = 0;
    33c4:	61 2c       	mov	r6, r1
    33c6:	71 2c       	mov	r7, r1
		//************************************************************

		// Flag update required based on SERVO_RATE_LOW
		if (Servo_Rate > SERVO_RATE_LOW)
		{
			ServoTick = true; // Slow device is ready for output generation
    33c8:	21 e0       	ldi	r18, 0x01	; 1
    33ca:	2b 87       	std	Y+11, r18	; 0x0b
		//* Synchronise output update rate to the RC interrupts
		//* based on a specific set of conditions
		//************************************************************

		// Cases where we are ready to output
		if	(Interrupted &&						// Only when interrupted (RC receive completed)
    33cc:	80 91 3e 07 	lds	r24, 0x073E
    33d0:	88 23       	and	r24, r24
    33d2:	91 f0       	breq	.+36     	; 0x33f8 <main+0x6b2>
    33d4:	3c 85       	ldd	r19, Y+12	; 0x0c
    33d6:	31 11       	cpse	r19, r1
    33d8:	07 c0       	rjmp	.+14     	; 0x33e8 <main+0x6a2>
				(
				  (SlowRC) || 					// Plan A (Run as fast as the incoming RC if slow RC detected)
    33da:	4b 85       	ldd	r20, Y+11	; 0x0b
    33dc:	41 11       	cpse	r20, r1
    33de:	04 c0       	rjmp	.+8      	; 0x33e8 <main+0x6a2>
				  (ServoTick && !SlowRC) ||		// Plan B (Run no faster than the preset rate (ServoTick) if fast RC detected)
    33e0:	80 91 0c 06 	lds	r24, 0x060C
    33e4:	81 30       	cpi	r24, 0x01	; 1
    33e6:	41 f4       	brne	.+16     	; 0x33f8 <main+0x6b2>
				  (Config.Servo_rate == HIGH) 	// Plan C (Run as fast as the incoming RC if in HIGH mode)
				)
			)
		{
			Interrupted = false;				// Reset interrupted flag
    33e8:	10 92 3e 07 	sts	0x073E, r1
			ServoTick = false;					// Reset output requested flag
			Servo_Rate = 0;						// Reset servo rate timer
			output_servo_ppm();					// Output servo signal
    33ec:	0e 94 68 39 	call	0x72d0	; 0x72d0 <output_servo_ppm>
				)
			)
		{
			Interrupted = false;				// Reset interrupted flag
			ServoTick = false;					// Reset output requested flag
			Servo_Rate = 0;						// Reset servo rate timer
    33f0:	61 2c       	mov	r6, r1
    33f2:	71 2c       	mov	r7, r1
				  (Config.Servo_rate == HIGH) 	// Plan C (Run as fast as the incoming RC if in HIGH mode)
				)
			)
		{
			Interrupted = false;				// Reset interrupted flag
			ServoTick = false;					// Reset output requested flag
    33f4:	1b 86       	std	Y+11, r1	; 0x0b
			Servo_Rate = 0;						// Reset servo rate timer
			output_servo_ppm();					// Output servo signal
    33f6:	02 c0       	rjmp	.+4      	; 0x33fc <main+0x6b6>
		}

		// Not ready for output, so cancel the current interrupt and wait for the next one
		else
		{
			Interrupted = false;				// Reset interrupted flag
    33f8:	10 92 3e 07 	sts	0x073E, r1

		//************************************************************
		//* Increment system time
		//************************************************************

		ticker_32 += ((uint16_t)TCNT1 - LoopStartTCNT1);	// Update system time
    33fc:	20 91 84 00 	lds	r18, 0x0084
    3400:	30 91 85 00 	lds	r19, 0x0085
    3404:	8a 89       	ldd	r24, Y+18	; 0x12
    3406:	9b 89       	ldd	r25, Y+19	; 0x13
    3408:	28 1b       	sub	r18, r24
    340a:	39 0b       	sbc	r19, r25
    340c:	80 91 5c 05 	lds	r24, 0x055C
    3410:	90 91 5d 05 	lds	r25, 0x055D
    3414:	a0 91 5e 05 	lds	r26, 0x055E
    3418:	b0 91 5f 05 	lds	r27, 0x055F
    341c:	82 0f       	add	r24, r18
    341e:	93 1f       	adc	r25, r19
    3420:	a1 1d       	adc	r26, r1
    3422:	b1 1d       	adc	r27, r1
    3424:	80 93 5c 05 	sts	0x055C, r24
    3428:	90 93 5d 05 	sts	0x055D, r25
    342c:	a0 93 5e 05 	sts	0x055E, r26
    3430:	b0 93 5f 05 	sts	0x055F, r27
		LoopStartTCNT1 = (uint16_t)TCNT1;					// Measure system time from here
    3434:	20 91 84 00 	lds	r18, 0x0084
    3438:	30 91 85 00 	lds	r19, 0x0085
    343c:	3b 8b       	std	Y+19, r19	; 0x13
    343e:	2a 8b       	std	Y+18, r18	; 0x12
		//************************************************************
		//* Transition state handling
		//************************************************************

		// Update timed transition when changing flight modes
		if (Config.FlightSel != old_flight)
    3440:	0f 8f       	std	Y+31, r16	; 0x1f
		//************************************************************

		ticker_32 += ((uint16_t)TCNT1 - LoopStartTCNT1);	// Update system time
		LoopStartTCNT1 = (uint16_t)TCNT1;					// Measure system time from here

	} // main loop
    3442:	3a 8d       	ldd	r19, Y+26	; 0x1a
    3444:	3f 87       	std	Y+15, r19	; 0x0f
    3446:	09 8d       	ldd	r16, Y+25	; 0x19
    3448:	b3 cc       	rjmp	.-1690   	; 0x2db0 <main+0x6a>

0000344a <spiwrite>:
const uint8_t pagemap[] PROGMEM 		= { 7, 6, 5, 4, 3, 2, 1, 0 }; 
const uint8_t lcd_commmands[] PROGMEM	= { 0xA2,0xA0,0x40,0xA6,0xEE,0xC8,0x2C,0x2E,0x2F,0x24,0xAC,0x00,0xF8,0x00};	// LCD command string

// Software SPI write
inline void spiwrite(uint8_t c) 
{
    344a:	0f 93       	push	r16
    344c:	1f 93       	push	r17
    344e:	cf 93       	push	r28
    3450:	df 93       	push	r29
    3452:	c7 e0       	ldi	r28, 0x07	; 7
    3454:	d0 e0       	ldi	r29, 0x00	; 0
	int8_t i;
	for (i=7; i>=0; i--) 
	{
		LCD_SCL = 0;
		if (c & (1 << (i)))		// Bit set?
    3456:	08 2f       	mov	r16, r24
    3458:	10 e0       	ldi	r17, 0x00	; 0
inline void spiwrite(uint8_t c) 
{
	int8_t i;
	for (i=7; i>=0; i--) 
	{
		LCD_SCL = 0;
    345a:	5c 98       	cbi	0x0b, 4	; 11
		if (c & (1 << (i)))		// Bit set?
    345c:	c8 01       	movw	r24, r16
    345e:	0c 2e       	mov	r0, r28
    3460:	02 c0       	rjmp	.+4      	; 0x3466 <spiwrite+0x1c>
    3462:	95 95       	asr	r25
    3464:	87 95       	ror	r24
    3466:	0a 94       	dec	r0
    3468:	e2 f7       	brpl	.-8      	; 0x3462 <spiwrite+0x18>
    346a:	80 ff       	sbrs	r24, 0
    346c:	02 c0       	rjmp	.+4      	; 0x3472 <spiwrite+0x28>
		{
			LCD_SI = 1;
    346e:	59 9a       	sbi	0x0b, 1	; 11
    3470:	01 c0       	rjmp	.+2      	; 0x3474 <spiwrite+0x2a>
			glcd_delay();
			LCD_SCL = 1;
		}
		else					// Bit clear?
		{
			LCD_SI = 0;
    3472:	59 98       	cbi	0x0b, 1	; 11
			glcd_delay();
    3474:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <glcd_delay>
			LCD_SCL = 1;
    3478:	5c 9a       	sbi	0x0b, 4	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    347a:	86 e0       	ldi	r24, 0x06	; 6
    347c:	8a 95       	dec	r24
    347e:	f1 f7       	brne	.-4      	; 0x347c <spiwrite+0x32>
    3480:	00 c0       	rjmp	.+0      	; 0x3482 <spiwrite+0x38>
    3482:	21 97       	sbiw	r28, 0x01	; 1
    3484:	50 f7       	brcc	.-44     	; 0x345a <spiwrite+0x10>
		}
		_delay_us(1);
	}
}
    3486:	df 91       	pop	r29
    3488:	cf 91       	pop	r28
    348a:	1f 91       	pop	r17
    348c:	0f 91       	pop	r16
    348e:	08 95       	ret

00003490 <st7565_command>:

// Send command to LCD
void st7565_command(uint8_t c) 
{
	LCD_A0 = 0;
    3490:	5f 98       	cbi	0x0b, 7	; 11
	spiwrite(c);
    3492:	0e 94 25 1a 	call	0x344a	; 0x344a <spiwrite>
    3496:	08 95       	ret

00003498 <st7565_data>:
}

// Send data to LCD
void st7565_data(uint8_t c) 
{
	LCD_A0 = 1;
    3498:	5f 9a       	sbi	0x0b, 7	; 11
	spiwrite(c);
    349a:	0e 94 25 1a 	call	0x344a	; 0x344a <spiwrite>
    349e:	08 95       	ret

000034a0 <st7565_init>:
}

// Initialise LCD
void st7565_init(void) 
{
    34a0:	cf 93       	push	r28
    34a2:	df 93       	push	r29
	// Toggle RST low to reset and CS low so it'll listen to us
	LCD_CSI = 0;
    34a4:	5d 98       	cbi	0x0b, 5	; 11
	LCD_RES = 0;
    34a6:	5e 98       	cbi	0x0b, 6	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    34a8:	2f e7       	ldi	r18, 0x7F	; 127
    34aa:	84 e8       	ldi	r24, 0x84	; 132
    34ac:	9e e1       	ldi	r25, 0x1E	; 30
    34ae:	21 50       	subi	r18, 0x01	; 1
    34b0:	80 40       	sbci	r24, 0x00	; 0
    34b2:	90 40       	sbci	r25, 0x00	; 0
    34b4:	e1 f7       	brne	.-8      	; 0x34ae <st7565_init+0xe>
    34b6:	00 c0       	rjmp	.+0      	; 0x34b8 <st7565_init+0x18>
    34b8:	00 00       	nop
	_delay_ms(500);
	LCD_RES = 1;
    34ba:	5e 9a       	sbi	0x0b, 6	; 11
    34bc:	c6 ef       	ldi	r28, 0xF6	; 246
    34be:	dd e0       	ldi	r29, 0x0D	; 13

	// Send command sequence
	for (int i = 0; i < 7; i++)
	{
		st7565_command((uint8_t)pgm_read_byte(&lcd_commmands[i]));
    34c0:	fe 01       	movw	r30, r28
    34c2:	84 91       	lpm	r24, Z
    34c4:	0e 94 48 1a 	call	0x3490	; 0x3490 <st7565_command>
    34c8:	21 96       	adiw	r28, 0x01	; 1
	LCD_RES = 0;
	_delay_ms(500);
	LCD_RES = 1;

	// Send command sequence
	for (int i = 0; i < 7; i++)
    34ca:	fd e0       	ldi	r31, 0x0D	; 13
    34cc:	cd 3f       	cpi	r28, 0xFD	; 253
    34ce:	df 07       	cpc	r29, r31
    34d0:	b9 f7       	brne	.-18     	; 0x34c0 <st7565_init+0x20>
    34d2:	2f e3       	ldi	r18, 0x3F	; 63
    34d4:	8d e0       	ldi	r24, 0x0D	; 13
    34d6:	93 e0       	ldi	r25, 0x03	; 3
    34d8:	21 50       	subi	r18, 0x01	; 1
    34da:	80 40       	sbci	r24, 0x00	; 0
    34dc:	90 40       	sbci	r25, 0x00	; 0
    34de:	e1 f7       	brne	.-8      	; 0x34d8 <st7565_init+0x38>
    34e0:	00 c0       	rjmp	.+0      	; 0x34e2 <st7565_init+0x42>
    34e2:	00 00       	nop
	{
		st7565_command((uint8_t)pgm_read_byte(&lcd_commmands[i]));
	}
	_delay_ms(50);
	st7565_command(0x2E);
    34e4:	8e e2       	ldi	r24, 0x2E	; 46
    34e6:	0e 94 48 1a 	call	0x3490	; 0x3490 <st7565_command>
    34ea:	ef e3       	ldi	r30, 0x3F	; 63
    34ec:	fd e0       	ldi	r31, 0x0D	; 13
    34ee:	23 e0       	ldi	r18, 0x03	; 3
    34f0:	e1 50       	subi	r30, 0x01	; 1
    34f2:	f0 40       	sbci	r31, 0x00	; 0
    34f4:	20 40       	sbci	r18, 0x00	; 0
    34f6:	e1 f7       	brne	.-8      	; 0x34f0 <st7565_init+0x50>
    34f8:	00 c0       	rjmp	.+0      	; 0x34fa <st7565_init+0x5a>
    34fa:	00 00       	nop
	_delay_ms(50);
	st7565_command(0x2F);
    34fc:	8f e2       	ldi	r24, 0x2F	; 47
    34fe:	0e 94 48 1a 	call	0x3490	; 0x3490 <st7565_command>
    3502:	8f e4       	ldi	r24, 0x4F	; 79
    3504:	93 ec       	ldi	r25, 0xC3	; 195
    3506:	01 97       	sbiw	r24, 0x01	; 1
    3508:	f1 f7       	brne	.-4      	; 0x3506 <st7565_init+0x66>
    350a:	00 c0       	rjmp	.+0      	; 0x350c <st7565_init+0x6c>
    350c:	00 00       	nop
	_delay_ms(10);

	for (int i = 9; i < 14; i++)
    350e:	c9 e0       	ldi	r28, 0x09	; 9
    3510:	d0 e0       	ldi	r29, 0x00	; 0
    3512:	fe 01       	movw	r30, r28
    3514:	ea 50       	subi	r30, 0x0A	; 10
    3516:	f2 4f       	sbci	r31, 0xF2	; 242
	{
		st7565_command((uint8_t)pgm_read_byte(&lcd_commmands[i]));
    3518:	84 91       	lpm	r24, Z
    351a:	0e 94 48 1a 	call	0x3490	; 0x3490 <st7565_command>
	st7565_command(0x2E);
	_delay_ms(50);
	st7565_command(0x2F);
	_delay_ms(10);

	for (int i = 9; i < 14; i++)
    351e:	21 96       	adiw	r28, 0x01	; 1
    3520:	ce 30       	cpi	r28, 0x0E	; 14
    3522:	d1 05       	cpc	r29, r1
    3524:	b1 f7       	brne	.-20     	; 0x3512 <st7565_init+0x72>
	{
		st7565_command((uint8_t)pgm_read_byte(&lcd_commmands[i]));
	}
}
    3526:	df 91       	pop	r29
    3528:	cf 91       	pop	r28
    352a:	08 95       	ret

0000352c <st7565_set_brightness>:


// Set LCD brightness
void st7565_set_brightness(uint8_t val) 
{
    352c:	cf 93       	push	r28
    352e:	c8 2f       	mov	r28, r24
	st7565_command(CMD_SET_VOLUME_FIRST);
    3530:	81 e8       	ldi	r24, 0x81	; 129
    3532:	0e 94 48 1a 	call	0x3490	; 0x3490 <st7565_command>
	st7565_command(CMD_SET_VOLUME_SECOND | (val & 0x3f));
    3536:	8c 2f       	mov	r24, r28
    3538:	8f 73       	andi	r24, 0x3F	; 63
    353a:	0e 94 48 1a 	call	0x3490	; 0x3490 <st7565_command>
}
    353e:	cf 91       	pop	r28
    3540:	08 95       	ret

00003542 <write_buffer>:

// Write LCD buffer if type = 1 normal, 0 = logo
void write_buffer(uint8_t *buffer, uint8_t type) 
{
    3542:	a0 e0       	ldi	r26, 0x00	; 0
    3544:	b0 e0       	ldi	r27, 0x00	; 0
    3546:	e7 ea       	ldi	r30, 0xA7	; 167
    3548:	fa e1       	ldi	r31, 0x1A	; 26
    354a:	0c 94 9b 3e 	jmp	0x7d36	; 0x7d36 <__prologue_saves__+0x10>
    354e:	a6 2e       	mov	r10, r22
    3550:	8c 01       	movw	r16, r24
    3552:	c0 e0       	ldi	r28, 0x00	; 0
    3554:	d0 e0       	ldi	r29, 0x00	; 0
    3556:	8b e0       	ldi	r24, 0x0B	; 11
    3558:	c8 2e       	mov	r12, r24
    355a:	8e e0       	ldi	r24, 0x0E	; 14
    355c:	d8 2e       	mov	r13, r24
	uint8_t c, p;
	for(p = 0; p < 8; p++) 
	{
		if (type)
    355e:	aa 20       	and	r10, r10
    3560:	21 f0       	breq	.+8      	; 0x356a <write_buffer+0x28>
    3562:	fe 01       	movw	r30, r28
    3564:	ec 5f       	subi	r30, 0xFC	; 252
    3566:	f1 4f       	sbci	r31, 0xF1	; 241
    3568:	03 c0       	rjmp	.+6      	; 0x3570 <write_buffer+0x2e>
    356a:	f6 01       	movw	r30, r12
    356c:	ec 1b       	sub	r30, r28
    356e:	fd 0b       	sbc	r31, r29
		{
			st7565_command(CMD_SET_PAGE | (uint8_t)pgm_read_byte(&pagemap[p]));		// Page 7 to 0
		}
		else
		{
			st7565_command(CMD_SET_PAGE | (uint8_t)pgm_read_byte(&pagemap[7-p]));	// Page 0 to 7
    3570:	84 91       	lpm	r24, Z
    3572:	80 6b       	ori	r24, 0xB0	; 176
    3574:	0e 94 48 1a 	call	0x3490	; 0x3490 <st7565_command>
		}

		st7565_command(CMD_SET_COLUMN_LOWER | (0x0 & 0xf));			// Column 0
    3578:	80 e0       	ldi	r24, 0x00	; 0
    357a:	0e 94 48 1a 	call	0x3490	; 0x3490 <st7565_command>
		st7565_command(CMD_SET_COLUMN_UPPER | ((0x0 >> 4) & 0xf));	// Column 0
    357e:	80 e1       	ldi	r24, 0x10	; 16
    3580:	0e 94 48 1a 	call	0x3490	; 0x3490 <st7565_command>
		st7565_command(CMD_RMW);									// Sets auto-increment
    3584:	80 ee       	ldi	r24, 0xE0	; 224
    3586:	0e 94 48 1a 	call	0x3490	; 0x3490 <st7565_command>
    358a:	78 01       	movw	r14, r16

		for(c = 0; c < 128; c++) 
    358c:	b1 2c       	mov	r11, r1
		{
			st7565_data(buffer[(128*p)+c]);
    358e:	f7 01       	movw	r30, r14
    3590:	81 91       	ld	r24, Z+
    3592:	7f 01       	movw	r14, r30
    3594:	0e 94 4c 1a 	call	0x3498	; 0x3498 <st7565_data>

		st7565_command(CMD_SET_COLUMN_LOWER | (0x0 & 0xf));			// Column 0
		st7565_command(CMD_SET_COLUMN_UPPER | ((0x0 >> 4) & 0xf));	// Column 0
		st7565_command(CMD_RMW);									// Sets auto-increment

		for(c = 0; c < 128; c++) 
    3598:	b3 94       	inc	r11
    359a:	f0 e8       	ldi	r31, 0x80	; 128
    359c:	bf 12       	cpse	r11, r31
    359e:	f7 cf       	rjmp	.-18     	; 0x358e <write_buffer+0x4c>
    35a0:	21 96       	adiw	r28, 0x01	; 1
    35a2:	00 58       	subi	r16, 0x80	; 128
    35a4:	1f 4f       	sbci	r17, 0xFF	; 255

// Write LCD buffer if type = 1 normal, 0 = logo
void write_buffer(uint8_t *buffer, uint8_t type) 
{
	uint8_t c, p;
	for(p = 0; p < 8; p++) 
    35a6:	c8 30       	cpi	r28, 0x08	; 8
    35a8:	d1 05       	cpc	r29, r1
    35aa:	c9 f6       	brne	.-78     	; 0x355e <write_buffer+0x1c>
		for(c = 0; c < 128; c++) 
		{
			st7565_data(buffer[(128*p)+c]);
		}
	}
}
    35ac:	cd b7       	in	r28, 0x3d	; 61
    35ae:	de b7       	in	r29, 0x3e	; 62
    35b0:	ea e0       	ldi	r30, 0x0A	; 10
    35b2:	0c 94 b7 3e 	jmp	0x7d6e	; 0x7d6e <__epilogue_restores__+0x10>

000035b6 <clear_buffer>:

// Clear buffer
void clear_buffer(uint8_t *buff) 
{
	memset(buff, 0, 1024);
    35b6:	20 e0       	ldi	r18, 0x00	; 0
    35b8:	34 e0       	ldi	r19, 0x04	; 4
    35ba:	fc 01       	movw	r30, r24
    35bc:	a9 01       	movw	r20, r18
    35be:	11 92       	st	Z+, r1
    35c0:	41 50       	subi	r20, 0x01	; 1
    35c2:	50 40       	sbci	r21, 0x00	; 0
    35c4:	e1 f7       	brne	.-8      	; 0x35be <clear_buffer+0x8>
    35c6:	08 95       	ret

000035c8 <clear_screen>:
}

// Clear screen (does not clear buffer)
void clear_screen(void) 
{
    35c8:	cf 93       	push	r28
    35ca:	df 93       	push	r29
	uint8_t p, c;

	for(p = 0; p < 8; p++) 
    35cc:	d0 e0       	ldi	r29, 0x00	; 0
	{
		st7565_command(CMD_SET_PAGE | p);								// Set page to p
    35ce:	8d 2f       	mov	r24, r29
    35d0:	80 6b       	ori	r24, 0xB0	; 176
    35d2:	0e 94 48 1a 	call	0x3490	; 0x3490 <st7565_command>
		for(c = 0; c < 128; c++) 										// Was 129, which I think is wrong...
    35d6:	c0 e0       	ldi	r28, 0x00	; 0
		{
			st7565_command(CMD_SET_COLUMN_LOWER | (c & 0xf));
    35d8:	8c 2f       	mov	r24, r28
    35da:	8f 70       	andi	r24, 0x0F	; 15
    35dc:	0e 94 48 1a 	call	0x3490	; 0x3490 <st7565_command>
			st7565_command(CMD_SET_COLUMN_UPPER | ((c >> 4) & 0xf));	// Set column to c
    35e0:	8c 2f       	mov	r24, r28
    35e2:	82 95       	swap	r24
    35e4:	8f 70       	andi	r24, 0x0F	; 15
    35e6:	80 61       	ori	r24, 0x10	; 16
    35e8:	0e 94 48 1a 	call	0x3490	; 0x3490 <st7565_command>
			st7565_data(0x00);											// Clear data
    35ec:	80 e0       	ldi	r24, 0x00	; 0
    35ee:	0e 94 4c 1a 	call	0x3498	; 0x3498 <st7565_data>
	uint8_t p, c;

	for(p = 0; p < 8; p++) 
	{
		st7565_command(CMD_SET_PAGE | p);								// Set page to p
		for(c = 0; c < 128; c++) 										// Was 129, which I think is wrong...
    35f2:	cf 5f       	subi	r28, 0xFF	; 255
    35f4:	c0 38       	cpi	r28, 0x80	; 128
    35f6:	81 f7       	brne	.-32     	; 0x35d8 <clear_screen+0x10>
// Clear screen (does not clear buffer)
void clear_screen(void) 
{
	uint8_t p, c;

	for(p = 0; p < 8; p++) 
    35f8:	df 5f       	subi	r29, 0xFF	; 255
    35fa:	d8 30       	cpi	r29, 0x08	; 8
    35fc:	41 f7       	brne	.-48     	; 0x35ce <clear_screen+0x6>
			st7565_command(CMD_SET_COLUMN_LOWER | (c & 0xf));
			st7565_command(CMD_SET_COLUMN_UPPER | ((c >> 4) & 0xf));	// Set column to c
			st7565_data(0x00);											// Clear data
		}     
	}
}
    35fe:	df 91       	pop	r29
    3600:	cf 91       	pop	r28
    3602:	08 95       	ret

00003604 <setpixel>:
//***********************************************************

// Set a single pixel
void setpixel(uint8_t *buff, uint8_t x, uint8_t y, uint8_t color) 
{
	if ((x >= LCDWIDTH) || (y >= LCDHEIGHT))
    3604:	67 fd       	sbrc	r22, 7
    3606:	36 c0       	rjmp	.+108    	; 0x3674 <setpixel+0x70>
    3608:	40 34       	cpi	r20, 0x40	; 64
    360a:	a0 f5       	brcc	.+104    	; 0x3674 <setpixel+0x70>
    360c:	34 2f       	mov	r19, r20
    360e:	36 95       	lsr	r19
    3610:	36 95       	lsr	r19
    3612:	36 95       	lsr	r19
    3614:	e6 2f       	mov	r30, r22
    3616:	f0 e0       	ldi	r31, 0x00	; 0
    3618:	50 e0       	ldi	r21, 0x00	; 0
	{
		return;
	}
	// x is which column
	if (color)
    361a:	22 23       	and	r18, r18
    361c:	a9 f0       	breq	.+42     	; 0x3648 <setpixel+0x44>
	{
		buff[x+ (y/8)*128] |= (1 << (7-(y%8)));  
    361e:	20 e8       	ldi	r18, 0x80	; 128
    3620:	32 9f       	mul	r19, r18
    3622:	e0 0d       	add	r30, r0
    3624:	f1 1d       	adc	r31, r1
    3626:	11 24       	eor	r1, r1
    3628:	e8 0f       	add	r30, r24
    362a:	f9 1f       	adc	r31, r25
    362c:	40 95       	com	r20
    362e:	50 95       	com	r21
    3630:	47 70       	andi	r20, 0x07	; 7
    3632:	55 27       	eor	r21, r21
    3634:	81 e0       	ldi	r24, 0x01	; 1
    3636:	90 e0       	ldi	r25, 0x00	; 0
    3638:	04 2e       	mov	r0, r20
    363a:	01 c0       	rjmp	.+2      	; 0x363e <setpixel+0x3a>
    363c:	88 0f       	add	r24, r24
    363e:	0a 94       	dec	r0
    3640:	ea f7       	brpl	.-6      	; 0x363c <setpixel+0x38>
    3642:	90 81       	ld	r25, Z
    3644:	98 2b       	or	r25, r24
    3646:	15 c0       	rjmp	.+42     	; 0x3672 <setpixel+0x6e>
	}
	else
	{
		buff[x+ (y/8)*128] &= ~(1 << (7-(y%8))); 
    3648:	20 e8       	ldi	r18, 0x80	; 128
    364a:	32 9f       	mul	r19, r18
    364c:	e0 0d       	add	r30, r0
    364e:	f1 1d       	adc	r31, r1
    3650:	11 24       	eor	r1, r1
    3652:	e8 0f       	add	r30, r24
    3654:	f9 1f       	adc	r31, r25
    3656:	40 95       	com	r20
    3658:	50 95       	com	r21
    365a:	47 70       	andi	r20, 0x07	; 7
    365c:	55 27       	eor	r21, r21
    365e:	81 e0       	ldi	r24, 0x01	; 1
    3660:	90 e0       	ldi	r25, 0x00	; 0
    3662:	04 2e       	mov	r0, r20
    3664:	01 c0       	rjmp	.+2      	; 0x3668 <setpixel+0x64>
    3666:	88 0f       	add	r24, r24
    3668:	0a 94       	dec	r0
    366a:	ea f7       	brpl	.-6      	; 0x3666 <setpixel+0x62>
    366c:	80 95       	com	r24
    366e:	90 81       	ld	r25, Z
    3670:	98 23       	and	r25, r24
    3672:	90 83       	st	Z, r25
    3674:	08 95       	ret

00003676 <drawline>:
	}
}

// Bresenham's algorithm - From wikpedia
void drawline(uint8_t *buff, uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1, uint8_t color) 
{
    3676:	a0 e0       	ldi	r26, 0x00	; 0
    3678:	b0 e0       	ldi	r27, 0x00	; 0
    367a:	e1 e4       	ldi	r30, 0x41	; 65
    367c:	fb e1       	ldi	r31, 0x1B	; 27
    367e:	0c 94 9a 3e 	jmp	0x7d34	; 0x7d34 <__prologue_saves__+0xe>
    3682:	ec 01       	movw	r28, r24
    3684:	16 2f       	mov	r17, r22
    3686:	f4 2e       	mov	r15, r20
    3688:	d2 2e       	mov	r13, r18
	uint8_t steep = abs(y1 - y0) > abs(x1 - x0);
    368a:	a0 2f       	mov	r26, r16
    368c:	b0 e0       	ldi	r27, 0x00	; 0
    368e:	a4 1b       	sub	r26, r20
    3690:	b1 09       	sbc	r27, r1
    3692:	b7 ff       	sbrs	r27, 7
    3694:	03 c0       	rjmp	.+6      	; 0x369c <drawline+0x26>
    3696:	b1 95       	neg	r27
    3698:	a1 95       	neg	r26
    369a:	b1 09       	sbc	r27, r1
    369c:	ed 2d       	mov	r30, r13
    369e:	f0 e0       	ldi	r31, 0x00	; 0
    36a0:	e1 1b       	sub	r30, r17
    36a2:	f1 09       	sbc	r31, r1
    36a4:	f7 ff       	sbrs	r31, 7
    36a6:	03 c0       	rjmp	.+6      	; 0x36ae <drawline+0x38>
    36a8:	f1 95       	neg	r31
    36aa:	e1 95       	neg	r30
    36ac:	f1 09       	sbc	r31, r1
    36ae:	bb 24       	eor	r11, r11
    36b0:	b3 94       	inc	r11
    36b2:	ea 17       	cp	r30, r26
    36b4:	fb 07       	cpc	r31, r27
    36b6:	14 f0       	brlt	.+4      	; 0x36bc <drawline+0x46>
    36b8:	b1 2c       	mov	r11, r1
    36ba:	06 c0       	rjmp	.+12     	; 0x36c8 <drawline+0x52>
    36bc:	8d 2d       	mov	r24, r13
	if (steep) 
	{
		swap(x0, y0);
		swap(x1, y1);
    36be:	d0 2e       	mov	r13, r16
    36c0:	08 2f       	mov	r16, r24
    36c2:	81 2f       	mov	r24, r17
void drawline(uint8_t *buff, uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1, uint8_t color) 
{
	uint8_t steep = abs(y1 - y0) > abs(x1 - x0);
	if (steep) 
	{
		swap(x0, y0);
    36c4:	1f 2d       	mov	r17, r15
    36c6:	f8 2e       	mov	r15, r24
		swap(x1, y1);
	}

	if (x0 > x1) 
    36c8:	d1 16       	cp	r13, r17
    36ca:	30 f4       	brcc	.+12     	; 0x36d8 <drawline+0x62>
    36cc:	8f 2d       	mov	r24, r15
	{
		swap(x0, x1);
		swap(y0, y1);
    36ce:	f0 2e       	mov	r15, r16
    36d0:	08 2f       	mov	r16, r24
    36d2:	81 2f       	mov	r24, r17
    36d4:	1d 2d       	mov	r17, r13
    36d6:	d8 2e       	mov	r13, r24
	}

	uint8_t dx, dy;
	dx = x1 - x0;
    36d8:	ad 2c       	mov	r10, r13
    36da:	a1 1a       	sub	r10, r17
	dy = abs(y1 - y0);
    36dc:	e0 2f       	mov	r30, r16
    36de:	f0 e0       	ldi	r31, 0x00	; 0
    36e0:	ef 19       	sub	r30, r15
    36e2:	f1 09       	sbc	r31, r1
    36e4:	f7 ff       	sbrs	r31, 7
    36e6:	03 c0       	rjmp	.+6      	; 0x36ee <drawline+0x78>
    36e8:	f1 95       	neg	r31
    36ea:	e1 95       	neg	r30
    36ec:	f1 09       	sbc	r31, r1
    36ee:	9e 2e       	mov	r9, r30

	int8_t err = dx / 2;
    36f0:	ca 2c       	mov	r12, r10
    36f2:	c6 94       	lsr	r12
	int8_t ystep;

	if (y0 < y1) 
    36f4:	f0 16       	cp	r15, r16
    36f6:	10 f4       	brcc	.+4      	; 0x36fc <drawline+0x86>
	{
		ystep = 1;
    36f8:	01 e0       	ldi	r16, 0x01	; 1
    36fa:	10 c0       	rjmp	.+32     	; 0x371c <drawline+0xa6>
	} 
	else 
	{
		ystep = -1;
    36fc:	0f ef       	ldi	r16, 0xFF	; 255
    36fe:	0e c0       	rjmp	.+28     	; 0x371c <drawline+0xa6>

	for (; x0<x1; x0++) 
	{
		if (steep) 
		{
			setpixel(buff, y0, x0, color);
    3700:	2e 2d       	mov	r18, r14
		ystep = -1;
	}

	for (; x0<x1; x0++) 
	{
		if (steep) 
    3702:	bb 20       	and	r11, r11
    3704:	71 f0       	breq	.+28     	; 0x3722 <drawline+0xac>
		{
			setpixel(buff, y0, x0, color);
    3706:	41 2f       	mov	r20, r17
    3708:	6f 2d       	mov	r22, r15
		} 
		else 
		{
			setpixel(buff, x0, y0, color);
    370a:	ce 01       	movw	r24, r28
    370c:	0e 94 02 1b 	call	0x3604	; 0x3604 <setpixel>
		}
		err -= dy;
    3710:	c9 18       	sub	r12, r9
		if (err < 0) 
    3712:	c7 fe       	sbrs	r12, 7
    3714:	02 c0       	rjmp	.+4      	; 0x371a <drawline+0xa4>
		{
			y0 += ystep;
    3716:	f0 0e       	add	r15, r16
			err += dx;
    3718:	ca 0c       	add	r12, r10
	else 
	{
		ystep = -1;
	}

	for (; x0<x1; x0++) 
    371a:	1f 5f       	subi	r17, 0xFF	; 255
    371c:	1d 15       	cp	r17, r13
    371e:	80 f3       	brcs	.-32     	; 0x3700 <drawline+0x8a>
    3720:	03 c0       	rjmp	.+6      	; 0x3728 <drawline+0xb2>
		{
			setpixel(buff, y0, x0, color);
		} 
		else 
		{
			setpixel(buff, x0, y0, color);
    3722:	4f 2d       	mov	r20, r15
    3724:	61 2f       	mov	r22, r17
    3726:	f1 cf       	rjmp	.-30     	; 0x370a <drawline+0x94>
		{
			y0 += ystep;
			err += dx;
		}
	}
}
    3728:	cd b7       	in	r28, 0x3d	; 61
    372a:	de b7       	in	r29, 0x3e	; 62
    372c:	eb e0       	ldi	r30, 0x0B	; 11
    372e:	0c 94 b6 3e 	jmp	0x7d6c	; 0x7d6c <__epilogue_restores__+0xe>

00003732 <fillrect>:

// Filled rectangle
void fillrect(uint8_t *buff, uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color) 
{
    3732:	a0 e0       	ldi	r26, 0x00	; 0
    3734:	b0 e0       	ldi	r27, 0x00	; 0
    3736:	ef e9       	ldi	r30, 0x9F	; 159
    3738:	fb e1       	ldi	r31, 0x1B	; 27
    373a:	0c 94 9b 3e 	jmp	0x7d36	; 0x7d36 <__prologue_saves__+0x10>
    373e:	6c 01       	movw	r12, r24
    3740:	a4 2e       	mov	r10, r20
	// Stupidest version - just pixels - but fast with internal buffer!
	for (uint8_t i=x; i<x+w; i++) 
    3742:	f6 2e       	mov	r15, r22
    3744:	c2 2f       	mov	r28, r18
    3746:	d0 e0       	ldi	r29, 0x00	; 0
    3748:	c6 0f       	add	r28, r22
    374a:	d1 1d       	adc	r29, r1
	{
		for (uint8_t j=y; j<y+h; j++) 
    374c:	10 e0       	ldi	r17, 0x00	; 0
    374e:	04 0f       	add	r16, r20
    3750:	11 1d       	adc	r17, r1

// Filled rectangle
void fillrect(uint8_t *buff, uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color) 
{
	// Stupidest version - just pixels - but fast with internal buffer!
	for (uint8_t i=x; i<x+w; i++) 
    3752:	8f 2d       	mov	r24, r15
    3754:	90 e0       	ldi	r25, 0x00	; 0
    3756:	8c 17       	cp	r24, r28
    3758:	9d 07       	cpc	r25, r29
    375a:	84 f4       	brge	.+32     	; 0x377c <fillrect+0x4a>
    375c:	ba 2c       	mov	r11, r10
	{
		for (uint8_t j=y; j<y+h; j++) 
    375e:	8b 2d       	mov	r24, r11
    3760:	90 e0       	ldi	r25, 0x00	; 0
    3762:	80 17       	cp	r24, r16
    3764:	91 07       	cpc	r25, r17
    3766:	44 f4       	brge	.+16     	; 0x3778 <fillrect+0x46>
		{
			setpixel(buff, i, j, color);
    3768:	2e 2d       	mov	r18, r14
    376a:	4b 2d       	mov	r20, r11
    376c:	6f 2d       	mov	r22, r15
    376e:	c6 01       	movw	r24, r12
    3770:	0e 94 02 1b 	call	0x3604	; 0x3604 <setpixel>
void fillrect(uint8_t *buff, uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color) 
{
	// Stupidest version - just pixels - but fast with internal buffer!
	for (uint8_t i=x; i<x+w; i++) 
	{
		for (uint8_t j=y; j<y+h; j++) 
    3774:	b3 94       	inc	r11
    3776:	f3 cf       	rjmp	.-26     	; 0x375e <fillrect+0x2c>

// Filled rectangle
void fillrect(uint8_t *buff, uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color) 
{
	// Stupidest version - just pixels - but fast with internal buffer!
	for (uint8_t i=x; i<x+w; i++) 
    3778:	f3 94       	inc	r15
    377a:	eb cf       	rjmp	.-42     	; 0x3752 <fillrect+0x20>
		for (uint8_t j=y; j<y+h; j++) 
		{
			setpixel(buff, i, j, color);
		}
	}
}
    377c:	cd b7       	in	r28, 0x3d	; 61
    377e:	de b7       	in	r29, 0x3e	; 62
    3780:	ea e0       	ldi	r30, 0x0A	; 10
    3782:	0c 94 b7 3e 	jmp	0x7d6e	; 0x7d6e <__epilogue_restores__+0x10>

00003786 <drawrect>:

// Draw a rectangle
void drawrect(uint8_t *buff, uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color) 
{
    3786:	a0 e0       	ldi	r26, 0x00	; 0
    3788:	b0 e0       	ldi	r27, 0x00	; 0
    378a:	e9 ec       	ldi	r30, 0xC9	; 201
    378c:	fb e1       	ldi	r31, 0x1B	; 27
    378e:	0c 94 9a 3e 	jmp	0x7d34	; 0x7d34 <__prologue_saves__+0xe>
    3792:	ec 01       	movw	r28, r24
    3794:	f6 2e       	mov	r15, r22
    3796:	b4 2e       	mov	r11, r20
    3798:	92 2e       	mov	r9, r18
	// Stupidest version - just pixels - but fast with internal buffer!
	for (uint8_t i=x; i<x+w; i++) 
    379a:	16 2f       	mov	r17, r22
    379c:	c2 2e       	mov	r12, r18
    379e:	d1 2c       	mov	r13, r1
    37a0:	c6 0e       	add	r12, r22
    37a2:	d1 1c       	adc	r13, r1
	{
		setpixel(buff, i, y, color);
		setpixel(buff, i, y+h-1, color);
    37a4:	aa 24       	eor	r10, r10
    37a6:	aa 94       	dec	r10
    37a8:	a0 0e       	add	r10, r16
    37aa:	a4 0e       	add	r10, r20

// Draw a rectangle
void drawrect(uint8_t *buff, uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color) 
{
	// Stupidest version - just pixels - but fast with internal buffer!
	for (uint8_t i=x; i<x+w; i++) 
    37ac:	81 2f       	mov	r24, r17
    37ae:	90 e0       	ldi	r25, 0x00	; 0
    37b0:	8c 15       	cp	r24, r12
    37b2:	9d 05       	cpc	r25, r13
    37b4:	74 f4       	brge	.+28     	; 0x37d2 <drawrect+0x4c>
	{
		setpixel(buff, i, y, color);
    37b6:	2e 2d       	mov	r18, r14
    37b8:	4b 2d       	mov	r20, r11
    37ba:	61 2f       	mov	r22, r17
    37bc:	ce 01       	movw	r24, r28
    37be:	0e 94 02 1b 	call	0x3604	; 0x3604 <setpixel>
		setpixel(buff, i, y+h-1, color);
    37c2:	2e 2d       	mov	r18, r14
    37c4:	4a 2d       	mov	r20, r10
    37c6:	61 2f       	mov	r22, r17
    37c8:	ce 01       	movw	r24, r28
    37ca:	0e 94 02 1b 	call	0x3604	; 0x3604 <setpixel>

// Draw a rectangle
void drawrect(uint8_t *buff, uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color) 
{
	// Stupidest version - just pixels - but fast with internal buffer!
	for (uint8_t i=x; i<x+w; i++) 
    37ce:	1f 5f       	subi	r17, 0xFF	; 255
    37d0:	ed cf       	rjmp	.-38     	; 0x37ac <drawrect+0x26>
    37d2:	db 2c       	mov	r13, r11
	{
		setpixel(buff, i, y, color);
		setpixel(buff, i, y+h-1, color);
	}
	for (uint8_t i=y; i<y+h; i++) 
    37d4:	10 e0       	ldi	r17, 0x00	; 0
    37d6:	0b 0d       	add	r16, r11
    37d8:	11 1d       	adc	r17, r1
	{
		setpixel(buff, x, i, color);
		setpixel(buff, x+w-1, i, color);
    37da:	cc 24       	eor	r12, r12
    37dc:	ca 94       	dec	r12
    37de:	c9 0c       	add	r12, r9
    37e0:	cf 0c       	add	r12, r15
	for (uint8_t i=x; i<x+w; i++) 
	{
		setpixel(buff, i, y, color);
		setpixel(buff, i, y+h-1, color);
	}
	for (uint8_t i=y; i<y+h; i++) 
    37e2:	8d 2d       	mov	r24, r13
    37e4:	90 e0       	ldi	r25, 0x00	; 0
    37e6:	80 17       	cp	r24, r16
    37e8:	91 07       	cpc	r25, r17
    37ea:	74 f4       	brge	.+28     	; 0x3808 <drawrect+0x82>
	{
		setpixel(buff, x, i, color);
    37ec:	2e 2d       	mov	r18, r14
    37ee:	4d 2d       	mov	r20, r13
    37f0:	6f 2d       	mov	r22, r15
    37f2:	ce 01       	movw	r24, r28
    37f4:	0e 94 02 1b 	call	0x3604	; 0x3604 <setpixel>
		setpixel(buff, x+w-1, i, color);
    37f8:	2e 2d       	mov	r18, r14
    37fa:	4d 2d       	mov	r20, r13
    37fc:	6c 2d       	mov	r22, r12
    37fe:	ce 01       	movw	r24, r28
    3800:	0e 94 02 1b 	call	0x3604	; 0x3604 <setpixel>
	for (uint8_t i=x; i<x+w; i++) 
	{
		setpixel(buff, i, y, color);
		setpixel(buff, i, y+h-1, color);
	}
	for (uint8_t i=y; i<y+h; i++) 
    3804:	d3 94       	inc	r13
    3806:	ed cf       	rjmp	.-38     	; 0x37e2 <drawrect+0x5c>
	{
		setpixel(buff, x, i, color);
		setpixel(buff, x+w-1, i, color);
	} 
}
    3808:	cd b7       	in	r28, 0x3d	; 61
    380a:	de b7       	in	r29, 0x3e	; 62
    380c:	eb e0       	ldi	r30, 0x0B	; 11
    380e:	0c 94 b6 3e 	jmp	0x7d6c	; 0x7d6c <__epilogue_restores__+0xe>

00003812 <fillcircle>:

// Draw a filled circle
// Edge-clip bug fixed by D. Thompson - 3/2/2014
void fillcircle(uint8_t *buff, uint8_t x0, uint8_t y0, uint8_t r, uint8_t color) 
{
    3812:	a0 e0       	ldi	r26, 0x00	; 0
    3814:	b0 e0       	ldi	r27, 0x00	; 0
    3816:	ef e0       	ldi	r30, 0x0F	; 15
    3818:	fc e1       	ldi	r31, 0x1C	; 28
    381a:	0c 94 95 3e 	jmp	0x7d2a	; 0x7d2a <__prologue_saves__+0x4>
    381e:	ec 01       	movw	r28, r24
    3820:	96 2e       	mov	r9, r22
    3822:	a4 2e       	mov	r10, r20
	int8_t f = 1 - r;
    3824:	bb 24       	eor	r11, r11
    3826:	b3 94       	inc	r11
    3828:	b2 1a       	sub	r11, r18
	int8_t ddF_x = 1;
	int8_t ddF_y = -2 * r;
    382a:	82 2e       	mov	r8, r18
    382c:	81 94       	neg	r8
    382e:	88 0c       	add	r8, r8
	int8_t x = 0;
	int8_t y = r;
    3830:	12 2f       	mov	r17, r18
	int8_t i = 0;

	for (i=y0-r; i<=y0+r; i++) 
    3832:	74 2e       	mov	r7, r20
    3834:	72 1a       	sub	r7, r18
    3836:	e4 2e       	mov	r14, r20
    3838:	f1 2c       	mov	r15, r1
    383a:	67 01       	movw	r12, r14
    383c:	c2 0e       	add	r12, r18
    383e:	d1 1c       	adc	r13, r1
    3840:	87 2d       	mov	r24, r7
    3842:	99 27       	eor	r25, r25
    3844:	87 fd       	sbrc	r24, 7
    3846:	90 95       	com	r25
    3848:	c8 16       	cp	r12, r24
    384a:	d9 06       	cpc	r13, r25
    384c:	44 f0       	brlt	.+16     	; 0x385e <fillcircle+0x4c>
	{
		setpixel(buff, x0, i, color);
    384e:	20 2f       	mov	r18, r16
    3850:	47 2d       	mov	r20, r7
    3852:	69 2d       	mov	r22, r9
    3854:	ce 01       	movw	r24, r28
    3856:	0e 94 02 1b 	call	0x3604	; 0x3604 <setpixel>
    385a:	73 94       	inc	r7
    385c:	f1 cf       	rjmp	.-30     	; 0x3840 <fillcircle+0x2e>
	int8_t ddF_y = -2 * r;
	int8_t x = 0;
	int8_t y = r;
	int8_t i = 0;

	for (i=y0-r; i<=y0+r; i++) 
    385e:	71 2c       	mov	r7, r1
	{
		setpixel(buff, x0, i, color);
	}

	while (x<y) 
    3860:	71 16       	cp	r7, r17
    3862:	0c f0       	brlt	.+2      	; 0x3866 <fillcircle+0x54>
    3864:	4c c0       	rjmp	.+152    	; 0x38fe <fillcircle+0xec>
	{
		if (f >= 0) 
    3866:	b7 fc       	sbrc	r11, 7
    3868:	04 c0       	rjmp	.+8      	; 0x3872 <fillcircle+0x60>
		{
			y--;
    386a:	11 50       	subi	r17, 0x01	; 1
			ddF_y += 2;
    386c:	83 94       	inc	r8
    386e:	83 94       	inc	r8
			f += ddF_y;
    3870:	b8 0c       	add	r11, r8
    3872:	73 94       	inc	r7
    3874:	87 2d       	mov	r24, r7
    3876:	88 0f       	add	r24, r24
    3878:	8f 5f       	subi	r24, 0xFF	; 255
		}

		x++;
		ddF_x += 2;
		f += ddF_x;
    387a:	b8 0e       	add	r11, r24

		for (i=y0-y; i<=y0+y; i++) 
    387c:	6a 2c       	mov	r6, r10
    387e:	61 1a       	sub	r6, r17
    3880:	67 01       	movw	r12, r14
    3882:	c1 0e       	add	r12, r17
    3884:	d1 1c       	adc	r13, r1
    3886:	17 fd       	sbrc	r17, 7
    3888:	da 94       	dec	r13
    388a:	47 2c       	mov	r4, r7
    388c:	49 0c       	add	r4, r9
    388e:	59 2c       	mov	r5, r9
    3890:	57 18       	sub	r5, r7
    3892:	86 2d       	mov	r24, r6
    3894:	99 27       	eor	r25, r25
    3896:	87 fd       	sbrc	r24, 7
    3898:	90 95       	com	r25
    389a:	c8 16       	cp	r12, r24
    389c:	d9 06       	cpc	r13, r25
    389e:	74 f0       	brlt	.+28     	; 0x38bc <fillcircle+0xaa>
		{
			setpixel(buff, x0+x, i, color);
    38a0:	20 2f       	mov	r18, r16
    38a2:	46 2d       	mov	r20, r6
    38a4:	64 2d       	mov	r22, r4
    38a6:	ce 01       	movw	r24, r28
    38a8:	0e 94 02 1b 	call	0x3604	; 0x3604 <setpixel>
			setpixel(buff, x0-x, i, color);
    38ac:	20 2f       	mov	r18, r16
    38ae:	46 2d       	mov	r20, r6
    38b0:	65 2d       	mov	r22, r5
    38b2:	ce 01       	movw	r24, r28
    38b4:	0e 94 02 1b 	call	0x3604	; 0x3604 <setpixel>
    38b8:	63 94       	inc	r6
    38ba:	eb cf       	rjmp	.-42     	; 0x3892 <fillcircle+0x80>
    38bc:	6a 2c       	mov	r6, r10
    38be:	67 18       	sub	r6, r7
		} 
		for (i=y0-x; i<=y0+x; i++) 
    38c0:	67 01       	movw	r12, r14
    38c2:	c7 0c       	add	r12, r7
    38c4:	d1 1c       	adc	r13, r1
    38c6:	77 fc       	sbrc	r7, 7
    38c8:	da 94       	dec	r13
		{
			setpixel(buff, x0+y, i, color);
    38ca:	41 2e       	mov	r4, r17
    38cc:	49 0c       	add	r4, r9
			setpixel(buff, x0-y, i, color);
    38ce:	59 2c       	mov	r5, r9
    38d0:	51 1a       	sub	r5, r17
		for (i=y0-y; i<=y0+y; i++) 
		{
			setpixel(buff, x0+x, i, color);
			setpixel(buff, x0-x, i, color);
		} 
		for (i=y0-x; i<=y0+x; i++) 
    38d2:	86 2d       	mov	r24, r6
    38d4:	99 27       	eor	r25, r25
    38d6:	87 fd       	sbrc	r24, 7
    38d8:	90 95       	com	r25
    38da:	c8 16       	cp	r12, r24
    38dc:	d9 06       	cpc	r13, r25
    38de:	0c f4       	brge	.+2      	; 0x38e2 <fillcircle+0xd0>
    38e0:	bf cf       	rjmp	.-130    	; 0x3860 <fillcircle+0x4e>
		{
			setpixel(buff, x0+y, i, color);
    38e2:	20 2f       	mov	r18, r16
    38e4:	46 2d       	mov	r20, r6
    38e6:	64 2d       	mov	r22, r4
    38e8:	ce 01       	movw	r24, r28
    38ea:	0e 94 02 1b 	call	0x3604	; 0x3604 <setpixel>
			setpixel(buff, x0-y, i, color);
    38ee:	20 2f       	mov	r18, r16
    38f0:	46 2d       	mov	r20, r6
    38f2:	65 2d       	mov	r22, r5
    38f4:	ce 01       	movw	r24, r28
    38f6:	0e 94 02 1b 	call	0x3604	; 0x3604 <setpixel>
    38fa:	63 94       	inc	r6
    38fc:	ea cf       	rjmp	.-44     	; 0x38d2 <fillcircle+0xc0>
		}    
	}
}
    38fe:	cd b7       	in	r28, 0x3d	; 61
    3900:	de b7       	in	r29, 0x3e	; 62
    3902:	e0 e1       	ldi	r30, 0x10	; 16
    3904:	0c 94 b1 3e 	jmp	0x7d62	; 0x7d62 <__epilogue_restores__+0x4>

00003908 <LCD_Display_Text>:
//************************************************************

// Print Menuitem from Program memory at a particular location
void LCD_Display_Text (uint8_t menuitem, const unsigned char* font,uint16_t x, uint16_t y)
{
	gLCDprint_Menu_P((char*)pgm_read_word(&text_menu[menuitem]), font, x, y);
    3908:	e8 2f       	mov	r30, r24
    390a:	f0 e0       	ldi	r31, 0x00	; 0
    390c:	ee 0f       	add	r30, r30
    390e:	ff 1f       	adc	r31, r31
    3910:	e4 5f       	subi	r30, 0xF4	; 244
    3912:	f1 4f       	sbci	r31, 0xF1	; 241
    3914:	85 91       	lpm	r24, Z+
    3916:	94 91       	lpm	r25, Z
}

// Print a string from RAM at a particular location in a particular font
void gLCDprint_Menu_P(const char *s, const unsigned char* font,uint16_t x, uint16_t y)
{
	pgm_mugui_lcd_puts((const unsigned char*)s, font, x, y);
    3918:	0e 94 65 34 	call	0x68ca	; 0x68ca <pgm_mugui_lcd_puts>
    391c:	08 95       	ret

0000391e <gLCDprint_Menu_P>:
    391e:	0e 94 65 34 	call	0x68ca	; 0x68ca <pgm_mugui_lcd_puts>
    3922:	08 95       	ret

00003924 <idle_screen>:
}

// Pop up the Idle screen
void idle_screen(void)
{
	clear_buffer(buffer);
    3924:	80 e0       	ldi	r24, 0x00	; 0
    3926:	91 e0       	ldi	r25, 0x01	; 1
    3928:	0e 94 db 1a 	call	0x35b6	; 0x35b6 <clear_buffer>

	// Change Status screen depending on arm mode
	LCD_Display_Text(121,(const unsigned char*)Verdana14,41,3); 	// "Press"
    392c:	23 e0       	ldi	r18, 0x03	; 3
    392e:	30 e0       	ldi	r19, 0x00	; 0
    3930:	49 e2       	ldi	r20, 0x29	; 41
    3932:	50 e0       	ldi	r21, 0x00	; 0
    3934:	67 e7       	ldi	r22, 0x77	; 119
    3936:	71 e0       	ldi	r23, 0x01	; 1
    3938:	89 e7       	ldi	r24, 0x79	; 121
    393a:	0e 94 84 1c 	call	0x3908	; 0x3908 <LCD_Display_Text>
	LCD_Display_Text(122,(const unsigned char*)Verdana14,24,23); // "for status."
    393e:	27 e1       	ldi	r18, 0x17	; 23
    3940:	30 e0       	ldi	r19, 0x00	; 0
    3942:	48 e1       	ldi	r20, 0x18	; 24
    3944:	50 e0       	ldi	r21, 0x00	; 0
    3946:	67 e7       	ldi	r22, 0x77	; 119
    3948:	71 e0       	ldi	r23, 0x01	; 1
    394a:	8a e7       	ldi	r24, 0x7A	; 122
    394c:	0e 94 84 1c 	call	0x3908	; 0x3908 <LCD_Display_Text>

	if ((General_error & (1 << DISARMED)) != 0) // Disarmed
    3950:	80 91 0e 05 	lds	r24, 0x050E
	{
		LCD_Display_Text(139,(const unsigned char*)Verdana14,20,43); // "(Disarmed)"
    3954:	2b e2       	ldi	r18, 0x2B	; 43
    3956:	30 e0       	ldi	r19, 0x00	; 0

	// Change Status screen depending on arm mode
	LCD_Display_Text(121,(const unsigned char*)Verdana14,41,3); 	// "Press"
	LCD_Display_Text(122,(const unsigned char*)Verdana14,24,23); // "for status."

	if ((General_error & (1 << DISARMED)) != 0) // Disarmed
    3958:	84 ff       	sbrs	r24, 4
    395a:	06 c0       	rjmp	.+12     	; 0x3968 <idle_screen+0x44>
	{
		LCD_Display_Text(139,(const unsigned char*)Verdana14,20,43); // "(Disarmed)"
    395c:	44 e1       	ldi	r20, 0x14	; 20
    395e:	50 e0       	ldi	r21, 0x00	; 0
    3960:	67 e7       	ldi	r22, 0x77	; 119
    3962:	71 e0       	ldi	r23, 0x01	; 1
    3964:	8b e8       	ldi	r24, 0x8B	; 139
    3966:	05 c0       	rjmp	.+10     	; 0x3972 <idle_screen+0x4e>
	}
	else
	{
		LCD_Display_Text(138,(const unsigned char*)Verdana14,28,43); // "(Armed)"
    3968:	4c e1       	ldi	r20, 0x1C	; 28
    396a:	50 e0       	ldi	r21, 0x00	; 0
    396c:	67 e7       	ldi	r22, 0x77	; 119
    396e:	71 e0       	ldi	r23, 0x01	; 1
    3970:	8a e8       	ldi	r24, 0x8A	; 138
    3972:	0e 94 84 1c 	call	0x3908	; 0x3908 <LCD_Display_Text>
	}
	
	write_buffer(buffer,1);
    3976:	61 e0       	ldi	r22, 0x01	; 1
    3978:	80 e0       	ldi	r24, 0x00	; 0
    397a:	91 e0       	ldi	r25, 0x01	; 1
    397c:	0e 94 a1 1a 	call	0x3542	; 0x3542 <write_buffer>
    3980:	08 95       	ret

00003982 <get_raw_gyros>:
		gyroADC[i] *= (int8_t)pgm_read_byte(&Gyro_Pol[Config.Orientation][i]);
	}
}

void get_raw_gyros(void)
{
    3982:	ac e0       	ldi	r26, 0x0C	; 12
    3984:	b0 e0       	ldi	r27, 0x00	; 0
    3986:	e7 ec       	ldi	r30, 0xC7	; 199
    3988:	fc e1       	ldi	r31, 0x1C	; 28
    398a:	0c 94 a3 3e 	jmp	0x7d46	; 0x7d46 <__prologue_saves__+0x20>
#ifdef KK21
	uint8_t Gyros[6];
	int16_t temp1, temp2;

	// For KK2.1 boards, use the i2c data from the MPU6050
	readI2CbyteArray(MPU60X0_DEFAULT_ADDRESS,MPU60X0_RA_GYRO_XOUT_H,(uint8_t *)Gyros,6);
    398e:	26 e0       	ldi	r18, 0x06	; 6
    3990:	ae 01       	movw	r20, r28
    3992:	4f 5f       	subi	r20, 0xFF	; 255
    3994:	5f 4f       	sbci	r21, 0xFF	; 255
    3996:	63 e4       	ldi	r22, 0x43	; 67
    3998:	80 ed       	ldi	r24, 0xD0	; 208
    399a:	0e 94 64 1e 	call	0x3cc8	; 0x3cc8 <readI2CbyteArray>

	// Reassemble data into gyroADC array and down-sample to reduce resolution and noise
	temp1 = Gyros[0] << 8;
    399e:	89 81       	ldd	r24, Y+1	; 0x01
    39a0:	90 e0       	ldi	r25, 0x00	; 0
    39a2:	98 2f       	mov	r25, r24
    39a4:	88 27       	eor	r24, r24
	temp2 = Gyros[1];
    39a6:	2a 81       	ldd	r18, Y+2	; 0x02
	RawADC[PITCH] = (temp1 + temp2) >> 6;
    39a8:	82 0f       	add	r24, r18
    39aa:	91 1d       	adc	r25, r1
    39ac:	36 e0       	ldi	r19, 0x06	; 6
    39ae:	95 95       	asr	r25
    39b0:	87 95       	ror	r24
    39b2:	3a 95       	dec	r19
    39b4:	e1 f7       	brne	.-8      	; 0x39ae <get_raw_gyros+0x2c>
    39b6:	9a 87       	std	Y+10, r25	; 0x0a
    39b8:	89 87       	std	Y+9, r24	; 0x09

	temp1 = Gyros[2] << 8;
    39ba:	8b 81       	ldd	r24, Y+3	; 0x03
    39bc:	90 e0       	ldi	r25, 0x00	; 0
    39be:	98 2f       	mov	r25, r24
    39c0:	88 27       	eor	r24, r24
	temp2 = Gyros[3];
    39c2:	2c 81       	ldd	r18, Y+4	; 0x04
	RawADC[ROLL] = (temp1 + temp2) >> 6;
    39c4:	82 0f       	add	r24, r18
    39c6:	91 1d       	adc	r25, r1
    39c8:	56 e0       	ldi	r21, 0x06	; 6
    39ca:	95 95       	asr	r25
    39cc:	87 95       	ror	r24
    39ce:	5a 95       	dec	r21
    39d0:	e1 f7       	brne	.-8      	; 0x39ca <get_raw_gyros+0x48>
    39d2:	98 87       	std	Y+8, r25	; 0x08
    39d4:	8f 83       	std	Y+7, r24	; 0x07

	temp1 = Gyros[4] << 8;
    39d6:	8d 81       	ldd	r24, Y+5	; 0x05
    39d8:	90 e0       	ldi	r25, 0x00	; 0
    39da:	98 2f       	mov	r25, r24
    39dc:	88 27       	eor	r24, r24
	temp2 = Gyros[5];
    39de:	2e 81       	ldd	r18, Y+6	; 0x06
	RawADC[YAW] = (temp1 + temp2) >> 6;
    39e0:	82 0f       	add	r24, r18
    39e2:	91 1d       	adc	r25, r1
    39e4:	76 e0       	ldi	r23, 0x06	; 6
    39e6:	95 95       	asr	r25
    39e8:	87 95       	ror	r24
    39ea:	7a 95       	dec	r23
    39ec:	e1 f7       	brne	.-8      	; 0x39e6 <get_raw_gyros+0x64>
    39ee:	9c 87       	std	Y+12, r25	; 0x0c
    39f0:	8b 87       	std	Y+11, r24	; 0x0b

	// Reorient the data as per the board orientation	
	for (i=0; i<NUMBEROFAXIS; i++)
	{
		// Rearrange the sensors
		gyroADC[i] 	= RawADC[(int8_t)pgm_read_byte(&Gyro_RPY_Order[Config.Orientation][i])];
    39f2:	20 91 07 06 	lds	r18, 0x0607
    39f6:	a0 e6       	ldi	r26, 0x60	; 96
    39f8:	b5 e0       	ldi	r27, 0x05	; 5
    39fa:	43 e0       	ldi	r20, 0x03	; 3
    39fc:	24 02       	muls	r18, r20
    39fe:	90 01       	movw	r18, r0
    3a00:	11 24       	eor	r1, r1
    3a02:	80 e0       	ldi	r24, 0x00	; 0
    3a04:	90 e0       	ldi	r25, 0x00	; 0
    3a06:	2c 5b       	subi	r18, 0xBC	; 188
    3a08:	38 4e       	sbci	r19, 0xE8	; 232
    3a0a:	f9 01       	movw	r30, r18
    3a0c:	e8 0f       	add	r30, r24
    3a0e:	f9 1f       	adc	r31, r25
    3a10:	e4 91       	lpm	r30, Z
    3a12:	ee 0f       	add	r30, r30
    3a14:	ff 0b       	sbc	r31, r31
    3a16:	41 e0       	ldi	r20, 0x01	; 1
    3a18:	50 e0       	ldi	r21, 0x00	; 0
    3a1a:	4c 0f       	add	r20, r28
    3a1c:	5d 1f       	adc	r21, r29
    3a1e:	e4 0f       	add	r30, r20
    3a20:	f5 1f       	adc	r31, r21
    3a22:	46 81       	ldd	r20, Z+6	; 0x06
    3a24:	57 81       	ldd	r21, Z+7	; 0x07
    3a26:	4d 93       	st	X+, r20
    3a28:	5d 93       	st	X+, r21
    3a2a:	01 96       	adiw	r24, 0x01	; 1
	read_adc(AIN_Z_GYRO);				// Read yaw gyro ADC2 (Yaw)
	RawADC[YAW] = ADCW;
#endif

	// Reorient the data as per the board orientation	
	for (i=0; i<NUMBEROFAXIS; i++)
    3a2c:	83 30       	cpi	r24, 0x03	; 3
    3a2e:	91 05       	cpc	r25, r1
    3a30:	61 f7       	brne	.-40     	; 0x3a0a <get_raw_gyros+0x88>
	{
		// Rearrange the sensors
		gyroADC[i] 	= RawADC[(int8_t)pgm_read_byte(&Gyro_RPY_Order[Config.Orientation][i])];
	}
}
    3a32:	2c 96       	adiw	r28, 0x0c	; 12
    3a34:	e2 e0       	ldi	r30, 0x02	; 2
    3a36:	0c 94 bf 3e 	jmp	0x7d7e	; 0x7d7e <__epilogue_restores__+0x20>

00003a3a <ReadGyros>:
//************************************************************

int16_t gyroADC[NUMBEROFAXIS];			// Holds Gyro ADCs

void ReadGyros(void)					// Conventional orientation
{
    3a3a:	1f 93       	push	r17
    3a3c:	cf 93       	push	r28
    3a3e:	df 93       	push	r29
	uint8_t i;

	get_raw_gyros();					// Updates gyroADC[]
    3a40:	0e 94 c1 1c 	call	0x3982	; 0x3982 <get_raw_gyros>
	{
		// Remove offsets from gyro outputs
		gyroADC[i] -= Config.gyroZero[i];

		// Change polarity
		gyroADC[i] *= (int8_t)pgm_read_byte(&Gyro_Pol[Config.Orientation][i]);
    3a44:	20 91 07 06 	lds	r18, 0x0607
    3a48:	cb e2       	ldi	r28, 0x2B	; 43
    3a4a:	d7 e0       	ldi	r29, 0x07	; 7
    3a4c:	a0 e6       	ldi	r26, 0x60	; 96
    3a4e:	b5 e0       	ldi	r27, 0x05	; 5
    3a50:	83 e0       	ldi	r24, 0x03	; 3
    3a52:	28 02       	muls	r18, r24
    3a54:	90 01       	movw	r18, r0
    3a56:	11 24       	eor	r1, r1
    3a58:	80 e0       	ldi	r24, 0x00	; 0
    3a5a:	90 e0       	ldi	r25, 0x00	; 0
    3a5c:	2e 5c       	subi	r18, 0xCE	; 206
    3a5e:	38 4e       	sbci	r19, 0xE8	; 232
	get_raw_gyros();					// Updates gyroADC[]

	for (i=0; i<NUMBEROFAXIS; i++)	
	{
		// Remove offsets from gyro outputs
		gyroADC[i] -= Config.gyroZero[i];
    3a60:	69 91       	ld	r22, Y+
    3a62:	79 91       	ld	r23, Y+
    3a64:	f9 01       	movw	r30, r18
    3a66:	e8 0f       	add	r30, r24
    3a68:	f9 1f       	adc	r31, r25

		// Change polarity
		gyroADC[i] *= (int8_t)pgm_read_byte(&Gyro_Pol[Config.Orientation][i]);
    3a6a:	14 91       	lpm	r17, Z
	get_raw_gyros();					// Updates gyroADC[]

	for (i=0; i<NUMBEROFAXIS; i++)	
	{
		// Remove offsets from gyro outputs
		gyroADC[i] -= Config.gyroZero[i];
    3a6c:	4d 91       	ld	r20, X+
    3a6e:	5c 91       	ld	r21, X
    3a70:	11 97       	sbiw	r26, 0x01	; 1
    3a72:	46 1b       	sub	r20, r22
    3a74:	57 0b       	sbc	r21, r23

		// Change polarity
		gyroADC[i] *= (int8_t)pgm_read_byte(&Gyro_Pol[Config.Orientation][i]);
    3a76:	14 03       	mulsu	r17, r20
    3a78:	b0 01       	movw	r22, r0
    3a7a:	15 9f       	mul	r17, r21
    3a7c:	70 0d       	add	r23, r0
    3a7e:	11 24       	eor	r1, r1
    3a80:	6d 93       	st	X+, r22
    3a82:	7d 93       	st	X+, r23
    3a84:	01 96       	adiw	r24, 0x01	; 1
{
	uint8_t i;

	get_raw_gyros();					// Updates gyroADC[]

	for (i=0; i<NUMBEROFAXIS; i++)	
    3a86:	83 30       	cpi	r24, 0x03	; 3
    3a88:	91 05       	cpc	r25, r1
    3a8a:	51 f7       	brne	.-44     	; 0x3a60 <ReadGyros+0x26>
		gyroADC[i] -= Config.gyroZero[i];

		// Change polarity
		gyroADC[i] *= (int8_t)pgm_read_byte(&Gyro_Pol[Config.Orientation][i]);
	}
}
    3a8c:	df 91       	pop	r29
    3a8e:	cf 91       	pop	r28
    3a90:	1f 91       	pop	r17
    3a92:	08 95       	ret

00003a94 <CalibrateGyrosFast>:
//***************************************************************
// Calibration routines
//***************************************************************

void CalibrateGyrosFast(void)
{
    3a94:	cf 93       	push	r28
	uint8_t i;

	// Clear gyro zeros
	memset(&Config.gyroZero[ROLL],0,(sizeof(int16_t) * NUMBEROFAXIS));
    3a96:	86 e0       	ldi	r24, 0x06	; 6
    3a98:	eb e2       	ldi	r30, 0x2B	; 43
    3a9a:	f7 e0       	ldi	r31, 0x07	; 7
    3a9c:	df 01       	movw	r26, r30
    3a9e:	1d 92       	st	X+, r1
    3aa0:	8a 95       	dec	r24
    3aa2:	e9 f7       	brne	.-6      	; 0x3a9e <CalibrateGyrosFast+0xa>
    3aa4:	c0 e2       	ldi	r28, 0x20	; 32

	for (i=0; i<32; i++)				// Calculate average over 32 reads
	{
		get_raw_gyros();				// Updates gyroADC[]
    3aa6:	0e 94 c1 1c 	call	0x3982	; 0x3982 <get_raw_gyros>

		Config.gyroZero[ROLL] 	+= gyroADC[ROLL];						
    3aaa:	80 91 2b 07 	lds	r24, 0x072B
    3aae:	90 91 2c 07 	lds	r25, 0x072C
    3ab2:	20 91 60 05 	lds	r18, 0x0560
    3ab6:	30 91 61 05 	lds	r19, 0x0561
    3aba:	82 0f       	add	r24, r18
    3abc:	93 1f       	adc	r25, r19
    3abe:	90 93 2c 07 	sts	0x072C, r25
    3ac2:	80 93 2b 07 	sts	0x072B, r24
		Config.gyroZero[PITCH] 	+= gyroADC[PITCH];	
    3ac6:	80 91 2d 07 	lds	r24, 0x072D
    3aca:	90 91 2e 07 	lds	r25, 0x072E
    3ace:	20 91 62 05 	lds	r18, 0x0562
    3ad2:	30 91 63 05 	lds	r19, 0x0563
    3ad6:	82 0f       	add	r24, r18
    3ad8:	93 1f       	adc	r25, r19
    3ada:	90 93 2e 07 	sts	0x072E, r25
    3ade:	80 93 2d 07 	sts	0x072D, r24
		Config.gyroZero[YAW] 	+= gyroADC[YAW];
    3ae2:	80 91 2f 07 	lds	r24, 0x072F
    3ae6:	90 91 30 07 	lds	r25, 0x0730
    3aea:	20 91 64 05 	lds	r18, 0x0564
    3aee:	30 91 65 05 	lds	r19, 0x0565
    3af2:	82 0f       	add	r24, r18
    3af4:	93 1f       	adc	r25, r19
    3af6:	90 93 30 07 	sts	0x0730, r25
    3afa:	80 93 2f 07 	sts	0x072F, r24
    3afe:	8f e4       	ldi	r24, 0x4F	; 79
    3b00:	93 ec       	ldi	r25, 0xC3	; 195
    3b02:	01 97       	sbiw	r24, 0x01	; 1
    3b04:	f1 f7       	brne	.-4      	; 0x3b02 <CalibrateGyrosFast+0x6e>
    3b06:	00 c0       	rjmp	.+0      	; 0x3b08 <CalibrateGyrosFast+0x74>
    3b08:	00 00       	nop
    3b0a:	c1 50       	subi	r28, 0x01	; 1
	uint8_t i;

	// Clear gyro zeros
	memset(&Config.gyroZero[ROLL],0,(sizeof(int16_t) * NUMBEROFAXIS));

	for (i=0; i<32; i++)				// Calculate average over 32 reads
    3b0c:	61 f6       	brne	.-104    	; 0x3aa6 <CalibrateGyrosFast+0x12>
		_delay_ms(10);					// Get a better gyro average over time
	}

	for (i=0; i<NUMBEROFAXIS; i++)		// Average readings for all axis
	{
		Config.gyroZero[i] 	= (Config.gyroZero[i] >> 5);	// Divide by 32	
    3b0e:	80 91 2b 07 	lds	r24, 0x072B
    3b12:	90 91 2c 07 	lds	r25, 0x072C
    3b16:	e5 e0       	ldi	r30, 0x05	; 5
    3b18:	95 95       	asr	r25
    3b1a:	87 95       	ror	r24
    3b1c:	ea 95       	dec	r30
    3b1e:	e1 f7       	brne	.-8      	; 0x3b18 <CalibrateGyrosFast+0x84>
    3b20:	90 93 2c 07 	sts	0x072C, r25
    3b24:	80 93 2b 07 	sts	0x072B, r24
    3b28:	80 91 2d 07 	lds	r24, 0x072D
    3b2c:	90 91 2e 07 	lds	r25, 0x072E
    3b30:	f5 e0       	ldi	r31, 0x05	; 5
    3b32:	95 95       	asr	r25
    3b34:	87 95       	ror	r24
    3b36:	fa 95       	dec	r31
    3b38:	e1 f7       	brne	.-8      	; 0x3b32 <CalibrateGyrosFast+0x9e>
    3b3a:	90 93 2e 07 	sts	0x072E, r25
    3b3e:	80 93 2d 07 	sts	0x072D, r24
    3b42:	80 91 2f 07 	lds	r24, 0x072F
    3b46:	90 91 30 07 	lds	r25, 0x0730
    3b4a:	a5 e0       	ldi	r26, 0x05	; 5
    3b4c:	95 95       	asr	r25
    3b4e:	87 95       	ror	r24
    3b50:	aa 95       	dec	r26
    3b52:	e1 f7       	brne	.-8      	; 0x3b4c <CalibrateGyrosFast+0xb8>
    3b54:	90 93 30 07 	sts	0x0730, r25
    3b58:	80 93 2f 07 	sts	0x072F, r24
	}
}
    3b5c:	cf 91       	pop	r28
    3b5e:	08 95       	ret

00003b60 <CalibrateGyrosSlow>:

void CalibrateGyrosSlow(void)
{
    3b60:	ac e0       	ldi	r26, 0x0C	; 12
    3b62:	b0 e0       	ldi	r27, 0x00	; 0
    3b64:	e6 eb       	ldi	r30, 0xB6	; 182
    3b66:	fd e1       	ldi	r31, 0x1D	; 29
    3b68:	0c 94 93 3e 	jmp	0x7d26	; 0x7d26 <__prologue_saves__>
	// Force recalculation
	for (axis = 0; axis < NUMBEROFAXIS; axis++) 
	{
// Optimise starting point for each board
#ifdef KK21
		GyroSmooth[axis] = 0;
    3b6c:	19 82       	std	Y+1, r1	; 0x01
    3b6e:	1a 82       	std	Y+2, r1	; 0x02
    3b70:	1b 82       	std	Y+3, r1	; 0x03
    3b72:	1c 82       	std	Y+4, r1	; 0x04
    3b74:	1d 82       	std	Y+5, r1	; 0x05
    3b76:	1e 82       	std	Y+6, r1	; 0x06
    3b78:	1f 82       	std	Y+7, r1	; 0x07
    3b7a:	18 86       	std	Y+8, r1	; 0x08
    3b7c:	19 86       	std	Y+9, r1	; 0x09
    3b7e:	1a 86       	std	Y+10, r1	; 0x0a
    3b80:	1b 86       	std	Y+11, r1	; 0x0b
    3b82:	1c 86       	std	Y+12, r1	; 0x0c
    3b84:	00 e0       	ldi	r16, 0x00	; 0
    3b86:	10 e0       	ldi	r17, 0x00	; 0
    3b88:	21 2c       	mov	r2, r1
    3b8a:	31 2c       	mov	r3, r1
		GyroSmooth[axis] = 500;
#endif
	}

	// Wait until gyros stable. Timeout after 5 seconds
	while (!Gyros_Stable && (Gyro_seconds <= 5))
    3b8c:	85 e0       	ldi	r24, 0x05	; 5
    3b8e:	83 15       	cp	r24, r3
    3b90:	08 f4       	brcc	.+2      	; 0x3b94 <CalibrateGyrosSlow+0x34>
    3b92:	6e c0       	rjmp	.+220    	; 0x3c70 <CalibrateGyrosSlow+0x110>
	{
		// Update status timeout
		Gyro_timeout += (uint8_t) (TCNT2 - Gyro_TCNT2);
    3b94:	80 91 b2 00 	lds	r24, 0x00B2
    3b98:	82 19       	sub	r24, r2
    3b9a:	08 0f       	add	r16, r24
    3b9c:	11 1d       	adc	r17, r1
		Gyro_TCNT2 = TCNT2;
    3b9e:	20 90 b2 00 	lds	r2, 0x00B2

		// Count elapsed seconds
		if (Gyro_timeout > SECOND_TIMER)
    3ba2:	0c 34       	cpi	r16, 0x4C	; 76
    3ba4:	2c e4       	ldi	r18, 0x4C	; 76
    3ba6:	12 07       	cpc	r17, r18
    3ba8:	18 f0       	brcs	.+6      	; 0x3bb0 <CalibrateGyrosSlow+0x50>
		{
			Gyro_seconds++;
    3baa:	33 94       	inc	r3
			Gyro_timeout = 0;
    3bac:	00 e0       	ldi	r16, 0x00	; 0
    3bae:	10 e0       	ldi	r17, 0x00	; 0
		}

		get_raw_gyros();
    3bb0:	0e 94 c1 1c 	call	0x3982	; 0x3982 <get_raw_gyros>
    3bb4:	b0 e6       	ldi	r27, 0x60	; 96
    3bb6:	eb 2e       	mov	r14, r27
    3bb8:	b5 e0       	ldi	r27, 0x05	; 5
    3bba:	fb 2e       	mov	r15, r27
    3bbc:	ce 01       	movw	r24, r28
    3bbe:	01 96       	adiw	r24, 0x01	; 1
    3bc0:	6c 01       	movw	r12, r24
    3bc2:	8b e2       	ldi	r24, 0x2B	; 43
    3bc4:	a8 2e       	mov	r10, r24
    3bc6:	87 e0       	ldi	r24, 0x07	; 7
    3bc8:	b8 2e       	mov	r11, r24

		// Calculate very long rolling average
		for (axis = 0; axis < NUMBEROFAXIS; axis++) 
		{
			GyroSmooth[axis] = ((GyroSmooth[axis] * (float)999) + (float)(gyroADC[axis])) / (float)1000;
    3bca:	f7 01       	movw	r30, r14
    3bcc:	81 90       	ld	r8, Z+
    3bce:	91 90       	ld	r9, Z+
    3bd0:	7f 01       	movw	r14, r30
    3bd2:	20 e0       	ldi	r18, 0x00	; 0
    3bd4:	30 ec       	ldi	r19, 0xC0	; 192
    3bd6:	49 e7       	ldi	r20, 0x79	; 121
    3bd8:	54 e4       	ldi	r21, 0x44	; 68
    3bda:	f6 01       	movw	r30, r12
    3bdc:	60 81       	ld	r22, Z
    3bde:	71 81       	ldd	r23, Z+1	; 0x01
    3be0:	82 81       	ldd	r24, Z+2	; 0x02
    3be2:	93 81       	ldd	r25, Z+3	; 0x03
    3be4:	0e 94 36 3d 	call	0x7a6c	; 0x7a6c <__mulsf3>
    3be8:	2b 01       	movw	r4, r22
    3bea:	3c 01       	movw	r6, r24
    3bec:	b4 01       	movw	r22, r8
    3bee:	88 27       	eor	r24, r24
    3bf0:	77 fd       	sbrc	r23, 7
    3bf2:	80 95       	com	r24
    3bf4:	98 2f       	mov	r25, r24
    3bf6:	0e 94 56 3c 	call	0x78ac	; 0x78ac <__floatsisf>
    3bfa:	9b 01       	movw	r18, r22
    3bfc:	ac 01       	movw	r20, r24
    3bfe:	c3 01       	movw	r24, r6
    3c00:	b2 01       	movw	r22, r4
    3c02:	0e 94 2b 3b 	call	0x7656	; 0x7656 <__addsf3>
    3c06:	20 e0       	ldi	r18, 0x00	; 0
    3c08:	30 e0       	ldi	r19, 0x00	; 0
    3c0a:	4a e7       	ldi	r20, 0x7A	; 122
    3c0c:	54 e4       	ldi	r21, 0x44	; 68
    3c0e:	0e 94 bb 3b 	call	0x7776	; 0x7776 <__divsf3>
    3c12:	f6 01       	movw	r30, r12
    3c14:	61 93       	st	Z+, r22
    3c16:	71 93       	st	Z+, r23
    3c18:	81 93       	st	Z+, r24
    3c1a:	91 93       	st	Z+, r25
    3c1c:	6f 01       	movw	r12, r30
			Config.gyroZero[axis] = (int16_t)GyroSmooth[axis];
    3c1e:	0e 94 23 3c 	call	0x7846	; 0x7846 <__fixsfsi>
    3c22:	f5 01       	movw	r30, r10
    3c24:	61 93       	st	Z+, r22
    3c26:	71 93       	st	Z+, r23
    3c28:	5f 01       	movw	r10, r30
		}

		get_raw_gyros();

		// Calculate very long rolling average
		for (axis = 0; axis < NUMBEROFAXIS; axis++) 
    3c2a:	f6 e6       	ldi	r31, 0x66	; 102
    3c2c:	ef 16       	cp	r14, r31
    3c2e:	f5 e0       	ldi	r31, 0x05	; 5
    3c30:	ff 06       	cpc	r15, r31
    3c32:	59 f6       	brne	.-106    	; 0x3bca <CalibrateGyrosSlow+0x6a>
			GyroSmooth[axis] = ((GyroSmooth[axis] * (float)999) + (float)(gyroADC[axis])) / (float)1000;
			Config.gyroZero[axis] = (int16_t)GyroSmooth[axis];
		}

		// Check for movement
		ReadGyros();
    3c34:	0e 94 1d 1d 	call	0x3a3a	; 0x3a3a <ReadGyros>

		if ((gyroADC[ROLL] > GYROS_STABLE) || (gyroADC[ROLL] < -GYROS_STABLE) ||
    3c38:	80 91 60 05 	lds	r24, 0x0560
    3c3c:	90 91 61 05 	lds	r25, 0x0561
    3c40:	01 96       	adiw	r24, 0x01	; 1
    3c42:	03 97       	sbiw	r24, 0x03	; 3
    3c44:	08 f0       	brcs	.+2      	; 0x3c48 <CalibrateGyrosSlow+0xe8>
    3c46:	a2 cf       	rjmp	.-188    	; 0x3b8c <CalibrateGyrosSlow+0x2c>
    3c48:	80 91 62 05 	lds	r24, 0x0562
    3c4c:	90 91 63 05 	lds	r25, 0x0563
    3c50:	01 96       	adiw	r24, 0x01	; 1
    3c52:	03 97       	sbiw	r24, 0x03	; 3
    3c54:	08 f0       	brcs	.+2      	; 0x3c58 <CalibrateGyrosSlow+0xf8>
    3c56:	9a cf       	rjmp	.-204    	; 0x3b8c <CalibrateGyrosSlow+0x2c>
			(gyroADC[PITCH] > GYROS_STABLE) || (gyroADC[PITCH] < -GYROS_STABLE) ||
			(gyroADC[YAW] > GYROS_STABLE) || (gyroADC[YAW] < -GYROS_STABLE))
    3c58:	80 91 64 05 	lds	r24, 0x0564
    3c5c:	90 91 65 05 	lds	r25, 0x0565

		// Check for movement
		ReadGyros();

		if ((gyroADC[ROLL] > GYROS_STABLE) || (gyroADC[ROLL] < -GYROS_STABLE) ||
			(gyroADC[PITCH] > GYROS_STABLE) || (gyroADC[PITCH] < -GYROS_STABLE) ||
    3c60:	82 30       	cpi	r24, 0x02	; 2
    3c62:	91 05       	cpc	r25, r1
    3c64:	0c f0       	brlt	.+2      	; 0x3c68 <CalibrateGyrosSlow+0x108>
    3c66:	92 cf       	rjmp	.-220    	; 0x3b8c <CalibrateGyrosSlow+0x2c>
			(gyroADC[YAW] > GYROS_STABLE) || (gyroADC[YAW] < -GYROS_STABLE))
    3c68:	8f 3f       	cpi	r24, 0xFF	; 255
    3c6a:	9f 4f       	sbci	r25, 0xFF	; 255
    3c6c:	0c f4       	brge	.+2      	; 0x3c70 <CalibrateGyrosSlow+0x110>
    3c6e:	8e cf       	rjmp	.-228    	; 0x3b8c <CalibrateGyrosSlow+0x2c>
		else
		{
			Gyros_Stable = true;
		}
	}
}
    3c70:	2c 96       	adiw	r28, 0x0c	; 12
    3c72:	e2 e1       	ldi	r30, 0x12	; 18
    3c74:	0c 94 af 3e 	jmp	0x7d5e	; 0x7d5e <__epilogue_restores__>

00003c78 <init_i2c_gyros>:
//***************************************************************

void init_i2c_gyros(void)
{
	// First, configure the MPU6050
	writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_PWR_MGMT_1, 0x01); 			// Gyro X clock, awake
    3c78:	41 e0       	ldi	r20, 0x01	; 1
    3c7a:	6b e6       	ldi	r22, 0x6B	; 107
    3c7c:	80 ed       	ldi	r24, 0xD0	; 208
    3c7e:	0e 94 4c 1e 	call	0x3c98	; 0x3c98 <writeI2Cbyte>

	// Other regs cannot be written until the MPU6050 is out of sleep mode
	writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_CONFIG, MPU60X0_DLPF_BW_5);	// 0x06 = 5Hz, (5)10Hz, (4)20Hz, (3)42Hz, (2)98Hz, (1)188Hz LPF
    3c82:	46 e0       	ldi	r20, 0x06	; 6
    3c84:	6a e1       	ldi	r22, 0x1A	; 26
    3c86:	80 ed       	ldi	r24, 0xD0	; 208
    3c88:	0e 94 4c 1e 	call	0x3c98	; 0x3c98 <writeI2Cbyte>
	
	// Now configure gyros
	writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_GYRO_CONFIG, GYROFS500DEG);	// 500 deg/sec
    3c8c:	48 e0       	ldi	r20, 0x08	; 8
    3c8e:	6b e1       	ldi	r22, 0x1B	; 27
    3c90:	80 ed       	ldi	r24, 0xD0	; 208
    3c92:	0e 94 4c 1e 	call	0x3c98	; 0x3c98 <writeI2Cbyte>
    3c96:	08 95       	ret

00003c98 <writeI2Cbyte>:
//************************************************************
// KK2.1 gyro-specifc code
//************************************************************

void writeI2Cbyte(uint8_t address, uint8_t location, uint8_t value)
{
    3c98:	a2 e0       	ldi	r26, 0x02	; 2
    3c9a:	b0 e0       	ldi	r27, 0x00	; 0
    3c9c:	e2 e5       	ldi	r30, 0x52	; 82
    3c9e:	fe e1       	ldi	r31, 0x1E	; 30
    3ca0:	0c 94 a3 3e 	jmp	0x7d46	; 0x7d46 <__prologue_saves__+0x20>
    i2c_start_wait(address+I2C_WRITE);				// Set up device address 
    3ca4:	4a 83       	std	Y+2, r20	; 0x02
    3ca6:	69 83       	std	Y+1, r22	; 0x01
    3ca8:	0e 94 18 3a 	call	0x7430	; 0x7430 <i2c_start_wait>
    i2c_write(location);							// Set up register address 
    3cac:	69 81       	ldd	r22, Y+1	; 0x01
    3cae:	86 2f       	mov	r24, r22
    3cb0:	0e 94 69 3a 	call	0x74d2	; 0x74d2 <i2c_write>
    i2c_write(value); 								// Write byte
    3cb4:	4a 81       	ldd	r20, Y+2	; 0x02
    3cb6:	84 2f       	mov	r24, r20
    3cb8:	0e 94 69 3a 	call	0x74d2	; 0x74d2 <i2c_write>
    i2c_stop();
    3cbc:	0e 94 5a 3a 	call	0x74b4	; 0x74b4 <i2c_stop>
}
    3cc0:	22 96       	adiw	r28, 0x02	; 2
    3cc2:	e2 e0       	ldi	r30, 0x02	; 2
    3cc4:	0c 94 bf 3e 	jmp	0x7d7e	; 0x7d7e <__epilogue_restores__+0x20>

00003cc8 <readI2CbyteArray>:

void readI2CbyteArray(uint8_t address, uint8_t location, uint8_t *array,uint8_t size)
{
    3cc8:	a3 e0       	ldi	r26, 0x03	; 3
    3cca:	b0 e0       	ldi	r27, 0x00	; 0
    3ccc:	ea e6       	ldi	r30, 0x6A	; 106
    3cce:	fe e1       	ldi	r31, 0x1E	; 30
    3cd0:	0c 94 9d 3e 	jmp	0x7d3a	; 0x7d3a <__prologue_saves__+0x14>
    3cd4:	18 2f       	mov	r17, r24
    3cd6:	e2 2e       	mov	r14, r18
	int i=0;

    i2c_start_wait(address+I2C_WRITE);
    3cd8:	4a 83       	std	Y+2, r20	; 0x02
    3cda:	5b 83       	std	Y+3, r21	; 0x03
    3cdc:	69 83       	std	Y+1, r22	; 0x01
    3cde:	0e 94 18 3a 	call	0x7430	; 0x7430 <i2c_start_wait>
    i2c_write(location);							// Set up register address 
    3ce2:	69 81       	ldd	r22, Y+1	; 0x01
    3ce4:	86 2f       	mov	r24, r22
    3ce6:	0e 94 69 3a 	call	0x74d2	; 0x74d2 <i2c_write>
    i2c_rep_start(address+I2C_READ);
    3cea:	81 e0       	ldi	r24, 0x01	; 1
    3cec:	81 0f       	add	r24, r17
    3cee:	0e 94 57 3a 	call	0x74ae	; 0x74ae <i2c_rep_start>
    3cf2:	4a 81       	ldd	r20, Y+2	; 0x02
    3cf4:	c4 2e       	mov	r12, r20
    3cf6:	5b 81       	ldd	r21, Y+3	; 0x03
    3cf8:	d5 2e       	mov	r13, r21
    i2c_stop();
}

void readI2CbyteArray(uint8_t address, uint8_t location, uint8_t *array,uint8_t size)
{
	int i=0;
    3cfa:	00 e0       	ldi	r16, 0x00	; 0
    3cfc:	10 e0       	ldi	r17, 0x00	; 0

    i2c_start_wait(address+I2C_WRITE);
    i2c_write(location);							// Set up register address 
    i2c_rep_start(address+I2C_READ);

	while (i < size)
    3cfe:	f1 2c       	mov	r15, r1
    3d00:	0e 15       	cp	r16, r14
    3d02:	1f 05       	cpc	r17, r15
    3d04:	84 f4       	brge	.+32     	; 0x3d26 <readI2CbyteArray+0x5e>
	{
		if ((i+1)!=size)
    3d06:	0f 5f       	subi	r16, 0xFF	; 255
    3d08:	1f 4f       	sbci	r17, 0xFF	; 255
    3d0a:	0e 15       	cp	r16, r14
    3d0c:	1f 05       	cpc	r17, r15
    3d0e:	19 f0       	breq	.+6      	; 0x3d16 <readI2CbyteArray+0x4e>
		{
			array[i]=i2c_readAck();
    3d10:	0e 94 89 3a 	call	0x7512	; 0x7512 <i2c_readAck>
    3d14:	02 c0       	rjmp	.+4      	; 0x3d1a <readI2CbyteArray+0x52>
		}
		else
		{
			array[i]=i2c_readNak(); 				// Read without ACK on last byte
    3d16:	0e 94 a2 3a 	call	0x7544	; 0x7544 <i2c_readNak>
    3d1a:	f6 01       	movw	r30, r12
    3d1c:	80 83       	st	Z, r24
    3d1e:	ff ef       	ldi	r31, 0xFF	; 255
    3d20:	cf 1a       	sub	r12, r31
    3d22:	df 0a       	sbc	r13, r31
    3d24:	ed cf       	rjmp	.-38     	; 0x3d00 <readI2CbyteArray+0x38>
		}
		i++;
	}

    i2c_stop();
    3d26:	0e 94 5a 3a 	call	0x74b4	; 0x74b4 <i2c_stop>
}
    3d2a:	23 96       	adiw	r28, 0x03	; 3
    3d2c:	e8 e0       	ldi	r30, 0x08	; 8
    3d2e:	0c 94 b9 3e 	jmp	0x7d72	; 0x7d72 <__epilogue_restores__+0x14>

00003d32 <getEstimatedAttitude>:
float	INV_GYR_CMPF_FACTOR;
float 	accSmooth[NUMBEROFAXIS];
int16_t	angle[2]; 			// Attitude

void getEstimatedAttitude(uint16_t period)
{
    3d32:	aa e0       	ldi	r26, 0x0A	; 10
    3d34:	b0 e0       	ldi	r27, 0x00	; 0
    3d36:	ef e9       	ldi	r30, 0x9F	; 159
    3d38:	fe e1       	ldi	r31, 0x1E	; 30
    3d3a:	0c 94 93 3e 	jmp	0x7d26	; 0x7d26 <__prologue_saves__>
    3d3e:	bc 01       	movw	r22, r24
	int16_t		roll_sq, pitch_sq, yaw_sq;
	uint8_t		axis;
	uint16_t	AccMag = 0;

	// Reset IMU 
	if (Config.Main_flags & (1 << FirstTimeIMU))
    3d40:	80 91 3c 07 	lds	r24, 0x073C
    3d44:	82 ff       	sbrs	r24, 2
    3d46:	37 c0       	rjmp	.+110    	; 0x3db6 <getEstimatedAttitude+0x84>
	{
		deltaTime = 0.0f;
		Config.Main_flags &= ~(1 << FirstTimeIMU);
    3d48:	8b 7f       	andi	r24, 0xFB	; 251
    3d4a:	80 93 3c 07 	sts	0x073C, r24
		
		// Reset accumulating variables
		for (axis = 0; axis < NUMBEROFAXIS; axis++) 
		{	
			accSmooth[axis] = 0;
    3d4e:	10 92 6e 05 	sts	0x056E, r1
    3d52:	10 92 6f 05 	sts	0x056F, r1
    3d56:	10 92 70 05 	sts	0x0570, r1
    3d5a:	10 92 71 05 	sts	0x0571, r1
			deltaGyroAngle[axis] = 0;
    3d5e:	10 92 12 05 	sts	0x0512, r1
    3d62:	10 92 13 05 	sts	0x0513, r1
    3d66:	10 92 14 05 	sts	0x0514, r1
    3d6a:	10 92 15 05 	sts	0x0515, r1
		Config.Main_flags &= ~(1 << FirstTimeIMU);
		
		// Reset accumulating variables
		for (axis = 0; axis < NUMBEROFAXIS; axis++) 
		{	
			accSmooth[axis] = 0;
    3d6e:	10 92 72 05 	sts	0x0572, r1
    3d72:	10 92 73 05 	sts	0x0573, r1
    3d76:	10 92 74 05 	sts	0x0574, r1
    3d7a:	10 92 75 05 	sts	0x0575, r1
			deltaGyroAngle[axis] = 0;
    3d7e:	10 92 16 05 	sts	0x0516, r1
    3d82:	10 92 17 05 	sts	0x0517, r1
    3d86:	10 92 18 05 	sts	0x0518, r1
    3d8a:	10 92 19 05 	sts	0x0519, r1
		Config.Main_flags &= ~(1 << FirstTimeIMU);
		
		// Reset accumulating variables
		for (axis = 0; axis < NUMBEROFAXIS; axis++) 
		{	
			accSmooth[axis] = 0;
    3d8e:	10 92 76 05 	sts	0x0576, r1
    3d92:	10 92 77 05 	sts	0x0577, r1
    3d96:	10 92 78 05 	sts	0x0578, r1
    3d9a:	10 92 79 05 	sts	0x0579, r1
			deltaGyroAngle[axis] = 0;
    3d9e:	10 92 1a 05 	sts	0x051A, r1
    3da2:	10 92 1b 05 	sts	0x051B, r1
    3da6:	10 92 1c 05 	sts	0x051C, r1
    3daa:	10 92 1d 05 	sts	0x051D, r1
	uint16_t	AccMag = 0;

	// Reset IMU 
	if (Config.Main_flags & (1 << FirstTimeIMU))
	{
		deltaTime = 0.0f;
    3dae:	c1 2c       	mov	r12, r1
    3db0:	d1 2c       	mov	r13, r1
    3db2:	76 01       	movw	r14, r12
    3db4:	0c c0       	rjmp	.+24     	; 0x3dce <getEstimatedAttitude+0x9c>
		}
	}
	// Scale gyro signal to angle
	else
	{
		tempf = (float)period;
    3db6:	80 e0       	ldi	r24, 0x00	; 0
    3db8:	90 e0       	ldi	r25, 0x00	; 0
    3dba:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <__floatunsisf>
		deltaTime = tempf * GYRO_SCALE;	
    3dbe:	25 e9       	ldi	r18, 0x95	; 149
    3dc0:	3f eb       	ldi	r19, 0xBF	; 191
    3dc2:	46 e5       	ldi	r20, 0x56	; 86
    3dc4:	55 e3       	ldi	r21, 0x35	; 53
    3dc6:	0e 94 36 3d 	call	0x7a6c	; 0x7a6c <__mulsf3>
    3dca:	6b 01       	movw	r12, r22
    3dcc:	7c 01       	movw	r14, r24

	// Smooth Acc signals and estimate angle from gyro
	for (axis = 0; axis < NUMBEROFAXIS; axis++) 
	{
		// Acc LPF
		if (Config.Acc_LPF > 1)
    3dce:	20 91 0d 06 	lds	r18, 0x060D
    3dd2:	29 83       	std	Y+1, r18	; 0x01
		{
			// Acc LPF
			accSmooth[axis] = ((accSmooth[axis] * (float)(Config.Acc_LPF - 1)) - (float)(accADC[axis])) / Config.Acc_LPF;
    3dd4:	82 2f       	mov	r24, r18
    3dd6:	99 27       	eor	r25, r25
    3dd8:	87 fd       	sbrc	r24, 7
    3dda:	90 95       	com	r25
    3ddc:	01 97       	sbiw	r24, 0x01	; 1
    3dde:	20 e6       	ldi	r18, 0x60	; 96
    3de0:	22 2e       	mov	r2, r18
    3de2:	25 e0       	ldi	r18, 0x05	; 5
    3de4:	32 2e       	mov	r3, r18
    3de6:	42 e1       	ldi	r20, 0x12	; 18
    3de8:	55 e0       	ldi	r21, 0x05	; 5
    3dea:	5c 83       	std	Y+4, r21	; 0x04
    3dec:	4b 83       	std	Y+3, r20	; 0x03
    3dee:	ee e6       	ldi	r30, 0x6E	; 110
    3df0:	f5 e0       	ldi	r31, 0x05	; 5
    3df2:	fa 87       	std	Y+10, r31	; 0x0a
    3df4:	e9 87       	std	Y+9, r30	; 0x09
    3df6:	0d e2       	ldi	r16, 0x2D	; 45
    3df8:	15 e0       	ldi	r17, 0x05	; 5
    3dfa:	9c 01       	movw	r18, r24
    3dfc:	44 27       	eor	r20, r20
    3dfe:	37 fd       	sbrc	r19, 7
    3e00:	40 95       	com	r20
    3e02:	54 2f       	mov	r21, r20
    3e04:	2d 83       	std	Y+5, r18	; 0x05
    3e06:	3e 83       	std	Y+6, r19	; 0x06
    3e08:	4f 83       	std	Y+7, r20	; 0x07
    3e0a:	58 87       	std	Y+8, r21	; 0x08
    3e0c:	39 81       	ldd	r19, Y+1	; 0x01
    3e0e:	43 2e       	mov	r4, r19
    3e10:	55 24       	eor	r5, r5
    3e12:	47 fc       	sbrc	r4, 7
    3e14:	50 94       	com	r5
    3e16:	65 2c       	mov	r6, r5
    3e18:	75 2c       	mov	r7, r5

	// Smooth Acc signals and estimate angle from gyro
	for (axis = 0; axis < NUMBEROFAXIS; axis++) 
	{
		// Acc LPF
		if (Config.Acc_LPF > 1)
    3e1a:	49 81       	ldd	r20, Y+1	; 0x01
    3e1c:	42 30       	cpi	r20, 0x02	; 2
    3e1e:	64 f1       	brlt	.+88     	; 0x3e78 <getEstimatedAttitude+0x146>
		{
			// Acc LPF
			accSmooth[axis] = ((accSmooth[axis] * (float)(Config.Acc_LPF - 1)) - (float)(accADC[axis])) / Config.Acc_LPF;
    3e20:	6d 81       	ldd	r22, Y+5	; 0x05
    3e22:	7e 81       	ldd	r23, Y+6	; 0x06
    3e24:	8f 81       	ldd	r24, Y+7	; 0x07
    3e26:	98 85       	ldd	r25, Y+8	; 0x08
    3e28:	0e 94 56 3c 	call	0x78ac	; 0x78ac <__floatsisf>
    3e2c:	e9 85       	ldd	r30, Y+9	; 0x09
    3e2e:	fa 85       	ldd	r31, Y+10	; 0x0a
    3e30:	20 81       	ld	r18, Z
    3e32:	31 81       	ldd	r19, Z+1	; 0x01
    3e34:	42 81       	ldd	r20, Z+2	; 0x02
    3e36:	53 81       	ldd	r21, Z+3	; 0x03
    3e38:	0e 94 36 3d 	call	0x7a6c	; 0x7a6c <__mulsf3>
    3e3c:	4b 01       	movw	r8, r22
    3e3e:	5c 01       	movw	r10, r24
    3e40:	f8 01       	movw	r30, r16
    3e42:	60 81       	ld	r22, Z
    3e44:	71 81       	ldd	r23, Z+1	; 0x01
    3e46:	88 27       	eor	r24, r24
    3e48:	77 fd       	sbrc	r23, 7
    3e4a:	80 95       	com	r24
    3e4c:	98 2f       	mov	r25, r24
    3e4e:	0e 94 56 3c 	call	0x78ac	; 0x78ac <__floatsisf>
    3e52:	9b 01       	movw	r18, r22
    3e54:	ac 01       	movw	r20, r24
    3e56:	c5 01       	movw	r24, r10
    3e58:	b4 01       	movw	r22, r8
    3e5a:	0e 94 2a 3b 	call	0x7654	; 0x7654 <__subsf3>
    3e5e:	4b 01       	movw	r8, r22
    3e60:	5c 01       	movw	r10, r24
    3e62:	c3 01       	movw	r24, r6
    3e64:	b2 01       	movw	r22, r4
    3e66:	0e 94 56 3c 	call	0x78ac	; 0x78ac <__floatsisf>
    3e6a:	9b 01       	movw	r18, r22
    3e6c:	ac 01       	movw	r20, r24
    3e6e:	c5 01       	movw	r24, r10
    3e70:	b4 01       	movw	r22, r8
    3e72:	0e 94 bb 3b 	call	0x7776	; 0x7776 <__divsf3>
    3e76:	0a c0       	rjmp	.+20     	; 0x3e8c <getEstimatedAttitude+0x15a>
		}
		else
		{
			// Use raw accADC[axis] as source for acc values
			accSmooth[axis] =  accADC[axis];
    3e78:	f8 01       	movw	r30, r16
    3e7a:	80 81       	ld	r24, Z
    3e7c:	91 81       	ldd	r25, Z+1	; 0x01
    3e7e:	bc 01       	movw	r22, r24
    3e80:	88 27       	eor	r24, r24
    3e82:	77 fd       	sbrc	r23, 7
    3e84:	80 95       	com	r24
    3e86:	98 2f       	mov	r25, r24
    3e88:	0e 94 56 3c 	call	0x78ac	; 0x78ac <__floatsisf>
    3e8c:	e9 85       	ldd	r30, Y+9	; 0x09
    3e8e:	fa 85       	ldd	r31, Y+10	; 0x0a
    3e90:	60 83       	st	Z, r22
    3e92:	71 83       	std	Z+1, r23	; 0x01
    3e94:	82 83       	std	Z+2, r24	; 0x02
    3e96:	93 83       	std	Z+3, r25	; 0x03
		}

		// Estimate angle via gyros
		deltaGyroAngle[axis] += (float)gyroADC[axis] * deltaTime;
    3e98:	f1 01       	movw	r30, r2
    3e9a:	81 91       	ld	r24, Z+
    3e9c:	91 91       	ld	r25, Z+
    3e9e:	1f 01       	movw	r2, r30
    3ea0:	bc 01       	movw	r22, r24
    3ea2:	88 27       	eor	r24, r24
    3ea4:	77 fd       	sbrc	r23, 7
    3ea6:	80 95       	com	r24
    3ea8:	98 2f       	mov	r25, r24
    3eaa:	0e 94 56 3c 	call	0x78ac	; 0x78ac <__floatsisf>
    3eae:	a7 01       	movw	r20, r14
    3eb0:	96 01       	movw	r18, r12
    3eb2:	0e 94 36 3d 	call	0x7a6c	; 0x7a6c <__mulsf3>
    3eb6:	9b 01       	movw	r18, r22
    3eb8:	ac 01       	movw	r20, r24
    3eba:	eb 81       	ldd	r30, Y+3	; 0x03
    3ebc:	fc 81       	ldd	r31, Y+4	; 0x04
    3ebe:	60 81       	ld	r22, Z
    3ec0:	71 81       	ldd	r23, Z+1	; 0x01
    3ec2:	82 81       	ldd	r24, Z+2	; 0x02
    3ec4:	93 81       	ldd	r25, Z+3	; 0x03
    3ec6:	0e 94 2b 3b 	call	0x7656	; 0x7656 <__addsf3>
    3eca:	eb 81       	ldd	r30, Y+3	; 0x03
    3ecc:	fc 81       	ldd	r31, Y+4	; 0x04
    3ece:	61 93       	st	Z+, r22
    3ed0:	71 93       	st	Z+, r23
    3ed2:	81 93       	st	Z+, r24
    3ed4:	91 93       	st	Z+, r25
    3ed6:	fc 83       	std	Y+4, r31	; 0x04
    3ed8:	eb 83       	std	Y+3, r30	; 0x03
    3eda:	29 85       	ldd	r18, Y+9	; 0x09
    3edc:	3a 85       	ldd	r19, Y+10	; 0x0a
    3ede:	2c 5f       	subi	r18, 0xFC	; 252
    3ee0:	3f 4f       	sbci	r19, 0xFF	; 255
    3ee2:	3a 87       	std	Y+10, r19	; 0x0a
    3ee4:	29 87       	std	Y+9, r18	; 0x09
    3ee6:	0e 5f       	subi	r16, 0xFE	; 254
    3ee8:	1f 4f       	sbci	r17, 0xFF	; 255
		tempf = (float)period;
		deltaTime = tempf * GYRO_SCALE;	
	}

	// Smooth Acc signals and estimate angle from gyro
	for (axis = 0; axis < NUMBEROFAXIS; axis++) 
    3eea:	36 e6       	ldi	r19, 0x66	; 102
    3eec:	23 16       	cp	r2, r19
    3eee:	35 e0       	ldi	r19, 0x05	; 5
    3ef0:	33 06       	cpc	r3, r19
    3ef2:	09 f0       	breq	.+2      	; 0x3ef6 <getEstimatedAttitude+0x1c4>
    3ef4:	92 cf       	rjmp	.-220    	; 0x3e1a <getEstimatedAttitude+0xe8>
	}

	// As the deltaGyroAngle estimation passes through 180 or -180 we have to limit it 
	// and flip it to the other side, otherwise it will increment past 180.
	// A bit of hysteresis is helpful to minimise flapping about
	if (deltaGyroAngle[ROLL] > 185.0f)
    3ef6:	20 e0       	ldi	r18, 0x00	; 0
    3ef8:	30 e0       	ldi	r19, 0x00	; 0
    3efa:	49 e3       	ldi	r20, 0x39	; 57
    3efc:	53 e4       	ldi	r21, 0x43	; 67
    3efe:	60 91 12 05 	lds	r22, 0x0512
    3f02:	70 91 13 05 	lds	r23, 0x0513
    3f06:	80 91 14 05 	lds	r24, 0x0514
    3f0a:	90 91 15 05 	lds	r25, 0x0515
    3f0e:	0e 94 2b 3d 	call	0x7a56	; 0x7a56 <__gesf2>
    3f12:	18 16       	cp	r1, r24
    3f14:	64 f4       	brge	.+24     	; 0x3f2e <getEstimatedAttitude+0x1fc>
	{
		deltaGyroAngle[ROLL] = -175.0f;
    3f16:	80 e0       	ldi	r24, 0x00	; 0
    3f18:	90 e0       	ldi	r25, 0x00	; 0
    3f1a:	af e2       	ldi	r26, 0x2F	; 47
    3f1c:	b3 ec       	ldi	r27, 0xC3	; 195
    3f1e:	80 93 12 05 	sts	0x0512, r24
    3f22:	90 93 13 05 	sts	0x0513, r25
    3f26:	a0 93 14 05 	sts	0x0514, r26
    3f2a:	b0 93 15 05 	sts	0x0515, r27
	}
	if (deltaGyroAngle[ROLL] < -185.0f)
    3f2e:	20 e0       	ldi	r18, 0x00	; 0
    3f30:	30 e0       	ldi	r19, 0x00	; 0
    3f32:	49 e3       	ldi	r20, 0x39	; 57
    3f34:	53 ec       	ldi	r21, 0xC3	; 195
    3f36:	60 91 12 05 	lds	r22, 0x0512
    3f3a:	70 91 13 05 	lds	r23, 0x0513
    3f3e:	80 91 14 05 	lds	r24, 0x0514
    3f42:	90 91 15 05 	lds	r25, 0x0515
    3f46:	0e 94 b7 3b 	call	0x776e	; 0x776e <__cmpsf2>
    3f4a:	87 ff       	sbrs	r24, 7
    3f4c:	0c c0       	rjmp	.+24     	; 0x3f66 <getEstimatedAttitude+0x234>
	{
		deltaGyroAngle[ROLL] = 175.0f;
    3f4e:	80 e0       	ldi	r24, 0x00	; 0
    3f50:	90 e0       	ldi	r25, 0x00	; 0
    3f52:	af e2       	ldi	r26, 0x2F	; 47
    3f54:	b3 e4       	ldi	r27, 0x43	; 67
    3f56:	80 93 12 05 	sts	0x0512, r24
    3f5a:	90 93 13 05 	sts	0x0513, r25
    3f5e:	a0 93 14 05 	sts	0x0514, r26
    3f62:	b0 93 15 05 	sts	0x0515, r27

	// Note to self. Have to try this out with the board, watching the angles as you go past 90 and 180.

	// Calculate acceleration magnitude
	// This works perfectly as long as ACC_Z is calibrated to have =/- values (+/-125)
	roll_sq = (accADC[ROLL] * accADC[ROLL]);
    3f66:	20 90 2d 05 	lds	r2, 0x052D
    3f6a:	30 90 2e 05 	lds	r3, 0x052E
    3f6e:	22 9c       	mul	r2, r2
    3f70:	a0 01       	movw	r20, r0
    3f72:	23 9c       	mul	r2, r3
    3f74:	50 0d       	add	r21, r0
    3f76:	50 0d       	add	r21, r0
    3f78:	11 24       	eor	r1, r1
    3f7a:	5a 83       	std	Y+2, r21	; 0x02
    3f7c:	49 83       	std	Y+1, r20	; 0x01
	pitch_sq = (accADC[PITCH] * accADC[PITCH]) ;
    3f7e:	80 91 2f 05 	lds	r24, 0x052F
    3f82:	90 91 30 05 	lds	r25, 0x0530
    3f86:	88 9f       	mul	r24, r24
    3f88:	f0 01       	movw	r30, r0
    3f8a:	89 9f       	mul	r24, r25
    3f8c:	f0 0d       	add	r31, r0
    3f8e:	f0 0d       	add	r31, r0
    3f90:	11 24       	eor	r1, r1
    3f92:	fc 83       	std	Y+4, r31	; 0x04
    3f94:	eb 83       	std	Y+3, r30	; 0x03
	yaw_sq = (accADC[YAW] * accADC[YAW]);
    3f96:	20 91 31 05 	lds	r18, 0x0531
    3f9a:	30 91 32 05 	lds	r19, 0x0532
    3f9e:	3e 83       	std	Y+6, r19	; 0x06
    3fa0:	2d 83       	std	Y+5, r18	; 0x05
    3fa2:	22 9f       	mul	r18, r18
    3fa4:	80 01       	movw	r16, r0
    3fa6:	23 9f       	mul	r18, r19
    3fa8:	10 0d       	add	r17, r0
    3faa:	10 0d       	add	r17, r0
    3fac:	11 24       	eor	r1, r1

	AccMag = (uint16_t)(roll_sq + pitch_sq + yaw_sq);
    3fae:	ca 01       	movw	r24, r20
    3fb0:	8e 0f       	add	r24, r30
    3fb2:	9f 1f       	adc	r25, r31
    3fb4:	80 0f       	add	r24, r16
    3fb6:	91 1f       	adc	r25, r17
	//	acc_1_15G_SQ
	//	acc_0_85G_SQ

	// Region of true CF-based operation (gyros + accs) - While under normal G.
	// Note the CF angles go from 
	if ((AccMag > acc_0_85G_SQ) && (AccMag < acc_1_15G_SQ))
    3fb8:	8a 51       	subi	r24, 0x1A	; 26
    3fba:	9c 42       	sbci	r25, 0x2C	; 44
    3fbc:	8e 39       	cpi	r24, 0x9E	; 158
    3fbe:	94 42       	sbci	r25, 0x24	; 36
    3fc0:	08 f0       	brcs	.+2      	; 0x3fc4 <getEstimatedAttitude+0x292>
    3fc2:	d2 c0       	rjmp	.+420    	; 0x4168 <getEstimatedAttitude+0x436>
	{ 
		// The CF algorithm will fail when inverted as acc moves opposite gyro
		// When inverted, reverse acc polarity.
		if (accADC[YAW] < 0)
    3fc4:	4d 81       	ldd	r20, Y+5	; 0x05
    3fc6:	5e 81       	ldd	r21, Y+6	; 0x06
    3fc8:	57 ff       	sbrs	r21, 7
    3fca:	22 c0       	rjmp	.+68     	; 0x4010 <getEstimatedAttitude+0x2de>
		{
			accSmooth[ROLL] = -accSmooth[ROLL];
    3fcc:	80 91 6e 05 	lds	r24, 0x056E
    3fd0:	90 91 6f 05 	lds	r25, 0x056F
    3fd4:	a0 91 70 05 	lds	r26, 0x0570
    3fd8:	b0 91 71 05 	lds	r27, 0x0571
    3fdc:	b0 58       	subi	r27, 0x80	; 128
    3fde:	80 93 6e 05 	sts	0x056E, r24
    3fe2:	90 93 6f 05 	sts	0x056F, r25
    3fe6:	a0 93 70 05 	sts	0x0570, r26
    3fea:	b0 93 71 05 	sts	0x0571, r27
			accSmooth[PITCH] = -accSmooth[PITCH];
    3fee:	80 91 72 05 	lds	r24, 0x0572
    3ff2:	90 91 73 05 	lds	r25, 0x0573
    3ff6:	a0 91 74 05 	lds	r26, 0x0574
    3ffa:	b0 91 75 05 	lds	r27, 0x0575
    3ffe:	b0 58       	subi	r27, 0x80	; 128
    4000:	80 93 72 05 	sts	0x0572, r24
    4004:	90 93 73 05 	sts	0x0573, r25
    4008:	a0 93 74 05 	sts	0x0574, r26
    400c:	b0 93 75 05 	sts	0x0575, r27
		}

		// Complementary filter
		deltaGyroAngle[ROLL] = ((deltaGyroAngle[ROLL] * GYR_CMPF_FACTOR) - accSmooth[ROLL]) * INV_GYR_CMPF_FACTOR;
    4010:	40 90 7a 05 	lds	r4, 0x057A
    4014:	50 90 7b 05 	lds	r5, 0x057B
    4018:	60 90 7c 05 	lds	r6, 0x057C
    401c:	70 90 7d 05 	lds	r7, 0x057D
    4020:	80 90 66 05 	lds	r8, 0x0566
    4024:	90 90 67 05 	lds	r9, 0x0567
    4028:	a0 90 68 05 	lds	r10, 0x0568
    402c:	b0 90 69 05 	lds	r11, 0x0569
    4030:	20 91 12 05 	lds	r18, 0x0512
    4034:	30 91 13 05 	lds	r19, 0x0513
    4038:	40 91 14 05 	lds	r20, 0x0514
    403c:	50 91 15 05 	lds	r21, 0x0515
    4040:	c3 01       	movw	r24, r6
    4042:	b2 01       	movw	r22, r4
    4044:	0e 94 36 3d 	call	0x7a6c	; 0x7a6c <__mulsf3>
    4048:	20 91 6e 05 	lds	r18, 0x056E
    404c:	30 91 6f 05 	lds	r19, 0x056F
    4050:	40 91 70 05 	lds	r20, 0x0570
    4054:	50 91 71 05 	lds	r21, 0x0571
    4058:	0e 94 2a 3b 	call	0x7654	; 0x7654 <__subsf3>
    405c:	a5 01       	movw	r20, r10
    405e:	94 01       	movw	r18, r8
    4060:	0e 94 36 3d 	call	0x7a6c	; 0x7a6c <__mulsf3>
    4064:	6b 01       	movw	r12, r22
    4066:	7c 01       	movw	r14, r24
    4068:	60 93 12 05 	sts	0x0512, r22
    406c:	70 93 13 05 	sts	0x0513, r23
    4070:	80 93 14 05 	sts	0x0514, r24
    4074:	90 93 15 05 	sts	0x0515, r25
		deltaGyroAngle[PITCH] = ((deltaGyroAngle[PITCH] * GYR_CMPF_FACTOR) - accSmooth[PITCH]) * INV_GYR_CMPF_FACTOR;
    4078:	20 91 16 05 	lds	r18, 0x0516
    407c:	30 91 17 05 	lds	r19, 0x0517
    4080:	40 91 18 05 	lds	r20, 0x0518
    4084:	50 91 19 05 	lds	r21, 0x0519
    4088:	c3 01       	movw	r24, r6
    408a:	b2 01       	movw	r22, r4
    408c:	0e 94 36 3d 	call	0x7a6c	; 0x7a6c <__mulsf3>
    4090:	20 91 72 05 	lds	r18, 0x0572
    4094:	30 91 73 05 	lds	r19, 0x0573
    4098:	40 91 74 05 	lds	r20, 0x0574
    409c:	50 91 75 05 	lds	r21, 0x0575
    40a0:	0e 94 2a 3b 	call	0x7654	; 0x7654 <__subsf3>
    40a4:	a5 01       	movw	r20, r10
    40a6:	94 01       	movw	r18, r8
    40a8:	0e 94 36 3d 	call	0x7a6c	; 0x7a6c <__mulsf3>
    40ac:	4b 01       	movw	r8, r22
    40ae:	5c 01       	movw	r10, r24
    40b0:	60 93 16 05 	sts	0x0516, r22
    40b4:	70 93 17 05 	sts	0x0517, r23
    40b8:	80 93 18 05 	sts	0x0518, r24
    40bc:	90 93 19 05 	sts	0x0519, r25

		// Calculate the roll and pitch angles properly then convert to degrees x 100
		tempf = atan(deltaGyroAngle[PITCH] / (float)sqrt(roll_sq + yaw_sq));
    40c0:	69 81       	ldd	r22, Y+1	; 0x01
    40c2:	7a 81       	ldd	r23, Y+2	; 0x02
    40c4:	60 0f       	add	r22, r16
    40c6:	71 1f       	adc	r23, r17
    40c8:	88 27       	eor	r24, r24
    40ca:	77 fd       	sbrc	r23, 7
    40cc:	80 95       	com	r24
    40ce:	98 2f       	mov	r25, r24
    40d0:	0e 94 56 3c 	call	0x78ac	; 0x78ac <__floatsisf>
    40d4:	0e 94 9d 3d 	call	0x7b3a	; 0x7b3a <sqrt>
    40d8:	9b 01       	movw	r18, r22
    40da:	ac 01       	movw	r20, r24
    40dc:	c5 01       	movw	r24, r10
    40de:	b4 01       	movw	r22, r8
    40e0:	0e 94 bb 3b 	call	0x7776	; 0x7776 <__divsf3>
    40e4:	0e 94 8f 3b 	call	0x771e	; 0x771e <atan>
		angle[PITCH]  = (int16_t)(tempf * CONV_DEGREES);
    40e8:	2f e9       	ldi	r18, 0x9F	; 159
    40ea:	3c e0       	ldi	r19, 0x0C	; 12
    40ec:	43 eb       	ldi	r20, 0xB3	; 179
    40ee:	55 e4       	ldi	r21, 0x45	; 69
    40f0:	0e 94 36 3d 	call	0x7a6c	; 0x7a6c <__mulsf3>
    40f4:	0e 94 23 3c 	call	0x7846	; 0x7846 <__fixsfsi>
    40f8:	70 93 6d 05 	sts	0x056D, r23
    40fc:	60 93 6c 05 	sts	0x056C, r22

		tempf = atan(deltaGyroAngle[ROLL]  / (float)sqrt(pitch_sq + yaw_sq));
    4100:	6b 81       	ldd	r22, Y+3	; 0x03
    4102:	7c 81       	ldd	r23, Y+4	; 0x04
    4104:	60 0f       	add	r22, r16
    4106:	71 1f       	adc	r23, r17
    4108:	88 27       	eor	r24, r24
    410a:	77 fd       	sbrc	r23, 7
    410c:	80 95       	com	r24
    410e:	98 2f       	mov	r25, r24
    4110:	0e 94 56 3c 	call	0x78ac	; 0x78ac <__floatsisf>
    4114:	0e 94 9d 3d 	call	0x7b3a	; 0x7b3a <sqrt>
    4118:	9b 01       	movw	r18, r22
    411a:	ac 01       	movw	r20, r24
    411c:	c7 01       	movw	r24, r14
    411e:	b6 01       	movw	r22, r12
    4120:	0e 94 bb 3b 	call	0x7776	; 0x7776 <__divsf3>
    4124:	0e 94 8f 3b 	call	0x771e	; 0x771e <atan>
		angle[ROLL]  = (int16_t)(tempf * CONV_DEGREES);
    4128:	2f e9       	ldi	r18, 0x9F	; 159
    412a:	3c e0       	ldi	r19, 0x0C	; 12
    412c:	43 eb       	ldi	r20, 0xB3	; 179
    412e:	55 e4       	ldi	r21, 0x45	; 69
    4130:	0e 94 36 3d 	call	0x7a6c	; 0x7a6c <__mulsf3>
    4134:	0e 94 23 3c 	call	0x7846	; 0x7846 <__fixsfsi>

		// The following code changes the 0-90-0 deg to 0-90-180 deg
		// It will snap between 180 and -180 deg when 100% inverted
		if (accADC[YAW] < 0)
    4138:	ed 81       	ldd	r30, Y+5	; 0x05
    413a:	fe 81       	ldd	r31, Y+6	; 0x06
    413c:	f7 fd       	sbrc	r31, 7
    413e:	05 c0       	rjmp	.+10     	; 0x414a <getEstimatedAttitude+0x418>
		// Calculate the roll and pitch angles properly then convert to degrees x 100
		tempf = atan(deltaGyroAngle[PITCH] / (float)sqrt(roll_sq + yaw_sq));
		angle[PITCH]  = (int16_t)(tempf * CONV_DEGREES);

		tempf = atan(deltaGyroAngle[ROLL]  / (float)sqrt(pitch_sq + yaw_sq));
		angle[ROLL]  = (int16_t)(tempf * CONV_DEGREES);
    4140:	70 93 6b 05 	sts	0x056B, r23
    4144:	60 93 6a 05 	sts	0x056A, r22
    4148:	37 c0       	rjmp	.+110    	; 0x41b8 <getEstimatedAttitude+0x486>
		// The following code changes the 0-90-0 deg to 0-90-180 deg
		// It will snap between 180 and -180 deg when 100% inverted
		if (accADC[YAW] < 0)
		{
			// Roll
			if (accADC[ROLL] > 0)
    414a:	12 14       	cp	r1, r2
    414c:	13 04       	cpc	r1, r3
    414e:	1c f4       	brge	.+6      	; 0x4156 <getEstimatedAttitude+0x424>
			{
				angle[ROLL] = (ONE_EIGHTY - angle[ROLL]);
    4150:	20 e5       	ldi	r18, 0x50	; 80
    4152:	36 e4       	ldi	r19, 0x46	; 70
    4154:	02 c0       	rjmp	.+4      	; 0x415a <getEstimatedAttitude+0x428>
			}
			else
			{
				angle[ROLL] = (-ONE_EIGHTY - angle[ROLL]);
    4156:	20 eb       	ldi	r18, 0xB0	; 176
    4158:	39 eb       	ldi	r19, 0xB9	; 185
    415a:	26 1b       	sub	r18, r22
    415c:	37 0b       	sbc	r19, r23
    415e:	30 93 6b 05 	sts	0x056B, r19
    4162:	20 93 6a 05 	sts	0x056A, r18
    4166:	28 c0       	rjmp	.+80     	; 0x41b8 <getEstimatedAttitude+0x486>
	// deltaGyroAngle[] is 50 times smaller than angle[]
	// So we need to compensate here to make them equal
	// Note that the above adjustments when inverted are not needed for gyro-based angles
	else
	{
		angle[ROLL] = (int16_t)(deltaGyroAngle[ROLL] * 50);
    4168:	20 e0       	ldi	r18, 0x00	; 0
    416a:	30 e0       	ldi	r19, 0x00	; 0
    416c:	48 e4       	ldi	r20, 0x48	; 72
    416e:	52 e4       	ldi	r21, 0x42	; 66
    4170:	60 91 12 05 	lds	r22, 0x0512
    4174:	70 91 13 05 	lds	r23, 0x0513
    4178:	80 91 14 05 	lds	r24, 0x0514
    417c:	90 91 15 05 	lds	r25, 0x0515
    4180:	0e 94 36 3d 	call	0x7a6c	; 0x7a6c <__mulsf3>
    4184:	0e 94 23 3c 	call	0x7846	; 0x7846 <__fixsfsi>
    4188:	70 93 6b 05 	sts	0x056B, r23
    418c:	60 93 6a 05 	sts	0x056A, r22
		angle[PITCH] = (int16_t)(deltaGyroAngle[PITCH] * 50);
    4190:	20 e0       	ldi	r18, 0x00	; 0
    4192:	30 e0       	ldi	r19, 0x00	; 0
    4194:	48 e4       	ldi	r20, 0x48	; 72
    4196:	52 e4       	ldi	r21, 0x42	; 66
    4198:	60 91 16 05 	lds	r22, 0x0516
    419c:	70 91 17 05 	lds	r23, 0x0517
    41a0:	80 91 18 05 	lds	r24, 0x0518
    41a4:	90 91 19 05 	lds	r25, 0x0519
    41a8:	0e 94 36 3d 	call	0x7a6c	; 0x7a6c <__mulsf3>
    41ac:	0e 94 23 3c 	call	0x7846	; 0x7846 <__fixsfsi>
    41b0:	70 93 6d 05 	sts	0x056D, r23
    41b4:	60 93 6c 05 	sts	0x056C, r22
	}
}
    41b8:	2a 96       	adiw	r28, 0x0a	; 10
    41ba:	e2 e1       	ldi	r30, 0x12	; 18
    41bc:	0c 94 af 3e 	jmp	0x7d5e	; 0x7d5e <__epilogue_restores__>

000041c0 <UpdateIMUvalues>:

void UpdateIMUvalues(void)
{
	// Recalculate CF factors
	GYR_CMPF_FACTOR = (int16_t)Config.CF_factor * 10;
    41c0:	60 91 0e 06 	lds	r22, 0x060E
    41c4:	8a e0       	ldi	r24, 0x0A	; 10
    41c6:	68 02       	muls	r22, r24
    41c8:	b0 01       	movw	r22, r0
    41ca:	11 24       	eor	r1, r1
    41cc:	88 27       	eor	r24, r24
    41ce:	77 fd       	sbrc	r23, 7
    41d0:	80 95       	com	r24
    41d2:	98 2f       	mov	r25, r24
    41d4:	0e 94 56 3c 	call	0x78ac	; 0x78ac <__floatsisf>
    41d8:	60 93 7a 05 	sts	0x057A, r22
    41dc:	70 93 7b 05 	sts	0x057B, r23
    41e0:	80 93 7c 05 	sts	0x057C, r24
    41e4:	90 93 7d 05 	sts	0x057D, r25
	INV_GYR_CMPF_FACTOR = (1.0f / (GYR_CMPF_FACTOR + 1.0f));
    41e8:	20 e0       	ldi	r18, 0x00	; 0
    41ea:	30 e0       	ldi	r19, 0x00	; 0
    41ec:	40 e8       	ldi	r20, 0x80	; 128
    41ee:	5f e3       	ldi	r21, 0x3F	; 63
    41f0:	0e 94 2b 3b 	call	0x7656	; 0x7656 <__addsf3>
    41f4:	9b 01       	movw	r18, r22
    41f6:	ac 01       	movw	r20, r24
    41f8:	60 e0       	ldi	r22, 0x00	; 0
    41fa:	70 e0       	ldi	r23, 0x00	; 0
    41fc:	80 e8       	ldi	r24, 0x80	; 128
    41fe:	9f e3       	ldi	r25, 0x3F	; 63
    4200:	0e 94 bb 3b 	call	0x7776	; 0x7776 <__divsf3>
    4204:	60 93 66 05 	sts	0x0566, r22
    4208:	70 93 67 05 	sts	0x0567, r23
    420c:	80 93 68 05 	sts	0x0568, r24
    4210:	90 93 69 05 	sts	0x0569, r25
    4214:	08 95       	ret

00004216 <init_int>:
// Reconfigure interrupts
//***********************************************************

void init_int(void)
{
	cli();	// Disable interrupts
    4216:	f8 94       	cli

	switch (Config.RxMode)
    4218:	80 91 a7 05 	lds	r24, 0x05A7
    421c:	81 30       	cpi	r24, 0x01	; 1
    421e:	a1 f0       	breq	.+40     	; 0x4248 <init_int+0x32>
    4220:	44 f4       	brge	.+16     	; 0x4232 <init_int+0x1c>
    4222:	81 11       	cpse	r24, r1
    4224:	22 c0       	rjmp	.+68     	; 0x426a <init_int+0x54>
	{
		case CPPM_MODE:
			PCMSK1 = 0;							// Disable AUX
    4226:	10 92 6c 00 	sts	0x006C, r1
			PCMSK3 = 0;							// Disable THR
    422a:	10 92 73 00 	sts	0x0073, r1
			EIMSK = 0x04;						// Enable INT2 (Rudder/CPPM input)
    422e:	84 e0       	ldi	r24, 0x04	; 4
    4230:	16 c0       	rjmp	.+44     	; 0x425e <init_int+0x48>

void init_int(void)
{
	cli();	// Disable interrupts

	switch (Config.RxMode)
    4232:	84 30       	cpi	r24, 0x04	; 4
    4234:	d4 f4       	brge	.+52     	; 0x426a <init_int+0x54>
			break;

		case SBUS:
		case SPEKTRUM:
			// Disable PWM input interrupts
			PCMSK1 = 0;							// Disable AUX
    4236:	10 92 6c 00 	sts	0x006C, r1
			PCMSK3 = 0;							// Disable THR
    423a:	10 92 73 00 	sts	0x0073, r1
			EIMSK  = 0;							// Disable INT0, 1 and 2 
    423e:	1d ba       	out	0x1d, r1	; 29

			// Enable serial interrupt
			UCSR0B |= (1 << RXCIE0);
    4240:	80 91 c1 00 	lds	r24, 0x00C1
    4244:	80 68       	ori	r24, 0x80	; 128
    4246:	0f c0       	rjmp	.+30     	; 0x4266 <init_int+0x50>
			EIMSK = 0x04;						// Enable INT2 (Rudder/CPPM input)
			UCSR0B &= ~(1 << RXCIE0);			// Disable serial interrupt
			break;

		case PWM:
			PCMSK1 |= (1 << PCINT8);			// PB0 (Aux pin change mask)
    4248:	80 91 6c 00 	lds	r24, 0x006C
    424c:	81 60       	ori	r24, 0x01	; 1
    424e:	80 93 6c 00 	sts	0x006C, r24
			PCMSK3 |= (1 << PCINT24);			// PD0 (Throttle pin change mask)
    4252:	80 91 73 00 	lds	r24, 0x0073
    4256:	81 60       	ori	r24, 0x01	; 1
    4258:	80 93 73 00 	sts	0x0073, r24
			EIMSK  = 0x07;						// Enable INT0, 1 and 2 
    425c:	87 e0       	ldi	r24, 0x07	; 7
    425e:	8d bb       	out	0x1d, r24	; 29
			UCSR0B &= ~(1 << RXCIE0);			// Disable serial interrupt
    4260:	80 91 c1 00 	lds	r24, 0x00C1
    4264:	8f 77       	andi	r24, 0x7F	; 127
			PCMSK1 = 0;							// Disable AUX
			PCMSK3 = 0;							// Disable THR
			EIMSK  = 0;							// Disable INT0, 1 and 2 

			// Enable serial interrupt
			UCSR0B |= (1 << RXCIE0);
    4266:	80 93 c1 00 	sts	0x00C1, r24

		default:
			break;	
	}	

	sei(); // Re-enable interrupts
    426a:	78 94       	sei
    426c:	08 95       	ret

0000426e <init>:
	// I/O setup
	//***********************************************************
	// Set port directions
	// KK2.0 and KK2.1 are different
#ifdef KK21
	DDRA		= 0x30;		// Port A
    426e:	80 e3       	ldi	r24, 0x30	; 48
    4270:	81 b9       	out	0x01, r24	; 1
	DDRC		= 0xFC;		// Port C
    4272:	8c ef       	ldi	r24, 0xFC	; 252
    4274:	87 b9       	out	0x07, r24	; 7
#else
	DDRA		= 0x00;		// Port A
	DDRC		= 0xFF;		// Port C
#endif
	DDRB		= 0x0A;		// Port B
    4276:	8a e0       	ldi	r24, 0x0A	; 10
    4278:	84 b9       	out	0x04, r24	; 4
	DDRD		= 0xF2;		// Port D
    427a:	82 ef       	ldi	r24, 0xF2	; 242
    427c:	8a b9       	out	0x0a, r24	; 10

	// Hold all PWM outputs low to stop glitches
	// M5 and M6 are on PortA for KK2.1
	MOTORS		= 0;
    427e:	18 b8       	out	0x08, r1	; 8
	M5			= 0;
    4280:	14 98       	cbi	0x02, 4	; 2
	M6			= 0;
    4282:	15 98       	cbi	0x02, 5	; 2

	// Preset I/O pins
	LED1 		= 0;		// LED1 off
    4284:	2b 98       	cbi	0x05, 3	; 5
	LVA 		= 0; 		// LVA alarm OFF
    4286:	29 98       	cbi	0x05, 1	; 5
	LCD_SCL		= 1;		// GLCD clock high
    4288:	5c 9a       	sbi	0x0b, 4	; 11

	// Set/clear pull-ups (1 = set, 0 = clear)
	PINB		= 0xF5;		// Set PB pull-ups
    428a:	85 ef       	ldi	r24, 0xF5	; 245
    428c:	83 b9       	out	0x03, r24	; 3
	PIND		= 0x0C;		// Set PD pull-ups (Don't pull up RX yet)
    428e:	8c e0       	ldi	r24, 0x0C	; 12
    4290:	89 b9       	out	0x09, r24	; 9
    4292:	2f e5       	ldi	r18, 0x5F	; 95
    4294:	88 ed       	ldi	r24, 0xD8	; 216
    4296:	93 e0       	ldi	r25, 0x03	; 3
    4298:	21 50       	subi	r18, 0x01	; 1
    429a:	80 40       	sbci	r24, 0x00	; 0
    429c:	90 40       	sbci	r25, 0x00	; 0
    429e:	e1 f7       	brne	.-8      	; 0x4298 <init+0x2a>
    42a0:	00 c0       	rjmp	.+0      	; 0x42a2 <init+0x34>
    42a2:	00 00       	nop
	_delay_ms(63);				// Pause while satellite wakes up	
								// and pull-ups have time to rise.
								// Tweak until bind pulses about 68ms after power-up

	// Bind as master if ONLY button 4 pressed
	if ((PINB & 0xf0) == 0xE0)
    42a4:	83 b1       	in	r24, 0x03	; 3
    42a6:	80 7f       	andi	r24, 0xF0	; 240
    42a8:	80 3e       	cpi	r24, 0xE0	; 224
    42aa:	21 f4       	brne	.+8      	; 0x42b4 <init+0x46>
	{
		DDRD		= 0xF3;		// Switch PD0 to output
    42ac:	83 ef       	ldi	r24, 0xF3	; 243
    42ae:	8a b9       	out	0x0a, r24	; 10
		bind_master();
    42b0:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <bind_master>
	}

	DDRD		= 0xF2;			// Reset Port D directions
    42b4:	82 ef       	ldi	r24, 0xF2	; 242
    42b6:	8a b9       	out	0x0a, r24	; 10

	// Set/clear pull-ups (1 = set, 0 = clear)
	PIND		= 0x0D;			// Set PD pull-ups (now pull up RX as well)
    42b8:	8d e0       	ldi	r24, 0x0D	; 13
    42ba:	89 b9       	out	0x09, r24	; 9
	// Timers
	//***********************************************************

	// Timer1 (16bit) - run @ 2.5MHz (400ns) - max 26.2ms
	// Used to measure Rx Signals & control ESC/servo output rate
	TCCR1A = 0;
    42bc:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = (1 << CS11);					// Clk/8 = 2.5MHz
    42c0:	82 e0       	ldi	r24, 0x02	; 2
    42c2:	80 93 81 00 	sts	0x0081, r24

	// Timer2 8bit - run @ 20MHz / 1024 = 19.531kHz or 51.2us - max 13.1ms
	// Used to time arm/disarm intervals
	TCCR2A = 0;	
    42c6:	10 92 b0 00 	sts	0x00B0, r1
	TCCR2B = 0x07;							// Clk/1024 = 19.531kHz
    42ca:	87 e0       	ldi	r24, 0x07	; 7
    42cc:	80 93 b1 00 	sts	0x00B1, r24
	TIMSK2 = 0;
    42d0:	10 92 70 00 	sts	0x0070, r1
	TIFR2 = 0;
    42d4:	17 ba       	out	0x17, r1	; 23
	TCNT2 = 0;								// Reset counter
    42d6:	10 92 b2 00 	sts	0x00B2, r1
	//***********************************************************
	// Interrupts and pin function setup
	//***********************************************************

	// Pin change interrupt enables PCINT1, PCINT2 and PCINT3 (Throttle, AUX and CPPM input)
	PCICR  = 0x0A;							// PCINT8  to PCINT15 (PCINT1 group - AUX)
    42da:	9a e0       	ldi	r25, 0x0A	; 10
    42dc:	90 93 68 00 	sts	0x0068, r25
											// PCINT24 to PCINT31 (PCINT3 group - THR)
	PCIFR  = 0x0F;							// Clear PCIF0 interrupt flag 
    42e0:	9f e0       	ldi	r25, 0x0F	; 15
    42e2:	9b bb       	out	0x1b, r25	; 27
											// Clear PCIF1 interrupt flag 
											// Clear PCIF2 interrupt flag 
											// Clear PCIF3 interrupt flag 

	// External interrupts INT0 (Elevator) and INT1 (Aileron) and INT2 (Rudder)
	EICRA = 0x15;							// Any change INT0
    42e4:	95 e1       	ldi	r25, 0x15	; 21
    42e6:	90 93 69 00 	sts	0x0069, r25
											// Any change INT1
											// Any change INT2
	EIFR  = 0x07; 							// Clear INT0 interrupt flag (Elevator)
    42ea:	8c bb       	out	0x1c, r24	; 28
	//***********************************************************
	// Start up
	//***********************************************************

	// Preset important flags
	Interrupted = false;						
    42ec:	10 92 3e 07 	sts	0x073E, r1
	Config.Main_flags |= (1 << FirstTimeIMU);
    42f0:	80 91 3c 07 	lds	r24, 0x073C
    42f4:	84 60       	ori	r24, 0x04	; 4
    42f6:	80 93 3c 07 	sts	0x073C, r24
	//***********************************************************
	// GLCD initialisation
	//***********************************************************

	// Initialise the GLCD
	st7565_init();
    42fa:	0e 94 50 1a 	call	0x34a0	; 0x34a0 <st7565_init>
	st7565_command(CMD_DISPLAY_ON);
    42fe:	8f ea       	ldi	r24, 0xAF	; 175
    4300:	0e 94 48 1a 	call	0x3490	; 0x3490 <st7565_command>
	st7565_command(CMD_SET_ALLPTS_NORMAL);
    4304:	84 ea       	ldi	r24, 0xA4	; 164
    4306:	0e 94 48 1a 	call	0x3490	; 0x3490 <st7565_command>
	st7565_set_brightness(0x26);
    430a:	86 e2       	ldi	r24, 0x26	; 38
    430c:	0e 94 96 1a 	call	0x352c	; 0x352c <st7565_set_brightness>
	st7565_command(CMD_SET_COM_REVERSE); 	// For logo
    4310:	88 ec       	ldi	r24, 0xC8	; 200
    4312:	0e 94 48 1a 	call	0x3490	; 0x3490 <st7565_command>

	// Make sure the LCD is blank
	clear_screen();
    4316:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <clear_screen>
    431a:	2f e7       	ldi	r18, 0x7F	; 127
    431c:	8f e4       	ldi	r24, 0x4F	; 79
    431e:	92 e1       	ldi	r25, 0x12	; 18
    4320:	21 50       	subi	r18, 0x01	; 1
    4322:	80 40       	sbci	r24, 0x00	; 0
    4324:	90 40       	sbci	r25, 0x00	; 0
    4326:	e1 f7       	brne	.-8      	; 0x4320 <init+0xb2>
    4328:	00 c0       	rjmp	.+0      	; 0x432a <init+0xbc>
    432a:	00 00       	nop
	//***********************************************************
	// Load or reset EEPROM settings
	//***********************************************************

	// Reload default eeprom settings if middle two buttons are pressed
	if ((PINB & 0xf0) == 0x90)
    432c:	83 b1       	in	r24, 0x03	; 3
    432e:	80 7f       	andi	r24, 0xF0	; 240
    4330:	80 39       	cpi	r24, 0x90	; 144
    4332:	f1 f4       	brne	.+60     	; 0x4370 <init+0x102>
	{
		// Display reset message
		st7565_command(CMD_SET_COM_NORMAL); 	// For text (not for logo)
    4334:	80 ec       	ldi	r24, 0xC0	; 192
    4336:	0e 94 48 1a 	call	0x3490	; 0x3490 <st7565_command>
		clear_buffer(buffer);
    433a:	80 e0       	ldi	r24, 0x00	; 0
    433c:	91 e0       	ldi	r25, 0x01	; 1
    433e:	0e 94 db 1a 	call	0x35b6	; 0x35b6 <clear_buffer>
		LCD_Display_Text(1,(const unsigned char*)Verdana14,40,25);
    4342:	29 e1       	ldi	r18, 0x19	; 25
    4344:	30 e0       	ldi	r19, 0x00	; 0
    4346:	48 e2       	ldi	r20, 0x28	; 40
    4348:	50 e0       	ldi	r21, 0x00	; 0
    434a:	67 e7       	ldi	r22, 0x77	; 119
    434c:	71 e0       	ldi	r23, 0x01	; 1
    434e:	81 e0       	ldi	r24, 0x01	; 1
    4350:	0e 94 84 1c 	call	0x3908	; 0x3908 <LCD_Display_Text>
		write_buffer(buffer,1);
    4354:	61 e0       	ldi	r22, 0x01	; 1
    4356:	80 e0       	ldi	r24, 0x00	; 0
    4358:	91 e0       	ldi	r25, 0x01	; 1
    435a:	0e 94 a1 1a 	call	0x3542	; 0x3542 <write_buffer>
		clear_buffer(buffer);
    435e:	80 e0       	ldi	r24, 0x00	; 0
    4360:	91 e0       	ldi	r25, 0x01	; 1
    4362:	0e 94 db 1a 	call	0x35b6	; 0x35b6 <clear_buffer>
		Set_EEPROM_Default_Config();
    4366:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <Set_EEPROM_Default_Config>
		Save_Config_to_EEPROM();
    436a:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <Save_Config_to_EEPROM>
    436e:	02 c0       	rjmp	.+4      	; 0x4374 <init+0x106>
	}
	// Load "Config" global data structure
	else
	{
		Initial_EEPROM_Config_Load();	
    4370:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <Initial_EEPROM_Config_Load>
	}

	// Set contrast to the previously saved value
	st7565_set_brightness((uint8_t)Config.Contrast);				
    4374:	80 91 08 06 	lds	r24, 0x0608
    4378:	0e 94 96 1a 	call	0x352c	; 0x352c <st7565_set_brightness>

	// Display logo if KK2.1
#ifdef KK21
	// Write logo from buffer
	write_buffer(buffer,0);
    437c:	60 e0       	ldi	r22, 0x00	; 0
    437e:	80 e0       	ldi	r24, 0x00	; 0
    4380:	91 e0       	ldi	r25, 0x01	; 1
    4382:	0e 94 a1 1a 	call	0x3542	; 0x3542 <write_buffer>
    4386:	2f e7       	ldi	r18, 0x7F	; 127
    4388:	84 e8       	ldi	r24, 0x84	; 132
    438a:	9e e1       	ldi	r25, 0x1E	; 30
    438c:	21 50       	subi	r18, 0x01	; 1
    438e:	80 40       	sbci	r24, 0x00	; 0
    4390:	90 40       	sbci	r25, 0x00	; 0
    4392:	e1 f7       	brne	.-8      	; 0x438c <init+0x11e>
    4394:	00 c0       	rjmp	.+0      	; 0x4396 <init+0x128>
    4396:	00 00       	nop
	//***********************************************************
	// i2c init for KK2.1
	//***********************************************************	

#ifdef KK21
	i2c_init();
    4398:	0e 94 d5 39 	call	0x73aa	; 0x73aa <i2c_init>
	init_i2c_gyros();
    439c:	0e 94 3c 1e 	call	0x3c78	; 0x3c78 <init_i2c_gyros>
	init_i2c_accs();
    43a0:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <init_i2c_accs>
	write_buffer(buffer,1);
	clear_buffer(buffer);
#endif
		
	// Do startup tasks
	UpdateLimits();							// Update travel limts	
    43a4:	0e 94 5b 2d 	call	0x5ab6	; 0x5ab6 <UpdateLimits>
	UpdateIMUvalues();						// Update IMU factors
    43a8:	0e 94 e0 20 	call	0x41c0	; 0x41c0 <UpdateIMUvalues>
	Init_ADC();
    43ac:	0e 94 76 10 	call	0x20ec	; 0x20ec <Init_ADC>
	init_int();								// Intialise interrupts based on RC input mode
    43b0:	0e 94 0b 21 	call	0x4216	; 0x4216 <init_int>
	init_uart();							// Initialise UART
    43b4:	0e 94 bb 3a 	call	0x7576	; 0x7576 <init_uart>

	// Initial gyro calibration
	CalibrateGyrosSlow();
    43b8:	0e 94 b0 1d 	call	0x3b60	; 0x3b60 <CalibrateGyrosSlow>

	// Disarm on start-up if Armed setting is ARMABLE
	if (Config.ArmMode == ARMABLE)
    43bc:	80 91 09 06 	lds	r24, 0x0609
    43c0:	81 30       	cpi	r24, 0x01	; 1
    43c2:	29 f4       	brne	.+10     	; 0x43ce <init+0x160>
	{
		General_error |= (1 << DISARMED); 	// Set disarmed bit
    43c4:	80 91 0e 05 	lds	r24, 0x050E
    43c8:	80 61       	ori	r24, 0x10	; 16
    43ca:	80 93 0e 05 	sts	0x050E, r24
	}

	// Check to see that throttle is low if RC detected
	if (Interrupted)
    43ce:	80 91 3e 07 	lds	r24, 0x073E
    43d2:	88 23       	and	r24, r24
    43d4:	69 f0       	breq	.+26     	; 0x43f0 <init+0x182>
	{
		RxGetChannels();
    43d6:	0e 94 8f 38 	call	0x711e	; 0x711e <RxGetChannels>
		if (MonopolarThrottle > THROTTLEIDLE)
    43da:	80 91 9d 07 	lds	r24, 0x079D
    43de:	90 91 9e 07 	lds	r25, 0x079E
    43e2:	c3 97       	sbiw	r24, 0x33	; 51
    43e4:	2c f0       	brlt	.+10     	; 0x43f0 <init+0x182>
		{
			General_error |= (1 << THROTTLE_HIGH); 	// Set throttle high error bit
    43e6:	80 91 0e 05 	lds	r24, 0x050E
    43ea:	82 60       	ori	r24, 0x02	; 2
    43ec:	80 93 0e 05 	sts	0x050E, r24
		}
	}

	// Flash LED
	LED1 = 1;
    43f0:	2b 9a       	sbi	0x05, 3	; 5
    43f2:	2f eb       	ldi	r18, 0xBF	; 191
    43f4:	87 e2       	ldi	r24, 0x27	; 39
    43f6:	99 e0       	ldi	r25, 0x09	; 9
    43f8:	21 50       	subi	r18, 0x01	; 1
    43fa:	80 40       	sbci	r24, 0x00	; 0
    43fc:	90 40       	sbci	r25, 0x00	; 0
    43fe:	e1 f7       	brne	.-8      	; 0x43f8 <init+0x18a>
    4400:	00 c0       	rjmp	.+0      	; 0x4402 <init+0x194>
    4402:	00 00       	nop
	_delay_ms(150);
	LED1 = 0;
    4404:	2b 98       	cbi	0x05, 3	; 5

	// Beep that init is complete
	menu_beep(1);
    4406:	81 e0       	ldi	r24, 0x01	; 1
    4408:	0e 94 18 27 	call	0x4e30	; 0x4e30 <menu_beep>

#ifdef KK21
	// Set text display mode back to normal (KK2.0 version has already done this)
	st7565_command(CMD_SET_COM_NORMAL); 	// For text (not for logo)
    440c:	80 ec       	ldi	r24, 0xC0	; 192
    440e:	0e 94 48 1a 	call	0x3490	; 0x3490 <st7565_command>
    4412:	08 95       	ret

00004414 <__vector_2>:
//* Standard PWM mode
//* Sequential PWM inputs from a normal RC receiver
//************************************************************

ISR(INT1_vect)
{
    4414:	1f 92       	push	r1
    4416:	0f 92       	push	r0
    4418:	0f b6       	in	r0, 0x3f	; 63
    441a:	0f 92       	push	r0
    441c:	11 24       	eor	r1, r1
    441e:	2f 93       	push	r18
    4420:	3f 93       	push	r19
    4422:	8f 93       	push	r24
    4424:	9f 93       	push	r25
	// Log interrupts that iccur during PWM generation
	if (JitterGate)	JitterFlag = true;	
    4426:	80 91 66 07 	lds	r24, 0x0766
    442a:	88 23       	and	r24, r24
    442c:	19 f0       	breq	.+6      	; 0x4434 <__vector_2+0x20>
    442e:	81 e0       	ldi	r24, 0x01	; 1
    4430:	80 93 67 07 	sts	0x0767, r24

	if (RX_ROLL)	// Rising
    4434:	4b 9b       	sbis	0x09, 3	; 9
    4436:	09 c0       	rjmp	.+18     	; 0x444a <__vector_2+0x36>
	{
		RxChannelStart[AILERON] = TCNT1;
    4438:	80 91 84 00 	lds	r24, 0x0084
    443c:	90 91 85 00 	lds	r25, 0x0085
    4440:	90 93 54 07 	sts	0x0754, r25
    4444:	80 93 53 07 	sts	0x0753, r24
    4448:	14 c0       	rjmp	.+40     	; 0x4472 <__vector_2+0x5e>
	} 
	else 
	{				// Falling
		RxChannel[AILERON] = TCNT1 - RxChannelStart[AILERON];
    444a:	80 91 84 00 	lds	r24, 0x0084
    444e:	90 91 85 00 	lds	r25, 0x0085
    4452:	20 91 53 07 	lds	r18, 0x0753
    4456:	30 91 54 07 	lds	r19, 0x0754
    445a:	82 1b       	sub	r24, r18
    445c:	93 0b       	sbc	r25, r19
    445e:	90 93 42 07 	sts	0x0742, r25
    4462:	80 93 41 07 	sts	0x0741, r24
		if (Config.PWM_Sync == AILERON) 
    4466:	80 91 a8 05 	lds	r24, 0x05A8
    446a:	81 30       	cpi	r24, 0x01	; 1
    446c:	11 f4       	brne	.+4      	; 0x4472 <__vector_2+0x5e>
		{
			Interrupted = true;						// Signal that interrupt block has finished
    446e:	80 93 3e 07 	sts	0x073E, r24
		}
	}
}
    4472:	9f 91       	pop	r25
    4474:	8f 91       	pop	r24
    4476:	3f 91       	pop	r19
    4478:	2f 91       	pop	r18
    447a:	0f 90       	pop	r0
    447c:	0f be       	out	0x3f, r0	; 63
    447e:	0f 90       	pop	r0
    4480:	1f 90       	pop	r1
    4482:	18 95       	reti

00004484 <__vector_1>:

ISR(INT0_vect)
{
    4484:	1f 92       	push	r1
    4486:	0f 92       	push	r0
    4488:	0f b6       	in	r0, 0x3f	; 63
    448a:	0f 92       	push	r0
    448c:	11 24       	eor	r1, r1
    448e:	2f 93       	push	r18
    4490:	3f 93       	push	r19
    4492:	8f 93       	push	r24
    4494:	9f 93       	push	r25
	if (JitterGate)	JitterFlag = true;	
    4496:	80 91 66 07 	lds	r24, 0x0766
    449a:	88 23       	and	r24, r24
    449c:	19 f0       	breq	.+6      	; 0x44a4 <__vector_1+0x20>
    449e:	81 e0       	ldi	r24, 0x01	; 1
    44a0:	80 93 67 07 	sts	0x0767, r24

	if (RX_PITCH)	// Rising 
    44a4:	4a 9b       	sbis	0x09, 2	; 9
    44a6:	09 c0       	rjmp	.+18     	; 0x44ba <__vector_1+0x36>
	{
		RxChannelStart[ELEVATOR] = TCNT1;
    44a8:	80 91 84 00 	lds	r24, 0x0084
    44ac:	90 91 85 00 	lds	r25, 0x0085
    44b0:	90 93 56 07 	sts	0x0756, r25
    44b4:	80 93 55 07 	sts	0x0755, r24
    44b8:	15 c0       	rjmp	.+42     	; 0x44e4 <__vector_1+0x60>
	} 
	else 
	{				// Falling
		RxChannel[ELEVATOR] = TCNT1 - RxChannelStart[ELEVATOR];
    44ba:	80 91 84 00 	lds	r24, 0x0084
    44be:	90 91 85 00 	lds	r25, 0x0085
    44c2:	20 91 55 07 	lds	r18, 0x0755
    44c6:	30 91 56 07 	lds	r19, 0x0756
    44ca:	82 1b       	sub	r24, r18
    44cc:	93 0b       	sbc	r25, r19
    44ce:	90 93 44 07 	sts	0x0744, r25
    44d2:	80 93 43 07 	sts	0x0743, r24
		if (Config.PWM_Sync == ELEVATOR) 
    44d6:	80 91 a8 05 	lds	r24, 0x05A8
    44da:	82 30       	cpi	r24, 0x02	; 2
    44dc:	19 f4       	brne	.+6      	; 0x44e4 <__vector_1+0x60>
		{
			Interrupted = true;						// Signal that interrupt block has finished
    44de:	81 e0       	ldi	r24, 0x01	; 1
    44e0:	80 93 3e 07 	sts	0x073E, r24
		}
	}
}
    44e4:	9f 91       	pop	r25
    44e6:	8f 91       	pop	r24
    44e8:	3f 91       	pop	r19
    44ea:	2f 91       	pop	r18
    44ec:	0f 90       	pop	r0
    44ee:	0f be       	out	0x3f, r0	; 63
    44f0:	0f 90       	pop	r0
    44f2:	1f 90       	pop	r1
    44f4:	18 95       	reti

000044f6 <__vector_7>:

ISR(PCINT3_vect)
{
    44f6:	1f 92       	push	r1
    44f8:	0f 92       	push	r0
    44fa:	0f b6       	in	r0, 0x3f	; 63
    44fc:	0f 92       	push	r0
    44fe:	11 24       	eor	r1, r1
    4500:	2f 93       	push	r18
    4502:	3f 93       	push	r19
    4504:	8f 93       	push	r24
    4506:	9f 93       	push	r25
	if (JitterGate)	JitterFlag = true;	
    4508:	80 91 66 07 	lds	r24, 0x0766
    450c:	88 23       	and	r24, r24
    450e:	19 f0       	breq	.+6      	; 0x4516 <__vector_7+0x20>
    4510:	81 e0       	ldi	r24, 0x01	; 1
    4512:	80 93 67 07 	sts	0x0767, r24
		
	if (RX_COLL)	// Rising
    4516:	48 9b       	sbis	0x09, 0	; 9
    4518:	09 c0       	rjmp	.+18     	; 0x452c <__vector_7+0x36>
	{
		RxChannelStart[THROTTLE] = TCNT1;
    451a:	80 91 84 00 	lds	r24, 0x0084
    451e:	90 91 85 00 	lds	r25, 0x0085
    4522:	90 93 52 07 	sts	0x0752, r25
    4526:	80 93 51 07 	sts	0x0751, r24
    452a:	15 c0       	rjmp	.+42     	; 0x4556 <__vector_7+0x60>
	} 
	else 
	{				// Falling
		RxChannel[THROTTLE] = TCNT1 - RxChannelStart[THROTTLE];
    452c:	80 91 84 00 	lds	r24, 0x0084
    4530:	90 91 85 00 	lds	r25, 0x0085
    4534:	20 91 51 07 	lds	r18, 0x0751
    4538:	30 91 52 07 	lds	r19, 0x0752
    453c:	82 1b       	sub	r24, r18
    453e:	93 0b       	sbc	r25, r19
    4540:	90 93 40 07 	sts	0x0740, r25
    4544:	80 93 3f 07 	sts	0x073F, r24
		if (Config.PWM_Sync == THROTTLE) 
    4548:	80 91 a8 05 	lds	r24, 0x05A8
    454c:	81 11       	cpse	r24, r1
    454e:	03 c0       	rjmp	.+6      	; 0x4556 <__vector_7+0x60>
		{
			Interrupted = true;						// Signal that interrupt block has finished
    4550:	81 e0       	ldi	r24, 0x01	; 1
    4552:	80 93 3e 07 	sts	0x073E, r24
		}
	}
}
    4556:	9f 91       	pop	r25
    4558:	8f 91       	pop	r24
    455a:	3f 91       	pop	r19
    455c:	2f 91       	pop	r18
    455e:	0f 90       	pop	r0
    4560:	0f be       	out	0x3f, r0	; 63
    4562:	0f 90       	pop	r0
    4564:	1f 90       	pop	r1
    4566:	18 95       	reti

00004568 <__vector_5>:


ISR(PCINT1_vect)
{
    4568:	1f 92       	push	r1
    456a:	0f 92       	push	r0
    456c:	0f b6       	in	r0, 0x3f	; 63
    456e:	0f 92       	push	r0
    4570:	11 24       	eor	r1, r1
    4572:	2f 93       	push	r18
    4574:	3f 93       	push	r19
    4576:	8f 93       	push	r24
    4578:	9f 93       	push	r25
	if (JitterGate)	JitterFlag = true;
    457a:	80 91 66 07 	lds	r24, 0x0766
    457e:	88 23       	and	r24, r24
    4580:	19 f0       	breq	.+6      	; 0x4588 <__vector_5+0x20>
    4582:	81 e0       	ldi	r24, 0x01	; 1
    4584:	80 93 67 07 	sts	0x0767, r24

	if (RX_AUX)	// Rising
    4588:	18 9b       	sbis	0x03, 0	; 3
    458a:	09 c0       	rjmp	.+18     	; 0x459e <__vector_5+0x36>
	{
		RxChannelStart[GEAR] = TCNT1;
    458c:	80 91 84 00 	lds	r24, 0x0084
    4590:	90 91 85 00 	lds	r25, 0x0085
    4594:	90 93 5a 07 	sts	0x075A, r25
    4598:	80 93 59 07 	sts	0x0759, r24
    459c:	15 c0       	rjmp	.+42     	; 0x45c8 <__vector_5+0x60>
	} 
	else 
	{				// Falling
		RxChannel[GEAR] = TCNT1 - RxChannelStart[GEAR];
    459e:	80 91 84 00 	lds	r24, 0x0084
    45a2:	90 91 85 00 	lds	r25, 0x0085
    45a6:	20 91 59 07 	lds	r18, 0x0759
    45aa:	30 91 5a 07 	lds	r19, 0x075A
    45ae:	82 1b       	sub	r24, r18
    45b0:	93 0b       	sbc	r25, r19
    45b2:	90 93 48 07 	sts	0x0748, r25
    45b6:	80 93 47 07 	sts	0x0747, r24
		if (Config.PWM_Sync == GEAR) 
    45ba:	80 91 a8 05 	lds	r24, 0x05A8
    45be:	84 30       	cpi	r24, 0x04	; 4
    45c0:	19 f4       	brne	.+6      	; 0x45c8 <__vector_5+0x60>
		{
			Interrupted = true;						// Signal that interrupt block has finished
    45c2:	81 e0       	ldi	r24, 0x01	; 1
    45c4:	80 93 3e 07 	sts	0x073E, r24
		}
	}
}
    45c8:	9f 91       	pop	r25
    45ca:	8f 91       	pop	r24
    45cc:	3f 91       	pop	r19
    45ce:	2f 91       	pop	r18
    45d0:	0f 90       	pop	r0
    45d2:	0f be       	out	0x3f, r0	; 63
    45d4:	0f 90       	pop	r0
    45d6:	1f 90       	pop	r1
    45d8:	18 95       	reti

000045da <__vector_3>:
// Compacted CPPM RX code thanks to Edgar
//
//************************************************************

ISR(INT2_vect)
{
    45da:	1f 92       	push	r1
    45dc:	0f 92       	push	r0
    45de:	0f b6       	in	r0, 0x3f	; 63
    45e0:	0f 92       	push	r0
    45e2:	11 24       	eor	r1, r1
    45e4:	2f 93       	push	r18
    45e6:	3f 93       	push	r19
    45e8:	4f 93       	push	r20
    45ea:	5f 93       	push	r21
    45ec:	8f 93       	push	r24
    45ee:	9f 93       	push	r25
    45f0:	af 93       	push	r26
    45f2:	bf 93       	push	r27
    45f4:	ef 93       	push	r30
    45f6:	ff 93       	push	r31
	if (JitterGate)	JitterFlag = true;	
    45f8:	80 91 66 07 	lds	r24, 0x0766
    45fc:	88 23       	and	r24, r24
    45fe:	19 f0       	breq	.+6      	; 0x4606 <__vector_3+0x2c>
    4600:	81 e0       	ldi	r24, 0x01	; 1
    4602:	80 93 67 07 	sts	0x0767, r24

    // Backup TCNT1
    uint16_t tCount;
    tCount = TCNT1;
    4606:	80 91 84 00 	lds	r24, 0x0084
    460a:	90 91 85 00 	lds	r25, 0x0085

	uint8_t curChannel;
	uint8_t prevChannel;

	if (Config.RxMode != CPPM_MODE)
    460e:	20 91 a7 05 	lds	r18, 0x05A7
    4612:	22 23       	and	r18, r18
    4614:	b9 f0       	breq	.+46     	; 0x4644 <__vector_3+0x6a>
	{
		if (RX_YAW)	// Rising
    4616:	1a 9b       	sbis	0x03, 2	; 3
    4618:	05 c0       	rjmp	.+10     	; 0x4624 <__vector_3+0x4a>
		{
			RxChannelStart[RUDDER] = tCount;
    461a:	90 93 58 07 	sts	0x0758, r25
    461e:	80 93 57 07 	sts	0x0757, r24
    4622:	77 c0       	rjmp	.+238    	; 0x4712 <__vector_3+0x138>
		} 
		else 
		{			// Falling
			RxChannel[RUDDER] = tCount - RxChannelStart[RUDDER];
    4624:	20 91 57 07 	lds	r18, 0x0757
    4628:	30 91 58 07 	lds	r19, 0x0758
    462c:	82 1b       	sub	r24, r18
    462e:	93 0b       	sbc	r25, r19
    4630:	90 93 46 07 	sts	0x0746, r25
    4634:	80 93 45 07 	sts	0x0745, r24
			if (Config.PWM_Sync == RUDDER) 
    4638:	80 91 a8 05 	lds	r24, 0x05A8
    463c:	83 30       	cpi	r24, 0x03	; 3
    463e:	09 f0       	breq	.+2      	; 0x4642 <__vector_3+0x68>
    4640:	68 c0       	rjmp	.+208    	; 0x4712 <__vector_3+0x138>
    4642:	64 c0       	rjmp	.+200    	; 0x470c <__vector_3+0x132>
	}
	// CPPM code
	else
	{
		// Only respond to negative-going interrupts
		if (CPPM) return;
    4644:	1a 99       	sbic	0x03, 2	; 3
    4646:	65 c0       	rjmp	.+202    	; 0x4712 <__vector_3+0x138>

		// Check to see if previous period was a sync pulse or too small to be valid
		// If so, reset the channel number
		if (((tCount - PPMSyncStart) > SYNCPULSEWIDTH) || ((tCount - PPMSyncStart) < MINPULSEWIDTH))
    4648:	20 91 64 07 	lds	r18, 0x0764
    464c:	30 91 65 07 	lds	r19, 0x0765
    4650:	ac 01       	movw	r20, r24
    4652:	42 1b       	sub	r20, r18
    4654:	53 0b       	sbc	r21, r19
    4656:	9a 01       	movw	r18, r20
    4658:	2f 35       	cpi	r18, 0x5F	; 95
    465a:	3a 41       	sbci	r19, 0x1A	; 26
    465c:	58 f4       	brcc	.+22     	; 0x4674 <__vector_3+0x9a>
    465e:	20 91 64 07 	lds	r18, 0x0764
    4662:	30 91 65 07 	lds	r19, 0x0765
    4666:	ac 01       	movw	r20, r24
    4668:	42 1b       	sub	r20, r18
    466a:	53 0b       	sbc	r21, r19
    466c:	9a 01       	movw	r18, r20
    466e:	22 3e       	cpi	r18, 0xE2	; 226
    4670:	34 40       	sbci	r19, 0x04	; 4
    4672:	10 f4       	brcc	.+4      	; 0x4678 <__vector_3+0x9e>
		{
			ch_num = 0;
    4674:	10 92 63 07 	sts	0x0763, r1
		}

		// Update PPMSyncStart with current value
		PPMSyncStart = tCount;
    4678:	90 93 65 07 	sts	0x0765, r25
    467c:	80 93 64 07 	sts	0x0764, r24

		// Get the channel number of the current channel in the requested channel order
        curChannel = Config.ChannelOrder[ch_num];
    4680:	e0 91 63 07 	lds	r30, 0x0763
    4684:	f0 e0       	ldi	r31, 0x00	; 0
    4686:	e2 58       	subi	r30, 0x82	; 130
    4688:	fa 4f       	sbci	r31, 0xFA	; 250
    468a:	e1 81       	ldd	r30, Z+1	; 0x01

		// Set up previous channel number based on the requested channel order
		if (ch_num > 0)
    468c:	20 91 63 07 	lds	r18, 0x0763
    4690:	22 23       	and	r18, r18
    4692:	39 f0       	breq	.+14     	; 0x46a2 <__vector_3+0xc8>
		{
			prevChannel = Config.ChannelOrder[ch_num-1];
    4694:	a0 91 63 07 	lds	r26, 0x0763
    4698:	b0 e0       	ldi	r27, 0x00	; 0
    469a:	a2 58       	subi	r26, 0x82	; 130
    469c:	ba 4f       	sbci	r27, 0xFA	; 250
    469e:	2c 91       	ld	r18, X
    46a0:	01 c0       	rjmp	.+2      	; 0x46a4 <__vector_3+0xca>
		}
		else
		{
			prevChannel = 0;
    46a2:	20 e0       	ldi	r18, 0x00	; 0
		}

		// Measure the channel data
        if (ch_num < MAX_RC_CHANNELS)
    46a4:	30 91 63 07 	lds	r19, 0x0763
    46a8:	38 30       	cpi	r19, 0x08	; 8
    46aa:	38 f4       	brcc	.+14     	; 0x46ba <__vector_3+0xe0>
		{
            RxChannelStart[curChannel] = tCount;
    46ac:	f0 e0       	ldi	r31, 0x00	; 0
    46ae:	ee 0f       	add	r30, r30
    46b0:	ff 1f       	adc	r31, r31
    46b2:	ef 5a       	subi	r30, 0xAF	; 175
    46b4:	f8 4f       	sbci	r31, 0xF8	; 248
    46b6:	91 83       	std	Z+1, r25	; 0x01
    46b8:	80 83       	st	Z, r24
		}

        if (ch_num > 0)
    46ba:	30 91 63 07 	lds	r19, 0x0763
    46be:	33 23       	and	r19, r19
    46c0:	79 f0       	breq	.+30     	; 0x46e0 <__vector_3+0x106>
        {
		   RxChannel[prevChannel] = tCount - RxChannelStart[prevChannel];
    46c2:	30 e0       	ldi	r19, 0x00	; 0
    46c4:	22 0f       	add	r18, r18
    46c6:	33 1f       	adc	r19, r19
    46c8:	f9 01       	movw	r30, r18
    46ca:	ef 5a       	subi	r30, 0xAF	; 175
    46cc:	f8 4f       	sbci	r31, 0xF8	; 248
    46ce:	40 81       	ld	r20, Z
    46d0:	51 81       	ldd	r21, Z+1	; 0x01
    46d2:	84 1b       	sub	r24, r20
    46d4:	95 0b       	sbc	r25, r21
    46d6:	f9 01       	movw	r30, r18
    46d8:	e1 5c       	subi	r30, 0xC1	; 193
    46da:	f8 4f       	sbci	r31, 0xF8	; 248
    46dc:	91 83       	std	Z+1, r25	; 0x01
    46de:	80 83       	st	Z, r24
		}

        // Increment to the next channel
		ch_num++;
    46e0:	80 91 63 07 	lds	r24, 0x0763
    46e4:	8f 5f       	subi	r24, 0xFF	; 255
    46e6:	80 93 63 07 	sts	0x0763, r24

		// Work out the highest channel number automagically
		// Update the maximum channel seen so far
		if (ch_num > max_chan)
    46ea:	90 91 63 07 	lds	r25, 0x0763
    46ee:	80 91 4f 07 	lds	r24, 0x074F
    46f2:	89 17       	cp	r24, r25
    46f4:	28 f4       	brcc	.+10     	; 0x4700 <__vector_3+0x126>
		{
			max_chan = ch_num;					// Reset max channel number
    46f6:	80 91 63 07 	lds	r24, 0x0763
    46fa:	80 93 4f 07 	sts	0x074F, r24
    46fe:	09 c0       	rjmp	.+18     	; 0x4712 <__vector_3+0x138>
		}
		// If the current channel is the highest channel, CPPM is complete
		else if (ch_num == max_chan)
    4700:	90 91 63 07 	lds	r25, 0x0763
    4704:	80 91 4f 07 	lds	r24, 0x074F
    4708:	98 13       	cpse	r25, r24
    470a:	03 c0       	rjmp	.+6      	; 0x4712 <__vector_3+0x138>
		{
			Interrupted = true;					// Signal that interrupt block has finished
    470c:	81 e0       	ldi	r24, 0x01	; 1
    470e:	80 93 3e 07 	sts	0x073E, r24
		}
	}
} // ISR(INT2_vect)
    4712:	ff 91       	pop	r31
    4714:	ef 91       	pop	r30
    4716:	bf 91       	pop	r27
    4718:	af 91       	pop	r26
    471a:	9f 91       	pop	r25
    471c:	8f 91       	pop	r24
    471e:	5f 91       	pop	r21
    4720:	4f 91       	pop	r20
    4722:	3f 91       	pop	r19
    4724:	2f 91       	pop	r18
    4726:	0f 90       	pop	r0
    4728:	0f be       	out	0x3f, r0	; 63
    472a:	0f 90       	pop	r0
    472c:	1f 90       	pop	r1
    472e:	18 95       	reti

00004730 <__vector_20>:

// Interrupts from both UART0 and UART1 RX will come here
ISR(USART1_RX_vect, ISR_ALIASOF(USART0_RX_vect));

ISR(USART0_RX_vect)
{
    4730:	1f 92       	push	r1
    4732:	0f 92       	push	r0
    4734:	0f b6       	in	r0, 0x3f	; 63
    4736:	0f 92       	push	r0
    4738:	11 24       	eor	r1, r1
    473a:	2f 93       	push	r18
    473c:	3f 93       	push	r19
    473e:	4f 93       	push	r20
    4740:	5f 93       	push	r21
    4742:	6f 93       	push	r22
    4744:	7f 93       	push	r23
    4746:	8f 93       	push	r24
    4748:	9f 93       	push	r25
    474a:	af 93       	push	r26
    474c:	bf 93       	push	r27
    474e:	cf 93       	push	r28
    4750:	ef 93       	push	r30
    4752:	ff 93       	push	r31
	//************************************************************
	//* Common entry code
	//************************************************************

	// Read byte first
	temp = UDR0;
    4754:	40 91 c6 00 	lds	r20, 0x00C6

	// Handle start of new packet
	if ((TCNT1 - PPMSyncStart) > PACKET_TIMER)
    4758:	80 91 84 00 	lds	r24, 0x0084
    475c:	90 91 85 00 	lds	r25, 0x0085
    4760:	20 91 64 07 	lds	r18, 0x0764
    4764:	30 91 65 07 	lds	r19, 0x0765
    4768:	82 1b       	sub	r24, r18
    476a:	93 0b       	sbc	r25, r19
    476c:	85 3c       	cpi	r24, 0xC5	; 197
    476e:	99 40       	sbci	r25, 0x09	; 9
    4770:	80 f0       	brcs	.+32     	; 0x4792 <__vector_20+0x62>
	{
		Interrupted = false;
    4772:	10 92 3e 07 	sts	0x073E, r1
		rcindex = 0;
    4776:	10 92 3d 07 	sts	0x073D, r1
		bytecount = 0;
    477a:	10 92 50 07 	sts	0x0750, r1
		ch_num = 0;
    477e:	10 92 63 07 	sts	0x0763, r1
		checksum = 0;
    4782:	10 92 69 07 	sts	0x0769, r1
    4786:	10 92 68 07 	sts	0x0768, r1
		chanmask16 = 0;
    478a:	10 92 62 07 	sts	0x0762, r1
    478e:	10 92 61 07 	sts	0x0761, r1
	}

	// Timestamp this interrupt
	PPMSyncStart = TCNT1;
    4792:	80 91 84 00 	lds	r24, 0x0084
    4796:	90 91 85 00 	lds	r25, 0x0085
    479a:	90 93 65 07 	sts	0x0765, r25
    479e:	80 93 64 07 	sts	0x0764, r24
	
	// Put received byte in buffer if space available
	if (rcindex < SBUFFER_SIZE)
    47a2:	80 91 3d 07 	lds	r24, 0x073D
    47a6:	89 31       	cpi	r24, 0x19	; 25
    47a8:	50 f4       	brcc	.+20     	; 0x47be <__vector_20+0x8e>
	{
		sBuffer[rcindex++] = temp;			
    47aa:	e0 91 3d 07 	lds	r30, 0x073D
    47ae:	81 e0       	ldi	r24, 0x01	; 1
    47b0:	8e 0f       	add	r24, r30
    47b2:	80 93 3d 07 	sts	0x073D, r24
    47b6:	f0 e0       	ldi	r31, 0x00	; 0
    47b8:	ed 5c       	subi	r30, 0xCD	; 205
    47ba:	fa 4f       	sbci	r31, 0xFA	; 250
    47bc:	40 83       	st	Z, r20
	//* 	bit0 = n/a
	//* 24 endbyte = 00000000b
	//*
	//************************************************************

	if (Config.RxMode == SBUS)
    47be:	80 91 a7 05 	lds	r24, 0x05A7
    47c2:	82 30       	cpi	r24, 0x02	; 2
    47c4:	09 f0       	breq	.+2      	; 0x47c8 <__vector_20+0x98>
    47c6:	85 c0       	rjmp	.+266    	; 0x48d2 <__vector_20+0x1a2>
	{
		// Flag that packet has completed
		if ((bytecount == 24) && (temp == 0x00))
    47c8:	80 91 50 07 	lds	r24, 0x0750
    47cc:	88 31       	cpi	r24, 0x18	; 24
    47ce:	09 f0       	breq	.+2      	; 0x47d2 <__vector_20+0xa2>
    47d0:	f1 c0       	rjmp	.+482    	; 0x49b4 <__vector_20+0x284>
    47d2:	41 11       	cpse	r20, r1
    47d4:	ef c0       	rjmp	.+478    	; 0x49b4 <__vector_20+0x284>
		{
			// If frame lost, ignore packet
			if ((sBuffer[23] & 0x20) == 0)
    47d6:	80 91 4a 05 	lds	r24, 0x054A
    47da:	85 fd       	sbrc	r24, 5
    47dc:	eb c0       	rjmp	.+470    	; 0x49b4 <__vector_20+0x284>
			{
				// RC sync established
				Interrupted = true;	
    47de:	81 e0       	ldi	r24, 0x01	; 1
    47e0:	80 93 3e 07 	sts	0x073E, r24
    47e4:	80 e0       	ldi	r24, 0x00	; 0
    47e6:	90 e0       	ldi	r25, 0x00	; 0

				// Clear channel data
				for (j = 0; j < MAX_RC_CHANNELS; j++)
				{
					RxChannel[j] = 0;
    47e8:	fc 01       	movw	r30, r24
    47ea:	ee 0f       	add	r30, r30
    47ec:	ff 1f       	adc	r31, r31
    47ee:	e1 5c       	subi	r30, 0xC1	; 193
    47f0:	f8 4f       	sbci	r31, 0xF8	; 248
    47f2:	11 82       	std	Z+1, r1	; 0x01
    47f4:	10 82       	st	Z, r1
    47f6:	01 96       	adiw	r24, 0x01	; 1
			{
				// RC sync established
				Interrupted = true;	

				// Clear channel data
				for (j = 0; j < MAX_RC_CHANNELS; j++)
    47f8:	88 30       	cpi	r24, 0x08	; 8
    47fa:	91 05       	cpc	r25, r1
    47fc:	a9 f7       	brne	.-22     	; 0x47e8 <__vector_20+0xb8>
    47fe:	a8 e5       	ldi	r26, 0x58	; 88
    4800:	70 e0       	ldi	r23, 0x00	; 0
    4802:	c0 e0       	ldi	r28, 0x00	; 0
    4804:	60 e0       	ldi	r22, 0x00	; 0
    4806:	b1 e0       	ldi	r27, 0x01	; 1
                for (j=0; j<88; j++)
                {
                    if (sBuffer[sindex] & (1<<chan_mask))
                    {
						// Place the RC data into the correct channel order for the tranmitted system
						RxChannel[Config.ChannelOrder[chan_shift]] |= (1<<data_mask);
    4808:	21 e0       	ldi	r18, 0x01	; 1
    480a:	30 e0       	ldi	r19, 0x00	; 0

                // Deconstruct S-Bus data
				// 8 channels * 11 bits = 88 bits
                for (j=0; j<88; j++)
                {
                    if (sBuffer[sindex] & (1<<chan_mask))
    480c:	eb 2f       	mov	r30, r27
    480e:	f0 e0       	ldi	r31, 0x00	; 0
    4810:	ed 5c       	subi	r30, 0xCD	; 205
    4812:	fa 4f       	sbci	r31, 0xFA	; 250
    4814:	80 81       	ld	r24, Z
    4816:	90 e0       	ldi	r25, 0x00	; 0
    4818:	06 2e       	mov	r0, r22
    481a:	02 c0       	rjmp	.+4      	; 0x4820 <__vector_20+0xf0>
    481c:	95 95       	asr	r25
    481e:	87 95       	ror	r24
    4820:	0a 94       	dec	r0
    4822:	e2 f7       	brpl	.-8      	; 0x481c <__vector_20+0xec>
    4824:	80 ff       	sbrs	r24, 0
    4826:	17 c0       	rjmp	.+46     	; 0x4856 <__vector_20+0x126>
                    {
						// Place the RC data into the correct channel order for the tranmitted system
						RxChannel[Config.ChannelOrder[chan_shift]] |= (1<<data_mask);
    4828:	ec 2f       	mov	r30, r28
    482a:	f0 e0       	ldi	r31, 0x00	; 0
    482c:	e2 58       	subi	r30, 0x82	; 130
    482e:	fa 4f       	sbci	r31, 0xFA	; 250
    4830:	e1 81       	ldd	r30, Z+1	; 0x01
    4832:	f0 e0       	ldi	r31, 0x00	; 0
    4834:	ee 0f       	add	r30, r30
    4836:	ff 1f       	adc	r31, r31
    4838:	e1 5c       	subi	r30, 0xC1	; 193
    483a:	f8 4f       	sbci	r31, 0xF8	; 248
    483c:	80 81       	ld	r24, Z
    483e:	91 81       	ldd	r25, Z+1	; 0x01
    4840:	a9 01       	movw	r20, r18
    4842:	07 2e       	mov	r0, r23
    4844:	02 c0       	rjmp	.+4      	; 0x484a <__vector_20+0x11a>
    4846:	44 0f       	add	r20, r20
    4848:	55 1f       	adc	r21, r21
    484a:	0a 94       	dec	r0
    484c:	e2 f7       	brpl	.-8      	; 0x4846 <__vector_20+0x116>
    484e:	84 2b       	or	r24, r20
    4850:	95 2b       	or	r25, r21
    4852:	91 83       	std	Z+1, r25	; 0x01
    4854:	80 83       	st	Z, r24
                    }

                    chan_mask++;
    4856:	6f 5f       	subi	r22, 0xFF	; 255
                    data_mask++;
    4858:	7f 5f       	subi	r23, 0xFF	; 255

                    // If we have done 8 bits, move to next byte in buffer
					if (chan_mask == 8)
    485a:	68 30       	cpi	r22, 0x08	; 8
    485c:	11 f4       	brne	.+4      	; 0x4862 <__vector_20+0x132>
                    {
                        chan_mask =0;
                        sindex++;
    485e:	bf 5f       	subi	r27, 0xFF	; 255
                    data_mask++;

                    // If we have done 8 bits, move to next byte in buffer
					if (chan_mask == 8)
                    {
                        chan_mask =0;
    4860:	60 e0       	ldi	r22, 0x00	; 0
                        sindex++;
                    }

                    // If we have reconstructed all 11 bits of one channel's data (2047)
					// increment the channel number
					if (data_mask == 11)
    4862:	7b 30       	cpi	r23, 0x0B	; 11
    4864:	11 f4       	brne	.+4      	; 0x486a <__vector_20+0x13a>
                    {
                        data_mask =0;
                        chan_shift++;
    4866:	cf 5f       	subi	r28, 0xFF	; 255

                    // If we have reconstructed all 11 bits of one channel's data (2047)
					// increment the channel number
					if (data_mask == 11)
                    {
                        data_mask =0;
    4868:	70 e0       	ldi	r23, 0x00	; 0
    486a:	a1 50       	subi	r26, 0x01	; 1
				// Start from second byte
				sindex = 1;

                // Deconstruct S-Bus data
				// 8 channels * 11 bits = 88 bits
                for (j=0; j<88; j++)
    486c:	79 f6       	brne	.-98     	; 0x480c <__vector_20+0xdc>
    486e:	40 e0       	ldi	r20, 0x00	; 0
    4870:	50 e0       	ldi	r21, 0x00	; 0

				// Convert to  OpenAero2 values (0~2047 -> 2500~4999)
				for (j = 0; j < MAX_RC_CHANNELS; j++)
				{
					// Subtract weird-ass Futaba offset
					itemp16= RxChannel[j] - 1024;	
    4872:	fa 01       	movw	r30, r20
    4874:	ee 0f       	add	r30, r30
    4876:	ff 1f       	adc	r31, r31
    4878:	e1 5c       	subi	r30, 0xC1	; 193
    487a:	f8 4f       	sbci	r31, 0xF8	; 248
    487c:	20 81       	ld	r18, Z
    487e:	31 81       	ldd	r19, Z+1	; 0x01
    4880:	34 50       	subi	r19, 0x04	; 4
					
					// Expand into OpenAero2 units							
					itemp16 = itemp16 + (itemp16 >> 2) + (itemp16 >> 3) + (itemp16 >> 4) + (itemp16 >> 5); 	// Quick multiply by 1.469 :)
    4882:	c9 01       	movw	r24, r18
    4884:	95 95       	asr	r25
    4886:	87 95       	ror	r24
    4888:	95 95       	asr	r25
    488a:	87 95       	ror	r24
    488c:	82 0f       	add	r24, r18
    488e:	93 1f       	adc	r25, r19
    4890:	b9 01       	movw	r22, r18
    4892:	a3 e0       	ldi	r26, 0x03	; 3
    4894:	75 95       	asr	r23
    4896:	67 95       	ror	r22
    4898:	aa 95       	dec	r26
    489a:	e1 f7       	brne	.-8      	; 0x4894 <__vector_20+0x164>
    489c:	86 0f       	add	r24, r22
    489e:	97 1f       	adc	r25, r23
    48a0:	b9 01       	movw	r22, r18
    48a2:	b4 e0       	ldi	r27, 0x04	; 4
    48a4:	75 95       	asr	r23
    48a6:	67 95       	ror	r22
    48a8:	ba 95       	dec	r27
    48aa:	e1 f7       	brne	.-8      	; 0x48a4 <__vector_20+0x174>
    48ac:	86 0f       	add	r24, r22
    48ae:	97 1f       	adc	r25, r23
    48b0:	c5 e0       	ldi	r28, 0x05	; 5
    48b2:	35 95       	asr	r19
    48b4:	27 95       	ror	r18
    48b6:	ca 95       	dec	r28
    48b8:	e1 f7       	brne	.-8      	; 0x48b2 <__vector_20+0x182>
    48ba:	82 0f       	add	r24, r18
    48bc:	93 1f       	adc	r25, r19
					//itemp16 = itemp16 + (itemp16 >> 1); // Quicker mulitply by 1.5

					// Add back in OpenAero2 offset
					RxChannel[j] = itemp16 + 3750;				
    48be:	8a 55       	subi	r24, 0x5A	; 90
    48c0:	91 4f       	sbci	r25, 0xF1	; 241
    48c2:	91 83       	std	Z+1, r25	; 0x01
    48c4:	80 83       	st	Z, r24
    48c6:	4f 5f       	subi	r20, 0xFF	; 255
    48c8:	5f 4f       	sbci	r21, 0xFF	; 255
                        chan_shift++;
                    }
                }

				// Convert to  OpenAero2 values (0~2047 -> 2500~4999)
				for (j = 0; j < MAX_RC_CHANNELS; j++)
    48ca:	48 30       	cpi	r20, 0x08	; 8
    48cc:	51 05       	cpc	r21, r1
    48ce:	89 f6       	brne	.-94     	; 0x4872 <__vector_20+0x142>
    48d0:	71 c0       	rjmp	.+226    	; 0x49b4 <__vector_20+0x284>
	//* 0 = 750us, 1023/2047 = 2250us
	//*
	//************************************************************

	// Handle Spektrum format
	if (Config.RxMode == SPEKTRUM)
    48d2:	83 30       	cpi	r24, 0x03	; 3
    48d4:	09 f0       	breq	.+2      	; 0x48d8 <__vector_20+0x1a8>
    48d6:	6e c0       	rjmp	.+220    	; 0x49b4 <__vector_20+0x284>
	{
		// Process data when all packets received
		if (bytecount >= 15)
    48d8:	80 91 50 07 	lds	r24, 0x0750
    48dc:	8f 30       	cpi	r24, 0x0F	; 15
    48de:	08 f4       	brcc	.+2      	; 0x48e2 <__vector_20+0x1b2>
    48e0:	69 c0       	rjmp	.+210    	; 0x49b4 <__vector_20+0x284>
		{
			Interrupted = true;	
    48e2:	81 e0       	ldi	r24, 0x01	; 1
    48e4:	80 93 3e 07 	sts	0x073E, r24

			// Ahem... ah... just stick the last byte into the buffer manually...(hides)
			sBuffer[15] = temp;
    48e8:	40 93 42 05 	sts	0x0542, r20

			// Set start of channel data per format
			sindex = 2; // Channel data from byte 3

			// Work out if this is 10 or 11 bit data
			if (sBuffer[1] & 0x10) 	// 0 for 10 bit resolution 1 for 11 bit resolution
    48ec:	80 91 34 05 	lds	r24, 0x0534
    48f0:	84 ff       	sbrs	r24, 4
    48f2:	04 c0       	rjmp	.+8      	; 0x48fc <__vector_20+0x1cc>
			{
				chan_mask = 0x78;	// 11 bit (2048)
				data_mask = 0x07;
    48f4:	c7 e0       	ldi	r28, 0x07	; 7
				chan_shift = 0x03;
    48f6:	63 e0       	ldi	r22, 0x03	; 3
			sindex = 2; // Channel data from byte 3

			// Work out if this is 10 or 11 bit data
			if (sBuffer[1] & 0x10) 	// 0 for 10 bit resolution 1 for 11 bit resolution
			{
				chan_mask = 0x78;	// 11 bit (2048)
    48f8:	78 e7       	ldi	r23, 0x78	; 120
    48fa:	03 c0       	rjmp	.+6      	; 0x4902 <__vector_20+0x1d2>
				chan_shift = 0x03;
			}
			else
			{
				chan_mask = 0x3C;	// 10 bit (1024)
				data_mask = 0x03;
    48fc:	c3 e0       	ldi	r28, 0x03	; 3
				chan_shift = 0x02;
    48fe:	62 e0       	ldi	r22, 0x02	; 2
				data_mask = 0x07;
				chan_shift = 0x03;
			}
			else
			{
				chan_mask = 0x3C;	// 10 bit (1024)
    4900:	7c e3       	ldi	r23, 0x3C	; 60
    4902:	e6 e3       	ldi	r30, 0x36	; 54
    4904:	f5 e0       	ldi	r31, 0x05	; 5
    4906:	df 01       	movw	r26, r30
    4908:	11 97       	sbiw	r26, 0x01	; 1
			// Work out which channel the data is intended for from the channel number data
			// Channels can also be in the second packet. Spektrum has 7 channels per packet.
			for (j = 0; j < 7; j++)
			{
				// Extract channel number
				ch_num = (sBuffer[sindex] & chan_mask) >> chan_shift;
    490a:	2c 91       	ld	r18, X
    490c:	82 2f       	mov	r24, r18
    490e:	87 23       	and	r24, r23
    4910:	90 e0       	ldi	r25, 0x00	; 0
    4912:	06 2e       	mov	r0, r22
    4914:	02 c0       	rjmp	.+4      	; 0x491a <__vector_20+0x1ea>
    4916:	95 95       	asr	r25
    4918:	87 95       	ror	r24
    491a:	0a 94       	dec	r0
    491c:	e2 f7       	brpl	.-8      	; 0x4916 <__vector_20+0x1e6>
    491e:	80 93 63 07 	sts	0x0763, r24

				// Reconstruct channel data
				temp16 = ((sBuffer[sindex] & data_mask) << 8) + sBuffer[sindex + 1];
    4922:	80 81       	ld	r24, Z

				// Expand to OpenAero2 units if a valid channel
				// Blank channels have the channel number of 16
				if (ch_num < MAX_RC_CHANNELS)
    4924:	90 91 63 07 	lds	r25, 0x0763
    4928:	98 30       	cpi	r25, 0x08	; 8
    492a:	f0 f5       	brcc	.+124    	; 0x49a8 <__vector_20+0x278>
			{
				// Extract channel number
				ch_num = (sBuffer[sindex] & chan_mask) >> chan_shift;

				// Reconstruct channel data
				temp16 = ((sBuffer[sindex] & data_mask) << 8) + sBuffer[sindex + 1];
    492c:	2c 23       	and	r18, r28
    492e:	30 e0       	ldi	r19, 0x00	; 0
    4930:	32 2f       	mov	r19, r18
    4932:	22 27       	eor	r18, r18
    4934:	28 0f       	add	r18, r24
    4936:	31 1d       	adc	r19, r1
				// Expand to OpenAero2 units if a valid channel
				// Blank channels have the channel number of 16
				if (ch_num < MAX_RC_CHANNELS)
				{
					// Subtract Spektrum center offset
					if (chan_shift == 0x03) // 11-bit
    4938:	63 30       	cpi	r22, 0x03	; 3
    493a:	11 f4       	brne	.+4      	; 0x4940 <__vector_20+0x210>
					{
						itemp16 = temp16 - 1024;
    493c:	34 50       	subi	r19, 0x04	; 4
    493e:	01 c0       	rjmp	.+2      	; 0x4942 <__vector_20+0x212>
					}
					else
					{
						itemp16 = temp16 - 512;	
    4940:	32 50       	subi	r19, 0x02	; 2
					}					

					// Quick multiply by 2.93
					itemp16 = (itemp16 << 1) + (itemp16 >> 1) + (itemp16 >> 2) + (itemp16 >> 3) + (itemp16 >> 4); 
    4942:	c9 01       	movw	r24, r18
    4944:	88 0f       	add	r24, r24
    4946:	99 1f       	adc	r25, r25
    4948:	a9 01       	movw	r20, r18
    494a:	55 95       	asr	r21
    494c:	47 95       	ror	r20
    494e:	84 0f       	add	r24, r20
    4950:	95 1f       	adc	r25, r21
    4952:	a9 01       	movw	r20, r18
    4954:	55 95       	asr	r21
    4956:	47 95       	ror	r20
    4958:	55 95       	asr	r21
    495a:	47 95       	ror	r20
    495c:	84 0f       	add	r24, r20
    495e:	95 1f       	adc	r25, r21
    4960:	a9 01       	movw	r20, r18
    4962:	a3 e0       	ldi	r26, 0x03	; 3
    4964:	55 95       	asr	r21
    4966:	47 95       	ror	r20
    4968:	aa 95       	dec	r26
    496a:	e1 f7       	brne	.-8      	; 0x4964 <__vector_20+0x234>
    496c:	84 0f       	add	r24, r20
    496e:	95 1f       	adc	r25, r21
    4970:	b4 e0       	ldi	r27, 0x04	; 4
    4972:	35 95       	asr	r19
    4974:	27 95       	ror	r18
    4976:	ba 95       	dec	r27
    4978:	e1 f7       	brne	.-8      	; 0x4972 <__vector_20+0x242>
    497a:	82 0f       	add	r24, r18
    497c:	93 1f       	adc	r25, r19

					if (chan_shift == 0x03) // 11-bit
    497e:	63 30       	cpi	r22, 0x03	; 3
    4980:	11 f4       	brne	.+4      	; 0x4986 <__vector_20+0x256>
					{
						// Divide in case of 11-bit value
						itemp16 = itemp16 >> 1;								
    4982:	95 95       	asr	r25
    4984:	87 95       	ror	r24
					}

					// Add back in OpenAero2 offset
					itemp16 += 3750;										

					RxChannel[Config.ChannelOrder[ch_num]] = itemp16;
    4986:	a0 91 63 07 	lds	r26, 0x0763
    498a:	b0 e0       	ldi	r27, 0x00	; 0
    498c:	a2 58       	subi	r26, 0x82	; 130
    498e:	ba 4f       	sbci	r27, 0xFA	; 250
    4990:	11 96       	adiw	r26, 0x01	; 1
    4992:	ac 91       	ld	r26, X
    4994:	b0 e0       	ldi	r27, 0x00	; 0
						// Divide in case of 11-bit value
						itemp16 = itemp16 >> 1;								
					}

					// Add back in OpenAero2 offset
					itemp16 += 3750;										
    4996:	8a 55       	subi	r24, 0x5A	; 90
    4998:	91 4f       	sbci	r25, 0xF1	; 241

					RxChannel[Config.ChannelOrder[ch_num]] = itemp16;
    499a:	aa 0f       	add	r26, r26
    499c:	bb 1f       	adc	r27, r27
    499e:	a1 5c       	subi	r26, 0xC1	; 193
    49a0:	b8 4f       	sbci	r27, 0xF8	; 248
    49a2:	11 96       	adiw	r26, 0x01	; 1
    49a4:	9c 93       	st	X, r25
    49a6:	8e 93       	st	-X, r24
    49a8:	32 96       	adiw	r30, 0x02	; 2
				chan_shift = 0x02;
			}

			// Work out which channel the data is intended for from the channel number data
			// Channels can also be in the second packet. Spektrum has 7 channels per packet.
			for (j = 0; j < 7; j++)
    49aa:	85 e0       	ldi	r24, 0x05	; 5
    49ac:	e4 34       	cpi	r30, 0x44	; 68
    49ae:	f8 07       	cpc	r31, r24
    49b0:	09 f0       	breq	.+2      	; 0x49b4 <__vector_20+0x284>
    49b2:	a9 cf       	rjmp	.-174    	; 0x4906 <__vector_20+0x1d6>
	//************************************************************
	//* Common exit code
	//************************************************************

	// Increment byte count
	bytecount++;
    49b4:	80 91 50 07 	lds	r24, 0x0750
    49b8:	8f 5f       	subi	r24, 0xFF	; 255
    49ba:	80 93 50 07 	sts	0x0750, r24
}
    49be:	ff 91       	pop	r31
    49c0:	ef 91       	pop	r30
    49c2:	cf 91       	pop	r28
    49c4:	bf 91       	pop	r27
    49c6:	af 91       	pop	r26
    49c8:	9f 91       	pop	r25
    49ca:	8f 91       	pop	r24
    49cc:	7f 91       	pop	r23
    49ce:	6f 91       	pop	r22
    49d0:	5f 91       	pop	r21
    49d2:	4f 91       	pop	r20
    49d4:	3f 91       	pop	r19
    49d6:	2f 91       	pop	r18
    49d8:	0f 90       	pop	r0
    49da:	0f be       	out	0x3f, r0	; 63
    49dc:	0f 90       	pop	r0
    49de:	1f 90       	pop	r1
    49e0:	18 95       	reti

000049e2 <print_menu_frame>:
// style = menu style (0 = main, 1 = sub)
//************************************************************
void print_menu_frame(uint8_t style)
{
	// Print bottom markers
	if (style == 0)
    49e2:	81 11       	cpse	r24, r1
    49e4:	23 c0       	rjmp	.+70     	; 0x4a2c <print_menu_frame+0x4a>
	{
		LCD_Display_Text(12, (const unsigned char*)Wingdings, 0, 57); 	// Left
    49e6:	29 e3       	ldi	r18, 0x39	; 57
    49e8:	30 e0       	ldi	r19, 0x00	; 0
    49ea:	40 e0       	ldi	r20, 0x00	; 0
    49ec:	50 e0       	ldi	r21, 0x00	; 0
    49ee:	6d e0       	ldi	r22, 0x0D	; 13
    49f0:	71 e0       	ldi	r23, 0x01	; 1
    49f2:	8c e0       	ldi	r24, 0x0C	; 12
    49f4:	0e 94 84 1c 	call	0x3908	; 0x3908 <LCD_Display_Text>
		LCD_Display_Text(10, (const unsigned char*)Wingdings, 38, 59); 	// Up
    49f8:	2b e3       	ldi	r18, 0x3B	; 59
    49fa:	30 e0       	ldi	r19, 0x00	; 0
    49fc:	46 e2       	ldi	r20, 0x26	; 38
    49fe:	50 e0       	ldi	r21, 0x00	; 0
    4a00:	6d e0       	ldi	r22, 0x0D	; 13
    4a02:	71 e0       	ldi	r23, 0x01	; 1
    4a04:	8a e0       	ldi	r24, 0x0A	; 10
    4a06:	0e 94 84 1c 	call	0x3908	; 0x3908 <LCD_Display_Text>
		LCD_Display_Text(9, (const unsigned char*)Wingdings, 80, 59); 	// Down
    4a0a:	2b e3       	ldi	r18, 0x3B	; 59
    4a0c:	30 e0       	ldi	r19, 0x00	; 0
    4a0e:	40 e5       	ldi	r20, 0x50	; 80
    4a10:	50 e0       	ldi	r21, 0x00	; 0
    4a12:	6d e0       	ldi	r22, 0x0D	; 13
    4a14:	71 e0       	ldi	r23, 0x01	; 1
    4a16:	89 e0       	ldi	r24, 0x09	; 9
    4a18:	0e 94 84 1c 	call	0x3908	; 0x3908 <LCD_Display_Text>
		LCD_Display_Text(11, (const unsigned char*)Wingdings, 120, 57); 	// Right
    4a1c:	29 e3       	ldi	r18, 0x39	; 57
    4a1e:	30 e0       	ldi	r19, 0x00	; 0
    4a20:	48 e7       	ldi	r20, 0x78	; 120
    4a22:	50 e0       	ldi	r21, 0x00	; 0
    4a24:	6d e0       	ldi	r22, 0x0D	; 13
    4a26:	71 e0       	ldi	r23, 0x01	; 1
    4a28:	8b e0       	ldi	r24, 0x0B	; 11
    4a2a:	22 c0       	rjmp	.+68     	; 0x4a70 <print_menu_frame+0x8e>
	}
	else
	{
		LCD_Display_Text(16, (const unsigned char*)Verdana8, 0, 54); 	// Clear
    4a2c:	26 e3       	ldi	r18, 0x36	; 54
    4a2e:	30 e0       	ldi	r19, 0x00	; 0
    4a30:	40 e0       	ldi	r20, 0x00	; 0
    4a32:	50 e0       	ldi	r21, 0x00	; 0
    4a34:	65 e2       	ldi	r22, 0x25	; 37
    4a36:	7a e0       	ldi	r23, 0x0A	; 10
    4a38:	80 e1       	ldi	r24, 0x10	; 16
    4a3a:	0e 94 84 1c 	call	0x3908	; 0x3908 <LCD_Display_Text>
		LCD_Display_Text(10, (const unsigned char*)Wingdings, 38, 59);	// Up
    4a3e:	2b e3       	ldi	r18, 0x3B	; 59
    4a40:	30 e0       	ldi	r19, 0x00	; 0
    4a42:	46 e2       	ldi	r20, 0x26	; 38
    4a44:	50 e0       	ldi	r21, 0x00	; 0
    4a46:	6d e0       	ldi	r22, 0x0D	; 13
    4a48:	71 e0       	ldi	r23, 0x01	; 1
    4a4a:	8a e0       	ldi	r24, 0x0A	; 10
    4a4c:	0e 94 84 1c 	call	0x3908	; 0x3908 <LCD_Display_Text>
		LCD_Display_Text(9, (const unsigned char*)Wingdings, 80, 59);	// Down
    4a50:	2b e3       	ldi	r18, 0x3B	; 59
    4a52:	30 e0       	ldi	r19, 0x00	; 0
    4a54:	40 e5       	ldi	r20, 0x50	; 80
    4a56:	50 e0       	ldi	r21, 0x00	; 0
    4a58:	6d e0       	ldi	r22, 0x0D	; 13
    4a5a:	71 e0       	ldi	r23, 0x01	; 1
    4a5c:	89 e0       	ldi	r24, 0x09	; 9
    4a5e:	0e 94 84 1c 	call	0x3908	; 0x3908 <LCD_Display_Text>
		LCD_Display_Text(17, (const unsigned char*)Verdana8, 103, 54);	// Save
    4a62:	26 e3       	ldi	r18, 0x36	; 54
    4a64:	30 e0       	ldi	r19, 0x00	; 0
    4a66:	47 e6       	ldi	r20, 0x67	; 103
    4a68:	50 e0       	ldi	r21, 0x00	; 0
    4a6a:	65 e2       	ldi	r22, 0x25	; 37
    4a6c:	7a e0       	ldi	r23, 0x0A	; 10
    4a6e:	81 e1       	ldi	r24, 0x11	; 17
    4a70:	0e 94 84 1c 	call	0x3908	; 0x3908 <LCD_Display_Text>
	}

	// Write from buffer
	write_buffer(buffer,1);
    4a74:	61 e0       	ldi	r22, 0x01	; 1
    4a76:	80 e0       	ldi	r24, 0x00	; 0
    4a78:	91 e0       	ldi	r25, 0x01	; 1
    4a7a:	0e 94 a1 1a 	call	0x3542	; 0x3542 <write_buffer>
    4a7e:	08 95       	ret

00004a80 <get_menu_range>:
//************************************************************
// get_menu_range - Get range info from PROGMEM for a specific item
//************************************************************

menu_range_t get_menu_range(const unsigned char* menu_ranges, uint8_t menuitem)
{
    4a80:	aa e0       	ldi	r26, 0x0A	; 10
    4a82:	b0 e0       	ldi	r27, 0x00	; 0
    4a84:	e6 e4       	ldi	r30, 0x46	; 70
    4a86:	f5 e2       	ldi	r31, 0x25	; 37
    4a88:	0c 94 a3 3e 	jmp	0x7d46	; 0x7d46 <__prologue_saves__+0x20>
	menu_range_t	range;
	memcpy_P(&range, &menu_ranges[menuitem * sizeof(range)], sizeof(range));
    4a8c:	25 e0       	ldi	r18, 0x05	; 5
    4a8e:	62 9f       	mul	r22, r18
    4a90:	80 0d       	add	r24, r0
    4a92:	91 1d       	adc	r25, r1
    4a94:	11 24       	eor	r1, r1
    4a96:	bc 01       	movw	r22, r24
    4a98:	45 e0       	ldi	r20, 0x05	; 5
    4a9a:	50 e0       	ldi	r21, 0x00	; 0
    4a9c:	ce 01       	movw	r24, r28
    4a9e:	06 96       	adiw	r24, 0x06	; 6
    4aa0:	0e 94 ca 3e 	call	0x7d94	; 0x7d94 <memcpy_P>
	return (range);
    4aa4:	85 e0       	ldi	r24, 0x05	; 5
    4aa6:	fe 01       	movw	r30, r28
    4aa8:	36 96       	adiw	r30, 0x06	; 6
    4aaa:	de 01       	movw	r26, r28
    4aac:	11 96       	adiw	r26, 0x01	; 1
    4aae:	01 90       	ld	r0, Z+
    4ab0:	0d 92       	st	X+, r0
    4ab2:	8a 95       	dec	r24
    4ab4:	e1 f7       	brne	.-8      	; 0x4aae <get_menu_range+0x2e>
    4ab6:	29 81       	ldd	r18, Y+1	; 0x01
    4ab8:	3a 81       	ldd	r19, Y+2	; 0x02
    4aba:	4b 81       	ldd	r20, Y+3	; 0x03
    4abc:	5c 81       	ldd	r21, Y+4	; 0x04
    4abe:	6d 81       	ldd	r22, Y+5	; 0x05
}
    4ac0:	70 e0       	ldi	r23, 0x00	; 0
    4ac2:	80 e0       	ldi	r24, 0x00	; 0
    4ac4:	90 e0       	ldi	r25, 0x00	; 0
    4ac6:	2a 96       	adiw	r28, 0x0a	; 10
    4ac8:	e2 e0       	ldi	r30, 0x02	; 2
    4aca:	0c 94 bf 3e 	jmp	0x7d7e	; 0x7d7e <__epilogue_restores__+0x20>

00004ace <print_menu_text>:
// x = horizontal location on screen
// y = vertical location on screen
//************************************************************

void print_menu_text(int16_t values, uint8_t style, uint8_t text_link, uint8_t x, uint8_t y)
{
    4ace:	a1 e0       	ldi	r26, 0x01	; 1
    4ad0:	b0 e0       	ldi	r27, 0x00	; 0
    4ad2:	ed e6       	ldi	r30, 0x6D	; 109
    4ad4:	f5 e2       	ldi	r31, 0x25	; 37
    4ad6:	0c 94 a1 3e 	jmp	0x7d42	; 0x7d42 <__prologue_saves__+0x1c>
    4ada:	e4 2f       	mov	r30, r20
	if ((style == 0) || (style == 2)) // Numeral
    4adc:	36 2f       	mov	r19, r22
    4ade:	3d 7f       	andi	r19, 0xFD	; 253
    4ae0:	81 f4       	brne	.+32     	; 0x4b02 <print_menu_text+0x34>
    4ae2:	4a e0       	ldi	r20, 0x0A	; 10
    4ae4:	6c e4       	ldi	r22, 0x4C	; 76
    4ae6:	75 e0       	ldi	r23, 0x05	; 5
    4ae8:	29 83       	std	Y+1, r18	; 0x01
    4aea:	0e 94 d3 3e 	call	0x7da6	; 0x7da6 <__itoa_ncheck>
	{
		mugui_lcd_puts(itoa(values,pBuffer,10),(const unsigned char*)Verdana8,x,y);
    4aee:	10 e0       	ldi	r17, 0x00	; 0
    4af0:	29 81       	ldd	r18, Y+1	; 0x01
    4af2:	42 2f       	mov	r20, r18
    4af4:	50 e0       	ldi	r21, 0x00	; 0
    4af6:	98 01       	movw	r18, r16
    4af8:	65 e2       	ldi	r22, 0x25	; 37
    4afa:	7a e0       	ldi	r23, 0x0A	; 10
    4afc:	0e 94 89 34 	call	0x6912	; 0x6912 <mugui_lcd_puts>
    4b00:	0b c0       	rjmp	.+22     	; 0x4b18 <print_menu_text+0x4a>
	}
	else if (style == 1) // Text
    4b02:	61 30       	cpi	r22, 0x01	; 1
    4b04:	49 f4       	brne	.+18     	; 0x4b18 <print_menu_text+0x4a>
	{
		LCD_Display_Text(text_link, (const unsigned char*)Verdana8,x,y);
    4b06:	10 e0       	ldi	r17, 0x00	; 0
    4b08:	42 2f       	mov	r20, r18
    4b0a:	50 e0       	ldi	r21, 0x00	; 0
    4b0c:	98 01       	movw	r18, r16
    4b0e:	65 e2       	ldi	r22, 0x25	; 37
    4b10:	7a e0       	ldi	r23, 0x0A	; 10
    4b12:	8e 2f       	mov	r24, r30
    4b14:	0e 94 84 1c 	call	0x3908	; 0x3908 <LCD_Display_Text>
	}
}
    4b18:	21 96       	adiw	r28, 0x01	; 1
    4b1a:	e4 e0       	ldi	r30, 0x04	; 4
    4b1c:	0c 94 bd 3e 	jmp	0x7d7a	; 0x7d7a <__epilogue_restores__+0x1c>

00004b20 <poll_buttons>:
// Poll buttons, wait until something pressed, debounce and 
// return button info.
//************************************************************

uint8_t poll_buttons(bool acceleration)
{
    4b20:	68 2f       	mov	r22, r24
	static uint8_t button_count = 0;
	uint8_t buttons = 0;

	button = (PINB & 0xf0); // button is global, buttons is local
    4b22:	93 b1       	in	r25, 0x03	; 3
    4b24:	90 7f       	andi	r25, 0xF0	; 240
    4b26:	90 93 6a 07 	sts	0x076A, r25
//************************************************************

uint8_t poll_buttons(bool acceleration)
{
	static uint8_t button_count = 0;
	uint8_t buttons = 0;
    4b2a:	80 e0       	ldi	r24, 0x00	; 0
			button = buttons;
		}

		// Reset button acceleration
		button_count = 0;
		button_multiplier = 1;
    4b2c:	71 e0       	ldi	r23, 0x01	; 1
	static uint8_t button_count = 0;
	uint8_t buttons = 0;

	button = (PINB & 0xf0); // button is global, buttons is local

	while (button == NONE)					
    4b2e:	90 91 6a 07 	lds	r25, 0x076A
    4b32:	90 3f       	cpi	r25, 0xF0	; 240
    4b34:	c9 f4       	brne	.+50     	; 0x4b68 <poll_buttons+0x48>
	{
		buttons = (PINB & 0xf0);	
    4b36:	83 b1       	in	r24, 0x03	; 3
    4b38:	80 7f       	andi	r24, 0xF0	; 240
    4b3a:	ef e4       	ldi	r30, 0x4F	; 79
    4b3c:	f3 ec       	ldi	r31, 0xC3	; 195
    4b3e:	31 97       	sbiw	r30, 0x01	; 1
    4b40:	f1 f7       	brne	.-4      	; 0x4b3e <poll_buttons+0x1e>
    4b42:	00 c0       	rjmp	.+0      	; 0x4b44 <poll_buttons+0x24>
    4b44:	00 00       	nop
		_delay_ms(10);

		if (buttons != (PINB & 0xf0))
    4b46:	23 b1       	in	r18, 0x03	; 3
    4b48:	48 2f       	mov	r20, r24
    4b4a:	50 e0       	ldi	r21, 0x00	; 0
    4b4c:	20 7f       	andi	r18, 0xF0	; 240
    4b4e:	30 e0       	ldi	r19, 0x00	; 0
    4b50:	42 17       	cp	r20, r18
    4b52:	53 07       	cpc	r21, r19
    4b54:	19 f4       	brne	.+6      	; 0x4b5c <poll_buttons+0x3c>
		{
			buttons = 0; // Buttons different
		}
		else // Buttons the same - update global
		{
			button = buttons;
    4b56:	80 93 6a 07 	sts	0x076A, r24
    4b5a:	01 c0       	rjmp	.+2      	; 0x4b5e <poll_buttons+0x3e>
		buttons = (PINB & 0xf0);	
		_delay_ms(10);

		if (buttons != (PINB & 0xf0))
		{
			buttons = 0; // Buttons different
    4b5c:	80 e0       	ldi	r24, 0x00	; 0
		{
			button = buttons;
		}

		// Reset button acceleration
		button_count = 0;
    4b5e:	10 92 1e 05 	sts	0x051E, r1
		button_multiplier = 1;
    4b62:	70 93 6b 07 	sts	0x076B, r23
    4b66:	e3 cf       	rjmp	.-58     	; 0x4b2e <poll_buttons+0xe>
	}

	// Check for buttons being held down if requested
	if ((button != NONE) && (acceleration))
    4b68:	66 23       	and	r22, r22
    4b6a:	71 f0       	breq	.+28     	; 0x4b88 <poll_buttons+0x68>
	{
		// Count the number of times incremented
		button_count++; 
    4b6c:	90 91 1e 05 	lds	r25, 0x051E
    4b70:	9f 5f       	subi	r25, 0xFF	; 255
    4b72:	90 93 1e 05 	sts	0x051E, r25
		if (button_count >= 10)
    4b76:	9a 30       	cpi	r25, 0x0A	; 10
    4b78:	38 f0       	brcs	.+14     	; 0x4b88 <poll_buttons+0x68>
		{
			button_count = 0;
    4b7a:	10 92 1e 05 	sts	0x051E, r1
			button_multiplier ++;
    4b7e:	90 91 6b 07 	lds	r25, 0x076B
    4b82:	9f 5f       	subi	r25, 0xFF	; 255
    4b84:	90 93 6b 07 	sts	0x076B, r25
		}
	}

	return buttons;
}
    4b88:	08 95       	ret

00004b8a <do_menu_item>:
// servo_enable = Enable real-time updating of servo position
// servo_number = Servo number to update
//************************************************************

void do_menu_item(uint8_t menuitem, int8_t *values, uint8_t mult, menu_range_t range, int8_t offset, uint8_t text_link, bool servo_enable, int16_t servo_number)
{
    4b8a:	a8 e1       	ldi	r26, 0x18	; 24
    4b8c:	b0 e0       	ldi	r27, 0x00	; 0
    4b8e:	eb ec       	ldi	r30, 0xCB	; 203
    4b90:	f5 e2       	ldi	r31, 0x25	; 37
    4b92:	0c 94 93 3e 	jmp	0x7d26	; 0x7d26 <__prologue_saves__>
    4b96:	98 2e       	mov	r9, r24
    4b98:	79 8b       	std	Y+17, r23	; 0x11
    4b9a:	68 8b       	std	Y+16, r22	; 0x10
    4b9c:	b4 2e       	mov	r11, r20
    4b9e:	ed 82       	std	Y+5, r14	; 0x05
    4ba0:	fe 82       	std	Y+6, r15	; 0x06
    4ba2:	0f 83       	std	Y+7, r16	; 0x07
    4ba4:	18 87       	std	Y+8, r17	; 0x08
    4ba6:	29 87       	std	Y+9, r18	; 0x09
    4ba8:	4e 2d       	mov	r20, r14
    4baa:	3f 2d       	mov	r19, r15
    4bac:	0d 87       	std	Y+13, r16	; 0x0d
    4bae:	1a 87       	std	Y+10, r17	; 0x0a
	mugui_size16_t size;
	int16_t temp16;
	int16_t value = (int8_t)*values;
    4bb0:	fb 01       	movw	r30, r22
    4bb2:	20 81       	ld	r18, Z
    4bb4:	62 2e       	mov	r6, r18
    4bb6:	77 24       	eor	r7, r7
    4bb8:	67 fc       	sbrc	r6, 7
    4bba:	70 94       	com	r7
	uint8_t button_inc = 0;
	bool	button_lock = false;
	bool	first_time = true;

	// Multiply value for display only if style is 2
	if (range.style == 2)
    4bbc:	12 30       	cpi	r17, 0x02	; 2
    4bbe:	29 f4       	brne	.+10     	; 0x4bca <do_menu_item+0x40>
	{
		value = value * mult;
    4bc0:	5b 2d       	mov	r21, r11
    4bc2:	25 03       	mulsu	r18, r21
    4bc4:	30 01       	movw	r6, r0
    4bc6:	11 24       	eor	r1, r1
    4bc8:	02 c0       	rjmp	.+4      	; 0x4bce <do_menu_item+0x44>
	}
	else mult = 1;
    4bca:	bb 24       	eor	r11, r11
    4bcc:	b3 94       	inc	r11

	button = NONE;
    4bce:	20 ef       	ldi	r18, 0xF0	; 240
    4bd0:	20 93 6a 07 	sts	0x076A, r18
		{
			value = (range.default_value * mult);
		}

		// Limit values to set ranges
		if (value < (range.lower * mult)) 
    4bd4:	8b 2d       	mov	r24, r11
    4bd6:	90 e0       	ldi	r25, 0x00	; 0
    4bd8:	9b 8b       	std	Y+19, r25	; 0x13
    4bda:	8a 8b       	std	Y+18, r24	; 0x12
    4bdc:	2b 2d       	mov	r18, r11
    4bde:	42 03       	mulsu	r20, r18
    4be0:	10 01       	movw	r2, r0
    4be2:	11 24       	eor	r1, r1
		{
			value = range.lower * mult;
		}
		
		if (value > (range.upper * mult)) 
    4be4:	32 03       	mulsu	r19, r18
    4be6:	a0 01       	movw	r20, r0
    4be8:	11 24       	eor	r1, r1
    4bea:	5f 87       	std	Y+15, r21	; 0x0f
    4bec:	4e 87       	std	Y+14, r20	; 0x0e
	uint8_t display_update = 0;
	uint8_t servo_update = 0;
	uint8_t button_update = 0;
	uint8_t button_inc = 0;
	bool	button_lock = false;
	bool	first_time = true;
    4bee:	91 e0       	ldi	r25, 0x01	; 1
	int16_t value = (int8_t)*values;
	uint8_t display_update = 0;
	uint8_t servo_update = 0;
	uint8_t button_update = 0;
	uint8_t button_inc = 0;
	bool	button_lock = false;
    4bf0:	51 2c       	mov	r5, r1
	mugui_size16_t size;
	int16_t temp16;
	int16_t value = (int8_t)*values;
	uint8_t display_update = 0;
	uint8_t servo_update = 0;
	uint8_t button_update = 0;
    4bf2:	d1 2c       	mov	r13, r1
{
	mugui_size16_t size;
	int16_t temp16;
	int16_t value = (int8_t)*values;
	uint8_t display_update = 0;
	uint8_t servo_update = 0;
    4bf4:	41 2c       	mov	r4, r1
void do_menu_item(uint8_t menuitem, int8_t *values, uint8_t mult, menu_range_t range, int8_t offset, uint8_t text_link, bool servo_enable, int16_t servo_number)
{
	mugui_size16_t size;
	int16_t temp16;
	int16_t value = (int8_t)*values;
	uint8_t display_update = 0;
    4bf6:	f1 2c       	mov	r15, r1
			first_time = false;

			clear_buffer(buffer);

			// Print title
			gLCDprint_Menu_P((char*)pgm_read_word(&text_menu[menuitem]), (const unsigned char*)Verdana14, 0, 0);
    4bf8:	09 2d       	mov	r16, r9
    4bfa:	10 e0       	ldi	r17, 0x00	; 0
    4bfc:	00 0f       	add	r16, r16
    4bfe:	11 1f       	adc	r17, r17
    4c00:	04 5f       	subi	r16, 0xF4	; 244
    4c02:	11 4f       	sbci	r17, 0xF1	; 241

			// Print value
			if ((range.style == 0) || (range.style == 2)) // numeric and numeric * 4
    4c04:	8a 85       	ldd	r24, Y+10	; 0x0a
    4c06:	8d 7f       	andi	r24, 0xFD	; 253
    4c08:	8c 8b       	std	Y+20, r24	; 0x14
				mugui_lcd_puts(itoa(value,pBuffer,10),(const unsigned char*)Verdana14,((128-size.x)/2)+offset,25);
			}
			else // text
			{
				// Write text, centered on screen
				pgm_mugui_scopy((char*)pgm_read_word(&text_menu[text_link + value])); // Copy string to pBuffer
    4c0a:	ea 2d       	mov	r30, r10
    4c0c:	f0 e0       	ldi	r31, 0x00	; 0
    4c0e:	fe 8b       	std	Y+22, r31	; 0x16
    4c10:	ed 8b       	std	Y+21, r30	; 0x15
			// Print value
			if ((range.style == 0) || (range.style == 2)) // numeric and numeric * 4
			{
				// Write numeric value, centered on screen
				mugui_text_sizestring(itoa(value,pBuffer,10), (const unsigned char*)Verdana14, &size);
				mugui_lcd_puts(itoa(value,pBuffer,10),(const unsigned char*)Verdana14,((128-size.x)/2)+offset,25);
    4c12:	2c 2d       	mov	r18, r12
    4c14:	33 27       	eor	r19, r19
    4c16:	27 fd       	sbrc	r18, 7
    4c18:	30 95       	com	r19
    4c1a:	38 8f       	std	Y+24, r19	; 0x18
    4c1c:	2f 8b       	std	Y+23, r18	; 0x17
		}

		// Set servo position if required and update every 4 * 5ms = 20ms
		// Ignore if the output is marked as a motor
		if (((servo_enable) && (servo_update >= 4)) &&
			((Config.Channel[servo_number].P1_sensors & (1 << MotorMarker)) == 0))
    4c1e:	8d e1       	ldi	r24, 0x1D	; 29
    4c20:	ed a5       	ldd	r30, Y+45	; 0x2d
    4c22:	fe a5       	ldd	r31, Y+46	; 0x2e
    4c24:	8e 9f       	mul	r24, r30
    4c26:	a0 01       	movw	r20, r0
    4c28:	8f 9f       	mul	r24, r31
    4c2a:	50 0d       	add	r21, r0
    4c2c:	11 24       	eor	r1, r1
    4c2e:	40 5e       	subi	r20, 0xE0	; 224
    4c30:	59 4f       	sbci	r21, 0xF9	; 249
    4c32:	5c 87       	std	Y+12, r21	; 0x0c
    4c34:	4b 87       	std	Y+11, r20	; 0x0b
	button = NONE;

	// This is a loop that cycles until Button 4 is pressed (Save)
	// The GLCD updating slows servo updates down too much so only update the GLCD periodically
	// When not updating the GLCD the servo should be updated at 50Hz (20ms)
	while (button != ENTER)
    4c36:	80 91 6a 07 	lds	r24, 0x076A
    4c3a:	80 3e       	cpi	r24, 0xE0	; 224
    4c3c:	09 f4       	brne	.+2      	; 0x4c40 <do_menu_item+0xb6>
    4c3e:	e5 c0       	rjmp	.+458    	; 0x4e0a <do_menu_item+0x280>
	{
		// Increment loopcount so that we can time various things
		display_update++;
		servo_update++;
    4c40:	43 94       	inc	r4

		// Vary the button increment delay depending on the function
		if (servo_enable)
    4c42:	88 20       	and	r8, r8
    4c44:	11 f0       	breq	.+4      	; 0x4c4a <do_menu_item+0xc0>
		{
			button_inc = 20; // For servos
    4c46:	24 e1       	ldi	r18, 0x14	; 20
    4c48:	01 c0       	rjmp	.+2      	; 0x4c4c <do_menu_item+0xc2>

		}
		else
		{
			button_inc = 1;	// For everything else
    4c4a:	21 e0       	ldi	r18, 0x01	; 1
		}

		// Increment button timer when pressed
		if (button != NONE)
    4c4c:	80 3f       	cpi	r24, 0xF0	; 240
    4c4e:	19 f0       	breq	.+6      	; 0x4c56 <do_menu_item+0xcc>
		{
			button_update++;
    4c50:	d3 94       	inc	r13

			// Release button lock after button_inc loops
			if (button_update > button_inc)
    4c52:	2d 15       	cp	r18, r13
    4c54:	10 f4       	brcc	.+4      	; 0x4c5a <do_menu_item+0xd0>
		}
		// Remove lock when not pressed
		else 
		{
			button_update = 0;
			button_lock = false;
    4c56:	51 2c       	mov	r5, r1
			} 
		}
		// Remove lock when not pressed
		else 
		{
			button_update = 0;
    4c58:	d1 2c       	mov	r13, r1
			button_lock = false;
		}

		// Display update
		if 	(!servo_enable || 									// Non-servo value or
    4c5a:	88 20       	and	r8, r8
    4c5c:	49 f0       	breq	.+18     	; 0x4c70 <do_menu_item+0xe6>
	// The GLCD updating slows servo updates down too much so only update the GLCD periodically
	// When not updating the GLCD the servo should be updated at 50Hz (20ms)
	while (button != ENTER)
	{
		// Increment loopcount so that we can time various things
		display_update++;
    4c5e:	f3 94       	inc	r15
			button_update = 0;
			button_lock = false;
		}

		// Display update
		if 	(!servo_enable || 									// Non-servo value or
    4c60:	ff e1       	ldi	r31, 0x1F	; 31
    4c62:	ff 15       	cp	r31, r15
    4c64:	10 f4       	brcc	.+4      	; 0x4c6a <do_menu_item+0xe0>
			((display_update >= 32) && (button != NONE)) || 	// Servo value and 32 cycles passed but only with a button pressed or...
    4c66:	80 3f       	cpi	r24, 0xF0	; 240
    4c68:	19 f4       	brne	.+6      	; 0x4c70 <do_menu_item+0xe6>
    4c6a:	99 23       	and	r25, r25
    4c6c:	09 f4       	brne	.+2      	; 0x4c70 <do_menu_item+0xe6>
    4c6e:	6a c0       	rjmp	.+212    	; 0x4d44 <do_menu_item+0x1ba>
			 (first_time))										// First time into routine
		{
			display_update = 0;
			first_time = false;

			clear_buffer(buffer);
    4c70:	80 e0       	ldi	r24, 0x00	; 0
    4c72:	91 e0       	ldi	r25, 0x01	; 1
    4c74:	0e 94 db 1a 	call	0x35b6	; 0x35b6 <clear_buffer>

			// Print title
			gLCDprint_Menu_P((char*)pgm_read_word(&text_menu[menuitem]), (const unsigned char*)Verdana14, 0, 0);
    4c78:	f8 01       	movw	r30, r16
    4c7a:	85 91       	lpm	r24, Z+
    4c7c:	94 91       	lpm	r25, Z
    4c7e:	20 e0       	ldi	r18, 0x00	; 0
    4c80:	30 e0       	ldi	r19, 0x00	; 0
    4c82:	40 e0       	ldi	r20, 0x00	; 0
    4c84:	50 e0       	ldi	r21, 0x00	; 0
    4c86:	67 e7       	ldi	r22, 0x77	; 119
    4c88:	71 e0       	ldi	r23, 0x01	; 1
    4c8a:	0e 94 8f 1c 	call	0x391e	; 0x391e <gLCDprint_Menu_P>

			// Print value
			if ((range.style == 0) || (range.style == 2)) // numeric and numeric * 4
    4c8e:	2c 89       	ldd	r18, Y+20	; 0x14
    4c90:	21 11       	cpse	r18, r1
    4c92:	28 c0       	rjmp	.+80     	; 0x4ce4 <do_menu_item+0x15a>
    4c94:	4a e0       	ldi	r20, 0x0A	; 10
    4c96:	6c e4       	ldi	r22, 0x4C	; 76
    4c98:	75 e0       	ldi	r23, 0x05	; 5
    4c9a:	c3 01       	movw	r24, r6
    4c9c:	0e 94 d3 3e 	call	0x7da6	; 0x7da6 <__itoa_ncheck>
			{
				// Write numeric value, centered on screen
				mugui_text_sizestring(itoa(value,pBuffer,10), (const unsigned char*)Verdana14, &size);
    4ca0:	ae 01       	movw	r20, r28
    4ca2:	4f 5f       	subi	r20, 0xFF	; 255
    4ca4:	5f 4f       	sbci	r21, 0xFF	; 255
    4ca6:	67 e7       	ldi	r22, 0x77	; 119
    4ca8:	71 e0       	ldi	r23, 0x01	; 1
    4caa:	0e 94 74 33 	call	0x66e8	; 0x66e8 <mugui_text_sizestring>
				mugui_lcd_puts(itoa(value,pBuffer,10),(const unsigned char*)Verdana14,((128-size.x)/2)+offset,25);
    4cae:	89 81       	ldd	r24, Y+1	; 0x01
    4cb0:	9a 81       	ldd	r25, Y+2	; 0x02
    4cb2:	70 e8       	ldi	r23, 0x80	; 128
    4cb4:	e7 2e       	mov	r14, r23
    4cb6:	f1 2c       	mov	r15, r1
    4cb8:	e8 1a       	sub	r14, r24
    4cba:	f9 0a       	sbc	r15, r25
    4cbc:	f6 94       	lsr	r15
    4cbe:	e7 94       	ror	r14
    4cc0:	4f 89       	ldd	r20, Y+23	; 0x17
    4cc2:	58 8d       	ldd	r21, Y+24	; 0x18
    4cc4:	e4 0e       	add	r14, r20
    4cc6:	f5 1e       	adc	r15, r21
    4cc8:	4a e0       	ldi	r20, 0x0A	; 10
    4cca:	6c e4       	ldi	r22, 0x4C	; 76
    4ccc:	75 e0       	ldi	r23, 0x05	; 5
    4cce:	c3 01       	movw	r24, r6
    4cd0:	0e 94 d3 3e 	call	0x7da6	; 0x7da6 <__itoa_ncheck>
    4cd4:	29 e1       	ldi	r18, 0x19	; 25
    4cd6:	30 e0       	ldi	r19, 0x00	; 0
    4cd8:	a7 01       	movw	r20, r14
    4cda:	67 e7       	ldi	r22, 0x77	; 119
    4cdc:	71 e0       	ldi	r23, 0x01	; 1
    4cde:	0e 94 89 34 	call	0x6912	; 0x6912 <mugui_lcd_puts>
    4ce2:	25 c0       	rjmp	.+74     	; 0x4d2e <do_menu_item+0x1a4>
			}
			else // text
			{
				// Write text, centered on screen
				pgm_mugui_scopy((char*)pgm_read_word(&text_menu[text_link + value])); // Copy string to pBuffer
    4ce4:	ed 89       	ldd	r30, Y+21	; 0x15
    4ce6:	fe 89       	ldd	r31, Y+22	; 0x16
    4ce8:	e6 0d       	add	r30, r6
    4cea:	f7 1d       	adc	r31, r7
    4cec:	ee 0f       	add	r30, r30
    4cee:	ff 1f       	adc	r31, r31
    4cf0:	e4 5f       	subi	r30, 0xF4	; 244
    4cf2:	f1 4f       	sbci	r31, 0xF1	; 241
    4cf4:	85 91       	lpm	r24, Z+
    4cf6:	94 91       	lpm	r25, Z
    4cf8:	0e 94 be 33 	call	0x677c	; 0x677c <pgm_mugui_scopy>

				mugui_text_sizestring((char*)pBuffer, (const unsigned char*)Verdana14, &size);
    4cfc:	ae 01       	movw	r20, r28
    4cfe:	4f 5f       	subi	r20, 0xFF	; 255
    4d00:	5f 4f       	sbci	r21, 0xFF	; 255
    4d02:	67 e7       	ldi	r22, 0x77	; 119
    4d04:	71 e0       	ldi	r23, 0x01	; 1
    4d06:	8c e4       	ldi	r24, 0x4C	; 76
    4d08:	95 e0       	ldi	r25, 0x05	; 5
    4d0a:	0e 94 74 33 	call	0x66e8	; 0x66e8 <mugui_text_sizestring>
				LCD_Display_Text(text_link + value, (const unsigned char*)Verdana14,((128-size.x)/2),25);
    4d0e:	89 81       	ldd	r24, Y+1	; 0x01
    4d10:	9a 81       	ldd	r25, Y+2	; 0x02
    4d12:	40 e8       	ldi	r20, 0x80	; 128
    4d14:	50 e0       	ldi	r21, 0x00	; 0
    4d16:	48 1b       	sub	r20, r24
    4d18:	59 0b       	sbc	r21, r25
    4d1a:	56 95       	lsr	r21
    4d1c:	47 95       	ror	r20
    4d1e:	29 e1       	ldi	r18, 0x19	; 25
    4d20:	30 e0       	ldi	r19, 0x00	; 0
    4d22:	67 e7       	ldi	r22, 0x77	; 119
    4d24:	71 e0       	ldi	r23, 0x01	; 1
    4d26:	8a 2d       	mov	r24, r10
    4d28:	86 0d       	add	r24, r6
    4d2a:	0e 94 84 1c 	call	0x3908	; 0x3908 <LCD_Display_Text>
			}

			// Print bottom markers
			print_menu_frame(1);
    4d2e:	81 e0       	ldi	r24, 0x01	; 1
    4d30:	0e 94 f1 24 	call	0x49e2	; 0x49e2 <print_menu_frame>

			// Write from buffer
			write_buffer(buffer,1);
    4d34:	61 e0       	ldi	r22, 0x01	; 1
    4d36:	80 e0       	ldi	r24, 0x00	; 0
    4d38:	91 e0       	ldi	r25, 0x01	; 1
    4d3a:	0e 94 a1 1a 	call	0x3542	; 0x3542 <write_buffer>
		}

		// Poll buttons when idle
		// Don't use button acceleration when moving servos
		// And don't block the code with poll_buttons()
		if (servo_enable)
    4d3e:	88 20       	and	r8, r8
    4d40:	49 f0       	breq	.+18     	; 0x4d54 <do_menu_item+0x1ca>
		// Display update
		if 	(!servo_enable || 									// Non-servo value or
			((display_update >= 32) && (button != NONE)) || 	// Servo value and 32 cycles passed but only with a button pressed or...
			 (first_time))										// First time into routine
		{
			display_update = 0;
    4d42:	f1 2c       	mov	r15, r1
		// Poll buttons when idle
		// Don't use button acceleration when moving servos
		// And don't block the code with poll_buttons()
		if (servo_enable)
		{
			button = (PINB & 0xf0);	
    4d44:	83 b1       	in	r24, 0x03	; 3
    4d46:	80 7f       	andi	r24, 0xF0	; 240
    4d48:	80 93 6a 07 	sts	0x076A, r24
			button_multiplier = 1;
    4d4c:	81 e0       	ldi	r24, 0x01	; 1
    4d4e:	80 93 6b 07 	sts	0x076B, r24
    4d52:	04 c0       	rjmp	.+8      	; 0x4d5c <do_menu_item+0x1d2>
		}
		else
		{
			poll_buttons(true);
    4d54:	81 e0       	ldi	r24, 0x01	; 1
    4d56:	0e 94 90 25 	call	0x4b20	; 0x4b20 <poll_buttons>
		// Display update
		if 	(!servo_enable || 									// Non-servo value or
			((display_update >= 32) && (button != NONE)) || 	// Servo value and 32 cycles passed but only with a button pressed or...
			 (first_time))										// First time into routine
		{
			display_update = 0;
    4d5a:	f1 2c       	mov	r15, r1
		{
			poll_buttons(true);
		}

		// Handle cursor Up/Down limits
		if (button == DOWN)
    4d5c:	80 91 6a 07 	lds	r24, 0x076A
    4d60:	80 3d       	cpi	r24, 0xD0	; 208
    4d62:	51 f4       	brne	.+20     	; 0x4d78 <do_menu_item+0x1ee>
		{
			if (button_lock == false)
    4d64:	51 10       	cpse	r5, r1
    4d66:	61 c0       	rjmp	.+194    	; 0x4e2a <do_menu_item+0x2a0>
			{
				button_lock = true;
				value = value - (range.increment * button_multiplier);
    4d68:	80 91 6b 07 	lds	r24, 0x076B
    4d6c:	5d 85       	ldd	r21, Y+13	; 0x0d
    4d6e:	58 9f       	mul	r21, r24
    4d70:	60 18       	sub	r6, r0
    4d72:	71 08       	sbc	r7, r1
    4d74:	11 24       	eor	r1, r1
    4d76:	0b c0       	rjmp	.+22     	; 0x4d8e <do_menu_item+0x204>
				button_update = 0;
			}
		}

		if (button == UP)
    4d78:	80 3b       	cpi	r24, 0xB0	; 176
    4d7a:	59 f4       	brne	.+22     	; 0x4d92 <do_menu_item+0x208>
		{
			if (button_lock == false)
    4d7c:	51 10       	cpse	r5, r1
    4d7e:	55 c0       	rjmp	.+170    	; 0x4e2a <do_menu_item+0x2a0>
			{
				button_lock = true;
				value = value + (range.increment * button_multiplier);
    4d80:	80 91 6b 07 	lds	r24, 0x076B
    4d84:	9d 85       	ldd	r25, Y+13	; 0x0d
    4d86:	98 9f       	mul	r25, r24
    4d88:	60 0c       	add	r6, r0
    4d8a:	71 1c       	adc	r7, r1
    4d8c:	11 24       	eor	r1, r1
				button_update = 0;
    4d8e:	d1 2c       	mov	r13, r1
    4d90:	4c c0       	rjmp	.+152    	; 0x4e2a <do_menu_item+0x2a0>
			}
		}

		if (button == BACK)	
    4d92:	80 37       	cpi	r24, 0x70	; 112
    4d94:	29 f4       	brne	.+10     	; 0x4da0 <do_menu_item+0x216>
		{
			value = (range.default_value * mult);
    4d96:	29 85       	ldd	r18, Y+9	; 0x09
    4d98:	3b 2d       	mov	r19, r11
    4d9a:	23 03       	mulsu	r18, r19
    4d9c:	30 01       	movw	r6, r0
    4d9e:	11 24       	eor	r1, r1
    4da0:	62 14       	cp	r6, r2
    4da2:	73 04       	cpc	r7, r3
    4da4:	0c f4       	brge	.+2      	; 0x4da8 <do_menu_item+0x21e>
    4da6:	31 01       	movw	r6, r2
    4da8:	4e 85       	ldd	r20, Y+14	; 0x0e
    4daa:	5f 85       	ldd	r21, Y+15	; 0x0f
    4dac:	46 15       	cp	r20, r6
    4dae:	57 05       	cpc	r21, r7
    4db0:	0c f4       	brge	.+2      	; 0x4db4 <do_menu_item+0x22a>
    4db2:	3a 01       	movw	r6, r20
		{
			value = range.upper * mult;
		}

		// Update contrast setting
		if (menuitem == CONTRAST)
    4db4:	50 ea       	ldi	r21, 0xA0	; 160
    4db6:	95 12       	cpse	r9, r21
    4db8:	03 c0       	rjmp	.+6      	; 0x4dc0 <do_menu_item+0x236>
		{
			st7565_set_brightness(value);
    4dba:	86 2d       	mov	r24, r6
    4dbc:	0e 94 96 1a 	call	0x352c	; 0x352c <st7565_set_brightness>
		}

		// Set servo position if required and update every 4 * 5ms = 20ms
		// Ignore if the output is marked as a motor
		if (((servo_enable) && (servo_update >= 4)) &&
    4dc0:	88 20       	and	r8, r8
    4dc2:	d9 f0       	breq	.+54     	; 0x4dfa <do_menu_item+0x270>
    4dc4:	83 e0       	ldi	r24, 0x03	; 3
    4dc6:	84 15       	cp	r24, r4
    4dc8:	c0 f4       	brcc	.+48     	; 0x4dfa <do_menu_item+0x270>
			((Config.Channel[servo_number].P1_sensors & (1 << MotorMarker)) == 0))
    4dca:	eb 85       	ldd	r30, Y+11	; 0x0b
    4dcc:	fc 85       	ldd	r31, Y+12	; 0x0c
    4dce:	80 81       	ld	r24, Z
			st7565_set_brightness(value);
		}

		// Set servo position if required and update every 4 * 5ms = 20ms
		// Ignore if the output is marked as a motor
		if (((servo_enable) && (servo_update >= 4)) &&
    4dd0:	86 fd       	sbrc	r24, 6
    4dd2:	13 c0       	rjmp	.+38     	; 0x4dfa <do_menu_item+0x270>
			((Config.Channel[servo_number].P1_sensors & (1 << MotorMarker)) == 0))
		{
			servo_update = 0;

			temp16 = scale_percent(value);	// Convert to servo position (from %)
    4dd4:	86 2d       	mov	r24, r6
    4dd6:	0e 94 6d 33 	call	0x66da	; 0x66da <scale_percent>
			temp16 = (((temp16 << 2) + (int16_t)5) / (int16_t)10); 	// Span back to what the output wants
    4dda:	88 0f       	add	r24, r24
    4ddc:	99 1f       	adc	r25, r25
    4dde:	88 0f       	add	r24, r24
    4de0:	99 1f       	adc	r25, r25
    4de2:	05 96       	adiw	r24, 0x05	; 5

			cli();
    4de4:	f8 94       	cli
			((Config.Channel[servo_number].P1_sensors & (1 << MotorMarker)) == 0))
		{
			servo_update = 0;

			temp16 = scale_percent(value);	// Convert to servo position (from %)
			temp16 = (((temp16 << 2) + (int16_t)5) / (int16_t)10); 	// Span back to what the output wants
    4de6:	6a e0       	ldi	r22, 0x0A	; 10
    4de8:	70 e0       	ldi	r23, 0x00	; 0
    4dea:	0e 94 07 3e 	call	0x7c0e	; 0x7c0e <__divmodhi4>

			cli();
			output_servo_ppm_asm3(servo_number, temp16);
    4dee:	8d a5       	ldd	r24, Y+45	; 0x2d
    4df0:	9e a5       	ldd	r25, Y+46	; 0x2e
    4df2:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <output_servo_ppm_asm3>
			sei();
    4df6:	78 94       	sei
		// Set servo position if required and update every 4 * 5ms = 20ms
		// Ignore if the output is marked as a motor
		if (((servo_enable) && (servo_update >= 4)) &&
			((Config.Channel[servo_number].P1_sensors & (1 << MotorMarker)) == 0))
		{
			servo_update = 0;
    4df8:	41 2c       	mov	r4, r1
    4dfa:	87 ea       	ldi	r24, 0xA7	; 167
    4dfc:	91 e6       	ldi	r25, 0x61	; 97
    4dfe:	01 97       	sbiw	r24, 0x01	; 1
    4e00:	f1 f7       	brne	.-4      	; 0x4dfe <do_menu_item+0x274>
    4e02:	00 c0       	rjmp	.+0      	; 0x4e04 <do_menu_item+0x27a>
    4e04:	00 00       	nop
    4e06:	90 e0       	ldi	r25, 0x00	; 0
    4e08:	16 cf       	rjmp	.-468    	; 0x4c36 <do_menu_item+0xac>

	// Exit
	button = ENTER;

	// Divide value from that displayed if style = 2
	if (range.style == 2)
    4e0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e0c:	92 30       	cpi	r25, 0x02	; 2
    4e0e:	31 f4       	brne	.+12     	; 0x4e1c <do_menu_item+0x292>
	{
		value = value / mult;
    4e10:	c3 01       	movw	r24, r6
    4e12:	6a 89       	ldd	r22, Y+18	; 0x12
    4e14:	7b 89       	ldd	r23, Y+19	; 0x13
    4e16:	0e 94 07 3e 	call	0x7c0e	; 0x7c0e <__divmodhi4>
    4e1a:	3b 01       	movw	r6, r22
	}

	*values = (int8_t)value;
    4e1c:	e8 89       	ldd	r30, Y+16	; 0x10
    4e1e:	f9 89       	ldd	r31, Y+17	; 0x11
    4e20:	60 82       	st	Z, r6
}
    4e22:	68 96       	adiw	r28, 0x18	; 24
    4e24:	e2 e1       	ldi	r30, 0x12	; 18
    4e26:	0c 94 af 3e 	jmp	0x7d5e	; 0x7d5e <__epilogue_restores__>
		// Display update
		if 	(!servo_enable || 									// Non-servo value or
			((display_update >= 32) && (button != NONE)) || 	// Servo value and 32 cycles passed but only with a button pressed or...
			 (first_time))										// First time into routine
		{
			display_update = 0;
    4e2a:	55 24       	eor	r5, r5
    4e2c:	53 94       	inc	r5
    4e2e:	b8 cf       	rjmp	.-144    	; 0x4da0 <do_menu_item+0x216>

00004e30 <menu_beep>:

void menu_beep(uint8_t beeps)
{
	uint8_t i;

	for (i=0; i < beeps; i++)
    4e30:	90 e0       	ldi	r25, 0x00	; 0
    4e32:	98 17       	cp	r25, r24
    4e34:	b1 f0       	breq	.+44     	; 0x4e62 <menu_beep+0x32>
	{ 
		LVA = 1;
    4e36:	29 9a       	sbi	0x05, 1	; 5
    4e38:	2f e9       	ldi	r18, 0x9F	; 159
    4e3a:	36 e8       	ldi	r19, 0x86	; 134
    4e3c:	41 e0       	ldi	r20, 0x01	; 1
    4e3e:	21 50       	subi	r18, 0x01	; 1
    4e40:	30 40       	sbci	r19, 0x00	; 0
    4e42:	40 40       	sbci	r20, 0x00	; 0
    4e44:	e1 f7       	brne	.-8      	; 0x4e3e <menu_beep+0xe>
    4e46:	00 c0       	rjmp	.+0      	; 0x4e48 <menu_beep+0x18>
    4e48:	00 00       	nop
		_delay_ms(25);
		LVA = 0;
    4e4a:	29 98       	cbi	0x05, 1	; 5
    4e4c:	2f e9       	ldi	r18, 0x9F	; 159
    4e4e:	36 e8       	ldi	r19, 0x86	; 134
    4e50:	41 e0       	ldi	r20, 0x01	; 1
    4e52:	21 50       	subi	r18, 0x01	; 1
    4e54:	30 40       	sbci	r19, 0x00	; 0
    4e56:	40 40       	sbci	r20, 0x00	; 0
    4e58:	e1 f7       	brne	.-8      	; 0x4e52 <menu_beep+0x22>
    4e5a:	00 c0       	rjmp	.+0      	; 0x4e5c <menu_beep+0x2c>
    4e5c:	00 00       	nop

void menu_beep(uint8_t beeps)
{
	uint8_t i;

	for (i=0; i < beeps; i++)
    4e5e:	9f 5f       	subi	r25, 0xFF	; 255
    4e60:	e8 cf       	rjmp	.-48     	; 0x4e32 <menu_beep+0x2>
		LVA = 1;
		_delay_ms(25);
		LVA = 0;
		_delay_ms(25);
	}
}
    4e62:	08 95       	ret

00004e64 <update_menu>:
// top*		= Item number currently on top line
// temp*	= Currently selected item number
//************************************************************

void update_menu(uint8_t items, uint8_t start, uint8_t offset, uint8_t button, uint8_t* cursor, uint8_t* top, uint8_t* temp)
{
    4e64:	a3 e0       	ldi	r26, 0x03	; 3
    4e66:	b0 e0       	ldi	r27, 0x00	; 0
    4e68:	e8 e3       	ldi	r30, 0x38	; 56
    4e6a:	f7 e2       	ldi	r31, 0x27	; 39
    4e6c:	0c 94 9d 3e 	jmp	0x7d3a	; 0x7d3a <__prologue_saves__+0x14>
    4e70:	58 2f       	mov	r21, r24
    4e72:	f6 01       	movw	r30, r12
	// Temporarily add in offset :(
	*top = *top + offset;
    4e74:	d7 01       	movw	r26, r14
    4e76:	9c 91       	ld	r25, X
    4e78:	94 0f       	add	r25, r20
    4e7a:	9c 93       	st	X, r25
	start = start + offset;
    4e7c:	64 0f       	add	r22, r20

	// Calculate which function has been requested
	if (button == ENTER)
    4e7e:	20 3e       	cpi	r18, 0xE0	; 224
    4e80:	a1 f4       	brne	.+40     	; 0x4eaa <update_menu+0x46>
	{
		switch(*cursor) 
    4e82:	d8 01       	movw	r26, r16
    4e84:	8c 91       	ld	r24, X
    4e86:	8f 30       	cpi	r24, 0x0F	; 15
    4e88:	59 f0       	breq	.+22     	; 0x4ea0 <update_menu+0x3c>
    4e8a:	18 f4       	brcc	.+6      	; 0x4e92 <update_menu+0x2e>
    4e8c:	83 30       	cpi	r24, 0x03	; 3
    4e8e:	49 f0       	breq	.+18     	; 0x4ea2 <update_menu+0x3e>
    4e90:	4b c0       	rjmp	.+150    	; 0x4f28 <update_menu+0xc4>
    4e92:	8b 31       	cpi	r24, 0x1B	; 27
    4e94:	41 f0       	breq	.+16     	; 0x4ea6 <update_menu+0x42>
    4e96:	87 32       	cpi	r24, 0x27	; 39
    4e98:	09 f0       	breq	.+2      	; 0x4e9c <update_menu+0x38>
    4e9a:	46 c0       	rjmp	.+140    	; 0x4f28 <update_menu+0xc4>
				break;	
			case LINE2:
				*temp = *top + 2;
				break;
			case LINE3:
				*temp = *top + 3;
    4e9c:	9d 5f       	subi	r25, 0xFD	; 253
    4e9e:	01 c0       	rjmp	.+2      	; 0x4ea2 <update_menu+0x3e>
		{
			case LINE0:
				*temp = *top;
				break;
			case LINE1:
				*temp = *top + 1;
    4ea0:	9f 5f       	subi	r25, 0xFF	; 255
    4ea2:	90 83       	st	Z, r25
				break;	
    4ea4:	41 c0       	rjmp	.+130    	; 0x4f28 <update_menu+0xc4>
			case LINE2:
				*temp = *top + 2;
    4ea6:	9e 5f       	subi	r25, 0xFE	; 254
    4ea8:	fc cf       	rjmp	.-8      	; 0x4ea2 <update_menu+0x3e>
				break;
		}
	}

	// Handle cursor Up/Down limits
	if (button == DOWN)	
    4eaa:	20 3d       	cpi	r18, 0xD0	; 208
    4eac:	f9 f4       	brne	.+62     	; 0x4eec <update_menu+0x88>
	{
		switch(*cursor) 
    4eae:	f8 01       	movw	r30, r16
    4eb0:	80 81       	ld	r24, Z
    4eb2:	8f 30       	cpi	r24, 0x0F	; 15
    4eb4:	69 f0       	breq	.+26     	; 0x4ed0 <update_menu+0x6c>
    4eb6:	18 f4       	brcc	.+6      	; 0x4ebe <update_menu+0x5a>
    4eb8:	83 30       	cpi	r24, 0x03	; 3
    4eba:	31 f0       	breq	.+12     	; 0x4ec8 <update_menu+0x64>
    4ebc:	15 c0       	rjmp	.+42     	; 0x4ee8 <update_menu+0x84>
    4ebe:	8b 31       	cpi	r24, 0x1B	; 27
    4ec0:	59 f0       	breq	.+22     	; 0x4ed8 <update_menu+0x74>
    4ec2:	87 32       	cpi	r24, 0x27	; 39
    4ec4:	69 f0       	breq	.+26     	; 0x4ee0 <update_menu+0x7c>
    4ec6:	10 c0       	rjmp	.+32     	; 0x4ee8 <update_menu+0x84>
		{
			case LINE0:
				if (items > 1) *cursor = LINE1;
    4ec8:	52 30       	cpi	r21, 0x02	; 2
    4eca:	70 f1       	brcs	.+92     	; 0x4f28 <update_menu+0xc4>
    4ecc:	8f e0       	ldi	r24, 0x0F	; 15
    4ece:	27 c0       	rjmp	.+78     	; 0x4f1e <update_menu+0xba>
				break;	
			case LINE1:
				if (items > 2) *cursor = LINE2;
    4ed0:	53 30       	cpi	r21, 0x03	; 3
    4ed2:	50 f1       	brcs	.+84     	; 0x4f28 <update_menu+0xc4>
    4ed4:	8b e1       	ldi	r24, 0x1B	; 27
    4ed6:	1f c0       	rjmp	.+62     	; 0x4f16 <update_menu+0xb2>
				break;	
			case LINE2:
				if (items > 3) *cursor = LINE3;
    4ed8:	54 30       	cpi	r21, 0x04	; 4
    4eda:	30 f1       	brcs	.+76     	; 0x4f28 <update_menu+0xc4>
    4edc:	87 e2       	ldi	r24, 0x27	; 39
    4ede:	1f c0       	rjmp	.+62     	; 0x4f1e <update_menu+0xba>
				break;
			case LINE3:
				if (items > 4) *cursor = NEXTLINE;
    4ee0:	55 30       	cpi	r21, 0x05	; 5
    4ee2:	10 f1       	brcs	.+68     	; 0x4f28 <update_menu+0xc4>
    4ee4:	88 e2       	ldi	r24, 0x28	; 40
    4ee6:	17 c0       	rjmp	.+46     	; 0x4f16 <update_menu+0xb2>
				break;
			default:
				*cursor = NEXTLINE;
    4ee8:	88 e2       	ldi	r24, 0x28	; 40
    4eea:	19 c0       	rjmp	.+50     	; 0x4f1e <update_menu+0xba>
				break;
		}
	}

	if (button == UP)	
    4eec:	20 3b       	cpi	r18, 0xB0	; 176
    4eee:	d1 f4       	brne	.+52     	; 0x4f24 <update_menu+0xc0>
	{
		switch(*cursor) 
    4ef0:	f8 01       	movw	r30, r16
    4ef2:	80 81       	ld	r24, Z
    4ef4:	8f 30       	cpi	r24, 0x0F	; 15
    4ef6:	69 f0       	breq	.+26     	; 0x4f12 <update_menu+0xae>
    4ef8:	20 f4       	brcc	.+8      	; 0x4f02 <update_menu+0x9e>
    4efa:	83 30       	cpi	r24, 0x03	; 3
    4efc:	79 f4       	brne	.+30     	; 0x4f1c <update_menu+0xb8>
				break;
			case LINE1:
				*cursor = LINE0;
				break;
			case LINE0:
				*cursor = PREVLINE;
    4efe:	82 e0       	ldi	r24, 0x02	; 2
    4f00:	0a c0       	rjmp	.+20     	; 0x4f16 <update_menu+0xb2>
		}
	}

	if (button == UP)	
	{
		switch(*cursor) 
    4f02:	8b 31       	cpi	r24, 0x1B	; 27
    4f04:	21 f0       	breq	.+8      	; 0x4f0e <update_menu+0xaa>
    4f06:	87 32       	cpi	r24, 0x27	; 39
    4f08:	49 f4       	brne	.+18     	; 0x4f1c <update_menu+0xb8>
		{
			case LINE3:
				*cursor = LINE2;
    4f0a:	8b e1       	ldi	r24, 0x1B	; 27
    4f0c:	08 c0       	rjmp	.+16     	; 0x4f1e <update_menu+0xba>
				break;	
			case LINE2:
				*cursor = LINE1;
    4f0e:	8f e0       	ldi	r24, 0x0F	; 15
    4f10:	02 c0       	rjmp	.+4      	; 0x4f16 <update_menu+0xb2>
				break;
			case LINE1:
				*cursor = LINE0;
    4f12:	83 e0       	ldi	r24, 0x03	; 3
    4f14:	04 c0       	rjmp	.+8      	; 0x4f1e <update_menu+0xba>
				break;
			case LINE0:
				*cursor = PREVLINE;
    4f16:	f8 01       	movw	r30, r16
    4f18:	80 83       	st	Z, r24
				break;
    4f1a:	06 c0       	rjmp	.+12     	; 0x4f28 <update_menu+0xc4>
			default:
				*cursor = PREVLINE;
    4f1c:	82 e0       	ldi	r24, 0x02	; 2
    4f1e:	d8 01       	movw	r26, r16
    4f20:	8c 93       	st	X, r24
				break;
    4f22:	02 c0       	rjmp	.+4      	; 0x4f28 <update_menu+0xc4>
		}
	}

	if (button != NONE)	
    4f24:	20 3f       	cpi	r18, 0xF0	; 240
    4f26:	91 f0       	breq	.+36     	; 0x4f4c <update_menu+0xe8>
	{
		menu_beep(1);
    4f28:	81 e0       	ldi	r24, 0x01	; 1
    4f2a:	4b 83       	std	Y+3, r20	; 0x03
    4f2c:	5a 83       	std	Y+2, r21	; 0x02
    4f2e:	69 83       	std	Y+1, r22	; 0x01
    4f30:	0e 94 18 27 	call	0x4e30	; 0x4e30 <menu_beep>
    4f34:	bf ef       	ldi	r27, 0xFF	; 255
    4f36:	e4 e3       	ldi	r30, 0x34	; 52
    4f38:	fc e0       	ldi	r31, 0x0C	; 12
    4f3a:	b1 50       	subi	r27, 0x01	; 1
    4f3c:	e0 40       	sbci	r30, 0x00	; 0
    4f3e:	f0 40       	sbci	r31, 0x00	; 0
    4f40:	e1 f7       	brne	.-8      	; 0x4f3a <update_menu+0xd6>
    4f42:	00 c0       	rjmp	.+0      	; 0x4f44 <update_menu+0xe0>
    4f44:	00 00       	nop
    4f46:	69 81       	ldd	r22, Y+1	; 0x01
    4f48:	5a 81       	ldd	r21, Y+2	; 0x02
    4f4a:	4b 81       	ldd	r20, Y+3	; 0x03
		_delay_ms(200);
	}

	// When cursor is at limits and button pressed
	if (*cursor == PREVLINE)								// Up				
    4f4c:	d8 01       	movw	r26, r16
    4f4e:	8c 91       	ld	r24, X
    4f50:	82 30       	cpi	r24, 0x02	; 2
    4f52:	41 f4       	brne	.+16     	; 0x4f64 <update_menu+0x100>
	{
		*cursor  = LINE0;
    4f54:	83 e0       	ldi	r24, 0x03	; 3
    4f56:	8c 93       	st	X, r24
		if (*top > start) *top = *top - 1;					// Shuffle list up
    4f58:	f7 01       	movw	r30, r14
    4f5a:	80 81       	ld	r24, Z
    4f5c:	68 17       	cp	r22, r24
    4f5e:	10 f4       	brcc	.+4      	; 0x4f64 <update_menu+0x100>
    4f60:	81 50       	subi	r24, 0x01	; 1
    4f62:	80 83       	st	Z, r24
	}
	if (*cursor == NEXTLINE)								// Down
    4f64:	d8 01       	movw	r26, r16
    4f66:	8c 91       	ld	r24, X
    4f68:	88 32       	cpi	r24, 0x28	; 40
    4f6a:	91 f4       	brne	.+36     	; 0x4f90 <update_menu+0x12c>
	{
		*cursor  = LINE3;
    4f6c:	87 e2       	ldi	r24, 0x27	; 39
    4f6e:	8c 93       	st	X, r24
		if ((*top+3) < ((start + items)-1)) *top = *top + 1;// Shuffle list down
    4f70:	f7 01       	movw	r30, r14
    4f72:	70 81       	ld	r23, Z
    4f74:	27 2f       	mov	r18, r23
    4f76:	30 e0       	ldi	r19, 0x00	; 0
    4f78:	2d 5f       	subi	r18, 0xFD	; 253
    4f7a:	3f 4f       	sbci	r19, 0xFF	; 255
    4f7c:	85 2f       	mov	r24, r21
    4f7e:	90 e0       	ldi	r25, 0x00	; 0
    4f80:	86 0f       	add	r24, r22
    4f82:	91 1d       	adc	r25, r1
    4f84:	01 97       	sbiw	r24, 0x01	; 1
    4f86:	28 17       	cp	r18, r24
    4f88:	39 07       	cpc	r19, r25
    4f8a:	14 f4       	brge	.+4      	; 0x4f90 <update_menu+0x12c>
    4f8c:	7f 5f       	subi	r23, 0xFF	; 255
    4f8e:	70 83       	st	Z, r23
	}

	// Remove temporary offset
	*top = *top - offset;
    4f90:	d7 01       	movw	r26, r14
    4f92:	8c 91       	ld	r24, X
    4f94:	84 1b       	sub	r24, r20
    4f96:	8c 93       	st	X, r24
}
    4f98:	23 96       	adiw	r28, 0x03	; 3
    4f9a:	e8 e0       	ldi	r30, 0x08	; 8
    4f9c:	0c 94 b9 3e 	jmp	0x7d72	; 0x7d72 <__epilogue_restores__+0x14>

00004fa0 <print_cursor>:
// Print cursor on specified line
//************************************************************

void print_cursor(uint8_t line)
{
	LCD_Display_Text(13, (const unsigned char*)Wingdings, CURSOROFFSET, line);
    4fa0:	28 2f       	mov	r18, r24
    4fa2:	30 e0       	ldi	r19, 0x00	; 0
    4fa4:	43 e0       	ldi	r20, 0x03	; 3
    4fa6:	50 e0       	ldi	r21, 0x00	; 0
    4fa8:	6d e0       	ldi	r22, 0x0D	; 13
    4faa:	71 e0       	ldi	r23, 0x01	; 1
    4fac:	8d e0       	ldi	r24, 0x0D	; 13
    4fae:	0e 94 84 1c 	call	0x3908	; 0x3908 <LCD_Display_Text>
    4fb2:	08 95       	ret

00004fb4 <print_menu_items>:
// MenuOffsets = originally an array, now just a fixed horizontal offset for the value text
// text_link = pointer to the text list for the values if not numeric
// cursor = cursor position
//**********************************************************************
void print_menu_items(uint8_t top, uint8_t start, int8_t values[], uint8_t mult, const unsigned char* menu_ranges, uint8_t rangetype, uint8_t MenuOffsets, const unsigned char* text_link, uint8_t cursor)
{
    4fb4:	a9 e0       	ldi	r26, 0x09	; 9
    4fb6:	b0 e0       	ldi	r27, 0x00	; 0
    4fb8:	e0 ee       	ldi	r30, 0xE0	; 224
    4fba:	f7 e2       	ldi	r31, 0x27	; 39
    4fbc:	0c 94 93 3e 	jmp	0x7d26	; 0x7d26 <__prologue_saves__>
    4fc0:	38 2e       	mov	r3, r24
    4fc2:	3a 01       	movw	r6, r20
    4fc4:	22 2e       	mov	r2, r18
    4fc6:	28 01       	movw	r4, r16
    4fc8:	ee 82       	std	Y+6, r14	; 0x06
    4fca:	cf 82       	std	Y+7, r12	; 0x07
    4fcc:	88 86       	std	Y+8, r8	; 0x08
	menu_range_t	range1;
	uint8_t multiplier;
		
	// Clear buffer before each update
	clear_buffer(buffer);
    4fce:	80 e0       	ldi	r24, 0x00	; 0
    4fd0:	91 e0       	ldi	r25, 0x01	; 1
    4fd2:	69 87       	std	Y+9, r22	; 0x09
    4fd4:	0e 94 db 1a 	call	0x35b6	; 0x35b6 <clear_buffer>
	print_menu_frame(0);
    4fd8:	80 e0       	ldi	r24, 0x00	; 0
    4fda:	0e 94 f1 24 	call	0x49e2	; 0x49e2 <print_menu_frame>
    4fde:	23 2d       	mov	r18, r3
    4fe0:	30 e0       	ldi	r19, 0x00	; 0
    4fe2:	69 85       	ldd	r22, Y+9	; 0x09
    4fe4:	86 2f       	mov	r24, r22
    4fe6:	90 e0       	ldi	r25, 0x00	; 0
    4fe8:	68 01       	movw	r12, r16
    4fea:	45 e0       	ldi	r20, 0x05	; 5
    4fec:	64 9f       	mul	r22, r20
    4fee:	c0 18       	sub	r12, r0
    4ff0:	d1 08       	sbc	r13, r1
    4ff2:	11 24       	eor	r1, r1
    4ff4:	e5 e0       	ldi	r30, 0x05	; 5
    4ff6:	3e 9e       	mul	r3, r30
    4ff8:	c0 0c       	add	r12, r0
    4ffa:	d1 1c       	adc	r13, r1
    4ffc:	11 24       	eor	r1, r1
    4ffe:	81 2c       	mov	r8, r1
    5000:	91 2c       	mov	r9, r1
    5002:	e1 2c       	mov	r14, r1
    5004:	f1 2c       	mov	r15, r1
    5006:	a8 1a       	sub	r10, r24
    5008:	b9 0a       	sbc	r11, r25
    500a:	a2 0e       	add	r10, r18
    500c:	b3 1e       	adc	r11, r19
    500e:	28 1b       	sub	r18, r24
    5010:	39 0b       	sbc	r19, r25
    5012:	62 0e       	add	r6, r18
    5014:	73 1e       	adc	r7, r19
    5016:	87 01       	movw	r16, r14
    5018:	0a 5a       	subi	r16, 0xAA	; 170
    501a:	18 4e       	sbci	r17, 0xE8	; 232
	
	// Print each line
	for (uint8_t i = 0; i < 4; i++)
	{
		LCD_Display_Text(top+i,(const unsigned char*)Verdana8,ITEMOFFSET,(uint8_t)pgm_read_byte(&lines[i]));
    501c:	f8 01       	movw	r30, r16
    501e:	24 91       	lpm	r18, Z
    5020:	30 e0       	ldi	r19, 0x00	; 0
    5022:	4a e0       	ldi	r20, 0x0A	; 10
    5024:	50 e0       	ldi	r21, 0x00	; 0
    5026:	65 e2       	ldi	r22, 0x25	; 37
    5028:	7a e0       	ldi	r23, 0x0A	; 10
    502a:	83 2d       	mov	r24, r3
    502c:	8e 0d       	add	r24, r14
    502e:	0e 94 84 1c 	call	0x3908	; 0x3908 <LCD_Display_Text>

		// Handle unique or copied ranges (to reduce space)
		if (rangetype == 0)
    5032:	fe 81       	ldd	r31, Y+6	; 0x06
		{
			// Use each unique entry
			memcpy_P(&range1, &menu_ranges[(top+i - start)* sizeof(range1)], sizeof(range1));
    5034:	45 e0       	ldi	r20, 0x05	; 5
    5036:	50 e0       	ldi	r21, 0x00	; 0
	for (uint8_t i = 0; i < 4; i++)
	{
		LCD_Display_Text(top+i,(const unsigned char*)Verdana8,ITEMOFFSET,(uint8_t)pgm_read_byte(&lines[i]));

		// Handle unique or copied ranges (to reduce space)
		if (rangetype == 0)
    5038:	f1 11       	cpse	r31, r1
    503a:	04 c0       	rjmp	.+8      	; 0x5044 <print_menu_items+0x90>
		{
			// Use each unique entry
			memcpy_P(&range1, &menu_ranges[(top+i - start)* sizeof(range1)], sizeof(range1));
    503c:	b4 01       	movw	r22, r8
    503e:	6c 0d       	add	r22, r12
    5040:	7d 1d       	adc	r23, r13
    5042:	01 c0       	rjmp	.+2      	; 0x5046 <print_menu_items+0x92>
		}
		else
		{
			// Use just the first entry in array for all 
			memcpy_P(&range1, &menu_ranges[0], sizeof(range1));
    5044:	b2 01       	movw	r22, r4
    5046:	ce 01       	movw	r24, r28
    5048:	01 96       	adiw	r24, 0x01	; 1
    504a:	0e 94 ca 3e 	call	0x7d94	; 0x7d94 <memcpy_P>
		}
	
		if (range1.style == 2)
    504e:	6c 81       	ldd	r22, Y+4	; 0x04
    5050:	62 30       	cpi	r22, 0x02	; 2
    5052:	11 f0       	breq	.+4      	; 0x5058 <print_menu_items+0xa4>
		{
			multiplier = mult;
		}
		else
		{
			multiplier = 1;
    5054:	31 e0       	ldi	r19, 0x01	; 1
    5056:	01 c0       	rjmp	.+2      	; 0x505a <print_menu_items+0xa6>
			memcpy_P(&range1, &menu_ranges[0], sizeof(range1));
		}
	
		if (range1.style == 2)
		{
			multiplier = mult;
    5058:	32 2d       	mov	r19, r2
		else
		{
			multiplier = 1;
		}

		print_menu_text((values[top+i - start] * multiplier), range1.style, (pgm_read_byte(&text_link[top+i - start]) + values[top+i - start]), MenuOffsets, (uint8_t)pgm_read_byte(&lines[i]));
    505a:	f8 01       	movw	r30, r16
    505c:	04 91       	lpm	r16, Z
    505e:	f5 01       	movw	r30, r10
    5060:	ee 0d       	add	r30, r14
    5062:	ff 1d       	adc	r31, r15
    5064:	44 91       	lpm	r20, Z
    5066:	d3 01       	movw	r26, r6
    5068:	ae 0d       	add	r26, r14
    506a:	bf 1d       	adc	r27, r15
    506c:	5c 91       	ld	r21, X
    506e:	45 0f       	add	r20, r21
    5070:	2f 81       	ldd	r18, Y+7	; 0x07
    5072:	53 03       	mulsu	r21, r19
    5074:	c0 01       	movw	r24, r0
    5076:	11 24       	eor	r1, r1
    5078:	0e 94 67 25 	call	0x4ace	; 0x4ace <print_menu_text>
    507c:	ff ef       	ldi	r31, 0xFF	; 255
    507e:	ef 1a       	sub	r14, r31
    5080:	ff 0a       	sbc	r15, r31
    5082:	45 e0       	ldi	r20, 0x05	; 5
    5084:	84 0e       	add	r8, r20
    5086:	91 1c       	adc	r9, r1
	// Clear buffer before each update
	clear_buffer(buffer);
	print_menu_frame(0);
	
	// Print each line
	for (uint8_t i = 0; i < 4; i++)
    5088:	84 e0       	ldi	r24, 0x04	; 4
    508a:	e8 16       	cp	r14, r24
    508c:	f1 04       	cpc	r15, r1
    508e:	09 f0       	breq	.+2      	; 0x5092 <print_menu_items+0xde>
    5090:	c2 cf       	rjmp	.-124    	; 0x5016 <print_menu_items+0x62>
		}

		print_menu_text((values[top+i - start] * multiplier), range1.style, (pgm_read_byte(&text_link[top+i - start]) + values[top+i - start]), MenuOffsets, (uint8_t)pgm_read_byte(&lines[i]));
	}

	print_cursor(cursor);	// Cursor
    5092:	88 85       	ldd	r24, Y+8	; 0x08
    5094:	0e 94 d0 27 	call	0x4fa0	; 0x4fa0 <print_cursor>
	write_buffer(buffer,1);
    5098:	61 e0       	ldi	r22, 0x01	; 1
    509a:	80 e0       	ldi	r24, 0x00	; 0
    509c:	91 e0       	ldi	r25, 0x01	; 1
    509e:	0e 94 a1 1a 	call	0x3542	; 0x3542 <write_buffer>
	poll_buttons(true);
    50a2:	81 e0       	ldi	r24, 0x01	; 1
    50a4:	0e 94 90 25 	call	0x4b20	; 0x4b20 <poll_buttons>
}
    50a8:	29 96       	adiw	r28, 0x09	; 9
    50aa:	e2 e1       	ldi	r30, 0x12	; 18
    50ac:	0c 94 af 3e 	jmp	0x7d5e	; 0x7d5e <__epilogue_restores__>

000050b0 <menu_flight>:
//************************************************************
// Main menu-specific setup
//************************************************************

void menu_flight(uint8_t mode)
{
    50b0:	6f 92       	push	r6
    50b2:	7f 92       	push	r7
    50b4:	8f 92       	push	r8
    50b6:	af 92       	push	r10
    50b8:	bf 92       	push	r11
    50ba:	cf 92       	push	r12
    50bc:	df 92       	push	r13
    50be:	ef 92       	push	r14
    50c0:	ff 92       	push	r15
    50c2:	0f 93       	push	r16
    50c4:	1f 93       	push	r17
    50c6:	cf 93       	push	r28
    50c8:	df 93       	push	r29
    50ca:	00 d0       	rcall	.+0      	; 0x50cc <menu_flight+0x1c>
    50cc:	00 d0       	rcall	.+0      	; 0x50ce <menu_flight+0x1e>
    50ce:	1f 92       	push	r1
    50d0:	cd b7       	in	r28, 0x3d	; 61
    50d2:	de b7       	in	r29, 0x3e	; 62
	int8_t *value_ptr;
	menu_range_t range;
	uint8_t text_link;

	// If submenu item has changed, reset submenu positions
	if (menu_flag)
    50d4:	90 91 6c 07 	lds	r25, 0x076C
    50d8:	99 23       	and	r25, r25
    50da:	29 f0       	breq	.+10     	; 0x50e6 <menu_flight+0x36>
	{
		sub_top = FLIGHTSTART;
    50dc:	9c ea       	ldi	r25, 0xAC	; 172
    50de:	90 93 22 05 	sts	0x0522, r25
		menu_flag = 0;
    50e2:	10 92 6c 07 	sts	0x076C, r1
	}

	while(button != BACK)
	{
		value_ptr = &Config.FlightMode[mode].Roll_P_mult;
    50e6:	92 e1       	ldi	r25, 0x12	; 18
    50e8:	89 9f       	mul	r24, r25
    50ea:	30 01       	movw	r6, r0
    50ec:	11 24       	eor	r1, r1
    50ee:	c3 01       	movw	r24, r6
    50f0:	8f 54       	subi	r24, 0x4F	; 79
    50f2:	9a 4f       	sbci	r25, 0xFA	; 250
    50f4:	3c 01       	movw	r6, r24
	{
		sub_top = FLIGHTSTART;
		menu_flag = 0;
	}

	while(button != BACK)
    50f6:	80 91 6a 07 	lds	r24, 0x076A
    50fa:	80 37       	cpi	r24, 0x70	; 112
    50fc:	09 f4       	brne	.+2      	; 0x5100 <menu_flight+0x50>
    50fe:	58 c0       	rjmp	.+176    	; 0x51b0 <menu_flight+0x100>
	{
		value_ptr = &Config.FlightMode[mode].Roll_P_mult;

		// Print menu
		print_menu_items(sub_top, FLIGHTSTART, value_ptr, 1, (const unsigned char*)flight_menu_ranges, 0, FLIGHTOFFSET, (const unsigned char*)FlightMenuText, cursor);
    5100:	80 90 00 05 	lds	r8, 0x0500
    5104:	84 eb       	ldi	r24, 0xB4	; 180
    5106:	a8 2e       	mov	r10, r24
    5108:	87 e1       	ldi	r24, 0x17	; 23
    510a:	b8 2e       	mov	r11, r24
    510c:	9f e4       	ldi	r25, 0x4F	; 79
    510e:	c9 2e       	mov	r12, r25
    5110:	e1 2c       	mov	r14, r1
    5112:	0a e5       	ldi	r16, 0x5A	; 90
    5114:	17 e1       	ldi	r17, 0x17	; 23
    5116:	21 e0       	ldi	r18, 0x01	; 1
    5118:	a3 01       	movw	r20, r6
    511a:	6c ea       	ldi	r22, 0xAC	; 172
    511c:	80 91 22 05 	lds	r24, 0x0522
    5120:	0e 94 da 27 	call	0x4fb4	; 0x4fb4 <print_menu_items>

		// Handle menu changes
		update_menu(FLIGHTITEMS, FLIGHTSTART, 0, button, &cursor, &sub_top, &menu_temp);
    5124:	2f e1       	ldi	r18, 0x1F	; 31
    5126:	c2 2e       	mov	r12, r18
    5128:	25 e0       	ldi	r18, 0x05	; 5
    512a:	d2 2e       	mov	r13, r18
    512c:	32 e2       	ldi	r19, 0x22	; 34
    512e:	e3 2e       	mov	r14, r19
    5130:	35 e0       	ldi	r19, 0x05	; 5
    5132:	f3 2e       	mov	r15, r19
    5134:	00 e0       	ldi	r16, 0x00	; 0
    5136:	15 e0       	ldi	r17, 0x05	; 5
    5138:	20 91 6a 07 	lds	r18, 0x076A
    513c:	40 e0       	ldi	r20, 0x00	; 0
    513e:	6c ea       	ldi	r22, 0xAC	; 172
    5140:	82 e1       	ldi	r24, 0x12	; 18
    5142:	0e 94 32 27 	call	0x4e64	; 0x4e64 <update_menu>
		range = get_menu_range ((const unsigned char*)flight_menu_ranges, (menu_temp - FLIGHTSTART));
    5146:	60 91 1f 05 	lds	r22, 0x051F
    514a:	6c 5a       	subi	r22, 0xAC	; 172
    514c:	8a e5       	ldi	r24, 0x5A	; 90
    514e:	97 e1       	ldi	r25, 0x17	; 23
    5150:	0e 94 40 25 	call	0x4a80	; 0x4a80 <get_menu_range>
    5154:	29 83       	std	Y+1, r18	; 0x01
    5156:	3a 83       	std	Y+2, r19	; 0x02
    5158:	4b 83       	std	Y+3, r20	; 0x03
    515a:	5c 83       	std	Y+4, r21	; 0x04
    515c:	6d 83       	std	Y+5, r22	; 0x05

		if (button == ENTER)
    515e:	80 91 6a 07 	lds	r24, 0x076A
    5162:	80 3e       	cpi	r24, 0xE0	; 224
    5164:	d9 f4       	brne	.+54     	; 0x519c <menu_flight+0xec>
		{
			text_link = pgm_read_byte(&FlightMenuText[menu_temp - FLIGHTSTART]);
    5166:	80 91 1f 05 	lds	r24, 0x051F
    516a:	e8 2f       	mov	r30, r24
    516c:	f0 e0       	ldi	r31, 0x00	; 0
    516e:	e8 5f       	subi	r30, 0xF8	; 248
    5170:	f8 4e       	sbci	r31, 0xE8	; 232
    5172:	a4 90       	lpm	r10, Z
			do_menu_item(menu_temp, value_ptr + (menu_temp - FLIGHTSTART), 1, range, 0, text_link, false, 0);
    5174:	68 2f       	mov	r22, r24
    5176:	70 e0       	ldi	r23, 0x00	; 0
    5178:	6c 5a       	subi	r22, 0xAC	; 172
    517a:	71 09       	sbc	r23, r1
    517c:	66 0d       	add	r22, r6
    517e:	77 1d       	adc	r23, r7
    5180:	1f 92       	push	r1
    5182:	1f 92       	push	r1
    5184:	81 2c       	mov	r8, r1
    5186:	c1 2c       	mov	r12, r1
    5188:	e9 80       	ldd	r14, Y+1	; 0x01
    518a:	fa 80       	ldd	r15, Y+2	; 0x02
    518c:	0b 81       	ldd	r16, Y+3	; 0x03
    518e:	1c 81       	ldd	r17, Y+4	; 0x04
    5190:	2d 81       	ldd	r18, Y+5	; 0x05
    5192:	41 e0       	ldi	r20, 0x01	; 1
    5194:	0e 94 c5 25 	call	0x4b8a	; 0x4b8a <do_menu_item>
    5198:	0f 90       	pop	r0
    519a:	0f 90       	pop	r0
		}

		// Update limits when exiting
		if (button == ENTER)
    519c:	80 91 6a 07 	lds	r24, 0x076A
    51a0:	80 3e       	cpi	r24, 0xE0	; 224
    51a2:	09 f0       	breq	.+2      	; 0x51a6 <menu_flight+0xf6>
    51a4:	a8 cf       	rjmp	.-176    	; 0x50f6 <menu_flight+0x46>
		{
			UpdateLimits();			 // Update I-term limits and triggers based on percentages
    51a6:	0e 94 5b 2d 	call	0x5ab6	; 0x5ab6 <UpdateLimits>
			Save_Config_to_EEPROM(); // Save value and return
    51aa:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <Save_Config_to_EEPROM>
    51ae:	a3 cf       	rjmp	.-186    	; 0x50f6 <menu_flight+0x46>
		}
	}
}
    51b0:	0f 90       	pop	r0
    51b2:	0f 90       	pop	r0
    51b4:	0f 90       	pop	r0
    51b6:	0f 90       	pop	r0
    51b8:	0f 90       	pop	r0
    51ba:	df 91       	pop	r29
    51bc:	cf 91       	pop	r28
    51be:	1f 91       	pop	r17
    51c0:	0f 91       	pop	r16
    51c2:	ff 90       	pop	r15
    51c4:	ef 90       	pop	r14
    51c6:	df 90       	pop	r13
    51c8:	cf 90       	pop	r12
    51ca:	bf 90       	pop	r11
    51cc:	af 90       	pop	r10
    51ce:	8f 90       	pop	r8
    51d0:	7f 90       	pop	r7
    51d2:	6f 90       	pop	r6
    51d4:	08 95       	ret

000051d6 <do_main_menu_item>:
//	menu_beep(1);
}

void do_main_menu_item(uint8_t menuitem)
{
	switch(menuitem) 
    51d6:	90 e0       	ldi	r25, 0x00	; 0
    51d8:	fc 01       	movw	r30, r24
    51da:	ed 54       	subi	r30, 0x4D	; 77
    51dc:	f1 09       	sbc	r31, r1
    51de:	e3 31       	cpi	r30, 0x13	; 19
    51e0:	f1 05       	cpc	r31, r1
    51e2:	a8 f5       	brcc	.+106    	; 0x524e <do_main_menu_item+0x78>
    51e4:	e2 5c       	subi	r30, 0xC2	; 194
    51e6:	ff 4f       	sbci	r31, 0xFF	; 255
    51e8:	0c 94 5c 3e 	jmp	0x7cb8	; 0x7cb8 <__tablejump2__>
	{
		case MAINSTART:
			menu_rc_setup(2); 		// 1.General
    51ec:	82 e0       	ldi	r24, 0x02	; 2
    51ee:	01 c0       	rjmp	.+2      	; 0x51f2 <do_main_menu_item+0x1c>
			break;
		case MAINSTART+1:
			menu_rc_setup(1); 		// 2.RX setup	
    51f0:	81 e0       	ldi	r24, 0x01	; 1
    51f2:	0e 94 a2 2c 	call	0x5944	; 0x5944 <menu_rc_setup>
			break;
    51f6:	08 95       	ret
		case MAINSTART+2:
			Display_rcinput();		// 3.RX inputs
    51f8:	0e 94 20 11 	call	0x2240	; 0x2240 <Display_rcinput>
			break;
    51fc:	08 95       	ret
		case MAINSTART+3:
			Display_sticks(); 		// 4.Stick polarity	
    51fe:	0e 94 b2 14 	call	0x2964	; 0x2964 <Display_sticks>
			break;
    5202:	08 95       	ret
		case MAINSTART+4:
			Display_sensors();		// 5.Sensor calibration
    5204:	0e 94 26 12 	call	0x244c	; 0x244c <Display_sensors>
			break;
    5208:	08 95       	ret
		case MAINSTART+5:
			Display_balance();		// 6.Level meter
    520a:	0e 94 86 10 	call	0x210c	; 0x210c <Display_balance>
			break;
    520e:	08 95       	ret
		case MAINSTART+6:
			menu_flight(0);			// 7.Flight profile 1
    5210:	80 e0       	ldi	r24, 0x00	; 0
    5212:	01 c0       	rjmp	.+2      	; 0x5216 <do_main_menu_item+0x40>
			break;
		case MAINSTART+7:
			menu_flight(1); 		// 8.Flight profile 2
    5214:	81 e0       	ldi	r24, 0x01	; 1
    5216:	0e 94 58 28 	call	0x50b0	; 0x50b0 <menu_flight>
			break;
    521a:	08 95       	ret
		case MAINSTART+8:
			menu_mixer(0);			// 9.OUT1 Mixer
    521c:	80 e0       	ldi	r24, 0x00	; 0
    521e:	0d c0       	rjmp	.+26     	; 0x523a <do_main_menu_item+0x64>
			break;
		case MAINSTART+9:
			menu_mixer(1);			// 10.OUT2 Mixer
    5220:	81 e0       	ldi	r24, 0x01	; 1
    5222:	0b c0       	rjmp	.+22     	; 0x523a <do_main_menu_item+0x64>
			break;
		case MAINSTART+10:
			menu_mixer(2);			// 11.OUT3 Mixer
    5224:	82 e0       	ldi	r24, 0x02	; 2
    5226:	09 c0       	rjmp	.+18     	; 0x523a <do_main_menu_item+0x64>
			break;
		case MAINSTART+11:
			menu_mixer(3);			// 12.OUT4 Mixer
    5228:	83 e0       	ldi	r24, 0x03	; 3
    522a:	07 c0       	rjmp	.+14     	; 0x523a <do_main_menu_item+0x64>
			break;
		case MAINSTART+12:
			menu_mixer(4);			// 13.OUT5 Mixer
    522c:	84 e0       	ldi	r24, 0x04	; 4
    522e:	05 c0       	rjmp	.+10     	; 0x523a <do_main_menu_item+0x64>
			break;
		case MAINSTART+13:
			menu_mixer(5);			// 14.OUT6 Mixer
    5230:	85 e0       	ldi	r24, 0x05	; 5
    5232:	03 c0       	rjmp	.+6      	; 0x523a <do_main_menu_item+0x64>
			break;
		case MAINSTART+14:
			menu_mixer(6);			// 15.OUT7 Mixer
    5234:	86 e0       	ldi	r24, 0x06	; 6
    5236:	01 c0       	rjmp	.+2      	; 0x523a <do_main_menu_item+0x64>
			break;
		case MAINSTART+15:
			menu_mixer(7);			// 16.OUT8 Mixer
    5238:	87 e0       	ldi	r24, 0x07	; 7
    523a:	0e 94 a7 29 	call	0x534e	; 0x534e <menu_mixer>
			break;
    523e:	08 95       	ret
		case MAINSTART+16:
			menu_servo_setup(1);	// 17.Servo direction
    5240:	81 e0       	ldi	r24, 0x01	; 1
    5242:	03 c0       	rjmp	.+6      	; 0x524a <do_main_menu_item+0x74>
			break;
		case MAINSTART+17:
			menu_servo_setup(2); 	// 18.Neg. Servo trvl. (%)
    5244:	82 e0       	ldi	r24, 0x02	; 2
    5246:	01 c0       	rjmp	.+2      	; 0x524a <do_main_menu_item+0x74>
			break;
		case MAINSTART+18:
			menu_servo_setup(3); 	// 19.Pos. Servo trvl. (%)
    5248:	83 e0       	ldi	r24, 0x03	; 3
    524a:	0e 94 df 2b 	call	0x57be	; 0x57be <menu_servo_setup>
    524e:	08 95       	ret

00005250 <menu_main>:
uint8_t main_top = MAINSTART;
uint8_t sub_top = 0;
uint8_t menu_flag;

void menu_main(void)
{
    5250:	a0 e0       	ldi	r26, 0x00	; 0
    5252:	b0 e0       	ldi	r27, 0x00	; 0
    5254:	ee e2       	ldi	r30, 0x2E	; 46
    5256:	f9 e2       	ldi	r31, 0x29	; 41
    5258:	0c 94 9b 3e 	jmp	0x7d36	; 0x7d36 <__prologue_saves__+0x10>
	static uint8_t main_cursor = LINE0;	// These are now static so as to remember the main menu position
	static uint8_t main_temp = 0;
	static uint8_t old_menu = 0;

	button = NONE;
    525c:	80 ef       	ldi	r24, 0xF0	; 240
    525e:	80 93 6a 07 	sts	0x076A, r24

	// Wait until user's finger is off button 1
	while(BUTTON1 == 0)
    5262:	1f 99       	sbic	0x03, 7	; 3
    5264:	0a c0       	rjmp	.+20     	; 0x527a <menu_main+0x2a>
    5266:	2f e3       	ldi	r18, 0x3F	; 63
    5268:	8d e0       	ldi	r24, 0x0D	; 13
    526a:	93 e0       	ldi	r25, 0x03	; 3
    526c:	21 50       	subi	r18, 0x01	; 1
    526e:	80 40       	sbci	r24, 0x00	; 0
    5270:	90 40       	sbci	r25, 0x00	; 0
    5272:	e1 f7       	brne	.-8      	; 0x526c <menu_main+0x1c>
    5274:	00 c0       	rjmp	.+0      	; 0x5276 <menu_main+0x26>
    5276:	00 00       	nop
    5278:	f4 cf       	rjmp	.-24     	; 0x5262 <menu_main+0x12>

		// If main menu item has changed, reset submenu positions
		// and flag to submenus that positions need to be reset
		if (main_temp != old_menu)
		{
			cursor = LINE0;
    527a:	23 e0       	ldi	r18, 0x03	; 3
    527c:	b2 2e       	mov	r11, r18

		// If ENTER pressed, jump to menu 
		if (button == ENTER)
		{
			do_main_menu_item(main_temp);
			button = NONE;
    527e:	30 ef       	ldi	r19, 0xF0	; 240
    5280:	a3 2e       	mov	r10, r19
	while(BUTTON1 == 0)
	{
		_delay_ms(50);
	}

	while(button != BACK)
    5282:	80 91 6a 07 	lds	r24, 0x076A
    5286:	80 37       	cpi	r24, 0x70	; 112
    5288:	09 f4       	brne	.+2      	; 0x528c <menu_main+0x3c>
    528a:	5c c0       	rjmp	.+184    	; 0x5344 <menu_main+0xf4>
	{
		// Clear buffer before each update
		clear_buffer(buffer);	
    528c:	80 e0       	ldi	r24, 0x00	; 0
    528e:	91 e0       	ldi	r25, 0x01	; 1
    5290:	0e 94 db 1a 	call	0x35b6	; 0x35b6 <clear_buffer>

		// Print menu
		print_menu_frame(0);													// Frame
    5294:	80 e0       	ldi	r24, 0x00	; 0
    5296:	0e 94 f1 24 	call	0x49e2	; 0x49e2 <print_menu_frame>
    529a:	c0 e0       	ldi	r28, 0x00	; 0
    529c:	d0 e0       	ldi	r29, 0x00	; 0
    529e:	fe 01       	movw	r30, r28
    52a0:	ea 5a       	subi	r30, 0xAA	; 170
    52a2:	f8 4e       	sbci	r31, 0xE8	; 232
		
		for (uint8_t i = 0; i < 4; i++)
		{
			LCD_Display_Text(main_top+i,(const unsigned char*)Verdana8,ITEMOFFSET,(uint8_t)pgm_read_byte(&lines[i]));	// Lines
    52a4:	24 91       	lpm	r18, Z
    52a6:	30 e0       	ldi	r19, 0x00	; 0
    52a8:	80 91 02 05 	lds	r24, 0x0502
    52ac:	4a e0       	ldi	r20, 0x0A	; 10
    52ae:	50 e0       	ldi	r21, 0x00	; 0
    52b0:	65 e2       	ldi	r22, 0x25	; 37
    52b2:	7a e0       	ldi	r23, 0x0A	; 10
    52b4:	8c 0f       	add	r24, r28
    52b6:	0e 94 84 1c 	call	0x3908	; 0x3908 <LCD_Display_Text>
    52ba:	21 96       	adiw	r28, 0x01	; 1
		clear_buffer(buffer);	

		// Print menu
		print_menu_frame(0);													// Frame
		
		for (uint8_t i = 0; i < 4; i++)
    52bc:	c4 30       	cpi	r28, 0x04	; 4
    52be:	d1 05       	cpc	r29, r1
    52c0:	71 f7       	brne	.-36     	; 0x529e <menu_main+0x4e>
		{
			LCD_Display_Text(main_top+i,(const unsigned char*)Verdana8,ITEMOFFSET,(uint8_t)pgm_read_byte(&lines[i]));	// Lines
		}

		print_cursor(main_cursor);												// Cursor
    52c2:	80 91 01 05 	lds	r24, 0x0501
    52c6:	0e 94 d0 27 	call	0x4fa0	; 0x4fa0 <print_cursor>
		write_buffer(buffer,1);
    52ca:	61 e0       	ldi	r22, 0x01	; 1
    52cc:	80 e0       	ldi	r24, 0x00	; 0
    52ce:	91 e0       	ldi	r25, 0x01	; 1
    52d0:	0e 94 a1 1a 	call	0x3542	; 0x3542 <write_buffer>

		// Poll buttons when idle
		poll_buttons(true);
    52d4:	81 e0       	ldi	r24, 0x01	; 1
    52d6:	0e 94 90 25 	call	0x4b20	; 0x4b20 <poll_buttons>

		// Handle menu changes
		update_menu(MAINITEMS, MAINSTART, 0, button, &main_cursor, &main_top, &main_temp);
    52da:	81 e2       	ldi	r24, 0x21	; 33
    52dc:	c8 2e       	mov	r12, r24
    52de:	85 e0       	ldi	r24, 0x05	; 5
    52e0:	d8 2e       	mov	r13, r24
    52e2:	92 e0       	ldi	r25, 0x02	; 2
    52e4:	e9 2e       	mov	r14, r25
    52e6:	95 e0       	ldi	r25, 0x05	; 5
    52e8:	f9 2e       	mov	r15, r25
    52ea:	01 e0       	ldi	r16, 0x01	; 1
    52ec:	15 e0       	ldi	r17, 0x05	; 5
    52ee:	20 91 6a 07 	lds	r18, 0x076A
    52f2:	40 e0       	ldi	r20, 0x00	; 0
    52f4:	6d e4       	ldi	r22, 0x4D	; 77
    52f6:	83 e1       	ldi	r24, 0x13	; 19
    52f8:	0e 94 32 27 	call	0x4e64	; 0x4e64 <update_menu>

		// If main menu item has changed, reset submenu positions
		// and flag to submenus that positions need to be reset
		if (main_temp != old_menu)
    52fc:	80 91 21 05 	lds	r24, 0x0521
    5300:	90 91 20 05 	lds	r25, 0x0520
    5304:	89 17       	cp	r24, r25
    5306:	49 f0       	breq	.+18     	; 0x531a <menu_main+0xca>
		{
			cursor = LINE0;
    5308:	b0 92 00 05 	sts	0x0500, r11
			menu_temp = 0;
    530c:	10 92 1f 05 	sts	0x051F, r1
			old_menu = main_temp;
    5310:	80 93 20 05 	sts	0x0520, r24
			menu_flag = 1;
    5314:	91 e0       	ldi	r25, 0x01	; 1
    5316:	90 93 6c 07 	sts	0x076C, r25
		}

		// If ENTER pressed, jump to menu 
		if (button == ENTER)
    531a:	90 91 6a 07 	lds	r25, 0x076A
    531e:	90 3e       	cpi	r25, 0xE0	; 224
    5320:	09 f0       	breq	.+2      	; 0x5324 <menu_main+0xd4>
    5322:	af cf       	rjmp	.-162    	; 0x5282 <menu_main+0x32>
		{
			do_main_menu_item(main_temp);
    5324:	0e 94 eb 28 	call	0x51d6	; 0x51d6 <do_main_menu_item>
			button = NONE;
    5328:	a0 92 6a 07 	sts	0x076A, r10

			// Wait until user's finger is off button 1
			while(BUTTON1 == 0)
    532c:	1f 99       	sbic	0x03, 7	; 3
    532e:	a9 cf       	rjmp	.-174    	; 0x5282 <menu_main+0x32>
    5330:	2f e3       	ldi	r18, 0x3F	; 63
    5332:	8d e0       	ldi	r24, 0x0D	; 13
    5334:	93 e0       	ldi	r25, 0x03	; 3
    5336:	21 50       	subi	r18, 0x01	; 1
    5338:	80 40       	sbci	r24, 0x00	; 0
    533a:	90 40       	sbci	r25, 0x00	; 0
    533c:	e1 f7       	brne	.-8      	; 0x5336 <menu_main+0xe6>
    533e:	00 c0       	rjmp	.+0      	; 0x5340 <menu_main+0xf0>
    5340:	00 00       	nop
    5342:	f4 cf       	rjmp	.-24     	; 0x532c <menu_main+0xdc>
			}
		}
	}

//	menu_beep(1);
}
    5344:	cd b7       	in	r28, 0x3d	; 61
    5346:	de b7       	in	r29, 0x3e	; 62
    5348:	ea e0       	ldi	r30, 0x0A	; 10
    534a:	0c 94 b7 3e 	jmp	0x7d6e	; 0x7d6e <__epilogue_restores__+0x10>

0000534e <menu_mixer>:
//************************************************************
// Main menu-specific setup
//************************************************************

void menu_mixer(uint8_t i)
{
    534e:	2f 92       	push	r2
    5350:	3f 92       	push	r3
    5352:	4f 92       	push	r4
    5354:	5f 92       	push	r5
    5356:	6f 92       	push	r6
    5358:	7f 92       	push	r7
    535a:	8f 92       	push	r8
    535c:	af 92       	push	r10
    535e:	bf 92       	push	r11
    5360:	cf 92       	push	r12
    5362:	df 92       	push	r13
    5364:	ef 92       	push	r14
    5366:	ff 92       	push	r15
    5368:	0f 93       	push	r16
    536a:	1f 93       	push	r17
    536c:	cf 93       	push	r28
    536e:	df 93       	push	r29
    5370:	cd b7       	in	r28, 0x3d	; 61
    5372:	de b7       	in	r29, 0x3e	; 62
    5374:	af 97       	sbiw	r28, 0x2f	; 47
    5376:	0f b6       	in	r0, 0x3f	; 63
    5378:	f8 94       	cli
    537a:	de bf       	out	0x3e, r29	; 62
    537c:	0f be       	out	0x3f, r0	; 63
    537e:	cd bf       	out	0x3d, r28	; 61
	int8_t values[MIXERITEMS];
	menu_range_t range;
	uint8_t text_link = 0;

	// If submenu item has changed, reset submenu positions
	if (menu_flag)
    5380:	90 91 6c 07 	lds	r25, 0x076C
    5384:	99 23       	and	r25, r25
    5386:	29 f0       	breq	.+10     	; 0x5392 <menu_mixer+0x44>
	{
		sub_top = MIXERSTART;
    5388:	9e eb       	ldi	r25, 0xBE	; 190
    538a:	90 93 22 05 	sts	0x0522, r25
		menu_flag = 0;
    538e:	10 92 6c 07 	sts	0x076C, r1
	while(button != BACK)
	{
		value_ptr = &values[0];

		// Expand sensor bit values into values array
		if ((Config.Channel[i].P1_sensors & (1 << MotorMarker)) != 0)
    5392:	2d e1       	ldi	r18, 0x1D	; 29
    5394:	82 9f       	mul	r24, r18
    5396:	c0 01       	movw	r24, r0
    5398:	11 24       	eor	r1, r1
    539a:	fc 01       	movw	r30, r24
    539c:	e2 58       	subi	r30, 0x82	; 130
    539e:	fa 4f       	sbci	r31, 0xFA	; 250
    53a0:	fb a7       	std	Y+43, r31	; 0x2b
    53a2:	ea a7       	std	Y+42, r30	; 0x2a
    53a4:	1f 01       	movw	r2, r30
    53a6:	f2 ea       	ldi	r31, 0xA2	; 162
    53a8:	2f 0e       	add	r2, r31
    53aa:	31 1c       	adc	r3, r1
		}

		// P1 roll gyro
		if ((Config.Channel[i].P1_sensors & (1 << RollGyro)) != 0)
		{
			if ((Config.Channel[i].P1_scale & (1 << RollScale)) != 0)
    53ac:	4a a4       	ldd	r4, Y+42	; 0x2a
    53ae:	5b a4       	ldd	r5, Y+43	; 0x2b
    53b0:	24 ea       	ldi	r18, 0xA4	; 164
    53b2:	42 0e       	add	r4, r18
    53b4:	51 1c       	adc	r5, r1
		{
			values[25] = OFF;
		}

		// Assemble remaining byte data for P1n_position to P2_rudder_volume into array
		memcpy(&values[1],&Config.Channel[i].P1_offset, 13);
    53b6:	fc 01       	movw	r30, r24
    53b8:	ed 5e       	subi	r30, 0xED	; 237
    53ba:	f9 4f       	sbci	r31, 0xF9	; 249
    53bc:	fd a7       	std	Y+45, r31	; 0x2d
    53be:	ec a7       	std	Y+44, r30	; 0x2c
		// Assemble remaining byte data for P1_source_a to P2_source_b_volume into array
		memcpy(&values[26],&Config.Channel[i].P1_source_a, 8);
    53c0:	9c 01       	movw	r18, r24
    53c2:	2c 5d       	subi	r18, 0xDC	; 220
    53c4:	39 4f       	sbci	r19, 0xF9	; 249
    53c6:	3f a7       	std	Y+47, r19	; 0x2f
    53c8:	2e a7       	std	Y+46, r18	; 0x2e
		{
			values[14] = OFF;
		}

		// P2 roll gyro
		if ((Config.Channel[i].P2_sensors & (1 << RollGyro)) != 0)
    53ca:	2a a5       	ldd	r18, Y+42	; 0x2a
    53cc:	3b a5       	ldd	r19, Y+43	; 0x2b
    53ce:	2d 55       	subi	r18, 0x5D	; 93
    53d0:	3f 4f       	sbci	r19, 0xFF	; 255
    53d2:	39 a7       	std	Y+41, r19	; 0x29
    53d4:	28 a7       	std	Y+40, r18	; 0x28
		{
			if ((Config.Channel[i].P2_scale & (1 << RollScale)) != 0)
    53d6:	6a a4       	ldd	r6, Y+42	; 0x2a
    53d8:	7b a4       	ldd	r7, Y+43	; 0x2b
    53da:	35 ea       	ldi	r19, 0xA5	; 165
    53dc:	63 0e       	add	r6, r19
    53de:	71 1c       	adc	r7, r1
	{
		sub_top = MIXERSTART;
		menu_flag = 0;
	}

	while(button != BACK)
    53e0:	80 91 6a 07 	lds	r24, 0x076A
    53e4:	80 37       	cpi	r24, 0x70	; 112
    53e6:	09 f4       	brne	.+2      	; 0x53ea <menu_mixer+0x9c>
    53e8:	d2 c1       	rjmp	.+932    	; 0x578e <menu_mixer+0x440>
	{
		value_ptr = &values[0];

		// Expand sensor bit values into values array
		if ((Config.Channel[i].P1_sensors & (1 << MotorMarker)) != 0)
    53ea:	f1 01       	movw	r30, r2
    53ec:	80 81       	ld	r24, Z
    53ee:	86 ff       	sbrs	r24, 6
    53f0:	03 c0       	rjmp	.+6      	; 0x53f8 <menu_mixer+0xaa>
		{
			values[0] = ON;
    53f2:	91 e0       	ldi	r25, 0x01	; 1
    53f4:	99 83       	std	Y+1, r25	; 0x01
    53f6:	01 c0       	rjmp	.+2      	; 0x53fa <menu_mixer+0xac>
		}
		else
		{
			values[0] = OFF;
    53f8:	19 82       	std	Y+1, r1	; 0x01
		}

		// P1 roll gyro
		if ((Config.Channel[i].P1_sensors & (1 << RollGyro)) != 0)
    53fa:	80 ff       	sbrs	r24, 0
    53fc:	09 c0       	rjmp	.+18     	; 0x5410 <menu_mixer+0xc2>
		{
			if ((Config.Channel[i].P1_scale & (1 << RollScale)) != 0)
    53fe:	f2 01       	movw	r30, r4
    5400:	90 81       	ld	r25, Z
    5402:	90 ff       	sbrs	r25, 0
    5404:	02 c0       	rjmp	.+4      	; 0x540a <menu_mixer+0xbc>
			{	
				values[14] = SCALE;
    5406:	92 e0       	ldi	r25, 0x02	; 2
    5408:	01 c0       	rjmp	.+2      	; 0x540c <menu_mixer+0xbe>
			}
			else
			{
				values[14] = ON;
    540a:	91 e0       	ldi	r25, 0x01	; 1
    540c:	9f 87       	std	Y+15, r25	; 0x0f
    540e:	01 c0       	rjmp	.+2      	; 0x5412 <menu_mixer+0xc4>
			}
		}
		else
		{
			values[14] = OFF;
    5410:	1f 86       	std	Y+15, r1	; 0x0f
		}

		// P2 roll gyro
		if ((Config.Channel[i].P2_sensors & (1 << RollGyro)) != 0)
    5412:	e8 a5       	ldd	r30, Y+40	; 0x28
    5414:	f9 a5       	ldd	r31, Y+41	; 0x29
    5416:	90 81       	ld	r25, Z
    5418:	90 ff       	sbrs	r25, 0
    541a:	09 c0       	rjmp	.+18     	; 0x542e <menu_mixer+0xe0>
		{
			if ((Config.Channel[i].P2_scale & (1 << RollScale)) != 0)
    541c:	f3 01       	movw	r30, r6
    541e:	20 81       	ld	r18, Z
    5420:	20 ff       	sbrs	r18, 0
    5422:	02 c0       	rjmp	.+4      	; 0x5428 <menu_mixer+0xda>
			{	
				values[15] = SCALE;
    5424:	22 e0       	ldi	r18, 0x02	; 2
    5426:	01 c0       	rjmp	.+2      	; 0x542a <menu_mixer+0xdc>
			}
			else
			{
				values[15] = ON;
    5428:	21 e0       	ldi	r18, 0x01	; 1
    542a:	28 8b       	std	Y+16, r18	; 0x10
    542c:	01 c0       	rjmp	.+2      	; 0x5430 <menu_mixer+0xe2>
			}
		}
		else
		{
			values[15] = OFF;
    542e:	18 8a       	std	Y+16, r1	; 0x10
		}

		// P1 pitch gyro
		if ((Config.Channel[i].P1_sensors & (1 << PitchGyro)) != 0)
    5430:	81 ff       	sbrs	r24, 1
    5432:	09 c0       	rjmp	.+18     	; 0x5446 <menu_mixer+0xf8>
		{
			if ((Config.Channel[i].P1_scale & (1 << PitchScale)) != 0)
    5434:	f2 01       	movw	r30, r4
    5436:	20 81       	ld	r18, Z
    5438:	21 ff       	sbrs	r18, 1
    543a:	02 c0       	rjmp	.+4      	; 0x5440 <menu_mixer+0xf2>
			{	
				values[16] = SCALE;
    543c:	22 e0       	ldi	r18, 0x02	; 2
    543e:	01 c0       	rjmp	.+2      	; 0x5442 <menu_mixer+0xf4>
			}
			else
			{
				values[16] = ON;
    5440:	21 e0       	ldi	r18, 0x01	; 1
    5442:	29 8b       	std	Y+17, r18	; 0x11
    5444:	01 c0       	rjmp	.+2      	; 0x5448 <menu_mixer+0xfa>
			}
		}
		else
		{
			values[16] = OFF;
    5446:	19 8a       	std	Y+17, r1	; 0x11
		}

		// P2 pitch gyro
		if ((Config.Channel[i].P2_sensors & (1 << PitchGyro)) != 0)
    5448:	91 ff       	sbrs	r25, 1
    544a:	09 c0       	rjmp	.+18     	; 0x545e <menu_mixer+0x110>
		{
			if ((Config.Channel[i].P2_scale & (1 << PitchScale)) != 0)
    544c:	f3 01       	movw	r30, r6
    544e:	20 81       	ld	r18, Z
    5450:	21 ff       	sbrs	r18, 1
    5452:	02 c0       	rjmp	.+4      	; 0x5458 <menu_mixer+0x10a>
			{	
				values[17] = SCALE;
    5454:	22 e0       	ldi	r18, 0x02	; 2
    5456:	01 c0       	rjmp	.+2      	; 0x545a <menu_mixer+0x10c>
			}
			else
			{
				values[17] = ON;
    5458:	21 e0       	ldi	r18, 0x01	; 1
    545a:	2a 8b       	std	Y+18, r18	; 0x12
    545c:	01 c0       	rjmp	.+2      	; 0x5460 <menu_mixer+0x112>
			}
		}
		else
		{
			values[17] = OFF;
    545e:	1a 8a       	std	Y+18, r1	; 0x12
		}

		// P1 yaw_gyro
		if ((Config.Channel[i].P1_sensors & (1 << YawGyro)) != 0)
    5460:	82 ff       	sbrs	r24, 2
    5462:	09 c0       	rjmp	.+18     	; 0x5476 <menu_mixer+0x128>
		{
			if ((Config.Channel[i].P1_scale & (1 << YawScale)) != 0)
    5464:	f2 01       	movw	r30, r4
    5466:	20 81       	ld	r18, Z
    5468:	22 ff       	sbrs	r18, 2
    546a:	02 c0       	rjmp	.+4      	; 0x5470 <menu_mixer+0x122>
			{	
				values[18] = SCALE;
    546c:	22 e0       	ldi	r18, 0x02	; 2
    546e:	01 c0       	rjmp	.+2      	; 0x5472 <menu_mixer+0x124>
			}
			else
			{
				values[18] = ON;
    5470:	21 e0       	ldi	r18, 0x01	; 1
    5472:	2b 8b       	std	Y+19, r18	; 0x13
    5474:	01 c0       	rjmp	.+2      	; 0x5478 <menu_mixer+0x12a>
			}
		}
		else
		{
			values[18] = OFF;
    5476:	1b 8a       	std	Y+19, r1	; 0x13
		}

		// P2 yaw gyro
		if ((Config.Channel[i].P2_sensors & (1 << YawGyro)) != 0)
    5478:	92 ff       	sbrs	r25, 2
    547a:	09 c0       	rjmp	.+18     	; 0x548e <menu_mixer+0x140>
		{
			if ((Config.Channel[i].P2_scale & (1 << YawScale)) != 0)
    547c:	f3 01       	movw	r30, r6
    547e:	20 81       	ld	r18, Z
    5480:	22 ff       	sbrs	r18, 2
    5482:	02 c0       	rjmp	.+4      	; 0x5488 <menu_mixer+0x13a>
			{	
				values[19] = SCALE;
    5484:	22 e0       	ldi	r18, 0x02	; 2
    5486:	01 c0       	rjmp	.+2      	; 0x548a <menu_mixer+0x13c>
			}
			else
			{
				values[19] = ON;
    5488:	21 e0       	ldi	r18, 0x01	; 1
    548a:	2c 8b       	std	Y+20, r18	; 0x14
    548c:	01 c0       	rjmp	.+2      	; 0x5490 <menu_mixer+0x142>
			}
		}
		else
		{
			values[19] = OFF;
    548e:	1c 8a       	std	Y+20, r1	; 0x14
		}

		// P1 roll acc
		if ((Config.Channel[i].P1_sensors & (1 << RollAcc)) != 0)
    5490:	83 ff       	sbrs	r24, 3
    5492:	09 c0       	rjmp	.+18     	; 0x54a6 <menu_mixer+0x158>
		{
			if ((Config.Channel[i].P1_scale & (1 << AccRollScale)) != 0)
    5494:	f2 01       	movw	r30, r4
    5496:	20 81       	ld	r18, Z
    5498:	23 ff       	sbrs	r18, 3
    549a:	02 c0       	rjmp	.+4      	; 0x54a0 <menu_mixer+0x152>
			{	
				values[20] = SCALE;
    549c:	22 e0       	ldi	r18, 0x02	; 2
    549e:	01 c0       	rjmp	.+2      	; 0x54a2 <menu_mixer+0x154>
			}
			else
			{
				values[20] = ON;
    54a0:	21 e0       	ldi	r18, 0x01	; 1
    54a2:	2d 8b       	std	Y+21, r18	; 0x15
    54a4:	01 c0       	rjmp	.+2      	; 0x54a8 <menu_mixer+0x15a>
			}
		}
		else
		{
			values[20] = OFF;
    54a6:	1d 8a       	std	Y+21, r1	; 0x15
		}

		// P2 roll acc
		if ((Config.Channel[i].P2_sensors & (1 << RollAcc)) != 0)
    54a8:	93 ff       	sbrs	r25, 3
    54aa:	09 c0       	rjmp	.+18     	; 0x54be <menu_mixer+0x170>
		{
			if ((Config.Channel[i].P2_scale & (1 << AccRollScale)) != 0)
    54ac:	f3 01       	movw	r30, r6
    54ae:	20 81       	ld	r18, Z
    54b0:	23 ff       	sbrs	r18, 3
    54b2:	02 c0       	rjmp	.+4      	; 0x54b8 <menu_mixer+0x16a>
			{	
				values[21] = SCALE;
    54b4:	22 e0       	ldi	r18, 0x02	; 2
    54b6:	01 c0       	rjmp	.+2      	; 0x54ba <menu_mixer+0x16c>
			}
			else
			{
				values[21] = ON;
    54b8:	21 e0       	ldi	r18, 0x01	; 1
    54ba:	2e 8b       	std	Y+22, r18	; 0x16
    54bc:	01 c0       	rjmp	.+2      	; 0x54c0 <menu_mixer+0x172>
			}
		}
		else
		{
			values[21] = OFF;
    54be:	1e 8a       	std	Y+22, r1	; 0x16
		}

		// P1 pitch acc
		if ((Config.Channel[i].P1_sensors & (1 << PitchAcc)) != 0)
    54c0:	84 ff       	sbrs	r24, 4
    54c2:	09 c0       	rjmp	.+18     	; 0x54d6 <menu_mixer+0x188>
		{
			if ((Config.Channel[i].P1_scale & (1 << AccPitchScale)) != 0)
    54c4:	f2 01       	movw	r30, r4
    54c6:	20 81       	ld	r18, Z
    54c8:	24 ff       	sbrs	r18, 4
    54ca:	02 c0       	rjmp	.+4      	; 0x54d0 <menu_mixer+0x182>
			{	
				values[22] = SCALE;
    54cc:	22 e0       	ldi	r18, 0x02	; 2
    54ce:	01 c0       	rjmp	.+2      	; 0x54d2 <menu_mixer+0x184>
			}
			else
			{
				values[22] = ON;
    54d0:	21 e0       	ldi	r18, 0x01	; 1
    54d2:	2f 8b       	std	Y+23, r18	; 0x17
    54d4:	01 c0       	rjmp	.+2      	; 0x54d8 <menu_mixer+0x18a>
			}
		}
		else
		{
			values[22] = OFF;
    54d6:	1f 8a       	std	Y+23, r1	; 0x17
		}

		// P2 pitch acc
		if ((Config.Channel[i].P2_sensors & (1 << PitchAcc)) != 0)
    54d8:	94 ff       	sbrs	r25, 4
    54da:	09 c0       	rjmp	.+18     	; 0x54ee <menu_mixer+0x1a0>
		{
			if ((Config.Channel[i].P2_scale & (1 << AccPitchScale)) != 0)
    54dc:	f3 01       	movw	r30, r6
    54de:	20 81       	ld	r18, Z
    54e0:	24 ff       	sbrs	r18, 4
    54e2:	02 c0       	rjmp	.+4      	; 0x54e8 <menu_mixer+0x19a>
			{	
				values[23] = SCALE;
    54e4:	22 e0       	ldi	r18, 0x02	; 2
    54e6:	01 c0       	rjmp	.+2      	; 0x54ea <menu_mixer+0x19c>
			}
			else
			{
				values[23] = ON;
    54e8:	21 e0       	ldi	r18, 0x01	; 1
    54ea:	28 8f       	std	Y+24, r18	; 0x18
    54ec:	01 c0       	rjmp	.+2      	; 0x54f0 <menu_mixer+0x1a2>
			}
		}
		else
		{
			values[23] = OFF;
    54ee:	18 8e       	std	Y+24, r1	; 0x18
		}

		// P1 Z delta acc
		if ((Config.Channel[i].P1_sensors & (1 << ZDeltaAcc)) != 0)
    54f0:	85 ff       	sbrs	r24, 5
    54f2:	09 c0       	rjmp	.+18     	; 0x5506 <menu_mixer+0x1b8>
		{
			if ((Config.Channel[i].P1_scale & (1 << AccZScale)) != 0)
    54f4:	f2 01       	movw	r30, r4
    54f6:	80 81       	ld	r24, Z
    54f8:	85 ff       	sbrs	r24, 5
    54fa:	02 c0       	rjmp	.+4      	; 0x5500 <menu_mixer+0x1b2>
			{	
				values[24] = SCALE;
    54fc:	82 e0       	ldi	r24, 0x02	; 2
    54fe:	01 c0       	rjmp	.+2      	; 0x5502 <menu_mixer+0x1b4>
			}
			else
			{
				values[24] = ON;
    5500:	81 e0       	ldi	r24, 0x01	; 1
    5502:	89 8f       	std	Y+25, r24	; 0x19
    5504:	01 c0       	rjmp	.+2      	; 0x5508 <menu_mixer+0x1ba>
			}
		}
		else
		{
			values[24] = OFF;
    5506:	19 8e       	std	Y+25, r1	; 0x19
		}

		// P2 Z delta acc
		if ((Config.Channel[i].P2_sensors & (1 << ZDeltaAcc)) != 0)
    5508:	95 ff       	sbrs	r25, 5
    550a:	09 c0       	rjmp	.+18     	; 0x551e <menu_mixer+0x1d0>
		{
			if ((Config.Channel[i].P2_scale & (1 << AccZScale)) != 0)
    550c:	f3 01       	movw	r30, r6
    550e:	80 81       	ld	r24, Z
    5510:	85 ff       	sbrs	r24, 5
    5512:	02 c0       	rjmp	.+4      	; 0x5518 <menu_mixer+0x1ca>
			{	
				values[25] = SCALE;
    5514:	82 e0       	ldi	r24, 0x02	; 2
    5516:	01 c0       	rjmp	.+2      	; 0x551a <menu_mixer+0x1cc>
			}
			else
			{
				values[25] = ON;
    5518:	81 e0       	ldi	r24, 0x01	; 1
    551a:	8a 8f       	std	Y+26, r24	; 0x1a
    551c:	01 c0       	rjmp	.+2      	; 0x5520 <menu_mixer+0x1d2>
			}
		}
		else
		{
			values[25] = OFF;
    551e:	1a 8e       	std	Y+26, r1	; 0x1a
		}

		// Assemble remaining byte data for P1n_position to P2_rudder_volume into array
		memcpy(&values[1],&Config.Channel[i].P1_offset, 13);
    5520:	8d e0       	ldi	r24, 0x0D	; 13
    5522:	ec a5       	ldd	r30, Y+44	; 0x2c
    5524:	fd a5       	ldd	r31, Y+45	; 0x2d
    5526:	de 01       	movw	r26, r28
    5528:	12 96       	adiw	r26, 0x02	; 2
    552a:	01 90       	ld	r0, Z+
    552c:	0d 92       	st	X+, r0
    552e:	8a 95       	dec	r24
    5530:	e1 f7       	brne	.-8      	; 0x552a <menu_mixer+0x1dc>
		// Assemble remaining byte data for P1_source_a to P2_source_b_volume into array
		memcpy(&values[26],&Config.Channel[i].P1_source_a, 8);
    5532:	88 e0       	ldi	r24, 0x08	; 8
    5534:	ee a5       	ldd	r30, Y+46	; 0x2e
    5536:	ff a5       	ldd	r31, Y+47	; 0x2f
    5538:	de 01       	movw	r26, r28
    553a:	5b 96       	adiw	r26, 0x1b	; 27
    553c:	01 90       	ld	r0, Z+
    553e:	0d 92       	st	X+, r0
    5540:	8a 95       	dec	r24
    5542:	e1 f7       	brne	.-8      	; 0x553c <menu_mixer+0x1ee>

		// Print menu
		print_menu_items(sub_top, MIXERSTART, value_ptr, 1, (const unsigned char*)mixer_menu_ranges, 0, MIXOFFSET, (const unsigned char*)MixerMenuText, cursor);
    5544:	80 90 00 05 	lds	r8, 0x0500
    5548:	80 e7       	ldi	r24, 0x70	; 112
    554a:	a8 2e       	mov	r10, r24
    554c:	88 e1       	ldi	r24, 0x18	; 24
    554e:	b8 2e       	mov	r11, r24
    5550:	99 e5       	ldi	r25, 0x59	; 89
    5552:	c9 2e       	mov	r12, r25
    5554:	e1 2c       	mov	r14, r1
    5556:	06 ec       	ldi	r16, 0xC6	; 198
    5558:	17 e1       	ldi	r17, 0x17	; 23
    555a:	21 e0       	ldi	r18, 0x01	; 1
    555c:	ae 01       	movw	r20, r28
    555e:	4f 5f       	subi	r20, 0xFF	; 255
    5560:	5f 4f       	sbci	r21, 0xFF	; 255
    5562:	6e eb       	ldi	r22, 0xBE	; 190
    5564:	80 91 22 05 	lds	r24, 0x0522
    5568:	0e 94 da 27 	call	0x4fb4	; 0x4fb4 <print_menu_items>

		// Handle menu changes
		update_menu(MIXERITEMS, MIXERSTART, 0, button, &cursor, &sub_top, &menu_temp);
    556c:	2f e1       	ldi	r18, 0x1F	; 31
    556e:	c2 2e       	mov	r12, r18
    5570:	25 e0       	ldi	r18, 0x05	; 5
    5572:	d2 2e       	mov	r13, r18
    5574:	32 e2       	ldi	r19, 0x22	; 34
    5576:	e3 2e       	mov	r14, r19
    5578:	35 e0       	ldi	r19, 0x05	; 5
    557a:	f3 2e       	mov	r15, r19
    557c:	00 e0       	ldi	r16, 0x00	; 0
    557e:	15 e0       	ldi	r17, 0x05	; 5
    5580:	20 91 6a 07 	lds	r18, 0x076A
    5584:	40 e0       	ldi	r20, 0x00	; 0
    5586:	6e eb       	ldi	r22, 0xBE	; 190
    5588:	82 e2       	ldi	r24, 0x22	; 34
    558a:	0e 94 32 27 	call	0x4e64	; 0x4e64 <update_menu>
		range = get_menu_range ((const unsigned char*)mixer_menu_ranges, menu_temp - MIXERSTART);
    558e:	60 91 1f 05 	lds	r22, 0x051F
    5592:	6e 5b       	subi	r22, 0xBE	; 190
    5594:	86 ec       	ldi	r24, 0xC6	; 198
    5596:	97 e1       	ldi	r25, 0x17	; 23
    5598:	0e 94 40 25 	call	0x4a80	; 0x4a80 <get_menu_range>
    559c:	2b a3       	std	Y+35, r18	; 0x23
    559e:	3c a3       	std	Y+36, r19	; 0x24
    55a0:	4d a3       	std	Y+37, r20	; 0x25
    55a2:	5e a3       	std	Y+38, r21	; 0x26
    55a4:	6f a3       	std	Y+39, r22	; 0x27

		if (button == ENTER)
    55a6:	80 91 6a 07 	lds	r24, 0x076A
    55aa:	80 3e       	cpi	r24, 0xE0	; 224
    55ac:	f9 f4       	brne	.+62     	; 0x55ec <menu_mixer+0x29e>
		{
			text_link = pgm_read_byte(&MixerMenuText[menu_temp - MIXERSTART]);
    55ae:	80 91 1f 05 	lds	r24, 0x051F
    55b2:	e8 2f       	mov	r30, r24
    55b4:	f0 e0       	ldi	r31, 0x00	; 0
    55b6:	ee 54       	subi	r30, 0x4E	; 78
    55b8:	f8 4e       	sbci	r31, 0xE8	; 232
    55ba:	a4 90       	lpm	r10, Z
			do_menu_item(menu_temp, value_ptr + (menu_temp - MIXERSTART), 1, range, 0, text_link, false, 0);
    55bc:	68 2f       	mov	r22, r24
    55be:	70 e0       	ldi	r23, 0x00	; 0
    55c0:	6e 5b       	subi	r22, 0xBE	; 190
    55c2:	71 09       	sbc	r23, r1
    55c4:	21 e0       	ldi	r18, 0x01	; 1
    55c6:	30 e0       	ldi	r19, 0x00	; 0
    55c8:	2c 0f       	add	r18, r28
    55ca:	3d 1f       	adc	r19, r29
    55cc:	62 0f       	add	r22, r18
    55ce:	73 1f       	adc	r23, r19
    55d0:	1f 92       	push	r1
    55d2:	1f 92       	push	r1
    55d4:	81 2c       	mov	r8, r1
    55d6:	c1 2c       	mov	r12, r1
    55d8:	eb a0       	ldd	r14, Y+35	; 0x23
    55da:	fc a0       	ldd	r15, Y+36	; 0x24
    55dc:	0d a1       	ldd	r16, Y+37	; 0x25
    55de:	1e a1       	ldd	r17, Y+38	; 0x26
    55e0:	2f a1       	ldd	r18, Y+39	; 0x27
    55e2:	41 e0       	ldi	r20, 0x01	; 1
    55e4:	0e 94 c5 25 	call	0x4b8a	; 0x4b8a <do_menu_item>
    55e8:	0f 90       	pop	r0
    55ea:	0f 90       	pop	r0
		}

		// Save modified byte data for P1 offset to P2_rudder_volume back to Config
		memcpy(&Config.Channel[i].P1_offset,&values[1], 13);
    55ec:	8d e0       	ldi	r24, 0x0D	; 13
    55ee:	fe 01       	movw	r30, r28
    55f0:	32 96       	adiw	r30, 0x02	; 2
    55f2:	ac a5       	ldd	r26, Y+44	; 0x2c
    55f4:	bd a5       	ldd	r27, Y+45	; 0x2d
    55f6:	01 90       	ld	r0, Z+
    55f8:	0d 92       	st	X+, r0
    55fa:	8a 95       	dec	r24
    55fc:	e1 f7       	brne	.-8      	; 0x55f6 <menu_mixer+0x2a8>
		// Save modified byte data for P1_source_a to P2_source_b_volume back to Config
		memcpy(&Config.Channel[i].P1_source_a,&values[26], 8);
    55fe:	88 e0       	ldi	r24, 0x08	; 8
    5600:	fe 01       	movw	r30, r28
    5602:	7b 96       	adiw	r30, 0x1b	; 27
    5604:	ae a5       	ldd	r26, Y+46	; 0x2e
    5606:	bf a5       	ldd	r27, Y+47	; 0x2f
    5608:	01 90       	ld	r0, Z+
    560a:	0d 92       	st	X+, r0
    560c:	8a 95       	dec	r24
    560e:	e1 f7       	brne	.-8      	; 0x5608 <menu_mixer+0x2ba>

		// Clear flags before reconstruction
		Config.Channel[i].P1_sensors = 0;
    5610:	f1 01       	movw	r30, r2
    5612:	10 82       	st	Z, r1
		Config.Channel[i].P2_sensors = 0;
    5614:	e8 a5       	ldd	r30, Y+40	; 0x28
    5616:	f9 a5       	ldd	r31, Y+41	; 0x29
    5618:	10 82       	st	Z, r1
		Config.Channel[i].P1_scale = 0;
    561a:	f2 01       	movw	r30, r4
    561c:	10 82       	st	Z, r1
		Config.Channel[i].P2_scale = 0;
    561e:	f3 01       	movw	r30, r6
    5620:	10 82       	st	Z, r1

		// Recompress byte data for servos back into bit values for the sensors byte
		if (values[0] == ON)
    5622:	89 81       	ldd	r24, Y+1	; 0x01
    5624:	81 30       	cpi	r24, 0x01	; 1
    5626:	29 f4       	brne	.+10     	; 0x5632 <menu_mixer+0x2e4>
		{
			Config.Channel[i].P1_sensors |= (1 << MotorMarker);
    5628:	80 e0       	ldi	r24, 0x00	; 0
    562a:	80 64       	ori	r24, 0x40	; 64
    562c:	f1 01       	movw	r30, r2
    562e:	80 83       	st	Z, r24
    5630:	02 c0       	rjmp	.+4      	; 0x5636 <menu_mixer+0x2e8>
		}
		else
		{
			Config.Channel[i].P1_sensors &= ~(1 << MotorMarker);	
    5632:	f1 01       	movw	r30, r2
    5634:	10 82       	st	Z, r1
		}

		// P1 roll gyro
		switch (values[14])
    5636:	8f 85       	ldd	r24, Y+15	; 0x0f
    5638:	81 30       	cpi	r24, 0x01	; 1
    563a:	31 f0       	breq	.+12     	; 0x5648 <menu_mixer+0x2fa>
    563c:	82 30       	cpi	r24, 0x02	; 2
    563e:	41 f4       	brne	.+16     	; 0x5650 <menu_mixer+0x302>
		{
			case OFF:
				break;
			case SCALE:
				Config.Channel[i].P1_scale |= (1 << RollScale);
    5640:	f2 01       	movw	r30, r4
    5642:	80 81       	ld	r24, Z
    5644:	81 60       	ori	r24, 0x01	; 1
    5646:	80 83       	st	Z, r24
			case ON:
				Config.Channel[i].P1_sensors |= (1 << RollGyro);
    5648:	f1 01       	movw	r30, r2
    564a:	80 81       	ld	r24, Z
    564c:	81 60       	ori	r24, 0x01	; 1
    564e:	80 83       	st	Z, r24
				break;
		}
		// P2 roll gyro
		switch (values[15])
    5650:	88 89       	ldd	r24, Y+16	; 0x10
    5652:	81 30       	cpi	r24, 0x01	; 1
    5654:	31 f0       	breq	.+12     	; 0x5662 <menu_mixer+0x314>
    5656:	82 30       	cpi	r24, 0x02	; 2
    5658:	49 f4       	brne	.+18     	; 0x566c <menu_mixer+0x31e>
		{
			case OFF:
				break;
			case SCALE:
				Config.Channel[i].P2_scale |= (1 << RollScale);
    565a:	f3 01       	movw	r30, r6
    565c:	80 81       	ld	r24, Z
    565e:	81 60       	ori	r24, 0x01	; 1
    5660:	80 83       	st	Z, r24
			case ON:
				Config.Channel[i].P2_sensors |= (1 << RollGyro);
    5662:	e8 a5       	ldd	r30, Y+40	; 0x28
    5664:	f9 a5       	ldd	r31, Y+41	; 0x29
    5666:	80 81       	ld	r24, Z
    5668:	81 60       	ori	r24, 0x01	; 1
    566a:	80 83       	st	Z, r24
				break;
		}
		// P1 pitch gyro
		switch (values[16])
    566c:	89 89       	ldd	r24, Y+17	; 0x11
    566e:	81 30       	cpi	r24, 0x01	; 1
    5670:	31 f0       	breq	.+12     	; 0x567e <menu_mixer+0x330>
    5672:	82 30       	cpi	r24, 0x02	; 2
    5674:	41 f4       	brne	.+16     	; 0x5686 <menu_mixer+0x338>
		{
			case OFF:
				break;
			case SCALE:
				Config.Channel[i].P1_scale |= (1 << PitchScale);
    5676:	f2 01       	movw	r30, r4
    5678:	80 81       	ld	r24, Z
    567a:	82 60       	ori	r24, 0x02	; 2
    567c:	80 83       	st	Z, r24
			case ON:
				Config.Channel[i].P1_sensors |= (1 << PitchGyro);
    567e:	f1 01       	movw	r30, r2
    5680:	80 81       	ld	r24, Z
    5682:	82 60       	ori	r24, 0x02	; 2
    5684:	80 83       	st	Z, r24
				break;
		}
		// P2 pitch gyro
		switch (values[17])
    5686:	8a 89       	ldd	r24, Y+18	; 0x12
    5688:	81 30       	cpi	r24, 0x01	; 1
    568a:	31 f0       	breq	.+12     	; 0x5698 <menu_mixer+0x34a>
    568c:	82 30       	cpi	r24, 0x02	; 2
    568e:	49 f4       	brne	.+18     	; 0x56a2 <menu_mixer+0x354>
		{
			case OFF:
				break;
			case SCALE:
				Config.Channel[i].P2_scale |= (1 << PitchScale);
    5690:	f3 01       	movw	r30, r6
    5692:	80 81       	ld	r24, Z
    5694:	82 60       	ori	r24, 0x02	; 2
    5696:	80 83       	st	Z, r24
			case ON:
				Config.Channel[i].P2_sensors |= (1 << PitchGyro);
    5698:	e8 a5       	ldd	r30, Y+40	; 0x28
    569a:	f9 a5       	ldd	r31, Y+41	; 0x29
    569c:	80 81       	ld	r24, Z
    569e:	82 60       	ori	r24, 0x02	; 2
    56a0:	80 83       	st	Z, r24
				break;
		}
		// P1 yaw gyro
		switch (values[18])
    56a2:	8b 89       	ldd	r24, Y+19	; 0x13
    56a4:	81 30       	cpi	r24, 0x01	; 1
    56a6:	31 f0       	breq	.+12     	; 0x56b4 <menu_mixer+0x366>
    56a8:	82 30       	cpi	r24, 0x02	; 2
    56aa:	41 f4       	brne	.+16     	; 0x56bc <menu_mixer+0x36e>
		{
			case OFF:
				break;
			case SCALE:
				Config.Channel[i].P1_scale |= (1 << YawScale);
    56ac:	f2 01       	movw	r30, r4
    56ae:	80 81       	ld	r24, Z
    56b0:	84 60       	ori	r24, 0x04	; 4
    56b2:	80 83       	st	Z, r24
			case ON:
				Config.Channel[i].P1_sensors |= (1 << YawGyro);
    56b4:	f1 01       	movw	r30, r2
    56b6:	80 81       	ld	r24, Z
    56b8:	84 60       	ori	r24, 0x04	; 4
    56ba:	80 83       	st	Z, r24
				break;
		}
		// P2 yaw gyro
		switch (values[19])
    56bc:	8c 89       	ldd	r24, Y+20	; 0x14
    56be:	81 30       	cpi	r24, 0x01	; 1
    56c0:	31 f0       	breq	.+12     	; 0x56ce <menu_mixer+0x380>
    56c2:	82 30       	cpi	r24, 0x02	; 2
    56c4:	49 f4       	brne	.+18     	; 0x56d8 <menu_mixer+0x38a>
		{
			case OFF:
				break;
			case SCALE:
				Config.Channel[i].P2_scale |= (1 << YawScale);
    56c6:	f3 01       	movw	r30, r6
    56c8:	80 81       	ld	r24, Z
    56ca:	84 60       	ori	r24, 0x04	; 4
    56cc:	80 83       	st	Z, r24
			case ON:
				Config.Channel[i].P2_sensors |= (1 << YawGyro);
    56ce:	e8 a5       	ldd	r30, Y+40	; 0x28
    56d0:	f9 a5       	ldd	r31, Y+41	; 0x29
    56d2:	80 81       	ld	r24, Z
    56d4:	84 60       	ori	r24, 0x04	; 4
    56d6:	80 83       	st	Z, r24
				break;
		}
		// P1 roll acc
		switch (values[20])
    56d8:	8d 89       	ldd	r24, Y+21	; 0x15
    56da:	81 30       	cpi	r24, 0x01	; 1
    56dc:	31 f0       	breq	.+12     	; 0x56ea <menu_mixer+0x39c>
    56de:	82 30       	cpi	r24, 0x02	; 2
    56e0:	41 f4       	brne	.+16     	; 0x56f2 <menu_mixer+0x3a4>
		{
			case OFF:
				break;
			case SCALE:
				Config.Channel[i].P1_scale |= (1 << AccRollScale);
    56e2:	f2 01       	movw	r30, r4
    56e4:	80 81       	ld	r24, Z
    56e6:	88 60       	ori	r24, 0x08	; 8
    56e8:	80 83       	st	Z, r24
			case ON:
				Config.Channel[i].P1_sensors |= (1 << RollAcc);
    56ea:	f1 01       	movw	r30, r2
    56ec:	80 81       	ld	r24, Z
    56ee:	88 60       	ori	r24, 0x08	; 8
    56f0:	80 83       	st	Z, r24
				break;
		}
		// P2 roll acc
		switch (values[21])
    56f2:	8e 89       	ldd	r24, Y+22	; 0x16
    56f4:	81 30       	cpi	r24, 0x01	; 1
    56f6:	31 f0       	breq	.+12     	; 0x5704 <menu_mixer+0x3b6>
    56f8:	82 30       	cpi	r24, 0x02	; 2
    56fa:	49 f4       	brne	.+18     	; 0x570e <menu_mixer+0x3c0>
		{
			case OFF:
				break;
			case SCALE:
				Config.Channel[i].P2_scale |= (1 << AccRollScale);
    56fc:	f3 01       	movw	r30, r6
    56fe:	80 81       	ld	r24, Z
    5700:	88 60       	ori	r24, 0x08	; 8
    5702:	80 83       	st	Z, r24
			case ON:
				Config.Channel[i].P2_sensors |= (1 << RollAcc);
    5704:	e8 a5       	ldd	r30, Y+40	; 0x28
    5706:	f9 a5       	ldd	r31, Y+41	; 0x29
    5708:	80 81       	ld	r24, Z
    570a:	88 60       	ori	r24, 0x08	; 8
    570c:	80 83       	st	Z, r24
				break;
		}
		// P1 pitch acc
		switch (values[22])
    570e:	8f 89       	ldd	r24, Y+23	; 0x17
    5710:	81 30       	cpi	r24, 0x01	; 1
    5712:	31 f0       	breq	.+12     	; 0x5720 <menu_mixer+0x3d2>
    5714:	82 30       	cpi	r24, 0x02	; 2
    5716:	41 f4       	brne	.+16     	; 0x5728 <menu_mixer+0x3da>
		{
			case OFF:
				break;
			case SCALE:
				Config.Channel[i].P1_scale |= (1 << AccPitchScale);
    5718:	f2 01       	movw	r30, r4
    571a:	80 81       	ld	r24, Z
    571c:	80 61       	ori	r24, 0x10	; 16
    571e:	80 83       	st	Z, r24
			case ON:
				Config.Channel[i].P1_sensors |= (1 << PitchAcc);
    5720:	f1 01       	movw	r30, r2
    5722:	80 81       	ld	r24, Z
    5724:	80 61       	ori	r24, 0x10	; 16
    5726:	80 83       	st	Z, r24
				break;
		}

		// P2 pitch acc
		switch (values[23])
    5728:	88 8d       	ldd	r24, Y+24	; 0x18
    572a:	81 30       	cpi	r24, 0x01	; 1
    572c:	31 f0       	breq	.+12     	; 0x573a <menu_mixer+0x3ec>
    572e:	82 30       	cpi	r24, 0x02	; 2
    5730:	49 f4       	brne	.+18     	; 0x5744 <menu_mixer+0x3f6>
		{
			case OFF:
				break;
			case SCALE:
				Config.Channel[i].P2_scale |= (1 << AccPitchScale);
    5732:	f3 01       	movw	r30, r6
    5734:	80 81       	ld	r24, Z
    5736:	80 61       	ori	r24, 0x10	; 16
    5738:	80 83       	st	Z, r24
			case ON:
				Config.Channel[i].P2_sensors |= (1 << PitchAcc);
    573a:	e8 a5       	ldd	r30, Y+40	; 0x28
    573c:	f9 a5       	ldd	r31, Y+41	; 0x29
    573e:	80 81       	ld	r24, Z
    5740:	80 61       	ori	r24, 0x10	; 16
    5742:	80 83       	st	Z, r24
				break;
		}
		// P1 Z delta acc
		switch (values[24])
    5744:	89 8d       	ldd	r24, Y+25	; 0x19
    5746:	81 30       	cpi	r24, 0x01	; 1
    5748:	31 f0       	breq	.+12     	; 0x5756 <menu_mixer+0x408>
    574a:	82 30       	cpi	r24, 0x02	; 2
    574c:	41 f4       	brne	.+16     	; 0x575e <menu_mixer+0x410>
		{
			case OFF:
				break;
			case SCALE:
				Config.Channel[i].P1_scale |= (1 << AccZScale);
    574e:	f2 01       	movw	r30, r4
    5750:	80 81       	ld	r24, Z
    5752:	80 62       	ori	r24, 0x20	; 32
    5754:	80 83       	st	Z, r24
			case ON:
				Config.Channel[i].P1_sensors |= (1 << ZDeltaAcc);
    5756:	f1 01       	movw	r30, r2
    5758:	80 81       	ld	r24, Z
    575a:	80 62       	ori	r24, 0x20	; 32
    575c:	80 83       	st	Z, r24
				break;
		}
		// P2 Z delta acc
		switch (values[25])
    575e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    5760:	81 30       	cpi	r24, 0x01	; 1
    5762:	31 f0       	breq	.+12     	; 0x5770 <menu_mixer+0x422>
    5764:	82 30       	cpi	r24, 0x02	; 2
    5766:	49 f4       	brne	.+18     	; 0x577a <menu_mixer+0x42c>
		{
			case OFF:
				break;
			case SCALE:
				Config.Channel[i].P2_scale |= (1 << AccZScale);
    5768:	f3 01       	movw	r30, r6
    576a:	80 81       	ld	r24, Z
    576c:	80 62       	ori	r24, 0x20	; 32
    576e:	80 83       	st	Z, r24
			case ON:
				Config.Channel[i].P2_sensors |= (1 << ZDeltaAcc);
    5770:	e8 a5       	ldd	r30, Y+40	; 0x28
    5772:	f9 a5       	ldd	r31, Y+41	; 0x29
    5774:	80 81       	ld	r24, Z
    5776:	80 62       	ori	r24, 0x20	; 32
    5778:	80 83       	st	Z, r24
				break;
		}

		// Save and exit
		if (button == ENTER)
    577a:	80 91 6a 07 	lds	r24, 0x076A
    577e:	80 3e       	cpi	r24, 0xE0	; 224
    5780:	09 f0       	breq	.+2      	; 0x5784 <menu_mixer+0x436>
    5782:	2e ce       	rjmp	.-932    	; 0x53e0 <menu_mixer+0x92>
		{
			UpdateLimits();			 // Update travel limits based on percentages
    5784:	0e 94 5b 2d 	call	0x5ab6	; 0x5ab6 <UpdateLimits>
			Save_Config_to_EEPROM(); // Save value and return
    5788:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <Save_Config_to_EEPROM>
    578c:	1e ce       	rjmp	.-964    	; 0x53ca <menu_mixer+0x7c>
		}

	} // while(button != BACK)

}
    578e:	af 96       	adiw	r28, 0x2f	; 47
    5790:	0f b6       	in	r0, 0x3f	; 63
    5792:	f8 94       	cli
    5794:	de bf       	out	0x3e, r29	; 62
    5796:	0f be       	out	0x3f, r0	; 63
    5798:	cd bf       	out	0x3d, r28	; 61
    579a:	df 91       	pop	r29
    579c:	cf 91       	pop	r28
    579e:	1f 91       	pop	r17
    57a0:	0f 91       	pop	r16
    57a2:	ff 90       	pop	r15
    57a4:	ef 90       	pop	r14
    57a6:	df 90       	pop	r13
    57a8:	cf 90       	pop	r12
    57aa:	bf 90       	pop	r11
    57ac:	af 90       	pop	r10
    57ae:	8f 90       	pop	r8
    57b0:	7f 90       	pop	r7
    57b2:	6f 90       	pop	r6
    57b4:	5f 90       	pop	r5
    57b6:	4f 90       	pop	r4
    57b8:	3f 90       	pop	r3
    57ba:	2f 90       	pop	r2
    57bc:	08 95       	ret

000057be <menu_servo_setup>:
//************************************************************
// Main menu-specific setup
//************************************************************

void menu_servo_setup(uint8_t section)
{
    57be:	a9 e0       	ldi	r26, 0x09	; 9
    57c0:	b0 e0       	ldi	r27, 0x00	; 0
    57c2:	e5 ee       	ldi	r30, 0xE5	; 229
    57c4:	fb e2       	ldi	r31, 0x2B	; 43
    57c6:	0c 94 93 3e 	jmp	0x7d26	; 0x7d26 <__prologue_saves__>
    57ca:	8f 83       	std	Y+7, r24	; 0x07
	uint8_t i = 0;
	bool	servo_enable = false;
	bool	zero_setting = false;

	// If submenu item has changed, reset submenu positions
	if (menu_flag)
    57cc:	80 91 6c 07 	lds	r24, 0x076C
    57d0:	88 23       	and	r24, r24
    57d2:	29 f0       	breq	.+10     	; 0x57de <menu_servo_setup+0x20>
	{
		sub_top = SERVOSTART;
    57d4:	86 ee       	ldi	r24, 0xE6	; 230
    57d6:	80 93 22 05 	sts	0x0522, r24
		menu_flag = 0;
    57da:	10 92 6c 07 	sts	0x076C, r1
			}

			// Do not allow servo enable for throttle if in CPPM mode
			if ((Config.Channel[menu_temp - SERVOSTART].P1_source_a == THROTTLE) && (Config.RxMode == CPPM_MODE))
			{
				servo_enable = false;
    57de:	1e 82       	std	Y+6, r1	; 0x06
    57e0:	57 ef       	ldi	r21, 0xF7	; 247
    57e2:	65 2e       	mov	r6, r21
    57e4:	56 e0       	ldi	r21, 0x06	; 6
    57e6:	75 2e       	mov	r7, r21
					break;
			}
		}

		// Print menu
		print_menu_items(sub_top, SERVOSTART, value_ptr, 1, (const unsigned char*)servo_menu_ranges[section - 1], 1, SERVOOFFSET, (const unsigned char*)ServoMenuText[section - 1], cursor);
    57e8:	8f 81       	ldd	r24, Y+7	; 0x07
    57ea:	28 2e       	mov	r2, r24
    57ec:	31 2c       	mov	r3, r1
    57ee:	91 e0       	ldi	r25, 0x01	; 1
    57f0:	29 1a       	sub	r2, r25
    57f2:	31 08       	sbc	r3, r1
    57f4:	85 e0       	ldi	r24, 0x05	; 5
    57f6:	82 9d       	mul	r24, r2
    57f8:	20 01       	movw	r4, r0
    57fa:	83 9d       	mul	r24, r3
    57fc:	50 0c       	add	r5, r0
    57fe:	11 24       	eor	r1, r1
    5800:	c2 01       	movw	r24, r4
    5802:	8e 56       	subi	r24, 0x6E	; 110
    5804:	97 4e       	sbci	r25, 0xE7	; 231
    5806:	2c 01       	movw	r4, r24
    5808:	63 e0       	ldi	r22, 0x03	; 3
    580a:	22 0c       	add	r2, r2
    580c:	33 1c       	adc	r3, r3
    580e:	6a 95       	dec	r22
    5810:	e1 f7       	brne	.-8      	; 0x580a <menu_servo_setup+0x4c>
    5812:	c1 01       	movw	r24, r2
    5814:	8f 55       	subi	r24, 0x5F	; 95
    5816:	97 4e       	sbci	r25, 0xE7	; 231
    5818:	99 87       	std	Y+9, r25	; 0x09
    581a:	88 87       	std	Y+8, r24	; 0x08
		menu_flag = 0;
	}

	// Get menu offsets
	// 1 = Reverse, 2 = Min, 3 = Max
	while(button != BACK)
    581c:	80 91 6a 07 	lds	r24, 0x076A
    5820:	80 37       	cpi	r24, 0x70	; 112
    5822:	09 f4       	brne	.+2      	; 0x5826 <menu_servo_setup+0x68>
    5824:	8b c0       	rjmp	.+278    	; 0x593c <menu_servo_setup+0x17e>
    5826:	88 e0       	ldi	r24, 0x08	; 8
    5828:	91 2c       	mov	r9, r1
	{
		// Load values from eeprom
		for (i = 0; i < SERVOITEMS; i++)
		{
			switch(section)
    582a:	9f 81       	ldd	r25, Y+7	; 0x07
    582c:	92 30       	cpi	r25, 0x02	; 2
    582e:	59 f0       	breq	.+22     	; 0x5846 <menu_servo_setup+0x88>
    5830:	93 30       	cpi	r25, 0x03	; 3
    5832:	89 f4       	brne	.+34     	; 0x5856 <menu_servo_setup+0x98>
					zero_setting = true;
					break;
				case 3:
					value_ptr = &Config.max_travel[0];
					servo_enable = true;
					zero_setting = true;
    5834:	91 e0       	ldi	r25, 0x01	; 1
    5836:	9e 83       	std	Y+6, r25	; 0x06
					servo_enable = true;
					zero_setting = true;
					break;
				case 3:
					value_ptr = &Config.max_travel[0];
					servo_enable = true;
    5838:	99 24       	eor	r9, r9
    583a:	93 94       	inc	r9
					value_ptr = &Config.min_travel[0];
					servo_enable = true;
					zero_setting = true;
					break;
				case 3:
					value_ptr = &Config.max_travel[0];
    583c:	37 e0       	ldi	r19, 0x07	; 7
    583e:	63 2e       	mov	r6, r19
    5840:	37 e0       	ldi	r19, 0x07	; 7
    5842:	73 2e       	mov	r7, r19
					servo_enable = true;
					zero_setting = true;
					break;
    5844:	08 c0       	rjmp	.+16     	; 0x5856 <menu_servo_setup+0x98>
				case 1:
					break;
				case 2:
					value_ptr = &Config.min_travel[0];
					servo_enable = true;
					zero_setting = true;
    5846:	91 e0       	ldi	r25, 0x01	; 1
    5848:	9e 83       	std	Y+6, r25	; 0x06
			{
				case 1:
					break;
				case 2:
					value_ptr = &Config.min_travel[0];
					servo_enable = true;
    584a:	99 24       	eor	r9, r9
    584c:	93 94       	inc	r9
			switch(section)
			{
				case 1:
					break;
				case 2:
					value_ptr = &Config.min_travel[0];
    584e:	4f ef       	ldi	r20, 0xFF	; 255
    5850:	64 2e       	mov	r6, r20
    5852:	46 e0       	ldi	r20, 0x06	; 6
    5854:	74 2e       	mov	r7, r20
    5856:	81 50       	subi	r24, 0x01	; 1
	// Get menu offsets
	// 1 = Reverse, 2 = Min, 3 = Max
	while(button != BACK)
	{
		// Load values from eeprom
		for (i = 0; i < SERVOITEMS; i++)
    5858:	41 f7       	brne	.-48     	; 0x582a <menu_servo_setup+0x6c>
					break;
			}
		}

		// Print menu
		print_menu_items(sub_top, SERVOSTART, value_ptr, 1, (const unsigned char*)servo_menu_ranges[section - 1], 1, SERVOOFFSET, (const unsigned char*)ServoMenuText[section - 1], cursor);
    585a:	80 90 00 05 	lds	r8, 0x0500
    585e:	a8 84       	ldd	r10, Y+8	; 0x08
    5860:	b9 84       	ldd	r11, Y+9	; 0x09
    5862:	80 e5       	ldi	r24, 0x50	; 80
    5864:	c8 2e       	mov	r12, r24
    5866:	ee 24       	eor	r14, r14
    5868:	e3 94       	inc	r14
    586a:	82 01       	movw	r16, r4
    586c:	21 e0       	ldi	r18, 0x01	; 1
    586e:	a3 01       	movw	r20, r6
    5870:	66 ee       	ldi	r22, 0xE6	; 230
    5872:	80 91 22 05 	lds	r24, 0x0522
    5876:	0e 94 da 27 	call	0x4fb4	; 0x4fb4 <print_menu_items>

		// Handle menu changes
		update_menu(SERVOITEMS, SERVOSTART, 0, button, &cursor, &sub_top, &menu_temp);
    587a:	9f e1       	ldi	r25, 0x1F	; 31
    587c:	c9 2e       	mov	r12, r25
    587e:	95 e0       	ldi	r25, 0x05	; 5
    5880:	d9 2e       	mov	r13, r25
    5882:	22 e2       	ldi	r18, 0x22	; 34
    5884:	e2 2e       	mov	r14, r18
    5886:	25 e0       	ldi	r18, 0x05	; 5
    5888:	f2 2e       	mov	r15, r18
    588a:	00 e0       	ldi	r16, 0x00	; 0
    588c:	15 e0       	ldi	r17, 0x05	; 5
    588e:	20 91 6a 07 	lds	r18, 0x076A
    5892:	40 e0       	ldi	r20, 0x00	; 0
    5894:	66 ee       	ldi	r22, 0xE6	; 230
    5896:	88 e0       	ldi	r24, 0x08	; 8
    5898:	0e 94 32 27 	call	0x4e64	; 0x4e64 <update_menu>
		range = get_menu_range ((const unsigned char*)servo_menu_ranges[section - 1], 0);
    589c:	60 e0       	ldi	r22, 0x00	; 0
    589e:	c2 01       	movw	r24, r4
    58a0:	0e 94 40 25 	call	0x4a80	; 0x4a80 <get_menu_range>
    58a4:	29 83       	std	Y+1, r18	; 0x01
    58a6:	3a 83       	std	Y+2, r19	; 0x02
    58a8:	4b 83       	std	Y+3, r20	; 0x03
    58aa:	5c 83       	std	Y+4, r21	; 0x04
    58ac:	6d 83       	std	Y+5, r22	; 0x05

		if (button == ENTER)
    58ae:	80 91 6a 07 	lds	r24, 0x076A
    58b2:	80 3e       	cpi	r24, 0xE0	; 224
    58b4:	c9 f5       	brne	.+114    	; 0x5928 <menu_servo_setup+0x16a>
		{
			text_link = pgm_read_byte(&ServoMenuText[section - 1][menu_temp - SERVOSTART]);
    58b6:	80 91 1f 05 	lds	r24, 0x051F
    58ba:	28 2f       	mov	r18, r24
    58bc:	30 e0       	ldi	r19, 0x00	; 0
    58be:	26 5e       	subi	r18, 0xE6	; 230
    58c0:	31 09       	sbc	r19, r1
    58c2:	f9 01       	movw	r30, r18
    58c4:	e2 0d       	add	r30, r2
    58c6:	f3 1d       	adc	r31, r3
    58c8:	ef 55       	subi	r30, 0x5F	; 95
    58ca:	f7 4e       	sbci	r31, 0xE7	; 231
    58cc:	a4 90       	lpm	r10, Z
    58ce:	68 2f       	mov	r22, r24
    58d0:	70 e0       	ldi	r23, 0x00	; 0

			// Zero limits if adjusting
			if (zero_setting)
    58d2:	9e 81       	ldd	r25, Y+6	; 0x06
    58d4:	99 23       	and	r25, r25
    58d6:	31 f0       	breq	.+12     	; 0x58e4 <menu_servo_setup+0x126>
			{
				value_ptr[menu_temp - SERVOSTART] = 0;
    58d8:	d3 01       	movw	r26, r6
    58da:	a6 0f       	add	r26, r22
    58dc:	b7 1f       	adc	r27, r23
    58de:	a6 5e       	subi	r26, 0xE6	; 230
    58e0:	b1 09       	sbc	r27, r1
    58e2:	1c 92       	st	X, r1
			}

			// Do not allow servo enable for throttle if in CPPM mode
			if ((Config.Channel[menu_temp - SERVOSTART].P1_source_a == THROTTLE) && (Config.RxMode == CPPM_MODE))
    58e4:	9d e1       	ldi	r25, 0x1D	; 29
    58e6:	92 9f       	mul	r25, r18
    58e8:	d0 01       	movw	r26, r0
    58ea:	93 9f       	mul	r25, r19
    58ec:	b0 0d       	add	r27, r0
    58ee:	11 24       	eor	r1, r1
    58f0:	ac 5d       	subi	r26, 0xDC	; 220
    58f2:	b9 4f       	sbci	r27, 0xF9	; 249
    58f4:	9c 91       	ld	r25, X
    58f6:	91 11       	cpse	r25, r1
    58f8:	05 c0       	rjmp	.+10     	; 0x5904 <menu_servo_setup+0x146>
    58fa:	90 91 a7 05 	lds	r25, 0x05A7
    58fe:	91 11       	cpse	r25, r1
    5900:	01 c0       	rjmp	.+2      	; 0x5904 <menu_servo_setup+0x146>
			{
				servo_enable = false;
    5902:	91 2c       	mov	r9, r1
			}

			do_menu_item(menu_temp, value_ptr + (menu_temp - SERVOSTART), 1, range, 0, text_link, servo_enable, (menu_temp - SERVOSTART));
    5904:	66 5e       	subi	r22, 0xE6	; 230
    5906:	71 09       	sbc	r23, r1
    5908:	66 0d       	add	r22, r6
    590a:	77 1d       	adc	r23, r7
    590c:	3f 93       	push	r19
    590e:	2f 93       	push	r18
    5910:	89 2c       	mov	r8, r9
    5912:	c1 2c       	mov	r12, r1
    5914:	e9 80       	ldd	r14, Y+1	; 0x01
    5916:	fa 80       	ldd	r15, Y+2	; 0x02
    5918:	0b 81       	ldd	r16, Y+3	; 0x03
    591a:	1c 81       	ldd	r17, Y+4	; 0x04
    591c:	2d 81       	ldd	r18, Y+5	; 0x05
    591e:	41 e0       	ldi	r20, 0x01	; 1
    5920:	0e 94 c5 25 	call	0x4b8a	; 0x4b8a <do_menu_item>
    5924:	0f 90       	pop	r0
    5926:	0f 90       	pop	r0
		}

		// Disable servos
		servo_enable = false;

		if (button == ENTER)
    5928:	80 91 6a 07 	lds	r24, 0x076A
    592c:	80 3e       	cpi	r24, 0xE0	; 224
    592e:	09 f0       	breq	.+2      	; 0x5932 <menu_servo_setup+0x174>
    5930:	75 cf       	rjmp	.-278    	; 0x581c <menu_servo_setup+0x5e>
		{
			UpdateLimits();				// Update actual servo trims
    5932:	0e 94 5b 2d 	call	0x5ab6	; 0x5ab6 <UpdateLimits>
			Save_Config_to_EEPROM();	// Save value and return
    5936:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <Save_Config_to_EEPROM>
    593a:	70 cf       	rjmp	.-288    	; 0x581c <menu_servo_setup+0x5e>
		}
	}
}
    593c:	29 96       	adiw	r28, 0x09	; 9
    593e:	e2 e1       	ldi	r30, 0x12	; 18
    5940:	0c 94 af 3e 	jmp	0x7d5e	; 0x7d5e <__epilogue_restores__>

00005944 <menu_rc_setup>:
//************************************************************
// Main menu-specific setup
//************************************************************

void menu_rc_setup(uint8_t section)
{
    5944:	a9 e0       	ldi	r26, 0x09	; 9
    5946:	b0 e0       	ldi	r27, 0x00	; 0
    5948:	e8 ea       	ldi	r30, 0xA8	; 168
    594a:	fc e2       	ldi	r31, 0x2C	; 44
    594c:	0c 94 93 3e 	jmp	0x7d26	; 0x7d26 <__prologue_saves__>
    5950:	8f 83       	std	Y+7, r24	; 0x07
	uint8_t i;
	uint8_t offset = 0;			// Index into channel structure
	uint8_t	items= RCITEMS;		// Items in group
	
	// If submenu item has changed, reset submenu positions
	if (menu_flag)
    5952:	80 91 6c 07 	lds	r24, 0x076C
    5956:	88 23       	and	r24, r24
    5958:	29 f0       	breq	.+10     	; 0x5964 <menu_rc_setup+0x20>
	{
		sub_top = RCSTART;
    595a:	85 e9       	ldi	r24, 0x95	; 149
    595c:	80 93 22 05 	sts	0x0522, r24
		menu_flag = 0;
    5960:	10 92 6c 07 	sts	0x076C, r1
			UpdateLimits();			// Update I-term limits and triggers based on percentages

			// Update channel sequence
			for (i = 0; i < MAX_RC_CHANNELS; i++)
			{
				if (Config.TxSeq == FUTABASEQ)
    5964:	2a e0       	ldi	r18, 0x0A	; 10
    5966:	2e 83       	std	Y+6, r18	; 0x06
    5968:	91 2c       	mov	r9, r1
    596a:	67 ea       	ldi	r22, 0xA7	; 167
    596c:	46 2e       	mov	r4, r22
    596e:	65 e0       	ldi	r22, 0x05	; 5
    5970:	56 2e       	mov	r5, r22
			default:
				break;
		}

		// Print menu
		print_menu_items(sub_top + offset, RCSTART + offset, value_ptr, 1, (const unsigned char*)rc_menu_ranges[section - 1], 0, RCOFFSET, (const unsigned char*)RCMenuText[section - 1], cursor);
    5972:	3f 81       	ldd	r19, Y+7	; 0x07
    5974:	83 2f       	mov	r24, r19
    5976:	90 e0       	ldi	r25, 0x00	; 0
    5978:	01 97       	sbiw	r24, 0x01	; 1
    597a:	22 e3       	ldi	r18, 0x32	; 50
    597c:	28 9f       	mul	r18, r24
    597e:	30 01       	movw	r6, r0
    5980:	29 9f       	mul	r18, r25
    5982:	70 0c       	add	r7, r0
    5984:	11 24       	eor	r1, r1
    5986:	93 01       	movw	r18, r6
    5988:	27 54       	subi	r18, 0x47	; 71
    598a:	37 4e       	sbci	r19, 0xE7	; 231
    598c:	39 01       	movw	r6, r18
    598e:	3a e0       	ldi	r19, 0x0A	; 10
    5990:	38 9f       	mul	r19, r24
    5992:	10 01       	movw	r2, r0
    5994:	39 9f       	mul	r19, r25
    5996:	30 0c       	add	r3, r0
    5998:	11 24       	eor	r1, r1
    599a:	c1 01       	movw	r24, r2
    599c:	83 5e       	subi	r24, 0xE3	; 227
    599e:	96 4e       	sbci	r25, 0xE6	; 230
    59a0:	99 87       	std	Y+9, r25	; 0x09
    59a2:	88 87       	std	Y+8, r24	; 0x08
	{
		sub_top = RCSTART;
		menu_flag = 0;
	}

	while(button != BACK)
    59a4:	80 91 6a 07 	lds	r24, 0x076A
    59a8:	80 37       	cpi	r24, 0x70	; 112
    59aa:	09 f4       	brne	.+2      	; 0x59ae <menu_rc_setup+0x6a>
    59ac:	80 c0       	rjmp	.+256    	; 0x5aae <menu_rc_setup+0x16a>
	{
		// Get menu offsets and load values from eeprom
		// 1 = RC, 2 = General
		switch(section)
    59ae:	9f 81       	ldd	r25, Y+7	; 0x07
    59b0:	92 30       	cpi	r25, 0x02	; 2
    59b2:	41 f4       	brne	.+16     	; 0x59c4 <menu_rc_setup+0x80>
		{
			case 1:				// RC setup menu
				break;
			case 2:				// General menu
				offset = RCITEMS;
				items = GENERALITEMS;
    59b4:	28 e0       	ldi	r18, 0x08	; 8
    59b6:	2e 83       	std	Y+6, r18	; 0x06
		switch(section)
		{
			case 1:				// RC setup menu
				break;
			case 2:				// General menu
				offset = RCITEMS;
    59b8:	4a e0       	ldi	r20, 0x0A	; 10
    59ba:	94 2e       	mov	r9, r20
				items = GENERALITEMS;
				value_ptr = &Config.Orientation;
    59bc:	57 e0       	ldi	r21, 0x07	; 7
    59be:	45 2e       	mov	r4, r21
    59c0:	56 e0       	ldi	r21, 0x06	; 6
    59c2:	55 2e       	mov	r5, r21
			default:
				break;
		}

		// Print menu
		print_menu_items(sub_top + offset, RCSTART + offset, value_ptr, 1, (const unsigned char*)rc_menu_ranges[section - 1], 0, RCOFFSET, (const unsigned char*)RCMenuText[section - 1], cursor);
    59c4:	80 91 22 05 	lds	r24, 0x0522
    59c8:	80 90 00 05 	lds	r8, 0x0500
    59cc:	a8 84       	ldd	r10, Y+8	; 0x08
    59ce:	b9 84       	ldd	r11, Y+9	; 0x09
    59d0:	9f e4       	ldi	r25, 0x4F	; 79
    59d2:	c9 2e       	mov	r12, r25
    59d4:	e1 2c       	mov	r14, r1
    59d6:	83 01       	movw	r16, r6
    59d8:	21 e0       	ldi	r18, 0x01	; 1
    59da:	a2 01       	movw	r20, r4
    59dc:	65 e9       	ldi	r22, 0x95	; 149
    59de:	69 0d       	add	r22, r9
    59e0:	89 0d       	add	r24, r9
    59e2:	0e 94 da 27 	call	0x4fb4	; 0x4fb4 <print_menu_items>

		// Handle menu changes
		update_menu(items, RCSTART, offset, button, &cursor, &sub_top, &menu_temp);
    59e6:	2f e1       	ldi	r18, 0x1F	; 31
    59e8:	c2 2e       	mov	r12, r18
    59ea:	25 e0       	ldi	r18, 0x05	; 5
    59ec:	d2 2e       	mov	r13, r18
    59ee:	32 e2       	ldi	r19, 0x22	; 34
    59f0:	e3 2e       	mov	r14, r19
    59f2:	35 e0       	ldi	r19, 0x05	; 5
    59f4:	f3 2e       	mov	r15, r19
    59f6:	00 e0       	ldi	r16, 0x00	; 0
    59f8:	15 e0       	ldi	r17, 0x05	; 5
    59fa:	20 91 6a 07 	lds	r18, 0x076A
    59fe:	49 2d       	mov	r20, r9
    5a00:	65 e9       	ldi	r22, 0x95	; 149
    5a02:	8e 81       	ldd	r24, Y+6	; 0x06
    5a04:	0e 94 32 27 	call	0x4e64	; 0x4e64 <update_menu>
		range = get_menu_range ((const unsigned char*)rc_menu_ranges[section - 1], (menu_temp - RCSTART - offset)); 
    5a08:	60 91 1f 05 	lds	r22, 0x051F
    5a0c:	65 59       	subi	r22, 0x95	; 149
    5a0e:	69 19       	sub	r22, r9
    5a10:	c3 01       	movw	r24, r6
    5a12:	0e 94 40 25 	call	0x4a80	; 0x4a80 <get_menu_range>
    5a16:	29 83       	std	Y+1, r18	; 0x01
    5a18:	3a 83       	std	Y+2, r19	; 0x02
    5a1a:	4b 83       	std	Y+3, r20	; 0x03
    5a1c:	5c 83       	std	Y+4, r21	; 0x04
    5a1e:	6d 83       	std	Y+5, r22	; 0x05

		if (button == ENTER)
    5a20:	80 91 6a 07 	lds	r24, 0x076A
    5a24:	80 3e       	cpi	r24, 0xE0	; 224
    5a26:	f1 f4       	brne	.+60     	; 0x5a64 <menu_rc_setup+0x120>
		{
			text_link = pgm_read_byte(&RCMenuText[section - 1][menu_temp - RCSTART - offset]);
    5a28:	80 91 1f 05 	lds	r24, 0x051F
    5a2c:	68 2f       	mov	r22, r24
    5a2e:	70 e0       	ldi	r23, 0x00	; 0
    5a30:	65 59       	subi	r22, 0x95	; 149
    5a32:	71 09       	sbc	r23, r1
    5a34:	69 19       	sub	r22, r9
    5a36:	71 09       	sbc	r23, r1
    5a38:	fb 01       	movw	r30, r22
    5a3a:	e2 0d       	add	r30, r2
    5a3c:	f3 1d       	adc	r31, r3
    5a3e:	e3 5e       	subi	r30, 0xE3	; 227
    5a40:	f6 4e       	sbci	r31, 0xE6	; 230
    5a42:	a4 90       	lpm	r10, Z
			do_menu_item(menu_temp, value_ptr + (menu_temp - RCSTART - offset), 1, range, 0, text_link, false, 0);
    5a44:	64 0d       	add	r22, r4
    5a46:	75 1d       	adc	r23, r5
    5a48:	1f 92       	push	r1
    5a4a:	1f 92       	push	r1
    5a4c:	81 2c       	mov	r8, r1
    5a4e:	c1 2c       	mov	r12, r1
    5a50:	e9 80       	ldd	r14, Y+1	; 0x01
    5a52:	fa 80       	ldd	r15, Y+2	; 0x02
    5a54:	0b 81       	ldd	r16, Y+3	; 0x03
    5a56:	1c 81       	ldd	r17, Y+4	; 0x04
    5a58:	2d 81       	ldd	r18, Y+5	; 0x05
    5a5a:	41 e0       	ldi	r20, 0x01	; 1
    5a5c:	0e 94 c5 25 	call	0x4b8a	; 0x4b8a <do_menu_item>
    5a60:	0f 90       	pop	r0
    5a62:	0f 90       	pop	r0
		}

		if (button == ENTER)
    5a64:	80 91 6a 07 	lds	r24, 0x076A
    5a68:	80 3e       	cpi	r24, 0xE0	; 224
    5a6a:	09 f0       	breq	.+2      	; 0x5a6e <menu_rc_setup+0x12a>
    5a6c:	9b cf       	rjmp	.-202    	; 0x59a4 <menu_rc_setup+0x60>
		{
			init_int();				// In case RC type has changed, reinitialise interrupts
    5a6e:	0e 94 0b 21 	call	0x4216	; 0x4216 <init_int>
			init_uart();			// and UART
    5a72:	0e 94 bb 3a 	call	0x7576	; 0x7576 <init_uart>

			UpdateIMUvalues();		// Update IMU variables
    5a76:	0e 94 e0 20 	call	0x41c0	; 0x41c0 <UpdateIMUvalues>
			UpdateLimits();			// Update I-term limits and triggers based on percentages
    5a7a:	0e 94 5b 2d 	call	0x5ab6	; 0x5ab6 <UpdateLimits>

			// Update channel sequence
			for (i = 0; i < MAX_RC_CHANNELS; i++)
			{
				if (Config.TxSeq == FUTABASEQ)
    5a7e:	20 91 a9 05 	lds	r18, 0x05A9
    5a82:	af e7       	ldi	r26, 0x7F	; 127
    5a84:	b5 e0       	ldi	r27, 0x05	; 5
    5a86:	80 e0       	ldi	r24, 0x00	; 0
    5a88:	90 e0       	ldi	r25, 0x00	; 0
    5a8a:	fc 01       	movw	r30, r24
    5a8c:	21 30       	cpi	r18, 0x01	; 1
    5a8e:	19 f4       	brne	.+6      	; 0x5a96 <menu_rc_setup+0x152>
    5a90:	ec 50       	subi	r30, 0x0C	; 12
    5a92:	ff 4f       	sbci	r31, 0xFF	; 255
    5a94:	02 c0       	rjmp	.+4      	; 0x5a9a <menu_rc_setup+0x156>
    5a96:	e4 50       	subi	r30, 0x04	; 4
    5a98:	ff 4f       	sbci	r31, 0xFF	; 255
				{
					Config.ChannelOrder[i] = pgm_read_byte(&FUTABA[i]);
				}
				else
				{
					Config.ChannelOrder[i] = pgm_read_byte(&JR[i]);
    5a9a:	e4 91       	lpm	r30, Z
    5a9c:	ec 93       	st	X, r30
    5a9e:	01 96       	adiw	r24, 0x01	; 1
    5aa0:	11 96       	adiw	r26, 0x01	; 1

			UpdateIMUvalues();		// Update IMU variables
			UpdateLimits();			// Update I-term limits and triggers based on percentages

			// Update channel sequence
			for (i = 0; i < MAX_RC_CHANNELS; i++)
    5aa2:	88 30       	cpi	r24, 0x08	; 8
    5aa4:	91 05       	cpc	r25, r1
    5aa6:	89 f7       	brne	.-30     	; 0x5a8a <menu_rc_setup+0x146>
				{
					Config.ChannelOrder[i] = pgm_read_byte(&JR[i]);
				}
			}

			Save_Config_to_EEPROM(); // Save value and return
    5aa8:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <Save_Config_to_EEPROM>
    5aac:	7b cf       	rjmp	.-266    	; 0x59a4 <menu_rc_setup+0x60>
		}
	}
}
    5aae:	29 96       	adiw	r28, 0x09	; 9
    5ab0:	e2 e1       	ldi	r30, 0x12	; 18
    5ab2:	0c 94 af 3e 	jmp	0x7d5e	; 0x7d5e <__epilogue_restores__>

00005ab6 <UpdateLimits>:

// Update actual limits value with that from the mix setting percentages
// This is only done at start-up and whenever the values are changed
// so as to reduce CPU loop load
void UpdateLimits(void)
{
    5ab6:	ac e0       	ldi	r26, 0x0C	; 12
    5ab8:	b0 e0       	ldi	r27, 0x00	; 0
    5aba:	e1 e6       	ldi	r30, 0x61	; 97
    5abc:	fd e2       	ldi	r31, 0x2D	; 45
    5abe:	0c 94 97 3e 	jmp	0x7d2e	; 0x7d2e <__prologue_saves__+0x8>
	uint8_t i,j;
	int32_t temp32, gain32;

	int8_t limits[FLIGHT_MODES][NUMBEROFAXIS] = 
    5ac2:	80 91 b3 05 	lds	r24, 0x05B3
    5ac6:	8f 83       	std	Y+7, r24	; 0x07
    5ac8:	80 91 b9 05 	lds	r24, 0x05B9
    5acc:	88 87       	std	Y+8, r24	; 0x08
    5ace:	80 91 bf 05 	lds	r24, 0x05BF
    5ad2:	89 87       	std	Y+9, r24	; 0x09
    5ad4:	80 91 c5 05 	lds	r24, 0x05C5
    5ad8:	8a 87       	std	Y+10, r24	; 0x0a
    5ada:	80 91 cb 05 	lds	r24, 0x05CB
    5ade:	8b 87       	std	Y+11, r24	; 0x0b
    5ae0:	80 91 d1 05 	lds	r24, 0x05D1
    5ae4:	8c 87       	std	Y+12, r24	; 0x0c
		{
			{Config.FlightMode[P1].Roll_limit, Config.FlightMode[P1].Pitch_limit, Config.FlightMode[P1].Yaw_limit},
			{Config.FlightMode[P2].Roll_limit, Config.FlightMode[P2].Pitch_limit, Config.FlightMode[P2].Yaw_limit}
		};

	int8_t gains[FLIGHT_MODES][NUMBEROFAXIS] = 
    5ae6:	80 91 b2 05 	lds	r24, 0x05B2
    5aea:	89 83       	std	Y+1, r24	; 0x01
    5aec:	80 91 b8 05 	lds	r24, 0x05B8
    5af0:	8a 83       	std	Y+2, r24	; 0x02
    5af2:	80 91 be 05 	lds	r24, 0x05BE
    5af6:	8b 83       	std	Y+3, r24	; 0x03
    5af8:	80 91 c4 05 	lds	r24, 0x05C4
    5afc:	8c 83       	std	Y+4, r24	; 0x04
    5afe:	80 91 ca 05 	lds	r24, 0x05CA
    5b02:	8d 83       	std	Y+5, r24	; 0x05
    5b04:	80 91 d0 05 	lds	r24, 0x05D0
    5b08:	8e 83       	std	Y+6, r24	; 0x06
			{Config.FlightMode[P1].Roll_I_mult, Config.FlightMode[P1].Pitch_I_mult, Config.FlightMode[P1].Yaw_I_mult},
			{Config.FlightMode[P2].Roll_I_mult, Config.FlightMode[P2].Pitch_I_mult, Config.FlightMode[P2].Yaw_I_mult}
		};

	// Update triggers
	Config.PowerTriggerActual = Config.PowerTrigger * 10;
    5b0a:	80 91 0b 06 	lds	r24, 0x060B
    5b0e:	2a e0       	ldi	r18, 0x0A	; 10
    5b10:	82 02       	muls	r24, r18
    5b12:	c0 01       	movw	r24, r0
    5b14:	11 24       	eor	r1, r1
    5b16:	90 93 06 06 	sts	0x0606, r25
    5b1a:	80 93 05 06 	sts	0x0605, r24
    5b1e:	45 ed       	ldi	r20, 0xD5	; 213
    5b20:	a4 2e       	mov	r10, r20
    5b22:	45 e0       	ldi	r20, 0x05	; 5
    5b24:	b4 2e       	mov	r11, r20
    5b26:	00 e0       	ldi	r16, 0x00	; 0
    5b28:	10 e0       	ldi	r17, 0x00	; 0

// Update actual limits value with that from the mix setting percentages
// This is only done at start-up and whenever the values are changed
// so as to reduce CPU loop load
void UpdateLimits(void)
{
    5b2a:	65 01       	movw	r12, r10
    5b2c:	e1 2c       	mov	r14, r1
    5b2e:	f1 2c       	mov	r15, r1
    5b30:	87 e0       	ldi	r24, 0x07	; 7
    5b32:	88 2e       	mov	r8, r24
    5b34:	91 2c       	mov	r9, r1
    5b36:	8c 0e       	add	r8, r28
    5b38:	9d 1e       	adc	r9, r29
    5b3a:	80 0e       	add	r8, r16
    5b3c:	91 1e       	adc	r9, r17
    5b3e:	66 24       	eor	r6, r6
    5b40:	63 94       	inc	r6
    5b42:	71 2c       	mov	r7, r1
    5b44:	6c 0e       	add	r6, r28
    5b46:	7d 1e       	adc	r7, r29
    5b48:	60 0e       	add	r6, r16
    5b4a:	71 1e       	adc	r7, r17
    5b4c:	f4 01       	movw	r30, r8
    5b4e:	ee 0d       	add	r30, r14
    5b50:	ff 1d       	adc	r31, r15
	// Update I_term input constraints for all profiles
	for (j = 0; j < FLIGHT_MODES; j++)
	{
		for (i = 0; i < NUMBEROFAXIS; i++)
		{
			temp32 	= limits[j][i]; 						// Promote limit %
    5b52:	a0 81       	ld	r26, Z

			// I-term output (throw). Convert from % to actual count
			// A value of 80,000 results in +/- 1250 or full throw at the output stage
			// This is because the maximum signal value is +/-1250 after division by 64. 1250 * 64 = 80,000
			Config.Raw_I_Limits[j][i] = temp32 * (int32_t)640;	// 80,000 / 125% = 640
    5b54:	bb 27       	eor	r27, r27
    5b56:	a7 fd       	sbrc	r26, 7
    5b58:	b0 95       	com	r27
    5b5a:	20 e8       	ldi	r18, 0x80	; 128
    5b5c:	32 e0       	ldi	r19, 0x02	; 2
    5b5e:	0e 94 79 3e 	call	0x7cf2	; 0x7cf2 <__usmulhisi3>
    5b62:	d6 01       	movw	r26, r12
    5b64:	6d 93       	st	X+, r22
    5b66:	7d 93       	st	X+, r23
    5b68:	8d 93       	st	X+, r24
    5b6a:	9d 93       	st	X+, r25
    5b6c:	6d 01       	movw	r12, r26
    5b6e:	f3 01       	movw	r30, r6
    5b70:	ee 0d       	add	r30, r14
    5b72:	ff 1d       	adc	r31, r15

			// I-term source limits. These have to be different due to the I-term gain setting
			// I-term = (gyro * gain) / 32, so the gyro count for a particular gain and limit are
			// Gyro = (I-term * 32) / gain :) 

			if (gains[j][i] != 0)
    5b74:	20 81       	ld	r18, Z
    5b76:	22 23       	and	r18, r18
    5b78:	a1 f0       	breq	.+40     	; 0x5ba2 <UpdateLimits+0xec>
			{
				gain32 = gains[j][i];						// Promote gain value
				Config.Raw_I_Constrain[j][i] = (Config.Raw_I_Limits[j][i] << 5) / gain32;
    5b7a:	35 e0       	ldi	r19, 0x05	; 5
    5b7c:	66 0f       	add	r22, r22
    5b7e:	77 1f       	adc	r23, r23
    5b80:	88 1f       	adc	r24, r24
    5b82:	99 1f       	adc	r25, r25
    5b84:	3a 95       	dec	r19
    5b86:	d1 f7       	brne	.-12     	; 0x5b7c <UpdateLimits+0xc6>
			// I-term = (gyro * gain) / 32, so the gyro count for a particular gain and limit are
			// Gyro = (I-term * 32) / gain :) 

			if (gains[j][i] != 0)
			{
				gain32 = gains[j][i];						// Promote gain value
    5b88:	33 27       	eor	r19, r19
    5b8a:	27 fd       	sbrc	r18, 7
    5b8c:	30 95       	com	r19
    5b8e:	43 2f       	mov	r20, r19
    5b90:	53 2f       	mov	r21, r19
				Config.Raw_I_Constrain[j][i] = (Config.Raw_I_Limits[j][i] << 5) / gain32;
    5b92:	0e 94 3d 3e 	call	0x7c7a	; 0x7c7a <__divmodsi4>
    5b96:	f6 01       	movw	r30, r12
    5b98:	24 8b       	std	Z+20, r18	; 0x14
    5b9a:	35 8b       	std	Z+21, r19	; 0x15
    5b9c:	46 8b       	std	Z+22, r20	; 0x16
    5b9e:	57 8b       	std	Z+23, r21	; 0x17
    5ba0:	06 c0       	rjmp	.+12     	; 0x5bae <UpdateLimits+0xf8>
			}
			else 
			{
				Config.Raw_I_Constrain[j][i] = 0;
    5ba2:	54 96       	adiw	r26, 0x14	; 20
    5ba4:	1d 92       	st	X+, r1
    5ba6:	1d 92       	st	X+, r1
    5ba8:	1d 92       	st	X+, r1
    5baa:	1c 92       	st	X, r1
    5bac:	57 97       	sbiw	r26, 0x17	; 23
    5bae:	bf ef       	ldi	r27, 0xFF	; 255
    5bb0:	eb 1a       	sub	r14, r27
    5bb2:	fb 0a       	sbc	r15, r27
	Config.PowerTriggerActual = Config.PowerTrigger * 10;

	// Update I_term input constraints for all profiles
	for (j = 0; j < FLIGHT_MODES; j++)
	{
		for (i = 0; i < NUMBEROFAXIS; i++)
    5bb4:	e3 e0       	ldi	r30, 0x03	; 3
    5bb6:	ee 16       	cp	r14, r30
    5bb8:	f1 04       	cpc	r15, r1
    5bba:	41 f6       	brne	.-112    	; 0x5b4c <UpdateLimits+0x96>
    5bbc:	fc e0       	ldi	r31, 0x0C	; 12
    5bbe:	af 0e       	add	r10, r31
    5bc0:	b1 1c       	adc	r11, r1
    5bc2:	0d 5f       	subi	r16, 0xFD	; 253
    5bc4:	1f 4f       	sbci	r17, 0xFF	; 255

	// Update triggers
	Config.PowerTriggerActual = Config.PowerTrigger * 10;

	// Update I_term input constraints for all profiles
	for (j = 0; j < FLIGHT_MODES; j++)
    5bc6:	06 30       	cpi	r16, 0x06	; 6
    5bc8:	11 05       	cpc	r17, r1
    5bca:	09 f0       	breq	.+2      	; 0x5bce <UpdateLimits+0x118>
    5bcc:	ae cf       	rjmp	.-164    	; 0x5b2a <UpdateLimits+0x74>
    5bce:	8f ef       	ldi	r24, 0xFF	; 255
    5bd0:	96 e0       	ldi	r25, 0x06	; 6
    5bd2:	e7 e8       	ldi	r30, 0x87	; 135
    5bd4:	f5 e0       	ldi	r31, 0x05	; 5
    5bd6:	67 e0       	ldi	r22, 0x07	; 7
    5bd8:	77 e0       	ldi	r23, 0x07	; 7
	}

	// Update travel limits
	for (i = 0; i < MAX_OUTPUTS; i++)
	{
		Config.Limits[i].minimum = scale_percent(Config.min_travel[i]);
    5bda:	dc 01       	movw	r26, r24
    5bdc:	2d 91       	ld	r18, X+
    5bde:	cd 01       	movw	r24, r26
int16_t scale_percent(int8_t value)
{
	int16_t temp16_1, temp16_2;

	temp16_1 = value; // Promote
	temp16_2 = ((temp16_1 * (int16_t)10) + 3750);
    5be0:	ba e0       	ldi	r27, 0x0A	; 10
    5be2:	2b 02       	muls	r18, r27
    5be4:	90 01       	movw	r18, r0
    5be6:	11 24       	eor	r1, r1
    5be8:	2a 55       	subi	r18, 0x5A	; 90
    5bea:	31 4f       	sbci	r19, 0xF1	; 241
	}

	// Update travel limits
	for (i = 0; i < MAX_OUTPUTS; i++)
	{
		Config.Limits[i].minimum = scale_percent(Config.min_travel[i]);
    5bec:	31 83       	std	Z+1, r19	; 0x01
    5bee:	20 83       	st	Z, r18
		Config.Limits[i].maximum = scale_percent(Config.max_travel[i]);
    5bf0:	db 01       	movw	r26, r22
    5bf2:	2d 91       	ld	r18, X+
    5bf4:	bd 01       	movw	r22, r26
int16_t scale_percent(int8_t value)
{
	int16_t temp16_1, temp16_2;

	temp16_1 = value; // Promote
	temp16_2 = ((temp16_1 * (int16_t)10) + 3750);
    5bf6:	ba e0       	ldi	r27, 0x0A	; 10
    5bf8:	2b 02       	muls	r18, r27
    5bfa:	90 01       	movw	r18, r0
    5bfc:	11 24       	eor	r1, r1
    5bfe:	2a 55       	subi	r18, 0x5A	; 90
    5c00:	31 4f       	sbci	r19, 0xF1	; 241

	// Update travel limits
	for (i = 0; i < MAX_OUTPUTS; i++)
	{
		Config.Limits[i].minimum = scale_percent(Config.min_travel[i]);
		Config.Limits[i].maximum = scale_percent(Config.max_travel[i]);
    5c02:	33 83       	std	Z+3, r19	; 0x03
    5c04:	22 83       	std	Z+2, r18	; 0x02
    5c06:	34 96       	adiw	r30, 0x04	; 4
			}
		}
	}

	// Update travel limits
	for (i = 0; i < MAX_OUTPUTS; i++)
    5c08:	25 e0       	ldi	r18, 0x05	; 5
    5c0a:	e7 3a       	cpi	r30, 0xA7	; 167
    5c0c:	f2 07       	cpc	r31, r18
    5c0e:	29 f7       	brne	.-54     	; 0x5bda <UpdateLimits+0x124>

	// Adjust trim to match 0.01 degree resolution
	// A value of 127 multiplied by 10 = 1270 which in 1/100ths of a degree equates to 12.7 degrees
	for (i = P1; i <= P2; i++)
	{
		Config.Rolltrim[i] = Config.FlightMode[i].AccRollZeroTrim * 10;
    5c10:	80 91 b6 05 	lds	r24, 0x05B6
    5c14:	4a e0       	ldi	r20, 0x0A	; 10
    5c16:	84 02       	muls	r24, r20
    5c18:	c0 01       	movw	r24, r0
    5c1a:	11 24       	eor	r1, r1
    5c1c:	90 93 35 07 	sts	0x0735, r25
    5c20:	80 93 34 07 	sts	0x0734, r24
		Config.Pitchtrim[i] = Config.FlightMode[i].AccPitchZeroTrim * 10;
    5c24:	80 91 bc 05 	lds	r24, 0x05BC
    5c28:	aa e0       	ldi	r26, 0x0A	; 10
    5c2a:	8a 02       	muls	r24, r26
    5c2c:	c0 01       	movw	r24, r0
    5c2e:	11 24       	eor	r1, r1
    5c30:	90 93 39 07 	sts	0x0739, r25
    5c34:	80 93 38 07 	sts	0x0738, r24

	// Adjust trim to match 0.01 degree resolution
	// A value of 127 multiplied by 10 = 1270 which in 1/100ths of a degree equates to 12.7 degrees
	for (i = P1; i <= P2; i++)
	{
		Config.Rolltrim[i] = Config.FlightMode[i].AccRollZeroTrim * 10;
    5c38:	80 91 c8 05 	lds	r24, 0x05C8
    5c3c:	ba e0       	ldi	r27, 0x0A	; 10
    5c3e:	8b 02       	muls	r24, r27
    5c40:	c0 01       	movw	r24, r0
    5c42:	11 24       	eor	r1, r1
    5c44:	90 93 37 07 	sts	0x0737, r25
    5c48:	80 93 36 07 	sts	0x0736, r24
		Config.Pitchtrim[i] = Config.FlightMode[i].AccPitchZeroTrim * 10;
    5c4c:	80 91 ce 05 	lds	r24, 0x05CE
    5c50:	ea e0       	ldi	r30, 0x0A	; 10
    5c52:	8e 02       	muls	r24, r30
    5c54:	c0 01       	movw	r24, r0
    5c56:	11 24       	eor	r1, r1
    5c58:	90 93 3b 07 	sts	0x073B, r25
    5c5c:	80 93 3a 07 	sts	0x073A, r24
	}
}
    5c60:	2c 96       	adiw	r28, 0x0c	; 12
    5c62:	ee e0       	ldi	r30, 0x0E	; 14
    5c64:	0c 94 b3 3e 	jmp	0x7d66	; 0x7d66 <__epilogue_restores__+0x8>

00005c68 <UpdateServos>:

// Update servos from the mixer Config.Channel[i].P1_value data, add offsets and enforce travel limits
void UpdateServos(void)
{
    5c68:	cf 93       	push	r28
    5c6a:	df 93       	push	r29
    5c6c:	6f e0       	ldi	r22, 0x0F	; 15
    5c6e:	76 e0       	ldi	r23, 0x06	; 6
    5c70:	27 ef       	ldi	r18, 0xF7	; 247
    5c72:	36 e0       	ldi	r19, 0x06	; 6
    5c74:	e1 eb       	ldi	r30, 0xB1	; 177
    5c76:	f7 e0       	ldi	r31, 0x07	; 7
    5c78:	c7 e8       	ldi	r28, 0x87	; 135
    5c7a:	d5 e0       	ldi	r29, 0x05	; 5
	int16_t temp1 = 0; // Output value

	for (i = 0; i < MAX_OUTPUTS; i++)
	{
		// Servo reverse and trim for the eight physical outputs
		temp1 = Config.Channel[i].P1_value;
    5c7c:	db 01       	movw	r26, r22
    5c7e:	8d 91       	ld	r24, X+
    5c80:	9c 91       	ld	r25, X

		// Reverse this channel for the eight physical outputs
		if ((i <= MAX_OUTPUTS) && (Config.Servo_reverse[i] == ON))
    5c82:	d9 01       	movw	r26, r18
    5c84:	4d 91       	ld	r20, X+
    5c86:	9d 01       	movw	r18, r26
    5c88:	41 30       	cpi	r20, 0x01	; 1
    5c8a:	19 f4       	brne	.+6      	; 0x5c92 <UpdateServos+0x2a>
		{	
			temp1 = -temp1;
    5c8c:	91 95       	neg	r25
    5c8e:	81 95       	neg	r24
    5c90:	91 09       	sbc	r25, r1
		}

		// Add offset value to restore to system compatible value
		temp1 += 3750;
    5c92:	8a 55       	subi	r24, 0x5A	; 90
    5c94:	91 4f       	sbci	r25, 0xF1	; 241

		// Enforce min, max travel limits
		if (temp1 > Config.Limits[i].maximum)
    5c96:	4a 81       	ldd	r20, Y+2	; 0x02
    5c98:	5b 81       	ldd	r21, Y+3	; 0x03
    5c9a:	48 17       	cp	r20, r24
    5c9c:	59 07       	cpc	r21, r25
    5c9e:	2c f0       	brlt	.+10     	; 0x5caa <UpdateServos+0x42>
		{
			ServoOut[i] = Config.Limits[i].maximum;
		}

		else if (temp1 < Config.Limits[i].minimum)
    5ca0:	48 81       	ld	r20, Y
    5ca2:	59 81       	ldd	r21, Y+1	; 0x01
    5ca4:	84 17       	cp	r24, r20
    5ca6:	95 07       	cpc	r25, r21
    5ca8:	1c f4       	brge	.+6      	; 0x5cb0 <UpdateServos+0x48>
		{
			ServoOut[i] = Config.Limits[i].minimum;
    5caa:	51 83       	std	Z+1, r21	; 0x01
    5cac:	40 83       	st	Z, r20
    5cae:	02 c0       	rjmp	.+4      	; 0x5cb4 <UpdateServos+0x4c>
		}

		// Transfer value to servo
		else
		{
			ServoOut[i] = temp1;
    5cb0:	91 83       	std	Z+1, r25	; 0x01
    5cb2:	80 83       	st	Z, r24
    5cb4:	63 5e       	subi	r22, 0xE3	; 227
    5cb6:	7f 4f       	sbci	r23, 0xFF	; 255
    5cb8:	32 96       	adiw	r30, 0x02	; 2
    5cba:	24 96       	adiw	r28, 0x04	; 4
void UpdateServos(void)
{
	uint8_t i;
	int16_t temp1 = 0; // Output value

	for (i = 0; i < MAX_OUTPUTS; i++)
    5cbc:	b6 e0       	ldi	r27, 0x06	; 6
    5cbe:	67 3f       	cpi	r22, 0xF7	; 247
    5cc0:	7b 07       	cpc	r23, r27
    5cc2:	e1 f6       	brne	.-72     	; 0x5c7c <UpdateServos+0x14>
		else
		{
			ServoOut[i] = temp1;
		}
	}
}
    5cc4:	df 91       	pop	r29
    5cc6:	cf 91       	pop	r28
    5cc8:	08 95       	ret

00005cca <scale32>:

// 32 bit multiply/scale for broken GCC
// Returns immediately if multiplier is 100, 0 or -100
int16_t scale32(int16_t value16, int16_t multiplier16)
{
    5cca:	9c 01       	movw	r18, r24
	int32_t temp32 = 0;
	int32_t mult32 = 0;

	// No change if 100% (no scaling)
	if (multiplier16 == 100)
    5ccc:	64 36       	cpi	r22, 0x64	; 100
    5cce:	71 05       	cpc	r23, r1
    5cd0:	e9 f0       	breq	.+58     	; 0x5d0c <scale32+0x42>
	{
		return value16;
	}

	// Reverse if -100%
	else if (multiplier16 == -100)
    5cd2:	6c 39       	cpi	r22, 0x9C	; 156
    5cd4:	8f ef       	ldi	r24, 0xFF	; 255
    5cd6:	78 07       	cpc	r23, r24
    5cd8:	29 f4       	brne	.+10     	; 0x5ce4 <scale32+0x1a>
	{
		return -value16;	
    5cda:	88 27       	eor	r24, r24
    5cdc:	99 27       	eor	r25, r25
    5cde:	82 1b       	sub	r24, r18
    5ce0:	93 0b       	sbc	r25, r19
    5ce2:	08 95       	ret
	}

	// Zero if 0%
	else if (multiplier16 == 0)
    5ce4:	61 15       	cp	r22, r1
    5ce6:	71 05       	cpc	r23, r1
    5ce8:	71 f0       	breq	.+28     	; 0x5d06 <scale32+0x3c>
	else
	{
		// GCC is broken bad regarding multiplying 32 bit numbers, hence all this crap...
		mult32 = multiplier16;
		temp32 = value16;
		temp32 = temp32 * mult32;
    5cea:	db 01       	movw	r26, r22
    5cec:	0e 94 62 3e 	call	0x7cc4	; 0x7cc4 <__mulhisi3>

		// Divide by 100 and round to get scaled value
		temp32 = (temp32 + (int32_t)50) / (int32_t)100; // Constants need to be cast up to 32 bits
    5cf0:	6e 5c       	subi	r22, 0xCE	; 206
    5cf2:	7f 4f       	sbci	r23, 0xFF	; 255
    5cf4:	8f 4f       	sbci	r24, 0xFF	; 255
    5cf6:	9f 4f       	sbci	r25, 0xFF	; 255
    5cf8:	24 e6       	ldi	r18, 0x64	; 100
    5cfa:	30 e0       	ldi	r19, 0x00	; 0
    5cfc:	40 e0       	ldi	r20, 0x00	; 0
    5cfe:	50 e0       	ldi	r21, 0x00	; 0
    5d00:	0e 94 3d 3e 	call	0x7c7a	; 0x7c7a <__divmodsi4>
    5d04:	03 c0       	rjmp	.+6      	; 0x5d0c <scale32+0x42>
	}

	// Zero if 0%
	else if (multiplier16 == 0)
	{
		return 0;	
    5d06:	80 e0       	ldi	r24, 0x00	; 0
    5d08:	90 e0       	ldi	r25, 0x00	; 0
    5d0a:	08 95       	ret
	int32_t mult32 = 0;

	// No change if 100% (no scaling)
	if (multiplier16 == 100)
	{
		return value16;
    5d0c:	c9 01       	movw	r24, r18
		temp32 = (temp32 + (int32_t)50) / (int32_t)100; // Constants need to be cast up to 32 bits
		value16 = (int16_t) temp32;
	}

	return value16;
}
    5d0e:	08 95       	ret

00005d10 <ProcessMixer>:
//************************************************************

int16_t	transition = 0; // Global for transition value

void ProcessMixer(void)
{
    5d10:	a0 e3       	ldi	r26, 0x30	; 48
    5d12:	b0 e0       	ldi	r27, 0x00	; 0
    5d14:	ee e8       	ldi	r30, 0x8E	; 142
    5d16:	fe e2       	ldi	r31, 0x2E	; 46
    5d18:	0c 94 93 3e 	jmp	0x7d26	; 0x7d26 <__prologue_saves__>
	int16_t	temp3 = 0;
	int16_t	Step1 = 0;
	int16_t	Step2 = 0;

	// Copy the sensor data to an array for easy indexing - acc data is from accSmooth, increased to reasonable rates
	temp1 = (int16_t)accSmooth[ROLL] << 3;
    5d1c:	60 91 6e 05 	lds	r22, 0x056E
    5d20:	70 91 6f 05 	lds	r23, 0x056F
    5d24:	80 91 70 05 	lds	r24, 0x0570
    5d28:	90 91 71 05 	lds	r25, 0x0571
    5d2c:	0e 94 23 3c 	call	0x7846	; 0x7846 <__fixsfsi>
    5d30:	8b 01       	movw	r16, r22
    5d32:	b3 e0       	ldi	r27, 0x03	; 3
    5d34:	00 0f       	add	r16, r16
    5d36:	11 1f       	adc	r17, r17
    5d38:	ba 95       	dec	r27
    5d3a:	e1 f7       	brne	.-8      	; 0x5d34 <ProcessMixer+0x24>
	temp2 = (int16_t)accSmooth[PITCH] << 3;
    5d3c:	60 91 72 05 	lds	r22, 0x0572
    5d40:	70 91 73 05 	lds	r23, 0x0573
    5d44:	80 91 74 05 	lds	r24, 0x0574
    5d48:	90 91 75 05 	lds	r25, 0x0575
    5d4c:	0e 94 23 3c 	call	0x7846	; 0x7846 <__fixsfsi>
    5d50:	83 e0       	ldi	r24, 0x03	; 3
    5d52:	66 0f       	add	r22, r22
    5d54:	77 1f       	adc	r23, r23
    5d56:	8a 95       	dec	r24
    5d58:	e1 f7       	brne	.-8      	; 0x5d52 <ProcessMixer+0x42>
	int16_t	SensorDataP1[5] = {PID_Gyros[P1][ROLL], PID_Gyros[P1][PITCH], PID_Gyros[P1][YAW], temp1, temp2};
    5d5a:	20 91 85 07 	lds	r18, 0x0785
    5d5e:	30 91 86 07 	lds	r19, 0x0786
    5d62:	3e 8b       	std	Y+22, r19	; 0x16
    5d64:	2d 8b       	std	Y+21, r18	; 0x15
    5d66:	3c 87       	std	Y+12, r19	; 0x0c
    5d68:	2b 87       	std	Y+11, r18	; 0x0b
    5d6a:	40 91 87 07 	lds	r20, 0x0787
    5d6e:	50 91 88 07 	lds	r21, 0x0788
    5d72:	58 8f       	std	Y+24, r21	; 0x18
    5d74:	4f 8b       	std	Y+23, r20	; 0x17
    5d76:	5e 87       	std	Y+14, r21	; 0x0e
    5d78:	4d 87       	std	Y+13, r20	; 0x0d
    5d7a:	20 91 89 07 	lds	r18, 0x0789
    5d7e:	30 91 8a 07 	lds	r19, 0x078A
    5d82:	3a 8f       	std	Y+26, r19	; 0x1a
    5d84:	29 8f       	std	Y+25, r18	; 0x19
    5d86:	38 8b       	std	Y+16, r19	; 0x10
    5d88:	2f 87       	std	Y+15, r18	; 0x0f
    5d8a:	1a 8b       	std	Y+18, r17	; 0x12
    5d8c:	09 8b       	std	Y+17, r16	; 0x11
    5d8e:	7c 8b       	std	Y+20, r23	; 0x14
    5d90:	6b 8b       	std	Y+19, r22	; 0x13
	int16_t	SensorDataP2[5] = {PID_Gyros[P2][ROLL], PID_Gyros[P2][PITCH], PID_Gyros[P2][YAW], temp1, temp2}; 
    5d92:	20 90 8b 07 	lds	r2, 0x078B
    5d96:	30 90 8c 07 	lds	r3, 0x078C
    5d9a:	3a 82       	std	Y+2, r3	; 0x02
    5d9c:	29 82       	std	Y+1, r2	; 0x01
    5d9e:	a0 90 8d 07 	lds	r10, 0x078D
    5da2:	b0 90 8e 07 	lds	r11, 0x078E
    5da6:	bc 82       	std	Y+4, r11	; 0x04
    5da8:	ab 82       	std	Y+3, r10	; 0x03
    5daa:	80 90 8f 07 	lds	r8, 0x078F
    5dae:	90 90 90 07 	lds	r9, 0x0790
    5db2:	9e 82       	std	Y+6, r9	; 0x06
    5db4:	8d 82       	std	Y+5, r8	; 0x05
    5db6:	18 87       	std	Y+8, r17	; 0x08
    5db8:	0f 83       	std	Y+7, r16	; 0x07
    5dba:	7a 87       	std	Y+10, r23	; 0x0a
    5dbc:	69 87       	std	Y+9, r22	; 0x09
		//************************************************************
		// Mix in gyros
		//************************************************************ 

		// P1 gyros
		if (Transition_state < TRANS_P2)
    5dbe:	50 90 0f 05 	lds	r5, 0x050F
		{
			if ((Config.Channel[i].P1_sensors & (1 << RollAcc)) != 0) 		// Only add if acc ON
			{
				if ((Config.Channel[i].P1_scale & (1 << AccRollScale)) != 0)// Scale acc
				{
					P1_solution = P1_solution -  scale32(PID_ACCs[P1][ROLL], Config.Channel[i].P1_aileron_volume * 5); 
    5dc2:	40 91 91 07 	lds	r20, 0x0791
    5dc6:	50 91 92 07 	lds	r21, 0x0792
    5dca:	5c 8f       	std	Y+28, r21	; 0x1c
    5dcc:	4b 8f       	std	Y+27, r20	; 0x1b

			if ((Config.Channel[i].P1_sensors & (1 << PitchAcc)) != 0)
			{
				if ((Config.Channel[i].P1_scale & (1 << AccPitchScale)) != 0)
				{
					P1_solution = P1_solution + scale32(PID_ACCs[P1][PITCH], Config.Channel[i].P1_elevator_volume * 5); 
    5dce:	20 91 93 07 	lds	r18, 0x0793
    5dd2:	30 91 94 07 	lds	r19, 0x0794
    5dd6:	3e 8f       	std	Y+30, r19	; 0x1e
    5dd8:	2d 8f       	std	Y+29, r18	; 0x1d

			if ((Config.Channel[i].P1_sensors & (1 << ZDeltaAcc)) != 0)
			{
				if ((Config.Channel[i].P1_scale & (1 << AccZScale)) != 0)
				{
					P1_solution = P1_solution - scale32(PID_ACCs[P1][YAW], Config.Channel[i].P1_throttle_volume); 
    5dda:	40 91 95 07 	lds	r20, 0x0795
    5dde:	50 91 96 07 	lds	r21, 0x0796
    5de2:	58 a3       	std	Y+32, r21	; 0x20
    5de4:	4f 8f       	std	Y+31, r20	; 0x1f
		{
			if ((Config.Channel[i].P2_sensors & (1 << RollAcc)) != 0) 		// Only add if acc ON
			{
				if ((Config.Channel[i].P2_scale & (1 << AccRollScale)) != 0)// Scale acc
				{
					P2_solution = P2_solution - scale32(PID_ACCs[P2][ROLL], Config.Channel[i].P2_aileron_volume * 5); 
    5de6:	20 91 97 07 	lds	r18, 0x0797
    5dea:	30 91 98 07 	lds	r19, 0x0798
    5dee:	3a a3       	std	Y+34, r19	; 0x22
    5df0:	29 a3       	std	Y+33, r18	; 0x21

			if ((Config.Channel[i].P2_sensors & (1 << PitchAcc)) != 0)
			{
				if ((Config.Channel[i].P2_scale & (1 << AccPitchScale)) != 0)
				{
					P2_solution = P2_solution + scale32(PID_ACCs[P2][PITCH], Config.Channel[i].P2_elevator_volume * 5); 
    5df2:	40 91 99 07 	lds	r20, 0x0799
    5df6:	50 91 9a 07 	lds	r21, 0x079A
    5dfa:	5c a3       	std	Y+36, r21	; 0x24
    5dfc:	4b a3       	std	Y+35, r20	; 0x23

			if ((Config.Channel[i].P2_sensors & (1 << ZDeltaAcc)) != 0)
			{
				if ((Config.Channel[i].P2_scale & (1 << AccZScale)) != 0)
				{
					P2_solution = P2_solution - scale32(PID_ACCs[P2][YAW], Config.Channel[i].P2_throttle_volume); 
    5dfe:	20 91 9b 07 	lds	r18, 0x079B
    5e02:	30 91 9c 07 	lds	r19, 0x079C
    5e06:	3e a3       	std	Y+38, r19	; 0x26
    5e08:	2d a3       	std	Y+37, r18	; 0x25
		if (Transition_state < TRANS_P2)
		{
			// Mix in dedicated RC sources - aileron, elevator and rudder
			if (Config.Channel[i].P1_aileron_volume !=0) 					// Mix in dedicated aileron
			{
				temp2 = scale32(RCinputs[AILERON], Config.Channel[i].P1_aileron_volume);
    5e0a:	40 91 a1 07 	lds	r20, 0x07A1
    5e0e:	50 91 a2 07 	lds	r21, 0x07A2
    5e12:	58 a7       	std	Y+40, r21	; 0x28
    5e14:	4f a3       	std	Y+39, r20	; 0x27
				P1_solution = P1_solution + temp2;
			}
			if (Config.Channel[i].P1_elevator_volume !=0) 					// Mix in dedicated elevator
			{
				temp2 = scale32(RCinputs[ELEVATOR], Config.Channel[i].P1_elevator_volume);
    5e16:	20 91 a3 07 	lds	r18, 0x07A3
    5e1a:	30 91 a4 07 	lds	r19, 0x07A4
    5e1e:	3a a7       	std	Y+42, r19	; 0x2a
    5e20:	29 a7       	std	Y+41, r18	; 0x29
				P1_solution = P1_solution + temp2;
			}
			if (Config.Channel[i].P1_rudder_volume !=0) 					// Mix in dedicated rudder
			{
				temp2 = scale32(RCinputs[RUDDER], Config.Channel[i].P1_rudder_volume);
    5e22:	40 91 a5 07 	lds	r20, 0x07A5
    5e26:	50 91 a6 07 	lds	r21, 0x07A6
    5e2a:	5c a7       	std	Y+44, r21	; 0x2c
    5e2c:	4b a7       	std	Y+43, r20	; 0x2b
    5e2e:	c1 2c       	mov	r12, r1
    5e30:	d1 2c       	mov	r13, r1
				{
					P2_solution = P2_solution + PID_Gyros[P2][ROLL];		// Reverse if volume negative
				}
				else
				{
					P2_solution = P2_solution - PID_Gyros[P2][ROLL];
    5e32:	22 27       	eor	r18, r18
    5e34:	33 27       	eor	r19, r19
    5e36:	22 19       	sub	r18, r2
    5e38:	33 09       	sbc	r19, r3
    5e3a:	3e a7       	std	Y+46, r19	; 0x2e
    5e3c:	2d a7       	std	Y+45, r18	; 0x2d
				{
					P1_solution = P1_solution + PID_Gyros[P1][ROLL];		// Reverse if volume negative
				}
				else
				{
					P1_solution = P1_solution - PID_Gyros[P1][ROLL];
    5e3e:	4d 89       	ldd	r20, Y+21	; 0x15
    5e40:	5e 89       	ldd	r21, Y+22	; 0x16
    5e42:	51 95       	neg	r21
    5e44:	41 95       	neg	r20
    5e46:	51 09       	sbc	r21, r1
    5e48:	58 ab       	std	Y+48, r21	; 0x30
    5e4a:	4f a7       	std	Y+47, r20	; 0x2f
		//************************************************************
		// Mix in gyros
		//************************************************************ 

		// P1 gyros
		if (Transition_state < TRANS_P2)
    5e4c:	58 e0       	ldi	r21, 0x08	; 8
    5e4e:	55 15       	cp	r21, r5
    5e50:	08 f4       	brcc	.+2      	; 0x5e54 <ProcessMixer+0x144>
    5e52:	6d c0       	rjmp	.+218    	; 0x5f2e <ProcessMixer+0x21e>
    5e54:	86 01       	movw	r16, r12
    5e56:	02 58       	subi	r16, 0x82	; 130
    5e58:	1a 4f       	sbci	r17, 0xFA	; 250
    5e5a:	f8 01       	movw	r30, r16
    5e5c:	ee 55       	subi	r30, 0x5E	; 94
    5e5e:	ff 4f       	sbci	r31, 0xFF	; 255
		{
			if ((Config.Channel[i].P1_sensors & (1 << RollGyro)) != 0) 		// Only add if gyro ON
    5e60:	70 80       	ld	r7, Z
    5e62:	70 fe       	sbrs	r7, 0
    5e64:	19 c0       	rjmp	.+50     	; 0x5e98 <ProcessMixer+0x188>
    5e66:	32 96       	adiw	r30, 0x02	; 2
			{
				if ((Config.Channel[i].P1_scale & (1 << RollScale)) != 0)	// Scale gyro
    5e68:	80 81       	ld	r24, Z
    5e6a:	38 97       	sbiw	r30, 0x08	; 8
    5e6c:	80 ff       	sbrs	r24, 0
    5e6e:	0e c0       	rjmp	.+28     	; 0x5e8c <ProcessMixer+0x17c>
				{
					P1_solution = P1_solution - scale32(PID_Gyros[P1][ROLL], Config.Channel[i].P1_aileron_volume * 5); 
    5e70:	60 81       	ld	r22, Z
    5e72:	85 e0       	ldi	r24, 0x05	; 5
    5e74:	68 02       	muls	r22, r24
    5e76:	b0 01       	movw	r22, r0
    5e78:	11 24       	eor	r1, r1
    5e7a:	8d 89       	ldd	r24, Y+21	; 0x15
    5e7c:	9e 89       	ldd	r25, Y+22	; 0x16
    5e7e:	0e 94 65 2e 	call	0x5cca	; 0x5cca <scale32>
    5e82:	ee 24       	eor	r14, r14
    5e84:	ff 24       	eor	r15, r15
    5e86:	e8 1a       	sub	r14, r24
    5e88:	f9 0a       	sbc	r15, r25
    5e8a:	0b c0       	rjmp	.+22     	; 0x5ea2 <ProcessMixer+0x192>
				}
				else if (Config.Channel[i].P1_aileron_volume < 0 )
    5e8c:	80 81       	ld	r24, Z
    5e8e:	87 fd       	sbrc	r24, 7
    5e90:	06 c0       	rjmp	.+12     	; 0x5e9e <ProcessMixer+0x18e>
				{
					P1_solution = P1_solution + PID_Gyros[P1][ROLL];		// Reverse if volume negative
				}
				else
				{
					P1_solution = P1_solution - PID_Gyros[P1][ROLL];
    5e92:	ef a4       	ldd	r14, Y+47	; 0x2f
    5e94:	f8 a8       	ldd	r15, Y+48	; 0x30
    5e96:	05 c0       	rjmp	.+10     	; 0x5ea2 <ProcessMixer+0x192>
	{
		//************************************************************
		// Zero each channel value to start
		//************************************************************

		P1_solution = 0;
    5e98:	e1 2c       	mov	r14, r1
    5e9a:	f1 2c       	mov	r15, r1
    5e9c:	02 c0       	rjmp	.+4      	; 0x5ea2 <ProcessMixer+0x192>
				{
					P1_solution = P1_solution - scale32(PID_Gyros[P1][ROLL], Config.Channel[i].P1_aileron_volume * 5); 
				}
				else if (Config.Channel[i].P1_aileron_volume < 0 )
				{
					P1_solution = P1_solution + PID_Gyros[P1][ROLL];		// Reverse if volume negative
    5e9e:	ed 88       	ldd	r14, Y+21	; 0x15
    5ea0:	fe 88       	ldd	r15, Y+22	; 0x16
				else
				{
					P1_solution = P1_solution - PID_Gyros[P1][ROLL];
				}
			}
			if ((Config.Channel[i].P1_sensors & (1 << PitchGyro)) != 0)
    5ea2:	71 fe       	sbrs	r7, 1
    5ea4:	1f c0       	rjmp	.+62     	; 0x5ee4 <ProcessMixer+0x1d4>
    5ea6:	f8 01       	movw	r30, r16
    5ea8:	ec 55       	subi	r30, 0x5C	; 92
    5eaa:	ff 4f       	sbci	r31, 0xFF	; 255
			{
				if ((Config.Channel[i].P1_scale & (1 << PitchScale)) != 0)
    5eac:	80 81       	ld	r24, Z
    5eae:	36 97       	sbiw	r30, 0x06	; 6
    5eb0:	81 ff       	sbrs	r24, 1
    5eb2:	0c c0       	rjmp	.+24     	; 0x5ecc <ProcessMixer+0x1bc>
				{
					P1_solution = P1_solution + scale32(PID_Gyros[P1][PITCH], Config.Channel[i].P1_elevator_volume * 5); 
    5eb4:	60 81       	ld	r22, Z
    5eb6:	95 e0       	ldi	r25, 0x05	; 5
    5eb8:	69 02       	muls	r22, r25
    5eba:	b0 01       	movw	r22, r0
    5ebc:	11 24       	eor	r1, r1
    5ebe:	8f 89       	ldd	r24, Y+23	; 0x17
    5ec0:	98 8d       	ldd	r25, Y+24	; 0x18
    5ec2:	0e 94 65 2e 	call	0x5cca	; 0x5cca <scale32>
    5ec6:	e8 0e       	add	r14, r24
    5ec8:	f9 1e       	adc	r15, r25
    5eca:	0c c0       	rjmp	.+24     	; 0x5ee4 <ProcessMixer+0x1d4>
				}
				else if (Config.Channel[i].P1_elevator_volume < 0 )
    5ecc:	80 81       	ld	r24, Z
    5ece:	87 ff       	sbrs	r24, 7
    5ed0:	05 c0       	rjmp	.+10     	; 0x5edc <ProcessMixer+0x1cc>
				{
					P1_solution = P1_solution - PID_Gyros[P1][PITCH];		// Reverse if volume negative
    5ed2:	2f 89       	ldd	r18, Y+23	; 0x17
    5ed4:	38 8d       	ldd	r19, Y+24	; 0x18
    5ed6:	e2 1a       	sub	r14, r18
    5ed8:	f3 0a       	sbc	r15, r19
    5eda:	04 c0       	rjmp	.+8      	; 0x5ee4 <ProcessMixer+0x1d4>
				}
				else
				{
					P1_solution = P1_solution + PID_Gyros[P1][PITCH];
    5edc:	4f 89       	ldd	r20, Y+23	; 0x17
    5ede:	58 8d       	ldd	r21, Y+24	; 0x18
    5ee0:	e4 0e       	add	r14, r20
    5ee2:	f5 1e       	adc	r15, r21
				}
			}
			if ((Config.Channel[i].P1_sensors & (1 << YawGyro)) != 0)
    5ee4:	72 fe       	sbrs	r7, 2
    5ee6:	1f c0       	rjmp	.+62     	; 0x5f26 <ProcessMixer+0x216>
    5ee8:	f8 01       	movw	r30, r16
    5eea:	ec 55       	subi	r30, 0x5C	; 92
    5eec:	ff 4f       	sbci	r31, 0xFF	; 255
			{
				if ((Config.Channel[i].P1_scale & (1 << YawScale)) != 0)
    5eee:	80 81       	ld	r24, Z
    5ef0:	34 97       	sbiw	r30, 0x04	; 4
    5ef2:	82 ff       	sbrs	r24, 2
    5ef4:	0c c0       	rjmp	.+24     	; 0x5f0e <ProcessMixer+0x1fe>
				{
					P1_solution = P1_solution + scale32(PID_Gyros[P1][YAW], Config.Channel[i].P1_rudder_volume * 5); 
    5ef6:	60 81       	ld	r22, Z
    5ef8:	55 e0       	ldi	r21, 0x05	; 5
    5efa:	65 02       	muls	r22, r21
    5efc:	b0 01       	movw	r22, r0
    5efe:	11 24       	eor	r1, r1
    5f00:	89 8d       	ldd	r24, Y+25	; 0x19
    5f02:	9a 8d       	ldd	r25, Y+26	; 0x1a
    5f04:	0e 94 65 2e 	call	0x5cca	; 0x5cca <scale32>
    5f08:	e8 0e       	add	r14, r24
    5f0a:	f9 1e       	adc	r15, r25
    5f0c:	0c c0       	rjmp	.+24     	; 0x5f26 <ProcessMixer+0x216>
				}
				else if (Config.Channel[i].P1_rudder_volume < 0 )
    5f0e:	80 81       	ld	r24, Z
    5f10:	87 ff       	sbrs	r24, 7
    5f12:	05 c0       	rjmp	.+10     	; 0x5f1e <ProcessMixer+0x20e>
				{
					P1_solution = P1_solution - PID_Gyros[P1][YAW];			// Reverse if volume negative
    5f14:	29 8d       	ldd	r18, Y+25	; 0x19
    5f16:	3a 8d       	ldd	r19, Y+26	; 0x1a
    5f18:	e2 1a       	sub	r14, r18
    5f1a:	f3 0a       	sbc	r15, r19
    5f1c:	04 c0       	rjmp	.+8      	; 0x5f26 <ProcessMixer+0x216>
				}
				else
				{
					P1_solution = P1_solution + PID_Gyros[P1][YAW];
    5f1e:	49 8d       	ldd	r20, Y+25	; 0x19
    5f20:	5a 8d       	ldd	r21, Y+26	; 0x1a
    5f22:	e4 0e       	add	r14, r20
    5f24:	f5 1e       	adc	r15, r21
				}
			}
		}

		// P2 gyros
		if (Transition_state > TRANS_P1)
    5f26:	55 20       	and	r5, r5
    5f28:	09 f4       	brne	.+2      	; 0x5f2c <ProcessMixer+0x21c>
    5f2a:	66 c0       	rjmp	.+204    	; 0x5ff8 <ProcessMixer+0x2e8>
    5f2c:	02 c0       	rjmp	.+4      	; 0x5f32 <ProcessMixer+0x222>
	{
		//************************************************************
		// Zero each channel value to start
		//************************************************************

		P1_solution = 0;
    5f2e:	e1 2c       	mov	r14, r1
    5f30:	f1 2c       	mov	r15, r1
    5f32:	c6 01       	movw	r24, r12
    5f34:	82 58       	subi	r24, 0x82	; 130
    5f36:	9a 4f       	sbci	r25, 0xFA	; 250
    5f38:	3c 01       	movw	r6, r24
    5f3a:	fc 01       	movw	r30, r24
    5f3c:	ed 55       	subi	r30, 0x5D	; 93
    5f3e:	ff 4f       	sbci	r31, 0xFF	; 255
		}

		// P2 gyros
		if (Transition_state > TRANS_P1)
		{
			if ((Config.Channel[i].P2_sensors & (1 << RollGyro)) != 0) 		// Only add if gyro ON
    5f40:	40 80       	ld	r4, Z
    5f42:	40 fe       	sbrs	r4, 0
    5f44:	18 c0       	rjmp	.+48     	; 0x5f76 <ProcessMixer+0x266>
    5f46:	32 96       	adiw	r30, 0x02	; 2
			{
				if ((Config.Channel[i].P2_scale & (1 << RollScale)) != 0)	// Scale gyro
    5f48:	80 81       	ld	r24, Z
    5f4a:	38 97       	sbiw	r30, 0x08	; 8
    5f4c:	80 ff       	sbrs	r24, 0
    5f4e:	0d c0       	rjmp	.+26     	; 0x5f6a <ProcessMixer+0x25a>
				{
					P2_solution = P2_solution - scale32(PID_Gyros[P2][ROLL], Config.Channel[i].P2_aileron_volume * 5); 
    5f50:	60 81       	ld	r22, Z
    5f52:	95 e0       	ldi	r25, 0x05	; 5
    5f54:	69 02       	muls	r22, r25
    5f56:	b0 01       	movw	r22, r0
    5f58:	11 24       	eor	r1, r1
    5f5a:	c1 01       	movw	r24, r2
    5f5c:	0e 94 65 2e 	call	0x5cca	; 0x5cca <scale32>
    5f60:	00 27       	eor	r16, r16
    5f62:	11 27       	eor	r17, r17
    5f64:	08 1b       	sub	r16, r24
    5f66:	19 0b       	sbc	r17, r25
    5f68:	0a c0       	rjmp	.+20     	; 0x5f7e <ProcessMixer+0x26e>
				}
				else if (Config.Channel[i].P2_aileron_volume < 0 )
    5f6a:	80 81       	ld	r24, Z
    5f6c:	87 fd       	sbrc	r24, 7
    5f6e:	06 c0       	rjmp	.+12     	; 0x5f7c <ProcessMixer+0x26c>
				{
					P2_solution = P2_solution + PID_Gyros[P2][ROLL];		// Reverse if volume negative
				}
				else
				{
					P2_solution = P2_solution - PID_Gyros[P2][ROLL];
    5f70:	0d a5       	ldd	r16, Y+45	; 0x2d
    5f72:	1e a5       	ldd	r17, Y+46	; 0x2e
    5f74:	04 c0       	rjmp	.+8      	; 0x5f7e <ProcessMixer+0x26e>
		//************************************************************
		// Zero each channel value to start
		//************************************************************

		P1_solution = 0;
		P2_solution = 0;
    5f76:	00 e0       	ldi	r16, 0x00	; 0
    5f78:	10 e0       	ldi	r17, 0x00	; 0
    5f7a:	01 c0       	rjmp	.+2      	; 0x5f7e <ProcessMixer+0x26e>
				{
					P2_solution = P2_solution - scale32(PID_Gyros[P2][ROLL], Config.Channel[i].P2_aileron_volume * 5); 
				}
				else if (Config.Channel[i].P2_aileron_volume < 0 )
				{
					P2_solution = P2_solution + PID_Gyros[P2][ROLL];		// Reverse if volume negative
    5f7c:	81 01       	movw	r16, r2
				else
				{
					P2_solution = P2_solution - PID_Gyros[P2][ROLL];
				}
			}
			if ((Config.Channel[i].P2_sensors & (1 << PitchGyro)) != 0)
    5f7e:	41 fe       	sbrs	r4, 1
    5f80:	1a c0       	rjmp	.+52     	; 0x5fb6 <ProcessMixer+0x2a6>
    5f82:	f3 01       	movw	r30, r6
    5f84:	eb 55       	subi	r30, 0x5B	; 91
    5f86:	ff 4f       	sbci	r31, 0xFF	; 255
			{
				if ((Config.Channel[i].P2_scale & (1 << PitchScale)) != 0)
    5f88:	80 81       	ld	r24, Z
    5f8a:	36 97       	sbiw	r30, 0x06	; 6
    5f8c:	81 ff       	sbrs	r24, 1
    5f8e:	0b c0       	rjmp	.+22     	; 0x5fa6 <ProcessMixer+0x296>
				{
					P2_solution = P2_solution + scale32(PID_Gyros[P2][PITCH], Config.Channel[i].P2_elevator_volume * 5); 
    5f90:	60 81       	ld	r22, Z
    5f92:	a5 e0       	ldi	r26, 0x05	; 5
    5f94:	6a 02       	muls	r22, r26
    5f96:	b0 01       	movw	r22, r0
    5f98:	11 24       	eor	r1, r1
    5f9a:	c5 01       	movw	r24, r10
    5f9c:	0e 94 65 2e 	call	0x5cca	; 0x5cca <scale32>
    5fa0:	08 0f       	add	r16, r24
    5fa2:	19 1f       	adc	r17, r25
    5fa4:	08 c0       	rjmp	.+16     	; 0x5fb6 <ProcessMixer+0x2a6>
				}
				else if (Config.Channel[i].P2_elevator_volume < 0 )
    5fa6:	80 81       	ld	r24, Z
    5fa8:	87 ff       	sbrs	r24, 7
    5faa:	03 c0       	rjmp	.+6      	; 0x5fb2 <ProcessMixer+0x2a2>
				{
					P2_solution = P2_solution - PID_Gyros[P2][PITCH];		// Reverse if volume negative
    5fac:	0a 19       	sub	r16, r10
    5fae:	1b 09       	sbc	r17, r11
    5fb0:	02 c0       	rjmp	.+4      	; 0x5fb6 <ProcessMixer+0x2a6>
				}
				else
				{
					P2_solution = P2_solution + PID_Gyros[P2][PITCH];
    5fb2:	0a 0d       	add	r16, r10
    5fb4:	1b 1d       	adc	r17, r11
				}
			}
			if ((Config.Channel[i].P2_sensors & (1 << YawGyro)) != 0)
    5fb6:	42 fe       	sbrs	r4, 2
    5fb8:	1a c0       	rjmp	.+52     	; 0x5fee <ProcessMixer+0x2de>
    5fba:	f3 01       	movw	r30, r6
    5fbc:	eb 55       	subi	r30, 0x5B	; 91
    5fbe:	ff 4f       	sbci	r31, 0xFF	; 255
			{
				if ((Config.Channel[i].P2_scale & (1 << YawScale)) != 0)
    5fc0:	80 81       	ld	r24, Z
    5fc2:	34 97       	sbiw	r30, 0x04	; 4
    5fc4:	82 ff       	sbrs	r24, 2
    5fc6:	0b c0       	rjmp	.+22     	; 0x5fde <ProcessMixer+0x2ce>
				{
					P2_solution = P2_solution + scale32(PID_Gyros[P2][YAW], Config.Channel[i].P2_rudder_volume * 5); 
    5fc8:	60 81       	ld	r22, Z
    5fca:	b5 e0       	ldi	r27, 0x05	; 5
    5fcc:	6b 02       	muls	r22, r27
    5fce:	b0 01       	movw	r22, r0
    5fd0:	11 24       	eor	r1, r1
    5fd2:	c4 01       	movw	r24, r8
    5fd4:	0e 94 65 2e 	call	0x5cca	; 0x5cca <scale32>
    5fd8:	08 0f       	add	r16, r24
    5fda:	19 1f       	adc	r17, r25
    5fdc:	08 c0       	rjmp	.+16     	; 0x5fee <ProcessMixer+0x2de>
				}
				else if (Config.Channel[i].P2_rudder_volume < 0 )
    5fde:	80 81       	ld	r24, Z
    5fe0:	87 ff       	sbrs	r24, 7
    5fe2:	03 c0       	rjmp	.+6      	; 0x5fea <ProcessMixer+0x2da>
				{
					P2_solution = P2_solution - PID_Gyros[P2][YAW];			// Reverse if volume negative
    5fe4:	08 19       	sub	r16, r8
    5fe6:	19 09       	sbc	r17, r9
    5fe8:	02 c0       	rjmp	.+4      	; 0x5fee <ProcessMixer+0x2de>
				}
				else
				{
					P2_solution = P2_solution + PID_Gyros[P2][YAW];
    5fea:	08 0d       	add	r16, r8
    5fec:	19 1d       	adc	r17, r9

		//************************************************************
		// Mix in accelerometers
		//************************************************************ 
		// P1
		if (Transition_state < TRANS_P2)
    5fee:	e8 e0       	ldi	r30, 0x08	; 8
    5ff0:	e5 15       	cp	r30, r5
    5ff2:	08 f4       	brcc	.+2      	; 0x5ff6 <ProcessMixer+0x2e6>
    5ff4:	6e c0       	rjmp	.+220    	; 0x60d2 <ProcessMixer+0x3c2>
    5ff6:	02 c0       	rjmp	.+4      	; 0x5ffc <ProcessMixer+0x2ec>
		//************************************************************
		// Zero each channel value to start
		//************************************************************

		P1_solution = 0;
		P2_solution = 0;
    5ff8:	00 e0       	ldi	r16, 0x00	; 0
    5ffa:	10 e0       	ldi	r17, 0x00	; 0
    5ffc:	96 01       	movw	r18, r12
    5ffe:	22 58       	subi	r18, 0x82	; 130
    6000:	3a 4f       	sbci	r19, 0xFA	; 250
    6002:	39 01       	movw	r6, r18
    6004:	f9 01       	movw	r30, r18
    6006:	ee 55       	subi	r30, 0x5E	; 94
    6008:	ff 4f       	sbci	r31, 0xFF	; 255
		// Mix in accelerometers
		//************************************************************ 
		// P1
		if (Transition_state < TRANS_P2)
		{
			if ((Config.Channel[i].P1_sensors & (1 << RollAcc)) != 0) 		// Only add if acc ON
    600a:	40 80       	ld	r4, Z
    600c:	43 fe       	sbrs	r4, 3
    600e:	1d c0       	rjmp	.+58     	; 0x604a <ProcessMixer+0x33a>
    6010:	32 96       	adiw	r30, 0x02	; 2
			{
				if ((Config.Channel[i].P1_scale & (1 << AccRollScale)) != 0)// Scale acc
    6012:	80 81       	ld	r24, Z
    6014:	38 97       	sbiw	r30, 0x08	; 8
    6016:	83 ff       	sbrs	r24, 3
    6018:	0c c0       	rjmp	.+24     	; 0x6032 <ProcessMixer+0x322>
				{
					P1_solution = P1_solution -  scale32(PID_ACCs[P1][ROLL], Config.Channel[i].P1_aileron_volume * 5); 
    601a:	60 81       	ld	r22, Z
    601c:	35 e0       	ldi	r19, 0x05	; 5
    601e:	63 02       	muls	r22, r19
    6020:	b0 01       	movw	r22, r0
    6022:	11 24       	eor	r1, r1
    6024:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6026:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6028:	0e 94 65 2e 	call	0x5cca	; 0x5cca <scale32>
    602c:	e8 1a       	sub	r14, r24
    602e:	f9 0a       	sbc	r15, r25
    6030:	0c c0       	rjmp	.+24     	; 0x604a <ProcessMixer+0x33a>
				}
				else if (Config.Channel[i].P1_aileron_volume < 0 )
    6032:	80 81       	ld	r24, Z
    6034:	87 ff       	sbrs	r24, 7
    6036:	05 c0       	rjmp	.+10     	; 0x6042 <ProcessMixer+0x332>
				{
					P1_solution = P1_solution + PID_ACCs[P1][ROLL];			// Reverse if volume negative
    6038:	4b 8d       	ldd	r20, Y+27	; 0x1b
    603a:	5c 8d       	ldd	r21, Y+28	; 0x1c
    603c:	e4 0e       	add	r14, r20
    603e:	f5 1e       	adc	r15, r21
    6040:	04 c0       	rjmp	.+8      	; 0x604a <ProcessMixer+0x33a>
				}
				else
				{
					P1_solution = P1_solution - PID_ACCs[P1][ROLL];			// or simply add
    6042:	2b 8d       	ldd	r18, Y+27	; 0x1b
    6044:	3c 8d       	ldd	r19, Y+28	; 0x1c
    6046:	e2 1a       	sub	r14, r18
    6048:	f3 0a       	sbc	r15, r19
				}
			}

			if ((Config.Channel[i].P1_sensors & (1 << PitchAcc)) != 0)
    604a:	44 fe       	sbrs	r4, 4
    604c:	1f c0       	rjmp	.+62     	; 0x608c <ProcessMixer+0x37c>
    604e:	f3 01       	movw	r30, r6
    6050:	ec 55       	subi	r30, 0x5C	; 92
    6052:	ff 4f       	sbci	r31, 0xFF	; 255
			{
				if ((Config.Channel[i].P1_scale & (1 << AccPitchScale)) != 0)
    6054:	80 81       	ld	r24, Z
    6056:	36 97       	sbiw	r30, 0x06	; 6
    6058:	84 ff       	sbrs	r24, 4
    605a:	0c c0       	rjmp	.+24     	; 0x6074 <ProcessMixer+0x364>
				{
					P1_solution = P1_solution + scale32(PID_ACCs[P1][PITCH], Config.Channel[i].P1_elevator_volume * 5); 
    605c:	60 81       	ld	r22, Z
    605e:	35 e0       	ldi	r19, 0x05	; 5
    6060:	63 02       	muls	r22, r19
    6062:	b0 01       	movw	r22, r0
    6064:	11 24       	eor	r1, r1
    6066:	8d 8d       	ldd	r24, Y+29	; 0x1d
    6068:	9e 8d       	ldd	r25, Y+30	; 0x1e
    606a:	0e 94 65 2e 	call	0x5cca	; 0x5cca <scale32>
    606e:	e8 0e       	add	r14, r24
    6070:	f9 1e       	adc	r15, r25
    6072:	0c c0       	rjmp	.+24     	; 0x608c <ProcessMixer+0x37c>
				}
				else if (Config.Channel[i].P1_elevator_volume < 0 )
    6074:	80 81       	ld	r24, Z
    6076:	87 ff       	sbrs	r24, 7
    6078:	05 c0       	rjmp	.+10     	; 0x6084 <ProcessMixer+0x374>
				{
					P1_solution = P1_solution - PID_ACCs[P1][PITCH];		// Reverse if volume negative
    607a:	4d 8d       	ldd	r20, Y+29	; 0x1d
    607c:	5e 8d       	ldd	r21, Y+30	; 0x1e
    607e:	e4 1a       	sub	r14, r20
    6080:	f5 0a       	sbc	r15, r21
    6082:	04 c0       	rjmp	.+8      	; 0x608c <ProcessMixer+0x37c>
				}
				else
				{
					P1_solution = P1_solution + PID_ACCs[P1][PITCH];
    6084:	2d 8d       	ldd	r18, Y+29	; 0x1d
    6086:	3e 8d       	ldd	r19, Y+30	; 0x1e
    6088:	e2 0e       	add	r14, r18
    608a:	f3 1e       	adc	r15, r19
				}
			}

			if ((Config.Channel[i].P1_sensors & (1 << ZDeltaAcc)) != 0)
    608c:	45 fe       	sbrs	r4, 5
    608e:	1e c0       	rjmp	.+60     	; 0x60cc <ProcessMixer+0x3bc>
    6090:	f3 01       	movw	r30, r6
    6092:	ec 55       	subi	r30, 0x5C	; 92
    6094:	ff 4f       	sbci	r31, 0xFF	; 255
			{
				if ((Config.Channel[i].P1_scale & (1 << AccZScale)) != 0)
    6096:	80 81       	ld	r24, Z
    6098:	3b 97       	sbiw	r30, 0x0b	; 11
    609a:	85 ff       	sbrs	r24, 5
    609c:	0b c0       	rjmp	.+22     	; 0x60b4 <ProcessMixer+0x3a4>
				{
					P1_solution = P1_solution - scale32(PID_ACCs[P1][YAW], Config.Channel[i].P1_throttle_volume); 
    609e:	60 81       	ld	r22, Z
    60a0:	77 27       	eor	r23, r23
    60a2:	67 fd       	sbrc	r22, 7
    60a4:	70 95       	com	r23
    60a6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    60a8:	98 a1       	ldd	r25, Y+32	; 0x20
    60aa:	0e 94 65 2e 	call	0x5cca	; 0x5cca <scale32>
    60ae:	e8 1a       	sub	r14, r24
    60b0:	f9 0a       	sbc	r15, r25
    60b2:	0c c0       	rjmp	.+24     	; 0x60cc <ProcessMixer+0x3bc>
				}
				else if (Config.Channel[i].P1_throttle_volume < 0 )
    60b4:	80 81       	ld	r24, Z
    60b6:	87 ff       	sbrs	r24, 7
    60b8:	05 c0       	rjmp	.+10     	; 0x60c4 <ProcessMixer+0x3b4>
				{
					P1_solution = P1_solution + PID_ACCs[P1][YAW];			// Reverse if volume negative
    60ba:	4f 8d       	ldd	r20, Y+31	; 0x1f
    60bc:	58 a1       	ldd	r21, Y+32	; 0x20
    60be:	e4 0e       	add	r14, r20
    60c0:	f5 1e       	adc	r15, r21
    60c2:	04 c0       	rjmp	.+8      	; 0x60cc <ProcessMixer+0x3bc>
				}
				else
				{
					P1_solution = P1_solution - PID_ACCs[P1][YAW];
    60c4:	2f 8d       	ldd	r18, Y+31	; 0x1f
    60c6:	38 a1       	ldd	r19, Y+32	; 0x20
    60c8:	e2 1a       	sub	r14, r18
    60ca:	f3 0a       	sbc	r15, r19
				}
			}
		}

		// P2
		if (Transition_state > TRANS_P1)
    60cc:	55 20       	and	r5, r5
    60ce:	09 f4       	brne	.+2      	; 0x60d2 <ProcessMixer+0x3c2>
    60d0:	6c c0       	rjmp	.+216    	; 0x61aa <ProcessMixer+0x49a>
    60d2:	a6 01       	movw	r20, r12
    60d4:	42 58       	subi	r20, 0x82	; 130
    60d6:	5a 4f       	sbci	r21, 0xFA	; 250
    60d8:	3a 01       	movw	r6, r20
    60da:	fa 01       	movw	r30, r20
    60dc:	ed 55       	subi	r30, 0x5D	; 93
    60de:	ff 4f       	sbci	r31, 0xFF	; 255
		{
			if ((Config.Channel[i].P2_sensors & (1 << RollAcc)) != 0) 		// Only add if acc ON
    60e0:	40 80       	ld	r4, Z
    60e2:	43 fe       	sbrs	r4, 3
    60e4:	1d c0       	rjmp	.+58     	; 0x6120 <ProcessMixer+0x410>
    60e6:	32 96       	adiw	r30, 0x02	; 2
			{
				if ((Config.Channel[i].P2_scale & (1 << AccRollScale)) != 0)// Scale acc
    60e8:	80 81       	ld	r24, Z
    60ea:	38 97       	sbiw	r30, 0x08	; 8
    60ec:	83 ff       	sbrs	r24, 3
    60ee:	0c c0       	rjmp	.+24     	; 0x6108 <ProcessMixer+0x3f8>
				{
					P2_solution = P2_solution - scale32(PID_ACCs[P2][ROLL], Config.Channel[i].P2_aileron_volume * 5); 
    60f0:	60 81       	ld	r22, Z
    60f2:	55 e0       	ldi	r21, 0x05	; 5
    60f4:	65 02       	muls	r22, r21
    60f6:	b0 01       	movw	r22, r0
    60f8:	11 24       	eor	r1, r1
    60fa:	89 a1       	ldd	r24, Y+33	; 0x21
    60fc:	9a a1       	ldd	r25, Y+34	; 0x22
    60fe:	0e 94 65 2e 	call	0x5cca	; 0x5cca <scale32>
    6102:	08 1b       	sub	r16, r24
    6104:	19 0b       	sbc	r17, r25
    6106:	0c c0       	rjmp	.+24     	; 0x6120 <ProcessMixer+0x410>
				}
				else if (Config.Channel[i].P2_aileron_volume < 0 )
    6108:	80 81       	ld	r24, Z
    610a:	87 ff       	sbrs	r24, 7
    610c:	05 c0       	rjmp	.+10     	; 0x6118 <ProcessMixer+0x408>
				{
					P2_solution = P2_solution + PID_ACCs[P2][ROLL];			// Reverse if volume negative
    610e:	29 a1       	ldd	r18, Y+33	; 0x21
    6110:	3a a1       	ldd	r19, Y+34	; 0x22
    6112:	02 0f       	add	r16, r18
    6114:	13 1f       	adc	r17, r19
    6116:	04 c0       	rjmp	.+8      	; 0x6120 <ProcessMixer+0x410>
				}
				else
				{
					P2_solution = P2_solution - PID_ACCs[P2][ROLL];			// or simply add
    6118:	49 a1       	ldd	r20, Y+33	; 0x21
    611a:	5a a1       	ldd	r21, Y+34	; 0x22
    611c:	04 1b       	sub	r16, r20
    611e:	15 0b       	sbc	r17, r21
				}
			}

			if ((Config.Channel[i].P2_sensors & (1 << PitchAcc)) != 0)
    6120:	44 fe       	sbrs	r4, 4
    6122:	1f c0       	rjmp	.+62     	; 0x6162 <ProcessMixer+0x452>
    6124:	f3 01       	movw	r30, r6
    6126:	eb 55       	subi	r30, 0x5B	; 91
    6128:	ff 4f       	sbci	r31, 0xFF	; 255
			{
				if ((Config.Channel[i].P2_scale & (1 << AccPitchScale)) != 0)
    612a:	80 81       	ld	r24, Z
    612c:	36 97       	sbiw	r30, 0x06	; 6
    612e:	84 ff       	sbrs	r24, 4
    6130:	0c c0       	rjmp	.+24     	; 0x614a <ProcessMixer+0x43a>
				{
					P2_solution = P2_solution + scale32(PID_ACCs[P2][PITCH], Config.Channel[i].P2_elevator_volume * 5); 
    6132:	60 81       	ld	r22, Z
    6134:	55 e0       	ldi	r21, 0x05	; 5
    6136:	65 02       	muls	r22, r21
    6138:	b0 01       	movw	r22, r0
    613a:	11 24       	eor	r1, r1
    613c:	8b a1       	ldd	r24, Y+35	; 0x23
    613e:	9c a1       	ldd	r25, Y+36	; 0x24
    6140:	0e 94 65 2e 	call	0x5cca	; 0x5cca <scale32>
    6144:	08 0f       	add	r16, r24
    6146:	19 1f       	adc	r17, r25
    6148:	0c c0       	rjmp	.+24     	; 0x6162 <ProcessMixer+0x452>
				}
				else if (Config.Channel[i].P2_elevator_volume < 0 )
    614a:	80 81       	ld	r24, Z
    614c:	87 ff       	sbrs	r24, 7
    614e:	05 c0       	rjmp	.+10     	; 0x615a <ProcessMixer+0x44a>
				{

					P2_solution = P2_solution - PID_ACCs[P2][PITCH];		// Reverse if volume negative
    6150:	2b a1       	ldd	r18, Y+35	; 0x23
    6152:	3c a1       	ldd	r19, Y+36	; 0x24
    6154:	02 1b       	sub	r16, r18
    6156:	13 0b       	sbc	r17, r19
    6158:	04 c0       	rjmp	.+8      	; 0x6162 <ProcessMixer+0x452>
				}
				else
				{
					P2_solution = P2_solution + PID_ACCs[P2][PITCH];
    615a:	4b a1       	ldd	r20, Y+35	; 0x23
    615c:	5c a1       	ldd	r21, Y+36	; 0x24
    615e:	04 0f       	add	r16, r20
    6160:	15 1f       	adc	r17, r21
				}
			}

			if ((Config.Channel[i].P2_sensors & (1 << ZDeltaAcc)) != 0)
    6162:	45 fe       	sbrs	r4, 5
    6164:	1e c0       	rjmp	.+60     	; 0x61a2 <ProcessMixer+0x492>
    6166:	f3 01       	movw	r30, r6
    6168:	eb 55       	subi	r30, 0x5B	; 91
    616a:	ff 4f       	sbci	r31, 0xFF	; 255
			{
				if ((Config.Channel[i].P2_scale & (1 << AccZScale)) != 0)
    616c:	80 81       	ld	r24, Z
    616e:	3b 97       	sbiw	r30, 0x0b	; 11
    6170:	85 ff       	sbrs	r24, 5
    6172:	0b c0       	rjmp	.+22     	; 0x618a <ProcessMixer+0x47a>
				{
					P2_solution = P2_solution - scale32(PID_ACCs[P2][YAW], Config.Channel[i].P2_throttle_volume); 
    6174:	60 81       	ld	r22, Z
    6176:	77 27       	eor	r23, r23
    6178:	67 fd       	sbrc	r22, 7
    617a:	70 95       	com	r23
    617c:	8d a1       	ldd	r24, Y+37	; 0x25
    617e:	9e a1       	ldd	r25, Y+38	; 0x26
    6180:	0e 94 65 2e 	call	0x5cca	; 0x5cca <scale32>
    6184:	08 1b       	sub	r16, r24
    6186:	19 0b       	sbc	r17, r25
    6188:	0c c0       	rjmp	.+24     	; 0x61a2 <ProcessMixer+0x492>
				}
				else if (Config.Channel[i].P2_throttle_volume < 0 )
    618a:	80 81       	ld	r24, Z
    618c:	87 ff       	sbrs	r24, 7
    618e:	05 c0       	rjmp	.+10     	; 0x619a <ProcessMixer+0x48a>
				{
					P2_solution = P2_solution + PID_ACCs[P2][YAW];			// Reverse if volume negative
    6190:	2d a1       	ldd	r18, Y+37	; 0x25
    6192:	3e a1       	ldd	r19, Y+38	; 0x26
    6194:	02 0f       	add	r16, r18
    6196:	13 1f       	adc	r17, r19
    6198:	04 c0       	rjmp	.+8      	; 0x61a2 <ProcessMixer+0x492>
				}
				else
				{
					P2_solution = P2_solution - PID_ACCs[P2][YAW];
    619a:	4d a1       	ldd	r20, Y+37	; 0x25
    619c:	5e a1       	ldd	r21, Y+38	; 0x26
    619e:	04 1b       	sub	r16, r20
    61a0:	15 0b       	sbc	r17, r21
		//************************************************************
		// Process mixers
		//************************************************************ 

		// Mix in other outputs here (P1)
		if (Transition_state < TRANS_P2)
    61a2:	58 e0       	ldi	r21, 0x08	; 8
    61a4:	55 15       	cp	r21, r5
    61a6:	08 f4       	brcc	.+2      	; 0x61aa <ProcessMixer+0x49a>
    61a8:	86 c0       	rjmp	.+268    	; 0x62b6 <ProcessMixer+0x5a6>
    61aa:	c6 01       	movw	r24, r12
    61ac:	82 58       	subi	r24, 0x82	; 130
    61ae:	9a 4f       	sbci	r25, 0xFA	; 250
    61b0:	3c 01       	movw	r6, r24
    61b2:	fc 01       	movw	r30, r24
    61b4:	e4 56       	subi	r30, 0x64	; 100
    61b6:	ff 4f       	sbci	r31, 0xFF	; 255
		{
			// Mix in dedicated RC sources - aileron, elevator and rudder
			if (Config.Channel[i].P1_aileron_volume !=0) 					// Mix in dedicated aileron
    61b8:	60 81       	ld	r22, Z
    61ba:	66 23       	and	r22, r22
    61bc:	49 f0       	breq	.+18     	; 0x61d0 <ProcessMixer+0x4c0>
			{
				temp2 = scale32(RCinputs[AILERON], Config.Channel[i].P1_aileron_volume);
    61be:	77 27       	eor	r23, r23
    61c0:	67 fd       	sbrc	r22, 7
    61c2:	70 95       	com	r23
    61c4:	8f a1       	ldd	r24, Y+39	; 0x27
    61c6:	98 a5       	ldd	r25, Y+40	; 0x28
    61c8:	0e 94 65 2e 	call	0x5cca	; 0x5cca <scale32>
				P1_solution = P1_solution + temp2;
    61cc:	e8 0e       	add	r14, r24
    61ce:	f9 1e       	adc	r15, r25
    61d0:	f3 01       	movw	r30, r6
    61d2:	e2 56       	subi	r30, 0x62	; 98
    61d4:	ff 4f       	sbci	r31, 0xFF	; 255
			}
			if (Config.Channel[i].P1_elevator_volume !=0) 					// Mix in dedicated elevator
    61d6:	60 81       	ld	r22, Z
    61d8:	66 23       	and	r22, r22
    61da:	49 f0       	breq	.+18     	; 0x61ee <ProcessMixer+0x4de>
			{
				temp2 = scale32(RCinputs[ELEVATOR], Config.Channel[i].P1_elevator_volume);
    61dc:	77 27       	eor	r23, r23
    61de:	67 fd       	sbrc	r22, 7
    61e0:	70 95       	com	r23
    61e2:	89 a5       	ldd	r24, Y+41	; 0x29
    61e4:	9a a5       	ldd	r25, Y+42	; 0x2a
    61e6:	0e 94 65 2e 	call	0x5cca	; 0x5cca <scale32>
				P1_solution = P1_solution + temp2;
    61ea:	e8 0e       	add	r14, r24
    61ec:	f9 1e       	adc	r15, r25
    61ee:	f3 01       	movw	r30, r6
    61f0:	e0 56       	subi	r30, 0x60	; 96
    61f2:	ff 4f       	sbci	r31, 0xFF	; 255
			}
			if (Config.Channel[i].P1_rudder_volume !=0) 					// Mix in dedicated rudder
    61f4:	60 81       	ld	r22, Z
    61f6:	66 23       	and	r22, r22
    61f8:	49 f0       	breq	.+18     	; 0x620c <ProcessMixer+0x4fc>
			{
				temp2 = scale32(RCinputs[RUDDER], Config.Channel[i].P1_rudder_volume);
    61fa:	77 27       	eor	r23, r23
    61fc:	67 fd       	sbrc	r22, 7
    61fe:	70 95       	com	r23
    6200:	8b a5       	ldd	r24, Y+43	; 0x2b
    6202:	9c a5       	ldd	r25, Y+44	; 0x2c
    6204:	0e 94 65 2e 	call	0x5cca	; 0x5cca <scale32>
				P1_solution = P1_solution + temp2;
    6208:	e8 0e       	add	r14, r24
    620a:	f9 1e       	adc	r15, r25
    620c:	f3 01       	movw	r30, r6
    620e:	e9 55       	subi	r30, 0x59	; 89
    6210:	ff 4f       	sbci	r31, 0xFF	; 255
			}

			// Other sources
			if ((Config.Channel[i].P1_source_a_volume !=0) && (Config.Channel[i].P1_source_a != NOMIX)) // Mix in first extra source
    6212:	60 81       	ld	r22, Z
    6214:	66 23       	and	r22, r22
    6216:	19 f1       	breq	.+70     	; 0x625e <ProcessMixer+0x54e>
    6218:	31 97       	sbiw	r30, 0x01	; 1
    621a:	80 81       	ld	r24, Z
    621c:	8d 30       	cpi	r24, 0x0D	; 13
    621e:	f9 f0       	breq	.+62     	; 0x625e <ProcessMixer+0x54e>
    6220:	e8 2f       	mov	r30, r24
    6222:	ff 27       	eor	r31, r31
    6224:	e7 fd       	sbrc	r30, 7
    6226:	f0 95       	com	r31
			{
				// Is the source a sensor?
				if (Config.Channel[i].P1_source_a > (MAX_RC_CHANNELS - 1))
    6228:	88 30       	cpi	r24, 0x08	; 8
    622a:	64 f0       	brlt	.+24     	; 0x6244 <ProcessMixer+0x534>
				{
					temp2 = SensorDataP1[Config.Channel[i].P1_source_a - EXT_SOURCE];
    622c:	38 97       	sbiw	r30, 0x08	; 8
    622e:	ee 0f       	add	r30, r30
    6230:	ff 1f       	adc	r31, r31
    6232:	a1 e0       	ldi	r26, 0x01	; 1
    6234:	b0 e0       	ldi	r27, 0x00	; 0
    6236:	ac 0f       	add	r26, r28
    6238:	bd 1f       	adc	r27, r29
    623a:	ea 0f       	add	r30, r26
    623c:	fb 1f       	adc	r31, r27
    623e:	82 85       	ldd	r24, Z+10	; 0x0a
    6240:	93 85       	ldd	r25, Z+11	; 0x0b
    6242:	06 c0       	rjmp	.+12     	; 0x6250 <ProcessMixer+0x540>
				}
				// Is the source an RC input?
				else
				{
					// Yes, calculate RC channel number from source number and return RC value
					temp2 = RCinputs[Config.Channel[i].P1_source_a];
    6244:	ee 0f       	add	r30, r30
    6246:	ff 1f       	adc	r31, r31
    6248:	e1 56       	subi	r30, 0x61	; 97
    624a:	f8 4f       	sbci	r31, 0xF8	; 248
    624c:	80 81       	ld	r24, Z
    624e:	91 81       	ldd	r25, Z+1	; 0x01
				}

				temp2 = scale32(temp2, Config.Channel[i].P1_source_a_volume);
    6250:	77 27       	eor	r23, r23
    6252:	67 fd       	sbrc	r22, 7
    6254:	70 95       	com	r23
    6256:	0e 94 65 2e 	call	0x5cca	; 0x5cca <scale32>
				P1_solution = P1_solution + temp2;
    625a:	e8 0e       	add	r14, r24
    625c:	f9 1e       	adc	r15, r25
    625e:	f3 01       	movw	r30, r6
    6260:	e5 55       	subi	r30, 0x55	; 85
    6262:	ff 4f       	sbci	r31, 0xFF	; 255
			}
			if ((Config.Channel[i].P1_source_b_volume !=0) && (Config.Channel[i].P1_source_b != NOMIX)) // Mix in second extra source
    6264:	60 81       	ld	r22, Z
    6266:	66 23       	and	r22, r22
    6268:	19 f1       	breq	.+70     	; 0x62b0 <ProcessMixer+0x5a0>
    626a:	31 97       	sbiw	r30, 0x01	; 1
    626c:	80 81       	ld	r24, Z
    626e:	8d 30       	cpi	r24, 0x0D	; 13
    6270:	f9 f0       	breq	.+62     	; 0x62b0 <ProcessMixer+0x5a0>
    6272:	e8 2f       	mov	r30, r24
    6274:	ff 27       	eor	r31, r31
    6276:	e7 fd       	sbrc	r30, 7
    6278:	f0 95       	com	r31
			{
				// Is the source a sensor?
				if (Config.Channel[i].P1_source_b > (MAX_RC_CHANNELS - 1))
    627a:	88 30       	cpi	r24, 0x08	; 8
    627c:	64 f0       	brlt	.+24     	; 0x6296 <ProcessMixer+0x586>
				{
					temp2 = SensorDataP1[Config.Channel[i].P1_source_b - EXT_SOURCE];
    627e:	38 97       	sbiw	r30, 0x08	; 8
    6280:	ee 0f       	add	r30, r30
    6282:	ff 1f       	adc	r31, r31
    6284:	21 e0       	ldi	r18, 0x01	; 1
    6286:	30 e0       	ldi	r19, 0x00	; 0
    6288:	2c 0f       	add	r18, r28
    628a:	3d 1f       	adc	r19, r29
    628c:	e2 0f       	add	r30, r18
    628e:	f3 1f       	adc	r31, r19
    6290:	82 85       	ldd	r24, Z+10	; 0x0a
    6292:	93 85       	ldd	r25, Z+11	; 0x0b
    6294:	06 c0       	rjmp	.+12     	; 0x62a2 <ProcessMixer+0x592>
				}
				// Is the source an RC input?
				else
				{
					temp2 = RCinputs[Config.Channel[i].P1_source_b];
    6296:	ee 0f       	add	r30, r30
    6298:	ff 1f       	adc	r31, r31
    629a:	e1 56       	subi	r30, 0x61	; 97
    629c:	f8 4f       	sbci	r31, 0xF8	; 248
    629e:	80 81       	ld	r24, Z
    62a0:	91 81       	ldd	r25, Z+1	; 0x01
				}

				temp2 = scale32(temp2, Config.Channel[i].P1_source_b_volume);
    62a2:	77 27       	eor	r23, r23
    62a4:	67 fd       	sbrc	r22, 7
    62a6:	70 95       	com	r23
    62a8:	0e 94 65 2e 	call	0x5cca	; 0x5cca <scale32>
				P1_solution = P1_solution + temp2;
    62ac:	e8 0e       	add	r14, r24
    62ae:	f9 1e       	adc	r15, r25
			}
		}

		// Mix in other outputs here (P2)
		if (Transition_state > TRANS_P1)	
    62b0:	55 20       	and	r5, r5
    62b2:	09 f4       	brne	.+2      	; 0x62b6 <ProcessMixer+0x5a6>
    62b4:	7f c0       	rjmp	.+254    	; 0x63b4 <ProcessMixer+0x6a4>
    62b6:	a6 01       	movw	r20, r12
    62b8:	42 58       	subi	r20, 0x82	; 130
    62ba:	5a 4f       	sbci	r21, 0xFA	; 250
    62bc:	3a 01       	movw	r6, r20
    62be:	fa 01       	movw	r30, r20
    62c0:	e3 56       	subi	r30, 0x63	; 99
    62c2:	ff 4f       	sbci	r31, 0xFF	; 255
		{
			// Mix in dedicated RC sources - aileron, elevator and rudder
			if (Config.Channel[i].P2_aileron_volume !=0) 					// Mix in dedicated aileron
    62c4:	60 81       	ld	r22, Z
    62c6:	66 23       	and	r22, r22
    62c8:	49 f0       	breq	.+18     	; 0x62dc <ProcessMixer+0x5cc>
			{
				temp2 = scale32(RCinputs[AILERON], Config.Channel[i].P2_aileron_volume);
    62ca:	77 27       	eor	r23, r23
    62cc:	67 fd       	sbrc	r22, 7
    62ce:	70 95       	com	r23
    62d0:	8f a1       	ldd	r24, Y+39	; 0x27
    62d2:	98 a5       	ldd	r25, Y+40	; 0x28
    62d4:	0e 94 65 2e 	call	0x5cca	; 0x5cca <scale32>
				P2_solution = P2_solution + temp2;
    62d8:	08 0f       	add	r16, r24
    62da:	19 1f       	adc	r17, r25
    62dc:	f3 01       	movw	r30, r6
    62de:	e1 56       	subi	r30, 0x61	; 97
    62e0:	ff 4f       	sbci	r31, 0xFF	; 255
			}
			if (Config.Channel[i].P2_elevator_volume !=0) 					// Mix in dedicated elevator
    62e2:	60 81       	ld	r22, Z
    62e4:	66 23       	and	r22, r22
    62e6:	49 f0       	breq	.+18     	; 0x62fa <ProcessMixer+0x5ea>
			{
				temp2 = scale32(RCinputs[ELEVATOR], Config.Channel[i].P2_elevator_volume);
    62e8:	77 27       	eor	r23, r23
    62ea:	67 fd       	sbrc	r22, 7
    62ec:	70 95       	com	r23
    62ee:	89 a5       	ldd	r24, Y+41	; 0x29
    62f0:	9a a5       	ldd	r25, Y+42	; 0x2a
    62f2:	0e 94 65 2e 	call	0x5cca	; 0x5cca <scale32>
				P2_solution = P2_solution + temp2;
    62f6:	08 0f       	add	r16, r24
    62f8:	19 1f       	adc	r17, r25
    62fa:	f3 01       	movw	r30, r6
    62fc:	ef 55       	subi	r30, 0x5F	; 95
    62fe:	ff 4f       	sbci	r31, 0xFF	; 255
			}
			if (Config.Channel[i].P2_rudder_volume !=0) 					// Mix in dedicated rudder
    6300:	60 81       	ld	r22, Z
    6302:	66 23       	and	r22, r22
    6304:	49 f0       	breq	.+18     	; 0x6318 <ProcessMixer+0x608>
			{
				temp2 = scale32(RCinputs[RUDDER], Config.Channel[i].P2_rudder_volume);
    6306:	77 27       	eor	r23, r23
    6308:	67 fd       	sbrc	r22, 7
    630a:	70 95       	com	r23
    630c:	8b a5       	ldd	r24, Y+43	; 0x2b
    630e:	9c a5       	ldd	r25, Y+44	; 0x2c
    6310:	0e 94 65 2e 	call	0x5cca	; 0x5cca <scale32>
				P2_solution = P2_solution + temp2;
    6314:	08 0f       	add	r16, r24
    6316:	19 1f       	adc	r17, r25
    6318:	f3 01       	movw	r30, r6
    631a:	e7 55       	subi	r30, 0x57	; 87
    631c:	ff 4f       	sbci	r31, 0xFF	; 255
			}

			// Other sources
			if ((Config.Channel[i].P2_source_a_volume !=0) && (Config.Channel[i].P2_source_a != NOMIX)) // Mix in first extra source
    631e:	60 81       	ld	r22, Z
    6320:	66 23       	and	r22, r22
    6322:	09 f1       	breq	.+66     	; 0x6366 <ProcessMixer+0x656>
    6324:	31 97       	sbiw	r30, 0x01	; 1
    6326:	80 81       	ld	r24, Z
    6328:	8d 30       	cpi	r24, 0x0D	; 13
    632a:	e9 f0       	breq	.+58     	; 0x6366 <ProcessMixer+0x656>
    632c:	e8 2f       	mov	r30, r24
    632e:	ff 27       	eor	r31, r31
    6330:	e7 fd       	sbrc	r30, 7
    6332:	f0 95       	com	r31
			{
				// Is the source a sensor?
				if (Config.Channel[i].P2_source_a > (MAX_RC_CHANNELS - 1))
    6334:	88 30       	cpi	r24, 0x08	; 8
    6336:	54 f0       	brlt	.+20     	; 0x634c <ProcessMixer+0x63c>
				{
					temp2 = SensorDataP2[Config.Channel[i].P2_source_a - EXT_SOURCE];
    6338:	38 97       	sbiw	r30, 0x08	; 8
    633a:	ee 0f       	add	r30, r30
    633c:	ff 1f       	adc	r31, r31
    633e:	81 e0       	ldi	r24, 0x01	; 1
    6340:	90 e0       	ldi	r25, 0x00	; 0
    6342:	8c 0f       	add	r24, r28
    6344:	9d 1f       	adc	r25, r29
    6346:	e8 0f       	add	r30, r24
    6348:	f9 1f       	adc	r31, r25
    634a:	04 c0       	rjmp	.+8      	; 0x6354 <ProcessMixer+0x644>
				}
				// Is the source an RC input?
				else 
				{
					temp2 = RCinputs[Config.Channel[i].P2_source_a];
    634c:	ee 0f       	add	r30, r30
    634e:	ff 1f       	adc	r31, r31
    6350:	e1 56       	subi	r30, 0x61	; 97
    6352:	f8 4f       	sbci	r31, 0xF8	; 248
    6354:	80 81       	ld	r24, Z
    6356:	91 81       	ldd	r25, Z+1	; 0x01
				}

				temp2 = scale32(temp2, Config.Channel[i].P2_source_a_volume);
    6358:	77 27       	eor	r23, r23
    635a:	67 fd       	sbrc	r22, 7
    635c:	70 95       	com	r23
    635e:	0e 94 65 2e 	call	0x5cca	; 0x5cca <scale32>
				P2_solution = P2_solution + temp2;
    6362:	08 0f       	add	r16, r24
    6364:	19 1f       	adc	r17, r25
    6366:	f3 01       	movw	r30, r6
    6368:	e3 55       	subi	r30, 0x53	; 83
    636a:	ff 4f       	sbci	r31, 0xFF	; 255
			}
			if ((Config.Channel[i].P2_source_b_volume !=0) && (Config.Channel[i].P2_source_b != NOMIX)) // Mix in second extra source
    636c:	60 81       	ld	r22, Z
    636e:	66 23       	and	r22, r22
    6370:	09 f1       	breq	.+66     	; 0x63b4 <ProcessMixer+0x6a4>
    6372:	31 97       	sbiw	r30, 0x01	; 1
    6374:	80 81       	ld	r24, Z
    6376:	8d 30       	cpi	r24, 0x0D	; 13
    6378:	e9 f0       	breq	.+58     	; 0x63b4 <ProcessMixer+0x6a4>
    637a:	e8 2f       	mov	r30, r24
    637c:	ff 27       	eor	r31, r31
    637e:	e7 fd       	sbrc	r30, 7
    6380:	f0 95       	com	r31
			{
				// Is the source a sensor?
				if (Config.Channel[i].P2_source_b > (MAX_RC_CHANNELS - 1))
    6382:	88 30       	cpi	r24, 0x08	; 8
    6384:	54 f0       	brlt	.+20     	; 0x639a <ProcessMixer+0x68a>
				{
					temp2 = SensorDataP2[Config.Channel[i].P2_source_b - EXT_SOURCE];
    6386:	38 97       	sbiw	r30, 0x08	; 8
    6388:	ee 0f       	add	r30, r30
    638a:	ff 1f       	adc	r31, r31
    638c:	a1 e0       	ldi	r26, 0x01	; 1
    638e:	b0 e0       	ldi	r27, 0x00	; 0
    6390:	ac 0f       	add	r26, r28
    6392:	bd 1f       	adc	r27, r29
    6394:	ea 0f       	add	r30, r26
    6396:	fb 1f       	adc	r31, r27
    6398:	04 c0       	rjmp	.+8      	; 0x63a2 <ProcessMixer+0x692>
				}
				// Is the source an RC input?
				else
				{
					temp2 = RCinputs[Config.Channel[i].P2_source_b];
    639a:	ee 0f       	add	r30, r30
    639c:	ff 1f       	adc	r31, r31
    639e:	e1 56       	subi	r30, 0x61	; 97
    63a0:	f8 4f       	sbci	r31, 0xF8	; 248
    63a2:	80 81       	ld	r24, Z
    63a4:	91 81       	ldd	r25, Z+1	; 0x01
				}

				temp2 = scale32(temp2, Config.Channel[i].P2_source_b_volume);
    63a6:	77 27       	eor	r23, r23
    63a8:	67 fd       	sbrc	r22, 7
    63aa:	70 95       	com	r23
    63ac:	0e 94 65 2e 	call	0x5cca	; 0x5cca <scale32>
				P2_solution = P2_solution + temp2;
    63b0:	08 0f       	add	r16, r24
    63b2:	19 1f       	adc	r17, r25
    63b4:	c6 01       	movw	r24, r12
    63b6:	82 58       	subi	r24, 0x82	; 130
    63b8:	9a 4f       	sbci	r25, 0xFA	; 250
    63ba:	fc 01       	movw	r30, r24
    63bc:	ef 56       	subi	r30, 0x6F	; 111
    63be:	ff 4f       	sbci	r31, 0xFF	; 255
			}
		}
			
		// Save solution for this channel. Note that this contains cross-mixed data from the *last* cycle
		Config.Channel[i].P1_value = P1_solution;
    63c0:	f1 82       	std	Z+1, r15	; 0x01
    63c2:	e0 82       	st	Z, r14
    63c4:	32 96       	adiw	r30, 0x02	; 2
		Config.Channel[i].P2_value = P2_solution;
    63c6:	11 83       	std	Z+1, r17	; 0x01
    63c8:	00 83       	st	Z, r16
    63ca:	bd e1       	ldi	r27, 0x1D	; 29
    63cc:	cb 0e       	add	r12, r27
    63ce:	d1 1c       	adc	r13, r1

	//************************************************************
	// Main mix loop - sensors, RC inputs and other channels
	//************************************************************

	for (i = 0; i < MAX_OUTPUTS; i++)
    63d0:	e8 ee       	ldi	r30, 0xE8	; 232
    63d2:	ce 16       	cp	r12, r30
    63d4:	d1 04       	cpc	r13, r1
    63d6:	09 f0       	breq	.+2      	; 0x63da <ProcessMixer+0x6ca>
    63d8:	39 cd       	rjmp	.-1422   	; 0x5e4c <ProcessMixer+0x13c>
	//************************************************************
	// Mixer transition code
	//************************************************************ 

	// Convert number to percentage (0 to 100%)
	if (Config.TransitionSpeed == 0) 
    63da:	80 91 af 05 	lds	r24, 0x05AF
    63de:	81 11       	cpse	r24, r1
    63e0:	2f c0       	rjmp	.+94     	; 0x6440 <ProcessMixer+0x730>
	{
		// Offset RC input to (approx) -250 to 2250
		temp1 = RCinputs[Config.FlightChan] + 1000;
    63e2:	e0 91 aa 05 	lds	r30, 0x05AA
    63e6:	ee 0f       	add	r30, r30
    63e8:	ff 0b       	sbc	r31, r31
    63ea:	e1 56       	subi	r30, 0x61	; 97
    63ec:	f8 4f       	sbci	r31, 0xF8	; 248
    63ee:	80 81       	ld	r24, Z
    63f0:	91 81       	ldd	r25, Z+1	; 0x01
    63f2:	88 51       	subi	r24, 0x18	; 24
    63f4:	9c 4f       	sbci	r25, 0xFC	; 252
    63f6:	97 ff       	sbrs	r25, 7
    63f8:	02 c0       	rjmp	.+4      	; 0x63fe <ProcessMixer+0x6ee>
    63fa:	80 e0       	ldi	r24, 0x00	; 0
    63fc:	90 e0       	ldi	r25, 0x00	; 0
		// Trim lower end to zero (0 to 2250)
		if (temp1 < 0) temp1 = 0;

		// Convert 0 to 2250 to 0 to 125. Divide by 20
		// Round to avoid truncation errors
		transition = (temp1 + 10) / 20;
    63fe:	0a 96       	adiw	r24, 0x0a	; 10
    6400:	64 e1       	ldi	r22, 0x14	; 20
    6402:	70 e0       	ldi	r23, 0x00	; 0
    6404:	0e 94 07 3e 	call	0x7c0e	; 0x7c0e <__divmodhi4>

		// transition now has a range of 0 to 101 for 0 to 2000 input
		// Limit extent of transition value 0 to 100 (101 steps)
		if (transition > 100) transition = 100;
    6408:	65 36       	cpi	r22, 0x65	; 101
    640a:	71 05       	cpc	r23, r1
    640c:	2c f4       	brge	.+10     	; 0x6418 <ProcessMixer+0x708>
		// Trim lower end to zero (0 to 2250)
		if (temp1 < 0) temp1 = 0;

		// Convert 0 to 2250 to 0 to 125. Divide by 20
		// Round to avoid truncation errors
		transition = (temp1 + 10) / 20;
    640e:	70 93 24 05 	sts	0x0524, r23
    6412:	60 93 23 05 	sts	0x0523, r22
    6416:	06 c0       	rjmp	.+12     	; 0x6424 <ProcessMixer+0x714>

		// transition now has a range of 0 to 101 for 0 to 2000 input
		// Limit extent of transition value 0 to 100 (101 steps)
		if (transition > 100) transition = 100;
    6418:	84 e6       	ldi	r24, 0x64	; 100
    641a:	90 e0       	ldi	r25, 0x00	; 0
    641c:	90 93 24 05 	sts	0x0524, r25
    6420:	80 93 23 05 	sts	0x0523, r24

	// Recalculate P1 values based on transition stage
	for (i = 0; i < MAX_OUTPUTS; i++)
	{
		// Speed up the easy ones :)
		if (transition == 0)
    6424:	00 91 23 05 	lds	r16, 0x0523
    6428:	10 91 24 05 	lds	r17, 0x0524
		}
		else
		{
			// Get source channel value
			temp1 = Config.Channel[i].P1_value;
			temp1 = scale32(temp1, (100 - transition));
    642c:	a4 e6       	ldi	r26, 0x64	; 100
    642e:	ca 2e       	mov	r12, r26
    6430:	d1 2c       	mov	r13, r1
    6432:	c0 1a       	sub	r12, r16
    6434:	d1 0a       	sbc	r13, r17
    6436:	bf e0       	ldi	r27, 0x0F	; 15
    6438:	eb 2e       	mov	r14, r27
    643a:	b6 e0       	ldi	r27, 0x06	; 6
    643c:	fb 2e       	mov	r15, r27
    643e:	05 c0       	rjmp	.+10     	; 0x644a <ProcessMixer+0x73a>
		if (transition > 100) transition = 100;
	}
	else 
	{
		// transition_counter counts from 0 to 100 (101 steps)
		transition = transition_counter;
    6440:	80 91 10 05 	lds	r24, 0x0510
    6444:	90 91 11 05 	lds	r25, 0x0511
    6448:	e9 cf       	rjmp	.-46     	; 0x641c <ProcessMixer+0x70c>

	// Recalculate P1 values based on transition stage
	for (i = 0; i < MAX_OUTPUTS; i++)
	{
		// Speed up the easy ones :)
		if (transition == 0)
    644a:	01 15       	cp	r16, r1
    644c:	11 05       	cpc	r17, r1
    644e:	21 f4       	brne	.+8      	; 0x6458 <ProcessMixer+0x748>
		{
			temp1 = Config.Channel[i].P1_value;
    6450:	d7 01       	movw	r26, r14
    6452:	8d 91       	ld	r24, X+
    6454:	9c 91       	ld	r25, X
    6456:	16 c0       	rjmp	.+44     	; 0x6484 <ProcessMixer+0x774>
		}
		else if (transition >= 100)
    6458:	04 36       	cpi	r16, 0x64	; 100
    645a:	11 05       	cpc	r17, r1
    645c:	24 f0       	brlt	.+8      	; 0x6466 <ProcessMixer+0x756>
		{
			temp1 = Config.Channel[i].P2_value;
    645e:	f7 01       	movw	r30, r14
    6460:	82 81       	ldd	r24, Z+2	; 0x02
    6462:	93 81       	ldd	r25, Z+3	; 0x03
    6464:	0f c0       	rjmp	.+30     	; 0x6484 <ProcessMixer+0x774>
		}
		else
		{
			// Get source channel value
			temp1 = Config.Channel[i].P1_value;
			temp1 = scale32(temp1, (100 - transition));
    6466:	b6 01       	movw	r22, r12
    6468:	d7 01       	movw	r26, r14
    646a:	8d 91       	ld	r24, X+
    646c:	9c 91       	ld	r25, X
    646e:	0e 94 65 2e 	call	0x5cca	; 0x5cca <scale32>
    6472:	5c 01       	movw	r10, r24

			// Get destination channel value
			temp2 = Config.Channel[i].P2_value;
			temp2 = scale32(temp2, transition);
    6474:	b8 01       	movw	r22, r16
    6476:	f7 01       	movw	r30, r14
    6478:	82 81       	ldd	r24, Z+2	; 0x02
    647a:	93 81       	ldd	r25, Z+3	; 0x03
    647c:	0e 94 65 2e 	call	0x5cca	; 0x5cca <scale32>

			// Sum the mixers
			temp1 = temp1 + temp2;
    6480:	8a 0d       	add	r24, r10
    6482:	9b 1d       	adc	r25, r11
		}
		// Save transitioned solution into P1
		Config.Channel[i].P1_value = temp1;
    6484:	d7 01       	movw	r26, r14
    6486:	8d 93       	st	X+, r24
    6488:	9c 93       	st	X, r25
    648a:	bd e1       	ldi	r27, 0x1D	; 29
    648c:	eb 0e       	add	r14, r27
    648e:	f1 1c       	adc	r15, r1
		// transition_counter counts from 0 to 100 (101 steps)
		transition = transition_counter;
	}

	// Recalculate P1 values based on transition stage
	for (i = 0; i < MAX_OUTPUTS; i++)
    6490:	e7 ef       	ldi	r30, 0xF7	; 247
    6492:	ee 16       	cp	r14, r30
    6494:	e6 e0       	ldi	r30, 0x06	; 6
    6496:	fe 06       	cpc	r15, r30
    6498:	c1 f6       	brne	.-80     	; 0x644a <ProcessMixer+0x73a>
				// Just use the vlue of P1 volume as there is no curve
				temp3 = Config.Channel[i].P1_throttle_volume; // Promote to 16 bits
			}

			// Calculate actual throttle value
			temp3 = scale32(MonopolarThrottle, temp3);
    649a:	60 90 9d 07 	lds	r6, 0x079D
    649e:	70 90 9e 07 	lds	r7, 0x079E
    64a2:	68 e1       	ldi	r22, 0x18	; 24
    64a4:	e6 2e       	mov	r14, r22
    64a6:	66 e0       	ldi	r22, 0x06	; 6
    64a8:	f6 2e       	mov	r15, r22
    64aa:	79 e1       	ldi	r23, 0x19	; 25
    64ac:	87 2e       	mov	r8, r23
    64ae:	76 e0       	ldi	r23, 0x06	; 6
    64b0:	97 2e       	mov	r9, r23
    64b2:	ef e0       	ldi	r30, 0x0F	; 15
    64b4:	ce 2e       	mov	r12, r30
    64b6:	e6 e0       	ldi	r30, 0x06	; 6
    64b8:	de 2e       	mov	r13, r30
			if (Config.Channel[i].P1_throttle_volume != Config.Channel[i].P2_throttle_volume)
			{
				// Calculate step difference in 1/100ths and round
				temp1 = (Config.Channel[i].P2_throttle_volume - Config.Channel[i].P1_throttle_volume);
				temp1 = temp1 << 7; 						// Multiply by 128 so divide gives reasonable step values
				Step1 = temp1 / 100;	
    64ba:	f4 e6       	ldi	r31, 0x64	; 100
    64bc:	af 2e       	mov	r10, r31
    64be:	b1 2c       	mov	r11, r1
    64c0:	80 2f       	mov	r24, r16
    64c2:	99 27       	eor	r25, r25
    64c4:	87 fd       	sbrc	r24, 7
    64c6:	90 95       	com	r25
					}
					// If P2 greater than P1, SINE is the one we want
					else
					{
						// Multiply SQRTSIN[transition] steps (0 to 100)
						temp3 = (int8_t)pgm_read_byte(&SQRTSIN[(int8_t)transition]);
    64c8:	9c 01       	movw	r18, r24
    64ca:	2f 5c       	subi	r18, 0xCF	; 207
    64cc:	36 4e       	sbci	r19, 0xE6	; 230
    64ce:	3e 8b       	std	Y+22, r19	; 0x16
    64d0:	2d 8b       	std	Y+21, r18	; 0x15
					// Choose between SQRT SINE and SQRT COSINE
					// If P2 less than P1, COSINE (reverse SINE) is the one we want
					if (Step1 < 0)
					{ 
						// Multiply SQRTSIN[100 - transition] steps (0 to 100)
						temp3 = 100 - (int8_t)pgm_read_byte(&SQRTSIN[100 - (int8_t)transition]);
    64d2:	95 01       	movw	r18, r10
    64d4:	28 1b       	sub	r18, r24
    64d6:	39 0b       	sbc	r19, r25
    64d8:	a9 01       	movw	r20, r18
    64da:	4f 5c       	subi	r20, 0xCF	; 207
    64dc:	56 4e       	sbci	r21, 0xE6	; 230
    64de:	58 8f       	std	Y+24, r21	; 0x18
    64e0:	4f 8b       	std	Y+23, r20	; 0x17
					}
					// If P2 greater than P1, SINE is the one we want
					else
					{
						// Multiply SIN[transition] steps (0 to 100)
						temp3 = (int8_t)pgm_read_byte(&SIN[(int8_t)transition]);
    64e2:	dc 01       	movw	r26, r24
    64e4:	aa 56       	subi	r26, 0x6A	; 106
    64e6:	b6 4e       	sbci	r27, 0xE6	; 230
    64e8:	1d 01       	movw	r2, r26
					// Choose between SINE and COSINE
					// If P2 less than P1, COSINE (reverse SINE) is the one we want
					if (Step1 < 0)
					{ 
						// Multiply SIN[100 - transition] steps (0 to 100)
						temp3 = 100 - (int8_t)pgm_read_byte(&SIN[100 - (int8_t)transition]);
    64ea:	f9 01       	movw	r30, r18
    64ec:	ea 56       	subi	r30, 0x6A	; 106
    64ee:	f6 4e       	sbci	r31, 0xE6	; 230
    64f0:	2f 01       	movw	r4, r30
    64f2:	f7 01       	movw	r30, r14
    64f4:	31 97       	sbiw	r30, 0x01	; 1
	//************************************************************ 

	for (i = 0; i < MAX_OUTPUTS; i++)
	{
		// Ignore if both throttle volumes are 0% (no throttle)
		if 	(!((Config.Channel[i].P1_throttle_volume == 0) && 
    64f6:	90 81       	ld	r25, Z
    64f8:	d7 01       	movw	r26, r14
    64fa:	8c 91       	ld	r24, X
    64fc:	91 11       	cpse	r25, r1
    64fe:	03 c0       	rjmp	.+6      	; 0x6506 <ProcessMixer+0x7f6>
    6500:	88 23       	and	r24, r24
    6502:	09 f4       	brne	.+2      	; 0x6506 <ProcessMixer+0x7f6>
    6504:	5d c0       	rjmp	.+186    	; 0x65c0 <ProcessMixer+0x8b0>
    6506:	29 2f       	mov	r18, r25
    6508:	33 27       	eor	r19, r19
    650a:	27 fd       	sbrc	r18, 7
    650c:	30 95       	com	r19
			(Config.Channel[i].P2_throttle_volume == 0)))
		{
			// Only process if there is a curve
			if (Config.Channel[i].P1_throttle_volume != Config.Channel[i].P2_throttle_volume)
    650e:	98 17       	cp	r25, r24
    6510:	09 f4       	brne	.+2      	; 0x6514 <ProcessMixer+0x804>
    6512:	48 c0       	rjmp	.+144    	; 0x65a4 <ProcessMixer+0x894>
			{
				// Calculate step difference in 1/100ths and round
				temp1 = (Config.Channel[i].P2_throttle_volume - Config.Channel[i].P1_throttle_volume);
    6514:	99 27       	eor	r25, r25
    6516:	87 fd       	sbrc	r24, 7
    6518:	90 95       	com	r25
    651a:	82 1b       	sub	r24, r18
    651c:	93 0b       	sbc	r25, r19
				temp1 = temp1 << 7; 						// Multiply by 128 so divide gives reasonable step values
    651e:	96 95       	lsr	r25
    6520:	98 2f       	mov	r25, r24
    6522:	88 27       	eor	r24, r24
    6524:	97 95       	ror	r25
    6526:	87 95       	ror	r24
				Step1 = temp1 / 100;	
    6528:	b5 01       	movw	r22, r10
    652a:	0e 94 07 3e 	call	0x7c0e	; 0x7c0e <__divmodhi4>

				// Set start (P1) point
				temp2 = Config.Channel[i].P1_throttle_volume; // Promote to 16 bits
				temp2 = temp2 << 7;
    652e:	36 95       	lsr	r19
    6530:	32 2f       	mov	r19, r18
    6532:	22 27       	eor	r18, r18
    6534:	37 95       	ror	r19
    6536:	27 95       	ror	r18

				// Linear vs. Sinusoidal calculation
				if (Config.Channel[i].Throttle_curve == LINEAR)
    6538:	f4 01       	movw	r30, r8
    653a:	80 81       	ld	r24, Z
    653c:	81 11       	cpse	r24, r1
    653e:	08 c0       	rjmp	.+16     	; 0x6550 <ProcessMixer+0x840>
				{
					// Multiply [transition] steps (0 to 100)
					temp3 = temp2 + (Step1 * transition);
    6540:	60 9f       	mul	r22, r16
    6542:	c0 01       	movw	r24, r0
    6544:	61 9f       	mul	r22, r17
    6546:	90 0d       	add	r25, r0
    6548:	70 9f       	mul	r23, r16
    654a:	90 0d       	add	r25, r0
    654c:	11 24       	eor	r1, r1
    654e:	20 c0       	rjmp	.+64     	; 0x6590 <ProcessMixer+0x880>
				}

				// SINE
				else if (Config.Channel[i].Throttle_curve == SINE)
    6550:	81 30       	cpi	r24, 0x01	; 1
    6552:	31 f4       	brne	.+12     	; 0x6560 <ProcessMixer+0x850>
				{
					// Choose between SINE and COSINE
					// If P2 less than P1, COSINE (reverse SINE) is the one we want
					if (Step1 < 0)
    6554:	77 ff       	sbrs	r23, 7
    6556:	02 c0       	rjmp	.+4      	; 0x655c <ProcessMixer+0x84c>
					{ 
						// Multiply SIN[100 - transition] steps (0 to 100)
						temp3 = 100 - (int8_t)pgm_read_byte(&SIN[100 - (int8_t)transition]);
    6558:	f2 01       	movw	r30, r4
    655a:	06 c0       	rjmp	.+12     	; 0x6568 <ProcessMixer+0x858>
					}
					// If P2 greater than P1, SINE is the one we want
					else
					{
						// Multiply SIN[transition] steps (0 to 100)
						temp3 = (int8_t)pgm_read_byte(&SIN[(int8_t)transition]);
    655c:	f1 01       	movw	r30, r2
    655e:	0d c0       	rjmp	.+26     	; 0x657a <ProcessMixer+0x86a>
				// SQRT SINE
				else
				{
					// Choose between SQRT SINE and SQRT COSINE
					// If P2 less than P1, COSINE (reverse SINE) is the one we want
					if (Step1 < 0)
    6560:	77 ff       	sbrs	r23, 7
    6562:	09 c0       	rjmp	.+18     	; 0x6576 <ProcessMixer+0x866>
					{ 
						// Multiply SQRTSIN[100 - transition] steps (0 to 100)
						temp3 = 100 - (int8_t)pgm_read_byte(&SQRTSIN[100 - (int8_t)transition]);
    6564:	ef 89       	ldd	r30, Y+23	; 0x17
    6566:	f8 8d       	ldd	r31, Y+24	; 0x18
    6568:	84 91       	lpm	r24, Z
    656a:	a5 01       	movw	r20, r10
    656c:	48 1b       	sub	r20, r24
    656e:	51 09       	sbc	r21, r1
    6570:	87 fd       	sbrc	r24, 7
    6572:	53 95       	inc	r21
    6574:	06 c0       	rjmp	.+12     	; 0x6582 <ProcessMixer+0x872>
					}
					// If P2 greater than P1, SINE is the one we want
					else
					{
						// Multiply SQRTSIN[transition] steps (0 to 100)
						temp3 = (int8_t)pgm_read_byte(&SQRTSIN[(int8_t)transition]);
    6576:	ed 89       	ldd	r30, Y+21	; 0x15
    6578:	fe 89       	ldd	r31, Y+22	; 0x16
    657a:	44 91       	lpm	r20, Z
    657c:	55 27       	eor	r21, r21
    657e:	47 fd       	sbrc	r20, 7
    6580:	50 95       	com	r21
					}

					// Get SINE% (temp2) of difference in volumes (Step1)
					// Step1 is already in 100ths of the difference * 128
					// temp1 is the start volume * 128
					temp3 = temp2 + (Step1 * temp3);
    6582:	64 9f       	mul	r22, r20
    6584:	c0 01       	movw	r24, r0
    6586:	65 9f       	mul	r22, r21
    6588:	90 0d       	add	r25, r0
    658a:	74 9f       	mul	r23, r20
    658c:	90 0d       	add	r25, r0
    658e:	11 24       	eor	r1, r1
    6590:	82 0f       	add	r24, r18
    6592:	93 1f       	adc	r25, r19
				}

				// Round, then rescale to normal value
				temp3 = temp3 + 64;
    6594:	bc 01       	movw	r22, r24
    6596:	60 5c       	subi	r22, 0xC0	; 192
    6598:	7f 4f       	sbci	r23, 0xFF	; 255
				temp3 = temp3 >> 7;
    659a:	66 0f       	add	r22, r22
    659c:	67 2f       	mov	r22, r23
    659e:	66 1f       	adc	r22, r22
    65a0:	77 0b       	sbc	r23, r23
    65a2:	01 c0       	rjmp	.+2      	; 0x65a6 <ProcessMixer+0x896>
			
			// No curve
			else
			{
				// Just use the vlue of P1 volume as there is no curve
				temp3 = Config.Channel[i].P1_throttle_volume; // Promote to 16 bits
    65a4:	b9 01       	movw	r22, r18
			}

			// Calculate actual throttle value
			temp3 = scale32(MonopolarThrottle, temp3);
    65a6:	c3 01       	movw	r24, r6
    65a8:	0e 94 65 2e 	call	0x5cca	; 0x5cca <scale32>

			// At this point, the throttle values are 0 to 2500 (+/-125%)
			// Re-scale throttle values back to system values (+/-1250) 
			// as throttle offset is actually at some variable value.
			// Reset minimum throttle to 1.1ms or 3750 (1.5ms center)  - 2750 (1.1ms min throttle)
			temp3 = temp3 - MOTORMIN;
    65ac:	88 5e       	subi	r24, 0xE8	; 232
    65ae:	93 40       	sbci	r25, 0x03	; 3

			// Add offset to channel value
			Config.Channel[i].P1_value += temp3;
    65b0:	d6 01       	movw	r26, r12
    65b2:	2d 91       	ld	r18, X+
    65b4:	3c 91       	ld	r19, X
    65b6:	11 97       	sbiw	r26, 0x01	; 1
    65b8:	28 0f       	add	r18, r24
    65ba:	39 1f       	adc	r19, r25
    65bc:	2d 93       	st	X+, r18
    65be:	3c 93       	st	X, r19
    65c0:	bd e1       	ldi	r27, 0x1D	; 29
    65c2:	eb 0e       	add	r14, r27
    65c4:	f1 1c       	adc	r15, r1
    65c6:	ed e1       	ldi	r30, 0x1D	; 29
    65c8:	ce 0e       	add	r12, r30
    65ca:	d1 1c       	adc	r13, r1
    65cc:	fd e1       	ldi	r31, 0x1D	; 29
    65ce:	8f 0e       	add	r8, r31
    65d0:	91 1c       	adc	r9, r1
	// Groovy throttle curve handling. Must be after the transition.
	// Uses the transition value, but is not part of the transition
	// mixer. Linear or Sine curve. Reverse Sine done automatically
	//************************************************************ 

	for (i = 0; i < MAX_OUTPUTS; i++)
    65d2:	20 e0       	ldi	r18, 0x00	; 0
    65d4:	e2 16       	cp	r14, r18
    65d6:	27 e0       	ldi	r18, 0x07	; 7
    65d8:	f2 06       	cpc	r15, r18
    65da:	09 f0       	breq	.+2      	; 0x65de <ProcessMixer+0x8ce>
    65dc:	8a cf       	rjmp	.-236    	; 0x64f2 <ProcessMixer+0x7e2>
    65de:	e6 e1       	ldi	r30, 0x16	; 22
    65e0:	f6 e0       	ldi	r31, 0x06	; 6
    65e2:	2f e0       	ldi	r18, 0x0F	; 15
    65e4:	36 e0       	ldi	r19, 0x06	; 6
			// Work out distance to cover over stage 2 (P1.n to P2)
			temp2 = Config.Channel[i].P2_offset - Config.Channel[i].P1n_offset;
			temp2 = temp2 << 7;

			// Divide distance into steps
			temp1 = (100 - Config.Channel[i].P1n_position); 
    65e6:	94 e6       	ldi	r25, 0x64	; 100
    65e8:	69 2e       	mov	r6, r25
    65ea:	71 2c       	mov	r7, r1
    65ec:	df 01       	movw	r26, r30
    65ee:	13 97       	sbiw	r26, 0x03	; 3
	//************************************************************ 

	for (i = 0; i < MAX_OUTPUTS; i++)
	{
		// Simplify if all are the same
		if (!((Config.Channel[i].P1_offset == Config.Channel[i].P1n_offset) &&
    65f0:	cc 90       	ld	r12, X
    65f2:	12 96       	adiw	r26, 0x02	; 2
    65f4:	ac 90       	ld	r10, X
    65f6:	50 80       	ld	r5, Z
    65f8:	ca 10       	cpse	r12, r10
    65fa:	03 c0       	rjmp	.+6      	; 0x6602 <ProcessMixer+0x8f2>
    65fc:	5c 14       	cp	r5, r12
    65fe:	09 f4       	brne	.+2      	; 0x6602 <ProcessMixer+0x8f2>
    6600:	53 c0       	rjmp	.+166    	; 0x66a8 <ProcessMixer+0x998>
		 	 (Config.Channel[i].P2_offset == Config.Channel[i].P1n_offset)))
		{
			// Work out distance to cover over stage 1 (P1 to P1.n)
			temp1 = Config.Channel[i].P1n_offset - Config.Channel[i].P1_offset;
    6602:	bb 24       	eor	r11, r11
    6604:	a7 fc       	sbrc	r10, 7
    6606:	b0 94       	com	r11
    6608:	dd 24       	eor	r13, r13
    660a:	c7 fc       	sbrc	r12, 7
    660c:	d0 94       	com	r13
    660e:	c5 01       	movw	r24, r10
    6610:	8c 19       	sub	r24, r12
    6612:	9d 09       	sbc	r25, r13
    6614:	df 01       	movw	r26, r30
    6616:	12 97       	sbiw	r26, 0x02	; 2
			temp1 = temp1 << 7; // Multiply by 128 so divide gives reasonable step values

			// Divide distance into steps
			temp2 = Config.Channel[i].P1n_position; 
    6618:	ec 90       	ld	r14, X
    661a:	ff 24       	eor	r15, r15
    661c:	e7 fc       	sbrc	r14, 7
    661e:	f0 94       	com	r15
		if (!((Config.Channel[i].P1_offset == Config.Channel[i].P1n_offset) &&
		 	 (Config.Channel[i].P2_offset == Config.Channel[i].P1n_offset)))
		{
			// Work out distance to cover over stage 1 (P1 to P1.n)
			temp1 = Config.Channel[i].P1n_offset - Config.Channel[i].P1_offset;
			temp1 = temp1 << 7; // Multiply by 128 so divide gives reasonable step values
    6620:	96 95       	lsr	r25
    6622:	98 2f       	mov	r25, r24
    6624:	88 27       	eor	r24, r24
    6626:	97 95       	ror	r25
    6628:	87 95       	ror	r24

			// Divide distance into steps
			temp2 = Config.Channel[i].P1n_position; 
			Step1 = ((temp1 + (temp2 >> 1)) / temp2) ; // Divide and round result
    662a:	a7 01       	movw	r20, r14
    662c:	55 95       	asr	r21
    662e:	47 95       	ror	r20
    6630:	84 0f       	add	r24, r20
    6632:	95 1f       	adc	r25, r21
    6634:	b7 01       	movw	r22, r14
    6636:	0e 94 07 3e 	call	0x7c0e	; 0x7c0e <__divmodhi4>
    663a:	4b 01       	movw	r8, r22
		
			// Work out distance to cover over stage 2 (P1.n to P2)
			temp2 = Config.Channel[i].P2_offset - Config.Channel[i].P1n_offset;
    663c:	85 2d       	mov	r24, r5
    663e:	99 27       	eor	r25, r25
    6640:	87 fd       	sbrc	r24, 7
    6642:	90 95       	com	r25
    6644:	8a 19       	sub	r24, r10
    6646:	9b 09       	sbc	r25, r11
			temp2 = temp2 << 7;

			// Divide distance into steps
			temp1 = (100 - Config.Channel[i].P1n_position); 
    6648:	b3 01       	movw	r22, r6
    664a:	6e 19       	sub	r22, r14
    664c:	7f 09       	sbc	r23, r15
			temp2 = Config.Channel[i].P1n_position; 
			Step1 = ((temp1 + (temp2 >> 1)) / temp2) ; // Divide and round result
		
			// Work out distance to cover over stage 2 (P1.n to P2)
			temp2 = Config.Channel[i].P2_offset - Config.Channel[i].P1n_offset;
			temp2 = temp2 << 7;
    664e:	96 95       	lsr	r25
    6650:	98 2f       	mov	r25, r24
    6652:	88 27       	eor	r24, r24
    6654:	97 95       	ror	r25
    6656:	87 95       	ror	r24

			// Divide distance into steps
			temp1 = (100 - Config.Channel[i].P1n_position); 
			Step2 = ((temp2 + (temp1 >> 1)) / temp1) ; // Divide and round result	
    6658:	ab 01       	movw	r20, r22
    665a:	55 95       	asr	r21
    665c:	47 95       	ror	r20
    665e:	84 0f       	add	r24, r20
    6660:	95 1f       	adc	r25, r21
    6662:	0e 94 07 3e 	call	0x7c0e	; 0x7c0e <__divmodhi4>

			// Set start (P1) point
			temp3 = Config.Channel[i].P1_offset; // Promote to 16bits
			temp3 = temp3 << 7;
    6666:	d6 94       	lsr	r13
    6668:	dc 2c       	mov	r13, r12
    666a:	cc 24       	eor	r12, r12
    666c:	d7 94       	ror	r13
    666e:	c7 94       	ror	r12

			// Count up transition steps of the appropriate step size
			for (j = 0; j < transition; j++)
    6670:	40 e0       	ldi	r20, 0x00	; 0
    6672:	84 2f       	mov	r24, r20
    6674:	90 e0       	ldi	r25, 0x00	; 0
    6676:	80 17       	cp	r24, r16
    6678:	91 07       	cpc	r25, r17
    667a:	54 f4       	brge	.+20     	; 0x6690 <ProcessMixer+0x980>
			{
				// If in stage 1 use Step1 size
				if (j < Config.Channel[i].P1n_position)
    667c:	8e 15       	cp	r24, r14
    667e:	9f 05       	cpc	r25, r15
    6680:	1c f4       	brge	.+6      	; 0x6688 <ProcessMixer+0x978>
				{
					temp3 += Step1;
    6682:	c8 0c       	add	r12, r8
    6684:	d9 1c       	adc	r13, r9
    6686:	02 c0       	rjmp	.+4      	; 0x668c <ProcessMixer+0x97c>
				}
				// If in stage 2 use Step2 size
				else
				{
					temp3 += Step2;
    6688:	c6 0e       	add	r12, r22
    668a:	d7 1e       	adc	r13, r23
			// Set start (P1) point
			temp3 = Config.Channel[i].P1_offset; // Promote to 16bits
			temp3 = temp3 << 7;

			// Count up transition steps of the appropriate step size
			for (j = 0; j < transition; j++)
    668c:	4f 5f       	subi	r20, 0xFF	; 255
    668e:	f1 cf       	rjmp	.-30     	; 0x6672 <ProcessMixer+0x962>
					temp3 += Step2;
				}
			}

			// Reformat into a system-compatible value
			temp3 = ((temp3 + 64) >> 7);							// Round then divide by 128
    6690:	c6 01       	movw	r24, r12
    6692:	80 5c       	subi	r24, 0xC0	; 192
    6694:	9f 4f       	sbci	r25, 0xFF	; 255
    6696:	88 0f       	add	r24, r24
    6698:	89 2f       	mov	r24, r25
    669a:	88 1f       	adc	r24, r24
    669c:	99 0b       	sbc	r25, r25
int16_t scale_percent_nooffset(int8_t value)
{
	int16_t temp16_1, temp16_2;

	temp16_1 = value; // Promote
	temp16_2 = (temp16_1 * (int16_t)10);
    669e:	4a e0       	ldi	r20, 0x0A	; 10
    66a0:	84 02       	muls	r24, r20
    66a2:	60 01       	movw	r12, r0
    66a4:	11 24       	eor	r1, r1
				}
			}

			// Reformat into a system-compatible value
			temp3 = ((temp3 + 64) >> 7);							// Round then divide by 128
			P1_solution = scale_percent_nooffset((int8_t)temp3);	
    66a6:	05 c0       	rjmp	.+10     	; 0x66b2 <ProcessMixer+0x9a2>
int16_t scale_percent_nooffset(int8_t value)
{
	int16_t temp16_1, temp16_2;

	temp16_1 = value; // Promote
	temp16_2 = (temp16_1 * (int16_t)10);
    66a8:	55 2d       	mov	r21, r5
    66aa:	8a e0       	ldi	r24, 0x0A	; 10
    66ac:	58 02       	muls	r21, r24
    66ae:	60 01       	movw	r12, r0
    66b0:	11 24       	eor	r1, r1
		{
			P1_solution = scale_percent_nooffset(Config.Channel[i].P1_offset);
		}

		// Add offset to channel value
		Config.Channel[i].P1_value += P1_solution;
    66b2:	d9 01       	movw	r26, r18
    66b4:	4d 91       	ld	r20, X+
    66b6:	5c 91       	ld	r21, X
    66b8:	11 97       	sbiw	r26, 0x01	; 1
    66ba:	4c 0d       	add	r20, r12
    66bc:	5d 1d       	adc	r21, r13
    66be:	4d 93       	st	X+, r20
    66c0:	5c 93       	st	X, r21
    66c2:	23 5e       	subi	r18, 0xE3	; 227
    66c4:	3f 4f       	sbci	r19, 0xFF	; 255
    66c6:	7d 96       	adiw	r30, 0x1d	; 29
	//************************************************************
	// Per-channel 3-point offset needs to be after the transition  
	// loop as it is non-linear, unlike the transition.
	//************************************************************ 

	for (i = 0; i < MAX_OUTPUTS; i++)
    66c8:	b6 e0       	ldi	r27, 0x06	; 6
    66ca:	ee 3f       	cpi	r30, 0xFE	; 254
    66cc:	fb 07       	cpc	r31, r27
    66ce:	09 f0       	breq	.+2      	; 0x66d2 <ProcessMixer+0x9c2>
    66d0:	8d cf       	rjmp	.-230    	; 0x65ec <ProcessMixer+0x8dc>

		// Add offset to channel value
		Config.Channel[i].P1_value += P1_solution;
	}

} // ProcessMixer()
    66d2:	e0 96       	adiw	r28, 0x30	; 48
    66d4:	e2 e1       	ldi	r30, 0x12	; 18
    66d6:	0c 94 af 3e 	jmp	0x7d5e	; 0x7d5e <__epilogue_restores__>

000066da <scale_percent>:
int16_t scale_percent(int8_t value)
{
	int16_t temp16_1, temp16_2;

	temp16_1 = value; // Promote
	temp16_2 = ((temp16_1 * (int16_t)10) + 3750);
    66da:	2a e0       	ldi	r18, 0x0A	; 10
    66dc:	82 02       	muls	r24, r18
    66de:	c0 01       	movw	r24, r0
    66e0:	11 24       	eor	r1, r1

	return temp16_2;
}
    66e2:	8a 55       	subi	r24, 0x5A	; 90
    66e4:	91 4f       	sbci	r25, 0xF1	; 241
    66e6:	08 95       	ret

000066e8 <mugui_text_sizestring>:
	\return void
	\date 	12.08.2009
*/
/************************************************************************/
void mugui_text_sizestring(mugui_char_t *s, const unsigned char* font, mugui_size16_t *size)
{
    66e8:	a0 e0       	ldi	r26, 0x00	; 0
    66ea:	b0 e0       	ldi	r27, 0x00	; 0
    66ec:	ea e7       	ldi	r30, 0x7A	; 122
    66ee:	f3 e3       	ldi	r31, 0x33	; 51
    66f0:	0c 94 9e 3e 	jmp	0x7d3c	; 0x7d3c <__prologue_saves__+0x16>
	mugui_uint8_t  indexhighbyte = 0; 		//high byte of the bitmap address in the array
	mugui_uint32_t indexaddress = 0;		//bitmap address in the array (derived from low and high byte)

	/* read header of the font          */
	/* pgm_read_byte is ATMega specific */
	length = strlen(s);
    66f4:	dc 01       	movw	r26, r24
    66f6:	0d 90       	ld	r0, X+
    66f8:	00 20       	and	r0, r0
    66fa:	e9 f7       	brne	.-6      	; 0x66f6 <mugui_text_sizestring+0xe>
    66fc:	11 97       	sbiw	r26, 0x01	; 1
    66fe:	a8 1b       	sub	r26, r24
    6700:	b9 0b       	sbc	r27, r25
	height = pgm_read_byte(&font[4]);
    6702:	fb 01       	movw	r30, r22
    6704:	34 96       	adiw	r30, 0x04	; 4
    6706:	e4 90       	lpm	r14, Z
    6708:	f1 2c       	mov	r15, r1

	startcharacter = pgm_read_byte(&font[2]);
    670a:	32 97       	sbiw	r30, 0x02	; 2
    670c:	d4 90       	lpm	r13, Z
    670e:	ec 01       	movw	r28, r24
    6710:	a8 0f       	add	r26, r24
    6712:	b9 1f       	adc	r27, r25
	mugui_uint8_t  distance = 1;			//distance between characters
	mugui_uint16_t length = 0;				//temporary length of string
	mugui_uint16_t i = 0;					//counter variable
	mugui_uint16_t startcharacter = 0; 	    //startcharacter of the font
	mugui_uint16_t height = 0;				//height of the bitmap
	mugui_uint16_t width = 0; 				//width of the bitmap
    6714:	80 e0       	ldi	r24, 0x00	; 0
    6716:	90 e0       	ldi	r25, 0x00	; 0
	/* pgm_read_byte is ATMega specific */
	length = strlen(s);
	height = pgm_read_byte(&font[4]);

	startcharacter = pgm_read_byte(&font[2]);
	for(i=0;i<length;i++) //every character in prop fonts has its own width
    6718:	ca 17       	cp	r28, r26
    671a:	db 07       	cpc	r29, r27
    671c:	29 f1       	breq	.+74     	; 0x6768 <mugui_text_sizestring+0x80>
	{
		index = s[i] - startcharacter;
    671e:	29 91       	ld	r18, Y+
    6720:	2d 19       	sub	r18, r13
		indexhighbyte = pgm_read_byte(&font[index*2 + 5]);
    6722:	30 e0       	ldi	r19, 0x00	; 0
    6724:	22 0f       	add	r18, r18
    6726:	33 1f       	adc	r19, r19
    6728:	f9 01       	movw	r30, r18
    672a:	35 96       	adiw	r30, 0x05	; 5
    672c:	e6 0f       	add	r30, r22
    672e:	f7 1f       	adc	r31, r23
    6730:	04 91       	lpm	r16, Z
		indexlowbyte = pgm_read_byte(&font[index*2 + 6]);
    6732:	f9 01       	movw	r30, r18
    6734:	36 96       	adiw	r30, 0x06	; 6
    6736:	e6 0f       	add	r30, r22
    6738:	f7 1f       	adc	r31, r23
    673a:	e4 91       	lpm	r30, Z
		indexaddress = (mugui_int64_t)indexhighbyte;
    673c:	10 e0       	ldi	r17, 0x00	; 0
    673e:	20 e0       	ldi	r18, 0x00	; 0
    6740:	30 e0       	ldi	r19, 0x00	; 0
		indexaddress = indexaddress << 8;
    6742:	32 2f       	mov	r19, r18
    6744:	21 2f       	mov	r18, r17
    6746:	10 2f       	mov	r17, r16
    6748:	00 27       	eor	r16, r16
		indexaddress += indexlowbyte;
    674a:	0e 0f       	add	r16, r30
    674c:	11 1d       	adc	r17, r1
    674e:	21 1d       	adc	r18, r1
    6750:	31 1d       	adc	r19, r1
		width += pgm_read_byte(&font[indexaddress]) + distance;
    6752:	fb 01       	movw	r30, r22
    6754:	e0 0f       	add	r30, r16
    6756:	f1 1f       	adc	r31, r17
    6758:	04 91       	lpm	r16, Z
    675a:	20 2f       	mov	r18, r16
    675c:	30 e0       	ldi	r19, 0x00	; 0
    675e:	2f 5f       	subi	r18, 0xFF	; 255
    6760:	3f 4f       	sbci	r19, 0xFF	; 255
    6762:	82 0f       	add	r24, r18
    6764:	93 1f       	adc	r25, r19
    6766:	d8 cf       	rjmp	.-80     	; 0x6718 <mugui_text_sizestring+0x30>
	}

	/* prepare return value */
	size->x = width;
    6768:	fa 01       	movw	r30, r20
    676a:	91 83       	std	Z+1, r25	; 0x01
    676c:	80 83       	st	Z, r24
	size->y = height;
    676e:	f3 82       	std	Z+3, r15	; 0x03
    6770:	e2 82       	std	Z+2, r14	; 0x02
}
    6772:	cd b7       	in	r28, 0x3d	; 61
    6774:	de b7       	in	r29, 0x3e	; 62
    6776:	e7 e0       	ldi	r30, 0x07	; 7
    6778:	0c 94 ba 3e 	jmp	0x7d74	; 0x7d74 <__epilogue_restores__+0x16>

0000677c <pgm_mugui_scopy>:
	\date 	30.07.2012
	\Created by D. Thompson
*/
/************************************************************************/
void pgm_mugui_scopy(const char *s)
{
    677c:	ec e4       	ldi	r30, 0x4C	; 76
    677e:	f5 e0       	ldi	r31, 0x05	; 5

	// Clear buffer first
	// Actually two bytes smaller than using memset()
	for (i = 0; i < PBUFFER_SIZE; i++)
	{
		pBuffer[i] = 0x00;
    6780:	11 92       	st	Z+, r1
{
	int i = 0;

	// Clear buffer first
	// Actually two bytes smaller than using memset()
	for (i = 0; i < PBUFFER_SIZE; i++)
    6782:	25 e0       	ldi	r18, 0x05	; 5
    6784:	ec 35       	cpi	r30, 0x5C	; 92
    6786:	f2 07       	cpc	r31, r18
    6788:	d9 f7       	brne	.-10     	; 0x6780 <pgm_mugui_scopy+0x4>
    678a:	ac e4       	ldi	r26, 0x4C	; 76
    678c:	b5 e0       	ldi	r27, 0x05	; 5
	{
		pBuffer[i] = 0x00;
	}

	i = 0;
	while(pgm_read_byte(s) != 0x00) 
    678e:	9c 01       	movw	r18, r24
    6790:	fc 01       	movw	r30, r24
    6792:	44 91       	lpm	r20, Z
    6794:	44 23       	and	r20, r20
    6796:	29 f0       	breq	.+10     	; 0x67a2 <pgm_mugui_scopy+0x26>
	{
		pBuffer[i] = pgm_read_byte(s++);
    6798:	01 96       	adiw	r24, 0x01	; 1
    679a:	f9 01       	movw	r30, r18
    679c:	24 91       	lpm	r18, Z
    679e:	2d 93       	st	X+, r18
    67a0:	f6 cf       	rjmp	.-20     	; 0x678e <pgm_mugui_scopy+0x12>
		i++;
	}
}
    67a2:	08 95       	ret

000067a4 <mugui_lcd_putc>:
	\date 	13.11.2009
	\Modified by D. Thompson 14/08/2012 - Now hard-coded for proportional, type 2 (verticalCeiling)
*/
/************************************************************************/
mugui_uint16_t mugui_lcd_putc(mugui_char_t c, const unsigned char* font,mugui_uint16_t x, mugui_uint16_t y)
{
    67a4:	a9 e0       	ldi	r26, 0x09	; 9
    67a6:	b0 e0       	ldi	r27, 0x00	; 0
    67a8:	e8 ed       	ldi	r30, 0xD8	; 216
    67aa:	f3 e3       	ldi	r31, 0x33	; 51
    67ac:	0c 94 93 3e 	jmp	0x7d26	; 0x7d26 <__prologue_saves__>
    67b0:	4c 83       	std	Y+4, r20	; 0x04
    67b2:	2d 83       	std	Y+5, r18	; 0x05
	mugui_uint8_t  tc= 0;	 				//temorary count
	mugui_uint8_t  bytes= 0;  				//bytes per line or row

	/* Read header of the font          */
	/* pgm_read_byte is ATMega specific */
	startcharacter = pgm_read_byte(&font[2]);
    67b4:	fb 01       	movw	r30, r22
    67b6:	32 96       	adiw	r30, 0x02	; 2
    67b8:	94 91       	lpm	r25, Z
	height = pgm_read_byte(&font[4]);
    67ba:	32 96       	adiw	r30, 0x02	; 2
    67bc:	e4 91       	lpm	r30, Z
    67be:	2e 2e       	mov	r2, r30
    67c0:	31 2c       	mov	r3, r1

	/* Read the rest of the header */
	index = c - startcharacter;
    67c2:	89 1b       	sub	r24, r25
	indexhighbyte = pgm_read_byte(&font[index*2 + 5]);
    67c4:	90 e0       	ldi	r25, 0x00	; 0
    67c6:	88 0f       	add	r24, r24
    67c8:	99 1f       	adc	r25, r25
    67ca:	fc 01       	movw	r30, r24
    67cc:	35 96       	adiw	r30, 0x05	; 5
    67ce:	e6 0f       	add	r30, r22
    67d0:	f7 1f       	adc	r31, r23
    67d2:	64 90       	lpm	r6, Z
	indexlowbyte = pgm_read_byte(&font[index*2 + 6]);
    67d4:	fc 01       	movw	r30, r24
    67d6:	36 96       	adiw	r30, 0x06	; 6
    67d8:	e6 0f       	add	r30, r22
    67da:	f7 1f       	adc	r31, r23
    67dc:	84 91       	lpm	r24, Z
	indexaddress = (mugui_int64_t)indexhighbyte;
    67de:	06 2d       	mov	r16, r6
    67e0:	10 e0       	ldi	r17, 0x00	; 0
    67e2:	20 e0       	ldi	r18, 0x00	; 0
    67e4:	30 e0       	ldi	r19, 0x00	; 0
	indexaddress = indexaddress << 8;
    67e6:	32 2f       	mov	r19, r18
    67e8:	21 2f       	mov	r18, r17
    67ea:	10 2f       	mov	r17, r16
    67ec:	00 27       	eor	r16, r16
	indexaddress += indexlowbyte;
    67ee:	08 0f       	add	r16, r24
    67f0:	11 1d       	adc	r17, r1
    67f2:	21 1d       	adc	r18, r1
    67f4:	31 1d       	adc	r19, r1
	width = pgm_read_byte(&font[indexaddress]);
    67f6:	c8 01       	movw	r24, r16
    67f8:	fb 01       	movw	r30, r22
    67fa:	e0 0f       	add	r30, r16
    67fc:	f1 1f       	adc	r31, r17
    67fe:	64 90       	lpm	r6, Z
    6800:	71 2c       	mov	r7, r1

	/* Determine the number of bytes for given width */ 
	bytes = ((height-1)>>3)+1;
    6802:	21 01       	movw	r4, r2
    6804:	21 e0       	ldi	r18, 0x01	; 1
    6806:	42 1a       	sub	r4, r18
    6808:	51 08       	sbc	r5, r1
    680a:	13 e0       	ldi	r17, 0x03	; 3
    680c:	56 94       	lsr	r5
    680e:	47 94       	ror	r4
    6810:	1a 95       	dec	r17
    6812:	e1 f7       	brne	.-8      	; 0x680c <mugui_lcd_putc+0x68>
    6814:	43 94       	inc	r4
    6816:	a4 2d       	mov	r26, r4
    6818:	b0 e0       	ldi	r27, 0x00	; 0
    681a:	ba 83       	std	Y+2, r27	; 0x02
    681c:	a9 83       	std	Y+1, r26	; 0x01
	/* For every column */
	for(tx= 0; tx < width; tx++) //for every row
    681e:	a1 2c       	mov	r10, r1
    6820:	b1 2c       	mov	r11, r1
    6822:	00 e0       	ldi	r16, 0x00	; 0
    6824:	10 e0       	ldi	r17, 0x00	; 0
    6826:	4b 01       	movw	r8, r22
    6828:	bf ef       	ldi	r27, 0xFF	; 255
    682a:	8b 1a       	sub	r8, r27
    682c:	9b 0a       	sbc	r9, r27
    682e:	88 0e       	add	r8, r24
    6830:	99 1e       	adc	r9, r25
    6832:	06 15       	cp	r16, r6
    6834:	17 05       	cpc	r17, r7
    6836:	08 f0       	brcs	.+2      	; 0x683a <mugui_lcd_putc+0x96>
    6838:	43 c0       	rjmp	.+134    	; 0x68c0 <mugui_lcd_putc+0x11c>
    683a:	c1 2c       	mov	r12, r1
    683c:	d1 2c       	mov	r13, r1
    683e:	e1 2c       	mov	r14, r1
    6840:	f1 2c       	mov	r15, r1
    6842:	94 01       	movw	r18, r8
    6844:	2a 0d       	add	r18, r10
    6846:	3b 1d       	adc	r19, r11
    6848:	3f 83       	std	Y+7, r19	; 0x07
    684a:	2e 83       	std	Y+6, r18	; 0x06
    684c:	5c 80       	ldd	r5, Y+4	; 0x04
    684e:	50 0e       	add	r5, r16
	{
		ty = 0;
		/* For every byte */
		for(tb = 0; tb < bytes; tb ++)
    6850:	c4 14       	cp	r12, r4
    6852:	78 f5       	brcc	.+94     	; 0x68b2 <mugui_lcd_putc+0x10e>
    6854:	ee 81       	ldd	r30, Y+6	; 0x06
    6856:	ff 81       	ldd	r31, Y+7	; 0x07
    6858:	ec 0d       	add	r30, r12
    685a:	fd 1d       	adc	r31, r13
		{
			/* Read bytes from program memory - ATMega specific */
			data = pgm_read_byte(&font[indexaddress + 1 + bytes*tx + tb]);
    685c:	34 91       	lpm	r19, Z
    685e:	3b 83       	std	Y+3, r19	; 0x03
    6860:	19 86       	std	Y+9, r1	; 0x09
    6862:	18 86       	std	Y+8, r1	; 0x08
			/* For every bit within the height */
			for(tc = 0;  ( (tc < 8) && (ty < height) ); tc ++)
    6864:	e2 14       	cp	r14, r2
    6866:	f3 04       	cpc	r15, r3
    6868:	00 f5       	brcc	.+64     	; 0x68aa <mugui_lcd_putc+0x106>
			{
					/* Determine the bit mask */
					mask = 1<<(tc);
    686a:	81 e0       	ldi	r24, 0x01	; 1
    686c:	90 e0       	ldi	r25, 0x00	; 0
    686e:	08 84       	ldd	r0, Y+8	; 0x08
    6870:	02 c0       	rjmp	.+4      	; 0x6876 <mugui_lcd_putc+0xd2>
    6872:	88 0f       	add	r24, r24
    6874:	99 1f       	adc	r25, r25
    6876:	0a 94       	dec	r0
    6878:	e2 f7       	brpl	.-8      	; 0x6872 <mugui_lcd_putc+0xce>
					bit = data & mask;
    687a:	3b 81       	ldd	r19, Y+3	; 0x03
    687c:	83 23       	and	r24, r19
    687e:	4d 81       	ldd	r20, Y+5	; 0x05
    6880:	4e 0d       	add	r20, r14
					if(bit)
    6882:	88 23       	and	r24, r24
    6884:	11 f0       	breq	.+4      	; 0x688a <mugui_lcd_putc+0xe6>
					{
						setpixel(buffer,tx+x,ty+y,1);
    6886:	21 e0       	ldi	r18, 0x01	; 1
    6888:	01 c0       	rjmp	.+2      	; 0x688c <mugui_lcd_putc+0xe8>
					}
					else
					{
						setpixel(buffer,tx+x,ty+y,0);
    688a:	20 e0       	ldi	r18, 0x00	; 0
    688c:	65 2d       	mov	r22, r5
    688e:	80 e0       	ldi	r24, 0x00	; 0
    6890:	91 e0       	ldi	r25, 0x01	; 1
    6892:	0e 94 02 1b 	call	0x3604	; 0x3604 <setpixel>
					}
					ty++;
    6896:	8f ef       	ldi	r24, 0xFF	; 255
    6898:	e8 1a       	sub	r14, r24
    689a:	f8 0a       	sbc	r15, r24
    689c:	a8 85       	ldd	r26, Y+8	; 0x08
    689e:	b9 85       	ldd	r27, Y+9	; 0x09
    68a0:	11 96       	adiw	r26, 0x01	; 1
    68a2:	b9 87       	std	Y+9, r27	; 0x09
    68a4:	a8 87       	std	Y+8, r26	; 0x08
		for(tb = 0; tb < bytes; tb ++)
		{
			/* Read bytes from program memory - ATMega specific */
			data = pgm_read_byte(&font[indexaddress + 1 + bytes*tx + tb]);
			/* For every bit within the height */
			for(tc = 0;  ( (tc < 8) && (ty < height) ); tc ++)
    68a6:	18 97       	sbiw	r26, 0x08	; 8
    68a8:	e9 f6       	brne	.-70     	; 0x6864 <mugui_lcd_putc+0xc0>
    68aa:	bf ef       	ldi	r27, 0xFF	; 255
    68ac:	cb 1a       	sub	r12, r27
    68ae:	db 0a       	sbc	r13, r27
    68b0:	cf cf       	rjmp	.-98     	; 0x6850 <mugui_lcd_putc+0xac>
	width = pgm_read_byte(&font[indexaddress]);

	/* Determine the number of bytes for given width */ 
	bytes = ((height-1)>>3)+1;
	/* For every column */
	for(tx= 0; tx < width; tx++) //for every row
    68b2:	0f 5f       	subi	r16, 0xFF	; 255
    68b4:	1f 4f       	sbci	r17, 0xFF	; 255
    68b6:	e9 81       	ldd	r30, Y+1	; 0x01
    68b8:	fa 81       	ldd	r31, Y+2	; 0x02
    68ba:	ae 0e       	add	r10, r30
    68bc:	bf 1e       	adc	r11, r31
    68be:	b9 cf       	rjmp	.-142    	; 0x6832 <mugui_lcd_putc+0x8e>
			}
		}
	}

	return width;
}
    68c0:	c3 01       	movw	r24, r6
    68c2:	29 96       	adiw	r28, 0x09	; 9
    68c4:	e2 e1       	ldi	r30, 0x12	; 18
    68c6:	0c 94 af 3e 	jmp	0x7d5e	; 0x7d5e <__epilogue_restores__>

000068ca <pgm_mugui_lcd_puts>:
	\date 	12.08.2009
	\Modified by D. Thompson 27/07/2012
*/
/************************************************************************/
void pgm_mugui_lcd_puts(const unsigned char* s, const unsigned char* font,mugui_uint16_t x, mugui_uint16_t y)
{
    68ca:	a0 e0       	ldi	r26, 0x00	; 0
    68cc:	b0 e0       	ldi	r27, 0x00	; 0
    68ce:	eb e6       	ldi	r30, 0x6B	; 107
    68d0:	f4 e3       	ldi	r31, 0x34	; 52
    68d2:	0c 94 9b 3e 	jmp	0x7d36	; 0x7d36 <__prologue_saves__+0x10>
    68d6:	ec 01       	movw	r28, r24
    68d8:	7b 01       	movw	r14, r22
    68da:	6a 01       	movw	r12, r20
    68dc:	59 01       	movw	r10, r18
	mugui_uint8_t distance  = 1;			// Distance between characters
	mugui_uint16_t xpos     = 0;			// Relative xpos of character
    68de:	00 e0       	ldi	r16, 0x00	; 0
    68e0:	10 e0       	ldi	r17, 0x00	; 0

	while(pgm_read_byte(s) != 0x00) 
    68e2:	ce 01       	movw	r24, r28
    68e4:	fe 01       	movw	r30, r28
    68e6:	24 91       	lpm	r18, Z
    68e8:	22 23       	and	r18, r18
    68ea:	71 f0       	breq	.+28     	; 0x6908 <pgm_mugui_lcd_puts+0x3e>
	{
		xpos += mugui_lcd_putc(pgm_read_byte(s++), font, x + xpos, y) + distance;
    68ec:	21 96       	adiw	r28, 0x01	; 1
    68ee:	fc 01       	movw	r30, r24
    68f0:	84 91       	lpm	r24, Z
    68f2:	a8 01       	movw	r20, r16
    68f4:	4c 0d       	add	r20, r12
    68f6:	5d 1d       	adc	r21, r13
    68f8:	95 01       	movw	r18, r10
    68fa:	b7 01       	movw	r22, r14
    68fc:	0e 94 d2 33 	call	0x67a4	; 0x67a4 <mugui_lcd_putc>
    6900:	01 96       	adiw	r24, 0x01	; 1
    6902:	08 0f       	add	r16, r24
    6904:	19 1f       	adc	r17, r25
    6906:	ed cf       	rjmp	.-38     	; 0x68e2 <pgm_mugui_lcd_puts+0x18>
	}
}
    6908:	cd b7       	in	r28, 0x3d	; 61
    690a:	de b7       	in	r29, 0x3e	; 62
    690c:	ea e0       	ldi	r30, 0x0A	; 10
    690e:	0c 94 b7 3e 	jmp	0x7d6e	; 0x7d6e <__epilogue_restores__+0x10>

00006912 <mugui_lcd_puts>:
	\return void
	\date 	12.08.2009
*/
/************************************************************************/
void mugui_lcd_puts(mugui_char_t *s, const unsigned char* font,mugui_uint16_t x, mugui_uint16_t y)
{
    6912:	a0 e0       	ldi	r26, 0x00	; 0
    6914:	b0 e0       	ldi	r27, 0x00	; 0
    6916:	ef e8       	ldi	r30, 0x8F	; 143
    6918:	f4 e3       	ldi	r31, 0x34	; 52
    691a:	0c 94 99 3e 	jmp	0x7d32	; 0x7d32 <__prologue_saves__+0xc>
    691e:	6b 01       	movw	r12, r22
    6920:	5a 01       	movw	r10, r20
    6922:	49 01       	movw	r8, r18
	mugui_uint8_t distance  = 1;			//distance between characters
	mugui_uint16_t xpos     = 0;			//relativ xpos of character
	mugui_uint16_t length 	= 0;			//temporary length of string
	mugui_uint16_t i 		= 0;			//counter variable
	
	length = strlen(s);
    6924:	ec 01       	movw	r28, r24
    6926:	09 90       	ld	r0, Y+
    6928:	00 20       	and	r0, r0
    692a:	e9 f7       	brne	.-6      	; 0x6926 <mugui_lcd_puts+0x14>
    692c:	8c 01       	movw	r16, r24
    692e:	21 97       	sbiw	r28, 0x01	; 1
*/
/************************************************************************/
void mugui_lcd_puts(mugui_char_t *s, const unsigned char* font,mugui_uint16_t x, mugui_uint16_t y)
{
	mugui_uint8_t distance  = 1;			//distance between characters
	mugui_uint16_t xpos     = 0;			//relativ xpos of character
    6930:	e1 2c       	mov	r14, r1
    6932:	f1 2c       	mov	r15, r1
	mugui_uint16_t length 	= 0;			//temporary length of string
	mugui_uint16_t i 		= 0;			//counter variable
	
	length = strlen(s);
	for(i=0; i<length; i++)
    6934:	0c 17       	cp	r16, r28
    6936:	1d 07       	cpc	r17, r29
    6938:	71 f0       	breq	.+28     	; 0x6956 <mugui_lcd_puts+0x44>
	{
		xpos += mugui_lcd_putc(s[i], font, x + xpos, y) + distance;
    693a:	a7 01       	movw	r20, r14
    693c:	4a 0d       	add	r20, r10
    693e:	5b 1d       	adc	r21, r11
    6940:	94 01       	movw	r18, r8
    6942:	b6 01       	movw	r22, r12
    6944:	f8 01       	movw	r30, r16
    6946:	81 91       	ld	r24, Z+
    6948:	8f 01       	movw	r16, r30
    694a:	0e 94 d2 33 	call	0x67a4	; 0x67a4 <mugui_lcd_putc>
    694e:	01 96       	adiw	r24, 0x01	; 1
    6950:	e8 0e       	add	r14, r24
    6952:	f9 1e       	adc	r15, r25
    6954:	ef cf       	rjmp	.-34     	; 0x6934 <mugui_lcd_puts+0x22>
	}
}
    6956:	cd b7       	in	r28, 0x3d	; 61
    6958:	de b7       	in	r29, 0x3e	; 62
    695a:	ec e0       	ldi	r30, 0x0C	; 12
    695c:	0c 94 b5 3e 	jmp	0x7d6a	; 0x7d6a <__epilogue_restores__+0xc>

00006960 <Calculate_PID>:
int16_t PID_Gyros[FLIGHT_MODES][NUMBEROFAXIS];
int16_t PID_ACCs[FLIGHT_MODES][NUMBEROFAXIS];
int32_t	IntegralGyro[FLIGHT_MODES][NUMBEROFAXIS];	// PID I-terms (gyro) for each axis

void Calculate_PID(void)
{
    6960:	a1 e6       	ldi	r26, 0x61	; 97
    6962:	b0 e0       	ldi	r27, 0x00	; 0
    6964:	e6 eb       	ldi	r30, 0xB6	; 182
    6966:	f4 e3       	ldi	r31, 0x34	; 52
    6968:	0c 94 93 3e 	jmp	0x7d26	; 0x7d26 <__prologue_saves__>
	// So why is AILERON different? Well on the KK hardware the sensors are arranged such that
	// RIGHT roll = +ve gyro, UP pitch = +ve gyro and LEFT yaw = +ve gyro.
	// However the way we have organised stick polarity, RIGHT roll and yaw are +ve, and DOWN elevator is too.
	// When combining with the gyro signals, the sticks have to be in the opposite polarity as the gyros.
	// As described above, pitch and yaw are already opposed, but roll needs to be reversed.
	int16_t	RCinputsAxis[NUMBEROFAXIS] = {-RCinputs[AILERON], RCinputs[ELEVATOR], RCinputs[RUDDER]}; 
    696c:	80 91 a1 07 	lds	r24, 0x07A1
    6970:	90 91 a2 07 	lds	r25, 0x07A2
    6974:	91 95       	neg	r25
    6976:	81 95       	neg	r24
    6978:	91 09       	sbc	r25, r1
    697a:	9a a3       	std	Y+34, r25	; 0x22
    697c:	89 a3       	std	Y+33, r24	; 0x21
    697e:	80 91 a3 07 	lds	r24, 0x07A3
    6982:	90 91 a4 07 	lds	r25, 0x07A4
    6986:	9c a3       	std	Y+36, r25	; 0x24
    6988:	8b a3       	std	Y+35, r24	; 0x23
    698a:	80 91 a5 07 	lds	r24, 0x07A5
    698e:	90 91 a6 07 	lds	r25, 0x07A6
    6992:	9e a3       	std	Y+38, r25	; 0x26
    6994:	8d a3       	std	Y+37, r24	; 0x25

	// Initialise arrays with gain values.
	int8_t 	P_gain[FLIGHT_MODES][NUMBEROFAXIS] = 
    6996:	80 91 b1 05 	lds	r24, 0x05B1
    699a:	8b 8f       	std	Y+27, r24	; 0x1b
    699c:	80 91 b7 05 	lds	r24, 0x05B7
    69a0:	8c 8f       	std	Y+28, r24	; 0x1c
    69a2:	80 91 bd 05 	lds	r24, 0x05BD
    69a6:	8d 8f       	std	Y+29, r24	; 0x1d
    69a8:	80 91 c3 05 	lds	r24, 0x05C3
    69ac:	8e 8f       	std	Y+30, r24	; 0x1e
    69ae:	80 91 c9 05 	lds	r24, 0x05C9
    69b2:	8f 8f       	std	Y+31, r24	; 0x1f
    69b4:	80 91 cf 05 	lds	r24, 0x05CF
    69b8:	88 a3       	std	Y+32, r24	; 0x20
		{
			{Config.FlightMode[P1].Roll_P_mult, Config.FlightMode[P1].Pitch_P_mult, Config.FlightMode[P1].Yaw_P_mult},
		 	{Config.FlightMode[P2].Roll_P_mult, Config.FlightMode[P2].Pitch_P_mult, Config.FlightMode[P2].Yaw_P_mult}
		};

	int8_t 	I_gain[FLIGHT_MODES][NUMBEROFAXIS] = 
    69ba:	80 91 b2 05 	lds	r24, 0x05B2
    69be:	8d 8b       	std	Y+21, r24	; 0x15
    69c0:	80 91 b8 05 	lds	r24, 0x05B8
    69c4:	8e 8b       	std	Y+22, r24	; 0x16
    69c6:	80 91 be 05 	lds	r24, 0x05BE
    69ca:	8f 8b       	std	Y+23, r24	; 0x17
    69cc:	80 91 c4 05 	lds	r24, 0x05C4
    69d0:	88 8f       	std	Y+24, r24	; 0x18
    69d2:	80 91 ca 05 	lds	r24, 0x05CA
    69d6:	89 8f       	std	Y+25, r24	; 0x19
    69d8:	80 91 d0 05 	lds	r24, 0x05D0
    69dc:	8a 8f       	std	Y+26, r24	; 0x1a
		{
			{Config.FlightMode[P1].Roll_I_mult, Config.FlightMode[P1].Pitch_I_mult, Config.FlightMode[P1].Yaw_I_mult},
			{Config.FlightMode[P2].Roll_I_mult, Config.FlightMode[P2].Pitch_I_mult, Config.FlightMode[P2].Yaw_I_mult}
		};

	int8_t 	D_gain[FLIGHT_MODES][NUMBEROFAXIS] =  
    69de:	80 91 b4 05 	lds	r24, 0x05B4
    69e2:	8f 87       	std	Y+15, r24	; 0x0f
    69e4:	80 91 ba 05 	lds	r24, 0x05BA
    69e8:	88 8b       	std	Y+16, r24	; 0x10
    69ea:	80 91 c0 05 	lds	r24, 0x05C0
    69ee:	89 8b       	std	Y+17, r24	; 0x11
    69f0:	80 91 c6 05 	lds	r24, 0x05C6
    69f4:	8a 8b       	std	Y+18, r24	; 0x12
    69f6:	80 91 cc 05 	lds	r24, 0x05CC
    69fa:	8b 8b       	std	Y+19, r24	; 0x13
    69fc:	80 91 d2 05 	lds	r24, 0x05D2
    6a00:	8c 8b       	std	Y+20, r24	; 0x14
		{
			{Config.FlightMode[P1].Roll_D_mult, Config.FlightMode[P1].Pitch_D_mult, Config.FlightMode[P1].Yaw_D_mult},
			{Config.FlightMode[P2].Roll_D_mult, Config.FlightMode[P2].Pitch_D_mult, Config.FlightMode[P2].Yaw_D_mult}
		};

	int8_t 	L_gain[FLIGHT_MODES][NUMBEROFAXIS] = 
    6a02:	80 91 b5 05 	lds	r24, 0x05B5
    6a06:	89 87       	std	Y+9, r24	; 0x09
    6a08:	80 91 bb 05 	lds	r24, 0x05BB
    6a0c:	8a 87       	std	Y+10, r24	; 0x0a
		{
			{Config.FlightMode[P1].A_Roll_P_mult, Config.FlightMode[P1].A_Pitch_P_mult, Config.FlightMode[P1].A_Zed_P_mult},
    6a0e:	40 90 c2 05 	lds	r4, 0x05C2
    6a12:	26 96       	adiw	r28, 0x06	; 6
    6a14:	4f ae       	std	Y+63, r4	; 0x3f
    6a16:	26 97       	sbiw	r28, 0x06	; 6
		{
			{Config.FlightMode[P1].Roll_D_mult, Config.FlightMode[P1].Pitch_D_mult, Config.FlightMode[P1].Yaw_D_mult},
			{Config.FlightMode[P2].Roll_D_mult, Config.FlightMode[P2].Pitch_D_mult, Config.FlightMode[P2].Yaw_D_mult}
		};

	int8_t 	L_gain[FLIGHT_MODES][NUMBEROFAXIS] = 
    6a18:	4b 86       	std	Y+11, r4	; 0x0b
    6a1a:	80 91 c7 05 	lds	r24, 0x05C7
    6a1e:	8c 87       	std	Y+12, r24	; 0x0c
    6a20:	80 91 cd 05 	lds	r24, 0x05CD
    6a24:	8d 87       	std	Y+13, r24	; 0x0d
		{
			{Config.FlightMode[P1].A_Roll_P_mult, Config.FlightMode[P1].A_Pitch_P_mult, Config.FlightMode[P1].A_Zed_P_mult},
			{Config.FlightMode[P2].A_Roll_P_mult, Config.FlightMode[P2].A_Pitch_P_mult, Config.FlightMode[P2].A_Zed_P_mult}
    6a26:	50 90 d4 05 	lds	r5, 0x05D4
    6a2a:	27 96       	adiw	r28, 0x07	; 7
    6a2c:	5f ae       	std	Y+63, r5	; 0x3f
    6a2e:	27 97       	sbiw	r28, 0x07	; 7
		{
			{Config.FlightMode[P1].Roll_D_mult, Config.FlightMode[P1].Pitch_D_mult, Config.FlightMode[P1].Yaw_D_mult},
			{Config.FlightMode[P2].Roll_D_mult, Config.FlightMode[P2].Pitch_D_mult, Config.FlightMode[P2].Yaw_D_mult}
		};

	int8_t 	L_gain[FLIGHT_MODES][NUMBEROFAXIS] = 
    6a30:	5e 86       	std	Y+14, r5	; 0x0e
			{Config.FlightMode[P1].A_Roll_P_mult, Config.FlightMode[P1].A_Pitch_P_mult, Config.FlightMode[P1].A_Zed_P_mult},
			{Config.FlightMode[P2].A_Roll_P_mult, Config.FlightMode[P2].A_Pitch_P_mult, Config.FlightMode[P2].A_Zed_P_mult}
		};

	// Only for roll and pitch acc trim
	int16_t	L_trim[FLIGHT_MODES][2] =
    6a32:	80 91 34 07 	lds	r24, 0x0734
    6a36:	90 91 35 07 	lds	r25, 0x0735
    6a3a:	9a 83       	std	Y+2, r25	; 0x02
    6a3c:	89 83       	std	Y+1, r24	; 0x01
    6a3e:	80 91 38 07 	lds	r24, 0x0738
    6a42:	90 91 39 07 	lds	r25, 0x0739
    6a46:	9c 83       	std	Y+4, r25	; 0x04
    6a48:	8b 83       	std	Y+3, r24	; 0x03
    6a4a:	80 91 36 07 	lds	r24, 0x0736
    6a4e:	90 91 37 07 	lds	r25, 0x0737
    6a52:	9e 83       	std	Y+6, r25	; 0x06
    6a54:	8d 83       	std	Y+5, r24	; 0x05
    6a56:	80 91 3a 07 	lds	r24, 0x073A
    6a5a:	90 91 3b 07 	lds	r25, 0x073B
    6a5e:	98 87       	std	Y+8, r25	; 0x08
    6a60:	8f 83       	std	Y+7, r24	; 0x07
		// Increment and limit gyro I-terms, handle heading hold nicely
		//************************************************************

		// Work out stick rate divider. 0 is fastest, 4 is slowest.
		// /64 (15), /32 (30), /16 (60*), /8 (120), /4 (240)
		stick = RCinputsAxis[axis] >> (Config.Stick_Lock_rate + 2);
    6a62:	80 91 ae 05 	lds	r24, 0x05AE
    6a66:	68 2e       	mov	r6, r24
    6a68:	77 24       	eor	r7, r7
    6a6a:	67 fc       	sbrc	r6, 7
    6a6c:	70 94       	com	r7
    6a6e:	f3 01       	movw	r30, r6
    6a70:	32 96       	adiw	r30, 0x02	; 2
    6a72:	fe af       	std	Y+62, r31	; 0x3e
    6a74:	ed af       	std	Y+61, r30	; 0x3d
		// Add in gyro Yaw trim
		//************************************************************

		if (axis == YAW)
		{
			PID_gyro_temp1 = (int32_t)(Config.FlightMode[P1].Yaw_trim << 6);
    6a76:	80 91 c1 05 	lds	r24, 0x05C1
    6a7a:	f0 e4       	ldi	r31, 0x40	; 64
    6a7c:	8f 02       	muls	r24, r31
    6a7e:	c0 01       	movw	r24, r0
    6a80:	11 24       	eor	r1, r1
    6a82:	2c 01       	movw	r4, r24
    6a84:	66 24       	eor	r6, r6
    6a86:	57 fc       	sbrc	r5, 7
    6a88:	60 94       	com	r6
    6a8a:	76 2c       	mov	r7, r6
    6a8c:	6e 96       	adiw	r28, 0x1e	; 30
    6a8e:	4c ae       	std	Y+60, r4	; 0x3c
    6a90:	5d ae       	std	Y+61, r5	; 0x3d
    6a92:	6e ae       	std	Y+62, r6	; 0x3e
    6a94:	7f ae       	std	Y+63, r7	; 0x3f
    6a96:	6e 97       	sbiw	r28, 0x1e	; 30
			PID_gyro_temp2 = (int32_t)(Config.FlightMode[P2].Yaw_trim << 6);
    6a98:	80 91 d3 05 	lds	r24, 0x05D3
    6a9c:	20 e4       	ldi	r18, 0x40	; 64
    6a9e:	82 02       	muls	r24, r18
    6aa0:	c0 01       	movw	r24, r0
    6aa2:	11 24       	eor	r1, r1
    6aa4:	2c 01       	movw	r4, r24
    6aa6:	66 24       	eor	r6, r6
    6aa8:	57 fc       	sbrc	r5, 7
    6aaa:	60 94       	com	r6
    6aac:	76 2c       	mov	r7, r6
    6aae:	a2 96       	adiw	r28, 0x22	; 34
    6ab0:	4c ae       	std	Y+60, r4	; 0x3c
    6ab2:	5d ae       	std	Y+61, r5	; 0x3d
    6ab4:	6e ae       	std	Y+62, r6	; 0x3e
    6ab6:	7f ae       	std	Y+63, r7	; 0x3f
    6ab8:	a2 97       	sbiw	r28, 0x22	; 34
    6aba:	e0 e6       	ldi	r30, 0x60	; 96
    6abc:	f5 e0       	ldi	r31, 0x05	; 5
    6abe:	fa ab       	std	Y+50, r31	; 0x32
    6ac0:	e9 ab       	std	Y+49, r30	; 0x31
    6ac2:	e5 e8       	ldi	r30, 0x85	; 133
    6ac4:	f7 e0       	ldi	r31, 0x07	; 7
    6ac6:	fc ab       	std	Y+52, r31	; 0x34
    6ac8:	eb ab       	std	Y+51, r30	; 0x33
    6aca:	ea e6       	ldi	r30, 0x6A	; 106
    6acc:	f5 e0       	ldi	r31, 0x05	; 5
    6ace:	23 96       	adiw	r28, 0x03	; 3
    6ad0:	ff af       	std	Y+63, r31	; 0x3f
    6ad2:	ee af       	std	Y+62, r30	; 0x3e
    6ad4:	23 97       	sbiw	r28, 0x03	; 3
    6ad6:	fe 01       	movw	r30, r28
    6ad8:	31 96       	adiw	r30, 0x01	; 1
    6ada:	fa af       	std	Y+58, r31	; 0x3a
    6adc:	e9 af       	std	Y+57, r30	; 0x39
    6ade:	e1 e9       	ldi	r30, 0x91	; 145
    6ae0:	f7 e0       	ldi	r31, 0x07	; 7
    6ae2:	fc af       	std	Y+60, r31	; 0x3c
    6ae4:	eb af       	std	Y+59, r30	; 0x3b
    6ae6:	fe 01       	movw	r30, r28
    6ae8:	3c 96       	adiw	r30, 0x0c	; 12
    6aea:	25 96       	adiw	r28, 0x05	; 5
    6aec:	ff af       	std	Y+63, r31	; 0x3f
    6aee:	ee af       	std	Y+62, r30	; 0x3e
    6af0:	25 97       	sbiw	r28, 0x05	; 5
    6af2:	e1 ee       	ldi	r30, 0xE1	; 225
    6af4:	f5 e0       	ldi	r31, 0x05	; 5
    6af6:	69 96       	adiw	r28, 0x19	; 25
    6af8:	ff af       	std	Y+63, r31	; 0x3f
    6afa:	ee af       	std	Y+62, r30	; 0x3e
    6afc:	69 97       	sbiw	r28, 0x19	; 25
    6afe:	ee e7       	ldi	r30, 0x7E	; 126
    6b00:	f5 e0       	ldi	r31, 0x05	; 5
    6b02:	f8 af       	std	Y+56, r31	; 0x38
    6b04:	ef ab       	std	Y+55, r30	; 0x37
    6b06:	fe 01       	movw	r30, r28
    6b08:	7b 96       	adiw	r30, 0x1b	; 27
    6b0a:	67 96       	adiw	r28, 0x17	; 23
    6b0c:	ff af       	std	Y+63, r31	; 0x3f
    6b0e:	ee af       	std	Y+62, r30	; 0x3e
    6b10:	67 97       	sbiw	r28, 0x17	; 23
    6b12:	bd e6       	ldi	r27, 0x6D	; 109
    6b14:	2b 2e       	mov	r2, r27
    6b16:	b7 e0       	ldi	r27, 0x07	; 7
    6b18:	3b 2e       	mov	r3, r27
    6b1a:	36 97       	sbiw	r30, 0x06	; 6
    6b1c:	65 96       	adiw	r28, 0x15	; 21
    6b1e:	ff af       	std	Y+63, r31	; 0x3f
    6b20:	ee af       	std	Y+62, r30	; 0x3e
    6b22:	65 97       	sbiw	r28, 0x15	; 21
    6b24:	e5 e2       	ldi	r30, 0x25	; 37
    6b26:	f5 e0       	ldi	r31, 0x05	; 5
    6b28:	fe ab       	std	Y+54, r31	; 0x36
    6b2a:	ed ab       	std	Y+53, r30	; 0x35
    6b2c:	fe 01       	movw	r30, r28
    6b2e:	3f 96       	adiw	r30, 0x0f	; 15
    6b30:	63 96       	adiw	r28, 0x13	; 19
    6b32:	ff af       	std	Y+63, r31	; 0x3f
    6b34:	ee af       	std	Y+62, r30	; 0x3e
    6b36:	63 97       	sbiw	r28, 0x13	; 19
    6b38:	3f 96       	adiw	r30, 0x0f	; 15
    6b3a:	61 96       	adiw	r28, 0x11	; 17
    6b3c:	ff af       	std	Y+63, r31	; 0x3f
    6b3e:	ee af       	std	Y+62, r30	; 0x3e
    6b40:	61 97       	sbiw	r28, 0x11	; 17
    6b42:	36 97       	sbiw	r30, 0x06	; 6
    6b44:	2f 96       	adiw	r28, 0x0f	; 15
    6b46:	ff af       	std	Y+63, r31	; 0x3f
    6b48:	ee af       	std	Y+62, r30	; 0x3e
    6b4a:	2f 97       	sbiw	r28, 0x0f	; 15
    6b4c:	36 97       	sbiw	r30, 0x06	; 6
    6b4e:	2d 96       	adiw	r28, 0x0d	; 13
    6b50:	ff af       	std	Y+63, r31	; 0x3f
    6b52:	ee af       	std	Y+62, r30	; 0x3e
    6b54:	2d 97       	sbiw	r28, 0x0d	; 13
    6b56:	e5 ed       	ldi	r30, 0xD5	; 213
    6b58:	f5 e0       	ldi	r31, 0x05	; 5
    6b5a:	2b 96       	adiw	r28, 0x0b	; 11
    6b5c:	ff af       	std	Y+63, r31	; 0x3f
    6b5e:	ee af       	std	Y+62, r30	; 0x3e
    6b60:	2b 97       	sbiw	r28, 0x0b	; 11
    6b62:	fe 01       	movw	r30, r28
    6b64:	b1 96       	adiw	r30, 0x21	; 33
    6b66:	29 96       	adiw	r28, 0x09	; 9
    6b68:	ff af       	std	Y+63, r31	; 0x3f
    6b6a:	ee af       	std	Y+62, r30	; 0x3e
    6b6c:	29 97       	sbiw	r28, 0x09	; 9
    6b6e:	18 aa       	std	Y+48, r1	; 0x30
    6b70:	1f a6       	std	Y+47, r1	; 0x2f
		//************************************************************
		// Filter and calculate gyro error
		//************************************************************

		// Reduce Gyro drift noise before adding into I-term
		if ((gyroADC[axis] > -GYRO_DEADBAND) && (gyroADC[axis] < GYRO_DEADBAND)) 
    6b72:	e9 a9       	ldd	r30, Y+49	; 0x31
    6b74:	fa a9       	ldd	r31, Y+50	; 0x32
    6b76:	80 81       	ld	r24, Z
    6b78:	91 81       	ldd	r25, Z+1	; 0x01
    6b7a:	04 96       	adiw	r24, 0x04	; 4
    6b7c:	09 97       	sbiw	r24, 0x09	; 9
    6b7e:	10 f4       	brcc	.+4      	; 0x6b84 <Calculate_PID+0x224>
		{
			gyroADC[axis] = 0;
    6b80:	11 82       	std	Z+1, r1	; 0x01
    6b82:	10 82       	st	Z, r1
		// Increment and limit gyro I-terms, handle heading hold nicely
		//************************************************************

		// Work out stick rate divider. 0 is fastest, 4 is slowest.
		// /64 (15), /32 (30), /16 (60*), /8 (120), /4 (240)
		stick = RCinputsAxis[axis] >> (Config.Stick_Lock_rate + 2);
    6b84:	29 96       	adiw	r28, 0x09	; 9
    6b86:	ee ad       	ldd	r30, Y+62	; 0x3e
    6b88:	ff ad       	ldd	r31, Y+63	; 0x3f
    6b8a:	29 97       	sbiw	r28, 0x09	; 9
    6b8c:	81 91       	ld	r24, Z+
    6b8e:	91 91       	ld	r25, Z+
    6b90:	29 96       	adiw	r28, 0x09	; 9
    6b92:	ff af       	std	Y+63, r31	; 0x3f
    6b94:	ee af       	std	Y+62, r30	; 0x3e
    6b96:	29 97       	sbiw	r28, 0x09	; 9

		// Calculate I-term from gyro and stick data 
		// These may look identical, but they are constrained quite differently.
		IntegralGyro[P1][axis] += (gyroADC[axis] + stick);
    6b98:	e9 a9       	ldd	r30, Y+49	; 0x31
    6b9a:	fa a9       	ldd	r31, Y+50	; 0x32
    6b9c:	00 81       	ld	r16, Z
    6b9e:	11 81       	ldd	r17, Z+1	; 0x01
		// Increment and limit gyro I-terms, handle heading hold nicely
		//************************************************************

		// Work out stick rate divider. 0 is fastest, 4 is slowest.
		// /64 (15), /32 (30), /16 (60*), /8 (120), /4 (240)
		stick = RCinputsAxis[axis] >> (Config.Stick_Lock_rate + 2);
    6ba0:	4c 01       	movw	r8, r24
    6ba2:	0d ac       	ldd	r0, Y+61	; 0x3d
    6ba4:	02 c0       	rjmp	.+4      	; 0x6baa <Calculate_PID+0x24a>
    6ba6:	95 94       	asr	r9
    6ba8:	87 94       	ror	r8
    6baa:	0a 94       	dec	r0
    6bac:	e2 f7       	brpl	.-8      	; 0x6ba6 <Calculate_PID+0x246>

		// Calculate I-term from gyro and stick data 
		// These may look identical, but they are constrained quite differently.
		IntegralGyro[P1][axis] += (gyroADC[axis] + stick);
    6bae:	80 0e       	add	r8, r16
    6bb0:	91 1e       	adc	r9, r17
    6bb2:	aa 24       	eor	r10, r10
    6bb4:	97 fc       	sbrc	r9, 7
    6bb6:	a0 94       	com	r10
    6bb8:	ba 2c       	mov	r11, r10
    6bba:	d1 01       	movw	r26, r2
    6bbc:	4d 91       	ld	r20, X+
    6bbe:	5d 91       	ld	r21, X+
    6bc0:	6d 91       	ld	r22, X+
    6bc2:	7c 91       	ld	r23, X
    6bc4:	13 97       	sbiw	r26, 0x03	; 3
    6bc6:	48 0d       	add	r20, r8
    6bc8:	59 1d       	adc	r21, r9
    6bca:	6a 1d       	adc	r22, r10
    6bcc:	7b 1d       	adc	r23, r11
    6bce:	f1 01       	movw	r30, r2
    6bd0:	40 83       	st	Z, r20
    6bd2:	51 83       	std	Z+1, r21	; 0x01
    6bd4:	62 83       	std	Z+2, r22	; 0x02
    6bd6:	73 83       	std	Z+3, r23	; 0x03
		IntegralGyro[P2][axis] += (gyroADC[axis] + stick);
    6bd8:	c4 84       	ldd	r12, Z+12	; 0x0c
    6bda:	d5 84       	ldd	r13, Z+13	; 0x0d
    6bdc:	e6 84       	ldd	r14, Z+14	; 0x0e
    6bde:	f7 84       	ldd	r15, Z+15	; 0x0f
    6be0:	c8 0c       	add	r12, r8
    6be2:	d9 1c       	adc	r13, r9
    6be4:	ea 1c       	adc	r14, r10
    6be6:	fb 1c       	adc	r15, r11
    6be8:	1c 96       	adiw	r26, 0x0c	; 12
    6bea:	cd 92       	st	X+, r12
    6bec:	dd 92       	st	X+, r13
    6bee:	ed 92       	st	X+, r14
    6bf0:	fc 92       	st	X, r15
    6bf2:	1f 97       	sbiw	r26, 0x0f	; 15

		// Limit the I-terms when you need to adjust the I-term with RC
		// Note that the I-term is not constrained when no RC input is present.
		if (RCinputsAxis[axis] != 0)
    6bf4:	89 2b       	or	r24, r25
    6bf6:	71 f4       	brne	.+28     	; 0x6c14 <Calculate_PID+0x2b4>
    6bf8:	ef a5       	ldd	r30, Y+47	; 0x2f
    6bfa:	6a 96       	adiw	r28, 0x1a	; 26
    6bfc:	ef af       	std	Y+63, r30	; 0x3f
    6bfe:	6a 97       	sbiw	r28, 0x1a	; 26

		//************************************************************
		// Add in gyro Yaw trim
		//************************************************************

		if (axis == YAW)
    6c00:	e2 30       	cpi	r30, 0x02	; 2
    6c02:	09 f4       	brne	.+2      	; 0x6c06 <Calculate_PID+0x2a6>
    6c04:	5b c0       	rjmp	.+182    	; 0x6cbc <Calculate_PID+0x35c>
		}
		// Reset PID_gyro variables to that data does not accumulate cross-axis
		else
		{
			PID_gyro_temp1 = 0;
			PID_gyro_temp2 = 0;
    6c06:	c1 2c       	mov	r12, r1
    6c08:	d1 2c       	mov	r13, r1
    6c0a:	76 01       	movw	r14, r12
			PID_gyro_temp2 = (int32_t)(Config.FlightMode[P2].Yaw_trim << 6);
		}
		// Reset PID_gyro variables to that data does not accumulate cross-axis
		else
		{
			PID_gyro_temp1 = 0;
    6c0c:	80 e0       	ldi	r24, 0x00	; 0
    6c0e:	90 e0       	ldi	r25, 0x00	; 0
    6c10:	dc 01       	movw	r26, r24
    6c12:	60 c0       	rjmp	.+192    	; 0x6cd4 <Calculate_PID+0x374>
    6c14:	ef a9       	ldd	r30, Y+55	; 0x37
    6c16:	f8 ad       	ldd	r31, Y+56	; 0x38
    6c18:	e1 59       	subi	r30, 0x91	; 145
    6c1a:	ff 4f       	sbci	r31, 0xFF	; 255
		// Note that the I-term is not constrained when no RC input is present.
		if (RCinputsAxis[axis] != 0)
		{
			for (i = P1; i <= P2; i++)
			{
				if (IntegralGyro[i][axis] > Config.Raw_I_Constrain[i][axis])
    6c1c:	80 81       	ld	r24, Z
    6c1e:	91 81       	ldd	r25, Z+1	; 0x01
    6c20:	a2 81       	ldd	r26, Z+2	; 0x02
    6c22:	b3 81       	ldd	r27, Z+3	; 0x03
    6c24:	84 17       	cp	r24, r20
    6c26:	95 07       	cpc	r25, r21
    6c28:	a6 07       	cpc	r26, r22
    6c2a:	b7 07       	cpc	r27, r23
    6c2c:	2c f4       	brge	.+10     	; 0x6c38 <Calculate_PID+0x2d8>
				{
					IntegralGyro[i][axis] = Config.Raw_I_Constrain[i][axis];
    6c2e:	f1 01       	movw	r30, r2
    6c30:	80 83       	st	Z, r24
    6c32:	91 83       	std	Z+1, r25	; 0x01
    6c34:	a2 83       	std	Z+2, r26	; 0x02
    6c36:	b3 83       	std	Z+3, r27	; 0x03
				}
				if (IntegralGyro[i][axis] < -Config.Raw_I_Constrain[i][axis])
    6c38:	b0 95       	com	r27
    6c3a:	a0 95       	com	r26
    6c3c:	90 95       	com	r25
    6c3e:	81 95       	neg	r24
    6c40:	9f 4f       	sbci	r25, 0xFF	; 255
    6c42:	af 4f       	sbci	r26, 0xFF	; 255
    6c44:	bf 4f       	sbci	r27, 0xFF	; 255
    6c46:	f1 01       	movw	r30, r2
    6c48:	40 81       	ld	r20, Z
    6c4a:	51 81       	ldd	r21, Z+1	; 0x01
    6c4c:	62 81       	ldd	r22, Z+2	; 0x02
    6c4e:	73 81       	ldd	r23, Z+3	; 0x03
    6c50:	48 17       	cp	r20, r24
    6c52:	59 07       	cpc	r21, r25
    6c54:	6a 07       	cpc	r22, r26
    6c56:	7b 07       	cpc	r23, r27
    6c58:	24 f4       	brge	.+8      	; 0x6c62 <Calculate_PID+0x302>
				{
					IntegralGyro[i][axis] = -Config.Raw_I_Constrain[i][axis];
    6c5a:	80 83       	st	Z, r24
    6c5c:	91 83       	std	Z+1, r25	; 0x01
    6c5e:	a2 83       	std	Z+2, r26	; 0x02
    6c60:	b3 83       	std	Z+3, r27	; 0x03
    6c62:	ef a9       	ldd	r30, Y+55	; 0x37
    6c64:	f8 ad       	ldd	r31, Y+56	; 0x38
    6c66:	e5 58       	subi	r30, 0x85	; 133
    6c68:	ff 4f       	sbci	r31, 0xFF	; 255
		// Note that the I-term is not constrained when no RC input is present.
		if (RCinputsAxis[axis] != 0)
		{
			for (i = P1; i <= P2; i++)
			{
				if (IntegralGyro[i][axis] > Config.Raw_I_Constrain[i][axis])
    6c6a:	80 81       	ld	r24, Z
    6c6c:	91 81       	ldd	r25, Z+1	; 0x01
    6c6e:	a2 81       	ldd	r26, Z+2	; 0x02
    6c70:	b3 81       	ldd	r27, Z+3	; 0x03
    6c72:	f1 01       	movw	r30, r2
    6c74:	44 85       	ldd	r20, Z+12	; 0x0c
    6c76:	55 85       	ldd	r21, Z+13	; 0x0d
    6c78:	66 85       	ldd	r22, Z+14	; 0x0e
    6c7a:	77 85       	ldd	r23, Z+15	; 0x0f
    6c7c:	84 17       	cp	r24, r20
    6c7e:	95 07       	cpc	r25, r21
    6c80:	a6 07       	cpc	r26, r22
    6c82:	b7 07       	cpc	r27, r23
    6c84:	24 f4       	brge	.+8      	; 0x6c8e <Calculate_PID+0x32e>
				{
					IntegralGyro[i][axis] = Config.Raw_I_Constrain[i][axis];
    6c86:	84 87       	std	Z+12, r24	; 0x0c
    6c88:	95 87       	std	Z+13, r25	; 0x0d
    6c8a:	a6 87       	std	Z+14, r26	; 0x0e
    6c8c:	b7 87       	std	Z+15, r27	; 0x0f
				}
				if (IntegralGyro[i][axis] < -Config.Raw_I_Constrain[i][axis])
    6c8e:	b0 95       	com	r27
    6c90:	a0 95       	com	r26
    6c92:	90 95       	com	r25
    6c94:	81 95       	neg	r24
    6c96:	9f 4f       	sbci	r25, 0xFF	; 255
    6c98:	af 4f       	sbci	r26, 0xFF	; 255
    6c9a:	bf 4f       	sbci	r27, 0xFF	; 255
    6c9c:	f1 01       	movw	r30, r2
    6c9e:	44 85       	ldd	r20, Z+12	; 0x0c
    6ca0:	55 85       	ldd	r21, Z+13	; 0x0d
    6ca2:	66 85       	ldd	r22, Z+14	; 0x0e
    6ca4:	77 85       	ldd	r23, Z+15	; 0x0f
    6ca6:	48 17       	cp	r20, r24
    6ca8:	59 07       	cpc	r21, r25
    6caa:	6a 07       	cpc	r22, r26
    6cac:	7b 07       	cpc	r23, r27
    6cae:	0c f0       	brlt	.+2      	; 0x6cb2 <Calculate_PID+0x352>
    6cb0:	a3 cf       	rjmp	.-186    	; 0x6bf8 <Calculate_PID+0x298>
				{
					IntegralGyro[i][axis] = -Config.Raw_I_Constrain[i][axis];
    6cb2:	84 87       	std	Z+12, r24	; 0x0c
    6cb4:	95 87       	std	Z+13, r25	; 0x0d
    6cb6:	a6 87       	std	Z+14, r26	; 0x0e
    6cb8:	b7 87       	std	Z+15, r27	; 0x0f
    6cba:	9e cf       	rjmp	.-196    	; 0x6bf8 <Calculate_PID+0x298>
		//************************************************************

		if (axis == YAW)
		{
			PID_gyro_temp1 = (int32_t)(Config.FlightMode[P1].Yaw_trim << 6);
			PID_gyro_temp2 = (int32_t)(Config.FlightMode[P2].Yaw_trim << 6);
    6cbc:	a2 96       	adiw	r28, 0x22	; 34
    6cbe:	cc ac       	ldd	r12, Y+60	; 0x3c
    6cc0:	dd ac       	ldd	r13, Y+61	; 0x3d
    6cc2:	ee ac       	ldd	r14, Y+62	; 0x3e
    6cc4:	ff ac       	ldd	r15, Y+63	; 0x3f
    6cc6:	a2 97       	sbiw	r28, 0x22	; 34
		// Add in gyro Yaw trim
		//************************************************************

		if (axis == YAW)
		{
			PID_gyro_temp1 = (int32_t)(Config.FlightMode[P1].Yaw_trim << 6);
    6cc8:	6e 96       	adiw	r28, 0x1e	; 30
    6cca:	8c ad       	ldd	r24, Y+60	; 0x3c
    6ccc:	9d ad       	ldd	r25, Y+61	; 0x3d
    6cce:	ae ad       	ldd	r26, Y+62	; 0x3e
    6cd0:	bf ad       	ldd	r27, Y+63	; 0x3f
    6cd2:	6e 97       	sbiw	r28, 0x1e	; 30
		//************************************************************
		// Calculate PID gains
		//************************************************************

		// Gyro P-term													// Profile P1
		PID_gyro_temp1 += gyroADC[axis] * P_gain[P1][axis];				// Multiply P-term (Max gain of 127)
    6cd4:	67 96       	adiw	r28, 0x17	; 23
    6cd6:	ee ad       	ldd	r30, Y+62	; 0x3e
    6cd8:	ff ad       	ldd	r31, Y+63	; 0x3f
    6cda:	67 97       	sbiw	r28, 0x17	; 23
    6cdc:	41 91       	ld	r20, Z+
    6cde:	67 96       	adiw	r28, 0x17	; 23
    6ce0:	ff af       	std	Y+63, r31	; 0x3f
    6ce2:	ee af       	std	Y+62, r30	; 0x3e
    6ce4:	67 97       	sbiw	r28, 0x17	; 23
    6ce6:	40 03       	mulsu	r20, r16
    6ce8:	90 01       	movw	r18, r0
    6cea:	41 9f       	mul	r20, r17
    6cec:	30 0d       	add	r19, r0
    6cee:	11 24       	eor	r1, r1
    6cf0:	44 27       	eor	r20, r20
    6cf2:	37 fd       	sbrc	r19, 7
    6cf4:	40 95       	com	r20
    6cf6:	54 2f       	mov	r21, r20
    6cf8:	28 0f       	add	r18, r24
    6cfa:	39 1f       	adc	r19, r25
    6cfc:	4a 1f       	adc	r20, r26
    6cfe:	5b 1f       	adc	r21, r27
		PID_gyro_temp1 = PID_gyro_temp1 * (int32_t)3;					// Multiply by 3
    6d00:	a3 e0       	ldi	r26, 0x03	; 3
    6d02:	b0 e0       	ldi	r27, 0x00	; 0
    6d04:	0e 94 80 3e 	call	0x7d00	; 0x7d00 <__muluhisi3>
    6d08:	4b 01       	movw	r8, r22
    6d0a:	5c 01       	movw	r10, r24

		// Gyro I-term
		PID_Gyro_I_actual1 = IntegralGyro[P1][axis] * I_gain[P1][axis];	// Multiply I-term (Max gain of 127)
    6d0c:	65 96       	adiw	r28, 0x15	; 21
    6d0e:	ee ad       	ldd	r30, Y+62	; 0x3e
    6d10:	ff ad       	ldd	r31, Y+63	; 0x3f
    6d12:	65 97       	sbiw	r28, 0x15	; 21
    6d14:	a1 91       	ld	r26, Z+
    6d16:	65 96       	adiw	r28, 0x15	; 21
    6d18:	ff af       	std	Y+63, r31	; 0x3f
    6d1a:	ee af       	std	Y+62, r30	; 0x3e
    6d1c:	65 97       	sbiw	r28, 0x15	; 21
    6d1e:	f1 01       	movw	r30, r2
    6d20:	20 81       	ld	r18, Z
    6d22:	31 81       	ldd	r19, Z+1	; 0x01
    6d24:	42 81       	ldd	r20, Z+2	; 0x02
    6d26:	53 81       	ldd	r21, Z+3	; 0x03
    6d28:	bb 27       	eor	r27, r27
    6d2a:	a7 fd       	sbrc	r26, 7
    6d2c:	b0 95       	com	r27
    6d2e:	0e 94 8b 3e 	call	0x7d16	; 0x7d16 <__mulshisi3>
    6d32:	2b 01       	movw	r4, r22
    6d34:	3c 01       	movw	r6, r24
		PID_Gyro_I_actual1 = PID_Gyro_I_actual1 >> 5;					// Divide by 32
    6d36:	35 e0       	ldi	r19, 0x05	; 5
    6d38:	75 94       	asr	r7
    6d3a:	67 94       	ror	r6
    6d3c:	57 94       	ror	r5
    6d3e:	47 94       	ror	r4
    6d40:	3a 95       	dec	r19
    6d42:	d1 f7       	brne	.-12     	; 0x6d38 <Calculate_PID+0x3d8>

		// Gyro D-term
		Differential = gyroADC[axis] - lastError[axis];
    6d44:	ed a9       	ldd	r30, Y+53	; 0x35
    6d46:	fe a9       	ldd	r31, Y+54	; 0x36
    6d48:	80 81       	ld	r24, Z
    6d4a:	91 81       	ldd	r25, Z+1	; 0x01
    6d4c:	f8 01       	movw	r30, r16
    6d4e:	e8 1b       	sub	r30, r24
    6d50:	f9 0b       	sbc	r31, r25
    6d52:	f8 a7       	std	Y+40, r31	; 0x28
    6d54:	ef a3       	std	Y+39, r30	; 0x27
		lastError[axis] = gyroADC[axis];
    6d56:	ed a9       	ldd	r30, Y+53	; 0x35
    6d58:	fe a9       	ldd	r31, Y+54	; 0x36
    6d5a:	11 83       	std	Z+1, r17	; 0x01
    6d5c:	00 83       	st	Z, r16
		DifferentialGyro1 = Differential * D_gain[P1][axis];			// Multiply D-term by up to 127
    6d5e:	63 96       	adiw	r28, 0x13	; 19
    6d60:	ee ad       	ldd	r30, Y+62	; 0x3e
    6d62:	ff ad       	ldd	r31, Y+63	; 0x3f
    6d64:	63 97       	sbiw	r28, 0x13	; 19
    6d66:	21 91       	ld	r18, Z+
    6d68:	63 96       	adiw	r28, 0x13	; 19
    6d6a:	ff af       	std	Y+63, r31	; 0x3f
    6d6c:	ee af       	std	Y+62, r30	; 0x3e
    6d6e:	63 97       	sbiw	r28, 0x13	; 19
    6d70:	4f a1       	ldd	r20, Y+39	; 0x27
    6d72:	58 a5       	ldd	r21, Y+40	; 0x28
    6d74:	24 03       	mulsu	r18, r20
    6d76:	f0 01       	movw	r30, r0
    6d78:	25 9f       	mul	r18, r21
    6d7a:	f0 0d       	add	r31, r0
    6d7c:	11 24       	eor	r1, r1
		DifferentialGyro1 = DifferentialGyro1 << 4;						// Multiply by 16
    6d7e:	44 e0       	ldi	r20, 0x04	; 4
    6d80:	ee 0f       	add	r30, r30
    6d82:	ff 1f       	adc	r31, r31
    6d84:	4a 95       	dec	r20
    6d86:	e1 f7       	brne	.-8      	; 0x6d80 <Calculate_PID+0x420>
    6d88:	21 96       	adiw	r28, 0x01	; 1
    6d8a:	ff af       	std	Y+63, r31	; 0x3f
    6d8c:	ee af       	std	Y+62, r30	; 0x3e
    6d8e:	21 97       	sbiw	r28, 0x01	; 1

		// Gyro P-term
		PID_gyro_temp2 += gyroADC[axis] * P_gain[P2][axis];				// Profile P2
    6d90:	61 96       	adiw	r28, 0x11	; 17
    6d92:	ee ad       	ldd	r30, Y+62	; 0x3e
    6d94:	ff ad       	ldd	r31, Y+63	; 0x3f
    6d96:	61 97       	sbiw	r28, 0x11	; 17
    6d98:	21 91       	ld	r18, Z+
    6d9a:	61 96       	adiw	r28, 0x11	; 17
    6d9c:	ff af       	std	Y+63, r31	; 0x3f
    6d9e:	ee af       	std	Y+62, r30	; 0x3e
    6da0:	61 97       	sbiw	r28, 0x11	; 17
    6da2:	20 03       	mulsu	r18, r16
    6da4:	c0 01       	movw	r24, r0
    6da6:	21 9f       	mul	r18, r17
    6da8:	90 0d       	add	r25, r0
    6daa:	11 24       	eor	r1, r1
    6dac:	9c 01       	movw	r18, r24
    6dae:	44 27       	eor	r20, r20
    6db0:	37 fd       	sbrc	r19, 7
    6db2:	40 95       	com	r20
    6db4:	54 2f       	mov	r21, r20
    6db6:	2c 0d       	add	r18, r12
    6db8:	3d 1d       	adc	r19, r13
    6dba:	4e 1d       	adc	r20, r14
    6dbc:	5f 1d       	adc	r21, r15
		PID_gyro_temp2 = PID_gyro_temp2 * (int32_t)3;
    6dbe:	a3 e0       	ldi	r26, 0x03	; 3
    6dc0:	b0 e0       	ldi	r27, 0x00	; 0
    6dc2:	0e 94 80 3e 	call	0x7d00	; 0x7d00 <__muluhisi3>
    6dc6:	6b 01       	movw	r12, r22
    6dc8:	7c 01       	movw	r14, r24

		// Gyro I-term
		PID_Gyro_I_actual2 = IntegralGyro[P2][axis] * I_gain[P2][axis];
    6dca:	2f 96       	adiw	r28, 0x0f	; 15
    6dcc:	ee ad       	ldd	r30, Y+62	; 0x3e
    6dce:	ff ad       	ldd	r31, Y+63	; 0x3f
    6dd0:	2f 97       	sbiw	r28, 0x0f	; 15
    6dd2:	a1 91       	ld	r26, Z+
    6dd4:	2f 96       	adiw	r28, 0x0f	; 15
    6dd6:	ff af       	std	Y+63, r31	; 0x3f
    6dd8:	ee af       	std	Y+62, r30	; 0x3e
    6dda:	2f 97       	sbiw	r28, 0x0f	; 15
    6ddc:	f1 01       	movw	r30, r2
    6dde:	24 85       	ldd	r18, Z+12	; 0x0c
    6de0:	35 85       	ldd	r19, Z+13	; 0x0d
    6de2:	46 85       	ldd	r20, Z+14	; 0x0e
    6de4:	57 85       	ldd	r21, Z+15	; 0x0f
    6de6:	bb 27       	eor	r27, r27
    6de8:	a7 fd       	sbrc	r26, 7
    6dea:	b0 95       	com	r27
    6dec:	0e 94 8b 3e 	call	0x7d16	; 0x7d16 <__mulshisi3>
		PID_Gyro_I_actual2 = PID_Gyro_I_actual2 >> 5;
    6df0:	55 e0       	ldi	r21, 0x05	; 5
    6df2:	95 95       	asr	r25
    6df4:	87 95       	ror	r24
    6df6:	77 95       	ror	r23
    6df8:	67 95       	ror	r22
    6dfa:	5a 95       	dec	r21
    6dfc:	d1 f7       	brne	.-12     	; 0x6df2 <Calculate_PID+0x492>

		// Gyro D-term
		DifferentialGyro2 = Differential * D_gain[P2][axis];			// Multiply D-term by up to 127
    6dfe:	2d 96       	adiw	r28, 0x0d	; 13
    6e00:	ee ad       	ldd	r30, Y+62	; 0x3e
    6e02:	ff ad       	ldd	r31, Y+63	; 0x3f
    6e04:	2d 97       	sbiw	r28, 0x0d	; 13
    6e06:	41 91       	ld	r20, Z+
    6e08:	2d 96       	adiw	r28, 0x0d	; 13
    6e0a:	ff af       	std	Y+63, r31	; 0x3f
    6e0c:	ee af       	std	Y+62, r30	; 0x3e
    6e0e:	2d 97       	sbiw	r28, 0x0d	; 13
    6e10:	2f a1       	ldd	r18, Y+39	; 0x27
    6e12:	38 a5       	ldd	r19, Y+40	; 0x28
    6e14:	42 03       	mulsu	r20, r18
    6e16:	f0 01       	movw	r30, r0
    6e18:	43 9f       	mul	r20, r19
    6e1a:	f0 0d       	add	r31, r0
    6e1c:	11 24       	eor	r1, r1
		DifferentialGyro2 = DifferentialGyro2 << 4;						// Multiply by 16
    6e1e:	a4 e0       	ldi	r26, 0x04	; 4
    6e20:	ee 0f       	add	r30, r30
    6e22:	ff 1f       	adc	r31, r31
    6e24:	aa 95       	dec	r26
    6e26:	e1 f7       	brne	.-8      	; 0x6e20 <Calculate_PID+0x4c0>
		//************************************************************
		// I-term output limits
		//************************************************************

		// P1 limits
		if (PID_Gyro_I_actual1 > Config.Raw_I_Limits[P1][axis]) 
    6e28:	2b 96       	adiw	r28, 0x0b	; 11
    6e2a:	ae ad       	ldd	r26, Y+62	; 0x3e
    6e2c:	bf ad       	ldd	r27, Y+63	; 0x3f
    6e2e:	2b 97       	sbiw	r28, 0x0b	; 11
    6e30:	2d 91       	ld	r18, X+
    6e32:	3d 91       	ld	r19, X+
    6e34:	4d 91       	ld	r20, X+
    6e36:	5d 91       	ld	r21, X+
    6e38:	2b 96       	adiw	r28, 0x0b	; 11
    6e3a:	bf af       	std	Y+63, r27	; 0x3f
    6e3c:	ae af       	std	Y+62, r26	; 0x3e
    6e3e:	2b 97       	sbiw	r28, 0x0b	; 11
    6e40:	2f a3       	std	Y+39, r18	; 0x27
    6e42:	38 a7       	std	Y+40, r19	; 0x28
    6e44:	49 a7       	std	Y+41, r20	; 0x29
    6e46:	5a a7       	std	Y+42, r21	; 0x2a
    6e48:	24 15       	cp	r18, r4
    6e4a:	35 05       	cpc	r19, r5
    6e4c:	46 05       	cpc	r20, r6
    6e4e:	57 05       	cpc	r21, r7
    6e50:	b4 f0       	brlt	.+44     	; 0x6e7e <Calculate_PID+0x51e>
		{
			PID_Gyro_I_actual1 = Config.Raw_I_Limits[P1][axis];
		}
		else if (PID_Gyro_I_actual1 < -Config.Raw_I_Limits[P1][axis]) 
    6e52:	89 01       	movw	r16, r18
    6e54:	9a 01       	movw	r18, r20
    6e56:	30 95       	com	r19
    6e58:	20 95       	com	r18
    6e5a:	10 95       	com	r17
    6e5c:	01 95       	neg	r16
    6e5e:	1f 4f       	sbci	r17, 0xFF	; 255
    6e60:	2f 4f       	sbci	r18, 0xFF	; 255
    6e62:	3f 4f       	sbci	r19, 0xFF	; 255
    6e64:	4f a2       	std	Y+39, r4	; 0x27
    6e66:	58 a6       	std	Y+40, r5	; 0x28
    6e68:	69 a6       	std	Y+41, r6	; 0x29
    6e6a:	7a a6       	std	Y+42, r7	; 0x2a
    6e6c:	40 16       	cp	r4, r16
    6e6e:	51 06       	cpc	r5, r17
    6e70:	62 06       	cpc	r6, r18
    6e72:	73 06       	cpc	r7, r19
    6e74:	24 f4       	brge	.+8      	; 0x6e7e <Calculate_PID+0x51e>
    6e76:	0f a3       	std	Y+39, r16	; 0x27
    6e78:	18 a7       	std	Y+40, r17	; 0x28
    6e7a:	29 a7       	std	Y+41, r18	; 0x29
    6e7c:	3a a7       	std	Y+42, r19	; 0x2a
		{
			PID_Gyro_I_actual1 = PID_Gyro_I_actual1;
		}

		// P2 limits
		if (PID_Gyro_I_actual2 > Config.Raw_I_Limits[P2][axis]) 
    6e7e:	69 96       	adiw	r28, 0x19	; 25
    6e80:	ae ad       	ldd	r26, Y+62	; 0x3e
    6e82:	bf ad       	ldd	r27, Y+63	; 0x3f
    6e84:	69 97       	sbiw	r28, 0x19	; 25
    6e86:	4d 90       	ld	r4, X+
    6e88:	5d 90       	ld	r5, X+
    6e8a:	6d 90       	ld	r6, X+
    6e8c:	7d 90       	ld	r7, X+
    6e8e:	69 96       	adiw	r28, 0x19	; 25
    6e90:	bf af       	std	Y+63, r27	; 0x3f
    6e92:	ae af       	std	Y+62, r26	; 0x3e
    6e94:	69 97       	sbiw	r28, 0x19	; 25
    6e96:	4b a6       	std	Y+43, r4	; 0x2b
    6e98:	5c a6       	std	Y+44, r5	; 0x2c
    6e9a:	6d a6       	std	Y+45, r6	; 0x2d
    6e9c:	7e a6       	std	Y+46, r7	; 0x2e
    6e9e:	46 16       	cp	r4, r22
    6ea0:	57 06       	cpc	r5, r23
    6ea2:	68 06       	cpc	r6, r24
    6ea4:	79 06       	cpc	r7, r25
    6ea6:	ac f0       	brlt	.+42     	; 0x6ed2 <Calculate_PID+0x572>
		{
			PID_Gyro_I_actual2 = Config.Raw_I_Limits[P2][axis];
		}
		else if (PID_Gyro_I_actual2 < -Config.Raw_I_Limits[P2][axis]) 
    6ea8:	70 94       	com	r7
    6eaa:	60 94       	com	r6
    6eac:	50 94       	com	r5
    6eae:	40 94       	com	r4
    6eb0:	41 1c       	adc	r4, r1
    6eb2:	51 1c       	adc	r5, r1
    6eb4:	61 1c       	adc	r6, r1
    6eb6:	71 1c       	adc	r7, r1
    6eb8:	6b a7       	std	Y+43, r22	; 0x2b
    6eba:	7c a7       	std	Y+44, r23	; 0x2c
    6ebc:	8d a7       	std	Y+45, r24	; 0x2d
    6ebe:	9e a7       	std	Y+46, r25	; 0x2e
    6ec0:	64 15       	cp	r22, r4
    6ec2:	75 05       	cpc	r23, r5
    6ec4:	86 05       	cpc	r24, r6
    6ec6:	97 05       	cpc	r25, r7
    6ec8:	24 f4       	brge	.+8      	; 0x6ed2 <Calculate_PID+0x572>
    6eca:	4b a6       	std	Y+43, r4	; 0x2b
    6ecc:	5c a6       	std	Y+44, r5	; 0x2c
    6ece:	6d a6       	std	Y+45, r6	; 0x2d
    6ed0:	7e a6       	std	Y+46, r7	; 0x2e

		//************************************************************
		// Sum Gyro P, I and D terms and rescale
		//************************************************************

		PID_Gyros[P1][axis] = (int16_t)((PID_gyro_temp1 + PID_Gyro_I_actual1 + DifferentialGyro1) >> 6);
    6ed2:	4f a1       	ldd	r20, Y+39	; 0x27
    6ed4:	58 a5       	ldd	r21, Y+40	; 0x28
    6ed6:	69 a5       	ldd	r22, Y+41	; 0x29
    6ed8:	7a a5       	ldd	r23, Y+42	; 0x2a
    6eda:	48 0d       	add	r20, r8
    6edc:	59 1d       	adc	r21, r9
    6ede:	6a 1d       	adc	r22, r10
    6ee0:	7b 1d       	adc	r23, r11
    6ee2:	21 96       	adiw	r28, 0x01	; 1
    6ee4:	4e ac       	ldd	r4, Y+62	; 0x3e
    6ee6:	5f ac       	ldd	r5, Y+63	; 0x3f
    6ee8:	21 97       	sbiw	r28, 0x01	; 1
    6eea:	82 01       	movw	r16, r4
    6eec:	22 27       	eor	r18, r18
    6eee:	17 fd       	sbrc	r17, 7
    6ef0:	20 95       	com	r18
    6ef2:	32 2f       	mov	r19, r18
    6ef4:	40 0f       	add	r20, r16
    6ef6:	51 1f       	adc	r21, r17
    6ef8:	62 1f       	adc	r22, r18
    6efa:	73 1f       	adc	r23, r19
    6efc:	a6 e0       	ldi	r26, 0x06	; 6
    6efe:	75 95       	asr	r23
    6f00:	67 95       	ror	r22
    6f02:	57 95       	ror	r21
    6f04:	47 95       	ror	r20
    6f06:	aa 95       	dec	r26
    6f08:	d1 f7       	brne	.-12     	; 0x6efe <Calculate_PID+0x59e>
    6f0a:	ab a9       	ldd	r26, Y+51	; 0x33
    6f0c:	bc a9       	ldd	r27, Y+52	; 0x34
    6f0e:	4d 93       	st	X+, r20
    6f10:	5c 93       	st	X, r21
		PID_Gyros[P2][axis] = (int16_t)((PID_gyro_temp2 + PID_Gyro_I_actual2 + DifferentialGyro2) >> 6);
    6f12:	8b a5       	ldd	r24, Y+43	; 0x2b
    6f14:	9c a5       	ldd	r25, Y+44	; 0x2c
    6f16:	ad a5       	ldd	r26, Y+45	; 0x2d
    6f18:	be a5       	ldd	r27, Y+46	; 0x2e
    6f1a:	8c 0d       	add	r24, r12
    6f1c:	9d 1d       	adc	r25, r13
    6f1e:	ae 1d       	adc	r26, r14
    6f20:	bf 1d       	adc	r27, r15
    6f22:	af 01       	movw	r20, r30
    6f24:	66 27       	eor	r22, r22
    6f26:	57 fd       	sbrc	r21, 7
    6f28:	60 95       	com	r22
    6f2a:	76 2f       	mov	r23, r22
    6f2c:	84 0f       	add	r24, r20
    6f2e:	95 1f       	adc	r25, r21
    6f30:	a6 1f       	adc	r26, r22
    6f32:	b7 1f       	adc	r27, r23
    6f34:	26 e0       	ldi	r18, 0x06	; 6
    6f36:	b5 95       	asr	r27
    6f38:	a7 95       	ror	r26
    6f3a:	97 95       	ror	r25
    6f3c:	87 95       	ror	r24
    6f3e:	2a 95       	dec	r18
    6f40:	d1 f7       	brne	.-12     	; 0x6f36 <Calculate_PID+0x5d6>
    6f42:	eb a9       	ldd	r30, Y+51	; 0x33
    6f44:	fc a9       	ldd	r31, Y+52	; 0x34
    6f46:	97 83       	std	Z+7, r25	; 0x07
    6f48:	86 83       	std	Z+6, r24	; 0x06

		//************************************************************
		// Calculate error from angle data and trim (roll and pitch only)
		//************************************************************

		if (axis < YAW)
    6f4a:	6a 96       	adiw	r28, 0x1a	; 26
    6f4c:	ff ad       	ldd	r31, Y+63	; 0x3f
    6f4e:	6a 97       	sbiw	r28, 0x1a	; 26
    6f50:	f2 30       	cpi	r31, 0x02	; 2
    6f52:	f1 f1       	breq	.+124    	; 0x6fd0 <Calculate_PID+0x670>
		{
			PID_acc_temp1 = angle[axis] - L_trim[P1][axis];				// Offset angle with trim
    6f54:	23 96       	adiw	r28, 0x03	; 3
    6f56:	ee ad       	ldd	r30, Y+62	; 0x3e
    6f58:	ff ad       	ldd	r31, Y+63	; 0x3f
    6f5a:	23 97       	sbiw	r28, 0x03	; 3
    6f5c:	40 81       	ld	r20, Z
    6f5e:	51 81       	ldd	r21, Z+1	; 0x01
    6f60:	e9 ad       	ldd	r30, Y+57	; 0x39
    6f62:	fa ad       	ldd	r31, Y+58	; 0x3a
    6f64:	80 81       	ld	r24, Z
    6f66:	91 81       	ldd	r25, Z+1	; 0x01
    6f68:	9a 01       	movw	r18, r20
    6f6a:	28 1b       	sub	r18, r24
    6f6c:	39 0b       	sbc	r19, r25
			PID_acc_temp2 = angle[axis] - L_trim[P2][axis];
    6f6e:	84 81       	ldd	r24, Z+4	; 0x04
    6f70:	95 81       	ldd	r25, Z+5	; 0x05
    6f72:	48 1b       	sub	r20, r24
    6f74:	59 0b       	sbc	r21, r25
    6f76:	e9 e0       	ldi	r30, 0x09	; 9
    6f78:	f0 e0       	ldi	r31, 0x00	; 0
    6f7a:	ec 0f       	add	r30, r28
    6f7c:	fd 1f       	adc	r31, r29
    6f7e:	4f a4       	ldd	r4, Y+47	; 0x2f
    6f80:	58 a8       	ldd	r5, Y+48	; 0x30
    6f82:	e4 0d       	add	r30, r4
    6f84:	f5 1d       	adc	r31, r5

			PID_acc_temp1 *= L_gain[P1][axis];							// P-term of accelerometer (Max gain of 127)
    6f86:	a0 81       	ld	r26, Z
    6f88:	bb 27       	eor	r27, r27
    6f8a:	a7 fd       	sbrc	r26, 7
    6f8c:	b0 95       	com	r27
    6f8e:	0e 94 62 3e 	call	0x7cc4	; 0x7cc4 <__mulhisi3>
			PID_ACCs[P1][axis] = (int16_t)(PID_acc_temp1 >> 8);			// Reduce and convert to integer
    6f92:	bb 27       	eor	r27, r27
    6f94:	97 fd       	sbrc	r25, 7
    6f96:	ba 95       	dec	r27
    6f98:	a9 2f       	mov	r26, r25
    6f9a:	98 2f       	mov	r25, r24
    6f9c:	87 2f       	mov	r24, r23
    6f9e:	eb ad       	ldd	r30, Y+59	; 0x3b
    6fa0:	fc ad       	ldd	r31, Y+60	; 0x3c
    6fa2:	91 83       	std	Z+1, r25	; 0x01
    6fa4:	80 83       	st	Z, r24

			PID_acc_temp2 *= L_gain[P2][axis];							// Same for P2
    6fa6:	25 96       	adiw	r28, 0x05	; 5
    6fa8:	ee ad       	ldd	r30, Y+62	; 0x3e
    6faa:	ff ad       	ldd	r31, Y+63	; 0x3f
    6fac:	25 97       	sbiw	r28, 0x05	; 5
    6fae:	a0 81       	ld	r26, Z
    6fb0:	9a 01       	movw	r18, r20
    6fb2:	bb 27       	eor	r27, r27
    6fb4:	a7 fd       	sbrc	r26, 7
    6fb6:	b0 95       	com	r27
    6fb8:	0e 94 62 3e 	call	0x7cc4	; 0x7cc4 <__mulhisi3>
			PID_ACCs[P2][axis] = (int16_t)(PID_acc_temp2 >> 8);	
    6fbc:	bb 27       	eor	r27, r27
    6fbe:	97 fd       	sbrc	r25, 7
    6fc0:	ba 95       	dec	r27
    6fc2:	a9 2f       	mov	r26, r25
    6fc4:	98 2f       	mov	r25, r24
    6fc6:	87 2f       	mov	r24, r23
    6fc8:	eb ad       	ldd	r30, Y+59	; 0x3b
    6fca:	fc ad       	ldd	r31, Y+60	; 0x3c
    6fcc:	97 83       	std	Z+7, r25	; 0x07
    6fce:	86 83       	std	Z+6, r24	; 0x06
    6fd0:	ef a5       	ldd	r30, Y+47	; 0x2f
    6fd2:	f8 a9       	ldd	r31, Y+48	; 0x30
    6fd4:	31 96       	adiw	r30, 0x01	; 1
    6fd6:	f8 ab       	std	Y+48, r31	; 0x30
    6fd8:	ef a7       	std	Y+47, r30	; 0x2f
    6fda:	e9 a9       	ldd	r30, Y+49	; 0x31
    6fdc:	fa a9       	ldd	r31, Y+50	; 0x32
    6fde:	32 96       	adiw	r30, 0x02	; 2
    6fe0:	fa ab       	std	Y+50, r31	; 0x32
    6fe2:	e9 ab       	std	Y+49, r30	; 0x31
    6fe4:	eb a9       	ldd	r30, Y+51	; 0x33
    6fe6:	fc a9       	ldd	r31, Y+52	; 0x34
    6fe8:	32 96       	adiw	r30, 0x02	; 2
    6fea:	fc ab       	std	Y+52, r31	; 0x34
    6fec:	eb ab       	std	Y+51, r30	; 0x33
    6fee:	23 96       	adiw	r28, 0x03	; 3
    6ff0:	ee ad       	ldd	r30, Y+62	; 0x3e
    6ff2:	ff ad       	ldd	r31, Y+63	; 0x3f
    6ff4:	23 97       	sbiw	r28, 0x03	; 3
    6ff6:	32 96       	adiw	r30, 0x02	; 2
    6ff8:	23 96       	adiw	r28, 0x03	; 3
    6ffa:	ff af       	std	Y+63, r31	; 0x3f
    6ffc:	ee af       	std	Y+62, r30	; 0x3e
    6ffe:	23 97       	sbiw	r28, 0x03	; 3
    7000:	e9 ad       	ldd	r30, Y+57	; 0x39
    7002:	fa ad       	ldd	r31, Y+58	; 0x3a
    7004:	32 96       	adiw	r30, 0x02	; 2
    7006:	fa af       	std	Y+58, r31	; 0x3a
    7008:	e9 af       	std	Y+57, r30	; 0x39
    700a:	eb ad       	ldd	r30, Y+59	; 0x3b
    700c:	fc ad       	ldd	r31, Y+60	; 0x3c
    700e:	32 96       	adiw	r30, 0x02	; 2
    7010:	fc af       	std	Y+60, r31	; 0x3c
    7012:	eb af       	std	Y+59, r30	; 0x3b
    7014:	25 96       	adiw	r28, 0x05	; 5
    7016:	ee ad       	ldd	r30, Y+62	; 0x3e
    7018:	ff ad       	ldd	r31, Y+63	; 0x3f
    701a:	25 97       	sbiw	r28, 0x05	; 5
    701c:	31 96       	adiw	r30, 0x01	; 1
    701e:	25 96       	adiw	r28, 0x05	; 5
    7020:	ff af       	std	Y+63, r31	; 0x3f
    7022:	ee af       	std	Y+62, r30	; 0x3e
    7024:	25 97       	sbiw	r28, 0x05	; 5
    7026:	ef a9       	ldd	r30, Y+55	; 0x37
    7028:	f8 ad       	ldd	r31, Y+56	; 0x38
    702a:	34 96       	adiw	r30, 0x04	; 4
    702c:	f8 af       	std	Y+56, r31	; 0x38
    702e:	ef ab       	std	Y+55, r30	; 0x37
    7030:	f4 e0       	ldi	r31, 0x04	; 4
    7032:	2f 0e       	add	r2, r31
    7034:	31 1c       	adc	r3, r1
    7036:	ed a9       	ldd	r30, Y+53	; 0x35
    7038:	fe a9       	ldd	r31, Y+54	; 0x36
    703a:	32 96       	adiw	r30, 0x02	; 2
    703c:	fe ab       	std	Y+54, r31	; 0x36
    703e:	ed ab       	std	Y+53, r30	; 0x35

	//************************************************************
	// PID loop
	//************************************************************

	for (axis = 0; axis <= YAW; axis ++)
    7040:	ef a5       	ldd	r30, Y+47	; 0x2f
    7042:	f8 a9       	ldd	r31, Y+48	; 0x30
    7044:	33 97       	sbiw	r30, 0x03	; 3
    7046:	09 f0       	breq	.+2      	; 0x704a <Calculate_PID+0x6ea>
    7048:	94 cd       	rjmp	.-1240   	; 0x6b72 <Calculate_PID+0x212>

	//************************************************************
	// Calculate an Acc-Z value 
	//************************************************************

	PID_acc_temp1 = -accVert;				// Get and copy Z-acc value. Negate to oppose G
    704a:	40 91 08 05 	lds	r20, 0x0508
    704e:	50 91 09 05 	lds	r21, 0x0509
    7052:	51 95       	neg	r21
    7054:	41 95       	neg	r20
    7056:	51 09       	sbc	r21, r1
	PID_acc_temp2 = PID_acc_temp1;

	PID_acc_temp1 *= L_gain[P1][YAW];		// Multiply P-term (Max gain of 127)
    7058:	9a 01       	movw	r18, r20
    705a:	26 96       	adiw	r28, 0x06	; 6
    705c:	ff ad       	ldd	r31, Y+63	; 0x3f
    705e:	26 97       	sbiw	r28, 0x06	; 6
    7060:	af 2f       	mov	r26, r31
    7062:	bb 27       	eor	r27, r27
    7064:	a7 fd       	sbrc	r26, 7
    7066:	b0 95       	com	r27
    7068:	0e 94 62 3e 	call	0x7cc4	; 0x7cc4 <__mulhisi3>
    706c:	6b 01       	movw	r12, r22
    706e:	7c 01       	movw	r14, r24
	PID_acc_temp2 *= L_gain[P2][YAW];		// Multiply P-term (Max gain of 127)
    7070:	27 96       	adiw	r28, 0x07	; 7
    7072:	4f ac       	ldd	r4, Y+63	; 0x3f
    7074:	27 97       	sbiw	r28, 0x07	; 7
    7076:	a4 2d       	mov	r26, r4
    7078:	bb 27       	eor	r27, r27
    707a:	a7 fd       	sbrc	r26, 7
    707c:	b0 95       	com	r27
    707e:	0e 94 62 3e 	call	0x7cc4	; 0x7cc4 <__mulhisi3>

	PID_acc_temp1 = PID_acc_temp1 >> 4;		// Moderate Z-acc to reasonable values
    7082:	44 e0       	ldi	r20, 0x04	; 4
    7084:	f5 94       	asr	r15
    7086:	e7 94       	ror	r14
    7088:	d7 94       	ror	r13
    708a:	c7 94       	ror	r12
    708c:	4a 95       	dec	r20
    708e:	d1 f7       	brne	.-12     	; 0x7084 <Calculate_PID+0x724>
	PID_acc_temp2 = PID_acc_temp2 >> 4;	
    7090:	54 e0       	ldi	r21, 0x04	; 4
    7092:	95 95       	asr	r25
    7094:	87 95       	ror	r24
    7096:	77 95       	ror	r23
    7098:	67 95       	ror	r22
    709a:	5a 95       	dec	r21
    709c:	d1 f7       	brne	.-12     	; 0x7092 <Calculate_PID+0x732>

	if (PID_acc_temp1 > MAX_ZGAIN)			// Limit to +/-MAX_ZGAIN
    709e:	25 ef       	ldi	r18, 0xF5	; 245
    70a0:	c2 16       	cp	r12, r18
    70a2:	21 e0       	ldi	r18, 0x01	; 1
    70a4:	d2 06       	cpc	r13, r18
    70a6:	e1 04       	cpc	r14, r1
    70a8:	f1 04       	cpc	r15, r1
    70aa:	84 f4       	brge	.+32     	; 0x70cc <Calculate_PID+0x76c>
	{
		PID_acc_temp1 = MAX_ZGAIN;
	}
	if (PID_acc_temp1 < -MAX_ZGAIN)
    70ac:	3c e0       	ldi	r19, 0x0C	; 12
    70ae:	c3 16       	cp	r12, r19
    70b0:	3e ef       	ldi	r19, 0xFE	; 254
    70b2:	d3 06       	cpc	r13, r19
    70b4:	3f ef       	ldi	r19, 0xFF	; 255
    70b6:	e3 06       	cpc	r14, r19
    70b8:	f3 06       	cpc	r15, r19
    70ba:	74 f4       	brge	.+28     	; 0x70d8 <Calculate_PID+0x778>
	{
		PID_acc_temp1 = -MAX_ZGAIN;
    70bc:	2c e0       	ldi	r18, 0x0C	; 12
    70be:	c2 2e       	mov	r12, r18
    70c0:	2e ef       	ldi	r18, 0xFE	; 254
    70c2:	d2 2e       	mov	r13, r18
    70c4:	ee 24       	eor	r14, r14
    70c6:	ea 94       	dec	r14
    70c8:	fe 2c       	mov	r15, r14
    70ca:	06 c0       	rjmp	.+12     	; 0x70d8 <Calculate_PID+0x778>
	PID_acc_temp1 = PID_acc_temp1 >> 4;		// Moderate Z-acc to reasonable values
	PID_acc_temp2 = PID_acc_temp2 >> 4;	

	if (PID_acc_temp1 > MAX_ZGAIN)			// Limit to +/-MAX_ZGAIN
	{
		PID_acc_temp1 = MAX_ZGAIN;
    70cc:	34 ef       	ldi	r19, 0xF4	; 244
    70ce:	c3 2e       	mov	r12, r19
    70d0:	dd 24       	eor	r13, r13
    70d2:	d3 94       	inc	r13
    70d4:	e1 2c       	mov	r14, r1
    70d6:	f1 2c       	mov	r15, r1
	if (PID_acc_temp1 < -MAX_ZGAIN)
	{
		PID_acc_temp1 = -MAX_ZGAIN;
	}

	if (PID_acc_temp2 > MAX_ZGAIN)
    70d8:	65 3f       	cpi	r22, 0xF5	; 245
    70da:	41 e0       	ldi	r20, 0x01	; 1
    70dc:	74 07       	cpc	r23, r20
    70de:	81 05       	cpc	r24, r1
    70e0:	91 05       	cpc	r25, r1
    70e2:	64 f4       	brge	.+24     	; 0x70fc <Calculate_PID+0x79c>
	{
		PID_acc_temp2 = MAX_ZGAIN;
	}
	if (PID_acc_temp2 < -MAX_ZGAIN)
    70e4:	6c 30       	cpi	r22, 0x0C	; 12
    70e6:	5e ef       	ldi	r21, 0xFE	; 254
    70e8:	75 07       	cpc	r23, r21
    70ea:	5f ef       	ldi	r21, 0xFF	; 255
    70ec:	85 07       	cpc	r24, r21
    70ee:	95 07       	cpc	r25, r21
    70f0:	4c f4       	brge	.+18     	; 0x7104 <Calculate_PID+0x7a4>
	{
		PID_acc_temp2 = -MAX_ZGAIN;
    70f2:	6c e0       	ldi	r22, 0x0C	; 12
    70f4:	7e ef       	ldi	r23, 0xFE	; 254
    70f6:	8f ef       	ldi	r24, 0xFF	; 255
    70f8:	9f ef       	ldi	r25, 0xFF	; 255
    70fa:	04 c0       	rjmp	.+8      	; 0x7104 <Calculate_PID+0x7a4>
		PID_acc_temp1 = -MAX_ZGAIN;
	}

	if (PID_acc_temp2 > MAX_ZGAIN)
	{
		PID_acc_temp2 = MAX_ZGAIN;
    70fc:	64 ef       	ldi	r22, 0xF4	; 244
    70fe:	71 e0       	ldi	r23, 0x01	; 1
    7100:	80 e0       	ldi	r24, 0x00	; 0
    7102:	90 e0       	ldi	r25, 0x00	; 0
	if (PID_acc_temp2 < -MAX_ZGAIN)
	{
		PID_acc_temp2 = -MAX_ZGAIN;
	}

	PID_ACCs[P1][YAW] = (int16_t)PID_acc_temp1; // Copy to global values
    7104:	d0 92 96 07 	sts	0x0796, r13
    7108:	c0 92 95 07 	sts	0x0795, r12
	PID_ACCs[P2][YAW] = (int16_t)PID_acc_temp2;	
    710c:	70 93 9c 07 	sts	0x079C, r23
    7110:	60 93 9b 07 	sts	0x079B, r22
}
    7114:	cf 59       	subi	r28, 0x9F	; 159
    7116:	df 4f       	sbci	r29, 0xFF	; 255
    7118:	e2 e1       	ldi	r30, 0x12	; 18
    711a:	0c 94 af 3e 	jmp	0x7d5e	; 0x7d5e <__epilogue_restores__>

0000711e <RxGetChannels>:
int16_t MonopolarThrottle;				// Monopolar throttle

// Get raw flight channel data (~2500 to 5000) and remove zero offset
// Use channel mapping for configurability
void RxGetChannels(void)
{
    711e:	cf 93       	push	r28
    7120:	df 93       	push	r29
    7122:	cf e0       	ldi	r28, 0x0F	; 15
    7124:	d7 e0       	ldi	r29, 0x07	; 7
    7126:	af e9       	ldi	r26, 0x9F	; 159
    7128:	b7 e0       	ldi	r27, 0x07	; 7
	static	int16_t	OldRxSum;			// Sum of all major channels
	int16_t	RxSumDiff;
	int16_t	RxSum, i;

	// Remove zero offsets
	for (i=0;i<MAX_RC_CHANNELS;i++)
    712a:	80 e0       	ldi	r24, 0x00	; 0
    712c:	90 e0       	ldi	r25, 0x00	; 0
	{
		RCinputs[i]	= RxChannel[i] - Config.RxChannelZeroOffset[i];
    712e:	fc 01       	movw	r30, r24
    7130:	ee 0f       	add	r30, r30
    7132:	ff 1f       	adc	r31, r31
    7134:	e1 5c       	subi	r30, 0xC1	; 193
    7136:	f8 4f       	sbci	r31, 0xF8	; 248
    7138:	20 81       	ld	r18, Z
    713a:	31 81       	ldd	r19, Z+1	; 0x01
    713c:	49 91       	ld	r20, Y+
    713e:	59 91       	ld	r21, Y+
    7140:	24 1b       	sub	r18, r20
    7142:	35 0b       	sbc	r19, r21
    7144:	2d 93       	st	X+, r18
    7146:	3d 93       	st	X+, r19
	static	int16_t	OldRxSum;			// Sum of all major channels
	int16_t	RxSumDiff;
	int16_t	RxSum, i;

	// Remove zero offsets
	for (i=0;i<MAX_RC_CHANNELS;i++)
    7148:	01 96       	adiw	r24, 0x01	; 1
    714a:	88 30       	cpi	r24, 0x08	; 8
    714c:	91 05       	cpc	r25, r1
    714e:	79 f7       	brne	.-34     	; 0x712e <RxGetChannels+0x10>
	{
		RCinputs[i]	= RxChannel[i] - Config.RxChannelZeroOffset[i];
	}

	// Special handling for monopolar throttle
	MonopolarThrottle = RxChannel[THROTTLE] - Config.RxChannelZeroOffset[THROTTLE];
    7150:	20 91 3f 07 	lds	r18, 0x073F
    7154:	30 91 40 07 	lds	r19, 0x0740
    7158:	80 91 0f 07 	lds	r24, 0x070F
    715c:	90 91 10 07 	lds	r25, 0x0710
    7160:	28 1b       	sub	r18, r24
    7162:	39 0b       	sbc	r19, r25
    7164:	30 93 9e 07 	sts	0x079E, r19
    7168:	20 93 9d 07 	sts	0x079D, r18

	// Bipolar throttle must use the nominal mid-point
	RCinputs[THROTTLE] = RxChannel[THROTTLE] - 3750;
    716c:	80 91 3f 07 	lds	r24, 0x073F
    7170:	90 91 40 07 	lds	r25, 0x0740
    7174:	86 5a       	subi	r24, 0xA6	; 166
    7176:	9e 40       	sbci	r25, 0x0E	; 14
    7178:	90 93 a0 07 	sts	0x07A0, r25
    717c:	80 93 9f 07 	sts	0x079F, r24

	// Reverse primary channels as requested
	if (Config.AileronPol == REVERSED)
    7180:	80 91 ab 05 	lds	r24, 0x05AB
    7184:	81 30       	cpi	r24, 0x01	; 1
    7186:	59 f4       	brne	.+22     	; 0x719e <RxGetChannels+0x80>
	{
		RCinputs[AILERON] = -RCinputs[AILERON];
    7188:	80 91 a1 07 	lds	r24, 0x07A1
    718c:	90 91 a2 07 	lds	r25, 0x07A2
    7190:	91 95       	neg	r25
    7192:	81 95       	neg	r24
    7194:	91 09       	sbc	r25, r1
    7196:	90 93 a2 07 	sts	0x07A2, r25
    719a:	80 93 a1 07 	sts	0x07A1, r24
	}

	if (Config.ElevatorPol == REVERSED)
    719e:	80 91 ac 05 	lds	r24, 0x05AC
    71a2:	81 30       	cpi	r24, 0x01	; 1
    71a4:	59 f4       	brne	.+22     	; 0x71bc <RxGetChannels+0x9e>
	{
		RCinputs[ELEVATOR] = -RCinputs[ELEVATOR];
    71a6:	80 91 a3 07 	lds	r24, 0x07A3
    71aa:	90 91 a4 07 	lds	r25, 0x07A4
    71ae:	91 95       	neg	r25
    71b0:	81 95       	neg	r24
    71b2:	91 09       	sbc	r25, r1
    71b4:	90 93 a4 07 	sts	0x07A4, r25
    71b8:	80 93 a3 07 	sts	0x07A3, r24
	}

	if (Config.RudderPol == REVERSED)
    71bc:	80 91 ad 05 	lds	r24, 0x05AD
    71c0:	81 30       	cpi	r24, 0x01	; 1
    71c2:	59 f4       	brne	.+22     	; 0x71da <RxGetChannels+0xbc>
	{
		RCinputs[RUDDER] = -RCinputs[RUDDER];
    71c4:	80 91 a5 07 	lds	r24, 0x07A5
    71c8:	90 91 a6 07 	lds	r25, 0x07A6
    71cc:	91 95       	neg	r25
    71ce:	81 95       	neg	r24
    71d0:	91 09       	sbc	r25, r1
    71d2:	90 93 a6 07 	sts	0x07A6, r25
    71d6:	80 93 a5 07 	sts	0x07A5, r24
	}

	// Calculate RX activity
	RxSum = RCinputs[AILERON] + RCinputs[ELEVATOR] + RCinputs[RUDDER];
    71da:	80 91 a1 07 	lds	r24, 0x07A1
    71de:	90 91 a2 07 	lds	r25, 0x07A2
    71e2:	40 91 a3 07 	lds	r20, 0x07A3
    71e6:	50 91 a4 07 	lds	r21, 0x07A4
    71ea:	84 0f       	add	r24, r20
    71ec:	95 1f       	adc	r25, r21
    71ee:	40 91 a5 07 	lds	r20, 0x07A5
    71f2:	50 91 a6 07 	lds	r21, 0x07A6
    71f6:	84 0f       	add	r24, r20
    71f8:	95 1f       	adc	r25, r21
	RxSumDiff = RxSum - OldRxSum;
    71fa:	40 91 2b 05 	lds	r20, 0x052B
    71fe:	50 91 2c 05 	lds	r21, 0x052C
    7202:	bc 01       	movw	r22, r24
    7204:	64 1b       	sub	r22, r20
    7206:	75 0b       	sbc	r23, r21
    7208:	ab 01       	movw	r20, r22

	// Set RX activity flag if movement above noise floor or throttle above minimum
	if ((RxSumDiff > NOISE_THRESH) || (RxSumDiff < -NOISE_THRESH) || (MonopolarThrottle > THROTTLEIDLE)) 
    720a:	4b 5f       	subi	r20, 0xFB	; 251
    720c:	5f 4f       	sbci	r21, 0xFF	; 255
    720e:	60 91 0d 05 	lds	r22, 0x050D
    7212:	4b 30       	cpi	r20, 0x0B	; 11
    7214:	51 05       	cpc	r21, r1
    7216:	18 f4       	brcc	.+6      	; 0x721e <RxGetChannels+0x100>
    7218:	23 33       	cpi	r18, 0x33	; 51
    721a:	31 05       	cpc	r19, r1
    721c:	14 f0       	brlt	.+4      	; 0x7222 <RxGetChannels+0x104>
	{
		Flight_flags |= (1 << RxActivity);
    721e:	61 60       	ori	r22, 0x01	; 1
    7220:	01 c0       	rjmp	.+2      	; 0x7224 <RxGetChannels+0x106>
	}
	else 
	{
		Flight_flags &= ~(1 << RxActivity);
    7222:	6e 7f       	andi	r22, 0xFE	; 254
    7224:	60 93 0d 05 	sts	0x050D, r22
	}
	
	// Preset RCinputs[NOCHAN] for sanity
	RCinputs[NOCHAN] = 0;
    7228:	10 92 b0 07 	sts	0x07B0, r1
    722c:	10 92 af 07 	sts	0x07AF, r1

	OldRxSum = RxSum;
    7230:	90 93 2c 05 	sts	0x052C, r25
    7234:	80 93 2b 05 	sts	0x052B, r24
}
    7238:	df 91       	pop	r29
    723a:	cf 91       	pop	r28
    723c:	08 95       	ret

0000723e <CenterSticks>:

// Center sticks on request from Menu
void CenterSticks(void)		
{
    723e:	a0 e1       	ldi	r26, 0x10	; 16
    7240:	b0 e0       	ldi	r27, 0x00	; 0
    7242:	e5 e2       	ldi	r30, 0x25	; 37
    7244:	f9 e3       	ldi	r31, 0x39	; 57
    7246:	0c 94 a1 3e 	jmp	0x7d42	; 0x7d42 <__prologue_saves__+0x1c>
	uint8_t i, j;
	uint16_t RxChannelZeroOffset[MAX_RC_CHANNELS] = {0,0,0,0,0,0,0,0};
    724a:	8e 01       	movw	r16, r28
    724c:	0f 5f       	subi	r16, 0xFF	; 255
    724e:	1f 4f       	sbci	r17, 0xFF	; 255
    7250:	80 e1       	ldi	r24, 0x10	; 16
    7252:	d8 01       	movw	r26, r16
    7254:	1d 92       	st	X+, r1
    7256:	8a 95       	dec	r24
    7258:	e9 f7       	brne	.-6      	; 0x7254 <CenterSticks+0x16>
    725a:	68 e0       	ldi	r22, 0x08	; 8
	OldRxSum = RxSum;
}

// Center sticks on request from Menu
void CenterSticks(void)		
{
    725c:	d8 01       	movw	r26, r16
    725e:	80 e0       	ldi	r24, 0x00	; 0
    7260:	90 e0       	ldi	r25, 0x00	; 0
	// RxChannel will auto-update every RC frame (normally 46Hz or so)
	for (i=0; i<8; i++)
	{
		for (j=0; j<MAX_RC_CHANNELS; j++)
		{
			RxChannelZeroOffset[j] += RxChannel[j];
    7262:	9c 01       	movw	r18, r24
    7264:	22 0f       	add	r18, r18
    7266:	33 1f       	adc	r19, r19
    7268:	21 5c       	subi	r18, 0xC1	; 193
    726a:	38 4f       	sbci	r19, 0xF8	; 248
    726c:	f9 01       	movw	r30, r18
    726e:	40 81       	ld	r20, Z
    7270:	51 81       	ldd	r21, Z+1	; 0x01
    7272:	2d 91       	ld	r18, X+
    7274:	3c 91       	ld	r19, X
    7276:	11 97       	sbiw	r26, 0x01	; 1
    7278:	24 0f       	add	r18, r20
    727a:	35 1f       	adc	r19, r21
    727c:	2d 93       	st	X+, r18
    727e:	3d 93       	st	X+, r19
    7280:	01 96       	adiw	r24, 0x01	; 1

	// Take an average of eight readings
	// RxChannel will auto-update every RC frame (normally 46Hz or so)
	for (i=0; i<8; i++)
	{
		for (j=0; j<MAX_RC_CHANNELS; j++)
    7282:	88 30       	cpi	r24, 0x08	; 8
    7284:	91 05       	cpc	r25, r1
    7286:	69 f7       	brne	.-38     	; 0x7262 <CenterSticks+0x24>
    7288:	ff e7       	ldi	r31, 0x7F	; 127
    728a:	2a e1       	ldi	r18, 0x1A	; 26
    728c:	86 e0       	ldi	r24, 0x06	; 6
    728e:	f1 50       	subi	r31, 0x01	; 1
    7290:	20 40       	sbci	r18, 0x00	; 0
    7292:	80 40       	sbci	r24, 0x00	; 0
    7294:	e1 f7       	brne	.-8      	; 0x728e <CenterSticks+0x50>
    7296:	00 c0       	rjmp	.+0      	; 0x7298 <CenterSticks+0x5a>
    7298:	00 00       	nop
    729a:	61 50       	subi	r22, 0x01	; 1
	uint8_t i, j;
	uint16_t RxChannelZeroOffset[MAX_RC_CHANNELS] = {0,0,0,0,0,0,0,0};

	// Take an average of eight readings
	// RxChannel will auto-update every RC frame (normally 46Hz or so)
	for (i=0; i<8; i++)
    729c:	f9 f6       	brne	.-66     	; 0x725c <CenterSticks+0x1e>
    729e:	af e0       	ldi	r26, 0x0F	; 15
    72a0:	b7 e0       	ldi	r27, 0x07	; 7
    72a2:	9e 01       	movw	r18, r28
    72a4:	2f 5e       	subi	r18, 0xEF	; 239
    72a6:	3f 4f       	sbci	r19, 0xFF	; 255
    72a8:	f8 01       	movw	r30, r16
		_delay_ms(100);
	}

	for (i=0;i<MAX_RC_CHANNELS;i++)
	{
		Config.RxChannelZeroOffset[i] = ((RxChannelZeroOffset[i] + 4) >> 3); // Round and divide by 8
    72aa:	81 91       	ld	r24, Z+
    72ac:	91 91       	ld	r25, Z+
    72ae:	04 96       	adiw	r24, 0x04	; 4
    72b0:	43 e0       	ldi	r20, 0x03	; 3
    72b2:	96 95       	lsr	r25
    72b4:	87 95       	ror	r24
    72b6:	4a 95       	dec	r20
    72b8:	e1 f7       	brne	.-8      	; 0x72b2 <CenterSticks+0x74>
    72ba:	8d 93       	st	X+, r24
    72bc:	9d 93       	st	X+, r25
			RxChannelZeroOffset[j] += RxChannel[j];
		}
		_delay_ms(100);
	}

	for (i=0;i<MAX_RC_CHANNELS;i++)
    72be:	e2 17       	cp	r30, r18
    72c0:	f3 07       	cpc	r31, r19
    72c2:	99 f7       	brne	.-26     	; 0x72aa <CenterSticks+0x6c>
	{
		Config.RxChannelZeroOffset[i] = ((RxChannelZeroOffset[i] + 4) >> 3); // Round and divide by 8
	}

	Save_Config_to_EEPROM();
    72c4:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <Save_Config_to_EEPROM>
}
    72c8:	60 96       	adiw	r28, 0x10	; 16
    72ca:	e4 e0       	ldi	r30, 0x04	; 4
    72cc:	0c 94 bd 3e 	jmp	0x7d7a	; 0x7d7a <__epilogue_restores__+0x1c>

000072d0 <output_servo_ppm>:
//************************************************************

volatile uint16_t ServoOut[MAX_OUTPUTS]; // Hands off my servos!

void output_servo_ppm(void)
{
    72d0:	a0 e0       	ldi	r26, 0x00	; 0
    72d2:	b0 e0       	ldi	r27, 0x00	; 0
    72d4:	ee e6       	ldi	r30, 0x6E	; 110
    72d6:	f9 e3       	ldi	r31, 0x39	; 57
    72d8:	0c 94 9d 3e 	jmp	0x7d3a	; 0x7d3a <__prologue_saves__+0x14>
    72dc:	c0 e0       	ldi	r28, 0x00	; 0
    72de:	d0 e0       	ldi	r29, 0x00	; 0

	// Scale servo from 2500~5000 to 1000~2000
	for (i = 0; i < MAX_OUTPUTS; i++)
	{
		temp = ServoOut[i];					// Promote to 32 bits
		temp = ((temp << 2) + 5) / 10; 		// Round and convert
    72e0:	fa e0       	ldi	r31, 0x0A	; 10
    72e2:	cf 2e       	mov	r12, r31
    72e4:	d1 2c       	mov	r13, r1
    72e6:	e1 2c       	mov	r14, r1
    72e8:	f1 2c       	mov	r15, r1
	uint8_t i;

	// Scale servo from 2500~5000 to 1000~2000
	for (i = 0; i < MAX_OUTPUTS; i++)
	{
		temp = ServoOut[i];					// Promote to 32 bits
    72ea:	8e 01       	movw	r16, r28
    72ec:	00 0f       	add	r16, r16
    72ee:	11 1f       	adc	r17, r17
    72f0:	0f 54       	subi	r16, 0x4F	; 79
    72f2:	18 4f       	sbci	r17, 0xF8	; 248
    72f4:	f8 01       	movw	r30, r16
    72f6:	60 81       	ld	r22, Z
    72f8:	71 81       	ldd	r23, Z+1	; 0x01
    72fa:	80 e0       	ldi	r24, 0x00	; 0
    72fc:	90 e0       	ldi	r25, 0x00	; 0
		temp = ((temp << 2) + 5) / 10; 		// Round and convert
    72fe:	e2 e0       	ldi	r30, 0x02	; 2
    7300:	66 0f       	add	r22, r22
    7302:	77 1f       	adc	r23, r23
    7304:	88 1f       	adc	r24, r24
    7306:	99 1f       	adc	r25, r25
    7308:	ea 95       	dec	r30
    730a:	d1 f7       	brne	.-12     	; 0x7300 <output_servo_ppm+0x30>
    730c:	6b 5f       	subi	r22, 0xFB	; 251
    730e:	7f 4f       	sbci	r23, 0xFF	; 255
    7310:	8f 4f       	sbci	r24, 0xFF	; 255
    7312:	9f 4f       	sbci	r25, 0xFF	; 255
    7314:	a7 01       	movw	r20, r14
    7316:	96 01       	movw	r18, r12
    7318:	0e 94 1b 3e 	call	0x7c36	; 0x7c36 <__udivmodsi4>
		ServoOut[i] = (uint16_t)temp;
    731c:	f8 01       	movw	r30, r16
    731e:	31 83       	std	Z+1, r19	; 0x01
    7320:	20 83       	st	Z, r18
    7322:	21 96       	adiw	r28, 0x01	; 1
{
	uint32_t temp;
	uint8_t i;

	// Scale servo from 2500~5000 to 1000~2000
	for (i = 0; i < MAX_OUTPUTS; i++)
    7324:	c8 30       	cpi	r28, 0x08	; 8
    7326:	d1 05       	cpc	r29, r1
    7328:	01 f7       	brne	.-64     	; 0x72ea <output_servo_ppm+0x1a>
		temp = ((temp << 2) + 5) / 10; 		// Round and convert
		ServoOut[i] = (uint16_t)temp;
	}

	// Re-sample throttle value
	MonopolarThrottle = RxChannel[THROTTLE] - Config.RxChannelZeroOffset[THROTTLE];
    732a:	80 91 3f 07 	lds	r24, 0x073F
    732e:	90 91 40 07 	lds	r25, 0x0740
    7332:	20 91 0f 07 	lds	r18, 0x070F
    7336:	30 91 10 07 	lds	r19, 0x0710
    733a:	82 1b       	sub	r24, r18
    733c:	93 0b       	sbc	r25, r19
    733e:	90 93 9e 07 	sts	0x079E, r25
    7342:	80 93 9d 07 	sts	0x079D, r24

	// Check for motor flags if throttle is below arming minimum or disarmed
	// and set all motors to minimum throttle if so
	if 	(
    7346:	c2 97       	sbiw	r24, 0x32	; 50
    7348:	a4 f0       	brlt	.+40     	; 0x7372 <output_servo_ppm+0xa2>
			(MonopolarThrottle < THROTTLEIDLE) || 
			((General_error & (1 << DISARMED)) != 0)
    734a:	80 91 0e 05 	lds	r24, 0x050E
	MonopolarThrottle = RxChannel[THROTTLE] - Config.RxChannelZeroOffset[THROTTLE];

	// Check for motor flags if throttle is below arming minimum or disarmed
	// and set all motors to minimum throttle if so
	if 	(
			(MonopolarThrottle < THROTTLEIDLE) || 
    734e:	84 fd       	sbrc	r24, 4
    7350:	10 c0       	rjmp	.+32     	; 0x7372 <output_servo_ppm+0xa2>
			}
		}
	}

	// Suppress outputs during throttle high error
	if((General_error & (1 << THROTTLE_HIGH)) == 0)
    7352:	80 91 0e 05 	lds	r24, 0x050E
    7356:	81 fd       	sbrc	r24, 1
    7358:	23 c0       	rjmp	.+70     	; 0x73a0 <output_servo_ppm+0xd0>
	{
		// Reset JitterFlag immediately before PWM generation
		JitterFlag = false;
    735a:	10 92 67 07 	sts	0x0767, r1

		// We now care about interrupts
		JitterGate = true;
    735e:	81 e0       	ldi	r24, 0x01	; 1
    7360:	80 93 66 07 	sts	0x0766, r24

		// Pass address of ServoOut array
		output_servo_ppm_asm(&ServoOut[0]);
    7364:	81 eb       	ldi	r24, 0xB1	; 177
    7366:	97 e0       	ldi	r25, 0x07	; 7
    7368:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <output_servo_ppm_asm>

		// We no longer care about interrupts
		JitterGate = false;
    736c:	10 92 66 07 	sts	0x0766, r1
    7370:	17 c0       	rjmp	.+46     	; 0x73a0 <output_servo_ppm+0xd0>
    7372:	e0 e2       	ldi	r30, 0x20	; 32
    7374:	f6 e0       	ldi	r31, 0x06	; 6
//************************************************************

volatile uint16_t ServoOut[MAX_OUTPUTS]; // Hands off my servos!

void output_servo_ppm(void)
{
    7376:	80 e0       	ldi	r24, 0x00	; 0
    7378:	90 e0       	ldi	r25, 0x00	; 0
		{
			// Check for motor marker
			if ((Config.Channel[i].P1_sensors & (1 << MotorMarker)) != 0)
			{
				// Set output to minimum pulse width
				ServoOut[i] = MOTORMIN;
    737a:	28 ee       	ldi	r18, 0xE8	; 232
    737c:	33 e0       	ldi	r19, 0x03	; 3
	{
		// For each output
		for (i = 0; i < MAX_OUTPUTS; i++)
		{
			// Check for motor marker
			if ((Config.Channel[i].P1_sensors & (1 << MotorMarker)) != 0)
    737e:	40 81       	ld	r20, Z
    7380:	46 ff       	sbrs	r20, 6
    7382:	08 c0       	rjmp	.+16     	; 0x7394 <output_servo_ppm+0xc4>
			{
				// Set output to minimum pulse width
				ServoOut[i] = MOTORMIN;
    7384:	dc 01       	movw	r26, r24
    7386:	aa 0f       	add	r26, r26
    7388:	bb 1f       	adc	r27, r27
    738a:	af 54       	subi	r26, 0x4F	; 79
    738c:	b8 4f       	sbci	r27, 0xF8	; 248
    738e:	11 96       	adiw	r26, 0x01	; 1
    7390:	3c 93       	st	X, r19
    7392:	2e 93       	st	-X, r18
    7394:	01 96       	adiw	r24, 0x01	; 1
    7396:	7d 96       	adiw	r30, 0x1d	; 29
			(MonopolarThrottle < THROTTLEIDLE) || 
			((General_error & (1 << DISARMED)) != 0)
		)
	{
		// For each output
		for (i = 0; i < MAX_OUTPUTS; i++)
    7398:	88 30       	cpi	r24, 0x08	; 8
    739a:	91 05       	cpc	r25, r1
    739c:	81 f7       	brne	.-32     	; 0x737e <output_servo_ppm+0xae>
    739e:	d9 cf       	rjmp	.-78     	; 0x7352 <output_servo_ppm+0x82>

		// We no longer care about interrupts
		JitterGate = false;

	}
}
    73a0:	cd b7       	in	r28, 0x3d	; 61
    73a2:	de b7       	in	r29, 0x3e	; 62
    73a4:	e8 e0       	ldi	r30, 0x08	; 8
    73a6:	0c 94 b9 3e 	jmp	0x7d72	; 0x7d72 <__epilogue_restores__+0x14>

000073aa <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
  TWSR = 0;                         /* no prescaler */
    73aa:	10 92 b9 00 	sts	0x00B9, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
    73ae:	81 e1       	ldi	r24, 0x11	; 17
    73b0:	80 93 b8 00 	sts	0x00B8, r24
    73b4:	08 95       	ret

000073b6 <i2c_start>:
{
	uint32_t  i2c_timer = 0;
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    73b6:	94 ea       	ldi	r25, 0xA4	; 164
    73b8:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
    73bc:	4f ef       	ldi	r20, 0xFF	; 255
    73be:	50 e0       	ldi	r21, 0x00	; 0
    73c0:	60 e0       	ldi	r22, 0x00	; 0
    73c2:	70 e0       	ldi	r23, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    73c4:	90 91 bc 00 	lds	r25, 0x00BC
    73c8:	97 fd       	sbrc	r25, 7
    73ca:	06 c0       	rjmp	.+12     	; 0x73d8 <i2c_start+0x22>
    73cc:	41 50       	subi	r20, 0x01	; 1
    73ce:	51 09       	sbc	r21, r1
    73d0:	61 09       	sbc	r22, r1
    73d2:	71 09       	sbc	r23, r1
    73d4:	b8 f7       	brcc	.-18     	; 0x73c4 <i2c_start+0xe>
    73d6:	06 c0       	rjmp	.+12     	; 0x73e4 <i2c_start+0x2e>
	if(i2c_timer == 0)
    73d8:	45 2b       	or	r20, r21
    73da:	46 2b       	or	r20, r22
    73dc:	47 2b       	or	r20, r23
    73de:	11 f4       	brne	.+4      	; 0x73e4 <i2c_start+0x2e>
		return 1;
    73e0:	81 e0       	ldi	r24, 0x01	; 1
    73e2:	08 95       	ret

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    73e4:	90 91 b9 00 	lds	r25, 0x00B9
    73e8:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
    73ea:	98 30       	cpi	r25, 0x08	; 8
    73ec:	11 f0       	breq	.+4      	; 0x73f2 <i2c_start+0x3c>
    73ee:	90 31       	cpi	r25, 0x10	; 16
    73f0:	b9 f7       	brne	.-18     	; 0x73e0 <i2c_start+0x2a>

	// send device address
	TWDR = address;
    73f2:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    73f6:	84 e8       	ldi	r24, 0x84	; 132
    73f8:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	i2c_timer = I2C_TIMER_DELAY;
    73fc:	8f ef       	ldi	r24, 0xFF	; 255
    73fe:	90 e0       	ldi	r25, 0x00	; 0
    7400:	a0 e0       	ldi	r26, 0x00	; 0
    7402:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    7404:	20 91 bc 00 	lds	r18, 0x00BC
    7408:	27 fd       	sbrc	r18, 7
    740a:	05 c0       	rjmp	.+10     	; 0x7416 <i2c_start+0x60>
    740c:	01 97       	sbiw	r24, 0x01	; 1
    740e:	a1 09       	sbc	r26, r1
    7410:	b1 09       	sbc	r27, r1
    7412:	c0 f7       	brcc	.-16     	; 0x7404 <i2c_start+0x4e>
    7414:	04 c0       	rjmp	.+8      	; 0x741e <i2c_start+0x68>
	if(i2c_timer == 0)
    7416:	89 2b       	or	r24, r25
    7418:	8a 2b       	or	r24, r26
    741a:	8b 2b       	or	r24, r27
    741c:	09 f3       	breq	.-62     	; 0x73e0 <i2c_start+0x2a>
		return 1;

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    741e:	80 91 b9 00 	lds	r24, 0x00B9
    7422:	88 7f       	andi	r24, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
    7424:	88 31       	cpi	r24, 0x18	; 24
    7426:	11 f0       	breq	.+4      	; 0x742c <i2c_start+0x76>
    7428:	80 34       	cpi	r24, 0x40	; 64
    742a:	d1 f6       	brne	.-76     	; 0x73e0 <i2c_start+0x2a>

	return 0;
    742c:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */
    742e:	08 95       	ret

00007430 <i2c_start_wait>:
	uint8_t   twst;

    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    7430:	44 ea       	ldi	r20, 0xA4	; 164
    	twst = TW_STATUS & 0xF8;
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
    	TWCR = (1<<TWINT) | (1<<TWEN);
    7432:	54 e8       	ldi	r21, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    7434:	64 e9       	ldi	r22, 0x94	; 148
	uint8_t   twst;

    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    7436:	40 93 bc 00 	sts	0x00BC, r20
    
    	// wait until transmission completed
	    i2c_timer = I2C_TIMER_DELAY;
    	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    743a:	20 e0       	ldi	r18, 0x00	; 0
    743c:	30 e0       	ldi	r19, 0x00	; 0
    743e:	90 91 bc 00 	lds	r25, 0x00BC
    7442:	97 fd       	sbrc	r25, 7
    7444:	06 c0       	rjmp	.+12     	; 0x7452 <i2c_start_wait+0x22>
    7446:	2f 5f       	subi	r18, 0xFF	; 255
    7448:	3f 4f       	sbci	r19, 0xFF	; 255
    744a:	21 15       	cp	r18, r1
    744c:	91 e0       	ldi	r25, 0x01	; 1
    744e:	39 07       	cpc	r19, r25
    7450:	b1 f7       	brne	.-20     	; 0x743e <i2c_start_wait+0xe>

    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    7452:	90 91 b9 00 	lds	r25, 0x00B9
    7456:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    7458:	98 30       	cpi	r25, 0x08	; 8
    745a:	11 f0       	breq	.+4      	; 0x7460 <i2c_start_wait+0x30>
    745c:	90 31       	cpi	r25, 0x10	; 16
    745e:	59 f7       	brne	.-42     	; 0x7436 <i2c_start_wait+0x6>
    
    	// send device address
    	TWDR = address;
    7460:	80 93 bb 00 	sts	0x00BB, r24
    	TWCR = (1<<TWINT) | (1<<TWEN);
    7464:	50 93 bc 00 	sts	0x00BC, r21
    
    	// wail until transmission completed
    	i2c_timer = I2C_TIMER_DELAY;
    	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    7468:	20 e0       	ldi	r18, 0x00	; 0
    746a:	30 e0       	ldi	r19, 0x00	; 0
    746c:	90 91 bc 00 	lds	r25, 0x00BC
    7470:	97 fd       	sbrc	r25, 7
    7472:	06 c0       	rjmp	.+12     	; 0x7480 <i2c_start_wait+0x50>
    7474:	2f 5f       	subi	r18, 0xFF	; 255
    7476:	3f 4f       	sbci	r19, 0xFF	; 255
    7478:	21 15       	cp	r18, r1
    747a:	91 e0       	ldi	r25, 0x01	; 1
    747c:	39 07       	cpc	r19, r25
    747e:	b1 f7       	brne	.-20     	; 0x746c <i2c_start_wait+0x3c>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    7480:	90 91 b9 00 	lds	r25, 0x00B9
    7484:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    7486:	90 32       	cpi	r25, 0x20	; 32
    7488:	11 f0       	breq	.+4      	; 0x748e <i2c_start_wait+0x5e>
    748a:	98 35       	cpi	r25, 0x58	; 88
    748c:	79 f4       	brne	.+30     	; 0x74ac <i2c_start_wait+0x7c>
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    748e:	60 93 bc 00 	sts	0x00BC, r22
	        
	        // wait until stop condition is executed and bus released
	        i2c_timer = I2C_TIMER_DELAY;
	        while((TWCR & (1<<TWSTO)) && i2c_timer--);
    7492:	20 e0       	ldi	r18, 0x00	; 0
    7494:	30 e0       	ldi	r19, 0x00	; 0
    7496:	90 91 bc 00 	lds	r25, 0x00BC
    749a:	94 ff       	sbrs	r25, 4
    749c:	cc cf       	rjmp	.-104    	; 0x7436 <i2c_start_wait+0x6>
    749e:	2f 5f       	subi	r18, 0xFF	; 255
    74a0:	3f 4f       	sbci	r19, 0xFF	; 255
    74a2:	21 15       	cp	r18, r1
    74a4:	91 e0       	ldi	r25, 0x01	; 1
    74a6:	39 07       	cpc	r19, r25
    74a8:	b1 f7       	brne	.-20     	; 0x7496 <i2c_start_wait+0x66>
    74aa:	c5 cf       	rjmp	.-118    	; 0x7436 <i2c_start_wait+0x6>
    74ac:	08 95       	ret

000074ae <i2c_rep_start>:
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );
    74ae:	0e 94 db 39 	call	0x73b6	; 0x73b6 <i2c_start>

}/* i2c_rep_start */
    74b2:	08 95       	ret

000074b4 <i2c_stop>:
void i2c_stop(void)
{
	uint32_t  i2c_timer = 0;

    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    74b4:	84 e9       	ldi	r24, 0x94	; 148
    74b6:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait until stop condition is executed and bus released
	i2c_timer = I2C_TIMER_DELAY;
	while((TWCR & (1<<TWSTO)) && i2c_timer--);
    74ba:	80 e0       	ldi	r24, 0x00	; 0
    74bc:	90 e0       	ldi	r25, 0x00	; 0
    74be:	20 91 bc 00 	lds	r18, 0x00BC
    74c2:	24 ff       	sbrs	r18, 4
    74c4:	05 c0       	rjmp	.+10     	; 0x74d0 <i2c_stop+0x1c>
    74c6:	01 96       	adiw	r24, 0x01	; 1
    74c8:	81 15       	cp	r24, r1
    74ca:	21 e0       	ldi	r18, 0x01	; 1
    74cc:	92 07       	cpc	r25, r18
    74ce:	b9 f7       	brne	.-18     	; 0x74be <i2c_stop+0xa>
    74d0:	08 95       	ret

000074d2 <i2c_write>:
{	
	uint32_t  i2c_timer = 0;
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    74d2:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    74d6:	84 e8       	ldi	r24, 0x84	; 132
    74d8:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
    74dc:	8f ef       	ldi	r24, 0xFF	; 255
    74de:	90 e0       	ldi	r25, 0x00	; 0
    74e0:	a0 e0       	ldi	r26, 0x00	; 0
    74e2:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    74e4:	20 91 bc 00 	lds	r18, 0x00BC
    74e8:	27 fd       	sbrc	r18, 7
    74ea:	05 c0       	rjmp	.+10     	; 0x74f6 <i2c_write+0x24>
    74ec:	01 97       	sbiw	r24, 0x01	; 1
    74ee:	a1 09       	sbc	r26, r1
    74f0:	b1 09       	sbc	r27, r1
    74f2:	c0 f7       	brcc	.-16     	; 0x74e4 <i2c_write+0x12>
    74f4:	04 c0       	rjmp	.+8      	; 0x74fe <i2c_write+0x2c>
	if(i2c_timer == 0)
    74f6:	89 2b       	or	r24, r25
    74f8:	8a 2b       	or	r24, r26
    74fa:	8b 2b       	or	r24, r27
    74fc:	41 f0       	breq	.+16     	; 0x750e <i2c_write+0x3c>
		return 1;

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    74fe:	90 91 b9 00 	lds	r25, 0x00B9
    7502:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
    7504:	81 e0       	ldi	r24, 0x01	; 1
    7506:	98 32       	cpi	r25, 0x28	; 40
    7508:	19 f4       	brne	.+6      	; 0x7510 <i2c_write+0x3e>
    750a:	80 e0       	ldi	r24, 0x00	; 0
    750c:	08 95       	ret

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 1;
    750e:	81 e0       	ldi	r24, 0x01	; 1
	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
    7510:	08 95       	ret

00007512 <i2c_readAck>:
*************************************************************************/
unsigned char i2c_readAck(void)
{
	uint32_t  i2c_timer = 0;

	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    7512:	84 ec       	ldi	r24, 0xC4	; 196
    7514:	80 93 bc 00 	sts	0x00BC, r24
	i2c_timer = I2C_TIMER_DELAY;
    7518:	8f ef       	ldi	r24, 0xFF	; 255
    751a:	90 e0       	ldi	r25, 0x00	; 0
    751c:	a0 e0       	ldi	r26, 0x00	; 0
    751e:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    7520:	20 91 bc 00 	lds	r18, 0x00BC
    7524:	27 fd       	sbrc	r18, 7
    7526:	05 c0       	rjmp	.+10     	; 0x7532 <i2c_readAck+0x20>
    7528:	01 97       	sbiw	r24, 0x01	; 1
    752a:	a1 09       	sbc	r26, r1
    752c:	b1 09       	sbc	r27, r1
    752e:	c0 f7       	brcc	.-16     	; 0x7520 <i2c_readAck+0xe>
    7530:	04 c0       	rjmp	.+8      	; 0x753a <i2c_readAck+0x28>
	if(i2c_timer == 0)
    7532:	89 2b       	or	r24, r25
    7534:	8a 2b       	or	r24, r26
    7536:	8b 2b       	or	r24, r27
    7538:	19 f0       	breq	.+6      	; 0x7540 <i2c_readAck+0x2e>
		return 0;

    return TWDR;
    753a:	80 91 bb 00 	lds	r24, 0x00BB
    753e:	08 95       	ret

	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 0;
    7540:	80 e0       	ldi	r24, 0x00	; 0

    return TWDR;

}/* i2c_readAck */
    7542:	08 95       	ret

00007544 <i2c_readNak>:
*************************************************************************/
unsigned char i2c_readNak(void)
{
	uint32_t  i2c_timer = 0;

	TWCR = (1<<TWINT) | (1<<TWEN);
    7544:	84 e8       	ldi	r24, 0x84	; 132
    7546:	80 93 bc 00 	sts	0x00BC, r24
	i2c_timer = I2C_TIMER_DELAY;
    754a:	8f ef       	ldi	r24, 0xFF	; 255
    754c:	90 e0       	ldi	r25, 0x00	; 0
    754e:	a0 e0       	ldi	r26, 0x00	; 0
    7550:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    7552:	20 91 bc 00 	lds	r18, 0x00BC
    7556:	27 fd       	sbrc	r18, 7
    7558:	05 c0       	rjmp	.+10     	; 0x7564 <i2c_readNak+0x20>
    755a:	01 97       	sbiw	r24, 0x01	; 1
    755c:	a1 09       	sbc	r26, r1
    755e:	b1 09       	sbc	r27, r1
    7560:	c0 f7       	brcc	.-16     	; 0x7552 <i2c_readNak+0xe>
    7562:	04 c0       	rjmp	.+8      	; 0x756c <i2c_readNak+0x28>
	if(i2c_timer == 0)
    7564:	89 2b       	or	r24, r25
    7566:	8a 2b       	or	r24, r26
    7568:	8b 2b       	or	r24, r27
    756a:	19 f0       	breq	.+6      	; 0x7572 <i2c_readNak+0x2e>
		return 0;
	
    return TWDR;
    756c:	80 91 bb 00 	lds	r24, 0x00BB
    7570:	08 95       	ret

	TWCR = (1<<TWINT) | (1<<TWEN);
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 0;
    7572:	80 e0       	ldi	r24, 0x00	; 0
	
    return TWDR;

}/* i2c_readNak */
    7574:	08 95       	ret

00007576 <init_uart>:
#define BAUD_PRESCALE_SPEKTRUM ((F_CPU + USART_BAUDRATE_SPEKTRUM * 8L) / (USART_BAUDRATE_SPEKTRUM * 16L) - 1) // Default RX rate for Spektrum

// Initialise UART with adjusted bitrate
void init_uart(void)
{
	cli();								// Atmel wants global interrupts disabled when changing UART setup on the fly
    7576:	f8 94       	cli
	
	UCSR0B &= ~(1 << RXCIE0);			// Disable serial interrupt
    7578:	80 91 c1 00 	lds	r24, 0x00C1
    757c:	8f 77       	andi	r24, 0x7F	; 127
    757e:	80 93 c1 00 	sts	0x00C1, r24

	while (UCSR0A & (1 << RXC0))		// Make sure there is nothing in the RX0 reg
    7582:	80 91 c0 00 	lds	r24, 0x00C0
    7586:	87 ff       	sbrs	r24, 7
    7588:	05 c0       	rjmp	.+10     	; 0x7594 <init_uart+0x1e>
	{
		UCSR0C = UDR0;					// So as not to annoy Studio 6, use UCSR0C as a temp erg until UDR0 empty. Sorry, UCSR0C...
    758a:	80 91 c6 00 	lds	r24, 0x00C6
    758e:	80 93 c2 00 	sts	0x00C2, r24
    7592:	f7 cf       	rjmp	.-18     	; 0x7582 <init_uart+0xc>
	}
	
	// Reset UART regs to a known state
	UCSR0A = 0; // U2X = 0, no master mode, flags cleared 
    7594:	10 92 c0 00 	sts	0x00C0, r1
	UCSR0B = 0; // Clear flags, disable tx/rx, 8 bits
    7598:	10 92 c1 00 	sts	0x00C1, r1
	UCSR0C = 6; // 8N1
    759c:	86 e0       	ldi	r24, 0x06	; 6
    759e:	80 93 c2 00 	sts	0x00C2, r24

	switch (Config.RxMode)
    75a2:	80 91 a7 05 	lds	r24, 0x05A7
    75a6:	82 30       	cpi	r24, 0x02	; 2
    75a8:	09 f1       	breq	.+66     	; 0x75ec <init_uart+0x76>
    75aa:	34 f4       	brge	.+12     	; 0x75b8 <init_uart+0x42>
    75ac:	87 fd       	sbrc	r24, 7
    75ae:	41 c0       	rjmp	.+130    	; 0x7632 <init_uart+0xbc>
			UCSR0B |=  (1 << RXCIE0);					// Enable serial interrupt
			break;

		case CPPM_MODE:
		case PWM:
			UCSR0B &= 	~(1 << RXEN0);					// Disable receiver in PWM and CPPM modes
    75b0:	80 91 c1 00 	lds	r24, 0x00C1
    75b4:	8f 7e       	andi	r24, 0xEF	; 239
    75b6:	3b c0       	rjmp	.+118    	; 0x762e <init_uart+0xb8>
	// Reset UART regs to a known state
	UCSR0A = 0; // U2X = 0, no master mode, flags cleared 
	UCSR0B = 0; // Clear flags, disable tx/rx, 8 bits
	UCSR0C = 6; // 8N1

	switch (Config.RxMode)
    75b8:	83 30       	cpi	r24, 0x03	; 3
    75ba:	d9 f5       	brne	.+118    	; 0x7632 <init_uart+0xbc>
			UCSR0B |=  (1 << RXCIE0);					// Enable serial interrupt
			break;

		// Spektrum 8N1 (8 data bits / No parity / 1 stop bit / 115.2Kbps)
		case SPEKTRUM: 	
			UCSR0A &=  ~(1 << U2X0);					// Clear the 2x flag
    75bc:	80 91 c0 00 	lds	r24, 0x00C0
    75c0:	8d 7f       	andi	r24, 0xFD	; 253
    75c2:	80 93 c0 00 	sts	0x00C0, r24
			UBRR0H  =  (BAUD_PRESCALE_SPEKTRUM >> 8); 	// Actual = 113636, Error = -1.36%
    75c6:	10 92 c5 00 	sts	0x00C5, r1
			UBRR0L  =   BAUD_PRESCALE_SPEKTRUM & 0xff;	// 0x0A (10.35)	
    75ca:	8a e0       	ldi	r24, 0x0A	; 10
    75cc:	80 93 c4 00 	sts	0x00C4, r24
			UCSR0B |= 	(1 << RXEN0);					// Enable receiver
    75d0:	80 91 c1 00 	lds	r24, 0x00C1
    75d4:	80 61       	ori	r24, 0x10	; 16
    75d6:	80 93 c1 00 	sts	0x00C1, r24
			UCSR0C &=  ~(1 << USBS0); 					// 1 stop bit
    75da:	80 91 c2 00 	lds	r24, 0x00C2
    75de:	87 7f       	andi	r24, 0xF7	; 247
    75e0:	80 93 c2 00 	sts	0x00C2, r24
			UCSR0C &=  ~(1 << UPM00) | 					// No parity 
    75e4:	80 91 c2 00 	lds	r24, 0x00C2
    75e8:	8f 7e       	andi	r24, 0xEF	; 239
    75ea:	1c c0       	rjmp	.+56     	; 0x7624 <init_uart+0xae>

	switch (Config.RxMode)
	{
		// Futaba S-Bus 8E2 (8 data bits / Even parity / 2 stop bits / 100Kbps)
		case SBUS: 		
			UCSR0A |=  (1 << U2X0);						// Need to set the 2x flag
    75ec:	80 91 c0 00 	lds	r24, 0x00C0
    75f0:	82 60       	ori	r24, 0x02	; 2
    75f2:	80 93 c0 00 	sts	0x00C0, r24
			UBRR0H  = (BAUD_PRESCALE_SBUS >> 8);  		// Actual = 100000 , Error = 0%	
    75f6:	10 92 c5 00 	sts	0x00C5, r1
			UBRR0L  =  BAUD_PRESCALE_SBUS & 0xff;		// 0x18 (24)
    75fa:	88 e1       	ldi	r24, 0x18	; 24
    75fc:	80 93 c4 00 	sts	0x00C4, r24
			UCSR0B |=  (1 << RXEN0);					// Enable receiver
    7600:	80 91 c1 00 	lds	r24, 0x00C1
    7604:	80 61       	ori	r24, 0x10	; 16
    7606:	80 93 c1 00 	sts	0x00C1, r24
			UCSR0C |=  (1 << USBS0); 					// 2 stop bits
    760a:	80 91 c2 00 	lds	r24, 0x00C2
    760e:	88 60       	ori	r24, 0x08	; 8
    7610:	80 93 c2 00 	sts	0x00C2, r24
			UCSR0C &= ~(1 << UPM00); 					// Even parity 
    7614:	80 91 c2 00 	lds	r24, 0x00C2
    7618:	8f 7e       	andi	r24, 0xEF	; 239
    761a:	80 93 c2 00 	sts	0x00C2, r24
			UCSR0C |=  (1 << UPM01); 
    761e:	80 91 c2 00 	lds	r24, 0x00C2
    7622:	80 62       	ori	r24, 0x20	; 32
			UCSR0A &=  ~(1 << U2X0);					// Clear the 2x flag
			UBRR0H  =  (BAUD_PRESCALE_SPEKTRUM >> 8); 	// Actual = 113636, Error = -1.36%
			UBRR0L  =   BAUD_PRESCALE_SPEKTRUM & 0xff;	// 0x0A (10.35)	
			UCSR0B |= 	(1 << RXEN0);					// Enable receiver
			UCSR0C &=  ~(1 << USBS0); 					// 1 stop bit
			UCSR0C &=  ~(1 << UPM00) | 					// No parity 
    7624:	80 93 c2 00 	sts	0x00C2, r24
						(1 << UPM01); 
			UCSR0B |=  (1 << RXCIE0);					// Enable serial interrupt
    7628:	80 91 c1 00 	lds	r24, 0x00C1
    762c:	80 68       	ori	r24, 0x80	; 128
			break;

		case CPPM_MODE:
		case PWM:
			UCSR0B &= 	~(1 << RXEN0);					// Disable receiver in PWM and CPPM modes
    762e:	80 93 c1 00 	sts	0x00C1, r24
		default:
			break;
	}

	// Re-enable interrupts
	sei();
    7632:	78 94       	sei
    7634:	08 95       	ret

00007636 <GetVbat>:

uint16_t GetVbat(void)				// Get battery voltage (VBAT on ADC3)
{
	uint16_t	vBat;				// Battery voltage
		
	read_adc(AIN_VBAT0);				// Multiplication factor = (Display volts / 1024) / (Vbat / 11 / Vref)
    7636:	83 e0       	ldi	r24, 0x03	; 3
    7638:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <read_adc>
	// For Vref = 2.45V, Multiplication factor = 2.632
	// For Vref = 2.305V, Multiplication factor = approx 2.5
	// An input voltage of 10V will results in a value of 999.
	// This means that the number represents units of 10mV.

	vBat = ADCW;
    763c:	20 91 78 00 	lds	r18, 0x0078
    7640:	30 91 79 00 	lds	r19, 0x0079

#ifdef KK21
	// Multiply by 2.500
	// 2 + 1/2
	vBat = (vBat << 1) + (vBat >> 1); // Multiply by 2.500
    7644:	c9 01       	movw	r24, r18
    7646:	88 0f       	add	r24, r24
    7648:	99 1f       	adc	r25, r25
    764a:	36 95       	lsr	r19
    764c:	27 95       	ror	r18
	// 2 + 1/2 + 1/8 + 1/128 :)
	vBat = (vBat << 1) + (vBat >> 1) + (vBat >> 3) + (vBat >> 7); // Multiply by 2.633
#endif

	return vBat;
}
    764e:	82 0f       	add	r24, r18
    7650:	93 1f       	adc	r25, r19
    7652:	08 95       	ret

00007654 <__subsf3>:
    7654:	50 58       	subi	r21, 0x80	; 128

00007656 <__addsf3>:
    7656:	bb 27       	eor	r27, r27
    7658:	aa 27       	eor	r26, r26
    765a:	0e d0       	rcall	.+28     	; 0x7678 <__addsf3x>
    765c:	c2 c1       	rjmp	.+900    	; 0x79e2 <__fp_round>
    765e:	b3 d1       	rcall	.+870    	; 0x79c6 <__fp_pscA>
    7660:	30 f0       	brcs	.+12     	; 0x766e <__addsf3+0x18>
    7662:	b8 d1       	rcall	.+880    	; 0x79d4 <__fp_pscB>
    7664:	20 f0       	brcs	.+8      	; 0x766e <__addsf3+0x18>
    7666:	31 f4       	brne	.+12     	; 0x7674 <__addsf3+0x1e>
    7668:	9f 3f       	cpi	r25, 0xFF	; 255
    766a:	11 f4       	brne	.+4      	; 0x7670 <__addsf3+0x1a>
    766c:	1e f4       	brtc	.+6      	; 0x7674 <__addsf3+0x1e>
    766e:	83 c1       	rjmp	.+774    	; 0x7976 <__fp_nan>
    7670:	0e f4       	brtc	.+2      	; 0x7674 <__addsf3+0x1e>
    7672:	e0 95       	com	r30
    7674:	e7 fb       	bst	r30, 7
    7676:	79 c1       	rjmp	.+754    	; 0x796a <__fp_inf>

00007678 <__addsf3x>:
    7678:	e9 2f       	mov	r30, r25
    767a:	c4 d1       	rcall	.+904    	; 0x7a04 <__fp_split3>
    767c:	80 f3       	brcs	.-32     	; 0x765e <__addsf3+0x8>
    767e:	ba 17       	cp	r27, r26
    7680:	62 07       	cpc	r22, r18
    7682:	73 07       	cpc	r23, r19
    7684:	84 07       	cpc	r24, r20
    7686:	95 07       	cpc	r25, r21
    7688:	18 f0       	brcs	.+6      	; 0x7690 <__addsf3x+0x18>
    768a:	71 f4       	brne	.+28     	; 0x76a8 <__addsf3x+0x30>
    768c:	9e f5       	brtc	.+102    	; 0x76f4 <__addsf3x+0x7c>
    768e:	dc c1       	rjmp	.+952    	; 0x7a48 <__fp_zero>
    7690:	0e f4       	brtc	.+2      	; 0x7694 <__addsf3x+0x1c>
    7692:	e0 95       	com	r30
    7694:	0b 2e       	mov	r0, r27
    7696:	ba 2f       	mov	r27, r26
    7698:	a0 2d       	mov	r26, r0
    769a:	0b 01       	movw	r0, r22
    769c:	b9 01       	movw	r22, r18
    769e:	90 01       	movw	r18, r0
    76a0:	0c 01       	movw	r0, r24
    76a2:	ca 01       	movw	r24, r20
    76a4:	a0 01       	movw	r20, r0
    76a6:	11 24       	eor	r1, r1
    76a8:	ff 27       	eor	r31, r31
    76aa:	59 1b       	sub	r21, r25
    76ac:	99 f0       	breq	.+38     	; 0x76d4 <__addsf3x+0x5c>
    76ae:	59 3f       	cpi	r21, 0xF9	; 249
    76b0:	50 f4       	brcc	.+20     	; 0x76c6 <__addsf3x+0x4e>
    76b2:	50 3e       	cpi	r21, 0xE0	; 224
    76b4:	68 f1       	brcs	.+90     	; 0x7710 <__addsf3x+0x98>
    76b6:	1a 16       	cp	r1, r26
    76b8:	f0 40       	sbci	r31, 0x00	; 0
    76ba:	a2 2f       	mov	r26, r18
    76bc:	23 2f       	mov	r18, r19
    76be:	34 2f       	mov	r19, r20
    76c0:	44 27       	eor	r20, r20
    76c2:	58 5f       	subi	r21, 0xF8	; 248
    76c4:	f3 cf       	rjmp	.-26     	; 0x76ac <__addsf3x+0x34>
    76c6:	46 95       	lsr	r20
    76c8:	37 95       	ror	r19
    76ca:	27 95       	ror	r18
    76cc:	a7 95       	ror	r26
    76ce:	f0 40       	sbci	r31, 0x00	; 0
    76d0:	53 95       	inc	r21
    76d2:	c9 f7       	brne	.-14     	; 0x76c6 <__addsf3x+0x4e>
    76d4:	7e f4       	brtc	.+30     	; 0x76f4 <__addsf3x+0x7c>
    76d6:	1f 16       	cp	r1, r31
    76d8:	ba 0b       	sbc	r27, r26
    76da:	62 0b       	sbc	r22, r18
    76dc:	73 0b       	sbc	r23, r19
    76de:	84 0b       	sbc	r24, r20
    76e0:	ba f0       	brmi	.+46     	; 0x7710 <__addsf3x+0x98>
    76e2:	91 50       	subi	r25, 0x01	; 1
    76e4:	a1 f0       	breq	.+40     	; 0x770e <__addsf3x+0x96>
    76e6:	ff 0f       	add	r31, r31
    76e8:	bb 1f       	adc	r27, r27
    76ea:	66 1f       	adc	r22, r22
    76ec:	77 1f       	adc	r23, r23
    76ee:	88 1f       	adc	r24, r24
    76f0:	c2 f7       	brpl	.-16     	; 0x76e2 <__addsf3x+0x6a>
    76f2:	0e c0       	rjmp	.+28     	; 0x7710 <__addsf3x+0x98>
    76f4:	ba 0f       	add	r27, r26
    76f6:	62 1f       	adc	r22, r18
    76f8:	73 1f       	adc	r23, r19
    76fa:	84 1f       	adc	r24, r20
    76fc:	48 f4       	brcc	.+18     	; 0x7710 <__addsf3x+0x98>
    76fe:	87 95       	ror	r24
    7700:	77 95       	ror	r23
    7702:	67 95       	ror	r22
    7704:	b7 95       	ror	r27
    7706:	f7 95       	ror	r31
    7708:	9e 3f       	cpi	r25, 0xFE	; 254
    770a:	08 f0       	brcs	.+2      	; 0x770e <__addsf3x+0x96>
    770c:	b3 cf       	rjmp	.-154    	; 0x7674 <__addsf3+0x1e>
    770e:	93 95       	inc	r25
    7710:	88 0f       	add	r24, r24
    7712:	08 f0       	brcs	.+2      	; 0x7716 <__addsf3x+0x9e>
    7714:	99 27       	eor	r25, r25
    7716:	ee 0f       	add	r30, r30
    7718:	97 95       	ror	r25
    771a:	87 95       	ror	r24
    771c:	08 95       	ret

0000771e <atan>:
    771e:	df 93       	push	r29
    7720:	dd 27       	eor	r29, r29
    7722:	b9 2f       	mov	r27, r25
    7724:	bf 77       	andi	r27, 0x7F	; 127
    7726:	40 e8       	ldi	r20, 0x80	; 128
    7728:	5f e3       	ldi	r21, 0x3F	; 63
    772a:	16 16       	cp	r1, r22
    772c:	17 06       	cpc	r1, r23
    772e:	48 07       	cpc	r20, r24
    7730:	5b 07       	cpc	r21, r27
    7732:	10 f4       	brcc	.+4      	; 0x7738 <atan+0x1a>
    7734:	d9 2f       	mov	r29, r25
    7736:	93 d1       	rcall	.+806    	; 0x7a5e <inverse>
    7738:	9f 93       	push	r25
    773a:	8f 93       	push	r24
    773c:	7f 93       	push	r23
    773e:	6f 93       	push	r22
    7740:	3a d2       	rcall	.+1140   	; 0x7bb6 <square>
    7742:	e2 ea       	ldi	r30, 0xA2	; 162
    7744:	f0 e0       	ldi	r31, 0x00	; 0
    7746:	1a d1       	rcall	.+564    	; 0x797c <__fp_powser>
    7748:	4c d1       	rcall	.+664    	; 0x79e2 <__fp_round>
    774a:	2f 91       	pop	r18
    774c:	3f 91       	pop	r19
    774e:	4f 91       	pop	r20
    7750:	5f 91       	pop	r21
    7752:	98 d1       	rcall	.+816    	; 0x7a84 <__mulsf3x>
    7754:	dd 23       	and	r29, r29
    7756:	49 f0       	breq	.+18     	; 0x776a <atan+0x4c>
    7758:	90 58       	subi	r25, 0x80	; 128
    775a:	a2 ea       	ldi	r26, 0xA2	; 162
    775c:	2a ed       	ldi	r18, 0xDA	; 218
    775e:	3f e0       	ldi	r19, 0x0F	; 15
    7760:	49 ec       	ldi	r20, 0xC9	; 201
    7762:	5f e3       	ldi	r21, 0x3F	; 63
    7764:	d0 78       	andi	r29, 0x80	; 128
    7766:	5d 27       	eor	r21, r29
    7768:	87 df       	rcall	.-242    	; 0x7678 <__addsf3x>
    776a:	df 91       	pop	r29
    776c:	3a c1       	rjmp	.+628    	; 0x79e2 <__fp_round>

0000776e <__cmpsf2>:
    776e:	d9 d0       	rcall	.+434    	; 0x7922 <__fp_cmp>
    7770:	08 f4       	brcc	.+2      	; 0x7774 <__cmpsf2+0x6>
    7772:	81 e0       	ldi	r24, 0x01	; 1
    7774:	08 95       	ret

00007776 <__divsf3>:
    7776:	0c d0       	rcall	.+24     	; 0x7790 <__divsf3x>
    7778:	34 c1       	rjmp	.+616    	; 0x79e2 <__fp_round>
    777a:	2c d1       	rcall	.+600    	; 0x79d4 <__fp_pscB>
    777c:	40 f0       	brcs	.+16     	; 0x778e <__divsf3+0x18>
    777e:	23 d1       	rcall	.+582    	; 0x79c6 <__fp_pscA>
    7780:	30 f0       	brcs	.+12     	; 0x778e <__divsf3+0x18>
    7782:	21 f4       	brne	.+8      	; 0x778c <__divsf3+0x16>
    7784:	5f 3f       	cpi	r21, 0xFF	; 255
    7786:	19 f0       	breq	.+6      	; 0x778e <__divsf3+0x18>
    7788:	f0 c0       	rjmp	.+480    	; 0x796a <__fp_inf>
    778a:	51 11       	cpse	r21, r1
    778c:	5e c1       	rjmp	.+700    	; 0x7a4a <__fp_szero>
    778e:	f3 c0       	rjmp	.+486    	; 0x7976 <__fp_nan>

00007790 <__divsf3x>:
    7790:	39 d1       	rcall	.+626    	; 0x7a04 <__fp_split3>
    7792:	98 f3       	brcs	.-26     	; 0x777a <__divsf3+0x4>

00007794 <__divsf3_pse>:
    7794:	99 23       	and	r25, r25
    7796:	c9 f3       	breq	.-14     	; 0x778a <__divsf3+0x14>
    7798:	55 23       	and	r21, r21
    779a:	b1 f3       	breq	.-20     	; 0x7788 <__divsf3+0x12>
    779c:	95 1b       	sub	r25, r21
    779e:	55 0b       	sbc	r21, r21
    77a0:	bb 27       	eor	r27, r27
    77a2:	aa 27       	eor	r26, r26
    77a4:	62 17       	cp	r22, r18
    77a6:	73 07       	cpc	r23, r19
    77a8:	84 07       	cpc	r24, r20
    77aa:	38 f0       	brcs	.+14     	; 0x77ba <__divsf3_pse+0x26>
    77ac:	9f 5f       	subi	r25, 0xFF	; 255
    77ae:	5f 4f       	sbci	r21, 0xFF	; 255
    77b0:	22 0f       	add	r18, r18
    77b2:	33 1f       	adc	r19, r19
    77b4:	44 1f       	adc	r20, r20
    77b6:	aa 1f       	adc	r26, r26
    77b8:	a9 f3       	breq	.-22     	; 0x77a4 <__divsf3_pse+0x10>
    77ba:	33 d0       	rcall	.+102    	; 0x7822 <__divsf3_pse+0x8e>
    77bc:	0e 2e       	mov	r0, r30
    77be:	3a f0       	brmi	.+14     	; 0x77ce <__divsf3_pse+0x3a>
    77c0:	e0 e8       	ldi	r30, 0x80	; 128
    77c2:	30 d0       	rcall	.+96     	; 0x7824 <__divsf3_pse+0x90>
    77c4:	91 50       	subi	r25, 0x01	; 1
    77c6:	50 40       	sbci	r21, 0x00	; 0
    77c8:	e6 95       	lsr	r30
    77ca:	00 1c       	adc	r0, r0
    77cc:	ca f7       	brpl	.-14     	; 0x77c0 <__divsf3_pse+0x2c>
    77ce:	29 d0       	rcall	.+82     	; 0x7822 <__divsf3_pse+0x8e>
    77d0:	fe 2f       	mov	r31, r30
    77d2:	27 d0       	rcall	.+78     	; 0x7822 <__divsf3_pse+0x8e>
    77d4:	66 0f       	add	r22, r22
    77d6:	77 1f       	adc	r23, r23
    77d8:	88 1f       	adc	r24, r24
    77da:	bb 1f       	adc	r27, r27
    77dc:	26 17       	cp	r18, r22
    77de:	37 07       	cpc	r19, r23
    77e0:	48 07       	cpc	r20, r24
    77e2:	ab 07       	cpc	r26, r27
    77e4:	b0 e8       	ldi	r27, 0x80	; 128
    77e6:	09 f0       	breq	.+2      	; 0x77ea <__divsf3_pse+0x56>
    77e8:	bb 0b       	sbc	r27, r27
    77ea:	80 2d       	mov	r24, r0
    77ec:	bf 01       	movw	r22, r30
    77ee:	ff 27       	eor	r31, r31
    77f0:	93 58       	subi	r25, 0x83	; 131
    77f2:	5f 4f       	sbci	r21, 0xFF	; 255
    77f4:	2a f0       	brmi	.+10     	; 0x7800 <__divsf3_pse+0x6c>
    77f6:	9e 3f       	cpi	r25, 0xFE	; 254
    77f8:	51 05       	cpc	r21, r1
    77fa:	68 f0       	brcs	.+26     	; 0x7816 <__divsf3_pse+0x82>
    77fc:	b6 c0       	rjmp	.+364    	; 0x796a <__fp_inf>
    77fe:	25 c1       	rjmp	.+586    	; 0x7a4a <__fp_szero>
    7800:	5f 3f       	cpi	r21, 0xFF	; 255
    7802:	ec f3       	brlt	.-6      	; 0x77fe <__divsf3_pse+0x6a>
    7804:	98 3e       	cpi	r25, 0xE8	; 232
    7806:	dc f3       	brlt	.-10     	; 0x77fe <__divsf3_pse+0x6a>
    7808:	86 95       	lsr	r24
    780a:	77 95       	ror	r23
    780c:	67 95       	ror	r22
    780e:	b7 95       	ror	r27
    7810:	f7 95       	ror	r31
    7812:	9f 5f       	subi	r25, 0xFF	; 255
    7814:	c9 f7       	brne	.-14     	; 0x7808 <__divsf3_pse+0x74>
    7816:	88 0f       	add	r24, r24
    7818:	91 1d       	adc	r25, r1
    781a:	96 95       	lsr	r25
    781c:	87 95       	ror	r24
    781e:	97 f9       	bld	r25, 7
    7820:	08 95       	ret
    7822:	e1 e0       	ldi	r30, 0x01	; 1
    7824:	66 0f       	add	r22, r22
    7826:	77 1f       	adc	r23, r23
    7828:	88 1f       	adc	r24, r24
    782a:	bb 1f       	adc	r27, r27
    782c:	62 17       	cp	r22, r18
    782e:	73 07       	cpc	r23, r19
    7830:	84 07       	cpc	r24, r20
    7832:	ba 07       	cpc	r27, r26
    7834:	20 f0       	brcs	.+8      	; 0x783e <__divsf3_pse+0xaa>
    7836:	62 1b       	sub	r22, r18
    7838:	73 0b       	sbc	r23, r19
    783a:	84 0b       	sbc	r24, r20
    783c:	ba 0b       	sbc	r27, r26
    783e:	ee 1f       	adc	r30, r30
    7840:	88 f7       	brcc	.-30     	; 0x7824 <__divsf3_pse+0x90>
    7842:	e0 95       	com	r30
    7844:	08 95       	ret

00007846 <__fixsfsi>:
    7846:	04 d0       	rcall	.+8      	; 0x7850 <__fixunssfsi>
    7848:	68 94       	set
    784a:	b1 11       	cpse	r27, r1
    784c:	fe c0       	rjmp	.+508    	; 0x7a4a <__fp_szero>
    784e:	08 95       	ret

00007850 <__fixunssfsi>:
    7850:	e1 d0       	rcall	.+450    	; 0x7a14 <__fp_splitA>
    7852:	88 f0       	brcs	.+34     	; 0x7876 <__fixunssfsi+0x26>
    7854:	9f 57       	subi	r25, 0x7F	; 127
    7856:	90 f0       	brcs	.+36     	; 0x787c <__fixunssfsi+0x2c>
    7858:	b9 2f       	mov	r27, r25
    785a:	99 27       	eor	r25, r25
    785c:	b7 51       	subi	r27, 0x17	; 23
    785e:	a0 f0       	brcs	.+40     	; 0x7888 <__fixunssfsi+0x38>
    7860:	d1 f0       	breq	.+52     	; 0x7896 <__fixunssfsi+0x46>
    7862:	66 0f       	add	r22, r22
    7864:	77 1f       	adc	r23, r23
    7866:	88 1f       	adc	r24, r24
    7868:	99 1f       	adc	r25, r25
    786a:	1a f0       	brmi	.+6      	; 0x7872 <__fixunssfsi+0x22>
    786c:	ba 95       	dec	r27
    786e:	c9 f7       	brne	.-14     	; 0x7862 <__fixunssfsi+0x12>
    7870:	12 c0       	rjmp	.+36     	; 0x7896 <__fixunssfsi+0x46>
    7872:	b1 30       	cpi	r27, 0x01	; 1
    7874:	81 f0       	breq	.+32     	; 0x7896 <__fixunssfsi+0x46>
    7876:	e8 d0       	rcall	.+464    	; 0x7a48 <__fp_zero>
    7878:	b1 e0       	ldi	r27, 0x01	; 1
    787a:	08 95       	ret
    787c:	e5 c0       	rjmp	.+458    	; 0x7a48 <__fp_zero>
    787e:	67 2f       	mov	r22, r23
    7880:	78 2f       	mov	r23, r24
    7882:	88 27       	eor	r24, r24
    7884:	b8 5f       	subi	r27, 0xF8	; 248
    7886:	39 f0       	breq	.+14     	; 0x7896 <__fixunssfsi+0x46>
    7888:	b9 3f       	cpi	r27, 0xF9	; 249
    788a:	cc f3       	brlt	.-14     	; 0x787e <__fixunssfsi+0x2e>
    788c:	86 95       	lsr	r24
    788e:	77 95       	ror	r23
    7890:	67 95       	ror	r22
    7892:	b3 95       	inc	r27
    7894:	d9 f7       	brne	.-10     	; 0x788c <__fixunssfsi+0x3c>
    7896:	3e f4       	brtc	.+14     	; 0x78a6 <__fixunssfsi+0x56>
    7898:	90 95       	com	r25
    789a:	80 95       	com	r24
    789c:	70 95       	com	r23
    789e:	61 95       	neg	r22
    78a0:	7f 4f       	sbci	r23, 0xFF	; 255
    78a2:	8f 4f       	sbci	r24, 0xFF	; 255
    78a4:	9f 4f       	sbci	r25, 0xFF	; 255
    78a6:	08 95       	ret

000078a8 <__floatunsisf>:
    78a8:	e8 94       	clt
    78aa:	09 c0       	rjmp	.+18     	; 0x78be <__floatsisf+0x12>

000078ac <__floatsisf>:
    78ac:	97 fb       	bst	r25, 7
    78ae:	3e f4       	brtc	.+14     	; 0x78be <__floatsisf+0x12>
    78b0:	90 95       	com	r25
    78b2:	80 95       	com	r24
    78b4:	70 95       	com	r23
    78b6:	61 95       	neg	r22
    78b8:	7f 4f       	sbci	r23, 0xFF	; 255
    78ba:	8f 4f       	sbci	r24, 0xFF	; 255
    78bc:	9f 4f       	sbci	r25, 0xFF	; 255
    78be:	99 23       	and	r25, r25
    78c0:	a9 f0       	breq	.+42     	; 0x78ec <__floatsisf+0x40>
    78c2:	f9 2f       	mov	r31, r25
    78c4:	96 e9       	ldi	r25, 0x96	; 150
    78c6:	bb 27       	eor	r27, r27
    78c8:	93 95       	inc	r25
    78ca:	f6 95       	lsr	r31
    78cc:	87 95       	ror	r24
    78ce:	77 95       	ror	r23
    78d0:	67 95       	ror	r22
    78d2:	b7 95       	ror	r27
    78d4:	f1 11       	cpse	r31, r1
    78d6:	f8 cf       	rjmp	.-16     	; 0x78c8 <__floatsisf+0x1c>
    78d8:	fa f4       	brpl	.+62     	; 0x7918 <__floatsisf+0x6c>
    78da:	bb 0f       	add	r27, r27
    78dc:	11 f4       	brne	.+4      	; 0x78e2 <__floatsisf+0x36>
    78de:	60 ff       	sbrs	r22, 0
    78e0:	1b c0       	rjmp	.+54     	; 0x7918 <__floatsisf+0x6c>
    78e2:	6f 5f       	subi	r22, 0xFF	; 255
    78e4:	7f 4f       	sbci	r23, 0xFF	; 255
    78e6:	8f 4f       	sbci	r24, 0xFF	; 255
    78e8:	9f 4f       	sbci	r25, 0xFF	; 255
    78ea:	16 c0       	rjmp	.+44     	; 0x7918 <__floatsisf+0x6c>
    78ec:	88 23       	and	r24, r24
    78ee:	11 f0       	breq	.+4      	; 0x78f4 <__floatsisf+0x48>
    78f0:	96 e9       	ldi	r25, 0x96	; 150
    78f2:	11 c0       	rjmp	.+34     	; 0x7916 <__floatsisf+0x6a>
    78f4:	77 23       	and	r23, r23
    78f6:	21 f0       	breq	.+8      	; 0x7900 <__floatsisf+0x54>
    78f8:	9e e8       	ldi	r25, 0x8E	; 142
    78fa:	87 2f       	mov	r24, r23
    78fc:	76 2f       	mov	r23, r22
    78fe:	05 c0       	rjmp	.+10     	; 0x790a <__floatsisf+0x5e>
    7900:	66 23       	and	r22, r22
    7902:	71 f0       	breq	.+28     	; 0x7920 <__floatsisf+0x74>
    7904:	96 e8       	ldi	r25, 0x86	; 134
    7906:	86 2f       	mov	r24, r22
    7908:	70 e0       	ldi	r23, 0x00	; 0
    790a:	60 e0       	ldi	r22, 0x00	; 0
    790c:	2a f0       	brmi	.+10     	; 0x7918 <__floatsisf+0x6c>
    790e:	9a 95       	dec	r25
    7910:	66 0f       	add	r22, r22
    7912:	77 1f       	adc	r23, r23
    7914:	88 1f       	adc	r24, r24
    7916:	da f7       	brpl	.-10     	; 0x790e <__floatsisf+0x62>
    7918:	88 0f       	add	r24, r24
    791a:	96 95       	lsr	r25
    791c:	87 95       	ror	r24
    791e:	97 f9       	bld	r25, 7
    7920:	08 95       	ret

00007922 <__fp_cmp>:
    7922:	99 0f       	add	r25, r25
    7924:	00 08       	sbc	r0, r0
    7926:	55 0f       	add	r21, r21
    7928:	aa 0b       	sbc	r26, r26
    792a:	e0 e8       	ldi	r30, 0x80	; 128
    792c:	fe ef       	ldi	r31, 0xFE	; 254
    792e:	16 16       	cp	r1, r22
    7930:	17 06       	cpc	r1, r23
    7932:	e8 07       	cpc	r30, r24
    7934:	f9 07       	cpc	r31, r25
    7936:	c0 f0       	brcs	.+48     	; 0x7968 <__fp_cmp+0x46>
    7938:	12 16       	cp	r1, r18
    793a:	13 06       	cpc	r1, r19
    793c:	e4 07       	cpc	r30, r20
    793e:	f5 07       	cpc	r31, r21
    7940:	98 f0       	brcs	.+38     	; 0x7968 <__fp_cmp+0x46>
    7942:	62 1b       	sub	r22, r18
    7944:	73 0b       	sbc	r23, r19
    7946:	84 0b       	sbc	r24, r20
    7948:	95 0b       	sbc	r25, r21
    794a:	39 f4       	brne	.+14     	; 0x795a <__fp_cmp+0x38>
    794c:	0a 26       	eor	r0, r26
    794e:	61 f0       	breq	.+24     	; 0x7968 <__fp_cmp+0x46>
    7950:	23 2b       	or	r18, r19
    7952:	24 2b       	or	r18, r20
    7954:	25 2b       	or	r18, r21
    7956:	21 f4       	brne	.+8      	; 0x7960 <__fp_cmp+0x3e>
    7958:	08 95       	ret
    795a:	0a 26       	eor	r0, r26
    795c:	09 f4       	brne	.+2      	; 0x7960 <__fp_cmp+0x3e>
    795e:	a1 40       	sbci	r26, 0x01	; 1
    7960:	a6 95       	lsr	r26
    7962:	8f ef       	ldi	r24, 0xFF	; 255
    7964:	81 1d       	adc	r24, r1
    7966:	81 1d       	adc	r24, r1
    7968:	08 95       	ret

0000796a <__fp_inf>:
    796a:	97 f9       	bld	r25, 7
    796c:	9f 67       	ori	r25, 0x7F	; 127
    796e:	80 e8       	ldi	r24, 0x80	; 128
    7970:	70 e0       	ldi	r23, 0x00	; 0
    7972:	60 e0       	ldi	r22, 0x00	; 0
    7974:	08 95       	ret

00007976 <__fp_nan>:
    7976:	9f ef       	ldi	r25, 0xFF	; 255
    7978:	80 ec       	ldi	r24, 0xC0	; 192
    797a:	08 95       	ret

0000797c <__fp_powser>:
    797c:	df 93       	push	r29
    797e:	cf 93       	push	r28
    7980:	1f 93       	push	r17
    7982:	0f 93       	push	r16
    7984:	ff 92       	push	r15
    7986:	ef 92       	push	r14
    7988:	df 92       	push	r13
    798a:	7b 01       	movw	r14, r22
    798c:	8c 01       	movw	r16, r24
    798e:	68 94       	set
    7990:	05 c0       	rjmp	.+10     	; 0x799c <__fp_powser+0x20>
    7992:	da 2e       	mov	r13, r26
    7994:	ef 01       	movw	r28, r30
    7996:	76 d0       	rcall	.+236    	; 0x7a84 <__mulsf3x>
    7998:	fe 01       	movw	r30, r28
    799a:	e8 94       	clt
    799c:	a5 91       	lpm	r26, Z+
    799e:	25 91       	lpm	r18, Z+
    79a0:	35 91       	lpm	r19, Z+
    79a2:	45 91       	lpm	r20, Z+
    79a4:	55 91       	lpm	r21, Z+
    79a6:	ae f3       	brts	.-22     	; 0x7992 <__fp_powser+0x16>
    79a8:	ef 01       	movw	r28, r30
    79aa:	66 de       	rcall	.-820    	; 0x7678 <__addsf3x>
    79ac:	fe 01       	movw	r30, r28
    79ae:	97 01       	movw	r18, r14
    79b0:	a8 01       	movw	r20, r16
    79b2:	da 94       	dec	r13
    79b4:	79 f7       	brne	.-34     	; 0x7994 <__fp_powser+0x18>
    79b6:	df 90       	pop	r13
    79b8:	ef 90       	pop	r14
    79ba:	ff 90       	pop	r15
    79bc:	0f 91       	pop	r16
    79be:	1f 91       	pop	r17
    79c0:	cf 91       	pop	r28
    79c2:	df 91       	pop	r29
    79c4:	08 95       	ret

000079c6 <__fp_pscA>:
    79c6:	00 24       	eor	r0, r0
    79c8:	0a 94       	dec	r0
    79ca:	16 16       	cp	r1, r22
    79cc:	17 06       	cpc	r1, r23
    79ce:	18 06       	cpc	r1, r24
    79d0:	09 06       	cpc	r0, r25
    79d2:	08 95       	ret

000079d4 <__fp_pscB>:
    79d4:	00 24       	eor	r0, r0
    79d6:	0a 94       	dec	r0
    79d8:	12 16       	cp	r1, r18
    79da:	13 06       	cpc	r1, r19
    79dc:	14 06       	cpc	r1, r20
    79de:	05 06       	cpc	r0, r21
    79e0:	08 95       	ret

000079e2 <__fp_round>:
    79e2:	09 2e       	mov	r0, r25
    79e4:	03 94       	inc	r0
    79e6:	00 0c       	add	r0, r0
    79e8:	11 f4       	brne	.+4      	; 0x79ee <__fp_round+0xc>
    79ea:	88 23       	and	r24, r24
    79ec:	52 f0       	brmi	.+20     	; 0x7a02 <__fp_round+0x20>
    79ee:	bb 0f       	add	r27, r27
    79f0:	40 f4       	brcc	.+16     	; 0x7a02 <__fp_round+0x20>
    79f2:	bf 2b       	or	r27, r31
    79f4:	11 f4       	brne	.+4      	; 0x79fa <__fp_round+0x18>
    79f6:	60 ff       	sbrs	r22, 0
    79f8:	04 c0       	rjmp	.+8      	; 0x7a02 <__fp_round+0x20>
    79fa:	6f 5f       	subi	r22, 0xFF	; 255
    79fc:	7f 4f       	sbci	r23, 0xFF	; 255
    79fe:	8f 4f       	sbci	r24, 0xFF	; 255
    7a00:	9f 4f       	sbci	r25, 0xFF	; 255
    7a02:	08 95       	ret

00007a04 <__fp_split3>:
    7a04:	57 fd       	sbrc	r21, 7
    7a06:	90 58       	subi	r25, 0x80	; 128
    7a08:	44 0f       	add	r20, r20
    7a0a:	55 1f       	adc	r21, r21
    7a0c:	59 f0       	breq	.+22     	; 0x7a24 <__fp_splitA+0x10>
    7a0e:	5f 3f       	cpi	r21, 0xFF	; 255
    7a10:	71 f0       	breq	.+28     	; 0x7a2e <__fp_splitA+0x1a>
    7a12:	47 95       	ror	r20

00007a14 <__fp_splitA>:
    7a14:	88 0f       	add	r24, r24
    7a16:	97 fb       	bst	r25, 7
    7a18:	99 1f       	adc	r25, r25
    7a1a:	61 f0       	breq	.+24     	; 0x7a34 <__fp_splitA+0x20>
    7a1c:	9f 3f       	cpi	r25, 0xFF	; 255
    7a1e:	79 f0       	breq	.+30     	; 0x7a3e <__fp_splitA+0x2a>
    7a20:	87 95       	ror	r24
    7a22:	08 95       	ret
    7a24:	12 16       	cp	r1, r18
    7a26:	13 06       	cpc	r1, r19
    7a28:	14 06       	cpc	r1, r20
    7a2a:	55 1f       	adc	r21, r21
    7a2c:	f2 cf       	rjmp	.-28     	; 0x7a12 <__fp_split3+0xe>
    7a2e:	46 95       	lsr	r20
    7a30:	f1 df       	rcall	.-30     	; 0x7a14 <__fp_splitA>
    7a32:	08 c0       	rjmp	.+16     	; 0x7a44 <__fp_splitA+0x30>
    7a34:	16 16       	cp	r1, r22
    7a36:	17 06       	cpc	r1, r23
    7a38:	18 06       	cpc	r1, r24
    7a3a:	99 1f       	adc	r25, r25
    7a3c:	f1 cf       	rjmp	.-30     	; 0x7a20 <__fp_splitA+0xc>
    7a3e:	86 95       	lsr	r24
    7a40:	71 05       	cpc	r23, r1
    7a42:	61 05       	cpc	r22, r1
    7a44:	08 94       	sec
    7a46:	08 95       	ret

00007a48 <__fp_zero>:
    7a48:	e8 94       	clt

00007a4a <__fp_szero>:
    7a4a:	bb 27       	eor	r27, r27
    7a4c:	66 27       	eor	r22, r22
    7a4e:	77 27       	eor	r23, r23
    7a50:	cb 01       	movw	r24, r22
    7a52:	97 f9       	bld	r25, 7
    7a54:	08 95       	ret

00007a56 <__gesf2>:
    7a56:	65 df       	rcall	.-310    	; 0x7922 <__fp_cmp>
    7a58:	08 f4       	brcc	.+2      	; 0x7a5c <__gesf2+0x6>
    7a5a:	8f ef       	ldi	r24, 0xFF	; 255
    7a5c:	08 95       	ret

00007a5e <inverse>:
    7a5e:	9b 01       	movw	r18, r22
    7a60:	ac 01       	movw	r20, r24
    7a62:	60 e0       	ldi	r22, 0x00	; 0
    7a64:	70 e0       	ldi	r23, 0x00	; 0
    7a66:	80 e8       	ldi	r24, 0x80	; 128
    7a68:	9f e3       	ldi	r25, 0x3F	; 63
    7a6a:	85 ce       	rjmp	.-758    	; 0x7776 <__divsf3>

00007a6c <__mulsf3>:
    7a6c:	0b d0       	rcall	.+22     	; 0x7a84 <__mulsf3x>
    7a6e:	b9 cf       	rjmp	.-142    	; 0x79e2 <__fp_round>
    7a70:	aa df       	rcall	.-172    	; 0x79c6 <__fp_pscA>
    7a72:	28 f0       	brcs	.+10     	; 0x7a7e <__mulsf3+0x12>
    7a74:	af df       	rcall	.-162    	; 0x79d4 <__fp_pscB>
    7a76:	18 f0       	brcs	.+6      	; 0x7a7e <__mulsf3+0x12>
    7a78:	95 23       	and	r25, r21
    7a7a:	09 f0       	breq	.+2      	; 0x7a7e <__mulsf3+0x12>
    7a7c:	76 cf       	rjmp	.-276    	; 0x796a <__fp_inf>
    7a7e:	7b cf       	rjmp	.-266    	; 0x7976 <__fp_nan>
    7a80:	11 24       	eor	r1, r1
    7a82:	e3 cf       	rjmp	.-58     	; 0x7a4a <__fp_szero>

00007a84 <__mulsf3x>:
    7a84:	bf df       	rcall	.-130    	; 0x7a04 <__fp_split3>
    7a86:	a0 f3       	brcs	.-24     	; 0x7a70 <__mulsf3+0x4>

00007a88 <__mulsf3_pse>:
    7a88:	95 9f       	mul	r25, r21
    7a8a:	d1 f3       	breq	.-12     	; 0x7a80 <__mulsf3+0x14>
    7a8c:	95 0f       	add	r25, r21
    7a8e:	50 e0       	ldi	r21, 0x00	; 0
    7a90:	55 1f       	adc	r21, r21
    7a92:	62 9f       	mul	r22, r18
    7a94:	f0 01       	movw	r30, r0
    7a96:	72 9f       	mul	r23, r18
    7a98:	bb 27       	eor	r27, r27
    7a9a:	f0 0d       	add	r31, r0
    7a9c:	b1 1d       	adc	r27, r1
    7a9e:	63 9f       	mul	r22, r19
    7aa0:	aa 27       	eor	r26, r26
    7aa2:	f0 0d       	add	r31, r0
    7aa4:	b1 1d       	adc	r27, r1
    7aa6:	aa 1f       	adc	r26, r26
    7aa8:	64 9f       	mul	r22, r20
    7aaa:	66 27       	eor	r22, r22
    7aac:	b0 0d       	add	r27, r0
    7aae:	a1 1d       	adc	r26, r1
    7ab0:	66 1f       	adc	r22, r22
    7ab2:	82 9f       	mul	r24, r18
    7ab4:	22 27       	eor	r18, r18
    7ab6:	b0 0d       	add	r27, r0
    7ab8:	a1 1d       	adc	r26, r1
    7aba:	62 1f       	adc	r22, r18
    7abc:	73 9f       	mul	r23, r19
    7abe:	b0 0d       	add	r27, r0
    7ac0:	a1 1d       	adc	r26, r1
    7ac2:	62 1f       	adc	r22, r18
    7ac4:	83 9f       	mul	r24, r19
    7ac6:	a0 0d       	add	r26, r0
    7ac8:	61 1d       	adc	r22, r1
    7aca:	22 1f       	adc	r18, r18
    7acc:	74 9f       	mul	r23, r20
    7ace:	33 27       	eor	r19, r19
    7ad0:	a0 0d       	add	r26, r0
    7ad2:	61 1d       	adc	r22, r1
    7ad4:	23 1f       	adc	r18, r19
    7ad6:	84 9f       	mul	r24, r20
    7ad8:	60 0d       	add	r22, r0
    7ada:	21 1d       	adc	r18, r1
    7adc:	82 2f       	mov	r24, r18
    7ade:	76 2f       	mov	r23, r22
    7ae0:	6a 2f       	mov	r22, r26
    7ae2:	11 24       	eor	r1, r1
    7ae4:	9f 57       	subi	r25, 0x7F	; 127
    7ae6:	50 40       	sbci	r21, 0x00	; 0
    7ae8:	8a f0       	brmi	.+34     	; 0x7b0c <__mulsf3_pse+0x84>
    7aea:	e1 f0       	breq	.+56     	; 0x7b24 <__mulsf3_pse+0x9c>
    7aec:	88 23       	and	r24, r24
    7aee:	4a f0       	brmi	.+18     	; 0x7b02 <__mulsf3_pse+0x7a>
    7af0:	ee 0f       	add	r30, r30
    7af2:	ff 1f       	adc	r31, r31
    7af4:	bb 1f       	adc	r27, r27
    7af6:	66 1f       	adc	r22, r22
    7af8:	77 1f       	adc	r23, r23
    7afa:	88 1f       	adc	r24, r24
    7afc:	91 50       	subi	r25, 0x01	; 1
    7afe:	50 40       	sbci	r21, 0x00	; 0
    7b00:	a9 f7       	brne	.-22     	; 0x7aec <__mulsf3_pse+0x64>
    7b02:	9e 3f       	cpi	r25, 0xFE	; 254
    7b04:	51 05       	cpc	r21, r1
    7b06:	70 f0       	brcs	.+28     	; 0x7b24 <__mulsf3_pse+0x9c>
    7b08:	30 cf       	rjmp	.-416    	; 0x796a <__fp_inf>
    7b0a:	9f cf       	rjmp	.-194    	; 0x7a4a <__fp_szero>
    7b0c:	5f 3f       	cpi	r21, 0xFF	; 255
    7b0e:	ec f3       	brlt	.-6      	; 0x7b0a <__mulsf3_pse+0x82>
    7b10:	98 3e       	cpi	r25, 0xE8	; 232
    7b12:	dc f3       	brlt	.-10     	; 0x7b0a <__mulsf3_pse+0x82>
    7b14:	86 95       	lsr	r24
    7b16:	77 95       	ror	r23
    7b18:	67 95       	ror	r22
    7b1a:	b7 95       	ror	r27
    7b1c:	f7 95       	ror	r31
    7b1e:	e7 95       	ror	r30
    7b20:	9f 5f       	subi	r25, 0xFF	; 255
    7b22:	c1 f7       	brne	.-16     	; 0x7b14 <__mulsf3_pse+0x8c>
    7b24:	fe 2b       	or	r31, r30
    7b26:	88 0f       	add	r24, r24
    7b28:	91 1d       	adc	r25, r1
    7b2a:	96 95       	lsr	r25
    7b2c:	87 95       	ror	r24
    7b2e:	97 f9       	bld	r25, 7
    7b30:	08 95       	ret
    7b32:	11 f4       	brne	.+4      	; 0x7b38 <__mulsf3_pse+0xb0>
    7b34:	0e f4       	brtc	.+2      	; 0x7b38 <__mulsf3_pse+0xb0>
    7b36:	1f cf       	rjmp	.-450    	; 0x7976 <__fp_nan>
    7b38:	41 c0       	rjmp	.+130    	; 0x7bbc <__fp_mpack>

00007b3a <sqrt>:
    7b3a:	6c df       	rcall	.-296    	; 0x7a14 <__fp_splitA>
    7b3c:	d0 f3       	brcs	.-12     	; 0x7b32 <__mulsf3_pse+0xaa>
    7b3e:	99 23       	and	r25, r25
    7b40:	d9 f3       	breq	.-10     	; 0x7b38 <__mulsf3_pse+0xb0>
    7b42:	ce f3       	brts	.-14     	; 0x7b36 <__mulsf3_pse+0xae>
    7b44:	9f 57       	subi	r25, 0x7F	; 127
    7b46:	55 0b       	sbc	r21, r21
    7b48:	87 ff       	sbrs	r24, 7
    7b4a:	46 d0       	rcall	.+140    	; 0x7bd8 <__fp_norm2>
    7b4c:	00 24       	eor	r0, r0
    7b4e:	a0 e6       	ldi	r26, 0x60	; 96
    7b50:	40 ea       	ldi	r20, 0xA0	; 160
    7b52:	90 01       	movw	r18, r0
    7b54:	80 58       	subi	r24, 0x80	; 128
    7b56:	56 95       	lsr	r21
    7b58:	97 95       	ror	r25
    7b5a:	28 f4       	brcc	.+10     	; 0x7b66 <sqrt+0x2c>
    7b5c:	80 5c       	subi	r24, 0xC0	; 192
    7b5e:	66 0f       	add	r22, r22
    7b60:	77 1f       	adc	r23, r23
    7b62:	88 1f       	adc	r24, r24
    7b64:	20 f0       	brcs	.+8      	; 0x7b6e <sqrt+0x34>
    7b66:	26 17       	cp	r18, r22
    7b68:	37 07       	cpc	r19, r23
    7b6a:	48 07       	cpc	r20, r24
    7b6c:	30 f4       	brcc	.+12     	; 0x7b7a <sqrt+0x40>
    7b6e:	62 1b       	sub	r22, r18
    7b70:	73 0b       	sbc	r23, r19
    7b72:	84 0b       	sbc	r24, r20
    7b74:	20 29       	or	r18, r0
    7b76:	31 29       	or	r19, r1
    7b78:	4a 2b       	or	r20, r26
    7b7a:	a6 95       	lsr	r26
    7b7c:	17 94       	ror	r1
    7b7e:	07 94       	ror	r0
    7b80:	20 25       	eor	r18, r0
    7b82:	31 25       	eor	r19, r1
    7b84:	4a 27       	eor	r20, r26
    7b86:	58 f7       	brcc	.-42     	; 0x7b5e <sqrt+0x24>
    7b88:	66 0f       	add	r22, r22
    7b8a:	77 1f       	adc	r23, r23
    7b8c:	88 1f       	adc	r24, r24
    7b8e:	20 f0       	brcs	.+8      	; 0x7b98 <sqrt+0x5e>
    7b90:	26 17       	cp	r18, r22
    7b92:	37 07       	cpc	r19, r23
    7b94:	48 07       	cpc	r20, r24
    7b96:	30 f4       	brcc	.+12     	; 0x7ba4 <sqrt+0x6a>
    7b98:	62 0b       	sbc	r22, r18
    7b9a:	73 0b       	sbc	r23, r19
    7b9c:	84 0b       	sbc	r24, r20
    7b9e:	20 0d       	add	r18, r0
    7ba0:	31 1d       	adc	r19, r1
    7ba2:	41 1d       	adc	r20, r1
    7ba4:	a0 95       	com	r26
    7ba6:	81 f7       	brne	.-32     	; 0x7b88 <sqrt+0x4e>
    7ba8:	b9 01       	movw	r22, r18
    7baa:	84 2f       	mov	r24, r20
    7bac:	91 58       	subi	r25, 0x81	; 129
    7bae:	88 0f       	add	r24, r24
    7bb0:	96 95       	lsr	r25
    7bb2:	87 95       	ror	r24
    7bb4:	08 95       	ret

00007bb6 <square>:
    7bb6:	9b 01       	movw	r18, r22
    7bb8:	ac 01       	movw	r20, r24
    7bba:	58 cf       	rjmp	.-336    	; 0x7a6c <__mulsf3>

00007bbc <__fp_mpack>:
    7bbc:	9f 3f       	cpi	r25, 0xFF	; 255
    7bbe:	31 f0       	breq	.+12     	; 0x7bcc <__fp_mpack_finite+0xc>

00007bc0 <__fp_mpack_finite>:
    7bc0:	91 50       	subi	r25, 0x01	; 1
    7bc2:	20 f4       	brcc	.+8      	; 0x7bcc <__fp_mpack_finite+0xc>
    7bc4:	87 95       	ror	r24
    7bc6:	77 95       	ror	r23
    7bc8:	67 95       	ror	r22
    7bca:	b7 95       	ror	r27
    7bcc:	88 0f       	add	r24, r24
    7bce:	91 1d       	adc	r25, r1
    7bd0:	96 95       	lsr	r25
    7bd2:	87 95       	ror	r24
    7bd4:	97 f9       	bld	r25, 7
    7bd6:	08 95       	ret

00007bd8 <__fp_norm2>:
    7bd8:	91 50       	subi	r25, 0x01	; 1
    7bda:	50 40       	sbci	r21, 0x00	; 0
    7bdc:	66 0f       	add	r22, r22
    7bde:	77 1f       	adc	r23, r23
    7be0:	88 1f       	adc	r24, r24
    7be2:	d2 f7       	brpl	.-12     	; 0x7bd8 <__fp_norm2>
    7be4:	08 95       	ret

00007be6 <__udivmodhi4>:
    7be6:	aa 1b       	sub	r26, r26
    7be8:	bb 1b       	sub	r27, r27
    7bea:	51 e1       	ldi	r21, 0x11	; 17
    7bec:	07 c0       	rjmp	.+14     	; 0x7bfc <__udivmodhi4_ep>

00007bee <__udivmodhi4_loop>:
    7bee:	aa 1f       	adc	r26, r26
    7bf0:	bb 1f       	adc	r27, r27
    7bf2:	a6 17       	cp	r26, r22
    7bf4:	b7 07       	cpc	r27, r23
    7bf6:	10 f0       	brcs	.+4      	; 0x7bfc <__udivmodhi4_ep>
    7bf8:	a6 1b       	sub	r26, r22
    7bfa:	b7 0b       	sbc	r27, r23

00007bfc <__udivmodhi4_ep>:
    7bfc:	88 1f       	adc	r24, r24
    7bfe:	99 1f       	adc	r25, r25
    7c00:	5a 95       	dec	r21
    7c02:	a9 f7       	brne	.-22     	; 0x7bee <__udivmodhi4_loop>
    7c04:	80 95       	com	r24
    7c06:	90 95       	com	r25
    7c08:	bc 01       	movw	r22, r24
    7c0a:	cd 01       	movw	r24, r26
    7c0c:	08 95       	ret

00007c0e <__divmodhi4>:
    7c0e:	97 fb       	bst	r25, 7
    7c10:	07 2e       	mov	r0, r23
    7c12:	16 f4       	brtc	.+4      	; 0x7c18 <__divmodhi4+0xa>
    7c14:	00 94       	com	r0
    7c16:	07 d0       	rcall	.+14     	; 0x7c26 <__divmodhi4_neg1>
    7c18:	77 fd       	sbrc	r23, 7
    7c1a:	09 d0       	rcall	.+18     	; 0x7c2e <__divmodhi4_neg2>
    7c1c:	0e 94 f3 3d 	call	0x7be6	; 0x7be6 <__udivmodhi4>
    7c20:	07 fc       	sbrc	r0, 7
    7c22:	05 d0       	rcall	.+10     	; 0x7c2e <__divmodhi4_neg2>
    7c24:	3e f4       	brtc	.+14     	; 0x7c34 <__divmodhi4_exit>

00007c26 <__divmodhi4_neg1>:
    7c26:	90 95       	com	r25
    7c28:	81 95       	neg	r24
    7c2a:	9f 4f       	sbci	r25, 0xFF	; 255
    7c2c:	08 95       	ret

00007c2e <__divmodhi4_neg2>:
    7c2e:	70 95       	com	r23
    7c30:	61 95       	neg	r22
    7c32:	7f 4f       	sbci	r23, 0xFF	; 255

00007c34 <__divmodhi4_exit>:
    7c34:	08 95       	ret

00007c36 <__udivmodsi4>:
    7c36:	a1 e2       	ldi	r26, 0x21	; 33
    7c38:	1a 2e       	mov	r1, r26
    7c3a:	aa 1b       	sub	r26, r26
    7c3c:	bb 1b       	sub	r27, r27
    7c3e:	fd 01       	movw	r30, r26
    7c40:	0d c0       	rjmp	.+26     	; 0x7c5c <__udivmodsi4_ep>

00007c42 <__udivmodsi4_loop>:
    7c42:	aa 1f       	adc	r26, r26
    7c44:	bb 1f       	adc	r27, r27
    7c46:	ee 1f       	adc	r30, r30
    7c48:	ff 1f       	adc	r31, r31
    7c4a:	a2 17       	cp	r26, r18
    7c4c:	b3 07       	cpc	r27, r19
    7c4e:	e4 07       	cpc	r30, r20
    7c50:	f5 07       	cpc	r31, r21
    7c52:	20 f0       	brcs	.+8      	; 0x7c5c <__udivmodsi4_ep>
    7c54:	a2 1b       	sub	r26, r18
    7c56:	b3 0b       	sbc	r27, r19
    7c58:	e4 0b       	sbc	r30, r20
    7c5a:	f5 0b       	sbc	r31, r21

00007c5c <__udivmodsi4_ep>:
    7c5c:	66 1f       	adc	r22, r22
    7c5e:	77 1f       	adc	r23, r23
    7c60:	88 1f       	adc	r24, r24
    7c62:	99 1f       	adc	r25, r25
    7c64:	1a 94       	dec	r1
    7c66:	69 f7       	brne	.-38     	; 0x7c42 <__udivmodsi4_loop>
    7c68:	60 95       	com	r22
    7c6a:	70 95       	com	r23
    7c6c:	80 95       	com	r24
    7c6e:	90 95       	com	r25
    7c70:	9b 01       	movw	r18, r22
    7c72:	ac 01       	movw	r20, r24
    7c74:	bd 01       	movw	r22, r26
    7c76:	cf 01       	movw	r24, r30
    7c78:	08 95       	ret

00007c7a <__divmodsi4>:
    7c7a:	05 2e       	mov	r0, r21
    7c7c:	97 fb       	bst	r25, 7
    7c7e:	1e f4       	brtc	.+6      	; 0x7c86 <__divmodsi4+0xc>
    7c80:	00 94       	com	r0
    7c82:	0e 94 54 3e 	call	0x7ca8	; 0x7ca8 <__negsi2>
    7c86:	57 fd       	sbrc	r21, 7
    7c88:	07 d0       	rcall	.+14     	; 0x7c98 <__divmodsi4_neg2>
    7c8a:	0e 94 1b 3e 	call	0x7c36	; 0x7c36 <__udivmodsi4>
    7c8e:	07 fc       	sbrc	r0, 7
    7c90:	03 d0       	rcall	.+6      	; 0x7c98 <__divmodsi4_neg2>
    7c92:	4e f4       	brtc	.+18     	; 0x7ca6 <__divmodsi4_exit>
    7c94:	0c 94 54 3e 	jmp	0x7ca8	; 0x7ca8 <__negsi2>

00007c98 <__divmodsi4_neg2>:
    7c98:	50 95       	com	r21
    7c9a:	40 95       	com	r20
    7c9c:	30 95       	com	r19
    7c9e:	21 95       	neg	r18
    7ca0:	3f 4f       	sbci	r19, 0xFF	; 255
    7ca2:	4f 4f       	sbci	r20, 0xFF	; 255
    7ca4:	5f 4f       	sbci	r21, 0xFF	; 255

00007ca6 <__divmodsi4_exit>:
    7ca6:	08 95       	ret

00007ca8 <__negsi2>:
    7ca8:	90 95       	com	r25
    7caa:	80 95       	com	r24
    7cac:	70 95       	com	r23
    7cae:	61 95       	neg	r22
    7cb0:	7f 4f       	sbci	r23, 0xFF	; 255
    7cb2:	8f 4f       	sbci	r24, 0xFF	; 255
    7cb4:	9f 4f       	sbci	r25, 0xFF	; 255
    7cb6:	08 95       	ret

00007cb8 <__tablejump2__>:
    7cb8:	ee 0f       	add	r30, r30
    7cba:	ff 1f       	adc	r31, r31

00007cbc <__tablejump__>:
    7cbc:	05 90       	lpm	r0, Z+
    7cbe:	f4 91       	lpm	r31, Z
    7cc0:	e0 2d       	mov	r30, r0
    7cc2:	09 94       	ijmp

00007cc4 <__mulhisi3>:
    7cc4:	0e 94 6a 3e 	call	0x7cd4	; 0x7cd4 <__umulhisi3>
    7cc8:	33 23       	and	r19, r19
    7cca:	12 f4       	brpl	.+4      	; 0x7cd0 <__mulhisi3+0xc>
    7ccc:	8a 1b       	sub	r24, r26
    7cce:	9b 0b       	sbc	r25, r27
    7cd0:	0c 94 7b 3e 	jmp	0x7cf6	; 0x7cf6 <__usmulhisi3_tail>

00007cd4 <__umulhisi3>:
    7cd4:	a2 9f       	mul	r26, r18
    7cd6:	b0 01       	movw	r22, r0
    7cd8:	b3 9f       	mul	r27, r19
    7cda:	c0 01       	movw	r24, r0
    7cdc:	a3 9f       	mul	r26, r19
    7cde:	70 0d       	add	r23, r0
    7ce0:	81 1d       	adc	r24, r1
    7ce2:	11 24       	eor	r1, r1
    7ce4:	91 1d       	adc	r25, r1
    7ce6:	b2 9f       	mul	r27, r18
    7ce8:	70 0d       	add	r23, r0
    7cea:	81 1d       	adc	r24, r1
    7cec:	11 24       	eor	r1, r1
    7cee:	91 1d       	adc	r25, r1
    7cf0:	08 95       	ret

00007cf2 <__usmulhisi3>:
    7cf2:	0e 94 6a 3e 	call	0x7cd4	; 0x7cd4 <__umulhisi3>

00007cf6 <__usmulhisi3_tail>:
    7cf6:	b7 ff       	sbrs	r27, 7
    7cf8:	08 95       	ret
    7cfa:	82 1b       	sub	r24, r18
    7cfc:	93 0b       	sbc	r25, r19
    7cfe:	08 95       	ret

00007d00 <__muluhisi3>:
    7d00:	0e 94 6a 3e 	call	0x7cd4	; 0x7cd4 <__umulhisi3>
    7d04:	a5 9f       	mul	r26, r21
    7d06:	90 0d       	add	r25, r0
    7d08:	b4 9f       	mul	r27, r20
    7d0a:	90 0d       	add	r25, r0
    7d0c:	a4 9f       	mul	r26, r20
    7d0e:	80 0d       	add	r24, r0
    7d10:	91 1d       	adc	r25, r1
    7d12:	11 24       	eor	r1, r1
    7d14:	08 95       	ret

00007d16 <__mulshisi3>:
    7d16:	b7 ff       	sbrs	r27, 7
    7d18:	0c 94 80 3e 	jmp	0x7d00	; 0x7d00 <__muluhisi3>

00007d1c <__mulohisi3>:
    7d1c:	0e 94 80 3e 	call	0x7d00	; 0x7d00 <__muluhisi3>
    7d20:	82 1b       	sub	r24, r18
    7d22:	93 0b       	sbc	r25, r19
    7d24:	08 95       	ret

00007d26 <__prologue_saves__>:
    7d26:	2f 92       	push	r2
    7d28:	3f 92       	push	r3
    7d2a:	4f 92       	push	r4
    7d2c:	5f 92       	push	r5
    7d2e:	6f 92       	push	r6
    7d30:	7f 92       	push	r7
    7d32:	8f 92       	push	r8
    7d34:	9f 92       	push	r9
    7d36:	af 92       	push	r10
    7d38:	bf 92       	push	r11
    7d3a:	cf 92       	push	r12
    7d3c:	df 92       	push	r13
    7d3e:	ef 92       	push	r14
    7d40:	ff 92       	push	r15
    7d42:	0f 93       	push	r16
    7d44:	1f 93       	push	r17
    7d46:	cf 93       	push	r28
    7d48:	df 93       	push	r29
    7d4a:	cd b7       	in	r28, 0x3d	; 61
    7d4c:	de b7       	in	r29, 0x3e	; 62
    7d4e:	ca 1b       	sub	r28, r26
    7d50:	db 0b       	sbc	r29, r27
    7d52:	0f b6       	in	r0, 0x3f	; 63
    7d54:	f8 94       	cli
    7d56:	de bf       	out	0x3e, r29	; 62
    7d58:	0f be       	out	0x3f, r0	; 63
    7d5a:	cd bf       	out	0x3d, r28	; 61
    7d5c:	09 94       	ijmp

00007d5e <__epilogue_restores__>:
    7d5e:	2a 88       	ldd	r2, Y+18	; 0x12
    7d60:	39 88       	ldd	r3, Y+17	; 0x11
    7d62:	48 88       	ldd	r4, Y+16	; 0x10
    7d64:	5f 84       	ldd	r5, Y+15	; 0x0f
    7d66:	6e 84       	ldd	r6, Y+14	; 0x0e
    7d68:	7d 84       	ldd	r7, Y+13	; 0x0d
    7d6a:	8c 84       	ldd	r8, Y+12	; 0x0c
    7d6c:	9b 84       	ldd	r9, Y+11	; 0x0b
    7d6e:	aa 84       	ldd	r10, Y+10	; 0x0a
    7d70:	b9 84       	ldd	r11, Y+9	; 0x09
    7d72:	c8 84       	ldd	r12, Y+8	; 0x08
    7d74:	df 80       	ldd	r13, Y+7	; 0x07
    7d76:	ee 80       	ldd	r14, Y+6	; 0x06
    7d78:	fd 80       	ldd	r15, Y+5	; 0x05
    7d7a:	0c 81       	ldd	r16, Y+4	; 0x04
    7d7c:	1b 81       	ldd	r17, Y+3	; 0x03
    7d7e:	aa 81       	ldd	r26, Y+2	; 0x02
    7d80:	b9 81       	ldd	r27, Y+1	; 0x01
    7d82:	ce 0f       	add	r28, r30
    7d84:	d1 1d       	adc	r29, r1
    7d86:	0f b6       	in	r0, 0x3f	; 63
    7d88:	f8 94       	cli
    7d8a:	de bf       	out	0x3e, r29	; 62
    7d8c:	0f be       	out	0x3f, r0	; 63
    7d8e:	cd bf       	out	0x3d, r28	; 61
    7d90:	ed 01       	movw	r28, r26
    7d92:	08 95       	ret

00007d94 <memcpy_P>:
    7d94:	fb 01       	movw	r30, r22
    7d96:	dc 01       	movw	r26, r24
    7d98:	02 c0       	rjmp	.+4      	; 0x7d9e <memcpy_P+0xa>
    7d9a:	05 90       	lpm	r0, Z+
    7d9c:	0d 92       	st	X+, r0
    7d9e:	41 50       	subi	r20, 0x01	; 1
    7da0:	50 40       	sbci	r21, 0x00	; 0
    7da2:	d8 f7       	brcc	.-10     	; 0x7d9a <memcpy_P+0x6>
    7da4:	08 95       	ret

00007da6 <__itoa_ncheck>:
    7da6:	bb 27       	eor	r27, r27
    7da8:	4a 30       	cpi	r20, 0x0A	; 10
    7daa:	31 f4       	brne	.+12     	; 0x7db8 <__itoa_ncheck+0x12>
    7dac:	99 23       	and	r25, r25
    7dae:	22 f4       	brpl	.+8      	; 0x7db8 <__itoa_ncheck+0x12>
    7db0:	bd e2       	ldi	r27, 0x2D	; 45
    7db2:	90 95       	com	r25
    7db4:	81 95       	neg	r24
    7db6:	9f 4f       	sbci	r25, 0xFF	; 255
    7db8:	0c 94 df 3e 	jmp	0x7dbe	; 0x7dbe <__utoa_common>

00007dbc <__utoa_ncheck>:
    7dbc:	bb 27       	eor	r27, r27

00007dbe <__utoa_common>:
    7dbe:	fb 01       	movw	r30, r22
    7dc0:	55 27       	eor	r21, r21
    7dc2:	aa 27       	eor	r26, r26
    7dc4:	88 0f       	add	r24, r24
    7dc6:	99 1f       	adc	r25, r25
    7dc8:	aa 1f       	adc	r26, r26
    7dca:	a4 17       	cp	r26, r20
    7dcc:	10 f0       	brcs	.+4      	; 0x7dd2 <__utoa_common+0x14>
    7dce:	a4 1b       	sub	r26, r20
    7dd0:	83 95       	inc	r24
    7dd2:	50 51       	subi	r21, 0x10	; 16
    7dd4:	b9 f7       	brne	.-18     	; 0x7dc4 <__utoa_common+0x6>
    7dd6:	a0 5d       	subi	r26, 0xD0	; 208
    7dd8:	aa 33       	cpi	r26, 0x3A	; 58
    7dda:	08 f0       	brcs	.+2      	; 0x7dde <__utoa_common+0x20>
    7ddc:	a9 5d       	subi	r26, 0xD9	; 217
    7dde:	a1 93       	st	Z+, r26
    7de0:	00 97       	sbiw	r24, 0x00	; 0
    7de2:	79 f7       	brne	.-34     	; 0x7dc2 <__utoa_common+0x4>
    7de4:	b1 11       	cpse	r27, r1
    7de6:	b1 93       	st	Z+, r27
    7de8:	11 92       	st	Z+, r1
    7dea:	cb 01       	movw	r24, r22
    7dec:	0c 94 1e 3f 	jmp	0x7e3c	; 0x7e3c <strrev>

00007df0 <__eerd_block_m644p>:
    7df0:	dc 01       	movw	r26, r24
    7df2:	cb 01       	movw	r24, r22

00007df4 <__eerd_blraw_m644p>:
    7df4:	fc 01       	movw	r30, r24
    7df6:	f9 99       	sbic	0x1f, 1	; 31
    7df8:	fe cf       	rjmp	.-4      	; 0x7df6 <__eerd_blraw_m644p+0x2>
    7dfa:	06 c0       	rjmp	.+12     	; 0x7e08 <__eerd_blraw_m644p+0x14>
    7dfc:	f2 bd       	out	0x22, r31	; 34
    7dfe:	e1 bd       	out	0x21, r30	; 33
    7e00:	f8 9a       	sbi	0x1f, 0	; 31
    7e02:	31 96       	adiw	r30, 0x01	; 1
    7e04:	00 b4       	in	r0, 0x20	; 32
    7e06:	0d 92       	st	X+, r0
    7e08:	41 50       	subi	r20, 0x01	; 1
    7e0a:	50 40       	sbci	r21, 0x00	; 0
    7e0c:	b8 f7       	brcc	.-18     	; 0x7dfc <__eerd_blraw_m644p+0x8>
    7e0e:	08 95       	ret

00007e10 <__eerd_byte_m644p>:
    7e10:	f9 99       	sbic	0x1f, 1	; 31
    7e12:	fe cf       	rjmp	.-4      	; 0x7e10 <__eerd_byte_m644p>
    7e14:	92 bd       	out	0x22, r25	; 34
    7e16:	81 bd       	out	0x21, r24	; 33
    7e18:	f8 9a       	sbi	0x1f, 0	; 31
    7e1a:	99 27       	eor	r25, r25
    7e1c:	80 b5       	in	r24, 0x20	; 32
    7e1e:	08 95       	ret

00007e20 <__eewr_byte_m644p>:
    7e20:	26 2f       	mov	r18, r22

00007e22 <__eewr_r18_m644p>:
    7e22:	f9 99       	sbic	0x1f, 1	; 31
    7e24:	fe cf       	rjmp	.-4      	; 0x7e22 <__eewr_r18_m644p>
    7e26:	1f ba       	out	0x1f, r1	; 31
    7e28:	92 bd       	out	0x22, r25	; 34
    7e2a:	81 bd       	out	0x21, r24	; 33
    7e2c:	20 bd       	out	0x20, r18	; 32
    7e2e:	0f b6       	in	r0, 0x3f	; 63
    7e30:	f8 94       	cli
    7e32:	fa 9a       	sbi	0x1f, 2	; 31
    7e34:	f9 9a       	sbi	0x1f, 1	; 31
    7e36:	0f be       	out	0x3f, r0	; 63
    7e38:	01 96       	adiw	r24, 0x01	; 1
    7e3a:	08 95       	ret

00007e3c <strrev>:
    7e3c:	dc 01       	movw	r26, r24
    7e3e:	fc 01       	movw	r30, r24
    7e40:	67 2f       	mov	r22, r23
    7e42:	71 91       	ld	r23, Z+
    7e44:	77 23       	and	r23, r23
    7e46:	e1 f7       	brne	.-8      	; 0x7e40 <strrev+0x4>
    7e48:	32 97       	sbiw	r30, 0x02	; 2
    7e4a:	04 c0       	rjmp	.+8      	; 0x7e54 <strrev+0x18>
    7e4c:	7c 91       	ld	r23, X
    7e4e:	6d 93       	st	X+, r22
    7e50:	70 83       	st	Z, r23
    7e52:	62 91       	ld	r22, -Z
    7e54:	ae 17       	cp	r26, r30
    7e56:	bf 07       	cpc	r27, r31
    7e58:	c8 f3       	brcs	.-14     	; 0x7e4c <strrev+0x10>
    7e5a:	08 95       	ret

00007e5c <_exit>:
    7e5c:	f8 94       	cli

00007e5e <__stop_program>:
    7e5e:	ff cf       	rjmp	.-2      	; 0x7e5e <__stop_program>
