
OpenAeroVTOL_2_0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00007b70  00007c04  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00007b70  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000006b9  00800108  00800108  00007c0c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00007c0c  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000580  00000000  00000000  00007c40  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00011cd1  00000000  00000000  000081c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002ffa  00000000  00000000  00019e91  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00003654  00000000  00000000  0001ce8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000cdc  00000000  00000000  000204e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000022aa  00000000  00000000  000211bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00005c2d  00000000  00000000  00023466  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000428  00000000  00000000  00029093  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 e5 0c 	jmp	0x19ca	; 0x19ca <__ctors_end>
       4:	0c 94 a0 21 	jmp	0x4340	; 0x4340 <__vector_1>
       8:	0c 94 68 21 	jmp	0x42d0	; 0x42d0 <__vector_2>
       c:	0c 94 4b 22 	jmp	0x4496	; 0x4496 <__vector_3>
      10:	0c 94 02 0d 	jmp	0x1a04	; 0x1a04 <__bad_interrupt>
      14:	0c 94 12 22 	jmp	0x4424	; 0x4424 <__vector_5>
      18:	0c 94 02 0d 	jmp	0x1a04	; 0x1a04 <__bad_interrupt>
      1c:	0c 94 d9 21 	jmp	0x43b2	; 0x43b2 <__vector_7>
      20:	0c 94 02 0d 	jmp	0x1a04	; 0x1a04 <__bad_interrupt>
      24:	0c 94 02 0d 	jmp	0x1a04	; 0x1a04 <__bad_interrupt>
      28:	0c 94 02 0d 	jmp	0x1a04	; 0x1a04 <__bad_interrupt>
      2c:	0c 94 02 0d 	jmp	0x1a04	; 0x1a04 <__bad_interrupt>
      30:	0c 94 02 0d 	jmp	0x1a04	; 0x1a04 <__bad_interrupt>
      34:	0c 94 02 0d 	jmp	0x1a04	; 0x1a04 <__bad_interrupt>
      38:	0c 94 02 0d 	jmp	0x1a04	; 0x1a04 <__bad_interrupt>
      3c:	0c 94 02 0d 	jmp	0x1a04	; 0x1a04 <__bad_interrupt>
      40:	0c 94 02 0d 	jmp	0x1a04	; 0x1a04 <__bad_interrupt>
      44:	0c 94 02 0d 	jmp	0x1a04	; 0x1a04 <__bad_interrupt>
      48:	0c 94 02 0d 	jmp	0x1a04	; 0x1a04 <__bad_interrupt>
      4c:	0c 94 02 0d 	jmp	0x1a04	; 0x1a04 <__bad_interrupt>
      50:	0c 94 f6 22 	jmp	0x45ec	; 0x45ec <__vector_20>
      54:	0c 94 02 0d 	jmp	0x1a04	; 0x1a04 <__bad_interrupt>
      58:	0c 94 02 0d 	jmp	0x1a04	; 0x1a04 <__bad_interrupt>
      5c:	0c 94 02 0d 	jmp	0x1a04	; 0x1a04 <__bad_interrupt>
      60:	0c 94 02 0d 	jmp	0x1a04	; 0x1a04 <__bad_interrupt>
      64:	0c 94 02 0d 	jmp	0x1a04	; 0x1a04 <__bad_interrupt>
      68:	0c 94 02 0d 	jmp	0x1a04	; 0x1a04 <__bad_interrupt>
      6c:	0c 94 02 0d 	jmp	0x1a04	; 0x1a04 <__bad_interrupt>
      70:	0c 94 f6 22 	jmp	0x45ec	; 0x45ec <__vector_20>
      74:	0c 94 02 0d 	jmp	0x1a04	; 0x1a04 <__bad_interrupt>
      78:	0c 94 02 0d 	jmp	0x1a04	; 0x1a04 <__bad_interrupt>
      7c:	54 28       	or	r5, r4
      7e:	56 28       	or	r5, r6
      80:	5a 28       	or	r5, r10
      82:	5d 28       	or	r5, r13
      84:	60 28       	or	r6, r0
      86:	63 28       	or	r6, r3
      88:	66 28       	or	r6, r6
      8a:	68 28       	or	r6, r8
      8c:	6c 28       	or	r6, r12
      8e:	6e 28       	or	r6, r14
      90:	70 28       	or	r7, r0
      92:	72 28       	or	r7, r2
      94:	74 28       	or	r7, r4
      96:	76 28       	or	r7, r6
      98:	78 28       	or	r7, r8
      9a:	7a 28       	or	r7, r10
      9c:	7e 28       	or	r7, r14
      9e:	80 28       	or	r8, r0
      a0:	82 28       	or	r8, r2
      a2:	08 4a       	sbci	r16, 0xA8	; 168
      a4:	d7 3b       	cpi	r29, 0xB7	; 183
      a6:	3b ce       	rjmp	.-906    	; 0xfffffd1e <__eeprom_end+0xff7efd1e>
      a8:	01 6e       	ori	r16, 0xE1	; 225
      aa:	84 bc       	out	0x24, r8	; 36
      ac:	bf fd       	.word	0xfdbf	; ????
      ae:	c1 2f       	mov	r28, r17
      b0:	3d 6c       	ori	r19, 0xCD	; 205
      b2:	74 31       	cpi	r23, 0x14	; 20
      b4:	9a bd       	out	0x2a, r25	; 42
      b6:	56 83       	std	Z+6, r21	; 0x06
      b8:	3d da       	rcall	.-2950   	; 0xfffff534 <__eeprom_end+0xff7ef534>
      ba:	3d 00       	.word	0x003d	; ????
      bc:	c7 7f       	andi	r28, 0xF7	; 247
      be:	11 be       	out	0x31, r1	; 49
      c0:	d9 e4       	ldi	r29, 0x49	; 73
      c2:	bb 4c       	sbci	r27, 0xCB	; 203
      c4:	3e 91       	ld	r19, -X
      c6:	6b aa       	std	Y+51, r6	; 0x33
      c8:	aa be       	out	0x3a, r10	; 58
      ca:	00 00       	nop
      cc:	00 80       	ld	r0, Z
      ce:	3f 00       	.word	0x003f	; ????

000000d0 <Acc_Pol>:
      d0:	ff ff 01 ff 01 ff 01 ff ff 01 01 01 ff 01 01 ff     ................
      e0:	ff ff                                               ..

000000e2 <ACC_RPY_Order>:
      e2:	00 01 02 02 00 01 00 01 02 00 01 02 01 00 02 00     ................
      f2:	02 01                                               ..

000000f4 <FUTABA>:
      f4:	01 02 00 03 04 05 06 07                             ........

000000fc <JR>:
      fc:	00 01 02 03 04 05 06 07                             ........

00000104 <Trans_Matrix>:
     104:	05 02 06 01 05 08 03 07 05                          .........

0000010d <Wingdings>:
     10d:	01 02 41 05 0d 00 0f 00 22 00 33 00 44 00 4f 09     ..A.....".3.D.O.
     11d:	01 00 03 00 07 00 0f 00 1f 00 0f 00 07 00 03 00     ................
     12d:	01 00 08 1c 00 1c 00 1c 00 1c 00 7f 00 3e 00 1c     .............>..
     13d:	00 08 00 08 08 00 1c 00 3e 00 7f 00 1c 00 1c 00     ........>.......
     14d:	1c 00 1c 00 05 ff 01 fe 00 7c 00 38 00 10 00 0d     .........|.8....
     15d:	40 00 60 00 70 00 78 00 7c 00 7e 00 7f 00 7e 00     @.`.p.x.|.~...~.
     16d:	7c 00 78 00 70 00 60 00 40 00                       |.x.p.`.@.

00000177 <Verdana14>:
     177:	01 02 20 5b 13 00 bb 00 c5 00 cc 00 cc 00 cc 00     .. [............
     187:	cc 01 03 01 03 01 03 01 16 01 29 01 29 01 29 01     ..........).).).
     197:	36 01 49 01 50 01 50 01 6f 01 88 01 a4 01 c0 01     6.I.P.P.o.......
     1a7:	df 01 fb 02 1a 02 36 02 55 02 74 02 7b 02 7b 02     ......6.U.t.{.{.
     1b7:	7b 02 7b 02 7b 02 94 02 94 02 bc 02 db 02 fd 03     {.{.{...........
     1c7:	22 03 3e 03 5a 03 82 03 a1 03 b4 03 ca 03 ec 04     ".>.Z...........
     1d7:	08 04 2d 04 4c 04 74 04 8d 04 b5 04 d7 04 f9 05     ..-.L.t.........
     1e7:	1e 05 3d 05 65 05 99 05 bb 05 e0 06 02 06 02 06     ..=.e...........
     1f7:	1b 06 1b 06 1b 06 1b 06 1b 06 34 06 50 06 69 06     ..........4.P.i.
     207:	85 06 a1 06 b4 06 d0 06 e9 06 f0 07 00 07 1c 07     ................
     217:	23 07 4e 07 67 07 86 07 a2 07 be 07 d1 07 ea 07     #.N.g...........
     227:	fd 08 16 08 32 08 5d 08 79 08 95 03 00 00 00 00     ....2.].y.......
     237:	00 00 00 00 00 02 fe 67 00 fe 67 00 12 78 00 00     .......g..g..x..
     247:	fe 01 00 02 01 00 02 01 00 02 01 00 fe 41 00 78     .............A.x
     257:	70 00 00 1c 00 00 07 00 e0 00 00 38 00 00 0e 1e     p..........8....
     267:	00 82 7f 00 80 40 00 80 40 00 80 40 00 80 7f 00     .....@..@..@....
     277:	00 1e 00 06 c0 1f 00 f8 ff 00 3c e0 01 07 00 07     ..........<.....
     287:	03 00 06 01 00 04 06 01 00 04 03 00 06 07 00 07     ................
     297:	3c e0 01 f8 ff 00 c0 1f 00 04 00 00 03 00 f0 03     <...............
     2a7:	00 70 00 00 10 00 06 00 03 00 00 03 00 00 03 00     .p..............
     2b7:	00 03 00 00 03 00 00 03 00 02 00 70 00 00 70 00     ...........p..p.
     2c7:	0a f0 0f 00 fc 3f 00 0c 30 00 06 60 00 06 60 00     .....?..0..`..`.
     2d7:	06 60 00 06 60 00 0c 30 00 fc 3f 00 f0 0f 00 08     .`..`..0..?.....
     2e7:	18 60 00 18 60 00 18 60 00 fe 7f 00 fe 7f 00 00     .`..`..`........
     2f7:	60 00 00 60 00 00 60 00 09 0c 70 00 06 78 00 06     `..`..`...p..x..
     307:	6c 00 06 66 00 06 63 00 8e 61 00 fc 60 00 78 60     l..f..c..a..`.x`
     317:	00 00 60 00 09 0c 30 00 06 60 00 06 60 00 86 61     ..`...0..`..`..a
     327:	00 86 61 00 86 61 00 ce 73 00 7c 3f 00 38 1e 00     ..a..a..s.|?.8..
     337:	0a 00 07 00 80 07 00 c0 07 00 f0 06 00 38 06 00     .............8..
     347:	1c 06 00 fe 7f 00 fe 7f 00 00 06 00 00 06 00 09     ................
     357:	00 30 00 fe 60 00 fe 60 00 c6 60 00 c6 60 00 c6     .0..`..`..`..`..
     367:	60 00 c6 31 00 86 3f 00 06 0f 00 0a e0 0f 00 f0     `..1..?.........
     377:	3f 00 9c 30 00 cc 60 00 c6 60 00 c6 60 00 c6 60     ?..0..`..`..`..`
     387:	00 c6 31 00 86 3f 00 00 0f 00 09 06 00 00 06 40     ..1..?.........@
     397:	00 06 70 00 06 7c 00 06 0f 00 c6 03 00 f6 00 00     ..p..|..........
     3a7:	3e 00 00 0e 00 00 0a 38 1e 00 7c 3f 00 ce 71 00     >......8..|?..q.
     3b7:	c6 60 00 c6 60 00 86 61 00 86 61 00 4e 73 00 7c     .`..`..a..a.Ns.|
     3c7:	3f 00 38 1e 00 0a f0 00 00 fc 61 00 8c 63 00 06     ?.8.......a..c..
     3d7:	63 00 06 63 00 06 63 00 06 33 00 0c 39 00 fc 1f     c..c..c..3..9...
     3e7:	00 f0 07 00 02 70 70 00 70 70 00 08 0c 00 00 06     .....pp.pp......
     3f7:	00 00 06 67 00 06 67 00 86 01 00 ce 00 00 fc 00     ...g..g.........
     407:	00 38 00 00 0d 00 40 00 00 78 00 00 3f 00 c0 07     .8....@..x..?...
     417:	00 f8 06 00 3e 06 00 06 06 00 3e 06 00 f8 06 00     ....>.....>.....
     427:	c0 07 00 00 3f 00 00 78 00 00 40 00 0a fe 7f 00     ....?..x..@.....
     437:	fe 7f 00 86 61 00 86 61 00 86 61 00 86 61 00 c6     ....a..a..a..a..
     447:	61 00 7c 73 00 3c 3f 00 00 1e 00 0b e0 07 00 f8     a.|s.<?.........
     457:	1f 00 1c 38 00 0c 30 00 06 60 00 06 60 00 06 60     ...8..0..`..`..`
     467:	00 06 60 00 06 60 00 06 20 00 0c 30 00 0c fe 7f     ..`..`.. ..0....
     477:	00 fe 7f 00 06 60 00 06 60 00 06 60 00 06 60 00     .....`..`..`..`.
     487:	06 60 00 0e 70 00 0c 30 00 38 1c 00 f8 0f 00 e0     .`..p..0.8......
     497:	07 00 09 fe 7f 00 fe 7f 00 c6 60 00 c6 60 00 c6     ..........`..`..
     4a7:	60 00 c6 60 00 c6 60 00 c6 60 00 c6 60 00 09 fe     `..`..`..`..`...
     4b7:	7f 00 fe 7f 00 86 01 00 86 01 00 86 01 00 86 01     ................
     4c7:	00 86 01 00 86 01 00 06 00 00 0d e0 07 00 f8 1f     ................
     4d7:	00 3c 3c 00 0c 30 00 0e 70 00 06 60 00 06 60 00     .<<..0..p..`..`.
     4e7:	06 63 00 06 63 00 06 63 00 06 63 00 0c 3f 00 0c     .c..c..c..c..?..
     4f7:	3f 00 0a fe 7f 00 fe 7f 00 c0 00 00 c0 00 00 c0     ?...............
     507:	00 00 c0 00 00 c0 00 00 c0 00 00 fe 7f 00 fe 7f     ................
     517:	00 06 06 60 00 06 60 00 fe 7f 00 fe 7f 00 06 60     ...`..`........`
     527:	00 06 60 00 07 00 60 00 00 60 00 06 60 00 06 60     ..`...`..`..`..`
     537:	00 06 70 00 fe 3f 00 fe 1f 00 0b fe 7f 00 fe 7f     ..p..?..........
     547:	00 80 03 00 c0 01 00 e0 03 00 70 07 00 38 1c 00     ..........p..8..
     557:	1c 38 00 0e 70 00 06 60 00 02 40 00 09 fe 7f 00     .8..p..`..@.....
     567:	fe 7f 00 00 60 00 00 60 00 00 60 00 00 60 00 00     ....`..`..`..`..
     577:	60 00 00 60 00 00 60 00 0c fe 7f 00 fe 7f 00 0e     `..`..`.........
     587:	00 00 38 00 00 e0 01 00 80 07 00 00 07 00 e0 01     ..8.............
     597:	00 38 00 00 0e 00 00 fe 7f 00 fe 7f 00 0a fe 7f     .8..............
     5a7:	00 fe 7f 00 0e 00 00 3c 00 00 e0 00 00 80 03 00     .......<........
     5b7:	00 1e 00 00 78 00 fe 7f 00 fe 7f 00 0d e0 07 00     ....x...........
     5c7:	f8 1f 00 1c 38 00 0c 30 00 06 60 00 06 60 00 06     ....8..0..`..`..
     5d7:	60 00 06 60 00 06 60 00 0c 30 00 1c 38 00 f8 1f     `..`..`..0..8...
     5e7:	00 e0 07 00 08 fe 7f 00 fe 7f 00 06 03 00 06 03     ................
     5f7:	00 06 03 00 8e 03 00 fc 01 00 f8 00 00 0d e0 07     ................
     607:	00 f8 1f 00 1c 38 00 0c 30 00 06 60 00 06 60 00     .....8..0..`..`.
     617:	06 60 00 06 e0 01 06 e0 03 0c 30 07 1c 38 06 f8     .`........0..8..
     627:	1f 06 e0 07 06 0b fe 7f 00 fe 7f 00 86 01 00 86     ................
     637:	01 00 86 01 00 86 07 00 ce 0e 00 fc 1c 00 78 70     ..............xp
     647:	00 00 60 00 00 40 00 0b 78 30 00 fc 70 00 ce 60     ..`..@..x0..p..`
     657:	00 86 61 00 86 61 00 86 61 00 86 61 00 86 61 00     ..a..a..a..a..a.
     667:	06 33 00 0c 3f 00 00 1e 00 0c 06 00 00 06 00 00     .3..?...........
     677:	06 00 00 06 00 00 06 00 00 fe 7f 00 fe 7f 00 06     ................
     687:	00 00 06 00 00 06 00 00 06 00 00 06 00 00 0a fe     ................
     697:	0f 00 fe 3f 00 00 70 00 00 60 00 00 60 00 00 60     ...?..p..`..`..`
     6a7:	00 00 60 00 00 70 00 fe 3f 00 fe 0f 00 0d 02 00     ..`..p..?.......
     6b7:	00 1e 00 00 fc 00 00 e0 03 00 80 1f 00 00 7c 00     ..............|.
     6c7:	00 60 00 00 7c 00 80 1f 00 e0 03 00 fc 00 00 1e     .`..|...........
     6d7:	00 00 02 00 00 11 06 00 00 7e 00 00 f8 07 00 80     .........~......
     6e7:	3f 00 00 78 00 00 7c 00 c0 0f 00 7e 00 00 06 00     ?..x..|....~....
     6f7:	00 7e 00 00 e0 07 00 00 7e 00 00 70 00 80 7f 00     .~......~..p....
     707:	f8 07 00 7e 00 00 06 00 00 0b 02 40 00 06 60 00     ...~.......@..`.
     717:	1e 78 00 38 1c 00 e0 07 00 80 01 00 e0 07 00 38     .x.8...........8
     727:	1e 00 1e 78 00 06 60 00 02 40 00 0c 02 00 00 06     ...x..`..@......
     737:	00 00 1e 00 00 78 00 00 e0 00 00 c0 7f 00 c0 7f     .....x..........
     747:	00 e0 00 00 78 00 00 1e 00 00 06 00 00 02 00 00     ....x...........
     757:	0b 06 70 00 06 78 00 06 7c 00 06 6e 00 06 67 00     ..p..x..|..n..g.
     767:	c6 63 00 e6 60 00 76 60 00 3e 60 00 1e 60 00 0e     .c..`.v`.>`..`..
     777:	60 00 08 03 00 00 1f 00 00 fe 00 00 f0 07 00 80     `...............
     787:	3f 00 00 fc 01 00 e0 03 00 00 03 08 00 3c 00 30     ?............<.0
     797:	7e 00 30 67 00 30 63 00 30 63 00 30 33 00 e0 7f     ~.0g.0c.0c.03...
     7a7:	00 e0 7f 00 09 ff 7f 00 ff 7f 00 60 20 00 30 60     ...........` .0`
     7b7:	00 30 60 00 30 60 00 70 70 00 e0 3f 00 c0 0f 00     .0`.0`.pp..?....
     7c7:	08 80 0f 00 e0 3f 00 60 30 00 30 60 00 30 60 00     .....?.`0.0`.0`.
     7d7:	30 60 00 30 60 00 60 30 00 09 80 1f 00 e0 3f 00     0`.0`.`0......?.
     7e7:	70 70 00 30 60 00 30 60 00 30 60 00 30 30 00 ff     pp.0`.0`.0`.00..
     7f7:	7f 00 ff 7f 00 09 80 0f 00 e0 3f 00 60 33 00 30     ..........?.`3.0
     807:	63 00 30 63 00 30 63 00 70 63 00 e0 63 00 c0 33     c.0c.0c.pc..c..3
     817:	00 06 30 00 00 fe 7f 00 ff 7f 00 33 00 00 33 00     ..0........3..3.
     827:	00 03 00 00 09 80 1f 00 e0 3f 06 70 70 06 30 60     .........?.pp.0`
     837:	06 30 60 06 30 60 06 30 30 07 f0 ff 03 f0 ff 01     .0`.0`.00.......
     847:	08 ff 7f 00 ff 7f 00 60 00 00 30 00 00 30 00 00     .......`..0..0..
     857:	30 00 00 f0 7f 00 e0 7f 00 02 f6 7f 00 f6 7f 00     0...............
     867:	05 00 00 06 30 00 06 30 00 06 f6 ff 07 f6 ff 03     ....0..0........
     877:	09 ff 7f 00 ff 7f 00 00 06 00 00 07 00 80 0f 00     ................
     887:	c0 38 00 70 70 00 30 60 00 10 40 00 02 ff 7f 00     .8.pp.0`..@.....
     897:	ff 7f 00 0e f0 7f 00 f0 7f 00 60 00 00 30 00 00     ..........`..0..
     8a7:	30 00 00 30 00 00 f0 7f 00 e0 7f 00 60 00 00 30     0..0........`..0
     8b7:	00 00 30 00 00 30 00 00 f0 7f 00 e0 7f 00 08 f0     ..0..0..........
     8c7:	7f 00 f0 7f 00 60 00 00 30 00 00 30 00 00 30 00     .....`..0..0..0.
     8d7:	00 f0 7f 00 e0 7f 00 0a 80 0f 00 e0 3f 00 60 30     ............?.`0
     8e7:	00 30 60 00 30 60 00 30 60 00 30 60 00 60 30 00     .0`.0`.0`.0`.`0.
     8f7:	e0 3f 00 80 0f 00 09 f0 ff 07 f0 ff 07 60 60 00     .?...........``.
     907:	30 60 00 30 60 00 30 60 00 70 70 00 e0 3f 00 c0     0`.0`.0`.pp..?..
     917:	0f 00 09 80 1f 00 e0 3f 00 70 70 00 30 60 00 30     .......?.pp.0`.0
     927:	60 00 30 60 00 30 30 00 f0 ff 07 f0 ff 07 06 f0     `.0`.00.........
     937:	7f 00 f0 7f 00 60 00 00 30 00 00 30 00 00 30 00     .....`..0..0..0.
     947:	00 08 c0 31 00 e0 63 00 30 63 00 30 63 00 30 66     ...1..c.0c.0c.0f
     957:	00 30 66 00 30 3e 00 60 1c 00 06 30 00 00 fe 3f     .0f.0>.`...0...?
     967:	00 fe 7f 00 30 60 00 30 60 00 30 60 00 08 f0 1f     ....0`.0`.0`....
     977:	00 f0 7f 00 00 60 00 00 60 00 00 60 00 00 30 00     .....`..`..`..0.
     987:	f0 7f 00 f0 7f 00 09 10 00 00 f0 00 00 e0 07 00     ................
     997:	00 3e 00 00 60 00 00 3e 00 e0 07 00 f0 00 00 10     .>..`..>........
     9a7:	00 00 0e 30 00 00 f0 03 00 c0 3f 00 00 78 00 00     ...0......?..x..
     9b7:	7c 00 80 07 00 f0 00 00 f0 00 00 c0 07 00 00 3c     |..............<
     9c7:	00 00 70 00 c0 3f 00 f0 03 00 30 00 00 09 10 40     ..p..?....0....@
     9d7:	00 30 60 00 f0 78 00 c0 1d 00 00 07 00 c0 1d 00     .0`..x..........
     9e7:	f0 78 00 30 60 00 10 40 00 09 10 00 00 f0 00 00     .x.0`..@........
     9f7:	e0 07 06 00 bf 07 00 f0 01 00 3f 00 e0 07 00 f0     ..........?.....
     a07:	00 00 10 00 00 08 30 70 00 30 78 00 30 7c 00 30     ......0p.0x.0|.0
     a17:	66 00 30 63 00 f0 61 00 f0 60 00 70 60 00           f.0c..a..`.p`.

00000a25 <Verdana8>:
     a25:	01 02 20 5b 0b 00 bb 00 be 00 c1 00 c1 00 c1 00     .. [............
     a35:	c1 00 d6 00 d6 00 d6 00 dd 00 e4 00 e4 00 e4 00     ................
     a45:	e9 00 f0 00 f3 00 f3 00 fe 01 09 01 14 01 1f 01     ................
     a55:	2c 01 37 01 42 01 4d 01 58 01 63 01 66 01 66 01     ,.7.B.M.X.c.f.f.
     a65:	66 01 66 01 66 01 6f 01 6f 01 7c 01 89 01 98 01     f.f.f.o.o.|.....
     a75:	a7 01 b2 01 bd 01 cc 01 d9 01 e0 01 e9 01 f6 02     ................
     a85:	01 02 10 02 1d 02 2c 02 37 02 46 02 53 02 60 02     ......,.7.F.S.`.
     a95:	6f 02 7c 02 89 02 9c 02 a9 02 b8 02 c5 02 c5 02     o.|.............
     aa5:	c5 02 c5 02 c5 02 c5 02 c5 02 d0 02 db 02 e6 02     ................
     ab5:	f1 02 fc 03 05 03 10 03 1b 03 1e 03 25 03 30 03     ............%.0.
     ac5:	33 03 46 03 51 03 5c 03 67 03 72 03 7b 03 84 03     3.F.Q.\.g.r.{...
     ad5:	8d 03 98 03 a3 03 b2 03 bd 03 c8 01 00 00 01 7e     ...............~
     ae5:	01 0a 0c 00 12 00 12 00 8c 01 60 00 18 00 c6 00     ..........`.....
     af5:	20 01 20 01 c0 00 03 f8 00 06 03 01 04 03 01 04      . .............
     b05:	06 03 f8 00 02 00 04 80 03 03 20 00 20 00 20 00     .......... . . .
     b15:	01 80 01 05 fc 00 02 01 02 01 02 01 fc 00 05 04     ................
     b25:	01 04 01 fe 01 00 01 00 01 05 84 01 42 01 22 01     ............B.".
     b35:	12 01 0c 01 05 84 00 02 01 12 01 12 01 ec 00 06     ................
     b45:	60 00 50 00 48 00 44 00 fe 01 40 00 05 9e 00 12     `.P.H.D...@.....
     b55:	01 12 01 12 01 e2 00 05 f8 00 14 01 12 01 12 01     ................
     b65:	e0 00 05 02 00 82 01 62 00 1a 00 06 00 05 ec 00     .......b........
     b75:	12 01 12 01 12 01 ec 00 05 1c 00 22 01 22 01 a2     ..........."."..
     b85:	00 7c 00 01 98 01 04 02 00 62 01 12 00 0c 00 06     .|.......b......
     b95:	c0 01 78 00 46 00 46 00 78 00 c0 01 06 fe 01 12     ..x.F.F.x.......
     ba5:	01 12 01 12 01 1c 01 e0 00 07 78 00 84 00 02 01     ..........x.....
     bb5:	02 01 02 01 02 01 84 00 07 fe 01 02 01 02 01 02     ................
     bc5:	01 02 01 84 00 78 00 05 fe 01 12 01 12 01 12 01     .....x..........
     bd5:	12 01 05 fe 01 12 00 12 00 12 00 02 00 07 78 00     ..............x.
     be5:	84 00 02 01 02 01 22 01 22 01 e4 00 06 fe 01 10     ......".".......
     bf5:	00 10 00 10 00 10 00 fe 01 03 02 01 fe 01 02 01     ................
     c05:	04 00 01 02 01 02 01 fe 00 06 fe 01 20 00 30 00     ............ .0.
     c15:	48 00 84 00 02 01 05 fe 01 00 01 00 01 00 01 00     H...............
     c25:	01 07 fe 01 06 00 18 00 60 00 18 00 06 00 fe 01     ........`.......
     c35:	06 fe 01 06 00 18 00 60 00 80 01 fe 01 07 78 00     .......`......x.
     c45:	84 00 02 01 02 01 02 01 84 00 78 00 05 fe 01 22     ..........x...."
     c55:	00 22 00 22 00 1c 00 07 78 00 84 00 02 01 02 01     ."."....x.......
     c65:	02 03 84 04 78 04 06 fe 01 22 00 22 00 62 00 9c     ....x....".".b..
     c75:	00 00 01 06 8c 00 12 01 12 01 22 01 22 01 c4 00     .........."."...
     c85:	07 02 00 02 00 02 00 fe 01 02 00 02 00 02 00 06     ................
     c95:	fe 00 00 01 00 01 00 01 00 01 fe 00 06 0e 00 70     ...............p
     ca5:	00 80 01 80 01 70 00 0e 00 09 06 00 78 00 80 01     .....p......x...
     cb5:	78 00 06 00 78 00 80 01 78 00 06 00 06 86 01 48     x...x...x......H
     cc5:	00 30 00 30 00 48 00 86 01 07 02 00 04 00 08 00     .0.0.H..........
     cd5:	f0 01 08 00 04 00 02 00 06 82 01 42 01 22 01 12     ...........B."..
     ce5:	01 0a 01 06 01 05 c0 00 28 01 28 01 28 01 f0 01     ........(.(.(...
     cf5:	05 ff 01 08 01 08 01 08 01 f0 00 05 f0 00 08 01     ................
     d05:	08 01 08 01 90 00 05 f0 00 08 01 08 01 08 01 ff     ................
     d15:	01 05 f0 00 28 01 28 01 28 01 b0 00 04 08 00 fe     ....(.(.(.......
     d25:	01 09 00 09 00 05 f0 00 08 05 08 05 08 05 f8 03     ................
     d35:	05 ff 01 08 00 08 00 08 00 f0 01 01 f9 01 03 00     ................
     d45:	04 08 04 f9 03 05 ff 01 40 00 60 00 90 00 08 01     ........@.`.....
     d55:	01 ff 01 09 f8 01 08 00 08 00 08 00 f0 01 08 00     ................
     d65:	08 00 08 00 f0 01 05 f8 01 08 00 08 00 08 00 f0     ................
     d75:	01 05 f0 00 08 01 08 01 08 01 f0 00 05 f8 07 08     ................
     d85:	01 08 01 08 01 f0 00 05 f0 00 08 01 08 01 08 01     ................
     d95:	f8 07 04 f8 01 10 00 08 00 08 00 04 30 01 28 01     ............0.(.
     da5:	48 01 c8 00 04 08 00 fe 00 08 01 08 01 05 f8 00     H...............
     db5:	00 01 00 01 00 01 f8 01 05 18 00 60 00 80 01 60     ...........`...`
     dc5:	00 18 00 07 78 00 80 01 60 00 18 00 60 00 80 01     ....x...`...`...
     dd5:	78 00 05 08 01 90 00 60 00 90 00 08 01 05 08 00     x......`........
     de5:	70 04 80 03 70 00 08 00 04 88 01 48 01 28 01 18     p...p......H.(..
     df5:	01                                                  .

00000df6 <lcd_commmands>:
     df6:	a2 a0 40 a6 ee c8 2c 2e 2f 24 ac 00 f8 00           ..@...,./$....

00000e04 <pagemap>:
     e04:	07 06 05 04 03 02 01 00                             ........

00000e0c <text_menu>:
     e0c:	df 10 d9 10 cd 10 eb 16 e5 16 6a 14 dc 16 da 16     ..........j.....
     e1c:	d8 16 c0 16 b8 16 be 16 bc 16 ba 16 b3 16 ae 16     ................
     e2c:	a9 16 a4 16 e9 10 09 11 04 11 fe 10 85 13 ca 16     ................
     e3c:	c2 16 36 15 53 15 4e 15 48 15 44 15 40 15 04 10     ..6.S.N.H.D.@...
     e4c:	4f 11 46 11 57 11 3f 11 3a 11 04 10 04 10 04 10     O.F.W.?.:.......
     e5c:	04 10 04 10 04 10 04 10 12 10 0a 10 7b 11 75 11     ............{.u.
     e6c:	76 13 71 13 6e 13 64 13 5a 13 04 10 04 10 05 10     v.q.n.d.Z.......
     e7c:	6e 11 69 11 60 11 04 10 3b 15 04 10 17 14 13 14     n.i.`...;.......
     e8c:	0d 14 04 14 04 10 04 10 76 14 73 14 1d 10 24 10     ........v.s...$.
     e9c:	04 10 f2 10 04 10 16 11 0f 11 99 16 87 16 74 16     ..............t.
     eac:	62 16 4c 16 3d 16 29 16 15 16 07 16 f8 15 e9 15     b.L.=.).........
     ebc:	da 15 cb 15 bc 15 ad 15 9e 15 8a 15 71 15 58 15     ............q.X.
     ecc:	04 10 04 10 04 10 04 10 04 10 76 14 73 14 24 10     ..........v.s.$.
     edc:	04 10 57 11 4f 11 46 11 3f 11 3a 11 35 11 30 11     ..W.O.F.?.:.5.0.
     eec:	2b 11 26 11 1f 11 19 11 fb 13 f4 13 04 10 29 10     +.&...........).
     efc:	18 10 a5 10 9a 10 04 10 57 10 4e 10 45 10 41 10     ........W.N.E.A.
     f0c:	38 10 30 10 04 10 04 10 04 10 cf 16 f6 10 bf 10     8.0.............
     f1c:	b1 10 ab 10 92 10 87 10 04 10 29 10 24 10 04 10     ..........).$...
     f2c:	04 10 04 10 4e 15 48 15 44 15 6a 14 60 14 55 14     ....N.H.D.j.`.U.
     f3c:	46 14 38 14 29 14 1c 14 90 13 85 13 79 13 e7 13     F.8.).......y...
     f4c:	dd 13 d5 13 c8 13 9b 13 be 13 b4 13 a9 13 04 10     ................
     f5c:	04 10 04 10 04 10 04 10 22 15 1a 15 04 15 12 15     ........".......
     f6c:	f6 14 eb 14 e2 14 d9 14 c1 14 d0 14 b2 14 a6 14     ................
     f7c:	9f 14 98 14 84 14 91 14 7a 14 2a 15 52 13 47 13     ........z.*.R.G.
     f8c:	36 13 29 13 1e 13 0e 13 fe 12 f0 12 e0 12 d0 12     6.).............
     f9c:	c0 12 b0 12 a0 12 90 12 82 12 74 12 65 12 56 12     ..........t.e.V.
     fac:	49 12 3c 12 30 12 24 12 18 12 0b 12 01 12 f7 11     I.<.0.$.........
     fbc:	ea 11 df 11 d2 11 c7 11 ba 11 df 11 ad 11 c7 11     ................
     fcc:	04 10 04 10 04 10 04 10 04 10 04 10 82 10 7d 10     ..............}.
     fdc:	78 10 73 10 6e 10 69 10 64 10 5f 10 57 11 4f 11     x.s.n.i.d._.W.O.
     fec:	46 11 3f 11 3a 11 35 11 30 11 2b 11 a4 11 9a 11     F.?.:.5.0.+.....
     ffc:	92 11 8a 11 81 11 26 11                             ......&.

00001004 <Dummy0>:
	...

00001005 <Random1>:
    1005:	48 69 67 68 00                                      High.

0000100a <Safety2>:
    100a:	41 72 6d 61 62 6c 65 00                             Armable.

00001012 <Safety1>:
    1012:	41 72 6d 65 64 00                                   Armed.

00001018 <GeneralText5>:
    1018:	46 61 73 74 00                                      Fast.

0000101d <MixerItem15>:
    101d:	53 63 61 6c 65 64 00                                Scaled.

00001024 <MixerItem12>:
    1024:	52 65 76 2e 00                                      Rev..

00001029 <MixerItem11>:
    1029:	4e 6f 72 6d 61 6c 00                                Normal.

00001030 <MixerMenuItem7>:
    1030:	50 69 74 63 68 55 70 00                             PitchUp.

00001038 <MixerMenuItem6>:
    1038:	53 69 64 65 77 61 79 73 00                          Sideways.

00001041 <MixerMenuItem5>:
    1041:	41 66 74 00                                         Aft.

00001045 <MixerMenuItem4>:
    1045:	49 6e 76 65 72 74 65 64 00                          Inverted.

0000104e <MixerMenuItem3>:
    104e:	56 65 72 74 69 63 61 6c 00                          Vertical.

00001057 <MixerMenuItem2>:
    1057:	46 6f 72 77 61 72 64 00                             Forward.

0000105f <MOUT8>:
    105f:	4f 55 54 38 00                                      OUT8.

00001064 <MOUT7>:
    1064:	4f 55 54 37 00                                      OUT7.

00001069 <MOUT6>:
    1069:	4f 55 54 36 00                                      OUT6.

0000106e <MOUT5>:
    106e:	4f 55 54 35 00                                      OUT5.

00001073 <MOUT4>:
    1073:	4f 55 54 34 00                                      OUT4.

00001078 <MOUT3>:
    1078:	4f 55 54 33 00                                      OUT3.

0000107d <MOUT2>:
    107d:	4f 55 54 32 00                                      OUT2.

00001082 <MOUT1>:
    1082:	4f 55 54 31 00                                      OUT1.

00001087 <Status5>:
    1087:	28 44 69 73 61 72 6d 65 64 29 00                    (Disarmed).

00001092 <Status4>:
    1092:	28 41 72 6d 65 64 29 00                             (Armed).

0000109a <Status2>:
    109a:	66 6f 72 20 73 74 61 74 75 73 00                    for status.

000010a5 <Status0>:
    10a5:	50 72 65 73 73 00                                   Press.

000010ab <WizardText2>:
    10ab:	44 6f 6e 65 21 00                                   Done!.

000010b1 <WizardText1>:
    10b1:	48 6f 6c 64 20 61 73 20 73 68 6f 77 6e 00           Hold as shown.

000010bf <WizardText0>:
    10bf:	4e 6f 20 52 58 20 73 69 67 6e 61 6c 21 00           No RX signal!.

000010cd <PText2>:
    10cd:	48 6f 6c 64 20 73 74 65 61 64 79 00                 Hold steady.

000010d9 <PText1>:
    10d9:	52 65 73 65 74 00                                   Reset.

000010df <PText0>:
    10df:	4f 70 65 6e 41 65 72 6f 32 00                       OpenAero2.

000010e9 <Disarmed>:
    10e9:	44 69 73 61 72 6d 65 64 00                          Disarmed.

000010f2 <ErrorText10>:
    10f2:	4c 6f 77 00                                         Low.

000010f6 <Status3>:
    10f6:	42 61 74 74 65 72 79 00                             Battery.

000010fe <ErrorText7>:
    10fe:	4d 6f 64 65 6c 00                                   Model.

00001104 <ErrorText6>:
    1104:	4c 6f 73 74 00                                      Lost.

00001109 <ErrorText5>:
    1109:	45 72 72 6f 72 00                                   Error.

0000110f <ErrorText4>:
    110f:	53 69 67 6e 61 6c 00                                Signal.

00001116 <ErrorText3>:
    1116:	4e 6f 00                                            No.

00001119 <ChannelRef12>:
    1119:	45 6c 65 76 2e 00                                   Elev..

0000111f <ChannelRef10>:
    111f:	54 68 72 6f 74 2e 00                                Throt..

00001126 <ChannelRef8>:
    1126:	4e 6f 6e 65 00                                      None.

0000112b <ChannelRef7>:
    112b:	41 55 58 33 00                                      AUX3.

00001130 <ChannelRef6>:
    1130:	41 55 58 32 00                                      AUX2.

00001135 <ChannelRef5>:
    1135:	41 55 58 31 00                                      AUX1.

0000113a <ChannelRef4>:
    113a:	47 65 61 72 00                                      Gear.

0000113f <ChannelRef3>:
    113f:	52 75 64 64 65 72 00                                Rudder.

00001146 <ChannelRef2>:
    1146:	45 6c 65 76 61 74 6f 72 00                          Elevator.

0000114f <ChannelRef1>:
    114f:	41 69 6c 65 72 6f 6e 00                             Aileron.

00001157 <ChannelRef0>:
    1157:	54 68 72 6f 74 74 6c 65 00                          Throttle.

00001160 <MixerItem62>:
    1160:	53 71 72 74 53 69 6e 65 00                          SqrtSine.

00001169 <MixerItem61>:
    1169:	53 69 6e 65 00                                      Sine.

0000116e <MixerItem60>:
    116e:	4c 69 6e 65 61 72 00                                Linear.

00001175 <MixerItem41>:
    1175:	4d 6f 74 6f 72 00                                   Motor.

0000117b <MixerItem40>:
    117b:	53 65 72 76 6f 00                                   Servo.

00001181 <MixerItem74>:
    1181:	41 63 63 50 69 74 63 68 00                          AccPitch.

0000118a <MixerItem73>:
    118a:	41 63 63 52 6f 6c 6c 00                             AccRoll.

00001192 <MixerItem72>:
    1192:	47 79 72 6f 59 61 77 00                             GyroYaw.

0000119a <MixerItem71>:
    119a:	47 79 72 6f 50 69 74 63 68 00                       GyroPitch.

000011a4 <MixerItem70>:
    11a4:	47 79 72 6f 52 6f 6c 6c 00                          GyroRoll.

000011ad <MixerItem31>:
    11ad:	50 32 20 53 6f 75 72 63 65 20 42 3a 00              P2 Source B:.

000011ba <MixerItem21>:
    11ba:	50 31 20 53 6f 75 72 63 65 20 42 3a 00              P1 Source B:.

000011c7 <MixerItem30>:
    11c7:	50 32 20 56 6f 6c 75 6d 65 3a 00                    P2 Volume:.

000011d2 <MixerItem29>:
    11d2:	50 32 20 53 6f 75 72 63 65 20 41 3a 00              P2 Source A:.

000011df <MixerItem2>:
    11df:	50 31 20 56 6f 6c 75 6d 65 3a 00                    P1 Volume:.

000011ea <MixerItem0>:
    11ea:	50 31 20 53 6f 75 72 63 65 20 41 3a 00              P1 Source A:.

000011f7 <MixerItem43>:
    11f7:	50 32 20 5a 20 61 63 63 3a 00                       P2 Z acc:.

00001201 <MixerItem42>:
    1201:	50 31 20 5a 20 61 63 63 3a 00                       P1 Z acc:.

0000120b <MixerItem28>:
    120b:	50 32 20 50 69 74 63 68 20 41 4c 3a 00              P2 Pitch AL:.

00001218 <MixerItem3>:
    1218:	50 31 20 50 69 74 63 68 20 41 4c 00                 P1 Pitch AL.

00001224 <MixerItem27>:
    1224:	50 32 20 52 6f 6c 6c 20 41 4c 3a 00                 P2 Roll AL:.

00001230 <MixerItem7>:
    1230:	50 31 20 52 6f 6c 6c 20 41 4c 3a 00                 P1 Roll AL:.

0000123c <MixerItem26>:
    123c:	50 32 20 59 61 77 20 67 79 72 6f 3a 00              P2 Yaw gyro:.

00001249 <MixerItem6>:
    1249:	50 31 20 59 61 77 20 67 79 72 6f 3a 00              P1 Yaw gyro:.

00001256 <MixerItem25>:
    1256:	50 32 20 50 69 74 63 68 20 67 79 72 6f 3a 00        P2 Pitch gyro:.

00001265 <MixerItem5>:
    1265:	50 31 20 50 69 74 63 68 20 67 79 72 6f 3a 00        P1 Pitch gyro:.

00001274 <MixerItem24>:
    1274:	50 32 20 52 6f 6c 6c 20 67 79 72 6f 3a 00           P2 Roll gyro:.

00001282 <MixerItem4>:
    1282:	50 31 20 52 6f 6c 6c 20 67 79 72 6f 3a 00           P1 Roll gyro:.

00001290 <MixerItem56>:
    1290:	50 32 20 52 75 64 2e 20 76 6f 6c 75 6d 65 3a 00     P2 Rud. volume:.

000012a0 <MixerItem53>:
    12a0:	50 31 20 52 75 64 2e 20 76 6f 6c 75 6d 65 3a 00     P1 Rud. volume:.

000012b0 <MixerItem55>:
    12b0:	50 32 20 45 6c 65 2e 20 76 6f 6c 75 6d 65 3a 00     P2 Ele. volume:.

000012c0 <MixerItem52>:
    12c0:	50 31 20 45 6c 65 2e 20 76 6f 6c 75 6d 65 3a 00     P1 Ele. volume:.

000012d0 <MixerItem54>:
    12d0:	50 32 20 41 69 6c 2e 20 76 6f 6c 75 6d 65 3a 00     P2 Ail. volume:.

000012e0 <MixerItem51>:
    12e0:	50 31 20 41 69 6c 2e 20 76 6f 6c 75 6d 65 3a 00     P1 Ail. volume:.

000012f0 <Mixeritem50>:
    12f0:	54 68 6f 74 74 6c 65 20 63 75 72 76 65 00           Thottle curve.

000012fe <MixerItem33>:
    12fe:	50 32 20 54 68 72 2e 20 76 6f 6c 75 6d 65 3a 00     P2 Thr. volume:.

0000130e <MixerItem23>:
    130e:	50 31 20 54 68 72 2e 20 76 6f 6c 75 6d 65 3a 00     P1 Thr. volume:.

0000131e <MixerItem34>:
    131e:	50 32 20 4f 66 66 73 65 74 3a 00                    P2 Offset:.

00001329 <MixerItem35>:
    1329:	50 31 2e 6e 20 4f 66 66 73 65 74 3a 00              P1.n Offset:.

00001336 <MixerItem36>:
    1336:	50 31 2e 6e 20 25 20 6f 66 20 74 72 61 6e 73 3a     P1.n % of trans:
	...

00001347 <MixerItem20>:
    1347:	50 31 20 4f 66 66 73 65 74 3a 00                    P1 Offset:.

00001352 <MixerItem1>:
    1352:	44 65 76 69 63 65 3a 00                             Device:.

0000135a <P5text>:
    135a:	50 31 2e 6e 20 2d 20 50 32 00                       P1.n - P2.

00001364 <P4text>:
    1364:	50 31 20 2d 20 50 31 2e 6e 00                       P1 - P1.n.

0000136e <P3text>:
    136e:	50 32 00                                            P2.

00001371 <P2text>:
    1371:	50 31 2e 6e 00                                      P1.n.

00001376 <P1text>:
    1376:	50 31 00                                            P1.

00001379 <Transition_P1n>:
    1379:	54 72 61 6e 73 2e 20 50 31 6e 3a 00                 Trans. P1n:.

00001385 <Transition>:
    1385:	54 72 61 6e 73 69 74 69 6f 6e 00                    Transition.

00001390 <GeneralText9>:
    1390:	4c 6f 63 6b 20 72 61 74 65 3a 00                    Lock rate:.

0000139b <BattMenuItem2>:
    139b:	42 61 74 2e 20 4c 56 41 20 78 31 30 3a 00           Bat. LVA x10:.

000013a9 <GeneralText7>:
    13a9:	43 46 20 66 61 63 74 6f 72 3a 00                    CF factor:.

000013b4 <GeneralText6>:
    13b4:	41 63 63 2e 20 4c 50 46 3a 00                       Acc. LPF:.

000013be <GeneralText3>:
    13be:	50 57 4d 20 72 61 74 65 3a 00                       PWM rate:.

000013c8 <GeneralText2>:
    13c8:	44 69 73 61 72 6d 20 74 69 6d 65 3a 00              Disarm time:.

000013d5 <AutoMenuItem2>:
    13d5:	53 61 66 65 74 79 3a 00                             Safety:.

000013dd <Contrast>:
    13dd:	43 6f 6e 74 72 61 73 74 3a 00                       Contrast:.

000013e7 <MixerMenuItem0>:
    13e7:	4f 72 69 65 6e 74 61 74 69 6f 6e 3a 00              Orientation:.

000013f4 <RCMenuItem7>:
    13f4:	46 75 74 61 62 61 00                                Futaba.

000013fb <RCMenuItem6>:
    13fb:	4a 52 2c 53 70 6b 74 6d 00                          JR,Spktm.

00001404 <RXMode3>:
    1404:	53 70 65 6b 74 72 75 6d 00                          Spektrum.

0000140d <RXMode2>:
    140d:	53 2d 42 75 73 00                                   S-Bus.

00001413 <RXMode1>:
    1413:	50 57 4d 00                                         PWM.

00001417 <RXMode0>:
    1417:	43 50 50 4d 00                                      CPPM.

0000141c <RCMenuItem10>:
    141c:	52 75 64 64 65 72 20 70 6f 6c 2e 3a 00              Rudder pol.:.

00001429 <RCMenuItem9>:
    1429:	45 6c 65 76 61 74 6f 72 20 70 6f 6c 2e 3a 00        Elevator pol.:.

00001438 <RCMenuItem8>:
    1438:	41 69 6c 65 72 6f 6e 20 70 6f 6c 2e 3a 00           Aileron pol.:.

00001446 <RCMenuItem2>:
    1446:	50 72 6f 66 69 6c 65 20 43 68 61 6e 2e 3a 00        Profile Chan.:.

00001455 <RCMenuItem0>:
    1455:	43 68 2e 20 6f 72 64 65 72 3a 00                    Ch. order:.

00001460 <RCMenuItem20>:
    1460:	50 57 4d 20 73 79 6e 63 3a 00                       PWM sync:.

0000146a <RCMenuItem1>:
    146a:	52 58 20 74 79 70 65 3a 00                          RX type:.

00001473 <AutoMenuItem15>:
    1473:	4f 4e 00                                            ON.

00001476 <AutoMenuItem11>:
    1476:	4f 46 46 00                                         OFF.

0000147a <StabMenuItem30>:
    147a:	59 61 77 20 74 72 69 6d 3a 00                       Yaw trim:.

00001484 <StabMenuItem12>:
    1484:	59 61 77 20 49 20 4c 69 6d 69 74 3a 00              Yaw I Limit:.

00001491 <StabMenuItem9>:
    1491:	59 61 77 20 44 3a 00                                Yaw D:.

00001498 <StabMenuItem8>:
    1498:	59 61 77 20 49 3a 00                                Yaw I:.

0000149f <StabMenuItem7>:
    149f:	59 61 77 20 50 3a 00                                Yaw P:.

000014a6 <AutoMenuItem8>:
    14a6:	50 69 74 63 68 20 74 72 69 6d 3a 00                 Pitch trim:.

000014b2 <AutoMenuItem21>:
    14b2:	50 69 74 63 68 20 41 75 74 6f 4c 76 6c 3a 00        Pitch AutoLvl:.

000014c1 <StabMenuItem11>:
    14c1:	50 69 74 63 68 20 49 20 4c 69 6d 69 74 3a 00        Pitch I Limit:.

000014d0 <StabMenuItem6>:
    14d0:	50 69 74 63 68 20 44 3a 00                          Pitch D:.

000014d9 <StabMenuItem5>:
    14d9:	50 69 74 63 68 20 49 3a 00                          Pitch I:.

000014e2 <AutoMenuItem4>:
    14e2:	50 69 74 63 68 20 50 3a 00                          Pitch P:.

000014eb <AutoMenuItem7>:
    14eb:	52 6f 6c 6c 20 74 72 69 6d 3a 00                    Roll trim:.

000014f6 <AutoMenuItem20>:
    14f6:	52 6f 6c 6c 20 41 75 74 6f 4c 76 6c 3a 00           Roll AutoLvl:.

00001504 <StabMenuItem10>:
    1504:	52 6f 6c 6c 20 49 20 4c 69 6d 69 74 3a 00           Roll I Limit:.

00001512 <StabMenuItem3>:
    1512:	52 6f 6c 6c 20 44 3a 00                             Roll D:.

0000151a <StabMenuItem2>:
    151a:	52 6f 6c 6c 20 49 3a 00                             Roll I:.

00001522 <AutoMenuItem1>:
    1522:	52 6f 6c 6c 20 50 3a 00                             Roll P:.

0000152a <StabMenuItem13>:
    152a:	41 63 63 20 56 65 72 74 20 50 3a 00                 Acc Vert P:.

00001536 <SensorMenuItem2>:
    1536:	49 6e 76 2e 00                                      Inv..

0000153b <SensorMenuItem1>:
    153b:	43 61 6c 2e 00                                      Cal..

00001540 <PText19>:
    1540:	41 63 63 00                                         Acc.

00001544 <PText18>:
    1544:	59 61 77 00                                         Yaw.

00001548 <PText17>:
    1548:	50 69 74 63 68 00                                   Pitch.

0000154e <PText16>:
    154e:	52 6f 6c 6c 00                                      Roll.

00001553 <PText15>:
    1553:	47 79 72 6f 00                                      Gyro.

00001558 <MainMenuItem23>:
    1558:	31 39 2e 20 50 6f 73 2e 20 53 65 72 76 6f 20 74     19. Pos. Servo t
    1568:	72 76 6c 2e 20 28 25 29 00                          rvl. (%).

00001571 <MainMenuItem22>:
    1571:	31 38 2e 20 4e 65 67 2e 20 53 65 72 76 6f 20 74     18. Neg. Servo t
    1581:	72 76 6c 2e 20 28 25 29 00                          rvl. (%).

0000158a <MainMenuItem20>:
    158a:	31 37 2e 20 53 65 72 76 6f 20 64 69 72 65 63 74     17. Servo direct
    159a:	69 6f 6e 00                                         ion.

0000159e <MainMenuItem18>:
    159e:	31 36 2e 20 4f 55 54 38 20 4d 69 78 65 72 00        16. OUT8 Mixer.

000015ad <MainMenuItem17>:
    15ad:	31 35 2e 20 4f 55 54 37 20 4d 69 78 65 72 00        15. OUT7 Mixer.

000015bc <MainMenuItem16>:
    15bc:	31 34 2e 20 4f 55 54 36 20 4d 69 78 65 72 00        14. OUT6 Mixer.

000015cb <MainMenuItem15>:
    15cb:	31 33 2e 20 4f 55 54 35 20 4d 69 78 65 72 00        13. OUT5 Mixer.

000015da <MainMenuItem14>:
    15da:	31 32 2e 20 4f 55 54 34 20 4d 69 78 65 72 00        12. OUT4 Mixer.

000015e9 <MainMenuItem13>:
    15e9:	31 31 2e 20 4f 55 54 33 20 4d 69 78 65 72 00        11. OUT3 Mixer.

000015f8 <MainMenuItem12>:
    15f8:	31 30 2e 20 4f 55 54 32 20 4d 69 78 65 72 00        10. OUT2 Mixer.

00001607 <MainMenuItem11>:
    1607:	39 2e 20 4f 55 54 31 20 4d 69 78 65 72 00           9. OUT1 Mixer.

00001615 <MainMenuItem3>:
    1615:	38 2e 20 46 6c 69 67 68 74 20 70 72 6f 66 69 6c     8. Flight profil
    1625:	65 20 32 00                                         e 2.

00001629 <MainMenuItem2>:
    1629:	37 2e 20 46 6c 69 67 68 74 20 70 72 6f 66 69 6c     7. Flight profil
    1639:	65 20 31 00                                         e 1.

0000163d <MainMenuItem10>:
    163d:	36 2e 20 4c 65 76 65 6c 20 6d 65 74 65 72 00        6. Level meter.

0000164c <MainMenuItem8>:
    164c:	35 2e 20 53 65 6e 73 6f 72 20 63 61 6c 69 62 72     5. Sensor calibr
    165c:	61 74 69 6f 6e 00                                   ation.

00001662 <MainMenuItem7>:
    1662:	34 2e 20 53 74 69 63 6b 20 70 6f 6c 61 72 69 74     4. Stick polarit
    1672:	79 00                                               y.

00001674 <MainMenuItem9>:
    1674:	33 2e 20 52 65 63 65 69 76 65 72 20 69 6e 70 75     3. Receiver inpu
    1684:	74 73 00                                            ts.

00001687 <MainMenuItem1>:
    1687:	32 2e 20 52 65 63 65 69 76 65 72 20 73 65 74 75     2. Receiver setu
    1697:	70 00                                               p.

00001699 <MainMenuItem0>:
    1699:	31 2e 20 47 65 6e 65 72 61 6c 00                    1. General.

000016a4 <MenuFrame8>:
    16a4:	53 61 76 65 00                                      Save.

000016a9 <MenuFrame7>:
    16a9:	44 65 66 2e 00                                      Def..

000016ae <MenuFrame6>:
    16ae:	42 61 63 6b 00                                      Back.

000016b3 <MenuFrame5>:
    16b3:	4d 65 6e 75 00                                      Menu.

000016b8 <MenuFrame1>:
    16b8:	45 00                                               E.

000016ba <MenuFrame4>:
    16ba:	44 00                                               D.

000016bc <MenuFrame3>:
    16bc:	43 00                                               C.

000016be <MenuFrame2>:
    16be:	42 00                                               B.

000016c0 <MenuFrame0>:
    16c0:	41 00                                               A.

000016c2 <StatusText9>:
    16c2:	4a 69 74 74 65 72 3a 00                             Jitter:.

000016ca <StatusText8>:
    16ca:	50 6f 73 3a 00                                      Pos:.

000016cf <StatusText7>:
    16cf:	42 61 74 74 65 72 79 3a 00                          Battery:.

000016d8 <StatusText5>:
    16d8:	30 00                                               0.

000016da <StatusText4>:
    16da:	2e 00                                               ..

000016dc <StatusText3>:
    16dc:	50 72 6f 66 69 6c 65 3a 00                          Profile:.

000016e5 <StatusText1>:
    16e5:	4d 6f 64 65 3a 00                                   Mode:.

000016eb <StatusText0>:
    16eb:	56 65 72 73 69 6f 6e 3a 20 56 54 4f 4c 20 42 65     Version: VTOL Be
    16fb:	74 61 20 33 35 00                                   ta 35.

00001701 <Gyro_Pol>:
    1701:	01 01 01 01 01 01 01 ff ff ff ff 01 01 ff 01 ff     ................
    1711:	01 01                                               ..

00001713 <Gyro_RPY_Order>:
    1713:	00 01 02 01 02 00 00 01 02 00 01 02 01 00 02 02     ................
    1723:	01 00                                               ..

00001725 <lines>:
    1725:	03 0f 1b 27                                         ...'

00001729 <flight_menu_ranges>:
    1729:	00 7f 01 00 50 00 7f 01 00 32 00 7d 01 00 00 00     ....P....2.}....
    1739:	7f 01 00 00 00 7f 01 00 3c 81 7f 01 00 00 00 7f     ........<.......
    1749:	01 00 50 00 7f 01 00 32 00 7d 01 00 00 00 7f 01     ..P....2.}......
    1759:	00 00 00 7f 01 00 3c 81 7f 01 00 00 00 7f 01 00     ......<.........
    1769:	50 00 7f 01 00 32 00 7d 01 00 00 00 7f 01 00 00     P....2.}........
    1779:	81 7f 01 00 00 00 7f 01 00 00                       ..........

00001783 <FlightMenuText>:
	...

00001795 <mixer_menu_ranges>:
    1795:	00 01 01 01 00 83 7d 01 00 00 01 63 01 00 32 83     ......}....c..2.
    17a5:	7d 01 00 00 83 7d 01 00 00 00 7d 01 00 64 00 7d     }....}....}..d.}
    17b5:	01 00 64 00 02 01 01 00 83 7d 01 00 00 83 7d 01     ..d......}....}.
    17c5:	00 00 83 7d 01 00 00 83 7d 01 00 00 83 7d 01 00     ...}....}....}..
    17d5:	00 83 7d 01 00 00 00 02 01 01 00 00 02 01 01 00     ..}.............
    17e5:	00 02 01 01 00 00 02 01 01 00 00 02 01 01 00 00     ................
    17f5:	02 01 01 00 00 02 01 01 00 00 02 01 01 00 00 02     ................
    1805:	01 01 00 00 02 01 01 00 00 02 01 01 00 00 02 01     ................
    1815:	01 00 00 0d 01 01 0d 83 7d 01 00 00 00 0d 01 01     ........}.......
    1825:	0d 83 7d 01 00 00 00 0d 01 01 0d 83 7d 01 00 00     ..}.........}...
    1835:	00 0d 01 01 0d 83 7d 01 00 00                       ......}...

0000183f <MixerMenuText>:
    183f:	2e 00 00 00 00 00 00 38 00 00 00 00 00 00 44 44     .......8......DD
    184f:	44 44 44 44 44 44 44 44 44 44 ee 00 ee 00 ee 00     DDDDDDDDDD......
    185f:	ee 00                                               ..

00001861 <servo_menu_ranges>:
    1861:	00 01 01 01 00 83 00 01 00 9c 00 7d 01 00 64        ...........}..d

00001870 <ServoMenuText>:
    1870:	8d 8d 8d 8d 8d 8d 8d 8d 00 00 00 00 00 00 00 00     ................
	...

00001888 <rc_menu_ranges>:
    1888:	00 03 01 01 01 00 04 01 01 04 00 01 01 01 00 00     ................
    1898:	08 01 01 04 00 01 01 01 00 00 01 01 01 00 00 01     ................
    18a8:	01 01 00 00 04 01 00 03 00 0a 01 00 00 01 63 01     ..............c.
    18b8:	00 32 00 05 01 01 00 1c 32 01 00 26 00 01 01 01     .2......2..&....
    18c8:	01 00 7f 01 00 1e 00 7f 01 00 00 00 01 01 01 00     ................
    18d8:	01 7f 01 00 08 01 64 01 00 1e 00 00 00 00 00 00     ......d.........
    18e8:	00 00 00 00                                         ....

000018ec <RCMenuText>:
    18ec:	3e 69 74 69 8d 8d 8d 00 00 00 7c 00 2c 00 00 77     >iti......|.,..w
    18fc:	00 00 00 00                                         ....

00001900 <SQRTSIN>:
    1900:	00 0d 12 16 19 1c 1f 21 23 26 28 29 2b 2d 2f 30     .......!#&()+-/0
    1910:	32 33 35 36 38 39 3a 3b 3d 3e 3f 40 41 42 43 44     235689:;=>?@ABCD
    1920:	45 46 47 48 49 4a 4b 4c 4d 4d 4e 4f 50 51 51 52     EFGHIJKLMMNOPQQR
    1930:	53 53 54 55 55 56 57 57 58 58 59 59 5a 5a 5b 5b     SSTUUVWWXXYYZZ[[
    1940:	5c 5c 5d 5d 5e 5e 5e 5f 5f 5f 60 60 60 61 61 61     \\]]^^^___```aaa
    1950:	62 62 62 62 62 63 63 63 63 63 63 63 64 64 64 64     bbbbbcccccccdddd
    1960:	64 64 64 64 64                                      ddddd

00001965 <SIN>:
    1965:	00 02 03 05 06 08 0a 0b 0d 0e 10 11 13 14 16 17     ................
    1975:	19 1a 1c 1d 1f 20 22 23 25 26 28 29 2b 2c 2d 2f     ..... "#%&()+,-/
    1985:	30 32 33 34 36 37 38 3a 3b 3c 3d 3f 40 41 42 43     0234678:;<=?@ABC
    1995:	44 46 47 48 49 4a 4b 4c 4d 4e 4f 50 51 52 53 54     DFGHIJKLMNOPQRST
    19a5:	54 55 56 57 58 58 59 5a 5a 5b 5c 5c 5d 5e 5e 5f     TUVWXXYZZ[\\]^^_
    19b5:	5f 60 60 60 61 61 62 62 62 63 63 63 63 63 64 64     _```aabbbcccccdd
    19c5:	64 64 64 64 64                                      ddddd

000019ca <__ctors_end>:
    19ca:	11 24       	eor	r1, r1
    19cc:	1f be       	out	0x3f, r1	; 63
    19ce:	cf ef       	ldi	r28, 0xFF	; 255
    19d0:	d8 e0       	ldi	r29, 0x08	; 8
    19d2:	de bf       	out	0x3e, r29	; 62
    19d4:	cd bf       	out	0x3d, r28	; 61

000019d6 <__do_copy_data>:
    19d6:	11 e0       	ldi	r17, 0x01	; 1
    19d8:	a0 e0       	ldi	r26, 0x00	; 0
    19da:	b1 e0       	ldi	r27, 0x01	; 1
    19dc:	e0 e7       	ldi	r30, 0x70	; 112
    19de:	fb e7       	ldi	r31, 0x7B	; 123
    19e0:	02 c0       	rjmp	.+4      	; 0x19e6 <__do_copy_data+0x10>
    19e2:	05 90       	lpm	r0, Z+
    19e4:	0d 92       	st	X+, r0
    19e6:	a8 30       	cpi	r26, 0x08	; 8
    19e8:	b1 07       	cpc	r27, r17
    19ea:	d9 f7       	brne	.-10     	; 0x19e2 <__do_copy_data+0xc>

000019ec <__do_clear_bss>:
    19ec:	27 e0       	ldi	r18, 0x07	; 7
    19ee:	a8 e0       	ldi	r26, 0x08	; 8
    19f0:	b1 e0       	ldi	r27, 0x01	; 1
    19f2:	01 c0       	rjmp	.+2      	; 0x19f6 <.do_clear_bss_start>

000019f4 <.do_clear_bss_loop>:
    19f4:	1d 92       	st	X+, r1

000019f6 <.do_clear_bss_start>:
    19f6:	a1 3c       	cpi	r26, 0xC1	; 193
    19f8:	b2 07       	cpc	r27, r18
    19fa:	e1 f7       	brne	.-8      	; 0x19f4 <.do_clear_bss_loop>
    19fc:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <main>
    1a00:	0c 94 b6 3d 	jmp	0x7b6c	; 0x7b6c <_exit>

00001a04 <__bad_interrupt>:
    1a04:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00001a08 <glcd_delay>:
;*************************************************************************

	.global glcd_delay
	.func   glcd_delay
glcd_delay:
	nop					// 1 5 * 50ns = 250ns = 4MHz
    1a08:	00 00       	nop
	ret					// 4 (5 cycles)
    1a0a:	08 95       	ret

00001a0c <bind_master>:
;*************************************************************************

	.global bind_master
	.func   bind_master
bind_master:
	push	YL			//	1
    1a0c:	cf 93       	push	r28
	push	XL			//	1
    1a0e:	af 93       	push	r26

	ldi		XL,0x5		// 	1 Master is 5 pulses
    1a10:	a5 e0       	ldi	r26, 0x05	; 5

00001a12 <master_loop>:
master_loop:
	cbi 	BIND		//	2
    1a12:	58 98       	cbi	0x0b, 0	; 11
	ldi		YL,0x76		// 	1 		118us
    1a14:	c6 e7       	ldi	r28, 0x76	; 118
	call	VarDelay	//	4
    1a16:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <VarDelay>
	sbi		BIND		//	2
    1a1a:	58 9a       	sbi	0x0b, 0	; 11
	ldi		YL,0x7A		// 	1 		122us
    1a1c:	ca e7       	ldi	r28, 0x7A	; 122
	call	VarDelay	//	4
    1a1e:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <VarDelay>
	dec		XL			//	1
    1a22:	aa 95       	dec	r26
	brne	master_loop	//  2 1
    1a24:	b1 f7       	brne	.-20     	; 0x1a12 <master_loop>

	pop		XL			//	  1
    1a26:	af 91       	pop	r26
	pop		YL			//	  1
    1a28:	cf 91       	pop	r28
	ret					//	  4 
    1a2a:	08 95       	ret

00001a2c <VarDelay>:
; 5 cycles to configure and call, 4 to return and 2 to change bit afterwards = 11
; 20 cycles makes 1.0us
;*************************************************************************

VarDelay:
	rjmp .+0			// 2
    1a2c:	00 c0       	rjmp	.+0      	; 0x1a2e <VarDelay+0x2>
	rjmp .+0			// 2
    1a2e:	00 c0       	rjmp	.+0      	; 0x1a30 <VarDelay+0x4>
	rjmp .+0			// 2
    1a30:	00 c0       	rjmp	.+0      	; 0x1a32 <VarDelay+0x6>
	rjmp .+0			// 2
    1a32:	00 c0       	rjmp	.+0      	; 0x1a34 <VarDelay+0x8>
	rjmp .+0			// 2
    1a34:	00 c0       	rjmp	.+0      	; 0x1a36 <VarDelay+0xa>
	rjmp .+0			// 2
    1a36:	00 c0       	rjmp	.+0      	; 0x1a38 <VarDelay+0xc>
	rjmp .+0			// 2
    1a38:	00 c0       	rjmp	.+0      	; 0x1a3a <VarDelay+0xe>
	rjmp .+0			// 2
    1a3a:	00 c0       	rjmp	.+0      	; 0x1a3c <VarDelay+0x10>
	nop					// 1
    1a3c:	00 00       	nop
	dec 	YL			// 1
    1a3e:	ca 95       	dec	r28
	brne	VarDelay	// 2 1
    1a40:	a9 f7       	brne	.-22     	; 0x1a2c <VarDelay>
	ret					//   4 
    1a42:	08 95       	ret

00001a44 <output_servo_ppm_asm>:

	.global output_servo_ppm_asm
	.func   output_servo_ppm_asm
output_servo_ppm_asm:
// Save regs
	push	ZL			// 2			
    1a44:	ef 93       	push	r30
	push	ZH			// 2
    1a46:	ff 93       	push	r31
	push	XL			// 2
    1a48:	af 93       	push	r26
	push	XH			// 2
    1a4a:	bf 93       	push	r27
	push	YL			// 2
    1a4c:	cf 93       	push	r28
	push	YH			// 2
    1a4e:	df 93       	push	r29
	push	16			// 2
    1a50:	0f 93       	push	r16
	push	17			// 2
    1a52:	1f 93       	push	r17
	push	18			// 2
    1a54:	2f 93       	push	r18
	push	19			// 2
    1a56:	3f 93       	push	r19
	push	20			// 2
    1a58:	4f 93       	push	r20
	push	21			// 2
    1a5a:	5f 93       	push	r21
	push	22			// 2
    1a5c:	6f 93       	push	r22
	push	23			// 2
    1a5e:	7f 93       	push	r23

// Get start address of ServoOut[0] into Z
	mov		ZL, r24		// 1 Low byte
    1a60:	e8 2f       	mov	r30, r24
	mov		ZH, r25		// 1 High byte
    1a62:	f9 2f       	mov	r31, r25

// Save initial address for later
	push	24			// 2
    1a64:	8f 93       	push	r24
	push	25			// 2
    1a66:	9f 93       	push	r25

// Trim 16-bit values to suit individual needs, 
// Save result and copy lower 3 bits to r16 to r23 (96 cycles)

// M1
	ld		XL, Z+ 		// 2			Load XL with data at address in Z
    1a68:	a1 91       	ld	r26, Z+
	ld		XH, Z+		// 2			Load XH with data at address in Z+1
    1a6a:	b1 91       	ld	r27, Z+
	subi	XL,	0x4a	// 1 			Trim servo pulse
    1a6c:	aa 54       	subi	r26, 0x4A	; 74
	sbci 	XH,	0x03	// 1
    1a6e:	b3 40       	sbci	r27, 0x03	; 3
	push	XL 			// 2			Save trimmed value to the stack
    1a70:	af 93       	push	r26
	push	XH 			// 2
    1a72:	bf 93       	push	r27
	andi	XL,	0x07	// 1			And all but first 3 bits
    1a74:	a7 70       	andi	r26, 0x07	; 7
	mov		r23,XL		// 1 (12)		Copy 8-bit result to regs
    1a76:	7a 2f       	mov	r23, r26
// M2
	ld		XL, Z+
    1a78:	a1 91       	ld	r26, Z+
	ld		XH, Z+
    1a7a:	b1 91       	ld	r27, Z+
	subi	XL,	0xe6
    1a7c:	a6 5e       	subi	r26, 0xE6	; 230
	sbci 	XH,	0x02
    1a7e:	b2 40       	sbci	r27, 0x02	; 2
	push	XL 		
    1a80:	af 93       	push	r26
	push	XH 		
    1a82:	bf 93       	push	r27
	andi	XL,	0x07
    1a84:	a7 70       	andi	r26, 0x07	; 7
	mov		r22,XL	
    1a86:	6a 2f       	mov	r22, r26
// M3
	ld		XL, Z+
    1a88:	a1 91       	ld	r26, Z+
	ld		XH, Z+
    1a8a:	b1 91       	ld	r27, Z+
	subi	XL,	0x82
    1a8c:	a2 58       	subi	r26, 0x82	; 130
	sbci 	XH,	0x02
    1a8e:	b2 40       	sbci	r27, 0x02	; 2
	push	XL 		
    1a90:	af 93       	push	r26
	push	XH 		
    1a92:	bf 93       	push	r27
	andi	XL,	0x07
    1a94:	a7 70       	andi	r26, 0x07	; 7
	mov		r21,XL	
    1a96:	5a 2f       	mov	r21, r26
// M4
	ld		XL, Z+
    1a98:	a1 91       	ld	r26, Z+
	ld		XH, Z+
    1a9a:	b1 91       	ld	r27, Z+
	subi	XL,	0x1e
    1a9c:	ae 51       	subi	r26, 0x1E	; 30
	sbci 	XH,	0x02
    1a9e:	b2 40       	sbci	r27, 0x02	; 2
	push	XL 	
    1aa0:	af 93       	push	r26
	push	XH 	
    1aa2:	bf 93       	push	r27
	andi	XL,	0x07
    1aa4:	a7 70       	andi	r26, 0x07	; 7
	mov		r20,XL	
    1aa6:	4a 2f       	mov	r20, r26
// M5
	ld		XL, Z+
    1aa8:	a1 91       	ld	r26, Z+
	ld		XH, Z+
    1aaa:	b1 91       	ld	r27, Z+
	subi	XL,	0xb9
    1aac:	a9 5b       	subi	r26, 0xB9	; 185
	sbci 	XH,	0x01
    1aae:	b1 40       	sbci	r27, 0x01	; 1
	push	XL 	
    1ab0:	af 93       	push	r26
	push	XH 	
    1ab2:	bf 93       	push	r27
	andi	XL,	0x07
    1ab4:	a7 70       	andi	r26, 0x07	; 7
	mov		r19,XL	
    1ab6:	3a 2f       	mov	r19, r26
// M6
	ld		XL, Z+
    1ab8:	a1 91       	ld	r26, Z+
	ld		XH, Z+
    1aba:	b1 91       	ld	r27, Z+
	subi	XL,	0x55
    1abc:	a5 55       	subi	r26, 0x55	; 85
	sbci 	XH,	0x01
    1abe:	b1 40       	sbci	r27, 0x01	; 1
	push	XL 	
    1ac0:	af 93       	push	r26
	push	XH 	
    1ac2:	bf 93       	push	r27
	andi	XL,	0x07
    1ac4:	a7 70       	andi	r26, 0x07	; 7
	mov		r18,XL
    1ac6:	2a 2f       	mov	r18, r26
// M7
	ld		XL, Z+
    1ac8:	a1 91       	ld	r26, Z+
	ld		XH, Z+
    1aca:	b1 91       	ld	r27, Z+
	subi	XL,	0xf1
    1acc:	a1 5f       	subi	r26, 0xF1	; 241
	sbci 	XH,	0x00
    1ace:	b0 40       	sbci	r27, 0x00	; 0
	push	XL 	
    1ad0:	af 93       	push	r26
	push	XH 
    1ad2:	bf 93       	push	r27
	andi	XL,	0x07
    1ad4:	a7 70       	andi	r26, 0x07	; 7
	mov		r17,XL
    1ad6:	1a 2f       	mov	r17, r26
// M8
	ld		XL, Z+
    1ad8:	a1 91       	ld	r26, Z+
	ld		XH, Z+
    1ada:	b1 91       	ld	r27, Z+
	subi	XL,	0x8d
    1adc:	ad 58       	subi	r26, 0x8D	; 141
	sbci 	XH,	0x00
    1ade:	b0 40       	sbci	r27, 0x00	; 0
	push	XL
    1ae0:	af 93       	push	r26
	push	XH 
    1ae2:	bf 93       	push	r27
	andi	XL,	0x07
    1ae4:	a7 70       	andi	r26, 0x07	; 7
	mov		r16,XL
    1ae6:	0a 2f       	mov	r16, r26
// Time out lower 3 bits of pulse value (Zero to 7us)
// Each chunk is always executed in 1+10+1+147 = 159 cycles or 7.95us
// This does affect the inter-pulse delay, but not the pulsewidth.

// M1
	mov		r25,r23		// 1
    1ae8:	97 2f       	mov	r25, r23
	call	DelayHigh	// 10 (where r25 = 7)
    1aea:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <DelayHigh>
	sbi 	M1			// 1
    1aee:	46 9a       	sbi	0x08, 6	; 8
	call	DelayLow	// 7 + 140 (where r25 = 0)
    1af0:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <DelayLow>
	call    pwm_delay   // 100us
    1af4:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <pwm_delay>
	call    pwm_delay
    1af8:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <pwm_delay>

// M2
	mov		r25,r22
    1afc:	96 2f       	mov	r25, r22
	call	DelayHigh
    1afe:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <DelayHigh>
	sbi 	M2
    1b02:	44 9a       	sbi	0x08, 4	; 8
	call	DelayLow
    1b04:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <DelayLow>
	call    pwm_delay   // 100us
    1b08:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <pwm_delay>
	call    pwm_delay
    1b0c:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <pwm_delay>

// M3
	mov		r25,r21
    1b10:	95 2f       	mov	r25, r21
	call	DelayHigh
    1b12:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <DelayHigh>
	sbi 	M3
    1b16:	42 9a       	sbi	0x08, 2	; 8
	call	DelayLow
    1b18:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <DelayLow>
	call    pwm_delay   // 100us
    1b1c:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <pwm_delay>
	call    pwm_delay
    1b20:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <pwm_delay>

// M4
	mov		r25,r20
    1b24:	94 2f       	mov	r25, r20
	call	DelayHigh
    1b26:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <DelayHigh>
	sbi 	M4
    1b2a:	43 9a       	sbi	0x08, 3	; 8
	call	DelayLow
    1b2c:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <DelayLow>
	call    pwm_delay   // 100us
    1b30:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <pwm_delay>
	call    pwm_delay
    1b34:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <pwm_delay>

// M5
	mov		r25,r19
    1b38:	93 2f       	mov	r25, r19
	call	DelayHigh
    1b3a:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <DelayHigh>
	sbi 	M5
    1b3e:	41 9a       	sbi	0x08, 1	; 8
	call	DelayLow
    1b40:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <DelayLow>
	call    pwm_delay   // 100us
    1b44:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <pwm_delay>
	call    pwm_delay
    1b48:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <pwm_delay>

// M6
	mov		r25,r18
    1b4c:	92 2f       	mov	r25, r18
	call	DelayHigh
    1b4e:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <DelayHigh>
	sbi 	M6
    1b52:	40 9a       	sbi	0x08, 0	; 8
	call	DelayLow
    1b54:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <DelayLow>
	call    pwm_delay   // 100us
    1b58:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <pwm_delay>
	call    pwm_delay
    1b5c:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <pwm_delay>

// M7
	mov		r25,r17
    1b60:	91 2f       	mov	r25, r17
	call	DelayHigh
    1b62:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <DelayHigh>
	sbi 	M7
    1b66:	45 9a       	sbi	0x08, 5	; 8
	call	DelayLow
    1b68:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <DelayLow>
	call    pwm_delay   // 100us
    1b6c:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <pwm_delay>
	call    pwm_delay
    1b70:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <pwm_delay>

// M8
	mov		r25,r16
    1b74:	90 2f       	mov	r25, r16
	call	DelayHigh
    1b76:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <DelayHigh>
	sbi 	M8
    1b7a:	47 9a       	sbi	0x08, 7	; 8
	call	DelayLow
    1b7c:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <DelayLow>
// At this point, the largest pulse that we can generate is 256 * 8 = 2.048ms
// However we would like to be able to generate up to 2.100ms (150%) - an extra 52us
// So we can fluff it out another 200us so that we can subtract enough to keep r16 under 0xff or 256 :)
// With this setup, M1 can go down to 850 and M8 can go up to 2150

	call    pwm_delay   // 150us
    1b80:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <pwm_delay>
	call    pwm_delay
    1b84:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <pwm_delay>
	call    pwm_delay
    1b88:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <pwm_delay>

// Copy trimmed array data into regs
// This now represents steps of 8us chunks
	pop		XH			// M8
    1b8c:	bf 91       	pop	r27
	pop		XL
    1b8e:	af 91       	pop	r26
	call	shuffle_8
    1b90:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <shuffle_8>
	mov		r16,XL
    1b94:	0a 2f       	mov	r16, r26
	pop		XH			// M7
    1b96:	bf 91       	pop	r27
	pop		XL
    1b98:	af 91       	pop	r26
	call	shuffle_8
    1b9a:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <shuffle_8>
	mov		r17,XL
    1b9e:	1a 2f       	mov	r17, r26
	pop		XH			// M6
    1ba0:	bf 91       	pop	r27
	pop		XL
    1ba2:	af 91       	pop	r26
	call	shuffle_8
    1ba4:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <shuffle_8>
	mov		r18,XL
    1ba8:	2a 2f       	mov	r18, r26
	pop		XH			// M5
    1baa:	bf 91       	pop	r27
	pop		XL
    1bac:	af 91       	pop	r26
	call	shuffle_8
    1bae:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <shuffle_8>
	mov		r19,XL
    1bb2:	3a 2f       	mov	r19, r26
	pop		XH			// M4
    1bb4:	bf 91       	pop	r27
	pop		XL
    1bb6:	af 91       	pop	r26
	call	shuffle_8
    1bb8:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <shuffle_8>
	mov		r20,XL
    1bbc:	4a 2f       	mov	r20, r26
	pop		XH			// M3
    1bbe:	bf 91       	pop	r27
	pop		XL
    1bc0:	af 91       	pop	r26
	call	shuffle_8
    1bc2:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <shuffle_8>
	mov		r21,XL
    1bc6:	5a 2f       	mov	r21, r26
	pop		XH			// M2
    1bc8:	bf 91       	pop	r27
	pop		XL
    1bca:	af 91       	pop	r26
	call	shuffle_8
    1bcc:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <shuffle_8>
	mov		r22,XL
    1bd0:	6a 2f       	mov	r22, r26
	pop		XH			// M1
    1bd2:	bf 91       	pop	r27
	pop		XL
    1bd4:	af 91       	pop	r26
	call	shuffle_8
    1bd6:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <shuffle_8>
	mov		r23,XL
    1bda:	7a 2f       	mov	r23, r26

// Loop prep
	ldi 	YL,0x13		// 1			Set loop count to 113h or 275 (275 * 8us = 2200us)
    1bdc:	c3 e1       	ldi	r28, 0x13	; 19
	ldi		YH,0x01		// 1
    1bde:	d1 e0       	ldi	r29, 0x01	; 1
	clr		0			// 1 (7)
    1be0:	00 24       	eor	r0, r0

00001be2 <nloop>:

// Ninja loop - 7 cycles each side (8 x 7 = 56 + 6 to loop + 98 pad = 160 cycles)
// 20 cyles = 1us, 160 cycles = 8us

nloop:
	subi	r23,1		// 1 			ServoOut1
    1be2:	71 50       	subi	r23, 0x01	; 1
	brne	j1			// 2	1	
    1be4:	19 f4       	brne	.+6      	; 0x1bec <j1>
	cbi 	M1			// 		2		Clear output M1 if done (+5 = 1448 = 72.4us = 48)
    1be6:	46 98       	cbi	0x08, 6	; 8
	jmp		jj1			//		3
    1be8:	0c 94 f8 0d 	jmp	0x1bf0	; 0x1bf0 <jj1>

00001bec <j1>:
j1:
	rjmp 	.+0			// 2
    1bec:	00 c0       	rjmp	.+0      	; 0x1bee <j1+0x2>
	rjmp 	.+0			// 2
    1bee:	00 c0       	rjmp	.+0      	; 0x1bf0 <jj1>

00001bf0 <jj1>:
jj1:
	subi	r22,1		// 1			ServoOut2
    1bf0:	61 50       	subi	r22, 0x01	; 1
	brne	j2			// 2	1
    1bf2:	19 f4       	brne	.+6      	; 0x1bfa <j2>
	cbi 	M2			// 		2		Clear output M2 if done (+11 = 1285 = 64.25us = 40)
    1bf4:	44 98       	cbi	0x08, 4	; 8
	jmp		jj2			//		3
    1bf6:	0c 94 ff 0d 	jmp	0x1bfe	; 0x1bfe <jj2>

00001bfa <j2>:
j2:
	rjmp	.+0
    1bfa:	00 c0       	rjmp	.+0      	; 0x1bfc <j2+0x2>
	rjmp	.+0
    1bfc:	00 c0       	rjmp	.+0      	; 0x1bfe <jj2>

00001bfe <jj2>:
jj2:
	subi	r21,1
    1bfe:	51 50       	subi	r21, 0x01	; 1
	brne	j3
    1c00:	19 f4       	brne	.+6      	; 0x1c08 <j3>
	cbi 	M3
    1c02:	42 98       	cbi	0x08, 2	; 8
	jmp		jj3
    1c04:	0c 94 06 0e 	jmp	0x1c0c	; 0x1c0c <jj3>

00001c08 <j3>:
j3:
	rjmp	.+0
    1c08:	00 c0       	rjmp	.+0      	; 0x1c0a <j3+0x2>
	rjmp	.+0
    1c0a:	00 c0       	rjmp	.+0      	; 0x1c0c <jj3>

00001c0c <jj3>:
jj3:
	subi 	r20,1
    1c0c:	41 50       	subi	r20, 0x01	; 1
	brne	j4
    1c0e:	19 f4       	brne	.+6      	; 0x1c16 <j4>
	cbi 	M4
    1c10:	43 98       	cbi	0x08, 3	; 8
	jmp		jj4	
    1c12:	0c 94 0d 0e 	jmp	0x1c1a	; 0x1c1a <jj4>

00001c16 <j4>:
j4:
	rjmp 	.+0
    1c16:	00 c0       	rjmp	.+0      	; 0x1c18 <j4+0x2>
	rjmp 	.+0
    1c18:	00 c0       	rjmp	.+0      	; 0x1c1a <jj4>

00001c1a <jj4>:
jj4:
	subi	r19,1
    1c1a:	31 50       	subi	r19, 0x01	; 1
	brne	j5
    1c1c:	19 f4       	brne	.+6      	; 0x1c24 <j5>
	cbi 	M5
    1c1e:	41 98       	cbi	0x08, 1	; 8
	jmp		jj5
    1c20:	0c 94 14 0e 	jmp	0x1c28	; 0x1c28 <jj5>

00001c24 <j5>:
j5:
	rjmp 	.+0
    1c24:	00 c0       	rjmp	.+0      	; 0x1c26 <j5+0x2>
	rjmp 	.+0
    1c26:	00 c0       	rjmp	.+0      	; 0x1c28 <jj5>

00001c28 <jj5>:
jj5:
	subi	r18,1
    1c28:	21 50       	subi	r18, 0x01	; 1
	brne	j6
    1c2a:	19 f4       	brne	.+6      	; 0x1c32 <j6>
	cbi 	M6
    1c2c:	40 98       	cbi	0x08, 0	; 8
	jmp		jj6
    1c2e:	0c 94 1b 0e 	jmp	0x1c36	; 0x1c36 <jj6>

00001c32 <j6>:
j6:
	rjmp 	.+0
    1c32:	00 c0       	rjmp	.+0      	; 0x1c34 <j6+0x2>
	rjmp	.+0
    1c34:	00 c0       	rjmp	.+0      	; 0x1c36 <jj6>

00001c36 <jj6>:
jj6:
	subi	r17,1
    1c36:	11 50       	subi	r17, 0x01	; 1
	brne	j7
    1c38:	19 f4       	brne	.+6      	; 0x1c40 <j7>
	cbi 	M7
    1c3a:	45 98       	cbi	0x08, 5	; 8
	jmp		jj7
    1c3c:	0c 94 22 0e 	jmp	0x1c44	; 0x1c44 <jj7>

00001c40 <j7>:
j7:
	rjmp 	.+0
    1c40:	00 c0       	rjmp	.+0      	; 0x1c42 <j7+0x2>
	rjmp 	.+0
    1c42:	00 c0       	rjmp	.+0      	; 0x1c44 <jj7>

00001c44 <jj7>:
jj7:
	subi 	r16,1		// ServoOut 8
    1c44:	01 50       	subi	r16, 0x01	; 1
	brne	j8
    1c46:	19 f4       	brne	.+6      	; 0x1c4e <j8>
	cbi 	M8
    1c48:	47 98       	cbi	0x08, 7	; 8
	jmp		jj8
    1c4a:	0c 94 29 0e 	jmp	0x1c52	; 0x1c52 <jj8>

00001c4e <j8>:
j8:
	rjmp 	.+0
    1c4e:	00 c0       	rjmp	.+0      	; 0x1c50 <j8+0x2>
	rjmp 	.+0
    1c50:	00 c0       	rjmp	.+0      	; 0x1c52 <jj8>

00001c52 <jj8>:
jj8:
	call	pad_100_delay // (100)
    1c52:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <pad_100_delay>

	subi 	YL,1		// 1
    1c56:	c1 50       	subi	r28, 0x01	; 1
	sbc 	YH,0		// 1
    1c58:	d0 09       	sbc	r29, r0
	breq	skiploop	// 1	2		Loop until zero - 1 false 2 true
    1c5a:	11 f0       	breq	.+4      	; 0x1c60 <skiploop>
	jmp		nloop		// 3			Can't reach nloop with a brne alone
    1c5c:	0c 94 f1 0d 	jmp	0x1be2	; 0x1be2 <nloop>

00001c60 <skiploop>:

skiploop:
	pop		25			// 		2		Restore regs
    1c60:	9f 91       	pop	r25
	pop		24			// 		2
    1c62:	8f 91       	pop	r24
	pop		23			//		2
    1c64:	7f 91       	pop	r23
	pop		22			//		2
    1c66:	6f 91       	pop	r22
	pop		21			//		2
    1c68:	5f 91       	pop	r21
	pop		20			//		2
    1c6a:	4f 91       	pop	r20
	pop		19			//		2
    1c6c:	3f 91       	pop	r19
	pop		18			//		2
    1c6e:	2f 91       	pop	r18
	pop		17			//		2
    1c70:	1f 91       	pop	r17
	pop		16			//		2
    1c72:	0f 91       	pop	r16
	pop		YH			//		2
    1c74:	df 91       	pop	r29
	pop		YL			//		2
    1c76:	cf 91       	pop	r28
	pop		XH			//		2
    1c78:	bf 91       	pop	r27
	pop		XL			//		2
    1c7a:	af 91       	pop	r26
	pop		ZH			// 		2
    1c7c:	ff 91       	pop	r31
	pop		ZL			//		2
    1c7e:	ef 91       	pop	r30

	ret					//		4
    1c80:	08 95       	ret

00001c82 <output_servo_ppm_asm3>:
;*************************************************************************

	.global output_servo_ppm_asm3
	.func   output_servo_ppm_asm3
output_servo_ppm_asm3:
	push	16			// Save regs
    1c82:	0f 93       	push	r16
	push	17
    1c84:	1f 93       	push	r17
	push	18
    1c86:	2f 93       	push	r18

	ldi 	16,0x34		// 1			Set loop count to 834h or 2100
    1c88:	04 e3       	ldi	r16, 0x34	; 52
	ldi		17,0x08	
    1c8a:	18 e0       	ldi	r17, 0x08	; 8
	clr		0
    1c8c:	00 24       	eor	r0, r0

00001c8e <jump_table>:

jump_table:
	cpi		r24,0x00	; 0				
    1c8e:	80 30       	cpi	r24, 0x00	; 0
	breq	in1
    1c90:	71 f0       	breq	.+28     	; 0x1cae <in1>
	cpi		r24,0x01	; 1
    1c92:	81 30       	cpi	r24, 0x01	; 1
	breq	in2
    1c94:	79 f0       	breq	.+30     	; 0x1cb4 <in2>
	cpi		r24,0x02	; 2
    1c96:	82 30       	cpi	r24, 0x02	; 2
	breq	in3
    1c98:	81 f0       	breq	.+32     	; 0x1cba <in3>
	cpi		r24,0x03	; 3
    1c9a:	83 30       	cpi	r24, 0x03	; 3
	breq	in4
    1c9c:	89 f0       	breq	.+34     	; 0x1cc0 <in4>
	cpi		r24,0x04	; 4
    1c9e:	84 30       	cpi	r24, 0x04	; 4
	breq	in5
    1ca0:	91 f0       	breq	.+36     	; 0x1cc6 <in5>
	cpi		r24,0x05	; 5
    1ca2:	85 30       	cpi	r24, 0x05	; 5
	breq	in6
    1ca4:	99 f0       	breq	.+38     	; 0x1ccc <in6>
	cpi		r24,0x06	; 6
    1ca6:	86 30       	cpi	r24, 0x06	; 6
	breq	in7
    1ca8:	a1 f0       	breq	.+40     	; 0x1cd2 <in7>
	cpi		r24,0x07	; 7
    1caa:	87 30       	cpi	r24, 0x07	; 7
	breq	in8
    1cac:	a9 f0       	breq	.+42     	; 0x1cd8 <in8>

00001cae <in1>:

in1:sbi 	M1			// Set output high
    1cae:	46 9a       	sbi	0x08, 6	; 8
	jmp		loopin
    1cb0:	0c 94 6f 0e 	jmp	0x1cde	; 0x1cde <loopin>

00001cb4 <in2>:
in2:sbi 	M2
    1cb4:	44 9a       	sbi	0x08, 4	; 8
	jmp		loopin
    1cb6:	0c 94 6f 0e 	jmp	0x1cde	; 0x1cde <loopin>

00001cba <in3>:
in3:sbi 	M3	
    1cba:	42 9a       	sbi	0x08, 2	; 8
	jmp		loopin
    1cbc:	0c 94 6f 0e 	jmp	0x1cde	; 0x1cde <loopin>

00001cc0 <in4>:
in4:sbi 	M4
    1cc0:	43 9a       	sbi	0x08, 3	; 8
	jmp		loopin
    1cc2:	0c 94 6f 0e 	jmp	0x1cde	; 0x1cde <loopin>

00001cc6 <in5>:
in5:sbi 	M5
    1cc6:	41 9a       	sbi	0x08, 1	; 8
	jmp		loopin
    1cc8:	0c 94 6f 0e 	jmp	0x1cde	; 0x1cde <loopin>

00001ccc <in6>:
in6:sbi 	M6
    1ccc:	40 9a       	sbi	0x08, 0	; 8
	jmp		loopin
    1cce:	0c 94 6f 0e 	jmp	0x1cde	; 0x1cde <loopin>

00001cd2 <in7>:
in7:sbi 	M7
    1cd2:	45 9a       	sbi	0x08, 5	; 8
	jmp		loopin
    1cd4:	0c 94 6f 0e 	jmp	0x1cde	; 0x1cde <loopin>

00001cd8 <in8>:
in8:sbi 	M8
    1cd8:	47 9a       	sbi	0x08, 7	; 8
	jmp		loopin
    1cda:	0c 94 6f 0e 	jmp	0x1cde	; 0x1cde <loopin>

00001cde <loopin>:

// Loop - 20 cycles = 1us
loopin:
						// <---------	Left column is skip execution path
	rjmp .+0			// 2 	<----	Right column is pulse end execution path
    1cde:	00 c0       	rjmp	.+0      	; 0x1ce0 <loopin+0x2>
	rjmp .+0			// 2
    1ce0:	00 c0       	rjmp	.+0      	; 0x1ce2 <loopin+0x4>
	rjmp .+0			// 2
    1ce2:	00 c0       	rjmp	.+0      	; 0x1ce4 <loopin+0x6>
	rjmp .+0			// 2
    1ce4:	00 c0       	rjmp	.+0      	; 0x1ce6 <loopin+0x8>
	rjmp .+0			// 2
    1ce6:	00 c0       	rjmp	.+0      	; 0x1ce8 <loopin+0xa>
	rjmp .+0			// 2
    1ce8:	00 c0       	rjmp	.+0      	; 0x1cea <loopin+0xc>

	subi	r22,1		// 1 			Time servo pulse
    1cea:	61 50       	subi	r22, 0x01	; 1
	sbc 	r23,0		// 1
    1cec:	70 09       	sbc	r23, r0
	brne	loopout		// 2	1
    1cee:	11 f4       	brne	.+4      	; 0x1cf4 <loopout>

// Clear outputs if done
	ldi		r18,0x00	 // 1
    1cf0:	20 e0       	ldi	r18, 0x00	; 0
	out 	SERVO_OUT_KK20,r18// 1			Boom.
    1cf2:	28 b9       	out	0x08, r18	; 8

00001cf4 <loopout>:
	out 	SERVO_OUT_KK21,r18// 1			KK2.1 has a couple of outputs on Port A also.
#endif

// Exit
loopout:
	subi 	16,1		// 1			+4 cycles = total 20 cycles
    1cf4:	01 50       	subi	r16, 0x01	; 1
	sbc 	17,0		// 1
    1cf6:	10 09       	sbc	r17, r0
	brne	loopin		// 2	1		Loop until zero
    1cf8:	91 f7       	brne	.-28     	; 0x1cde <loopin>

	pop		18
    1cfa:	2f 91       	pop	r18
	pop		17			// Restore regs
    1cfc:	1f 91       	pop	r17
	pop		16
    1cfe:	0f 91       	pop	r16
	ret	
    1d00:	08 95       	ret

00001d02 <pwm_delay>:
;*************************************************************************	
; void pwm_delay(void) 50us output spacing delay (8 cycle loop - 400ns)
;*************************************************************************

pwm_delay:				// 4 to call
	push	16			// 1
    1d02:	0f 93       	push	r16
	ldi 	16,0x65		// 1
    1d04:	05 e6       	ldi	r16, 0x65	; 101

00001d06 <pwm_loop>:

pwm_loop:
	rjmp .+0			// 2
    1d06:	00 c0       	rjmp	.+0      	; 0x1d08 <pwm_loop+0x2>
	rjmp .+0			// 2
    1d08:	00 c0       	rjmp	.+0      	; 0x1d0a <pwm_loop+0x4>
	rjmp .+0			// 2
    1d0a:	00 c0       	rjmp	.+0      	; 0x1d0c <pwm_loop+0x6>
	subi	r16,1		// 1
    1d0c:	01 50       	subi	r16, 0x01	; 1
	brne	pwm_loop	// 2  1
    1d0e:	d9 f7       	brne	.-10     	; 0x1d06 <pwm_loop>

00001d10 <pwm_exit>:

pwm_exit:
	pop		16			//    1
    1d10:	0f 91       	pop	r16
	ret					//    4 to return
    1d12:	08 95       	ret

00001d14 <pad_100_delay>:
; pad_100_delay 98 cycle padding delay
; Takes 4 to call, so we need 94 cycles burnt here
;*************************************************************************

pad_100_delay:
	push	16			// 		2		Save regs
    1d14:	0f 93       	push	r16
	ldi 	16,0x09		// 		1		Set loop count to 09h or 9
    1d16:	09 e0       	ldi	r16, 0x09	; 9

00001d18 <pad_100>:

pad_100:				//				9 cycles, 8 on last
	rjmp .+0			// 2
    1d18:	00 c0       	rjmp	.+0      	; 0x1d1a <pad_100+0x2>
	rjmp .+0			// 2			8 x 9cyc + 8 = 80
    1d1a:	00 c0       	rjmp	.+0      	; 0x1d1c <pad_100+0x4>
	rjmp .+0			// 2
    1d1c:	00 c0       	rjmp	.+0      	; 0x1d1e <pad_100+0x6>

	subi 	16,1		// 1
    1d1e:	01 50       	subi	r16, 0x01	; 1
	brne	pad_100		// 2	1		Loop until zero	
    1d20:	d9 f7       	brne	.-10     	; 0x1d18 <pad_100>

	nop					// 		1		Trim to precisely the right value
    1d22:	00 00       	nop
	rjmp .+0			// 		2
    1d24:	00 c0       	rjmp	.+0      	; 0x1d26 <pad_100+0xe>
	rjmp .+0			// 		2
    1d26:	00 c0       	rjmp	.+0      	; 0x1d28 <pad_100+0x10>

	pop		16			// 		2		Restore regs
    1d28:	0f 91       	pop	r16
	ret					// 		4 (94 cycles)
    1d2a:	08 95       	ret

00001d2c <us_delay>:
; void us_delay(void) 1us delay for ninja skills
; Takes 4 to call, 4 to return, so we need 12 cycles burnt here
;*************************************************************************

us_delay:
	rjmp .+0			// 2
    1d2c:	00 c0       	rjmp	.+0      	; 0x1d2e <us_delay+0x2>
	rjmp .+0			// 2
    1d2e:	00 c0       	rjmp	.+0      	; 0x1d30 <us_delay+0x4>
	rjmp .+0			// 2
    1d30:	00 c0       	rjmp	.+0      	; 0x1d32 <us_delay+0x6>
	rjmp .+0			// 2
    1d32:	00 c0       	rjmp	.+0      	; 0x1d34 <us_delay+0x8>
	ret					// 4 (16 cycles)
    1d34:	08 95       	ret

00001d36 <shuffle_8>:
;*************************************************************************	
; Space-saving macro-ish suroutines
;*************************************************************************

shuffle_8: // (10 cycles)
	lsr		XH			// 1 Rotate right into carry
    1d36:	b6 95       	lsr	r27
	ror		XL			// 1 Rotate right with carry from MSB
    1d38:	a7 95       	ror	r26
	lsr		XH			// 1
    1d3a:	b6 95       	lsr	r27
	ror		XL			// 1
    1d3c:	a7 95       	ror	r26
	lsr		XH			// 1
    1d3e:	b6 95       	lsr	r27
	ror		XL			// 1
    1d40:	a7 95       	ror	r26
	ret					// 4
    1d42:	08 95       	ret

00001d44 <DelayHigh>:
; 10 and 150 cycles at 1us intervals per value in r26
; 
;*************************************************************************

DelayHigh:				// (0)	(1)	(2+) each extra is +20
	ldi		YL,0x07		// 1	1	1
    1d44:	c7 e0       	ldi	r28, 0x07	; 7
	andi	r25,0x07	
    1d46:	97 70       	andi	r25, 0x07	; 7
	eor		YL,r25		// 1 	1	1
    1d48:	c9 27       	eor	r28, r25
	breq	LoopHighOut1// 2	1	1
    1d4a:	31 f0       	breq	.+12     	; 0x1d58 <LoopHighOut1>

00001d4c <LoopHigh>:
LoopHigh:
	call    us_delay	// 		16	16
    1d4c:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <us_delay>
	dec 	YL			// 		1	1
    1d50:	ca 95       	dec	r28
	breq	LoopHighOut2// 		2	1/2
    1d52:	09 f0       	breq	.+2      	; 0x1d56 <LoopHighOut2>
	rjmp	LoopHigh	// 			2
    1d54:	fb cf       	rjmp	.-10     	; 0x1d4c <LoopHigh>

00001d56 <LoopHighOut2>:
LoopHighOut2:
	rjmp .+0			// 		2	2
    1d56:	00 c0       	rjmp	.+0      	; 0x1d58 <LoopHighOut1>

00001d58 <LoopHighOut1>:
LoopHighOut1:
	nop					// 1	1	1
    1d58:	00 00       	nop
    ret					// 4	4	4
    1d5a:	08 95       	ret

00001d5c <DelayLow>:
; regardless of the value of r25
;
;*************************************************************************

DelayLow:				// (0)	(1)	(2+) each extra is +20
	mov		YL,r25		// 1	1	
    1d5c:	c9 2f       	mov	r28, r25
	andi	YL,0x07	
    1d5e:	c7 70       	andi	r28, 0x07	; 7
	breq	LoopLowOut1	// 2	1	1
    1d60:	31 f0       	breq	.+12     	; 0x1d6e <LoopLowOut1>

00001d62 <LoopLow>:
LoopLow:
	call    us_delay	//		16	16
    1d62:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <us_delay>
	dec 	YL			//		1	1
    1d66:	ca 95       	dec	r28
	breq	LoopLowOut2	//		2	1/2
    1d68:	09 f0       	breq	.+2      	; 0x1d6c <LoopLowOut2>
	rjmp	LoopLow		//			2
    1d6a:	fb cf       	rjmp	.-10     	; 0x1d62 <LoopLow>

00001d6c <LoopLowOut2>:
LoopLowOut2:
	rjmp .+0			// 		2	2
    1d6c:	00 c0       	rjmp	.+0      	; 0x1d6e <LoopLowOut1>

00001d6e <LoopLowOut1>:
LoopLowOut1:
    ret					// 4	4	4
    1d6e:	08 95       	ret

00001d70 <get_raw_accs>:
//***************************************************************
// Fill accADC with RPY data appropriate to the board orientation
//***************************************************************

void get_raw_accs(void)
{
    1d70:	a6 e0       	ldi	r26, 0x06	; 6
    1d72:	b0 e0       	ldi	r27, 0x00	; 0
    1d74:	ee eb       	ldi	r30, 0xBE	; 190
    1d76:	fe e0       	ldi	r31, 0x0E	; 14
    1d78:	0c 94 2b 3d 	jmp	0x7a56	; 0x7a56 <__prologue_saves__+0x20>
	temp2 = Accs[5];
	RawADC[YAW] = (temp1 + temp2) >> 6;

#else
	// Get data from analog inputs for KK2.0
	read_adc(AIN_Y_ACC);		// Read Y acc ADC4 (Roll)
    1d7c:	86 e0       	ldi	r24, 0x06	; 6
    1d7e:	0e 94 48 10 	call	0x2090	; 0x2090 <read_adc>
	RawADC[ROLL] = ADCW;
    1d82:	80 91 78 00 	lds	r24, 0x0078
    1d86:	90 91 79 00 	lds	r25, 0x0079
    1d8a:	9a 83       	std	Y+2, r25	; 0x02
    1d8c:	89 83       	std	Y+1, r24	; 0x01

	read_adc(AIN_X_ACC);		// Read X acc ADC5 (Pitch)
    1d8e:	85 e0       	ldi	r24, 0x05	; 5
    1d90:	0e 94 48 10 	call	0x2090	; 0x2090 <read_adc>
	RawADC[PITCH] = ADCW;
    1d94:	80 91 78 00 	lds	r24, 0x0078
    1d98:	90 91 79 00 	lds	r25, 0x0079
    1d9c:	9c 83       	std	Y+4, r25	; 0x04
    1d9e:	8b 83       	std	Y+3, r24	; 0x03

	read_adc(AIN_Z_ACC);		// Read Z acc ADC2 (Z)
    1da0:	87 e0       	ldi	r24, 0x07	; 7
    1da2:	0e 94 48 10 	call	0x2090	; 0x2090 <read_adc>
	RawADC[YAW] = ADCW;
    1da6:	80 91 78 00 	lds	r24, 0x0078
    1daa:	90 91 79 00 	lds	r25, 0x0079
    1dae:	9e 83       	std	Y+6, r25	; 0x06
    1db0:	8d 83       	std	Y+5, r24	; 0x05

	// Reorient the data as per the board orientation	
	for (i=0; i<NUMBEROFAXIS; i++)
	{
		// Rearrange the sensors
		accADC[i] = RawADC[(int8_t)pgm_read_byte(&ACC_RPY_Order[Config.Orientation][i])];
    1db2:	20 91 07 06 	lds	r18, 0x0607
    1db6:	ad e2       	ldi	r26, 0x2D	; 45
    1db8:	b1 e0       	ldi	r27, 0x01	; 1
    1dba:	43 e0       	ldi	r20, 0x03	; 3
    1dbc:	24 02       	muls	r18, r20
    1dbe:	90 01       	movw	r18, r0
    1dc0:	11 24       	eor	r1, r1
    1dc2:	80 e0       	ldi	r24, 0x00	; 0
    1dc4:	90 e0       	ldi	r25, 0x00	; 0
    1dc6:	2e 51       	subi	r18, 0x1E	; 30
    1dc8:	3f 4f       	sbci	r19, 0xFF	; 255
    1dca:	f9 01       	movw	r30, r18
    1dcc:	e8 0f       	add	r30, r24
    1dce:	f9 1f       	adc	r31, r25
    1dd0:	e4 91       	lpm	r30, Z
    1dd2:	ee 0f       	add	r30, r30
    1dd4:	ff 0b       	sbc	r31, r31
    1dd6:	41 e0       	ldi	r20, 0x01	; 1
    1dd8:	50 e0       	ldi	r21, 0x00	; 0
    1dda:	4c 0f       	add	r20, r28
    1ddc:	5d 1f       	adc	r21, r29
    1dde:	e4 0f       	add	r30, r20
    1de0:	f5 1f       	adc	r31, r21
    1de2:	40 81       	ld	r20, Z
    1de4:	51 81       	ldd	r21, Z+1	; 0x01
    1de6:	4d 93       	st	X+, r20
    1de8:	5d 93       	st	X+, r21
    1dea:	01 96       	adiw	r24, 0x01	; 1
	RawADC[YAW] = ADCW;

#endif

	// Reorient the data as per the board orientation	
	for (i=0; i<NUMBEROFAXIS; i++)
    1dec:	83 30       	cpi	r24, 0x03	; 3
    1dee:	91 05       	cpc	r25, r1
    1df0:	61 f7       	brne	.-40     	; 0x1dca <get_raw_accs+0x5a>
	{
		// Rearrange the sensors
		accADC[i] = RawADC[(int8_t)pgm_read_byte(&ACC_RPY_Order[Config.Orientation][i])];
	}
}
    1df2:	26 96       	adiw	r28, 0x06	; 6
    1df4:	e2 e0       	ldi	r30, 0x02	; 2
    1df6:	0c 94 47 3d 	jmp	0x7a8e	; 0x7a8e <__epilogue_restores__+0x20>

00001dfa <ReadAcc>:

int16_t accADC[NUMBEROFAXIS];	// Holds Acc ADC values - alwys in RPY order
int16_t accVert = 0;			// Holds the level-zeroed Z-acc value. Used for height damping in hover only.

void ReadAcc()
{
    1dfa:	cf 92       	push	r12
    1dfc:	df 92       	push	r13
    1dfe:	ef 92       	push	r14
    1e00:	ff 92       	push	r15
    1e02:	1f 93       	push	r17
    1e04:	cf 93       	push	r28
    1e06:	df 93       	push	r29
	uint8_t i;

	get_raw_accs();				// Updates accADC[] (RPY)
    1e08:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <get_raw_accs>

	// Use default Config.AccZero for Acc-Z if inverse calibration not done yet
	// Actual zero is held in Config.AccZeroNormZ waiting for inv calibration
	if (!(Config.Main_flags & (1 << inv_cal_done)))
    1e0c:	80 91 3c 07 	lds	r24, 0x073C
    1e10:	80 fd       	sbrc	r24, 0
    1e12:	03 c0       	rjmp	.+6      	; 0x1e1a <ReadAcc+0x20>
	{
#ifdef KK21 
		Config.AccZero[YAW] = 0;
#else
		Config.AccZero[YAW] = 643;
    1e14:	83 e8       	ldi	r24, 0x83	; 131
    1e16:	92 e0       	ldi	r25, 0x02	; 2
    1e18:	0a c0       	rjmp	.+20     	; 0x1e2e <ReadAcc+0x34>

	// If inverted cal done, Config.AccZeroNormZ and Config.AccZeroDiff have
	// valid values
	else
	{
		Config.AccZero[YAW] = Config.AccZeroNormZ - Config.AccZeroDiff;
    1e1a:	80 91 25 07 	lds	r24, 0x0725
    1e1e:	90 91 26 07 	lds	r25, 0x0726
    1e22:	20 91 29 07 	lds	r18, 0x0729
    1e26:	30 91 2a 07 	lds	r19, 0x072A
    1e2a:	82 1b       	sub	r24, r18
    1e2c:	93 0b       	sbc	r25, r19
    1e2e:	90 93 24 07 	sts	0x0724, r25
    1e32:	80 93 23 07 	sts	0x0723, r24
	{
		// Remove offsets from acc outputs
		accADC[i] -= Config.AccZero[i];

		// Change polarity
		accADC[i] *= (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation][i]);
    1e36:	20 91 07 06 	lds	r18, 0x0607
    1e3a:	cf e1       	ldi	r28, 0x1F	; 31
    1e3c:	d7 e0       	ldi	r29, 0x07	; 7
    1e3e:	ad e2       	ldi	r26, 0x2D	; 45
    1e40:	b1 e0       	ldi	r27, 0x01	; 1
    1e42:	83 e0       	ldi	r24, 0x03	; 3
    1e44:	28 02       	muls	r18, r24
    1e46:	90 01       	movw	r18, r0
    1e48:	11 24       	eor	r1, r1
    1e4a:	80 e0       	ldi	r24, 0x00	; 0
    1e4c:	90 e0       	ldi	r25, 0x00	; 0
    1e4e:	20 53       	subi	r18, 0x30	; 48
    1e50:	3f 4f       	sbci	r19, 0xFF	; 255
	}

	for (i=0; i<NUMBEROFAXIS; i++)
	{
		// Remove offsets from acc outputs
		accADC[i] -= Config.AccZero[i];
    1e52:	69 91       	ld	r22, Y+
    1e54:	79 91       	ld	r23, Y+
    1e56:	f9 01       	movw	r30, r18
    1e58:	e8 0f       	add	r30, r24
    1e5a:	f9 1f       	adc	r31, r25

		// Change polarity
		accADC[i] *= (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation][i]);
    1e5c:	14 91       	lpm	r17, Z
	}

	for (i=0; i<NUMBEROFAXIS; i++)
	{
		// Remove offsets from acc outputs
		accADC[i] -= Config.AccZero[i];
    1e5e:	4d 91       	ld	r20, X+
    1e60:	5c 91       	ld	r21, X
    1e62:	11 97       	sbiw	r26, 0x01	; 1
    1e64:	46 1b       	sub	r20, r22
    1e66:	57 0b       	sbc	r21, r23

		// Change polarity
		accADC[i] *= (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation][i]);
    1e68:	14 03       	mulsu	r17, r20
    1e6a:	b0 01       	movw	r22, r0
    1e6c:	15 9f       	mul	r17, r21
    1e6e:	70 0d       	add	r23, r0
    1e70:	11 24       	eor	r1, r1
    1e72:	6d 93       	st	X+, r22
    1e74:	7d 93       	st	X+, r23
    1e76:	01 96       	adiw	r24, 0x01	; 1
	else
	{
		Config.AccZero[YAW] = Config.AccZeroNormZ - Config.AccZeroDiff;
	}

	for (i=0; i<NUMBEROFAXIS; i++)
    1e78:	83 30       	cpi	r24, 0x03	; 3
    1e7a:	91 05       	cpc	r25, r1
    1e7c:	51 f7       	brne	.-44     	; 0x1e52 <ReadAcc+0x58>


	// Recalculate current accVert using filtered acc value
	// Note that AccSmooth[YAW] is already zeroed around 1G so we have to re-add 
	// the zero back here so that Config.AccZeroNormZ subtracts the correct amount
	 accVert = accSmooth[YAW] - Config.AccZero[YAW] + Config.AccZeroNormZ ;
    1e7e:	60 91 23 07 	lds	r22, 0x0723
    1e82:	70 91 24 07 	lds	r23, 0x0724
    1e86:	88 27       	eor	r24, r24
    1e88:	77 fd       	sbrc	r23, 7
    1e8a:	80 95       	com	r24
    1e8c:	98 2f       	mov	r25, r24
    1e8e:	0e 94 de 3a 	call	0x75bc	; 0x75bc <__floatsisf>
    1e92:	9b 01       	movw	r18, r22
    1e94:	ac 01       	movw	r20, r24
    1e96:	60 91 76 05 	lds	r22, 0x0576
    1e9a:	70 91 77 05 	lds	r23, 0x0577
    1e9e:	80 91 78 05 	lds	r24, 0x0578
    1ea2:	90 91 79 05 	lds	r25, 0x0579
    1ea6:	0e 94 b2 39 	call	0x7364	; 0x7364 <__subsf3>
    1eaa:	6b 01       	movw	r12, r22
    1eac:	7c 01       	movw	r14, r24
    1eae:	60 91 25 07 	lds	r22, 0x0725
    1eb2:	70 91 26 07 	lds	r23, 0x0726
    1eb6:	88 27       	eor	r24, r24
    1eb8:	77 fd       	sbrc	r23, 7
    1eba:	80 95       	com	r24
    1ebc:	98 2f       	mov	r25, r24
    1ebe:	0e 94 de 3a 	call	0x75bc	; 0x75bc <__floatsisf>
    1ec2:	9b 01       	movw	r18, r22
    1ec4:	ac 01       	movw	r20, r24
    1ec6:	c7 01       	movw	r24, r14
    1ec8:	b6 01       	movw	r22, r12
    1eca:	0e 94 b3 39 	call	0x7366	; 0x7366 <__addsf3>
    1ece:	0e 94 ab 3a 	call	0x7556	; 0x7556 <__fixsfsi>
    1ed2:	70 93 09 01 	sts	0x0109, r23
    1ed6:	60 93 08 01 	sts	0x0108, r22

}
    1eda:	df 91       	pop	r29
    1edc:	cf 91       	pop	r28
    1ede:	1f 91       	pop	r17
    1ee0:	ff 90       	pop	r15
    1ee2:	ef 90       	pop	r14
    1ee4:	df 90       	pop	r13
    1ee6:	cf 90       	pop	r12
    1ee8:	08 95       	ret

00001eea <CalibrateAcc>:
//***************************************************************
// Calibration routines
//***************************************************************

void CalibrateAcc(int8_t type)
{
    1eea:	a6 e0       	ldi	r26, 0x06	; 6
    1eec:	b0 e0       	ldi	r27, 0x00	; 0
    1eee:	eb e7       	ldi	r30, 0x7B	; 123
    1ef0:	ff e0       	ldi	r31, 0x0F	; 15
    1ef2:	0c 94 2a 3d 	jmp	0x7a54	; 0x7a54 <__prologue_saves__+0x1e>
	uint8_t i;
	int16_t accZero[NUMBEROFAXIS] = {0,0,0};	// Used for calibrating Accs on ground
    1ef6:	1a 82       	std	Y+2, r1	; 0x02
    1ef8:	19 82       	std	Y+1, r1	; 0x01
    1efa:	1c 82       	std	Y+4, r1	; 0x04
    1efc:	1b 82       	std	Y+3, r1	; 0x03
    1efe:	1e 82       	std	Y+6, r1	; 0x06
    1f00:	1d 82       	std	Y+5, r1	; 0x05

	// Calibrate acc
	if (type == NORMAL)
    1f02:	81 11       	cpse	r24, r1
    1f04:	51 c0       	rjmp	.+162    	; 0x1fa8 <CalibrateAcc+0xbe>
    1f06:	10 e2       	ldi	r17, 0x20	; 32
	{
		// Get average zero value (over 32 readings)
		for (i=0; i<32; i++)
		{
			get_raw_accs();						// Updates accADC[] with signals reoriented into (RPY)
    1f08:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <get_raw_accs>

			accZero[ROLL] += accADC[ROLL];
    1f0c:	89 81       	ldd	r24, Y+1	; 0x01
    1f0e:	9a 81       	ldd	r25, Y+2	; 0x02
    1f10:	20 91 2d 01 	lds	r18, 0x012D
    1f14:	30 91 2e 01 	lds	r19, 0x012E
    1f18:	82 0f       	add	r24, r18
    1f1a:	93 1f       	adc	r25, r19
    1f1c:	9a 83       	std	Y+2, r25	; 0x02
    1f1e:	89 83       	std	Y+1, r24	; 0x01
			accZero[PITCH] += accADC[PITCH];						
    1f20:	8b 81       	ldd	r24, Y+3	; 0x03
    1f22:	9c 81       	ldd	r25, Y+4	; 0x04
    1f24:	20 91 2f 01 	lds	r18, 0x012F
    1f28:	30 91 30 01 	lds	r19, 0x0130
    1f2c:	82 0f       	add	r24, r18
    1f2e:	93 1f       	adc	r25, r19
    1f30:	9c 83       	std	Y+4, r25	; 0x04
    1f32:	8b 83       	std	Y+3, r24	; 0x03
			accZero[YAW] += accADC[YAW];		
    1f34:	8d 81       	ldd	r24, Y+5	; 0x05
    1f36:	9e 81       	ldd	r25, Y+6	; 0x06
    1f38:	20 91 31 01 	lds	r18, 0x0131
    1f3c:	30 91 32 01 	lds	r19, 0x0132
    1f40:	82 0f       	add	r24, r18
    1f42:	93 1f       	adc	r25, r19
    1f44:	9e 83       	std	Y+6, r25	; 0x06
    1f46:	8d 83       	std	Y+5, r24	; 0x05
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1f48:	8f e4       	ldi	r24, 0x4F	; 79
    1f4a:	93 ec       	ldi	r25, 0xC3	; 195
    1f4c:	01 97       	sbiw	r24, 0x01	; 1
    1f4e:	f1 f7       	brne	.-4      	; 0x1f4c <CalibrateAcc+0x62>
    1f50:	00 c0       	rjmp	.+0      	; 0x1f52 <CalibrateAcc+0x68>
    1f52:	00 00       	nop
    1f54:	11 50       	subi	r17, 0x01	; 1

	// Calibrate acc
	if (type == NORMAL)
	{
		// Get average zero value (over 32 readings)
		for (i=0; i<32; i++)
    1f56:	c1 f6       	brne	.-80     	; 0x1f08 <CalibrateAcc+0x1e>
    1f58:	fe 01       	movw	r30, r28
    1f5a:	31 96       	adiw	r30, 0x01	; 1
    1f5c:	9e 01       	movw	r18, r28
    1f5e:	29 5f       	subi	r18, 0xF9	; 249
    1f60:	3f 4f       	sbci	r19, 0xFF	; 255
		}

		for (i=0; i<NUMBEROFAXIS; i++)			// For selected axis in RPY order
		{
			// Round and divide by 32
			accZero[i] = ((accZero[i] + 16) >> 5);
    1f62:	80 81       	ld	r24, Z
    1f64:	91 81       	ldd	r25, Z+1	; 0x01
    1f66:	40 96       	adiw	r24, 0x10	; 16
    1f68:	75 e0       	ldi	r23, 0x05	; 5
    1f6a:	95 95       	asr	r25
    1f6c:	87 95       	ror	r24
    1f6e:	7a 95       	dec	r23
    1f70:	e1 f7       	brne	.-8      	; 0x1f6a <CalibrateAcc+0x80>
    1f72:	81 93       	st	Z+, r24
    1f74:	91 93       	st	Z+, r25
			accZero[YAW] += accADC[YAW];		

			_delay_ms(10);						// Get a better acc average over time
		}

		for (i=0; i<NUMBEROFAXIS; i++)			// For selected axis in RPY order
    1f76:	e2 17       	cp	r30, r18
    1f78:	f3 07       	cpc	r31, r19
    1f7a:	99 f7       	brne	.-26     	; 0x1f62 <CalibrateAcc+0x78>
			// Round and divide by 32
			accZero[i] = ((accZero[i] + 16) >> 5);
		}

		// Reset zeros to normal cal
		Config.AccZero[ROLL] = accZero[ROLL]; 
    1f7c:	89 81       	ldd	r24, Y+1	; 0x01
    1f7e:	9a 81       	ldd	r25, Y+2	; 0x02
    1f80:	90 93 20 07 	sts	0x0720, r25
    1f84:	80 93 1f 07 	sts	0x071F, r24
		Config.AccZero[PITCH] = accZero[PITCH]; 
    1f88:	8b 81       	ldd	r24, Y+3	; 0x03
    1f8a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f8c:	90 93 22 07 	sts	0x0722, r25
    1f90:	80 93 21 07 	sts	0x0721, r24
		Config.AccZeroNormZ = accZero[YAW]; 
    1f94:	8d 81       	ldd	r24, Y+5	; 0x05
    1f96:	9e 81       	ldd	r25, Y+6	; 0x06
    1f98:	90 93 26 07 	sts	0x0726, r25
    1f9c:	80 93 25 07 	sts	0x0725, r24

		// Flag that normal cal done
		Config.Main_flags |= (1 << normal_cal_done);
    1fa0:	80 91 3c 07 	lds	r24, 0x073C
    1fa4:	82 60       	ori	r24, 0x02	; 2
    1fa6:	66 c0       	rjmp	.+204    	; 0x2074 <CalibrateAcc+0x18a>

	else
	// Calibrate inverted acc
	{
		// Only update the inverted cal value if preceeded by a normal calibration
		if (Config.Main_flags & (1 << normal_cal_done))
    1fa8:	80 91 3c 07 	lds	r24, 0x073C
    1fac:	81 ff       	sbrs	r24, 1
    1fae:	66 c0       	rjmp	.+204    	; 0x207c <CalibrateAcc+0x192>
		{
			// Get average zero value (over 32 readings)
			Config.AccZeroInvZ = 0;
    1fb0:	10 92 28 07 	sts	0x0728, r1
    1fb4:	10 92 27 07 	sts	0x0727, r1
    1fb8:	10 e2       	ldi	r17, 0x20	; 32

			for (i=0; i<32; i++)
			{
				get_raw_accs();					// Updates gyroADC[] with reoriented vales
    1fba:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <get_raw_accs>
				Config.AccZeroInvZ += accADC[YAW];		
    1fbe:	80 91 27 07 	lds	r24, 0x0727
    1fc2:	90 91 28 07 	lds	r25, 0x0728
    1fc6:	20 91 31 01 	lds	r18, 0x0131
    1fca:	30 91 32 01 	lds	r19, 0x0132
    1fce:	82 0f       	add	r24, r18
    1fd0:	93 1f       	adc	r25, r19
    1fd2:	90 93 28 07 	sts	0x0728, r25
    1fd6:	80 93 27 07 	sts	0x0727, r24
    1fda:	8f e4       	ldi	r24, 0x4F	; 79
    1fdc:	93 ec       	ldi	r25, 0xC3	; 195
    1fde:	01 97       	sbiw	r24, 0x01	; 1
    1fe0:	f1 f7       	brne	.-4      	; 0x1fde <CalibrateAcc+0xf4>
    1fe2:	00 c0       	rjmp	.+0      	; 0x1fe4 <CalibrateAcc+0xfa>
    1fe4:	00 00       	nop
    1fe6:	11 50       	subi	r17, 0x01	; 1
		if (Config.Main_flags & (1 << normal_cal_done))
		{
			// Get average zero value (over 32 readings)
			Config.AccZeroInvZ = 0;

			for (i=0; i<32; i++)
    1fe8:	41 f7       	brne	.-48     	; 0x1fba <CalibrateAcc+0xd0>
				Config.AccZeroInvZ += accADC[YAW];		
				_delay_ms(10);					// Get a better acc average over time
			}

			// Round and divide by 32
			Config.AccZeroInvZ = ((Config.AccZeroInvZ + 16) >> 5);		// Inverted zero point
    1fea:	80 91 27 07 	lds	r24, 0x0727
    1fee:	90 91 28 07 	lds	r25, 0x0728
    1ff2:	40 96       	adiw	r24, 0x10	; 16
    1ff4:	55 e0       	ldi	r21, 0x05	; 5
    1ff6:	95 95       	asr	r25
    1ff8:	87 95       	ror	r24
    1ffa:	5a 95       	dec	r21
    1ffc:	e1 f7       	brne	.-8      	; 0x1ff6 <CalibrateAcc+0x10c>
    1ffe:	90 93 28 07 	sts	0x0728, r25
    2002:	80 93 27 07 	sts	0x0727, r24
			// Test if board is actually inverted relative to board orientation.
			// We have to do this as get_raw_accs() does not reorient the data
#ifdef KK21 
			if ((Config.AccZeroInvZ * (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation][YAW])) < 0) // Upside down
#else
			if ((((int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation][YAW]) == 1) && (Config.AccZeroInvZ < Config.AccZero[YAW])) || // Forward, Aft and Sideways 
    2006:	20 91 07 06 	lds	r18, 0x0607
    200a:	33 27       	eor	r19, r19
    200c:	27 fd       	sbrc	r18, 7
    200e:	30 95       	com	r19
    2010:	f9 01       	movw	r30, r18
    2012:	ee 0f       	add	r30, r30
    2014:	ff 1f       	adc	r31, r31
    2016:	e2 0f       	add	r30, r18
    2018:	f3 1f       	adc	r31, r19
    201a:	ee 52       	subi	r30, 0x2E	; 46
    201c:	ff 4f       	sbci	r31, 0xFF	; 255
    201e:	24 91       	lpm	r18, Z
    2020:	21 30       	cpi	r18, 0x01	; 1
    2022:	39 f4       	brne	.+14     	; 0x2032 <CalibrateAcc+0x148>
    2024:	20 91 23 07 	lds	r18, 0x0723
    2028:	30 91 24 07 	lds	r19, 0x0724
    202c:	82 17       	cp	r24, r18
    202e:	93 07       	cpc	r25, r19
    2030:	54 f0       	brlt	.+20     	; 0x2046 <CalibrateAcc+0x15c>
			    (((int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation][YAW]) == -1) && (Config.AccZeroInvZ > Config.AccZero[YAW])))  // Vertical and Upside down
    2032:	e4 91       	lpm	r30, Z
			// Test if board is actually inverted relative to board orientation.
			// We have to do this as get_raw_accs() does not reorient the data
#ifdef KK21 
			if ((Config.AccZeroInvZ * (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation][YAW])) < 0) // Upside down
#else
			if ((((int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation][YAW]) == 1) && (Config.AccZeroInvZ < Config.AccZero[YAW])) || // Forward, Aft and Sideways 
    2034:	ef 3f       	cpi	r30, 0xFF	; 255
    2036:	11 f5       	brne	.+68     	; 0x207c <CalibrateAcc+0x192>
			    (((int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation][YAW]) == -1) && (Config.AccZeroInvZ > Config.AccZero[YAW])))  // Vertical and Upside down
    2038:	20 91 23 07 	lds	r18, 0x0723
    203c:	30 91 24 07 	lds	r19, 0x0724
    2040:	28 17       	cp	r18, r24
    2042:	39 07       	cpc	r19, r25
    2044:	dc f4       	brge	.+54     	; 0x207c <CalibrateAcc+0x192>
#endif
			{

				// Reset zero to halfway between min and max Z
				Config.AccZeroDiff = ((Config.AccZeroNormZ - Config.AccZeroInvZ) >> 1);
    2046:	20 91 25 07 	lds	r18, 0x0725
    204a:	30 91 26 07 	lds	r19, 0x0726
    204e:	a9 01       	movw	r20, r18
    2050:	48 1b       	sub	r20, r24
    2052:	59 0b       	sbc	r21, r25
    2054:	ca 01       	movw	r24, r20
    2056:	95 95       	asr	r25
    2058:	87 95       	ror	r24
    205a:	90 93 2a 07 	sts	0x072A, r25
    205e:	80 93 29 07 	sts	0x0729, r24
				Config.AccZero[YAW] = Config.AccZeroNormZ - Config.AccZeroDiff; // Config.AccZero[YAW] is now valid to use
    2062:	28 1b       	sub	r18, r24
    2064:	39 0b       	sbc	r19, r25
    2066:	30 93 24 07 	sts	0x0724, r19
    206a:	20 93 23 07 	sts	0x0723, r18

				// Flag that inverted cal done
				Config.Main_flags |= (1 << inv_cal_done);
    206e:	80 91 3c 07 	lds	r24, 0x073C
    2072:	81 60       	ori	r24, 0x01	; 1
    2074:	80 93 3c 07 	sts	0x073C, r24

				Save_Config_to_EEPROM();
    2078:	0e 94 31 16 	call	0x2c62	; 0x2c62 <Save_Config_to_EEPROM>
			}
		}
	}
}
    207c:	26 96       	adiw	r28, 0x06	; 6
    207e:	e3 e0       	ldi	r30, 0x03	; 3
    2080:	0c 94 46 3d 	jmp	0x7a8c	; 0x7a8c <__epilogue_restores__+0x1e>

00002084 <Init_ADC>:
// ADC subroutines
//***********************************************************

void Init_ADC(void)
{
	DIDR0 	= 0b11111111;					// Digital Input Disable Register - ADC0~7 Digital Input Disable
    2084:	8f ef       	ldi	r24, 0xFF	; 255
    2086:	80 93 7e 00 	sts	0x007E, r24
	ADCSRB 	= 0b00000000; 					// ADC Control and Status Register B - ADTS2:0
    208a:	10 92 7b 00 	sts	0x007B, r1
    208e:	08 95       	ret

00002090 <read_adc>:
}

void read_adc(uint8_t channel)
{
	ADMUX = channel;
    2090:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA 	= 0b11000110;					// ADEN, ADSC, ADPS1,2
    2094:	86 ec       	ldi	r24, 0xC6	; 198
    2096:	80 93 7a 00 	sts	0x007A, r24
	while (ADCSRA & (1 << ADSC));			// Wait to complete. Result is in ADCW
    209a:	80 91 7a 00 	lds	r24, 0x007A
    209e:	86 fd       	sbrc	r24, 6
    20a0:	fc cf       	rjmp	.-8      	; 0x209a <read_adc+0xa>
}
    20a2:	08 95       	ret

000020a4 <Display_balance>:
//************************************************************
// Code
//************************************************************

void Display_balance(void)
{
    20a4:	af 92       	push	r10
    20a6:	bf 92       	push	r11
    20a8:	cf 92       	push	r12
    20aa:	df 92       	push	r13
    20ac:	ef 92       	push	r14
    20ae:	0f 93       	push	r16
    20b0:	cf 93       	push	r28
    20b2:	df 93       	push	r29
	uint16_t ticker_16 = 0;
	uint16_t LoopTCNT1 = 0;
    20b4:	c1 2c       	mov	r12, r1
    20b6:	d1 2c       	mov	r13, r1
	int16_t	x_pos, y_pos;

	while(BUTTON1 != 0)
    20b8:	1f 9b       	sbis	0x03, 7	; 3
    20ba:	85 c0       	rjmp	.+266    	; 0x21c6 <Display_balance+0x122>
	{
		// Read sensors
		ReadGyros();
    20bc:	0e 94 d3 1c 	call	0x39a6	; 0x39a6 <ReadGyros>
		ReadAcc();
    20c0:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <ReadAcc>

		// Time the loop for the IMU
		// ticker_16 is incremented at 2.5MHz (400ns) - max 26.2ms
		ticker_16 = (uint16_t)((uint16_t)TCNT1 - LoopTCNT1);	
    20c4:	80 91 84 00 	lds	r24, 0x0084
    20c8:	90 91 85 00 	lds	r25, 0x0085
    20cc:	8c 19       	sub	r24, r12
    20ce:	9d 09       	sbc	r25, r13
		LoopTCNT1 = TCNT1;	
    20d0:	c0 90 84 00 	lds	r12, 0x0084
    20d4:	d0 90 85 00 	lds	r13, 0x0085

		// Refresh accSmooth values
		// Note that because it takes 4.096ms to refresh the whole GLCD this loop cannot run 
		// faster than 244Hz, but that's close enough to the actual loop time so that the 
		// actual Acc LPF effect is closely mirrored on the balance meter.
		getEstimatedAttitude(ticker_16); 
    20d8:	0e 94 f6 1d 	call	0x3bec	; 0x3bec <getEstimatedAttitude>

		// Convert acc signal to a pixel position
		x_pos = accSmooth[PITCH] + 32;
    20dc:	20 e0       	ldi	r18, 0x00	; 0
    20de:	30 e0       	ldi	r19, 0x00	; 0
    20e0:	40 e0       	ldi	r20, 0x00	; 0
    20e2:	52 e4       	ldi	r21, 0x42	; 66
    20e4:	60 91 72 05 	lds	r22, 0x0572
    20e8:	70 91 73 05 	lds	r23, 0x0573
    20ec:	80 91 74 05 	lds	r24, 0x0574
    20f0:	90 91 75 05 	lds	r25, 0x0575
    20f4:	0e 94 b3 39 	call	0x7366	; 0x7366 <__addsf3>
    20f8:	0e 94 ab 3a 	call	0x7556	; 0x7556 <__fixsfsi>
    20fc:	eb 01       	movw	r28, r22
		y_pos = accSmooth[ROLL] + 64;
    20fe:	20 e0       	ldi	r18, 0x00	; 0
    2100:	30 e0       	ldi	r19, 0x00	; 0
    2102:	40 e8       	ldi	r20, 0x80	; 128
    2104:	52 e4       	ldi	r21, 0x42	; 66
    2106:	60 91 6e 05 	lds	r22, 0x056E
    210a:	70 91 6f 05 	lds	r23, 0x056F
    210e:	80 91 70 05 	lds	r24, 0x0570
    2112:	90 91 71 05 	lds	r25, 0x0571
    2116:	0e 94 b3 39 	call	0x7366	; 0x7366 <__addsf3>
    211a:	0e 94 ab 3a 	call	0x7556	; 0x7556 <__fixsfsi>
    211e:	5b 01       	movw	r10, r22

		if (x_pos < 0) x_pos = 0;
    2120:	d7 fd       	sbrc	r29, 7
    2122:	06 c0       	rjmp	.+12     	; 0x2130 <Display_balance+0x8c>
		if (x_pos > 64) x_pos = 64;
    2124:	c1 34       	cpi	r28, 0x41	; 65
    2126:	d1 05       	cpc	r29, r1
    2128:	2c f0       	brlt	.+10     	; 0x2134 <Display_balance+0x90>
    212a:	c0 e4       	ldi	r28, 0x40	; 64
    212c:	d0 e0       	ldi	r29, 0x00	; 0
    212e:	02 c0       	rjmp	.+4      	; 0x2134 <Display_balance+0x90>

		// Convert acc signal to a pixel position
		x_pos = accSmooth[PITCH] + 32;
		y_pos = accSmooth[ROLL] + 64;

		if (x_pos < 0) x_pos = 0;
    2130:	c0 e0       	ldi	r28, 0x00	; 0
    2132:	d0 e0       	ldi	r29, 0x00	; 0
		if (x_pos > 64) x_pos = 64;
		if (y_pos < 0) y_pos = 0;
    2134:	b7 fc       	sbrc	r11, 7
    2136:	08 c0       	rjmp	.+16     	; 0x2148 <Display_balance+0xa4>
		if (y_pos > 128) y_pos = 128;
    2138:	81 e8       	ldi	r24, 0x81	; 129
    213a:	a8 16       	cp	r10, r24
    213c:	b1 04       	cpc	r11, r1
    213e:	34 f0       	brlt	.+12     	; 0x214c <Display_balance+0xa8>
    2140:	80 e8       	ldi	r24, 0x80	; 128
    2142:	a8 2e       	mov	r10, r24
    2144:	b1 2c       	mov	r11, r1
    2146:	02 c0       	rjmp	.+4      	; 0x214c <Display_balance+0xa8>
		x_pos = accSmooth[PITCH] + 32;
		y_pos = accSmooth[ROLL] + 64;

		if (x_pos < 0) x_pos = 0;
		if (x_pos > 64) x_pos = 64;
		if (y_pos < 0) y_pos = 0;
    2148:	a1 2c       	mov	r10, r1
    214a:	b1 2c       	mov	r11, r1
		if (y_pos > 128) y_pos = 128;

		// Print bottom markers
		LCD_Display_Text(12, (const unsigned char*)Wingdings, 2, 55); 	// Left
    214c:	27 e3       	ldi	r18, 0x37	; 55
    214e:	30 e0       	ldi	r19, 0x00	; 0
    2150:	42 e0       	ldi	r20, 0x02	; 2
    2152:	50 e0       	ldi	r21, 0x00	; 0
    2154:	6d e0       	ldi	r22, 0x0D	; 13
    2156:	71 e0       	ldi	r23, 0x01	; 1
    2158:	8c e0       	ldi	r24, 0x0C	; 12
    215a:	0e 94 51 1c 	call	0x38a2	; 0x38a2 <LCD_Display_Text>

		// Draw balance meter
		drawrect(buffer, 0, 0, 128, 64, 1);		// Border
    215e:	ee 24       	eor	r14, r14
    2160:	e3 94       	inc	r14
    2162:	00 e4       	ldi	r16, 0x40	; 64
    2164:	20 e8       	ldi	r18, 0x80	; 128
    2166:	40 e0       	ldi	r20, 0x00	; 0
    2168:	60 e0       	ldi	r22, 0x00	; 0
    216a:	83 e3       	ldi	r24, 0x33	; 51
    216c:	91 e0       	ldi	r25, 0x01	; 1
    216e:	0e 94 90 1b 	call	0x3720	; 0x3720 <drawrect>
		drawrect(buffer, 54, 22, 21, 21, 1);	// Target
    2172:	05 e1       	ldi	r16, 0x15	; 21
    2174:	25 e1       	ldi	r18, 0x15	; 21
    2176:	46 e1       	ldi	r20, 0x16	; 22
    2178:	66 e3       	ldi	r22, 0x36	; 54
    217a:	83 e3       	ldi	r24, 0x33	; 51
    217c:	91 e0       	ldi	r25, 0x01	; 1
    217e:	0e 94 90 1b 	call	0x3720	; 0x3720 <drawrect>
		drawline(buffer, 64, 8, 64, 56, 1); 	// Crosshairs
    2182:	08 e3       	ldi	r16, 0x38	; 56
    2184:	20 e4       	ldi	r18, 0x40	; 64
    2186:	48 e0       	ldi	r20, 0x08	; 8
    2188:	60 e4       	ldi	r22, 0x40	; 64
    218a:	83 e3       	ldi	r24, 0x33	; 51
    218c:	91 e0       	ldi	r25, 0x01	; 1
    218e:	0e 94 08 1b 	call	0x3610	; 0x3610 <drawline>
		drawline(buffer, 32, 32, 96, 32, 1); 
    2192:	00 e2       	ldi	r16, 0x20	; 32
    2194:	20 e6       	ldi	r18, 0x60	; 96
    2196:	40 e2       	ldi	r20, 0x20	; 32
    2198:	60 e2       	ldi	r22, 0x20	; 32
    219a:	83 e3       	ldi	r24, 0x33	; 51
    219c:	91 e0       	ldi	r25, 0x01	; 1
    219e:	0e 94 08 1b 	call	0x3610	; 0x3610 <drawline>
		fillcircle(buffer, y_pos, x_pos, 8, 1);	// Bubble
    21a2:	01 e0       	ldi	r16, 0x01	; 1
    21a4:	28 e0       	ldi	r18, 0x08	; 8
    21a6:	4c 2f       	mov	r20, r28
    21a8:	6a 2d       	mov	r22, r10
    21aa:	83 e3       	ldi	r24, 0x33	; 51
    21ac:	91 e0       	ldi	r25, 0x01	; 1
    21ae:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <fillcircle>

		// Refresh GLCD 
		write_buffer(buffer,1);
    21b2:	61 e0       	ldi	r22, 0x01	; 1
    21b4:	83 e3       	ldi	r24, 0x33	; 51
    21b6:	91 e0       	ldi	r25, 0x01	; 1
    21b8:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <write_buffer>
		clear_buffer(buffer);
    21bc:	83 e3       	ldi	r24, 0x33	; 51
    21be:	91 e0       	ldi	r25, 0x01	; 1
    21c0:	0e 94 a8 1a 	call	0x3550	; 0x3550 <clear_buffer>
    21c4:	79 cf       	rjmp	.-270    	; 0x20b8 <Display_balance+0x14>
	}
}
    21c6:	df 91       	pop	r29
    21c8:	cf 91       	pop	r28
    21ca:	0f 91       	pop	r16
    21cc:	ef 90       	pop	r14
    21ce:	df 90       	pop	r13
    21d0:	cf 90       	pop	r12
    21d2:	bf 90       	pop	r11
    21d4:	af 90       	pop	r10
    21d6:	08 95       	ret

000021d8 <Display_rcinput>:
// Code
//************************************************************

void Display_rcinput(void)
{
	while(BUTTON1 != 0)
    21d8:	1f 9b       	sbis	0x03, 7	; 3
    21da:	03 c1       	rjmp	.+518    	; 0x23e2 <Display_rcinput+0x20a>
	{
		if (BUTTON4 == 0)
    21dc:	1c 9b       	sbis	0x03, 4	; 3
		{
			CenterSticks();
    21de:	0e 94 7d 38 	call	0x70fa	; 0x70fa <CenterSticks>
		}

		RxGetChannels();
    21e2:	0e 94 ed 37 	call	0x6fda	; 0x6fda <RxGetChannels>

		LCD_Display_Text(114,(const unsigned char*)Verdana8,0,0);
    21e6:	20 e0       	ldi	r18, 0x00	; 0
    21e8:	30 e0       	ldi	r19, 0x00	; 0
    21ea:	40 e0       	ldi	r20, 0x00	; 0
    21ec:	50 e0       	ldi	r21, 0x00	; 0
    21ee:	65 e2       	ldi	r22, 0x25	; 37
    21f0:	7a e0       	ldi	r23, 0x0A	; 10
    21f2:	82 e7       	ldi	r24, 0x72	; 114
    21f4:	0e 94 51 1c 	call	0x38a2	; 0x38a2 <LCD_Display_Text>
		LCD_Display_Text(32,(const unsigned char*)Verdana8,0,10);
    21f8:	2a e0       	ldi	r18, 0x0A	; 10
    21fa:	30 e0       	ldi	r19, 0x00	; 0
    21fc:	40 e0       	ldi	r20, 0x00	; 0
    21fe:	50 e0       	ldi	r21, 0x00	; 0
    2200:	65 e2       	ldi	r22, 0x25	; 37
    2202:	7a e0       	ldi	r23, 0x0A	; 10
    2204:	80 e2       	ldi	r24, 0x20	; 32
    2206:	0e 94 51 1c 	call	0x38a2	; 0x38a2 <LCD_Display_Text>
		LCD_Display_Text(115,(const unsigned char*)Verdana8,0,20);
    220a:	24 e1       	ldi	r18, 0x14	; 20
    220c:	30 e0       	ldi	r19, 0x00	; 0
    220e:	40 e0       	ldi	r20, 0x00	; 0
    2210:	50 e0       	ldi	r21, 0x00	; 0
    2212:	65 e2       	ldi	r22, 0x25	; 37
    2214:	7a e0       	ldi	r23, 0x0A	; 10
    2216:	83 e7       	ldi	r24, 0x73	; 115
    2218:	0e 94 51 1c 	call	0x38a2	; 0x38a2 <LCD_Display_Text>
		LCD_Display_Text(35,(const unsigned char*)Verdana8,0,30);
    221c:	2e e1       	ldi	r18, 0x1E	; 30
    221e:	30 e0       	ldi	r19, 0x00	; 0
    2220:	40 e0       	ldi	r20, 0x00	; 0
    2222:	50 e0       	ldi	r21, 0x00	; 0
    2224:	65 e2       	ldi	r22, 0x25	; 37
    2226:	7a e0       	ldi	r23, 0x0A	; 10
    2228:	83 e2       	ldi	r24, 0x23	; 35
    222a:	0e 94 51 1c 	call	0x38a2	; 0x38a2 <LCD_Display_Text>

		LCD_Display_Text(109,(const unsigned char*)Verdana8,70,0);
    222e:	20 e0       	ldi	r18, 0x00	; 0
    2230:	30 e0       	ldi	r19, 0x00	; 0
    2232:	46 e4       	ldi	r20, 0x46	; 70
    2234:	50 e0       	ldi	r21, 0x00	; 0
    2236:	65 e2       	ldi	r22, 0x25	; 37
    2238:	7a e0       	ldi	r23, 0x0A	; 10
    223a:	8d e6       	ldi	r24, 0x6D	; 109
    223c:	0e 94 51 1c 	call	0x38a2	; 0x38a2 <LCD_Display_Text>
		LCD_Display_Text(110,(const unsigned char*)Verdana8,70,10);
    2240:	2a e0       	ldi	r18, 0x0A	; 10
    2242:	30 e0       	ldi	r19, 0x00	; 0
    2244:	46 e4       	ldi	r20, 0x46	; 70
    2246:	50 e0       	ldi	r21, 0x00	; 0
    2248:	65 e2       	ldi	r22, 0x25	; 37
    224a:	7a e0       	ldi	r23, 0x0A	; 10
    224c:	8e e6       	ldi	r24, 0x6E	; 110
    224e:	0e 94 51 1c 	call	0x38a2	; 0x38a2 <LCD_Display_Text>
		LCD_Display_Text(111,(const unsigned char*)Verdana8,70,20);
    2252:	24 e1       	ldi	r18, 0x14	; 20
    2254:	30 e0       	ldi	r19, 0x00	; 0
    2256:	46 e4       	ldi	r20, 0x46	; 70
    2258:	50 e0       	ldi	r21, 0x00	; 0
    225a:	65 e2       	ldi	r22, 0x25	; 37
    225c:	7a e0       	ldi	r23, 0x0A	; 10
    225e:	8f e6       	ldi	r24, 0x6F	; 111
    2260:	0e 94 51 1c 	call	0x38a2	; 0x38a2 <LCD_Display_Text>
		LCD_Display_Text(112,(const unsigned char*)Verdana8,70,30);
    2264:	2e e1       	ldi	r18, 0x1E	; 30
    2266:	30 e0       	ldi	r19, 0x00	; 0
    2268:	46 e4       	ldi	r20, 0x46	; 70
    226a:	50 e0       	ldi	r21, 0x00	; 0
    226c:	65 e2       	ldi	r22, 0x25	; 37
    226e:	7a e0       	ldi	r23, 0x0A	; 10
    2270:	80 e7       	ldi	r24, 0x70	; 112
    2272:	0e 94 51 1c 	call	0x38a2	; 0x38a2 <LCD_Display_Text>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    2276:	4a e0       	ldi	r20, 0x0A	; 10
    2278:	6c e4       	ldi	r22, 0x4C	; 76
    227a:	75 e0       	ldi	r23, 0x05	; 5
    227c:	80 91 9d 07 	lds	r24, 0x079D
    2280:	90 91 9e 07 	lds	r25, 0x079E
    2284:	0e 94 5b 3d 	call	0x7ab6	; 0x7ab6 <__itoa_ncheck>

		mugui_lcd_puts(itoa(MonopolarThrottle,pBuffer,10),(const unsigned char*)Verdana8,37,0);
    2288:	20 e0       	ldi	r18, 0x00	; 0
    228a:	30 e0       	ldi	r19, 0x00	; 0
    228c:	45 e2       	ldi	r20, 0x25	; 37
    228e:	50 e0       	ldi	r21, 0x00	; 0
    2290:	65 e2       	ldi	r22, 0x25	; 37
    2292:	7a e0       	ldi	r23, 0x0A	; 10
    2294:	0e 94 e7 33 	call	0x67ce	; 0x67ce <mugui_lcd_puts>
    2298:	4a e0       	ldi	r20, 0x0A	; 10
    229a:	6c e4       	ldi	r22, 0x4C	; 76
    229c:	75 e0       	ldi	r23, 0x05	; 5
    229e:	80 91 a1 07 	lds	r24, 0x07A1
    22a2:	90 91 a2 07 	lds	r25, 0x07A2
    22a6:	0e 94 5b 3d 	call	0x7ab6	; 0x7ab6 <__itoa_ncheck>
		mugui_lcd_puts(itoa(RCinputs[AILERON],pBuffer,10),(const unsigned char*)Verdana8,37,10);
    22aa:	2a e0       	ldi	r18, 0x0A	; 10
    22ac:	30 e0       	ldi	r19, 0x00	; 0
    22ae:	45 e2       	ldi	r20, 0x25	; 37
    22b0:	50 e0       	ldi	r21, 0x00	; 0
    22b2:	65 e2       	ldi	r22, 0x25	; 37
    22b4:	7a e0       	ldi	r23, 0x0A	; 10
    22b6:	0e 94 e7 33 	call	0x67ce	; 0x67ce <mugui_lcd_puts>
    22ba:	4a e0       	ldi	r20, 0x0A	; 10
    22bc:	6c e4       	ldi	r22, 0x4C	; 76
    22be:	75 e0       	ldi	r23, 0x05	; 5
    22c0:	80 91 a3 07 	lds	r24, 0x07A3
    22c4:	90 91 a4 07 	lds	r25, 0x07A4
    22c8:	0e 94 5b 3d 	call	0x7ab6	; 0x7ab6 <__itoa_ncheck>
		mugui_lcd_puts(itoa(RCinputs[ELEVATOR],pBuffer,10),(const unsigned char*)Verdana8,37,20);
    22cc:	24 e1       	ldi	r18, 0x14	; 20
    22ce:	30 e0       	ldi	r19, 0x00	; 0
    22d0:	45 e2       	ldi	r20, 0x25	; 37
    22d2:	50 e0       	ldi	r21, 0x00	; 0
    22d4:	65 e2       	ldi	r22, 0x25	; 37
    22d6:	7a e0       	ldi	r23, 0x0A	; 10
    22d8:	0e 94 e7 33 	call	0x67ce	; 0x67ce <mugui_lcd_puts>
    22dc:	4a e0       	ldi	r20, 0x0A	; 10
    22de:	6c e4       	ldi	r22, 0x4C	; 76
    22e0:	75 e0       	ldi	r23, 0x05	; 5
    22e2:	80 91 a5 07 	lds	r24, 0x07A5
    22e6:	90 91 a6 07 	lds	r25, 0x07A6
    22ea:	0e 94 5b 3d 	call	0x7ab6	; 0x7ab6 <__itoa_ncheck>
		mugui_lcd_puts(itoa(RCinputs[RUDDER],pBuffer,10),(const unsigned char*)Verdana8,37,30);
    22ee:	2e e1       	ldi	r18, 0x1E	; 30
    22f0:	30 e0       	ldi	r19, 0x00	; 0
    22f2:	45 e2       	ldi	r20, 0x25	; 37
    22f4:	50 e0       	ldi	r21, 0x00	; 0
    22f6:	65 e2       	ldi	r22, 0x25	; 37
    22f8:	7a e0       	ldi	r23, 0x0A	; 10
    22fa:	0e 94 e7 33 	call	0x67ce	; 0x67ce <mugui_lcd_puts>
    22fe:	4a e0       	ldi	r20, 0x0A	; 10
    2300:	6c e4       	ldi	r22, 0x4C	; 76
    2302:	75 e0       	ldi	r23, 0x05	; 5
    2304:	80 91 a7 07 	lds	r24, 0x07A7
    2308:	90 91 a8 07 	lds	r25, 0x07A8
    230c:	0e 94 5b 3d 	call	0x7ab6	; 0x7ab6 <__itoa_ncheck>

		mugui_lcd_puts(itoa(RCinputs[GEAR],pBuffer,10),(const unsigned char*)Verdana8,100,0);
    2310:	20 e0       	ldi	r18, 0x00	; 0
    2312:	30 e0       	ldi	r19, 0x00	; 0
    2314:	44 e6       	ldi	r20, 0x64	; 100
    2316:	50 e0       	ldi	r21, 0x00	; 0
    2318:	65 e2       	ldi	r22, 0x25	; 37
    231a:	7a e0       	ldi	r23, 0x0A	; 10
    231c:	0e 94 e7 33 	call	0x67ce	; 0x67ce <mugui_lcd_puts>
    2320:	4a e0       	ldi	r20, 0x0A	; 10
    2322:	6c e4       	ldi	r22, 0x4C	; 76
    2324:	75 e0       	ldi	r23, 0x05	; 5
    2326:	80 91 a9 07 	lds	r24, 0x07A9
    232a:	90 91 aa 07 	lds	r25, 0x07AA
    232e:	0e 94 5b 3d 	call	0x7ab6	; 0x7ab6 <__itoa_ncheck>
		mugui_lcd_puts(itoa(RCinputs[AUX1],pBuffer,10),(const unsigned char*)Verdana8,100,10);
    2332:	2a e0       	ldi	r18, 0x0A	; 10
    2334:	30 e0       	ldi	r19, 0x00	; 0
    2336:	44 e6       	ldi	r20, 0x64	; 100
    2338:	50 e0       	ldi	r21, 0x00	; 0
    233a:	65 e2       	ldi	r22, 0x25	; 37
    233c:	7a e0       	ldi	r23, 0x0A	; 10
    233e:	0e 94 e7 33 	call	0x67ce	; 0x67ce <mugui_lcd_puts>
    2342:	4a e0       	ldi	r20, 0x0A	; 10
    2344:	6c e4       	ldi	r22, 0x4C	; 76
    2346:	75 e0       	ldi	r23, 0x05	; 5
    2348:	80 91 ab 07 	lds	r24, 0x07AB
    234c:	90 91 ac 07 	lds	r25, 0x07AC
    2350:	0e 94 5b 3d 	call	0x7ab6	; 0x7ab6 <__itoa_ncheck>
		mugui_lcd_puts(itoa(RCinputs[AUX2],pBuffer,10),(const unsigned char*)Verdana8,100,20);
    2354:	24 e1       	ldi	r18, 0x14	; 20
    2356:	30 e0       	ldi	r19, 0x00	; 0
    2358:	44 e6       	ldi	r20, 0x64	; 100
    235a:	50 e0       	ldi	r21, 0x00	; 0
    235c:	65 e2       	ldi	r22, 0x25	; 37
    235e:	7a e0       	ldi	r23, 0x0A	; 10
    2360:	0e 94 e7 33 	call	0x67ce	; 0x67ce <mugui_lcd_puts>
    2364:	4a e0       	ldi	r20, 0x0A	; 10
    2366:	6c e4       	ldi	r22, 0x4C	; 76
    2368:	75 e0       	ldi	r23, 0x05	; 5
    236a:	80 91 ad 07 	lds	r24, 0x07AD
    236e:	90 91 ae 07 	lds	r25, 0x07AE
    2372:	0e 94 5b 3d 	call	0x7ab6	; 0x7ab6 <__itoa_ncheck>
		mugui_lcd_puts(itoa(RCinputs[AUX3],pBuffer,10),(const unsigned char*)Verdana8,100,30);
    2376:	2e e1       	ldi	r18, 0x1E	; 30
    2378:	30 e0       	ldi	r19, 0x00	; 0
    237a:	44 e6       	ldi	r20, 0x64	; 100
    237c:	50 e0       	ldi	r21, 0x00	; 0
    237e:	65 e2       	ldi	r22, 0x25	; 37
    2380:	7a e0       	ldi	r23, 0x0A	; 10
    2382:	0e 94 e7 33 	call	0x67ce	; 0x67ce <mugui_lcd_puts>

		// Print bottom text and markers
		LCD_Display_Text(12, (const unsigned char*)Wingdings, 0, 57); 	// Left
    2386:	29 e3       	ldi	r18, 0x39	; 57
    2388:	30 e0       	ldi	r19, 0x00	; 0
    238a:	40 e0       	ldi	r20, 0x00	; 0
    238c:	50 e0       	ldi	r21, 0x00	; 0
    238e:	6d e0       	ldi	r22, 0x0D	; 13
    2390:	71 e0       	ldi	r23, 0x01	; 1
    2392:	8c e0       	ldi	r24, 0x0C	; 12
    2394:	0e 94 51 1c 	call	0x38a2	; 0x38a2 <LCD_Display_Text>
		LCD_Display_Text(60, (const unsigned char*)Verdana8, 100, 55); 	// Cal.
    2398:	27 e3       	ldi	r18, 0x37	; 55
    239a:	30 e0       	ldi	r19, 0x00	; 0
    239c:	44 e6       	ldi	r20, 0x64	; 100
    239e:	50 e0       	ldi	r21, 0x00	; 0
    23a0:	65 e2       	ldi	r22, 0x25	; 37
    23a2:	7a e0       	ldi	r23, 0x0A	; 10
    23a4:	8c e3       	ldi	r24, 0x3C	; 60
    23a6:	0e 94 51 1c 	call	0x38a2	; 0x38a2 <LCD_Display_Text>
		LCD_Display_Text(9, (const unsigned char*)Wingdings, 119, 59); 	// Down
    23aa:	2b e3       	ldi	r18, 0x3B	; 59
    23ac:	30 e0       	ldi	r19, 0x00	; 0
    23ae:	47 e7       	ldi	r20, 0x77	; 119
    23b0:	50 e0       	ldi	r21, 0x00	; 0
    23b2:	6d e0       	ldi	r22, 0x0D	; 13
    23b4:	71 e0       	ldi	r23, 0x01	; 1
    23b6:	89 e0       	ldi	r24, 0x09	; 9
    23b8:	0e 94 51 1c 	call	0x38a2	; 0x38a2 <LCD_Display_Text>

		// Update buffer
		write_buffer(buffer,1);
    23bc:	61 e0       	ldi	r22, 0x01	; 1
    23be:	83 e3       	ldi	r24, 0x33	; 51
    23c0:	91 e0       	ldi	r25, 0x01	; 1
    23c2:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <write_buffer>
		clear_buffer(buffer);
    23c6:	83 e3       	ldi	r24, 0x33	; 51
    23c8:	91 e0       	ldi	r25, 0x01	; 1
    23ca:	0e 94 a8 1a 	call	0x3550	; 0x3550 <clear_buffer>
    23ce:	2f e7       	ldi	r18, 0x7F	; 127
    23d0:	8a e1       	ldi	r24, 0x1A	; 26
    23d2:	96 e0       	ldi	r25, 0x06	; 6
    23d4:	21 50       	subi	r18, 0x01	; 1
    23d6:	80 40       	sbci	r24, 0x00	; 0
    23d8:	90 40       	sbci	r25, 0x00	; 0
    23da:	e1 f7       	brne	.-8      	; 0x23d4 <Display_rcinput+0x1fc>
    23dc:	00 c0       	rjmp	.+0      	; 0x23de <Display_rcinput+0x206>
    23de:	00 00       	nop
    23e0:	fb ce       	rjmp	.-522    	; 0x21d8 <Display_rcinput>
		_delay_ms(100);
	}
	// Exit
}
    23e2:	08 95       	ret

000023e4 <Display_sensors>:
// Code
//************************************************************

void Display_sensors(void)
{
	while(BUTTON1 != 0)
    23e4:	1f 9b       	sbis	0x03, 7	; 3
    23e6:	e3 c0       	rjmp	.+454    	; 0x25ae <Display_sensors+0x1ca>
	{
		if (BUTTON4 == 0)
    23e8:	1c 99       	sbic	0x03, 4	; 3
    23ea:	0e c0       	rjmp	.+28     	; 0x2408 <Display_sensors+0x24>
    23ec:	2f e7       	ldi	r18, 0x7F	; 127
    23ee:	84 e8       	ldi	r24, 0x84	; 132
    23f0:	9e e1       	ldi	r25, 0x1E	; 30
    23f2:	21 50       	subi	r18, 0x01	; 1
    23f4:	80 40       	sbci	r24, 0x00	; 0
    23f6:	90 40       	sbci	r25, 0x00	; 0
    23f8:	e1 f7       	brne	.-8      	; 0x23f2 <Display_sensors+0xe>
    23fa:	00 c0       	rjmp	.+0      	; 0x23fc <Display_sensors+0x18>
    23fc:	00 00       	nop
		{
			_delay_ms(500);
#ifdef AIRSPEED
			CalibrateAirspeed();
#endif
			CalibrateGyrosFast();
    23fe:	0e 94 00 1d 	call	0x3a00	; 0x3a00 <CalibrateGyrosFast>
			CalibrateAcc(NORMAL); // This also saves the data in eepom
    2402:	80 e0       	ldi	r24, 0x00	; 0
    2404:	0e 94 75 0f 	call	0x1eea	; 0x1eea <CalibrateAcc>
		}

		if (BUTTON3 == 0)
    2408:	1d 99       	sbic	0x03, 5	; 3
    240a:	0c c0       	rjmp	.+24     	; 0x2424 <Display_sensors+0x40>
    240c:	2f e7       	ldi	r18, 0x7F	; 127
    240e:	84 e8       	ldi	r24, 0x84	; 132
    2410:	9e e1       	ldi	r25, 0x1E	; 30
    2412:	21 50       	subi	r18, 0x01	; 1
    2414:	80 40       	sbci	r24, 0x00	; 0
    2416:	90 40       	sbci	r25, 0x00	; 0
    2418:	e1 f7       	brne	.-8      	; 0x2412 <Display_sensors+0x2e>
    241a:	00 c0       	rjmp	.+0      	; 0x241c <Display_sensors+0x38>
    241c:	00 00       	nop
		{
			_delay_ms(500);
			CalibrateAcc(REVERSED);
    241e:	81 e0       	ldi	r24, 0x01	; 1
    2420:	0e 94 75 0f 	call	0x1eea	; 0x1eea <CalibrateAcc>
		}

		ReadGyros();
    2424:	0e 94 d3 1c 	call	0x39a6	; 0x39a6 <ReadGyros>
		ReadAcc();
    2428:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <ReadAcc>

		LCD_Display_Text(26,(const unsigned char*)Verdana8,37,0); 	// Gyro
    242c:	20 e0       	ldi	r18, 0x00	; 0
    242e:	30 e0       	ldi	r19, 0x00	; 0
    2430:	45 e2       	ldi	r20, 0x25	; 37
    2432:	50 e0       	ldi	r21, 0x00	; 0
    2434:	65 e2       	ldi	r22, 0x25	; 37
    2436:	7a e0       	ldi	r23, 0x0A	; 10
    2438:	8a e1       	ldi	r24, 0x1A	; 26
    243a:	0e 94 51 1c 	call	0x38a2	; 0x38a2 <LCD_Display_Text>
		LCD_Display_Text(30,(const unsigned char*)Verdana8,77,0); 	// Acc
    243e:	20 e0       	ldi	r18, 0x00	; 0
    2440:	30 e0       	ldi	r19, 0x00	; 0
    2442:	4d e4       	ldi	r20, 0x4D	; 77
    2444:	50 e0       	ldi	r21, 0x00	; 0
    2446:	65 e2       	ldi	r22, 0x25	; 37
    2448:	7a e0       	ldi	r23, 0x0A	; 10
    244a:	8e e1       	ldi	r24, 0x1E	; 30
    244c:	0e 94 51 1c 	call	0x38a2	; 0x38a2 <LCD_Display_Text>
		LCD_Display_Text(27,(const unsigned char*)Verdana8,5,13);	// Roll
    2450:	2d e0       	ldi	r18, 0x0D	; 13
    2452:	30 e0       	ldi	r19, 0x00	; 0
    2454:	45 e0       	ldi	r20, 0x05	; 5
    2456:	50 e0       	ldi	r21, 0x00	; 0
    2458:	65 e2       	ldi	r22, 0x25	; 37
    245a:	7a e0       	ldi	r23, 0x0A	; 10
    245c:	8b e1       	ldi	r24, 0x1B	; 27
    245e:	0e 94 51 1c 	call	0x38a2	; 0x38a2 <LCD_Display_Text>
		LCD_Display_Text(28,(const unsigned char*)Verdana8,5,23);	// Pitch
    2462:	27 e1       	ldi	r18, 0x17	; 23
    2464:	30 e0       	ldi	r19, 0x00	; 0
    2466:	45 e0       	ldi	r20, 0x05	; 5
    2468:	50 e0       	ldi	r21, 0x00	; 0
    246a:	65 e2       	ldi	r22, 0x25	; 37
    246c:	7a e0       	ldi	r23, 0x0A	; 10
    246e:	8c e1       	ldi	r24, 0x1C	; 28
    2470:	0e 94 51 1c 	call	0x38a2	; 0x38a2 <LCD_Display_Text>
		LCD_Display_Text(29,(const unsigned char*)Verdana8,5,33);	// Yaw/Z
    2474:	21 e2       	ldi	r18, 0x21	; 33
    2476:	30 e0       	ldi	r19, 0x00	; 0
    2478:	45 e0       	ldi	r20, 0x05	; 5
    247a:	50 e0       	ldi	r21, 0x00	; 0
    247c:	65 e2       	ldi	r22, 0x25	; 37
    247e:	7a e0       	ldi	r23, 0x0A	; 10
    2480:	8d e1       	ldi	r24, 0x1D	; 29
    2482:	0e 94 51 1c 	call	0x38a2	; 0x38a2 <LCD_Display_Text>
    2486:	4a e0       	ldi	r20, 0x0A	; 10
    2488:	6c e4       	ldi	r22, 0x4C	; 76
    248a:	75 e0       	ldi	r23, 0x05	; 5
    248c:	80 91 60 05 	lds	r24, 0x0560
    2490:	90 91 61 05 	lds	r25, 0x0561
    2494:	0e 94 5b 3d 	call	0x7ab6	; 0x7ab6 <__itoa_ncheck>

		mugui_lcd_puts(itoa(gyroADC[ROLL],pBuffer,10),(const unsigned char*)Verdana8,40,13);
    2498:	2d e0       	ldi	r18, 0x0D	; 13
    249a:	30 e0       	ldi	r19, 0x00	; 0
    249c:	48 e2       	ldi	r20, 0x28	; 40
    249e:	50 e0       	ldi	r21, 0x00	; 0
    24a0:	65 e2       	ldi	r22, 0x25	; 37
    24a2:	7a e0       	ldi	r23, 0x0A	; 10
    24a4:	0e 94 e7 33 	call	0x67ce	; 0x67ce <mugui_lcd_puts>
    24a8:	4a e0       	ldi	r20, 0x0A	; 10
    24aa:	6c e4       	ldi	r22, 0x4C	; 76
    24ac:	75 e0       	ldi	r23, 0x05	; 5
    24ae:	80 91 62 05 	lds	r24, 0x0562
    24b2:	90 91 63 05 	lds	r25, 0x0563
    24b6:	0e 94 5b 3d 	call	0x7ab6	; 0x7ab6 <__itoa_ncheck>
		mugui_lcd_puts(itoa(gyroADC[PITCH],pBuffer,10),(const unsigned char*)Verdana8,40,23);
    24ba:	27 e1       	ldi	r18, 0x17	; 23
    24bc:	30 e0       	ldi	r19, 0x00	; 0
    24be:	48 e2       	ldi	r20, 0x28	; 40
    24c0:	50 e0       	ldi	r21, 0x00	; 0
    24c2:	65 e2       	ldi	r22, 0x25	; 37
    24c4:	7a e0       	ldi	r23, 0x0A	; 10
    24c6:	0e 94 e7 33 	call	0x67ce	; 0x67ce <mugui_lcd_puts>
    24ca:	4a e0       	ldi	r20, 0x0A	; 10
    24cc:	6c e4       	ldi	r22, 0x4C	; 76
    24ce:	75 e0       	ldi	r23, 0x05	; 5
    24d0:	80 91 64 05 	lds	r24, 0x0564
    24d4:	90 91 65 05 	lds	r25, 0x0565
    24d8:	0e 94 5b 3d 	call	0x7ab6	; 0x7ab6 <__itoa_ncheck>
		mugui_lcd_puts(itoa(gyroADC[YAW],pBuffer,10),(const unsigned char*)Verdana8,40,33);
    24dc:	21 e2       	ldi	r18, 0x21	; 33
    24de:	30 e0       	ldi	r19, 0x00	; 0
    24e0:	48 e2       	ldi	r20, 0x28	; 40
    24e2:	50 e0       	ldi	r21, 0x00	; 0
    24e4:	65 e2       	ldi	r22, 0x25	; 37
    24e6:	7a e0       	ldi	r23, 0x0A	; 10
    24e8:	0e 94 e7 33 	call	0x67ce	; 0x67ce <mugui_lcd_puts>
    24ec:	4a e0       	ldi	r20, 0x0A	; 10
    24ee:	6c e4       	ldi	r22, 0x4C	; 76
    24f0:	75 e0       	ldi	r23, 0x05	; 5
    24f2:	80 91 2d 01 	lds	r24, 0x012D
    24f6:	90 91 2e 01 	lds	r25, 0x012E
    24fa:	0e 94 5b 3d 	call	0x7ab6	; 0x7ab6 <__itoa_ncheck>

		mugui_lcd_puts(itoa(accADC[ROLL],pBuffer,10),(const unsigned char*)Verdana8,80,13);
    24fe:	2d e0       	ldi	r18, 0x0D	; 13
    2500:	30 e0       	ldi	r19, 0x00	; 0
    2502:	40 e5       	ldi	r20, 0x50	; 80
    2504:	50 e0       	ldi	r21, 0x00	; 0
    2506:	65 e2       	ldi	r22, 0x25	; 37
    2508:	7a e0       	ldi	r23, 0x0A	; 10
    250a:	0e 94 e7 33 	call	0x67ce	; 0x67ce <mugui_lcd_puts>
    250e:	4a e0       	ldi	r20, 0x0A	; 10
    2510:	6c e4       	ldi	r22, 0x4C	; 76
    2512:	75 e0       	ldi	r23, 0x05	; 5
    2514:	80 91 2f 01 	lds	r24, 0x012F
    2518:	90 91 30 01 	lds	r25, 0x0130
    251c:	0e 94 5b 3d 	call	0x7ab6	; 0x7ab6 <__itoa_ncheck>
		mugui_lcd_puts(itoa(accADC[PITCH],pBuffer,10),(const unsigned char*)Verdana8,80,23);
    2520:	27 e1       	ldi	r18, 0x17	; 23
    2522:	30 e0       	ldi	r19, 0x00	; 0
    2524:	40 e5       	ldi	r20, 0x50	; 80
    2526:	50 e0       	ldi	r21, 0x00	; 0
    2528:	65 e2       	ldi	r22, 0x25	; 37
    252a:	7a e0       	ldi	r23, 0x0A	; 10
    252c:	0e 94 e7 33 	call	0x67ce	; 0x67ce <mugui_lcd_puts>
    2530:	4a e0       	ldi	r20, 0x0A	; 10
    2532:	6c e4       	ldi	r22, 0x4C	; 76
    2534:	75 e0       	ldi	r23, 0x05	; 5
    2536:	80 91 31 01 	lds	r24, 0x0131
    253a:	90 91 32 01 	lds	r25, 0x0132
    253e:	0e 94 5b 3d 	call	0x7ab6	; 0x7ab6 <__itoa_ncheck>
		mugui_lcd_puts(itoa(accADC[YAW],pBuffer,10),(const unsigned char*)Verdana8,80,33);
    2542:	21 e2       	ldi	r18, 0x21	; 33
    2544:	30 e0       	ldi	r19, 0x00	; 0
    2546:	40 e5       	ldi	r20, 0x50	; 80
    2548:	50 e0       	ldi	r21, 0x00	; 0
    254a:	65 e2       	ldi	r22, 0x25	; 37
    254c:	7a e0       	ldi	r23, 0x0A	; 10
    254e:	0e 94 e7 33 	call	0x67ce	; 0x67ce <mugui_lcd_puts>
		LCD_Display_Text(53,(const unsigned char*)Verdana8,5,45);		// Airspeed
		mugui_lcd_puts(itoa((GetAirspeed() - Config.AirspeedZero),pBuffer,10),(const unsigned char*)Verdana8,55,45);
#endif

		// Print bottom markers
		LCD_Display_Text(12, (const unsigned char*)Wingdings, 0, 57); 	// Left
    2552:	29 e3       	ldi	r18, 0x39	; 57
    2554:	30 e0       	ldi	r19, 0x00	; 0
    2556:	40 e0       	ldi	r20, 0x00	; 0
    2558:	50 e0       	ldi	r21, 0x00	; 0
    255a:	6d e0       	ldi	r22, 0x0D	; 13
    255c:	71 e0       	ldi	r23, 0x01	; 1
    255e:	8c e0       	ldi	r24, 0x0C	; 12
    2560:	0e 94 51 1c 	call	0x38a2	; 0x38a2 <LCD_Display_Text>
		LCD_Display_Text(25, (const unsigned char*)Verdana8, 75, 55); 	// Inverted Calibrate
    2564:	27 e3       	ldi	r18, 0x37	; 55
    2566:	30 e0       	ldi	r19, 0x00	; 0
    2568:	4b e4       	ldi	r20, 0x4B	; 75
    256a:	50 e0       	ldi	r21, 0x00	; 0
    256c:	65 e2       	ldi	r22, 0x25	; 37
    256e:	7a e0       	ldi	r23, 0x0A	; 10
    2570:	89 e1       	ldi	r24, 0x19	; 25
    2572:	0e 94 51 1c 	call	0x38a2	; 0x38a2 <LCD_Display_Text>
		LCD_Display_Text(60, (const unsigned char*)Verdana8, 108, 55); 	// Calibrate
    2576:	27 e3       	ldi	r18, 0x37	; 55
    2578:	30 e0       	ldi	r19, 0x00	; 0
    257a:	4c e6       	ldi	r20, 0x6C	; 108
    257c:	50 e0       	ldi	r21, 0x00	; 0
    257e:	65 e2       	ldi	r22, 0x25	; 37
    2580:	7a e0       	ldi	r23, 0x0A	; 10
    2582:	8c e3       	ldi	r24, 0x3C	; 60
    2584:	0e 94 51 1c 	call	0x38a2	; 0x38a2 <LCD_Display_Text>

		// Update buffer
		write_buffer(buffer,1);
    2588:	61 e0       	ldi	r22, 0x01	; 1
    258a:	83 e3       	ldi	r24, 0x33	; 51
    258c:	91 e0       	ldi	r25, 0x01	; 1
    258e:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <write_buffer>
		clear_buffer(buffer);
    2592:	83 e3       	ldi	r24, 0x33	; 51
    2594:	91 e0       	ldi	r25, 0x01	; 1
    2596:	0e 94 a8 1a 	call	0x3550	; 0x3550 <clear_buffer>
    259a:	2f e7       	ldi	r18, 0x7F	; 127
    259c:	8a e1       	ldi	r24, 0x1A	; 26
    259e:	96 e0       	ldi	r25, 0x06	; 6
    25a0:	21 50       	subi	r18, 0x01	; 1
    25a2:	80 40       	sbci	r24, 0x00	; 0
    25a4:	90 40       	sbci	r25, 0x00	; 0
    25a6:	e1 f7       	brne	.-8      	; 0x25a0 <Display_sensors+0x1bc>
    25a8:	00 c0       	rjmp	.+0      	; 0x25aa <Display_sensors+0x1c6>
    25aa:	00 00       	nop
    25ac:	1b cf       	rjmp	.-458    	; 0x23e4 <Display_sensors>
		_delay_ms(100);
	}
}
    25ae:	08 95       	ret

000025b0 <Display_status>:
//************************************************************
// Code
//************************************************************

void Display_status(void)
{
    25b0:	a4 e0       	ldi	r26, 0x04	; 4
    25b2:	b0 e0       	ldi	r27, 0x00	; 0
    25b4:	ee ed       	ldi	r30, 0xDE	; 222
    25b6:	f2 e1       	ldi	r31, 0x12	; 18
    25b8:	0c 94 24 3d 	jmp	0x7a48	; 0x7a48 <__prologue_saves__+0x12>
	int16_t temp;
	uint16_t vbat_temp; 
	int8_t	pos1, pos2, pos3;
	mugui_size16_t size;

	clear_buffer(buffer);
    25bc:	83 e3       	ldi	r24, 0x33	; 51
    25be:	91 e0       	ldi	r25, 0x01	; 1
    25c0:	0e 94 a8 1a 	call	0x3550	; 0x3550 <clear_buffer>

	// Display text
	LCD_Display_Text(3,(const unsigned char*)Verdana8,0,0); 		// Version text
    25c4:	20 e0       	ldi	r18, 0x00	; 0
    25c6:	30 e0       	ldi	r19, 0x00	; 0
    25c8:	40 e0       	ldi	r20, 0x00	; 0
    25ca:	50 e0       	ldi	r21, 0x00	; 0
    25cc:	65 e2       	ldi	r22, 0x25	; 37
    25ce:	7a e0       	ldi	r23, 0x0A	; 10
    25d0:	83 e0       	ldi	r24, 0x03	; 3
    25d2:	0e 94 51 1c 	call	0x38a2	; 0x38a2 <LCD_Display_Text>
	LCD_Display_Text(5,(const unsigned char*)Verdana8,0,16); 	// RX sync
    25d6:	20 e1       	ldi	r18, 0x10	; 16
    25d8:	30 e0       	ldi	r19, 0x00	; 0
    25da:	40 e0       	ldi	r20, 0x00	; 0
    25dc:	50 e0       	ldi	r21, 0x00	; 0
    25de:	65 e2       	ldi	r22, 0x25	; 37
    25e0:	7a e0       	ldi	r23, 0x0A	; 10
    25e2:	85 e0       	ldi	r24, 0x05	; 5
    25e4:	0e 94 51 1c 	call	0x38a2	; 0x38a2 <LCD_Display_Text>
	LCD_Display_Text(6,(const unsigned char*)Verdana8,0,27); 	// Profile
    25e8:	2b e1       	ldi	r18, 0x1B	; 27
    25ea:	30 e0       	ldi	r19, 0x00	; 0
    25ec:	40 e0       	ldi	r20, 0x00	; 0
    25ee:	50 e0       	ldi	r21, 0x00	; 0
    25f0:	65 e2       	ldi	r22, 0x25	; 37
    25f2:	7a e0       	ldi	r23, 0x0A	; 10
    25f4:	86 e0       	ldi	r24, 0x06	; 6
    25f6:	0e 94 51 1c 	call	0x38a2	; 0x38a2 <LCD_Display_Text>
	LCD_Display_Text(23,(const unsigned char*)Verdana8,88,27); 	// Pos
    25fa:	2b e1       	ldi	r18, 0x1B	; 27
    25fc:	30 e0       	ldi	r19, 0x00	; 0
    25fe:	48 e5       	ldi	r20, 0x58	; 88
    2600:	50 e0       	ldi	r21, 0x00	; 0
    2602:	65 e2       	ldi	r22, 0x25	; 37
    2604:	7a e0       	ldi	r23, 0x0A	; 10
    2606:	87 e1       	ldi	r24, 0x17	; 23
    2608:	0e 94 51 1c 	call	0x38a2	; 0x38a2 <LCD_Display_Text>
	LCD_Display_Text(133,(const unsigned char*)Verdana8,0,38); 	// Battery
    260c:	26 e2       	ldi	r18, 0x26	; 38
    260e:	30 e0       	ldi	r19, 0x00	; 0
    2610:	40 e0       	ldi	r20, 0x00	; 0
    2612:	50 e0       	ldi	r21, 0x00	; 0
    2614:	65 e2       	ldi	r22, 0x25	; 37
    2616:	7a e0       	ldi	r23, 0x0A	; 10
    2618:	85 e8       	ldi	r24, 0x85	; 133
    261a:	0e 94 51 1c 	call	0x38a2	; 0x38a2 <LCD_Display_Text>
	
	// Display menu and markers
	LCD_Display_Text(9, (const unsigned char*)Wingdings, 0, 59);	// Down
    261e:	2b e3       	ldi	r18, 0x3B	; 59
    2620:	30 e0       	ldi	r19, 0x00	; 0
    2622:	40 e0       	ldi	r20, 0x00	; 0
    2624:	50 e0       	ldi	r21, 0x00	; 0
    2626:	6d e0       	ldi	r22, 0x0D	; 13
    2628:	71 e0       	ldi	r23, 0x01	; 1
    262a:	89 e0       	ldi	r24, 0x09	; 9
    262c:	0e 94 51 1c 	call	0x38a2	; 0x38a2 <LCD_Display_Text>
	LCD_Display_Text(14,(const unsigned char*)Verdana8,10,55);	// Menu
    2630:	27 e3       	ldi	r18, 0x37	; 55
    2632:	30 e0       	ldi	r19, 0x00	; 0
    2634:	4a e0       	ldi	r20, 0x0A	; 10
    2636:	50 e0       	ldi	r21, 0x00	; 0
    2638:	65 e2       	ldi	r22, 0x25	; 37
    263a:	7a e0       	ldi	r23, 0x0A	; 10
    263c:	8e e0       	ldi	r24, 0x0E	; 14
    263e:	0e 94 51 1c 	call	0x38a2	; 0x38a2 <LCD_Display_Text>

	// Display values
	print_menu_text(0, 1, (62 + Config.RxMode), 45, 16); // Rx mode
    2642:	40 91 a7 05 	lds	r20, 0x05A7
    2646:	42 5c       	subi	r20, 0xC2	; 194
    2648:	00 e1       	ldi	r16, 0x10	; 16
    264a:	2d e2       	ldi	r18, 0x2D	; 45
    264c:	61 e0       	ldi	r22, 0x01	; 1
    264e:	80 e0       	ldi	r24, 0x00	; 0
    2650:	90 e0       	ldi	r25, 0x00	; 0
    2652:	0e 94 c5 24 	call	0x498a	; 0x498a <print_menu_text>
    2656:	4a e0       	ldi	r20, 0x0A	; 10
    2658:	6c e4       	ldi	r22, 0x4C	; 76
    265a:	75 e0       	ldi	r23, 0x05	; 5
    265c:	80 91 23 01 	lds	r24, 0x0123
    2660:	90 91 24 01 	lds	r25, 0x0124
    2664:	0e 94 5b 3d 	call	0x7ab6	; 0x7ab6 <__itoa_ncheck>
	mugui_lcd_puts(itoa(transition,pBuffer,10),(const unsigned char*)Verdana8,110,27); // Raw transition value
    2668:	2b e1       	ldi	r18, 0x1B	; 27
    266a:	30 e0       	ldi	r19, 0x00	; 0
    266c:	4e e6       	ldi	r20, 0x6E	; 110
    266e:	50 e0       	ldi	r21, 0x00	; 0
    2670:	65 e2       	ldi	r22, 0x25	; 37
    2672:	7a e0       	ldi	r23, 0x0A	; 10
    2674:	0e 94 e7 33 	call	0x67ce	; 0x67ce <mugui_lcd_puts>

	if (Config.RxMode == PWM)
    2678:	80 91 a7 05 	lds	r24, 0x05A7
    267c:	81 30       	cpi	r24, 0x01	; 1
    267e:	d1 f4       	brne	.+52     	; 0x26b4 <Display_status+0x104>
	{
		LCD_Display_Text(24,(const unsigned char*)Verdana8,77,38); // Interrupt counter text 
    2680:	26 e2       	ldi	r18, 0x26	; 38
    2682:	30 e0       	ldi	r19, 0x00	; 0
    2684:	4d e4       	ldi	r20, 0x4D	; 77
    2686:	50 e0       	ldi	r21, 0x00	; 0
    2688:	65 e2       	ldi	r22, 0x25	; 37
    268a:	7a e0       	ldi	r23, 0x0A	; 10
    268c:	88 e1       	ldi	r24, 0x18	; 24
    268e:	0e 94 51 1c 	call	0x38a2	; 0x38a2 <LCD_Display_Text>
    2692:	4a e0       	ldi	r20, 0x0A	; 10
    2694:	6c e4       	ldi	r22, 0x4C	; 76
    2696:	75 e0       	ldi	r23, 0x05	; 5
    2698:	80 91 0a 01 	lds	r24, 0x010A
    269c:	90 91 0b 01 	lds	r25, 0x010B
    26a0:	0e 94 5b 3d 	call	0x7ab6	; 0x7ab6 <__itoa_ncheck>
		mugui_lcd_puts(itoa(InterruptCount,pBuffer,10),(const unsigned char*)Verdana8,110,38); // Interrupt counter
    26a4:	26 e2       	ldi	r18, 0x26	; 38
    26a6:	30 e0       	ldi	r19, 0x00	; 0
    26a8:	4e e6       	ldi	r20, 0x6E	; 110
    26aa:	50 e0       	ldi	r21, 0x00	; 0
    26ac:	65 e2       	ldi	r22, 0x25	; 37
    26ae:	7a e0       	ldi	r23, 0x0A	; 10
    26b0:	0e 94 e7 33 	call	0x67ce	; 0x67ce <mugui_lcd_puts>
	}

	// Display transition point
	if (transition <= 0)
    26b4:	80 91 23 01 	lds	r24, 0x0123
    26b8:	90 91 24 01 	lds	r25, 0x0124
    26bc:	18 16       	cp	r1, r24
    26be:	19 06       	cpc	r1, r25
    26c0:	44 f0       	brlt	.+16     	; 0x26d2 <Display_status+0x122>
	{
		LCD_Display_Text(48,(const unsigned char*)Verdana8,45,27);
    26c2:	2b e1       	ldi	r18, 0x1B	; 27
    26c4:	30 e0       	ldi	r19, 0x00	; 0
    26c6:	4d e2       	ldi	r20, 0x2D	; 45
    26c8:	50 e0       	ldi	r21, 0x00	; 0
    26ca:	65 e2       	ldi	r22, 0x25	; 37
    26cc:	7a e0       	ldi	r23, 0x0A	; 10
    26ce:	80 e3       	ldi	r24, 0x30	; 48
    26d0:	30 c0       	rjmp	.+96     	; 0x2732 <Display_status+0x182>
	}
	else if (transition >= 100)
    26d2:	84 36       	cpi	r24, 0x64	; 100
    26d4:	91 05       	cpc	r25, r1
    26d6:	44 f0       	brlt	.+16     	; 0x26e8 <Display_status+0x138>
	{
		LCD_Display_Text(50,(const unsigned char*)Verdana8,45,27);
    26d8:	2b e1       	ldi	r18, 0x1B	; 27
    26da:	30 e0       	ldi	r19, 0x00	; 0
    26dc:	4d e2       	ldi	r20, 0x2D	; 45
    26de:	50 e0       	ldi	r21, 0x00	; 0
    26e0:	65 e2       	ldi	r22, 0x25	; 37
    26e2:	7a e0       	ldi	r23, 0x0A	; 10
    26e4:	82 e3       	ldi	r24, 0x32	; 50
    26e6:	25 c0       	rjmp	.+74     	; 0x2732 <Display_status+0x182>
	}
	else if (transition == Config.Transition_P1n)
    26e8:	20 91 b0 05 	lds	r18, 0x05B0
    26ec:	33 27       	eor	r19, r19
    26ee:	27 fd       	sbrc	r18, 7
    26f0:	30 95       	com	r19
    26f2:	82 17       	cp	r24, r18
    26f4:	93 07       	cpc	r25, r19
    26f6:	41 f4       	brne	.+16     	; 0x2708 <Display_status+0x158>
	{
		LCD_Display_Text(49,(const unsigned char*)Verdana8,45,27);
    26f8:	2b e1       	ldi	r18, 0x1B	; 27
    26fa:	30 e0       	ldi	r19, 0x00	; 0
    26fc:	4d e2       	ldi	r20, 0x2D	; 45
    26fe:	50 e0       	ldi	r21, 0x00	; 0
    2700:	65 e2       	ldi	r22, 0x25	; 37
    2702:	7a e0       	ldi	r23, 0x0A	; 10
    2704:	81 e3       	ldi	r24, 0x31	; 49
    2706:	15 c0       	rjmp	.+42     	; 0x2732 <Display_status+0x182>
	}
	else if (transition < Config.Transition_P1n)
    2708:	82 17       	cp	r24, r18
    270a:	93 07       	cpc	r25, r19
    270c:	44 f4       	brge	.+16     	; 0x271e <Display_status+0x16e>
	{
		LCD_Display_Text(51,(const unsigned char*)Verdana8,45,27);
    270e:	2b e1       	ldi	r18, 0x1B	; 27
    2710:	30 e0       	ldi	r19, 0x00	; 0
    2712:	4d e2       	ldi	r20, 0x2D	; 45
    2714:	50 e0       	ldi	r21, 0x00	; 0
    2716:	65 e2       	ldi	r22, 0x25	; 37
    2718:	7a e0       	ldi	r23, 0x0A	; 10
    271a:	83 e3       	ldi	r24, 0x33	; 51
    271c:	0a c0       	rjmp	.+20     	; 0x2732 <Display_status+0x182>
	}
	else if (transition > Config.Transition_P1n)
    271e:	28 17       	cp	r18, r24
    2720:	39 07       	cpc	r19, r25
    2722:	4c f4       	brge	.+18     	; 0x2736 <Display_status+0x186>
	{
		LCD_Display_Text(52,(const unsigned char*)Verdana8,45,27);
    2724:	2b e1       	ldi	r18, 0x1B	; 27
    2726:	30 e0       	ldi	r19, 0x00	; 0
    2728:	4d e2       	ldi	r20, 0x2D	; 45
    272a:	50 e0       	ldi	r21, 0x00	; 0
    272c:	65 e2       	ldi	r22, 0x25	; 37
    272e:	7a e0       	ldi	r23, 0x0A	; 10
    2730:	84 e3       	ldi	r24, 0x34	; 52
    2732:	0e 94 51 1c 	call	0x38a2	; 0x38a2 <LCD_Display_Text>

	// Display voltage
	uint8_t x_loc = 45;		// X location of voltage display
	uint8_t y_loc = 38;		// Y location of voltage display

	vbat_temp = GetVbat();
    2736:	0e 94 93 39 	call	0x7326	; 0x7326 <GetVbat>
    273a:	6c 01       	movw	r12, r24
	temp = vbat_temp/100;	// Display whole decimal part first
    273c:	64 e6       	ldi	r22, 0x64	; 100
    273e:	70 e0       	ldi	r23, 0x00	; 0
    2740:	0e 94 7b 3c 	call	0x78f6	; 0x78f6 <__udivmodhi4>
    2744:	8b 01       	movw	r16, r22
    2746:	4a e0       	ldi	r20, 0x0A	; 10
    2748:	6c e4       	ldi	r22, 0x4C	; 76
    274a:	75 e0       	ldi	r23, 0x05	; 5
    274c:	c8 01       	movw	r24, r16
    274e:	0e 94 5b 3d 	call	0x7ab6	; 0x7ab6 <__itoa_ncheck>
	mugui_text_sizestring(itoa(temp,pBuffer,10), (const unsigned char*)Verdana8, &size);
    2752:	ae 01       	movw	r20, r28
    2754:	4f 5f       	subi	r20, 0xFF	; 255
    2756:	5f 4f       	sbci	r21, 0xFF	; 255
    2758:	65 e2       	ldi	r22, 0x25	; 37
    275a:	7a e0       	ldi	r23, 0x0A	; 10
    275c:	0e 94 d2 32 	call	0x65a4	; 0x65a4 <mugui_text_sizestring>
    2760:	4a e0       	ldi	r20, 0x0A	; 10
    2762:	6c e4       	ldi	r22, 0x4C	; 76
    2764:	75 e0       	ldi	r23, 0x05	; 5
    2766:	c8 01       	movw	r24, r16
    2768:	0e 94 5b 3d 	call	0x7ab6	; 0x7ab6 <__itoa_ncheck>
	mugui_lcd_puts(itoa(temp,pBuffer,10),(const unsigned char*)Verdana8,x_loc,y_loc);
    276c:	26 e2       	ldi	r18, 0x26	; 38
    276e:	30 e0       	ldi	r19, 0x00	; 0
    2770:	4d e2       	ldi	r20, 0x2D	; 45
    2772:	50 e0       	ldi	r21, 0x00	; 0
    2774:	65 e2       	ldi	r22, 0x25	; 37
    2776:	7a e0       	ldi	r23, 0x0A	; 10
    2778:	0e 94 e7 33 	call	0x67ce	; 0x67ce <mugui_lcd_puts>
	pos1 = size.x;

	vbat_temp = vbat_temp - (temp * 100); // Now display the parts to the right of the decimal point
    277c:	2c e9       	ldi	r18, 0x9C	; 156
    277e:	20 03       	mulsu	r18, r16
    2780:	70 01       	movw	r14, r0
    2782:	21 9f       	mul	r18, r17
    2784:	f0 0c       	add	r15, r0
    2786:	11 24       	eor	r1, r1
    2788:	ec 0c       	add	r14, r12
    278a:	fd 1c       	adc	r15, r13

	LCD_Display_Text(7,(const unsigned char*)Verdana8,(x_loc + pos1),y_loc);
    278c:	09 81       	ldd	r16, Y+1	; 0x01
    278e:	11 27       	eor	r17, r17
    2790:	07 fd       	sbrc	r16, 7
    2792:	10 95       	com	r17
    2794:	03 5d       	subi	r16, 0xD3	; 211
    2796:	1f 4f       	sbci	r17, 0xFF	; 255
    2798:	26 e2       	ldi	r18, 0x26	; 38
    279a:	30 e0       	ldi	r19, 0x00	; 0
    279c:	a8 01       	movw	r20, r16
    279e:	65 e2       	ldi	r22, 0x25	; 37
    27a0:	7a e0       	ldi	r23, 0x0A	; 10
    27a2:	87 e0       	ldi	r24, 0x07	; 7
    27a4:	0e 94 51 1c 	call	0x38a2	; 0x38a2 <LCD_Display_Text>
	mugui_text_sizestring(".", (const unsigned char*)Verdana8, &size);
    27a8:	ae 01       	movw	r20, r28
    27aa:	4f 5f       	subi	r20, 0xFF	; 255
    27ac:	5f 4f       	sbci	r21, 0xFF	; 255
    27ae:	65 e2       	ldi	r22, 0x25	; 37
    27b0:	7a e0       	ldi	r23, 0x0A	; 10
    27b2:	83 e0       	ldi	r24, 0x03	; 3
    27b4:	91 e0       	ldi	r25, 0x01	; 1
    27b6:	0e 94 d2 32 	call	0x65a4	; 0x65a4 <mugui_text_sizestring>
	pos3 = size.x;
    27ba:	c9 80       	ldd	r12, Y+1	; 0x01
	mugui_text_sizestring("0", (const unsigned char*)Verdana8, &size);
    27bc:	ae 01       	movw	r20, r28
    27be:	4f 5f       	subi	r20, 0xFF	; 255
    27c0:	5f 4f       	sbci	r21, 0xFF	; 255
    27c2:	65 e2       	ldi	r22, 0x25	; 37
    27c4:	7a e0       	ldi	r23, 0x0A	; 10
    27c6:	85 e0       	ldi	r24, 0x05	; 5
    27c8:	91 e0       	ldi	r25, 0x01	; 1
    27ca:	0e 94 d2 32 	call	0x65a4	; 0x65a4 <mugui_text_sizestring>
	pos2 = size.x;
    27ce:	b9 80       	ldd	r11, Y+1	; 0x01
    27d0:	dd 24       	eor	r13, r13
    27d2:	c7 fc       	sbrc	r12, 7
    27d4:	d0 94       	com	r13

	if (vbat_temp >= 10)
    27d6:	8a e0       	ldi	r24, 0x0A	; 10
    27d8:	e8 16       	cp	r14, r24
    27da:	f1 04       	cpc	r15, r1
    27dc:	40 f0       	brcs	.+16     	; 0x27ee <Display_status+0x23e>
    27de:	4a e0       	ldi	r20, 0x0A	; 10
    27e0:	6c e4       	ldi	r22, 0x4C	; 76
    27e2:	75 e0       	ldi	r23, 0x05	; 5
    27e4:	c7 01       	movw	r24, r14
    27e6:	0e 94 5b 3d 	call	0x7ab6	; 0x7ab6 <__itoa_ncheck>
	{
		mugui_lcd_puts(itoa(vbat_temp,pBuffer,10),(const unsigned char*)Verdana8,(x_loc + pos1 + pos3),y_loc);
    27ea:	a8 01       	movw	r20, r16
    27ec:	15 c0       	rjmp	.+42     	; 0x2818 <Display_status+0x268>
	}
	else
	{
		LCD_Display_Text(8,(const unsigned char*)Verdana8,(x_loc + pos1 + pos3),y_loc);
    27ee:	a8 01       	movw	r20, r16
    27f0:	4c 0d       	add	r20, r12
    27f2:	5d 1d       	adc	r21, r13
    27f4:	26 e2       	ldi	r18, 0x26	; 38
    27f6:	30 e0       	ldi	r19, 0x00	; 0
    27f8:	65 e2       	ldi	r22, 0x25	; 37
    27fa:	7a e0       	ldi	r23, 0x0A	; 10
    27fc:	88 e0       	ldi	r24, 0x08	; 8
    27fe:	0e 94 51 1c 	call	0x38a2	; 0x38a2 <LCD_Display_Text>
    2802:	4a e0       	ldi	r20, 0x0A	; 10
    2804:	6c e4       	ldi	r22, 0x4C	; 76
    2806:	75 e0       	ldi	r23, 0x05	; 5
    2808:	c7 01       	movw	r24, r14
    280a:	0e 94 5b 3d 	call	0x7ab6	; 0x7ab6 <__itoa_ncheck>
		mugui_lcd_puts(itoa(vbat_temp,pBuffer,10),(const unsigned char*)Verdana8,(x_loc + pos1 + pos2 + pos3),y_loc);
    280e:	a8 01       	movw	r20, r16
    2810:	4b 0d       	add	r20, r11
    2812:	51 1d       	adc	r21, r1
    2814:	b7 fc       	sbrc	r11, 7
    2816:	5a 95       	dec	r21
    2818:	4c 0d       	add	r20, r12
    281a:	5d 1d       	adc	r21, r13
    281c:	26 e2       	ldi	r18, 0x26	; 38
    281e:	30 e0       	ldi	r19, 0x00	; 0
    2820:	65 e2       	ldi	r22, 0x25	; 37
    2822:	7a e0       	ldi	r23, 0x0A	; 10
    2824:	0e 94 e7 33 	call	0x67ce	; 0x67ce <mugui_lcd_puts>
	}

	// Display error messages
	if (General_error != 0)
    2828:	80 91 0e 01 	lds	r24, 0x010E
    282c:	88 23       	and	r24, r24
    282e:	09 f4       	brne	.+2      	; 0x2832 <Display_status+0x282>
    2830:	58 c0       	rjmp	.+176    	; 0x28e2 <Display_status+0x332>
	{
		// Create message box
		fillrect(buffer, 14,8, 96, 48, 0);	// White box
    2832:	e1 2c       	mov	r14, r1
    2834:	00 e3       	ldi	r16, 0x30	; 48
    2836:	20 e6       	ldi	r18, 0x60	; 96
    2838:	48 e0       	ldi	r20, 0x08	; 8
    283a:	6e e0       	ldi	r22, 0x0E	; 14
    283c:	83 e3       	ldi	r24, 0x33	; 51
    283e:	91 e0       	ldi	r25, 0x01	; 1
    2840:	0e 94 66 1b 	call	0x36cc	; 0x36cc <fillrect>
		drawrect(buffer, 14,8, 96, 48, 1); 	// Outline
    2844:	ee 24       	eor	r14, r14
    2846:	e3 94       	inc	r14
    2848:	20 e6       	ldi	r18, 0x60	; 96
    284a:	48 e0       	ldi	r20, 0x08	; 8
    284c:	6e e0       	ldi	r22, 0x0E	; 14
    284e:	83 e3       	ldi	r24, 0x33	; 51
    2850:	91 e0       	ldi	r25, 0x01	; 1
    2852:	0e 94 90 1b 	call	0x3720	; 0x3720 <drawrect>

		// Prioritise error from top to bottom
		if((General_error & (1 << LVA_ALARM)) != 0)
    2856:	80 91 0e 01 	lds	r24, 0x010E
    285a:	85 ff       	sbrs	r24, 5
    285c:	11 c0       	rjmp	.+34     	; 0x2880 <Display_status+0x2d0>
		{
			LCD_Display_Text(134,(const unsigned char*)Verdana14,33,14); // Battery
    285e:	2e e0       	ldi	r18, 0x0E	; 14
    2860:	30 e0       	ldi	r19, 0x00	; 0
    2862:	41 e2       	ldi	r20, 0x21	; 33
    2864:	50 e0       	ldi	r21, 0x00	; 0
    2866:	67 e7       	ldi	r22, 0x77	; 119
    2868:	71 e0       	ldi	r23, 0x01	; 1
    286a:	86 e8       	ldi	r24, 0x86	; 134
    286c:	0e 94 51 1c 	call	0x38a2	; 0x38a2 <LCD_Display_Text>
			LCD_Display_Text(73,(const unsigned char*)Verdana14,46,34); 	// Low
    2870:	22 e2       	ldi	r18, 0x22	; 34
    2872:	30 e0       	ldi	r19, 0x00	; 0
    2874:	4e e2       	ldi	r20, 0x2E	; 46
    2876:	50 e0       	ldi	r21, 0x00	; 0
    2878:	67 e7       	ldi	r22, 0x77	; 119
    287a:	71 e0       	ldi	r23, 0x01	; 1
    287c:	89 e4       	ldi	r24, 0x49	; 73
    287e:	2f c0       	rjmp	.+94     	; 0x28de <Display_status+0x32e>
		}
		else if((General_error & (1 << NO_SIGNAL)) != 0)
    2880:	82 ff       	sbrs	r24, 2
    2882:	11 c0       	rjmp	.+34     	; 0x28a6 <Display_status+0x2f6>
		{
			LCD_Display_Text(75,(const unsigned char*)Verdana14,51,13); 	// No
    2884:	2d e0       	ldi	r18, 0x0D	; 13
    2886:	30 e0       	ldi	r19, 0x00	; 0
    2888:	43 e3       	ldi	r20, 0x33	; 51
    288a:	50 e0       	ldi	r21, 0x00	; 0
    288c:	67 e7       	ldi	r22, 0x77	; 119
    288e:	71 e0       	ldi	r23, 0x01	; 1
    2890:	8b e4       	ldi	r24, 0x4B	; 75
    2892:	0e 94 51 1c 	call	0x38a2	; 0x38a2 <LCD_Display_Text>
			LCD_Display_Text(76,(const unsigned char*)Verdana14,39,33);  // Signal
    2896:	21 e2       	ldi	r18, 0x21	; 33
    2898:	30 e0       	ldi	r19, 0x00	; 0
    289a:	47 e2       	ldi	r20, 0x27	; 39
    289c:	50 e0       	ldi	r21, 0x00	; 0
    289e:	67 e7       	ldi	r22, 0x77	; 119
    28a0:	71 e0       	ldi	r23, 0x01	; 1
    28a2:	8c e4       	ldi	r24, 0x4C	; 76
    28a4:	1c c0       	rjmp	.+56     	; 0x28de <Display_status+0x32e>
		}
		else if((General_error & (1 << THROTTLE_HIGH)) != 0)
    28a6:	81 ff       	sbrs	r24, 1
    28a8:	11 c0       	rjmp	.+34     	; 0x28cc <Display_status+0x31c>
		{
			LCD_Display_Text(105,(const unsigned char*)Verdana14,28,14); // Throttle
    28aa:	2e e0       	ldi	r18, 0x0E	; 14
    28ac:	30 e0       	ldi	r19, 0x00	; 0
    28ae:	4c e1       	ldi	r20, 0x1C	; 28
    28b0:	50 e0       	ldi	r21, 0x00	; 0
    28b2:	67 e7       	ldi	r22, 0x77	; 119
    28b4:	71 e0       	ldi	r23, 0x01	; 1
    28b6:	89 e6       	ldi	r24, 0x69	; 105
    28b8:	0e 94 51 1c 	call	0x38a2	; 0x38a2 <LCD_Display_Text>
			LCD_Display_Text(55,(const unsigned char*)Verdana14,46,34);	// High
    28bc:	22 e2       	ldi	r18, 0x22	; 34
    28be:	30 e0       	ldi	r19, 0x00	; 0
    28c0:	4e e2       	ldi	r20, 0x2E	; 46
    28c2:	50 e0       	ldi	r21, 0x00	; 0
    28c4:	67 e7       	ldi	r22, 0x77	; 119
    28c6:	71 e0       	ldi	r23, 0x01	; 1
    28c8:	87 e3       	ldi	r24, 0x37	; 55
    28ca:	09 c0       	rjmp	.+18     	; 0x28de <Display_status+0x32e>
		}
		else if((General_error & (1 << DISARMED)) != 0)
    28cc:	84 ff       	sbrs	r24, 4
    28ce:	09 c0       	rjmp	.+18     	; 0x28e2 <Display_status+0x332>
		{
			LCD_Display_Text(18,(const unsigned char*)Verdana14,25,24); 	// Disarmed
    28d0:	28 e1       	ldi	r18, 0x18	; 24
    28d2:	30 e0       	ldi	r19, 0x00	; 0
    28d4:	49 e1       	ldi	r20, 0x19	; 25
    28d6:	50 e0       	ldi	r21, 0x00	; 0
    28d8:	67 e7       	ldi	r22, 0x77	; 119
    28da:	71 e0       	ldi	r23, 0x01	; 1
    28dc:	82 e1       	ldi	r24, 0x12	; 18
    28de:	0e 94 51 1c 	call	0x38a2	; 0x38a2 <LCD_Display_Text>
		}
	}

	// Write buffer to complete
	write_buffer(buffer,1);
    28e2:	61 e0       	ldi	r22, 0x01	; 1
    28e4:	83 e3       	ldi	r24, 0x33	; 51
    28e6:	91 e0       	ldi	r25, 0x01	; 1
    28e8:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <write_buffer>
	clear_buffer(buffer);
    28ec:	83 e3       	ldi	r24, 0x33	; 51
    28ee:	91 e0       	ldi	r25, 0x01	; 1
    28f0:	0e 94 a8 1a 	call	0x3550	; 0x3550 <clear_buffer>
}
    28f4:	24 96       	adiw	r28, 0x04	; 4
    28f6:	e9 e0       	ldi	r30, 0x09	; 9
    28f8:	0c 94 40 3d 	jmp	0x7a80	; 0x7a80 <__epilogue_restores__+0x12>

000028fc <Display_sticks>:
//************************************************************
// Code
//************************************************************

void Display_sticks(void)
{
    28fc:	a0 e0       	ldi	r26, 0x00	; 0
    28fe:	b0 e0       	ldi	r27, 0x00	; 0
    2900:	e4 e8       	ldi	r30, 0x84	; 132
    2902:	f4 e1       	ldi	r31, 0x14	; 20
    2904:	0c 94 24 3d 	jmp	0x7a48	; 0x7a48 <__prologue_saves__+0x12>
	int8_t	offset;
	int8_t	temp_aileron, temp_elevator, temp_rudder;
	bool	CalibrateDone = false;

	// Save original settings in case user aborts
	temp_aileron = Config.AileronPol;
    2908:	f0 90 ab 05 	lds	r15, 0x05AB
	temp_elevator = Config.ElevatorPol;
    290c:	10 91 ac 05 	lds	r17, 0x05AC
	temp_rudder = Config.RudderPol;
    2910:	b0 90 ad 05 	lds	r11, 0x05AD

	// Reset to defaults - not ideal, but it works
	Config.AileronPol = NORMAL;
    2914:	10 92 ab 05 	sts	0x05AB, r1
	Config.ElevatorPol =  NORMAL;
    2918:	10 92 ac 05 	sts	0x05AC, r1
	Config.RudderPol = NORMAL;
    291c:	10 92 ad 05 	sts	0x05AD, r1
void Display_sticks(void)
{
	int8_t	i;
	int8_t	offset;
	int8_t	temp_aileron, temp_elevator, temp_rudder;
	bool	CalibrateDone = false;
    2920:	c0 e0       	ldi	r28, 0x00	; 0
	Config.AileronPol = NORMAL;
	Config.ElevatorPol =  NORMAL;
	Config.RudderPol = NORMAL;

	// Until exit button pressed
	while((BUTTON1 != 0) && (!CalibrateDone))
    2922:	1f 9b       	sbis	0x03, 7	; 3
    2924:	a4 c0       	rjmp	.+328    	; 0x2a6e <Display_sticks+0x172>
    2926:	c1 11       	cpse	r28, r1
    2928:	a4 c0       	rjmp	.+328    	; 0x2a72 <Display_sticks+0x176>
	{
		offset = 0;

		// Clear screen buffer
		clear_buffer(buffer);
    292a:	83 e3       	ldi	r24, 0x33	; 51
    292c:	91 e0       	ldi	r25, 0x01	; 1
    292e:	0e 94 a8 1a 	call	0x3550	; 0x3550 <clear_buffer>
    2932:	92 e0       	ldi	r25, 0x02	; 2
    2934:	d9 2e       	mov	r13, r25
	Config.RudderPol = NORMAL;

	// Until exit button pressed
	while((BUTTON1 != 0) && (!CalibrateDone))
	{
		offset = 0;
    2936:	d0 e0       	ldi	r29, 0x00	; 0
		clear_buffer(buffer);

		// Draw graphic
		for (i = 0; i < 2; i++)
		{
			drawrect(buffer, 17 + offset, 0, 40, 40, 1);			// Box
    2938:	61 e1       	ldi	r22, 0x11	; 17
    293a:	6d 0f       	add	r22, r29
    293c:	ee 24       	eor	r14, r14
    293e:	e3 94       	inc	r14
    2940:	08 e2       	ldi	r16, 0x28	; 40
    2942:	28 e2       	ldi	r18, 0x28	; 40
    2944:	40 e0       	ldi	r20, 0x00	; 0
    2946:	83 e3       	ldi	r24, 0x33	; 51
    2948:	91 e0       	ldi	r25, 0x01	; 1
    294a:	0e 94 90 1b 	call	0x3720	; 0x3720 <drawrect>
			drawline(buffer, 38 + offset,20, 48 + offset,  3, 1); 	// Line 1
    294e:	86 e2       	ldi	r24, 0x26	; 38
    2950:	c8 2e       	mov	r12, r24
    2952:	cd 0e       	add	r12, r29
    2954:	20 e3       	ldi	r18, 0x30	; 48
    2956:	2d 0f       	add	r18, r29
    2958:	03 e0       	ldi	r16, 0x03	; 3
    295a:	44 e1       	ldi	r20, 0x14	; 20
    295c:	6c 2d       	mov	r22, r12
    295e:	83 e3       	ldi	r24, 0x33	; 51
    2960:	91 e0       	ldi	r25, 0x01	; 1
    2962:	0e 94 08 1b 	call	0x3610	; 0x3610 <drawline>
			drawline(buffer, 41 + offset,21, 56 + offset,  6, 1); 	// Line 2
    2966:	28 e3       	ldi	r18, 0x38	; 56
    2968:	2d 0f       	add	r18, r29
    296a:	69 e2       	ldi	r22, 0x29	; 41
    296c:	6d 0f       	add	r22, r29
    296e:	06 e0       	ldi	r16, 0x06	; 6
    2970:	45 e1       	ldi	r20, 0x15	; 21
    2972:	83 e3       	ldi	r24, 0x33	; 51
    2974:	91 e0       	ldi	r25, 0x01	; 1
    2976:	0e 94 08 1b 	call	0x3610	; 0x3610 <drawline>
			fillcircle(buffer, 38 + offset, 21, 2, 1);				// Centre
    297a:	01 e0       	ldi	r16, 0x01	; 1
    297c:	22 e0       	ldi	r18, 0x02	; 2
    297e:	45 e1       	ldi	r20, 0x15	; 21
    2980:	6c 2d       	mov	r22, r12
    2982:	83 e3       	ldi	r24, 0x33	; 51
    2984:	91 e0       	ldi	r25, 0x01	; 1
    2986:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <fillcircle>
			fillcircle(buffer, 51 + offset, 5, 4, 1);				// End
    298a:	63 e3       	ldi	r22, 0x33	; 51
    298c:	6d 0f       	add	r22, r29
    298e:	24 e0       	ldi	r18, 0x04	; 4
    2990:	45 e0       	ldi	r20, 0x05	; 5
    2992:	83 e3       	ldi	r24, 0x33	; 51
    2994:	91 e0       	ldi	r25, 0x01	; 1
    2996:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <fillcircle>
    299a:	da 94       	dec	r13

		// Clear screen buffer
		clear_buffer(buffer);

		// Draw graphic
		for (i = 0; i < 2; i++)
    299c:	11 f0       	breq	.+4      	; 0x29a2 <Display_sticks+0xa6>
			drawline(buffer, 38 + offset,20, 48 + offset,  3, 1); 	// Line 1
			drawline(buffer, 41 + offset,21, 56 + offset,  6, 1); 	// Line 2
			fillcircle(buffer, 38 + offset, 21, 2, 1);				// Centre
			fillcircle(buffer, 51 + offset, 5, 4, 1);				// End

			offset = 52;
    299e:	d4 e3       	ldi	r29, 0x34	; 52
    29a0:	cb cf       	rjmp	.-106    	; 0x2938 <Display_sticks+0x3c>
		}

		// Print bottom text and markers
		LCD_Display_Text(12, (const unsigned char*)Wingdings, 0, 57); 		// Left
    29a2:	29 e3       	ldi	r18, 0x39	; 57
    29a4:	30 e0       	ldi	r19, 0x00	; 0
    29a6:	40 e0       	ldi	r20, 0x00	; 0
    29a8:	50 e0       	ldi	r21, 0x00	; 0
    29aa:	6d e0       	ldi	r22, 0x0D	; 13
    29ac:	71 e0       	ldi	r23, 0x01	; 1
    29ae:	8c e0       	ldi	r24, 0x0C	; 12
    29b0:	0e 94 51 1c 	call	0x38a2	; 0x38a2 <LCD_Display_Text>

		// If uncalibrated
		if (!CalibrateDone)
		{
			RxGetChannels();
    29b4:	0e 94 ed 37 	call	0x6fda	; 0x6fda <RxGetChannels>

			// Display "No RX signal" if no input detected
			if(RxChannel[AILERON] == 0)
    29b8:	80 91 41 07 	lds	r24, 0x0741
    29bc:	90 91 42 07 	lds	r25, 0x0742
    29c0:	89 2b       	or	r24, r25
    29c2:	41 f4       	brne	.+16     	; 0x29d4 <Display_sticks+0xd8>
			{
				LCD_Display_Text(135,(const unsigned char*)Verdana14,14,43); 	// "No RX signal"
    29c4:	2b e2       	ldi	r18, 0x2B	; 43
    29c6:	30 e0       	ldi	r19, 0x00	; 0
    29c8:	4e e0       	ldi	r20, 0x0E	; 14
    29ca:	50 e0       	ldi	r21, 0x00	; 0
    29cc:	67 e7       	ldi	r22, 0x77	; 119
    29ce:	71 e0       	ldi	r23, 0x01	; 1
    29d0:	87 e8       	ldi	r24, 0x87	; 135
    29d2:	15 c0       	rjmp	.+42     	; 0x29fe <Display_sticks+0x102>
			}

			// Sticks have not moved far enough
			else if ((RxChannel[AILERON] > 3000) && (RxChannel[AILERON] < 4500))
    29d4:	80 91 41 07 	lds	r24, 0x0741
    29d8:	90 91 42 07 	lds	r25, 0x0742
    29dc:	89 3b       	cpi	r24, 0xB9	; 185
    29de:	9b 40       	sbci	r25, 0x0B	; 11
    29e0:	88 f0       	brcs	.+34     	; 0x2a04 <Display_sticks+0x108>
    29e2:	80 91 41 07 	lds	r24, 0x0741
    29e6:	90 91 42 07 	lds	r25, 0x0742
    29ea:	84 39       	cpi	r24, 0x94	; 148
    29ec:	91 41       	sbci	r25, 0x11	; 17
    29ee:	50 f4       	brcc	.+20     	; 0x2a04 <Display_sticks+0x108>
			{
				LCD_Display_Text(136,(const unsigned char*)Verdana14,9,43); 		// "Hold as shown"
    29f0:	2b e2       	ldi	r18, 0x2B	; 43
    29f2:	30 e0       	ldi	r19, 0x00	; 0
    29f4:	49 e0       	ldi	r20, 0x09	; 9
    29f6:	50 e0       	ldi	r21, 0x00	; 0
    29f8:	67 e7       	ldi	r22, 0x77	; 119
    29fa:	71 e0       	ldi	r23, 0x01	; 1
    29fc:	88 e8       	ldi	r24, 0x88	; 136
    29fe:	0e 94 51 1c 	call	0x38a2	; 0x38a2 <LCD_Display_Text>
    2a02:	26 c0       	rjmp	.+76     	; 0x2a50 <Display_sticks+0x154>

			// Sticks should now be in the right position
			// Reverse wrong input channels
			else
			{
				if (RCinputs[AILERON] < 0)
    2a04:	40 91 a1 07 	lds	r20, 0x07A1
    2a08:	50 91 a2 07 	lds	r21, 0x07A2
    2a0c:	57 ff       	sbrs	r21, 7
    2a0e:	03 c0       	rjmp	.+6      	; 0x2a16 <Display_sticks+0x11a>
				{
					Config.AileronPol = REVERSED;
    2a10:	81 e0       	ldi	r24, 0x01	; 1
    2a12:	80 93 ab 05 	sts	0x05AB, r24
				}

				if (RCinputs[ELEVATOR] < 0)
    2a16:	20 91 a3 07 	lds	r18, 0x07A3
    2a1a:	30 91 a4 07 	lds	r19, 0x07A4
    2a1e:	37 ff       	sbrs	r19, 7
    2a20:	03 c0       	rjmp	.+6      	; 0x2a28 <Display_sticks+0x12c>
				{
					Config.ElevatorPol = REVERSED;
    2a22:	81 e0       	ldi	r24, 0x01	; 1
    2a24:	80 93 ac 05 	sts	0x05AC, r24
				}

				if (RCinputs[RUDDER] < 0)
    2a28:	80 91 a5 07 	lds	r24, 0x07A5
    2a2c:	90 91 a6 07 	lds	r25, 0x07A6
    2a30:	97 ff       	sbrs	r25, 7
    2a32:	03 c0       	rjmp	.+6      	; 0x2a3a <Display_sticks+0x13e>
				{
					Config.RudderPol = REVERSED;
    2a34:	61 e0       	ldi	r22, 0x01	; 1
    2a36:	60 93 ad 05 	sts	0x05AD, r22
				}

				// If all positive - done!
				if ((RCinputs[AILERON] > 0) && (RCinputs[ELEVATOR] > 0) && (RCinputs[RUDDER] > 0))
    2a3a:	14 16       	cp	r1, r20
    2a3c:	15 06       	cpc	r1, r21
    2a3e:	44 f4       	brge	.+16     	; 0x2a50 <Display_sticks+0x154>
    2a40:	12 16       	cp	r1, r18
    2a42:	13 06       	cpc	r1, r19
    2a44:	2c f4       	brge	.+10     	; 0x2a50 <Display_sticks+0x154>
    2a46:	c1 e0       	ldi	r28, 0x01	; 1
    2a48:	18 16       	cp	r1, r24
    2a4a:	19 06       	cpc	r1, r25
    2a4c:	0c f0       	brlt	.+2      	; 0x2a50 <Display_sticks+0x154>
    2a4e:	c0 e0       	ldi	r28, 0x00	; 0
				}
			}
		}

		// Update buffer
		write_buffer(buffer,1);
    2a50:	61 e0       	ldi	r22, 0x01	; 1
    2a52:	83 e3       	ldi	r24, 0x33	; 51
    2a54:	91 e0       	ldi	r25, 0x01	; 1
    2a56:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <write_buffer>
    2a5a:	8f e7       	ldi	r24, 0x7F	; 127
    2a5c:	9a e1       	ldi	r25, 0x1A	; 26
    2a5e:	26 e0       	ldi	r18, 0x06	; 6
    2a60:	81 50       	subi	r24, 0x01	; 1
    2a62:	90 40       	sbci	r25, 0x00	; 0
    2a64:	20 40       	sbci	r18, 0x00	; 0
    2a66:	e1 f7       	brne	.-8      	; 0x2a60 <Display_sticks+0x164>
    2a68:	00 c0       	rjmp	.+0      	; 0x2a6a <Display_sticks+0x16e>
    2a6a:	00 00       	nop
    2a6c:	5a cf       	rjmp	.-332    	; 0x2922 <Display_sticks+0x26>
		_delay_ms(100);
	}

	// Save value and return
	if (CalibrateDone)
    2a6e:	cc 23       	and	r28, r28
    2a70:	a9 f0       	breq	.+42     	; 0x2a9c <Display_sticks+0x1a0>
	{
		LCD_Display_Text(137,(const unsigned char*)Verdana14,40,43); 	// "Done!"
    2a72:	2b e2       	ldi	r18, 0x2B	; 43
    2a74:	30 e0       	ldi	r19, 0x00	; 0
    2a76:	48 e2       	ldi	r20, 0x28	; 40
    2a78:	50 e0       	ldi	r21, 0x00	; 0
    2a7a:	67 e7       	ldi	r22, 0x77	; 119
    2a7c:	71 e0       	ldi	r23, 0x01	; 1
    2a7e:	89 e8       	ldi	r24, 0x89	; 137
    2a80:	0e 94 51 1c 	call	0x38a2	; 0x38a2 <LCD_Display_Text>
		// Update buffer
		write_buffer(buffer,1);
    2a84:	61 e0       	ldi	r22, 0x01	; 1
    2a86:	83 e3       	ldi	r24, 0x33	; 51
    2a88:	91 e0       	ldi	r25, 0x01	; 1
    2a8a:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <write_buffer>
		clear_buffer(buffer);
    2a8e:	83 e3       	ldi	r24, 0x33	; 51
    2a90:	91 e0       	ldi	r25, 0x01	; 1
    2a92:	0e 94 a8 1a 	call	0x3550	; 0x3550 <clear_buffer>
		Save_Config_to_EEPROM();
    2a96:	0e 94 31 16 	call	0x2c62	; 0x2c62 <Save_Config_to_EEPROM>
    2a9a:	06 c0       	rjmp	.+12     	; 0x2aa8 <Display_sticks+0x1ac>
 	}
	else
	{
		// Restore old settings if failed
		Config.AileronPol = temp_aileron;
    2a9c:	f0 92 ab 05 	sts	0x05AB, r15
		Config.ElevatorPol = temp_elevator;
    2aa0:	10 93 ac 05 	sts	0x05AC, r17
		Config.RudderPol = temp_rudder;
    2aa4:	b0 92 ad 05 	sts	0x05AD, r11
	}
}
    2aa8:	cd b7       	in	r28, 0x3d	; 61
    2aaa:	de b7       	in	r29, 0x3e	; 62
    2aac:	e9 e0       	ldi	r30, 0x09	; 9
    2aae:	0c 94 40 3d 	jmp	0x7a80	; 0x7a80 <__epilogue_restores__+0x12>

00002ab2 <Set_EEPROM_Default_Config>:

const uint8_t	JR[MAX_RC_CHANNELS] PROGMEM 	= {0,1,2,3,4,5,6,7}; 	// JR/Spektrum channel sequence (TAERG123)
const uint8_t	FUTABA[MAX_RC_CHANNELS] PROGMEM = {1,2,0,3,4,5,6,7}; 	// Futaba channel sequence (AETRGF12)

void Set_EEPROM_Default_Config(void)
{
    2ab2:	0f 93       	push	r16
    2ab4:	1f 93       	push	r17
    2ab6:	cf 93       	push	r28
    2ab8:	df 93       	push	r29
	uint8_t i;
	
	// Clear entire Config space first
	memset(&Config.setup,0,(sizeof(Config)));
    2aba:	8f eb       	ldi	r24, 0xBF	; 191
    2abc:	91 e0       	ldi	r25, 0x01	; 1
    2abe:	ee e7       	ldi	r30, 0x7E	; 126
    2ac0:	f5 e0       	ldi	r31, 0x05	; 5
    2ac2:	df 01       	movw	r26, r30
    2ac4:	9c 01       	movw	r18, r24
    2ac6:	1d 92       	st	X+, r1
    2ac8:	21 50       	subi	r18, 0x01	; 1
    2aca:	30 40       	sbci	r19, 0x00	; 0
    2acc:	e1 f7       	brne	.-8      	; 0x2ac6 <Set_EEPROM_Default_Config+0x14>

	// Set magic number / setup byte
	Config.setup = MAGIC_NUMBER;
    2ace:	8e e2       	ldi	r24, 0x2E	; 46
    2ad0:	80 93 7e 05 	sts	0x057E, r24
    2ad4:	ec ef       	ldi	r30, 0xFC	; 252
    2ad6:	f0 e0       	ldi	r31, 0x00	; 0
    2ad8:	cf e7       	ldi	r28, 0x7F	; 127
    2ada:	d5 e0       	ldi	r29, 0x05	; 5
    2adc:	af e0       	ldi	r26, 0x0F	; 15
    2ade:	b7 e0       	ldi	r27, 0x07	; 7

	// Servo defaults
	for (i = 0; i < MAX_RC_CHANNELS; i++)
	{
		Config.ChannelOrder[i] = pgm_read_byte(&JR[i]);
		Config.RxChannelZeroOffset[i] = 3750;
    2ae0:	86 ea       	ldi	r24, 0xA6	; 166
    2ae2:	9e e0       	ldi	r25, 0x0E	; 14
	Config.setup = MAGIC_NUMBER;

	// Servo defaults
	for (i = 0; i < MAX_RC_CHANNELS; i++)
	{
		Config.ChannelOrder[i] = pgm_read_byte(&JR[i]);
    2ae4:	24 91       	lpm	r18, Z
    2ae6:	29 93       	st	Y+, r18
		Config.RxChannelZeroOffset[i] = 3750;
    2ae8:	8d 93       	st	X+, r24
    2aea:	9d 93       	st	X+, r25
    2aec:	31 96       	adiw	r30, 0x01	; 1

	// Set magic number / setup byte
	Config.setup = MAGIC_NUMBER;

	// Servo defaults
	for (i = 0; i < MAX_RC_CHANNELS; i++)
    2aee:	31 e0       	ldi	r19, 0x01	; 1
    2af0:	e4 30       	cpi	r30, 0x04	; 4
    2af2:	f3 07       	cpc	r31, r19
    2af4:	b9 f7       	brne	.-18     	; 0x2ae4 <Set_EEPROM_Default_Config+0x32>
	{
		Config.ChannelOrder[i] = pgm_read_byte(&JR[i]);
		Config.RxChannelZeroOffset[i] = 3750;
	}
	// Monopolar throttle is a special case. Set to -100% or -1000
	Config.RxChannelZeroOffset[THROTTLE] = 2750;
    2af6:	8e eb       	ldi	r24, 0xBE	; 190
    2af8:	9a e0       	ldi	r25, 0x0A	; 10
    2afa:	90 93 10 07 	sts	0x0710, r25
    2afe:	80 93 0f 07 	sts	0x070F, r24
    2b02:	ea e2       	ldi	r30, 0x2A	; 42
    2b04:	f6 e0       	ldi	r31, 0x06	; 6
    2b06:	cf ef       	ldi	r28, 0xFF	; 255
    2b08:	d6 e0       	ldi	r29, 0x06	; 6
    2b0a:	07 e0       	ldi	r16, 0x07	; 7
    2b0c:	17 e0       	ldi	r17, 0x07	; 7

	// Preset mixers to safe values
	for (i = 0; i < MAX_OUTPUTS; i++)
	{
		Config.Channel[i].P1n_position	= 50;
    2b0e:	62 e3       	ldi	r22, 0x32	; 50
		Config.Channel[i].P1_source_a 	= NOMIX;
    2b10:	3d e0       	ldi	r19, 0x0D	; 13
		Config.Channel[i].P1_source_b 	= NOMIX;
		Config.Channel[i].P2_source_a 	= NOMIX;
		Config.Channel[i].P2_source_b 	= NOMIX;
		Config.min_travel[i] = -100;
    2b12:	5c e9       	ldi	r21, 0x9C	; 156
		Config.max_travel[i] = 100;
    2b14:	44 e6       	ldi	r20, 0x64	; 100
    2b16:	cf 01       	movw	r24, r30
    2b18:	46 97       	sbiw	r24, 0x16	; 22
	Config.RxChannelZeroOffset[THROTTLE] = 2750;

	// Preset mixers to safe values
	for (i = 0; i < MAX_OUTPUTS; i++)
	{
		Config.Channel[i].P1n_position	= 50;
    2b1a:	22 e3       	ldi	r18, 0x32	; 50
    2b1c:	dc 01       	movw	r26, r24
    2b1e:	6c 93       	st	X, r22
    2b20:	40 96       	adiw	r24, 0x10	; 16
		Config.Channel[i].P1_source_a 	= NOMIX;
    2b22:	dc 01       	movw	r26, r24
    2b24:	3c 93       	st	X, r19
    2b26:	04 96       	adiw	r24, 0x04	; 4
		Config.Channel[i].P1_source_b 	= NOMIX;
    2b28:	dc 01       	movw	r26, r24
    2b2a:	3c 93       	st	X, r19
    2b2c:	02 97       	sbiw	r24, 0x02	; 2
		Config.Channel[i].P2_source_a 	= NOMIX;
    2b2e:	dc 01       	movw	r26, r24
    2b30:	3c 93       	st	X, r19
		Config.Channel[i].P2_source_b 	= NOMIX;
    2b32:	30 83       	st	Z, r19
		Config.min_travel[i] = -100;
    2b34:	59 93       	st	Y+, r21
		Config.max_travel[i] = 100;
    2b36:	84 e6       	ldi	r24, 0x64	; 100
    2b38:	d8 01       	movw	r26, r16
    2b3a:	4d 93       	st	X+, r20
    2b3c:	8d 01       	movw	r16, r26
    2b3e:	7d 96       	adiw	r30, 0x1d	; 29
	}
	// Monopolar throttle is a special case. Set to -100% or -1000
	Config.RxChannelZeroOffset[THROTTLE] = 2750;

	// Preset mixers to safe values
	for (i = 0; i < MAX_OUTPUTS; i++)
    2b40:	b7 e0       	ldi	r27, 0x07	; 7
    2b42:	e2 31       	cpi	r30, 0x12	; 18
    2b44:	fb 07       	cpc	r31, r27
    2b46:	39 f7       	brne	.-50     	; 0x2b16 <Set_EEPROM_Default_Config+0x64>
		Config.min_travel[i] = -100;
		Config.max_travel[i] = 100;
	}

	// Preset simple mixing for primary channels
	Config.Channel[OUT1].P1_throttle_volume = 100;
    2b48:	80 93 17 06 	sts	0x0617, r24
	Config.Channel[OUT2].P1_aileron_volume = 100;
    2b4c:	80 93 37 06 	sts	0x0637, r24
	Config.Channel[OUT3].P1_elevator_volume = 100;
    2b50:	80 93 56 06 	sts	0x0656, r24
	Config.Channel[OUT4].P1_rudder_volume = 100;
    2b54:	80 93 75 06 	sts	0x0675, r24
	Config.Channel[OUT3].P2_sensors |= (1 << PitchGyro);
	Config.Channel[OUT4].P2_sensors |= (1 << YawGyro);
#endif

	// Misc settings
	Config.RxMode = PWM;				// Default to PWM
    2b58:	81 e0       	ldi	r24, 0x01	; 1
    2b5a:	80 93 a7 05 	sts	0x05A7, r24
	Config.PWM_Sync = GEAR;
    2b5e:	34 e0       	ldi	r19, 0x04	; 4
    2b60:	30 93 a8 05 	sts	0x05A8, r19
	Config.AccZero[ROLL] 	= 0;		// Acc calibration defaults for KK2.1
	Config.AccZero[PITCH]	= 0;
	Config.AccZero[YAW]		= 0;
	Config.AccZeroNormZ		= 0;
#else
	Config.AccZero[ROLL] 	= 621;		// Acc calibration defaults for KK2.0
    2b64:	8d e6       	ldi	r24, 0x6D	; 109
    2b66:	92 e0       	ldi	r25, 0x02	; 2
    2b68:	90 93 20 07 	sts	0x0720, r25
    2b6c:	80 93 1f 07 	sts	0x071F, r24
	Config.AccZero[PITCH]	= 623;
    2b70:	8f e6       	ldi	r24, 0x6F	; 111
    2b72:	92 e0       	ldi	r25, 0x02	; 2
    2b74:	90 93 22 07 	sts	0x0722, r25
    2b78:	80 93 21 07 	sts	0x0721, r24
	Config.AccZero[YAW]		= 643; 		// 643 is the centre
    2b7c:	83 e8       	ldi	r24, 0x83	; 131
    2b7e:	92 e0       	ldi	r25, 0x02	; 2
    2b80:	90 93 24 07 	sts	0x0724, r25
    2b84:	80 93 23 07 	sts	0x0723, r24
	Config.AccZeroNormZ		= 765;
    2b88:	8d ef       	ldi	r24, 0xFD	; 253
    2b8a:	92 e0       	ldi	r25, 0x02	; 2
    2b8c:	90 93 26 07 	sts	0x0726, r25
    2b90:	80 93 25 07 	sts	0x0725, r24
#endif

	// Set up all profiles the same initially
	for (i = 0; i < FLIGHT_MODES; i++)
	{
		Config.FlightMode[i].Roll_P_mult = 80;			// PID defaults		
    2b94:	80 e5       	ldi	r24, 0x50	; 80
    2b96:	80 93 b1 05 	sts	0x05B1, r24
		Config.FlightMode[i].Roll_I_mult = 50;	
    2b9a:	20 93 b2 05 	sts	0x05B2, r18
		Config.FlightMode[i].Pitch_P_mult = 80;
    2b9e:	80 93 b7 05 	sts	0x05B7, r24
		Config.FlightMode[i].Pitch_I_mult = 50;
    2ba2:	20 93 b8 05 	sts	0x05B8, r18
		Config.FlightMode[i].Yaw_P_mult = 80;
    2ba6:	80 93 bd 05 	sts	0x05BD, r24
		Config.FlightMode[i].Yaw_I_mult = 50;
    2baa:	20 93 be 05 	sts	0x05BE, r18
		Config.FlightMode[i].A_Roll_P_mult = 60;
    2bae:	9c e3       	ldi	r25, 0x3C	; 60
    2bb0:	90 93 b5 05 	sts	0x05B5, r25
		Config.FlightMode[i].A_Pitch_P_mult = 60;
    2bb4:	90 93 bb 05 	sts	0x05BB, r25
#endif

	// Set up all profiles the same initially
	for (i = 0; i < FLIGHT_MODES; i++)
	{
		Config.FlightMode[i].Roll_P_mult = 80;			// PID defaults		
    2bb8:	80 93 c3 05 	sts	0x05C3, r24
		Config.FlightMode[i].Roll_I_mult = 50;	
    2bbc:	20 93 c4 05 	sts	0x05C4, r18
		Config.FlightMode[i].Pitch_P_mult = 80;
    2bc0:	80 93 c9 05 	sts	0x05C9, r24
		Config.FlightMode[i].Pitch_I_mult = 50;
    2bc4:	20 93 ca 05 	sts	0x05CA, r18
		Config.FlightMode[i].Yaw_P_mult = 80;
    2bc8:	80 93 cf 05 	sts	0x05CF, r24
		Config.FlightMode[i].Yaw_I_mult = 50;
    2bcc:	20 93 d0 05 	sts	0x05D0, r18
		Config.FlightMode[i].A_Roll_P_mult = 60;
    2bd0:	90 93 c7 05 	sts	0x05C7, r25
		Config.FlightMode[i].A_Pitch_P_mult = 60;
    2bd4:	90 93 cd 05 	sts	0x05CD, r25
	}

	Config.Acc_LPF = 8;					// IMU CF defaults
    2bd8:	88 e0       	ldi	r24, 0x08	; 8
    2bda:	80 93 0d 06 	sts	0x060D, r24
	Config.CF_factor = 30;
    2bde:	8e e1       	ldi	r24, 0x1E	; 30
    2be0:	80 93 0e 06 	sts	0x060E, r24
	Config.FlightChan = GEAR;			// Channel GEAR switches flight mode by default
    2be4:	30 93 aa 05 	sts	0x05AA, r19
	Config.Orientation = HORIZONTAL;	// Horizontal / vertical etc.
	Config.Contrast = 38;				// Contrast
    2be8:	96 e2       	ldi	r25, 0x26	; 38
    2bea:	90 93 08 06 	sts	0x0608, r25
	Config.Disarm_timer = 30;			// Default to 30 seconds
    2bee:	80 93 0a 06 	sts	0x060A, r24
	Config.Stick_Lock_rate = 3;
    2bf2:	83 e0       	ldi	r24, 0x03	; 3
    2bf4:	80 93 ae 05 	sts	0x05AE, r24
	Config.Transition_P1n = 50;			// Set P1.n point to 50%
    2bf8:	20 93 b0 05 	sts	0x05B0, r18
}
    2bfc:	df 91       	pop	r29
    2bfe:	cf 91       	pop	r28
    2c00:	1f 91       	pop	r17
    2c02:	0f 91       	pop	r16
    2c04:	08 95       	ret

00002c06 <eeprom_write_byte_changed>:
	_delay_ms(500);
	LED1 = !LED1;
}

void eeprom_write_byte_changed( uint8_t * addr, uint8_t value )
{ 
    2c06:	a1 e0       	ldi	r26, 0x01	; 1
    2c08:	b0 e0       	ldi	r27, 0x00	; 0
    2c0a:	e9 e0       	ldi	r30, 0x09	; 9
    2c0c:	f6 e1       	ldi	r31, 0x16	; 22
    2c0e:	0c 94 29 3d 	jmp	0x7a52	; 0x7a52 <__prologue_saves__+0x1c>
    2c12:	8c 01       	movw	r16, r24
	if(eeprom_read_byte(addr) != value)
    2c14:	69 83       	std	Y+1, r22	; 0x01
    2c16:	0e 94 90 3d 	call	0x7b20	; 0x7b20 <__eerd_byte_m324p>
    2c1a:	69 81       	ldd	r22, Y+1	; 0x01
    2c1c:	86 17       	cp	r24, r22
    2c1e:	19 f0       	breq	.+6      	; 0x2c26 <eeprom_write_byte_changed+0x20>
	{
		eeprom_write_byte( addr, value );
    2c20:	c8 01       	movw	r24, r16
    2c22:	0e 94 98 3d 	call	0x7b30	; 0x7b30 <__eewr_byte_m324p>
	}
}
    2c26:	21 96       	adiw	r28, 0x01	; 1
    2c28:	e4 e0       	ldi	r30, 0x04	; 4
    2c2a:	0c 94 45 3d 	jmp	0x7a8a	; 0x7a8a <__epilogue_restores__+0x1c>

00002c2e <eeprom_write_block_changes>:

void eeprom_write_block_changes( const uint8_t * src, void * dest, uint16_t size )
{ 
    2c2e:	ef 92       	push	r14
    2c30:	ff 92       	push	r15
    2c32:	0f 93       	push	r16
    2c34:	1f 93       	push	r17
    2c36:	cf 93       	push	r28
    2c38:	df 93       	push	r29
    2c3a:	ec 01       	movw	r28, r24
    2c3c:	8b 01       	movw	r16, r22
    2c3e:	7a 01       	movw	r14, r20
    2c40:	e8 0e       	add	r14, r24
    2c42:	f9 1e       	adc	r15, r25
	uint16_t len;

	for(len=0;len<size;len++)
    2c44:	ce 15       	cp	r28, r14
    2c46:	df 05       	cpc	r29, r15
    2c48:	39 f0       	breq	.+14     	; 0x2c58 <eeprom_write_block_changes+0x2a>
	{
		eeprom_write_byte_changed( dest, *src );
    2c4a:	69 91       	ld	r22, Y+
    2c4c:	c8 01       	movw	r24, r16
    2c4e:	0e 94 03 16 	call	0x2c06	; 0x2c06 <eeprom_write_byte_changed>
		src++;
		dest++;
    2c52:	0f 5f       	subi	r16, 0xFF	; 255
    2c54:	1f 4f       	sbci	r17, 0xFF	; 255
    2c56:	f6 cf       	rjmp	.-20     	; 0x2c44 <eeprom_write_block_changes+0x16>
	}
}
    2c58:	cd b7       	in	r28, 0x3d	; 61
    2c5a:	de b7       	in	r29, 0x3e	; 62
    2c5c:	e6 e0       	ldi	r30, 0x06	; 6
    2c5e:	0c 94 43 3d 	jmp	0x7a86	; 0x7a86 <__epilogue_restores__+0x18>

00002c62 <Save_Config_to_EEPROM>:
}

void Save_Config_to_EEPROM(void)
{
	// Write to eeProm
	cli();
    2c62:	f8 94       	cli
	eeprom_write_block_changes((const void*) &Config, (void*) EEPROM_DATA_START_POS, sizeof(CONFIG_STRUCT));	
    2c64:	4f eb       	ldi	r20, 0xBF	; 191
    2c66:	51 e0       	ldi	r21, 0x01	; 1
    2c68:	60 e0       	ldi	r22, 0x00	; 0
    2c6a:	70 e0       	ldi	r23, 0x00	; 0
    2c6c:	8e e7       	ldi	r24, 0x7E	; 126
    2c6e:	95 e0       	ldi	r25, 0x05	; 5
    2c70:	0e 94 17 16 	call	0x2c2e	; 0x2c2e <eeprom_write_block_changes>
	sei();
    2c74:	78 94       	sei
	menu_beep(1);
    2c76:	81 e0       	ldi	r24, 0x01	; 1
    2c78:	0e 94 76 26 	call	0x4cec	; 0x4cec <menu_beep>
	LED1 = !LED1;
    2c7c:	85 b1       	in	r24, 0x05	; 5
    2c7e:	83 fb       	bst	r24, 3
    2c80:	88 27       	eor	r24, r24
    2c82:	80 f9       	bld	r24, 0
    2c84:	91 e0       	ldi	r25, 0x01	; 1
    2c86:	89 27       	eor	r24, r25
    2c88:	80 fd       	sbrc	r24, 0
    2c8a:	2b 9a       	sbi	0x05, 3	; 5
    2c8c:	80 ff       	sbrs	r24, 0
    2c8e:	2b 98       	cbi	0x05, 3	; 5
    2c90:	2f e7       	ldi	r18, 0x7F	; 127
    2c92:	84 e8       	ldi	r24, 0x84	; 132
    2c94:	9e e1       	ldi	r25, 0x1E	; 30
    2c96:	21 50       	subi	r18, 0x01	; 1
    2c98:	80 40       	sbci	r24, 0x00	; 0
    2c9a:	90 40       	sbci	r25, 0x00	; 0
    2c9c:	e1 f7       	brne	.-8      	; 0x2c96 <Save_Config_to_EEPROM+0x34>
    2c9e:	00 c0       	rjmp	.+0      	; 0x2ca0 <Save_Config_to_EEPROM+0x3e>
    2ca0:	00 00       	nop
	_delay_ms(500);
	LED1 = !LED1;
    2ca2:	85 b1       	in	r24, 0x05	; 5
    2ca4:	83 fb       	bst	r24, 3
    2ca6:	88 27       	eor	r24, r24
    2ca8:	80 f9       	bld	r24, 0
    2caa:	91 e0       	ldi	r25, 0x01	; 1
    2cac:	89 27       	eor	r24, r25
    2cae:	80 fd       	sbrc	r24, 0
    2cb0:	2b 9a       	sbi	0x05, 3	; 5
    2cb2:	80 ff       	sbrs	r24, 0
    2cb4:	2b 98       	cbi	0x05, 3	; 5
    2cb6:	08 95       	ret

00002cb8 <Initial_EEPROM_Config_Load>:
}

void Initial_EEPROM_Config_Load(void)
{
	// Load last settings from EEPROM
	if(eeprom_read_byte((uint8_t*) EEPROM_DATA_START_POS )!= MAGIC_NUMBER)
    2cb8:	80 e0       	ldi	r24, 0x00	; 0
    2cba:	90 e0       	ldi	r25, 0x00	; 0
    2cbc:	0e 94 90 3d 	call	0x7b20	; 0x7b20 <__eerd_byte_m324p>
    2cc0:	8e 32       	cpi	r24, 0x2E	; 46
    2cc2:	29 f0       	breq	.+10     	; 0x2cce <Initial_EEPROM_Config_Load+0x16>
	{
		Set_EEPROM_Default_Config();
    2cc4:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <Set_EEPROM_Default_Config>
		// Write to eeProm
		Save_Config_to_EEPROM();
    2cc8:	0e 94 31 16 	call	0x2c62	; 0x2c62 <Save_Config_to_EEPROM>
    2ccc:	08 95       	ret
	} 
	else 
	{
		// Read eeProm
		eeprom_read_block(&Config, (void*) EEPROM_DATA_START_POS, sizeof(CONFIG_STRUCT)); 
    2cce:	4f eb       	ldi	r20, 0xBF	; 191
    2cd0:	51 e0       	ldi	r21, 0x01	; 1
    2cd2:	60 e0       	ldi	r22, 0x00	; 0
    2cd4:	70 e0       	ldi	r23, 0x00	; 0
    2cd6:	8e e7       	ldi	r24, 0x7E	; 126
    2cd8:	95 e0       	ldi	r25, 0x05	; 5
    2cda:	0e 94 80 3d 	call	0x7b00	; 0x7b00 <__eerd_block_m324p>
    2cde:	08 95       	ret

00002ce0 <main>:
//************************************************************
//* Main loop
//************************************************************

int main(void)
{
    2ce0:	a0 e2       	ldi	r26, 0x20	; 32
    2ce2:	b0 e0       	ldi	r27, 0x00	; 0
    2ce4:	e6 e7       	ldi	r30, 0x76	; 118
    2ce6:	f6 e1       	ldi	r31, 0x16	; 22
    2ce8:	0c 94 1b 3d 	jmp	0x7a36	; 0x7a36 <__prologue_saves__>
	uint8_t Status_seconds = 0;
	uint8_t Menu_mode = STATUS_TIMEOUT;
	int8_t	old_flight = 3;			// Old flight profile
	int8_t	old_trans_mode = 0;		// Old transition mode
	
	init();							// Do all init tasks
    2cec:	0e 94 94 20 	call	0x4128	; 0x4128 <init>
	uint16_t InterruptCounter = 0;
	uint8_t	Disarm_seconds = 0;
	uint8_t Status_seconds = 0;
	uint8_t Menu_mode = STATUS_TIMEOUT;
	int8_t	old_flight = 3;			// Old flight profile
	int8_t	old_trans_mode = 0;		// Old transition mode
    2cf0:	1e 8e       	std	Y+30, r1	; 0x1e
	// Locals
	uint16_t InterruptCounter = 0;
	uint8_t	Disarm_seconds = 0;
	uint8_t Status_seconds = 0;
	uint8_t Menu_mode = STATUS_TIMEOUT;
	int8_t	old_flight = 3;			// Old flight profile
    2cf2:	23 e0       	ldi	r18, 0x03	; 3
    2cf4:	2f 8f       	std	Y+31, r18	; 0x1f

	// Locals
	uint16_t InterruptCounter = 0;
	uint8_t	Disarm_seconds = 0;
	uint8_t Status_seconds = 0;
	uint8_t Menu_mode = STATUS_TIMEOUT;
    2cf6:	16 e0       	ldi	r17, 0x06	; 6
	uint8_t ServoRate_TCNT2 = 0;

	// Locals
	uint16_t InterruptCounter = 0;
	uint8_t	Disarm_seconds = 0;
	uint8_t Status_seconds = 0;
    2cf8:	19 82       	std	Y+1, r1	; 0x01
	uint8_t Servo_TCNT2 = 0;
	uint8_t ServoRate_TCNT2 = 0;

	// Locals
	uint16_t InterruptCounter = 0;
	uint8_t	Disarm_seconds = 0;
    2cfa:	18 a2       	std	Y+32, r1	; 0x20
	uint8_t Ticker_TCNT2 = 0;
	uint8_t Servo_TCNT2 = 0;
	uint8_t ServoRate_TCNT2 = 0;

	// Locals
	uint16_t InterruptCounter = 0;
    2cfc:	19 86       	std	Y+9, r1	; 0x09
    2cfe:	18 86       	std	Y+8, r1	; 0x08
	uint8_t Refresh_TCNT2 = 0;
	uint8_t Disarm_TCNT2 = 0;
	uint8_t Arm_TCNT2 = 0;
	uint8_t Ticker_TCNT2 = 0;
	uint8_t Servo_TCNT2 = 0;
	uint8_t ServoRate_TCNT2 = 0;
    2d00:	1d 8e       	std	Y+29, r1	; 0x1d
	uint8_t Status_TCNT2 = 0;
	uint8_t Refresh_TCNT2 = 0;
	uint8_t Disarm_TCNT2 = 0;
	uint8_t Arm_TCNT2 = 0;
	uint8_t Ticker_TCNT2 = 0;
	uint8_t Servo_TCNT2 = 0;
    2d02:	1c 8e       	std	Y+28, r1	; 0x1c
	uint8_t Transition_TCNT2 = 0;
	uint8_t Status_TCNT2 = 0;
	uint8_t Refresh_TCNT2 = 0;
	uint8_t Disarm_TCNT2 = 0;
	uint8_t Arm_TCNT2 = 0;
	uint8_t Ticker_TCNT2 = 0;
    2d04:	1b 8e       	std	Y+27, r1	; 0x1b
	uint16_t RC_Rate_TCNT1 = 0;
	uint8_t Transition_TCNT2 = 0;
	uint8_t Status_TCNT2 = 0;
	uint8_t Refresh_TCNT2 = 0;
	uint8_t Disarm_TCNT2 = 0;
	uint8_t Arm_TCNT2 = 0;
    2d06:	1f 86       	std	Y+15, r1	; 0x0f
	uint16_t LoopStartTCNT1 = 0;
	uint16_t RC_Rate_TCNT1 = 0;
	uint8_t Transition_TCNT2 = 0;
	uint8_t Status_TCNT2 = 0;
	uint8_t Refresh_TCNT2 = 0;
	uint8_t Disarm_TCNT2 = 0;
    2d08:	00 e0       	ldi	r16, 0x00	; 0
	// Timer incrementers
	uint16_t LoopStartTCNT1 = 0;
	uint16_t RC_Rate_TCNT1 = 0;
	uint8_t Transition_TCNT2 = 0;
	uint8_t Status_TCNT2 = 0;
	uint8_t Refresh_TCNT2 = 0;
    2d0a:	18 8e       	std	Y+24, r1	; 0x18

	// Timer incrementers
	uint16_t LoopStartTCNT1 = 0;
	uint16_t RC_Rate_TCNT1 = 0;
	uint8_t Transition_TCNT2 = 0;
	uint8_t Status_TCNT2 = 0;
    2d0c:	1f 8a       	std	Y+23, r1	; 0x17
	uint16_t LoopTCNT1 = 0;

	// Timer incrementers
	uint16_t LoopStartTCNT1 = 0;
	uint16_t RC_Rate_TCNT1 = 0;
	uint8_t Transition_TCNT2 = 0;
    2d0e:	1e 8a       	std	Y+22, r1	; 0x16
	uint16_t ticker_16 = 0;
	uint16_t LoopTCNT1 = 0;

	// Timer incrementers
	uint16_t LoopStartTCNT1 = 0;
	uint16_t RC_Rate_TCNT1 = 0;
    2d10:	1d 8a       	std	Y+21, r1	; 0x15
    2d12:	1c 8a       	std	Y+20, r1	; 0x14
	uint16_t Disarm_timer = 0;
	uint16_t ticker_16 = 0;
	uint16_t LoopTCNT1 = 0;

	// Timer incrementers
	uint16_t LoopStartTCNT1 = 0;
    2d14:	1b 8a       	std	Y+19, r1	; 0x13
    2d16:	1a 8a       	std	Y+18, r1	; 0x12
	uint16_t RC_Timeout = 0;
	uint16_t Servo_Rate = 0;
	uint16_t Transition_timeout = 0;
	uint16_t Disarm_timer = 0;
	uint16_t ticker_16 = 0;
	uint16_t LoopTCNT1 = 0;
    2d18:	19 8a       	std	Y+17, r1	; 0x11
    2d1a:	18 8a       	std	Y+16, r1	; 0x10
	uint16_t UpdateStatus_timer = 0;
	uint16_t Ticker_Count = 0;
	uint16_t RC_Timeout = 0;
	uint16_t Servo_Rate = 0;
	uint16_t Transition_timeout = 0;
	uint16_t Disarm_timer = 0;
    2d1c:	41 2c       	mov	r4, r1
    2d1e:	51 2c       	mov	r5, r1
	uint16_t Status_timeout = 0;
	uint16_t UpdateStatus_timer = 0;
	uint16_t Ticker_Count = 0;
	uint16_t RC_Timeout = 0;
	uint16_t Servo_Rate = 0;
	uint16_t Transition_timeout = 0;
    2d20:	21 2c       	mov	r2, r1
    2d22:	31 2c       	mov	r3, r1
	// 16-bit timers
	uint16_t Status_timeout = 0;
	uint16_t UpdateStatus_timer = 0;
	uint16_t Ticker_Count = 0;
	uint16_t RC_Timeout = 0;
	uint16_t Servo_Rate = 0;
    2d24:	61 2c       	mov	r6, r1
    2d26:	71 2c       	mov	r7, r1

	// 16-bit timers
	uint16_t Status_timeout = 0;
	uint16_t UpdateStatus_timer = 0;
	uint16_t Ticker_Count = 0;
	uint16_t RC_Timeout = 0;
    2d28:	1f 82       	std	Y+7, r1	; 0x07
    2d2a:	1e 82       	std	Y+6, r1	; 0x06
	uint32_t RC_Rate_Timer = 0;

	// 16-bit timers
	uint16_t Status_timeout = 0;
	uint16_t UpdateStatus_timer = 0;
	uint16_t Ticker_Count = 0;
    2d2c:	1e 86       	std	Y+14, r1	; 0x0e
    2d2e:	1d 86       	std	Y+13, r1	; 0x0d
	uint32_t Arm_timer = 0;
	uint32_t RC_Rate_Timer = 0;

	// 16-bit timers
	uint16_t Status_timeout = 0;
	uint16_t UpdateStatus_timer = 0;
    2d30:	1d 82       	std	Y+5, r1	; 0x05
    2d32:	1c 82       	std	Y+4, r1	; 0x04
	// 32-bit timers
	uint32_t Arm_timer = 0;
	uint32_t RC_Rate_Timer = 0;

	// 16-bit timers
	uint16_t Status_timeout = 0;
    2d34:	1b 82       	std	Y+3, r1	; 0x03
    2d36:	1a 82       	std	Y+2, r1	; 0x02
	bool SlowRC = false;
	bool TransitionUpdated = false;

	// 32-bit timers
	uint32_t Arm_timer = 0;
	uint32_t RC_Rate_Timer = 0;
    2d38:	81 2c       	mov	r8, r1
    2d3a:	91 2c       	mov	r9, r1
    2d3c:	54 01       	movw	r10, r8
	bool ServoTick = false;
	bool SlowRC = false;
	bool TransitionUpdated = false;

	// 32-bit timers
	uint32_t Arm_timer = 0;
    2d3e:	c1 2c       	mov	r12, r1
    2d40:	d1 2c       	mov	r13, r1
    2d42:	76 01       	movw	r14, r12

int main(void)
{
	bool Overdue = false;
	bool ServoTick = false;
	bool SlowRC = false;
    2d44:	1c 86       	std	Y+12, r1	; 0x0c
//************************************************************

int main(void)
{
	bool Overdue = false;
	bool ServoTick = false;
    2d46:	1b 86       	std	Y+11, r1	; 0x0b
//* Main loop
//************************************************************

int main(void)
{
	bool Overdue = false;
    2d48:	1a 86       	std	Y+10, r1	; 0x0a
		//************************************************************
		//* Check for interruption of PWM generation
		//* The "JitterFlag" flag was reset just before PWM generation
		//************************************************************

		if (JitterFlag == true)
    2d4a:	80 91 67 07 	lds	r24, 0x0767
    2d4e:	88 23       	and	r24, r24
    2d50:	31 f0       	breq	.+12     	; 0x2d5e <main+0x7e>
		{
			InterruptCounter++;
    2d52:	28 85       	ldd	r18, Y+8	; 0x08
    2d54:	39 85       	ldd	r19, Y+9	; 0x09
    2d56:	2f 5f       	subi	r18, 0xFF	; 255
    2d58:	3f 4f       	sbci	r19, 0xFF	; 255
    2d5a:	39 87       	std	Y+9, r19	; 0x09
    2d5c:	28 87       	std	Y+8, r18	; 0x08

		//************************************************************
		//* State machine for switching between screens safely
		//************************************************************

		switch(Menu_mode) 
    2d5e:	14 30       	cpi	r17, 0x04	; 4
    2d60:	51 f1       	breq	.+84     	; 0x2db6 <main+0xd6>
    2d62:	68 f4       	brcc	.+26     	; 0x2d7e <main+0x9e>
    2d64:	11 23       	and	r17, r17
    2d66:	d9 f0       	breq	.+54     	; 0x2d9e <main+0xbe>
    2d68:	13 30       	cpi	r17, 0x03	; 3
    2d6a:	09 f0       	breq	.+2      	; 0x2d6e <main+0x8e>
    2d6c:	41 c0       	rjmp	.+130    	; 0x2df0 <main+0x110>
			// Status screen first display
			case STATUS:
				// Reset the status screen period
				UpdateStatus_timer = 0;
				// Update status screen
				Display_status();
    2d6e:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <Display_status>
				// Force resync on next RC packet
				Interrupted = false;	
    2d72:	10 92 3e 07 	sts	0x073E, r1
				// Wait for timeout
				Menu_mode = WAITING_TIMEOUT_BD;
    2d76:	15 e0       	ldi	r17, 0x05	; 5
				break;

			// Status screen first display
			case STATUS:
				// Reset the status screen period
				UpdateStatus_timer = 0;
    2d78:	1d 82       	std	Y+5, r1	; 0x05
    2d7a:	1c 82       	std	Y+4, r1	; 0x04
				Display_status();
				// Force resync on next RC packet
				Interrupted = false;	
				// Wait for timeout
				Menu_mode = WAITING_TIMEOUT_BD;
				break;
    2d7c:	39 c0       	rjmp	.+114    	; 0x2df0 <main+0x110>

		//************************************************************
		//* State machine for switching between screens safely
		//************************************************************

		switch(Menu_mode) 
    2d7e:	16 30       	cpi	r17, 0x06	; 6
    2d80:	69 f1       	breq	.+90     	; 0x2ddc <main+0xfc>
    2d82:	a8 f0       	brcs	.+42     	; 0x2dae <main+0xce>
    2d84:	17 30       	cpi	r17, 0x07	; 7
    2d86:	a1 f5       	brne	.+104    	; 0x2df0 <main+0x110>
				Menu_mode = IDLE;
				break;

			// In MENU mode, 
			case MENU:
				LVA = 0;	// Make sure buzzer is off :)
    2d88:	29 98       	cbi	0x05, 1	; 5
				// Disarm the FC
				General_error |= (1 << DISARMED);
    2d8a:	80 91 0e 01 	lds	r24, 0x010E
    2d8e:	80 61       	ori	r24, 0x10	; 16
    2d90:	80 93 0e 01 	sts	0x010E, r24
				// Start the menu system
				menu_main();
    2d94:	0e 94 86 28 	call	0x510c	; 0x510c <menu_main>
				// Force resync on next RC packet
				Interrupted = false;
    2d98:	10 92 3e 07 	sts	0x073E, r1
    2d9c:	25 c0       	rjmp	.+74     	; 0x2de8 <main+0x108>
		switch(Menu_mode) 
		{
			// In IDLE mode, the text "Press for status" is displayed ONCE.
			// If a button is pressed the mode changes to STATUS
			case IDLE:
				if((PINB & 0xf0) != 0xf0)
    2d9e:	83 b1       	in	r24, 0x03	; 3
    2da0:	80 7f       	andi	r24, 0xF0	; 240
    2da2:	80 3f       	cpi	r24, 0xF0	; 240
    2da4:	29 f1       	breq	.+74     	; 0x2df0 <main+0x110>
				{
					Menu_mode = STATUS;
					// Reset the status screen timeout
					Status_seconds = 0;
					menu_beep(1);
    2da6:	81 e0       	ldi	r24, 0x01	; 1
    2da8:	0e 94 76 26 	call	0x4cec	; 0x4cec <menu_beep>
    2dac:	1d c0       	rjmp	.+58     	; 0x2de8 <main+0x108>

			// Status screen up, but button still down ;)
			// This is designed to stop the menu appearing instead of the status screen
			// as it will stay here until the button is released
			case WAITING_TIMEOUT_BD:
				if(BUTTON1 == 0)
    2dae:	1f 9b       	sbis	0x03, 7	; 3
    2db0:	1f c0       	rjmp	.+62     	; 0x2df0 <main+0x110>
				{
					Menu_mode = WAITING_TIMEOUT_BD;
				}
				else
				{
					Menu_mode = WAITING_TIMEOUT;
    2db2:	14 e0       	ldi	r17, 0x04	; 4
    2db4:	1d c0       	rjmp	.+58     	; 0x2df0 <main+0x110>
												
			// Status screen up, waiting for timeout or action
			// but button is back up
			case WAITING_TIMEOUT:
				// In status screen, change back to idle after timing out
				if (Status_seconds >= 10)
    2db6:	39 81       	ldd	r19, Y+1	; 0x01
    2db8:	3a 30       	cpi	r19, 0x0A	; 10
    2dba:	c8 f4       	brcc	.+50     	; 0x2dee <main+0x10e>
				{
					Menu_mode = STATUS_TIMEOUT;
				}

				// Jump to menu if button pressed
				else if(BUTTON1 == 0)
    2dbc:	1f 99       	sbic	0x03, 7	; 3
    2dbe:	07 c0       	rjmp	.+14     	; 0x2dce <main+0xee>
				{
					Menu_mode = MENU;
					menu_beep(1);
    2dc0:	81 e0       	ldi	r24, 0x01	; 1
    2dc2:	0e 94 76 26 	call	0x4cec	; 0x4cec <menu_beep>
					// Force resync on next RC packet
					Interrupted = false;
    2dc6:	10 92 3e 07 	sts	0x073E, r1
				}

				// Jump to menu if button pressed
				else if(BUTTON1 == 0)
				{
					Menu_mode = MENU;
    2dca:	17 e0       	ldi	r17, 0x07	; 7
    2dcc:	11 c0       	rjmp	.+34     	; 0x2df0 <main+0x110>
					// Force resync on next RC packet
					Interrupted = false;
				}

				// Update status screen while waiting to time out
				else if (UpdateStatus_timer > (SECOND_TIMER >> 2))
    2dce:	2c 81       	ldd	r18, Y+4	; 0x04
    2dd0:	3d 81       	ldd	r19, Y+5	; 0x05
    2dd2:	23 31       	cpi	r18, 0x13	; 19
    2dd4:	33 41       	sbci	r19, 0x13	; 19
    2dd6:	60 f0       	brcs	.+24     	; 0x2df0 <main+0x110>
				{
					Menu_mode = STATUS;
    2dd8:	13 e0       	ldi	r17, 0x03	; 3
    2dda:	0a c0       	rjmp	.+20     	; 0x2df0 <main+0x110>
				break;

			// In STATUS_TIMEOUT mode, the idle screen is displayed and the mode changed to IDLE
			case STATUS_TIMEOUT:
				// Pop up the Idle screen
				idle_screen();
    2ddc:	0e 94 5f 1c 	call	0x38be	; 0x38be <idle_screen>
				// Force resync on next RC packet
				Interrupted = false;
    2de0:	10 92 3e 07 	sts	0x073E, r1
				// Switch to IDLE mode
				Menu_mode = IDLE;
    2de4:	10 e0       	ldi	r17, 0x00	; 0
				break;
    2de6:	04 c0       	rjmp	.+8      	; 0x2df0 <main+0x110>
				// Start the menu system
				menu_main();
				// Force resync on next RC packet
				Interrupted = false;
				// Switch back to status screen when leaving menu
				Menu_mode = STATUS;
    2de8:	13 e0       	ldi	r17, 0x03	; 3
				// Reset timeout once back in status screen
				Status_seconds = 0;
    2dea:	19 82       	std	Y+1, r1	; 0x01
				break;
    2dec:	01 c0       	rjmp	.+2      	; 0x2df0 <main+0x110>
			// but button is back up
			case WAITING_TIMEOUT:
				// In status screen, change back to idle after timing out
				if (Status_seconds >= 10)
				{
					Menu_mode = STATUS_TIMEOUT;
    2dee:	16 e0       	ldi	r17, 0x06	; 6
		//************************************************************
		//* Status menu timing
		//************************************************************

		// Update status timeout
		Status_timeout += (uint8_t) (TCNT2 - Status_TCNT2);
    2df0:	80 91 b2 00 	lds	r24, 0x00B2
    2df4:	2f 89       	ldd	r18, Y+23	; 0x17
    2df6:	82 1b       	sub	r24, r18
    2df8:	2a 81       	ldd	r18, Y+2	; 0x02
    2dfa:	3b 81       	ldd	r19, Y+3	; 0x03
    2dfc:	28 0f       	add	r18, r24
    2dfe:	31 1d       	adc	r19, r1
    2e00:	3b 83       	std	Y+3, r19	; 0x03
    2e02:	2a 83       	std	Y+2, r18	; 0x02
		Status_TCNT2 = TCNT2;
    2e04:	30 91 b2 00 	lds	r19, 0x00B2
    2e08:	3f 8b       	std	Y+23, r19	; 0x17

		// Count elapsed seconds
		if (Status_timeout > SECOND_TIMER)
    2e0a:	2a 81       	ldd	r18, Y+2	; 0x02
    2e0c:	3b 81       	ldd	r19, Y+3	; 0x03
    2e0e:	2c 34       	cpi	r18, 0x4C	; 76
    2e10:	3c 44       	sbci	r19, 0x4C	; 76
    2e12:	68 f0       	brcs	.+26     	; 0x2e2e <main+0x14e>
		{
			Status_seconds++;
    2e14:	29 81       	ldd	r18, Y+1	; 0x01
    2e16:	2f 5f       	subi	r18, 0xFF	; 255
    2e18:	29 83       	std	Y+1, r18	; 0x01
			Status_timeout = 0;

			// Display the interrupt count each second
			InterruptCount = InterruptCounter;
    2e1a:	28 85       	ldd	r18, Y+8	; 0x08
    2e1c:	39 85       	ldd	r19, Y+9	; 0x09
    2e1e:	30 93 0b 01 	sts	0x010B, r19
    2e22:	20 93 0a 01 	sts	0x010A, r18
			InterruptCounter = 0;
    2e26:	19 86       	std	Y+9, r1	; 0x09
    2e28:	18 86       	std	Y+8, r1	; 0x08

		// Count elapsed seconds
		if (Status_timeout > SECOND_TIMER)
		{
			Status_seconds++;
			Status_timeout = 0;
    2e2a:	1b 82       	std	Y+3, r1	; 0x03
    2e2c:	1a 82       	std	Y+2, r1	; 0x02
			InterruptCount = InterruptCounter;
			InterruptCounter = 0;
		}

		// Status refresh timer
		UpdateStatus_timer += (uint8_t) (TCNT2 - Refresh_TCNT2);
    2e2e:	80 91 b2 00 	lds	r24, 0x00B2
    2e32:	38 8d       	ldd	r19, Y+24	; 0x18
    2e34:	83 1b       	sub	r24, r19
    2e36:	2c 81       	ldd	r18, Y+4	; 0x04
    2e38:	3d 81       	ldd	r19, Y+5	; 0x05
    2e3a:	28 0f       	add	r18, r24
    2e3c:	31 1d       	adc	r19, r1
    2e3e:	3d 83       	std	Y+5, r19	; 0x05
    2e40:	2c 83       	std	Y+4, r18	; 0x04
		Refresh_TCNT2 = TCNT2;
    2e42:	30 91 b2 00 	lds	r19, 0x00B2
    2e46:	38 8f       	std	Y+24, r19	; 0x18
		//* 
		//* ((Ticker_Count >> 8) &8) 	= 4.77Hz (Disarm and LVA alarms)
		//************************************************************

		// Ticker_Count increments at 19.531 kHz, in loop cycle chunks
		Ticker_Count += (uint8_t) (TCNT2 - Ticker_TCNT2);
    2e48:	80 91 b2 00 	lds	r24, 0x00B2
    2e4c:	4b 8d       	ldd	r20, Y+27	; 0x1b
    2e4e:	84 1b       	sub	r24, r20
    2e50:	2d 85       	ldd	r18, Y+13	; 0x0d
    2e52:	3e 85       	ldd	r19, Y+14	; 0x0e
    2e54:	28 0f       	add	r18, r24
    2e56:	31 1d       	adc	r19, r1
    2e58:	3e 87       	std	Y+14, r19	; 0x0e
    2e5a:	2d 87       	std	Y+13, r18	; 0x0d
		Ticker_TCNT2 = TCNT2;
    2e5c:	30 91 b2 00 	lds	r19, 0x00B2
    2e60:	3b 8f       	std	Y+27, r19	; 0x1b
    2e62:	80 91 0c 01 	lds	r24, 0x010C

		if ((Ticker_Count >> 8) &8) 
    2e66:	2d 85       	ldd	r18, Y+13	; 0x0d
    2e68:	3e 85       	ldd	r19, Y+14	; 0x0e
    2e6a:	33 ff       	sbrs	r19, 3
    2e6c:	02 c0       	rjmp	.+4      	; 0x2e72 <main+0x192>
		{
			Alarm_flags |= (1 << BUZZER_ON);	// 4.77Hz beep
    2e6e:	80 64       	ori	r24, 0x40	; 64
    2e70:	01 c0       	rjmp	.+2      	; 0x2e74 <main+0x194>
		}
		else 
		{
			Alarm_flags &= ~(1 << BUZZER_ON);
    2e72:	8f 7b       	andi	r24, 0xBF	; 191
    2e74:	80 93 0c 01 	sts	0x010C, r24
    2e78:	80 91 0e 01 	lds	r24, 0x010E
		//************************************************************
		//* Alarms
		//************************************************************

		// If RC signals overdue, signal RX error message and disarm
		if (Overdue)
    2e7c:	3a 85       	ldd	r19, Y+10	; 0x0a
    2e7e:	33 23       	and	r19, r19
    2e80:	91 f0       	breq	.+36     	; 0x2ea6 <main+0x1c6>
		{
			General_error |= (1 << NO_SIGNAL);		// Set NO_SIGNAL bit
    2e82:	98 2f       	mov	r25, r24
    2e84:	94 60       	ori	r25, 0x04	; 4
    2e86:	90 93 0e 01 	sts	0x010E, r25
			
			// If FC is set to "armable" and is currently armed, disarm the FC
			if ((Config.ArmMode == ARMABLE) && ((General_error & (1 << DISARMED)) == 0))
    2e8a:	90 91 09 06 	lds	r25, 0x0609
    2e8e:	91 30       	cpi	r25, 0x01	; 1
    2e90:	69 f4       	brne	.+26     	; 0x2eac <main+0x1cc>
    2e92:	84 fd       	sbrc	r24, 4
    2e94:	0b c0       	rjmp	.+22     	; 0x2eac <main+0x1cc>
			{
				General_error |= (1 << DISARMED);	// Set flags to disarmed
    2e96:	84 61       	ori	r24, 0x14	; 20
    2e98:	80 93 0e 01 	sts	0x010E, r24
				// Force update of status screen
				Menu_mode = STATUS_TIMEOUT;
				menu_beep(1);						// Signal that FC is now disarmed
    2e9c:	81 e0       	ldi	r24, 0x01	; 1
    2e9e:	0e 94 76 26 	call	0x4cec	; 0x4cec <menu_beep>
			// If FC is set to "armable" and is currently armed, disarm the FC
			if ((Config.ArmMode == ARMABLE) && ((General_error & (1 << DISARMED)) == 0))
			{
				General_error |= (1 << DISARMED);	// Set flags to disarmed
				// Force update of status screen
				Menu_mode = STATUS_TIMEOUT;
    2ea2:	16 e0       	ldi	r17, 0x06	; 6
    2ea4:	03 c0       	rjmp	.+6      	; 0x2eac <main+0x1cc>
				menu_beep(1);						// Signal that FC is now disarmed
			}
		}
		else
		{
			General_error &= ~(1 << NO_SIGNAL);	// Clear NO_SIGNAL bit
    2ea6:	8b 7f       	andi	r24, 0xFB	; 251
    2ea8:	80 93 0e 01 	sts	0x010E, r24
		}

		// Beep buzzer if Vbat lower than trigger
		// Vbat is measured in units of 10mV, so a PowerTrigger of 127 equates to 12.7V
		if (GetVbat() < Config.PowerTriggerActual)
    2eac:	0e 94 93 39 	call	0x7326	; 0x7326 <GetVbat>
    2eb0:	20 91 05 06 	lds	r18, 0x0605
    2eb4:	30 91 06 06 	lds	r19, 0x0606
    2eb8:	50 91 0e 01 	lds	r21, 0x010E
    2ebc:	82 17       	cp	r24, r18
    2ebe:	93 07       	cpc	r25, r19
    2ec0:	10 f4       	brcc	.+4      	; 0x2ec6 <main+0x1e6>
		{
			General_error |= (1 << LVA_ALARM);	// Set LVA_Alarm flag
    2ec2:	50 62       	ori	r21, 0x20	; 32
    2ec4:	01 c0       	rjmp	.+2      	; 0x2ec8 <main+0x1e8>
		}
		else 
		{
			General_error &= ~(1 << LVA_ALARM);	// Clear LVA_Alarm flag
    2ec6:	5f 7d       	andi	r21, 0xDF	; 223
    2ec8:	50 93 0e 01 	sts	0x010E, r21
		}

		// Turn on buzzer if in alarm state (BUZZER_ON is oscillating)
		if	(
			 (
			  (General_error & (1 << LVA_ALARM)) ||
    2ecc:	80 91 0e 01 	lds	r24, 0x010E
		{
			General_error &= ~(1 << LVA_ALARM);	// Clear LVA_Alarm flag
		}

		// Turn on buzzer if in alarm state (BUZZER_ON is oscillating)
		if	(
    2ed0:	85 fd       	sbrc	r24, 5
    2ed2:	02 c0       	rjmp	.+4      	; 0x2ed8 <main+0x1f8>
    2ed4:	86 70       	andi	r24, 0x06	; 6
			 (
			  (General_error & (1 << LVA_ALARM)) ||
			  (General_error & (1 << NO_SIGNAL)) ||
    2ed6:	31 f0       	breq	.+12     	; 0x2ee4 <main+0x204>
			  (General_error & (1 << THROTTLE_HIGH)) 
			 ) && 
			  (Alarm_flags & (1 << BUZZER_ON))
    2ed8:	80 91 0c 01 	lds	r24, 0x010C
		if	(
			 (
			  (General_error & (1 << LVA_ALARM)) ||
			  (General_error & (1 << NO_SIGNAL)) ||
			  (General_error & (1 << THROTTLE_HIGH)) 
			 ) && 
    2edc:	86 ff       	sbrs	r24, 6
    2ede:	02 c0       	rjmp	.+4      	; 0x2ee4 <main+0x204>
			  (Alarm_flags & (1 << BUZZER_ON))
			) 
		{
			LVA = 1;
    2ee0:	29 9a       	sbi	0x05, 1	; 5
    2ee2:	01 c0       	rjmp	.+2      	; 0x2ee6 <main+0x206>
		}
		else 
		{
			LVA = 0;
    2ee4:	29 98       	cbi	0x05, 1	; 5

		//************************************************************
		//* Arm/disarm handling
		//************************************************************

		if (Config.ArmMode == ARMABLE)
    2ee6:	80 91 09 06 	lds	r24, 0x0609
    2eea:	81 30       	cpi	r24, 0x01	; 1
    2eec:	09 f0       	breq	.+2      	; 0x2ef0 <main+0x210>
    2eee:	8f c0       	rjmp	.+286    	; 0x300e <main+0x32e>
		{
			// Manual arm/disarm

			// Increment timer only if Launch mode on to save cycles
			Arm_timer += (uint8_t) (TCNT2 - Arm_TCNT2); // TCNT2 runs at 19.531kHz. SECOND_TIMER amount of TCNT2 is 1 second
    2ef0:	50 91 b2 00 	lds	r21, 0x00B2
			Arm_TCNT2 = TCNT2;
    2ef4:	40 91 b2 00 	lds	r20, 0x00B2
    2ef8:	4a 8f       	std	Y+26, r20	; 0x1a

			// If sticks not at extremes, reset manual arm/disarm timer
			// Sticks down and centered = armed. Down and outside = disarmed
			if (
				((-ARM_TIMER_RESET_1 < RCinputs[AILERON]) && (RCinputs[AILERON] < ARM_TIMER_RESET_1)) ||
    2efa:	80 91 a1 07 	lds	r24, 0x07A1
    2efe:	90 91 a2 07 	lds	r25, 0x07A2
    2f02:	9c 01       	movw	r18, r24
    2f04:	21 54       	subi	r18, 0x41	; 65
    2f06:	3c 4f       	sbci	r19, 0xFC	; 252
			Arm_timer += (uint8_t) (TCNT2 - Arm_TCNT2); // TCNT2 runs at 19.531kHz. SECOND_TIMER amount of TCNT2 is 1 second
			Arm_TCNT2 = TCNT2;

			// If sticks not at extremes, reset manual arm/disarm timer
			// Sticks down and centered = armed. Down and outside = disarmed
			if (
    2f08:	2f 37       	cpi	r18, 0x7F	; 127
    2f0a:	37 40       	sbci	r19, 0x07	; 7
    2f0c:	08 f4       	brcc	.+2      	; 0x2f10 <main+0x230>
    2f0e:	45 c0       	rjmp	.+138    	; 0x2f9a <main+0x2ba>
				((-ARM_TIMER_RESET_1 < RCinputs[AILERON]) && (RCinputs[AILERON] < ARM_TIMER_RESET_1)) ||
				((-ARM_TIMER_RESET_1 < RCinputs[ELEVATOR]) && (RCinputs[ELEVATOR] < ARM_TIMER_RESET_1)) ||
    2f10:	20 91 a3 07 	lds	r18, 0x07A3
    2f14:	30 91 a4 07 	lds	r19, 0x07A4
    2f18:	21 54       	subi	r18, 0x41	; 65
    2f1a:	3c 4f       	sbci	r19, 0xFC	; 252
			Arm_TCNT2 = TCNT2;

			// If sticks not at extremes, reset manual arm/disarm timer
			// Sticks down and centered = armed. Down and outside = disarmed
			if (
				((-ARM_TIMER_RESET_1 < RCinputs[AILERON]) && (RCinputs[AILERON] < ARM_TIMER_RESET_1)) ||
    2f1c:	2f 37       	cpi	r18, 0x7F	; 127
    2f1e:	37 40       	sbci	r19, 0x07	; 7
    2f20:	e0 f1       	brcs	.+120    	; 0x2f9a <main+0x2ba>
				((-ARM_TIMER_RESET_1 < RCinputs[ELEVATOR]) && (RCinputs[ELEVATOR] < ARM_TIMER_RESET_1)) ||
				((-ARM_TIMER_RESET_1 < RCinputs[RUDDER]) && (RCinputs[RUDDER] < ARM_TIMER_RESET_1)) ||
    2f22:	20 91 a5 07 	lds	r18, 0x07A5
    2f26:	30 91 a6 07 	lds	r19, 0x07A6
    2f2a:	21 54       	subi	r18, 0x41	; 65
    2f2c:	3c 4f       	sbci	r19, 0xFC	; 252

			// If sticks not at extremes, reset manual arm/disarm timer
			// Sticks down and centered = armed. Down and outside = disarmed
			if (
				((-ARM_TIMER_RESET_1 < RCinputs[AILERON]) && (RCinputs[AILERON] < ARM_TIMER_RESET_1)) ||
				((-ARM_TIMER_RESET_1 < RCinputs[ELEVATOR]) && (RCinputs[ELEVATOR] < ARM_TIMER_RESET_1)) ||
    2f2e:	2f 37       	cpi	r18, 0x7F	; 127
    2f30:	37 40       	sbci	r19, 0x07	; 7
    2f32:	98 f1       	brcs	.+102    	; 0x2f9a <main+0x2ba>
				((-ARM_TIMER_RESET_1 < RCinputs[RUDDER]) && (RCinputs[RUDDER] < ARM_TIMER_RESET_1)) ||
    2f34:	20 91 9d 07 	lds	r18, 0x079D
    2f38:	30 91 9e 07 	lds	r19, 0x079E
    2f3c:	23 33       	cpi	r18, 0x33	; 51
    2f3e:	31 05       	cpc	r19, r1
    2f40:	64 f5       	brge	.+88     	; 0x2f9a <main+0x2ba>
		if (Config.ArmMode == ARMABLE)
		{
			// Manual arm/disarm

			// Increment timer only if Launch mode on to save cycles
			Arm_timer += (uint8_t) (TCNT2 - Arm_TCNT2); // TCNT2 runs at 19.531kHz. SECOND_TIMER amount of TCNT2 is 1 second
    2f42:	2f 85       	ldd	r18, Y+15	; 0x0f
    2f44:	52 1b       	sub	r21, r18
    2f46:	c5 0e       	add	r12, r21
    2f48:	d1 1c       	adc	r13, r1
    2f4a:	e1 1c       	adc	r14, r1
    2f4c:	f1 1c       	adc	r15, r1
				Arm_timer = 0;
			}

			// If arm timer times out, the sticks must have been at extremes for ARM_TIMER seconds
			// If aileron is at min, arm the FC
			if ((Arm_timer > ARM_TIMER) && (RCinputs[AILERON] < -ARM_TIMER_RESET_1))
    2f4e:	3c e4       	ldi	r19, 0x4C	; 76
    2f50:	c3 16       	cp	r12, r19
    2f52:	d3 06       	cpc	r13, r19
    2f54:	e1 04       	cpc	r14, r1
    2f56:	f1 04       	cpc	r15, r1
    2f58:	18 f1       	brcs	.+70     	; 0x2fa0 <main+0x2c0>
    2f5a:	80 34       	cpi	r24, 0x40	; 64
    2f5c:	4c ef       	ldi	r20, 0xFC	; 252
    2f5e:	94 07       	cpc	r25, r20
    2f60:	4c f4       	brge	.+18     	; 0x2f74 <main+0x294>
			{
				Arm_timer = 0;
				General_error &= ~(1 << DISARMED);		// Set flags to armed (negate disarmed)
    2f62:	80 91 0e 01 	lds	r24, 0x010E
    2f66:	8f 7e       	andi	r24, 0xEF	; 239
    2f68:	80 93 0e 01 	sts	0x010E, r24
				CalibrateGyrosSlow();					// Calibrate gyros
    2f6c:	0e 94 66 1d 	call	0x3acc	; 0x3acc <CalibrateGyrosSlow>
				menu_beep(20);							// Signal that FC is ready
    2f70:	84 e1       	ldi	r24, 0x14	; 20
    2f72:	10 c0       	rjmp	.+32     	; 0x2f94 <main+0x2b4>

				// Force update of status screen
				Menu_mode = STATUS_TIMEOUT;
			}
			// Else, disarm the FC after DISARM_TIMER seconds if aileron at max
			else if ((Arm_timer > DISARM_TIMER) && (RCinputs[AILERON] > ARM_TIMER_RESET_1))
    2f74:	e2 ee       	ldi	r30, 0xE2	; 226
    2f76:	ce 16       	cp	r12, r30
    2f78:	e4 ee       	ldi	r30, 0xE4	; 228
    2f7a:	de 06       	cpc	r13, r30
    2f7c:	e1 04       	cpc	r14, r1
    2f7e:	f1 04       	cpc	r15, r1
    2f80:	78 f0       	brcs	.+30     	; 0x2fa0 <main+0x2c0>
    2f82:	81 3c       	cpi	r24, 0xC1	; 193
    2f84:	93 40       	sbci	r25, 0x03	; 3
    2f86:	64 f0       	brlt	.+24     	; 0x2fa0 <main+0x2c0>
			{
				Arm_timer = 0;
				General_error |= (1 << DISARMED);		// Set flags to disarmed
    2f88:	80 91 0e 01 	lds	r24, 0x010E
    2f8c:	80 61       	ori	r24, 0x10	; 16
    2f8e:	80 93 0e 01 	sts	0x010E, r24
				menu_beep(1);							// Signal that FC is now disarmed
    2f92:	81 e0       	ldi	r24, 0x01	; 1
    2f94:	0e 94 76 26 	call	0x4cec	; 0x4cec <menu_beep>

				// Force update of status screen
				Menu_mode = STATUS_TIMEOUT;
    2f98:	16 e0       	ldi	r17, 0x06	; 6
    2f9a:	c1 2c       	mov	r12, r1
    2f9c:	d1 2c       	mov	r13, r1
    2f9e:	76 01       	movw	r14, r12
			}

			// Automatic disarm

			// Auto-disarm timer
			Disarm_timer += (uint8_t) (TCNT2 - Disarm_TCNT2);
    2fa0:	80 91 b2 00 	lds	r24, 0x00B2
			Disarm_TCNT2 = TCNT2;
    2fa4:	20 91 b2 00 	lds	r18, 0x00B2
    2fa8:	29 8f       	std	Y+25, r18	; 0x19

			// Reset auto-disarm count if any RX activity or set to zero, or when curently armed
			if ((Flight_flags & (1 << RxActivity)) || (Config.Disarm_timer == 0) || (General_error & (1 << DISARMED)))
    2faa:	90 91 0d 01 	lds	r25, 0x010D
    2fae:	90 fd       	sbrc	r25, 0
    2fb0:	13 c0       	rjmp	.+38     	; 0x2fd8 <main+0x2f8>
    2fb2:	90 91 0a 06 	lds	r25, 0x060A
    2fb6:	99 23       	and	r25, r25
    2fb8:	79 f0       	breq	.+30     	; 0x2fd8 <main+0x2f8>
    2fba:	90 91 0e 01 	lds	r25, 0x010E
    2fbe:	94 fd       	sbrc	r25, 4
    2fc0:	0b c0       	rjmp	.+22     	; 0x2fd8 <main+0x2f8>
			}

			// Automatic disarm

			// Auto-disarm timer
			Disarm_timer += (uint8_t) (TCNT2 - Disarm_TCNT2);
    2fc2:	80 1b       	sub	r24, r16
    2fc4:	48 0e       	add	r4, r24
    2fc6:	51 1c       	adc	r5, r1
				Disarm_timer = 0;
				Disarm_seconds = 0;
			}
		
			// Increment disarm timer (seconds) if armed
			if (Disarm_timer > SECOND_TIMER)
    2fc8:	3c e4       	ldi	r19, 0x4C	; 76
    2fca:	43 16       	cp	r4, r19
    2fcc:	53 06       	cpc	r5, r19
    2fce:	38 f0       	brcs	.+14     	; 0x2fde <main+0x2fe>
			{
				Disarm_seconds++;
    2fd0:	48 a1       	ldd	r20, Y+32	; 0x20
    2fd2:	4f 5f       	subi	r20, 0xFF	; 255
    2fd4:	48 a3       	std	Y+32, r20	; 0x20
    2fd6:	01 c0       	rjmp	.+2      	; 0x2fda <main+0x2fa>
    2fd8:	18 a2       	std	Y+32, r1	; 0x20
    2fda:	41 2c       	mov	r4, r1
    2fdc:	51 2c       	mov	r5, r1
				Disarm_timer = 0;
			}

			// Auto-disarm model if timeout enabled and due
			if ((Disarm_seconds >= Config.Disarm_timer) && (Config.Disarm_timer >= 30))	
    2fde:	50 91 0a 06 	lds	r21, 0x060A
    2fe2:	48 a1       	ldd	r20, Y+32	; 0x20
    2fe4:	24 2f       	mov	r18, r20
    2fe6:	30 e0       	ldi	r19, 0x00	; 0
    2fe8:	85 2f       	mov	r24, r21
    2fea:	99 27       	eor	r25, r25
    2fec:	87 fd       	sbrc	r24, 7
    2fee:	90 95       	com	r25
    2ff0:	28 17       	cp	r18, r24
    2ff2:	39 07       	cpc	r19, r25
    2ff4:	a4 f0       	brlt	.+40     	; 0x301e <main+0x33e>
    2ff6:	5e 31       	cpi	r21, 0x1E	; 30
    2ff8:	94 f0       	brlt	.+36     	; 0x301e <main+0x33e>
			{
				// Disarm the FC
				General_error |= (1 << DISARMED);		// Set flags to disarmed
    2ffa:	80 91 0e 01 	lds	r24, 0x010E
    2ffe:	80 61       	ori	r24, 0x10	; 16
    3000:	80 93 0e 01 	sts	0x010E, r24

				// Force update of status screen
				Menu_mode = STATUS_TIMEOUT;
				menu_beep(1);							// Signal that FC is now disarmed
    3004:	81 e0       	ldi	r24, 0x01	; 1
    3006:	0e 94 76 26 	call	0x4cec	; 0x4cec <menu_beep>
			{
				// Disarm the FC
				General_error |= (1 << DISARMED);		// Set flags to disarmed

				// Force update of status screen
				Menu_mode = STATUS_TIMEOUT;
    300a:	16 e0       	ldi	r17, 0x06	; 6
    300c:	08 c0       	rjmp	.+16     	; 0x301e <main+0x33e>
			}
		}
		// Arm when ArmMode is OFF
		else 
		{
			General_error &= ~(1 << DISARMED);			// Set flags to armed
    300e:	80 91 0e 01 	lds	r24, 0x010E
    3012:	8f 7e       	andi	r24, 0xEF	; 239
    3014:	80 93 0e 01 	sts	0x010E, r24
    3018:	2f 85       	ldd	r18, Y+15	; 0x0f
    301a:	2a 8f       	std	Y+26, r18	; 0x1a
    301c:	09 8f       	std	Y+25, r16	; 0x19
		//************************************************************
		//* Get RC data
		//************************************************************

		// Update zeroed RC channel data
		RxGetChannels();
    301e:	0e 94 ed 37 	call	0x6fda	; 0x6fda <RxGetChannels>

		// Check for throttle reset
		if (MonopolarThrottle < THROTTLEIDLE)
    3022:	80 91 9d 07 	lds	r24, 0x079D
    3026:	90 91 9e 07 	lds	r25, 0x079E
    302a:	c2 97       	sbiw	r24, 0x32	; 50
    302c:	5c f4       	brge	.+22     	; 0x3044 <main+0x364>
		{
			// Clear throttle high error
			General_error &= ~(1 << THROTTLE_HIGH);	
    302e:	80 91 0e 01 	lds	r24, 0x010E
    3032:	8d 7f       	andi	r24, 0xFD	; 253
    3034:	80 93 0e 01 	sts	0x010E, r24

			// Reset I-terms at throttle cut. Using memset saves code space
			memset(&IntegralGyro[P1][ROLL], 0, sizeof(int32_t) * 6); 
    3038:	ed e6       	ldi	r30, 0x6D	; 109
    303a:	f7 e0       	ldi	r31, 0x07	; 7
    303c:	28 e1       	ldi	r18, 0x18	; 24
    303e:	11 92       	st	Z+, r1
    3040:	2a 95       	dec	r18
    3042:	e9 f7       	brne	.-6      	; 0x303e <main+0x35e>
		//* by the Config.TransitionSpeed setting.
		//* The transition will hold at P1n position if directed to
		//************************************************************

		// P2 transition point hard-coded to 50% above center
		if 	(RCinputs[Config.FlightChan] > 500)
    3044:	e0 91 aa 05 	lds	r30, 0x05AA
    3048:	ee 0f       	add	r30, r30
    304a:	ff 0b       	sbc	r31, r31
    304c:	e1 56       	subi	r30, 0x61	; 97
    304e:	f8 4f       	sbci	r31, 0xF8	; 248
    3050:	80 81       	ld	r24, Z
    3052:	91 81       	ldd	r25, Z+1	; 0x01
    3054:	85 3f       	cpi	r24, 0xF5	; 245
    3056:	31 e0       	ldi	r19, 0x01	; 1
    3058:	93 07       	cpc	r25, r19
    305a:	24 f0       	brlt	.+8      	; 0x3064 <main+0x384>
		{
			Config.FlightSel = 2;			// Flight mode 2 (P2)
    305c:	42 e0       	ldi	r20, 0x02	; 2
    305e:	40 93 33 07 	sts	0x0733, r20
    3062:	09 c0       	rjmp	.+18     	; 0x3076 <main+0x396>
		}
		// P1.n transition point hard-coded to 50% below center
		else if (RCinputs[Config.FlightChan] > -500)
    3064:	8d 30       	cpi	r24, 0x0D	; 13
    3066:	9e 4f       	sbci	r25, 0xFE	; 254
    3068:	24 f0       	brlt	.+8      	; 0x3072 <main+0x392>
		{
			Config.FlightSel = 1;			// Flight mode 1 (P1.n)
    306a:	81 e0       	ldi	r24, 0x01	; 1
    306c:	80 93 33 07 	sts	0x0733, r24
    3070:	02 c0       	rjmp	.+4      	; 0x3076 <main+0x396>
		}
		// Otherwise the default is P1
		else
		{
			Config.FlightSel = 0;			// Flight mode 0 (P1)
    3072:	10 92 33 07 	sts	0x0733, r1
		//* For the first startup, set up the right state for the current setup
		//* Check for initial startup - the only time that old_flight should be "3".
		//* Also, re-initialise if the transition setting is changed
		//************************************************************

		if ((old_flight == 3) || (old_trans_mode != Config.TransitionSpeed))
    3076:	2f 8d       	ldd	r18, Y+31	; 0x1f
    3078:	23 30       	cpi	r18, 0x03	; 3
    307a:	29 f0       	breq	.+10     	; 0x3086 <main+0x3a6>
    307c:	80 91 af 05 	lds	r24, 0x05AF
    3080:	3e 8d       	ldd	r19, Y+30	; 0x1e
    3082:	38 17       	cp	r19, r24
    3084:	49 f1       	breq	.+82     	; 0x30d8 <main+0x3f8>
		{
			switch(Config.FlightSel)
    3086:	40 91 33 07 	lds	r20, 0x0733
    308a:	4f 8f       	std	Y+31, r20	; 0x1f
    308c:	41 30       	cpi	r20, 0x01	; 1
    308e:	59 f0       	breq	.+22     	; 0x30a6 <main+0x3c6>
    3090:	42 30       	cpi	r20, 0x02	; 2
    3092:	b1 f0       	breq	.+44     	; 0x30c0 <main+0x3e0>
    3094:	41 11       	cpse	r20, r1
    3096:	1d c0       	rjmp	.+58     	; 0x30d2 <main+0x3f2>
			{
				case 0:
					Transition_state = TRANS_P1;
    3098:	10 92 0f 01 	sts	0x010F, r1
					transition_counter = 0;
    309c:	10 92 11 01 	sts	0x0111, r1
    30a0:	10 92 10 01 	sts	0x0110, r1
					break;
    30a4:	16 c0       	rjmp	.+44     	; 0x30d2 <main+0x3f2>
				case 1:
					Transition_state = TRANS_P1n;
    30a6:	84 e0       	ldi	r24, 0x04	; 4
    30a8:	80 93 0f 01 	sts	0x010F, r24
					transition_counter = Config.Transition_P1n; // Set transition point to the user-selected point
    30ac:	80 91 b0 05 	lds	r24, 0x05B0
    30b0:	99 27       	eor	r25, r25
    30b2:	87 fd       	sbrc	r24, 7
    30b4:	90 95       	com	r25
    30b6:	90 93 11 01 	sts	0x0111, r25
    30ba:	80 93 10 01 	sts	0x0110, r24
					break;
    30be:	09 c0       	rjmp	.+18     	; 0x30d2 <main+0x3f2>
				case 2:
					Transition_state = TRANS_P2;
    30c0:	99 e0       	ldi	r25, 0x09	; 9
    30c2:	90 93 0f 01 	sts	0x010F, r25
					transition_counter = 100;
    30c6:	e4 e6       	ldi	r30, 0x64	; 100
    30c8:	f0 e0       	ldi	r31, 0x00	; 0
    30ca:	f0 93 11 01 	sts	0x0111, r31
    30ce:	e0 93 10 01 	sts	0x0110, r30
					break;
				default:
					break;
			}		 
			old_flight = Config.FlightSel;
			old_trans_mode = Config.TransitionSpeed;
    30d2:	20 91 af 05 	lds	r18, 0x05AF
    30d6:	2e 8f       	std	Y+30, r18	; 0x1e
		//************************************************************
		//* Transition state handling
		//************************************************************

		// Update timed transition when changing flight modes
		if (Config.FlightSel != old_flight)
    30d8:	00 91 33 07 	lds	r16, 0x0733
    30dc:	21 e0       	ldi	r18, 0x01	; 1
    30de:	3f 8d       	ldd	r19, Y+31	; 0x1f
    30e0:	03 13       	cpse	r16, r19
    30e2:	01 c0       	rjmp	.+2      	; 0x30e6 <main+0x406>
    30e4:	20 e0       	ldi	r18, 0x00	; 0
			TransitionUpdated = true;
		}

		// Always in the TRANSITIONING state when Config.TransitionSpeed is 0
		// This prevents state chanegs when controlled by a channel
		if (Config.TransitionSpeed == 0)
    30e6:	30 91 af 05 	lds	r19, 0x05AF
    30ea:	31 11       	cpse	r19, r1
    30ec:	03 c0       	rjmp	.+6      	; 0x30f4 <main+0x414>
		{
			Transition_state = TRANSITIONING;
    30ee:	45 e0       	ldi	r20, 0x05	; 5
    30f0:	40 93 0f 01 	sts	0x010F, r20
		}

		// Update transition timer
		Transition_timeout += (uint8_t) (TCNT2 - Transition_TCNT2);
    30f4:	80 91 b2 00 	lds	r24, 0x00B2
    30f8:	4e 89       	ldd	r20, Y+22	; 0x16
    30fa:	84 1b       	sub	r24, r20
    30fc:	28 0e       	add	r2, r24
    30fe:	31 1c       	adc	r3, r1
		Transition_TCNT2 = TCNT2;
    3100:	40 91 b2 00 	lds	r20, 0x00B2
    3104:	4e 8b       	std	Y+22, r20	; 0x16

		// Update transition state change when control value or flight mode changes
		if (TransitionUpdated)
    3106:	22 23       	and	r18, r18
    3108:	99 f0       	breq	.+38     	; 0x3130 <main+0x450>
		{
			// Update transition state from matrix
			Transition_state = (uint8_t)pgm_read_byte(&Trans_Matrix[Config.FlightSel][old_flight]);
    310a:	80 2f       	mov	r24, r16
    310c:	99 27       	eor	r25, r25
    310e:	87 fd       	sbrc	r24, 7
    3110:	90 95       	com	r25
    3112:	fc 01       	movw	r30, r24
    3114:	ee 0f       	add	r30, r30
    3116:	ff 1f       	adc	r31, r31
    3118:	e8 0f       	add	r30, r24
    311a:	f9 1f       	adc	r31, r25
    311c:	4f 8d       	ldd	r20, Y+31	; 0x1f
    311e:	e4 0f       	add	r30, r20
    3120:	f1 1d       	adc	r31, r1
    3122:	47 fd       	sbrc	r20, 7
    3124:	fa 95       	dec	r31
    3126:	ec 5f       	subi	r30, 0xFC	; 252
    3128:	fe 4f       	sbci	r31, 0xFE	; 254
    312a:	e4 91       	lpm	r30, Z
    312c:	e0 93 0f 01 	sts	0x010F, r30
		}

		// Update state, values and transition_counter every Config.TransitionSpeed if not zero. 195 = 10ms
		if (((Config.TransitionSpeed != 0) && (Transition_timeout > (TRANSITION_TIMER * Config.TransitionSpeed))) ||
    3130:	33 23       	and	r19, r19
    3132:	39 f0       	breq	.+14     	; 0x3142 <main+0x462>
    3134:	43 ec       	ldi	r20, 0xC3	; 195
    3136:	34 03       	mulsu	r19, r20
    3138:	c0 01       	movw	r24, r0
    313a:	11 24       	eor	r1, r1
    313c:	82 15       	cp	r24, r2
    313e:	93 05       	cpc	r25, r3
    3140:	18 f0       	brcs	.+6      	; 0x3148 <main+0x468>
    3142:	22 23       	and	r18, r18
    3144:	09 f4       	brne	.+2      	; 0x3148 <main+0x468>
    3146:	a9 c0       	rjmp	.+338    	; 0x329a <main+0x5ba>
		{
			Transition_timeout = 0;
			TransitionUpdated = false;

			// Fixed, end-point states
			if (Transition_state == TRANS_P1)
    3148:	80 91 0f 01 	lds	r24, 0x010F
    314c:	81 11       	cpse	r24, r1
    314e:	05 c0       	rjmp	.+10     	; 0x315a <main+0x47a>
			{
				transition_counter = 0;
    3150:	10 92 11 01 	sts	0x0111, r1
    3154:	10 92 10 01 	sts	0x0110, r1
    3158:	22 c0       	rjmp	.+68     	; 0x319e <main+0x4be>
			}
			else if (Transition_state == TRANS_P1n)
    315a:	84 30       	cpi	r24, 0x04	; 4
    315c:	31 f4       	brne	.+12     	; 0x316a <main+0x48a>
			{
				transition_counter = Config.Transition_P1n;
    315e:	80 91 b0 05 	lds	r24, 0x05B0
    3162:	99 27       	eor	r25, r25
    3164:	87 fd       	sbrc	r24, 7
    3166:	90 95       	com	r25
    3168:	04 c0       	rjmp	.+8      	; 0x3172 <main+0x492>
			}
			else if (Transition_state == TRANS_P2)
    316a:	89 30       	cpi	r24, 0x09	; 9
    316c:	39 f4       	brne	.+14     	; 0x317c <main+0x49c>
			{
				transition_counter = 100;
    316e:	84 e6       	ldi	r24, 0x64	; 100
    3170:	90 e0       	ldi	r25, 0x00	; 0
    3172:	90 93 11 01 	sts	0x0111, r25
    3176:	80 93 10 01 	sts	0x0110, r24
    317a:	11 c0       	rjmp	.+34     	; 0x319e <main+0x4be>
			}		

			// Over-ride users requesting silly states
			// If transition_counter is above P1.n but request is P1 to P1.n or 
			// if transition_counter is below P1.n but request is P2 to P1.n...
			if ((Transition_state == TRANS_P1_to_P1n_start) && (transition_counter > Config.Transition_P1n))
    317c:	81 30       	cpi	r24, 0x01	; 1
    317e:	79 f4       	brne	.+30     	; 0x319e <main+0x4be>
    3180:	80 91 b0 05 	lds	r24, 0x05B0
    3184:	99 27       	eor	r25, r25
    3186:	87 fd       	sbrc	r24, 7
    3188:	90 95       	com	r25
    318a:	20 91 10 01 	lds	r18, 0x0110
    318e:	30 91 11 01 	lds	r19, 0x0111
    3192:	82 17       	cp	r24, r18
    3194:	93 07       	cpc	r25, r19
    3196:	1c f4       	brge	.+6      	; 0x319e <main+0x4be>
			{
				// Reset state to a more appropriate one
				Transition_state = TRANS_P2_to_P1n_start;
    3198:	98 e0       	ldi	r25, 0x08	; 8
    319a:	90 93 0f 01 	sts	0x010F, r25
			}

			if ((Transition_state == TRANS_P2_to_P1n_start) && (transition_counter < Config.Transition_P1n))
    319e:	80 91 0f 01 	lds	r24, 0x010F
    31a2:	88 30       	cpi	r24, 0x08	; 8
    31a4:	79 f4       	brne	.+30     	; 0x31c4 <main+0x4e4>
    31a6:	80 91 b0 05 	lds	r24, 0x05B0
    31aa:	99 27       	eor	r25, r25
    31ac:	87 fd       	sbrc	r24, 7
    31ae:	90 95       	com	r25
    31b0:	20 91 10 01 	lds	r18, 0x0110
    31b4:	30 91 11 01 	lds	r19, 0x0111
    31b8:	28 17       	cp	r18, r24
    31ba:	39 07       	cpc	r19, r25
    31bc:	1c f4       	brge	.+6      	; 0x31c4 <main+0x4e4>
			{
				// Reset state to a more appropriate one
				Transition_state = TRANS_P1_to_P1n_start;
    31be:	81 e0       	ldi	r24, 0x01	; 1
    31c0:	80 93 0f 01 	sts	0x010F, r24
			}

			// Handle timed transition towards P1
			if ((Transition_state == TRANS_P1n_to_P1_start) || (Transition_state == TRANS_P2_to_P1_start))
    31c4:	80 91 0f 01 	lds	r24, 0x010F
    31c8:	8b 7f       	andi	r24, 0xFB	; 251
    31ca:	82 30       	cpi	r24, 0x02	; 2
    31cc:	91 f4       	brne	.+36     	; 0x31f2 <main+0x512>
			{
				transition_counter--;
    31ce:	80 91 10 01 	lds	r24, 0x0110
    31d2:	90 91 11 01 	lds	r25, 0x0111
    31d6:	01 97       	sbiw	r24, 0x01	; 1
    31d8:	90 93 11 01 	sts	0x0111, r25
    31dc:	80 93 10 01 	sts	0x0110, r24
				if (transition_counter <= 0)
    31e0:	18 16       	cp	r1, r24
    31e2:	19 06       	cpc	r1, r25
    31e4:	34 f0       	brlt	.+12     	; 0x31f2 <main+0x512>
				{
					transition_counter = 0;
    31e6:	10 92 11 01 	sts	0x0111, r1
    31ea:	10 92 10 01 	sts	0x0110, r1
					Transition_state = TRANS_P1;
    31ee:	10 92 0f 01 	sts	0x010F, r1
				}
			}

			// Handle timed transition between P1.n and P1
			if (Transition_state == TRANS_P1_to_P1n_start)
    31f2:	80 91 0f 01 	lds	r24, 0x010F
    31f6:	81 30       	cpi	r24, 0x01	; 1
    31f8:	c1 f4       	brne	.+48     	; 0x322a <main+0x54a>
			{
				transition_counter++;
    31fa:	80 91 10 01 	lds	r24, 0x0110
    31fe:	90 91 11 01 	lds	r25, 0x0111
    3202:	01 96       	adiw	r24, 0x01	; 1
    3204:	90 93 11 01 	sts	0x0111, r25
    3208:	80 93 10 01 	sts	0x0110, r24
				if (transition_counter >= Config.Transition_P1n)
    320c:	20 91 b0 05 	lds	r18, 0x05B0
    3210:	33 27       	eor	r19, r19
    3212:	27 fd       	sbrc	r18, 7
    3214:	30 95       	com	r19
    3216:	82 17       	cp	r24, r18
    3218:	93 07       	cpc	r25, r19
    321a:	3c f0       	brlt	.+14     	; 0x322a <main+0x54a>
				{
					transition_counter = Config.Transition_P1n;
    321c:	30 93 11 01 	sts	0x0111, r19
    3220:	20 93 10 01 	sts	0x0110, r18
					Transition_state = TRANS_P1n;
    3224:	e4 e0       	ldi	r30, 0x04	; 4
    3226:	e0 93 0f 01 	sts	0x010F, r30
				}
			}			
				
			// Handle timed transition between P1.n and P2
			if (Transition_state == TRANS_P2_to_P1n_start)
    322a:	80 91 0f 01 	lds	r24, 0x010F
    322e:	88 30       	cpi	r24, 0x08	; 8
    3230:	c1 f4       	brne	.+48     	; 0x3262 <main+0x582>
			{
				transition_counter--;
    3232:	80 91 10 01 	lds	r24, 0x0110
    3236:	90 91 11 01 	lds	r25, 0x0111
    323a:	01 97       	sbiw	r24, 0x01	; 1
    323c:	90 93 11 01 	sts	0x0111, r25
    3240:	80 93 10 01 	sts	0x0110, r24
				if (transition_counter <= Config.Transition_P1n)
    3244:	20 91 b0 05 	lds	r18, 0x05B0
    3248:	33 27       	eor	r19, r19
    324a:	27 fd       	sbrc	r18, 7
    324c:	30 95       	com	r19
    324e:	28 17       	cp	r18, r24
    3250:	39 07       	cpc	r19, r25
    3252:	3c f0       	brlt	.+14     	; 0x3262 <main+0x582>
				{
					transition_counter = Config.Transition_P1n;
    3254:	30 93 11 01 	sts	0x0111, r19
    3258:	20 93 10 01 	sts	0x0110, r18
					Transition_state = TRANS_P1n;
    325c:	f4 e0       	ldi	r31, 0x04	; 4
    325e:	f0 93 0f 01 	sts	0x010F, r31
				}
			}

			// Handle timed transition towards P2
			if ((Transition_state == TRANS_P1n_to_P2_start) || (Transition_state == TRANS_P1_to_P2_start))
    3262:	80 91 0f 01 	lds	r24, 0x010F
    3266:	8b 7f       	andi	r24, 0xFB	; 251
    3268:	83 30       	cpi	r24, 0x03	; 3
    326a:	a9 f4       	brne	.+42     	; 0x3296 <main+0x5b6>
			{
				transition_counter++;
    326c:	80 91 10 01 	lds	r24, 0x0110
    3270:	90 91 11 01 	lds	r25, 0x0111
    3274:	01 96       	adiw	r24, 0x01	; 1
    3276:	90 93 11 01 	sts	0x0111, r25
    327a:	80 93 10 01 	sts	0x0110, r24
				if (transition_counter >= 100)
    327e:	84 36       	cpi	r24, 0x64	; 100
    3280:	91 05       	cpc	r25, r1
    3282:	4c f0       	brlt	.+18     	; 0x3296 <main+0x5b6>
				{
					transition_counter = 100;
    3284:	24 e6       	ldi	r18, 0x64	; 100
    3286:	30 e0       	ldi	r19, 0x00	; 0
    3288:	30 93 11 01 	sts	0x0111, r19
    328c:	20 93 10 01 	sts	0x0110, r18
					Transition_state = TRANS_P2;
    3290:	39 e0       	ldi	r19, 0x09	; 9
    3292:	30 93 0f 01 	sts	0x010F, r19
		// Update state, values and transition_counter every Config.TransitionSpeed if not zero. 195 = 10ms
		if (((Config.TransitionSpeed != 0) && (Transition_timeout > (TRANSITION_TIMER * Config.TransitionSpeed))) ||
			// Update immediately
			TransitionUpdated)
		{
			Transition_timeout = 0;
    3296:	21 2c       	mov	r2, r1
    3298:	31 2c       	mov	r3, r1
		//************************************************************
		//* Remaining loop tasks
		//************************************************************

		// Read sensors
		ReadGyros();
    329a:	0e 94 d3 1c 	call	0x39a6	; 0x39a6 <ReadGyros>
		ReadAcc();	
    329e:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <ReadAcc>

		// ticker_16 is incremented at 2.5MHz (400ns) - max 26.2ms
		ticker_16 = (uint16_t)((uint16_t)TCNT1 - LoopTCNT1);	
    32a2:	80 91 84 00 	lds	r24, 0x0084
    32a6:	90 91 85 00 	lds	r25, 0x0085
    32aa:	28 89       	ldd	r18, Y+16	; 0x10
    32ac:	39 89       	ldd	r19, Y+17	; 0x11
    32ae:	82 1b       	sub	r24, r18
    32b0:	93 0b       	sbc	r25, r19
		LoopTCNT1 = TCNT1;	
    32b2:	20 91 84 00 	lds	r18, 0x0084
    32b6:	30 91 85 00 	lds	r19, 0x0085
    32ba:	39 8b       	std	Y+17, r19	; 0x11
    32bc:	28 8b       	std	Y+16, r18	; 0x10

		getEstimatedAttitude(ticker_16); 
    32be:	0e 94 f6 1d 	call	0x3bec	; 0x3bec <getEstimatedAttitude>

		// Calculate PID
		Calculate_PID();
    32c2:	0e 94 0e 34 	call	0x681c	; 0x681c <Calculate_PID>

		// Calculate mix
		ProcessMixer();
    32c6:	0e 94 e6 2d 	call	0x5bcc	; 0x5bcc <ProcessMixer>

		// Transfer Config.Channel[i].value data to ServoOut[i] and check limits
		UpdateServos();
    32ca:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <UpdateServos>
		//************************************************************
		//* RC and servo timers
		//************************************************************

		// Work out the current RC rate by measuring between incoming RC packets
		RC_Rate_Timer += (uint16_t) (TCNT1 - RC_Rate_TCNT1);
    32ce:	80 91 84 00 	lds	r24, 0x0084
    32d2:	90 91 85 00 	lds	r25, 0x0085
    32d6:	2c 89       	ldd	r18, Y+20	; 0x14
    32d8:	3d 89       	ldd	r19, Y+21	; 0x15
    32da:	82 1b       	sub	r24, r18
    32dc:	93 0b       	sbc	r25, r19
    32de:	88 0e       	add	r8, r24
    32e0:	99 1e       	adc	r9, r25
    32e2:	a1 1c       	adc	r10, r1
    32e4:	b1 1c       	adc	r11, r1
		RC_Rate_TCNT1 = TCNT1;
    32e6:	20 91 84 00 	lds	r18, 0x0084
    32ea:	30 91 85 00 	lds	r19, 0x0085
    32ee:	3d 8b       	std	Y+21, r19	; 0x15
    32f0:	2c 8b       	std	Y+20, r18	; 0x14

		// Sets the desired SERVO_RATE by flagging ServoTick when PWM due
		// Servo_Rate increments at 19.531 kHz, in loop cycle chunks
		Servo_Rate += (uint8_t) (TCNT2 - ServoRate_TCNT2);
    32f2:	80 91 b2 00 	lds	r24, 0x00B2
    32f6:	3d 8d       	ldd	r19, Y+29	; 0x1d
    32f8:	83 1b       	sub	r24, r19
    32fa:	68 0e       	add	r6, r24
    32fc:	71 1c       	adc	r7, r1
		ServoRate_TCNT2 = TCNT2;
    32fe:	40 91 b2 00 	lds	r20, 0x00B2
    3302:	4d 8f       	std	Y+29, r20	; 0x1d
		
		// Signal RC overdue after RC_OVERDUE time (500ms)
		// RC_Timeout increments at 19.531 kHz, in loop cycle chunks
		RC_Timeout += (uint8_t) (TCNT2 - Servo_TCNT2);
    3304:	80 91 b2 00 	lds	r24, 0x00B2
    3308:	2c 8d       	ldd	r18, Y+28	; 0x1c
    330a:	82 1b       	sub	r24, r18
    330c:	2e 81       	ldd	r18, Y+6	; 0x06
    330e:	3f 81       	ldd	r19, Y+7	; 0x07
    3310:	28 0f       	add	r18, r24
    3312:	31 1d       	adc	r19, r1
    3314:	3f 83       	std	Y+7, r19	; 0x07
    3316:	2e 83       	std	Y+6, r18	; 0x06
		Servo_TCNT2 = TCNT2;
    3318:	30 91 b2 00 	lds	r19, 0x00B2
    331c:	3c 8f       	std	Y+28, r19	; 0x1c
		//************************************************************
		//* Check prescence of RC
		//************************************************************

		// Check to see if the RC input is overdue (500ms)
		if (RC_Timeout > RC_OVERDUE)
    331e:	2e 81       	ldd	r18, Y+6	; 0x06
    3320:	3f 81       	ldd	r19, Y+7	; 0x07
    3322:	26 32       	cpi	r18, 0x26	; 38
    3324:	36 42       	sbci	r19, 0x26	; 38
    3326:	10 f0       	brcs	.+4      	; 0x332c <main+0x64c>
		{
			Overdue = true;	// This results in a "No Signal" error
    3328:	21 e0       	ldi	r18, 0x01	; 1
    332a:	2a 87       	std	Y+10, r18	; 0x0a
		//************************************************************
		//* Measure incoming RC rate
		//************************************************************		

		// RC input received
		if (Interrupted)
    332c:	80 91 3e 07 	lds	r24, 0x073E
    3330:	88 23       	and	r24, r24
    3332:	81 f0       	breq	.+32     	; 0x3354 <main+0x674>
			RC_Timeout = 0;					// Reset RC timeout
			Overdue = false;				// And no longer overdue

			// Measure incoming RC rate. Threshold is 60Hz.
			// Slow RC rates are synched on every pulse, faster ones are limited to 50Hz
			if (RC_Rate_Timer > SLOW_RC_RATE)
    3334:	31 e0       	ldi	r19, 0x01	; 1
    3336:	3c 87       	std	Y+12, r19	; 0x0c
    3338:	44 ec       	ldi	r20, 0xC4	; 196
    333a:	84 16       	cp	r8, r20
    333c:	42 ea       	ldi	r20, 0xA2	; 162
    333e:	94 06       	cpc	r9, r20
    3340:	a1 04       	cpc	r10, r1
    3342:	b1 04       	cpc	r11, r1
    3344:	08 f4       	brcc	.+2      	; 0x3348 <main+0x668>
    3346:	1c 86       	std	Y+12, r1	; 0x0c
		//************************************************************		

		// RC input received
		if (Interrupted)
		{
			RC_Timeout = 0;					// Reset RC timeout
    3348:	1f 82       	std	Y+7, r1	; 0x07
    334a:	1e 82       	std	Y+6, r1	; 0x06
			else
			{
				SlowRC = false;
			}

			RC_Rate_Timer = 0;
    334c:	81 2c       	mov	r8, r1
    334e:	91 2c       	mov	r9, r1
    3350:	54 01       	movw	r10, r8

		// RC input received
		if (Interrupted)
		{
			RC_Timeout = 0;					// Reset RC timeout
			Overdue = false;				// And no longer overdue
    3352:	1a 86       	std	Y+10, r1	; 0x0a
		//* Manage desired output update rate when limited by
		//* the PWM rate set to "Normal"
		//************************************************************

		// Flag update required based on SERVO_RATE_LOW
		if (Servo_Rate > SERVO_RATE_LOW)
    3354:	87 e8       	ldi	r24, 0x87	; 135
    3356:	68 16       	cp	r6, r24
    3358:	81 e0       	ldi	r24, 0x01	; 1
    335a:	78 06       	cpc	r7, r24
    335c:	20 f0       	brcs	.+8      	; 0x3366 <main+0x686>
		{
			ServoTick = true; // Slow device is ready for output generation
			Servo_Rate = 0;
    335e:	61 2c       	mov	r6, r1
    3360:	71 2c       	mov	r7, r1
		//************************************************************

		// Flag update required based on SERVO_RATE_LOW
		if (Servo_Rate > SERVO_RATE_LOW)
		{
			ServoTick = true; // Slow device is ready for output generation
    3362:	21 e0       	ldi	r18, 0x01	; 1
    3364:	2b 87       	std	Y+11, r18	; 0x0b
		//* Synchronise output update rate to the RC interrupts
		//* based on a specific set of conditions
		//************************************************************

		// Cases where we are ready to output
		if	(Interrupted &&						// Only when interrupted (RC receive completed)
    3366:	80 91 3e 07 	lds	r24, 0x073E
    336a:	88 23       	and	r24, r24
    336c:	91 f0       	breq	.+36     	; 0x3392 <main+0x6b2>
    336e:	3c 85       	ldd	r19, Y+12	; 0x0c
    3370:	31 11       	cpse	r19, r1
    3372:	07 c0       	rjmp	.+14     	; 0x3382 <main+0x6a2>
				(
				  (SlowRC) || 					// Plan A (Run as fast as the incoming RC if slow RC detected)
    3374:	4b 85       	ldd	r20, Y+11	; 0x0b
    3376:	41 11       	cpse	r20, r1
    3378:	04 c0       	rjmp	.+8      	; 0x3382 <main+0x6a2>
				  (ServoTick && !SlowRC) ||		// Plan B (Run no faster than the preset rate (ServoTick) if fast RC detected)
    337a:	80 91 0c 06 	lds	r24, 0x060C
    337e:	81 30       	cpi	r24, 0x01	; 1
    3380:	41 f4       	brne	.+16     	; 0x3392 <main+0x6b2>
				  (Config.Servo_rate == HIGH) 	// Plan C (Run as fast as the incoming RC if in HIGH mode)
				)
			)
		{
			Interrupted = false;				// Reset interrupted flag
    3382:	10 92 3e 07 	sts	0x073E, r1
			ServoTick = false;					// Reset output requested flag
			Servo_Rate = 0;						// Reset servo rate timer
			output_servo_ppm();					// Output servo signal
    3386:	0e 94 c6 38 	call	0x718c	; 0x718c <output_servo_ppm>
				)
			)
		{
			Interrupted = false;				// Reset interrupted flag
			ServoTick = false;					// Reset output requested flag
			Servo_Rate = 0;						// Reset servo rate timer
    338a:	61 2c       	mov	r6, r1
    338c:	71 2c       	mov	r7, r1
				  (Config.Servo_rate == HIGH) 	// Plan C (Run as fast as the incoming RC if in HIGH mode)
				)
			)
		{
			Interrupted = false;				// Reset interrupted flag
			ServoTick = false;					// Reset output requested flag
    338e:	1b 86       	std	Y+11, r1	; 0x0b
			Servo_Rate = 0;						// Reset servo rate timer
			output_servo_ppm();					// Output servo signal
    3390:	02 c0       	rjmp	.+4      	; 0x3396 <main+0x6b6>
		}

		// Not ready for output, so cancel the current interrupt and wait for the next one
		else
		{
			Interrupted = false;				// Reset interrupted flag
    3392:	10 92 3e 07 	sts	0x073E, r1

		//************************************************************
		//* Increment system time
		//************************************************************

		ticker_32 += ((uint16_t)TCNT1 - LoopStartTCNT1);	// Update system time
    3396:	20 91 84 00 	lds	r18, 0x0084
    339a:	30 91 85 00 	lds	r19, 0x0085
    339e:	8a 89       	ldd	r24, Y+18	; 0x12
    33a0:	9b 89       	ldd	r25, Y+19	; 0x13
    33a2:	28 1b       	sub	r18, r24
    33a4:	39 0b       	sbc	r19, r25
    33a6:	80 91 5c 05 	lds	r24, 0x055C
    33aa:	90 91 5d 05 	lds	r25, 0x055D
    33ae:	a0 91 5e 05 	lds	r26, 0x055E
    33b2:	b0 91 5f 05 	lds	r27, 0x055F
    33b6:	82 0f       	add	r24, r18
    33b8:	93 1f       	adc	r25, r19
    33ba:	a1 1d       	adc	r26, r1
    33bc:	b1 1d       	adc	r27, r1
    33be:	80 93 5c 05 	sts	0x055C, r24
    33c2:	90 93 5d 05 	sts	0x055D, r25
    33c6:	a0 93 5e 05 	sts	0x055E, r26
    33ca:	b0 93 5f 05 	sts	0x055F, r27
		LoopStartTCNT1 = (uint16_t)TCNT1;					// Measure system time from here
    33ce:	20 91 84 00 	lds	r18, 0x0084
    33d2:	30 91 85 00 	lds	r19, 0x0085
    33d6:	3b 8b       	std	Y+19, r19	; 0x13
    33d8:	2a 8b       	std	Y+18, r18	; 0x12
		//************************************************************
		//* Transition state handling
		//************************************************************

		// Update timed transition when changing flight modes
		if (Config.FlightSel != old_flight)
    33da:	0f 8f       	std	Y+31, r16	; 0x1f
		//************************************************************

		ticker_32 += ((uint16_t)TCNT1 - LoopStartTCNT1);	// Update system time
		LoopStartTCNT1 = (uint16_t)TCNT1;					// Measure system time from here

	} // main loop
    33dc:	3a 8d       	ldd	r19, Y+26	; 0x1a
    33de:	3f 87       	std	Y+15, r19	; 0x0f
    33e0:	09 8d       	ldd	r16, Y+25	; 0x19
    33e2:	b3 cc       	rjmp	.-1690   	; 0x2d4a <main+0x6a>

000033e4 <spiwrite>:
const uint8_t pagemap[] PROGMEM 		= { 7, 6, 5, 4, 3, 2, 1, 0 }; 
const uint8_t lcd_commmands[] PROGMEM	= { 0xA2,0xA0,0x40,0xA6,0xEE,0xC8,0x2C,0x2E,0x2F,0x24,0xAC,0x00,0xF8,0x00};	// LCD command string

// Software SPI write
inline void spiwrite(uint8_t c) 
{
    33e4:	0f 93       	push	r16
    33e6:	1f 93       	push	r17
    33e8:	cf 93       	push	r28
    33ea:	df 93       	push	r29
    33ec:	c7 e0       	ldi	r28, 0x07	; 7
    33ee:	d0 e0       	ldi	r29, 0x00	; 0
	int8_t i;
	for (i=7; i>=0; i--) 
	{
		LCD_SCL = 0;
		if (c & (1 << (i)))		// Bit set?
    33f0:	08 2f       	mov	r16, r24
    33f2:	10 e0       	ldi	r17, 0x00	; 0
inline void spiwrite(uint8_t c) 
{
	int8_t i;
	for (i=7; i>=0; i--) 
	{
		LCD_SCL = 0;
    33f4:	5c 98       	cbi	0x0b, 4	; 11
		if (c & (1 << (i)))		// Bit set?
    33f6:	c8 01       	movw	r24, r16
    33f8:	0c 2e       	mov	r0, r28
    33fa:	02 c0       	rjmp	.+4      	; 0x3400 <spiwrite+0x1c>
    33fc:	95 95       	asr	r25
    33fe:	87 95       	ror	r24
    3400:	0a 94       	dec	r0
    3402:	e2 f7       	brpl	.-8      	; 0x33fc <spiwrite+0x18>
    3404:	80 ff       	sbrs	r24, 0
    3406:	02 c0       	rjmp	.+4      	; 0x340c <spiwrite+0x28>
		{
			LCD_SI = 1;
    3408:	59 9a       	sbi	0x0b, 1	; 11
    340a:	01 c0       	rjmp	.+2      	; 0x340e <spiwrite+0x2a>
			glcd_delay();
			LCD_SCL = 1;
		}
		else					// Bit clear?
		{
			LCD_SI = 0;
    340c:	59 98       	cbi	0x0b, 1	; 11
			glcd_delay();
    340e:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <glcd_delay>
			LCD_SCL = 1;
    3412:	5c 9a       	sbi	0x0b, 4	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3414:	86 e0       	ldi	r24, 0x06	; 6
    3416:	8a 95       	dec	r24
    3418:	f1 f7       	brne	.-4      	; 0x3416 <spiwrite+0x32>
    341a:	00 c0       	rjmp	.+0      	; 0x341c <spiwrite+0x38>
    341c:	21 97       	sbiw	r28, 0x01	; 1
    341e:	50 f7       	brcc	.-44     	; 0x33f4 <spiwrite+0x10>
		}
		_delay_us(1);
	}
}
    3420:	df 91       	pop	r29
    3422:	cf 91       	pop	r28
    3424:	1f 91       	pop	r17
    3426:	0f 91       	pop	r16
    3428:	08 95       	ret

0000342a <st7565_command>:

// Send command to LCD
void st7565_command(uint8_t c) 
{
	LCD_A0 = 0;
    342a:	5f 98       	cbi	0x0b, 7	; 11
	spiwrite(c);
    342c:	0e 94 f2 19 	call	0x33e4	; 0x33e4 <spiwrite>
    3430:	08 95       	ret

00003432 <st7565_data>:
}

// Send data to LCD
void st7565_data(uint8_t c) 
{
	LCD_A0 = 1;
    3432:	5f 9a       	sbi	0x0b, 7	; 11
	spiwrite(c);
    3434:	0e 94 f2 19 	call	0x33e4	; 0x33e4 <spiwrite>
    3438:	08 95       	ret

0000343a <st7565_init>:
}

// Initialise LCD
void st7565_init(void) 
{
    343a:	cf 93       	push	r28
    343c:	df 93       	push	r29
	// Toggle RST low to reset and CS low so it'll listen to us
	LCD_CSI = 0;
    343e:	5d 98       	cbi	0x0b, 5	; 11
	LCD_RES = 0;
    3440:	5e 98       	cbi	0x0b, 6	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3442:	2f e7       	ldi	r18, 0x7F	; 127
    3444:	84 e8       	ldi	r24, 0x84	; 132
    3446:	9e e1       	ldi	r25, 0x1E	; 30
    3448:	21 50       	subi	r18, 0x01	; 1
    344a:	80 40       	sbci	r24, 0x00	; 0
    344c:	90 40       	sbci	r25, 0x00	; 0
    344e:	e1 f7       	brne	.-8      	; 0x3448 <st7565_init+0xe>
    3450:	00 c0       	rjmp	.+0      	; 0x3452 <st7565_init+0x18>
    3452:	00 00       	nop
	_delay_ms(500);
	LCD_RES = 1;
    3454:	5e 9a       	sbi	0x0b, 6	; 11
    3456:	c6 ef       	ldi	r28, 0xF6	; 246
    3458:	dd e0       	ldi	r29, 0x0D	; 13

	// Send command sequence
	for (int i = 0; i < 7; i++)
	{
		st7565_command((uint8_t)pgm_read_byte(&lcd_commmands[i]));
    345a:	fe 01       	movw	r30, r28
    345c:	84 91       	lpm	r24, Z
    345e:	0e 94 15 1a 	call	0x342a	; 0x342a <st7565_command>
    3462:	21 96       	adiw	r28, 0x01	; 1
	LCD_RES = 0;
	_delay_ms(500);
	LCD_RES = 1;

	// Send command sequence
	for (int i = 0; i < 7; i++)
    3464:	fd e0       	ldi	r31, 0x0D	; 13
    3466:	cd 3f       	cpi	r28, 0xFD	; 253
    3468:	df 07       	cpc	r29, r31
    346a:	b9 f7       	brne	.-18     	; 0x345a <st7565_init+0x20>
    346c:	2f e3       	ldi	r18, 0x3F	; 63
    346e:	8d e0       	ldi	r24, 0x0D	; 13
    3470:	93 e0       	ldi	r25, 0x03	; 3
    3472:	21 50       	subi	r18, 0x01	; 1
    3474:	80 40       	sbci	r24, 0x00	; 0
    3476:	90 40       	sbci	r25, 0x00	; 0
    3478:	e1 f7       	brne	.-8      	; 0x3472 <st7565_init+0x38>
    347a:	00 c0       	rjmp	.+0      	; 0x347c <st7565_init+0x42>
    347c:	00 00       	nop
	{
		st7565_command((uint8_t)pgm_read_byte(&lcd_commmands[i]));
	}
	_delay_ms(50);
	st7565_command(0x2E);
    347e:	8e e2       	ldi	r24, 0x2E	; 46
    3480:	0e 94 15 1a 	call	0x342a	; 0x342a <st7565_command>
    3484:	ef e3       	ldi	r30, 0x3F	; 63
    3486:	fd e0       	ldi	r31, 0x0D	; 13
    3488:	23 e0       	ldi	r18, 0x03	; 3
    348a:	e1 50       	subi	r30, 0x01	; 1
    348c:	f0 40       	sbci	r31, 0x00	; 0
    348e:	20 40       	sbci	r18, 0x00	; 0
    3490:	e1 f7       	brne	.-8      	; 0x348a <st7565_init+0x50>
    3492:	00 c0       	rjmp	.+0      	; 0x3494 <st7565_init+0x5a>
    3494:	00 00       	nop
	_delay_ms(50);
	st7565_command(0x2F);
    3496:	8f e2       	ldi	r24, 0x2F	; 47
    3498:	0e 94 15 1a 	call	0x342a	; 0x342a <st7565_command>
    349c:	8f e4       	ldi	r24, 0x4F	; 79
    349e:	93 ec       	ldi	r25, 0xC3	; 195
    34a0:	01 97       	sbiw	r24, 0x01	; 1
    34a2:	f1 f7       	brne	.-4      	; 0x34a0 <st7565_init+0x66>
    34a4:	00 c0       	rjmp	.+0      	; 0x34a6 <st7565_init+0x6c>
    34a6:	00 00       	nop
	_delay_ms(10);

	for (int i = 9; i < 14; i++)
    34a8:	c9 e0       	ldi	r28, 0x09	; 9
    34aa:	d0 e0       	ldi	r29, 0x00	; 0
    34ac:	fe 01       	movw	r30, r28
    34ae:	ea 50       	subi	r30, 0x0A	; 10
    34b0:	f2 4f       	sbci	r31, 0xF2	; 242
	{
		st7565_command((uint8_t)pgm_read_byte(&lcd_commmands[i]));
    34b2:	84 91       	lpm	r24, Z
    34b4:	0e 94 15 1a 	call	0x342a	; 0x342a <st7565_command>
	st7565_command(0x2E);
	_delay_ms(50);
	st7565_command(0x2F);
	_delay_ms(10);

	for (int i = 9; i < 14; i++)
    34b8:	21 96       	adiw	r28, 0x01	; 1
    34ba:	ce 30       	cpi	r28, 0x0E	; 14
    34bc:	d1 05       	cpc	r29, r1
    34be:	b1 f7       	brne	.-20     	; 0x34ac <st7565_init+0x72>
	{
		st7565_command((uint8_t)pgm_read_byte(&lcd_commmands[i]));
	}
}
    34c0:	df 91       	pop	r29
    34c2:	cf 91       	pop	r28
    34c4:	08 95       	ret

000034c6 <st7565_set_brightness>:


// Set LCD brightness
void st7565_set_brightness(uint8_t val) 
{
    34c6:	cf 93       	push	r28
    34c8:	c8 2f       	mov	r28, r24
	st7565_command(CMD_SET_VOLUME_FIRST);
    34ca:	81 e8       	ldi	r24, 0x81	; 129
    34cc:	0e 94 15 1a 	call	0x342a	; 0x342a <st7565_command>
	st7565_command(CMD_SET_VOLUME_SECOND | (val & 0x3f));
    34d0:	8c 2f       	mov	r24, r28
    34d2:	8f 73       	andi	r24, 0x3F	; 63
    34d4:	0e 94 15 1a 	call	0x342a	; 0x342a <st7565_command>
}
    34d8:	cf 91       	pop	r28
    34da:	08 95       	ret

000034dc <write_buffer>:

// Write LCD buffer if type = 1 normal, 0 = logo
void write_buffer(uint8_t *buffer, uint8_t type) 
{
    34dc:	a0 e0       	ldi	r26, 0x00	; 0
    34de:	b0 e0       	ldi	r27, 0x00	; 0
    34e0:	e4 e7       	ldi	r30, 0x74	; 116
    34e2:	fa e1       	ldi	r31, 0x1A	; 26
    34e4:	0c 94 23 3d 	jmp	0x7a46	; 0x7a46 <__prologue_saves__+0x10>
    34e8:	a6 2e       	mov	r10, r22
    34ea:	8c 01       	movw	r16, r24
    34ec:	c0 e0       	ldi	r28, 0x00	; 0
    34ee:	d0 e0       	ldi	r29, 0x00	; 0
    34f0:	8b e0       	ldi	r24, 0x0B	; 11
    34f2:	c8 2e       	mov	r12, r24
    34f4:	8e e0       	ldi	r24, 0x0E	; 14
    34f6:	d8 2e       	mov	r13, r24
	uint8_t c, p;
	for(p = 0; p < 8; p++) 
	{
		if (type)
    34f8:	aa 20       	and	r10, r10
    34fa:	21 f0       	breq	.+8      	; 0x3504 <write_buffer+0x28>
    34fc:	fe 01       	movw	r30, r28
    34fe:	ec 5f       	subi	r30, 0xFC	; 252
    3500:	f1 4f       	sbci	r31, 0xF1	; 241
    3502:	03 c0       	rjmp	.+6      	; 0x350a <write_buffer+0x2e>
    3504:	f6 01       	movw	r30, r12
    3506:	ec 1b       	sub	r30, r28
    3508:	fd 0b       	sbc	r31, r29
		{
			st7565_command(CMD_SET_PAGE | (uint8_t)pgm_read_byte(&pagemap[p]));		// Page 7 to 0
		}
		else
		{
			st7565_command(CMD_SET_PAGE | (uint8_t)pgm_read_byte(&pagemap[7-p]));	// Page 0 to 7
    350a:	84 91       	lpm	r24, Z
    350c:	80 6b       	ori	r24, 0xB0	; 176
    350e:	0e 94 15 1a 	call	0x342a	; 0x342a <st7565_command>
		}

		st7565_command(CMD_SET_COLUMN_LOWER | (0x0 & 0xf));			// Column 0
    3512:	80 e0       	ldi	r24, 0x00	; 0
    3514:	0e 94 15 1a 	call	0x342a	; 0x342a <st7565_command>
		st7565_command(CMD_SET_COLUMN_UPPER | ((0x0 >> 4) & 0xf));	// Column 0
    3518:	80 e1       	ldi	r24, 0x10	; 16
    351a:	0e 94 15 1a 	call	0x342a	; 0x342a <st7565_command>
		st7565_command(CMD_RMW);									// Sets auto-increment
    351e:	80 ee       	ldi	r24, 0xE0	; 224
    3520:	0e 94 15 1a 	call	0x342a	; 0x342a <st7565_command>
    3524:	78 01       	movw	r14, r16

		for(c = 0; c < 128; c++) 
    3526:	b1 2c       	mov	r11, r1
		{
			st7565_data(buffer[(128*p)+c]);
    3528:	f7 01       	movw	r30, r14
    352a:	81 91       	ld	r24, Z+
    352c:	7f 01       	movw	r14, r30
    352e:	0e 94 19 1a 	call	0x3432	; 0x3432 <st7565_data>

		st7565_command(CMD_SET_COLUMN_LOWER | (0x0 & 0xf));			// Column 0
		st7565_command(CMD_SET_COLUMN_UPPER | ((0x0 >> 4) & 0xf));	// Column 0
		st7565_command(CMD_RMW);									// Sets auto-increment

		for(c = 0; c < 128; c++) 
    3532:	b3 94       	inc	r11
    3534:	f0 e8       	ldi	r31, 0x80	; 128
    3536:	bf 12       	cpse	r11, r31
    3538:	f7 cf       	rjmp	.-18     	; 0x3528 <write_buffer+0x4c>
    353a:	21 96       	adiw	r28, 0x01	; 1
    353c:	00 58       	subi	r16, 0x80	; 128
    353e:	1f 4f       	sbci	r17, 0xFF	; 255

// Write LCD buffer if type = 1 normal, 0 = logo
void write_buffer(uint8_t *buffer, uint8_t type) 
{
	uint8_t c, p;
	for(p = 0; p < 8; p++) 
    3540:	c8 30       	cpi	r28, 0x08	; 8
    3542:	d1 05       	cpc	r29, r1
    3544:	c9 f6       	brne	.-78     	; 0x34f8 <write_buffer+0x1c>
		for(c = 0; c < 128; c++) 
		{
			st7565_data(buffer[(128*p)+c]);
		}
	}
}
    3546:	cd b7       	in	r28, 0x3d	; 61
    3548:	de b7       	in	r29, 0x3e	; 62
    354a:	ea e0       	ldi	r30, 0x0A	; 10
    354c:	0c 94 3f 3d 	jmp	0x7a7e	; 0x7a7e <__epilogue_restores__+0x10>

00003550 <clear_buffer>:

// Clear buffer
void clear_buffer(uint8_t *buff) 
{
	memset(buff, 0, 1024);
    3550:	20 e0       	ldi	r18, 0x00	; 0
    3552:	34 e0       	ldi	r19, 0x04	; 4
    3554:	fc 01       	movw	r30, r24
    3556:	a9 01       	movw	r20, r18
    3558:	11 92       	st	Z+, r1
    355a:	41 50       	subi	r20, 0x01	; 1
    355c:	50 40       	sbci	r21, 0x00	; 0
    355e:	e1 f7       	brne	.-8      	; 0x3558 <clear_buffer+0x8>
    3560:	08 95       	ret

00003562 <clear_screen>:
}

// Clear screen (does not clear buffer)
void clear_screen(void) 
{
    3562:	cf 93       	push	r28
    3564:	df 93       	push	r29
	uint8_t p, c;

	for(p = 0; p < 8; p++) 
    3566:	d0 e0       	ldi	r29, 0x00	; 0
	{
		st7565_command(CMD_SET_PAGE | p);								// Set page to p
    3568:	8d 2f       	mov	r24, r29
    356a:	80 6b       	ori	r24, 0xB0	; 176
    356c:	0e 94 15 1a 	call	0x342a	; 0x342a <st7565_command>
		for(c = 0; c < 128; c++) 										// Was 129, which I think is wrong...
    3570:	c0 e0       	ldi	r28, 0x00	; 0
		{
			st7565_command(CMD_SET_COLUMN_LOWER | (c & 0xf));
    3572:	8c 2f       	mov	r24, r28
    3574:	8f 70       	andi	r24, 0x0F	; 15
    3576:	0e 94 15 1a 	call	0x342a	; 0x342a <st7565_command>
			st7565_command(CMD_SET_COLUMN_UPPER | ((c >> 4) & 0xf));	// Set column to c
    357a:	8c 2f       	mov	r24, r28
    357c:	82 95       	swap	r24
    357e:	8f 70       	andi	r24, 0x0F	; 15
    3580:	80 61       	ori	r24, 0x10	; 16
    3582:	0e 94 15 1a 	call	0x342a	; 0x342a <st7565_command>
			st7565_data(0x00);											// Clear data
    3586:	80 e0       	ldi	r24, 0x00	; 0
    3588:	0e 94 19 1a 	call	0x3432	; 0x3432 <st7565_data>
	uint8_t p, c;

	for(p = 0; p < 8; p++) 
	{
		st7565_command(CMD_SET_PAGE | p);								// Set page to p
		for(c = 0; c < 128; c++) 										// Was 129, which I think is wrong...
    358c:	cf 5f       	subi	r28, 0xFF	; 255
    358e:	c0 38       	cpi	r28, 0x80	; 128
    3590:	81 f7       	brne	.-32     	; 0x3572 <clear_screen+0x10>
// Clear screen (does not clear buffer)
void clear_screen(void) 
{
	uint8_t p, c;

	for(p = 0; p < 8; p++) 
    3592:	df 5f       	subi	r29, 0xFF	; 255
    3594:	d8 30       	cpi	r29, 0x08	; 8
    3596:	41 f7       	brne	.-48     	; 0x3568 <clear_screen+0x6>
			st7565_command(CMD_SET_COLUMN_LOWER | (c & 0xf));
			st7565_command(CMD_SET_COLUMN_UPPER | ((c >> 4) & 0xf));	// Set column to c
			st7565_data(0x00);											// Clear data
		}     
	}
}
    3598:	df 91       	pop	r29
    359a:	cf 91       	pop	r28
    359c:	08 95       	ret

0000359e <setpixel>:
//***********************************************************

// Set a single pixel
void setpixel(uint8_t *buff, uint8_t x, uint8_t y, uint8_t color) 
{
	if ((x >= LCDWIDTH) || (y >= LCDHEIGHT))
    359e:	67 fd       	sbrc	r22, 7
    35a0:	36 c0       	rjmp	.+108    	; 0x360e <setpixel+0x70>
    35a2:	40 34       	cpi	r20, 0x40	; 64
    35a4:	a0 f5       	brcc	.+104    	; 0x360e <setpixel+0x70>
    35a6:	34 2f       	mov	r19, r20
    35a8:	36 95       	lsr	r19
    35aa:	36 95       	lsr	r19
    35ac:	36 95       	lsr	r19
    35ae:	e6 2f       	mov	r30, r22
    35b0:	f0 e0       	ldi	r31, 0x00	; 0
    35b2:	50 e0       	ldi	r21, 0x00	; 0
	{
		return;
	}
	// x is which column
	if (color)
    35b4:	22 23       	and	r18, r18
    35b6:	a9 f0       	breq	.+42     	; 0x35e2 <setpixel+0x44>
	{
		buff[x+ (y/8)*128] |= (1 << (7-(y%8)));  
    35b8:	20 e8       	ldi	r18, 0x80	; 128
    35ba:	32 9f       	mul	r19, r18
    35bc:	e0 0d       	add	r30, r0
    35be:	f1 1d       	adc	r31, r1
    35c0:	11 24       	eor	r1, r1
    35c2:	e8 0f       	add	r30, r24
    35c4:	f9 1f       	adc	r31, r25
    35c6:	40 95       	com	r20
    35c8:	50 95       	com	r21
    35ca:	47 70       	andi	r20, 0x07	; 7
    35cc:	55 27       	eor	r21, r21
    35ce:	81 e0       	ldi	r24, 0x01	; 1
    35d0:	90 e0       	ldi	r25, 0x00	; 0
    35d2:	04 2e       	mov	r0, r20
    35d4:	01 c0       	rjmp	.+2      	; 0x35d8 <setpixel+0x3a>
    35d6:	88 0f       	add	r24, r24
    35d8:	0a 94       	dec	r0
    35da:	ea f7       	brpl	.-6      	; 0x35d6 <setpixel+0x38>
    35dc:	90 81       	ld	r25, Z
    35de:	98 2b       	or	r25, r24
    35e0:	15 c0       	rjmp	.+42     	; 0x360c <setpixel+0x6e>
	}
	else
	{
		buff[x+ (y/8)*128] &= ~(1 << (7-(y%8))); 
    35e2:	20 e8       	ldi	r18, 0x80	; 128
    35e4:	32 9f       	mul	r19, r18
    35e6:	e0 0d       	add	r30, r0
    35e8:	f1 1d       	adc	r31, r1
    35ea:	11 24       	eor	r1, r1
    35ec:	e8 0f       	add	r30, r24
    35ee:	f9 1f       	adc	r31, r25
    35f0:	40 95       	com	r20
    35f2:	50 95       	com	r21
    35f4:	47 70       	andi	r20, 0x07	; 7
    35f6:	55 27       	eor	r21, r21
    35f8:	81 e0       	ldi	r24, 0x01	; 1
    35fa:	90 e0       	ldi	r25, 0x00	; 0
    35fc:	04 2e       	mov	r0, r20
    35fe:	01 c0       	rjmp	.+2      	; 0x3602 <setpixel+0x64>
    3600:	88 0f       	add	r24, r24
    3602:	0a 94       	dec	r0
    3604:	ea f7       	brpl	.-6      	; 0x3600 <setpixel+0x62>
    3606:	80 95       	com	r24
    3608:	90 81       	ld	r25, Z
    360a:	98 23       	and	r25, r24
    360c:	90 83       	st	Z, r25
    360e:	08 95       	ret

00003610 <drawline>:
	}
}

// Bresenham's algorithm - From wikpedia
void drawline(uint8_t *buff, uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1, uint8_t color) 
{
    3610:	a0 e0       	ldi	r26, 0x00	; 0
    3612:	b0 e0       	ldi	r27, 0x00	; 0
    3614:	ee e0       	ldi	r30, 0x0E	; 14
    3616:	fb e1       	ldi	r31, 0x1B	; 27
    3618:	0c 94 22 3d 	jmp	0x7a44	; 0x7a44 <__prologue_saves__+0xe>
    361c:	ec 01       	movw	r28, r24
    361e:	16 2f       	mov	r17, r22
    3620:	f4 2e       	mov	r15, r20
    3622:	d2 2e       	mov	r13, r18
	uint8_t steep = abs(y1 - y0) > abs(x1 - x0);
    3624:	a0 2f       	mov	r26, r16
    3626:	b0 e0       	ldi	r27, 0x00	; 0
    3628:	a4 1b       	sub	r26, r20
    362a:	b1 09       	sbc	r27, r1
    362c:	b7 ff       	sbrs	r27, 7
    362e:	03 c0       	rjmp	.+6      	; 0x3636 <drawline+0x26>
    3630:	b1 95       	neg	r27
    3632:	a1 95       	neg	r26
    3634:	b1 09       	sbc	r27, r1
    3636:	ed 2d       	mov	r30, r13
    3638:	f0 e0       	ldi	r31, 0x00	; 0
    363a:	e1 1b       	sub	r30, r17
    363c:	f1 09       	sbc	r31, r1
    363e:	f7 ff       	sbrs	r31, 7
    3640:	03 c0       	rjmp	.+6      	; 0x3648 <drawline+0x38>
    3642:	f1 95       	neg	r31
    3644:	e1 95       	neg	r30
    3646:	f1 09       	sbc	r31, r1
    3648:	bb 24       	eor	r11, r11
    364a:	b3 94       	inc	r11
    364c:	ea 17       	cp	r30, r26
    364e:	fb 07       	cpc	r31, r27
    3650:	14 f0       	brlt	.+4      	; 0x3656 <drawline+0x46>
    3652:	b1 2c       	mov	r11, r1
    3654:	06 c0       	rjmp	.+12     	; 0x3662 <drawline+0x52>
    3656:	8d 2d       	mov	r24, r13
	if (steep) 
	{
		swap(x0, y0);
		swap(x1, y1);
    3658:	d0 2e       	mov	r13, r16
    365a:	08 2f       	mov	r16, r24
    365c:	81 2f       	mov	r24, r17
void drawline(uint8_t *buff, uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1, uint8_t color) 
{
	uint8_t steep = abs(y1 - y0) > abs(x1 - x0);
	if (steep) 
	{
		swap(x0, y0);
    365e:	1f 2d       	mov	r17, r15
    3660:	f8 2e       	mov	r15, r24
		swap(x1, y1);
	}

	if (x0 > x1) 
    3662:	d1 16       	cp	r13, r17
    3664:	30 f4       	brcc	.+12     	; 0x3672 <drawline+0x62>
    3666:	8f 2d       	mov	r24, r15
	{
		swap(x0, x1);
		swap(y0, y1);
    3668:	f0 2e       	mov	r15, r16
    366a:	08 2f       	mov	r16, r24
    366c:	81 2f       	mov	r24, r17
    366e:	1d 2d       	mov	r17, r13
    3670:	d8 2e       	mov	r13, r24
	}

	uint8_t dx, dy;
	dx = x1 - x0;
    3672:	ad 2c       	mov	r10, r13
    3674:	a1 1a       	sub	r10, r17
	dy = abs(y1 - y0);
    3676:	e0 2f       	mov	r30, r16
    3678:	f0 e0       	ldi	r31, 0x00	; 0
    367a:	ef 19       	sub	r30, r15
    367c:	f1 09       	sbc	r31, r1
    367e:	f7 ff       	sbrs	r31, 7
    3680:	03 c0       	rjmp	.+6      	; 0x3688 <drawline+0x78>
    3682:	f1 95       	neg	r31
    3684:	e1 95       	neg	r30
    3686:	f1 09       	sbc	r31, r1
    3688:	9e 2e       	mov	r9, r30

	int8_t err = dx / 2;
    368a:	ca 2c       	mov	r12, r10
    368c:	c6 94       	lsr	r12
	int8_t ystep;

	if (y0 < y1) 
    368e:	f0 16       	cp	r15, r16
    3690:	10 f4       	brcc	.+4      	; 0x3696 <drawline+0x86>
	{
		ystep = 1;
    3692:	01 e0       	ldi	r16, 0x01	; 1
    3694:	10 c0       	rjmp	.+32     	; 0x36b6 <drawline+0xa6>
	} 
	else 
	{
		ystep = -1;
    3696:	0f ef       	ldi	r16, 0xFF	; 255
    3698:	0e c0       	rjmp	.+28     	; 0x36b6 <drawline+0xa6>

	for (; x0<x1; x0++) 
	{
		if (steep) 
		{
			setpixel(buff, y0, x0, color);
    369a:	2e 2d       	mov	r18, r14
		ystep = -1;
	}

	for (; x0<x1; x0++) 
	{
		if (steep) 
    369c:	bb 20       	and	r11, r11
    369e:	71 f0       	breq	.+28     	; 0x36bc <drawline+0xac>
		{
			setpixel(buff, y0, x0, color);
    36a0:	41 2f       	mov	r20, r17
    36a2:	6f 2d       	mov	r22, r15
		} 
		else 
		{
			setpixel(buff, x0, y0, color);
    36a4:	ce 01       	movw	r24, r28
    36a6:	0e 94 cf 1a 	call	0x359e	; 0x359e <setpixel>
		}
		err -= dy;
    36aa:	c9 18       	sub	r12, r9
		if (err < 0) 
    36ac:	c7 fe       	sbrs	r12, 7
    36ae:	02 c0       	rjmp	.+4      	; 0x36b4 <drawline+0xa4>
		{
			y0 += ystep;
    36b0:	f0 0e       	add	r15, r16
			err += dx;
    36b2:	ca 0c       	add	r12, r10
	else 
	{
		ystep = -1;
	}

	for (; x0<x1; x0++) 
    36b4:	1f 5f       	subi	r17, 0xFF	; 255
    36b6:	1d 15       	cp	r17, r13
    36b8:	80 f3       	brcs	.-32     	; 0x369a <drawline+0x8a>
    36ba:	03 c0       	rjmp	.+6      	; 0x36c2 <drawline+0xb2>
		{
			setpixel(buff, y0, x0, color);
		} 
		else 
		{
			setpixel(buff, x0, y0, color);
    36bc:	4f 2d       	mov	r20, r15
    36be:	61 2f       	mov	r22, r17
    36c0:	f1 cf       	rjmp	.-30     	; 0x36a4 <drawline+0x94>
		{
			y0 += ystep;
			err += dx;
		}
	}
}
    36c2:	cd b7       	in	r28, 0x3d	; 61
    36c4:	de b7       	in	r29, 0x3e	; 62
    36c6:	eb e0       	ldi	r30, 0x0B	; 11
    36c8:	0c 94 3e 3d 	jmp	0x7a7c	; 0x7a7c <__epilogue_restores__+0xe>

000036cc <fillrect>:

// Filled rectangle
void fillrect(uint8_t *buff, uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color) 
{
    36cc:	a0 e0       	ldi	r26, 0x00	; 0
    36ce:	b0 e0       	ldi	r27, 0x00	; 0
    36d0:	ec e6       	ldi	r30, 0x6C	; 108
    36d2:	fb e1       	ldi	r31, 0x1B	; 27
    36d4:	0c 94 23 3d 	jmp	0x7a46	; 0x7a46 <__prologue_saves__+0x10>
    36d8:	6c 01       	movw	r12, r24
    36da:	a4 2e       	mov	r10, r20
	// Stupidest version - just pixels - but fast with internal buffer!
	for (uint8_t i=x; i<x+w; i++) 
    36dc:	f6 2e       	mov	r15, r22
    36de:	c2 2f       	mov	r28, r18
    36e0:	d0 e0       	ldi	r29, 0x00	; 0
    36e2:	c6 0f       	add	r28, r22
    36e4:	d1 1d       	adc	r29, r1
	{
		for (uint8_t j=y; j<y+h; j++) 
    36e6:	10 e0       	ldi	r17, 0x00	; 0
    36e8:	04 0f       	add	r16, r20
    36ea:	11 1d       	adc	r17, r1

// Filled rectangle
void fillrect(uint8_t *buff, uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color) 
{
	// Stupidest version - just pixels - but fast with internal buffer!
	for (uint8_t i=x; i<x+w; i++) 
    36ec:	8f 2d       	mov	r24, r15
    36ee:	90 e0       	ldi	r25, 0x00	; 0
    36f0:	8c 17       	cp	r24, r28
    36f2:	9d 07       	cpc	r25, r29
    36f4:	84 f4       	brge	.+32     	; 0x3716 <fillrect+0x4a>
    36f6:	ba 2c       	mov	r11, r10
	{
		for (uint8_t j=y; j<y+h; j++) 
    36f8:	8b 2d       	mov	r24, r11
    36fa:	90 e0       	ldi	r25, 0x00	; 0
    36fc:	80 17       	cp	r24, r16
    36fe:	91 07       	cpc	r25, r17
    3700:	44 f4       	brge	.+16     	; 0x3712 <fillrect+0x46>
		{
			setpixel(buff, i, j, color);
    3702:	2e 2d       	mov	r18, r14
    3704:	4b 2d       	mov	r20, r11
    3706:	6f 2d       	mov	r22, r15
    3708:	c6 01       	movw	r24, r12
    370a:	0e 94 cf 1a 	call	0x359e	; 0x359e <setpixel>
void fillrect(uint8_t *buff, uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color) 
{
	// Stupidest version - just pixels - but fast with internal buffer!
	for (uint8_t i=x; i<x+w; i++) 
	{
		for (uint8_t j=y; j<y+h; j++) 
    370e:	b3 94       	inc	r11
    3710:	f3 cf       	rjmp	.-26     	; 0x36f8 <fillrect+0x2c>

// Filled rectangle
void fillrect(uint8_t *buff, uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color) 
{
	// Stupidest version - just pixels - but fast with internal buffer!
	for (uint8_t i=x; i<x+w; i++) 
    3712:	f3 94       	inc	r15
    3714:	eb cf       	rjmp	.-42     	; 0x36ec <fillrect+0x20>
		for (uint8_t j=y; j<y+h; j++) 
		{
			setpixel(buff, i, j, color);
		}
	}
}
    3716:	cd b7       	in	r28, 0x3d	; 61
    3718:	de b7       	in	r29, 0x3e	; 62
    371a:	ea e0       	ldi	r30, 0x0A	; 10
    371c:	0c 94 3f 3d 	jmp	0x7a7e	; 0x7a7e <__epilogue_restores__+0x10>

00003720 <drawrect>:

// Draw a rectangle
void drawrect(uint8_t *buff, uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color) 
{
    3720:	a0 e0       	ldi	r26, 0x00	; 0
    3722:	b0 e0       	ldi	r27, 0x00	; 0
    3724:	e6 e9       	ldi	r30, 0x96	; 150
    3726:	fb e1       	ldi	r31, 0x1B	; 27
    3728:	0c 94 22 3d 	jmp	0x7a44	; 0x7a44 <__prologue_saves__+0xe>
    372c:	ec 01       	movw	r28, r24
    372e:	f6 2e       	mov	r15, r22
    3730:	b4 2e       	mov	r11, r20
    3732:	92 2e       	mov	r9, r18
	// Stupidest version - just pixels - but fast with internal buffer!
	for (uint8_t i=x; i<x+w; i++) 
    3734:	16 2f       	mov	r17, r22
    3736:	c2 2e       	mov	r12, r18
    3738:	d1 2c       	mov	r13, r1
    373a:	c6 0e       	add	r12, r22
    373c:	d1 1c       	adc	r13, r1
	{
		setpixel(buff, i, y, color);
		setpixel(buff, i, y+h-1, color);
    373e:	aa 24       	eor	r10, r10
    3740:	aa 94       	dec	r10
    3742:	a0 0e       	add	r10, r16
    3744:	a4 0e       	add	r10, r20

// Draw a rectangle
void drawrect(uint8_t *buff, uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color) 
{
	// Stupidest version - just pixels - but fast with internal buffer!
	for (uint8_t i=x; i<x+w; i++) 
    3746:	81 2f       	mov	r24, r17
    3748:	90 e0       	ldi	r25, 0x00	; 0
    374a:	8c 15       	cp	r24, r12
    374c:	9d 05       	cpc	r25, r13
    374e:	74 f4       	brge	.+28     	; 0x376c <drawrect+0x4c>
	{
		setpixel(buff, i, y, color);
    3750:	2e 2d       	mov	r18, r14
    3752:	4b 2d       	mov	r20, r11
    3754:	61 2f       	mov	r22, r17
    3756:	ce 01       	movw	r24, r28
    3758:	0e 94 cf 1a 	call	0x359e	; 0x359e <setpixel>
		setpixel(buff, i, y+h-1, color);
    375c:	2e 2d       	mov	r18, r14
    375e:	4a 2d       	mov	r20, r10
    3760:	61 2f       	mov	r22, r17
    3762:	ce 01       	movw	r24, r28
    3764:	0e 94 cf 1a 	call	0x359e	; 0x359e <setpixel>

// Draw a rectangle
void drawrect(uint8_t *buff, uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color) 
{
	// Stupidest version - just pixels - but fast with internal buffer!
	for (uint8_t i=x; i<x+w; i++) 
    3768:	1f 5f       	subi	r17, 0xFF	; 255
    376a:	ed cf       	rjmp	.-38     	; 0x3746 <drawrect+0x26>
    376c:	db 2c       	mov	r13, r11
	{
		setpixel(buff, i, y, color);
		setpixel(buff, i, y+h-1, color);
	}
	for (uint8_t i=y; i<y+h; i++) 
    376e:	10 e0       	ldi	r17, 0x00	; 0
    3770:	0b 0d       	add	r16, r11
    3772:	11 1d       	adc	r17, r1
	{
		setpixel(buff, x, i, color);
		setpixel(buff, x+w-1, i, color);
    3774:	cc 24       	eor	r12, r12
    3776:	ca 94       	dec	r12
    3778:	c9 0c       	add	r12, r9
    377a:	cf 0c       	add	r12, r15
	for (uint8_t i=x; i<x+w; i++) 
	{
		setpixel(buff, i, y, color);
		setpixel(buff, i, y+h-1, color);
	}
	for (uint8_t i=y; i<y+h; i++) 
    377c:	8d 2d       	mov	r24, r13
    377e:	90 e0       	ldi	r25, 0x00	; 0
    3780:	80 17       	cp	r24, r16
    3782:	91 07       	cpc	r25, r17
    3784:	74 f4       	brge	.+28     	; 0x37a2 <drawrect+0x82>
	{
		setpixel(buff, x, i, color);
    3786:	2e 2d       	mov	r18, r14
    3788:	4d 2d       	mov	r20, r13
    378a:	6f 2d       	mov	r22, r15
    378c:	ce 01       	movw	r24, r28
    378e:	0e 94 cf 1a 	call	0x359e	; 0x359e <setpixel>
		setpixel(buff, x+w-1, i, color);
    3792:	2e 2d       	mov	r18, r14
    3794:	4d 2d       	mov	r20, r13
    3796:	6c 2d       	mov	r22, r12
    3798:	ce 01       	movw	r24, r28
    379a:	0e 94 cf 1a 	call	0x359e	; 0x359e <setpixel>
	for (uint8_t i=x; i<x+w; i++) 
	{
		setpixel(buff, i, y, color);
		setpixel(buff, i, y+h-1, color);
	}
	for (uint8_t i=y; i<y+h; i++) 
    379e:	d3 94       	inc	r13
    37a0:	ed cf       	rjmp	.-38     	; 0x377c <drawrect+0x5c>
	{
		setpixel(buff, x, i, color);
		setpixel(buff, x+w-1, i, color);
	} 
}
    37a2:	cd b7       	in	r28, 0x3d	; 61
    37a4:	de b7       	in	r29, 0x3e	; 62
    37a6:	eb e0       	ldi	r30, 0x0B	; 11
    37a8:	0c 94 3e 3d 	jmp	0x7a7c	; 0x7a7c <__epilogue_restores__+0xe>

000037ac <fillcircle>:

// Draw a filled circle
// Edge-clip bug fixed by D. Thompson - 3/2/2014
void fillcircle(uint8_t *buff, uint8_t x0, uint8_t y0, uint8_t r, uint8_t color) 
{
    37ac:	a0 e0       	ldi	r26, 0x00	; 0
    37ae:	b0 e0       	ldi	r27, 0x00	; 0
    37b0:	ec ed       	ldi	r30, 0xDC	; 220
    37b2:	fb e1       	ldi	r31, 0x1B	; 27
    37b4:	0c 94 1d 3d 	jmp	0x7a3a	; 0x7a3a <__prologue_saves__+0x4>
    37b8:	ec 01       	movw	r28, r24
    37ba:	96 2e       	mov	r9, r22
    37bc:	a4 2e       	mov	r10, r20
	int8_t f = 1 - r;
    37be:	bb 24       	eor	r11, r11
    37c0:	b3 94       	inc	r11
    37c2:	b2 1a       	sub	r11, r18
	int8_t ddF_x = 1;
	int8_t ddF_y = -2 * r;
    37c4:	82 2e       	mov	r8, r18
    37c6:	81 94       	neg	r8
    37c8:	88 0c       	add	r8, r8
	int8_t x = 0;
	int8_t y = r;
    37ca:	12 2f       	mov	r17, r18
	int8_t i = 0;

	for (i=y0-r; i<=y0+r; i++) 
    37cc:	74 2e       	mov	r7, r20
    37ce:	72 1a       	sub	r7, r18
    37d0:	e4 2e       	mov	r14, r20
    37d2:	f1 2c       	mov	r15, r1
    37d4:	67 01       	movw	r12, r14
    37d6:	c2 0e       	add	r12, r18
    37d8:	d1 1c       	adc	r13, r1
    37da:	87 2d       	mov	r24, r7
    37dc:	99 27       	eor	r25, r25
    37de:	87 fd       	sbrc	r24, 7
    37e0:	90 95       	com	r25
    37e2:	c8 16       	cp	r12, r24
    37e4:	d9 06       	cpc	r13, r25
    37e6:	44 f0       	brlt	.+16     	; 0x37f8 <fillcircle+0x4c>
	{
		setpixel(buff, x0, i, color);
    37e8:	20 2f       	mov	r18, r16
    37ea:	47 2d       	mov	r20, r7
    37ec:	69 2d       	mov	r22, r9
    37ee:	ce 01       	movw	r24, r28
    37f0:	0e 94 cf 1a 	call	0x359e	; 0x359e <setpixel>
    37f4:	73 94       	inc	r7
    37f6:	f1 cf       	rjmp	.-30     	; 0x37da <fillcircle+0x2e>
	int8_t ddF_y = -2 * r;
	int8_t x = 0;
	int8_t y = r;
	int8_t i = 0;

	for (i=y0-r; i<=y0+r; i++) 
    37f8:	71 2c       	mov	r7, r1
	{
		setpixel(buff, x0, i, color);
	}

	while (x<y) 
    37fa:	71 16       	cp	r7, r17
    37fc:	0c f0       	brlt	.+2      	; 0x3800 <fillcircle+0x54>
    37fe:	4c c0       	rjmp	.+152    	; 0x3898 <fillcircle+0xec>
	{
		if (f >= 0) 
    3800:	b7 fc       	sbrc	r11, 7
    3802:	04 c0       	rjmp	.+8      	; 0x380c <fillcircle+0x60>
		{
			y--;
    3804:	11 50       	subi	r17, 0x01	; 1
			ddF_y += 2;
    3806:	83 94       	inc	r8
    3808:	83 94       	inc	r8
			f += ddF_y;
    380a:	b8 0c       	add	r11, r8
    380c:	73 94       	inc	r7
    380e:	87 2d       	mov	r24, r7
    3810:	88 0f       	add	r24, r24
    3812:	8f 5f       	subi	r24, 0xFF	; 255
		}

		x++;
		ddF_x += 2;
		f += ddF_x;
    3814:	b8 0e       	add	r11, r24

		for (i=y0-y; i<=y0+y; i++) 
    3816:	6a 2c       	mov	r6, r10
    3818:	61 1a       	sub	r6, r17
    381a:	67 01       	movw	r12, r14
    381c:	c1 0e       	add	r12, r17
    381e:	d1 1c       	adc	r13, r1
    3820:	17 fd       	sbrc	r17, 7
    3822:	da 94       	dec	r13
    3824:	47 2c       	mov	r4, r7
    3826:	49 0c       	add	r4, r9
    3828:	59 2c       	mov	r5, r9
    382a:	57 18       	sub	r5, r7
    382c:	86 2d       	mov	r24, r6
    382e:	99 27       	eor	r25, r25
    3830:	87 fd       	sbrc	r24, 7
    3832:	90 95       	com	r25
    3834:	c8 16       	cp	r12, r24
    3836:	d9 06       	cpc	r13, r25
    3838:	74 f0       	brlt	.+28     	; 0x3856 <fillcircle+0xaa>
		{
			setpixel(buff, x0+x, i, color);
    383a:	20 2f       	mov	r18, r16
    383c:	46 2d       	mov	r20, r6
    383e:	64 2d       	mov	r22, r4
    3840:	ce 01       	movw	r24, r28
    3842:	0e 94 cf 1a 	call	0x359e	; 0x359e <setpixel>
			setpixel(buff, x0-x, i, color);
    3846:	20 2f       	mov	r18, r16
    3848:	46 2d       	mov	r20, r6
    384a:	65 2d       	mov	r22, r5
    384c:	ce 01       	movw	r24, r28
    384e:	0e 94 cf 1a 	call	0x359e	; 0x359e <setpixel>
    3852:	63 94       	inc	r6
    3854:	eb cf       	rjmp	.-42     	; 0x382c <fillcircle+0x80>
    3856:	6a 2c       	mov	r6, r10
    3858:	67 18       	sub	r6, r7
		} 
		for (i=y0-x; i<=y0+x; i++) 
    385a:	67 01       	movw	r12, r14
    385c:	c7 0c       	add	r12, r7
    385e:	d1 1c       	adc	r13, r1
    3860:	77 fc       	sbrc	r7, 7
    3862:	da 94       	dec	r13
		{
			setpixel(buff, x0+y, i, color);
    3864:	41 2e       	mov	r4, r17
    3866:	49 0c       	add	r4, r9
			setpixel(buff, x0-y, i, color);
    3868:	59 2c       	mov	r5, r9
    386a:	51 1a       	sub	r5, r17
		for (i=y0-y; i<=y0+y; i++) 
		{
			setpixel(buff, x0+x, i, color);
			setpixel(buff, x0-x, i, color);
		} 
		for (i=y0-x; i<=y0+x; i++) 
    386c:	86 2d       	mov	r24, r6
    386e:	99 27       	eor	r25, r25
    3870:	87 fd       	sbrc	r24, 7
    3872:	90 95       	com	r25
    3874:	c8 16       	cp	r12, r24
    3876:	d9 06       	cpc	r13, r25
    3878:	0c f4       	brge	.+2      	; 0x387c <fillcircle+0xd0>
    387a:	bf cf       	rjmp	.-130    	; 0x37fa <fillcircle+0x4e>
		{
			setpixel(buff, x0+y, i, color);
    387c:	20 2f       	mov	r18, r16
    387e:	46 2d       	mov	r20, r6
    3880:	64 2d       	mov	r22, r4
    3882:	ce 01       	movw	r24, r28
    3884:	0e 94 cf 1a 	call	0x359e	; 0x359e <setpixel>
			setpixel(buff, x0-y, i, color);
    3888:	20 2f       	mov	r18, r16
    388a:	46 2d       	mov	r20, r6
    388c:	65 2d       	mov	r22, r5
    388e:	ce 01       	movw	r24, r28
    3890:	0e 94 cf 1a 	call	0x359e	; 0x359e <setpixel>
    3894:	63 94       	inc	r6
    3896:	ea cf       	rjmp	.-44     	; 0x386c <fillcircle+0xc0>
		}    
	}
}
    3898:	cd b7       	in	r28, 0x3d	; 61
    389a:	de b7       	in	r29, 0x3e	; 62
    389c:	e0 e1       	ldi	r30, 0x10	; 16
    389e:	0c 94 39 3d 	jmp	0x7a72	; 0x7a72 <__epilogue_restores__+0x4>

000038a2 <LCD_Display_Text>:
//************************************************************

// Print Menuitem from Program memory at a particular location
void LCD_Display_Text (uint8_t menuitem, const unsigned char* font,uint16_t x, uint16_t y)
{
	gLCDprint_Menu_P((char*)pgm_read_word(&text_menu[menuitem]), font, x, y);
    38a2:	e8 2f       	mov	r30, r24
    38a4:	f0 e0       	ldi	r31, 0x00	; 0
    38a6:	ee 0f       	add	r30, r30
    38a8:	ff 1f       	adc	r31, r31
    38aa:	e4 5f       	subi	r30, 0xF4	; 244
    38ac:	f1 4f       	sbci	r31, 0xF1	; 241
    38ae:	85 91       	lpm	r24, Z+
    38b0:	94 91       	lpm	r25, Z
}

// Print a string from RAM at a particular location in a particular font
void gLCDprint_Menu_P(const char *s, const unsigned char* font,uint16_t x, uint16_t y)
{
	pgm_mugui_lcd_puts((const unsigned char*)s, font, x, y);
    38b2:	0e 94 c3 33 	call	0x6786	; 0x6786 <pgm_mugui_lcd_puts>
    38b6:	08 95       	ret

000038b8 <gLCDprint_Menu_P>:
    38b8:	0e 94 c3 33 	call	0x6786	; 0x6786 <pgm_mugui_lcd_puts>
    38bc:	08 95       	ret

000038be <idle_screen>:
}

// Pop up the Idle screen
void idle_screen(void)
{
	clear_buffer(buffer);
    38be:	83 e3       	ldi	r24, 0x33	; 51
    38c0:	91 e0       	ldi	r25, 0x01	; 1
    38c2:	0e 94 a8 1a 	call	0x3550	; 0x3550 <clear_buffer>

	// Change Status screen depending on arm mode
	LCD_Display_Text(121,(const unsigned char*)Verdana14,41,3); 	// "Press"
    38c6:	23 e0       	ldi	r18, 0x03	; 3
    38c8:	30 e0       	ldi	r19, 0x00	; 0
    38ca:	49 e2       	ldi	r20, 0x29	; 41
    38cc:	50 e0       	ldi	r21, 0x00	; 0
    38ce:	67 e7       	ldi	r22, 0x77	; 119
    38d0:	71 e0       	ldi	r23, 0x01	; 1
    38d2:	89 e7       	ldi	r24, 0x79	; 121
    38d4:	0e 94 51 1c 	call	0x38a2	; 0x38a2 <LCD_Display_Text>
	LCD_Display_Text(122,(const unsigned char*)Verdana14,24,23); // "for status."
    38d8:	27 e1       	ldi	r18, 0x17	; 23
    38da:	30 e0       	ldi	r19, 0x00	; 0
    38dc:	48 e1       	ldi	r20, 0x18	; 24
    38de:	50 e0       	ldi	r21, 0x00	; 0
    38e0:	67 e7       	ldi	r22, 0x77	; 119
    38e2:	71 e0       	ldi	r23, 0x01	; 1
    38e4:	8a e7       	ldi	r24, 0x7A	; 122
    38e6:	0e 94 51 1c 	call	0x38a2	; 0x38a2 <LCD_Display_Text>

	if ((General_error & (1 << DISARMED)) != 0) // Disarmed
    38ea:	80 91 0e 01 	lds	r24, 0x010E
	{
		LCD_Display_Text(139,(const unsigned char*)Verdana14,20,43); // "(Disarmed)"
    38ee:	2b e2       	ldi	r18, 0x2B	; 43
    38f0:	30 e0       	ldi	r19, 0x00	; 0

	// Change Status screen depending on arm mode
	LCD_Display_Text(121,(const unsigned char*)Verdana14,41,3); 	// "Press"
	LCD_Display_Text(122,(const unsigned char*)Verdana14,24,23); // "for status."

	if ((General_error & (1 << DISARMED)) != 0) // Disarmed
    38f2:	84 ff       	sbrs	r24, 4
    38f4:	06 c0       	rjmp	.+12     	; 0x3902 <idle_screen+0x44>
	{
		LCD_Display_Text(139,(const unsigned char*)Verdana14,20,43); // "(Disarmed)"
    38f6:	44 e1       	ldi	r20, 0x14	; 20
    38f8:	50 e0       	ldi	r21, 0x00	; 0
    38fa:	67 e7       	ldi	r22, 0x77	; 119
    38fc:	71 e0       	ldi	r23, 0x01	; 1
    38fe:	8b e8       	ldi	r24, 0x8B	; 139
    3900:	05 c0       	rjmp	.+10     	; 0x390c <idle_screen+0x4e>
	}
	else
	{
		LCD_Display_Text(138,(const unsigned char*)Verdana14,28,43); // "(Armed)"
    3902:	4c e1       	ldi	r20, 0x1C	; 28
    3904:	50 e0       	ldi	r21, 0x00	; 0
    3906:	67 e7       	ldi	r22, 0x77	; 119
    3908:	71 e0       	ldi	r23, 0x01	; 1
    390a:	8a e8       	ldi	r24, 0x8A	; 138
    390c:	0e 94 51 1c 	call	0x38a2	; 0x38a2 <LCD_Display_Text>
	}
	
	write_buffer(buffer,1);
    3910:	61 e0       	ldi	r22, 0x01	; 1
    3912:	83 e3       	ldi	r24, 0x33	; 51
    3914:	91 e0       	ldi	r25, 0x01	; 1
    3916:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <write_buffer>
    391a:	08 95       	ret

0000391c <get_raw_gyros>:
		gyroADC[i] *= (int8_t)pgm_read_byte(&Gyro_Pol[Config.Orientation][i]);
	}
}

void get_raw_gyros(void)
{
    391c:	a6 e0       	ldi	r26, 0x06	; 6
    391e:	b0 e0       	ldi	r27, 0x00	; 0
    3920:	e4 e9       	ldi	r30, 0x94	; 148
    3922:	fc e1       	ldi	r31, 0x1C	; 28
    3924:	0c 94 2b 3d 	jmp	0x7a56	; 0x7a56 <__prologue_saves__+0x20>
	temp1 = Gyros[4] << 8;
	temp2 = Gyros[5];
	RawADC[YAW] = (temp1 + temp2) >> 6;

#else
	read_adc(AIN_Y_GYRO);				// Read roll gyro ADC1 (Roll)
    3928:	81 e0       	ldi	r24, 0x01	; 1
    392a:	0e 94 48 10 	call	0x2090	; 0x2090 <read_adc>
	RawADC[ROLL] = ADCW;
    392e:	80 91 78 00 	lds	r24, 0x0078
    3932:	90 91 79 00 	lds	r25, 0x0079
    3936:	9a 83       	std	Y+2, r25	; 0x02
    3938:	89 83       	std	Y+1, r24	; 0x01

	read_adc(AIN_X_GYRO);				// Read pitch gyro ADC4 (Pitch)
    393a:	84 e0       	ldi	r24, 0x04	; 4
    393c:	0e 94 48 10 	call	0x2090	; 0x2090 <read_adc>
	RawADC[PITCH] = ADCW;
    3940:	80 91 78 00 	lds	r24, 0x0078
    3944:	90 91 79 00 	lds	r25, 0x0079
    3948:	9c 83       	std	Y+4, r25	; 0x04
    394a:	8b 83       	std	Y+3, r24	; 0x03

	read_adc(AIN_Z_GYRO);				// Read yaw gyro ADC2 (Yaw)
    394c:	82 e0       	ldi	r24, 0x02	; 2
    394e:	0e 94 48 10 	call	0x2090	; 0x2090 <read_adc>
	RawADC[YAW] = ADCW;
    3952:	80 91 78 00 	lds	r24, 0x0078
    3956:	90 91 79 00 	lds	r25, 0x0079
    395a:	9e 83       	std	Y+6, r25	; 0x06
    395c:	8d 83       	std	Y+5, r24	; 0x05

	// Reorient the data as per the board orientation	
	for (i=0; i<NUMBEROFAXIS; i++)
	{
		// Rearrange the sensors
		gyroADC[i] 	= RawADC[(int8_t)pgm_read_byte(&Gyro_RPY_Order[Config.Orientation][i])];
    395e:	20 91 07 06 	lds	r18, 0x0607
    3962:	a0 e6       	ldi	r26, 0x60	; 96
    3964:	b5 e0       	ldi	r27, 0x05	; 5
    3966:	43 e0       	ldi	r20, 0x03	; 3
    3968:	24 02       	muls	r18, r20
    396a:	90 01       	movw	r18, r0
    396c:	11 24       	eor	r1, r1
    396e:	80 e0       	ldi	r24, 0x00	; 0
    3970:	90 e0       	ldi	r25, 0x00	; 0
    3972:	2d 5e       	subi	r18, 0xED	; 237
    3974:	38 4e       	sbci	r19, 0xE8	; 232
    3976:	f9 01       	movw	r30, r18
    3978:	e8 0f       	add	r30, r24
    397a:	f9 1f       	adc	r31, r25
    397c:	e4 91       	lpm	r30, Z
    397e:	ee 0f       	add	r30, r30
    3980:	ff 0b       	sbc	r31, r31
    3982:	41 e0       	ldi	r20, 0x01	; 1
    3984:	50 e0       	ldi	r21, 0x00	; 0
    3986:	4c 0f       	add	r20, r28
    3988:	5d 1f       	adc	r21, r29
    398a:	e4 0f       	add	r30, r20
    398c:	f5 1f       	adc	r31, r21
    398e:	40 81       	ld	r20, Z
    3990:	51 81       	ldd	r21, Z+1	; 0x01
    3992:	4d 93       	st	X+, r20
    3994:	5d 93       	st	X+, r21
    3996:	01 96       	adiw	r24, 0x01	; 1
	read_adc(AIN_Z_GYRO);				// Read yaw gyro ADC2 (Yaw)
	RawADC[YAW] = ADCW;
#endif

	// Reorient the data as per the board orientation	
	for (i=0; i<NUMBEROFAXIS; i++)
    3998:	83 30       	cpi	r24, 0x03	; 3
    399a:	91 05       	cpc	r25, r1
    399c:	61 f7       	brne	.-40     	; 0x3976 <get_raw_gyros+0x5a>
	{
		// Rearrange the sensors
		gyroADC[i] 	= RawADC[(int8_t)pgm_read_byte(&Gyro_RPY_Order[Config.Orientation][i])];
	}
}
    399e:	26 96       	adiw	r28, 0x06	; 6
    39a0:	e2 e0       	ldi	r30, 0x02	; 2
    39a2:	0c 94 47 3d 	jmp	0x7a8e	; 0x7a8e <__epilogue_restores__+0x20>

000039a6 <ReadGyros>:
//************************************************************

int16_t gyroADC[NUMBEROFAXIS];			// Holds Gyro ADCs

void ReadGyros(void)					// Conventional orientation
{
    39a6:	1f 93       	push	r17
    39a8:	cf 93       	push	r28
    39aa:	df 93       	push	r29
	uint8_t i;

	get_raw_gyros();					// Updates gyroADC[]
    39ac:	0e 94 8e 1c 	call	0x391c	; 0x391c <get_raw_gyros>
	{
		// Remove offsets from gyro outputs
		gyroADC[i] -= Config.gyroZero[i];

		// Change polarity
		gyroADC[i] *= (int8_t)pgm_read_byte(&Gyro_Pol[Config.Orientation][i]);
    39b0:	20 91 07 06 	lds	r18, 0x0607
    39b4:	cb e2       	ldi	r28, 0x2B	; 43
    39b6:	d7 e0       	ldi	r29, 0x07	; 7
    39b8:	a0 e6       	ldi	r26, 0x60	; 96
    39ba:	b5 e0       	ldi	r27, 0x05	; 5
    39bc:	83 e0       	ldi	r24, 0x03	; 3
    39be:	28 02       	muls	r18, r24
    39c0:	90 01       	movw	r18, r0
    39c2:	11 24       	eor	r1, r1
    39c4:	80 e0       	ldi	r24, 0x00	; 0
    39c6:	90 e0       	ldi	r25, 0x00	; 0
    39c8:	2f 5f       	subi	r18, 0xFF	; 255
    39ca:	38 4e       	sbci	r19, 0xE8	; 232
	get_raw_gyros();					// Updates gyroADC[]

	for (i=0; i<NUMBEROFAXIS; i++)	
	{
		// Remove offsets from gyro outputs
		gyroADC[i] -= Config.gyroZero[i];
    39cc:	69 91       	ld	r22, Y+
    39ce:	79 91       	ld	r23, Y+
    39d0:	f9 01       	movw	r30, r18
    39d2:	e8 0f       	add	r30, r24
    39d4:	f9 1f       	adc	r31, r25

		// Change polarity
		gyroADC[i] *= (int8_t)pgm_read_byte(&Gyro_Pol[Config.Orientation][i]);
    39d6:	14 91       	lpm	r17, Z
	get_raw_gyros();					// Updates gyroADC[]

	for (i=0; i<NUMBEROFAXIS; i++)	
	{
		// Remove offsets from gyro outputs
		gyroADC[i] -= Config.gyroZero[i];
    39d8:	4d 91       	ld	r20, X+
    39da:	5c 91       	ld	r21, X
    39dc:	11 97       	sbiw	r26, 0x01	; 1
    39de:	46 1b       	sub	r20, r22
    39e0:	57 0b       	sbc	r21, r23

		// Change polarity
		gyroADC[i] *= (int8_t)pgm_read_byte(&Gyro_Pol[Config.Orientation][i]);
    39e2:	14 03       	mulsu	r17, r20
    39e4:	b0 01       	movw	r22, r0
    39e6:	15 9f       	mul	r17, r21
    39e8:	70 0d       	add	r23, r0
    39ea:	11 24       	eor	r1, r1
    39ec:	6d 93       	st	X+, r22
    39ee:	7d 93       	st	X+, r23
    39f0:	01 96       	adiw	r24, 0x01	; 1
{
	uint8_t i;

	get_raw_gyros();					// Updates gyroADC[]

	for (i=0; i<NUMBEROFAXIS; i++)	
    39f2:	83 30       	cpi	r24, 0x03	; 3
    39f4:	91 05       	cpc	r25, r1
    39f6:	51 f7       	brne	.-44     	; 0x39cc <ReadGyros+0x26>
		gyroADC[i] -= Config.gyroZero[i];

		// Change polarity
		gyroADC[i] *= (int8_t)pgm_read_byte(&Gyro_Pol[Config.Orientation][i]);
	}
}
    39f8:	df 91       	pop	r29
    39fa:	cf 91       	pop	r28
    39fc:	1f 91       	pop	r17
    39fe:	08 95       	ret

00003a00 <CalibrateGyrosFast>:
//***************************************************************
// Calibration routines
//***************************************************************

void CalibrateGyrosFast(void)
{
    3a00:	cf 93       	push	r28
	uint8_t i;

	// Clear gyro zeros
	memset(&Config.gyroZero[ROLL],0,(sizeof(int16_t) * NUMBEROFAXIS));
    3a02:	86 e0       	ldi	r24, 0x06	; 6
    3a04:	eb e2       	ldi	r30, 0x2B	; 43
    3a06:	f7 e0       	ldi	r31, 0x07	; 7
    3a08:	df 01       	movw	r26, r30
    3a0a:	1d 92       	st	X+, r1
    3a0c:	8a 95       	dec	r24
    3a0e:	e9 f7       	brne	.-6      	; 0x3a0a <CalibrateGyrosFast+0xa>
    3a10:	c0 e2       	ldi	r28, 0x20	; 32

	for (i=0; i<32; i++)				// Calculate average over 32 reads
	{
		get_raw_gyros();				// Updates gyroADC[]
    3a12:	0e 94 8e 1c 	call	0x391c	; 0x391c <get_raw_gyros>

		Config.gyroZero[ROLL] 	+= gyroADC[ROLL];						
    3a16:	80 91 2b 07 	lds	r24, 0x072B
    3a1a:	90 91 2c 07 	lds	r25, 0x072C
    3a1e:	20 91 60 05 	lds	r18, 0x0560
    3a22:	30 91 61 05 	lds	r19, 0x0561
    3a26:	82 0f       	add	r24, r18
    3a28:	93 1f       	adc	r25, r19
    3a2a:	90 93 2c 07 	sts	0x072C, r25
    3a2e:	80 93 2b 07 	sts	0x072B, r24
		Config.gyroZero[PITCH] 	+= gyroADC[PITCH];	
    3a32:	80 91 2d 07 	lds	r24, 0x072D
    3a36:	90 91 2e 07 	lds	r25, 0x072E
    3a3a:	20 91 62 05 	lds	r18, 0x0562
    3a3e:	30 91 63 05 	lds	r19, 0x0563
    3a42:	82 0f       	add	r24, r18
    3a44:	93 1f       	adc	r25, r19
    3a46:	90 93 2e 07 	sts	0x072E, r25
    3a4a:	80 93 2d 07 	sts	0x072D, r24
		Config.gyroZero[YAW] 	+= gyroADC[YAW];
    3a4e:	80 91 2f 07 	lds	r24, 0x072F
    3a52:	90 91 30 07 	lds	r25, 0x0730
    3a56:	20 91 64 05 	lds	r18, 0x0564
    3a5a:	30 91 65 05 	lds	r19, 0x0565
    3a5e:	82 0f       	add	r24, r18
    3a60:	93 1f       	adc	r25, r19
    3a62:	90 93 30 07 	sts	0x0730, r25
    3a66:	80 93 2f 07 	sts	0x072F, r24
    3a6a:	8f e4       	ldi	r24, 0x4F	; 79
    3a6c:	93 ec       	ldi	r25, 0xC3	; 195
    3a6e:	01 97       	sbiw	r24, 0x01	; 1
    3a70:	f1 f7       	brne	.-4      	; 0x3a6e <CalibrateGyrosFast+0x6e>
    3a72:	00 c0       	rjmp	.+0      	; 0x3a74 <CalibrateGyrosFast+0x74>
    3a74:	00 00       	nop
    3a76:	c1 50       	subi	r28, 0x01	; 1
	uint8_t i;

	// Clear gyro zeros
	memset(&Config.gyroZero[ROLL],0,(sizeof(int16_t) * NUMBEROFAXIS));

	for (i=0; i<32; i++)				// Calculate average over 32 reads
    3a78:	61 f6       	brne	.-104    	; 0x3a12 <CalibrateGyrosFast+0x12>
		_delay_ms(10);					// Get a better gyro average over time
	}

	for (i=0; i<NUMBEROFAXIS; i++)		// Average readings for all axis
	{
		Config.gyroZero[i] 	= (Config.gyroZero[i] >> 5);	// Divide by 32	
    3a7a:	80 91 2b 07 	lds	r24, 0x072B
    3a7e:	90 91 2c 07 	lds	r25, 0x072C
    3a82:	25 e0       	ldi	r18, 0x05	; 5
    3a84:	95 95       	asr	r25
    3a86:	87 95       	ror	r24
    3a88:	2a 95       	dec	r18
    3a8a:	e1 f7       	brne	.-8      	; 0x3a84 <CalibrateGyrosFast+0x84>
    3a8c:	90 93 2c 07 	sts	0x072C, r25
    3a90:	80 93 2b 07 	sts	0x072B, r24
    3a94:	80 91 2d 07 	lds	r24, 0x072D
    3a98:	90 91 2e 07 	lds	r25, 0x072E
    3a9c:	35 e0       	ldi	r19, 0x05	; 5
    3a9e:	95 95       	asr	r25
    3aa0:	87 95       	ror	r24
    3aa2:	3a 95       	dec	r19
    3aa4:	e1 f7       	brne	.-8      	; 0x3a9e <CalibrateGyrosFast+0x9e>
    3aa6:	90 93 2e 07 	sts	0x072E, r25
    3aaa:	80 93 2d 07 	sts	0x072D, r24
    3aae:	80 91 2f 07 	lds	r24, 0x072F
    3ab2:	90 91 30 07 	lds	r25, 0x0730
    3ab6:	45 e0       	ldi	r20, 0x05	; 5
    3ab8:	95 95       	asr	r25
    3aba:	87 95       	ror	r24
    3abc:	4a 95       	dec	r20
    3abe:	e1 f7       	brne	.-8      	; 0x3ab8 <CalibrateGyrosFast+0xb8>
    3ac0:	90 93 30 07 	sts	0x0730, r25
    3ac4:	80 93 2f 07 	sts	0x072F, r24
	}
}
    3ac8:	cf 91       	pop	r28
    3aca:	08 95       	ret

00003acc <CalibrateGyrosSlow>:

void CalibrateGyrosSlow(void)
{
    3acc:	ac e0       	ldi	r26, 0x0C	; 12
    3ace:	b0 e0       	ldi	r27, 0x00	; 0
    3ad0:	ec e6       	ldi	r30, 0x6C	; 108
    3ad2:	fd e1       	ldi	r31, 0x1D	; 29
    3ad4:	0c 94 1b 3d 	jmp	0x7a36	; 0x7a36 <__prologue_saves__>
	{
// Optimise starting point for each board
#ifdef KK21
		GyroSmooth[axis] = 0;
#else
		GyroSmooth[axis] = 500;
    3ad8:	80 e0       	ldi	r24, 0x00	; 0
    3ada:	90 e0       	ldi	r25, 0x00	; 0
    3adc:	aa ef       	ldi	r26, 0xFA	; 250
    3ade:	b3 e4       	ldi	r27, 0x43	; 67
    3ae0:	89 83       	std	Y+1, r24	; 0x01
    3ae2:	9a 83       	std	Y+2, r25	; 0x02
    3ae4:	ab 83       	std	Y+3, r26	; 0x03
    3ae6:	bc 83       	std	Y+4, r27	; 0x04
    3ae8:	8d 83       	std	Y+5, r24	; 0x05
    3aea:	9e 83       	std	Y+6, r25	; 0x06
    3aec:	af 83       	std	Y+7, r26	; 0x07
    3aee:	b8 87       	std	Y+8, r27	; 0x08
    3af0:	89 87       	std	Y+9, r24	; 0x09
    3af2:	9a 87       	std	Y+10, r25	; 0x0a
    3af4:	ab 87       	std	Y+11, r26	; 0x0b
    3af6:	bc 87       	std	Y+12, r27	; 0x0c
    3af8:	00 e0       	ldi	r16, 0x00	; 0
    3afa:	10 e0       	ldi	r17, 0x00	; 0
    3afc:	21 2c       	mov	r2, r1
    3afe:	31 2c       	mov	r3, r1
#endif
	}

	// Wait until gyros stable. Timeout after 5 seconds
	while (!Gyros_Stable && (Gyro_seconds <= 5))
    3b00:	85 e0       	ldi	r24, 0x05	; 5
    3b02:	83 15       	cp	r24, r3
    3b04:	08 f4       	brcc	.+2      	; 0x3b08 <CalibrateGyrosSlow+0x3c>
    3b06:	6e c0       	rjmp	.+220    	; 0x3be4 <CalibrateGyrosSlow+0x118>
	{
		// Update status timeout
		Gyro_timeout += (uint8_t) (TCNT2 - Gyro_TCNT2);
    3b08:	80 91 b2 00 	lds	r24, 0x00B2
    3b0c:	82 19       	sub	r24, r2
    3b0e:	08 0f       	add	r16, r24
    3b10:	11 1d       	adc	r17, r1
		Gyro_TCNT2 = TCNT2;
    3b12:	20 90 b2 00 	lds	r2, 0x00B2

		// Count elapsed seconds
		if (Gyro_timeout > SECOND_TIMER)
    3b16:	0c 34       	cpi	r16, 0x4C	; 76
    3b18:	2c e4       	ldi	r18, 0x4C	; 76
    3b1a:	12 07       	cpc	r17, r18
    3b1c:	18 f0       	brcs	.+6      	; 0x3b24 <CalibrateGyrosSlow+0x58>
		{
			Gyro_seconds++;
    3b1e:	33 94       	inc	r3
			Gyro_timeout = 0;
    3b20:	00 e0       	ldi	r16, 0x00	; 0
    3b22:	10 e0       	ldi	r17, 0x00	; 0
		}

		get_raw_gyros();
    3b24:	0e 94 8e 1c 	call	0x391c	; 0x391c <get_raw_gyros>
    3b28:	50 e6       	ldi	r21, 0x60	; 96
    3b2a:	e5 2e       	mov	r14, r21
    3b2c:	55 e0       	ldi	r21, 0x05	; 5
    3b2e:	f5 2e       	mov	r15, r21
    3b30:	ce 01       	movw	r24, r28
    3b32:	01 96       	adiw	r24, 0x01	; 1
    3b34:	6c 01       	movw	r12, r24
    3b36:	6b e2       	ldi	r22, 0x2B	; 43
    3b38:	a6 2e       	mov	r10, r22
    3b3a:	67 e0       	ldi	r22, 0x07	; 7
    3b3c:	b6 2e       	mov	r11, r22

		// Calculate very long rolling average
		for (axis = 0; axis < NUMBEROFAXIS; axis++) 
		{
			GyroSmooth[axis] = ((GyroSmooth[axis] * (float)999) + (float)(gyroADC[axis])) / (float)1000;
    3b3e:	f7 01       	movw	r30, r14
    3b40:	81 90       	ld	r8, Z+
    3b42:	91 90       	ld	r9, Z+
    3b44:	7f 01       	movw	r14, r30
    3b46:	20 e0       	ldi	r18, 0x00	; 0
    3b48:	30 ec       	ldi	r19, 0xC0	; 192
    3b4a:	49 e7       	ldi	r20, 0x79	; 121
    3b4c:	54 e4       	ldi	r21, 0x44	; 68
    3b4e:	f6 01       	movw	r30, r12
    3b50:	60 81       	ld	r22, Z
    3b52:	71 81       	ldd	r23, Z+1	; 0x01
    3b54:	82 81       	ldd	r24, Z+2	; 0x02
    3b56:	93 81       	ldd	r25, Z+3	; 0x03
    3b58:	0e 94 be 3b 	call	0x777c	; 0x777c <__mulsf3>
    3b5c:	2b 01       	movw	r4, r22
    3b5e:	3c 01       	movw	r6, r24
    3b60:	b4 01       	movw	r22, r8
    3b62:	88 27       	eor	r24, r24
    3b64:	77 fd       	sbrc	r23, 7
    3b66:	80 95       	com	r24
    3b68:	98 2f       	mov	r25, r24
    3b6a:	0e 94 de 3a 	call	0x75bc	; 0x75bc <__floatsisf>
    3b6e:	9b 01       	movw	r18, r22
    3b70:	ac 01       	movw	r20, r24
    3b72:	c3 01       	movw	r24, r6
    3b74:	b2 01       	movw	r22, r4
    3b76:	0e 94 b3 39 	call	0x7366	; 0x7366 <__addsf3>
    3b7a:	20 e0       	ldi	r18, 0x00	; 0
    3b7c:	30 e0       	ldi	r19, 0x00	; 0
    3b7e:	4a e7       	ldi	r20, 0x7A	; 122
    3b80:	54 e4       	ldi	r21, 0x44	; 68
    3b82:	0e 94 43 3a 	call	0x7486	; 0x7486 <__divsf3>
    3b86:	f6 01       	movw	r30, r12
    3b88:	61 93       	st	Z+, r22
    3b8a:	71 93       	st	Z+, r23
    3b8c:	81 93       	st	Z+, r24
    3b8e:	91 93       	st	Z+, r25
    3b90:	6f 01       	movw	r12, r30
			Config.gyroZero[axis] = (int16_t)GyroSmooth[axis];
    3b92:	0e 94 ab 3a 	call	0x7556	; 0x7556 <__fixsfsi>
    3b96:	f5 01       	movw	r30, r10
    3b98:	61 93       	st	Z+, r22
    3b9a:	71 93       	st	Z+, r23
    3b9c:	5f 01       	movw	r10, r30
		}

		get_raw_gyros();

		// Calculate very long rolling average
		for (axis = 0; axis < NUMBEROFAXIS; axis++) 
    3b9e:	f6 e6       	ldi	r31, 0x66	; 102
    3ba0:	ef 16       	cp	r14, r31
    3ba2:	f5 e0       	ldi	r31, 0x05	; 5
    3ba4:	ff 06       	cpc	r15, r31
    3ba6:	59 f6       	brne	.-106    	; 0x3b3e <CalibrateGyrosSlow+0x72>
			GyroSmooth[axis] = ((GyroSmooth[axis] * (float)999) + (float)(gyroADC[axis])) / (float)1000;
			Config.gyroZero[axis] = (int16_t)GyroSmooth[axis];
		}

		// Check for movement
		ReadGyros();
    3ba8:	0e 94 d3 1c 	call	0x39a6	; 0x39a6 <ReadGyros>

		if ((gyroADC[ROLL] > GYROS_STABLE) || (gyroADC[ROLL] < -GYROS_STABLE) ||
    3bac:	80 91 60 05 	lds	r24, 0x0560
    3bb0:	90 91 61 05 	lds	r25, 0x0561
    3bb4:	01 96       	adiw	r24, 0x01	; 1
    3bb6:	03 97       	sbiw	r24, 0x03	; 3
    3bb8:	08 f0       	brcs	.+2      	; 0x3bbc <CalibrateGyrosSlow+0xf0>
    3bba:	a2 cf       	rjmp	.-188    	; 0x3b00 <CalibrateGyrosSlow+0x34>
    3bbc:	80 91 62 05 	lds	r24, 0x0562
    3bc0:	90 91 63 05 	lds	r25, 0x0563
    3bc4:	01 96       	adiw	r24, 0x01	; 1
    3bc6:	03 97       	sbiw	r24, 0x03	; 3
    3bc8:	08 f0       	brcs	.+2      	; 0x3bcc <CalibrateGyrosSlow+0x100>
    3bca:	9a cf       	rjmp	.-204    	; 0x3b00 <CalibrateGyrosSlow+0x34>
			(gyroADC[PITCH] > GYROS_STABLE) || (gyroADC[PITCH] < -GYROS_STABLE) ||
			(gyroADC[YAW] > GYROS_STABLE) || (gyroADC[YAW] < -GYROS_STABLE))
    3bcc:	80 91 64 05 	lds	r24, 0x0564
    3bd0:	90 91 65 05 	lds	r25, 0x0565

		// Check for movement
		ReadGyros();

		if ((gyroADC[ROLL] > GYROS_STABLE) || (gyroADC[ROLL] < -GYROS_STABLE) ||
			(gyroADC[PITCH] > GYROS_STABLE) || (gyroADC[PITCH] < -GYROS_STABLE) ||
    3bd4:	82 30       	cpi	r24, 0x02	; 2
    3bd6:	91 05       	cpc	r25, r1
    3bd8:	0c f0       	brlt	.+2      	; 0x3bdc <CalibrateGyrosSlow+0x110>
    3bda:	92 cf       	rjmp	.-220    	; 0x3b00 <CalibrateGyrosSlow+0x34>
			(gyroADC[YAW] > GYROS_STABLE) || (gyroADC[YAW] < -GYROS_STABLE))
    3bdc:	8f 3f       	cpi	r24, 0xFF	; 255
    3bde:	9f 4f       	sbci	r25, 0xFF	; 255
    3be0:	0c f4       	brge	.+2      	; 0x3be4 <CalibrateGyrosSlow+0x118>
    3be2:	8e cf       	rjmp	.-228    	; 0x3b00 <CalibrateGyrosSlow+0x34>
		else
		{
			Gyros_Stable = true;
		}
	}
}
    3be4:	2c 96       	adiw	r28, 0x0c	; 12
    3be6:	e2 e1       	ldi	r30, 0x12	; 18
    3be8:	0c 94 37 3d 	jmp	0x7a6e	; 0x7a6e <__epilogue_restores__>

00003bec <getEstimatedAttitude>:
float	INV_GYR_CMPF_FACTOR;
float 	accSmooth[NUMBEROFAXIS];
int16_t	angle[2]; 			// Attitude

void getEstimatedAttitude(uint16_t period)
{
    3bec:	aa e0       	ldi	r26, 0x0A	; 10
    3bee:	b0 e0       	ldi	r27, 0x00	; 0
    3bf0:	ec ef       	ldi	r30, 0xFC	; 252
    3bf2:	fd e1       	ldi	r31, 0x1D	; 29
    3bf4:	0c 94 1b 3d 	jmp	0x7a36	; 0x7a36 <__prologue_saves__>
    3bf8:	bc 01       	movw	r22, r24
	int16_t		roll_sq, pitch_sq, yaw_sq;
	uint8_t		axis;
	uint16_t	AccMag = 0;

	// Reset IMU 
	if (Config.Main_flags & (1 << FirstTimeIMU))
    3bfa:	80 91 3c 07 	lds	r24, 0x073C
    3bfe:	82 ff       	sbrs	r24, 2
    3c00:	37 c0       	rjmp	.+110    	; 0x3c70 <getEstimatedAttitude+0x84>
	{
		deltaTime = 0.0f;
		Config.Main_flags &= ~(1 << FirstTimeIMU);
    3c02:	8b 7f       	andi	r24, 0xFB	; 251
    3c04:	80 93 3c 07 	sts	0x073C, r24
		
		// Reset accumulating variables
		for (axis = 0; axis < NUMBEROFAXIS; axis++) 
		{	
			accSmooth[axis] = 0;
    3c08:	10 92 6e 05 	sts	0x056E, r1
    3c0c:	10 92 6f 05 	sts	0x056F, r1
    3c10:	10 92 70 05 	sts	0x0570, r1
    3c14:	10 92 71 05 	sts	0x0571, r1
			deltaGyroAngle[axis] = 0;
    3c18:	10 92 12 01 	sts	0x0112, r1
    3c1c:	10 92 13 01 	sts	0x0113, r1
    3c20:	10 92 14 01 	sts	0x0114, r1
    3c24:	10 92 15 01 	sts	0x0115, r1
		Config.Main_flags &= ~(1 << FirstTimeIMU);
		
		// Reset accumulating variables
		for (axis = 0; axis < NUMBEROFAXIS; axis++) 
		{	
			accSmooth[axis] = 0;
    3c28:	10 92 72 05 	sts	0x0572, r1
    3c2c:	10 92 73 05 	sts	0x0573, r1
    3c30:	10 92 74 05 	sts	0x0574, r1
    3c34:	10 92 75 05 	sts	0x0575, r1
			deltaGyroAngle[axis] = 0;
    3c38:	10 92 16 01 	sts	0x0116, r1
    3c3c:	10 92 17 01 	sts	0x0117, r1
    3c40:	10 92 18 01 	sts	0x0118, r1
    3c44:	10 92 19 01 	sts	0x0119, r1
		Config.Main_flags &= ~(1 << FirstTimeIMU);
		
		// Reset accumulating variables
		for (axis = 0; axis < NUMBEROFAXIS; axis++) 
		{	
			accSmooth[axis] = 0;
    3c48:	10 92 76 05 	sts	0x0576, r1
    3c4c:	10 92 77 05 	sts	0x0577, r1
    3c50:	10 92 78 05 	sts	0x0578, r1
    3c54:	10 92 79 05 	sts	0x0579, r1
			deltaGyroAngle[axis] = 0;
    3c58:	10 92 1a 01 	sts	0x011A, r1
    3c5c:	10 92 1b 01 	sts	0x011B, r1
    3c60:	10 92 1c 01 	sts	0x011C, r1
    3c64:	10 92 1d 01 	sts	0x011D, r1
	uint16_t	AccMag = 0;

	// Reset IMU 
	if (Config.Main_flags & (1 << FirstTimeIMU))
	{
		deltaTime = 0.0f;
    3c68:	c1 2c       	mov	r12, r1
    3c6a:	d1 2c       	mov	r13, r1
    3c6c:	76 01       	movw	r14, r12
    3c6e:	0c c0       	rjmp	.+24     	; 0x3c88 <getEstimatedAttitude+0x9c>
		}
	}
	// Scale gyro signal to angle
	else
	{
		tempf = (float)period;
    3c70:	80 e0       	ldi	r24, 0x00	; 0
    3c72:	90 e0       	ldi	r25, 0x00	; 0
    3c74:	0e 94 dc 3a 	call	0x75b8	; 0x75b8 <__floatunsisf>
		deltaTime = tempf * GYRO_SCALE;	
    3c78:	2d eb       	ldi	r18, 0xBD	; 189
    3c7a:	37 e3       	ldi	r19, 0x37	; 55
    3c7c:	46 e8       	ldi	r20, 0x86	; 134
    3c7e:	55 e3       	ldi	r21, 0x35	; 53
    3c80:	0e 94 be 3b 	call	0x777c	; 0x777c <__mulsf3>
    3c84:	6b 01       	movw	r12, r22
    3c86:	7c 01       	movw	r14, r24

	// Smooth Acc signals and estimate angle from gyro
	for (axis = 0; axis < NUMBEROFAXIS; axis++) 
	{
		// Acc LPF
		if (Config.Acc_LPF > 1)
    3c88:	20 91 0d 06 	lds	r18, 0x060D
    3c8c:	29 83       	std	Y+1, r18	; 0x01
		{
			// Acc LPF
			accSmooth[axis] = ((accSmooth[axis] * (float)(Config.Acc_LPF - 1)) - (float)(accADC[axis])) / Config.Acc_LPF;
    3c8e:	82 2f       	mov	r24, r18
    3c90:	99 27       	eor	r25, r25
    3c92:	87 fd       	sbrc	r24, 7
    3c94:	90 95       	com	r25
    3c96:	01 97       	sbiw	r24, 0x01	; 1
    3c98:	20 e6       	ldi	r18, 0x60	; 96
    3c9a:	22 2e       	mov	r2, r18
    3c9c:	25 e0       	ldi	r18, 0x05	; 5
    3c9e:	32 2e       	mov	r3, r18
    3ca0:	42 e1       	ldi	r20, 0x12	; 18
    3ca2:	51 e0       	ldi	r21, 0x01	; 1
    3ca4:	5c 83       	std	Y+4, r21	; 0x04
    3ca6:	4b 83       	std	Y+3, r20	; 0x03
    3ca8:	ee e6       	ldi	r30, 0x6E	; 110
    3caa:	f5 e0       	ldi	r31, 0x05	; 5
    3cac:	fa 87       	std	Y+10, r31	; 0x0a
    3cae:	e9 87       	std	Y+9, r30	; 0x09
    3cb0:	0d e2       	ldi	r16, 0x2D	; 45
    3cb2:	11 e0       	ldi	r17, 0x01	; 1
    3cb4:	9c 01       	movw	r18, r24
    3cb6:	44 27       	eor	r20, r20
    3cb8:	37 fd       	sbrc	r19, 7
    3cba:	40 95       	com	r20
    3cbc:	54 2f       	mov	r21, r20
    3cbe:	2d 83       	std	Y+5, r18	; 0x05
    3cc0:	3e 83       	std	Y+6, r19	; 0x06
    3cc2:	4f 83       	std	Y+7, r20	; 0x07
    3cc4:	58 87       	std	Y+8, r21	; 0x08
    3cc6:	39 81       	ldd	r19, Y+1	; 0x01
    3cc8:	43 2e       	mov	r4, r19
    3cca:	55 24       	eor	r5, r5
    3ccc:	47 fc       	sbrc	r4, 7
    3cce:	50 94       	com	r5
    3cd0:	65 2c       	mov	r6, r5
    3cd2:	75 2c       	mov	r7, r5

	// Smooth Acc signals and estimate angle from gyro
	for (axis = 0; axis < NUMBEROFAXIS; axis++) 
	{
		// Acc LPF
		if (Config.Acc_LPF > 1)
    3cd4:	49 81       	ldd	r20, Y+1	; 0x01
    3cd6:	42 30       	cpi	r20, 0x02	; 2
    3cd8:	64 f1       	brlt	.+88     	; 0x3d32 <getEstimatedAttitude+0x146>
		{
			// Acc LPF
			accSmooth[axis] = ((accSmooth[axis] * (float)(Config.Acc_LPF - 1)) - (float)(accADC[axis])) / Config.Acc_LPF;
    3cda:	6d 81       	ldd	r22, Y+5	; 0x05
    3cdc:	7e 81       	ldd	r23, Y+6	; 0x06
    3cde:	8f 81       	ldd	r24, Y+7	; 0x07
    3ce0:	98 85       	ldd	r25, Y+8	; 0x08
    3ce2:	0e 94 de 3a 	call	0x75bc	; 0x75bc <__floatsisf>
    3ce6:	e9 85       	ldd	r30, Y+9	; 0x09
    3ce8:	fa 85       	ldd	r31, Y+10	; 0x0a
    3cea:	20 81       	ld	r18, Z
    3cec:	31 81       	ldd	r19, Z+1	; 0x01
    3cee:	42 81       	ldd	r20, Z+2	; 0x02
    3cf0:	53 81       	ldd	r21, Z+3	; 0x03
    3cf2:	0e 94 be 3b 	call	0x777c	; 0x777c <__mulsf3>
    3cf6:	4b 01       	movw	r8, r22
    3cf8:	5c 01       	movw	r10, r24
    3cfa:	f8 01       	movw	r30, r16
    3cfc:	60 81       	ld	r22, Z
    3cfe:	71 81       	ldd	r23, Z+1	; 0x01
    3d00:	88 27       	eor	r24, r24
    3d02:	77 fd       	sbrc	r23, 7
    3d04:	80 95       	com	r24
    3d06:	98 2f       	mov	r25, r24
    3d08:	0e 94 de 3a 	call	0x75bc	; 0x75bc <__floatsisf>
    3d0c:	9b 01       	movw	r18, r22
    3d0e:	ac 01       	movw	r20, r24
    3d10:	c5 01       	movw	r24, r10
    3d12:	b4 01       	movw	r22, r8
    3d14:	0e 94 b2 39 	call	0x7364	; 0x7364 <__subsf3>
    3d18:	4b 01       	movw	r8, r22
    3d1a:	5c 01       	movw	r10, r24
    3d1c:	c3 01       	movw	r24, r6
    3d1e:	b2 01       	movw	r22, r4
    3d20:	0e 94 de 3a 	call	0x75bc	; 0x75bc <__floatsisf>
    3d24:	9b 01       	movw	r18, r22
    3d26:	ac 01       	movw	r20, r24
    3d28:	c5 01       	movw	r24, r10
    3d2a:	b4 01       	movw	r22, r8
    3d2c:	0e 94 43 3a 	call	0x7486	; 0x7486 <__divsf3>
    3d30:	0a c0       	rjmp	.+20     	; 0x3d46 <getEstimatedAttitude+0x15a>
		}
		else
		{
			// Use raw accADC[axis] as source for acc values
			accSmooth[axis] =  accADC[axis];
    3d32:	f8 01       	movw	r30, r16
    3d34:	80 81       	ld	r24, Z
    3d36:	91 81       	ldd	r25, Z+1	; 0x01
    3d38:	bc 01       	movw	r22, r24
    3d3a:	88 27       	eor	r24, r24
    3d3c:	77 fd       	sbrc	r23, 7
    3d3e:	80 95       	com	r24
    3d40:	98 2f       	mov	r25, r24
    3d42:	0e 94 de 3a 	call	0x75bc	; 0x75bc <__floatsisf>
    3d46:	e9 85       	ldd	r30, Y+9	; 0x09
    3d48:	fa 85       	ldd	r31, Y+10	; 0x0a
    3d4a:	60 83       	st	Z, r22
    3d4c:	71 83       	std	Z+1, r23	; 0x01
    3d4e:	82 83       	std	Z+2, r24	; 0x02
    3d50:	93 83       	std	Z+3, r25	; 0x03
		}

		// Estimate angle via gyros
		deltaGyroAngle[axis] += (float)gyroADC[axis] * deltaTime;
    3d52:	f1 01       	movw	r30, r2
    3d54:	81 91       	ld	r24, Z+
    3d56:	91 91       	ld	r25, Z+
    3d58:	1f 01       	movw	r2, r30
    3d5a:	bc 01       	movw	r22, r24
    3d5c:	88 27       	eor	r24, r24
    3d5e:	77 fd       	sbrc	r23, 7
    3d60:	80 95       	com	r24
    3d62:	98 2f       	mov	r25, r24
    3d64:	0e 94 de 3a 	call	0x75bc	; 0x75bc <__floatsisf>
    3d68:	a7 01       	movw	r20, r14
    3d6a:	96 01       	movw	r18, r12
    3d6c:	0e 94 be 3b 	call	0x777c	; 0x777c <__mulsf3>
    3d70:	9b 01       	movw	r18, r22
    3d72:	ac 01       	movw	r20, r24
    3d74:	eb 81       	ldd	r30, Y+3	; 0x03
    3d76:	fc 81       	ldd	r31, Y+4	; 0x04
    3d78:	60 81       	ld	r22, Z
    3d7a:	71 81       	ldd	r23, Z+1	; 0x01
    3d7c:	82 81       	ldd	r24, Z+2	; 0x02
    3d7e:	93 81       	ldd	r25, Z+3	; 0x03
    3d80:	0e 94 b3 39 	call	0x7366	; 0x7366 <__addsf3>
    3d84:	eb 81       	ldd	r30, Y+3	; 0x03
    3d86:	fc 81       	ldd	r31, Y+4	; 0x04
    3d88:	61 93       	st	Z+, r22
    3d8a:	71 93       	st	Z+, r23
    3d8c:	81 93       	st	Z+, r24
    3d8e:	91 93       	st	Z+, r25
    3d90:	fc 83       	std	Y+4, r31	; 0x04
    3d92:	eb 83       	std	Y+3, r30	; 0x03
    3d94:	29 85       	ldd	r18, Y+9	; 0x09
    3d96:	3a 85       	ldd	r19, Y+10	; 0x0a
    3d98:	2c 5f       	subi	r18, 0xFC	; 252
    3d9a:	3f 4f       	sbci	r19, 0xFF	; 255
    3d9c:	3a 87       	std	Y+10, r19	; 0x0a
    3d9e:	29 87       	std	Y+9, r18	; 0x09
    3da0:	0e 5f       	subi	r16, 0xFE	; 254
    3da2:	1f 4f       	sbci	r17, 0xFF	; 255
		tempf = (float)period;
		deltaTime = tempf * GYRO_SCALE;	
	}

	// Smooth Acc signals and estimate angle from gyro
	for (axis = 0; axis < NUMBEROFAXIS; axis++) 
    3da4:	36 e6       	ldi	r19, 0x66	; 102
    3da6:	23 16       	cp	r2, r19
    3da8:	35 e0       	ldi	r19, 0x05	; 5
    3daa:	33 06       	cpc	r3, r19
    3dac:	09 f0       	breq	.+2      	; 0x3db0 <getEstimatedAttitude+0x1c4>
    3dae:	92 cf       	rjmp	.-220    	; 0x3cd4 <getEstimatedAttitude+0xe8>
	}

	// As the deltaGyroAngle estimation passes through 180 or -180 we have to limit it 
	// and flip it to the other side, otherwise it will increment past 180.
	// A bit of hysteresis is helpful to minimise flapping about
	if (deltaGyroAngle[ROLL] > 185.0f)
    3db0:	20 e0       	ldi	r18, 0x00	; 0
    3db2:	30 e0       	ldi	r19, 0x00	; 0
    3db4:	49 e3       	ldi	r20, 0x39	; 57
    3db6:	53 e4       	ldi	r21, 0x43	; 67
    3db8:	60 91 12 01 	lds	r22, 0x0112
    3dbc:	70 91 13 01 	lds	r23, 0x0113
    3dc0:	80 91 14 01 	lds	r24, 0x0114
    3dc4:	90 91 15 01 	lds	r25, 0x0115
    3dc8:	0e 94 b3 3b 	call	0x7766	; 0x7766 <__gesf2>
    3dcc:	18 16       	cp	r1, r24
    3dce:	64 f4       	brge	.+24     	; 0x3de8 <getEstimatedAttitude+0x1fc>
	{
		deltaGyroAngle[ROLL] = -175.0f;
    3dd0:	80 e0       	ldi	r24, 0x00	; 0
    3dd2:	90 e0       	ldi	r25, 0x00	; 0
    3dd4:	af e2       	ldi	r26, 0x2F	; 47
    3dd6:	b3 ec       	ldi	r27, 0xC3	; 195
    3dd8:	80 93 12 01 	sts	0x0112, r24
    3ddc:	90 93 13 01 	sts	0x0113, r25
    3de0:	a0 93 14 01 	sts	0x0114, r26
    3de4:	b0 93 15 01 	sts	0x0115, r27
	}
	if (deltaGyroAngle[ROLL] < -185.0f)
    3de8:	20 e0       	ldi	r18, 0x00	; 0
    3dea:	30 e0       	ldi	r19, 0x00	; 0
    3dec:	49 e3       	ldi	r20, 0x39	; 57
    3dee:	53 ec       	ldi	r21, 0xC3	; 195
    3df0:	60 91 12 01 	lds	r22, 0x0112
    3df4:	70 91 13 01 	lds	r23, 0x0113
    3df8:	80 91 14 01 	lds	r24, 0x0114
    3dfc:	90 91 15 01 	lds	r25, 0x0115
    3e00:	0e 94 3f 3a 	call	0x747e	; 0x747e <__cmpsf2>
    3e04:	87 ff       	sbrs	r24, 7
    3e06:	0c c0       	rjmp	.+24     	; 0x3e20 <getEstimatedAttitude+0x234>
	{
		deltaGyroAngle[ROLL] = 175.0f;
    3e08:	80 e0       	ldi	r24, 0x00	; 0
    3e0a:	90 e0       	ldi	r25, 0x00	; 0
    3e0c:	af e2       	ldi	r26, 0x2F	; 47
    3e0e:	b3 e4       	ldi	r27, 0x43	; 67
    3e10:	80 93 12 01 	sts	0x0112, r24
    3e14:	90 93 13 01 	sts	0x0113, r25
    3e18:	a0 93 14 01 	sts	0x0114, r26
    3e1c:	b0 93 15 01 	sts	0x0115, r27

	// Note to self. Have to try this out with the board, watching the angles as you go past 90 and 180.

	// Calculate acceleration magnitude
	// This works perfectly as long as ACC_Z is calibrated to have =/- values (+/-125)
	roll_sq = (accADC[ROLL] * accADC[ROLL]);
    3e20:	20 90 2d 01 	lds	r2, 0x012D
    3e24:	30 90 2e 01 	lds	r3, 0x012E
    3e28:	22 9c       	mul	r2, r2
    3e2a:	a0 01       	movw	r20, r0
    3e2c:	23 9c       	mul	r2, r3
    3e2e:	50 0d       	add	r21, r0
    3e30:	50 0d       	add	r21, r0
    3e32:	11 24       	eor	r1, r1
    3e34:	5a 83       	std	Y+2, r21	; 0x02
    3e36:	49 83       	std	Y+1, r20	; 0x01
	pitch_sq = (accADC[PITCH] * accADC[PITCH]) ;
    3e38:	80 91 2f 01 	lds	r24, 0x012F
    3e3c:	90 91 30 01 	lds	r25, 0x0130
    3e40:	88 9f       	mul	r24, r24
    3e42:	f0 01       	movw	r30, r0
    3e44:	89 9f       	mul	r24, r25
    3e46:	f0 0d       	add	r31, r0
    3e48:	f0 0d       	add	r31, r0
    3e4a:	11 24       	eor	r1, r1
    3e4c:	fc 83       	std	Y+4, r31	; 0x04
    3e4e:	eb 83       	std	Y+3, r30	; 0x03
	yaw_sq = (accADC[YAW] * accADC[YAW]);
    3e50:	20 91 31 01 	lds	r18, 0x0131
    3e54:	30 91 32 01 	lds	r19, 0x0132
    3e58:	3e 83       	std	Y+6, r19	; 0x06
    3e5a:	2d 83       	std	Y+5, r18	; 0x05
    3e5c:	22 9f       	mul	r18, r18
    3e5e:	80 01       	movw	r16, r0
    3e60:	23 9f       	mul	r18, r19
    3e62:	10 0d       	add	r17, r0
    3e64:	10 0d       	add	r17, r0
    3e66:	11 24       	eor	r1, r1

	AccMag = (uint16_t)(roll_sq + pitch_sq + yaw_sq);
    3e68:	ca 01       	movw	r24, r20
    3e6a:	8e 0f       	add	r24, r30
    3e6c:	9f 1f       	adc	r25, r31
    3e6e:	80 0f       	add	r24, r16
    3e70:	91 1f       	adc	r25, r17
	//	acc_1_15G_SQ
	//	acc_0_85G_SQ

	// Region of true CF-based operation (gyros + accs) - While under normal G.
	// Note the CF angles go from 
	if ((AccMag > acc_0_85G_SQ) && (AccMag < acc_1_15G_SQ))
    3e72:	8a 51       	subi	r24, 0x1A	; 26
    3e74:	9c 42       	sbci	r25, 0x2C	; 44
    3e76:	8e 39       	cpi	r24, 0x9E	; 158
    3e78:	94 42       	sbci	r25, 0x24	; 36
    3e7a:	08 f0       	brcs	.+2      	; 0x3e7e <getEstimatedAttitude+0x292>
    3e7c:	d2 c0       	rjmp	.+420    	; 0x4022 <getEstimatedAttitude+0x436>
	{ 
		// The CF algorithm will fail when inverted as acc moves opposite gyro
		// When inverted, reverse acc polarity.
		if (accADC[YAW] < 0)
    3e7e:	4d 81       	ldd	r20, Y+5	; 0x05
    3e80:	5e 81       	ldd	r21, Y+6	; 0x06
    3e82:	57 ff       	sbrs	r21, 7
    3e84:	22 c0       	rjmp	.+68     	; 0x3eca <getEstimatedAttitude+0x2de>
		{
			accSmooth[ROLL] = -accSmooth[ROLL];
    3e86:	80 91 6e 05 	lds	r24, 0x056E
    3e8a:	90 91 6f 05 	lds	r25, 0x056F
    3e8e:	a0 91 70 05 	lds	r26, 0x0570
    3e92:	b0 91 71 05 	lds	r27, 0x0571
    3e96:	b0 58       	subi	r27, 0x80	; 128
    3e98:	80 93 6e 05 	sts	0x056E, r24
    3e9c:	90 93 6f 05 	sts	0x056F, r25
    3ea0:	a0 93 70 05 	sts	0x0570, r26
    3ea4:	b0 93 71 05 	sts	0x0571, r27
			accSmooth[PITCH] = -accSmooth[PITCH];
    3ea8:	80 91 72 05 	lds	r24, 0x0572
    3eac:	90 91 73 05 	lds	r25, 0x0573
    3eb0:	a0 91 74 05 	lds	r26, 0x0574
    3eb4:	b0 91 75 05 	lds	r27, 0x0575
    3eb8:	b0 58       	subi	r27, 0x80	; 128
    3eba:	80 93 72 05 	sts	0x0572, r24
    3ebe:	90 93 73 05 	sts	0x0573, r25
    3ec2:	a0 93 74 05 	sts	0x0574, r26
    3ec6:	b0 93 75 05 	sts	0x0575, r27
		}

		// Complementary filter
		deltaGyroAngle[ROLL] = ((deltaGyroAngle[ROLL] * GYR_CMPF_FACTOR) - accSmooth[ROLL]) * INV_GYR_CMPF_FACTOR;
    3eca:	40 90 7a 05 	lds	r4, 0x057A
    3ece:	50 90 7b 05 	lds	r5, 0x057B
    3ed2:	60 90 7c 05 	lds	r6, 0x057C
    3ed6:	70 90 7d 05 	lds	r7, 0x057D
    3eda:	80 90 66 05 	lds	r8, 0x0566
    3ede:	90 90 67 05 	lds	r9, 0x0567
    3ee2:	a0 90 68 05 	lds	r10, 0x0568
    3ee6:	b0 90 69 05 	lds	r11, 0x0569
    3eea:	20 91 12 01 	lds	r18, 0x0112
    3eee:	30 91 13 01 	lds	r19, 0x0113
    3ef2:	40 91 14 01 	lds	r20, 0x0114
    3ef6:	50 91 15 01 	lds	r21, 0x0115
    3efa:	c3 01       	movw	r24, r6
    3efc:	b2 01       	movw	r22, r4
    3efe:	0e 94 be 3b 	call	0x777c	; 0x777c <__mulsf3>
    3f02:	20 91 6e 05 	lds	r18, 0x056E
    3f06:	30 91 6f 05 	lds	r19, 0x056F
    3f0a:	40 91 70 05 	lds	r20, 0x0570
    3f0e:	50 91 71 05 	lds	r21, 0x0571
    3f12:	0e 94 b2 39 	call	0x7364	; 0x7364 <__subsf3>
    3f16:	a5 01       	movw	r20, r10
    3f18:	94 01       	movw	r18, r8
    3f1a:	0e 94 be 3b 	call	0x777c	; 0x777c <__mulsf3>
    3f1e:	6b 01       	movw	r12, r22
    3f20:	7c 01       	movw	r14, r24
    3f22:	60 93 12 01 	sts	0x0112, r22
    3f26:	70 93 13 01 	sts	0x0113, r23
    3f2a:	80 93 14 01 	sts	0x0114, r24
    3f2e:	90 93 15 01 	sts	0x0115, r25
		deltaGyroAngle[PITCH] = ((deltaGyroAngle[PITCH] * GYR_CMPF_FACTOR) - accSmooth[PITCH]) * INV_GYR_CMPF_FACTOR;
    3f32:	20 91 16 01 	lds	r18, 0x0116
    3f36:	30 91 17 01 	lds	r19, 0x0117
    3f3a:	40 91 18 01 	lds	r20, 0x0118
    3f3e:	50 91 19 01 	lds	r21, 0x0119
    3f42:	c3 01       	movw	r24, r6
    3f44:	b2 01       	movw	r22, r4
    3f46:	0e 94 be 3b 	call	0x777c	; 0x777c <__mulsf3>
    3f4a:	20 91 72 05 	lds	r18, 0x0572
    3f4e:	30 91 73 05 	lds	r19, 0x0573
    3f52:	40 91 74 05 	lds	r20, 0x0574
    3f56:	50 91 75 05 	lds	r21, 0x0575
    3f5a:	0e 94 b2 39 	call	0x7364	; 0x7364 <__subsf3>
    3f5e:	a5 01       	movw	r20, r10
    3f60:	94 01       	movw	r18, r8
    3f62:	0e 94 be 3b 	call	0x777c	; 0x777c <__mulsf3>
    3f66:	4b 01       	movw	r8, r22
    3f68:	5c 01       	movw	r10, r24
    3f6a:	60 93 16 01 	sts	0x0116, r22
    3f6e:	70 93 17 01 	sts	0x0117, r23
    3f72:	80 93 18 01 	sts	0x0118, r24
    3f76:	90 93 19 01 	sts	0x0119, r25

		// Calculate the roll and pitch angles properly then convert to degrees x 100
		tempf = atan(deltaGyroAngle[PITCH] / (float)sqrt(roll_sq + yaw_sq));
    3f7a:	69 81       	ldd	r22, Y+1	; 0x01
    3f7c:	7a 81       	ldd	r23, Y+2	; 0x02
    3f7e:	60 0f       	add	r22, r16
    3f80:	71 1f       	adc	r23, r17
    3f82:	88 27       	eor	r24, r24
    3f84:	77 fd       	sbrc	r23, 7
    3f86:	80 95       	com	r24
    3f88:	98 2f       	mov	r25, r24
    3f8a:	0e 94 de 3a 	call	0x75bc	; 0x75bc <__floatsisf>
    3f8e:	0e 94 25 3c 	call	0x784a	; 0x784a <sqrt>
    3f92:	9b 01       	movw	r18, r22
    3f94:	ac 01       	movw	r20, r24
    3f96:	c5 01       	movw	r24, r10
    3f98:	b4 01       	movw	r22, r8
    3f9a:	0e 94 43 3a 	call	0x7486	; 0x7486 <__divsf3>
    3f9e:	0e 94 17 3a 	call	0x742e	; 0x742e <atan>
		angle[PITCH]  = (int16_t)(tempf * CONV_DEGREES);
    3fa2:	2f e9       	ldi	r18, 0x9F	; 159
    3fa4:	3c e0       	ldi	r19, 0x0C	; 12
    3fa6:	43 eb       	ldi	r20, 0xB3	; 179
    3fa8:	55 e4       	ldi	r21, 0x45	; 69
    3faa:	0e 94 be 3b 	call	0x777c	; 0x777c <__mulsf3>
    3fae:	0e 94 ab 3a 	call	0x7556	; 0x7556 <__fixsfsi>
    3fb2:	70 93 6d 05 	sts	0x056D, r23
    3fb6:	60 93 6c 05 	sts	0x056C, r22

		tempf = atan(deltaGyroAngle[ROLL]  / (float)sqrt(pitch_sq + yaw_sq));
    3fba:	6b 81       	ldd	r22, Y+3	; 0x03
    3fbc:	7c 81       	ldd	r23, Y+4	; 0x04
    3fbe:	60 0f       	add	r22, r16
    3fc0:	71 1f       	adc	r23, r17
    3fc2:	88 27       	eor	r24, r24
    3fc4:	77 fd       	sbrc	r23, 7
    3fc6:	80 95       	com	r24
    3fc8:	98 2f       	mov	r25, r24
    3fca:	0e 94 de 3a 	call	0x75bc	; 0x75bc <__floatsisf>
    3fce:	0e 94 25 3c 	call	0x784a	; 0x784a <sqrt>
    3fd2:	9b 01       	movw	r18, r22
    3fd4:	ac 01       	movw	r20, r24
    3fd6:	c7 01       	movw	r24, r14
    3fd8:	b6 01       	movw	r22, r12
    3fda:	0e 94 43 3a 	call	0x7486	; 0x7486 <__divsf3>
    3fde:	0e 94 17 3a 	call	0x742e	; 0x742e <atan>
		angle[ROLL]  = (int16_t)(tempf * CONV_DEGREES);
    3fe2:	2f e9       	ldi	r18, 0x9F	; 159
    3fe4:	3c e0       	ldi	r19, 0x0C	; 12
    3fe6:	43 eb       	ldi	r20, 0xB3	; 179
    3fe8:	55 e4       	ldi	r21, 0x45	; 69
    3fea:	0e 94 be 3b 	call	0x777c	; 0x777c <__mulsf3>
    3fee:	0e 94 ab 3a 	call	0x7556	; 0x7556 <__fixsfsi>

		// The following code changes the 0-90-0 deg to 0-90-180 deg
		// It will snap between 180 and -180 deg when 100% inverted
		if (accADC[YAW] < 0)
    3ff2:	ed 81       	ldd	r30, Y+5	; 0x05
    3ff4:	fe 81       	ldd	r31, Y+6	; 0x06
    3ff6:	f7 fd       	sbrc	r31, 7
    3ff8:	05 c0       	rjmp	.+10     	; 0x4004 <getEstimatedAttitude+0x418>
		// Calculate the roll and pitch angles properly then convert to degrees x 100
		tempf = atan(deltaGyroAngle[PITCH] / (float)sqrt(roll_sq + yaw_sq));
		angle[PITCH]  = (int16_t)(tempf * CONV_DEGREES);

		tempf = atan(deltaGyroAngle[ROLL]  / (float)sqrt(pitch_sq + yaw_sq));
		angle[ROLL]  = (int16_t)(tempf * CONV_DEGREES);
    3ffa:	70 93 6b 05 	sts	0x056B, r23
    3ffe:	60 93 6a 05 	sts	0x056A, r22
    4002:	37 c0       	rjmp	.+110    	; 0x4072 <getEstimatedAttitude+0x486>
		// The following code changes the 0-90-0 deg to 0-90-180 deg
		// It will snap between 180 and -180 deg when 100% inverted
		if (accADC[YAW] < 0)
		{
			// Roll
			if (accADC[ROLL] > 0)
    4004:	12 14       	cp	r1, r2
    4006:	13 04       	cpc	r1, r3
    4008:	1c f4       	brge	.+6      	; 0x4010 <getEstimatedAttitude+0x424>
			{
				angle[ROLL] = (ONE_EIGHTY - angle[ROLL]);
    400a:	20 e5       	ldi	r18, 0x50	; 80
    400c:	36 e4       	ldi	r19, 0x46	; 70
    400e:	02 c0       	rjmp	.+4      	; 0x4014 <getEstimatedAttitude+0x428>
			}
			else
			{
				angle[ROLL] = (-ONE_EIGHTY - angle[ROLL]);
    4010:	20 eb       	ldi	r18, 0xB0	; 176
    4012:	39 eb       	ldi	r19, 0xB9	; 185
    4014:	26 1b       	sub	r18, r22
    4016:	37 0b       	sbc	r19, r23
    4018:	30 93 6b 05 	sts	0x056B, r19
    401c:	20 93 6a 05 	sts	0x056A, r18
    4020:	28 c0       	rjmp	.+80     	; 0x4072 <getEstimatedAttitude+0x486>
	// deltaGyroAngle[] is 50 times smaller than angle[]
	// So we need to compensate here to make them equal
	// Note that the above adjustments when inverted are not needed for gyro-based angles
	else
	{
		angle[ROLL] = (int16_t)(deltaGyroAngle[ROLL] * 50);
    4022:	20 e0       	ldi	r18, 0x00	; 0
    4024:	30 e0       	ldi	r19, 0x00	; 0
    4026:	48 e4       	ldi	r20, 0x48	; 72
    4028:	52 e4       	ldi	r21, 0x42	; 66
    402a:	60 91 12 01 	lds	r22, 0x0112
    402e:	70 91 13 01 	lds	r23, 0x0113
    4032:	80 91 14 01 	lds	r24, 0x0114
    4036:	90 91 15 01 	lds	r25, 0x0115
    403a:	0e 94 be 3b 	call	0x777c	; 0x777c <__mulsf3>
    403e:	0e 94 ab 3a 	call	0x7556	; 0x7556 <__fixsfsi>
    4042:	70 93 6b 05 	sts	0x056B, r23
    4046:	60 93 6a 05 	sts	0x056A, r22
		angle[PITCH] = (int16_t)(deltaGyroAngle[PITCH] * 50);
    404a:	20 e0       	ldi	r18, 0x00	; 0
    404c:	30 e0       	ldi	r19, 0x00	; 0
    404e:	48 e4       	ldi	r20, 0x48	; 72
    4050:	52 e4       	ldi	r21, 0x42	; 66
    4052:	60 91 16 01 	lds	r22, 0x0116
    4056:	70 91 17 01 	lds	r23, 0x0117
    405a:	80 91 18 01 	lds	r24, 0x0118
    405e:	90 91 19 01 	lds	r25, 0x0119
    4062:	0e 94 be 3b 	call	0x777c	; 0x777c <__mulsf3>
    4066:	0e 94 ab 3a 	call	0x7556	; 0x7556 <__fixsfsi>
    406a:	70 93 6d 05 	sts	0x056D, r23
    406e:	60 93 6c 05 	sts	0x056C, r22
	}
}
    4072:	2a 96       	adiw	r28, 0x0a	; 10
    4074:	e2 e1       	ldi	r30, 0x12	; 18
    4076:	0c 94 37 3d 	jmp	0x7a6e	; 0x7a6e <__epilogue_restores__>

0000407a <UpdateIMUvalues>:

void UpdateIMUvalues(void)
{
	// Recalculate CF factors
	GYR_CMPF_FACTOR = (int16_t)Config.CF_factor * 10;
    407a:	60 91 0e 06 	lds	r22, 0x060E
    407e:	8a e0       	ldi	r24, 0x0A	; 10
    4080:	68 02       	muls	r22, r24
    4082:	b0 01       	movw	r22, r0
    4084:	11 24       	eor	r1, r1
    4086:	88 27       	eor	r24, r24
    4088:	77 fd       	sbrc	r23, 7
    408a:	80 95       	com	r24
    408c:	98 2f       	mov	r25, r24
    408e:	0e 94 de 3a 	call	0x75bc	; 0x75bc <__floatsisf>
    4092:	60 93 7a 05 	sts	0x057A, r22
    4096:	70 93 7b 05 	sts	0x057B, r23
    409a:	80 93 7c 05 	sts	0x057C, r24
    409e:	90 93 7d 05 	sts	0x057D, r25
	INV_GYR_CMPF_FACTOR = (1.0f / (GYR_CMPF_FACTOR + 1.0f));
    40a2:	20 e0       	ldi	r18, 0x00	; 0
    40a4:	30 e0       	ldi	r19, 0x00	; 0
    40a6:	40 e8       	ldi	r20, 0x80	; 128
    40a8:	5f e3       	ldi	r21, 0x3F	; 63
    40aa:	0e 94 b3 39 	call	0x7366	; 0x7366 <__addsf3>
    40ae:	9b 01       	movw	r18, r22
    40b0:	ac 01       	movw	r20, r24
    40b2:	60 e0       	ldi	r22, 0x00	; 0
    40b4:	70 e0       	ldi	r23, 0x00	; 0
    40b6:	80 e8       	ldi	r24, 0x80	; 128
    40b8:	9f e3       	ldi	r25, 0x3F	; 63
    40ba:	0e 94 43 3a 	call	0x7486	; 0x7486 <__divsf3>
    40be:	60 93 66 05 	sts	0x0566, r22
    40c2:	70 93 67 05 	sts	0x0567, r23
    40c6:	80 93 68 05 	sts	0x0568, r24
    40ca:	90 93 69 05 	sts	0x0569, r25
    40ce:	08 95       	ret

000040d0 <init_int>:
// Reconfigure interrupts
//***********************************************************

void init_int(void)
{
	cli();	// Disable interrupts
    40d0:	f8 94       	cli

	switch (Config.RxMode)
    40d2:	80 91 a7 05 	lds	r24, 0x05A7
    40d6:	81 30       	cpi	r24, 0x01	; 1
    40d8:	a1 f0       	breq	.+40     	; 0x4102 <init_int+0x32>
    40da:	44 f4       	brge	.+16     	; 0x40ec <init_int+0x1c>
    40dc:	81 11       	cpse	r24, r1
    40de:	22 c0       	rjmp	.+68     	; 0x4124 <init_int+0x54>
	{
		case CPPM_MODE:
			PCMSK1 = 0;							// Disable AUX
    40e0:	10 92 6c 00 	sts	0x006C, r1
			PCMSK3 = 0;							// Disable THR
    40e4:	10 92 73 00 	sts	0x0073, r1
			EIMSK = 0x04;						// Enable INT2 (Rudder/CPPM input)
    40e8:	84 e0       	ldi	r24, 0x04	; 4
    40ea:	16 c0       	rjmp	.+44     	; 0x4118 <init_int+0x48>

void init_int(void)
{
	cli();	// Disable interrupts

	switch (Config.RxMode)
    40ec:	84 30       	cpi	r24, 0x04	; 4
    40ee:	d4 f4       	brge	.+52     	; 0x4124 <init_int+0x54>
			break;

		case SBUS:
		case SPEKTRUM:
			// Disable PWM input interrupts
			PCMSK1 = 0;							// Disable AUX
    40f0:	10 92 6c 00 	sts	0x006C, r1
			PCMSK3 = 0;							// Disable THR
    40f4:	10 92 73 00 	sts	0x0073, r1
			EIMSK  = 0;							// Disable INT0, 1 and 2 
    40f8:	1d ba       	out	0x1d, r1	; 29

			// Enable serial interrupt
			UCSR0B |= (1 << RXCIE0);
    40fa:	80 91 c1 00 	lds	r24, 0x00C1
    40fe:	80 68       	ori	r24, 0x80	; 128
    4100:	0f c0       	rjmp	.+30     	; 0x4120 <init_int+0x50>
			EIMSK = 0x04;						// Enable INT2 (Rudder/CPPM input)
			UCSR0B &= ~(1 << RXCIE0);			// Disable serial interrupt
			break;

		case PWM:
			PCMSK1 |= (1 << PCINT8);			// PB0 (Aux pin change mask)
    4102:	80 91 6c 00 	lds	r24, 0x006C
    4106:	81 60       	ori	r24, 0x01	; 1
    4108:	80 93 6c 00 	sts	0x006C, r24
			PCMSK3 |= (1 << PCINT24);			// PD0 (Throttle pin change mask)
    410c:	80 91 73 00 	lds	r24, 0x0073
    4110:	81 60       	ori	r24, 0x01	; 1
    4112:	80 93 73 00 	sts	0x0073, r24
			EIMSK  = 0x07;						// Enable INT0, 1 and 2 
    4116:	87 e0       	ldi	r24, 0x07	; 7
    4118:	8d bb       	out	0x1d, r24	; 29
			UCSR0B &= ~(1 << RXCIE0);			// Disable serial interrupt
    411a:	80 91 c1 00 	lds	r24, 0x00C1
    411e:	8f 77       	andi	r24, 0x7F	; 127
			PCMSK1 = 0;							// Disable AUX
			PCMSK3 = 0;							// Disable THR
			EIMSK  = 0;							// Disable INT0, 1 and 2 

			// Enable serial interrupt
			UCSR0B |= (1 << RXCIE0);
    4120:	80 93 c1 00 	sts	0x00C1, r24

		default:
			break;	
	}	

	sei(); // Re-enable interrupts
    4124:	78 94       	sei
    4126:	08 95       	ret

00004128 <init>:
	// KK2.0 and KK2.1 are different
#ifdef KK21
	DDRA		= 0x30;		// Port A
	DDRC		= 0xFC;		// Port C
#else
	DDRA		= 0x00;		// Port A
    4128:	11 b8       	out	0x01, r1	; 1
	DDRC		= 0xFF;		// Port C
    412a:	8f ef       	ldi	r24, 0xFF	; 255
    412c:	87 b9       	out	0x07, r24	; 7
#endif
	DDRB		= 0x0A;		// Port B
    412e:	8a e0       	ldi	r24, 0x0A	; 10
    4130:	84 b9       	out	0x04, r24	; 4
	DDRD		= 0xF2;		// Port D
    4132:	82 ef       	ldi	r24, 0xF2	; 242
    4134:	8a b9       	out	0x0a, r24	; 10

	// Hold all PWM outputs low to stop glitches
	// M5 and M6 are on PortA for KK2.1
	MOTORS		= 0;
    4136:	18 b8       	out	0x08, r1	; 8
	M5			= 0;
    4138:	41 98       	cbi	0x08, 1	; 8
	M6			= 0;
    413a:	40 98       	cbi	0x08, 0	; 8

	// Preset I/O pins
	LED1 		= 0;		// LED1 off
    413c:	2b 98       	cbi	0x05, 3	; 5
	LVA 		= 0; 		// LVA alarm OFF
    413e:	29 98       	cbi	0x05, 1	; 5
	LCD_SCL		= 1;		// GLCD clock high
    4140:	5c 9a       	sbi	0x0b, 4	; 11

	// Set/clear pull-ups (1 = set, 0 = clear)
	PINB		= 0xF5;		// Set PB pull-ups
    4142:	85 ef       	ldi	r24, 0xF5	; 245
    4144:	83 b9       	out	0x03, r24	; 3
	PIND		= 0x0C;		// Set PD pull-ups (Don't pull up RX yet)
    4146:	8c e0       	ldi	r24, 0x0C	; 12
    4148:	89 b9       	out	0x09, r24	; 9
    414a:	2f e5       	ldi	r18, 0x5F	; 95
    414c:	88 ed       	ldi	r24, 0xD8	; 216
    414e:	93 e0       	ldi	r25, 0x03	; 3
    4150:	21 50       	subi	r18, 0x01	; 1
    4152:	80 40       	sbci	r24, 0x00	; 0
    4154:	90 40       	sbci	r25, 0x00	; 0
    4156:	e1 f7       	brne	.-8      	; 0x4150 <init+0x28>
    4158:	00 c0       	rjmp	.+0      	; 0x415a <init+0x32>
    415a:	00 00       	nop
	_delay_ms(63);				// Pause while satellite wakes up	
								// and pull-ups have time to rise.
								// Tweak until bind pulses about 68ms after power-up

	// Bind as master if ONLY button 4 pressed
	if ((PINB & 0xf0) == 0xE0)
    415c:	83 b1       	in	r24, 0x03	; 3
    415e:	80 7f       	andi	r24, 0xF0	; 240
    4160:	80 3e       	cpi	r24, 0xE0	; 224
    4162:	21 f4       	brne	.+8      	; 0x416c <init+0x44>
	{
		DDRD		= 0xF3;		// Switch PD0 to output
    4164:	83 ef       	ldi	r24, 0xF3	; 243
    4166:	8a b9       	out	0x0a, r24	; 10
		bind_master();
    4168:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <bind_master>
	}

	DDRD		= 0xF2;			// Reset Port D directions
    416c:	82 ef       	ldi	r24, 0xF2	; 242
    416e:	8a b9       	out	0x0a, r24	; 10

	// Set/clear pull-ups (1 = set, 0 = clear)
	PIND		= 0x0D;			// Set PD pull-ups (now pull up RX as well)
    4170:	8d e0       	ldi	r24, 0x0D	; 13
    4172:	89 b9       	out	0x09, r24	; 9
	// Timers
	//***********************************************************

	// Timer1 (16bit) - run @ 2.5MHz (400ns) - max 26.2ms
	// Used to measure Rx Signals & control ESC/servo output rate
	TCCR1A = 0;
    4174:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = (1 << CS11);					// Clk/8 = 2.5MHz
    4178:	82 e0       	ldi	r24, 0x02	; 2
    417a:	80 93 81 00 	sts	0x0081, r24

	// Timer2 8bit - run @ 20MHz / 1024 = 19.531kHz or 51.2us - max 13.1ms
	// Used to time arm/disarm intervals
	TCCR2A = 0;	
    417e:	10 92 b0 00 	sts	0x00B0, r1
	TCCR2B = 0x07;							// Clk/1024 = 19.531kHz
    4182:	87 e0       	ldi	r24, 0x07	; 7
    4184:	80 93 b1 00 	sts	0x00B1, r24
	TIMSK2 = 0;
    4188:	10 92 70 00 	sts	0x0070, r1
	TIFR2 = 0;
    418c:	17 ba       	out	0x17, r1	; 23
	TCNT2 = 0;								// Reset counter
    418e:	10 92 b2 00 	sts	0x00B2, r1
	//***********************************************************
	// Interrupts and pin function setup
	//***********************************************************

	// Pin change interrupt enables PCINT1, PCINT2 and PCINT3 (Throttle, AUX and CPPM input)
	PCICR  = 0x0A;							// PCINT8  to PCINT15 (PCINT1 group - AUX)
    4192:	9a e0       	ldi	r25, 0x0A	; 10
    4194:	90 93 68 00 	sts	0x0068, r25
											// PCINT24 to PCINT31 (PCINT3 group - THR)
	PCIFR  = 0x0F;							// Clear PCIF0 interrupt flag 
    4198:	9f e0       	ldi	r25, 0x0F	; 15
    419a:	9b bb       	out	0x1b, r25	; 27
											// Clear PCIF1 interrupt flag 
											// Clear PCIF2 interrupt flag 
											// Clear PCIF3 interrupt flag 

	// External interrupts INT0 (Elevator) and INT1 (Aileron) and INT2 (Rudder)
	EICRA = 0x15;							// Any change INT0
    419c:	95 e1       	ldi	r25, 0x15	; 21
    419e:	90 93 69 00 	sts	0x0069, r25
											// Any change INT1
											// Any change INT2
	EIFR  = 0x07; 							// Clear INT0 interrupt flag (Elevator)
    41a2:	8c bb       	out	0x1c, r24	; 28
	//***********************************************************
	// Start up
	//***********************************************************

	// Preset important flags
	Interrupted = false;						
    41a4:	10 92 3e 07 	sts	0x073E, r1
	Config.Main_flags |= (1 << FirstTimeIMU);
    41a8:	80 91 3c 07 	lds	r24, 0x073C
    41ac:	84 60       	ori	r24, 0x04	; 4
    41ae:	80 93 3c 07 	sts	0x073C, r24
	//***********************************************************
	// GLCD initialisation
	//***********************************************************

	// Initialise the GLCD
	st7565_init();
    41b2:	0e 94 1d 1a 	call	0x343a	; 0x343a <st7565_init>
	st7565_command(CMD_DISPLAY_ON);
    41b6:	8f ea       	ldi	r24, 0xAF	; 175
    41b8:	0e 94 15 1a 	call	0x342a	; 0x342a <st7565_command>
	st7565_command(CMD_SET_ALLPTS_NORMAL);
    41bc:	84 ea       	ldi	r24, 0xA4	; 164
    41be:	0e 94 15 1a 	call	0x342a	; 0x342a <st7565_command>
	st7565_set_brightness(0x26);
    41c2:	86 e2       	ldi	r24, 0x26	; 38
    41c4:	0e 94 63 1a 	call	0x34c6	; 0x34c6 <st7565_set_brightness>
	st7565_command(CMD_SET_COM_REVERSE); 	// For logo
    41c8:	88 ec       	ldi	r24, 0xC8	; 200
    41ca:	0e 94 15 1a 	call	0x342a	; 0x342a <st7565_command>

	// Make sure the LCD is blank
	clear_screen();
    41ce:	0e 94 b1 1a 	call	0x3562	; 0x3562 <clear_screen>
    41d2:	2f e7       	ldi	r18, 0x7F	; 127
    41d4:	8f e4       	ldi	r24, 0x4F	; 79
    41d6:	92 e1       	ldi	r25, 0x12	; 18
    41d8:	21 50       	subi	r18, 0x01	; 1
    41da:	80 40       	sbci	r24, 0x00	; 0
    41dc:	90 40       	sbci	r25, 0x00	; 0
    41de:	e1 f7       	brne	.-8      	; 0x41d8 <init+0xb0>
    41e0:	00 c0       	rjmp	.+0      	; 0x41e2 <init+0xba>
    41e2:	00 00       	nop
	//***********************************************************
	// Load or reset EEPROM settings
	//***********************************************************

	// Reload default eeprom settings if middle two buttons are pressed
	if ((PINB & 0xf0) == 0x90)
    41e4:	83 b1       	in	r24, 0x03	; 3
    41e6:	80 7f       	andi	r24, 0xF0	; 240
    41e8:	80 39       	cpi	r24, 0x90	; 144
    41ea:	f1 f4       	brne	.+60     	; 0x4228 <init+0x100>
	{
		// Display reset message
		st7565_command(CMD_SET_COM_NORMAL); 	// For text (not for logo)
    41ec:	80 ec       	ldi	r24, 0xC0	; 192
    41ee:	0e 94 15 1a 	call	0x342a	; 0x342a <st7565_command>
		clear_buffer(buffer);
    41f2:	83 e3       	ldi	r24, 0x33	; 51
    41f4:	91 e0       	ldi	r25, 0x01	; 1
    41f6:	0e 94 a8 1a 	call	0x3550	; 0x3550 <clear_buffer>
		LCD_Display_Text(1,(const unsigned char*)Verdana14,40,25);
    41fa:	29 e1       	ldi	r18, 0x19	; 25
    41fc:	30 e0       	ldi	r19, 0x00	; 0
    41fe:	48 e2       	ldi	r20, 0x28	; 40
    4200:	50 e0       	ldi	r21, 0x00	; 0
    4202:	67 e7       	ldi	r22, 0x77	; 119
    4204:	71 e0       	ldi	r23, 0x01	; 1
    4206:	81 e0       	ldi	r24, 0x01	; 1
    4208:	0e 94 51 1c 	call	0x38a2	; 0x38a2 <LCD_Display_Text>
		write_buffer(buffer,1);
    420c:	61 e0       	ldi	r22, 0x01	; 1
    420e:	83 e3       	ldi	r24, 0x33	; 51
    4210:	91 e0       	ldi	r25, 0x01	; 1
    4212:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <write_buffer>
		clear_buffer(buffer);
    4216:	83 e3       	ldi	r24, 0x33	; 51
    4218:	91 e0       	ldi	r25, 0x01	; 1
    421a:	0e 94 a8 1a 	call	0x3550	; 0x3550 <clear_buffer>
		Set_EEPROM_Default_Config();
    421e:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <Set_EEPROM_Default_Config>
		Save_Config_to_EEPROM();
    4222:	0e 94 31 16 	call	0x2c62	; 0x2c62 <Save_Config_to_EEPROM>
    4226:	02 c0       	rjmp	.+4      	; 0x422c <init+0x104>
	}
	// Load "Config" global data structure
	else
	{
		Initial_EEPROM_Config_Load();	
    4228:	0e 94 5c 16 	call	0x2cb8	; 0x2cb8 <Initial_EEPROM_Config_Load>
	}

	// Set contrast to the previously saved value
	st7565_set_brightness((uint8_t)Config.Contrast);				
    422c:	80 91 08 06 	lds	r24, 0x0608
    4230:	0e 94 63 1a 	call	0x34c6	; 0x34c6 <st7565_set_brightness>
	// Remaining init tasks
	//***********************************************************

#ifndef KK21
	// Display "Hold steady" message for KK2.0 (no room for logo)
	st7565_command(CMD_SET_COM_NORMAL); 	// For text (not for logo)
    4234:	80 ec       	ldi	r24, 0xC0	; 192
    4236:	0e 94 15 1a 	call	0x342a	; 0x342a <st7565_command>
	clear_buffer(buffer);
    423a:	83 e3       	ldi	r24, 0x33	; 51
    423c:	91 e0       	ldi	r25, 0x01	; 1
    423e:	0e 94 a8 1a 	call	0x3550	; 0x3550 <clear_buffer>
	LCD_Display_Text(2,(const unsigned char*)Verdana14,18,25);
    4242:	29 e1       	ldi	r18, 0x19	; 25
    4244:	30 e0       	ldi	r19, 0x00	; 0
    4246:	42 e1       	ldi	r20, 0x12	; 18
    4248:	50 e0       	ldi	r21, 0x00	; 0
    424a:	67 e7       	ldi	r22, 0x77	; 119
    424c:	71 e0       	ldi	r23, 0x01	; 1
    424e:	82 e0       	ldi	r24, 0x02	; 2
    4250:	0e 94 51 1c 	call	0x38a2	; 0x38a2 <LCD_Display_Text>
	write_buffer(buffer,1);
    4254:	61 e0       	ldi	r22, 0x01	; 1
    4256:	83 e3       	ldi	r24, 0x33	; 51
    4258:	91 e0       	ldi	r25, 0x01	; 1
    425a:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <write_buffer>
	clear_buffer(buffer);
    425e:	83 e3       	ldi	r24, 0x33	; 51
    4260:	91 e0       	ldi	r25, 0x01	; 1
    4262:	0e 94 a8 1a 	call	0x3550	; 0x3550 <clear_buffer>
#endif
		
	// Do startup tasks
	UpdateLimits();							// Update travel limts	
    4266:	0e 94 b9 2c 	call	0x5972	; 0x5972 <UpdateLimits>
	UpdateIMUvalues();						// Update IMU factors
    426a:	0e 94 3d 20 	call	0x407a	; 0x407a <UpdateIMUvalues>
	Init_ADC();
    426e:	0e 94 42 10 	call	0x2084	; 0x2084 <Init_ADC>
	init_int();								// Intialise interrupts based on RC input mode
    4272:	0e 94 68 20 	call	0x40d0	; 0x40d0 <init_int>
	init_uart();							// Initialise UART
    4276:	0e 94 33 39 	call	0x7266	; 0x7266 <init_uart>

	// Initial gyro calibration
	CalibrateGyrosSlow();
    427a:	0e 94 66 1d 	call	0x3acc	; 0x3acc <CalibrateGyrosSlow>

	// Disarm on start-up if Armed setting is ARMABLE
	if (Config.ArmMode == ARMABLE)
    427e:	80 91 09 06 	lds	r24, 0x0609
    4282:	81 30       	cpi	r24, 0x01	; 1
    4284:	29 f4       	brne	.+10     	; 0x4290 <init+0x168>
	{
		General_error |= (1 << DISARMED); 	// Set disarmed bit
    4286:	80 91 0e 01 	lds	r24, 0x010E
    428a:	80 61       	ori	r24, 0x10	; 16
    428c:	80 93 0e 01 	sts	0x010E, r24
	}

	// Check to see that throttle is low if RC detected
	if (Interrupted)
    4290:	80 91 3e 07 	lds	r24, 0x073E
    4294:	88 23       	and	r24, r24
    4296:	69 f0       	breq	.+26     	; 0x42b2 <init+0x18a>
	{
		RxGetChannels();
    4298:	0e 94 ed 37 	call	0x6fda	; 0x6fda <RxGetChannels>
		if (MonopolarThrottle > THROTTLEIDLE)
    429c:	80 91 9d 07 	lds	r24, 0x079D
    42a0:	90 91 9e 07 	lds	r25, 0x079E
    42a4:	c3 97       	sbiw	r24, 0x33	; 51
    42a6:	2c f0       	brlt	.+10     	; 0x42b2 <init+0x18a>
		{
			General_error |= (1 << THROTTLE_HIGH); 	// Set throttle high error bit
    42a8:	80 91 0e 01 	lds	r24, 0x010E
    42ac:	82 60       	ori	r24, 0x02	; 2
    42ae:	80 93 0e 01 	sts	0x010E, r24
		}
	}

	// Flash LED
	LED1 = 1;
    42b2:	2b 9a       	sbi	0x05, 3	; 5
    42b4:	2f eb       	ldi	r18, 0xBF	; 191
    42b6:	87 e2       	ldi	r24, 0x27	; 39
    42b8:	99 e0       	ldi	r25, 0x09	; 9
    42ba:	21 50       	subi	r18, 0x01	; 1
    42bc:	80 40       	sbci	r24, 0x00	; 0
    42be:	90 40       	sbci	r25, 0x00	; 0
    42c0:	e1 f7       	brne	.-8      	; 0x42ba <init+0x192>
    42c2:	00 c0       	rjmp	.+0      	; 0x42c4 <init+0x19c>
    42c4:	00 00       	nop
	_delay_ms(150);
	LED1 = 0;
    42c6:	2b 98       	cbi	0x05, 3	; 5

	// Beep that init is complete
	menu_beep(1);
    42c8:	81 e0       	ldi	r24, 0x01	; 1
    42ca:	0e 94 76 26 	call	0x4cec	; 0x4cec <menu_beep>
    42ce:	08 95       	ret

000042d0 <__vector_2>:
//* Standard PWM mode
//* Sequential PWM inputs from a normal RC receiver
//************************************************************

ISR(INT1_vect)
{
    42d0:	1f 92       	push	r1
    42d2:	0f 92       	push	r0
    42d4:	0f b6       	in	r0, 0x3f	; 63
    42d6:	0f 92       	push	r0
    42d8:	11 24       	eor	r1, r1
    42da:	2f 93       	push	r18
    42dc:	3f 93       	push	r19
    42de:	8f 93       	push	r24
    42e0:	9f 93       	push	r25
	// Log interrupts that iccur during PWM generation
	if (JitterGate)	JitterFlag = true;	
    42e2:	80 91 66 07 	lds	r24, 0x0766
    42e6:	88 23       	and	r24, r24
    42e8:	19 f0       	breq	.+6      	; 0x42f0 <__vector_2+0x20>
    42ea:	81 e0       	ldi	r24, 0x01	; 1
    42ec:	80 93 67 07 	sts	0x0767, r24

	if (RX_ROLL)	// Rising
    42f0:	4b 9b       	sbis	0x09, 3	; 9
    42f2:	09 c0       	rjmp	.+18     	; 0x4306 <__vector_2+0x36>
	{
		RxChannelStart[AILERON] = TCNT1;
    42f4:	80 91 84 00 	lds	r24, 0x0084
    42f8:	90 91 85 00 	lds	r25, 0x0085
    42fc:	90 93 54 07 	sts	0x0754, r25
    4300:	80 93 53 07 	sts	0x0753, r24
    4304:	14 c0       	rjmp	.+40     	; 0x432e <__vector_2+0x5e>
	} 
	else 
	{				// Falling
		RxChannel[AILERON] = TCNT1 - RxChannelStart[AILERON];
    4306:	80 91 84 00 	lds	r24, 0x0084
    430a:	90 91 85 00 	lds	r25, 0x0085
    430e:	20 91 53 07 	lds	r18, 0x0753
    4312:	30 91 54 07 	lds	r19, 0x0754
    4316:	82 1b       	sub	r24, r18
    4318:	93 0b       	sbc	r25, r19
    431a:	90 93 42 07 	sts	0x0742, r25
    431e:	80 93 41 07 	sts	0x0741, r24
		if (Config.PWM_Sync == AILERON) 
    4322:	80 91 a8 05 	lds	r24, 0x05A8
    4326:	81 30       	cpi	r24, 0x01	; 1
    4328:	11 f4       	brne	.+4      	; 0x432e <__vector_2+0x5e>
		{
			Interrupted = true;						// Signal that interrupt block has finished
    432a:	80 93 3e 07 	sts	0x073E, r24
		}
	}
}
    432e:	9f 91       	pop	r25
    4330:	8f 91       	pop	r24
    4332:	3f 91       	pop	r19
    4334:	2f 91       	pop	r18
    4336:	0f 90       	pop	r0
    4338:	0f be       	out	0x3f, r0	; 63
    433a:	0f 90       	pop	r0
    433c:	1f 90       	pop	r1
    433e:	18 95       	reti

00004340 <__vector_1>:

ISR(INT0_vect)
{
    4340:	1f 92       	push	r1
    4342:	0f 92       	push	r0
    4344:	0f b6       	in	r0, 0x3f	; 63
    4346:	0f 92       	push	r0
    4348:	11 24       	eor	r1, r1
    434a:	2f 93       	push	r18
    434c:	3f 93       	push	r19
    434e:	8f 93       	push	r24
    4350:	9f 93       	push	r25
	if (JitterGate)	JitterFlag = true;	
    4352:	80 91 66 07 	lds	r24, 0x0766
    4356:	88 23       	and	r24, r24
    4358:	19 f0       	breq	.+6      	; 0x4360 <__vector_1+0x20>
    435a:	81 e0       	ldi	r24, 0x01	; 1
    435c:	80 93 67 07 	sts	0x0767, r24

	if (RX_PITCH)	// Rising 
    4360:	4a 9b       	sbis	0x09, 2	; 9
    4362:	09 c0       	rjmp	.+18     	; 0x4376 <__vector_1+0x36>
	{
		RxChannelStart[ELEVATOR] = TCNT1;
    4364:	80 91 84 00 	lds	r24, 0x0084
    4368:	90 91 85 00 	lds	r25, 0x0085
    436c:	90 93 56 07 	sts	0x0756, r25
    4370:	80 93 55 07 	sts	0x0755, r24
    4374:	15 c0       	rjmp	.+42     	; 0x43a0 <__vector_1+0x60>
	} 
	else 
	{				// Falling
		RxChannel[ELEVATOR] = TCNT1 - RxChannelStart[ELEVATOR];
    4376:	80 91 84 00 	lds	r24, 0x0084
    437a:	90 91 85 00 	lds	r25, 0x0085
    437e:	20 91 55 07 	lds	r18, 0x0755
    4382:	30 91 56 07 	lds	r19, 0x0756
    4386:	82 1b       	sub	r24, r18
    4388:	93 0b       	sbc	r25, r19
    438a:	90 93 44 07 	sts	0x0744, r25
    438e:	80 93 43 07 	sts	0x0743, r24
		if (Config.PWM_Sync == ELEVATOR) 
    4392:	80 91 a8 05 	lds	r24, 0x05A8
    4396:	82 30       	cpi	r24, 0x02	; 2
    4398:	19 f4       	brne	.+6      	; 0x43a0 <__vector_1+0x60>
		{
			Interrupted = true;						// Signal that interrupt block has finished
    439a:	81 e0       	ldi	r24, 0x01	; 1
    439c:	80 93 3e 07 	sts	0x073E, r24
		}
	}
}
    43a0:	9f 91       	pop	r25
    43a2:	8f 91       	pop	r24
    43a4:	3f 91       	pop	r19
    43a6:	2f 91       	pop	r18
    43a8:	0f 90       	pop	r0
    43aa:	0f be       	out	0x3f, r0	; 63
    43ac:	0f 90       	pop	r0
    43ae:	1f 90       	pop	r1
    43b0:	18 95       	reti

000043b2 <__vector_7>:

ISR(PCINT3_vect)
{
    43b2:	1f 92       	push	r1
    43b4:	0f 92       	push	r0
    43b6:	0f b6       	in	r0, 0x3f	; 63
    43b8:	0f 92       	push	r0
    43ba:	11 24       	eor	r1, r1
    43bc:	2f 93       	push	r18
    43be:	3f 93       	push	r19
    43c0:	8f 93       	push	r24
    43c2:	9f 93       	push	r25
	if (JitterGate)	JitterFlag = true;	
    43c4:	80 91 66 07 	lds	r24, 0x0766
    43c8:	88 23       	and	r24, r24
    43ca:	19 f0       	breq	.+6      	; 0x43d2 <__vector_7+0x20>
    43cc:	81 e0       	ldi	r24, 0x01	; 1
    43ce:	80 93 67 07 	sts	0x0767, r24
		
	if (RX_COLL)	// Rising
    43d2:	48 9b       	sbis	0x09, 0	; 9
    43d4:	09 c0       	rjmp	.+18     	; 0x43e8 <__vector_7+0x36>
	{
		RxChannelStart[THROTTLE] = TCNT1;
    43d6:	80 91 84 00 	lds	r24, 0x0084
    43da:	90 91 85 00 	lds	r25, 0x0085
    43de:	90 93 52 07 	sts	0x0752, r25
    43e2:	80 93 51 07 	sts	0x0751, r24
    43e6:	15 c0       	rjmp	.+42     	; 0x4412 <__vector_7+0x60>
	} 
	else 
	{				// Falling
		RxChannel[THROTTLE] = TCNT1 - RxChannelStart[THROTTLE];
    43e8:	80 91 84 00 	lds	r24, 0x0084
    43ec:	90 91 85 00 	lds	r25, 0x0085
    43f0:	20 91 51 07 	lds	r18, 0x0751
    43f4:	30 91 52 07 	lds	r19, 0x0752
    43f8:	82 1b       	sub	r24, r18
    43fa:	93 0b       	sbc	r25, r19
    43fc:	90 93 40 07 	sts	0x0740, r25
    4400:	80 93 3f 07 	sts	0x073F, r24
		if (Config.PWM_Sync == THROTTLE) 
    4404:	80 91 a8 05 	lds	r24, 0x05A8
    4408:	81 11       	cpse	r24, r1
    440a:	03 c0       	rjmp	.+6      	; 0x4412 <__vector_7+0x60>
		{
			Interrupted = true;						// Signal that interrupt block has finished
    440c:	81 e0       	ldi	r24, 0x01	; 1
    440e:	80 93 3e 07 	sts	0x073E, r24
		}
	}
}
    4412:	9f 91       	pop	r25
    4414:	8f 91       	pop	r24
    4416:	3f 91       	pop	r19
    4418:	2f 91       	pop	r18
    441a:	0f 90       	pop	r0
    441c:	0f be       	out	0x3f, r0	; 63
    441e:	0f 90       	pop	r0
    4420:	1f 90       	pop	r1
    4422:	18 95       	reti

00004424 <__vector_5>:


ISR(PCINT1_vect)
{
    4424:	1f 92       	push	r1
    4426:	0f 92       	push	r0
    4428:	0f b6       	in	r0, 0x3f	; 63
    442a:	0f 92       	push	r0
    442c:	11 24       	eor	r1, r1
    442e:	2f 93       	push	r18
    4430:	3f 93       	push	r19
    4432:	8f 93       	push	r24
    4434:	9f 93       	push	r25
	if (JitterGate)	JitterFlag = true;
    4436:	80 91 66 07 	lds	r24, 0x0766
    443a:	88 23       	and	r24, r24
    443c:	19 f0       	breq	.+6      	; 0x4444 <__vector_5+0x20>
    443e:	81 e0       	ldi	r24, 0x01	; 1
    4440:	80 93 67 07 	sts	0x0767, r24

	if (RX_AUX)	// Rising
    4444:	18 9b       	sbis	0x03, 0	; 3
    4446:	09 c0       	rjmp	.+18     	; 0x445a <__vector_5+0x36>
	{
		RxChannelStart[GEAR] = TCNT1;
    4448:	80 91 84 00 	lds	r24, 0x0084
    444c:	90 91 85 00 	lds	r25, 0x0085
    4450:	90 93 5a 07 	sts	0x075A, r25
    4454:	80 93 59 07 	sts	0x0759, r24
    4458:	15 c0       	rjmp	.+42     	; 0x4484 <__vector_5+0x60>
	} 
	else 
	{				// Falling
		RxChannel[GEAR] = TCNT1 - RxChannelStart[GEAR];
    445a:	80 91 84 00 	lds	r24, 0x0084
    445e:	90 91 85 00 	lds	r25, 0x0085
    4462:	20 91 59 07 	lds	r18, 0x0759
    4466:	30 91 5a 07 	lds	r19, 0x075A
    446a:	82 1b       	sub	r24, r18
    446c:	93 0b       	sbc	r25, r19
    446e:	90 93 48 07 	sts	0x0748, r25
    4472:	80 93 47 07 	sts	0x0747, r24
		if (Config.PWM_Sync == GEAR) 
    4476:	80 91 a8 05 	lds	r24, 0x05A8
    447a:	84 30       	cpi	r24, 0x04	; 4
    447c:	19 f4       	brne	.+6      	; 0x4484 <__vector_5+0x60>
		{
			Interrupted = true;						// Signal that interrupt block has finished
    447e:	81 e0       	ldi	r24, 0x01	; 1
    4480:	80 93 3e 07 	sts	0x073E, r24
		}
	}
}
    4484:	9f 91       	pop	r25
    4486:	8f 91       	pop	r24
    4488:	3f 91       	pop	r19
    448a:	2f 91       	pop	r18
    448c:	0f 90       	pop	r0
    448e:	0f be       	out	0x3f, r0	; 63
    4490:	0f 90       	pop	r0
    4492:	1f 90       	pop	r1
    4494:	18 95       	reti

00004496 <__vector_3>:
// Compacted CPPM RX code thanks to Edgar
//
//************************************************************

ISR(INT2_vect)
{
    4496:	1f 92       	push	r1
    4498:	0f 92       	push	r0
    449a:	0f b6       	in	r0, 0x3f	; 63
    449c:	0f 92       	push	r0
    449e:	11 24       	eor	r1, r1
    44a0:	2f 93       	push	r18
    44a2:	3f 93       	push	r19
    44a4:	4f 93       	push	r20
    44a6:	5f 93       	push	r21
    44a8:	8f 93       	push	r24
    44aa:	9f 93       	push	r25
    44ac:	af 93       	push	r26
    44ae:	bf 93       	push	r27
    44b0:	ef 93       	push	r30
    44b2:	ff 93       	push	r31
	if (JitterGate)	JitterFlag = true;	
    44b4:	80 91 66 07 	lds	r24, 0x0766
    44b8:	88 23       	and	r24, r24
    44ba:	19 f0       	breq	.+6      	; 0x44c2 <__vector_3+0x2c>
    44bc:	81 e0       	ldi	r24, 0x01	; 1
    44be:	80 93 67 07 	sts	0x0767, r24

    // Backup TCNT1
    uint16_t tCount;
    tCount = TCNT1;
    44c2:	80 91 84 00 	lds	r24, 0x0084
    44c6:	90 91 85 00 	lds	r25, 0x0085

	uint8_t curChannel;
	uint8_t prevChannel;

	if (Config.RxMode != CPPM_MODE)
    44ca:	20 91 a7 05 	lds	r18, 0x05A7
    44ce:	22 23       	and	r18, r18
    44d0:	b9 f0       	breq	.+46     	; 0x4500 <__vector_3+0x6a>
	{
		if (RX_YAW)	// Rising
    44d2:	1a 9b       	sbis	0x03, 2	; 3
    44d4:	05 c0       	rjmp	.+10     	; 0x44e0 <__vector_3+0x4a>
		{
			RxChannelStart[RUDDER] = tCount;
    44d6:	90 93 58 07 	sts	0x0758, r25
    44da:	80 93 57 07 	sts	0x0757, r24
    44de:	77 c0       	rjmp	.+238    	; 0x45ce <__vector_3+0x138>
		} 
		else 
		{			// Falling
			RxChannel[RUDDER] = tCount - RxChannelStart[RUDDER];
    44e0:	20 91 57 07 	lds	r18, 0x0757
    44e4:	30 91 58 07 	lds	r19, 0x0758
    44e8:	82 1b       	sub	r24, r18
    44ea:	93 0b       	sbc	r25, r19
    44ec:	90 93 46 07 	sts	0x0746, r25
    44f0:	80 93 45 07 	sts	0x0745, r24
			if (Config.PWM_Sync == RUDDER) 
    44f4:	80 91 a8 05 	lds	r24, 0x05A8
    44f8:	83 30       	cpi	r24, 0x03	; 3
    44fa:	09 f0       	breq	.+2      	; 0x44fe <__vector_3+0x68>
    44fc:	68 c0       	rjmp	.+208    	; 0x45ce <__vector_3+0x138>
    44fe:	64 c0       	rjmp	.+200    	; 0x45c8 <__vector_3+0x132>
	}
	// CPPM code
	else
	{
		// Only respond to negative-going interrupts
		if (CPPM) return;
    4500:	1a 99       	sbic	0x03, 2	; 3
    4502:	65 c0       	rjmp	.+202    	; 0x45ce <__vector_3+0x138>

		// Check to see if previous period was a sync pulse or too small to be valid
		// If so, reset the channel number
		if (((tCount - PPMSyncStart) > SYNCPULSEWIDTH) || ((tCount - PPMSyncStart) < MINPULSEWIDTH))
    4504:	20 91 64 07 	lds	r18, 0x0764
    4508:	30 91 65 07 	lds	r19, 0x0765
    450c:	ac 01       	movw	r20, r24
    450e:	42 1b       	sub	r20, r18
    4510:	53 0b       	sbc	r21, r19
    4512:	9a 01       	movw	r18, r20
    4514:	2f 35       	cpi	r18, 0x5F	; 95
    4516:	3a 41       	sbci	r19, 0x1A	; 26
    4518:	58 f4       	brcc	.+22     	; 0x4530 <__vector_3+0x9a>
    451a:	20 91 64 07 	lds	r18, 0x0764
    451e:	30 91 65 07 	lds	r19, 0x0765
    4522:	ac 01       	movw	r20, r24
    4524:	42 1b       	sub	r20, r18
    4526:	53 0b       	sbc	r21, r19
    4528:	9a 01       	movw	r18, r20
    452a:	22 3e       	cpi	r18, 0xE2	; 226
    452c:	34 40       	sbci	r19, 0x04	; 4
    452e:	10 f4       	brcc	.+4      	; 0x4534 <__vector_3+0x9e>
		{
			ch_num = 0;
    4530:	10 92 63 07 	sts	0x0763, r1
		}

		// Update PPMSyncStart with current value
		PPMSyncStart = tCount;
    4534:	90 93 65 07 	sts	0x0765, r25
    4538:	80 93 64 07 	sts	0x0764, r24

		// Get the channel number of the current channel in the requested channel order
        curChannel = Config.ChannelOrder[ch_num];
    453c:	e0 91 63 07 	lds	r30, 0x0763
    4540:	f0 e0       	ldi	r31, 0x00	; 0
    4542:	e2 58       	subi	r30, 0x82	; 130
    4544:	fa 4f       	sbci	r31, 0xFA	; 250
    4546:	e1 81       	ldd	r30, Z+1	; 0x01

		// Set up previous channel number based on the requested channel order
		if (ch_num > 0)
    4548:	20 91 63 07 	lds	r18, 0x0763
    454c:	22 23       	and	r18, r18
    454e:	39 f0       	breq	.+14     	; 0x455e <__vector_3+0xc8>
		{
			prevChannel = Config.ChannelOrder[ch_num-1];
    4550:	a0 91 63 07 	lds	r26, 0x0763
    4554:	b0 e0       	ldi	r27, 0x00	; 0
    4556:	a2 58       	subi	r26, 0x82	; 130
    4558:	ba 4f       	sbci	r27, 0xFA	; 250
    455a:	2c 91       	ld	r18, X
    455c:	01 c0       	rjmp	.+2      	; 0x4560 <__vector_3+0xca>
		}
		else
		{
			prevChannel = 0;
    455e:	20 e0       	ldi	r18, 0x00	; 0
		}

		// Measure the channel data
        if (ch_num < MAX_RC_CHANNELS)
    4560:	30 91 63 07 	lds	r19, 0x0763
    4564:	38 30       	cpi	r19, 0x08	; 8
    4566:	38 f4       	brcc	.+14     	; 0x4576 <__vector_3+0xe0>
		{
            RxChannelStart[curChannel] = tCount;
    4568:	f0 e0       	ldi	r31, 0x00	; 0
    456a:	ee 0f       	add	r30, r30
    456c:	ff 1f       	adc	r31, r31
    456e:	ef 5a       	subi	r30, 0xAF	; 175
    4570:	f8 4f       	sbci	r31, 0xF8	; 248
    4572:	91 83       	std	Z+1, r25	; 0x01
    4574:	80 83       	st	Z, r24
		}

        if (ch_num > 0)
    4576:	30 91 63 07 	lds	r19, 0x0763
    457a:	33 23       	and	r19, r19
    457c:	79 f0       	breq	.+30     	; 0x459c <__vector_3+0x106>
        {
		   RxChannel[prevChannel] = tCount - RxChannelStart[prevChannel];
    457e:	30 e0       	ldi	r19, 0x00	; 0
    4580:	22 0f       	add	r18, r18
    4582:	33 1f       	adc	r19, r19
    4584:	f9 01       	movw	r30, r18
    4586:	ef 5a       	subi	r30, 0xAF	; 175
    4588:	f8 4f       	sbci	r31, 0xF8	; 248
    458a:	40 81       	ld	r20, Z
    458c:	51 81       	ldd	r21, Z+1	; 0x01
    458e:	84 1b       	sub	r24, r20
    4590:	95 0b       	sbc	r25, r21
    4592:	f9 01       	movw	r30, r18
    4594:	e1 5c       	subi	r30, 0xC1	; 193
    4596:	f8 4f       	sbci	r31, 0xF8	; 248
    4598:	91 83       	std	Z+1, r25	; 0x01
    459a:	80 83       	st	Z, r24
		}

        // Increment to the next channel
		ch_num++;
    459c:	80 91 63 07 	lds	r24, 0x0763
    45a0:	8f 5f       	subi	r24, 0xFF	; 255
    45a2:	80 93 63 07 	sts	0x0763, r24

		// Work out the highest channel number automagically
		// Update the maximum channel seen so far
		if (ch_num > max_chan)
    45a6:	90 91 63 07 	lds	r25, 0x0763
    45aa:	80 91 4f 07 	lds	r24, 0x074F
    45ae:	89 17       	cp	r24, r25
    45b0:	28 f4       	brcc	.+10     	; 0x45bc <__vector_3+0x126>
		{
			max_chan = ch_num;					// Reset max channel number
    45b2:	80 91 63 07 	lds	r24, 0x0763
    45b6:	80 93 4f 07 	sts	0x074F, r24
    45ba:	09 c0       	rjmp	.+18     	; 0x45ce <__vector_3+0x138>
		}
		// If the current channel is the highest channel, CPPM is complete
		else if (ch_num == max_chan)
    45bc:	90 91 63 07 	lds	r25, 0x0763
    45c0:	80 91 4f 07 	lds	r24, 0x074F
    45c4:	98 13       	cpse	r25, r24
    45c6:	03 c0       	rjmp	.+6      	; 0x45ce <__vector_3+0x138>
		{
			Interrupted = true;					// Signal that interrupt block has finished
    45c8:	81 e0       	ldi	r24, 0x01	; 1
    45ca:	80 93 3e 07 	sts	0x073E, r24
		}
	}
} // ISR(INT2_vect)
    45ce:	ff 91       	pop	r31
    45d0:	ef 91       	pop	r30
    45d2:	bf 91       	pop	r27
    45d4:	af 91       	pop	r26
    45d6:	9f 91       	pop	r25
    45d8:	8f 91       	pop	r24
    45da:	5f 91       	pop	r21
    45dc:	4f 91       	pop	r20
    45de:	3f 91       	pop	r19
    45e0:	2f 91       	pop	r18
    45e2:	0f 90       	pop	r0
    45e4:	0f be       	out	0x3f, r0	; 63
    45e6:	0f 90       	pop	r0
    45e8:	1f 90       	pop	r1
    45ea:	18 95       	reti

000045ec <__vector_20>:

// Interrupts from both UART0 and UART1 RX will come here
ISR(USART1_RX_vect, ISR_ALIASOF(USART0_RX_vect));

ISR(USART0_RX_vect)
{
    45ec:	1f 92       	push	r1
    45ee:	0f 92       	push	r0
    45f0:	0f b6       	in	r0, 0x3f	; 63
    45f2:	0f 92       	push	r0
    45f4:	11 24       	eor	r1, r1
    45f6:	2f 93       	push	r18
    45f8:	3f 93       	push	r19
    45fa:	4f 93       	push	r20
    45fc:	5f 93       	push	r21
    45fe:	6f 93       	push	r22
    4600:	7f 93       	push	r23
    4602:	8f 93       	push	r24
    4604:	9f 93       	push	r25
    4606:	af 93       	push	r26
    4608:	bf 93       	push	r27
    460a:	cf 93       	push	r28
    460c:	ef 93       	push	r30
    460e:	ff 93       	push	r31
	//************************************************************
	//* Common entry code
	//************************************************************

	// Read byte first
	temp = UDR0;
    4610:	40 91 c6 00 	lds	r20, 0x00C6

	// Handle start of new packet
	if ((TCNT1 - PPMSyncStart) > PACKET_TIMER)
    4614:	80 91 84 00 	lds	r24, 0x0084
    4618:	90 91 85 00 	lds	r25, 0x0085
    461c:	20 91 64 07 	lds	r18, 0x0764
    4620:	30 91 65 07 	lds	r19, 0x0765
    4624:	82 1b       	sub	r24, r18
    4626:	93 0b       	sbc	r25, r19
    4628:	85 3c       	cpi	r24, 0xC5	; 197
    462a:	99 40       	sbci	r25, 0x09	; 9
    462c:	80 f0       	brcs	.+32     	; 0x464e <__vector_20+0x62>
	{
		Interrupted = false;
    462e:	10 92 3e 07 	sts	0x073E, r1
		rcindex = 0;
    4632:	10 92 3d 07 	sts	0x073D, r1
		bytecount = 0;
    4636:	10 92 50 07 	sts	0x0750, r1
		ch_num = 0;
    463a:	10 92 63 07 	sts	0x0763, r1
		checksum = 0;
    463e:	10 92 69 07 	sts	0x0769, r1
    4642:	10 92 68 07 	sts	0x0768, r1
		chanmask16 = 0;
    4646:	10 92 62 07 	sts	0x0762, r1
    464a:	10 92 61 07 	sts	0x0761, r1
	}

	// Timestamp this interrupt
	PPMSyncStart = TCNT1;
    464e:	80 91 84 00 	lds	r24, 0x0084
    4652:	90 91 85 00 	lds	r25, 0x0085
    4656:	90 93 65 07 	sts	0x0765, r25
    465a:	80 93 64 07 	sts	0x0764, r24
	
	// Put received byte in buffer if space available
	if (rcindex < SBUFFER_SIZE)
    465e:	80 91 3d 07 	lds	r24, 0x073D
    4662:	89 31       	cpi	r24, 0x19	; 25
    4664:	50 f4       	brcc	.+20     	; 0x467a <__vector_20+0x8e>
	{
		sBuffer[rcindex++] = temp;			
    4666:	e0 91 3d 07 	lds	r30, 0x073D
    466a:	81 e0       	ldi	r24, 0x01	; 1
    466c:	8e 0f       	add	r24, r30
    466e:	80 93 3d 07 	sts	0x073D, r24
    4672:	f0 e0       	ldi	r31, 0x00	; 0
    4674:	ed 5c       	subi	r30, 0xCD	; 205
    4676:	fa 4f       	sbci	r31, 0xFA	; 250
    4678:	40 83       	st	Z, r20
	//* 	bit0 = n/a
	//* 24 endbyte = 00000000b
	//*
	//************************************************************

	if (Config.RxMode == SBUS)
    467a:	80 91 a7 05 	lds	r24, 0x05A7
    467e:	82 30       	cpi	r24, 0x02	; 2
    4680:	09 f0       	breq	.+2      	; 0x4684 <__vector_20+0x98>
    4682:	85 c0       	rjmp	.+266    	; 0x478e <__vector_20+0x1a2>
	{
		// Flag that packet has completed
		if ((bytecount == 24) && (temp == 0x00))
    4684:	80 91 50 07 	lds	r24, 0x0750
    4688:	88 31       	cpi	r24, 0x18	; 24
    468a:	09 f0       	breq	.+2      	; 0x468e <__vector_20+0xa2>
    468c:	f1 c0       	rjmp	.+482    	; 0x4870 <__vector_20+0x284>
    468e:	41 11       	cpse	r20, r1
    4690:	ef c0       	rjmp	.+478    	; 0x4870 <__vector_20+0x284>
		{
			// If frame lost, ignore packet
			if ((sBuffer[23] & 0x20) == 0)
    4692:	80 91 4a 05 	lds	r24, 0x054A
    4696:	85 fd       	sbrc	r24, 5
    4698:	eb c0       	rjmp	.+470    	; 0x4870 <__vector_20+0x284>
			{
				// RC sync established
				Interrupted = true;	
    469a:	81 e0       	ldi	r24, 0x01	; 1
    469c:	80 93 3e 07 	sts	0x073E, r24
    46a0:	80 e0       	ldi	r24, 0x00	; 0
    46a2:	90 e0       	ldi	r25, 0x00	; 0

				// Clear channel data
				for (j = 0; j < MAX_RC_CHANNELS; j++)
				{
					RxChannel[j] = 0;
    46a4:	fc 01       	movw	r30, r24
    46a6:	ee 0f       	add	r30, r30
    46a8:	ff 1f       	adc	r31, r31
    46aa:	e1 5c       	subi	r30, 0xC1	; 193
    46ac:	f8 4f       	sbci	r31, 0xF8	; 248
    46ae:	11 82       	std	Z+1, r1	; 0x01
    46b0:	10 82       	st	Z, r1
    46b2:	01 96       	adiw	r24, 0x01	; 1
			{
				// RC sync established
				Interrupted = true;	

				// Clear channel data
				for (j = 0; j < MAX_RC_CHANNELS; j++)
    46b4:	88 30       	cpi	r24, 0x08	; 8
    46b6:	91 05       	cpc	r25, r1
    46b8:	a9 f7       	brne	.-22     	; 0x46a4 <__vector_20+0xb8>
    46ba:	a8 e5       	ldi	r26, 0x58	; 88
    46bc:	70 e0       	ldi	r23, 0x00	; 0
    46be:	c0 e0       	ldi	r28, 0x00	; 0
    46c0:	60 e0       	ldi	r22, 0x00	; 0
    46c2:	b1 e0       	ldi	r27, 0x01	; 1
                for (j=0; j<88; j++)
                {
                    if (sBuffer[sindex] & (1<<chan_mask))
                    {
						// Place the RC data into the correct channel order for the tranmitted system
						RxChannel[Config.ChannelOrder[chan_shift]] |= (1<<data_mask);
    46c4:	21 e0       	ldi	r18, 0x01	; 1
    46c6:	30 e0       	ldi	r19, 0x00	; 0

                // Deconstruct S-Bus data
				// 8 channels * 11 bits = 88 bits
                for (j=0; j<88; j++)
                {
                    if (sBuffer[sindex] & (1<<chan_mask))
    46c8:	eb 2f       	mov	r30, r27
    46ca:	f0 e0       	ldi	r31, 0x00	; 0
    46cc:	ed 5c       	subi	r30, 0xCD	; 205
    46ce:	fa 4f       	sbci	r31, 0xFA	; 250
    46d0:	80 81       	ld	r24, Z
    46d2:	90 e0       	ldi	r25, 0x00	; 0
    46d4:	06 2e       	mov	r0, r22
    46d6:	02 c0       	rjmp	.+4      	; 0x46dc <__vector_20+0xf0>
    46d8:	95 95       	asr	r25
    46da:	87 95       	ror	r24
    46dc:	0a 94       	dec	r0
    46de:	e2 f7       	brpl	.-8      	; 0x46d8 <__vector_20+0xec>
    46e0:	80 ff       	sbrs	r24, 0
    46e2:	17 c0       	rjmp	.+46     	; 0x4712 <__vector_20+0x126>
                    {
						// Place the RC data into the correct channel order for the tranmitted system
						RxChannel[Config.ChannelOrder[chan_shift]] |= (1<<data_mask);
    46e4:	ec 2f       	mov	r30, r28
    46e6:	f0 e0       	ldi	r31, 0x00	; 0
    46e8:	e2 58       	subi	r30, 0x82	; 130
    46ea:	fa 4f       	sbci	r31, 0xFA	; 250
    46ec:	e1 81       	ldd	r30, Z+1	; 0x01
    46ee:	f0 e0       	ldi	r31, 0x00	; 0
    46f0:	ee 0f       	add	r30, r30
    46f2:	ff 1f       	adc	r31, r31
    46f4:	e1 5c       	subi	r30, 0xC1	; 193
    46f6:	f8 4f       	sbci	r31, 0xF8	; 248
    46f8:	80 81       	ld	r24, Z
    46fa:	91 81       	ldd	r25, Z+1	; 0x01
    46fc:	a9 01       	movw	r20, r18
    46fe:	07 2e       	mov	r0, r23
    4700:	02 c0       	rjmp	.+4      	; 0x4706 <__vector_20+0x11a>
    4702:	44 0f       	add	r20, r20
    4704:	55 1f       	adc	r21, r21
    4706:	0a 94       	dec	r0
    4708:	e2 f7       	brpl	.-8      	; 0x4702 <__vector_20+0x116>
    470a:	84 2b       	or	r24, r20
    470c:	95 2b       	or	r25, r21
    470e:	91 83       	std	Z+1, r25	; 0x01
    4710:	80 83       	st	Z, r24
                    }

                    chan_mask++;
    4712:	6f 5f       	subi	r22, 0xFF	; 255
                    data_mask++;
    4714:	7f 5f       	subi	r23, 0xFF	; 255

                    // If we have done 8 bits, move to next byte in buffer
					if (chan_mask == 8)
    4716:	68 30       	cpi	r22, 0x08	; 8
    4718:	11 f4       	brne	.+4      	; 0x471e <__vector_20+0x132>
                    {
                        chan_mask =0;
                        sindex++;
    471a:	bf 5f       	subi	r27, 0xFF	; 255
                    data_mask++;

                    // If we have done 8 bits, move to next byte in buffer
					if (chan_mask == 8)
                    {
                        chan_mask =0;
    471c:	60 e0       	ldi	r22, 0x00	; 0
                        sindex++;
                    }

                    // If we have reconstructed all 11 bits of one channel's data (2047)
					// increment the channel number
					if (data_mask == 11)
    471e:	7b 30       	cpi	r23, 0x0B	; 11
    4720:	11 f4       	brne	.+4      	; 0x4726 <__vector_20+0x13a>
                    {
                        data_mask =0;
                        chan_shift++;
    4722:	cf 5f       	subi	r28, 0xFF	; 255

                    // If we have reconstructed all 11 bits of one channel's data (2047)
					// increment the channel number
					if (data_mask == 11)
                    {
                        data_mask =0;
    4724:	70 e0       	ldi	r23, 0x00	; 0
    4726:	a1 50       	subi	r26, 0x01	; 1
				// Start from second byte
				sindex = 1;

                // Deconstruct S-Bus data
				// 8 channels * 11 bits = 88 bits
                for (j=0; j<88; j++)
    4728:	79 f6       	brne	.-98     	; 0x46c8 <__vector_20+0xdc>
    472a:	40 e0       	ldi	r20, 0x00	; 0
    472c:	50 e0       	ldi	r21, 0x00	; 0

				// Convert to  OpenAero2 values (0~2047 -> 2500~4999)
				for (j = 0; j < MAX_RC_CHANNELS; j++)
				{
					// Subtract weird-ass Futaba offset
					itemp16= RxChannel[j] - 1024;	
    472e:	fa 01       	movw	r30, r20
    4730:	ee 0f       	add	r30, r30
    4732:	ff 1f       	adc	r31, r31
    4734:	e1 5c       	subi	r30, 0xC1	; 193
    4736:	f8 4f       	sbci	r31, 0xF8	; 248
    4738:	20 81       	ld	r18, Z
    473a:	31 81       	ldd	r19, Z+1	; 0x01
    473c:	34 50       	subi	r19, 0x04	; 4
					
					// Expand into OpenAero2 units							
					itemp16 = itemp16 + (itemp16 >> 2) + (itemp16 >> 3) + (itemp16 >> 4) + (itemp16 >> 5); 	// Quick multiply by 1.469 :)
    473e:	c9 01       	movw	r24, r18
    4740:	95 95       	asr	r25
    4742:	87 95       	ror	r24
    4744:	95 95       	asr	r25
    4746:	87 95       	ror	r24
    4748:	82 0f       	add	r24, r18
    474a:	93 1f       	adc	r25, r19
    474c:	b9 01       	movw	r22, r18
    474e:	a3 e0       	ldi	r26, 0x03	; 3
    4750:	75 95       	asr	r23
    4752:	67 95       	ror	r22
    4754:	aa 95       	dec	r26
    4756:	e1 f7       	brne	.-8      	; 0x4750 <__vector_20+0x164>
    4758:	86 0f       	add	r24, r22
    475a:	97 1f       	adc	r25, r23
    475c:	b9 01       	movw	r22, r18
    475e:	b4 e0       	ldi	r27, 0x04	; 4
    4760:	75 95       	asr	r23
    4762:	67 95       	ror	r22
    4764:	ba 95       	dec	r27
    4766:	e1 f7       	brne	.-8      	; 0x4760 <__vector_20+0x174>
    4768:	86 0f       	add	r24, r22
    476a:	97 1f       	adc	r25, r23
    476c:	c5 e0       	ldi	r28, 0x05	; 5
    476e:	35 95       	asr	r19
    4770:	27 95       	ror	r18
    4772:	ca 95       	dec	r28
    4774:	e1 f7       	brne	.-8      	; 0x476e <__vector_20+0x182>
    4776:	82 0f       	add	r24, r18
    4778:	93 1f       	adc	r25, r19
					//itemp16 = itemp16 + (itemp16 >> 1); // Quicker mulitply by 1.5

					// Add back in OpenAero2 offset
					RxChannel[j] = itemp16 + 3750;				
    477a:	8a 55       	subi	r24, 0x5A	; 90
    477c:	91 4f       	sbci	r25, 0xF1	; 241
    477e:	91 83       	std	Z+1, r25	; 0x01
    4780:	80 83       	st	Z, r24
    4782:	4f 5f       	subi	r20, 0xFF	; 255
    4784:	5f 4f       	sbci	r21, 0xFF	; 255
                        chan_shift++;
                    }
                }

				// Convert to  OpenAero2 values (0~2047 -> 2500~4999)
				for (j = 0; j < MAX_RC_CHANNELS; j++)
    4786:	48 30       	cpi	r20, 0x08	; 8
    4788:	51 05       	cpc	r21, r1
    478a:	89 f6       	brne	.-94     	; 0x472e <__vector_20+0x142>
    478c:	71 c0       	rjmp	.+226    	; 0x4870 <__vector_20+0x284>
	//* 0 = 750us, 1023/2047 = 2250us
	//*
	//************************************************************

	// Handle Spektrum format
	if (Config.RxMode == SPEKTRUM)
    478e:	83 30       	cpi	r24, 0x03	; 3
    4790:	09 f0       	breq	.+2      	; 0x4794 <__vector_20+0x1a8>
    4792:	6e c0       	rjmp	.+220    	; 0x4870 <__vector_20+0x284>
	{
		// Process data when all packets received
		if (bytecount >= 15)
    4794:	80 91 50 07 	lds	r24, 0x0750
    4798:	8f 30       	cpi	r24, 0x0F	; 15
    479a:	08 f4       	brcc	.+2      	; 0x479e <__vector_20+0x1b2>
    479c:	69 c0       	rjmp	.+210    	; 0x4870 <__vector_20+0x284>
		{
			Interrupted = true;	
    479e:	81 e0       	ldi	r24, 0x01	; 1
    47a0:	80 93 3e 07 	sts	0x073E, r24

			// Ahem... ah... just stick the last byte into the buffer manually...(hides)
			sBuffer[15] = temp;
    47a4:	40 93 42 05 	sts	0x0542, r20

			// Set start of channel data per format
			sindex = 2; // Channel data from byte 3

			// Work out if this is 10 or 11 bit data
			if (sBuffer[1] & 0x10) 	// 0 for 10 bit resolution 1 for 11 bit resolution
    47a8:	80 91 34 05 	lds	r24, 0x0534
    47ac:	84 ff       	sbrs	r24, 4
    47ae:	04 c0       	rjmp	.+8      	; 0x47b8 <__vector_20+0x1cc>
			{
				chan_mask = 0x78;	// 11 bit (2048)
				data_mask = 0x07;
    47b0:	c7 e0       	ldi	r28, 0x07	; 7
				chan_shift = 0x03;
    47b2:	63 e0       	ldi	r22, 0x03	; 3
			sindex = 2; // Channel data from byte 3

			// Work out if this is 10 or 11 bit data
			if (sBuffer[1] & 0x10) 	// 0 for 10 bit resolution 1 for 11 bit resolution
			{
				chan_mask = 0x78;	// 11 bit (2048)
    47b4:	78 e7       	ldi	r23, 0x78	; 120
    47b6:	03 c0       	rjmp	.+6      	; 0x47be <__vector_20+0x1d2>
				chan_shift = 0x03;
			}
			else
			{
				chan_mask = 0x3C;	// 10 bit (1024)
				data_mask = 0x03;
    47b8:	c3 e0       	ldi	r28, 0x03	; 3
				chan_shift = 0x02;
    47ba:	62 e0       	ldi	r22, 0x02	; 2
				data_mask = 0x07;
				chan_shift = 0x03;
			}
			else
			{
				chan_mask = 0x3C;	// 10 bit (1024)
    47bc:	7c e3       	ldi	r23, 0x3C	; 60
    47be:	e6 e3       	ldi	r30, 0x36	; 54
    47c0:	f5 e0       	ldi	r31, 0x05	; 5
    47c2:	df 01       	movw	r26, r30
    47c4:	11 97       	sbiw	r26, 0x01	; 1
			// Work out which channel the data is intended for from the channel number data
			// Channels can also be in the second packet. Spektrum has 7 channels per packet.
			for (j = 0; j < 7; j++)
			{
				// Extract channel number
				ch_num = (sBuffer[sindex] & chan_mask) >> chan_shift;
    47c6:	2c 91       	ld	r18, X
    47c8:	82 2f       	mov	r24, r18
    47ca:	87 23       	and	r24, r23
    47cc:	90 e0       	ldi	r25, 0x00	; 0
    47ce:	06 2e       	mov	r0, r22
    47d0:	02 c0       	rjmp	.+4      	; 0x47d6 <__vector_20+0x1ea>
    47d2:	95 95       	asr	r25
    47d4:	87 95       	ror	r24
    47d6:	0a 94       	dec	r0
    47d8:	e2 f7       	brpl	.-8      	; 0x47d2 <__vector_20+0x1e6>
    47da:	80 93 63 07 	sts	0x0763, r24

				// Reconstruct channel data
				temp16 = ((sBuffer[sindex] & data_mask) << 8) + sBuffer[sindex + 1];
    47de:	80 81       	ld	r24, Z

				// Expand to OpenAero2 units if a valid channel
				// Blank channels have the channel number of 16
				if (ch_num < MAX_RC_CHANNELS)
    47e0:	90 91 63 07 	lds	r25, 0x0763
    47e4:	98 30       	cpi	r25, 0x08	; 8
    47e6:	f0 f5       	brcc	.+124    	; 0x4864 <__vector_20+0x278>
			{
				// Extract channel number
				ch_num = (sBuffer[sindex] & chan_mask) >> chan_shift;

				// Reconstruct channel data
				temp16 = ((sBuffer[sindex] & data_mask) << 8) + sBuffer[sindex + 1];
    47e8:	2c 23       	and	r18, r28
    47ea:	30 e0       	ldi	r19, 0x00	; 0
    47ec:	32 2f       	mov	r19, r18
    47ee:	22 27       	eor	r18, r18
    47f0:	28 0f       	add	r18, r24
    47f2:	31 1d       	adc	r19, r1
				// Expand to OpenAero2 units if a valid channel
				// Blank channels have the channel number of 16
				if (ch_num < MAX_RC_CHANNELS)
				{
					// Subtract Spektrum center offset
					if (chan_shift == 0x03) // 11-bit
    47f4:	63 30       	cpi	r22, 0x03	; 3
    47f6:	11 f4       	brne	.+4      	; 0x47fc <__vector_20+0x210>
					{
						itemp16 = temp16 - 1024;
    47f8:	34 50       	subi	r19, 0x04	; 4
    47fa:	01 c0       	rjmp	.+2      	; 0x47fe <__vector_20+0x212>
					}
					else
					{
						itemp16 = temp16 - 512;	
    47fc:	32 50       	subi	r19, 0x02	; 2
					}					

					// Quick multiply by 2.93
					itemp16 = (itemp16 << 1) + (itemp16 >> 1) + (itemp16 >> 2) + (itemp16 >> 3) + (itemp16 >> 4); 
    47fe:	c9 01       	movw	r24, r18
    4800:	88 0f       	add	r24, r24
    4802:	99 1f       	adc	r25, r25
    4804:	a9 01       	movw	r20, r18
    4806:	55 95       	asr	r21
    4808:	47 95       	ror	r20
    480a:	84 0f       	add	r24, r20
    480c:	95 1f       	adc	r25, r21
    480e:	a9 01       	movw	r20, r18
    4810:	55 95       	asr	r21
    4812:	47 95       	ror	r20
    4814:	55 95       	asr	r21
    4816:	47 95       	ror	r20
    4818:	84 0f       	add	r24, r20
    481a:	95 1f       	adc	r25, r21
    481c:	a9 01       	movw	r20, r18
    481e:	a3 e0       	ldi	r26, 0x03	; 3
    4820:	55 95       	asr	r21
    4822:	47 95       	ror	r20
    4824:	aa 95       	dec	r26
    4826:	e1 f7       	brne	.-8      	; 0x4820 <__vector_20+0x234>
    4828:	84 0f       	add	r24, r20
    482a:	95 1f       	adc	r25, r21
    482c:	b4 e0       	ldi	r27, 0x04	; 4
    482e:	35 95       	asr	r19
    4830:	27 95       	ror	r18
    4832:	ba 95       	dec	r27
    4834:	e1 f7       	brne	.-8      	; 0x482e <__vector_20+0x242>
    4836:	82 0f       	add	r24, r18
    4838:	93 1f       	adc	r25, r19

					if (chan_shift == 0x03) // 11-bit
    483a:	63 30       	cpi	r22, 0x03	; 3
    483c:	11 f4       	brne	.+4      	; 0x4842 <__vector_20+0x256>
					{
						// Divide in case of 11-bit value
						itemp16 = itemp16 >> 1;								
    483e:	95 95       	asr	r25
    4840:	87 95       	ror	r24
					}

					// Add back in OpenAero2 offset
					itemp16 += 3750;										

					RxChannel[Config.ChannelOrder[ch_num]] = itemp16;
    4842:	a0 91 63 07 	lds	r26, 0x0763
    4846:	b0 e0       	ldi	r27, 0x00	; 0
    4848:	a2 58       	subi	r26, 0x82	; 130
    484a:	ba 4f       	sbci	r27, 0xFA	; 250
    484c:	11 96       	adiw	r26, 0x01	; 1
    484e:	ac 91       	ld	r26, X
    4850:	b0 e0       	ldi	r27, 0x00	; 0
						// Divide in case of 11-bit value
						itemp16 = itemp16 >> 1;								
					}

					// Add back in OpenAero2 offset
					itemp16 += 3750;										
    4852:	8a 55       	subi	r24, 0x5A	; 90
    4854:	91 4f       	sbci	r25, 0xF1	; 241

					RxChannel[Config.ChannelOrder[ch_num]] = itemp16;
    4856:	aa 0f       	add	r26, r26
    4858:	bb 1f       	adc	r27, r27
    485a:	a1 5c       	subi	r26, 0xC1	; 193
    485c:	b8 4f       	sbci	r27, 0xF8	; 248
    485e:	11 96       	adiw	r26, 0x01	; 1
    4860:	9c 93       	st	X, r25
    4862:	8e 93       	st	-X, r24
    4864:	32 96       	adiw	r30, 0x02	; 2
				chan_shift = 0x02;
			}

			// Work out which channel the data is intended for from the channel number data
			// Channels can also be in the second packet. Spektrum has 7 channels per packet.
			for (j = 0; j < 7; j++)
    4866:	85 e0       	ldi	r24, 0x05	; 5
    4868:	e4 34       	cpi	r30, 0x44	; 68
    486a:	f8 07       	cpc	r31, r24
    486c:	09 f0       	breq	.+2      	; 0x4870 <__vector_20+0x284>
    486e:	a9 cf       	rjmp	.-174    	; 0x47c2 <__vector_20+0x1d6>
	//************************************************************
	//* Common exit code
	//************************************************************

	// Increment byte count
	bytecount++;
    4870:	80 91 50 07 	lds	r24, 0x0750
    4874:	8f 5f       	subi	r24, 0xFF	; 255
    4876:	80 93 50 07 	sts	0x0750, r24
}
    487a:	ff 91       	pop	r31
    487c:	ef 91       	pop	r30
    487e:	cf 91       	pop	r28
    4880:	bf 91       	pop	r27
    4882:	af 91       	pop	r26
    4884:	9f 91       	pop	r25
    4886:	8f 91       	pop	r24
    4888:	7f 91       	pop	r23
    488a:	6f 91       	pop	r22
    488c:	5f 91       	pop	r21
    488e:	4f 91       	pop	r20
    4890:	3f 91       	pop	r19
    4892:	2f 91       	pop	r18
    4894:	0f 90       	pop	r0
    4896:	0f be       	out	0x3f, r0	; 63
    4898:	0f 90       	pop	r0
    489a:	1f 90       	pop	r1
    489c:	18 95       	reti

0000489e <print_menu_frame>:
// style = menu style (0 = main, 1 = sub)
//************************************************************
void print_menu_frame(uint8_t style)
{
	// Print bottom markers
	if (style == 0)
    489e:	81 11       	cpse	r24, r1
    48a0:	23 c0       	rjmp	.+70     	; 0x48e8 <print_menu_frame+0x4a>
	{
		LCD_Display_Text(12, (const unsigned char*)Wingdings, 0, 57); 	// Left
    48a2:	29 e3       	ldi	r18, 0x39	; 57
    48a4:	30 e0       	ldi	r19, 0x00	; 0
    48a6:	40 e0       	ldi	r20, 0x00	; 0
    48a8:	50 e0       	ldi	r21, 0x00	; 0
    48aa:	6d e0       	ldi	r22, 0x0D	; 13
    48ac:	71 e0       	ldi	r23, 0x01	; 1
    48ae:	8c e0       	ldi	r24, 0x0C	; 12
    48b0:	0e 94 51 1c 	call	0x38a2	; 0x38a2 <LCD_Display_Text>
		LCD_Display_Text(10, (const unsigned char*)Wingdings, 38, 59); 	// Up
    48b4:	2b e3       	ldi	r18, 0x3B	; 59
    48b6:	30 e0       	ldi	r19, 0x00	; 0
    48b8:	46 e2       	ldi	r20, 0x26	; 38
    48ba:	50 e0       	ldi	r21, 0x00	; 0
    48bc:	6d e0       	ldi	r22, 0x0D	; 13
    48be:	71 e0       	ldi	r23, 0x01	; 1
    48c0:	8a e0       	ldi	r24, 0x0A	; 10
    48c2:	0e 94 51 1c 	call	0x38a2	; 0x38a2 <LCD_Display_Text>
		LCD_Display_Text(9, (const unsigned char*)Wingdings, 80, 59); 	// Down
    48c6:	2b e3       	ldi	r18, 0x3B	; 59
    48c8:	30 e0       	ldi	r19, 0x00	; 0
    48ca:	40 e5       	ldi	r20, 0x50	; 80
    48cc:	50 e0       	ldi	r21, 0x00	; 0
    48ce:	6d e0       	ldi	r22, 0x0D	; 13
    48d0:	71 e0       	ldi	r23, 0x01	; 1
    48d2:	89 e0       	ldi	r24, 0x09	; 9
    48d4:	0e 94 51 1c 	call	0x38a2	; 0x38a2 <LCD_Display_Text>
		LCD_Display_Text(11, (const unsigned char*)Wingdings, 120, 57); 	// Right
    48d8:	29 e3       	ldi	r18, 0x39	; 57
    48da:	30 e0       	ldi	r19, 0x00	; 0
    48dc:	48 e7       	ldi	r20, 0x78	; 120
    48de:	50 e0       	ldi	r21, 0x00	; 0
    48e0:	6d e0       	ldi	r22, 0x0D	; 13
    48e2:	71 e0       	ldi	r23, 0x01	; 1
    48e4:	8b e0       	ldi	r24, 0x0B	; 11
    48e6:	22 c0       	rjmp	.+68     	; 0x492c <print_menu_frame+0x8e>
	}
	else
	{
		LCD_Display_Text(16, (const unsigned char*)Verdana8, 0, 54); 	// Clear
    48e8:	26 e3       	ldi	r18, 0x36	; 54
    48ea:	30 e0       	ldi	r19, 0x00	; 0
    48ec:	40 e0       	ldi	r20, 0x00	; 0
    48ee:	50 e0       	ldi	r21, 0x00	; 0
    48f0:	65 e2       	ldi	r22, 0x25	; 37
    48f2:	7a e0       	ldi	r23, 0x0A	; 10
    48f4:	80 e1       	ldi	r24, 0x10	; 16
    48f6:	0e 94 51 1c 	call	0x38a2	; 0x38a2 <LCD_Display_Text>
		LCD_Display_Text(10, (const unsigned char*)Wingdings, 38, 59);	// Up
    48fa:	2b e3       	ldi	r18, 0x3B	; 59
    48fc:	30 e0       	ldi	r19, 0x00	; 0
    48fe:	46 e2       	ldi	r20, 0x26	; 38
    4900:	50 e0       	ldi	r21, 0x00	; 0
    4902:	6d e0       	ldi	r22, 0x0D	; 13
    4904:	71 e0       	ldi	r23, 0x01	; 1
    4906:	8a e0       	ldi	r24, 0x0A	; 10
    4908:	0e 94 51 1c 	call	0x38a2	; 0x38a2 <LCD_Display_Text>
		LCD_Display_Text(9, (const unsigned char*)Wingdings, 80, 59);	// Down
    490c:	2b e3       	ldi	r18, 0x3B	; 59
    490e:	30 e0       	ldi	r19, 0x00	; 0
    4910:	40 e5       	ldi	r20, 0x50	; 80
    4912:	50 e0       	ldi	r21, 0x00	; 0
    4914:	6d e0       	ldi	r22, 0x0D	; 13
    4916:	71 e0       	ldi	r23, 0x01	; 1
    4918:	89 e0       	ldi	r24, 0x09	; 9
    491a:	0e 94 51 1c 	call	0x38a2	; 0x38a2 <LCD_Display_Text>
		LCD_Display_Text(17, (const unsigned char*)Verdana8, 103, 54);	// Save
    491e:	26 e3       	ldi	r18, 0x36	; 54
    4920:	30 e0       	ldi	r19, 0x00	; 0
    4922:	47 e6       	ldi	r20, 0x67	; 103
    4924:	50 e0       	ldi	r21, 0x00	; 0
    4926:	65 e2       	ldi	r22, 0x25	; 37
    4928:	7a e0       	ldi	r23, 0x0A	; 10
    492a:	81 e1       	ldi	r24, 0x11	; 17
    492c:	0e 94 51 1c 	call	0x38a2	; 0x38a2 <LCD_Display_Text>
	}

	// Write from buffer
	write_buffer(buffer,1);
    4930:	61 e0       	ldi	r22, 0x01	; 1
    4932:	83 e3       	ldi	r24, 0x33	; 51
    4934:	91 e0       	ldi	r25, 0x01	; 1
    4936:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <write_buffer>
    493a:	08 95       	ret

0000493c <get_menu_range>:
//************************************************************
// get_menu_range - Get range info from PROGMEM for a specific item
//************************************************************

menu_range_t get_menu_range(const unsigned char* menu_ranges, uint8_t menuitem)
{
    493c:	aa e0       	ldi	r26, 0x0A	; 10
    493e:	b0 e0       	ldi	r27, 0x00	; 0
    4940:	e4 ea       	ldi	r30, 0xA4	; 164
    4942:	f4 e2       	ldi	r31, 0x24	; 36
    4944:	0c 94 2b 3d 	jmp	0x7a56	; 0x7a56 <__prologue_saves__+0x20>
	menu_range_t	range;
	memcpy_P(&range, &menu_ranges[menuitem * sizeof(range)], sizeof(range));
    4948:	25 e0       	ldi	r18, 0x05	; 5
    494a:	62 9f       	mul	r22, r18
    494c:	80 0d       	add	r24, r0
    494e:	91 1d       	adc	r25, r1
    4950:	11 24       	eor	r1, r1
    4952:	bc 01       	movw	r22, r24
    4954:	45 e0       	ldi	r20, 0x05	; 5
    4956:	50 e0       	ldi	r21, 0x00	; 0
    4958:	ce 01       	movw	r24, r28
    495a:	06 96       	adiw	r24, 0x06	; 6
    495c:	0e 94 52 3d 	call	0x7aa4	; 0x7aa4 <memcpy_P>
	return (range);
    4960:	85 e0       	ldi	r24, 0x05	; 5
    4962:	fe 01       	movw	r30, r28
    4964:	36 96       	adiw	r30, 0x06	; 6
    4966:	de 01       	movw	r26, r28
    4968:	11 96       	adiw	r26, 0x01	; 1
    496a:	01 90       	ld	r0, Z+
    496c:	0d 92       	st	X+, r0
    496e:	8a 95       	dec	r24
    4970:	e1 f7       	brne	.-8      	; 0x496a <get_menu_range+0x2e>
    4972:	29 81       	ldd	r18, Y+1	; 0x01
    4974:	3a 81       	ldd	r19, Y+2	; 0x02
    4976:	4b 81       	ldd	r20, Y+3	; 0x03
    4978:	5c 81       	ldd	r21, Y+4	; 0x04
    497a:	6d 81       	ldd	r22, Y+5	; 0x05
}
    497c:	70 e0       	ldi	r23, 0x00	; 0
    497e:	80 e0       	ldi	r24, 0x00	; 0
    4980:	90 e0       	ldi	r25, 0x00	; 0
    4982:	2a 96       	adiw	r28, 0x0a	; 10
    4984:	e2 e0       	ldi	r30, 0x02	; 2
    4986:	0c 94 47 3d 	jmp	0x7a8e	; 0x7a8e <__epilogue_restores__+0x20>

0000498a <print_menu_text>:
// x = horizontal location on screen
// y = vertical location on screen
//************************************************************

void print_menu_text(int16_t values, uint8_t style, uint8_t text_link, uint8_t x, uint8_t y)
{
    498a:	a1 e0       	ldi	r26, 0x01	; 1
    498c:	b0 e0       	ldi	r27, 0x00	; 0
    498e:	eb ec       	ldi	r30, 0xCB	; 203
    4990:	f4 e2       	ldi	r31, 0x24	; 36
    4992:	0c 94 29 3d 	jmp	0x7a52	; 0x7a52 <__prologue_saves__+0x1c>
    4996:	e4 2f       	mov	r30, r20
	if ((style == 0) || (style == 2)) // Numeral
    4998:	36 2f       	mov	r19, r22
    499a:	3d 7f       	andi	r19, 0xFD	; 253
    499c:	81 f4       	brne	.+32     	; 0x49be <print_menu_text+0x34>
    499e:	4a e0       	ldi	r20, 0x0A	; 10
    49a0:	6c e4       	ldi	r22, 0x4C	; 76
    49a2:	75 e0       	ldi	r23, 0x05	; 5
    49a4:	29 83       	std	Y+1, r18	; 0x01
    49a6:	0e 94 5b 3d 	call	0x7ab6	; 0x7ab6 <__itoa_ncheck>
	{
		mugui_lcd_puts(itoa(values,pBuffer,10),(const unsigned char*)Verdana8,x,y);
    49aa:	10 e0       	ldi	r17, 0x00	; 0
    49ac:	29 81       	ldd	r18, Y+1	; 0x01
    49ae:	42 2f       	mov	r20, r18
    49b0:	50 e0       	ldi	r21, 0x00	; 0
    49b2:	98 01       	movw	r18, r16
    49b4:	65 e2       	ldi	r22, 0x25	; 37
    49b6:	7a e0       	ldi	r23, 0x0A	; 10
    49b8:	0e 94 e7 33 	call	0x67ce	; 0x67ce <mugui_lcd_puts>
    49bc:	0b c0       	rjmp	.+22     	; 0x49d4 <print_menu_text+0x4a>
	}
	else if (style == 1) // Text
    49be:	61 30       	cpi	r22, 0x01	; 1
    49c0:	49 f4       	brne	.+18     	; 0x49d4 <print_menu_text+0x4a>
	{
		LCD_Display_Text(text_link, (const unsigned char*)Verdana8,x,y);
    49c2:	10 e0       	ldi	r17, 0x00	; 0
    49c4:	42 2f       	mov	r20, r18
    49c6:	50 e0       	ldi	r21, 0x00	; 0
    49c8:	98 01       	movw	r18, r16
    49ca:	65 e2       	ldi	r22, 0x25	; 37
    49cc:	7a e0       	ldi	r23, 0x0A	; 10
    49ce:	8e 2f       	mov	r24, r30
    49d0:	0e 94 51 1c 	call	0x38a2	; 0x38a2 <LCD_Display_Text>
	}
}
    49d4:	21 96       	adiw	r28, 0x01	; 1
    49d6:	e4 e0       	ldi	r30, 0x04	; 4
    49d8:	0c 94 45 3d 	jmp	0x7a8a	; 0x7a8a <__epilogue_restores__+0x1c>

000049dc <poll_buttons>:
// Poll buttons, wait until something pressed, debounce and 
// return button info.
//************************************************************

uint8_t poll_buttons(bool acceleration)
{
    49dc:	68 2f       	mov	r22, r24
	static uint8_t button_count = 0;
	uint8_t buttons = 0;

	button = (PINB & 0xf0); // button is global, buttons is local
    49de:	93 b1       	in	r25, 0x03	; 3
    49e0:	90 7f       	andi	r25, 0xF0	; 240
    49e2:	90 93 6a 07 	sts	0x076A, r25
//************************************************************

uint8_t poll_buttons(bool acceleration)
{
	static uint8_t button_count = 0;
	uint8_t buttons = 0;
    49e6:	80 e0       	ldi	r24, 0x00	; 0
			button = buttons;
		}

		// Reset button acceleration
		button_count = 0;
		button_multiplier = 1;
    49e8:	71 e0       	ldi	r23, 0x01	; 1
	static uint8_t button_count = 0;
	uint8_t buttons = 0;

	button = (PINB & 0xf0); // button is global, buttons is local

	while (button == NONE)					
    49ea:	90 91 6a 07 	lds	r25, 0x076A
    49ee:	90 3f       	cpi	r25, 0xF0	; 240
    49f0:	c9 f4       	brne	.+50     	; 0x4a24 <poll_buttons+0x48>
	{
		buttons = (PINB & 0xf0);	
    49f2:	83 b1       	in	r24, 0x03	; 3
    49f4:	80 7f       	andi	r24, 0xF0	; 240
    49f6:	ef e4       	ldi	r30, 0x4F	; 79
    49f8:	f3 ec       	ldi	r31, 0xC3	; 195
    49fa:	31 97       	sbiw	r30, 0x01	; 1
    49fc:	f1 f7       	brne	.-4      	; 0x49fa <poll_buttons+0x1e>
    49fe:	00 c0       	rjmp	.+0      	; 0x4a00 <poll_buttons+0x24>
    4a00:	00 00       	nop
		_delay_ms(10);

		if (buttons != (PINB & 0xf0))
    4a02:	23 b1       	in	r18, 0x03	; 3
    4a04:	48 2f       	mov	r20, r24
    4a06:	50 e0       	ldi	r21, 0x00	; 0
    4a08:	20 7f       	andi	r18, 0xF0	; 240
    4a0a:	30 e0       	ldi	r19, 0x00	; 0
    4a0c:	42 17       	cp	r20, r18
    4a0e:	53 07       	cpc	r21, r19
    4a10:	19 f4       	brne	.+6      	; 0x4a18 <poll_buttons+0x3c>
		{
			buttons = 0; // Buttons different
		}
		else // Buttons the same - update global
		{
			button = buttons;
    4a12:	80 93 6a 07 	sts	0x076A, r24
    4a16:	01 c0       	rjmp	.+2      	; 0x4a1a <poll_buttons+0x3e>
		buttons = (PINB & 0xf0);	
		_delay_ms(10);

		if (buttons != (PINB & 0xf0))
		{
			buttons = 0; // Buttons different
    4a18:	80 e0       	ldi	r24, 0x00	; 0
		{
			button = buttons;
		}

		// Reset button acceleration
		button_count = 0;
    4a1a:	10 92 1e 01 	sts	0x011E, r1
		button_multiplier = 1;
    4a1e:	70 93 6b 07 	sts	0x076B, r23
    4a22:	e3 cf       	rjmp	.-58     	; 0x49ea <poll_buttons+0xe>
	}

	// Check for buttons being held down if requested
	if ((button != NONE) && (acceleration))
    4a24:	66 23       	and	r22, r22
    4a26:	71 f0       	breq	.+28     	; 0x4a44 <poll_buttons+0x68>
	{
		// Count the number of times incremented
		button_count++; 
    4a28:	90 91 1e 01 	lds	r25, 0x011E
    4a2c:	9f 5f       	subi	r25, 0xFF	; 255
    4a2e:	90 93 1e 01 	sts	0x011E, r25
		if (button_count >= 10)
    4a32:	9a 30       	cpi	r25, 0x0A	; 10
    4a34:	38 f0       	brcs	.+14     	; 0x4a44 <poll_buttons+0x68>
		{
			button_count = 0;
    4a36:	10 92 1e 01 	sts	0x011E, r1
			button_multiplier ++;
    4a3a:	90 91 6b 07 	lds	r25, 0x076B
    4a3e:	9f 5f       	subi	r25, 0xFF	; 255
    4a40:	90 93 6b 07 	sts	0x076B, r25
		}
	}

	return buttons;
}
    4a44:	08 95       	ret

00004a46 <do_menu_item>:
// servo_enable = Enable real-time updating of servo position
// servo_number = Servo number to update
//************************************************************

void do_menu_item(uint8_t menuitem, int8_t *values, uint8_t mult, menu_range_t range, int8_t offset, uint8_t text_link, bool servo_enable, int16_t servo_number)
{
    4a46:	a8 e1       	ldi	r26, 0x18	; 24
    4a48:	b0 e0       	ldi	r27, 0x00	; 0
    4a4a:	e9 e2       	ldi	r30, 0x29	; 41
    4a4c:	f5 e2       	ldi	r31, 0x25	; 37
    4a4e:	0c 94 1b 3d 	jmp	0x7a36	; 0x7a36 <__prologue_saves__>
    4a52:	98 2e       	mov	r9, r24
    4a54:	79 8b       	std	Y+17, r23	; 0x11
    4a56:	68 8b       	std	Y+16, r22	; 0x10
    4a58:	b4 2e       	mov	r11, r20
    4a5a:	ed 82       	std	Y+5, r14	; 0x05
    4a5c:	fe 82       	std	Y+6, r15	; 0x06
    4a5e:	0f 83       	std	Y+7, r16	; 0x07
    4a60:	18 87       	std	Y+8, r17	; 0x08
    4a62:	29 87       	std	Y+9, r18	; 0x09
    4a64:	4e 2d       	mov	r20, r14
    4a66:	3f 2d       	mov	r19, r15
    4a68:	0d 87       	std	Y+13, r16	; 0x0d
    4a6a:	1a 87       	std	Y+10, r17	; 0x0a
	mugui_size16_t size;
	int16_t temp16;
	int16_t value = (int8_t)*values;
    4a6c:	fb 01       	movw	r30, r22
    4a6e:	20 81       	ld	r18, Z
    4a70:	62 2e       	mov	r6, r18
    4a72:	77 24       	eor	r7, r7
    4a74:	67 fc       	sbrc	r6, 7
    4a76:	70 94       	com	r7
	uint8_t button_inc = 0;
	bool	button_lock = false;
	bool	first_time = true;

	// Multiply value for display only if style is 2
	if (range.style == 2)
    4a78:	12 30       	cpi	r17, 0x02	; 2
    4a7a:	29 f4       	brne	.+10     	; 0x4a86 <do_menu_item+0x40>
	{
		value = value * mult;
    4a7c:	5b 2d       	mov	r21, r11
    4a7e:	25 03       	mulsu	r18, r21
    4a80:	30 01       	movw	r6, r0
    4a82:	11 24       	eor	r1, r1
    4a84:	02 c0       	rjmp	.+4      	; 0x4a8a <do_menu_item+0x44>
	}
	else mult = 1;
    4a86:	bb 24       	eor	r11, r11
    4a88:	b3 94       	inc	r11

	button = NONE;
    4a8a:	20 ef       	ldi	r18, 0xF0	; 240
    4a8c:	20 93 6a 07 	sts	0x076A, r18
		{
			value = (range.default_value * mult);
		}

		// Limit values to set ranges
		if (value < (range.lower * mult)) 
    4a90:	8b 2d       	mov	r24, r11
    4a92:	90 e0       	ldi	r25, 0x00	; 0
    4a94:	9b 8b       	std	Y+19, r25	; 0x13
    4a96:	8a 8b       	std	Y+18, r24	; 0x12
    4a98:	2b 2d       	mov	r18, r11
    4a9a:	42 03       	mulsu	r20, r18
    4a9c:	10 01       	movw	r2, r0
    4a9e:	11 24       	eor	r1, r1
		{
			value = range.lower * mult;
		}
		
		if (value > (range.upper * mult)) 
    4aa0:	32 03       	mulsu	r19, r18
    4aa2:	a0 01       	movw	r20, r0
    4aa4:	11 24       	eor	r1, r1
    4aa6:	5f 87       	std	Y+15, r21	; 0x0f
    4aa8:	4e 87       	std	Y+14, r20	; 0x0e
	uint8_t display_update = 0;
	uint8_t servo_update = 0;
	uint8_t button_update = 0;
	uint8_t button_inc = 0;
	bool	button_lock = false;
	bool	first_time = true;
    4aaa:	91 e0       	ldi	r25, 0x01	; 1
	int16_t value = (int8_t)*values;
	uint8_t display_update = 0;
	uint8_t servo_update = 0;
	uint8_t button_update = 0;
	uint8_t button_inc = 0;
	bool	button_lock = false;
    4aac:	51 2c       	mov	r5, r1
	mugui_size16_t size;
	int16_t temp16;
	int16_t value = (int8_t)*values;
	uint8_t display_update = 0;
	uint8_t servo_update = 0;
	uint8_t button_update = 0;
    4aae:	d1 2c       	mov	r13, r1
{
	mugui_size16_t size;
	int16_t temp16;
	int16_t value = (int8_t)*values;
	uint8_t display_update = 0;
	uint8_t servo_update = 0;
    4ab0:	41 2c       	mov	r4, r1
void do_menu_item(uint8_t menuitem, int8_t *values, uint8_t mult, menu_range_t range, int8_t offset, uint8_t text_link, bool servo_enable, int16_t servo_number)
{
	mugui_size16_t size;
	int16_t temp16;
	int16_t value = (int8_t)*values;
	uint8_t display_update = 0;
    4ab2:	f1 2c       	mov	r15, r1
			first_time = false;

			clear_buffer(buffer);

			// Print title
			gLCDprint_Menu_P((char*)pgm_read_word(&text_menu[menuitem]), (const unsigned char*)Verdana14, 0, 0);
    4ab4:	09 2d       	mov	r16, r9
    4ab6:	10 e0       	ldi	r17, 0x00	; 0
    4ab8:	00 0f       	add	r16, r16
    4aba:	11 1f       	adc	r17, r17
    4abc:	04 5f       	subi	r16, 0xF4	; 244
    4abe:	11 4f       	sbci	r17, 0xF1	; 241

			// Print value
			if ((range.style == 0) || (range.style == 2)) // numeric and numeric * 4
    4ac0:	8a 85       	ldd	r24, Y+10	; 0x0a
    4ac2:	8d 7f       	andi	r24, 0xFD	; 253
    4ac4:	8c 8b       	std	Y+20, r24	; 0x14
				mugui_lcd_puts(itoa(value,pBuffer,10),(const unsigned char*)Verdana14,((128-size.x)/2)+offset,25);
			}
			else // text
			{
				// Write text, centered on screen
				pgm_mugui_scopy((char*)pgm_read_word(&text_menu[text_link + value])); // Copy string to pBuffer
    4ac6:	ea 2d       	mov	r30, r10
    4ac8:	f0 e0       	ldi	r31, 0x00	; 0
    4aca:	fe 8b       	std	Y+22, r31	; 0x16
    4acc:	ed 8b       	std	Y+21, r30	; 0x15
			// Print value
			if ((range.style == 0) || (range.style == 2)) // numeric and numeric * 4
			{
				// Write numeric value, centered on screen
				mugui_text_sizestring(itoa(value,pBuffer,10), (const unsigned char*)Verdana14, &size);
				mugui_lcd_puts(itoa(value,pBuffer,10),(const unsigned char*)Verdana14,((128-size.x)/2)+offset,25);
    4ace:	2c 2d       	mov	r18, r12
    4ad0:	33 27       	eor	r19, r19
    4ad2:	27 fd       	sbrc	r18, 7
    4ad4:	30 95       	com	r19
    4ad6:	38 8f       	std	Y+24, r19	; 0x18
    4ad8:	2f 8b       	std	Y+23, r18	; 0x17
		}

		// Set servo position if required and update every 4 * 5ms = 20ms
		// Ignore if the output is marked as a motor
		if (((servo_enable) && (servo_update >= 4)) &&
			((Config.Channel[servo_number].P1_sensors & (1 << MotorMarker)) == 0))
    4ada:	8d e1       	ldi	r24, 0x1D	; 29
    4adc:	ed a5       	ldd	r30, Y+45	; 0x2d
    4ade:	fe a5       	ldd	r31, Y+46	; 0x2e
    4ae0:	8e 9f       	mul	r24, r30
    4ae2:	a0 01       	movw	r20, r0
    4ae4:	8f 9f       	mul	r24, r31
    4ae6:	50 0d       	add	r21, r0
    4ae8:	11 24       	eor	r1, r1
    4aea:	40 5e       	subi	r20, 0xE0	; 224
    4aec:	59 4f       	sbci	r21, 0xF9	; 249
    4aee:	5c 87       	std	Y+12, r21	; 0x0c
    4af0:	4b 87       	std	Y+11, r20	; 0x0b
	button = NONE;

	// This is a loop that cycles until Button 4 is pressed (Save)
	// The GLCD updating slows servo updates down too much so only update the GLCD periodically
	// When not updating the GLCD the servo should be updated at 50Hz (20ms)
	while (button != ENTER)
    4af2:	80 91 6a 07 	lds	r24, 0x076A
    4af6:	80 3e       	cpi	r24, 0xE0	; 224
    4af8:	09 f4       	brne	.+2      	; 0x4afc <do_menu_item+0xb6>
    4afa:	e5 c0       	rjmp	.+458    	; 0x4cc6 <do_menu_item+0x280>
	{
		// Increment loopcount so that we can time various things
		display_update++;
		servo_update++;
    4afc:	43 94       	inc	r4

		// Vary the button increment delay depending on the function
		if (servo_enable)
    4afe:	88 20       	and	r8, r8
    4b00:	11 f0       	breq	.+4      	; 0x4b06 <do_menu_item+0xc0>
		{
			button_inc = 20; // For servos
    4b02:	24 e1       	ldi	r18, 0x14	; 20
    4b04:	01 c0       	rjmp	.+2      	; 0x4b08 <do_menu_item+0xc2>

		}
		else
		{
			button_inc = 1;	// For everything else
    4b06:	21 e0       	ldi	r18, 0x01	; 1
		}

		// Increment button timer when pressed
		if (button != NONE)
    4b08:	80 3f       	cpi	r24, 0xF0	; 240
    4b0a:	19 f0       	breq	.+6      	; 0x4b12 <do_menu_item+0xcc>
		{
			button_update++;
    4b0c:	d3 94       	inc	r13

			// Release button lock after button_inc loops
			if (button_update > button_inc)
    4b0e:	2d 15       	cp	r18, r13
    4b10:	10 f4       	brcc	.+4      	; 0x4b16 <do_menu_item+0xd0>
		}
		// Remove lock when not pressed
		else 
		{
			button_update = 0;
			button_lock = false;
    4b12:	51 2c       	mov	r5, r1
			} 
		}
		// Remove lock when not pressed
		else 
		{
			button_update = 0;
    4b14:	d1 2c       	mov	r13, r1
			button_lock = false;
		}

		// Display update
		if 	(!servo_enable || 									// Non-servo value or
    4b16:	88 20       	and	r8, r8
    4b18:	49 f0       	breq	.+18     	; 0x4b2c <do_menu_item+0xe6>
	// The GLCD updating slows servo updates down too much so only update the GLCD periodically
	// When not updating the GLCD the servo should be updated at 50Hz (20ms)
	while (button != ENTER)
	{
		// Increment loopcount so that we can time various things
		display_update++;
    4b1a:	f3 94       	inc	r15
			button_update = 0;
			button_lock = false;
		}

		// Display update
		if 	(!servo_enable || 									// Non-servo value or
    4b1c:	ff e1       	ldi	r31, 0x1F	; 31
    4b1e:	ff 15       	cp	r31, r15
    4b20:	10 f4       	brcc	.+4      	; 0x4b26 <do_menu_item+0xe0>
			((display_update >= 32) && (button != NONE)) || 	// Servo value and 32 cycles passed but only with a button pressed or...
    4b22:	80 3f       	cpi	r24, 0xF0	; 240
    4b24:	19 f4       	brne	.+6      	; 0x4b2c <do_menu_item+0xe6>
    4b26:	99 23       	and	r25, r25
    4b28:	09 f4       	brne	.+2      	; 0x4b2c <do_menu_item+0xe6>
    4b2a:	6a c0       	rjmp	.+212    	; 0x4c00 <do_menu_item+0x1ba>
			 (first_time))										// First time into routine
		{
			display_update = 0;
			first_time = false;

			clear_buffer(buffer);
    4b2c:	83 e3       	ldi	r24, 0x33	; 51
    4b2e:	91 e0       	ldi	r25, 0x01	; 1
    4b30:	0e 94 a8 1a 	call	0x3550	; 0x3550 <clear_buffer>

			// Print title
			gLCDprint_Menu_P((char*)pgm_read_word(&text_menu[menuitem]), (const unsigned char*)Verdana14, 0, 0);
    4b34:	f8 01       	movw	r30, r16
    4b36:	85 91       	lpm	r24, Z+
    4b38:	94 91       	lpm	r25, Z
    4b3a:	20 e0       	ldi	r18, 0x00	; 0
    4b3c:	30 e0       	ldi	r19, 0x00	; 0
    4b3e:	40 e0       	ldi	r20, 0x00	; 0
    4b40:	50 e0       	ldi	r21, 0x00	; 0
    4b42:	67 e7       	ldi	r22, 0x77	; 119
    4b44:	71 e0       	ldi	r23, 0x01	; 1
    4b46:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <gLCDprint_Menu_P>

			// Print value
			if ((range.style == 0) || (range.style == 2)) // numeric and numeric * 4
    4b4a:	2c 89       	ldd	r18, Y+20	; 0x14
    4b4c:	21 11       	cpse	r18, r1
    4b4e:	28 c0       	rjmp	.+80     	; 0x4ba0 <do_menu_item+0x15a>
    4b50:	4a e0       	ldi	r20, 0x0A	; 10
    4b52:	6c e4       	ldi	r22, 0x4C	; 76
    4b54:	75 e0       	ldi	r23, 0x05	; 5
    4b56:	c3 01       	movw	r24, r6
    4b58:	0e 94 5b 3d 	call	0x7ab6	; 0x7ab6 <__itoa_ncheck>
			{
				// Write numeric value, centered on screen
				mugui_text_sizestring(itoa(value,pBuffer,10), (const unsigned char*)Verdana14, &size);
    4b5c:	ae 01       	movw	r20, r28
    4b5e:	4f 5f       	subi	r20, 0xFF	; 255
    4b60:	5f 4f       	sbci	r21, 0xFF	; 255
    4b62:	67 e7       	ldi	r22, 0x77	; 119
    4b64:	71 e0       	ldi	r23, 0x01	; 1
    4b66:	0e 94 d2 32 	call	0x65a4	; 0x65a4 <mugui_text_sizestring>
				mugui_lcd_puts(itoa(value,pBuffer,10),(const unsigned char*)Verdana14,((128-size.x)/2)+offset,25);
    4b6a:	89 81       	ldd	r24, Y+1	; 0x01
    4b6c:	9a 81       	ldd	r25, Y+2	; 0x02
    4b6e:	70 e8       	ldi	r23, 0x80	; 128
    4b70:	e7 2e       	mov	r14, r23
    4b72:	f1 2c       	mov	r15, r1
    4b74:	e8 1a       	sub	r14, r24
    4b76:	f9 0a       	sbc	r15, r25
    4b78:	f6 94       	lsr	r15
    4b7a:	e7 94       	ror	r14
    4b7c:	4f 89       	ldd	r20, Y+23	; 0x17
    4b7e:	58 8d       	ldd	r21, Y+24	; 0x18
    4b80:	e4 0e       	add	r14, r20
    4b82:	f5 1e       	adc	r15, r21
    4b84:	4a e0       	ldi	r20, 0x0A	; 10
    4b86:	6c e4       	ldi	r22, 0x4C	; 76
    4b88:	75 e0       	ldi	r23, 0x05	; 5
    4b8a:	c3 01       	movw	r24, r6
    4b8c:	0e 94 5b 3d 	call	0x7ab6	; 0x7ab6 <__itoa_ncheck>
    4b90:	29 e1       	ldi	r18, 0x19	; 25
    4b92:	30 e0       	ldi	r19, 0x00	; 0
    4b94:	a7 01       	movw	r20, r14
    4b96:	67 e7       	ldi	r22, 0x77	; 119
    4b98:	71 e0       	ldi	r23, 0x01	; 1
    4b9a:	0e 94 e7 33 	call	0x67ce	; 0x67ce <mugui_lcd_puts>
    4b9e:	25 c0       	rjmp	.+74     	; 0x4bea <do_menu_item+0x1a4>
			}
			else // text
			{
				// Write text, centered on screen
				pgm_mugui_scopy((char*)pgm_read_word(&text_menu[text_link + value])); // Copy string to pBuffer
    4ba0:	ed 89       	ldd	r30, Y+21	; 0x15
    4ba2:	fe 89       	ldd	r31, Y+22	; 0x16
    4ba4:	e6 0d       	add	r30, r6
    4ba6:	f7 1d       	adc	r31, r7
    4ba8:	ee 0f       	add	r30, r30
    4baa:	ff 1f       	adc	r31, r31
    4bac:	e4 5f       	subi	r30, 0xF4	; 244
    4bae:	f1 4f       	sbci	r31, 0xF1	; 241
    4bb0:	85 91       	lpm	r24, Z+
    4bb2:	94 91       	lpm	r25, Z
    4bb4:	0e 94 1c 33 	call	0x6638	; 0x6638 <pgm_mugui_scopy>

				mugui_text_sizestring((char*)pBuffer, (const unsigned char*)Verdana14, &size);
    4bb8:	ae 01       	movw	r20, r28
    4bba:	4f 5f       	subi	r20, 0xFF	; 255
    4bbc:	5f 4f       	sbci	r21, 0xFF	; 255
    4bbe:	67 e7       	ldi	r22, 0x77	; 119
    4bc0:	71 e0       	ldi	r23, 0x01	; 1
    4bc2:	8c e4       	ldi	r24, 0x4C	; 76
    4bc4:	95 e0       	ldi	r25, 0x05	; 5
    4bc6:	0e 94 d2 32 	call	0x65a4	; 0x65a4 <mugui_text_sizestring>
				LCD_Display_Text(text_link + value, (const unsigned char*)Verdana14,((128-size.x)/2),25);
    4bca:	89 81       	ldd	r24, Y+1	; 0x01
    4bcc:	9a 81       	ldd	r25, Y+2	; 0x02
    4bce:	40 e8       	ldi	r20, 0x80	; 128
    4bd0:	50 e0       	ldi	r21, 0x00	; 0
    4bd2:	48 1b       	sub	r20, r24
    4bd4:	59 0b       	sbc	r21, r25
    4bd6:	56 95       	lsr	r21
    4bd8:	47 95       	ror	r20
    4bda:	29 e1       	ldi	r18, 0x19	; 25
    4bdc:	30 e0       	ldi	r19, 0x00	; 0
    4bde:	67 e7       	ldi	r22, 0x77	; 119
    4be0:	71 e0       	ldi	r23, 0x01	; 1
    4be2:	8a 2d       	mov	r24, r10
    4be4:	86 0d       	add	r24, r6
    4be6:	0e 94 51 1c 	call	0x38a2	; 0x38a2 <LCD_Display_Text>
			}

			// Print bottom markers
			print_menu_frame(1);
    4bea:	81 e0       	ldi	r24, 0x01	; 1
    4bec:	0e 94 4f 24 	call	0x489e	; 0x489e <print_menu_frame>

			// Write from buffer
			write_buffer(buffer,1);
    4bf0:	61 e0       	ldi	r22, 0x01	; 1
    4bf2:	83 e3       	ldi	r24, 0x33	; 51
    4bf4:	91 e0       	ldi	r25, 0x01	; 1
    4bf6:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <write_buffer>
		}

		// Poll buttons when idle
		// Don't use button acceleration when moving servos
		// And don't block the code with poll_buttons()
		if (servo_enable)
    4bfa:	88 20       	and	r8, r8
    4bfc:	49 f0       	breq	.+18     	; 0x4c10 <do_menu_item+0x1ca>
		// Display update
		if 	(!servo_enable || 									// Non-servo value or
			((display_update >= 32) && (button != NONE)) || 	// Servo value and 32 cycles passed but only with a button pressed or...
			 (first_time))										// First time into routine
		{
			display_update = 0;
    4bfe:	f1 2c       	mov	r15, r1
		// Poll buttons when idle
		// Don't use button acceleration when moving servos
		// And don't block the code with poll_buttons()
		if (servo_enable)
		{
			button = (PINB & 0xf0);	
    4c00:	83 b1       	in	r24, 0x03	; 3
    4c02:	80 7f       	andi	r24, 0xF0	; 240
    4c04:	80 93 6a 07 	sts	0x076A, r24
			button_multiplier = 1;
    4c08:	81 e0       	ldi	r24, 0x01	; 1
    4c0a:	80 93 6b 07 	sts	0x076B, r24
    4c0e:	04 c0       	rjmp	.+8      	; 0x4c18 <do_menu_item+0x1d2>
		}
		else
		{
			poll_buttons(true);
    4c10:	81 e0       	ldi	r24, 0x01	; 1
    4c12:	0e 94 ee 24 	call	0x49dc	; 0x49dc <poll_buttons>
		// Display update
		if 	(!servo_enable || 									// Non-servo value or
			((display_update >= 32) && (button != NONE)) || 	// Servo value and 32 cycles passed but only with a button pressed or...
			 (first_time))										// First time into routine
		{
			display_update = 0;
    4c16:	f1 2c       	mov	r15, r1
		{
			poll_buttons(true);
		}

		// Handle cursor Up/Down limits
		if (button == DOWN)
    4c18:	80 91 6a 07 	lds	r24, 0x076A
    4c1c:	80 3d       	cpi	r24, 0xD0	; 208
    4c1e:	51 f4       	brne	.+20     	; 0x4c34 <do_menu_item+0x1ee>
		{
			if (button_lock == false)
    4c20:	51 10       	cpse	r5, r1
    4c22:	61 c0       	rjmp	.+194    	; 0x4ce6 <do_menu_item+0x2a0>
			{
				button_lock = true;
				value = value - (range.increment * button_multiplier);
    4c24:	80 91 6b 07 	lds	r24, 0x076B
    4c28:	5d 85       	ldd	r21, Y+13	; 0x0d
    4c2a:	58 9f       	mul	r21, r24
    4c2c:	60 18       	sub	r6, r0
    4c2e:	71 08       	sbc	r7, r1
    4c30:	11 24       	eor	r1, r1
    4c32:	0b c0       	rjmp	.+22     	; 0x4c4a <do_menu_item+0x204>
				button_update = 0;
			}
		}

		if (button == UP)
    4c34:	80 3b       	cpi	r24, 0xB0	; 176
    4c36:	59 f4       	brne	.+22     	; 0x4c4e <do_menu_item+0x208>
		{
			if (button_lock == false)
    4c38:	51 10       	cpse	r5, r1
    4c3a:	55 c0       	rjmp	.+170    	; 0x4ce6 <do_menu_item+0x2a0>
			{
				button_lock = true;
				value = value + (range.increment * button_multiplier);
    4c3c:	80 91 6b 07 	lds	r24, 0x076B
    4c40:	9d 85       	ldd	r25, Y+13	; 0x0d
    4c42:	98 9f       	mul	r25, r24
    4c44:	60 0c       	add	r6, r0
    4c46:	71 1c       	adc	r7, r1
    4c48:	11 24       	eor	r1, r1
				button_update = 0;
    4c4a:	d1 2c       	mov	r13, r1
    4c4c:	4c c0       	rjmp	.+152    	; 0x4ce6 <do_menu_item+0x2a0>
			}
		}

		if (button == BACK)	
    4c4e:	80 37       	cpi	r24, 0x70	; 112
    4c50:	29 f4       	brne	.+10     	; 0x4c5c <do_menu_item+0x216>
		{
			value = (range.default_value * mult);
    4c52:	29 85       	ldd	r18, Y+9	; 0x09
    4c54:	3b 2d       	mov	r19, r11
    4c56:	23 03       	mulsu	r18, r19
    4c58:	30 01       	movw	r6, r0
    4c5a:	11 24       	eor	r1, r1
    4c5c:	62 14       	cp	r6, r2
    4c5e:	73 04       	cpc	r7, r3
    4c60:	0c f4       	brge	.+2      	; 0x4c64 <do_menu_item+0x21e>
    4c62:	31 01       	movw	r6, r2
    4c64:	4e 85       	ldd	r20, Y+14	; 0x0e
    4c66:	5f 85       	ldd	r21, Y+15	; 0x0f
    4c68:	46 15       	cp	r20, r6
    4c6a:	57 05       	cpc	r21, r7
    4c6c:	0c f4       	brge	.+2      	; 0x4c70 <do_menu_item+0x22a>
    4c6e:	3a 01       	movw	r6, r20
		{
			value = range.upper * mult;
		}

		// Update contrast setting
		if (menuitem == CONTRAST)
    4c70:	50 ea       	ldi	r21, 0xA0	; 160
    4c72:	95 12       	cpse	r9, r21
    4c74:	03 c0       	rjmp	.+6      	; 0x4c7c <do_menu_item+0x236>
		{
			st7565_set_brightness(value);
    4c76:	86 2d       	mov	r24, r6
    4c78:	0e 94 63 1a 	call	0x34c6	; 0x34c6 <st7565_set_brightness>
		}

		// Set servo position if required and update every 4 * 5ms = 20ms
		// Ignore if the output is marked as a motor
		if (((servo_enable) && (servo_update >= 4)) &&
    4c7c:	88 20       	and	r8, r8
    4c7e:	d9 f0       	breq	.+54     	; 0x4cb6 <do_menu_item+0x270>
    4c80:	83 e0       	ldi	r24, 0x03	; 3
    4c82:	84 15       	cp	r24, r4
    4c84:	c0 f4       	brcc	.+48     	; 0x4cb6 <do_menu_item+0x270>
			((Config.Channel[servo_number].P1_sensors & (1 << MotorMarker)) == 0))
    4c86:	eb 85       	ldd	r30, Y+11	; 0x0b
    4c88:	fc 85       	ldd	r31, Y+12	; 0x0c
    4c8a:	80 81       	ld	r24, Z
			st7565_set_brightness(value);
		}

		// Set servo position if required and update every 4 * 5ms = 20ms
		// Ignore if the output is marked as a motor
		if (((servo_enable) && (servo_update >= 4)) &&
    4c8c:	86 fd       	sbrc	r24, 6
    4c8e:	13 c0       	rjmp	.+38     	; 0x4cb6 <do_menu_item+0x270>
			((Config.Channel[servo_number].P1_sensors & (1 << MotorMarker)) == 0))
		{
			servo_update = 0;

			temp16 = scale_percent(value);	// Convert to servo position (from %)
    4c90:	86 2d       	mov	r24, r6
    4c92:	0e 94 cb 32 	call	0x6596	; 0x6596 <scale_percent>
			temp16 = (((temp16 << 2) + (int16_t)5) / (int16_t)10); 	// Span back to what the output wants
    4c96:	88 0f       	add	r24, r24
    4c98:	99 1f       	adc	r25, r25
    4c9a:	88 0f       	add	r24, r24
    4c9c:	99 1f       	adc	r25, r25
    4c9e:	05 96       	adiw	r24, 0x05	; 5

			cli();
    4ca0:	f8 94       	cli
			((Config.Channel[servo_number].P1_sensors & (1 << MotorMarker)) == 0))
		{
			servo_update = 0;

			temp16 = scale_percent(value);	// Convert to servo position (from %)
			temp16 = (((temp16 << 2) + (int16_t)5) / (int16_t)10); 	// Span back to what the output wants
    4ca2:	6a e0       	ldi	r22, 0x0A	; 10
    4ca4:	70 e0       	ldi	r23, 0x00	; 0
    4ca6:	0e 94 8f 3c 	call	0x791e	; 0x791e <__divmodhi4>

			cli();
			output_servo_ppm_asm3(servo_number, temp16);
    4caa:	8d a5       	ldd	r24, Y+45	; 0x2d
    4cac:	9e a5       	ldd	r25, Y+46	; 0x2e
    4cae:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <output_servo_ppm_asm3>
			sei();
    4cb2:	78 94       	sei
		// Set servo position if required and update every 4 * 5ms = 20ms
		// Ignore if the output is marked as a motor
		if (((servo_enable) && (servo_update >= 4)) &&
			((Config.Channel[servo_number].P1_sensors & (1 << MotorMarker)) == 0))
		{
			servo_update = 0;
    4cb4:	41 2c       	mov	r4, r1
    4cb6:	87 ea       	ldi	r24, 0xA7	; 167
    4cb8:	91 e6       	ldi	r25, 0x61	; 97
    4cba:	01 97       	sbiw	r24, 0x01	; 1
    4cbc:	f1 f7       	brne	.-4      	; 0x4cba <do_menu_item+0x274>
    4cbe:	00 c0       	rjmp	.+0      	; 0x4cc0 <do_menu_item+0x27a>
    4cc0:	00 00       	nop
    4cc2:	90 e0       	ldi	r25, 0x00	; 0
    4cc4:	16 cf       	rjmp	.-468    	; 0x4af2 <do_menu_item+0xac>

	// Exit
	button = ENTER;

	// Divide value from that displayed if style = 2
	if (range.style == 2)
    4cc6:	9a 85       	ldd	r25, Y+10	; 0x0a
    4cc8:	92 30       	cpi	r25, 0x02	; 2
    4cca:	31 f4       	brne	.+12     	; 0x4cd8 <do_menu_item+0x292>
	{
		value = value / mult;
    4ccc:	c3 01       	movw	r24, r6
    4cce:	6a 89       	ldd	r22, Y+18	; 0x12
    4cd0:	7b 89       	ldd	r23, Y+19	; 0x13
    4cd2:	0e 94 8f 3c 	call	0x791e	; 0x791e <__divmodhi4>
    4cd6:	3b 01       	movw	r6, r22
	}

	*values = (int8_t)value;
    4cd8:	e8 89       	ldd	r30, Y+16	; 0x10
    4cda:	f9 89       	ldd	r31, Y+17	; 0x11
    4cdc:	60 82       	st	Z, r6
}
    4cde:	68 96       	adiw	r28, 0x18	; 24
    4ce0:	e2 e1       	ldi	r30, 0x12	; 18
    4ce2:	0c 94 37 3d 	jmp	0x7a6e	; 0x7a6e <__epilogue_restores__>
		// Display update
		if 	(!servo_enable || 									// Non-servo value or
			((display_update >= 32) && (button != NONE)) || 	// Servo value and 32 cycles passed but only with a button pressed or...
			 (first_time))										// First time into routine
		{
			display_update = 0;
    4ce6:	55 24       	eor	r5, r5
    4ce8:	53 94       	inc	r5
    4cea:	b8 cf       	rjmp	.-144    	; 0x4c5c <do_menu_item+0x216>

00004cec <menu_beep>:

void menu_beep(uint8_t beeps)
{
	uint8_t i;

	for (i=0; i < beeps; i++)
    4cec:	90 e0       	ldi	r25, 0x00	; 0
    4cee:	98 17       	cp	r25, r24
    4cf0:	b1 f0       	breq	.+44     	; 0x4d1e <menu_beep+0x32>
	{ 
		LVA = 1;
    4cf2:	29 9a       	sbi	0x05, 1	; 5
    4cf4:	2f e9       	ldi	r18, 0x9F	; 159
    4cf6:	36 e8       	ldi	r19, 0x86	; 134
    4cf8:	41 e0       	ldi	r20, 0x01	; 1
    4cfa:	21 50       	subi	r18, 0x01	; 1
    4cfc:	30 40       	sbci	r19, 0x00	; 0
    4cfe:	40 40       	sbci	r20, 0x00	; 0
    4d00:	e1 f7       	brne	.-8      	; 0x4cfa <menu_beep+0xe>
    4d02:	00 c0       	rjmp	.+0      	; 0x4d04 <menu_beep+0x18>
    4d04:	00 00       	nop
		_delay_ms(25);
		LVA = 0;
    4d06:	29 98       	cbi	0x05, 1	; 5
    4d08:	2f e9       	ldi	r18, 0x9F	; 159
    4d0a:	36 e8       	ldi	r19, 0x86	; 134
    4d0c:	41 e0       	ldi	r20, 0x01	; 1
    4d0e:	21 50       	subi	r18, 0x01	; 1
    4d10:	30 40       	sbci	r19, 0x00	; 0
    4d12:	40 40       	sbci	r20, 0x00	; 0
    4d14:	e1 f7       	brne	.-8      	; 0x4d0e <menu_beep+0x22>
    4d16:	00 c0       	rjmp	.+0      	; 0x4d18 <menu_beep+0x2c>
    4d18:	00 00       	nop

void menu_beep(uint8_t beeps)
{
	uint8_t i;

	for (i=0; i < beeps; i++)
    4d1a:	9f 5f       	subi	r25, 0xFF	; 255
    4d1c:	e8 cf       	rjmp	.-48     	; 0x4cee <menu_beep+0x2>
		LVA = 1;
		_delay_ms(25);
		LVA = 0;
		_delay_ms(25);
	}
}
    4d1e:	08 95       	ret

00004d20 <update_menu>:
// top*		= Item number currently on top line
// temp*	= Currently selected item number
//************************************************************

void update_menu(uint8_t items, uint8_t start, uint8_t offset, uint8_t button, uint8_t* cursor, uint8_t* top, uint8_t* temp)
{
    4d20:	a3 e0       	ldi	r26, 0x03	; 3
    4d22:	b0 e0       	ldi	r27, 0x00	; 0
    4d24:	e6 e9       	ldi	r30, 0x96	; 150
    4d26:	f6 e2       	ldi	r31, 0x26	; 38
    4d28:	0c 94 25 3d 	jmp	0x7a4a	; 0x7a4a <__prologue_saves__+0x14>
    4d2c:	58 2f       	mov	r21, r24
    4d2e:	f6 01       	movw	r30, r12
	// Temporarily add in offset :(
	*top = *top + offset;
    4d30:	d7 01       	movw	r26, r14
    4d32:	9c 91       	ld	r25, X
    4d34:	94 0f       	add	r25, r20
    4d36:	9c 93       	st	X, r25
	start = start + offset;
    4d38:	64 0f       	add	r22, r20

	// Calculate which function has been requested
	if (button == ENTER)
    4d3a:	20 3e       	cpi	r18, 0xE0	; 224
    4d3c:	a1 f4       	brne	.+40     	; 0x4d66 <update_menu+0x46>
	{
		switch(*cursor) 
    4d3e:	d8 01       	movw	r26, r16
    4d40:	8c 91       	ld	r24, X
    4d42:	8f 30       	cpi	r24, 0x0F	; 15
    4d44:	59 f0       	breq	.+22     	; 0x4d5c <update_menu+0x3c>
    4d46:	18 f4       	brcc	.+6      	; 0x4d4e <update_menu+0x2e>
    4d48:	83 30       	cpi	r24, 0x03	; 3
    4d4a:	49 f0       	breq	.+18     	; 0x4d5e <update_menu+0x3e>
    4d4c:	4b c0       	rjmp	.+150    	; 0x4de4 <update_menu+0xc4>
    4d4e:	8b 31       	cpi	r24, 0x1B	; 27
    4d50:	41 f0       	breq	.+16     	; 0x4d62 <update_menu+0x42>
    4d52:	87 32       	cpi	r24, 0x27	; 39
    4d54:	09 f0       	breq	.+2      	; 0x4d58 <update_menu+0x38>
    4d56:	46 c0       	rjmp	.+140    	; 0x4de4 <update_menu+0xc4>
				break;	
			case LINE2:
				*temp = *top + 2;
				break;
			case LINE3:
				*temp = *top + 3;
    4d58:	9d 5f       	subi	r25, 0xFD	; 253
    4d5a:	01 c0       	rjmp	.+2      	; 0x4d5e <update_menu+0x3e>
		{
			case LINE0:
				*temp = *top;
				break;
			case LINE1:
				*temp = *top + 1;
    4d5c:	9f 5f       	subi	r25, 0xFF	; 255
    4d5e:	90 83       	st	Z, r25
				break;	
    4d60:	41 c0       	rjmp	.+130    	; 0x4de4 <update_menu+0xc4>
			case LINE2:
				*temp = *top + 2;
    4d62:	9e 5f       	subi	r25, 0xFE	; 254
    4d64:	fc cf       	rjmp	.-8      	; 0x4d5e <update_menu+0x3e>
				break;
		}
	}

	// Handle cursor Up/Down limits
	if (button == DOWN)	
    4d66:	20 3d       	cpi	r18, 0xD0	; 208
    4d68:	f9 f4       	brne	.+62     	; 0x4da8 <update_menu+0x88>
	{
		switch(*cursor) 
    4d6a:	f8 01       	movw	r30, r16
    4d6c:	80 81       	ld	r24, Z
    4d6e:	8f 30       	cpi	r24, 0x0F	; 15
    4d70:	69 f0       	breq	.+26     	; 0x4d8c <update_menu+0x6c>
    4d72:	18 f4       	brcc	.+6      	; 0x4d7a <update_menu+0x5a>
    4d74:	83 30       	cpi	r24, 0x03	; 3
    4d76:	31 f0       	breq	.+12     	; 0x4d84 <update_menu+0x64>
    4d78:	15 c0       	rjmp	.+42     	; 0x4da4 <update_menu+0x84>
    4d7a:	8b 31       	cpi	r24, 0x1B	; 27
    4d7c:	59 f0       	breq	.+22     	; 0x4d94 <update_menu+0x74>
    4d7e:	87 32       	cpi	r24, 0x27	; 39
    4d80:	69 f0       	breq	.+26     	; 0x4d9c <update_menu+0x7c>
    4d82:	10 c0       	rjmp	.+32     	; 0x4da4 <update_menu+0x84>
		{
			case LINE0:
				if (items > 1) *cursor = LINE1;
    4d84:	52 30       	cpi	r21, 0x02	; 2
    4d86:	70 f1       	brcs	.+92     	; 0x4de4 <update_menu+0xc4>
    4d88:	8f e0       	ldi	r24, 0x0F	; 15
    4d8a:	27 c0       	rjmp	.+78     	; 0x4dda <update_menu+0xba>
				break;	
			case LINE1:
				if (items > 2) *cursor = LINE2;
    4d8c:	53 30       	cpi	r21, 0x03	; 3
    4d8e:	50 f1       	brcs	.+84     	; 0x4de4 <update_menu+0xc4>
    4d90:	8b e1       	ldi	r24, 0x1B	; 27
    4d92:	1f c0       	rjmp	.+62     	; 0x4dd2 <update_menu+0xb2>
				break;	
			case LINE2:
				if (items > 3) *cursor = LINE3;
    4d94:	54 30       	cpi	r21, 0x04	; 4
    4d96:	30 f1       	brcs	.+76     	; 0x4de4 <update_menu+0xc4>
    4d98:	87 e2       	ldi	r24, 0x27	; 39
    4d9a:	1f c0       	rjmp	.+62     	; 0x4dda <update_menu+0xba>
				break;
			case LINE3:
				if (items > 4) *cursor = NEXTLINE;
    4d9c:	55 30       	cpi	r21, 0x05	; 5
    4d9e:	10 f1       	brcs	.+68     	; 0x4de4 <update_menu+0xc4>
    4da0:	88 e2       	ldi	r24, 0x28	; 40
    4da2:	17 c0       	rjmp	.+46     	; 0x4dd2 <update_menu+0xb2>
				break;
			default:
				*cursor = NEXTLINE;
    4da4:	88 e2       	ldi	r24, 0x28	; 40
    4da6:	19 c0       	rjmp	.+50     	; 0x4dda <update_menu+0xba>
				break;
		}
	}

	if (button == UP)	
    4da8:	20 3b       	cpi	r18, 0xB0	; 176
    4daa:	d1 f4       	brne	.+52     	; 0x4de0 <update_menu+0xc0>
	{
		switch(*cursor) 
    4dac:	f8 01       	movw	r30, r16
    4dae:	80 81       	ld	r24, Z
    4db0:	8f 30       	cpi	r24, 0x0F	; 15
    4db2:	69 f0       	breq	.+26     	; 0x4dce <update_menu+0xae>
    4db4:	20 f4       	brcc	.+8      	; 0x4dbe <update_menu+0x9e>
    4db6:	83 30       	cpi	r24, 0x03	; 3
    4db8:	79 f4       	brne	.+30     	; 0x4dd8 <update_menu+0xb8>
				break;
			case LINE1:
				*cursor = LINE0;
				break;
			case LINE0:
				*cursor = PREVLINE;
    4dba:	82 e0       	ldi	r24, 0x02	; 2
    4dbc:	0a c0       	rjmp	.+20     	; 0x4dd2 <update_menu+0xb2>
		}
	}

	if (button == UP)	
	{
		switch(*cursor) 
    4dbe:	8b 31       	cpi	r24, 0x1B	; 27
    4dc0:	21 f0       	breq	.+8      	; 0x4dca <update_menu+0xaa>
    4dc2:	87 32       	cpi	r24, 0x27	; 39
    4dc4:	49 f4       	brne	.+18     	; 0x4dd8 <update_menu+0xb8>
		{
			case LINE3:
				*cursor = LINE2;
    4dc6:	8b e1       	ldi	r24, 0x1B	; 27
    4dc8:	08 c0       	rjmp	.+16     	; 0x4dda <update_menu+0xba>
				break;	
			case LINE2:
				*cursor = LINE1;
    4dca:	8f e0       	ldi	r24, 0x0F	; 15
    4dcc:	02 c0       	rjmp	.+4      	; 0x4dd2 <update_menu+0xb2>
				break;
			case LINE1:
				*cursor = LINE0;
    4dce:	83 e0       	ldi	r24, 0x03	; 3
    4dd0:	04 c0       	rjmp	.+8      	; 0x4dda <update_menu+0xba>
				break;
			case LINE0:
				*cursor = PREVLINE;
    4dd2:	f8 01       	movw	r30, r16
    4dd4:	80 83       	st	Z, r24
				break;
    4dd6:	06 c0       	rjmp	.+12     	; 0x4de4 <update_menu+0xc4>
			default:
				*cursor = PREVLINE;
    4dd8:	82 e0       	ldi	r24, 0x02	; 2
    4dda:	d8 01       	movw	r26, r16
    4ddc:	8c 93       	st	X, r24
				break;
    4dde:	02 c0       	rjmp	.+4      	; 0x4de4 <update_menu+0xc4>
		}
	}

	if (button != NONE)	
    4de0:	20 3f       	cpi	r18, 0xF0	; 240
    4de2:	91 f0       	breq	.+36     	; 0x4e08 <update_menu+0xe8>
	{
		menu_beep(1);
    4de4:	81 e0       	ldi	r24, 0x01	; 1
    4de6:	4b 83       	std	Y+3, r20	; 0x03
    4de8:	5a 83       	std	Y+2, r21	; 0x02
    4dea:	69 83       	std	Y+1, r22	; 0x01
    4dec:	0e 94 76 26 	call	0x4cec	; 0x4cec <menu_beep>
    4df0:	bf ef       	ldi	r27, 0xFF	; 255
    4df2:	e4 e3       	ldi	r30, 0x34	; 52
    4df4:	fc e0       	ldi	r31, 0x0C	; 12
    4df6:	b1 50       	subi	r27, 0x01	; 1
    4df8:	e0 40       	sbci	r30, 0x00	; 0
    4dfa:	f0 40       	sbci	r31, 0x00	; 0
    4dfc:	e1 f7       	brne	.-8      	; 0x4df6 <update_menu+0xd6>
    4dfe:	00 c0       	rjmp	.+0      	; 0x4e00 <update_menu+0xe0>
    4e00:	00 00       	nop
    4e02:	69 81       	ldd	r22, Y+1	; 0x01
    4e04:	5a 81       	ldd	r21, Y+2	; 0x02
    4e06:	4b 81       	ldd	r20, Y+3	; 0x03
		_delay_ms(200);
	}

	// When cursor is at limits and button pressed
	if (*cursor == PREVLINE)								// Up				
    4e08:	d8 01       	movw	r26, r16
    4e0a:	8c 91       	ld	r24, X
    4e0c:	82 30       	cpi	r24, 0x02	; 2
    4e0e:	41 f4       	brne	.+16     	; 0x4e20 <update_menu+0x100>
	{
		*cursor  = LINE0;
    4e10:	83 e0       	ldi	r24, 0x03	; 3
    4e12:	8c 93       	st	X, r24
		if (*top > start) *top = *top - 1;					// Shuffle list up
    4e14:	f7 01       	movw	r30, r14
    4e16:	80 81       	ld	r24, Z
    4e18:	68 17       	cp	r22, r24
    4e1a:	10 f4       	brcc	.+4      	; 0x4e20 <update_menu+0x100>
    4e1c:	81 50       	subi	r24, 0x01	; 1
    4e1e:	80 83       	st	Z, r24
	}
	if (*cursor == NEXTLINE)								// Down
    4e20:	d8 01       	movw	r26, r16
    4e22:	8c 91       	ld	r24, X
    4e24:	88 32       	cpi	r24, 0x28	; 40
    4e26:	91 f4       	brne	.+36     	; 0x4e4c <update_menu+0x12c>
	{
		*cursor  = LINE3;
    4e28:	87 e2       	ldi	r24, 0x27	; 39
    4e2a:	8c 93       	st	X, r24
		if ((*top+3) < ((start + items)-1)) *top = *top + 1;// Shuffle list down
    4e2c:	f7 01       	movw	r30, r14
    4e2e:	70 81       	ld	r23, Z
    4e30:	27 2f       	mov	r18, r23
    4e32:	30 e0       	ldi	r19, 0x00	; 0
    4e34:	2d 5f       	subi	r18, 0xFD	; 253
    4e36:	3f 4f       	sbci	r19, 0xFF	; 255
    4e38:	85 2f       	mov	r24, r21
    4e3a:	90 e0       	ldi	r25, 0x00	; 0
    4e3c:	86 0f       	add	r24, r22
    4e3e:	91 1d       	adc	r25, r1
    4e40:	01 97       	sbiw	r24, 0x01	; 1
    4e42:	28 17       	cp	r18, r24
    4e44:	39 07       	cpc	r19, r25
    4e46:	14 f4       	brge	.+4      	; 0x4e4c <update_menu+0x12c>
    4e48:	7f 5f       	subi	r23, 0xFF	; 255
    4e4a:	70 83       	st	Z, r23
	}

	// Remove temporary offset
	*top = *top - offset;
    4e4c:	d7 01       	movw	r26, r14
    4e4e:	8c 91       	ld	r24, X
    4e50:	84 1b       	sub	r24, r20
    4e52:	8c 93       	st	X, r24
}
    4e54:	23 96       	adiw	r28, 0x03	; 3
    4e56:	e8 e0       	ldi	r30, 0x08	; 8
    4e58:	0c 94 41 3d 	jmp	0x7a82	; 0x7a82 <__epilogue_restores__+0x14>

00004e5c <print_cursor>:
// Print cursor on specified line
//************************************************************

void print_cursor(uint8_t line)
{
	LCD_Display_Text(13, (const unsigned char*)Wingdings, CURSOROFFSET, line);
    4e5c:	28 2f       	mov	r18, r24
    4e5e:	30 e0       	ldi	r19, 0x00	; 0
    4e60:	43 e0       	ldi	r20, 0x03	; 3
    4e62:	50 e0       	ldi	r21, 0x00	; 0
    4e64:	6d e0       	ldi	r22, 0x0D	; 13
    4e66:	71 e0       	ldi	r23, 0x01	; 1
    4e68:	8d e0       	ldi	r24, 0x0D	; 13
    4e6a:	0e 94 51 1c 	call	0x38a2	; 0x38a2 <LCD_Display_Text>
    4e6e:	08 95       	ret

00004e70 <print_menu_items>:
// MenuOffsets = originally an array, now just a fixed horizontal offset for the value text
// text_link = pointer to the text list for the values if not numeric
// cursor = cursor position
//**********************************************************************
void print_menu_items(uint8_t top, uint8_t start, int8_t values[], uint8_t mult, const unsigned char* menu_ranges, uint8_t rangetype, uint8_t MenuOffsets, const unsigned char* text_link, uint8_t cursor)
{
    4e70:	a9 e0       	ldi	r26, 0x09	; 9
    4e72:	b0 e0       	ldi	r27, 0x00	; 0
    4e74:	ee e3       	ldi	r30, 0x3E	; 62
    4e76:	f7 e2       	ldi	r31, 0x27	; 39
    4e78:	0c 94 1b 3d 	jmp	0x7a36	; 0x7a36 <__prologue_saves__>
    4e7c:	38 2e       	mov	r3, r24
    4e7e:	3a 01       	movw	r6, r20
    4e80:	22 2e       	mov	r2, r18
    4e82:	28 01       	movw	r4, r16
    4e84:	ee 82       	std	Y+6, r14	; 0x06
    4e86:	cf 82       	std	Y+7, r12	; 0x07
    4e88:	88 86       	std	Y+8, r8	; 0x08
	menu_range_t	range1;
	uint8_t multiplier;
		
	// Clear buffer before each update
	clear_buffer(buffer);
    4e8a:	83 e3       	ldi	r24, 0x33	; 51
    4e8c:	91 e0       	ldi	r25, 0x01	; 1
    4e8e:	69 87       	std	Y+9, r22	; 0x09
    4e90:	0e 94 a8 1a 	call	0x3550	; 0x3550 <clear_buffer>
	print_menu_frame(0);
    4e94:	80 e0       	ldi	r24, 0x00	; 0
    4e96:	0e 94 4f 24 	call	0x489e	; 0x489e <print_menu_frame>
    4e9a:	23 2d       	mov	r18, r3
    4e9c:	30 e0       	ldi	r19, 0x00	; 0
    4e9e:	69 85       	ldd	r22, Y+9	; 0x09
    4ea0:	86 2f       	mov	r24, r22
    4ea2:	90 e0       	ldi	r25, 0x00	; 0
    4ea4:	68 01       	movw	r12, r16
    4ea6:	45 e0       	ldi	r20, 0x05	; 5
    4ea8:	64 9f       	mul	r22, r20
    4eaa:	c0 18       	sub	r12, r0
    4eac:	d1 08       	sbc	r13, r1
    4eae:	11 24       	eor	r1, r1
    4eb0:	e5 e0       	ldi	r30, 0x05	; 5
    4eb2:	3e 9e       	mul	r3, r30
    4eb4:	c0 0c       	add	r12, r0
    4eb6:	d1 1c       	adc	r13, r1
    4eb8:	11 24       	eor	r1, r1
    4eba:	81 2c       	mov	r8, r1
    4ebc:	91 2c       	mov	r9, r1
    4ebe:	e1 2c       	mov	r14, r1
    4ec0:	f1 2c       	mov	r15, r1
    4ec2:	a8 1a       	sub	r10, r24
    4ec4:	b9 0a       	sbc	r11, r25
    4ec6:	a2 0e       	add	r10, r18
    4ec8:	b3 1e       	adc	r11, r19
    4eca:	28 1b       	sub	r18, r24
    4ecc:	39 0b       	sbc	r19, r25
    4ece:	62 0e       	add	r6, r18
    4ed0:	73 1e       	adc	r7, r19
    4ed2:	87 01       	movw	r16, r14
    4ed4:	0b 5d       	subi	r16, 0xDB	; 219
    4ed6:	18 4e       	sbci	r17, 0xE8	; 232
	
	// Print each line
	for (uint8_t i = 0; i < 4; i++)
	{
		LCD_Display_Text(top+i,(const unsigned char*)Verdana8,ITEMOFFSET,(uint8_t)pgm_read_byte(&lines[i]));
    4ed8:	f8 01       	movw	r30, r16
    4eda:	24 91       	lpm	r18, Z
    4edc:	30 e0       	ldi	r19, 0x00	; 0
    4ede:	4a e0       	ldi	r20, 0x0A	; 10
    4ee0:	50 e0       	ldi	r21, 0x00	; 0
    4ee2:	65 e2       	ldi	r22, 0x25	; 37
    4ee4:	7a e0       	ldi	r23, 0x0A	; 10
    4ee6:	83 2d       	mov	r24, r3
    4ee8:	8e 0d       	add	r24, r14
    4eea:	0e 94 51 1c 	call	0x38a2	; 0x38a2 <LCD_Display_Text>

		// Handle unique or copied ranges (to reduce space)
		if (rangetype == 0)
    4eee:	fe 81       	ldd	r31, Y+6	; 0x06
		{
			// Use each unique entry
			memcpy_P(&range1, &menu_ranges[(top+i - start)* sizeof(range1)], sizeof(range1));
    4ef0:	45 e0       	ldi	r20, 0x05	; 5
    4ef2:	50 e0       	ldi	r21, 0x00	; 0
	for (uint8_t i = 0; i < 4; i++)
	{
		LCD_Display_Text(top+i,(const unsigned char*)Verdana8,ITEMOFFSET,(uint8_t)pgm_read_byte(&lines[i]));

		// Handle unique or copied ranges (to reduce space)
		if (rangetype == 0)
    4ef4:	f1 11       	cpse	r31, r1
    4ef6:	04 c0       	rjmp	.+8      	; 0x4f00 <print_menu_items+0x90>
		{
			// Use each unique entry
			memcpy_P(&range1, &menu_ranges[(top+i - start)* sizeof(range1)], sizeof(range1));
    4ef8:	b4 01       	movw	r22, r8
    4efa:	6c 0d       	add	r22, r12
    4efc:	7d 1d       	adc	r23, r13
    4efe:	01 c0       	rjmp	.+2      	; 0x4f02 <print_menu_items+0x92>
		}
		else
		{
			// Use just the first entry in array for all 
			memcpy_P(&range1, &menu_ranges[0], sizeof(range1));
    4f00:	b2 01       	movw	r22, r4
    4f02:	ce 01       	movw	r24, r28
    4f04:	01 96       	adiw	r24, 0x01	; 1
    4f06:	0e 94 52 3d 	call	0x7aa4	; 0x7aa4 <memcpy_P>
		}
	
		if (range1.style == 2)
    4f0a:	6c 81       	ldd	r22, Y+4	; 0x04
    4f0c:	62 30       	cpi	r22, 0x02	; 2
    4f0e:	11 f0       	breq	.+4      	; 0x4f14 <print_menu_items+0xa4>
		{
			multiplier = mult;
		}
		else
		{
			multiplier = 1;
    4f10:	31 e0       	ldi	r19, 0x01	; 1
    4f12:	01 c0       	rjmp	.+2      	; 0x4f16 <print_menu_items+0xa6>
			memcpy_P(&range1, &menu_ranges[0], sizeof(range1));
		}
	
		if (range1.style == 2)
		{
			multiplier = mult;
    4f14:	32 2d       	mov	r19, r2
		else
		{
			multiplier = 1;
		}

		print_menu_text((values[top+i - start] * multiplier), range1.style, (pgm_read_byte(&text_link[top+i - start]) + values[top+i - start]), MenuOffsets, (uint8_t)pgm_read_byte(&lines[i]));
    4f16:	f8 01       	movw	r30, r16
    4f18:	04 91       	lpm	r16, Z
    4f1a:	f5 01       	movw	r30, r10
    4f1c:	ee 0d       	add	r30, r14
    4f1e:	ff 1d       	adc	r31, r15
    4f20:	44 91       	lpm	r20, Z
    4f22:	d3 01       	movw	r26, r6
    4f24:	ae 0d       	add	r26, r14
    4f26:	bf 1d       	adc	r27, r15
    4f28:	5c 91       	ld	r21, X
    4f2a:	45 0f       	add	r20, r21
    4f2c:	2f 81       	ldd	r18, Y+7	; 0x07
    4f2e:	53 03       	mulsu	r21, r19
    4f30:	c0 01       	movw	r24, r0
    4f32:	11 24       	eor	r1, r1
    4f34:	0e 94 c5 24 	call	0x498a	; 0x498a <print_menu_text>
    4f38:	ff ef       	ldi	r31, 0xFF	; 255
    4f3a:	ef 1a       	sub	r14, r31
    4f3c:	ff 0a       	sbc	r15, r31
    4f3e:	45 e0       	ldi	r20, 0x05	; 5
    4f40:	84 0e       	add	r8, r20
    4f42:	91 1c       	adc	r9, r1
	// Clear buffer before each update
	clear_buffer(buffer);
	print_menu_frame(0);
	
	// Print each line
	for (uint8_t i = 0; i < 4; i++)
    4f44:	84 e0       	ldi	r24, 0x04	; 4
    4f46:	e8 16       	cp	r14, r24
    4f48:	f1 04       	cpc	r15, r1
    4f4a:	09 f0       	breq	.+2      	; 0x4f4e <print_menu_items+0xde>
    4f4c:	c2 cf       	rjmp	.-124    	; 0x4ed2 <print_menu_items+0x62>
		}

		print_menu_text((values[top+i - start] * multiplier), range1.style, (pgm_read_byte(&text_link[top+i - start]) + values[top+i - start]), MenuOffsets, (uint8_t)pgm_read_byte(&lines[i]));
	}

	print_cursor(cursor);	// Cursor
    4f4e:	88 85       	ldd	r24, Y+8	; 0x08
    4f50:	0e 94 2e 27 	call	0x4e5c	; 0x4e5c <print_cursor>
	write_buffer(buffer,1);
    4f54:	61 e0       	ldi	r22, 0x01	; 1
    4f56:	83 e3       	ldi	r24, 0x33	; 51
    4f58:	91 e0       	ldi	r25, 0x01	; 1
    4f5a:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <write_buffer>
	poll_buttons(true);
    4f5e:	81 e0       	ldi	r24, 0x01	; 1
    4f60:	0e 94 ee 24 	call	0x49dc	; 0x49dc <poll_buttons>
}
    4f64:	29 96       	adiw	r28, 0x09	; 9
    4f66:	e2 e1       	ldi	r30, 0x12	; 18
    4f68:	0c 94 37 3d 	jmp	0x7a6e	; 0x7a6e <__epilogue_restores__>

00004f6c <menu_flight>:
//************************************************************
// Main menu-specific setup
//************************************************************

void menu_flight(uint8_t mode)
{
    4f6c:	6f 92       	push	r6
    4f6e:	7f 92       	push	r7
    4f70:	8f 92       	push	r8
    4f72:	af 92       	push	r10
    4f74:	bf 92       	push	r11
    4f76:	cf 92       	push	r12
    4f78:	df 92       	push	r13
    4f7a:	ef 92       	push	r14
    4f7c:	ff 92       	push	r15
    4f7e:	0f 93       	push	r16
    4f80:	1f 93       	push	r17
    4f82:	cf 93       	push	r28
    4f84:	df 93       	push	r29
    4f86:	00 d0       	rcall	.+0      	; 0x4f88 <menu_flight+0x1c>
    4f88:	00 d0       	rcall	.+0      	; 0x4f8a <menu_flight+0x1e>
    4f8a:	1f 92       	push	r1
    4f8c:	cd b7       	in	r28, 0x3d	; 61
    4f8e:	de b7       	in	r29, 0x3e	; 62
	int8_t *value_ptr;
	menu_range_t range;
	uint8_t text_link;

	// If submenu item has changed, reset submenu positions
	if (menu_flag)
    4f90:	90 91 6c 07 	lds	r25, 0x076C
    4f94:	99 23       	and	r25, r25
    4f96:	29 f0       	breq	.+10     	; 0x4fa2 <menu_flight+0x36>
	{
		sub_top = FLIGHTSTART;
    4f98:	9c ea       	ldi	r25, 0xAC	; 172
    4f9a:	90 93 22 01 	sts	0x0122, r25
		menu_flag = 0;
    4f9e:	10 92 6c 07 	sts	0x076C, r1
	}

	while(button != BACK)
	{
		value_ptr = &Config.FlightMode[mode].Roll_P_mult;
    4fa2:	92 e1       	ldi	r25, 0x12	; 18
    4fa4:	89 9f       	mul	r24, r25
    4fa6:	30 01       	movw	r6, r0
    4fa8:	11 24       	eor	r1, r1
    4faa:	c3 01       	movw	r24, r6
    4fac:	8f 54       	subi	r24, 0x4F	; 79
    4fae:	9a 4f       	sbci	r25, 0xFA	; 250
    4fb0:	3c 01       	movw	r6, r24
	{
		sub_top = FLIGHTSTART;
		menu_flag = 0;
	}

	while(button != BACK)
    4fb2:	80 91 6a 07 	lds	r24, 0x076A
    4fb6:	80 37       	cpi	r24, 0x70	; 112
    4fb8:	09 f4       	brne	.+2      	; 0x4fbc <menu_flight+0x50>
    4fba:	58 c0       	rjmp	.+176    	; 0x506c <menu_flight+0x100>
	{
		value_ptr = &Config.FlightMode[mode].Roll_P_mult;

		// Print menu
		print_menu_items(sub_top, FLIGHTSTART, value_ptr, 1, (const unsigned char*)flight_menu_ranges, 0, FLIGHTOFFSET, (const unsigned char*)FlightMenuText, cursor);
    4fbc:	80 90 00 01 	lds	r8, 0x0100
    4fc0:	83 e8       	ldi	r24, 0x83	; 131
    4fc2:	a8 2e       	mov	r10, r24
    4fc4:	87 e1       	ldi	r24, 0x17	; 23
    4fc6:	b8 2e       	mov	r11, r24
    4fc8:	9f e4       	ldi	r25, 0x4F	; 79
    4fca:	c9 2e       	mov	r12, r25
    4fcc:	e1 2c       	mov	r14, r1
    4fce:	09 e2       	ldi	r16, 0x29	; 41
    4fd0:	17 e1       	ldi	r17, 0x17	; 23
    4fd2:	21 e0       	ldi	r18, 0x01	; 1
    4fd4:	a3 01       	movw	r20, r6
    4fd6:	6c ea       	ldi	r22, 0xAC	; 172
    4fd8:	80 91 22 01 	lds	r24, 0x0122
    4fdc:	0e 94 38 27 	call	0x4e70	; 0x4e70 <print_menu_items>

		// Handle menu changes
		update_menu(FLIGHTITEMS, FLIGHTSTART, 0, button, &cursor, &sub_top, &menu_temp);
    4fe0:	2f e1       	ldi	r18, 0x1F	; 31
    4fe2:	c2 2e       	mov	r12, r18
    4fe4:	21 e0       	ldi	r18, 0x01	; 1
    4fe6:	d2 2e       	mov	r13, r18
    4fe8:	32 e2       	ldi	r19, 0x22	; 34
    4fea:	e3 2e       	mov	r14, r19
    4fec:	31 e0       	ldi	r19, 0x01	; 1
    4fee:	f3 2e       	mov	r15, r19
    4ff0:	00 e0       	ldi	r16, 0x00	; 0
    4ff2:	11 e0       	ldi	r17, 0x01	; 1
    4ff4:	20 91 6a 07 	lds	r18, 0x076A
    4ff8:	40 e0       	ldi	r20, 0x00	; 0
    4ffa:	6c ea       	ldi	r22, 0xAC	; 172
    4ffc:	82 e1       	ldi	r24, 0x12	; 18
    4ffe:	0e 94 90 26 	call	0x4d20	; 0x4d20 <update_menu>
		range = get_menu_range ((const unsigned char*)flight_menu_ranges, (menu_temp - FLIGHTSTART));
    5002:	60 91 1f 01 	lds	r22, 0x011F
    5006:	6c 5a       	subi	r22, 0xAC	; 172
    5008:	89 e2       	ldi	r24, 0x29	; 41
    500a:	97 e1       	ldi	r25, 0x17	; 23
    500c:	0e 94 9e 24 	call	0x493c	; 0x493c <get_menu_range>
    5010:	29 83       	std	Y+1, r18	; 0x01
    5012:	3a 83       	std	Y+2, r19	; 0x02
    5014:	4b 83       	std	Y+3, r20	; 0x03
    5016:	5c 83       	std	Y+4, r21	; 0x04
    5018:	6d 83       	std	Y+5, r22	; 0x05

		if (button == ENTER)
    501a:	80 91 6a 07 	lds	r24, 0x076A
    501e:	80 3e       	cpi	r24, 0xE0	; 224
    5020:	d9 f4       	brne	.+54     	; 0x5058 <menu_flight+0xec>
		{
			text_link = pgm_read_byte(&FlightMenuText[menu_temp - FLIGHTSTART]);
    5022:	80 91 1f 01 	lds	r24, 0x011F
    5026:	e8 2f       	mov	r30, r24
    5028:	f0 e0       	ldi	r31, 0x00	; 0
    502a:	e9 52       	subi	r30, 0x29	; 41
    502c:	f9 4e       	sbci	r31, 0xE9	; 233
    502e:	a4 90       	lpm	r10, Z
			do_menu_item(menu_temp, value_ptr + (menu_temp - FLIGHTSTART), 1, range, 0, text_link, false, 0);
    5030:	68 2f       	mov	r22, r24
    5032:	70 e0       	ldi	r23, 0x00	; 0
    5034:	6c 5a       	subi	r22, 0xAC	; 172
    5036:	71 09       	sbc	r23, r1
    5038:	66 0d       	add	r22, r6
    503a:	77 1d       	adc	r23, r7
    503c:	1f 92       	push	r1
    503e:	1f 92       	push	r1
    5040:	81 2c       	mov	r8, r1
    5042:	c1 2c       	mov	r12, r1
    5044:	e9 80       	ldd	r14, Y+1	; 0x01
    5046:	fa 80       	ldd	r15, Y+2	; 0x02
    5048:	0b 81       	ldd	r16, Y+3	; 0x03
    504a:	1c 81       	ldd	r17, Y+4	; 0x04
    504c:	2d 81       	ldd	r18, Y+5	; 0x05
    504e:	41 e0       	ldi	r20, 0x01	; 1
    5050:	0e 94 23 25 	call	0x4a46	; 0x4a46 <do_menu_item>
    5054:	0f 90       	pop	r0
    5056:	0f 90       	pop	r0
		}

		// Update limits when exiting
		if (button == ENTER)
    5058:	80 91 6a 07 	lds	r24, 0x076A
    505c:	80 3e       	cpi	r24, 0xE0	; 224
    505e:	09 f0       	breq	.+2      	; 0x5062 <menu_flight+0xf6>
    5060:	a8 cf       	rjmp	.-176    	; 0x4fb2 <menu_flight+0x46>
		{
			UpdateLimits();			 // Update I-term limits and triggers based on percentages
    5062:	0e 94 b9 2c 	call	0x5972	; 0x5972 <UpdateLimits>
			Save_Config_to_EEPROM(); // Save value and return
    5066:	0e 94 31 16 	call	0x2c62	; 0x2c62 <Save_Config_to_EEPROM>
    506a:	a3 cf       	rjmp	.-186    	; 0x4fb2 <menu_flight+0x46>
		}
	}
}
    506c:	0f 90       	pop	r0
    506e:	0f 90       	pop	r0
    5070:	0f 90       	pop	r0
    5072:	0f 90       	pop	r0
    5074:	0f 90       	pop	r0
    5076:	df 91       	pop	r29
    5078:	cf 91       	pop	r28
    507a:	1f 91       	pop	r17
    507c:	0f 91       	pop	r16
    507e:	ff 90       	pop	r15
    5080:	ef 90       	pop	r14
    5082:	df 90       	pop	r13
    5084:	cf 90       	pop	r12
    5086:	bf 90       	pop	r11
    5088:	af 90       	pop	r10
    508a:	8f 90       	pop	r8
    508c:	7f 90       	pop	r7
    508e:	6f 90       	pop	r6
    5090:	08 95       	ret

00005092 <do_main_menu_item>:
//	menu_beep(1);
}

void do_main_menu_item(uint8_t menuitem)
{
	switch(menuitem) 
    5092:	90 e0       	ldi	r25, 0x00	; 0
    5094:	fc 01       	movw	r30, r24
    5096:	ed 54       	subi	r30, 0x4D	; 77
    5098:	f1 09       	sbc	r31, r1
    509a:	e3 31       	cpi	r30, 0x13	; 19
    509c:	f1 05       	cpc	r31, r1
    509e:	a8 f5       	brcc	.+106    	; 0x510a <do_main_menu_item+0x78>
    50a0:	e2 5c       	subi	r30, 0xC2	; 194
    50a2:	ff 4f       	sbci	r31, 0xFF	; 255
    50a4:	0c 94 e4 3c 	jmp	0x79c8	; 0x79c8 <__tablejump2__>
	{
		case MAINSTART:
			menu_rc_setup(2); 		// 1.General
    50a8:	82 e0       	ldi	r24, 0x02	; 2
    50aa:	01 c0       	rjmp	.+2      	; 0x50ae <do_main_menu_item+0x1c>
			break;
		case MAINSTART+1:
			menu_rc_setup(1); 		// 2.RX setup	
    50ac:	81 e0       	ldi	r24, 0x01	; 1
    50ae:	0e 94 00 2c 	call	0x5800	; 0x5800 <menu_rc_setup>
			break;
    50b2:	08 95       	ret
		case MAINSTART+2:
			Display_rcinput();		// 3.RX inputs
    50b4:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <Display_rcinput>
			break;
    50b8:	08 95       	ret
		case MAINSTART+3:
			Display_sticks(); 		// 4.Stick polarity	
    50ba:	0e 94 7e 14 	call	0x28fc	; 0x28fc <Display_sticks>
			break;
    50be:	08 95       	ret
		case MAINSTART+4:
			Display_sensors();		// 5.Sensor calibration
    50c0:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <Display_sensors>
			break;
    50c4:	08 95       	ret
		case MAINSTART+5:
			Display_balance();		// 6.Level meter
    50c6:	0e 94 52 10 	call	0x20a4	; 0x20a4 <Display_balance>
			break;
    50ca:	08 95       	ret
		case MAINSTART+6:
			menu_flight(0);			// 7.Flight profile 1
    50cc:	80 e0       	ldi	r24, 0x00	; 0
    50ce:	01 c0       	rjmp	.+2      	; 0x50d2 <do_main_menu_item+0x40>
			break;
		case MAINSTART+7:
			menu_flight(1); 		// 8.Flight profile 2
    50d0:	81 e0       	ldi	r24, 0x01	; 1
    50d2:	0e 94 b6 27 	call	0x4f6c	; 0x4f6c <menu_flight>
			break;
    50d6:	08 95       	ret
		case MAINSTART+8:
			menu_mixer(0);			// 9.OUT1 Mixer
    50d8:	80 e0       	ldi	r24, 0x00	; 0
    50da:	0d c0       	rjmp	.+26     	; 0x50f6 <do_main_menu_item+0x64>
			break;
		case MAINSTART+9:
			menu_mixer(1);			// 10.OUT2 Mixer
    50dc:	81 e0       	ldi	r24, 0x01	; 1
    50de:	0b c0       	rjmp	.+22     	; 0x50f6 <do_main_menu_item+0x64>
			break;
		case MAINSTART+10:
			menu_mixer(2);			// 11.OUT3 Mixer
    50e0:	82 e0       	ldi	r24, 0x02	; 2
    50e2:	09 c0       	rjmp	.+18     	; 0x50f6 <do_main_menu_item+0x64>
			break;
		case MAINSTART+11:
			menu_mixer(3);			// 12.OUT4 Mixer
    50e4:	83 e0       	ldi	r24, 0x03	; 3
    50e6:	07 c0       	rjmp	.+14     	; 0x50f6 <do_main_menu_item+0x64>
			break;
		case MAINSTART+12:
			menu_mixer(4);			// 13.OUT5 Mixer
    50e8:	84 e0       	ldi	r24, 0x04	; 4
    50ea:	05 c0       	rjmp	.+10     	; 0x50f6 <do_main_menu_item+0x64>
			break;
		case MAINSTART+13:
			menu_mixer(5);			// 14.OUT6 Mixer
    50ec:	85 e0       	ldi	r24, 0x05	; 5
    50ee:	03 c0       	rjmp	.+6      	; 0x50f6 <do_main_menu_item+0x64>
			break;
		case MAINSTART+14:
			menu_mixer(6);			// 15.OUT7 Mixer
    50f0:	86 e0       	ldi	r24, 0x06	; 6
    50f2:	01 c0       	rjmp	.+2      	; 0x50f6 <do_main_menu_item+0x64>
			break;
		case MAINSTART+15:
			menu_mixer(7);			// 16.OUT8 Mixer
    50f4:	87 e0       	ldi	r24, 0x07	; 7
    50f6:	0e 94 05 29 	call	0x520a	; 0x520a <menu_mixer>
			break;
    50fa:	08 95       	ret
		case MAINSTART+16:
			menu_servo_setup(1);	// 17.Servo direction
    50fc:	81 e0       	ldi	r24, 0x01	; 1
    50fe:	03 c0       	rjmp	.+6      	; 0x5106 <do_main_menu_item+0x74>
			break;
		case MAINSTART+17:
			menu_servo_setup(2); 	// 18.Neg. Servo trvl. (%)
    5100:	82 e0       	ldi	r24, 0x02	; 2
    5102:	01 c0       	rjmp	.+2      	; 0x5106 <do_main_menu_item+0x74>
			break;
		case MAINSTART+18:
			menu_servo_setup(3); 	// 19.Pos. Servo trvl. (%)
    5104:	83 e0       	ldi	r24, 0x03	; 3
    5106:	0e 94 3d 2b 	call	0x567a	; 0x567a <menu_servo_setup>
    510a:	08 95       	ret

0000510c <menu_main>:
uint8_t main_top = MAINSTART;
uint8_t sub_top = 0;
uint8_t menu_flag;

void menu_main(void)
{
    510c:	a0 e0       	ldi	r26, 0x00	; 0
    510e:	b0 e0       	ldi	r27, 0x00	; 0
    5110:	ec e8       	ldi	r30, 0x8C	; 140
    5112:	f8 e2       	ldi	r31, 0x28	; 40
    5114:	0c 94 23 3d 	jmp	0x7a46	; 0x7a46 <__prologue_saves__+0x10>
	static uint8_t main_cursor = LINE0;	// These are now static so as to remember the main menu position
	static uint8_t main_temp = 0;
	static uint8_t old_menu = 0;

	button = NONE;
    5118:	80 ef       	ldi	r24, 0xF0	; 240
    511a:	80 93 6a 07 	sts	0x076A, r24

	// Wait until user's finger is off button 1
	while(BUTTON1 == 0)
    511e:	1f 99       	sbic	0x03, 7	; 3
    5120:	0a c0       	rjmp	.+20     	; 0x5136 <menu_main+0x2a>
    5122:	2f e3       	ldi	r18, 0x3F	; 63
    5124:	8d e0       	ldi	r24, 0x0D	; 13
    5126:	93 e0       	ldi	r25, 0x03	; 3
    5128:	21 50       	subi	r18, 0x01	; 1
    512a:	80 40       	sbci	r24, 0x00	; 0
    512c:	90 40       	sbci	r25, 0x00	; 0
    512e:	e1 f7       	brne	.-8      	; 0x5128 <menu_main+0x1c>
    5130:	00 c0       	rjmp	.+0      	; 0x5132 <menu_main+0x26>
    5132:	00 00       	nop
    5134:	f4 cf       	rjmp	.-24     	; 0x511e <menu_main+0x12>

		// If main menu item has changed, reset submenu positions
		// and flag to submenus that positions need to be reset
		if (main_temp != old_menu)
		{
			cursor = LINE0;
    5136:	23 e0       	ldi	r18, 0x03	; 3
    5138:	b2 2e       	mov	r11, r18

		// If ENTER pressed, jump to menu 
		if (button == ENTER)
		{
			do_main_menu_item(main_temp);
			button = NONE;
    513a:	30 ef       	ldi	r19, 0xF0	; 240
    513c:	a3 2e       	mov	r10, r19
	while(BUTTON1 == 0)
	{
		_delay_ms(50);
	}

	while(button != BACK)
    513e:	80 91 6a 07 	lds	r24, 0x076A
    5142:	80 37       	cpi	r24, 0x70	; 112
    5144:	09 f4       	brne	.+2      	; 0x5148 <menu_main+0x3c>
    5146:	5c c0       	rjmp	.+184    	; 0x5200 <menu_main+0xf4>
	{
		// Clear buffer before each update
		clear_buffer(buffer);	
    5148:	83 e3       	ldi	r24, 0x33	; 51
    514a:	91 e0       	ldi	r25, 0x01	; 1
    514c:	0e 94 a8 1a 	call	0x3550	; 0x3550 <clear_buffer>

		// Print menu
		print_menu_frame(0);													// Frame
    5150:	80 e0       	ldi	r24, 0x00	; 0
    5152:	0e 94 4f 24 	call	0x489e	; 0x489e <print_menu_frame>
    5156:	c0 e0       	ldi	r28, 0x00	; 0
    5158:	d0 e0       	ldi	r29, 0x00	; 0
    515a:	fe 01       	movw	r30, r28
    515c:	eb 5d       	subi	r30, 0xDB	; 219
    515e:	f8 4e       	sbci	r31, 0xE8	; 232
		
		for (uint8_t i = 0; i < 4; i++)
		{
			LCD_Display_Text(main_top+i,(const unsigned char*)Verdana8,ITEMOFFSET,(uint8_t)pgm_read_byte(&lines[i]));	// Lines
    5160:	24 91       	lpm	r18, Z
    5162:	30 e0       	ldi	r19, 0x00	; 0
    5164:	80 91 02 01 	lds	r24, 0x0102
    5168:	4a e0       	ldi	r20, 0x0A	; 10
    516a:	50 e0       	ldi	r21, 0x00	; 0
    516c:	65 e2       	ldi	r22, 0x25	; 37
    516e:	7a e0       	ldi	r23, 0x0A	; 10
    5170:	8c 0f       	add	r24, r28
    5172:	0e 94 51 1c 	call	0x38a2	; 0x38a2 <LCD_Display_Text>
    5176:	21 96       	adiw	r28, 0x01	; 1
		clear_buffer(buffer);	

		// Print menu
		print_menu_frame(0);													// Frame
		
		for (uint8_t i = 0; i < 4; i++)
    5178:	c4 30       	cpi	r28, 0x04	; 4
    517a:	d1 05       	cpc	r29, r1
    517c:	71 f7       	brne	.-36     	; 0x515a <menu_main+0x4e>
		{
			LCD_Display_Text(main_top+i,(const unsigned char*)Verdana8,ITEMOFFSET,(uint8_t)pgm_read_byte(&lines[i]));	// Lines
		}

		print_cursor(main_cursor);												// Cursor
    517e:	80 91 01 01 	lds	r24, 0x0101
    5182:	0e 94 2e 27 	call	0x4e5c	; 0x4e5c <print_cursor>
		write_buffer(buffer,1);
    5186:	61 e0       	ldi	r22, 0x01	; 1
    5188:	83 e3       	ldi	r24, 0x33	; 51
    518a:	91 e0       	ldi	r25, 0x01	; 1
    518c:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <write_buffer>

		// Poll buttons when idle
		poll_buttons(true);
    5190:	81 e0       	ldi	r24, 0x01	; 1
    5192:	0e 94 ee 24 	call	0x49dc	; 0x49dc <poll_buttons>

		// Handle menu changes
		update_menu(MAINITEMS, MAINSTART, 0, button, &main_cursor, &main_top, &main_temp);
    5196:	81 e2       	ldi	r24, 0x21	; 33
    5198:	c8 2e       	mov	r12, r24
    519a:	81 e0       	ldi	r24, 0x01	; 1
    519c:	d8 2e       	mov	r13, r24
    519e:	92 e0       	ldi	r25, 0x02	; 2
    51a0:	e9 2e       	mov	r14, r25
    51a2:	91 e0       	ldi	r25, 0x01	; 1
    51a4:	f9 2e       	mov	r15, r25
    51a6:	01 e0       	ldi	r16, 0x01	; 1
    51a8:	11 e0       	ldi	r17, 0x01	; 1
    51aa:	20 91 6a 07 	lds	r18, 0x076A
    51ae:	40 e0       	ldi	r20, 0x00	; 0
    51b0:	6d e4       	ldi	r22, 0x4D	; 77
    51b2:	83 e1       	ldi	r24, 0x13	; 19
    51b4:	0e 94 90 26 	call	0x4d20	; 0x4d20 <update_menu>

		// If main menu item has changed, reset submenu positions
		// and flag to submenus that positions need to be reset
		if (main_temp != old_menu)
    51b8:	80 91 21 01 	lds	r24, 0x0121
    51bc:	90 91 20 01 	lds	r25, 0x0120
    51c0:	89 17       	cp	r24, r25
    51c2:	49 f0       	breq	.+18     	; 0x51d6 <menu_main+0xca>
		{
			cursor = LINE0;
    51c4:	b0 92 00 01 	sts	0x0100, r11
			menu_temp = 0;
    51c8:	10 92 1f 01 	sts	0x011F, r1
			old_menu = main_temp;
    51cc:	80 93 20 01 	sts	0x0120, r24
			menu_flag = 1;
    51d0:	91 e0       	ldi	r25, 0x01	; 1
    51d2:	90 93 6c 07 	sts	0x076C, r25
		}

		// If ENTER pressed, jump to menu 
		if (button == ENTER)
    51d6:	90 91 6a 07 	lds	r25, 0x076A
    51da:	90 3e       	cpi	r25, 0xE0	; 224
    51dc:	09 f0       	breq	.+2      	; 0x51e0 <menu_main+0xd4>
    51de:	af cf       	rjmp	.-162    	; 0x513e <menu_main+0x32>
		{
			do_main_menu_item(main_temp);
    51e0:	0e 94 49 28 	call	0x5092	; 0x5092 <do_main_menu_item>
			button = NONE;
    51e4:	a0 92 6a 07 	sts	0x076A, r10

			// Wait until user's finger is off button 1
			while(BUTTON1 == 0)
    51e8:	1f 99       	sbic	0x03, 7	; 3
    51ea:	a9 cf       	rjmp	.-174    	; 0x513e <menu_main+0x32>
    51ec:	2f e3       	ldi	r18, 0x3F	; 63
    51ee:	8d e0       	ldi	r24, 0x0D	; 13
    51f0:	93 e0       	ldi	r25, 0x03	; 3
    51f2:	21 50       	subi	r18, 0x01	; 1
    51f4:	80 40       	sbci	r24, 0x00	; 0
    51f6:	90 40       	sbci	r25, 0x00	; 0
    51f8:	e1 f7       	brne	.-8      	; 0x51f2 <menu_main+0xe6>
    51fa:	00 c0       	rjmp	.+0      	; 0x51fc <menu_main+0xf0>
    51fc:	00 00       	nop
    51fe:	f4 cf       	rjmp	.-24     	; 0x51e8 <menu_main+0xdc>
			}
		}
	}

//	menu_beep(1);
}
    5200:	cd b7       	in	r28, 0x3d	; 61
    5202:	de b7       	in	r29, 0x3e	; 62
    5204:	ea e0       	ldi	r30, 0x0A	; 10
    5206:	0c 94 3f 3d 	jmp	0x7a7e	; 0x7a7e <__epilogue_restores__+0x10>

0000520a <menu_mixer>:
//************************************************************
// Main menu-specific setup
//************************************************************

void menu_mixer(uint8_t i)
{
    520a:	2f 92       	push	r2
    520c:	3f 92       	push	r3
    520e:	4f 92       	push	r4
    5210:	5f 92       	push	r5
    5212:	6f 92       	push	r6
    5214:	7f 92       	push	r7
    5216:	8f 92       	push	r8
    5218:	af 92       	push	r10
    521a:	bf 92       	push	r11
    521c:	cf 92       	push	r12
    521e:	df 92       	push	r13
    5220:	ef 92       	push	r14
    5222:	ff 92       	push	r15
    5224:	0f 93       	push	r16
    5226:	1f 93       	push	r17
    5228:	cf 93       	push	r28
    522a:	df 93       	push	r29
    522c:	cd b7       	in	r28, 0x3d	; 61
    522e:	de b7       	in	r29, 0x3e	; 62
    5230:	af 97       	sbiw	r28, 0x2f	; 47
    5232:	0f b6       	in	r0, 0x3f	; 63
    5234:	f8 94       	cli
    5236:	de bf       	out	0x3e, r29	; 62
    5238:	0f be       	out	0x3f, r0	; 63
    523a:	cd bf       	out	0x3d, r28	; 61
	int8_t values[MIXERITEMS];
	menu_range_t range;
	uint8_t text_link = 0;

	// If submenu item has changed, reset submenu positions
	if (menu_flag)
    523c:	90 91 6c 07 	lds	r25, 0x076C
    5240:	99 23       	and	r25, r25
    5242:	29 f0       	breq	.+10     	; 0x524e <menu_mixer+0x44>
	{
		sub_top = MIXERSTART;
    5244:	9e eb       	ldi	r25, 0xBE	; 190
    5246:	90 93 22 01 	sts	0x0122, r25
		menu_flag = 0;
    524a:	10 92 6c 07 	sts	0x076C, r1
	while(button != BACK)
	{
		value_ptr = &values[0];

		// Expand sensor bit values into values array
		if ((Config.Channel[i].P1_sensors & (1 << MotorMarker)) != 0)
    524e:	2d e1       	ldi	r18, 0x1D	; 29
    5250:	82 9f       	mul	r24, r18
    5252:	c0 01       	movw	r24, r0
    5254:	11 24       	eor	r1, r1
    5256:	fc 01       	movw	r30, r24
    5258:	e2 58       	subi	r30, 0x82	; 130
    525a:	fa 4f       	sbci	r31, 0xFA	; 250
    525c:	fb a7       	std	Y+43, r31	; 0x2b
    525e:	ea a7       	std	Y+42, r30	; 0x2a
    5260:	1f 01       	movw	r2, r30
    5262:	f2 ea       	ldi	r31, 0xA2	; 162
    5264:	2f 0e       	add	r2, r31
    5266:	31 1c       	adc	r3, r1
		}

		// P1 roll gyro
		if ((Config.Channel[i].P1_sensors & (1 << RollGyro)) != 0)
		{
			if ((Config.Channel[i].P1_scale & (1 << RollScale)) != 0)
    5268:	4a a4       	ldd	r4, Y+42	; 0x2a
    526a:	5b a4       	ldd	r5, Y+43	; 0x2b
    526c:	24 ea       	ldi	r18, 0xA4	; 164
    526e:	42 0e       	add	r4, r18
    5270:	51 1c       	adc	r5, r1
		{
			values[25] = OFF;
		}

		// Assemble remaining byte data for P1n_position to P2_rudder_volume into array
		memcpy(&values[1],&Config.Channel[i].P1_offset, 13);
    5272:	fc 01       	movw	r30, r24
    5274:	ed 5e       	subi	r30, 0xED	; 237
    5276:	f9 4f       	sbci	r31, 0xF9	; 249
    5278:	fd a7       	std	Y+45, r31	; 0x2d
    527a:	ec a7       	std	Y+44, r30	; 0x2c
		// Assemble remaining byte data for P1_source_a to P2_source_b_volume into array
		memcpy(&values[26],&Config.Channel[i].P1_source_a, 8);
    527c:	9c 01       	movw	r18, r24
    527e:	2c 5d       	subi	r18, 0xDC	; 220
    5280:	39 4f       	sbci	r19, 0xF9	; 249
    5282:	3f a7       	std	Y+47, r19	; 0x2f
    5284:	2e a7       	std	Y+46, r18	; 0x2e
		{
			values[14] = OFF;
		}

		// P2 roll gyro
		if ((Config.Channel[i].P2_sensors & (1 << RollGyro)) != 0)
    5286:	2a a5       	ldd	r18, Y+42	; 0x2a
    5288:	3b a5       	ldd	r19, Y+43	; 0x2b
    528a:	2d 55       	subi	r18, 0x5D	; 93
    528c:	3f 4f       	sbci	r19, 0xFF	; 255
    528e:	39 a7       	std	Y+41, r19	; 0x29
    5290:	28 a7       	std	Y+40, r18	; 0x28
		{
			if ((Config.Channel[i].P2_scale & (1 << RollScale)) != 0)
    5292:	6a a4       	ldd	r6, Y+42	; 0x2a
    5294:	7b a4       	ldd	r7, Y+43	; 0x2b
    5296:	35 ea       	ldi	r19, 0xA5	; 165
    5298:	63 0e       	add	r6, r19
    529a:	71 1c       	adc	r7, r1
	{
		sub_top = MIXERSTART;
		menu_flag = 0;
	}

	while(button != BACK)
    529c:	80 91 6a 07 	lds	r24, 0x076A
    52a0:	80 37       	cpi	r24, 0x70	; 112
    52a2:	09 f4       	brne	.+2      	; 0x52a6 <menu_mixer+0x9c>
    52a4:	d2 c1       	rjmp	.+932    	; 0x564a <menu_mixer+0x440>
	{
		value_ptr = &values[0];

		// Expand sensor bit values into values array
		if ((Config.Channel[i].P1_sensors & (1 << MotorMarker)) != 0)
    52a6:	f1 01       	movw	r30, r2
    52a8:	80 81       	ld	r24, Z
    52aa:	86 ff       	sbrs	r24, 6
    52ac:	03 c0       	rjmp	.+6      	; 0x52b4 <menu_mixer+0xaa>
		{
			values[0] = ON;
    52ae:	91 e0       	ldi	r25, 0x01	; 1
    52b0:	99 83       	std	Y+1, r25	; 0x01
    52b2:	01 c0       	rjmp	.+2      	; 0x52b6 <menu_mixer+0xac>
		}
		else
		{
			values[0] = OFF;
    52b4:	19 82       	std	Y+1, r1	; 0x01
		}

		// P1 roll gyro
		if ((Config.Channel[i].P1_sensors & (1 << RollGyro)) != 0)
    52b6:	80 ff       	sbrs	r24, 0
    52b8:	09 c0       	rjmp	.+18     	; 0x52cc <menu_mixer+0xc2>
		{
			if ((Config.Channel[i].P1_scale & (1 << RollScale)) != 0)
    52ba:	f2 01       	movw	r30, r4
    52bc:	90 81       	ld	r25, Z
    52be:	90 ff       	sbrs	r25, 0
    52c0:	02 c0       	rjmp	.+4      	; 0x52c6 <menu_mixer+0xbc>
			{	
				values[14] = SCALE;
    52c2:	92 e0       	ldi	r25, 0x02	; 2
    52c4:	01 c0       	rjmp	.+2      	; 0x52c8 <menu_mixer+0xbe>
			}
			else
			{
				values[14] = ON;
    52c6:	91 e0       	ldi	r25, 0x01	; 1
    52c8:	9f 87       	std	Y+15, r25	; 0x0f
    52ca:	01 c0       	rjmp	.+2      	; 0x52ce <menu_mixer+0xc4>
			}
		}
		else
		{
			values[14] = OFF;
    52cc:	1f 86       	std	Y+15, r1	; 0x0f
		}

		// P2 roll gyro
		if ((Config.Channel[i].P2_sensors & (1 << RollGyro)) != 0)
    52ce:	e8 a5       	ldd	r30, Y+40	; 0x28
    52d0:	f9 a5       	ldd	r31, Y+41	; 0x29
    52d2:	90 81       	ld	r25, Z
    52d4:	90 ff       	sbrs	r25, 0
    52d6:	09 c0       	rjmp	.+18     	; 0x52ea <menu_mixer+0xe0>
		{
			if ((Config.Channel[i].P2_scale & (1 << RollScale)) != 0)
    52d8:	f3 01       	movw	r30, r6
    52da:	20 81       	ld	r18, Z
    52dc:	20 ff       	sbrs	r18, 0
    52de:	02 c0       	rjmp	.+4      	; 0x52e4 <menu_mixer+0xda>
			{	
				values[15] = SCALE;
    52e0:	22 e0       	ldi	r18, 0x02	; 2
    52e2:	01 c0       	rjmp	.+2      	; 0x52e6 <menu_mixer+0xdc>
			}
			else
			{
				values[15] = ON;
    52e4:	21 e0       	ldi	r18, 0x01	; 1
    52e6:	28 8b       	std	Y+16, r18	; 0x10
    52e8:	01 c0       	rjmp	.+2      	; 0x52ec <menu_mixer+0xe2>
			}
		}
		else
		{
			values[15] = OFF;
    52ea:	18 8a       	std	Y+16, r1	; 0x10
		}

		// P1 pitch gyro
		if ((Config.Channel[i].P1_sensors & (1 << PitchGyro)) != 0)
    52ec:	81 ff       	sbrs	r24, 1
    52ee:	09 c0       	rjmp	.+18     	; 0x5302 <menu_mixer+0xf8>
		{
			if ((Config.Channel[i].P1_scale & (1 << PitchScale)) != 0)
    52f0:	f2 01       	movw	r30, r4
    52f2:	20 81       	ld	r18, Z
    52f4:	21 ff       	sbrs	r18, 1
    52f6:	02 c0       	rjmp	.+4      	; 0x52fc <menu_mixer+0xf2>
			{	
				values[16] = SCALE;
    52f8:	22 e0       	ldi	r18, 0x02	; 2
    52fa:	01 c0       	rjmp	.+2      	; 0x52fe <menu_mixer+0xf4>
			}
			else
			{
				values[16] = ON;
    52fc:	21 e0       	ldi	r18, 0x01	; 1
    52fe:	29 8b       	std	Y+17, r18	; 0x11
    5300:	01 c0       	rjmp	.+2      	; 0x5304 <menu_mixer+0xfa>
			}
		}
		else
		{
			values[16] = OFF;
    5302:	19 8a       	std	Y+17, r1	; 0x11
		}

		// P2 pitch gyro
		if ((Config.Channel[i].P2_sensors & (1 << PitchGyro)) != 0)
    5304:	91 ff       	sbrs	r25, 1
    5306:	09 c0       	rjmp	.+18     	; 0x531a <menu_mixer+0x110>
		{
			if ((Config.Channel[i].P2_scale & (1 << PitchScale)) != 0)
    5308:	f3 01       	movw	r30, r6
    530a:	20 81       	ld	r18, Z
    530c:	21 ff       	sbrs	r18, 1
    530e:	02 c0       	rjmp	.+4      	; 0x5314 <menu_mixer+0x10a>
			{	
				values[17] = SCALE;
    5310:	22 e0       	ldi	r18, 0x02	; 2
    5312:	01 c0       	rjmp	.+2      	; 0x5316 <menu_mixer+0x10c>
			}
			else
			{
				values[17] = ON;
    5314:	21 e0       	ldi	r18, 0x01	; 1
    5316:	2a 8b       	std	Y+18, r18	; 0x12
    5318:	01 c0       	rjmp	.+2      	; 0x531c <menu_mixer+0x112>
			}
		}
		else
		{
			values[17] = OFF;
    531a:	1a 8a       	std	Y+18, r1	; 0x12
		}

		// P1 yaw_gyro
		if ((Config.Channel[i].P1_sensors & (1 << YawGyro)) != 0)
    531c:	82 ff       	sbrs	r24, 2
    531e:	09 c0       	rjmp	.+18     	; 0x5332 <menu_mixer+0x128>
		{
			if ((Config.Channel[i].P1_scale & (1 << YawScale)) != 0)
    5320:	f2 01       	movw	r30, r4
    5322:	20 81       	ld	r18, Z
    5324:	22 ff       	sbrs	r18, 2
    5326:	02 c0       	rjmp	.+4      	; 0x532c <menu_mixer+0x122>
			{	
				values[18] = SCALE;
    5328:	22 e0       	ldi	r18, 0x02	; 2
    532a:	01 c0       	rjmp	.+2      	; 0x532e <menu_mixer+0x124>
			}
			else
			{
				values[18] = ON;
    532c:	21 e0       	ldi	r18, 0x01	; 1
    532e:	2b 8b       	std	Y+19, r18	; 0x13
    5330:	01 c0       	rjmp	.+2      	; 0x5334 <menu_mixer+0x12a>
			}
		}
		else
		{
			values[18] = OFF;
    5332:	1b 8a       	std	Y+19, r1	; 0x13
		}

		// P2 yaw gyro
		if ((Config.Channel[i].P2_sensors & (1 << YawGyro)) != 0)
    5334:	92 ff       	sbrs	r25, 2
    5336:	09 c0       	rjmp	.+18     	; 0x534a <menu_mixer+0x140>
		{
			if ((Config.Channel[i].P2_scale & (1 << YawScale)) != 0)
    5338:	f3 01       	movw	r30, r6
    533a:	20 81       	ld	r18, Z
    533c:	22 ff       	sbrs	r18, 2
    533e:	02 c0       	rjmp	.+4      	; 0x5344 <menu_mixer+0x13a>
			{	
				values[19] = SCALE;
    5340:	22 e0       	ldi	r18, 0x02	; 2
    5342:	01 c0       	rjmp	.+2      	; 0x5346 <menu_mixer+0x13c>
			}
			else
			{
				values[19] = ON;
    5344:	21 e0       	ldi	r18, 0x01	; 1
    5346:	2c 8b       	std	Y+20, r18	; 0x14
    5348:	01 c0       	rjmp	.+2      	; 0x534c <menu_mixer+0x142>
			}
		}
		else
		{
			values[19] = OFF;
    534a:	1c 8a       	std	Y+20, r1	; 0x14
		}

		// P1 roll acc
		if ((Config.Channel[i].P1_sensors & (1 << RollAcc)) != 0)
    534c:	83 ff       	sbrs	r24, 3
    534e:	09 c0       	rjmp	.+18     	; 0x5362 <menu_mixer+0x158>
		{
			if ((Config.Channel[i].P1_scale & (1 << AccRollScale)) != 0)
    5350:	f2 01       	movw	r30, r4
    5352:	20 81       	ld	r18, Z
    5354:	23 ff       	sbrs	r18, 3
    5356:	02 c0       	rjmp	.+4      	; 0x535c <menu_mixer+0x152>
			{	
				values[20] = SCALE;
    5358:	22 e0       	ldi	r18, 0x02	; 2
    535a:	01 c0       	rjmp	.+2      	; 0x535e <menu_mixer+0x154>
			}
			else
			{
				values[20] = ON;
    535c:	21 e0       	ldi	r18, 0x01	; 1
    535e:	2d 8b       	std	Y+21, r18	; 0x15
    5360:	01 c0       	rjmp	.+2      	; 0x5364 <menu_mixer+0x15a>
			}
		}
		else
		{
			values[20] = OFF;
    5362:	1d 8a       	std	Y+21, r1	; 0x15
		}

		// P2 roll acc
		if ((Config.Channel[i].P2_sensors & (1 << RollAcc)) != 0)
    5364:	93 ff       	sbrs	r25, 3
    5366:	09 c0       	rjmp	.+18     	; 0x537a <menu_mixer+0x170>
		{
			if ((Config.Channel[i].P2_scale & (1 << AccRollScale)) != 0)
    5368:	f3 01       	movw	r30, r6
    536a:	20 81       	ld	r18, Z
    536c:	23 ff       	sbrs	r18, 3
    536e:	02 c0       	rjmp	.+4      	; 0x5374 <menu_mixer+0x16a>
			{	
				values[21] = SCALE;
    5370:	22 e0       	ldi	r18, 0x02	; 2
    5372:	01 c0       	rjmp	.+2      	; 0x5376 <menu_mixer+0x16c>
			}
			else
			{
				values[21] = ON;
    5374:	21 e0       	ldi	r18, 0x01	; 1
    5376:	2e 8b       	std	Y+22, r18	; 0x16
    5378:	01 c0       	rjmp	.+2      	; 0x537c <menu_mixer+0x172>
			}
		}
		else
		{
			values[21] = OFF;
    537a:	1e 8a       	std	Y+22, r1	; 0x16
		}

		// P1 pitch acc
		if ((Config.Channel[i].P1_sensors & (1 << PitchAcc)) != 0)
    537c:	84 ff       	sbrs	r24, 4
    537e:	09 c0       	rjmp	.+18     	; 0x5392 <menu_mixer+0x188>
		{
			if ((Config.Channel[i].P1_scale & (1 << AccPitchScale)) != 0)
    5380:	f2 01       	movw	r30, r4
    5382:	20 81       	ld	r18, Z
    5384:	24 ff       	sbrs	r18, 4
    5386:	02 c0       	rjmp	.+4      	; 0x538c <menu_mixer+0x182>
			{	
				values[22] = SCALE;
    5388:	22 e0       	ldi	r18, 0x02	; 2
    538a:	01 c0       	rjmp	.+2      	; 0x538e <menu_mixer+0x184>
			}
			else
			{
				values[22] = ON;
    538c:	21 e0       	ldi	r18, 0x01	; 1
    538e:	2f 8b       	std	Y+23, r18	; 0x17
    5390:	01 c0       	rjmp	.+2      	; 0x5394 <menu_mixer+0x18a>
			}
		}
		else
		{
			values[22] = OFF;
    5392:	1f 8a       	std	Y+23, r1	; 0x17
		}

		// P2 pitch acc
		if ((Config.Channel[i].P2_sensors & (1 << PitchAcc)) != 0)
    5394:	94 ff       	sbrs	r25, 4
    5396:	09 c0       	rjmp	.+18     	; 0x53aa <menu_mixer+0x1a0>
		{
			if ((Config.Channel[i].P2_scale & (1 << AccPitchScale)) != 0)
    5398:	f3 01       	movw	r30, r6
    539a:	20 81       	ld	r18, Z
    539c:	24 ff       	sbrs	r18, 4
    539e:	02 c0       	rjmp	.+4      	; 0x53a4 <menu_mixer+0x19a>
			{	
				values[23] = SCALE;
    53a0:	22 e0       	ldi	r18, 0x02	; 2
    53a2:	01 c0       	rjmp	.+2      	; 0x53a6 <menu_mixer+0x19c>
			}
			else
			{
				values[23] = ON;
    53a4:	21 e0       	ldi	r18, 0x01	; 1
    53a6:	28 8f       	std	Y+24, r18	; 0x18
    53a8:	01 c0       	rjmp	.+2      	; 0x53ac <menu_mixer+0x1a2>
			}
		}
		else
		{
			values[23] = OFF;
    53aa:	18 8e       	std	Y+24, r1	; 0x18
		}

		// P1 Z delta acc
		if ((Config.Channel[i].P1_sensors & (1 << ZDeltaAcc)) != 0)
    53ac:	85 ff       	sbrs	r24, 5
    53ae:	09 c0       	rjmp	.+18     	; 0x53c2 <menu_mixer+0x1b8>
		{
			if ((Config.Channel[i].P1_scale & (1 << AccZScale)) != 0)
    53b0:	f2 01       	movw	r30, r4
    53b2:	80 81       	ld	r24, Z
    53b4:	85 ff       	sbrs	r24, 5
    53b6:	02 c0       	rjmp	.+4      	; 0x53bc <menu_mixer+0x1b2>
			{	
				values[24] = SCALE;
    53b8:	82 e0       	ldi	r24, 0x02	; 2
    53ba:	01 c0       	rjmp	.+2      	; 0x53be <menu_mixer+0x1b4>
			}
			else
			{
				values[24] = ON;
    53bc:	81 e0       	ldi	r24, 0x01	; 1
    53be:	89 8f       	std	Y+25, r24	; 0x19
    53c0:	01 c0       	rjmp	.+2      	; 0x53c4 <menu_mixer+0x1ba>
			}
		}
		else
		{
			values[24] = OFF;
    53c2:	19 8e       	std	Y+25, r1	; 0x19
		}

		// P2 Z delta acc
		if ((Config.Channel[i].P2_sensors & (1 << ZDeltaAcc)) != 0)
    53c4:	95 ff       	sbrs	r25, 5
    53c6:	09 c0       	rjmp	.+18     	; 0x53da <menu_mixer+0x1d0>
		{
			if ((Config.Channel[i].P2_scale & (1 << AccZScale)) != 0)
    53c8:	f3 01       	movw	r30, r6
    53ca:	80 81       	ld	r24, Z
    53cc:	85 ff       	sbrs	r24, 5
    53ce:	02 c0       	rjmp	.+4      	; 0x53d4 <menu_mixer+0x1ca>
			{	
				values[25] = SCALE;
    53d0:	82 e0       	ldi	r24, 0x02	; 2
    53d2:	01 c0       	rjmp	.+2      	; 0x53d6 <menu_mixer+0x1cc>
			}
			else
			{
				values[25] = ON;
    53d4:	81 e0       	ldi	r24, 0x01	; 1
    53d6:	8a 8f       	std	Y+26, r24	; 0x1a
    53d8:	01 c0       	rjmp	.+2      	; 0x53dc <menu_mixer+0x1d2>
			}
		}
		else
		{
			values[25] = OFF;
    53da:	1a 8e       	std	Y+26, r1	; 0x1a
		}

		// Assemble remaining byte data for P1n_position to P2_rudder_volume into array
		memcpy(&values[1],&Config.Channel[i].P1_offset, 13);
    53dc:	8d e0       	ldi	r24, 0x0D	; 13
    53de:	ec a5       	ldd	r30, Y+44	; 0x2c
    53e0:	fd a5       	ldd	r31, Y+45	; 0x2d
    53e2:	de 01       	movw	r26, r28
    53e4:	12 96       	adiw	r26, 0x02	; 2
    53e6:	01 90       	ld	r0, Z+
    53e8:	0d 92       	st	X+, r0
    53ea:	8a 95       	dec	r24
    53ec:	e1 f7       	brne	.-8      	; 0x53e6 <menu_mixer+0x1dc>
		// Assemble remaining byte data for P1_source_a to P2_source_b_volume into array
		memcpy(&values[26],&Config.Channel[i].P1_source_a, 8);
    53ee:	88 e0       	ldi	r24, 0x08	; 8
    53f0:	ee a5       	ldd	r30, Y+46	; 0x2e
    53f2:	ff a5       	ldd	r31, Y+47	; 0x2f
    53f4:	de 01       	movw	r26, r28
    53f6:	5b 96       	adiw	r26, 0x1b	; 27
    53f8:	01 90       	ld	r0, Z+
    53fa:	0d 92       	st	X+, r0
    53fc:	8a 95       	dec	r24
    53fe:	e1 f7       	brne	.-8      	; 0x53f8 <menu_mixer+0x1ee>

		// Print menu
		print_menu_items(sub_top, MIXERSTART, value_ptr, 1, (const unsigned char*)mixer_menu_ranges, 0, MIXOFFSET, (const unsigned char*)MixerMenuText, cursor);
    5400:	80 90 00 01 	lds	r8, 0x0100
    5404:	8f e3       	ldi	r24, 0x3F	; 63
    5406:	a8 2e       	mov	r10, r24
    5408:	88 e1       	ldi	r24, 0x18	; 24
    540a:	b8 2e       	mov	r11, r24
    540c:	99 e5       	ldi	r25, 0x59	; 89
    540e:	c9 2e       	mov	r12, r25
    5410:	e1 2c       	mov	r14, r1
    5412:	05 e9       	ldi	r16, 0x95	; 149
    5414:	17 e1       	ldi	r17, 0x17	; 23
    5416:	21 e0       	ldi	r18, 0x01	; 1
    5418:	ae 01       	movw	r20, r28
    541a:	4f 5f       	subi	r20, 0xFF	; 255
    541c:	5f 4f       	sbci	r21, 0xFF	; 255
    541e:	6e eb       	ldi	r22, 0xBE	; 190
    5420:	80 91 22 01 	lds	r24, 0x0122
    5424:	0e 94 38 27 	call	0x4e70	; 0x4e70 <print_menu_items>

		// Handle menu changes
		update_menu(MIXERITEMS, MIXERSTART, 0, button, &cursor, &sub_top, &menu_temp);
    5428:	2f e1       	ldi	r18, 0x1F	; 31
    542a:	c2 2e       	mov	r12, r18
    542c:	21 e0       	ldi	r18, 0x01	; 1
    542e:	d2 2e       	mov	r13, r18
    5430:	32 e2       	ldi	r19, 0x22	; 34
    5432:	e3 2e       	mov	r14, r19
    5434:	31 e0       	ldi	r19, 0x01	; 1
    5436:	f3 2e       	mov	r15, r19
    5438:	00 e0       	ldi	r16, 0x00	; 0
    543a:	11 e0       	ldi	r17, 0x01	; 1
    543c:	20 91 6a 07 	lds	r18, 0x076A
    5440:	40 e0       	ldi	r20, 0x00	; 0
    5442:	6e eb       	ldi	r22, 0xBE	; 190
    5444:	82 e2       	ldi	r24, 0x22	; 34
    5446:	0e 94 90 26 	call	0x4d20	; 0x4d20 <update_menu>
		range = get_menu_range ((const unsigned char*)mixer_menu_ranges, menu_temp - MIXERSTART);
    544a:	60 91 1f 01 	lds	r22, 0x011F
    544e:	6e 5b       	subi	r22, 0xBE	; 190
    5450:	85 e9       	ldi	r24, 0x95	; 149
    5452:	97 e1       	ldi	r25, 0x17	; 23
    5454:	0e 94 9e 24 	call	0x493c	; 0x493c <get_menu_range>
    5458:	2b a3       	std	Y+35, r18	; 0x23
    545a:	3c a3       	std	Y+36, r19	; 0x24
    545c:	4d a3       	std	Y+37, r20	; 0x25
    545e:	5e a3       	std	Y+38, r21	; 0x26
    5460:	6f a3       	std	Y+39, r22	; 0x27

		if (button == ENTER)
    5462:	80 91 6a 07 	lds	r24, 0x076A
    5466:	80 3e       	cpi	r24, 0xE0	; 224
    5468:	f9 f4       	brne	.+62     	; 0x54a8 <menu_mixer+0x29e>
		{
			text_link = pgm_read_byte(&MixerMenuText[menu_temp - MIXERSTART]);
    546a:	80 91 1f 01 	lds	r24, 0x011F
    546e:	e8 2f       	mov	r30, r24
    5470:	f0 e0       	ldi	r31, 0x00	; 0
    5472:	ef 57       	subi	r30, 0x7F	; 127
    5474:	f8 4e       	sbci	r31, 0xE8	; 232
    5476:	a4 90       	lpm	r10, Z
			do_menu_item(menu_temp, value_ptr + (menu_temp - MIXERSTART), 1, range, 0, text_link, false, 0);
    5478:	68 2f       	mov	r22, r24
    547a:	70 e0       	ldi	r23, 0x00	; 0
    547c:	6e 5b       	subi	r22, 0xBE	; 190
    547e:	71 09       	sbc	r23, r1
    5480:	21 e0       	ldi	r18, 0x01	; 1
    5482:	30 e0       	ldi	r19, 0x00	; 0
    5484:	2c 0f       	add	r18, r28
    5486:	3d 1f       	adc	r19, r29
    5488:	62 0f       	add	r22, r18
    548a:	73 1f       	adc	r23, r19
    548c:	1f 92       	push	r1
    548e:	1f 92       	push	r1
    5490:	81 2c       	mov	r8, r1
    5492:	c1 2c       	mov	r12, r1
    5494:	eb a0       	ldd	r14, Y+35	; 0x23
    5496:	fc a0       	ldd	r15, Y+36	; 0x24
    5498:	0d a1       	ldd	r16, Y+37	; 0x25
    549a:	1e a1       	ldd	r17, Y+38	; 0x26
    549c:	2f a1       	ldd	r18, Y+39	; 0x27
    549e:	41 e0       	ldi	r20, 0x01	; 1
    54a0:	0e 94 23 25 	call	0x4a46	; 0x4a46 <do_menu_item>
    54a4:	0f 90       	pop	r0
    54a6:	0f 90       	pop	r0
		}

		// Save modified byte data for P1 offset to P2_rudder_volume back to Config
		memcpy(&Config.Channel[i].P1_offset,&values[1], 13);
    54a8:	8d e0       	ldi	r24, 0x0D	; 13
    54aa:	fe 01       	movw	r30, r28
    54ac:	32 96       	adiw	r30, 0x02	; 2
    54ae:	ac a5       	ldd	r26, Y+44	; 0x2c
    54b0:	bd a5       	ldd	r27, Y+45	; 0x2d
    54b2:	01 90       	ld	r0, Z+
    54b4:	0d 92       	st	X+, r0
    54b6:	8a 95       	dec	r24
    54b8:	e1 f7       	brne	.-8      	; 0x54b2 <menu_mixer+0x2a8>
		// Save modified byte data for P1_source_a to P2_source_b_volume back to Config
		memcpy(&Config.Channel[i].P1_source_a,&values[26], 8);
    54ba:	88 e0       	ldi	r24, 0x08	; 8
    54bc:	fe 01       	movw	r30, r28
    54be:	7b 96       	adiw	r30, 0x1b	; 27
    54c0:	ae a5       	ldd	r26, Y+46	; 0x2e
    54c2:	bf a5       	ldd	r27, Y+47	; 0x2f
    54c4:	01 90       	ld	r0, Z+
    54c6:	0d 92       	st	X+, r0
    54c8:	8a 95       	dec	r24
    54ca:	e1 f7       	brne	.-8      	; 0x54c4 <menu_mixer+0x2ba>

		// Clear flags before reconstruction
		Config.Channel[i].P1_sensors = 0;
    54cc:	f1 01       	movw	r30, r2
    54ce:	10 82       	st	Z, r1
		Config.Channel[i].P2_sensors = 0;
    54d0:	e8 a5       	ldd	r30, Y+40	; 0x28
    54d2:	f9 a5       	ldd	r31, Y+41	; 0x29
    54d4:	10 82       	st	Z, r1
		Config.Channel[i].P1_scale = 0;
    54d6:	f2 01       	movw	r30, r4
    54d8:	10 82       	st	Z, r1
		Config.Channel[i].P2_scale = 0;
    54da:	f3 01       	movw	r30, r6
    54dc:	10 82       	st	Z, r1

		// Recompress byte data for servos back into bit values for the sensors byte
		if (values[0] == ON)
    54de:	89 81       	ldd	r24, Y+1	; 0x01
    54e0:	81 30       	cpi	r24, 0x01	; 1
    54e2:	29 f4       	brne	.+10     	; 0x54ee <menu_mixer+0x2e4>
		{
			Config.Channel[i].P1_sensors |= (1 << MotorMarker);
    54e4:	80 e0       	ldi	r24, 0x00	; 0
    54e6:	80 64       	ori	r24, 0x40	; 64
    54e8:	f1 01       	movw	r30, r2
    54ea:	80 83       	st	Z, r24
    54ec:	02 c0       	rjmp	.+4      	; 0x54f2 <menu_mixer+0x2e8>
		}
		else
		{
			Config.Channel[i].P1_sensors &= ~(1 << MotorMarker);	
    54ee:	f1 01       	movw	r30, r2
    54f0:	10 82       	st	Z, r1
		}

		// P1 roll gyro
		switch (values[14])
    54f2:	8f 85       	ldd	r24, Y+15	; 0x0f
    54f4:	81 30       	cpi	r24, 0x01	; 1
    54f6:	31 f0       	breq	.+12     	; 0x5504 <menu_mixer+0x2fa>
    54f8:	82 30       	cpi	r24, 0x02	; 2
    54fa:	41 f4       	brne	.+16     	; 0x550c <menu_mixer+0x302>
		{
			case OFF:
				break;
			case SCALE:
				Config.Channel[i].P1_scale |= (1 << RollScale);
    54fc:	f2 01       	movw	r30, r4
    54fe:	80 81       	ld	r24, Z
    5500:	81 60       	ori	r24, 0x01	; 1
    5502:	80 83       	st	Z, r24
			case ON:
				Config.Channel[i].P1_sensors |= (1 << RollGyro);
    5504:	f1 01       	movw	r30, r2
    5506:	80 81       	ld	r24, Z
    5508:	81 60       	ori	r24, 0x01	; 1
    550a:	80 83       	st	Z, r24
				break;
		}
		// P2 roll gyro
		switch (values[15])
    550c:	88 89       	ldd	r24, Y+16	; 0x10
    550e:	81 30       	cpi	r24, 0x01	; 1
    5510:	31 f0       	breq	.+12     	; 0x551e <menu_mixer+0x314>
    5512:	82 30       	cpi	r24, 0x02	; 2
    5514:	49 f4       	brne	.+18     	; 0x5528 <menu_mixer+0x31e>
		{
			case OFF:
				break;
			case SCALE:
				Config.Channel[i].P2_scale |= (1 << RollScale);
    5516:	f3 01       	movw	r30, r6
    5518:	80 81       	ld	r24, Z
    551a:	81 60       	ori	r24, 0x01	; 1
    551c:	80 83       	st	Z, r24
			case ON:
				Config.Channel[i].P2_sensors |= (1 << RollGyro);
    551e:	e8 a5       	ldd	r30, Y+40	; 0x28
    5520:	f9 a5       	ldd	r31, Y+41	; 0x29
    5522:	80 81       	ld	r24, Z
    5524:	81 60       	ori	r24, 0x01	; 1
    5526:	80 83       	st	Z, r24
				break;
		}
		// P1 pitch gyro
		switch (values[16])
    5528:	89 89       	ldd	r24, Y+17	; 0x11
    552a:	81 30       	cpi	r24, 0x01	; 1
    552c:	31 f0       	breq	.+12     	; 0x553a <menu_mixer+0x330>
    552e:	82 30       	cpi	r24, 0x02	; 2
    5530:	41 f4       	brne	.+16     	; 0x5542 <menu_mixer+0x338>
		{
			case OFF:
				break;
			case SCALE:
				Config.Channel[i].P1_scale |= (1 << PitchScale);
    5532:	f2 01       	movw	r30, r4
    5534:	80 81       	ld	r24, Z
    5536:	82 60       	ori	r24, 0x02	; 2
    5538:	80 83       	st	Z, r24
			case ON:
				Config.Channel[i].P1_sensors |= (1 << PitchGyro);
    553a:	f1 01       	movw	r30, r2
    553c:	80 81       	ld	r24, Z
    553e:	82 60       	ori	r24, 0x02	; 2
    5540:	80 83       	st	Z, r24
				break;
		}
		// P2 pitch gyro
		switch (values[17])
    5542:	8a 89       	ldd	r24, Y+18	; 0x12
    5544:	81 30       	cpi	r24, 0x01	; 1
    5546:	31 f0       	breq	.+12     	; 0x5554 <menu_mixer+0x34a>
    5548:	82 30       	cpi	r24, 0x02	; 2
    554a:	49 f4       	brne	.+18     	; 0x555e <menu_mixer+0x354>
		{
			case OFF:
				break;
			case SCALE:
				Config.Channel[i].P2_scale |= (1 << PitchScale);
    554c:	f3 01       	movw	r30, r6
    554e:	80 81       	ld	r24, Z
    5550:	82 60       	ori	r24, 0x02	; 2
    5552:	80 83       	st	Z, r24
			case ON:
				Config.Channel[i].P2_sensors |= (1 << PitchGyro);
    5554:	e8 a5       	ldd	r30, Y+40	; 0x28
    5556:	f9 a5       	ldd	r31, Y+41	; 0x29
    5558:	80 81       	ld	r24, Z
    555a:	82 60       	ori	r24, 0x02	; 2
    555c:	80 83       	st	Z, r24
				break;
		}
		// P1 yaw gyro
		switch (values[18])
    555e:	8b 89       	ldd	r24, Y+19	; 0x13
    5560:	81 30       	cpi	r24, 0x01	; 1
    5562:	31 f0       	breq	.+12     	; 0x5570 <menu_mixer+0x366>
    5564:	82 30       	cpi	r24, 0x02	; 2
    5566:	41 f4       	brne	.+16     	; 0x5578 <menu_mixer+0x36e>
		{
			case OFF:
				break;
			case SCALE:
				Config.Channel[i].P1_scale |= (1 << YawScale);
    5568:	f2 01       	movw	r30, r4
    556a:	80 81       	ld	r24, Z
    556c:	84 60       	ori	r24, 0x04	; 4
    556e:	80 83       	st	Z, r24
			case ON:
				Config.Channel[i].P1_sensors |= (1 << YawGyro);
    5570:	f1 01       	movw	r30, r2
    5572:	80 81       	ld	r24, Z
    5574:	84 60       	ori	r24, 0x04	; 4
    5576:	80 83       	st	Z, r24
				break;
		}
		// P2 yaw gyro
		switch (values[19])
    5578:	8c 89       	ldd	r24, Y+20	; 0x14
    557a:	81 30       	cpi	r24, 0x01	; 1
    557c:	31 f0       	breq	.+12     	; 0x558a <menu_mixer+0x380>
    557e:	82 30       	cpi	r24, 0x02	; 2
    5580:	49 f4       	brne	.+18     	; 0x5594 <menu_mixer+0x38a>
		{
			case OFF:
				break;
			case SCALE:
				Config.Channel[i].P2_scale |= (1 << YawScale);
    5582:	f3 01       	movw	r30, r6
    5584:	80 81       	ld	r24, Z
    5586:	84 60       	ori	r24, 0x04	; 4
    5588:	80 83       	st	Z, r24
			case ON:
				Config.Channel[i].P2_sensors |= (1 << YawGyro);
    558a:	e8 a5       	ldd	r30, Y+40	; 0x28
    558c:	f9 a5       	ldd	r31, Y+41	; 0x29
    558e:	80 81       	ld	r24, Z
    5590:	84 60       	ori	r24, 0x04	; 4
    5592:	80 83       	st	Z, r24
				break;
		}
		// P1 roll acc
		switch (values[20])
    5594:	8d 89       	ldd	r24, Y+21	; 0x15
    5596:	81 30       	cpi	r24, 0x01	; 1
    5598:	31 f0       	breq	.+12     	; 0x55a6 <menu_mixer+0x39c>
    559a:	82 30       	cpi	r24, 0x02	; 2
    559c:	41 f4       	brne	.+16     	; 0x55ae <menu_mixer+0x3a4>
		{
			case OFF:
				break;
			case SCALE:
				Config.Channel[i].P1_scale |= (1 << AccRollScale);
    559e:	f2 01       	movw	r30, r4
    55a0:	80 81       	ld	r24, Z
    55a2:	88 60       	ori	r24, 0x08	; 8
    55a4:	80 83       	st	Z, r24
			case ON:
				Config.Channel[i].P1_sensors |= (1 << RollAcc);
    55a6:	f1 01       	movw	r30, r2
    55a8:	80 81       	ld	r24, Z
    55aa:	88 60       	ori	r24, 0x08	; 8
    55ac:	80 83       	st	Z, r24
				break;
		}
		// P2 roll acc
		switch (values[21])
    55ae:	8e 89       	ldd	r24, Y+22	; 0x16
    55b0:	81 30       	cpi	r24, 0x01	; 1
    55b2:	31 f0       	breq	.+12     	; 0x55c0 <menu_mixer+0x3b6>
    55b4:	82 30       	cpi	r24, 0x02	; 2
    55b6:	49 f4       	brne	.+18     	; 0x55ca <menu_mixer+0x3c0>
		{
			case OFF:
				break;
			case SCALE:
				Config.Channel[i].P2_scale |= (1 << AccRollScale);
    55b8:	f3 01       	movw	r30, r6
    55ba:	80 81       	ld	r24, Z
    55bc:	88 60       	ori	r24, 0x08	; 8
    55be:	80 83       	st	Z, r24
			case ON:
				Config.Channel[i].P2_sensors |= (1 << RollAcc);
    55c0:	e8 a5       	ldd	r30, Y+40	; 0x28
    55c2:	f9 a5       	ldd	r31, Y+41	; 0x29
    55c4:	80 81       	ld	r24, Z
    55c6:	88 60       	ori	r24, 0x08	; 8
    55c8:	80 83       	st	Z, r24
				break;
		}
		// P1 pitch acc
		switch (values[22])
    55ca:	8f 89       	ldd	r24, Y+23	; 0x17
    55cc:	81 30       	cpi	r24, 0x01	; 1
    55ce:	31 f0       	breq	.+12     	; 0x55dc <menu_mixer+0x3d2>
    55d0:	82 30       	cpi	r24, 0x02	; 2
    55d2:	41 f4       	brne	.+16     	; 0x55e4 <menu_mixer+0x3da>
		{
			case OFF:
				break;
			case SCALE:
				Config.Channel[i].P1_scale |= (1 << AccPitchScale);
    55d4:	f2 01       	movw	r30, r4
    55d6:	80 81       	ld	r24, Z
    55d8:	80 61       	ori	r24, 0x10	; 16
    55da:	80 83       	st	Z, r24
			case ON:
				Config.Channel[i].P1_sensors |= (1 << PitchAcc);
    55dc:	f1 01       	movw	r30, r2
    55de:	80 81       	ld	r24, Z
    55e0:	80 61       	ori	r24, 0x10	; 16
    55e2:	80 83       	st	Z, r24
				break;
		}

		// P2 pitch acc
		switch (values[23])
    55e4:	88 8d       	ldd	r24, Y+24	; 0x18
    55e6:	81 30       	cpi	r24, 0x01	; 1
    55e8:	31 f0       	breq	.+12     	; 0x55f6 <menu_mixer+0x3ec>
    55ea:	82 30       	cpi	r24, 0x02	; 2
    55ec:	49 f4       	brne	.+18     	; 0x5600 <menu_mixer+0x3f6>
		{
			case OFF:
				break;
			case SCALE:
				Config.Channel[i].P2_scale |= (1 << AccPitchScale);
    55ee:	f3 01       	movw	r30, r6
    55f0:	80 81       	ld	r24, Z
    55f2:	80 61       	ori	r24, 0x10	; 16
    55f4:	80 83       	st	Z, r24
			case ON:
				Config.Channel[i].P2_sensors |= (1 << PitchAcc);
    55f6:	e8 a5       	ldd	r30, Y+40	; 0x28
    55f8:	f9 a5       	ldd	r31, Y+41	; 0x29
    55fa:	80 81       	ld	r24, Z
    55fc:	80 61       	ori	r24, 0x10	; 16
    55fe:	80 83       	st	Z, r24
				break;
		}
		// P1 Z delta acc
		switch (values[24])
    5600:	89 8d       	ldd	r24, Y+25	; 0x19
    5602:	81 30       	cpi	r24, 0x01	; 1
    5604:	31 f0       	breq	.+12     	; 0x5612 <menu_mixer+0x408>
    5606:	82 30       	cpi	r24, 0x02	; 2
    5608:	41 f4       	brne	.+16     	; 0x561a <menu_mixer+0x410>
		{
			case OFF:
				break;
			case SCALE:
				Config.Channel[i].P1_scale |= (1 << AccZScale);
    560a:	f2 01       	movw	r30, r4
    560c:	80 81       	ld	r24, Z
    560e:	80 62       	ori	r24, 0x20	; 32
    5610:	80 83       	st	Z, r24
			case ON:
				Config.Channel[i].P1_sensors |= (1 << ZDeltaAcc);
    5612:	f1 01       	movw	r30, r2
    5614:	80 81       	ld	r24, Z
    5616:	80 62       	ori	r24, 0x20	; 32
    5618:	80 83       	st	Z, r24
				break;
		}
		// P2 Z delta acc
		switch (values[25])
    561a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    561c:	81 30       	cpi	r24, 0x01	; 1
    561e:	31 f0       	breq	.+12     	; 0x562c <menu_mixer+0x422>
    5620:	82 30       	cpi	r24, 0x02	; 2
    5622:	49 f4       	brne	.+18     	; 0x5636 <menu_mixer+0x42c>
		{
			case OFF:
				break;
			case SCALE:
				Config.Channel[i].P2_scale |= (1 << AccZScale);
    5624:	f3 01       	movw	r30, r6
    5626:	80 81       	ld	r24, Z
    5628:	80 62       	ori	r24, 0x20	; 32
    562a:	80 83       	st	Z, r24
			case ON:
				Config.Channel[i].P2_sensors |= (1 << ZDeltaAcc);
    562c:	e8 a5       	ldd	r30, Y+40	; 0x28
    562e:	f9 a5       	ldd	r31, Y+41	; 0x29
    5630:	80 81       	ld	r24, Z
    5632:	80 62       	ori	r24, 0x20	; 32
    5634:	80 83       	st	Z, r24
				break;
		}

		// Save and exit
		if (button == ENTER)
    5636:	80 91 6a 07 	lds	r24, 0x076A
    563a:	80 3e       	cpi	r24, 0xE0	; 224
    563c:	09 f0       	breq	.+2      	; 0x5640 <menu_mixer+0x436>
    563e:	2e ce       	rjmp	.-932    	; 0x529c <menu_mixer+0x92>
		{
			UpdateLimits();			 // Update travel limits based on percentages
    5640:	0e 94 b9 2c 	call	0x5972	; 0x5972 <UpdateLimits>
			Save_Config_to_EEPROM(); // Save value and return
    5644:	0e 94 31 16 	call	0x2c62	; 0x2c62 <Save_Config_to_EEPROM>
    5648:	1e ce       	rjmp	.-964    	; 0x5286 <menu_mixer+0x7c>
		}

	} // while(button != BACK)

}
    564a:	af 96       	adiw	r28, 0x2f	; 47
    564c:	0f b6       	in	r0, 0x3f	; 63
    564e:	f8 94       	cli
    5650:	de bf       	out	0x3e, r29	; 62
    5652:	0f be       	out	0x3f, r0	; 63
    5654:	cd bf       	out	0x3d, r28	; 61
    5656:	df 91       	pop	r29
    5658:	cf 91       	pop	r28
    565a:	1f 91       	pop	r17
    565c:	0f 91       	pop	r16
    565e:	ff 90       	pop	r15
    5660:	ef 90       	pop	r14
    5662:	df 90       	pop	r13
    5664:	cf 90       	pop	r12
    5666:	bf 90       	pop	r11
    5668:	af 90       	pop	r10
    566a:	8f 90       	pop	r8
    566c:	7f 90       	pop	r7
    566e:	6f 90       	pop	r6
    5670:	5f 90       	pop	r5
    5672:	4f 90       	pop	r4
    5674:	3f 90       	pop	r3
    5676:	2f 90       	pop	r2
    5678:	08 95       	ret

0000567a <menu_servo_setup>:
//************************************************************
// Main menu-specific setup
//************************************************************

void menu_servo_setup(uint8_t section)
{
    567a:	a9 e0       	ldi	r26, 0x09	; 9
    567c:	b0 e0       	ldi	r27, 0x00	; 0
    567e:	e3 e4       	ldi	r30, 0x43	; 67
    5680:	fb e2       	ldi	r31, 0x2B	; 43
    5682:	0c 94 1b 3d 	jmp	0x7a36	; 0x7a36 <__prologue_saves__>
    5686:	8f 83       	std	Y+7, r24	; 0x07
	uint8_t i = 0;
	bool	servo_enable = false;
	bool	zero_setting = false;

	// If submenu item has changed, reset submenu positions
	if (menu_flag)
    5688:	80 91 6c 07 	lds	r24, 0x076C
    568c:	88 23       	and	r24, r24
    568e:	29 f0       	breq	.+10     	; 0x569a <menu_servo_setup+0x20>
	{
		sub_top = SERVOSTART;
    5690:	86 ee       	ldi	r24, 0xE6	; 230
    5692:	80 93 22 01 	sts	0x0122, r24
		menu_flag = 0;
    5696:	10 92 6c 07 	sts	0x076C, r1
			}

			// Do not allow servo enable for throttle if in CPPM mode
			if ((Config.Channel[menu_temp - SERVOSTART].P1_source_a == THROTTLE) && (Config.RxMode == CPPM_MODE))
			{
				servo_enable = false;
    569a:	1e 82       	std	Y+6, r1	; 0x06
    569c:	57 ef       	ldi	r21, 0xF7	; 247
    569e:	65 2e       	mov	r6, r21
    56a0:	56 e0       	ldi	r21, 0x06	; 6
    56a2:	75 2e       	mov	r7, r21
					break;
			}
		}

		// Print menu
		print_menu_items(sub_top, SERVOSTART, value_ptr, 1, (const unsigned char*)servo_menu_ranges[section - 1], 1, SERVOOFFSET, (const unsigned char*)ServoMenuText[section - 1], cursor);
    56a4:	8f 81       	ldd	r24, Y+7	; 0x07
    56a6:	28 2e       	mov	r2, r24
    56a8:	31 2c       	mov	r3, r1
    56aa:	91 e0       	ldi	r25, 0x01	; 1
    56ac:	29 1a       	sub	r2, r25
    56ae:	31 08       	sbc	r3, r1
    56b0:	85 e0       	ldi	r24, 0x05	; 5
    56b2:	82 9d       	mul	r24, r2
    56b4:	20 01       	movw	r4, r0
    56b6:	83 9d       	mul	r24, r3
    56b8:	50 0c       	add	r5, r0
    56ba:	11 24       	eor	r1, r1
    56bc:	c2 01       	movw	r24, r4
    56be:	8f 59       	subi	r24, 0x9F	; 159
    56c0:	97 4e       	sbci	r25, 0xE7	; 231
    56c2:	2c 01       	movw	r4, r24
    56c4:	63 e0       	ldi	r22, 0x03	; 3
    56c6:	22 0c       	add	r2, r2
    56c8:	33 1c       	adc	r3, r3
    56ca:	6a 95       	dec	r22
    56cc:	e1 f7       	brne	.-8      	; 0x56c6 <menu_servo_setup+0x4c>
    56ce:	c1 01       	movw	r24, r2
    56d0:	80 59       	subi	r24, 0x90	; 144
    56d2:	97 4e       	sbci	r25, 0xE7	; 231
    56d4:	99 87       	std	Y+9, r25	; 0x09
    56d6:	88 87       	std	Y+8, r24	; 0x08
		menu_flag = 0;
	}

	// Get menu offsets
	// 1 = Reverse, 2 = Min, 3 = Max
	while(button != BACK)
    56d8:	80 91 6a 07 	lds	r24, 0x076A
    56dc:	80 37       	cpi	r24, 0x70	; 112
    56de:	09 f4       	brne	.+2      	; 0x56e2 <menu_servo_setup+0x68>
    56e0:	8b c0       	rjmp	.+278    	; 0x57f8 <menu_servo_setup+0x17e>
    56e2:	88 e0       	ldi	r24, 0x08	; 8
    56e4:	91 2c       	mov	r9, r1
	{
		// Load values from eeprom
		for (i = 0; i < SERVOITEMS; i++)
		{
			switch(section)
    56e6:	9f 81       	ldd	r25, Y+7	; 0x07
    56e8:	92 30       	cpi	r25, 0x02	; 2
    56ea:	59 f0       	breq	.+22     	; 0x5702 <menu_servo_setup+0x88>
    56ec:	93 30       	cpi	r25, 0x03	; 3
    56ee:	89 f4       	brne	.+34     	; 0x5712 <menu_servo_setup+0x98>
					zero_setting = true;
					break;
				case 3:
					value_ptr = &Config.max_travel[0];
					servo_enable = true;
					zero_setting = true;
    56f0:	91 e0       	ldi	r25, 0x01	; 1
    56f2:	9e 83       	std	Y+6, r25	; 0x06
					servo_enable = true;
					zero_setting = true;
					break;
				case 3:
					value_ptr = &Config.max_travel[0];
					servo_enable = true;
    56f4:	99 24       	eor	r9, r9
    56f6:	93 94       	inc	r9
					value_ptr = &Config.min_travel[0];
					servo_enable = true;
					zero_setting = true;
					break;
				case 3:
					value_ptr = &Config.max_travel[0];
    56f8:	37 e0       	ldi	r19, 0x07	; 7
    56fa:	63 2e       	mov	r6, r19
    56fc:	37 e0       	ldi	r19, 0x07	; 7
    56fe:	73 2e       	mov	r7, r19
					servo_enable = true;
					zero_setting = true;
					break;
    5700:	08 c0       	rjmp	.+16     	; 0x5712 <menu_servo_setup+0x98>
				case 1:
					break;
				case 2:
					value_ptr = &Config.min_travel[0];
					servo_enable = true;
					zero_setting = true;
    5702:	91 e0       	ldi	r25, 0x01	; 1
    5704:	9e 83       	std	Y+6, r25	; 0x06
			{
				case 1:
					break;
				case 2:
					value_ptr = &Config.min_travel[0];
					servo_enable = true;
    5706:	99 24       	eor	r9, r9
    5708:	93 94       	inc	r9
			switch(section)
			{
				case 1:
					break;
				case 2:
					value_ptr = &Config.min_travel[0];
    570a:	4f ef       	ldi	r20, 0xFF	; 255
    570c:	64 2e       	mov	r6, r20
    570e:	46 e0       	ldi	r20, 0x06	; 6
    5710:	74 2e       	mov	r7, r20
    5712:	81 50       	subi	r24, 0x01	; 1
	// Get menu offsets
	// 1 = Reverse, 2 = Min, 3 = Max
	while(button != BACK)
	{
		// Load values from eeprom
		for (i = 0; i < SERVOITEMS; i++)
    5714:	41 f7       	brne	.-48     	; 0x56e6 <menu_servo_setup+0x6c>
					break;
			}
		}

		// Print menu
		print_menu_items(sub_top, SERVOSTART, value_ptr, 1, (const unsigned char*)servo_menu_ranges[section - 1], 1, SERVOOFFSET, (const unsigned char*)ServoMenuText[section - 1], cursor);
    5716:	80 90 00 01 	lds	r8, 0x0100
    571a:	a8 84       	ldd	r10, Y+8	; 0x08
    571c:	b9 84       	ldd	r11, Y+9	; 0x09
    571e:	80 e5       	ldi	r24, 0x50	; 80
    5720:	c8 2e       	mov	r12, r24
    5722:	ee 24       	eor	r14, r14
    5724:	e3 94       	inc	r14
    5726:	82 01       	movw	r16, r4
    5728:	21 e0       	ldi	r18, 0x01	; 1
    572a:	a3 01       	movw	r20, r6
    572c:	66 ee       	ldi	r22, 0xE6	; 230
    572e:	80 91 22 01 	lds	r24, 0x0122
    5732:	0e 94 38 27 	call	0x4e70	; 0x4e70 <print_menu_items>

		// Handle menu changes
		update_menu(SERVOITEMS, SERVOSTART, 0, button, &cursor, &sub_top, &menu_temp);
    5736:	9f e1       	ldi	r25, 0x1F	; 31
    5738:	c9 2e       	mov	r12, r25
    573a:	91 e0       	ldi	r25, 0x01	; 1
    573c:	d9 2e       	mov	r13, r25
    573e:	22 e2       	ldi	r18, 0x22	; 34
    5740:	e2 2e       	mov	r14, r18
    5742:	21 e0       	ldi	r18, 0x01	; 1
    5744:	f2 2e       	mov	r15, r18
    5746:	00 e0       	ldi	r16, 0x00	; 0
    5748:	11 e0       	ldi	r17, 0x01	; 1
    574a:	20 91 6a 07 	lds	r18, 0x076A
    574e:	40 e0       	ldi	r20, 0x00	; 0
    5750:	66 ee       	ldi	r22, 0xE6	; 230
    5752:	88 e0       	ldi	r24, 0x08	; 8
    5754:	0e 94 90 26 	call	0x4d20	; 0x4d20 <update_menu>
		range = get_menu_range ((const unsigned char*)servo_menu_ranges[section - 1], 0);
    5758:	60 e0       	ldi	r22, 0x00	; 0
    575a:	c2 01       	movw	r24, r4
    575c:	0e 94 9e 24 	call	0x493c	; 0x493c <get_menu_range>
    5760:	29 83       	std	Y+1, r18	; 0x01
    5762:	3a 83       	std	Y+2, r19	; 0x02
    5764:	4b 83       	std	Y+3, r20	; 0x03
    5766:	5c 83       	std	Y+4, r21	; 0x04
    5768:	6d 83       	std	Y+5, r22	; 0x05

		if (button == ENTER)
    576a:	80 91 6a 07 	lds	r24, 0x076A
    576e:	80 3e       	cpi	r24, 0xE0	; 224
    5770:	c9 f5       	brne	.+114    	; 0x57e4 <menu_servo_setup+0x16a>
		{
			text_link = pgm_read_byte(&ServoMenuText[section - 1][menu_temp - SERVOSTART]);
    5772:	80 91 1f 01 	lds	r24, 0x011F
    5776:	28 2f       	mov	r18, r24
    5778:	30 e0       	ldi	r19, 0x00	; 0
    577a:	26 5e       	subi	r18, 0xE6	; 230
    577c:	31 09       	sbc	r19, r1
    577e:	f9 01       	movw	r30, r18
    5780:	e2 0d       	add	r30, r2
    5782:	f3 1d       	adc	r31, r3
    5784:	e0 59       	subi	r30, 0x90	; 144
    5786:	f7 4e       	sbci	r31, 0xE7	; 231
    5788:	a4 90       	lpm	r10, Z
    578a:	68 2f       	mov	r22, r24
    578c:	70 e0       	ldi	r23, 0x00	; 0

			// Zero limits if adjusting
			if (zero_setting)
    578e:	9e 81       	ldd	r25, Y+6	; 0x06
    5790:	99 23       	and	r25, r25
    5792:	31 f0       	breq	.+12     	; 0x57a0 <menu_servo_setup+0x126>
			{
				value_ptr[menu_temp - SERVOSTART] = 0;
    5794:	d3 01       	movw	r26, r6
    5796:	a6 0f       	add	r26, r22
    5798:	b7 1f       	adc	r27, r23
    579a:	a6 5e       	subi	r26, 0xE6	; 230
    579c:	b1 09       	sbc	r27, r1
    579e:	1c 92       	st	X, r1
			}

			// Do not allow servo enable for throttle if in CPPM mode
			if ((Config.Channel[menu_temp - SERVOSTART].P1_source_a == THROTTLE) && (Config.RxMode == CPPM_MODE))
    57a0:	9d e1       	ldi	r25, 0x1D	; 29
    57a2:	92 9f       	mul	r25, r18
    57a4:	d0 01       	movw	r26, r0
    57a6:	93 9f       	mul	r25, r19
    57a8:	b0 0d       	add	r27, r0
    57aa:	11 24       	eor	r1, r1
    57ac:	ac 5d       	subi	r26, 0xDC	; 220
    57ae:	b9 4f       	sbci	r27, 0xF9	; 249
    57b0:	9c 91       	ld	r25, X
    57b2:	91 11       	cpse	r25, r1
    57b4:	05 c0       	rjmp	.+10     	; 0x57c0 <menu_servo_setup+0x146>
    57b6:	90 91 a7 05 	lds	r25, 0x05A7
    57ba:	91 11       	cpse	r25, r1
    57bc:	01 c0       	rjmp	.+2      	; 0x57c0 <menu_servo_setup+0x146>
			{
				servo_enable = false;
    57be:	91 2c       	mov	r9, r1
			}

			do_menu_item(menu_temp, value_ptr + (menu_temp - SERVOSTART), 1, range, 0, text_link, servo_enable, (menu_temp - SERVOSTART));
    57c0:	66 5e       	subi	r22, 0xE6	; 230
    57c2:	71 09       	sbc	r23, r1
    57c4:	66 0d       	add	r22, r6
    57c6:	77 1d       	adc	r23, r7
    57c8:	3f 93       	push	r19
    57ca:	2f 93       	push	r18
    57cc:	89 2c       	mov	r8, r9
    57ce:	c1 2c       	mov	r12, r1
    57d0:	e9 80       	ldd	r14, Y+1	; 0x01
    57d2:	fa 80       	ldd	r15, Y+2	; 0x02
    57d4:	0b 81       	ldd	r16, Y+3	; 0x03
    57d6:	1c 81       	ldd	r17, Y+4	; 0x04
    57d8:	2d 81       	ldd	r18, Y+5	; 0x05
    57da:	41 e0       	ldi	r20, 0x01	; 1
    57dc:	0e 94 23 25 	call	0x4a46	; 0x4a46 <do_menu_item>
    57e0:	0f 90       	pop	r0
    57e2:	0f 90       	pop	r0
		}

		// Disable servos
		servo_enable = false;

		if (button == ENTER)
    57e4:	80 91 6a 07 	lds	r24, 0x076A
    57e8:	80 3e       	cpi	r24, 0xE0	; 224
    57ea:	09 f0       	breq	.+2      	; 0x57ee <menu_servo_setup+0x174>
    57ec:	75 cf       	rjmp	.-278    	; 0x56d8 <menu_servo_setup+0x5e>
		{
			UpdateLimits();				// Update actual servo trims
    57ee:	0e 94 b9 2c 	call	0x5972	; 0x5972 <UpdateLimits>
			Save_Config_to_EEPROM();	// Save value and return
    57f2:	0e 94 31 16 	call	0x2c62	; 0x2c62 <Save_Config_to_EEPROM>
    57f6:	70 cf       	rjmp	.-288    	; 0x56d8 <menu_servo_setup+0x5e>
		}
	}
}
    57f8:	29 96       	adiw	r28, 0x09	; 9
    57fa:	e2 e1       	ldi	r30, 0x12	; 18
    57fc:	0c 94 37 3d 	jmp	0x7a6e	; 0x7a6e <__epilogue_restores__>

00005800 <menu_rc_setup>:
//************************************************************
// Main menu-specific setup
//************************************************************

void menu_rc_setup(uint8_t section)
{
    5800:	a9 e0       	ldi	r26, 0x09	; 9
    5802:	b0 e0       	ldi	r27, 0x00	; 0
    5804:	e6 e0       	ldi	r30, 0x06	; 6
    5806:	fc e2       	ldi	r31, 0x2C	; 44
    5808:	0c 94 1b 3d 	jmp	0x7a36	; 0x7a36 <__prologue_saves__>
    580c:	8f 83       	std	Y+7, r24	; 0x07
	uint8_t i;
	uint8_t offset = 0;			// Index into channel structure
	uint8_t	items= RCITEMS;		// Items in group
	
	// If submenu item has changed, reset submenu positions
	if (menu_flag)
    580e:	80 91 6c 07 	lds	r24, 0x076C
    5812:	88 23       	and	r24, r24
    5814:	29 f0       	breq	.+10     	; 0x5820 <menu_rc_setup+0x20>
	{
		sub_top = RCSTART;
    5816:	85 e9       	ldi	r24, 0x95	; 149
    5818:	80 93 22 01 	sts	0x0122, r24
		menu_flag = 0;
    581c:	10 92 6c 07 	sts	0x076C, r1
			UpdateLimits();			// Update I-term limits and triggers based on percentages

			// Update channel sequence
			for (i = 0; i < MAX_RC_CHANNELS; i++)
			{
				if (Config.TxSeq == FUTABASEQ)
    5820:	2a e0       	ldi	r18, 0x0A	; 10
    5822:	2e 83       	std	Y+6, r18	; 0x06
    5824:	91 2c       	mov	r9, r1
    5826:	67 ea       	ldi	r22, 0xA7	; 167
    5828:	46 2e       	mov	r4, r22
    582a:	65 e0       	ldi	r22, 0x05	; 5
    582c:	56 2e       	mov	r5, r22
			default:
				break;
		}

		// Print menu
		print_menu_items(sub_top + offset, RCSTART + offset, value_ptr, 1, (const unsigned char*)rc_menu_ranges[section - 1], 0, RCOFFSET, (const unsigned char*)RCMenuText[section - 1], cursor);
    582e:	3f 81       	ldd	r19, Y+7	; 0x07
    5830:	83 2f       	mov	r24, r19
    5832:	90 e0       	ldi	r25, 0x00	; 0
    5834:	01 97       	sbiw	r24, 0x01	; 1
    5836:	22 e3       	ldi	r18, 0x32	; 50
    5838:	28 9f       	mul	r18, r24
    583a:	30 01       	movw	r6, r0
    583c:	29 9f       	mul	r18, r25
    583e:	70 0c       	add	r7, r0
    5840:	11 24       	eor	r1, r1
    5842:	93 01       	movw	r18, r6
    5844:	28 57       	subi	r18, 0x78	; 120
    5846:	37 4e       	sbci	r19, 0xE7	; 231
    5848:	39 01       	movw	r6, r18
    584a:	3a e0       	ldi	r19, 0x0A	; 10
    584c:	38 9f       	mul	r19, r24
    584e:	10 01       	movw	r2, r0
    5850:	39 9f       	mul	r19, r25
    5852:	30 0c       	add	r3, r0
    5854:	11 24       	eor	r1, r1
    5856:	c1 01       	movw	r24, r2
    5858:	84 51       	subi	r24, 0x14	; 20
    585a:	97 4e       	sbci	r25, 0xE7	; 231
    585c:	99 87       	std	Y+9, r25	; 0x09
    585e:	88 87       	std	Y+8, r24	; 0x08
	{
		sub_top = RCSTART;
		menu_flag = 0;
	}

	while(button != BACK)
    5860:	80 91 6a 07 	lds	r24, 0x076A
    5864:	80 37       	cpi	r24, 0x70	; 112
    5866:	09 f4       	brne	.+2      	; 0x586a <menu_rc_setup+0x6a>
    5868:	80 c0       	rjmp	.+256    	; 0x596a <menu_rc_setup+0x16a>
	{
		// Get menu offsets and load values from eeprom
		// 1 = RC, 2 = General
		switch(section)
    586a:	9f 81       	ldd	r25, Y+7	; 0x07
    586c:	92 30       	cpi	r25, 0x02	; 2
    586e:	41 f4       	brne	.+16     	; 0x5880 <menu_rc_setup+0x80>
		{
			case 1:				// RC setup menu
				break;
			case 2:				// General menu
				offset = RCITEMS;
				items = GENERALITEMS;
    5870:	28 e0       	ldi	r18, 0x08	; 8
    5872:	2e 83       	std	Y+6, r18	; 0x06
		switch(section)
		{
			case 1:				// RC setup menu
				break;
			case 2:				// General menu
				offset = RCITEMS;
    5874:	4a e0       	ldi	r20, 0x0A	; 10
    5876:	94 2e       	mov	r9, r20
				items = GENERALITEMS;
				value_ptr = &Config.Orientation;
    5878:	57 e0       	ldi	r21, 0x07	; 7
    587a:	45 2e       	mov	r4, r21
    587c:	56 e0       	ldi	r21, 0x06	; 6
    587e:	55 2e       	mov	r5, r21
			default:
				break;
		}

		// Print menu
		print_menu_items(sub_top + offset, RCSTART + offset, value_ptr, 1, (const unsigned char*)rc_menu_ranges[section - 1], 0, RCOFFSET, (const unsigned char*)RCMenuText[section - 1], cursor);
    5880:	80 91 22 01 	lds	r24, 0x0122
    5884:	80 90 00 01 	lds	r8, 0x0100
    5888:	a8 84       	ldd	r10, Y+8	; 0x08
    588a:	b9 84       	ldd	r11, Y+9	; 0x09
    588c:	9f e4       	ldi	r25, 0x4F	; 79
    588e:	c9 2e       	mov	r12, r25
    5890:	e1 2c       	mov	r14, r1
    5892:	83 01       	movw	r16, r6
    5894:	21 e0       	ldi	r18, 0x01	; 1
    5896:	a2 01       	movw	r20, r4
    5898:	65 e9       	ldi	r22, 0x95	; 149
    589a:	69 0d       	add	r22, r9
    589c:	89 0d       	add	r24, r9
    589e:	0e 94 38 27 	call	0x4e70	; 0x4e70 <print_menu_items>

		// Handle menu changes
		update_menu(items, RCSTART, offset, button, &cursor, &sub_top, &menu_temp);
    58a2:	2f e1       	ldi	r18, 0x1F	; 31
    58a4:	c2 2e       	mov	r12, r18
    58a6:	21 e0       	ldi	r18, 0x01	; 1
    58a8:	d2 2e       	mov	r13, r18
    58aa:	32 e2       	ldi	r19, 0x22	; 34
    58ac:	e3 2e       	mov	r14, r19
    58ae:	31 e0       	ldi	r19, 0x01	; 1
    58b0:	f3 2e       	mov	r15, r19
    58b2:	00 e0       	ldi	r16, 0x00	; 0
    58b4:	11 e0       	ldi	r17, 0x01	; 1
    58b6:	20 91 6a 07 	lds	r18, 0x076A
    58ba:	49 2d       	mov	r20, r9
    58bc:	65 e9       	ldi	r22, 0x95	; 149
    58be:	8e 81       	ldd	r24, Y+6	; 0x06
    58c0:	0e 94 90 26 	call	0x4d20	; 0x4d20 <update_menu>
		range = get_menu_range ((const unsigned char*)rc_menu_ranges[section - 1], (menu_temp - RCSTART - offset)); 
    58c4:	60 91 1f 01 	lds	r22, 0x011F
    58c8:	65 59       	subi	r22, 0x95	; 149
    58ca:	69 19       	sub	r22, r9
    58cc:	c3 01       	movw	r24, r6
    58ce:	0e 94 9e 24 	call	0x493c	; 0x493c <get_menu_range>
    58d2:	29 83       	std	Y+1, r18	; 0x01
    58d4:	3a 83       	std	Y+2, r19	; 0x02
    58d6:	4b 83       	std	Y+3, r20	; 0x03
    58d8:	5c 83       	std	Y+4, r21	; 0x04
    58da:	6d 83       	std	Y+5, r22	; 0x05

		if (button == ENTER)
    58dc:	80 91 6a 07 	lds	r24, 0x076A
    58e0:	80 3e       	cpi	r24, 0xE0	; 224
    58e2:	f1 f4       	brne	.+60     	; 0x5920 <menu_rc_setup+0x120>
		{
			text_link = pgm_read_byte(&RCMenuText[section - 1][menu_temp - RCSTART - offset]);
    58e4:	80 91 1f 01 	lds	r24, 0x011F
    58e8:	68 2f       	mov	r22, r24
    58ea:	70 e0       	ldi	r23, 0x00	; 0
    58ec:	65 59       	subi	r22, 0x95	; 149
    58ee:	71 09       	sbc	r23, r1
    58f0:	69 19       	sub	r22, r9
    58f2:	71 09       	sbc	r23, r1
    58f4:	fb 01       	movw	r30, r22
    58f6:	e2 0d       	add	r30, r2
    58f8:	f3 1d       	adc	r31, r3
    58fa:	e4 51       	subi	r30, 0x14	; 20
    58fc:	f7 4e       	sbci	r31, 0xE7	; 231
    58fe:	a4 90       	lpm	r10, Z
			do_menu_item(menu_temp, value_ptr + (menu_temp - RCSTART - offset), 1, range, 0, text_link, false, 0);
    5900:	64 0d       	add	r22, r4
    5902:	75 1d       	adc	r23, r5
    5904:	1f 92       	push	r1
    5906:	1f 92       	push	r1
    5908:	81 2c       	mov	r8, r1
    590a:	c1 2c       	mov	r12, r1
    590c:	e9 80       	ldd	r14, Y+1	; 0x01
    590e:	fa 80       	ldd	r15, Y+2	; 0x02
    5910:	0b 81       	ldd	r16, Y+3	; 0x03
    5912:	1c 81       	ldd	r17, Y+4	; 0x04
    5914:	2d 81       	ldd	r18, Y+5	; 0x05
    5916:	41 e0       	ldi	r20, 0x01	; 1
    5918:	0e 94 23 25 	call	0x4a46	; 0x4a46 <do_menu_item>
    591c:	0f 90       	pop	r0
    591e:	0f 90       	pop	r0
		}

		if (button == ENTER)
    5920:	80 91 6a 07 	lds	r24, 0x076A
    5924:	80 3e       	cpi	r24, 0xE0	; 224
    5926:	09 f0       	breq	.+2      	; 0x592a <menu_rc_setup+0x12a>
    5928:	9b cf       	rjmp	.-202    	; 0x5860 <menu_rc_setup+0x60>
		{
			init_int();				// In case RC type has changed, reinitialise interrupts
    592a:	0e 94 68 20 	call	0x40d0	; 0x40d0 <init_int>
			init_uart();			// and UART
    592e:	0e 94 33 39 	call	0x7266	; 0x7266 <init_uart>

			UpdateIMUvalues();		// Update IMU variables
    5932:	0e 94 3d 20 	call	0x407a	; 0x407a <UpdateIMUvalues>
			UpdateLimits();			// Update I-term limits and triggers based on percentages
    5936:	0e 94 b9 2c 	call	0x5972	; 0x5972 <UpdateLimits>

			// Update channel sequence
			for (i = 0; i < MAX_RC_CHANNELS; i++)
			{
				if (Config.TxSeq == FUTABASEQ)
    593a:	20 91 a9 05 	lds	r18, 0x05A9
    593e:	af e7       	ldi	r26, 0x7F	; 127
    5940:	b5 e0       	ldi	r27, 0x05	; 5
    5942:	80 e0       	ldi	r24, 0x00	; 0
    5944:	90 e0       	ldi	r25, 0x00	; 0
    5946:	fc 01       	movw	r30, r24
    5948:	21 30       	cpi	r18, 0x01	; 1
    594a:	19 f4       	brne	.+6      	; 0x5952 <menu_rc_setup+0x152>
    594c:	ec 50       	subi	r30, 0x0C	; 12
    594e:	ff 4f       	sbci	r31, 0xFF	; 255
    5950:	02 c0       	rjmp	.+4      	; 0x5956 <menu_rc_setup+0x156>
    5952:	e4 50       	subi	r30, 0x04	; 4
    5954:	ff 4f       	sbci	r31, 0xFF	; 255
				{
					Config.ChannelOrder[i] = pgm_read_byte(&FUTABA[i]);
				}
				else
				{
					Config.ChannelOrder[i] = pgm_read_byte(&JR[i]);
    5956:	e4 91       	lpm	r30, Z
    5958:	ec 93       	st	X, r30
    595a:	01 96       	adiw	r24, 0x01	; 1
    595c:	11 96       	adiw	r26, 0x01	; 1

			UpdateIMUvalues();		// Update IMU variables
			UpdateLimits();			// Update I-term limits and triggers based on percentages

			// Update channel sequence
			for (i = 0; i < MAX_RC_CHANNELS; i++)
    595e:	88 30       	cpi	r24, 0x08	; 8
    5960:	91 05       	cpc	r25, r1
    5962:	89 f7       	brne	.-30     	; 0x5946 <menu_rc_setup+0x146>
				{
					Config.ChannelOrder[i] = pgm_read_byte(&JR[i]);
				}
			}

			Save_Config_to_EEPROM(); // Save value and return
    5964:	0e 94 31 16 	call	0x2c62	; 0x2c62 <Save_Config_to_EEPROM>
    5968:	7b cf       	rjmp	.-266    	; 0x5860 <menu_rc_setup+0x60>
		}
	}
}
    596a:	29 96       	adiw	r28, 0x09	; 9
    596c:	e2 e1       	ldi	r30, 0x12	; 18
    596e:	0c 94 37 3d 	jmp	0x7a6e	; 0x7a6e <__epilogue_restores__>

00005972 <UpdateLimits>:

// Update actual limits value with that from the mix setting percentages
// This is only done at start-up and whenever the values are changed
// so as to reduce CPU loop load
void UpdateLimits(void)
{
    5972:	ac e0       	ldi	r26, 0x0C	; 12
    5974:	b0 e0       	ldi	r27, 0x00	; 0
    5976:	ef eb       	ldi	r30, 0xBF	; 191
    5978:	fc e2       	ldi	r31, 0x2C	; 44
    597a:	0c 94 1f 3d 	jmp	0x7a3e	; 0x7a3e <__prologue_saves__+0x8>
	uint8_t i,j;
	int32_t temp32, gain32;

	int8_t limits[FLIGHT_MODES][NUMBEROFAXIS] = 
    597e:	80 91 b3 05 	lds	r24, 0x05B3
    5982:	8f 83       	std	Y+7, r24	; 0x07
    5984:	80 91 b9 05 	lds	r24, 0x05B9
    5988:	88 87       	std	Y+8, r24	; 0x08
    598a:	80 91 bf 05 	lds	r24, 0x05BF
    598e:	89 87       	std	Y+9, r24	; 0x09
    5990:	80 91 c5 05 	lds	r24, 0x05C5
    5994:	8a 87       	std	Y+10, r24	; 0x0a
    5996:	80 91 cb 05 	lds	r24, 0x05CB
    599a:	8b 87       	std	Y+11, r24	; 0x0b
    599c:	80 91 d1 05 	lds	r24, 0x05D1
    59a0:	8c 87       	std	Y+12, r24	; 0x0c
		{
			{Config.FlightMode[P1].Roll_limit, Config.FlightMode[P1].Pitch_limit, Config.FlightMode[P1].Yaw_limit},
			{Config.FlightMode[P2].Roll_limit, Config.FlightMode[P2].Pitch_limit, Config.FlightMode[P2].Yaw_limit}
		};

	int8_t gains[FLIGHT_MODES][NUMBEROFAXIS] = 
    59a2:	80 91 b2 05 	lds	r24, 0x05B2
    59a6:	89 83       	std	Y+1, r24	; 0x01
    59a8:	80 91 b8 05 	lds	r24, 0x05B8
    59ac:	8a 83       	std	Y+2, r24	; 0x02
    59ae:	80 91 be 05 	lds	r24, 0x05BE
    59b2:	8b 83       	std	Y+3, r24	; 0x03
    59b4:	80 91 c4 05 	lds	r24, 0x05C4
    59b8:	8c 83       	std	Y+4, r24	; 0x04
    59ba:	80 91 ca 05 	lds	r24, 0x05CA
    59be:	8d 83       	std	Y+5, r24	; 0x05
    59c0:	80 91 d0 05 	lds	r24, 0x05D0
    59c4:	8e 83       	std	Y+6, r24	; 0x06
			{Config.FlightMode[P1].Roll_I_mult, Config.FlightMode[P1].Pitch_I_mult, Config.FlightMode[P1].Yaw_I_mult},
			{Config.FlightMode[P2].Roll_I_mult, Config.FlightMode[P2].Pitch_I_mult, Config.FlightMode[P2].Yaw_I_mult}
		};

	// Update triggers
	Config.PowerTriggerActual = Config.PowerTrigger * 10;
    59c6:	80 91 0b 06 	lds	r24, 0x060B
    59ca:	2a e0       	ldi	r18, 0x0A	; 10
    59cc:	82 02       	muls	r24, r18
    59ce:	c0 01       	movw	r24, r0
    59d0:	11 24       	eor	r1, r1
    59d2:	90 93 06 06 	sts	0x0606, r25
    59d6:	80 93 05 06 	sts	0x0605, r24
    59da:	45 ed       	ldi	r20, 0xD5	; 213
    59dc:	a4 2e       	mov	r10, r20
    59de:	45 e0       	ldi	r20, 0x05	; 5
    59e0:	b4 2e       	mov	r11, r20
    59e2:	00 e0       	ldi	r16, 0x00	; 0
    59e4:	10 e0       	ldi	r17, 0x00	; 0

// Update actual limits value with that from the mix setting percentages
// This is only done at start-up and whenever the values are changed
// so as to reduce CPU loop load
void UpdateLimits(void)
{
    59e6:	65 01       	movw	r12, r10
    59e8:	e1 2c       	mov	r14, r1
    59ea:	f1 2c       	mov	r15, r1
    59ec:	87 e0       	ldi	r24, 0x07	; 7
    59ee:	88 2e       	mov	r8, r24
    59f0:	91 2c       	mov	r9, r1
    59f2:	8c 0e       	add	r8, r28
    59f4:	9d 1e       	adc	r9, r29
    59f6:	80 0e       	add	r8, r16
    59f8:	91 1e       	adc	r9, r17
    59fa:	66 24       	eor	r6, r6
    59fc:	63 94       	inc	r6
    59fe:	71 2c       	mov	r7, r1
    5a00:	6c 0e       	add	r6, r28
    5a02:	7d 1e       	adc	r7, r29
    5a04:	60 0e       	add	r6, r16
    5a06:	71 1e       	adc	r7, r17
    5a08:	f4 01       	movw	r30, r8
    5a0a:	ee 0d       	add	r30, r14
    5a0c:	ff 1d       	adc	r31, r15
	// Update I_term input constraints for all profiles
	for (j = 0; j < FLIGHT_MODES; j++)
	{
		for (i = 0; i < NUMBEROFAXIS; i++)
		{
			temp32 	= limits[j][i]; 						// Promote limit %
    5a0e:	a0 81       	ld	r26, Z

			// I-term output (throw). Convert from % to actual count
			// A value of 80,000 results in +/- 1250 or full throw at the output stage
			// This is because the maximum signal value is +/-1250 after division by 64. 1250 * 64 = 80,000
			Config.Raw_I_Limits[j][i] = temp32 * (int32_t)640;	// 80,000 / 125% = 640
    5a10:	bb 27       	eor	r27, r27
    5a12:	a7 fd       	sbrc	r26, 7
    5a14:	b0 95       	com	r27
    5a16:	20 e8       	ldi	r18, 0x80	; 128
    5a18:	32 e0       	ldi	r19, 0x02	; 2
    5a1a:	0e 94 01 3d 	call	0x7a02	; 0x7a02 <__usmulhisi3>
    5a1e:	d6 01       	movw	r26, r12
    5a20:	6d 93       	st	X+, r22
    5a22:	7d 93       	st	X+, r23
    5a24:	8d 93       	st	X+, r24
    5a26:	9d 93       	st	X+, r25
    5a28:	6d 01       	movw	r12, r26
    5a2a:	f3 01       	movw	r30, r6
    5a2c:	ee 0d       	add	r30, r14
    5a2e:	ff 1d       	adc	r31, r15

			// I-term source limits. These have to be different due to the I-term gain setting
			// I-term = (gyro * gain) / 32, so the gyro count for a particular gain and limit are
			// Gyro = (I-term * 32) / gain :) 

			if (gains[j][i] != 0)
    5a30:	20 81       	ld	r18, Z
    5a32:	22 23       	and	r18, r18
    5a34:	a1 f0       	breq	.+40     	; 0x5a5e <UpdateLimits+0xec>
			{
				gain32 = gains[j][i];						// Promote gain value
				Config.Raw_I_Constrain[j][i] = (Config.Raw_I_Limits[j][i] << 5) / gain32;
    5a36:	35 e0       	ldi	r19, 0x05	; 5
    5a38:	66 0f       	add	r22, r22
    5a3a:	77 1f       	adc	r23, r23
    5a3c:	88 1f       	adc	r24, r24
    5a3e:	99 1f       	adc	r25, r25
    5a40:	3a 95       	dec	r19
    5a42:	d1 f7       	brne	.-12     	; 0x5a38 <UpdateLimits+0xc6>
			// I-term = (gyro * gain) / 32, so the gyro count for a particular gain and limit are
			// Gyro = (I-term * 32) / gain :) 

			if (gains[j][i] != 0)
			{
				gain32 = gains[j][i];						// Promote gain value
    5a44:	33 27       	eor	r19, r19
    5a46:	27 fd       	sbrc	r18, 7
    5a48:	30 95       	com	r19
    5a4a:	43 2f       	mov	r20, r19
    5a4c:	53 2f       	mov	r21, r19
				Config.Raw_I_Constrain[j][i] = (Config.Raw_I_Limits[j][i] << 5) / gain32;
    5a4e:	0e 94 c5 3c 	call	0x798a	; 0x798a <__divmodsi4>
    5a52:	f6 01       	movw	r30, r12
    5a54:	24 8b       	std	Z+20, r18	; 0x14
    5a56:	35 8b       	std	Z+21, r19	; 0x15
    5a58:	46 8b       	std	Z+22, r20	; 0x16
    5a5a:	57 8b       	std	Z+23, r21	; 0x17
    5a5c:	06 c0       	rjmp	.+12     	; 0x5a6a <UpdateLimits+0xf8>
			}
			else 
			{
				Config.Raw_I_Constrain[j][i] = 0;
    5a5e:	54 96       	adiw	r26, 0x14	; 20
    5a60:	1d 92       	st	X+, r1
    5a62:	1d 92       	st	X+, r1
    5a64:	1d 92       	st	X+, r1
    5a66:	1c 92       	st	X, r1
    5a68:	57 97       	sbiw	r26, 0x17	; 23
    5a6a:	bf ef       	ldi	r27, 0xFF	; 255
    5a6c:	eb 1a       	sub	r14, r27
    5a6e:	fb 0a       	sbc	r15, r27
	Config.PowerTriggerActual = Config.PowerTrigger * 10;

	// Update I_term input constraints for all profiles
	for (j = 0; j < FLIGHT_MODES; j++)
	{
		for (i = 0; i < NUMBEROFAXIS; i++)
    5a70:	e3 e0       	ldi	r30, 0x03	; 3
    5a72:	ee 16       	cp	r14, r30
    5a74:	f1 04       	cpc	r15, r1
    5a76:	41 f6       	brne	.-112    	; 0x5a08 <UpdateLimits+0x96>
    5a78:	fc e0       	ldi	r31, 0x0C	; 12
    5a7a:	af 0e       	add	r10, r31
    5a7c:	b1 1c       	adc	r11, r1
    5a7e:	0d 5f       	subi	r16, 0xFD	; 253
    5a80:	1f 4f       	sbci	r17, 0xFF	; 255

	// Update triggers
	Config.PowerTriggerActual = Config.PowerTrigger * 10;

	// Update I_term input constraints for all profiles
	for (j = 0; j < FLIGHT_MODES; j++)
    5a82:	06 30       	cpi	r16, 0x06	; 6
    5a84:	11 05       	cpc	r17, r1
    5a86:	09 f0       	breq	.+2      	; 0x5a8a <UpdateLimits+0x118>
    5a88:	ae cf       	rjmp	.-164    	; 0x59e6 <UpdateLimits+0x74>
    5a8a:	8f ef       	ldi	r24, 0xFF	; 255
    5a8c:	96 e0       	ldi	r25, 0x06	; 6
    5a8e:	e7 e8       	ldi	r30, 0x87	; 135
    5a90:	f5 e0       	ldi	r31, 0x05	; 5
    5a92:	67 e0       	ldi	r22, 0x07	; 7
    5a94:	77 e0       	ldi	r23, 0x07	; 7
	}

	// Update travel limits
	for (i = 0; i < MAX_OUTPUTS; i++)
	{
		Config.Limits[i].minimum = scale_percent(Config.min_travel[i]);
    5a96:	dc 01       	movw	r26, r24
    5a98:	2d 91       	ld	r18, X+
    5a9a:	cd 01       	movw	r24, r26
int16_t scale_percent(int8_t value)
{
	int16_t temp16_1, temp16_2;

	temp16_1 = value; // Promote
	temp16_2 = ((temp16_1 * (int16_t)10) + 3750);
    5a9c:	ba e0       	ldi	r27, 0x0A	; 10
    5a9e:	2b 02       	muls	r18, r27
    5aa0:	90 01       	movw	r18, r0
    5aa2:	11 24       	eor	r1, r1
    5aa4:	2a 55       	subi	r18, 0x5A	; 90
    5aa6:	31 4f       	sbci	r19, 0xF1	; 241
	}

	// Update travel limits
	for (i = 0; i < MAX_OUTPUTS; i++)
	{
		Config.Limits[i].minimum = scale_percent(Config.min_travel[i]);
    5aa8:	31 83       	std	Z+1, r19	; 0x01
    5aaa:	20 83       	st	Z, r18
		Config.Limits[i].maximum = scale_percent(Config.max_travel[i]);
    5aac:	db 01       	movw	r26, r22
    5aae:	2d 91       	ld	r18, X+
    5ab0:	bd 01       	movw	r22, r26
int16_t scale_percent(int8_t value)
{
	int16_t temp16_1, temp16_2;

	temp16_1 = value; // Promote
	temp16_2 = ((temp16_1 * (int16_t)10) + 3750);
    5ab2:	ba e0       	ldi	r27, 0x0A	; 10
    5ab4:	2b 02       	muls	r18, r27
    5ab6:	90 01       	movw	r18, r0
    5ab8:	11 24       	eor	r1, r1
    5aba:	2a 55       	subi	r18, 0x5A	; 90
    5abc:	31 4f       	sbci	r19, 0xF1	; 241

	// Update travel limits
	for (i = 0; i < MAX_OUTPUTS; i++)
	{
		Config.Limits[i].minimum = scale_percent(Config.min_travel[i]);
		Config.Limits[i].maximum = scale_percent(Config.max_travel[i]);
    5abe:	33 83       	std	Z+3, r19	; 0x03
    5ac0:	22 83       	std	Z+2, r18	; 0x02
    5ac2:	34 96       	adiw	r30, 0x04	; 4
			}
		}
	}

	// Update travel limits
	for (i = 0; i < MAX_OUTPUTS; i++)
    5ac4:	25 e0       	ldi	r18, 0x05	; 5
    5ac6:	e7 3a       	cpi	r30, 0xA7	; 167
    5ac8:	f2 07       	cpc	r31, r18
    5aca:	29 f7       	brne	.-54     	; 0x5a96 <UpdateLimits+0x124>

	// Adjust trim to match 0.01 degree resolution
	// A value of 127 multiplied by 10 = 1270 which in 1/100ths of a degree equates to 12.7 degrees
	for (i = P1; i <= P2; i++)
	{
		Config.Rolltrim[i] = Config.FlightMode[i].AccRollZeroTrim * 10;
    5acc:	80 91 b6 05 	lds	r24, 0x05B6
    5ad0:	4a e0       	ldi	r20, 0x0A	; 10
    5ad2:	84 02       	muls	r24, r20
    5ad4:	c0 01       	movw	r24, r0
    5ad6:	11 24       	eor	r1, r1
    5ad8:	90 93 35 07 	sts	0x0735, r25
    5adc:	80 93 34 07 	sts	0x0734, r24
		Config.Pitchtrim[i] = Config.FlightMode[i].AccPitchZeroTrim * 10;
    5ae0:	80 91 bc 05 	lds	r24, 0x05BC
    5ae4:	aa e0       	ldi	r26, 0x0A	; 10
    5ae6:	8a 02       	muls	r24, r26
    5ae8:	c0 01       	movw	r24, r0
    5aea:	11 24       	eor	r1, r1
    5aec:	90 93 39 07 	sts	0x0739, r25
    5af0:	80 93 38 07 	sts	0x0738, r24

	// Adjust trim to match 0.01 degree resolution
	// A value of 127 multiplied by 10 = 1270 which in 1/100ths of a degree equates to 12.7 degrees
	for (i = P1; i <= P2; i++)
	{
		Config.Rolltrim[i] = Config.FlightMode[i].AccRollZeroTrim * 10;
    5af4:	80 91 c8 05 	lds	r24, 0x05C8
    5af8:	ba e0       	ldi	r27, 0x0A	; 10
    5afa:	8b 02       	muls	r24, r27
    5afc:	c0 01       	movw	r24, r0
    5afe:	11 24       	eor	r1, r1
    5b00:	90 93 37 07 	sts	0x0737, r25
    5b04:	80 93 36 07 	sts	0x0736, r24
		Config.Pitchtrim[i] = Config.FlightMode[i].AccPitchZeroTrim * 10;
    5b08:	80 91 ce 05 	lds	r24, 0x05CE
    5b0c:	ea e0       	ldi	r30, 0x0A	; 10
    5b0e:	8e 02       	muls	r24, r30
    5b10:	c0 01       	movw	r24, r0
    5b12:	11 24       	eor	r1, r1
    5b14:	90 93 3b 07 	sts	0x073B, r25
    5b18:	80 93 3a 07 	sts	0x073A, r24
	}
}
    5b1c:	2c 96       	adiw	r28, 0x0c	; 12
    5b1e:	ee e0       	ldi	r30, 0x0E	; 14
    5b20:	0c 94 3b 3d 	jmp	0x7a76	; 0x7a76 <__epilogue_restores__+0x8>

00005b24 <UpdateServos>:

// Update servos from the mixer Config.Channel[i].P1_value data, add offsets and enforce travel limits
void UpdateServos(void)
{
    5b24:	cf 93       	push	r28
    5b26:	df 93       	push	r29
    5b28:	6f e0       	ldi	r22, 0x0F	; 15
    5b2a:	76 e0       	ldi	r23, 0x06	; 6
    5b2c:	27 ef       	ldi	r18, 0xF7	; 247
    5b2e:	36 e0       	ldi	r19, 0x06	; 6
    5b30:	e1 eb       	ldi	r30, 0xB1	; 177
    5b32:	f7 e0       	ldi	r31, 0x07	; 7
    5b34:	c7 e8       	ldi	r28, 0x87	; 135
    5b36:	d5 e0       	ldi	r29, 0x05	; 5
	int16_t temp1 = 0; // Output value

	for (i = 0; i < MAX_OUTPUTS; i++)
	{
		// Servo reverse and trim for the eight physical outputs
		temp1 = Config.Channel[i].P1_value;
    5b38:	db 01       	movw	r26, r22
    5b3a:	8d 91       	ld	r24, X+
    5b3c:	9c 91       	ld	r25, X

		// Reverse this channel for the eight physical outputs
		if ((i <= MAX_OUTPUTS) && (Config.Servo_reverse[i] == ON))
    5b3e:	d9 01       	movw	r26, r18
    5b40:	4d 91       	ld	r20, X+
    5b42:	9d 01       	movw	r18, r26
    5b44:	41 30       	cpi	r20, 0x01	; 1
    5b46:	19 f4       	brne	.+6      	; 0x5b4e <UpdateServos+0x2a>
		{	
			temp1 = -temp1;
    5b48:	91 95       	neg	r25
    5b4a:	81 95       	neg	r24
    5b4c:	91 09       	sbc	r25, r1
		}

		// Add offset value to restore to system compatible value
		temp1 += 3750;
    5b4e:	8a 55       	subi	r24, 0x5A	; 90
    5b50:	91 4f       	sbci	r25, 0xF1	; 241

		// Enforce min, max travel limits
		if (temp1 > Config.Limits[i].maximum)
    5b52:	4a 81       	ldd	r20, Y+2	; 0x02
    5b54:	5b 81       	ldd	r21, Y+3	; 0x03
    5b56:	48 17       	cp	r20, r24
    5b58:	59 07       	cpc	r21, r25
    5b5a:	2c f0       	brlt	.+10     	; 0x5b66 <UpdateServos+0x42>
		{
			ServoOut[i] = Config.Limits[i].maximum;
		}

		else if (temp1 < Config.Limits[i].minimum)
    5b5c:	48 81       	ld	r20, Y
    5b5e:	59 81       	ldd	r21, Y+1	; 0x01
    5b60:	84 17       	cp	r24, r20
    5b62:	95 07       	cpc	r25, r21
    5b64:	1c f4       	brge	.+6      	; 0x5b6c <UpdateServos+0x48>
		{
			ServoOut[i] = Config.Limits[i].minimum;
    5b66:	51 83       	std	Z+1, r21	; 0x01
    5b68:	40 83       	st	Z, r20
    5b6a:	02 c0       	rjmp	.+4      	; 0x5b70 <UpdateServos+0x4c>
		}

		// Transfer value to servo
		else
		{
			ServoOut[i] = temp1;
    5b6c:	91 83       	std	Z+1, r25	; 0x01
    5b6e:	80 83       	st	Z, r24
    5b70:	63 5e       	subi	r22, 0xE3	; 227
    5b72:	7f 4f       	sbci	r23, 0xFF	; 255
    5b74:	32 96       	adiw	r30, 0x02	; 2
    5b76:	24 96       	adiw	r28, 0x04	; 4
void UpdateServos(void)
{
	uint8_t i;
	int16_t temp1 = 0; // Output value

	for (i = 0; i < MAX_OUTPUTS; i++)
    5b78:	b6 e0       	ldi	r27, 0x06	; 6
    5b7a:	67 3f       	cpi	r22, 0xF7	; 247
    5b7c:	7b 07       	cpc	r23, r27
    5b7e:	e1 f6       	brne	.-72     	; 0x5b38 <UpdateServos+0x14>
		else
		{
			ServoOut[i] = temp1;
		}
	}
}
    5b80:	df 91       	pop	r29
    5b82:	cf 91       	pop	r28
    5b84:	08 95       	ret

00005b86 <scale32>:

// 32 bit multiply/scale for broken GCC
// Returns immediately if multiplier is 100, 0 or -100
int16_t scale32(int16_t value16, int16_t multiplier16)
{
    5b86:	9c 01       	movw	r18, r24
	int32_t temp32 = 0;
	int32_t mult32 = 0;

	// No change if 100% (no scaling)
	if (multiplier16 == 100)
    5b88:	64 36       	cpi	r22, 0x64	; 100
    5b8a:	71 05       	cpc	r23, r1
    5b8c:	e9 f0       	breq	.+58     	; 0x5bc8 <scale32+0x42>
	{
		return value16;
	}

	// Reverse if -100%
	else if (multiplier16 == -100)
    5b8e:	6c 39       	cpi	r22, 0x9C	; 156
    5b90:	8f ef       	ldi	r24, 0xFF	; 255
    5b92:	78 07       	cpc	r23, r24
    5b94:	29 f4       	brne	.+10     	; 0x5ba0 <scale32+0x1a>
	{
		return -value16;	
    5b96:	88 27       	eor	r24, r24
    5b98:	99 27       	eor	r25, r25
    5b9a:	82 1b       	sub	r24, r18
    5b9c:	93 0b       	sbc	r25, r19
    5b9e:	08 95       	ret
	}

	// Zero if 0%
	else if (multiplier16 == 0)
    5ba0:	61 15       	cp	r22, r1
    5ba2:	71 05       	cpc	r23, r1
    5ba4:	71 f0       	breq	.+28     	; 0x5bc2 <scale32+0x3c>
	else
	{
		// GCC is broken bad regarding multiplying 32 bit numbers, hence all this crap...
		mult32 = multiplier16;
		temp32 = value16;
		temp32 = temp32 * mult32;
    5ba6:	db 01       	movw	r26, r22
    5ba8:	0e 94 ea 3c 	call	0x79d4	; 0x79d4 <__mulhisi3>

		// Divide by 100 and round to get scaled value
		temp32 = (temp32 + (int32_t)50) / (int32_t)100; // Constants need to be cast up to 32 bits
    5bac:	6e 5c       	subi	r22, 0xCE	; 206
    5bae:	7f 4f       	sbci	r23, 0xFF	; 255
    5bb0:	8f 4f       	sbci	r24, 0xFF	; 255
    5bb2:	9f 4f       	sbci	r25, 0xFF	; 255
    5bb4:	24 e6       	ldi	r18, 0x64	; 100
    5bb6:	30 e0       	ldi	r19, 0x00	; 0
    5bb8:	40 e0       	ldi	r20, 0x00	; 0
    5bba:	50 e0       	ldi	r21, 0x00	; 0
    5bbc:	0e 94 c5 3c 	call	0x798a	; 0x798a <__divmodsi4>
    5bc0:	03 c0       	rjmp	.+6      	; 0x5bc8 <scale32+0x42>
	}

	// Zero if 0%
	else if (multiplier16 == 0)
	{
		return 0;	
    5bc2:	80 e0       	ldi	r24, 0x00	; 0
    5bc4:	90 e0       	ldi	r25, 0x00	; 0
    5bc6:	08 95       	ret
	int32_t mult32 = 0;

	// No change if 100% (no scaling)
	if (multiplier16 == 100)
	{
		return value16;
    5bc8:	c9 01       	movw	r24, r18
		temp32 = (temp32 + (int32_t)50) / (int32_t)100; // Constants need to be cast up to 32 bits
		value16 = (int16_t) temp32;
	}

	return value16;
}
    5bca:	08 95       	ret

00005bcc <ProcessMixer>:
//************************************************************

int16_t	transition = 0; // Global for transition value

void ProcessMixer(void)
{
    5bcc:	a0 e3       	ldi	r26, 0x30	; 48
    5bce:	b0 e0       	ldi	r27, 0x00	; 0
    5bd0:	ec ee       	ldi	r30, 0xEC	; 236
    5bd2:	fd e2       	ldi	r31, 0x2D	; 45
    5bd4:	0c 94 1b 3d 	jmp	0x7a36	; 0x7a36 <__prologue_saves__>
	int16_t	temp3 = 0;
	int16_t	Step1 = 0;
	int16_t	Step2 = 0;

	// Copy the sensor data to an array for easy indexing - acc data is from accSmooth, increased to reasonable rates
	temp1 = (int16_t)accSmooth[ROLL] << 3;
    5bd8:	60 91 6e 05 	lds	r22, 0x056E
    5bdc:	70 91 6f 05 	lds	r23, 0x056F
    5be0:	80 91 70 05 	lds	r24, 0x0570
    5be4:	90 91 71 05 	lds	r25, 0x0571
    5be8:	0e 94 ab 3a 	call	0x7556	; 0x7556 <__fixsfsi>
    5bec:	8b 01       	movw	r16, r22
    5bee:	b3 e0       	ldi	r27, 0x03	; 3
    5bf0:	00 0f       	add	r16, r16
    5bf2:	11 1f       	adc	r17, r17
    5bf4:	ba 95       	dec	r27
    5bf6:	e1 f7       	brne	.-8      	; 0x5bf0 <ProcessMixer+0x24>
	temp2 = (int16_t)accSmooth[PITCH] << 3;
    5bf8:	60 91 72 05 	lds	r22, 0x0572
    5bfc:	70 91 73 05 	lds	r23, 0x0573
    5c00:	80 91 74 05 	lds	r24, 0x0574
    5c04:	90 91 75 05 	lds	r25, 0x0575
    5c08:	0e 94 ab 3a 	call	0x7556	; 0x7556 <__fixsfsi>
    5c0c:	83 e0       	ldi	r24, 0x03	; 3
    5c0e:	66 0f       	add	r22, r22
    5c10:	77 1f       	adc	r23, r23
    5c12:	8a 95       	dec	r24
    5c14:	e1 f7       	brne	.-8      	; 0x5c0e <ProcessMixer+0x42>
	int16_t	SensorDataP1[5] = {PID_Gyros[P1][ROLL], PID_Gyros[P1][PITCH], PID_Gyros[P1][YAW], temp1, temp2};
    5c16:	20 91 85 07 	lds	r18, 0x0785
    5c1a:	30 91 86 07 	lds	r19, 0x0786
    5c1e:	3e 8b       	std	Y+22, r19	; 0x16
    5c20:	2d 8b       	std	Y+21, r18	; 0x15
    5c22:	3c 87       	std	Y+12, r19	; 0x0c
    5c24:	2b 87       	std	Y+11, r18	; 0x0b
    5c26:	40 91 87 07 	lds	r20, 0x0787
    5c2a:	50 91 88 07 	lds	r21, 0x0788
    5c2e:	58 8f       	std	Y+24, r21	; 0x18
    5c30:	4f 8b       	std	Y+23, r20	; 0x17
    5c32:	5e 87       	std	Y+14, r21	; 0x0e
    5c34:	4d 87       	std	Y+13, r20	; 0x0d
    5c36:	20 91 89 07 	lds	r18, 0x0789
    5c3a:	30 91 8a 07 	lds	r19, 0x078A
    5c3e:	3a 8f       	std	Y+26, r19	; 0x1a
    5c40:	29 8f       	std	Y+25, r18	; 0x19
    5c42:	38 8b       	std	Y+16, r19	; 0x10
    5c44:	2f 87       	std	Y+15, r18	; 0x0f
    5c46:	1a 8b       	std	Y+18, r17	; 0x12
    5c48:	09 8b       	std	Y+17, r16	; 0x11
    5c4a:	7c 8b       	std	Y+20, r23	; 0x14
    5c4c:	6b 8b       	std	Y+19, r22	; 0x13
	int16_t	SensorDataP2[5] = {PID_Gyros[P2][ROLL], PID_Gyros[P2][PITCH], PID_Gyros[P2][YAW], temp1, temp2}; 
    5c4e:	20 90 8b 07 	lds	r2, 0x078B
    5c52:	30 90 8c 07 	lds	r3, 0x078C
    5c56:	3a 82       	std	Y+2, r3	; 0x02
    5c58:	29 82       	std	Y+1, r2	; 0x01
    5c5a:	a0 90 8d 07 	lds	r10, 0x078D
    5c5e:	b0 90 8e 07 	lds	r11, 0x078E
    5c62:	bc 82       	std	Y+4, r11	; 0x04
    5c64:	ab 82       	std	Y+3, r10	; 0x03
    5c66:	80 90 8f 07 	lds	r8, 0x078F
    5c6a:	90 90 90 07 	lds	r9, 0x0790
    5c6e:	9e 82       	std	Y+6, r9	; 0x06
    5c70:	8d 82       	std	Y+5, r8	; 0x05
    5c72:	18 87       	std	Y+8, r17	; 0x08
    5c74:	0f 83       	std	Y+7, r16	; 0x07
    5c76:	7a 87       	std	Y+10, r23	; 0x0a
    5c78:	69 87       	std	Y+9, r22	; 0x09
		//************************************************************
		// Mix in gyros
		//************************************************************ 

		// P1 gyros
		if (Transition_state < TRANS_P2)
    5c7a:	50 90 0f 01 	lds	r5, 0x010F
		{
			if ((Config.Channel[i].P1_sensors & (1 << RollAcc)) != 0) 		// Only add if acc ON
			{
				if ((Config.Channel[i].P1_scale & (1 << AccRollScale)) != 0)// Scale acc
				{
					P1_solution = P1_solution -  scale32(PID_ACCs[P1][ROLL], Config.Channel[i].P1_aileron_volume * 5); 
    5c7e:	40 91 91 07 	lds	r20, 0x0791
    5c82:	50 91 92 07 	lds	r21, 0x0792
    5c86:	5c 8f       	std	Y+28, r21	; 0x1c
    5c88:	4b 8f       	std	Y+27, r20	; 0x1b

			if ((Config.Channel[i].P1_sensors & (1 << PitchAcc)) != 0)
			{
				if ((Config.Channel[i].P1_scale & (1 << AccPitchScale)) != 0)
				{
					P1_solution = P1_solution + scale32(PID_ACCs[P1][PITCH], Config.Channel[i].P1_elevator_volume * 5); 
    5c8a:	20 91 93 07 	lds	r18, 0x0793
    5c8e:	30 91 94 07 	lds	r19, 0x0794
    5c92:	3e 8f       	std	Y+30, r19	; 0x1e
    5c94:	2d 8f       	std	Y+29, r18	; 0x1d

			if ((Config.Channel[i].P1_sensors & (1 << ZDeltaAcc)) != 0)
			{
				if ((Config.Channel[i].P1_scale & (1 << AccZScale)) != 0)
				{
					P1_solution = P1_solution - scale32(PID_ACCs[P1][YAW], Config.Channel[i].P1_throttle_volume); 
    5c96:	40 91 95 07 	lds	r20, 0x0795
    5c9a:	50 91 96 07 	lds	r21, 0x0796
    5c9e:	58 a3       	std	Y+32, r21	; 0x20
    5ca0:	4f 8f       	std	Y+31, r20	; 0x1f
		{
			if ((Config.Channel[i].P2_sensors & (1 << RollAcc)) != 0) 		// Only add if acc ON
			{
				if ((Config.Channel[i].P2_scale & (1 << AccRollScale)) != 0)// Scale acc
				{
					P2_solution = P2_solution - scale32(PID_ACCs[P2][ROLL], Config.Channel[i].P2_aileron_volume * 5); 
    5ca2:	20 91 97 07 	lds	r18, 0x0797
    5ca6:	30 91 98 07 	lds	r19, 0x0798
    5caa:	3a a3       	std	Y+34, r19	; 0x22
    5cac:	29 a3       	std	Y+33, r18	; 0x21

			if ((Config.Channel[i].P2_sensors & (1 << PitchAcc)) != 0)
			{
				if ((Config.Channel[i].P2_scale & (1 << AccPitchScale)) != 0)
				{
					P2_solution = P2_solution + scale32(PID_ACCs[P2][PITCH], Config.Channel[i].P2_elevator_volume * 5); 
    5cae:	40 91 99 07 	lds	r20, 0x0799
    5cb2:	50 91 9a 07 	lds	r21, 0x079A
    5cb6:	5c a3       	std	Y+36, r21	; 0x24
    5cb8:	4b a3       	std	Y+35, r20	; 0x23

			if ((Config.Channel[i].P2_sensors & (1 << ZDeltaAcc)) != 0)
			{
				if ((Config.Channel[i].P2_scale & (1 << AccZScale)) != 0)
				{
					P2_solution = P2_solution - scale32(PID_ACCs[P2][YAW], Config.Channel[i].P2_throttle_volume); 
    5cba:	20 91 9b 07 	lds	r18, 0x079B
    5cbe:	30 91 9c 07 	lds	r19, 0x079C
    5cc2:	3e a3       	std	Y+38, r19	; 0x26
    5cc4:	2d a3       	std	Y+37, r18	; 0x25
		if (Transition_state < TRANS_P2)
		{
			// Mix in dedicated RC sources - aileron, elevator and rudder
			if (Config.Channel[i].P1_aileron_volume !=0) 					// Mix in dedicated aileron
			{
				temp2 = scale32(RCinputs[AILERON], Config.Channel[i].P1_aileron_volume);
    5cc6:	40 91 a1 07 	lds	r20, 0x07A1
    5cca:	50 91 a2 07 	lds	r21, 0x07A2
    5cce:	58 a7       	std	Y+40, r21	; 0x28
    5cd0:	4f a3       	std	Y+39, r20	; 0x27
				P1_solution = P1_solution + temp2;
			}
			if (Config.Channel[i].P1_elevator_volume !=0) 					// Mix in dedicated elevator
			{
				temp2 = scale32(RCinputs[ELEVATOR], Config.Channel[i].P1_elevator_volume);
    5cd2:	20 91 a3 07 	lds	r18, 0x07A3
    5cd6:	30 91 a4 07 	lds	r19, 0x07A4
    5cda:	3a a7       	std	Y+42, r19	; 0x2a
    5cdc:	29 a7       	std	Y+41, r18	; 0x29
				P1_solution = P1_solution + temp2;
			}
			if (Config.Channel[i].P1_rudder_volume !=0) 					// Mix in dedicated rudder
			{
				temp2 = scale32(RCinputs[RUDDER], Config.Channel[i].P1_rudder_volume);
    5cde:	40 91 a5 07 	lds	r20, 0x07A5
    5ce2:	50 91 a6 07 	lds	r21, 0x07A6
    5ce6:	5c a7       	std	Y+44, r21	; 0x2c
    5ce8:	4b a7       	std	Y+43, r20	; 0x2b
    5cea:	c1 2c       	mov	r12, r1
    5cec:	d1 2c       	mov	r13, r1
				{
					P2_solution = P2_solution + PID_Gyros[P2][ROLL];		// Reverse if volume negative
				}
				else
				{
					P2_solution = P2_solution - PID_Gyros[P2][ROLL];
    5cee:	22 27       	eor	r18, r18
    5cf0:	33 27       	eor	r19, r19
    5cf2:	22 19       	sub	r18, r2
    5cf4:	33 09       	sbc	r19, r3
    5cf6:	3e a7       	std	Y+46, r19	; 0x2e
    5cf8:	2d a7       	std	Y+45, r18	; 0x2d
				{
					P1_solution = P1_solution + PID_Gyros[P1][ROLL];		// Reverse if volume negative
				}
				else
				{
					P1_solution = P1_solution - PID_Gyros[P1][ROLL];
    5cfa:	4d 89       	ldd	r20, Y+21	; 0x15
    5cfc:	5e 89       	ldd	r21, Y+22	; 0x16
    5cfe:	51 95       	neg	r21
    5d00:	41 95       	neg	r20
    5d02:	51 09       	sbc	r21, r1
    5d04:	58 ab       	std	Y+48, r21	; 0x30
    5d06:	4f a7       	std	Y+47, r20	; 0x2f
		//************************************************************
		// Mix in gyros
		//************************************************************ 

		// P1 gyros
		if (Transition_state < TRANS_P2)
    5d08:	58 e0       	ldi	r21, 0x08	; 8
    5d0a:	55 15       	cp	r21, r5
    5d0c:	08 f4       	brcc	.+2      	; 0x5d10 <ProcessMixer+0x144>
    5d0e:	6d c0       	rjmp	.+218    	; 0x5dea <ProcessMixer+0x21e>
    5d10:	86 01       	movw	r16, r12
    5d12:	02 58       	subi	r16, 0x82	; 130
    5d14:	1a 4f       	sbci	r17, 0xFA	; 250
    5d16:	f8 01       	movw	r30, r16
    5d18:	ee 55       	subi	r30, 0x5E	; 94
    5d1a:	ff 4f       	sbci	r31, 0xFF	; 255
		{
			if ((Config.Channel[i].P1_sensors & (1 << RollGyro)) != 0) 		// Only add if gyro ON
    5d1c:	70 80       	ld	r7, Z
    5d1e:	70 fe       	sbrs	r7, 0
    5d20:	19 c0       	rjmp	.+50     	; 0x5d54 <ProcessMixer+0x188>
    5d22:	32 96       	adiw	r30, 0x02	; 2
			{
				if ((Config.Channel[i].P1_scale & (1 << RollScale)) != 0)	// Scale gyro
    5d24:	80 81       	ld	r24, Z
    5d26:	38 97       	sbiw	r30, 0x08	; 8
    5d28:	80 ff       	sbrs	r24, 0
    5d2a:	0e c0       	rjmp	.+28     	; 0x5d48 <ProcessMixer+0x17c>
				{
					P1_solution = P1_solution - scale32(PID_Gyros[P1][ROLL], Config.Channel[i].P1_aileron_volume * 5); 
    5d2c:	60 81       	ld	r22, Z
    5d2e:	85 e0       	ldi	r24, 0x05	; 5
    5d30:	68 02       	muls	r22, r24
    5d32:	b0 01       	movw	r22, r0
    5d34:	11 24       	eor	r1, r1
    5d36:	8d 89       	ldd	r24, Y+21	; 0x15
    5d38:	9e 89       	ldd	r25, Y+22	; 0x16
    5d3a:	0e 94 c3 2d 	call	0x5b86	; 0x5b86 <scale32>
    5d3e:	ee 24       	eor	r14, r14
    5d40:	ff 24       	eor	r15, r15
    5d42:	e8 1a       	sub	r14, r24
    5d44:	f9 0a       	sbc	r15, r25
    5d46:	0b c0       	rjmp	.+22     	; 0x5d5e <ProcessMixer+0x192>
				}
				else if (Config.Channel[i].P1_aileron_volume < 0 )
    5d48:	80 81       	ld	r24, Z
    5d4a:	87 fd       	sbrc	r24, 7
    5d4c:	06 c0       	rjmp	.+12     	; 0x5d5a <ProcessMixer+0x18e>
				{
					P1_solution = P1_solution + PID_Gyros[P1][ROLL];		// Reverse if volume negative
				}
				else
				{
					P1_solution = P1_solution - PID_Gyros[P1][ROLL];
    5d4e:	ef a4       	ldd	r14, Y+47	; 0x2f
    5d50:	f8 a8       	ldd	r15, Y+48	; 0x30
    5d52:	05 c0       	rjmp	.+10     	; 0x5d5e <ProcessMixer+0x192>
	{
		//************************************************************
		// Zero each channel value to start
		//************************************************************

		P1_solution = 0;
    5d54:	e1 2c       	mov	r14, r1
    5d56:	f1 2c       	mov	r15, r1
    5d58:	02 c0       	rjmp	.+4      	; 0x5d5e <ProcessMixer+0x192>
				{
					P1_solution = P1_solution - scale32(PID_Gyros[P1][ROLL], Config.Channel[i].P1_aileron_volume * 5); 
				}
				else if (Config.Channel[i].P1_aileron_volume < 0 )
				{
					P1_solution = P1_solution + PID_Gyros[P1][ROLL];		// Reverse if volume negative
    5d5a:	ed 88       	ldd	r14, Y+21	; 0x15
    5d5c:	fe 88       	ldd	r15, Y+22	; 0x16
				else
				{
					P1_solution = P1_solution - PID_Gyros[P1][ROLL];
				}
			}
			if ((Config.Channel[i].P1_sensors & (1 << PitchGyro)) != 0)
    5d5e:	71 fe       	sbrs	r7, 1
    5d60:	1f c0       	rjmp	.+62     	; 0x5da0 <ProcessMixer+0x1d4>
    5d62:	f8 01       	movw	r30, r16
    5d64:	ec 55       	subi	r30, 0x5C	; 92
    5d66:	ff 4f       	sbci	r31, 0xFF	; 255
			{
				if ((Config.Channel[i].P1_scale & (1 << PitchScale)) != 0)
    5d68:	80 81       	ld	r24, Z
    5d6a:	36 97       	sbiw	r30, 0x06	; 6
    5d6c:	81 ff       	sbrs	r24, 1
    5d6e:	0c c0       	rjmp	.+24     	; 0x5d88 <ProcessMixer+0x1bc>
				{
					P1_solution = P1_solution + scale32(PID_Gyros[P1][PITCH], Config.Channel[i].P1_elevator_volume * 5); 
    5d70:	60 81       	ld	r22, Z
    5d72:	95 e0       	ldi	r25, 0x05	; 5
    5d74:	69 02       	muls	r22, r25
    5d76:	b0 01       	movw	r22, r0
    5d78:	11 24       	eor	r1, r1
    5d7a:	8f 89       	ldd	r24, Y+23	; 0x17
    5d7c:	98 8d       	ldd	r25, Y+24	; 0x18
    5d7e:	0e 94 c3 2d 	call	0x5b86	; 0x5b86 <scale32>
    5d82:	e8 0e       	add	r14, r24
    5d84:	f9 1e       	adc	r15, r25
    5d86:	0c c0       	rjmp	.+24     	; 0x5da0 <ProcessMixer+0x1d4>
				}
				else if (Config.Channel[i].P1_elevator_volume < 0 )
    5d88:	80 81       	ld	r24, Z
    5d8a:	87 ff       	sbrs	r24, 7
    5d8c:	05 c0       	rjmp	.+10     	; 0x5d98 <ProcessMixer+0x1cc>
				{
					P1_solution = P1_solution - PID_Gyros[P1][PITCH];		// Reverse if volume negative
    5d8e:	2f 89       	ldd	r18, Y+23	; 0x17
    5d90:	38 8d       	ldd	r19, Y+24	; 0x18
    5d92:	e2 1a       	sub	r14, r18
    5d94:	f3 0a       	sbc	r15, r19
    5d96:	04 c0       	rjmp	.+8      	; 0x5da0 <ProcessMixer+0x1d4>
				}
				else
				{
					P1_solution = P1_solution + PID_Gyros[P1][PITCH];
    5d98:	4f 89       	ldd	r20, Y+23	; 0x17
    5d9a:	58 8d       	ldd	r21, Y+24	; 0x18
    5d9c:	e4 0e       	add	r14, r20
    5d9e:	f5 1e       	adc	r15, r21
				}
			}
			if ((Config.Channel[i].P1_sensors & (1 << YawGyro)) != 0)
    5da0:	72 fe       	sbrs	r7, 2
    5da2:	1f c0       	rjmp	.+62     	; 0x5de2 <ProcessMixer+0x216>
    5da4:	f8 01       	movw	r30, r16
    5da6:	ec 55       	subi	r30, 0x5C	; 92
    5da8:	ff 4f       	sbci	r31, 0xFF	; 255
			{
				if ((Config.Channel[i].P1_scale & (1 << YawScale)) != 0)
    5daa:	80 81       	ld	r24, Z
    5dac:	34 97       	sbiw	r30, 0x04	; 4
    5dae:	82 ff       	sbrs	r24, 2
    5db0:	0c c0       	rjmp	.+24     	; 0x5dca <ProcessMixer+0x1fe>
				{
					P1_solution = P1_solution + scale32(PID_Gyros[P1][YAW], Config.Channel[i].P1_rudder_volume * 5); 
    5db2:	60 81       	ld	r22, Z
    5db4:	55 e0       	ldi	r21, 0x05	; 5
    5db6:	65 02       	muls	r22, r21
    5db8:	b0 01       	movw	r22, r0
    5dba:	11 24       	eor	r1, r1
    5dbc:	89 8d       	ldd	r24, Y+25	; 0x19
    5dbe:	9a 8d       	ldd	r25, Y+26	; 0x1a
    5dc0:	0e 94 c3 2d 	call	0x5b86	; 0x5b86 <scale32>
    5dc4:	e8 0e       	add	r14, r24
    5dc6:	f9 1e       	adc	r15, r25
    5dc8:	0c c0       	rjmp	.+24     	; 0x5de2 <ProcessMixer+0x216>
				}
				else if (Config.Channel[i].P1_rudder_volume < 0 )
    5dca:	80 81       	ld	r24, Z
    5dcc:	87 ff       	sbrs	r24, 7
    5dce:	05 c0       	rjmp	.+10     	; 0x5dda <ProcessMixer+0x20e>
				{
					P1_solution = P1_solution - PID_Gyros[P1][YAW];			// Reverse if volume negative
    5dd0:	29 8d       	ldd	r18, Y+25	; 0x19
    5dd2:	3a 8d       	ldd	r19, Y+26	; 0x1a
    5dd4:	e2 1a       	sub	r14, r18
    5dd6:	f3 0a       	sbc	r15, r19
    5dd8:	04 c0       	rjmp	.+8      	; 0x5de2 <ProcessMixer+0x216>
				}
				else
				{
					P1_solution = P1_solution + PID_Gyros[P1][YAW];
    5dda:	49 8d       	ldd	r20, Y+25	; 0x19
    5ddc:	5a 8d       	ldd	r21, Y+26	; 0x1a
    5dde:	e4 0e       	add	r14, r20
    5de0:	f5 1e       	adc	r15, r21
				}
			}
		}

		// P2 gyros
		if (Transition_state > TRANS_P1)
    5de2:	55 20       	and	r5, r5
    5de4:	09 f4       	brne	.+2      	; 0x5de8 <ProcessMixer+0x21c>
    5de6:	66 c0       	rjmp	.+204    	; 0x5eb4 <ProcessMixer+0x2e8>
    5de8:	02 c0       	rjmp	.+4      	; 0x5dee <ProcessMixer+0x222>
	{
		//************************************************************
		// Zero each channel value to start
		//************************************************************

		P1_solution = 0;
    5dea:	e1 2c       	mov	r14, r1
    5dec:	f1 2c       	mov	r15, r1
    5dee:	c6 01       	movw	r24, r12
    5df0:	82 58       	subi	r24, 0x82	; 130
    5df2:	9a 4f       	sbci	r25, 0xFA	; 250
    5df4:	3c 01       	movw	r6, r24
    5df6:	fc 01       	movw	r30, r24
    5df8:	ed 55       	subi	r30, 0x5D	; 93
    5dfa:	ff 4f       	sbci	r31, 0xFF	; 255
		}

		// P2 gyros
		if (Transition_state > TRANS_P1)
		{
			if ((Config.Channel[i].P2_sensors & (1 << RollGyro)) != 0) 		// Only add if gyro ON
    5dfc:	40 80       	ld	r4, Z
    5dfe:	40 fe       	sbrs	r4, 0
    5e00:	18 c0       	rjmp	.+48     	; 0x5e32 <ProcessMixer+0x266>
    5e02:	32 96       	adiw	r30, 0x02	; 2
			{
				if ((Config.Channel[i].P2_scale & (1 << RollScale)) != 0)	// Scale gyro
    5e04:	80 81       	ld	r24, Z
    5e06:	38 97       	sbiw	r30, 0x08	; 8
    5e08:	80 ff       	sbrs	r24, 0
    5e0a:	0d c0       	rjmp	.+26     	; 0x5e26 <ProcessMixer+0x25a>
				{
					P2_solution = P2_solution - scale32(PID_Gyros[P2][ROLL], Config.Channel[i].P2_aileron_volume * 5); 
    5e0c:	60 81       	ld	r22, Z
    5e0e:	95 e0       	ldi	r25, 0x05	; 5
    5e10:	69 02       	muls	r22, r25
    5e12:	b0 01       	movw	r22, r0
    5e14:	11 24       	eor	r1, r1
    5e16:	c1 01       	movw	r24, r2
    5e18:	0e 94 c3 2d 	call	0x5b86	; 0x5b86 <scale32>
    5e1c:	00 27       	eor	r16, r16
    5e1e:	11 27       	eor	r17, r17
    5e20:	08 1b       	sub	r16, r24
    5e22:	19 0b       	sbc	r17, r25
    5e24:	0a c0       	rjmp	.+20     	; 0x5e3a <ProcessMixer+0x26e>
				}
				else if (Config.Channel[i].P2_aileron_volume < 0 )
    5e26:	80 81       	ld	r24, Z
    5e28:	87 fd       	sbrc	r24, 7
    5e2a:	06 c0       	rjmp	.+12     	; 0x5e38 <ProcessMixer+0x26c>
				{
					P2_solution = P2_solution + PID_Gyros[P2][ROLL];		// Reverse if volume negative
				}
				else
				{
					P2_solution = P2_solution - PID_Gyros[P2][ROLL];
    5e2c:	0d a5       	ldd	r16, Y+45	; 0x2d
    5e2e:	1e a5       	ldd	r17, Y+46	; 0x2e
    5e30:	04 c0       	rjmp	.+8      	; 0x5e3a <ProcessMixer+0x26e>
		//************************************************************
		// Zero each channel value to start
		//************************************************************

		P1_solution = 0;
		P2_solution = 0;
    5e32:	00 e0       	ldi	r16, 0x00	; 0
    5e34:	10 e0       	ldi	r17, 0x00	; 0
    5e36:	01 c0       	rjmp	.+2      	; 0x5e3a <ProcessMixer+0x26e>
				{
					P2_solution = P2_solution - scale32(PID_Gyros[P2][ROLL], Config.Channel[i].P2_aileron_volume * 5); 
				}
				else if (Config.Channel[i].P2_aileron_volume < 0 )
				{
					P2_solution = P2_solution + PID_Gyros[P2][ROLL];		// Reverse if volume negative
    5e38:	81 01       	movw	r16, r2
				else
				{
					P2_solution = P2_solution - PID_Gyros[P2][ROLL];
				}
			}
			if ((Config.Channel[i].P2_sensors & (1 << PitchGyro)) != 0)
    5e3a:	41 fe       	sbrs	r4, 1
    5e3c:	1a c0       	rjmp	.+52     	; 0x5e72 <ProcessMixer+0x2a6>
    5e3e:	f3 01       	movw	r30, r6
    5e40:	eb 55       	subi	r30, 0x5B	; 91
    5e42:	ff 4f       	sbci	r31, 0xFF	; 255
			{
				if ((Config.Channel[i].P2_scale & (1 << PitchScale)) != 0)
    5e44:	80 81       	ld	r24, Z
    5e46:	36 97       	sbiw	r30, 0x06	; 6
    5e48:	81 ff       	sbrs	r24, 1
    5e4a:	0b c0       	rjmp	.+22     	; 0x5e62 <ProcessMixer+0x296>
				{
					P2_solution = P2_solution + scale32(PID_Gyros[P2][PITCH], Config.Channel[i].P2_elevator_volume * 5); 
    5e4c:	60 81       	ld	r22, Z
    5e4e:	a5 e0       	ldi	r26, 0x05	; 5
    5e50:	6a 02       	muls	r22, r26
    5e52:	b0 01       	movw	r22, r0
    5e54:	11 24       	eor	r1, r1
    5e56:	c5 01       	movw	r24, r10
    5e58:	0e 94 c3 2d 	call	0x5b86	; 0x5b86 <scale32>
    5e5c:	08 0f       	add	r16, r24
    5e5e:	19 1f       	adc	r17, r25
    5e60:	08 c0       	rjmp	.+16     	; 0x5e72 <ProcessMixer+0x2a6>
				}
				else if (Config.Channel[i].P2_elevator_volume < 0 )
    5e62:	80 81       	ld	r24, Z
    5e64:	87 ff       	sbrs	r24, 7
    5e66:	03 c0       	rjmp	.+6      	; 0x5e6e <ProcessMixer+0x2a2>
				{
					P2_solution = P2_solution - PID_Gyros[P2][PITCH];		// Reverse if volume negative
    5e68:	0a 19       	sub	r16, r10
    5e6a:	1b 09       	sbc	r17, r11
    5e6c:	02 c0       	rjmp	.+4      	; 0x5e72 <ProcessMixer+0x2a6>
				}
				else
				{
					P2_solution = P2_solution + PID_Gyros[P2][PITCH];
    5e6e:	0a 0d       	add	r16, r10
    5e70:	1b 1d       	adc	r17, r11
				}
			}
			if ((Config.Channel[i].P2_sensors & (1 << YawGyro)) != 0)
    5e72:	42 fe       	sbrs	r4, 2
    5e74:	1a c0       	rjmp	.+52     	; 0x5eaa <ProcessMixer+0x2de>
    5e76:	f3 01       	movw	r30, r6
    5e78:	eb 55       	subi	r30, 0x5B	; 91
    5e7a:	ff 4f       	sbci	r31, 0xFF	; 255
			{
				if ((Config.Channel[i].P2_scale & (1 << YawScale)) != 0)
    5e7c:	80 81       	ld	r24, Z
    5e7e:	34 97       	sbiw	r30, 0x04	; 4
    5e80:	82 ff       	sbrs	r24, 2
    5e82:	0b c0       	rjmp	.+22     	; 0x5e9a <ProcessMixer+0x2ce>
				{
					P2_solution = P2_solution + scale32(PID_Gyros[P2][YAW], Config.Channel[i].P2_rudder_volume * 5); 
    5e84:	60 81       	ld	r22, Z
    5e86:	b5 e0       	ldi	r27, 0x05	; 5
    5e88:	6b 02       	muls	r22, r27
    5e8a:	b0 01       	movw	r22, r0
    5e8c:	11 24       	eor	r1, r1
    5e8e:	c4 01       	movw	r24, r8
    5e90:	0e 94 c3 2d 	call	0x5b86	; 0x5b86 <scale32>
    5e94:	08 0f       	add	r16, r24
    5e96:	19 1f       	adc	r17, r25
    5e98:	08 c0       	rjmp	.+16     	; 0x5eaa <ProcessMixer+0x2de>
				}
				else if (Config.Channel[i].P2_rudder_volume < 0 )
    5e9a:	80 81       	ld	r24, Z
    5e9c:	87 ff       	sbrs	r24, 7
    5e9e:	03 c0       	rjmp	.+6      	; 0x5ea6 <ProcessMixer+0x2da>
				{
					P2_solution = P2_solution - PID_Gyros[P2][YAW];			// Reverse if volume negative
    5ea0:	08 19       	sub	r16, r8
    5ea2:	19 09       	sbc	r17, r9
    5ea4:	02 c0       	rjmp	.+4      	; 0x5eaa <ProcessMixer+0x2de>
				}
				else
				{
					P2_solution = P2_solution + PID_Gyros[P2][YAW];
    5ea6:	08 0d       	add	r16, r8
    5ea8:	19 1d       	adc	r17, r9

		//************************************************************
		// Mix in accelerometers
		//************************************************************ 
		// P1
		if (Transition_state < TRANS_P2)
    5eaa:	e8 e0       	ldi	r30, 0x08	; 8
    5eac:	e5 15       	cp	r30, r5
    5eae:	08 f4       	brcc	.+2      	; 0x5eb2 <ProcessMixer+0x2e6>
    5eb0:	6e c0       	rjmp	.+220    	; 0x5f8e <ProcessMixer+0x3c2>
    5eb2:	02 c0       	rjmp	.+4      	; 0x5eb8 <ProcessMixer+0x2ec>
		//************************************************************
		// Zero each channel value to start
		//************************************************************

		P1_solution = 0;
		P2_solution = 0;
    5eb4:	00 e0       	ldi	r16, 0x00	; 0
    5eb6:	10 e0       	ldi	r17, 0x00	; 0
    5eb8:	96 01       	movw	r18, r12
    5eba:	22 58       	subi	r18, 0x82	; 130
    5ebc:	3a 4f       	sbci	r19, 0xFA	; 250
    5ebe:	39 01       	movw	r6, r18
    5ec0:	f9 01       	movw	r30, r18
    5ec2:	ee 55       	subi	r30, 0x5E	; 94
    5ec4:	ff 4f       	sbci	r31, 0xFF	; 255
		// Mix in accelerometers
		//************************************************************ 
		// P1
		if (Transition_state < TRANS_P2)
		{
			if ((Config.Channel[i].P1_sensors & (1 << RollAcc)) != 0) 		// Only add if acc ON
    5ec6:	40 80       	ld	r4, Z
    5ec8:	43 fe       	sbrs	r4, 3
    5eca:	1d c0       	rjmp	.+58     	; 0x5f06 <ProcessMixer+0x33a>
    5ecc:	32 96       	adiw	r30, 0x02	; 2
			{
				if ((Config.Channel[i].P1_scale & (1 << AccRollScale)) != 0)// Scale acc
    5ece:	80 81       	ld	r24, Z
    5ed0:	38 97       	sbiw	r30, 0x08	; 8
    5ed2:	83 ff       	sbrs	r24, 3
    5ed4:	0c c0       	rjmp	.+24     	; 0x5eee <ProcessMixer+0x322>
				{
					P1_solution = P1_solution -  scale32(PID_ACCs[P1][ROLL], Config.Channel[i].P1_aileron_volume * 5); 
    5ed6:	60 81       	ld	r22, Z
    5ed8:	35 e0       	ldi	r19, 0x05	; 5
    5eda:	63 02       	muls	r22, r19
    5edc:	b0 01       	movw	r22, r0
    5ede:	11 24       	eor	r1, r1
    5ee0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5ee2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5ee4:	0e 94 c3 2d 	call	0x5b86	; 0x5b86 <scale32>
    5ee8:	e8 1a       	sub	r14, r24
    5eea:	f9 0a       	sbc	r15, r25
    5eec:	0c c0       	rjmp	.+24     	; 0x5f06 <ProcessMixer+0x33a>
				}
				else if (Config.Channel[i].P1_aileron_volume < 0 )
    5eee:	80 81       	ld	r24, Z
    5ef0:	87 ff       	sbrs	r24, 7
    5ef2:	05 c0       	rjmp	.+10     	; 0x5efe <ProcessMixer+0x332>
				{
					P1_solution = P1_solution + PID_ACCs[P1][ROLL];			// Reverse if volume negative
    5ef4:	4b 8d       	ldd	r20, Y+27	; 0x1b
    5ef6:	5c 8d       	ldd	r21, Y+28	; 0x1c
    5ef8:	e4 0e       	add	r14, r20
    5efa:	f5 1e       	adc	r15, r21
    5efc:	04 c0       	rjmp	.+8      	; 0x5f06 <ProcessMixer+0x33a>
				}
				else
				{
					P1_solution = P1_solution - PID_ACCs[P1][ROLL];			// or simply add
    5efe:	2b 8d       	ldd	r18, Y+27	; 0x1b
    5f00:	3c 8d       	ldd	r19, Y+28	; 0x1c
    5f02:	e2 1a       	sub	r14, r18
    5f04:	f3 0a       	sbc	r15, r19
				}
			}

			if ((Config.Channel[i].P1_sensors & (1 << PitchAcc)) != 0)
    5f06:	44 fe       	sbrs	r4, 4
    5f08:	1f c0       	rjmp	.+62     	; 0x5f48 <ProcessMixer+0x37c>
    5f0a:	f3 01       	movw	r30, r6
    5f0c:	ec 55       	subi	r30, 0x5C	; 92
    5f0e:	ff 4f       	sbci	r31, 0xFF	; 255
			{
				if ((Config.Channel[i].P1_scale & (1 << AccPitchScale)) != 0)
    5f10:	80 81       	ld	r24, Z
    5f12:	36 97       	sbiw	r30, 0x06	; 6
    5f14:	84 ff       	sbrs	r24, 4
    5f16:	0c c0       	rjmp	.+24     	; 0x5f30 <ProcessMixer+0x364>
				{
					P1_solution = P1_solution + scale32(PID_ACCs[P1][PITCH], Config.Channel[i].P1_elevator_volume * 5); 
    5f18:	60 81       	ld	r22, Z
    5f1a:	35 e0       	ldi	r19, 0x05	; 5
    5f1c:	63 02       	muls	r22, r19
    5f1e:	b0 01       	movw	r22, r0
    5f20:	11 24       	eor	r1, r1
    5f22:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5f24:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5f26:	0e 94 c3 2d 	call	0x5b86	; 0x5b86 <scale32>
    5f2a:	e8 0e       	add	r14, r24
    5f2c:	f9 1e       	adc	r15, r25
    5f2e:	0c c0       	rjmp	.+24     	; 0x5f48 <ProcessMixer+0x37c>
				}
				else if (Config.Channel[i].P1_elevator_volume < 0 )
    5f30:	80 81       	ld	r24, Z
    5f32:	87 ff       	sbrs	r24, 7
    5f34:	05 c0       	rjmp	.+10     	; 0x5f40 <ProcessMixer+0x374>
				{
					P1_solution = P1_solution - PID_ACCs[P1][PITCH];		// Reverse if volume negative
    5f36:	4d 8d       	ldd	r20, Y+29	; 0x1d
    5f38:	5e 8d       	ldd	r21, Y+30	; 0x1e
    5f3a:	e4 1a       	sub	r14, r20
    5f3c:	f5 0a       	sbc	r15, r21
    5f3e:	04 c0       	rjmp	.+8      	; 0x5f48 <ProcessMixer+0x37c>
				}
				else
				{
					P1_solution = P1_solution + PID_ACCs[P1][PITCH];
    5f40:	2d 8d       	ldd	r18, Y+29	; 0x1d
    5f42:	3e 8d       	ldd	r19, Y+30	; 0x1e
    5f44:	e2 0e       	add	r14, r18
    5f46:	f3 1e       	adc	r15, r19
				}
			}

			if ((Config.Channel[i].P1_sensors & (1 << ZDeltaAcc)) != 0)
    5f48:	45 fe       	sbrs	r4, 5
    5f4a:	1e c0       	rjmp	.+60     	; 0x5f88 <ProcessMixer+0x3bc>
    5f4c:	f3 01       	movw	r30, r6
    5f4e:	ec 55       	subi	r30, 0x5C	; 92
    5f50:	ff 4f       	sbci	r31, 0xFF	; 255
			{
				if ((Config.Channel[i].P1_scale & (1 << AccZScale)) != 0)
    5f52:	80 81       	ld	r24, Z
    5f54:	3b 97       	sbiw	r30, 0x0b	; 11
    5f56:	85 ff       	sbrs	r24, 5
    5f58:	0b c0       	rjmp	.+22     	; 0x5f70 <ProcessMixer+0x3a4>
				{
					P1_solution = P1_solution - scale32(PID_ACCs[P1][YAW], Config.Channel[i].P1_throttle_volume); 
    5f5a:	60 81       	ld	r22, Z
    5f5c:	77 27       	eor	r23, r23
    5f5e:	67 fd       	sbrc	r22, 7
    5f60:	70 95       	com	r23
    5f62:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5f64:	98 a1       	ldd	r25, Y+32	; 0x20
    5f66:	0e 94 c3 2d 	call	0x5b86	; 0x5b86 <scale32>
    5f6a:	e8 1a       	sub	r14, r24
    5f6c:	f9 0a       	sbc	r15, r25
    5f6e:	0c c0       	rjmp	.+24     	; 0x5f88 <ProcessMixer+0x3bc>
				}
				else if (Config.Channel[i].P1_throttle_volume < 0 )
    5f70:	80 81       	ld	r24, Z
    5f72:	87 ff       	sbrs	r24, 7
    5f74:	05 c0       	rjmp	.+10     	; 0x5f80 <ProcessMixer+0x3b4>
				{
					P1_solution = P1_solution + PID_ACCs[P1][YAW];			// Reverse if volume negative
    5f76:	4f 8d       	ldd	r20, Y+31	; 0x1f
    5f78:	58 a1       	ldd	r21, Y+32	; 0x20
    5f7a:	e4 0e       	add	r14, r20
    5f7c:	f5 1e       	adc	r15, r21
    5f7e:	04 c0       	rjmp	.+8      	; 0x5f88 <ProcessMixer+0x3bc>
				}
				else
				{
					P1_solution = P1_solution - PID_ACCs[P1][YAW];
    5f80:	2f 8d       	ldd	r18, Y+31	; 0x1f
    5f82:	38 a1       	ldd	r19, Y+32	; 0x20
    5f84:	e2 1a       	sub	r14, r18
    5f86:	f3 0a       	sbc	r15, r19
				}
			}
		}

		// P2
		if (Transition_state > TRANS_P1)
    5f88:	55 20       	and	r5, r5
    5f8a:	09 f4       	brne	.+2      	; 0x5f8e <ProcessMixer+0x3c2>
    5f8c:	6c c0       	rjmp	.+216    	; 0x6066 <ProcessMixer+0x49a>
    5f8e:	a6 01       	movw	r20, r12
    5f90:	42 58       	subi	r20, 0x82	; 130
    5f92:	5a 4f       	sbci	r21, 0xFA	; 250
    5f94:	3a 01       	movw	r6, r20
    5f96:	fa 01       	movw	r30, r20
    5f98:	ed 55       	subi	r30, 0x5D	; 93
    5f9a:	ff 4f       	sbci	r31, 0xFF	; 255
		{
			if ((Config.Channel[i].P2_sensors & (1 << RollAcc)) != 0) 		// Only add if acc ON
    5f9c:	40 80       	ld	r4, Z
    5f9e:	43 fe       	sbrs	r4, 3
    5fa0:	1d c0       	rjmp	.+58     	; 0x5fdc <ProcessMixer+0x410>
    5fa2:	32 96       	adiw	r30, 0x02	; 2
			{
				if ((Config.Channel[i].P2_scale & (1 << AccRollScale)) != 0)// Scale acc
    5fa4:	80 81       	ld	r24, Z
    5fa6:	38 97       	sbiw	r30, 0x08	; 8
    5fa8:	83 ff       	sbrs	r24, 3
    5faa:	0c c0       	rjmp	.+24     	; 0x5fc4 <ProcessMixer+0x3f8>
				{
					P2_solution = P2_solution - scale32(PID_ACCs[P2][ROLL], Config.Channel[i].P2_aileron_volume * 5); 
    5fac:	60 81       	ld	r22, Z
    5fae:	55 e0       	ldi	r21, 0x05	; 5
    5fb0:	65 02       	muls	r22, r21
    5fb2:	b0 01       	movw	r22, r0
    5fb4:	11 24       	eor	r1, r1
    5fb6:	89 a1       	ldd	r24, Y+33	; 0x21
    5fb8:	9a a1       	ldd	r25, Y+34	; 0x22
    5fba:	0e 94 c3 2d 	call	0x5b86	; 0x5b86 <scale32>
    5fbe:	08 1b       	sub	r16, r24
    5fc0:	19 0b       	sbc	r17, r25
    5fc2:	0c c0       	rjmp	.+24     	; 0x5fdc <ProcessMixer+0x410>
				}
				else if (Config.Channel[i].P2_aileron_volume < 0 )
    5fc4:	80 81       	ld	r24, Z
    5fc6:	87 ff       	sbrs	r24, 7
    5fc8:	05 c0       	rjmp	.+10     	; 0x5fd4 <ProcessMixer+0x408>
				{
					P2_solution = P2_solution + PID_ACCs[P2][ROLL];			// Reverse if volume negative
    5fca:	29 a1       	ldd	r18, Y+33	; 0x21
    5fcc:	3a a1       	ldd	r19, Y+34	; 0x22
    5fce:	02 0f       	add	r16, r18
    5fd0:	13 1f       	adc	r17, r19
    5fd2:	04 c0       	rjmp	.+8      	; 0x5fdc <ProcessMixer+0x410>
				}
				else
				{
					P2_solution = P2_solution - PID_ACCs[P2][ROLL];			// or simply add
    5fd4:	49 a1       	ldd	r20, Y+33	; 0x21
    5fd6:	5a a1       	ldd	r21, Y+34	; 0x22
    5fd8:	04 1b       	sub	r16, r20
    5fda:	15 0b       	sbc	r17, r21
				}
			}

			if ((Config.Channel[i].P2_sensors & (1 << PitchAcc)) != 0)
    5fdc:	44 fe       	sbrs	r4, 4
    5fde:	1f c0       	rjmp	.+62     	; 0x601e <ProcessMixer+0x452>
    5fe0:	f3 01       	movw	r30, r6
    5fe2:	eb 55       	subi	r30, 0x5B	; 91
    5fe4:	ff 4f       	sbci	r31, 0xFF	; 255
			{
				if ((Config.Channel[i].P2_scale & (1 << AccPitchScale)) != 0)
    5fe6:	80 81       	ld	r24, Z
    5fe8:	36 97       	sbiw	r30, 0x06	; 6
    5fea:	84 ff       	sbrs	r24, 4
    5fec:	0c c0       	rjmp	.+24     	; 0x6006 <ProcessMixer+0x43a>
				{
					P2_solution = P2_solution + scale32(PID_ACCs[P2][PITCH], Config.Channel[i].P2_elevator_volume * 5); 
    5fee:	60 81       	ld	r22, Z
    5ff0:	55 e0       	ldi	r21, 0x05	; 5
    5ff2:	65 02       	muls	r22, r21
    5ff4:	b0 01       	movw	r22, r0
    5ff6:	11 24       	eor	r1, r1
    5ff8:	8b a1       	ldd	r24, Y+35	; 0x23
    5ffa:	9c a1       	ldd	r25, Y+36	; 0x24
    5ffc:	0e 94 c3 2d 	call	0x5b86	; 0x5b86 <scale32>
    6000:	08 0f       	add	r16, r24
    6002:	19 1f       	adc	r17, r25
    6004:	0c c0       	rjmp	.+24     	; 0x601e <ProcessMixer+0x452>
				}
				else if (Config.Channel[i].P2_elevator_volume < 0 )
    6006:	80 81       	ld	r24, Z
    6008:	87 ff       	sbrs	r24, 7
    600a:	05 c0       	rjmp	.+10     	; 0x6016 <ProcessMixer+0x44a>
				{

					P2_solution = P2_solution - PID_ACCs[P2][PITCH];		// Reverse if volume negative
    600c:	2b a1       	ldd	r18, Y+35	; 0x23
    600e:	3c a1       	ldd	r19, Y+36	; 0x24
    6010:	02 1b       	sub	r16, r18
    6012:	13 0b       	sbc	r17, r19
    6014:	04 c0       	rjmp	.+8      	; 0x601e <ProcessMixer+0x452>
				}
				else
				{
					P2_solution = P2_solution + PID_ACCs[P2][PITCH];
    6016:	4b a1       	ldd	r20, Y+35	; 0x23
    6018:	5c a1       	ldd	r21, Y+36	; 0x24
    601a:	04 0f       	add	r16, r20
    601c:	15 1f       	adc	r17, r21
				}
			}

			if ((Config.Channel[i].P2_sensors & (1 << ZDeltaAcc)) != 0)
    601e:	45 fe       	sbrs	r4, 5
    6020:	1e c0       	rjmp	.+60     	; 0x605e <ProcessMixer+0x492>
    6022:	f3 01       	movw	r30, r6
    6024:	eb 55       	subi	r30, 0x5B	; 91
    6026:	ff 4f       	sbci	r31, 0xFF	; 255
			{
				if ((Config.Channel[i].P2_scale & (1 << AccZScale)) != 0)
    6028:	80 81       	ld	r24, Z
    602a:	3b 97       	sbiw	r30, 0x0b	; 11
    602c:	85 ff       	sbrs	r24, 5
    602e:	0b c0       	rjmp	.+22     	; 0x6046 <ProcessMixer+0x47a>
				{
					P2_solution = P2_solution - scale32(PID_ACCs[P2][YAW], Config.Channel[i].P2_throttle_volume); 
    6030:	60 81       	ld	r22, Z
    6032:	77 27       	eor	r23, r23
    6034:	67 fd       	sbrc	r22, 7
    6036:	70 95       	com	r23
    6038:	8d a1       	ldd	r24, Y+37	; 0x25
    603a:	9e a1       	ldd	r25, Y+38	; 0x26
    603c:	0e 94 c3 2d 	call	0x5b86	; 0x5b86 <scale32>
    6040:	08 1b       	sub	r16, r24
    6042:	19 0b       	sbc	r17, r25
    6044:	0c c0       	rjmp	.+24     	; 0x605e <ProcessMixer+0x492>
				}
				else if (Config.Channel[i].P2_throttle_volume < 0 )
    6046:	80 81       	ld	r24, Z
    6048:	87 ff       	sbrs	r24, 7
    604a:	05 c0       	rjmp	.+10     	; 0x6056 <ProcessMixer+0x48a>
				{
					P2_solution = P2_solution + PID_ACCs[P2][YAW];			// Reverse if volume negative
    604c:	2d a1       	ldd	r18, Y+37	; 0x25
    604e:	3e a1       	ldd	r19, Y+38	; 0x26
    6050:	02 0f       	add	r16, r18
    6052:	13 1f       	adc	r17, r19
    6054:	04 c0       	rjmp	.+8      	; 0x605e <ProcessMixer+0x492>
				}
				else
				{
					P2_solution = P2_solution - PID_ACCs[P2][YAW];
    6056:	4d a1       	ldd	r20, Y+37	; 0x25
    6058:	5e a1       	ldd	r21, Y+38	; 0x26
    605a:	04 1b       	sub	r16, r20
    605c:	15 0b       	sbc	r17, r21
		//************************************************************
		// Process mixers
		//************************************************************ 

		// Mix in other outputs here (P1)
		if (Transition_state < TRANS_P2)
    605e:	58 e0       	ldi	r21, 0x08	; 8
    6060:	55 15       	cp	r21, r5
    6062:	08 f4       	brcc	.+2      	; 0x6066 <ProcessMixer+0x49a>
    6064:	86 c0       	rjmp	.+268    	; 0x6172 <ProcessMixer+0x5a6>
    6066:	c6 01       	movw	r24, r12
    6068:	82 58       	subi	r24, 0x82	; 130
    606a:	9a 4f       	sbci	r25, 0xFA	; 250
    606c:	3c 01       	movw	r6, r24
    606e:	fc 01       	movw	r30, r24
    6070:	e4 56       	subi	r30, 0x64	; 100
    6072:	ff 4f       	sbci	r31, 0xFF	; 255
		{
			// Mix in dedicated RC sources - aileron, elevator and rudder
			if (Config.Channel[i].P1_aileron_volume !=0) 					// Mix in dedicated aileron
    6074:	60 81       	ld	r22, Z
    6076:	66 23       	and	r22, r22
    6078:	49 f0       	breq	.+18     	; 0x608c <ProcessMixer+0x4c0>
			{
				temp2 = scale32(RCinputs[AILERON], Config.Channel[i].P1_aileron_volume);
    607a:	77 27       	eor	r23, r23
    607c:	67 fd       	sbrc	r22, 7
    607e:	70 95       	com	r23
    6080:	8f a1       	ldd	r24, Y+39	; 0x27
    6082:	98 a5       	ldd	r25, Y+40	; 0x28
    6084:	0e 94 c3 2d 	call	0x5b86	; 0x5b86 <scale32>
				P1_solution = P1_solution + temp2;
    6088:	e8 0e       	add	r14, r24
    608a:	f9 1e       	adc	r15, r25
    608c:	f3 01       	movw	r30, r6
    608e:	e2 56       	subi	r30, 0x62	; 98
    6090:	ff 4f       	sbci	r31, 0xFF	; 255
			}
			if (Config.Channel[i].P1_elevator_volume !=0) 					// Mix in dedicated elevator
    6092:	60 81       	ld	r22, Z
    6094:	66 23       	and	r22, r22
    6096:	49 f0       	breq	.+18     	; 0x60aa <ProcessMixer+0x4de>
			{
				temp2 = scale32(RCinputs[ELEVATOR], Config.Channel[i].P1_elevator_volume);
    6098:	77 27       	eor	r23, r23
    609a:	67 fd       	sbrc	r22, 7
    609c:	70 95       	com	r23
    609e:	89 a5       	ldd	r24, Y+41	; 0x29
    60a0:	9a a5       	ldd	r25, Y+42	; 0x2a
    60a2:	0e 94 c3 2d 	call	0x5b86	; 0x5b86 <scale32>
				P1_solution = P1_solution + temp2;
    60a6:	e8 0e       	add	r14, r24
    60a8:	f9 1e       	adc	r15, r25
    60aa:	f3 01       	movw	r30, r6
    60ac:	e0 56       	subi	r30, 0x60	; 96
    60ae:	ff 4f       	sbci	r31, 0xFF	; 255
			}
			if (Config.Channel[i].P1_rudder_volume !=0) 					// Mix in dedicated rudder
    60b0:	60 81       	ld	r22, Z
    60b2:	66 23       	and	r22, r22
    60b4:	49 f0       	breq	.+18     	; 0x60c8 <ProcessMixer+0x4fc>
			{
				temp2 = scale32(RCinputs[RUDDER], Config.Channel[i].P1_rudder_volume);
    60b6:	77 27       	eor	r23, r23
    60b8:	67 fd       	sbrc	r22, 7
    60ba:	70 95       	com	r23
    60bc:	8b a5       	ldd	r24, Y+43	; 0x2b
    60be:	9c a5       	ldd	r25, Y+44	; 0x2c
    60c0:	0e 94 c3 2d 	call	0x5b86	; 0x5b86 <scale32>
				P1_solution = P1_solution + temp2;
    60c4:	e8 0e       	add	r14, r24
    60c6:	f9 1e       	adc	r15, r25
    60c8:	f3 01       	movw	r30, r6
    60ca:	e9 55       	subi	r30, 0x59	; 89
    60cc:	ff 4f       	sbci	r31, 0xFF	; 255
			}

			// Other sources
			if ((Config.Channel[i].P1_source_a_volume !=0) && (Config.Channel[i].P1_source_a != NOMIX)) // Mix in first extra source
    60ce:	60 81       	ld	r22, Z
    60d0:	66 23       	and	r22, r22
    60d2:	19 f1       	breq	.+70     	; 0x611a <ProcessMixer+0x54e>
    60d4:	31 97       	sbiw	r30, 0x01	; 1
    60d6:	80 81       	ld	r24, Z
    60d8:	8d 30       	cpi	r24, 0x0D	; 13
    60da:	f9 f0       	breq	.+62     	; 0x611a <ProcessMixer+0x54e>
    60dc:	e8 2f       	mov	r30, r24
    60de:	ff 27       	eor	r31, r31
    60e0:	e7 fd       	sbrc	r30, 7
    60e2:	f0 95       	com	r31
			{
				// Is the source a sensor?
				if (Config.Channel[i].P1_source_a > (MAX_RC_CHANNELS - 1))
    60e4:	88 30       	cpi	r24, 0x08	; 8
    60e6:	64 f0       	brlt	.+24     	; 0x6100 <ProcessMixer+0x534>
				{
					temp2 = SensorDataP1[Config.Channel[i].P1_source_a - EXT_SOURCE];
    60e8:	38 97       	sbiw	r30, 0x08	; 8
    60ea:	ee 0f       	add	r30, r30
    60ec:	ff 1f       	adc	r31, r31
    60ee:	a1 e0       	ldi	r26, 0x01	; 1
    60f0:	b0 e0       	ldi	r27, 0x00	; 0
    60f2:	ac 0f       	add	r26, r28
    60f4:	bd 1f       	adc	r27, r29
    60f6:	ea 0f       	add	r30, r26
    60f8:	fb 1f       	adc	r31, r27
    60fa:	82 85       	ldd	r24, Z+10	; 0x0a
    60fc:	93 85       	ldd	r25, Z+11	; 0x0b
    60fe:	06 c0       	rjmp	.+12     	; 0x610c <ProcessMixer+0x540>
				}
				// Is the source an RC input?
				else
				{
					// Yes, calculate RC channel number from source number and return RC value
					temp2 = RCinputs[Config.Channel[i].P1_source_a];
    6100:	ee 0f       	add	r30, r30
    6102:	ff 1f       	adc	r31, r31
    6104:	e1 56       	subi	r30, 0x61	; 97
    6106:	f8 4f       	sbci	r31, 0xF8	; 248
    6108:	80 81       	ld	r24, Z
    610a:	91 81       	ldd	r25, Z+1	; 0x01
				}

				temp2 = scale32(temp2, Config.Channel[i].P1_source_a_volume);
    610c:	77 27       	eor	r23, r23
    610e:	67 fd       	sbrc	r22, 7
    6110:	70 95       	com	r23
    6112:	0e 94 c3 2d 	call	0x5b86	; 0x5b86 <scale32>
				P1_solution = P1_solution + temp2;
    6116:	e8 0e       	add	r14, r24
    6118:	f9 1e       	adc	r15, r25
    611a:	f3 01       	movw	r30, r6
    611c:	e5 55       	subi	r30, 0x55	; 85
    611e:	ff 4f       	sbci	r31, 0xFF	; 255
			}
			if ((Config.Channel[i].P1_source_b_volume !=0) && (Config.Channel[i].P1_source_b != NOMIX)) // Mix in second extra source
    6120:	60 81       	ld	r22, Z
    6122:	66 23       	and	r22, r22
    6124:	19 f1       	breq	.+70     	; 0x616c <ProcessMixer+0x5a0>
    6126:	31 97       	sbiw	r30, 0x01	; 1
    6128:	80 81       	ld	r24, Z
    612a:	8d 30       	cpi	r24, 0x0D	; 13
    612c:	f9 f0       	breq	.+62     	; 0x616c <ProcessMixer+0x5a0>
    612e:	e8 2f       	mov	r30, r24
    6130:	ff 27       	eor	r31, r31
    6132:	e7 fd       	sbrc	r30, 7
    6134:	f0 95       	com	r31
			{
				// Is the source a sensor?
				if (Config.Channel[i].P1_source_b > (MAX_RC_CHANNELS - 1))
    6136:	88 30       	cpi	r24, 0x08	; 8
    6138:	64 f0       	brlt	.+24     	; 0x6152 <ProcessMixer+0x586>
				{
					temp2 = SensorDataP1[Config.Channel[i].P1_source_b - EXT_SOURCE];
    613a:	38 97       	sbiw	r30, 0x08	; 8
    613c:	ee 0f       	add	r30, r30
    613e:	ff 1f       	adc	r31, r31
    6140:	21 e0       	ldi	r18, 0x01	; 1
    6142:	30 e0       	ldi	r19, 0x00	; 0
    6144:	2c 0f       	add	r18, r28
    6146:	3d 1f       	adc	r19, r29
    6148:	e2 0f       	add	r30, r18
    614a:	f3 1f       	adc	r31, r19
    614c:	82 85       	ldd	r24, Z+10	; 0x0a
    614e:	93 85       	ldd	r25, Z+11	; 0x0b
    6150:	06 c0       	rjmp	.+12     	; 0x615e <ProcessMixer+0x592>
				}
				// Is the source an RC input?
				else
				{
					temp2 = RCinputs[Config.Channel[i].P1_source_b];
    6152:	ee 0f       	add	r30, r30
    6154:	ff 1f       	adc	r31, r31
    6156:	e1 56       	subi	r30, 0x61	; 97
    6158:	f8 4f       	sbci	r31, 0xF8	; 248
    615a:	80 81       	ld	r24, Z
    615c:	91 81       	ldd	r25, Z+1	; 0x01
				}

				temp2 = scale32(temp2, Config.Channel[i].P1_source_b_volume);
    615e:	77 27       	eor	r23, r23
    6160:	67 fd       	sbrc	r22, 7
    6162:	70 95       	com	r23
    6164:	0e 94 c3 2d 	call	0x5b86	; 0x5b86 <scale32>
				P1_solution = P1_solution + temp2;
    6168:	e8 0e       	add	r14, r24
    616a:	f9 1e       	adc	r15, r25
			}
		}

		// Mix in other outputs here (P2)
		if (Transition_state > TRANS_P1)	
    616c:	55 20       	and	r5, r5
    616e:	09 f4       	brne	.+2      	; 0x6172 <ProcessMixer+0x5a6>
    6170:	7f c0       	rjmp	.+254    	; 0x6270 <ProcessMixer+0x6a4>
    6172:	a6 01       	movw	r20, r12
    6174:	42 58       	subi	r20, 0x82	; 130
    6176:	5a 4f       	sbci	r21, 0xFA	; 250
    6178:	3a 01       	movw	r6, r20
    617a:	fa 01       	movw	r30, r20
    617c:	e3 56       	subi	r30, 0x63	; 99
    617e:	ff 4f       	sbci	r31, 0xFF	; 255
		{
			// Mix in dedicated RC sources - aileron, elevator and rudder
			if (Config.Channel[i].P2_aileron_volume !=0) 					// Mix in dedicated aileron
    6180:	60 81       	ld	r22, Z
    6182:	66 23       	and	r22, r22
    6184:	49 f0       	breq	.+18     	; 0x6198 <ProcessMixer+0x5cc>
			{
				temp2 = scale32(RCinputs[AILERON], Config.Channel[i].P2_aileron_volume);
    6186:	77 27       	eor	r23, r23
    6188:	67 fd       	sbrc	r22, 7
    618a:	70 95       	com	r23
    618c:	8f a1       	ldd	r24, Y+39	; 0x27
    618e:	98 a5       	ldd	r25, Y+40	; 0x28
    6190:	0e 94 c3 2d 	call	0x5b86	; 0x5b86 <scale32>
				P2_solution = P2_solution + temp2;
    6194:	08 0f       	add	r16, r24
    6196:	19 1f       	adc	r17, r25
    6198:	f3 01       	movw	r30, r6
    619a:	e1 56       	subi	r30, 0x61	; 97
    619c:	ff 4f       	sbci	r31, 0xFF	; 255
			}
			if (Config.Channel[i].P2_elevator_volume !=0) 					// Mix in dedicated elevator
    619e:	60 81       	ld	r22, Z
    61a0:	66 23       	and	r22, r22
    61a2:	49 f0       	breq	.+18     	; 0x61b6 <ProcessMixer+0x5ea>
			{
				temp2 = scale32(RCinputs[ELEVATOR], Config.Channel[i].P2_elevator_volume);
    61a4:	77 27       	eor	r23, r23
    61a6:	67 fd       	sbrc	r22, 7
    61a8:	70 95       	com	r23
    61aa:	89 a5       	ldd	r24, Y+41	; 0x29
    61ac:	9a a5       	ldd	r25, Y+42	; 0x2a
    61ae:	0e 94 c3 2d 	call	0x5b86	; 0x5b86 <scale32>
				P2_solution = P2_solution + temp2;
    61b2:	08 0f       	add	r16, r24
    61b4:	19 1f       	adc	r17, r25
    61b6:	f3 01       	movw	r30, r6
    61b8:	ef 55       	subi	r30, 0x5F	; 95
    61ba:	ff 4f       	sbci	r31, 0xFF	; 255
			}
			if (Config.Channel[i].P2_rudder_volume !=0) 					// Mix in dedicated rudder
    61bc:	60 81       	ld	r22, Z
    61be:	66 23       	and	r22, r22
    61c0:	49 f0       	breq	.+18     	; 0x61d4 <ProcessMixer+0x608>
			{
				temp2 = scale32(RCinputs[RUDDER], Config.Channel[i].P2_rudder_volume);
    61c2:	77 27       	eor	r23, r23
    61c4:	67 fd       	sbrc	r22, 7
    61c6:	70 95       	com	r23
    61c8:	8b a5       	ldd	r24, Y+43	; 0x2b
    61ca:	9c a5       	ldd	r25, Y+44	; 0x2c
    61cc:	0e 94 c3 2d 	call	0x5b86	; 0x5b86 <scale32>
				P2_solution = P2_solution + temp2;
    61d0:	08 0f       	add	r16, r24
    61d2:	19 1f       	adc	r17, r25
    61d4:	f3 01       	movw	r30, r6
    61d6:	e7 55       	subi	r30, 0x57	; 87
    61d8:	ff 4f       	sbci	r31, 0xFF	; 255
			}

			// Other sources
			if ((Config.Channel[i].P2_source_a_volume !=0) && (Config.Channel[i].P2_source_a != NOMIX)) // Mix in first extra source
    61da:	60 81       	ld	r22, Z
    61dc:	66 23       	and	r22, r22
    61de:	09 f1       	breq	.+66     	; 0x6222 <ProcessMixer+0x656>
    61e0:	31 97       	sbiw	r30, 0x01	; 1
    61e2:	80 81       	ld	r24, Z
    61e4:	8d 30       	cpi	r24, 0x0D	; 13
    61e6:	e9 f0       	breq	.+58     	; 0x6222 <ProcessMixer+0x656>
    61e8:	e8 2f       	mov	r30, r24
    61ea:	ff 27       	eor	r31, r31
    61ec:	e7 fd       	sbrc	r30, 7
    61ee:	f0 95       	com	r31
			{
				// Is the source a sensor?
				if (Config.Channel[i].P2_source_a > (MAX_RC_CHANNELS - 1))
    61f0:	88 30       	cpi	r24, 0x08	; 8
    61f2:	54 f0       	brlt	.+20     	; 0x6208 <ProcessMixer+0x63c>
				{
					temp2 = SensorDataP2[Config.Channel[i].P2_source_a - EXT_SOURCE];
    61f4:	38 97       	sbiw	r30, 0x08	; 8
    61f6:	ee 0f       	add	r30, r30
    61f8:	ff 1f       	adc	r31, r31
    61fa:	81 e0       	ldi	r24, 0x01	; 1
    61fc:	90 e0       	ldi	r25, 0x00	; 0
    61fe:	8c 0f       	add	r24, r28
    6200:	9d 1f       	adc	r25, r29
    6202:	e8 0f       	add	r30, r24
    6204:	f9 1f       	adc	r31, r25
    6206:	04 c0       	rjmp	.+8      	; 0x6210 <ProcessMixer+0x644>
				}
				// Is the source an RC input?
				else 
				{
					temp2 = RCinputs[Config.Channel[i].P2_source_a];
    6208:	ee 0f       	add	r30, r30
    620a:	ff 1f       	adc	r31, r31
    620c:	e1 56       	subi	r30, 0x61	; 97
    620e:	f8 4f       	sbci	r31, 0xF8	; 248
    6210:	80 81       	ld	r24, Z
    6212:	91 81       	ldd	r25, Z+1	; 0x01
				}

				temp2 = scale32(temp2, Config.Channel[i].P2_source_a_volume);
    6214:	77 27       	eor	r23, r23
    6216:	67 fd       	sbrc	r22, 7
    6218:	70 95       	com	r23
    621a:	0e 94 c3 2d 	call	0x5b86	; 0x5b86 <scale32>
				P2_solution = P2_solution + temp2;
    621e:	08 0f       	add	r16, r24
    6220:	19 1f       	adc	r17, r25
    6222:	f3 01       	movw	r30, r6
    6224:	e3 55       	subi	r30, 0x53	; 83
    6226:	ff 4f       	sbci	r31, 0xFF	; 255
			}
			if ((Config.Channel[i].P2_source_b_volume !=0) && (Config.Channel[i].P2_source_b != NOMIX)) // Mix in second extra source
    6228:	60 81       	ld	r22, Z
    622a:	66 23       	and	r22, r22
    622c:	09 f1       	breq	.+66     	; 0x6270 <ProcessMixer+0x6a4>
    622e:	31 97       	sbiw	r30, 0x01	; 1
    6230:	80 81       	ld	r24, Z
    6232:	8d 30       	cpi	r24, 0x0D	; 13
    6234:	e9 f0       	breq	.+58     	; 0x6270 <ProcessMixer+0x6a4>
    6236:	e8 2f       	mov	r30, r24
    6238:	ff 27       	eor	r31, r31
    623a:	e7 fd       	sbrc	r30, 7
    623c:	f0 95       	com	r31
			{
				// Is the source a sensor?
				if (Config.Channel[i].P2_source_b > (MAX_RC_CHANNELS - 1))
    623e:	88 30       	cpi	r24, 0x08	; 8
    6240:	54 f0       	brlt	.+20     	; 0x6256 <ProcessMixer+0x68a>
				{
					temp2 = SensorDataP2[Config.Channel[i].P2_source_b - EXT_SOURCE];
    6242:	38 97       	sbiw	r30, 0x08	; 8
    6244:	ee 0f       	add	r30, r30
    6246:	ff 1f       	adc	r31, r31
    6248:	a1 e0       	ldi	r26, 0x01	; 1
    624a:	b0 e0       	ldi	r27, 0x00	; 0
    624c:	ac 0f       	add	r26, r28
    624e:	bd 1f       	adc	r27, r29
    6250:	ea 0f       	add	r30, r26
    6252:	fb 1f       	adc	r31, r27
    6254:	04 c0       	rjmp	.+8      	; 0x625e <ProcessMixer+0x692>
				}
				// Is the source an RC input?
				else
				{
					temp2 = RCinputs[Config.Channel[i].P2_source_b];
    6256:	ee 0f       	add	r30, r30
    6258:	ff 1f       	adc	r31, r31
    625a:	e1 56       	subi	r30, 0x61	; 97
    625c:	f8 4f       	sbci	r31, 0xF8	; 248
    625e:	80 81       	ld	r24, Z
    6260:	91 81       	ldd	r25, Z+1	; 0x01
				}

				temp2 = scale32(temp2, Config.Channel[i].P2_source_b_volume);
    6262:	77 27       	eor	r23, r23
    6264:	67 fd       	sbrc	r22, 7
    6266:	70 95       	com	r23
    6268:	0e 94 c3 2d 	call	0x5b86	; 0x5b86 <scale32>
				P2_solution = P2_solution + temp2;
    626c:	08 0f       	add	r16, r24
    626e:	19 1f       	adc	r17, r25
    6270:	c6 01       	movw	r24, r12
    6272:	82 58       	subi	r24, 0x82	; 130
    6274:	9a 4f       	sbci	r25, 0xFA	; 250
    6276:	fc 01       	movw	r30, r24
    6278:	ef 56       	subi	r30, 0x6F	; 111
    627a:	ff 4f       	sbci	r31, 0xFF	; 255
			}
		}
			
		// Save solution for this channel. Note that this contains cross-mixed data from the *last* cycle
		Config.Channel[i].P1_value = P1_solution;
    627c:	f1 82       	std	Z+1, r15	; 0x01
    627e:	e0 82       	st	Z, r14
    6280:	32 96       	adiw	r30, 0x02	; 2
		Config.Channel[i].P2_value = P2_solution;
    6282:	11 83       	std	Z+1, r17	; 0x01
    6284:	00 83       	st	Z, r16
    6286:	bd e1       	ldi	r27, 0x1D	; 29
    6288:	cb 0e       	add	r12, r27
    628a:	d1 1c       	adc	r13, r1

	//************************************************************
	// Main mix loop - sensors, RC inputs and other channels
	//************************************************************

	for (i = 0; i < MAX_OUTPUTS; i++)
    628c:	e8 ee       	ldi	r30, 0xE8	; 232
    628e:	ce 16       	cp	r12, r30
    6290:	d1 04       	cpc	r13, r1
    6292:	09 f0       	breq	.+2      	; 0x6296 <ProcessMixer+0x6ca>
    6294:	39 cd       	rjmp	.-1422   	; 0x5d08 <ProcessMixer+0x13c>
	//************************************************************
	// Mixer transition code
	//************************************************************ 

	// Convert number to percentage (0 to 100%)
	if (Config.TransitionSpeed == 0) 
    6296:	80 91 af 05 	lds	r24, 0x05AF
    629a:	81 11       	cpse	r24, r1
    629c:	2f c0       	rjmp	.+94     	; 0x62fc <ProcessMixer+0x730>
	{
		// Offset RC input to (approx) -250 to 2250
		temp1 = RCinputs[Config.FlightChan] + 1000;
    629e:	e0 91 aa 05 	lds	r30, 0x05AA
    62a2:	ee 0f       	add	r30, r30
    62a4:	ff 0b       	sbc	r31, r31
    62a6:	e1 56       	subi	r30, 0x61	; 97
    62a8:	f8 4f       	sbci	r31, 0xF8	; 248
    62aa:	80 81       	ld	r24, Z
    62ac:	91 81       	ldd	r25, Z+1	; 0x01
    62ae:	88 51       	subi	r24, 0x18	; 24
    62b0:	9c 4f       	sbci	r25, 0xFC	; 252
    62b2:	97 ff       	sbrs	r25, 7
    62b4:	02 c0       	rjmp	.+4      	; 0x62ba <ProcessMixer+0x6ee>
    62b6:	80 e0       	ldi	r24, 0x00	; 0
    62b8:	90 e0       	ldi	r25, 0x00	; 0
		// Trim lower end to zero (0 to 2250)
		if (temp1 < 0) temp1 = 0;

		// Convert 0 to 2250 to 0 to 125. Divide by 20
		// Round to avoid truncation errors
		transition = (temp1 + 10) / 20;
    62ba:	0a 96       	adiw	r24, 0x0a	; 10
    62bc:	64 e1       	ldi	r22, 0x14	; 20
    62be:	70 e0       	ldi	r23, 0x00	; 0
    62c0:	0e 94 8f 3c 	call	0x791e	; 0x791e <__divmodhi4>

		// transition now has a range of 0 to 101 for 0 to 2000 input
		// Limit extent of transition value 0 to 100 (101 steps)
		if (transition > 100) transition = 100;
    62c4:	65 36       	cpi	r22, 0x65	; 101
    62c6:	71 05       	cpc	r23, r1
    62c8:	2c f4       	brge	.+10     	; 0x62d4 <ProcessMixer+0x708>
		// Trim lower end to zero (0 to 2250)
		if (temp1 < 0) temp1 = 0;

		// Convert 0 to 2250 to 0 to 125. Divide by 20
		// Round to avoid truncation errors
		transition = (temp1 + 10) / 20;
    62ca:	70 93 24 01 	sts	0x0124, r23
    62ce:	60 93 23 01 	sts	0x0123, r22
    62d2:	06 c0       	rjmp	.+12     	; 0x62e0 <ProcessMixer+0x714>

		// transition now has a range of 0 to 101 for 0 to 2000 input
		// Limit extent of transition value 0 to 100 (101 steps)
		if (transition > 100) transition = 100;
    62d4:	84 e6       	ldi	r24, 0x64	; 100
    62d6:	90 e0       	ldi	r25, 0x00	; 0
    62d8:	90 93 24 01 	sts	0x0124, r25
    62dc:	80 93 23 01 	sts	0x0123, r24

	// Recalculate P1 values based on transition stage
	for (i = 0; i < MAX_OUTPUTS; i++)
	{
		// Speed up the easy ones :)
		if (transition == 0)
    62e0:	00 91 23 01 	lds	r16, 0x0123
    62e4:	10 91 24 01 	lds	r17, 0x0124
		}
		else
		{
			// Get source channel value
			temp1 = Config.Channel[i].P1_value;
			temp1 = scale32(temp1, (100 - transition));
    62e8:	a4 e6       	ldi	r26, 0x64	; 100
    62ea:	ca 2e       	mov	r12, r26
    62ec:	d1 2c       	mov	r13, r1
    62ee:	c0 1a       	sub	r12, r16
    62f0:	d1 0a       	sbc	r13, r17
    62f2:	bf e0       	ldi	r27, 0x0F	; 15
    62f4:	eb 2e       	mov	r14, r27
    62f6:	b6 e0       	ldi	r27, 0x06	; 6
    62f8:	fb 2e       	mov	r15, r27
    62fa:	05 c0       	rjmp	.+10     	; 0x6306 <ProcessMixer+0x73a>
		if (transition > 100) transition = 100;
	}
	else 
	{
		// transition_counter counts from 0 to 100 (101 steps)
		transition = transition_counter;
    62fc:	80 91 10 01 	lds	r24, 0x0110
    6300:	90 91 11 01 	lds	r25, 0x0111
    6304:	e9 cf       	rjmp	.-46     	; 0x62d8 <ProcessMixer+0x70c>

	// Recalculate P1 values based on transition stage
	for (i = 0; i < MAX_OUTPUTS; i++)
	{
		// Speed up the easy ones :)
		if (transition == 0)
    6306:	01 15       	cp	r16, r1
    6308:	11 05       	cpc	r17, r1
    630a:	21 f4       	brne	.+8      	; 0x6314 <ProcessMixer+0x748>
		{
			temp1 = Config.Channel[i].P1_value;
    630c:	d7 01       	movw	r26, r14
    630e:	8d 91       	ld	r24, X+
    6310:	9c 91       	ld	r25, X
    6312:	16 c0       	rjmp	.+44     	; 0x6340 <ProcessMixer+0x774>
		}
		else if (transition >= 100)
    6314:	04 36       	cpi	r16, 0x64	; 100
    6316:	11 05       	cpc	r17, r1
    6318:	24 f0       	brlt	.+8      	; 0x6322 <ProcessMixer+0x756>
		{
			temp1 = Config.Channel[i].P2_value;
    631a:	f7 01       	movw	r30, r14
    631c:	82 81       	ldd	r24, Z+2	; 0x02
    631e:	93 81       	ldd	r25, Z+3	; 0x03
    6320:	0f c0       	rjmp	.+30     	; 0x6340 <ProcessMixer+0x774>
		}
		else
		{
			// Get source channel value
			temp1 = Config.Channel[i].P1_value;
			temp1 = scale32(temp1, (100 - transition));
    6322:	b6 01       	movw	r22, r12
    6324:	d7 01       	movw	r26, r14
    6326:	8d 91       	ld	r24, X+
    6328:	9c 91       	ld	r25, X
    632a:	0e 94 c3 2d 	call	0x5b86	; 0x5b86 <scale32>
    632e:	5c 01       	movw	r10, r24

			// Get destination channel value
			temp2 = Config.Channel[i].P2_value;
			temp2 = scale32(temp2, transition);
    6330:	b8 01       	movw	r22, r16
    6332:	f7 01       	movw	r30, r14
    6334:	82 81       	ldd	r24, Z+2	; 0x02
    6336:	93 81       	ldd	r25, Z+3	; 0x03
    6338:	0e 94 c3 2d 	call	0x5b86	; 0x5b86 <scale32>

			// Sum the mixers
			temp1 = temp1 + temp2;
    633c:	8a 0d       	add	r24, r10
    633e:	9b 1d       	adc	r25, r11
		}
		// Save transitioned solution into P1
		Config.Channel[i].P1_value = temp1;
    6340:	d7 01       	movw	r26, r14
    6342:	8d 93       	st	X+, r24
    6344:	9c 93       	st	X, r25
    6346:	bd e1       	ldi	r27, 0x1D	; 29
    6348:	eb 0e       	add	r14, r27
    634a:	f1 1c       	adc	r15, r1
		// transition_counter counts from 0 to 100 (101 steps)
		transition = transition_counter;
	}

	// Recalculate P1 values based on transition stage
	for (i = 0; i < MAX_OUTPUTS; i++)
    634c:	e7 ef       	ldi	r30, 0xF7	; 247
    634e:	ee 16       	cp	r14, r30
    6350:	e6 e0       	ldi	r30, 0x06	; 6
    6352:	fe 06       	cpc	r15, r30
    6354:	c1 f6       	brne	.-80     	; 0x6306 <ProcessMixer+0x73a>
				// Just use the vlue of P1 volume as there is no curve
				temp3 = Config.Channel[i].P1_throttle_volume; // Promote to 16 bits
			}

			// Calculate actual throttle value
			temp3 = scale32(MonopolarThrottle, temp3);
    6356:	60 90 9d 07 	lds	r6, 0x079D
    635a:	70 90 9e 07 	lds	r7, 0x079E
    635e:	68 e1       	ldi	r22, 0x18	; 24
    6360:	e6 2e       	mov	r14, r22
    6362:	66 e0       	ldi	r22, 0x06	; 6
    6364:	f6 2e       	mov	r15, r22
    6366:	79 e1       	ldi	r23, 0x19	; 25
    6368:	87 2e       	mov	r8, r23
    636a:	76 e0       	ldi	r23, 0x06	; 6
    636c:	97 2e       	mov	r9, r23
    636e:	ef e0       	ldi	r30, 0x0F	; 15
    6370:	ce 2e       	mov	r12, r30
    6372:	e6 e0       	ldi	r30, 0x06	; 6
    6374:	de 2e       	mov	r13, r30
			if (Config.Channel[i].P1_throttle_volume != Config.Channel[i].P2_throttle_volume)
			{
				// Calculate step difference in 1/100ths and round
				temp1 = (Config.Channel[i].P2_throttle_volume - Config.Channel[i].P1_throttle_volume);
				temp1 = temp1 << 7; 						// Multiply by 128 so divide gives reasonable step values
				Step1 = temp1 / 100;	
    6376:	f4 e6       	ldi	r31, 0x64	; 100
    6378:	af 2e       	mov	r10, r31
    637a:	b1 2c       	mov	r11, r1
    637c:	80 2f       	mov	r24, r16
    637e:	99 27       	eor	r25, r25
    6380:	87 fd       	sbrc	r24, 7
    6382:	90 95       	com	r25
					}
					// If P2 greater than P1, SINE is the one we want
					else
					{
						// Multiply SQRTSIN[transition] steps (0 to 100)
						temp3 = (int8_t)pgm_read_byte(&SQRTSIN[(int8_t)transition]);
    6384:	9c 01       	movw	r18, r24
    6386:	20 50       	subi	r18, 0x00	; 0
    6388:	37 4e       	sbci	r19, 0xE7	; 231
    638a:	3e 8b       	std	Y+22, r19	; 0x16
    638c:	2d 8b       	std	Y+21, r18	; 0x15
					// Choose between SQRT SINE and SQRT COSINE
					// If P2 less than P1, COSINE (reverse SINE) is the one we want
					if (Step1 < 0)
					{ 
						// Multiply SQRTSIN[100 - transition] steps (0 to 100)
						temp3 = 100 - (int8_t)pgm_read_byte(&SQRTSIN[100 - (int8_t)transition]);
    638e:	95 01       	movw	r18, r10
    6390:	28 1b       	sub	r18, r24
    6392:	39 0b       	sbc	r19, r25
    6394:	a9 01       	movw	r20, r18
    6396:	40 50       	subi	r20, 0x00	; 0
    6398:	57 4e       	sbci	r21, 0xE7	; 231
    639a:	58 8f       	std	Y+24, r21	; 0x18
    639c:	4f 8b       	std	Y+23, r20	; 0x17
					}
					// If P2 greater than P1, SINE is the one we want
					else
					{
						// Multiply SIN[transition] steps (0 to 100)
						temp3 = (int8_t)pgm_read_byte(&SIN[(int8_t)transition]);
    639e:	dc 01       	movw	r26, r24
    63a0:	ab 59       	subi	r26, 0x9B	; 155
    63a2:	b6 4e       	sbci	r27, 0xE6	; 230
    63a4:	1d 01       	movw	r2, r26
					// Choose between SINE and COSINE
					// If P2 less than P1, COSINE (reverse SINE) is the one we want
					if (Step1 < 0)
					{ 
						// Multiply SIN[100 - transition] steps (0 to 100)
						temp3 = 100 - (int8_t)pgm_read_byte(&SIN[100 - (int8_t)transition]);
    63a6:	f9 01       	movw	r30, r18
    63a8:	eb 59       	subi	r30, 0x9B	; 155
    63aa:	f6 4e       	sbci	r31, 0xE6	; 230
    63ac:	2f 01       	movw	r4, r30
    63ae:	f7 01       	movw	r30, r14
    63b0:	31 97       	sbiw	r30, 0x01	; 1
	//************************************************************ 

	for (i = 0; i < MAX_OUTPUTS; i++)
	{
		// Ignore if both throttle volumes are 0% (no throttle)
		if 	(!((Config.Channel[i].P1_throttle_volume == 0) && 
    63b2:	90 81       	ld	r25, Z
    63b4:	d7 01       	movw	r26, r14
    63b6:	8c 91       	ld	r24, X
    63b8:	91 11       	cpse	r25, r1
    63ba:	03 c0       	rjmp	.+6      	; 0x63c2 <ProcessMixer+0x7f6>
    63bc:	88 23       	and	r24, r24
    63be:	09 f4       	brne	.+2      	; 0x63c2 <ProcessMixer+0x7f6>
    63c0:	5d c0       	rjmp	.+186    	; 0x647c <ProcessMixer+0x8b0>
    63c2:	29 2f       	mov	r18, r25
    63c4:	33 27       	eor	r19, r19
    63c6:	27 fd       	sbrc	r18, 7
    63c8:	30 95       	com	r19
			(Config.Channel[i].P2_throttle_volume == 0)))
		{
			// Only process if there is a curve
			if (Config.Channel[i].P1_throttle_volume != Config.Channel[i].P2_throttle_volume)
    63ca:	98 17       	cp	r25, r24
    63cc:	09 f4       	brne	.+2      	; 0x63d0 <ProcessMixer+0x804>
    63ce:	48 c0       	rjmp	.+144    	; 0x6460 <ProcessMixer+0x894>
			{
				// Calculate step difference in 1/100ths and round
				temp1 = (Config.Channel[i].P2_throttle_volume - Config.Channel[i].P1_throttle_volume);
    63d0:	99 27       	eor	r25, r25
    63d2:	87 fd       	sbrc	r24, 7
    63d4:	90 95       	com	r25
    63d6:	82 1b       	sub	r24, r18
    63d8:	93 0b       	sbc	r25, r19
				temp1 = temp1 << 7; 						// Multiply by 128 so divide gives reasonable step values
    63da:	96 95       	lsr	r25
    63dc:	98 2f       	mov	r25, r24
    63de:	88 27       	eor	r24, r24
    63e0:	97 95       	ror	r25
    63e2:	87 95       	ror	r24
				Step1 = temp1 / 100;	
    63e4:	b5 01       	movw	r22, r10
    63e6:	0e 94 8f 3c 	call	0x791e	; 0x791e <__divmodhi4>

				// Set start (P1) point
				temp2 = Config.Channel[i].P1_throttle_volume; // Promote to 16 bits
				temp2 = temp2 << 7;
    63ea:	36 95       	lsr	r19
    63ec:	32 2f       	mov	r19, r18
    63ee:	22 27       	eor	r18, r18
    63f0:	37 95       	ror	r19
    63f2:	27 95       	ror	r18

				// Linear vs. Sinusoidal calculation
				if (Config.Channel[i].Throttle_curve == LINEAR)
    63f4:	f4 01       	movw	r30, r8
    63f6:	80 81       	ld	r24, Z
    63f8:	81 11       	cpse	r24, r1
    63fa:	08 c0       	rjmp	.+16     	; 0x640c <ProcessMixer+0x840>
				{
					// Multiply [transition] steps (0 to 100)
					temp3 = temp2 + (Step1 * transition);
    63fc:	60 9f       	mul	r22, r16
    63fe:	c0 01       	movw	r24, r0
    6400:	61 9f       	mul	r22, r17
    6402:	90 0d       	add	r25, r0
    6404:	70 9f       	mul	r23, r16
    6406:	90 0d       	add	r25, r0
    6408:	11 24       	eor	r1, r1
    640a:	20 c0       	rjmp	.+64     	; 0x644c <ProcessMixer+0x880>
				}

				// SINE
				else if (Config.Channel[i].Throttle_curve == SINE)
    640c:	81 30       	cpi	r24, 0x01	; 1
    640e:	31 f4       	brne	.+12     	; 0x641c <ProcessMixer+0x850>
				{
					// Choose between SINE and COSINE
					// If P2 less than P1, COSINE (reverse SINE) is the one we want
					if (Step1 < 0)
    6410:	77 ff       	sbrs	r23, 7
    6412:	02 c0       	rjmp	.+4      	; 0x6418 <ProcessMixer+0x84c>
					{ 
						// Multiply SIN[100 - transition] steps (0 to 100)
						temp3 = 100 - (int8_t)pgm_read_byte(&SIN[100 - (int8_t)transition]);
    6414:	f2 01       	movw	r30, r4
    6416:	06 c0       	rjmp	.+12     	; 0x6424 <ProcessMixer+0x858>
					}
					// If P2 greater than P1, SINE is the one we want
					else
					{
						// Multiply SIN[transition] steps (0 to 100)
						temp3 = (int8_t)pgm_read_byte(&SIN[(int8_t)transition]);
    6418:	f1 01       	movw	r30, r2
    641a:	0d c0       	rjmp	.+26     	; 0x6436 <ProcessMixer+0x86a>
				// SQRT SINE
				else
				{
					// Choose between SQRT SINE and SQRT COSINE
					// If P2 less than P1, COSINE (reverse SINE) is the one we want
					if (Step1 < 0)
    641c:	77 ff       	sbrs	r23, 7
    641e:	09 c0       	rjmp	.+18     	; 0x6432 <ProcessMixer+0x866>
					{ 
						// Multiply SQRTSIN[100 - transition] steps (0 to 100)
						temp3 = 100 - (int8_t)pgm_read_byte(&SQRTSIN[100 - (int8_t)transition]);
    6420:	ef 89       	ldd	r30, Y+23	; 0x17
    6422:	f8 8d       	ldd	r31, Y+24	; 0x18
    6424:	84 91       	lpm	r24, Z
    6426:	a5 01       	movw	r20, r10
    6428:	48 1b       	sub	r20, r24
    642a:	51 09       	sbc	r21, r1
    642c:	87 fd       	sbrc	r24, 7
    642e:	53 95       	inc	r21
    6430:	06 c0       	rjmp	.+12     	; 0x643e <ProcessMixer+0x872>
					}
					// If P2 greater than P1, SINE is the one we want
					else
					{
						// Multiply SQRTSIN[transition] steps (0 to 100)
						temp3 = (int8_t)pgm_read_byte(&SQRTSIN[(int8_t)transition]);
    6432:	ed 89       	ldd	r30, Y+21	; 0x15
    6434:	fe 89       	ldd	r31, Y+22	; 0x16
    6436:	44 91       	lpm	r20, Z
    6438:	55 27       	eor	r21, r21
    643a:	47 fd       	sbrc	r20, 7
    643c:	50 95       	com	r21
					}

					// Get SINE% (temp2) of difference in volumes (Step1)
					// Step1 is already in 100ths of the difference * 128
					// temp1 is the start volume * 128
					temp3 = temp2 + (Step1 * temp3);
    643e:	64 9f       	mul	r22, r20
    6440:	c0 01       	movw	r24, r0
    6442:	65 9f       	mul	r22, r21
    6444:	90 0d       	add	r25, r0
    6446:	74 9f       	mul	r23, r20
    6448:	90 0d       	add	r25, r0
    644a:	11 24       	eor	r1, r1
    644c:	82 0f       	add	r24, r18
    644e:	93 1f       	adc	r25, r19
				}

				// Round, then rescale to normal value
				temp3 = temp3 + 64;
    6450:	bc 01       	movw	r22, r24
    6452:	60 5c       	subi	r22, 0xC0	; 192
    6454:	7f 4f       	sbci	r23, 0xFF	; 255
				temp3 = temp3 >> 7;
    6456:	66 0f       	add	r22, r22
    6458:	67 2f       	mov	r22, r23
    645a:	66 1f       	adc	r22, r22
    645c:	77 0b       	sbc	r23, r23
    645e:	01 c0       	rjmp	.+2      	; 0x6462 <ProcessMixer+0x896>
			
			// No curve
			else
			{
				// Just use the vlue of P1 volume as there is no curve
				temp3 = Config.Channel[i].P1_throttle_volume; // Promote to 16 bits
    6460:	b9 01       	movw	r22, r18
			}

			// Calculate actual throttle value
			temp3 = scale32(MonopolarThrottle, temp3);
    6462:	c3 01       	movw	r24, r6
    6464:	0e 94 c3 2d 	call	0x5b86	; 0x5b86 <scale32>

			// At this point, the throttle values are 0 to 2500 (+/-125%)
			// Re-scale throttle values back to system values (+/-1250) 
			// as throttle offset is actually at some variable value.
			// Reset minimum throttle to 1.1ms or 3750 (1.5ms center)  - 2750 (1.1ms min throttle)
			temp3 = temp3 - MOTORMIN;
    6468:	88 5e       	subi	r24, 0xE8	; 232
    646a:	93 40       	sbci	r25, 0x03	; 3

			// Add offset to channel value
			Config.Channel[i].P1_value += temp3;
    646c:	d6 01       	movw	r26, r12
    646e:	2d 91       	ld	r18, X+
    6470:	3c 91       	ld	r19, X
    6472:	11 97       	sbiw	r26, 0x01	; 1
    6474:	28 0f       	add	r18, r24
    6476:	39 1f       	adc	r19, r25
    6478:	2d 93       	st	X+, r18
    647a:	3c 93       	st	X, r19
    647c:	bd e1       	ldi	r27, 0x1D	; 29
    647e:	eb 0e       	add	r14, r27
    6480:	f1 1c       	adc	r15, r1
    6482:	ed e1       	ldi	r30, 0x1D	; 29
    6484:	ce 0e       	add	r12, r30
    6486:	d1 1c       	adc	r13, r1
    6488:	fd e1       	ldi	r31, 0x1D	; 29
    648a:	8f 0e       	add	r8, r31
    648c:	91 1c       	adc	r9, r1
	// Groovy throttle curve handling. Must be after the transition.
	// Uses the transition value, but is not part of the transition
	// mixer. Linear or Sine curve. Reverse Sine done automatically
	//************************************************************ 

	for (i = 0; i < MAX_OUTPUTS; i++)
    648e:	20 e0       	ldi	r18, 0x00	; 0
    6490:	e2 16       	cp	r14, r18
    6492:	27 e0       	ldi	r18, 0x07	; 7
    6494:	f2 06       	cpc	r15, r18
    6496:	09 f0       	breq	.+2      	; 0x649a <ProcessMixer+0x8ce>
    6498:	8a cf       	rjmp	.-236    	; 0x63ae <ProcessMixer+0x7e2>
    649a:	e6 e1       	ldi	r30, 0x16	; 22
    649c:	f6 e0       	ldi	r31, 0x06	; 6
    649e:	2f e0       	ldi	r18, 0x0F	; 15
    64a0:	36 e0       	ldi	r19, 0x06	; 6
			// Work out distance to cover over stage 2 (P1.n to P2)
			temp2 = Config.Channel[i].P2_offset - Config.Channel[i].P1n_offset;
			temp2 = temp2 << 7;

			// Divide distance into steps
			temp1 = (100 - Config.Channel[i].P1n_position); 
    64a2:	94 e6       	ldi	r25, 0x64	; 100
    64a4:	69 2e       	mov	r6, r25
    64a6:	71 2c       	mov	r7, r1
    64a8:	df 01       	movw	r26, r30
    64aa:	13 97       	sbiw	r26, 0x03	; 3
	//************************************************************ 

	for (i = 0; i < MAX_OUTPUTS; i++)
	{
		// Simplify if all are the same
		if (!((Config.Channel[i].P1_offset == Config.Channel[i].P1n_offset) &&
    64ac:	cc 90       	ld	r12, X
    64ae:	12 96       	adiw	r26, 0x02	; 2
    64b0:	ac 90       	ld	r10, X
    64b2:	50 80       	ld	r5, Z
    64b4:	ca 10       	cpse	r12, r10
    64b6:	03 c0       	rjmp	.+6      	; 0x64be <ProcessMixer+0x8f2>
    64b8:	5c 14       	cp	r5, r12
    64ba:	09 f4       	brne	.+2      	; 0x64be <ProcessMixer+0x8f2>
    64bc:	53 c0       	rjmp	.+166    	; 0x6564 <ProcessMixer+0x998>
		 	 (Config.Channel[i].P2_offset == Config.Channel[i].P1n_offset)))
		{
			// Work out distance to cover over stage 1 (P1 to P1.n)
			temp1 = Config.Channel[i].P1n_offset - Config.Channel[i].P1_offset;
    64be:	bb 24       	eor	r11, r11
    64c0:	a7 fc       	sbrc	r10, 7
    64c2:	b0 94       	com	r11
    64c4:	dd 24       	eor	r13, r13
    64c6:	c7 fc       	sbrc	r12, 7
    64c8:	d0 94       	com	r13
    64ca:	c5 01       	movw	r24, r10
    64cc:	8c 19       	sub	r24, r12
    64ce:	9d 09       	sbc	r25, r13
    64d0:	df 01       	movw	r26, r30
    64d2:	12 97       	sbiw	r26, 0x02	; 2
			temp1 = temp1 << 7; // Multiply by 128 so divide gives reasonable step values

			// Divide distance into steps
			temp2 = Config.Channel[i].P1n_position; 
    64d4:	ec 90       	ld	r14, X
    64d6:	ff 24       	eor	r15, r15
    64d8:	e7 fc       	sbrc	r14, 7
    64da:	f0 94       	com	r15
		if (!((Config.Channel[i].P1_offset == Config.Channel[i].P1n_offset) &&
		 	 (Config.Channel[i].P2_offset == Config.Channel[i].P1n_offset)))
		{
			// Work out distance to cover over stage 1 (P1 to P1.n)
			temp1 = Config.Channel[i].P1n_offset - Config.Channel[i].P1_offset;
			temp1 = temp1 << 7; // Multiply by 128 so divide gives reasonable step values
    64dc:	96 95       	lsr	r25
    64de:	98 2f       	mov	r25, r24
    64e0:	88 27       	eor	r24, r24
    64e2:	97 95       	ror	r25
    64e4:	87 95       	ror	r24

			// Divide distance into steps
			temp2 = Config.Channel[i].P1n_position; 
			Step1 = ((temp1 + (temp2 >> 1)) / temp2) ; // Divide and round result
    64e6:	a7 01       	movw	r20, r14
    64e8:	55 95       	asr	r21
    64ea:	47 95       	ror	r20
    64ec:	84 0f       	add	r24, r20
    64ee:	95 1f       	adc	r25, r21
    64f0:	b7 01       	movw	r22, r14
    64f2:	0e 94 8f 3c 	call	0x791e	; 0x791e <__divmodhi4>
    64f6:	4b 01       	movw	r8, r22
		
			// Work out distance to cover over stage 2 (P1.n to P2)
			temp2 = Config.Channel[i].P2_offset - Config.Channel[i].P1n_offset;
    64f8:	85 2d       	mov	r24, r5
    64fa:	99 27       	eor	r25, r25
    64fc:	87 fd       	sbrc	r24, 7
    64fe:	90 95       	com	r25
    6500:	8a 19       	sub	r24, r10
    6502:	9b 09       	sbc	r25, r11
			temp2 = temp2 << 7;

			// Divide distance into steps
			temp1 = (100 - Config.Channel[i].P1n_position); 
    6504:	b3 01       	movw	r22, r6
    6506:	6e 19       	sub	r22, r14
    6508:	7f 09       	sbc	r23, r15
			temp2 = Config.Channel[i].P1n_position; 
			Step1 = ((temp1 + (temp2 >> 1)) / temp2) ; // Divide and round result
		
			// Work out distance to cover over stage 2 (P1.n to P2)
			temp2 = Config.Channel[i].P2_offset - Config.Channel[i].P1n_offset;
			temp2 = temp2 << 7;
    650a:	96 95       	lsr	r25
    650c:	98 2f       	mov	r25, r24
    650e:	88 27       	eor	r24, r24
    6510:	97 95       	ror	r25
    6512:	87 95       	ror	r24

			// Divide distance into steps
			temp1 = (100 - Config.Channel[i].P1n_position); 
			Step2 = ((temp2 + (temp1 >> 1)) / temp1) ; // Divide and round result	
    6514:	ab 01       	movw	r20, r22
    6516:	55 95       	asr	r21
    6518:	47 95       	ror	r20
    651a:	84 0f       	add	r24, r20
    651c:	95 1f       	adc	r25, r21
    651e:	0e 94 8f 3c 	call	0x791e	; 0x791e <__divmodhi4>

			// Set start (P1) point
			temp3 = Config.Channel[i].P1_offset; // Promote to 16bits
			temp3 = temp3 << 7;
    6522:	d6 94       	lsr	r13
    6524:	dc 2c       	mov	r13, r12
    6526:	cc 24       	eor	r12, r12
    6528:	d7 94       	ror	r13
    652a:	c7 94       	ror	r12

			// Count up transition steps of the appropriate step size
			for (j = 0; j < transition; j++)
    652c:	40 e0       	ldi	r20, 0x00	; 0
    652e:	84 2f       	mov	r24, r20
    6530:	90 e0       	ldi	r25, 0x00	; 0
    6532:	80 17       	cp	r24, r16
    6534:	91 07       	cpc	r25, r17
    6536:	54 f4       	brge	.+20     	; 0x654c <ProcessMixer+0x980>
			{
				// If in stage 1 use Step1 size
				if (j < Config.Channel[i].P1n_position)
    6538:	8e 15       	cp	r24, r14
    653a:	9f 05       	cpc	r25, r15
    653c:	1c f4       	brge	.+6      	; 0x6544 <ProcessMixer+0x978>
				{
					temp3 += Step1;
    653e:	c8 0c       	add	r12, r8
    6540:	d9 1c       	adc	r13, r9
    6542:	02 c0       	rjmp	.+4      	; 0x6548 <ProcessMixer+0x97c>
				}
				// If in stage 2 use Step2 size
				else
				{
					temp3 += Step2;
    6544:	c6 0e       	add	r12, r22
    6546:	d7 1e       	adc	r13, r23
			// Set start (P1) point
			temp3 = Config.Channel[i].P1_offset; // Promote to 16bits
			temp3 = temp3 << 7;

			// Count up transition steps of the appropriate step size
			for (j = 0; j < transition; j++)
    6548:	4f 5f       	subi	r20, 0xFF	; 255
    654a:	f1 cf       	rjmp	.-30     	; 0x652e <ProcessMixer+0x962>
					temp3 += Step2;
				}
			}

			// Reformat into a system-compatible value
			temp3 = ((temp3 + 64) >> 7);							// Round then divide by 128
    654c:	c6 01       	movw	r24, r12
    654e:	80 5c       	subi	r24, 0xC0	; 192
    6550:	9f 4f       	sbci	r25, 0xFF	; 255
    6552:	88 0f       	add	r24, r24
    6554:	89 2f       	mov	r24, r25
    6556:	88 1f       	adc	r24, r24
    6558:	99 0b       	sbc	r25, r25
int16_t scale_percent_nooffset(int8_t value)
{
	int16_t temp16_1, temp16_2;

	temp16_1 = value; // Promote
	temp16_2 = (temp16_1 * (int16_t)10);
    655a:	4a e0       	ldi	r20, 0x0A	; 10
    655c:	84 02       	muls	r24, r20
    655e:	60 01       	movw	r12, r0
    6560:	11 24       	eor	r1, r1
				}
			}

			// Reformat into a system-compatible value
			temp3 = ((temp3 + 64) >> 7);							// Round then divide by 128
			P1_solution = scale_percent_nooffset((int8_t)temp3);	
    6562:	05 c0       	rjmp	.+10     	; 0x656e <ProcessMixer+0x9a2>
int16_t scale_percent_nooffset(int8_t value)
{
	int16_t temp16_1, temp16_2;

	temp16_1 = value; // Promote
	temp16_2 = (temp16_1 * (int16_t)10);
    6564:	55 2d       	mov	r21, r5
    6566:	8a e0       	ldi	r24, 0x0A	; 10
    6568:	58 02       	muls	r21, r24
    656a:	60 01       	movw	r12, r0
    656c:	11 24       	eor	r1, r1
		{
			P1_solution = scale_percent_nooffset(Config.Channel[i].P1_offset);
		}

		// Add offset to channel value
		Config.Channel[i].P1_value += P1_solution;
    656e:	d9 01       	movw	r26, r18
    6570:	4d 91       	ld	r20, X+
    6572:	5c 91       	ld	r21, X
    6574:	11 97       	sbiw	r26, 0x01	; 1
    6576:	4c 0d       	add	r20, r12
    6578:	5d 1d       	adc	r21, r13
    657a:	4d 93       	st	X+, r20
    657c:	5c 93       	st	X, r21
    657e:	23 5e       	subi	r18, 0xE3	; 227
    6580:	3f 4f       	sbci	r19, 0xFF	; 255
    6582:	7d 96       	adiw	r30, 0x1d	; 29
	//************************************************************
	// Per-channel 3-point offset needs to be after the transition  
	// loop as it is non-linear, unlike the transition.
	//************************************************************ 

	for (i = 0; i < MAX_OUTPUTS; i++)
    6584:	b6 e0       	ldi	r27, 0x06	; 6
    6586:	ee 3f       	cpi	r30, 0xFE	; 254
    6588:	fb 07       	cpc	r31, r27
    658a:	09 f0       	breq	.+2      	; 0x658e <ProcessMixer+0x9c2>
    658c:	8d cf       	rjmp	.-230    	; 0x64a8 <ProcessMixer+0x8dc>

		// Add offset to channel value
		Config.Channel[i].P1_value += P1_solution;
	}

} // ProcessMixer()
    658e:	e0 96       	adiw	r28, 0x30	; 48
    6590:	e2 e1       	ldi	r30, 0x12	; 18
    6592:	0c 94 37 3d 	jmp	0x7a6e	; 0x7a6e <__epilogue_restores__>

00006596 <scale_percent>:
int16_t scale_percent(int8_t value)
{
	int16_t temp16_1, temp16_2;

	temp16_1 = value; // Promote
	temp16_2 = ((temp16_1 * (int16_t)10) + 3750);
    6596:	2a e0       	ldi	r18, 0x0A	; 10
    6598:	82 02       	muls	r24, r18
    659a:	c0 01       	movw	r24, r0
    659c:	11 24       	eor	r1, r1

	return temp16_2;
}
    659e:	8a 55       	subi	r24, 0x5A	; 90
    65a0:	91 4f       	sbci	r25, 0xF1	; 241
    65a2:	08 95       	ret

000065a4 <mugui_text_sizestring>:
	\return void
	\date 	12.08.2009
*/
/************************************************************************/
void mugui_text_sizestring(mugui_char_t *s, const unsigned char* font, mugui_size16_t *size)
{
    65a4:	a0 e0       	ldi	r26, 0x00	; 0
    65a6:	b0 e0       	ldi	r27, 0x00	; 0
    65a8:	e8 ed       	ldi	r30, 0xD8	; 216
    65aa:	f2 e3       	ldi	r31, 0x32	; 50
    65ac:	0c 94 26 3d 	jmp	0x7a4c	; 0x7a4c <__prologue_saves__+0x16>
	mugui_uint8_t  indexhighbyte = 0; 		//high byte of the bitmap address in the array
	mugui_uint32_t indexaddress = 0;		//bitmap address in the array (derived from low and high byte)

	/* read header of the font          */
	/* pgm_read_byte is ATMega specific */
	length = strlen(s);
    65b0:	dc 01       	movw	r26, r24
    65b2:	0d 90       	ld	r0, X+
    65b4:	00 20       	and	r0, r0
    65b6:	e9 f7       	brne	.-6      	; 0x65b2 <mugui_text_sizestring+0xe>
    65b8:	11 97       	sbiw	r26, 0x01	; 1
    65ba:	a8 1b       	sub	r26, r24
    65bc:	b9 0b       	sbc	r27, r25
	height = pgm_read_byte(&font[4]);
    65be:	fb 01       	movw	r30, r22
    65c0:	34 96       	adiw	r30, 0x04	; 4
    65c2:	e4 90       	lpm	r14, Z
    65c4:	f1 2c       	mov	r15, r1

	startcharacter = pgm_read_byte(&font[2]);
    65c6:	32 97       	sbiw	r30, 0x02	; 2
    65c8:	d4 90       	lpm	r13, Z
    65ca:	ec 01       	movw	r28, r24
    65cc:	a8 0f       	add	r26, r24
    65ce:	b9 1f       	adc	r27, r25
	mugui_uint8_t  distance = 1;			//distance between characters
	mugui_uint16_t length = 0;				//temporary length of string
	mugui_uint16_t i = 0;					//counter variable
	mugui_uint16_t startcharacter = 0; 	    //startcharacter of the font
	mugui_uint16_t height = 0;				//height of the bitmap
	mugui_uint16_t width = 0; 				//width of the bitmap
    65d0:	80 e0       	ldi	r24, 0x00	; 0
    65d2:	90 e0       	ldi	r25, 0x00	; 0
	/* pgm_read_byte is ATMega specific */
	length = strlen(s);
	height = pgm_read_byte(&font[4]);

	startcharacter = pgm_read_byte(&font[2]);
	for(i=0;i<length;i++) //every character in prop fonts has its own width
    65d4:	ca 17       	cp	r28, r26
    65d6:	db 07       	cpc	r29, r27
    65d8:	29 f1       	breq	.+74     	; 0x6624 <mugui_text_sizestring+0x80>
	{
		index = s[i] - startcharacter;
    65da:	29 91       	ld	r18, Y+
    65dc:	2d 19       	sub	r18, r13
		indexhighbyte = pgm_read_byte(&font[index*2 + 5]);
    65de:	30 e0       	ldi	r19, 0x00	; 0
    65e0:	22 0f       	add	r18, r18
    65e2:	33 1f       	adc	r19, r19
    65e4:	f9 01       	movw	r30, r18
    65e6:	35 96       	adiw	r30, 0x05	; 5
    65e8:	e6 0f       	add	r30, r22
    65ea:	f7 1f       	adc	r31, r23
    65ec:	04 91       	lpm	r16, Z
		indexlowbyte = pgm_read_byte(&font[index*2 + 6]);
    65ee:	f9 01       	movw	r30, r18
    65f0:	36 96       	adiw	r30, 0x06	; 6
    65f2:	e6 0f       	add	r30, r22
    65f4:	f7 1f       	adc	r31, r23
    65f6:	e4 91       	lpm	r30, Z
		indexaddress = (mugui_int64_t)indexhighbyte;
    65f8:	10 e0       	ldi	r17, 0x00	; 0
    65fa:	20 e0       	ldi	r18, 0x00	; 0
    65fc:	30 e0       	ldi	r19, 0x00	; 0
		indexaddress = indexaddress << 8;
    65fe:	32 2f       	mov	r19, r18
    6600:	21 2f       	mov	r18, r17
    6602:	10 2f       	mov	r17, r16
    6604:	00 27       	eor	r16, r16
		indexaddress += indexlowbyte;
    6606:	0e 0f       	add	r16, r30
    6608:	11 1d       	adc	r17, r1
    660a:	21 1d       	adc	r18, r1
    660c:	31 1d       	adc	r19, r1
		width += pgm_read_byte(&font[indexaddress]) + distance;
    660e:	fb 01       	movw	r30, r22
    6610:	e0 0f       	add	r30, r16
    6612:	f1 1f       	adc	r31, r17
    6614:	04 91       	lpm	r16, Z
    6616:	20 2f       	mov	r18, r16
    6618:	30 e0       	ldi	r19, 0x00	; 0
    661a:	2f 5f       	subi	r18, 0xFF	; 255
    661c:	3f 4f       	sbci	r19, 0xFF	; 255
    661e:	82 0f       	add	r24, r18
    6620:	93 1f       	adc	r25, r19
    6622:	d8 cf       	rjmp	.-80     	; 0x65d4 <mugui_text_sizestring+0x30>
	}

	/* prepare return value */
	size->x = width;
    6624:	fa 01       	movw	r30, r20
    6626:	91 83       	std	Z+1, r25	; 0x01
    6628:	80 83       	st	Z, r24
	size->y = height;
    662a:	f3 82       	std	Z+3, r15	; 0x03
    662c:	e2 82       	std	Z+2, r14	; 0x02
}
    662e:	cd b7       	in	r28, 0x3d	; 61
    6630:	de b7       	in	r29, 0x3e	; 62
    6632:	e7 e0       	ldi	r30, 0x07	; 7
    6634:	0c 94 42 3d 	jmp	0x7a84	; 0x7a84 <__epilogue_restores__+0x16>

00006638 <pgm_mugui_scopy>:
	\date 	30.07.2012
	\Created by D. Thompson
*/
/************************************************************************/
void pgm_mugui_scopy(const char *s)
{
    6638:	ec e4       	ldi	r30, 0x4C	; 76
    663a:	f5 e0       	ldi	r31, 0x05	; 5

	// Clear buffer first
	// Actually two bytes smaller than using memset()
	for (i = 0; i < PBUFFER_SIZE; i++)
	{
		pBuffer[i] = 0x00;
    663c:	11 92       	st	Z+, r1
{
	int i = 0;

	// Clear buffer first
	// Actually two bytes smaller than using memset()
	for (i = 0; i < PBUFFER_SIZE; i++)
    663e:	25 e0       	ldi	r18, 0x05	; 5
    6640:	ec 35       	cpi	r30, 0x5C	; 92
    6642:	f2 07       	cpc	r31, r18
    6644:	d9 f7       	brne	.-10     	; 0x663c <pgm_mugui_scopy+0x4>
    6646:	ac e4       	ldi	r26, 0x4C	; 76
    6648:	b5 e0       	ldi	r27, 0x05	; 5
	{
		pBuffer[i] = 0x00;
	}

	i = 0;
	while(pgm_read_byte(s) != 0x00) 
    664a:	9c 01       	movw	r18, r24
    664c:	fc 01       	movw	r30, r24
    664e:	44 91       	lpm	r20, Z
    6650:	44 23       	and	r20, r20
    6652:	29 f0       	breq	.+10     	; 0x665e <pgm_mugui_scopy+0x26>
	{
		pBuffer[i] = pgm_read_byte(s++);
    6654:	01 96       	adiw	r24, 0x01	; 1
    6656:	f9 01       	movw	r30, r18
    6658:	24 91       	lpm	r18, Z
    665a:	2d 93       	st	X+, r18
    665c:	f6 cf       	rjmp	.-20     	; 0x664a <pgm_mugui_scopy+0x12>
		i++;
	}
}
    665e:	08 95       	ret

00006660 <mugui_lcd_putc>:
	\date 	13.11.2009
	\Modified by D. Thompson 14/08/2012 - Now hard-coded for proportional, type 2 (verticalCeiling)
*/
/************************************************************************/
mugui_uint16_t mugui_lcd_putc(mugui_char_t c, const unsigned char* font,mugui_uint16_t x, mugui_uint16_t y)
{
    6660:	a9 e0       	ldi	r26, 0x09	; 9
    6662:	b0 e0       	ldi	r27, 0x00	; 0
    6664:	e6 e3       	ldi	r30, 0x36	; 54
    6666:	f3 e3       	ldi	r31, 0x33	; 51
    6668:	0c 94 1b 3d 	jmp	0x7a36	; 0x7a36 <__prologue_saves__>
    666c:	4c 83       	std	Y+4, r20	; 0x04
    666e:	2d 83       	std	Y+5, r18	; 0x05
	mugui_uint8_t  tc= 0;	 				//temorary count
	mugui_uint8_t  bytes= 0;  				//bytes per line or row

	/* Read header of the font          */
	/* pgm_read_byte is ATMega specific */
	startcharacter = pgm_read_byte(&font[2]);
    6670:	fb 01       	movw	r30, r22
    6672:	32 96       	adiw	r30, 0x02	; 2
    6674:	94 91       	lpm	r25, Z
	height = pgm_read_byte(&font[4]);
    6676:	32 96       	adiw	r30, 0x02	; 2
    6678:	e4 91       	lpm	r30, Z
    667a:	2e 2e       	mov	r2, r30
    667c:	31 2c       	mov	r3, r1

	/* Read the rest of the header */
	index = c - startcharacter;
    667e:	89 1b       	sub	r24, r25
	indexhighbyte = pgm_read_byte(&font[index*2 + 5]);
    6680:	90 e0       	ldi	r25, 0x00	; 0
    6682:	88 0f       	add	r24, r24
    6684:	99 1f       	adc	r25, r25
    6686:	fc 01       	movw	r30, r24
    6688:	35 96       	adiw	r30, 0x05	; 5
    668a:	e6 0f       	add	r30, r22
    668c:	f7 1f       	adc	r31, r23
    668e:	64 90       	lpm	r6, Z
	indexlowbyte = pgm_read_byte(&font[index*2 + 6]);
    6690:	fc 01       	movw	r30, r24
    6692:	36 96       	adiw	r30, 0x06	; 6
    6694:	e6 0f       	add	r30, r22
    6696:	f7 1f       	adc	r31, r23
    6698:	84 91       	lpm	r24, Z
	indexaddress = (mugui_int64_t)indexhighbyte;
    669a:	06 2d       	mov	r16, r6
    669c:	10 e0       	ldi	r17, 0x00	; 0
    669e:	20 e0       	ldi	r18, 0x00	; 0
    66a0:	30 e0       	ldi	r19, 0x00	; 0
	indexaddress = indexaddress << 8;
    66a2:	32 2f       	mov	r19, r18
    66a4:	21 2f       	mov	r18, r17
    66a6:	10 2f       	mov	r17, r16
    66a8:	00 27       	eor	r16, r16
	indexaddress += indexlowbyte;
    66aa:	08 0f       	add	r16, r24
    66ac:	11 1d       	adc	r17, r1
    66ae:	21 1d       	adc	r18, r1
    66b0:	31 1d       	adc	r19, r1
	width = pgm_read_byte(&font[indexaddress]);
    66b2:	c8 01       	movw	r24, r16
    66b4:	fb 01       	movw	r30, r22
    66b6:	e0 0f       	add	r30, r16
    66b8:	f1 1f       	adc	r31, r17
    66ba:	64 90       	lpm	r6, Z
    66bc:	71 2c       	mov	r7, r1

	/* Determine the number of bytes for given width */ 
	bytes = ((height-1)>>3)+1;
    66be:	21 01       	movw	r4, r2
    66c0:	21 e0       	ldi	r18, 0x01	; 1
    66c2:	42 1a       	sub	r4, r18
    66c4:	51 08       	sbc	r5, r1
    66c6:	13 e0       	ldi	r17, 0x03	; 3
    66c8:	56 94       	lsr	r5
    66ca:	47 94       	ror	r4
    66cc:	1a 95       	dec	r17
    66ce:	e1 f7       	brne	.-8      	; 0x66c8 <mugui_lcd_putc+0x68>
    66d0:	43 94       	inc	r4
    66d2:	a4 2d       	mov	r26, r4
    66d4:	b0 e0       	ldi	r27, 0x00	; 0
    66d6:	ba 83       	std	Y+2, r27	; 0x02
    66d8:	a9 83       	std	Y+1, r26	; 0x01
	/* For every column */
	for(tx= 0; tx < width; tx++) //for every row
    66da:	a1 2c       	mov	r10, r1
    66dc:	b1 2c       	mov	r11, r1
    66de:	00 e0       	ldi	r16, 0x00	; 0
    66e0:	10 e0       	ldi	r17, 0x00	; 0
    66e2:	4b 01       	movw	r8, r22
    66e4:	bf ef       	ldi	r27, 0xFF	; 255
    66e6:	8b 1a       	sub	r8, r27
    66e8:	9b 0a       	sbc	r9, r27
    66ea:	88 0e       	add	r8, r24
    66ec:	99 1e       	adc	r9, r25
    66ee:	06 15       	cp	r16, r6
    66f0:	17 05       	cpc	r17, r7
    66f2:	08 f0       	brcs	.+2      	; 0x66f6 <mugui_lcd_putc+0x96>
    66f4:	43 c0       	rjmp	.+134    	; 0x677c <mugui_lcd_putc+0x11c>
    66f6:	c1 2c       	mov	r12, r1
    66f8:	d1 2c       	mov	r13, r1
    66fa:	e1 2c       	mov	r14, r1
    66fc:	f1 2c       	mov	r15, r1
    66fe:	94 01       	movw	r18, r8
    6700:	2a 0d       	add	r18, r10
    6702:	3b 1d       	adc	r19, r11
    6704:	3f 83       	std	Y+7, r19	; 0x07
    6706:	2e 83       	std	Y+6, r18	; 0x06
    6708:	5c 80       	ldd	r5, Y+4	; 0x04
    670a:	50 0e       	add	r5, r16
	{
		ty = 0;
		/* For every byte */
		for(tb = 0; tb < bytes; tb ++)
    670c:	c4 14       	cp	r12, r4
    670e:	78 f5       	brcc	.+94     	; 0x676e <mugui_lcd_putc+0x10e>
    6710:	ee 81       	ldd	r30, Y+6	; 0x06
    6712:	ff 81       	ldd	r31, Y+7	; 0x07
    6714:	ec 0d       	add	r30, r12
    6716:	fd 1d       	adc	r31, r13
		{
			/* Read bytes from program memory - ATMega specific */
			data = pgm_read_byte(&font[indexaddress + 1 + bytes*tx + tb]);
    6718:	34 91       	lpm	r19, Z
    671a:	3b 83       	std	Y+3, r19	; 0x03
    671c:	19 86       	std	Y+9, r1	; 0x09
    671e:	18 86       	std	Y+8, r1	; 0x08
			/* For every bit within the height */
			for(tc = 0;  ( (tc < 8) && (ty < height) ); tc ++)
    6720:	e2 14       	cp	r14, r2
    6722:	f3 04       	cpc	r15, r3
    6724:	00 f5       	brcc	.+64     	; 0x6766 <mugui_lcd_putc+0x106>
			{
					/* Determine the bit mask */
					mask = 1<<(tc);
    6726:	81 e0       	ldi	r24, 0x01	; 1
    6728:	90 e0       	ldi	r25, 0x00	; 0
    672a:	08 84       	ldd	r0, Y+8	; 0x08
    672c:	02 c0       	rjmp	.+4      	; 0x6732 <mugui_lcd_putc+0xd2>
    672e:	88 0f       	add	r24, r24
    6730:	99 1f       	adc	r25, r25
    6732:	0a 94       	dec	r0
    6734:	e2 f7       	brpl	.-8      	; 0x672e <mugui_lcd_putc+0xce>
					bit = data & mask;
    6736:	3b 81       	ldd	r19, Y+3	; 0x03
    6738:	83 23       	and	r24, r19
    673a:	4d 81       	ldd	r20, Y+5	; 0x05
    673c:	4e 0d       	add	r20, r14
					if(bit)
    673e:	88 23       	and	r24, r24
    6740:	11 f0       	breq	.+4      	; 0x6746 <mugui_lcd_putc+0xe6>
					{
						setpixel(buffer,tx+x,ty+y,1);
    6742:	21 e0       	ldi	r18, 0x01	; 1
    6744:	01 c0       	rjmp	.+2      	; 0x6748 <mugui_lcd_putc+0xe8>
					}
					else
					{
						setpixel(buffer,tx+x,ty+y,0);
    6746:	20 e0       	ldi	r18, 0x00	; 0
    6748:	65 2d       	mov	r22, r5
    674a:	83 e3       	ldi	r24, 0x33	; 51
    674c:	91 e0       	ldi	r25, 0x01	; 1
    674e:	0e 94 cf 1a 	call	0x359e	; 0x359e <setpixel>
					}
					ty++;
    6752:	8f ef       	ldi	r24, 0xFF	; 255
    6754:	e8 1a       	sub	r14, r24
    6756:	f8 0a       	sbc	r15, r24
    6758:	a8 85       	ldd	r26, Y+8	; 0x08
    675a:	b9 85       	ldd	r27, Y+9	; 0x09
    675c:	11 96       	adiw	r26, 0x01	; 1
    675e:	b9 87       	std	Y+9, r27	; 0x09
    6760:	a8 87       	std	Y+8, r26	; 0x08
		for(tb = 0; tb < bytes; tb ++)
		{
			/* Read bytes from program memory - ATMega specific */
			data = pgm_read_byte(&font[indexaddress + 1 + bytes*tx + tb]);
			/* For every bit within the height */
			for(tc = 0;  ( (tc < 8) && (ty < height) ); tc ++)
    6762:	18 97       	sbiw	r26, 0x08	; 8
    6764:	e9 f6       	brne	.-70     	; 0x6720 <mugui_lcd_putc+0xc0>
    6766:	bf ef       	ldi	r27, 0xFF	; 255
    6768:	cb 1a       	sub	r12, r27
    676a:	db 0a       	sbc	r13, r27
    676c:	cf cf       	rjmp	.-98     	; 0x670c <mugui_lcd_putc+0xac>
	width = pgm_read_byte(&font[indexaddress]);

	/* Determine the number of bytes for given width */ 
	bytes = ((height-1)>>3)+1;
	/* For every column */
	for(tx= 0; tx < width; tx++) //for every row
    676e:	0f 5f       	subi	r16, 0xFF	; 255
    6770:	1f 4f       	sbci	r17, 0xFF	; 255
    6772:	e9 81       	ldd	r30, Y+1	; 0x01
    6774:	fa 81       	ldd	r31, Y+2	; 0x02
    6776:	ae 0e       	add	r10, r30
    6778:	bf 1e       	adc	r11, r31
    677a:	b9 cf       	rjmp	.-142    	; 0x66ee <mugui_lcd_putc+0x8e>
			}
		}
	}

	return width;
}
    677c:	c3 01       	movw	r24, r6
    677e:	29 96       	adiw	r28, 0x09	; 9
    6780:	e2 e1       	ldi	r30, 0x12	; 18
    6782:	0c 94 37 3d 	jmp	0x7a6e	; 0x7a6e <__epilogue_restores__>

00006786 <pgm_mugui_lcd_puts>:
	\date 	12.08.2009
	\Modified by D. Thompson 27/07/2012
*/
/************************************************************************/
void pgm_mugui_lcd_puts(const unsigned char* s, const unsigned char* font,mugui_uint16_t x, mugui_uint16_t y)
{
    6786:	a0 e0       	ldi	r26, 0x00	; 0
    6788:	b0 e0       	ldi	r27, 0x00	; 0
    678a:	e9 ec       	ldi	r30, 0xC9	; 201
    678c:	f3 e3       	ldi	r31, 0x33	; 51
    678e:	0c 94 23 3d 	jmp	0x7a46	; 0x7a46 <__prologue_saves__+0x10>
    6792:	ec 01       	movw	r28, r24
    6794:	7b 01       	movw	r14, r22
    6796:	6a 01       	movw	r12, r20
    6798:	59 01       	movw	r10, r18
	mugui_uint8_t distance  = 1;			// Distance between characters
	mugui_uint16_t xpos     = 0;			// Relative xpos of character
    679a:	00 e0       	ldi	r16, 0x00	; 0
    679c:	10 e0       	ldi	r17, 0x00	; 0

	while(pgm_read_byte(s) != 0x00) 
    679e:	ce 01       	movw	r24, r28
    67a0:	fe 01       	movw	r30, r28
    67a2:	24 91       	lpm	r18, Z
    67a4:	22 23       	and	r18, r18
    67a6:	71 f0       	breq	.+28     	; 0x67c4 <pgm_mugui_lcd_puts+0x3e>
	{
		xpos += mugui_lcd_putc(pgm_read_byte(s++), font, x + xpos, y) + distance;
    67a8:	21 96       	adiw	r28, 0x01	; 1
    67aa:	fc 01       	movw	r30, r24
    67ac:	84 91       	lpm	r24, Z
    67ae:	a8 01       	movw	r20, r16
    67b0:	4c 0d       	add	r20, r12
    67b2:	5d 1d       	adc	r21, r13
    67b4:	95 01       	movw	r18, r10
    67b6:	b7 01       	movw	r22, r14
    67b8:	0e 94 30 33 	call	0x6660	; 0x6660 <mugui_lcd_putc>
    67bc:	01 96       	adiw	r24, 0x01	; 1
    67be:	08 0f       	add	r16, r24
    67c0:	19 1f       	adc	r17, r25
    67c2:	ed cf       	rjmp	.-38     	; 0x679e <pgm_mugui_lcd_puts+0x18>
	}
}
    67c4:	cd b7       	in	r28, 0x3d	; 61
    67c6:	de b7       	in	r29, 0x3e	; 62
    67c8:	ea e0       	ldi	r30, 0x0A	; 10
    67ca:	0c 94 3f 3d 	jmp	0x7a7e	; 0x7a7e <__epilogue_restores__+0x10>

000067ce <mugui_lcd_puts>:
	\return void
	\date 	12.08.2009
*/
/************************************************************************/
void mugui_lcd_puts(mugui_char_t *s, const unsigned char* font,mugui_uint16_t x, mugui_uint16_t y)
{
    67ce:	a0 e0       	ldi	r26, 0x00	; 0
    67d0:	b0 e0       	ldi	r27, 0x00	; 0
    67d2:	ed ee       	ldi	r30, 0xED	; 237
    67d4:	f3 e3       	ldi	r31, 0x33	; 51
    67d6:	0c 94 21 3d 	jmp	0x7a42	; 0x7a42 <__prologue_saves__+0xc>
    67da:	6b 01       	movw	r12, r22
    67dc:	5a 01       	movw	r10, r20
    67de:	49 01       	movw	r8, r18
	mugui_uint8_t distance  = 1;			//distance between characters
	mugui_uint16_t xpos     = 0;			//relativ xpos of character
	mugui_uint16_t length 	= 0;			//temporary length of string
	mugui_uint16_t i 		= 0;			//counter variable
	
	length = strlen(s);
    67e0:	ec 01       	movw	r28, r24
    67e2:	09 90       	ld	r0, Y+
    67e4:	00 20       	and	r0, r0
    67e6:	e9 f7       	brne	.-6      	; 0x67e2 <mugui_lcd_puts+0x14>
    67e8:	8c 01       	movw	r16, r24
    67ea:	21 97       	sbiw	r28, 0x01	; 1
*/
/************************************************************************/
void mugui_lcd_puts(mugui_char_t *s, const unsigned char* font,mugui_uint16_t x, mugui_uint16_t y)
{
	mugui_uint8_t distance  = 1;			//distance between characters
	mugui_uint16_t xpos     = 0;			//relativ xpos of character
    67ec:	e1 2c       	mov	r14, r1
    67ee:	f1 2c       	mov	r15, r1
	mugui_uint16_t length 	= 0;			//temporary length of string
	mugui_uint16_t i 		= 0;			//counter variable
	
	length = strlen(s);
	for(i=0; i<length; i++)
    67f0:	0c 17       	cp	r16, r28
    67f2:	1d 07       	cpc	r17, r29
    67f4:	71 f0       	breq	.+28     	; 0x6812 <mugui_lcd_puts+0x44>
	{
		xpos += mugui_lcd_putc(s[i], font, x + xpos, y) + distance;
    67f6:	a7 01       	movw	r20, r14
    67f8:	4a 0d       	add	r20, r10
    67fa:	5b 1d       	adc	r21, r11
    67fc:	94 01       	movw	r18, r8
    67fe:	b6 01       	movw	r22, r12
    6800:	f8 01       	movw	r30, r16
    6802:	81 91       	ld	r24, Z+
    6804:	8f 01       	movw	r16, r30
    6806:	0e 94 30 33 	call	0x6660	; 0x6660 <mugui_lcd_putc>
    680a:	01 96       	adiw	r24, 0x01	; 1
    680c:	e8 0e       	add	r14, r24
    680e:	f9 1e       	adc	r15, r25
    6810:	ef cf       	rjmp	.-34     	; 0x67f0 <mugui_lcd_puts+0x22>
	}
}
    6812:	cd b7       	in	r28, 0x3d	; 61
    6814:	de b7       	in	r29, 0x3e	; 62
    6816:	ec e0       	ldi	r30, 0x0C	; 12
    6818:	0c 94 3d 3d 	jmp	0x7a7a	; 0x7a7a <__epilogue_restores__+0xc>

0000681c <Calculate_PID>:
int16_t PID_Gyros[FLIGHT_MODES][NUMBEROFAXIS];
int16_t PID_ACCs[FLIGHT_MODES][NUMBEROFAXIS];
int32_t	IntegralGyro[FLIGHT_MODES][NUMBEROFAXIS];	// PID I-terms (gyro) for each axis

void Calculate_PID(void)
{
    681c:	a1 e6       	ldi	r26, 0x61	; 97
    681e:	b0 e0       	ldi	r27, 0x00	; 0
    6820:	e4 e1       	ldi	r30, 0x14	; 20
    6822:	f4 e3       	ldi	r31, 0x34	; 52
    6824:	0c 94 1b 3d 	jmp	0x7a36	; 0x7a36 <__prologue_saves__>
	// So why is AILERON different? Well on the KK hardware the sensors are arranged such that
	// RIGHT roll = +ve gyro, UP pitch = +ve gyro and LEFT yaw = +ve gyro.
	// However the way we have organised stick polarity, RIGHT roll and yaw are +ve, and DOWN elevator is too.
	// When combining with the gyro signals, the sticks have to be in the opposite polarity as the gyros.
	// As described above, pitch and yaw are already opposed, but roll needs to be reversed.
	int16_t	RCinputsAxis[NUMBEROFAXIS] = {-RCinputs[AILERON], RCinputs[ELEVATOR], RCinputs[RUDDER]}; 
    6828:	80 91 a1 07 	lds	r24, 0x07A1
    682c:	90 91 a2 07 	lds	r25, 0x07A2
    6830:	91 95       	neg	r25
    6832:	81 95       	neg	r24
    6834:	91 09       	sbc	r25, r1
    6836:	9a a3       	std	Y+34, r25	; 0x22
    6838:	89 a3       	std	Y+33, r24	; 0x21
    683a:	80 91 a3 07 	lds	r24, 0x07A3
    683e:	90 91 a4 07 	lds	r25, 0x07A4
    6842:	9c a3       	std	Y+36, r25	; 0x24
    6844:	8b a3       	std	Y+35, r24	; 0x23
    6846:	80 91 a5 07 	lds	r24, 0x07A5
    684a:	90 91 a6 07 	lds	r25, 0x07A6
    684e:	9e a3       	std	Y+38, r25	; 0x26
    6850:	8d a3       	std	Y+37, r24	; 0x25

	// Initialise arrays with gain values.
	int8_t 	P_gain[FLIGHT_MODES][NUMBEROFAXIS] = 
    6852:	80 91 b1 05 	lds	r24, 0x05B1
    6856:	8b 8f       	std	Y+27, r24	; 0x1b
    6858:	80 91 b7 05 	lds	r24, 0x05B7
    685c:	8c 8f       	std	Y+28, r24	; 0x1c
    685e:	80 91 bd 05 	lds	r24, 0x05BD
    6862:	8d 8f       	std	Y+29, r24	; 0x1d
    6864:	80 91 c3 05 	lds	r24, 0x05C3
    6868:	8e 8f       	std	Y+30, r24	; 0x1e
    686a:	80 91 c9 05 	lds	r24, 0x05C9
    686e:	8f 8f       	std	Y+31, r24	; 0x1f
    6870:	80 91 cf 05 	lds	r24, 0x05CF
    6874:	88 a3       	std	Y+32, r24	; 0x20
		{
			{Config.FlightMode[P1].Roll_P_mult, Config.FlightMode[P1].Pitch_P_mult, Config.FlightMode[P1].Yaw_P_mult},
		 	{Config.FlightMode[P2].Roll_P_mult, Config.FlightMode[P2].Pitch_P_mult, Config.FlightMode[P2].Yaw_P_mult}
		};

	int8_t 	I_gain[FLIGHT_MODES][NUMBEROFAXIS] = 
    6876:	80 91 b2 05 	lds	r24, 0x05B2
    687a:	8d 8b       	std	Y+21, r24	; 0x15
    687c:	80 91 b8 05 	lds	r24, 0x05B8
    6880:	8e 8b       	std	Y+22, r24	; 0x16
    6882:	80 91 be 05 	lds	r24, 0x05BE
    6886:	8f 8b       	std	Y+23, r24	; 0x17
    6888:	80 91 c4 05 	lds	r24, 0x05C4
    688c:	88 8f       	std	Y+24, r24	; 0x18
    688e:	80 91 ca 05 	lds	r24, 0x05CA
    6892:	89 8f       	std	Y+25, r24	; 0x19
    6894:	80 91 d0 05 	lds	r24, 0x05D0
    6898:	8a 8f       	std	Y+26, r24	; 0x1a
		{
			{Config.FlightMode[P1].Roll_I_mult, Config.FlightMode[P1].Pitch_I_mult, Config.FlightMode[P1].Yaw_I_mult},
			{Config.FlightMode[P2].Roll_I_mult, Config.FlightMode[P2].Pitch_I_mult, Config.FlightMode[P2].Yaw_I_mult}
		};

	int8_t 	D_gain[FLIGHT_MODES][NUMBEROFAXIS] =  
    689a:	80 91 b4 05 	lds	r24, 0x05B4
    689e:	8f 87       	std	Y+15, r24	; 0x0f
    68a0:	80 91 ba 05 	lds	r24, 0x05BA
    68a4:	88 8b       	std	Y+16, r24	; 0x10
    68a6:	80 91 c0 05 	lds	r24, 0x05C0
    68aa:	89 8b       	std	Y+17, r24	; 0x11
    68ac:	80 91 c6 05 	lds	r24, 0x05C6
    68b0:	8a 8b       	std	Y+18, r24	; 0x12
    68b2:	80 91 cc 05 	lds	r24, 0x05CC
    68b6:	8b 8b       	std	Y+19, r24	; 0x13
    68b8:	80 91 d2 05 	lds	r24, 0x05D2
    68bc:	8c 8b       	std	Y+20, r24	; 0x14
		{
			{Config.FlightMode[P1].Roll_D_mult, Config.FlightMode[P1].Pitch_D_mult, Config.FlightMode[P1].Yaw_D_mult},
			{Config.FlightMode[P2].Roll_D_mult, Config.FlightMode[P2].Pitch_D_mult, Config.FlightMode[P2].Yaw_D_mult}
		};

	int8_t 	L_gain[FLIGHT_MODES][NUMBEROFAXIS] = 
    68be:	80 91 b5 05 	lds	r24, 0x05B5
    68c2:	89 87       	std	Y+9, r24	; 0x09
    68c4:	80 91 bb 05 	lds	r24, 0x05BB
    68c8:	8a 87       	std	Y+10, r24	; 0x0a
		{
			{Config.FlightMode[P1].A_Roll_P_mult, Config.FlightMode[P1].A_Pitch_P_mult, Config.FlightMode[P1].A_Zed_P_mult},
    68ca:	40 90 c2 05 	lds	r4, 0x05C2
    68ce:	26 96       	adiw	r28, 0x06	; 6
    68d0:	4f ae       	std	Y+63, r4	; 0x3f
    68d2:	26 97       	sbiw	r28, 0x06	; 6
		{
			{Config.FlightMode[P1].Roll_D_mult, Config.FlightMode[P1].Pitch_D_mult, Config.FlightMode[P1].Yaw_D_mult},
			{Config.FlightMode[P2].Roll_D_mult, Config.FlightMode[P2].Pitch_D_mult, Config.FlightMode[P2].Yaw_D_mult}
		};

	int8_t 	L_gain[FLIGHT_MODES][NUMBEROFAXIS] = 
    68d4:	4b 86       	std	Y+11, r4	; 0x0b
    68d6:	80 91 c7 05 	lds	r24, 0x05C7
    68da:	8c 87       	std	Y+12, r24	; 0x0c
    68dc:	80 91 cd 05 	lds	r24, 0x05CD
    68e0:	8d 87       	std	Y+13, r24	; 0x0d
		{
			{Config.FlightMode[P1].A_Roll_P_mult, Config.FlightMode[P1].A_Pitch_P_mult, Config.FlightMode[P1].A_Zed_P_mult},
			{Config.FlightMode[P2].A_Roll_P_mult, Config.FlightMode[P2].A_Pitch_P_mult, Config.FlightMode[P2].A_Zed_P_mult}
    68e2:	50 90 d4 05 	lds	r5, 0x05D4
    68e6:	27 96       	adiw	r28, 0x07	; 7
    68e8:	5f ae       	std	Y+63, r5	; 0x3f
    68ea:	27 97       	sbiw	r28, 0x07	; 7
		{
			{Config.FlightMode[P1].Roll_D_mult, Config.FlightMode[P1].Pitch_D_mult, Config.FlightMode[P1].Yaw_D_mult},
			{Config.FlightMode[P2].Roll_D_mult, Config.FlightMode[P2].Pitch_D_mult, Config.FlightMode[P2].Yaw_D_mult}
		};

	int8_t 	L_gain[FLIGHT_MODES][NUMBEROFAXIS] = 
    68ec:	5e 86       	std	Y+14, r5	; 0x0e
			{Config.FlightMode[P1].A_Roll_P_mult, Config.FlightMode[P1].A_Pitch_P_mult, Config.FlightMode[P1].A_Zed_P_mult},
			{Config.FlightMode[P2].A_Roll_P_mult, Config.FlightMode[P2].A_Pitch_P_mult, Config.FlightMode[P2].A_Zed_P_mult}
		};

	// Only for roll and pitch acc trim
	int16_t	L_trim[FLIGHT_MODES][2] =
    68ee:	80 91 34 07 	lds	r24, 0x0734
    68f2:	90 91 35 07 	lds	r25, 0x0735
    68f6:	9a 83       	std	Y+2, r25	; 0x02
    68f8:	89 83       	std	Y+1, r24	; 0x01
    68fa:	80 91 38 07 	lds	r24, 0x0738
    68fe:	90 91 39 07 	lds	r25, 0x0739
    6902:	9c 83       	std	Y+4, r25	; 0x04
    6904:	8b 83       	std	Y+3, r24	; 0x03
    6906:	80 91 36 07 	lds	r24, 0x0736
    690a:	90 91 37 07 	lds	r25, 0x0737
    690e:	9e 83       	std	Y+6, r25	; 0x06
    6910:	8d 83       	std	Y+5, r24	; 0x05
    6912:	80 91 3a 07 	lds	r24, 0x073A
    6916:	90 91 3b 07 	lds	r25, 0x073B
    691a:	98 87       	std	Y+8, r25	; 0x08
    691c:	8f 83       	std	Y+7, r24	; 0x07
		// Increment and limit gyro I-terms, handle heading hold nicely
		//************************************************************

		// Work out stick rate divider. 0 is fastest, 4 is slowest.
		// /64 (15), /32 (30), /16 (60*), /8 (120), /4 (240)
		stick = RCinputsAxis[axis] >> (Config.Stick_Lock_rate + 2);
    691e:	80 91 ae 05 	lds	r24, 0x05AE
    6922:	68 2e       	mov	r6, r24
    6924:	77 24       	eor	r7, r7
    6926:	67 fc       	sbrc	r6, 7
    6928:	70 94       	com	r7
    692a:	f3 01       	movw	r30, r6
    692c:	32 96       	adiw	r30, 0x02	; 2
    692e:	fe af       	std	Y+62, r31	; 0x3e
    6930:	ed af       	std	Y+61, r30	; 0x3d
		// Add in gyro Yaw trim
		//************************************************************

		if (axis == YAW)
		{
			PID_gyro_temp1 = (int32_t)(Config.FlightMode[P1].Yaw_trim << 6);
    6932:	80 91 c1 05 	lds	r24, 0x05C1
    6936:	f0 e4       	ldi	r31, 0x40	; 64
    6938:	8f 02       	muls	r24, r31
    693a:	c0 01       	movw	r24, r0
    693c:	11 24       	eor	r1, r1
    693e:	2c 01       	movw	r4, r24
    6940:	66 24       	eor	r6, r6
    6942:	57 fc       	sbrc	r5, 7
    6944:	60 94       	com	r6
    6946:	76 2c       	mov	r7, r6
    6948:	6e 96       	adiw	r28, 0x1e	; 30
    694a:	4c ae       	std	Y+60, r4	; 0x3c
    694c:	5d ae       	std	Y+61, r5	; 0x3d
    694e:	6e ae       	std	Y+62, r6	; 0x3e
    6950:	7f ae       	std	Y+63, r7	; 0x3f
    6952:	6e 97       	sbiw	r28, 0x1e	; 30
			PID_gyro_temp2 = (int32_t)(Config.FlightMode[P2].Yaw_trim << 6);
    6954:	80 91 d3 05 	lds	r24, 0x05D3
    6958:	20 e4       	ldi	r18, 0x40	; 64
    695a:	82 02       	muls	r24, r18
    695c:	c0 01       	movw	r24, r0
    695e:	11 24       	eor	r1, r1
    6960:	2c 01       	movw	r4, r24
    6962:	66 24       	eor	r6, r6
    6964:	57 fc       	sbrc	r5, 7
    6966:	60 94       	com	r6
    6968:	76 2c       	mov	r7, r6
    696a:	a2 96       	adiw	r28, 0x22	; 34
    696c:	4c ae       	std	Y+60, r4	; 0x3c
    696e:	5d ae       	std	Y+61, r5	; 0x3d
    6970:	6e ae       	std	Y+62, r6	; 0x3e
    6972:	7f ae       	std	Y+63, r7	; 0x3f
    6974:	a2 97       	sbiw	r28, 0x22	; 34
    6976:	e0 e6       	ldi	r30, 0x60	; 96
    6978:	f5 e0       	ldi	r31, 0x05	; 5
    697a:	fa ab       	std	Y+50, r31	; 0x32
    697c:	e9 ab       	std	Y+49, r30	; 0x31
    697e:	e5 e8       	ldi	r30, 0x85	; 133
    6980:	f7 e0       	ldi	r31, 0x07	; 7
    6982:	fc ab       	std	Y+52, r31	; 0x34
    6984:	eb ab       	std	Y+51, r30	; 0x33
    6986:	ea e6       	ldi	r30, 0x6A	; 106
    6988:	f5 e0       	ldi	r31, 0x05	; 5
    698a:	23 96       	adiw	r28, 0x03	; 3
    698c:	ff af       	std	Y+63, r31	; 0x3f
    698e:	ee af       	std	Y+62, r30	; 0x3e
    6990:	23 97       	sbiw	r28, 0x03	; 3
    6992:	fe 01       	movw	r30, r28
    6994:	31 96       	adiw	r30, 0x01	; 1
    6996:	fa af       	std	Y+58, r31	; 0x3a
    6998:	e9 af       	std	Y+57, r30	; 0x39
    699a:	e1 e9       	ldi	r30, 0x91	; 145
    699c:	f7 e0       	ldi	r31, 0x07	; 7
    699e:	fc af       	std	Y+60, r31	; 0x3c
    69a0:	eb af       	std	Y+59, r30	; 0x3b
    69a2:	fe 01       	movw	r30, r28
    69a4:	3c 96       	adiw	r30, 0x0c	; 12
    69a6:	25 96       	adiw	r28, 0x05	; 5
    69a8:	ff af       	std	Y+63, r31	; 0x3f
    69aa:	ee af       	std	Y+62, r30	; 0x3e
    69ac:	25 97       	sbiw	r28, 0x05	; 5
    69ae:	e1 ee       	ldi	r30, 0xE1	; 225
    69b0:	f5 e0       	ldi	r31, 0x05	; 5
    69b2:	69 96       	adiw	r28, 0x19	; 25
    69b4:	ff af       	std	Y+63, r31	; 0x3f
    69b6:	ee af       	std	Y+62, r30	; 0x3e
    69b8:	69 97       	sbiw	r28, 0x19	; 25
    69ba:	ee e7       	ldi	r30, 0x7E	; 126
    69bc:	f5 e0       	ldi	r31, 0x05	; 5
    69be:	f8 af       	std	Y+56, r31	; 0x38
    69c0:	ef ab       	std	Y+55, r30	; 0x37
    69c2:	fe 01       	movw	r30, r28
    69c4:	7b 96       	adiw	r30, 0x1b	; 27
    69c6:	67 96       	adiw	r28, 0x17	; 23
    69c8:	ff af       	std	Y+63, r31	; 0x3f
    69ca:	ee af       	std	Y+62, r30	; 0x3e
    69cc:	67 97       	sbiw	r28, 0x17	; 23
    69ce:	bd e6       	ldi	r27, 0x6D	; 109
    69d0:	2b 2e       	mov	r2, r27
    69d2:	b7 e0       	ldi	r27, 0x07	; 7
    69d4:	3b 2e       	mov	r3, r27
    69d6:	36 97       	sbiw	r30, 0x06	; 6
    69d8:	65 96       	adiw	r28, 0x15	; 21
    69da:	ff af       	std	Y+63, r31	; 0x3f
    69dc:	ee af       	std	Y+62, r30	; 0x3e
    69de:	65 97       	sbiw	r28, 0x15	; 21
    69e0:	e5 e2       	ldi	r30, 0x25	; 37
    69e2:	f1 e0       	ldi	r31, 0x01	; 1
    69e4:	fe ab       	std	Y+54, r31	; 0x36
    69e6:	ed ab       	std	Y+53, r30	; 0x35
    69e8:	fe 01       	movw	r30, r28
    69ea:	3f 96       	adiw	r30, 0x0f	; 15
    69ec:	63 96       	adiw	r28, 0x13	; 19
    69ee:	ff af       	std	Y+63, r31	; 0x3f
    69f0:	ee af       	std	Y+62, r30	; 0x3e
    69f2:	63 97       	sbiw	r28, 0x13	; 19
    69f4:	3f 96       	adiw	r30, 0x0f	; 15
    69f6:	61 96       	adiw	r28, 0x11	; 17
    69f8:	ff af       	std	Y+63, r31	; 0x3f
    69fa:	ee af       	std	Y+62, r30	; 0x3e
    69fc:	61 97       	sbiw	r28, 0x11	; 17
    69fe:	36 97       	sbiw	r30, 0x06	; 6
    6a00:	2f 96       	adiw	r28, 0x0f	; 15
    6a02:	ff af       	std	Y+63, r31	; 0x3f
    6a04:	ee af       	std	Y+62, r30	; 0x3e
    6a06:	2f 97       	sbiw	r28, 0x0f	; 15
    6a08:	36 97       	sbiw	r30, 0x06	; 6
    6a0a:	2d 96       	adiw	r28, 0x0d	; 13
    6a0c:	ff af       	std	Y+63, r31	; 0x3f
    6a0e:	ee af       	std	Y+62, r30	; 0x3e
    6a10:	2d 97       	sbiw	r28, 0x0d	; 13
    6a12:	e5 ed       	ldi	r30, 0xD5	; 213
    6a14:	f5 e0       	ldi	r31, 0x05	; 5
    6a16:	2b 96       	adiw	r28, 0x0b	; 11
    6a18:	ff af       	std	Y+63, r31	; 0x3f
    6a1a:	ee af       	std	Y+62, r30	; 0x3e
    6a1c:	2b 97       	sbiw	r28, 0x0b	; 11
    6a1e:	fe 01       	movw	r30, r28
    6a20:	b1 96       	adiw	r30, 0x21	; 33
    6a22:	29 96       	adiw	r28, 0x09	; 9
    6a24:	ff af       	std	Y+63, r31	; 0x3f
    6a26:	ee af       	std	Y+62, r30	; 0x3e
    6a28:	29 97       	sbiw	r28, 0x09	; 9
    6a2a:	18 aa       	std	Y+48, r1	; 0x30
    6a2c:	1f a6       	std	Y+47, r1	; 0x2f
		//************************************************************
		// Filter and calculate gyro error
		//************************************************************

		// Reduce Gyro drift noise before adding into I-term
		if ((gyroADC[axis] > -GYRO_DEADBAND) && (gyroADC[axis] < GYRO_DEADBAND)) 
    6a2e:	e9 a9       	ldd	r30, Y+49	; 0x31
    6a30:	fa a9       	ldd	r31, Y+50	; 0x32
    6a32:	80 81       	ld	r24, Z
    6a34:	91 81       	ldd	r25, Z+1	; 0x01
    6a36:	04 96       	adiw	r24, 0x04	; 4
    6a38:	09 97       	sbiw	r24, 0x09	; 9
    6a3a:	10 f4       	brcc	.+4      	; 0x6a40 <Calculate_PID+0x224>
		{
			gyroADC[axis] = 0;
    6a3c:	11 82       	std	Z+1, r1	; 0x01
    6a3e:	10 82       	st	Z, r1
		// Increment and limit gyro I-terms, handle heading hold nicely
		//************************************************************

		// Work out stick rate divider. 0 is fastest, 4 is slowest.
		// /64 (15), /32 (30), /16 (60*), /8 (120), /4 (240)
		stick = RCinputsAxis[axis] >> (Config.Stick_Lock_rate + 2);
    6a40:	29 96       	adiw	r28, 0x09	; 9
    6a42:	ee ad       	ldd	r30, Y+62	; 0x3e
    6a44:	ff ad       	ldd	r31, Y+63	; 0x3f
    6a46:	29 97       	sbiw	r28, 0x09	; 9
    6a48:	81 91       	ld	r24, Z+
    6a4a:	91 91       	ld	r25, Z+
    6a4c:	29 96       	adiw	r28, 0x09	; 9
    6a4e:	ff af       	std	Y+63, r31	; 0x3f
    6a50:	ee af       	std	Y+62, r30	; 0x3e
    6a52:	29 97       	sbiw	r28, 0x09	; 9

		// Calculate I-term from gyro and stick data 
		// These may look identical, but they are constrained quite differently.
		IntegralGyro[P1][axis] += (gyroADC[axis] + stick);
    6a54:	e9 a9       	ldd	r30, Y+49	; 0x31
    6a56:	fa a9       	ldd	r31, Y+50	; 0x32
    6a58:	00 81       	ld	r16, Z
    6a5a:	11 81       	ldd	r17, Z+1	; 0x01
		// Increment and limit gyro I-terms, handle heading hold nicely
		//************************************************************

		// Work out stick rate divider. 0 is fastest, 4 is slowest.
		// /64 (15), /32 (30), /16 (60*), /8 (120), /4 (240)
		stick = RCinputsAxis[axis] >> (Config.Stick_Lock_rate + 2);
    6a5c:	4c 01       	movw	r8, r24
    6a5e:	0d ac       	ldd	r0, Y+61	; 0x3d
    6a60:	02 c0       	rjmp	.+4      	; 0x6a66 <Calculate_PID+0x24a>
    6a62:	95 94       	asr	r9
    6a64:	87 94       	ror	r8
    6a66:	0a 94       	dec	r0
    6a68:	e2 f7       	brpl	.-8      	; 0x6a62 <Calculate_PID+0x246>

		// Calculate I-term from gyro and stick data 
		// These may look identical, but they are constrained quite differently.
		IntegralGyro[P1][axis] += (gyroADC[axis] + stick);
    6a6a:	80 0e       	add	r8, r16
    6a6c:	91 1e       	adc	r9, r17
    6a6e:	aa 24       	eor	r10, r10
    6a70:	97 fc       	sbrc	r9, 7
    6a72:	a0 94       	com	r10
    6a74:	ba 2c       	mov	r11, r10
    6a76:	d1 01       	movw	r26, r2
    6a78:	4d 91       	ld	r20, X+
    6a7a:	5d 91       	ld	r21, X+
    6a7c:	6d 91       	ld	r22, X+
    6a7e:	7c 91       	ld	r23, X
    6a80:	13 97       	sbiw	r26, 0x03	; 3
    6a82:	48 0d       	add	r20, r8
    6a84:	59 1d       	adc	r21, r9
    6a86:	6a 1d       	adc	r22, r10
    6a88:	7b 1d       	adc	r23, r11
    6a8a:	f1 01       	movw	r30, r2
    6a8c:	40 83       	st	Z, r20
    6a8e:	51 83       	std	Z+1, r21	; 0x01
    6a90:	62 83       	std	Z+2, r22	; 0x02
    6a92:	73 83       	std	Z+3, r23	; 0x03
		IntegralGyro[P2][axis] += (gyroADC[axis] + stick);
    6a94:	c4 84       	ldd	r12, Z+12	; 0x0c
    6a96:	d5 84       	ldd	r13, Z+13	; 0x0d
    6a98:	e6 84       	ldd	r14, Z+14	; 0x0e
    6a9a:	f7 84       	ldd	r15, Z+15	; 0x0f
    6a9c:	c8 0c       	add	r12, r8
    6a9e:	d9 1c       	adc	r13, r9
    6aa0:	ea 1c       	adc	r14, r10
    6aa2:	fb 1c       	adc	r15, r11
    6aa4:	1c 96       	adiw	r26, 0x0c	; 12
    6aa6:	cd 92       	st	X+, r12
    6aa8:	dd 92       	st	X+, r13
    6aaa:	ed 92       	st	X+, r14
    6aac:	fc 92       	st	X, r15
    6aae:	1f 97       	sbiw	r26, 0x0f	; 15

		// Limit the I-terms when you need to adjust the I-term with RC
		// Note that the I-term is not constrained when no RC input is present.
		if (RCinputsAxis[axis] != 0)
    6ab0:	89 2b       	or	r24, r25
    6ab2:	71 f4       	brne	.+28     	; 0x6ad0 <Calculate_PID+0x2b4>
    6ab4:	ef a5       	ldd	r30, Y+47	; 0x2f
    6ab6:	6a 96       	adiw	r28, 0x1a	; 26
    6ab8:	ef af       	std	Y+63, r30	; 0x3f
    6aba:	6a 97       	sbiw	r28, 0x1a	; 26

		//************************************************************
		// Add in gyro Yaw trim
		//************************************************************

		if (axis == YAW)
    6abc:	e2 30       	cpi	r30, 0x02	; 2
    6abe:	09 f4       	brne	.+2      	; 0x6ac2 <Calculate_PID+0x2a6>
    6ac0:	5b c0       	rjmp	.+182    	; 0x6b78 <Calculate_PID+0x35c>
		}
		// Reset PID_gyro variables to that data does not accumulate cross-axis
		else
		{
			PID_gyro_temp1 = 0;
			PID_gyro_temp2 = 0;
    6ac2:	c1 2c       	mov	r12, r1
    6ac4:	d1 2c       	mov	r13, r1
    6ac6:	76 01       	movw	r14, r12
			PID_gyro_temp2 = (int32_t)(Config.FlightMode[P2].Yaw_trim << 6);
		}
		// Reset PID_gyro variables to that data does not accumulate cross-axis
		else
		{
			PID_gyro_temp1 = 0;
    6ac8:	80 e0       	ldi	r24, 0x00	; 0
    6aca:	90 e0       	ldi	r25, 0x00	; 0
    6acc:	dc 01       	movw	r26, r24
    6ace:	60 c0       	rjmp	.+192    	; 0x6b90 <Calculate_PID+0x374>
    6ad0:	ef a9       	ldd	r30, Y+55	; 0x37
    6ad2:	f8 ad       	ldd	r31, Y+56	; 0x38
    6ad4:	e1 59       	subi	r30, 0x91	; 145
    6ad6:	ff 4f       	sbci	r31, 0xFF	; 255
		// Note that the I-term is not constrained when no RC input is present.
		if (RCinputsAxis[axis] != 0)
		{
			for (i = P1; i <= P2; i++)
			{
				if (IntegralGyro[i][axis] > Config.Raw_I_Constrain[i][axis])
    6ad8:	80 81       	ld	r24, Z
    6ada:	91 81       	ldd	r25, Z+1	; 0x01
    6adc:	a2 81       	ldd	r26, Z+2	; 0x02
    6ade:	b3 81       	ldd	r27, Z+3	; 0x03
    6ae0:	84 17       	cp	r24, r20
    6ae2:	95 07       	cpc	r25, r21
    6ae4:	a6 07       	cpc	r26, r22
    6ae6:	b7 07       	cpc	r27, r23
    6ae8:	2c f4       	brge	.+10     	; 0x6af4 <Calculate_PID+0x2d8>
				{
					IntegralGyro[i][axis] = Config.Raw_I_Constrain[i][axis];
    6aea:	f1 01       	movw	r30, r2
    6aec:	80 83       	st	Z, r24
    6aee:	91 83       	std	Z+1, r25	; 0x01
    6af0:	a2 83       	std	Z+2, r26	; 0x02
    6af2:	b3 83       	std	Z+3, r27	; 0x03
				}
				if (IntegralGyro[i][axis] < -Config.Raw_I_Constrain[i][axis])
    6af4:	b0 95       	com	r27
    6af6:	a0 95       	com	r26
    6af8:	90 95       	com	r25
    6afa:	81 95       	neg	r24
    6afc:	9f 4f       	sbci	r25, 0xFF	; 255
    6afe:	af 4f       	sbci	r26, 0xFF	; 255
    6b00:	bf 4f       	sbci	r27, 0xFF	; 255
    6b02:	f1 01       	movw	r30, r2
    6b04:	40 81       	ld	r20, Z
    6b06:	51 81       	ldd	r21, Z+1	; 0x01
    6b08:	62 81       	ldd	r22, Z+2	; 0x02
    6b0a:	73 81       	ldd	r23, Z+3	; 0x03
    6b0c:	48 17       	cp	r20, r24
    6b0e:	59 07       	cpc	r21, r25
    6b10:	6a 07       	cpc	r22, r26
    6b12:	7b 07       	cpc	r23, r27
    6b14:	24 f4       	brge	.+8      	; 0x6b1e <Calculate_PID+0x302>
				{
					IntegralGyro[i][axis] = -Config.Raw_I_Constrain[i][axis];
    6b16:	80 83       	st	Z, r24
    6b18:	91 83       	std	Z+1, r25	; 0x01
    6b1a:	a2 83       	std	Z+2, r26	; 0x02
    6b1c:	b3 83       	std	Z+3, r27	; 0x03
    6b1e:	ef a9       	ldd	r30, Y+55	; 0x37
    6b20:	f8 ad       	ldd	r31, Y+56	; 0x38
    6b22:	e5 58       	subi	r30, 0x85	; 133
    6b24:	ff 4f       	sbci	r31, 0xFF	; 255
		// Note that the I-term is not constrained when no RC input is present.
		if (RCinputsAxis[axis] != 0)
		{
			for (i = P1; i <= P2; i++)
			{
				if (IntegralGyro[i][axis] > Config.Raw_I_Constrain[i][axis])
    6b26:	80 81       	ld	r24, Z
    6b28:	91 81       	ldd	r25, Z+1	; 0x01
    6b2a:	a2 81       	ldd	r26, Z+2	; 0x02
    6b2c:	b3 81       	ldd	r27, Z+3	; 0x03
    6b2e:	f1 01       	movw	r30, r2
    6b30:	44 85       	ldd	r20, Z+12	; 0x0c
    6b32:	55 85       	ldd	r21, Z+13	; 0x0d
    6b34:	66 85       	ldd	r22, Z+14	; 0x0e
    6b36:	77 85       	ldd	r23, Z+15	; 0x0f
    6b38:	84 17       	cp	r24, r20
    6b3a:	95 07       	cpc	r25, r21
    6b3c:	a6 07       	cpc	r26, r22
    6b3e:	b7 07       	cpc	r27, r23
    6b40:	24 f4       	brge	.+8      	; 0x6b4a <Calculate_PID+0x32e>
				{
					IntegralGyro[i][axis] = Config.Raw_I_Constrain[i][axis];
    6b42:	84 87       	std	Z+12, r24	; 0x0c
    6b44:	95 87       	std	Z+13, r25	; 0x0d
    6b46:	a6 87       	std	Z+14, r26	; 0x0e
    6b48:	b7 87       	std	Z+15, r27	; 0x0f
				}
				if (IntegralGyro[i][axis] < -Config.Raw_I_Constrain[i][axis])
    6b4a:	b0 95       	com	r27
    6b4c:	a0 95       	com	r26
    6b4e:	90 95       	com	r25
    6b50:	81 95       	neg	r24
    6b52:	9f 4f       	sbci	r25, 0xFF	; 255
    6b54:	af 4f       	sbci	r26, 0xFF	; 255
    6b56:	bf 4f       	sbci	r27, 0xFF	; 255
    6b58:	f1 01       	movw	r30, r2
    6b5a:	44 85       	ldd	r20, Z+12	; 0x0c
    6b5c:	55 85       	ldd	r21, Z+13	; 0x0d
    6b5e:	66 85       	ldd	r22, Z+14	; 0x0e
    6b60:	77 85       	ldd	r23, Z+15	; 0x0f
    6b62:	48 17       	cp	r20, r24
    6b64:	59 07       	cpc	r21, r25
    6b66:	6a 07       	cpc	r22, r26
    6b68:	7b 07       	cpc	r23, r27
    6b6a:	0c f0       	brlt	.+2      	; 0x6b6e <Calculate_PID+0x352>
    6b6c:	a3 cf       	rjmp	.-186    	; 0x6ab4 <Calculate_PID+0x298>
				{
					IntegralGyro[i][axis] = -Config.Raw_I_Constrain[i][axis];
    6b6e:	84 87       	std	Z+12, r24	; 0x0c
    6b70:	95 87       	std	Z+13, r25	; 0x0d
    6b72:	a6 87       	std	Z+14, r26	; 0x0e
    6b74:	b7 87       	std	Z+15, r27	; 0x0f
    6b76:	9e cf       	rjmp	.-196    	; 0x6ab4 <Calculate_PID+0x298>
		//************************************************************

		if (axis == YAW)
		{
			PID_gyro_temp1 = (int32_t)(Config.FlightMode[P1].Yaw_trim << 6);
			PID_gyro_temp2 = (int32_t)(Config.FlightMode[P2].Yaw_trim << 6);
    6b78:	a2 96       	adiw	r28, 0x22	; 34
    6b7a:	cc ac       	ldd	r12, Y+60	; 0x3c
    6b7c:	dd ac       	ldd	r13, Y+61	; 0x3d
    6b7e:	ee ac       	ldd	r14, Y+62	; 0x3e
    6b80:	ff ac       	ldd	r15, Y+63	; 0x3f
    6b82:	a2 97       	sbiw	r28, 0x22	; 34
		// Add in gyro Yaw trim
		//************************************************************

		if (axis == YAW)
		{
			PID_gyro_temp1 = (int32_t)(Config.FlightMode[P1].Yaw_trim << 6);
    6b84:	6e 96       	adiw	r28, 0x1e	; 30
    6b86:	8c ad       	ldd	r24, Y+60	; 0x3c
    6b88:	9d ad       	ldd	r25, Y+61	; 0x3d
    6b8a:	ae ad       	ldd	r26, Y+62	; 0x3e
    6b8c:	bf ad       	ldd	r27, Y+63	; 0x3f
    6b8e:	6e 97       	sbiw	r28, 0x1e	; 30
		//************************************************************
		// Calculate PID gains
		//************************************************************

		// Gyro P-term													// Profile P1
		PID_gyro_temp1 += gyroADC[axis] * P_gain[P1][axis];				// Multiply P-term (Max gain of 127)
    6b90:	67 96       	adiw	r28, 0x17	; 23
    6b92:	ee ad       	ldd	r30, Y+62	; 0x3e
    6b94:	ff ad       	ldd	r31, Y+63	; 0x3f
    6b96:	67 97       	sbiw	r28, 0x17	; 23
    6b98:	41 91       	ld	r20, Z+
    6b9a:	67 96       	adiw	r28, 0x17	; 23
    6b9c:	ff af       	std	Y+63, r31	; 0x3f
    6b9e:	ee af       	std	Y+62, r30	; 0x3e
    6ba0:	67 97       	sbiw	r28, 0x17	; 23
    6ba2:	40 03       	mulsu	r20, r16
    6ba4:	90 01       	movw	r18, r0
    6ba6:	41 9f       	mul	r20, r17
    6ba8:	30 0d       	add	r19, r0
    6baa:	11 24       	eor	r1, r1
    6bac:	44 27       	eor	r20, r20
    6bae:	37 fd       	sbrc	r19, 7
    6bb0:	40 95       	com	r20
    6bb2:	54 2f       	mov	r21, r20
    6bb4:	28 0f       	add	r18, r24
    6bb6:	39 1f       	adc	r19, r25
    6bb8:	4a 1f       	adc	r20, r26
    6bba:	5b 1f       	adc	r21, r27
		PID_gyro_temp1 = PID_gyro_temp1 * (int32_t)3;					// Multiply by 3
    6bbc:	a3 e0       	ldi	r26, 0x03	; 3
    6bbe:	b0 e0       	ldi	r27, 0x00	; 0
    6bc0:	0e 94 08 3d 	call	0x7a10	; 0x7a10 <__muluhisi3>
    6bc4:	4b 01       	movw	r8, r22
    6bc6:	5c 01       	movw	r10, r24

		// Gyro I-term
		PID_Gyro_I_actual1 = IntegralGyro[P1][axis] * I_gain[P1][axis];	// Multiply I-term (Max gain of 127)
    6bc8:	65 96       	adiw	r28, 0x15	; 21
    6bca:	ee ad       	ldd	r30, Y+62	; 0x3e
    6bcc:	ff ad       	ldd	r31, Y+63	; 0x3f
    6bce:	65 97       	sbiw	r28, 0x15	; 21
    6bd0:	a1 91       	ld	r26, Z+
    6bd2:	65 96       	adiw	r28, 0x15	; 21
    6bd4:	ff af       	std	Y+63, r31	; 0x3f
    6bd6:	ee af       	std	Y+62, r30	; 0x3e
    6bd8:	65 97       	sbiw	r28, 0x15	; 21
    6bda:	f1 01       	movw	r30, r2
    6bdc:	20 81       	ld	r18, Z
    6bde:	31 81       	ldd	r19, Z+1	; 0x01
    6be0:	42 81       	ldd	r20, Z+2	; 0x02
    6be2:	53 81       	ldd	r21, Z+3	; 0x03
    6be4:	bb 27       	eor	r27, r27
    6be6:	a7 fd       	sbrc	r26, 7
    6be8:	b0 95       	com	r27
    6bea:	0e 94 13 3d 	call	0x7a26	; 0x7a26 <__mulshisi3>
    6bee:	2b 01       	movw	r4, r22
    6bf0:	3c 01       	movw	r6, r24
		PID_Gyro_I_actual1 = PID_Gyro_I_actual1 >> 5;					// Divide by 32
    6bf2:	35 e0       	ldi	r19, 0x05	; 5
    6bf4:	75 94       	asr	r7
    6bf6:	67 94       	ror	r6
    6bf8:	57 94       	ror	r5
    6bfa:	47 94       	ror	r4
    6bfc:	3a 95       	dec	r19
    6bfe:	d1 f7       	brne	.-12     	; 0x6bf4 <Calculate_PID+0x3d8>

		// Gyro D-term
		Differential = gyroADC[axis] - lastError[axis];
    6c00:	ed a9       	ldd	r30, Y+53	; 0x35
    6c02:	fe a9       	ldd	r31, Y+54	; 0x36
    6c04:	80 81       	ld	r24, Z
    6c06:	91 81       	ldd	r25, Z+1	; 0x01
    6c08:	f8 01       	movw	r30, r16
    6c0a:	e8 1b       	sub	r30, r24
    6c0c:	f9 0b       	sbc	r31, r25
    6c0e:	f8 a7       	std	Y+40, r31	; 0x28
    6c10:	ef a3       	std	Y+39, r30	; 0x27
		lastError[axis] = gyroADC[axis];
    6c12:	ed a9       	ldd	r30, Y+53	; 0x35
    6c14:	fe a9       	ldd	r31, Y+54	; 0x36
    6c16:	11 83       	std	Z+1, r17	; 0x01
    6c18:	00 83       	st	Z, r16
		DifferentialGyro1 = Differential * D_gain[P1][axis];			// Multiply D-term by up to 127
    6c1a:	63 96       	adiw	r28, 0x13	; 19
    6c1c:	ee ad       	ldd	r30, Y+62	; 0x3e
    6c1e:	ff ad       	ldd	r31, Y+63	; 0x3f
    6c20:	63 97       	sbiw	r28, 0x13	; 19
    6c22:	21 91       	ld	r18, Z+
    6c24:	63 96       	adiw	r28, 0x13	; 19
    6c26:	ff af       	std	Y+63, r31	; 0x3f
    6c28:	ee af       	std	Y+62, r30	; 0x3e
    6c2a:	63 97       	sbiw	r28, 0x13	; 19
    6c2c:	4f a1       	ldd	r20, Y+39	; 0x27
    6c2e:	58 a5       	ldd	r21, Y+40	; 0x28
    6c30:	24 03       	mulsu	r18, r20
    6c32:	f0 01       	movw	r30, r0
    6c34:	25 9f       	mul	r18, r21
    6c36:	f0 0d       	add	r31, r0
    6c38:	11 24       	eor	r1, r1
		DifferentialGyro1 = DifferentialGyro1 << 4;						// Multiply by 16
    6c3a:	44 e0       	ldi	r20, 0x04	; 4
    6c3c:	ee 0f       	add	r30, r30
    6c3e:	ff 1f       	adc	r31, r31
    6c40:	4a 95       	dec	r20
    6c42:	e1 f7       	brne	.-8      	; 0x6c3c <Calculate_PID+0x420>
    6c44:	21 96       	adiw	r28, 0x01	; 1
    6c46:	ff af       	std	Y+63, r31	; 0x3f
    6c48:	ee af       	std	Y+62, r30	; 0x3e
    6c4a:	21 97       	sbiw	r28, 0x01	; 1

		// Gyro P-term
		PID_gyro_temp2 += gyroADC[axis] * P_gain[P2][axis];				// Profile P2
    6c4c:	61 96       	adiw	r28, 0x11	; 17
    6c4e:	ee ad       	ldd	r30, Y+62	; 0x3e
    6c50:	ff ad       	ldd	r31, Y+63	; 0x3f
    6c52:	61 97       	sbiw	r28, 0x11	; 17
    6c54:	21 91       	ld	r18, Z+
    6c56:	61 96       	adiw	r28, 0x11	; 17
    6c58:	ff af       	std	Y+63, r31	; 0x3f
    6c5a:	ee af       	std	Y+62, r30	; 0x3e
    6c5c:	61 97       	sbiw	r28, 0x11	; 17
    6c5e:	20 03       	mulsu	r18, r16
    6c60:	c0 01       	movw	r24, r0
    6c62:	21 9f       	mul	r18, r17
    6c64:	90 0d       	add	r25, r0
    6c66:	11 24       	eor	r1, r1
    6c68:	9c 01       	movw	r18, r24
    6c6a:	44 27       	eor	r20, r20
    6c6c:	37 fd       	sbrc	r19, 7
    6c6e:	40 95       	com	r20
    6c70:	54 2f       	mov	r21, r20
    6c72:	2c 0d       	add	r18, r12
    6c74:	3d 1d       	adc	r19, r13
    6c76:	4e 1d       	adc	r20, r14
    6c78:	5f 1d       	adc	r21, r15
		PID_gyro_temp2 = PID_gyro_temp2 * (int32_t)3;
    6c7a:	a3 e0       	ldi	r26, 0x03	; 3
    6c7c:	b0 e0       	ldi	r27, 0x00	; 0
    6c7e:	0e 94 08 3d 	call	0x7a10	; 0x7a10 <__muluhisi3>
    6c82:	6b 01       	movw	r12, r22
    6c84:	7c 01       	movw	r14, r24

		// Gyro I-term
		PID_Gyro_I_actual2 = IntegralGyro[P2][axis] * I_gain[P2][axis];
    6c86:	2f 96       	adiw	r28, 0x0f	; 15
    6c88:	ee ad       	ldd	r30, Y+62	; 0x3e
    6c8a:	ff ad       	ldd	r31, Y+63	; 0x3f
    6c8c:	2f 97       	sbiw	r28, 0x0f	; 15
    6c8e:	a1 91       	ld	r26, Z+
    6c90:	2f 96       	adiw	r28, 0x0f	; 15
    6c92:	ff af       	std	Y+63, r31	; 0x3f
    6c94:	ee af       	std	Y+62, r30	; 0x3e
    6c96:	2f 97       	sbiw	r28, 0x0f	; 15
    6c98:	f1 01       	movw	r30, r2
    6c9a:	24 85       	ldd	r18, Z+12	; 0x0c
    6c9c:	35 85       	ldd	r19, Z+13	; 0x0d
    6c9e:	46 85       	ldd	r20, Z+14	; 0x0e
    6ca0:	57 85       	ldd	r21, Z+15	; 0x0f
    6ca2:	bb 27       	eor	r27, r27
    6ca4:	a7 fd       	sbrc	r26, 7
    6ca6:	b0 95       	com	r27
    6ca8:	0e 94 13 3d 	call	0x7a26	; 0x7a26 <__mulshisi3>
		PID_Gyro_I_actual2 = PID_Gyro_I_actual2 >> 5;
    6cac:	55 e0       	ldi	r21, 0x05	; 5
    6cae:	95 95       	asr	r25
    6cb0:	87 95       	ror	r24
    6cb2:	77 95       	ror	r23
    6cb4:	67 95       	ror	r22
    6cb6:	5a 95       	dec	r21
    6cb8:	d1 f7       	brne	.-12     	; 0x6cae <Calculate_PID+0x492>

		// Gyro D-term
		DifferentialGyro2 = Differential * D_gain[P2][axis];			// Multiply D-term by up to 127
    6cba:	2d 96       	adiw	r28, 0x0d	; 13
    6cbc:	ee ad       	ldd	r30, Y+62	; 0x3e
    6cbe:	ff ad       	ldd	r31, Y+63	; 0x3f
    6cc0:	2d 97       	sbiw	r28, 0x0d	; 13
    6cc2:	41 91       	ld	r20, Z+
    6cc4:	2d 96       	adiw	r28, 0x0d	; 13
    6cc6:	ff af       	std	Y+63, r31	; 0x3f
    6cc8:	ee af       	std	Y+62, r30	; 0x3e
    6cca:	2d 97       	sbiw	r28, 0x0d	; 13
    6ccc:	2f a1       	ldd	r18, Y+39	; 0x27
    6cce:	38 a5       	ldd	r19, Y+40	; 0x28
    6cd0:	42 03       	mulsu	r20, r18
    6cd2:	f0 01       	movw	r30, r0
    6cd4:	43 9f       	mul	r20, r19
    6cd6:	f0 0d       	add	r31, r0
    6cd8:	11 24       	eor	r1, r1
		DifferentialGyro2 = DifferentialGyro2 << 4;						// Multiply by 16
    6cda:	a4 e0       	ldi	r26, 0x04	; 4
    6cdc:	ee 0f       	add	r30, r30
    6cde:	ff 1f       	adc	r31, r31
    6ce0:	aa 95       	dec	r26
    6ce2:	e1 f7       	brne	.-8      	; 0x6cdc <Calculate_PID+0x4c0>
		//************************************************************
		// I-term output limits
		//************************************************************

		// P1 limits
		if (PID_Gyro_I_actual1 > Config.Raw_I_Limits[P1][axis]) 
    6ce4:	2b 96       	adiw	r28, 0x0b	; 11
    6ce6:	ae ad       	ldd	r26, Y+62	; 0x3e
    6ce8:	bf ad       	ldd	r27, Y+63	; 0x3f
    6cea:	2b 97       	sbiw	r28, 0x0b	; 11
    6cec:	2d 91       	ld	r18, X+
    6cee:	3d 91       	ld	r19, X+
    6cf0:	4d 91       	ld	r20, X+
    6cf2:	5d 91       	ld	r21, X+
    6cf4:	2b 96       	adiw	r28, 0x0b	; 11
    6cf6:	bf af       	std	Y+63, r27	; 0x3f
    6cf8:	ae af       	std	Y+62, r26	; 0x3e
    6cfa:	2b 97       	sbiw	r28, 0x0b	; 11
    6cfc:	2f a3       	std	Y+39, r18	; 0x27
    6cfe:	38 a7       	std	Y+40, r19	; 0x28
    6d00:	49 a7       	std	Y+41, r20	; 0x29
    6d02:	5a a7       	std	Y+42, r21	; 0x2a
    6d04:	24 15       	cp	r18, r4
    6d06:	35 05       	cpc	r19, r5
    6d08:	46 05       	cpc	r20, r6
    6d0a:	57 05       	cpc	r21, r7
    6d0c:	b4 f0       	brlt	.+44     	; 0x6d3a <Calculate_PID+0x51e>
		{
			PID_Gyro_I_actual1 = Config.Raw_I_Limits[P1][axis];
		}
		else if (PID_Gyro_I_actual1 < -Config.Raw_I_Limits[P1][axis]) 
    6d0e:	89 01       	movw	r16, r18
    6d10:	9a 01       	movw	r18, r20
    6d12:	30 95       	com	r19
    6d14:	20 95       	com	r18
    6d16:	10 95       	com	r17
    6d18:	01 95       	neg	r16
    6d1a:	1f 4f       	sbci	r17, 0xFF	; 255
    6d1c:	2f 4f       	sbci	r18, 0xFF	; 255
    6d1e:	3f 4f       	sbci	r19, 0xFF	; 255
    6d20:	4f a2       	std	Y+39, r4	; 0x27
    6d22:	58 a6       	std	Y+40, r5	; 0x28
    6d24:	69 a6       	std	Y+41, r6	; 0x29
    6d26:	7a a6       	std	Y+42, r7	; 0x2a
    6d28:	40 16       	cp	r4, r16
    6d2a:	51 06       	cpc	r5, r17
    6d2c:	62 06       	cpc	r6, r18
    6d2e:	73 06       	cpc	r7, r19
    6d30:	24 f4       	brge	.+8      	; 0x6d3a <Calculate_PID+0x51e>
    6d32:	0f a3       	std	Y+39, r16	; 0x27
    6d34:	18 a7       	std	Y+40, r17	; 0x28
    6d36:	29 a7       	std	Y+41, r18	; 0x29
    6d38:	3a a7       	std	Y+42, r19	; 0x2a
		{
			PID_Gyro_I_actual1 = PID_Gyro_I_actual1;
		}

		// P2 limits
		if (PID_Gyro_I_actual2 > Config.Raw_I_Limits[P2][axis]) 
    6d3a:	69 96       	adiw	r28, 0x19	; 25
    6d3c:	ae ad       	ldd	r26, Y+62	; 0x3e
    6d3e:	bf ad       	ldd	r27, Y+63	; 0x3f
    6d40:	69 97       	sbiw	r28, 0x19	; 25
    6d42:	4d 90       	ld	r4, X+
    6d44:	5d 90       	ld	r5, X+
    6d46:	6d 90       	ld	r6, X+
    6d48:	7d 90       	ld	r7, X+
    6d4a:	69 96       	adiw	r28, 0x19	; 25
    6d4c:	bf af       	std	Y+63, r27	; 0x3f
    6d4e:	ae af       	std	Y+62, r26	; 0x3e
    6d50:	69 97       	sbiw	r28, 0x19	; 25
    6d52:	4b a6       	std	Y+43, r4	; 0x2b
    6d54:	5c a6       	std	Y+44, r5	; 0x2c
    6d56:	6d a6       	std	Y+45, r6	; 0x2d
    6d58:	7e a6       	std	Y+46, r7	; 0x2e
    6d5a:	46 16       	cp	r4, r22
    6d5c:	57 06       	cpc	r5, r23
    6d5e:	68 06       	cpc	r6, r24
    6d60:	79 06       	cpc	r7, r25
    6d62:	ac f0       	brlt	.+42     	; 0x6d8e <Calculate_PID+0x572>
		{
			PID_Gyro_I_actual2 = Config.Raw_I_Limits[P2][axis];
		}
		else if (PID_Gyro_I_actual2 < -Config.Raw_I_Limits[P2][axis]) 
    6d64:	70 94       	com	r7
    6d66:	60 94       	com	r6
    6d68:	50 94       	com	r5
    6d6a:	40 94       	com	r4
    6d6c:	41 1c       	adc	r4, r1
    6d6e:	51 1c       	adc	r5, r1
    6d70:	61 1c       	adc	r6, r1
    6d72:	71 1c       	adc	r7, r1
    6d74:	6b a7       	std	Y+43, r22	; 0x2b
    6d76:	7c a7       	std	Y+44, r23	; 0x2c
    6d78:	8d a7       	std	Y+45, r24	; 0x2d
    6d7a:	9e a7       	std	Y+46, r25	; 0x2e
    6d7c:	64 15       	cp	r22, r4
    6d7e:	75 05       	cpc	r23, r5
    6d80:	86 05       	cpc	r24, r6
    6d82:	97 05       	cpc	r25, r7
    6d84:	24 f4       	brge	.+8      	; 0x6d8e <Calculate_PID+0x572>
    6d86:	4b a6       	std	Y+43, r4	; 0x2b
    6d88:	5c a6       	std	Y+44, r5	; 0x2c
    6d8a:	6d a6       	std	Y+45, r6	; 0x2d
    6d8c:	7e a6       	std	Y+46, r7	; 0x2e

		//************************************************************
		// Sum Gyro P, I and D terms and rescale
		//************************************************************

		PID_Gyros[P1][axis] = (int16_t)((PID_gyro_temp1 + PID_Gyro_I_actual1 + DifferentialGyro1) >> 6);
    6d8e:	4f a1       	ldd	r20, Y+39	; 0x27
    6d90:	58 a5       	ldd	r21, Y+40	; 0x28
    6d92:	69 a5       	ldd	r22, Y+41	; 0x29
    6d94:	7a a5       	ldd	r23, Y+42	; 0x2a
    6d96:	48 0d       	add	r20, r8
    6d98:	59 1d       	adc	r21, r9
    6d9a:	6a 1d       	adc	r22, r10
    6d9c:	7b 1d       	adc	r23, r11
    6d9e:	21 96       	adiw	r28, 0x01	; 1
    6da0:	4e ac       	ldd	r4, Y+62	; 0x3e
    6da2:	5f ac       	ldd	r5, Y+63	; 0x3f
    6da4:	21 97       	sbiw	r28, 0x01	; 1
    6da6:	82 01       	movw	r16, r4
    6da8:	22 27       	eor	r18, r18
    6daa:	17 fd       	sbrc	r17, 7
    6dac:	20 95       	com	r18
    6dae:	32 2f       	mov	r19, r18
    6db0:	40 0f       	add	r20, r16
    6db2:	51 1f       	adc	r21, r17
    6db4:	62 1f       	adc	r22, r18
    6db6:	73 1f       	adc	r23, r19
    6db8:	a6 e0       	ldi	r26, 0x06	; 6
    6dba:	75 95       	asr	r23
    6dbc:	67 95       	ror	r22
    6dbe:	57 95       	ror	r21
    6dc0:	47 95       	ror	r20
    6dc2:	aa 95       	dec	r26
    6dc4:	d1 f7       	brne	.-12     	; 0x6dba <Calculate_PID+0x59e>
    6dc6:	ab a9       	ldd	r26, Y+51	; 0x33
    6dc8:	bc a9       	ldd	r27, Y+52	; 0x34
    6dca:	4d 93       	st	X+, r20
    6dcc:	5c 93       	st	X, r21
		PID_Gyros[P2][axis] = (int16_t)((PID_gyro_temp2 + PID_Gyro_I_actual2 + DifferentialGyro2) >> 6);
    6dce:	8b a5       	ldd	r24, Y+43	; 0x2b
    6dd0:	9c a5       	ldd	r25, Y+44	; 0x2c
    6dd2:	ad a5       	ldd	r26, Y+45	; 0x2d
    6dd4:	be a5       	ldd	r27, Y+46	; 0x2e
    6dd6:	8c 0d       	add	r24, r12
    6dd8:	9d 1d       	adc	r25, r13
    6dda:	ae 1d       	adc	r26, r14
    6ddc:	bf 1d       	adc	r27, r15
    6dde:	af 01       	movw	r20, r30
    6de0:	66 27       	eor	r22, r22
    6de2:	57 fd       	sbrc	r21, 7
    6de4:	60 95       	com	r22
    6de6:	76 2f       	mov	r23, r22
    6de8:	84 0f       	add	r24, r20
    6dea:	95 1f       	adc	r25, r21
    6dec:	a6 1f       	adc	r26, r22
    6dee:	b7 1f       	adc	r27, r23
    6df0:	26 e0       	ldi	r18, 0x06	; 6
    6df2:	b5 95       	asr	r27
    6df4:	a7 95       	ror	r26
    6df6:	97 95       	ror	r25
    6df8:	87 95       	ror	r24
    6dfa:	2a 95       	dec	r18
    6dfc:	d1 f7       	brne	.-12     	; 0x6df2 <Calculate_PID+0x5d6>
    6dfe:	eb a9       	ldd	r30, Y+51	; 0x33
    6e00:	fc a9       	ldd	r31, Y+52	; 0x34
    6e02:	97 83       	std	Z+7, r25	; 0x07
    6e04:	86 83       	std	Z+6, r24	; 0x06

		//************************************************************
		// Calculate error from angle data and trim (roll and pitch only)
		//************************************************************

		if (axis < YAW)
    6e06:	6a 96       	adiw	r28, 0x1a	; 26
    6e08:	ff ad       	ldd	r31, Y+63	; 0x3f
    6e0a:	6a 97       	sbiw	r28, 0x1a	; 26
    6e0c:	f2 30       	cpi	r31, 0x02	; 2
    6e0e:	f1 f1       	breq	.+124    	; 0x6e8c <Calculate_PID+0x670>
		{
			PID_acc_temp1 = angle[axis] - L_trim[P1][axis];				// Offset angle with trim
    6e10:	23 96       	adiw	r28, 0x03	; 3
    6e12:	ee ad       	ldd	r30, Y+62	; 0x3e
    6e14:	ff ad       	ldd	r31, Y+63	; 0x3f
    6e16:	23 97       	sbiw	r28, 0x03	; 3
    6e18:	40 81       	ld	r20, Z
    6e1a:	51 81       	ldd	r21, Z+1	; 0x01
    6e1c:	e9 ad       	ldd	r30, Y+57	; 0x39
    6e1e:	fa ad       	ldd	r31, Y+58	; 0x3a
    6e20:	80 81       	ld	r24, Z
    6e22:	91 81       	ldd	r25, Z+1	; 0x01
    6e24:	9a 01       	movw	r18, r20
    6e26:	28 1b       	sub	r18, r24
    6e28:	39 0b       	sbc	r19, r25
			PID_acc_temp2 = angle[axis] - L_trim[P2][axis];
    6e2a:	84 81       	ldd	r24, Z+4	; 0x04
    6e2c:	95 81       	ldd	r25, Z+5	; 0x05
    6e2e:	48 1b       	sub	r20, r24
    6e30:	59 0b       	sbc	r21, r25
    6e32:	e9 e0       	ldi	r30, 0x09	; 9
    6e34:	f0 e0       	ldi	r31, 0x00	; 0
    6e36:	ec 0f       	add	r30, r28
    6e38:	fd 1f       	adc	r31, r29
    6e3a:	4f a4       	ldd	r4, Y+47	; 0x2f
    6e3c:	58 a8       	ldd	r5, Y+48	; 0x30
    6e3e:	e4 0d       	add	r30, r4
    6e40:	f5 1d       	adc	r31, r5

			PID_acc_temp1 *= L_gain[P1][axis];							// P-term of accelerometer (Max gain of 127)
    6e42:	a0 81       	ld	r26, Z
    6e44:	bb 27       	eor	r27, r27
    6e46:	a7 fd       	sbrc	r26, 7
    6e48:	b0 95       	com	r27
    6e4a:	0e 94 ea 3c 	call	0x79d4	; 0x79d4 <__mulhisi3>
			PID_ACCs[P1][axis] = (int16_t)(PID_acc_temp1 >> 8);			// Reduce and convert to integer
    6e4e:	bb 27       	eor	r27, r27
    6e50:	97 fd       	sbrc	r25, 7
    6e52:	ba 95       	dec	r27
    6e54:	a9 2f       	mov	r26, r25
    6e56:	98 2f       	mov	r25, r24
    6e58:	87 2f       	mov	r24, r23
    6e5a:	eb ad       	ldd	r30, Y+59	; 0x3b
    6e5c:	fc ad       	ldd	r31, Y+60	; 0x3c
    6e5e:	91 83       	std	Z+1, r25	; 0x01
    6e60:	80 83       	st	Z, r24

			PID_acc_temp2 *= L_gain[P2][axis];							// Same for P2
    6e62:	25 96       	adiw	r28, 0x05	; 5
    6e64:	ee ad       	ldd	r30, Y+62	; 0x3e
    6e66:	ff ad       	ldd	r31, Y+63	; 0x3f
    6e68:	25 97       	sbiw	r28, 0x05	; 5
    6e6a:	a0 81       	ld	r26, Z
    6e6c:	9a 01       	movw	r18, r20
    6e6e:	bb 27       	eor	r27, r27
    6e70:	a7 fd       	sbrc	r26, 7
    6e72:	b0 95       	com	r27
    6e74:	0e 94 ea 3c 	call	0x79d4	; 0x79d4 <__mulhisi3>
			PID_ACCs[P2][axis] = (int16_t)(PID_acc_temp2 >> 8);	
    6e78:	bb 27       	eor	r27, r27
    6e7a:	97 fd       	sbrc	r25, 7
    6e7c:	ba 95       	dec	r27
    6e7e:	a9 2f       	mov	r26, r25
    6e80:	98 2f       	mov	r25, r24
    6e82:	87 2f       	mov	r24, r23
    6e84:	eb ad       	ldd	r30, Y+59	; 0x3b
    6e86:	fc ad       	ldd	r31, Y+60	; 0x3c
    6e88:	97 83       	std	Z+7, r25	; 0x07
    6e8a:	86 83       	std	Z+6, r24	; 0x06
    6e8c:	ef a5       	ldd	r30, Y+47	; 0x2f
    6e8e:	f8 a9       	ldd	r31, Y+48	; 0x30
    6e90:	31 96       	adiw	r30, 0x01	; 1
    6e92:	f8 ab       	std	Y+48, r31	; 0x30
    6e94:	ef a7       	std	Y+47, r30	; 0x2f
    6e96:	e9 a9       	ldd	r30, Y+49	; 0x31
    6e98:	fa a9       	ldd	r31, Y+50	; 0x32
    6e9a:	32 96       	adiw	r30, 0x02	; 2
    6e9c:	fa ab       	std	Y+50, r31	; 0x32
    6e9e:	e9 ab       	std	Y+49, r30	; 0x31
    6ea0:	eb a9       	ldd	r30, Y+51	; 0x33
    6ea2:	fc a9       	ldd	r31, Y+52	; 0x34
    6ea4:	32 96       	adiw	r30, 0x02	; 2
    6ea6:	fc ab       	std	Y+52, r31	; 0x34
    6ea8:	eb ab       	std	Y+51, r30	; 0x33
    6eaa:	23 96       	adiw	r28, 0x03	; 3
    6eac:	ee ad       	ldd	r30, Y+62	; 0x3e
    6eae:	ff ad       	ldd	r31, Y+63	; 0x3f
    6eb0:	23 97       	sbiw	r28, 0x03	; 3
    6eb2:	32 96       	adiw	r30, 0x02	; 2
    6eb4:	23 96       	adiw	r28, 0x03	; 3
    6eb6:	ff af       	std	Y+63, r31	; 0x3f
    6eb8:	ee af       	std	Y+62, r30	; 0x3e
    6eba:	23 97       	sbiw	r28, 0x03	; 3
    6ebc:	e9 ad       	ldd	r30, Y+57	; 0x39
    6ebe:	fa ad       	ldd	r31, Y+58	; 0x3a
    6ec0:	32 96       	adiw	r30, 0x02	; 2
    6ec2:	fa af       	std	Y+58, r31	; 0x3a
    6ec4:	e9 af       	std	Y+57, r30	; 0x39
    6ec6:	eb ad       	ldd	r30, Y+59	; 0x3b
    6ec8:	fc ad       	ldd	r31, Y+60	; 0x3c
    6eca:	32 96       	adiw	r30, 0x02	; 2
    6ecc:	fc af       	std	Y+60, r31	; 0x3c
    6ece:	eb af       	std	Y+59, r30	; 0x3b
    6ed0:	25 96       	adiw	r28, 0x05	; 5
    6ed2:	ee ad       	ldd	r30, Y+62	; 0x3e
    6ed4:	ff ad       	ldd	r31, Y+63	; 0x3f
    6ed6:	25 97       	sbiw	r28, 0x05	; 5
    6ed8:	31 96       	adiw	r30, 0x01	; 1
    6eda:	25 96       	adiw	r28, 0x05	; 5
    6edc:	ff af       	std	Y+63, r31	; 0x3f
    6ede:	ee af       	std	Y+62, r30	; 0x3e
    6ee0:	25 97       	sbiw	r28, 0x05	; 5
    6ee2:	ef a9       	ldd	r30, Y+55	; 0x37
    6ee4:	f8 ad       	ldd	r31, Y+56	; 0x38
    6ee6:	34 96       	adiw	r30, 0x04	; 4
    6ee8:	f8 af       	std	Y+56, r31	; 0x38
    6eea:	ef ab       	std	Y+55, r30	; 0x37
    6eec:	f4 e0       	ldi	r31, 0x04	; 4
    6eee:	2f 0e       	add	r2, r31
    6ef0:	31 1c       	adc	r3, r1
    6ef2:	ed a9       	ldd	r30, Y+53	; 0x35
    6ef4:	fe a9       	ldd	r31, Y+54	; 0x36
    6ef6:	32 96       	adiw	r30, 0x02	; 2
    6ef8:	fe ab       	std	Y+54, r31	; 0x36
    6efa:	ed ab       	std	Y+53, r30	; 0x35

	//************************************************************
	// PID loop
	//************************************************************

	for (axis = 0; axis <= YAW; axis ++)
    6efc:	ef a5       	ldd	r30, Y+47	; 0x2f
    6efe:	f8 a9       	ldd	r31, Y+48	; 0x30
    6f00:	33 97       	sbiw	r30, 0x03	; 3
    6f02:	09 f0       	breq	.+2      	; 0x6f06 <Calculate_PID+0x6ea>
    6f04:	94 cd       	rjmp	.-1240   	; 0x6a2e <Calculate_PID+0x212>

	//************************************************************
	// Calculate an Acc-Z value 
	//************************************************************

	PID_acc_temp1 = -accVert;				// Get and copy Z-acc value. Negate to oppose G
    6f06:	40 91 08 01 	lds	r20, 0x0108
    6f0a:	50 91 09 01 	lds	r21, 0x0109
    6f0e:	51 95       	neg	r21
    6f10:	41 95       	neg	r20
    6f12:	51 09       	sbc	r21, r1
	PID_acc_temp2 = PID_acc_temp1;

	PID_acc_temp1 *= L_gain[P1][YAW];		// Multiply P-term (Max gain of 127)
    6f14:	9a 01       	movw	r18, r20
    6f16:	26 96       	adiw	r28, 0x06	; 6
    6f18:	ff ad       	ldd	r31, Y+63	; 0x3f
    6f1a:	26 97       	sbiw	r28, 0x06	; 6
    6f1c:	af 2f       	mov	r26, r31
    6f1e:	bb 27       	eor	r27, r27
    6f20:	a7 fd       	sbrc	r26, 7
    6f22:	b0 95       	com	r27
    6f24:	0e 94 ea 3c 	call	0x79d4	; 0x79d4 <__mulhisi3>
    6f28:	6b 01       	movw	r12, r22
    6f2a:	7c 01       	movw	r14, r24
	PID_acc_temp2 *= L_gain[P2][YAW];		// Multiply P-term (Max gain of 127)
    6f2c:	27 96       	adiw	r28, 0x07	; 7
    6f2e:	4f ac       	ldd	r4, Y+63	; 0x3f
    6f30:	27 97       	sbiw	r28, 0x07	; 7
    6f32:	a4 2d       	mov	r26, r4
    6f34:	bb 27       	eor	r27, r27
    6f36:	a7 fd       	sbrc	r26, 7
    6f38:	b0 95       	com	r27
    6f3a:	0e 94 ea 3c 	call	0x79d4	; 0x79d4 <__mulhisi3>

	PID_acc_temp1 = PID_acc_temp1 >> 4;		// Moderate Z-acc to reasonable values
    6f3e:	44 e0       	ldi	r20, 0x04	; 4
    6f40:	f5 94       	asr	r15
    6f42:	e7 94       	ror	r14
    6f44:	d7 94       	ror	r13
    6f46:	c7 94       	ror	r12
    6f48:	4a 95       	dec	r20
    6f4a:	d1 f7       	brne	.-12     	; 0x6f40 <Calculate_PID+0x724>
	PID_acc_temp2 = PID_acc_temp2 >> 4;	
    6f4c:	54 e0       	ldi	r21, 0x04	; 4
    6f4e:	95 95       	asr	r25
    6f50:	87 95       	ror	r24
    6f52:	77 95       	ror	r23
    6f54:	67 95       	ror	r22
    6f56:	5a 95       	dec	r21
    6f58:	d1 f7       	brne	.-12     	; 0x6f4e <Calculate_PID+0x732>

	if (PID_acc_temp1 > MAX_ZGAIN)			// Limit to +/-MAX_ZGAIN
    6f5a:	25 ef       	ldi	r18, 0xF5	; 245
    6f5c:	c2 16       	cp	r12, r18
    6f5e:	21 e0       	ldi	r18, 0x01	; 1
    6f60:	d2 06       	cpc	r13, r18
    6f62:	e1 04       	cpc	r14, r1
    6f64:	f1 04       	cpc	r15, r1
    6f66:	84 f4       	brge	.+32     	; 0x6f88 <Calculate_PID+0x76c>
	{
		PID_acc_temp1 = MAX_ZGAIN;
	}
	if (PID_acc_temp1 < -MAX_ZGAIN)
    6f68:	3c e0       	ldi	r19, 0x0C	; 12
    6f6a:	c3 16       	cp	r12, r19
    6f6c:	3e ef       	ldi	r19, 0xFE	; 254
    6f6e:	d3 06       	cpc	r13, r19
    6f70:	3f ef       	ldi	r19, 0xFF	; 255
    6f72:	e3 06       	cpc	r14, r19
    6f74:	f3 06       	cpc	r15, r19
    6f76:	74 f4       	brge	.+28     	; 0x6f94 <Calculate_PID+0x778>
	{
		PID_acc_temp1 = -MAX_ZGAIN;
    6f78:	2c e0       	ldi	r18, 0x0C	; 12
    6f7a:	c2 2e       	mov	r12, r18
    6f7c:	2e ef       	ldi	r18, 0xFE	; 254
    6f7e:	d2 2e       	mov	r13, r18
    6f80:	ee 24       	eor	r14, r14
    6f82:	ea 94       	dec	r14
    6f84:	fe 2c       	mov	r15, r14
    6f86:	06 c0       	rjmp	.+12     	; 0x6f94 <Calculate_PID+0x778>
	PID_acc_temp1 = PID_acc_temp1 >> 4;		// Moderate Z-acc to reasonable values
	PID_acc_temp2 = PID_acc_temp2 >> 4;	

	if (PID_acc_temp1 > MAX_ZGAIN)			// Limit to +/-MAX_ZGAIN
	{
		PID_acc_temp1 = MAX_ZGAIN;
    6f88:	34 ef       	ldi	r19, 0xF4	; 244
    6f8a:	c3 2e       	mov	r12, r19
    6f8c:	dd 24       	eor	r13, r13
    6f8e:	d3 94       	inc	r13
    6f90:	e1 2c       	mov	r14, r1
    6f92:	f1 2c       	mov	r15, r1
	if (PID_acc_temp1 < -MAX_ZGAIN)
	{
		PID_acc_temp1 = -MAX_ZGAIN;
	}

	if (PID_acc_temp2 > MAX_ZGAIN)
    6f94:	65 3f       	cpi	r22, 0xF5	; 245
    6f96:	41 e0       	ldi	r20, 0x01	; 1
    6f98:	74 07       	cpc	r23, r20
    6f9a:	81 05       	cpc	r24, r1
    6f9c:	91 05       	cpc	r25, r1
    6f9e:	64 f4       	brge	.+24     	; 0x6fb8 <Calculate_PID+0x79c>
	{
		PID_acc_temp2 = MAX_ZGAIN;
	}
	if (PID_acc_temp2 < -MAX_ZGAIN)
    6fa0:	6c 30       	cpi	r22, 0x0C	; 12
    6fa2:	5e ef       	ldi	r21, 0xFE	; 254
    6fa4:	75 07       	cpc	r23, r21
    6fa6:	5f ef       	ldi	r21, 0xFF	; 255
    6fa8:	85 07       	cpc	r24, r21
    6faa:	95 07       	cpc	r25, r21
    6fac:	4c f4       	brge	.+18     	; 0x6fc0 <Calculate_PID+0x7a4>
	{
		PID_acc_temp2 = -MAX_ZGAIN;
    6fae:	6c e0       	ldi	r22, 0x0C	; 12
    6fb0:	7e ef       	ldi	r23, 0xFE	; 254
    6fb2:	8f ef       	ldi	r24, 0xFF	; 255
    6fb4:	9f ef       	ldi	r25, 0xFF	; 255
    6fb6:	04 c0       	rjmp	.+8      	; 0x6fc0 <Calculate_PID+0x7a4>
		PID_acc_temp1 = -MAX_ZGAIN;
	}

	if (PID_acc_temp2 > MAX_ZGAIN)
	{
		PID_acc_temp2 = MAX_ZGAIN;
    6fb8:	64 ef       	ldi	r22, 0xF4	; 244
    6fba:	71 e0       	ldi	r23, 0x01	; 1
    6fbc:	80 e0       	ldi	r24, 0x00	; 0
    6fbe:	90 e0       	ldi	r25, 0x00	; 0
	if (PID_acc_temp2 < -MAX_ZGAIN)
	{
		PID_acc_temp2 = -MAX_ZGAIN;
	}

	PID_ACCs[P1][YAW] = (int16_t)PID_acc_temp1; // Copy to global values
    6fc0:	d0 92 96 07 	sts	0x0796, r13
    6fc4:	c0 92 95 07 	sts	0x0795, r12
	PID_ACCs[P2][YAW] = (int16_t)PID_acc_temp2;	
    6fc8:	70 93 9c 07 	sts	0x079C, r23
    6fcc:	60 93 9b 07 	sts	0x079B, r22
}
    6fd0:	cf 59       	subi	r28, 0x9F	; 159
    6fd2:	df 4f       	sbci	r29, 0xFF	; 255
    6fd4:	e2 e1       	ldi	r30, 0x12	; 18
    6fd6:	0c 94 37 3d 	jmp	0x7a6e	; 0x7a6e <__epilogue_restores__>

00006fda <RxGetChannels>:
int16_t MonopolarThrottle;				// Monopolar throttle

// Get raw flight channel data (~2500 to 5000) and remove zero offset
// Use channel mapping for configurability
void RxGetChannels(void)
{
    6fda:	cf 93       	push	r28
    6fdc:	df 93       	push	r29
    6fde:	cf e0       	ldi	r28, 0x0F	; 15
    6fe0:	d7 e0       	ldi	r29, 0x07	; 7
    6fe2:	af e9       	ldi	r26, 0x9F	; 159
    6fe4:	b7 e0       	ldi	r27, 0x07	; 7
	static	int16_t	OldRxSum;			// Sum of all major channels
	int16_t	RxSumDiff;
	int16_t	RxSum, i;

	// Remove zero offsets
	for (i=0;i<MAX_RC_CHANNELS;i++)
    6fe6:	80 e0       	ldi	r24, 0x00	; 0
    6fe8:	90 e0       	ldi	r25, 0x00	; 0
	{
		RCinputs[i]	= RxChannel[i] - Config.RxChannelZeroOffset[i];
    6fea:	fc 01       	movw	r30, r24
    6fec:	ee 0f       	add	r30, r30
    6fee:	ff 1f       	adc	r31, r31
    6ff0:	e1 5c       	subi	r30, 0xC1	; 193
    6ff2:	f8 4f       	sbci	r31, 0xF8	; 248
    6ff4:	20 81       	ld	r18, Z
    6ff6:	31 81       	ldd	r19, Z+1	; 0x01
    6ff8:	49 91       	ld	r20, Y+
    6ffa:	59 91       	ld	r21, Y+
    6ffc:	24 1b       	sub	r18, r20
    6ffe:	35 0b       	sbc	r19, r21
    7000:	2d 93       	st	X+, r18
    7002:	3d 93       	st	X+, r19
	static	int16_t	OldRxSum;			// Sum of all major channels
	int16_t	RxSumDiff;
	int16_t	RxSum, i;

	// Remove zero offsets
	for (i=0;i<MAX_RC_CHANNELS;i++)
    7004:	01 96       	adiw	r24, 0x01	; 1
    7006:	88 30       	cpi	r24, 0x08	; 8
    7008:	91 05       	cpc	r25, r1
    700a:	79 f7       	brne	.-34     	; 0x6fea <RxGetChannels+0x10>
	{
		RCinputs[i]	= RxChannel[i] - Config.RxChannelZeroOffset[i];
	}

	// Special handling for monopolar throttle
	MonopolarThrottle = RxChannel[THROTTLE] - Config.RxChannelZeroOffset[THROTTLE];
    700c:	20 91 3f 07 	lds	r18, 0x073F
    7010:	30 91 40 07 	lds	r19, 0x0740
    7014:	80 91 0f 07 	lds	r24, 0x070F
    7018:	90 91 10 07 	lds	r25, 0x0710
    701c:	28 1b       	sub	r18, r24
    701e:	39 0b       	sbc	r19, r25
    7020:	30 93 9e 07 	sts	0x079E, r19
    7024:	20 93 9d 07 	sts	0x079D, r18

	// Bipolar throttle must use the nominal mid-point
	RCinputs[THROTTLE] = RxChannel[THROTTLE] - 3750;
    7028:	80 91 3f 07 	lds	r24, 0x073F
    702c:	90 91 40 07 	lds	r25, 0x0740
    7030:	86 5a       	subi	r24, 0xA6	; 166
    7032:	9e 40       	sbci	r25, 0x0E	; 14
    7034:	90 93 a0 07 	sts	0x07A0, r25
    7038:	80 93 9f 07 	sts	0x079F, r24

	// Reverse primary channels as requested
	if (Config.AileronPol == REVERSED)
    703c:	80 91 ab 05 	lds	r24, 0x05AB
    7040:	81 30       	cpi	r24, 0x01	; 1
    7042:	59 f4       	brne	.+22     	; 0x705a <RxGetChannels+0x80>
	{
		RCinputs[AILERON] = -RCinputs[AILERON];
    7044:	80 91 a1 07 	lds	r24, 0x07A1
    7048:	90 91 a2 07 	lds	r25, 0x07A2
    704c:	91 95       	neg	r25
    704e:	81 95       	neg	r24
    7050:	91 09       	sbc	r25, r1
    7052:	90 93 a2 07 	sts	0x07A2, r25
    7056:	80 93 a1 07 	sts	0x07A1, r24
	}

	if (Config.ElevatorPol == REVERSED)
    705a:	80 91 ac 05 	lds	r24, 0x05AC
    705e:	81 30       	cpi	r24, 0x01	; 1
    7060:	59 f4       	brne	.+22     	; 0x7078 <RxGetChannels+0x9e>
	{
		RCinputs[ELEVATOR] = -RCinputs[ELEVATOR];
    7062:	80 91 a3 07 	lds	r24, 0x07A3
    7066:	90 91 a4 07 	lds	r25, 0x07A4
    706a:	91 95       	neg	r25
    706c:	81 95       	neg	r24
    706e:	91 09       	sbc	r25, r1
    7070:	90 93 a4 07 	sts	0x07A4, r25
    7074:	80 93 a3 07 	sts	0x07A3, r24
	}

	if (Config.RudderPol == REVERSED)
    7078:	80 91 ad 05 	lds	r24, 0x05AD
    707c:	81 30       	cpi	r24, 0x01	; 1
    707e:	59 f4       	brne	.+22     	; 0x7096 <RxGetChannels+0xbc>
	{
		RCinputs[RUDDER] = -RCinputs[RUDDER];
    7080:	80 91 a5 07 	lds	r24, 0x07A5
    7084:	90 91 a6 07 	lds	r25, 0x07A6
    7088:	91 95       	neg	r25
    708a:	81 95       	neg	r24
    708c:	91 09       	sbc	r25, r1
    708e:	90 93 a6 07 	sts	0x07A6, r25
    7092:	80 93 a5 07 	sts	0x07A5, r24
	}

	// Calculate RX activity
	RxSum = RCinputs[AILERON] + RCinputs[ELEVATOR] + RCinputs[RUDDER];
    7096:	80 91 a1 07 	lds	r24, 0x07A1
    709a:	90 91 a2 07 	lds	r25, 0x07A2
    709e:	40 91 a3 07 	lds	r20, 0x07A3
    70a2:	50 91 a4 07 	lds	r21, 0x07A4
    70a6:	84 0f       	add	r24, r20
    70a8:	95 1f       	adc	r25, r21
    70aa:	40 91 a5 07 	lds	r20, 0x07A5
    70ae:	50 91 a6 07 	lds	r21, 0x07A6
    70b2:	84 0f       	add	r24, r20
    70b4:	95 1f       	adc	r25, r21
	RxSumDiff = RxSum - OldRxSum;
    70b6:	40 91 2b 01 	lds	r20, 0x012B
    70ba:	50 91 2c 01 	lds	r21, 0x012C
    70be:	bc 01       	movw	r22, r24
    70c0:	64 1b       	sub	r22, r20
    70c2:	75 0b       	sbc	r23, r21
    70c4:	ab 01       	movw	r20, r22

	// Set RX activity flag if movement above noise floor or throttle above minimum
	if ((RxSumDiff > NOISE_THRESH) || (RxSumDiff < -NOISE_THRESH) || (MonopolarThrottle > THROTTLEIDLE)) 
    70c6:	4b 5f       	subi	r20, 0xFB	; 251
    70c8:	5f 4f       	sbci	r21, 0xFF	; 255
    70ca:	60 91 0d 01 	lds	r22, 0x010D
    70ce:	4b 30       	cpi	r20, 0x0B	; 11
    70d0:	51 05       	cpc	r21, r1
    70d2:	18 f4       	brcc	.+6      	; 0x70da <RxGetChannels+0x100>
    70d4:	23 33       	cpi	r18, 0x33	; 51
    70d6:	31 05       	cpc	r19, r1
    70d8:	14 f0       	brlt	.+4      	; 0x70de <RxGetChannels+0x104>
	{
		Flight_flags |= (1 << RxActivity);
    70da:	61 60       	ori	r22, 0x01	; 1
    70dc:	01 c0       	rjmp	.+2      	; 0x70e0 <RxGetChannels+0x106>
	}
	else 
	{
		Flight_flags &= ~(1 << RxActivity);
    70de:	6e 7f       	andi	r22, 0xFE	; 254
    70e0:	60 93 0d 01 	sts	0x010D, r22
	}
	
	// Preset RCinputs[NOCHAN] for sanity
	RCinputs[NOCHAN] = 0;
    70e4:	10 92 b0 07 	sts	0x07B0, r1
    70e8:	10 92 af 07 	sts	0x07AF, r1

	OldRxSum = RxSum;
    70ec:	90 93 2c 01 	sts	0x012C, r25
    70f0:	80 93 2b 01 	sts	0x012B, r24
}
    70f4:	df 91       	pop	r29
    70f6:	cf 91       	pop	r28
    70f8:	08 95       	ret

000070fa <CenterSticks>:

// Center sticks on request from Menu
void CenterSticks(void)		
{
    70fa:	a0 e1       	ldi	r26, 0x10	; 16
    70fc:	b0 e0       	ldi	r27, 0x00	; 0
    70fe:	e3 e8       	ldi	r30, 0x83	; 131
    7100:	f8 e3       	ldi	r31, 0x38	; 56
    7102:	0c 94 29 3d 	jmp	0x7a52	; 0x7a52 <__prologue_saves__+0x1c>
	uint8_t i, j;
	uint16_t RxChannelZeroOffset[MAX_RC_CHANNELS] = {0,0,0,0,0,0,0,0};
    7106:	8e 01       	movw	r16, r28
    7108:	0f 5f       	subi	r16, 0xFF	; 255
    710a:	1f 4f       	sbci	r17, 0xFF	; 255
    710c:	80 e1       	ldi	r24, 0x10	; 16
    710e:	d8 01       	movw	r26, r16
    7110:	1d 92       	st	X+, r1
    7112:	8a 95       	dec	r24
    7114:	e9 f7       	brne	.-6      	; 0x7110 <CenterSticks+0x16>
    7116:	68 e0       	ldi	r22, 0x08	; 8
	OldRxSum = RxSum;
}

// Center sticks on request from Menu
void CenterSticks(void)		
{
    7118:	d8 01       	movw	r26, r16
    711a:	80 e0       	ldi	r24, 0x00	; 0
    711c:	90 e0       	ldi	r25, 0x00	; 0
	// RxChannel will auto-update every RC frame (normally 46Hz or so)
	for (i=0; i<8; i++)
	{
		for (j=0; j<MAX_RC_CHANNELS; j++)
		{
			RxChannelZeroOffset[j] += RxChannel[j];
    711e:	9c 01       	movw	r18, r24
    7120:	22 0f       	add	r18, r18
    7122:	33 1f       	adc	r19, r19
    7124:	21 5c       	subi	r18, 0xC1	; 193
    7126:	38 4f       	sbci	r19, 0xF8	; 248
    7128:	f9 01       	movw	r30, r18
    712a:	40 81       	ld	r20, Z
    712c:	51 81       	ldd	r21, Z+1	; 0x01
    712e:	2d 91       	ld	r18, X+
    7130:	3c 91       	ld	r19, X
    7132:	11 97       	sbiw	r26, 0x01	; 1
    7134:	24 0f       	add	r18, r20
    7136:	35 1f       	adc	r19, r21
    7138:	2d 93       	st	X+, r18
    713a:	3d 93       	st	X+, r19
    713c:	01 96       	adiw	r24, 0x01	; 1

	// Take an average of eight readings
	// RxChannel will auto-update every RC frame (normally 46Hz or so)
	for (i=0; i<8; i++)
	{
		for (j=0; j<MAX_RC_CHANNELS; j++)
    713e:	88 30       	cpi	r24, 0x08	; 8
    7140:	91 05       	cpc	r25, r1
    7142:	69 f7       	brne	.-38     	; 0x711e <CenterSticks+0x24>
    7144:	ff e7       	ldi	r31, 0x7F	; 127
    7146:	2a e1       	ldi	r18, 0x1A	; 26
    7148:	86 e0       	ldi	r24, 0x06	; 6
    714a:	f1 50       	subi	r31, 0x01	; 1
    714c:	20 40       	sbci	r18, 0x00	; 0
    714e:	80 40       	sbci	r24, 0x00	; 0
    7150:	e1 f7       	brne	.-8      	; 0x714a <CenterSticks+0x50>
    7152:	00 c0       	rjmp	.+0      	; 0x7154 <CenterSticks+0x5a>
    7154:	00 00       	nop
    7156:	61 50       	subi	r22, 0x01	; 1
	uint8_t i, j;
	uint16_t RxChannelZeroOffset[MAX_RC_CHANNELS] = {0,0,0,0,0,0,0,0};

	// Take an average of eight readings
	// RxChannel will auto-update every RC frame (normally 46Hz or so)
	for (i=0; i<8; i++)
    7158:	f9 f6       	brne	.-66     	; 0x7118 <CenterSticks+0x1e>
    715a:	af e0       	ldi	r26, 0x0F	; 15
    715c:	b7 e0       	ldi	r27, 0x07	; 7
    715e:	9e 01       	movw	r18, r28
    7160:	2f 5e       	subi	r18, 0xEF	; 239
    7162:	3f 4f       	sbci	r19, 0xFF	; 255
    7164:	f8 01       	movw	r30, r16
		_delay_ms(100);
	}

	for (i=0;i<MAX_RC_CHANNELS;i++)
	{
		Config.RxChannelZeroOffset[i] = ((RxChannelZeroOffset[i] + 4) >> 3); // Round and divide by 8
    7166:	81 91       	ld	r24, Z+
    7168:	91 91       	ld	r25, Z+
    716a:	04 96       	adiw	r24, 0x04	; 4
    716c:	43 e0       	ldi	r20, 0x03	; 3
    716e:	96 95       	lsr	r25
    7170:	87 95       	ror	r24
    7172:	4a 95       	dec	r20
    7174:	e1 f7       	brne	.-8      	; 0x716e <CenterSticks+0x74>
    7176:	8d 93       	st	X+, r24
    7178:	9d 93       	st	X+, r25
			RxChannelZeroOffset[j] += RxChannel[j];
		}
		_delay_ms(100);
	}

	for (i=0;i<MAX_RC_CHANNELS;i++)
    717a:	e2 17       	cp	r30, r18
    717c:	f3 07       	cpc	r31, r19
    717e:	99 f7       	brne	.-26     	; 0x7166 <CenterSticks+0x6c>
	{
		Config.RxChannelZeroOffset[i] = ((RxChannelZeroOffset[i] + 4) >> 3); // Round and divide by 8
	}

	Save_Config_to_EEPROM();
    7180:	0e 94 31 16 	call	0x2c62	; 0x2c62 <Save_Config_to_EEPROM>
}
    7184:	60 96       	adiw	r28, 0x10	; 16
    7186:	e4 e0       	ldi	r30, 0x04	; 4
    7188:	0c 94 45 3d 	jmp	0x7a8a	; 0x7a8a <__epilogue_restores__+0x1c>

0000718c <output_servo_ppm>:
//************************************************************

volatile uint16_t ServoOut[MAX_OUTPUTS]; // Hands off my servos!

void output_servo_ppm(void)
{
    718c:	a0 e0       	ldi	r26, 0x00	; 0
    718e:	b0 e0       	ldi	r27, 0x00	; 0
    7190:	ec ec       	ldi	r30, 0xCC	; 204
    7192:	f8 e3       	ldi	r31, 0x38	; 56
    7194:	0c 94 25 3d 	jmp	0x7a4a	; 0x7a4a <__prologue_saves__+0x14>
    7198:	c0 e0       	ldi	r28, 0x00	; 0
    719a:	d0 e0       	ldi	r29, 0x00	; 0

	// Scale servo from 2500~5000 to 1000~2000
	for (i = 0; i < MAX_OUTPUTS; i++)
	{
		temp = ServoOut[i];					// Promote to 32 bits
		temp = ((temp << 2) + 5) / 10; 		// Round and convert
    719c:	fa e0       	ldi	r31, 0x0A	; 10
    719e:	cf 2e       	mov	r12, r31
    71a0:	d1 2c       	mov	r13, r1
    71a2:	e1 2c       	mov	r14, r1
    71a4:	f1 2c       	mov	r15, r1
	uint8_t i;

	// Scale servo from 2500~5000 to 1000~2000
	for (i = 0; i < MAX_OUTPUTS; i++)
	{
		temp = ServoOut[i];					// Promote to 32 bits
    71a6:	8e 01       	movw	r16, r28
    71a8:	00 0f       	add	r16, r16
    71aa:	11 1f       	adc	r17, r17
    71ac:	0f 54       	subi	r16, 0x4F	; 79
    71ae:	18 4f       	sbci	r17, 0xF8	; 248
    71b0:	f8 01       	movw	r30, r16
    71b2:	60 81       	ld	r22, Z
    71b4:	71 81       	ldd	r23, Z+1	; 0x01
    71b6:	80 e0       	ldi	r24, 0x00	; 0
    71b8:	90 e0       	ldi	r25, 0x00	; 0
		temp = ((temp << 2) + 5) / 10; 		// Round and convert
    71ba:	e2 e0       	ldi	r30, 0x02	; 2
    71bc:	66 0f       	add	r22, r22
    71be:	77 1f       	adc	r23, r23
    71c0:	88 1f       	adc	r24, r24
    71c2:	99 1f       	adc	r25, r25
    71c4:	ea 95       	dec	r30
    71c6:	d1 f7       	brne	.-12     	; 0x71bc <output_servo_ppm+0x30>
    71c8:	6b 5f       	subi	r22, 0xFB	; 251
    71ca:	7f 4f       	sbci	r23, 0xFF	; 255
    71cc:	8f 4f       	sbci	r24, 0xFF	; 255
    71ce:	9f 4f       	sbci	r25, 0xFF	; 255
    71d0:	a7 01       	movw	r20, r14
    71d2:	96 01       	movw	r18, r12
    71d4:	0e 94 a3 3c 	call	0x7946	; 0x7946 <__udivmodsi4>
		ServoOut[i] = (uint16_t)temp;
    71d8:	f8 01       	movw	r30, r16
    71da:	31 83       	std	Z+1, r19	; 0x01
    71dc:	20 83       	st	Z, r18
    71de:	21 96       	adiw	r28, 0x01	; 1
{
	uint32_t temp;
	uint8_t i;

	// Scale servo from 2500~5000 to 1000~2000
	for (i = 0; i < MAX_OUTPUTS; i++)
    71e0:	c8 30       	cpi	r28, 0x08	; 8
    71e2:	d1 05       	cpc	r29, r1
    71e4:	01 f7       	brne	.-64     	; 0x71a6 <output_servo_ppm+0x1a>
		temp = ((temp << 2) + 5) / 10; 		// Round and convert
		ServoOut[i] = (uint16_t)temp;
	}

	// Re-sample throttle value
	MonopolarThrottle = RxChannel[THROTTLE] - Config.RxChannelZeroOffset[THROTTLE];
    71e6:	80 91 3f 07 	lds	r24, 0x073F
    71ea:	90 91 40 07 	lds	r25, 0x0740
    71ee:	20 91 0f 07 	lds	r18, 0x070F
    71f2:	30 91 10 07 	lds	r19, 0x0710
    71f6:	82 1b       	sub	r24, r18
    71f8:	93 0b       	sbc	r25, r19
    71fa:	90 93 9e 07 	sts	0x079E, r25
    71fe:	80 93 9d 07 	sts	0x079D, r24

	// Check for motor flags if throttle is below arming minimum or disarmed
	// and set all motors to minimum throttle if so
	if 	(
    7202:	c2 97       	sbiw	r24, 0x32	; 50
    7204:	a4 f0       	brlt	.+40     	; 0x722e <output_servo_ppm+0xa2>
			(MonopolarThrottle < THROTTLEIDLE) || 
			((General_error & (1 << DISARMED)) != 0)
    7206:	80 91 0e 01 	lds	r24, 0x010E
	MonopolarThrottle = RxChannel[THROTTLE] - Config.RxChannelZeroOffset[THROTTLE];

	// Check for motor flags if throttle is below arming minimum or disarmed
	// and set all motors to minimum throttle if so
	if 	(
			(MonopolarThrottle < THROTTLEIDLE) || 
    720a:	84 fd       	sbrc	r24, 4
    720c:	10 c0       	rjmp	.+32     	; 0x722e <output_servo_ppm+0xa2>
			}
		}
	}

	// Suppress outputs during throttle high error
	if((General_error & (1 << THROTTLE_HIGH)) == 0)
    720e:	80 91 0e 01 	lds	r24, 0x010E
    7212:	81 fd       	sbrc	r24, 1
    7214:	23 c0       	rjmp	.+70     	; 0x725c <output_servo_ppm+0xd0>
	{
		// Reset JitterFlag immediately before PWM generation
		JitterFlag = false;
    7216:	10 92 67 07 	sts	0x0767, r1

		// We now care about interrupts
		JitterGate = true;
    721a:	81 e0       	ldi	r24, 0x01	; 1
    721c:	80 93 66 07 	sts	0x0766, r24

		// Pass address of ServoOut array
		output_servo_ppm_asm(&ServoOut[0]);
    7220:	81 eb       	ldi	r24, 0xB1	; 177
    7222:	97 e0       	ldi	r25, 0x07	; 7
    7224:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <output_servo_ppm_asm>

		// We no longer care about interrupts
		JitterGate = false;
    7228:	10 92 66 07 	sts	0x0766, r1
    722c:	17 c0       	rjmp	.+46     	; 0x725c <output_servo_ppm+0xd0>
    722e:	e0 e2       	ldi	r30, 0x20	; 32
    7230:	f6 e0       	ldi	r31, 0x06	; 6
//************************************************************

volatile uint16_t ServoOut[MAX_OUTPUTS]; // Hands off my servos!

void output_servo_ppm(void)
{
    7232:	80 e0       	ldi	r24, 0x00	; 0
    7234:	90 e0       	ldi	r25, 0x00	; 0
		{
			// Check for motor marker
			if ((Config.Channel[i].P1_sensors & (1 << MotorMarker)) != 0)
			{
				// Set output to minimum pulse width
				ServoOut[i] = MOTORMIN;
    7236:	28 ee       	ldi	r18, 0xE8	; 232
    7238:	33 e0       	ldi	r19, 0x03	; 3
	{
		// For each output
		for (i = 0; i < MAX_OUTPUTS; i++)
		{
			// Check for motor marker
			if ((Config.Channel[i].P1_sensors & (1 << MotorMarker)) != 0)
    723a:	40 81       	ld	r20, Z
    723c:	46 ff       	sbrs	r20, 6
    723e:	08 c0       	rjmp	.+16     	; 0x7250 <output_servo_ppm+0xc4>
			{
				// Set output to minimum pulse width
				ServoOut[i] = MOTORMIN;
    7240:	dc 01       	movw	r26, r24
    7242:	aa 0f       	add	r26, r26
    7244:	bb 1f       	adc	r27, r27
    7246:	af 54       	subi	r26, 0x4F	; 79
    7248:	b8 4f       	sbci	r27, 0xF8	; 248
    724a:	11 96       	adiw	r26, 0x01	; 1
    724c:	3c 93       	st	X, r19
    724e:	2e 93       	st	-X, r18
    7250:	01 96       	adiw	r24, 0x01	; 1
    7252:	7d 96       	adiw	r30, 0x1d	; 29
			(MonopolarThrottle < THROTTLEIDLE) || 
			((General_error & (1 << DISARMED)) != 0)
		)
	{
		// For each output
		for (i = 0; i < MAX_OUTPUTS; i++)
    7254:	88 30       	cpi	r24, 0x08	; 8
    7256:	91 05       	cpc	r25, r1
    7258:	81 f7       	brne	.-32     	; 0x723a <output_servo_ppm+0xae>
    725a:	d9 cf       	rjmp	.-78     	; 0x720e <output_servo_ppm+0x82>

		// We no longer care about interrupts
		JitterGate = false;

	}
}
    725c:	cd b7       	in	r28, 0x3d	; 61
    725e:	de b7       	in	r29, 0x3e	; 62
    7260:	e8 e0       	ldi	r30, 0x08	; 8
    7262:	0c 94 41 3d 	jmp	0x7a82	; 0x7a82 <__epilogue_restores__+0x14>

00007266 <init_uart>:
#define BAUD_PRESCALE_SPEKTRUM ((F_CPU + USART_BAUDRATE_SPEKTRUM * 8L) / (USART_BAUDRATE_SPEKTRUM * 16L) - 1) // Default RX rate for Spektrum

// Initialise UART with adjusted bitrate
void init_uart(void)
{
	cli();								// Atmel wants global interrupts disabled when changing UART setup on the fly
    7266:	f8 94       	cli
	
	UCSR0B &= ~(1 << RXCIE0);			// Disable serial interrupt
    7268:	80 91 c1 00 	lds	r24, 0x00C1
    726c:	8f 77       	andi	r24, 0x7F	; 127
    726e:	80 93 c1 00 	sts	0x00C1, r24

	while (UCSR0A & (1 << RXC0))		// Make sure there is nothing in the RX0 reg
    7272:	80 91 c0 00 	lds	r24, 0x00C0
    7276:	87 ff       	sbrs	r24, 7
    7278:	05 c0       	rjmp	.+10     	; 0x7284 <init_uart+0x1e>
	{
		UCSR0C = UDR0;					// So as not to annoy Studio 6, use UCSR0C as a temp erg until UDR0 empty. Sorry, UCSR0C...
    727a:	80 91 c6 00 	lds	r24, 0x00C6
    727e:	80 93 c2 00 	sts	0x00C2, r24
    7282:	f7 cf       	rjmp	.-18     	; 0x7272 <init_uart+0xc>
	}
	
	// Reset UART regs to a known state
	UCSR0A = 0; // U2X = 0, no master mode, flags cleared 
    7284:	10 92 c0 00 	sts	0x00C0, r1
	UCSR0B = 0; // Clear flags, disable tx/rx, 8 bits
    7288:	10 92 c1 00 	sts	0x00C1, r1
	UCSR0C = 6; // 8N1
    728c:	86 e0       	ldi	r24, 0x06	; 6
    728e:	80 93 c2 00 	sts	0x00C2, r24

	switch (Config.RxMode)
    7292:	80 91 a7 05 	lds	r24, 0x05A7
    7296:	82 30       	cpi	r24, 0x02	; 2
    7298:	09 f1       	breq	.+66     	; 0x72dc <init_uart+0x76>
    729a:	34 f4       	brge	.+12     	; 0x72a8 <init_uart+0x42>
    729c:	87 fd       	sbrc	r24, 7
    729e:	41 c0       	rjmp	.+130    	; 0x7322 <init_uart+0xbc>
			UCSR0B |=  (1 << RXCIE0);					// Enable serial interrupt
			break;

		case CPPM_MODE:
		case PWM:
			UCSR0B &= 	~(1 << RXEN0);					// Disable receiver in PWM and CPPM modes
    72a0:	80 91 c1 00 	lds	r24, 0x00C1
    72a4:	8f 7e       	andi	r24, 0xEF	; 239
    72a6:	3b c0       	rjmp	.+118    	; 0x731e <init_uart+0xb8>
	// Reset UART regs to a known state
	UCSR0A = 0; // U2X = 0, no master mode, flags cleared 
	UCSR0B = 0; // Clear flags, disable tx/rx, 8 bits
	UCSR0C = 6; // 8N1

	switch (Config.RxMode)
    72a8:	83 30       	cpi	r24, 0x03	; 3
    72aa:	d9 f5       	brne	.+118    	; 0x7322 <init_uart+0xbc>
			UCSR0B |=  (1 << RXCIE0);					// Enable serial interrupt
			break;

		// Spektrum 8N1 (8 data bits / No parity / 1 stop bit / 115.2Kbps)
		case SPEKTRUM: 	
			UCSR0A &=  ~(1 << U2X0);					// Clear the 2x flag
    72ac:	80 91 c0 00 	lds	r24, 0x00C0
    72b0:	8d 7f       	andi	r24, 0xFD	; 253
    72b2:	80 93 c0 00 	sts	0x00C0, r24
			UBRR0H  =  (BAUD_PRESCALE_SPEKTRUM >> 8); 	// Actual = 113636, Error = -1.36%
    72b6:	10 92 c5 00 	sts	0x00C5, r1
			UBRR0L  =   BAUD_PRESCALE_SPEKTRUM & 0xff;	// 0x0A (10.35)	
    72ba:	8a e0       	ldi	r24, 0x0A	; 10
    72bc:	80 93 c4 00 	sts	0x00C4, r24
			UCSR0B |= 	(1 << RXEN0);					// Enable receiver
    72c0:	80 91 c1 00 	lds	r24, 0x00C1
    72c4:	80 61       	ori	r24, 0x10	; 16
    72c6:	80 93 c1 00 	sts	0x00C1, r24
			UCSR0C &=  ~(1 << USBS0); 					// 1 stop bit
    72ca:	80 91 c2 00 	lds	r24, 0x00C2
    72ce:	87 7f       	andi	r24, 0xF7	; 247
    72d0:	80 93 c2 00 	sts	0x00C2, r24
			UCSR0C &=  ~(1 << UPM00) | 					// No parity 
    72d4:	80 91 c2 00 	lds	r24, 0x00C2
    72d8:	8f 7e       	andi	r24, 0xEF	; 239
    72da:	1c c0       	rjmp	.+56     	; 0x7314 <init_uart+0xae>

	switch (Config.RxMode)
	{
		// Futaba S-Bus 8E2 (8 data bits / Even parity / 2 stop bits / 100Kbps)
		case SBUS: 		
			UCSR0A |=  (1 << U2X0);						// Need to set the 2x flag
    72dc:	80 91 c0 00 	lds	r24, 0x00C0
    72e0:	82 60       	ori	r24, 0x02	; 2
    72e2:	80 93 c0 00 	sts	0x00C0, r24
			UBRR0H  = (BAUD_PRESCALE_SBUS >> 8);  		// Actual = 100000 , Error = 0%	
    72e6:	10 92 c5 00 	sts	0x00C5, r1
			UBRR0L  =  BAUD_PRESCALE_SBUS & 0xff;		// 0x18 (24)
    72ea:	88 e1       	ldi	r24, 0x18	; 24
    72ec:	80 93 c4 00 	sts	0x00C4, r24
			UCSR0B |=  (1 << RXEN0);					// Enable receiver
    72f0:	80 91 c1 00 	lds	r24, 0x00C1
    72f4:	80 61       	ori	r24, 0x10	; 16
    72f6:	80 93 c1 00 	sts	0x00C1, r24
			UCSR0C |=  (1 << USBS0); 					// 2 stop bits
    72fa:	80 91 c2 00 	lds	r24, 0x00C2
    72fe:	88 60       	ori	r24, 0x08	; 8
    7300:	80 93 c2 00 	sts	0x00C2, r24
			UCSR0C &= ~(1 << UPM00); 					// Even parity 
    7304:	80 91 c2 00 	lds	r24, 0x00C2
    7308:	8f 7e       	andi	r24, 0xEF	; 239
    730a:	80 93 c2 00 	sts	0x00C2, r24
			UCSR0C |=  (1 << UPM01); 
    730e:	80 91 c2 00 	lds	r24, 0x00C2
    7312:	80 62       	ori	r24, 0x20	; 32
			UCSR0A &=  ~(1 << U2X0);					// Clear the 2x flag
			UBRR0H  =  (BAUD_PRESCALE_SPEKTRUM >> 8); 	// Actual = 113636, Error = -1.36%
			UBRR0L  =   BAUD_PRESCALE_SPEKTRUM & 0xff;	// 0x0A (10.35)	
			UCSR0B |= 	(1 << RXEN0);					// Enable receiver
			UCSR0C &=  ~(1 << USBS0); 					// 1 stop bit
			UCSR0C &=  ~(1 << UPM00) | 					// No parity 
    7314:	80 93 c2 00 	sts	0x00C2, r24
						(1 << UPM01); 
			UCSR0B |=  (1 << RXCIE0);					// Enable serial interrupt
    7318:	80 91 c1 00 	lds	r24, 0x00C1
    731c:	80 68       	ori	r24, 0x80	; 128
			break;

		case CPPM_MODE:
		case PWM:
			UCSR0B &= 	~(1 << RXEN0);					// Disable receiver in PWM and CPPM modes
    731e:	80 93 c1 00 	sts	0x00C1, r24
		default:
			break;
	}

	// Re-enable interrupts
	sei();
    7322:	78 94       	sei
    7324:	08 95       	ret

00007326 <GetVbat>:

uint16_t GetVbat(void)				// Get battery voltage (VBAT on ADC3)
{
	uint16_t	vBat;				// Battery voltage
		
	read_adc(AIN_VBAT0);				// Multiplication factor = (Display volts / 1024) / (Vbat / 11 / Vref)
    7326:	83 e0       	ldi	r24, 0x03	; 3
    7328:	0e 94 48 10 	call	0x2090	; 0x2090 <read_adc>
	// For Vref = 2.45V, Multiplication factor = 2.632
	// For Vref = 2.305V, Multiplication factor = approx 2.5
	// An input voltage of 10V will results in a value of 999.
	// This means that the number represents units of 10mV.

	vBat = ADCW;
    732c:	80 91 78 00 	lds	r24, 0x0078
    7330:	90 91 79 00 	lds	r25, 0x0079
	vBat = (vBat << 1) + (vBat >> 1); // Multiply by 2.500

#else
	// Multiply by 2.633
	// 2 + 1/2 + 1/8 + 1/128 :)
	vBat = (vBat << 1) + (vBat >> 1) + (vBat >> 3) + (vBat >> 7); // Multiply by 2.633
    7334:	9c 01       	movw	r18, r24
    7336:	36 95       	lsr	r19
    7338:	27 95       	ror	r18
    733a:	ac 01       	movw	r20, r24
    733c:	44 0f       	add	r20, r20
    733e:	55 1f       	adc	r21, r21
    7340:	24 0f       	add	r18, r20
    7342:	35 1f       	adc	r19, r21
    7344:	ac 01       	movw	r20, r24
    7346:	73 e0       	ldi	r23, 0x03	; 3
    7348:	56 95       	lsr	r21
    734a:	47 95       	ror	r20
    734c:	7a 95       	dec	r23
    734e:	e1 f7       	brne	.-8      	; 0x7348 <GetVbat+0x22>
    7350:	24 0f       	add	r18, r20
    7352:	35 1f       	adc	r19, r21
    7354:	88 0f       	add	r24, r24
    7356:	89 2f       	mov	r24, r25
    7358:	88 1f       	adc	r24, r24
    735a:	99 0b       	sbc	r25, r25
    735c:	91 95       	neg	r25
#endif

	return vBat;
}
    735e:	82 0f       	add	r24, r18
    7360:	93 1f       	adc	r25, r19
    7362:	08 95       	ret

00007364 <__subsf3>:
    7364:	50 58       	subi	r21, 0x80	; 128

00007366 <__addsf3>:
    7366:	bb 27       	eor	r27, r27
    7368:	aa 27       	eor	r26, r26
    736a:	0e d0       	rcall	.+28     	; 0x7388 <__addsf3x>
    736c:	c2 c1       	rjmp	.+900    	; 0x76f2 <__fp_round>
    736e:	b3 d1       	rcall	.+870    	; 0x76d6 <__fp_pscA>
    7370:	30 f0       	brcs	.+12     	; 0x737e <__addsf3+0x18>
    7372:	b8 d1       	rcall	.+880    	; 0x76e4 <__fp_pscB>
    7374:	20 f0       	brcs	.+8      	; 0x737e <__addsf3+0x18>
    7376:	31 f4       	brne	.+12     	; 0x7384 <__addsf3+0x1e>
    7378:	9f 3f       	cpi	r25, 0xFF	; 255
    737a:	11 f4       	brne	.+4      	; 0x7380 <__addsf3+0x1a>
    737c:	1e f4       	brtc	.+6      	; 0x7384 <__addsf3+0x1e>
    737e:	83 c1       	rjmp	.+774    	; 0x7686 <__fp_nan>
    7380:	0e f4       	brtc	.+2      	; 0x7384 <__addsf3+0x1e>
    7382:	e0 95       	com	r30
    7384:	e7 fb       	bst	r30, 7
    7386:	79 c1       	rjmp	.+754    	; 0x767a <__fp_inf>

00007388 <__addsf3x>:
    7388:	e9 2f       	mov	r30, r25
    738a:	c4 d1       	rcall	.+904    	; 0x7714 <__fp_split3>
    738c:	80 f3       	brcs	.-32     	; 0x736e <__addsf3+0x8>
    738e:	ba 17       	cp	r27, r26
    7390:	62 07       	cpc	r22, r18
    7392:	73 07       	cpc	r23, r19
    7394:	84 07       	cpc	r24, r20
    7396:	95 07       	cpc	r25, r21
    7398:	18 f0       	brcs	.+6      	; 0x73a0 <__addsf3x+0x18>
    739a:	71 f4       	brne	.+28     	; 0x73b8 <__addsf3x+0x30>
    739c:	9e f5       	brtc	.+102    	; 0x7404 <__addsf3x+0x7c>
    739e:	dc c1       	rjmp	.+952    	; 0x7758 <__fp_zero>
    73a0:	0e f4       	brtc	.+2      	; 0x73a4 <__addsf3x+0x1c>
    73a2:	e0 95       	com	r30
    73a4:	0b 2e       	mov	r0, r27
    73a6:	ba 2f       	mov	r27, r26
    73a8:	a0 2d       	mov	r26, r0
    73aa:	0b 01       	movw	r0, r22
    73ac:	b9 01       	movw	r22, r18
    73ae:	90 01       	movw	r18, r0
    73b0:	0c 01       	movw	r0, r24
    73b2:	ca 01       	movw	r24, r20
    73b4:	a0 01       	movw	r20, r0
    73b6:	11 24       	eor	r1, r1
    73b8:	ff 27       	eor	r31, r31
    73ba:	59 1b       	sub	r21, r25
    73bc:	99 f0       	breq	.+38     	; 0x73e4 <__addsf3x+0x5c>
    73be:	59 3f       	cpi	r21, 0xF9	; 249
    73c0:	50 f4       	brcc	.+20     	; 0x73d6 <__addsf3x+0x4e>
    73c2:	50 3e       	cpi	r21, 0xE0	; 224
    73c4:	68 f1       	brcs	.+90     	; 0x7420 <__addsf3x+0x98>
    73c6:	1a 16       	cp	r1, r26
    73c8:	f0 40       	sbci	r31, 0x00	; 0
    73ca:	a2 2f       	mov	r26, r18
    73cc:	23 2f       	mov	r18, r19
    73ce:	34 2f       	mov	r19, r20
    73d0:	44 27       	eor	r20, r20
    73d2:	58 5f       	subi	r21, 0xF8	; 248
    73d4:	f3 cf       	rjmp	.-26     	; 0x73bc <__addsf3x+0x34>
    73d6:	46 95       	lsr	r20
    73d8:	37 95       	ror	r19
    73da:	27 95       	ror	r18
    73dc:	a7 95       	ror	r26
    73de:	f0 40       	sbci	r31, 0x00	; 0
    73e0:	53 95       	inc	r21
    73e2:	c9 f7       	brne	.-14     	; 0x73d6 <__addsf3x+0x4e>
    73e4:	7e f4       	brtc	.+30     	; 0x7404 <__addsf3x+0x7c>
    73e6:	1f 16       	cp	r1, r31
    73e8:	ba 0b       	sbc	r27, r26
    73ea:	62 0b       	sbc	r22, r18
    73ec:	73 0b       	sbc	r23, r19
    73ee:	84 0b       	sbc	r24, r20
    73f0:	ba f0       	brmi	.+46     	; 0x7420 <__addsf3x+0x98>
    73f2:	91 50       	subi	r25, 0x01	; 1
    73f4:	a1 f0       	breq	.+40     	; 0x741e <__addsf3x+0x96>
    73f6:	ff 0f       	add	r31, r31
    73f8:	bb 1f       	adc	r27, r27
    73fa:	66 1f       	adc	r22, r22
    73fc:	77 1f       	adc	r23, r23
    73fe:	88 1f       	adc	r24, r24
    7400:	c2 f7       	brpl	.-16     	; 0x73f2 <__addsf3x+0x6a>
    7402:	0e c0       	rjmp	.+28     	; 0x7420 <__addsf3x+0x98>
    7404:	ba 0f       	add	r27, r26
    7406:	62 1f       	adc	r22, r18
    7408:	73 1f       	adc	r23, r19
    740a:	84 1f       	adc	r24, r20
    740c:	48 f4       	brcc	.+18     	; 0x7420 <__addsf3x+0x98>
    740e:	87 95       	ror	r24
    7410:	77 95       	ror	r23
    7412:	67 95       	ror	r22
    7414:	b7 95       	ror	r27
    7416:	f7 95       	ror	r31
    7418:	9e 3f       	cpi	r25, 0xFE	; 254
    741a:	08 f0       	brcs	.+2      	; 0x741e <__addsf3x+0x96>
    741c:	b3 cf       	rjmp	.-154    	; 0x7384 <__addsf3+0x1e>
    741e:	93 95       	inc	r25
    7420:	88 0f       	add	r24, r24
    7422:	08 f0       	brcs	.+2      	; 0x7426 <__addsf3x+0x9e>
    7424:	99 27       	eor	r25, r25
    7426:	ee 0f       	add	r30, r30
    7428:	97 95       	ror	r25
    742a:	87 95       	ror	r24
    742c:	08 95       	ret

0000742e <atan>:
    742e:	df 93       	push	r29
    7430:	dd 27       	eor	r29, r29
    7432:	b9 2f       	mov	r27, r25
    7434:	bf 77       	andi	r27, 0x7F	; 127
    7436:	40 e8       	ldi	r20, 0x80	; 128
    7438:	5f e3       	ldi	r21, 0x3F	; 63
    743a:	16 16       	cp	r1, r22
    743c:	17 06       	cpc	r1, r23
    743e:	48 07       	cpc	r20, r24
    7440:	5b 07       	cpc	r21, r27
    7442:	10 f4       	brcc	.+4      	; 0x7448 <atan+0x1a>
    7444:	d9 2f       	mov	r29, r25
    7446:	93 d1       	rcall	.+806    	; 0x776e <inverse>
    7448:	9f 93       	push	r25
    744a:	8f 93       	push	r24
    744c:	7f 93       	push	r23
    744e:	6f 93       	push	r22
    7450:	3a d2       	rcall	.+1140   	; 0x78c6 <square>
    7452:	e2 ea       	ldi	r30, 0xA2	; 162
    7454:	f0 e0       	ldi	r31, 0x00	; 0
    7456:	1a d1       	rcall	.+564    	; 0x768c <__fp_powser>
    7458:	4c d1       	rcall	.+664    	; 0x76f2 <__fp_round>
    745a:	2f 91       	pop	r18
    745c:	3f 91       	pop	r19
    745e:	4f 91       	pop	r20
    7460:	5f 91       	pop	r21
    7462:	98 d1       	rcall	.+816    	; 0x7794 <__mulsf3x>
    7464:	dd 23       	and	r29, r29
    7466:	49 f0       	breq	.+18     	; 0x747a <atan+0x4c>
    7468:	90 58       	subi	r25, 0x80	; 128
    746a:	a2 ea       	ldi	r26, 0xA2	; 162
    746c:	2a ed       	ldi	r18, 0xDA	; 218
    746e:	3f e0       	ldi	r19, 0x0F	; 15
    7470:	49 ec       	ldi	r20, 0xC9	; 201
    7472:	5f e3       	ldi	r21, 0x3F	; 63
    7474:	d0 78       	andi	r29, 0x80	; 128
    7476:	5d 27       	eor	r21, r29
    7478:	87 df       	rcall	.-242    	; 0x7388 <__addsf3x>
    747a:	df 91       	pop	r29
    747c:	3a c1       	rjmp	.+628    	; 0x76f2 <__fp_round>

0000747e <__cmpsf2>:
    747e:	d9 d0       	rcall	.+434    	; 0x7632 <__fp_cmp>
    7480:	08 f4       	brcc	.+2      	; 0x7484 <__cmpsf2+0x6>
    7482:	81 e0       	ldi	r24, 0x01	; 1
    7484:	08 95       	ret

00007486 <__divsf3>:
    7486:	0c d0       	rcall	.+24     	; 0x74a0 <__divsf3x>
    7488:	34 c1       	rjmp	.+616    	; 0x76f2 <__fp_round>
    748a:	2c d1       	rcall	.+600    	; 0x76e4 <__fp_pscB>
    748c:	40 f0       	brcs	.+16     	; 0x749e <__divsf3+0x18>
    748e:	23 d1       	rcall	.+582    	; 0x76d6 <__fp_pscA>
    7490:	30 f0       	brcs	.+12     	; 0x749e <__divsf3+0x18>
    7492:	21 f4       	brne	.+8      	; 0x749c <__divsf3+0x16>
    7494:	5f 3f       	cpi	r21, 0xFF	; 255
    7496:	19 f0       	breq	.+6      	; 0x749e <__divsf3+0x18>
    7498:	f0 c0       	rjmp	.+480    	; 0x767a <__fp_inf>
    749a:	51 11       	cpse	r21, r1
    749c:	5e c1       	rjmp	.+700    	; 0x775a <__fp_szero>
    749e:	f3 c0       	rjmp	.+486    	; 0x7686 <__fp_nan>

000074a0 <__divsf3x>:
    74a0:	39 d1       	rcall	.+626    	; 0x7714 <__fp_split3>
    74a2:	98 f3       	brcs	.-26     	; 0x748a <__divsf3+0x4>

000074a4 <__divsf3_pse>:
    74a4:	99 23       	and	r25, r25
    74a6:	c9 f3       	breq	.-14     	; 0x749a <__divsf3+0x14>
    74a8:	55 23       	and	r21, r21
    74aa:	b1 f3       	breq	.-20     	; 0x7498 <__divsf3+0x12>
    74ac:	95 1b       	sub	r25, r21
    74ae:	55 0b       	sbc	r21, r21
    74b0:	bb 27       	eor	r27, r27
    74b2:	aa 27       	eor	r26, r26
    74b4:	62 17       	cp	r22, r18
    74b6:	73 07       	cpc	r23, r19
    74b8:	84 07       	cpc	r24, r20
    74ba:	38 f0       	brcs	.+14     	; 0x74ca <__divsf3_pse+0x26>
    74bc:	9f 5f       	subi	r25, 0xFF	; 255
    74be:	5f 4f       	sbci	r21, 0xFF	; 255
    74c0:	22 0f       	add	r18, r18
    74c2:	33 1f       	adc	r19, r19
    74c4:	44 1f       	adc	r20, r20
    74c6:	aa 1f       	adc	r26, r26
    74c8:	a9 f3       	breq	.-22     	; 0x74b4 <__divsf3_pse+0x10>
    74ca:	33 d0       	rcall	.+102    	; 0x7532 <__divsf3_pse+0x8e>
    74cc:	0e 2e       	mov	r0, r30
    74ce:	3a f0       	brmi	.+14     	; 0x74de <__divsf3_pse+0x3a>
    74d0:	e0 e8       	ldi	r30, 0x80	; 128
    74d2:	30 d0       	rcall	.+96     	; 0x7534 <__divsf3_pse+0x90>
    74d4:	91 50       	subi	r25, 0x01	; 1
    74d6:	50 40       	sbci	r21, 0x00	; 0
    74d8:	e6 95       	lsr	r30
    74da:	00 1c       	adc	r0, r0
    74dc:	ca f7       	brpl	.-14     	; 0x74d0 <__divsf3_pse+0x2c>
    74de:	29 d0       	rcall	.+82     	; 0x7532 <__divsf3_pse+0x8e>
    74e0:	fe 2f       	mov	r31, r30
    74e2:	27 d0       	rcall	.+78     	; 0x7532 <__divsf3_pse+0x8e>
    74e4:	66 0f       	add	r22, r22
    74e6:	77 1f       	adc	r23, r23
    74e8:	88 1f       	adc	r24, r24
    74ea:	bb 1f       	adc	r27, r27
    74ec:	26 17       	cp	r18, r22
    74ee:	37 07       	cpc	r19, r23
    74f0:	48 07       	cpc	r20, r24
    74f2:	ab 07       	cpc	r26, r27
    74f4:	b0 e8       	ldi	r27, 0x80	; 128
    74f6:	09 f0       	breq	.+2      	; 0x74fa <__divsf3_pse+0x56>
    74f8:	bb 0b       	sbc	r27, r27
    74fa:	80 2d       	mov	r24, r0
    74fc:	bf 01       	movw	r22, r30
    74fe:	ff 27       	eor	r31, r31
    7500:	93 58       	subi	r25, 0x83	; 131
    7502:	5f 4f       	sbci	r21, 0xFF	; 255
    7504:	2a f0       	brmi	.+10     	; 0x7510 <__divsf3_pse+0x6c>
    7506:	9e 3f       	cpi	r25, 0xFE	; 254
    7508:	51 05       	cpc	r21, r1
    750a:	68 f0       	brcs	.+26     	; 0x7526 <__divsf3_pse+0x82>
    750c:	b6 c0       	rjmp	.+364    	; 0x767a <__fp_inf>
    750e:	25 c1       	rjmp	.+586    	; 0x775a <__fp_szero>
    7510:	5f 3f       	cpi	r21, 0xFF	; 255
    7512:	ec f3       	brlt	.-6      	; 0x750e <__divsf3_pse+0x6a>
    7514:	98 3e       	cpi	r25, 0xE8	; 232
    7516:	dc f3       	brlt	.-10     	; 0x750e <__divsf3_pse+0x6a>
    7518:	86 95       	lsr	r24
    751a:	77 95       	ror	r23
    751c:	67 95       	ror	r22
    751e:	b7 95       	ror	r27
    7520:	f7 95       	ror	r31
    7522:	9f 5f       	subi	r25, 0xFF	; 255
    7524:	c9 f7       	brne	.-14     	; 0x7518 <__divsf3_pse+0x74>
    7526:	88 0f       	add	r24, r24
    7528:	91 1d       	adc	r25, r1
    752a:	96 95       	lsr	r25
    752c:	87 95       	ror	r24
    752e:	97 f9       	bld	r25, 7
    7530:	08 95       	ret
    7532:	e1 e0       	ldi	r30, 0x01	; 1
    7534:	66 0f       	add	r22, r22
    7536:	77 1f       	adc	r23, r23
    7538:	88 1f       	adc	r24, r24
    753a:	bb 1f       	adc	r27, r27
    753c:	62 17       	cp	r22, r18
    753e:	73 07       	cpc	r23, r19
    7540:	84 07       	cpc	r24, r20
    7542:	ba 07       	cpc	r27, r26
    7544:	20 f0       	brcs	.+8      	; 0x754e <__divsf3_pse+0xaa>
    7546:	62 1b       	sub	r22, r18
    7548:	73 0b       	sbc	r23, r19
    754a:	84 0b       	sbc	r24, r20
    754c:	ba 0b       	sbc	r27, r26
    754e:	ee 1f       	adc	r30, r30
    7550:	88 f7       	brcc	.-30     	; 0x7534 <__divsf3_pse+0x90>
    7552:	e0 95       	com	r30
    7554:	08 95       	ret

00007556 <__fixsfsi>:
    7556:	04 d0       	rcall	.+8      	; 0x7560 <__fixunssfsi>
    7558:	68 94       	set
    755a:	b1 11       	cpse	r27, r1
    755c:	fe c0       	rjmp	.+508    	; 0x775a <__fp_szero>
    755e:	08 95       	ret

00007560 <__fixunssfsi>:
    7560:	e1 d0       	rcall	.+450    	; 0x7724 <__fp_splitA>
    7562:	88 f0       	brcs	.+34     	; 0x7586 <__fixunssfsi+0x26>
    7564:	9f 57       	subi	r25, 0x7F	; 127
    7566:	90 f0       	brcs	.+36     	; 0x758c <__fixunssfsi+0x2c>
    7568:	b9 2f       	mov	r27, r25
    756a:	99 27       	eor	r25, r25
    756c:	b7 51       	subi	r27, 0x17	; 23
    756e:	a0 f0       	brcs	.+40     	; 0x7598 <__fixunssfsi+0x38>
    7570:	d1 f0       	breq	.+52     	; 0x75a6 <__fixunssfsi+0x46>
    7572:	66 0f       	add	r22, r22
    7574:	77 1f       	adc	r23, r23
    7576:	88 1f       	adc	r24, r24
    7578:	99 1f       	adc	r25, r25
    757a:	1a f0       	brmi	.+6      	; 0x7582 <__fixunssfsi+0x22>
    757c:	ba 95       	dec	r27
    757e:	c9 f7       	brne	.-14     	; 0x7572 <__fixunssfsi+0x12>
    7580:	12 c0       	rjmp	.+36     	; 0x75a6 <__fixunssfsi+0x46>
    7582:	b1 30       	cpi	r27, 0x01	; 1
    7584:	81 f0       	breq	.+32     	; 0x75a6 <__fixunssfsi+0x46>
    7586:	e8 d0       	rcall	.+464    	; 0x7758 <__fp_zero>
    7588:	b1 e0       	ldi	r27, 0x01	; 1
    758a:	08 95       	ret
    758c:	e5 c0       	rjmp	.+458    	; 0x7758 <__fp_zero>
    758e:	67 2f       	mov	r22, r23
    7590:	78 2f       	mov	r23, r24
    7592:	88 27       	eor	r24, r24
    7594:	b8 5f       	subi	r27, 0xF8	; 248
    7596:	39 f0       	breq	.+14     	; 0x75a6 <__fixunssfsi+0x46>
    7598:	b9 3f       	cpi	r27, 0xF9	; 249
    759a:	cc f3       	brlt	.-14     	; 0x758e <__fixunssfsi+0x2e>
    759c:	86 95       	lsr	r24
    759e:	77 95       	ror	r23
    75a0:	67 95       	ror	r22
    75a2:	b3 95       	inc	r27
    75a4:	d9 f7       	brne	.-10     	; 0x759c <__fixunssfsi+0x3c>
    75a6:	3e f4       	brtc	.+14     	; 0x75b6 <__fixunssfsi+0x56>
    75a8:	90 95       	com	r25
    75aa:	80 95       	com	r24
    75ac:	70 95       	com	r23
    75ae:	61 95       	neg	r22
    75b0:	7f 4f       	sbci	r23, 0xFF	; 255
    75b2:	8f 4f       	sbci	r24, 0xFF	; 255
    75b4:	9f 4f       	sbci	r25, 0xFF	; 255
    75b6:	08 95       	ret

000075b8 <__floatunsisf>:
    75b8:	e8 94       	clt
    75ba:	09 c0       	rjmp	.+18     	; 0x75ce <__floatsisf+0x12>

000075bc <__floatsisf>:
    75bc:	97 fb       	bst	r25, 7
    75be:	3e f4       	brtc	.+14     	; 0x75ce <__floatsisf+0x12>
    75c0:	90 95       	com	r25
    75c2:	80 95       	com	r24
    75c4:	70 95       	com	r23
    75c6:	61 95       	neg	r22
    75c8:	7f 4f       	sbci	r23, 0xFF	; 255
    75ca:	8f 4f       	sbci	r24, 0xFF	; 255
    75cc:	9f 4f       	sbci	r25, 0xFF	; 255
    75ce:	99 23       	and	r25, r25
    75d0:	a9 f0       	breq	.+42     	; 0x75fc <__floatsisf+0x40>
    75d2:	f9 2f       	mov	r31, r25
    75d4:	96 e9       	ldi	r25, 0x96	; 150
    75d6:	bb 27       	eor	r27, r27
    75d8:	93 95       	inc	r25
    75da:	f6 95       	lsr	r31
    75dc:	87 95       	ror	r24
    75de:	77 95       	ror	r23
    75e0:	67 95       	ror	r22
    75e2:	b7 95       	ror	r27
    75e4:	f1 11       	cpse	r31, r1
    75e6:	f8 cf       	rjmp	.-16     	; 0x75d8 <__floatsisf+0x1c>
    75e8:	fa f4       	brpl	.+62     	; 0x7628 <__floatsisf+0x6c>
    75ea:	bb 0f       	add	r27, r27
    75ec:	11 f4       	brne	.+4      	; 0x75f2 <__floatsisf+0x36>
    75ee:	60 ff       	sbrs	r22, 0
    75f0:	1b c0       	rjmp	.+54     	; 0x7628 <__floatsisf+0x6c>
    75f2:	6f 5f       	subi	r22, 0xFF	; 255
    75f4:	7f 4f       	sbci	r23, 0xFF	; 255
    75f6:	8f 4f       	sbci	r24, 0xFF	; 255
    75f8:	9f 4f       	sbci	r25, 0xFF	; 255
    75fa:	16 c0       	rjmp	.+44     	; 0x7628 <__floatsisf+0x6c>
    75fc:	88 23       	and	r24, r24
    75fe:	11 f0       	breq	.+4      	; 0x7604 <__floatsisf+0x48>
    7600:	96 e9       	ldi	r25, 0x96	; 150
    7602:	11 c0       	rjmp	.+34     	; 0x7626 <__floatsisf+0x6a>
    7604:	77 23       	and	r23, r23
    7606:	21 f0       	breq	.+8      	; 0x7610 <__floatsisf+0x54>
    7608:	9e e8       	ldi	r25, 0x8E	; 142
    760a:	87 2f       	mov	r24, r23
    760c:	76 2f       	mov	r23, r22
    760e:	05 c0       	rjmp	.+10     	; 0x761a <__floatsisf+0x5e>
    7610:	66 23       	and	r22, r22
    7612:	71 f0       	breq	.+28     	; 0x7630 <__floatsisf+0x74>
    7614:	96 e8       	ldi	r25, 0x86	; 134
    7616:	86 2f       	mov	r24, r22
    7618:	70 e0       	ldi	r23, 0x00	; 0
    761a:	60 e0       	ldi	r22, 0x00	; 0
    761c:	2a f0       	brmi	.+10     	; 0x7628 <__floatsisf+0x6c>
    761e:	9a 95       	dec	r25
    7620:	66 0f       	add	r22, r22
    7622:	77 1f       	adc	r23, r23
    7624:	88 1f       	adc	r24, r24
    7626:	da f7       	brpl	.-10     	; 0x761e <__floatsisf+0x62>
    7628:	88 0f       	add	r24, r24
    762a:	96 95       	lsr	r25
    762c:	87 95       	ror	r24
    762e:	97 f9       	bld	r25, 7
    7630:	08 95       	ret

00007632 <__fp_cmp>:
    7632:	99 0f       	add	r25, r25
    7634:	00 08       	sbc	r0, r0
    7636:	55 0f       	add	r21, r21
    7638:	aa 0b       	sbc	r26, r26
    763a:	e0 e8       	ldi	r30, 0x80	; 128
    763c:	fe ef       	ldi	r31, 0xFE	; 254
    763e:	16 16       	cp	r1, r22
    7640:	17 06       	cpc	r1, r23
    7642:	e8 07       	cpc	r30, r24
    7644:	f9 07       	cpc	r31, r25
    7646:	c0 f0       	brcs	.+48     	; 0x7678 <__fp_cmp+0x46>
    7648:	12 16       	cp	r1, r18
    764a:	13 06       	cpc	r1, r19
    764c:	e4 07       	cpc	r30, r20
    764e:	f5 07       	cpc	r31, r21
    7650:	98 f0       	brcs	.+38     	; 0x7678 <__fp_cmp+0x46>
    7652:	62 1b       	sub	r22, r18
    7654:	73 0b       	sbc	r23, r19
    7656:	84 0b       	sbc	r24, r20
    7658:	95 0b       	sbc	r25, r21
    765a:	39 f4       	brne	.+14     	; 0x766a <__fp_cmp+0x38>
    765c:	0a 26       	eor	r0, r26
    765e:	61 f0       	breq	.+24     	; 0x7678 <__fp_cmp+0x46>
    7660:	23 2b       	or	r18, r19
    7662:	24 2b       	or	r18, r20
    7664:	25 2b       	or	r18, r21
    7666:	21 f4       	brne	.+8      	; 0x7670 <__fp_cmp+0x3e>
    7668:	08 95       	ret
    766a:	0a 26       	eor	r0, r26
    766c:	09 f4       	brne	.+2      	; 0x7670 <__fp_cmp+0x3e>
    766e:	a1 40       	sbci	r26, 0x01	; 1
    7670:	a6 95       	lsr	r26
    7672:	8f ef       	ldi	r24, 0xFF	; 255
    7674:	81 1d       	adc	r24, r1
    7676:	81 1d       	adc	r24, r1
    7678:	08 95       	ret

0000767a <__fp_inf>:
    767a:	97 f9       	bld	r25, 7
    767c:	9f 67       	ori	r25, 0x7F	; 127
    767e:	80 e8       	ldi	r24, 0x80	; 128
    7680:	70 e0       	ldi	r23, 0x00	; 0
    7682:	60 e0       	ldi	r22, 0x00	; 0
    7684:	08 95       	ret

00007686 <__fp_nan>:
    7686:	9f ef       	ldi	r25, 0xFF	; 255
    7688:	80 ec       	ldi	r24, 0xC0	; 192
    768a:	08 95       	ret

0000768c <__fp_powser>:
    768c:	df 93       	push	r29
    768e:	cf 93       	push	r28
    7690:	1f 93       	push	r17
    7692:	0f 93       	push	r16
    7694:	ff 92       	push	r15
    7696:	ef 92       	push	r14
    7698:	df 92       	push	r13
    769a:	7b 01       	movw	r14, r22
    769c:	8c 01       	movw	r16, r24
    769e:	68 94       	set
    76a0:	05 c0       	rjmp	.+10     	; 0x76ac <__fp_powser+0x20>
    76a2:	da 2e       	mov	r13, r26
    76a4:	ef 01       	movw	r28, r30
    76a6:	76 d0       	rcall	.+236    	; 0x7794 <__mulsf3x>
    76a8:	fe 01       	movw	r30, r28
    76aa:	e8 94       	clt
    76ac:	a5 91       	lpm	r26, Z+
    76ae:	25 91       	lpm	r18, Z+
    76b0:	35 91       	lpm	r19, Z+
    76b2:	45 91       	lpm	r20, Z+
    76b4:	55 91       	lpm	r21, Z+
    76b6:	ae f3       	brts	.-22     	; 0x76a2 <__fp_powser+0x16>
    76b8:	ef 01       	movw	r28, r30
    76ba:	66 de       	rcall	.-820    	; 0x7388 <__addsf3x>
    76bc:	fe 01       	movw	r30, r28
    76be:	97 01       	movw	r18, r14
    76c0:	a8 01       	movw	r20, r16
    76c2:	da 94       	dec	r13
    76c4:	79 f7       	brne	.-34     	; 0x76a4 <__fp_powser+0x18>
    76c6:	df 90       	pop	r13
    76c8:	ef 90       	pop	r14
    76ca:	ff 90       	pop	r15
    76cc:	0f 91       	pop	r16
    76ce:	1f 91       	pop	r17
    76d0:	cf 91       	pop	r28
    76d2:	df 91       	pop	r29
    76d4:	08 95       	ret

000076d6 <__fp_pscA>:
    76d6:	00 24       	eor	r0, r0
    76d8:	0a 94       	dec	r0
    76da:	16 16       	cp	r1, r22
    76dc:	17 06       	cpc	r1, r23
    76de:	18 06       	cpc	r1, r24
    76e0:	09 06       	cpc	r0, r25
    76e2:	08 95       	ret

000076e4 <__fp_pscB>:
    76e4:	00 24       	eor	r0, r0
    76e6:	0a 94       	dec	r0
    76e8:	12 16       	cp	r1, r18
    76ea:	13 06       	cpc	r1, r19
    76ec:	14 06       	cpc	r1, r20
    76ee:	05 06       	cpc	r0, r21
    76f0:	08 95       	ret

000076f2 <__fp_round>:
    76f2:	09 2e       	mov	r0, r25
    76f4:	03 94       	inc	r0
    76f6:	00 0c       	add	r0, r0
    76f8:	11 f4       	brne	.+4      	; 0x76fe <__fp_round+0xc>
    76fa:	88 23       	and	r24, r24
    76fc:	52 f0       	brmi	.+20     	; 0x7712 <__fp_round+0x20>
    76fe:	bb 0f       	add	r27, r27
    7700:	40 f4       	brcc	.+16     	; 0x7712 <__fp_round+0x20>
    7702:	bf 2b       	or	r27, r31
    7704:	11 f4       	brne	.+4      	; 0x770a <__fp_round+0x18>
    7706:	60 ff       	sbrs	r22, 0
    7708:	04 c0       	rjmp	.+8      	; 0x7712 <__fp_round+0x20>
    770a:	6f 5f       	subi	r22, 0xFF	; 255
    770c:	7f 4f       	sbci	r23, 0xFF	; 255
    770e:	8f 4f       	sbci	r24, 0xFF	; 255
    7710:	9f 4f       	sbci	r25, 0xFF	; 255
    7712:	08 95       	ret

00007714 <__fp_split3>:
    7714:	57 fd       	sbrc	r21, 7
    7716:	90 58       	subi	r25, 0x80	; 128
    7718:	44 0f       	add	r20, r20
    771a:	55 1f       	adc	r21, r21
    771c:	59 f0       	breq	.+22     	; 0x7734 <__fp_splitA+0x10>
    771e:	5f 3f       	cpi	r21, 0xFF	; 255
    7720:	71 f0       	breq	.+28     	; 0x773e <__fp_splitA+0x1a>
    7722:	47 95       	ror	r20

00007724 <__fp_splitA>:
    7724:	88 0f       	add	r24, r24
    7726:	97 fb       	bst	r25, 7
    7728:	99 1f       	adc	r25, r25
    772a:	61 f0       	breq	.+24     	; 0x7744 <__fp_splitA+0x20>
    772c:	9f 3f       	cpi	r25, 0xFF	; 255
    772e:	79 f0       	breq	.+30     	; 0x774e <__fp_splitA+0x2a>
    7730:	87 95       	ror	r24
    7732:	08 95       	ret
    7734:	12 16       	cp	r1, r18
    7736:	13 06       	cpc	r1, r19
    7738:	14 06       	cpc	r1, r20
    773a:	55 1f       	adc	r21, r21
    773c:	f2 cf       	rjmp	.-28     	; 0x7722 <__fp_split3+0xe>
    773e:	46 95       	lsr	r20
    7740:	f1 df       	rcall	.-30     	; 0x7724 <__fp_splitA>
    7742:	08 c0       	rjmp	.+16     	; 0x7754 <__fp_splitA+0x30>
    7744:	16 16       	cp	r1, r22
    7746:	17 06       	cpc	r1, r23
    7748:	18 06       	cpc	r1, r24
    774a:	99 1f       	adc	r25, r25
    774c:	f1 cf       	rjmp	.-30     	; 0x7730 <__fp_splitA+0xc>
    774e:	86 95       	lsr	r24
    7750:	71 05       	cpc	r23, r1
    7752:	61 05       	cpc	r22, r1
    7754:	08 94       	sec
    7756:	08 95       	ret

00007758 <__fp_zero>:
    7758:	e8 94       	clt

0000775a <__fp_szero>:
    775a:	bb 27       	eor	r27, r27
    775c:	66 27       	eor	r22, r22
    775e:	77 27       	eor	r23, r23
    7760:	cb 01       	movw	r24, r22
    7762:	97 f9       	bld	r25, 7
    7764:	08 95       	ret

00007766 <__gesf2>:
    7766:	65 df       	rcall	.-310    	; 0x7632 <__fp_cmp>
    7768:	08 f4       	brcc	.+2      	; 0x776c <__gesf2+0x6>
    776a:	8f ef       	ldi	r24, 0xFF	; 255
    776c:	08 95       	ret

0000776e <inverse>:
    776e:	9b 01       	movw	r18, r22
    7770:	ac 01       	movw	r20, r24
    7772:	60 e0       	ldi	r22, 0x00	; 0
    7774:	70 e0       	ldi	r23, 0x00	; 0
    7776:	80 e8       	ldi	r24, 0x80	; 128
    7778:	9f e3       	ldi	r25, 0x3F	; 63
    777a:	85 ce       	rjmp	.-758    	; 0x7486 <__divsf3>

0000777c <__mulsf3>:
    777c:	0b d0       	rcall	.+22     	; 0x7794 <__mulsf3x>
    777e:	b9 cf       	rjmp	.-142    	; 0x76f2 <__fp_round>
    7780:	aa df       	rcall	.-172    	; 0x76d6 <__fp_pscA>
    7782:	28 f0       	brcs	.+10     	; 0x778e <__mulsf3+0x12>
    7784:	af df       	rcall	.-162    	; 0x76e4 <__fp_pscB>
    7786:	18 f0       	brcs	.+6      	; 0x778e <__mulsf3+0x12>
    7788:	95 23       	and	r25, r21
    778a:	09 f0       	breq	.+2      	; 0x778e <__mulsf3+0x12>
    778c:	76 cf       	rjmp	.-276    	; 0x767a <__fp_inf>
    778e:	7b cf       	rjmp	.-266    	; 0x7686 <__fp_nan>
    7790:	11 24       	eor	r1, r1
    7792:	e3 cf       	rjmp	.-58     	; 0x775a <__fp_szero>

00007794 <__mulsf3x>:
    7794:	bf df       	rcall	.-130    	; 0x7714 <__fp_split3>
    7796:	a0 f3       	brcs	.-24     	; 0x7780 <__mulsf3+0x4>

00007798 <__mulsf3_pse>:
    7798:	95 9f       	mul	r25, r21
    779a:	d1 f3       	breq	.-12     	; 0x7790 <__mulsf3+0x14>
    779c:	95 0f       	add	r25, r21
    779e:	50 e0       	ldi	r21, 0x00	; 0
    77a0:	55 1f       	adc	r21, r21
    77a2:	62 9f       	mul	r22, r18
    77a4:	f0 01       	movw	r30, r0
    77a6:	72 9f       	mul	r23, r18
    77a8:	bb 27       	eor	r27, r27
    77aa:	f0 0d       	add	r31, r0
    77ac:	b1 1d       	adc	r27, r1
    77ae:	63 9f       	mul	r22, r19
    77b0:	aa 27       	eor	r26, r26
    77b2:	f0 0d       	add	r31, r0
    77b4:	b1 1d       	adc	r27, r1
    77b6:	aa 1f       	adc	r26, r26
    77b8:	64 9f       	mul	r22, r20
    77ba:	66 27       	eor	r22, r22
    77bc:	b0 0d       	add	r27, r0
    77be:	a1 1d       	adc	r26, r1
    77c0:	66 1f       	adc	r22, r22
    77c2:	82 9f       	mul	r24, r18
    77c4:	22 27       	eor	r18, r18
    77c6:	b0 0d       	add	r27, r0
    77c8:	a1 1d       	adc	r26, r1
    77ca:	62 1f       	adc	r22, r18
    77cc:	73 9f       	mul	r23, r19
    77ce:	b0 0d       	add	r27, r0
    77d0:	a1 1d       	adc	r26, r1
    77d2:	62 1f       	adc	r22, r18
    77d4:	83 9f       	mul	r24, r19
    77d6:	a0 0d       	add	r26, r0
    77d8:	61 1d       	adc	r22, r1
    77da:	22 1f       	adc	r18, r18
    77dc:	74 9f       	mul	r23, r20
    77de:	33 27       	eor	r19, r19
    77e0:	a0 0d       	add	r26, r0
    77e2:	61 1d       	adc	r22, r1
    77e4:	23 1f       	adc	r18, r19
    77e6:	84 9f       	mul	r24, r20
    77e8:	60 0d       	add	r22, r0
    77ea:	21 1d       	adc	r18, r1
    77ec:	82 2f       	mov	r24, r18
    77ee:	76 2f       	mov	r23, r22
    77f0:	6a 2f       	mov	r22, r26
    77f2:	11 24       	eor	r1, r1
    77f4:	9f 57       	subi	r25, 0x7F	; 127
    77f6:	50 40       	sbci	r21, 0x00	; 0
    77f8:	8a f0       	brmi	.+34     	; 0x781c <__mulsf3_pse+0x84>
    77fa:	e1 f0       	breq	.+56     	; 0x7834 <__mulsf3_pse+0x9c>
    77fc:	88 23       	and	r24, r24
    77fe:	4a f0       	brmi	.+18     	; 0x7812 <__mulsf3_pse+0x7a>
    7800:	ee 0f       	add	r30, r30
    7802:	ff 1f       	adc	r31, r31
    7804:	bb 1f       	adc	r27, r27
    7806:	66 1f       	adc	r22, r22
    7808:	77 1f       	adc	r23, r23
    780a:	88 1f       	adc	r24, r24
    780c:	91 50       	subi	r25, 0x01	; 1
    780e:	50 40       	sbci	r21, 0x00	; 0
    7810:	a9 f7       	brne	.-22     	; 0x77fc <__mulsf3_pse+0x64>
    7812:	9e 3f       	cpi	r25, 0xFE	; 254
    7814:	51 05       	cpc	r21, r1
    7816:	70 f0       	brcs	.+28     	; 0x7834 <__mulsf3_pse+0x9c>
    7818:	30 cf       	rjmp	.-416    	; 0x767a <__fp_inf>
    781a:	9f cf       	rjmp	.-194    	; 0x775a <__fp_szero>
    781c:	5f 3f       	cpi	r21, 0xFF	; 255
    781e:	ec f3       	brlt	.-6      	; 0x781a <__mulsf3_pse+0x82>
    7820:	98 3e       	cpi	r25, 0xE8	; 232
    7822:	dc f3       	brlt	.-10     	; 0x781a <__mulsf3_pse+0x82>
    7824:	86 95       	lsr	r24
    7826:	77 95       	ror	r23
    7828:	67 95       	ror	r22
    782a:	b7 95       	ror	r27
    782c:	f7 95       	ror	r31
    782e:	e7 95       	ror	r30
    7830:	9f 5f       	subi	r25, 0xFF	; 255
    7832:	c1 f7       	brne	.-16     	; 0x7824 <__mulsf3_pse+0x8c>
    7834:	fe 2b       	or	r31, r30
    7836:	88 0f       	add	r24, r24
    7838:	91 1d       	adc	r25, r1
    783a:	96 95       	lsr	r25
    783c:	87 95       	ror	r24
    783e:	97 f9       	bld	r25, 7
    7840:	08 95       	ret
    7842:	11 f4       	brne	.+4      	; 0x7848 <__mulsf3_pse+0xb0>
    7844:	0e f4       	brtc	.+2      	; 0x7848 <__mulsf3_pse+0xb0>
    7846:	1f cf       	rjmp	.-450    	; 0x7686 <__fp_nan>
    7848:	41 c0       	rjmp	.+130    	; 0x78cc <__fp_mpack>

0000784a <sqrt>:
    784a:	6c df       	rcall	.-296    	; 0x7724 <__fp_splitA>
    784c:	d0 f3       	brcs	.-12     	; 0x7842 <__mulsf3_pse+0xaa>
    784e:	99 23       	and	r25, r25
    7850:	d9 f3       	breq	.-10     	; 0x7848 <__mulsf3_pse+0xb0>
    7852:	ce f3       	brts	.-14     	; 0x7846 <__mulsf3_pse+0xae>
    7854:	9f 57       	subi	r25, 0x7F	; 127
    7856:	55 0b       	sbc	r21, r21
    7858:	87 ff       	sbrs	r24, 7
    785a:	46 d0       	rcall	.+140    	; 0x78e8 <__fp_norm2>
    785c:	00 24       	eor	r0, r0
    785e:	a0 e6       	ldi	r26, 0x60	; 96
    7860:	40 ea       	ldi	r20, 0xA0	; 160
    7862:	90 01       	movw	r18, r0
    7864:	80 58       	subi	r24, 0x80	; 128
    7866:	56 95       	lsr	r21
    7868:	97 95       	ror	r25
    786a:	28 f4       	brcc	.+10     	; 0x7876 <sqrt+0x2c>
    786c:	80 5c       	subi	r24, 0xC0	; 192
    786e:	66 0f       	add	r22, r22
    7870:	77 1f       	adc	r23, r23
    7872:	88 1f       	adc	r24, r24
    7874:	20 f0       	brcs	.+8      	; 0x787e <sqrt+0x34>
    7876:	26 17       	cp	r18, r22
    7878:	37 07       	cpc	r19, r23
    787a:	48 07       	cpc	r20, r24
    787c:	30 f4       	brcc	.+12     	; 0x788a <sqrt+0x40>
    787e:	62 1b       	sub	r22, r18
    7880:	73 0b       	sbc	r23, r19
    7882:	84 0b       	sbc	r24, r20
    7884:	20 29       	or	r18, r0
    7886:	31 29       	or	r19, r1
    7888:	4a 2b       	or	r20, r26
    788a:	a6 95       	lsr	r26
    788c:	17 94       	ror	r1
    788e:	07 94       	ror	r0
    7890:	20 25       	eor	r18, r0
    7892:	31 25       	eor	r19, r1
    7894:	4a 27       	eor	r20, r26
    7896:	58 f7       	brcc	.-42     	; 0x786e <sqrt+0x24>
    7898:	66 0f       	add	r22, r22
    789a:	77 1f       	adc	r23, r23
    789c:	88 1f       	adc	r24, r24
    789e:	20 f0       	brcs	.+8      	; 0x78a8 <sqrt+0x5e>
    78a0:	26 17       	cp	r18, r22
    78a2:	37 07       	cpc	r19, r23
    78a4:	48 07       	cpc	r20, r24
    78a6:	30 f4       	brcc	.+12     	; 0x78b4 <sqrt+0x6a>
    78a8:	62 0b       	sbc	r22, r18
    78aa:	73 0b       	sbc	r23, r19
    78ac:	84 0b       	sbc	r24, r20
    78ae:	20 0d       	add	r18, r0
    78b0:	31 1d       	adc	r19, r1
    78b2:	41 1d       	adc	r20, r1
    78b4:	a0 95       	com	r26
    78b6:	81 f7       	brne	.-32     	; 0x7898 <sqrt+0x4e>
    78b8:	b9 01       	movw	r22, r18
    78ba:	84 2f       	mov	r24, r20
    78bc:	91 58       	subi	r25, 0x81	; 129
    78be:	88 0f       	add	r24, r24
    78c0:	96 95       	lsr	r25
    78c2:	87 95       	ror	r24
    78c4:	08 95       	ret

000078c6 <square>:
    78c6:	9b 01       	movw	r18, r22
    78c8:	ac 01       	movw	r20, r24
    78ca:	58 cf       	rjmp	.-336    	; 0x777c <__mulsf3>

000078cc <__fp_mpack>:
    78cc:	9f 3f       	cpi	r25, 0xFF	; 255
    78ce:	31 f0       	breq	.+12     	; 0x78dc <__fp_mpack_finite+0xc>

000078d0 <__fp_mpack_finite>:
    78d0:	91 50       	subi	r25, 0x01	; 1
    78d2:	20 f4       	brcc	.+8      	; 0x78dc <__fp_mpack_finite+0xc>
    78d4:	87 95       	ror	r24
    78d6:	77 95       	ror	r23
    78d8:	67 95       	ror	r22
    78da:	b7 95       	ror	r27
    78dc:	88 0f       	add	r24, r24
    78de:	91 1d       	adc	r25, r1
    78e0:	96 95       	lsr	r25
    78e2:	87 95       	ror	r24
    78e4:	97 f9       	bld	r25, 7
    78e6:	08 95       	ret

000078e8 <__fp_norm2>:
    78e8:	91 50       	subi	r25, 0x01	; 1
    78ea:	50 40       	sbci	r21, 0x00	; 0
    78ec:	66 0f       	add	r22, r22
    78ee:	77 1f       	adc	r23, r23
    78f0:	88 1f       	adc	r24, r24
    78f2:	d2 f7       	brpl	.-12     	; 0x78e8 <__fp_norm2>
    78f4:	08 95       	ret

000078f6 <__udivmodhi4>:
    78f6:	aa 1b       	sub	r26, r26
    78f8:	bb 1b       	sub	r27, r27
    78fa:	51 e1       	ldi	r21, 0x11	; 17
    78fc:	07 c0       	rjmp	.+14     	; 0x790c <__udivmodhi4_ep>

000078fe <__udivmodhi4_loop>:
    78fe:	aa 1f       	adc	r26, r26
    7900:	bb 1f       	adc	r27, r27
    7902:	a6 17       	cp	r26, r22
    7904:	b7 07       	cpc	r27, r23
    7906:	10 f0       	brcs	.+4      	; 0x790c <__udivmodhi4_ep>
    7908:	a6 1b       	sub	r26, r22
    790a:	b7 0b       	sbc	r27, r23

0000790c <__udivmodhi4_ep>:
    790c:	88 1f       	adc	r24, r24
    790e:	99 1f       	adc	r25, r25
    7910:	5a 95       	dec	r21
    7912:	a9 f7       	brne	.-22     	; 0x78fe <__udivmodhi4_loop>
    7914:	80 95       	com	r24
    7916:	90 95       	com	r25
    7918:	bc 01       	movw	r22, r24
    791a:	cd 01       	movw	r24, r26
    791c:	08 95       	ret

0000791e <__divmodhi4>:
    791e:	97 fb       	bst	r25, 7
    7920:	07 2e       	mov	r0, r23
    7922:	16 f4       	brtc	.+4      	; 0x7928 <__divmodhi4+0xa>
    7924:	00 94       	com	r0
    7926:	07 d0       	rcall	.+14     	; 0x7936 <__divmodhi4_neg1>
    7928:	77 fd       	sbrc	r23, 7
    792a:	09 d0       	rcall	.+18     	; 0x793e <__divmodhi4_neg2>
    792c:	0e 94 7b 3c 	call	0x78f6	; 0x78f6 <__udivmodhi4>
    7930:	07 fc       	sbrc	r0, 7
    7932:	05 d0       	rcall	.+10     	; 0x793e <__divmodhi4_neg2>
    7934:	3e f4       	brtc	.+14     	; 0x7944 <__divmodhi4_exit>

00007936 <__divmodhi4_neg1>:
    7936:	90 95       	com	r25
    7938:	81 95       	neg	r24
    793a:	9f 4f       	sbci	r25, 0xFF	; 255
    793c:	08 95       	ret

0000793e <__divmodhi4_neg2>:
    793e:	70 95       	com	r23
    7940:	61 95       	neg	r22
    7942:	7f 4f       	sbci	r23, 0xFF	; 255

00007944 <__divmodhi4_exit>:
    7944:	08 95       	ret

00007946 <__udivmodsi4>:
    7946:	a1 e2       	ldi	r26, 0x21	; 33
    7948:	1a 2e       	mov	r1, r26
    794a:	aa 1b       	sub	r26, r26
    794c:	bb 1b       	sub	r27, r27
    794e:	fd 01       	movw	r30, r26
    7950:	0d c0       	rjmp	.+26     	; 0x796c <__udivmodsi4_ep>

00007952 <__udivmodsi4_loop>:
    7952:	aa 1f       	adc	r26, r26
    7954:	bb 1f       	adc	r27, r27
    7956:	ee 1f       	adc	r30, r30
    7958:	ff 1f       	adc	r31, r31
    795a:	a2 17       	cp	r26, r18
    795c:	b3 07       	cpc	r27, r19
    795e:	e4 07       	cpc	r30, r20
    7960:	f5 07       	cpc	r31, r21
    7962:	20 f0       	brcs	.+8      	; 0x796c <__udivmodsi4_ep>
    7964:	a2 1b       	sub	r26, r18
    7966:	b3 0b       	sbc	r27, r19
    7968:	e4 0b       	sbc	r30, r20
    796a:	f5 0b       	sbc	r31, r21

0000796c <__udivmodsi4_ep>:
    796c:	66 1f       	adc	r22, r22
    796e:	77 1f       	adc	r23, r23
    7970:	88 1f       	adc	r24, r24
    7972:	99 1f       	adc	r25, r25
    7974:	1a 94       	dec	r1
    7976:	69 f7       	brne	.-38     	; 0x7952 <__udivmodsi4_loop>
    7978:	60 95       	com	r22
    797a:	70 95       	com	r23
    797c:	80 95       	com	r24
    797e:	90 95       	com	r25
    7980:	9b 01       	movw	r18, r22
    7982:	ac 01       	movw	r20, r24
    7984:	bd 01       	movw	r22, r26
    7986:	cf 01       	movw	r24, r30
    7988:	08 95       	ret

0000798a <__divmodsi4>:
    798a:	05 2e       	mov	r0, r21
    798c:	97 fb       	bst	r25, 7
    798e:	1e f4       	brtc	.+6      	; 0x7996 <__divmodsi4+0xc>
    7990:	00 94       	com	r0
    7992:	0e 94 dc 3c 	call	0x79b8	; 0x79b8 <__negsi2>
    7996:	57 fd       	sbrc	r21, 7
    7998:	07 d0       	rcall	.+14     	; 0x79a8 <__divmodsi4_neg2>
    799a:	0e 94 a3 3c 	call	0x7946	; 0x7946 <__udivmodsi4>
    799e:	07 fc       	sbrc	r0, 7
    79a0:	03 d0       	rcall	.+6      	; 0x79a8 <__divmodsi4_neg2>
    79a2:	4e f4       	brtc	.+18     	; 0x79b6 <__divmodsi4_exit>
    79a4:	0c 94 dc 3c 	jmp	0x79b8	; 0x79b8 <__negsi2>

000079a8 <__divmodsi4_neg2>:
    79a8:	50 95       	com	r21
    79aa:	40 95       	com	r20
    79ac:	30 95       	com	r19
    79ae:	21 95       	neg	r18
    79b0:	3f 4f       	sbci	r19, 0xFF	; 255
    79b2:	4f 4f       	sbci	r20, 0xFF	; 255
    79b4:	5f 4f       	sbci	r21, 0xFF	; 255

000079b6 <__divmodsi4_exit>:
    79b6:	08 95       	ret

000079b8 <__negsi2>:
    79b8:	90 95       	com	r25
    79ba:	80 95       	com	r24
    79bc:	70 95       	com	r23
    79be:	61 95       	neg	r22
    79c0:	7f 4f       	sbci	r23, 0xFF	; 255
    79c2:	8f 4f       	sbci	r24, 0xFF	; 255
    79c4:	9f 4f       	sbci	r25, 0xFF	; 255
    79c6:	08 95       	ret

000079c8 <__tablejump2__>:
    79c8:	ee 0f       	add	r30, r30
    79ca:	ff 1f       	adc	r31, r31

000079cc <__tablejump__>:
    79cc:	05 90       	lpm	r0, Z+
    79ce:	f4 91       	lpm	r31, Z
    79d0:	e0 2d       	mov	r30, r0
    79d2:	09 94       	ijmp

000079d4 <__mulhisi3>:
    79d4:	0e 94 f2 3c 	call	0x79e4	; 0x79e4 <__umulhisi3>
    79d8:	33 23       	and	r19, r19
    79da:	12 f4       	brpl	.+4      	; 0x79e0 <__mulhisi3+0xc>
    79dc:	8a 1b       	sub	r24, r26
    79de:	9b 0b       	sbc	r25, r27
    79e0:	0c 94 03 3d 	jmp	0x7a06	; 0x7a06 <__usmulhisi3_tail>

000079e4 <__umulhisi3>:
    79e4:	a2 9f       	mul	r26, r18
    79e6:	b0 01       	movw	r22, r0
    79e8:	b3 9f       	mul	r27, r19
    79ea:	c0 01       	movw	r24, r0
    79ec:	a3 9f       	mul	r26, r19
    79ee:	70 0d       	add	r23, r0
    79f0:	81 1d       	adc	r24, r1
    79f2:	11 24       	eor	r1, r1
    79f4:	91 1d       	adc	r25, r1
    79f6:	b2 9f       	mul	r27, r18
    79f8:	70 0d       	add	r23, r0
    79fa:	81 1d       	adc	r24, r1
    79fc:	11 24       	eor	r1, r1
    79fe:	91 1d       	adc	r25, r1
    7a00:	08 95       	ret

00007a02 <__usmulhisi3>:
    7a02:	0e 94 f2 3c 	call	0x79e4	; 0x79e4 <__umulhisi3>

00007a06 <__usmulhisi3_tail>:
    7a06:	b7 ff       	sbrs	r27, 7
    7a08:	08 95       	ret
    7a0a:	82 1b       	sub	r24, r18
    7a0c:	93 0b       	sbc	r25, r19
    7a0e:	08 95       	ret

00007a10 <__muluhisi3>:
    7a10:	0e 94 f2 3c 	call	0x79e4	; 0x79e4 <__umulhisi3>
    7a14:	a5 9f       	mul	r26, r21
    7a16:	90 0d       	add	r25, r0
    7a18:	b4 9f       	mul	r27, r20
    7a1a:	90 0d       	add	r25, r0
    7a1c:	a4 9f       	mul	r26, r20
    7a1e:	80 0d       	add	r24, r0
    7a20:	91 1d       	adc	r25, r1
    7a22:	11 24       	eor	r1, r1
    7a24:	08 95       	ret

00007a26 <__mulshisi3>:
    7a26:	b7 ff       	sbrs	r27, 7
    7a28:	0c 94 08 3d 	jmp	0x7a10	; 0x7a10 <__muluhisi3>

00007a2c <__mulohisi3>:
    7a2c:	0e 94 08 3d 	call	0x7a10	; 0x7a10 <__muluhisi3>
    7a30:	82 1b       	sub	r24, r18
    7a32:	93 0b       	sbc	r25, r19
    7a34:	08 95       	ret

00007a36 <__prologue_saves__>:
    7a36:	2f 92       	push	r2
    7a38:	3f 92       	push	r3
    7a3a:	4f 92       	push	r4
    7a3c:	5f 92       	push	r5
    7a3e:	6f 92       	push	r6
    7a40:	7f 92       	push	r7
    7a42:	8f 92       	push	r8
    7a44:	9f 92       	push	r9
    7a46:	af 92       	push	r10
    7a48:	bf 92       	push	r11
    7a4a:	cf 92       	push	r12
    7a4c:	df 92       	push	r13
    7a4e:	ef 92       	push	r14
    7a50:	ff 92       	push	r15
    7a52:	0f 93       	push	r16
    7a54:	1f 93       	push	r17
    7a56:	cf 93       	push	r28
    7a58:	df 93       	push	r29
    7a5a:	cd b7       	in	r28, 0x3d	; 61
    7a5c:	de b7       	in	r29, 0x3e	; 62
    7a5e:	ca 1b       	sub	r28, r26
    7a60:	db 0b       	sbc	r29, r27
    7a62:	0f b6       	in	r0, 0x3f	; 63
    7a64:	f8 94       	cli
    7a66:	de bf       	out	0x3e, r29	; 62
    7a68:	0f be       	out	0x3f, r0	; 63
    7a6a:	cd bf       	out	0x3d, r28	; 61
    7a6c:	09 94       	ijmp

00007a6e <__epilogue_restores__>:
    7a6e:	2a 88       	ldd	r2, Y+18	; 0x12
    7a70:	39 88       	ldd	r3, Y+17	; 0x11
    7a72:	48 88       	ldd	r4, Y+16	; 0x10
    7a74:	5f 84       	ldd	r5, Y+15	; 0x0f
    7a76:	6e 84       	ldd	r6, Y+14	; 0x0e
    7a78:	7d 84       	ldd	r7, Y+13	; 0x0d
    7a7a:	8c 84       	ldd	r8, Y+12	; 0x0c
    7a7c:	9b 84       	ldd	r9, Y+11	; 0x0b
    7a7e:	aa 84       	ldd	r10, Y+10	; 0x0a
    7a80:	b9 84       	ldd	r11, Y+9	; 0x09
    7a82:	c8 84       	ldd	r12, Y+8	; 0x08
    7a84:	df 80       	ldd	r13, Y+7	; 0x07
    7a86:	ee 80       	ldd	r14, Y+6	; 0x06
    7a88:	fd 80       	ldd	r15, Y+5	; 0x05
    7a8a:	0c 81       	ldd	r16, Y+4	; 0x04
    7a8c:	1b 81       	ldd	r17, Y+3	; 0x03
    7a8e:	aa 81       	ldd	r26, Y+2	; 0x02
    7a90:	b9 81       	ldd	r27, Y+1	; 0x01
    7a92:	ce 0f       	add	r28, r30
    7a94:	d1 1d       	adc	r29, r1
    7a96:	0f b6       	in	r0, 0x3f	; 63
    7a98:	f8 94       	cli
    7a9a:	de bf       	out	0x3e, r29	; 62
    7a9c:	0f be       	out	0x3f, r0	; 63
    7a9e:	cd bf       	out	0x3d, r28	; 61
    7aa0:	ed 01       	movw	r28, r26
    7aa2:	08 95       	ret

00007aa4 <memcpy_P>:
    7aa4:	fb 01       	movw	r30, r22
    7aa6:	dc 01       	movw	r26, r24
    7aa8:	02 c0       	rjmp	.+4      	; 0x7aae <memcpy_P+0xa>
    7aaa:	05 90       	lpm	r0, Z+
    7aac:	0d 92       	st	X+, r0
    7aae:	41 50       	subi	r20, 0x01	; 1
    7ab0:	50 40       	sbci	r21, 0x00	; 0
    7ab2:	d8 f7       	brcc	.-10     	; 0x7aaa <memcpy_P+0x6>
    7ab4:	08 95       	ret

00007ab6 <__itoa_ncheck>:
    7ab6:	bb 27       	eor	r27, r27
    7ab8:	4a 30       	cpi	r20, 0x0A	; 10
    7aba:	31 f4       	brne	.+12     	; 0x7ac8 <__itoa_ncheck+0x12>
    7abc:	99 23       	and	r25, r25
    7abe:	22 f4       	brpl	.+8      	; 0x7ac8 <__itoa_ncheck+0x12>
    7ac0:	bd e2       	ldi	r27, 0x2D	; 45
    7ac2:	90 95       	com	r25
    7ac4:	81 95       	neg	r24
    7ac6:	9f 4f       	sbci	r25, 0xFF	; 255
    7ac8:	0c 94 67 3d 	jmp	0x7ace	; 0x7ace <__utoa_common>

00007acc <__utoa_ncheck>:
    7acc:	bb 27       	eor	r27, r27

00007ace <__utoa_common>:
    7ace:	fb 01       	movw	r30, r22
    7ad0:	55 27       	eor	r21, r21
    7ad2:	aa 27       	eor	r26, r26
    7ad4:	88 0f       	add	r24, r24
    7ad6:	99 1f       	adc	r25, r25
    7ad8:	aa 1f       	adc	r26, r26
    7ada:	a4 17       	cp	r26, r20
    7adc:	10 f0       	brcs	.+4      	; 0x7ae2 <__utoa_common+0x14>
    7ade:	a4 1b       	sub	r26, r20
    7ae0:	83 95       	inc	r24
    7ae2:	50 51       	subi	r21, 0x10	; 16
    7ae4:	b9 f7       	brne	.-18     	; 0x7ad4 <__utoa_common+0x6>
    7ae6:	a0 5d       	subi	r26, 0xD0	; 208
    7ae8:	aa 33       	cpi	r26, 0x3A	; 58
    7aea:	08 f0       	brcs	.+2      	; 0x7aee <__utoa_common+0x20>
    7aec:	a9 5d       	subi	r26, 0xD9	; 217
    7aee:	a1 93       	st	Z+, r26
    7af0:	00 97       	sbiw	r24, 0x00	; 0
    7af2:	79 f7       	brne	.-34     	; 0x7ad2 <__utoa_common+0x4>
    7af4:	b1 11       	cpse	r27, r1
    7af6:	b1 93       	st	Z+, r27
    7af8:	11 92       	st	Z+, r1
    7afa:	cb 01       	movw	r24, r22
    7afc:	0c 94 a6 3d 	jmp	0x7b4c	; 0x7b4c <strrev>

00007b00 <__eerd_block_m324p>:
    7b00:	dc 01       	movw	r26, r24
    7b02:	cb 01       	movw	r24, r22

00007b04 <__eerd_blraw_m324p>:
    7b04:	fc 01       	movw	r30, r24
    7b06:	f9 99       	sbic	0x1f, 1	; 31
    7b08:	fe cf       	rjmp	.-4      	; 0x7b06 <__eerd_blraw_m324p+0x2>
    7b0a:	06 c0       	rjmp	.+12     	; 0x7b18 <__eerd_blraw_m324p+0x14>
    7b0c:	f2 bd       	out	0x22, r31	; 34
    7b0e:	e1 bd       	out	0x21, r30	; 33
    7b10:	f8 9a       	sbi	0x1f, 0	; 31
    7b12:	31 96       	adiw	r30, 0x01	; 1
    7b14:	00 b4       	in	r0, 0x20	; 32
    7b16:	0d 92       	st	X+, r0
    7b18:	41 50       	subi	r20, 0x01	; 1
    7b1a:	50 40       	sbci	r21, 0x00	; 0
    7b1c:	b8 f7       	brcc	.-18     	; 0x7b0c <__eerd_blraw_m324p+0x8>
    7b1e:	08 95       	ret

00007b20 <__eerd_byte_m324p>:
    7b20:	f9 99       	sbic	0x1f, 1	; 31
    7b22:	fe cf       	rjmp	.-4      	; 0x7b20 <__eerd_byte_m324p>
    7b24:	92 bd       	out	0x22, r25	; 34
    7b26:	81 bd       	out	0x21, r24	; 33
    7b28:	f8 9a       	sbi	0x1f, 0	; 31
    7b2a:	99 27       	eor	r25, r25
    7b2c:	80 b5       	in	r24, 0x20	; 32
    7b2e:	08 95       	ret

00007b30 <__eewr_byte_m324p>:
    7b30:	26 2f       	mov	r18, r22

00007b32 <__eewr_r18_m324p>:
    7b32:	f9 99       	sbic	0x1f, 1	; 31
    7b34:	fe cf       	rjmp	.-4      	; 0x7b32 <__eewr_r18_m324p>
    7b36:	1f ba       	out	0x1f, r1	; 31
    7b38:	92 bd       	out	0x22, r25	; 34
    7b3a:	81 bd       	out	0x21, r24	; 33
    7b3c:	20 bd       	out	0x20, r18	; 32
    7b3e:	0f b6       	in	r0, 0x3f	; 63
    7b40:	f8 94       	cli
    7b42:	fa 9a       	sbi	0x1f, 2	; 31
    7b44:	f9 9a       	sbi	0x1f, 1	; 31
    7b46:	0f be       	out	0x3f, r0	; 63
    7b48:	01 96       	adiw	r24, 0x01	; 1
    7b4a:	08 95       	ret

00007b4c <strrev>:
    7b4c:	dc 01       	movw	r26, r24
    7b4e:	fc 01       	movw	r30, r24
    7b50:	67 2f       	mov	r22, r23
    7b52:	71 91       	ld	r23, Z+
    7b54:	77 23       	and	r23, r23
    7b56:	e1 f7       	brne	.-8      	; 0x7b50 <strrev+0x4>
    7b58:	32 97       	sbiw	r30, 0x02	; 2
    7b5a:	04 c0       	rjmp	.+8      	; 0x7b64 <strrev+0x18>
    7b5c:	7c 91       	ld	r23, X
    7b5e:	6d 93       	st	X+, r22
    7b60:	70 83       	st	Z, r23
    7b62:	62 91       	ld	r22, -Z
    7b64:	ae 17       	cp	r26, r30
    7b66:	bf 07       	cpc	r27, r31
    7b68:	c8 f3       	brcs	.-14     	; 0x7b5c <strrev+0x10>
    7b6a:	08 95       	ret

00007b6c <_exit>:
    7b6c:	f8 94       	cli

00007b6e <__stop_program>:
    7b6e:	ff cf       	rjmp	.-2      	; 0x7b6e <__stop_program>
