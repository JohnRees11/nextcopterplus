
OpenAeroVTOL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000414  00800100  000092d0  00009364  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000092d0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000331  00800514  00800514  00009778  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00009778  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000670  00000000  00000000  000097a8  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000142ec  00000000  00000000  00009e18  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000361b  00000000  00000000  0001e104  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00003fdd  00000000  00000000  0002171f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00001460  00000000  00000000  000256fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000280b  00000000  00000000  00026b5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000900e  00000000  00000000  00029367  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000510  00000000  00000000  00032375  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 65 0d 	jmp	0x1aca	; 0x1aca <__ctors_end>
       4:	0c 94 39 2b 	jmp	0x5672	; 0x5672 <__vector_1>
       8:	0c 94 01 2b 	jmp	0x5602	; 0x5602 <__vector_2>
       c:	0c 94 ec 2b 	jmp	0x57d8	; 0x57d8 <__vector_3>
      10:	0c 94 8b 0d 	jmp	0x1b16	; 0x1b16 <__bad_interrupt>
      14:	0c 94 ab 2b 	jmp	0x5756	; 0x5756 <__vector_5>
      18:	0c 94 8b 0d 	jmp	0x1b16	; 0x1b16 <__bad_interrupt>
      1c:	0c 94 72 2b 	jmp	0x56e4	; 0x56e4 <__vector_7>
      20:	0c 94 8b 0d 	jmp	0x1b16	; 0x1b16 <__bad_interrupt>
      24:	0c 94 8b 0d 	jmp	0x1b16	; 0x1b16 <__bad_interrupt>
      28:	0c 94 8b 0d 	jmp	0x1b16	; 0x1b16 <__bad_interrupt>
      2c:	0c 94 8b 0d 	jmp	0x1b16	; 0x1b16 <__bad_interrupt>
      30:	0c 94 8b 0d 	jmp	0x1b16	; 0x1b16 <__bad_interrupt>
      34:	0c 94 8b 0d 	jmp	0x1b16	; 0x1b16 <__bad_interrupt>
      38:	0c 94 8b 0d 	jmp	0x1b16	; 0x1b16 <__bad_interrupt>
      3c:	0c 94 8b 0d 	jmp	0x1b16	; 0x1b16 <__bad_interrupt>
      40:	0c 94 8b 0d 	jmp	0x1b16	; 0x1b16 <__bad_interrupt>
      44:	0c 94 8b 0d 	jmp	0x1b16	; 0x1b16 <__bad_interrupt>
      48:	0c 94 ea 2a 	jmp	0x55d4	; 0x55d4 <__vector_18>
      4c:	0c 94 8b 0d 	jmp	0x1b16	; 0x1b16 <__bad_interrupt>
      50:	0c 94 a8 2c 	jmp	0x5950	; 0x5950 <__vector_20>
      54:	0c 94 8b 0d 	jmp	0x1b16	; 0x1b16 <__bad_interrupt>
      58:	0c 94 8b 0d 	jmp	0x1b16	; 0x1b16 <__bad_interrupt>
      5c:	0c 94 8b 0d 	jmp	0x1b16	; 0x1b16 <__bad_interrupt>
      60:	0c 94 8b 0d 	jmp	0x1b16	; 0x1b16 <__bad_interrupt>
      64:	0c 94 8b 0d 	jmp	0x1b16	; 0x1b16 <__bad_interrupt>
      68:	0c 94 8b 0d 	jmp	0x1b16	; 0x1b16 <__bad_interrupt>
      6c:	0c 94 8b 0d 	jmp	0x1b16	; 0x1b16 <__bad_interrupt>
      70:	0c 94 8b 0d 	jmp	0x1b16	; 0x1b16 <__bad_interrupt>
      74:	0c 94 8b 0d 	jmp	0x1b16	; 0x1b16 <__bad_interrupt>
      78:	0c 94 8b 0d 	jmp	0x1b16	; 0x1b16 <__bad_interrupt>
      7c:	8a 1a       	sub	r8, r26
      7e:	fa 1a       	sub	r15, r26
      80:	fa 1a       	sub	r15, r26
      82:	9b 1a       	sub	r9, r27
      84:	a8 1a       	sub	r10, r24
      86:	b2 1a       	sub	r11, r18
      88:	ae 1a       	sub	r10, r30
      8a:	be 1a       	sub	r11, r30
      8c:	ca 1a       	sub	r12, r26
      8e:	ce 1a       	sub	r12, r30
      90:	da 1a       	sub	r13, r26
      92:	0e 33       	cpi	r16, 0x3E	; 62
      94:	10 33       	cpi	r17, 0x30	; 48
      96:	13 33       	cpi	r17, 0x33	; 51
      98:	15 33       	cpi	r17, 0x35	; 53
      9a:	17 33       	cpi	r17, 0x37	; 55
      9c:	19 33       	cpi	r17, 0x39	; 57
      9e:	1b 33       	cpi	r17, 0x3B	; 59
      a0:	1d 33       	cpi	r17, 0x3D	; 61
      a2:	20 33       	cpi	r18, 0x30	; 48
      a4:	22 33       	cpi	r18, 0x32	; 50
      a6:	24 33       	cpi	r18, 0x34	; 52
      a8:	26 33       	cpi	r18, 0x36	; 54
      aa:	28 33       	cpi	r18, 0x38	; 56
      ac:	2a 33       	cpi	r18, 0x3A	; 58
      ae:	2c 33       	cpi	r18, 0x3C	; 60
      b0:	2e 33       	cpi	r18, 0x3E	; 62
      b2:	31 33       	cpi	r19, 0x31	; 49
      b4:	33 33       	cpi	r19, 0x33	; 51
      b6:	35 33       	cpi	r19, 0x35	; 53

000000b8 <Acc_Pol>:
      b8:	ff ff 01 ff 01 ff 01 ff ff 01 01 01 ff 01 01 ff     ................
      c8:	ff ff                                               ..

000000ca <ACC_RPY_Order>:
      ca:	00 01 02 02 00 01 00 01 02 00 01 02 01 00 02 00     ................
      da:	02 01                                               ..

000000dc <FUTABA>:
      dc:	01 02 00 03 04 05 06 07                             ........

000000e4 <JR>:
      e4:	00 01 02 03 04 05 06 07                             ........

000000ec <Trans_Matrix>:
      ec:	05 02 06 01 05 08 03 07 05                          .........

000000f5 <Wingdings>:
      f5:	01 02 41 05 0d 00 0f 00 22 00 33 00 44 00 4f 09     ..A.....".3.D.O.
     105:	01 00 03 00 07 00 0f 00 1f 00 0f 00 07 00 03 00     ................
     115:	01 00 08 1c 00 1c 00 1c 00 1c 00 7f 00 3e 00 1c     .............>..
     125:	00 08 00 08 08 00 1c 00 3e 00 7f 00 1c 00 1c 00     ........>.......
     135:	1c 00 1c 00 05 ff 01 fe 00 7c 00 38 00 10 00 0d     .........|.8....
     145:	40 00 60 00 70 00 78 00 7c 00 7e 00 7f 00 7e 00     @.`.p.x.|.~...~.
     155:	7c 00 78 00 70 00 60 00 40 00                       |.x.p.`.@.

0000015f <Verdana14>:
     15f:	01 02 20 5b 13 00 bb 00 c5 00 cc 00 cc 00 cc 00     .. [............
     16f:	cc 01 03 01 03 01 03 01 16 01 29 01 29 01 29 01     ..........).).).
     17f:	36 01 49 01 50 01 50 01 6f 01 88 01 a4 01 c0 01     6.I.P.P.o.......
     18f:	df 01 fb 02 1a 02 36 02 55 02 74 02 7b 02 7b 02     ......6.U.t.{.{.
     19f:	7b 02 7b 02 7b 02 94 02 94 02 bc 02 db 02 fd 03     {.{.{...........
     1af:	22 03 3e 03 5a 03 82 03 a1 03 b4 03 ca 03 ec 04     ".>.Z...........
     1bf:	08 04 2d 04 4c 04 74 04 8d 04 b5 04 d7 04 f9 05     ..-.L.t.........
     1cf:	1e 05 3d 05 65 05 99 05 bb 05 e0 06 02 06 02 06     ..=.e...........
     1df:	1b 06 1b 06 1b 06 1b 06 1b 06 34 06 50 06 69 06     ..........4.P.i.
     1ef:	85 06 a1 06 b4 06 d0 06 e9 06 f0 07 00 07 1c 07     ................
     1ff:	23 07 4e 07 67 07 86 07 a2 07 be 07 d1 07 ea 07     #.N.g...........
     20f:	fd 08 16 08 32 08 5d 08 79 08 95 03 00 00 00 00     ....2.].y.......
     21f:	00 00 00 00 00 02 fe 67 00 fe 67 00 12 78 00 00     .......g..g..x..
     22f:	fe 01 00 02 01 00 02 01 00 02 01 00 fe 41 00 78     .............A.x
     23f:	70 00 00 1c 00 00 07 00 e0 00 00 38 00 00 0e 1e     p..........8....
     24f:	00 82 7f 00 80 40 00 80 40 00 80 40 00 80 7f 00     .....@..@..@....
     25f:	00 1e 00 06 c0 1f 00 f8 ff 00 3c e0 01 07 00 07     ..........<.....
     26f:	03 00 06 01 00 04 06 01 00 04 03 00 06 07 00 07     ................
     27f:	3c e0 01 f8 ff 00 c0 1f 00 04 00 00 03 00 f0 03     <...............
     28f:	00 70 00 00 10 00 06 00 03 00 00 03 00 00 03 00     .p..............
     29f:	00 03 00 00 03 00 00 03 00 02 00 70 00 00 70 00     ...........p..p.
     2af:	0a f0 0f 00 fc 3f 00 0c 30 00 06 60 00 06 60 00     .....?..0..`..`.
     2bf:	06 60 00 06 60 00 0c 30 00 fc 3f 00 f0 0f 00 08     .`..`..0..?.....
     2cf:	18 60 00 18 60 00 18 60 00 fe 7f 00 fe 7f 00 00     .`..`..`........
     2df:	60 00 00 60 00 00 60 00 09 0c 70 00 06 78 00 06     `..`..`...p..x..
     2ef:	6c 00 06 66 00 06 63 00 8e 61 00 fc 60 00 78 60     l..f..c..a..`.x`
     2ff:	00 00 60 00 09 0c 30 00 06 60 00 06 60 00 86 61     ..`...0..`..`..a
     30f:	00 86 61 00 86 61 00 ce 73 00 7c 3f 00 38 1e 00     ..a..a..s.|?.8..
     31f:	0a 00 07 00 80 07 00 c0 07 00 f0 06 00 38 06 00     .............8..
     32f:	1c 06 00 fe 7f 00 fe 7f 00 00 06 00 00 06 00 09     ................
     33f:	00 30 00 fe 60 00 fe 60 00 c6 60 00 c6 60 00 c6     .0..`..`..`..`..
     34f:	60 00 c6 31 00 86 3f 00 06 0f 00 0a e0 0f 00 f0     `..1..?.........
     35f:	3f 00 9c 30 00 cc 60 00 c6 60 00 c6 60 00 c6 60     ?..0..`..`..`..`
     36f:	00 c6 31 00 86 3f 00 00 0f 00 09 06 00 00 06 40     ..1..?.........@
     37f:	00 06 70 00 06 7c 00 06 0f 00 c6 03 00 f6 00 00     ..p..|..........
     38f:	3e 00 00 0e 00 00 0a 38 1e 00 7c 3f 00 ce 71 00     >......8..|?..q.
     39f:	c6 60 00 c6 60 00 86 61 00 86 61 00 4e 73 00 7c     .`..`..a..a.Ns.|
     3af:	3f 00 38 1e 00 0a f0 00 00 fc 61 00 8c 63 00 06     ?.8.......a..c..
     3bf:	63 00 06 63 00 06 63 00 06 33 00 0c 39 00 fc 1f     c..c..c..3..9...
     3cf:	00 f0 07 00 02 70 70 00 70 70 00 08 0c 00 00 06     .....pp.pp......
     3df:	00 00 06 67 00 06 67 00 86 01 00 ce 00 00 fc 00     ...g..g.........
     3ef:	00 38 00 00 0d 00 40 00 00 78 00 00 3f 00 c0 07     .8....@..x..?...
     3ff:	00 f8 06 00 3e 06 00 06 06 00 3e 06 00 f8 06 00     ....>.....>.....
     40f:	c0 07 00 00 3f 00 00 78 00 00 40 00 0a fe 7f 00     ....?..x..@.....
     41f:	fe 7f 00 86 61 00 86 61 00 86 61 00 86 61 00 c6     ....a..a..a..a..
     42f:	61 00 7c 73 00 3c 3f 00 00 1e 00 0b e0 07 00 f8     a.|s.<?.........
     43f:	1f 00 1c 38 00 0c 30 00 06 60 00 06 60 00 06 60     ...8..0..`..`..`
     44f:	00 06 60 00 06 60 00 06 20 00 0c 30 00 0c fe 7f     ..`..`.. ..0....
     45f:	00 fe 7f 00 06 60 00 06 60 00 06 60 00 06 60 00     .....`..`..`..`.
     46f:	06 60 00 0e 70 00 0c 30 00 38 1c 00 f8 0f 00 e0     .`..p..0.8......
     47f:	07 00 09 fe 7f 00 fe 7f 00 c6 60 00 c6 60 00 c6     ..........`..`..
     48f:	60 00 c6 60 00 c6 60 00 c6 60 00 c6 60 00 09 fe     `..`..`..`..`...
     49f:	7f 00 fe 7f 00 86 01 00 86 01 00 86 01 00 86 01     ................
     4af:	00 86 01 00 86 01 00 06 00 00 0d e0 07 00 f8 1f     ................
     4bf:	00 3c 3c 00 0c 30 00 0e 70 00 06 60 00 06 60 00     .<<..0..p..`..`.
     4cf:	06 63 00 06 63 00 06 63 00 06 63 00 0c 3f 00 0c     .c..c..c..c..?..
     4df:	3f 00 0a fe 7f 00 fe 7f 00 c0 00 00 c0 00 00 c0     ?...............
     4ef:	00 00 c0 00 00 c0 00 00 c0 00 00 fe 7f 00 fe 7f     ................
     4ff:	00 06 06 60 00 06 60 00 fe 7f 00 fe 7f 00 06 60     ...`..`........`
     50f:	00 06 60 00 07 00 60 00 00 60 00 06 60 00 06 60     ..`...`..`..`..`
     51f:	00 06 70 00 fe 3f 00 fe 1f 00 0b fe 7f 00 fe 7f     ..p..?..........
     52f:	00 80 03 00 c0 01 00 e0 03 00 70 07 00 38 1c 00     ..........p..8..
     53f:	1c 38 00 0e 70 00 06 60 00 02 40 00 09 fe 7f 00     .8..p..`..@.....
     54f:	fe 7f 00 00 60 00 00 60 00 00 60 00 00 60 00 00     ....`..`..`..`..
     55f:	60 00 00 60 00 00 60 00 0c fe 7f 00 fe 7f 00 0e     `..`..`.........
     56f:	00 00 38 00 00 e0 01 00 80 07 00 00 07 00 e0 01     ..8.............
     57f:	00 38 00 00 0e 00 00 fe 7f 00 fe 7f 00 0a fe 7f     .8..............
     58f:	00 fe 7f 00 0e 00 00 3c 00 00 e0 00 00 80 03 00     .......<........
     59f:	00 1e 00 00 78 00 fe 7f 00 fe 7f 00 0d e0 07 00     ....x...........
     5af:	f8 1f 00 1c 38 00 0c 30 00 06 60 00 06 60 00 06     ....8..0..`..`..
     5bf:	60 00 06 60 00 06 60 00 0c 30 00 1c 38 00 f8 1f     `..`..`..0..8...
     5cf:	00 e0 07 00 08 fe 7f 00 fe 7f 00 06 03 00 06 03     ................
     5df:	00 06 03 00 8e 03 00 fc 01 00 f8 00 00 0d e0 07     ................
     5ef:	00 f8 1f 00 1c 38 00 0c 30 00 06 60 00 06 60 00     .....8..0..`..`.
     5ff:	06 60 00 06 e0 01 06 e0 03 0c 30 07 1c 38 06 f8     .`........0..8..
     60f:	1f 06 e0 07 06 0b fe 7f 00 fe 7f 00 86 01 00 86     ................
     61f:	01 00 86 01 00 86 07 00 ce 0e 00 fc 1c 00 78 70     ..............xp
     62f:	00 00 60 00 00 40 00 0b 78 30 00 fc 70 00 ce 60     ..`..@..x0..p..`
     63f:	00 86 61 00 86 61 00 86 61 00 86 61 00 86 61 00     ..a..a..a..a..a.
     64f:	06 33 00 0c 3f 00 00 1e 00 0c 06 00 00 06 00 00     .3..?...........
     65f:	06 00 00 06 00 00 06 00 00 fe 7f 00 fe 7f 00 06     ................
     66f:	00 00 06 00 00 06 00 00 06 00 00 06 00 00 0a fe     ................
     67f:	0f 00 fe 3f 00 00 70 00 00 60 00 00 60 00 00 60     ...?..p..`..`..`
     68f:	00 00 60 00 00 70 00 fe 3f 00 fe 0f 00 0d 02 00     ..`..p..?.......
     69f:	00 1e 00 00 fc 00 00 e0 03 00 80 1f 00 00 7c 00     ..............|.
     6af:	00 60 00 00 7c 00 80 1f 00 e0 03 00 fc 00 00 1e     .`..|...........
     6bf:	00 00 02 00 00 11 06 00 00 7e 00 00 f8 07 00 80     .........~......
     6cf:	3f 00 00 78 00 00 7c 00 c0 0f 00 7e 00 00 06 00     ?..x..|....~....
     6df:	00 7e 00 00 e0 07 00 00 7e 00 00 70 00 80 7f 00     .~......~..p....
     6ef:	f8 07 00 7e 00 00 06 00 00 0b 02 40 00 06 60 00     ...~.......@..`.
     6ff:	1e 78 00 38 1c 00 e0 07 00 80 01 00 e0 07 00 38     .x.8...........8
     70f:	1e 00 1e 78 00 06 60 00 02 40 00 0c 02 00 00 06     ...x..`..@......
     71f:	00 00 1e 00 00 78 00 00 e0 00 00 c0 7f 00 c0 7f     .....x..........
     72f:	00 e0 00 00 78 00 00 1e 00 00 06 00 00 02 00 00     ....x...........
     73f:	0b 06 70 00 06 78 00 06 7c 00 06 6e 00 06 67 00     ..p..x..|..n..g.
     74f:	c6 63 00 e6 60 00 76 60 00 3e 60 00 1e 60 00 0e     .c..`.v`.>`..`..
     75f:	60 00 08 03 00 00 1f 00 00 fe 00 00 f0 07 00 80     `...............
     76f:	3f 00 00 fc 01 00 e0 03 00 00 03 08 00 3c 00 30     ?............<.0
     77f:	7e 00 30 67 00 30 63 00 30 63 00 30 33 00 e0 7f     ~.0g.0c.0c.03...
     78f:	00 e0 7f 00 09 ff 7f 00 ff 7f 00 60 20 00 30 60     ...........` .0`
     79f:	00 30 60 00 30 60 00 70 70 00 e0 3f 00 c0 0f 00     .0`.0`.pp..?....
     7af:	08 80 0f 00 e0 3f 00 60 30 00 30 60 00 30 60 00     .....?.`0.0`.0`.
     7bf:	30 60 00 30 60 00 60 30 00 09 80 1f 00 e0 3f 00     0`.0`.`0......?.
     7cf:	70 70 00 30 60 00 30 60 00 30 60 00 30 30 00 ff     pp.0`.0`.0`.00..
     7df:	7f 00 ff 7f 00 09 80 0f 00 e0 3f 00 60 33 00 30     ..........?.`3.0
     7ef:	63 00 30 63 00 30 63 00 70 63 00 e0 63 00 c0 33     c.0c.0c.pc..c..3
     7ff:	00 06 30 00 00 fe 7f 00 ff 7f 00 33 00 00 33 00     ..0........3..3.
     80f:	00 03 00 00 09 80 1f 00 e0 3f 06 70 70 06 30 60     .........?.pp.0`
     81f:	06 30 60 06 30 60 06 30 30 07 f0 ff 03 f0 ff 01     .0`.0`.00.......
     82f:	08 ff 7f 00 ff 7f 00 60 00 00 30 00 00 30 00 00     .......`..0..0..
     83f:	30 00 00 f0 7f 00 e0 7f 00 02 f6 7f 00 f6 7f 00     0...............
     84f:	05 00 00 06 30 00 06 30 00 06 f6 ff 07 f6 ff 03     ....0..0........
     85f:	09 ff 7f 00 ff 7f 00 00 06 00 00 07 00 80 0f 00     ................
     86f:	c0 38 00 70 70 00 30 60 00 10 40 00 02 ff 7f 00     .8.pp.0`..@.....
     87f:	ff 7f 00 0e f0 7f 00 f0 7f 00 60 00 00 30 00 00     ..........`..0..
     88f:	30 00 00 30 00 00 f0 7f 00 e0 7f 00 60 00 00 30     0..0........`..0
     89f:	00 00 30 00 00 30 00 00 f0 7f 00 e0 7f 00 08 f0     ..0..0..........
     8af:	7f 00 f0 7f 00 60 00 00 30 00 00 30 00 00 30 00     .....`..0..0..0.
     8bf:	00 f0 7f 00 e0 7f 00 0a 80 0f 00 e0 3f 00 60 30     ............?.`0
     8cf:	00 30 60 00 30 60 00 30 60 00 30 60 00 60 30 00     .0`.0`.0`.0`.`0.
     8df:	e0 3f 00 80 0f 00 09 f0 ff 07 f0 ff 07 60 60 00     .?...........``.
     8ef:	30 60 00 30 60 00 30 60 00 70 70 00 e0 3f 00 c0     0`.0`.0`.pp..?..
     8ff:	0f 00 09 80 1f 00 e0 3f 00 70 70 00 30 60 00 30     .......?.pp.0`.0
     90f:	60 00 30 60 00 30 30 00 f0 ff 07 f0 ff 07 06 f0     `.0`.00.........
     91f:	7f 00 f0 7f 00 60 00 00 30 00 00 30 00 00 30 00     .....`..0..0..0.
     92f:	00 08 c0 31 00 e0 63 00 30 63 00 30 63 00 30 66     ...1..c.0c.0c.0f
     93f:	00 30 66 00 30 3e 00 60 1c 00 06 30 00 00 fe 3f     .0f.0>.`...0...?
     94f:	00 fe 7f 00 30 60 00 30 60 00 30 60 00 08 f0 1f     ....0`.0`.0`....
     95f:	00 f0 7f 00 00 60 00 00 60 00 00 60 00 00 30 00     .....`..`..`..0.
     96f:	f0 7f 00 f0 7f 00 09 10 00 00 f0 00 00 e0 07 00     ................
     97f:	00 3e 00 00 60 00 00 3e 00 e0 07 00 f0 00 00 10     .>..`..>........
     98f:	00 00 0e 30 00 00 f0 03 00 c0 3f 00 00 78 00 00     ...0......?..x..
     99f:	7c 00 80 07 00 f0 00 00 f0 00 00 c0 07 00 00 3c     |..............<
     9af:	00 00 70 00 c0 3f 00 f0 03 00 30 00 00 09 10 40     ..p..?....0....@
     9bf:	00 30 60 00 f0 78 00 c0 1d 00 00 07 00 c0 1d 00     .0`..x..........
     9cf:	f0 78 00 30 60 00 10 40 00 09 10 00 00 f0 00 00     .x.0`..@........
     9df:	e0 07 06 00 bf 07 00 f0 01 00 3f 00 e0 07 00 f0     ..........?.....
     9ef:	00 00 10 00 00 08 30 70 00 30 78 00 30 7c 00 30     ......0p.0x.0|.0
     9ff:	66 00 30 63 00 f0 61 00 f0 60 00 70 60 00           f.0c..a..`.p`.

00000a0d <Verdana8>:
     a0d:	01 02 20 5b 0b 00 bb 00 be 00 c1 00 c1 00 c1 00     .. [............
     a1d:	c1 00 d6 00 d6 00 d6 00 dd 00 e4 00 e4 00 e4 00     ................
     a2d:	e9 00 f0 00 f3 00 f3 00 fe 01 09 01 14 01 1f 01     ................
     a3d:	2c 01 37 01 42 01 4d 01 58 01 63 01 66 01 66 01     ,.7.B.M.X.c.f.f.
     a4d:	66 01 66 01 66 01 6f 01 6f 01 7c 01 89 01 98 01     f.f.f.o.o.|.....
     a5d:	a7 01 b2 01 bd 01 cc 01 d9 01 e0 01 e9 01 f6 02     ................
     a6d:	01 02 10 02 1d 02 2c 02 37 02 46 02 53 02 60 02     ......,.7.F.S.`.
     a7d:	6f 02 7c 02 89 02 9c 02 a9 02 b8 02 c5 02 c5 02     o.|.............
     a8d:	c5 02 c5 02 c5 02 c5 02 c5 02 d0 02 db 02 e6 02     ................
     a9d:	f1 02 fc 03 05 03 10 03 1b 03 1e 03 25 03 30 03     ............%.0.
     aad:	33 03 46 03 51 03 5c 03 67 03 72 03 7b 03 84 03     3.F.Q.\.g.r.{...
     abd:	8d 03 98 03 a3 03 b2 03 bd 03 c8 01 00 00 01 7e     ...............~
     acd:	01 0a 0c 00 12 00 12 00 8c 01 60 00 18 00 c6 00     ..........`.....
     add:	20 01 20 01 c0 00 03 f8 00 06 03 01 04 03 01 04      . .............
     aed:	06 03 f8 00 02 00 04 80 03 03 20 00 20 00 20 00     .......... . . .
     afd:	01 80 01 05 fc 00 02 01 02 01 02 01 fc 00 05 04     ................
     b0d:	01 04 01 fe 01 00 01 00 01 05 84 01 42 01 22 01     ............B.".
     b1d:	12 01 0c 01 05 84 00 02 01 12 01 12 01 ec 00 06     ................
     b2d:	60 00 50 00 48 00 44 00 fe 01 40 00 05 9e 00 12     `.P.H.D...@.....
     b3d:	01 12 01 12 01 e2 00 05 f8 00 14 01 12 01 12 01     ................
     b4d:	e0 00 05 02 00 82 01 62 00 1a 00 06 00 05 ec 00     .......b........
     b5d:	12 01 12 01 12 01 ec 00 05 1c 00 22 01 22 01 a2     ..........."."..
     b6d:	00 7c 00 01 98 01 04 02 00 62 01 12 00 0c 00 06     .|.......b......
     b7d:	c0 01 78 00 46 00 46 00 78 00 c0 01 06 fe 01 12     ..x.F.F.x.......
     b8d:	01 12 01 12 01 1c 01 e0 00 07 78 00 84 00 02 01     ..........x.....
     b9d:	02 01 02 01 02 01 84 00 07 fe 01 02 01 02 01 02     ................
     bad:	01 02 01 84 00 78 00 05 fe 01 12 01 12 01 12 01     .....x..........
     bbd:	12 01 05 fe 01 12 00 12 00 12 00 02 00 07 78 00     ..............x.
     bcd:	84 00 02 01 02 01 22 01 22 01 e4 00 06 fe 01 10     ......".".......
     bdd:	00 10 00 10 00 10 00 fe 01 03 02 01 fe 01 02 01     ................
     bed:	04 00 01 02 01 02 01 fe 00 06 fe 01 20 00 30 00     ............ .0.
     bfd:	48 00 84 00 02 01 05 fe 01 00 01 00 01 00 01 00     H...............
     c0d:	01 07 fe 01 06 00 18 00 60 00 18 00 06 00 fe 01     ........`.......
     c1d:	06 fe 01 06 00 18 00 60 00 80 01 fe 01 07 78 00     .......`......x.
     c2d:	84 00 02 01 02 01 02 01 84 00 78 00 05 fe 01 22     ..........x...."
     c3d:	00 22 00 22 00 1c 00 07 78 00 84 00 02 01 02 01     ."."....x.......
     c4d:	02 03 84 04 78 04 06 fe 01 22 00 22 00 62 00 9c     ....x....".".b..
     c5d:	00 00 01 06 8c 00 12 01 12 01 22 01 22 01 c4 00     .........."."...
     c6d:	07 02 00 02 00 02 00 fe 01 02 00 02 00 02 00 06     ................
     c7d:	fe 00 00 01 00 01 00 01 00 01 fe 00 06 0e 00 70     ...............p
     c8d:	00 80 01 80 01 70 00 0e 00 09 06 00 78 00 80 01     .....p......x...
     c9d:	78 00 06 00 78 00 80 01 78 00 06 00 06 86 01 48     x...x...x......H
     cad:	00 30 00 30 00 48 00 86 01 07 02 00 04 00 08 00     .0.0.H..........
     cbd:	f0 01 08 00 04 00 02 00 06 82 01 42 01 22 01 12     ...........B."..
     ccd:	01 0a 01 06 01 05 c0 00 28 01 28 01 28 01 f0 01     ........(.(.(...
     cdd:	05 ff 01 08 01 08 01 08 01 f0 00 05 f0 00 08 01     ................
     ced:	08 01 08 01 90 00 05 f0 00 08 01 08 01 08 01 ff     ................
     cfd:	01 05 f0 00 28 01 28 01 28 01 b0 00 04 08 00 fe     ....(.(.(.......
     d0d:	01 09 00 09 00 05 f0 00 08 05 08 05 08 05 f8 03     ................
     d1d:	05 ff 01 08 00 08 00 08 00 f0 01 01 f9 01 03 00     ................
     d2d:	04 08 04 f9 03 05 ff 01 40 00 60 00 90 00 08 01     ........@.`.....
     d3d:	01 ff 01 09 f8 01 08 00 08 00 08 00 f0 01 08 00     ................
     d4d:	08 00 08 00 f0 01 05 f8 01 08 00 08 00 08 00 f0     ................
     d5d:	01 05 f0 00 08 01 08 01 08 01 f0 00 05 f8 07 08     ................
     d6d:	01 08 01 08 01 f0 00 05 f0 00 08 01 08 01 08 01     ................
     d7d:	f8 07 04 f8 01 10 00 08 00 08 00 04 30 01 28 01     ............0.(.
     d8d:	48 01 c8 00 04 08 00 fe 00 08 01 08 01 05 f8 00     H...............
     d9d:	00 01 00 01 00 01 f8 01 05 18 00 60 00 80 01 60     ...........`...`
     dad:	00 18 00 07 78 00 80 01 60 00 18 00 60 00 80 01     ....x...`...`...
     dbd:	78 00 05 08 01 90 00 60 00 90 00 08 01 05 08 00     x......`........
     dcd:	70 04 80 03 70 00 08 00 04 88 01 48 01 28 01 18     p...p......H.(..
     ddd:	01                                                  .

00000dde <lcd_commmands>:
     dde:	af 40 a0 a6 a4 a2 ee c8 2f 24 ac 00 f8 00           .@....../$....

00000dec <pagemap>:
     dec:	07 06 05 04 03 02 01 00                             ........

00000df4 <text_menu>:
     df4:	35 15 3c 10 37 10 32 10 2d 10 28 10 41 10 41 10     5.<.7.2.-.(.A.A.
     e04:	41 10 8e 17 86 17 8c 17 8a 17 88 17 81 17 7c 17     A.............|.
     e14:	77 17 72 17 b7 11 d7 11 d2 11 cc 11 fa 14 98 17     w.r.............
     e24:	90 17 04 16 21 16 1c 16 16 16 12 16 0e 16 41 10     ....!.........A.
     e34:	1d 12 14 12 25 12 0d 12 08 12 62 10 5d 10 58 10     ....%.....b.].X.
     e44:	53 10 4e 10 48 10 42 10 f4 11 41 10 51 12 49 12     S.N.H.B...A.Q.I.
     e54:	60 14 5b 14 58 14 4e 14 44 14 a4 10 9c 10 97 10     `.[.X.N.D.......
     e64:	3c 12 37 12 2e 12 8d 11 09 16 81 11 e9 14 e5 14     <.7.............
     e74:	df 14 d6 14 41 10 41 10 35 15 32 15 bc 10 c3 10     ....A.A.5.2.....
     e84:	b2 10 41 10 41 10 e4 11 dd 11 67 17 55 17 42 17     ..A.A.....g.U.B.
     e94:	30 17 1a 17 0b 17 f7 16 e3 16 d5 16 c6 16 b7 16     0...............
     ea4:	a8 16 99 16 8a 16 7b 16 6c 16 58 16 3f 16 26 16     ......{.l.X.?.&.
     eb4:	41 10 41 10 62 10 5d 10 73 10 78 10 7d 10 82 10     A.A.b.].s.x.}...
     ec4:	f4 11 25 12 1d 12 14 12 0d 12 08 12 03 12 fe 11     ..%.............
     ed4:	f9 11 f4 11 ed 11 e7 11 cd 14 c6 14 c0 11 aa 10     ................
     ee4:	97 10 49 11 3d 11 41 10 fa 10 f1 10 e8 10 e4 10     ..I.=.A.........
     ef4:	db 10 d3 10 41 10 41 10 41 10 9d 17 c4 11 62 11     ....A.A.A.....b.
     f04:	54 11 4f 11 35 11 2a 11 41 10 cc 10 c3 10 41 10     T.O.5.*.A.....A.
     f14:	41 10 41 10 1c 16 16 16 12 16 29 15 90 14 1f 15     A.A.......).....
     f24:	14 15 05 15 fa 14 ee 14 41 10 41 10 b9 14 af 14     ........A.A.....
     f34:	a7 14 9a 14 63 14 66 10 86 14 7c 14 70 14 66 10     ....c.f...|.p.f.
     f44:	41 10 41 10 f0 15 e8 15 da 15 cd 15 bf 15 b4 15     A.A.............
     f54:	ab 15 a2 15 93 15 85 15 76 15 6a 15 63 15 5c 15     ........v.j.c.\.
     f64:	4f 15 43 15 39 15 f8 15 41 10 41 10 3c 14 31 14     O.C.9...A.A.<.1.
     f74:	20 14 13 14 08 14 f8 13 e8 13 d9 13 c9 13 b9 13      ...............
     f84:	a9 13 99 13 89 13 79 13 6b 13 5d 13 4e 13 3f 13     ......y.k.].N.?.
     f94:	32 13 25 13 19 13 0d 13 01 13 f4 12 ea 12 e0 12     2.%.............
     fa4:	d3 12 c8 12 bb 12 b0 12 a3 12 c8 12 96 12 b0 12     ................
     fb4:	41 10 41 10 51 12 49 12 43 12 41 10 25 11 20 11     A.A.Q.I.C.A.%. .
     fc4:	1b 11 16 11 11 11 0c 11 07 11 02 11 25 12 1d 12     ............%...
     fd4:	14 12 0d 12 08 12 03 12 fe 11 f9 11 8d 12 83 12     ................
     fe4:	7b 12 73 12 6a 12 62 12 59 12 f4 11 51 12 49 12     {.s.j.b.Y...Q.I.
     ff4:	43 12 41 10 41 10 78 11 6f 11 ad 11 a7 11 9b 11     C.A.A.x.o.......
    1004:	b9 17 b3 17 29 15 aa 17 a8 17 a6 17 92 10 8e 10     ....)...........
    1014:	87 10 21 10 1a 10                                   ..!...

0000101a <PRESET_2>:
    101a:	51 75 61 64 20 58 00                                Quad X.

00001021 <PRESET_1>:
    1021:	51 75 61 64 20 50 00                                Quad P.

00001028 <VBAT39>:
    1028:	33 2e 39 56 00                                      3.9V.

0000102d <VBAT38>:
    102d:	33 2e 38 56 00                                      3.8V.

00001032 <VBAT37>:
    1032:	33 2e 37 56 00                                      3.7V.

00001037 <VBAT36>:
    1037:	33 2e 36 56 00                                      3.6V.

0000103c <VBAT35>:
    103c:	33 2e 35 56 00                                      3.5V.

00001041 <Dummy0>:
	...

00001042 <MPU6050LPF7>:
    1042:	32 36 30 48 7a 00                                   260Hz.

00001048 <MPU6050LPF6>:
    1048:	31 38 34 48 7a 00                                   184Hz.

0000104e <MPU6050LPF5>:
    104e:	39 34 48 7a 00                                      94Hz.

00001053 <MPU6050LPF4>:
    1053:	34 34 48 7a 00                                      44Hz.

00001058 <MPU6050LPF3>:
    1058:	32 31 48 7a 00                                      21Hz.

0000105d <MPU6050LPF2>:
    105d:	31 30 48 7a 00                                      10Hz.

00001062 <MPU6050LPF1>:
    1062:	35 48 7a 00                                         5Hz.

00001066 <GeneralText10>:
    1066:	4d 50 55 36 30 35 30 20 4c 50 46 3a 00              MPU6050 LPF:.

00001073 <SWLPF4>:
    1073:	31 37 48 7a 00                                      17Hz.

00001078 <SWLPF3>:
    1078:	32 37 48 7a 00                                      27Hz.

0000107d <SWLPF2>:
    107d:	33 38 48 7a 00                                      38Hz.

00001082 <SWLPF1>:
    1082:	36 37 48 7a 00                                      67Hz.

00001087 <Random12>:
    1087:	73 69 67 6e 61 6c 00                                signal.

0000108e <Random11>:
    108e:	6c 6f 77 00                                         low.

00001092 <Random10>:
    1092:	68 69 67 68 00                                      high.

00001097 <Random1>:
    1097:	48 69 67 68 00                                      High.

0000109c <Safety2>:
    109c:	41 72 6d 61 62 6c 65 00                             Armable.

000010a4 <Safety1>:
    10a4:	41 72 6d 65 64 00                                   Armed.

000010aa <GeneralText5>:
    10aa:	53 79 6e 63 20 52 43 00                             Sync RC.

000010b2 <MixerItem16>:
    10b2:	52 65 76 53 63 61 6c 65 64 00                       RevScaled.

000010bc <MixerItem15>:
    10bc:	53 63 61 6c 65 64 00                                Scaled.

000010c3 <MixerItem12>:
    10c3:	52 65 76 65 72 73 65 64 00                          Reversed.

000010cc <MixerItem11>:
    10cc:	4e 6f 72 6d 61 6c 00                                Normal.

000010d3 <MixerMenuItem7>:
    10d3:	50 69 74 63 68 55 70 00                             PitchUp.

000010db <MixerMenuItem6>:
    10db:	53 69 64 65 77 61 79 73 00                          Sideways.

000010e4 <MixerMenuItem5>:
    10e4:	41 66 74 00                                         Aft.

000010e8 <MixerMenuItem4>:
    10e8:	49 6e 76 65 72 74 65 64 00                          Inverted.

000010f1 <MixerMenuItem3>:
    10f1:	56 65 72 74 69 63 61 6c 00                          Vertical.

000010fa <MixerMenuItem2>:
    10fa:	46 6f 72 77 61 72 64 00                             Forward.

00001102 <MOUT8>:
    1102:	4f 55 54 38 00                                      OUT8.

00001107 <MOUT7>:
    1107:	4f 55 54 37 00                                      OUT7.

0000110c <MOUT6>:
    110c:	4f 55 54 36 00                                      OUT6.

00001111 <MOUT5>:
    1111:	4f 55 54 35 00                                      OUT5.

00001116 <MOUT4>:
    1116:	4f 55 54 34 00                                      OUT4.

0000111b <MOUT3>:
    111b:	4f 55 54 33 00                                      OUT3.

00001120 <MOUT2>:
    1120:	4f 55 54 32 00                                      OUT2.

00001125 <MOUT1>:
    1125:	4f 55 54 31 00                                      OUT1.

0000112a <Status5>:
    112a:	28 44 69 73 61 72 6d 65 64 29 00                    (Disarmed).

00001135 <Status4>:
    1135:	28 41 72 6d 65 64 29 00                             (Armed).

0000113d <Status2>:
    113d:	66 6f 72 20 73 74 61 74 75 73 2e 00                 for status..

00001149 <Status0>:
    1149:	50 72 65 73 73 00                                   Press.

0000114f <WizardText2>:
    114f:	44 6f 6e 65 00                                      Done.

00001154 <WizardText1>:
    1154:	48 6f 6c 64 20 61 73 20 73 68 6f 77 6e 00           Hold as shown.

00001162 <WizardText0>:
    1162:	4e 6f 20 52 58 20 73 69 67 6e 61 6c 00              No RX signal.

0000116f <PText6>:
    116f:	73 65 74 74 69 6e 67 73 00                          settings.

00001178 <PText5>:
    1178:	55 70 64 61 74 69 6e 67 00                          Updating.

00001181 <PText4>:
    1181:	43 61 6c 2e 20 66 61 69 6c 65 64 00                 Cal. failed.

0000118d <PText3>:
    118d:	45 53 43 20 43 61 6c 69 62 72 61 74 65 00           ESC Calibrate.

0000119b <PText2>:
    119b:	48 6f 6c 64 20 73 74 65 61 64 79 00                 Hold steady.

000011a7 <PText1>:
    11a7:	52 65 73 65 74 00                                   Reset.

000011ad <PText0>:
    11ad:	4f 70 65 6e 41 65 72 6f 32 00                       OpenAero2.

000011b7 <Disarmed>:
    11b7:	44 69 73 61 72 6d 65 64 00                          Disarmed.

000011c0 <ErrorText10>:
    11c0:	4c 6f 77 00                                         Low.

000011c4 <Status3>:
    11c4:	42 61 74 74 65 72 79 00                             Battery.

000011cc <ErrorText7>:
    11cc:	4d 6f 64 65 6c 00                                   Model.

000011d2 <ErrorText6>:
    11d2:	4c 6f 73 74 00                                      Lost.

000011d7 <ErrorText5>:
    11d7:	45 72 72 6f 72 00                                   Error.

000011dd <ErrorText4>:
    11dd:	53 69 67 6e 61 6c 00                                Signal.

000011e4 <ErrorText3>:
    11e4:	4e 6f 00                                            No.

000011e7 <ChannelRef12>:
    11e7:	45 6c 65 76 2e 00                                   Elev..

000011ed <ChannelRef10>:
    11ed:	54 68 72 6f 74 2e 00                                Throt..

000011f4 <ChannelRef8>:
    11f4:	4e 6f 6e 65 00                                      None.

000011f9 <ChannelRef7>:
    11f9:	41 55 58 33 00                                      AUX3.

000011fe <ChannelRef6>:
    11fe:	41 55 58 32 00                                      AUX2.

00001203 <ChannelRef5>:
    1203:	41 55 58 31 00                                      AUX1.

00001208 <ChannelRef4>:
    1208:	47 65 61 72 00                                      Gear.

0000120d <ChannelRef3>:
    120d:	52 75 64 64 65 72 00                                Rudder.

00001214 <ChannelRef2>:
    1214:	45 6c 65 76 61 74 6f 72 00                          Elevator.

0000121d <ChannelRef1>:
    121d:	41 69 6c 65 72 6f 6e 00                             Aileron.

00001225 <ChannelRef0>:
    1225:	54 68 72 6f 74 74 6c 65 00                          Throttle.

0000122e <MixerItem62>:
    122e:	53 71 72 74 53 69 6e 65 00                          SqrtSine.

00001237 <MixerItem61>:
    1237:	53 69 6e 65 00                                      Sine.

0000123c <MixerItem60>:
    123c:	4c 69 6e 65 61 72 00                                Linear.

00001243 <MixerItem49>:
    1243:	4d 6f 74 6f 72 00                                   Motor.

00001249 <MixerItem41>:
    1249:	44 2e 53 65 72 76 6f 00                             D.Servo.

00001251 <MixerItem40>:
    1251:	41 2e 53 65 72 76 6f 00                             A.Servo.

00001259 <MixerItem81>:
    1259:	41 4c 20 50 69 74 63 68 00                          AL Pitch.

00001262 <MixerItem80>:
    1262:	41 4c 20 52 6f 6c 6c 00                             AL Roll.

0000126a <MixerItem74>:
    126a:	41 63 63 50 69 74 63 68 00                          AccPitch.

00001273 <MixerItem73>:
    1273:	41 63 63 52 6f 6c 6c 00                             AccRoll.

0000127b <MixerItem72>:
    127b:	47 79 72 6f 59 61 77 00                             GyroYaw.

00001283 <MixerItem71>:
    1283:	47 79 72 6f 50 69 74 63 68 00                       GyroPitch.

0000128d <MixerItem70>:
    128d:	47 79 72 6f 52 6f 6c 6c 00                          GyroRoll.

00001296 <MixerItem31>:
    1296:	50 32 20 53 6f 75 72 63 65 20 42 3a 00              P2 Source B:.

000012a3 <MixerItem21>:
    12a3:	50 31 20 53 6f 75 72 63 65 20 42 3a 00              P1 Source B:.

000012b0 <MixerItem30>:
    12b0:	50 32 20 56 6f 6c 75 6d 65 3a 00                    P2 Volume:.

000012bb <MixerItem29>:
    12bb:	50 32 20 53 6f 75 72 63 65 20 41 3a 00              P2 Source A:.

000012c8 <MixerItem2>:
    12c8:	50 31 20 56 6f 6c 75 6d 65 3a 00                    P1 Volume:.

000012d3 <MixerItem0>:
    12d3:	50 31 20 53 6f 75 72 63 65 20 41 3a 00              P1 Source A:.

000012e0 <MixerItem43>:
    12e0:	50 32 20 5a 20 61 63 63 3a 00                       P2 Z acc:.

000012ea <MixerItem42>:
    12ea:	50 31 20 5a 20 61 63 63 3a 00                       P1 Z acc:.

000012f4 <MixerItem28>:
    12f4:	50 32 20 50 69 74 63 68 20 41 4c 3a 00              P2 Pitch AL:.

00001301 <MixerItem3>:
    1301:	50 31 20 50 69 74 63 68 20 41 4c 00                 P1 Pitch AL.

0000130d <MixerItem27>:
    130d:	50 32 20 52 6f 6c 6c 20 41 4c 3a 00                 P2 Roll AL:.

00001319 <MixerItem7>:
    1319:	50 31 20 52 6f 6c 6c 20 41 4c 3a 00                 P1 Roll AL:.

00001325 <MixerItem26>:
    1325:	50 32 20 59 61 77 20 67 79 72 6f 3a 00              P2 Yaw gyro:.

00001332 <MixerItem6>:
    1332:	50 31 20 59 61 77 20 67 79 72 6f 3a 00              P1 Yaw gyro:.

0000133f <MixerItem25>:
    133f:	50 32 20 50 69 74 63 68 20 67 79 72 6f 3a 00        P2 Pitch gyro:.

0000134e <MixerItem5>:
    134e:	50 31 20 50 69 74 63 68 20 67 79 72 6f 3a 00        P1 Pitch gyro:.

0000135d <MixerItem24>:
    135d:	50 32 20 52 6f 6c 6c 20 67 79 72 6f 3a 00           P2 Roll gyro:.

0000136b <MixerItem4>:
    136b:	50 31 20 52 6f 6c 6c 20 67 79 72 6f 3a 00           P1 Roll gyro:.

00001379 <MixerItem56>:
    1379:	50 32 20 52 75 64 2e 20 76 6f 6c 75 6d 65 3a 00     P2 Rud. volume:.

00001389 <MixerItem53>:
    1389:	50 31 20 52 75 64 2e 20 76 6f 6c 75 6d 65 3a 00     P1 Rud. volume:.

00001399 <MixerItem55>:
    1399:	50 32 20 45 6c 65 2e 20 76 6f 6c 75 6d 65 3a 00     P2 Ele. volume:.

000013a9 <MixerItem52>:
    13a9:	50 31 20 45 6c 65 2e 20 76 6f 6c 75 6d 65 3a 00     P1 Ele. volume:.

000013b9 <MixerItem54>:
    13b9:	50 32 20 41 69 6c 2e 20 76 6f 6c 75 6d 65 3a 00     P2 Ail. volume:.

000013c9 <MixerItem51>:
    13c9:	50 31 20 41 69 6c 2e 20 76 6f 6c 75 6d 65 3a 00     P1 Ail. volume:.

000013d9 <Mixeritem50>:
    13d9:	54 68 72 6f 74 74 6c 65 20 63 75 72 76 65 00        Throttle curve.

000013e8 <MixerItem33>:
    13e8:	50 32 20 54 68 72 2e 20 76 6f 6c 75 6d 65 3a 00     P2 Thr. volume:.

000013f8 <MixerItem23>:
    13f8:	50 31 20 54 68 72 2e 20 76 6f 6c 75 6d 65 3a 00     P1 Thr. volume:.

00001408 <MixerItem34>:
    1408:	50 32 20 4f 66 66 73 65 74 3a 00                    P2 Offset:.

00001413 <MixerItem35>:
    1413:	50 31 2e 6e 20 4f 66 66 73 65 74 3a 00              P1.n Offset:.

00001420 <MixerItem36>:
    1420:	50 31 2e 6e 20 25 20 6f 66 20 74 72 61 6e 73 3a     P1.n % of trans:
	...

00001431 <MixerItem20>:
    1431:	50 31 20 4f 66 66 73 65 74 3a 00                    P1 Offset:.

0000143c <MixerItem1>:
    143c:	44 65 76 69 63 65 3a 00                             Device:.

00001444 <P5text>:
    1444:	50 31 2e 6e 20 2d 20 50 32 00                       P1.n - P2.

0000144e <P4text>:
    144e:	50 31 20 2d 20 50 31 2e 6e 00                       P1 - P1.n.

00001458 <P3text>:
    1458:	50 32 00                                            P2.

0000145b <P2text>:
    145b:	50 31 2e 6e 00                                      P1.n.

00001460 <P1text>:
    1460:	50 31 00                                            P1.

00001463 <BattMenuItem2>:
    1463:	4c 6f 77 20 56 20 41 6c 61 72 6d 3a 00              Low V Alarm:.

00001470 <GeneralText7>:
    1470:	41 4c 20 63 6f 72 72 65 63 74 3a 00                 AL correct:.

0000147c <GeneralText16>:
    147c:	47 79 72 6f 20 4c 50 46 3a 00                       Gyro LPF:.

00001486 <GeneralText6>:
    1486:	41 63 63 2e 20 4c 50 46 3a 00                       Acc. LPF:.

00001490 <GeneralText3>:
    1490:	50 57 4d 20 72 61 74 65 3a 00                       PWM rate:.

0000149a <GeneralText2>:
    149a:	44 69 73 61 72 6d 20 74 69 6d 65 3a 00              Disarm time:.

000014a7 <AutoMenuItem2>:
    14a7:	53 61 66 65 74 79 3a 00                             Safety:.

000014af <Contrast>:
    14af:	43 6f 6e 74 72 61 73 74 3a 00                       Contrast:.

000014b9 <MixerMenuItem0>:
    14b9:	4f 72 69 65 6e 74 61 74 69 6f 6e 3a 00              Orientation:.

000014c6 <RCMenuItem7>:
    14c6:	46 75 74 61 62 61 00                                Futaba.

000014cd <RCMenuItem6>:
    14cd:	4a 52 2c 53 70 6b 74 6d 00                          JR,Spktm.

000014d6 <RXMode3>:
    14d6:	53 70 65 6b 74 72 75 6d 00                          Spektrum.

000014df <RXMode2>:
    14df:	53 2d 42 75 73 00                                   S-Bus.

000014e5 <RXMode1>:
    14e5:	50 57 4d 00                                         PWM.

000014e9 <RXMode0>:
    14e9:	43 50 50 4d 00                                      CPPM.

000014ee <Transition_P1n>:
    14ee:	54 72 61 6e 73 2e 20 50 31 6e 3a 00                 Trans. P1n:.

000014fa <Transition>:
    14fa:	54 72 61 6e 73 69 74 69 6f 6e 00                    Transition.

00001505 <RCMenuItem2>:
    1505:	50 72 6f 66 69 6c 65 20 43 68 61 6e 2e 3a 00        Profile Chan.:.

00001514 <RCMenuItem0>:
    1514:	43 68 2e 20 6f 72 64 65 72 3a 00                    Ch. order:.

0000151f <RCMenuItem20>:
    151f:	50 57 4d 20 73 79 6e 63 3a 00                       PWM sync:.

00001529 <RCMenuItem1>:
    1529:	52 58 20 74 79 70 65 3a 00                          RX type:.

00001532 <AutoMenuItem15>:
    1532:	4f 4e 00                                            ON.

00001535 <AutoMenuItem11>:
    1535:	4f 46 46 00                                         OFF.

00001539 <StabMenuItem30>:
    1539:	59 61 77 20 74 72 69 6d 3a 00                       Yaw trim:.

00001543 <StabMenuItem9>:
    1543:	59 61 77 20 49 20 72 61 74 65 3a 00                 Yaw I rate:.

0000154f <StabMenuItem12>:
    154f:	59 61 77 20 49 20 4c 69 6d 69 74 3a 00              Yaw I Limit:.

0000155c <StabMenuItem8>:
    155c:	59 61 77 20 49 3a 00                                Yaw I:.

00001563 <StabMenuItem7>:
    1563:	59 61 77 20 50 3a 00                                Yaw P:.

0000156a <AutoMenuItem8>:
    156a:	50 69 74 63 68 20 74 72 69 6d 3a 00                 Pitch trim:.

00001576 <AutoMenuItem21>:
    1576:	50 69 74 63 68 20 41 75 74 6f 4c 76 6c 3a 00        Pitch AutoLvl:.

00001585 <StabMenuItem6>:
    1585:	50 69 74 63 68 20 49 20 72 61 74 65 3a 00           Pitch I rate:.

00001593 <StabMenuItem11>:
    1593:	50 69 74 63 68 20 49 20 4c 69 6d 69 74 3a 00        Pitch I Limit:.

000015a2 <StabMenuItem5>:
    15a2:	50 69 74 63 68 20 49 3a 00                          Pitch I:.

000015ab <AutoMenuItem4>:
    15ab:	50 69 74 63 68 20 50 3a 00                          Pitch P:.

000015b4 <AutoMenuItem7>:
    15b4:	52 6f 6c 6c 20 74 72 69 6d 3a 00                    Roll trim:.

000015bf <AutoMenuItem20>:
    15bf:	52 6f 6c 6c 20 41 75 74 6f 4c 76 6c 3a 00           Roll AutoLvl:.

000015cd <StabMenuItem3>:
    15cd:	52 6f 6c 6c 20 49 20 72 61 74 65 3a 00              Roll I rate:.

000015da <StabMenuItem10>:
    15da:	52 6f 6c 6c 20 49 20 4c 69 6d 69 74 3a 00           Roll I Limit:.

000015e8 <StabMenuItem2>:
    15e8:	52 6f 6c 6c 20 49 3a 00                             Roll I:.

000015f0 <AutoMenuItem1>:
    15f0:	52 6f 6c 6c 20 50 3a 00                             Roll P:.

000015f8 <StabMenuItem13>:
    15f8:	41 63 63 20 56 65 72 74 20 50 3a 00                 Acc Vert P:.

00001604 <SensorMenuItem2>:
    1604:	49 6e 76 2e 00                                      Inv..

00001609 <SensorMenuItem1>:
    1609:	43 61 6c 2e 00                                      Cal..

0000160e <PText19>:
    160e:	41 63 63 00                                         Acc.

00001612 <PText18>:
    1612:	59 61 77 00                                         Yaw.

00001616 <PText17>:
    1616:	50 69 74 63 68 00                                   Pitch.

0000161c <PText16>:
    161c:	52 6f 6c 6c 00                                      Roll.

00001621 <PText15>:
    1621:	47 79 72 6f 00                                      Gyro.

00001626 <MainMenuItem23>:
    1626:	31 39 2e 20 50 6f 73 2e 20 53 65 72 76 6f 20 74     19. Pos. Servo t
    1636:	72 76 6c 2e 20 28 25 29 00                          rvl. (%).

0000163f <MainMenuItem22>:
    163f:	31 38 2e 20 4e 65 67 2e 20 53 65 72 76 6f 20 74     18. Neg. Servo t
    164f:	72 76 6c 2e 20 28 25 29 00                          rvl. (%).

00001658 <MainMenuItem20>:
    1658:	31 37 2e 20 53 65 72 76 6f 20 64 69 72 65 63 74     17. Servo direct
    1668:	69 6f 6e 00                                         ion.

0000166c <MainMenuItem18>:
    166c:	31 36 2e 20 4f 55 54 38 20 4d 69 78 65 72 00        16. OUT8 Mixer.

0000167b <MainMenuItem17>:
    167b:	31 35 2e 20 4f 55 54 37 20 4d 69 78 65 72 00        15. OUT7 Mixer.

0000168a <MainMenuItem16>:
    168a:	31 34 2e 20 4f 55 54 36 20 4d 69 78 65 72 00        14. OUT6 Mixer.

00001699 <MainMenuItem15>:
    1699:	31 33 2e 20 4f 55 54 35 20 4d 69 78 65 72 00        13. OUT5 Mixer.

000016a8 <MainMenuItem14>:
    16a8:	31 32 2e 20 4f 55 54 34 20 4d 69 78 65 72 00        12. OUT4 Mixer.

000016b7 <MainMenuItem13>:
    16b7:	31 31 2e 20 4f 55 54 33 20 4d 69 78 65 72 00        11. OUT3 Mixer.

000016c6 <MainMenuItem12>:
    16c6:	31 30 2e 20 4f 55 54 32 20 4d 69 78 65 72 00        10. OUT2 Mixer.

000016d5 <MainMenuItem11>:
    16d5:	39 2e 20 4f 55 54 31 20 4d 69 78 65 72 00           9. OUT1 Mixer.

000016e3 <MainMenuItem3>:
    16e3:	38 2e 20 46 6c 69 67 68 74 20 70 72 6f 66 69 6c     8. Flight profil
    16f3:	65 20 32 00                                         e 2.

000016f7 <MainMenuItem2>:
    16f7:	37 2e 20 46 6c 69 67 68 74 20 70 72 6f 66 69 6c     7. Flight profil
    1707:	65 20 31 00                                         e 1.

0000170b <MainMenuItem10>:
    170b:	36 2e 20 4c 65 76 65 6c 20 6d 65 74 65 72 00        6. Level meter.

0000171a <MainMenuItem8>:
    171a:	35 2e 20 53 65 6e 73 6f 72 20 63 61 6c 69 62 72     5. Sensor calibr
    172a:	61 74 69 6f 6e 00                                   ation.

00001730 <MainMenuItem7>:
    1730:	34 2e 20 53 74 69 63 6b 20 70 6f 6c 61 72 69 74     4. Stick polarit
    1740:	79 00                                               y.

00001742 <MainMenuItem9>:
    1742:	33 2e 20 52 65 63 65 69 76 65 72 20 69 6e 70 75     3. Receiver inpu
    1752:	74 73 00                                            ts.

00001755 <MainMenuItem1>:
    1755:	32 2e 20 52 65 63 65 69 76 65 72 20 73 65 74 75     2. Receiver setu
    1765:	70 00                                               p.

00001767 <MainMenuItem0>:
    1767:	31 2e 20 47 65 6e 65 72 61 6c 00                    1. General.

00001772 <MenuFrame8>:
    1772:	53 61 76 65 00                                      Save.

00001777 <MenuFrame7>:
    1777:	44 65 66 2e 00                                      Def..

0000177c <MenuFrame6>:
    177c:	42 61 63 6b 00                                      Back.

00001781 <MenuFrame5>:
    1781:	4d 65 6e 75 00                                      Menu.

00001786 <MenuFrame1>:
    1786:	45 00                                               E.

00001788 <MenuFrame4>:
    1788:	44 00                                               D.

0000178a <MenuFrame3>:
    178a:	43 00                                               C.

0000178c <MenuFrame2>:
    178c:	42 00                                               B.

0000178e <MenuFrame0>:
    178e:	41 00                                               A.

00001790 <StatusText9>:
    1790:	4a 69 74 74 65 72 3a 00                             Jitter:.

00001798 <StatusText8>:
    1798:	50 6f 73 3a 00                                      Pos:.

0000179d <StatusText7>:
    179d:	42 61 74 74 65 72 79 3a 00                          Battery:.

000017a6 <StatusText5>:
    17a6:	30 00                                               0.

000017a8 <StatusText4>:
    17a8:	2e 00                                               ..

000017aa <StatusText3>:
    17aa:	50 72 6f 66 69 6c 65 3a 00                          Profile:.

000017b3 <StatusText1>:
    17b3:	4d 6f 64 65 3a 00                                   Mode:.

000017b9 <StatusText0>:
    17b9:	56 65 72 73 69 6f 6e 3a 20 20 20 31 2e 31 20 42     Version:   1.1 B
    17c9:	31 30 00                                            10.

000017cc <Gyro_Pol>:
    17cc:	01 01 01 01 01 01 01 ff ff ff ff 01 01 ff 01 ff     ................
    17dc:	01 01                                               ..

000017de <Gyro_RPY_Order>:
    17de:	00 01 02 01 02 00 00 01 02 00 01 02 01 00 02 02     ................
    17ee:	01 00                                               ..

000017f0 <LPF_lookup_HS>:
    17f0:	e1 7a 08 41 c3 f5 90 40 29 5c 1f 40 71 3d ca 3f     .z.A...@)\.@q=.?
    1800:	52 b8 9e 3f 00 00 80 3f 00 00 80 3f 00 00 80 3f     R..?...?...?...?

00001810 <LPF_lookup>:
    1810:	00 00 b8 41 ae 47 39 41 33 33 bb 40 66 66 46 40     ...A.G9A33.@ffF@
    1820:	c3 f5 e8 3f cd cc ac 3f 52 b8 9e 3f 00 00 80 3f     ...?...?R..?...?

00001830 <lines>:
    1830:	03 0f 1b 27                                         ...'

00001834 <flight_menu_ranges>:
    1834:	00 7f 01 00 3c 00 7f 01 00 28 00 7d 01 00 0a 00     ....<....(.}....
    1844:	04 01 00 02 00 7f 01 00 05 81 7f 01 00 00 00 7f     ................
    1854:	01 00 3c 00 7f 01 00 28 00 7d 01 00 0a 00 04 01     ..<....(.}......
    1864:	00 02 00 7f 01 00 05 81 7f 01 00 00 00 7f 01 00     ................
    1874:	50 00 7f 01 00 00 00 7d 01 00 00 00 04 01 00 01     P......}........
    1884:	81 7f 01 00 00 00 7f 01 00 00                       ..........

0000188e <FlightMenuText>:
	...

000018a0 <mixer_menu_ranges>:
    18a0:	00 02 01 01 00 83 7d 01 00 00 01 63 01 00 32 83     ......}....c..2.
    18b0:	7d 01 00 00 83 7d 01 00 00 00 7d 01 00 64 00 7d     }....}....}..d.}
    18c0:	01 00 64 00 02 01 01 00 83 7d 01 00 00 83 7d 01     ..d......}....}.
    18d0:	00 00 83 7d 01 00 00 83 7d 01 00 00 83 7d 01 00     ...}....}....}..
    18e0:	00 83 7d 01 00 00 00 02 01 01 00 00 02 01 01 00     ..}.............
    18f0:	00 02 01 01 00 00 02 01 01 00 00 02 01 01 00 00     ................
    1900:	02 01 01 00 00 02 01 01 00 00 02 01 01 00 00 02     ................
    1910:	01 01 00 00 02 01 01 00 00 02 01 01 00 00 02 01     ................
    1920:	01 00 00 0f 01 01 0f 83 7d 01 00 00 00 0f 01 01     ........}.......
    1930:	0f 83 7d 01 00 00 00 0f 01 01 0f 83 7d 01 00 00     ..}.........}...
    1940:	00 0f 01 01 0f 83 7d 01 00 00                       ......}...

0000194a <MixerMenuText>:
    194a:	e2 00 00 00 00 00 00 38 00 00 00 00 00 00 44 44     .......8......DD
    195a:	44 44 44 44 44 44 44 44 44 44 ee 00 ee 00 ee 00     DDDDDDDDDD......
    196a:	ee 00                                               ..

0000196c <servo_menu_ranges>:
    196c:	00 01 01 01 00 83 00 01 03 9c 00 7d 01 03 64        ...........}..d

0000197b <ServoMenuText>:
    197b:	8d 8d 8d 8d 8d 8d 8d 8d 00 00 00 00 00 00 00 00     ................
	...

00001993 <rc_menu_ranges>:
    1993:	00 03 01 01 01 00 02 01 01 00 00 04 01 01 04 00     ................
    19a3:	01 01 01 00 00 07 01 01 04 00 28 01 00 00 01 63     ..........(....c
    19b3:	01 00 32 00 00 00 00 00 00 00 00 00 00 00 05 01     ..2.............
    19c3:	01 00 1c 32 01 00 24 00 01 01 01 01 00 7f 01 00     ...2..$.........
    19d3:	1e 00 05 01 01 00 00 06 01 01 02 00 07 01 01 02     ................
    19e3:	00 07 01 01 07 01 0a 01 00 07                       ..........

000019ed <RCMenuText>:
    19ed:	3e 76 69 74 69 00 00 00 00 7c 00 35 00 00 25 25     >viti....|.5..%%
    19fd:	25 00                                               %.

000019ff <SQRTSIN>:
    19ff:	00 0d 12 16 19 1c 1f 21 23 26 28 29 2b 2d 2f 30     .......!#&()+-/0
    1a0f:	32 33 35 36 38 39 3a 3b 3d 3e 3f 40 41 42 43 44     235689:;=>?@ABCD
    1a1f:	45 46 47 48 49 4a 4b 4c 4d 4d 4e 4f 50 51 51 52     EFGHIJKLMMNOPQQR
    1a2f:	53 53 54 55 55 56 57 57 58 58 59 59 5a 5a 5b 5b     SSTUUVWWXXYYZZ[[
    1a3f:	5c 5c 5d 5d 5e 5e 5e 5f 5f 5f 60 60 60 61 61 61     \\]]^^^___```aaa
    1a4f:	62 62 62 62 62 63 63 63 63 63 63 63 64 64 64 64     bbbbbcccccccdddd
    1a5f:	64 64 64 64 64                                      ddddd

00001a64 <SIN>:
    1a64:	00 02 03 05 06 08 0a 0b 0d 0e 10 11 13 14 16 17     ................
    1a74:	19 1a 1c 1d 1f 20 22 23 25 26 28 29 2b 2c 2d 2f     ..... "#%&()+,-/
    1a84:	30 32 33 34 36 37 38 3a 3b 3c 3d 3f 40 41 42 43     0234678:;<=?@ABC
    1a94:	44 46 47 48 49 4a 4b 4c 4d 4e 4f 50 51 52 53 54     DFGHIJKLMNOPQRST
    1aa4:	54 55 56 57 58 58 59 5a 5a 5b 5c 5c 5d 5e 5e 5f     TUVWXXYZZ[\\]^^_
    1ab4:	5f 60 60 60 61 61 62 62 62 63 63 63 63 63 64 64     _```aabbbcccccdd
    1ac4:	64 64 64 64 64 00                                   ddddd.

00001aca <__ctors_end>:
    1aca:	11 24       	eor	r1, r1
    1acc:	1f be       	out	0x3f, r1	; 63
    1ace:	cf ef       	ldi	r28, 0xFF	; 255
    1ad0:	d0 e1       	ldi	r29, 0x10	; 16
    1ad2:	de bf       	out	0x3e, r29	; 62
    1ad4:	cd bf       	out	0x3d, r28	; 61

00001ad6 <wdt_init>:
// WDT reset prototype. Placed before main() in code to prevent wdt re-firing
void wdt_init(void) __attribute__((naked)) __attribute__((section(".init3")));

void wdt_init(void)
{
	MCUSR = 0;
    1ad6:	14 be       	out	0x34, r1	; 52
	wdt_disable();
    1ad8:	88 e1       	ldi	r24, 0x18	; 24
    1ada:	0f b6       	in	r0, 0x3f	; 63
    1adc:	f8 94       	cli
    1ade:	80 93 60 00 	sts	0x0060, r24
    1ae2:	10 92 60 00 	sts	0x0060, r1
    1ae6:	0f be       	out	0x3f, r0	; 63

00001ae8 <__do_copy_data>:
    1ae8:	15 e0       	ldi	r17, 0x05	; 5
    1aea:	a0 e0       	ldi	r26, 0x00	; 0
    1aec:	b1 e0       	ldi	r27, 0x01	; 1
    1aee:	e0 ed       	ldi	r30, 0xD0	; 208
    1af0:	f2 e9       	ldi	r31, 0x92	; 146
    1af2:	02 c0       	rjmp	.+4      	; 0x1af8 <__do_copy_data+0x10>
    1af4:	05 90       	lpm	r0, Z+
    1af6:	0d 92       	st	X+, r0
    1af8:	a4 31       	cpi	r26, 0x14	; 20
    1afa:	b1 07       	cpc	r27, r17
    1afc:	d9 f7       	brne	.-10     	; 0x1af4 <__do_copy_data+0xc>

00001afe <__do_clear_bss>:
    1afe:	28 e0       	ldi	r18, 0x08	; 8
    1b00:	a4 e1       	ldi	r26, 0x14	; 20
    1b02:	b5 e0       	ldi	r27, 0x05	; 5
    1b04:	01 c0       	rjmp	.+2      	; 0x1b08 <.do_clear_bss_start>

00001b06 <.do_clear_bss_loop>:
    1b06:	1d 92       	st	X+, r1

00001b08 <.do_clear_bss_start>:
    1b08:	a5 34       	cpi	r26, 0x45	; 69
    1b0a:	b2 07       	cpc	r27, r18
    1b0c:	e1 f7       	brne	.-8      	; 0x1b06 <.do_clear_bss_loop>
    1b0e:	0e 94 13 1a 	call	0x3426	; 0x3426 <main>
    1b12:	0c 94 66 49 	jmp	0x92cc	; 0x92cc <_exit>

00001b16 <__bad_interrupt>:
    1b16:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00001b1a <glcd_delay>:
;*************************************************************************

	.global glcd_delay
	.func   glcd_delay
glcd_delay:
	nop					// 1 5 * 50ns = 250ns = 4MHz
    1b1a:	00 00       	nop
	ret					// 4 (5 cycles)
    1b1c:	08 95       	ret

00001b1e <glcd_delay_1us>:
;*************************************************************************

	.global glcd_delay_1us
	.func   glcd_delay_1us
glcd_delay_1us:
	rcall	glcd_delay
    1b1e:	fd df       	rcall	.-6      	; 0x1b1a <glcd_delay>
	rcall	glcd_delay
    1b20:	fc df       	rcall	.-8      	; 0x1b1a <glcd_delay>
	rcall	glcd_delay
    1b22:	fb df       	rcall	.-10     	; 0x1b1a <glcd_delay>
	rcall	glcd_delay
    1b24:	fa df       	rcall	.-12     	; 0x1b1a <glcd_delay>
	ret
    1b26:	08 95       	ret

00001b28 <bind_master>:
;*************************************************************************

	.global bind_master
	.func   bind_master
bind_master:
	push	YL			//	1
    1b28:	cf 93       	push	r28
	push	XL			//	1
    1b2a:	af 93       	push	r26

	ldi		XL,0x5		// 	1 Master is 5 pulses
    1b2c:	a5 e0       	ldi	r26, 0x05	; 5

00001b2e <master_loop>:
master_loop:
	cbi 	BIND		//	2
    1b2e:	58 98       	cbi	0x0b, 0	; 11
	ldi		YL,0x76		// 	1 		118us
    1b30:	c6 e7       	ldi	r28, 0x76	; 118
	call	VarDelay	//	4
    1b32:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <VarDelay>
	sbi		BIND		//	2
    1b36:	58 9a       	sbi	0x0b, 0	; 11
	ldi		YL,0x7A		// 	1 		122us
    1b38:	ca e7       	ldi	r28, 0x7A	; 122
	call	VarDelay	//	4
    1b3a:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <VarDelay>
	dec		XL			//	1
    1b3e:	aa 95       	dec	r26
	brne	master_loop	//  2 1
    1b40:	b1 f7       	brne	.-20     	; 0x1b2e <master_loop>

	pop		XL			//	  1
    1b42:	af 91       	pop	r26
	pop		YL			//	  1
    1b44:	cf 91       	pop	r28
	ret					//	  4 
    1b46:	08 95       	ret

00001b48 <VarDelay>:
; 5 cycles to configure and call, 4 to return and 2 to change bit afterwards = 11
; 20 cycles makes 1.0us
;*************************************************************************

VarDelay:
	rjmp .+0			// 2
    1b48:	00 c0       	rjmp	.+0      	; 0x1b4a <VarDelay+0x2>
	rjmp .+0			// 2
    1b4a:	00 c0       	rjmp	.+0      	; 0x1b4c <VarDelay+0x4>
	rjmp .+0			// 2
    1b4c:	00 c0       	rjmp	.+0      	; 0x1b4e <VarDelay+0x6>
	rjmp .+0			// 2
    1b4e:	00 c0       	rjmp	.+0      	; 0x1b50 <VarDelay+0x8>
	rjmp .+0			// 2
    1b50:	00 c0       	rjmp	.+0      	; 0x1b52 <VarDelay+0xa>
	rjmp .+0			// 2
    1b52:	00 c0       	rjmp	.+0      	; 0x1b54 <VarDelay+0xc>
	rjmp .+0			// 2
    1b54:	00 c0       	rjmp	.+0      	; 0x1b56 <VarDelay+0xe>
	rjmp .+0			// 2
    1b56:	00 c0       	rjmp	.+0      	; 0x1b58 <VarDelay+0x10>
	nop					// 1
    1b58:	00 00       	nop
	dec 	YL			// 1
    1b5a:	ca 95       	dec	r28
	brne	VarDelay	// 2 1
    1b5c:	a9 f7       	brne	.-22     	; 0x1b48 <VarDelay>
	ret					//   4 
    1b5e:	08 95       	ret

00001b60 <output_servo_ppm_asm>:

	.global output_servo_ppm_asm
	.func   output_servo_ppm_asm
output_servo_ppm_asm:
// Copy r22 (containing ServoFlag) into r15
	mov		r15, r22	
    1b60:	f6 2e       	mov	r15, r22
// Save regs
	push	ZL			// 2			
    1b62:	ef 93       	push	r30
	push	ZH			// 2
    1b64:	ff 93       	push	r31
	push	XL			// 2
    1b66:	af 93       	push	r26
	push	XH			// 2
    1b68:	bf 93       	push	r27
	push	YL			// 2
    1b6a:	cf 93       	push	r28
	push	YH			// 2
    1b6c:	df 93       	push	r29
	push	16			// 2
    1b6e:	0f 93       	push	r16
	push	17			// 2
    1b70:	1f 93       	push	r17
	push	18			// 2
    1b72:	2f 93       	push	r18
	push	19			// 2
    1b74:	3f 93       	push	r19
	push	20			// 2
    1b76:	4f 93       	push	r20
	push	21			// 2
    1b78:	5f 93       	push	r21
	push	22			// 2
    1b7a:	6f 93       	push	r22
	push	23			// 2
    1b7c:	7f 93       	push	r23

// Get start address of ServoOut[0] into Z
	mov		ZL, r24		// 1 Low byte
    1b7e:	e8 2f       	mov	r30, r24
	mov		ZH, r25		// 1 High byte
    1b80:	f9 2f       	mov	r31, r25

// Save initial address for later
	push	24			// 2
    1b82:	8f 93       	push	r24
	push	25			// 2
    1b84:	9f 93       	push	r25

// Trim 16-bit values to suit individual needs, 
// Save result and copy lower 3 bits to r16 to r23 (96 cycles)

// M1
	ld		XL, Z+ 		// 2			Load XL with data at address in Z
    1b86:	a1 91       	ld	r26, Z+
	ld		XH, Z+		// 2			Load XH with data at address in Z+1
    1b88:	b1 91       	ld	r27, Z+
	subi	XL,	0xc6	// 1 			Trim servo pulse (was 34a)
    1b8a:	a6 5c       	subi	r26, 0xC6	; 198
	sbci 	XH,	0x00	// 1
    1b8c:	b0 40       	sbci	r27, 0x00	; 0
	push	XL 			// 2			Save trimmed value to the stack
    1b8e:	af 93       	push	r26
	push	XH 			// 2
    1b90:	bf 93       	push	r27
	andi	XL,	0x07	// 1			And all but first 3 bits
    1b92:	a7 70       	andi	r26, 0x07	; 7
	mov		r23,XL		// 1 (12)		Copy 8-bit result to regs
    1b94:	7a 2f       	mov	r23, r26
// M2
	ld		XL, Z+
    1b96:	a1 91       	ld	r26, Z+
	ld		XH, Z+
    1b98:	b1 91       	ld	r27, Z+
	subi	XL,	0xbe  // was 2e6
    1b9a:	ae 5b       	subi	r26, 0xBE	; 190
	sbci 	XH,	0x00
    1b9c:	b0 40       	sbci	r27, 0x00	; 0
	push	XL 		
    1b9e:	af 93       	push	r26
	push	XH 		
    1ba0:	bf 93       	push	r27
	andi	XL,	0x07
    1ba2:	a7 70       	andi	r26, 0x07	; 7
	mov		r22,XL	
    1ba4:	6a 2f       	mov	r22, r26
// M3
	ld		XL, Z+
    1ba6:	a1 91       	ld	r26, Z+
	ld		XH, Z+
    1ba8:	b1 91       	ld	r27, Z+
	subi	XL,	0xb6 // was 282
    1baa:	a6 5b       	subi	r26, 0xB6	; 182
	sbci 	XH,	0x00
    1bac:	b0 40       	sbci	r27, 0x00	; 0
	push	XL 		
    1bae:	af 93       	push	r26
	push	XH 		
    1bb0:	bf 93       	push	r27
	andi	XL,	0x07
    1bb2:	a7 70       	andi	r26, 0x07	; 7
	mov		r21,XL	
    1bb4:	5a 2f       	mov	r21, r26
// M4
	ld		XL, Z+
    1bb6:	a1 91       	ld	r26, Z+
	ld		XH, Z+
    1bb8:	b1 91       	ld	r27, Z+
	subi	XL,	0xae // was 21e
    1bba:	ae 5a       	subi	r26, 0xAE	; 174
	sbci 	XH,	0x00
    1bbc:	b0 40       	sbci	r27, 0x00	; 0
	push	XL 	
    1bbe:	af 93       	push	r26
	push	XH 	
    1bc0:	bf 93       	push	r27
	andi	XL,	0x07
    1bc2:	a7 70       	andi	r26, 0x07	; 7
	mov		r20,XL	
    1bc4:	4a 2f       	mov	r20, r26
// M5
	ld		XL, Z+
    1bc6:	a1 91       	ld	r26, Z+
	ld		XH, Z+
    1bc8:	b1 91       	ld	r27, Z+
	subi	XL,	0xa5 // was 1ba
    1bca:	a5 5a       	subi	r26, 0xA5	; 165
	sbci 	XH,	0x00
    1bcc:	b0 40       	sbci	r27, 0x00	; 0
	push	XL 	
    1bce:	af 93       	push	r26
	push	XH 	
    1bd0:	bf 93       	push	r27
	andi	XL,	0x07
    1bd2:	a7 70       	andi	r26, 0x07	; 7
	mov		r19,XL	
    1bd4:	3a 2f       	mov	r19, r26
// M6
	ld		XL, Z+
    1bd6:	a1 91       	ld	r26, Z+
	ld		XH, Z+
    1bd8:	b1 91       	ld	r27, Z+
	subi	XL,	0x9D // was 155
    1bda:	ad 59       	subi	r26, 0x9D	; 157
	sbci 	XH,	0x00
    1bdc:	b0 40       	sbci	r27, 0x00	; 0
	push	XL 	
    1bde:	af 93       	push	r26
	push	XH 	
    1be0:	bf 93       	push	r27
	andi	XL,	0x07
    1be2:	a7 70       	andi	r26, 0x07	; 7
	mov		r18,XL
    1be4:	2a 2f       	mov	r18, r26
// M7
	ld		XL, Z+
    1be6:	a1 91       	ld	r26, Z+
	ld		XH, Z+
    1be8:	b1 91       	ld	r27, Z+
	subi	XL,	0x95 // was f1
    1bea:	a5 59       	subi	r26, 0x95	; 149
	sbci 	XH,	0x00
    1bec:	b0 40       	sbci	r27, 0x00	; 0
	push	XL 	
    1bee:	af 93       	push	r26
	push	XH 
    1bf0:	bf 93       	push	r27
	andi	XL,	0x07
    1bf2:	a7 70       	andi	r26, 0x07	; 7
	mov		r17,XL
    1bf4:	1a 2f       	mov	r17, r26
// M8
	ld		XL, Z+
    1bf6:	a1 91       	ld	r26, Z+
	ld		XH, Z+
    1bf8:	b1 91       	ld	r27, Z+
	subi	XL,	0x8d // Was 8d
    1bfa:	ad 58       	subi	r26, 0x8D	; 141
	sbci 	XH,	0x00
    1bfc:	b0 40       	sbci	r27, 0x00	; 0
	push	XL
    1bfe:	af 93       	push	r26
	push	XH 
    1c00:	bf 93       	push	r27
	andi	XL,	0x07
    1c02:	a7 70       	andi	r26, 0x07	; 7
	mov		r16,XL
    1c04:	0a 2f       	mov	r16, r26
// Time out lower 3 bits of pulse value (Zero to 7us)
// Each chunk is always executed in 1+10+1+147 = 159 cycles or 7.95us
// This does affect the inter-pulse delay, but not the pulsewidth.

// M1
	mov		r25,r23		// 1
    1c06:	97 2f       	mov	r25, r23
	call	DelayHigh	// 10 (where r25 = 7)
    1c08:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <DelayHigh>
	sbrc	r15,0		// 1 (False),	2 if true
    1c0c:	f0 fc       	sbrc	r15, 0
	sbi 	M1			// 1,			0
    1c0e:	46 9a       	sbi	0x08, 6	; 8
	call	DelayLow	// 7 + 140 (where r25 = 0)
    1c10:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <DelayLow>
	//call    pwm_delay   // 100us
	//call    pwm_delay

// M2
	mov		r25,r22
    1c14:	96 2f       	mov	r25, r22
	call	DelayHigh
    1c16:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <DelayHigh>
	sbrc	r15,1		// Don't switch on if if ServoFlag bit is cleared
    1c1a:	f1 fc       	sbrc	r15, 1
	sbi 	M2
    1c1c:	44 9a       	sbi	0x08, 4	; 8
	call	DelayLow
    1c1e:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <DelayLow>
	//call    pwm_delay   // 100us
	//call    pwm_delay

// M3
	mov		r25,r21
    1c22:	95 2f       	mov	r25, r21
	call	DelayHigh
    1c24:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <DelayHigh>
	sbrc	r15,2		// Don't switch on if if ServoFlag bit is cleared
    1c28:	f2 fc       	sbrc	r15, 2
	sbi 	M3
    1c2a:	42 9a       	sbi	0x08, 2	; 8
	call	DelayLow
    1c2c:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <DelayLow>
	//call    pwm_delay   // 100us
	//call    pwm_delay

// M4
	mov		r25,r20
    1c30:	94 2f       	mov	r25, r20
	call	DelayHigh
    1c32:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <DelayHigh>
	sbrc	r15,3		// Don't switch on if if ServoFlag bit is cleared
    1c36:	f3 fc       	sbrc	r15, 3
	sbi 	M4
    1c38:	43 9a       	sbi	0x08, 3	; 8
	call	DelayLow
    1c3a:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <DelayLow>
	//call    pwm_delay   // 100us
	//call    pwm_delay

// M5
	mov		r25,r19
    1c3e:	93 2f       	mov	r25, r19
	call	DelayHigh
    1c40:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <DelayHigh>
	sbrc	r15,4		// Don't switch on if if ServoFlag bit is cleared
    1c44:	f4 fc       	sbrc	r15, 4
	sbi 	M5
    1c46:	14 9a       	sbi	0x02, 4	; 2
	call	DelayLow
    1c48:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <DelayLow>
	//call    pwm_delay   // 100us
	//call    pwm_delay

// M6
	mov		r25,r18
    1c4c:	92 2f       	mov	r25, r18
	call	DelayHigh
    1c4e:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <DelayHigh>
	sbrc	r15,5		// Don't switch on if if ServoFlag bit is cleared
    1c52:	f5 fc       	sbrc	r15, 5
	sbi 	M6
    1c54:	15 9a       	sbi	0x02, 5	; 2
	call	DelayLow
    1c56:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <DelayLow>
	//call    pwm_delay   // 100us
	//call    pwm_delay

// M7
	mov		r25,r17
    1c5a:	91 2f       	mov	r25, r17
	call	DelayHigh
    1c5c:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <DelayHigh>
	sbrc	r15,6		// Don't switch on if if ServoFlag bit is cleared
    1c60:	f6 fc       	sbrc	r15, 6
	sbi 	M7
    1c62:	45 9a       	sbi	0x08, 5	; 8
	call	DelayLow
    1c64:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <DelayLow>
	//call    pwm_delay   // 100us
	//call    pwm_delay

// M8
	mov		r25,r16
    1c68:	90 2f       	mov	r25, r16
	call	DelayHigh
    1c6a:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <DelayHigh>
	sbrc	r15,7		// Don't switch on if if ServoFlag bit is cleared
    1c6e:	f7 fc       	sbrc	r15, 7
	sbi 	M8			// 1
    1c70:	47 9a       	sbi	0x08, 7	; 8
	call	DelayLow
    1c72:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <DelayLow>
// At this point, the largest pulse that we can generate is 256 * 8 = 2.048ms
// However we would like to be able to generate up to 2.100ms (150%) - an extra 52us
// So we can fluff it out another 200us so that we can subtract enough to keep r16 under 0xff or 256 :)
// With this setup, M1 can go down to 850 and M8 can go up to 2150

	call    pwm_delay   // 150us
    1c76:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <pwm_delay>
	call    pwm_delay
    1c7a:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <pwm_delay>
	call    pwm_delay
    1c7e:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <pwm_delay>

// Copy trimmed array data into regs
// This now represents steps of 8us chunks
	pop		XH			// M8
    1c82:	bf 91       	pop	r27
	pop		XL
    1c84:	af 91       	pop	r26
	call	shuffle_8
    1c86:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <shuffle_8>
	mov		r16,XL
    1c8a:	0a 2f       	mov	r16, r26
	pop		XH			// M7
    1c8c:	bf 91       	pop	r27
	pop		XL
    1c8e:	af 91       	pop	r26
	call	shuffle_8
    1c90:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <shuffle_8>
	mov		r17,XL
    1c94:	1a 2f       	mov	r17, r26
	pop		XH			// M6
    1c96:	bf 91       	pop	r27
	pop		XL
    1c98:	af 91       	pop	r26
	call	shuffle_8
    1c9a:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <shuffle_8>
	mov		r18,XL
    1c9e:	2a 2f       	mov	r18, r26
	pop		XH			// M5
    1ca0:	bf 91       	pop	r27
	pop		XL
    1ca2:	af 91       	pop	r26
	call	shuffle_8
    1ca4:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <shuffle_8>
	mov		r19,XL
    1ca8:	3a 2f       	mov	r19, r26
	pop		XH			// M4
    1caa:	bf 91       	pop	r27
	pop		XL
    1cac:	af 91       	pop	r26
	call	shuffle_8
    1cae:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <shuffle_8>
	mov		r20,XL
    1cb2:	4a 2f       	mov	r20, r26
	pop		XH			// M3
    1cb4:	bf 91       	pop	r27
	pop		XL
    1cb6:	af 91       	pop	r26
	call	shuffle_8
    1cb8:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <shuffle_8>
	mov		r21,XL
    1cbc:	5a 2f       	mov	r21, r26
	pop		XH			// M2
    1cbe:	bf 91       	pop	r27
	pop		XL
    1cc0:	af 91       	pop	r26
	call	shuffle_8
    1cc2:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <shuffle_8>
	mov		r22,XL
    1cc6:	6a 2f       	mov	r22, r26
	pop		XH			// M1
    1cc8:	bf 91       	pop	r27
	pop		XL
    1cca:	af 91       	pop	r26
	call	shuffle_8
    1ccc:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <shuffle_8>
	mov		r23,XL
    1cd0:	7a 2f       	mov	r23, r26

// Loop prep
	ldi 	YL,0xFF		// 1			Set loop count to ffh or 255 (255 * 8us = 2040us + 150us = 2190us)
    1cd2:	cf ef       	ldi	r28, 0xFF	; 255
	ldi		YH,0x00		// 1
    1cd4:	d0 e0       	ldi	r29, 0x00	; 0
	clr		0			// 1 (7)
    1cd6:	00 24       	eor	r0, r0

00001cd8 <nloop>:

// Ninja loop - 7 cycles each side (8 x 7 = 56 + 6 to loop + 98 pad = 160 cycles)
// 20 cyles = 1us, 160 cycles = 8us

nloop:
	subi	r23,1		// 1 			ServoOut1
    1cd8:	71 50       	subi	r23, 0x01	; 1
	brne	j1			// 2	1	
    1cda:	19 f4       	brne	.+6      	; 0x1ce2 <j1>
	cbi 	M1			// 		2		Clear output M1 if done (+5 = 1448 = 72.4us = 48)
    1cdc:	46 98       	cbi	0x08, 6	; 8
	jmp		jj1			//		3
    1cde:	0c 94 73 0e 	jmp	0x1ce6	; 0x1ce6 <jj1>

00001ce2 <j1>:
j1:
	rjmp 	.+0			// 2
    1ce2:	00 c0       	rjmp	.+0      	; 0x1ce4 <j1+0x2>
	rjmp 	.+0			// 2
    1ce4:	00 c0       	rjmp	.+0      	; 0x1ce6 <jj1>

00001ce6 <jj1>:
jj1:
	subi	r22,1		// 1			ServoOut2
    1ce6:	61 50       	subi	r22, 0x01	; 1
	brne	j2			// 2	1
    1ce8:	19 f4       	brne	.+6      	; 0x1cf0 <j2>
	cbi 	M2			// 		2		Clear output M2 if done (+11 = 1285 = 64.25us = 40)
    1cea:	44 98       	cbi	0x08, 4	; 8
	jmp		jj2			//		3
    1cec:	0c 94 7a 0e 	jmp	0x1cf4	; 0x1cf4 <jj2>

00001cf0 <j2>:
j2:
	rjmp	.+0
    1cf0:	00 c0       	rjmp	.+0      	; 0x1cf2 <j2+0x2>
	rjmp	.+0
    1cf2:	00 c0       	rjmp	.+0      	; 0x1cf4 <jj2>

00001cf4 <jj2>:
jj2:
	subi	r21,1
    1cf4:	51 50       	subi	r21, 0x01	; 1
	brne	j3
    1cf6:	19 f4       	brne	.+6      	; 0x1cfe <j3>
	cbi 	M3
    1cf8:	42 98       	cbi	0x08, 2	; 8
	jmp		jj3
    1cfa:	0c 94 81 0e 	jmp	0x1d02	; 0x1d02 <jj3>

00001cfe <j3>:
j3:
	rjmp	.+0
    1cfe:	00 c0       	rjmp	.+0      	; 0x1d00 <j3+0x2>
	rjmp	.+0
    1d00:	00 c0       	rjmp	.+0      	; 0x1d02 <jj3>

00001d02 <jj3>:
jj3:
	subi 	r20,1
    1d02:	41 50       	subi	r20, 0x01	; 1
	brne	j4
    1d04:	19 f4       	brne	.+6      	; 0x1d0c <j4>
	cbi 	M4
    1d06:	43 98       	cbi	0x08, 3	; 8
	jmp		jj4	
    1d08:	0c 94 88 0e 	jmp	0x1d10	; 0x1d10 <jj4>

00001d0c <j4>:
j4:
	rjmp 	.+0
    1d0c:	00 c0       	rjmp	.+0      	; 0x1d0e <j4+0x2>
	rjmp 	.+0
    1d0e:	00 c0       	rjmp	.+0      	; 0x1d10 <jj4>

00001d10 <jj4>:
jj4:
	subi	r19,1
    1d10:	31 50       	subi	r19, 0x01	; 1
	brne	j5
    1d12:	19 f4       	brne	.+6      	; 0x1d1a <j5>
	cbi 	M5
    1d14:	14 98       	cbi	0x02, 4	; 2
	jmp		jj5
    1d16:	0c 94 8f 0e 	jmp	0x1d1e	; 0x1d1e <jj5>

00001d1a <j5>:
j5:
	rjmp 	.+0
    1d1a:	00 c0       	rjmp	.+0      	; 0x1d1c <j5+0x2>
	rjmp 	.+0
    1d1c:	00 c0       	rjmp	.+0      	; 0x1d1e <jj5>

00001d1e <jj5>:
jj5:
	subi	r18,1
    1d1e:	21 50       	subi	r18, 0x01	; 1
	brne	j6
    1d20:	19 f4       	brne	.+6      	; 0x1d28 <j6>
	cbi 	M6
    1d22:	15 98       	cbi	0x02, 5	; 2
	jmp		jj6
    1d24:	0c 94 96 0e 	jmp	0x1d2c	; 0x1d2c <jj6>

00001d28 <j6>:
j6:
	rjmp 	.+0
    1d28:	00 c0       	rjmp	.+0      	; 0x1d2a <j6+0x2>
	rjmp	.+0
    1d2a:	00 c0       	rjmp	.+0      	; 0x1d2c <jj6>

00001d2c <jj6>:
jj6:
	subi	r17,1
    1d2c:	11 50       	subi	r17, 0x01	; 1
	brne	j7
    1d2e:	19 f4       	brne	.+6      	; 0x1d36 <j7>
	cbi 	M7
    1d30:	45 98       	cbi	0x08, 5	; 8
	jmp		jj7
    1d32:	0c 94 9d 0e 	jmp	0x1d3a	; 0x1d3a <jj7>

00001d36 <j7>:
j7:
	rjmp 	.+0
    1d36:	00 c0       	rjmp	.+0      	; 0x1d38 <j7+0x2>
	rjmp 	.+0
    1d38:	00 c0       	rjmp	.+0      	; 0x1d3a <jj7>

00001d3a <jj7>:
jj7:
	subi 	r16,1		// ServoOut 8
    1d3a:	01 50       	subi	r16, 0x01	; 1
	brne	j8
    1d3c:	19 f4       	brne	.+6      	; 0x1d44 <j8>
	cbi 	M8
    1d3e:	47 98       	cbi	0x08, 7	; 8
	jmp		jj8
    1d40:	0c 94 a4 0e 	jmp	0x1d48	; 0x1d48 <jj8>

00001d44 <j8>:
j8:
	rjmp 	.+0
    1d44:	00 c0       	rjmp	.+0      	; 0x1d46 <j8+0x2>
	rjmp 	.+0
    1d46:	00 c0       	rjmp	.+0      	; 0x1d48 <jj8>

00001d48 <jj8>:
jj8:
	call	pad_100_delay // (100)
    1d48:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <pad_100_delay>

	subi 	YL,1		// 1
    1d4c:	c1 50       	subi	r28, 0x01	; 1
	sbc 	YH,0		// 1
    1d4e:	d0 09       	sbc	r29, r0
	breq	skiploop	// 1	2		Loop until zero - 1 false 2 true
    1d50:	11 f0       	breq	.+4      	; 0x1d56 <skiploop>
	jmp		nloop		// 3			Can't reach nloop with a brne alone
    1d52:	0c 94 6c 0e 	jmp	0x1cd8	; 0x1cd8 <nloop>

00001d56 <skiploop>:

skiploop:
	pop		25			// 		2		Restore regs
    1d56:	9f 91       	pop	r25
	pop		24			// 		2
    1d58:	8f 91       	pop	r24
	pop		23			//		2
    1d5a:	7f 91       	pop	r23
	pop		22			//		2
    1d5c:	6f 91       	pop	r22
	pop		21			//		2
    1d5e:	5f 91       	pop	r21
	pop		20			//		2
    1d60:	4f 91       	pop	r20
	pop		19			//		2
    1d62:	3f 91       	pop	r19
	pop		18			//		2
    1d64:	2f 91       	pop	r18
	pop		17			//		2
    1d66:	1f 91       	pop	r17
	pop		16			//		2
    1d68:	0f 91       	pop	r16
	pop		YH			//		2
    1d6a:	df 91       	pop	r29
	pop		YL			//		2
    1d6c:	cf 91       	pop	r28
	pop		XH			//		2
    1d6e:	bf 91       	pop	r27
	pop		XL			//		2
    1d70:	af 91       	pop	r26
	pop		ZH			// 		2
    1d72:	ff 91       	pop	r31
	pop		ZL			//		2
    1d74:	ef 91       	pop	r30

	ret					//		4
    1d76:	08 95       	ret

00001d78 <output_servo_ppm_asm3>:
;*************************************************************************

	.global output_servo_ppm_asm3
	.func   output_servo_ppm_asm3
output_servo_ppm_asm3:
	push	16			// Save regs
    1d78:	0f 93       	push	r16
	push	17
    1d7a:	1f 93       	push	r17
	push	18
    1d7c:	2f 93       	push	r18

	//ldi 	16,0x34		// 1			Set loop count to 834h or 2100
	ldi 	16,0xFC		// 1			Set loop count to 8FCh or 2300(us)
    1d7e:	0c ef       	ldi	r16, 0xFC	; 252
	ldi		17,0x08	
    1d80:	18 e0       	ldi	r17, 0x08	; 8
	clr		0
    1d82:	00 24       	eor	r0, r0

00001d84 <jump_table>:

jump_table:
	cpi		r24,0x00	; 0				
    1d84:	80 30       	cpi	r24, 0x00	; 0
	breq	in1
    1d86:	71 f0       	breq	.+28     	; 0x1da4 <in1>
	cpi		r24,0x01	; 1
    1d88:	81 30       	cpi	r24, 0x01	; 1
	breq	in2
    1d8a:	79 f0       	breq	.+30     	; 0x1daa <in2>
	cpi		r24,0x02	; 2
    1d8c:	82 30       	cpi	r24, 0x02	; 2
	breq	in3
    1d8e:	81 f0       	breq	.+32     	; 0x1db0 <in3>
	cpi		r24,0x03	; 3
    1d90:	83 30       	cpi	r24, 0x03	; 3
	breq	in4
    1d92:	89 f0       	breq	.+34     	; 0x1db6 <in4>
	cpi		r24,0x04	; 4
    1d94:	84 30       	cpi	r24, 0x04	; 4
	breq	in5
    1d96:	91 f0       	breq	.+36     	; 0x1dbc <in5>
	cpi		r24,0x05	; 5
    1d98:	85 30       	cpi	r24, 0x05	; 5
	breq	in6
    1d9a:	99 f0       	breq	.+38     	; 0x1dc2 <in6>
	cpi		r24,0x06	; 6
    1d9c:	86 30       	cpi	r24, 0x06	; 6
	breq	in7
    1d9e:	a1 f0       	breq	.+40     	; 0x1dc8 <in7>
	cpi		r24,0x07	; 7
    1da0:	87 30       	cpi	r24, 0x07	; 7
	breq	in8
    1da2:	a9 f0       	breq	.+42     	; 0x1dce <in8>

00001da4 <in1>:

in1:sbi 	M1			// Set output high
    1da4:	46 9a       	sbi	0x08, 6	; 8
	jmp		loopin
    1da6:	0c 94 ea 0e 	jmp	0x1dd4	; 0x1dd4 <loopin>

00001daa <in2>:
in2:sbi 	M2
    1daa:	44 9a       	sbi	0x08, 4	; 8
	jmp		loopin
    1dac:	0c 94 ea 0e 	jmp	0x1dd4	; 0x1dd4 <loopin>

00001db0 <in3>:
in3:sbi 	M3	
    1db0:	42 9a       	sbi	0x08, 2	; 8
	jmp		loopin
    1db2:	0c 94 ea 0e 	jmp	0x1dd4	; 0x1dd4 <loopin>

00001db6 <in4>:
in4:sbi 	M4
    1db6:	43 9a       	sbi	0x08, 3	; 8
	jmp		loopin
    1db8:	0c 94 ea 0e 	jmp	0x1dd4	; 0x1dd4 <loopin>

00001dbc <in5>:
in5:sbi 	M5
    1dbc:	14 9a       	sbi	0x02, 4	; 2
	jmp		loopin
    1dbe:	0c 94 ea 0e 	jmp	0x1dd4	; 0x1dd4 <loopin>

00001dc2 <in6>:
in6:sbi 	M6
    1dc2:	15 9a       	sbi	0x02, 5	; 2
	jmp		loopin
    1dc4:	0c 94 ea 0e 	jmp	0x1dd4	; 0x1dd4 <loopin>

00001dc8 <in7>:
in7:sbi 	M7
    1dc8:	45 9a       	sbi	0x08, 5	; 8
	jmp		loopin
    1dca:	0c 94 ea 0e 	jmp	0x1dd4	; 0x1dd4 <loopin>

00001dce <in8>:
in8:sbi 	M8
    1dce:	47 9a       	sbi	0x08, 7	; 8
	jmp		loopin
    1dd0:	0c 94 ea 0e 	jmp	0x1dd4	; 0x1dd4 <loopin>

00001dd4 <loopin>:

// Loop - 20 cycles = 1us
loopin:
						// <---------	Left column is skip execution path
	rjmp .+0			// 2 	<----	Right column is pulse end execution path
    1dd4:	00 c0       	rjmp	.+0      	; 0x1dd6 <loopin+0x2>
	rjmp .+0			// 2
    1dd6:	00 c0       	rjmp	.+0      	; 0x1dd8 <loopin+0x4>
	rjmp .+0			// 2
    1dd8:	00 c0       	rjmp	.+0      	; 0x1dda <loopin+0x6>
	rjmp .+0			// 2
    1dda:	00 c0       	rjmp	.+0      	; 0x1ddc <loopin+0x8>
	rjmp .+0			// 2
    1ddc:	00 c0       	rjmp	.+0      	; 0x1dde <loopin+0xa>
	rjmp .+0			// 2
    1dde:	00 c0       	rjmp	.+0      	; 0x1de0 <loopin+0xc>

	subi	r22,1		// 1 			Time servo pulse
    1de0:	61 50       	subi	r22, 0x01	; 1
	sbc 	r23,0		// 1
    1de2:	70 09       	sbc	r23, r0
	brne	loopout		// 2	1
    1de4:	19 f4       	brne	.+6      	; 0x1dec <loopout>

// Clear outputs if done
	ldi		r18,0x00	 // 1
    1de6:	20 e0       	ldi	r18, 0x00	; 0
	out 	SERVO_OUT_KK20,r18// 1			Boom.
    1de8:	28 b9       	out	0x08, r18	; 8
	out 	SERVO_OUT_KK21,r18// 1			KK2.1 has a couple of outputs on Port A also.
    1dea:	22 b9       	out	0x02, r18	; 2

00001dec <loopout>:

// Exit
loopout:
	subi 	16,1		// 1			+4 cycles = total 20 cycles
    1dec:	01 50       	subi	r16, 0x01	; 1
	sbc 	17,0		// 1
    1dee:	10 09       	sbc	r17, r0
	brne	loopin		// 2	1		Loop until zero
    1df0:	89 f7       	brne	.-30     	; 0x1dd4 <loopin>

	pop		18
    1df2:	2f 91       	pop	r18
	pop		17			// Restore regs
    1df4:	1f 91       	pop	r17
	pop		16
    1df6:	0f 91       	pop	r16
	ret	
    1df8:	08 95       	ret

00001dfa <pwm_delay>:
;*************************************************************************	
; void pwm_delay(void) 50us output spacing delay (8 cycle loop - 400ns)
;*************************************************************************

pwm_delay:				// 4 to call
	push	16			// 1
    1dfa:	0f 93       	push	r16
	ldi 	16,0x65		// 1
    1dfc:	05 e6       	ldi	r16, 0x65	; 101

00001dfe <pwm_loop>:

pwm_loop:
	rjmp .+0			// 2
    1dfe:	00 c0       	rjmp	.+0      	; 0x1e00 <pwm_loop+0x2>
	rjmp .+0			// 2
    1e00:	00 c0       	rjmp	.+0      	; 0x1e02 <pwm_loop+0x4>
	rjmp .+0			// 2
    1e02:	00 c0       	rjmp	.+0      	; 0x1e04 <pwm_loop+0x6>
	subi	r16,1		// 1
    1e04:	01 50       	subi	r16, 0x01	; 1
	brne	pwm_loop	// 2  1
    1e06:	d9 f7       	brne	.-10     	; 0x1dfe <pwm_loop>

00001e08 <pwm_exit>:

pwm_exit:
	pop		16			//    1
    1e08:	0f 91       	pop	r16
	ret					//    4 to return
    1e0a:	08 95       	ret

00001e0c <pad_100_delay>:
; pad_100_delay 98 cycle padding delay
; Takes 4 to call, so we need 94 cycles burnt here
;*************************************************************************

pad_100_delay:
	push	16			// 		2		Save regs
    1e0c:	0f 93       	push	r16
	ldi 	16,0x09		// 		1		Set loop count to 09h or 9
    1e0e:	09 e0       	ldi	r16, 0x09	; 9

00001e10 <pad_100>:

pad_100:				//				9 cycles, 8 on last
	rjmp .+0			// 2
    1e10:	00 c0       	rjmp	.+0      	; 0x1e12 <pad_100+0x2>
	rjmp .+0			// 2			8 x 9cyc + 8 = 80
    1e12:	00 c0       	rjmp	.+0      	; 0x1e14 <pad_100+0x4>
	rjmp .+0			// 2
    1e14:	00 c0       	rjmp	.+0      	; 0x1e16 <pad_100+0x6>

	subi 	16,1		// 1
    1e16:	01 50       	subi	r16, 0x01	; 1
	brne	pad_100		// 2	1		Loop until zero	
    1e18:	d9 f7       	brne	.-10     	; 0x1e10 <pad_100>

	nop					// 		1		Trim to precisely the right value
    1e1a:	00 00       	nop
	rjmp .+0			// 		2
    1e1c:	00 c0       	rjmp	.+0      	; 0x1e1e <pad_100+0xe>
	rjmp .+0			// 		2
    1e1e:	00 c0       	rjmp	.+0      	; 0x1e20 <pad_100+0x10>

	pop		16			// 		2		Restore regs
    1e20:	0f 91       	pop	r16
	ret					// 		4 (94 cycles)
    1e22:	08 95       	ret

00001e24 <us_delay>:
; void us_delay(void) 1us delay for ninja skills
; Takes 4 to call, 4 to return, so we need 12 cycles burnt here
;*************************************************************************

us_delay:
	rjmp .+0			// 2
    1e24:	00 c0       	rjmp	.+0      	; 0x1e26 <us_delay+0x2>
	rjmp .+0			// 2
    1e26:	00 c0       	rjmp	.+0      	; 0x1e28 <us_delay+0x4>
	rjmp .+0			// 2
    1e28:	00 c0       	rjmp	.+0      	; 0x1e2a <us_delay+0x6>
	rjmp .+0			// 2
    1e2a:	00 c0       	rjmp	.+0      	; 0x1e2c <us_delay+0x8>
	ret					// 4 (16 cycles)
    1e2c:	08 95       	ret

00001e2e <shuffle_8>:
;*************************************************************************	
; Space-saving macro-ish suroutines
;*************************************************************************

shuffle_8: // (10 cycles)
	lsr		XH			// 1 Rotate right into carry
    1e2e:	b6 95       	lsr	r27
	ror		XL			// 1 Rotate right with carry from MSB
    1e30:	a7 95       	ror	r26
	lsr		XH			// 1
    1e32:	b6 95       	lsr	r27
	ror		XL			// 1
    1e34:	a7 95       	ror	r26
	lsr		XH			// 1
    1e36:	b6 95       	lsr	r27
	ror		XL			// 1
    1e38:	a7 95       	ror	r26
	ret					// 4
    1e3a:	08 95       	ret

00001e3c <DelayHigh>:
; 10 and 150 cycles at 1us intervals per value in r26
; 
;*************************************************************************

DelayHigh:				// (0)	(1)	(2+) each extra is +20
	ldi		YL,0x07		// 1	1	1
    1e3c:	c7 e0       	ldi	r28, 0x07	; 7
	andi	r25,0x07	
    1e3e:	97 70       	andi	r25, 0x07	; 7
	eor		YL,r25		// 1 	1	1
    1e40:	c9 27       	eor	r28, r25
	breq	LoopHighOut1// 2	1	1
    1e42:	31 f0       	breq	.+12     	; 0x1e50 <LoopHighOut1>

00001e44 <LoopHigh>:
LoopHigh:
	call    us_delay	// 		16	16
    1e44:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <us_delay>
	dec 	YL			// 		1	1
    1e48:	ca 95       	dec	r28
	breq	LoopHighOut2// 		2	1/2
    1e4a:	09 f0       	breq	.+2      	; 0x1e4e <LoopHighOut2>
	rjmp	LoopHigh	// 			2
    1e4c:	fb cf       	rjmp	.-10     	; 0x1e44 <LoopHigh>

00001e4e <LoopHighOut2>:
LoopHighOut2:
	rjmp .+0			// 		2	2
    1e4e:	00 c0       	rjmp	.+0      	; 0x1e50 <LoopHighOut1>

00001e50 <LoopHighOut1>:
LoopHighOut1:
	nop					// 1	1	1
    1e50:	00 00       	nop
    ret					// 4	4	4
    1e52:	08 95       	ret

00001e54 <DelayLow>:
; regardless of the value of r25
;
;*************************************************************************

DelayLow:				// (0)	(1)	(2+) each extra is +20
	mov		YL,r25		// 1	1	
    1e54:	c9 2f       	mov	r28, r25
	andi	YL,0x07	
    1e56:	c7 70       	andi	r28, 0x07	; 7
	breq	LoopLowOut1	// 2	1	1
    1e58:	31 f0       	breq	.+12     	; 0x1e66 <LoopLowOut1>

00001e5a <LoopLow>:
LoopLow:
	call    us_delay	//		16	16
    1e5a:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <us_delay>
	dec 	YL			//		1	1
    1e5e:	ca 95       	dec	r28
	breq	LoopLowOut2	//		2	1/2
    1e60:	09 f0       	breq	.+2      	; 0x1e64 <LoopLowOut2>
	rjmp	LoopLow		//			2
    1e62:	fb cf       	rjmp	.-10     	; 0x1e5a <LoopLow>

00001e64 <LoopLowOut2>:
LoopLowOut2:
	rjmp .+0			// 		2	2
    1e64:	00 c0       	rjmp	.+0      	; 0x1e66 <LoopLowOut1>

00001e66 <LoopLowOut1>:
LoopLowOut1:
    ret					// 4	4	4
    1e66:	08 95       	ret

00001e68 <get_raw_accs>:
//***************************************************************
// Fill accADC with RPY data appropriate to the board orientation
//***************************************************************

void get_raw_accs(void)
{
    1e68:	cf 93       	push	r28
    1e6a:	df 93       	push	r29
    1e6c:	cd b7       	in	r28, 0x3d	; 61
    1e6e:	de b7       	in	r29, 0x3e	; 62
    1e70:	2c 97       	sbiw	r28, 0x0c	; 12
    1e72:	0f b6       	in	r0, 0x3f	; 63
    1e74:	f8 94       	cli
    1e76:	de bf       	out	0x3e, r29	; 62
    1e78:	0f be       	out	0x3f, r0	; 63
    1e7a:	cd bf       	out	0x3d, r28	; 61
	// Get data from MPU6050
	uint8_t Accs[6];
	int16_t temp1, temp2;

	// Get the i2c data from the MPU6050
	readI2CbyteArray(MPU60X0_DEFAULT_ADDRESS,MPU60X0_RA_ACCEL_XOUT_H,(uint8_t *)Accs,6);
    1e7c:	26 e0       	ldi	r18, 0x06	; 6
    1e7e:	ae 01       	movw	r20, r28
    1e80:	4f 5f       	subi	r20, 0xFF	; 255
    1e82:	5f 4f       	sbci	r21, 0xFF	; 255
    1e84:	6b e3       	ldi	r22, 0x3B	; 59
    1e86:	80 ed       	ldi	r24, 0xD0	; 208
    1e88:	0e 94 95 24 	call	0x492a	; 0x492a <readI2CbyteArray>

	// Reassemble data into accADC array and down sample to reduce resolution and noise
	// This notation is true to the chip, but not the board orientation

	temp1 = Accs[0] << 8;					// Accel X
    1e8c:	89 81       	ldd	r24, Y+1	; 0x01
    1e8e:	90 e0       	ldi	r25, 0x00	; 0
    1e90:	98 2f       	mov	r25, r24
    1e92:	88 27       	eor	r24, r24
	temp2 = Accs[1];
    1e94:	2a 81       	ldd	r18, Y+2	; 0x02
	RawADC[ROLL] = (temp1 + temp2) >> 6;
    1e96:	82 0f       	add	r24, r18
    1e98:	91 1d       	adc	r25, r1
    1e9a:	36 e0       	ldi	r19, 0x06	; 6
    1e9c:	95 95       	asr	r25
    1e9e:	87 95       	ror	r24
    1ea0:	3a 95       	dec	r19
    1ea2:	e1 f7       	brne	.-8      	; 0x1e9c <get_raw_accs+0x34>
    1ea4:	98 87       	std	Y+8, r25	; 0x08
    1ea6:	8f 83       	std	Y+7, r24	; 0x07

	temp1 = Accs[2] << 8;					// Accel Y
    1ea8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eaa:	90 e0       	ldi	r25, 0x00	; 0
    1eac:	98 2f       	mov	r25, r24
    1eae:	88 27       	eor	r24, r24
	temp2 = Accs[3];
    1eb0:	2c 81       	ldd	r18, Y+4	; 0x04
	RawADC[PITCH] = -((temp1 + temp2) >> 6);
    1eb2:	82 0f       	add	r24, r18
    1eb4:	91 1d       	adc	r25, r1
    1eb6:	56 e0       	ldi	r21, 0x06	; 6
    1eb8:	95 95       	asr	r25
    1eba:	87 95       	ror	r24
    1ebc:	5a 95       	dec	r21
    1ebe:	e1 f7       	brne	.-8      	; 0x1eb8 <get_raw_accs+0x50>
    1ec0:	91 95       	neg	r25
    1ec2:	81 95       	neg	r24
    1ec4:	91 09       	sbc	r25, r1
    1ec6:	9a 87       	std	Y+10, r25	; 0x0a
    1ec8:	89 87       	std	Y+9, r24	; 0x09

	temp1 = Accs[4] << 8;					// Accel Z
    1eca:	8d 81       	ldd	r24, Y+5	; 0x05
    1ecc:	90 e0       	ldi	r25, 0x00	; 0
    1ece:	98 2f       	mov	r25, r24
    1ed0:	88 27       	eor	r24, r24
	temp2 = Accs[5];
    1ed2:	2e 81       	ldd	r18, Y+6	; 0x06
	RawADC[YAW] = (temp1 + temp2) >> 6;
    1ed4:	82 0f       	add	r24, r18
    1ed6:	91 1d       	adc	r25, r1
    1ed8:	76 e0       	ldi	r23, 0x06	; 6
    1eda:	95 95       	asr	r25
    1edc:	87 95       	ror	r24
    1ede:	7a 95       	dec	r23
    1ee0:	e1 f7       	brne	.-8      	; 0x1eda <get_raw_accs+0x72>
    1ee2:	9c 87       	std	Y+12, r25	; 0x0c
    1ee4:	8b 87       	std	Y+11, r24	; 0x0b

	// Reorient the data as per the board orientation	
	for (i=0; i<NUMBEROFAXIS; i++)
	{
		// Rearrange the sensors
		accADC[i] = RawADC[(int8_t)pgm_read_byte(&ACC_RPY_Order[Config.Orientation][i])];
    1ee6:	20 91 31 06 	lds	r18, 0x0631
    1eea:	ac e3       	ldi	r26, 0x3C	; 60
    1eec:	b5 e0       	ldi	r27, 0x05	; 5
    1eee:	43 e0       	ldi	r20, 0x03	; 3
    1ef0:	24 02       	muls	r18, r20
    1ef2:	90 01       	movw	r18, r0
    1ef4:	11 24       	eor	r1, r1
    1ef6:	80 e0       	ldi	r24, 0x00	; 0
    1ef8:	90 e0       	ldi	r25, 0x00	; 0
    1efa:	26 53       	subi	r18, 0x36	; 54
    1efc:	3f 4f       	sbci	r19, 0xFF	; 255
    1efe:	f9 01       	movw	r30, r18
    1f00:	e8 0f       	add	r30, r24
    1f02:	f9 1f       	adc	r31, r25
    1f04:	e4 91       	lpm	r30, Z
    1f06:	ee 0f       	add	r30, r30
    1f08:	ff 0b       	sbc	r31, r31
    1f0a:	41 e0       	ldi	r20, 0x01	; 1
    1f0c:	50 e0       	ldi	r21, 0x00	; 0
    1f0e:	4c 0f       	add	r20, r28
    1f10:	5d 1f       	adc	r21, r29
    1f12:	e4 0f       	add	r30, r20
    1f14:	f5 1f       	adc	r31, r21
    1f16:	46 81       	ldd	r20, Z+6	; 0x06
    1f18:	57 81       	ldd	r21, Z+7	; 0x07
    1f1a:	4d 93       	st	X+, r20
    1f1c:	5d 93       	st	X+, r21
    1f1e:	01 96       	adiw	r24, 0x01	; 1
	temp1 = Accs[4] << 8;					// Accel Z
	temp2 = Accs[5];
	RawADC[YAW] = (temp1 + temp2) >> 6;

	// Reorient the data as per the board orientation	
	for (i=0; i<NUMBEROFAXIS; i++)
    1f20:	83 30       	cpi	r24, 0x03	; 3
    1f22:	91 05       	cpc	r25, r1
    1f24:	61 f7       	brne	.-40     	; 0x1efe <get_raw_accs+0x96>
	{
		// Rearrange the sensors
		accADC[i] = RawADC[(int8_t)pgm_read_byte(&ACC_RPY_Order[Config.Orientation][i])];
	}
}
    1f26:	2c 96       	adiw	r28, 0x0c	; 12
    1f28:	0f b6       	in	r0, 0x3f	; 63
    1f2a:	f8 94       	cli
    1f2c:	de bf       	out	0x3e, r29	; 62
    1f2e:	0f be       	out	0x3f, r0	; 63
    1f30:	cd bf       	out	0x3d, r28	; 61
    1f32:	df 91       	pop	r29
    1f34:	cf 91       	pop	r28
    1f36:	08 95       	ret

00001f38 <ReadAcc>:

int16_t accADC[NUMBEROFAXIS];	// Holds Acc ADC values - always in RPY order
int16_t accVert = 0;			// Holds the level-zeroed Z-acc value. Used for height damping in hover only.

void ReadAcc()
{
    1f38:	1f 93       	push	r17
    1f3a:	cf 93       	push	r28
    1f3c:	df 93       	push	r29
	uint8_t i;

	get_raw_accs();				// Updates accADC[] (RPY)
    1f3e:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <get_raw_accs>

	// Use default Config.AccZero for Acc-Z if inverse calibration not done yet
	// Actual zero is held in Config.AccZeroNormZ waiting for inv calibration
	if (!(Config.Main_flags & (1 << inv_cal_done)))
    1f42:	80 91 b0 07 	lds	r24, 0x07B0
    1f46:	80 fd       	sbrc	r24, 0
    1f48:	05 c0       	rjmp	.+10     	; 0x1f54 <ReadAcc+0x1c>
	{
		Config.AccZero[YAW] = 0;
    1f4a:	10 92 98 07 	sts	0x0798, r1
    1f4e:	10 92 97 07 	sts	0x0797, r1
    1f52:	0e c0       	rjmp	.+28     	; 0x1f70 <ReadAcc+0x38>

	// If inverted cal done, Config.AccZeroNormZ and Config.AccZeroDiff have
	// valid values
	else
	{
		Config.AccZero[YAW] = Config.AccZeroNormZ - Config.AccZeroDiff;
    1f54:	80 91 99 07 	lds	r24, 0x0799
    1f58:	90 91 9a 07 	lds	r25, 0x079A
    1f5c:	20 91 9d 07 	lds	r18, 0x079D
    1f60:	30 91 9e 07 	lds	r19, 0x079E
    1f64:	82 1b       	sub	r24, r18
    1f66:	93 0b       	sbc	r25, r19
    1f68:	90 93 98 07 	sts	0x0798, r25
    1f6c:	80 93 97 07 	sts	0x0797, r24
	{
		// Remove offsets from acc outputs
		accADC[i] -= Config.AccZero[i];

		// Change polarity
		accADC[i] *= (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation][i]);
    1f70:	20 91 31 06 	lds	r18, 0x0631
    1f74:	c3 e9       	ldi	r28, 0x93	; 147
    1f76:	d7 e0       	ldi	r29, 0x07	; 7
    1f78:	ac e3       	ldi	r26, 0x3C	; 60
    1f7a:	b5 e0       	ldi	r27, 0x05	; 5
    1f7c:	83 e0       	ldi	r24, 0x03	; 3
    1f7e:	28 02       	muls	r18, r24
    1f80:	90 01       	movw	r18, r0
    1f82:	11 24       	eor	r1, r1
    1f84:	80 e0       	ldi	r24, 0x00	; 0
    1f86:	90 e0       	ldi	r25, 0x00	; 0
    1f88:	28 54       	subi	r18, 0x48	; 72
    1f8a:	3f 4f       	sbci	r19, 0xFF	; 255
	}

	for (i=0; i < NUMBEROFAXIS; i++)
	{
		// Remove offsets from acc outputs
		accADC[i] -= Config.AccZero[i];
    1f8c:	69 91       	ld	r22, Y+
    1f8e:	79 91       	ld	r23, Y+
    1f90:	f9 01       	movw	r30, r18
    1f92:	e8 0f       	add	r30, r24
    1f94:	f9 1f       	adc	r31, r25

		// Change polarity
		accADC[i] *= (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation][i]);
    1f96:	14 91       	lpm	r17, Z
	}

	for (i=0; i < NUMBEROFAXIS; i++)
	{
		// Remove offsets from acc outputs
		accADC[i] -= Config.AccZero[i];
    1f98:	4d 91       	ld	r20, X+
    1f9a:	5c 91       	ld	r21, X
    1f9c:	11 97       	sbiw	r26, 0x01	; 1
    1f9e:	46 1b       	sub	r20, r22
    1fa0:	57 0b       	sbc	r21, r23

		// Change polarity
		accADC[i] *= (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation][i]);
    1fa2:	14 03       	mulsu	r17, r20
    1fa4:	b0 01       	movw	r22, r0
    1fa6:	15 9f       	mul	r17, r21
    1fa8:	70 0d       	add	r23, r0
    1faa:	11 24       	eor	r1, r1
    1fac:	6d 93       	st	X+, r22
    1fae:	7d 93       	st	X+, r23
    1fb0:	01 96       	adiw	r24, 0x01	; 1
	else
	{
		Config.AccZero[YAW] = Config.AccZeroNormZ - Config.AccZeroDiff;
	}

	for (i=0; i < NUMBEROFAXIS; i++)
    1fb2:	83 30       	cpi	r24, 0x03	; 3
    1fb4:	91 05       	cpc	r25, r1
    1fb6:	51 f7       	brne	.-44     	; 0x1f8c <ReadAcc+0x54>
	}

	// Recalculate current accVert using filtered acc value
	// Note that AccSmooth[YAW] is already zeroed around 1G so we have to re-add 
	// the zero back here so that Config.AccZeroNormZ subtracts the correct amount
	 accVert = accSmooth[YAW] + (Config.AccZeroNormZ - Config.AccZero[YAW]);
    1fb8:	60 91 99 07 	lds	r22, 0x0799
    1fbc:	70 91 9a 07 	lds	r23, 0x079A
    1fc0:	80 91 97 07 	lds	r24, 0x0797
    1fc4:	90 91 98 07 	lds	r25, 0x0798
    1fc8:	68 1b       	sub	r22, r24
    1fca:	79 0b       	sbc	r23, r25
    1fcc:	88 27       	eor	r24, r24
    1fce:	77 fd       	sbrc	r23, 7
    1fd0:	80 95       	com	r24
    1fd2:	98 2f       	mov	r25, r24
    1fd4:	0e 94 30 47 	call	0x8e60	; 0x8e60 <__floatsisf>
    1fd8:	20 91 99 05 	lds	r18, 0x0599
    1fdc:	30 91 9a 05 	lds	r19, 0x059A
    1fe0:	40 91 9b 05 	lds	r20, 0x059B
    1fe4:	50 91 9c 05 	lds	r21, 0x059C
    1fe8:	0e 94 2d 46 	call	0x8c5a	; 0x8c5a <__addsf3>
    1fec:	0e 94 fd 46 	call	0x8dfa	; 0x8dfa <__fixsfsi>
    1ff0:	70 93 15 05 	sts	0x0515, r23
    1ff4:	60 93 14 05 	sts	0x0514, r22
}
    1ff8:	df 91       	pop	r29
    1ffa:	cf 91       	pop	r28
    1ffc:	1f 91       	pop	r17
    1ffe:	08 95       	ret

00002000 <CalibrateAcc>:
//***************************************************************
// Calibration routines
//***************************************************************

void CalibrateAcc(int8_t type)
{
    2000:	1f 93       	push	r17
    2002:	cf 93       	push	r28
    2004:	df 93       	push	r29
    2006:	00 d0       	rcall	.+0      	; 0x2008 <CalibrateAcc+0x8>
    2008:	00 d0       	rcall	.+0      	; 0x200a <CalibrateAcc+0xa>
    200a:	00 d0       	rcall	.+0      	; 0x200c <CalibrateAcc+0xc>
    200c:	cd b7       	in	r28, 0x3d	; 61
    200e:	de b7       	in	r29, 0x3e	; 62
	uint8_t i;
	int16_t accZero[NUMBEROFAXIS] = {0,0,0};	// Used for calibrating Accs on ground
    2010:	1a 82       	std	Y+2, r1	; 0x02
    2012:	19 82       	std	Y+1, r1	; 0x01
    2014:	1c 82       	std	Y+4, r1	; 0x04
    2016:	1b 82       	std	Y+3, r1	; 0x03
    2018:	1e 82       	std	Y+6, r1	; 0x06
    201a:	1d 82       	std	Y+5, r1	; 0x05

	// Calibrate acc
	if (type == NORMAL)
    201c:	81 11       	cpse	r24, r1
    201e:	6f c0       	rjmp	.+222    	; 0x20fe <CalibrateAcc+0xfe>
    2020:	10 e2       	ldi	r17, 0x20	; 32
	{
		// Get average zero value (over 32 readings)
		for (i = 0; i < 32; i++)
		{
			get_raw_accs();						// Updates accADC[] with signals reoriented into (RPY)
    2022:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <get_raw_accs>

			accZero[ROLL] += accADC[ROLL];
    2026:	89 81       	ldd	r24, Y+1	; 0x01
    2028:	9a 81       	ldd	r25, Y+2	; 0x02
    202a:	20 91 3c 05 	lds	r18, 0x053C
    202e:	30 91 3d 05 	lds	r19, 0x053D
    2032:	82 0f       	add	r24, r18
    2034:	93 1f       	adc	r25, r19
    2036:	9a 83       	std	Y+2, r25	; 0x02
    2038:	89 83       	std	Y+1, r24	; 0x01
			accZero[PITCH] += accADC[PITCH];						
    203a:	8b 81       	ldd	r24, Y+3	; 0x03
    203c:	9c 81       	ldd	r25, Y+4	; 0x04
    203e:	20 91 3e 05 	lds	r18, 0x053E
    2042:	30 91 3f 05 	lds	r19, 0x053F
    2046:	82 0f       	add	r24, r18
    2048:	93 1f       	adc	r25, r19
    204a:	9c 83       	std	Y+4, r25	; 0x04
    204c:	8b 83       	std	Y+3, r24	; 0x03
			accZero[YAW] += accADC[YAW];		
    204e:	8d 81       	ldd	r24, Y+5	; 0x05
    2050:	9e 81       	ldd	r25, Y+6	; 0x06
    2052:	20 91 40 05 	lds	r18, 0x0540
    2056:	30 91 41 05 	lds	r19, 0x0541
    205a:	82 0f       	add	r24, r18
    205c:	93 1f       	adc	r25, r19
    205e:	9e 83       	std	Y+6, r25	; 0x06
    2060:	8d 83       	std	Y+5, r24	; 0x05
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2062:	8f e4       	ldi	r24, 0x4F	; 79
    2064:	93 ec       	ldi	r25, 0xC3	; 195
    2066:	01 97       	sbiw	r24, 0x01	; 1
    2068:	f1 f7       	brne	.-4      	; 0x2066 <CalibrateAcc+0x66>
    206a:	00 c0       	rjmp	.+0      	; 0x206c <CalibrateAcc+0x6c>
    206c:	00 00       	nop
    206e:	11 50       	subi	r17, 0x01	; 1

	// Calibrate acc
	if (type == NORMAL)
	{
		// Get average zero value (over 32 readings)
		for (i = 0; i < 32; i++)
    2070:	c1 f6       	brne	.-80     	; 0x2022 <CalibrateAcc+0x22>
    2072:	fe 01       	movw	r30, r28
    2074:	31 96       	adiw	r30, 0x01	; 1
    2076:	9e 01       	movw	r18, r28
    2078:	29 5f       	subi	r18, 0xF9	; 249
    207a:	3f 4f       	sbci	r19, 0xFF	; 255
		}

		for (i = 0; i < NUMBEROFAXIS; i++)		// For selected axis in RPY order
		{
			// Round and divide by 32
			accZero[i] = ((accZero[i] + 16) >> 5);
    207c:	80 81       	ld	r24, Z
    207e:	91 81       	ldd	r25, Z+1	; 0x01
    2080:	40 96       	adiw	r24, 0x10	; 16
    2082:	45 e0       	ldi	r20, 0x05	; 5
    2084:	95 95       	asr	r25
    2086:	87 95       	ror	r24
    2088:	4a 95       	dec	r20
    208a:	e1 f7       	brne	.-8      	; 0x2084 <CalibrateAcc+0x84>
    208c:	81 93       	st	Z+, r24
    208e:	91 93       	st	Z+, r25
			accZero[YAW] += accADC[YAW];		

			_delay_ms(10);						// Get a better acc average over time
		}

		for (i = 0; i < NUMBEROFAXIS; i++)		// For selected axis in RPY order
    2090:	e2 17       	cp	r30, r18
    2092:	f3 07       	cpc	r31, r19
    2094:	99 f7       	brne	.-26     	; 0x207c <CalibrateAcc+0x7c>
			// Round and divide by 32
			accZero[i] = ((accZero[i] + 16) >> 5);
		}

		// Reset zeros to normal cal
		Config.AccZero[ROLL] = accZero[ROLL]; 
    2096:	89 81       	ldd	r24, Y+1	; 0x01
    2098:	9a 81       	ldd	r25, Y+2	; 0x02
    209a:	90 93 94 07 	sts	0x0794, r25
    209e:	80 93 93 07 	sts	0x0793, r24
		Config.AccZero[PITCH] = accZero[PITCH]; 
    20a2:	8b 81       	ldd	r24, Y+3	; 0x03
    20a4:	9c 81       	ldd	r25, Y+4	; 0x04
    20a6:	90 93 96 07 	sts	0x0796, r25
    20aa:	80 93 95 07 	sts	0x0795, r24
		Config.AccZeroNormZ = accZero[YAW]; 
			
		// Correct polarity of AccZeroNormZ as per orientation
		Config.AccZeroNormZ *= (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation][YAW]);
    20ae:	80 91 31 06 	lds	r24, 0x0631
    20b2:	99 27       	eor	r25, r25
    20b4:	87 fd       	sbrc	r24, 7
    20b6:	90 95       	com	r25
    20b8:	fc 01       	movw	r30, r24
    20ba:	ee 0f       	add	r30, r30
    20bc:	ff 1f       	adc	r31, r31
    20be:	e8 0f       	add	r30, r24
    20c0:	f9 1f       	adc	r31, r25
    20c2:	e6 54       	subi	r30, 0x46	; 70
    20c4:	ff 4f       	sbci	r31, 0xFF	; 255
    20c6:	44 91       	lpm	r20, Z
    20c8:	2d 81       	ldd	r18, Y+5	; 0x05
    20ca:	3e 81       	ldd	r19, Y+6	; 0x06
    20cc:	42 03       	mulsu	r20, r18
    20ce:	c0 01       	movw	r24, r0
    20d0:	43 9f       	mul	r20, r19
    20d2:	90 0d       	add	r25, r0
    20d4:	11 24       	eor	r1, r1
    20d6:	90 93 9a 07 	sts	0x079A, r25
    20da:	80 93 99 07 	sts	0x0799, r24
			
		// Flag that normal cal done
		Config.Main_flags |= (1 << normal_cal_done);
    20de:	80 91 b0 07 	lds	r24, 0x07B0
    20e2:	82 60       	ori	r24, 0x02	; 2
    20e4:	80 93 b0 07 	sts	0x07B0, r24
	
		// Save new calibration and flash LED for confirmation
		Save_Config_to_EEPROM();
    20e8:	0e 94 93 16 	call	0x2d26	; 0x2d26 <Save_Config_to_EEPROM>
		LED1 = 1;
    20ec:	2b 9a       	sbi	0x05, 3	; 5
    20ee:	9f e7       	ldi	r25, 0x7F	; 127
    20f0:	24 e8       	ldi	r18, 0x84	; 132
    20f2:	4e e1       	ldi	r20, 0x1E	; 30
    20f4:	91 50       	subi	r25, 0x01	; 1
    20f6:	20 40       	sbci	r18, 0x00	; 0
    20f8:	40 40       	sbci	r20, 0x00	; 0
    20fa:	e1 f7       	brne	.-8      	; 0x20f4 <CalibrateAcc+0xf4>
    20fc:	67 c0       	rjmp	.+206    	; 0x21cc <CalibrateAcc+0x1cc>

	else
	// Calibrate inverted acc
	{
		// Only update the inverted cal value if preceded by a normal calibration
		if (Config.Main_flags & (1 << normal_cal_done))
    20fe:	80 91 b0 07 	lds	r24, 0x07B0
    2102:	81 ff       	sbrs	r24, 1
    2104:	66 c0       	rjmp	.+204    	; 0x21d2 <CalibrateAcc+0x1d2>
		{
			// Get average zero value (over 32 readings)
			Config.AccZeroInvZ = 0;
    2106:	10 92 9c 07 	sts	0x079C, r1
    210a:	10 92 9b 07 	sts	0x079B, r1
    210e:	10 e2       	ldi	r17, 0x20	; 32

			for (i = 0; i < 32; i++)
			{
				get_raw_accs();					// Updates gyroADC[] with reoriented vales
    2110:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <get_raw_accs>
				Config.AccZeroInvZ += accADC[YAW];		
    2114:	80 91 9b 07 	lds	r24, 0x079B
    2118:	90 91 9c 07 	lds	r25, 0x079C
    211c:	20 91 40 05 	lds	r18, 0x0540
    2120:	30 91 41 05 	lds	r19, 0x0541
    2124:	82 0f       	add	r24, r18
    2126:	93 1f       	adc	r25, r19
    2128:	90 93 9c 07 	sts	0x079C, r25
    212c:	80 93 9b 07 	sts	0x079B, r24
    2130:	8f e4       	ldi	r24, 0x4F	; 79
    2132:	93 ec       	ldi	r25, 0xC3	; 195
    2134:	01 97       	sbiw	r24, 0x01	; 1
    2136:	f1 f7       	brne	.-4      	; 0x2134 <CalibrateAcc+0x134>
    2138:	00 c0       	rjmp	.+0      	; 0x213a <CalibrateAcc+0x13a>
    213a:	00 00       	nop
    213c:	11 50       	subi	r17, 0x01	; 1
		if (Config.Main_flags & (1 << normal_cal_done))
		{
			// Get average zero value (over 32 readings)
			Config.AccZeroInvZ = 0;

			for (i = 0; i < 32; i++)
    213e:	41 f7       	brne	.-48     	; 0x2110 <CalibrateAcc+0x110>

			// Round and divide by 32
			Config.AccZeroInvZ = ((Config.AccZeroInvZ + 16) >> 5);		// Inverted zero point
			
			// Correct polarity of AccZeroInvZ as per orientation
			Config.AccZeroInvZ *= (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation][YAW]);
    2140:	80 91 31 06 	lds	r24, 0x0631
    2144:	99 27       	eor	r25, r25
    2146:	87 fd       	sbrc	r24, 7
    2148:	90 95       	com	r25
    214a:	fc 01       	movw	r30, r24
    214c:	ee 0f       	add	r30, r30
    214e:	ff 1f       	adc	r31, r31
    2150:	e8 0f       	add	r30, r24
    2152:	f9 1f       	adc	r31, r25
    2154:	e6 54       	subi	r30, 0x46	; 70
    2156:	ff 4f       	sbci	r31, 0xFF	; 255
    2158:	44 91       	lpm	r20, Z
				Config.AccZeroInvZ += accADC[YAW];		
				_delay_ms(10);					// Get a better acc average over time
			}

			// Round and divide by 32
			Config.AccZeroInvZ = ((Config.AccZeroInvZ + 16) >> 5);		// Inverted zero point
    215a:	20 91 9b 07 	lds	r18, 0x079B
    215e:	30 91 9c 07 	lds	r19, 0x079C
    2162:	20 5f       	subi	r18, 0xF0	; 240
    2164:	3f 4f       	sbci	r19, 0xFF	; 255
    2166:	b5 e0       	ldi	r27, 0x05	; 5
    2168:	35 95       	asr	r19
    216a:	27 95       	ror	r18
    216c:	ba 95       	dec	r27
    216e:	e1 f7       	brne	.-8      	; 0x2168 <CalibrateAcc+0x168>
			
			// Correct polarity of AccZeroInvZ as per orientation
			Config.AccZeroInvZ *= (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation][YAW]);
    2170:	42 03       	mulsu	r20, r18
    2172:	c0 01       	movw	r24, r0
    2174:	43 9f       	mul	r20, r19
    2176:	90 0d       	add	r25, r0
    2178:	11 24       	eor	r1, r1
    217a:	90 93 9c 07 	sts	0x079C, r25
    217e:	80 93 9b 07 	sts	0x079B, r24

			// Test if board is actually inverted relative to board orientation.
			if (Config.AccZeroInvZ < 0)
    2182:	97 ff       	sbrs	r25, 7
    2184:	26 c0       	rjmp	.+76     	; 0x21d2 <CalibrateAcc+0x1d2>
			{

				// Reset zero to halfway between min and max Z
				Config.AccZeroDiff = ((Config.AccZeroNormZ - Config.AccZeroInvZ) >> 1);
    2186:	20 91 99 07 	lds	r18, 0x0799
    218a:	30 91 9a 07 	lds	r19, 0x079A
    218e:	a9 01       	movw	r20, r18
    2190:	48 1b       	sub	r20, r24
    2192:	59 0b       	sbc	r21, r25
    2194:	ca 01       	movw	r24, r20
    2196:	95 95       	asr	r25
    2198:	87 95       	ror	r24
    219a:	90 93 9e 07 	sts	0x079E, r25
    219e:	80 93 9d 07 	sts	0x079D, r24
				Config.AccZero[YAW] = Config.AccZeroNormZ - Config.AccZeroDiff; // Config.AccZero[YAW] is now valid to use
    21a2:	28 1b       	sub	r18, r24
    21a4:	39 0b       	sbc	r19, r25
    21a6:	30 93 98 07 	sts	0x0798, r19
    21aa:	20 93 97 07 	sts	0x0797, r18

				// Flag that inverted cal done
				Config.Main_flags |= (1 << inv_cal_done);
    21ae:	80 91 b0 07 	lds	r24, 0x07B0
    21b2:	81 60       	ori	r24, 0x01	; 1
    21b4:	80 93 b0 07 	sts	0x07B0, r24

				// Save new calibration and flash LED for confirmation
				Save_Config_to_EEPROM();
    21b8:	0e 94 93 16 	call	0x2d26	; 0x2d26 <Save_Config_to_EEPROM>
				LED1 = 1;
    21bc:	2b 9a       	sbi	0x05, 3	; 5
    21be:	5f e7       	ldi	r21, 0x7F	; 127
    21c0:	84 e8       	ldi	r24, 0x84	; 132
    21c2:	9e e1       	ldi	r25, 0x1E	; 30
    21c4:	51 50       	subi	r21, 0x01	; 1
    21c6:	80 40       	sbci	r24, 0x00	; 0
    21c8:	90 40       	sbci	r25, 0x00	; 0
    21ca:	e1 f7       	brne	.-8      	; 0x21c4 <CalibrateAcc+0x1c4>
    21cc:	00 c0       	rjmp	.+0      	; 0x21ce <CalibrateAcc+0x1ce>
    21ce:	00 00       	nop
				_delay_ms(500);
				LED1 = 0;
    21d0:	2b 98       	cbi	0x05, 3	; 5
			}
		}
	}
}
    21d2:	26 96       	adiw	r28, 0x06	; 6
    21d4:	0f b6       	in	r0, 0x3f	; 63
    21d6:	f8 94       	cli
    21d8:	de bf       	out	0x3e, r29	; 62
    21da:	0f be       	out	0x3f, r0	; 63
    21dc:	cd bf       	out	0x3d, r28	; 61
    21de:	df 91       	pop	r29
    21e0:	cf 91       	pop	r28
    21e2:	1f 91       	pop	r17
    21e4:	08 95       	ret

000021e6 <init_i2c_accs>:
// Set up the MPU6050 (Acc)
//***************************************************************

void init_i2c_accs(void)
{
	writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_PWR_MGMT_1, 0x01); // Gyro X clock, awake
    21e6:	41 e0       	ldi	r20, 0x01	; 1
    21e8:	6b e6       	ldi	r22, 0x6B	; 107
    21ea:	80 ed       	ldi	r24, 0xD0	; 208
    21ec:	0e 94 7e 24 	call	0x48fc	; 0x48fc <writeI2Cbyte>
	writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_ACCEL_CONFIG, ACCFS4G); // 4G full scale
    21f0:	48 e0       	ldi	r20, 0x08	; 8
    21f2:	6c e1       	ldi	r22, 0x1C	; 28
    21f4:	80 ed       	ldi	r24, 0xD0	; 208
    21f6:	0c 94 7e 24 	jmp	0x48fc	; 0x48fc <writeI2Cbyte>

000021fa <Init_ADC>:
//***********************************************************

void Init_ADC(void)
{
	// Digital Input Disable Register - ADC0~7 Digital Input Disable
	DIDR0 	= (1<<ADC0D)|(1<<ADC1D)|(1<<ADC2D)|(1<<ADC3D)|(1<<ADC4D)|(1<<ADC5D)|(1<<ADC6D)|(1<<ADC7D);
    21fa:	8f ef       	ldi	r24, 0xFF	; 255
    21fc:	80 93 7e 00 	sts	0x007E, r24
	
	// ADC Control and Status Register B - ADTS2:0
	ADCSRB 	= 0x00;
    2200:	10 92 7b 00 	sts	0x007B, r1
    2204:	08 95       	ret

00002206 <read_adc>:
}

void read_adc(uint8_t channel)
{
	ADMUX	= channel;
    2206:	80 93 7c 00 	sts	0x007C, r24
	
	// ADEN, ADSC, ADPS1,2
	ADCSRA 	= (1<<ADEN)|(1<<ADSC)|(1<<ADPS1)|(1<<ADPS2);
    220a:	86 ec       	ldi	r24, 0xC6	; 198
    220c:	80 93 7a 00 	sts	0x007A, r24

	// Wait to complete. Result is in ADCW
	while (ADCSRA & (1 << ADSC));
    2210:	80 91 7a 00 	lds	r24, 0x007A
    2214:	86 fd       	sbrc	r24, 6
    2216:	fc cf       	rjmp	.-8      	; 0x2210 <read_adc+0xa>
}
    2218:	08 95       	ret

0000221a <Display_balance>:
//************************************************************
// Code
//************************************************************

void Display_balance(void)
{
    221a:	cf 92       	push	r12
    221c:	df 92       	push	r13
    221e:	ef 92       	push	r14
    2220:	0f 93       	push	r16
    2222:	cf 93       	push	r28
    2224:	df 93       	push	r29
			y_pos = accSmooth[ROLL] + 64;

			if (x_pos < 0) x_pos = 0;
			if (x_pos > 64) x_pos = 64;
			if (y_pos < 0) y_pos = 0;
			if (y_pos > 128) y_pos = 128;
    2226:	cb e0       	ldi	r28, 0x0B	; 11
    2228:	d0 e0       	ldi	r29, 0x00	; 0

	#ifdef KK2Mini
	st7565_set_brightness(28);
	#endif

	while(BUTTON1 != 0)
    222a:	1f 9b       	sbis	0x03, 7	; 3
    222c:	7f c0       	rjmp	.+254    	; 0x232c <Display_balance+0x112>
	{
		// Read accs
		ReadAcc();
    222e:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <ReadAcc>

		// Refresh accSmooth values
		// Fake the IMU period as accSmooth doesn't need that
		imu_update(0);
    2232:	60 e0       	ldi	r22, 0x00	; 0
    2234:	70 e0       	ldi	r23, 0x00	; 0
    2236:	cb 01       	movw	r24, r22
    2238:	0e 94 f6 26 	call	0x4dec	; 0x4dec <imu_update>
    223c:	21 97       	sbiw	r28, 0x01	; 1

		count++;
		
		// Only display once per 10 loops
		if (count > 10)
    223e:	20 97       	sbiw	r28, 0x00	; 0
    2240:	a1 f7       	brne	.-24     	; 0x222a <Display_balance+0x10>
		{
			// Convert acc signal to a pixel position
			x_pos = accSmooth[PITCH] + 32;
    2242:	20 e0       	ldi	r18, 0x00	; 0
    2244:	30 e0       	ldi	r19, 0x00	; 0
    2246:	40 e0       	ldi	r20, 0x00	; 0
    2248:	52 e4       	ldi	r21, 0x42	; 66
    224a:	60 91 95 05 	lds	r22, 0x0595
    224e:	70 91 96 05 	lds	r23, 0x0596
    2252:	80 91 97 05 	lds	r24, 0x0597
    2256:	90 91 98 05 	lds	r25, 0x0598
    225a:	0e 94 2d 46 	call	0x8c5a	; 0x8c5a <__addsf3>
    225e:	0e 94 fd 46 	call	0x8dfa	; 0x8dfa <__fixsfsi>
    2262:	eb 01       	movw	r28, r22
			y_pos = accSmooth[ROLL] + 64;
    2264:	20 e0       	ldi	r18, 0x00	; 0
    2266:	30 e0       	ldi	r19, 0x00	; 0
    2268:	40 e8       	ldi	r20, 0x80	; 128
    226a:	52 e4       	ldi	r21, 0x42	; 66
    226c:	60 91 91 05 	lds	r22, 0x0591
    2270:	70 91 92 05 	lds	r23, 0x0592
    2274:	80 91 93 05 	lds	r24, 0x0593
    2278:	90 91 94 05 	lds	r25, 0x0594
    227c:	0e 94 2d 46 	call	0x8c5a	; 0x8c5a <__addsf3>
    2280:	0e 94 fd 46 	call	0x8dfa	; 0x8dfa <__fixsfsi>
    2284:	6b 01       	movw	r12, r22

			if (x_pos < 0) x_pos = 0;
    2286:	d7 fd       	sbrc	r29, 7
    2288:	06 c0       	rjmp	.+12     	; 0x2296 <Display_balance+0x7c>
			if (x_pos > 64) x_pos = 64;
    228a:	c1 34       	cpi	r28, 0x41	; 65
    228c:	d1 05       	cpc	r29, r1
    228e:	2c f0       	brlt	.+10     	; 0x229a <Display_balance+0x80>
    2290:	c0 e4       	ldi	r28, 0x40	; 64
    2292:	d0 e0       	ldi	r29, 0x00	; 0
    2294:	02 c0       	rjmp	.+4      	; 0x229a <Display_balance+0x80>
		{
			// Convert acc signal to a pixel position
			x_pos = accSmooth[PITCH] + 32;
			y_pos = accSmooth[ROLL] + 64;

			if (x_pos < 0) x_pos = 0;
    2296:	c0 e0       	ldi	r28, 0x00	; 0
    2298:	d0 e0       	ldi	r29, 0x00	; 0
			if (x_pos > 64) x_pos = 64;
			if (y_pos < 0) y_pos = 0;
    229a:	d7 fc       	sbrc	r13, 7
    229c:	08 c0       	rjmp	.+16     	; 0x22ae <Display_balance+0x94>
			if (y_pos > 128) y_pos = 128;
    229e:	81 e8       	ldi	r24, 0x81	; 129
    22a0:	c8 16       	cp	r12, r24
    22a2:	d1 04       	cpc	r13, r1
    22a4:	34 f0       	brlt	.+12     	; 0x22b2 <Display_balance+0x98>
    22a6:	80 e8       	ldi	r24, 0x80	; 128
    22a8:	c8 2e       	mov	r12, r24
    22aa:	d1 2c       	mov	r13, r1
    22ac:	02 c0       	rjmp	.+4      	; 0x22b2 <Display_balance+0x98>
			x_pos = accSmooth[PITCH] + 32;
			y_pos = accSmooth[ROLL] + 64;

			if (x_pos < 0) x_pos = 0;
			if (x_pos > 64) x_pos = 64;
			if (y_pos < 0) y_pos = 0;
    22ae:	c1 2c       	mov	r12, r1
    22b0:	d1 2c       	mov	r13, r1
			if (y_pos > 128) y_pos = 128;

			// Print bottom markers
			LCD_Display_Text(12, (const unsigned char*)Wingdings, 2, 55); 	// Left
    22b2:	27 e3       	ldi	r18, 0x37	; 55
    22b4:	30 e0       	ldi	r19, 0x00	; 0
    22b6:	42 e0       	ldi	r20, 0x02	; 2
    22b8:	50 e0       	ldi	r21, 0x00	; 0
    22ba:	65 ef       	ldi	r22, 0xF5	; 245
    22bc:	70 e0       	ldi	r23, 0x00	; 0
    22be:	8c e0       	ldi	r24, 0x0C	; 12
    22c0:	90 e0       	ldi	r25, 0x00	; 0
    22c2:	0e 94 20 22 	call	0x4440	; 0x4440 <LCD_Display_Text>

			// Draw balance meter
			drawrect(buffer, 0, 0, 128, 64, 1);		// Border
    22c6:	ee 24       	eor	r14, r14
    22c8:	e3 94       	inc	r14
    22ca:	00 e4       	ldi	r16, 0x40	; 64
    22cc:	20 e8       	ldi	r18, 0x80	; 128
    22ce:	40 e0       	ldi	r20, 0x00	; 0
    22d0:	60 e0       	ldi	r22, 0x00	; 0
    22d2:	80 e0       	ldi	r24, 0x00	; 0
    22d4:	91 e0       	ldi	r25, 0x01	; 1
    22d6:	0e 94 3d 21 	call	0x427a	; 0x427a <drawrect>
			drawrect(buffer, 54, 22, 21, 21, 1);	// Target
    22da:	05 e1       	ldi	r16, 0x15	; 21
    22dc:	25 e1       	ldi	r18, 0x15	; 21
    22de:	46 e1       	ldi	r20, 0x16	; 22
    22e0:	66 e3       	ldi	r22, 0x36	; 54
    22e2:	80 e0       	ldi	r24, 0x00	; 0
    22e4:	91 e0       	ldi	r25, 0x01	; 1
    22e6:	0e 94 3d 21 	call	0x427a	; 0x427a <drawrect>
			drawline(buffer, 64, 8, 64, 56, 1); 	// Crosshairs
    22ea:	08 e3       	ldi	r16, 0x38	; 56
    22ec:	20 e4       	ldi	r18, 0x40	; 64
    22ee:	48 e0       	ldi	r20, 0x08	; 8
    22f0:	60 e4       	ldi	r22, 0x40	; 64
    22f2:	80 e0       	ldi	r24, 0x00	; 0
    22f4:	91 e0       	ldi	r25, 0x01	; 1
    22f6:	0e 94 d3 20 	call	0x41a6	; 0x41a6 <drawline>
			drawline(buffer, 32, 32, 96, 32, 1);
    22fa:	00 e2       	ldi	r16, 0x20	; 32
    22fc:	20 e6       	ldi	r18, 0x60	; 96
    22fe:	40 e2       	ldi	r20, 0x20	; 32
    2300:	60 e2       	ldi	r22, 0x20	; 32
    2302:	80 e0       	ldi	r24, 0x00	; 0
    2304:	91 e0       	ldi	r25, 0x01	; 1
    2306:	0e 94 d3 20 	call	0x41a6	; 0x41a6 <drawline>
			fillcircle(buffer, y_pos, x_pos, 8, 1);	// Bubble
    230a:	01 e0       	ldi	r16, 0x01	; 1
    230c:	28 e0       	ldi	r18, 0x08	; 8
    230e:	4c 2f       	mov	r20, r28
    2310:	6c 2d       	mov	r22, r12
    2312:	80 e0       	ldi	r24, 0x00	; 0
    2314:	91 e0       	ldi	r25, 0x01	; 1
    2316:	0e 94 8f 21 	call	0x431e	; 0x431e <fillcircle>

			// Refresh GLCD
			write_buffer(buffer);
    231a:	80 e0       	ldi	r24, 0x00	; 0
    231c:	91 e0       	ldi	r25, 0x01	; 1
    231e:	0e 94 41 20 	call	0x4082	; 0x4082 <write_buffer>
			clear_buffer(buffer);
    2322:	80 e0       	ldi	r24, 0x00	; 0
    2324:	91 e0       	ldi	r25, 0x01	; 1
    2326:	0e 94 73 20 	call	0x40e6	; 0x40e6 <clear_buffer>
    232a:	7d cf       	rjmp	.-262    	; 0x2226 <Display_balance+0xc>
	#ifdef KK2Mini
	clear_buffer(buffer);
	write_buffer(buffer);
	st7565_set_brightness(Config.Contrast);
	#endif
}
    232c:	df 91       	pop	r29
    232e:	cf 91       	pop	r28
    2330:	0f 91       	pop	r16
    2332:	ef 90       	pop	r14
    2334:	df 90       	pop	r13
    2336:	cf 90       	pop	r12
    2338:	08 95       	ret

0000233a <Display_rcinput>:
//************************************************************

void Display_rcinput(void)
{
	// Re-enable interrupts. High seed mode may have left them off
	init_int();
    233a:	0e 94 29 2e 	call	0x5c52	; 0x5c52 <init_int>
	
	while(BUTTON1 != 0)
    233e:	1f 9b       	sbis	0x03, 7	; 3
    2340:	fa c0       	rjmp	.+500    	; 0x2536 <Display_rcinput+0x1fc>
	{
		if (BUTTON4 == 0)
    2342:	1c 9b       	sbis	0x03, 4	; 3
		{
			CenterSticks();
    2344:	0e 94 d8 43 	call	0x87b0	; 0x87b0 <CenterSticks>
		}

		RxGetChannels();
    2348:	0e 94 43 43 	call	0x8686	; 0x8686 <RxGetChannels>

		LCD_Display_Text(114,(const unsigned char*)Verdana8,0,0); // Throttle
    234c:	20 e0       	ldi	r18, 0x00	; 0
    234e:	30 e0       	ldi	r19, 0x00	; 0
    2350:	40 e0       	ldi	r20, 0x00	; 0
    2352:	50 e0       	ldi	r21, 0x00	; 0
    2354:	6d e0       	ldi	r22, 0x0D	; 13
    2356:	7a e0       	ldi	r23, 0x0A	; 10
    2358:	82 e7       	ldi	r24, 0x72	; 114
    235a:	90 e0       	ldi	r25, 0x00	; 0
    235c:	0e 94 20 22 	call	0x4440	; 0x4440 <LCD_Display_Text>
		LCD_Display_Text(32,(const unsigned char*)Verdana8,0,10);
    2360:	2a e0       	ldi	r18, 0x0A	; 10
    2362:	30 e0       	ldi	r19, 0x00	; 0
    2364:	40 e0       	ldi	r20, 0x00	; 0
    2366:	50 e0       	ldi	r21, 0x00	; 0
    2368:	6d e0       	ldi	r22, 0x0D	; 13
    236a:	7a e0       	ldi	r23, 0x0A	; 10
    236c:	80 e2       	ldi	r24, 0x20	; 32
    236e:	90 e0       	ldi	r25, 0x00	; 0
    2370:	0e 94 20 22 	call	0x4440	; 0x4440 <LCD_Display_Text>
		LCD_Display_Text(115,(const unsigned char*)Verdana8,0,20);
    2374:	24 e1       	ldi	r18, 0x14	; 20
    2376:	30 e0       	ldi	r19, 0x00	; 0
    2378:	40 e0       	ldi	r20, 0x00	; 0
    237a:	50 e0       	ldi	r21, 0x00	; 0
    237c:	6d e0       	ldi	r22, 0x0D	; 13
    237e:	7a e0       	ldi	r23, 0x0A	; 10
    2380:	83 e7       	ldi	r24, 0x73	; 115
    2382:	90 e0       	ldi	r25, 0x00	; 0
    2384:	0e 94 20 22 	call	0x4440	; 0x4440 <LCD_Display_Text>
		LCD_Display_Text(35,(const unsigned char*)Verdana8,0,30);
    2388:	2e e1       	ldi	r18, 0x1E	; 30
    238a:	30 e0       	ldi	r19, 0x00	; 0
    238c:	40 e0       	ldi	r20, 0x00	; 0
    238e:	50 e0       	ldi	r21, 0x00	; 0
    2390:	6d e0       	ldi	r22, 0x0D	; 13
    2392:	7a e0       	ldi	r23, 0x0A	; 10
    2394:	83 e2       	ldi	r24, 0x23	; 35
    2396:	90 e0       	ldi	r25, 0x00	; 0
    2398:	0e 94 20 22 	call	0x4440	; 0x4440 <LCD_Display_Text>

		LCD_Display_Text(109,(const unsigned char*)Verdana8,70,0); // Gear
    239c:	20 e0       	ldi	r18, 0x00	; 0
    239e:	30 e0       	ldi	r19, 0x00	; 0
    23a0:	46 e4       	ldi	r20, 0x46	; 70
    23a2:	50 e0       	ldi	r21, 0x00	; 0
    23a4:	6d e0       	ldi	r22, 0x0D	; 13
    23a6:	7a e0       	ldi	r23, 0x0A	; 10
    23a8:	8d e6       	ldi	r24, 0x6D	; 109
    23aa:	90 e0       	ldi	r25, 0x00	; 0
    23ac:	0e 94 20 22 	call	0x4440	; 0x4440 <LCD_Display_Text>
		LCD_Display_Text(110,(const unsigned char*)Verdana8,70,10);
    23b0:	2a e0       	ldi	r18, 0x0A	; 10
    23b2:	30 e0       	ldi	r19, 0x00	; 0
    23b4:	46 e4       	ldi	r20, 0x46	; 70
    23b6:	50 e0       	ldi	r21, 0x00	; 0
    23b8:	6d e0       	ldi	r22, 0x0D	; 13
    23ba:	7a e0       	ldi	r23, 0x0A	; 10
    23bc:	8e e6       	ldi	r24, 0x6E	; 110
    23be:	90 e0       	ldi	r25, 0x00	; 0
    23c0:	0e 94 20 22 	call	0x4440	; 0x4440 <LCD_Display_Text>
		LCD_Display_Text(111,(const unsigned char*)Verdana8,70,20);
    23c4:	24 e1       	ldi	r18, 0x14	; 20
    23c6:	30 e0       	ldi	r19, 0x00	; 0
    23c8:	46 e4       	ldi	r20, 0x46	; 70
    23ca:	50 e0       	ldi	r21, 0x00	; 0
    23cc:	6d e0       	ldi	r22, 0x0D	; 13
    23ce:	7a e0       	ldi	r23, 0x0A	; 10
    23d0:	8f e6       	ldi	r24, 0x6F	; 111
    23d2:	90 e0       	ldi	r25, 0x00	; 0
    23d4:	0e 94 20 22 	call	0x4440	; 0x4440 <LCD_Display_Text>
		LCD_Display_Text(112,(const unsigned char*)Verdana8,70,30);
    23d8:	2e e1       	ldi	r18, 0x1E	; 30
    23da:	30 e0       	ldi	r19, 0x00	; 0
    23dc:	46 e4       	ldi	r20, 0x46	; 70
    23de:	50 e0       	ldi	r21, 0x00	; 0
    23e0:	6d e0       	ldi	r22, 0x0D	; 13
    23e2:	7a e0       	ldi	r23, 0x0A	; 10
    23e4:	80 e7       	ldi	r24, 0x70	; 112
    23e6:	90 e0       	ldi	r25, 0x00	; 0
    23e8:	0e 94 20 22 	call	0x4440	; 0x4440 <LCD_Display_Text>

		mugui_lcd_puts(itoa(MonopolarThrottle,pBuffer,10),(const unsigned char*)Verdana8,37,0);
    23ec:	80 91 21 08 	lds	r24, 0x0821
    23f0:	90 91 22 08 	lds	r25, 0x0822
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    23f4:	4a e0       	ldi	r20, 0x0A	; 10
    23f6:	6b e5       	ldi	r22, 0x5B	; 91
    23f8:	75 e0       	ldi	r23, 0x05	; 5
    23fa:	0e 94 02 49 	call	0x9204	; 0x9204 <__itoa_ncheck>
    23fe:	20 e0       	ldi	r18, 0x00	; 0
    2400:	30 e0       	ldi	r19, 0x00	; 0
    2402:	45 e2       	ldi	r20, 0x25	; 37
    2404:	50 e0       	ldi	r21, 0x00	; 0
    2406:	6d e0       	ldi	r22, 0x0D	; 13
    2408:	7a e0       	ldi	r23, 0x0A	; 10
    240a:	0e 94 9e 3e 	call	0x7d3c	; 0x7d3c <mugui_lcd_puts>
		mugui_lcd_puts(itoa(RCinputs[AILERON],pBuffer,10),(const unsigned char*)Verdana8,37,10);
    240e:	80 91 25 08 	lds	r24, 0x0825
    2412:	90 91 26 08 	lds	r25, 0x0826
    2416:	4a e0       	ldi	r20, 0x0A	; 10
    2418:	6b e5       	ldi	r22, 0x5B	; 91
    241a:	75 e0       	ldi	r23, 0x05	; 5
    241c:	0e 94 02 49 	call	0x9204	; 0x9204 <__itoa_ncheck>
    2420:	2a e0       	ldi	r18, 0x0A	; 10
    2422:	30 e0       	ldi	r19, 0x00	; 0
    2424:	45 e2       	ldi	r20, 0x25	; 37
    2426:	50 e0       	ldi	r21, 0x00	; 0
    2428:	6d e0       	ldi	r22, 0x0D	; 13
    242a:	7a e0       	ldi	r23, 0x0A	; 10
    242c:	0e 94 9e 3e 	call	0x7d3c	; 0x7d3c <mugui_lcd_puts>
		mugui_lcd_puts(itoa(RCinputs[ELEVATOR],pBuffer,10),(const unsigned char*)Verdana8,37,20);
    2430:	80 91 27 08 	lds	r24, 0x0827
    2434:	90 91 28 08 	lds	r25, 0x0828
    2438:	4a e0       	ldi	r20, 0x0A	; 10
    243a:	6b e5       	ldi	r22, 0x5B	; 91
    243c:	75 e0       	ldi	r23, 0x05	; 5
    243e:	0e 94 02 49 	call	0x9204	; 0x9204 <__itoa_ncheck>
    2442:	24 e1       	ldi	r18, 0x14	; 20
    2444:	30 e0       	ldi	r19, 0x00	; 0
    2446:	45 e2       	ldi	r20, 0x25	; 37
    2448:	50 e0       	ldi	r21, 0x00	; 0
    244a:	6d e0       	ldi	r22, 0x0D	; 13
    244c:	7a e0       	ldi	r23, 0x0A	; 10
    244e:	0e 94 9e 3e 	call	0x7d3c	; 0x7d3c <mugui_lcd_puts>
		mugui_lcd_puts(itoa(RCinputs[RUDDER],pBuffer,10),(const unsigned char*)Verdana8,37,30);
    2452:	80 91 29 08 	lds	r24, 0x0829
    2456:	90 91 2a 08 	lds	r25, 0x082A
    245a:	4a e0       	ldi	r20, 0x0A	; 10
    245c:	6b e5       	ldi	r22, 0x5B	; 91
    245e:	75 e0       	ldi	r23, 0x05	; 5
    2460:	0e 94 02 49 	call	0x9204	; 0x9204 <__itoa_ncheck>
    2464:	2e e1       	ldi	r18, 0x1E	; 30
    2466:	30 e0       	ldi	r19, 0x00	; 0
    2468:	45 e2       	ldi	r20, 0x25	; 37
    246a:	50 e0       	ldi	r21, 0x00	; 0
    246c:	6d e0       	ldi	r22, 0x0D	; 13
    246e:	7a e0       	ldi	r23, 0x0A	; 10
    2470:	0e 94 9e 3e 	call	0x7d3c	; 0x7d3c <mugui_lcd_puts>

		mugui_lcd_puts(itoa(RCinputs[GEAR],pBuffer,10),(const unsigned char*)Verdana8,100,0);
    2474:	80 91 2b 08 	lds	r24, 0x082B
    2478:	90 91 2c 08 	lds	r25, 0x082C
    247c:	4a e0       	ldi	r20, 0x0A	; 10
    247e:	6b e5       	ldi	r22, 0x5B	; 91
    2480:	75 e0       	ldi	r23, 0x05	; 5
    2482:	0e 94 02 49 	call	0x9204	; 0x9204 <__itoa_ncheck>
    2486:	20 e0       	ldi	r18, 0x00	; 0
    2488:	30 e0       	ldi	r19, 0x00	; 0
    248a:	44 e6       	ldi	r20, 0x64	; 100
    248c:	50 e0       	ldi	r21, 0x00	; 0
    248e:	6d e0       	ldi	r22, 0x0D	; 13
    2490:	7a e0       	ldi	r23, 0x0A	; 10
    2492:	0e 94 9e 3e 	call	0x7d3c	; 0x7d3c <mugui_lcd_puts>
		mugui_lcd_puts(itoa(RCinputs[AUX1],pBuffer,10),(const unsigned char*)Verdana8,100,10);
    2496:	80 91 2d 08 	lds	r24, 0x082D
    249a:	90 91 2e 08 	lds	r25, 0x082E
    249e:	4a e0       	ldi	r20, 0x0A	; 10
    24a0:	6b e5       	ldi	r22, 0x5B	; 91
    24a2:	75 e0       	ldi	r23, 0x05	; 5
    24a4:	0e 94 02 49 	call	0x9204	; 0x9204 <__itoa_ncheck>
    24a8:	2a e0       	ldi	r18, 0x0A	; 10
    24aa:	30 e0       	ldi	r19, 0x00	; 0
    24ac:	44 e6       	ldi	r20, 0x64	; 100
    24ae:	50 e0       	ldi	r21, 0x00	; 0
    24b0:	6d e0       	ldi	r22, 0x0D	; 13
    24b2:	7a e0       	ldi	r23, 0x0A	; 10
    24b4:	0e 94 9e 3e 	call	0x7d3c	; 0x7d3c <mugui_lcd_puts>
		mugui_lcd_puts(itoa(RCinputs[AUX2],pBuffer,10),(const unsigned char*)Verdana8,100,20);
    24b8:	80 91 2f 08 	lds	r24, 0x082F
    24bc:	90 91 30 08 	lds	r25, 0x0830
    24c0:	4a e0       	ldi	r20, 0x0A	; 10
    24c2:	6b e5       	ldi	r22, 0x5B	; 91
    24c4:	75 e0       	ldi	r23, 0x05	; 5
    24c6:	0e 94 02 49 	call	0x9204	; 0x9204 <__itoa_ncheck>
    24ca:	24 e1       	ldi	r18, 0x14	; 20
    24cc:	30 e0       	ldi	r19, 0x00	; 0
    24ce:	44 e6       	ldi	r20, 0x64	; 100
    24d0:	50 e0       	ldi	r21, 0x00	; 0
    24d2:	6d e0       	ldi	r22, 0x0D	; 13
    24d4:	7a e0       	ldi	r23, 0x0A	; 10
    24d6:	0e 94 9e 3e 	call	0x7d3c	; 0x7d3c <mugui_lcd_puts>
		mugui_lcd_puts(itoa(RCinputs[AUX3],pBuffer,10),(const unsigned char*)Verdana8,100,30);
    24da:	80 91 31 08 	lds	r24, 0x0831
    24de:	90 91 32 08 	lds	r25, 0x0832
    24e2:	4a e0       	ldi	r20, 0x0A	; 10
    24e4:	6b e5       	ldi	r22, 0x5B	; 91
    24e6:	75 e0       	ldi	r23, 0x05	; 5
    24e8:	0e 94 02 49 	call	0x9204	; 0x9204 <__itoa_ncheck>
    24ec:	2e e1       	ldi	r18, 0x1E	; 30
    24ee:	30 e0       	ldi	r19, 0x00	; 0
    24f0:	44 e6       	ldi	r20, 0x64	; 100
    24f2:	50 e0       	ldi	r21, 0x00	; 0
    24f4:	6d e0       	ldi	r22, 0x0D	; 13
    24f6:	7a e0       	ldi	r23, 0x0A	; 10
    24f8:	0e 94 9e 3e 	call	0x7d3c	; 0x7d3c <mugui_lcd_puts>

		// Print bottom text and markers
		LCD_Display_Text(12, (const unsigned char*)Wingdings, 0, 57); 	// Left
    24fc:	29 e3       	ldi	r18, 0x39	; 57
    24fe:	30 e0       	ldi	r19, 0x00	; 0
    2500:	40 e0       	ldi	r20, 0x00	; 0
    2502:	50 e0       	ldi	r21, 0x00	; 0
    2504:	65 ef       	ldi	r22, 0xF5	; 245
    2506:	70 e0       	ldi	r23, 0x00	; 0
    2508:	8c e0       	ldi	r24, 0x0C	; 12
    250a:	90 e0       	ldi	r25, 0x00	; 0
    250c:	0e 94 20 22 	call	0x4440	; 0x4440 <LCD_Display_Text>
		LCD_Display_Text(60, (const unsigned char*)Verdana8, 110, 55); 	// Cal.
    2510:	27 e3       	ldi	r18, 0x37	; 55
    2512:	30 e0       	ldi	r19, 0x00	; 0
    2514:	4e e6       	ldi	r20, 0x6E	; 110
    2516:	50 e0       	ldi	r21, 0x00	; 0
    2518:	6d e0       	ldi	r22, 0x0D	; 13
    251a:	7a e0       	ldi	r23, 0x0A	; 10
    251c:	8c e3       	ldi	r24, 0x3C	; 60
    251e:	90 e0       	ldi	r25, 0x00	; 0
    2520:	0e 94 20 22 	call	0x4440	; 0x4440 <LCD_Display_Text>

		// Update buffer
		write_buffer(buffer);
    2524:	80 e0       	ldi	r24, 0x00	; 0
    2526:	91 e0       	ldi	r25, 0x01	; 1
    2528:	0e 94 41 20 	call	0x4082	; 0x4082 <write_buffer>
		clear_buffer(buffer);
    252c:	80 e0       	ldi	r24, 0x00	; 0
    252e:	91 e0       	ldi	r25, 0x01	; 1
    2530:	0e 94 73 20 	call	0x40e6	; 0x40e6 <clear_buffer>
    2534:	04 cf       	rjmp	.-504    	; 0x233e <Display_rcinput+0x4>
	}
}
    2536:	08 95       	ret

00002538 <Display_sensors>:
// Code
//************************************************************

void Display_sensors(void)
{
	while(BUTTON1 != 0)
    2538:	1f 9b       	sbis	0x03, 7	; 3
    253a:	ed c0       	rjmp	.+474    	; 0x2716 <Display_sensors+0x1de>
	{
	
		// Normal calibrate button pressed
		if (BUTTON4 == 0)
    253c:	1c 99       	sbic	0x03, 4	; 3
    253e:	1a c0       	rjmp	.+52     	; 0x2574 <Display_sensors+0x3c>
		{
			// Wait until finger off button
			while(BUTTON4 == 0)
    2540:	1c 99       	sbic	0x03, 4	; 3
    2542:	0a c0       	rjmp	.+20     	; 0x2558 <Display_sensors+0x20>
    2544:	2f e3       	ldi	r18, 0x3F	; 63
    2546:	8d e0       	ldi	r24, 0x0D	; 13
    2548:	93 e0       	ldi	r25, 0x03	; 3
    254a:	21 50       	subi	r18, 0x01	; 1
    254c:	80 40       	sbci	r24, 0x00	; 0
    254e:	90 40       	sbci	r25, 0x00	; 0
    2550:	e1 f7       	brne	.-8      	; 0x254a <Display_sensors+0x12>
    2552:	00 c0       	rjmp	.+0      	; 0x2554 <Display_sensors+0x1c>
    2554:	00 00       	nop
    2556:	f4 cf       	rjmp	.-24     	; 0x2540 <Display_sensors+0x8>
    2558:	2f e3       	ldi	r18, 0x3F	; 63
    255a:	82 e4       	ldi	r24, 0x42	; 66
    255c:	9f e0       	ldi	r25, 0x0F	; 15
    255e:	21 50       	subi	r18, 0x01	; 1
    2560:	80 40       	sbci	r24, 0x00	; 0
    2562:	90 40       	sbci	r25, 0x00	; 0
    2564:	e1 f7       	brne	.-8      	; 0x255e <Display_sensors+0x26>
    2566:	00 c0       	rjmp	.+0      	; 0x2568 <Display_sensors+0x30>
    2568:	00 00       	nop
			
			// Pause until steady		
			_delay_ms(250);
			
			// Calibrate sensors
			CalibrateGyrosFast();		
    256a:	0e 94 33 23 	call	0x4666	; 0x4666 <CalibrateGyrosFast>
			CalibrateAcc(NORMAL);
    256e:	80 e0       	ldi	r24, 0x00	; 0
    2570:	0e 94 00 10 	call	0x2000	; 0x2000 <CalibrateAcc>
		}

		// Inverted calibrate button pressed
		if (BUTTON3 == 0)
    2574:	1d 99       	sbic	0x03, 5	; 3
    2576:	0c c0       	rjmp	.+24     	; 0x2590 <Display_sensors+0x58>
    2578:	2f e3       	ldi	r18, 0x3F	; 63
    257a:	82 e4       	ldi	r24, 0x42	; 66
    257c:	9f e0       	ldi	r25, 0x0F	; 15
    257e:	21 50       	subi	r18, 0x01	; 1
    2580:	80 40       	sbci	r24, 0x00	; 0
    2582:	90 40       	sbci	r25, 0x00	; 0
    2584:	e1 f7       	brne	.-8      	; 0x257e <Display_sensors+0x46>
    2586:	00 c0       	rjmp	.+0      	; 0x2588 <Display_sensors+0x50>
    2588:	00 00       	nop
		{
			// Wait until button snap dissipated
			_delay_ms(250);
			CalibrateAcc(REVERSED);
    258a:	81 e0       	ldi	r24, 0x01	; 1
    258c:	0e 94 00 10 	call	0x2000	; 0x2000 <CalibrateAcc>
		}

		ReadGyros();
    2590:	0e 94 06 23 	call	0x460c	; 0x460c <ReadGyros>
		ReadAcc();
    2594:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <ReadAcc>

		LCD_Display_Text(26,(const unsigned char*)Verdana8,37,0); 	// Gyro
    2598:	20 e0       	ldi	r18, 0x00	; 0
    259a:	30 e0       	ldi	r19, 0x00	; 0
    259c:	45 e2       	ldi	r20, 0x25	; 37
    259e:	50 e0       	ldi	r21, 0x00	; 0
    25a0:	6d e0       	ldi	r22, 0x0D	; 13
    25a2:	7a e0       	ldi	r23, 0x0A	; 10
    25a4:	8a e1       	ldi	r24, 0x1A	; 26
    25a6:	90 e0       	ldi	r25, 0x00	; 0
    25a8:	0e 94 20 22 	call	0x4440	; 0x4440 <LCD_Display_Text>
		LCD_Display_Text(30,(const unsigned char*)Verdana8,77,0); 	// Acc
    25ac:	20 e0       	ldi	r18, 0x00	; 0
    25ae:	30 e0       	ldi	r19, 0x00	; 0
    25b0:	4d e4       	ldi	r20, 0x4D	; 77
    25b2:	50 e0       	ldi	r21, 0x00	; 0
    25b4:	6d e0       	ldi	r22, 0x0D	; 13
    25b6:	7a e0       	ldi	r23, 0x0A	; 10
    25b8:	8e e1       	ldi	r24, 0x1E	; 30
    25ba:	90 e0       	ldi	r25, 0x00	; 0
    25bc:	0e 94 20 22 	call	0x4440	; 0x4440 <LCD_Display_Text>
		//
		LCD_Display_Text(27,(const unsigned char*)Verdana8,5,13);	// Roll
    25c0:	2d e0       	ldi	r18, 0x0D	; 13
    25c2:	30 e0       	ldi	r19, 0x00	; 0
    25c4:	45 e0       	ldi	r20, 0x05	; 5
    25c6:	50 e0       	ldi	r21, 0x00	; 0
    25c8:	6d e0       	ldi	r22, 0x0D	; 13
    25ca:	7a e0       	ldi	r23, 0x0A	; 10
    25cc:	8b e1       	ldi	r24, 0x1B	; 27
    25ce:	90 e0       	ldi	r25, 0x00	; 0
    25d0:	0e 94 20 22 	call	0x4440	; 0x4440 <LCD_Display_Text>
		LCD_Display_Text(28,(const unsigned char*)Verdana8,5,23);	// Pitch
    25d4:	27 e1       	ldi	r18, 0x17	; 23
    25d6:	30 e0       	ldi	r19, 0x00	; 0
    25d8:	45 e0       	ldi	r20, 0x05	; 5
    25da:	50 e0       	ldi	r21, 0x00	; 0
    25dc:	6d e0       	ldi	r22, 0x0D	; 13
    25de:	7a e0       	ldi	r23, 0x0A	; 10
    25e0:	8c e1       	ldi	r24, 0x1C	; 28
    25e2:	90 e0       	ldi	r25, 0x00	; 0
    25e4:	0e 94 20 22 	call	0x4440	; 0x4440 <LCD_Display_Text>
		LCD_Display_Text(29,(const unsigned char*)Verdana8,5,33);	// Yaw/Z
    25e8:	21 e2       	ldi	r18, 0x21	; 33
    25ea:	30 e0       	ldi	r19, 0x00	; 0
    25ec:	45 e0       	ldi	r20, 0x05	; 5
    25ee:	50 e0       	ldi	r21, 0x00	; 0
    25f0:	6d e0       	ldi	r22, 0x0D	; 13
    25f2:	7a e0       	ldi	r23, 0x0A	; 10
    25f4:	8d e1       	ldi	r24, 0x1D	; 29
    25f6:	90 e0       	ldi	r25, 0x00	; 0
    25f8:	0e 94 20 22 	call	0x4440	; 0x4440 <LCD_Display_Text>
    25fc:	4a e0       	ldi	r20, 0x0A	; 10
    25fe:	6b e5       	ldi	r22, 0x5B	; 91
    2600:	75 e0       	ldi	r23, 0x05	; 5
    2602:	80 91 6b 05 	lds	r24, 0x056B
    2606:	90 91 6c 05 	lds	r25, 0x056C
    260a:	0e 94 02 49 	call	0x9204	; 0x9204 <__itoa_ncheck>
		//
		mugui_lcd_puts(itoa(gyroADC[ROLL],pBuffer,10),(const unsigned char*)Verdana8,40,13);
    260e:	2d e0       	ldi	r18, 0x0D	; 13
    2610:	30 e0       	ldi	r19, 0x00	; 0
    2612:	48 e2       	ldi	r20, 0x28	; 40
    2614:	50 e0       	ldi	r21, 0x00	; 0
    2616:	6d e0       	ldi	r22, 0x0D	; 13
    2618:	7a e0       	ldi	r23, 0x0A	; 10
    261a:	0e 94 9e 3e 	call	0x7d3c	; 0x7d3c <mugui_lcd_puts>
    261e:	4a e0       	ldi	r20, 0x0A	; 10
    2620:	6b e5       	ldi	r22, 0x5B	; 91
    2622:	75 e0       	ldi	r23, 0x05	; 5
    2624:	80 91 6d 05 	lds	r24, 0x056D
    2628:	90 91 6e 05 	lds	r25, 0x056E
    262c:	0e 94 02 49 	call	0x9204	; 0x9204 <__itoa_ncheck>
		mugui_lcd_puts(itoa(gyroADC[PITCH],pBuffer,10),(const unsigned char*)Verdana8,40,23);
    2630:	27 e1       	ldi	r18, 0x17	; 23
    2632:	30 e0       	ldi	r19, 0x00	; 0
    2634:	48 e2       	ldi	r20, 0x28	; 40
    2636:	50 e0       	ldi	r21, 0x00	; 0
    2638:	6d e0       	ldi	r22, 0x0D	; 13
    263a:	7a e0       	ldi	r23, 0x0A	; 10
    263c:	0e 94 9e 3e 	call	0x7d3c	; 0x7d3c <mugui_lcd_puts>
    2640:	4a e0       	ldi	r20, 0x0A	; 10
    2642:	6b e5       	ldi	r22, 0x5B	; 91
    2644:	75 e0       	ldi	r23, 0x05	; 5
    2646:	80 91 6f 05 	lds	r24, 0x056F
    264a:	90 91 70 05 	lds	r25, 0x0570
    264e:	0e 94 02 49 	call	0x9204	; 0x9204 <__itoa_ncheck>
		mugui_lcd_puts(itoa(gyroADC[YAW],pBuffer,10),(const unsigned char*)Verdana8,40,33);
    2652:	21 e2       	ldi	r18, 0x21	; 33
    2654:	30 e0       	ldi	r19, 0x00	; 0
    2656:	48 e2       	ldi	r20, 0x28	; 40
    2658:	50 e0       	ldi	r21, 0x00	; 0
    265a:	6d e0       	ldi	r22, 0x0D	; 13
    265c:	7a e0       	ldi	r23, 0x0A	; 10
    265e:	0e 94 9e 3e 	call	0x7d3c	; 0x7d3c <mugui_lcd_puts>
    2662:	4a e0       	ldi	r20, 0x0A	; 10
    2664:	6b e5       	ldi	r22, 0x5B	; 91
    2666:	75 e0       	ldi	r23, 0x05	; 5
    2668:	80 91 3c 05 	lds	r24, 0x053C
    266c:	90 91 3d 05 	lds	r25, 0x053D
    2670:	0e 94 02 49 	call	0x9204	; 0x9204 <__itoa_ncheck>
		mugui_lcd_puts(itoa(accADC[ROLL],pBuffer,10),(const unsigned char*)Verdana8,80,13);
    2674:	2d e0       	ldi	r18, 0x0D	; 13
    2676:	30 e0       	ldi	r19, 0x00	; 0
    2678:	40 e5       	ldi	r20, 0x50	; 80
    267a:	50 e0       	ldi	r21, 0x00	; 0
    267c:	6d e0       	ldi	r22, 0x0D	; 13
    267e:	7a e0       	ldi	r23, 0x0A	; 10
    2680:	0e 94 9e 3e 	call	0x7d3c	; 0x7d3c <mugui_lcd_puts>
    2684:	4a e0       	ldi	r20, 0x0A	; 10
    2686:	6b e5       	ldi	r22, 0x5B	; 91
    2688:	75 e0       	ldi	r23, 0x05	; 5
    268a:	80 91 3e 05 	lds	r24, 0x053E
    268e:	90 91 3f 05 	lds	r25, 0x053F
    2692:	0e 94 02 49 	call	0x9204	; 0x9204 <__itoa_ncheck>
		mugui_lcd_puts(itoa(accADC[PITCH],pBuffer,10),(const unsigned char*)Verdana8,80,23);
    2696:	27 e1       	ldi	r18, 0x17	; 23
    2698:	30 e0       	ldi	r19, 0x00	; 0
    269a:	40 e5       	ldi	r20, 0x50	; 80
    269c:	50 e0       	ldi	r21, 0x00	; 0
    269e:	6d e0       	ldi	r22, 0x0D	; 13
    26a0:	7a e0       	ldi	r23, 0x0A	; 10
    26a2:	0e 94 9e 3e 	call	0x7d3c	; 0x7d3c <mugui_lcd_puts>
    26a6:	4a e0       	ldi	r20, 0x0A	; 10
    26a8:	6b e5       	ldi	r22, 0x5B	; 91
    26aa:	75 e0       	ldi	r23, 0x05	; 5
    26ac:	80 91 40 05 	lds	r24, 0x0540
    26b0:	90 91 41 05 	lds	r25, 0x0541
    26b4:	0e 94 02 49 	call	0x9204	; 0x9204 <__itoa_ncheck>
		mugui_lcd_puts(itoa(accADC[YAW],pBuffer,10),(const unsigned char*)Verdana8,80,33);
    26b8:	21 e2       	ldi	r18, 0x21	; 33
    26ba:	30 e0       	ldi	r19, 0x00	; 0
    26bc:	40 e5       	ldi	r20, 0x50	; 80
    26be:	50 e0       	ldi	r21, 0x00	; 0
    26c0:	6d e0       	ldi	r22, 0x0D	; 13
    26c2:	7a e0       	ldi	r23, 0x0A	; 10
    26c4:	0e 94 9e 3e 	call	0x7d3c	; 0x7d3c <mugui_lcd_puts>

		// Print bottom markers
		LCD_Display_Text(12, (const unsigned char*)Wingdings, 0, 57); 	// Left
    26c8:	29 e3       	ldi	r18, 0x39	; 57
    26ca:	30 e0       	ldi	r19, 0x00	; 0
    26cc:	40 e0       	ldi	r20, 0x00	; 0
    26ce:	50 e0       	ldi	r21, 0x00	; 0
    26d0:	65 ef       	ldi	r22, 0xF5	; 245
    26d2:	70 e0       	ldi	r23, 0x00	; 0
    26d4:	8c e0       	ldi	r24, 0x0C	; 12
    26d6:	90 e0       	ldi	r25, 0x00	; 0
    26d8:	0e 94 20 22 	call	0x4440	; 0x4440 <LCD_Display_Text>
		LCD_Display_Text(60, (const unsigned char*)Verdana8, 108, 55); 	// Calibrate
    26dc:	27 e3       	ldi	r18, 0x37	; 55
    26de:	30 e0       	ldi	r19, 0x00	; 0
    26e0:	4c e6       	ldi	r20, 0x6C	; 108
    26e2:	50 e0       	ldi	r21, 0x00	; 0
    26e4:	6d e0       	ldi	r22, 0x0D	; 13
    26e6:	7a e0       	ldi	r23, 0x0A	; 10
    26e8:	8c e3       	ldi	r24, 0x3C	; 60
    26ea:	90 e0       	ldi	r25, 0x00	; 0
    26ec:	0e 94 20 22 	call	0x4440	; 0x4440 <LCD_Display_Text>
		LCD_Display_Text(25, (const unsigned char*)Verdana8, 75, 55); 	// Inverted Calibrate		
    26f0:	27 e3       	ldi	r18, 0x37	; 55
    26f2:	30 e0       	ldi	r19, 0x00	; 0
    26f4:	4b e4       	ldi	r20, 0x4B	; 75
    26f6:	50 e0       	ldi	r21, 0x00	; 0
    26f8:	6d e0       	ldi	r22, 0x0D	; 13
    26fa:	7a e0       	ldi	r23, 0x0A	; 10
    26fc:	89 e1       	ldi	r24, 0x19	; 25
    26fe:	90 e0       	ldi	r25, 0x00	; 0
    2700:	0e 94 20 22 	call	0x4440	; 0x4440 <LCD_Display_Text>

		// Update buffer
		write_buffer(buffer);
    2704:	80 e0       	ldi	r24, 0x00	; 0
    2706:	91 e0       	ldi	r25, 0x01	; 1
    2708:	0e 94 41 20 	call	0x4082	; 0x4082 <write_buffer>
		clear_buffer(buffer);
    270c:	80 e0       	ldi	r24, 0x00	; 0
    270e:	91 e0       	ldi	r25, 0x01	; 1
    2710:	0e 94 73 20 	call	0x40e6	; 0x40e6 <clear_buffer>
    2714:	11 cf       	rjmp	.-478    	; 0x2538 <Display_sensors>
	}
}
    2716:	08 95       	ret

00002718 <Display_status>:
//************************************************************
// Code
//************************************************************

void Display_status(void)
{
    2718:	bf 92       	push	r11
    271a:	cf 92       	push	r12
    271c:	df 92       	push	r13
    271e:	ef 92       	push	r14
    2720:	ff 92       	push	r15
    2722:	0f 93       	push	r16
    2724:	1f 93       	push	r17
    2726:	cf 93       	push	r28
    2728:	df 93       	push	r29
    272a:	00 d0       	rcall	.+0      	; 0x272c <Display_status+0x14>
    272c:	00 d0       	rcall	.+0      	; 0x272e <Display_status+0x16>
    272e:	cd b7       	in	r28, 0x3d	; 61
    2730:	de b7       	in	r29, 0x3e	; 62
	int16_t temp;
	uint16_t vbat_temp; 
	int8_t	pos1, pos2, pos3;
	mugui_size16_t size;

	clear_buffer(buffer);
    2732:	80 e0       	ldi	r24, 0x00	; 0
    2734:	91 e0       	ldi	r25, 0x01	; 1
    2736:	0e 94 73 20 	call	0x40e6	; 0x40e6 <clear_buffer>

	// Display text
	LCD_Display_Text(264,(const unsigned char*)Verdana8,0,0); 	// Version text
    273a:	20 e0       	ldi	r18, 0x00	; 0
    273c:	30 e0       	ldi	r19, 0x00	; 0
    273e:	40 e0       	ldi	r20, 0x00	; 0
    2740:	50 e0       	ldi	r21, 0x00	; 0
    2742:	6d e0       	ldi	r22, 0x0D	; 13
    2744:	7a e0       	ldi	r23, 0x0A	; 10
    2746:	88 e0       	ldi	r24, 0x08	; 8
    2748:	91 e0       	ldi	r25, 0x01	; 1
    274a:	0e 94 20 22 	call	0x4440	; 0x4440 <LCD_Display_Text>
	LCD_Display_Text(266,(const unsigned char*)Verdana8,0,12); 	// RX sync
    274e:	2c e0       	ldi	r18, 0x0C	; 12
    2750:	30 e0       	ldi	r19, 0x00	; 0
    2752:	40 e0       	ldi	r20, 0x00	; 0
    2754:	50 e0       	ldi	r21, 0x00	; 0
    2756:	6d e0       	ldi	r22, 0x0D	; 13
    2758:	7a e0       	ldi	r23, 0x0A	; 10
    275a:	8a e0       	ldi	r24, 0x0A	; 10
    275c:	91 e0       	ldi	r25, 0x01	; 1
    275e:	0e 94 20 22 	call	0x4440	; 0x4440 <LCD_Display_Text>
	LCD_Display_Text(267,(const unsigned char*)Verdana8,0,24); 	// Profile
    2762:	28 e1       	ldi	r18, 0x18	; 24
    2764:	30 e0       	ldi	r19, 0x00	; 0
    2766:	40 e0       	ldi	r20, 0x00	; 0
    2768:	50 e0       	ldi	r21, 0x00	; 0
    276a:	6d e0       	ldi	r22, 0x0D	; 13
    276c:	7a e0       	ldi	r23, 0x0A	; 10
    276e:	8b e0       	ldi	r24, 0x0B	; 11
    2770:	91 e0       	ldi	r25, 0x01	; 1
    2772:	0e 94 20 22 	call	0x4440	; 0x4440 <LCD_Display_Text>
	LCD_Display_Text(23,(const unsigned char*)Verdana8,88,24); 	// Pos
    2776:	28 e1       	ldi	r18, 0x18	; 24
    2778:	30 e0       	ldi	r19, 0x00	; 0
    277a:	48 e5       	ldi	r20, 0x58	; 88
    277c:	50 e0       	ldi	r21, 0x00	; 0
    277e:	6d e0       	ldi	r22, 0x0D	; 13
    2780:	7a e0       	ldi	r23, 0x0A	; 10
    2782:	87 e1       	ldi	r24, 0x17	; 23
    2784:	90 e0       	ldi	r25, 0x00	; 0
    2786:	0e 94 20 22 	call	0x4440	; 0x4440 <LCD_Display_Text>
	#ifdef QUADCOPTERX
	LCD_Display_Text(274,(const unsigned char*)Verdana8,93,0); // Quad X
	#endif
	
	// Display menu and markers
	LCD_Display_Text(9, (const unsigned char*)Wingdings, 0, 59);// Down
    278a:	2b e3       	ldi	r18, 0x3B	; 59
    278c:	30 e0       	ldi	r19, 0x00	; 0
    278e:	40 e0       	ldi	r20, 0x00	; 0
    2790:	50 e0       	ldi	r21, 0x00	; 0
    2792:	65 ef       	ldi	r22, 0xF5	; 245
    2794:	70 e0       	ldi	r23, 0x00	; 0
    2796:	89 e0       	ldi	r24, 0x09	; 9
    2798:	90 e0       	ldi	r25, 0x00	; 0
    279a:	0e 94 20 22 	call	0x4440	; 0x4440 <LCD_Display_Text>
	LCD_Display_Text(14,(const unsigned char*)Verdana8,10,55);	// Menu
    279e:	27 e3       	ldi	r18, 0x37	; 55
    27a0:	30 e0       	ldi	r19, 0x00	; 0
    27a2:	4a e0       	ldi	r20, 0x0A	; 10
    27a4:	50 e0       	ldi	r21, 0x00	; 0
    27a6:	6d e0       	ldi	r22, 0x0D	; 13
    27a8:	7a e0       	ldi	r23, 0x0A	; 10
    27aa:	8e e0       	ldi	r24, 0x0E	; 14
    27ac:	90 e0       	ldi	r25, 0x00	; 0
    27ae:	0e 94 20 22 	call	0x4440	; 0x4440 <LCD_Display_Text>

	// Display values
	print_menu_text(0, 1, (62 + Config.RxMode), 45, 12); // Rx mode
    27b2:	40 91 d2 05 	lds	r20, 0x05D2
    27b6:	55 27       	eor	r21, r21
    27b8:	47 fd       	sbrc	r20, 7
    27ba:	50 95       	com	r21
    27bc:	42 5c       	subi	r20, 0xC2	; 194
    27be:	5f 4f       	sbci	r21, 0xFF	; 255
    27c0:	0c e0       	ldi	r16, 0x0C	; 12
    27c2:	2d e2       	ldi	r18, 0x2D	; 45
    27c4:	61 e0       	ldi	r22, 0x01	; 1
    27c6:	80 e0       	ldi	r24, 0x00	; 0
    27c8:	90 e0       	ldi	r25, 0x00	; 0
    27ca:	0e 94 e7 2e 	call	0x5dce	; 0x5dce <print_menu_text>
    27ce:	4a e0       	ldi	r20, 0x0A	; 10
    27d0:	6b e5       	ldi	r22, 0x5B	; 91
    27d2:	75 e0       	ldi	r23, 0x05	; 5
    27d4:	80 91 1f 05 	lds	r24, 0x051F
    27d8:	90 91 20 05 	lds	r25, 0x0520
    27dc:	0e 94 02 49 	call	0x9204	; 0x9204 <__itoa_ncheck>
	mugui_lcd_puts(itoa(transition,pBuffer,10),(const unsigned char*)Verdana8,110,24); // Raw transition value
    27e0:	28 e1       	ldi	r18, 0x18	; 24
    27e2:	30 e0       	ldi	r19, 0x00	; 0
    27e4:	4e e6       	ldi	r20, 0x6E	; 110
    27e6:	50 e0       	ldi	r21, 0x00	; 0
    27e8:	6d e0       	ldi	r22, 0x0D	; 13
    27ea:	7a e0       	ldi	r23, 0x0A	; 10
    27ec:	0e 94 9e 3e 	call	0x7d3c	; 0x7d3c <mugui_lcd_puts>

	if (Config.RxMode == PWM)
    27f0:	80 91 d2 05 	lds	r24, 0x05D2
    27f4:	81 30       	cpi	r24, 0x01	; 1
    27f6:	d9 f4       	brne	.+54     	; 0x282e <Display_status+0x116>
	{
		LCD_Display_Text(24,(const unsigned char*)Verdana8,77,12); // Interrupt counter text 
    27f8:	2c e0       	ldi	r18, 0x0C	; 12
    27fa:	30 e0       	ldi	r19, 0x00	; 0
    27fc:	4d e4       	ldi	r20, 0x4D	; 77
    27fe:	50 e0       	ldi	r21, 0x00	; 0
    2800:	6d e0       	ldi	r22, 0x0D	; 13
    2802:	7a e0       	ldi	r23, 0x0A	; 10
    2804:	88 e1       	ldi	r24, 0x18	; 24
    2806:	90 e0       	ldi	r25, 0x00	; 0
    2808:	0e 94 20 22 	call	0x4440	; 0x4440 <LCD_Display_Text>
		mugui_lcd_puts(itoa(InterruptCount,pBuffer,10),(const unsigned char*)Verdana8,110,12); // Interrupt counter
    280c:	80 91 1a 05 	lds	r24, 0x051A
    2810:	90 91 1b 05 	lds	r25, 0x051B
    2814:	4a e0       	ldi	r20, 0x0A	; 10
    2816:	6b e5       	ldi	r22, 0x5B	; 91
    2818:	75 e0       	ldi	r23, 0x05	; 5
    281a:	0e 94 02 49 	call	0x9204	; 0x9204 <__itoa_ncheck>
    281e:	2c e0       	ldi	r18, 0x0C	; 12
    2820:	30 e0       	ldi	r19, 0x00	; 0
    2822:	4e e6       	ldi	r20, 0x6E	; 110
    2824:	50 e0       	ldi	r21, 0x00	; 0
    2826:	6d e0       	ldi	r22, 0x0D	; 13
    2828:	7a e0       	ldi	r23, 0x0A	; 10
    282a:	0e 94 9e 3e 	call	0x7d3c	; 0x7d3c <mugui_lcd_puts>
	}

	// Display transition point
	if (transition <= 0)
    282e:	80 91 1f 05 	lds	r24, 0x051F
    2832:	90 91 20 05 	lds	r25, 0x0520
    2836:	18 16       	cp	r1, r24
    2838:	19 06       	cpc	r1, r25
    283a:	4c f0       	brlt	.+18     	; 0x284e <Display_status+0x136>
	{
		LCD_Display_Text(48,(const unsigned char*)Verdana8,45,24);
    283c:	28 e1       	ldi	r18, 0x18	; 24
    283e:	30 e0       	ldi	r19, 0x00	; 0
    2840:	4d e2       	ldi	r20, 0x2D	; 45
    2842:	50 e0       	ldi	r21, 0x00	; 0
    2844:	6d e0       	ldi	r22, 0x0D	; 13
    2846:	7a e0       	ldi	r23, 0x0A	; 10
    2848:	80 e3       	ldi	r24, 0x30	; 48
    284a:	90 e0       	ldi	r25, 0x00	; 0
    284c:	31 c0       	rjmp	.+98     	; 0x28b0 <Display_status+0x198>
	}
	else if (transition >= 100)
    284e:	84 36       	cpi	r24, 0x64	; 100
    2850:	91 05       	cpc	r25, r1
    2852:	4c f0       	brlt	.+18     	; 0x2866 <Display_status+0x14e>
	{
		LCD_Display_Text(50,(const unsigned char*)Verdana8,45,24);
    2854:	28 e1       	ldi	r18, 0x18	; 24
    2856:	30 e0       	ldi	r19, 0x00	; 0
    2858:	4d e2       	ldi	r20, 0x2D	; 45
    285a:	50 e0       	ldi	r21, 0x00	; 0
    285c:	6d e0       	ldi	r22, 0x0D	; 13
    285e:	7a e0       	ldi	r23, 0x0A	; 10
    2860:	82 e3       	ldi	r24, 0x32	; 50
    2862:	90 e0       	ldi	r25, 0x00	; 0
    2864:	25 c0       	rjmp	.+74     	; 0x28b0 <Display_status+0x198>
	}
	else if (transition == Config.Transition_P1n)
    2866:	20 91 d8 05 	lds	r18, 0x05D8
    286a:	33 27       	eor	r19, r19
    286c:	27 fd       	sbrc	r18, 7
    286e:	30 95       	com	r19
    2870:	82 17       	cp	r24, r18
    2872:	93 07       	cpc	r25, r19
    2874:	49 f4       	brne	.+18     	; 0x2888 <Display_status+0x170>
	{
		LCD_Display_Text(49,(const unsigned char*)Verdana8,45,24);
    2876:	28 e1       	ldi	r18, 0x18	; 24
    2878:	30 e0       	ldi	r19, 0x00	; 0
    287a:	4d e2       	ldi	r20, 0x2D	; 45
    287c:	50 e0       	ldi	r21, 0x00	; 0
    287e:	6d e0       	ldi	r22, 0x0D	; 13
    2880:	7a e0       	ldi	r23, 0x0A	; 10
    2882:	81 e3       	ldi	r24, 0x31	; 49
    2884:	90 e0       	ldi	r25, 0x00	; 0
    2886:	14 c0       	rjmp	.+40     	; 0x28b0 <Display_status+0x198>
	}
	else if (transition < Config.Transition_P1n)
    2888:	82 17       	cp	r24, r18
    288a:	93 07       	cpc	r25, r19
    288c:	4c f4       	brge	.+18     	; 0x28a0 <Display_status+0x188>
	{
		LCD_Display_Text(51,(const unsigned char*)Verdana8,45,24);
    288e:	28 e1       	ldi	r18, 0x18	; 24
    2890:	30 e0       	ldi	r19, 0x00	; 0
    2892:	4d e2       	ldi	r20, 0x2D	; 45
    2894:	50 e0       	ldi	r21, 0x00	; 0
    2896:	6d e0       	ldi	r22, 0x0D	; 13
    2898:	7a e0       	ldi	r23, 0x0A	; 10
    289a:	83 e3       	ldi	r24, 0x33	; 51
    289c:	90 e0       	ldi	r25, 0x00	; 0
    289e:	08 c0       	rjmp	.+16     	; 0x28b0 <Display_status+0x198>
	}
	else
	{
		LCD_Display_Text(52,(const unsigned char*)Verdana8,45,24);
    28a0:	28 e1       	ldi	r18, 0x18	; 24
    28a2:	30 e0       	ldi	r19, 0x00	; 0
    28a4:	4d e2       	ldi	r20, 0x2D	; 45
    28a6:	50 e0       	ldi	r21, 0x00	; 0
    28a8:	6d e0       	ldi	r22, 0x0D	; 13
    28aa:	7a e0       	ldi	r23, 0x0A	; 10
    28ac:	84 e3       	ldi	r24, 0x34	; 52
    28ae:	90 e0       	ldi	r25, 0x00	; 0
    28b0:	0e 94 20 22 	call	0x4440	; 0x4440 <LCD_Display_Text>
	}


	// Don't display battery text if there are error messages
	if (General_error == 0)
    28b4:	80 91 1e 05 	lds	r24, 0x051E
    28b8:	81 11       	cpse	r24, r1
    28ba:	85 c0       	rjmp	.+266    	; 0x29c6 <Display_status+0x2ae>
	{
		// Display voltage
		uint8_t x_loc = 45;		// X location of voltage display
		uint8_t y_loc = 36;		// Y location of voltage display

		LCD_Display_Text(133,(const unsigned char*)Verdana8,0,36); 	// Battery
    28bc:	24 e2       	ldi	r18, 0x24	; 36
    28be:	30 e0       	ldi	r19, 0x00	; 0
    28c0:	40 e0       	ldi	r20, 0x00	; 0
    28c2:	50 e0       	ldi	r21, 0x00	; 0
    28c4:	6d e0       	ldi	r22, 0x0D	; 13
    28c6:	7a e0       	ldi	r23, 0x0A	; 10
    28c8:	85 e8       	ldi	r24, 0x85	; 133
    28ca:	90 e0       	ldi	r25, 0x00	; 0
    28cc:	0e 94 20 22 	call	0x4440	; 0x4440 <LCD_Display_Text>

		vbat_temp = GetVbat();
    28d0:	0e 94 0d 46 	call	0x8c1a	; 0x8c1a <GetVbat>
    28d4:	6c 01       	movw	r12, r24
		temp = vbat_temp/100;	// Display whole decimal part first
    28d6:	64 e6       	ldi	r22, 0x64	; 100
    28d8:	70 e0       	ldi	r23, 0x00	; 0
    28da:	0e 94 47 48 	call	0x908e	; 0x908e <__udivmodhi4>
    28de:	8b 01       	movw	r16, r22
    28e0:	4a e0       	ldi	r20, 0x0A	; 10
    28e2:	6b e5       	ldi	r22, 0x5B	; 91
    28e4:	75 e0       	ldi	r23, 0x05	; 5
    28e6:	c8 01       	movw	r24, r16
    28e8:	0e 94 02 49 	call	0x9204	; 0x9204 <__itoa_ncheck>
		mugui_text_sizestring(itoa(temp,pBuffer,10), (const unsigned char*)Verdana8, &size);
    28ec:	ae 01       	movw	r20, r28
    28ee:	4f 5f       	subi	r20, 0xFF	; 255
    28f0:	5f 4f       	sbci	r21, 0xFF	; 255
    28f2:	6d e0       	ldi	r22, 0x0D	; 13
    28f4:	7a e0       	ldi	r23, 0x0A	; 10
    28f6:	0e 94 4f 3d 	call	0x7a9e	; 0x7a9e <mugui_text_sizestring>
    28fa:	4a e0       	ldi	r20, 0x0A	; 10
    28fc:	6b e5       	ldi	r22, 0x5B	; 91
    28fe:	75 e0       	ldi	r23, 0x05	; 5
    2900:	c8 01       	movw	r24, r16
    2902:	0e 94 02 49 	call	0x9204	; 0x9204 <__itoa_ncheck>
		mugui_lcd_puts(itoa(temp,pBuffer,10),(const unsigned char*)Verdana8,x_loc,y_loc);
    2906:	24 e2       	ldi	r18, 0x24	; 36
    2908:	30 e0       	ldi	r19, 0x00	; 0
    290a:	4d e2       	ldi	r20, 0x2D	; 45
    290c:	50 e0       	ldi	r21, 0x00	; 0
    290e:	6d e0       	ldi	r22, 0x0D	; 13
    2910:	7a e0       	ldi	r23, 0x0A	; 10
    2912:	0e 94 9e 3e 	call	0x7d3c	; 0x7d3c <mugui_lcd_puts>
		pos1 = size.x;

		vbat_temp = vbat_temp - (temp * 100); // Now display the parts to the right of the decimal point
    2916:	2c e9       	ldi	r18, 0x9C	; 156
    2918:	20 03       	mulsu	r18, r16
    291a:	70 01       	movw	r14, r0
    291c:	21 9f       	mul	r18, r17
    291e:	f0 0c       	add	r15, r0
    2920:	11 24       	eor	r1, r1
    2922:	ec 0c       	add	r14, r12
    2924:	fd 1c       	adc	r15, r13

		LCD_Display_Text(268,(const unsigned char*)Verdana8,(x_loc + pos1),y_loc);
    2926:	09 81       	ldd	r16, Y+1	; 0x01
    2928:	11 27       	eor	r17, r17
    292a:	07 fd       	sbrc	r16, 7
    292c:	10 95       	com	r17
    292e:	03 5d       	subi	r16, 0xD3	; 211
    2930:	1f 4f       	sbci	r17, 0xFF	; 255
    2932:	24 e2       	ldi	r18, 0x24	; 36
    2934:	30 e0       	ldi	r19, 0x00	; 0
    2936:	a8 01       	movw	r20, r16
    2938:	6d e0       	ldi	r22, 0x0D	; 13
    293a:	7a e0       	ldi	r23, 0x0A	; 10
    293c:	8c e0       	ldi	r24, 0x0C	; 12
    293e:	91 e0       	ldi	r25, 0x01	; 1
    2940:	0e 94 20 22 	call	0x4440	; 0x4440 <LCD_Display_Text>
		mugui_text_sizestring(".", (const unsigned char*)Verdana8, &size);
    2944:	ae 01       	movw	r20, r28
    2946:	4f 5f       	subi	r20, 0xFF	; 255
    2948:	5f 4f       	sbci	r21, 0xFF	; 255
    294a:	6d e0       	ldi	r22, 0x0D	; 13
    294c:	7a e0       	ldi	r23, 0x0A	; 10
    294e:	88 e0       	ldi	r24, 0x08	; 8
    2950:	95 e0       	ldi	r25, 0x05	; 5
    2952:	0e 94 4f 3d 	call	0x7a9e	; 0x7a9e <mugui_text_sizestring>
		pos3 = size.x;
    2956:	c9 80       	ldd	r12, Y+1	; 0x01
		mugui_text_sizestring("0", (const unsigned char*)Verdana8, &size);
    2958:	ae 01       	movw	r20, r28
    295a:	4f 5f       	subi	r20, 0xFF	; 255
    295c:	5f 4f       	sbci	r21, 0xFF	; 255
    295e:	6d e0       	ldi	r22, 0x0D	; 13
    2960:	7a e0       	ldi	r23, 0x0A	; 10
    2962:	8a e0       	ldi	r24, 0x0A	; 10
    2964:	95 e0       	ldi	r25, 0x05	; 5
    2966:	0e 94 4f 3d 	call	0x7a9e	; 0x7a9e <mugui_text_sizestring>
		pos2 = size.x;
    296a:	b9 80       	ldd	r11, Y+1	; 0x01
    296c:	dd 24       	eor	r13, r13
    296e:	c7 fc       	sbrc	r12, 7
    2970:	d0 94       	com	r13

		if (vbat_temp >= 10)
    2972:	8a e0       	ldi	r24, 0x0A	; 10
    2974:	e8 16       	cp	r14, r24
    2976:	f1 04       	cpc	r15, r1
    2978:	40 f0       	brcs	.+16     	; 0x298a <Display_status+0x272>
    297a:	4a e0       	ldi	r20, 0x0A	; 10
    297c:	6b e5       	ldi	r22, 0x5B	; 91
    297e:	75 e0       	ldi	r23, 0x05	; 5
    2980:	c7 01       	movw	r24, r14
    2982:	0e 94 02 49 	call	0x9204	; 0x9204 <__itoa_ncheck>
		{
			mugui_lcd_puts(itoa(vbat_temp,pBuffer,10),(const unsigned char*)Verdana8,(x_loc + pos1 + pos3),y_loc);
    2986:	a8 01       	movw	r20, r16
    2988:	16 c0       	rjmp	.+44     	; 0x29b6 <Display_status+0x29e>
		}
		else
		{
			LCD_Display_Text(269,(const unsigned char*)Verdana8,(x_loc + pos1 + pos3),y_loc);
    298a:	a8 01       	movw	r20, r16
    298c:	4c 0d       	add	r20, r12
    298e:	5d 1d       	adc	r21, r13
    2990:	24 e2       	ldi	r18, 0x24	; 36
    2992:	30 e0       	ldi	r19, 0x00	; 0
    2994:	6d e0       	ldi	r22, 0x0D	; 13
    2996:	7a e0       	ldi	r23, 0x0A	; 10
    2998:	8d e0       	ldi	r24, 0x0D	; 13
    299a:	91 e0       	ldi	r25, 0x01	; 1
    299c:	0e 94 20 22 	call	0x4440	; 0x4440 <LCD_Display_Text>
    29a0:	4a e0       	ldi	r20, 0x0A	; 10
    29a2:	6b e5       	ldi	r22, 0x5B	; 91
    29a4:	75 e0       	ldi	r23, 0x05	; 5
    29a6:	c7 01       	movw	r24, r14
    29a8:	0e 94 02 49 	call	0x9204	; 0x9204 <__itoa_ncheck>
			mugui_lcd_puts(itoa(vbat_temp,pBuffer,10),(const unsigned char*)Verdana8,(x_loc + pos1 + pos2 + pos3),y_loc);
    29ac:	a8 01       	movw	r20, r16
    29ae:	4b 0d       	add	r20, r11
    29b0:	51 1d       	adc	r21, r1
    29b2:	b7 fc       	sbrc	r11, 7
    29b4:	5a 95       	dec	r21
    29b6:	4c 0d       	add	r20, r12
    29b8:	5d 1d       	adc	r21, r13
    29ba:	24 e2       	ldi	r18, 0x24	; 36
    29bc:	30 e0       	ldi	r19, 0x00	; 0
    29be:	6d e0       	ldi	r22, 0x0D	; 13
    29c0:	7a e0       	ldi	r23, 0x0A	; 10
    29c2:	0e 94 9e 3e 	call	0x7d3c	; 0x7d3c <mugui_lcd_puts>
		}
	}
	
	// Display error messages
	if (General_error != 0)
    29c6:	80 91 1e 05 	lds	r24, 0x051E
    29ca:	88 23       	and	r24, r24
    29cc:	09 f4       	brne	.+2      	; 0x29d0 <Display_status+0x2b8>
    29ce:	53 c0       	rjmp	.+166    	; 0x2a76 <Display_status+0x35e>
	{
		// Prioritise error from top to bottom
		if((General_error & (1 << LVA_ALARM)) != 0)
    29d0:	80 91 1e 05 	lds	r24, 0x051E
    29d4:	83 ff       	sbrs	r24, 3
    29d6:	13 c0       	rjmp	.+38     	; 0x29fe <Display_status+0x2e6>
		{
			LCD_Display_Text(134,(const unsigned char*)Verdana14,15,37);	// Battery
    29d8:	25 e2       	ldi	r18, 0x25	; 37
    29da:	30 e0       	ldi	r19, 0x00	; 0
    29dc:	4f e0       	ldi	r20, 0x0F	; 15
    29de:	50 e0       	ldi	r21, 0x00	; 0
    29e0:	6f e5       	ldi	r22, 0x5F	; 95
    29e2:	71 e0       	ldi	r23, 0x01	; 1
    29e4:	86 e8       	ldi	r24, 0x86	; 134
    29e6:	90 e0       	ldi	r25, 0x00	; 0
    29e8:	0e 94 20 22 	call	0x4440	; 0x4440 <LCD_Display_Text>
			LCD_Display_Text(271,(const unsigned char*)Verdana14,79,37);	// low
    29ec:	25 e2       	ldi	r18, 0x25	; 37
    29ee:	30 e0       	ldi	r19, 0x00	; 0
    29f0:	4f e4       	ldi	r20, 0x4F	; 79
    29f2:	50 e0       	ldi	r21, 0x00	; 0
    29f4:	6f e5       	ldi	r22, 0x5F	; 95
    29f6:	71 e0       	ldi	r23, 0x01	; 1
    29f8:	8f e0       	ldi	r24, 0x0F	; 15
    29fa:	91 e0       	ldi	r25, 0x01	; 1
    29fc:	3a c0       	rjmp	.+116    	; 0x2a72 <Display_status+0x35a>
		}
		else if((General_error & (1 << NO_SIGNAL)) != 0)
    29fe:	80 91 1e 05 	lds	r24, 0x051E
    2a02:	81 ff       	sbrs	r24, 1
    2a04:	13 c0       	rjmp	.+38     	; 0x2a2c <Display_status+0x314>
		{
			LCD_Display_Text(75,(const unsigned char*)Verdana14,30,37); 	// No
    2a06:	25 e2       	ldi	r18, 0x25	; 37
    2a08:	30 e0       	ldi	r19, 0x00	; 0
    2a0a:	4e e1       	ldi	r20, 0x1E	; 30
    2a0c:	50 e0       	ldi	r21, 0x00	; 0
    2a0e:	6f e5       	ldi	r22, 0x5F	; 95
    2a10:	71 e0       	ldi	r23, 0x01	; 1
    2a12:	8b e4       	ldi	r24, 0x4B	; 75
    2a14:	90 e0       	ldi	r25, 0x00	; 0
    2a16:	0e 94 20 22 	call	0x4440	; 0x4440 <LCD_Display_Text>
			LCD_Display_Text(272,(const unsigned char*)Verdana14,55,37);	// signal
    2a1a:	25 e2       	ldi	r18, 0x25	; 37
    2a1c:	30 e0       	ldi	r19, 0x00	; 0
    2a1e:	47 e3       	ldi	r20, 0x37	; 55
    2a20:	50 e0       	ldi	r21, 0x00	; 0
    2a22:	6f e5       	ldi	r22, 0x5F	; 95
    2a24:	71 e0       	ldi	r23, 0x01	; 1
    2a26:	80 e1       	ldi	r24, 0x10	; 16
    2a28:	91 e0       	ldi	r25, 0x01	; 1
    2a2a:	23 c0       	rjmp	.+70     	; 0x2a72 <Display_status+0x35a>
		}
		else if((General_error & (1 << THROTTLE_HIGH)) != 0)
    2a2c:	80 91 1e 05 	lds	r24, 0x051E
    2a30:	80 ff       	sbrs	r24, 0
    2a32:	13 c0       	rjmp	.+38     	; 0x2a5a <Display_status+0x342>
		{
			LCD_Display_Text(105,(const unsigned char*)Verdana14,11,37);	// Throttle
    2a34:	25 e2       	ldi	r18, 0x25	; 37
    2a36:	30 e0       	ldi	r19, 0x00	; 0
    2a38:	4b e0       	ldi	r20, 0x0B	; 11
    2a3a:	50 e0       	ldi	r21, 0x00	; 0
    2a3c:	6f e5       	ldi	r22, 0x5F	; 95
    2a3e:	71 e0       	ldi	r23, 0x01	; 1
    2a40:	89 e6       	ldi	r24, 0x69	; 105
    2a42:	90 e0       	ldi	r25, 0x00	; 0
    2a44:	0e 94 20 22 	call	0x4440	; 0x4440 <LCD_Display_Text>
			LCD_Display_Text(270,(const unsigned char*)Verdana14,82,37);	// high
    2a48:	25 e2       	ldi	r18, 0x25	; 37
    2a4a:	30 e0       	ldi	r19, 0x00	; 0
    2a4c:	42 e5       	ldi	r20, 0x52	; 82
    2a4e:	50 e0       	ldi	r21, 0x00	; 0
    2a50:	6f e5       	ldi	r22, 0x5F	; 95
    2a52:	71 e0       	ldi	r23, 0x01	; 1
    2a54:	8e e0       	ldi	r24, 0x0E	; 14
    2a56:	91 e0       	ldi	r25, 0x01	; 1
    2a58:	0c c0       	rjmp	.+24     	; 0x2a72 <Display_status+0x35a>
		}
		else if((General_error & (1 << DISARMED)) != 0)
    2a5a:	80 91 1e 05 	lds	r24, 0x051E
    2a5e:	82 ff       	sbrs	r24, 2
    2a60:	0a c0       	rjmp	.+20     	; 0x2a76 <Display_status+0x35e>
		{
			LCD_Display_Text(18,(const unsigned char*)Verdana14,25,37); 	// Disarmed
    2a62:	25 e2       	ldi	r18, 0x25	; 37
    2a64:	30 e0       	ldi	r19, 0x00	; 0
    2a66:	49 e1       	ldi	r20, 0x19	; 25
    2a68:	50 e0       	ldi	r21, 0x00	; 0
    2a6a:	6f e5       	ldi	r22, 0x5F	; 95
    2a6c:	71 e0       	ldi	r23, 0x01	; 1
    2a6e:	82 e1       	ldi	r24, 0x12	; 18
    2a70:	90 e0       	ldi	r25, 0x00	; 0
    2a72:	0e 94 20 22 	call	0x4440	; 0x4440 <LCD_Display_Text>
		}
	}

	// Write buffer to complete
	write_buffer(buffer);
    2a76:	80 e0       	ldi	r24, 0x00	; 0
    2a78:	91 e0       	ldi	r25, 0x01	; 1
    2a7a:	0e 94 41 20 	call	0x4082	; 0x4082 <write_buffer>
	clear_buffer(buffer);
    2a7e:	80 e0       	ldi	r24, 0x00	; 0
    2a80:	91 e0       	ldi	r25, 0x01	; 1
    2a82:	0e 94 73 20 	call	0x40e6	; 0x40e6 <clear_buffer>
}
    2a86:	0f 90       	pop	r0
    2a88:	0f 90       	pop	r0
    2a8a:	0f 90       	pop	r0
    2a8c:	0f 90       	pop	r0
    2a8e:	df 91       	pop	r29
    2a90:	cf 91       	pop	r28
    2a92:	1f 91       	pop	r17
    2a94:	0f 91       	pop	r16
    2a96:	ff 90       	pop	r15
    2a98:	ef 90       	pop	r14
    2a9a:	df 90       	pop	r13
    2a9c:	cf 90       	pop	r12
    2a9e:	bf 90       	pop	r11
    2aa0:	08 95       	ret

00002aa2 <Display_sticks>:
//************************************************************
// Code
//************************************************************

void Display_sticks(void)
{
    2aa2:	af 92       	push	r10
    2aa4:	bf 92       	push	r11
    2aa6:	cf 92       	push	r12
    2aa8:	df 92       	push	r13
    2aaa:	ef 92       	push	r14
    2aac:	ff 92       	push	r15
    2aae:	0f 93       	push	r16
    2ab0:	1f 93       	push	r17
    2ab2:	cf 93       	push	r28
    2ab4:	df 93       	push	r29
	int8_t	temp_aileron, temp_elevator, temp_rudder;
	bool	CalibrateDone = false;
	bool	CalibrateStarted = false;

	// Save original settings in case user aborts
	temp_aileron = Config.AileronPol;
    2ab6:	d0 90 d9 05 	lds	r13, 0x05D9
	temp_elevator = Config.ElevatorPol;
    2aba:	f0 90 da 05 	lds	r15, 0x05DA
	temp_rudder = Config.RudderPol;
    2abe:	a0 90 3a 06 	lds	r10, 0x063A

	// Reset to defaults - not ideal, but it works
	Config.AileronPol = NORMAL;
    2ac2:	10 92 d9 05 	sts	0x05D9, r1
	Config.ElevatorPol =  NORMAL;
    2ac6:	10 92 da 05 	sts	0x05DA, r1
	Config.RudderPol = NORMAL;
    2aca:	10 92 3a 06 	sts	0x063A, r1
{
	int8_t	i;
	int8_t	offset;
	int8_t	temp_aileron, temp_elevator, temp_rudder;
	bool	CalibrateDone = false;
	bool	CalibrateStarted = false;
    2ace:	d0 e0       	ldi	r29, 0x00	; 0
void Display_sticks(void)
{
	int8_t	i;
	int8_t	offset;
	int8_t	temp_aileron, temp_elevator, temp_rudder;
	bool	CalibrateDone = false;
    2ad0:	c0 e0       	ldi	r28, 0x00	; 0
	Config.AileronPol = NORMAL;
	Config.ElevatorPol =  NORMAL;
	Config.RudderPol = NORMAL;

	// Until exit button pressed or complete
	while((BUTTON1 != 0) && (!CalibrateDone))
    2ad2:	1f 9b       	sbis	0x03, 7	; 3
    2ad4:	b6 c0       	rjmp	.+364    	; 0x2c42 <Display_sticks+0x1a0>
    2ad6:	c1 11       	cpse	r28, r1
    2ad8:	b6 c0       	rjmp	.+364    	; 0x2c46 <Display_sticks+0x1a4>
	{
		// Draw first stick on the left
		offset = 0;

		// Clear screen buffer
		clear_buffer(buffer);
    2ada:	80 e0       	ldi	r24, 0x00	; 0
    2adc:	91 e0       	ldi	r25, 0x01	; 1
    2ade:	0e 94 73 20 	call	0x40e6	; 0x40e6 <clear_buffer>
    2ae2:	92 e0       	ldi	r25, 0x02	; 2
    2ae4:	c9 2e       	mov	r12, r25

	// Until exit button pressed or complete
	while((BUTTON1 != 0) && (!CalibrateDone))
	{
		// Draw first stick on the left
		offset = 0;
    2ae6:	10 e0       	ldi	r17, 0x00	; 0
		clear_buffer(buffer);

		// Draw graphic
		for (i = 0; i < 2; i++)
		{
			drawrect(buffer, 17 + offset, 0, 40, 40, 1);			// Box
    2ae8:	61 e1       	ldi	r22, 0x11	; 17
    2aea:	61 0f       	add	r22, r17
    2aec:	ee 24       	eor	r14, r14
    2aee:	e3 94       	inc	r14
    2af0:	08 e2       	ldi	r16, 0x28	; 40
    2af2:	28 e2       	ldi	r18, 0x28	; 40
    2af4:	40 e0       	ldi	r20, 0x00	; 0
    2af6:	80 e0       	ldi	r24, 0x00	; 0
    2af8:	91 e0       	ldi	r25, 0x01	; 1
    2afa:	0e 94 3d 21 	call	0x427a	; 0x427a <drawrect>
			drawline(buffer, 38 + offset,20, 48 + offset,  3, 1); 	// Line 1
    2afe:	86 e2       	ldi	r24, 0x26	; 38
    2b00:	b8 2e       	mov	r11, r24
    2b02:	b1 0e       	add	r11, r17
    2b04:	20 e3       	ldi	r18, 0x30	; 48
    2b06:	21 0f       	add	r18, r17
    2b08:	03 e0       	ldi	r16, 0x03	; 3
    2b0a:	44 e1       	ldi	r20, 0x14	; 20
    2b0c:	6b 2d       	mov	r22, r11
    2b0e:	80 e0       	ldi	r24, 0x00	; 0
    2b10:	91 e0       	ldi	r25, 0x01	; 1
    2b12:	0e 94 d3 20 	call	0x41a6	; 0x41a6 <drawline>
			drawline(buffer, 41 + offset,21, 56 + offset,  6, 1); 	// Line 2
    2b16:	28 e3       	ldi	r18, 0x38	; 56
    2b18:	21 0f       	add	r18, r17
    2b1a:	69 e2       	ldi	r22, 0x29	; 41
    2b1c:	61 0f       	add	r22, r17
    2b1e:	06 e0       	ldi	r16, 0x06	; 6
    2b20:	45 e1       	ldi	r20, 0x15	; 21
    2b22:	80 e0       	ldi	r24, 0x00	; 0
    2b24:	91 e0       	ldi	r25, 0x01	; 1
    2b26:	0e 94 d3 20 	call	0x41a6	; 0x41a6 <drawline>
			fillcircle(buffer, 38 + offset, 21, 2, 1);				// Center
    2b2a:	01 e0       	ldi	r16, 0x01	; 1
    2b2c:	22 e0       	ldi	r18, 0x02	; 2
    2b2e:	45 e1       	ldi	r20, 0x15	; 21
    2b30:	6b 2d       	mov	r22, r11
    2b32:	80 e0       	ldi	r24, 0x00	; 0
    2b34:	91 e0       	ldi	r25, 0x01	; 1
    2b36:	0e 94 8f 21 	call	0x431e	; 0x431e <fillcircle>
			fillcircle(buffer, 51 + offset, 5, 4, 1);				// End
    2b3a:	63 e3       	ldi	r22, 0x33	; 51
    2b3c:	61 0f       	add	r22, r17
    2b3e:	24 e0       	ldi	r18, 0x04	; 4
    2b40:	45 e0       	ldi	r20, 0x05	; 5
    2b42:	80 e0       	ldi	r24, 0x00	; 0
    2b44:	91 e0       	ldi	r25, 0x01	; 1
    2b46:	0e 94 8f 21 	call	0x431e	; 0x431e <fillcircle>
    2b4a:	ca 94       	dec	r12

		// Clear screen buffer
		clear_buffer(buffer);

		// Draw graphic
		for (i = 0; i < 2; i++)
    2b4c:	11 f0       	breq	.+4      	; 0x2b52 <Display_sticks+0xb0>
			drawline(buffer, 41 + offset,21, 56 + offset,  6, 1); 	// Line 2
			fillcircle(buffer, 38 + offset, 21, 2, 1);				// Center
			fillcircle(buffer, 51 + offset, 5, 4, 1);				// End

			// Draw second stick on the right
			offset = 52;
    2b4e:	14 e3       	ldi	r17, 0x34	; 52
    2b50:	cb cf       	rjmp	.-106    	; 0x2ae8 <Display_sticks+0x46>
		}

		// Print bottom text and markers
		LCD_Display_Text(12, (const unsigned char*)Wingdings, 0, 57); 		// Left
    2b52:	29 e3       	ldi	r18, 0x39	; 57
    2b54:	30 e0       	ldi	r19, 0x00	; 0
    2b56:	40 e0       	ldi	r20, 0x00	; 0
    2b58:	50 e0       	ldi	r21, 0x00	; 0
    2b5a:	65 ef       	ldi	r22, 0xF5	; 245
    2b5c:	70 e0       	ldi	r23, 0x00	; 0
    2b5e:	8c e0       	ldi	r24, 0x0C	; 12
    2b60:	90 e0       	ldi	r25, 0x00	; 0
    2b62:	0e 94 20 22 	call	0x4440	; 0x4440 <LCD_Display_Text>

		// If uncalibrated
		if (!CalibrateDone)
		{
			RxGetChannels();
    2b66:	0e 94 43 43 	call	0x8686	; 0x8686 <RxGetChannels>
			
			// Display warning if sticks not centered or no RC signal while not started calibrating
			if (((RCinputs[AILERON] < -2000) || (RCinputs[AILERON] > 2000)) && !CalibrateStarted)
    2b6a:	80 91 25 08 	lds	r24, 0x0825
    2b6e:	90 91 26 08 	lds	r25, 0x0826
    2b72:	80 33       	cpi	r24, 0x30	; 48
    2b74:	98 4f       	sbci	r25, 0xF8	; 248
    2b76:	3c f0       	brlt	.+14     	; 0x2b86 <Display_sticks+0xe4>
    2b78:	80 91 25 08 	lds	r24, 0x0825
    2b7c:	90 91 26 08 	lds	r25, 0x0826
    2b80:	81 3d       	cpi	r24, 0xD1	; 209
    2b82:	97 40       	sbci	r25, 0x07	; 7
    2b84:	6c f0       	brlt	.+26     	; 0x2ba0 <Display_sticks+0xfe>
    2b86:	d1 11       	cpse	r29, r1
    2b88:	0b c0       	rjmp	.+22     	; 0x2ba0 <Display_sticks+0xfe>
			{
				LCD_Display_Text(135,(const unsigned char*)Verdana14,16,43); 	// "No RX signal?"
    2b8a:	2b e2       	ldi	r18, 0x2B	; 43
    2b8c:	30 e0       	ldi	r19, 0x00	; 0
    2b8e:	40 e1       	ldi	r20, 0x10	; 16
    2b90:	50 e0       	ldi	r21, 0x00	; 0
    2b92:	6f e5       	ldi	r22, 0x5F	; 95
    2b94:	71 e0       	ldi	r23, 0x01	; 1
    2b96:	87 e8       	ldi	r24, 0x87	; 135
    2b98:	90 e0       	ldi	r25, 0x00	; 0
    2b9a:	0e 94 20 22 	call	0x4440	; 0x4440 <LCD_Display_Text>
    2b9e:	4c c0       	rjmp	.+152    	; 0x2c38 <Display_sticks+0x196>
			}

			// Sticks have not moved far enough but RC being received
			else if ((RCinputs[AILERON] < 500) && (RCinputs[AILERON] > -500))
    2ba0:	80 91 25 08 	lds	r24, 0x0825
    2ba4:	90 91 26 08 	lds	r25, 0x0826
    2ba8:	84 3f       	cpi	r24, 0xF4	; 244
    2baa:	91 40       	sbci	r25, 0x01	; 1
    2bac:	9c f4       	brge	.+38     	; 0x2bd4 <Display_sticks+0x132>
    2bae:	80 91 25 08 	lds	r24, 0x0825
    2bb2:	90 91 26 08 	lds	r25, 0x0826
    2bb6:	8d 30       	cpi	r24, 0x0D	; 13
    2bb8:	9e 4f       	sbci	r25, 0xFE	; 254
    2bba:	64 f0       	brlt	.+24     	; 0x2bd4 <Display_sticks+0x132>
			{
				CalibrateStarted = true;
				LCD_Display_Text(136,(const unsigned char*)Verdana14,9,43); 	// "Hold as shown"
    2bbc:	2b e2       	ldi	r18, 0x2B	; 43
    2bbe:	30 e0       	ldi	r19, 0x00	; 0
    2bc0:	49 e0       	ldi	r20, 0x09	; 9
    2bc2:	50 e0       	ldi	r21, 0x00	; 0
    2bc4:	6f e5       	ldi	r22, 0x5F	; 95
    2bc6:	71 e0       	ldi	r23, 0x01	; 1
    2bc8:	88 e8       	ldi	r24, 0x88	; 136
    2bca:	90 e0       	ldi	r25, 0x00	; 0
    2bcc:	0e 94 20 22 	call	0x4440	; 0x4440 <LCD_Display_Text>
			}

			// Sticks have not moved far enough but RC being received
			else if ((RCinputs[AILERON] < 500) && (RCinputs[AILERON] > -500))
			{
				CalibrateStarted = true;
    2bd0:	d1 e0       	ldi	r29, 0x01	; 1
				LCD_Display_Text(136,(const unsigned char*)Verdana14,9,43); 	// "Hold as shown"
    2bd2:	32 c0       	rjmp	.+100    	; 0x2c38 <Display_sticks+0x196>

			// Sticks should now be in the right position
			// Reverse wrong input channels
			else
			{
				if (RCinputs[AILERON] < 0)
    2bd4:	80 91 25 08 	lds	r24, 0x0825
    2bd8:	90 91 26 08 	lds	r25, 0x0826
    2bdc:	97 ff       	sbrs	r25, 7
    2bde:	03 c0       	rjmp	.+6      	; 0x2be6 <Display_sticks+0x144>
				{
					Config.AileronPol = REVERSED;
    2be0:	81 e0       	ldi	r24, 0x01	; 1
    2be2:	80 93 d9 05 	sts	0x05D9, r24
				}

				if (RCinputs[ELEVATOR] < 0)
    2be6:	80 91 27 08 	lds	r24, 0x0827
    2bea:	90 91 28 08 	lds	r25, 0x0828
    2bee:	97 ff       	sbrs	r25, 7
    2bf0:	03 c0       	rjmp	.+6      	; 0x2bf8 <Display_sticks+0x156>
				{
					Config.ElevatorPol = REVERSED;
    2bf2:	81 e0       	ldi	r24, 0x01	; 1
    2bf4:	80 93 da 05 	sts	0x05DA, r24
				}

				if (RCinputs[RUDDER] < 0)
    2bf8:	80 91 29 08 	lds	r24, 0x0829
    2bfc:	90 91 2a 08 	lds	r25, 0x082A
    2c00:	97 ff       	sbrs	r25, 7
    2c02:	03 c0       	rjmp	.+6      	; 0x2c0a <Display_sticks+0x168>
				{
					Config.RudderPol = REVERSED;
    2c04:	81 e0       	ldi	r24, 0x01	; 1
    2c06:	80 93 3a 06 	sts	0x063A, r24
				}

				// If all positive - done!
				if ((RCinputs[AILERON] > 0) && (RCinputs[ELEVATOR] > 0) && (RCinputs[RUDDER] > 0))
    2c0a:	80 91 25 08 	lds	r24, 0x0825
    2c0e:	90 91 26 08 	lds	r25, 0x0826
    2c12:	18 16       	cp	r1, r24
    2c14:	19 06       	cpc	r1, r25
    2c16:	84 f4       	brge	.+32     	; 0x2c38 <Display_sticks+0x196>
    2c18:	80 91 27 08 	lds	r24, 0x0827
    2c1c:	90 91 28 08 	lds	r25, 0x0828
    2c20:	18 16       	cp	r1, r24
    2c22:	19 06       	cpc	r1, r25
    2c24:	4c f4       	brge	.+18     	; 0x2c38 <Display_sticks+0x196>
    2c26:	80 91 29 08 	lds	r24, 0x0829
    2c2a:	90 91 2a 08 	lds	r25, 0x082A
    2c2e:	c1 e0       	ldi	r28, 0x01	; 1
    2c30:	18 16       	cp	r1, r24
    2c32:	19 06       	cpc	r1, r25
    2c34:	0c f0       	brlt	.+2      	; 0x2c38 <Display_sticks+0x196>
    2c36:	c0 e0       	ldi	r28, 0x00	; 0
				}
			}
		}

		// Update buffer
		write_buffer(buffer);
    2c38:	80 e0       	ldi	r24, 0x00	; 0
    2c3a:	91 e0       	ldi	r25, 0x01	; 1
    2c3c:	0e 94 41 20 	call	0x4082	; 0x4082 <write_buffer>
    2c40:	48 cf       	rjmp	.-368    	; 0x2ad2 <Display_sticks+0x30>
	}

	// Save value and return
	if (CalibrateDone)
    2c42:	cc 23       	and	r28, r28
    2c44:	39 f1       	breq	.+78     	; 0x2c94 <Display_sticks+0x1f2>
	{
		LCD_Display_Text(137,(const unsigned char*)Verdana14,40,43); 	// "Done!"
    2c46:	2b e2       	ldi	r18, 0x2B	; 43
    2c48:	30 e0       	ldi	r19, 0x00	; 0
    2c4a:	48 e2       	ldi	r20, 0x28	; 40
    2c4c:	50 e0       	ldi	r21, 0x00	; 0
    2c4e:	6f e5       	ldi	r22, 0x5F	; 95
    2c50:	71 e0       	ldi	r23, 0x01	; 1
    2c52:	89 e8       	ldi	r24, 0x89	; 137
    2c54:	90 e0       	ldi	r25, 0x00	; 0
    2c56:	0e 94 20 22 	call	0x4440	; 0x4440 <LCD_Display_Text>
		// Update buffer
		write_buffer(buffer);
    2c5a:	80 e0       	ldi	r24, 0x00	; 0
    2c5c:	91 e0       	ldi	r25, 0x01	; 1
    2c5e:	0e 94 41 20 	call	0x4082	; 0x4082 <write_buffer>
		clear_buffer(buffer);
    2c62:	80 e0       	ldi	r24, 0x00	; 0
    2c64:	91 e0       	ldi	r25, 0x01	; 1
    2c66:	0e 94 73 20 	call	0x40e6	; 0x40e6 <clear_buffer>
    2c6a:	8f e7       	ldi	r24, 0x7F	; 127
    2c6c:	94 e8       	ldi	r25, 0x84	; 132
    2c6e:	2e e1       	ldi	r18, 0x1E	; 30
    2c70:	81 50       	subi	r24, 0x01	; 1
    2c72:	90 40       	sbci	r25, 0x00	; 0
    2c74:	20 40       	sbci	r18, 0x00	; 0
    2c76:	e1 f7       	brne	.-8      	; 0x2c70 <Display_sticks+0x1ce>
    2c78:	00 c0       	rjmp	.+0      	; 0x2c7a <Display_sticks+0x1d8>
    2c7a:	00 00       	nop
		// Restore old settings if failed
		Config.AileronPol = temp_aileron;
		Config.ElevatorPol = temp_elevator;
		Config.RudderPol = temp_rudder;
	}
}
    2c7c:	df 91       	pop	r29
    2c7e:	cf 91       	pop	r28
    2c80:	1f 91       	pop	r17
    2c82:	0f 91       	pop	r16
    2c84:	ff 90       	pop	r15
    2c86:	ef 90       	pop	r14
    2c88:	df 90       	pop	r13
    2c8a:	cf 90       	pop	r12
    2c8c:	bf 90       	pop	r11
    2c8e:	af 90       	pop	r10
		// Update buffer
		write_buffer(buffer);
		clear_buffer(buffer);
		// Pause so that the "Done!" text is readable
		_delay_ms(500);
		Save_Config_to_EEPROM();
    2c90:	0c 94 93 16 	jmp	0x2d26	; 0x2d26 <Save_Config_to_EEPROM>
 	}
	else
	{
		// Restore old settings if failed
		Config.AileronPol = temp_aileron;
    2c94:	d0 92 d9 05 	sts	0x05D9, r13
		Config.ElevatorPol = temp_elevator;
    2c98:	f0 92 da 05 	sts	0x05DA, r15
		Config.RudderPol = temp_rudder;
    2c9c:	a0 92 3a 06 	sts	0x063A, r10
	}
}
    2ca0:	df 91       	pop	r29
    2ca2:	cf 91       	pop	r28
    2ca4:	1f 91       	pop	r17
    2ca6:	0f 91       	pop	r16
    2ca8:	ff 90       	pop	r15
    2caa:	ef 90       	pop	r14
    2cac:	df 90       	pop	r13
    2cae:	cf 90       	pop	r12
    2cb0:	bf 90       	pop	r11
    2cb2:	af 90       	pop	r10
    2cb4:	08 95       	ret

00002cb6 <eeprom_write_byte_changed>:
}

// addr is the address in eeprom
// value is the value to be written
void eeprom_write_byte_changed(uint8_t *addr, uint8_t value)
{
    2cb6:	0f 93       	push	r16
    2cb8:	1f 93       	push	r17
    2cba:	cf 93       	push	r28
    2cbc:	df 93       	push	r29
    2cbe:	1f 92       	push	r1
    2cc0:	cd b7       	in	r28, 0x3d	; 61
    2cc2:	de b7       	in	r29, 0x3e	; 62
    2cc4:	8c 01       	movw	r16, r24
	if (eeprom_read_byte(addr) != value)
    2cc6:	69 83       	std	Y+1, r22	; 0x01
    2cc8:	0e 94 37 49 	call	0x926e	; 0x926e <__eerd_byte_m644pa>
    2ccc:	69 81       	ldd	r22, Y+1	; 0x01
    2cce:	86 17       	cp	r24, r22
    2cd0:	41 f0       	breq	.+16     	; 0x2ce2 <eeprom_write_byte_changed+0x2c>
	{
		// void eeprom_write_byte (uint8_t *__p, uint8_t __value);
		eeprom_write_byte(addr, value);
    2cd2:	c8 01       	movw	r24, r16
	}
}
    2cd4:	0f 90       	pop	r0
    2cd6:	df 91       	pop	r29
    2cd8:	cf 91       	pop	r28
    2cda:	1f 91       	pop	r17
    2cdc:	0f 91       	pop	r16
void eeprom_write_byte_changed(uint8_t *addr, uint8_t value)
{
	if (eeprom_read_byte(addr) != value)
	{
		// void eeprom_write_byte (uint8_t *__p, uint8_t __value);
		eeprom_write_byte(addr, value);
    2cde:	0c 94 3f 49 	jmp	0x927e	; 0x927e <__eewr_byte_m644pa>
	}
}
    2ce2:	0f 90       	pop	r0
    2ce4:	df 91       	pop	r29
    2ce6:	cf 91       	pop	r28
    2ce8:	1f 91       	pop	r17
    2cea:	0f 91       	pop	r16
    2cec:	08 95       	ret

00002cee <eeprom_write_block_changes>:
}

// src is the address in RAM
// dest is the address in eeprom (hence const)
void eeprom_write_block_changes(uint8_t *src, uint8_t *dest, uint16_t size)
{ 
    2cee:	ef 92       	push	r14
    2cf0:	ff 92       	push	r15
    2cf2:	0f 93       	push	r16
    2cf4:	1f 93       	push	r17
    2cf6:	cf 93       	push	r28
    2cf8:	df 93       	push	r29
    2cfa:	ec 01       	movw	r28, r24
    2cfc:	8b 01       	movw	r16, r22
    2cfe:	7a 01       	movw	r14, r20
    2d00:	e8 0e       	add	r14, r24
    2d02:	f9 1e       	adc	r15, r25
	uint16_t len;
	uint8_t value;

	for (len=0; len < size; len++)
    2d04:	ce 15       	cp	r28, r14
    2d06:	df 05       	cpc	r29, r15
    2d08:	39 f0       	breq	.+14     	; 0x2d18 <eeprom_write_block_changes+0x2a>
	{
		// Get value at src
		value = *src;
		
		// Write the value at src to dest
		eeprom_write_byte_changed(dest, value);
    2d0a:	69 91       	ld	r22, Y+
    2d0c:	c8 01       	movw	r24, r16
    2d0e:	0e 94 5b 16 	call	0x2cb6	; 0x2cb6 <eeprom_write_byte_changed>
		src++;
		dest++;
    2d12:	0f 5f       	subi	r16, 0xFF	; 255
    2d14:	1f 4f       	sbci	r17, 0xFF	; 255
    2d16:	f6 cf       	rjmp	.-20     	; 0x2d04 <eeprom_write_block_changes+0x16>
	}
}
    2d18:	df 91       	pop	r29
    2d1a:	cf 91       	pop	r28
    2d1c:	1f 91       	pop	r17
    2d1e:	0f 91       	pop	r16
    2d20:	ff 90       	pop	r15
    2d22:	ef 90       	pop	r14
    2d24:	08 95       	ret

00002d26 <Save_Config_to_EEPROM>:
const uint8_t	FUTABA[MAX_RC_CHANNELS] PROGMEM = {1,2,0,3,4,5,6,7}; 	// Futaba channel sequence (AETRGF12)

void Save_Config_to_EEPROM(void)
{
	// Write to eeProm
	cli();
    2d26:	f8 94       	cli
	eeprom_write_block_changes((uint8_t*)&Config, (uint8_t*)EEPROM_DATA_START_POS, sizeof(CONFIG_STRUCT));	
    2d28:	48 e0       	ldi	r20, 0x08	; 8
    2d2a:	52 e0       	ldi	r21, 0x02	; 2
    2d2c:	60 e0       	ldi	r22, 0x00	; 0
    2d2e:	70 e0       	ldi	r23, 0x00	; 0
    2d30:	89 ea       	ldi	r24, 0xA9	; 169
    2d32:	95 e0       	ldi	r25, 0x05	; 5
    2d34:	0e 94 77 16 	call	0x2cee	; 0x2cee <eeprom_write_block_changes>
	sei();
    2d38:	78 94       	sei
    2d3a:	08 95       	ret

00002d3c <Update_V1_0_to_V1_1>:
// Config data restructure code
//************************************************************

// Upgrade V1.0 structure to V1.1 structure
void Update_V1_0_to_V1_1(void)
{
    2d3c:	2f 92       	push	r2
    2d3e:	3f 92       	push	r3
    2d40:	4f 92       	push	r4
    2d42:	5f 92       	push	r5
    2d44:	6f 92       	push	r6
    2d46:	7f 92       	push	r7
    2d48:	8f 92       	push	r8
    2d4a:	9f 92       	push	r9
    2d4c:	af 92       	push	r10
    2d4e:	bf 92       	push	r11
    2d50:	cf 92       	push	r12
    2d52:	df 92       	push	r13
    2d54:	ef 92       	push	r14
    2d56:	ff 92       	push	r15
    2d58:	0f 93       	push	r16
    2d5a:	1f 93       	push	r17
    2d5c:	cf 93       	push	r28
    2d5e:	df 93       	push	r29
    2d60:	cd b7       	in	r28, 0x3d	; 61
    2d62:	de b7       	in	r29, 0x3e	; 62
    2d64:	c5 54       	subi	r28, 0x45	; 69
    2d66:	d1 40       	sbci	r29, 0x01	; 1
    2d68:	0f b6       	in	r0, 0x3f	; 63
    2d6a:	f8 94       	cli
    2d6c:	de bf       	out	0x3e, r29	; 62
    2d6e:	0f be       	out	0x3f, r0	; 63
    2d70:	cd bf       	out	0x3d, r28	; 61
	int8_t		P2_scale;				// P2 sensor scale flags (6)

	// Save old P2 Source B volume. For some reason it gets clobbered.
	// We mustn't use hard-coded values are these change each version.
	// Use an offset from the current Config structure address
	memcpy((void*)&temp,(void*)((&Config.setup) + (377)),1);
    2d72:	40 91 22 07 	lds	r20, 0x0722
    2d76:	cf 5b       	subi	r28, 0xBF	; 191
    2d78:	de 4f       	sbci	r29, 0xFE	; 254
    2d7a:	48 83       	st	Y, r20
    2d7c:	c1 54       	subi	r28, 0x41	; 65
    2d7e:	d1 40       	sbci	r29, 0x01	; 1
	 
	// Move data that exists after the channel mixer to new location
	// Hard-coded to V1.0 RAM offset	
	memmove((void*)&Config.Servo_reverse, (void*)((&Config.setup) + (378)), 74);	// RAM location determined empirically
    2d80:	4a e4       	ldi	r20, 0x4A	; 74
    2d82:	50 e0       	ldi	r21, 0x00	; 0
    2d84:	63 e2       	ldi	r22, 0x23	; 35
    2d86:	77 e0       	ldi	r23, 0x07	; 7
    2d88:	8b e6       	ldi	r24, 0x6B	; 107
    2d8a:	97 e0       	ldi	r25, 0x07	; 7
    2d8c:	0e 94 f0 48 	call	0x91e0	; 0x91e0 <memmove>
    2d90:	2b e3       	ldi	r18, 0x3B	; 59
    2d92:	36 e0       	ldi	r19, 0x06	; 6
    2d94:	ae 01       	movw	r20, r28
    2d96:	4f 5c       	subi	r20, 0xCF	; 207
    2d98:	5e 4f       	sbci	r21, 0xFE	; 254
    2d9a:	ce 01       	movw	r24, r28
    2d9c:	01 96       	adiw	r24, 0x01	; 1
	{
		src = (void*)Config.Channel;	// Same location as old one
		dst = (void*)mixer_buffer;
		src += (i * OLDSIZE);			// Step to next old data in (corrupted) config structure
		dst += (i * NEWSIZE);			// Step to next location for new data in the buffer
		memcpy(dst, src, OLDSIZE);		// Move only the old (smaller) data
    2d9e:	6d e1       	ldi	r22, 0x1D	; 29
    2da0:	f9 01       	movw	r30, r18
    2da2:	dc 01       	movw	r26, r24
    2da4:	76 2f       	mov	r23, r22
    2da6:	01 90       	ld	r0, Z+
    2da8:	0d 92       	st	X+, r0
    2daa:	7a 95       	dec	r23
    2dac:	e1 f7       	brne	.-8      	; 0x2da6 <Update_V1_0_to_V1_1+0x6a>
    2dae:	86 96       	adiw	r24, 0x26	; 38
    2db0:	23 5e       	subi	r18, 0xE3	; 227
    2db2:	3f 4f       	sbci	r19, 0xFF	; 255
	// Move data that exists after the channel mixer to new location
	// Hard-coded to V1.0 RAM offset	
	memmove((void*)&Config.Servo_reverse, (void*)((&Config.setup) + (378)), 74);	// RAM location determined empirically
	
	// Copy the old channel[] structure into buffer, spaced out to match the new structure
	for (i = 0; i < MAX_OUTPUTS; i++)
    2db4:	84 17       	cp	r24, r20
    2db6:	95 07       	cpc	r25, r21
    2db8:	99 f7       	brne	.-26     	; 0x2da0 <Update_V1_0_to_V1_1+0x64>
    2dba:	4e 01       	movw	r8, r28
    2dbc:	83 e1       	ldi	r24, 0x13	; 19
    2dbe:	88 0e       	add	r8, r24
    2dc0:	91 1c       	adc	r9, r1
    2dc2:	5e 01       	movw	r10, r28
    2dc4:	94 e1       	ldi	r25, 0x14	; 20
    2dc6:	a9 0e       	add	r10, r25
    2dc8:	b1 1c       	adc	r11, r1
    2dca:	6e 01       	movw	r12, r28
    2dcc:	e5 e1       	ldi	r30, 0x15	; 21
    2dce:	ce 0e       	add	r12, r30
    2dd0:	d1 1c       	adc	r13, r1
    2dd2:	ce 01       	movw	r24, r28
    2dd4:	46 96       	adiw	r24, 0x16	; 22
    2dd6:	cf 5c       	subi	r28, 0xCF	; 207
    2dd8:	de 4f       	sbci	r29, 0xFE	; 254
    2dda:	99 83       	std	Y+1, r25	; 0x01
    2ddc:	88 83       	st	Y, r24
    2dde:	c1 53       	subi	r28, 0x31	; 49
    2de0:	d1 40       	sbci	r29, 0x01	; 1
    2de2:	8e 01       	movw	r16, r28
    2de4:	02 5e       	subi	r16, 0xE2	; 226
    2de6:	1f 4f       	sbci	r17, 0xFF	; 255
    2de8:	fe 01       	movw	r30, r28
    2dea:	7d 96       	adiw	r30, 0x1d	; 29
    2dec:	c7 5c       	subi	r28, 0xC7	; 199
    2dee:	de 4f       	sbci	r29, 0xFE	; 254
    2df0:	f9 83       	std	Y+1, r31	; 0x01
    2df2:	e8 83       	st	Y, r30
    2df4:	c9 53       	subi	r28, 0x39	; 57
    2df6:	d1 40       	sbci	r29, 0x01	; 1
    2df8:	06 96       	adiw	r24, 0x06	; 6
    2dfa:	cd 5c       	subi	r28, 0xCD	; 205
    2dfc:	de 4f       	sbci	r29, 0xFE	; 254
    2dfe:	99 83       	std	Y+1, r25	; 0x01
    2e00:	88 83       	st	Y, r24
    2e02:	c3 53       	subi	r28, 0x33	; 51
    2e04:	d1 40       	sbci	r29, 0x01	; 1
    2e06:	32 97       	sbiw	r30, 0x02	; 2
    2e08:	c3 5c       	subi	r28, 0xC3	; 195
    2e0a:	de 4f       	sbci	r29, 0xFE	; 254
    2e0c:	f9 83       	std	Y+1, r31	; 0x01
    2e0e:	e8 83       	st	Y, r30
    2e10:	cd 53       	subi	r28, 0x3D	; 61
    2e12:	d1 40       	sbci	r29, 0x01	; 1
    2e14:	02 97       	sbiw	r24, 0x02	; 2
    2e16:	c9 5c       	subi	r28, 0xC9	; 201
    2e18:	de 4f       	sbci	r29, 0xFE	; 254
    2e1a:	99 83       	std	Y+1, r25	; 0x01
    2e1c:	88 83       	st	Y, r24
    2e1e:	c7 53       	subi	r28, 0x37	; 55
    2e20:	d1 40       	sbci	r29, 0x01	; 1
    2e22:	32 97       	sbiw	r30, 0x02	; 2
    2e24:	c5 5c       	subi	r28, 0xC5	; 197
    2e26:	de 4f       	sbci	r29, 0xFE	; 254
    2e28:	f9 83       	std	Y+1, r31	; 0x01
    2e2a:	e8 83       	st	Y, r30
    2e2c:	cb 53       	subi	r28, 0x3B	; 59
    2e2e:	d1 40       	sbci	r29, 0x01	; 1
    2e30:	02 97       	sbiw	r24, 0x02	; 2
    2e32:	cb 5c       	subi	r28, 0xCB	; 203
    2e34:	de 4f       	sbci	r29, 0xFE	; 254
    2e36:	99 83       	std	Y+1, r25	; 0x01
    2e38:	88 83       	st	Y, r24
    2e3a:	c5 53       	subi	r28, 0x35	; 53
    2e3c:	d1 40       	sbci	r29, 0x01	; 1
    2e3e:	7e 01       	movw	r14, r28
    2e40:	97 e1       	ldi	r25, 0x17	; 23
    2e42:	e9 0e       	add	r14, r25
    2e44:	f1 1c       	adc	r15, r1
    2e46:	3e 01       	movw	r6, r28
    2e48:	e5 e0       	ldi	r30, 0x05	; 5
    2e4a:	6e 0e       	add	r6, r30
    2e4c:	71 1c       	adc	r7, r1
    2e4e:	81 e0       	ldi	r24, 0x01	; 1
    2e50:	90 e0       	ldi	r25, 0x00	; 0
    2e52:	8c 0f       	add	r24, r28
    2e54:	9d 1f       	adc	r25, r29
    2e56:	83 5b       	subi	r24, 0xB3	; 179
    2e58:	9e 4f       	sbci	r25, 0xFE	; 254
    2e5a:	ce 5b       	subi	r28, 0xBE	; 190
    2e5c:	de 4f       	sbci	r29, 0xFE	; 254
    2e5e:	99 83       	std	Y+1, r25	; 0x01
    2e60:	88 83       	st	Y, r24
    2e62:	c2 54       	subi	r28, 0x42	; 66
    2e64:	d1 40       	sbci	r29, 0x01	; 1
    2e66:	fe 01       	movw	r30, r28
    2e68:	31 96       	adiw	r30, 0x01	; 1
    2e6a:	c1 5c       	subi	r28, 0xC1	; 193
    2e6c:	de 4f       	sbci	r29, 0xFE	; 254
    2e6e:	f9 83       	std	Y+1, r31	; 0x01
    2e70:	e8 83       	st	Y, r30
    2e72:	cf 53       	subi	r28, 0x3F	; 63
    2e74:	d1 40       	sbci	r29, 0x01	; 1
		
		// Take old motor marker switch and convert
		if ((P1_sensors & (1 << MotorMarker)) != 0)
		{
			// Set the new value in the right place
			mixer_buffer[4 + (i * NEWSIZE)] = MOTOR;
    2e76:	82 e0       	ldi	r24, 0x02	; 2
    2e78:	58 2e       	mov	r5, r24
			{
				mixer_buffer[18 + (i * NEWSIZE)] = SCALE;
			}
			else
			{
				mixer_buffer[18 + (i * NEWSIZE)] = ON;
    2e7a:	44 24       	eor	r4, r4
    2e7c:	43 94       	inc	r4
	for (i = 0; i < MAX_OUTPUTS; i++)
	{
		// Move all bytes from the OLD P1_offset [4] up by one to make space for the Motor_marker byte
		src = &mixer_buffer[4 + (i * NEWSIZE)];	// The old P1_offset byte
		dst = &mixer_buffer[5 + (i * NEWSIZE)];
		memmove(dst, src, (OLDSIZE - 4));// Move all but P1_value, P2_value
    2e7e:	49 e1       	ldi	r20, 0x19	; 25
    2e80:	50 e0       	ldi	r21, 0x00	; 0
    2e82:	b3 01       	movw	r22, r6
    2e84:	c8 01       	movw	r24, r16
    2e86:	48 97       	sbiw	r24, 0x18	; 24
    2e88:	0e 94 f0 48 	call	0x91e0	; 0x91e0 <memmove>

		// Save the old switches
		P1_sensors = mixer_buffer[18 + (i * NEWSIZE)];
    2e8c:	f4 01       	movw	r30, r8
    2e8e:	30 80       	ld	r3, Z
		P2_sensors = mixer_buffer[19 + (i * NEWSIZE)];
    2e90:	f5 01       	movw	r30, r10
    2e92:	20 81       	ld	r18, Z
		P1_scale = mixer_buffer[20 + (i * NEWSIZE)];
    2e94:	f6 01       	movw	r30, r12
    2e96:	30 81       	ld	r19, Z
		P2_scale = mixer_buffer[21 + (i * NEWSIZE)];
    2e98:	cf 5c       	subi	r28, 0xCF	; 207
    2e9a:	de 4f       	sbci	r29, 0xFE	; 254
    2e9c:	e8 81       	ld	r30, Y
    2e9e:	f9 81       	ldd	r31, Y+1	; 0x01
    2ea0:	c1 53       	subi	r28, 0x31	; 49
    2ea2:	d1 40       	sbci	r29, 0x01	; 1
    2ea4:	20 80       	ld	r2, Z
		
		// Take old motor marker switch and convert
		if ((P1_sensors & (1 << MotorMarker)) != 0)
		{
			// Set the new value in the right place
			mixer_buffer[4 + (i * NEWSIZE)] = MOTOR;
    2ea6:	f3 01       	movw	r30, r6
		P2_sensors = mixer_buffer[19 + (i * NEWSIZE)];
		P1_scale = mixer_buffer[20 + (i * NEWSIZE)];
		P2_scale = mixer_buffer[21 + (i * NEWSIZE)];
		
		// Take old motor marker switch and convert
		if ((P1_sensors & (1 << MotorMarker)) != 0)
    2ea8:	36 fe       	sbrs	r3, 6
    2eaa:	02 c0       	rjmp	.+4      	; 0x2eb0 <Update_V1_0_to_V1_1+0x174>
		{
			// Set the new value in the right place
			mixer_buffer[4 + (i * NEWSIZE)] = MOTOR;
    2eac:	50 82       	st	Z, r5
    2eae:	01 c0       	rjmp	.+2      	; 0x2eb2 <Update_V1_0_to_V1_1+0x176>
		}
		else
		{
			mixer_buffer[4 + (i * NEWSIZE)] = ASERVO;
    2eb0:	10 82       	st	Z, r1
		}

		// Move the universal source bytes (8) up eight bytes
		src = &mixer_buffer[22 + (i * NEWSIZE)]; // 21 + 1
		dst = &mixer_buffer[30 + (i * NEWSIZE)];
		memmove(dst, src, 8);
    2eb2:	48 e0       	ldi	r20, 0x08	; 8
    2eb4:	50 e0       	ldi	r21, 0x00	; 0
    2eb6:	b7 01       	movw	r22, r14
    2eb8:	c8 01       	movw	r24, r16
    2eba:	01 96       	adiw	r24, 0x01	; 1
    2ebc:	cc 5b       	subi	r28, 0xBC	; 188
    2ebe:	de 4f       	sbci	r29, 0xFE	; 254
    2ec0:	28 83       	st	Y, r18
    2ec2:	c4 54       	subi	r28, 0x44	; 68
    2ec4:	d1 40       	sbci	r29, 0x01	; 1
    2ec6:	cb 5b       	subi	r28, 0xBB	; 187
    2ec8:	de 4f       	sbci	r29, 0xFE	; 254
    2eca:	38 83       	st	Y, r19
    2ecc:	c5 54       	subi	r28, 0x45	; 69
    2ece:	d1 40       	sbci	r29, 0x01	; 1
    2ed0:	0e 94 f0 48 	call	0x91e0	; 0x91e0 <memmove>
    2ed4:	80 e0       	ldi	r24, 0x00	; 0
    2ed6:	90 e0       	ldi	r25, 0x00	; 0
    2ed8:	cb 5b       	subi	r28, 0xBB	; 187
    2eda:	de 4f       	sbci	r29, 0xFE	; 254
    2edc:	38 81       	ld	r19, Y
    2ede:	c5 54       	subi	r28, 0x45	; 69
    2ee0:	d1 40       	sbci	r29, 0x01	; 1
    2ee2:	cc 5b       	subi	r28, 0xBC	; 188
    2ee4:	de 4f       	sbci	r29, 0xFE	; 254
    2ee6:	28 81       	ld	r18, Y
    2ee8:	c4 54       	subi	r28, 0x44	; 68
    2eea:	d1 40       	sbci	r29, 0x01	; 1
    2eec:	c1 5c       	subi	r28, 0xC1	; 193
    2eee:	de 4f       	sbci	r29, 0xFE	; 254
    2ef0:	e8 81       	ld	r30, Y
    2ef2:	f9 81       	ldd	r31, Y+1	; 0x01
    2ef4:	cf 53       	subi	r28, 0x3F	; 63
    2ef6:	d1 40       	sbci	r29, 0x01	; 1
    2ef8:	e8 0f       	add	r30, r24
    2efa:	f9 1f       	adc	r31, r25
		
		// Convert old "None" settings to new ones
		// Skip every second byte
		for (j = 0; j < 8; j += 2)
		{
			if (mixer_buffer[30 + (i * NEWSIZE) + j] == 13) // 13 was the old "None"
    2efc:	46 8d       	ldd	r20, Z+30	; 0x1e
    2efe:	4d 30       	cpi	r20, 0x0D	; 13
    2f00:	11 f4       	brne	.+4      	; 0x2f06 <Update_V1_0_to_V1_1+0x1ca>
			{
				mixer_buffer[30 + (i * NEWSIZE) + j] = NOMIX;
    2f02:	4f e0       	ldi	r20, 0x0F	; 15
    2f04:	46 8f       	std	Z+30, r20	; 0x1e
    2f06:	02 96       	adiw	r24, 0x02	; 2
		memmove(dst, src, 8);

		
		// Convert old "None" settings to new ones
		// Skip every second byte
		for (j = 0; j < 8; j += 2)
    2f08:	88 30       	cpi	r24, 0x08	; 8
    2f0a:	91 05       	cpc	r25, r1
    2f0c:	79 f7       	brne	.-34     	; 0x2eec <Update_V1_0_to_V1_1+0x1b0>
		// P1 roll gyro
		if ((P1_sensors & (1 << RollGyro)) != 0)
		{
			if ((P1_scale & (1 << RollScale)) != 0)
			{
				mixer_buffer[18 + (i * NEWSIZE)] = SCALE;
    2f0e:	f4 01       	movw	r30, r8
			}			
		}

		// Expand the old switches into new bytes
		// P1 roll gyro
		if ((P1_sensors & (1 << RollGyro)) != 0)
    2f10:	30 fe       	sbrs	r3, 0
    2f12:	06 c0       	rjmp	.+12     	; 0x2f20 <Update_V1_0_to_V1_1+0x1e4>
		{
			if ((P1_scale & (1 << RollScale)) != 0)
    2f14:	30 ff       	sbrs	r19, 0
    2f16:	02 c0       	rjmp	.+4      	; 0x2f1c <Update_V1_0_to_V1_1+0x1e0>
			{
				mixer_buffer[18 + (i * NEWSIZE)] = SCALE;
    2f18:	50 82       	st	Z, r5
    2f1a:	03 c0       	rjmp	.+6      	; 0x2f22 <Update_V1_0_to_V1_1+0x1e6>
			}
			else
			{
				mixer_buffer[18 + (i * NEWSIZE)] = ON;
    2f1c:	40 82       	st	Z, r4
    2f1e:	01 c0       	rjmp	.+2      	; 0x2f22 <Update_V1_0_to_V1_1+0x1e6>
			}
		}
		else
		{
			mixer_buffer[18 + (i * NEWSIZE)] = OFF;
    2f20:	10 82       	st	Z, r1
		// P2 roll gyro
		if ((P2_sensors & (1 << RollGyro)) != 0)
		{
			if ((P2_scale & (1 << RollScale)) != 0)
			{
				mixer_buffer[19 + (i * NEWSIZE)] = SCALE;
    2f22:	f5 01       	movw	r30, r10
		{
			mixer_buffer[18 + (i * NEWSIZE)] = OFF;
		}

		// P2 roll gyro
		if ((P2_sensors & (1 << RollGyro)) != 0)
    2f24:	20 ff       	sbrs	r18, 0
    2f26:	06 c0       	rjmp	.+12     	; 0x2f34 <Update_V1_0_to_V1_1+0x1f8>
		{
			if ((P2_scale & (1 << RollScale)) != 0)
    2f28:	20 fe       	sbrs	r2, 0
    2f2a:	02 c0       	rjmp	.+4      	; 0x2f30 <Update_V1_0_to_V1_1+0x1f4>
			{
				mixer_buffer[19 + (i * NEWSIZE)] = SCALE;
    2f2c:	50 82       	st	Z, r5
    2f2e:	03 c0       	rjmp	.+6      	; 0x2f36 <Update_V1_0_to_V1_1+0x1fa>
			}
			else
			{
				mixer_buffer[19 + (i * NEWSIZE)] = ON;
    2f30:	40 82       	st	Z, r4
    2f32:	01 c0       	rjmp	.+2      	; 0x2f36 <Update_V1_0_to_V1_1+0x1fa>
			}
		}
		else
		{
			mixer_buffer[19 + (i * NEWSIZE)] = OFF;
    2f34:	10 82       	st	Z, r1
		// P1 pitch gyro
		if ((P1_sensors & (1 << PitchGyro)) != 0)
		{
			if ((P1_scale & (1 << PitchScale)) != 0)
			{
				mixer_buffer[20 + (i * NEWSIZE)] = SCALE;
    2f36:	f6 01       	movw	r30, r12
		{
			mixer_buffer[19 + (i * NEWSIZE)] = OFF;
		}

		// P1 pitch gyro
		if ((P1_sensors & (1 << PitchGyro)) != 0)
    2f38:	31 fe       	sbrs	r3, 1
    2f3a:	06 c0       	rjmp	.+12     	; 0x2f48 <Update_V1_0_to_V1_1+0x20c>
		{
			if ((P1_scale & (1 << PitchScale)) != 0)
    2f3c:	31 ff       	sbrs	r19, 1
    2f3e:	02 c0       	rjmp	.+4      	; 0x2f44 <Update_V1_0_to_V1_1+0x208>
			{
				mixer_buffer[20 + (i * NEWSIZE)] = SCALE;
    2f40:	50 82       	st	Z, r5
    2f42:	03 c0       	rjmp	.+6      	; 0x2f4a <Update_V1_0_to_V1_1+0x20e>
			}
			else
			{
				mixer_buffer[20 + (i * NEWSIZE)] = ON;
    2f44:	40 82       	st	Z, r4
    2f46:	01 c0       	rjmp	.+2      	; 0x2f4a <Update_V1_0_to_V1_1+0x20e>
			}
		}
		else
		{
			mixer_buffer[20 + (i * NEWSIZE)] = OFF;
    2f48:	10 82       	st	Z, r1
		// P2 pitch gyro
		if ((P2_sensors & (1 << PitchGyro)) != 0)
		{
			if ((P2_scale & (1 << PitchScale)) != 0)
			{
				mixer_buffer[21 + (i * NEWSIZE)] = SCALE;
    2f4a:	cf 5c       	subi	r28, 0xCF	; 207
    2f4c:	de 4f       	sbci	r29, 0xFE	; 254
    2f4e:	e8 81       	ld	r30, Y
    2f50:	f9 81       	ldd	r31, Y+1	; 0x01
    2f52:	c1 53       	subi	r28, 0x31	; 49
    2f54:	d1 40       	sbci	r29, 0x01	; 1
		{
			mixer_buffer[20 + (i * NEWSIZE)] = OFF;
		}

		// P2 pitch gyro
		if ((P2_sensors & (1 << PitchGyro)) != 0)
    2f56:	21 ff       	sbrs	r18, 1
    2f58:	06 c0       	rjmp	.+12     	; 0x2f66 <Update_V1_0_to_V1_1+0x22a>
		{
			if ((P2_scale & (1 << PitchScale)) != 0)
    2f5a:	21 fe       	sbrs	r2, 1
    2f5c:	02 c0       	rjmp	.+4      	; 0x2f62 <Update_V1_0_to_V1_1+0x226>
			{
				mixer_buffer[21 + (i * NEWSIZE)] = SCALE;
    2f5e:	50 82       	st	Z, r5
    2f60:	03 c0       	rjmp	.+6      	; 0x2f68 <Update_V1_0_to_V1_1+0x22c>
			}
			else
			{
				mixer_buffer[21 + (i * NEWSIZE)] = ON;
    2f62:	40 82       	st	Z, r4
    2f64:	01 c0       	rjmp	.+2      	; 0x2f68 <Update_V1_0_to_V1_1+0x22c>
			}
		}
		else
		{
			mixer_buffer[21 + (i * NEWSIZE)] = OFF;
    2f66:	10 82       	st	Z, r1
		// P1 yaw_gyro
		if ((P1_sensors & (1 << YawGyro)) != 0)
		{
			if ((P1_scale & (1 << YawScale)) != 0)
			{
				mixer_buffer[22 + (i * NEWSIZE)] = SCALE;
    2f68:	f7 01       	movw	r30, r14
		{
			mixer_buffer[21 + (i * NEWSIZE)] = OFF;
		}

		// P1 yaw_gyro
		if ((P1_sensors & (1 << YawGyro)) != 0)
    2f6a:	32 fe       	sbrs	r3, 2
    2f6c:	06 c0       	rjmp	.+12     	; 0x2f7a <Update_V1_0_to_V1_1+0x23e>
		{
			if ((P1_scale & (1 << YawScale)) != 0)
    2f6e:	32 ff       	sbrs	r19, 2
    2f70:	02 c0       	rjmp	.+4      	; 0x2f76 <Update_V1_0_to_V1_1+0x23a>
			{
				mixer_buffer[22 + (i * NEWSIZE)] = SCALE;
    2f72:	50 82       	st	Z, r5
    2f74:	03 c0       	rjmp	.+6      	; 0x2f7c <Update_V1_0_to_V1_1+0x240>
			}
			else
			{
				mixer_buffer[22 + (i * NEWSIZE)] = ON;
    2f76:	40 82       	st	Z, r4
    2f78:	01 c0       	rjmp	.+2      	; 0x2f7c <Update_V1_0_to_V1_1+0x240>
			}
		}
		else
		{
			mixer_buffer[22 + (i * NEWSIZE)] = OFF;
    2f7a:	10 82       	st	Z, r1
		// P2 yaw gyro
		if ((P2_sensors & (1 << YawGyro)) != 0)
		{
			if ((P2_scale & (1 << YawScale)) != 0)
			{
				mixer_buffer[23 + (i * NEWSIZE)] = SCALE;
    2f7c:	cb 5c       	subi	r28, 0xCB	; 203
    2f7e:	de 4f       	sbci	r29, 0xFE	; 254
    2f80:	e8 81       	ld	r30, Y
    2f82:	f9 81       	ldd	r31, Y+1	; 0x01
    2f84:	c5 53       	subi	r28, 0x35	; 53
    2f86:	d1 40       	sbci	r29, 0x01	; 1
		{
			mixer_buffer[22 + (i * NEWSIZE)] = OFF;
		}

		// P2 yaw gyro
		if ((P2_sensors & (1 << YawGyro)) != 0)
    2f88:	22 ff       	sbrs	r18, 2
    2f8a:	06 c0       	rjmp	.+12     	; 0x2f98 <Update_V1_0_to_V1_1+0x25c>
		{
			if ((P2_scale & (1 << YawScale)) != 0)
    2f8c:	22 fe       	sbrs	r2, 2
    2f8e:	02 c0       	rjmp	.+4      	; 0x2f94 <Update_V1_0_to_V1_1+0x258>
			{
				mixer_buffer[23 + (i * NEWSIZE)] = SCALE;
    2f90:	50 82       	st	Z, r5
    2f92:	03 c0       	rjmp	.+6      	; 0x2f9a <Update_V1_0_to_V1_1+0x25e>
			}
			else
			{
				mixer_buffer[23 + (i * NEWSIZE)] = ON;
    2f94:	40 82       	st	Z, r4
    2f96:	01 c0       	rjmp	.+2      	; 0x2f9a <Update_V1_0_to_V1_1+0x25e>
			}
		}
		else
		{
			mixer_buffer[23 + (i * NEWSIZE)] = OFF;
    2f98:	10 82       	st	Z, r1
		// P1 roll acc
		if ((P1_sensors & (1 << RollAcc)) != 0)
		{
			if ((P1_scale & (1 << AccRollScale)) != 0)
			{
				mixer_buffer[24 + (i * NEWSIZE)] = SCALE;
    2f9a:	c5 5c       	subi	r28, 0xC5	; 197
    2f9c:	de 4f       	sbci	r29, 0xFE	; 254
    2f9e:	e8 81       	ld	r30, Y
    2fa0:	f9 81       	ldd	r31, Y+1	; 0x01
    2fa2:	cb 53       	subi	r28, 0x3B	; 59
    2fa4:	d1 40       	sbci	r29, 0x01	; 1
		{
			mixer_buffer[23 + (i * NEWSIZE)] = OFF;
		}

		// P1 roll acc
		if ((P1_sensors & (1 << RollAcc)) != 0)
    2fa6:	33 fe       	sbrs	r3, 3
    2fa8:	06 c0       	rjmp	.+12     	; 0x2fb6 <Update_V1_0_to_V1_1+0x27a>
		{
			if ((P1_scale & (1 << AccRollScale)) != 0)
    2faa:	33 ff       	sbrs	r19, 3
    2fac:	02 c0       	rjmp	.+4      	; 0x2fb2 <Update_V1_0_to_V1_1+0x276>
			{
				mixer_buffer[24 + (i * NEWSIZE)] = SCALE;
    2fae:	50 82       	st	Z, r5
    2fb0:	03 c0       	rjmp	.+6      	; 0x2fb8 <Update_V1_0_to_V1_1+0x27c>
			}
			else
			{
				mixer_buffer[24 + (i * NEWSIZE)] = ON;
    2fb2:	40 82       	st	Z, r4
    2fb4:	01 c0       	rjmp	.+2      	; 0x2fb8 <Update_V1_0_to_V1_1+0x27c>
			}
		}
		else
		{
			mixer_buffer[24 + (i * NEWSIZE)] = OFF;
    2fb6:	10 82       	st	Z, r1
		// P2 roll acc
		if ((P2_sensors & (1 << RollAcc)) != 0)
		{
			if ((P2_scale & (1 << AccRollScale)) != 0)
			{
				mixer_buffer[25 + (i * NEWSIZE)] = SCALE;
    2fb8:	c9 5c       	subi	r28, 0xC9	; 201
    2fba:	de 4f       	sbci	r29, 0xFE	; 254
    2fbc:	e8 81       	ld	r30, Y
    2fbe:	f9 81       	ldd	r31, Y+1	; 0x01
    2fc0:	c7 53       	subi	r28, 0x37	; 55
    2fc2:	d1 40       	sbci	r29, 0x01	; 1
		{
			mixer_buffer[24 + (i * NEWSIZE)] = OFF;
		}

		// P2 roll acc
		if ((P2_sensors & (1 << RollAcc)) != 0)
    2fc4:	23 ff       	sbrs	r18, 3
    2fc6:	06 c0       	rjmp	.+12     	; 0x2fd4 <Update_V1_0_to_V1_1+0x298>
		{
			if ((P2_scale & (1 << AccRollScale)) != 0)
    2fc8:	23 fe       	sbrs	r2, 3
    2fca:	02 c0       	rjmp	.+4      	; 0x2fd0 <Update_V1_0_to_V1_1+0x294>
			{
				mixer_buffer[25 + (i * NEWSIZE)] = SCALE;
    2fcc:	50 82       	st	Z, r5
    2fce:	03 c0       	rjmp	.+6      	; 0x2fd6 <Update_V1_0_to_V1_1+0x29a>
			}
			else
			{
				mixer_buffer[25 + (i * NEWSIZE)] = ON;
    2fd0:	40 82       	st	Z, r4
    2fd2:	01 c0       	rjmp	.+2      	; 0x2fd6 <Update_V1_0_to_V1_1+0x29a>
			}
		}
		else
		{
			mixer_buffer[25 + (i * NEWSIZE)] = OFF;
    2fd4:	10 82       	st	Z, r1
		// P1 pitch acc
		if ((P1_sensors & (1 << PitchAcc)) != 0)
		{
			if ((P1_scale & (1 << AccPitchScale)) != 0)
			{
				mixer_buffer[26 + (i * NEWSIZE)] = SCALE;
    2fd6:	c3 5c       	subi	r28, 0xC3	; 195
    2fd8:	de 4f       	sbci	r29, 0xFE	; 254
    2fda:	e8 81       	ld	r30, Y
    2fdc:	f9 81       	ldd	r31, Y+1	; 0x01
    2fde:	cd 53       	subi	r28, 0x3D	; 61
    2fe0:	d1 40       	sbci	r29, 0x01	; 1
		{
			mixer_buffer[25 + (i * NEWSIZE)] = OFF;
		}

		// P1 pitch acc
		if ((P1_sensors & (1 << PitchAcc)) != 0)
    2fe2:	34 fe       	sbrs	r3, 4
    2fe4:	06 c0       	rjmp	.+12     	; 0x2ff2 <Update_V1_0_to_V1_1+0x2b6>
		{
			if ((P1_scale & (1 << AccPitchScale)) != 0)
    2fe6:	34 ff       	sbrs	r19, 4
    2fe8:	02 c0       	rjmp	.+4      	; 0x2fee <Update_V1_0_to_V1_1+0x2b2>
			{
				mixer_buffer[26 + (i * NEWSIZE)] = SCALE;
    2fea:	50 82       	st	Z, r5
    2fec:	03 c0       	rjmp	.+6      	; 0x2ff4 <Update_V1_0_to_V1_1+0x2b8>
			}
			else
			{
				mixer_buffer[26 + (i * NEWSIZE)] = ON;
    2fee:	40 82       	st	Z, r4
    2ff0:	01 c0       	rjmp	.+2      	; 0x2ff4 <Update_V1_0_to_V1_1+0x2b8>
			}
		}
		else
		{
			mixer_buffer[26 + (i * NEWSIZE)] = OFF;
    2ff2:	10 82       	st	Z, r1
		// P2 pitch acc
		if ((P2_sensors & (1 << PitchAcc)) != 0)
		{
			if ((P2_scale & (1 << AccPitchScale)) != 0)
			{
				mixer_buffer[27 + (i * NEWSIZE)] = SCALE;
    2ff4:	cd 5c       	subi	r28, 0xCD	; 205
    2ff6:	de 4f       	sbci	r29, 0xFE	; 254
    2ff8:	e8 81       	ld	r30, Y
    2ffa:	f9 81       	ldd	r31, Y+1	; 0x01
    2ffc:	c3 53       	subi	r28, 0x33	; 51
    2ffe:	d1 40       	sbci	r29, 0x01	; 1
		{
			mixer_buffer[26 + (i * NEWSIZE)] = OFF;
		}

		// P2 pitch acc
		if ((P2_sensors & (1 << PitchAcc)) != 0)
    3000:	24 ff       	sbrs	r18, 4
    3002:	06 c0       	rjmp	.+12     	; 0x3010 <Update_V1_0_to_V1_1+0x2d4>
		{
			if ((P2_scale & (1 << AccPitchScale)) != 0)
    3004:	24 fe       	sbrs	r2, 4
    3006:	02 c0       	rjmp	.+4      	; 0x300c <Update_V1_0_to_V1_1+0x2d0>
			{
				mixer_buffer[27 + (i * NEWSIZE)] = SCALE;
    3008:	50 82       	st	Z, r5
    300a:	03 c0       	rjmp	.+6      	; 0x3012 <Update_V1_0_to_V1_1+0x2d6>
			}
			else
			{
				mixer_buffer[27 + (i * NEWSIZE)] = ON;
    300c:	40 82       	st	Z, r4
    300e:	01 c0       	rjmp	.+2      	; 0x3012 <Update_V1_0_to_V1_1+0x2d6>
			}
		}
		else
		{
			mixer_buffer[27 + (i * NEWSIZE)] = OFF;
    3010:	10 82       	st	Z, r1
		// P1 Z delta acc
		if ((P1_sensors & (1 << ZDeltaAcc)) != 0)
		{
			if ((P1_scale & (1 << AccZScale)) != 0)
			{
				mixer_buffer[28 + (i * NEWSIZE)] = SCALE;
    3012:	c7 5c       	subi	r28, 0xC7	; 199
    3014:	de 4f       	sbci	r29, 0xFE	; 254
    3016:	e8 81       	ld	r30, Y
    3018:	f9 81       	ldd	r31, Y+1	; 0x01
    301a:	c9 53       	subi	r28, 0x39	; 57
    301c:	d1 40       	sbci	r29, 0x01	; 1
		{
			mixer_buffer[27 + (i * NEWSIZE)] = OFF;
		}

		// P1 Z delta acc
		if ((P1_sensors & (1 << ZDeltaAcc)) != 0)
    301e:	35 fe       	sbrs	r3, 5
    3020:	06 c0       	rjmp	.+12     	; 0x302e <Update_V1_0_to_V1_1+0x2f2>
		{
			if ((P1_scale & (1 << AccZScale)) != 0)
    3022:	35 ff       	sbrs	r19, 5
    3024:	02 c0       	rjmp	.+4      	; 0x302a <Update_V1_0_to_V1_1+0x2ee>
			{
				mixer_buffer[28 + (i * NEWSIZE)] = SCALE;
    3026:	50 82       	st	Z, r5
    3028:	03 c0       	rjmp	.+6      	; 0x3030 <Update_V1_0_to_V1_1+0x2f4>
			}
			else
			{
				mixer_buffer[28 + (i * NEWSIZE)] = ON;
    302a:	40 82       	st	Z, r4
    302c:	01 c0       	rjmp	.+2      	; 0x3030 <Update_V1_0_to_V1_1+0x2f4>
			}
		}
		else
		{
			mixer_buffer[28 + (i * NEWSIZE)] = OFF;
    302e:	10 82       	st	Z, r1
		// P2 Z delta acc
		if ((P2_sensors & (1 << ZDeltaAcc)) != 0)
		{
			if ((P2_scale & (1 << AccZScale)) != 0)
			{
				mixer_buffer[29 + (i * NEWSIZE)] = SCALE;
    3030:	f8 01       	movw	r30, r16
		{
			mixer_buffer[28 + (i * NEWSIZE)] = OFF;
		}

		// P2 Z delta acc
		if ((P2_sensors & (1 << ZDeltaAcc)) != 0)
    3032:	25 ff       	sbrs	r18, 5
    3034:	06 c0       	rjmp	.+12     	; 0x3042 <Update_V1_0_to_V1_1+0x306>
		{
			if ((P2_scale & (1 << AccZScale)) != 0)
    3036:	25 fe       	sbrs	r2, 5
    3038:	02 c0       	rjmp	.+4      	; 0x303e <Update_V1_0_to_V1_1+0x302>
			{
				mixer_buffer[29 + (i * NEWSIZE)] = SCALE;
    303a:	50 82       	st	Z, r5
    303c:	03 c0       	rjmp	.+6      	; 0x3044 <Update_V1_0_to_V1_1+0x308>
			}
			else
			{
				mixer_buffer[29 + (i * NEWSIZE)] = ON;
    303e:	40 82       	st	Z, r4
    3040:	01 c0       	rjmp	.+2      	; 0x3044 <Update_V1_0_to_V1_1+0x308>
			}
		}
		else
		{
			mixer_buffer[29 + (i * NEWSIZE)] = OFF;
    3042:	10 82       	st	Z, r1
    3044:	c1 5c       	subi	r28, 0xC1	; 193
    3046:	de 4f       	sbci	r29, 0xFE	; 254
    3048:	88 81       	ld	r24, Y
    304a:	99 81       	ldd	r25, Y+1	; 0x01
    304c:	cf 53       	subi	r28, 0x3F	; 63
    304e:	d1 40       	sbci	r29, 0x01	; 1
    3050:	86 96       	adiw	r24, 0x26	; 38
    3052:	c1 5c       	subi	r28, 0xC1	; 193
    3054:	de 4f       	sbci	r29, 0xFE	; 254
    3056:	99 83       	std	Y+1, r25	; 0x01
    3058:	88 83       	st	Y, r24
    305a:	cf 53       	subi	r28, 0x3F	; 63
    305c:	d1 40       	sbci	r29, 0x01	; 1
    305e:	96 e2       	ldi	r25, 0x26	; 38
    3060:	89 0e       	add	r8, r25
    3062:	91 1c       	adc	r9, r1
    3064:	e6 e2       	ldi	r30, 0x26	; 38
    3066:	ae 0e       	add	r10, r30
    3068:	b1 1c       	adc	r11, r1
    306a:	f6 e2       	ldi	r31, 0x26	; 38
    306c:	cf 0e       	add	r12, r31
    306e:	d1 1c       	adc	r13, r1
    3070:	cf 5c       	subi	r28, 0xCF	; 207
    3072:	de 4f       	sbci	r29, 0xFE	; 254
    3074:	88 81       	ld	r24, Y
    3076:	99 81       	ldd	r25, Y+1	; 0x01
    3078:	c1 53       	subi	r28, 0x31	; 49
    307a:	d1 40       	sbci	r29, 0x01	; 1
    307c:	86 96       	adiw	r24, 0x26	; 38
    307e:	cf 5c       	subi	r28, 0xCF	; 207
    3080:	de 4f       	sbci	r29, 0xFE	; 254
    3082:	99 83       	std	Y+1, r25	; 0x01
    3084:	88 83       	st	Y, r24
    3086:	c1 53       	subi	r28, 0x31	; 49
    3088:	d1 40       	sbci	r29, 0x01	; 1
    308a:	0a 5d       	subi	r16, 0xDA	; 218
    308c:	1f 4f       	sbci	r17, 0xFF	; 255
    308e:	c7 5c       	subi	r28, 0xC7	; 199
    3090:	de 4f       	sbci	r29, 0xFE	; 254
    3092:	e8 81       	ld	r30, Y
    3094:	f9 81       	ldd	r31, Y+1	; 0x01
    3096:	c9 53       	subi	r28, 0x39	; 57
    3098:	d1 40       	sbci	r29, 0x01	; 1
    309a:	b6 96       	adiw	r30, 0x26	; 38
    309c:	c7 5c       	subi	r28, 0xC7	; 199
    309e:	de 4f       	sbci	r29, 0xFE	; 254
    30a0:	f9 83       	std	Y+1, r31	; 0x01
    30a2:	e8 83       	st	Y, r30
    30a4:	c9 53       	subi	r28, 0x39	; 57
    30a6:	d1 40       	sbci	r29, 0x01	; 1
    30a8:	cd 5c       	subi	r28, 0xCD	; 205
    30aa:	de 4f       	sbci	r29, 0xFE	; 254
    30ac:	88 81       	ld	r24, Y
    30ae:	99 81       	ldd	r25, Y+1	; 0x01
    30b0:	c3 53       	subi	r28, 0x33	; 51
    30b2:	d1 40       	sbci	r29, 0x01	; 1
    30b4:	86 96       	adiw	r24, 0x26	; 38
    30b6:	cd 5c       	subi	r28, 0xCD	; 205
    30b8:	de 4f       	sbci	r29, 0xFE	; 254
    30ba:	99 83       	std	Y+1, r25	; 0x01
    30bc:	88 83       	st	Y, r24
    30be:	c3 53       	subi	r28, 0x33	; 51
    30c0:	d1 40       	sbci	r29, 0x01	; 1
    30c2:	c3 5c       	subi	r28, 0xC3	; 195
    30c4:	de 4f       	sbci	r29, 0xFE	; 254
    30c6:	e8 81       	ld	r30, Y
    30c8:	f9 81       	ldd	r31, Y+1	; 0x01
    30ca:	cd 53       	subi	r28, 0x3D	; 61
    30cc:	d1 40       	sbci	r29, 0x01	; 1
    30ce:	b6 96       	adiw	r30, 0x26	; 38
    30d0:	c3 5c       	subi	r28, 0xC3	; 195
    30d2:	de 4f       	sbci	r29, 0xFE	; 254
    30d4:	f9 83       	std	Y+1, r31	; 0x01
    30d6:	e8 83       	st	Y, r30
    30d8:	cd 53       	subi	r28, 0x3D	; 61
    30da:	d1 40       	sbci	r29, 0x01	; 1
    30dc:	c9 5c       	subi	r28, 0xC9	; 201
    30de:	de 4f       	sbci	r29, 0xFE	; 254
    30e0:	88 81       	ld	r24, Y
    30e2:	99 81       	ldd	r25, Y+1	; 0x01
    30e4:	c7 53       	subi	r28, 0x37	; 55
    30e6:	d1 40       	sbci	r29, 0x01	; 1
    30e8:	86 96       	adiw	r24, 0x26	; 38
    30ea:	c9 5c       	subi	r28, 0xC9	; 201
    30ec:	de 4f       	sbci	r29, 0xFE	; 254
    30ee:	99 83       	std	Y+1, r25	; 0x01
    30f0:	88 83       	st	Y, r24
    30f2:	c7 53       	subi	r28, 0x37	; 55
    30f4:	d1 40       	sbci	r29, 0x01	; 1
    30f6:	c5 5c       	subi	r28, 0xC5	; 197
    30f8:	de 4f       	sbci	r29, 0xFE	; 254
    30fa:	e8 81       	ld	r30, Y
    30fc:	f9 81       	ldd	r31, Y+1	; 0x01
    30fe:	cb 53       	subi	r28, 0x3B	; 59
    3100:	d1 40       	sbci	r29, 0x01	; 1
    3102:	b6 96       	adiw	r30, 0x26	; 38
    3104:	c5 5c       	subi	r28, 0xC5	; 197
    3106:	de 4f       	sbci	r29, 0xFE	; 254
    3108:	f9 83       	std	Y+1, r31	; 0x01
    310a:	e8 83       	st	Y, r30
    310c:	cb 53       	subi	r28, 0x3B	; 59
    310e:	d1 40       	sbci	r29, 0x01	; 1
    3110:	cb 5c       	subi	r28, 0xCB	; 203
    3112:	de 4f       	sbci	r29, 0xFE	; 254
    3114:	88 81       	ld	r24, Y
    3116:	99 81       	ldd	r25, Y+1	; 0x01
    3118:	c5 53       	subi	r28, 0x35	; 53
    311a:	d1 40       	sbci	r29, 0x01	; 1
    311c:	86 96       	adiw	r24, 0x26	; 38
    311e:	cb 5c       	subi	r28, 0xCB	; 203
    3120:	de 4f       	sbci	r29, 0xFE	; 254
    3122:	99 83       	std	Y+1, r25	; 0x01
    3124:	88 83       	st	Y, r24
    3126:	c5 53       	subi	r28, 0x35	; 53
    3128:	d1 40       	sbci	r29, 0x01	; 1
    312a:	96 e2       	ldi	r25, 0x26	; 38
    312c:	e9 0e       	add	r14, r25
    312e:	f1 1c       	adc	r15, r1
    3130:	e6 e2       	ldi	r30, 0x26	; 38
    3132:	6e 0e       	add	r6, r30
    3134:	71 1c       	adc	r7, r1
		dst += (i * NEWSIZE);			// Step to next location for new data in the buffer
		memcpy(dst, src, OLDSIZE);		// Move only the old (smaller) data
	}

	// Rearrange one output at a time	
	for (i = 0; i < MAX_OUTPUTS; i++)
    3136:	ce 5b       	subi	r28, 0xBE	; 190
    3138:	de 4f       	sbci	r29, 0xFE	; 254
    313a:	88 81       	ld	r24, Y
    313c:	99 81       	ldd	r25, Y+1	; 0x01
    313e:	c2 54       	subi	r28, 0x42	; 66
    3140:	d1 40       	sbci	r29, 0x01	; 1
    3142:	08 17       	cp	r16, r24
    3144:	19 07       	cpc	r17, r25
    3146:	09 f0       	breq	.+2      	; 0x314a <Update_V1_0_to_V1_1+0x40e>
    3148:	9a ce       	rjmp	.-716    	; 0x2e7e <Update_V1_0_to_V1_1+0x142>
	}
		
	// Copy buffer back into new structure
	src = (void*)mixer_buffer;
	dst = (void*)Config.Channel;
	memcpy(dst, src, sizeof(mixer_buffer) - 1); // This appears to be spot on.
    314a:	8f e2       	ldi	r24, 0x2F	; 47
    314c:	91 e0       	ldi	r25, 0x01	; 1
    314e:	fe 01       	movw	r30, r28
    3150:	31 96       	adiw	r30, 0x01	; 1
    3152:	ab e3       	ldi	r26, 0x3B	; 59
    3154:	b6 e0       	ldi	r27, 0x06	; 6
    3156:	01 90       	ld	r0, Z+
    3158:	0d 92       	st	X+, r0
    315a:	01 97       	sbiw	r24, 0x01	; 1
    315c:	e1 f7       	brne	.-8      	; 0x3156 <Update_V1_0_to_V1_1+0x41a>

	// Restore corrupted byte manually
	Config.Channel[7].P2_source_b_volume = temp; 
    315e:	cf 5b       	subi	r28, 0xBF	; 191
    3160:	de 4f       	sbci	r29, 0xFE	; 254
    3162:	98 81       	ld	r25, Y
    3164:	c1 54       	subi	r28, 0x41	; 65
    3166:	d1 40       	sbci	r29, 0x01	; 1
    3168:	90 93 6a 07 	sts	0x076A, r25

	// Set magic number to V1.1 signature
	Config.setup = V1_1_SIGNATURE;
    316c:	86 e3       	ldi	r24, 0x36	; 54
    316e:	80 93 a9 05 	sts	0x05A9, r24
}
    3172:	cb 5b       	subi	r28, 0xBB	; 187
    3174:	de 4f       	sbci	r29, 0xFE	; 254
    3176:	0f b6       	in	r0, 0x3f	; 63
    3178:	f8 94       	cli
    317a:	de bf       	out	0x3e, r29	; 62
    317c:	0f be       	out	0x3f, r0	; 63
    317e:	cd bf       	out	0x3d, r28	; 61
    3180:	df 91       	pop	r29
    3182:	cf 91       	pop	r28
    3184:	1f 91       	pop	r17
    3186:	0f 91       	pop	r16
    3188:	ff 90       	pop	r15
    318a:	ef 90       	pop	r14
    318c:	df 90       	pop	r13
    318e:	cf 90       	pop	r12
    3190:	bf 90       	pop	r11
    3192:	af 90       	pop	r10
    3194:	9f 90       	pop	r9
    3196:	8f 90       	pop	r8
    3198:	7f 90       	pop	r7
    319a:	6f 90       	pop	r6
    319c:	5f 90       	pop	r5
    319e:	4f 90       	pop	r4
    31a0:	3f 90       	pop	r3
    31a2:	2f 90       	pop	r2
    31a4:	08 95       	ret

000031a6 <Update_V1_1_to_V1_1_B8>:

// Upgrade V1.1 structure to V1.1 Beta 8 structure
void Update_V1_1_to_V1_1_B8(void)
{
    31a6:	cf 93       	push	r28
    31a8:	df 93       	push	r29
    31aa:	cd b7       	in	r28, 0x3d	; 61
    31ac:	de b7       	in	r29, 0x3e	; 62
    31ae:	28 97       	sbiw	r28, 0x08	; 8
    31b0:	0f b6       	in	r0, 0x3f	; 63
    31b2:	f8 94       	cli
    31b4:	de bf       	out	0x3e, r29	; 62
    31b6:	0f be       	out	0x3f, r0	; 63
    31b8:	cd bf       	out	0x3d, r28	; 61
	int8_t	buffer[8];
	
	// Swap old settings into new
	buffer[0] = Config.RxMode;
    31ba:	80 91 d2 05 	lds	r24, 0x05D2
    31be:	89 83       	std	Y+1, r24	; 0x01
	buffer[1] = Config.MPU6050_LPF;
    31c0:	80 91 36 06 	lds	r24, 0x0636
    31c4:	8a 83       	std	Y+2, r24	; 0x02
	buffer[2] = Config.Servo_rate;
    31c6:	80 91 d3 05 	lds	r24, 0x05D3
    31ca:	8b 83       	std	Y+3, r24	; 0x03
	buffer[3] = Config.PWM_Sync;
    31cc:	80 91 d4 05 	lds	r24, 0x05D4
    31d0:	8c 83       	std	Y+4, r24	; 0x04
	buffer[4] = Config.TxSeq;
    31d2:	80 91 d5 05 	lds	r24, 0x05D5
    31d6:	8d 83       	std	Y+5, r24	; 0x05
	buffer[5] = Config.AileronPol;
    31d8:	90 91 d9 05 	lds	r25, 0x05D9
    31dc:	9e 83       	std	Y+6, r25	; 0x06
	buffer[6] = Config.ElevatorPol;
    31de:	90 91 da 05 	lds	r25, 0x05DA
    31e2:	9f 83       	std	Y+7, r25	; 0x07
	buffer[7] = Config.RudderPol;
    31e4:	90 91 3a 06 	lds	r25, 0x063A
    31e8:	98 87       	std	Y+8, r25	; 0x08
	
	// Copy back to RC items structure
	memcpy(&Config.RxMode, &buffer,7);
    31ea:	27 e0       	ldi	r18, 0x07	; 7
    31ec:	fe 01       	movw	r30, r28
    31ee:	31 96       	adiw	r30, 0x01	; 1
    31f0:	a2 ed       	ldi	r26, 0xD2	; 210
    31f2:	b5 e0       	ldi	r27, 0x05	; 5
    31f4:	01 90       	ld	r0, Z+
    31f6:	0d 92       	st	X+, r0
    31f8:	2a 95       	dec	r18
    31fa:	e1 f7       	brne	.-8      	; 0x31f4 <Update_V1_1_to_V1_1_B8+0x4e>
	
	// Copy back to General items structure
	Config.MPU6050_LPF = buffer[7];
    31fc:	90 93 36 06 	sts	0x0636, r25
	
	// "None" no longer an option for this channel
	if (Config.FlightChan == NOCHAN)
    3200:	88 30       	cpi	r24, 0x08	; 8
    3202:	19 f4       	brne	.+6      	; 0x320a <Update_V1_1_to_V1_1_B8+0x64>
	{
		Config.FlightChan = AUX3;
    3204:	87 e0       	ldi	r24, 0x07	; 7
    3206:	80 93 d6 05 	sts	0x05D6, r24
	}
	
	// Set magic number to V1.1 Beta 8 signature
	Config.setup = V1_1_B8_SIGNATURE;
    320a:	87 e3       	ldi	r24, 0x37	; 55
    320c:	80 93 a9 05 	sts	0x05A9, r24
}
    3210:	28 96       	adiw	r28, 0x08	; 8
    3212:	0f b6       	in	r0, 0x3f	; 63
    3214:	f8 94       	cli
    3216:	de bf       	out	0x3e, r29	; 62
    3218:	0f be       	out	0x3f, r0	; 63
    321a:	cd bf       	out	0x3d, r28	; 61
    321c:	df 91       	pop	r29
    321e:	cf 91       	pop	r28
    3220:	08 95       	ret

00003222 <Update_V1_1B8_to_V1_1_B10>:

// Upgrade V1.1 B8 settings to V1.1 Beta 10 settings
void Update_V1_1B8_to_V1_1_B10(void)
{
	// Reset filters to more appropriate values
	Config.Acc_LPF = convert_filter_B8_B10(Config.Acc_LPF);
    3222:	e0 91 37 06 	lds	r30, 0x0637
    3226:	e7 30       	cpi	r30, 0x07	; 7
    3228:	28 f4       	brcc	.+10     	; 0x3234 <Update_V1_1B8_to_V1_1_B10+0x12>
    322a:	f0 e0       	ldi	r31, 0x00	; 0
    322c:	e4 5f       	subi	r30, 0xF4	; 244
    322e:	fa 4f       	sbci	r31, 0xFA	; 250
    3230:	80 81       	ld	r24, Z
    3232:	01 c0       	rjmp	.+2      	; 0x3236 <Update_V1_1B8_to_V1_1_B10+0x14>
    3234:	87 e0       	ldi	r24, 0x07	; 7
    3236:	80 93 37 06 	sts	0x0637, r24
	Config.Gyro_LPF = convert_filter_B8_B10(Config.Gyro_LPF);
    323a:	e0 91 38 06 	lds	r30, 0x0638
    323e:	e7 30       	cpi	r30, 0x07	; 7
    3240:	28 f4       	brcc	.+10     	; 0x324c <Update_V1_1B8_to_V1_1_B10+0x2a>
    3242:	f0 e0       	ldi	r31, 0x00	; 0
    3244:	e4 5f       	subi	r30, 0xF4	; 244
    3246:	fa 4f       	sbci	r31, 0xFA	; 250
    3248:	80 81       	ld	r24, Z
    324a:	01 c0       	rjmp	.+2      	; 0x324e <Update_V1_1B8_to_V1_1_B10+0x2c>
    324c:	87 e0       	ldi	r24, 0x07	; 7
    324e:	80 93 38 06 	sts	0x0638, r24

	// Set magic number to V1.1 Beta 10 signature
	Config.setup = V1_1_B10_SIGNATURE;
    3252:	88 e3       	ldi	r24, 0x38	; 56
    3254:	80 93 a9 05 	sts	0x05A9, r24
    3258:	08 95       	ret

0000325a <Set_EEPROM_Default_Config>:
	return new_filter;
}

// Force a factory reset
void Set_EEPROM_Default_Config(void)
{
    325a:	cf 93       	push	r28
    325c:	df 93       	push	r29
	uint8_t i;
	
	// Clear entire Config space first
	memset(&Config.setup,0,(sizeof(Config)));
    325e:	88 e0       	ldi	r24, 0x08	; 8
    3260:	92 e0       	ldi	r25, 0x02	; 2
    3262:	e9 ea       	ldi	r30, 0xA9	; 169
    3264:	f5 e0       	ldi	r31, 0x05	; 5
    3266:	df 01       	movw	r26, r30
    3268:	9c 01       	movw	r18, r24
    326a:	1d 92       	st	X+, r1
    326c:	21 50       	subi	r18, 0x01	; 1
    326e:	30 40       	sbci	r19, 0x00	; 0
    3270:	e1 f7       	brne	.-8      	; 0x326a <Set_EEPROM_Default_Config+0x10>

	// Set magic number to current signature
	Config.setup = MAGIC_NUMBER;
    3272:	88 e3       	ldi	r24, 0x38	; 56
    3274:	80 93 a9 05 	sts	0x05A9, r24

	// Misc settings
	Config.RxMode = PWM;				// Default to PWM
    3278:	81 e0       	ldi	r24, 0x01	; 1
    327a:	80 93 d2 05 	sts	0x05D2, r24
	Config.PWM_Sync = GEAR;
    327e:	24 e0       	ldi	r18, 0x04	; 4
    3280:	20 93 d4 05 	sts	0x05D4, r18
	
	// B8 Software LPF conversion table 5Hz, 10Hz, 21Hz, 32Hz, 44Hz, 74Hz, None
	// B10 Software LPF conversion table 5Hz, 10Hz, 21Hz, 44Hz, 94Hz, 184Hz, 260Hz, None
	Config.Acc_LPF = HZ21;				// Acc LPF around 21Hz
    3284:	82 e0       	ldi	r24, 0x02	; 2
    3286:	80 93 37 06 	sts	0x0637, r24
	Config.Gyro_LPF = NOFILTER;			// Gyro LPF off "None"
    328a:	37 e0       	ldi	r19, 0x07	; 7
    328c:	30 93 38 06 	sts	0x0638, r19
	
	// Set default sensor LPF
	Config.MPU6050_LPF = HZ21;			// 6 - 2 = 4. MPU6050's internal LPF. Values are 0x06 = 5Hz, (5)10Hz, (4)21Hz*, (3)44Hz, (2)94Hz, (1)184Hz LPF, (0)260Hz
    3290:	80 93 36 06 	sts	0x0636, r24

	// Preset AccZeroNormZ
	Config.AccZeroNormZ		= 128;
    3294:	80 e8       	ldi	r24, 0x80	; 128
    3296:	90 e0       	ldi	r25, 0x00	; 0
    3298:	90 93 9a 07 	sts	0x079A, r25
    329c:	80 93 99 07 	sts	0x0799, r24

	#ifdef KK2Mini
	Config.Contrast = 30;				// Contrast (KK2 Mini)
	#else
	Config.Contrast = 36;				// Contrast (Everything else)
    32a0:	84 e2       	ldi	r24, 0x24	; 36
    32a2:	80 93 32 06 	sts	0x0632, r24
	#endif
	
	Config.CF_factor = 7;
    32a6:	30 93 39 06 	sts	0x0639, r19
	Config.FlightChan = GEAR;			// Channel GEAR switches flight mode by default
    32aa:	20 93 d6 05 	sts	0x05D6, r18
	Config.Disarm_timer = 30;			// Default to 30 seconds
    32ae:	8e e1       	ldi	r24, 0x1E	; 30
    32b0:	80 93 34 06 	sts	0x0634, r24
	Config.Transition_P1n = 50;			// Set P1.n point to 50%
    32b4:	82 e3       	ldi	r24, 0x32	; 50
    32b6:	80 93 d8 05 	sts	0x05D8, r24
    32ba:	e4 ee       	ldi	r30, 0xE4	; 228
    32bc:	f0 e0       	ldi	r31, 0x00	; 0
    32be:	ca ea       	ldi	r28, 0xAA	; 170
    32c0:	d5 e0       	ldi	r29, 0x05	; 5
    32c2:	a3 e8       	ldi	r26, 0x83	; 131
    32c4:	b7 e0       	ldi	r27, 0x07	; 7

	// Servo defaults
	for (i = 0; i < MAX_RC_CHANNELS; i++)
	{
		Config.ChannelOrder[i] = pgm_read_byte(&JR[i]);
		Config.RxChannelZeroOffset[i] = 3750;
    32c6:	86 ea       	ldi	r24, 0xA6	; 166
    32c8:	9e e0       	ldi	r25, 0x0E	; 14
	Config.Transition_P1n = 50;			// Set P1.n point to 50%

	// Servo defaults
	for (i = 0; i < MAX_RC_CHANNELS; i++)
	{
		Config.ChannelOrder[i] = pgm_read_byte(&JR[i]);
    32ca:	24 91       	lpm	r18, Z
    32cc:	29 93       	st	Y+, r18
		Config.RxChannelZeroOffset[i] = 3750;
    32ce:	8d 93       	st	X+, r24
    32d0:	9d 93       	st	X+, r25
    32d2:	31 96       	adiw	r30, 0x01	; 1
	Config.FlightChan = GEAR;			// Channel GEAR switches flight mode by default
	Config.Disarm_timer = 30;			// Default to 30 seconds
	Config.Transition_P1n = 50;			// Set P1.n point to 50%

	// Servo defaults
	for (i = 0; i < MAX_RC_CHANNELS; i++)
    32d4:	30 e0       	ldi	r19, 0x00	; 0
    32d6:	ec 3e       	cpi	r30, 0xEC	; 236
    32d8:	f3 07       	cpc	r31, r19
    32da:	b9 f7       	brne	.-18     	; 0x32ca <Set_EEPROM_Default_Config+0x70>
		Config.ChannelOrder[i] = pgm_read_byte(&JR[i]);
		Config.RxChannelZeroOffset[i] = 3750;
	}
	
	// Monopolar throttle is a special case. Set to -100% or -1000
	Config.RxChannelZeroOffset[THROTTLE] = 2750;
    32dc:	8e eb       	ldi	r24, 0xBE	; 190
    32de:	9a e0       	ldi	r25, 0x0A	; 10
    32e0:	90 93 84 07 	sts	0x0784, r25
    32e4:	80 93 83 07 	sts	0x0783, r24
    32e8:	ef e5       	ldi	r30, 0x5F	; 95
    32ea:	f6 e0       	ldi	r31, 0x06	; 6
    32ec:	c3 e7       	ldi	r28, 0x73	; 115
    32ee:	d7 e0       	ldi	r29, 0x07	; 7
    32f0:	6b e7       	ldi	r22, 0x7B	; 123
    32f2:	77 e0       	ldi	r23, 0x07	; 7

	// Preset mixers to safe values
	for (i = 0; i < MAX_OUTPUTS; i++)
	{
		Config.Channel[i].P1n_position	= 50;
    32f4:	52 e3       	ldi	r21, 0x32	; 50
		Config.Channel[i].P1_source_a 	= NOMIX;
    32f6:	2f e0       	ldi	r18, 0x0F	; 15
		Config.Channel[i].P1_source_b 	= NOMIX;
		Config.Channel[i].P2_source_a 	= NOMIX;
		Config.Channel[i].P2_source_b 	= NOMIX;
		Config.min_travel[i] = -100;
    32f8:	4c e9       	ldi	r20, 0x9C	; 156
		Config.max_travel[i] = 100;
    32fa:	34 e6       	ldi	r19, 0x64	; 100
    32fc:	cf 01       	movw	r24, r30
    32fe:	4e 97       	sbiw	r24, 0x1e	; 30
	Config.RxChannelZeroOffset[THROTTLE] = 2750;

	// Preset mixers to safe values
	for (i = 0; i < MAX_OUTPUTS; i++)
	{
		Config.Channel[i].P1n_position	= 50;
    3300:	dc 01       	movw	r26, r24
    3302:	5c 93       	st	X, r21
    3304:	48 96       	adiw	r24, 0x18	; 24
		Config.Channel[i].P1_source_a 	= NOMIX;
    3306:	dc 01       	movw	r26, r24
    3308:	2c 93       	st	X, r18
    330a:	04 96       	adiw	r24, 0x04	; 4
		Config.Channel[i].P1_source_b 	= NOMIX;
    330c:	dc 01       	movw	r26, r24
    330e:	2c 93       	st	X, r18
    3310:	02 97       	sbiw	r24, 0x02	; 2
		Config.Channel[i].P2_source_a 	= NOMIX;
    3312:	dc 01       	movw	r26, r24
    3314:	2c 93       	st	X, r18
		Config.Channel[i].P2_source_b 	= NOMIX;
    3316:	20 83       	st	Z, r18
		Config.min_travel[i] = -100;
    3318:	49 93       	st	Y+, r20
		Config.max_travel[i] = 100;
    331a:	84 e6       	ldi	r24, 0x64	; 100
    331c:	db 01       	movw	r26, r22
    331e:	3d 93       	st	X+, r19
    3320:	bd 01       	movw	r22, r26
    3322:	b6 96       	adiw	r30, 0x26	; 38
	
	// Monopolar throttle is a special case. Set to -100% or -1000
	Config.RxChannelZeroOffset[THROTTLE] = 2750;

	// Preset mixers to safe values
	for (i = 0; i < MAX_OUTPUTS; i++)
    3324:	b7 e0       	ldi	r27, 0x07	; 7
    3326:	ef 38       	cpi	r30, 0x8F	; 143
    3328:	fb 07       	cpc	r31, r27
    332a:	41 f7       	brne	.-48     	; 0x32fc <Set_EEPROM_Default_Config+0xa2>
		Config.min_travel[i] = -100;
		Config.max_travel[i] = 100;
	}

	// Preset simple mixing for primary channels - all models
	Config.Channel[OUT1].P1_throttle_volume = 100;
    332c:	80 93 44 06 	sts	0x0644, r24
	Config.Channel[OUT2].P1_aileron_volume = 100;
    3330:	80 93 6d 06 	sts	0x066D, r24
	Config.Channel[OUT3].P1_elevator_volume = 100;
    3334:	80 93 95 06 	sts	0x0695, r24
	Config.Channel[OUT4].P1_rudder_volume = 100;
    3338:	80 93 bd 06 	sts	0x06BD, r24
	
	// Set up profile 1
	Config.FlightMode[P1].Roll_P_mult = 60;			// PID defaults
    333c:	6c e3       	ldi	r22, 0x3C	; 60
    333e:	60 93 db 05 	sts	0x05DB, r22
	Config.FlightMode[P1].A_Roll_P_mult = 5;
    3342:	55 e0       	ldi	r21, 0x05	; 5
    3344:	50 93 df 05 	sts	0x05DF, r21
	Config.FlightMode[P1].Pitch_P_mult = 60;
    3348:	60 93 e1 05 	sts	0x05E1, r22
	Config.FlightMode[P1].A_Pitch_P_mult = 5;
    334c:	50 93 e5 05 	sts	0x05E5, r21
	Config.FlightMode[P1].Yaw_P_mult = 80;
    3350:	70 e5       	ldi	r23, 0x50	; 80
    3352:	70 93 e7 05 	sts	0x05E7, r23
	Config.FlightMode[P1].Roll_I_mult = 40;
    3356:	48 e2       	ldi	r20, 0x28	; 40
    3358:	40 93 dc 05 	sts	0x05DC, r20
	Config.FlightMode[P1].Roll_limit = 10;
    335c:	3a e0       	ldi	r19, 0x0A	; 10
    335e:	30 93 dd 05 	sts	0x05DD, r19
	Config.FlightMode[P1].Pitch_I_mult = 40;
    3362:	40 93 e2 05 	sts	0x05E2, r20
	Config.FlightMode[P1].Pitch_limit = 10;
    3366:	30 93 e3 05 	sts	0x05E3, r19
	Config.FlightMode[P1].Roll_Rate = 2;
    336a:	22 e0       	ldi	r18, 0x02	; 2
    336c:	20 93 de 05 	sts	0x05DE, r18
	Config.FlightMode[P1].Pitch_Rate = 2;
    3370:	20 93 e4 05 	sts	0x05E4, r18
	Config.FlightMode[P1].Yaw_Rate = 1;
    3374:	91 e0       	ldi	r25, 0x01	; 1
    3376:	90 93 ea 05 	sts	0x05EA, r25

	// Set up profile 2
	Config.FlightMode[P2].Roll_P_mult = 60;			// PID defaults
    337a:	60 93 ed 05 	sts	0x05ED, r22
	Config.FlightMode[P2].A_Roll_P_mult = 5;
    337e:	50 93 f1 05 	sts	0x05F1, r21
	Config.FlightMode[P2].Pitch_P_mult = 60;
    3382:	60 93 f3 05 	sts	0x05F3, r22
	Config.FlightMode[P2].A_Pitch_P_mult = 5;
    3386:	50 93 f7 05 	sts	0x05F7, r21
	Config.FlightMode[P2].Yaw_P_mult = 80;
    338a:	70 93 f9 05 	sts	0x05F9, r23
	Config.FlightMode[P2].Roll_I_mult = 40;
    338e:	40 93 ee 05 	sts	0x05EE, r20
	Config.FlightMode[P2].Roll_limit = 10;
    3392:	30 93 ef 05 	sts	0x05EF, r19
	Config.FlightMode[P2].Pitch_I_mult = 40;
    3396:	40 93 f4 05 	sts	0x05F4, r20
	Config.FlightMode[P2].Pitch_limit = 10;
    339a:	30 93 f5 05 	sts	0x05F5, r19
	Config.FlightMode[P2].Roll_Rate = 2;
    339e:	20 93 f0 05 	sts	0x05F0, r18
	Config.FlightMode[P2].Pitch_Rate = 2;
    33a2:	20 93 f6 05 	sts	0x05F6, r18
	Config.FlightMode[P2].Yaw_Rate = 1;
    33a6:	90 93 fc 05 	sts	0x05FC, r25
	
	// Preset stick volumes
	Config.Channel[OUT1].P2_throttle_volume = 100;
    33aa:	80 93 45 06 	sts	0x0645, r24
	Config.Channel[OUT2].P2_aileron_volume = 100;
    33ae:	80 93 6e 06 	sts	0x066E, r24
	Config.Channel[OUT3].P2_elevator_volume = 100;
    33b2:	80 93 96 06 	sts	0x0696, r24
	Config.Channel[OUT4].P2_rudder_volume = 100;
    33b6:	80 93 be 06 	sts	0x06BE, r24

	// Preset basic axis gyros in P2
	Config.Channel[OUT2].P2_Roll_gyro = ON;
    33ba:	90 93 74 06 	sts	0x0674, r25
	Config.Channel[OUT3].P2_Pitch_gyro = ON;
    33be:	90 93 9c 06 	sts	0x069C, r25
	Config.Channel[OUT4].P2_Yaw_gyro = ON;
    33c2:	90 93 c4 06 	sts	0x06C4, r25
	Config.Channel[OUT4].P2_Pitch_acc = ON;
	Config.Channel[OUT4].P1_Yaw_gyro = ON;
	Config.Channel[OUT4].P2_Yaw_gyro = ON;
#endif

}
    33c6:	df 91       	pop	r29
    33c8:	cf 91       	pop	r28
    33ca:	08 95       	ret

000033cc <Initial_EEPROM_Config_Load>:
		eeprom_write_byte(addr, value);
	}
}

bool Initial_EEPROM_Config_Load(void)
{
    33cc:	cf 93       	push	r28
    33ce:	df 93       	push	r29
    33d0:	1f 92       	push	r1
    33d2:	cd b7       	in	r28, 0x3d	; 61
    33d4:	de b7       	in	r29, 0x3e	; 62
	bool	updated = false;
	
	// Read eeProm data into RAM
	eeprom_read_block((void*)&Config, (const void*)EEPROM_DATA_START_POS, sizeof(CONFIG_STRUCT));
    33d6:	48 e0       	ldi	r20, 0x08	; 8
    33d8:	52 e0       	ldi	r21, 0x02	; 2
    33da:	60 e0       	ldi	r22, 0x00	; 0
    33dc:	70 e0       	ldi	r23, 0x00	; 0
    33de:	89 ea       	ldi	r24, 0xA9	; 169
    33e0:	95 e0       	ldi	r25, 0x05	; 5
    33e2:	0e 94 27 49 	call	0x924e	; 0x924e <__eerd_block_m644pa>
	
	// See if we know what to do with the current eeprom data
	// Config.setup holds the magic number from the current EEPROM
	switch(Config.setup)
    33e6:	80 91 a9 05 	lds	r24, 0x05A9
    33ea:	86 33       	cpi	r24, 0x36	; 54
    33ec:	59 f0       	breq	.+22     	; 0x3404 <Initial_EEPROM_Config_Load+0x38>
    33ee:	28 f4       	brcc	.+10     	; 0x33fa <Initial_EEPROM_Config_Load+0x2e>
    33f0:	85 33       	cpi	r24, 0x35	; 53
    33f2:	71 f4       	brne	.+28     	; 0x3410 <Initial_EEPROM_Config_Load+0x44>
	{
		case V1_0_SIGNATURE:				// V1.0 detected
			Update_V1_0_to_V1_1();
    33f4:	0e 94 9e 16 	call	0x2d3c	; 0x2d3c <Update_V1_0_to_V1_1>
    33f8:	05 c0       	rjmp	.+10     	; 0x3404 <Initial_EEPROM_Config_Load+0x38>
	// Read eeProm data into RAM
	eeprom_read_block((void*)&Config, (const void*)EEPROM_DATA_START_POS, sizeof(CONFIG_STRUCT));
	
	// See if we know what to do with the current eeprom data
	// Config.setup holds the magic number from the current EEPROM
	switch(Config.setup)
    33fa:	87 33       	cpi	r24, 0x37	; 55
    33fc:	29 f0       	breq	.+10     	; 0x3408 <Initial_EEPROM_Config_Load+0x3c>
    33fe:	88 33       	cpi	r24, 0x38	; 56
    3400:	49 f0       	breq	.+18     	; 0x3414 <Initial_EEPROM_Config_Load+0x48>
    3402:	06 c0       	rjmp	.+12     	; 0x3410 <Initial_EEPROM_Config_Load+0x44>
		case V1_0_SIGNATURE:				// V1.0 detected
			Update_V1_0_to_V1_1();
			// Fall through...

		case V1_1_SIGNATURE:				// V1.1 Beta 7 (or below) detected
			Update_V1_1_to_V1_1_B8();	
    3404:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <Update_V1_1_to_V1_1_B8>
			// Fall through...

		case V1_1_B8_SIGNATURE:				// V1.1 Beta 8-9 detected
			Update_V1_1B8_to_V1_1_B10();
    3408:	0e 94 11 19 	call	0x3222	; 0x3222 <Update_V1_1B8_to_V1_1_B10>
			updated = true;
    340c:	81 e0       	ldi	r24, 0x01	; 1
    340e:	03 c0       	rjmp	.+6      	; 0x3416 <Initial_EEPROM_Config_Load+0x4a>
			// Fall through...
			break;

		default:							// Unknown solution - restore to factory defaults
			// Load factory defaults
			Set_EEPROM_Default_Config();
    3410:	0e 94 2d 19 	call	0x325a	; 0x325a <Set_EEPROM_Default_Config>
	}
}

bool Initial_EEPROM_Config_Load(void)
{
	bool	updated = false;
    3414:	80 e0       	ldi	r24, 0x00	; 0
			Set_EEPROM_Default_Config();
			break;
	}
	
	// Save back to eeprom	
	Save_Config_to_EEPROM();
    3416:	89 83       	std	Y+1, r24	; 0x01
    3418:	0e 94 93 16 	call	0x2d26	; 0x2d26 <Save_Config_to_EEPROM>
	
	// Return info regarding eeprom structure changes 
	return updated;
}
    341c:	89 81       	ldd	r24, Y+1	; 0x01
    341e:	0f 90       	pop	r0
    3420:	df 91       	pop	r29
    3422:	cf 91       	pop	r28
    3424:	08 95       	ret

00003426 <main>:
//************************************************************
//* Main loop
//************************************************************

int main(void)
{
    3426:	cf 93       	push	r28
    3428:	df 93       	push	r29
    342a:	cd b7       	in	r28, 0x3d	; 61
    342c:	de b7       	in	r29, 0x3e	; 62
    342e:	ab 97       	sbiw	r28, 0x2b	; 43
    3430:	0f b6       	in	r0, 0x3f	; 63
    3432:	f8 94       	cli
    3434:	de bf       	out	0x3e, r29	; 62
    3436:	0f be       	out	0x3f, r0	; 63
    3438:	cd bf       	out	0x3d, r28	; 61
	uint8_t i = 0;
	int16_t PWM_pulses = 3; 
	uint32_t interval = 0;			// IMU interval
	
	// Do all init tasks
	init();
    343a:	0e 94 1d 29 	call	0x523a	; 0x523a <init>
	int16_t temp1 = 0;
	uint16_t transition_time = 0;
	uint8_t	old_alarms = 0;
	uint8_t ServoFlag = 0;
	uint8_t i = 0;
	int16_t PWM_pulses = 3; 
    343e:	53 e0       	ldi	r21, 0x03	; 3
    3440:	65 2e       	mov	r6, r21
    3442:	71 2c       	mov	r7, r1
	uint8_t Menu_mode = STATUS_TIMEOUT;
	int8_t	old_flight = 3;			// Old flight profile
	int8_t	old_trans_mode = 0;		// Old transition mode
	int16_t temp1 = 0;
	uint16_t transition_time = 0;
	uint8_t	old_alarms = 0;
    3444:	18 a6       	std	Y+40, r1	; 0x28
	uint16_t InterruptCounter = 0;
	uint8_t	Disarm_seconds = 0;
	uint8_t Status_seconds = 0;
	uint8_t Menu_mode = STATUS_TIMEOUT;
	int8_t	old_flight = 3;			// Old flight profile
	int8_t	old_trans_mode = 0;		// Old transition mode
    3446:	1f a2       	std	Y+39, r1	; 0x27
	// Locals
	uint16_t InterruptCounter = 0;
	uint8_t	Disarm_seconds = 0;
	uint8_t Status_seconds = 0;
	uint8_t Menu_mode = STATUS_TIMEOUT;
	int8_t	old_flight = 3;			// Old flight profile
    3448:	63 e0       	ldi	r22, 0x03	; 3
    344a:	b6 2e       	mov	r11, r22

	// Locals
	uint16_t InterruptCounter = 0;
	uint8_t	Disarm_seconds = 0;
	uint8_t Status_seconds = 0;
	uint8_t Menu_mode = STATUS_TIMEOUT;
    344c:	18 e0       	ldi	r17, 0x08	; 8
	uint8_t ServoRate_TCNT2 = 0;

	// Locals
	uint16_t InterruptCounter = 0;
	uint8_t	Disarm_seconds = 0;
	uint8_t Status_seconds = 0;
    344e:	1f 8a       	std	Y+23, r1	; 0x17
	uint8_t Servo_TCNT2 = 0;
	uint8_t ServoRate_TCNT2 = 0;

	// Locals
	uint16_t InterruptCounter = 0;
	uint8_t	Disarm_seconds = 0;
    3450:	1b 86       	std	Y+11, r1	; 0x0b
	uint8_t Ticker_TCNT2 = 0;
	uint8_t Servo_TCNT2 = 0;
	uint8_t ServoRate_TCNT2 = 0;

	// Locals
	uint16_t InterruptCounter = 0;
    3452:	1e 8a       	std	Y+22, r1	; 0x16
    3454:	1d 8a       	std	Y+21, r1	; 0x15
	uint8_t Refresh_TCNT2 = 0;
	uint8_t Disarm_TCNT2 = 0;
	uint8_t Arm_TCNT2 = 0;
	uint8_t Ticker_TCNT2 = 0;
	uint8_t Servo_TCNT2 = 0;
	uint8_t ServoRate_TCNT2 = 0;
    3456:	1e a2       	std	Y+38, r1	; 0x26
	uint8_t Status_TCNT2 = 0;
	uint8_t Refresh_TCNT2 = 0;
	uint8_t Disarm_TCNT2 = 0;
	uint8_t Arm_TCNT2 = 0;
	uint8_t Ticker_TCNT2 = 0;
	uint8_t Servo_TCNT2 = 0;
    3458:	1d a2       	std	Y+37, r1	; 0x25
	uint8_t Transition_TCNT2 = 0;
	uint8_t Status_TCNT2 = 0;
	uint8_t Refresh_TCNT2 = 0;
	uint8_t Disarm_TCNT2 = 0;
	uint8_t Arm_TCNT2 = 0;
	uint8_t Ticker_TCNT2 = 0;
    345a:	1c a2       	std	Y+36, r1	; 0x24
	uint16_t RC_Rate_TCNT1 = 0;
	uint8_t Transition_TCNT2 = 0;
	uint8_t Status_TCNT2 = 0;
	uint8_t Refresh_TCNT2 = 0;
	uint8_t Disarm_TCNT2 = 0;
	uint8_t Arm_TCNT2 = 0;
    345c:	1b a2       	std	Y+35, r1	; 0x23
	// Timer incrementers
	uint16_t RC_Rate_TCNT1 = 0;
	uint8_t Transition_TCNT2 = 0;
	uint8_t Status_TCNT2 = 0;
	uint8_t Refresh_TCNT2 = 0;
	uint8_t Disarm_TCNT2 = 0;
    345e:	1a a2       	std	Y+34, r1	; 0x22

	// Timer incrementers
	uint16_t RC_Rate_TCNT1 = 0;
	uint8_t Transition_TCNT2 = 0;
	uint8_t Status_TCNT2 = 0;
	uint8_t Refresh_TCNT2 = 0;
    3460:	19 a2       	std	Y+33, r1	; 0x21
	uint16_t ticker_16 = 0;

	// Timer incrementers
	uint16_t RC_Rate_TCNT1 = 0;
	uint8_t Transition_TCNT2 = 0;
	uint8_t Status_TCNT2 = 0;
    3462:	18 a2       	std	Y+32, r1	; 0x20
	uint16_t Save_TCNT1 = 0;
	uint16_t ticker_16 = 0;

	// Timer incrementers
	uint16_t RC_Rate_TCNT1 = 0;
	uint8_t Transition_TCNT2 = 0;
    3464:	1f 8e       	std	Y+31, r1	; 0x1f
	uint16_t Disarm_timer = 0;
	uint16_t Save_TCNT1 = 0;
	uint16_t ticker_16 = 0;

	// Timer incrementers
	uint16_t RC_Rate_TCNT1 = 0;
    3466:	81 2c       	mov	r8, r1
    3468:	91 2c       	mov	r9, r1
	uint16_t UpdateStatus_timer = 0;
	uint16_t Ticker_Count = 0;
	uint16_t RC_Timeout = 0;
	uint16_t Servo_Rate = 0;
	uint16_t Transition_timeout = 0;
	uint16_t Disarm_timer = 0;
    346a:	18 86       	std	Y+8, r1	; 0x08
    346c:	1f 82       	std	Y+7, r1	; 0x07
	uint16_t Status_timeout = 0;
	uint16_t UpdateStatus_timer = 0;
	uint16_t Ticker_Count = 0;
	uint16_t RC_Timeout = 0;
	uint16_t Servo_Rate = 0;
	uint16_t Transition_timeout = 0;
    346e:	1a 8a       	std	Y+18, r1	; 0x12
    3470:	19 8a       	std	Y+17, r1	; 0x11
	// 16-bit timers
	uint16_t Status_timeout = 0;
	uint16_t UpdateStatus_timer = 0;
	uint16_t Ticker_Count = 0;
	uint16_t RC_Timeout = 0;
	uint16_t Servo_Rate = 0;
    3472:	18 8a       	std	Y+16, r1	; 0x10
    3474:	1f 86       	std	Y+15, r1	; 0x0f
	
	// 16-bit timers
	uint16_t Status_timeout = 0;
	uint16_t UpdateStatus_timer = 0;
	uint16_t Ticker_Count = 0;
	uint16_t RC_Timeout = 0;
    3476:	1b a6       	std	Y+43, r1	; 0x2b
    3478:	1a a6       	std	Y+42, r1	; 0x2a
	uint32_t PWM_interval = PWM_PERIOD_WORST;	// Loop period when generating PWM. Initialise with worst case until updated.
	
	// 16-bit timers
	uint16_t Status_timeout = 0;
	uint16_t UpdateStatus_timer = 0;
	uint16_t Ticker_Count = 0;
    347a:	1d 8e       	std	Y+29, r1	; 0x1d
    347c:	1c 8e       	std	Y+28, r1	; 0x1c
	uint32_t RC_Rate_Timer = 0;
	uint32_t PWM_interval = PWM_PERIOD_WORST;	// Loop period when generating PWM. Initialise with worst case until updated.
	
	// 16-bit timers
	uint16_t Status_timeout = 0;
	uint16_t UpdateStatus_timer = 0;
    347e:	19 8e       	std	Y+25, r1	; 0x19
    3480:	18 8e       	std	Y+24, r1	; 0x18
	uint32_t Arm_timer = 0;
	uint32_t RC_Rate_Timer = 0;
	uint32_t PWM_interval = PWM_PERIOD_WORST;	// Loop period when generating PWM. Initialise with worst case until updated.
	
	// 16-bit timers
	uint16_t Status_timeout = 0;
    3482:	1e 86       	std	Y+14, r1	; 0x0e
    3484:	1d 86       	std	Y+13, r1	; 0x0d
	bool SlowRC = true;

	// 32-bit timers
	uint32_t Arm_timer = 0;
	uint32_t RC_Rate_Timer = 0;
	uint32_t PWM_interval = PWM_PERIOD_WORST;	// Loop period when generating PWM. Initialise with worst case until updated.
    3486:	71 e6       	ldi	r23, 0x61	; 97
    3488:	c7 2e       	mov	r12, r23
    348a:	71 e5       	ldi	r23, 0x51	; 81
    348c:	d7 2e       	mov	r13, r23
    348e:	e1 2c       	mov	r14, r1
    3490:	f1 2c       	mov	r15, r1
	bool Interrupted_Clone = false;
	bool SlowRC = true;

	// 32-bit timers
	uint32_t Arm_timer = 0;
	uint32_t RC_Rate_Timer = 0;
    3492:	1b 82       	std	Y+3, r1	; 0x03
    3494:	1c 82       	std	Y+4, r1	; 0x04
    3496:	1d 82       	std	Y+5, r1	; 0x05
    3498:	1e 82       	std	Y+6, r1	; 0x06
	bool PWMOverride = false;
	bool Interrupted_Clone = false;
	bool SlowRC = true;

	// 32-bit timers
	uint32_t Arm_timer = 0;
    349a:	21 2c       	mov	r2, r1
    349c:	31 2c       	mov	r3, r1
    349e:	21 01       	movw	r4, r2
	bool RCInterruptsON = false;
	bool ServoTick = false;
	bool ResampleRCRate = false;
	bool PWMOverride = false;
	bool Interrupted_Clone = false;
	bool SlowRC = true;
    34a0:	21 e0       	ldi	r18, 0x01	; 1
    34a2:	29 87       	std	Y+9, r18	; 0x09
	bool PWMBlocked = false;
	bool RCInterruptsON = false;
	bool ServoTick = false;
	bool ResampleRCRate = false;
	bool PWMOverride = false;
	bool Interrupted_Clone = false;
    34a4:	00 e0       	ldi	r16, 0x00	; 0
	bool TransitionUpdated = false;
	bool RCrateMeasured = false;
	bool PWMBlocked = false;
	bool RCInterruptsON = false;
	bool ServoTick = false;
	bool ResampleRCRate = false;
    34a6:	1b 8e       	std	Y+27, r1	; 0x1b
	// Flags
	bool TransitionUpdated = false;
	bool RCrateMeasured = false;
	bool PWMBlocked = false;
	bool RCInterruptsON = false;
	bool ServoTick = false;
    34a8:	1a 86       	std	Y+10, r1	; 0x0a
{
	// Flags
	bool TransitionUpdated = false;
	bool RCrateMeasured = false;
	bool PWMBlocked = false;
	bool RCInterruptsON = false;
    34aa:	1a 8e       	std	Y+26, r1	; 0x1a
int main(void)
{
	// Flags
	bool TransitionUpdated = false;
	bool RCrateMeasured = false;
	bool PWMBlocked = false;
    34ac:	1c 86       	std	Y+12, r1	; 0x0c

int main(void)
{
	// Flags
	bool TransitionUpdated = false;
	bool RCrateMeasured = false;
    34ae:	1a 82       	std	Y+2, r1	; 0x02

	// Main loop
	while (1)
	{
		// Increment the loop counter
		LoopCount++;
    34b0:	80 91 16 05 	lds	r24, 0x0516
    34b4:	8f 5f       	subi	r24, 0xFF	; 255
    34b6:	80 93 16 05 	sts	0x0516, r24
		//* Check for interruption of PWM generation
		//* The "JitterFlag" flag was reset just before PWM generation.
		//* Being set here means that an interrupt has occurred.
		//************************************************************

		if (JitterFlag == true)
    34ba:	80 91 dd 07 	lds	r24, 0x07DD
    34be:	88 23       	and	r24, r24
    34c0:	31 f0       	breq	.+12     	; 0x34ce <main+0xa8>
		{
			InterruptCounter++;
    34c2:	4d 89       	ldd	r20, Y+21	; 0x15
    34c4:	5e 89       	ldd	r21, Y+22	; 0x16
    34c6:	4f 5f       	subi	r20, 0xFF	; 255
    34c8:	5f 4f       	sbci	r21, 0xFF	; 255
    34ca:	5e 8b       	std	Y+22, r21	; 0x16
    34cc:	4d 8b       	std	Y+21, r20	; 0x15
		//* Increment Status_seconds every second and trigger
		//* a RC rate resample every second
		//************************************************************

		// Count elapsed seconds
		if (Status_timeout > SECOND_TIMER)
    34ce:	2d 85       	ldd	r18, Y+13	; 0x0d
    34d0:	3e 85       	ldd	r19, Y+14	; 0x0e
    34d2:	2c 34       	cpi	r18, 0x4C	; 76
    34d4:	3c 44       	sbci	r19, 0x4C	; 76
    34d6:	98 f0       	brcs	.+38     	; 0x34fe <main+0xd8>
		{
			Status_seconds++;
    34d8:	2f 89       	ldd	r18, Y+23	; 0x17
    34da:	2f 5f       	subi	r18, 0xFF	; 255
    34dc:	2f 8b       	std	Y+23, r18	; 0x17
			Status_timeout = 0;

			// Update the interrupt count each second
			InterruptCount = InterruptCounter;
    34de:	4d 89       	ldd	r20, Y+21	; 0x15
    34e0:	5e 89       	ldd	r21, Y+22	; 0x16
    34e2:	50 93 1b 05 	sts	0x051B, r21
    34e6:	40 93 1a 05 	sts	0x051A, r20
			InterruptCounter = 0;
			
			// Re-measure the frame rate in FAST mode every second
			if (Config.Servo_rate == FAST)
    34ea:	80 91 d3 05 	lds	r24, 0x05D3
			Status_seconds++;
			Status_timeout = 0;

			// Update the interrupt count each second
			InterruptCount = InterruptCounter;
			InterruptCounter = 0;
    34ee:	1e 8a       	std	Y+22, r1	; 0x16
    34f0:	1d 8a       	std	Y+21, r1	; 0x15

		// Count elapsed seconds
		if (Status_timeout > SECOND_TIMER)
		{
			Status_seconds++;
			Status_timeout = 0;
    34f2:	1e 86       	std	Y+14, r1	; 0x0e
    34f4:	1d 86       	std	Y+13, r1	; 0x0d
			// Update the interrupt count each second
			InterruptCount = InterruptCounter;
			InterruptCounter = 0;
			
			// Re-measure the frame rate in FAST mode every second
			if (Config.Servo_rate == FAST)
    34f6:	82 30       	cpi	r24, 0x02	; 2
    34f8:	11 f4       	brne	.+4      	; 0x34fe <main+0xd8>
			{
				ResampleRCRate = true;
    34fa:	21 e0       	ldi	r18, 0x01	; 1
    34fc:	2b 8f       	std	Y+27, r18	; 0x1b
		// Assume PWM is OK until through the state machine
		// If the state machine requires PWM to be blocked, 
		// it will set this flag
		PWMOverride = false; 

		switch(Menu_mode) 
    34fe:	81 2f       	mov	r24, r17
    3500:	90 e0       	ldi	r25, 0x00	; 0
    3502:	8b 30       	cpi	r24, 0x0B	; 11
    3504:	91 05       	cpc	r25, r1
    3506:	08 f0       	brcs	.+2      	; 0x350a <main+0xe4>
    3508:	75 c0       	rjmp	.+234    	; 0x35f4 <main+0x1ce>
    350a:	fc 01       	movw	r30, r24
    350c:	e2 5c       	subi	r30, 0xC2	; 194
    350e:	ff 4f       	sbci	r31, 0xFF	; 255
    3510:	0c 94 b0 48 	jmp	0x9160	; 0x9160 <__tablejump2__>
			// In IDLE mode, the text "Press for status" is displayed ONCE.
			// If a button is pressed the mode changes to PRESTATUS, where
			// it will wait for the right time to proceed.
			case IDLE:
				// If any button is pressed
				if((PINB & 0xf0) != 0xf0)
    3514:	83 b1       	in	r24, 0x03	; 3
    3516:	80 7f       	andi	r24, 0xF0	; 240
    3518:	80 3f       	cpi	r24, 0xF0	; 240
    351a:	41 f0       	breq	.+16     	; 0x352c <main+0x106>
					PWMOverride = false;
					
					// When not in idle mode, enable Timer0 interrupts as loop rate 
					// is slow and we need TMR0 to fully measure it.
					// This may cause PWM generation interruption
					TIMSK0 |= (1 << TOIE0);	
    351c:	80 91 6e 00 	lds	r24, 0x006E
    3520:	81 60       	ori	r24, 0x01	; 1
    3522:	80 93 6e 00 	sts	0x006E, r24
			// it will wait for the right time to proceed.
			case IDLE:
				// If any button is pressed
				if((PINB & 0xf0) != 0xf0)
				{
					Menu_mode = PRESTATUS;
    3526:	13 e0       	ldi	r17, 0x03	; 3
					// Reset the status screen timeout
					Status_seconds = 0;
    3528:	1f 8a       	std	Y+23, r1	; 0x17
    352a:	64 c0       	rjmp	.+200    	; 0x35f4 <main+0x1ce>
				}
				// Idle mode - fast loop rate so don't need TMR0.
				// We don't want TMR0 to interrupt PWM generation.
				else
				{
					TIMSK0 = 0; 		// Disable Timer0 interrupts
    352c:	10 92 6e 00 	sts	0x006E, r1
					TIFR0 = 1;			// Clear interrupt flag
    3530:	81 e0       	ldi	r24, 0x01	; 1
    3532:	85 bb       	out	0x15, r24	; 21
    3534:	5f c0       	rjmp	.+190    	; 0x35f4 <main+0x1ce>
			// If Interrupted or Interrupted_Clone is true, data must have just completed.
			// If Overdue is true, there is no data to interrupt.
			// PWM activity must stop before we attempt to pop up the status screen.
			case PRESTATUS:
				// If interrupted, or if currently "No signal"
				if (Interrupted || Interrupted_Clone || Overdue)
    3536:	80 91 c2 07 	lds	r24, 0x07C2
    353a:	81 11       	cpse	r24, r1
    353c:	49 c0       	rjmp	.+146    	; 0x35d0 <main+0x1aa>
    353e:	01 11       	cpse	r16, r1
    3540:	4c c0       	rjmp	.+152    	; 0x35da <main+0x1b4>
    3542:	80 91 17 05 	lds	r24, 0x0517
    3546:	88 23       	and	r24, r24
    3548:	09 f4       	brne	.+2      	; 0x354c <main+0x126>
    354a:	54 c0       	rjmp	.+168    	; 0x35f4 <main+0x1ce>
				{
					// Ready to move on
					Menu_mode = STATUS;
    354c:	14 e0       	ldi	r17, 0x04	; 4
    354e:	54 c0       	rjmp	.+168    	; 0x35f8 <main+0x1d2>
			case STATUS:
				// Reset the status screen period
				UpdateStatus_timer = 0;

				// Update status screen
				Display_status();
    3550:	0e 94 8c 13 	call	0x2718	; 0x2718 <Display_status>
				
				// Prevent PWM output just after updating the LCD
				PWMOverride = true;

				// Wait for timeout
				Menu_mode = WAITING_TIMEOUT_BD;
    3554:	16 e0       	ldi	r17, 0x06	; 6
				break;

			// Status screen first display
			case STATUS:
				// Reset the status screen period
				UpdateStatus_timer = 0;
    3556:	19 8e       	std	Y+25, r1	; 0x19
    3558:	18 8e       	std	Y+24, r1	; 0x18
    355a:	41 c0       	rjmp	.+130    	; 0x35de <main+0x1b8>

			// Status screen up, but button still down ;)
			// This is designed to stop the menu appearing instead of the status screen
			// as it will stay in this state until the button is released
			case WAITING_TIMEOUT_BD:
				if(BUTTON1 == 0)
    355c:	1f 9b       	sbis	0x03, 7	; 3
    355e:	4a c0       	rjmp	.+148    	; 0x35f4 <main+0x1ce>
				{
					Menu_mode = WAITING_TIMEOUT_BD;
				}
				else
				{
					Menu_mode = WAITING_TIMEOUT;
    3560:	15 e0       	ldi	r17, 0x05	; 5
    3562:	48 c0       	rjmp	.+144    	; 0x35f4 <main+0x1ce>
												
			// Status screen up, waiting for timeout or action
			// but button is back up
			case WAITING_TIMEOUT:
				// In status screen, change back to idle after timing out
				if (Status_seconds >= 10)
    3564:	4f 89       	ldd	r20, Y+23	; 0x17
    3566:	4a 30       	cpi	r20, 0x0A	; 10
    3568:	e8 f5       	brcc	.+122    	; 0x35e4 <main+0x1be>
					// Enable PWM output
					PWMOverride = false;
				}

				// Jump to menu if button pressed
				else if(BUTTON1 == 0)
    356a:	1f 9b       	sbis	0x03, 7	; 3
    356c:	3d c0       	rjmp	.+122    	; 0x35e8 <main+0x1c2>
					// Prevent PWM output
					PWMOverride = true; // Debug - not needed yet?
				}

				// Update status screen four times/sec while waiting to time out
				else if (UpdateStatus_timer > (SECOND_TIMER >> 2))
    356e:	28 8d       	ldd	r18, Y+24	; 0x18
    3570:	39 8d       	ldd	r19, Y+25	; 0x19
    3572:	23 31       	cpi	r18, 0x13	; 19
    3574:	33 41       	sbci	r19, 0x13	; 19
    3576:	f0 f1       	brcs	.+124    	; 0x35f4 <main+0x1ce>
				{
					Menu_mode = PRESTATUS;
    3578:	13 e0       	ldi	r17, 0x03	; 3
    357a:	2c c0       	rjmp	.+88     	; 0x35d4 <main+0x1ae>
			// If Interrupted or Interrupted_Clone is true, data must have just completed.
			// If Overdue is true, there is no data to interrupt.
			// PWM activity must stop before we attempt to pop up the status screen.
			case PRESTATUS_TIMEOUT:
				// If interrupted, or if currently "No signal"
				if (Interrupted || Interrupted_Clone || Overdue)
    357c:	80 91 c2 07 	lds	r24, 0x07C2
    3580:	81 11       	cpse	r24, r1
    3582:	34 c0       	rjmp	.+104    	; 0x35ec <main+0x1c6>
    3584:	01 11       	cpse	r16, r1
    3586:	32 c0       	rjmp	.+100    	; 0x35ec <main+0x1c6>
    3588:	80 91 17 05 	lds	r24, 0x0517
    358c:	88 23       	and	r24, r24
    358e:	39 f1       	breq	.+78     	; 0x35de <main+0x1b8>
				{
					// Switch to STATUS_TIMEOUT mode
					Menu_mode = STATUS_TIMEOUT;
    3590:	18 e0       	ldi	r17, 0x08	; 8
    3592:	30 c0       	rjmp	.+96     	; 0x35f4 <main+0x1ce>

			// In STATUS_TIMEOUT mode, the idle screen is displayed and the mode 
			// changed to POSTSTATUS_TIMEOUT. 
			case STATUS_TIMEOUT:
				// Pop up the Idle screen
				idle_screen();
    3594:	0e 94 2b 22 	call	0x4456	; 0x4456 <idle_screen>

				// Switch to IDLE mode
				Menu_mode = POSTSTATUS_TIMEOUT;
    3598:	19 e0       	ldi	r17, 0x09	; 9
    359a:	21 c0       	rjmp	.+66     	; 0x35de <main+0x1b8>

			// In POSTSTATUS_TIMEOUT mode, we wait for a PWM cycle to complete
			// The idle screen has been refreshed and we need to wait.
			case POSTSTATUS_TIMEOUT:
				// If interrupted, or if currently "No signal"
				if (Interrupted || Interrupted_Clone || Overdue)
    359c:	80 91 c2 07 	lds	r24, 0x07C2
    35a0:	81 11       	cpse	r24, r1
    35a2:	26 c0       	rjmp	.+76     	; 0x35f0 <main+0x1ca>
    35a4:	01 11       	cpse	r16, r1
    35a6:	24 c0       	rjmp	.+72     	; 0x35f0 <main+0x1ca>
    35a8:	80 91 17 05 	lds	r24, 0x0517
    35ac:	88 23       	and	r24, r24
    35ae:	21 f1       	breq	.+72     	; 0x35f8 <main+0x1d2>
				{
					// Switch to IDLE mode
					Menu_mode = IDLE;
    35b0:	10 e0       	ldi	r17, 0x00	; 0
    35b2:	20 c0       	rjmp	.+64     	; 0x35f4 <main+0x1ce>
				
				break;

			// In MENU mode, 
			case MENU:
				LVA = 0;	// Make sure buzzer is off :)
    35b4:	29 98       	cbi	0x05, 1	; 5
				// Disarm the FC
				General_error |= (1 << DISARMED);
    35b6:	80 91 1e 05 	lds	r24, 0x051E
    35ba:	84 60       	ori	r24, 0x04	; 4
    35bc:	80 93 1e 05 	sts	0x051E, r24
				LED1 = 0;
    35c0:	2b 98       	cbi	0x05, 3	; 5
				// Start the menu system
				menu_main();
    35c2:	0e 94 46 33 	call	0x668c	; 0x668c <menu_main>
				// Switch back to status screen when leaving menu
				Menu_mode = STATUS;
				// Reset timeout once back in status screen
				Status_seconds = 0;
				// Reset IMU on return from menu
				reset_IMU();
    35c6:	0e 94 d4 28 	call	0x51a8	; 0x51a8 <reset_IMU>
				General_error |= (1 << DISARMED);
				LED1 = 0;
				// Start the menu system
				menu_main();
				// Switch back to status screen when leaving menu
				Menu_mode = STATUS;
    35ca:	14 e0       	ldi	r17, 0x04	; 4
				// Reset timeout once back in status screen
				Status_seconds = 0;
    35cc:	1f 8a       	std	Y+23, r1	; 0x17
    35ce:	14 c0       	rjmp	.+40     	; 0x35f8 <main+0x1d2>
			case PRESTATUS:
				// If interrupted, or if currently "No signal"
				if (Interrupted || Interrupted_Clone || Overdue)
				{
					// Ready to move on
					Menu_mode = STATUS;
    35d0:	14 e0       	ldi	r17, 0x04	; 4
							
					// Prevent PWM output
					PWMOverride = true;		
					
					// Clear Interrupted_Clone
					Interrupted_Clone = false;
    35d2:	00 e0       	ldi	r16, 0x00	; 0
				{
					// Ready to move on
					Menu_mode = STATUS;
							
					// Prevent PWM output
					PWMOverride = true;		
    35d4:	21 e0       	ldi	r18, 0x01	; 1
    35d6:	29 83       	std	Y+1, r18	; 0x01
    35d8:	11 c0       	rjmp	.+34     	; 0x35fc <main+0x1d6>
			case PRESTATUS:
				// If interrupted, or if currently "No signal"
				if (Interrupted || Interrupted_Clone || Overdue)
				{
					// Ready to move on
					Menu_mode = STATUS;
    35da:	14 e0       	ldi	r17, 0x04	; 4
							
					// Prevent PWM output
					PWMOverride = true;		
					
					// Clear Interrupted_Clone
					Interrupted_Clone = false;
    35dc:	00 e0       	ldi	r16, 0x00	; 0
				{
					// Ready to move on
					Menu_mode = STATUS;
							
					// Prevent PWM output
					PWMOverride = true;		
    35de:	31 e0       	ldi	r19, 0x01	; 1
    35e0:	39 83       	std	Y+1, r19	; 0x01
    35e2:	0c c0       	rjmp	.+24     	; 0x35fc <main+0x1d6>
			// but button is back up
			case WAITING_TIMEOUT:
				// In status screen, change back to idle after timing out
				if (Status_seconds >= 10)
				{
					Menu_mode = PRESTATUS_TIMEOUT;
    35e4:	17 e0       	ldi	r17, 0x07	; 7
    35e6:	06 c0       	rjmp	.+12     	; 0x35f4 <main+0x1ce>
				}

				// Jump to menu if button pressed
				else if(BUTTON1 == 0)
				{
					Menu_mode = MENU;
    35e8:	1a e0       	ldi	r17, 0x0A	; 10
    35ea:	f4 cf       	rjmp	.-24     	; 0x35d4 <main+0x1ae>
			case PRESTATUS_TIMEOUT:
				// If interrupted, or if currently "No signal"
				if (Interrupted || Interrupted_Clone || Overdue)
				{
					// Switch to STATUS_TIMEOUT mode
					Menu_mode = STATUS_TIMEOUT;
    35ec:	18 e0       	ldi	r17, 0x08	; 8
    35ee:	01 c0       	rjmp	.+2      	; 0x35f2 <main+0x1cc>
			case POSTSTATUS_TIMEOUT:
				// If interrupted, or if currently "No signal"
				if (Interrupted || Interrupted_Clone || Overdue)
				{
					// Switch to IDLE mode
					Menu_mode = IDLE;
    35f0:	10 e0       	ldi	r17, 0x00	; 0
					
					// Prevent PWM output
					PWMOverride = false;
					
					// Clear Interrupted_Clone
					Interrupted_Clone = false;
    35f2:	00 e0       	ldi	r16, 0x00	; 0
				{
					// Switch to IDLE mode
					Menu_mode = IDLE;
					
					// Prevent PWM output
					PWMOverride = false;
    35f4:	19 82       	std	Y+1, r1	; 0x01
    35f6:	02 c0       	rjmp	.+4      	; 0x35fc <main+0x1d6>
					Interrupted_Clone = false;
				}
				else
				{
					// Enable PWM output
					PWMOverride = true;			
    35f8:	41 e0       	ldi	r20, 0x01	; 1
    35fa:	49 83       	std	Y+1, r20	; 0x01
		//************************************************************
		//* Alarms
		//************************************************************

		// If RC signal is overdue, signal RX error message and disarm
		if (Overdue)
    35fc:	80 91 17 05 	lds	r24, 0x0517
    3600:	88 23       	and	r24, r24
    3602:	a1 f0       	breq	.+40     	; 0x362c <main+0x206>
		{
			General_error |= (1 << NO_SIGNAL);		// Set NO_SIGNAL bit
    3604:	80 91 1e 05 	lds	r24, 0x051E
    3608:	82 60       	ori	r24, 0x02	; 2
    360a:	80 93 1e 05 	sts	0x051E, r24
			
			// If FC is set to "armable" and is currently armed, disarm the FC
			if ((Config.ArmMode == ARMABLE) && ((General_error & (1 << DISARMED)) == 0))
    360e:	80 91 33 06 	lds	r24, 0x0633
    3612:	81 30       	cpi	r24, 0x01	; 1
    3614:	81 f4       	brne	.+32     	; 0x3636 <main+0x210>
    3616:	80 91 1e 05 	lds	r24, 0x051E
    361a:	82 fd       	sbrc	r24, 2
    361c:	0c c0       	rjmp	.+24     	; 0x3636 <main+0x210>
			{
				General_error |= (1 << DISARMED);	// Set flags to disarmed
    361e:	80 91 1e 05 	lds	r24, 0x051E
    3622:	84 60       	ori	r24, 0x04	; 4
    3624:	80 93 1e 05 	sts	0x051E, r24
				LED1 = 0;							// Signal that FC is now disarmed
    3628:	2b 98       	cbi	0x05, 3	; 5
    362a:	05 c0       	rjmp	.+10     	; 0x3636 <main+0x210>
			}
		}
		// RC signal received normally
		else
		{
			General_error &= ~(1 << NO_SIGNAL);		// Clear NO_SIGNAL bit
    362c:	80 91 1e 05 	lds	r24, 0x051E
    3630:	8d 7f       	andi	r24, 0xFD	; 253
    3632:	80 93 1e 05 	sts	0x051E, r24
		}

		// Beep buzzer if Vbat lower than trigger		
		if (GetVbat() < Config.PowerTriggerActual)
    3636:	0e 94 0d 46 	call	0x8c1a	; 0x8c1a <GetVbat>
    363a:	20 91 2f 06 	lds	r18, 0x062F
    363e:	30 91 30 06 	lds	r19, 0x0630
    3642:	82 17       	cp	r24, r18
    3644:	93 07       	cpc	r25, r19
    3646:	20 f4       	brcc	.+8      	; 0x3650 <main+0x22a>
		{
			General_error |= (1 << LVA_ALARM);	// Set LVA_Alarm flag
    3648:	80 91 1e 05 	lds	r24, 0x051E
    364c:	88 60       	ori	r24, 0x08	; 8
    364e:	03 c0       	rjmp	.+6      	; 0x3656 <main+0x230>
		}
		else 
		{
			General_error &= ~(1 << LVA_ALARM);	// Clear LVA_Alarm flag
    3650:	80 91 1e 05 	lds	r24, 0x051E
    3654:	87 7f       	andi	r24, 0xF7	; 247
    3656:	80 93 1e 05 	sts	0x051E, r24
		}

		// Turn on buzzer if in alarm state (BUZZER_ON is oscillating)
		if	(
			 (
				(General_error & (1 << LVA_ALARM)) ||		// Low battery
    365a:	80 91 1e 05 	lds	r24, 0x051E
		{
			General_error &= ~(1 << LVA_ALARM);	// Clear LVA_Alarm flag
		}

		// Turn on buzzer if in alarm state (BUZZER_ON is oscillating)
		if	(
    365e:	83 fd       	sbrc	r24, 3
    3660:	08 c0       	rjmp	.+16     	; 0x3672 <main+0x24c>
			 (
				(General_error & (1 << LVA_ALARM)) ||		// Low battery
				(General_error & (1 << NO_SIGNAL)) ||		// No signal
    3662:	80 91 1e 05 	lds	r24, 0x051E
		}

		// Turn on buzzer if in alarm state (BUZZER_ON is oscillating)
		if	(
			 (
				(General_error & (1 << LVA_ALARM)) ||		// Low battery
    3666:	81 fd       	sbrc	r24, 1
    3668:	04 c0       	rjmp	.+8      	; 0x3672 <main+0x24c>
				(General_error & (1 << NO_SIGNAL)) ||		// No signal
				(General_error & (1 << THROTTLE_HIGH))		// Throttle high
    366a:	80 91 1e 05 	lds	r24, 0x051E

		// Turn on buzzer if in alarm state (BUZZER_ON is oscillating)
		if	(
			 (
				(General_error & (1 << LVA_ALARM)) ||		// Low battery
				(General_error & (1 << NO_SIGNAL)) ||		// No signal
    366e:	80 ff       	sbrs	r24, 0
    3670:	06 c0       	rjmp	.+12     	; 0x367e <main+0x258>
				(General_error & (1 << THROTTLE_HIGH))		// Throttle high
			 ) && 
			  (Alarm_flags & (1 << BUZZER_ON))
    3672:	80 91 1c 05 	lds	r24, 0x051C
		if	(
			 (
				(General_error & (1 << LVA_ALARM)) ||		// Low battery
				(General_error & (1 << NO_SIGNAL)) ||		// No signal
				(General_error & (1 << THROTTLE_HIGH))		// Throttle high
			 ) && 
    3676:	84 ff       	sbrs	r24, 4
    3678:	02 c0       	rjmp	.+4      	; 0x367e <main+0x258>
			  (Alarm_flags & (1 << BUZZER_ON))
			) 
		{
			LVA = 1;
    367a:	29 9a       	sbi	0x05, 1	; 5
    367c:	01 c0       	rjmp	.+2      	; 0x3680 <main+0x25a>
		}
		else 
		{
			LVA = 0;
    367e:	29 98       	cbi	0x05, 1	; 5

		//************************************************************
		//* Arm/disarm handling
		//************************************************************

		if (Config.ArmMode == ARMABLE)
    3680:	80 91 33 06 	lds	r24, 0x0633
    3684:	81 30       	cpi	r24, 0x01	; 1
    3686:	09 f0       	breq	.+2      	; 0x368a <main+0x264>
    3688:	8e c0       	rjmp	.+284    	; 0x37a6 <main+0x380>
		{
			// Manual arm/disarm
			// If sticks not at extremes, reset manual arm/disarm timer
			// Sticks down and centered = armed. Down and outside = disarmed
			if (
				((-ARM_TIMER_RESET_1 < RCinputs[AILERON]) && (RCinputs[AILERON] < ARM_TIMER_RESET_1)) ||
    368a:	80 91 25 08 	lds	r24, 0x0825
    368e:	90 91 26 08 	lds	r25, 0x0826
		if (Config.ArmMode == ARMABLE)
		{
			// Manual arm/disarm
			// If sticks not at extremes, reset manual arm/disarm timer
			// Sticks down and centered = armed. Down and outside = disarmed
			if (
    3692:	81 34       	cpi	r24, 0x41	; 65
    3694:	9c 4f       	sbci	r25, 0xFC	; 252
    3696:	44 f0       	brlt	.+16     	; 0x36a8 <main+0x282>
				((-ARM_TIMER_RESET_1 < RCinputs[AILERON]) && (RCinputs[AILERON] < ARM_TIMER_RESET_1)) ||
    3698:	80 91 25 08 	lds	r24, 0x0825
    369c:	90 91 26 08 	lds	r25, 0x0826
    36a0:	80 3c       	cpi	r24, 0xC0	; 192
    36a2:	93 40       	sbci	r25, 0x03	; 3
    36a4:	0c f4       	brge	.+2      	; 0x36a8 <main+0x282>
    36a6:	4f c0       	rjmp	.+158    	; 0x3746 <main+0x320>
				((-ARM_TIMER_RESET_1 < RCinputs[ELEVATOR]) && (RCinputs[ELEVATOR] < ARM_TIMER_RESET_1)) ||
    36a8:	80 91 27 08 	lds	r24, 0x0827
    36ac:	90 91 28 08 	lds	r25, 0x0828
		{
			// Manual arm/disarm
			// If sticks not at extremes, reset manual arm/disarm timer
			// Sticks down and centered = armed. Down and outside = disarmed
			if (
				((-ARM_TIMER_RESET_1 < RCinputs[AILERON]) && (RCinputs[AILERON] < ARM_TIMER_RESET_1)) ||
    36b0:	81 34       	cpi	r24, 0x41	; 65
    36b2:	9c 4f       	sbci	r25, 0xFC	; 252
    36b4:	44 f0       	brlt	.+16     	; 0x36c6 <main+0x2a0>
				((-ARM_TIMER_RESET_1 < RCinputs[ELEVATOR]) && (RCinputs[ELEVATOR] < ARM_TIMER_RESET_1)) ||
    36b6:	80 91 27 08 	lds	r24, 0x0827
    36ba:	90 91 28 08 	lds	r25, 0x0828
    36be:	80 3c       	cpi	r24, 0xC0	; 192
    36c0:	93 40       	sbci	r25, 0x03	; 3
    36c2:	0c f4       	brge	.+2      	; 0x36c6 <main+0x2a0>
    36c4:	40 c0       	rjmp	.+128    	; 0x3746 <main+0x320>
				((-ARM_TIMER_RESET_1 < RCinputs[RUDDER]) && (RCinputs[RUDDER] < ARM_TIMER_RESET_1)) ||
    36c6:	80 91 29 08 	lds	r24, 0x0829
    36ca:	90 91 2a 08 	lds	r25, 0x082A
			// Manual arm/disarm
			// If sticks not at extremes, reset manual arm/disarm timer
			// Sticks down and centered = armed. Down and outside = disarmed
			if (
				((-ARM_TIMER_RESET_1 < RCinputs[AILERON]) && (RCinputs[AILERON] < ARM_TIMER_RESET_1)) ||
				((-ARM_TIMER_RESET_1 < RCinputs[ELEVATOR]) && (RCinputs[ELEVATOR] < ARM_TIMER_RESET_1)) ||
    36ce:	81 34       	cpi	r24, 0x41	; 65
    36d0:	9c 4f       	sbci	r25, 0xFC	; 252
    36d2:	3c f0       	brlt	.+14     	; 0x36e2 <main+0x2bc>
				((-ARM_TIMER_RESET_1 < RCinputs[RUDDER]) && (RCinputs[RUDDER] < ARM_TIMER_RESET_1)) ||
    36d4:	80 91 29 08 	lds	r24, 0x0829
    36d8:	90 91 2a 08 	lds	r25, 0x082A
    36dc:	80 3c       	cpi	r24, 0xC0	; 192
    36de:	93 40       	sbci	r25, 0x03	; 3
    36e0:	94 f1       	brlt	.+100    	; 0x3746 <main+0x320>
				(ARM_TIMER_RESET_2 < MonopolarThrottle)
    36e2:	80 91 21 08 	lds	r24, 0x0821
    36e6:	90 91 22 08 	lds	r25, 0x0822
			// If sticks not at extremes, reset manual arm/disarm timer
			// Sticks down and centered = armed. Down and outside = disarmed
			if (
				((-ARM_TIMER_RESET_1 < RCinputs[AILERON]) && (RCinputs[AILERON] < ARM_TIMER_RESET_1)) ||
				((-ARM_TIMER_RESET_1 < RCinputs[ELEVATOR]) && (RCinputs[ELEVATOR] < ARM_TIMER_RESET_1)) ||
				((-ARM_TIMER_RESET_1 < RCinputs[RUDDER]) && (RCinputs[RUDDER] < ARM_TIMER_RESET_1)) ||
    36ea:	c3 97       	sbiw	r24, 0x33	; 51
    36ec:	64 f5       	brge	.+88     	; 0x3746 <main+0x320>
				Arm_timer = 0;
			}

			// If arm timer times out, the sticks must have been at extremes for ARM_TIMER seconds
			// If aileron is at min, arm the FC
			if ((Arm_timer > ARM_TIMER) && (RCinputs[AILERON] < -ARM_TIMER_RESET_1))
    36ee:	3c e4       	ldi	r19, 0x4C	; 76
    36f0:	23 16       	cp	r2, r19
    36f2:	33 06       	cpc	r3, r19
    36f4:	41 04       	cpc	r4, r1
    36f6:	51 04       	cpc	r5, r1
    36f8:	48 f1       	brcs	.+82     	; 0x374c <main+0x326>
    36fa:	80 91 25 08 	lds	r24, 0x0825
    36fe:	90 91 26 08 	lds	r25, 0x0826
    3702:	80 34       	cpi	r24, 0x40	; 64
    3704:	9c 4f       	sbci	r25, 0xFC	; 252
    3706:	5c f4       	brge	.+22     	; 0x371e <main+0x2f8>
			{
				Arm_timer = 0;
				General_error &= ~(1 << DISARMED);		// Set flags to armed (negate disarmed)
    3708:	80 91 1e 05 	lds	r24, 0x051E
    370c:	8b 7f       	andi	r24, 0xFB	; 251
    370e:	80 93 1e 05 	sts	0x051E, r24
				CalibrateGyrosSlow();					// Calibrate gyros
    3712:	0e 94 88 23 	call	0x4710	; 0x4710 <CalibrateGyrosSlow>
				LED1 = 1;								// Signal that FC is ready
    3716:	2b 9a       	sbi	0x05, 3	; 5
				reset_IMU();							// Reset IMU just in case...
    3718:	0e 94 d4 28 	call	0x51a8	; 0x51a8 <reset_IMU>
    371c:	14 c0       	rjmp	.+40     	; 0x3746 <main+0x320>
			}
			// Else, disarm the FC after DISARM_TIMER seconds if aileron at max
			else if ((Arm_timer > DISARM_TIMER) && (RCinputs[AILERON] > ARM_TIMER_RESET_1))
    371e:	52 ee       	ldi	r21, 0xE2	; 226
    3720:	25 16       	cp	r2, r21
    3722:	54 ee       	ldi	r21, 0xE4	; 228
    3724:	35 06       	cpc	r3, r21
    3726:	41 04       	cpc	r4, r1
    3728:	51 04       	cpc	r5, r1
    372a:	80 f0       	brcs	.+32     	; 0x374c <main+0x326>
    372c:	80 91 25 08 	lds	r24, 0x0825
    3730:	90 91 26 08 	lds	r25, 0x0826
    3734:	81 3c       	cpi	r24, 0xC1	; 193
    3736:	93 40       	sbci	r25, 0x03	; 3
    3738:	4c f0       	brlt	.+18     	; 0x374c <main+0x326>
			{
				Arm_timer = 0;
				General_error |= (1 << DISARMED);		// Set flags to disarmed
    373a:	80 91 1e 05 	lds	r24, 0x051E
    373e:	84 60       	ori	r24, 0x04	; 4
    3740:	80 93 1e 05 	sts	0x051E, r24
				LED1 = 0;								// Signal that FC is now disarmed
    3744:	2b 98       	cbi	0x05, 3	; 5
    3746:	21 2c       	mov	r2, r1
    3748:	31 2c       	mov	r3, r1
    374a:	21 01       	movw	r4, r2
			}

			// Automatic disarm
			// Reset auto-disarm count if any RX activity or set to zero, or when currently disarmed
			if ((Flight_flags & (1 << RxActivity)) || (Config.Disarm_timer == 0) || (General_error & (1 << DISARMED)))
    374c:	80 91 1d 05 	lds	r24, 0x051D
    3750:	80 fd       	sbrc	r24, 0
    3752:	11 c0       	rjmp	.+34     	; 0x3776 <main+0x350>
    3754:	80 91 34 06 	lds	r24, 0x0634
    3758:	88 23       	and	r24, r24
    375a:	69 f0       	breq	.+26     	; 0x3776 <main+0x350>
    375c:	80 91 1e 05 	lds	r24, 0x051E
    3760:	82 fd       	sbrc	r24, 2
    3762:	09 c0       	rjmp	.+18     	; 0x3776 <main+0x350>
				Disarm_timer = 0;
				Disarm_seconds = 0;
			}
		
			// Increment disarm timer (seconds) if armed
			if (Disarm_timer > SECOND_TIMER)
    3764:	2f 81       	ldd	r18, Y+7	; 0x07
    3766:	38 85       	ldd	r19, Y+8	; 0x08
    3768:	2c 34       	cpi	r18, 0x4C	; 76
    376a:	3c 44       	sbci	r19, 0x4C	; 76
    376c:	38 f0       	brcs	.+14     	; 0x377c <main+0x356>
			{
				Disarm_seconds++;
    376e:	2b 85       	ldd	r18, Y+11	; 0x0b
    3770:	2f 5f       	subi	r18, 0xFF	; 255
    3772:	2b 87       	std	Y+11, r18	; 0x0b
    3774:	01 c0       	rjmp	.+2      	; 0x3778 <main+0x352>
    3776:	1b 86       	std	Y+11, r1	; 0x0b
    3778:	18 86       	std	Y+8, r1	; 0x08
    377a:	1f 82       	std	Y+7, r1	; 0x07
				Disarm_timer = 0;
			}

			// Auto-disarm model if timeout enabled and due
			// Don't allow disarms less than 30 seconds. That's just silly...
			if ((Disarm_seconds >= Config.Disarm_timer) && (Config.Disarm_timer >= 30))	
    377c:	40 91 34 06 	lds	r20, 0x0634
    3780:	5b 85       	ldd	r21, Y+11	; 0x0b
    3782:	25 2f       	mov	r18, r21
    3784:	30 e0       	ldi	r19, 0x00	; 0
    3786:	84 2f       	mov	r24, r20
    3788:	99 27       	eor	r25, r25
    378a:	87 fd       	sbrc	r24, 7
    378c:	90 95       	com	r25
    378e:	28 17       	cp	r18, r24
    3790:	39 07       	cpc	r19, r25
    3792:	7c f0       	brlt	.+30     	; 0x37b2 <main+0x38c>
    3794:	4e 31       	cpi	r20, 0x1E	; 30
    3796:	6c f0       	brlt	.+26     	; 0x37b2 <main+0x38c>
			{
				// Disarm the FC
				General_error |= (1 << DISARMED);		// Set flags to disarmed
    3798:	80 91 1e 05 	lds	r24, 0x051E
    379c:	84 60       	ori	r24, 0x04	; 4
    379e:	80 93 1e 05 	sts	0x051E, r24
				LED1 = 0;								// Signal that FC is now disarmed
    37a2:	2b 98       	cbi	0x05, 3	; 5
    37a4:	06 c0       	rjmp	.+12     	; 0x37b2 <main+0x38c>
			}
		}
		// Arm when ArmMode is OFF
		else 
		{
			General_error &= ~(1 << DISARMED);			// Set flags to armed
    37a6:	80 91 1e 05 	lds	r24, 0x051E
    37aa:	8b 7f       	andi	r24, 0xFB	; 251
    37ac:	80 93 1e 05 	sts	0x051E, r24
			LED1 = 1;
    37b0:	2b 9a       	sbi	0x05, 3	; 5
		//************************************************************
		//* Get RC data
		//************************************************************

		// Update zeroed RC channel data
		RxGetChannels();
    37b2:	0e 94 43 43 	call	0x8686	; 0x8686 <RxGetChannels>

		// Check for throttle reset
		if (MonopolarThrottle < THROTTLEIDLE)
    37b6:	80 91 21 08 	lds	r24, 0x0821
    37ba:	90 91 22 08 	lds	r25, 0x0822
    37be:	c2 97       	sbiw	r24, 0x32	; 50
    37c0:	5c f4       	brge	.+22     	; 0x37d8 <main+0x3b2>
		{
			// Clear throttle high error
			General_error &= ~(1 << THROTTLE_HIGH);	
    37c2:	80 91 1e 05 	lds	r24, 0x051E
    37c6:	8e 7f       	andi	r24, 0xFE	; 254
    37c8:	80 93 1e 05 	sts	0x051E, r24

			// Reset I-terms at throttle cut. Using memset saves code space
			memset(&IntegralGyro[P1][ROLL], 0, sizeof(int32_t) * 6); 
    37cc:	88 e1       	ldi	r24, 0x18	; 24
    37ce:	a5 ee       	ldi	r26, 0xE5	; 229
    37d0:	b7 e0       	ldi	r27, 0x07	; 7
    37d2:	1d 92       	st	X+, r1
    37d4:	8a 95       	dec	r24
    37d6:	e9 f7       	brne	.-6      	; 0x37d2 <main+0x3ac>
		//* by the Config.TransitionSpeed setting.
		//* The transition will hold at P1n position if directed to.
		//************************************************************

		// P2 transition point hard-coded to 50% above center
		if 	(RCinputs[Config.FlightChan] > 500)
    37d8:	80 91 d6 05 	lds	r24, 0x05D6
    37dc:	88 0f       	add	r24, r24
    37de:	99 0b       	sbc	r25, r25
    37e0:	fc 01       	movw	r30, r24
    37e2:	ed 5d       	subi	r30, 0xDD	; 221
    37e4:	f7 4f       	sbci	r31, 0xF7	; 247
    37e6:	20 81       	ld	r18, Z
    37e8:	31 81       	ldd	r19, Z+1	; 0x01
    37ea:	25 3f       	cpi	r18, 0xF5	; 245
    37ec:	31 40       	sbci	r19, 0x01	; 1
    37ee:	14 f0       	brlt	.+4      	; 0x37f4 <main+0x3ce>
		{
			Config.FlightSel = 2;			// Flight mode 2 (P2)
    37f0:	22 e0       	ldi	r18, 0x02	; 2
    37f2:	06 c0       	rjmp	.+12     	; 0x3800 <main+0x3da>
		}
		// P1.n transition point hard-coded to 50% below center
		else if (RCinputs[Config.FlightChan] > -500)
    37f4:	20 81       	ld	r18, Z
    37f6:	31 81       	ldd	r19, Z+1	; 0x01
    37f8:	2d 30       	cpi	r18, 0x0D	; 13
    37fa:	3e 4f       	sbci	r19, 0xFE	; 254
    37fc:	24 f0       	brlt	.+8      	; 0x3806 <main+0x3e0>
		{
			Config.FlightSel = 1;			// Flight mode 1 (P1.n)
    37fe:	21 e0       	ldi	r18, 0x01	; 1
    3800:	20 93 a7 07 	sts	0x07A7, r18
    3804:	02 c0       	rjmp	.+4      	; 0x380a <main+0x3e4>
		}
		// Otherwise the default is P1
		else
		{
			Config.FlightSel = 0;			// Flight mode 0 (P1)
    3806:	10 92 a7 07 	sts	0x07A7, r1
		//* Set up the correct state for the current setting.
		//* Check for initial startup - the only time that old_flight should be "3".
		//* Also, re-initialise if the transition setting is changed
		//************************************************************

		if ((old_flight == 3) || (old_trans_mode != Config.TransitionSpeed))
    380a:	f3 e0       	ldi	r31, 0x03	; 3
    380c:	bf 16       	cp	r11, r31
    380e:	29 f0       	breq	.+10     	; 0x381a <main+0x3f4>
    3810:	20 91 d7 05 	lds	r18, 0x05D7
    3814:	3f a1       	ldd	r19, Y+39	; 0x27
    3816:	32 17       	cp	r19, r18
    3818:	51 f1       	breq	.+84     	; 0x386e <main+0x448>
		{
			switch(Config.FlightSel)
    381a:	b0 90 a7 07 	lds	r11, 0x07A7
    381e:	41 e0       	ldi	r20, 0x01	; 1
    3820:	b4 16       	cp	r11, r20
    3822:	61 f0       	breq	.+24     	; 0x383c <main+0x416>
    3824:	52 e0       	ldi	r21, 0x02	; 2
    3826:	b5 16       	cp	r11, r21
    3828:	b1 f0       	breq	.+44     	; 0x3856 <main+0x430>
    382a:	b1 10       	cpse	r11, r1
    382c:	1d c0       	rjmp	.+58     	; 0x3868 <main+0x442>
			{
				case 0:
					Transition_state = TRANS_P1;
    382e:	10 92 21 05 	sts	0x0521, r1
					transition_counter = 0;
    3832:	10 92 23 05 	sts	0x0523, r1
    3836:	10 92 22 05 	sts	0x0522, r1
					break;
    383a:	16 c0       	rjmp	.+44     	; 0x3868 <main+0x442>
				case 1:
					Transition_state = TRANS_P1n;
    383c:	24 e0       	ldi	r18, 0x04	; 4
    383e:	20 93 21 05 	sts	0x0521, r18
					transition_counter = Config.Transition_P1n; // Set transition point to the user-selected point
    3842:	20 91 d8 05 	lds	r18, 0x05D8
    3846:	33 27       	eor	r19, r19
    3848:	27 fd       	sbrc	r18, 7
    384a:	30 95       	com	r19
    384c:	30 93 23 05 	sts	0x0523, r19
    3850:	20 93 22 05 	sts	0x0522, r18
					break;
    3854:	09 c0       	rjmp	.+18     	; 0x3868 <main+0x442>
				case 2:
					Transition_state = TRANS_P2;
    3856:	29 e0       	ldi	r18, 0x09	; 9
    3858:	20 93 21 05 	sts	0x0521, r18
					transition_counter = 100;
    385c:	a4 e6       	ldi	r26, 0x64	; 100
    385e:	b0 e0       	ldi	r27, 0x00	; 0
    3860:	b0 93 23 05 	sts	0x0523, r27
    3864:	a0 93 22 05 	sts	0x0522, r26
					break;
				default:
					break;
			}		 
			old_flight = Config.FlightSel;
			old_trans_mode = Config.TransitionSpeed;
    3868:	20 91 d7 05 	lds	r18, 0x05D7
    386c:	2f a3       	std	Y+39, r18	; 0x27
		//************************************************************
		//* Transition state handling
		//************************************************************

		// Update timed transition when changing flight modes
		if (Config.FlightSel != old_flight)
    386e:	30 91 a7 07 	lds	r19, 0x07A7
    3872:	3e 8f       	std	Y+30, r19	; 0x1e
    3874:	31 e0       	ldi	r19, 0x01	; 1
    3876:	4e 8d       	ldd	r20, Y+30	; 0x1e
    3878:	4b 11       	cpse	r20, r11
    387a:	01 c0       	rjmp	.+2      	; 0x387e <main+0x458>
    387c:	30 e0       	ldi	r19, 0x00	; 0
			TransitionUpdated = true;
		}

		// Work out transition number when manually transitioning
		// Convert number to percentage (0 to 100%)
		if (Config.TransitionSpeed == 0)
    387e:	20 91 d7 05 	lds	r18, 0x05D7
    3882:	21 11       	cpse	r18, r1
    3884:	1b c0       	rjmp	.+54     	; 0x38bc <main+0x496>
		{
			// Offset RC input to (approx) -250 to 2250
			temp1 = RCinputs[Config.FlightChan] + 1000;
    3886:	fc 01       	movw	r30, r24
    3888:	ed 5d       	subi	r30, 0xDD	; 221
    388a:	f7 4f       	sbci	r31, 0xF7	; 247
    388c:	80 81       	ld	r24, Z
    388e:	91 81       	ldd	r25, Z+1	; 0x01
    3890:	88 51       	subi	r24, 0x18	; 24
    3892:	9c 4f       	sbci	r25, 0xFC	; 252
    3894:	97 ff       	sbrs	r25, 7
    3896:	02 c0       	rjmp	.+4      	; 0x389c <main+0x476>
    3898:	80 e0       	ldi	r24, 0x00	; 0
    389a:	90 e0       	ldi	r25, 0x00	; 0
			// Trim lower end to zero (0 to 2250)
			if (temp1 < 0) temp1 = 0;

			// Convert 0 to 2250 to 0 to 125. Divide by 20
			// Round to avoid truncation errors
			transition = (temp1 + 10) / 20;
    389c:	0a 96       	adiw	r24, 0x0a	; 10
    389e:	64 e1       	ldi	r22, 0x14	; 20
    38a0:	70 e0       	ldi	r23, 0x00	; 0
    38a2:	0e 94 5b 48 	call	0x90b6	; 0x90b6 <__divmodhi4>

			// transition now has a range of 0 to 101 for 0 to 2000 input
			// Limit extent of transition value 0 to 100 (101 steps)
			if (transition > 100) transition = 100;
    38a6:	65 36       	cpi	r22, 0x65	; 101
    38a8:	71 05       	cpc	r23, r1
    38aa:	0c f4       	brge	.+2      	; 0x38ae <main+0x488>
    38ac:	65 c3       	rjmp	.+1738   	; 0x3f78 <main+0xb52>
    38ae:	84 e6       	ldi	r24, 0x64	; 100
    38b0:	90 e0       	ldi	r25, 0x00	; 0
    38b2:	90 93 20 05 	sts	0x0520, r25
    38b6:	80 93 1f 05 	sts	0x051F, r24
    38ba:	62 c3       	rjmp	.+1732   	; 0x3f80 <main+0xb5a>
		}
		else
		{
			// transition_counter counts from 0 to 100 (101 steps)
			transition = transition_counter;
    38bc:	80 91 22 05 	lds	r24, 0x0522
    38c0:	90 91 23 05 	lds	r25, 0x0523
    38c4:	90 93 20 05 	sts	0x0520, r25
    38c8:	80 93 1f 05 	sts	0x051F, r24
		{
			Transition_state = TRANSITIONING;
		}

		// Update transition state change when control value or flight mode changes
		if (TransitionUpdated)
    38cc:	33 23       	and	r19, r19
    38ce:	99 f0       	breq	.+38     	; 0x38f6 <main+0x4d0>
		{
			// Update transition state from matrix
			Transition_state = (uint8_t)pgm_read_byte(&Trans_Matrix[Config.FlightSel][old_flight]);
    38d0:	4e 8d       	ldd	r20, Y+30	; 0x1e
    38d2:	84 2f       	mov	r24, r20
    38d4:	99 27       	eor	r25, r25
    38d6:	87 fd       	sbrc	r24, 7
    38d8:	90 95       	com	r25
    38da:	fc 01       	movw	r30, r24
    38dc:	ee 0f       	add	r30, r30
    38de:	ff 1f       	adc	r31, r31
    38e0:	e8 0f       	add	r30, r24
    38e2:	f9 1f       	adc	r31, r25
    38e4:	eb 0d       	add	r30, r11
    38e6:	f1 1d       	adc	r31, r1
    38e8:	b7 fc       	sbrc	r11, 7
    38ea:	fa 95       	dec	r31
    38ec:	e4 51       	subi	r30, 0x14	; 20
    38ee:	ff 4f       	sbci	r31, 0xFF	; 255
    38f0:	e4 91       	lpm	r30, Z
    38f2:	e0 93 21 05 	sts	0x0521, r30

		// Calculate transition time from user's setting
		transition_time = TRANSITION_TIMER * Config.TransitionSpeed;
		
		// Update state, values and transition_counter every Config.TransitionSpeed if not zero.
		if (((Config.TransitionSpeed != 0) && (Transition_timeout > transition_time)) ||
    38f6:	22 23       	and	r18, r18
    38f8:	49 f0       	breq	.+18     	; 0x390c <main+0x4e6>
			// Update transition state from matrix
			Transition_state = (uint8_t)pgm_read_byte(&Trans_Matrix[Config.FlightSel][old_flight]);
		}

		// Calculate transition time from user's setting
		transition_time = TRANSITION_TIMER * Config.TransitionSpeed;
    38fa:	53 ec       	ldi	r21, 0xC3	; 195
    38fc:	25 03       	mulsu	r18, r21
    38fe:	c0 01       	movw	r24, r0
    3900:	11 24       	eor	r1, r1
		
		// Update state, values and transition_counter every Config.TransitionSpeed if not zero.
		if (((Config.TransitionSpeed != 0) && (Transition_timeout > transition_time)) ||
    3902:	49 89       	ldd	r20, Y+17	; 0x11
    3904:	5a 89       	ldd	r21, Y+18	; 0x12
    3906:	84 17       	cp	r24, r20
    3908:	95 07       	cpc	r25, r21
    390a:	18 f0       	brcs	.+6      	; 0x3912 <main+0x4ec>
    390c:	33 23       	and	r19, r19
    390e:	09 f4       	brne	.+2      	; 0x3912 <main+0x4ec>
    3910:	a9 c0       	rjmp	.+338    	; 0x3a64 <main+0x63e>
		{
			Transition_timeout = 0;
			TransitionUpdated = false;

			// Fixed, end-point states
			if (Transition_state == TRANS_P1)
    3912:	80 91 21 05 	lds	r24, 0x0521
    3916:	81 11       	cpse	r24, r1
    3918:	05 c0       	rjmp	.+10     	; 0x3924 <main+0x4fe>
			{
				transition_counter = 0;
    391a:	10 92 23 05 	sts	0x0523, r1
    391e:	10 92 22 05 	sts	0x0522, r1
    3922:	22 c0       	rjmp	.+68     	; 0x3968 <main+0x542>
			}
			else if (Transition_state == TRANS_P1n)
    3924:	84 30       	cpi	r24, 0x04	; 4
    3926:	31 f4       	brne	.+12     	; 0x3934 <main+0x50e>
			{
				transition_counter = Config.Transition_P1n;
    3928:	80 91 d8 05 	lds	r24, 0x05D8
    392c:	99 27       	eor	r25, r25
    392e:	87 fd       	sbrc	r24, 7
    3930:	90 95       	com	r25
    3932:	04 c0       	rjmp	.+8      	; 0x393c <main+0x516>
			}
			else if (Transition_state == TRANS_P2)
    3934:	89 30       	cpi	r24, 0x09	; 9
    3936:	39 f4       	brne	.+14     	; 0x3946 <main+0x520>
			{
				transition_counter = 100;
    3938:	84 e6       	ldi	r24, 0x64	; 100
    393a:	90 e0       	ldi	r25, 0x00	; 0
    393c:	90 93 23 05 	sts	0x0523, r25
    3940:	80 93 22 05 	sts	0x0522, r24
    3944:	11 c0       	rjmp	.+34     	; 0x3968 <main+0x542>
			}		

			// Over-ride users requesting silly states
			// If transition_counter is above P1.n but request is P1 to P1.n or 
			// if transition_counter is below P1.n but request is P2 to P1.n...
			if ((Transition_state == TRANS_P1_to_P1n_start) && (transition_counter > Config.Transition_P1n))
    3946:	81 30       	cpi	r24, 0x01	; 1
    3948:	79 f4       	brne	.+30     	; 0x3968 <main+0x542>
    394a:	80 91 d8 05 	lds	r24, 0x05D8
    394e:	99 27       	eor	r25, r25
    3950:	87 fd       	sbrc	r24, 7
    3952:	90 95       	com	r25
    3954:	20 91 22 05 	lds	r18, 0x0522
    3958:	30 91 23 05 	lds	r19, 0x0523
    395c:	82 17       	cp	r24, r18
    395e:	93 07       	cpc	r25, r19
    3960:	1c f4       	brge	.+6      	; 0x3968 <main+0x542>
			{
				// Reset state to a more appropriate one
				Transition_state = TRANS_P2_to_P1n_start;
    3962:	88 e0       	ldi	r24, 0x08	; 8
    3964:	80 93 21 05 	sts	0x0521, r24
			}

			if ((Transition_state == TRANS_P2_to_P1n_start) && (transition_counter < Config.Transition_P1n))
    3968:	80 91 21 05 	lds	r24, 0x0521
    396c:	88 30       	cpi	r24, 0x08	; 8
    396e:	79 f4       	brne	.+30     	; 0x398e <main+0x568>
    3970:	80 91 d8 05 	lds	r24, 0x05D8
    3974:	99 27       	eor	r25, r25
    3976:	87 fd       	sbrc	r24, 7
    3978:	90 95       	com	r25
    397a:	20 91 22 05 	lds	r18, 0x0522
    397e:	30 91 23 05 	lds	r19, 0x0523
    3982:	28 17       	cp	r18, r24
    3984:	39 07       	cpc	r19, r25
    3986:	1c f4       	brge	.+6      	; 0x398e <main+0x568>
			{
				// Reset state to a more appropriate one
				Transition_state = TRANS_P1_to_P1n_start;
    3988:	81 e0       	ldi	r24, 0x01	; 1
    398a:	80 93 21 05 	sts	0x0521, r24
			}

			// Handle timed transition towards P1
			if ((Transition_state == TRANS_P1n_to_P1_start) || (Transition_state == TRANS_P2_to_P1_start))
    398e:	80 91 21 05 	lds	r24, 0x0521
    3992:	8b 7f       	andi	r24, 0xFB	; 251
    3994:	82 30       	cpi	r24, 0x02	; 2
    3996:	91 f4       	brne	.+36     	; 0x39bc <main+0x596>
			{
				transition_counter--;
    3998:	80 91 22 05 	lds	r24, 0x0522
    399c:	90 91 23 05 	lds	r25, 0x0523
    39a0:	01 97       	sbiw	r24, 0x01	; 1
    39a2:	90 93 23 05 	sts	0x0523, r25
    39a6:	80 93 22 05 	sts	0x0522, r24
				if (transition_counter <= 0)
    39aa:	18 16       	cp	r1, r24
    39ac:	19 06       	cpc	r1, r25
    39ae:	34 f0       	brlt	.+12     	; 0x39bc <main+0x596>
				{
					transition_counter = 0;
    39b0:	10 92 23 05 	sts	0x0523, r1
    39b4:	10 92 22 05 	sts	0x0522, r1
					Transition_state = TRANS_P1;
    39b8:	10 92 21 05 	sts	0x0521, r1
				}
			}

			// Handle timed transition between P1.n and P1
			if (Transition_state == TRANS_P1_to_P1n_start)
    39bc:	80 91 21 05 	lds	r24, 0x0521
    39c0:	81 30       	cpi	r24, 0x01	; 1
    39c2:	c1 f4       	brne	.+48     	; 0x39f4 <main+0x5ce>
			{
				transition_counter++;
    39c4:	80 91 22 05 	lds	r24, 0x0522
    39c8:	90 91 23 05 	lds	r25, 0x0523
    39cc:	01 96       	adiw	r24, 0x01	; 1
    39ce:	90 93 23 05 	sts	0x0523, r25
    39d2:	80 93 22 05 	sts	0x0522, r24
				if (transition_counter >= Config.Transition_P1n)
    39d6:	20 91 d8 05 	lds	r18, 0x05D8
    39da:	33 27       	eor	r19, r19
    39dc:	27 fd       	sbrc	r18, 7
    39de:	30 95       	com	r19
    39e0:	82 17       	cp	r24, r18
    39e2:	93 07       	cpc	r25, r19
    39e4:	3c f0       	brlt	.+14     	; 0x39f4 <main+0x5ce>
				{
					transition_counter = Config.Transition_P1n;
    39e6:	30 93 23 05 	sts	0x0523, r19
    39ea:	20 93 22 05 	sts	0x0522, r18
					Transition_state = TRANS_P1n;
    39ee:	84 e0       	ldi	r24, 0x04	; 4
    39f0:	80 93 21 05 	sts	0x0521, r24
				}
			}			
				
			// Handle timed transition between P1.n and P2
			if (Transition_state == TRANS_P2_to_P1n_start)
    39f4:	80 91 21 05 	lds	r24, 0x0521
    39f8:	88 30       	cpi	r24, 0x08	; 8
    39fa:	c1 f4       	brne	.+48     	; 0x3a2c <main+0x606>
			{
				transition_counter--;
    39fc:	80 91 22 05 	lds	r24, 0x0522
    3a00:	90 91 23 05 	lds	r25, 0x0523
    3a04:	01 97       	sbiw	r24, 0x01	; 1
    3a06:	90 93 23 05 	sts	0x0523, r25
    3a0a:	80 93 22 05 	sts	0x0522, r24
				if (transition_counter <= Config.Transition_P1n)
    3a0e:	20 91 d8 05 	lds	r18, 0x05D8
    3a12:	33 27       	eor	r19, r19
    3a14:	27 fd       	sbrc	r18, 7
    3a16:	30 95       	com	r19
    3a18:	28 17       	cp	r18, r24
    3a1a:	39 07       	cpc	r19, r25
    3a1c:	3c f0       	brlt	.+14     	; 0x3a2c <main+0x606>
				{
					transition_counter = Config.Transition_P1n;
    3a1e:	30 93 23 05 	sts	0x0523, r19
    3a22:	20 93 22 05 	sts	0x0522, r18
					Transition_state = TRANS_P1n;
    3a26:	84 e0       	ldi	r24, 0x04	; 4
    3a28:	80 93 21 05 	sts	0x0521, r24
				}
			}

			// Handle timed transition towards P2
			if ((Transition_state == TRANS_P1n_to_P2_start) || (Transition_state == TRANS_P1_to_P2_start))
    3a2c:	80 91 21 05 	lds	r24, 0x0521
    3a30:	8b 7f       	andi	r24, 0xFB	; 251
    3a32:	83 30       	cpi	r24, 0x03	; 3
    3a34:	a9 f4       	brne	.+42     	; 0x3a60 <main+0x63a>
			{
				transition_counter++;
    3a36:	80 91 22 05 	lds	r24, 0x0522
    3a3a:	90 91 23 05 	lds	r25, 0x0523
    3a3e:	01 96       	adiw	r24, 0x01	; 1
    3a40:	90 93 23 05 	sts	0x0523, r25
    3a44:	80 93 22 05 	sts	0x0522, r24
				if (transition_counter >= 100)
    3a48:	84 36       	cpi	r24, 0x64	; 100
    3a4a:	91 05       	cpc	r25, r1
    3a4c:	4c f0       	brlt	.+18     	; 0x3a60 <main+0x63a>
				{
					transition_counter = 100;
    3a4e:	a4 e6       	ldi	r26, 0x64	; 100
    3a50:	b0 e0       	ldi	r27, 0x00	; 0
    3a52:	b0 93 23 05 	sts	0x0523, r27
    3a56:	a0 93 22 05 	sts	0x0522, r26
					Transition_state = TRANS_P2;
    3a5a:	89 e0       	ldi	r24, 0x09	; 9
    3a5c:	80 93 21 05 	sts	0x0521, r24
		// Update state, values and transition_counter every Config.TransitionSpeed if not zero.
		if (((Config.TransitionSpeed != 0) && (Transition_timeout > transition_time)) ||
			// Update immediately
			TransitionUpdated)
		{
			Transition_timeout = 0;
    3a60:	1a 8a       	std	Y+18, r1	; 0x12
    3a62:	19 8a       	std	Y+17, r1	; 0x11
			}

		} // Update transition_counter

		// Zero the I-terms of the opposite state so as to ensure a bump-less transition
		if ((Transition_state == TRANS_P1) || (transition == 0))
    3a64:	20 91 21 05 	lds	r18, 0x0521
    3a68:	22 23       	and	r18, r18
    3a6a:	31 f0       	breq	.+12     	; 0x3a78 <main+0x652>
    3a6c:	80 91 1f 05 	lds	r24, 0x051F
    3a70:	90 91 20 05 	lds	r25, 0x0520
    3a74:	00 97       	sbiw	r24, 0x00	; 0
    3a76:	39 f4       	brne	.+14     	; 0x3a86 <main+0x660>
		{
			// Clear P2 I-term while fully in P1
			memset(&IntegralGyro[P2][ROLL], 0, sizeof(int32_t) * NUMBEROFAXIS);
    3a78:	8c e0       	ldi	r24, 0x0C	; 12
    3a7a:	e1 ef       	ldi	r30, 0xF1	; 241
    3a7c:	f7 e0       	ldi	r31, 0x07	; 7
    3a7e:	11 92       	st	Z+, r1
    3a80:	8a 95       	dec	r24
    3a82:	e9 f7       	brne	.-6      	; 0x3a7e <main+0x658>
    3a84:	0b c0       	rjmp	.+22     	; 0x3a9c <main+0x676>
		}
		else if ((Transition_state == TRANS_P2) || (transition == 100))
    3a86:	29 30       	cpi	r18, 0x09	; 9
    3a88:	19 f0       	breq	.+6      	; 0x3a90 <main+0x66a>
    3a8a:	84 36       	cpi	r24, 0x64	; 100
    3a8c:	91 05       	cpc	r25, r1
    3a8e:	31 f4       	brne	.+12     	; 0x3a9c <main+0x676>
		{
			// Clear P1 I-term while fully in P2
			memset(&IntegralGyro[P1][ROLL], 0, sizeof(int32_t) * NUMBEROFAXIS);
    3a90:	8c e0       	ldi	r24, 0x0C	; 12
    3a92:	a5 ee       	ldi	r26, 0xE5	; 229
    3a94:	b7 e0       	ldi	r27, 0x07	; 7
    3a96:	1d 92       	st	X+, r1
    3a98:	8a 95       	dec	r24
    3a9a:	e9 f7       	brne	.-6      	; 0x3a96 <main+0x670>
		//************************************************************
		//* Update timers
		//************************************************************

		// Safely get current value of TCNT1
		Save_TCNT1 = TIM16_ReadTCNT1();
    3a9c:	0e 94 e4 2b 	call	0x57c8	; 0x57c8 <TIM16_ReadTCNT1>
    3aa0:	9c 8b       	std	Y+20, r25	; 0x14
    3aa2:	8b 8b       	std	Y+19, r24	; 0x13
		
		// 32-bit timers (Max. 1718s measurement on T1, 220K seconds on T2)

		// Handle TCNT1-based timer correctly - this actually seems necessary...
		// Work out the current RC rate by measuring between incoming RC packets
		if (Save_TCNT1 < RC_Rate_TCNT1)
    3aa4:	88 15       	cp	r24, r8
    3aa6:	99 05       	cpc	r25, r9
    3aa8:	b8 f4       	brcc	.+46     	; 0x3ad8 <main+0x6b2>
		{
			RC_Rate_Timer += (65536 - RC_Rate_TCNT1 + Save_TCNT1);
    3aaa:	80 e0       	ldi	r24, 0x00	; 0
    3aac:	90 e0       	ldi	r25, 0x00	; 0
    3aae:	a1 e0       	ldi	r26, 0x01	; 1
    3ab0:	b0 e0       	ldi	r27, 0x00	; 0
    3ab2:	88 19       	sub	r24, r8
    3ab4:	99 09       	sbc	r25, r9
    3ab6:	a1 09       	sbc	r26, r1
    3ab8:	b1 09       	sbc	r27, r1
    3aba:	2b 89       	ldd	r18, Y+19	; 0x13
    3abc:	3c 89       	ldd	r19, Y+20	; 0x14
    3abe:	82 0f       	add	r24, r18
    3ac0:	93 1f       	adc	r25, r19
    3ac2:	a1 1d       	adc	r26, r1
    3ac4:	b1 1d       	adc	r27, r1
    3ac6:	2b 81       	ldd	r18, Y+3	; 0x03
    3ac8:	3c 81       	ldd	r19, Y+4	; 0x04
    3aca:	4d 81       	ldd	r20, Y+5	; 0x05
    3acc:	5e 81       	ldd	r21, Y+6	; 0x06
    3ace:	28 0f       	add	r18, r24
    3ad0:	39 1f       	adc	r19, r25
    3ad2:	4a 1f       	adc	r20, r26
    3ad4:	5b 1f       	adc	r21, r27
    3ad6:	0c c0       	rjmp	.+24     	; 0x3af0 <main+0x6ca>
		}
		else
		{
			RC_Rate_Timer += (Save_TCNT1 - RC_Rate_TCNT1);
    3ad8:	8b 89       	ldd	r24, Y+19	; 0x13
    3ada:	9c 89       	ldd	r25, Y+20	; 0x14
    3adc:	88 19       	sub	r24, r8
    3ade:	99 09       	sbc	r25, r9
    3ae0:	2b 81       	ldd	r18, Y+3	; 0x03
    3ae2:	3c 81       	ldd	r19, Y+4	; 0x04
    3ae4:	4d 81       	ldd	r20, Y+5	; 0x05
    3ae6:	5e 81       	ldd	r21, Y+6	; 0x06
    3ae8:	28 0f       	add	r18, r24
    3aea:	39 1f       	adc	r19, r25
    3aec:	41 1d       	adc	r20, r1
    3aee:	51 1d       	adc	r21, r1
    3af0:	2b 83       	std	Y+3, r18	; 0x03
    3af2:	3c 83       	std	Y+4, r19	; 0x04
    3af4:	4d 83       	std	Y+5, r20	; 0x05
    3af6:	5e 83       	std	Y+6, r21	; 0x06
		}
		
		RC_Rate_TCNT1 = Save_TCNT1;

		// Arm timer for timing stick hold
		Arm_timer += (uint8_t)(TCNT2 - Arm_TCNT2); 
    3af8:	80 91 b2 00 	lds	r24, 0x00B2
    3afc:	3b a1       	ldd	r19, Y+35	; 0x23
    3afe:	83 1b       	sub	r24, r19
    3b00:	28 0e       	add	r2, r24
    3b02:	31 1c       	adc	r3, r1
    3b04:	41 1c       	adc	r4, r1
    3b06:	51 1c       	adc	r5, r1
		Arm_TCNT2 = TCNT2;
    3b08:	40 91 b2 00 	lds	r20, 0x00B2
    3b0c:	4b a3       	std	Y+35, r20	; 0x23

		// 16-bit timers (Max. 3.35s measurement on T2)
		// All TCNT2 timers increment at 19.531 kHz

		// Sets the desired SERVO_RATE by flagging ServoTick when PWM due
		Servo_Rate += (uint8_t)(TCNT2 - ServoRate_TCNT2);
    3b0e:	80 91 b2 00 	lds	r24, 0x00B2
    3b12:	2e a1       	ldd	r18, Y+38	; 0x26
    3b14:	82 1b       	sub	r24, r18
    3b16:	4f 85       	ldd	r20, Y+15	; 0x0f
    3b18:	58 89       	ldd	r21, Y+16	; 0x10
    3b1a:	48 0f       	add	r20, r24
    3b1c:	51 1d       	adc	r21, r1
    3b1e:	58 8b       	std	Y+16, r21	; 0x10
    3b20:	4f 87       	std	Y+15, r20	; 0x0f
		ServoRate_TCNT2 = TCNT2;
    3b22:	20 91 b2 00 	lds	r18, 0x00B2
    3b26:	2e a3       	std	Y+38, r18	; 0x26
		
		// Signal RC overdue after RC_OVERDUE time (500ms)
		RC_Timeout += (uint8_t)(TCNT2 - Servo_TCNT2);
    3b28:	80 91 b2 00 	lds	r24, 0x00B2
    3b2c:	3d a1       	ldd	r19, Y+37	; 0x25
    3b2e:	83 1b       	sub	r24, r19
    3b30:	4a a5       	ldd	r20, Y+42	; 0x2a
    3b32:	5b a5       	ldd	r21, Y+43	; 0x2b
    3b34:	48 0f       	add	r20, r24
    3b36:	51 1d       	adc	r21, r1
    3b38:	5b a7       	std	Y+43, r21	; 0x2b
    3b3a:	4a a7       	std	Y+42, r20	; 0x2a
		Servo_TCNT2 = TCNT2;
    3b3c:	20 91 b2 00 	lds	r18, 0x00B2
    3b40:	2d a3       	std	Y+37, r18	; 0x25
		
		// Update transition timer
		Transition_timeout += (uint8_t)(TCNT2 - Transition_TCNT2);
    3b42:	80 91 b2 00 	lds	r24, 0x00B2
    3b46:	3f 8d       	ldd	r19, Y+31	; 0x1f
    3b48:	83 1b       	sub	r24, r19
    3b4a:	49 89       	ldd	r20, Y+17	; 0x11
    3b4c:	5a 89       	ldd	r21, Y+18	; 0x12
    3b4e:	48 0f       	add	r20, r24
    3b50:	51 1d       	adc	r21, r1
    3b52:	5a 8b       	std	Y+18, r21	; 0x12
    3b54:	49 8b       	std	Y+17, r20	; 0x11
		Transition_TCNT2 = TCNT2;
    3b56:	20 91 b2 00 	lds	r18, 0x00B2
    3b5a:	2f 8f       	std	Y+31, r18	; 0x1f

		// Update status timeout
		Status_timeout += (uint8_t)(TCNT2 - Status_TCNT2);
    3b5c:	80 91 b2 00 	lds	r24, 0x00B2
    3b60:	38 a1       	ldd	r19, Y+32	; 0x20
    3b62:	83 1b       	sub	r24, r19
    3b64:	4d 85       	ldd	r20, Y+13	; 0x0d
    3b66:	5e 85       	ldd	r21, Y+14	; 0x0e
    3b68:	48 0f       	add	r20, r24
    3b6a:	51 1d       	adc	r21, r1
    3b6c:	5e 87       	std	Y+14, r21	; 0x0e
    3b6e:	4d 87       	std	Y+13, r20	; 0x0d
		Status_TCNT2 = TCNT2;
    3b70:	20 91 b2 00 	lds	r18, 0x00B2
    3b74:	28 a3       	std	Y+32, r18	; 0x20
		
		// Status refresh timer
		UpdateStatus_timer += (uint8_t)(TCNT2 - Refresh_TCNT2);
    3b76:	80 91 b2 00 	lds	r24, 0x00B2
    3b7a:	39 a1       	ldd	r19, Y+33	; 0x21
    3b7c:	83 1b       	sub	r24, r19
    3b7e:	48 8d       	ldd	r20, Y+24	; 0x18
    3b80:	59 8d       	ldd	r21, Y+25	; 0x19
    3b82:	48 0f       	add	r20, r24
    3b84:	51 1d       	adc	r21, r1
    3b86:	59 8f       	std	Y+25, r21	; 0x19
    3b88:	48 8f       	std	Y+24, r20	; 0x18
		Refresh_TCNT2 = TCNT2;
    3b8a:	20 91 b2 00 	lds	r18, 0x00B2
    3b8e:	29 a3       	std	Y+33, r18	; 0x21

		// Auto-disarm timer
		Disarm_timer += (uint8_t)(TCNT2 - Disarm_TCNT2);
    3b90:	80 91 b2 00 	lds	r24, 0x00B2
    3b94:	3a a1       	ldd	r19, Y+34	; 0x22
    3b96:	83 1b       	sub	r24, r19
    3b98:	4f 81       	ldd	r20, Y+7	; 0x07
    3b9a:	58 85       	ldd	r21, Y+8	; 0x08
    3b9c:	48 0f       	add	r20, r24
    3b9e:	51 1d       	adc	r21, r1
    3ba0:	58 87       	std	Y+8, r21	; 0x08
    3ba2:	4f 83       	std	Y+7, r20	; 0x07
		Disarm_TCNT2 = TCNT2;
    3ba4:	20 91 b2 00 	lds	r18, 0x00B2
    3ba8:	2a a3       	std	Y+34, r18	; 0x22

		// Timer for audible alarms
		Ticker_Count += (uint8_t)(TCNT2 - Ticker_TCNT2);
    3baa:	80 91 b2 00 	lds	r24, 0x00B2
    3bae:	3c a1       	ldd	r19, Y+36	; 0x24
    3bb0:	83 1b       	sub	r24, r19
    3bb2:	4c 8d       	ldd	r20, Y+28	; 0x1c
    3bb4:	5d 8d       	ldd	r21, Y+29	; 0x1d
    3bb6:	48 0f       	add	r20, r24
    3bb8:	51 1d       	adc	r21, r1
    3bba:	5d 8f       	std	Y+29, r21	; 0x1d
    3bbc:	4c 8f       	std	Y+28, r20	; 0x1c
		Ticker_TCNT2 = TCNT2;
    3bbe:	20 91 b2 00 	lds	r18, 0x00B2
    3bc2:	2c a3       	std	Y+36, r18	; 0x24
		//* ((Ticker_Count >> 8) &8) 	= 4.77Hz (Disarm and LVA alarms)
		//************************************************************

		if ((Ticker_Count >> 8) &8) 
		{
			Alarm_flags |= (1 << BUZZER_ON);	// 4.77Hz beep
    3bc4:	80 91 1c 05 	lds	r24, 0x051C
		//* System ticker - based on TCNT2 (19.531kHz)
		//* 
		//* ((Ticker_Count >> 8) &8) 	= 4.77Hz (Disarm and LVA alarms)
		//************************************************************

		if ((Ticker_Count >> 8) &8) 
    3bc8:	53 ff       	sbrs	r21, 3
    3bca:	02 c0       	rjmp	.+4      	; 0x3bd0 <main+0x7aa>
		{
			Alarm_flags |= (1 << BUZZER_ON);	// 4.77Hz beep
    3bcc:	80 61       	ori	r24, 0x10	; 16
    3bce:	01 c0       	rjmp	.+2      	; 0x3bd2 <main+0x7ac>
		}
		else 
		{
			Alarm_flags &= ~(1 << BUZZER_ON);
    3bd0:	8f 7e       	andi	r24, 0xEF	; 239
    3bd2:	80 93 1c 05 	sts	0x051C, r24
		//* Manage desired output update rate when limited by
		//* the PWM rate set to "Low"
		//************************************************************

		// Flag update required based on the variable Servo_Match
		if (Servo_Rate > SERVO_RATE_LOW)
    3bd6:	4f 85       	ldd	r20, Y+15	; 0x0f
    3bd8:	58 89       	ldd	r21, Y+16	; 0x10
    3bda:	4d 32       	cpi	r20, 0x2D	; 45
    3bdc:	51 40       	sbci	r21, 0x01	; 1
    3bde:	20 f0       	brcs	.+8      	; 0x3be8 <main+0x7c2>
		{
			ServoTick = true;	// Slow device is ready for output generation
			Servo_Rate = 0;
    3be0:	18 8a       	std	Y+16, r1	; 0x10
    3be2:	1f 86       	std	Y+15, r1	; 0x0f
		//************************************************************

		// Flag update required based on the variable Servo_Match
		if (Servo_Rate > SERVO_RATE_LOW)
		{
			ServoTick = true;	// Slow device is ready for output generation
    3be4:	21 e0       	ldi	r18, 0x01	; 1
    3be6:	2a 87       	std	Y+10, r18	; 0x0a
		//************************************************************
		//* Measure incoming RC rate and flag no signal
		//************************************************************

		// Check to see if the RC input is overdue (500ms)
		if (RC_Timeout > RC_OVERDUE)
    3be8:	4a a5       	ldd	r20, Y+42	; 0x2a
    3bea:	5b a5       	ldd	r21, Y+43	; 0x2b
    3bec:	46 32       	cpi	r20, 0x26	; 38
    3bee:	56 42       	sbci	r21, 0x26	; 38
    3bf0:	18 f0       	brcs	.+6      	; 0x3bf8 <main+0x7d2>
		{
			Overdue = true;	// This results in a "No Signal" error
    3bf2:	81 e0       	ldi	r24, 0x01	; 1
    3bf4:	80 93 17 05 	sts	0x0517, r24
	
		//************************************************************
		//* Read sensors
		//************************************************************

		ReadGyros();
    3bf8:	0e 94 06 23 	call	0x460c	; 0x460c <ReadGyros>
		ReadAcc();
    3bfc:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <ReadAcc>
		// These two are concatenated to create a virtual timer that can measure up to 
		// 256 x 26.2ms = 6.7072s at which point the "period" is 16,768,000, a 24-bit number
		//************************************************************
		
		// Safely get current value of TCNT1
		Save_TCNT1 = TIM16_ReadTCNT1();
    3c00:	0e 94 e4 2b 	call	0x57c8	; 0x57c8 <TIM16_ReadTCNT1>
    3c04:	9c 01       	movw	r18, r24
		
		// Reset Timer0 count
		TCNT0 = 0;
    3c06:	16 bc       	out	0x26, r1	; 38

		// Handle TCNT1 overflow correctly - this actually seems necessary...
		// ticker_16 will hold the most recent amount measured by TCNT1
		// Timer1 (16bit) - run @ 2.5MHz (400ns) - max 26.2ms
		if (Save_TCNT1 < LoopStartTCNT1)
    3c08:	80 91 18 05 	lds	r24, 0x0518
    3c0c:	90 91 19 05 	lds	r25, 0x0519
    3c10:	28 17       	cp	r18, r24
    3c12:	39 07       	cpc	r19, r25
    3c14:	48 f4       	brcc	.+18     	; 0x3c28 <main+0x802>
		{
			ticker_16 = (65536 - LoopStartTCNT1) + Save_TCNT1;
    3c16:	80 91 18 05 	lds	r24, 0x0518
    3c1a:	90 91 19 05 	lds	r25, 0x0519
    3c1e:	d9 01       	movw	r26, r18
    3c20:	a8 1b       	sub	r26, r24
    3c22:	b9 0b       	sbc	r27, r25
    3c24:	cd 01       	movw	r24, r26
    3c26:	08 c0       	rjmp	.+16     	; 0x3c38 <main+0x812>
		}
		else
		{
			ticker_16 = (Save_TCNT1 - LoopStartTCNT1);
    3c28:	80 91 18 05 	lds	r24, 0x0518
    3c2c:	90 91 19 05 	lds	r25, 0x0519
    3c30:	f9 01       	movw	r30, r18
    3c32:	e8 1b       	sub	r30, r24
    3c34:	f9 0b       	sbc	r31, r25
    3c36:	cf 01       	movw	r24, r30
		}
		
		// Store old TCNT for next measurement
		LoopStartTCNT1 = Save_TCNT1;
    3c38:	30 93 19 05 	sts	0x0519, r19
    3c3c:	20 93 18 05 	sts	0x0518, r18
		
		// Handle both Timer1 under- and over-run cases
		// If TMR0_counter is less than 2, ICNT1 has not overflowed
		if (TMR0_counter < 2)
    3c40:	20 91 c5 07 	lds	r18, 0x07C5
    3c44:	30 91 c6 07 	lds	r19, 0x07C6
    3c48:	a0 e0       	ldi	r26, 0x00	; 0
    3c4a:	b0 e0       	ldi	r27, 0x00	; 0
    3c4c:	22 30       	cpi	r18, 0x02	; 2
    3c4e:	31 05       	cpc	r19, r1
    3c50:	18 f4       	brcc	.+6      	; 0x3c58 <main+0x832>
		{
			interval = ticker_16; // uint16_t
    3c52:	4c 01       	movw	r8, r24
    3c54:	5d 01       	movw	r10, r26
    3c56:	11 c0       	rjmp	.+34     	; 0x3c7a <main+0x854>
		// So we use chunks of TCNT0, counted during the loop interval
		// to work out the exact period.
		// Timer0 (8bit) - run @ 20MHz / 1024 = 19.531kHz or 51.2us - max 13.1ms
		else
		{
			interval = ticker_16 + (TMR0_counter * 32768);
    3c58:	80 90 c5 07 	lds	r8, 0x07C5
    3c5c:	90 90 c6 07 	lds	r9, 0x07C6
    3c60:	a1 2c       	mov	r10, r1
    3c62:	b1 2c       	mov	r11, r1
    3c64:	3f e0       	ldi	r19, 0x0F	; 15
    3c66:	88 0c       	add	r8, r8
    3c68:	99 1c       	adc	r9, r9
    3c6a:	aa 1c       	adc	r10, r10
    3c6c:	bb 1c       	adc	r11, r11
    3c6e:	3a 95       	dec	r19
    3c70:	d1 f7       	brne	.-12     	; 0x3c66 <main+0x840>
    3c72:	88 0e       	add	r8, r24
    3c74:	99 1e       	adc	r9, r25
    3c76:	aa 1e       	adc	r10, r26
    3c78:	bb 1e       	adc	r11, r27
		}

		TMR0_counter = 0;
    3c7a:	10 92 c6 07 	sts	0x07C6, r1
    3c7e:	10 92 c5 07 	sts	0x07C5, r1
	
		//************************************************************
		//* Update attitude, average acc values each loop
		//************************************************************
				
		imu_update(interval);
    3c82:	c5 01       	movw	r24, r10
    3c84:	b4 01       	movw	r22, r8
    3c86:	0e 94 f6 26 	call	0x4dec	; 0x4dec <imu_update>

		//************************************************************
		//* Update I-terms, average gyro values each loop
		//************************************************************

		Sensor_PID();
    3c8a:	0e 94 d3 3e 	call	0x7da6	; 0x7da6 <Sensor_PID>
		//* PWM_interval = Copied from Interval, is the current loop rate.
		//* 
		//* 
		//************************************************************

		if (Interrupted)
    3c8e:	80 91 c2 07 	lds	r24, 0x07C2
    3c92:	88 23       	and	r24, r24
    3c94:	09 f4       	brne	.+2      	; 0x3c98 <main+0x872>
    3c96:	c6 c0       	rjmp	.+396    	; 0x3e24 <main+0x9fe>
		{
			// Measure incoming RC rate. Threshold is SLOW_RC_RATE.
			// Use RC_Rate_Timer is not in FAST mode.
			if (Config.Servo_rate < FAST)
    3c98:	80 91 d3 05 	lds	r24, 0x05D3
    3c9c:	82 30       	cpi	r24, 0x02	; 2
    3c9e:	64 f4       	brge	.+24     	; 0x3cb8 <main+0x892>
			{
				if (RC_Rate_Timer > SLOW_RC_RATE)
    3ca0:	21 e0       	ldi	r18, 0x01	; 1
    3ca2:	29 87       	std	Y+9, r18	; 0x09
    3ca4:	2b 81       	ldd	r18, Y+3	; 0x03
    3ca6:	3c 81       	ldd	r19, Y+4	; 0x04
    3ca8:	4d 81       	ldd	r20, Y+5	; 0x05
    3caa:	5e 81       	ldd	r21, Y+6	; 0x06
    3cac:	24 3c       	cpi	r18, 0xC4	; 196
    3cae:	32 4a       	sbci	r19, 0xA2	; 162
    3cb0:	41 05       	cpc	r20, r1
    3cb2:	51 05       	cpc	r21, r1
    3cb4:	08 f4       	brcc	.+2      	; 0x3cb8 <main+0x892>
    3cb6:	19 86       	std	Y+9, r1	; 0x09
					SlowRC = false;
				}
			}
			
			// Use Framerate in FAST mode, but only when NOT skipping frames
			if ((!RCrateMeasured) && (Config.Servo_rate == FAST))
    3cb8:	2a 81       	ldd	r18, Y+2	; 0x02
    3cba:	21 11       	cpse	r18, r1
    3cbc:	0e c0       	rjmp	.+28     	; 0x3cda <main+0x8b4>
    3cbe:	82 30       	cpi	r24, 0x02	; 2
    3cc0:	09 f0       	breq	.+2      	; 0x3cc4 <main+0x89e>
    3cc2:	62 c1       	rjmp	.+708    	; 0x3f88 <main+0xb62>
			{
				// In high-speed mode, the RC rate will be unfairly marked as "slow" once measured and interrupt blocking starts.
				// To stop this being a problem, only set SlowRC prior to RCrateMeasured becoming true in this mode
				if (FrameRate > SLOW_RC_RATE)
    3cc4:	80 91 e0 07 	lds	r24, 0x07E0
    3cc8:	90 91 e1 07 	lds	r25, 0x07E1
    3ccc:	31 e0       	ldi	r19, 0x01	; 1
    3cce:	39 87       	std	Y+9, r19	; 0x09
    3cd0:	84 3c       	cpi	r24, 0xC4	; 196
    3cd2:	92 4a       	sbci	r25, 0xA2	; 162
    3cd4:	40 f4       	brcc	.+16     	; 0x3ce6 <main+0x8c0>
    3cd6:	19 86       	std	Y+9, r1	; 0x09
    3cd8:	3b c0       	rjmp	.+118    	; 0x3d50 <main+0x92a>
			//* Work out the high speed mode RC blocking period when requested. 
			//* Only relevant for high speed mode. The slower the PWM rate the fewer
			//* PWM pulses will fit in the S.Bus gap.
			//***********************************************************************

			if (RCrateMeasured && (Config.Servo_rate == FAST))
    3cda:	82 30       	cpi	r24, 0x02	; 2
    3cdc:	09 f0       	breq	.+2      	; 0x3ce0 <main+0x8ba>
    3cde:	54 c1       	rjmp	.+680    	; 0x3f88 <main+0xb62>
			{
				// Set minimal pulses doable (39.2 - n * cycletime)
				if (SlowRC)
    3ce0:	29 85       	ldd	r18, Y+9	; 0x09
    3ce2:	22 23       	and	r18, r18
    3ce4:	a9 f1       	breq	.+106    	; 0x3d50 <main+0x92a>
				{
					PWM_pulses = 4;				// Four pulses will fit if interval faster than 102Hz
				
					if (PWM_interval < 19600)	// 19600 = 7.84ms
    3ce6:	30 e9       	ldi	r19, 0x90	; 144
    3ce8:	c3 16       	cp	r12, r19
    3cea:	3c e4       	ldi	r19, 0x4C	; 76
    3cec:	d3 06       	cpc	r13, r19
    3cee:	e1 04       	cpc	r14, r1
    3cf0:	f1 04       	cpc	r15, r1
    3cf2:	08 f0       	brcs	.+2      	; 0x3cf6 <main+0x8d0>
    3cf4:	4d c1       	rjmp	.+666    	; 0x3f90 <main+0xb6a>
					{
						PWM_pulses += 1;		// Five pulses will fit if interval faster than 127Hz
					}
				
					if (PWM_interval < 16333)	// 16333 = 6.53ms
    3cf6:	4d ec       	ldi	r20, 0xCD	; 205
    3cf8:	c4 16       	cp	r12, r20
    3cfa:	4f e3       	ldi	r20, 0x3F	; 63
    3cfc:	d4 06       	cpc	r13, r20
    3cfe:	e1 04       	cpc	r14, r1
    3d00:	f1 04       	cpc	r15, r1
    3d02:	08 f0       	brcs	.+2      	; 0x3d06 <main+0x8e0>
    3d04:	49 c1       	rjmp	.+658    	; 0x3f98 <main+0xb72>
					{
						PWM_pulses += 1;		// Six pulses will fit if interval faster than 153Hz
					}
				
					if (PWM_interval < 14000)	// 14000 = 5.6ms
    3d06:	50 eb       	ldi	r21, 0xB0	; 176
    3d08:	c5 16       	cp	r12, r21
    3d0a:	56 e3       	ldi	r21, 0x36	; 54
    3d0c:	d5 06       	cpc	r13, r21
    3d0e:	e1 04       	cpc	r14, r1
    3d10:	f1 04       	cpc	r15, r1
    3d12:	08 f0       	brcs	.+2      	; 0x3d16 <main+0x8f0>
    3d14:	45 c1       	rjmp	.+650    	; 0x3fa0 <main+0xb7a>
					{
						PWM_pulses += 1;		// Seven pulses will fit if interval faster than 179Hz
					}
				
					if (PWM_interval < 12250)	// 12250 = 4.9ms
    3d16:	8a ed       	ldi	r24, 0xDA	; 218
    3d18:	c8 16       	cp	r12, r24
    3d1a:	8f e2       	ldi	r24, 0x2F	; 47
    3d1c:	d8 06       	cpc	r13, r24
    3d1e:	e1 04       	cpc	r14, r1
    3d20:	f1 04       	cpc	r15, r1
    3d22:	08 f0       	brcs	.+2      	; 0x3d26 <main+0x900>
    3d24:	41 c1       	rjmp	.+642    	; 0x3fa8 <main+0xb82>
					{
						PWM_pulses += 1;		// Eight pulses will fit if interval faster than 204Hz
					}
				
					if (PWM_interval < 10888)	// 10888 = 4.35ms
    3d26:	98 e8       	ldi	r25, 0x88	; 136
    3d28:	c9 16       	cp	r12, r25
    3d2a:	9a e2       	ldi	r25, 0x2A	; 42
    3d2c:	d9 06       	cpc	r13, r25
    3d2e:	e1 04       	cpc	r14, r1
    3d30:	f1 04       	cpc	r15, r1
    3d32:	08 f0       	brcs	.+2      	; 0x3d36 <main+0x910>
    3d34:	3d c1       	rjmp	.+634    	; 0x3fb0 <main+0xb8a>
					{
						PWM_pulses += 1;		// Nine pulses will fit if interval faster than 230Hz
					}
				
					if (PWM_interval < 9800)	// 9800 = 3.92ms
    3d36:	a8 e4       	ldi	r26, 0x48	; 72
    3d38:	ca 16       	cp	r12, r26
    3d3a:	a6 e2       	ldi	r26, 0x26	; 38
    3d3c:	da 06       	cpc	r13, r26
    3d3e:	e1 04       	cpc	r14, r1
    3d40:	f1 04       	cpc	r15, r1
    3d42:	98 f5       	brcc	.+102    	; 0x3daa <main+0x984>
    3d44:	21 e0       	ldi	r18, 0x01	; 1
    3d46:	2a 83       	std	Y+2, r18	; 0x02
					{
						PWM_pulses += 1;		// Ten pulses will fit if interval faster than 255Hz
    3d48:	2a e0       	ldi	r18, 0x0A	; 10
    3d4a:	62 2e       	mov	r6, r18
    3d4c:	71 2c       	mov	r7, r1
    3d4e:	38 c0       	rjmp	.+112    	; 0x3dc0 <main+0x99a>
				}
				else
				{
					PWM_pulses = 3;				// Three pulses will fit if interval faster than 101Hz
				
					if (PWM_interval < 18437)	// 18437 = 7.37ms
    3d50:	35 e0       	ldi	r19, 0x05	; 5
    3d52:	c3 16       	cp	r12, r19
    3d54:	38 e4       	ldi	r19, 0x48	; 72
    3d56:	d3 06       	cpc	r13, r19
    3d58:	e1 04       	cpc	r14, r1
    3d5a:	f1 04       	cpc	r15, r1
    3d5c:	08 f0       	brcs	.+2      	; 0x3d60 <main+0x93a>
    3d5e:	2e c1       	rjmp	.+604    	; 0x3fbc <main+0xb96>
					{
						PWM_pulses += 1;		// Four pulses will fit if interval faster than 135Hz
					}
				
					if (PWM_interval < 14750)	// 14750 = 5.9ms
    3d60:	4e e9       	ldi	r20, 0x9E	; 158
    3d62:	c4 16       	cp	r12, r20
    3d64:	49 e3       	ldi	r20, 0x39	; 57
    3d66:	d4 06       	cpc	r13, r20
    3d68:	e1 04       	cpc	r14, r1
    3d6a:	f1 04       	cpc	r15, r1
    3d6c:	08 f0       	brcs	.+2      	; 0x3d70 <main+0x94a>
    3d6e:	2a c1       	rjmp	.+596    	; 0x3fc4 <main+0xb9e>
					{
						PWM_pulses += 1;		// Five pulses will fit if interval faster than 169Hz
					}
				
					if (PWM_interval < 11886)	// 11886 = 4.75ms
    3d70:	5e e6       	ldi	r21, 0x6E	; 110
    3d72:	c5 16       	cp	r12, r21
    3d74:	5e e2       	ldi	r21, 0x2E	; 46
    3d76:	d5 06       	cpc	r13, r21
    3d78:	e1 04       	cpc	r14, r1
    3d7a:	f1 04       	cpc	r15, r1
    3d7c:	08 f0       	brcs	.+2      	; 0x3d80 <main+0x95a>
    3d7e:	26 c1       	rjmp	.+588    	; 0x3fcc <main+0xba6>
					{
						PWM_pulses += 1;		// Six pulses will fit if interval faster than 210Hz
					}
				
					if (PWM_interval < 10142)	// 10142 = 4.05ms
    3d80:	8e e9       	ldi	r24, 0x9E	; 158
    3d82:	c8 16       	cp	r12, r24
    3d84:	87 e2       	ldi	r24, 0x27	; 39
    3d86:	d8 06       	cpc	r13, r24
    3d88:	e1 04       	cpc	r14, r1
    3d8a:	f1 04       	cpc	r15, r1
    3d8c:	08 f0       	brcs	.+2      	; 0x3d90 <main+0x96a>
    3d8e:	22 c1       	rjmp	.+580    	; 0x3fd4 <main+0xbae>
					{
						PWM_pulses += 1;		// Five pulses will fit if interval faster than 246Hz
					}
				
					if (PWM_interval < 8859)	// 8859 = 3.5ms
    3d90:	9b e9       	ldi	r25, 0x9B	; 155
    3d92:	c9 16       	cp	r12, r25
    3d94:	92 e2       	ldi	r25, 0x22	; 34
    3d96:	d9 06       	cpc	r13, r25
    3d98:	e1 04       	cpc	r14, r1
    3d9a:	f1 04       	cpc	r15, r1
    3d9c:	60 f4       	brcc	.+24     	; 0x3db6 <main+0x990>
    3d9e:	21 e0       	ldi	r18, 0x01	; 1
    3da0:	2a 83       	std	Y+2, r18	; 0x02
					{
						PWM_pulses += 1;		// Six pulses will fit if interval faster than 282Hz
    3da2:	98 e0       	ldi	r25, 0x08	; 8
    3da4:	69 2e       	mov	r6, r25
    3da6:	71 2c       	mov	r7, r1
    3da8:	0b c0       	rjmp	.+22     	; 0x3dc0 <main+0x99a>
    3daa:	31 e0       	ldi	r19, 0x01	; 1
    3dac:	3a 83       	std	Y+2, r19	; 0x02
						PWM_pulses += 1;		// Eight pulses will fit if interval faster than 204Hz
					}
				
					if (PWM_interval < 10888)	// 10888 = 4.35ms
					{
						PWM_pulses += 1;		// Nine pulses will fit if interval faster than 230Hz
    3dae:	89 e0       	ldi	r24, 0x09	; 9
    3db0:	68 2e       	mov	r6, r24
    3db2:	71 2c       	mov	r7, r1
    3db4:	05 c0       	rjmp	.+10     	; 0x3dc0 <main+0x99a>
    3db6:	41 e0       	ldi	r20, 0x01	; 1
    3db8:	4a 83       	std	Y+2, r20	; 0x02
						PWM_pulses += 1;		// Six pulses will fit if interval faster than 210Hz
					}
				
					if (PWM_interval < 10142)	// 10142 = 4.05ms
					{
						PWM_pulses += 1;		// Five pulses will fit if interval faster than 246Hz
    3dba:	b7 e0       	ldi	r27, 0x07	; 7
    3dbc:	6b 2e       	mov	r6, r27
    3dbe:	71 2c       	mov	r7, r1

			// Reset RC timeout now that Interrupt has been received.
			RC_Timeout = 0;

			// No longer overdue. This will cancel the "No signal" alarm
			Overdue = false;
    3dc0:	10 92 17 05 	sts	0x0517, r1
			
			// Reset rate timer once data received. Reset to current time.
			RC_Rate_Timer = 0;
			Save_TCNT1 = TIM16_ReadTCNT1();
    3dc4:	0e 94 e4 2b 	call	0x57c8	; 0x57c8 <TIM16_ReadTCNT1>
    3dc8:	9c 8b       	std	Y+20, r25	; 0x14
    3dca:	8b 8b       	std	Y+19, r24	; 0x13
			//* output when S.Bus is used.
			//************************************************************

			// Block RC interrupts if period has been calculated
			// and PWM mode is FAST.
			if ((Config.Servo_rate == FAST) && RCrateMeasured)
    3dcc:	80 91 d3 05 	lds	r24, 0x05D3
    3dd0:	82 30       	cpi	r24, 0x02	; 2
    3dd2:	b9 f4       	brne	.+46     	; 0x3e02 <main+0x9dc>
    3dd4:	2a 81       	ldd	r18, Y+2	; 0x02
    3dd6:	22 23       	and	r18, r18
    3dd8:	a1 f0       	breq	.+40     	; 0x3e02 <main+0x9dc>
			{
				// If it's time to resample the RC rate, do it now
				// so as not to disturb PWM generation.
				// This will result in a double gap with just one PWM.
				if (ResampleRCRate)
    3dda:	3b 8d       	ldd	r19, Y+27	; 0x1b
    3ddc:	31 11       	cpse	r19, r1
    3dde:	18 c0       	rjmp	.+48     	; 0x3e10 <main+0x9ea>
				// If not, block the RC interrupts until we run out of pulses
				// We need to cancel the Interrupted flag but have to make a copy until 
				// the status screen state machine has seen it.
				else
				{
					if (Interrupted)
    3de0:	80 91 c2 07 	lds	r24, 0x07C2
    3de4:	81 11       	cpse	r24, r1
					{
						Interrupted_Clone = true;	// Hand "Interrupted" baton on to its clone
    3de6:	01 e0       	ldi	r16, 0x01	; 1
					}
					Interrupted = false;		// Cancel pending interrupts
    3de8:	10 92 c2 07 	sts	0x07C2, r1
					Disable_RC_Interrupts();	// Disable RC interrupts
    3dec:	0e 94 16 2e 	call	0x5c2c	; 0x5c2c <Disable_RC_Interrupts>
			{
				PWM_pulses = 1;
			}

			// Reset RC timeout now that Interrupt has been received.
			RC_Timeout = 0;
    3df0:	1b a6       	std	Y+43, r1	; 0x2b
    3df2:	1a a6       	std	Y+42, r1	; 0x2a

			// No longer overdue. This will cancel the "No signal" alarm
			Overdue = false;
			
			// Reset rate timer once data received. Reset to current time.
			RC_Rate_Timer = 0;
    3df4:	1b 82       	std	Y+3, r1	; 0x03
    3df6:	1c 82       	std	Y+4, r1	; 0x04
    3df8:	1d 82       	std	Y+5, r1	; 0x05
    3dfa:	1e 82       	std	Y+6, r1	; 0x06
					{
						Interrupted_Clone = true;	// Hand "Interrupted" baton on to its clone
					}
					Interrupted = false;		// Cancel pending interrupts
					Disable_RC_Interrupts();	// Disable RC interrupts
					RCInterruptsON = false;		// Flag it for the rest of the code
    3dfc:	1a 8e       	std	Y+26, r1	; 0x1a
					PWMBlocked = false;			// Enable PWM generation	
    3dfe:	1c 86       	std	Y+12, r1	; 0x0c
    3e00:	11 c0       	rjmp	.+34     	; 0x3e24 <main+0x9fe>
			{
				PWM_pulses = 1;
			}

			// Reset RC timeout now that Interrupt has been received.
			RC_Timeout = 0;
    3e02:	1b a6       	std	Y+43, r1	; 0x2b
    3e04:	1a a6       	std	Y+42, r1	; 0x2a

			// No longer overdue. This will cancel the "No signal" alarm
			Overdue = false;
			
			// Reset rate timer once data received. Reset to current time.
			RC_Rate_Timer = 0;
    3e06:	1b 82       	std	Y+3, r1	; 0x03
    3e08:	1c 82       	std	Y+4, r1	; 0x04
    3e0a:	1d 82       	std	Y+5, r1	; 0x05
    3e0c:	1e 82       	std	Y+6, r1	; 0x06
    3e0e:	0a c0       	rjmp	.+20     	; 0x3e24 <main+0x9fe>
			{
				PWM_pulses = 1;
			}

			// Reset RC timeout now that Interrupt has been received.
			RC_Timeout = 0;
    3e10:	1b a6       	std	Y+43, r1	; 0x2b
    3e12:	1a a6       	std	Y+42, r1	; 0x2a

			// No longer overdue. This will cancel the "No signal" alarm
			Overdue = false;
			
			// Reset rate timer once data received. Reset to current time.
			RC_Rate_Timer = 0;
    3e14:	1b 82       	std	Y+3, r1	; 0x03
    3e16:	1c 82       	std	Y+4, r1	; 0x04
    3e18:	1d 82       	std	Y+5, r1	; 0x05
    3e1a:	1e 82       	std	Y+6, r1	; 0x06
				// This will result in a double gap with just one PWM.
				if (ResampleRCRate)
				{
					RCrateMeasured = false;		// Force remeasure of RC rate
					PWMBlocked = true;			// Disable Fast-mode PWM generation		
					ResampleRCRate = false;		// Reset resample request
    3e1c:	1b 8e       	std	Y+27, r1	; 0x1b
				// so as not to disturb PWM generation.
				// This will result in a double gap with just one PWM.
				if (ResampleRCRate)
				{
					RCrateMeasured = false;		// Force remeasure of RC rate
					PWMBlocked = true;			// Disable Fast-mode PWM generation		
    3e1e:	41 e0       	ldi	r20, 0x01	; 1
    3e20:	4c 87       	std	Y+12, r20	; 0x0c
				// If it's time to resample the RC rate, do it now
				// so as not to disturb PWM generation.
				// This will result in a double gap with just one PWM.
				if (ResampleRCRate)
				{
					RCrateMeasured = false;		// Force remeasure of RC rate
    3e22:	1a 82       	std	Y+2, r1	; 0x02
		//* based on a very specific set of conditions
		//************************************************************

		// Cases where we are ready to output
		if	(
				(Interrupted) ||											// Run at RC rate
    3e24:	80 91 c2 07 	lds	r24, 0x07C2
		//* Output PWM to ESCs/Servos where required, 
		//* based on a very specific set of conditions
		//************************************************************

		// Cases where we are ready to output
		if	(
    3e28:	81 11       	cpse	r24, r1
    3e2a:	08 c0       	rjmp	.+16     	; 0x3e3c <main+0xa16>
				(Interrupted) ||											// Run at RC rate
    3e2c:	80 91 d3 05 	lds	r24, 0x05D3
    3e30:	82 30       	cpi	r24, 0x02	; 2
    3e32:	09 f0       	breq	.+2      	; 0x3e36 <main+0xa10>
    3e34:	81 c0       	rjmp	.+258    	; 0x3f38 <main+0xb12>
				((Config.Servo_rate == FAST) && (!PWMBlocked))				// Run at full loop rate if allowed
    3e36:	2c 85       	ldd	r18, Y+12	; 0x0c
    3e38:	21 11       	cpse	r18, r1
    3e3a:	7e c0       	rjmp	.+252    	; 0x3f38 <main+0xb12>
			//* The execution rates are:
			//* The RC rate unless in FAST mode
			//* High speed in FAST mode
			//******************************************************************

			if (Interrupted)
    3e3c:	80 91 c2 07 	lds	r24, 0x07C2
    3e40:	88 23       	and	r24, r24
    3e42:	19 f0       	breq	.+6      	; 0x3e4a <main+0xa24>
			{
				Interrupted_Clone = true;	// Hand "Interrupted" baton on to its clone
				Interrupted = false;		// Reset interrupted flag if that was the cause of entry			
    3e44:	10 92 c2 07 	sts	0x07C2, r1
			//* High speed in FAST mode
			//******************************************************************

			if (Interrupted)
			{
				Interrupted_Clone = true;	// Hand "Interrupted" baton on to its clone
    3e48:	01 e0       	ldi	r16, 0x01	; 1
			// For each output, mark the ones that are to fire this time
			for (i = 0; i < MAX_OUTPUTS; i++)
			{
				// Mark bits depending on the selected output type
				if	(
						((Config.Servo_rate == FAST) && (Config.Channel[i].Motor_marker == ASERVO) && ServoTick) ||					// At ServoTick for A.Servo in FAST mode
    3e4a:	90 91 d3 05 	lds	r25, 0x05D3
    3e4e:	ef e3       	ldi	r30, 0x3F	; 63
    3e50:	f6 e0       	ldi	r31, 0x06	; 6
    3e52:	20 e0       	ldi	r18, 0x00	; 0
    3e54:	30 e0       	ldi	r19, 0x00	; 0
			}

			// Decide which outputs fire this time, depending on their device setting (A.Servo, D.Servo, Motor)
			// D.Servo, Motor are always ready, but A.Servo must be limited to Servo_rate, flagged by ServoTick

			ServoFlag = 0;
    3e56:	80 e0       	ldi	r24, 0x00	; 0
				
			// For each output, mark the ones that are to fire this time
			for (i = 0; i < MAX_OUTPUTS; i++)
			{
				// Mark bits depending on the selected output type
				if	(
    3e58:	92 30       	cpi	r25, 0x02	; 2
    3e5a:	29 f4       	brne	.+10     	; 0x3e66 <main+0xa40>
						((Config.Servo_rate == FAST) && (Config.Channel[i].Motor_marker == ASERVO) && ServoTick) ||					// At ServoTick for A.Servo in FAST mode
    3e5c:	40 81       	ld	r20, Z
    3e5e:	44 23       	and	r20, r20
    3e60:	09 f4       	brne	.+2      	; 0x3e64 <main+0xa3e>
    3e62:	be c0       	rjmp	.+380    	; 0x3fe0 <main+0xbba>
    3e64:	0b c0       	rjmp	.+22     	; 0x3e7c <main+0xa56>
    3e66:	91 30       	cpi	r25, 0x01	; 1
    3e68:	39 f4       	brne	.+14     	; 0x3e78 <main+0xa52>
						((Config.Servo_rate == SYNC) && (Config.Channel[i].Motor_marker == ASERVO) && (!SlowRC) && ServoTick) ||	// At ServoTick for A.Servo in SYNC with Fast RC
    3e6a:	40 81       	ld	r20, Z
    3e6c:	41 11       	cpse	r20, r1
    3e6e:	06 c0       	rjmp	.+12     	; 0x3e7c <main+0xa56>
    3e70:	49 85       	ldd	r20, Y+9	; 0x09
    3e72:	41 11       	cpse	r20, r1
    3e74:	0f c0       	rjmp	.+30     	; 0x3e94 <main+0xa6e>
    3e76:	b4 c0       	rjmp	.+360    	; 0x3fe0 <main+0xbba>
						((Config.Servo_rate == SYNC) && (Config.Channel[i].Motor_marker == ASERVO) && (SlowRC)) ||					// At RC rate for A.Servo with slow RC
    3e78:	19 16       	cp	r1, r25
    3e7a:	24 f4       	brge	.+8      	; 0x3e84 <main+0xa5e>
						((Config.Servo_rate >= SYNC) && (Config.Channel[i].Motor_marker > ASERVO)) ||								// Always for D.Servo and Motor in SYNC or FAST modes
    3e7c:	40 81       	ld	r20, Z
    3e7e:	14 16       	cp	r1, r20
    3e80:	4c f0       	brlt	.+18     	; 0x3e94 <main+0xa6e>
    3e82:	10 c0       	rjmp	.+32     	; 0x3ea4 <main+0xa7e>
    3e84:	91 11       	cpse	r25, r1
    3e86:	0e c0       	rjmp	.+28     	; 0x3ea4 <main+0xa7e>
						((Config.Servo_rate == LOW) && (!SlowRC) && ServoTick) ||													// All outputs at ServoTick in LOW mode with fast RC
    3e88:	49 85       	ldd	r20, Y+9	; 0x09
    3e8a:	41 11       	cpse	r20, r1
    3e8c:	03 c0       	rjmp	.+6      	; 0x3e94 <main+0xa6e>
    3e8e:	4a 85       	ldd	r20, Y+10	; 0x0a
    3e90:	44 23       	and	r20, r20
    3e92:	41 f0       	breq	.+16     	; 0x3ea4 <main+0xa7e>
						((Config.Servo_rate == LOW) && (SlowRC))																	// All outputs at  RC rate in LOW mode with slow RC
					)
				{
					ServoFlag |= (1 << i);
    3e94:	41 e0       	ldi	r20, 0x01	; 1
    3e96:	50 e0       	ldi	r21, 0x00	; 0
    3e98:	02 2e       	mov	r0, r18
    3e9a:	01 c0       	rjmp	.+2      	; 0x3e9e <main+0xa78>
    3e9c:	44 0f       	add	r20, r20
    3e9e:	0a 94       	dec	r0
    3ea0:	ea f7       	brpl	.-6      	; 0x3e9c <main+0xa76>
    3ea2:	84 2b       	or	r24, r20
    3ea4:	2f 5f       	subi	r18, 0xFF	; 255
    3ea6:	3f 4f       	sbci	r19, 0xFF	; 255
    3ea8:	b6 96       	adiw	r30, 0x26	; 38
			// D.Servo, Motor are always ready, but A.Servo must be limited to Servo_rate, flagged by ServoTick

			ServoFlag = 0;
				
			// For each output, mark the ones that are to fire this time
			for (i = 0; i < MAX_OUTPUTS; i++)
    3eaa:	28 30       	cpi	r18, 0x08	; 8
    3eac:	31 05       	cpc	r19, r1
    3eae:	a1 f6       	brne	.-88     	; 0x3e58 <main+0xa32>
					ServoFlag |= (1 << i);
				}
			}
								
			// Reset slow PWM flag if it was just set. It will automatically set again at around 19531/SERVO_RATE_LOW (Hz)
			if (ServoTick)
    3eb0:	2a 85       	ldd	r18, Y+10	; 0x0a
    3eb2:	22 23       	and	r18, r18
    3eb4:	11 f0       	breq	.+4      	; 0x3eba <main+0xa94>
			{
				ServoTick = false;
				
				// Reset the Servo rate counter here so that it doesn't force an unusually small gap next time
				Servo_Rate = 0;
    3eb6:	18 8a       	std	Y+16, r1	; 0x10
    3eb8:	1f 86       	std	Y+15, r1	; 0x0f
			}

			// Block PWM generation after last PWM pulse
			if ((PWM_pulses == 1) && (Config.Servo_rate == FAST))
    3eba:	31 e0       	ldi	r19, 0x01	; 1
    3ebc:	63 16       	cp	r6, r19
    3ebe:	71 04       	cpc	r7, r1
    3ec0:	d1 f4       	brne	.+52     	; 0x3ef6 <main+0xad0>
    3ec2:	92 30       	cpi	r25, 0x02	; 2
    3ec4:	c1 f4       	brne	.+48     	; 0x3ef6 <main+0xad0>
				
				// Refresh PWM_interval with the actual interval when generating PWM
				// if it lies within believable ranges of 120Hz to 250Hz
				// This is located here to make sure the interval measured
				// is during PWM generation cycles
				if ((interval < PWM_PERIOD_WORST) && (interval > PWM_PERIOD_BEST))
    3ec6:	b5 01       	movw	r22, r10
    3ec8:	a4 01       	movw	r20, r8
    3eca:	4e 58       	subi	r20, 0x8E	; 142
    3ecc:	50 42       	sbci	r21, 0x20	; 32
    3ece:	61 09       	sbc	r22, r1
    3ed0:	71 09       	sbc	r23, r1
    3ed2:	43 3d       	cpi	r20, 0xD3	; 211
    3ed4:	50 43       	sbci	r21, 0x30	; 48
    3ed6:	61 05       	cpc	r22, r1
    3ed8:	71 05       	cpc	r23, r1
    3eda:	48 f0       	brcs	.+18     	; 0x3eee <main+0xac8>
				{
					PWM_interval = interval;
				}
				else
				{
					PWM_interval = PWM_PERIOD_WORST; // 120Hz
    3edc:	a1 e6       	ldi	r26, 0x61	; 97
    3ede:	ca 2e       	mov	r12, r26
    3ee0:	a1 e5       	ldi	r26, 0x51	; 81
    3ee2:	da 2e       	mov	r13, r26
    3ee4:	e1 2c       	mov	r14, r1
    3ee6:	f1 2c       	mov	r15, r1
			}

			// Block PWM generation after last PWM pulse
			if ((PWM_pulses == 1) && (Config.Servo_rate == FAST))
			{
				PWMBlocked = true;					// Block PWM generation on notification of last call
    3ee8:	21 e0       	ldi	r18, 0x01	; 1
    3eea:	2c 87       	std	Y+12, r18	; 0x0c
    3eec:	04 c0       	rjmp	.+8      	; 0x3ef6 <main+0xad0>
    3eee:	75 01       	movw	r14, r10
    3ef0:	64 01       	movw	r12, r8
    3ef2:	31 e0       	ldi	r19, 0x01	; 1
    3ef4:	3c 87       	std	Y+12, r19	; 0x0c
				}	
			
				
			}
			
			Calculate_PID();					// Calculate PID values
    3ef6:	89 a7       	std	Y+41, r24	; 0x29
    3ef8:	0e 94 94 40 	call	0x8128	; 0x8128 <Calculate_PID>
			ProcessMixer();						// Do all the mixer tasks - can be very slow
    3efc:	0e 94 17 38 	call	0x702e	; 0x702e <ProcessMixer>
			UpdateServos();						// Transfer Config.Channel[i].value data to ServoOut[i] and check servo limits
    3f00:	0e 94 b7 37 	call	0x6f6e	; 0x6f6e <UpdateServos>
			
			// If, for some reason, a higher power has banned PWM output for this cycle, 
			// just fake a PWM interval. The PWM interval is currently 2.3ms, and doesn't vary.
			// This keeps the cycle time more constant.
			if (PWMOverride)
    3f04:	89 a5       	ldd	r24, Y+41	; 0x29
    3f06:	49 81       	ldd	r20, Y+1	; 0x01
    3f08:	44 23       	and	r20, r20
    3f0a:	39 f0       	breq	.+14     	; 0x3f1a <main+0xaf4>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3f0c:	8b ee       	ldi	r24, 0xEB	; 235
    3f0e:	9c e2       	ldi	r25, 0x2C	; 44
    3f10:	01 97       	sbiw	r24, 0x01	; 1
    3f12:	f1 f7       	brne	.-4      	; 0x3f10 <main+0xaea>
    3f14:	00 c0       	rjmp	.+0      	; 0x3f16 <main+0xaf0>
    3f16:	00 00       	nop
    3f18:	02 c0       	rjmp	.+4      	; 0x3f1e <main+0xaf8>
				_delay_us(2300);
			}
			// Otherwise just output PWM normally
			else
			{
				output_servo_ppm(ServoFlag);		// Output servo signal			
    3f1a:	0e 94 2d 44 	call	0x885a	; 0x885a <output_servo_ppm>
			}


			// Decrement PWM pulse sum
			if ((Config.Servo_rate == FAST) && (PWM_pulses > 0))
    3f1e:	80 91 d3 05 	lds	r24, 0x05D3
    3f22:	82 30       	cpi	r24, 0x02	; 2
    3f24:	31 f4       	brne	.+12     	; 0x3f32 <main+0xb0c>
    3f26:	16 14       	cp	r1, r6
    3f28:	17 04       	cpc	r1, r7
    3f2a:	1c f4       	brge	.+6      	; 0x3f32 <main+0xb0c>
			{
				PWM_pulses--;
    3f2c:	91 e0       	ldi	r25, 0x01	; 1
    3f2e:	69 1a       	sub	r6, r25
    3f30:	71 08       	sbc	r7, r1
			}
			
			LoopCount = 0;						// Reset loop counter for averaging accVert
    3f32:	10 92 16 05 	sts	0x0516, r1
    3f36:	1a 86       	std	Y+10, r1	; 0x0a
		//************************************************************
		//* Enable RC interrupts when ready (RC rate measured and RC interrupts OFF)
		//* and just one PWM remains
		//************************************************************

		if ((PWM_pulses < 1) && RCrateMeasured && !RCInterruptsON && (Config.Servo_rate == FAST))
    3f38:	16 14       	cp	r1, r6
    3f3a:	17 04       	cpc	r1, r7
    3f3c:	74 f0       	brlt	.+28     	; 0x3f5a <main+0xb34>
    3f3e:	2a 81       	ldd	r18, Y+2	; 0x02
    3f40:	22 23       	and	r18, r18
    3f42:	59 f0       	breq	.+22     	; 0x3f5a <main+0xb34>
    3f44:	3a 8d       	ldd	r19, Y+26	; 0x1a
    3f46:	31 11       	cpse	r19, r1
    3f48:	08 c0       	rjmp	.+16     	; 0x3f5a <main+0xb34>
    3f4a:	80 91 d3 05 	lds	r24, 0x05D3
    3f4e:	82 30       	cpi	r24, 0x02	; 2
    3f50:	21 f4       	brne	.+8      	; 0x3f5a <main+0xb34>
		{
			init_int();					// Re-enable interrupts
    3f52:	0e 94 29 2e 	call	0x5c52	; 0x5c52 <init_int>
			RCInterruptsON = true;
    3f56:	41 e0       	ldi	r20, 0x01	; 1
    3f58:	4a 8f       	std	Y+26, r20	; 0x1a
		//* Carefully update idle screen if error level changed
		//************************************************************	

		// Only update idle when error state has changed.
		// This prevents the continual updating of the LCD disrupting the FC
		if ((old_alarms != General_error) && (Menu_mode == IDLE))
    3f5a:	80 91 1e 05 	lds	r24, 0x051E
    3f5e:	28 a5       	ldd	r18, Y+40	; 0x28
    3f60:	28 17       	cp	r18, r24
    3f62:	19 f0       	breq	.+6      	; 0x3f6a <main+0xb44>
    3f64:	11 11       	cpse	r17, r1
    3f66:	01 c0       	rjmp	.+2      	; 0x3f6a <main+0xb44>
		{
			// Force safe update of idle screen
			Menu_mode = PRESTATUS_TIMEOUT;
    3f68:	17 e0       	ldi	r17, 0x07	; 7
		}
			
		// Save current alarm state into old_alarms
		old_alarms = General_error;
    3f6a:	30 91 1e 05 	lds	r19, 0x051E
    3f6e:	38 a7       	std	Y+40, r19	; 0x28
		//************************************************************
		//* Transition state handling
		//************************************************************

		// Update timed transition when changing flight modes
		if (Config.FlightSel != old_flight)
    3f70:	be 8c       	ldd	r11, Y+30	; 0x1e
		}
			
		// Save current alarm state into old_alarms
		old_alarms = General_error;
		
	} // while loop
    3f72:	8b 88       	ldd	r8, Y+19	; 0x13
    3f74:	9c 88       	ldd	r9, Y+20	; 0x14
    3f76:	9c ca       	rjmp	.-2760   	; 0x34b0 <main+0x8a>
			// Trim lower end to zero (0 to 2250)
			if (temp1 < 0) temp1 = 0;

			// Convert 0 to 2250 to 0 to 125. Divide by 20
			// Round to avoid truncation errors
			transition = (temp1 + 10) / 20;
    3f78:	70 93 20 05 	sts	0x0520, r23
    3f7c:	60 93 1f 05 	sts	0x051F, r22

		// Always in the TRANSITIONING state when Config.TransitionSpeed is 0
		// This prevents state changes when controlled by a channel
		if (Config.TransitionSpeed == 0)
		{
			Transition_state = TRANSITIONING;
    3f80:	85 e0       	ldi	r24, 0x05	; 5
    3f82:	80 93 21 05 	sts	0x0521, r24
    3f86:	a2 cc       	rjmp	.-1724   	; 0x38cc <main+0x4a6>
			
			// Rate not measured or re-calibrating or not FAST mode
			// In all these other modes, just output one pulse
			else
			{
				PWM_pulses = 1;
    3f88:	66 24       	eor	r6, r6
    3f8a:	63 94       	inc	r6
    3f8c:	71 2c       	mov	r7, r1
    3f8e:	18 cf       	rjmp	.-464    	; 0x3dc0 <main+0x99a>
			if (RCrateMeasured && (Config.Servo_rate == FAST))
			{
				// Set minimal pulses doable (39.2 - n * cycletime)
				if (SlowRC)
				{
					PWM_pulses = 4;				// Four pulses will fit if interval faster than 102Hz
    3f90:	e4 e0       	ldi	r30, 0x04	; 4
    3f92:	6e 2e       	mov	r6, r30
    3f94:	71 2c       	mov	r7, r1
    3f96:	0f c0       	rjmp	.+30     	; 0x3fb6 <main+0xb90>
				
					if (PWM_interval < 19600)	// 19600 = 7.84ms
					{
						PWM_pulses += 1;		// Five pulses will fit if interval faster than 127Hz
    3f98:	75 e0       	ldi	r23, 0x05	; 5
    3f9a:	67 2e       	mov	r6, r23
    3f9c:	71 2c       	mov	r7, r1
    3f9e:	0b c0       	rjmp	.+22     	; 0x3fb6 <main+0xb90>
					}
				
					if (PWM_interval < 16333)	// 16333 = 6.53ms
					{
						PWM_pulses += 1;		// Six pulses will fit if interval faster than 153Hz
    3fa0:	66 e0       	ldi	r22, 0x06	; 6
    3fa2:	66 2e       	mov	r6, r22
    3fa4:	71 2c       	mov	r7, r1
    3fa6:	07 c0       	rjmp	.+14     	; 0x3fb6 <main+0xb90>
					}
				
					if (PWM_interval < 14000)	// 14000 = 5.6ms
					{
						PWM_pulses += 1;		// Seven pulses will fit if interval faster than 179Hz
    3fa8:	57 e0       	ldi	r21, 0x07	; 7
    3faa:	65 2e       	mov	r6, r21
    3fac:	71 2c       	mov	r7, r1
    3fae:	03 c0       	rjmp	.+6      	; 0x3fb6 <main+0xb90>
					}
				
					if (PWM_interval < 12250)	// 12250 = 4.9ms
					{
						PWM_pulses += 1;		// Eight pulses will fit if interval faster than 204Hz
    3fb0:	48 e0       	ldi	r20, 0x08	; 8
    3fb2:	64 2e       	mov	r6, r20
    3fb4:	71 2c       	mov	r7, r1
						PWM_pulses += 1;		// Nine pulses will fit if interval faster than 230Hz
					}
				
					if (PWM_interval < 9800)	// 9800 = 3.92ms
					{
						PWM_pulses += 1;		// Ten pulses will fit if interval faster than 255Hz
    3fb6:	41 e0       	ldi	r20, 0x01	; 1
    3fb8:	4a 83       	std	Y+2, r20	; 0x02
    3fba:	02 cf       	rjmp	.-508    	; 0x3dc0 <main+0x99a>
					}
				}
				else
				{
					PWM_pulses = 3;				// Three pulses will fit if interval faster than 101Hz
    3fbc:	33 e0       	ldi	r19, 0x03	; 3
    3fbe:	63 2e       	mov	r6, r19
    3fc0:	71 2c       	mov	r7, r1
    3fc2:	0b c0       	rjmp	.+22     	; 0x3fda <main+0xbb4>
				
					if (PWM_interval < 18437)	// 18437 = 7.37ms
					{
						PWM_pulses += 1;		// Four pulses will fit if interval faster than 135Hz
    3fc4:	24 e0       	ldi	r18, 0x04	; 4
    3fc6:	62 2e       	mov	r6, r18
    3fc8:	71 2c       	mov	r7, r1
    3fca:	07 c0       	rjmp	.+14     	; 0x3fda <main+0xbb4>
					}
				
					if (PWM_interval < 14750)	// 14750 = 5.9ms
					{
						PWM_pulses += 1;		// Five pulses will fit if interval faster than 169Hz
    3fcc:	95 e0       	ldi	r25, 0x05	; 5
    3fce:	69 2e       	mov	r6, r25
    3fd0:	71 2c       	mov	r7, r1
    3fd2:	03 c0       	rjmp	.+6      	; 0x3fda <main+0xbb4>
					}
				
					if (PWM_interval < 11886)	// 11886 = 4.75ms
					{
						PWM_pulses += 1;		// Six pulses will fit if interval faster than 210Hz
    3fd4:	86 e0       	ldi	r24, 0x06	; 6
    3fd6:	68 2e       	mov	r6, r24
    3fd8:	71 2c       	mov	r7, r1
		//************************************************************

		// Flag update required based on the variable Servo_Match
		if (Servo_Rate > SERVO_RATE_LOW)
		{
			ServoTick = true;	// Slow device is ready for output generation
    3fda:	21 e0       	ldi	r18, 0x01	; 1
    3fdc:	2a 83       	std	Y+2, r18	; 0x02
    3fde:	f0 ce       	rjmp	.-544    	; 0x3dc0 <main+0x99a>
			// For each output, mark the ones that are to fire this time
			for (i = 0; i < MAX_OUTPUTS; i++)
			{
				// Mark bits depending on the selected output type
				if	(
						((Config.Servo_rate == FAST) && (Config.Channel[i].Motor_marker == ASERVO) && ServoTick) ||					// At ServoTick for A.Servo in FAST mode
    3fe0:	4a 85       	ldd	r20, Y+10	; 0x0a
    3fe2:	41 11       	cpse	r20, r1
    3fe4:	57 cf       	rjmp	.-338    	; 0x3e94 <main+0xa6e>
    3fe6:	4a cf       	rjmp	.-364    	; 0x3e7c <main+0xa56>

00003fe8 <spiwrite>:
const uint8_t pagemap[] PROGMEM 		= { 7, 6, 5, 4, 3, 2, 1, 0 }; 
const uint8_t lcd_commmands[] PROGMEM	= {0xAF,0x40,0xA0,0xA6,0xA4,0xA2,0xEE,0xC8,0x2F,0x24,0xAC,0x00,0xF8,0x00};	// LCD command string 14

// Software SPI write
inline void spiwrite(uint8_t c) 
{
    3fe8:	0f 93       	push	r16
    3fea:	1f 93       	push	r17
    3fec:	cf 93       	push	r28
    3fee:	df 93       	push	r29
    3ff0:	c7 e0       	ldi	r28, 0x07	; 7
    3ff2:	d0 e0       	ldi	r29, 0x00	; 0
	int8_t i;
	for (i = 7; i >= 0; i--) 
	{
		LCD_SCL = 0;
		if (c & (1 << (i)))		// Bit set?
    3ff4:	08 2f       	mov	r16, r24
    3ff6:	10 e0       	ldi	r17, 0x00	; 0
inline void spiwrite(uint8_t c) 
{
	int8_t i;
	for (i = 7; i >= 0; i--) 
	{
		LCD_SCL = 0;
    3ff8:	5c 98       	cbi	0x0b, 4	; 11
		if (c & (1 << (i)))		// Bit set?
    3ffa:	c8 01       	movw	r24, r16
    3ffc:	0c 2e       	mov	r0, r28
    3ffe:	02 c0       	rjmp	.+4      	; 0x4004 <spiwrite+0x1c>
    4000:	95 95       	asr	r25
    4002:	87 95       	ror	r24
    4004:	0a 94       	dec	r0
    4006:	e2 f7       	brpl	.-8      	; 0x4000 <spiwrite+0x18>
    4008:	80 ff       	sbrs	r24, 0
    400a:	02 c0       	rjmp	.+4      	; 0x4010 <spiwrite+0x28>
		{
			LCD_SI = 1;
    400c:	59 9a       	sbi	0x0b, 1	; 11
    400e:	01 c0       	rjmp	.+2      	; 0x4012 <spiwrite+0x2a>
		}
		else					// Bit clear?
		{
			LCD_SI = 0;
    4010:	59 98       	cbi	0x0b, 1	; 11
		}
		
		LCD_SCL = 1;
    4012:	5c 9a       	sbi	0x0b, 4	; 11

		glcd_delay();			// 250ns
    4014:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <glcd_delay>
    4018:	21 97       	sbiw	r28, 0x01	; 1
    401a:	70 f7       	brcc	.-36     	; 0x3ff8 <spiwrite+0x10>
	}
}
    401c:	df 91       	pop	r29
    401e:	cf 91       	pop	r28
    4020:	1f 91       	pop	r17
    4022:	0f 91       	pop	r16
    4024:	08 95       	ret

00004026 <st7565_command>:

// Send command to LCD
void st7565_command(uint8_t c) 
{
	LCD_A0 = 0;
    4026:	5f 98       	cbi	0x0b, 7	; 11
	spiwrite(c);
    4028:	0c 94 f4 1f 	jmp	0x3fe8	; 0x3fe8 <spiwrite>

0000402c <st7565_data>:
}

// Send data to LCD
void st7565_data(uint8_t c) 
{
	LCD_A0 = 1;
    402c:	5f 9a       	sbi	0x0b, 7	; 11
	spiwrite(c);
    402e:	0c 94 f4 1f 	jmp	0x3fe8	; 0x3fe8 <spiwrite>

00004032 <st7565_set_brightness>:
}


// Set LCD brightness
void st7565_set_brightness(uint8_t val) 
{
    4032:	cf 93       	push	r28
    4034:	c8 2f       	mov	r28, r24
	st7565_command(CMD_SET_VOLUME_FIRST);					// 0x81
    4036:	81 e8       	ldi	r24, 0x81	; 129
    4038:	0e 94 13 20 	call	0x4026	; 0x4026 <st7565_command>
	st7565_command(val);
    403c:	8c 2f       	mov	r24, r28
}
    403e:	cf 91       	pop	r28

// Set LCD brightness
void st7565_set_brightness(uint8_t val) 
{
	st7565_command(CMD_SET_VOLUME_FIRST);					// 0x81
	st7565_command(val);
    4040:	0c 94 13 20 	jmp	0x4026	; 0x4026 <st7565_command>

00004044 <st7565_init>:
	spiwrite(c);
}

// Initialise LCD
void st7565_init(void) 
{
    4044:	cf 93       	push	r28
    4046:	df 93       	push	r29
	// Toggle RST low to reset and CS low so it'll listen to us
	LCD_CSI = 0;
    4048:	5d 98       	cbi	0x0b, 5	; 11
	LCD_RES = 0;
    404a:	5e 98       	cbi	0x0b, 6	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    404c:	87 e8       	ldi	r24, 0x87	; 135
    404e:	93 e1       	ldi	r25, 0x13	; 19
    4050:	01 97       	sbiw	r24, 0x01	; 1
    4052:	f1 f7       	brne	.-4      	; 0x4050 <st7565_init+0xc>
    4054:	00 c0       	rjmp	.+0      	; 0x4056 <st7565_init+0x12>
    4056:	00 00       	nop
	_delay_ms(1); // Datasheet says 1us for 3.3V operation
	LCD_RES = 1;
    4058:	5e 9a       	sbi	0x0b, 6	; 11
    405a:	ce ed       	ldi	r28, 0xDE	; 222
    405c:	dd e0       	ldi	r29, 0x0D	; 13

	// Send command sequence
	for (int i = 0; i < 14; i++)
	{
		st7565_command((uint8_t)pgm_read_byte(&lcd_commmands[i]));
    405e:	fe 01       	movw	r30, r28
    4060:	84 91       	lpm	r24, Z
    4062:	0e 94 13 20 	call	0x4026	; 0x4026 <st7565_command>
    4066:	21 96       	adiw	r28, 0x01	; 1
	LCD_RES = 0;
	_delay_ms(1); // Datasheet says 1us for 3.3V operation
	LCD_RES = 1;

	// Send command sequence
	for (int i = 0; i < 14; i++)
    4068:	fd e0       	ldi	r31, 0x0D	; 13
    406a:	cc 3e       	cpi	r28, 0xEC	; 236
    406c:	df 07       	cpc	r29, r31
    406e:	b9 f7       	brne	.-18     	; 0x405e <st7565_init+0x1a>
	{
		st7565_command((uint8_t)pgm_read_byte(&lcd_commmands[i]));
	}

	st7565_set_brightness(Config.Contrast);	
    4070:	80 91 32 06 	lds	r24, 0x0632
    4074:	0e 94 19 20 	call	0x4032	; 0x4032 <st7565_set_brightness>
	st7565_command(CMD_SET_COM_REVERSE); 		// For logo	0xC8
    4078:	88 ec       	ldi	r24, 0xC8	; 200
}
    407a:	df 91       	pop	r29
    407c:	cf 91       	pop	r28
	{
		st7565_command((uint8_t)pgm_read_byte(&lcd_commmands[i]));
	}

	st7565_set_brightness(Config.Contrast);	
	st7565_command(CMD_SET_COM_REVERSE); 		// For logo	0xC8
    407e:	0c 94 13 20 	jmp	0x4026	; 0x4026 <st7565_command>

00004082 <write_buffer>:
	st7565_command(val);
}

// Write LCD buffer
void write_buffer(uint8_t *buffer) 
{
    4082:	df 92       	push	r13
    4084:	ef 92       	push	r14
    4086:	ff 92       	push	r15
    4088:	0f 93       	push	r16
    408a:	1f 93       	push	r17
    408c:	cf 93       	push	r28
    408e:	df 93       	push	r29
    4090:	cc ee       	ldi	r28, 0xEC	; 236
    4092:	dd e0       	ldi	r29, 0x0D	; 13
    4094:	8c 01       	movw	r16, r24
	uint8_t c, p;
	for(p = 0; p < 8; p++) 
	{
		st7565_command(CMD_SET_PAGE | (uint8_t)pgm_read_byte(&pagemap[p]));		// Page 7 to 0
    4096:	fe 01       	movw	r30, r28
    4098:	84 91       	lpm	r24, Z
    409a:	80 6b       	ori	r24, 0xB0	; 176
    409c:	0e 94 13 20 	call	0x4026	; 0x4026 <st7565_command>
		st7565_command(CMD_SET_COLUMN_LOWER | (0x0 & 0xf));						// Column 0
    40a0:	80 e0       	ldi	r24, 0x00	; 0
    40a2:	0e 94 13 20 	call	0x4026	; 0x4026 <st7565_command>
		st7565_command(CMD_SET_COLUMN_UPPER | ((0x0 >> 4) & 0xf));				// Column 0
    40a6:	80 e1       	ldi	r24, 0x10	; 16
    40a8:	0e 94 13 20 	call	0x4026	; 0x4026 <st7565_command>
		st7565_command(CMD_RMW);												// Sets auto-increment
    40ac:	80 ee       	ldi	r24, 0xE0	; 224
    40ae:	0e 94 13 20 	call	0x4026	; 0x4026 <st7565_command>
    40b2:	78 01       	movw	r14, r16

		for(c = 0; c < 128; c++) 
    40b4:	d1 2c       	mov	r13, r1
		{
			st7565_data(buffer[(128*p)+c]);
    40b6:	f7 01       	movw	r30, r14
    40b8:	81 91       	ld	r24, Z+
    40ba:	7f 01       	movw	r14, r30
    40bc:	0e 94 16 20 	call	0x402c	; 0x402c <st7565_data>
		st7565_command(CMD_SET_PAGE | (uint8_t)pgm_read_byte(&pagemap[p]));		// Page 7 to 0
		st7565_command(CMD_SET_COLUMN_LOWER | (0x0 & 0xf));						// Column 0
		st7565_command(CMD_SET_COLUMN_UPPER | ((0x0 >> 4) & 0xf));				// Column 0
		st7565_command(CMD_RMW);												// Sets auto-increment

		for(c = 0; c < 128; c++) 
    40c0:	d3 94       	inc	r13
    40c2:	f0 e8       	ldi	r31, 0x80	; 128
    40c4:	df 12       	cpse	r13, r31
    40c6:	f7 cf       	rjmp	.-18     	; 0x40b6 <write_buffer+0x34>
    40c8:	21 96       	adiw	r28, 0x01	; 1
    40ca:	00 58       	subi	r16, 0x80	; 128
    40cc:	1f 4f       	sbci	r17, 0xFF	; 255

// Write LCD buffer
void write_buffer(uint8_t *buffer) 
{
	uint8_t c, p;
	for(p = 0; p < 8; p++) 
    40ce:	8d e0       	ldi	r24, 0x0D	; 13
    40d0:	c4 3f       	cpi	r28, 0xF4	; 244
    40d2:	d8 07       	cpc	r29, r24
    40d4:	01 f7       	brne	.-64     	; 0x4096 <write_buffer+0x14>
		for(c = 0; c < 128; c++) 
		{
			st7565_data(buffer[(128*p)+c]);
		}
	}
}
    40d6:	df 91       	pop	r29
    40d8:	cf 91       	pop	r28
    40da:	1f 91       	pop	r17
    40dc:	0f 91       	pop	r16
    40de:	ff 90       	pop	r15
    40e0:	ef 90       	pop	r14
    40e2:	df 90       	pop	r13
    40e4:	08 95       	ret

000040e6 <clear_buffer>:

// Clear buffer
void clear_buffer(uint8_t *buff) 
{
	memset(buff, 0, 1024);
    40e6:	20 e0       	ldi	r18, 0x00	; 0
    40e8:	34 e0       	ldi	r19, 0x04	; 4
    40ea:	fc 01       	movw	r30, r24
    40ec:	a9 01       	movw	r20, r18
    40ee:	11 92       	st	Z+, r1
    40f0:	41 50       	subi	r20, 0x01	; 1
    40f2:	50 40       	sbci	r21, 0x00	; 0
    40f4:	e1 f7       	brne	.-8      	; 0x40ee <clear_buffer+0x8>
    40f6:	08 95       	ret

000040f8 <clear_screen>:
}

// Clear screen (does not clear buffer)
void clear_screen(void)
{
    40f8:	cf 93       	push	r28
    40fa:	df 93       	push	r29
	uint8_t p, c;

	for(p = 0; p < 8; p++)
    40fc:	d0 e0       	ldi	r29, 0x00	; 0
	{
		st7565_command(CMD_SET_PAGE | p);								// Set page to p
    40fe:	8d 2f       	mov	r24, r29
    4100:	80 6b       	ori	r24, 0xB0	; 176
    4102:	0e 94 13 20 	call	0x4026	; 0x4026 <st7565_command>
		for(c = 0; c < 128; c++) 										// Was 129, which I think is wrong...
    4106:	c0 e0       	ldi	r28, 0x00	; 0
		{
			st7565_command(CMD_SET_COLUMN_LOWER | (c & 0xf));
    4108:	8c 2f       	mov	r24, r28
    410a:	8f 70       	andi	r24, 0x0F	; 15
    410c:	0e 94 13 20 	call	0x4026	; 0x4026 <st7565_command>
			st7565_command(CMD_SET_COLUMN_UPPER | ((c >> 4) & 0xf));	// Set column to c
    4110:	8c 2f       	mov	r24, r28
    4112:	82 95       	swap	r24
    4114:	8f 70       	andi	r24, 0x0F	; 15
    4116:	80 61       	ori	r24, 0x10	; 16
    4118:	0e 94 13 20 	call	0x4026	; 0x4026 <st7565_command>
			st7565_data(0x00);											// Clear data
    411c:	80 e0       	ldi	r24, 0x00	; 0
    411e:	0e 94 16 20 	call	0x402c	; 0x402c <st7565_data>
	uint8_t p, c;

	for(p = 0; p < 8; p++)
	{
		st7565_command(CMD_SET_PAGE | p);								// Set page to p
		for(c = 0; c < 128; c++) 										// Was 129, which I think is wrong...
    4122:	cf 5f       	subi	r28, 0xFF	; 255
    4124:	c0 38       	cpi	r28, 0x80	; 128
    4126:	81 f7       	brne	.-32     	; 0x4108 <clear_screen+0x10>
// Clear screen (does not clear buffer)
void clear_screen(void)
{
	uint8_t p, c;

	for(p = 0; p < 8; p++)
    4128:	df 5f       	subi	r29, 0xFF	; 255
    412a:	d8 30       	cpi	r29, 0x08	; 8
    412c:	41 f7       	brne	.-48     	; 0x40fe <clear_screen+0x6>
			st7565_command(CMD_SET_COLUMN_LOWER | (c & 0xf));
			st7565_command(CMD_SET_COLUMN_UPPER | ((c >> 4) & 0xf));	// Set column to c
			st7565_data(0x00);											// Clear data
		}
	}
}
    412e:	df 91       	pop	r29
    4130:	cf 91       	pop	r28
    4132:	08 95       	ret

00004134 <setpixel>:
//***********************************************************

// Set a single pixel
void setpixel(uint8_t *buff, uint8_t x, uint8_t y, uint8_t color) 
{
	if ((x >= LCDWIDTH) || (y >= LCDHEIGHT))
    4134:	67 fd       	sbrc	r22, 7
    4136:	36 c0       	rjmp	.+108    	; 0x41a4 <setpixel+0x70>
    4138:	40 34       	cpi	r20, 0x40	; 64
    413a:	a0 f5       	brcc	.+104    	; 0x41a4 <setpixel+0x70>
    413c:	34 2f       	mov	r19, r20
    413e:	36 95       	lsr	r19
    4140:	36 95       	lsr	r19
    4142:	36 95       	lsr	r19
    4144:	e6 2f       	mov	r30, r22
    4146:	f0 e0       	ldi	r31, 0x00	; 0
    4148:	50 e0       	ldi	r21, 0x00	; 0
	{
		return;
	}
	// x is which column
	if (color)
    414a:	22 23       	and	r18, r18
    414c:	a9 f0       	breq	.+42     	; 0x4178 <setpixel+0x44>
	{
		buff[x+ (y/8)*128] |= (1 << (7-(y%8)));  
    414e:	20 e8       	ldi	r18, 0x80	; 128
    4150:	32 9f       	mul	r19, r18
    4152:	e0 0d       	add	r30, r0
    4154:	f1 1d       	adc	r31, r1
    4156:	11 24       	eor	r1, r1
    4158:	e8 0f       	add	r30, r24
    415a:	f9 1f       	adc	r31, r25
    415c:	40 95       	com	r20
    415e:	50 95       	com	r21
    4160:	47 70       	andi	r20, 0x07	; 7
    4162:	55 27       	eor	r21, r21
    4164:	81 e0       	ldi	r24, 0x01	; 1
    4166:	90 e0       	ldi	r25, 0x00	; 0
    4168:	04 2e       	mov	r0, r20
    416a:	01 c0       	rjmp	.+2      	; 0x416e <setpixel+0x3a>
    416c:	88 0f       	add	r24, r24
    416e:	0a 94       	dec	r0
    4170:	ea f7       	brpl	.-6      	; 0x416c <setpixel+0x38>
    4172:	90 81       	ld	r25, Z
    4174:	98 2b       	or	r25, r24
    4176:	15 c0       	rjmp	.+42     	; 0x41a2 <setpixel+0x6e>
	}
	else
	{
		buff[x+ (y/8)*128] &= ~(1 << (7-(y%8))); 
    4178:	20 e8       	ldi	r18, 0x80	; 128
    417a:	32 9f       	mul	r19, r18
    417c:	e0 0d       	add	r30, r0
    417e:	f1 1d       	adc	r31, r1
    4180:	11 24       	eor	r1, r1
    4182:	e8 0f       	add	r30, r24
    4184:	f9 1f       	adc	r31, r25
    4186:	40 95       	com	r20
    4188:	50 95       	com	r21
    418a:	47 70       	andi	r20, 0x07	; 7
    418c:	55 27       	eor	r21, r21
    418e:	81 e0       	ldi	r24, 0x01	; 1
    4190:	90 e0       	ldi	r25, 0x00	; 0
    4192:	04 2e       	mov	r0, r20
    4194:	01 c0       	rjmp	.+2      	; 0x4198 <setpixel+0x64>
    4196:	88 0f       	add	r24, r24
    4198:	0a 94       	dec	r0
    419a:	ea f7       	brpl	.-6      	; 0x4196 <setpixel+0x62>
    419c:	80 95       	com	r24
    419e:	90 81       	ld	r25, Z
    41a0:	98 23       	and	r25, r24
    41a2:	90 83       	st	Z, r25
    41a4:	08 95       	ret

000041a6 <drawline>:
	}
}

// Bresenham's algorithm - From wikipedia
void drawline(uint8_t *buff, uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1, uint8_t color) 
{
    41a6:	9f 92       	push	r9
    41a8:	af 92       	push	r10
    41aa:	bf 92       	push	r11
    41ac:	cf 92       	push	r12
    41ae:	df 92       	push	r13
    41b0:	ef 92       	push	r14
    41b2:	ff 92       	push	r15
    41b4:	0f 93       	push	r16
    41b6:	1f 93       	push	r17
    41b8:	cf 93       	push	r28
    41ba:	df 93       	push	r29
    41bc:	ec 01       	movw	r28, r24
    41be:	16 2f       	mov	r17, r22
    41c0:	f4 2e       	mov	r15, r20
    41c2:	d2 2e       	mov	r13, r18
	uint8_t steep = abs(y1 - y0) > abs(x1 - x0);
    41c4:	a0 2f       	mov	r26, r16
    41c6:	b0 e0       	ldi	r27, 0x00	; 0
    41c8:	a4 1b       	sub	r26, r20
    41ca:	b1 09       	sbc	r27, r1
    41cc:	b7 ff       	sbrs	r27, 7
    41ce:	03 c0       	rjmp	.+6      	; 0x41d6 <drawline+0x30>
    41d0:	b1 95       	neg	r27
    41d2:	a1 95       	neg	r26
    41d4:	b1 09       	sbc	r27, r1
    41d6:	ed 2d       	mov	r30, r13
    41d8:	f0 e0       	ldi	r31, 0x00	; 0
    41da:	e1 1b       	sub	r30, r17
    41dc:	f1 09       	sbc	r31, r1
    41de:	f7 ff       	sbrs	r31, 7
    41e0:	03 c0       	rjmp	.+6      	; 0x41e8 <drawline+0x42>
    41e2:	f1 95       	neg	r31
    41e4:	e1 95       	neg	r30
    41e6:	f1 09       	sbc	r31, r1
    41e8:	bb 24       	eor	r11, r11
    41ea:	b3 94       	inc	r11
    41ec:	ea 17       	cp	r30, r26
    41ee:	fb 07       	cpc	r31, r27
    41f0:	14 f0       	brlt	.+4      	; 0x41f6 <drawline+0x50>
    41f2:	b1 2c       	mov	r11, r1
    41f4:	06 c0       	rjmp	.+12     	; 0x4202 <drawline+0x5c>
    41f6:	8d 2d       	mov	r24, r13
	if (steep) 
	{
		swap(x0, y0);
		swap(x1, y1);
    41f8:	d0 2e       	mov	r13, r16
    41fa:	08 2f       	mov	r16, r24
    41fc:	81 2f       	mov	r24, r17
void drawline(uint8_t *buff, uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1, uint8_t color) 
{
	uint8_t steep = abs(y1 - y0) > abs(x1 - x0);
	if (steep) 
	{
		swap(x0, y0);
    41fe:	1f 2d       	mov	r17, r15
    4200:	f8 2e       	mov	r15, r24
		swap(x1, y1);
	}

	if (x0 > x1) 
    4202:	d1 16       	cp	r13, r17
    4204:	30 f4       	brcc	.+12     	; 0x4212 <drawline+0x6c>
    4206:	8f 2d       	mov	r24, r15
	{
		swap(x0, x1);
		swap(y0, y1);
    4208:	f0 2e       	mov	r15, r16
    420a:	08 2f       	mov	r16, r24
    420c:	81 2f       	mov	r24, r17
    420e:	1d 2d       	mov	r17, r13
    4210:	d8 2e       	mov	r13, r24
	}

	uint8_t dx, dy;
	dx = x1 - x0;
    4212:	ad 2c       	mov	r10, r13
    4214:	a1 1a       	sub	r10, r17
	dy = abs(y1 - y0);
    4216:	e0 2f       	mov	r30, r16
    4218:	f0 e0       	ldi	r31, 0x00	; 0
    421a:	ef 19       	sub	r30, r15
    421c:	f1 09       	sbc	r31, r1
    421e:	f7 ff       	sbrs	r31, 7
    4220:	03 c0       	rjmp	.+6      	; 0x4228 <drawline+0x82>
    4222:	f1 95       	neg	r31
    4224:	e1 95       	neg	r30
    4226:	f1 09       	sbc	r31, r1
    4228:	9e 2e       	mov	r9, r30

	int8_t err = dx / 2;
    422a:	ca 2c       	mov	r12, r10
    422c:	c6 94       	lsr	r12
	int8_t ystep;

	if (y0 < y1) 
    422e:	f0 16       	cp	r15, r16
    4230:	10 f4       	brcc	.+4      	; 0x4236 <drawline+0x90>
	{
		ystep = 1;
    4232:	01 e0       	ldi	r16, 0x01	; 1
    4234:	10 c0       	rjmp	.+32     	; 0x4256 <drawline+0xb0>
	} 
	else 
	{
		ystep = -1;
    4236:	0f ef       	ldi	r16, 0xFF	; 255
    4238:	0e c0       	rjmp	.+28     	; 0x4256 <drawline+0xb0>

	for (; x0<x1; x0++) 
	{
		if (steep) 
		{
			setpixel(buff, y0, x0, color);
    423a:	2e 2d       	mov	r18, r14
		ystep = -1;
	}

	for (; x0<x1; x0++) 
	{
		if (steep) 
    423c:	bb 20       	and	r11, r11
    423e:	71 f0       	breq	.+28     	; 0x425c <drawline+0xb6>
		{
			setpixel(buff, y0, x0, color);
    4240:	41 2f       	mov	r20, r17
    4242:	6f 2d       	mov	r22, r15
		} 
		else 
		{
			setpixel(buff, x0, y0, color);
    4244:	ce 01       	movw	r24, r28
    4246:	0e 94 9a 20 	call	0x4134	; 0x4134 <setpixel>
		}
		err -= dy;
    424a:	c9 18       	sub	r12, r9
		if (err < 0) 
    424c:	c7 fe       	sbrs	r12, 7
    424e:	02 c0       	rjmp	.+4      	; 0x4254 <drawline+0xae>
		{
			y0 += ystep;
    4250:	f0 0e       	add	r15, r16
			err += dx;
    4252:	ca 0c       	add	r12, r10
	else 
	{
		ystep = -1;
	}

	for (; x0<x1; x0++) 
    4254:	1f 5f       	subi	r17, 0xFF	; 255
    4256:	1d 15       	cp	r17, r13
    4258:	80 f3       	brcs	.-32     	; 0x423a <drawline+0x94>
    425a:	03 c0       	rjmp	.+6      	; 0x4262 <drawline+0xbc>
		{
			setpixel(buff, y0, x0, color);
		} 
		else 
		{
			setpixel(buff, x0, y0, color);
    425c:	4f 2d       	mov	r20, r15
    425e:	61 2f       	mov	r22, r17
    4260:	f1 cf       	rjmp	.-30     	; 0x4244 <drawline+0x9e>
		{
			y0 += ystep;
			err += dx;
		}
	}
}
    4262:	df 91       	pop	r29
    4264:	cf 91       	pop	r28
    4266:	1f 91       	pop	r17
    4268:	0f 91       	pop	r16
    426a:	ff 90       	pop	r15
    426c:	ef 90       	pop	r14
    426e:	df 90       	pop	r13
    4270:	cf 90       	pop	r12
    4272:	bf 90       	pop	r11
    4274:	af 90       	pop	r10
    4276:	9f 90       	pop	r9
    4278:	08 95       	ret

0000427a <drawrect>:
	}
}

// Draw a rectangle
void drawrect(uint8_t *buff, uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color) 
{
    427a:	9f 92       	push	r9
    427c:	af 92       	push	r10
    427e:	bf 92       	push	r11
    4280:	cf 92       	push	r12
    4282:	df 92       	push	r13
    4284:	ef 92       	push	r14
    4286:	ff 92       	push	r15
    4288:	0f 93       	push	r16
    428a:	1f 93       	push	r17
    428c:	cf 93       	push	r28
    428e:	df 93       	push	r29
    4290:	ec 01       	movw	r28, r24
    4292:	f6 2e       	mov	r15, r22
    4294:	b4 2e       	mov	r11, r20
    4296:	92 2e       	mov	r9, r18
	// Stupidest version - just pixels - but fast with internal buffer!
	for (uint8_t i=x; i<x+w; i++) 
    4298:	16 2f       	mov	r17, r22
    429a:	c2 2e       	mov	r12, r18
    429c:	d1 2c       	mov	r13, r1
    429e:	c6 0e       	add	r12, r22
    42a0:	d1 1c       	adc	r13, r1
	{
		setpixel(buff, i, y, color);
		setpixel(buff, i, y+h-1, color);
    42a2:	aa 24       	eor	r10, r10
    42a4:	aa 94       	dec	r10
    42a6:	a0 0e       	add	r10, r16
    42a8:	a4 0e       	add	r10, r20

// Draw a rectangle
void drawrect(uint8_t *buff, uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color) 
{
	// Stupidest version - just pixels - but fast with internal buffer!
	for (uint8_t i=x; i<x+w; i++) 
    42aa:	81 2f       	mov	r24, r17
    42ac:	90 e0       	ldi	r25, 0x00	; 0
    42ae:	8c 15       	cp	r24, r12
    42b0:	9d 05       	cpc	r25, r13
    42b2:	74 f4       	brge	.+28     	; 0x42d0 <drawrect+0x56>
	{
		setpixel(buff, i, y, color);
    42b4:	2e 2d       	mov	r18, r14
    42b6:	4b 2d       	mov	r20, r11
    42b8:	61 2f       	mov	r22, r17
    42ba:	ce 01       	movw	r24, r28
    42bc:	0e 94 9a 20 	call	0x4134	; 0x4134 <setpixel>
		setpixel(buff, i, y+h-1, color);
    42c0:	2e 2d       	mov	r18, r14
    42c2:	4a 2d       	mov	r20, r10
    42c4:	61 2f       	mov	r22, r17
    42c6:	ce 01       	movw	r24, r28
    42c8:	0e 94 9a 20 	call	0x4134	; 0x4134 <setpixel>

// Draw a rectangle
void drawrect(uint8_t *buff, uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color) 
{
	// Stupidest version - just pixels - but fast with internal buffer!
	for (uint8_t i=x; i<x+w; i++) 
    42cc:	1f 5f       	subi	r17, 0xFF	; 255
    42ce:	ed cf       	rjmp	.-38     	; 0x42aa <drawrect+0x30>
    42d0:	db 2c       	mov	r13, r11
	{
		setpixel(buff, i, y, color);
		setpixel(buff, i, y+h-1, color);
	}
	for (uint8_t i=y; i<y+h; i++) 
    42d2:	10 e0       	ldi	r17, 0x00	; 0
    42d4:	0b 0d       	add	r16, r11
    42d6:	11 1d       	adc	r17, r1
	{
		setpixel(buff, x, i, color);
		setpixel(buff, x+w-1, i, color);
    42d8:	cc 24       	eor	r12, r12
    42da:	ca 94       	dec	r12
    42dc:	c9 0c       	add	r12, r9
    42de:	cf 0c       	add	r12, r15
	for (uint8_t i=x; i<x+w; i++) 
	{
		setpixel(buff, i, y, color);
		setpixel(buff, i, y+h-1, color);
	}
	for (uint8_t i=y; i<y+h; i++) 
    42e0:	8d 2d       	mov	r24, r13
    42e2:	90 e0       	ldi	r25, 0x00	; 0
    42e4:	80 17       	cp	r24, r16
    42e6:	91 07       	cpc	r25, r17
    42e8:	74 f4       	brge	.+28     	; 0x4306 <drawrect+0x8c>
	{
		setpixel(buff, x, i, color);
    42ea:	2e 2d       	mov	r18, r14
    42ec:	4d 2d       	mov	r20, r13
    42ee:	6f 2d       	mov	r22, r15
    42f0:	ce 01       	movw	r24, r28
    42f2:	0e 94 9a 20 	call	0x4134	; 0x4134 <setpixel>
		setpixel(buff, x+w-1, i, color);
    42f6:	2e 2d       	mov	r18, r14
    42f8:	4d 2d       	mov	r20, r13
    42fa:	6c 2d       	mov	r22, r12
    42fc:	ce 01       	movw	r24, r28
    42fe:	0e 94 9a 20 	call	0x4134	; 0x4134 <setpixel>
	for (uint8_t i=x; i<x+w; i++) 
	{
		setpixel(buff, i, y, color);
		setpixel(buff, i, y+h-1, color);
	}
	for (uint8_t i=y; i<y+h; i++) 
    4302:	d3 94       	inc	r13
    4304:	ed cf       	rjmp	.-38     	; 0x42e0 <drawrect+0x66>
	{
		setpixel(buff, x, i, color);
		setpixel(buff, x+w-1, i, color);
	} 
}
    4306:	df 91       	pop	r29
    4308:	cf 91       	pop	r28
    430a:	1f 91       	pop	r17
    430c:	0f 91       	pop	r16
    430e:	ff 90       	pop	r15
    4310:	ef 90       	pop	r14
    4312:	df 90       	pop	r13
    4314:	cf 90       	pop	r12
    4316:	bf 90       	pop	r11
    4318:	af 90       	pop	r10
    431a:	9f 90       	pop	r9
    431c:	08 95       	ret

0000431e <fillcircle>:

// Draw a filled circle
// Edge-clip bug fixed by D. Thompson - 3/2/2014
void fillcircle(uint8_t *buff, uint8_t x0, uint8_t y0, uint8_t r, uint8_t color) 
{
    431e:	4f 92       	push	r4
    4320:	5f 92       	push	r5
    4322:	6f 92       	push	r6
    4324:	7f 92       	push	r7
    4326:	8f 92       	push	r8
    4328:	9f 92       	push	r9
    432a:	af 92       	push	r10
    432c:	bf 92       	push	r11
    432e:	cf 92       	push	r12
    4330:	df 92       	push	r13
    4332:	ef 92       	push	r14
    4334:	ff 92       	push	r15
    4336:	0f 93       	push	r16
    4338:	1f 93       	push	r17
    433a:	cf 93       	push	r28
    433c:	df 93       	push	r29
    433e:	ec 01       	movw	r28, r24
    4340:	96 2e       	mov	r9, r22
    4342:	a4 2e       	mov	r10, r20
	int8_t f = 1 - r;
    4344:	bb 24       	eor	r11, r11
    4346:	b3 94       	inc	r11
    4348:	b2 1a       	sub	r11, r18
	int8_t ddF_x = 1;
	int8_t ddF_y = -2 * r;
    434a:	82 2e       	mov	r8, r18
    434c:	81 94       	neg	r8
    434e:	88 0c       	add	r8, r8
	int8_t x = 0;
	int8_t y = r;
    4350:	12 2f       	mov	r17, r18
	int8_t i = 0;

	for (i=y0-r; i<=y0+r; i++) 
    4352:	74 2e       	mov	r7, r20
    4354:	72 1a       	sub	r7, r18
    4356:	e4 2e       	mov	r14, r20
    4358:	f1 2c       	mov	r15, r1
    435a:	67 01       	movw	r12, r14
    435c:	c2 0e       	add	r12, r18
    435e:	d1 1c       	adc	r13, r1
    4360:	87 2d       	mov	r24, r7
    4362:	99 27       	eor	r25, r25
    4364:	87 fd       	sbrc	r24, 7
    4366:	90 95       	com	r25
    4368:	c8 16       	cp	r12, r24
    436a:	d9 06       	cpc	r13, r25
    436c:	44 f0       	brlt	.+16     	; 0x437e <fillcircle+0x60>
	{
		setpixel(buff, x0, i, color);
    436e:	20 2f       	mov	r18, r16
    4370:	47 2d       	mov	r20, r7
    4372:	69 2d       	mov	r22, r9
    4374:	ce 01       	movw	r24, r28
    4376:	0e 94 9a 20 	call	0x4134	; 0x4134 <setpixel>
    437a:	73 94       	inc	r7
    437c:	f1 cf       	rjmp	.-30     	; 0x4360 <fillcircle+0x42>
	int8_t ddF_y = -2 * r;
	int8_t x = 0;
	int8_t y = r;
	int8_t i = 0;

	for (i=y0-r; i<=y0+r; i++) 
    437e:	71 2c       	mov	r7, r1
	{
		setpixel(buff, x0, i, color);
	}

	while (x<y) 
    4380:	71 16       	cp	r7, r17
    4382:	0c f0       	brlt	.+2      	; 0x4386 <fillcircle+0x68>
    4384:	4c c0       	rjmp	.+152    	; 0x441e <fillcircle+0x100>
	{
		if (f >= 0) 
    4386:	b7 fc       	sbrc	r11, 7
    4388:	04 c0       	rjmp	.+8      	; 0x4392 <fillcircle+0x74>
		{
			y--;
    438a:	11 50       	subi	r17, 0x01	; 1
			ddF_y += 2;
    438c:	83 94       	inc	r8
    438e:	83 94       	inc	r8
			f += ddF_y;
    4390:	b8 0c       	add	r11, r8
    4392:	73 94       	inc	r7
    4394:	87 2d       	mov	r24, r7
    4396:	88 0f       	add	r24, r24
    4398:	8f 5f       	subi	r24, 0xFF	; 255
		}

		x++;
		ddF_x += 2;
		f += ddF_x;
    439a:	b8 0e       	add	r11, r24

		for (i=y0-y; i<=y0+y; i++) 
    439c:	6a 2c       	mov	r6, r10
    439e:	61 1a       	sub	r6, r17
    43a0:	67 01       	movw	r12, r14
    43a2:	c1 0e       	add	r12, r17
    43a4:	d1 1c       	adc	r13, r1
    43a6:	17 fd       	sbrc	r17, 7
    43a8:	da 94       	dec	r13
    43aa:	47 2c       	mov	r4, r7
    43ac:	49 0c       	add	r4, r9
    43ae:	59 2c       	mov	r5, r9
    43b0:	57 18       	sub	r5, r7
    43b2:	86 2d       	mov	r24, r6
    43b4:	99 27       	eor	r25, r25
    43b6:	87 fd       	sbrc	r24, 7
    43b8:	90 95       	com	r25
    43ba:	c8 16       	cp	r12, r24
    43bc:	d9 06       	cpc	r13, r25
    43be:	74 f0       	brlt	.+28     	; 0x43dc <fillcircle+0xbe>
		{
			setpixel(buff, x0+x, i, color);
    43c0:	20 2f       	mov	r18, r16
    43c2:	46 2d       	mov	r20, r6
    43c4:	64 2d       	mov	r22, r4
    43c6:	ce 01       	movw	r24, r28
    43c8:	0e 94 9a 20 	call	0x4134	; 0x4134 <setpixel>
			setpixel(buff, x0-x, i, color);
    43cc:	20 2f       	mov	r18, r16
    43ce:	46 2d       	mov	r20, r6
    43d0:	65 2d       	mov	r22, r5
    43d2:	ce 01       	movw	r24, r28
    43d4:	0e 94 9a 20 	call	0x4134	; 0x4134 <setpixel>
    43d8:	63 94       	inc	r6
    43da:	eb cf       	rjmp	.-42     	; 0x43b2 <fillcircle+0x94>
    43dc:	6a 2c       	mov	r6, r10
    43de:	67 18       	sub	r6, r7
		} 
		for (i=y0-x; i<=y0+x; i++) 
    43e0:	67 01       	movw	r12, r14
    43e2:	c7 0c       	add	r12, r7
    43e4:	d1 1c       	adc	r13, r1
    43e6:	77 fc       	sbrc	r7, 7
    43e8:	da 94       	dec	r13
		{
			setpixel(buff, x0+y, i, color);
    43ea:	41 2e       	mov	r4, r17
    43ec:	49 0c       	add	r4, r9
			setpixel(buff, x0-y, i, color);
    43ee:	59 2c       	mov	r5, r9
    43f0:	51 1a       	sub	r5, r17
		for (i=y0-y; i<=y0+y; i++) 
		{
			setpixel(buff, x0+x, i, color);
			setpixel(buff, x0-x, i, color);
		} 
		for (i=y0-x; i<=y0+x; i++) 
    43f2:	86 2d       	mov	r24, r6
    43f4:	99 27       	eor	r25, r25
    43f6:	87 fd       	sbrc	r24, 7
    43f8:	90 95       	com	r25
    43fa:	c8 16       	cp	r12, r24
    43fc:	d9 06       	cpc	r13, r25
    43fe:	0c f4       	brge	.+2      	; 0x4402 <fillcircle+0xe4>
    4400:	bf cf       	rjmp	.-130    	; 0x4380 <fillcircle+0x62>
		{
			setpixel(buff, x0+y, i, color);
    4402:	20 2f       	mov	r18, r16
    4404:	46 2d       	mov	r20, r6
    4406:	64 2d       	mov	r22, r4
    4408:	ce 01       	movw	r24, r28
    440a:	0e 94 9a 20 	call	0x4134	; 0x4134 <setpixel>
			setpixel(buff, x0-y, i, color);
    440e:	20 2f       	mov	r18, r16
    4410:	46 2d       	mov	r20, r6
    4412:	65 2d       	mov	r22, r5
    4414:	ce 01       	movw	r24, r28
    4416:	0e 94 9a 20 	call	0x4134	; 0x4134 <setpixel>
    441a:	63 94       	inc	r6
    441c:	ea cf       	rjmp	.-44     	; 0x43f2 <fillcircle+0xd4>
		}    
	}
}
    441e:	df 91       	pop	r29
    4420:	cf 91       	pop	r28
    4422:	1f 91       	pop	r17
    4424:	0f 91       	pop	r16
    4426:	ff 90       	pop	r15
    4428:	ef 90       	pop	r14
    442a:	df 90       	pop	r13
    442c:	cf 90       	pop	r12
    442e:	bf 90       	pop	r11
    4430:	af 90       	pop	r10
    4432:	9f 90       	pop	r9
    4434:	8f 90       	pop	r8
    4436:	7f 90       	pop	r7
    4438:	6f 90       	pop	r6
    443a:	5f 90       	pop	r5
    443c:	4f 90       	pop	r4
    443e:	08 95       	ret

00004440 <LCD_Display_Text>:
//************************************************************

// Print Menuitem from Program memory at a particular location
void LCD_Display_Text (uint16_t menuitem, const unsigned char* font,uint16_t x, uint16_t y)
{
	gLCDprint_Menu_P((char*)pgm_read_word(&text_menu[menuitem]), font, x, y);
    4440:	88 0f       	add	r24, r24
    4442:	99 1f       	adc	r25, r25
    4444:	8c 50       	subi	r24, 0x0C	; 12
    4446:	92 4f       	sbci	r25, 0xF2	; 242
    4448:	fc 01       	movw	r30, r24
    444a:	85 91       	lpm	r24, Z+
    444c:	94 91       	lpm	r25, Z
}

// Print a string from RAM at a particular location in a particular font
void gLCDprint_Menu_P(const char *s, const unsigned char* font,uint16_t x, uint16_t y)
{
	pgm_mugui_lcd_puts((const unsigned char*)s, font, x, y);
    444e:	0c 94 70 3e 	jmp	0x7ce0	; 0x7ce0 <pgm_mugui_lcd_puts>

00004452 <gLCDprint_Menu_P>:
    4452:	0c 94 70 3e 	jmp	0x7ce0	; 0x7ce0 <pgm_mugui_lcd_puts>

00004456 <idle_screen>:
}

// Pop up the Idle screen
void idle_screen(void)
{
	clear_buffer(buffer);
    4456:	80 e0       	ldi	r24, 0x00	; 0
    4458:	91 e0       	ldi	r25, 0x01	; 1
    445a:	0e 94 73 20 	call	0x40e6	; 0x40e6 <clear_buffer>

	// Change Status screen depending on arm mode
	LCD_Display_Text(121,(const unsigned char*)Verdana14,41,3); 	// "Press"
    445e:	23 e0       	ldi	r18, 0x03	; 3
    4460:	30 e0       	ldi	r19, 0x00	; 0
    4462:	49 e2       	ldi	r20, 0x29	; 41
    4464:	50 e0       	ldi	r21, 0x00	; 0
    4466:	6f e5       	ldi	r22, 0x5F	; 95
    4468:	71 e0       	ldi	r23, 0x01	; 1
    446a:	89 e7       	ldi	r24, 0x79	; 121
    446c:	90 e0       	ldi	r25, 0x00	; 0
    446e:	0e 94 20 22 	call	0x4440	; 0x4440 <LCD_Display_Text>
	LCD_Display_Text(122,(const unsigned char*)Verdana14,24,23);	// "for status."
    4472:	27 e1       	ldi	r18, 0x17	; 23
    4474:	30 e0       	ldi	r19, 0x00	; 0
    4476:	48 e1       	ldi	r20, 0x18	; 24
    4478:	50 e0       	ldi	r21, 0x00	; 0
    447a:	6f e5       	ldi	r22, 0x5F	; 95
    447c:	71 e0       	ldi	r23, 0x01	; 1
    447e:	8a e7       	ldi	r24, 0x7A	; 122
    4480:	90 e0       	ldi	r25, 0x00	; 0
    4482:	0e 94 20 22 	call	0x4440	; 0x4440 <LCD_Display_Text>

	// Display most important error
	if ((General_error & (1 << LVA_ALARM)) != 0)					// Low voltage
    4486:	80 91 1e 05 	lds	r24, 0x051E
    448a:	83 ff       	sbrs	r24, 3
    448c:	13 c0       	rjmp	.+38     	; 0x44b4 <idle_screen+0x5e>
	{
		LCD_Display_Text(134,(const unsigned char*)Verdana14,12,43);// "Battery"
    448e:	2b e2       	ldi	r18, 0x2B	; 43
    4490:	30 e0       	ldi	r19, 0x00	; 0
    4492:	4c e0       	ldi	r20, 0x0C	; 12
    4494:	50 e0       	ldi	r21, 0x00	; 0
    4496:	6f e5       	ldi	r22, 0x5F	; 95
    4498:	71 e0       	ldi	r23, 0x01	; 1
    449a:	86 e8       	ldi	r24, 0x86	; 134
    449c:	90 e0       	ldi	r25, 0x00	; 0
    449e:	0e 94 20 22 	call	0x4440	; 0x4440 <LCD_Display_Text>
		LCD_Display_Text(118,(const unsigned char*)Verdana14,80,43); // "Low"
    44a2:	2b e2       	ldi	r18, 0x2B	; 43
    44a4:	30 e0       	ldi	r19, 0x00	; 0
    44a6:	40 e5       	ldi	r20, 0x50	; 80
    44a8:	50 e0       	ldi	r21, 0x00	; 0
    44aa:	6f e5       	ldi	r22, 0x5F	; 95
    44ac:	71 e0       	ldi	r23, 0x01	; 1
    44ae:	86 e7       	ldi	r24, 0x76	; 118
    44b0:	90 e0       	ldi	r25, 0x00	; 0
    44b2:	41 c0       	rjmp	.+130    	; 0x4536 <idle_screen+0xe0>
	}
	
	else if ((General_error & (1 << NO_SIGNAL)) != 0)				// No signal
    44b4:	80 91 1e 05 	lds	r24, 0x051E
    44b8:	81 ff       	sbrs	r24, 1
    44ba:	13 c0       	rjmp	.+38     	; 0x44e2 <idle_screen+0x8c>
	{
		LCD_Display_Text(75,(const unsigned char*)Verdana14,28,43); // "No"
    44bc:	2b e2       	ldi	r18, 0x2B	; 43
    44be:	30 e0       	ldi	r19, 0x00	; 0
    44c0:	4c e1       	ldi	r20, 0x1C	; 28
    44c2:	50 e0       	ldi	r21, 0x00	; 0
    44c4:	6f e5       	ldi	r22, 0x5F	; 95
    44c6:	71 e0       	ldi	r23, 0x01	; 1
    44c8:	8b e4       	ldi	r24, 0x4B	; 75
    44ca:	90 e0       	ldi	r25, 0x00	; 0
    44cc:	0e 94 20 22 	call	0x4440	; 0x4440 <LCD_Display_Text>
		LCD_Display_Text(76,(const unsigned char*)Verdana14,54,43); // "Signal"
    44d0:	2b e2       	ldi	r18, 0x2B	; 43
    44d2:	30 e0       	ldi	r19, 0x00	; 0
    44d4:	46 e3       	ldi	r20, 0x36	; 54
    44d6:	50 e0       	ldi	r21, 0x00	; 0
    44d8:	6f e5       	ldi	r22, 0x5F	; 95
    44da:	71 e0       	ldi	r23, 0x01	; 1
    44dc:	8c e4       	ldi	r24, 0x4C	; 76
    44de:	90 e0       	ldi	r25, 0x00	; 0
    44e0:	2a c0       	rjmp	.+84     	; 0x4536 <idle_screen+0xe0>
	}
	
	else if ((General_error & (1 << THROTTLE_HIGH)) != 0)			// Throttle high
    44e2:	80 91 1e 05 	lds	r24, 0x051E
    44e6:	80 ff       	sbrs	r24, 0
    44e8:	13 c0       	rjmp	.+38     	; 0x4510 <idle_screen+0xba>
	{
		LCD_Display_Text(105,(const unsigned char*)Verdana14,10,43);// "Throttle"
    44ea:	2b e2       	ldi	r18, 0x2B	; 43
    44ec:	30 e0       	ldi	r19, 0x00	; 0
    44ee:	4a e0       	ldi	r20, 0x0A	; 10
    44f0:	50 e0       	ldi	r21, 0x00	; 0
    44f2:	6f e5       	ldi	r22, 0x5F	; 95
    44f4:	71 e0       	ldi	r23, 0x01	; 1
    44f6:	89 e6       	ldi	r24, 0x69	; 105
    44f8:	90 e0       	ldi	r25, 0x00	; 0
    44fa:	0e 94 20 22 	call	0x4440	; 0x4440 <LCD_Display_Text>
		LCD_Display_Text(55,(const unsigned char*)Verdana14,81,43);	// "High"
    44fe:	2b e2       	ldi	r18, 0x2B	; 43
    4500:	30 e0       	ldi	r19, 0x00	; 0
    4502:	41 e5       	ldi	r20, 0x51	; 81
    4504:	50 e0       	ldi	r21, 0x00	; 0
    4506:	6f e5       	ldi	r22, 0x5F	; 95
    4508:	71 e0       	ldi	r23, 0x01	; 1
    450a:	87 e3       	ldi	r24, 0x37	; 55
    450c:	90 e0       	ldi	r25, 0x00	; 0
    450e:	13 c0       	rjmp	.+38     	; 0x4536 <idle_screen+0xe0>
	}
	
	else if ((General_error & (1 << DISARMED)) != 0)				// Disarmed
    4510:	80 91 1e 05 	lds	r24, 0x051E
	{
		LCD_Display_Text(139,(const unsigned char*)Verdana14,20,43);// "(Disarmed)"
    4514:	2b e2       	ldi	r18, 0x2B	; 43
    4516:	30 e0       	ldi	r19, 0x00	; 0
	{
		LCD_Display_Text(105,(const unsigned char*)Verdana14,10,43);// "Throttle"
		LCD_Display_Text(55,(const unsigned char*)Verdana14,81,43);	// "High"
	}
	
	else if ((General_error & (1 << DISARMED)) != 0)				// Disarmed
    4518:	82 ff       	sbrs	r24, 2
    451a:	07 c0       	rjmp	.+14     	; 0x452a <idle_screen+0xd4>
	{
		LCD_Display_Text(139,(const unsigned char*)Verdana14,20,43);// "(Disarmed)"
    451c:	44 e1       	ldi	r20, 0x14	; 20
    451e:	50 e0       	ldi	r21, 0x00	; 0
    4520:	6f e5       	ldi	r22, 0x5F	; 95
    4522:	71 e0       	ldi	r23, 0x01	; 1
    4524:	8b e8       	ldi	r24, 0x8B	; 139
    4526:	90 e0       	ldi	r25, 0x00	; 0
    4528:	06 c0       	rjmp	.+12     	; 0x4536 <idle_screen+0xe0>
	}
	else
	{
		LCD_Display_Text(138,(const unsigned char*)Verdana14,28,43);// "(Armed)"
    452a:	4c e1       	ldi	r20, 0x1C	; 28
    452c:	50 e0       	ldi	r21, 0x00	; 0
    452e:	6f e5       	ldi	r22, 0x5F	; 95
    4530:	71 e0       	ldi	r23, 0x01	; 1
    4532:	8a e8       	ldi	r24, 0x8A	; 138
    4534:	90 e0       	ldi	r25, 0x00	; 0
    4536:	0e 94 20 22 	call	0x4440	; 0x4440 <LCD_Display_Text>
	}

	write_buffer(buffer);
    453a:	80 e0       	ldi	r24, 0x00	; 0
    453c:	91 e0       	ldi	r25, 0x01	; 1
    453e:	0c 94 41 20 	jmp	0x4082	; 0x4082 <write_buffer>

00004542 <get_raw_gyros>:
		gyroADC[i] *= (int8_t)pgm_read_byte(&Gyro_Pol[Config.Orientation][i]);
	}
}

void get_raw_gyros(void)
{
    4542:	cf 93       	push	r28
    4544:	df 93       	push	r29
    4546:	cd b7       	in	r28, 0x3d	; 61
    4548:	de b7       	in	r29, 0x3e	; 62
    454a:	2c 97       	sbiw	r28, 0x0c	; 12
    454c:	0f b6       	in	r0, 0x3f	; 63
    454e:	f8 94       	cli
    4550:	de bf       	out	0x3e, r29	; 62
    4552:	0f be       	out	0x3f, r0	; 63
    4554:	cd bf       	out	0x3d, r28	; 61
	uint8_t i;
	uint8_t Gyros[6];
	int16_t temp1, temp2;

	// Get the i2c data from the MPU6050
	readI2CbyteArray(MPU60X0_DEFAULT_ADDRESS,MPU60X0_RA_GYRO_XOUT_H,(uint8_t *)Gyros,6);
    4556:	26 e0       	ldi	r18, 0x06	; 6
    4558:	ae 01       	movw	r20, r28
    455a:	4f 5f       	subi	r20, 0xFF	; 255
    455c:	5f 4f       	sbci	r21, 0xFF	; 255
    455e:	63 e4       	ldi	r22, 0x43	; 67
    4560:	80 ed       	ldi	r24, 0xD0	; 208
    4562:	0e 94 95 24 	call	0x492a	; 0x492a <readI2CbyteArray>

	// Reassemble data into gyroADC array and down-sample to reduce resolution and noise
	temp1 = Gyros[0] << 8;
    4566:	89 81       	ldd	r24, Y+1	; 0x01
    4568:	90 e0       	ldi	r25, 0x00	; 0
    456a:	98 2f       	mov	r25, r24
    456c:	88 27       	eor	r24, r24
	temp2 = Gyros[1];
    456e:	2a 81       	ldd	r18, Y+2	; 0x02
	RawADC[PITCH] = (temp1 + temp2) >> GYRODIV;
    4570:	82 0f       	add	r24, r18
    4572:	91 1d       	adc	r25, r1
    4574:	34 e0       	ldi	r19, 0x04	; 4
    4576:	95 95       	asr	r25
    4578:	87 95       	ror	r24
    457a:	3a 95       	dec	r19
    457c:	e1 f7       	brne	.-8      	; 0x4576 <get_raw_gyros+0x34>
    457e:	9a 87       	std	Y+10, r25	; 0x0a
    4580:	89 87       	std	Y+9, r24	; 0x09

	temp1 = Gyros[2] << 8;
    4582:	8b 81       	ldd	r24, Y+3	; 0x03
    4584:	90 e0       	ldi	r25, 0x00	; 0
    4586:	98 2f       	mov	r25, r24
    4588:	88 27       	eor	r24, r24
	temp2 = Gyros[3];
    458a:	2c 81       	ldd	r18, Y+4	; 0x04
	RawADC[ROLL] = (temp1 + temp2) >> GYRODIV;
    458c:	82 0f       	add	r24, r18
    458e:	91 1d       	adc	r25, r1
    4590:	54 e0       	ldi	r21, 0x04	; 4
    4592:	95 95       	asr	r25
    4594:	87 95       	ror	r24
    4596:	5a 95       	dec	r21
    4598:	e1 f7       	brne	.-8      	; 0x4592 <get_raw_gyros+0x50>
    459a:	98 87       	std	Y+8, r25	; 0x08
    459c:	8f 83       	std	Y+7, r24	; 0x07

	temp1 = Gyros[4] << 8;
    459e:	8d 81       	ldd	r24, Y+5	; 0x05
    45a0:	90 e0       	ldi	r25, 0x00	; 0
    45a2:	98 2f       	mov	r25, r24
    45a4:	88 27       	eor	r24, r24
	temp2 = Gyros[5];
    45a6:	2e 81       	ldd	r18, Y+6	; 0x06
	RawADC[YAW] = (temp1 + temp2) >> GYRODIV;
    45a8:	82 0f       	add	r24, r18
    45aa:	91 1d       	adc	r25, r1
    45ac:	74 e0       	ldi	r23, 0x04	; 4
    45ae:	95 95       	asr	r25
    45b0:	87 95       	ror	r24
    45b2:	7a 95       	dec	r23
    45b4:	e1 f7       	brne	.-8      	; 0x45ae <get_raw_gyros+0x6c>
    45b6:	9c 87       	std	Y+12, r25	; 0x0c
    45b8:	8b 87       	std	Y+11, r24	; 0x0b

	// Reorient the data as per the board orientation	
	for (i=0; i<NUMBEROFAXIS; i++)
	{
		// Rearrange the sensors
		gyroADC[i] 	= RawADC[(int8_t)pgm_read_byte(&Gyro_RPY_Order[Config.Orientation][i])];
    45ba:	20 91 31 06 	lds	r18, 0x0631
    45be:	ab e6       	ldi	r26, 0x6B	; 107
    45c0:	b5 e0       	ldi	r27, 0x05	; 5
    45c2:	43 e0       	ldi	r20, 0x03	; 3
    45c4:	24 02       	muls	r18, r20
    45c6:	90 01       	movw	r18, r0
    45c8:	11 24       	eor	r1, r1
    45ca:	80 e0       	ldi	r24, 0x00	; 0
    45cc:	90 e0       	ldi	r25, 0x00	; 0
    45ce:	22 52       	subi	r18, 0x22	; 34
    45d0:	38 4e       	sbci	r19, 0xE8	; 232
    45d2:	f9 01       	movw	r30, r18
    45d4:	e8 0f       	add	r30, r24
    45d6:	f9 1f       	adc	r31, r25
    45d8:	e4 91       	lpm	r30, Z
    45da:	ee 0f       	add	r30, r30
    45dc:	ff 0b       	sbc	r31, r31
    45de:	41 e0       	ldi	r20, 0x01	; 1
    45e0:	50 e0       	ldi	r21, 0x00	; 0
    45e2:	4c 0f       	add	r20, r28
    45e4:	5d 1f       	adc	r21, r29
    45e6:	e4 0f       	add	r30, r20
    45e8:	f5 1f       	adc	r31, r21
    45ea:	46 81       	ldd	r20, Z+6	; 0x06
    45ec:	57 81       	ldd	r21, Z+7	; 0x07
    45ee:	4d 93       	st	X+, r20
    45f0:	5d 93       	st	X+, r21
    45f2:	01 96       	adiw	r24, 0x01	; 1
	temp1 = Gyros[4] << 8;
	temp2 = Gyros[5];
	RawADC[YAW] = (temp1 + temp2) >> GYRODIV;

	// Reorient the data as per the board orientation	
	for (i=0; i<NUMBEROFAXIS; i++)
    45f4:	83 30       	cpi	r24, 0x03	; 3
    45f6:	91 05       	cpc	r25, r1
    45f8:	61 f7       	brne	.-40     	; 0x45d2 <get_raw_gyros+0x90>
	{
		// Rearrange the sensors
		gyroADC[i] 	= RawADC[(int8_t)pgm_read_byte(&Gyro_RPY_Order[Config.Orientation][i])];
	}
}
    45fa:	2c 96       	adiw	r28, 0x0c	; 12
    45fc:	0f b6       	in	r0, 0x3f	; 63
    45fe:	f8 94       	cli
    4600:	de bf       	out	0x3e, r29	; 62
    4602:	0f be       	out	0x3f, r0	; 63
    4604:	cd bf       	out	0x3d, r28	; 61
    4606:	df 91       	pop	r29
    4608:	cf 91       	pop	r28
    460a:	08 95       	ret

0000460c <ReadGyros>:
//************************************************************

int16_t gyroADC[NUMBEROFAXIS];			// Holds Gyro ADCs

void ReadGyros(void)					// Conventional orientation
{
    460c:	1f 93       	push	r17
    460e:	cf 93       	push	r28
    4610:	df 93       	push	r29
	uint8_t i;

	get_raw_gyros();					// Updates gyroADC[]
    4612:	0e 94 a1 22 	call	0x4542	; 0x4542 <get_raw_gyros>
	{
		// Remove offsets from gyro outputs
		gyroADC[i] -= Config.gyroZero[i];

		// Change polarity
		gyroADC[i] *= (int8_t)pgm_read_byte(&Gyro_Pol[Config.Orientation][i]);
    4616:	20 91 31 06 	lds	r18, 0x0631
    461a:	cf e9       	ldi	r28, 0x9F	; 159
    461c:	d7 e0       	ldi	r29, 0x07	; 7
    461e:	ab e6       	ldi	r26, 0x6B	; 107
    4620:	b5 e0       	ldi	r27, 0x05	; 5
    4622:	83 e0       	ldi	r24, 0x03	; 3
    4624:	28 02       	muls	r18, r24
    4626:	90 01       	movw	r18, r0
    4628:	11 24       	eor	r1, r1
    462a:	80 e0       	ldi	r24, 0x00	; 0
    462c:	90 e0       	ldi	r25, 0x00	; 0
    462e:	24 53       	subi	r18, 0x34	; 52
    4630:	38 4e       	sbci	r19, 0xE8	; 232
	get_raw_gyros();					// Updates gyroADC[]

	for (i=0; i<NUMBEROFAXIS; i++)	
	{
		// Remove offsets from gyro outputs
		gyroADC[i] -= Config.gyroZero[i];
    4632:	69 91       	ld	r22, Y+
    4634:	79 91       	ld	r23, Y+
    4636:	f9 01       	movw	r30, r18
    4638:	e8 0f       	add	r30, r24
    463a:	f9 1f       	adc	r31, r25

		// Change polarity
		gyroADC[i] *= (int8_t)pgm_read_byte(&Gyro_Pol[Config.Orientation][i]);
    463c:	14 91       	lpm	r17, Z
	get_raw_gyros();					// Updates gyroADC[]

	for (i=0; i<NUMBEROFAXIS; i++)	
	{
		// Remove offsets from gyro outputs
		gyroADC[i] -= Config.gyroZero[i];
    463e:	4d 91       	ld	r20, X+
    4640:	5c 91       	ld	r21, X
    4642:	11 97       	sbiw	r26, 0x01	; 1
    4644:	46 1b       	sub	r20, r22
    4646:	57 0b       	sbc	r21, r23

		// Change polarity
		gyroADC[i] *= (int8_t)pgm_read_byte(&Gyro_Pol[Config.Orientation][i]);
    4648:	14 03       	mulsu	r17, r20
    464a:	b0 01       	movw	r22, r0
    464c:	15 9f       	mul	r17, r21
    464e:	70 0d       	add	r23, r0
    4650:	11 24       	eor	r1, r1
    4652:	6d 93       	st	X+, r22
    4654:	7d 93       	st	X+, r23
    4656:	01 96       	adiw	r24, 0x01	; 1
{
	uint8_t i;

	get_raw_gyros();					// Updates gyroADC[]

	for (i=0; i<NUMBEROFAXIS; i++)	
    4658:	83 30       	cpi	r24, 0x03	; 3
    465a:	91 05       	cpc	r25, r1
    465c:	51 f7       	brne	.-44     	; 0x4632 <ReadGyros+0x26>
		gyroADC[i] -= Config.gyroZero[i];

		// Change polarity
		gyroADC[i] *= (int8_t)pgm_read_byte(&Gyro_Pol[Config.Orientation][i]);
	}
}
    465e:	df 91       	pop	r29
    4660:	cf 91       	pop	r28
    4662:	1f 91       	pop	r17
    4664:	08 95       	ret

00004666 <CalibrateGyrosFast>:
//***************************************************************
// Calibration routines
//***************************************************************

void CalibrateGyrosFast(void)
{
    4666:	cf 93       	push	r28
	uint8_t i;

	// Clear gyro zeros
	memset(&Config.gyroZero[ROLL],0,(sizeof(int16_t) * NUMBEROFAXIS));
    4668:	86 e0       	ldi	r24, 0x06	; 6
    466a:	ef e9       	ldi	r30, 0x9F	; 159
    466c:	f7 e0       	ldi	r31, 0x07	; 7
    466e:	df 01       	movw	r26, r30
    4670:	1d 92       	st	X+, r1
    4672:	8a 95       	dec	r24
    4674:	e9 f7       	brne	.-6      	; 0x4670 <CalibrateGyrosFast+0xa>
    4676:	c0 e2       	ldi	r28, 0x20	; 32

	// Calculate average over 32 reads
	for (i=0; i<32; i++)
	{
		get_raw_gyros();				// Updates gyroADC[]
    4678:	0e 94 a1 22 	call	0x4542	; 0x4542 <get_raw_gyros>

		Config.gyroZero[ROLL] 	+= gyroADC[ROLL];						
    467c:	40 91 9f 07 	lds	r20, 0x079F
    4680:	50 91 a0 07 	lds	r21, 0x07A0
    4684:	80 91 6b 05 	lds	r24, 0x056B
    4688:	90 91 6c 05 	lds	r25, 0x056C
    468c:	48 0f       	add	r20, r24
    468e:	59 1f       	adc	r21, r25
    4690:	50 93 a0 07 	sts	0x07A0, r21
    4694:	40 93 9f 07 	sts	0x079F, r20
		Config.gyroZero[PITCH] 	+= gyroADC[PITCH];	
    4698:	20 91 a1 07 	lds	r18, 0x07A1
    469c:	30 91 a2 07 	lds	r19, 0x07A2
    46a0:	80 91 6d 05 	lds	r24, 0x056D
    46a4:	90 91 6e 05 	lds	r25, 0x056E
    46a8:	28 0f       	add	r18, r24
    46aa:	39 1f       	adc	r19, r25
    46ac:	30 93 a2 07 	sts	0x07A2, r19
    46b0:	20 93 a1 07 	sts	0x07A1, r18
		Config.gyroZero[YAW] 	+= gyroADC[YAW];
    46b4:	80 91 a3 07 	lds	r24, 0x07A3
    46b8:	90 91 a4 07 	lds	r25, 0x07A4
    46bc:	60 91 6f 05 	lds	r22, 0x056F
    46c0:	70 91 70 05 	lds	r23, 0x0570
    46c4:	86 0f       	add	r24, r22
    46c6:	97 1f       	adc	r25, r23
    46c8:	90 93 a4 07 	sts	0x07A4, r25
    46cc:	80 93 a3 07 	sts	0x07A3, r24
    46d0:	c1 50       	subi	r28, 0x01	; 1

	// Clear gyro zeros
	memset(&Config.gyroZero[ROLL],0,(sizeof(int16_t) * NUMBEROFAXIS));

	// Calculate average over 32 reads
	for (i=0; i<32; i++)
    46d2:	91 f6       	brne	.-92     	; 0x4678 <CalibrateGyrosFast+0x12>
	}

	// Average readings for all axis
	for (i=0; i<NUMBEROFAXIS; i++)
	{
		Config.gyroZero[i] 	= (Config.gyroZero[i] >> 5);	// Divide by 32	
    46d4:	e5 e0       	ldi	r30, 0x05	; 5
    46d6:	55 95       	asr	r21
    46d8:	47 95       	ror	r20
    46da:	ea 95       	dec	r30
    46dc:	e1 f7       	brne	.-8      	; 0x46d6 <CalibrateGyrosFast+0x70>
    46de:	50 93 a0 07 	sts	0x07A0, r21
    46e2:	40 93 9f 07 	sts	0x079F, r20
    46e6:	f5 e0       	ldi	r31, 0x05	; 5
    46e8:	35 95       	asr	r19
    46ea:	27 95       	ror	r18
    46ec:	fa 95       	dec	r31
    46ee:	e1 f7       	brne	.-8      	; 0x46e8 <CalibrateGyrosFast+0x82>
    46f0:	30 93 a2 07 	sts	0x07A2, r19
    46f4:	20 93 a1 07 	sts	0x07A1, r18
    46f8:	a5 e0       	ldi	r26, 0x05	; 5
    46fa:	95 95       	asr	r25
    46fc:	87 95       	ror	r24
    46fe:	aa 95       	dec	r26
    4700:	e1 f7       	brne	.-8      	; 0x46fa <CalibrateGyrosFast+0x94>
    4702:	90 93 a4 07 	sts	0x07A4, r25
    4706:	80 93 a3 07 	sts	0x07A3, r24
	}

	Save_Config_to_EEPROM();
}
    470a:	cf 91       	pop	r28
	for (i=0; i<NUMBEROFAXIS; i++)
	{
		Config.gyroZero[i] 	= (Config.gyroZero[i] >> 5);	// Divide by 32	
	}

	Save_Config_to_EEPROM();
    470c:	0c 94 93 16 	jmp	0x2d26	; 0x2d26 <Save_Config_to_EEPROM>

00004710 <CalibrateGyrosSlow>:
}

bool CalibrateGyrosSlow(void)
{
    4710:	2f 92       	push	r2
    4712:	3f 92       	push	r3
    4714:	4f 92       	push	r4
    4716:	5f 92       	push	r5
    4718:	6f 92       	push	r6
    471a:	7f 92       	push	r7
    471c:	8f 92       	push	r8
    471e:	9f 92       	push	r9
    4720:	af 92       	push	r10
    4722:	bf 92       	push	r11
    4724:	cf 92       	push	r12
    4726:	df 92       	push	r13
    4728:	ef 92       	push	r14
    472a:	ff 92       	push	r15
    472c:	0f 93       	push	r16
    472e:	1f 93       	push	r17
    4730:	cf 93       	push	r28
    4732:	df 93       	push	r29
    4734:	cd b7       	in	r28, 0x3d	; 61
    4736:	de b7       	in	r29, 0x3e	; 62
    4738:	65 97       	sbiw	r28, 0x15	; 21
    473a:	0f b6       	in	r0, 0x3f	; 63
    473c:	f8 94       	cli
    473e:	de bf       	out	0x3e, r29	; 62
    4740:	0f be       	out	0x3f, r0	; 63
    4742:	cd bf       	out	0x3d, r28	; 61
	float 		GyroSmooth[NUMBEROFAXIS];
	int16_t		GyroOld[NUMBEROFAXIS] = {0,0,0};
    4744:	1e 86       	std	Y+14, r1	; 0x0e
    4746:	1d 86       	std	Y+13, r1	; 0x0d
    4748:	18 8a       	std	Y+16, r1	; 0x10
    474a:	1f 86       	std	Y+15, r1	; 0x0f
    474c:	1a 8a       	std	Y+18, r1	; 0x12
    474e:	19 8a       	std	Y+17, r1	; 0x11
	uint8_t		Gyro_TCNT2 = 0;
	bool		Gyros_Stable = false;

	// Populate Config.gyroZero[] with ballpark figures
	// This makes slow calibrate on much faster
	CalibrateGyrosFast();	
    4750:	0e 94 33 23 	call	0x4666	; 0x4666 <CalibrateGyrosFast>
	
	// Optimise starting point for each board
	for (axis = 0; axis < NUMBEROFAXIS; axis++)
	{
		GyroSmooth[axis] = Config.gyroZero[axis];			
    4754:	60 91 9f 07 	lds	r22, 0x079F
    4758:	70 91 a0 07 	lds	r23, 0x07A0
    475c:	88 27       	eor	r24, r24
    475e:	77 fd       	sbrc	r23, 7
    4760:	80 95       	com	r24
    4762:	98 2f       	mov	r25, r24
    4764:	0e 94 30 47 	call	0x8e60	; 0x8e60 <__floatsisf>
    4768:	69 83       	std	Y+1, r22	; 0x01
    476a:	7a 83       	std	Y+2, r23	; 0x02
    476c:	8b 83       	std	Y+3, r24	; 0x03
    476e:	9c 83       	std	Y+4, r25	; 0x04
    4770:	60 91 a1 07 	lds	r22, 0x07A1
    4774:	70 91 a2 07 	lds	r23, 0x07A2
    4778:	88 27       	eor	r24, r24
    477a:	77 fd       	sbrc	r23, 7
    477c:	80 95       	com	r24
    477e:	98 2f       	mov	r25, r24
    4780:	0e 94 30 47 	call	0x8e60	; 0x8e60 <__floatsisf>
    4784:	6d 83       	std	Y+5, r22	; 0x05
    4786:	7e 83       	std	Y+6, r23	; 0x06
    4788:	8f 83       	std	Y+7, r24	; 0x07
    478a:	98 87       	std	Y+8, r25	; 0x08
    478c:	60 91 a3 07 	lds	r22, 0x07A3
    4790:	70 91 a4 07 	lds	r23, 0x07A4
    4794:	88 27       	eor	r24, r24
    4796:	77 fd       	sbrc	r23, 7
    4798:	80 95       	com	r24
    479a:	98 2f       	mov	r25, r24
    479c:	0e 94 30 47 	call	0x8e60	; 0x8e60 <__floatsisf>
    47a0:	69 87       	std	Y+9, r22	; 0x09
    47a2:	7a 87       	std	Y+10, r23	; 0x0a
    47a4:	8b 87       	std	Y+11, r24	; 0x0b
    47a6:	9c 87       	std	Y+12, r25	; 0x0c
    47a8:	1d 8a       	std	Y+21, r1	; 0x15
    47aa:	1b 8a       	std	Y+19, r1	; 0x13
    47ac:	e1 2c       	mov	r14, r1
    47ae:	f1 2c       	mov	r15, r1
    47b0:	00 e0       	ldi	r16, 0x00	; 0
    47b2:	10 e0       	ldi	r17, 0x00	; 0
	
	// Wait until gyros stable. Timeout after CAL_TIMEOUT seconds
	while (!Gyros_Stable && ((Gyro_seconds <= CAL_TIMEOUT)))
	{
		// Update status timeout
		Gyro_timeout += (uint8_t)(TCNT2 - Gyro_TCNT2);
    47b4:	80 91 b2 00 	lds	r24, 0x00B2
    47b8:	9d 89       	ldd	r25, Y+21	; 0x15
    47ba:	89 1b       	sub	r24, r25
    47bc:	e8 0e       	add	r14, r24
    47be:	f1 1c       	adc	r15, r1
		Gyro_TCNT2 = TCNT2;
    47c0:	e0 91 b2 00 	lds	r30, 0x00B2
    47c4:	ed 8b       	std	Y+21, r30	; 0x15

		// Count elapsed seconds
		if (Gyro_timeout > SECOND_TIMER)
    47c6:	fc e4       	ldi	r31, 0x4C	; 76
    47c8:	ef 16       	cp	r14, r31
    47ca:	ff 06       	cpc	r15, r31
    47cc:	28 f0       	brcs	.+10     	; 0x47d8 <CalibrateGyrosSlow+0xc8>
		{
			Gyro_seconds++;
    47ce:	8b 89       	ldd	r24, Y+19	; 0x13
    47d0:	8f 5f       	subi	r24, 0xFF	; 255
    47d2:	8b 8b       	std	Y+19, r24	; 0x13
			Gyro_timeout = 0;
    47d4:	e1 2c       	mov	r14, r1
    47d6:	f1 2c       	mov	r15, r1
		}

		get_raw_gyros();
    47d8:	0e 94 a1 22 	call	0x4542	; 0x4542 <get_raw_gyros>
    47dc:	fe 01       	movw	r30, r28
    47de:	31 96       	adiw	r30, 0x01	; 1
    47e0:	6f 01       	movw	r12, r30
    47e2:	bb e6       	ldi	r27, 0x6B	; 107
    47e4:	2b 2e       	mov	r2, r27
    47e6:	b5 e0       	ldi	r27, 0x05	; 5
    47e8:	3b 2e       	mov	r3, r27
    47ea:	ce 01       	movw	r24, r28
    47ec:	0d 96       	adiw	r24, 0x0d	; 13
    47ee:	5c 01       	movw	r10, r24

		// Calculate very long rolling average
		for (axis = 0; axis < NUMBEROFAXIS; axis++) 
    47f0:	1c 8a       	std	Y+20, r1	; 0x14
		{
			GyroSmooth[axis] = ((GyroSmooth[axis] * (float)999) + (float)(gyroADC[axis])) / (float)1000;
    47f2:	f1 01       	movw	r30, r2
    47f4:	81 90       	ld	r8, Z+
    47f6:	91 90       	ld	r9, Z+
    47f8:	1f 01       	movw	r2, r30
    47fa:	20 e0       	ldi	r18, 0x00	; 0
    47fc:	30 ec       	ldi	r19, 0xC0	; 192
    47fe:	49 e7       	ldi	r20, 0x79	; 121
    4800:	54 e4       	ldi	r21, 0x44	; 68
    4802:	f6 01       	movw	r30, r12
    4804:	60 81       	ld	r22, Z
    4806:	71 81       	ldd	r23, Z+1	; 0x01
    4808:	82 81       	ldd	r24, Z+2	; 0x02
    480a:	93 81       	ldd	r25, Z+3	; 0x03
    480c:	0e 94 e4 47 	call	0x8fc8	; 0x8fc8 <__mulsf3>
    4810:	2b 01       	movw	r4, r22
    4812:	3c 01       	movw	r6, r24
    4814:	b4 01       	movw	r22, r8
    4816:	88 27       	eor	r24, r24
    4818:	77 fd       	sbrc	r23, 7
    481a:	80 95       	com	r24
    481c:	98 2f       	mov	r25, r24
    481e:	0e 94 30 47 	call	0x8e60	; 0x8e60 <__floatsisf>
    4822:	9b 01       	movw	r18, r22
    4824:	ac 01       	movw	r20, r24
    4826:	c3 01       	movw	r24, r6
    4828:	b2 01       	movw	r22, r4
    482a:	0e 94 2d 46 	call	0x8c5a	; 0x8c5a <__addsf3>
    482e:	20 e0       	ldi	r18, 0x00	; 0
    4830:	30 e0       	ldi	r19, 0x00	; 0
    4832:	4a e7       	ldi	r20, 0x7A	; 122
    4834:	54 e4       	ldi	r21, 0x44	; 68
    4836:	0e 94 95 46 	call	0x8d2a	; 0x8d2a <__divsf3>
    483a:	f6 01       	movw	r30, r12
    483c:	60 83       	st	Z, r22
    483e:	71 83       	std	Z+1, r23	; 0x01
    4840:	82 83       	std	Z+2, r24	; 0x02
    4842:	93 83       	std	Z+3, r25	; 0x03
			
			// See if changing
			if (GyroOld[axis] != (int16_t)GyroSmooth[axis])
    4844:	0e 94 fd 46 	call	0x8dfa	; 0x8dfa <__fixsfsi>
    4848:	f5 01       	movw	r30, r10
    484a:	20 81       	ld	r18, Z
    484c:	31 81       	ldd	r19, Z+1	; 0x01
    484e:	26 17       	cp	r18, r22
    4850:	37 07       	cpc	r19, r23
    4852:	11 f0       	breq	.+4      	; 0x4858 <CalibrateGyrosSlow+0x148>
			{
				Gyros_Stable = false;
				Stable_counter = 0;
    4854:	00 e0       	ldi	r16, 0x00	; 0
    4856:	10 e0       	ldi	r17, 0x00	; 0
			}
		
			// Save old reading
			GyroOld[axis] = (int16_t)GyroSmooth[axis];
    4858:	f5 01       	movw	r30, r10
    485a:	61 93       	st	Z+, r22
    485c:	71 93       	st	Z+, r23
    485e:	5f 01       	movw	r10, r30
		}

		get_raw_gyros();

		// Calculate very long rolling average
		for (axis = 0; axis < NUMBEROFAXIS; axis++) 
    4860:	fc 89       	ldd	r31, Y+20	; 0x14
    4862:	ff 5f       	subi	r31, 0xFF	; 255
    4864:	fc 8b       	std	Y+20, r31	; 0x14
    4866:	84 e0       	ldi	r24, 0x04	; 4
    4868:	c8 0e       	add	r12, r24
    486a:	d1 1c       	adc	r13, r1
    486c:	f3 30       	cpi	r31, 0x03	; 3
    486e:	09 f6       	brne	.-126    	; 0x47f2 <CalibrateGyrosSlow+0xe2>
			// Save old reading
			GyroOld[axis] = (int16_t)GyroSmooth[axis];
		}
		
		// Increment stable counter to measure how long we are still
		Stable_counter++;
    4870:	0f 5f       	subi	r16, 0xFF	; 255
    4872:	1f 4f       	sbci	r17, 0xFF	; 255
		
		// If stable for 5 seconds, do a quick calibrate
		if (Stable_counter > CAL_STABLE_TIME)
    4874:	09 3c       	cpi	r16, 0xC9	; 201
    4876:	11 05       	cpc	r17, r1
    4878:	20 f0       	brcs	.+8      	; 0x4882 <CalibrateGyrosSlow+0x172>
		{
			Gyros_Stable = true;	
			CalibrateGyrosFast();		
    487a:	0e 94 33 23 	call	0x4666	; 0x4666 <CalibrateGyrosFast>
		Stable_counter++;
		
		// If stable for 5 seconds, do a quick calibrate
		if (Stable_counter > CAL_STABLE_TIME)
		{
			Gyros_Stable = true;	
    487e:	81 e0       	ldi	r24, 0x01	; 1
    4880:	01 c0       	rjmp	.+2      	; 0x4884 <CalibrateGyrosSlow+0x174>
    4882:	80 e0       	ldi	r24, 0x00	; 0
    4884:	e7 e8       	ldi	r30, 0x87	; 135
    4886:	f3 e1       	ldi	r31, 0x13	; 19
    4888:	31 97       	sbiw	r30, 0x01	; 1
    488a:	f1 f7       	brne	.-4      	; 0x4888 <CalibrateGyrosSlow+0x178>
    488c:	00 c0       	rjmp	.+0      	; 0x488e <CalibrateGyrosSlow+0x17e>
    488e:	00 00       	nop
	{
		GyroSmooth[axis] = Config.gyroZero[axis];			
	}
	
	// Wait until gyros stable. Timeout after CAL_TIMEOUT seconds
	while (!Gyros_Stable && ((Gyro_seconds <= CAL_TIMEOUT)))
    4890:	81 11       	cpse	r24, r1
    4892:	04 c0       	rjmp	.+8      	; 0x489c <CalibrateGyrosSlow+0x18c>
    4894:	fb 89       	ldd	r31, Y+19	; 0x13
    4896:	f6 30       	cpi	r31, 0x06	; 6
    4898:	08 f4       	brcc	.+2      	; 0x489c <CalibrateGyrosSlow+0x18c>
    489a:	8c cf       	rjmp	.-232    	; 0x47b4 <CalibrateGyrosSlow+0xa4>
		// Otherwise the original saved values are used
	}
	
	// Return success or failure
	return(Gyros_Stable);
}
    489c:	65 96       	adiw	r28, 0x15	; 21
    489e:	0f b6       	in	r0, 0x3f	; 63
    48a0:	f8 94       	cli
    48a2:	de bf       	out	0x3e, r29	; 62
    48a4:	0f be       	out	0x3f, r0	; 63
    48a6:	cd bf       	out	0x3d, r28	; 61
    48a8:	df 91       	pop	r29
    48aa:	cf 91       	pop	r28
    48ac:	1f 91       	pop	r17
    48ae:	0f 91       	pop	r16
    48b0:	ff 90       	pop	r15
    48b2:	ef 90       	pop	r14
    48b4:	df 90       	pop	r13
    48b6:	cf 90       	pop	r12
    48b8:	bf 90       	pop	r11
    48ba:	af 90       	pop	r10
    48bc:	9f 90       	pop	r9
    48be:	8f 90       	pop	r8
    48c0:	7f 90       	pop	r7
    48c2:	6f 90       	pop	r6
    48c4:	5f 90       	pop	r5
    48c6:	4f 90       	pop	r4
    48c8:	3f 90       	pop	r3
    48ca:	2f 90       	pop	r2
    48cc:	08 95       	ret

000048ce <init_i2c_gyros>:
//***************************************************************

void init_i2c_gyros(void)
{
	// First, configure the MPU6050
	writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_PWR_MGMT_1, 0x01); 			// Gyro X clock, awake
    48ce:	41 e0       	ldi	r20, 0x01	; 1
    48d0:	6b e6       	ldi	r22, 0x6B	; 107
    48d2:	80 ed       	ldi	r24, 0xD0	; 208
    48d4:	0e 94 7e 24 	call	0x48fc	; 0x48fc <writeI2Cbyte>
	
	// Make INT pin open-drain so that we can connect it straight to the MPU
	writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_INT_PIN_CFG, 0x40);			// INT output is open-drain
    48d8:	40 e4       	ldi	r20, 0x40	; 64
    48da:	67 e3       	ldi	r22, 0x37	; 55
    48dc:	80 ed       	ldi	r24, 0xD0	; 208
    48de:	0e 94 7e 24 	call	0x48fc	; 0x48fc <writeI2Cbyte>
	
	// MPU6050's internal LPF. Values are 0x06 = 5Hz, (5)10Hz, (4)21Hz, (3)44Hz, (2)94Hz, (1)184Hz LPF, (0)260Hz
	// Software's values are 0 to 6 = 5Hz to 260Hz, so numbering is reversed here.
	writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_CONFIG, (6 - Config.MPU6050_LPF));
    48e2:	46 e0       	ldi	r20, 0x06	; 6
    48e4:	80 91 36 06 	lds	r24, 0x0636
    48e8:	48 1b       	sub	r20, r24
    48ea:	6a e1       	ldi	r22, 0x1A	; 26
    48ec:	80 ed       	ldi	r24, 0xD0	; 208
    48ee:	0e 94 7e 24 	call	0x48fc	; 0x48fc <writeI2Cbyte>
	
	// Now configure gyros
	writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_GYRO_CONFIG, GYROFS2000DEG);	// 2000 deg/sec
    48f2:	48 e1       	ldi	r20, 0x18	; 24
    48f4:	6b e1       	ldi	r22, 0x1B	; 27
    48f6:	80 ed       	ldi	r24, 0xD0	; 208
    48f8:	0c 94 7e 24 	jmp	0x48fc	; 0x48fc <writeI2Cbyte>

000048fc <writeI2Cbyte>:
//************************************************************
// Code
//************************************************************

void writeI2Cbyte(uint8_t address, uint8_t location, uint8_t value)
{
    48fc:	cf 93       	push	r28
    48fe:	df 93       	push	r29
    4900:	00 d0       	rcall	.+0      	; 0x4902 <writeI2Cbyte+0x6>
    4902:	cd b7       	in	r28, 0x3d	; 61
    4904:	de b7       	in	r29, 0x3e	; 62
    i2c_start_wait(address+I2C_WRITE);				// Set up device address 
    4906:	4a 83       	std	Y+2, r20	; 0x02
    4908:	69 83       	std	Y+1, r22	; 0x01
    490a:	0e 94 0b 45 	call	0x8a16	; 0x8a16 <i2c_start_wait>
    i2c_write(location);							// Set up register address 
    490e:	69 81       	ldd	r22, Y+1	; 0x01
    4910:	86 2f       	mov	r24, r22
    4912:	0e 94 5b 45 	call	0x8ab6	; 0x8ab6 <i2c_write>
    i2c_write(value); 								// Write byte
    4916:	4a 81       	ldd	r20, Y+2	; 0x02
    4918:	84 2f       	mov	r24, r20
    491a:	0e 94 5b 45 	call	0x8ab6	; 0x8ab6 <i2c_write>
    i2c_stop();
}
    491e:	0f 90       	pop	r0
    4920:	0f 90       	pop	r0
    4922:	df 91       	pop	r29
    4924:	cf 91       	pop	r28
void writeI2Cbyte(uint8_t address, uint8_t location, uint8_t value)
{
    i2c_start_wait(address+I2C_WRITE);				// Set up device address 
    i2c_write(location);							// Set up register address 
    i2c_write(value); 								// Write byte
    i2c_stop();
    4926:	0c 94 4c 45 	jmp	0x8a98	; 0x8a98 <i2c_stop>

0000492a <readI2CbyteArray>:
}

void readI2CbyteArray(uint8_t address, uint8_t location, uint8_t *array,uint8_t size)
{
    492a:	cf 92       	push	r12
    492c:	df 92       	push	r13
    492e:	ef 92       	push	r14
    4930:	ff 92       	push	r15
    4932:	0f 93       	push	r16
    4934:	1f 93       	push	r17
    4936:	cf 93       	push	r28
    4938:	df 93       	push	r29
    493a:	00 d0       	rcall	.+0      	; 0x493c <readI2CbyteArray+0x12>
    493c:	1f 92       	push	r1
    493e:	cd b7       	in	r28, 0x3d	; 61
    4940:	de b7       	in	r29, 0x3e	; 62
    4942:	18 2f       	mov	r17, r24
    4944:	e2 2e       	mov	r14, r18
	int i=0;

    i2c_start_wait(address+I2C_WRITE);
    4946:	4a 83       	std	Y+2, r20	; 0x02
    4948:	5b 83       	std	Y+3, r21	; 0x03
    494a:	69 83       	std	Y+1, r22	; 0x01
    494c:	0e 94 0b 45 	call	0x8a16	; 0x8a16 <i2c_start_wait>
    i2c_write(location);							// Set up register address 
    4950:	69 81       	ldd	r22, Y+1	; 0x01
    4952:	86 2f       	mov	r24, r22
    4954:	0e 94 5b 45 	call	0x8ab6	; 0x8ab6 <i2c_write>
    i2c_rep_start(address+I2C_READ);
    4958:	81 e0       	ldi	r24, 0x01	; 1
    495a:	81 0f       	add	r24, r17
    495c:	0e 94 4a 45 	call	0x8a94	; 0x8a94 <i2c_rep_start>
    4960:	4a 81       	ldd	r20, Y+2	; 0x02
    4962:	c4 2e       	mov	r12, r20
    4964:	5b 81       	ldd	r21, Y+3	; 0x03
    4966:	d5 2e       	mov	r13, r21
    i2c_stop();
}

void readI2CbyteArray(uint8_t address, uint8_t location, uint8_t *array,uint8_t size)
{
	int i=0;
    4968:	00 e0       	ldi	r16, 0x00	; 0
    496a:	10 e0       	ldi	r17, 0x00	; 0

    i2c_start_wait(address+I2C_WRITE);
    i2c_write(location);							// Set up register address 
    i2c_rep_start(address+I2C_READ);

	while (i < size)
    496c:	f1 2c       	mov	r15, r1
    496e:	0e 15       	cp	r16, r14
    4970:	1f 05       	cpc	r17, r15
    4972:	84 f4       	brge	.+32     	; 0x4994 <readI2CbyteArray+0x6a>
	{
		if ((i+1)!=size)
    4974:	0f 5f       	subi	r16, 0xFF	; 255
    4976:	1f 4f       	sbci	r17, 0xFF	; 255
    4978:	0e 15       	cp	r16, r14
    497a:	1f 05       	cpc	r17, r15
    497c:	19 f0       	breq	.+6      	; 0x4984 <readI2CbyteArray+0x5a>
		{
			array[i]=i2c_readAck();
    497e:	0e 94 7b 45 	call	0x8af6	; 0x8af6 <i2c_readAck>
    4982:	02 c0       	rjmp	.+4      	; 0x4988 <readI2CbyteArray+0x5e>
		}
		else
		{
			array[i]=i2c_readNak(); 				// Read without ACK on last byte
    4984:	0e 94 94 45 	call	0x8b28	; 0x8b28 <i2c_readNak>
    4988:	f6 01       	movw	r30, r12
    498a:	80 83       	st	Z, r24
    498c:	ff ef       	ldi	r31, 0xFF	; 255
    498e:	cf 1a       	sub	r12, r31
    4990:	df 0a       	sbc	r13, r31
    4992:	ed cf       	rjmp	.-38     	; 0x496e <readI2CbyteArray+0x44>
		}
		i++;
	}

    i2c_stop();
}
    4994:	0f 90       	pop	r0
    4996:	0f 90       	pop	r0
    4998:	0f 90       	pop	r0
    499a:	df 91       	pop	r29
    499c:	cf 91       	pop	r28
    499e:	1f 91       	pop	r17
    49a0:	0f 91       	pop	r16
    49a2:	ff 90       	pop	r15
    49a4:	ef 90       	pop	r14
    49a6:	df 90       	pop	r13
    49a8:	cf 90       	pop	r12
			array[i]=i2c_readNak(); 				// Read without ACK on last byte
		}
		i++;
	}

    i2c_stop();
    49aa:	0c 94 4c 45 	jmp	0x8a98	; 0x8a98 <i2c_stop>

000049ae <RotateVector>:
	VectorX = VectorNewA;
	VectorY = VectorNewB;
}

void RotateVector(float angle)
{
    49ae:	4f 92       	push	r4
    49b0:	5f 92       	push	r5
    49b2:	6f 92       	push	r6
    49b4:	7f 92       	push	r7
    49b6:	8f 92       	push	r8
    49b8:	9f 92       	push	r9
    49ba:	af 92       	push	r10
    49bc:	bf 92       	push	r11
    49be:	cf 92       	push	r12
    49c0:	df 92       	push	r13
    49c2:	ef 92       	push	r14
    49c4:	ff 92       	push	r15
    49c6:	cf 93       	push	r28
    49c8:	df 93       	push	r29
    49ca:	cd b7       	in	r28, 0x3d	; 61
    49cc:	de b7       	in	r29, 0x3e	; 62
    49ce:	28 97       	sbiw	r28, 0x08	; 8
    49d0:	0f b6       	in	r0, 0x3f	; 63
    49d2:	f8 94       	cli
    49d4:	de bf       	out	0x3e, r29	; 62
    49d6:	0f be       	out	0x3f, r0	; 63
    49d8:	cd bf       	out	0x3d, r28	; 61
    49da:	6b 01       	movw	r12, r22
    49dc:	7c 01       	movw	r14, r24
	VectorNewA = VectorA * small_cos(angle) - VectorB * small_sine(angle);
    49de:	80 90 a1 05 	lds	r8, 0x05A1
    49e2:	90 90 a2 05 	lds	r9, 0x05A2
    49e6:	a0 90 a3 05 	lds	r10, 0x05A3
    49ea:	b0 90 a4 05 	lds	r11, 0x05A4
float small_cos(float angle)
{
	// cos(angle) = (1 - (angle^2 / 2))
	float temp;
	
	temp = (angle * angle) / 2;
    49ee:	9b 01       	movw	r18, r22
    49f0:	ac 01       	movw	r20, r24
    49f2:	0e 94 e4 47 	call	0x8fc8	; 0x8fc8 <__mulsf3>
    49f6:	20 e0       	ldi	r18, 0x00	; 0
    49f8:	30 e0       	ldi	r19, 0x00	; 0
    49fa:	40 e0       	ldi	r20, 0x00	; 0
    49fc:	5f e3       	ldi	r21, 0x3F	; 63
    49fe:	0e 94 e4 47 	call	0x8fc8	; 0x8fc8 <__mulsf3>
    4a02:	9b 01       	movw	r18, r22
    4a04:	ac 01       	movw	r20, r24
	temp = 1 - temp;
    4a06:	60 e0       	ldi	r22, 0x00	; 0
    4a08:	70 e0       	ldi	r23, 0x00	; 0
    4a0a:	80 e8       	ldi	r24, 0x80	; 128
    4a0c:	9f e3       	ldi	r25, 0x3F	; 63
    4a0e:	0e 94 2c 46 	call	0x8c58	; 0x8c58 <__subsf3>
    4a12:	69 83       	std	Y+1, r22	; 0x01
    4a14:	7a 83       	std	Y+2, r23	; 0x02
    4a16:	8b 83       	std	Y+3, r24	; 0x03
    4a18:	9c 83       	std	Y+4, r25	; 0x04
	VectorY = VectorNewB;
}

void RotateVector(float angle)
{
	VectorNewA = VectorA * small_cos(angle) - VectorB * small_sine(angle);
    4a1a:	40 90 a5 05 	lds	r4, 0x05A5
    4a1e:	50 90 a6 05 	lds	r5, 0x05A6
    4a22:	60 90 a7 05 	lds	r6, 0x05A7
    4a26:	70 90 a8 05 	lds	r7, 0x05A8
    4a2a:	9b 01       	movw	r18, r22
    4a2c:	ac 01       	movw	r20, r24
    4a2e:	c5 01       	movw	r24, r10
    4a30:	b4 01       	movw	r22, r8
    4a32:	0e 94 e4 47 	call	0x8fc8	; 0x8fc8 <__mulsf3>
    4a36:	6d 83       	std	Y+5, r22	; 0x05
    4a38:	7e 83       	std	Y+6, r23	; 0x06
    4a3a:	8f 83       	std	Y+7, r24	; 0x07
    4a3c:	98 87       	std	Y+8, r25	; 0x08
    4a3e:	a7 01       	movw	r20, r14
    4a40:	96 01       	movw	r18, r12
    4a42:	c3 01       	movw	r24, r6
    4a44:	b2 01       	movw	r22, r4
    4a46:	0e 94 e4 47 	call	0x8fc8	; 0x8fc8 <__mulsf3>
    4a4a:	9b 01       	movw	r18, r22
    4a4c:	ac 01       	movw	r20, r24
    4a4e:	6d 81       	ldd	r22, Y+5	; 0x05
    4a50:	7e 81       	ldd	r23, Y+6	; 0x06
    4a52:	8f 81       	ldd	r24, Y+7	; 0x07
    4a54:	98 85       	ldd	r25, Y+8	; 0x08
    4a56:	0e 94 2c 46 	call	0x8c58	; 0x8c58 <__subsf3>
    4a5a:	60 93 8d 05 	sts	0x058D, r22
    4a5e:	70 93 8e 05 	sts	0x058E, r23
    4a62:	80 93 8f 05 	sts	0x058F, r24
    4a66:	90 93 90 05 	sts	0x0590, r25
	VectorNewB = VectorA * small_sine(angle) + VectorB * small_cos(angle);
    4a6a:	a7 01       	movw	r20, r14
    4a6c:	96 01       	movw	r18, r12
    4a6e:	c5 01       	movw	r24, r10
    4a70:	b4 01       	movw	r22, r8
    4a72:	0e 94 e4 47 	call	0x8fc8	; 0x8fc8 <__mulsf3>
    4a76:	6b 01       	movw	r12, r22
    4a78:	7c 01       	movw	r14, r24
    4a7a:	29 81       	ldd	r18, Y+1	; 0x01
    4a7c:	3a 81       	ldd	r19, Y+2	; 0x02
    4a7e:	4b 81       	ldd	r20, Y+3	; 0x03
    4a80:	5c 81       	ldd	r21, Y+4	; 0x04
    4a82:	c3 01       	movw	r24, r6
    4a84:	b2 01       	movw	r22, r4
    4a86:	0e 94 e4 47 	call	0x8fc8	; 0x8fc8 <__mulsf3>
    4a8a:	9b 01       	movw	r18, r22
    4a8c:	ac 01       	movw	r20, r24
    4a8e:	c7 01       	movw	r24, r14
    4a90:	b6 01       	movw	r22, r12
    4a92:	0e 94 2d 46 	call	0x8c5a	; 0x8c5a <__addsf3>
    4a96:	60 93 71 05 	sts	0x0571, r22
    4a9a:	70 93 72 05 	sts	0x0572, r23
    4a9e:	80 93 73 05 	sts	0x0573, r24
    4aa2:	90 93 74 05 	sts	0x0574, r25
}
    4aa6:	28 96       	adiw	r28, 0x08	; 8
    4aa8:	0f b6       	in	r0, 0x3f	; 63
    4aaa:	f8 94       	cli
    4aac:	de bf       	out	0x3e, r29	; 62
    4aae:	0f be       	out	0x3f, r0	; 63
    4ab0:	cd bf       	out	0x3d, r28	; 61
    4ab2:	df 91       	pop	r29
    4ab4:	cf 91       	pop	r28
    4ab6:	ff 90       	pop	r15
    4ab8:	ef 90       	pop	r14
    4aba:	df 90       	pop	r13
    4abc:	cf 90       	pop	r12
    4abe:	bf 90       	pop	r11
    4ac0:	af 90       	pop	r10
    4ac2:	9f 90       	pop	r9
    4ac4:	8f 90       	pop	r8
    4ac6:	7f 90       	pop	r7
    4ac8:	6f 90       	pop	r6
    4aca:	5f 90       	pop	r5
    4acc:	4f 90       	pop	r4
    4ace:	08 95       	ret

00004ad0 <thetascale>:

float thetascale(float gyro, float intervalf)
{
    4ad0:	cf 92       	push	r12
    4ad2:	df 92       	push	r13
    4ad4:	ef 92       	push	r14
    4ad6:	ff 92       	push	r15
    4ad8:	69 01       	movw	r12, r18
    4ada:	7a 01       	movw	r14, r20
	
	// intervalf = time in seconds since last measurement
	// GYROSENSRADIANS = conversion from raw gyro data to rad/s
	// theta = actual number of radians moved

	theta = (gyro * GYROSENSRADIANS * intervalf);
    4adc:	25 ef       	ldi	r18, 0xF5	; 245
    4ade:	31 ea       	ldi	r19, 0xA1	; 161
    4ae0:	4b e8       	ldi	r20, 0x8B	; 139
    4ae2:	5c e3       	ldi	r21, 0x3C	; 60
    4ae4:	0e 94 e4 47 	call	0x8fc8	; 0x8fc8 <__mulsf3>
    4ae8:	a7 01       	movw	r20, r14
    4aea:	96 01       	movw	r18, r12
    4aec:	0e 94 e4 47 	call	0x8fc8	; 0x8fc8 <__mulsf3>
    4af0:	6b 01       	movw	r12, r22
    4af2:	7c 01       	movw	r14, r24
	
	// The sin() and cos() functions don't appreciate large 
	// input values. Limit the input values to +/-15 degrees. 
	
	if (theta > maxdeltaangle)
    4af4:	26 ea       	ldi	r18, 0xA6	; 166
    4af6:	3a e0       	ldi	r19, 0x0A	; 10
    4af8:	46 e8       	ldi	r20, 0x86	; 134
    4afa:	5e e3       	ldi	r21, 0x3E	; 62
    4afc:	0e 94 e0 47 	call	0x8fc0	; 0x8fc0 <__gesf2>
    4b00:	18 16       	cp	r1, r24
    4b02:	9c f0       	brlt	.+38     	; 0x4b2a <thetascale+0x5a>
	{
		theta = maxdeltaangle;
	}
	
	if (theta < -maxdeltaangle)
    4b04:	26 ea       	ldi	r18, 0xA6	; 166
    4b06:	3a e0       	ldi	r19, 0x0A	; 10
    4b08:	46 e8       	ldi	r20, 0x86	; 134
    4b0a:	5e eb       	ldi	r21, 0xBE	; 190
    4b0c:	c7 01       	movw	r24, r14
    4b0e:	b6 01       	movw	r22, r12
    4b10:	0e 94 91 46 	call	0x8d22	; 0x8d22 <__cmpsf2>
    4b14:	87 ff       	sbrs	r24, 7
    4b16:	11 c0       	rjmp	.+34     	; 0x4b3a <thetascale+0x6a>
	{
		theta = -maxdeltaangle;
    4b18:	86 ea       	ldi	r24, 0xA6	; 166
    4b1a:	c8 2e       	mov	r12, r24
    4b1c:	8a e0       	ldi	r24, 0x0A	; 10
    4b1e:	d8 2e       	mov	r13, r24
    4b20:	86 e8       	ldi	r24, 0x86	; 134
    4b22:	e8 2e       	mov	r14, r24
    4b24:	8e eb       	ldi	r24, 0xBE	; 190
    4b26:	f8 2e       	mov	r15, r24
    4b28:	08 c0       	rjmp	.+16     	; 0x4b3a <thetascale+0x6a>
	// The sin() and cos() functions don't appreciate large 
	// input values. Limit the input values to +/-15 degrees. 
	
	if (theta > maxdeltaangle)
	{
		theta = maxdeltaangle;
    4b2a:	96 ea       	ldi	r25, 0xA6	; 166
    4b2c:	c9 2e       	mov	r12, r25
    4b2e:	9a e0       	ldi	r25, 0x0A	; 10
    4b30:	d9 2e       	mov	r13, r25
    4b32:	96 e8       	ldi	r25, 0x86	; 134
    4b34:	e9 2e       	mov	r14, r25
    4b36:	9e e3       	ldi	r25, 0x3E	; 62
    4b38:	f9 2e       	mov	r15, r25
	{
		theta = -maxdeltaangle;
	}
	
	return theta;
}
    4b3a:	c7 01       	movw	r24, r14
    4b3c:	b6 01       	movw	r22, r12
    4b3e:	ff 90       	pop	r15
    4b40:	ef 90       	pop	r14
    4b42:	df 90       	pop	r13
    4b44:	cf 90       	pop	r12
    4b46:	08 95       	ret

00004b48 <Rotate3dVector>:
	angle[ROLL] = (int16_t)(EulerAngleRoll * -100);
	angle[PITCH] = (int16_t)(EulerAnglePitch * -100);
}

void Rotate3dVector(float intervalf)
{
    4b48:	8f 92       	push	r8
    4b4a:	9f 92       	push	r9
    4b4c:	af 92       	push	r10
    4b4e:	bf 92       	push	r11
    4b50:	cf 92       	push	r12
    4b52:	df 92       	push	r13
    4b54:	ef 92       	push	r14
    4b56:	ff 92       	push	r15
    4b58:	0f 93       	push	r16
    4b5a:	1f 93       	push	r17
    4b5c:	6b 01       	movw	r12, r22
    4b5e:	7c 01       	movw	r14, r24
	float theta;
	
	// Rotate around X axis (pitch)
	theta = thetascale(GyroPitchVC, intervalf);
    4b60:	60 91 81 05 	lds	r22, 0x0581
    4b64:	70 91 82 05 	lds	r23, 0x0582
    4b68:	80 91 83 05 	lds	r24, 0x0583
    4b6c:	90 91 84 05 	lds	r25, 0x0584
    4b70:	a7 01       	movw	r20, r14
    4b72:	96 01       	movw	r18, r12
    4b74:	0e 94 68 25 	call	0x4ad0	; 0x4ad0 <thetascale>
	VectorA = VectorY;
    4b78:	00 91 24 05 	lds	r16, 0x0524
    4b7c:	10 91 25 05 	lds	r17, 0x0525
    4b80:	20 91 26 05 	lds	r18, 0x0526
    4b84:	30 91 27 05 	lds	r19, 0x0527
    4b88:	00 93 a1 05 	sts	0x05A1, r16
    4b8c:	10 93 a2 05 	sts	0x05A2, r17
    4b90:	20 93 a3 05 	sts	0x05A3, r18
    4b94:	30 93 a4 05 	sts	0x05A4, r19
	VectorB = VectorZ;
    4b98:	00 91 00 05 	lds	r16, 0x0500
    4b9c:	10 91 01 05 	lds	r17, 0x0501
    4ba0:	20 91 02 05 	lds	r18, 0x0502
    4ba4:	30 91 03 05 	lds	r19, 0x0503
    4ba8:	00 93 a5 05 	sts	0x05A5, r16
    4bac:	10 93 a6 05 	sts	0x05A6, r17
    4bb0:	20 93 a7 05 	sts	0x05A7, r18
    4bb4:	30 93 a8 05 	sts	0x05A8, r19
	RotateVector(theta);
    4bb8:	0e 94 d7 24 	call	0x49ae	; 0x49ae <RotateVector>
	VectorY = VectorNewA;
    4bbc:	80 91 8d 05 	lds	r24, 0x058D
    4bc0:	90 91 8e 05 	lds	r25, 0x058E
    4bc4:	a0 91 8f 05 	lds	r26, 0x058F
    4bc8:	b0 91 90 05 	lds	r27, 0x0590
    4bcc:	80 93 24 05 	sts	0x0524, r24
    4bd0:	90 93 25 05 	sts	0x0525, r25
    4bd4:	a0 93 26 05 	sts	0x0526, r26
    4bd8:	b0 93 27 05 	sts	0x0527, r27
	VectorZ = VectorNewB;
    4bdc:	80 90 71 05 	lds	r8, 0x0571
    4be0:	90 90 72 05 	lds	r9, 0x0572
    4be4:	a0 90 73 05 	lds	r10, 0x0573
    4be8:	b0 90 74 05 	lds	r11, 0x0574
    4bec:	80 92 00 05 	sts	0x0500, r8
    4bf0:	90 92 01 05 	sts	0x0501, r9
    4bf4:	a0 92 02 05 	sts	0x0502, r10
    4bf8:	b0 92 03 05 	sts	0x0503, r11

	// Rotate around Y axis (roll)
	theta = thetascale (GyroRollVC, intervalf);
    4bfc:	60 91 85 05 	lds	r22, 0x0585
    4c00:	70 91 86 05 	lds	r23, 0x0586
    4c04:	80 91 87 05 	lds	r24, 0x0587
    4c08:	90 91 88 05 	lds	r25, 0x0588
    4c0c:	a7 01       	movw	r20, r14
    4c0e:	96 01       	movw	r18, r12
    4c10:	0e 94 68 25 	call	0x4ad0	; 0x4ad0 <thetascale>
	VectorA = VectorX;
    4c14:	00 91 28 05 	lds	r16, 0x0528
    4c18:	10 91 29 05 	lds	r17, 0x0529
    4c1c:	20 91 2a 05 	lds	r18, 0x052A
    4c20:	30 91 2b 05 	lds	r19, 0x052B
    4c24:	00 93 a1 05 	sts	0x05A1, r16
    4c28:	10 93 a2 05 	sts	0x05A2, r17
    4c2c:	20 93 a3 05 	sts	0x05A3, r18
    4c30:	30 93 a4 05 	sts	0x05A4, r19
	VectorB = VectorZ;
    4c34:	80 92 a5 05 	sts	0x05A5, r8
    4c38:	90 92 a6 05 	sts	0x05A6, r9
    4c3c:	a0 92 a7 05 	sts	0x05A7, r10
    4c40:	b0 92 a8 05 	sts	0x05A8, r11
	RotateVector(theta);
    4c44:	0e 94 d7 24 	call	0x49ae	; 0x49ae <RotateVector>
	VectorX = VectorNewA;
    4c48:	80 90 8d 05 	lds	r8, 0x058D
    4c4c:	90 90 8e 05 	lds	r9, 0x058E
    4c50:	a0 90 8f 05 	lds	r10, 0x058F
    4c54:	b0 90 90 05 	lds	r11, 0x0590
    4c58:	80 92 28 05 	sts	0x0528, r8
    4c5c:	90 92 29 05 	sts	0x0529, r9
    4c60:	a0 92 2a 05 	sts	0x052A, r10
    4c64:	b0 92 2b 05 	sts	0x052B, r11
	VectorZ = VectorNewB;
    4c68:	80 91 71 05 	lds	r24, 0x0571
    4c6c:	90 91 72 05 	lds	r25, 0x0572
    4c70:	a0 91 73 05 	lds	r26, 0x0573
    4c74:	b0 91 74 05 	lds	r27, 0x0574
    4c78:	80 93 00 05 	sts	0x0500, r24
    4c7c:	90 93 01 05 	sts	0x0501, r25
    4c80:	a0 93 02 05 	sts	0x0502, r26
    4c84:	b0 93 03 05 	sts	0x0503, r27

	// Rotate around Z axis (yaw)
	theta = thetascale(gyroADC[YAW], intervalf);
    4c88:	60 91 6f 05 	lds	r22, 0x056F
    4c8c:	70 91 70 05 	lds	r23, 0x0570
    4c90:	88 27       	eor	r24, r24
    4c92:	77 fd       	sbrc	r23, 7
    4c94:	80 95       	com	r24
    4c96:	98 2f       	mov	r25, r24
    4c98:	0e 94 30 47 	call	0x8e60	; 0x8e60 <__floatsisf>
    4c9c:	a7 01       	movw	r20, r14
    4c9e:	96 01       	movw	r18, r12
    4ca0:	0e 94 68 25 	call	0x4ad0	; 0x4ad0 <thetascale>
	VectorA = VectorX;
    4ca4:	80 92 a1 05 	sts	0x05A1, r8
    4ca8:	90 92 a2 05 	sts	0x05A2, r9
    4cac:	a0 92 a3 05 	sts	0x05A3, r10
    4cb0:	b0 92 a4 05 	sts	0x05A4, r11
	VectorB = VectorY;
    4cb4:	c0 90 24 05 	lds	r12, 0x0524
    4cb8:	d0 90 25 05 	lds	r13, 0x0525
    4cbc:	e0 90 26 05 	lds	r14, 0x0526
    4cc0:	f0 90 27 05 	lds	r15, 0x0527
    4cc4:	c0 92 a5 05 	sts	0x05A5, r12
    4cc8:	d0 92 a6 05 	sts	0x05A6, r13
    4ccc:	e0 92 a7 05 	sts	0x05A7, r14
    4cd0:	f0 92 a8 05 	sts	0x05A8, r15
	RotateVector(theta);
    4cd4:	0e 94 d7 24 	call	0x49ae	; 0x49ae <RotateVector>
	VectorX = VectorNewA;
    4cd8:	80 91 8d 05 	lds	r24, 0x058D
    4cdc:	90 91 8e 05 	lds	r25, 0x058E
    4ce0:	a0 91 8f 05 	lds	r26, 0x058F
    4ce4:	b0 91 90 05 	lds	r27, 0x0590
    4ce8:	80 93 28 05 	sts	0x0528, r24
    4cec:	90 93 29 05 	sts	0x0529, r25
    4cf0:	a0 93 2a 05 	sts	0x052A, r26
    4cf4:	b0 93 2b 05 	sts	0x052B, r27
	VectorY = VectorNewB;
    4cf8:	80 91 71 05 	lds	r24, 0x0571
    4cfc:	90 91 72 05 	lds	r25, 0x0572
    4d00:	a0 91 73 05 	lds	r26, 0x0573
    4d04:	b0 91 74 05 	lds	r27, 0x0574
    4d08:	80 93 24 05 	sts	0x0524, r24
    4d0c:	90 93 25 05 	sts	0x0525, r25
    4d10:	a0 93 26 05 	sts	0x0526, r26
    4d14:	b0 93 27 05 	sts	0x0527, r27
}
    4d18:	1f 91       	pop	r17
    4d1a:	0f 91       	pop	r16
    4d1c:	ff 90       	pop	r15
    4d1e:	ef 90       	pop	r14
    4d20:	df 90       	pop	r13
    4d22:	cf 90       	pop	r12
    4d24:	bf 90       	pop	r11
    4d26:	af 90       	pop	r10
    4d28:	9f 90       	pop	r9
    4d2a:	8f 90       	pop	r8
    4d2c:	08 95       	ret

00004d2e <ext2>:
	EulerAngleRoll = ext2(VectorX);
	EulerAnglePitch = ext2(VectorY);
}

float ext2(float Vector)
{
    4d2e:	cf 92       	push	r12
    4d30:	df 92       	push	r13
    4d32:	ef 92       	push	r14
    4d34:	ff 92       	push	r15
	float temp;
	
	// Rough translation to Euler angles
	temp = Vector * 90;
    4d36:	20 e0       	ldi	r18, 0x00	; 0
    4d38:	30 e0       	ldi	r19, 0x00	; 0
    4d3a:	44 eb       	ldi	r20, 0xB4	; 180
    4d3c:	52 e4       	ldi	r21, 0x42	; 66
    4d3e:	0e 94 e4 47 	call	0x8fc8	; 0x8fc8 <__mulsf3>
    4d42:	6b 01       	movw	r12, r22
    4d44:	7c 01       	movw	r14, r24

	// Change 0-90-0 to 0-90-180 so that
	// swap happens at 100% inverted
	if (VectorZ < 0)
    4d46:	20 e0       	ldi	r18, 0x00	; 0
    4d48:	30 e0       	ldi	r19, 0x00	; 0
    4d4a:	a9 01       	movw	r20, r18
    4d4c:	60 91 00 05 	lds	r22, 0x0500
    4d50:	70 91 01 05 	lds	r23, 0x0501
    4d54:	80 91 02 05 	lds	r24, 0x0502
    4d58:	90 91 03 05 	lds	r25, 0x0503
    4d5c:	0e 94 91 46 	call	0x8d22	; 0x8d22 <__cmpsf2>
    4d60:	87 ff       	sbrs	r24, 7
    4d62:	18 c0       	rjmp	.+48     	; 0x4d94 <ext2+0x66>
	{
		// CW rotations
		if (temp > 0)
    4d64:	20 e0       	ldi	r18, 0x00	; 0
    4d66:	30 e0       	ldi	r19, 0x00	; 0
    4d68:	a9 01       	movw	r20, r18
    4d6a:	c7 01       	movw	r24, r14
    4d6c:	b6 01       	movw	r22, r12
    4d6e:	0e 94 e0 47 	call	0x8fc0	; 0x8fc0 <__gesf2>
		{
			temp = 180 - temp;
    4d72:	a7 01       	movw	r20, r14
    4d74:	96 01       	movw	r18, r12
	// Change 0-90-0 to 0-90-180 so that
	// swap happens at 100% inverted
	if (VectorZ < 0)
	{
		// CW rotations
		if (temp > 0)
    4d76:	18 16       	cp	r1, r24
    4d78:	2c f4       	brge	.+10     	; 0x4d84 <ext2+0x56>
		{
			temp = 180 - temp;
    4d7a:	60 e0       	ldi	r22, 0x00	; 0
    4d7c:	70 e0       	ldi	r23, 0x00	; 0
    4d7e:	84 e3       	ldi	r24, 0x34	; 52
    4d80:	93 e4       	ldi	r25, 0x43	; 67
    4d82:	04 c0       	rjmp	.+8      	; 0x4d8c <ext2+0x5e>
		}
		// CCW rotations
		else
		{
			temp = -180 - temp;
    4d84:	60 e0       	ldi	r22, 0x00	; 0
    4d86:	70 e0       	ldi	r23, 0x00	; 0
    4d88:	84 e3       	ldi	r24, 0x34	; 52
    4d8a:	93 ec       	ldi	r25, 0xC3	; 195
    4d8c:	0e 94 2c 46 	call	0x8c58	; 0x8c58 <__subsf3>
    4d90:	6b 01       	movw	r12, r22
    4d92:	7c 01       	movw	r14, r24
		}
	}

	return (temp);
}
    4d94:	c7 01       	movw	r24, r14
    4d96:	b6 01       	movw	r22, r12
    4d98:	ff 90       	pop	r15
    4d9a:	ef 90       	pop	r14
    4d9c:	df 90       	pop	r13
    4d9e:	cf 90       	pop	r12
    4da0:	08 95       	ret

00004da2 <ExtractEulerAngles>:
	return temp;
}

void ExtractEulerAngles(void)
{
	EulerAngleRoll = ext2(VectorX);
    4da2:	60 91 28 05 	lds	r22, 0x0528
    4da6:	70 91 29 05 	lds	r23, 0x0529
    4daa:	80 91 2a 05 	lds	r24, 0x052A
    4dae:	90 91 2b 05 	lds	r25, 0x052B
    4db2:	0e 94 97 26 	call	0x4d2e	; 0x4d2e <ext2>
    4db6:	60 93 9d 05 	sts	0x059D, r22
    4dba:	70 93 9e 05 	sts	0x059E, r23
    4dbe:	80 93 9f 05 	sts	0x059F, r24
    4dc2:	90 93 a0 05 	sts	0x05A0, r25
	EulerAnglePitch = ext2(VectorY);
    4dc6:	60 91 24 05 	lds	r22, 0x0524
    4dca:	70 91 25 05 	lds	r23, 0x0525
    4dce:	80 91 26 05 	lds	r24, 0x0526
    4dd2:	90 91 27 05 	lds	r25, 0x0527
    4dd6:	0e 94 97 26 	call	0x4d2e	; 0x4d2e <ext2>
    4dda:	60 93 75 05 	sts	0x0575, r22
    4dde:	70 93 76 05 	sts	0x0576, r23
    4de2:	80 93 77 05 	sts	0x0577, r24
    4de6:	90 93 78 05 	sts	0x0578, r25
    4dea:	08 95       	ret

00004dec <imu_update>:
//  float_var = both.flt;
//
//

void imu_update(uint32_t period)
{
    4dec:	4f 92       	push	r4
    4dee:	5f 92       	push	r5
    4df0:	6f 92       	push	r6
    4df2:	7f 92       	push	r7
    4df4:	8f 92       	push	r8
    4df6:	9f 92       	push	r9
    4df8:	af 92       	push	r10
    4dfa:	bf 92       	push	r11
    4dfc:	cf 92       	push	r12
    4dfe:	df 92       	push	r13
    4e00:	ef 92       	push	r14
    4e02:	ff 92       	push	r15
    4e04:	0f 93       	push	r16
    4e06:	1f 93       	push	r17
    4e08:	cf 93       	push	r28
    4e0a:	df 93       	push	r29
    4e0c:	cd b7       	in	r28, 0x3d	; 61
    4e0e:	de b7       	in	r29, 0x3e	; 62
    4e10:	60 97       	sbiw	r28, 0x10	; 16
    4e12:	0f b6       	in	r0, 0x3f	; 63
    4e14:	f8 94       	cli
    4e16:	de bf       	out	0x3e, r29	; 62
    4e18:	0f be       	out	0x3f, r0	; 63
    4e1a:	cd bf       	out	0x3d, r28	; 61
	uint32_t	roll_sq, pitch_sq, yaw_sq;
	uint32_t 	AccMag = 0;
		
	// Work out interval in seconds
	// Convert (period) from units of 400ns (1/2500000) to seconds (1s/400ns = 2500000)
	tempf = period;						// Promote int16_t to float
    4e1c:	0e 94 2e 47 	call	0x8e5c	; 0x8e5c <__floatunsisf>
    4e20:	69 83       	std	Y+1, r22	; 0x01
    4e22:	7a 83       	std	Y+2, r23	; 0x02
    4e24:	8b 83       	std	Y+3, r24	; 0x03
    4e26:	9c 83       	std	Y+4, r25	; 0x04
	intervalf = tempf/2500000.0f;		// This gives the period in seconds
    4e28:	20 e8       	ldi	r18, 0x80	; 128
    4e2a:	36 e9       	ldi	r19, 0x96	; 150
    4e2c:	48 e1       	ldi	r20, 0x18	; 24
    4e2e:	5a e4       	ldi	r21, 0x4A	; 74
    4e30:	0e 94 95 46 	call	0x8d2a	; 0x8d2a <__divsf3>
    4e34:	6d 87       	std	Y+13, r22	; 0x0d
    4e36:	7e 87       	std	Y+14, r23	; 0x0e
    4e38:	8f 87       	std	Y+15, r24	; 0x0f
    4e3a:	98 8b       	std	Y+16, r25	; 0x10

	// Lookup actual LPF value and promote
	// Note: Two sets of values for normal and high-speed mode
	if (Config.Servo_rate != FAST)
    4e3c:	80 91 d3 05 	lds	r24, 0x05D3
    4e40:	60 91 37 06 	lds	r22, 0x0637
    4e44:	82 30       	cpi	r24, 0x02	; 2
    4e46:	39 f0       	breq	.+14     	; 0x4e56 <imu_update+0x6a>
	{
		//tempf = pgm_read_float(&LPF_lookup[Config.Acc_LPF]); 
		memcpy_P(&tempf, &LPF_lookup[Config.Acc_LPF], sizeof(float)); 
    4e48:	84 e0       	ldi	r24, 0x04	; 4
    4e4a:	68 02       	muls	r22, r24
    4e4c:	b0 01       	movw	r22, r0
    4e4e:	11 24       	eor	r1, r1
    4e50:	60 5f       	subi	r22, 0xF0	; 240
    4e52:	77 4e       	sbci	r23, 0xE7	; 231
    4e54:	06 c0       	rjmp	.+12     	; 0x4e62 <imu_update+0x76>
	}
	else
	{
		//tempf = pgm_read_float(&LPF_lookup_HS[Config.Acc_LPF]); 
		memcpy_P(&tempf, &LPF_lookup_HS[Config.Acc_LPF], sizeof(float)); 
    4e56:	94 e0       	ldi	r25, 0x04	; 4
    4e58:	69 02       	muls	r22, r25
    4e5a:	b0 01       	movw	r22, r0
    4e5c:	11 24       	eor	r1, r1
    4e5e:	60 51       	subi	r22, 0x10	; 16
    4e60:	78 4e       	sbci	r23, 0xE8	; 232
    4e62:	44 e0       	ldi	r20, 0x04	; 4
    4e64:	50 e0       	ldi	r21, 0x00	; 0
    4e66:	ce 01       	movw	r24, r28
    4e68:	01 96       	adiw	r24, 0x01	; 1
    4e6a:	0e 94 e7 48 	call	0x91ce	; 0x91ce <memcpy_P>
	for (axis = 0; axis < NUMBEROFAXIS; axis++)
	{
		accADCf = accADC[axis]; // Promote
		
		// Acc LPF
		if (Config.Acc_LPF != NOFILTER)
    4e6e:	50 90 37 06 	lds	r5, 0x0637
		{
			// Acc LPF
			accSmooth[axis] = (accSmooth[axis] * (tempf - 1.0f) - accADCf) / tempf;
    4e72:	c9 80       	ldd	r12, Y+1	; 0x01
    4e74:	da 80       	ldd	r13, Y+2	; 0x02
    4e76:	eb 80       	ldd	r14, Y+3	; 0x03
    4e78:	fc 80       	ldd	r15, Y+4	; 0x04
    4e7a:	2c e3       	ldi	r18, 0x3C	; 60
    4e7c:	62 2e       	mov	r6, r18
    4e7e:	25 e0       	ldi	r18, 0x05	; 5
    4e80:	72 2e       	mov	r7, r18
    4e82:	01 e9       	ldi	r16, 0x91	; 145
    4e84:	15 e0       	ldi	r17, 0x05	; 5
	}
	
	// Smooth Acc signals - note that accSmooth is in [ROLL, PITCH, YAW] order
	for (axis = 0; axis < NUMBEROFAXIS; axis++)
	{
		accADCf = accADC[axis]; // Promote
    4e86:	d3 01       	movw	r26, r6
    4e88:	6d 91       	ld	r22, X+
    4e8a:	7d 91       	ld	r23, X+
    4e8c:	3d 01       	movw	r6, r26
    4e8e:	88 27       	eor	r24, r24
    4e90:	77 fd       	sbrc	r23, 7
    4e92:	80 95       	com	r24
    4e94:	98 2f       	mov	r25, r24
    4e96:	0e 94 30 47 	call	0x8e60	; 0x8e60 <__floatsisf>
    4e9a:	4b 01       	movw	r8, r22
    4e9c:	5c 01       	movw	r10, r24
		
		// Acc LPF
		if (Config.Acc_LPF != NOFILTER)
    4e9e:	b7 e0       	ldi	r27, 0x07	; 7
    4ea0:	5b 16       	cp	r5, r27
    4ea2:	f1 f0       	breq	.+60     	; 0x4ee0 <imu_update+0xf4>
		{
			// Acc LPF
			accSmooth[axis] = (accSmooth[axis] * (tempf - 1.0f) - accADCf) / tempf;
    4ea4:	20 e0       	ldi	r18, 0x00	; 0
    4ea6:	30 e0       	ldi	r19, 0x00	; 0
    4ea8:	40 e8       	ldi	r20, 0x80	; 128
    4eaa:	5f e3       	ldi	r21, 0x3F	; 63
    4eac:	c7 01       	movw	r24, r14
    4eae:	b6 01       	movw	r22, r12
    4eb0:	0e 94 2c 46 	call	0x8c58	; 0x8c58 <__subsf3>
    4eb4:	f8 01       	movw	r30, r16
    4eb6:	20 81       	ld	r18, Z
    4eb8:	31 81       	ldd	r19, Z+1	; 0x01
    4eba:	42 81       	ldd	r20, Z+2	; 0x02
    4ebc:	53 81       	ldd	r21, Z+3	; 0x03
    4ebe:	0e 94 e4 47 	call	0x8fc8	; 0x8fc8 <__mulsf3>
    4ec2:	a5 01       	movw	r20, r10
    4ec4:	94 01       	movw	r18, r8
    4ec6:	0e 94 2c 46 	call	0x8c58	; 0x8c58 <__subsf3>
    4eca:	a7 01       	movw	r20, r14
    4ecc:	96 01       	movw	r18, r12
    4ece:	0e 94 95 46 	call	0x8d2a	; 0x8d2a <__divsf3>
    4ed2:	d8 01       	movw	r26, r16
    4ed4:	6d 93       	st	X+, r22
    4ed6:	7d 93       	st	X+, r23
    4ed8:	8d 93       	st	X+, r24
    4eda:	9c 93       	st	X, r25
    4edc:	13 97       	sbiw	r26, 0x03	; 3
    4ede:	09 c0       	rjmp	.+18     	; 0x4ef2 <imu_update+0x106>
		}
		else
		{
			// Use raw accADC[axis] as source for acc values
			accSmooth[axis] =  -accADCf;
    4ee0:	b7 fa       	bst	r11, 7
    4ee2:	b0 94       	com	r11
    4ee4:	b7 f8       	bld	r11, 7
    4ee6:	b0 94       	com	r11
    4ee8:	f8 01       	movw	r30, r16
    4eea:	80 82       	st	Z, r8
    4eec:	91 82       	std	Z+1, r9	; 0x01
    4eee:	a2 82       	std	Z+2, r10	; 0x02
    4ef0:	b3 82       	std	Z+3, r11	; 0x03
    4ef2:	0c 5f       	subi	r16, 0xFC	; 252
    4ef4:	1f 4f       	sbci	r17, 0xFF	; 255
		//tempf = pgm_read_float(&LPF_lookup_HS[Config.Acc_LPF]); 
		memcpy_P(&tempf, &LPF_lookup_HS[Config.Acc_LPF], sizeof(float)); 
	}
	
	// Smooth Acc signals - note that accSmooth is in [ROLL, PITCH, YAW] order
	for (axis = 0; axis < NUMBEROFAXIS; axis++)
    4ef6:	f2 e4       	ldi	r31, 0x42	; 66
    4ef8:	6f 16       	cp	r6, r31
    4efa:	f5 e0       	ldi	r31, 0x05	; 5
    4efc:	7f 06       	cpc	r7, r31
    4efe:	19 f6       	brne	.-122    	; 0x4e86 <imu_update+0x9a>
			accSmooth[axis] =  -accADCf;
		}
	}
	
	// Add correction data to gyro inputs based on difference between Euler angles and acc angles
	AccAngleRoll = accSmooth[ROLL] * SMALLANGLEFACTOR;		// KK2 - AccYfilter
    4f00:	23 ec       	ldi	r18, 0xC3	; 195
    4f02:	35 ef       	ldi	r19, 0xF5	; 245
    4f04:	48 e2       	ldi	r20, 0x28	; 40
    4f06:	5f e3       	ldi	r21, 0x3F	; 63
    4f08:	60 91 91 05 	lds	r22, 0x0591
    4f0c:	70 91 92 05 	lds	r23, 0x0592
    4f10:	80 91 93 05 	lds	r24, 0x0593
    4f14:	90 91 94 05 	lds	r25, 0x0594
    4f18:	0e 94 e4 47 	call	0x8fc8	; 0x8fc8 <__mulsf3>
    4f1c:	6d 83       	std	Y+5, r22	; 0x05
    4f1e:	7e 83       	std	Y+6, r23	; 0x06
    4f20:	8f 83       	std	Y+7, r24	; 0x07
    4f22:	98 87       	std	Y+8, r25	; 0x08
    4f24:	60 93 79 05 	sts	0x0579, r22
    4f28:	70 93 7a 05 	sts	0x057A, r23
    4f2c:	80 93 7b 05 	sts	0x057B, r24
    4f30:	90 93 7c 05 	sts	0x057C, r25
	AccAnglePitch = accSmooth[PITCH] * SMALLANGLEFACTOR;
    4f34:	23 ec       	ldi	r18, 0xC3	; 195
    4f36:	35 ef       	ldi	r19, 0xF5	; 245
    4f38:	48 e2       	ldi	r20, 0x28	; 40
    4f3a:	5f e3       	ldi	r21, 0x3F	; 63
    4f3c:	60 91 95 05 	lds	r22, 0x0595
    4f40:	70 91 96 05 	lds	r23, 0x0596
    4f44:	80 91 97 05 	lds	r24, 0x0597
    4f48:	90 91 98 05 	lds	r25, 0x0598
    4f4c:	0e 94 e4 47 	call	0x8fc8	; 0x8fc8 <__mulsf3>
    4f50:	69 87       	std	Y+9, r22	; 0x09
    4f52:	7a 87       	std	Y+10, r23	; 0x0a
    4f54:	8b 87       	std	Y+11, r24	; 0x0b
    4f56:	9c 87       	std	Y+12, r25	; 0x0c
    4f58:	60 93 7d 05 	sts	0x057D, r22
    4f5c:	70 93 7e 05 	sts	0x057E, r23
    4f60:	80 93 7f 05 	sts	0x057F, r24
    4f64:	90 93 80 05 	sts	0x0580, r25

	// Copy/promote gyro values for rotate
	GyroRollVC = gyroADC[ROLL];								// KK2 - GyroRoll
    4f68:	60 91 6b 05 	lds	r22, 0x056B
    4f6c:	70 91 6c 05 	lds	r23, 0x056C
    4f70:	88 27       	eor	r24, r24
    4f72:	77 fd       	sbrc	r23, 7
    4f74:	80 95       	com	r24
    4f76:	98 2f       	mov	r25, r24
    4f78:	0e 94 30 47 	call	0x8e60	; 0x8e60 <__floatsisf>
    4f7c:	2b 01       	movw	r4, r22
    4f7e:	3c 01       	movw	r6, r24
    4f80:	60 93 85 05 	sts	0x0585, r22
    4f84:	70 93 86 05 	sts	0x0586, r23
    4f88:	80 93 87 05 	sts	0x0587, r24
    4f8c:	90 93 88 05 	sts	0x0588, r25
	GyroPitchVC = gyroADC[PITCH];
    4f90:	60 91 6d 05 	lds	r22, 0x056D
    4f94:	70 91 6e 05 	lds	r23, 0x056E
    4f98:	88 27       	eor	r24, r24
    4f9a:	77 fd       	sbrc	r23, 7
    4f9c:	80 95       	com	r24
    4f9e:	98 2f       	mov	r25, r24
    4fa0:	0e 94 30 47 	call	0x8e60	; 0x8e60 <__floatsisf>
    4fa4:	6b 01       	movw	r12, r22
    4fa6:	7c 01       	movw	r14, r24
    4fa8:	60 93 81 05 	sts	0x0581, r22
    4fac:	70 93 82 05 	sts	0x0582, r23
    4fb0:	80 93 83 05 	sts	0x0583, r24
    4fb4:	90 93 84 05 	sts	0x0584, r25

	// Calculate acceleration magnitude.
	roll_sq = (accADC[ROLL] * accADC[ROLL]);
    4fb8:	20 91 3c 05 	lds	r18, 0x053C
    4fbc:	30 91 3d 05 	lds	r19, 0x053D
	pitch_sq = (accADC[PITCH] * accADC[PITCH]);
    4fc0:	40 91 3e 05 	lds	r20, 0x053E
    4fc4:	50 91 3f 05 	lds	r21, 0x053F
	yaw_sq = (accADC[YAW] * accADC[YAW]);
    4fc8:	e0 91 40 05 	lds	r30, 0x0540
    4fcc:	f0 91 41 05 	lds	r31, 0x0541
	GyroRollVC = gyroADC[ROLL];								// KK2 - GyroRoll
	GyroPitchVC = gyroADC[PITCH];

	// Calculate acceleration magnitude.
	roll_sq = (accADC[ROLL] * accADC[ROLL]);
	pitch_sq = (accADC[PITCH] * accADC[PITCH]);
    4fd0:	44 9f       	mul	r20, r20
    4fd2:	40 01       	movw	r8, r0
    4fd4:	45 9f       	mul	r20, r21
    4fd6:	90 0c       	add	r9, r0
    4fd8:	90 0c       	add	r9, r0
    4fda:	11 24       	eor	r1, r1
    4fdc:	b4 01       	movw	r22, r8
    4fde:	88 27       	eor	r24, r24
    4fe0:	77 fd       	sbrc	r23, 7
    4fe2:	80 95       	com	r24
    4fe4:	98 2f       	mov	r25, r24
	// Copy/promote gyro values for rotate
	GyroRollVC = gyroADC[ROLL];								// KK2 - GyroRoll
	GyroPitchVC = gyroADC[PITCH];

	// Calculate acceleration magnitude.
	roll_sq = (accADC[ROLL] * accADC[ROLL]);
    4fe6:	22 9f       	mul	r18, r18
    4fe8:	a0 01       	movw	r20, r0
    4fea:	23 9f       	mul	r18, r19
    4fec:	50 0d       	add	r21, r0
    4fee:	50 0d       	add	r21, r0
    4ff0:	11 24       	eor	r1, r1
    4ff2:	8a 01       	movw	r16, r20
    4ff4:	22 27       	eor	r18, r18
    4ff6:	17 fd       	sbrc	r17, 7
    4ff8:	20 95       	com	r18
    4ffa:	32 2f       	mov	r19, r18
	pitch_sq = (accADC[PITCH] * accADC[PITCH]);
	yaw_sq = (accADC[YAW] * accADC[YAW]);
	AccMag = roll_sq + pitch_sq + yaw_sq;
    4ffc:	60 0f       	add	r22, r16
    4ffe:	71 1f       	adc	r23, r17
    5000:	82 1f       	adc	r24, r18
    5002:	93 1f       	adc	r25, r19
	GyroPitchVC = gyroADC[PITCH];

	// Calculate acceleration magnitude.
	roll_sq = (accADC[ROLL] * accADC[ROLL]);
	pitch_sq = (accADC[PITCH] * accADC[PITCH]);
	yaw_sq = (accADC[YAW] * accADC[YAW]);
    5004:	ee 9f       	mul	r30, r30
    5006:	90 01       	movw	r18, r0
    5008:	ef 9f       	mul	r30, r31
    500a:	30 0d       	add	r19, r0
    500c:	30 0d       	add	r19, r0
    500e:	11 24       	eor	r1, r1
    5010:	89 01       	movw	r16, r18
    5012:	22 27       	eor	r18, r18
    5014:	17 fd       	sbrc	r17, 7
    5016:	20 95       	com	r18
    5018:	32 2f       	mov	r19, r18
	AccMag = roll_sq + pitch_sq + yaw_sq;
    501a:	60 0f       	add	r22, r16
    501c:	71 1f       	adc	r23, r17
    501e:	82 1f       	adc	r24, r18
    5020:	93 1f       	adc	r25, r19
	
	// Add acc correction if inside local acceleration bounds and not inverted according to VectorZ
	// This is actually a kind of Complementary Filter
	if	((AccMag > acc_0_85G_SQ) && (AccMag < acc_1_15G_SQ) && (VectorZ > 0.5))
    5022:	0e 94 2e 47 	call	0x8e5c	; 0x8e5c <__floatunsisf>
    5026:	4b 01       	movw	r8, r22
    5028:	5c 01       	movw	r10, r24
    502a:	20 e0       	ldi	r18, 0x00	; 0
    502c:	34 ef       	ldi	r19, 0xF4	; 244
    502e:	48 e3       	ldi	r20, 0x38	; 56
    5030:	56 e4       	ldi	r21, 0x46	; 70
    5032:	0e 94 e0 47 	call	0x8fc0	; 0x8fc0 <__gesf2>
    5036:	18 16       	cp	r1, r24
    5038:	0c f0       	brlt	.+2      	; 0x503c <imu_update+0x250>
    503a:	6f c0       	rjmp	.+222    	; 0x511a <imu_update+0x32e>
    503c:	20 e0       	ldi	r18, 0x00	; 0
    503e:	38 e4       	ldi	r19, 0x48	; 72
    5040:	49 ea       	ldi	r20, 0xA9	; 169
    5042:	56 e4       	ldi	r21, 0x46	; 70
    5044:	c5 01       	movw	r24, r10
    5046:	b4 01       	movw	r22, r8
    5048:	0e 94 91 46 	call	0x8d22	; 0x8d22 <__cmpsf2>
    504c:	87 ff       	sbrs	r24, 7
    504e:	65 c0       	rjmp	.+202    	; 0x511a <imu_update+0x32e>
    5050:	20 e0       	ldi	r18, 0x00	; 0
    5052:	30 e0       	ldi	r19, 0x00	; 0
    5054:	40 e0       	ldi	r20, 0x00	; 0
    5056:	5f e3       	ldi	r21, 0x3F	; 63
    5058:	60 91 00 05 	lds	r22, 0x0500
    505c:	70 91 01 05 	lds	r23, 0x0501
    5060:	80 91 02 05 	lds	r24, 0x0502
    5064:	90 91 03 05 	lds	r25, 0x0503
    5068:	0e 94 e0 47 	call	0x8fc0	; 0x8fc0 <__gesf2>
    506c:	18 16       	cp	r1, r24
    506e:	0c f0       	brlt	.+2      	; 0x5072 <imu_update+0x286>
    5070:	54 c0       	rjmp	.+168    	; 0x511a <imu_update+0x32e>
	{
		tempf = (EulerAngleRoll - AccAngleRoll) / (11 - Config.CF_factor); // Default Config.CF_factor is 7
    5072:	80 91 39 06 	lds	r24, 0x0639
    5076:	6b e0       	ldi	r22, 0x0B	; 11
    5078:	70 e0       	ldi	r23, 0x00	; 0
    507a:	68 1b       	sub	r22, r24
    507c:	71 09       	sbc	r23, r1
    507e:	87 fd       	sbrc	r24, 7
    5080:	73 95       	inc	r23
    5082:	88 27       	eor	r24, r24
    5084:	77 fd       	sbrc	r23, 7
    5086:	80 95       	com	r24
    5088:	98 2f       	mov	r25, r24
    508a:	0e 94 30 47 	call	0x8e60	; 0x8e60 <__floatsisf>
    508e:	4b 01       	movw	r8, r22
    5090:	5c 01       	movw	r10, r24
    5092:	2d 81       	ldd	r18, Y+5	; 0x05
    5094:	3e 81       	ldd	r19, Y+6	; 0x06
    5096:	4f 81       	ldd	r20, Y+7	; 0x07
    5098:	58 85       	ldd	r21, Y+8	; 0x08
    509a:	60 91 9d 05 	lds	r22, 0x059D
    509e:	70 91 9e 05 	lds	r23, 0x059E
    50a2:	80 91 9f 05 	lds	r24, 0x059F
    50a6:	90 91 a0 05 	lds	r25, 0x05A0
    50aa:	0e 94 2c 46 	call	0x8c58	; 0x8c58 <__subsf3>
    50ae:	a5 01       	movw	r20, r10
    50b0:	94 01       	movw	r18, r8
    50b2:	0e 94 95 46 	call	0x8d2a	; 0x8d2a <__divsf3>
    50b6:	9b 01       	movw	r18, r22
    50b8:	ac 01       	movw	r20, r24
		GyroRollVC = GyroRollVC + tempf;
    50ba:	c3 01       	movw	r24, r6
    50bc:	b2 01       	movw	r22, r4
    50be:	0e 94 2d 46 	call	0x8c5a	; 0x8c5a <__addsf3>
    50c2:	60 93 85 05 	sts	0x0585, r22
    50c6:	70 93 86 05 	sts	0x0586, r23
    50ca:	80 93 87 05 	sts	0x0587, r24
    50ce:	90 93 88 05 	sts	0x0588, r25
		
		tempf = (EulerAnglePitch - AccAnglePitch) /(11 - Config.CF_factor);
    50d2:	29 85       	ldd	r18, Y+9	; 0x09
    50d4:	3a 85       	ldd	r19, Y+10	; 0x0a
    50d6:	4b 85       	ldd	r20, Y+11	; 0x0b
    50d8:	5c 85       	ldd	r21, Y+12	; 0x0c
    50da:	60 91 75 05 	lds	r22, 0x0575
    50de:	70 91 76 05 	lds	r23, 0x0576
    50e2:	80 91 77 05 	lds	r24, 0x0577
    50e6:	90 91 78 05 	lds	r25, 0x0578
    50ea:	0e 94 2c 46 	call	0x8c58	; 0x8c58 <__subsf3>
    50ee:	a5 01       	movw	r20, r10
    50f0:	94 01       	movw	r18, r8
    50f2:	0e 94 95 46 	call	0x8d2a	; 0x8d2a <__divsf3>
    50f6:	9b 01       	movw	r18, r22
    50f8:	ac 01       	movw	r20, r24
    50fa:	69 83       	std	Y+1, r22	; 0x01
    50fc:	7a 83       	std	Y+2, r23	; 0x02
    50fe:	8b 83       	std	Y+3, r24	; 0x03
    5100:	9c 83       	std	Y+4, r25	; 0x04
		GyroPitchVC = GyroPitchVC + tempf;
    5102:	c7 01       	movw	r24, r14
    5104:	b6 01       	movw	r22, r12
    5106:	0e 94 2d 46 	call	0x8c5a	; 0x8c5a <__addsf3>
    510a:	60 93 81 05 	sts	0x0581, r22
    510e:	70 93 82 05 	sts	0x0582, r23
    5112:	80 93 83 05 	sts	0x0583, r24
    5116:	90 93 84 05 	sts	0x0584, r25
	}

	// Rotate up-direction 3D vector with gyro inputs
	Rotate3dVector(intervalf);
    511a:	6d 85       	ldd	r22, Y+13	; 0x0d
    511c:	7e 85       	ldd	r23, Y+14	; 0x0e
    511e:	8f 85       	ldd	r24, Y+15	; 0x0f
    5120:	98 89       	ldd	r25, Y+16	; 0x10
    5122:	0e 94 a4 25 	call	0x4b48	; 0x4b48 <Rotate3dVector>
	ExtractEulerAngles();
    5126:	0e 94 d1 26 	call	0x4da2	; 0x4da2 <ExtractEulerAngles>
	
	// Upscale to 0.01 degrees resolution and copy to angle[] for display
	angle[ROLL] = (int16_t)(EulerAngleRoll * -100);
    512a:	20 e0       	ldi	r18, 0x00	; 0
    512c:	30 e0       	ldi	r19, 0x00	; 0
    512e:	48 ec       	ldi	r20, 0xC8	; 200
    5130:	52 ec       	ldi	r21, 0xC2	; 194
    5132:	60 91 9d 05 	lds	r22, 0x059D
    5136:	70 91 9e 05 	lds	r23, 0x059E
    513a:	80 91 9f 05 	lds	r24, 0x059F
    513e:	90 91 a0 05 	lds	r25, 0x05A0
    5142:	0e 94 e4 47 	call	0x8fc8	; 0x8fc8 <__mulsf3>
    5146:	0e 94 fd 46 	call	0x8dfa	; 0x8dfa <__fixsfsi>
    514a:	70 93 8a 05 	sts	0x058A, r23
    514e:	60 93 89 05 	sts	0x0589, r22
	angle[PITCH] = (int16_t)(EulerAnglePitch * -100);
    5152:	20 e0       	ldi	r18, 0x00	; 0
    5154:	30 e0       	ldi	r19, 0x00	; 0
    5156:	48 ec       	ldi	r20, 0xC8	; 200
    5158:	52 ec       	ldi	r21, 0xC2	; 194
    515a:	60 91 75 05 	lds	r22, 0x0575
    515e:	70 91 76 05 	lds	r23, 0x0576
    5162:	80 91 77 05 	lds	r24, 0x0577
    5166:	90 91 78 05 	lds	r25, 0x0578
    516a:	0e 94 e4 47 	call	0x8fc8	; 0x8fc8 <__mulsf3>
    516e:	0e 94 fd 46 	call	0x8dfa	; 0x8dfa <__fixsfsi>
    5172:	70 93 8c 05 	sts	0x058C, r23
    5176:	60 93 8b 05 	sts	0x058B, r22
}
    517a:	60 96       	adiw	r28, 0x10	; 16
    517c:	0f b6       	in	r0, 0x3f	; 63
    517e:	f8 94       	cli
    5180:	de bf       	out	0x3e, r29	; 62
    5182:	0f be       	out	0x3f, r0	; 63
    5184:	cd bf       	out	0x3d, r28	; 61
    5186:	df 91       	pop	r29
    5188:	cf 91       	pop	r28
    518a:	1f 91       	pop	r17
    518c:	0f 91       	pop	r16
    518e:	ff 90       	pop	r15
    5190:	ef 90       	pop	r14
    5192:	df 90       	pop	r13
    5194:	cf 90       	pop	r12
    5196:	bf 90       	pop	r11
    5198:	af 90       	pop	r10
    519a:	9f 90       	pop	r9
    519c:	8f 90       	pop	r8
    519e:	7f 90       	pop	r7
    51a0:	6f 90       	pop	r6
    51a2:	5f 90       	pop	r5
    51a4:	4f 90       	pop	r4
    51a6:	08 95       	ret

000051a8 <reset_IMU>:
}

void reset_IMU(void)
{
	// Initialise the vector to point straight up
	VectorX = 0;
    51a8:	10 92 28 05 	sts	0x0528, r1
    51ac:	10 92 29 05 	sts	0x0529, r1
    51b0:	10 92 2a 05 	sts	0x052A, r1
    51b4:	10 92 2b 05 	sts	0x052B, r1
	VectorY = 0;
    51b8:	10 92 24 05 	sts	0x0524, r1
    51bc:	10 92 25 05 	sts	0x0525, r1
    51c0:	10 92 26 05 	sts	0x0526, r1
    51c4:	10 92 27 05 	sts	0x0527, r1
	VectorZ = 1;
    51c8:	80 e0       	ldi	r24, 0x00	; 0
    51ca:	90 e0       	ldi	r25, 0x00	; 0
    51cc:	a0 e8       	ldi	r26, 0x80	; 128
    51ce:	bf e3       	ldi	r27, 0x3F	; 63
    51d0:	80 93 00 05 	sts	0x0500, r24
    51d4:	90 93 01 05 	sts	0x0501, r25
    51d8:	a0 93 02 05 	sts	0x0502, r26
    51dc:	b0 93 03 05 	sts	0x0503, r27
	
	// Initialise internal vectors and attitude	
	VectorA = 0;
    51e0:	10 92 a1 05 	sts	0x05A1, r1
    51e4:	10 92 a2 05 	sts	0x05A2, r1
    51e8:	10 92 a3 05 	sts	0x05A3, r1
    51ec:	10 92 a4 05 	sts	0x05A4, r1
	VectorB = 0;
    51f0:	10 92 a5 05 	sts	0x05A5, r1
    51f4:	10 92 a6 05 	sts	0x05A6, r1
    51f8:	10 92 a7 05 	sts	0x05A7, r1
    51fc:	10 92 a8 05 	sts	0x05A8, r1
	EulerAngleRoll = 0;
    5200:	10 92 9d 05 	sts	0x059D, r1
    5204:	10 92 9e 05 	sts	0x059E, r1
    5208:	10 92 9f 05 	sts	0x059F, r1
    520c:	10 92 a0 05 	sts	0x05A0, r1
	EulerAnglePitch = 0;
    5210:	10 92 75 05 	sts	0x0575, r1
    5214:	10 92 76 05 	sts	0x0576, r1
    5218:	10 92 77 05 	sts	0x0577, r1
    521c:	10 92 78 05 	sts	0x0578, r1

	// Reset loop count to zero
	TMR0_counter = 0;	// TMR0 overflow counter
    5220:	10 92 c6 07 	sts	0x07C6, r1
    5224:	10 92 c5 07 	sts	0x07C5, r1
	TCNT1 = 0;			// TCNT1 current time
    5228:	10 92 85 00 	sts	0x0085, r1
    522c:	10 92 84 00 	sts	0x0084, r1
	LoopStartTCNT1 = 0;	// TCNT1 last loop time
    5230:	10 92 19 05 	sts	0x0519, r1
    5234:	10 92 18 05 	sts	0x0518, r1
    5238:	08 95       	ret

0000523a <init>:

CONFIG_STRUCT Config;			// eeProm data configuration
uint16_t SystemVoltage = 0;		// Initial voltage measured.

void init(void)
{
    523a:	cf 93       	push	r28
	
	//***********************************************************
	// I/O setup
	//***********************************************************
	// Set port directions
	DDRA		= 0x30;		// Port A
    523c:	80 e3       	ldi	r24, 0x30	; 48
    523e:	81 b9       	out	0x01, r24	; 1
	DDRC		= 0xFC;		// Port C
    5240:	8c ef       	ldi	r24, 0xFC	; 252
    5242:	87 b9       	out	0x07, r24	; 7
	DDRB		= 0x0A;		// Port B
    5244:	8a e0       	ldi	r24, 0x0A	; 10
    5246:	84 b9       	out	0x04, r24	; 4
	DDRD		= 0xF2;		// Port D
    5248:	82 ef       	ldi	r24, 0xF2	; 242
    524a:	8a b9       	out	0x0a, r24	; 10

	// Hold all PWM outputs low to stop glitches
	// M5 and M6 are on PortA for KK2.1
	MOTORS		= 0;
    524c:	18 b8       	out	0x08, r1	; 8
	M5			= 0;
    524e:	14 98       	cbi	0x02, 4	; 2
	M6			= 0;
    5250:	15 98       	cbi	0x02, 5	; 2

	// Preset I/O pins
	LED1 		= 0;		// LED1 off
    5252:	2b 98       	cbi	0x05, 3	; 5
	LVA 		= 0; 		// LVA alarm OFF
    5254:	29 98       	cbi	0x05, 1	; 5
	LCD_SCL		= 1;		// GLCD clock high
    5256:	5c 9a       	sbi	0x0b, 4	; 11

	// Set/clear pull-ups (1 = set, 0 = clear)
	PINB		= 0xF5;		// Set PB pull-ups
    5258:	85 ef       	ldi	r24, 0xF5	; 245
    525a:	83 b9       	out	0x03, r24	; 3
	PIND		= 0x0C;		// Set PD pull-ups (Don't pull up RX yet)
    525c:	8c e0       	ldi	r24, 0x0C	; 12
    525e:	89 b9       	out	0x09, r24	; 9
    5260:	2f e5       	ldi	r18, 0x5F	; 95
    5262:	88 ed       	ldi	r24, 0xD8	; 216
    5264:	93 e0       	ldi	r25, 0x03	; 3
    5266:	21 50       	subi	r18, 0x01	; 1
    5268:	80 40       	sbci	r24, 0x00	; 0
    526a:	90 40       	sbci	r25, 0x00	; 0
    526c:	e1 f7       	brne	.-8      	; 0x5266 <init+0x2c>
    526e:	00 c0       	rjmp	.+0      	; 0x5270 <init+0x36>
    5270:	00 00       	nop
	_delay_ms(63);				// Pause while satellite wakes up	
								// and pull-ups have time to rise.
								// Tweak until bind pulses about 68ms after power-up

	// Bind as master if ONLY button 4 pressed
	if ((PINB & 0xf0) == 0xE0)
    5272:	83 b1       	in	r24, 0x03	; 3
    5274:	80 7f       	andi	r24, 0xF0	; 240
    5276:	80 3e       	cpi	r24, 0xE0	; 224
    5278:	21 f4       	brne	.+8      	; 0x5282 <init+0x48>
	{
		DDRD		= 0xF3;		// Switch PD0 to output
    527a:	83 ef       	ldi	r24, 0xF3	; 243
    527c:	8a b9       	out	0x0a, r24	; 10
		bind_master();
    527e:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <bind_master>
	}

	DDRD		= 0xF2;			// Reset Port D directions
    5282:	82 ef       	ldi	r24, 0xF2	; 242
    5284:	8a b9       	out	0x0a, r24	; 10

	// Set/clear pull-ups (1 = set, 0 = clear)
	PIND		= 0x0D;			// Set PD pull-ups (now pull up RX as well)
    5286:	8d e0       	ldi	r24, 0x0D	; 13
    5288:	89 b9       	out	0x09, r24	; 9
	// Timers
	//***********************************************************

	// Timer0 (8bit) - run @ 20MHz / 1024 = 19.531kHz or 51.2us - max 13.1ms
	// Slow timer to extend Timer 1
	TCCR0A = 0;								// Normal operation
    528a:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0x05;							// Clk / 1024 = 19.531kHz or 51.2us - max 13.1ms
    528c:	85 e0       	ldi	r24, 0x05	; 5
    528e:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= (1 << TOIE0);					// Enable interrupts
    5290:	80 91 6e 00 	lds	r24, 0x006E
    5294:	81 60       	ori	r24, 0x01	; 1
    5296:	80 93 6e 00 	sts	0x006E, r24
	TCNT0 = 0;								// Reset counter
    529a:	16 bc       	out	0x26, r1	; 38
	
	// Timer1 (16bit) - run @ 2.5MHz (400ns) - max 26.2ms
	// Used to measure Rx Signals & control ESC/servo output rate
	TCCR1A = 0;
    529c:	10 92 80 00 	sts	0x0080, r1
	TCCR1B |= (1 << CS11);					// Clk/8 = 2.5MHz
    52a0:	80 91 81 00 	lds	r24, 0x0081
    52a4:	82 60       	ori	r24, 0x02	; 2
    52a6:	80 93 81 00 	sts	0x0081, r24

	// Timer2 8bit - run @ 20MHz / 1024 = 19.531kHz or 51.2us - max 13.1ms
	// Used to time arm/disarm intervals
	TCCR2A = 0;	
    52aa:	10 92 b0 00 	sts	0x00B0, r1
	TCCR2B = 0x07;							// Clk/1024 = 19.531kHz
    52ae:	87 e0       	ldi	r24, 0x07	; 7
    52b0:	80 93 b1 00 	sts	0x00B1, r24
	TIMSK2 = 0;
    52b4:	10 92 70 00 	sts	0x0070, r1
	TIFR2 = 0;
    52b8:	17 ba       	out	0x17, r1	; 23
	TCNT2 = 0;								// Reset counter
    52ba:	10 92 b2 00 	sts	0x00B2, r1
	//***********************************************************
	// Interrupts and pin function setup
	//***********************************************************

	// Pin change interrupt enables PCINT1, PCINT2 and PCINT3 (Throttle, AUX and CPPM input)
	PCICR  = 0x0A;							// PCINT8  to PCINT15 (PCINT1 group - AUX)
    52be:	9a e0       	ldi	r25, 0x0A	; 10
    52c0:	90 93 68 00 	sts	0x0068, r25
											// PCINT24 to PCINT31 (PCINT3 group - THR)
	PCIFR  = 0x0F;							// Clear PCIF0 interrupt flag 
    52c4:	9f e0       	ldi	r25, 0x0F	; 15
    52c6:	9b bb       	out	0x1b, r25	; 27
											// Clear PCIF1 interrupt flag 
											// Clear PCIF2 interrupt flag 
											// Clear PCIF3 interrupt flag 

	// External interrupts INT0 (Elevator) and INT1 (Aileron) and INT2 (Rudder)
	EICRA = 0x15;							// Any change INT0
    52c8:	95 e1       	ldi	r25, 0x15	; 21
    52ca:	90 93 69 00 	sts	0x0069, r25
											// Any change INT1
											// Any change INT2
	EIFR  = 0x07; 							// Clear INT0 interrupt flag (Elevator)
    52ce:	8c bb       	out	0x1c, r24	; 28
	//***********************************************************
	// Start up
	//***********************************************************

	// Preset important flags
	Interrupted = false;						
    52d0:	10 92 c2 07 	sts	0x07C2, r1

	// Load EEPROM settings
	updated = Initial_EEPROM_Config_Load(); // Config now contains valid values
    52d4:	0e 94 e6 19 	call	0x33cc	; 0x33cc <Initial_EEPROM_Config_Load>
    52d8:	c8 2f       	mov	r28, r24
    52da:	20 e0       	ldi	r18, 0x00	; 0
    52dc:	30 e0       	ldi	r19, 0x00	; 0
	//***********************************************************

	for (i = 0; i < MAX_RC_CHANNELS; i++)
	{
		
		RxChannel[i] = 3750;
    52de:	46 ea       	ldi	r20, 0xA6	; 166
    52e0:	5e e0       	ldi	r21, 0x0E	; 14
    52e2:	f9 01       	movw	r30, r18
    52e4:	ee 0f       	add	r30, r30
    52e6:	ff 1f       	adc	r31, r31
    52e8:	ee 54       	subi	r30, 0x4E	; 78
    52ea:	f8 4f       	sbci	r31, 0xF8	; 248
    52ec:	51 83       	std	Z+1, r21	; 0x01
    52ee:	40 83       	st	Z, r20
    52f0:	2f 5f       	subi	r18, 0xFF	; 255
    52f2:	3f 4f       	sbci	r19, 0xFF	; 255
	// RX channel defaults for when no RC connected
	// Not doing this can result in the FC trying (unsuccessfully) to arm
	// and makes entry into the menus very hard
	//***********************************************************

	for (i = 0; i < MAX_RC_CHANNELS; i++)
    52f4:	28 30       	cpi	r18, 0x08	; 8
    52f6:	31 05       	cpc	r19, r1
    52f8:	a1 f7       	brne	.-24     	; 0x52e2 <init+0xa8>
	{
		
		RxChannel[i] = 3750;
	}
	
	RxChannel[THROTTLE] = 2500; // Min throttle
    52fa:	24 ec       	ldi	r18, 0xC4	; 196
    52fc:	39 e0       	ldi	r19, 0x09	; 9
    52fe:	30 93 b3 07 	sts	0x07B3, r19
    5302:	20 93 b2 07 	sts	0x07B2, r18
	//***********************************************************
	// GLCD initialisation
	//***********************************************************

	// Initialise the GLCD
	st7565_init();
    5306:	0e 94 22 20 	call	0x4044	; 0x4044 <st7565_init>

	// Make sure the LCD is blank without clearing buffer (and so no logo)
	clear_screen();
    530a:	0e 94 7c 20 	call	0x40f8	; 0x40f8 <clear_screen>
	//***********************************************************
	// ESC calibration
	//***********************************************************
	
	// Calibrate ESCs if ONLY buttons 1 and 4 pressed
	if ((PINB & 0xf0) == 0x60)
    530e:	93 b1       	in	r25, 0x03	; 3
    5310:	90 7f       	andi	r25, 0xF0	; 240
    5312:	90 36       	cpi	r25, 0x60	; 96
    5314:	09 f0       	breq	.+2      	; 0x5318 <init+0xde>
    5316:	71 c0       	rjmp	.+226    	; 0x53fa <init+0x1c0>
	{
		// Display calibrating message
		st7565_command(CMD_SET_COM_NORMAL); 	// For text (not for logo)
    5318:	80 ec       	ldi	r24, 0xC0	; 192
    531a:	0e 94 13 20 	call	0x4026	; 0x4026 <st7565_command>
		clear_buffer(buffer);
    531e:	80 e0       	ldi	r24, 0x00	; 0
    5320:	91 e0       	ldi	r25, 0x01	; 1
    5322:	0e 94 73 20 	call	0x40e6	; 0x40e6 <clear_buffer>
		LCD_Display_Text(59,(const unsigned char*)Verdana14,10,25);
    5326:	29 e1       	ldi	r18, 0x19	; 25
    5328:	30 e0       	ldi	r19, 0x00	; 0
    532a:	4a e0       	ldi	r20, 0x0A	; 10
    532c:	50 e0       	ldi	r21, 0x00	; 0
    532e:	6f e5       	ldi	r22, 0x5F	; 95
    5330:	71 e0       	ldi	r23, 0x01	; 1
    5332:	8b e3       	ldi	r24, 0x3B	; 59
    5334:	90 e0       	ldi	r25, 0x00	; 0
    5336:	0e 94 20 22 	call	0x4440	; 0x4440 <LCD_Display_Text>
		write_buffer(buffer);
    533a:	80 e0       	ldi	r24, 0x00	; 0
    533c:	91 e0       	ldi	r25, 0x01	; 1
    533e:	0e 94 41 20 	call	0x4082	; 0x4082 <write_buffer>
		clear_buffer(buffer);
    5342:	80 e0       	ldi	r24, 0x00	; 0
    5344:	91 e0       	ldi	r25, 0x01	; 1
    5346:	0e 94 73 20 	call	0x40e6	; 0x40e6 <clear_buffer>
    534a:	ef e3       	ldi	r30, 0x3F	; 63
    534c:	f6 e0       	ldi	r31, 0x06	; 6
    534e:	80 e0       	ldi	r24, 0x00	; 0
    5350:	90 e0       	ldi	r25, 0x00	; 0
				// Set output to maximum pulse width
				ServoOut[i] = MOTOR_100;
			}
			else
			{
				ServoOut[i] = SERVO_CENTER;
    5352:	4c ed       	ldi	r20, 0xDC	; 220
    5354:	55 e0       	ldi	r21, 0x05	; 5
		{
			// Check for motor marker
			if (Config.Channel[i].Motor_marker == MOTOR)
			{
				// Set output to maximum pulse width
				ServoOut[i] = MOTOR_100;
    5356:	6c e6       	ldi	r22, 0x6C	; 108
    5358:	77 e0       	ldi	r23, 0x07	; 7
				
		// For each output
		for (i = 0; i < MAX_OUTPUTS; i++)
		{
			// Check for motor marker
			if (Config.Channel[i].Motor_marker == MOTOR)
    535a:	a0 81       	ld	r26, Z
    535c:	9c 01       	movw	r18, r24
    535e:	22 0f       	add	r18, r18
    5360:	33 1f       	adc	r19, r19
    5362:	a2 30       	cpi	r26, 0x02	; 2
    5364:	39 f4       	brne	.+14     	; 0x5374 <init+0x13a>
			{
				// Set output to maximum pulse width
				ServoOut[i] = MOTOR_100;
    5366:	d9 01       	movw	r26, r18
    5368:	ab 5c       	subi	r26, 0xCB	; 203
    536a:	b7 4f       	sbci	r27, 0xF7	; 247
    536c:	11 96       	adiw	r26, 0x01	; 1
    536e:	7c 93       	st	X, r23
    5370:	6e 93       	st	-X, r22
    5372:	06 c0       	rjmp	.+12     	; 0x5380 <init+0x146>
			}
			else
			{
				ServoOut[i] = SERVO_CENTER;
    5374:	d9 01       	movw	r26, r18
    5376:	ab 5c       	subi	r26, 0xCB	; 203
    5378:	b7 4f       	sbci	r27, 0xF7	; 247
    537a:	11 96       	adiw	r26, 0x01	; 1
    537c:	5c 93       	st	X, r21
    537e:	4e 93       	st	-X, r20
    5380:	01 96       	adiw	r24, 0x01	; 1
    5382:	b6 96       	adiw	r30, 0x26	; 38
		LCD_Display_Text(59,(const unsigned char*)Verdana14,10,25);
		write_buffer(buffer);
		clear_buffer(buffer);
				
		// For each output
		for (i = 0; i < MAX_OUTPUTS; i++)
    5384:	88 30       	cpi	r24, 0x08	; 8
    5386:	91 05       	cpc	r25, r1
    5388:	41 f7       	brne	.-48     	; 0x535a <init+0x120>
				ServoOut[i] = SERVO_CENTER;
			}
		}
					
		// Output HIGH pulse (1.9ms) until buttons released
		while ((PINB & 0xf0) == 0x60)
    538a:	83 b1       	in	r24, 0x03	; 3
    538c:	80 7f       	andi	r24, 0xF0	; 240
    538e:	80 36       	cpi	r24, 0x60	; 96
    5390:	79 f4       	brne	.+30     	; 0x53b0 <init+0x176>
		{
			// Pass address of ServoOut array and select all outputs
			output_servo_ppm_asm(&ServoOut[0], 0xFF);
    5392:	6f ef       	ldi	r22, 0xFF	; 255
    5394:	85 e3       	ldi	r24, 0x35	; 53
    5396:	98 e0       	ldi	r25, 0x08	; 8
    5398:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <output_servo_ppm_asm>
    539c:	2f e7       	ldi	r18, 0x7F	; 127
    539e:	88 e3       	ldi	r24, 0x38	; 56
    53a0:	91 e0       	ldi	r25, 0x01	; 1
    53a2:	21 50       	subi	r18, 0x01	; 1
    53a4:	80 40       	sbci	r24, 0x00	; 0
    53a6:	90 40       	sbci	r25, 0x00	; 0
    53a8:	e1 f7       	brne	.-8      	; 0x53a2 <init+0x168>
    53aa:	00 c0       	rjmp	.+0      	; 0x53ac <init+0x172>
    53ac:	00 00       	nop
    53ae:	ed cf       	rjmp	.-38     	; 0x538a <init+0x150>
				ServoOut[i] = SERVO_CENTER;
			}
		}
					
		// Output HIGH pulse (1.9ms) until buttons released
		while ((PINB & 0xf0) == 0x60)
    53b0:	ef e3       	ldi	r30, 0x3F	; 63
    53b2:	f6 e0       	ldi	r31, 0x06	; 6
    53b4:	80 e0       	ldi	r24, 0x00	; 0
    53b6:	90 e0       	ldi	r25, 0x00	; 0
		{
			// Check for motor marker
			if (Config.Channel[i].Motor_marker == MOTOR)
			{
				// Set output to maximum pulse width
				ServoOut[i] = MOTOR_0;
    53b8:	2c e4       	ldi	r18, 0x4C	; 76
    53ba:	34 e0       	ldi	r19, 0x04	; 4
		// Output LOW pulse (1.1ms) after buttons released
		// For each output
		for (i = 0; i < MAX_OUTPUTS; i++)
		{
			// Check for motor marker
			if (Config.Channel[i].Motor_marker == MOTOR)
    53bc:	40 81       	ld	r20, Z
    53be:	42 30       	cpi	r20, 0x02	; 2
    53c0:	41 f4       	brne	.+16     	; 0x53d2 <init+0x198>
			{
				// Set output to maximum pulse width
				ServoOut[i] = MOTOR_0;
    53c2:	dc 01       	movw	r26, r24
    53c4:	aa 0f       	add	r26, r26
    53c6:	bb 1f       	adc	r27, r27
    53c8:	ab 5c       	subi	r26, 0xCB	; 203
    53ca:	b7 4f       	sbci	r27, 0xF7	; 247
    53cc:	11 96       	adiw	r26, 0x01	; 1
    53ce:	3c 93       	st	X, r19
    53d0:	2e 93       	st	-X, r18
    53d2:	01 96       	adiw	r24, 0x01	; 1
    53d4:	b6 96       	adiw	r30, 0x26	; 38
			_delay_ms(20);			
		}

		// Output LOW pulse (1.1ms) after buttons released
		// For each output
		for (i = 0; i < MAX_OUTPUTS; i++)
    53d6:	88 30       	cpi	r24, 0x08	; 8
    53d8:	91 05       	cpc	r25, r1
    53da:	81 f7       	brne	.-32     	; 0x53bc <init+0x182>

		// Loop forever here
		while(1)
		{
			// Pass address of ServoOut array and select all outputs
			output_servo_ppm_asm(&ServoOut[0], 0xFF);
    53dc:	6f ef       	ldi	r22, 0xFF	; 255
    53de:	85 e3       	ldi	r24, 0x35	; 53
    53e0:	98 e0       	ldi	r25, 0x08	; 8
    53e2:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <output_servo_ppm_asm>
    53e6:	2f e7       	ldi	r18, 0x7F	; 127
    53e8:	88 e3       	ldi	r24, 0x38	; 56
    53ea:	91 e0       	ldi	r25, 0x01	; 1
    53ec:	21 50       	subi	r18, 0x01	; 1
    53ee:	80 40       	sbci	r24, 0x00	; 0
    53f0:	90 40       	sbci	r25, 0x00	; 0
    53f2:	e1 f7       	brne	.-8      	; 0x53ec <init+0x1b2>
    53f4:	00 c0       	rjmp	.+0      	; 0x53f6 <init+0x1bc>
    53f6:	00 00       	nop
    53f8:	f1 cf       	rjmp	.-30     	; 0x53dc <init+0x1a2>
    53fa:	2f e7       	ldi	r18, 0x7F	; 127
    53fc:	8f e4       	ldi	r24, 0x4F	; 79
    53fe:	92 e1       	ldi	r25, 0x12	; 18
    5400:	21 50       	subi	r18, 0x01	; 1
    5402:	80 40       	sbci	r24, 0x00	; 0
    5404:	90 40       	sbci	r25, 0x00	; 0
    5406:	e1 f7       	brne	.-8      	; 0x5400 <init+0x1c6>
    5408:	00 c0       	rjmp	.+0      	; 0x540a <init+0x1d0>
    540a:	00 00       	nop

	// This delay prevents the GLCD flashing up a ghost image of old data
	_delay_ms(300);

	// Reload default eeprom settings if middle two buttons are pressed
	if ((PINB & 0xf0) == 0x90)
    540c:	93 b1       	in	r25, 0x03	; 3
    540e:	90 7f       	andi	r25, 0xF0	; 240
    5410:	90 39       	cpi	r25, 0x90	; 144
    5412:	51 f5       	brne	.+84     	; 0x5468 <init+0x22e>
	{
		// Display reset message
		st7565_command(CMD_SET_COM_NORMAL); 	// For text (not for logo)
    5414:	80 ec       	ldi	r24, 0xC0	; 192
    5416:	0e 94 13 20 	call	0x4026	; 0x4026 <st7565_command>
		clear_buffer(buffer);
    541a:	80 e0       	ldi	r24, 0x00	; 0
    541c:	91 e0       	ldi	r25, 0x01	; 1
    541e:	0e 94 73 20 	call	0x40e6	; 0x40e6 <clear_buffer>
		LCD_Display_Text(262,(const unsigned char*)Verdana14,40,25); // "Reset"
    5422:	29 e1       	ldi	r18, 0x19	; 25
    5424:	30 e0       	ldi	r19, 0x00	; 0
    5426:	48 e2       	ldi	r20, 0x28	; 40
    5428:	50 e0       	ldi	r21, 0x00	; 0
    542a:	6f e5       	ldi	r22, 0x5F	; 95
    542c:	71 e0       	ldi	r23, 0x01	; 1
    542e:	86 e0       	ldi	r24, 0x06	; 6
    5430:	91 e0       	ldi	r25, 0x01	; 1
    5432:	0e 94 20 22 	call	0x4440	; 0x4440 <LCD_Display_Text>
		write_buffer(buffer);
    5436:	80 e0       	ldi	r24, 0x00	; 0
    5438:	91 e0       	ldi	r25, 0x01	; 1
    543a:	0e 94 41 20 	call	0x4082	; 0x4082 <write_buffer>
		clear_buffer(buffer);
    543e:	80 e0       	ldi	r24, 0x00	; 0
    5440:	91 e0       	ldi	r25, 0x01	; 1
    5442:	0e 94 73 20 	call	0x40e6	; 0x40e6 <clear_buffer>
		
		// Reset EEPROM settings
		Set_EEPROM_Default_Config();
    5446:	0e 94 2d 19 	call	0x325a	; 0x325a <Set_EEPROM_Default_Config>
		Save_Config_to_EEPROM();
    544a:	0e 94 93 16 	call	0x2d26	; 0x2d26 <Save_Config_to_EEPROM>

		// Set contrast to the default value
		st7565_set_brightness(Config.Contrast);
    544e:	80 91 32 06 	lds	r24, 0x0632
    5452:	0e 94 19 20 	call	0x4032	; 0x4032 <st7565_set_brightness>
    5456:	2f e7       	ldi	r18, 0x7F	; 127
    5458:	84 e8       	ldi	r24, 0x84	; 132
    545a:	9e e1       	ldi	r25, 0x1E	; 30
    545c:	21 50       	subi	r18, 0x01	; 1
    545e:	80 40       	sbci	r24, 0x00	; 0
    5460:	90 40       	sbci	r25, 0x00	; 0
    5462:	e1 f7       	brne	.-8      	; 0x545c <init+0x222>
    5464:	00 c0       	rjmp	.+0      	; 0x5466 <init+0x22c>
    5466:	00 00       	nop

		_delay_ms(500);		// Save is now too fast to show the "Reset" text long enough
	}

	// Display message in place of logo when updating eeprom structure
	if (updated)
    5468:	cc 23       	and	r28, r28
    546a:	21 f1       	breq	.+72     	; 0x54b4 <init+0x27a>
	{
		st7565_command(CMD_SET_COM_NORMAL); 	// For text (not for logo)
    546c:	80 ec       	ldi	r24, 0xC0	; 192
    546e:	0e 94 13 20 	call	0x4026	; 0x4026 <st7565_command>
		clear_buffer(buffer);
    5472:	80 e0       	ldi	r24, 0x00	; 0
    5474:	91 e0       	ldi	r25, 0x01	; 1
    5476:	0e 94 73 20 	call	0x40e6	; 0x40e6 <clear_buffer>
		LCD_Display_Text(259,(const unsigned char*)Verdana14,30,13); // "Updating"
    547a:	2d e0       	ldi	r18, 0x0D	; 13
    547c:	30 e0       	ldi	r19, 0x00	; 0
    547e:	4e e1       	ldi	r20, 0x1E	; 30
    5480:	50 e0       	ldi	r21, 0x00	; 0
    5482:	6f e5       	ldi	r22, 0x5F	; 95
    5484:	71 e0       	ldi	r23, 0x01	; 1
    5486:	83 e0       	ldi	r24, 0x03	; 3
    5488:	91 e0       	ldi	r25, 0x01	; 1
    548a:	0e 94 20 22 	call	0x4440	; 0x4440 <LCD_Display_Text>
		LCD_Display_Text(260,(const unsigned char*)Verdana14,33,37); // "settings"
    548e:	25 e2       	ldi	r18, 0x25	; 37
    5490:	30 e0       	ldi	r19, 0x00	; 0
    5492:	41 e2       	ldi	r20, 0x21	; 33
    5494:	50 e0       	ldi	r21, 0x00	; 0
    5496:	6f e5       	ldi	r22, 0x5F	; 95
    5498:	71 e0       	ldi	r23, 0x01	; 1
    549a:	84 e0       	ldi	r24, 0x04	; 4
    549c:	91 e0       	ldi	r25, 0x01	; 1
    549e:	0e 94 20 22 	call	0x4440	; 0x4440 <LCD_Display_Text>
		write_buffer(buffer);
    54a2:	80 e0       	ldi	r24, 0x00	; 0
    54a4:	91 e0       	ldi	r25, 0x01	; 1
    54a6:	0e 94 41 20 	call	0x4082	; 0x4082 <write_buffer>
		clear_buffer(buffer);		
    54aa:	80 e0       	ldi	r24, 0x00	; 0
    54ac:	91 e0       	ldi	r25, 0x01	; 1
    54ae:	0e 94 73 20 	call	0x40e6	; 0x40e6 <clear_buffer>
    54b2:	04 c0       	rjmp	.+8      	; 0x54bc <init+0x282>
		_delay_ms(1000);	
	}
	else
	{
		// Write logo from buffer
		write_buffer(buffer);
    54b4:	80 e0       	ldi	r24, 0x00	; 0
    54b6:	91 e0       	ldi	r25, 0x01	; 1
    54b8:	0e 94 41 20 	call	0x4082	; 0x4082 <write_buffer>
    54bc:	2f ef       	ldi	r18, 0xFF	; 255
    54be:	88 e0       	ldi	r24, 0x08	; 8
    54c0:	9d e3       	ldi	r25, 0x3D	; 61
    54c2:	21 50       	subi	r18, 0x01	; 1
    54c4:	80 40       	sbci	r24, 0x00	; 0
    54c6:	90 40       	sbci	r25, 0x00	; 0
    54c8:	e1 f7       	brne	.-8      	; 0x54c2 <init+0x288>
    54ca:	00 c0       	rjmp	.+0      	; 0x54cc <init+0x292>
    54cc:	00 00       	nop
		_delay_ms(1000);
	}

	clear_buffer(buffer);
    54ce:	80 e0       	ldi	r24, 0x00	; 0
    54d0:	91 e0       	ldi	r25, 0x01	; 1
    54d2:	0e 94 73 20 	call	0x40e6	; 0x40e6 <clear_buffer>
	write_buffer(buffer);
    54d6:	80 e0       	ldi	r24, 0x00	; 0
    54d8:	91 e0       	ldi	r25, 0x01	; 1
    54da:	0e 94 41 20 	call	0x4082	; 0x4082 <write_buffer>
	
	st7565_init(); // Seems necessary for KK2 mini
    54de:	0e 94 22 20 	call	0x4044	; 0x4044 <st7565_init>
	
	//***********************************************************
	// i2c init
	//***********************************************************	

	i2c_init();
    54e2:	0e 94 c8 44 	call	0x8990	; 0x8990 <i2c_init>
	init_i2c_gyros();
    54e6:	0e 94 67 24 	call	0x48ce	; 0x48ce <init_i2c_gyros>
	init_i2c_accs();
    54ea:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <init_i2c_accs>
	//***********************************************************
	// Remaining init tasks
	//***********************************************************

	// Display "Hold steady" message
	clear_buffer(buffer);
    54ee:	80 e0       	ldi	r24, 0x00	; 0
    54f0:	91 e0       	ldi	r25, 0x01	; 1
    54f2:	0e 94 73 20 	call	0x40e6	; 0x40e6 <clear_buffer>
	st7565_command(CMD_SET_COM_NORMAL); 	// For text (not for logo)
    54f6:	80 ec       	ldi	r24, 0xC0	; 192
    54f8:	0e 94 13 20 	call	0x4026	; 0x4026 <st7565_command>
	LCD_Display_Text(263,(const unsigned char*)Verdana14,18,25);	// "Hold steady"
    54fc:	29 e1       	ldi	r18, 0x19	; 25
    54fe:	30 e0       	ldi	r19, 0x00	; 0
    5500:	42 e1       	ldi	r20, 0x12	; 18
    5502:	50 e0       	ldi	r21, 0x00	; 0
    5504:	6f e5       	ldi	r22, 0x5F	; 95
    5506:	71 e0       	ldi	r23, 0x01	; 1
    5508:	87 e0       	ldi	r24, 0x07	; 7
    550a:	91 e0       	ldi	r25, 0x01	; 1
    550c:	0e 94 20 22 	call	0x4440	; 0x4440 <LCD_Display_Text>
	write_buffer(buffer);	
    5510:	80 e0       	ldi	r24, 0x00	; 0
    5512:	91 e0       	ldi	r25, 0x01	; 1
    5514:	0e 94 41 20 	call	0x4082	; 0x4082 <write_buffer>
	clear_buffer(buffer);
    5518:	80 e0       	ldi	r24, 0x00	; 0
    551a:	91 e0       	ldi	r25, 0x01	; 1
    551c:	0e 94 73 20 	call	0x40e6	; 0x40e6 <clear_buffer>
		
	// Do startup tasks
	Init_ADC();
    5520:	0e 94 fd 10 	call	0x21fa	; 0x21fa <Init_ADC>
	init_int();								// Initialise interrupts based on RC input mode
    5524:	0e 94 29 2e 	call	0x5c52	; 0x5c52 <init_int>
	init_uart();							// Initialise UART
    5528:	0e 94 ad 45 	call	0x8b5a	; 0x8b5a <init_uart>

	// Initial gyro calibration
	if (!CalibrateGyrosSlow())
    552c:	0e 94 88 23 	call	0x4710	; 0x4710 <CalibrateGyrosSlow>
    5530:	81 11       	cpse	r24, r1
    5532:	28 c0       	rjmp	.+80     	; 0x5584 <init+0x34a>
	{
		clear_buffer(buffer);
    5534:	80 e0       	ldi	r24, 0x00	; 0
    5536:	91 e0       	ldi	r25, 0x01	; 1
    5538:	0e 94 73 20 	call	0x40e6	; 0x40e6 <clear_buffer>
		LCD_Display_Text(61,(const unsigned char*)Verdana14,25,25); // "Cal. failed"
    553c:	29 e1       	ldi	r18, 0x19	; 25
    553e:	30 e0       	ldi	r19, 0x00	; 0
    5540:	49 e1       	ldi	r20, 0x19	; 25
    5542:	50 e0       	ldi	r21, 0x00	; 0
    5544:	6f e5       	ldi	r22, 0x5F	; 95
    5546:	71 e0       	ldi	r23, 0x01	; 1
    5548:	8d e3       	ldi	r24, 0x3D	; 61
    554a:	90 e0       	ldi	r25, 0x00	; 0
    554c:	0e 94 20 22 	call	0x4440	; 0x4440 <LCD_Display_Text>
		write_buffer(buffer);
    5550:	80 e0       	ldi	r24, 0x00	; 0
    5552:	91 e0       	ldi	r25, 0x01	; 1
    5554:	0e 94 41 20 	call	0x4082	; 0x4082 <write_buffer>
    5558:	2f ef       	ldi	r18, 0xFF	; 255
    555a:	88 e0       	ldi	r24, 0x08	; 8
    555c:	9d e3       	ldi	r25, 0x3D	; 61
    555e:	21 50       	subi	r18, 0x01	; 1
    5560:	80 40       	sbci	r24, 0x00	; 0
    5562:	90 40       	sbci	r25, 0x00	; 0
    5564:	e1 f7       	brne	.-8      	; 0x555e <init+0x324>
    5566:	00 c0       	rjmp	.+0      	; 0x5568 <init+0x32e>
    5568:	00 00       	nop
		_delay_ms(1000);
		
		// Reset
		cli();
    556a:	f8 94       	cli
		wdt_enable(WDTO_15MS);				// Watchdog on, 15ms
    556c:	28 e0       	ldi	r18, 0x08	; 8
    556e:	88 e1       	ldi	r24, 0x18	; 24
    5570:	90 e0       	ldi	r25, 0x00	; 0
    5572:	0f b6       	in	r0, 0x3f	; 63
    5574:	f8 94       	cli
    5576:	a8 95       	wdr
    5578:	80 93 60 00 	sts	0x0060, r24
    557c:	0f be       	out	0x3f, r0	; 63
    557e:	20 93 60 00 	sts	0x0060, r18
    5582:	ff cf       	rjmp	.-2      	; 0x5582 <init+0x348>
		while(1);							// Wait for reboot
	}

	// Update voltage detection
	SystemVoltage = GetVbat();				// Check power-up battery voltage
    5584:	0e 94 0d 46 	call	0x8c1a	; 0x8c1a <GetVbat>
    5588:	90 93 2d 05 	sts	0x052D, r25
    558c:	80 93 2c 05 	sts	0x052C, r24
	UpdateLimits();							// Update travel and trigger limits
    5590:	0e 94 65 36 	call	0x6cca	; 0x6cca <UpdateLimits>

	// Disarm on start-up if Armed setting is ARMABLE
	if (Config.ArmMode == ARMABLE)
    5594:	80 91 33 06 	lds	r24, 0x0633
    5598:	81 30       	cpi	r24, 0x01	; 1
    559a:	29 f4       	brne	.+10     	; 0x55a6 <init+0x36c>
	{
		General_error |= (1 << DISARMED); 	// Set disarmed bit
    559c:	80 91 1e 05 	lds	r24, 0x051E
    55a0:	84 60       	ori	r24, 0x04	; 4
    55a2:	80 93 1e 05 	sts	0x051E, r24
	}

	// Check to see that throttle is low if RC detected
	if (Interrupted)
    55a6:	80 91 c2 07 	lds	r24, 0x07C2
    55aa:	88 23       	and	r24, r24
    55ac:	69 f0       	breq	.+26     	; 0x55c8 <init+0x38e>
	{
		RxGetChannels();
    55ae:	0e 94 43 43 	call	0x8686	; 0x8686 <RxGetChannels>
		if (MonopolarThrottle > THROTTLEIDLE)
    55b2:	80 91 21 08 	lds	r24, 0x0821
    55b6:	90 91 22 08 	lds	r25, 0x0822
    55ba:	c3 97       	sbiw	r24, 0x33	; 51
    55bc:	2c f0       	brlt	.+10     	; 0x55c8 <init+0x38e>
		{
			General_error |= (1 << THROTTLE_HIGH); 	// Set throttle high error bit
    55be:	80 91 1e 05 	lds	r24, 0x051E
    55c2:	81 60       	ori	r24, 0x01	; 1
    55c4:	80 93 1e 05 	sts	0x051E, r24
		}
	}

	// Reset IMU
	reset_IMU();
    55c8:	0e 94 d4 28 	call	0x51a8	; 0x51a8 <reset_IMU>

	// Beep that init is complete
	menu_beep(1);
    55cc:	81 e0       	ldi	r24, 0x01	; 1

} // init()
    55ce:	cf 91       	pop	r28

	// Reset IMU
	reset_IMU();

	// Beep that init is complete
	menu_beep(1);
    55d0:	0c 94 df 30 	jmp	0x61be	; 0x61be <menu_beep>

000055d4 <__vector_18>:
//************************************************************
//* Timer 0 overflow handler for extending TMR1
//************************************************************

ISR(TIMER0_OVF_vect)
{
    55d4:	1f 92       	push	r1
    55d6:	0f 92       	push	r0
    55d8:	0f b6       	in	r0, 0x3f	; 63
    55da:	0f 92       	push	r0
    55dc:	11 24       	eor	r1, r1
    55de:	8f 93       	push	r24
    55e0:	9f 93       	push	r25
	TMR0_counter++;
    55e2:	80 91 c5 07 	lds	r24, 0x07C5
    55e6:	90 91 c6 07 	lds	r25, 0x07C6
    55ea:	01 96       	adiw	r24, 0x01	; 1
    55ec:	90 93 c6 07 	sts	0x07C6, r25
    55f0:	80 93 c5 07 	sts	0x07C5, r24
}
    55f4:	9f 91       	pop	r25
    55f6:	8f 91       	pop	r24
    55f8:	0f 90       	pop	r0
    55fa:	0f be       	out	0x3f, r0	; 63
    55fc:	0f 90       	pop	r0
    55fe:	1f 90       	pop	r1
    5600:	18 95       	reti

00005602 <__vector_2>:
//* Standard PWM mode
//* Sequential PWM inputs from a normal RC receiver
//************************************************************

ISR(INT1_vect)
{
    5602:	1f 92       	push	r1
    5604:	0f 92       	push	r0
    5606:	0f b6       	in	r0, 0x3f	; 63
    5608:	0f 92       	push	r0
    560a:	11 24       	eor	r1, r1
    560c:	2f 93       	push	r18
    560e:	3f 93       	push	r19
    5610:	8f 93       	push	r24
    5612:	9f 93       	push	r25
	// Log interrupts that occur during PWM generation
	if (JitterGate)	JitterFlag = true;	
    5614:	80 91 dc 07 	lds	r24, 0x07DC
    5618:	88 23       	and	r24, r24
    561a:	19 f0       	breq	.+6      	; 0x5622 <__vector_2+0x20>
    561c:	81 e0       	ldi	r24, 0x01	; 1
    561e:	80 93 dd 07 	sts	0x07DD, r24

	if (RX_ROLL)	// Rising
    5622:	4b 9b       	sbis	0x09, 3	; 9
    5624:	09 c0       	rjmp	.+18     	; 0x5638 <__vector_2+0x36>
	{
		RxChannelStart[AILERON] = TCNT1;
    5626:	80 91 84 00 	lds	r24, 0x0084
    562a:	90 91 85 00 	lds	r25, 0x0085
    562e:	90 93 ca 07 	sts	0x07CA, r25
    5632:	80 93 c9 07 	sts	0x07C9, r24
    5636:	14 c0       	rjmp	.+40     	; 0x5660 <__vector_2+0x5e>
	} 
	else 
	{				// Falling
		RxChannel[AILERON] = TCNT1 - RxChannelStart[AILERON];
    5638:	80 91 84 00 	lds	r24, 0x0084
    563c:	90 91 85 00 	lds	r25, 0x0085
    5640:	20 91 c9 07 	lds	r18, 0x07C9
    5644:	30 91 ca 07 	lds	r19, 0x07CA
    5648:	82 1b       	sub	r24, r18
    564a:	93 0b       	sbc	r25, r19
    564c:	90 93 b5 07 	sts	0x07B5, r25
    5650:	80 93 b4 07 	sts	0x07B4, r24
		if (Config.PWM_Sync == AILERON) 
    5654:	80 91 d4 05 	lds	r24, 0x05D4
    5658:	81 30       	cpi	r24, 0x01	; 1
    565a:	11 f4       	brne	.+4      	; 0x5660 <__vector_2+0x5e>
		{
			Interrupted = true;						// Signal that interrupt block has finished
    565c:	80 93 c2 07 	sts	0x07C2, r24
		}
	}
}
    5660:	9f 91       	pop	r25
    5662:	8f 91       	pop	r24
    5664:	3f 91       	pop	r19
    5666:	2f 91       	pop	r18
    5668:	0f 90       	pop	r0
    566a:	0f be       	out	0x3f, r0	; 63
    566c:	0f 90       	pop	r0
    566e:	1f 90       	pop	r1
    5670:	18 95       	reti

00005672 <__vector_1>:

ISR(INT0_vect)
{
    5672:	1f 92       	push	r1
    5674:	0f 92       	push	r0
    5676:	0f b6       	in	r0, 0x3f	; 63
    5678:	0f 92       	push	r0
    567a:	11 24       	eor	r1, r1
    567c:	2f 93       	push	r18
    567e:	3f 93       	push	r19
    5680:	8f 93       	push	r24
    5682:	9f 93       	push	r25
	if (JitterGate)	JitterFlag = true;	
    5684:	80 91 dc 07 	lds	r24, 0x07DC
    5688:	88 23       	and	r24, r24
    568a:	19 f0       	breq	.+6      	; 0x5692 <__vector_1+0x20>
    568c:	81 e0       	ldi	r24, 0x01	; 1
    568e:	80 93 dd 07 	sts	0x07DD, r24

	if (RX_PITCH)	// Rising 
    5692:	4a 9b       	sbis	0x09, 2	; 9
    5694:	09 c0       	rjmp	.+18     	; 0x56a8 <__vector_1+0x36>
	{
		RxChannelStart[ELEVATOR] = TCNT1;
    5696:	80 91 84 00 	lds	r24, 0x0084
    569a:	90 91 85 00 	lds	r25, 0x0085
    569e:	90 93 cc 07 	sts	0x07CC, r25
    56a2:	80 93 cb 07 	sts	0x07CB, r24
    56a6:	15 c0       	rjmp	.+42     	; 0x56d2 <__vector_1+0x60>
	} 
	else 
	{				// Falling
		RxChannel[ELEVATOR] = TCNT1 - RxChannelStart[ELEVATOR];
    56a8:	80 91 84 00 	lds	r24, 0x0084
    56ac:	90 91 85 00 	lds	r25, 0x0085
    56b0:	20 91 cb 07 	lds	r18, 0x07CB
    56b4:	30 91 cc 07 	lds	r19, 0x07CC
    56b8:	82 1b       	sub	r24, r18
    56ba:	93 0b       	sbc	r25, r19
    56bc:	90 93 b7 07 	sts	0x07B7, r25
    56c0:	80 93 b6 07 	sts	0x07B6, r24
		if (Config.PWM_Sync == ELEVATOR) 
    56c4:	80 91 d4 05 	lds	r24, 0x05D4
    56c8:	82 30       	cpi	r24, 0x02	; 2
    56ca:	19 f4       	brne	.+6      	; 0x56d2 <__vector_1+0x60>
		{
			Interrupted = true;						// Signal that interrupt block has finished
    56cc:	81 e0       	ldi	r24, 0x01	; 1
    56ce:	80 93 c2 07 	sts	0x07C2, r24
		}
	}
}
    56d2:	9f 91       	pop	r25
    56d4:	8f 91       	pop	r24
    56d6:	3f 91       	pop	r19
    56d8:	2f 91       	pop	r18
    56da:	0f 90       	pop	r0
    56dc:	0f be       	out	0x3f, r0	; 63
    56de:	0f 90       	pop	r0
    56e0:	1f 90       	pop	r1
    56e2:	18 95       	reti

000056e4 <__vector_7>:

ISR(PCINT3_vect)
{
    56e4:	1f 92       	push	r1
    56e6:	0f 92       	push	r0
    56e8:	0f b6       	in	r0, 0x3f	; 63
    56ea:	0f 92       	push	r0
    56ec:	11 24       	eor	r1, r1
    56ee:	2f 93       	push	r18
    56f0:	3f 93       	push	r19
    56f2:	8f 93       	push	r24
    56f4:	9f 93       	push	r25
	if (JitterGate)	JitterFlag = true;	
    56f6:	80 91 dc 07 	lds	r24, 0x07DC
    56fa:	88 23       	and	r24, r24
    56fc:	19 f0       	breq	.+6      	; 0x5704 <__vector_7+0x20>
    56fe:	81 e0       	ldi	r24, 0x01	; 1
    5700:	80 93 dd 07 	sts	0x07DD, r24
		
	if (RX_COLL)	// Rising
    5704:	48 9b       	sbis	0x09, 0	; 9
    5706:	09 c0       	rjmp	.+18     	; 0x571a <__vector_7+0x36>
	{
		RxChannelStart[THROTTLE] = TCNT1;
    5708:	80 91 84 00 	lds	r24, 0x0084
    570c:	90 91 85 00 	lds	r25, 0x0085
    5710:	90 93 c8 07 	sts	0x07C8, r25
    5714:	80 93 c7 07 	sts	0x07C7, r24
    5718:	15 c0       	rjmp	.+42     	; 0x5744 <__vector_7+0x60>
	} 
	else 
	{				// Falling
		RxChannel[THROTTLE] = TCNT1 - RxChannelStart[THROTTLE];
    571a:	80 91 84 00 	lds	r24, 0x0084
    571e:	90 91 85 00 	lds	r25, 0x0085
    5722:	20 91 c7 07 	lds	r18, 0x07C7
    5726:	30 91 c8 07 	lds	r19, 0x07C8
    572a:	82 1b       	sub	r24, r18
    572c:	93 0b       	sbc	r25, r19
    572e:	90 93 b3 07 	sts	0x07B3, r25
    5732:	80 93 b2 07 	sts	0x07B2, r24
		if (Config.PWM_Sync == THROTTLE) 
    5736:	80 91 d4 05 	lds	r24, 0x05D4
    573a:	81 11       	cpse	r24, r1
    573c:	03 c0       	rjmp	.+6      	; 0x5744 <__vector_7+0x60>
		{
			Interrupted = true;						// Signal that interrupt block has finished
    573e:	81 e0       	ldi	r24, 0x01	; 1
    5740:	80 93 c2 07 	sts	0x07C2, r24
		}
	}
}
    5744:	9f 91       	pop	r25
    5746:	8f 91       	pop	r24
    5748:	3f 91       	pop	r19
    574a:	2f 91       	pop	r18
    574c:	0f 90       	pop	r0
    574e:	0f be       	out	0x3f, r0	; 63
    5750:	0f 90       	pop	r0
    5752:	1f 90       	pop	r1
    5754:	18 95       	reti

00005756 <__vector_5>:


ISR(PCINT1_vect)
{
    5756:	1f 92       	push	r1
    5758:	0f 92       	push	r0
    575a:	0f b6       	in	r0, 0x3f	; 63
    575c:	0f 92       	push	r0
    575e:	11 24       	eor	r1, r1
    5760:	2f 93       	push	r18
    5762:	3f 93       	push	r19
    5764:	8f 93       	push	r24
    5766:	9f 93       	push	r25
	if (JitterGate)	JitterFlag = true;
    5768:	80 91 dc 07 	lds	r24, 0x07DC
    576c:	88 23       	and	r24, r24
    576e:	19 f0       	breq	.+6      	; 0x5776 <__vector_5+0x20>
    5770:	81 e0       	ldi	r24, 0x01	; 1
    5772:	80 93 dd 07 	sts	0x07DD, r24

	if (RX_AUX)	// Rising
    5776:	18 9b       	sbis	0x03, 0	; 3
    5778:	09 c0       	rjmp	.+18     	; 0x578c <__vector_5+0x36>
	{
		RxChannelStart[GEAR] = TCNT1;
    577a:	80 91 84 00 	lds	r24, 0x0084
    577e:	90 91 85 00 	lds	r25, 0x0085
    5782:	90 93 d0 07 	sts	0x07D0, r25
    5786:	80 93 cf 07 	sts	0x07CF, r24
    578a:	15 c0       	rjmp	.+42     	; 0x57b6 <__vector_5+0x60>
	} 
	else 
	{				// Falling
		RxChannel[GEAR] = TCNT1 - RxChannelStart[GEAR];
    578c:	80 91 84 00 	lds	r24, 0x0084
    5790:	90 91 85 00 	lds	r25, 0x0085
    5794:	20 91 cf 07 	lds	r18, 0x07CF
    5798:	30 91 d0 07 	lds	r19, 0x07D0
    579c:	82 1b       	sub	r24, r18
    579e:	93 0b       	sbc	r25, r19
    57a0:	90 93 bb 07 	sts	0x07BB, r25
    57a4:	80 93 ba 07 	sts	0x07BA, r24
		if (Config.PWM_Sync == GEAR) 
    57a8:	80 91 d4 05 	lds	r24, 0x05D4
    57ac:	84 30       	cpi	r24, 0x04	; 4
    57ae:	19 f4       	brne	.+6      	; 0x57b6 <__vector_5+0x60>
		{
			Interrupted = true;						// Signal that interrupt block has finished
    57b0:	81 e0       	ldi	r24, 0x01	; 1
    57b2:	80 93 c2 07 	sts	0x07C2, r24
		}
	}
}
    57b6:	9f 91       	pop	r25
    57b8:	8f 91       	pop	r24
    57ba:	3f 91       	pop	r19
    57bc:	2f 91       	pop	r18
    57be:	0f 90       	pop	r0
    57c0:	0f be       	out	0x3f, r0	; 63
    57c2:	0f 90       	pop	r0
    57c4:	1f 90       	pop	r1
    57c6:	18 95       	reti

000057c8 <TIM16_ReadTCNT1>:
{
	uint8_t sreg;
	uint16_t i;
	
	/* Save global interrupt flag */
	sreg = SREG;
    57c8:	2f b7       	in	r18, 0x3f	; 63
	
	/* Disable interrupts */
	cli();
    57ca:	f8 94       	cli
	
	/* Read TCNTn into i */
	i = TCNT1;
    57cc:	80 91 84 00 	lds	r24, 0x0084
    57d0:	90 91 85 00 	lds	r25, 0x0085
	
	/* Restore global interrupt flag */
	SREG = sreg;
    57d4:	2f bf       	out	0x3f, r18	; 63
	return i;
}
    57d6:	08 95       	ret

000057d8 <__vector_3>:
// Compacted CPPM RX code thanks to Edgar
//
//************************************************************

ISR(INT2_vect)
{
    57d8:	1f 92       	push	r1
    57da:	0f 92       	push	r0
    57dc:	0f b6       	in	r0, 0x3f	; 63
    57de:	0f 92       	push	r0
    57e0:	11 24       	eor	r1, r1
    57e2:	2f 93       	push	r18
    57e4:	3f 93       	push	r19
    57e6:	4f 93       	push	r20
    57e8:	5f 93       	push	r21
    57ea:	6f 93       	push	r22
    57ec:	7f 93       	push	r23
    57ee:	8f 93       	push	r24
    57f0:	9f 93       	push	r25
    57f2:	af 93       	push	r26
    57f4:	bf 93       	push	r27
    57f6:	ef 93       	push	r30
    57f8:	ff 93       	push	r31
	if (JitterGate)	JitterFlag = true;	
    57fa:	80 91 dc 07 	lds	r24, 0x07DC
    57fe:	88 23       	and	r24, r24
    5800:	19 f0       	breq	.+6      	; 0x5808 <__vector_3+0x30>
    5802:	81 e0       	ldi	r24, 0x01	; 1
    5804:	80 93 dd 07 	sts	0x07DD, r24

    // Backup TCNT1
    uint16_t tCount;
	
    tCount = TIM16_ReadTCNT1();
    5808:	0e 94 e4 2b 	call	0x57c8	; 0x57c8 <TIM16_ReadTCNT1>

	uint8_t curChannel;
	uint8_t prevChannel;

	if (Config.RxMode != CPPM_MODE)
    580c:	20 91 d2 05 	lds	r18, 0x05D2
    5810:	22 23       	and	r18, r18
    5812:	d1 f0       	breq	.+52     	; 0x5848 <__vector_3+0x70>
	{
		if (RX_YAW)	// Rising
    5814:	1a 9b       	sbis	0x03, 2	; 3
    5816:	05 c0       	rjmp	.+10     	; 0x5822 <__vector_3+0x4a>
		{
			RxChannelStart[RUDDER] = tCount;
    5818:	90 93 ce 07 	sts	0x07CE, r25
    581c:	80 93 cd 07 	sts	0x07CD, r24
    5820:	86 c0       	rjmp	.+268    	; 0x592e <__vector_3+0x156>
		} 
		else 
		{			// Falling
			RxChannel[RUDDER] = tCount - RxChannelStart[RUDDER];
    5822:	20 91 cd 07 	lds	r18, 0x07CD
    5826:	30 91 ce 07 	lds	r19, 0x07CE
    582a:	82 1b       	sub	r24, r18
    582c:	93 0b       	sbc	r25, r19
    582e:	90 93 b9 07 	sts	0x07B9, r25
    5832:	80 93 b8 07 	sts	0x07B8, r24
			if (Config.PWM_Sync == RUDDER) 
    5836:	80 91 d4 05 	lds	r24, 0x05D4
    583a:	83 30       	cpi	r24, 0x03	; 3
    583c:	09 f0       	breq	.+2      	; 0x5840 <__vector_3+0x68>
    583e:	77 c0       	rjmp	.+238    	; 0x592e <__vector_3+0x156>
			{
				Interrupted = true;					// Signal that interrupt block has finished
    5840:	81 e0       	ldi	r24, 0x01	; 1
    5842:	80 93 c2 07 	sts	0x07C2, r24
    5846:	73 c0       	rjmp	.+230    	; 0x592e <__vector_3+0x156>
	// CPPM receivers.
	//************************************************************
	else
	{
		// Only respond to negative-going interrupts
		if (CPPM) return;
    5848:	1a 99       	sbic	0x03, 2	; 3
    584a:	71 c0       	rjmp	.+226    	; 0x592e <__vector_3+0x156>

		// Check to see if previous period was a sync pulse or too small to be valid
		// If so, reset the channel number
		if (((tCount - PPMSyncStart) > SYNCPULSEWIDTH) || ((tCount - PPMSyncStart) < MINPULSEWIDTH))
    584c:	20 91 da 07 	lds	r18, 0x07DA
    5850:	30 91 db 07 	lds	r19, 0x07DB
    5854:	ac 01       	movw	r20, r24
    5856:	42 1b       	sub	r20, r18
    5858:	53 0b       	sbc	r21, r19
    585a:	9a 01       	movw	r18, r20
    585c:	2f 35       	cpi	r18, 0x5F	; 95
    585e:	3a 41       	sbci	r19, 0x1A	; 26
    5860:	58 f4       	brcc	.+22     	; 0x5878 <__vector_3+0xa0>
    5862:	20 91 da 07 	lds	r18, 0x07DA
    5866:	30 91 db 07 	lds	r19, 0x07DB
    586a:	ac 01       	movw	r20, r24
    586c:	42 1b       	sub	r20, r18
    586e:	53 0b       	sbc	r21, r19
    5870:	9a 01       	movw	r18, r20
    5872:	2e 3e       	cpi	r18, 0xEE	; 238
    5874:	32 40       	sbci	r19, 0x02	; 2
    5876:	10 f4       	brcc	.+4      	; 0x587c <__vector_3+0xa4>
		{
			ch_num = 0;
    5878:	10 92 d9 07 	sts	0x07D9, r1
		}

		// Update PPMSyncStart with current value
		PPMSyncStart = tCount;
    587c:	90 93 db 07 	sts	0x07DB, r25
    5880:	80 93 da 07 	sts	0x07DA, r24

		// Get the channel number of the current channel in the requested channel order
        curChannel = Config.ChannelOrder[ch_num];
    5884:	e0 91 d9 07 	lds	r30, 0x07D9
    5888:	f0 e0       	ldi	r31, 0x00	; 0
    588a:	e7 55       	subi	r30, 0x57	; 87
    588c:	fa 4f       	sbci	r31, 0xFA	; 250
    588e:	e1 81       	ldd	r30, Z+1	; 0x01

		// Set up previous channel number based on the requested channel order
		if (ch_num > 0)
    5890:	20 91 d9 07 	lds	r18, 0x07D9
    5894:	22 23       	and	r18, r18
    5896:	39 f0       	breq	.+14     	; 0x58a6 <__vector_3+0xce>
		{
			prevChannel = Config.ChannelOrder[ch_num-1];
    5898:	a0 91 d9 07 	lds	r26, 0x07D9
    589c:	b0 e0       	ldi	r27, 0x00	; 0
    589e:	a7 55       	subi	r26, 0x57	; 87
    58a0:	ba 4f       	sbci	r27, 0xFA	; 250
    58a2:	2c 91       	ld	r18, X
    58a4:	01 c0       	rjmp	.+2      	; 0x58a8 <__vector_3+0xd0>
		}
		else
		{
			prevChannel = 0;
    58a6:	20 e0       	ldi	r18, 0x00	; 0
		}

		// Measure the channel data only for the first MAX_CPPM_CHANNELS (currently 8)
		// Prevent code from over-running RxChannelStart[]
        if (ch_num < MAX_CPPM_CHANNELS)
    58a8:	30 91 d9 07 	lds	r19, 0x07D9
    58ac:	38 30       	cpi	r19, 0x08	; 8
    58ae:	38 f4       	brcc	.+14     	; 0x58be <__vector_3+0xe6>
		{
            RxChannelStart[curChannel] = tCount;
    58b0:	f0 e0       	ldi	r31, 0x00	; 0
    58b2:	ee 0f       	add	r30, r30
    58b4:	ff 1f       	adc	r31, r31
    58b6:	e9 53       	subi	r30, 0x39	; 57
    58b8:	f8 4f       	sbci	r31, 0xF8	; 248
    58ba:	91 83       	std	Z+1, r25	; 0x01
    58bc:	80 83       	st	Z, r24
		}

		// When ch_num = 0, the first channel has not yet been measured.
		// That only occurs at the second pulse. Prevent code from over-running RxChannel[]
        if ((ch_num > 0) && (ch_num <= MAX_CPPM_CHANNELS))
    58be:	30 91 d9 07 	lds	r19, 0x07D9
    58c2:	33 23       	and	r19, r19
    58c4:	99 f0       	breq	.+38     	; 0x58ec <__vector_3+0x114>
    58c6:	30 91 d9 07 	lds	r19, 0x07D9
    58ca:	39 30       	cpi	r19, 0x09	; 9
    58cc:	78 f4       	brcc	.+30     	; 0x58ec <__vector_3+0x114>
        {
		   RxChannel[prevChannel] = tCount - RxChannelStart[prevChannel];
    58ce:	30 e0       	ldi	r19, 0x00	; 0
    58d0:	22 0f       	add	r18, r18
    58d2:	33 1f       	adc	r19, r19
    58d4:	f9 01       	movw	r30, r18
    58d6:	e9 53       	subi	r30, 0x39	; 57
    58d8:	f8 4f       	sbci	r31, 0xF8	; 248
    58da:	40 81       	ld	r20, Z
    58dc:	51 81       	ldd	r21, Z+1	; 0x01
    58de:	84 1b       	sub	r24, r20
    58e0:	95 0b       	sbc	r25, r21
    58e2:	f9 01       	movw	r30, r18
    58e4:	ee 54       	subi	r30, 0x4E	; 78
    58e6:	f8 4f       	sbci	r31, 0xF8	; 248
    58e8:	91 83       	std	Z+1, r25	; 0x01
    58ea:	80 83       	st	Z, r24
		}

        // Increment to the next channel
		ch_num++;
    58ec:	80 91 d9 07 	lds	r24, 0x07D9
    58f0:	8f 5f       	subi	r24, 0xFF	; 255
    58f2:	80 93 d9 07 	sts	0x07D9, r24

		// Work out the highest channel number automatically.
		// Update the maximum channel seen so far.
		if (ch_num > max_chan) 
    58f6:	90 91 d9 07 	lds	r25, 0x07D9
    58fa:	80 91 c3 07 	lds	r24, 0x07C3
    58fe:	89 17       	cp	r24, r25
    5900:	28 f4       	brcc	.+10     	; 0x590c <__vector_3+0x134>
		{
			max_chan = ch_num;					// Update max channel number
    5902:	80 91 d9 07 	lds	r24, 0x07D9
    5906:	80 93 c3 07 	sts	0x07C3, r24
    590a:	09 c0       	rjmp	.+18     	; 0x591e <__vector_3+0x146>
		}
		// If the current channel is the highest channel, CPPM is complete
		else if (ch_num == max_chan)
    590c:	90 91 d9 07 	lds	r25, 0x07D9
    5910:	80 91 c3 07 	lds	r24, 0x07C3
    5914:	98 13       	cpse	r25, r24
    5916:	03 c0       	rjmp	.+6      	; 0x591e <__vector_3+0x146>
		{
			Interrupted = true;					// Signal that interrupt block has finished
    5918:	81 e0       	ldi	r24, 0x01	; 1
    591a:	80 93 c2 07 	sts	0x07C2, r24
		}
	
		// If the signal is ever lost, reset measured max channel number
		// and force a recalculation
		if (Overdue)
    591e:	80 91 17 05 	lds	r24, 0x0517
    5922:	88 23       	and	r24, r24
    5924:	21 f0       	breq	.+8      	; 0x592e <__vector_3+0x156>
		{
			max_chan = 0;
    5926:	10 92 c3 07 	sts	0x07C3, r1
			Overdue = false;
    592a:	10 92 17 05 	sts	0x0517, r1
		}
	}
} // ISR(INT2_vect)
    592e:	ff 91       	pop	r31
    5930:	ef 91       	pop	r30
    5932:	bf 91       	pop	r27
    5934:	af 91       	pop	r26
    5936:	9f 91       	pop	r25
    5938:	8f 91       	pop	r24
    593a:	7f 91       	pop	r23
    593c:	6f 91       	pop	r22
    593e:	5f 91       	pop	r21
    5940:	4f 91       	pop	r20
    5942:	3f 91       	pop	r19
    5944:	2f 91       	pop	r18
    5946:	0f 90       	pop	r0
    5948:	0f be       	out	0x3f, r0	; 63
    594a:	0f 90       	pop	r0
    594c:	1f 90       	pop	r1
    594e:	18 95       	reti

00005950 <__vector_20>:
//************************************************************
//* Serial receive interrupt
//************************************************************

ISR(USART0_RX_vect)
{
    5950:	1f 92       	push	r1
    5952:	0f 92       	push	r0
    5954:	0f b6       	in	r0, 0x3f	; 63
    5956:	0f 92       	push	r0
    5958:	11 24       	eor	r1, r1
    595a:	2f 93       	push	r18
    595c:	3f 93       	push	r19
    595e:	4f 93       	push	r20
    5960:	5f 93       	push	r21
    5962:	6f 93       	push	r22
    5964:	7f 93       	push	r23
    5966:	8f 93       	push	r24
    5968:	9f 93       	push	r25
    596a:	af 93       	push	r26
    596c:	bf 93       	push	r27
    596e:	cf 93       	push	r28
    5970:	ef 93       	push	r30
    5972:	ff 93       	push	r31
	//************************************************************
	//* Common entry code
	//************************************************************

	// Log interrupts that occur during PWM generation
	if (JitterGate)	JitterFlag = true;
    5974:	80 91 dc 07 	lds	r24, 0x07DC
    5978:	88 23       	and	r24, r24
    597a:	19 f0       	breq	.+6      	; 0x5982 <__vector_20+0x32>
    597c:	81 e0       	ldi	r24, 0x01	; 1
    597e:	80 93 dd 07 	sts	0x07DD, r24

	// Read byte first
	temp = UDR0;
    5982:	c0 91 c6 00 	lds	r28, 0x00C6

	// Save current time stamp
	Save_TCNT1 = TIM16_ReadTCNT1();
    5986:	0e 94 e4 2b 	call	0x57c8	; 0x57c8 <TIM16_ReadTCNT1>
	
	// Work out frame rate properly
	// Note that CurrentPeriod cannot be larger than 26.2ms
	
	//CurrentPeriod = Save_TCNT1 - PPMSyncStart;
	if (Save_TCNT1 < PPMSyncStart)
    598a:	20 91 da 07 	lds	r18, 0x07DA
    598e:	30 91 db 07 	lds	r19, 0x07DB
	{
		CurrentPeriod = (65536 - PPMSyncStart + Save_TCNT1);
	}
	else
	{
		CurrentPeriod = (Save_TCNT1 - PPMSyncStart);
    5992:	20 91 da 07 	lds	r18, 0x07DA
    5996:	30 91 db 07 	lds	r19, 0x07DB
    599a:	ac 01       	movw	r20, r24
    599c:	42 1b       	sub	r20, r18
    599e:	53 0b       	sbc	r21, r19
    59a0:	9a 01       	movw	r18, r20
	}

	// Handle start of new packet
	if (CurrentPeriod > PACKET_TIMER) // 1.0ms
    59a2:	25 3c       	cpi	r18, 0xC5	; 197
    59a4:	59 e0       	ldi	r21, 0x09	; 9
    59a6:	35 07       	cpc	r19, r21
    59a8:	90 f0       	brcs	.+36     	; 0x59ce <__vector_20+0x7e>
	{
		// Reset variables
		rcindex = 0;
    59aa:	10 92 b1 07 	sts	0x07B1, r1
		bytecount = 0;
    59ae:	10 92 c4 07 	sts	0x07C4, r1
		ch_num = 0;
    59b2:	10 92 d9 07 	sts	0x07D9, r1
		checksum = 0;
    59b6:	10 92 df 07 	sts	0x07DF, r1
    59ba:	10 92 de 07 	sts	0x07DE, r1
		chanmask16 = 0;
    59be:	10 92 d8 07 	sts	0x07D8, r1
    59c2:	10 92 d7 07 	sts	0x07D7, r1

		// Save frame rate to global
		FrameRate = CurrentPeriod;
    59c6:	30 93 e1 07 	sts	0x07E1, r19
    59ca:	20 93 e0 07 	sts	0x07E0, r18
	}

	// Timestamp this interrupt
	PPMSyncStart = Save_TCNT1;
    59ce:	90 93 db 07 	sts	0x07DB, r25
    59d2:	80 93 da 07 	sts	0x07DA, r24
	
	// Put received byte in buffer if space available
	if (rcindex < SBUFFER_SIZE)
    59d6:	80 91 b1 07 	lds	r24, 0x07B1
    59da:	89 31       	cpi	r24, 0x19	; 25
    59dc:	50 f4       	brcc	.+20     	; 0x59f2 <__vector_20+0xa2>
	{
		sBuffer[rcindex++] = temp;			
    59de:	e0 91 b1 07 	lds	r30, 0x07B1
    59e2:	81 e0       	ldi	r24, 0x01	; 1
    59e4:	8e 0f       	add	r24, r30
    59e6:	80 93 b1 07 	sts	0x07B1, r24
    59ea:	f0 e0       	ldi	r31, 0x00	; 0
    59ec:	ee 5b       	subi	r30, 0xBE	; 190
    59ee:	fa 4f       	sbci	r31, 0xFA	; 250
    59f0:	c0 83       	st	Z, r28
	//* 	bit0 = n/a
	//* 24 endbyte = 00000000b (SBUS) or (data % 0xCF) (SBUS2)
	//*
	//************************************************************

	if (Config.RxMode == SBUS)
    59f2:	80 91 d2 05 	lds	r24, 0x05D2
    59f6:	82 30       	cpi	r24, 0x02	; 2
    59f8:	09 f0       	breq	.+2      	; 0x59fc <__vector_20+0xac>
    59fa:	90 c0       	rjmp	.+288    	; 0x5b1c <__vector_20+0x1cc>
	{
		// Flag that packet has completed
		if ((bytecount == 24) && ((temp == 0x00) || ((temp % 0xCF) == 0x04)))
    59fc:	80 91 c4 07 	lds	r24, 0x07C4
    5a00:	88 31       	cpi	r24, 0x18	; 24
    5a02:	09 f0       	breq	.+2      	; 0x5a06 <__vector_20+0xb6>
    5a04:	fc c0       	rjmp	.+504    	; 0x5bfe <__vector_20+0x2ae>
    5a06:	cc 23       	and	r28, r28
    5a08:	59 f0       	breq	.+22     	; 0x5a20 <__vector_20+0xd0>
    5a0a:	81 e0       	ldi	r24, 0x01	; 1
    5a0c:	cf 3c       	cpi	r28, 0xCF	; 207
    5a0e:	08 f4       	brcc	.+2      	; 0x5a12 <__vector_20+0xc2>
    5a10:	80 e0       	ldi	r24, 0x00	; 0
    5a12:	91 e3       	ldi	r25, 0x31	; 49
    5a14:	89 9f       	mul	r24, r25
    5a16:	c0 0d       	add	r28, r0
    5a18:	11 24       	eor	r1, r1
    5a1a:	c4 30       	cpi	r28, 0x04	; 4
    5a1c:	09 f0       	breq	.+2      	; 0x5a20 <__vector_20+0xd0>
    5a1e:	ef c0       	rjmp	.+478    	; 0x5bfe <__vector_20+0x2ae>
		{
			// If frame lost, ignore packet
			if ((sBuffer[23] & 0x20) == 0)
    5a20:	80 91 59 05 	lds	r24, 0x0559
    5a24:	85 fd       	sbrc	r24, 5
    5a26:	eb c0       	rjmp	.+470    	; 0x5bfe <__vector_20+0x2ae>
			{
				// RC sync established
				Interrupted = true;
    5a28:	81 e0       	ldi	r24, 0x01	; 1
    5a2a:	80 93 c2 07 	sts	0x07C2, r24
    5a2e:	80 e0       	ldi	r24, 0x00	; 0
    5a30:	90 e0       	ldi	r25, 0x00	; 0

				// Clear channel data
				for (j = 0; j < MAX_RC_CHANNELS; j++)
				{
					RxChannel[j] = 0;
    5a32:	fc 01       	movw	r30, r24
    5a34:	ee 0f       	add	r30, r30
    5a36:	ff 1f       	adc	r31, r31
    5a38:	ee 54       	subi	r30, 0x4E	; 78
    5a3a:	f8 4f       	sbci	r31, 0xF8	; 248
    5a3c:	11 82       	std	Z+1, r1	; 0x01
    5a3e:	10 82       	st	Z, r1
    5a40:	01 96       	adiw	r24, 0x01	; 1
			{
				// RC sync established
				Interrupted = true;

				// Clear channel data
				for (j = 0; j < MAX_RC_CHANNELS; j++)
    5a42:	88 30       	cpi	r24, 0x08	; 8
    5a44:	91 05       	cpc	r25, r1
    5a46:	a9 f7       	brne	.-22     	; 0x5a32 <__vector_20+0xe2>
    5a48:	a8 e5       	ldi	r26, 0x58	; 88
    5a4a:	70 e0       	ldi	r23, 0x00	; 0
    5a4c:	c0 e0       	ldi	r28, 0x00	; 0
    5a4e:	60 e0       	ldi	r22, 0x00	; 0
    5a50:	b1 e0       	ldi	r27, 0x01	; 1
                for (j = 0; j < 88; j++)
                {
                    if (sBuffer[sindex] & (1<<chan_mask))
                    {
						// Place the RC data into the correct channel order for the transmitted system
						RxChannel[Config.ChannelOrder[chan_shift]] |= (1<<data_mask);
    5a52:	21 e0       	ldi	r18, 0x01	; 1
    5a54:	30 e0       	ldi	r19, 0x00	; 0

                // Deconstruct S-Bus data
				// 8 channels * 11 bits = 88 bits
                for (j = 0; j < 88; j++)
                {
                    if (sBuffer[sindex] & (1<<chan_mask))
    5a56:	eb 2f       	mov	r30, r27
    5a58:	f0 e0       	ldi	r31, 0x00	; 0
    5a5a:	ee 5b       	subi	r30, 0xBE	; 190
    5a5c:	fa 4f       	sbci	r31, 0xFA	; 250
    5a5e:	80 81       	ld	r24, Z
    5a60:	90 e0       	ldi	r25, 0x00	; 0
    5a62:	06 2e       	mov	r0, r22
    5a64:	02 c0       	rjmp	.+4      	; 0x5a6a <__vector_20+0x11a>
    5a66:	95 95       	asr	r25
    5a68:	87 95       	ror	r24
    5a6a:	0a 94       	dec	r0
    5a6c:	e2 f7       	brpl	.-8      	; 0x5a66 <__vector_20+0x116>
    5a6e:	80 ff       	sbrs	r24, 0
    5a70:	17 c0       	rjmp	.+46     	; 0x5aa0 <__vector_20+0x150>
                    {
						// Place the RC data into the correct channel order for the transmitted system
						RxChannel[Config.ChannelOrder[chan_shift]] |= (1<<data_mask);
    5a72:	ec 2f       	mov	r30, r28
    5a74:	f0 e0       	ldi	r31, 0x00	; 0
    5a76:	e7 55       	subi	r30, 0x57	; 87
    5a78:	fa 4f       	sbci	r31, 0xFA	; 250
    5a7a:	e1 81       	ldd	r30, Z+1	; 0x01
    5a7c:	f0 e0       	ldi	r31, 0x00	; 0
    5a7e:	ee 0f       	add	r30, r30
    5a80:	ff 1f       	adc	r31, r31
    5a82:	ee 54       	subi	r30, 0x4E	; 78
    5a84:	f8 4f       	sbci	r31, 0xF8	; 248
    5a86:	80 81       	ld	r24, Z
    5a88:	91 81       	ldd	r25, Z+1	; 0x01
    5a8a:	a9 01       	movw	r20, r18
    5a8c:	07 2e       	mov	r0, r23
    5a8e:	02 c0       	rjmp	.+4      	; 0x5a94 <__vector_20+0x144>
    5a90:	44 0f       	add	r20, r20
    5a92:	55 1f       	adc	r21, r21
    5a94:	0a 94       	dec	r0
    5a96:	e2 f7       	brpl	.-8      	; 0x5a90 <__vector_20+0x140>
    5a98:	84 2b       	or	r24, r20
    5a9a:	95 2b       	or	r25, r21
    5a9c:	91 83       	std	Z+1, r25	; 0x01
    5a9e:	80 83       	st	Z, r24
                    }

                    chan_mask++;
    5aa0:	6f 5f       	subi	r22, 0xFF	; 255
                    data_mask++;
    5aa2:	7f 5f       	subi	r23, 0xFF	; 255

                    // If we have done 8 bits, move to next byte in buffer
					if (chan_mask == 8)
    5aa4:	68 30       	cpi	r22, 0x08	; 8
    5aa6:	11 f4       	brne	.+4      	; 0x5aac <__vector_20+0x15c>
                    {
                        chan_mask =0;
                        sindex++;
    5aa8:	bf 5f       	subi	r27, 0xFF	; 255
                    data_mask++;

                    // If we have done 8 bits, move to next byte in buffer
					if (chan_mask == 8)
                    {
                        chan_mask =0;
    5aaa:	60 e0       	ldi	r22, 0x00	; 0
                        sindex++;
                    }

                    // If we have reconstructed all 11 bits of one channel's data (2047)
					// increment the channel number
					if (data_mask == 11)
    5aac:	7b 30       	cpi	r23, 0x0B	; 11
    5aae:	11 f4       	brne	.+4      	; 0x5ab4 <__vector_20+0x164>
                    {
                        data_mask =0;
                        chan_shift++;
    5ab0:	cf 5f       	subi	r28, 0xFF	; 255

                    // If we have reconstructed all 11 bits of one channel's data (2047)
					// increment the channel number
					if (data_mask == 11)
                    {
                        data_mask =0;
    5ab2:	70 e0       	ldi	r23, 0x00	; 0
    5ab4:	a1 50       	subi	r26, 0x01	; 1
				// Start from second byte
				sindex = 1;

                // Deconstruct S-Bus data
				// 8 channels * 11 bits = 88 bits
                for (j = 0; j < 88; j++)
    5ab6:	79 f6       	brne	.-98     	; 0x5a56 <__vector_20+0x106>
    5ab8:	40 e0       	ldi	r20, 0x00	; 0
    5aba:	50 e0       	ldi	r21, 0x00	; 0

				// Convert to  OpenAero2 values (0~2047 -> 2500~4999)
				for (j = 0; j < MAX_RC_CHANNELS; j++)
				{
					// Subtract weird-ass Futaba offset
					itemp16= RxChannel[j] - 1024;	
    5abc:	fa 01       	movw	r30, r20
    5abe:	ee 0f       	add	r30, r30
    5ac0:	ff 1f       	adc	r31, r31
    5ac2:	ee 54       	subi	r30, 0x4E	; 78
    5ac4:	f8 4f       	sbci	r31, 0xF8	; 248
    5ac6:	20 81       	ld	r18, Z
    5ac8:	31 81       	ldd	r19, Z+1	; 0x01
    5aca:	34 50       	subi	r19, 0x04	; 4
					
					// Expand into OpenAero2 units							
					itemp16 = itemp16 + (itemp16 >> 2) + (itemp16 >> 3) + (itemp16 >> 4) + (itemp16 >> 5); 	// Quick multiply by 1.469 :)
    5acc:	c9 01       	movw	r24, r18
    5ace:	95 95       	asr	r25
    5ad0:	87 95       	ror	r24
    5ad2:	95 95       	asr	r25
    5ad4:	87 95       	ror	r24
    5ad6:	82 0f       	add	r24, r18
    5ad8:	93 1f       	adc	r25, r19
    5ada:	b9 01       	movw	r22, r18
    5adc:	a3 e0       	ldi	r26, 0x03	; 3
    5ade:	75 95       	asr	r23
    5ae0:	67 95       	ror	r22
    5ae2:	aa 95       	dec	r26
    5ae4:	e1 f7       	brne	.-8      	; 0x5ade <__vector_20+0x18e>
    5ae6:	86 0f       	add	r24, r22
    5ae8:	97 1f       	adc	r25, r23
    5aea:	b9 01       	movw	r22, r18
    5aec:	b4 e0       	ldi	r27, 0x04	; 4
    5aee:	75 95       	asr	r23
    5af0:	67 95       	ror	r22
    5af2:	ba 95       	dec	r27
    5af4:	e1 f7       	brne	.-8      	; 0x5aee <__vector_20+0x19e>
    5af6:	86 0f       	add	r24, r22
    5af8:	97 1f       	adc	r25, r23
    5afa:	c5 e0       	ldi	r28, 0x05	; 5
    5afc:	35 95       	asr	r19
    5afe:	27 95       	ror	r18
    5b00:	ca 95       	dec	r28
    5b02:	e1 f7       	brne	.-8      	; 0x5afc <__vector_20+0x1ac>
    5b04:	82 0f       	add	r24, r18
    5b06:	93 1f       	adc	r25, r19
					//itemp16 = itemp16 + (itemp16 >> 1); // Quicker mulitply by 1.5

					// Add back in OpenAero2 offset
					RxChannel[j] = itemp16 + 3750;				
    5b08:	8a 55       	subi	r24, 0x5A	; 90
    5b0a:	91 4f       	sbci	r25, 0xF1	; 241
    5b0c:	91 83       	std	Z+1, r25	; 0x01
    5b0e:	80 83       	st	Z, r24
    5b10:	4f 5f       	subi	r20, 0xFF	; 255
    5b12:	5f 4f       	sbci	r21, 0xFF	; 255
                        chan_shift++;
                    }
                }

				// Convert to  OpenAero2 values (0~2047 -> 2500~4999)
				for (j = 0; j < MAX_RC_CHANNELS; j++)
    5b14:	48 30       	cpi	r20, 0x08	; 8
    5b16:	51 05       	cpc	r21, r1
    5b18:	89 f6       	brne	.-94     	; 0x5abc <__vector_20+0x16c>
    5b1a:	71 c0       	rjmp	.+226    	; 0x5bfe <__vector_20+0x2ae>
	//* 0 = 750us, 1023/2047 = 2250us
	//*
	//************************************************************

	// Handle Spektrum format
	if (Config.RxMode == SPEKTRUM)
    5b1c:	83 30       	cpi	r24, 0x03	; 3
    5b1e:	09 f0       	breq	.+2      	; 0x5b22 <__vector_20+0x1d2>
    5b20:	6e c0       	rjmp	.+220    	; 0x5bfe <__vector_20+0x2ae>
	{
		// Process data when all packets received
		if (bytecount >= 15)
    5b22:	80 91 c4 07 	lds	r24, 0x07C4
    5b26:	8f 30       	cpi	r24, 0x0F	; 15
    5b28:	08 f4       	brcc	.+2      	; 0x5b2c <__vector_20+0x1dc>
    5b2a:	69 c0       	rjmp	.+210    	; 0x5bfe <__vector_20+0x2ae>
		{
			// Ahem... ah... just stick the last byte into the buffer manually...(hides)
			sBuffer[15] = temp;
    5b2c:	c0 93 51 05 	sts	0x0551, r28

			// Set start of channel data per format
			sindex = 2; // Channel data from byte 3

			// Work out if this is 10 or 11 bit data
			if (sBuffer[1] & 0x10) 	// 0 for 10 bit resolution 1 for 11 bit resolution
    5b30:	80 91 43 05 	lds	r24, 0x0543
    5b34:	84 ff       	sbrs	r24, 4
    5b36:	04 c0       	rjmp	.+8      	; 0x5b40 <__vector_20+0x1f0>
			{
				chan_mask = 0x78;	// 11 bit (2048)
				data_mask = 0x07;
    5b38:	c7 e0       	ldi	r28, 0x07	; 7
				chan_shift = 0x03;
    5b3a:	63 e0       	ldi	r22, 0x03	; 3
			sindex = 2; // Channel data from byte 3

			// Work out if this is 10 or 11 bit data
			if (sBuffer[1] & 0x10) 	// 0 for 10 bit resolution 1 for 11 bit resolution
			{
				chan_mask = 0x78;	// 11 bit (2048)
    5b3c:	78 e7       	ldi	r23, 0x78	; 120
    5b3e:	03 c0       	rjmp	.+6      	; 0x5b46 <__vector_20+0x1f6>
				chan_shift = 0x03;
			}
			else
			{
				chan_mask = 0x3C;	// 10 bit (1024)
				data_mask = 0x03;
    5b40:	c3 e0       	ldi	r28, 0x03	; 3
				chan_shift = 0x02;
    5b42:	62 e0       	ldi	r22, 0x02	; 2
				data_mask = 0x07;
				chan_shift = 0x03;
			}
			else
			{
				chan_mask = 0x3C;	// 10 bit (1024)
    5b44:	7c e3       	ldi	r23, 0x3C	; 60
    5b46:	e5 e4       	ldi	r30, 0x45	; 69
    5b48:	f5 e0       	ldi	r31, 0x05	; 5
    5b4a:	df 01       	movw	r26, r30
    5b4c:	11 97       	sbiw	r26, 0x01	; 1
			// Work out which channel the data is intended for from the channel number data
			// Channels can also be in the second packet. Spektrum has 7 channels per packet.
			for (j = 0; j < 7; j++)
			{
				// Extract channel number
				ch_num = (sBuffer[sindex] & chan_mask) >> chan_shift;
    5b4e:	2c 91       	ld	r18, X
    5b50:	82 2f       	mov	r24, r18
    5b52:	87 23       	and	r24, r23
    5b54:	90 e0       	ldi	r25, 0x00	; 0
    5b56:	06 2e       	mov	r0, r22
    5b58:	02 c0       	rjmp	.+4      	; 0x5b5e <__vector_20+0x20e>
    5b5a:	95 95       	asr	r25
    5b5c:	87 95       	ror	r24
    5b5e:	0a 94       	dec	r0
    5b60:	e2 f7       	brpl	.-8      	; 0x5b5a <__vector_20+0x20a>
    5b62:	80 93 d9 07 	sts	0x07D9, r24

				// Reconstruct channel data
				temp16 = ((sBuffer[sindex] & data_mask) << 8) + sBuffer[sindex + 1];
    5b66:	80 81       	ld	r24, Z

				// Expand to OpenAero2 units if a valid channel
				// Blank channels have the channel number of 16
				if (ch_num < MAX_RC_CHANNELS)
    5b68:	90 91 d9 07 	lds	r25, 0x07D9
    5b6c:	98 30       	cpi	r25, 0x08	; 8
    5b6e:	f0 f5       	brcc	.+124    	; 0x5bec <__vector_20+0x29c>
			{
				// Extract channel number
				ch_num = (sBuffer[sindex] & chan_mask) >> chan_shift;

				// Reconstruct channel data
				temp16 = ((sBuffer[sindex] & data_mask) << 8) + sBuffer[sindex + 1];
    5b70:	2c 23       	and	r18, r28
    5b72:	30 e0       	ldi	r19, 0x00	; 0
    5b74:	32 2f       	mov	r19, r18
    5b76:	22 27       	eor	r18, r18
    5b78:	28 0f       	add	r18, r24
    5b7a:	31 1d       	adc	r19, r1
				// Expand to OpenAero2 units if a valid channel
				// Blank channels have the channel number of 16
				if (ch_num < MAX_RC_CHANNELS)
				{
					// Subtract Spektrum center offset
					if (chan_shift == 0x03) // 11-bit
    5b7c:	63 30       	cpi	r22, 0x03	; 3
    5b7e:	11 f4       	brne	.+4      	; 0x5b84 <__vector_20+0x234>
					{
						itemp16 = temp16 - 1024;
    5b80:	34 50       	subi	r19, 0x04	; 4
    5b82:	01 c0       	rjmp	.+2      	; 0x5b86 <__vector_20+0x236>
					}
					else
					{
						itemp16 = temp16 - 512;	
    5b84:	32 50       	subi	r19, 0x02	; 2
					}					

					// Quick multiply by 2.93
					itemp16 = (itemp16 << 1) + (itemp16 >> 1) + (itemp16 >> 2) + (itemp16 >> 3) + (itemp16 >> 4); 
    5b86:	c9 01       	movw	r24, r18
    5b88:	88 0f       	add	r24, r24
    5b8a:	99 1f       	adc	r25, r25
    5b8c:	a9 01       	movw	r20, r18
    5b8e:	55 95       	asr	r21
    5b90:	47 95       	ror	r20
    5b92:	84 0f       	add	r24, r20
    5b94:	95 1f       	adc	r25, r21
    5b96:	a9 01       	movw	r20, r18
    5b98:	55 95       	asr	r21
    5b9a:	47 95       	ror	r20
    5b9c:	55 95       	asr	r21
    5b9e:	47 95       	ror	r20
    5ba0:	84 0f       	add	r24, r20
    5ba2:	95 1f       	adc	r25, r21
    5ba4:	a9 01       	movw	r20, r18
    5ba6:	a3 e0       	ldi	r26, 0x03	; 3
    5ba8:	55 95       	asr	r21
    5baa:	47 95       	ror	r20
    5bac:	aa 95       	dec	r26
    5bae:	e1 f7       	brne	.-8      	; 0x5ba8 <__vector_20+0x258>
    5bb0:	84 0f       	add	r24, r20
    5bb2:	95 1f       	adc	r25, r21
    5bb4:	b4 e0       	ldi	r27, 0x04	; 4
    5bb6:	35 95       	asr	r19
    5bb8:	27 95       	ror	r18
    5bba:	ba 95       	dec	r27
    5bbc:	e1 f7       	brne	.-8      	; 0x5bb6 <__vector_20+0x266>
    5bbe:	82 0f       	add	r24, r18
    5bc0:	93 1f       	adc	r25, r19

					if (chan_shift == 0x03) // 11-bit
    5bc2:	63 30       	cpi	r22, 0x03	; 3
    5bc4:	11 f4       	brne	.+4      	; 0x5bca <__vector_20+0x27a>
					{
						// Divide in case of 11-bit value
						itemp16 = itemp16 >> 1;								
    5bc6:	95 95       	asr	r25
    5bc8:	87 95       	ror	r24
					}

					// Add back in OpenAero2 offset
					itemp16 += 3750;										

					RxChannel[Config.ChannelOrder[ch_num]] = itemp16;
    5bca:	a0 91 d9 07 	lds	r26, 0x07D9
    5bce:	b0 e0       	ldi	r27, 0x00	; 0
    5bd0:	a7 55       	subi	r26, 0x57	; 87
    5bd2:	ba 4f       	sbci	r27, 0xFA	; 250
    5bd4:	11 96       	adiw	r26, 0x01	; 1
    5bd6:	ac 91       	ld	r26, X
    5bd8:	b0 e0       	ldi	r27, 0x00	; 0
						// Divide in case of 11-bit value
						itemp16 = itemp16 >> 1;								
					}

					// Add back in OpenAero2 offset
					itemp16 += 3750;										
    5bda:	8a 55       	subi	r24, 0x5A	; 90
    5bdc:	91 4f       	sbci	r25, 0xF1	; 241

					RxChannel[Config.ChannelOrder[ch_num]] = itemp16;
    5bde:	aa 0f       	add	r26, r26
    5be0:	bb 1f       	adc	r27, r27
    5be2:	ae 54       	subi	r26, 0x4E	; 78
    5be4:	b8 4f       	sbci	r27, 0xF8	; 248
    5be6:	11 96       	adiw	r26, 0x01	; 1
    5be8:	9c 93       	st	X, r25
    5bea:	8e 93       	st	-X, r24
    5bec:	32 96       	adiw	r30, 0x02	; 2
				chan_shift = 0x02;
			}

			// Work out which channel the data is intended for from the channel number data
			// Channels can also be in the second packet. Spektrum has 7 channels per packet.
			for (j = 0; j < 7; j++)
    5bee:	45 e0       	ldi	r20, 0x05	; 5
    5bf0:	e3 35       	cpi	r30, 0x53	; 83
    5bf2:	f4 07       	cpc	r31, r20
    5bf4:	09 f0       	breq	.+2      	; 0x5bf8 <__vector_20+0x2a8>
    5bf6:	a9 cf       	rjmp	.-174    	; 0x5b4a <__vector_20+0x1fa>
				sindex += 2;

			} // For each pair of bytes
			
			// RC sync established
			Interrupted = true;
    5bf8:	81 e0       	ldi	r24, 0x01	; 1
    5bfa:	80 93 c2 07 	sts	0x07C2, r24
	//************************************************************
	//* Common exit code
	//************************************************************

	// Increment byte count
	bytecount++;
    5bfe:	80 91 c4 07 	lds	r24, 0x07C4
    5c02:	8f 5f       	subi	r24, 0xFF	; 255
    5c04:	80 93 c4 07 	sts	0x07C4, r24
}
    5c08:	ff 91       	pop	r31
    5c0a:	ef 91       	pop	r30
    5c0c:	cf 91       	pop	r28
    5c0e:	bf 91       	pop	r27
    5c10:	af 91       	pop	r26
    5c12:	9f 91       	pop	r25
    5c14:	8f 91       	pop	r24
    5c16:	7f 91       	pop	r23
    5c18:	6f 91       	pop	r22
    5c1a:	5f 91       	pop	r21
    5c1c:	4f 91       	pop	r20
    5c1e:	3f 91       	pop	r19
    5c20:	2f 91       	pop	r18
    5c22:	0f 90       	pop	r0
    5c24:	0f be       	out	0x3f, r0	; 63
    5c26:	0f 90       	pop	r0
    5c28:	1f 90       	pop	r1
    5c2a:	18 95       	reti

00005c2c <Disable_RC_Interrupts>:
// Disable RC interrupts as required
//***********************************************************

void Disable_RC_Interrupts(void)
{
	cli();	// Disable interrupts
    5c2c:	f8 94       	cli

	// Disable PWM input interrupts
	PCMSK1 = 0;							// Disable AUX
    5c2e:	10 92 6c 00 	sts	0x006C, r1
	PCMSK3 = 0;							// Disable THR
    5c32:	10 92 73 00 	sts	0x0073, r1
	EIMSK  = 0;							// Disable INT0, 1 and 2
    5c36:	1d ba       	out	0x1d, r1	; 29

	// Disable receiver (flushes buffer)
	UCSR0B &= ~(1 << RXEN0);	
    5c38:	e1 ec       	ldi	r30, 0xC1	; 193
    5c3a:	f0 e0       	ldi	r31, 0x00	; 0
    5c3c:	80 81       	ld	r24, Z
    5c3e:	8f 7e       	andi	r24, 0xEF	; 239
    5c40:	80 83       	st	Z, r24

	// Disable serial interrupt	
	UCSR0B &= ~(1 << RXCIE0);
    5c42:	80 81       	ld	r24, Z
    5c44:	8f 77       	andi	r24, 0x7F	; 127
    5c46:	80 83       	st	Z, r24
	
	// Clear interrupt flags
	PCIFR	= 0x0F;						// Clear PCIF0~PCIF3 interrupt flags
    5c48:	8f e0       	ldi	r24, 0x0F	; 15
    5c4a:	8b bb       	out	0x1b, r24	; 27
	EIFR	= 0x00; 					// Clear INT0~INT2 interrupt flags (Elevator, Aileron, Rudder/CPPM)
    5c4c:	1c ba       	out	0x1c, r1	; 28
	
	sei(); // Re-enable interrupts
    5c4e:	78 94       	sei
    5c50:	08 95       	ret

00005c52 <init_int>:
// Reconfigure RC interrupts
//***********************************************************

void init_int(void)
{
	cli();	// Disable interrupts
    5c52:	f8 94       	cli
	
	switch (Config.RxMode)
    5c54:	80 91 d2 05 	lds	r24, 0x05D2
    5c58:	81 30       	cpi	r24, 0x01	; 1
    5c5a:	c9 f0       	breq	.+50     	; 0x5c8e <init_int+0x3c>
    5c5c:	44 f4       	brge	.+16     	; 0x5c6e <init_int+0x1c>
    5c5e:	81 11       	cpse	r24, r1
    5c60:	2c c0       	rjmp	.+88     	; 0x5cba <init_int+0x68>
	{
		case CPPM_MODE:
			PCMSK1 = 0;							// Disable AUX
    5c62:	10 92 6c 00 	sts	0x006C, r1
			PCMSK3 = 0;							// Disable THR
    5c66:	10 92 73 00 	sts	0x0073, r1
			EIMSK = 0x04;						// Enable INT2 (Rudder/CPPM input)
    5c6a:	84 e0       	ldi	r24, 0x04	; 4
    5c6c:	1b c0       	rjmp	.+54     	; 0x5ca4 <init_int+0x52>

void init_int(void)
{
	cli();	// Disable interrupts
	
	switch (Config.RxMode)
    5c6e:	84 30       	cpi	r24, 0x04	; 4
    5c70:	24 f5       	brge	.+72     	; 0x5cba <init_int+0x68>
			break;

		case SBUS:
		case SPEKTRUM:
			// Disable PWM input interrupts
			PCMSK1 = 0;							// Disable AUX
    5c72:	10 92 6c 00 	sts	0x006C, r1
			PCMSK3 = 0;							// Disable THR
    5c76:	10 92 73 00 	sts	0x0073, r1
			EIMSK  = 0;							// Disable INT0, 1 and 2 
    5c7a:	1d ba       	out	0x1d, r1	; 29
			
			// Enable serial receiver and interrupts
			UCSR0B |= (1 << RXCIE0);			// Enable serial interrupt
    5c7c:	80 91 c1 00 	lds	r24, 0x00C1
    5c80:	80 68       	ori	r24, 0x80	; 128
    5c82:	80 93 c1 00 	sts	0x00C1, r24
			UCSR0B |= (1 << RXEN0);				// Enable receiver
    5c86:	80 91 c1 00 	lds	r24, 0x00C1
    5c8a:	80 61       	ori	r24, 0x10	; 16
    5c8c:	14 c0       	rjmp	.+40     	; 0x5cb6 <init_int+0x64>
			UCSR0B &= ~(1 << RXCIE0);			// Disable serial interrupt
			UCSR0B &= ~(1 << RXEN0);			// Disable receiver and flush buffer
			break;

		case PWM:
			PCMSK1 |= (1 << PCINT8);			// PB0 (Aux pin change mask)
    5c8e:	80 91 6c 00 	lds	r24, 0x006C
    5c92:	81 60       	ori	r24, 0x01	; 1
    5c94:	80 93 6c 00 	sts	0x006C, r24
			PCMSK3 |= (1 << PCINT24);			// PD0 (Throttle pin change mask)
    5c98:	80 91 73 00 	lds	r24, 0x0073
    5c9c:	81 60       	ori	r24, 0x01	; 1
    5c9e:	80 93 73 00 	sts	0x0073, r24
			EIMSK  = 0x07;						// Enable INT0, 1 and 2 
    5ca2:	87 e0       	ldi	r24, 0x07	; 7
    5ca4:	8d bb       	out	0x1d, r24	; 29
			UCSR0B &= ~(1 << RXCIE0);			// Disable serial interrupt
    5ca6:	80 91 c1 00 	lds	r24, 0x00C1
    5caa:	8f 77       	andi	r24, 0x7F	; 127
    5cac:	80 93 c1 00 	sts	0x00C1, r24
			UCSR0B &= ~(1 << RXEN0);			// Disable receiver and flush buffer
    5cb0:	80 91 c1 00 	lds	r24, 0x00C1
    5cb4:	8f 7e       	andi	r24, 0xEF	; 239
			PCMSK3 = 0;							// Disable THR
			EIMSK  = 0;							// Disable INT0, 1 and 2 
			
			// Enable serial receiver and interrupts
			UCSR0B |= (1 << RXCIE0);			// Enable serial interrupt
			UCSR0B |= (1 << RXEN0);				// Enable receiver
    5cb6:	80 93 c1 00 	sts	0x00C1, r24
		default:
			break;	
	}	

	// Clear interrupt flags
	PCIFR	= 0x0F;								// Clear PCIF0~PCIF3 interrupt flags
    5cba:	8f e0       	ldi	r24, 0x0F	; 15
    5cbc:	8b bb       	out	0x1b, r24	; 27
	EIFR	= 0x00; 							// Clear INT0~INT2 interrupt flags (Elevator, Aileron, Rudder/CPPM)
    5cbe:	1c ba       	out	0x1c, r1	; 28

	sei(); // Re-enable interrupts
    5cc0:	78 94       	sei
    5cc2:	08 95       	ret

00005cc4 <print_menu_frame>:
// style = menu style (0 = main, 1 = sub)
//************************************************************
void print_menu_frame(uint8_t style)
{
	// Print bottom markers
	if (style == 0)
    5cc4:	81 11       	cpse	r24, r1
    5cc6:	27 c0       	rjmp	.+78     	; 0x5d16 <print_menu_frame+0x52>
	{
		LCD_Display_Text(12, (const unsigned char*)Wingdings, 0, 57); 	// Left
    5cc8:	29 e3       	ldi	r18, 0x39	; 57
    5cca:	30 e0       	ldi	r19, 0x00	; 0
    5ccc:	40 e0       	ldi	r20, 0x00	; 0
    5cce:	50 e0       	ldi	r21, 0x00	; 0
    5cd0:	65 ef       	ldi	r22, 0xF5	; 245
    5cd2:	70 e0       	ldi	r23, 0x00	; 0
    5cd4:	8c e0       	ldi	r24, 0x0C	; 12
    5cd6:	90 e0       	ldi	r25, 0x00	; 0
    5cd8:	0e 94 20 22 	call	0x4440	; 0x4440 <LCD_Display_Text>
		LCD_Display_Text(10, (const unsigned char*)Wingdings, 38, 59); 	// Up
    5cdc:	2b e3       	ldi	r18, 0x3B	; 59
    5cde:	30 e0       	ldi	r19, 0x00	; 0
    5ce0:	46 e2       	ldi	r20, 0x26	; 38
    5ce2:	50 e0       	ldi	r21, 0x00	; 0
    5ce4:	65 ef       	ldi	r22, 0xF5	; 245
    5ce6:	70 e0       	ldi	r23, 0x00	; 0
    5ce8:	8a e0       	ldi	r24, 0x0A	; 10
    5cea:	90 e0       	ldi	r25, 0x00	; 0
    5cec:	0e 94 20 22 	call	0x4440	; 0x4440 <LCD_Display_Text>
		LCD_Display_Text(9, (const unsigned char*)Wingdings, 80, 59); 	// Down
    5cf0:	2b e3       	ldi	r18, 0x3B	; 59
    5cf2:	30 e0       	ldi	r19, 0x00	; 0
    5cf4:	40 e5       	ldi	r20, 0x50	; 80
    5cf6:	50 e0       	ldi	r21, 0x00	; 0
    5cf8:	65 ef       	ldi	r22, 0xF5	; 245
    5cfa:	70 e0       	ldi	r23, 0x00	; 0
    5cfc:	89 e0       	ldi	r24, 0x09	; 9
    5cfe:	90 e0       	ldi	r25, 0x00	; 0
    5d00:	0e 94 20 22 	call	0x4440	; 0x4440 <LCD_Display_Text>
		LCD_Display_Text(11, (const unsigned char*)Wingdings, 120, 57); // Right
    5d04:	29 e3       	ldi	r18, 0x39	; 57
    5d06:	30 e0       	ldi	r19, 0x00	; 0
    5d08:	48 e7       	ldi	r20, 0x78	; 120
    5d0a:	50 e0       	ldi	r21, 0x00	; 0
    5d0c:	65 ef       	ldi	r22, 0xF5	; 245
    5d0e:	70 e0       	ldi	r23, 0x00	; 0
    5d10:	8b e0       	ldi	r24, 0x0B	; 11
    5d12:	90 e0       	ldi	r25, 0x00	; 0
    5d14:	26 c0       	rjmp	.+76     	; 0x5d62 <print_menu_frame+0x9e>
	}
	else
	{
		LCD_Display_Text(16, (const unsigned char*)Verdana8, 0, 54); 	// Clear
    5d16:	26 e3       	ldi	r18, 0x36	; 54
    5d18:	30 e0       	ldi	r19, 0x00	; 0
    5d1a:	40 e0       	ldi	r20, 0x00	; 0
    5d1c:	50 e0       	ldi	r21, 0x00	; 0
    5d1e:	6d e0       	ldi	r22, 0x0D	; 13
    5d20:	7a e0       	ldi	r23, 0x0A	; 10
    5d22:	80 e1       	ldi	r24, 0x10	; 16
    5d24:	90 e0       	ldi	r25, 0x00	; 0
    5d26:	0e 94 20 22 	call	0x4440	; 0x4440 <LCD_Display_Text>
		LCD_Display_Text(10, (const unsigned char*)Wingdings, 38, 59);	// Up
    5d2a:	2b e3       	ldi	r18, 0x3B	; 59
    5d2c:	30 e0       	ldi	r19, 0x00	; 0
    5d2e:	46 e2       	ldi	r20, 0x26	; 38
    5d30:	50 e0       	ldi	r21, 0x00	; 0
    5d32:	65 ef       	ldi	r22, 0xF5	; 245
    5d34:	70 e0       	ldi	r23, 0x00	; 0
    5d36:	8a e0       	ldi	r24, 0x0A	; 10
    5d38:	90 e0       	ldi	r25, 0x00	; 0
    5d3a:	0e 94 20 22 	call	0x4440	; 0x4440 <LCD_Display_Text>
		LCD_Display_Text(9, (const unsigned char*)Wingdings, 80, 59);	// Down
    5d3e:	2b e3       	ldi	r18, 0x3B	; 59
    5d40:	30 e0       	ldi	r19, 0x00	; 0
    5d42:	40 e5       	ldi	r20, 0x50	; 80
    5d44:	50 e0       	ldi	r21, 0x00	; 0
    5d46:	65 ef       	ldi	r22, 0xF5	; 245
    5d48:	70 e0       	ldi	r23, 0x00	; 0
    5d4a:	89 e0       	ldi	r24, 0x09	; 9
    5d4c:	90 e0       	ldi	r25, 0x00	; 0
    5d4e:	0e 94 20 22 	call	0x4440	; 0x4440 <LCD_Display_Text>
		LCD_Display_Text(17, (const unsigned char*)Verdana8, 103, 54);	// Save
    5d52:	26 e3       	ldi	r18, 0x36	; 54
    5d54:	30 e0       	ldi	r19, 0x00	; 0
    5d56:	47 e6       	ldi	r20, 0x67	; 103
    5d58:	50 e0       	ldi	r21, 0x00	; 0
    5d5a:	6d e0       	ldi	r22, 0x0D	; 13
    5d5c:	7a e0       	ldi	r23, 0x0A	; 10
    5d5e:	81 e1       	ldi	r24, 0x11	; 17
    5d60:	90 e0       	ldi	r25, 0x00	; 0
    5d62:	0e 94 20 22 	call	0x4440	; 0x4440 <LCD_Display_Text>
	}

	// Write from buffer
	write_buffer(buffer);
    5d66:	80 e0       	ldi	r24, 0x00	; 0
    5d68:	91 e0       	ldi	r25, 0x01	; 1
    5d6a:	0c 94 41 20 	jmp	0x4082	; 0x4082 <write_buffer>

00005d6e <get_menu_range>:
//************************************************************
// get_menu_range - Get range info from PROGMEM for a specific item
//************************************************************

menu_range_t get_menu_range(const unsigned char* menu_ranges, uint8_t menuitem)
{
    5d6e:	cf 93       	push	r28
    5d70:	df 93       	push	r29
    5d72:	cd b7       	in	r28, 0x3d	; 61
    5d74:	de b7       	in	r29, 0x3e	; 62
    5d76:	2a 97       	sbiw	r28, 0x0a	; 10
    5d78:	0f b6       	in	r0, 0x3f	; 63
    5d7a:	f8 94       	cli
    5d7c:	de bf       	out	0x3e, r29	; 62
    5d7e:	0f be       	out	0x3f, r0	; 63
    5d80:	cd bf       	out	0x3d, r28	; 61
	menu_range_t	range;
	memcpy_P(&range, &menu_ranges[menuitem * sizeof(range)], sizeof(range));
    5d82:	25 e0       	ldi	r18, 0x05	; 5
    5d84:	62 9f       	mul	r22, r18
    5d86:	80 0d       	add	r24, r0
    5d88:	91 1d       	adc	r25, r1
    5d8a:	11 24       	eor	r1, r1
    5d8c:	bc 01       	movw	r22, r24
    5d8e:	45 e0       	ldi	r20, 0x05	; 5
    5d90:	50 e0       	ldi	r21, 0x00	; 0
    5d92:	ce 01       	movw	r24, r28
    5d94:	06 96       	adiw	r24, 0x06	; 6
    5d96:	0e 94 e7 48 	call	0x91ce	; 0x91ce <memcpy_P>
	return (range);
    5d9a:	85 e0       	ldi	r24, 0x05	; 5
    5d9c:	fe 01       	movw	r30, r28
    5d9e:	36 96       	adiw	r30, 0x06	; 6
    5da0:	de 01       	movw	r26, r28
    5da2:	11 96       	adiw	r26, 0x01	; 1
    5da4:	01 90       	ld	r0, Z+
    5da6:	0d 92       	st	X+, r0
    5da8:	8a 95       	dec	r24
    5daa:	e1 f7       	brne	.-8      	; 0x5da4 <get_menu_range+0x36>
    5dac:	29 81       	ldd	r18, Y+1	; 0x01
    5dae:	3a 81       	ldd	r19, Y+2	; 0x02
    5db0:	4b 81       	ldd	r20, Y+3	; 0x03
    5db2:	5c 81       	ldd	r21, Y+4	; 0x04
    5db4:	6d 81       	ldd	r22, Y+5	; 0x05
}
    5db6:	70 e0       	ldi	r23, 0x00	; 0
    5db8:	80 e0       	ldi	r24, 0x00	; 0
    5dba:	90 e0       	ldi	r25, 0x00	; 0
    5dbc:	2a 96       	adiw	r28, 0x0a	; 10
    5dbe:	0f b6       	in	r0, 0x3f	; 63
    5dc0:	f8 94       	cli
    5dc2:	de bf       	out	0x3e, r29	; 62
    5dc4:	0f be       	out	0x3f, r0	; 63
    5dc6:	cd bf       	out	0x3d, r28	; 61
    5dc8:	df 91       	pop	r29
    5dca:	cf 91       	pop	r28
    5dcc:	08 95       	ret

00005dce <print_menu_text>:
// x = horizontal location on screen
// y = vertical location on screen
//************************************************************

void print_menu_text(int16_t values, uint8_t style, uint16_t text_link, uint8_t x, uint8_t y)
{
    5dce:	0f 93       	push	r16
    5dd0:	1f 93       	push	r17
    5dd2:	cf 93       	push	r28
    5dd4:	df 93       	push	r29
    5dd6:	fa 01       	movw	r30, r20
    5dd8:	10 e0       	ldi	r17, 0x00	; 0
    5dda:	c2 2f       	mov	r28, r18
    5ddc:	d0 e0       	ldi	r29, 0x00	; 0
	if ((style == 0) || (style == 2) || (style == 3)) // Numeral
    5dde:	66 23       	and	r22, r22
    5de0:	19 f0       	breq	.+6      	; 0x5de8 <print_menu_text+0x1a>
    5de2:	62 50       	subi	r22, 0x02	; 2
    5de4:	62 30       	cpi	r22, 0x02	; 2
    5de6:	78 f4       	brcc	.+30     	; 0x5e06 <print_menu_text+0x38>
    5de8:	4a e0       	ldi	r20, 0x0A	; 10
    5dea:	6b e5       	ldi	r22, 0x5B	; 91
    5dec:	75 e0       	ldi	r23, 0x05	; 5
    5dee:	0e 94 02 49 	call	0x9204	; 0x9204 <__itoa_ncheck>
	{
		mugui_lcd_puts(itoa(values,pBuffer,10),(const unsigned char*)Verdana8,x,y);
    5df2:	98 01       	movw	r18, r16
    5df4:	ae 01       	movw	r20, r28
    5df6:	6d e0       	ldi	r22, 0x0D	; 13
    5df8:	7a e0       	ldi	r23, 0x0A	; 10
	}
	else
	{
		LCD_Display_Text(text_link, (const unsigned char*)Verdana8,x,y);
	}
}
    5dfa:	df 91       	pop	r29
    5dfc:	cf 91       	pop	r28
    5dfe:	1f 91       	pop	r17
    5e00:	0f 91       	pop	r16

void print_menu_text(int16_t values, uint8_t style, uint16_t text_link, uint8_t x, uint8_t y)
{
	if ((style == 0) || (style == 2) || (style == 3)) // Numeral
	{
		mugui_lcd_puts(itoa(values,pBuffer,10),(const unsigned char*)Verdana8,x,y);
    5e02:	0c 94 9e 3e 	jmp	0x7d3c	; 0x7d3c <mugui_lcd_puts>
	}
	else
	{
		LCD_Display_Text(text_link, (const unsigned char*)Verdana8,x,y);
    5e06:	98 01       	movw	r18, r16
    5e08:	ae 01       	movw	r20, r28
    5e0a:	6d e0       	ldi	r22, 0x0D	; 13
    5e0c:	7a e0       	ldi	r23, 0x0A	; 10
    5e0e:	cf 01       	movw	r24, r30
	}
}
    5e10:	df 91       	pop	r29
    5e12:	cf 91       	pop	r28
    5e14:	1f 91       	pop	r17
    5e16:	0f 91       	pop	r16
	{
		mugui_lcd_puts(itoa(values,pBuffer,10),(const unsigned char*)Verdana8,x,y);
	}
	else
	{
		LCD_Display_Text(text_link, (const unsigned char*)Verdana8,x,y);
    5e18:	0c 94 20 22 	jmp	0x4440	; 0x4440 <LCD_Display_Text>

00005e1c <poll_buttons>:
// Poll buttons, wait until something pressed, debounce and 
// return button info.
//************************************************************

uint8_t poll_buttons(bool acceleration)
{
    5e1c:	68 2f       	mov	r22, r24
	static uint8_t button_count = 0;
	uint8_t buttons = 0;

	button = (PINB & 0xf0); // button is global, buttons is local
    5e1e:	93 b1       	in	r25, 0x03	; 3
    5e20:	90 7f       	andi	r25, 0xF0	; 240
    5e22:	90 93 e2 07 	sts	0x07E2, r25
//************************************************************

uint8_t poll_buttons(bool acceleration)
{
	static uint8_t button_count = 0;
	uint8_t buttons = 0;
    5e26:	80 e0       	ldi	r24, 0x00	; 0
			button = buttons;
		}

		// Reset button acceleration
		button_count = 0;
		button_multiplier = 1;
    5e28:	71 e0       	ldi	r23, 0x01	; 1
	static uint8_t button_count = 0;
	uint8_t buttons = 0;

	button = (PINB & 0xf0); // button is global, buttons is local

	while (button == NONE)					
    5e2a:	90 91 e2 07 	lds	r25, 0x07E2
    5e2e:	90 3f       	cpi	r25, 0xF0	; 240
    5e30:	c9 f4       	brne	.+50     	; 0x5e64 <poll_buttons+0x48>
	{
		buttons = (PINB & 0xf0);	
    5e32:	83 b1       	in	r24, 0x03	; 3
    5e34:	80 7f       	andi	r24, 0xF0	; 240
    5e36:	e7 ea       	ldi	r30, 0xA7	; 167
    5e38:	f1 e6       	ldi	r31, 0x61	; 97
    5e3a:	31 97       	sbiw	r30, 0x01	; 1
    5e3c:	f1 f7       	brne	.-4      	; 0x5e3a <poll_buttons+0x1e>
    5e3e:	00 c0       	rjmp	.+0      	; 0x5e40 <poll_buttons+0x24>
    5e40:	00 00       	nop
		_delay_ms(5);

		if (buttons != (PINB & 0xf0))
    5e42:	23 b1       	in	r18, 0x03	; 3
    5e44:	48 2f       	mov	r20, r24
    5e46:	50 e0       	ldi	r21, 0x00	; 0
    5e48:	20 7f       	andi	r18, 0xF0	; 240
    5e4a:	30 e0       	ldi	r19, 0x00	; 0
    5e4c:	42 17       	cp	r20, r18
    5e4e:	53 07       	cpc	r21, r19
    5e50:	19 f4       	brne	.+6      	; 0x5e58 <poll_buttons+0x3c>
		{
			buttons = 0; // Buttons different
		}
		else // Buttons the same - update global
		{
			button = buttons;
    5e52:	80 93 e2 07 	sts	0x07E2, r24
    5e56:	01 c0       	rjmp	.+2      	; 0x5e5a <poll_buttons+0x3e>
		buttons = (PINB & 0xf0);	
		_delay_ms(5);

		if (buttons != (PINB & 0xf0))
		{
			buttons = 0; // Buttons different
    5e58:	80 e0       	ldi	r24, 0x00	; 0
		{
			button = buttons;
		}

		// Reset button acceleration
		button_count = 0;
    5e5a:	10 92 2e 05 	sts	0x052E, r1
		button_multiplier = 1;
    5e5e:	70 93 e3 07 	sts	0x07E3, r23
    5e62:	e3 cf       	rjmp	.-58     	; 0x5e2a <poll_buttons+0xe>
	}

	// Check for buttons being held down if requested
	if ((button != NONE) && (acceleration))
    5e64:	66 23       	and	r22, r22
    5e66:	71 f0       	breq	.+28     	; 0x5e84 <poll_buttons+0x68>
	{
		// Count the number of times incremented
		button_count++; 
    5e68:	90 91 2e 05 	lds	r25, 0x052E
    5e6c:	9f 5f       	subi	r25, 0xFF	; 255
    5e6e:	90 93 2e 05 	sts	0x052E, r25
		if (button_count >= 10)
    5e72:	9a 30       	cpi	r25, 0x0A	; 10
    5e74:	38 f0       	brcs	.+14     	; 0x5e84 <poll_buttons+0x68>
		{
			button_count = 0;
    5e76:	10 92 2e 05 	sts	0x052E, r1
			button_multiplier ++;
    5e7a:	90 91 e3 07 	lds	r25, 0x07E3
    5e7e:	9f 5f       	subi	r25, 0xFF	; 255
    5e80:	90 93 e3 07 	sts	0x07E3, r25
		}
	}

	return buttons;
}
    5e84:	08 95       	ret

00005e86 <do_menu_item>:
// servo_enable = Enable real-time updating of servo position
// servo_number = Servo number to update
//************************************************************

void do_menu_item(uint16_t menuitem, int8_t *values, uint8_t mult, menu_range_t range, int8_t offset, uint16_t text_link, bool servo_enable, int16_t servo_number)
{
    5e86:	2f 92       	push	r2
    5e88:	3f 92       	push	r3
    5e8a:	4f 92       	push	r4
    5e8c:	5f 92       	push	r5
    5e8e:	6f 92       	push	r6
    5e90:	7f 92       	push	r7
    5e92:	8f 92       	push	r8
    5e94:	9f 92       	push	r9
    5e96:	af 92       	push	r10
    5e98:	bf 92       	push	r11
    5e9a:	cf 92       	push	r12
    5e9c:	df 92       	push	r13
    5e9e:	ef 92       	push	r14
    5ea0:	ff 92       	push	r15
    5ea2:	0f 93       	push	r16
    5ea4:	1f 93       	push	r17
    5ea6:	cf 93       	push	r28
    5ea8:	df 93       	push	r29
    5eaa:	cd b7       	in	r28, 0x3d	; 61
    5eac:	de b7       	in	r29, 0x3e	; 62
    5eae:	69 97       	sbiw	r28, 0x19	; 25
    5eb0:	0f b6       	in	r0, 0x3f	; 63
    5eb2:	f8 94       	cli
    5eb4:	de bf       	out	0x3e, r29	; 62
    5eb6:	0f be       	out	0x3f, r0	; 63
    5eb8:	cd bf       	out	0x3d, r28	; 61
    5eba:	3c 01       	movw	r6, r24
    5ebc:	79 8b       	std	Y+17, r23	; 0x11
    5ebe:	68 8b       	std	Y+16, r22	; 0x10
    5ec0:	4a 87       	std	Y+10, r20	; 0x0a
    5ec2:	ed 82       	std	Y+5, r14	; 0x05
    5ec4:	fe 82       	std	Y+6, r15	; 0x06
    5ec6:	0f 83       	std	Y+7, r16	; 0x07
    5ec8:	41 2e       	mov	r4, r17
    5eca:	18 87       	std	Y+8, r17	; 0x08
    5ecc:	29 87       	std	Y+9, r18	; 0x09
    5ece:	bd 8a       	std	Y+21, r11	; 0x15
    5ed0:	ac 8a       	std	Y+20, r10	; 0x14
    5ed2:	4e 2d       	mov	r20, r14
    5ed4:	3f 2d       	mov	r19, r15
    5ed6:	0d 87       	std	Y+13, r16	; 0x0d
	mugui_size16_t size;
	int16_t temp16;
	int16_t value = (int8_t)*values;
    5ed8:	fb 01       	movw	r30, r22
    5eda:	20 81       	ld	r18, Z
    5edc:	a2 2e       	mov	r10, r18
    5ede:	bb 24       	eor	r11, r11
    5ee0:	a7 fc       	sbrc	r10, 7
    5ee2:	b0 94       	com	r11
	uint8_t button_inc = 0;
	bool	button_lock = false;
	bool	first_time = true;

	// Multiply value for display only if style is 2
	if (range.style == 2)
    5ee4:	f2 e0       	ldi	r31, 0x02	; 2
    5ee6:	1f 13       	cpse	r17, r31
    5ee8:	05 c0       	rjmp	.+10     	; 0x5ef4 <do_menu_item+0x6e>
	{
		value = value * mult;
    5eea:	5a 85       	ldd	r21, Y+10	; 0x0a
    5eec:	25 03       	mulsu	r18, r21
    5eee:	50 01       	movw	r10, r0
    5ef0:	11 24       	eor	r1, r1
    5ef2:	02 c0       	rjmp	.+4      	; 0x5ef8 <do_menu_item+0x72>
	}
	else mult = 1;
    5ef4:	81 e0       	ldi	r24, 0x01	; 1
    5ef6:	8a 87       	std	Y+10, r24	; 0x0a

	button = NONE;
    5ef8:	20 ef       	ldi	r18, 0xF0	; 240
    5efa:	20 93 e2 07 	sts	0x07E2, r18
		{
			value = (range.default_value * mult);
		}

		// Limit values to set ranges
		if (value < (range.lower * mult)) 
    5efe:	fa 85       	ldd	r31, Y+10	; 0x0a
    5f00:	ef 2f       	mov	r30, r31
    5f02:	f0 e0       	ldi	r31, 0x00	; 0
    5f04:	fb 8b       	std	Y+19, r31	; 0x13
    5f06:	ea 8b       	std	Y+18, r30	; 0x12
    5f08:	2a 85       	ldd	r18, Y+10	; 0x0a
    5f0a:	42 03       	mulsu	r20, r18
    5f0c:	10 01       	movw	r2, r0
    5f0e:	11 24       	eor	r1, r1
		{
			value = range.lower * mult;
		}
		
		if (value > (range.upper * mult)) 
    5f10:	32 03       	mulsu	r19, r18
    5f12:	a0 01       	movw	r20, r0
    5f14:	11 24       	eor	r1, r1
    5f16:	5f 87       	std	Y+15, r21	; 0x0f
    5f18:	4e 87       	std	Y+14, r20	; 0x0e
	uint8_t display_update = 0;
	uint8_t servo_update = 0;
	uint8_t button_update = 0;
	uint8_t button_inc = 0;
	bool	button_lock = false;
	bool	first_time = true;
    5f1a:	91 e0       	ldi	r25, 0x01	; 1
	int16_t value = (int8_t)*values;
	uint8_t display_update = 0;
	uint8_t servo_update = 0;
	uint8_t button_update = 0;
	uint8_t button_inc = 0;
	bool	button_lock = false;
    5f1c:	91 2c       	mov	r9, r1
	mugui_size16_t size;
	int16_t temp16;
	int16_t value = (int8_t)*values;
	uint8_t display_update = 0;
	uint8_t servo_update = 0;
	uint8_t button_update = 0;
    5f1e:	51 2c       	mov	r5, r1
void do_menu_item(uint16_t menuitem, int8_t *values, uint8_t mult, menu_range_t range, int8_t offset, uint16_t text_link, bool servo_enable, int16_t servo_number)
{
	mugui_size16_t size;
	int16_t temp16;
	int16_t value = (int8_t)*values;
	uint8_t display_update = 0;
    5f20:	f1 2c       	mov	r15, r1
			first_time = false;

			clear_buffer(buffer);

			// Print title
			gLCDprint_Menu_P((char*)pgm_read_word(&text_menu[menuitem]), (const unsigned char*)Verdana14, 0, 0);
    5f22:	83 01       	movw	r16, r6
    5f24:	00 0f       	add	r16, r16
    5f26:	11 1f       	adc	r17, r17
    5f28:	0c 50       	subi	r16, 0x0C	; 12
    5f2a:	12 4f       	sbci	r17, 0xF2	; 242
			// Print value
			if ((range.style == 0) || (range.style == 2) || (range.style == 3)) // numeric, numeric * 4, servo limits
			{
				// Write numeric value, centered on screen
				mugui_text_sizestring(itoa(value,pBuffer,10), (const unsigned char*)Verdana14, &size);
				mugui_lcd_puts(itoa(value,pBuffer,10),(const unsigned char*)Verdana14,((128-size.x)/2)+offset,25);
    5f2c:	ec 2d       	mov	r30, r12
    5f2e:	ff 27       	eor	r31, r31
    5f30:	e7 fd       	sbrc	r30, 7
    5f32:	f0 95       	com	r31
    5f34:	ff 8b       	std	Y+23, r31	; 0x17
    5f36:	ee 8b       	std	Y+22, r30	; 0x16
    5f38:	f0 e8       	ldi	r31, 0x80	; 128
    5f3a:	cf 2e       	mov	r12, r31
    5f3c:	d1 2c       	mov	r13, r1

			// Print title
			gLCDprint_Menu_P((char*)pgm_read_word(&text_menu[menuitem]), (const unsigned char*)Verdana14, 0, 0);

			// Print value
			if ((range.style == 0) || (range.style == 2) || (range.style == 3)) // numeric, numeric * 4, servo limits
    5f3e:	fe ef       	ldi	r31, 0xFE	; 254
    5f40:	f4 0d       	add	r31, r4
    5f42:	f8 8f       	std	Y+24, r31	; 0x18
		else if (range.style == 3)
		{
			// Loop rate = 20ms (50Hz)
			_delay_ms(20);
		}
		else if ((range.style == 0) || (range.style == 2))
    5f44:	24 2d       	mov	r18, r4
    5f46:	2d 7f       	andi	r18, 0xFD	; 253
    5f48:	29 8f       	std	Y+25, r18	; 0x19

		// Set servo position if required
		// Ignore if the output is marked as a motor
		if	(
			(servo_enable) &&
			(Config.Channel[servo_number].Motor_marker != MOTOR)
    5f4a:	86 e2       	ldi	r24, 0x26	; 38
    5f4c:	ee a5       	ldd	r30, Y+46	; 0x2e
    5f4e:	ff a5       	ldd	r31, Y+47	; 0x2f
    5f50:	8e 9f       	mul	r24, r30
    5f52:	a0 01       	movw	r20, r0
    5f54:	8f 9f       	mul	r24, r31
    5f56:	50 0d       	add	r21, r0
    5f58:	11 24       	eor	r1, r1
    5f5a:	41 5c       	subi	r20, 0xC1	; 193
    5f5c:	59 4f       	sbci	r21, 0xF9	; 249
    5f5e:	5c 87       	std	Y+12, r21	; 0x0c
    5f60:	4b 87       	std	Y+11, r20	; 0x0b
	button = NONE;

	// This is a loop that cycles until Button 4 is pressed (Save)
	// The GLCD updating slows servo updates down too much so only update the GLCD periodically
	// When not updating the GLCD the servo should be updated at 50Hz (20ms)
	while (button != ENTER)
    5f62:	80 91 e2 07 	lds	r24, 0x07E2
    5f66:	80 3e       	cpi	r24, 0xE0	; 224
    5f68:	09 f4       	brne	.+2      	; 0x5f6c <do_menu_item+0xe6>
    5f6a:	01 c1       	rjmp	.+514    	; 0x616e <do_menu_item+0x2e8>
		// Increment loopcount so that we can time various things
		display_update++;
		servo_update++;

		// Vary the button increment delay depending on the function
		if (servo_enable)
    5f6c:	88 20       	and	r8, r8
    5f6e:	11 f0       	breq	.+4      	; 0x5f74 <do_menu_item+0xee>
		{
			button_inc = 5; // For servos
    5f70:	25 e0       	ldi	r18, 0x05	; 5
    5f72:	01 c0       	rjmp	.+2      	; 0x5f76 <do_menu_item+0xf0>
		}
		else
		{
			button_inc = 1;	// For everything else (numbers)
    5f74:	21 e0       	ldi	r18, 0x01	; 1
		}

		// Increment button timer when pressed
		if (button != NONE)
    5f76:	80 3f       	cpi	r24, 0xF0	; 240
    5f78:	19 f0       	breq	.+6      	; 0x5f80 <do_menu_item+0xfa>
		{
			button_update++;
    5f7a:	53 94       	inc	r5

			// Release button lock after button_inc loops
			if (button_update > button_inc)
    5f7c:	25 15       	cp	r18, r5
    5f7e:	10 f4       	brcc	.+4      	; 0x5f84 <do_menu_item+0xfe>
		}
		// Remove lock when not pressed
		else 
		{
			button_update = 0;
			button_lock = false;
    5f80:	91 2c       	mov	r9, r1
			} 
		}
		// Remove lock when not pressed
		else 
		{
			button_update = 0;
    5f82:	51 2c       	mov	r5, r1
			button_lock = false;
		}

		// Display update
		if 	(!servo_enable || 									// Non-servo value or
    5f84:	88 20       	and	r8, r8
    5f86:	49 f0       	breq	.+18     	; 0x5f9a <do_menu_item+0x114>
	// The GLCD updating slows servo updates down too much so only update the GLCD periodically
	// When not updating the GLCD the servo should be updated at 50Hz (20ms)
	while (button != ENTER)
	{
		// Increment loopcount so that we can time various things
		display_update++;
    5f88:	f3 94       	inc	r15
			button_update = 0;
			button_lock = false;
		}

		// Display update
		if 	(!servo_enable || 									// Non-servo value or
    5f8a:	f7 e0       	ldi	r31, 0x07	; 7
    5f8c:	ff 15       	cp	r31, r15
    5f8e:	10 f4       	brcc	.+4      	; 0x5f94 <do_menu_item+0x10e>
			((display_update >= 8) && (button != NONE)) || 		// Servo value and 8 cycles passed but only with a button pressed or...
    5f90:	80 3f       	cpi	r24, 0xF0	; 240
    5f92:	19 f4       	brne	.+6      	; 0x5f9a <do_menu_item+0x114>
    5f94:	99 23       	and	r25, r25
    5f96:	09 f4       	brne	.+2      	; 0x5f9a <do_menu_item+0x114>
    5f98:	66 c0       	rjmp	.+204    	; 0x6066 <do_menu_item+0x1e0>
			 (first_time))										// First time into routine
		{
			display_update = 0;
			first_time = false;

			clear_buffer(buffer);
    5f9a:	80 e0       	ldi	r24, 0x00	; 0
    5f9c:	91 e0       	ldi	r25, 0x01	; 1
    5f9e:	0e 94 73 20 	call	0x40e6	; 0x40e6 <clear_buffer>

			// Print title
			gLCDprint_Menu_P((char*)pgm_read_word(&text_menu[menuitem]), (const unsigned char*)Verdana14, 0, 0);
    5fa2:	f8 01       	movw	r30, r16
    5fa4:	85 91       	lpm	r24, Z+
    5fa6:	94 91       	lpm	r25, Z
    5fa8:	20 e0       	ldi	r18, 0x00	; 0
    5faa:	30 e0       	ldi	r19, 0x00	; 0
    5fac:	40 e0       	ldi	r20, 0x00	; 0
    5fae:	50 e0       	ldi	r21, 0x00	; 0
    5fb0:	6f e5       	ldi	r22, 0x5F	; 95
    5fb2:	71 e0       	ldi	r23, 0x01	; 1
    5fb4:	0e 94 29 22 	call	0x4452	; 0x4452 <gLCDprint_Menu_P>

			// Print value
			if ((range.style == 0) || (range.style == 2) || (range.style == 3)) // numeric, numeric * 4, servo limits
    5fb8:	44 20       	and	r4, r4
    5fba:	19 f0       	breq	.+6      	; 0x5fc2 <do_menu_item+0x13c>
    5fbc:	28 8d       	ldd	r18, Y+24	; 0x18
    5fbe:	22 30       	cpi	r18, 0x02	; 2
    5fc0:	30 f5       	brcc	.+76     	; 0x600e <do_menu_item+0x188>
    5fc2:	4a e0       	ldi	r20, 0x0A	; 10
    5fc4:	6b e5       	ldi	r22, 0x5B	; 91
    5fc6:	75 e0       	ldi	r23, 0x05	; 5
    5fc8:	c5 01       	movw	r24, r10
    5fca:	0e 94 02 49 	call	0x9204	; 0x9204 <__itoa_ncheck>
			{
				// Write numeric value, centered on screen
				mugui_text_sizestring(itoa(value,pBuffer,10), (const unsigned char*)Verdana14, &size);
    5fce:	ae 01       	movw	r20, r28
    5fd0:	4f 5f       	subi	r20, 0xFF	; 255
    5fd2:	5f 4f       	sbci	r21, 0xFF	; 255
    5fd4:	6f e5       	ldi	r22, 0x5F	; 95
    5fd6:	71 e0       	ldi	r23, 0x01	; 1
    5fd8:	0e 94 4f 3d 	call	0x7a9e	; 0x7a9e <mugui_text_sizestring>
				mugui_lcd_puts(itoa(value,pBuffer,10),(const unsigned char*)Verdana14,((128-size.x)/2)+offset,25);
    5fdc:	89 81       	ldd	r24, Y+1	; 0x01
    5fde:	9a 81       	ldd	r25, Y+2	; 0x02
    5fe0:	76 01       	movw	r14, r12
    5fe2:	e8 1a       	sub	r14, r24
    5fe4:	f9 0a       	sbc	r15, r25
    5fe6:	f6 94       	lsr	r15
    5fe8:	e7 94       	ror	r14
    5fea:	4e 89       	ldd	r20, Y+22	; 0x16
    5fec:	5f 89       	ldd	r21, Y+23	; 0x17
    5fee:	e4 0e       	add	r14, r20
    5ff0:	f5 1e       	adc	r15, r21
    5ff2:	4a e0       	ldi	r20, 0x0A	; 10
    5ff4:	6b e5       	ldi	r22, 0x5B	; 91
    5ff6:	75 e0       	ldi	r23, 0x05	; 5
    5ff8:	c5 01       	movw	r24, r10
    5ffa:	0e 94 02 49 	call	0x9204	; 0x9204 <__itoa_ncheck>
    5ffe:	29 e1       	ldi	r18, 0x19	; 25
    6000:	30 e0       	ldi	r19, 0x00	; 0
    6002:	a7 01       	movw	r20, r14
    6004:	6f e5       	ldi	r22, 0x5F	; 95
    6006:	71 e0       	ldi	r23, 0x01	; 1
    6008:	0e 94 9e 3e 	call	0x7d3c	; 0x7d3c <mugui_lcd_puts>
    600c:	24 c0       	rjmp	.+72     	; 0x6056 <do_menu_item+0x1d0>
			}
			else // text
			{
				// Write text, centered on screen
				// NB: pBuffer obviously has to be larger than the longest text string printed... duh...
				pgm_mugui_scopy((char*)pgm_read_word(&text_menu[text_link + value])); // Copy string to pBuffer
    600e:	ec 88       	ldd	r14, Y+20	; 0x14
    6010:	fd 88       	ldd	r15, Y+21	; 0x15
    6012:	ea 0c       	add	r14, r10
    6014:	fb 1c       	adc	r15, r11
    6016:	f7 01       	movw	r30, r14
    6018:	ee 0f       	add	r30, r30
    601a:	ff 1f       	adc	r31, r31
    601c:	ec 50       	subi	r30, 0x0C	; 12
    601e:	f2 4f       	sbci	r31, 0xF2	; 242
    6020:	85 91       	lpm	r24, Z+
    6022:	94 91       	lpm	r25, Z
    6024:	0e 94 9d 3d 	call	0x7b3a	; 0x7b3a <pgm_mugui_scopy>

				mugui_text_sizestring((char*)pBuffer, (const unsigned char*)Verdana14, &size);
    6028:	ae 01       	movw	r20, r28
    602a:	4f 5f       	subi	r20, 0xFF	; 255
    602c:	5f 4f       	sbci	r21, 0xFF	; 255
    602e:	6f e5       	ldi	r22, 0x5F	; 95
    6030:	71 e0       	ldi	r23, 0x01	; 1
    6032:	8b e5       	ldi	r24, 0x5B	; 91
    6034:	95 e0       	ldi	r25, 0x05	; 5
    6036:	0e 94 4f 3d 	call	0x7a9e	; 0x7a9e <mugui_text_sizestring>
				LCD_Display_Text(text_link + value, (const unsigned char*)Verdana14,((128-size.x)/2),25);
    603a:	89 81       	ldd	r24, Y+1	; 0x01
    603c:	9a 81       	ldd	r25, Y+2	; 0x02
    603e:	a6 01       	movw	r20, r12
    6040:	48 1b       	sub	r20, r24
    6042:	59 0b       	sbc	r21, r25
    6044:	56 95       	lsr	r21
    6046:	47 95       	ror	r20
    6048:	29 e1       	ldi	r18, 0x19	; 25
    604a:	30 e0       	ldi	r19, 0x00	; 0
    604c:	6f e5       	ldi	r22, 0x5F	; 95
    604e:	71 e0       	ldi	r23, 0x01	; 1
    6050:	c7 01       	movw	r24, r14
    6052:	0e 94 20 22 	call	0x4440	; 0x4440 <LCD_Display_Text>
			}

			// Print bottom markers
			print_menu_frame(1);
    6056:	81 e0       	ldi	r24, 0x01	; 1
    6058:	0e 94 62 2e 	call	0x5cc4	; 0x5cc4 <print_menu_frame>

			// Write from buffer
			write_buffer(buffer);
    605c:	80 e0       	ldi	r24, 0x00	; 0
    605e:	91 e0       	ldi	r25, 0x01	; 1
    6060:	0e 94 41 20 	call	0x4082	; 0x4082 <write_buffer>
		// Display update
		if 	(!servo_enable || 									// Non-servo value or
			((display_update >= 8) && (button != NONE)) || 		// Servo value and 8 cycles passed but only with a button pressed or...
			 (first_time))										// First time into routine
		{
			display_update = 0;
    6064:	f1 2c       	mov	r15, r1
			// Write from buffer
			write_buffer(buffer);
		}
		
		// Slow the loop rate for text items
		if (range.style == 1)
    6066:	51 e0       	ldi	r21, 0x01	; 1
    6068:	45 12       	cpse	r4, r21
    606a:	08 c0       	rjmp	.+16     	; 0x607c <do_menu_item+0x1f6>
    606c:	8f e3       	ldi	r24, 0x3F	; 63
    606e:	92 e4       	ldi	r25, 0x42	; 66
    6070:	ef e0       	ldi	r30, 0x0F	; 15
    6072:	81 50       	subi	r24, 0x01	; 1
    6074:	90 40       	sbci	r25, 0x00	; 0
    6076:	e0 40       	sbci	r30, 0x00	; 0
    6078:	e1 f7       	brne	.-8      	; 0x6072 <do_menu_item+0x1ec>
    607a:	15 c0       	rjmp	.+42     	; 0x60a6 <do_menu_item+0x220>
		{
			// Loop rate = 250ms (4Hz)
			_delay_ms(250);
		}
		else if (range.style == 3)
    607c:	f3 e0       	ldi	r31, 0x03	; 3
    607e:	4f 12       	cpse	r4, r31
    6080:	08 c0       	rjmp	.+16     	; 0x6092 <do_menu_item+0x20c>
    6082:	2f e7       	ldi	r18, 0x7F	; 127
    6084:	38 e3       	ldi	r19, 0x38	; 56
    6086:	41 e0       	ldi	r20, 0x01	; 1
    6088:	21 50       	subi	r18, 0x01	; 1
    608a:	30 40       	sbci	r19, 0x00	; 0
    608c:	40 40       	sbci	r20, 0x00	; 0
    608e:	e1 f7       	brne	.-8      	; 0x6088 <do_menu_item+0x202>
    6090:	0a c0       	rjmp	.+20     	; 0x60a6 <do_menu_item+0x220>
		{
			// Loop rate = 20ms (50Hz)
			_delay_ms(20);
		}
		else if ((range.style == 0) || (range.style == 2))
    6092:	59 8d       	ldd	r21, Y+25	; 0x19
    6094:	51 11       	cpse	r21, r1
    6096:	09 c0       	rjmp	.+18     	; 0x60aa <do_menu_item+0x224>
    6098:	8f e7       	ldi	r24, 0x7F	; 127
    609a:	9a e1       	ldi	r25, 0x1A	; 26
    609c:	e6 e0       	ldi	r30, 0x06	; 6
    609e:	81 50       	subi	r24, 0x01	; 1
    60a0:	90 40       	sbci	r25, 0x00	; 0
    60a2:	e0 40       	sbci	r30, 0x00	; 0
    60a4:	e1 f7       	brne	.-8      	; 0x609e <do_menu_item+0x218>
    60a6:	00 c0       	rjmp	.+0      	; 0x60a8 <do_menu_item+0x222>
    60a8:	00 00       	nop
		}

		// Poll buttons when idle
		// Don't use button acceleration when moving servos
		// And don't block the code with poll_buttons()
		if (servo_enable)
    60aa:	88 20       	and	r8, r8
    60ac:	41 f0       	breq	.+16     	; 0x60be <do_menu_item+0x238>
		{
			button = (PINB & 0xf0);	
    60ae:	83 b1       	in	r24, 0x03	; 3
    60b0:	80 7f       	andi	r24, 0xF0	; 240
    60b2:	80 93 e2 07 	sts	0x07E2, r24
			button_multiplier = 1;
    60b6:	81 e0       	ldi	r24, 0x01	; 1
    60b8:	80 93 e3 07 	sts	0x07E3, r24
    60bc:	03 c0       	rjmp	.+6      	; 0x60c4 <do_menu_item+0x23e>
		}
		else
		{
			poll_buttons(true);
    60be:	81 e0       	ldi	r24, 0x01	; 1
    60c0:	0e 94 0e 2f 	call	0x5e1c	; 0x5e1c <poll_buttons>
		}

		// Release button lock when pressed
		// unless a servo
		if ((button != NONE) && (!servo_enable))
    60c4:	80 91 e2 07 	lds	r24, 0x07E2
    60c8:	80 3f       	cpi	r24, 0xF0	; 240
    60ca:	39 f1       	breq	.+78     	; 0x611a <do_menu_item+0x294>
    60cc:	88 20       	and	r8, r8
    60ce:	c9 f0       	breq	.+50     	; 0x6102 <do_menu_item+0x27c>
		{
				button_lock = false;
		}
		
		// Handle cursor Up/Down limits
		if (button == DOWN)
    60d0:	80 3d       	cpi	r24, 0xD0	; 208
    60d2:	51 f4       	brne	.+20     	; 0x60e8 <do_menu_item+0x262>
		{
			if (button_lock == false)
    60d4:	91 10       	cpse	r9, r1
    60d6:	70 c0       	rjmp	.+224    	; 0x61b8 <do_menu_item+0x332>
			{
				button_lock = true;
				value = value - (range.increment * button_multiplier);
    60d8:	80 91 e3 07 	lds	r24, 0x07E3
    60dc:	fd 85       	ldd	r31, Y+13	; 0x0d
    60de:	f8 9f       	mul	r31, r24
    60e0:	a0 18       	sub	r10, r0
    60e2:	b1 08       	sbc	r11, r1
    60e4:	11 24       	eor	r1, r1
    60e6:	0b c0       	rjmp	.+22     	; 0x60fe <do_menu_item+0x278>
				button_update = 0;
			}
		}

		if (button == UP)
    60e8:	80 3b       	cpi	r24, 0xB0	; 176
    60ea:	81 f4       	brne	.+32     	; 0x610c <do_menu_item+0x286>
		{
			if (button_lock == false)
    60ec:	91 10       	cpse	r9, r1
    60ee:	64 c0       	rjmp	.+200    	; 0x61b8 <do_menu_item+0x332>
			{
				button_lock = true;
				value = value + (range.increment * button_multiplier);
    60f0:	80 91 e3 07 	lds	r24, 0x07E3
    60f4:	2d 85       	ldd	r18, Y+13	; 0x0d
    60f6:	28 9f       	mul	r18, r24
    60f8:	a0 0c       	add	r10, r0
    60fa:	b1 1c       	adc	r11, r1
    60fc:	11 24       	eor	r1, r1
				button_update = 0;
    60fe:	51 2c       	mov	r5, r1
    6100:	5b c0       	rjmp	.+182    	; 0x61b8 <do_menu_item+0x332>
		{
				button_lock = false;
		}
		
		// Handle cursor Up/Down limits
		if (button == DOWN)
    6102:	80 3d       	cpi	r24, 0xD0	; 208
    6104:	49 f3       	breq	.-46     	; 0x60d8 <do_menu_item+0x252>
				value = value - (range.increment * button_multiplier);
				button_update = 0;
			}
		}

		if (button == UP)
    6106:	80 3b       	cpi	r24, 0xB0	; 176
    6108:	99 f3       	breq	.-26     	; 0x60f0 <do_menu_item+0x26a>

		// Release button lock when pressed
		// unless a servo
		if ((button != NONE) && (!servo_enable))
		{
				button_lock = false;
    610a:	91 2c       	mov	r9, r1
				value = value + (range.increment * button_multiplier);
				button_update = 0;
			}
		}

		if (button == BACK)	
    610c:	80 37       	cpi	r24, 0x70	; 112
    610e:	29 f4       	brne	.+10     	; 0x611a <do_menu_item+0x294>
		{
			value = (range.default_value * mult);
    6110:	29 85       	ldd	r18, Y+9	; 0x09
    6112:	3a 85       	ldd	r19, Y+10	; 0x0a
    6114:	23 03       	mulsu	r18, r19
    6116:	50 01       	movw	r10, r0
    6118:	11 24       	eor	r1, r1
    611a:	a2 14       	cp	r10, r2
    611c:	b3 04       	cpc	r11, r3
    611e:	0c f4       	brge	.+2      	; 0x6122 <do_menu_item+0x29c>
    6120:	51 01       	movw	r10, r2
    6122:	4e 85       	ldd	r20, Y+14	; 0x0e
    6124:	5f 85       	ldd	r21, Y+15	; 0x0f
    6126:	4a 15       	cp	r20, r10
    6128:	5b 05       	cpc	r21, r11
    612a:	0c f4       	brge	.+2      	; 0x612e <do_menu_item+0x2a8>
    612c:	5a 01       	movw	r10, r20
		{
			value = range.upper * mult;
		}

		// Update contrast setting
		if (menuitem == CONTRAST)
    612e:	5f e9       	ldi	r21, 0x9F	; 159
    6130:	65 16       	cp	r6, r21
    6132:	71 04       	cpc	r7, r1
    6134:	19 f4       	brne	.+6      	; 0x613c <do_menu_item+0x2b6>
		{
			st7565_set_brightness(value);
    6136:	8a 2d       	mov	r24, r10
    6138:	0e 94 19 20 	call	0x4032	; 0x4032 <st7565_set_brightness>
		}

		// Set servo position if required
		// Ignore if the output is marked as a motor
		if	(
    613c:	88 20       	and	r8, r8
    613e:	a9 f0       	breq	.+42     	; 0x616a <do_menu_item+0x2e4>
			(servo_enable) &&
    6140:	eb 85       	ldd	r30, Y+11	; 0x0b
    6142:	fc 85       	ldd	r31, Y+12	; 0x0c
    6144:	80 81       	ld	r24, Z
    6146:	82 30       	cpi	r24, 0x02	; 2
    6148:	81 f0       	breq	.+32     	; 0x616a <do_menu_item+0x2e4>
			(Config.Channel[servo_number].Motor_marker != MOTOR)
			)
		{
			servo_update = 0;

			temp16 = scale_percent(value);	// Convert to servo position (from %)
    614a:	8a 2d       	mov	r24, r10
    614c:	0e 94 48 3d 	call	0x7a90	; 0x7a90 <scale_percent>

			// Scale servo from 2500~5000 to 875~2125
			temp16 = ((temp16 - 3750) >> 1) + 1500; 
    6150:	86 5a       	subi	r24, 0xA6	; 166
    6152:	9e 40       	sbci	r25, 0x0E	; 14
    6154:	95 95       	asr	r25
    6156:	87 95       	ror	r24

			cli();
    6158:	f8 94       	cli
			servo_update = 0;

			temp16 = scale_percent(value);	// Convert to servo position (from %)

			// Scale servo from 2500~5000 to 875~2125
			temp16 = ((temp16 - 3750) >> 1) + 1500; 
    615a:	bc 01       	movw	r22, r24
    615c:	64 52       	subi	r22, 0x24	; 36
    615e:	7a 4f       	sbci	r23, 0xFA	; 250

			cli();
			output_servo_ppm_asm3(servo_number, temp16);
    6160:	8e a5       	ldd	r24, Y+46	; 0x2e
    6162:	9f a5       	ldd	r25, Y+47	; 0x2f
    6164:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <output_servo_ppm_asm3>
			sei();
    6168:	78 94       	sei
    616a:	90 e0       	ldi	r25, 0x00	; 0
    616c:	fa ce       	rjmp	.-524    	; 0x5f62 <do_menu_item+0xdc>

	// Exit
	button = ENTER;

	// Divide value from that displayed if style = 2
	if (range.style == 2)
    616e:	f2 e0       	ldi	r31, 0x02	; 2
    6170:	4f 12       	cpse	r4, r31
    6172:	06 c0       	rjmp	.+12     	; 0x6180 <do_menu_item+0x2fa>
	{
		value = value / mult;
    6174:	c5 01       	movw	r24, r10
    6176:	6a 89       	ldd	r22, Y+18	; 0x12
    6178:	7b 89       	ldd	r23, Y+19	; 0x13
    617a:	0e 94 5b 48 	call	0x90b6	; 0x90b6 <__divmodhi4>
    617e:	5b 01       	movw	r10, r22
	}

	*values = (int8_t)value;
    6180:	e8 89       	ldd	r30, Y+16	; 0x10
    6182:	f9 89       	ldd	r31, Y+17	; 0x11
    6184:	a0 82       	st	Z, r10
}
    6186:	69 96       	adiw	r28, 0x19	; 25
    6188:	0f b6       	in	r0, 0x3f	; 63
    618a:	f8 94       	cli
    618c:	de bf       	out	0x3e, r29	; 62
    618e:	0f be       	out	0x3f, r0	; 63
    6190:	cd bf       	out	0x3d, r28	; 61
    6192:	df 91       	pop	r29
    6194:	cf 91       	pop	r28
    6196:	1f 91       	pop	r17
    6198:	0f 91       	pop	r16
    619a:	ff 90       	pop	r15
    619c:	ef 90       	pop	r14
    619e:	df 90       	pop	r13
    61a0:	cf 90       	pop	r12
    61a2:	bf 90       	pop	r11
    61a4:	af 90       	pop	r10
    61a6:	9f 90       	pop	r9
    61a8:	8f 90       	pop	r8
    61aa:	7f 90       	pop	r7
    61ac:	6f 90       	pop	r6
    61ae:	5f 90       	pop	r5
    61b0:	4f 90       	pop	r4
    61b2:	3f 90       	pop	r3
    61b4:	2f 90       	pop	r2
    61b6:	08 95       	ret

		// Release button lock when pressed
		// unless a servo
		if ((button != NONE) && (!servo_enable))
		{
				button_lock = false;
    61b8:	99 24       	eor	r9, r9
    61ba:	93 94       	inc	r9
    61bc:	ae cf       	rjmp	.-164    	; 0x611a <do_menu_item+0x294>

000061be <menu_beep>:

void menu_beep(uint8_t beeps)
{
	uint8_t i;

	for (i=0; i < beeps; i++)
    61be:	90 e0       	ldi	r25, 0x00	; 0
    61c0:	98 17       	cp	r25, r24
    61c2:	b1 f0       	breq	.+44     	; 0x61f0 <menu_beep+0x32>
	{ 
		LVA = 1;
    61c4:	29 9a       	sbi	0x05, 1	; 5
    61c6:	2f e9       	ldi	r18, 0x9F	; 159
    61c8:	36 e8       	ldi	r19, 0x86	; 134
    61ca:	41 e0       	ldi	r20, 0x01	; 1
    61cc:	21 50       	subi	r18, 0x01	; 1
    61ce:	30 40       	sbci	r19, 0x00	; 0
    61d0:	40 40       	sbci	r20, 0x00	; 0
    61d2:	e1 f7       	brne	.-8      	; 0x61cc <menu_beep+0xe>
    61d4:	00 c0       	rjmp	.+0      	; 0x61d6 <menu_beep+0x18>
    61d6:	00 00       	nop
		_delay_ms(25);
		LVA = 0;
    61d8:	29 98       	cbi	0x05, 1	; 5
    61da:	2f e9       	ldi	r18, 0x9F	; 159
    61dc:	36 e8       	ldi	r19, 0x86	; 134
    61de:	41 e0       	ldi	r20, 0x01	; 1
    61e0:	21 50       	subi	r18, 0x01	; 1
    61e2:	30 40       	sbci	r19, 0x00	; 0
    61e4:	40 40       	sbci	r20, 0x00	; 0
    61e6:	e1 f7       	brne	.-8      	; 0x61e0 <menu_beep+0x22>
    61e8:	00 c0       	rjmp	.+0      	; 0x61ea <menu_beep+0x2c>
    61ea:	00 00       	nop

void menu_beep(uint8_t beeps)
{
	uint8_t i;

	for (i=0; i < beeps; i++)
    61ec:	9f 5f       	subi	r25, 0xFF	; 255
    61ee:	e8 cf       	rjmp	.-48     	; 0x61c0 <menu_beep+0x2>
		LVA = 1;
		_delay_ms(25);
		LVA = 0;
		_delay_ms(25);
	}
}
    61f0:	08 95       	ret

000061f2 <update_menu>:
// top*		= Item number currently on top line
// temp*	= Currently selected item number
//************************************************************

void update_menu(uint8_t items, uint8_t start, uint8_t offset, uint8_t button, uint8_t* cursor, uint16_t* top, uint16_t* temp)
{
    61f2:	af 92       	push	r10
    61f4:	bf 92       	push	r11
    61f6:	cf 92       	push	r12
    61f8:	df 92       	push	r13
    61fa:	ef 92       	push	r14
    61fc:	ff 92       	push	r15
    61fe:	0f 93       	push	r16
    6200:	1f 93       	push	r17
    6202:	cf 93       	push	r28
    6204:	df 93       	push	r29
    6206:	00 d0       	rcall	.+0      	; 0x6208 <update_menu+0x16>
    6208:	cd b7       	in	r28, 0x3d	; 61
    620a:	de b7       	in	r29, 0x3e	; 62
    620c:	98 2f       	mov	r25, r24
    620e:	58 01       	movw	r10, r16
	// Temporarily add in offset :(
	*top = *top + offset;
    6210:	04 2f       	mov	r16, r20
    6212:	10 e0       	ldi	r17, 0x00	; 0
    6214:	d7 01       	movw	r26, r14
    6216:	ed 91       	ld	r30, X+
    6218:	fc 91       	ld	r31, X
    621a:	11 97       	sbiw	r26, 0x01	; 1
    621c:	e0 0f       	add	r30, r16
    621e:	f1 1f       	adc	r31, r17
    6220:	ed 93       	st	X+, r30
    6222:	fc 93       	st	X, r31
	start = start + offset;
    6224:	64 0f       	add	r22, r20

	// Calculate which function has been requested
	if (button == ENTER)
    6226:	20 3e       	cpi	r18, 0xE0	; 224
    6228:	b1 f4       	brne	.+44     	; 0x6256 <update_menu+0x64>
	{
		switch(*cursor) 
    622a:	d5 01       	movw	r26, r10
    622c:	8c 91       	ld	r24, X
    622e:	8f 30       	cpi	r24, 0x0F	; 15
    6230:	59 f0       	breq	.+22     	; 0x6248 <update_menu+0x56>
    6232:	18 f4       	brcc	.+6      	; 0x623a <update_menu+0x48>
    6234:	83 30       	cpi	r24, 0x03	; 3
    6236:	49 f0       	breq	.+18     	; 0x624a <update_menu+0x58>
    6238:	4d c0       	rjmp	.+154    	; 0x62d4 <update_menu+0xe2>
    623a:	8b 31       	cpi	r24, 0x1B	; 27
    623c:	51 f0       	breq	.+20     	; 0x6252 <update_menu+0x60>
    623e:	87 32       	cpi	r24, 0x27	; 39
    6240:	09 f0       	breq	.+2      	; 0x6244 <update_menu+0x52>
    6242:	48 c0       	rjmp	.+144    	; 0x62d4 <update_menu+0xe2>
				break;	
			case LINE2:
				*temp = *top + 2;
				break;
			case LINE3:
				*temp = *top + 3;
    6244:	33 96       	adiw	r30, 0x03	; 3
    6246:	01 c0       	rjmp	.+2      	; 0x624a <update_menu+0x58>
		{
			case LINE0:
				*temp = *top;
				break;
			case LINE1:
				*temp = *top + 1;
    6248:	31 96       	adiw	r30, 0x01	; 1
    624a:	d6 01       	movw	r26, r12
    624c:	ed 93       	st	X+, r30
    624e:	fc 93       	st	X, r31
				break;	
    6250:	41 c0       	rjmp	.+130    	; 0x62d4 <update_menu+0xe2>
			case LINE2:
				*temp = *top + 2;
    6252:	32 96       	adiw	r30, 0x02	; 2
    6254:	fa cf       	rjmp	.-12     	; 0x624a <update_menu+0x58>
				break;
		}
	}

	// Handle cursor Up/Down limits
	if (button == DOWN)	
    6256:	20 3d       	cpi	r18, 0xD0	; 208
    6258:	f9 f4       	brne	.+62     	; 0x6298 <update_menu+0xa6>
	{
		switch(*cursor) 
    625a:	f5 01       	movw	r30, r10
    625c:	80 81       	ld	r24, Z
    625e:	8f 30       	cpi	r24, 0x0F	; 15
    6260:	69 f0       	breq	.+26     	; 0x627c <update_menu+0x8a>
    6262:	18 f4       	brcc	.+6      	; 0x626a <update_menu+0x78>
    6264:	83 30       	cpi	r24, 0x03	; 3
    6266:	31 f0       	breq	.+12     	; 0x6274 <update_menu+0x82>
    6268:	15 c0       	rjmp	.+42     	; 0x6294 <update_menu+0xa2>
    626a:	8b 31       	cpi	r24, 0x1B	; 27
    626c:	59 f0       	breq	.+22     	; 0x6284 <update_menu+0x92>
    626e:	87 32       	cpi	r24, 0x27	; 39
    6270:	69 f0       	breq	.+26     	; 0x628c <update_menu+0x9a>
    6272:	10 c0       	rjmp	.+32     	; 0x6294 <update_menu+0xa2>
		{
			case LINE0:
				if (items > 1) *cursor = LINE1;
    6274:	92 30       	cpi	r25, 0x02	; 2
    6276:	70 f1       	brcs	.+92     	; 0x62d4 <update_menu+0xe2>
    6278:	8f e0       	ldi	r24, 0x0F	; 15
    627a:	27 c0       	rjmp	.+78     	; 0x62ca <update_menu+0xd8>
				break;	
			case LINE1:
				if (items > 2) *cursor = LINE2;
    627c:	93 30       	cpi	r25, 0x03	; 3
    627e:	50 f1       	brcs	.+84     	; 0x62d4 <update_menu+0xe2>
    6280:	8b e1       	ldi	r24, 0x1B	; 27
    6282:	1f c0       	rjmp	.+62     	; 0x62c2 <update_menu+0xd0>
				break;	
			case LINE2:
				if (items > 3) *cursor = LINE3;
    6284:	94 30       	cpi	r25, 0x04	; 4
    6286:	30 f1       	brcs	.+76     	; 0x62d4 <update_menu+0xe2>
    6288:	87 e2       	ldi	r24, 0x27	; 39
    628a:	1f c0       	rjmp	.+62     	; 0x62ca <update_menu+0xd8>
				break;
			case LINE3:
				if (items > 4) *cursor = NEXTLINE;
    628c:	95 30       	cpi	r25, 0x05	; 5
    628e:	10 f1       	brcs	.+68     	; 0x62d4 <update_menu+0xe2>
    6290:	88 e2       	ldi	r24, 0x28	; 40
    6292:	17 c0       	rjmp	.+46     	; 0x62c2 <update_menu+0xd0>
				break;
			default:
				*cursor = NEXTLINE;
    6294:	88 e2       	ldi	r24, 0x28	; 40
    6296:	19 c0       	rjmp	.+50     	; 0x62ca <update_menu+0xd8>
				break;
		}
	}

	if (button == UP)	
    6298:	20 3b       	cpi	r18, 0xB0	; 176
    629a:	d1 f4       	brne	.+52     	; 0x62d0 <update_menu+0xde>
	{
		switch(*cursor) 
    629c:	f5 01       	movw	r30, r10
    629e:	80 81       	ld	r24, Z
    62a0:	8f 30       	cpi	r24, 0x0F	; 15
    62a2:	69 f0       	breq	.+26     	; 0x62be <update_menu+0xcc>
    62a4:	20 f4       	brcc	.+8      	; 0x62ae <update_menu+0xbc>
    62a6:	83 30       	cpi	r24, 0x03	; 3
    62a8:	79 f4       	brne	.+30     	; 0x62c8 <update_menu+0xd6>
				break;
			case LINE1:
				*cursor = LINE0;
				break;
			case LINE0:
				*cursor = PREVLINE;
    62aa:	82 e0       	ldi	r24, 0x02	; 2
    62ac:	0a c0       	rjmp	.+20     	; 0x62c2 <update_menu+0xd0>
		}
	}

	if (button == UP)	
	{
		switch(*cursor) 
    62ae:	8b 31       	cpi	r24, 0x1B	; 27
    62b0:	21 f0       	breq	.+8      	; 0x62ba <update_menu+0xc8>
    62b2:	87 32       	cpi	r24, 0x27	; 39
    62b4:	49 f4       	brne	.+18     	; 0x62c8 <update_menu+0xd6>
		{
			case LINE3:
				*cursor = LINE2;
    62b6:	8b e1       	ldi	r24, 0x1B	; 27
    62b8:	08 c0       	rjmp	.+16     	; 0x62ca <update_menu+0xd8>
				break;	
			case LINE2:
				*cursor = LINE1;
    62ba:	8f e0       	ldi	r24, 0x0F	; 15
    62bc:	02 c0       	rjmp	.+4      	; 0x62c2 <update_menu+0xd0>
				break;
			case LINE1:
				*cursor = LINE0;
    62be:	83 e0       	ldi	r24, 0x03	; 3
    62c0:	04 c0       	rjmp	.+8      	; 0x62ca <update_menu+0xd8>
				break;
			case LINE0:
				*cursor = PREVLINE;
    62c2:	f5 01       	movw	r30, r10
    62c4:	80 83       	st	Z, r24
				break;
    62c6:	06 c0       	rjmp	.+12     	; 0x62d4 <update_menu+0xe2>
			default:
				*cursor = PREVLINE;
    62c8:	82 e0       	ldi	r24, 0x02	; 2
    62ca:	d5 01       	movw	r26, r10
    62cc:	8c 93       	st	X, r24
				break;
    62ce:	02 c0       	rjmp	.+4      	; 0x62d4 <update_menu+0xe2>
		}
	}

	if (button != NONE)	
    62d0:	20 3f       	cpi	r18, 0xF0	; 240
    62d2:	81 f0       	breq	.+32     	; 0x62f4 <update_menu+0x102>
	{
		menu_beep(1);
    62d4:	81 e0       	ldi	r24, 0x01	; 1
    62d6:	69 83       	std	Y+1, r22	; 0x01
    62d8:	9a 83       	std	Y+2, r25	; 0x02
    62da:	0e 94 df 30 	call	0x61be	; 0x61be <menu_beep>
    62de:	bf ef       	ldi	r27, 0xFF	; 255
    62e0:	e4 e3       	ldi	r30, 0x34	; 52
    62e2:	fc e0       	ldi	r31, 0x0C	; 12
    62e4:	b1 50       	subi	r27, 0x01	; 1
    62e6:	e0 40       	sbci	r30, 0x00	; 0
    62e8:	f0 40       	sbci	r31, 0x00	; 0
    62ea:	e1 f7       	brne	.-8      	; 0x62e4 <update_menu+0xf2>
    62ec:	00 c0       	rjmp	.+0      	; 0x62ee <update_menu+0xfc>
    62ee:	00 00       	nop
    62f0:	9a 81       	ldd	r25, Y+2	; 0x02
    62f2:	69 81       	ldd	r22, Y+1	; 0x01
		_delay_ms(200);
	}

	// When cursor is at limits and button pressed
	if (*cursor == PREVLINE)								// Up				
    62f4:	d5 01       	movw	r26, r10
    62f6:	8c 91       	ld	r24, X
    62f8:	82 30       	cpi	r24, 0x02	; 2
    62fa:	71 f4       	brne	.+28     	; 0x6318 <update_menu+0x126>
	{
		*cursor  = LINE0;
    62fc:	83 e0       	ldi	r24, 0x03	; 3
    62fe:	8c 93       	st	X, r24
		if (*top > start) 
    6300:	f7 01       	movw	r30, r14
    6302:	20 81       	ld	r18, Z
    6304:	31 81       	ldd	r19, Z+1	; 0x01
    6306:	46 2f       	mov	r20, r22
    6308:	50 e0       	ldi	r21, 0x00	; 0
    630a:	42 17       	cp	r20, r18
    630c:	53 07       	cpc	r21, r19
    630e:	20 f4       	brcc	.+8      	; 0x6318 <update_menu+0x126>
		{
			*top = *top - 1;								// Shuffle list up
    6310:	21 50       	subi	r18, 0x01	; 1
    6312:	31 09       	sbc	r19, r1
    6314:	31 83       	std	Z+1, r19	; 0x01
    6316:	20 83       	st	Z, r18
		}
	}
	
	if (*cursor == NEXTLINE)								// Down
    6318:	d5 01       	movw	r26, r10
    631a:	8c 91       	ld	r24, X
    631c:	88 32       	cpi	r24, 0x28	; 40
    631e:	a1 f4       	brne	.+40     	; 0x6348 <update_menu+0x156>
	{
		*cursor  = LINE3;
    6320:	87 e2       	ldi	r24, 0x27	; 39
    6322:	8c 93       	st	X, r24
		if ((*top + 3) < (uint16_t)((start + items) - 1))	// Compiler throws a warning here without the cast. top is uint16_t, start is uint8_t, items = uint8_t
    6324:	f7 01       	movw	r30, r14
    6326:	20 81       	ld	r18, Z
    6328:	31 81       	ldd	r19, Z+1	; 0x01
    632a:	a9 01       	movw	r20, r18
    632c:	4d 5f       	subi	r20, 0xFD	; 253
    632e:	5f 4f       	sbci	r21, 0xFF	; 255
    6330:	89 2f       	mov	r24, r25
    6332:	90 e0       	ldi	r25, 0x00	; 0
    6334:	86 0f       	add	r24, r22
    6336:	91 1d       	adc	r25, r1
    6338:	01 97       	sbiw	r24, 0x01	; 1
    633a:	48 17       	cp	r20, r24
    633c:	59 07       	cpc	r21, r25
    633e:	20 f4       	brcc	.+8      	; 0x6348 <update_menu+0x156>
		{
			*top = *top + 1;								// Shuffle list down
    6340:	2f 5f       	subi	r18, 0xFF	; 255
    6342:	3f 4f       	sbci	r19, 0xFF	; 255
    6344:	31 83       	std	Z+1, r19	; 0x01
    6346:	20 83       	st	Z, r18
		}
	}

	// Remove temporary offset
	*top = *top - offset;
    6348:	d7 01       	movw	r26, r14
    634a:	8d 91       	ld	r24, X+
    634c:	9c 91       	ld	r25, X
    634e:	11 97       	sbiw	r26, 0x01	; 1
    6350:	80 1b       	sub	r24, r16
    6352:	91 0b       	sbc	r25, r17
    6354:	8d 93       	st	X+, r24
    6356:	9c 93       	st	X, r25
}
    6358:	0f 90       	pop	r0
    635a:	0f 90       	pop	r0
    635c:	df 91       	pop	r29
    635e:	cf 91       	pop	r28
    6360:	1f 91       	pop	r17
    6362:	0f 91       	pop	r16
    6364:	ff 90       	pop	r15
    6366:	ef 90       	pop	r14
    6368:	df 90       	pop	r13
    636a:	cf 90       	pop	r12
    636c:	bf 90       	pop	r11
    636e:	af 90       	pop	r10
    6370:	08 95       	ret

00006372 <print_cursor>:
// Print cursor on specified line
//************************************************************

void print_cursor(uint8_t line)
{
	LCD_Display_Text(13, (const unsigned char*)Wingdings, CURSOROFFSET, line);
    6372:	28 2f       	mov	r18, r24
    6374:	30 e0       	ldi	r19, 0x00	; 0
    6376:	43 e0       	ldi	r20, 0x03	; 3
    6378:	50 e0       	ldi	r21, 0x00	; 0
    637a:	65 ef       	ldi	r22, 0xF5	; 245
    637c:	70 e0       	ldi	r23, 0x00	; 0
    637e:	8d e0       	ldi	r24, 0x0D	; 13
    6380:	90 e0       	ldi	r25, 0x00	; 0
    6382:	0c 94 20 22 	jmp	0x4440	; 0x4440 <LCD_Display_Text>

00006386 <print_menu_items>:
// MenuOffsets = originally an array, now just a fixed horizontal offset for the value text
// text_link = pointer to the text list for the values if not numeric
// cursor = cursor position
//**********************************************************************
void print_menu_items(uint16_t top, uint16_t start, int8_t values[], const unsigned char* menu_ranges, uint8_t rangetype, uint8_t MenuOffsets, const unsigned char* text_link, uint8_t cursor)
{
    6386:	2f 92       	push	r2
    6388:	3f 92       	push	r3
    638a:	4f 92       	push	r4
    638c:	5f 92       	push	r5
    638e:	6f 92       	push	r6
    6390:	7f 92       	push	r7
    6392:	8f 92       	push	r8
    6394:	9f 92       	push	r9
    6396:	af 92       	push	r10
    6398:	bf 92       	push	r11
    639a:	cf 92       	push	r12
    639c:	df 92       	push	r13
    639e:	ef 92       	push	r14
    63a0:	ff 92       	push	r15
    63a2:	0f 93       	push	r16
    63a4:	1f 93       	push	r17
    63a6:	cf 93       	push	r28
    63a8:	df 93       	push	r29
    63aa:	cd b7       	in	r28, 0x3d	; 61
    63ac:	de b7       	in	r29, 0x3e	; 62
    63ae:	2a 97       	sbiw	r28, 0x0a	; 10
    63b0:	0f b6       	in	r0, 0x3f	; 63
    63b2:	f8 94       	cli
    63b4:	de bf       	out	0x3e, r29	; 62
    63b6:	0f be       	out	0x3f, r0	; 63
    63b8:	cd bf       	out	0x3d, r28	; 61
    63ba:	2c 01       	movw	r4, r24
    63bc:	4a 01       	movw	r8, r20
    63be:	39 01       	movw	r6, r18
    63c0:	0e 83       	std	Y+6, r16	; 0x06
    63c2:	ef 82       	std	Y+7, r14	; 0x07
    63c4:	a8 86       	std	Y+8, r10	; 0x08
	menu_range_t	range1;
		
	// Clear buffer before each update
	clear_buffer(buffer);
    63c6:	80 e0       	ldi	r24, 0x00	; 0
    63c8:	91 e0       	ldi	r25, 0x01	; 1
    63ca:	69 87       	std	Y+9, r22	; 0x09
    63cc:	7a 87       	std	Y+10, r23	; 0x0a
    63ce:	0e 94 73 20 	call	0x40e6	; 0x40e6 <clear_buffer>
	print_menu_frame(0);
    63d2:	80 e0       	ldi	r24, 0x00	; 0
    63d4:	0e 94 62 2e 	call	0x5cc4	; 0x5cc4 <print_menu_frame>
    63d8:	25 e0       	ldi	r18, 0x05	; 5
    63da:	69 85       	ldd	r22, Y+9	; 0x09
    63dc:	7a 85       	ldd	r23, Y+10	; 0x0a
    63de:	26 9f       	mul	r18, r22
    63e0:	c0 01       	movw	r24, r0
    63e2:	27 9f       	mul	r18, r23
    63e4:	90 0d       	add	r25, r0
    63e6:	11 24       	eor	r1, r1
    63e8:	13 01       	movw	r2, r6
    63ea:	28 1a       	sub	r2, r24
    63ec:	39 0a       	sbc	r3, r25
    63ee:	24 9d       	mul	r18, r4
    63f0:	c0 01       	movw	r24, r0
    63f2:	25 9d       	mul	r18, r5
    63f4:	90 0d       	add	r25, r0
    63f6:	11 24       	eor	r1, r1
    63f8:	28 0e       	add	r2, r24
    63fa:	39 1e       	adc	r3, r25
    63fc:	72 01       	movw	r14, r4
    63fe:	a1 2c       	mov	r10, r1
    6400:	b1 2c       	mov	r11, r1
    6402:	a0 e3       	ldi	r26, 0x30	; 48
    6404:	4a 2e       	mov	r4, r26
    6406:	a8 e1       	ldi	r26, 0x18	; 24
    6408:	5a 2e       	mov	r5, r26
    640a:	4e 18       	sub	r4, r14
    640c:	5f 08       	sbc	r5, r15
    640e:	c6 1a       	sub	r12, r22
    6410:	d7 0a       	sbc	r13, r23
    6412:	86 1a       	sub	r8, r22
    6414:	97 0a       	sbc	r9, r23
    6416:	82 01       	movw	r16, r4
    6418:	0e 0d       	add	r16, r14
    641a:	1f 1d       	adc	r17, r15
	
	// Print each line
	for (uint8_t i = 0; i < 4; i++)
	{
		LCD_Display_Text(top+i,(const unsigned char*)Verdana8,ITEMOFFSET,(uint8_t)pgm_read_byte(&lines[i]));
    641c:	f8 01       	movw	r30, r16
    641e:	24 91       	lpm	r18, Z
    6420:	30 e0       	ldi	r19, 0x00	; 0
    6422:	4a e0       	ldi	r20, 0x0A	; 10
    6424:	50 e0       	ldi	r21, 0x00	; 0
    6426:	6d e0       	ldi	r22, 0x0D	; 13
    6428:	7a e0       	ldi	r23, 0x0A	; 10
    642a:	c7 01       	movw	r24, r14
    642c:	0e 94 20 22 	call	0x4440	; 0x4440 <LCD_Display_Text>

		// Handle unique or copied ranges (to reduce space)
		if (rangetype == 0)
    6430:	fe 81       	ldd	r31, Y+6	; 0x06
		{
			// Use each unique entry
			memcpy_P(&range1, &menu_ranges[(top+i - start)* sizeof(range1)], sizeof(range1));
    6432:	45 e0       	ldi	r20, 0x05	; 5
    6434:	50 e0       	ldi	r21, 0x00	; 0
	for (uint8_t i = 0; i < 4; i++)
	{
		LCD_Display_Text(top+i,(const unsigned char*)Verdana8,ITEMOFFSET,(uint8_t)pgm_read_byte(&lines[i]));

		// Handle unique or copied ranges (to reduce space)
		if (rangetype == 0)
    6436:	f1 11       	cpse	r31, r1
    6438:	04 c0       	rjmp	.+8      	; 0x6442 <print_menu_items+0xbc>
		{
			// Use each unique entry
			memcpy_P(&range1, &menu_ranges[(top+i - start)* sizeof(range1)], sizeof(range1));
    643a:	b5 01       	movw	r22, r10
    643c:	62 0d       	add	r22, r2
    643e:	73 1d       	adc	r23, r3
    6440:	01 c0       	rjmp	.+2      	; 0x6444 <print_menu_items+0xbe>
		}
		else
		{
			// Use just the first entry in array for all 
			memcpy_P(&range1, &menu_ranges[0], sizeof(range1));
    6442:	b3 01       	movw	r22, r6
    6444:	ce 01       	movw	r24, r28
    6446:	01 96       	adiw	r24, 0x01	; 1
    6448:	0e 94 e7 48 	call	0x91ce	; 0x91ce <memcpy_P>
		}

		print_menu_text((values[top+i - start]), range1.style, (pgm_read_byte(&text_link[top+i - start]) + values[top+i - start]), MenuOffsets, (uint8_t)pgm_read_byte(&lines[i]));
    644c:	f8 01       	movw	r30, r16
    644e:	04 91       	lpm	r16, Z
    6450:	f6 01       	movw	r30, r12
    6452:	ee 0d       	add	r30, r14
    6454:	ff 1d       	adc	r31, r15
    6456:	e4 91       	lpm	r30, Z
    6458:	d4 01       	movw	r26, r8
    645a:	ae 0d       	add	r26, r14
    645c:	bf 1d       	adc	r27, r15
    645e:	8c 91       	ld	r24, X
    6460:	99 27       	eor	r25, r25
    6462:	87 fd       	sbrc	r24, 7
    6464:	90 95       	com	r25
    6466:	ac 01       	movw	r20, r24
    6468:	4e 0f       	add	r20, r30
    646a:	51 1d       	adc	r21, r1
    646c:	2f 81       	ldd	r18, Y+7	; 0x07
    646e:	6c 81       	ldd	r22, Y+4	; 0x04
    6470:	0e 94 e7 2e 	call	0x5dce	; 0x5dce <print_menu_text>
    6474:	ff ef       	ldi	r31, 0xFF	; 255
    6476:	ef 1a       	sub	r14, r31
    6478:	ff 0a       	sbc	r15, r31
    647a:	85 e0       	ldi	r24, 0x05	; 5
    647c:	a8 0e       	add	r10, r24
    647e:	b1 1c       	adc	r11, r1
	// Clear buffer before each update
	clear_buffer(buffer);
	print_menu_frame(0);
	
	// Print each line
	for (uint8_t i = 0; i < 4; i++)
    6480:	e4 e1       	ldi	r30, 0x14	; 20
    6482:	ae 16       	cp	r10, r30
    6484:	b1 04       	cpc	r11, r1
    6486:	09 f0       	breq	.+2      	; 0x648a <print_menu_items+0x104>
    6488:	c6 cf       	rjmp	.-116    	; 0x6416 <print_menu_items+0x90>
		}

		print_menu_text((values[top+i - start]), range1.style, (pgm_read_byte(&text_link[top+i - start]) + values[top+i - start]), MenuOffsets, (uint8_t)pgm_read_byte(&lines[i]));
	}

	print_cursor(cursor);	// Cursor
    648a:	88 85       	ldd	r24, Y+8	; 0x08
    648c:	0e 94 b9 31 	call	0x6372	; 0x6372 <print_cursor>
	write_buffer(buffer);
    6490:	80 e0       	ldi	r24, 0x00	; 0
    6492:	91 e0       	ldi	r25, 0x01	; 1
    6494:	0e 94 41 20 	call	0x4082	; 0x4082 <write_buffer>
	poll_buttons(true);
    6498:	81 e0       	ldi	r24, 0x01	; 1
    649a:	0e 94 0e 2f 	call	0x5e1c	; 0x5e1c <poll_buttons>
}
    649e:	2a 96       	adiw	r28, 0x0a	; 10
    64a0:	0f b6       	in	r0, 0x3f	; 63
    64a2:	f8 94       	cli
    64a4:	de bf       	out	0x3e, r29	; 62
    64a6:	0f be       	out	0x3f, r0	; 63
    64a8:	cd bf       	out	0x3d, r28	; 61
    64aa:	df 91       	pop	r29
    64ac:	cf 91       	pop	r28
    64ae:	1f 91       	pop	r17
    64b0:	0f 91       	pop	r16
    64b2:	ff 90       	pop	r15
    64b4:	ef 90       	pop	r14
    64b6:	df 90       	pop	r13
    64b8:	cf 90       	pop	r12
    64ba:	bf 90       	pop	r11
    64bc:	af 90       	pop	r10
    64be:	9f 90       	pop	r9
    64c0:	8f 90       	pop	r8
    64c2:	7f 90       	pop	r7
    64c4:	6f 90       	pop	r6
    64c6:	5f 90       	pop	r5
    64c8:	4f 90       	pop	r4
    64ca:	3f 90       	pop	r3
    64cc:	2f 90       	pop	r2
    64ce:	08 95       	ret

000064d0 <menu_flight>:
//************************************************************
// Main menu-specific setup
//************************************************************

void menu_flight(uint8_t mode)
{
    64d0:	6f 92       	push	r6
    64d2:	7f 92       	push	r7
    64d4:	8f 92       	push	r8
    64d6:	af 92       	push	r10
    64d8:	bf 92       	push	r11
    64da:	cf 92       	push	r12
    64dc:	df 92       	push	r13
    64de:	ef 92       	push	r14
    64e0:	ff 92       	push	r15
    64e2:	0f 93       	push	r16
    64e4:	1f 93       	push	r17
    64e6:	cf 93       	push	r28
    64e8:	df 93       	push	r29
    64ea:	00 d0       	rcall	.+0      	; 0x64ec <menu_flight+0x1c>
    64ec:	00 d0       	rcall	.+0      	; 0x64ee <menu_flight+0x1e>
    64ee:	1f 92       	push	r1
    64f0:	cd b7       	in	r28, 0x3d	; 61
    64f2:	de b7       	in	r29, 0x3e	; 62
	int8_t *value_ptr;
	menu_range_t range;
	uint8_t text_link;

	// If sub-menu item has changed, reset sub-menu positions
	if (menu_flag)
    64f4:	90 91 e4 07 	lds	r25, 0x07E4
    64f8:	99 23       	and	r25, r25
    64fa:	41 f0       	breq	.+16     	; 0x650c <menu_flight+0x3c>
	{
		sub_top = FLIGHTSTART;
    64fc:	2a ea       	ldi	r18, 0xAA	; 170
    64fe:	30 e0       	ldi	r19, 0x00	; 0
    6500:	30 93 35 05 	sts	0x0535, r19
    6504:	20 93 34 05 	sts	0x0534, r18
		menu_flag = 0;
    6508:	10 92 e4 07 	sts	0x07E4, r1
	}

	while(button != BACK)
	{
		value_ptr = &Config.FlightMode[mode].Roll_P_mult;
    650c:	92 e1       	ldi	r25, 0x12	; 18
    650e:	89 9f       	mul	r24, r25
    6510:	30 01       	movw	r6, r0
    6512:	11 24       	eor	r1, r1
    6514:	c3 01       	movw	r24, r6
    6516:	85 52       	subi	r24, 0x25	; 37
    6518:	9a 4f       	sbci	r25, 0xFA	; 250
    651a:	3c 01       	movw	r6, r24
	{
		sub_top = FLIGHTSTART;
		menu_flag = 0;
	}

	while(button != BACK)
    651c:	80 91 e2 07 	lds	r24, 0x07E2
    6520:	80 37       	cpi	r24, 0x70	; 112
    6522:	09 f4       	brne	.+2      	; 0x6526 <menu_flight+0x56>
    6524:	5d c0       	rjmp	.+186    	; 0x65e0 <menu_flight+0x110>
	{
		value_ptr = &Config.FlightMode[mode].Roll_P_mult;

		// Print menu
		print_menu_items(sub_top, FLIGHTSTART, value_ptr, (const unsigned char*)flight_menu_ranges, 0, FLIGHTOFFSET, (const unsigned char*)FlightMenuText, cursor);
    6526:	a0 90 04 05 	lds	r10, 0x0504
    652a:	8e e8       	ldi	r24, 0x8E	; 142
    652c:	c8 2e       	mov	r12, r24
    652e:	88 e1       	ldi	r24, 0x18	; 24
    6530:	d8 2e       	mov	r13, r24
    6532:	9f e4       	ldi	r25, 0x4F	; 79
    6534:	e9 2e       	mov	r14, r25
    6536:	00 e0       	ldi	r16, 0x00	; 0
    6538:	24 e3       	ldi	r18, 0x34	; 52
    653a:	38 e1       	ldi	r19, 0x18	; 24
    653c:	a3 01       	movw	r20, r6
    653e:	6a ea       	ldi	r22, 0xAA	; 170
    6540:	70 e0       	ldi	r23, 0x00	; 0
    6542:	80 91 34 05 	lds	r24, 0x0534
    6546:	90 91 35 05 	lds	r25, 0x0535
    654a:	0e 94 c3 31 	call	0x6386	; 0x6386 <print_menu_items>

		// Handle menu changes
		update_menu(FLIGHTITEMS, FLIGHTSTART, 0, button, &cursor, &sub_top, &menu_temp);
    654e:	2f e2       	ldi	r18, 0x2F	; 47
    6550:	c2 2e       	mov	r12, r18
    6552:	25 e0       	ldi	r18, 0x05	; 5
    6554:	d2 2e       	mov	r13, r18
    6556:	34 e3       	ldi	r19, 0x34	; 52
    6558:	e3 2e       	mov	r14, r19
    655a:	35 e0       	ldi	r19, 0x05	; 5
    655c:	f3 2e       	mov	r15, r19
    655e:	04 e0       	ldi	r16, 0x04	; 4
    6560:	15 e0       	ldi	r17, 0x05	; 5
    6562:	20 91 e2 07 	lds	r18, 0x07E2
    6566:	40 e0       	ldi	r20, 0x00	; 0
    6568:	6a ea       	ldi	r22, 0xAA	; 170
    656a:	82 e1       	ldi	r24, 0x12	; 18
    656c:	0e 94 f9 30 	call	0x61f2	; 0x61f2 <update_menu>
		range = get_menu_range ((const unsigned char*)flight_menu_ranges, (menu_temp - FLIGHTSTART));
    6570:	60 91 2f 05 	lds	r22, 0x052F
    6574:	6a 5a       	subi	r22, 0xAA	; 170
    6576:	84 e3       	ldi	r24, 0x34	; 52
    6578:	98 e1       	ldi	r25, 0x18	; 24
    657a:	0e 94 b7 2e 	call	0x5d6e	; 0x5d6e <get_menu_range>
    657e:	29 83       	std	Y+1, r18	; 0x01
    6580:	3a 83       	std	Y+2, r19	; 0x02
    6582:	4b 83       	std	Y+3, r20	; 0x03
    6584:	5c 83       	std	Y+4, r21	; 0x04
    6586:	6d 83       	std	Y+5, r22	; 0x05

		if (button == ENTER)
    6588:	80 91 e2 07 	lds	r24, 0x07E2
    658c:	80 3e       	cpi	r24, 0xE0	; 224
    658e:	e1 f4       	brne	.+56     	; 0x65c8 <menu_flight+0xf8>
		{
			text_link = pgm_read_byte(&FlightMenuText[menu_temp - FLIGHTSTART]);
    6590:	80 91 2f 05 	lds	r24, 0x052F
    6594:	90 91 30 05 	lds	r25, 0x0530
    6598:	bc 01       	movw	r22, r24
    659a:	6a 5a       	subi	r22, 0xAA	; 170
    659c:	71 09       	sbc	r23, r1
    659e:	fb 01       	movw	r30, r22
    65a0:	e2 57       	subi	r30, 0x72	; 114
    65a2:	f7 4e       	sbci	r31, 0xE7	; 231
    65a4:	a4 90       	lpm	r10, Z
			do_menu_item(menu_temp, value_ptr + (menu_temp - FLIGHTSTART), 1, range, 0, text_link, false, 0);
    65a6:	b1 2c       	mov	r11, r1
    65a8:	66 0d       	add	r22, r6
    65aa:	77 1d       	adc	r23, r7
    65ac:	1f 92       	push	r1
    65ae:	1f 92       	push	r1
    65b0:	81 2c       	mov	r8, r1
    65b2:	c1 2c       	mov	r12, r1
    65b4:	e9 80       	ldd	r14, Y+1	; 0x01
    65b6:	fa 80       	ldd	r15, Y+2	; 0x02
    65b8:	0b 81       	ldd	r16, Y+3	; 0x03
    65ba:	1c 81       	ldd	r17, Y+4	; 0x04
    65bc:	2d 81       	ldd	r18, Y+5	; 0x05
    65be:	41 e0       	ldi	r20, 0x01	; 1
    65c0:	0e 94 43 2f 	call	0x5e86	; 0x5e86 <do_menu_item>
    65c4:	0f 90       	pop	r0
    65c6:	0f 90       	pop	r0
		}

		// Update limits when exiting
		if (button == ENTER)
    65c8:	80 91 e2 07 	lds	r24, 0x07E2
    65cc:	80 3e       	cpi	r24, 0xE0	; 224
    65ce:	09 f0       	breq	.+2      	; 0x65d2 <menu_flight+0x102>
    65d0:	a5 cf       	rjmp	.-182    	; 0x651c <menu_flight+0x4c>
		{
			UpdateLimits();			 // Update I-term limits and triggers based on percentages
    65d2:	0e 94 65 36 	call	0x6cca	; 0x6cca <UpdateLimits>
			Save_Config_to_EEPROM(); // Save value and return
    65d6:	0e 94 93 16 	call	0x2d26	; 0x2d26 <Save_Config_to_EEPROM>
			Wait_BUTTON4();			 // Wait for user's finger off the button
    65da:	0e 94 c4 33 	call	0x6788	; 0x6788 <Wait_BUTTON4>
    65de:	9e cf       	rjmp	.-196    	; 0x651c <menu_flight+0x4c>
		}
	}
}
    65e0:	0f 90       	pop	r0
    65e2:	0f 90       	pop	r0
    65e4:	0f 90       	pop	r0
    65e6:	0f 90       	pop	r0
    65e8:	0f 90       	pop	r0
    65ea:	df 91       	pop	r29
    65ec:	cf 91       	pop	r28
    65ee:	1f 91       	pop	r17
    65f0:	0f 91       	pop	r16
    65f2:	ff 90       	pop	r15
    65f4:	ef 90       	pop	r14
    65f6:	df 90       	pop	r13
    65f8:	cf 90       	pop	r12
    65fa:	bf 90       	pop	r11
    65fc:	af 90       	pop	r10
    65fe:	8f 90       	pop	r8
    6600:	7f 90       	pop	r7
    6602:	6f 90       	pop	r6
    6604:	08 95       	ret

00006606 <do_main_menu_item>:
	}
}

void do_main_menu_item(uint8_t menuitem)
{
	switch(menuitem) 
    6606:	90 e0       	ldi	r25, 0x00	; 0
    6608:	fc 01       	movw	r30, r24
    660a:	ed 54       	subi	r30, 0x4D	; 77
    660c:	f1 09       	sbc	r31, r1
    660e:	e3 31       	cpi	r30, 0x13	; 19
    6610:	f1 05       	cpc	r31, r1
    6612:	70 f5       	brcc	.+92     	; 0x6670 <do_main_menu_item+0x6a>
    6614:	e7 5b       	subi	r30, 0xB7	; 183
    6616:	ff 4f       	sbci	r31, 0xFF	; 255
    6618:	0c 94 b0 48 	jmp	0x9160	; 0x9160 <__tablejump2__>
	{
		case MAINSTART:
			menu_rc_setup(2); 		// 1.General
    661c:	82 e0       	ldi	r24, 0x02	; 2
    661e:	01 c0       	rjmp	.+2      	; 0x6622 <do_main_menu_item+0x1c>
			break;
		case MAINSTART+1:
			menu_rc_setup(1); 		// 2.RX setup	
    6620:	81 e0       	ldi	r24, 0x01	; 1
    6622:	0c 94 59 35 	jmp	0x6ab2	; 0x6ab2 <menu_rc_setup>
			break;
		case MAINSTART+2:
			Display_rcinput();		// 3.RX inputs
    6626:	0c 94 9d 11 	jmp	0x233a	; 0x233a <Display_rcinput>
			break;
		case MAINSTART+3:
			Display_sticks(); 		// 4.Stick polarity	
    662a:	0c 94 51 15 	jmp	0x2aa2	; 0x2aa2 <Display_sticks>
			break;
		case MAINSTART+4:
			Display_sensors();		// 5.Sensor calibration
    662e:	0c 94 9c 12 	jmp	0x2538	; 0x2538 <Display_sensors>
			break;
		case MAINSTART+5:
			Display_balance();		// 6.Level meter
    6632:	0c 94 0d 11 	jmp	0x221a	; 0x221a <Display_balance>
			break;
		case MAINSTART+6:
			menu_flight(0);			// 7.Flight profile 1
    6636:	80 e0       	ldi	r24, 0x00	; 0
    6638:	01 c0       	rjmp	.+2      	; 0x663c <do_main_menu_item+0x36>
			break;
		case MAINSTART+7:
			menu_flight(1); 		// 8.Flight profile 2
    663a:	81 e0       	ldi	r24, 0x01	; 1
    663c:	0c 94 68 32 	jmp	0x64d0	; 0x64d0 <menu_flight>
			break;
		case MAINSTART+8:
			menu_mixer(0);			// 9.OUT1 Mixer
    6640:	80 e0       	ldi	r24, 0x00	; 0
    6642:	0d c0       	rjmp	.+26     	; 0x665e <do_main_menu_item+0x58>
			break;
		case MAINSTART+9:
			menu_mixer(1);			// 10.OUT2 Mixer
    6644:	81 e0       	ldi	r24, 0x01	; 1
    6646:	0b c0       	rjmp	.+22     	; 0x665e <do_main_menu_item+0x58>
			break;
		case MAINSTART+10:
			menu_mixer(2);			// 11.OUT3 Mixer
    6648:	82 e0       	ldi	r24, 0x02	; 2
    664a:	09 c0       	rjmp	.+18     	; 0x665e <do_main_menu_item+0x58>
			break;
		case MAINSTART+11:
			menu_mixer(3);			// 12.OUT4 Mixer
    664c:	83 e0       	ldi	r24, 0x03	; 3
    664e:	07 c0       	rjmp	.+14     	; 0x665e <do_main_menu_item+0x58>
			break;
		case MAINSTART+12:
			menu_mixer(4);			// 13.OUT5 Mixer
    6650:	84 e0       	ldi	r24, 0x04	; 4
    6652:	05 c0       	rjmp	.+10     	; 0x665e <do_main_menu_item+0x58>
			break;
		case MAINSTART+13:
			menu_mixer(5);			// 14.OUT6 Mixer
    6654:	85 e0       	ldi	r24, 0x05	; 5
    6656:	03 c0       	rjmp	.+6      	; 0x665e <do_main_menu_item+0x58>
			break;
		case MAINSTART+14:
			menu_mixer(6);			// 15.OUT7 Mixer
    6658:	86 e0       	ldi	r24, 0x06	; 6
    665a:	01 c0       	rjmp	.+2      	; 0x665e <do_main_menu_item+0x58>
			break;
		case MAINSTART+15:
			menu_mixer(7);			// 16.OUT8 Mixer
    665c:	87 e0       	ldi	r24, 0x07	; 7
    665e:	0c 94 d1 33 	jmp	0x67a2	; 0x67a2 <menu_mixer>
			break;
		case MAINSTART+16:
			menu_servo_setup(1);	// 17.Servo direction
    6662:	81 e0       	ldi	r24, 0x01	; 1
    6664:	03 c0       	rjmp	.+6      	; 0x666c <do_main_menu_item+0x66>
			break;
		case MAINSTART+17:
			menu_servo_setup(2); 	// 18.Neg. Servo trvl. (%)
    6666:	82 e0       	ldi	r24, 0x02	; 2
    6668:	01 c0       	rjmp	.+2      	; 0x666c <do_main_menu_item+0x66>
			break;
		case MAINSTART+18:
			menu_servo_setup(3); 	// 19.Pos. Servo trvl. (%)
    666a:	83 e0       	ldi	r24, 0x03	; 3
    666c:	0c 94 6c 34 	jmp	0x68d8	; 0x68d8 <menu_servo_setup>
    6670:	08 95       	ret

00006672 <Wait_BUTTON1>:
	} // Switch
}

void Wait_BUTTON1(void)
{
	while(BUTTON1 == 0)
    6672:	1f 99       	sbic	0x03, 7	; 3
    6674:	0a c0       	rjmp	.+20     	; 0x668a <Wait_BUTTON1+0x18>
    6676:	2f e3       	ldi	r18, 0x3F	; 63
    6678:	8d e0       	ldi	r24, 0x0D	; 13
    667a:	93 e0       	ldi	r25, 0x03	; 3
    667c:	21 50       	subi	r18, 0x01	; 1
    667e:	80 40       	sbci	r24, 0x00	; 0
    6680:	90 40       	sbci	r25, 0x00	; 0
    6682:	e1 f7       	brne	.-8      	; 0x667c <Wait_BUTTON1+0xa>
    6684:	00 c0       	rjmp	.+0      	; 0x6686 <Wait_BUTTON1+0x14>
    6686:	00 00       	nop
    6688:	f4 cf       	rjmp	.-24     	; 0x6672 <Wait_BUTTON1>
	{
		_delay_ms(50);
	}
}
    668a:	08 95       	ret

0000668c <menu_main>:
uint16_t main_top = MAINSTART;
uint16_t sub_top = 0;
uint8_t menu_flag;

void menu_main(void)
{
    668c:	af 92       	push	r10
    668e:	bf 92       	push	r11
    6690:	cf 92       	push	r12
    6692:	df 92       	push	r13
    6694:	ef 92       	push	r14
    6696:	ff 92       	push	r15
    6698:	0f 93       	push	r16
    669a:	1f 93       	push	r17
    669c:	cf 93       	push	r28
    669e:	df 93       	push	r29
	static uint8_t main_cursor = LINE0;	// These are now static so as to remember the main menu position
	static uint16_t main_temp = 0;
	static uint8_t old_menu = 0;

	button = NONE;
    66a0:	80 ef       	ldi	r24, 0xF0	; 240
    66a2:	80 93 e2 07 	sts	0x07E2, r24

	// Wait until user's finger is off button 1
	Wait_BUTTON1();
    66a6:	0e 94 39 33 	call	0x6672	; 0x6672 <Wait_BUTTON1>

		// If main menu item has changed, reset sub-menu positions
		// and flag to sub-menus that positions need to be reset
		if (main_temp != old_menu)
		{
			cursor = LINE0;
    66aa:	23 e0       	ldi	r18, 0x03	; 3
    66ac:	b2 2e       	mov	r11, r18

		// If ENTER pressed, jump to menu 
		if (button == ENTER)
		{
			do_main_menu_item(main_temp);
			button = NONE;
    66ae:	30 ef       	ldi	r19, 0xF0	; 240
    66b0:	a3 2e       	mov	r10, r19
	button = NONE;

	// Wait until user's finger is off button 1
	Wait_BUTTON1();
	
	while(button != BACK)
    66b2:	80 91 e2 07 	lds	r24, 0x07E2
    66b6:	80 37       	cpi	r24, 0x70	; 112
    66b8:	09 f4       	brne	.+2      	; 0x66bc <menu_main+0x30>
    66ba:	5b c0       	rjmp	.+182    	; 0x6772 <menu_main+0xe6>
	{
		// Clear buffer before each update
		clear_buffer(buffer);	
    66bc:	80 e0       	ldi	r24, 0x00	; 0
    66be:	91 e0       	ldi	r25, 0x01	; 1
    66c0:	0e 94 73 20 	call	0x40e6	; 0x40e6 <clear_buffer>

		// Print menu
		print_menu_frame(0);													// Frame
    66c4:	80 e0       	ldi	r24, 0x00	; 0
    66c6:	0e 94 62 2e 	call	0x5cc4	; 0x5cc4 <print_menu_frame>
		
		for (uint16_t i = 0; i < 4; i++)
    66ca:	c0 e0       	ldi	r28, 0x00	; 0
    66cc:	d0 e0       	ldi	r29, 0x00	; 0
    66ce:	fe 01       	movw	r30, r28
    66d0:	e0 5d       	subi	r30, 0xD0	; 208
    66d2:	f7 4e       	sbci	r31, 0xE7	; 231
		{
			LCD_Display_Text(main_top+i,(const unsigned char*)Verdana8,ITEMOFFSET,(uint8_t)pgm_read_byte(&lines[i]));	// Lines
    66d4:	24 91       	lpm	r18, Z
    66d6:	30 e0       	ldi	r19, 0x00	; 0
    66d8:	80 91 06 05 	lds	r24, 0x0506
    66dc:	90 91 07 05 	lds	r25, 0x0507
    66e0:	4a e0       	ldi	r20, 0x0A	; 10
    66e2:	50 e0       	ldi	r21, 0x00	; 0
    66e4:	6d e0       	ldi	r22, 0x0D	; 13
    66e6:	7a e0       	ldi	r23, 0x0A	; 10
    66e8:	8c 0f       	add	r24, r28
    66ea:	9d 1f       	adc	r25, r29
    66ec:	0e 94 20 22 	call	0x4440	; 0x4440 <LCD_Display_Text>
		clear_buffer(buffer);	

		// Print menu
		print_menu_frame(0);													// Frame
		
		for (uint16_t i = 0; i < 4; i++)
    66f0:	21 96       	adiw	r28, 0x01	; 1
    66f2:	c4 30       	cpi	r28, 0x04	; 4
    66f4:	d1 05       	cpc	r29, r1
    66f6:	59 f7       	brne	.-42     	; 0x66ce <menu_main+0x42>
		{
			LCD_Display_Text(main_top+i,(const unsigned char*)Verdana8,ITEMOFFSET,(uint8_t)pgm_read_byte(&lines[i]));	// Lines
		}

		print_cursor(main_cursor);												// Cursor
    66f8:	80 91 05 05 	lds	r24, 0x0505
    66fc:	0e 94 b9 31 	call	0x6372	; 0x6372 <print_cursor>
		write_buffer(buffer);
    6700:	80 e0       	ldi	r24, 0x00	; 0
    6702:	91 e0       	ldi	r25, 0x01	; 1
    6704:	0e 94 41 20 	call	0x4082	; 0x4082 <write_buffer>

		// Poll buttons when idle
		poll_buttons(true);
    6708:	81 e0       	ldi	r24, 0x01	; 1
    670a:	0e 94 0e 2f 	call	0x5e1c	; 0x5e1c <poll_buttons>

		// Handle menu changes
		update_menu(MAINITEMS, MAINSTART, 0, button, &main_cursor, &main_top, &main_temp);
    670e:	82 e3       	ldi	r24, 0x32	; 50
    6710:	c8 2e       	mov	r12, r24
    6712:	85 e0       	ldi	r24, 0x05	; 5
    6714:	d8 2e       	mov	r13, r24
    6716:	96 e0       	ldi	r25, 0x06	; 6
    6718:	e9 2e       	mov	r14, r25
    671a:	95 e0       	ldi	r25, 0x05	; 5
    671c:	f9 2e       	mov	r15, r25
    671e:	05 e0       	ldi	r16, 0x05	; 5
    6720:	15 e0       	ldi	r17, 0x05	; 5
    6722:	20 91 e2 07 	lds	r18, 0x07E2
    6726:	40 e0       	ldi	r20, 0x00	; 0
    6728:	6d e4       	ldi	r22, 0x4D	; 77
    672a:	83 e1       	ldi	r24, 0x13	; 19
    672c:	0e 94 f9 30 	call	0x61f2	; 0x61f2 <update_menu>

		// If main menu item has changed, reset sub-menu positions
		// and flag to sub-menus that positions need to be reset
		if (main_temp != old_menu)
    6730:	80 91 32 05 	lds	r24, 0x0532
    6734:	90 91 33 05 	lds	r25, 0x0533
    6738:	20 91 31 05 	lds	r18, 0x0531
    673c:	30 e0       	ldi	r19, 0x00	; 0
    673e:	82 17       	cp	r24, r18
    6740:	93 07       	cpc	r25, r19
    6742:	59 f0       	breq	.+22     	; 0x675a <menu_main+0xce>
		{
			cursor = LINE0;
    6744:	b0 92 04 05 	sts	0x0504, r11
			menu_temp = 0;
    6748:	10 92 30 05 	sts	0x0530, r1
    674c:	10 92 2f 05 	sts	0x052F, r1
			old_menu = main_temp;
    6750:	80 93 31 05 	sts	0x0531, r24
			menu_flag = 1;
    6754:	21 e0       	ldi	r18, 0x01	; 1
    6756:	20 93 e4 07 	sts	0x07E4, r18
		}

		// If ENTER pressed, jump to menu 
		if (button == ENTER)
    675a:	20 91 e2 07 	lds	r18, 0x07E2
    675e:	20 3e       	cpi	r18, 0xE0	; 224
    6760:	09 f0       	breq	.+2      	; 0x6764 <menu_main+0xd8>
    6762:	a7 cf       	rjmp	.-178    	; 0x66b2 <menu_main+0x26>
		{
			do_main_menu_item(main_temp);
    6764:	0e 94 03 33 	call	0x6606	; 0x6606 <do_main_menu_item>
			button = NONE;
    6768:	a0 92 e2 07 	sts	0x07E2, r10

			// Wait until user's finger is off button 1
			Wait_BUTTON1();
    676c:	0e 94 39 33 	call	0x6672	; 0x6672 <Wait_BUTTON1>
    6770:	a0 cf       	rjmp	.-192    	; 0x66b2 <menu_main+0x26>
		}
	}
}
    6772:	df 91       	pop	r29
    6774:	cf 91       	pop	r28
    6776:	1f 91       	pop	r17
    6778:	0f 91       	pop	r16
    677a:	ff 90       	pop	r15
    677c:	ef 90       	pop	r14
    677e:	df 90       	pop	r13
    6780:	cf 90       	pop	r12
    6782:	bf 90       	pop	r11
    6784:	af 90       	pop	r10
    6786:	08 95       	ret

00006788 <Wait_BUTTON4>:
	}
}

void Wait_BUTTON4(void)
{
	while(BUTTON4 == 0)
    6788:	1c 99       	sbic	0x03, 4	; 3
    678a:	0a c0       	rjmp	.+20     	; 0x67a0 <Wait_BUTTON4+0x18>
    678c:	2f e3       	ldi	r18, 0x3F	; 63
    678e:	8d e0       	ldi	r24, 0x0D	; 13
    6790:	93 e0       	ldi	r25, 0x03	; 3
    6792:	21 50       	subi	r18, 0x01	; 1
    6794:	80 40       	sbci	r24, 0x00	; 0
    6796:	90 40       	sbci	r25, 0x00	; 0
    6798:	e1 f7       	brne	.-8      	; 0x6792 <Wait_BUTTON4+0xa>
    679a:	00 c0       	rjmp	.+0      	; 0x679c <Wait_BUTTON4+0x14>
    679c:	00 00       	nop
    679e:	f4 cf       	rjmp	.-24     	; 0x6788 <Wait_BUTTON4>
	{
		_delay_ms(50);
	}
    67a0:	08 95       	ret

000067a2 <menu_mixer>:
//************************************************************
// Main menu-specific setup
//************************************************************

void menu_mixer(uint8_t i)
{
    67a2:	6f 92       	push	r6
    67a4:	7f 92       	push	r7
    67a6:	8f 92       	push	r8
    67a8:	af 92       	push	r10
    67aa:	bf 92       	push	r11
    67ac:	cf 92       	push	r12
    67ae:	df 92       	push	r13
    67b0:	ef 92       	push	r14
    67b2:	ff 92       	push	r15
    67b4:	0f 93       	push	r16
    67b6:	1f 93       	push	r17
    67b8:	cf 93       	push	r28
    67ba:	df 93       	push	r29
    67bc:	00 d0       	rcall	.+0      	; 0x67be <menu_mixer+0x1c>
    67be:	00 d0       	rcall	.+0      	; 0x67c0 <menu_mixer+0x1e>
    67c0:	1f 92       	push	r1
    67c2:	cd b7       	in	r28, 0x3d	; 61
    67c4:	de b7       	in	r29, 0x3e	; 62
	int8_t *value_ptr;
	menu_range_t range;
	uint8_t text_link = 0;

	// If sub-menu item has changed, reset sub-menu positions
	if (menu_flag)
    67c6:	90 91 e4 07 	lds	r25, 0x07E4
    67ca:	99 23       	and	r25, r25
    67cc:	41 f0       	breq	.+16     	; 0x67de <menu_mixer+0x3c>
	{
		sub_top = MIXERSTART;
    67ce:	2e eb       	ldi	r18, 0xBE	; 190
    67d0:	30 e0       	ldi	r19, 0x00	; 0
    67d2:	30 93 35 05 	sts	0x0535, r19
    67d6:	20 93 34 05 	sts	0x0534, r18
		menu_flag = 0;
    67da:	10 92 e4 07 	sts	0x07E4, r1
	}

	while(button != BACK)
	{
		value_ptr = &Config.Channel[i].Motor_marker;
    67de:	96 e2       	ldi	r25, 0x26	; 38
    67e0:	89 9f       	mul	r24, r25
    67e2:	30 01       	movw	r6, r0
    67e4:	11 24       	eor	r1, r1
    67e6:	c3 01       	movw	r24, r6
    67e8:	81 5c       	subi	r24, 0xC1	; 193
    67ea:	99 4f       	sbci	r25, 0xF9	; 249
    67ec:	3c 01       	movw	r6, r24
	{
		sub_top = MIXERSTART;
		menu_flag = 0;
	}

	while(button != BACK)
    67ee:	80 91 e2 07 	lds	r24, 0x07E2
    67f2:	80 37       	cpi	r24, 0x70	; 112
    67f4:	09 f4       	brne	.+2      	; 0x67f8 <menu_mixer+0x56>
    67f6:	5d c0       	rjmp	.+186    	; 0x68b2 <menu_mixer+0x110>
	{
		value_ptr = &Config.Channel[i].Motor_marker;

		// Print menu
		print_menu_items(sub_top, MIXERSTART, value_ptr, (const unsigned char*)mixer_menu_ranges, 0, MIXOFFSET, (const unsigned char*)MixerMenuText, cursor);
    67f8:	a0 90 04 05 	lds	r10, 0x0504
    67fc:	8a e4       	ldi	r24, 0x4A	; 74
    67fe:	c8 2e       	mov	r12, r24
    6800:	89 e1       	ldi	r24, 0x19	; 25
    6802:	d8 2e       	mov	r13, r24
    6804:	99 e5       	ldi	r25, 0x59	; 89
    6806:	e9 2e       	mov	r14, r25
    6808:	00 e0       	ldi	r16, 0x00	; 0
    680a:	20 ea       	ldi	r18, 0xA0	; 160
    680c:	38 e1       	ldi	r19, 0x18	; 24
    680e:	a3 01       	movw	r20, r6
    6810:	6e eb       	ldi	r22, 0xBE	; 190
    6812:	70 e0       	ldi	r23, 0x00	; 0
    6814:	80 91 34 05 	lds	r24, 0x0534
    6818:	90 91 35 05 	lds	r25, 0x0535
    681c:	0e 94 c3 31 	call	0x6386	; 0x6386 <print_menu_items>

		// Handle menu changes
		update_menu(MIXERITEMS, MIXERSTART, 0, button, &cursor, &sub_top, &menu_temp);
    6820:	2f e2       	ldi	r18, 0x2F	; 47
    6822:	c2 2e       	mov	r12, r18
    6824:	25 e0       	ldi	r18, 0x05	; 5
    6826:	d2 2e       	mov	r13, r18
    6828:	34 e3       	ldi	r19, 0x34	; 52
    682a:	e3 2e       	mov	r14, r19
    682c:	35 e0       	ldi	r19, 0x05	; 5
    682e:	f3 2e       	mov	r15, r19
    6830:	04 e0       	ldi	r16, 0x04	; 4
    6832:	15 e0       	ldi	r17, 0x05	; 5
    6834:	20 91 e2 07 	lds	r18, 0x07E2
    6838:	40 e0       	ldi	r20, 0x00	; 0
    683a:	6e eb       	ldi	r22, 0xBE	; 190
    683c:	82 e2       	ldi	r24, 0x22	; 34
    683e:	0e 94 f9 30 	call	0x61f2	; 0x61f2 <update_menu>
		range = get_menu_range ((const unsigned char*)mixer_menu_ranges, menu_temp - MIXERSTART);
    6842:	60 91 2f 05 	lds	r22, 0x052F
    6846:	6e 5b       	subi	r22, 0xBE	; 190
    6848:	80 ea       	ldi	r24, 0xA0	; 160
    684a:	98 e1       	ldi	r25, 0x18	; 24
    684c:	0e 94 b7 2e 	call	0x5d6e	; 0x5d6e <get_menu_range>
    6850:	29 83       	std	Y+1, r18	; 0x01
    6852:	3a 83       	std	Y+2, r19	; 0x02
    6854:	4b 83       	std	Y+3, r20	; 0x03
    6856:	5c 83       	std	Y+4, r21	; 0x04
    6858:	6d 83       	std	Y+5, r22	; 0x05

		if (button == ENTER)
    685a:	80 91 e2 07 	lds	r24, 0x07E2
    685e:	80 3e       	cpi	r24, 0xE0	; 224
    6860:	e1 f4       	brne	.+56     	; 0x689a <menu_mixer+0xf8>
		{
			text_link = pgm_read_byte(&MixerMenuText[menu_temp - MIXERSTART]);
    6862:	80 91 2f 05 	lds	r24, 0x052F
    6866:	90 91 30 05 	lds	r25, 0x0530
    686a:	bc 01       	movw	r22, r24
    686c:	6e 5b       	subi	r22, 0xBE	; 190
    686e:	71 09       	sbc	r23, r1
    6870:	fb 01       	movw	r30, r22
    6872:	e6 5b       	subi	r30, 0xB6	; 182
    6874:	f6 4e       	sbci	r31, 0xE6	; 230
    6876:	a4 90       	lpm	r10, Z
			do_menu_item(menu_temp, value_ptr + (menu_temp - MIXERSTART), 1, range, 0, text_link, false, 0);
    6878:	b1 2c       	mov	r11, r1
    687a:	66 0d       	add	r22, r6
    687c:	77 1d       	adc	r23, r7
    687e:	1f 92       	push	r1
    6880:	1f 92       	push	r1
    6882:	81 2c       	mov	r8, r1
    6884:	c1 2c       	mov	r12, r1
    6886:	e9 80       	ldd	r14, Y+1	; 0x01
    6888:	fa 80       	ldd	r15, Y+2	; 0x02
    688a:	0b 81       	ldd	r16, Y+3	; 0x03
    688c:	1c 81       	ldd	r17, Y+4	; 0x04
    688e:	2d 81       	ldd	r18, Y+5	; 0x05
    6890:	41 e0       	ldi	r20, 0x01	; 1
    6892:	0e 94 43 2f 	call	0x5e86	; 0x5e86 <do_menu_item>
    6896:	0f 90       	pop	r0
    6898:	0f 90       	pop	r0
		}

		// Update limits when exiting
		if (button == ENTER)
    689a:	80 91 e2 07 	lds	r24, 0x07E2
    689e:	80 3e       	cpi	r24, 0xE0	; 224
    68a0:	09 f0       	breq	.+2      	; 0x68a4 <menu_mixer+0x102>
    68a2:	a5 cf       	rjmp	.-182    	; 0x67ee <menu_mixer+0x4c>
		{
			UpdateLimits();			 // Update travel limits based on percentages
    68a4:	0e 94 65 36 	call	0x6cca	; 0x6cca <UpdateLimits>
			Save_Config_to_EEPROM(); // Save value and return
    68a8:	0e 94 93 16 	call	0x2d26	; 0x2d26 <Save_Config_to_EEPROM>
			Wait_BUTTON4();			 // Wait for user's finger off the button
    68ac:	0e 94 c4 33 	call	0x6788	; 0x6788 <Wait_BUTTON4>
    68b0:	9e cf       	rjmp	.-196    	; 0x67ee <menu_mixer+0x4c>
		}
	}
}
    68b2:	0f 90       	pop	r0
    68b4:	0f 90       	pop	r0
    68b6:	0f 90       	pop	r0
    68b8:	0f 90       	pop	r0
    68ba:	0f 90       	pop	r0
    68bc:	df 91       	pop	r29
    68be:	cf 91       	pop	r28
    68c0:	1f 91       	pop	r17
    68c2:	0f 91       	pop	r16
    68c4:	ff 90       	pop	r15
    68c6:	ef 90       	pop	r14
    68c8:	df 90       	pop	r13
    68ca:	cf 90       	pop	r12
    68cc:	bf 90       	pop	r11
    68ce:	af 90       	pop	r10
    68d0:	8f 90       	pop	r8
    68d2:	7f 90       	pop	r7
    68d4:	6f 90       	pop	r6
    68d6:	08 95       	ret

000068d8 <menu_servo_setup>:
//************************************************************
// Main menu-specific setup
//************************************************************

void menu_servo_setup(uint8_t section)
{
    68d8:	2f 92       	push	r2
    68da:	3f 92       	push	r3
    68dc:	4f 92       	push	r4
    68de:	5f 92       	push	r5
    68e0:	6f 92       	push	r6
    68e2:	7f 92       	push	r7
    68e4:	8f 92       	push	r8
    68e6:	9f 92       	push	r9
    68e8:	af 92       	push	r10
    68ea:	bf 92       	push	r11
    68ec:	cf 92       	push	r12
    68ee:	df 92       	push	r13
    68f0:	ef 92       	push	r14
    68f2:	ff 92       	push	r15
    68f4:	0f 93       	push	r16
    68f6:	1f 93       	push	r17
    68f8:	cf 93       	push	r28
    68fa:	df 93       	push	r29
    68fc:	cd b7       	in	r28, 0x3d	; 61
    68fe:	de b7       	in	r29, 0x3e	; 62
    6900:	28 97       	sbiw	r28, 0x08	; 8
    6902:	0f b6       	in	r0, 0x3f	; 63
    6904:	f8 94       	cli
    6906:	de bf       	out	0x3e, r29	; 62
    6908:	0f be       	out	0x3f, r0	; 63
    690a:	cd bf       	out	0x3d, r28	; 61
    690c:	98 2e       	mov	r9, r24
	uint8_t i = 0;
	bool	servo_enable = false;
	bool	zero_setting = false;

	// If submenu item has changed, reset submenu positions
	if (menu_flag)
    690e:	80 91 e4 07 	lds	r24, 0x07E4
    6912:	88 23       	and	r24, r24
    6914:	41 f0       	breq	.+16     	; 0x6926 <menu_servo_setup+0x4e>
	{
		sub_top = SERVOSTART;
    6916:	86 ee       	ldi	r24, 0xE6	; 230
    6918:	90 e0       	ldi	r25, 0x00	; 0
    691a:	90 93 35 05 	sts	0x0535, r25
    691e:	80 93 34 05 	sts	0x0534, r24
		menu_flag = 0;
    6922:	10 92 e4 07 	sts	0x07E4, r1
			}

			// Do not allow servo enable for throttle if in CPPM mode
			if ((Config.Channel[menu_temp - SERVOSTART].P1_source_a == THROTTLE) && (Config.RxMode == CPPM_MODE))
			{
				servo_enable = false;
    6926:	1e 82       	std	Y+6, r1	; 0x06
    6928:	5b e6       	ldi	r21, 0x6B	; 107
    692a:	65 2e       	mov	r6, r21
    692c:	57 e0       	ldi	r21, 0x07	; 7
    692e:	75 2e       	mov	r7, r21
					break;
			}
		}

		// Print menu
		print_menu_items(sub_top, SERVOSTART, value_ptr, (const unsigned char*)servo_menu_ranges[section - 1], 1, SERVOOFFSET, (const unsigned char*)ServoMenuText[section - 1], cursor);
    6930:	29 2c       	mov	r2, r9
    6932:	31 2c       	mov	r3, r1
    6934:	41 e0       	ldi	r20, 0x01	; 1
    6936:	24 1a       	sub	r2, r20
    6938:	31 08       	sbc	r3, r1
    693a:	85 e0       	ldi	r24, 0x05	; 5
    693c:	82 9d       	mul	r24, r2
    693e:	20 01       	movw	r4, r0
    6940:	83 9d       	mul	r24, r3
    6942:	50 0c       	add	r5, r0
    6944:	11 24       	eor	r1, r1
    6946:	c2 01       	movw	r24, r4
    6948:	84 59       	subi	r24, 0x94	; 148
    694a:	96 4e       	sbci	r25, 0xE6	; 230
    694c:	2c 01       	movw	r4, r24
    694e:	63 e0       	ldi	r22, 0x03	; 3
    6950:	22 0c       	add	r2, r2
    6952:	33 1c       	adc	r3, r3
    6954:	6a 95       	dec	r22
    6956:	e1 f7       	brne	.-8      	; 0x6950 <menu_servo_setup+0x78>
    6958:	d1 01       	movw	r26, r2
    695a:	a5 58       	subi	r26, 0x85	; 133
    695c:	b6 4e       	sbci	r27, 0xE6	; 230
    695e:	b8 87       	std	Y+8, r27	; 0x08
    6960:	af 83       	std	Y+7, r26	; 0x07
		menu_flag = 0;
	}

	// Get menu offsets
	// 1 = Reverse, 2 = Min, 3 = Max
	while(button != BACK)
    6962:	80 91 e2 07 	lds	r24, 0x07E2
    6966:	80 37       	cpi	r24, 0x70	; 112
    6968:	09 f4       	brne	.+2      	; 0x696c <menu_servo_setup+0x94>
    696a:	8a c0       	rjmp	.+276    	; 0x6a80 <menu_servo_setup+0x1a8>
    696c:	88 e0       	ldi	r24, 0x08	; 8
    696e:	81 2c       	mov	r8, r1
	{
		// Load values from eeprom
		for (i = 0; i < SERVOITEMS; i++)
		{
			switch(section)
    6970:	b2 e0       	ldi	r27, 0x02	; 2
    6972:	9b 16       	cp	r9, r27
    6974:	61 f0       	breq	.+24     	; 0x698e <menu_servo_setup+0xb6>
    6976:	43 e0       	ldi	r20, 0x03	; 3
    6978:	94 12       	cpse	r9, r20
    697a:	11 c0       	rjmp	.+34     	; 0x699e <menu_servo_setup+0xc6>
					zero_setting = true;
					break;
				case 3:
					value_ptr = &Config.max_travel[0];
					servo_enable = true;
					zero_setting = true;
    697c:	a1 e0       	ldi	r26, 0x01	; 1
    697e:	ae 83       	std	Y+6, r26	; 0x06
					servo_enable = true;
					zero_setting = true;
					break;
				case 3:
					value_ptr = &Config.max_travel[0];
					servo_enable = true;
    6980:	88 24       	eor	r8, r8
    6982:	83 94       	inc	r8
					value_ptr = &Config.min_travel[0];
					servo_enable = true;
					zero_setting = true;
					break;
				case 3:
					value_ptr = &Config.max_travel[0];
    6984:	3b e7       	ldi	r19, 0x7B	; 123
    6986:	63 2e       	mov	r6, r19
    6988:	37 e0       	ldi	r19, 0x07	; 7
    698a:	73 2e       	mov	r7, r19
					servo_enable = true;
					zero_setting = true;
					break;
    698c:	08 c0       	rjmp	.+16     	; 0x699e <menu_servo_setup+0xc6>
				case 1:
					break;
				case 2:
					value_ptr = &Config.min_travel[0];
					servo_enable = true;
					zero_setting = true;
    698e:	91 e0       	ldi	r25, 0x01	; 1
    6990:	9e 83       	std	Y+6, r25	; 0x06
			{
				case 1:
					break;
				case 2:
					value_ptr = &Config.min_travel[0];
					servo_enable = true;
    6992:	88 24       	eor	r8, r8
    6994:	83 94       	inc	r8
			switch(section)
			{
				case 1:
					break;
				case 2:
					value_ptr = &Config.min_travel[0];
    6996:	43 e7       	ldi	r20, 0x73	; 115
    6998:	64 2e       	mov	r6, r20
    699a:	47 e0       	ldi	r20, 0x07	; 7
    699c:	74 2e       	mov	r7, r20
    699e:	81 50       	subi	r24, 0x01	; 1
	// Get menu offsets
	// 1 = Reverse, 2 = Min, 3 = Max
	while(button != BACK)
	{
		// Load values from eeprom
		for (i = 0; i < SERVOITEMS; i++)
    69a0:	39 f7       	brne	.-50     	; 0x6970 <menu_servo_setup+0x98>
					break;
			}
		}

		// Print menu
		print_menu_items(sub_top, SERVOSTART, value_ptr, (const unsigned char*)servo_menu_ranges[section - 1], 1, SERVOOFFSET, (const unsigned char*)ServoMenuText[section - 1], cursor);
    69a2:	a0 90 04 05 	lds	r10, 0x0504
    69a6:	cf 80       	ldd	r12, Y+7	; 0x07
    69a8:	d8 84       	ldd	r13, Y+8	; 0x08
    69aa:	80 e5       	ldi	r24, 0x50	; 80
    69ac:	e8 2e       	mov	r14, r24
    69ae:	01 e0       	ldi	r16, 0x01	; 1
    69b0:	92 01       	movw	r18, r4
    69b2:	a3 01       	movw	r20, r6
    69b4:	66 ee       	ldi	r22, 0xE6	; 230
    69b6:	70 e0       	ldi	r23, 0x00	; 0
    69b8:	80 91 34 05 	lds	r24, 0x0534
    69bc:	90 91 35 05 	lds	r25, 0x0535
    69c0:	0e 94 c3 31 	call	0x6386	; 0x6386 <print_menu_items>

		// Handle menu changes
		update_menu(SERVOITEMS, SERVOSTART, 0, button, &cursor, &sub_top, &menu_temp);
    69c4:	9f e2       	ldi	r25, 0x2F	; 47
    69c6:	c9 2e       	mov	r12, r25
    69c8:	95 e0       	ldi	r25, 0x05	; 5
    69ca:	d9 2e       	mov	r13, r25
    69cc:	24 e3       	ldi	r18, 0x34	; 52
    69ce:	e2 2e       	mov	r14, r18
    69d0:	25 e0       	ldi	r18, 0x05	; 5
    69d2:	f2 2e       	mov	r15, r18
    69d4:	04 e0       	ldi	r16, 0x04	; 4
    69d6:	15 e0       	ldi	r17, 0x05	; 5
    69d8:	20 91 e2 07 	lds	r18, 0x07E2
    69dc:	40 e0       	ldi	r20, 0x00	; 0
    69de:	66 ee       	ldi	r22, 0xE6	; 230
    69e0:	88 e0       	ldi	r24, 0x08	; 8
    69e2:	0e 94 f9 30 	call	0x61f2	; 0x61f2 <update_menu>
		range = get_menu_range ((const unsigned char*)servo_menu_ranges[section - 1], 0);
    69e6:	60 e0       	ldi	r22, 0x00	; 0
    69e8:	c2 01       	movw	r24, r4
    69ea:	0e 94 b7 2e 	call	0x5d6e	; 0x5d6e <get_menu_range>
    69ee:	29 83       	std	Y+1, r18	; 0x01
    69f0:	3a 83       	std	Y+2, r19	; 0x02
    69f2:	4b 83       	std	Y+3, r20	; 0x03
    69f4:	5c 83       	std	Y+4, r21	; 0x04
    69f6:	6d 83       	std	Y+5, r22	; 0x05

		if (button == ENTER)
    69f8:	80 91 e2 07 	lds	r24, 0x07E2
    69fc:	80 3e       	cpi	r24, 0xE0	; 224
    69fe:	a1 f5       	brne	.+104    	; 0x6a68 <menu_servo_setup+0x190>
		{
			text_link = pgm_read_byte(&ServoMenuText[section - 1][menu_temp - SERVOSTART]);
    6a00:	80 91 2f 05 	lds	r24, 0x052F
    6a04:	90 91 30 05 	lds	r25, 0x0530
    6a08:	9c 01       	movw	r18, r24
    6a0a:	26 5e       	subi	r18, 0xE6	; 230
    6a0c:	31 09       	sbc	r19, r1
    6a0e:	f9 01       	movw	r30, r18
    6a10:	e2 0d       	add	r30, r2
    6a12:	f3 1d       	adc	r31, r3
    6a14:	e5 58       	subi	r30, 0x85	; 133
    6a16:	f6 4e       	sbci	r31, 0xE6	; 230
    6a18:	e4 91       	lpm	r30, Z
    6a1a:	b3 01       	movw	r22, r6
    6a1c:	62 0f       	add	r22, r18
    6a1e:	73 1f       	adc	r23, r19

			// Zero limits if adjusting
			if (zero_setting)
    6a20:	be 81       	ldd	r27, Y+6	; 0x06
    6a22:	bb 23       	and	r27, r27
    6a24:	11 f0       	breq	.+4      	; 0x6a2a <menu_servo_setup+0x152>
			{
				value_ptr[menu_temp - SERVOSTART] = 0;
    6a26:	db 01       	movw	r26, r22
    6a28:	1c 92       	st	X, r1
			}

			// Do not allow servo enable for throttle if in CPPM mode
			if ((Config.Channel[menu_temp - SERVOSTART].P1_source_a == THROTTLE) && (Config.RxMode == CPPM_MODE))
    6a2a:	46 e2       	ldi	r20, 0x26	; 38
    6a2c:	42 9f       	mul	r20, r18
    6a2e:	d0 01       	movw	r26, r0
    6a30:	43 9f       	mul	r20, r19
    6a32:	b0 0d       	add	r27, r0
    6a34:	11 24       	eor	r1, r1
    6a36:	a7 5a       	subi	r26, 0xA7	; 167
    6a38:	b9 4f       	sbci	r27, 0xF9	; 249
    6a3a:	4c 91       	ld	r20, X
    6a3c:	41 11       	cpse	r20, r1
    6a3e:	05 c0       	rjmp	.+10     	; 0x6a4a <menu_servo_setup+0x172>
    6a40:	40 91 d2 05 	lds	r20, 0x05D2
    6a44:	41 11       	cpse	r20, r1
    6a46:	01 c0       	rjmp	.+2      	; 0x6a4a <menu_servo_setup+0x172>
			{
				servo_enable = false;
    6a48:	81 2c       	mov	r8, r1
			}

			do_menu_item(menu_temp, value_ptr + (menu_temp - SERVOSTART), 1, range, 0, text_link, servo_enable, (menu_temp - SERVOSTART));
    6a4a:	ae 2e       	mov	r10, r30
    6a4c:	b1 2c       	mov	r11, r1
    6a4e:	3f 93       	push	r19
    6a50:	2f 93       	push	r18
    6a52:	c1 2c       	mov	r12, r1
    6a54:	e9 80       	ldd	r14, Y+1	; 0x01
    6a56:	fa 80       	ldd	r15, Y+2	; 0x02
    6a58:	0b 81       	ldd	r16, Y+3	; 0x03
    6a5a:	1c 81       	ldd	r17, Y+4	; 0x04
    6a5c:	2d 81       	ldd	r18, Y+5	; 0x05
    6a5e:	41 e0       	ldi	r20, 0x01	; 1
    6a60:	0e 94 43 2f 	call	0x5e86	; 0x5e86 <do_menu_item>
    6a64:	0f 90       	pop	r0
    6a66:	0f 90       	pop	r0
		}

		// Disable servos
		servo_enable = false;

		if (button == ENTER)
    6a68:	80 91 e2 07 	lds	r24, 0x07E2
    6a6c:	80 3e       	cpi	r24, 0xE0	; 224
    6a6e:	09 f0       	breq	.+2      	; 0x6a72 <menu_servo_setup+0x19a>
    6a70:	78 cf       	rjmp	.-272    	; 0x6962 <menu_servo_setup+0x8a>
		{
			UpdateLimits();				// Update actual servo trims
    6a72:	0e 94 65 36 	call	0x6cca	; 0x6cca <UpdateLimits>
			Save_Config_to_EEPROM();	// Save value and return
    6a76:	0e 94 93 16 	call	0x2d26	; 0x2d26 <Save_Config_to_EEPROM>
			Wait_BUTTON4();				// Wait for user's finger off the button
    6a7a:	0e 94 c4 33 	call	0x6788	; 0x6788 <Wait_BUTTON4>
    6a7e:	71 cf       	rjmp	.-286    	; 0x6962 <menu_servo_setup+0x8a>
		}
	}
}
    6a80:	28 96       	adiw	r28, 0x08	; 8
    6a82:	0f b6       	in	r0, 0x3f	; 63
    6a84:	f8 94       	cli
    6a86:	de bf       	out	0x3e, r29	; 62
    6a88:	0f be       	out	0x3f, r0	; 63
    6a8a:	cd bf       	out	0x3d, r28	; 61
    6a8c:	df 91       	pop	r29
    6a8e:	cf 91       	pop	r28
    6a90:	1f 91       	pop	r17
    6a92:	0f 91       	pop	r16
    6a94:	ff 90       	pop	r15
    6a96:	ef 90       	pop	r14
    6a98:	df 90       	pop	r13
    6a9a:	cf 90       	pop	r12
    6a9c:	bf 90       	pop	r11
    6a9e:	af 90       	pop	r10
    6aa0:	9f 90       	pop	r9
    6aa2:	8f 90       	pop	r8
    6aa4:	7f 90       	pop	r7
    6aa6:	6f 90       	pop	r6
    6aa8:	5f 90       	pop	r5
    6aaa:	4f 90       	pop	r4
    6aac:	3f 90       	pop	r3
    6aae:	2f 90       	pop	r2
    6ab0:	08 95       	ret

00006ab2 <menu_rc_setup>:
//************************************************************
// Main menu-specific setup
//************************************************************

void menu_rc_setup(uint8_t section)
{
    6ab2:	2f 92       	push	r2
    6ab4:	3f 92       	push	r3
    6ab6:	4f 92       	push	r4
    6ab8:	5f 92       	push	r5
    6aba:	6f 92       	push	r6
    6abc:	7f 92       	push	r7
    6abe:	8f 92       	push	r8
    6ac0:	9f 92       	push	r9
    6ac2:	af 92       	push	r10
    6ac4:	bf 92       	push	r11
    6ac6:	cf 92       	push	r12
    6ac8:	df 92       	push	r13
    6aca:	ef 92       	push	r14
    6acc:	ff 92       	push	r15
    6ace:	0f 93       	push	r16
    6ad0:	1f 93       	push	r17
    6ad2:	cf 93       	push	r28
    6ad4:	df 93       	push	r29
    6ad6:	cd b7       	in	r28, 0x3d	; 61
    6ad8:	de b7       	in	r29, 0x3e	; 62
    6ada:	2a 97       	sbiw	r28, 0x0a	; 10
    6adc:	0f b6       	in	r0, 0x3f	; 63
    6ade:	f8 94       	cli
    6ae0:	de bf       	out	0x3e, r29	; 62
    6ae2:	0f be       	out	0x3f, r0	; 63
    6ae4:	cd bf       	out	0x3d, r28	; 61
    6ae6:	88 87       	std	Y+8, r24	; 0x08
	uint8_t i;
	uint8_t offset = 0;			// Index into channel structure
	uint8_t	items= RCITEMS;		// Items in group
	
	// If submenu item has changed, reset submenu positions
	if (menu_flag)
    6ae8:	80 91 e4 07 	lds	r24, 0x07E4
    6aec:	88 23       	and	r24, r24
    6aee:	41 f0       	breq	.+16     	; 0x6b00 <menu_rc_setup+0x4e>
	{
		sub_top = RCSTART;
    6af0:	85 e9       	ldi	r24, 0x95	; 149
    6af2:	90 e0       	ldi	r25, 0x00	; 0
    6af4:	90 93 35 05 	sts	0x0535, r25
    6af8:	80 93 34 05 	sts	0x0534, r24
		menu_flag = 0;
    6afc:	10 92 e4 07 	sts	0x07E4, r1
			writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_CONFIG, (6 - Config.MPU6050_LPF));

			// Update channel sequence
			for (i = 0; i < MAX_RC_CHANNELS; i++)
			{
				if (Config.TxSeq == FUTABASEQ)
    6b00:	27 e0       	ldi	r18, 0x07	; 7
    6b02:	2f 83       	std	Y+7, r18	; 0x07
    6b04:	1e 82       	std	Y+6, r1	; 0x06
    6b06:	62 ed       	ldi	r22, 0xD2	; 210
    6b08:	46 2e       	mov	r4, r22
    6b0a:	65 e0       	ldi	r22, 0x05	; 5
    6b0c:	56 2e       	mov	r5, r22
			default:
				break;
		}

		// Print menu
		print_menu_items(sub_top + offset, RCSTART + offset, value_ptr, (const unsigned char*)rc_menu_ranges[section - 1], 0, RCOFFSET, (const unsigned char*)RCMenuText[section - 1], cursor);
    6b0e:	38 85       	ldd	r19, Y+8	; 0x08
    6b10:	83 2f       	mov	r24, r19
    6b12:	90 e0       	ldi	r25, 0x00	; 0
    6b14:	01 97       	sbiw	r24, 0x01	; 1
    6b16:	2d e2       	ldi	r18, 0x2D	; 45
    6b18:	28 9f       	mul	r18, r24
    6b1a:	30 01       	movw	r6, r0
    6b1c:	29 9f       	mul	r18, r25
    6b1e:	70 0c       	add	r7, r0
    6b20:	11 24       	eor	r1, r1
    6b22:	93 01       	movw	r18, r6
    6b24:	2d 56       	subi	r18, 0x6D	; 109
    6b26:	36 4e       	sbci	r19, 0xE6	; 230
    6b28:	39 01       	movw	r6, r18
    6b2a:	29 e0       	ldi	r18, 0x09	; 9
    6b2c:	28 9f       	mul	r18, r24
    6b2e:	10 01       	movw	r2, r0
    6b30:	29 9f       	mul	r18, r25
    6b32:	30 0c       	add	r3, r0
    6b34:	11 24       	eor	r1, r1
    6b36:	c1 01       	movw	r24, r2
    6b38:	83 51       	subi	r24, 0x13	; 19
    6b3a:	96 4e       	sbci	r25, 0xE6	; 230
    6b3c:	9a 87       	std	Y+10, r25	; 0x0a
    6b3e:	89 87       	std	Y+9, r24	; 0x09
	{
		sub_top = RCSTART;
		menu_flag = 0;
	}

	while(button != BACK)
    6b40:	80 91 e2 07 	lds	r24, 0x07E2
    6b44:	80 37       	cpi	r24, 0x70	; 112
    6b46:	09 f4       	brne	.+2      	; 0x6b4a <menu_rc_setup+0x98>
    6b48:	a7 c0       	rjmp	.+334    	; 0x6c98 <menu_rc_setup+0x1e6>
	{
		// Get menu offsets and load values from eeprom
		// 1 = RC, 2 = General
		switch(section)
    6b4a:	98 85       	ldd	r25, Y+8	; 0x08
    6b4c:	92 30       	cpi	r25, 0x02	; 2
    6b4e:	41 f4       	brne	.+16     	; 0x6b60 <menu_rc_setup+0xae>
		{
			case 1:				// RC setup menu
				break;
			case 2:				// General menu
				offset = RCITEMSOFFSET;
				items = GENERALITEMS;
    6b50:	29 e0       	ldi	r18, 0x09	; 9
    6b52:	2f 83       	std	Y+7, r18	; 0x07
		switch(section)
		{
			case 1:				// RC setup menu
				break;
			case 2:				// General menu
				offset = RCITEMSOFFSET;
    6b54:	39 e0       	ldi	r19, 0x09	; 9
    6b56:	3e 83       	std	Y+6, r19	; 0x06
				items = GENERALITEMS;
				value_ptr = &Config.Orientation;
    6b58:	51 e3       	ldi	r21, 0x31	; 49
    6b5a:	45 2e       	mov	r4, r21
    6b5c:	56 e0       	ldi	r21, 0x06	; 6
    6b5e:	55 2e       	mov	r5, r21
			default:
				break;
		}

		// Print menu
		print_menu_items(sub_top + offset, RCSTART + offset, value_ptr, (const unsigned char*)rc_menu_ranges[section - 1], 0, RCOFFSET, (const unsigned char*)RCMenuText[section - 1], cursor);
    6b60:	8e 81       	ldd	r24, Y+6	; 0x06
    6b62:	88 2e       	mov	r8, r24
    6b64:	91 2c       	mov	r9, r1
    6b66:	b4 01       	movw	r22, r8
    6b68:	6b 56       	subi	r22, 0x6B	; 107
    6b6a:	7f 4f       	sbci	r23, 0xFF	; 255
    6b6c:	80 91 34 05 	lds	r24, 0x0534
    6b70:	90 91 35 05 	lds	r25, 0x0535
    6b74:	a0 90 04 05 	lds	r10, 0x0504
    6b78:	c9 84       	ldd	r12, Y+9	; 0x09
    6b7a:	da 84       	ldd	r13, Y+10	; 0x0a
    6b7c:	2f e4       	ldi	r18, 0x4F	; 79
    6b7e:	e2 2e       	mov	r14, r18
    6b80:	00 e0       	ldi	r16, 0x00	; 0
    6b82:	93 01       	movw	r18, r6
    6b84:	a2 01       	movw	r20, r4
    6b86:	88 0d       	add	r24, r8
    6b88:	99 1d       	adc	r25, r9
    6b8a:	0e 94 c3 31 	call	0x6386	; 0x6386 <print_menu_items>

		// Handle menu changes
		update_menu(items, RCSTART, offset, button, &cursor, &sub_top, &menu_temp);
    6b8e:	3f e2       	ldi	r19, 0x2F	; 47
    6b90:	c3 2e       	mov	r12, r19
    6b92:	35 e0       	ldi	r19, 0x05	; 5
    6b94:	d3 2e       	mov	r13, r19
    6b96:	44 e3       	ldi	r20, 0x34	; 52
    6b98:	e4 2e       	mov	r14, r20
    6b9a:	45 e0       	ldi	r20, 0x05	; 5
    6b9c:	f4 2e       	mov	r15, r20
    6b9e:	04 e0       	ldi	r16, 0x04	; 4
    6ba0:	15 e0       	ldi	r17, 0x05	; 5
    6ba2:	20 91 e2 07 	lds	r18, 0x07E2
    6ba6:	4e 81       	ldd	r20, Y+6	; 0x06
    6ba8:	65 e9       	ldi	r22, 0x95	; 149
    6baa:	8f 81       	ldd	r24, Y+7	; 0x07
    6bac:	0e 94 f9 30 	call	0x61f2	; 0x61f2 <update_menu>
		range = get_menu_range ((const unsigned char*)rc_menu_ranges[section - 1], (menu_temp - RCSTART - offset)); 
    6bb0:	60 91 2f 05 	lds	r22, 0x052F
    6bb4:	65 59       	subi	r22, 0x95	; 149
    6bb6:	9e 81       	ldd	r25, Y+6	; 0x06
    6bb8:	69 1b       	sub	r22, r25
    6bba:	c3 01       	movw	r24, r6
    6bbc:	0e 94 b7 2e 	call	0x5d6e	; 0x5d6e <get_menu_range>
    6bc0:	29 83       	std	Y+1, r18	; 0x01
    6bc2:	3a 83       	std	Y+2, r19	; 0x02
    6bc4:	4b 83       	std	Y+3, r20	; 0x03
    6bc6:	5c 83       	std	Y+4, r21	; 0x04
    6bc8:	6d 83       	std	Y+5, r22	; 0x05

		if (button == ENTER)
    6bca:	80 91 e2 07 	lds	r24, 0x07E2
    6bce:	80 3e       	cpi	r24, 0xE0	; 224
    6bd0:	09 f5       	brne	.+66     	; 0x6c14 <menu_rc_setup+0x162>
		{
			text_link = pgm_read_byte(&RCMenuText[section - 1][menu_temp - RCSTART - offset]);
    6bd2:	80 91 2f 05 	lds	r24, 0x052F
    6bd6:	90 91 30 05 	lds	r25, 0x0530
    6bda:	bc 01       	movw	r22, r24
    6bdc:	65 59       	subi	r22, 0x95	; 149
    6bde:	71 09       	sbc	r23, r1
    6be0:	68 19       	sub	r22, r8
    6be2:	79 09       	sbc	r23, r9
    6be4:	fb 01       	movw	r30, r22
    6be6:	e2 0d       	add	r30, r2
    6be8:	f3 1d       	adc	r31, r3
    6bea:	e3 51       	subi	r30, 0x13	; 19
    6bec:	f6 4e       	sbci	r31, 0xE6	; 230
    6bee:	e4 91       	lpm	r30, Z
			do_menu_item(menu_temp, value_ptr + (menu_temp - RCSTART - offset), 1, range, 0, text_link, false, 0);
    6bf0:	ae 2e       	mov	r10, r30
    6bf2:	b1 2c       	mov	r11, r1
    6bf4:	64 0d       	add	r22, r4
    6bf6:	75 1d       	adc	r23, r5
    6bf8:	1f 92       	push	r1
    6bfa:	1f 92       	push	r1
    6bfc:	81 2c       	mov	r8, r1
    6bfe:	c1 2c       	mov	r12, r1
    6c00:	e9 80       	ldd	r14, Y+1	; 0x01
    6c02:	fa 80       	ldd	r15, Y+2	; 0x02
    6c04:	0b 81       	ldd	r16, Y+3	; 0x03
    6c06:	1c 81       	ldd	r17, Y+4	; 0x04
    6c08:	2d 81       	ldd	r18, Y+5	; 0x05
    6c0a:	41 e0       	ldi	r20, 0x01	; 1
    6c0c:	0e 94 43 2f 	call	0x5e86	; 0x5e86 <do_menu_item>
    6c10:	0f 90       	pop	r0
    6c12:	0f 90       	pop	r0
		}

		if (button == ENTER)
    6c14:	80 91 e2 07 	lds	r24, 0x07E2
    6c18:	80 3e       	cpi	r24, 0xE0	; 224
    6c1a:	09 f0       	breq	.+2      	; 0x6c1e <menu_rc_setup+0x16c>
    6c1c:	91 cf       	rjmp	.-222    	; 0x6b40 <menu_rc_setup+0x8e>
		{
			init_int();				// In case RC type has changed, reinitialise interrupts
    6c1e:	0e 94 29 2e 	call	0x5c52	; 0x5c52 <init_int>
			init_uart();			// and UART
    6c22:	0e 94 ad 45 	call	0x8b5a	; 0x8b5a <init_uart>
			UpdateLimits();			// Update I-term limits and triggers based on percentages
    6c26:	0e 94 65 36 	call	0x6cca	; 0x6cca <UpdateLimits>

			// Update MPU6050 LPF and reverse sense of menu items
			writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_CONFIG, (6 - Config.MPU6050_LPF));
    6c2a:	80 91 36 06 	lds	r24, 0x0636
    6c2e:	46 e0       	ldi	r20, 0x06	; 6
    6c30:	48 1b       	sub	r20, r24
    6c32:	6a e1       	ldi	r22, 0x1A	; 26
    6c34:	80 ed       	ldi	r24, 0xD0	; 208
    6c36:	0e 94 7e 24 	call	0x48fc	; 0x48fc <writeI2Cbyte>

			// Update channel sequence
			for (i = 0; i < MAX_RC_CHANNELS; i++)
			{
				if (Config.TxSeq == FUTABASEQ)
    6c3a:	20 91 d5 05 	lds	r18, 0x05D5
    6c3e:	aa ea       	ldi	r26, 0xAA	; 170
    6c40:	b5 e0       	ldi	r27, 0x05	; 5
    6c42:	80 e0       	ldi	r24, 0x00	; 0
    6c44:	90 e0       	ldi	r25, 0x00	; 0
    6c46:	fc 01       	movw	r30, r24
    6c48:	21 30       	cpi	r18, 0x01	; 1
    6c4a:	19 f4       	brne	.+6      	; 0x6c52 <menu_rc_setup+0x1a0>
    6c4c:	e4 52       	subi	r30, 0x24	; 36
    6c4e:	ff 4f       	sbci	r31, 0xFF	; 255
    6c50:	02 c0       	rjmp	.+4      	; 0x6c56 <menu_rc_setup+0x1a4>
    6c52:	ec 51       	subi	r30, 0x1C	; 28
    6c54:	ff 4f       	sbci	r31, 0xFF	; 255
				{
					Config.ChannelOrder[i] = pgm_read_byte(&FUTABA[i]);
				}
				else
				{
					Config.ChannelOrder[i] = pgm_read_byte(&JR[i]);
    6c56:	e4 91       	lpm	r30, Z
    6c58:	ec 93       	st	X, r30
    6c5a:	01 96       	adiw	r24, 0x01	; 1
    6c5c:	11 96       	adiw	r26, 0x01	; 1

			// Update MPU6050 LPF and reverse sense of menu items
			writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_CONFIG, (6 - Config.MPU6050_LPF));

			// Update channel sequence
			for (i = 0; i < MAX_RC_CHANNELS; i++)
    6c5e:	88 30       	cpi	r24, 0x08	; 8
    6c60:	91 05       	cpc	r25, r1
    6c62:	89 f7       	brne	.-30     	; 0x6c46 <menu_rc_setup+0x194>
				}
			}

			// Check validity of RX type and PWM speed selection
			// If illegal setting, drop down to RC Sync
			if ((Config.RxMode != SBUS) && (Config.Servo_rate == FAST))
    6c64:	80 91 d2 05 	lds	r24, 0x05D2
    6c68:	82 30       	cpi	r24, 0x02	; 2
    6c6a:	39 f0       	breq	.+14     	; 0x6c7a <menu_rc_setup+0x1c8>
    6c6c:	80 91 d3 05 	lds	r24, 0x05D3
    6c70:	82 30       	cpi	r24, 0x02	; 2
    6c72:	19 f4       	brne	.+6      	; 0x6c7a <menu_rc_setup+0x1c8>
			{
				Config.Servo_rate = SYNC;
    6c74:	81 e0       	ldi	r24, 0x01	; 1
    6c76:	80 93 d3 05 	sts	0x05D3, r24
					Config.Gyro_LPF = HZ94;
				}
			}
*/						
						
			if (Config.ArmMode == ARMABLE)
    6c7a:	80 91 33 06 	lds	r24, 0x0633
    6c7e:	81 30       	cpi	r24, 0x01	; 1
    6c80:	31 f4       	brne	.+12     	; 0x6c8e <menu_rc_setup+0x1dc>
			{
				General_error |= (1 << DISARMED);	// Set flags to disarmed
    6c82:	80 91 1e 05 	lds	r24, 0x051E
    6c86:	84 60       	ori	r24, 0x04	; 4
    6c88:	80 93 1e 05 	sts	0x051E, r24
				LED1 = 0;
    6c8c:	2b 98       	cbi	0x05, 3	; 5
			}

			Save_Config_to_EEPROM(); // Save value and return
    6c8e:	0e 94 93 16 	call	0x2d26	; 0x2d26 <Save_Config_to_EEPROM>
			Wait_BUTTON4();			 // Wait for user's finger off the button
    6c92:	0e 94 c4 33 	call	0x6788	; 0x6788 <Wait_BUTTON4>
    6c96:	54 cf       	rjmp	.-344    	; 0x6b40 <menu_rc_setup+0x8e>
		}
	}
}
    6c98:	2a 96       	adiw	r28, 0x0a	; 10
    6c9a:	0f b6       	in	r0, 0x3f	; 63
    6c9c:	f8 94       	cli
    6c9e:	de bf       	out	0x3e, r29	; 62
    6ca0:	0f be       	out	0x3f, r0	; 63
    6ca2:	cd bf       	out	0x3d, r28	; 61
    6ca4:	df 91       	pop	r29
    6ca6:	cf 91       	pop	r28
    6ca8:	1f 91       	pop	r17
    6caa:	0f 91       	pop	r16
    6cac:	ff 90       	pop	r15
    6cae:	ef 90       	pop	r14
    6cb0:	df 90       	pop	r13
    6cb2:	cf 90       	pop	r12
    6cb4:	bf 90       	pop	r11
    6cb6:	af 90       	pop	r10
    6cb8:	9f 90       	pop	r9
    6cba:	8f 90       	pop	r8
    6cbc:	7f 90       	pop	r7
    6cbe:	6f 90       	pop	r6
    6cc0:	5f 90       	pop	r5
    6cc2:	4f 90       	pop	r4
    6cc4:	3f 90       	pop	r3
    6cc6:	2f 90       	pop	r2
    6cc8:	08 95       	ret

00006cca <UpdateLimits>:

// Update actual limits value with that from the mix setting percentages
// This is only done at start-up and whenever the values are changed
// so as to reduce CPU loop load
void UpdateLimits(void)
{
    6cca:	6f 92       	push	r6
    6ccc:	7f 92       	push	r7
    6cce:	8f 92       	push	r8
    6cd0:	9f 92       	push	r9
    6cd2:	af 92       	push	r10
    6cd4:	bf 92       	push	r11
    6cd6:	cf 92       	push	r12
    6cd8:	df 92       	push	r13
    6cda:	ef 92       	push	r14
    6cdc:	ff 92       	push	r15
    6cde:	0f 93       	push	r16
    6ce0:	1f 93       	push	r17
    6ce2:	cf 93       	push	r28
    6ce4:	df 93       	push	r29
    6ce6:	cd b7       	in	r28, 0x3d	; 61
    6ce8:	de b7       	in	r29, 0x3e	; 62
    6cea:	2c 97       	sbiw	r28, 0x0c	; 12
    6cec:	0f b6       	in	r0, 0x3f	; 63
    6cee:	f8 94       	cli
    6cf0:	de bf       	out	0x3e, r29	; 62
    6cf2:	0f be       	out	0x3f, r0	; 63
    6cf4:	cd bf       	out	0x3d, r28	; 61
	uint8_t i,j;
	int32_t temp32, gain32;

	int8_t limits[FLIGHT_MODES][NUMBEROFAXIS] = 
    6cf6:	80 91 dd 05 	lds	r24, 0x05DD
    6cfa:	8f 83       	std	Y+7, r24	; 0x07
    6cfc:	80 91 e3 05 	lds	r24, 0x05E3
    6d00:	88 87       	std	Y+8, r24	; 0x08
    6d02:	80 91 e9 05 	lds	r24, 0x05E9
    6d06:	89 87       	std	Y+9, r24	; 0x09
    6d08:	80 91 ef 05 	lds	r24, 0x05EF
    6d0c:	8a 87       	std	Y+10, r24	; 0x0a
    6d0e:	80 91 f5 05 	lds	r24, 0x05F5
    6d12:	8b 87       	std	Y+11, r24	; 0x0b
    6d14:	80 91 fb 05 	lds	r24, 0x05FB
    6d18:	8c 87       	std	Y+12, r24	; 0x0c
		{
			{Config.FlightMode[P1].Roll_limit, Config.FlightMode[P1].Pitch_limit, Config.FlightMode[P1].Yaw_limit},
			{Config.FlightMode[P2].Roll_limit, Config.FlightMode[P2].Pitch_limit, Config.FlightMode[P2].Yaw_limit}
		};

	int8_t gains[FLIGHT_MODES][NUMBEROFAXIS] = 
    6d1a:	80 91 dc 05 	lds	r24, 0x05DC
    6d1e:	89 83       	std	Y+1, r24	; 0x01
    6d20:	80 91 e2 05 	lds	r24, 0x05E2
    6d24:	8a 83       	std	Y+2, r24	; 0x02
    6d26:	80 91 e8 05 	lds	r24, 0x05E8
    6d2a:	8b 83       	std	Y+3, r24	; 0x03
    6d2c:	80 91 ee 05 	lds	r24, 0x05EE
    6d30:	8c 83       	std	Y+4, r24	; 0x04
    6d32:	80 91 f4 05 	lds	r24, 0x05F4
    6d36:	8d 83       	std	Y+5, r24	; 0x05
    6d38:	80 91 fa 05 	lds	r24, 0x05FA
    6d3c:	8e 83       	std	Y+6, r24	; 0x06
			{Config.FlightMode[P2].Roll_I_mult, Config.FlightMode[P2].Pitch_I_mult, Config.FlightMode[P2].Yaw_I_mult}
		};

	// Update LVA trigger
	// Vbat is measured in units of 10mV, so PowerTriggerActual of 1270 equates to 12.7V
	switch (Config.PowerTrigger)
    6d3e:	80 91 35 06 	lds	r24, 0x0635
    6d42:	82 30       	cpi	r24, 0x02	; 2
    6d44:	81 f0       	breq	.+32     	; 0x6d66 <UpdateLimits+0x9c>
    6d46:	3c f4       	brge	.+14     	; 0x6d56 <UpdateLimits+0x8c>
    6d48:	88 23       	and	r24, r24
    6d4a:	d1 f0       	breq	.+52     	; 0x6d80 <UpdateLimits+0xb6>
    6d4c:	81 30       	cpi	r24, 0x01	; 1
    6d4e:	c1 f4       	brne	.+48     	; 0x6d80 <UpdateLimits+0xb6>
	{
		case 0:
		Config.PowerTriggerActual = 0;			// Off
		break;
		case 1:
		Config.PowerTriggerActual = 350; 		// 3.5V
    6d50:	8e e5       	ldi	r24, 0x5E	; 94
    6d52:	91 e0       	ldi	r25, 0x01	; 1
    6d54:	10 c0       	rjmp	.+32     	; 0x6d76 <UpdateLimits+0xac>
			{Config.FlightMode[P2].Roll_I_mult, Config.FlightMode[P2].Pitch_I_mult, Config.FlightMode[P2].Yaw_I_mult}
		};

	// Update LVA trigger
	// Vbat is measured in units of 10mV, so PowerTriggerActual of 1270 equates to 12.7V
	switch (Config.PowerTrigger)
    6d56:	84 30       	cpi	r24, 0x04	; 4
    6d58:	61 f0       	breq	.+24     	; 0x6d72 <UpdateLimits+0xa8>
    6d5a:	44 f0       	brlt	.+16     	; 0x6d6c <UpdateLimits+0xa2>
    6d5c:	85 30       	cpi	r24, 0x05	; 5
    6d5e:	81 f4       	brne	.+32     	; 0x6d80 <UpdateLimits+0xb6>
		break;
		case 4:
		Config.PowerTriggerActual = 380; 		// 3.8V
		break;
		case 5:
		Config.PowerTriggerActual = 390; 		// 3.9V
    6d60:	86 e8       	ldi	r24, 0x86	; 134
    6d62:	91 e0       	ldi	r25, 0x01	; 1
    6d64:	08 c0       	rjmp	.+16     	; 0x6d76 <UpdateLimits+0xac>
		break;
		case 1:
		Config.PowerTriggerActual = 350; 		// 3.5V
		break;
		case 2:
		Config.PowerTriggerActual = 360; 		// 3.6V
    6d66:	88 e6       	ldi	r24, 0x68	; 104
    6d68:	91 e0       	ldi	r25, 0x01	; 1
    6d6a:	05 c0       	rjmp	.+10     	; 0x6d76 <UpdateLimits+0xac>
		break;
		case 3:
		Config.PowerTriggerActual = 370; 		// 3.7V
    6d6c:	82 e7       	ldi	r24, 0x72	; 114
    6d6e:	91 e0       	ldi	r25, 0x01	; 1
    6d70:	02 c0       	rjmp	.+4      	; 0x6d76 <UpdateLimits+0xac>
		break;
		case 4:
		Config.PowerTriggerActual = 380; 		// 3.8V
    6d72:	8c e7       	ldi	r24, 0x7C	; 124
    6d74:	91 e0       	ldi	r25, 0x01	; 1
		break;
		case 5:
		Config.PowerTriggerActual = 390; 		// 3.9V
    6d76:	90 93 30 06 	sts	0x0630, r25
    6d7a:	80 93 2f 06 	sts	0x062F, r24
		break;
    6d7e:	04 c0       	rjmp	.+8      	; 0x6d88 <UpdateLimits+0xbe>
		default:
		Config.PowerTriggerActual = 0;
    6d80:	10 92 30 06 	sts	0x0630, r1
    6d84:	10 92 2f 06 	sts	0x062F, r1
		break;
	}
			
	// Determine cell count and use to multiply trigger
	if (SystemVoltage >= 2150)										// 6S - 21.5V or at least 3.58V per cell
    6d88:	20 91 2c 05 	lds	r18, 0x052C
    6d8c:	30 91 2d 05 	lds	r19, 0x052D
    6d90:	80 91 2f 06 	lds	r24, 0x062F
    6d94:	90 91 30 06 	lds	r25, 0x0630
    6d98:	26 36       	cpi	r18, 0x66	; 102
    6d9a:	48 e0       	ldi	r20, 0x08	; 8
    6d9c:	34 07       	cpc	r19, r20
    6d9e:	88 f0       	brcs	.+34     	; 0x6dc2 <UpdateLimits+0xf8>
	{
		Config.PowerTriggerActual *= 6;
    6da0:	46 e0       	ldi	r20, 0x06	; 6
    6da2:	48 9f       	mul	r20, r24
    6da4:	90 01       	movw	r18, r0
    6da6:	49 9f       	mul	r20, r25
    6da8:	30 0d       	add	r19, r0
    6daa:	11 24       	eor	r1, r1
    6dac:	30 93 30 06 	sts	0x0630, r19
    6db0:	20 93 2f 06 	sts	0x062F, r18
    6db4:	7f ef       	ldi	r23, 0xFF	; 255
    6db6:	a7 2e       	mov	r10, r23
    6db8:	75 e0       	ldi	r23, 0x05	; 5
    6dba:	b7 2e       	mov	r11, r23

// Update actual limits value with that from the mix setting percentages
// This is only done at start-up and whenever the values are changed
// so as to reduce CPU loop load
void UpdateLimits(void)
{
    6dbc:	00 e0       	ldi	r16, 0x00	; 0
    6dbe:	10 e0       	ldi	r17, 0x00	; 0
    6dc0:	25 c0       	rjmp	.+74     	; 0x6e0c <UpdateLimits+0x142>
	// Determine cell count and use to multiply trigger
	if (SystemVoltage >= 2150)										// 6S - 21.5V or at least 3.58V per cell
	{
		Config.PowerTriggerActual *= 6;
	}
	else if ((SystemVoltage >= 1730) && (SystemVoltage < 2150))		// 5S 17.3V to 21.5V or 4.32V(4S) to 3.58V(6S) per cell
    6dc2:	a9 01       	movw	r20, r18
    6dc4:	42 5c       	subi	r20, 0xC2	; 194
    6dc6:	56 40       	sbci	r21, 0x06	; 6
    6dc8:	44 3a       	cpi	r20, 0xA4	; 164
    6dca:	51 40       	sbci	r21, 0x01	; 1
    6dcc:	10 f4       	brcc	.+4      	; 0x6dd2 <UpdateLimits+0x108>
	{
		Config.PowerTriggerActual *= 5;
    6dce:	45 e0       	ldi	r20, 0x05	; 5
    6dd0:	e8 cf       	rjmp	.-48     	; 0x6da2 <UpdateLimits+0xd8>
	}
	else if ((SystemVoltage >= 1300) && (SystemVoltage < 1730))		// 4S 13.0V to 17.3V or 4.33V(3S) to 3.46V(5S) per cell
    6dd2:	a9 01       	movw	r20, r18
    6dd4:	44 51       	subi	r20, 0x14	; 20
    6dd6:	55 40       	sbci	r21, 0x05	; 5
    6dd8:	4e 3a       	cpi	r20, 0xAE	; 174
    6dda:	51 40       	sbci	r21, 0x01	; 1
    6ddc:	28 f4       	brcc	.+10     	; 0x6de8 <UpdateLimits+0x11e>
	{
		Config.PowerTriggerActual *= 4;
    6dde:	88 0f       	add	r24, r24
    6de0:	99 1f       	adc	r25, r25
    6de2:	88 0f       	add	r24, r24
    6de4:	99 1f       	adc	r25, r25
    6de6:	0d c0       	rjmp	.+26     	; 0x6e02 <UpdateLimits+0x138>
	}
	else if ((SystemVoltage >= 900) && (SystemVoltage < 1300))		// 3S 9.0V to 13.0V or 4.5V(2S) to 3.25V(4S) per cell
    6de8:	24 58       	subi	r18, 0x84	; 132
    6dea:	33 40       	sbci	r19, 0x03	; 3
    6dec:	20 39       	cpi	r18, 0x90	; 144
    6dee:	31 40       	sbci	r19, 0x01	; 1
    6df0:	30 f4       	brcc	.+12     	; 0x6dfe <UpdateLimits+0x134>
	{
		Config.PowerTriggerActual *= 3;
    6df2:	9c 01       	movw	r18, r24
    6df4:	22 0f       	add	r18, r18
    6df6:	33 1f       	adc	r19, r19
    6df8:	28 0f       	add	r18, r24
    6dfa:	39 1f       	adc	r19, r25
    6dfc:	d7 cf       	rjmp	.-82     	; 0x6dac <UpdateLimits+0xe2>
	}
	else if (SystemVoltage < 900)									// 2S Under 9.0V or 3.0V(3S) per cell
	{
		Config.PowerTriggerActual *= 2;
    6dfe:	88 0f       	add	r24, r24
    6e00:	99 1f       	adc	r25, r25
    6e02:	90 93 30 06 	sts	0x0630, r25
    6e06:	80 93 2f 06 	sts	0x062F, r24
    6e0a:	d4 cf       	rjmp	.-88     	; 0x6db4 <UpdateLimits+0xea>

// Update actual limits value with that from the mix setting percentages
// This is only done at start-up and whenever the values are changed
// so as to reduce CPU loop load
void UpdateLimits(void)
{
    6e0c:	65 01       	movw	r12, r10
    6e0e:	e1 2c       	mov	r14, r1
    6e10:	f1 2c       	mov	r15, r1
    6e12:	87 e0       	ldi	r24, 0x07	; 7
    6e14:	88 2e       	mov	r8, r24
    6e16:	91 2c       	mov	r9, r1
    6e18:	8c 0e       	add	r8, r28
    6e1a:	9d 1e       	adc	r9, r29
    6e1c:	80 0e       	add	r8, r16
    6e1e:	91 1e       	adc	r9, r17
    6e20:	66 24       	eor	r6, r6
    6e22:	63 94       	inc	r6
    6e24:	71 2c       	mov	r7, r1
    6e26:	6c 0e       	add	r6, r28
    6e28:	7d 1e       	adc	r7, r29
    6e2a:	60 0e       	add	r6, r16
    6e2c:	71 1e       	adc	r7, r17
    6e2e:	f4 01       	movw	r30, r8
    6e30:	ee 0d       	add	r30, r14
    6e32:	ff 1d       	adc	r31, r15
	// Update I_term input constraints for all profiles
	for (j = 0; j < FLIGHT_MODES; j++)
	{
		for (i = 0; i < NUMBEROFAXIS; i++)
		{
			temp32 	= limits[j][i]; 						// Promote limit %
    6e34:	a0 81       	ld	r26, Z

			// I-term output (throw). Convert from % to actual count
			// A value of 80,000 results in +/- 1250 or full throw at the output stage
			// This is because the maximum signal value is +/-1250 after division by 64. 1250 * 64 = 80,000
			Config.Raw_I_Limits[j][i] = temp32 * (int32_t)640;	// 80,000 / 125% = 640
    6e36:	bb 27       	eor	r27, r27
    6e38:	a7 fd       	sbrc	r26, 7
    6e3a:	b0 95       	com	r27
    6e3c:	20 e8       	ldi	r18, 0x80	; 128
    6e3e:	32 e0       	ldi	r19, 0x02	; 2
    6e40:	0e 94 cd 48 	call	0x919a	; 0x919a <__usmulhisi3>
    6e44:	f6 01       	movw	r30, r12
    6e46:	61 93       	st	Z+, r22
    6e48:	71 93       	st	Z+, r23
    6e4a:	81 93       	st	Z+, r24
    6e4c:	91 93       	st	Z+, r25
    6e4e:	6f 01       	movw	r12, r30
    6e50:	f3 01       	movw	r30, r6
    6e52:	ee 0d       	add	r30, r14
    6e54:	ff 1d       	adc	r31, r15

			// I-term source limits. These have to be different due to the I-term gain setting
			// I-term = (gyro * gain) / 32, so the gyro count for a particular gain and limit is
			// Gyro = (I-term * 32) / gain :) 

			if (gains[j][i] != 0)
    6e56:	20 81       	ld	r18, Z
    6e58:	22 23       	and	r18, r18
    6e5a:	b1 f0       	breq	.+44     	; 0x6e88 <UpdateLimits+0x1be>
			{
				gain32 = gains[j][i];						// Promote gain value
				Config.Raw_I_Constrain[j][i] = (Config.Raw_I_Limits[j][i] << 5) / gain32;
    6e5c:	35 e0       	ldi	r19, 0x05	; 5
    6e5e:	66 0f       	add	r22, r22
    6e60:	77 1f       	adc	r23, r23
    6e62:	88 1f       	adc	r24, r24
    6e64:	99 1f       	adc	r25, r25
    6e66:	3a 95       	dec	r19
    6e68:	d1 f7       	brne	.-12     	; 0x6e5e <UpdateLimits+0x194>
			// I-term = (gyro * gain) / 32, so the gyro count for a particular gain and limit is
			// Gyro = (I-term * 32) / gain :) 

			if (gains[j][i] != 0)
			{
				gain32 = gains[j][i];						// Promote gain value
    6e6a:	33 27       	eor	r19, r19
    6e6c:	27 fd       	sbrc	r18, 7
    6e6e:	30 95       	com	r19
    6e70:	43 2f       	mov	r20, r19
    6e72:	53 2f       	mov	r21, r19
				Config.Raw_I_Constrain[j][i] = (Config.Raw_I_Limits[j][i] << 5) / gain32;
    6e74:	0e 94 91 48 	call	0x9122	; 0x9122 <__divmodsi4>
    6e78:	d6 01       	movw	r26, r12
    6e7a:	54 96       	adiw	r26, 0x14	; 20
    6e7c:	2d 93       	st	X+, r18
    6e7e:	3d 93       	st	X+, r19
    6e80:	4d 93       	st	X+, r20
    6e82:	5c 93       	st	X, r21
    6e84:	57 97       	sbiw	r26, 0x17	; 23
    6e86:	05 c0       	rjmp	.+10     	; 0x6e92 <UpdateLimits+0x1c8>
			}
			else 
			{
				Config.Raw_I_Constrain[j][i] = 0;
    6e88:	f6 01       	movw	r30, r12
    6e8a:	14 8a       	std	Z+20, r1	; 0x14
    6e8c:	15 8a       	std	Z+21, r1	; 0x15
    6e8e:	16 8a       	std	Z+22, r1	; 0x16
    6e90:	17 8a       	std	Z+23, r1	; 0x17
    6e92:	ff ef       	ldi	r31, 0xFF	; 255
    6e94:	ef 1a       	sub	r14, r31
    6e96:	ff 0a       	sbc	r15, r31
	}

	// Update I_term input constraints for all profiles
	for (j = 0; j < FLIGHT_MODES; j++)
	{
		for (i = 0; i < NUMBEROFAXIS; i++)
    6e98:	23 e0       	ldi	r18, 0x03	; 3
    6e9a:	e2 16       	cp	r14, r18
    6e9c:	f1 04       	cpc	r15, r1
    6e9e:	39 f6       	brne	.-114    	; 0x6e2e <UpdateLimits+0x164>
    6ea0:	4c e0       	ldi	r20, 0x0C	; 12
    6ea2:	a4 0e       	add	r10, r20
    6ea4:	b1 1c       	adc	r11, r1
    6ea6:	0d 5f       	subi	r16, 0xFD	; 253
    6ea8:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		Config.PowerTriggerActual *= 2;
	}

	// Update I_term input constraints for all profiles
	for (j = 0; j < FLIGHT_MODES; j++)
    6eaa:	06 30       	cpi	r16, 0x06	; 6
    6eac:	11 05       	cpc	r17, r1
    6eae:	09 f0       	breq	.+2      	; 0x6eb2 <UpdateLimits+0x1e8>
    6eb0:	ad cf       	rjmp	.-166    	; 0x6e0c <UpdateLimits+0x142>
    6eb2:	83 e7       	ldi	r24, 0x73	; 115
    6eb4:	97 e0       	ldi	r25, 0x07	; 7
    6eb6:	e2 eb       	ldi	r30, 0xB2	; 178
    6eb8:	f5 e0       	ldi	r31, 0x05	; 5
    6eba:	6b e7       	ldi	r22, 0x7B	; 123
    6ebc:	77 e0       	ldi	r23, 0x07	; 7
	}

	// Update travel limits
	for (i = 0; i < MIX_OUTPUTS; i++)
	{
		Config.Limits[i].minimum = scale_percent(Config.min_travel[i]);
    6ebe:	dc 01       	movw	r26, r24
    6ec0:	2d 91       	ld	r18, X+
    6ec2:	cd 01       	movw	r24, r26
int16_t scale_percent(int8_t value)
{
	int16_t temp16_1, temp16_2;

	temp16_1 = value; // Promote
	temp16_2 = ((temp16_1 * (int16_t)10) + 3750);
    6ec4:	ba e0       	ldi	r27, 0x0A	; 10
    6ec6:	2b 02       	muls	r18, r27
    6ec8:	90 01       	movw	r18, r0
    6eca:	11 24       	eor	r1, r1
    6ecc:	2a 55       	subi	r18, 0x5A	; 90
    6ece:	31 4f       	sbci	r19, 0xF1	; 241
	}

	// Update travel limits
	for (i = 0; i < MIX_OUTPUTS; i++)
	{
		Config.Limits[i].minimum = scale_percent(Config.min_travel[i]);
    6ed0:	31 83       	std	Z+1, r19	; 0x01
    6ed2:	20 83       	st	Z, r18
		Config.Limits[i].maximum = scale_percent(Config.max_travel[i]);
    6ed4:	db 01       	movw	r26, r22
    6ed6:	2d 91       	ld	r18, X+
    6ed8:	bd 01       	movw	r22, r26
int16_t scale_percent(int8_t value)
{
	int16_t temp16_1, temp16_2;

	temp16_1 = value; // Promote
	temp16_2 = ((temp16_1 * (int16_t)10) + 3750);
    6eda:	ba e0       	ldi	r27, 0x0A	; 10
    6edc:	2b 02       	muls	r18, r27
    6ede:	90 01       	movw	r18, r0
    6ee0:	11 24       	eor	r1, r1
    6ee2:	2a 55       	subi	r18, 0x5A	; 90
    6ee4:	31 4f       	sbci	r19, 0xF1	; 241

	// Update travel limits
	for (i = 0; i < MIX_OUTPUTS; i++)
	{
		Config.Limits[i].minimum = scale_percent(Config.min_travel[i]);
		Config.Limits[i].maximum = scale_percent(Config.max_travel[i]);
    6ee6:	33 83       	std	Z+3, r19	; 0x03
    6ee8:	22 83       	std	Z+2, r18	; 0x02
    6eea:	34 96       	adiw	r30, 0x04	; 4
			}
		}
	}

	// Update travel limits
	for (i = 0; i < MIX_OUTPUTS; i++)
    6eec:	25 e0       	ldi	r18, 0x05	; 5
    6eee:	e2 3d       	cpi	r30, 0xD2	; 210
    6ef0:	f2 07       	cpc	r31, r18
    6ef2:	29 f7       	brne	.-54     	; 0x6ebe <UpdateLimits+0x1f4>

	// Adjust trim to match 0.01 degree resolution
	// A value of 127 multiplied by 10 = 1270 which in 1/100ths of a degree equates to 12.7 degrees
	for (i = P1; i <= P2; i++)
	{
		Config.Rolltrim[i] = Config.FlightMode[i].AccRollZeroTrim * 10;
    6ef4:	80 91 e0 05 	lds	r24, 0x05E0
    6ef8:	4a e0       	ldi	r20, 0x0A	; 10
    6efa:	84 02       	muls	r24, r20
    6efc:	c0 01       	movw	r24, r0
    6efe:	11 24       	eor	r1, r1
    6f00:	90 93 a9 07 	sts	0x07A9, r25
    6f04:	80 93 a8 07 	sts	0x07A8, r24
		Config.Pitchtrim[i] = Config.FlightMode[i].AccPitchZeroTrim * 10;
    6f08:	80 91 e6 05 	lds	r24, 0x05E6
    6f0c:	6a e0       	ldi	r22, 0x0A	; 10
    6f0e:	86 02       	muls	r24, r22
    6f10:	c0 01       	movw	r24, r0
    6f12:	11 24       	eor	r1, r1
    6f14:	90 93 ad 07 	sts	0x07AD, r25
    6f18:	80 93 ac 07 	sts	0x07AC, r24

	// Adjust trim to match 0.01 degree resolution
	// A value of 127 multiplied by 10 = 1270 which in 1/100ths of a degree equates to 12.7 degrees
	for (i = P1; i <= P2; i++)
	{
		Config.Rolltrim[i] = Config.FlightMode[i].AccRollZeroTrim * 10;
    6f1c:	80 91 f2 05 	lds	r24, 0x05F2
    6f20:	aa e0       	ldi	r26, 0x0A	; 10
    6f22:	8a 02       	muls	r24, r26
    6f24:	c0 01       	movw	r24, r0
    6f26:	11 24       	eor	r1, r1
    6f28:	90 93 ab 07 	sts	0x07AB, r25
    6f2c:	80 93 aa 07 	sts	0x07AA, r24
		Config.Pitchtrim[i] = Config.FlightMode[i].AccPitchZeroTrim * 10;
    6f30:	80 91 f8 05 	lds	r24, 0x05F8
    6f34:	ba e0       	ldi	r27, 0x0A	; 10
    6f36:	8b 02       	muls	r24, r27
    6f38:	c0 01       	movw	r24, r0
    6f3a:	11 24       	eor	r1, r1
    6f3c:	90 93 af 07 	sts	0x07AF, r25
    6f40:	80 93 ae 07 	sts	0x07AE, r24
	}
}
    6f44:	2c 96       	adiw	r28, 0x0c	; 12
    6f46:	0f b6       	in	r0, 0x3f	; 63
    6f48:	f8 94       	cli
    6f4a:	de bf       	out	0x3e, r29	; 62
    6f4c:	0f be       	out	0x3f, r0	; 63
    6f4e:	cd bf       	out	0x3d, r28	; 61
    6f50:	df 91       	pop	r29
    6f52:	cf 91       	pop	r28
    6f54:	1f 91       	pop	r17
    6f56:	0f 91       	pop	r16
    6f58:	ff 90       	pop	r15
    6f5a:	ef 90       	pop	r14
    6f5c:	df 90       	pop	r13
    6f5e:	cf 90       	pop	r12
    6f60:	bf 90       	pop	r11
    6f62:	af 90       	pop	r10
    6f64:	9f 90       	pop	r9
    6f66:	8f 90       	pop	r8
    6f68:	7f 90       	pop	r7
    6f6a:	6f 90       	pop	r6
    6f6c:	08 95       	ret

00006f6e <UpdateServos>:

// Update servos from the mixer Config.Channel[i].P1_value data, add offsets and enforce travel limits
void UpdateServos(void)
{
    6f6e:	0f 93       	push	r16
    6f70:	1f 93       	push	r17
    6f72:	cf 93       	push	r28
    6f74:	df 93       	push	r29
    6f76:	ab e3       	ldi	r26, 0x3B	; 59
    6f78:	b6 e0       	ldi	r27, 0x06	; 6
    6f7a:	0b e6       	ldi	r16, 0x6B	; 107
    6f7c:	17 e0       	ldi	r17, 0x07	; 7
    6f7e:	e2 eb       	ldi	r30, 0xB2	; 178
    6f80:	f5 e0       	ldi	r31, 0x05	; 5
    6f82:	80 e0       	ldi	r24, 0x00	; 0
    6f84:	90 e0       	ldi	r25, 0x00	; 0
	int16_t temp1 = 0; // Output value

	for (i = 0; i < MIX_OUTPUTS; i++)
	{
		// Servo reverse and trim for the eight physical outputs
		temp1 = Config.Channel[i].P1_value;
    6f86:	2d 91       	ld	r18, X+
    6f88:	3c 91       	ld	r19, X
    6f8a:	11 97       	sbiw	r26, 0x01	; 1

		// Reverse this channel for the eight physical outputs
		if ((i <= MIX_OUTPUTS) && (Config.Servo_reverse[i] == ON))
    6f8c:	e8 01       	movw	r28, r16
    6f8e:	49 91       	ld	r20, Y+
    6f90:	8e 01       	movw	r16, r28
    6f92:	41 30       	cpi	r20, 0x01	; 1
    6f94:	19 f4       	brne	.+6      	; 0x6f9c <UpdateServos+0x2e>
		{	
			temp1 = -temp1;
    6f96:	31 95       	neg	r19
    6f98:	21 95       	neg	r18
    6f9a:	31 09       	sbc	r19, r1
		}

		// Add offset value to restore to system compatible value
		temp1 += 3750;
    6f9c:	2a 55       	subi	r18, 0x5A	; 90
    6f9e:	31 4f       	sbci	r19, 0xF1	; 241

		// Enforce min, max travel limits
		if (temp1 > Config.Limits[i].maximum)
    6fa0:	62 81       	ldd	r22, Z+2	; 0x02
    6fa2:	73 81       	ldd	r23, Z+3	; 0x03
    6fa4:	ac 01       	movw	r20, r24
    6fa6:	44 0f       	add	r20, r20
    6fa8:	55 1f       	adc	r21, r21
    6faa:	62 17       	cp	r22, r18
    6fac:	73 07       	cpc	r23, r19
    6fae:	24 f4       	brge	.+8      	; 0x6fb8 <UpdateServos+0x4a>
		{
			ServoOut[i] = Config.Limits[i].maximum;
    6fb0:	4b 5c       	subi	r20, 0xCB	; 203
    6fb2:	57 4f       	sbci	r21, 0xF7	; 247
    6fb4:	ea 01       	movw	r28, r20
    6fb6:	08 c0       	rjmp	.+16     	; 0x6fc8 <UpdateServos+0x5a>
		}

		else if (temp1 < Config.Limits[i].minimum)
    6fb8:	60 81       	ld	r22, Z
    6fba:	71 81       	ldd	r23, Z+1	; 0x01
		{
			ServoOut[i] = Config.Limits[i].minimum;
    6fbc:	4b 5c       	subi	r20, 0xCB	; 203
    6fbe:	57 4f       	sbci	r21, 0xF7	; 247
    6fc0:	ea 01       	movw	r28, r20
		if (temp1 > Config.Limits[i].maximum)
		{
			ServoOut[i] = Config.Limits[i].maximum;
		}

		else if (temp1 < Config.Limits[i].minimum)
    6fc2:	26 17       	cp	r18, r22
    6fc4:	37 07       	cpc	r19, r23
    6fc6:	1c f4       	brge	.+6      	; 0x6fce <UpdateServos+0x60>
		{
			ServoOut[i] = Config.Limits[i].minimum;
    6fc8:	79 83       	std	Y+1, r23	; 0x01
    6fca:	68 83       	st	Y, r22
    6fcc:	02 c0       	rjmp	.+4      	; 0x6fd2 <UpdateServos+0x64>
		}

		// Transfer value to servo
		else
		{
			ServoOut[i] = temp1;
    6fce:	39 83       	std	Y+1, r19	; 0x01
    6fd0:	28 83       	st	Y, r18
    6fd2:	01 96       	adiw	r24, 0x01	; 1
    6fd4:	96 96       	adiw	r26, 0x26	; 38
    6fd6:	34 96       	adiw	r30, 0x04	; 4
void UpdateServos(void)
{
	uint8_t i;
	int16_t temp1 = 0; // Output value

	for (i = 0; i < MIX_OUTPUTS; i++)
    6fd8:	88 30       	cpi	r24, 0x08	; 8
    6fda:	91 05       	cpc	r25, r1
    6fdc:	a1 f6       	brne	.-88     	; 0x6f86 <UpdateServos+0x18>
		else
		{
			ServoOut[i] = temp1;
		}
	}
}
    6fde:	df 91       	pop	r29
    6fe0:	cf 91       	pop	r28
    6fe2:	1f 91       	pop	r17
    6fe4:	0f 91       	pop	r16
    6fe6:	08 95       	ret

00006fe8 <scale32>:

// 32 bit multiply/scale for broken GCC
// Returns immediately if multiplier is 100, 0 or -100
int16_t scale32(int16_t value16, int16_t multiplier16)
{
    6fe8:	9c 01       	movw	r18, r24
	int32_t temp32 = 0;
	int32_t mult32 = 0;

	// No change if 100% (no scaling)
	if (multiplier16 == 100)
    6fea:	64 36       	cpi	r22, 0x64	; 100
    6fec:	71 05       	cpc	r23, r1
    6fee:	e9 f0       	breq	.+58     	; 0x702a <scale32+0x42>
	{
		return value16;
	}

	// Reverse if -100%
	else if (multiplier16 == -100)
    6ff0:	6c 39       	cpi	r22, 0x9C	; 156
    6ff2:	8f ef       	ldi	r24, 0xFF	; 255
    6ff4:	78 07       	cpc	r23, r24
    6ff6:	29 f4       	brne	.+10     	; 0x7002 <scale32+0x1a>
	{
		return -value16;	
    6ff8:	88 27       	eor	r24, r24
    6ffa:	99 27       	eor	r25, r25
    6ffc:	82 1b       	sub	r24, r18
    6ffe:	93 0b       	sbc	r25, r19
    7000:	08 95       	ret
	}

	// Zero if 0%
	else if (multiplier16 == 0)
    7002:	61 15       	cp	r22, r1
    7004:	71 05       	cpc	r23, r1
    7006:	71 f0       	breq	.+28     	; 0x7024 <scale32+0x3c>
	else
	{
		// GCC is broken bad regarding multiplying 32 bit numbers, hence all this crap...
		mult32 = multiplier16;
		temp32 = value16;
		temp32 = temp32 * mult32;
    7008:	db 01       	movw	r26, r22
    700a:	0e 94 b6 48 	call	0x916c	; 0x916c <__mulhisi3>

		// Divide by 100 and round to get scaled value
		temp32 = (temp32 + (int32_t)50) / (int32_t)100; // Constants need to be cast up to 32 bits
    700e:	6e 5c       	subi	r22, 0xCE	; 206
    7010:	7f 4f       	sbci	r23, 0xFF	; 255
    7012:	8f 4f       	sbci	r24, 0xFF	; 255
    7014:	9f 4f       	sbci	r25, 0xFF	; 255
    7016:	24 e6       	ldi	r18, 0x64	; 100
    7018:	30 e0       	ldi	r19, 0x00	; 0
    701a:	40 e0       	ldi	r20, 0x00	; 0
    701c:	50 e0       	ldi	r21, 0x00	; 0
    701e:	0e 94 91 48 	call	0x9122	; 0x9122 <__divmodsi4>
    7022:	03 c0       	rjmp	.+6      	; 0x702a <scale32+0x42>
	}

	// Zero if 0%
	else if (multiplier16 == 0)
	{
		return 0;	
    7024:	80 e0       	ldi	r24, 0x00	; 0
    7026:	90 e0       	ldi	r25, 0x00	; 0
    7028:	08 95       	ret
	int32_t mult32 = 0;

	// No change if 100% (no scaling)
	if (multiplier16 == 100)
	{
		return value16;
    702a:	c9 01       	movw	r24, r18
		temp32 = (temp32 + (int32_t)50) / (int32_t)100; // Constants need to be cast up to 32 bits
		value16 = (int16_t)temp32;
	}

	return value16;
}
    702c:	08 95       	ret

0000702e <ProcessMixer>:
//************************************************************
// Code
//************************************************************

void ProcessMixer(void)
{
    702e:	2f 92       	push	r2
    7030:	3f 92       	push	r3
    7032:	4f 92       	push	r4
    7034:	5f 92       	push	r5
    7036:	6f 92       	push	r6
    7038:	7f 92       	push	r7
    703a:	8f 92       	push	r8
    703c:	9f 92       	push	r9
    703e:	af 92       	push	r10
    7040:	bf 92       	push	r11
    7042:	cf 92       	push	r12
    7044:	df 92       	push	r13
    7046:	ef 92       	push	r14
    7048:	ff 92       	push	r15
    704a:	0f 93       	push	r16
    704c:	1f 93       	push	r17
    704e:	cf 93       	push	r28
    7050:	df 93       	push	r29
    7052:	cd b7       	in	r28, 0x3d	; 61
    7054:	de b7       	in	r29, 0x3e	; 62
    7056:	e2 97       	sbiw	r28, 0x32	; 50
    7058:	0f b6       	in	r0, 0x3f	; 63
    705a:	f8 94       	cli
    705c:	de bf       	out	0x3e, r29	; 62
    705e:	0f be       	out	0x3f, r0	; 63
    7060:	cd bf       	out	0x3d, r28	; 61
	int16_t	Step1 = 0;
	int16_t	Step2 = 0;
	int8_t	itemp8 = 0;

	// Copy the sensor data to an array for easy indexing - acc data is from accSmooth, increased to reasonable rates
	temp1 = (int16_t)accSmooth[ROLL] << 3;
    7062:	60 91 91 05 	lds	r22, 0x0591
    7066:	70 91 92 05 	lds	r23, 0x0592
    706a:	80 91 93 05 	lds	r24, 0x0593
    706e:	90 91 94 05 	lds	r25, 0x0594
    7072:	0e 94 fd 46 	call	0x8dfa	; 0x8dfa <__fixsfsi>
    7076:	8b 01       	movw	r16, r22
    7078:	83 e0       	ldi	r24, 0x03	; 3
    707a:	00 0f       	add	r16, r16
    707c:	11 1f       	adc	r17, r17
    707e:	8a 95       	dec	r24
    7080:	e1 f7       	brne	.-8      	; 0x707a <ProcessMixer+0x4c>
	temp2 = (int16_t)accSmooth[PITCH] << 3;
    7082:	60 91 95 05 	lds	r22, 0x0595
    7086:	70 91 96 05 	lds	r23, 0x0596
    708a:	80 91 97 05 	lds	r24, 0x0597
    708e:	90 91 98 05 	lds	r25, 0x0598
    7092:	0e 94 fd 46 	call	0x8dfa	; 0x8dfa <__fixsfsi>
    7096:	93 e0       	ldi	r25, 0x03	; 3
    7098:	66 0f       	add	r22, r22
    709a:	77 1f       	adc	r23, r23
    709c:	9a 95       	dec	r25
    709e:	e1 f7       	brne	.-8      	; 0x7098 <ProcessMixer+0x6a>
	int16_t	SensorDataP1[7] = {PID_Gyros[P1][ROLL], PID_Gyros[P1][PITCH], PID_Gyros[P1][YAW], temp1, temp2, PID_ACCs[P1][ROLL], PID_ACCs[P1][PITCH]};
    70a0:	40 90 09 08 	lds	r4, 0x0809
    70a4:	50 90 0a 08 	lds	r5, 0x080A
    70a8:	58 8a       	std	Y+16, r5	; 0x10
    70aa:	4f 86       	std	Y+15, r4	; 0x0f
    70ac:	20 91 0b 08 	lds	r18, 0x080B
    70b0:	30 91 0c 08 	lds	r19, 0x080C
    70b4:	38 a3       	std	Y+32, r19	; 0x20
    70b6:	2f 8f       	std	Y+31, r18	; 0x1f
    70b8:	3a 8b       	std	Y+18, r19	; 0x12
    70ba:	29 8b       	std	Y+17, r18	; 0x11
    70bc:	40 91 0d 08 	lds	r20, 0x080D
    70c0:	50 91 0e 08 	lds	r21, 0x080E
    70c4:	5a a3       	std	Y+34, r21	; 0x22
    70c6:	49 a3       	std	Y+33, r20	; 0x21
    70c8:	5c 8b       	std	Y+20, r21	; 0x14
    70ca:	4b 8b       	std	Y+19, r20	; 0x13
    70cc:	1e 8b       	std	Y+22, r17	; 0x16
    70ce:	0d 8b       	std	Y+21, r16	; 0x15
    70d0:	78 8f       	std	Y+24, r23	; 0x18
    70d2:	6f 8b       	std	Y+23, r22	; 0x17
    70d4:	20 91 15 08 	lds	r18, 0x0815
    70d8:	30 91 16 08 	lds	r19, 0x0816
    70dc:	3c a3       	std	Y+36, r19	; 0x24
    70de:	2b a3       	std	Y+35, r18	; 0x23
    70e0:	3a 8f       	std	Y+26, r19	; 0x1a
    70e2:	29 8f       	std	Y+25, r18	; 0x19
    70e4:	40 91 17 08 	lds	r20, 0x0817
    70e8:	50 91 18 08 	lds	r21, 0x0818
    70ec:	5e a3       	std	Y+38, r21	; 0x26
    70ee:	4d a3       	std	Y+37, r20	; 0x25
    70f0:	5c 8f       	std	Y+28, r21	; 0x1c
    70f2:	4b 8f       	std	Y+27, r20	; 0x1b
	int16_t	SensorDataP2[7] = {PID_Gyros[P2][ROLL], PID_Gyros[P2][PITCH], PID_Gyros[P2][YAW], temp1, temp2, PID_ACCs[P2][ROLL], PID_ACCs[P2][PITCH]}; 
    70f4:	20 91 0f 08 	lds	r18, 0x080F
    70f8:	30 91 10 08 	lds	r19, 0x0810
    70fc:	38 a7       	std	Y+40, r19	; 0x28
    70fe:	2f a3       	std	Y+39, r18	; 0x27
    7100:	3a 83       	std	Y+2, r19	; 0x02
    7102:	29 83       	std	Y+1, r18	; 0x01
    7104:	40 91 11 08 	lds	r20, 0x0811
    7108:	50 91 12 08 	lds	r21, 0x0812
    710c:	5a a7       	std	Y+42, r21	; 0x2a
    710e:	49 a7       	std	Y+41, r20	; 0x29
    7110:	5c 83       	std	Y+4, r21	; 0x04
    7112:	4b 83       	std	Y+3, r20	; 0x03
    7114:	20 90 13 08 	lds	r2, 0x0813
    7118:	30 90 14 08 	lds	r3, 0x0814
    711c:	3e 82       	std	Y+6, r3	; 0x06
    711e:	2d 82       	std	Y+5, r2	; 0x05
    7120:	18 87       	std	Y+8, r17	; 0x08
    7122:	0f 83       	std	Y+7, r16	; 0x07
    7124:	7a 87       	std	Y+10, r23	; 0x0a
    7126:	69 87       	std	Y+9, r22	; 0x09
    7128:	a0 90 1b 08 	lds	r10, 0x081B
    712c:	b0 90 1c 08 	lds	r11, 0x081C
    7130:	bc 86       	std	Y+12, r11	; 0x0c
    7132:	ab 86       	std	Y+11, r10	; 0x0b
    7134:	80 90 1d 08 	lds	r8, 0x081D
    7138:	90 90 1e 08 	lds	r9, 0x081E
    713c:	9e 86       	std	Y+14, r9	; 0x0e
    713e:	8d 86       	std	Y+13, r8	; 0x0d
		//************************************************************
		// Mix in gyros
		//************************************************************ 

		// P1 gyros
		if (Transition_state < TRANS_P2)
    7140:	50 91 21 05 	lds	r21, 0x0521
    7144:	5d 8f       	std	Y+29, r21	; 0x1d
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P1_throttle_volume < 0 )
					{
						P1_solution = P1_solution + PID_ACCs[P1][YAW];			// Reverse if volume negative
    7146:	20 91 19 08 	lds	r18, 0x0819
    714a:	30 91 1a 08 	lds	r19, 0x081A
    714e:	3c a7       	std	Y+44, r19	; 0x2c
    7150:	2b a7       	std	Y+43, r18	; 0x2b
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P2_throttle_volume < 0 )
					{
						P2_solution = P2_solution + PID_ACCs[P2][YAW];			// Reverse if volume negative
    7152:	40 91 1f 08 	lds	r20, 0x081F
    7156:	50 91 20 08 	lds	r21, 0x0820
    715a:	5e a7       	std	Y+46, r21	; 0x2e
    715c:	4d a7       	std	Y+45, r20	; 0x2d
    715e:	c1 2c       	mov	r12, r1
    7160:	d1 2c       	mov	r13, r1
					{
						P2_solution = P2_solution + PID_Gyros[P2][ROLL];		// Reverse if volume negative
					}
					else
					{
						P2_solution = P2_solution - PID_Gyros[P2][ROLL];
    7162:	2f a1       	ldd	r18, Y+39	; 0x27
    7164:	38 a5       	ldd	r19, Y+40	; 0x28
    7166:	31 95       	neg	r19
    7168:	21 95       	neg	r18
    716a:	31 09       	sbc	r19, r1
    716c:	38 ab       	std	Y+48, r19	; 0x30
    716e:	2f a7       	std	Y+47, r18	; 0x2f
					{
						P1_solution = P1_solution + PID_Gyros[P1][ROLL];		// Reverse if volume negative
					}
					else
					{
						P1_solution = P1_solution - PID_Gyros[P1][ROLL];
    7170:	44 27       	eor	r20, r20
    7172:	55 27       	eor	r21, r21
    7174:	44 19       	sub	r20, r4
    7176:	55 09       	sbc	r21, r5
    7178:	5a ab       	std	Y+50, r21	; 0x32
    717a:	49 ab       	std	Y+49, r20	; 0x31
		//************************************************************
		// Mix in gyros
		//************************************************************ 

		// P1 gyros
		if (Transition_state < TRANS_P2)
    717c:	5d 8d       	ldd	r21, Y+29	; 0x1d
    717e:	59 30       	cpi	r21, 0x09	; 9
    7180:	08 f0       	brcs	.+2      	; 0x7184 <ProcessMixer+0x156>
    7182:	79 c0       	rjmp	.+242    	; 0x7276 <ProcessMixer+0x248>
    7184:	86 01       	movw	r16, r12
    7186:	07 55       	subi	r16, 0x57	; 87
    7188:	1a 4f       	sbci	r17, 0xFA	; 250
    718a:	f8 01       	movw	r30, r16
    718c:	ec 55       	subi	r30, 0x5C	; 92
    718e:	ff 4f       	sbci	r31, 0xFF	; 255
		{
			switch (Config.Channel[i].P1_Roll_gyro) 
    7190:	80 81       	ld	r24, Z
    7192:	81 30       	cpi	r24, 0x01	; 1
    7194:	91 f0       	breq	.+36     	; 0x71ba <ProcessMixer+0x18c>
    7196:	82 30       	cpi	r24, 0x02	; 2
    7198:	c9 f4       	brne	.+50     	; 0x71cc <ProcessMixer+0x19e>
    719a:	f8 01       	movw	r30, r16
    719c:	e2 56       	subi	r30, 0x62	; 98
    719e:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P1_solution = P1_solution - PID_Gyros[P1][ROLL];
					}
					break;
				case SCALE:
					P1_solution = P1_solution - scale32(PID_Gyros[P1][ROLL], Config.Channel[i].P1_aileron_volume * 5); 
    71a0:	60 81       	ld	r22, Z
    71a2:	85 e0       	ldi	r24, 0x05	; 5
    71a4:	68 02       	muls	r22, r24
    71a6:	b0 01       	movw	r22, r0
    71a8:	11 24       	eor	r1, r1
    71aa:	c2 01       	movw	r24, r4
    71ac:	0e 94 f4 37 	call	0x6fe8	; 0x6fe8 <scale32>
    71b0:	ee 24       	eor	r14, r14
    71b2:	ff 24       	eor	r15, r15
    71b4:	e8 1a       	sub	r14, r24
    71b6:	f9 0a       	sbc	r15, r25
					break;
    71b8:	0d c0       	rjmp	.+26     	; 0x71d4 <ProcessMixer+0x1a6>
    71ba:	f8 01       	movw	r30, r16
    71bc:	e2 56       	subi	r30, 0x62	; 98
    71be:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P1_Roll_gyro) 
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P1_aileron_volume < 0 )
    71c0:	80 81       	ld	r24, Z
    71c2:	87 fd       	sbrc	r24, 7
    71c4:	06 c0       	rjmp	.+12     	; 0x71d2 <ProcessMixer+0x1a4>
					{
						P1_solution = P1_solution + PID_Gyros[P1][ROLL];		// Reverse if volume negative
					}
					else
					{
						P1_solution = P1_solution - PID_Gyros[P1][ROLL];
    71c6:	e9 a8       	ldd	r14, Y+49	; 0x31
    71c8:	fa a8       	ldd	r15, Y+50	; 0x32
    71ca:	04 c0       	rjmp	.+8      	; 0x71d4 <ProcessMixer+0x1a6>
	{
		//************************************************************
		// Zero each channel value to start
		//************************************************************

		P1_solution = 0;
    71cc:	e1 2c       	mov	r14, r1
    71ce:	f1 2c       	mov	r15, r1
    71d0:	01 c0       	rjmp	.+2      	; 0x71d4 <ProcessMixer+0x1a6>
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P1_aileron_volume < 0 )
					{
						P1_solution = P1_solution + PID_Gyros[P1][ROLL];		// Reverse if volume negative
    71d2:	72 01       	movw	r14, r4
    71d4:	f8 01       	movw	r30, r16
    71d6:	ea 55       	subi	r30, 0x5A	; 90
    71d8:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				default:
					break;	
			}

			switch (Config.Channel[i].P1_Pitch_gyro)
    71da:	80 81       	ld	r24, Z
    71dc:	81 30       	cpi	r24, 0x01	; 1
    71de:	89 f0       	breq	.+34     	; 0x7202 <ProcessMixer+0x1d4>
    71e0:	82 30       	cpi	r24, 0x02	; 2
    71e2:	f1 f4       	brne	.+60     	; 0x7220 <ProcessMixer+0x1f2>
    71e4:	f8 01       	movw	r30, r16
    71e6:	e0 56       	subi	r30, 0x60	; 96
    71e8:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P1_solution = P1_solution + PID_Gyros[P1][PITCH];
					}
					break;
				case SCALE:
					P1_solution = P1_solution - scale32(PID_Gyros[P1][PITCH], Config.Channel[i].P1_elevator_volume * 5);
    71ea:	60 81       	ld	r22, Z
    71ec:	55 e0       	ldi	r21, 0x05	; 5
    71ee:	65 02       	muls	r22, r21
    71f0:	b0 01       	movw	r22, r0
    71f2:	11 24       	eor	r1, r1
    71f4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    71f6:	98 a1       	ldd	r25, Y+32	; 0x20
    71f8:	0e 94 f4 37 	call	0x6fe8	; 0x6fe8 <scale32>
    71fc:	e8 1a       	sub	r14, r24
    71fe:	f9 0a       	sbc	r15, r25
					break;
    7200:	0f c0       	rjmp	.+30     	; 0x7220 <ProcessMixer+0x1f2>
    7202:	f8 01       	movw	r30, r16
    7204:	e0 56       	subi	r30, 0x60	; 96
    7206:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P1_Pitch_gyro)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P1_elevator_volume < 0 )
    7208:	80 81       	ld	r24, Z
    720a:	87 ff       	sbrs	r24, 7
    720c:	05 c0       	rjmp	.+10     	; 0x7218 <ProcessMixer+0x1ea>
					{
						P1_solution = P1_solution - PID_Gyros[P1][PITCH];		// Reverse if volume negative
    720e:	2f 8d       	ldd	r18, Y+31	; 0x1f
    7210:	38 a1       	ldd	r19, Y+32	; 0x20
    7212:	e2 1a       	sub	r14, r18
    7214:	f3 0a       	sbc	r15, r19
    7216:	04 c0       	rjmp	.+8      	; 0x7220 <ProcessMixer+0x1f2>
					}
					else
					{
						P1_solution = P1_solution + PID_Gyros[P1][PITCH];
    7218:	4f 8d       	ldd	r20, Y+31	; 0x1f
    721a:	58 a1       	ldd	r21, Y+32	; 0x20
    721c:	e4 0e       	add	r14, r20
    721e:	f5 1e       	adc	r15, r21
    7220:	f8 01       	movw	r30, r16
    7222:	e8 55       	subi	r30, 0x58	; 88
    7224:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				default:
					break;
			}

			switch (Config.Channel[i].P1_Yaw_gyro)
    7226:	80 81       	ld	r24, Z
    7228:	81 30       	cpi	r24, 0x01	; 1
    722a:	89 f0       	breq	.+34     	; 0x724e <ProcessMixer+0x220>
    722c:	82 30       	cpi	r24, 0x02	; 2
    722e:	f1 f4       	brne	.+60     	; 0x726c <ProcessMixer+0x23e>
    7230:	f8 01       	movw	r30, r16
    7232:	ee 55       	subi	r30, 0x5E	; 94
    7234:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P1_solution = P1_solution + PID_Gyros[P1][YAW];
					}
					break;
				case SCALE:
					P1_solution = P1_solution - scale32(PID_Gyros[P1][YAW], Config.Channel[i].P1_rudder_volume * 5);
    7236:	60 81       	ld	r22, Z
    7238:	55 e0       	ldi	r21, 0x05	; 5
    723a:	65 02       	muls	r22, r21
    723c:	b0 01       	movw	r22, r0
    723e:	11 24       	eor	r1, r1
    7240:	89 a1       	ldd	r24, Y+33	; 0x21
    7242:	9a a1       	ldd	r25, Y+34	; 0x22
    7244:	0e 94 f4 37 	call	0x6fe8	; 0x6fe8 <scale32>
    7248:	e8 1a       	sub	r14, r24
    724a:	f9 0a       	sbc	r15, r25
					break;
    724c:	0f c0       	rjmp	.+30     	; 0x726c <ProcessMixer+0x23e>
    724e:	f8 01       	movw	r30, r16
    7250:	ee 55       	subi	r30, 0x5E	; 94
    7252:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P1_Yaw_gyro)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P1_rudder_volume < 0 )
    7254:	80 81       	ld	r24, Z
    7256:	87 ff       	sbrs	r24, 7
    7258:	05 c0       	rjmp	.+10     	; 0x7264 <ProcessMixer+0x236>
					{
						P1_solution = P1_solution - PID_Gyros[P1][YAW];			// Reverse if volume negative
    725a:	29 a1       	ldd	r18, Y+33	; 0x21
    725c:	3a a1       	ldd	r19, Y+34	; 0x22
    725e:	e2 1a       	sub	r14, r18
    7260:	f3 0a       	sbc	r15, r19
    7262:	04 c0       	rjmp	.+8      	; 0x726c <ProcessMixer+0x23e>
					}
					else
					{
						P1_solution = P1_solution + PID_Gyros[P1][YAW];
    7264:	49 a1       	ldd	r20, Y+33	; 0x21
    7266:	5a a1       	ldd	r21, Y+34	; 0x22
    7268:	e4 0e       	add	r14, r20
    726a:	f5 1e       	adc	r15, r21
					break;
			}
		}

		// P2 gyros
		if (Transition_state > TRANS_P1)
    726c:	2d 8d       	ldd	r18, Y+29	; 0x1d
    726e:	22 23       	and	r18, r18
    7270:	09 f4       	brne	.+2      	; 0x7274 <ProcessMixer+0x246>
    7272:	7a c0       	rjmp	.+244    	; 0x7368 <ProcessMixer+0x33a>
    7274:	02 c0       	rjmp	.+4      	; 0x727a <ProcessMixer+0x24c>
	{
		//************************************************************
		// Zero each channel value to start
		//************************************************************

		P1_solution = 0;
    7276:	e1 2c       	mov	r14, r1
    7278:	f1 2c       	mov	r15, r1
    727a:	a6 01       	movw	r20, r12
    727c:	47 55       	subi	r20, 0x57	; 87
    727e:	5a 4f       	sbci	r21, 0xFA	; 250
    7280:	3a 01       	movw	r6, r20
    7282:	fa 01       	movw	r30, r20
    7284:	eb 55       	subi	r30, 0x5B	; 91
    7286:	ff 4f       	sbci	r31, 0xFF	; 255
		}

		// P2 gyros
		if (Transition_state > TRANS_P1)
		{
			switch (Config.Channel[i].P2_Roll_gyro)
    7288:	80 81       	ld	r24, Z
    728a:	81 30       	cpi	r24, 0x01	; 1
    728c:	99 f0       	breq	.+38     	; 0x72b4 <ProcessMixer+0x286>
    728e:	82 30       	cpi	r24, 0x02	; 2
    7290:	d1 f4       	brne	.+52     	; 0x72c6 <ProcessMixer+0x298>
    7292:	fa 01       	movw	r30, r20
    7294:	e1 56       	subi	r30, 0x61	; 97
    7296:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P2_solution = P2_solution - PID_Gyros[P2][ROLL];
					}
					break;
				case SCALE:
					P2_solution = P2_solution - scale32(PID_Gyros[P2][ROLL], Config.Channel[i].P2_aileron_volume * 5);
    7298:	60 81       	ld	r22, Z
    729a:	55 e0       	ldi	r21, 0x05	; 5
    729c:	65 02       	muls	r22, r21
    729e:	b0 01       	movw	r22, r0
    72a0:	11 24       	eor	r1, r1
    72a2:	8f a1       	ldd	r24, Y+39	; 0x27
    72a4:	98 a5       	ldd	r25, Y+40	; 0x28
    72a6:	0e 94 f4 37 	call	0x6fe8	; 0x6fe8 <scale32>
    72aa:	00 27       	eor	r16, r16
    72ac:	11 27       	eor	r17, r17
    72ae:	08 1b       	sub	r16, r24
    72b0:	19 0b       	sbc	r17, r25
					break;
    72b2:	0e c0       	rjmp	.+28     	; 0x72d0 <ProcessMixer+0x2a2>
    72b4:	fa 01       	movw	r30, r20
    72b6:	e1 56       	subi	r30, 0x61	; 97
    72b8:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P2_Roll_gyro)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P2_aileron_volume < 0 )
    72ba:	80 81       	ld	r24, Z
    72bc:	87 fd       	sbrc	r24, 7
    72be:	06 c0       	rjmp	.+12     	; 0x72cc <ProcessMixer+0x29e>
					{
						P2_solution = P2_solution + PID_Gyros[P2][ROLL];		// Reverse if volume negative
					}
					else
					{
						P2_solution = P2_solution - PID_Gyros[P2][ROLL];
    72c0:	0f a5       	ldd	r16, Y+47	; 0x2f
    72c2:	18 a9       	ldd	r17, Y+48	; 0x30
    72c4:	05 c0       	rjmp	.+10     	; 0x72d0 <ProcessMixer+0x2a2>
		//************************************************************
		// Zero each channel value to start
		//************************************************************

		P1_solution = 0;
		P2_solution = 0;
    72c6:	00 e0       	ldi	r16, 0x00	; 0
    72c8:	10 e0       	ldi	r17, 0x00	; 0
    72ca:	02 c0       	rjmp	.+4      	; 0x72d0 <ProcessMixer+0x2a2>
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P2_aileron_volume < 0 )
					{
						P2_solution = P2_solution + PID_Gyros[P2][ROLL];		// Reverse if volume negative
    72cc:	0f a1       	ldd	r16, Y+39	; 0x27
    72ce:	18 a5       	ldd	r17, Y+40	; 0x28
    72d0:	f3 01       	movw	r30, r6
    72d2:	e9 55       	subi	r30, 0x59	; 89
    72d4:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				default:
					break;
			}

			switch (Config.Channel[i].P2_Pitch_gyro)
    72d6:	80 81       	ld	r24, Z
    72d8:	81 30       	cpi	r24, 0x01	; 1
    72da:	89 f0       	breq	.+34     	; 0x72fe <ProcessMixer+0x2d0>
    72dc:	82 30       	cpi	r24, 0x02	; 2
    72de:	f1 f4       	brne	.+60     	; 0x731c <ProcessMixer+0x2ee>
    72e0:	f3 01       	movw	r30, r6
    72e2:	ef 55       	subi	r30, 0x5F	; 95
    72e4:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P2_solution = P2_solution + PID_Gyros[P2][PITCH];
					}
					break;
				case SCALE:
					P2_solution = P2_solution - scale32(PID_Gyros[P2][PITCH], Config.Channel[i].P2_elevator_volume * 5);
    72e6:	60 81       	ld	r22, Z
    72e8:	55 e0       	ldi	r21, 0x05	; 5
    72ea:	65 02       	muls	r22, r21
    72ec:	b0 01       	movw	r22, r0
    72ee:	11 24       	eor	r1, r1
    72f0:	89 a5       	ldd	r24, Y+41	; 0x29
    72f2:	9a a5       	ldd	r25, Y+42	; 0x2a
    72f4:	0e 94 f4 37 	call	0x6fe8	; 0x6fe8 <scale32>
    72f8:	08 1b       	sub	r16, r24
    72fa:	19 0b       	sbc	r17, r25
					break;
    72fc:	0f c0       	rjmp	.+30     	; 0x731c <ProcessMixer+0x2ee>
    72fe:	f3 01       	movw	r30, r6
    7300:	ef 55       	subi	r30, 0x5F	; 95
    7302:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P2_Pitch_gyro)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P2_elevator_volume < 0 )
    7304:	80 81       	ld	r24, Z
    7306:	87 ff       	sbrs	r24, 7
    7308:	05 c0       	rjmp	.+10     	; 0x7314 <ProcessMixer+0x2e6>
					{
						P2_solution = P2_solution - PID_Gyros[P2][PITCH];		// Reverse if volume negative
    730a:	29 a5       	ldd	r18, Y+41	; 0x29
    730c:	3a a5       	ldd	r19, Y+42	; 0x2a
    730e:	02 1b       	sub	r16, r18
    7310:	13 0b       	sbc	r17, r19
    7312:	04 c0       	rjmp	.+8      	; 0x731c <ProcessMixer+0x2ee>
					}
					else
					{
						P2_solution = P2_solution + PID_Gyros[P2][PITCH];
    7314:	49 a5       	ldd	r20, Y+41	; 0x29
    7316:	5a a5       	ldd	r21, Y+42	; 0x2a
    7318:	04 0f       	add	r16, r20
    731a:	15 1f       	adc	r17, r21
    731c:	f3 01       	movw	r30, r6
    731e:	e7 55       	subi	r30, 0x57	; 87
    7320:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				default:
					break;
			}

			switch (Config.Channel[i].P2_Yaw_gyro)
    7322:	80 81       	ld	r24, Z
    7324:	81 30       	cpi	r24, 0x01	; 1
    7326:	81 f0       	breq	.+32     	; 0x7348 <ProcessMixer+0x31a>
    7328:	82 30       	cpi	r24, 0x02	; 2
    732a:	c9 f4       	brne	.+50     	; 0x735e <ProcessMixer+0x330>
    732c:	f3 01       	movw	r30, r6
    732e:	ed 55       	subi	r30, 0x5D	; 93
    7330:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P2_solution = P2_solution + PID_Gyros[P2][YAW];
					}
					break;
				case SCALE:
					P2_solution = P2_solution - scale32(PID_Gyros[P2][YAW], Config.Channel[i].P2_rudder_volume * 5);
    7332:	60 81       	ld	r22, Z
    7334:	85 e0       	ldi	r24, 0x05	; 5
    7336:	68 02       	muls	r22, r24
    7338:	b0 01       	movw	r22, r0
    733a:	11 24       	eor	r1, r1
    733c:	c1 01       	movw	r24, r2
    733e:	0e 94 f4 37 	call	0x6fe8	; 0x6fe8 <scale32>
    7342:	08 1b       	sub	r16, r24
    7344:	19 0b       	sbc	r17, r25
					break;
    7346:	0b c0       	rjmp	.+22     	; 0x735e <ProcessMixer+0x330>
    7348:	f3 01       	movw	r30, r6
    734a:	ed 55       	subi	r30, 0x5D	; 93
    734c:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P2_Yaw_gyro)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P2_rudder_volume < 0 )
    734e:	80 81       	ld	r24, Z
    7350:	87 ff       	sbrs	r24, 7
    7352:	03 c0       	rjmp	.+6      	; 0x735a <ProcessMixer+0x32c>
					{
						P2_solution = P2_solution - PID_Gyros[P2][YAW];			// Reverse if volume negative
    7354:	02 19       	sub	r16, r2
    7356:	13 09       	sbc	r17, r3
    7358:	02 c0       	rjmp	.+4      	; 0x735e <ProcessMixer+0x330>
					}
					else
					{
						P2_solution = P2_solution + PID_Gyros[P2][YAW];
    735a:	02 0d       	add	r16, r2
    735c:	13 1d       	adc	r17, r3

		//************************************************************
		// Mix in accelerometers
		//************************************************************ 
		// P1
		if (Transition_state < TRANS_P2)
    735e:	2d 8d       	ldd	r18, Y+29	; 0x1d
    7360:	29 30       	cpi	r18, 0x09	; 9
    7362:	08 f0       	brcs	.+2      	; 0x7366 <ProcessMixer+0x338>
    7364:	7d c0       	rjmp	.+250    	; 0x7460 <ProcessMixer+0x432>
    7366:	02 c0       	rjmp	.+4      	; 0x736c <ProcessMixer+0x33e>
		//************************************************************
		// Zero each channel value to start
		//************************************************************

		P1_solution = 0;
		P2_solution = 0;
    7368:	00 e0       	ldi	r16, 0x00	; 0
    736a:	10 e0       	ldi	r17, 0x00	; 0
    736c:	a6 01       	movw	r20, r12
    736e:	47 55       	subi	r20, 0x57	; 87
    7370:	5a 4f       	sbci	r21, 0xFA	; 250
    7372:	3a 01       	movw	r6, r20
    7374:	fa 01       	movw	r30, r20
    7376:	e6 55       	subi	r30, 0x56	; 86
    7378:	ff 4f       	sbci	r31, 0xFF	; 255
		// Mix in accelerometers
		//************************************************************ 
		// P1
		if (Transition_state < TRANS_P2)
		{
			switch (Config.Channel[i].P1_Roll_acc)
    737a:	80 81       	ld	r24, Z
    737c:	81 30       	cpi	r24, 0x01	; 1
    737e:	89 f0       	breq	.+34     	; 0x73a2 <ProcessMixer+0x374>
    7380:	82 30       	cpi	r24, 0x02	; 2
    7382:	f1 f4       	brne	.+60     	; 0x73c0 <ProcessMixer+0x392>
    7384:	fa 01       	movw	r30, r20
    7386:	e2 56       	subi	r30, 0x62	; 98
    7388:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P1_solution = P1_solution - PID_ACCs[P1][ROLL];			// or simply add
					}
					break;
				case SCALE:
					P1_solution = P1_solution - scale32(PID_ACCs[P1][ROLL], Config.Channel[i].P1_aileron_volume * 5);
    738a:	60 81       	ld	r22, Z
    738c:	55 e0       	ldi	r21, 0x05	; 5
    738e:	65 02       	muls	r22, r21
    7390:	b0 01       	movw	r22, r0
    7392:	11 24       	eor	r1, r1
    7394:	8b a1       	ldd	r24, Y+35	; 0x23
    7396:	9c a1       	ldd	r25, Y+36	; 0x24
    7398:	0e 94 f4 37 	call	0x6fe8	; 0x6fe8 <scale32>
    739c:	e8 1a       	sub	r14, r24
    739e:	f9 0a       	sbc	r15, r25
					break;
    73a0:	0f c0       	rjmp	.+30     	; 0x73c0 <ProcessMixer+0x392>
    73a2:	fa 01       	movw	r30, r20
    73a4:	e2 56       	subi	r30, 0x62	; 98
    73a6:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P1_Roll_acc)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P1_aileron_volume < 0 )
    73a8:	80 81       	ld	r24, Z
    73aa:	87 ff       	sbrs	r24, 7
    73ac:	05 c0       	rjmp	.+10     	; 0x73b8 <ProcessMixer+0x38a>
					{
						P1_solution = P1_solution + PID_ACCs[P1][ROLL];			// Reverse if volume negative
    73ae:	2b a1       	ldd	r18, Y+35	; 0x23
    73b0:	3c a1       	ldd	r19, Y+36	; 0x24
    73b2:	e2 0e       	add	r14, r18
    73b4:	f3 1e       	adc	r15, r19
    73b6:	04 c0       	rjmp	.+8      	; 0x73c0 <ProcessMixer+0x392>
					}
					else
					{
						P1_solution = P1_solution - PID_ACCs[P1][ROLL];			// or simply add
    73b8:	4b a1       	ldd	r20, Y+35	; 0x23
    73ba:	5c a1       	ldd	r21, Y+36	; 0x24
    73bc:	e4 1a       	sub	r14, r20
    73be:	f5 0a       	sbc	r15, r21
    73c0:	f3 01       	movw	r30, r6
    73c2:	e4 55       	subi	r30, 0x54	; 84
    73c4:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				default:
					break;
			}			

			switch (Config.Channel[i].P1_Pitch_acc)
    73c6:	80 81       	ld	r24, Z
    73c8:	81 30       	cpi	r24, 0x01	; 1
    73ca:	89 f0       	breq	.+34     	; 0x73ee <ProcessMixer+0x3c0>
    73cc:	82 30       	cpi	r24, 0x02	; 2
    73ce:	f1 f4       	brne	.+60     	; 0x740c <ProcessMixer+0x3de>
    73d0:	f3 01       	movw	r30, r6
    73d2:	e0 56       	subi	r30, 0x60	; 96
    73d4:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P1_solution = P1_solution + PID_ACCs[P1][PITCH];
					}
					break;
				case SCALE:
					P1_solution = P1_solution - scale32(PID_ACCs[P1][PITCH], Config.Channel[i].P1_elevator_volume * 5);
    73d6:	60 81       	ld	r22, Z
    73d8:	55 e0       	ldi	r21, 0x05	; 5
    73da:	65 02       	muls	r22, r21
    73dc:	b0 01       	movw	r22, r0
    73de:	11 24       	eor	r1, r1
    73e0:	8d a1       	ldd	r24, Y+37	; 0x25
    73e2:	9e a1       	ldd	r25, Y+38	; 0x26
    73e4:	0e 94 f4 37 	call	0x6fe8	; 0x6fe8 <scale32>
    73e8:	e8 1a       	sub	r14, r24
    73ea:	f9 0a       	sbc	r15, r25
					break;
    73ec:	0f c0       	rjmp	.+30     	; 0x740c <ProcessMixer+0x3de>
    73ee:	f3 01       	movw	r30, r6
    73f0:	e0 56       	subi	r30, 0x60	; 96
    73f2:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P1_Pitch_acc)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P1_elevator_volume < 0 )
    73f4:	80 81       	ld	r24, Z
    73f6:	87 ff       	sbrs	r24, 7
    73f8:	05 c0       	rjmp	.+10     	; 0x7404 <ProcessMixer+0x3d6>
					{
						P1_solution = P1_solution - PID_ACCs[P1][PITCH];		// Reverse if volume negative
    73fa:	2d a1       	ldd	r18, Y+37	; 0x25
    73fc:	3e a1       	ldd	r19, Y+38	; 0x26
    73fe:	e2 1a       	sub	r14, r18
    7400:	f3 0a       	sbc	r15, r19
    7402:	04 c0       	rjmp	.+8      	; 0x740c <ProcessMixer+0x3de>
					}
					else
					{
						P1_solution = P1_solution + PID_ACCs[P1][PITCH];
    7404:	4d a1       	ldd	r20, Y+37	; 0x25
    7406:	5e a1       	ldd	r21, Y+38	; 0x26
    7408:	e4 0e       	add	r14, r20
    740a:	f5 1e       	adc	r15, r21
    740c:	f3 01       	movw	r30, r6
    740e:	e2 55       	subi	r30, 0x52	; 82
    7410:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				default:
					break;
			}

			switch (Config.Channel[i].P1_Z_delta_acc)
    7412:	80 81       	ld	r24, Z
    7414:	81 30       	cpi	r24, 0x01	; 1
    7416:	89 f0       	breq	.+34     	; 0x743a <ProcessMixer+0x40c>
    7418:	82 30       	cpi	r24, 0x02	; 2
    741a:	f1 f4       	brne	.+60     	; 0x7458 <ProcessMixer+0x42a>
    741c:	f3 01       	movw	r30, r6
    741e:	e5 56       	subi	r30, 0x65	; 101
    7420:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P1_solution = P1_solution - PID_ACCs[P1][YAW];
					}
					break;
				case SCALE:
					P1_solution = P1_solution - scale32(PID_ACCs[P1][YAW], Config.Channel[i].P1_throttle_volume * 5);
    7422:	60 81       	ld	r22, Z
    7424:	55 e0       	ldi	r21, 0x05	; 5
    7426:	65 02       	muls	r22, r21
    7428:	b0 01       	movw	r22, r0
    742a:	11 24       	eor	r1, r1
    742c:	8b a5       	ldd	r24, Y+43	; 0x2b
    742e:	9c a5       	ldd	r25, Y+44	; 0x2c
    7430:	0e 94 f4 37 	call	0x6fe8	; 0x6fe8 <scale32>
    7434:	e8 1a       	sub	r14, r24
    7436:	f9 0a       	sbc	r15, r25
					break;
    7438:	0f c0       	rjmp	.+30     	; 0x7458 <ProcessMixer+0x42a>
    743a:	f3 01       	movw	r30, r6
    743c:	e5 56       	subi	r30, 0x65	; 101
    743e:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P1_Z_delta_acc)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P1_throttle_volume < 0 )
    7440:	80 81       	ld	r24, Z
    7442:	87 ff       	sbrs	r24, 7
    7444:	05 c0       	rjmp	.+10     	; 0x7450 <ProcessMixer+0x422>
					{
						P1_solution = P1_solution + PID_ACCs[P1][YAW];			// Reverse if volume negative
    7446:	2b a5       	ldd	r18, Y+43	; 0x2b
    7448:	3c a5       	ldd	r19, Y+44	; 0x2c
    744a:	e2 0e       	add	r14, r18
    744c:	f3 1e       	adc	r15, r19
    744e:	04 c0       	rjmp	.+8      	; 0x7458 <ProcessMixer+0x42a>
					}
					else
					{
						P1_solution = P1_solution - PID_ACCs[P1][YAW];
    7450:	4b a5       	ldd	r20, Y+43	; 0x2b
    7452:	5c a5       	ldd	r21, Y+44	; 0x2c
    7454:	e4 1a       	sub	r14, r20
    7456:	f5 0a       	sbc	r15, r21
					break;
			}
		}

		// P2
		if (Transition_state > TRANS_P1)
    7458:	2d 8d       	ldd	r18, Y+29	; 0x1d
    745a:	22 23       	and	r18, r18
    745c:	09 f4       	brne	.+2      	; 0x7460 <ProcessMixer+0x432>
    745e:	70 c0       	rjmp	.+224    	; 0x7540 <ProcessMixer+0x512>
    7460:	a6 01       	movw	r20, r12
    7462:	47 55       	subi	r20, 0x57	; 87
    7464:	5a 4f       	sbci	r21, 0xFA	; 250
    7466:	3a 01       	movw	r6, r20
    7468:	fa 01       	movw	r30, r20
    746a:	e5 55       	subi	r30, 0x55	; 85
    746c:	ff 4f       	sbci	r31, 0xFF	; 255
		{
			switch (Config.Channel[i].P2_Roll_acc)
    746e:	80 81       	ld	r24, Z
    7470:	81 30       	cpi	r24, 0x01	; 1
    7472:	81 f0       	breq	.+32     	; 0x7494 <ProcessMixer+0x466>
    7474:	82 30       	cpi	r24, 0x02	; 2
    7476:	c9 f4       	brne	.+50     	; 0x74aa <ProcessMixer+0x47c>
    7478:	fa 01       	movw	r30, r20
    747a:	e1 56       	subi	r30, 0x61	; 97
    747c:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P2_solution = P2_solution - PID_ACCs[P2][ROLL];			// or simply add
					}
					break;
				case SCALE:
					P2_solution = P2_solution - scale32(PID_ACCs[P2][ROLL], Config.Channel[i].P2_aileron_volume * 5);
    747e:	60 81       	ld	r22, Z
    7480:	55 e0       	ldi	r21, 0x05	; 5
    7482:	65 02       	muls	r22, r21
    7484:	b0 01       	movw	r22, r0
    7486:	11 24       	eor	r1, r1
    7488:	c5 01       	movw	r24, r10
    748a:	0e 94 f4 37 	call	0x6fe8	; 0x6fe8 <scale32>
    748e:	08 1b       	sub	r16, r24
    7490:	19 0b       	sbc	r17, r25
					break;
    7492:	0b c0       	rjmp	.+22     	; 0x74aa <ProcessMixer+0x47c>
    7494:	fa 01       	movw	r30, r20
    7496:	e1 56       	subi	r30, 0x61	; 97
    7498:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P2_Roll_acc)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P2_aileron_volume < 0 )
    749a:	80 81       	ld	r24, Z
    749c:	87 ff       	sbrs	r24, 7
    749e:	03 c0       	rjmp	.+6      	; 0x74a6 <ProcessMixer+0x478>
					{
						P2_solution = P2_solution + PID_ACCs[P2][ROLL];			// Reverse if volume negative
    74a0:	0a 0d       	add	r16, r10
    74a2:	1b 1d       	adc	r17, r11
    74a4:	02 c0       	rjmp	.+4      	; 0x74aa <ProcessMixer+0x47c>
					}
					else
					{
						P2_solution = P2_solution - PID_ACCs[P2][ROLL];			// or simply add
    74a6:	0a 19       	sub	r16, r10
    74a8:	1b 09       	sbc	r17, r11
    74aa:	f3 01       	movw	r30, r6
    74ac:	e3 55       	subi	r30, 0x53	; 83
    74ae:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				default:
					break;
			}

			switch (Config.Channel[i].P2_Pitch_acc)
    74b0:	80 81       	ld	r24, Z
    74b2:	81 30       	cpi	r24, 0x01	; 1
    74b4:	81 f0       	breq	.+32     	; 0x74d6 <ProcessMixer+0x4a8>
    74b6:	82 30       	cpi	r24, 0x02	; 2
    74b8:	c9 f4       	brne	.+50     	; 0x74ec <ProcessMixer+0x4be>
    74ba:	f3 01       	movw	r30, r6
    74bc:	ef 55       	subi	r30, 0x5F	; 95
    74be:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P2_solution = P2_solution + PID_ACCs[P2][PITCH];
					}
					break;
				case SCALE:
					P2_solution = P2_solution - scale32(PID_ACCs[P2][PITCH], Config.Channel[i].P2_elevator_volume * 5);
    74c0:	60 81       	ld	r22, Z
    74c2:	85 e0       	ldi	r24, 0x05	; 5
    74c4:	68 02       	muls	r22, r24
    74c6:	b0 01       	movw	r22, r0
    74c8:	11 24       	eor	r1, r1
    74ca:	c4 01       	movw	r24, r8
    74cc:	0e 94 f4 37 	call	0x6fe8	; 0x6fe8 <scale32>
    74d0:	08 1b       	sub	r16, r24
    74d2:	19 0b       	sbc	r17, r25
					break;
    74d4:	0b c0       	rjmp	.+22     	; 0x74ec <ProcessMixer+0x4be>
    74d6:	f3 01       	movw	r30, r6
    74d8:	ef 55       	subi	r30, 0x5F	; 95
    74da:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P2_Pitch_acc)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P2_elevator_volume < 0 )
    74dc:	80 81       	ld	r24, Z
    74de:	87 ff       	sbrs	r24, 7
    74e0:	03 c0       	rjmp	.+6      	; 0x74e8 <ProcessMixer+0x4ba>
					{

						P2_solution = P2_solution - PID_ACCs[P2][PITCH];		// Reverse if volume negative
    74e2:	08 19       	sub	r16, r8
    74e4:	19 09       	sbc	r17, r9
    74e6:	02 c0       	rjmp	.+4      	; 0x74ec <ProcessMixer+0x4be>
					}
					else
					{
						P2_solution = P2_solution + PID_ACCs[P2][PITCH];
    74e8:	08 0d       	add	r16, r8
    74ea:	19 1d       	adc	r17, r9
    74ec:	f3 01       	movw	r30, r6
    74ee:	e1 55       	subi	r30, 0x51	; 81
    74f0:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				default:
					break;
			}

			switch (Config.Channel[i].P2_Z_delta_acc)
    74f2:	80 81       	ld	r24, Z
    74f4:	81 30       	cpi	r24, 0x01	; 1
    74f6:	89 f0       	breq	.+34     	; 0x751a <ProcessMixer+0x4ec>
    74f8:	82 30       	cpi	r24, 0x02	; 2
    74fa:	f1 f4       	brne	.+60     	; 0x7538 <ProcessMixer+0x50a>
    74fc:	f3 01       	movw	r30, r6
    74fe:	e4 56       	subi	r30, 0x64	; 100
    7500:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P2_solution = P2_solution - PID_ACCs[P2][YAW];
					}
					break;
				case SCALE:
					P2_solution = P2_solution - scale32(PID_ACCs[P2][YAW], Config.Channel[i].P2_throttle_volume * 5);
    7502:	60 81       	ld	r22, Z
    7504:	55 e0       	ldi	r21, 0x05	; 5
    7506:	65 02       	muls	r22, r21
    7508:	b0 01       	movw	r22, r0
    750a:	11 24       	eor	r1, r1
    750c:	8d a5       	ldd	r24, Y+45	; 0x2d
    750e:	9e a5       	ldd	r25, Y+46	; 0x2e
    7510:	0e 94 f4 37 	call	0x6fe8	; 0x6fe8 <scale32>
    7514:	08 1b       	sub	r16, r24
    7516:	19 0b       	sbc	r17, r25
					break;
    7518:	0f c0       	rjmp	.+30     	; 0x7538 <ProcessMixer+0x50a>
    751a:	f3 01       	movw	r30, r6
    751c:	e4 56       	subi	r30, 0x64	; 100
    751e:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P2_Z_delta_acc)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P2_throttle_volume < 0 )
    7520:	80 81       	ld	r24, Z
    7522:	87 ff       	sbrs	r24, 7
    7524:	05 c0       	rjmp	.+10     	; 0x7530 <ProcessMixer+0x502>
					{
						P2_solution = P2_solution + PID_ACCs[P2][YAW];			// Reverse if volume negative
    7526:	2d a5       	ldd	r18, Y+45	; 0x2d
    7528:	3e a5       	ldd	r19, Y+46	; 0x2e
    752a:	02 0f       	add	r16, r18
    752c:	13 1f       	adc	r17, r19
    752e:	04 c0       	rjmp	.+8      	; 0x7538 <ProcessMixer+0x50a>
					}
					else
					{
						P2_solution = P2_solution - PID_ACCs[P2][YAW];
    7530:	4d a5       	ldd	r20, Y+45	; 0x2d
    7532:	5e a5       	ldd	r21, Y+46	; 0x2e
    7534:	04 1b       	sub	r16, r20
    7536:	15 0b       	sbc	r17, r21
		//************************************************************
		// Process mixers
		//************************************************************ 

		// Mix in other outputs here (P1)
		if (Transition_state < TRANS_P2)
    7538:	2d 8d       	ldd	r18, Y+29	; 0x1d
    753a:	29 30       	cpi	r18, 0x09	; 9
    753c:	08 f0       	brcs	.+2      	; 0x7540 <ProcessMixer+0x512>
    753e:	8d c0       	rjmp	.+282    	; 0x765a <ProcessMixer+0x62c>
    7540:	a6 01       	movw	r20, r12
    7542:	47 55       	subi	r20, 0x57	; 87
    7544:	5a 4f       	sbci	r21, 0xFA	; 250
    7546:	3a 01       	movw	r6, r20
    7548:	fa 01       	movw	r30, r20
    754a:	e2 56       	subi	r30, 0x62	; 98
    754c:	ff 4f       	sbci	r31, 0xFF	; 255
		{
			// Mix in dedicated RC sources - aileron, elevator and rudder
			if (Config.Channel[i].P1_aileron_volume !=0) 					// Mix in dedicated aileron
    754e:	60 81       	ld	r22, Z
    7550:	66 23       	and	r22, r22
    7552:	59 f0       	breq	.+22     	; 0x756a <ProcessMixer+0x53c>
			{
				temp2 = scale32(RCinputs[AILERON], Config.Channel[i].P1_aileron_volume);
    7554:	80 91 25 08 	lds	r24, 0x0825
    7558:	90 91 26 08 	lds	r25, 0x0826
    755c:	77 27       	eor	r23, r23
    755e:	67 fd       	sbrc	r22, 7
    7560:	70 95       	com	r23
    7562:	0e 94 f4 37 	call	0x6fe8	; 0x6fe8 <scale32>
				P1_solution = P1_solution + temp2;
    7566:	e8 0e       	add	r14, r24
    7568:	f9 1e       	adc	r15, r25
    756a:	f3 01       	movw	r30, r6
    756c:	e0 56       	subi	r30, 0x60	; 96
    756e:	ff 4f       	sbci	r31, 0xFF	; 255
			}
			if (Config.Channel[i].P1_elevator_volume !=0) 					// Mix in dedicated elevator
    7570:	60 81       	ld	r22, Z
    7572:	66 23       	and	r22, r22
    7574:	59 f0       	breq	.+22     	; 0x758c <ProcessMixer+0x55e>
			{
				temp2 = scale32(RCinputs[ELEVATOR], Config.Channel[i].P1_elevator_volume);
    7576:	80 91 27 08 	lds	r24, 0x0827
    757a:	90 91 28 08 	lds	r25, 0x0828
    757e:	77 27       	eor	r23, r23
    7580:	67 fd       	sbrc	r22, 7
    7582:	70 95       	com	r23
    7584:	0e 94 f4 37 	call	0x6fe8	; 0x6fe8 <scale32>
				P1_solution = P1_solution + temp2;
    7588:	e8 0e       	add	r14, r24
    758a:	f9 1e       	adc	r15, r25
    758c:	f3 01       	movw	r30, r6
    758e:	ee 55       	subi	r30, 0x5E	; 94
    7590:	ff 4f       	sbci	r31, 0xFF	; 255
			}
			if (Config.Channel[i].P1_rudder_volume !=0) 					// Mix in dedicated rudder
    7592:	60 81       	ld	r22, Z
    7594:	66 23       	and	r22, r22
    7596:	59 f0       	breq	.+22     	; 0x75ae <ProcessMixer+0x580>
			{
				temp2 = scale32(RCinputs[RUDDER], Config.Channel[i].P1_rudder_volume);
    7598:	80 91 29 08 	lds	r24, 0x0829
    759c:	90 91 2a 08 	lds	r25, 0x082A
    75a0:	77 27       	eor	r23, r23
    75a2:	67 fd       	sbrc	r22, 7
    75a4:	70 95       	com	r23
    75a6:	0e 94 f4 37 	call	0x6fe8	; 0x6fe8 <scale32>
				P1_solution = P1_solution + temp2;
    75aa:	e8 0e       	add	r14, r24
    75ac:	f9 1e       	adc	r15, r25
    75ae:	f3 01       	movw	r30, r6
    75b0:	ef 54       	subi	r30, 0x4F	; 79
    75b2:	ff 4f       	sbci	r31, 0xFF	; 255
			}

			// Other sources
			if ((Config.Channel[i].P1_source_a_volume !=0) && (Config.Channel[i].P1_source_a != NOMIX)) // Mix in first extra source
    75b4:	60 81       	ld	r22, Z
    75b6:	66 23       	and	r22, r22
    75b8:	19 f1       	breq	.+70     	; 0x7600 <ProcessMixer+0x5d2>
    75ba:	31 97       	sbiw	r30, 0x01	; 1
    75bc:	80 81       	ld	r24, Z
    75be:	8f 30       	cpi	r24, 0x0F	; 15
    75c0:	f9 f0       	breq	.+62     	; 0x7600 <ProcessMixer+0x5d2>
    75c2:	e8 2f       	mov	r30, r24
    75c4:	ff 27       	eor	r31, r31
    75c6:	e7 fd       	sbrc	r30, 7
    75c8:	f0 95       	com	r31
			{
				// Is the source a sensor?
				if (Config.Channel[i].P1_source_a > (MAX_RC_CHANNELS - 1))
    75ca:	88 30       	cpi	r24, 0x08	; 8
    75cc:	64 f0       	brlt	.+24     	; 0x75e6 <ProcessMixer+0x5b8>
				{
					temp2 = SensorDataP1[Config.Channel[i].P1_source_a - EXT_SOURCE];
    75ce:	38 97       	sbiw	r30, 0x08	; 8
    75d0:	ee 0f       	add	r30, r30
    75d2:	ff 1f       	adc	r31, r31
    75d4:	81 e0       	ldi	r24, 0x01	; 1
    75d6:	90 e0       	ldi	r25, 0x00	; 0
    75d8:	8c 0f       	add	r24, r28
    75da:	9d 1f       	adc	r25, r29
    75dc:	e8 0f       	add	r30, r24
    75de:	f9 1f       	adc	r31, r25
    75e0:	86 85       	ldd	r24, Z+14	; 0x0e
    75e2:	97 85       	ldd	r25, Z+15	; 0x0f
    75e4:	06 c0       	rjmp	.+12     	; 0x75f2 <ProcessMixer+0x5c4>
				}
				// Is the source an RC input?
				else
				{
					// Yes, calculate RC channel number from source number and return RC value
					temp2 = RCinputs[Config.Channel[i].P1_source_a];
    75e6:	ee 0f       	add	r30, r30
    75e8:	ff 1f       	adc	r31, r31
    75ea:	ed 5d       	subi	r30, 0xDD	; 221
    75ec:	f7 4f       	sbci	r31, 0xF7	; 247
    75ee:	80 81       	ld	r24, Z
    75f0:	91 81       	ldd	r25, Z+1	; 0x01
				}

				temp2 = scale32(temp2, Config.Channel[i].P1_source_a_volume);
    75f2:	77 27       	eor	r23, r23
    75f4:	67 fd       	sbrc	r22, 7
    75f6:	70 95       	com	r23
    75f8:	0e 94 f4 37 	call	0x6fe8	; 0x6fe8 <scale32>
				P1_solution = P1_solution + temp2;
    75fc:	e8 0e       	add	r14, r24
    75fe:	f9 1e       	adc	r15, r25
    7600:	f3 01       	movw	r30, r6
    7602:	eb 54       	subi	r30, 0x4B	; 75
    7604:	ff 4f       	sbci	r31, 0xFF	; 255
			}
			if ((Config.Channel[i].P1_source_b_volume !=0) && (Config.Channel[i].P1_source_b != NOMIX)) // Mix in second extra source
    7606:	60 81       	ld	r22, Z
    7608:	66 23       	and	r22, r22
    760a:	19 f1       	breq	.+70     	; 0x7652 <ProcessMixer+0x624>
    760c:	31 97       	sbiw	r30, 0x01	; 1
    760e:	80 81       	ld	r24, Z
    7610:	8f 30       	cpi	r24, 0x0F	; 15
    7612:	f9 f0       	breq	.+62     	; 0x7652 <ProcessMixer+0x624>
    7614:	e8 2f       	mov	r30, r24
    7616:	ff 27       	eor	r31, r31
    7618:	e7 fd       	sbrc	r30, 7
    761a:	f0 95       	com	r31
			{
				// Is the source a sensor?
				if (Config.Channel[i].P1_source_b > (MAX_RC_CHANNELS - 1))
    761c:	88 30       	cpi	r24, 0x08	; 8
    761e:	64 f0       	brlt	.+24     	; 0x7638 <ProcessMixer+0x60a>
				{
					temp2 = SensorDataP1[Config.Channel[i].P1_source_b - EXT_SOURCE];
    7620:	38 97       	sbiw	r30, 0x08	; 8
    7622:	ee 0f       	add	r30, r30
    7624:	ff 1f       	adc	r31, r31
    7626:	a1 e0       	ldi	r26, 0x01	; 1
    7628:	b0 e0       	ldi	r27, 0x00	; 0
    762a:	ac 0f       	add	r26, r28
    762c:	bd 1f       	adc	r27, r29
    762e:	ea 0f       	add	r30, r26
    7630:	fb 1f       	adc	r31, r27
    7632:	86 85       	ldd	r24, Z+14	; 0x0e
    7634:	97 85       	ldd	r25, Z+15	; 0x0f
    7636:	06 c0       	rjmp	.+12     	; 0x7644 <ProcessMixer+0x616>
				}
				// Is the source an RC input?
				else
				{
					temp2 = RCinputs[Config.Channel[i].P1_source_b];
    7638:	ee 0f       	add	r30, r30
    763a:	ff 1f       	adc	r31, r31
    763c:	ed 5d       	subi	r30, 0xDD	; 221
    763e:	f7 4f       	sbci	r31, 0xF7	; 247
    7640:	80 81       	ld	r24, Z
    7642:	91 81       	ldd	r25, Z+1	; 0x01
				}

				temp2 = scale32(temp2, Config.Channel[i].P1_source_b_volume);
    7644:	77 27       	eor	r23, r23
    7646:	67 fd       	sbrc	r22, 7
    7648:	70 95       	com	r23
    764a:	0e 94 f4 37 	call	0x6fe8	; 0x6fe8 <scale32>
				P1_solution = P1_solution + temp2;
    764e:	e8 0e       	add	r14, r24
    7650:	f9 1e       	adc	r15, r25
			}
		}

		// Mix in other outputs here (P2)
		if (Transition_state > TRANS_P1)	
    7652:	2d 8d       	ldd	r18, Y+29	; 0x1d
    7654:	22 23       	and	r18, r18
    7656:	09 f4       	brne	.+2      	; 0x765a <ProcessMixer+0x62c>
    7658:	85 c0       	rjmp	.+266    	; 0x7764 <ProcessMixer+0x736>
    765a:	a6 01       	movw	r20, r12
    765c:	47 55       	subi	r20, 0x57	; 87
    765e:	5a 4f       	sbci	r21, 0xFA	; 250
    7660:	3a 01       	movw	r6, r20
    7662:	fa 01       	movw	r30, r20
    7664:	e1 56       	subi	r30, 0x61	; 97
    7666:	ff 4f       	sbci	r31, 0xFF	; 255
		{
			// Mix in dedicated RC sources - aileron, elevator and rudder
			if (Config.Channel[i].P2_aileron_volume !=0) 					// Mix in dedicated aileron
    7668:	60 81       	ld	r22, Z
    766a:	66 23       	and	r22, r22
    766c:	59 f0       	breq	.+22     	; 0x7684 <ProcessMixer+0x656>
			{
				temp2 = scale32(RCinputs[AILERON], Config.Channel[i].P2_aileron_volume);
    766e:	80 91 25 08 	lds	r24, 0x0825
    7672:	90 91 26 08 	lds	r25, 0x0826
    7676:	77 27       	eor	r23, r23
    7678:	67 fd       	sbrc	r22, 7
    767a:	70 95       	com	r23
    767c:	0e 94 f4 37 	call	0x6fe8	; 0x6fe8 <scale32>
				P2_solution = P2_solution + temp2;
    7680:	08 0f       	add	r16, r24
    7682:	19 1f       	adc	r17, r25
    7684:	f3 01       	movw	r30, r6
    7686:	ef 55       	subi	r30, 0x5F	; 95
    7688:	ff 4f       	sbci	r31, 0xFF	; 255
			}
			if (Config.Channel[i].P2_elevator_volume !=0) 					// Mix in dedicated elevator
    768a:	60 81       	ld	r22, Z
    768c:	66 23       	and	r22, r22
    768e:	59 f0       	breq	.+22     	; 0x76a6 <ProcessMixer+0x678>
			{
				temp2 = scale32(RCinputs[ELEVATOR], Config.Channel[i].P2_elevator_volume);
    7690:	80 91 27 08 	lds	r24, 0x0827
    7694:	90 91 28 08 	lds	r25, 0x0828
    7698:	77 27       	eor	r23, r23
    769a:	67 fd       	sbrc	r22, 7
    769c:	70 95       	com	r23
    769e:	0e 94 f4 37 	call	0x6fe8	; 0x6fe8 <scale32>
				P2_solution = P2_solution + temp2;
    76a2:	08 0f       	add	r16, r24
    76a4:	19 1f       	adc	r17, r25
    76a6:	f3 01       	movw	r30, r6
    76a8:	ed 55       	subi	r30, 0x5D	; 93
    76aa:	ff 4f       	sbci	r31, 0xFF	; 255
			}
			if (Config.Channel[i].P2_rudder_volume !=0) 					// Mix in dedicated rudder
    76ac:	60 81       	ld	r22, Z
    76ae:	66 23       	and	r22, r22
    76b0:	59 f0       	breq	.+22     	; 0x76c8 <ProcessMixer+0x69a>
			{
				temp2 = scale32(RCinputs[RUDDER], Config.Channel[i].P2_rudder_volume);
    76b2:	80 91 29 08 	lds	r24, 0x0829
    76b6:	90 91 2a 08 	lds	r25, 0x082A
    76ba:	77 27       	eor	r23, r23
    76bc:	67 fd       	sbrc	r22, 7
    76be:	70 95       	com	r23
    76c0:	0e 94 f4 37 	call	0x6fe8	; 0x6fe8 <scale32>
				P2_solution = P2_solution + temp2;
    76c4:	08 0f       	add	r16, r24
    76c6:	19 1f       	adc	r17, r25
    76c8:	f3 01       	movw	r30, r6
    76ca:	ed 54       	subi	r30, 0x4D	; 77
    76cc:	ff 4f       	sbci	r31, 0xFF	; 255
			}

			// Other sources
			if ((Config.Channel[i].P2_source_a_volume !=0) && (Config.Channel[i].P2_source_a != NOMIX)) // Mix in first extra source
    76ce:	60 81       	ld	r22, Z
    76d0:	66 23       	and	r22, r22
    76d2:	09 f1       	breq	.+66     	; 0x7716 <ProcessMixer+0x6e8>
    76d4:	31 97       	sbiw	r30, 0x01	; 1
    76d6:	80 81       	ld	r24, Z
    76d8:	8f 30       	cpi	r24, 0x0F	; 15
    76da:	e9 f0       	breq	.+58     	; 0x7716 <ProcessMixer+0x6e8>
    76dc:	e8 2f       	mov	r30, r24
    76de:	ff 27       	eor	r31, r31
    76e0:	e7 fd       	sbrc	r30, 7
    76e2:	f0 95       	com	r31
			{
				// Is the source a sensor?
				if (Config.Channel[i].P2_source_a > (MAX_RC_CHANNELS - 1))
    76e4:	88 30       	cpi	r24, 0x08	; 8
    76e6:	54 f0       	brlt	.+20     	; 0x76fc <ProcessMixer+0x6ce>
				{
					temp2 = SensorDataP2[Config.Channel[i].P2_source_a - EXT_SOURCE];
    76e8:	38 97       	sbiw	r30, 0x08	; 8
    76ea:	ee 0f       	add	r30, r30
    76ec:	ff 1f       	adc	r31, r31
    76ee:	81 e0       	ldi	r24, 0x01	; 1
    76f0:	90 e0       	ldi	r25, 0x00	; 0
    76f2:	8c 0f       	add	r24, r28
    76f4:	9d 1f       	adc	r25, r29
    76f6:	e8 0f       	add	r30, r24
    76f8:	f9 1f       	adc	r31, r25
    76fa:	04 c0       	rjmp	.+8      	; 0x7704 <ProcessMixer+0x6d6>
				}
				// Is the source an RC input?
				else 
				{
					temp2 = RCinputs[Config.Channel[i].P2_source_a];
    76fc:	ee 0f       	add	r30, r30
    76fe:	ff 1f       	adc	r31, r31
    7700:	ed 5d       	subi	r30, 0xDD	; 221
    7702:	f7 4f       	sbci	r31, 0xF7	; 247
    7704:	80 81       	ld	r24, Z
    7706:	91 81       	ldd	r25, Z+1	; 0x01
				}

				temp2 = scale32(temp2, Config.Channel[i].P2_source_a_volume);
    7708:	77 27       	eor	r23, r23
    770a:	67 fd       	sbrc	r22, 7
    770c:	70 95       	com	r23
    770e:	0e 94 f4 37 	call	0x6fe8	; 0x6fe8 <scale32>
				P2_solution = P2_solution + temp2;
    7712:	08 0f       	add	r16, r24
    7714:	19 1f       	adc	r17, r25
    7716:	f3 01       	movw	r30, r6
    7718:	e9 54       	subi	r30, 0x49	; 73
    771a:	ff 4f       	sbci	r31, 0xFF	; 255
			}
			if ((Config.Channel[i].P2_source_b_volume !=0) && (Config.Channel[i].P2_source_b != NOMIX)) // Mix in second extra source
    771c:	60 81       	ld	r22, Z
    771e:	66 23       	and	r22, r22
    7720:	09 f1       	breq	.+66     	; 0x7764 <ProcessMixer+0x736>
    7722:	31 97       	sbiw	r30, 0x01	; 1
    7724:	80 81       	ld	r24, Z
    7726:	8f 30       	cpi	r24, 0x0F	; 15
    7728:	e9 f0       	breq	.+58     	; 0x7764 <ProcessMixer+0x736>
    772a:	e8 2f       	mov	r30, r24
    772c:	ff 27       	eor	r31, r31
    772e:	e7 fd       	sbrc	r30, 7
    7730:	f0 95       	com	r31
			{
				// Is the source a sensor?
				if (Config.Channel[i].P2_source_b > (MAX_RC_CHANNELS - 1))
    7732:	88 30       	cpi	r24, 0x08	; 8
    7734:	54 f0       	brlt	.+20     	; 0x774a <ProcessMixer+0x71c>
				{
					temp2 = SensorDataP2[Config.Channel[i].P2_source_b - EXT_SOURCE];
    7736:	38 97       	sbiw	r30, 0x08	; 8
    7738:	ee 0f       	add	r30, r30
    773a:	ff 1f       	adc	r31, r31
    773c:	a1 e0       	ldi	r26, 0x01	; 1
    773e:	b0 e0       	ldi	r27, 0x00	; 0
    7740:	ac 0f       	add	r26, r28
    7742:	bd 1f       	adc	r27, r29
    7744:	ea 0f       	add	r30, r26
    7746:	fb 1f       	adc	r31, r27
    7748:	04 c0       	rjmp	.+8      	; 0x7752 <ProcessMixer+0x724>
				}
				// Is the source an RC input?
				else
				{
					temp2 = RCinputs[Config.Channel[i].P2_source_b];
    774a:	ee 0f       	add	r30, r30
    774c:	ff 1f       	adc	r31, r31
    774e:	ed 5d       	subi	r30, 0xDD	; 221
    7750:	f7 4f       	sbci	r31, 0xF7	; 247
    7752:	80 81       	ld	r24, Z
    7754:	91 81       	ldd	r25, Z+1	; 0x01
				}

				temp2 = scale32(temp2, Config.Channel[i].P2_source_b_volume);
    7756:	77 27       	eor	r23, r23
    7758:	67 fd       	sbrc	r22, 7
    775a:	70 95       	com	r23
    775c:	0e 94 f4 37 	call	0x6fe8	; 0x6fe8 <scale32>
				P2_solution = P2_solution + temp2;
    7760:	08 0f       	add	r16, r24
    7762:	19 1f       	adc	r17, r25
    7764:	c6 01       	movw	r24, r12
    7766:	87 55       	subi	r24, 0x57	; 87
    7768:	9a 4f       	sbci	r25, 0xFA	; 250
    776a:	fc 01       	movw	r30, r24
    776c:	ee 56       	subi	r30, 0x6E	; 110
    776e:	ff 4f       	sbci	r31, 0xFF	; 255
			}
		}
			
		// Save solution for this channel. Note that this contains cross-mixed data from the *last* cycle
		Config.Channel[i].P1_value = P1_solution;
    7770:	f1 82       	std	Z+1, r15	; 0x01
    7772:	e0 82       	st	Z, r14
    7774:	32 96       	adiw	r30, 0x02	; 2
		Config.Channel[i].P2_value = P2_solution;
    7776:	11 83       	std	Z+1, r17	; 0x01
    7778:	00 83       	st	Z, r16
    777a:	b6 e2       	ldi	r27, 0x26	; 38
    777c:	cb 0e       	add	r12, r27
    777e:	d1 1c       	adc	r13, r1

	//************************************************************
	// Main mix loop - sensors, RC inputs and other channels
	//************************************************************

	for (i = 0; i < MIX_OUTPUTS; i++)
    7780:	e0 e3       	ldi	r30, 0x30	; 48
    7782:	ce 16       	cp	r12, r30
    7784:	e1 e0       	ldi	r30, 0x01	; 1
    7786:	de 06       	cpc	r13, r30
    7788:	09 f0       	breq	.+2      	; 0x778c <ProcessMixer+0x75e>
    778a:	f8 cc       	rjmp	.-1552   	; 0x717c <ProcessMixer+0x14e>
	//************************************************************
	// Mixer transition code
	//************************************************************ 

	// Convert number to percentage (0 to 100%)
	if (Config.TransitionSpeed != 0) 
    778c:	80 91 d7 05 	lds	r24, 0x05D7
    7790:	88 23       	and	r24, r24
    7792:	41 f0       	breq	.+16     	; 0x77a4 <ProcessMixer+0x776>
	{
		// transition_counter counts from 0 to 100 (101 steps)
		transition = transition_counter;
    7794:	80 91 22 05 	lds	r24, 0x0522
    7798:	90 91 23 05 	lds	r25, 0x0523
    779c:	90 93 20 05 	sts	0x0520, r25
    77a0:	80 93 1f 05 	sts	0x051F, r24

	// Recalculate P1 values based on transition stage
	for (i = 0; i < MIX_OUTPUTS; i++)
	{
		// Speed up the easy ones :)
		if (transition == 0)
    77a4:	00 91 1f 05 	lds	r16, 0x051F
    77a8:	10 91 20 05 	lds	r17, 0x0520
		}
		else
		{
			// Get source channel value
			temp1 = Config.Channel[i].P1_value;
			temp1 = scale32(temp1, (100 - transition));
    77ac:	b4 e6       	ldi	r27, 0x64	; 100
    77ae:	cb 2e       	mov	r12, r27
    77b0:	d1 2c       	mov	r13, r1
    77b2:	c0 1a       	sub	r12, r16
    77b4:	d1 0a       	sbc	r13, r17
    77b6:	8b e3       	ldi	r24, 0x3B	; 59
    77b8:	e8 2e       	mov	r14, r24
    77ba:	86 e0       	ldi	r24, 0x06	; 6
    77bc:	f8 2e       	mov	r15, r24

	// Recalculate P1 values based on transition stage
	for (i = 0; i < MIX_OUTPUTS; i++)
	{
		// Speed up the easy ones :)
		if (transition == 0)
    77be:	01 15       	cp	r16, r1
    77c0:	11 05       	cpc	r17, r1
    77c2:	21 f4       	brne	.+8      	; 0x77cc <ProcessMixer+0x79e>
		{
			temp1 = Config.Channel[i].P1_value;
    77c4:	d7 01       	movw	r26, r14
    77c6:	8d 91       	ld	r24, X+
    77c8:	9c 91       	ld	r25, X
    77ca:	16 c0       	rjmp	.+44     	; 0x77f8 <ProcessMixer+0x7ca>
		}
		else if (transition >= 100)
    77cc:	04 36       	cpi	r16, 0x64	; 100
    77ce:	11 05       	cpc	r17, r1
    77d0:	24 f0       	brlt	.+8      	; 0x77da <ProcessMixer+0x7ac>
		{
			temp1 = Config.Channel[i].P2_value;
    77d2:	f7 01       	movw	r30, r14
    77d4:	82 81       	ldd	r24, Z+2	; 0x02
    77d6:	93 81       	ldd	r25, Z+3	; 0x03
    77d8:	0f c0       	rjmp	.+30     	; 0x77f8 <ProcessMixer+0x7ca>
		}
		else
		{
			// Get source channel value
			temp1 = Config.Channel[i].P1_value;
			temp1 = scale32(temp1, (100 - transition));
    77da:	b6 01       	movw	r22, r12
    77dc:	d7 01       	movw	r26, r14
    77de:	8d 91       	ld	r24, X+
    77e0:	9c 91       	ld	r25, X
    77e2:	0e 94 f4 37 	call	0x6fe8	; 0x6fe8 <scale32>
    77e6:	5c 01       	movw	r10, r24

			// Get destination channel value
			temp2 = Config.Channel[i].P2_value;
			temp2 = scale32(temp2, transition);
    77e8:	b8 01       	movw	r22, r16
    77ea:	f7 01       	movw	r30, r14
    77ec:	82 81       	ldd	r24, Z+2	; 0x02
    77ee:	93 81       	ldd	r25, Z+3	; 0x03
    77f0:	0e 94 f4 37 	call	0x6fe8	; 0x6fe8 <scale32>

			// Sum the mixers
			temp1 = temp1 + temp2;
    77f4:	8a 0d       	add	r24, r10
    77f6:	9b 1d       	adc	r25, r11
		}
		// Save transitioned solution into P1
		Config.Channel[i].P1_value = temp1;
    77f8:	d7 01       	movw	r26, r14
    77fa:	8d 93       	st	X+, r24
    77fc:	9c 93       	st	X, r25
    77fe:	b6 e2       	ldi	r27, 0x26	; 38
    7800:	eb 0e       	add	r14, r27
    7802:	f1 1c       	adc	r15, r1
		// transition_counter counts from 0 to 100 (101 steps)
		transition = transition_counter;
	}

	// Recalculate P1 values based on transition stage
	for (i = 0; i < MIX_OUTPUTS; i++)
    7804:	eb e6       	ldi	r30, 0x6B	; 107
    7806:	ee 16       	cp	r14, r30
    7808:	e7 e0       	ldi	r30, 0x07	; 7
    780a:	fe 06       	cpc	r15, r30
    780c:	c1 f6       	brne	.-80     	; 0x77be <ProcessMixer+0x790>
    780e:	65 e4       	ldi	r22, 0x45	; 69
    7810:	c6 2e       	mov	r12, r22
    7812:	66 e0       	ldi	r22, 0x06	; 6
    7814:	d6 2e       	mov	r13, r22
    7816:	76 e4       	ldi	r23, 0x46	; 70
    7818:	87 2e       	mov	r8, r23
    781a:	76 e0       	ldi	r23, 0x06	; 6
    781c:	97 2e       	mov	r9, r23
    781e:	eb e3       	ldi	r30, 0x3B	; 59
    7820:	ee 2e       	mov	r14, r30
    7822:	e6 e0       	ldi	r30, 0x06	; 6
    7824:	fe 2e       	mov	r15, r30
			if (Config.Channel[i].P1_throttle_volume != Config.Channel[i].P2_throttle_volume)
			{
				// Calculate step difference in 1/100ths and round
				temp1 = (Config.Channel[i].P2_throttle_volume - Config.Channel[i].P1_throttle_volume);
				temp1 = temp1 << 7; 						// Multiply by 128 so divide gives reasonable step values
				Step1 = temp1 / 100;	
    7826:	f4 e6       	ldi	r31, 0x64	; 100
    7828:	af 2e       	mov	r10, r31
    782a:	b1 2c       	mov	r11, r1
    782c:	80 2f       	mov	r24, r16
    782e:	99 27       	eor	r25, r25
    7830:	87 fd       	sbrc	r24, 7
    7832:	90 95       	com	r25
					}
					// If P2 greater than P1, SINE is the one we want
					else
					{
						// Multiply SQRTSIN[transition] steps (0 to 100)
						temp3 = (int8_t)pgm_read_byte(&SQRTSIN[(int8_t)transition]);
    7834:	9c 01       	movw	r18, r24
    7836:	21 50       	subi	r18, 0x01	; 1
    7838:	36 4e       	sbci	r19, 0xE6	; 230
    783a:	3e 8f       	std	Y+30, r19	; 0x1e
    783c:	2d 8f       	std	Y+29, r18	; 0x1d
					// Choose between SQRT SINE and SQRT COSINE
					// If P2 less than P1, COSINE (reverse SINE) is the one we want
					if (Step1 < 0)
					{ 
						// Multiply SQRTSIN[100 - transition] steps (0 to 100)
						temp3 = 100 - (int8_t)pgm_read_byte(&SQRTSIN[100 - (int8_t)transition]);
    783e:	95 01       	movw	r18, r10
    7840:	28 1b       	sub	r18, r24
    7842:	39 0b       	sbc	r19, r25
    7844:	a9 01       	movw	r20, r18
    7846:	41 50       	subi	r20, 0x01	; 1
    7848:	56 4e       	sbci	r21, 0xE6	; 230
    784a:	58 a3       	std	Y+32, r21	; 0x20
    784c:	4f 8f       	std	Y+31, r20	; 0x1f
					}
					// If P2 greater than P1, SINE is the one we want
					else
					{
						// Multiply SIN[transition] steps (0 to 100)
						temp3 = (int8_t)pgm_read_byte(&SIN[(int8_t)transition]);
    784e:	dc 01       	movw	r26, r24
    7850:	ac 59       	subi	r26, 0x9C	; 156
    7852:	b5 4e       	sbci	r27, 0xE5	; 229
    7854:	1d 01       	movw	r2, r26
					// Choose between SINE and COSINE
					// If P2 less than P1, COSINE (reverse SINE) is the one we want
					if (Step1 < 0)
					{ 
						// Multiply SIN[100 - transition] steps (0 to 100)
						temp3 = 100 - (int8_t)pgm_read_byte(&SIN[100 - (int8_t)transition]);
    7856:	f9 01       	movw	r30, r18
    7858:	ec 59       	subi	r30, 0x9C	; 156
    785a:	f5 4e       	sbci	r31, 0xE5	; 229
    785c:	2f 01       	movw	r4, r30
		} // No throttle
		
		// No throttles, so clamp to THROTTLEMIN if flagged as a motor
		else if (Config.Channel[i].Motor_marker == MOTOR)
		{
			Config.Channel[i].P1_value = -THROTTLEOFFSET; // 3750-1250 = 2500 = 1.0ms
    785e:	ae e1       	ldi	r26, 0x1E	; 30
    7860:	6a 2e       	mov	r6, r26
    7862:	ab ef       	ldi	r26, 0xFB	; 251
    7864:	7a 2e       	mov	r7, r26
    7866:	f6 01       	movw	r30, r12
    7868:	31 97       	sbiw	r30, 0x01	; 1
	//************************************************************ 

	for (i = 0; i < MIX_OUTPUTS; i++)
	{
		// Ignore if both throttle volumes are 0% (no throttle)
		if 	(!((Config.Channel[i].P1_throttle_volume == 0) && 
    786a:	90 81       	ld	r25, Z
    786c:	d6 01       	movw	r26, r12
    786e:	8c 91       	ld	r24, X
    7870:	91 11       	cpse	r25, r1
    7872:	03 c0       	rjmp	.+6      	; 0x787a <ProcessMixer+0x84c>
    7874:	88 23       	and	r24, r24
    7876:	09 f4       	brne	.+2      	; 0x787a <ProcessMixer+0x84c>
    7878:	61 c0       	rjmp	.+194    	; 0x793c <ProcessMixer+0x90e>
    787a:	29 2f       	mov	r18, r25
    787c:	33 27       	eor	r19, r19
    787e:	27 fd       	sbrc	r18, 7
    7880:	30 95       	com	r19
			(Config.Channel[i].P2_throttle_volume == 0)))
		{
			// Only process if there is a curve
			if (Config.Channel[i].P1_throttle_volume != Config.Channel[i].P2_throttle_volume)
    7882:	98 17       	cp	r25, r24
    7884:	09 f4       	brne	.+2      	; 0x7888 <ProcessMixer+0x85a>
    7886:	48 c0       	rjmp	.+144    	; 0x7918 <ProcessMixer+0x8ea>
			{
				// Calculate step difference in 1/100ths and round
				temp1 = (Config.Channel[i].P2_throttle_volume - Config.Channel[i].P1_throttle_volume);
    7888:	99 27       	eor	r25, r25
    788a:	87 fd       	sbrc	r24, 7
    788c:	90 95       	com	r25
    788e:	82 1b       	sub	r24, r18
    7890:	93 0b       	sbc	r25, r19
				temp1 = temp1 << 7; 						// Multiply by 128 so divide gives reasonable step values
    7892:	96 95       	lsr	r25
    7894:	98 2f       	mov	r25, r24
    7896:	88 27       	eor	r24, r24
    7898:	97 95       	ror	r25
    789a:	87 95       	ror	r24
				Step1 = temp1 / 100;	
    789c:	b5 01       	movw	r22, r10
    789e:	0e 94 5b 48 	call	0x90b6	; 0x90b6 <__divmodhi4>

				// Set start (P1) point
				temp2 = Config.Channel[i].P1_throttle_volume; // Promote to 16 bits
				temp2 = temp2 << 7;
    78a2:	36 95       	lsr	r19
    78a4:	32 2f       	mov	r19, r18
    78a6:	22 27       	eor	r18, r18
    78a8:	37 95       	ror	r19
    78aa:	27 95       	ror	r18

				// Linear vs. Sinusoidal calculation
				if (Config.Channel[i].Throttle_curve == LINEAR)
    78ac:	f4 01       	movw	r30, r8
    78ae:	80 81       	ld	r24, Z
    78b0:	81 11       	cpse	r24, r1
    78b2:	08 c0       	rjmp	.+16     	; 0x78c4 <ProcessMixer+0x896>
				{
					// Multiply [transition] steps (0 to 100)
					temp3 = temp2 + (Step1 * transition);
    78b4:	60 9f       	mul	r22, r16
    78b6:	c0 01       	movw	r24, r0
    78b8:	61 9f       	mul	r22, r17
    78ba:	90 0d       	add	r25, r0
    78bc:	70 9f       	mul	r23, r16
    78be:	90 0d       	add	r25, r0
    78c0:	11 24       	eor	r1, r1
    78c2:	20 c0       	rjmp	.+64     	; 0x7904 <ProcessMixer+0x8d6>
				}

				// SINE
				else if (Config.Channel[i].Throttle_curve == SINE)
    78c4:	81 30       	cpi	r24, 0x01	; 1
    78c6:	31 f4       	brne	.+12     	; 0x78d4 <ProcessMixer+0x8a6>
				{
					// Choose between SINE and COSINE
					// If P2 less than P1, COSINE (reverse SINE) is the one we want
					if (Step1 < 0)
    78c8:	77 ff       	sbrs	r23, 7
    78ca:	02 c0       	rjmp	.+4      	; 0x78d0 <ProcessMixer+0x8a2>
					{ 
						// Multiply SIN[100 - transition] steps (0 to 100)
						temp3 = 100 - (int8_t)pgm_read_byte(&SIN[100 - (int8_t)transition]);
    78cc:	f2 01       	movw	r30, r4
    78ce:	06 c0       	rjmp	.+12     	; 0x78dc <ProcessMixer+0x8ae>
					}
					// If P2 greater than P1, SINE is the one we want
					else
					{
						// Multiply SIN[transition] steps (0 to 100)
						temp3 = (int8_t)pgm_read_byte(&SIN[(int8_t)transition]);
    78d0:	f1 01       	movw	r30, r2
    78d2:	0d c0       	rjmp	.+26     	; 0x78ee <ProcessMixer+0x8c0>
				// SQRT SINE
				else
				{
					// Choose between SQRT SINE and SQRT COSINE
					// If P2 less than P1, COSINE (reverse SINE) is the one we want
					if (Step1 < 0)
    78d4:	77 ff       	sbrs	r23, 7
    78d6:	09 c0       	rjmp	.+18     	; 0x78ea <ProcessMixer+0x8bc>
					{ 
						// Multiply SQRTSIN[100 - transition] steps (0 to 100)
						temp3 = 100 - (int8_t)pgm_read_byte(&SQRTSIN[100 - (int8_t)transition]);
    78d8:	ef 8d       	ldd	r30, Y+31	; 0x1f
    78da:	f8 a1       	ldd	r31, Y+32	; 0x20
    78dc:	84 91       	lpm	r24, Z
    78de:	a5 01       	movw	r20, r10
    78e0:	48 1b       	sub	r20, r24
    78e2:	51 09       	sbc	r21, r1
    78e4:	87 fd       	sbrc	r24, 7
    78e6:	53 95       	inc	r21
    78e8:	06 c0       	rjmp	.+12     	; 0x78f6 <ProcessMixer+0x8c8>
					}
					// If P2 greater than P1, SINE is the one we want
					else
					{
						// Multiply SQRTSIN[transition] steps (0 to 100)
						temp3 = (int8_t)pgm_read_byte(&SQRTSIN[(int8_t)transition]);
    78ea:	ed 8d       	ldd	r30, Y+29	; 0x1d
    78ec:	fe 8d       	ldd	r31, Y+30	; 0x1e
    78ee:	44 91       	lpm	r20, Z
    78f0:	55 27       	eor	r21, r21
    78f2:	47 fd       	sbrc	r20, 7
    78f4:	50 95       	com	r21
					}

					// Get SINE% (temp2) of difference in volumes (Step1)
					// Step1 is already in 100ths of the difference * 128
					// temp1 is the start volume * 128
					temp3 = temp2 + (Step1 * temp3);
    78f6:	64 9f       	mul	r22, r20
    78f8:	c0 01       	movw	r24, r0
    78fa:	65 9f       	mul	r22, r21
    78fc:	90 0d       	add	r25, r0
    78fe:	74 9f       	mul	r23, r20
    7900:	90 0d       	add	r25, r0
    7902:	11 24       	eor	r1, r1
    7904:	82 0f       	add	r24, r18
    7906:	93 1f       	adc	r25, r19
				}

				// Round, then rescale to normal value
				temp3 = temp3 + 64;
    7908:	bc 01       	movw	r22, r24
    790a:	60 5c       	subi	r22, 0xC0	; 192
    790c:	7f 4f       	sbci	r23, 0xFF	; 255
				temp3 = temp3 >> 7;
    790e:	66 0f       	add	r22, r22
    7910:	67 2f       	mov	r22, r23
    7912:	66 1f       	adc	r22, r22
    7914:	77 0b       	sbc	r23, r23
    7916:	01 c0       	rjmp	.+2      	; 0x791a <ProcessMixer+0x8ec>
			
			// No curve
			else
			{
				// Just use the value of P1 volume as there is no curve
				temp3 = Config.Channel[i].P1_throttle_volume; // Promote to 16 bits
    7918:	b9 01       	movw	r22, r18
			}

			// Calculate actual throttle value to the curve
			temp3 = scale32(MonopolarThrottle, temp3);
    791a:	80 91 21 08 	lds	r24, 0x0821
    791e:	90 91 22 08 	lds	r25, 0x0822
    7922:	0e 94 f4 37 	call	0x6fe8	; 0x6fe8 <scale32>

			// At this point, the throttle values are 0 to 2500 (+/-150%)
			// Re-scale throttle values back to neutral-centered system values (+/-1250) 
			// and set the minimum throttle point to 1.1ms.
			// A THROTTLEMIN value of 1000 will result in 2750, or 1.1ms
			temp3 = temp3 - THROTTLEMIN;
    7926:	88 5e       	subi	r24, 0xE8	; 232
    7928:	93 40       	sbci	r25, 0x03	; 3

			// Add offset to channel value
			Config.Channel[i].P1_value += temp3;
    792a:	d7 01       	movw	r26, r14
    792c:	2d 91       	ld	r18, X+
    792e:	3c 91       	ld	r19, X
    7930:	11 97       	sbiw	r26, 0x01	; 1
    7932:	28 0f       	add	r18, r24
    7934:	39 1f       	adc	r19, r25
    7936:	2d 93       	st	X+, r18
    7938:	3c 93       	st	X, r19
    793a:	08 c0       	rjmp	.+16     	; 0x794c <ProcessMixer+0x91e>
    793c:	f6 01       	movw	r30, r12
    793e:	36 97       	sbiw	r30, 0x06	; 6

		} // No throttle
		
		// No throttles, so clamp to THROTTLEMIN if flagged as a motor
		else if (Config.Channel[i].Motor_marker == MOTOR)
    7940:	80 81       	ld	r24, Z
    7942:	82 30       	cpi	r24, 0x02	; 2
    7944:	19 f4       	brne	.+6      	; 0x794c <ProcessMixer+0x91e>
		{
			Config.Channel[i].P1_value = -THROTTLEOFFSET; // 3750-1250 = 2500 = 1.0ms
    7946:	f7 01       	movw	r30, r14
    7948:	71 82       	std	Z+1, r7	; 0x01
    794a:	60 82       	st	Z, r6
    794c:	f6 e2       	ldi	r31, 0x26	; 38
    794e:	ef 0e       	add	r14, r31
    7950:	f1 1c       	adc	r15, r1
    7952:	26 e2       	ldi	r18, 0x26	; 38
    7954:	c2 0e       	add	r12, r18
    7956:	d1 1c       	adc	r13, r1
    7958:	36 e2       	ldi	r19, 0x26	; 38
    795a:	83 0e       	add	r8, r19
    795c:	91 1c       	adc	r9, r1
	// Groovy throttle curve handling. Must be after the transition.
	// Uses the transition value, but is not part of the transition
	// mixer. Linear or Sine curve. Reverse Sine done automatically
	//************************************************************ 

	for (i = 0; i < MIX_OUTPUTS; i++)
    795e:	4b e6       	ldi	r20, 0x6B	; 107
    7960:	e4 16       	cp	r14, r20
    7962:	47 e0       	ldi	r20, 0x07	; 7
    7964:	f4 06       	cpc	r15, r20
    7966:	09 f0       	breq	.+2      	; 0x796a <ProcessMixer+0x93c>
    7968:	7e cf       	rjmp	.-260    	; 0x7866 <ProcessMixer+0x838>
    796a:	e3 e4       	ldi	r30, 0x43	; 67
    796c:	f6 e0       	ldi	r31, 0x06	; 6
    796e:	2b e3       	ldi	r18, 0x3B	; 59
    7970:	36 e0       	ldi	r19, 0x06	; 6
			// Work out distance to cover over stage 2 (P1.n to P2)
			temp2 = Config.Channel[i].P2_offset - Config.Channel[i].P1n_offset;
			temp2 = temp2 << 7;

			// Divide distance into steps
			temp1 = (100 - Config.Channel[i].P1n_position); 
    7972:	94 e6       	ldi	r25, 0x64	; 100
    7974:	69 2e       	mov	r6, r25
    7976:	71 2c       	mov	r7, r1
    7978:	df 01       	movw	r26, r30
    797a:	13 97       	sbiw	r26, 0x03	; 3
	//************************************************************ 

	for (i = 0; i < MIX_OUTPUTS; i++)
	{
		// Simplify if all are the same
		if (!((Config.Channel[i].P1_offset == Config.Channel[i].P1n_offset) &&
    797c:	cc 90       	ld	r12, X
    797e:	12 96       	adiw	r26, 0x02	; 2
    7980:	ac 90       	ld	r10, X
    7982:	50 80       	ld	r5, Z
    7984:	ca 10       	cpse	r12, r10
    7986:	03 c0       	rjmp	.+6      	; 0x798e <ProcessMixer+0x960>
    7988:	5c 14       	cp	r5, r12
    798a:	09 f4       	brne	.+2      	; 0x798e <ProcessMixer+0x960>
    798c:	53 c0       	rjmp	.+166    	; 0x7a34 <ProcessMixer+0xa06>
		 	 (Config.Channel[i].P2_offset == Config.Channel[i].P1n_offset)))
		{
			// Work out distance to cover over stage 1 (P1 to P1.n)
			temp1 = Config.Channel[i].P1n_offset - Config.Channel[i].P1_offset;
    798e:	bb 24       	eor	r11, r11
    7990:	a7 fc       	sbrc	r10, 7
    7992:	b0 94       	com	r11
    7994:	dd 24       	eor	r13, r13
    7996:	c7 fc       	sbrc	r12, 7
    7998:	d0 94       	com	r13
    799a:	c5 01       	movw	r24, r10
    799c:	8c 19       	sub	r24, r12
    799e:	9d 09       	sbc	r25, r13
    79a0:	df 01       	movw	r26, r30
    79a2:	12 97       	sbiw	r26, 0x02	; 2
			temp1 = temp1 << 7; // Multiply by 128 so divide gives reasonable step values

			// Divide distance into steps
			temp2 = Config.Channel[i].P1n_position; 
    79a4:	ec 90       	ld	r14, X
    79a6:	ff 24       	eor	r15, r15
    79a8:	e7 fc       	sbrc	r14, 7
    79aa:	f0 94       	com	r15
		if (!((Config.Channel[i].P1_offset == Config.Channel[i].P1n_offset) &&
		 	 (Config.Channel[i].P2_offset == Config.Channel[i].P1n_offset)))
		{
			// Work out distance to cover over stage 1 (P1 to P1.n)
			temp1 = Config.Channel[i].P1n_offset - Config.Channel[i].P1_offset;
			temp1 = temp1 << 7; // Multiply by 128 so divide gives reasonable step values
    79ac:	96 95       	lsr	r25
    79ae:	98 2f       	mov	r25, r24
    79b0:	88 27       	eor	r24, r24
    79b2:	97 95       	ror	r25
    79b4:	87 95       	ror	r24

			// Divide distance into steps
			temp2 = Config.Channel[i].P1n_position; 
			Step1 = ((temp1 + (temp2 >> 1)) / temp2) ; // Divide and round result
    79b6:	a7 01       	movw	r20, r14
    79b8:	55 95       	asr	r21
    79ba:	47 95       	ror	r20
    79bc:	84 0f       	add	r24, r20
    79be:	95 1f       	adc	r25, r21
    79c0:	b7 01       	movw	r22, r14
    79c2:	0e 94 5b 48 	call	0x90b6	; 0x90b6 <__divmodhi4>
    79c6:	4b 01       	movw	r8, r22
		
			// Work out distance to cover over stage 2 (P1.n to P2)
			temp2 = Config.Channel[i].P2_offset - Config.Channel[i].P1n_offset;
    79c8:	85 2d       	mov	r24, r5
    79ca:	99 27       	eor	r25, r25
    79cc:	87 fd       	sbrc	r24, 7
    79ce:	90 95       	com	r25
    79d0:	8a 19       	sub	r24, r10
    79d2:	9b 09       	sbc	r25, r11
			temp2 = temp2 << 7;

			// Divide distance into steps
			temp1 = (100 - Config.Channel[i].P1n_position); 
    79d4:	b3 01       	movw	r22, r6
    79d6:	6e 19       	sub	r22, r14
    79d8:	7f 09       	sbc	r23, r15
			temp2 = Config.Channel[i].P1n_position; 
			Step1 = ((temp1 + (temp2 >> 1)) / temp2) ; // Divide and round result
		
			// Work out distance to cover over stage 2 (P1.n to P2)
			temp2 = Config.Channel[i].P2_offset - Config.Channel[i].P1n_offset;
			temp2 = temp2 << 7;
    79da:	96 95       	lsr	r25
    79dc:	98 2f       	mov	r25, r24
    79de:	88 27       	eor	r24, r24
    79e0:	97 95       	ror	r25
    79e2:	87 95       	ror	r24

			// Divide distance into steps
			temp1 = (100 - Config.Channel[i].P1n_position); 
			Step2 = ((temp2 + (temp1 >> 1)) / temp1) ; // Divide and round result	
    79e4:	ab 01       	movw	r20, r22
    79e6:	55 95       	asr	r21
    79e8:	47 95       	ror	r20
    79ea:	84 0f       	add	r24, r20
    79ec:	95 1f       	adc	r25, r21
    79ee:	0e 94 5b 48 	call	0x90b6	; 0x90b6 <__divmodhi4>

			// Set start (P1) point
			temp3 = Config.Channel[i].P1_offset; // Promote to 16bits
			temp3 = temp3 << 7;
    79f2:	d6 94       	lsr	r13
    79f4:	dc 2c       	mov	r13, r12
    79f6:	cc 24       	eor	r12, r12
    79f8:	d7 94       	ror	r13
    79fa:	c7 94       	ror	r12

			// Count up transition steps of the appropriate step size
			for (j = 0; j < transition; j++)
    79fc:	40 e0       	ldi	r20, 0x00	; 0
    79fe:	84 2f       	mov	r24, r20
    7a00:	90 e0       	ldi	r25, 0x00	; 0
    7a02:	80 17       	cp	r24, r16
    7a04:	91 07       	cpc	r25, r17
    7a06:	54 f4       	brge	.+20     	; 0x7a1c <ProcessMixer+0x9ee>
			{
				// If in stage 1 use Step1 size
				if (j < Config.Channel[i].P1n_position)
    7a08:	8e 15       	cp	r24, r14
    7a0a:	9f 05       	cpc	r25, r15
    7a0c:	1c f4       	brge	.+6      	; 0x7a14 <ProcessMixer+0x9e6>
				{
					temp3 += Step1;
    7a0e:	c8 0c       	add	r12, r8
    7a10:	d9 1c       	adc	r13, r9
    7a12:	02 c0       	rjmp	.+4      	; 0x7a18 <ProcessMixer+0x9ea>
				}
				// If in stage 2 use Step2 size
				else
				{
					temp3 += Step2;
    7a14:	c6 0e       	add	r12, r22
    7a16:	d7 1e       	adc	r13, r23
			// Set start (P1) point
			temp3 = Config.Channel[i].P1_offset; // Promote to 16bits
			temp3 = temp3 << 7;

			// Count up transition steps of the appropriate step size
			for (j = 0; j < transition; j++)
    7a18:	4f 5f       	subi	r20, 0xFF	; 255
    7a1a:	f1 cf       	rjmp	.-30     	; 0x79fe <ProcessMixer+0x9d0>
					temp3 += Step2;
				}
			}

			// Reformat into a system-compatible value
			itemp8 = (int8_t)((temp3 + 64) >> 7);							// Round then divide by 128
    7a1c:	c6 01       	movw	r24, r12
    7a1e:	80 5c       	subi	r24, 0xC0	; 192
    7a20:	9f 4f       	sbci	r25, 0xFF	; 255
    7a22:	88 0f       	add	r24, r24
    7a24:	89 2f       	mov	r24, r25
    7a26:	88 1f       	adc	r24, r24
    7a28:	99 0b       	sbc	r25, r25
int16_t scale_percent_nooffset(int8_t value)
{
	int16_t temp16_1, temp16_2;

	temp16_1 = value; // Promote
	temp16_2 = (temp16_1 * (int16_t)10);
    7a2a:	5a e0       	ldi	r21, 0x0A	; 10
    7a2c:	85 02       	muls	r24, r21
    7a2e:	60 01       	movw	r12, r0
    7a30:	11 24       	eor	r1, r1
				}
			}

			// Reformat into a system-compatible value
			itemp8 = (int8_t)((temp3 + 64) >> 7);							// Round then divide by 128
			P1_solution = scale_percent_nooffset(itemp8);	
    7a32:	05 c0       	rjmp	.+10     	; 0x7a3e <ProcessMixer+0xa10>
int16_t scale_percent_nooffset(int8_t value)
{
	int16_t temp16_1, temp16_2;

	temp16_1 = value; // Promote
	temp16_2 = (temp16_1 * (int16_t)10);
    7a34:	85 2d       	mov	r24, r5
    7a36:	9a e0       	ldi	r25, 0x0A	; 10
    7a38:	89 02       	muls	r24, r25
    7a3a:	60 01       	movw	r12, r0
    7a3c:	11 24       	eor	r1, r1
		{
			P1_solution = scale_percent_nooffset(Config.Channel[i].P1_offset);
		}

		// Add offset to channel value
		Config.Channel[i].P1_value += P1_solution;
    7a3e:	d9 01       	movw	r26, r18
    7a40:	4d 91       	ld	r20, X+
    7a42:	5c 91       	ld	r21, X
    7a44:	11 97       	sbiw	r26, 0x01	; 1
    7a46:	4c 0d       	add	r20, r12
    7a48:	5d 1d       	adc	r21, r13
    7a4a:	4d 93       	st	X+, r20
    7a4c:	5c 93       	st	X, r21
    7a4e:	2a 5d       	subi	r18, 0xDA	; 218
    7a50:	3f 4f       	sbci	r19, 0xFF	; 255
    7a52:	b6 96       	adiw	r30, 0x26	; 38
	//************************************************************
	// Per-channel 3-point offset needs to be after the transition  
	// loop as it is non-linear, unlike the transition.
	//************************************************************ 

	for (i = 0; i < MIX_OUTPUTS; i++)
    7a54:	b7 e0       	ldi	r27, 0x07	; 7
    7a56:	e3 37       	cpi	r30, 0x73	; 115
    7a58:	fb 07       	cpc	r31, r27
    7a5a:	09 f0       	breq	.+2      	; 0x7a5e <ProcessMixer+0xa30>
    7a5c:	8d cf       	rjmp	.-230    	; 0x7978 <ProcessMixer+0x94a>

		// Add offset to channel value
		Config.Channel[i].P1_value += P1_solution;
	}

} // ProcessMixer()
    7a5e:	e2 96       	adiw	r28, 0x32	; 50
    7a60:	0f b6       	in	r0, 0x3f	; 63
    7a62:	f8 94       	cli
    7a64:	de bf       	out	0x3e, r29	; 62
    7a66:	0f be       	out	0x3f, r0	; 63
    7a68:	cd bf       	out	0x3d, r28	; 61
    7a6a:	df 91       	pop	r29
    7a6c:	cf 91       	pop	r28
    7a6e:	1f 91       	pop	r17
    7a70:	0f 91       	pop	r16
    7a72:	ff 90       	pop	r15
    7a74:	ef 90       	pop	r14
    7a76:	df 90       	pop	r13
    7a78:	cf 90       	pop	r12
    7a7a:	bf 90       	pop	r11
    7a7c:	af 90       	pop	r10
    7a7e:	9f 90       	pop	r9
    7a80:	8f 90       	pop	r8
    7a82:	7f 90       	pop	r7
    7a84:	6f 90       	pop	r6
    7a86:	5f 90       	pop	r5
    7a88:	4f 90       	pop	r4
    7a8a:	3f 90       	pop	r3
    7a8c:	2f 90       	pop	r2
    7a8e:	08 95       	ret

00007a90 <scale_percent>:
int16_t scale_percent(int8_t value)
{
	int16_t temp16_1, temp16_2;

	temp16_1 = value; // Promote
	temp16_2 = ((temp16_1 * (int16_t)10) + 3750);
    7a90:	2a e0       	ldi	r18, 0x0A	; 10
    7a92:	82 02       	muls	r24, r18
    7a94:	c0 01       	movw	r24, r0
    7a96:	11 24       	eor	r1, r1

	return temp16_2;
}
    7a98:	8a 55       	subi	r24, 0x5A	; 90
    7a9a:	91 4f       	sbci	r25, 0xF1	; 241
    7a9c:	08 95       	ret

00007a9e <mugui_text_sizestring>:
	\return void
	\date 	12.08.2009
*/
/************************************************************************/
void mugui_text_sizestring(mugui_char_t *s, const unsigned char* font, mugui_size16_t *size)
{
    7a9e:	df 92       	push	r13
    7aa0:	ef 92       	push	r14
    7aa2:	ff 92       	push	r15
    7aa4:	0f 93       	push	r16
    7aa6:	1f 93       	push	r17
    7aa8:	cf 93       	push	r28
    7aaa:	df 93       	push	r29
	mugui_uint8_t  indexhighbyte = 0; 		//high byte of the bitmap address in the array
	mugui_uint32_t indexaddress = 0;		//bitmap address in the array (derived from low and high byte)

	/* read header of the font          */
	/* pgm_read_byte is ATMega specific */
	length = strlen(s);
    7aac:	dc 01       	movw	r26, r24
    7aae:	0d 90       	ld	r0, X+
    7ab0:	00 20       	and	r0, r0
    7ab2:	e9 f7       	brne	.-6      	; 0x7aae <mugui_text_sizestring+0x10>
    7ab4:	11 97       	sbiw	r26, 0x01	; 1
    7ab6:	a8 1b       	sub	r26, r24
    7ab8:	b9 0b       	sbc	r27, r25
	height = pgm_read_byte(&font[4]);
    7aba:	fb 01       	movw	r30, r22
    7abc:	34 96       	adiw	r30, 0x04	; 4
    7abe:	e4 90       	lpm	r14, Z
    7ac0:	f1 2c       	mov	r15, r1

	startcharacter = pgm_read_byte(&font[2]);
    7ac2:	32 97       	sbiw	r30, 0x02	; 2
    7ac4:	d4 90       	lpm	r13, Z
    7ac6:	ec 01       	movw	r28, r24
    7ac8:	a8 0f       	add	r26, r24
    7aca:	b9 1f       	adc	r27, r25
	mugui_uint8_t  distance = 1;			//distance between characters
	mugui_uint16_t length = 0;				//temporary length of string
	mugui_uint16_t i = 0;					//counter variable
	mugui_uint16_t startcharacter = 0; 	    //startcharacter of the font
	mugui_uint16_t height = 0;				//height of the bitmap
	mugui_uint16_t width = 0; 				//width of the bitmap
    7acc:	80 e0       	ldi	r24, 0x00	; 0
    7ace:	90 e0       	ldi	r25, 0x00	; 0
	/* pgm_read_byte is ATMega specific */
	length = strlen(s);
	height = pgm_read_byte(&font[4]);

	startcharacter = pgm_read_byte(&font[2]);
	for(i=0;i<length;i++) //every character in prop fonts has its own width
    7ad0:	ca 17       	cp	r28, r26
    7ad2:	db 07       	cpc	r29, r27
    7ad4:	29 f1       	breq	.+74     	; 0x7b20 <mugui_text_sizestring+0x82>
	{
		index = s[i] - startcharacter;
    7ad6:	29 91       	ld	r18, Y+
    7ad8:	2d 19       	sub	r18, r13
		indexhighbyte = pgm_read_byte(&font[index*2 + 5]);
    7ada:	30 e0       	ldi	r19, 0x00	; 0
    7adc:	22 0f       	add	r18, r18
    7ade:	33 1f       	adc	r19, r19
    7ae0:	f9 01       	movw	r30, r18
    7ae2:	35 96       	adiw	r30, 0x05	; 5
    7ae4:	e6 0f       	add	r30, r22
    7ae6:	f7 1f       	adc	r31, r23
    7ae8:	04 91       	lpm	r16, Z
		indexlowbyte = pgm_read_byte(&font[index*2 + 6]);
    7aea:	f9 01       	movw	r30, r18
    7aec:	36 96       	adiw	r30, 0x06	; 6
    7aee:	e6 0f       	add	r30, r22
    7af0:	f7 1f       	adc	r31, r23
    7af2:	e4 91       	lpm	r30, Z
		indexaddress = (mugui_int64_t)indexhighbyte;
    7af4:	10 e0       	ldi	r17, 0x00	; 0
    7af6:	20 e0       	ldi	r18, 0x00	; 0
    7af8:	30 e0       	ldi	r19, 0x00	; 0
		indexaddress = indexaddress << 8;
    7afa:	32 2f       	mov	r19, r18
    7afc:	21 2f       	mov	r18, r17
    7afe:	10 2f       	mov	r17, r16
    7b00:	00 27       	eor	r16, r16
		indexaddress += indexlowbyte;
    7b02:	0e 0f       	add	r16, r30
    7b04:	11 1d       	adc	r17, r1
    7b06:	21 1d       	adc	r18, r1
    7b08:	31 1d       	adc	r19, r1
		width += pgm_read_byte(&font[indexaddress]) + distance;
    7b0a:	fb 01       	movw	r30, r22
    7b0c:	e0 0f       	add	r30, r16
    7b0e:	f1 1f       	adc	r31, r17
    7b10:	04 91       	lpm	r16, Z
    7b12:	20 2f       	mov	r18, r16
    7b14:	30 e0       	ldi	r19, 0x00	; 0
    7b16:	2f 5f       	subi	r18, 0xFF	; 255
    7b18:	3f 4f       	sbci	r19, 0xFF	; 255
    7b1a:	82 0f       	add	r24, r18
    7b1c:	93 1f       	adc	r25, r19
    7b1e:	d8 cf       	rjmp	.-80     	; 0x7ad0 <mugui_text_sizestring+0x32>
	}

	/* prepare return value */
	size->x = width;
    7b20:	fa 01       	movw	r30, r20
    7b22:	91 83       	std	Z+1, r25	; 0x01
    7b24:	80 83       	st	Z, r24
	size->y = height;
    7b26:	f3 82       	std	Z+3, r15	; 0x03
    7b28:	e2 82       	std	Z+2, r14	; 0x02
}
    7b2a:	df 91       	pop	r29
    7b2c:	cf 91       	pop	r28
    7b2e:	1f 91       	pop	r17
    7b30:	0f 91       	pop	r16
    7b32:	ff 90       	pop	r15
    7b34:	ef 90       	pop	r14
    7b36:	df 90       	pop	r13
    7b38:	08 95       	ret

00007b3a <pgm_mugui_scopy>:
	\date 	30.07.2012
	\Created by D. Thompson
*/
/************************************************************************/
void pgm_mugui_scopy(const char *s)
{
    7b3a:	ab e5       	ldi	r26, 0x5B	; 91
    7b3c:	b5 e0       	ldi	r27, 0x05	; 5
	int i = 0;
    7b3e:	20 e0       	ldi	r18, 0x00	; 0
    7b40:	30 e0       	ldi	r19, 0x00	; 0
    7b42:	fc 01       	movw	r30, r24
    7b44:	e2 0f       	add	r30, r18
    7b46:	f3 1f       	adc	r31, r19

	// Copy string until terminator but don't over-write buffer
	while((pgm_read_byte(s) != 0x00) && (i < (PBUFFER_SIZE - 1)))
    7b48:	44 91       	lpm	r20, Z
    7b4a:	44 23       	and	r20, r20
    7b4c:	41 f0       	breq	.+16     	; 0x7b5e <pgm_mugui_scopy+0x24>
    7b4e:	2f 30       	cpi	r18, 0x0F	; 15
    7b50:	31 05       	cpc	r19, r1
    7b52:	29 f0       	breq	.+10     	; 0x7b5e <pgm_mugui_scopy+0x24>
	{
		pBuffer[i] = pgm_read_byte(s++);
    7b54:	e4 91       	lpm	r30, Z
    7b56:	ed 93       	st	X+, r30
		i++;
    7b58:	2f 5f       	subi	r18, 0xFF	; 255
    7b5a:	3f 4f       	sbci	r19, 0xFF	; 255
    7b5c:	f2 cf       	rjmp	.-28     	; 0x7b42 <pgm_mugui_scopy+0x8>
	}
	
	// Add the terminator regardless of the amount copied
	pBuffer[i] = 0x00;
    7b5e:	f9 01       	movw	r30, r18
    7b60:	e5 5a       	subi	r30, 0xA5	; 165
    7b62:	fa 4f       	sbci	r31, 0xFA	; 250
    7b64:	10 82       	st	Z, r1
    7b66:	08 95       	ret

00007b68 <mugui_lcd_putc>:
	\date 	13.11.2009
	\Modified by D. Thompson 14/08/2012 - Now hard-coded for proportional, type 2 (verticalCeiling)
*/
/************************************************************************/
mugui_uint16_t mugui_lcd_putc(mugui_char_t c, const unsigned char* font,mugui_uint16_t x, mugui_uint16_t y)
{
    7b68:	2f 92       	push	r2
    7b6a:	3f 92       	push	r3
    7b6c:	4f 92       	push	r4
    7b6e:	5f 92       	push	r5
    7b70:	6f 92       	push	r6
    7b72:	7f 92       	push	r7
    7b74:	8f 92       	push	r8
    7b76:	9f 92       	push	r9
    7b78:	af 92       	push	r10
    7b7a:	bf 92       	push	r11
    7b7c:	cf 92       	push	r12
    7b7e:	df 92       	push	r13
    7b80:	ef 92       	push	r14
    7b82:	ff 92       	push	r15
    7b84:	0f 93       	push	r16
    7b86:	1f 93       	push	r17
    7b88:	cf 93       	push	r28
    7b8a:	df 93       	push	r29
    7b8c:	cd b7       	in	r28, 0x3d	; 61
    7b8e:	de b7       	in	r29, 0x3e	; 62
    7b90:	29 97       	sbiw	r28, 0x09	; 9
    7b92:	0f b6       	in	r0, 0x3f	; 63
    7b94:	f8 94       	cli
    7b96:	de bf       	out	0x3e, r29	; 62
    7b98:	0f be       	out	0x3f, r0	; 63
    7b9a:	cd bf       	out	0x3d, r28	; 61
    7b9c:	4c 83       	std	Y+4, r20	; 0x04
    7b9e:	2d 83       	std	Y+5, r18	; 0x05
	mugui_uint8_t  tc= 0;	 				//temorary count
	mugui_uint8_t  bytes= 0;  				//bytes per line or row

	/* Read header of the font          */
	/* pgm_read_byte is ATMega specific */
	startcharacter = pgm_read_byte(&font[2]);
    7ba0:	fb 01       	movw	r30, r22
    7ba2:	32 96       	adiw	r30, 0x02	; 2
    7ba4:	94 91       	lpm	r25, Z
	height = pgm_read_byte(&font[4]);
    7ba6:	32 96       	adiw	r30, 0x02	; 2
    7ba8:	e4 91       	lpm	r30, Z
    7baa:	2e 2e       	mov	r2, r30
    7bac:	31 2c       	mov	r3, r1

	/* Read the rest of the header */
	index = c - startcharacter;
    7bae:	89 1b       	sub	r24, r25
	indexhighbyte = pgm_read_byte(&font[index*2 + 5]);
    7bb0:	90 e0       	ldi	r25, 0x00	; 0
    7bb2:	88 0f       	add	r24, r24
    7bb4:	99 1f       	adc	r25, r25
    7bb6:	fc 01       	movw	r30, r24
    7bb8:	35 96       	adiw	r30, 0x05	; 5
    7bba:	e6 0f       	add	r30, r22
    7bbc:	f7 1f       	adc	r31, r23
    7bbe:	64 90       	lpm	r6, Z
	indexlowbyte = pgm_read_byte(&font[index*2 + 6]);
    7bc0:	fc 01       	movw	r30, r24
    7bc2:	36 96       	adiw	r30, 0x06	; 6
    7bc4:	e6 0f       	add	r30, r22
    7bc6:	f7 1f       	adc	r31, r23
    7bc8:	84 91       	lpm	r24, Z
	indexaddress = (mugui_int64_t)indexhighbyte;
    7bca:	06 2d       	mov	r16, r6
    7bcc:	10 e0       	ldi	r17, 0x00	; 0
    7bce:	20 e0       	ldi	r18, 0x00	; 0
    7bd0:	30 e0       	ldi	r19, 0x00	; 0
	indexaddress = indexaddress << 8;
    7bd2:	32 2f       	mov	r19, r18
    7bd4:	21 2f       	mov	r18, r17
    7bd6:	10 2f       	mov	r17, r16
    7bd8:	00 27       	eor	r16, r16
	indexaddress += indexlowbyte;
    7bda:	08 0f       	add	r16, r24
    7bdc:	11 1d       	adc	r17, r1
    7bde:	21 1d       	adc	r18, r1
    7be0:	31 1d       	adc	r19, r1
	width = pgm_read_byte(&font[indexaddress]);
    7be2:	c8 01       	movw	r24, r16
    7be4:	fb 01       	movw	r30, r22
    7be6:	e0 0f       	add	r30, r16
    7be8:	f1 1f       	adc	r31, r17
    7bea:	64 90       	lpm	r6, Z
    7bec:	71 2c       	mov	r7, r1

	/* Determine the number of bytes for given width */ 
	bytes = ((height-1)>>3)+1;
    7bee:	21 01       	movw	r4, r2
    7bf0:	21 e0       	ldi	r18, 0x01	; 1
    7bf2:	42 1a       	sub	r4, r18
    7bf4:	51 08       	sbc	r5, r1
    7bf6:	13 e0       	ldi	r17, 0x03	; 3
    7bf8:	56 94       	lsr	r5
    7bfa:	47 94       	ror	r4
    7bfc:	1a 95       	dec	r17
    7bfe:	e1 f7       	brne	.-8      	; 0x7bf8 <mugui_lcd_putc+0x90>
    7c00:	43 94       	inc	r4
    7c02:	a4 2d       	mov	r26, r4
    7c04:	b0 e0       	ldi	r27, 0x00	; 0
    7c06:	ba 83       	std	Y+2, r27	; 0x02
    7c08:	a9 83       	std	Y+1, r26	; 0x01
	/* For every column */
	for(tx= 0; tx < width; tx++) //for every row
    7c0a:	a1 2c       	mov	r10, r1
    7c0c:	b1 2c       	mov	r11, r1
    7c0e:	00 e0       	ldi	r16, 0x00	; 0
    7c10:	10 e0       	ldi	r17, 0x00	; 0
    7c12:	4b 01       	movw	r8, r22
    7c14:	bf ef       	ldi	r27, 0xFF	; 255
    7c16:	8b 1a       	sub	r8, r27
    7c18:	9b 0a       	sbc	r9, r27
    7c1a:	88 0e       	add	r8, r24
    7c1c:	99 1e       	adc	r9, r25
    7c1e:	06 15       	cp	r16, r6
    7c20:	17 05       	cpc	r17, r7
    7c22:	08 f0       	brcs	.+2      	; 0x7c26 <mugui_lcd_putc+0xbe>
    7c24:	43 c0       	rjmp	.+134    	; 0x7cac <mugui_lcd_putc+0x144>
    7c26:	c1 2c       	mov	r12, r1
    7c28:	d1 2c       	mov	r13, r1
    7c2a:	e1 2c       	mov	r14, r1
    7c2c:	f1 2c       	mov	r15, r1
    7c2e:	94 01       	movw	r18, r8
    7c30:	2a 0d       	add	r18, r10
    7c32:	3b 1d       	adc	r19, r11
    7c34:	3f 83       	std	Y+7, r19	; 0x07
    7c36:	2e 83       	std	Y+6, r18	; 0x06
    7c38:	5c 80       	ldd	r5, Y+4	; 0x04
    7c3a:	50 0e       	add	r5, r16
	{
		ty = 0;
		/* For every byte */
		for(tb = 0; tb < bytes; tb ++)
    7c3c:	c4 14       	cp	r12, r4
    7c3e:	78 f5       	brcc	.+94     	; 0x7c9e <mugui_lcd_putc+0x136>
    7c40:	ee 81       	ldd	r30, Y+6	; 0x06
    7c42:	ff 81       	ldd	r31, Y+7	; 0x07
    7c44:	ec 0d       	add	r30, r12
    7c46:	fd 1d       	adc	r31, r13
		{
			/* Read bytes from program memory - ATMega specific */
			data = pgm_read_byte(&font[indexaddress + 1 + bytes*tx + tb]);
    7c48:	34 91       	lpm	r19, Z
    7c4a:	3b 83       	std	Y+3, r19	; 0x03
    7c4c:	19 86       	std	Y+9, r1	; 0x09
    7c4e:	18 86       	std	Y+8, r1	; 0x08
			/* For every bit within the height */
			for(tc = 0;  ( (tc < 8) && (ty < height) ); tc ++)
    7c50:	e2 14       	cp	r14, r2
    7c52:	f3 04       	cpc	r15, r3
    7c54:	00 f5       	brcc	.+64     	; 0x7c96 <mugui_lcd_putc+0x12e>
			{
					/* Determine the bit mask */
					mask = 1<<(tc);
    7c56:	81 e0       	ldi	r24, 0x01	; 1
    7c58:	90 e0       	ldi	r25, 0x00	; 0
    7c5a:	08 84       	ldd	r0, Y+8	; 0x08
    7c5c:	02 c0       	rjmp	.+4      	; 0x7c62 <mugui_lcd_putc+0xfa>
    7c5e:	88 0f       	add	r24, r24
    7c60:	99 1f       	adc	r25, r25
    7c62:	0a 94       	dec	r0
    7c64:	e2 f7       	brpl	.-8      	; 0x7c5e <mugui_lcd_putc+0xf6>
					bit = data & mask;
    7c66:	3b 81       	ldd	r19, Y+3	; 0x03
    7c68:	83 23       	and	r24, r19
    7c6a:	4d 81       	ldd	r20, Y+5	; 0x05
    7c6c:	4e 0d       	add	r20, r14
					if(bit)
    7c6e:	88 23       	and	r24, r24
    7c70:	11 f0       	breq	.+4      	; 0x7c76 <mugui_lcd_putc+0x10e>
					{
						setpixel(buffer,tx+x,ty+y,1);
    7c72:	21 e0       	ldi	r18, 0x01	; 1
    7c74:	01 c0       	rjmp	.+2      	; 0x7c78 <mugui_lcd_putc+0x110>
					}
					else
					{
						setpixel(buffer,tx+x,ty+y,0);
    7c76:	20 e0       	ldi	r18, 0x00	; 0
    7c78:	65 2d       	mov	r22, r5
    7c7a:	80 e0       	ldi	r24, 0x00	; 0
    7c7c:	91 e0       	ldi	r25, 0x01	; 1
    7c7e:	0e 94 9a 20 	call	0x4134	; 0x4134 <setpixel>
					}
					ty++;
    7c82:	8f ef       	ldi	r24, 0xFF	; 255
    7c84:	e8 1a       	sub	r14, r24
    7c86:	f8 0a       	sbc	r15, r24
    7c88:	a8 85       	ldd	r26, Y+8	; 0x08
    7c8a:	b9 85       	ldd	r27, Y+9	; 0x09
    7c8c:	11 96       	adiw	r26, 0x01	; 1
    7c8e:	b9 87       	std	Y+9, r27	; 0x09
    7c90:	a8 87       	std	Y+8, r26	; 0x08
		for(tb = 0; tb < bytes; tb ++)
		{
			/* Read bytes from program memory - ATMega specific */
			data = pgm_read_byte(&font[indexaddress + 1 + bytes*tx + tb]);
			/* For every bit within the height */
			for(tc = 0;  ( (tc < 8) && (ty < height) ); tc ++)
    7c92:	18 97       	sbiw	r26, 0x08	; 8
    7c94:	e9 f6       	brne	.-70     	; 0x7c50 <mugui_lcd_putc+0xe8>
    7c96:	bf ef       	ldi	r27, 0xFF	; 255
    7c98:	cb 1a       	sub	r12, r27
    7c9a:	db 0a       	sbc	r13, r27
    7c9c:	cf cf       	rjmp	.-98     	; 0x7c3c <mugui_lcd_putc+0xd4>
	width = pgm_read_byte(&font[indexaddress]);

	/* Determine the number of bytes for given width */ 
	bytes = ((height-1)>>3)+1;
	/* For every column */
	for(tx= 0; tx < width; tx++) //for every row
    7c9e:	0f 5f       	subi	r16, 0xFF	; 255
    7ca0:	1f 4f       	sbci	r17, 0xFF	; 255
    7ca2:	e9 81       	ldd	r30, Y+1	; 0x01
    7ca4:	fa 81       	ldd	r31, Y+2	; 0x02
    7ca6:	ae 0e       	add	r10, r30
    7ca8:	bf 1e       	adc	r11, r31
    7caa:	b9 cf       	rjmp	.-142    	; 0x7c1e <mugui_lcd_putc+0xb6>
			}
		}
	}

	return width;
}
    7cac:	c3 01       	movw	r24, r6
    7cae:	29 96       	adiw	r28, 0x09	; 9
    7cb0:	0f b6       	in	r0, 0x3f	; 63
    7cb2:	f8 94       	cli
    7cb4:	de bf       	out	0x3e, r29	; 62
    7cb6:	0f be       	out	0x3f, r0	; 63
    7cb8:	cd bf       	out	0x3d, r28	; 61
    7cba:	df 91       	pop	r29
    7cbc:	cf 91       	pop	r28
    7cbe:	1f 91       	pop	r17
    7cc0:	0f 91       	pop	r16
    7cc2:	ff 90       	pop	r15
    7cc4:	ef 90       	pop	r14
    7cc6:	df 90       	pop	r13
    7cc8:	cf 90       	pop	r12
    7cca:	bf 90       	pop	r11
    7ccc:	af 90       	pop	r10
    7cce:	9f 90       	pop	r9
    7cd0:	8f 90       	pop	r8
    7cd2:	7f 90       	pop	r7
    7cd4:	6f 90       	pop	r6
    7cd6:	5f 90       	pop	r5
    7cd8:	4f 90       	pop	r4
    7cda:	3f 90       	pop	r3
    7cdc:	2f 90       	pop	r2
    7cde:	08 95       	ret

00007ce0 <pgm_mugui_lcd_puts>:
	\date 	12.08.2009
	\Modified by D. Thompson 27/07/2012
*/
/************************************************************************/
void pgm_mugui_lcd_puts(const unsigned char* s, const unsigned char* font,mugui_uint16_t x, mugui_uint16_t y)
{
    7ce0:	af 92       	push	r10
    7ce2:	bf 92       	push	r11
    7ce4:	cf 92       	push	r12
    7ce6:	df 92       	push	r13
    7ce8:	ef 92       	push	r14
    7cea:	ff 92       	push	r15
    7cec:	0f 93       	push	r16
    7cee:	1f 93       	push	r17
    7cf0:	cf 93       	push	r28
    7cf2:	df 93       	push	r29
    7cf4:	ec 01       	movw	r28, r24
    7cf6:	7b 01       	movw	r14, r22
    7cf8:	6a 01       	movw	r12, r20
    7cfa:	59 01       	movw	r10, r18
	mugui_uint8_t distance  = 1;			// Distance between characters
	mugui_uint16_t xpos     = 0;			// Relative xpos of character
    7cfc:	00 e0       	ldi	r16, 0x00	; 0
    7cfe:	10 e0       	ldi	r17, 0x00	; 0

	while(pgm_read_byte(s) != 0x00) 
    7d00:	ce 01       	movw	r24, r28
    7d02:	fe 01       	movw	r30, r28
    7d04:	24 91       	lpm	r18, Z
    7d06:	22 23       	and	r18, r18
    7d08:	71 f0       	breq	.+28     	; 0x7d26 <pgm_mugui_lcd_puts+0x46>
	{
		xpos += mugui_lcd_putc(pgm_read_byte(s++), font, x + xpos, y) + distance;
    7d0a:	21 96       	adiw	r28, 0x01	; 1
    7d0c:	fc 01       	movw	r30, r24
    7d0e:	84 91       	lpm	r24, Z
    7d10:	a8 01       	movw	r20, r16
    7d12:	4c 0d       	add	r20, r12
    7d14:	5d 1d       	adc	r21, r13
    7d16:	95 01       	movw	r18, r10
    7d18:	b7 01       	movw	r22, r14
    7d1a:	0e 94 b4 3d 	call	0x7b68	; 0x7b68 <mugui_lcd_putc>
    7d1e:	01 96       	adiw	r24, 0x01	; 1
    7d20:	08 0f       	add	r16, r24
    7d22:	19 1f       	adc	r17, r25
    7d24:	ed cf       	rjmp	.-38     	; 0x7d00 <pgm_mugui_lcd_puts+0x20>
	}
}
    7d26:	df 91       	pop	r29
    7d28:	cf 91       	pop	r28
    7d2a:	1f 91       	pop	r17
    7d2c:	0f 91       	pop	r16
    7d2e:	ff 90       	pop	r15
    7d30:	ef 90       	pop	r14
    7d32:	df 90       	pop	r13
    7d34:	cf 90       	pop	r12
    7d36:	bf 90       	pop	r11
    7d38:	af 90       	pop	r10
    7d3a:	08 95       	ret

00007d3c <mugui_lcd_puts>:
	\return void
	\date 	12.08.2009
*/
/************************************************************************/
void mugui_lcd_puts(mugui_char_t *s, const unsigned char* font,mugui_uint16_t x, mugui_uint16_t y)
{
    7d3c:	8f 92       	push	r8
    7d3e:	9f 92       	push	r9
    7d40:	af 92       	push	r10
    7d42:	bf 92       	push	r11
    7d44:	cf 92       	push	r12
    7d46:	df 92       	push	r13
    7d48:	ef 92       	push	r14
    7d4a:	ff 92       	push	r15
    7d4c:	0f 93       	push	r16
    7d4e:	1f 93       	push	r17
    7d50:	cf 93       	push	r28
    7d52:	df 93       	push	r29
    7d54:	6b 01       	movw	r12, r22
    7d56:	5a 01       	movw	r10, r20
    7d58:	49 01       	movw	r8, r18
	mugui_uint8_t distance  = 1;			//distance between characters
	mugui_uint16_t xpos     = 0;			//relativ xpos of character
	mugui_uint16_t length 	= 0;			//temporary length of string
	mugui_uint16_t i 		= 0;			//counter variable
	
	length = strlen(s);
    7d5a:	ec 01       	movw	r28, r24
    7d5c:	09 90       	ld	r0, Y+
    7d5e:	00 20       	and	r0, r0
    7d60:	e9 f7       	brne	.-6      	; 0x7d5c <mugui_lcd_puts+0x20>
    7d62:	8c 01       	movw	r16, r24
    7d64:	21 97       	sbiw	r28, 0x01	; 1
*/
/************************************************************************/
void mugui_lcd_puts(mugui_char_t *s, const unsigned char* font,mugui_uint16_t x, mugui_uint16_t y)
{
	mugui_uint8_t distance  = 1;			//distance between characters
	mugui_uint16_t xpos     = 0;			//relativ xpos of character
    7d66:	e1 2c       	mov	r14, r1
    7d68:	f1 2c       	mov	r15, r1
	mugui_uint16_t length 	= 0;			//temporary length of string
	mugui_uint16_t i 		= 0;			//counter variable
	
	length = strlen(s);
	for(i=0; i<length; i++)
    7d6a:	0c 17       	cp	r16, r28
    7d6c:	1d 07       	cpc	r17, r29
    7d6e:	71 f0       	breq	.+28     	; 0x7d8c <mugui_lcd_puts+0x50>
	{
		xpos += mugui_lcd_putc(s[i], font, x + xpos, y) + distance;
    7d70:	a7 01       	movw	r20, r14
    7d72:	4a 0d       	add	r20, r10
    7d74:	5b 1d       	adc	r21, r11
    7d76:	94 01       	movw	r18, r8
    7d78:	b6 01       	movw	r22, r12
    7d7a:	f8 01       	movw	r30, r16
    7d7c:	81 91       	ld	r24, Z+
    7d7e:	8f 01       	movw	r16, r30
    7d80:	0e 94 b4 3d 	call	0x7b68	; 0x7b68 <mugui_lcd_putc>
    7d84:	01 96       	adiw	r24, 0x01	; 1
    7d86:	e8 0e       	add	r14, r24
    7d88:	f9 1e       	adc	r15, r25
    7d8a:	ef cf       	rjmp	.-34     	; 0x7d6a <mugui_lcd_puts+0x2e>
	}
}
    7d8c:	df 91       	pop	r29
    7d8e:	cf 91       	pop	r28
    7d90:	1f 91       	pop	r17
    7d92:	0f 91       	pop	r16
    7d94:	ff 90       	pop	r15
    7d96:	ef 90       	pop	r14
    7d98:	df 90       	pop	r13
    7d9a:	cf 90       	pop	r12
    7d9c:	bf 90       	pop	r11
    7d9e:	af 90       	pop	r10
    7da0:	9f 90       	pop	r9
    7da2:	8f 90       	pop	r8
    7da4:	08 95       	ret

00007da6 <Sensor_PID>:
int32_t PID_AvgAccVert = 0;
float 	gyroSmooth[NUMBEROFAXIS];					// Filtered gyro data
	
// Run each loop to average gyro data and also accVert data
void Sensor_PID(void)
{
    7da6:	2f 92       	push	r2
    7da8:	3f 92       	push	r3
    7daa:	4f 92       	push	r4
    7dac:	5f 92       	push	r5
    7dae:	6f 92       	push	r6
    7db0:	7f 92       	push	r7
    7db2:	8f 92       	push	r8
    7db4:	9f 92       	push	r9
    7db6:	af 92       	push	r10
    7db8:	bf 92       	push	r11
    7dba:	cf 92       	push	r12
    7dbc:	df 92       	push	r13
    7dbe:	ef 92       	push	r14
    7dc0:	ff 92       	push	r15
    7dc2:	0f 93       	push	r16
    7dc4:	1f 93       	push	r17
    7dc6:	cf 93       	push	r28
    7dc8:	df 93       	push	r29
    7dca:	cd b7       	in	r28, 0x3d	; 61
    7dcc:	de b7       	in	r29, 0x3e	; 62
    7dce:	a2 97       	sbiw	r28, 0x22	; 34
    7dd0:	0f b6       	in	r0, 0x3f	; 63
    7dd2:	f8 94       	cli
    7dd4:	de bf       	out	0x3e, r29	; 62
    7dd6:	0f be       	out	0x3f, r0	; 63
    7dd8:	cd bf       	out	0x3d, r28	; 61
	float tempf = 0;
    7dda:	1d 86       	std	Y+13, r1	; 0x0d
    7ddc:	1e 86       	std	Y+14, r1	; 0x0e
    7dde:	1f 86       	std	Y+15, r1	; 0x0f
    7de0:	18 8a       	std	Y+16, r1	; 0x10
	// RIGHT roll = +ve gyro, UP pitch = +ve gyro and LEFT yaw = +ve gyro.
	// However the way we have organised stick polarity, RIGHT roll and yaw are +ve, and DOWN elevator is too.
	// When combining with the gyro signals, the sticks have to be in the opposite polarity as the gyros.
	// As described above, pitch and yaw are already opposed, but roll needs to be reversed.

	int16_t	RCinputsAxis[NUMBEROFAXIS] = {-RCinputs[AILERON], RCinputs[ELEVATOR], RCinputs[RUDDER]};
    7de2:	80 91 25 08 	lds	r24, 0x0825
    7de6:	90 91 26 08 	lds	r25, 0x0826
    7dea:	91 95       	neg	r25
    7dec:	81 95       	neg	r24
    7dee:	91 09       	sbc	r25, r1
    7df0:	98 87       	std	Y+8, r25	; 0x08
    7df2:	8f 83       	std	Y+7, r24	; 0x07
    7df4:	80 91 27 08 	lds	r24, 0x0827
    7df8:	90 91 28 08 	lds	r25, 0x0828
    7dfc:	9a 87       	std	Y+10, r25	; 0x0a
    7dfe:	89 87       	std	Y+9, r24	; 0x09
    7e00:	80 91 29 08 	lds	r24, 0x0829
    7e04:	90 91 2a 08 	lds	r25, 0x082A
    7e08:	9c 87       	std	Y+12, r25	; 0x0c
    7e0a:	8b 87       	std	Y+11, r24	; 0x0b
	
	int8_t Stick_rates[FLIGHT_MODES][NUMBEROFAXIS] =
    7e0c:	80 91 de 05 	lds	r24, 0x05DE
    7e10:	89 83       	std	Y+1, r24	; 0x01
    7e12:	80 91 e4 05 	lds	r24, 0x05E4
    7e16:	8a 83       	std	Y+2, r24	; 0x02
    7e18:	80 91 ea 05 	lds	r24, 0x05EA
    7e1c:	8b 83       	std	Y+3, r24	; 0x03
    7e1e:	80 91 f0 05 	lds	r24, 0x05F0
    7e22:	8c 83       	std	Y+4, r24	; 0x04
    7e24:	80 91 f6 05 	lds	r24, 0x05F6
    7e28:	8d 83       	std	Y+5, r24	; 0x05
    7e2a:	80 91 fc 05 	lds	r24, 0x05FC
    7e2e:	8e 83       	std	Y+6, r24	; 0x06
		{Config.FlightMode[P2].Roll_Rate, Config.FlightMode[P2].Pitch_Rate, Config.FlightMode[P2].Yaw_Rate}
	};

	// Lookup actual LPF value and promote
	// Note: Two sets of values for normal and high-speed mode
	if (Config.Servo_rate != FAST)
    7e30:	80 91 d3 05 	lds	r24, 0x05D3
    7e34:	60 91 38 06 	lds	r22, 0x0638
	{	
		//tempf = pgm_read_float(&LPF_lookup[Config.Gyro_LPF]); 
		memcpy_P(&tempf, &LPF_lookup[Config.Gyro_LPF], sizeof(float)); 
    7e38:	77 27       	eor	r23, r23
    7e3a:	67 fd       	sbrc	r22, 7
    7e3c:	70 95       	com	r23
		{Config.FlightMode[P2].Roll_Rate, Config.FlightMode[P2].Pitch_Rate, Config.FlightMode[P2].Yaw_Rate}
	};

	// Lookup actual LPF value and promote
	// Note: Two sets of values for normal and high-speed mode
	if (Config.Servo_rate != FAST)
    7e3e:	82 30       	cpi	r24, 0x02	; 2
    7e40:	19 f0       	breq	.+6      	; 0x7e48 <Sensor_PID+0xa2>
	{	
		//tempf = pgm_read_float(&LPF_lookup[Config.Gyro_LPF]); 
		memcpy_P(&tempf, &LPF_lookup[Config.Gyro_LPF], sizeof(float)); 
    7e42:	60 5f       	subi	r22, 0xF0	; 240
    7e44:	77 4e       	sbci	r23, 0xE7	; 231
    7e46:	02 c0       	rjmp	.+4      	; 0x7e4c <Sensor_PID+0xa6>
	}
	else
	{
		//tempf = pgm_read_float(&LPF_lookup_HS[Config.Gyro_LPF]);
		memcpy_P(&tempf, &LPF_lookup_HS[Config.Gyro_LPF], sizeof(float)); 
    7e48:	60 51       	subi	r22, 0x10	; 16
    7e4a:	78 4e       	sbci	r23, 0xE8	; 232
    7e4c:	44 e0       	ldi	r20, 0x04	; 4
    7e4e:	50 e0       	ldi	r21, 0x00	; 0
    7e50:	ce 01       	movw	r24, r28
    7e52:	0d 96       	adiw	r24, 0x0d	; 13
    7e54:	0e 94 e7 48 	call	0x91ce	; 0x91ce <memcpy_P>
		// Gyro LPF
		//************************************************************	
			
		gyroADCf = gyroADC[axis]; // Promote

		if (Config.Gyro_LPF != NOFILTER)
    7e58:	20 91 38 06 	lds	r18, 0x0638
    7e5c:	2c 8f       	std	Y+28, r18	; 0x1c
		{
			// Gyro LPF
			gyroSmooth[axis] = (gyroSmooth[axis] * (tempf - 1.0f) + gyroADCf) / tempf;
    7e5e:	cd 84       	ldd	r12, Y+13	; 0x0d
    7e60:	de 84       	ldd	r13, Y+14	; 0x0e
    7e62:	ef 84       	ldd	r14, Y+15	; 0x0f
    7e64:	f8 88       	ldd	r15, Y+16	; 0x10
    7e66:	8b e6       	ldi	r24, 0x6B	; 107
    7e68:	a8 2e       	mov	r10, r24
    7e6a:	85 e0       	ldi	r24, 0x05	; 5
    7e6c:	b8 2e       	mov	r11, r24
    7e6e:	9d ef       	ldi	r25, 0xFD	; 253
    7e70:	89 2e       	mov	r8, r25
    7e72:	97 e0       	ldi	r25, 0x07	; 7
    7e74:	99 2e       	mov	r9, r25
    7e76:	05 ee       	ldi	r16, 0xE5	; 229
    7e78:	17 e0       	ldi	r17, 0x07	; 7
    7e7a:	43 e2       	ldi	r20, 0x23	; 35
    7e7c:	56 e0       	ldi	r21, 0x06	; 6
    7e7e:	5f 8b       	std	Y+23, r21	; 0x17
    7e80:	4e 8b       	std	Y+22, r20	; 0x16
    7e82:	be 01       	movw	r22, r28
    7e84:	69 5f       	subi	r22, 0xF9	; 249
    7e86:	7f 4f       	sbci	r23, 0xFF	; 255
    7e88:	79 8f       	std	Y+25, r23	; 0x19
    7e8a:	68 8f       	std	Y+24, r22	; 0x18
    7e8c:	ce 01       	movw	r24, r28
    7e8e:	01 96       	adiw	r24, 0x01	; 1
    7e90:	9b 8f       	std	Y+27, r25	; 0x1b
    7e92:	8a 8f       	std	Y+26, r24	; 0x1a
    7e94:	de 01       	movw	r26, r28
    7e96:	14 96       	adiw	r26, 0x04	; 4
    7e98:	bd 8b       	std	Y+21, r27	; 0x15
    7e9a:	ac 8b       	std	Y+20, r26	; 0x14
    7e9c:	e7 e1       	ldi	r30, 0x17	; 23
    7e9e:	f6 e0       	ldi	r31, 0x06	; 6
    7ea0:	fb 8b       	std	Y+19, r31	; 0x13
    7ea2:	ea 8b       	std	Y+18, r30	; 0x12
    7ea4:	19 8a       	std	Y+17, r1	; 0x11
			gyroADC[axis] = 0;
		}
		
		// Work out stick rate divider. 0 is slowest, 4 is fastest.
		// /64 (15.25), /32 (30.5), /16 (61*), /8 (122), /4 (244)
		stick_P1 = RCinputsAxis[axis] >> (4 - (Stick_rates[P1][axis] - 2));
    7ea6:	26 e0       	ldi	r18, 0x06	; 6
    7ea8:	22 2e       	mov	r2, r18
    7eaa:	31 2c       	mov	r3, r1
		//************************************************************
		// Increment and limit gyro I-terms, handle heading hold nicely
		//************************************************************

		// Reduce Gyro drift noise before adding into I-term
		if ((gyroADC[axis] > -GYRO_DEADBAND) && (gyroADC[axis] < GYRO_DEADBAND)) 
    7eac:	d5 01       	movw	r26, r10
    7eae:	8d 91       	ld	r24, X+
    7eb0:	9c 91       	ld	r25, X
    7eb2:	11 97       	sbiw	r26, 0x01	; 1
    7eb4:	04 96       	adiw	r24, 0x04	; 4
    7eb6:	09 97       	sbiw	r24, 0x09	; 9
    7eb8:	10 f4       	brcc	.+4      	; 0x7ebe <Sensor_PID+0x118>
		{
			gyroADC[axis] = 0;
    7eba:	1d 92       	st	X+, r1
    7ebc:	1c 92       	st	X, r1
		}
		
		// Work out stick rate divider. 0 is slowest, 4 is fastest.
		// /64 (15.25), /32 (30.5), /16 (61*), /8 (122), /4 (244)
		stick_P1 = RCinputsAxis[axis] >> (4 - (Stick_rates[P1][axis] - 2));
    7ebe:	e8 8d       	ldd	r30, Y+24	; 0x18
    7ec0:	f9 8d       	ldd	r31, Y+25	; 0x19
    7ec2:	21 91       	ld	r18, Z+
    7ec4:	31 91       	ld	r19, Z+
    7ec6:	f9 8f       	std	Y+25, r31	; 0x19
    7ec8:	e8 8f       	std	Y+24, r30	; 0x18
    7eca:	aa 8d       	ldd	r26, Y+26	; 0x1a
    7ecc:	bb 8d       	ldd	r27, Y+27	; 0x1b
    7ece:	4d 91       	ld	r20, X+
    7ed0:	bb 8f       	std	Y+27, r27	; 0x1b
    7ed2:	aa 8f       	std	Y+26, r26	; 0x1a
		stick_P2 = RCinputsAxis[axis] >> (4 - (Stick_rates[P2][axis] - 2));
    7ed4:	ac 89       	ldd	r26, Y+20	; 0x14
    7ed6:	bd 89       	ldd	r27, Y+21	; 0x15
    7ed8:	ed 91       	ld	r30, X+
    7eda:	bd 8b       	std	Y+21, r27	; 0x15
    7edc:	ac 8b       	std	Y+20, r26	; 0x14

		// Calculate I-term from gyro and stick data 
		// These may look similar, but they are constrained quite differently.
		IntegralGyro[P1][axis] += (gyroADC[axis] + stick_P1);
    7ede:	d5 01       	movw	r26, r10
    7ee0:	0d 90       	ld	r0, X+
    7ee2:	bc 91       	ld	r27, X
    7ee4:	a0 2d       	mov	r26, r0
    7ee6:	ba a3       	std	Y+34, r27	; 0x22
    7ee8:	a9 a3       	std	Y+33, r26	; 0x21
			gyroADC[axis] = 0;
		}
		
		// Work out stick rate divider. 0 is slowest, 4 is fastest.
		// /64 (15.25), /32 (30.5), /16 (61*), /8 (122), /4 (244)
		stick_P1 = RCinputsAxis[axis] >> (4 - (Stick_rates[P1][axis] - 2));
    7eea:	b1 01       	movw	r22, r2
    7eec:	64 1b       	sub	r22, r20
    7eee:	71 09       	sbc	r23, r1
    7ef0:	47 fd       	sbrc	r20, 7
    7ef2:	73 95       	inc	r23
    7ef4:	c9 01       	movw	r24, r18
    7ef6:	02 c0       	rjmp	.+4      	; 0x7efc <Sensor_PID+0x156>
    7ef8:	95 95       	asr	r25
    7efa:	87 95       	ror	r24
    7efc:	6a 95       	dec	r22
    7efe:	e2 f7       	brpl	.-8      	; 0x7ef8 <Sensor_PID+0x152>
    7f00:	ac 01       	movw	r20, r24
		stick_P2 = RCinputsAxis[axis] >> (4 - (Stick_rates[P2][axis] - 2));

		// Calculate I-term from gyro and stick data 
		// These may look similar, but they are constrained quite differently.
		IntegralGyro[P1][axis] += (gyroADC[axis] + stick_P1);
    7f02:	4a 0f       	add	r20, r26
    7f04:	5b 1f       	adc	r21, r27
    7f06:	66 27       	eor	r22, r22
    7f08:	57 fd       	sbrc	r21, 7
    7f0a:	60 95       	com	r22
    7f0c:	76 2f       	mov	r23, r22
    7f0e:	d8 01       	movw	r26, r16
    7f10:	4d 90       	ld	r4, X+
    7f12:	5d 90       	ld	r5, X+
    7f14:	6d 90       	ld	r6, X+
    7f16:	7c 90       	ld	r7, X
    7f18:	13 97       	sbiw	r26, 0x03	; 3
    7f1a:	44 0e       	add	r4, r20
    7f1c:	55 1e       	adc	r5, r21
    7f1e:	66 1e       	adc	r6, r22
    7f20:	77 1e       	adc	r7, r23
    7f22:	4d 92       	st	X+, r4
    7f24:	5d 92       	st	X+, r5
    7f26:	6d 92       	st	X+, r6
    7f28:	7c 92       	st	X, r7
    7f2a:	13 97       	sbiw	r26, 0x03	; 3
		}
		
		// Work out stick rate divider. 0 is slowest, 4 is fastest.
		// /64 (15.25), /32 (30.5), /16 (61*), /8 (122), /4 (244)
		stick_P1 = RCinputsAxis[axis] >> (4 - (Stick_rates[P1][axis] - 2));
		stick_P2 = RCinputsAxis[axis] >> (4 - (Stick_rates[P2][axis] - 2));
    7f2c:	a1 01       	movw	r20, r2
    7f2e:	4e 1b       	sub	r20, r30
    7f30:	51 09       	sbc	r21, r1
    7f32:	e7 fd       	sbrc	r30, 7
    7f34:	53 95       	inc	r21
    7f36:	02 c0       	rjmp	.+4      	; 0x7f3c <Sensor_PID+0x196>
    7f38:	35 95       	asr	r19
    7f3a:	27 95       	ror	r18
    7f3c:	4a 95       	dec	r20
    7f3e:	e2 f7       	brpl	.-8      	; 0x7f38 <Sensor_PID+0x192>

		// Calculate I-term from gyro and stick data 
		// These may look similar, but they are constrained quite differently.
		IntegralGyro[P1][axis] += (gyroADC[axis] + stick_P1);
		IntegralGyro[P2][axis] += (gyroADC[axis] + stick_P2);
    7f40:	e9 a1       	ldd	r30, Y+33	; 0x21
    7f42:	fa a1       	ldd	r31, Y+34	; 0x22
    7f44:	2e 0f       	add	r18, r30
    7f46:	3f 1f       	adc	r19, r31
    7f48:	a9 01       	movw	r20, r18
    7f4a:	66 27       	eor	r22, r22
    7f4c:	57 fd       	sbrc	r21, 7
    7f4e:	60 95       	com	r22
    7f50:	76 2f       	mov	r23, r22
    7f52:	4d 8f       	std	Y+29, r20	; 0x1d
    7f54:	5e 8f       	std	Y+30, r21	; 0x1e
    7f56:	6f 8f       	std	Y+31, r22	; 0x1f
    7f58:	78 a3       	std	Y+32, r23	; 0x20
    7f5a:	1c 96       	adiw	r26, 0x0c	; 12
    7f5c:	4d 91       	ld	r20, X+
    7f5e:	5d 91       	ld	r21, X+
    7f60:	6d 91       	ld	r22, X+
    7f62:	7c 91       	ld	r23, X
    7f64:	1f 97       	sbiw	r26, 0x0f	; 15
    7f66:	8d 8d       	ldd	r24, Y+29	; 0x1d
    7f68:	9e 8d       	ldd	r25, Y+30	; 0x1e
    7f6a:	af 8d       	ldd	r26, Y+31	; 0x1f
    7f6c:	b8 a1       	ldd	r27, Y+32	; 0x20
    7f6e:	48 0f       	add	r20, r24
    7f70:	59 1f       	adc	r21, r25
    7f72:	6a 1f       	adc	r22, r26
    7f74:	7b 1f       	adc	r23, r27
    7f76:	d8 01       	movw	r26, r16
    7f78:	1c 96       	adiw	r26, 0x0c	; 12
    7f7a:	4d 93       	st	X+, r20
    7f7c:	5d 93       	st	X+, r21
    7f7e:	6d 93       	st	X+, r22
    7f80:	7c 93       	st	X, r23
    7f82:	1f 97       	sbiw	r26, 0x0f	; 15

		// Limit the I-terms to the user-set limits
		for (i = P1; i <= P2; i++)
		{
			if (IntegralGyro[i][axis] > Config.Raw_I_Constrain[i][axis])
    7f84:	ea 89       	ldd	r30, Y+18	; 0x12
    7f86:	fb 89       	ldd	r31, Y+19	; 0x13
    7f88:	41 91       	ld	r20, Z+
    7f8a:	51 91       	ld	r21, Z+
    7f8c:	61 91       	ld	r22, Z+
    7f8e:	71 91       	ld	r23, Z+
    7f90:	fb 8b       	std	Y+19, r31	; 0x13
    7f92:	ea 8b       	std	Y+18, r30	; 0x12
    7f94:	44 15       	cp	r20, r4
    7f96:	55 05       	cpc	r21, r5
    7f98:	66 05       	cpc	r22, r6
    7f9a:	77 05       	cpc	r23, r7
    7f9c:	2c f4       	brge	.+10     	; 0x7fa8 <Sensor_PID+0x202>
			{
				IntegralGyro[i][axis] = Config.Raw_I_Constrain[i][axis];
    7f9e:	4d 93       	st	X+, r20
    7fa0:	5d 93       	st	X+, r21
    7fa2:	6d 93       	st	X+, r22
    7fa4:	7c 93       	st	X, r23
    7fa6:	13 97       	sbiw	r26, 0x03	; 3
			}
			if (IntegralGyro[i][axis] < -Config.Raw_I_Constrain[i][axis])
    7fa8:	70 95       	com	r23
    7faa:	60 95       	com	r22
    7fac:	50 95       	com	r21
    7fae:	41 95       	neg	r20
    7fb0:	5f 4f       	sbci	r21, 0xFF	; 255
    7fb2:	6f 4f       	sbci	r22, 0xFF	; 255
    7fb4:	7f 4f       	sbci	r23, 0xFF	; 255
    7fb6:	f8 01       	movw	r30, r16
    7fb8:	40 80       	ld	r4, Z
    7fba:	51 80       	ldd	r5, Z+1	; 0x01
    7fbc:	62 80       	ldd	r6, Z+2	; 0x02
    7fbe:	73 80       	ldd	r7, Z+3	; 0x03
    7fc0:	44 16       	cp	r4, r20
    7fc2:	55 06       	cpc	r5, r21
    7fc4:	66 06       	cpc	r6, r22
    7fc6:	77 06       	cpc	r7, r23
    7fc8:	24 f4       	brge	.+8      	; 0x7fd2 <Sensor_PID+0x22c>
			{
				IntegralGyro[i][axis] = -Config.Raw_I_Constrain[i][axis];
    7fca:	40 83       	st	Z, r20
    7fcc:	51 83       	std	Z+1, r21	; 0x01
    7fce:	62 83       	std	Z+2, r22	; 0x02
    7fd0:	73 83       	std	Z+3, r23	; 0x03
		IntegralGyro[P2][axis] += (gyroADC[axis] + stick_P2);

		// Limit the I-terms to the user-set limits
		for (i = P1; i <= P2; i++)
		{
			if (IntegralGyro[i][axis] > Config.Raw_I_Constrain[i][axis])
    7fd2:	ee 89       	ldd	r30, Y+22	; 0x16
    7fd4:	ff 89       	ldd	r31, Y+23	; 0x17
    7fd6:	41 91       	ld	r20, Z+
    7fd8:	51 91       	ld	r21, Z+
    7fda:	61 91       	ld	r22, Z+
    7fdc:	71 91       	ld	r23, Z+
    7fde:	ff 8b       	std	Y+23, r31	; 0x17
    7fe0:	ee 8b       	std	Y+22, r30	; 0x16
    7fe2:	d8 01       	movw	r26, r16
    7fe4:	1c 96       	adiw	r26, 0x0c	; 12
    7fe6:	4d 90       	ld	r4, X+
    7fe8:	5d 90       	ld	r5, X+
    7fea:	6d 90       	ld	r6, X+
    7fec:	7c 90       	ld	r7, X
    7fee:	1f 97       	sbiw	r26, 0x0f	; 15
    7ff0:	44 15       	cp	r20, r4
    7ff2:	55 05       	cpc	r21, r5
    7ff4:	66 05       	cpc	r22, r6
    7ff6:	77 05       	cpc	r23, r7
    7ff8:	2c f4       	brge	.+10     	; 0x8004 <Sensor_PID+0x25e>
			{
				IntegralGyro[i][axis] = Config.Raw_I_Constrain[i][axis];
    7ffa:	f8 01       	movw	r30, r16
    7ffc:	44 87       	std	Z+12, r20	; 0x0c
    7ffe:	55 87       	std	Z+13, r21	; 0x0d
    8000:	66 87       	std	Z+14, r22	; 0x0e
    8002:	77 87       	std	Z+15, r23	; 0x0f
			}
			if (IntegralGyro[i][axis] < -Config.Raw_I_Constrain[i][axis])
    8004:	70 95       	com	r23
    8006:	60 95       	com	r22
    8008:	50 95       	com	r21
    800a:	41 95       	neg	r20
    800c:	5f 4f       	sbci	r21, 0xFF	; 255
    800e:	6f 4f       	sbci	r22, 0xFF	; 255
    8010:	7f 4f       	sbci	r23, 0xFF	; 255
    8012:	d8 01       	movw	r26, r16
    8014:	1c 96       	adiw	r26, 0x0c	; 12
    8016:	4d 90       	ld	r4, X+
    8018:	5d 90       	ld	r5, X+
    801a:	6d 90       	ld	r6, X+
    801c:	7c 90       	ld	r7, X
    801e:	1f 97       	sbiw	r26, 0x0f	; 15
    8020:	44 16       	cp	r4, r20
    8022:	55 06       	cpc	r5, r21
    8024:	66 06       	cpc	r6, r22
    8026:	77 06       	cpc	r7, r23
    8028:	2c f4       	brge	.+10     	; 0x8034 <Sensor_PID+0x28e>
			{
				IntegralGyro[i][axis] = -Config.Raw_I_Constrain[i][axis];
    802a:	f8 01       	movw	r30, r16
    802c:	44 87       	std	Z+12, r20	; 0x0c
    802e:	55 87       	std	Z+13, r21	; 0x0d
    8030:	66 87       	std	Z+14, r22	; 0x0e
    8032:	77 87       	std	Z+15, r23	; 0x0f

		//************************************************************
		// Gyro LPF
		//************************************************************	
			
		gyroADCf = gyroADC[axis]; // Promote
    8034:	29 a1       	ldd	r18, Y+33	; 0x21
    8036:	3a a1       	ldd	r19, Y+34	; 0x22
    8038:	b9 01       	movw	r22, r18
    803a:	88 27       	eor	r24, r24
    803c:	77 fd       	sbrc	r23, 7
    803e:	80 95       	com	r24
    8040:	98 2f       	mov	r25, r24
    8042:	0e 94 30 47 	call	0x8e60	; 0x8e60 <__floatsisf>
    8046:	2b 01       	movw	r4, r22
    8048:	3c 01       	movw	r6, r24

		if (Config.Gyro_LPF != NOFILTER)
    804a:	3c 8d       	ldd	r19, Y+28	; 0x1c
    804c:	37 30       	cpi	r19, 0x07	; 7
    804e:	e9 f0       	breq	.+58     	; 0x808a <Sensor_PID+0x2e4>
		{
			// Gyro LPF
			gyroSmooth[axis] = (gyroSmooth[axis] * (tempf - 1.0f) + gyroADCf) / tempf;
    8050:	20 e0       	ldi	r18, 0x00	; 0
    8052:	30 e0       	ldi	r19, 0x00	; 0
    8054:	40 e8       	ldi	r20, 0x80	; 128
    8056:	5f e3       	ldi	r21, 0x3F	; 63
    8058:	c7 01       	movw	r24, r14
    805a:	b6 01       	movw	r22, r12
    805c:	0e 94 2c 46 	call	0x8c58	; 0x8c58 <__subsf3>
    8060:	d4 01       	movw	r26, r8
    8062:	2d 91       	ld	r18, X+
    8064:	3d 91       	ld	r19, X+
    8066:	4d 91       	ld	r20, X+
    8068:	5c 91       	ld	r21, X
    806a:	0e 94 e4 47 	call	0x8fc8	; 0x8fc8 <__mulsf3>
    806e:	a3 01       	movw	r20, r6
    8070:	92 01       	movw	r18, r4
    8072:	0e 94 2d 46 	call	0x8c5a	; 0x8c5a <__addsf3>
    8076:	a7 01       	movw	r20, r14
    8078:	96 01       	movw	r18, r12
    807a:	0e 94 95 46 	call	0x8d2a	; 0x8d2a <__divsf3>
    807e:	f4 01       	movw	r30, r8
    8080:	60 83       	st	Z, r22
    8082:	71 83       	std	Z+1, r23	; 0x01
    8084:	82 83       	std	Z+2, r24	; 0x02
    8086:	93 83       	std	Z+3, r25	; 0x03
    8088:	06 c0       	rjmp	.+12     	; 0x8096 <Sensor_PID+0x2f0>
		}
		else
		{
			// Use raw gyroADC[axis] as source for gyro values
			gyroSmooth[axis] =  gyroADCf;
    808a:	d4 01       	movw	r26, r8
    808c:	6d 93       	st	X+, r22
    808e:	7d 93       	st	X+, r23
    8090:	8d 93       	st	X+, r24
    8092:	9c 93       	st	X, r25
    8094:	13 97       	sbiw	r26, 0x03	; 3
		}		
		
		// Demote back to int16_t
		gyroADC[axis] = (int16_t)gyroSmooth[axis];		
    8096:	f4 01       	movw	r30, r8
    8098:	61 91       	ld	r22, Z+
    809a:	71 91       	ld	r23, Z+
    809c:	81 91       	ld	r24, Z+
    809e:	91 91       	ld	r25, Z+
    80a0:	4f 01       	movw	r8, r30
    80a2:	0e 94 fd 46 	call	0x8dfa	; 0x8dfa <__fixsfsi>
    80a6:	d5 01       	movw	r26, r10
    80a8:	6d 93       	st	X+, r22
    80aa:	7d 93       	st	X+, r23
    80ac:	5d 01       	movw	r10, r26
    80ae:	b9 89       	ldd	r27, Y+17	; 0x11
    80b0:	bf 5f       	subi	r27, 0xFF	; 255
    80b2:	b9 8b       	std	Y+17, r27	; 0x11
    80b4:	0c 5f       	subi	r16, 0xFC	; 252
    80b6:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		//tempf = pgm_read_float(&LPF_lookup_HS[Config.Gyro_LPF]);
		memcpy_P(&tempf, &LPF_lookup_HS[Config.Gyro_LPF], sizeof(float)); 
	}

	for (axis = 0; axis <= YAW; axis ++)
    80b8:	b3 30       	cpi	r27, 0x03	; 3
    80ba:	09 f0       	breq	.+2      	; 0x80be <Sensor_PID+0x318>
    80bc:	f7 ce       	rjmp	.-530    	; 0x7eac <Sensor_PID+0x106>
		// Demote back to int16_t
		gyroADC[axis] = (int16_t)gyroSmooth[axis];		
	}
	
	// Average accVert prior to Calculate_PID()
	PID_AvgAccVert += accVert;
    80be:	40 91 14 05 	lds	r20, 0x0514
    80c2:	50 91 15 05 	lds	r21, 0x0515
    80c6:	66 27       	eor	r22, r22
    80c8:	57 fd       	sbrc	r21, 7
    80ca:	60 95       	com	r22
    80cc:	76 2f       	mov	r23, r22
    80ce:	80 91 36 05 	lds	r24, 0x0536
    80d2:	90 91 37 05 	lds	r25, 0x0537
    80d6:	a0 91 38 05 	lds	r26, 0x0538
    80da:	b0 91 39 05 	lds	r27, 0x0539
    80de:	84 0f       	add	r24, r20
    80e0:	95 1f       	adc	r25, r21
    80e2:	a6 1f       	adc	r26, r22
    80e4:	b7 1f       	adc	r27, r23
    80e6:	80 93 36 05 	sts	0x0536, r24
    80ea:	90 93 37 05 	sts	0x0537, r25
    80ee:	a0 93 38 05 	sts	0x0538, r26
    80f2:	b0 93 39 05 	sts	0x0539, r27
			
}
    80f6:	a2 96       	adiw	r28, 0x22	; 34
    80f8:	0f b6       	in	r0, 0x3f	; 63
    80fa:	f8 94       	cli
    80fc:	de bf       	out	0x3e, r29	; 62
    80fe:	0f be       	out	0x3f, r0	; 63
    8100:	cd bf       	out	0x3d, r28	; 61
    8102:	df 91       	pop	r29
    8104:	cf 91       	pop	r28
    8106:	1f 91       	pop	r17
    8108:	0f 91       	pop	r16
    810a:	ff 90       	pop	r15
    810c:	ef 90       	pop	r14
    810e:	df 90       	pop	r13
    8110:	cf 90       	pop	r12
    8112:	bf 90       	pop	r11
    8114:	af 90       	pop	r10
    8116:	9f 90       	pop	r9
    8118:	8f 90       	pop	r8
    811a:	7f 90       	pop	r7
    811c:	6f 90       	pop	r6
    811e:	5f 90       	pop	r5
    8120:	4f 90       	pop	r4
    8122:	3f 90       	pop	r3
    8124:	2f 90       	pop	r2
    8126:	08 95       	ret

00008128 <Calculate_PID>:

// Run just before PWM output, using averaged data
void Calculate_PID(void)
{
    8128:	2f 92       	push	r2
    812a:	3f 92       	push	r3
    812c:	4f 92       	push	r4
    812e:	5f 92       	push	r5
    8130:	6f 92       	push	r6
    8132:	7f 92       	push	r7
    8134:	8f 92       	push	r8
    8136:	9f 92       	push	r9
    8138:	af 92       	push	r10
    813a:	bf 92       	push	r11
    813c:	cf 92       	push	r12
    813e:	df 92       	push	r13
    8140:	ef 92       	push	r14
    8142:	ff 92       	push	r15
    8144:	0f 93       	push	r16
    8146:	1f 93       	push	r17
    8148:	cf 93       	push	r28
    814a:	df 93       	push	r29
    814c:	cd b7       	in	r28, 0x3d	; 61
    814e:	de b7       	in	r29, 0x3e	; 62
    8150:	ca 54       	subi	r28, 0x4A	; 74
    8152:	d1 09       	sbc	r29, r1
    8154:	0f b6       	in	r0, 0x3f	; 63
    8156:	f8 94       	cli
    8158:	de bf       	out	0x3e, r29	; 62
    815a:	0f be       	out	0x3f, r0	; 63
    815c:	cd bf       	out	0x3d, r28	; 61
	int16_t AvAccVert = 0;
	int8_t	axis = 0;
	int8_t i = 0;

	// Initialise arrays with gain values.
	int8_t 	P_gain[FLIGHT_MODES][NUMBEROFAXIS] = 
    815e:	80 91 db 05 	lds	r24, 0x05DB
    8162:	8d 8b       	std	Y+21, r24	; 0x15
    8164:	80 91 e1 05 	lds	r24, 0x05E1
    8168:	8e 8b       	std	Y+22, r24	; 0x16
    816a:	80 91 e7 05 	lds	r24, 0x05E7
    816e:	8f 8b       	std	Y+23, r24	; 0x17
    8170:	80 91 ed 05 	lds	r24, 0x05ED
    8174:	88 8f       	std	Y+24, r24	; 0x18
    8176:	80 91 f3 05 	lds	r24, 0x05F3
    817a:	89 8f       	std	Y+25, r24	; 0x19
    817c:	80 91 f9 05 	lds	r24, 0x05F9
    8180:	8a 8f       	std	Y+26, r24	; 0x1a
		{
			{Config.FlightMode[P1].Roll_P_mult, Config.FlightMode[P1].Pitch_P_mult, Config.FlightMode[P1].Yaw_P_mult},
		 	{Config.FlightMode[P2].Roll_P_mult, Config.FlightMode[P2].Pitch_P_mult, Config.FlightMode[P2].Yaw_P_mult}
		};

	int8_t 	I_gain[FLIGHT_MODES][NUMBEROFAXIS] = 
    8182:	80 91 dc 05 	lds	r24, 0x05DC
    8186:	8f 87       	std	Y+15, r24	; 0x0f
    8188:	80 91 e2 05 	lds	r24, 0x05E2
    818c:	88 8b       	std	Y+16, r24	; 0x10
    818e:	80 91 e8 05 	lds	r24, 0x05E8
    8192:	89 8b       	std	Y+17, r24	; 0x11
    8194:	80 91 ee 05 	lds	r24, 0x05EE
    8198:	8a 8b       	std	Y+18, r24	; 0x12
    819a:	80 91 f4 05 	lds	r24, 0x05F4
    819e:	8b 8b       	std	Y+19, r24	; 0x13
    81a0:	80 91 fa 05 	lds	r24, 0x05FA
    81a4:	8c 8b       	std	Y+20, r24	; 0x14
		{
			{Config.FlightMode[P1].Roll_I_mult, Config.FlightMode[P1].Pitch_I_mult, Config.FlightMode[P1].Yaw_I_mult},
			{Config.FlightMode[P2].Roll_I_mult, Config.FlightMode[P2].Pitch_I_mult, Config.FlightMode[P2].Yaw_I_mult}
		};

	int8_t 	L_gain[FLIGHT_MODES][NUMBEROFAXIS] = 
    81a6:	80 91 df 05 	lds	r24, 0x05DF
    81aa:	89 87       	std	Y+9, r24	; 0x09
    81ac:	80 91 e5 05 	lds	r24, 0x05E5
    81b0:	8a 87       	std	Y+10, r24	; 0x0a
		{
			{Config.FlightMode[P1].A_Roll_P_mult, Config.FlightMode[P1].A_Pitch_P_mult, Config.FlightMode[P1].A_Zed_P_mult},
    81b2:	20 91 ec 05 	lds	r18, 0x05EC
    81b6:	29 a7       	std	Y+41, r18	; 0x29
		{
			{Config.FlightMode[P1].Roll_I_mult, Config.FlightMode[P1].Pitch_I_mult, Config.FlightMode[P1].Yaw_I_mult},
			{Config.FlightMode[P2].Roll_I_mult, Config.FlightMode[P2].Pitch_I_mult, Config.FlightMode[P2].Yaw_I_mult}
		};

	int8_t 	L_gain[FLIGHT_MODES][NUMBEROFAXIS] = 
    81b8:	2b 87       	std	Y+11, r18	; 0x0b
    81ba:	80 91 f1 05 	lds	r24, 0x05F1
    81be:	8c 87       	std	Y+12, r24	; 0x0c
    81c0:	80 91 f7 05 	lds	r24, 0x05F7
    81c4:	8d 87       	std	Y+13, r24	; 0x0d
		{
			{Config.FlightMode[P1].A_Roll_P_mult, Config.FlightMode[P1].A_Pitch_P_mult, Config.FlightMode[P1].A_Zed_P_mult},
			{Config.FlightMode[P2].A_Roll_P_mult, Config.FlightMode[P2].A_Pitch_P_mult, Config.FlightMode[P2].A_Zed_P_mult}
    81c6:	30 91 fe 05 	lds	r19, 0x05FE
    81ca:	3a a7       	std	Y+42, r19	; 0x2a
		{
			{Config.FlightMode[P1].Roll_I_mult, Config.FlightMode[P1].Pitch_I_mult, Config.FlightMode[P1].Yaw_I_mult},
			{Config.FlightMode[P2].Roll_I_mult, Config.FlightMode[P2].Pitch_I_mult, Config.FlightMode[P2].Yaw_I_mult}
		};

	int8_t 	L_gain[FLIGHT_MODES][NUMBEROFAXIS] = 
    81cc:	3e 87       	std	Y+14, r19	; 0x0e
			{Config.FlightMode[P1].A_Roll_P_mult, Config.FlightMode[P1].A_Pitch_P_mult, Config.FlightMode[P1].A_Zed_P_mult},
			{Config.FlightMode[P2].A_Roll_P_mult, Config.FlightMode[P2].A_Pitch_P_mult, Config.FlightMode[P2].A_Zed_P_mult}
		};

	// Only for roll and pitch acc trim
	int16_t	L_trim[FLIGHT_MODES][2] =
    81ce:	80 91 a8 07 	lds	r24, 0x07A8
    81d2:	90 91 a9 07 	lds	r25, 0x07A9
    81d6:	9a 83       	std	Y+2, r25	; 0x02
    81d8:	89 83       	std	Y+1, r24	; 0x01
    81da:	80 91 ac 07 	lds	r24, 0x07AC
    81de:	90 91 ad 07 	lds	r25, 0x07AD
    81e2:	9c 83       	std	Y+4, r25	; 0x04
    81e4:	8b 83       	std	Y+3, r24	; 0x03
    81e6:	80 91 aa 07 	lds	r24, 0x07AA
    81ea:	90 91 ab 07 	lds	r25, 0x07AB
    81ee:	9e 83       	std	Y+6, r25	; 0x06
    81f0:	8d 83       	std	Y+5, r24	; 0x05
    81f2:	80 91 ae 07 	lds	r24, 0x07AE
    81f6:	90 91 af 07 	lds	r25, 0x07AF
    81fa:	98 87       	std	Y+8, r25	; 0x08
    81fc:	8f 83       	std	Y+7, r24	; 0x07
			{Config.Rolltrim[P1], Config.Pitchtrim[P1]},
			{Config.Rolltrim[P2], Config.Pitchtrim[P2]}
		};

	// Average accVert
	AvAccVert = (int16_t)(PID_AvgAccVert / LoopCount);
    81fe:	20 91 16 05 	lds	r18, 0x0516
    8202:	30 e0       	ldi	r19, 0x00	; 0
    8204:	40 e0       	ldi	r20, 0x00	; 0
    8206:	50 e0       	ldi	r21, 0x00	; 0
    8208:	60 91 36 05 	lds	r22, 0x0536
    820c:	70 91 37 05 	lds	r23, 0x0537
    8210:	80 91 38 05 	lds	r24, 0x0538
    8214:	90 91 39 05 	lds	r25, 0x0539
    8218:	0e 94 91 48 	call	0x9122	; 0x9122 <__divmodsi4>
    821c:	29 96       	adiw	r28, 0x09	; 9
    821e:	2c af       	std	Y+60, r18	; 0x3c
    8220:	3d af       	std	Y+61, r19	; 0x3d
    8222:	4e af       	std	Y+62, r20	; 0x3e
    8224:	5f af       	std	Y+63, r21	; 0x3f
    8226:	29 97       	sbiw	r28, 0x09	; 9
	PID_AvgAccVert = 0;							// Reset average
    8228:	10 92 36 05 	sts	0x0536, r1
    822c:	10 92 37 05 	sts	0x0537, r1
    8230:	10 92 38 05 	sts	0x0538, r1
    8234:	10 92 39 05 	sts	0x0539, r1
		// Add in gyro Yaw trim
		//************************************************************

		if (axis == YAW)
		{
			PID_gyro_temp1 = (int32_t)(Config.FlightMode[P1].Yaw_trim << 6);
    8238:	80 91 eb 05 	lds	r24, 0x05EB
    823c:	40 e4       	ldi	r20, 0x40	; 64
    823e:	84 02       	muls	r24, r20
    8240:	c0 01       	movw	r24, r0
    8242:	11 24       	eor	r1, r1
    8244:	9c 01       	movw	r18, r24
    8246:	44 27       	eor	r20, r20
    8248:	37 fd       	sbrc	r19, 7
    824a:	40 95       	com	r20
    824c:	54 2f       	mov	r21, r20
    824e:	29 af       	std	Y+57, r18	; 0x39
    8250:	3a af       	std	Y+58, r19	; 0x3a
    8252:	4b af       	std	Y+59, r20	; 0x3b
    8254:	5c af       	std	Y+60, r21	; 0x3c
			PID_gyro_temp2 = (int32_t)(Config.FlightMode[P2].Yaw_trim << 6);
    8256:	80 91 fd 05 	lds	r24, 0x05FD
    825a:	30 e4       	ldi	r19, 0x40	; 64
    825c:	83 02       	muls	r24, r19
    825e:	c0 01       	movw	r24, r0
    8260:	11 24       	eor	r1, r1
    8262:	9c 01       	movw	r18, r24
    8264:	44 27       	eor	r20, r20
    8266:	37 fd       	sbrc	r19, 7
    8268:	40 95       	com	r20
    826a:	54 2f       	mov	r21, r20
    826c:	21 96       	adiw	r28, 0x01	; 1
    826e:	2c af       	std	Y+60, r18	; 0x3c
    8270:	3d af       	std	Y+61, r19	; 0x3d
    8272:	4e af       	std	Y+62, r20	; 0x3e
    8274:	5f af       	std	Y+63, r21	; 0x3f
    8276:	21 97       	sbiw	r28, 0x01	; 1
    8278:	eb e6       	ldi	r30, 0x6B	; 107
    827a:	f5 e0       	ldi	r31, 0x05	; 5
    827c:	f8 af       	std	Y+56, r31	; 0x38
    827e:	ef ab       	std	Y+55, r30	; 0x37
    8280:	fe 01       	movw	r30, r28
    8282:	75 96       	adiw	r30, 0x15	; 21
    8284:	fe ab       	std	Y+54, r31	; 0x36
    8286:	ed ab       	std	Y+53, r30	; 0x35
    8288:	e5 ee       	ldi	r30, 0xE5	; 229
    828a:	f7 e0       	ldi	r31, 0x07	; 7
    828c:	fe a3       	std	Y+38, r31	; 0x26
    828e:	ed a3       	std	Y+37, r30	; 0x25
    8290:	fe 01       	movw	r30, r28
    8292:	3f 96       	adiw	r30, 0x0f	; 15
    8294:	fc ab       	std	Y+52, r31	; 0x34
    8296:	eb ab       	std	Y+51, r30	; 0x33
    8298:	39 96       	adiw	r30, 0x09	; 9
    829a:	fa ab       	std	Y+50, r31	; 0x32
    829c:	e9 ab       	std	Y+49, r30	; 0x31
    829e:	36 97       	sbiw	r30, 0x06	; 6
    82a0:	f8 ab       	std	Y+48, r31	; 0x30
    82a2:	ef a7       	std	Y+47, r30	; 0x2f
    82a4:	ef ef       	ldi	r30, 0xFF	; 255
    82a6:	f5 e0       	ldi	r31, 0x05	; 5
    82a8:	fe a7       	std	Y+46, r31	; 0x2e
    82aa:	ed a7       	std	Y+45, r30	; 0x2d
    82ac:	e9 e0       	ldi	r30, 0x09	; 9
    82ae:	f8 e0       	ldi	r31, 0x08	; 8
    82b0:	fc a3       	std	Y+36, r31	; 0x24
    82b2:	eb a3       	std	Y+35, r30	; 0x23
    82b4:	e9 e8       	ldi	r30, 0x89	; 137
    82b6:	f5 e0       	ldi	r31, 0x05	; 5
    82b8:	f8 a7       	std	Y+40, r31	; 0x28
    82ba:	ef a3       	std	Y+39, r30	; 0x27
    82bc:	fe 01       	movw	r30, r28
    82be:	31 96       	adiw	r30, 0x01	; 1
    82c0:	fa a3       	std	Y+34, r31	; 0x22
    82c2:	e9 a3       	std	Y+33, r30	; 0x21
    82c4:	e5 e1       	ldi	r30, 0x15	; 21
    82c6:	f8 e0       	ldi	r31, 0x08	; 8
    82c8:	f8 a3       	std	Y+32, r31	; 0x20
    82ca:	ef 8f       	std	Y+31, r30	; 0x1f
    82cc:	1e 01       	movw	r2, r28
    82ce:	fc e0       	ldi	r31, 0x0C	; 12
    82d0:	2f 0e       	add	r2, r31
    82d2:	31 1c       	adc	r3, r1
    82d4:	eb e0       	ldi	r30, 0x0B	; 11
    82d6:	f6 e0       	ldi	r31, 0x06	; 6
    82d8:	fc a7       	std	Y+44, r31	; 0x2c
    82da:	eb a7       	std	Y+43, r30	; 0x2b
    82dc:	2b 96       	adiw	r28, 0x0b	; 11
    82de:	1f ae       	std	Y+63, r1	; 0x3f
    82e0:	1e ae       	std	Y+62, r1	; 0x3e
    82e2:	2b 97       	sbiw	r28, 0x0b	; 11
		}
		// Reset PID_gyro variables to that data does not accumulate cross-axis
		else
		{
			PID_gyro_temp1 = 0;
			PID_gyro_temp2 = 0;
    82e4:	81 2c       	mov	r8, r1
    82e6:	91 2c       	mov	r9, r1
    82e8:	54 01       	movw	r10, r8
			PID_gyro_temp2 = (int32_t)(Config.FlightMode[P2].Yaw_trim << 6);
		}
		// Reset PID_gyro variables to that data does not accumulate cross-axis
		else
		{
			PID_gyro_temp1 = 0;
    82ea:	80 e0       	ldi	r24, 0x00	; 0
    82ec:	90 e0       	ldi	r25, 0x00	; 0
    82ee:	dc 01       	movw	r26, r24
		//************************************************************
		// Calculate PID gains
		//************************************************************

		// Gyro P-term													// Profile P1
		PID_gyro_temp1 += gyroADC[axis] * P_gain[P1][axis];				// Multiply P-term (Max gain of 127)
    82f0:	ef a9       	ldd	r30, Y+55	; 0x37
    82f2:	f8 ad       	ldd	r31, Y+56	; 0x38
    82f4:	01 91       	ld	r16, Z+
    82f6:	11 91       	ld	r17, Z+
    82f8:	f8 af       	std	Y+56, r31	; 0x38
    82fa:	ef ab       	std	Y+55, r30	; 0x37
    82fc:	ed a9       	ldd	r30, Y+53	; 0x35
    82fe:	fe a9       	ldd	r31, Y+54	; 0x36
    8300:	41 91       	ld	r20, Z+
    8302:	fe ab       	std	Y+54, r31	; 0x36
    8304:	ed ab       	std	Y+53, r30	; 0x35
    8306:	40 03       	mulsu	r20, r16
    8308:	90 01       	movw	r18, r0
    830a:	41 9f       	mul	r20, r17
    830c:	30 0d       	add	r19, r0
    830e:	11 24       	eor	r1, r1
    8310:	44 27       	eor	r20, r20
    8312:	37 fd       	sbrc	r19, 7
    8314:	40 95       	com	r20
    8316:	54 2f       	mov	r21, r20
    8318:	28 0f       	add	r18, r24
    831a:	39 1f       	adc	r19, r25
    831c:	4a 1f       	adc	r20, r26
    831e:	5b 1f       	adc	r21, r27
		PID_gyro_temp1 = PID_gyro_temp1 * (int32_t)3;					// Multiply by 3
    8320:	a3 e0       	ldi	r26, 0x03	; 3
    8322:	b0 e0       	ldi	r27, 0x00	; 0
    8324:	0e 94 d4 48 	call	0x91a8	; 0x91a8 <__muluhisi3>
    8328:	25 96       	adiw	r28, 0x05	; 5
    832a:	6c af       	std	Y+60, r22	; 0x3c
    832c:	7d af       	std	Y+61, r23	; 0x3d
    832e:	8e af       	std	Y+62, r24	; 0x3e
    8330:	9f af       	std	Y+63, r25	; 0x3f
    8332:	25 97       	sbiw	r28, 0x05	; 5

		// Gyro I-term
		PID_Gyro_I_actual1 = IntegralGyro[P1][axis] * I_gain[P1][axis];	// Multiply I-term (Max gain of 127)
    8334:	eb a9       	ldd	r30, Y+51	; 0x33
    8336:	fc a9       	ldd	r31, Y+52	; 0x34
    8338:	a1 91       	ld	r26, Z+
    833a:	fc ab       	std	Y+52, r31	; 0x34
    833c:	eb ab       	std	Y+51, r30	; 0x33
    833e:	ed a1       	ldd	r30, Y+37	; 0x25
    8340:	fe a1       	ldd	r31, Y+38	; 0x26
    8342:	20 81       	ld	r18, Z
    8344:	31 81       	ldd	r19, Z+1	; 0x01
    8346:	42 81       	ldd	r20, Z+2	; 0x02
    8348:	53 81       	ldd	r21, Z+3	; 0x03
    834a:	bb 27       	eor	r27, r27
    834c:	a7 fd       	sbrc	r26, 7
    834e:	b0 95       	com	r27
    8350:	0e 94 df 48 	call	0x91be	; 0x91be <__mulshisi3>
    8354:	2b 01       	movw	r4, r22
    8356:	3c 01       	movw	r6, r24
		PID_Gyro_I_actual1 = PID_Gyro_I_actual1 >> 5;					// Divide by 32
    8358:	85 e0       	ldi	r24, 0x05	; 5
    835a:	75 94       	asr	r7
    835c:	67 94       	ror	r6
    835e:	57 94       	ror	r5
    8360:	47 94       	ror	r4
    8362:	8a 95       	dec	r24
    8364:	d1 f7       	brne	.-12     	; 0x835a <Calculate_PID+0x232>

		// Gyro P-term
		PID_gyro_temp2 += gyroADC[axis] * P_gain[P2][axis];				// Profile P2
    8366:	e9 a9       	ldd	r30, Y+49	; 0x31
    8368:	fa a9       	ldd	r31, Y+50	; 0x32
    836a:	41 91       	ld	r20, Z+
    836c:	fa ab       	std	Y+50, r31	; 0x32
    836e:	e9 ab       	std	Y+49, r30	; 0x31
    8370:	40 03       	mulsu	r20, r16
    8372:	90 01       	movw	r18, r0
    8374:	41 9f       	mul	r20, r17
    8376:	30 0d       	add	r19, r0
    8378:	11 24       	eor	r1, r1
    837a:	44 27       	eor	r20, r20
    837c:	37 fd       	sbrc	r19, 7
    837e:	40 95       	com	r20
    8380:	54 2f       	mov	r21, r20
    8382:	28 0d       	add	r18, r8
    8384:	39 1d       	adc	r19, r9
    8386:	4a 1d       	adc	r20, r10
    8388:	5b 1d       	adc	r21, r11
		PID_gyro_temp2 = PID_gyro_temp2 * (int32_t)3;
    838a:	a3 e0       	ldi	r26, 0x03	; 3
    838c:	b0 e0       	ldi	r27, 0x00	; 0
    838e:	0e 94 d4 48 	call	0x91a8	; 0x91a8 <__muluhisi3>
    8392:	4b 01       	movw	r8, r22
    8394:	5c 01       	movw	r10, r24

		// Gyro I-term
		PID_Gyro_I_actual2 = IntegralGyro[P2][axis] * I_gain[P2][axis];
    8396:	ef a5       	ldd	r30, Y+47	; 0x2f
    8398:	f8 a9       	ldd	r31, Y+48	; 0x30
    839a:	a1 91       	ld	r26, Z+
    839c:	f8 ab       	std	Y+48, r31	; 0x30
    839e:	ef a7       	std	Y+47, r30	; 0x2f
    83a0:	ed a1       	ldd	r30, Y+37	; 0x25
    83a2:	fe a1       	ldd	r31, Y+38	; 0x26
    83a4:	24 85       	ldd	r18, Z+12	; 0x0c
    83a6:	35 85       	ldd	r19, Z+13	; 0x0d
    83a8:	46 85       	ldd	r20, Z+14	; 0x0e
    83aa:	57 85       	ldd	r21, Z+15	; 0x0f
    83ac:	bb 27       	eor	r27, r27
    83ae:	a7 fd       	sbrc	r26, 7
    83b0:	b0 95       	com	r27
    83b2:	0e 94 df 48 	call	0x91be	; 0x91be <__mulshisi3>
		PID_Gyro_I_actual2 = PID_Gyro_I_actual2 >> 5;
    83b6:	25 e0       	ldi	r18, 0x05	; 5
    83b8:	95 95       	asr	r25
    83ba:	87 95       	ror	r24
    83bc:	77 95       	ror	r23
    83be:	67 95       	ror	r22
    83c0:	2a 95       	dec	r18
    83c2:	d1 f7       	brne	.-12     	; 0x83b8 <Calculate_PID+0x290>
		//************************************************************
		// I-term output limits
		//************************************************************

		// P1 limits
		if (PID_Gyro_I_actual1 > Config.Raw_I_Limits[P1][axis]) 
    83c4:	ed a5       	ldd	r30, Y+45	; 0x2d
    83c6:	fe a5       	ldd	r31, Y+46	; 0x2e
    83c8:	c1 90       	ld	r12, Z+
    83ca:	d1 90       	ld	r13, Z+
    83cc:	e1 90       	ld	r14, Z+
    83ce:	f1 90       	ld	r15, Z+
    83d0:	fe a7       	std	Y+46, r31	; 0x2e
    83d2:	ed a7       	std	Y+45, r30	; 0x2d
    83d4:	c4 14       	cp	r12, r4
    83d6:	d5 04       	cpc	r13, r5
    83d8:	e6 04       	cpc	r14, r6
    83da:	f7 04       	cpc	r15, r7
    83dc:	84 f0       	brlt	.+32     	; 0x83fe <Calculate_PID+0x2d6>
		{
			PID_Gyro_I_actual1 = Config.Raw_I_Limits[P1][axis];
		}
		else if (PID_Gyro_I_actual1 < -Config.Raw_I_Limits[P1][axis]) 
    83de:	00 27       	eor	r16, r16
    83e0:	11 27       	eor	r17, r17
    83e2:	98 01       	movw	r18, r16
    83e4:	0c 19       	sub	r16, r12
    83e6:	1d 09       	sbc	r17, r13
    83e8:	2e 09       	sbc	r18, r14
    83ea:	3f 09       	sbc	r19, r15
    83ec:	73 01       	movw	r14, r6
    83ee:	62 01       	movw	r12, r4
    83f0:	40 16       	cp	r4, r16
    83f2:	51 06       	cpc	r5, r17
    83f4:	62 06       	cpc	r6, r18
    83f6:	73 06       	cpc	r7, r19
    83f8:	14 f4       	brge	.+4      	; 0x83fe <Calculate_PID+0x2d6>
    83fa:	68 01       	movw	r12, r16
    83fc:	79 01       	movw	r14, r18
		{
			PID_Gyro_I_actual1 = -Config.Raw_I_Limits[P1][axis];	
		}

		// P2 limits
		if (PID_Gyro_I_actual2 > Config.Raw_I_Limits[P2][axis]) 
    83fe:	eb a5       	ldd	r30, Y+43	; 0x2b
    8400:	fc a5       	ldd	r31, Y+44	; 0x2c
    8402:	21 91       	ld	r18, Z+
    8404:	31 91       	ld	r19, Z+
    8406:	41 91       	ld	r20, Z+
    8408:	51 91       	ld	r21, Z+
    840a:	fc a7       	std	Y+44, r31	; 0x2c
    840c:	eb a7       	std	Y+43, r30	; 0x2b
    840e:	2b 8f       	std	Y+27, r18	; 0x1b
    8410:	3c 8f       	std	Y+28, r19	; 0x1c
    8412:	4d 8f       	std	Y+29, r20	; 0x1d
    8414:	5e 8f       	std	Y+30, r21	; 0x1e
    8416:	26 17       	cp	r18, r22
    8418:	37 07       	cpc	r19, r23
    841a:	48 07       	cpc	r20, r24
    841c:	59 07       	cpc	r21, r25
    841e:	b4 f0       	brlt	.+44     	; 0x844c <Calculate_PID+0x324>
		{
			PID_Gyro_I_actual2 = Config.Raw_I_Limits[P2][axis];
		}
		else if (PID_Gyro_I_actual2 < -Config.Raw_I_Limits[P2][axis]) 
    8420:	89 01       	movw	r16, r18
    8422:	9a 01       	movw	r18, r20
    8424:	30 95       	com	r19
    8426:	20 95       	com	r18
    8428:	10 95       	com	r17
    842a:	01 95       	neg	r16
    842c:	1f 4f       	sbci	r17, 0xFF	; 255
    842e:	2f 4f       	sbci	r18, 0xFF	; 255
    8430:	3f 4f       	sbci	r19, 0xFF	; 255
    8432:	6b 8f       	std	Y+27, r22	; 0x1b
    8434:	7c 8f       	std	Y+28, r23	; 0x1c
    8436:	8d 8f       	std	Y+29, r24	; 0x1d
    8438:	9e 8f       	std	Y+30, r25	; 0x1e
    843a:	60 17       	cp	r22, r16
    843c:	71 07       	cpc	r23, r17
    843e:	82 07       	cpc	r24, r18
    8440:	93 07       	cpc	r25, r19
    8442:	24 f4       	brge	.+8      	; 0x844c <Calculate_PID+0x324>
    8444:	0b 8f       	std	Y+27, r16	; 0x1b
    8446:	1c 8f       	std	Y+28, r17	; 0x1c
    8448:	2d 8f       	std	Y+29, r18	; 0x1d
    844a:	3e 8f       	std	Y+30, r19	; 0x1e

		//************************************************************
		// Sum Gyro P, I and D terms and rescale
		//************************************************************

		PID_Gyros[P1][axis] = (int16_t)((PID_gyro_temp1 + PID_Gyro_I_actual1) >> PID_SCALE);
    844c:	25 96       	adiw	r28, 0x05	; 5
    844e:	4c ac       	ldd	r4, Y+60	; 0x3c
    8450:	5d ac       	ldd	r5, Y+61	; 0x3d
    8452:	6e ac       	ldd	r6, Y+62	; 0x3e
    8454:	7f ac       	ldd	r7, Y+63	; 0x3f
    8456:	25 97       	sbiw	r28, 0x05	; 5
    8458:	4c 0c       	add	r4, r12
    845a:	5d 1c       	adc	r5, r13
    845c:	6e 1c       	adc	r6, r14
    845e:	7f 1c       	adc	r7, r15
    8460:	a6 e0       	ldi	r26, 0x06	; 6
    8462:	75 94       	asr	r7
    8464:	67 94       	ror	r6
    8466:	57 94       	ror	r5
    8468:	47 94       	ror	r4
    846a:	aa 95       	dec	r26
    846c:	d1 f7       	brne	.-12     	; 0x8462 <Calculate_PID+0x33a>
    846e:	eb a1       	ldd	r30, Y+35	; 0x23
    8470:	fc a1       	ldd	r31, Y+36	; 0x24
    8472:	51 82       	std	Z+1, r5	; 0x01
    8474:	40 82       	st	Z, r4
		PID_Gyros[P2][axis] = (int16_t)((PID_gyro_temp2 + PID_Gyro_I_actual2) >> PID_SCALE);
    8476:	8b 8d       	ldd	r24, Y+27	; 0x1b
    8478:	9c 8d       	ldd	r25, Y+28	; 0x1c
    847a:	ad 8d       	ldd	r26, Y+29	; 0x1d
    847c:	be 8d       	ldd	r27, Y+30	; 0x1e
    847e:	88 0d       	add	r24, r8
    8480:	99 1d       	adc	r25, r9
    8482:	aa 1d       	adc	r26, r10
    8484:	bb 1d       	adc	r27, r11
    8486:	16 e0       	ldi	r17, 0x06	; 6
    8488:	b5 95       	asr	r27
    848a:	a7 95       	ror	r26
    848c:	97 95       	ror	r25
    848e:	87 95       	ror	r24
    8490:	1a 95       	dec	r17
    8492:	d1 f7       	brne	.-12     	; 0x8488 <Calculate_PID+0x360>
    8494:	97 83       	std	Z+7, r25	; 0x07
    8496:	86 83       	std	Z+6, r24	; 0x06

		//************************************************************
		// Calculate error from angle data and trim (roll and pitch only)
		//************************************************************

		if (axis < YAW)
    8498:	2a 96       	adiw	r28, 0x0a	; 10
    849a:	ff ad       	ldd	r31, Y+63	; 0x3f
    849c:	2a 97       	sbiw	r28, 0x0a	; 10
    849e:	f2 30       	cpi	r31, 0x02	; 2
    84a0:	e9 f1       	breq	.+122    	; 0x851c <Calculate_PID+0x3f4>
		{
			// Do for P1 and P2
			for (i = P1; i <= P2; i++)
			{
				PID_acc_temp1 = angle[axis] - L_trim[i][axis];				// Offset angle with trim
    84a2:	ef a1       	ldd	r30, Y+39	; 0x27
    84a4:	f8 a5       	ldd	r31, Y+40	; 0x28
    84a6:	40 81       	ld	r20, Z
    84a8:	51 81       	ldd	r21, Z+1	; 0x01
    84aa:	e9 a1       	ldd	r30, Y+33	; 0x21
    84ac:	fa a1       	ldd	r31, Y+34	; 0x22
    84ae:	80 81       	ld	r24, Z
    84b0:	91 81       	ldd	r25, Z+1	; 0x01
    84b2:	9a 01       	movw	r18, r20
    84b4:	28 1b       	sub	r18, r24
    84b6:	39 0b       	sbc	r19, r25
    84b8:	a9 e0       	ldi	r26, 0x09	; 9
    84ba:	b0 e0       	ldi	r27, 0x00	; 0
    84bc:	ac 0f       	add	r26, r28
    84be:	bd 1f       	adc	r27, r29
    84c0:	2b 96       	adiw	r28, 0x0b	; 11
    84c2:	ee ad       	ldd	r30, Y+62	; 0x3e
    84c4:	ff ad       	ldd	r31, Y+63	; 0x3f
    84c6:	2b 97       	sbiw	r28, 0x0b	; 11
    84c8:	ae 0f       	add	r26, r30
    84ca:	bf 1f       	adc	r27, r31
				PID_acc_temp1 *= L_gain[i][axis];							// P-term of accelerometer (Max gain of 127)
    84cc:	ac 91       	ld	r26, X
    84ce:	bb 27       	eor	r27, r27
    84d0:	a7 fd       	sbrc	r26, 7
    84d2:	b0 95       	com	r27
    84d4:	0e 94 b6 48 	call	0x916c	; 0x916c <__mulhisi3>
				PID_ACCs[i][axis] = (int16_t)(PID_acc_temp1 >> 8);			// Reduce and convert to integer
    84d8:	bb 27       	eor	r27, r27
    84da:	97 fd       	sbrc	r25, 7
    84dc:	ba 95       	dec	r27
    84de:	a9 2f       	mov	r26, r25
    84e0:	98 2f       	mov	r25, r24
    84e2:	87 2f       	mov	r24, r23
    84e4:	ef 8d       	ldd	r30, Y+31	; 0x1f
    84e6:	f8 a1       	ldd	r31, Y+32	; 0x20
    84e8:	91 83       	std	Z+1, r25	; 0x01
    84ea:	80 83       	st	Z, r24
		if (axis < YAW)
		{
			// Do for P1 and P2
			for (i = P1; i <= P2; i++)
			{
				PID_acc_temp1 = angle[axis] - L_trim[i][axis];				// Offset angle with trim
    84ec:	e9 a1       	ldd	r30, Y+33	; 0x21
    84ee:	fa a1       	ldd	r31, Y+34	; 0x22
    84f0:	84 81       	ldd	r24, Z+4	; 0x04
    84f2:	95 81       	ldd	r25, Z+5	; 0x05
    84f4:	9a 01       	movw	r18, r20
    84f6:	28 1b       	sub	r18, r24
    84f8:	39 0b       	sbc	r19, r25
				PID_acc_temp1 *= L_gain[i][axis];							// P-term of accelerometer (Max gain of 127)
    84fa:	f1 01       	movw	r30, r2
    84fc:	a0 81       	ld	r26, Z
    84fe:	bb 27       	eor	r27, r27
    8500:	a7 fd       	sbrc	r26, 7
    8502:	b0 95       	com	r27
    8504:	0e 94 b6 48 	call	0x916c	; 0x916c <__mulhisi3>
				PID_ACCs[i][axis] = (int16_t)(PID_acc_temp1 >> 8);			// Reduce and convert to integer
    8508:	bb 27       	eor	r27, r27
    850a:	97 fd       	sbrc	r25, 7
    850c:	ba 95       	dec	r27
    850e:	a9 2f       	mov	r26, r25
    8510:	98 2f       	mov	r25, r24
    8512:	87 2f       	mov	r24, r23
    8514:	ef 8d       	ldd	r30, Y+31	; 0x1f
    8516:	f8 a1       	ldd	r31, Y+32	; 0x20
    8518:	97 83       	std	Z+7, r25	; 0x07
    851a:	86 83       	std	Z+6, r24	; 0x06
	PID_AvgAccVert = 0;							// Reset average

	//************************************************************
	// PID loop
	//************************************************************
	for (axis = 0; axis <= YAW; axis ++)
    851c:	2b 96       	adiw	r28, 0x0b	; 11
    851e:	ee ad       	ldd	r30, Y+62	; 0x3e
    8520:	ff ad       	ldd	r31, Y+63	; 0x3f
    8522:	2b 97       	sbiw	r28, 0x0b	; 11
    8524:	32 97       	sbiw	r30, 0x02	; 2
    8526:	e1 f1       	breq	.+120    	; 0x85a0 <Calculate_PID+0x478>
	{
		//************************************************************
		// Add in gyro Yaw trim
		//************************************************************

		if (axis == YAW)
    8528:	2a 96       	adiw	r28, 0x0a	; 10
    852a:	ff ad       	ldd	r31, Y+63	; 0x3f
    852c:	2a 97       	sbiw	r28, 0x0a	; 10
    852e:	f1 30       	cpi	r31, 0x01	; 1
    8530:	39 f0       	breq	.+14     	; 0x8540 <Calculate_PID+0x418>
		}
		// Reset PID_gyro variables to that data does not accumulate cross-axis
		else
		{
			PID_gyro_temp1 = 0;
			PID_gyro_temp2 = 0;
    8532:	81 2c       	mov	r8, r1
    8534:	91 2c       	mov	r9, r1
    8536:	54 01       	movw	r10, r8
			PID_gyro_temp2 = (int32_t)(Config.FlightMode[P2].Yaw_trim << 6);
		}
		// Reset PID_gyro variables to that data does not accumulate cross-axis
		else
		{
			PID_gyro_temp1 = 0;
    8538:	80 e0       	ldi	r24, 0x00	; 0
    853a:	90 e0       	ldi	r25, 0x00	; 0
    853c:	dc 01       	movw	r26, r24
    853e:	0a c0       	rjmp	.+20     	; 0x8554 <Calculate_PID+0x42c>
		//************************************************************

		if (axis == YAW)
		{
			PID_gyro_temp1 = (int32_t)(Config.FlightMode[P1].Yaw_trim << 6);
			PID_gyro_temp2 = (int32_t)(Config.FlightMode[P2].Yaw_trim << 6);
    8540:	21 96       	adiw	r28, 0x01	; 1
    8542:	8c ac       	ldd	r8, Y+60	; 0x3c
    8544:	9d ac       	ldd	r9, Y+61	; 0x3d
    8546:	ae ac       	ldd	r10, Y+62	; 0x3e
    8548:	bf ac       	ldd	r11, Y+63	; 0x3f
    854a:	21 97       	sbiw	r28, 0x01	; 1
		// Add in gyro Yaw trim
		//************************************************************

		if (axis == YAW)
		{
			PID_gyro_temp1 = (int32_t)(Config.FlightMode[P1].Yaw_trim << 6);
    854c:	89 ad       	ldd	r24, Y+57	; 0x39
    854e:	9a ad       	ldd	r25, Y+58	; 0x3a
    8550:	ab ad       	ldd	r26, Y+59	; 0x3b
    8552:	bc ad       	ldd	r27, Y+60	; 0x3c
    8554:	2b 96       	adiw	r28, 0x0b	; 11
    8556:	ee ad       	ldd	r30, Y+62	; 0x3e
    8558:	ff ad       	ldd	r31, Y+63	; 0x3f
    855a:	2b 97       	sbiw	r28, 0x0b	; 11
    855c:	31 96       	adiw	r30, 0x01	; 1
    855e:	2b 96       	adiw	r28, 0x0b	; 11
    8560:	ff af       	std	Y+63, r31	; 0x3f
    8562:	ee af       	std	Y+62, r30	; 0x3e
    8564:	2b 97       	sbiw	r28, 0x0b	; 11
    8566:	ed a1       	ldd	r30, Y+37	; 0x25
    8568:	fe a1       	ldd	r31, Y+38	; 0x26
    856a:	34 96       	adiw	r30, 0x04	; 4
    856c:	fe a3       	std	Y+38, r31	; 0x26
    856e:	ed a3       	std	Y+37, r30	; 0x25
    8570:	eb a1       	ldd	r30, Y+35	; 0x23
    8572:	fc a1       	ldd	r31, Y+36	; 0x24
    8574:	32 96       	adiw	r30, 0x02	; 2
    8576:	fc a3       	std	Y+36, r31	; 0x24
    8578:	eb a3       	std	Y+35, r30	; 0x23
    857a:	ef a1       	ldd	r30, Y+39	; 0x27
    857c:	f8 a5       	ldd	r31, Y+40	; 0x28
    857e:	32 96       	adiw	r30, 0x02	; 2
    8580:	f8 a7       	std	Y+40, r31	; 0x28
    8582:	ef a3       	std	Y+39, r30	; 0x27
    8584:	e9 a1       	ldd	r30, Y+33	; 0x21
    8586:	fa a1       	ldd	r31, Y+34	; 0x22
    8588:	32 96       	adiw	r30, 0x02	; 2
    858a:	fa a3       	std	Y+34, r31	; 0x22
    858c:	e9 a3       	std	Y+33, r30	; 0x21
    858e:	ef 8d       	ldd	r30, Y+31	; 0x1f
    8590:	f8 a1       	ldd	r31, Y+32	; 0x20
    8592:	32 96       	adiw	r30, 0x02	; 2
    8594:	f8 a3       	std	Y+32, r31	; 0x20
    8596:	ef 8f       	std	Y+31, r30	; 0x1f
    8598:	ff ef       	ldi	r31, 0xFF	; 255
    859a:	2f 1a       	sub	r2, r31
    859c:	3f 0a       	sbc	r3, r31
    859e:	a8 ce       	rjmp	.-688    	; 0x82f0 <Calculate_PID+0x1c8>
	//************************************************************

	// Do for P1 and P2
	for (i = P1; i <= P2; i++)
	{
		PID_acc_temp1 = -AvAccVert;				// Get and copy Z-acc value. Negate to oppose G
    85a0:	27 96       	adiw	r28, 0x07	; 7
    85a2:	ce ac       	ldd	r12, Y+62	; 0x3e
    85a4:	df ac       	ldd	r13, Y+63	; 0x3f
    85a6:	27 97       	sbiw	r28, 0x07	; 7
    85a8:	d1 94       	neg	r13
    85aa:	c1 94       	neg	r12
    85ac:	d1 08       	sbc	r13, r1

		PID_acc_temp1 *= L_gain[i][YAW];		// Multiply P-term (Max gain of 127)
    85ae:	96 01       	movw	r18, r12
    85b0:	f9 a5       	ldd	r31, Y+41	; 0x29
    85b2:	af 2f       	mov	r26, r31
    85b4:	bb 27       	eor	r27, r27
    85b6:	a7 fd       	sbrc	r26, 7
    85b8:	b0 95       	com	r27
    85ba:	0e 94 b6 48 	call	0x916c	; 0x916c <__mulhisi3>

		PID_acc_temp1 = PID_acc_temp1 >> 4;		// Moderate Z-acc to reasonable values
    85be:	44 e0       	ldi	r20, 0x04	; 4
    85c0:	95 95       	asr	r25
    85c2:	87 95       	ror	r24
    85c4:	77 95       	ror	r23
    85c6:	67 95       	ror	r22
    85c8:	4a 95       	dec	r20
    85ca:	d1 f7       	brne	.-12     	; 0x85c0 <Calculate_PID+0x498>

		if (PID_acc_temp1 > MAX_ZGAIN)			// Limit to +/-MAX_ZGAIN
    85cc:	65 3f       	cpi	r22, 0xF5	; 245
    85ce:	21 e0       	ldi	r18, 0x01	; 1
    85d0:	72 07       	cpc	r23, r18
    85d2:	81 05       	cpc	r24, r1
    85d4:	91 05       	cpc	r25, r1
    85d6:	64 f4       	brge	.+24     	; 0x85f0 <Calculate_PID+0x4c8>
		{
			PID_acc_temp1 = MAX_ZGAIN;
		}
		if (PID_acc_temp1 < -MAX_ZGAIN)
    85d8:	6c 30       	cpi	r22, 0x0C	; 12
    85da:	3e ef       	ldi	r19, 0xFE	; 254
    85dc:	73 07       	cpc	r23, r19
    85de:	3f ef       	ldi	r19, 0xFF	; 255
    85e0:	83 07       	cpc	r24, r19
    85e2:	93 07       	cpc	r25, r19
    85e4:	4c f4       	brge	.+18     	; 0x85f8 <Calculate_PID+0x4d0>
		{
			PID_acc_temp1 = -MAX_ZGAIN;
    85e6:	6c e0       	ldi	r22, 0x0C	; 12
    85e8:	7e ef       	ldi	r23, 0xFE	; 254
    85ea:	8f ef       	ldi	r24, 0xFF	; 255
    85ec:	9f ef       	ldi	r25, 0xFF	; 255
    85ee:	04 c0       	rjmp	.+8      	; 0x85f8 <Calculate_PID+0x4d0>

		PID_acc_temp1 = PID_acc_temp1 >> 4;		// Moderate Z-acc to reasonable values

		if (PID_acc_temp1 > MAX_ZGAIN)			// Limit to +/-MAX_ZGAIN
		{
			PID_acc_temp1 = MAX_ZGAIN;
    85f0:	64 ef       	ldi	r22, 0xF4	; 244
    85f2:	71 e0       	ldi	r23, 0x01	; 1
    85f4:	80 e0       	ldi	r24, 0x00	; 0
    85f6:	90 e0       	ldi	r25, 0x00	; 0
		if (PID_acc_temp1 < -MAX_ZGAIN)
		{
			PID_acc_temp1 = -MAX_ZGAIN;
		}

		PID_ACCs[i][YAW] = (int16_t)PID_acc_temp1; // Copy to global values
    85f8:	70 93 1a 08 	sts	0x081A, r23
    85fc:	60 93 19 08 	sts	0x0819, r22
	// Do for P1 and P2
	for (i = P1; i <= P2; i++)
	{
		PID_acc_temp1 = -AvAccVert;				// Get and copy Z-acc value. Negate to oppose G

		PID_acc_temp1 *= L_gain[i][YAW];		// Multiply P-term (Max gain of 127)
    8600:	96 01       	movw	r18, r12
    8602:	4a a5       	ldd	r20, Y+42	; 0x2a
    8604:	a4 2f       	mov	r26, r20
    8606:	bb 27       	eor	r27, r27
    8608:	a7 fd       	sbrc	r26, 7
    860a:	b0 95       	com	r27
    860c:	0e 94 b6 48 	call	0x916c	; 0x916c <__mulhisi3>

		PID_acc_temp1 = PID_acc_temp1 >> 4;		// Moderate Z-acc to reasonable values
    8610:	34 e0       	ldi	r19, 0x04	; 4
    8612:	95 95       	asr	r25
    8614:	87 95       	ror	r24
    8616:	77 95       	ror	r23
    8618:	67 95       	ror	r22
    861a:	3a 95       	dec	r19
    861c:	d1 f7       	brne	.-12     	; 0x8612 <Calculate_PID+0x4ea>

		if (PID_acc_temp1 > MAX_ZGAIN)			// Limit to +/-MAX_ZGAIN
    861e:	65 3f       	cpi	r22, 0xF5	; 245
    8620:	51 e0       	ldi	r21, 0x01	; 1
    8622:	75 07       	cpc	r23, r21
    8624:	81 05       	cpc	r24, r1
    8626:	91 05       	cpc	r25, r1
    8628:	64 f4       	brge	.+24     	; 0x8642 <Calculate_PID+0x51a>
		{
			PID_acc_temp1 = MAX_ZGAIN;
		}
		if (PID_acc_temp1 < -MAX_ZGAIN)
    862a:	6c 30       	cpi	r22, 0x0C	; 12
    862c:	ae ef       	ldi	r26, 0xFE	; 254
    862e:	7a 07       	cpc	r23, r26
    8630:	af ef       	ldi	r26, 0xFF	; 255
    8632:	8a 07       	cpc	r24, r26
    8634:	9a 07       	cpc	r25, r26
    8636:	4c f4       	brge	.+18     	; 0x864a <Calculate_PID+0x522>
		{
			PID_acc_temp1 = -MAX_ZGAIN;
    8638:	6c e0       	ldi	r22, 0x0C	; 12
    863a:	7e ef       	ldi	r23, 0xFE	; 254
    863c:	8f ef       	ldi	r24, 0xFF	; 255
    863e:	9f ef       	ldi	r25, 0xFF	; 255
    8640:	04 c0       	rjmp	.+8      	; 0x864a <Calculate_PID+0x522>

		PID_acc_temp1 = PID_acc_temp1 >> 4;		// Moderate Z-acc to reasonable values

		if (PID_acc_temp1 > MAX_ZGAIN)			// Limit to +/-MAX_ZGAIN
		{
			PID_acc_temp1 = MAX_ZGAIN;
    8642:	64 ef       	ldi	r22, 0xF4	; 244
    8644:	71 e0       	ldi	r23, 0x01	; 1
    8646:	80 e0       	ldi	r24, 0x00	; 0
    8648:	90 e0       	ldi	r25, 0x00	; 0
		if (PID_acc_temp1 < -MAX_ZGAIN)
		{
			PID_acc_temp1 = -MAX_ZGAIN;
		}

		PID_ACCs[i][YAW] = (int16_t)PID_acc_temp1; // Copy to global values
    864a:	70 93 20 08 	sts	0x0820, r23
    864e:	60 93 1f 08 	sts	0x081F, r22
	}
}
    8652:	c6 5b       	subi	r28, 0xB6	; 182
    8654:	df 4f       	sbci	r29, 0xFF	; 255
    8656:	0f b6       	in	r0, 0x3f	; 63
    8658:	f8 94       	cli
    865a:	de bf       	out	0x3e, r29	; 62
    865c:	0f be       	out	0x3f, r0	; 63
    865e:	cd bf       	out	0x3d, r28	; 61
    8660:	df 91       	pop	r29
    8662:	cf 91       	pop	r28
    8664:	1f 91       	pop	r17
    8666:	0f 91       	pop	r16
    8668:	ff 90       	pop	r15
    866a:	ef 90       	pop	r14
    866c:	df 90       	pop	r13
    866e:	cf 90       	pop	r12
    8670:	bf 90       	pop	r11
    8672:	af 90       	pop	r10
    8674:	9f 90       	pop	r9
    8676:	8f 90       	pop	r8
    8678:	7f 90       	pop	r7
    867a:	6f 90       	pop	r6
    867c:	5f 90       	pop	r5
    867e:	4f 90       	pop	r4
    8680:	3f 90       	pop	r3
    8682:	2f 90       	pop	r2
    8684:	08 95       	ret

00008686 <RxGetChannels>:
volatile int16_t MonopolarThrottle;				// Monopolar throttle

// Get raw flight channel data (~2500 to 5000) and remove zero offset
// Use channel mapping for reconfigurability
void RxGetChannels(void)
{
    8686:	e3 e8       	ldi	r30, 0x83	; 131
    8688:	f7 e0       	ldi	r31, 0x07	; 7
	static	int16_t	OldRxSum;			// Sum of all major channels
	int16_t	RxSumDiff;
	int16_t	RxSum, i;

	// Remove zero offsets
	for (i=0; i < MAX_RC_CHANNELS; i++)
    868a:	80 e0       	ldi	r24, 0x00	; 0
    868c:	90 e0       	ldi	r25, 0x00	; 0
	{
		RCinputs[i]	= RxChannel[i] - Config.RxChannelZeroOffset[i];
    868e:	ac 01       	movw	r20, r24
    8690:	44 0f       	add	r20, r20
    8692:	55 1f       	adc	r21, r21
    8694:	da 01       	movw	r26, r20
    8696:	ae 54       	subi	r26, 0x4E	; 78
    8698:	b8 4f       	sbci	r27, 0xF8	; 248
    869a:	2d 91       	ld	r18, X+
    869c:	3c 91       	ld	r19, X
    869e:	61 91       	ld	r22, Z+
    86a0:	71 91       	ld	r23, Z+
    86a2:	26 1b       	sub	r18, r22
    86a4:	37 0b       	sbc	r19, r23
    86a6:	da 01       	movw	r26, r20
    86a8:	ad 5d       	subi	r26, 0xDD	; 221
    86aa:	b7 4f       	sbci	r27, 0xF7	; 247
    86ac:	11 96       	adiw	r26, 0x01	; 1
    86ae:	3c 93       	st	X, r19
    86b0:	2e 93       	st	-X, r18
	static	int16_t	OldRxSum;			// Sum of all major channels
	int16_t	RxSumDiff;
	int16_t	RxSum, i;

	// Remove zero offsets
	for (i=0; i < MAX_RC_CHANNELS; i++)
    86b2:	01 96       	adiw	r24, 0x01	; 1
    86b4:	88 30       	cpi	r24, 0x08	; 8
    86b6:	91 05       	cpc	r25, r1
    86b8:	51 f7       	brne	.-44     	; 0x868e <RxGetChannels+0x8>
	{
		RCinputs[i]	= RxChannel[i] - Config.RxChannelZeroOffset[i];
	}

	// Special handling for monopolar throttle
	MonopolarThrottle = RxChannel[THROTTLE] - Config.RxChannelZeroOffset[THROTTLE];
    86ba:	80 91 b2 07 	lds	r24, 0x07B2
    86be:	90 91 b3 07 	lds	r25, 0x07B3
    86c2:	20 91 83 07 	lds	r18, 0x0783
    86c6:	30 91 84 07 	lds	r19, 0x0784
    86ca:	82 1b       	sub	r24, r18
    86cc:	93 0b       	sbc	r25, r19
    86ce:	90 93 22 08 	sts	0x0822, r25
    86d2:	80 93 21 08 	sts	0x0821, r24

	// Bipolar throttle must use the nominal mid-point
	RCinputs[THROTTLE] = RxChannel[THROTTLE] - 3750; 
    86d6:	80 91 b2 07 	lds	r24, 0x07B2
    86da:	90 91 b3 07 	lds	r25, 0x07B3
    86de:	86 5a       	subi	r24, 0xA6	; 166
    86e0:	9e 40       	sbci	r25, 0x0E	; 14
    86e2:	90 93 24 08 	sts	0x0824, r25
    86e6:	80 93 23 08 	sts	0x0823, r24

	// Reverse primary channels as requested
	if (Config.AileronPol == REVERSED)
    86ea:	80 91 d9 05 	lds	r24, 0x05D9
    86ee:	81 30       	cpi	r24, 0x01	; 1
    86f0:	59 f4       	brne	.+22     	; 0x8708 <RxGetChannels+0x82>
	{
		RCinputs[AILERON] = -RCinputs[AILERON];
    86f2:	80 91 25 08 	lds	r24, 0x0825
    86f6:	90 91 26 08 	lds	r25, 0x0826
    86fa:	91 95       	neg	r25
    86fc:	81 95       	neg	r24
    86fe:	91 09       	sbc	r25, r1
    8700:	90 93 26 08 	sts	0x0826, r25
    8704:	80 93 25 08 	sts	0x0825, r24
	}

	if (Config.ElevatorPol == REVERSED)
    8708:	80 91 da 05 	lds	r24, 0x05DA
    870c:	81 30       	cpi	r24, 0x01	; 1
    870e:	59 f4       	brne	.+22     	; 0x8726 <RxGetChannels+0xa0>
	{
		RCinputs[ELEVATOR] = -RCinputs[ELEVATOR];
    8710:	80 91 27 08 	lds	r24, 0x0827
    8714:	90 91 28 08 	lds	r25, 0x0828
    8718:	91 95       	neg	r25
    871a:	81 95       	neg	r24
    871c:	91 09       	sbc	r25, r1
    871e:	90 93 28 08 	sts	0x0828, r25
    8722:	80 93 27 08 	sts	0x0827, r24
	}

	if (Config.RudderPol == REVERSED)
    8726:	80 91 3a 06 	lds	r24, 0x063A
    872a:	81 30       	cpi	r24, 0x01	; 1
    872c:	59 f4       	brne	.+22     	; 0x8744 <RxGetChannels+0xbe>
	{
		RCinputs[RUDDER] = -RCinputs[RUDDER];
    872e:	80 91 29 08 	lds	r24, 0x0829
    8732:	90 91 2a 08 	lds	r25, 0x082A
    8736:	91 95       	neg	r25
    8738:	81 95       	neg	r24
    873a:	91 09       	sbc	r25, r1
    873c:	90 93 2a 08 	sts	0x082A, r25
    8740:	80 93 29 08 	sts	0x0829, r24
	}

	// Calculate RX activity
	RxSum = RCinputs[AILERON] + RCinputs[ELEVATOR] + RCinputs[RUDDER];
    8744:	80 91 25 08 	lds	r24, 0x0825
    8748:	90 91 26 08 	lds	r25, 0x0826
    874c:	40 91 27 08 	lds	r20, 0x0827
    8750:	50 91 28 08 	lds	r21, 0x0828
    8754:	20 91 29 08 	lds	r18, 0x0829
    8758:	30 91 2a 08 	lds	r19, 0x082A
    875c:	84 0f       	add	r24, r20
    875e:	95 1f       	adc	r25, r21
    8760:	82 0f       	add	r24, r18
    8762:	93 1f       	adc	r25, r19
	RxSumDiff = RxSum - OldRxSum;
    8764:	20 91 3a 05 	lds	r18, 0x053A
    8768:	30 91 3b 05 	lds	r19, 0x053B
    876c:	ac 01       	movw	r20, r24
    876e:	42 1b       	sub	r20, r18
    8770:	53 0b       	sbc	r21, r19
    8772:	9a 01       	movw	r18, r20

	// Set RX activity flag if movement above noise floor or throttle above minimum
	if ((RxSumDiff > NOISE_THRESH) || (RxSumDiff < -NOISE_THRESH) || (MonopolarThrottle > THROTTLEIDLE)) 
    8774:	2b 5f       	subi	r18, 0xFB	; 251
    8776:	3f 4f       	sbci	r19, 0xFF	; 255
    8778:	2b 30       	cpi	r18, 0x0B	; 11
    877a:	31 05       	cpc	r19, r1
    877c:	38 f4       	brcc	.+14     	; 0x878c <RxGetChannels+0x106>
    877e:	20 91 21 08 	lds	r18, 0x0821
    8782:	30 91 22 08 	lds	r19, 0x0822
    8786:	23 33       	cpi	r18, 0x33	; 51
    8788:	31 05       	cpc	r19, r1
    878a:	24 f0       	brlt	.+8      	; 0x8794 <RxGetChannels+0x10e>
	{
		Flight_flags |= (1 << RxActivity);
    878c:	20 91 1d 05 	lds	r18, 0x051D
    8790:	21 60       	ori	r18, 0x01	; 1
    8792:	03 c0       	rjmp	.+6      	; 0x879a <RxGetChannels+0x114>
	}
	else 
	{
		Flight_flags &= ~(1 << RxActivity);
    8794:	20 91 1d 05 	lds	r18, 0x051D
    8798:	2e 7f       	andi	r18, 0xFE	; 254
    879a:	20 93 1d 05 	sts	0x051D, r18
	}
	
	// Preset RCinputs[NOCHAN] for sanity
	RCinputs[NOCHAN] = 0;
    879e:	10 92 34 08 	sts	0x0834, r1
    87a2:	10 92 33 08 	sts	0x0833, r1

	OldRxSum = RxSum;
    87a6:	90 93 3b 05 	sts	0x053B, r25
    87aa:	80 93 3a 05 	sts	0x053A, r24
    87ae:	08 95       	ret

000087b0 <CenterSticks>:
}

// Center sticks on request from Menu
void CenterSticks(void)		
{
    87b0:	0f 93       	push	r16
    87b2:	1f 93       	push	r17
    87b4:	cf 93       	push	r28
    87b6:	df 93       	push	r29
    87b8:	cd b7       	in	r28, 0x3d	; 61
    87ba:	de b7       	in	r29, 0x3e	; 62
    87bc:	60 97       	sbiw	r28, 0x10	; 16
    87be:	0f b6       	in	r0, 0x3f	; 63
    87c0:	f8 94       	cli
    87c2:	de bf       	out	0x3e, r29	; 62
    87c4:	0f be       	out	0x3f, r0	; 63
    87c6:	cd bf       	out	0x3d, r28	; 61
	uint8_t i, j;
	uint16_t RxChannelZeroOffset[MAX_RC_CHANNELS] = {0,0,0,0,0,0,0,0};
    87c8:	8e 01       	movw	r16, r28
    87ca:	0f 5f       	subi	r16, 0xFF	; 255
    87cc:	1f 4f       	sbci	r17, 0xFF	; 255
    87ce:	80 e1       	ldi	r24, 0x10	; 16
    87d0:	d8 01       	movw	r26, r16
    87d2:	1d 92       	st	X+, r1
    87d4:	8a 95       	dec	r24
    87d6:	e9 f7       	brne	.-6      	; 0x87d2 <CenterSticks+0x22>
    87d8:	68 e0       	ldi	r22, 0x08	; 8
	OldRxSum = RxSum;
}

// Center sticks on request from Menu
void CenterSticks(void)		
{
    87da:	d8 01       	movw	r26, r16
    87dc:	80 e0       	ldi	r24, 0x00	; 0
    87de:	90 e0       	ldi	r25, 0x00	; 0
	// RxChannel will auto-update every RC frame (normally 46Hz or so)
	for (i=0; i<8; i++)
	{
		for (j=0; j<MAX_RC_CHANNELS; j++)
		{
			RxChannelZeroOffset[j] += RxChannel[j];
    87e0:	9c 01       	movw	r18, r24
    87e2:	22 0f       	add	r18, r18
    87e4:	33 1f       	adc	r19, r19
    87e6:	2e 54       	subi	r18, 0x4E	; 78
    87e8:	38 4f       	sbci	r19, 0xF8	; 248
    87ea:	f9 01       	movw	r30, r18
    87ec:	40 81       	ld	r20, Z
    87ee:	51 81       	ldd	r21, Z+1	; 0x01
    87f0:	2d 91       	ld	r18, X+
    87f2:	3c 91       	ld	r19, X
    87f4:	11 97       	sbiw	r26, 0x01	; 1
    87f6:	24 0f       	add	r18, r20
    87f8:	35 1f       	adc	r19, r21
    87fa:	2d 93       	st	X+, r18
    87fc:	3d 93       	st	X+, r19
    87fe:	01 96       	adiw	r24, 0x01	; 1

	// Take an average of eight readings
	// RxChannel will auto-update every RC frame (normally 46Hz or so)
	for (i=0; i<8; i++)
	{
		for (j=0; j<MAX_RC_CHANNELS; j++)
    8800:	88 30       	cpi	r24, 0x08	; 8
    8802:	91 05       	cpc	r25, r1
    8804:	69 f7       	brne	.-38     	; 0x87e0 <CenterSticks+0x30>
    8806:	ff e7       	ldi	r31, 0x7F	; 127
    8808:	2a e1       	ldi	r18, 0x1A	; 26
    880a:	86 e0       	ldi	r24, 0x06	; 6
    880c:	f1 50       	subi	r31, 0x01	; 1
    880e:	20 40       	sbci	r18, 0x00	; 0
    8810:	80 40       	sbci	r24, 0x00	; 0
    8812:	e1 f7       	brne	.-8      	; 0x880c <CenterSticks+0x5c>
    8814:	00 c0       	rjmp	.+0      	; 0x8816 <CenterSticks+0x66>
    8816:	00 00       	nop
    8818:	61 50       	subi	r22, 0x01	; 1
	uint8_t i, j;
	uint16_t RxChannelZeroOffset[MAX_RC_CHANNELS] = {0,0,0,0,0,0,0,0};

	// Take an average of eight readings
	// RxChannel will auto-update every RC frame (normally 46Hz or so)
	for (i=0; i<8; i++)
    881a:	f9 f6       	brne	.-66     	; 0x87da <CenterSticks+0x2a>
    881c:	a3 e8       	ldi	r26, 0x83	; 131
    881e:	b7 e0       	ldi	r27, 0x07	; 7
    8820:	9e 01       	movw	r18, r28
    8822:	2f 5e       	subi	r18, 0xEF	; 239
    8824:	3f 4f       	sbci	r19, 0xFF	; 255
    8826:	f8 01       	movw	r30, r16
		_delay_ms(100); // Wait for a new frame
	}

	for (i=0;i<MAX_RC_CHANNELS;i++)
	{
		Config.RxChannelZeroOffset[i] = ((RxChannelZeroOffset[i] + 4) >> 3); // Round and divide by 8
    8828:	81 91       	ld	r24, Z+
    882a:	91 91       	ld	r25, Z+
    882c:	04 96       	adiw	r24, 0x04	; 4
    882e:	43 e0       	ldi	r20, 0x03	; 3
    8830:	96 95       	lsr	r25
    8832:	87 95       	ror	r24
    8834:	4a 95       	dec	r20
    8836:	e1 f7       	brne	.-8      	; 0x8830 <CenterSticks+0x80>
    8838:	8d 93       	st	X+, r24
    883a:	9d 93       	st	X+, r25
			RxChannelZeroOffset[j] += RxChannel[j];
		}
		_delay_ms(100); // Wait for a new frame
	}

	for (i=0;i<MAX_RC_CHANNELS;i++)
    883c:	e2 17       	cp	r30, r18
    883e:	f3 07       	cpc	r31, r19
    8840:	99 f7       	brne	.-26     	; 0x8828 <CenterSticks+0x78>
	{
		Config.RxChannelZeroOffset[i] = ((RxChannelZeroOffset[i] + 4) >> 3); // Round and divide by 8
	}

	Save_Config_to_EEPROM();
}
    8842:	60 96       	adiw	r28, 0x10	; 16
    8844:	0f b6       	in	r0, 0x3f	; 63
    8846:	f8 94       	cli
    8848:	de bf       	out	0x3e, r29	; 62
    884a:	0f be       	out	0x3f, r0	; 63
    884c:	cd bf       	out	0x3d, r28	; 61
    884e:	df 91       	pop	r29
    8850:	cf 91       	pop	r28
    8852:	1f 91       	pop	r17
    8854:	0f 91       	pop	r16
	for (i=0;i<MAX_RC_CHANNELS;i++)
	{
		Config.RxChannelZeroOffset[i] = ((RxChannelZeroOffset[i] + 4) >> 3); // Round and divide by 8
	}

	Save_Config_to_EEPROM();
    8856:	0c 94 93 16 	jmp	0x2d26	; 0x2d26 <Save_Config_to_EEPROM>

0000885a <output_servo_ppm>:
//************************************************************

volatile uint16_t ServoOut[MAX_OUTPUTS];

void output_servo_ppm(uint8_t ServoFlag)
{
    885a:	8f 92       	push	r8
    885c:	9f 92       	push	r9
    885e:	af 92       	push	r10
    8860:	bf 92       	push	r11
    8862:	df 92       	push	r13
    8864:	ef 92       	push	r14
    8866:	ff 92       	push	r15
    8868:	0f 93       	push	r16
    886a:	1f 93       	push	r17
    886c:	cf 93       	push	r28
    886e:	df 93       	push	r29
    8870:	d8 2e       	mov	r13, r24
    8872:	0f e3       	ldi	r16, 0x3F	; 63
    8874:	16 e0       	ldi	r17, 0x06	; 6
    8876:	c0 e0       	ldi	r28, 0x00	; 0
    8878:	d0 e0       	ldi	r29, 0x00	; 0
			temp = ((temp - 3750) >> 1) + 1500;
		}
		else
		{
			// Scale motor from 2500~5000 to 1000~2000
			temp = ((temp << 2) + 5) / 10; 	// Round and convert	
    887a:	ea e0       	ldi	r30, 0x0A	; 10
    887c:	8e 2e       	mov	r8, r30
    887e:	91 2c       	mov	r9, r1
    8880:	a1 2c       	mov	r10, r1
    8882:	b1 2c       	mov	r11, r1
	uint8_t i = 0;

	// Re-span numbers from internal values to microseconds
	for (i = 0; i < MAX_OUTPUTS; i++)
	{
		temp = ServoOut[i];					// Promote to 32 bits
    8884:	7e 01       	movw	r14, r28
    8886:	ee 0c       	add	r14, r14
    8888:	ff 1c       	adc	r15, r15
    888a:	f7 01       	movw	r30, r14
    888c:	eb 5c       	subi	r30, 0xCB	; 203
    888e:	f7 4f       	sbci	r31, 0xF7	; 247
    8890:	20 81       	ld	r18, Z
    8892:	31 81       	ldd	r19, Z+1	; 0x01
    8894:	a9 01       	movw	r20, r18
    8896:	60 e0       	ldi	r22, 0x00	; 0
    8898:	70 e0       	ldi	r23, 0x00	; 0

		// Check for motor marker and ignore if set
		if (Config.Channel[i].Motor_marker != MOTOR)
    889a:	f8 01       	movw	r30, r16
    889c:	80 81       	ld	r24, Z
    889e:	82 30       	cpi	r24, 0x02	; 2
    88a0:	79 f0       	breq	.+30     	; 0x88c0 <output_servo_ppm+0x66>
		{
			// Scale servo from 2500~5000 to 875~2125
			temp = ((temp - 3750) >> 1) + 1500;
    88a2:	9a 01       	movw	r18, r20
    88a4:	ab 01       	movw	r20, r22
    88a6:	26 5a       	subi	r18, 0xA6	; 166
    88a8:	3e 40       	sbci	r19, 0x0E	; 14
    88aa:	41 09       	sbc	r20, r1
    88ac:	51 09       	sbc	r21, r1
    88ae:	56 95       	lsr	r21
    88b0:	47 95       	ror	r20
    88b2:	37 95       	ror	r19
    88b4:	27 95       	ror	r18
    88b6:	24 52       	subi	r18, 0x24	; 36
    88b8:	3a 4f       	sbci	r19, 0xFA	; 250
    88ba:	4f 4f       	sbci	r20, 0xFF	; 255
    88bc:	5f 4f       	sbci	r21, 0xFF	; 255
    88be:	11 c0       	rjmp	.+34     	; 0x88e2 <output_servo_ppm+0x88>
		}
		else
		{
			// Scale motor from 2500~5000 to 1000~2000
			temp = ((temp << 2) + 5) / 10; 	// Round and convert	
    88c0:	cb 01       	movw	r24, r22
    88c2:	ba 01       	movw	r22, r20
    88c4:	52 e0       	ldi	r21, 0x02	; 2
    88c6:	66 0f       	add	r22, r22
    88c8:	77 1f       	adc	r23, r23
    88ca:	88 1f       	adc	r24, r24
    88cc:	99 1f       	adc	r25, r25
    88ce:	5a 95       	dec	r21
    88d0:	d1 f7       	brne	.-12     	; 0x88c6 <output_servo_ppm+0x6c>
    88d2:	6b 5f       	subi	r22, 0xFB	; 251
    88d4:	7f 4f       	sbci	r23, 0xFF	; 255
    88d6:	8f 4f       	sbci	r24, 0xFF	; 255
    88d8:	9f 4f       	sbci	r25, 0xFF	; 255
    88da:	a5 01       	movw	r20, r10
    88dc:	94 01       	movw	r18, r8
    88de:	0e 94 6f 48 	call	0x90de	; 0x90de <__udivmodsi4>
		}
		
		ServoOut[i] = (uint16_t)temp;
    88e2:	f7 01       	movw	r30, r14
    88e4:	eb 5c       	subi	r30, 0xCB	; 203
    88e6:	f7 4f       	sbci	r31, 0xF7	; 247
    88e8:	31 83       	std	Z+1, r19	; 0x01
    88ea:	20 83       	st	Z, r18
    88ec:	21 96       	adiw	r28, 0x01	; 1
    88ee:	0a 5d       	subi	r16, 0xDA	; 218
    88f0:	1f 4f       	sbci	r17, 0xFF	; 255
{
	uint32_t temp;
	uint8_t i = 0;

	// Re-span numbers from internal values to microseconds
	for (i = 0; i < MAX_OUTPUTS; i++)
    88f2:	c8 30       	cpi	r28, 0x08	; 8
    88f4:	d1 05       	cpc	r29, r1
    88f6:	31 f6       	brne	.-116    	; 0x8884 <output_servo_ppm+0x2a>
		
		ServoOut[i] = (uint16_t)temp;
	}

	// Re-sample throttle value
	MonopolarThrottle = RxChannel[THROTTLE] - Config.RxChannelZeroOffset[THROTTLE];
    88f8:	80 91 b2 07 	lds	r24, 0x07B2
    88fc:	90 91 b3 07 	lds	r25, 0x07B3
    8900:	20 91 83 07 	lds	r18, 0x0783
    8904:	30 91 84 07 	lds	r19, 0x0784
    8908:	82 1b       	sub	r24, r18
    890a:	93 0b       	sbc	r25, r19
    890c:	90 93 22 08 	sts	0x0822, r25
    8910:	80 93 21 08 	sts	0x0821, r24

	// Check for motor flags if throttle is below arming minimum or disarmed
	// and set all motors to minimum throttle if so
	if 	(
			(MonopolarThrottle < THROTTLEIDLE) || 
    8914:	80 91 21 08 	lds	r24, 0x0821
    8918:	90 91 22 08 	lds	r25, 0x0822
	// Re-sample throttle value
	MonopolarThrottle = RxChannel[THROTTLE] - Config.RxChannelZeroOffset[THROTTLE];

	// Check for motor flags if throttle is below arming minimum or disarmed
	// and set all motors to minimum throttle if so
	if 	(
    891c:	c2 97       	sbiw	r24, 0x32	; 50
    891e:	ac f0       	brlt	.+42     	; 0x894a <output_servo_ppm+0xf0>
			(MonopolarThrottle < THROTTLEIDLE) || 
			((General_error & (1 << DISARMED)) != 0)
    8920:	80 91 1e 05 	lds	r24, 0x051E
	MonopolarThrottle = RxChannel[THROTTLE] - Config.RxChannelZeroOffset[THROTTLE];

	// Check for motor flags if throttle is below arming minimum or disarmed
	// and set all motors to minimum throttle if so
	if 	(
			(MonopolarThrottle < THROTTLEIDLE) || 
    8924:	82 fd       	sbrc	r24, 2
    8926:	11 c0       	rjmp	.+34     	; 0x894a <output_servo_ppm+0xf0>
		}
	}

	// Determine output rate based on device type
	// Suppress outputs during throttle high error
	if((General_error & (1 << THROTTLE_HIGH)) == 0)
    8928:	80 91 1e 05 	lds	r24, 0x051E
    892c:	80 fd       	sbrc	r24, 0
    892e:	24 c0       	rjmp	.+72     	; 0x8978 <output_servo_ppm+0x11e>
	{
		// Reset JitterFlag immediately before PWM generation
		JitterFlag = false;
    8930:	10 92 dd 07 	sts	0x07DD, r1
	
		// We now care about interrupts
		JitterGate = true;
    8934:	81 e0       	ldi	r24, 0x01	; 1
    8936:	80 93 dc 07 	sts	0x07DC, r24

		// Pass address of ServoOut array
		output_servo_ppm_asm(&ServoOut[0], ServoFlag);
    893a:	6d 2d       	mov	r22, r13
    893c:	85 e3       	ldi	r24, 0x35	; 53
    893e:	98 e0       	ldi	r25, 0x08	; 8
    8940:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <output_servo_ppm_asm>
		
		// We no longer care about interrupts
		JitterGate = false;
    8944:	10 92 dc 07 	sts	0x07DC, r1
    8948:	17 c0       	rjmp	.+46     	; 0x8978 <output_servo_ppm+0x11e>
//************************************************************

volatile uint16_t ServoOut[MAX_OUTPUTS];

void output_servo_ppm(uint8_t ServoFlag)
{
    894a:	ef e3       	ldi	r30, 0x3F	; 63
    894c:	f6 e0       	ldi	r31, 0x06	; 6
    894e:	80 e0       	ldi	r24, 0x00	; 0
    8950:	90 e0       	ldi	r25, 0x00	; 0
		{
			// Check for motor marker
			if (Config.Channel[i].Motor_marker == MOTOR)
			{
				// Set output to minimum pulse width (1000us)
				ServoOut[i] = MOTORMIN;
    8952:	28 ee       	ldi	r18, 0xE8	; 232
    8954:	33 e0       	ldi	r19, 0x03	; 3
	{
		// For each output
		for (i = 0; i < MAX_OUTPUTS; i++)
		{
			// Check for motor marker
			if (Config.Channel[i].Motor_marker == MOTOR)
    8956:	40 81       	ld	r20, Z
    8958:	42 30       	cpi	r20, 0x02	; 2
    895a:	41 f4       	brne	.+16     	; 0x896c <output_servo_ppm+0x112>
			{
				// Set output to minimum pulse width (1000us)
				ServoOut[i] = MOTORMIN;
    895c:	dc 01       	movw	r26, r24
    895e:	aa 0f       	add	r26, r26
    8960:	bb 1f       	adc	r27, r27
    8962:	ab 5c       	subi	r26, 0xCB	; 203
    8964:	b7 4f       	sbci	r27, 0xF7	; 247
    8966:	11 96       	adiw	r26, 0x01	; 1
    8968:	3c 93       	st	X, r19
    896a:	2e 93       	st	-X, r18
    896c:	01 96       	adiw	r24, 0x01	; 1
    896e:	b6 96       	adiw	r30, 0x26	; 38
			(MonopolarThrottle < THROTTLEIDLE) || 
			((General_error & (1 << DISARMED)) != 0)
		)
	{
		// For each output
		for (i = 0; i < MAX_OUTPUTS; i++)
    8970:	88 30       	cpi	r24, 0x08	; 8
    8972:	91 05       	cpc	r25, r1
    8974:	81 f7       	brne	.-32     	; 0x8956 <output_servo_ppm+0xfc>
    8976:	d8 cf       	rjmp	.-80     	; 0x8928 <output_servo_ppm+0xce>
		output_servo_ppm_asm(&ServoOut[0], ServoFlag);
		
		// We no longer care about interrupts
		JitterGate = false;
	}
}
    8978:	df 91       	pop	r29
    897a:	cf 91       	pop	r28
    897c:	1f 91       	pop	r17
    897e:	0f 91       	pop	r16
    8980:	ff 90       	pop	r15
    8982:	ef 90       	pop	r14
    8984:	df 90       	pop	r13
    8986:	bf 90       	pop	r11
    8988:	af 90       	pop	r10
    898a:	9f 90       	pop	r9
    898c:	8f 90       	pop	r8
    898e:	08 95       	ret

00008990 <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
  TWSR = 0;                         /* no prescaler */
    8990:	10 92 b9 00 	sts	0x00B9, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
    8994:	81 e1       	ldi	r24, 0x11	; 17
    8996:	80 93 b8 00 	sts	0x00B8, r24
    899a:	08 95       	ret

0000899c <i2c_start>:
{
	uint32_t  i2c_timer = 0;
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    899c:	94 ea       	ldi	r25, 0xA4	; 164
    899e:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
    89a2:	4f ef       	ldi	r20, 0xFF	; 255
    89a4:	50 e0       	ldi	r21, 0x00	; 0
    89a6:	60 e0       	ldi	r22, 0x00	; 0
    89a8:	70 e0       	ldi	r23, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    89aa:	90 91 bc 00 	lds	r25, 0x00BC
    89ae:	97 fd       	sbrc	r25, 7
    89b0:	06 c0       	rjmp	.+12     	; 0x89be <i2c_start+0x22>
    89b2:	41 50       	subi	r20, 0x01	; 1
    89b4:	51 09       	sbc	r21, r1
    89b6:	61 09       	sbc	r22, r1
    89b8:	71 09       	sbc	r23, r1
    89ba:	b8 f7       	brcc	.-18     	; 0x89aa <i2c_start+0xe>
    89bc:	06 c0       	rjmp	.+12     	; 0x89ca <i2c_start+0x2e>
	if(i2c_timer == 0)
    89be:	45 2b       	or	r20, r21
    89c0:	46 2b       	or	r20, r22
    89c2:	47 2b       	or	r20, r23
    89c4:	11 f4       	brne	.+4      	; 0x89ca <i2c_start+0x2e>
		return 1;
    89c6:	81 e0       	ldi	r24, 0x01	; 1
    89c8:	08 95       	ret

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    89ca:	90 91 b9 00 	lds	r25, 0x00B9
    89ce:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
    89d0:	98 30       	cpi	r25, 0x08	; 8
    89d2:	11 f0       	breq	.+4      	; 0x89d8 <i2c_start+0x3c>
    89d4:	90 31       	cpi	r25, 0x10	; 16
    89d6:	b9 f7       	brne	.-18     	; 0x89c6 <i2c_start+0x2a>

	// send device address
	TWDR = address;
    89d8:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    89dc:	84 e8       	ldi	r24, 0x84	; 132
    89de:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	i2c_timer = I2C_TIMER_DELAY;
    89e2:	8f ef       	ldi	r24, 0xFF	; 255
    89e4:	90 e0       	ldi	r25, 0x00	; 0
    89e6:	a0 e0       	ldi	r26, 0x00	; 0
    89e8:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    89ea:	20 91 bc 00 	lds	r18, 0x00BC
    89ee:	27 fd       	sbrc	r18, 7
    89f0:	05 c0       	rjmp	.+10     	; 0x89fc <i2c_start+0x60>
    89f2:	01 97       	sbiw	r24, 0x01	; 1
    89f4:	a1 09       	sbc	r26, r1
    89f6:	b1 09       	sbc	r27, r1
    89f8:	c0 f7       	brcc	.-16     	; 0x89ea <i2c_start+0x4e>
    89fa:	04 c0       	rjmp	.+8      	; 0x8a04 <i2c_start+0x68>
	if(i2c_timer == 0)
    89fc:	89 2b       	or	r24, r25
    89fe:	8a 2b       	or	r24, r26
    8a00:	8b 2b       	or	r24, r27
    8a02:	09 f3       	breq	.-62     	; 0x89c6 <i2c_start+0x2a>
		return 1;

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    8a04:	80 91 b9 00 	lds	r24, 0x00B9
    8a08:	88 7f       	andi	r24, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
    8a0a:	88 31       	cpi	r24, 0x18	; 24
    8a0c:	11 f0       	breq	.+4      	; 0x8a12 <i2c_start+0x76>
    8a0e:	80 34       	cpi	r24, 0x40	; 64
    8a10:	d1 f6       	brne	.-76     	; 0x89c6 <i2c_start+0x2a>

	return 0;
    8a12:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */
    8a14:	08 95       	ret

00008a16 <i2c_start_wait>:
	uint8_t   twst;

    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    8a16:	44 ea       	ldi	r20, 0xA4	; 164
    	twst = TW_STATUS & 0xF8;
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
    	TWCR = (1<<TWINT) | (1<<TWEN);
    8a18:	54 e8       	ldi	r21, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    8a1a:	64 e9       	ldi	r22, 0x94	; 148
	uint8_t   twst;

    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    8a1c:	40 93 bc 00 	sts	0x00BC, r20
    
    	// wait until transmission completed
	    i2c_timer = I2C_TIMER_DELAY;
    	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    8a20:	20 e0       	ldi	r18, 0x00	; 0
    8a22:	30 e0       	ldi	r19, 0x00	; 0
    8a24:	90 91 bc 00 	lds	r25, 0x00BC
    8a28:	97 fd       	sbrc	r25, 7
    8a2a:	06 c0       	rjmp	.+12     	; 0x8a38 <i2c_start_wait+0x22>
    8a2c:	2f 5f       	subi	r18, 0xFF	; 255
    8a2e:	3f 4f       	sbci	r19, 0xFF	; 255
    8a30:	21 15       	cp	r18, r1
    8a32:	91 e0       	ldi	r25, 0x01	; 1
    8a34:	39 07       	cpc	r19, r25
    8a36:	b1 f7       	brne	.-20     	; 0x8a24 <i2c_start_wait+0xe>

    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    8a38:	90 91 b9 00 	lds	r25, 0x00B9
    8a3c:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    8a3e:	98 30       	cpi	r25, 0x08	; 8
    8a40:	11 f0       	breq	.+4      	; 0x8a46 <i2c_start_wait+0x30>
    8a42:	90 31       	cpi	r25, 0x10	; 16
    8a44:	59 f7       	brne	.-42     	; 0x8a1c <i2c_start_wait+0x6>
    
    	// send device address
    	TWDR = address;
    8a46:	80 93 bb 00 	sts	0x00BB, r24
    	TWCR = (1<<TWINT) | (1<<TWEN);
    8a4a:	50 93 bc 00 	sts	0x00BC, r21
    
    	// wail until transmission completed
    	i2c_timer = I2C_TIMER_DELAY;
    	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    8a4e:	20 e0       	ldi	r18, 0x00	; 0
    8a50:	30 e0       	ldi	r19, 0x00	; 0
    8a52:	90 91 bc 00 	lds	r25, 0x00BC
    8a56:	97 fd       	sbrc	r25, 7
    8a58:	06 c0       	rjmp	.+12     	; 0x8a66 <i2c_start_wait+0x50>
    8a5a:	2f 5f       	subi	r18, 0xFF	; 255
    8a5c:	3f 4f       	sbci	r19, 0xFF	; 255
    8a5e:	21 15       	cp	r18, r1
    8a60:	91 e0       	ldi	r25, 0x01	; 1
    8a62:	39 07       	cpc	r19, r25
    8a64:	b1 f7       	brne	.-20     	; 0x8a52 <i2c_start_wait+0x3c>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    8a66:	90 91 b9 00 	lds	r25, 0x00B9
    8a6a:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    8a6c:	90 32       	cpi	r25, 0x20	; 32
    8a6e:	11 f0       	breq	.+4      	; 0x8a74 <i2c_start_wait+0x5e>
    8a70:	98 35       	cpi	r25, 0x58	; 88
    8a72:	79 f4       	brne	.+30     	; 0x8a92 <i2c_start_wait+0x7c>
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    8a74:	60 93 bc 00 	sts	0x00BC, r22
	        
	        // wait until stop condition is executed and bus released
	        i2c_timer = I2C_TIMER_DELAY;
	        while((TWCR & (1<<TWSTO)) && i2c_timer--);
    8a78:	20 e0       	ldi	r18, 0x00	; 0
    8a7a:	30 e0       	ldi	r19, 0x00	; 0
    8a7c:	90 91 bc 00 	lds	r25, 0x00BC
    8a80:	94 ff       	sbrs	r25, 4
    8a82:	cc cf       	rjmp	.-104    	; 0x8a1c <i2c_start_wait+0x6>
    8a84:	2f 5f       	subi	r18, 0xFF	; 255
    8a86:	3f 4f       	sbci	r19, 0xFF	; 255
    8a88:	21 15       	cp	r18, r1
    8a8a:	91 e0       	ldi	r25, 0x01	; 1
    8a8c:	39 07       	cpc	r19, r25
    8a8e:	b1 f7       	brne	.-20     	; 0x8a7c <i2c_start_wait+0x66>
    8a90:	c5 cf       	rjmp	.-118    	; 0x8a1c <i2c_start_wait+0x6>
    8a92:	08 95       	ret

00008a94 <i2c_rep_start>:
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );
    8a94:	0c 94 ce 44 	jmp	0x899c	; 0x899c <i2c_start>

00008a98 <i2c_stop>:
void i2c_stop(void)
{
	uint32_t  i2c_timer = 0;

    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    8a98:	84 e9       	ldi	r24, 0x94	; 148
    8a9a:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait until stop condition is executed and bus released
	i2c_timer = I2C_TIMER_DELAY;
	while((TWCR & (1<<TWSTO)) && i2c_timer--);
    8a9e:	80 e0       	ldi	r24, 0x00	; 0
    8aa0:	90 e0       	ldi	r25, 0x00	; 0
    8aa2:	20 91 bc 00 	lds	r18, 0x00BC
    8aa6:	24 ff       	sbrs	r18, 4
    8aa8:	05 c0       	rjmp	.+10     	; 0x8ab4 <i2c_stop+0x1c>
    8aaa:	01 96       	adiw	r24, 0x01	; 1
    8aac:	81 15       	cp	r24, r1
    8aae:	21 e0       	ldi	r18, 0x01	; 1
    8ab0:	92 07       	cpc	r25, r18
    8ab2:	b9 f7       	brne	.-18     	; 0x8aa2 <i2c_stop+0xa>
    8ab4:	08 95       	ret

00008ab6 <i2c_write>:
{	
	uint32_t  i2c_timer = 0;
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    8ab6:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    8aba:	84 e8       	ldi	r24, 0x84	; 132
    8abc:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
    8ac0:	8f ef       	ldi	r24, 0xFF	; 255
    8ac2:	90 e0       	ldi	r25, 0x00	; 0
    8ac4:	a0 e0       	ldi	r26, 0x00	; 0
    8ac6:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    8ac8:	20 91 bc 00 	lds	r18, 0x00BC
    8acc:	27 fd       	sbrc	r18, 7
    8ace:	05 c0       	rjmp	.+10     	; 0x8ada <i2c_write+0x24>
    8ad0:	01 97       	sbiw	r24, 0x01	; 1
    8ad2:	a1 09       	sbc	r26, r1
    8ad4:	b1 09       	sbc	r27, r1
    8ad6:	c0 f7       	brcc	.-16     	; 0x8ac8 <i2c_write+0x12>
    8ad8:	04 c0       	rjmp	.+8      	; 0x8ae2 <i2c_write+0x2c>
	if(i2c_timer == 0)
    8ada:	89 2b       	or	r24, r25
    8adc:	8a 2b       	or	r24, r26
    8ade:	8b 2b       	or	r24, r27
    8ae0:	41 f0       	breq	.+16     	; 0x8af2 <i2c_write+0x3c>
		return 1;

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    8ae2:	90 91 b9 00 	lds	r25, 0x00B9
    8ae6:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
    8ae8:	81 e0       	ldi	r24, 0x01	; 1
    8aea:	98 32       	cpi	r25, 0x28	; 40
    8aec:	19 f4       	brne	.+6      	; 0x8af4 <i2c_write+0x3e>
    8aee:	80 e0       	ldi	r24, 0x00	; 0
    8af0:	08 95       	ret

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 1;
    8af2:	81 e0       	ldi	r24, 0x01	; 1
	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
    8af4:	08 95       	ret

00008af6 <i2c_readAck>:
*************************************************************************/
unsigned char i2c_readAck(void)
{
	uint32_t  i2c_timer = 0;

	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    8af6:	84 ec       	ldi	r24, 0xC4	; 196
    8af8:	80 93 bc 00 	sts	0x00BC, r24
	i2c_timer = I2C_TIMER_DELAY;
    8afc:	8f ef       	ldi	r24, 0xFF	; 255
    8afe:	90 e0       	ldi	r25, 0x00	; 0
    8b00:	a0 e0       	ldi	r26, 0x00	; 0
    8b02:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    8b04:	20 91 bc 00 	lds	r18, 0x00BC
    8b08:	27 fd       	sbrc	r18, 7
    8b0a:	05 c0       	rjmp	.+10     	; 0x8b16 <i2c_readAck+0x20>
    8b0c:	01 97       	sbiw	r24, 0x01	; 1
    8b0e:	a1 09       	sbc	r26, r1
    8b10:	b1 09       	sbc	r27, r1
    8b12:	c0 f7       	brcc	.-16     	; 0x8b04 <i2c_readAck+0xe>
    8b14:	04 c0       	rjmp	.+8      	; 0x8b1e <i2c_readAck+0x28>
	if(i2c_timer == 0)
    8b16:	89 2b       	or	r24, r25
    8b18:	8a 2b       	or	r24, r26
    8b1a:	8b 2b       	or	r24, r27
    8b1c:	19 f0       	breq	.+6      	; 0x8b24 <i2c_readAck+0x2e>
		return 0;

    return TWDR;
    8b1e:	80 91 bb 00 	lds	r24, 0x00BB
    8b22:	08 95       	ret

	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 0;
    8b24:	80 e0       	ldi	r24, 0x00	; 0

    return TWDR;

}/* i2c_readAck */
    8b26:	08 95       	ret

00008b28 <i2c_readNak>:
*************************************************************************/
unsigned char i2c_readNak(void)
{
	uint32_t  i2c_timer = 0;

	TWCR = (1<<TWINT) | (1<<TWEN);
    8b28:	84 e8       	ldi	r24, 0x84	; 132
    8b2a:	80 93 bc 00 	sts	0x00BC, r24
	i2c_timer = I2C_TIMER_DELAY;
    8b2e:	8f ef       	ldi	r24, 0xFF	; 255
    8b30:	90 e0       	ldi	r25, 0x00	; 0
    8b32:	a0 e0       	ldi	r26, 0x00	; 0
    8b34:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    8b36:	20 91 bc 00 	lds	r18, 0x00BC
    8b3a:	27 fd       	sbrc	r18, 7
    8b3c:	05 c0       	rjmp	.+10     	; 0x8b48 <i2c_readNak+0x20>
    8b3e:	01 97       	sbiw	r24, 0x01	; 1
    8b40:	a1 09       	sbc	r26, r1
    8b42:	b1 09       	sbc	r27, r1
    8b44:	c0 f7       	brcc	.-16     	; 0x8b36 <i2c_readNak+0xe>
    8b46:	04 c0       	rjmp	.+8      	; 0x8b50 <i2c_readNak+0x28>
	if(i2c_timer == 0)
    8b48:	89 2b       	or	r24, r25
    8b4a:	8a 2b       	or	r24, r26
    8b4c:	8b 2b       	or	r24, r27
    8b4e:	19 f0       	breq	.+6      	; 0x8b56 <i2c_readNak+0x2e>
		return 0;
	
    return TWDR;
    8b50:	80 91 bb 00 	lds	r24, 0x00BB
    8b54:	08 95       	ret

	TWCR = (1<<TWINT) | (1<<TWEN);
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 0;
    8b56:	80 e0       	ldi	r24, 0x00	; 0
	
    return TWDR;

}/* i2c_readNak */
    8b58:	08 95       	ret

00008b5a <init_uart>:
#define BAUD_PRESCALE_SPEKTRUM ((F_CPU + USART_BAUDRATE_SPEKTRUM * 8L) / (USART_BAUDRATE_SPEKTRUM * 16L) - 1) // Default RX rate for Spektrum

// Initialise UART with adjusted bitrate
void init_uart(void)
{
	cli();								// Atmel wants global interrupts disabled when changing UART setup on the fly
    8b5a:	f8 94       	cli
	
	UCSR0B &= ~(1 << RXCIE0);			// Disable serial interrupt
    8b5c:	80 91 c1 00 	lds	r24, 0x00C1
    8b60:	8f 77       	andi	r24, 0x7F	; 127
    8b62:	80 93 c1 00 	sts	0x00C1, r24

	while (UCSR0A & (1 << RXC0))		// Make sure there is nothing in the RX0 reg
    8b66:	80 91 c0 00 	lds	r24, 0x00C0
    8b6a:	87 ff       	sbrs	r24, 7
    8b6c:	05 c0       	rjmp	.+10     	; 0x8b78 <init_uart+0x1e>
	{
		UCSR0C = UDR0;					// So as not to annoy Studio 6, use UCSR0C as a temp reg until UDR0 empty. Sorry, UCSR0C...
    8b6e:	80 91 c6 00 	lds	r24, 0x00C6
    8b72:	80 93 c2 00 	sts	0x00C2, r24
    8b76:	f7 cf       	rjmp	.-18     	; 0x8b66 <init_uart+0xc>
	}
	
	// Reset UART regs to a known state
	UCSR0A = 0; // U2X = 0, no master mode, flags cleared 
    8b78:	10 92 c0 00 	sts	0x00C0, r1
	UCSR0B = 0; // Clear flags, disable tx/rx, 8 bits
    8b7c:	10 92 c1 00 	sts	0x00C1, r1
	UCSR0C = 6; // 8N1
    8b80:	86 e0       	ldi	r24, 0x06	; 6
    8b82:	80 93 c2 00 	sts	0x00C2, r24

	switch (Config.RxMode)
    8b86:	80 91 d2 05 	lds	r24, 0x05D2
    8b8a:	82 30       	cpi	r24, 0x02	; 2
    8b8c:	09 f1       	breq	.+66     	; 0x8bd0 <init_uart+0x76>
    8b8e:	34 f4       	brge	.+12     	; 0x8b9c <init_uart+0x42>
    8b90:	87 fd       	sbrc	r24, 7
    8b92:	41 c0       	rjmp	.+130    	; 0x8c16 <init_uart+0xbc>
			UCSR0B |=  (1 << RXCIE0);					// Enable serial interrupt
			break;

		case CPPM_MODE:
		case PWM:
			UCSR0B &= 	~(1 << RXEN0);					// Disable receiver in PWM and CPPM modes
    8b94:	80 91 c1 00 	lds	r24, 0x00C1
    8b98:	8f 7e       	andi	r24, 0xEF	; 239
    8b9a:	3b c0       	rjmp	.+118    	; 0x8c12 <init_uart+0xb8>
	// Reset UART regs to a known state
	UCSR0A = 0; // U2X = 0, no master mode, flags cleared 
	UCSR0B = 0; // Clear flags, disable tx/rx, 8 bits
	UCSR0C = 6; // 8N1

	switch (Config.RxMode)
    8b9c:	83 30       	cpi	r24, 0x03	; 3
    8b9e:	d9 f5       	brne	.+118    	; 0x8c16 <init_uart+0xbc>
			UCSR0B |=  (1 << RXCIE0);					// Enable serial interrupt
			break;

		// Spektrum 8N1 (8 data bits / No parity / 1 stop bit / 115.2Kbps)
		case SPEKTRUM: 	
			UCSR0A &=  ~(1 << U2X0);					// Clear the 2x flag
    8ba0:	80 91 c0 00 	lds	r24, 0x00C0
    8ba4:	8d 7f       	andi	r24, 0xFD	; 253
    8ba6:	80 93 c0 00 	sts	0x00C0, r24
			UBRR0H  =  (BAUD_PRESCALE_SPEKTRUM >> 8); 	// Actual = 113636, Error = -1.36%
    8baa:	10 92 c5 00 	sts	0x00C5, r1
			UBRR0L  =   BAUD_PRESCALE_SPEKTRUM & 0xff;	// 0x0A (10.35)	
    8bae:	8a e0       	ldi	r24, 0x0A	; 10
    8bb0:	80 93 c4 00 	sts	0x00C4, r24
			UCSR0B |= 	(1 << RXEN0);					// Enable receiver
    8bb4:	80 91 c1 00 	lds	r24, 0x00C1
    8bb8:	80 61       	ori	r24, 0x10	; 16
    8bba:	80 93 c1 00 	sts	0x00C1, r24
			UCSR0C &=  ~(1 << USBS0); 					// 1 stop bit
    8bbe:	80 91 c2 00 	lds	r24, 0x00C2
    8bc2:	87 7f       	andi	r24, 0xF7	; 247
    8bc4:	80 93 c2 00 	sts	0x00C2, r24
			UCSR0C &=  ~(1 << UPM00) | 					// No parity 
    8bc8:	80 91 c2 00 	lds	r24, 0x00C2
    8bcc:	8f 7e       	andi	r24, 0xEF	; 239
    8bce:	1c c0       	rjmp	.+56     	; 0x8c08 <init_uart+0xae>

	switch (Config.RxMode)
	{
		// Futaba S-Bus 8E2 (8 data bits / Even parity / 2 stop bits / 100Kbps)
		case SBUS: 		
			UCSR0A |=  (1 << U2X0);						// Need to set the 2x flag
    8bd0:	80 91 c0 00 	lds	r24, 0x00C0
    8bd4:	82 60       	ori	r24, 0x02	; 2
    8bd6:	80 93 c0 00 	sts	0x00C0, r24
			UBRR0H  = (BAUD_PRESCALE_SBUS >> 8);  		// Actual = 100000 , Error = 0%	
    8bda:	10 92 c5 00 	sts	0x00C5, r1
			UBRR0L  =  BAUD_PRESCALE_SBUS & 0xff;		// 0x18 (24)
    8bde:	88 e1       	ldi	r24, 0x18	; 24
    8be0:	80 93 c4 00 	sts	0x00C4, r24
			UCSR0B |=  (1 << RXEN0);					// Enable receiver
    8be4:	80 91 c1 00 	lds	r24, 0x00C1
    8be8:	80 61       	ori	r24, 0x10	; 16
    8bea:	80 93 c1 00 	sts	0x00C1, r24
			UCSR0C |=  (1 << USBS0); 					// 2 stop bits
    8bee:	80 91 c2 00 	lds	r24, 0x00C2
    8bf2:	88 60       	ori	r24, 0x08	; 8
    8bf4:	80 93 c2 00 	sts	0x00C2, r24
			UCSR0C &= ~(1 << UPM00); 					// Even parity 
    8bf8:	80 91 c2 00 	lds	r24, 0x00C2
    8bfc:	8f 7e       	andi	r24, 0xEF	; 239
    8bfe:	80 93 c2 00 	sts	0x00C2, r24
			UCSR0C |=  (1 << UPM01); 
    8c02:	80 91 c2 00 	lds	r24, 0x00C2
    8c06:	80 62       	ori	r24, 0x20	; 32
			UCSR0A &=  ~(1 << U2X0);					// Clear the 2x flag
			UBRR0H  =  (BAUD_PRESCALE_SPEKTRUM >> 8); 	// Actual = 113636, Error = -1.36%
			UBRR0L  =   BAUD_PRESCALE_SPEKTRUM & 0xff;	// 0x0A (10.35)	
			UCSR0B |= 	(1 << RXEN0);					// Enable receiver
			UCSR0C &=  ~(1 << USBS0); 					// 1 stop bit
			UCSR0C &=  ~(1 << UPM00) | 					// No parity 
    8c08:	80 93 c2 00 	sts	0x00C2, r24
						(1 << UPM01); 
			UCSR0B |=  (1 << RXCIE0);					// Enable serial interrupt
    8c0c:	80 91 c1 00 	lds	r24, 0x00C1
    8c10:	80 68       	ori	r24, 0x80	; 128
			break;

		case CPPM_MODE:
		case PWM:
			UCSR0B &= 	~(1 << RXEN0);					// Disable receiver in PWM and CPPM modes
    8c12:	80 93 c1 00 	sts	0x00C1, r24
		default:
			break;
	}

	// Re-enable interrupts
	sei();
    8c16:	78 94       	sei
    8c18:	08 95       	ret

00008c1a <GetVbat>:

uint16_t GetVbat(void)				// Get battery voltage (VBAT on ADC3)
{
	uint16_t	vBat;				// Battery voltage
		
	read_adc(AIN_VBAT1);				// Multiplication factor = (Display volts / 1024) / (Vbat / 11 / Vref)
    8c1a:	83 e0       	ldi	r24, 0x03	; 3
    8c1c:	0e 94 03 11 	call	0x2206	; 0x2206 <read_adc>
	// For Vref = 2.45V, Multiplication factor = 2.632
	// For Vref = 2.305V, Multiplication factor = approx 2.5
	// An input voltage of 10V will results in a value of 999.
	// This means that the number represents units of 10mV.

	vBat = ADCW;
    8c20:	80 91 78 00 	lds	r24, 0x0078
    8c24:	90 91 79 00 	lds	r25, 0x0079

	// Multiply by 2.578125
	// 2 + 1/2 + 1/16 + 1/64
	vBat = (vBat << 1) + (vBat >> 1) + (vBat >> 4) + (vBat >> 6); // Multiply by 2.578125
    8c28:	9c 01       	movw	r18, r24
    8c2a:	36 95       	lsr	r19
    8c2c:	27 95       	ror	r18
    8c2e:	ac 01       	movw	r20, r24
    8c30:	44 0f       	add	r20, r20
    8c32:	55 1f       	adc	r21, r21
    8c34:	24 0f       	add	r18, r20
    8c36:	35 1f       	adc	r19, r21
    8c38:	ac 01       	movw	r20, r24
    8c3a:	74 e0       	ldi	r23, 0x04	; 4
    8c3c:	56 95       	lsr	r21
    8c3e:	47 95       	ror	r20
    8c40:	7a 95       	dec	r23
    8c42:	e1 f7       	brne	.-8      	; 0x8c3c <GetVbat+0x22>
    8c44:	24 0f       	add	r18, r20
    8c46:	35 1f       	adc	r19, r21
    8c48:	e6 e0       	ldi	r30, 0x06	; 6
    8c4a:	96 95       	lsr	r25
    8c4c:	87 95       	ror	r24
    8c4e:	ea 95       	dec	r30
    8c50:	e1 f7       	brne	.-8      	; 0x8c4a <GetVbat+0x30>

	return vBat;
}
    8c52:	82 0f       	add	r24, r18
    8c54:	93 1f       	adc	r25, r19
    8c56:	08 95       	ret

00008c58 <__subsf3>:
    8c58:	50 58       	subi	r21, 0x80	; 128

00008c5a <__addsf3>:
    8c5a:	bb 27       	eor	r27, r27
    8c5c:	aa 27       	eor	r26, r26
    8c5e:	0e d0       	rcall	.+28     	; 0x8c7c <__addsf3x>
    8c60:	75 c1       	rjmp	.+746    	; 0x8f4c <__fp_round>
    8c62:	66 d1       	rcall	.+716    	; 0x8f30 <__fp_pscA>
    8c64:	30 f0       	brcs	.+12     	; 0x8c72 <__addsf3+0x18>
    8c66:	6b d1       	rcall	.+726    	; 0x8f3e <__fp_pscB>
    8c68:	20 f0       	brcs	.+8      	; 0x8c72 <__addsf3+0x18>
    8c6a:	31 f4       	brne	.+12     	; 0x8c78 <__addsf3+0x1e>
    8c6c:	9f 3f       	cpi	r25, 0xFF	; 255
    8c6e:	11 f4       	brne	.+4      	; 0x8c74 <__addsf3+0x1a>
    8c70:	1e f4       	brtc	.+6      	; 0x8c78 <__addsf3+0x1e>
    8c72:	5b c1       	rjmp	.+694    	; 0x8f2a <__fp_nan>
    8c74:	0e f4       	brtc	.+2      	; 0x8c78 <__addsf3+0x1e>
    8c76:	e0 95       	com	r30
    8c78:	e7 fb       	bst	r30, 7
    8c7a:	51 c1       	rjmp	.+674    	; 0x8f1e <__fp_inf>

00008c7c <__addsf3x>:
    8c7c:	e9 2f       	mov	r30, r25
    8c7e:	77 d1       	rcall	.+750    	; 0x8f6e <__fp_split3>
    8c80:	80 f3       	brcs	.-32     	; 0x8c62 <__addsf3+0x8>
    8c82:	ba 17       	cp	r27, r26
    8c84:	62 07       	cpc	r22, r18
    8c86:	73 07       	cpc	r23, r19
    8c88:	84 07       	cpc	r24, r20
    8c8a:	95 07       	cpc	r25, r21
    8c8c:	18 f0       	brcs	.+6      	; 0x8c94 <__addsf3x+0x18>
    8c8e:	71 f4       	brne	.+28     	; 0x8cac <__addsf3x+0x30>
    8c90:	9e f5       	brtc	.+102    	; 0x8cf8 <__addsf3x+0x7c>
    8c92:	8f c1       	rjmp	.+798    	; 0x8fb2 <__fp_zero>
    8c94:	0e f4       	brtc	.+2      	; 0x8c98 <__addsf3x+0x1c>
    8c96:	e0 95       	com	r30
    8c98:	0b 2e       	mov	r0, r27
    8c9a:	ba 2f       	mov	r27, r26
    8c9c:	a0 2d       	mov	r26, r0
    8c9e:	0b 01       	movw	r0, r22
    8ca0:	b9 01       	movw	r22, r18
    8ca2:	90 01       	movw	r18, r0
    8ca4:	0c 01       	movw	r0, r24
    8ca6:	ca 01       	movw	r24, r20
    8ca8:	a0 01       	movw	r20, r0
    8caa:	11 24       	eor	r1, r1
    8cac:	ff 27       	eor	r31, r31
    8cae:	59 1b       	sub	r21, r25
    8cb0:	99 f0       	breq	.+38     	; 0x8cd8 <__addsf3x+0x5c>
    8cb2:	59 3f       	cpi	r21, 0xF9	; 249
    8cb4:	50 f4       	brcc	.+20     	; 0x8cca <__addsf3x+0x4e>
    8cb6:	50 3e       	cpi	r21, 0xE0	; 224
    8cb8:	68 f1       	brcs	.+90     	; 0x8d14 <__addsf3x+0x98>
    8cba:	1a 16       	cp	r1, r26
    8cbc:	f0 40       	sbci	r31, 0x00	; 0
    8cbe:	a2 2f       	mov	r26, r18
    8cc0:	23 2f       	mov	r18, r19
    8cc2:	34 2f       	mov	r19, r20
    8cc4:	44 27       	eor	r20, r20
    8cc6:	58 5f       	subi	r21, 0xF8	; 248
    8cc8:	f3 cf       	rjmp	.-26     	; 0x8cb0 <__addsf3x+0x34>
    8cca:	46 95       	lsr	r20
    8ccc:	37 95       	ror	r19
    8cce:	27 95       	ror	r18
    8cd0:	a7 95       	ror	r26
    8cd2:	f0 40       	sbci	r31, 0x00	; 0
    8cd4:	53 95       	inc	r21
    8cd6:	c9 f7       	brne	.-14     	; 0x8cca <__addsf3x+0x4e>
    8cd8:	7e f4       	brtc	.+30     	; 0x8cf8 <__addsf3x+0x7c>
    8cda:	1f 16       	cp	r1, r31
    8cdc:	ba 0b       	sbc	r27, r26
    8cde:	62 0b       	sbc	r22, r18
    8ce0:	73 0b       	sbc	r23, r19
    8ce2:	84 0b       	sbc	r24, r20
    8ce4:	ba f0       	brmi	.+46     	; 0x8d14 <__addsf3x+0x98>
    8ce6:	91 50       	subi	r25, 0x01	; 1
    8ce8:	a1 f0       	breq	.+40     	; 0x8d12 <__addsf3x+0x96>
    8cea:	ff 0f       	add	r31, r31
    8cec:	bb 1f       	adc	r27, r27
    8cee:	66 1f       	adc	r22, r22
    8cf0:	77 1f       	adc	r23, r23
    8cf2:	88 1f       	adc	r24, r24
    8cf4:	c2 f7       	brpl	.-16     	; 0x8ce6 <__addsf3x+0x6a>
    8cf6:	0e c0       	rjmp	.+28     	; 0x8d14 <__addsf3x+0x98>
    8cf8:	ba 0f       	add	r27, r26
    8cfa:	62 1f       	adc	r22, r18
    8cfc:	73 1f       	adc	r23, r19
    8cfe:	84 1f       	adc	r24, r20
    8d00:	48 f4       	brcc	.+18     	; 0x8d14 <__addsf3x+0x98>
    8d02:	87 95       	ror	r24
    8d04:	77 95       	ror	r23
    8d06:	67 95       	ror	r22
    8d08:	b7 95       	ror	r27
    8d0a:	f7 95       	ror	r31
    8d0c:	9e 3f       	cpi	r25, 0xFE	; 254
    8d0e:	08 f0       	brcs	.+2      	; 0x8d12 <__addsf3x+0x96>
    8d10:	b3 cf       	rjmp	.-154    	; 0x8c78 <__addsf3+0x1e>
    8d12:	93 95       	inc	r25
    8d14:	88 0f       	add	r24, r24
    8d16:	08 f0       	brcs	.+2      	; 0x8d1a <__addsf3x+0x9e>
    8d18:	99 27       	eor	r25, r25
    8d1a:	ee 0f       	add	r30, r30
    8d1c:	97 95       	ror	r25
    8d1e:	87 95       	ror	r24
    8d20:	08 95       	ret

00008d22 <__cmpsf2>:
    8d22:	d9 d0       	rcall	.+434    	; 0x8ed6 <__fp_cmp>
    8d24:	08 f4       	brcc	.+2      	; 0x8d28 <__cmpsf2+0x6>
    8d26:	81 e0       	ldi	r24, 0x01	; 1
    8d28:	08 95       	ret

00008d2a <__divsf3>:
    8d2a:	0c d0       	rcall	.+24     	; 0x8d44 <__divsf3x>
    8d2c:	0f c1       	rjmp	.+542    	; 0x8f4c <__fp_round>
    8d2e:	07 d1       	rcall	.+526    	; 0x8f3e <__fp_pscB>
    8d30:	40 f0       	brcs	.+16     	; 0x8d42 <__divsf3+0x18>
    8d32:	fe d0       	rcall	.+508    	; 0x8f30 <__fp_pscA>
    8d34:	30 f0       	brcs	.+12     	; 0x8d42 <__divsf3+0x18>
    8d36:	21 f4       	brne	.+8      	; 0x8d40 <__divsf3+0x16>
    8d38:	5f 3f       	cpi	r21, 0xFF	; 255
    8d3a:	19 f0       	breq	.+6      	; 0x8d42 <__divsf3+0x18>
    8d3c:	f0 c0       	rjmp	.+480    	; 0x8f1e <__fp_inf>
    8d3e:	51 11       	cpse	r21, r1
    8d40:	39 c1       	rjmp	.+626    	; 0x8fb4 <__fp_szero>
    8d42:	f3 c0       	rjmp	.+486    	; 0x8f2a <__fp_nan>

00008d44 <__divsf3x>:
    8d44:	14 d1       	rcall	.+552    	; 0x8f6e <__fp_split3>
    8d46:	98 f3       	brcs	.-26     	; 0x8d2e <__divsf3+0x4>

00008d48 <__divsf3_pse>:
    8d48:	99 23       	and	r25, r25
    8d4a:	c9 f3       	breq	.-14     	; 0x8d3e <__divsf3+0x14>
    8d4c:	55 23       	and	r21, r21
    8d4e:	b1 f3       	breq	.-20     	; 0x8d3c <__divsf3+0x12>
    8d50:	95 1b       	sub	r25, r21
    8d52:	55 0b       	sbc	r21, r21
    8d54:	bb 27       	eor	r27, r27
    8d56:	aa 27       	eor	r26, r26
    8d58:	62 17       	cp	r22, r18
    8d5a:	73 07       	cpc	r23, r19
    8d5c:	84 07       	cpc	r24, r20
    8d5e:	38 f0       	brcs	.+14     	; 0x8d6e <__divsf3_pse+0x26>
    8d60:	9f 5f       	subi	r25, 0xFF	; 255
    8d62:	5f 4f       	sbci	r21, 0xFF	; 255
    8d64:	22 0f       	add	r18, r18
    8d66:	33 1f       	adc	r19, r19
    8d68:	44 1f       	adc	r20, r20
    8d6a:	aa 1f       	adc	r26, r26
    8d6c:	a9 f3       	breq	.-22     	; 0x8d58 <__divsf3_pse+0x10>
    8d6e:	33 d0       	rcall	.+102    	; 0x8dd6 <__divsf3_pse+0x8e>
    8d70:	0e 2e       	mov	r0, r30
    8d72:	3a f0       	brmi	.+14     	; 0x8d82 <__divsf3_pse+0x3a>
    8d74:	e0 e8       	ldi	r30, 0x80	; 128
    8d76:	30 d0       	rcall	.+96     	; 0x8dd8 <__divsf3_pse+0x90>
    8d78:	91 50       	subi	r25, 0x01	; 1
    8d7a:	50 40       	sbci	r21, 0x00	; 0
    8d7c:	e6 95       	lsr	r30
    8d7e:	00 1c       	adc	r0, r0
    8d80:	ca f7       	brpl	.-14     	; 0x8d74 <__divsf3_pse+0x2c>
    8d82:	29 d0       	rcall	.+82     	; 0x8dd6 <__divsf3_pse+0x8e>
    8d84:	fe 2f       	mov	r31, r30
    8d86:	27 d0       	rcall	.+78     	; 0x8dd6 <__divsf3_pse+0x8e>
    8d88:	66 0f       	add	r22, r22
    8d8a:	77 1f       	adc	r23, r23
    8d8c:	88 1f       	adc	r24, r24
    8d8e:	bb 1f       	adc	r27, r27
    8d90:	26 17       	cp	r18, r22
    8d92:	37 07       	cpc	r19, r23
    8d94:	48 07       	cpc	r20, r24
    8d96:	ab 07       	cpc	r26, r27
    8d98:	b0 e8       	ldi	r27, 0x80	; 128
    8d9a:	09 f0       	breq	.+2      	; 0x8d9e <__divsf3_pse+0x56>
    8d9c:	bb 0b       	sbc	r27, r27
    8d9e:	80 2d       	mov	r24, r0
    8da0:	bf 01       	movw	r22, r30
    8da2:	ff 27       	eor	r31, r31
    8da4:	93 58       	subi	r25, 0x83	; 131
    8da6:	5f 4f       	sbci	r21, 0xFF	; 255
    8da8:	2a f0       	brmi	.+10     	; 0x8db4 <__divsf3_pse+0x6c>
    8daa:	9e 3f       	cpi	r25, 0xFE	; 254
    8dac:	51 05       	cpc	r21, r1
    8dae:	68 f0       	brcs	.+26     	; 0x8dca <__divsf3_pse+0x82>
    8db0:	b6 c0       	rjmp	.+364    	; 0x8f1e <__fp_inf>
    8db2:	00 c1       	rjmp	.+512    	; 0x8fb4 <__fp_szero>
    8db4:	5f 3f       	cpi	r21, 0xFF	; 255
    8db6:	ec f3       	brlt	.-6      	; 0x8db2 <__divsf3_pse+0x6a>
    8db8:	98 3e       	cpi	r25, 0xE8	; 232
    8dba:	dc f3       	brlt	.-10     	; 0x8db2 <__divsf3_pse+0x6a>
    8dbc:	86 95       	lsr	r24
    8dbe:	77 95       	ror	r23
    8dc0:	67 95       	ror	r22
    8dc2:	b7 95       	ror	r27
    8dc4:	f7 95       	ror	r31
    8dc6:	9f 5f       	subi	r25, 0xFF	; 255
    8dc8:	c9 f7       	brne	.-14     	; 0x8dbc <__divsf3_pse+0x74>
    8dca:	88 0f       	add	r24, r24
    8dcc:	91 1d       	adc	r25, r1
    8dce:	96 95       	lsr	r25
    8dd0:	87 95       	ror	r24
    8dd2:	97 f9       	bld	r25, 7
    8dd4:	08 95       	ret
    8dd6:	e1 e0       	ldi	r30, 0x01	; 1
    8dd8:	66 0f       	add	r22, r22
    8dda:	77 1f       	adc	r23, r23
    8ddc:	88 1f       	adc	r24, r24
    8dde:	bb 1f       	adc	r27, r27
    8de0:	62 17       	cp	r22, r18
    8de2:	73 07       	cpc	r23, r19
    8de4:	84 07       	cpc	r24, r20
    8de6:	ba 07       	cpc	r27, r26
    8de8:	20 f0       	brcs	.+8      	; 0x8df2 <__divsf3_pse+0xaa>
    8dea:	62 1b       	sub	r22, r18
    8dec:	73 0b       	sbc	r23, r19
    8dee:	84 0b       	sbc	r24, r20
    8df0:	ba 0b       	sbc	r27, r26
    8df2:	ee 1f       	adc	r30, r30
    8df4:	88 f7       	brcc	.-30     	; 0x8dd8 <__divsf3_pse+0x90>
    8df6:	e0 95       	com	r30
    8df8:	08 95       	ret

00008dfa <__fixsfsi>:
    8dfa:	04 d0       	rcall	.+8      	; 0x8e04 <__fixunssfsi>
    8dfc:	68 94       	set
    8dfe:	b1 11       	cpse	r27, r1
    8e00:	d9 c0       	rjmp	.+434    	; 0x8fb4 <__fp_szero>
    8e02:	08 95       	ret

00008e04 <__fixunssfsi>:
    8e04:	bc d0       	rcall	.+376    	; 0x8f7e <__fp_splitA>
    8e06:	88 f0       	brcs	.+34     	; 0x8e2a <__fixunssfsi+0x26>
    8e08:	9f 57       	subi	r25, 0x7F	; 127
    8e0a:	90 f0       	brcs	.+36     	; 0x8e30 <__fixunssfsi+0x2c>
    8e0c:	b9 2f       	mov	r27, r25
    8e0e:	99 27       	eor	r25, r25
    8e10:	b7 51       	subi	r27, 0x17	; 23
    8e12:	a0 f0       	brcs	.+40     	; 0x8e3c <__fixunssfsi+0x38>
    8e14:	d1 f0       	breq	.+52     	; 0x8e4a <__fixunssfsi+0x46>
    8e16:	66 0f       	add	r22, r22
    8e18:	77 1f       	adc	r23, r23
    8e1a:	88 1f       	adc	r24, r24
    8e1c:	99 1f       	adc	r25, r25
    8e1e:	1a f0       	brmi	.+6      	; 0x8e26 <__fixunssfsi+0x22>
    8e20:	ba 95       	dec	r27
    8e22:	c9 f7       	brne	.-14     	; 0x8e16 <__fixunssfsi+0x12>
    8e24:	12 c0       	rjmp	.+36     	; 0x8e4a <__fixunssfsi+0x46>
    8e26:	b1 30       	cpi	r27, 0x01	; 1
    8e28:	81 f0       	breq	.+32     	; 0x8e4a <__fixunssfsi+0x46>
    8e2a:	c3 d0       	rcall	.+390    	; 0x8fb2 <__fp_zero>
    8e2c:	b1 e0       	ldi	r27, 0x01	; 1
    8e2e:	08 95       	ret
    8e30:	c0 c0       	rjmp	.+384    	; 0x8fb2 <__fp_zero>
    8e32:	67 2f       	mov	r22, r23
    8e34:	78 2f       	mov	r23, r24
    8e36:	88 27       	eor	r24, r24
    8e38:	b8 5f       	subi	r27, 0xF8	; 248
    8e3a:	39 f0       	breq	.+14     	; 0x8e4a <__fixunssfsi+0x46>
    8e3c:	b9 3f       	cpi	r27, 0xF9	; 249
    8e3e:	cc f3       	brlt	.-14     	; 0x8e32 <__fixunssfsi+0x2e>
    8e40:	86 95       	lsr	r24
    8e42:	77 95       	ror	r23
    8e44:	67 95       	ror	r22
    8e46:	b3 95       	inc	r27
    8e48:	d9 f7       	brne	.-10     	; 0x8e40 <__fixunssfsi+0x3c>
    8e4a:	3e f4       	brtc	.+14     	; 0x8e5a <__fixunssfsi+0x56>
    8e4c:	90 95       	com	r25
    8e4e:	80 95       	com	r24
    8e50:	70 95       	com	r23
    8e52:	61 95       	neg	r22
    8e54:	7f 4f       	sbci	r23, 0xFF	; 255
    8e56:	8f 4f       	sbci	r24, 0xFF	; 255
    8e58:	9f 4f       	sbci	r25, 0xFF	; 255
    8e5a:	08 95       	ret

00008e5c <__floatunsisf>:
    8e5c:	e8 94       	clt
    8e5e:	09 c0       	rjmp	.+18     	; 0x8e72 <__floatsisf+0x12>

00008e60 <__floatsisf>:
    8e60:	97 fb       	bst	r25, 7
    8e62:	3e f4       	brtc	.+14     	; 0x8e72 <__floatsisf+0x12>
    8e64:	90 95       	com	r25
    8e66:	80 95       	com	r24
    8e68:	70 95       	com	r23
    8e6a:	61 95       	neg	r22
    8e6c:	7f 4f       	sbci	r23, 0xFF	; 255
    8e6e:	8f 4f       	sbci	r24, 0xFF	; 255
    8e70:	9f 4f       	sbci	r25, 0xFF	; 255
    8e72:	99 23       	and	r25, r25
    8e74:	a9 f0       	breq	.+42     	; 0x8ea0 <__floatsisf+0x40>
    8e76:	f9 2f       	mov	r31, r25
    8e78:	96 e9       	ldi	r25, 0x96	; 150
    8e7a:	bb 27       	eor	r27, r27
    8e7c:	93 95       	inc	r25
    8e7e:	f6 95       	lsr	r31
    8e80:	87 95       	ror	r24
    8e82:	77 95       	ror	r23
    8e84:	67 95       	ror	r22
    8e86:	b7 95       	ror	r27
    8e88:	f1 11       	cpse	r31, r1
    8e8a:	f8 cf       	rjmp	.-16     	; 0x8e7c <__floatsisf+0x1c>
    8e8c:	fa f4       	brpl	.+62     	; 0x8ecc <__floatsisf+0x6c>
    8e8e:	bb 0f       	add	r27, r27
    8e90:	11 f4       	brne	.+4      	; 0x8e96 <__floatsisf+0x36>
    8e92:	60 ff       	sbrs	r22, 0
    8e94:	1b c0       	rjmp	.+54     	; 0x8ecc <__floatsisf+0x6c>
    8e96:	6f 5f       	subi	r22, 0xFF	; 255
    8e98:	7f 4f       	sbci	r23, 0xFF	; 255
    8e9a:	8f 4f       	sbci	r24, 0xFF	; 255
    8e9c:	9f 4f       	sbci	r25, 0xFF	; 255
    8e9e:	16 c0       	rjmp	.+44     	; 0x8ecc <__floatsisf+0x6c>
    8ea0:	88 23       	and	r24, r24
    8ea2:	11 f0       	breq	.+4      	; 0x8ea8 <__floatsisf+0x48>
    8ea4:	96 e9       	ldi	r25, 0x96	; 150
    8ea6:	11 c0       	rjmp	.+34     	; 0x8eca <__floatsisf+0x6a>
    8ea8:	77 23       	and	r23, r23
    8eaa:	21 f0       	breq	.+8      	; 0x8eb4 <__floatsisf+0x54>
    8eac:	9e e8       	ldi	r25, 0x8E	; 142
    8eae:	87 2f       	mov	r24, r23
    8eb0:	76 2f       	mov	r23, r22
    8eb2:	05 c0       	rjmp	.+10     	; 0x8ebe <__floatsisf+0x5e>
    8eb4:	66 23       	and	r22, r22
    8eb6:	71 f0       	breq	.+28     	; 0x8ed4 <__floatsisf+0x74>
    8eb8:	96 e8       	ldi	r25, 0x86	; 134
    8eba:	86 2f       	mov	r24, r22
    8ebc:	70 e0       	ldi	r23, 0x00	; 0
    8ebe:	60 e0       	ldi	r22, 0x00	; 0
    8ec0:	2a f0       	brmi	.+10     	; 0x8ecc <__floatsisf+0x6c>
    8ec2:	9a 95       	dec	r25
    8ec4:	66 0f       	add	r22, r22
    8ec6:	77 1f       	adc	r23, r23
    8ec8:	88 1f       	adc	r24, r24
    8eca:	da f7       	brpl	.-10     	; 0x8ec2 <__floatsisf+0x62>
    8ecc:	88 0f       	add	r24, r24
    8ece:	96 95       	lsr	r25
    8ed0:	87 95       	ror	r24
    8ed2:	97 f9       	bld	r25, 7
    8ed4:	08 95       	ret

00008ed6 <__fp_cmp>:
    8ed6:	99 0f       	add	r25, r25
    8ed8:	00 08       	sbc	r0, r0
    8eda:	55 0f       	add	r21, r21
    8edc:	aa 0b       	sbc	r26, r26
    8ede:	e0 e8       	ldi	r30, 0x80	; 128
    8ee0:	fe ef       	ldi	r31, 0xFE	; 254
    8ee2:	16 16       	cp	r1, r22
    8ee4:	17 06       	cpc	r1, r23
    8ee6:	e8 07       	cpc	r30, r24
    8ee8:	f9 07       	cpc	r31, r25
    8eea:	c0 f0       	brcs	.+48     	; 0x8f1c <__fp_cmp+0x46>
    8eec:	12 16       	cp	r1, r18
    8eee:	13 06       	cpc	r1, r19
    8ef0:	e4 07       	cpc	r30, r20
    8ef2:	f5 07       	cpc	r31, r21
    8ef4:	98 f0       	brcs	.+38     	; 0x8f1c <__fp_cmp+0x46>
    8ef6:	62 1b       	sub	r22, r18
    8ef8:	73 0b       	sbc	r23, r19
    8efa:	84 0b       	sbc	r24, r20
    8efc:	95 0b       	sbc	r25, r21
    8efe:	39 f4       	brne	.+14     	; 0x8f0e <__fp_cmp+0x38>
    8f00:	0a 26       	eor	r0, r26
    8f02:	61 f0       	breq	.+24     	; 0x8f1c <__fp_cmp+0x46>
    8f04:	23 2b       	or	r18, r19
    8f06:	24 2b       	or	r18, r20
    8f08:	25 2b       	or	r18, r21
    8f0a:	21 f4       	brne	.+8      	; 0x8f14 <__fp_cmp+0x3e>
    8f0c:	08 95       	ret
    8f0e:	0a 26       	eor	r0, r26
    8f10:	09 f4       	brne	.+2      	; 0x8f14 <__fp_cmp+0x3e>
    8f12:	a1 40       	sbci	r26, 0x01	; 1
    8f14:	a6 95       	lsr	r26
    8f16:	8f ef       	ldi	r24, 0xFF	; 255
    8f18:	81 1d       	adc	r24, r1
    8f1a:	81 1d       	adc	r24, r1
    8f1c:	08 95       	ret

00008f1e <__fp_inf>:
    8f1e:	97 f9       	bld	r25, 7
    8f20:	9f 67       	ori	r25, 0x7F	; 127
    8f22:	80 e8       	ldi	r24, 0x80	; 128
    8f24:	70 e0       	ldi	r23, 0x00	; 0
    8f26:	60 e0       	ldi	r22, 0x00	; 0
    8f28:	08 95       	ret

00008f2a <__fp_nan>:
    8f2a:	9f ef       	ldi	r25, 0xFF	; 255
    8f2c:	80 ec       	ldi	r24, 0xC0	; 192
    8f2e:	08 95       	ret

00008f30 <__fp_pscA>:
    8f30:	00 24       	eor	r0, r0
    8f32:	0a 94       	dec	r0
    8f34:	16 16       	cp	r1, r22
    8f36:	17 06       	cpc	r1, r23
    8f38:	18 06       	cpc	r1, r24
    8f3a:	09 06       	cpc	r0, r25
    8f3c:	08 95       	ret

00008f3e <__fp_pscB>:
    8f3e:	00 24       	eor	r0, r0
    8f40:	0a 94       	dec	r0
    8f42:	12 16       	cp	r1, r18
    8f44:	13 06       	cpc	r1, r19
    8f46:	14 06       	cpc	r1, r20
    8f48:	05 06       	cpc	r0, r21
    8f4a:	08 95       	ret

00008f4c <__fp_round>:
    8f4c:	09 2e       	mov	r0, r25
    8f4e:	03 94       	inc	r0
    8f50:	00 0c       	add	r0, r0
    8f52:	11 f4       	brne	.+4      	; 0x8f58 <__fp_round+0xc>
    8f54:	88 23       	and	r24, r24
    8f56:	52 f0       	brmi	.+20     	; 0x8f6c <__fp_round+0x20>
    8f58:	bb 0f       	add	r27, r27
    8f5a:	40 f4       	brcc	.+16     	; 0x8f6c <__fp_round+0x20>
    8f5c:	bf 2b       	or	r27, r31
    8f5e:	11 f4       	brne	.+4      	; 0x8f64 <__fp_round+0x18>
    8f60:	60 ff       	sbrs	r22, 0
    8f62:	04 c0       	rjmp	.+8      	; 0x8f6c <__fp_round+0x20>
    8f64:	6f 5f       	subi	r22, 0xFF	; 255
    8f66:	7f 4f       	sbci	r23, 0xFF	; 255
    8f68:	8f 4f       	sbci	r24, 0xFF	; 255
    8f6a:	9f 4f       	sbci	r25, 0xFF	; 255
    8f6c:	08 95       	ret

00008f6e <__fp_split3>:
    8f6e:	57 fd       	sbrc	r21, 7
    8f70:	90 58       	subi	r25, 0x80	; 128
    8f72:	44 0f       	add	r20, r20
    8f74:	55 1f       	adc	r21, r21
    8f76:	59 f0       	breq	.+22     	; 0x8f8e <__fp_splitA+0x10>
    8f78:	5f 3f       	cpi	r21, 0xFF	; 255
    8f7a:	71 f0       	breq	.+28     	; 0x8f98 <__fp_splitA+0x1a>
    8f7c:	47 95       	ror	r20

00008f7e <__fp_splitA>:
    8f7e:	88 0f       	add	r24, r24
    8f80:	97 fb       	bst	r25, 7
    8f82:	99 1f       	adc	r25, r25
    8f84:	61 f0       	breq	.+24     	; 0x8f9e <__fp_splitA+0x20>
    8f86:	9f 3f       	cpi	r25, 0xFF	; 255
    8f88:	79 f0       	breq	.+30     	; 0x8fa8 <__fp_splitA+0x2a>
    8f8a:	87 95       	ror	r24
    8f8c:	08 95       	ret
    8f8e:	12 16       	cp	r1, r18
    8f90:	13 06       	cpc	r1, r19
    8f92:	14 06       	cpc	r1, r20
    8f94:	55 1f       	adc	r21, r21
    8f96:	f2 cf       	rjmp	.-28     	; 0x8f7c <__fp_split3+0xe>
    8f98:	46 95       	lsr	r20
    8f9a:	f1 df       	rcall	.-30     	; 0x8f7e <__fp_splitA>
    8f9c:	08 c0       	rjmp	.+16     	; 0x8fae <__fp_splitA+0x30>
    8f9e:	16 16       	cp	r1, r22
    8fa0:	17 06       	cpc	r1, r23
    8fa2:	18 06       	cpc	r1, r24
    8fa4:	99 1f       	adc	r25, r25
    8fa6:	f1 cf       	rjmp	.-30     	; 0x8f8a <__fp_splitA+0xc>
    8fa8:	86 95       	lsr	r24
    8faa:	71 05       	cpc	r23, r1
    8fac:	61 05       	cpc	r22, r1
    8fae:	08 94       	sec
    8fb0:	08 95       	ret

00008fb2 <__fp_zero>:
    8fb2:	e8 94       	clt

00008fb4 <__fp_szero>:
    8fb4:	bb 27       	eor	r27, r27
    8fb6:	66 27       	eor	r22, r22
    8fb8:	77 27       	eor	r23, r23
    8fba:	cb 01       	movw	r24, r22
    8fbc:	97 f9       	bld	r25, 7
    8fbe:	08 95       	ret

00008fc0 <__gesf2>:
    8fc0:	8a df       	rcall	.-236    	; 0x8ed6 <__fp_cmp>
    8fc2:	08 f4       	brcc	.+2      	; 0x8fc6 <__gesf2+0x6>
    8fc4:	8f ef       	ldi	r24, 0xFF	; 255
    8fc6:	08 95       	ret

00008fc8 <__mulsf3>:
    8fc8:	0b d0       	rcall	.+22     	; 0x8fe0 <__mulsf3x>
    8fca:	c0 cf       	rjmp	.-128    	; 0x8f4c <__fp_round>
    8fcc:	b1 df       	rcall	.-158    	; 0x8f30 <__fp_pscA>
    8fce:	28 f0       	brcs	.+10     	; 0x8fda <__mulsf3+0x12>
    8fd0:	b6 df       	rcall	.-148    	; 0x8f3e <__fp_pscB>
    8fd2:	18 f0       	brcs	.+6      	; 0x8fda <__mulsf3+0x12>
    8fd4:	95 23       	and	r25, r21
    8fd6:	09 f0       	breq	.+2      	; 0x8fda <__mulsf3+0x12>
    8fd8:	a2 cf       	rjmp	.-188    	; 0x8f1e <__fp_inf>
    8fda:	a7 cf       	rjmp	.-178    	; 0x8f2a <__fp_nan>
    8fdc:	11 24       	eor	r1, r1
    8fde:	ea cf       	rjmp	.-44     	; 0x8fb4 <__fp_szero>

00008fe0 <__mulsf3x>:
    8fe0:	c6 df       	rcall	.-116    	; 0x8f6e <__fp_split3>
    8fe2:	a0 f3       	brcs	.-24     	; 0x8fcc <__mulsf3+0x4>

00008fe4 <__mulsf3_pse>:
    8fe4:	95 9f       	mul	r25, r21
    8fe6:	d1 f3       	breq	.-12     	; 0x8fdc <__mulsf3+0x14>
    8fe8:	95 0f       	add	r25, r21
    8fea:	50 e0       	ldi	r21, 0x00	; 0
    8fec:	55 1f       	adc	r21, r21
    8fee:	62 9f       	mul	r22, r18
    8ff0:	f0 01       	movw	r30, r0
    8ff2:	72 9f       	mul	r23, r18
    8ff4:	bb 27       	eor	r27, r27
    8ff6:	f0 0d       	add	r31, r0
    8ff8:	b1 1d       	adc	r27, r1
    8ffa:	63 9f       	mul	r22, r19
    8ffc:	aa 27       	eor	r26, r26
    8ffe:	f0 0d       	add	r31, r0
    9000:	b1 1d       	adc	r27, r1
    9002:	aa 1f       	adc	r26, r26
    9004:	64 9f       	mul	r22, r20
    9006:	66 27       	eor	r22, r22
    9008:	b0 0d       	add	r27, r0
    900a:	a1 1d       	adc	r26, r1
    900c:	66 1f       	adc	r22, r22
    900e:	82 9f       	mul	r24, r18
    9010:	22 27       	eor	r18, r18
    9012:	b0 0d       	add	r27, r0
    9014:	a1 1d       	adc	r26, r1
    9016:	62 1f       	adc	r22, r18
    9018:	73 9f       	mul	r23, r19
    901a:	b0 0d       	add	r27, r0
    901c:	a1 1d       	adc	r26, r1
    901e:	62 1f       	adc	r22, r18
    9020:	83 9f       	mul	r24, r19
    9022:	a0 0d       	add	r26, r0
    9024:	61 1d       	adc	r22, r1
    9026:	22 1f       	adc	r18, r18
    9028:	74 9f       	mul	r23, r20
    902a:	33 27       	eor	r19, r19
    902c:	a0 0d       	add	r26, r0
    902e:	61 1d       	adc	r22, r1
    9030:	23 1f       	adc	r18, r19
    9032:	84 9f       	mul	r24, r20
    9034:	60 0d       	add	r22, r0
    9036:	21 1d       	adc	r18, r1
    9038:	82 2f       	mov	r24, r18
    903a:	76 2f       	mov	r23, r22
    903c:	6a 2f       	mov	r22, r26
    903e:	11 24       	eor	r1, r1
    9040:	9f 57       	subi	r25, 0x7F	; 127
    9042:	50 40       	sbci	r21, 0x00	; 0
    9044:	8a f0       	brmi	.+34     	; 0x9068 <__mulsf3_pse+0x84>
    9046:	e1 f0       	breq	.+56     	; 0x9080 <__mulsf3_pse+0x9c>
    9048:	88 23       	and	r24, r24
    904a:	4a f0       	brmi	.+18     	; 0x905e <__mulsf3_pse+0x7a>
    904c:	ee 0f       	add	r30, r30
    904e:	ff 1f       	adc	r31, r31
    9050:	bb 1f       	adc	r27, r27
    9052:	66 1f       	adc	r22, r22
    9054:	77 1f       	adc	r23, r23
    9056:	88 1f       	adc	r24, r24
    9058:	91 50       	subi	r25, 0x01	; 1
    905a:	50 40       	sbci	r21, 0x00	; 0
    905c:	a9 f7       	brne	.-22     	; 0x9048 <__mulsf3_pse+0x64>
    905e:	9e 3f       	cpi	r25, 0xFE	; 254
    9060:	51 05       	cpc	r21, r1
    9062:	70 f0       	brcs	.+28     	; 0x9080 <__mulsf3_pse+0x9c>
    9064:	5c cf       	rjmp	.-328    	; 0x8f1e <__fp_inf>
    9066:	a6 cf       	rjmp	.-180    	; 0x8fb4 <__fp_szero>
    9068:	5f 3f       	cpi	r21, 0xFF	; 255
    906a:	ec f3       	brlt	.-6      	; 0x9066 <__mulsf3_pse+0x82>
    906c:	98 3e       	cpi	r25, 0xE8	; 232
    906e:	dc f3       	brlt	.-10     	; 0x9066 <__mulsf3_pse+0x82>
    9070:	86 95       	lsr	r24
    9072:	77 95       	ror	r23
    9074:	67 95       	ror	r22
    9076:	b7 95       	ror	r27
    9078:	f7 95       	ror	r31
    907a:	e7 95       	ror	r30
    907c:	9f 5f       	subi	r25, 0xFF	; 255
    907e:	c1 f7       	brne	.-16     	; 0x9070 <__mulsf3_pse+0x8c>
    9080:	fe 2b       	or	r31, r30
    9082:	88 0f       	add	r24, r24
    9084:	91 1d       	adc	r25, r1
    9086:	96 95       	lsr	r25
    9088:	87 95       	ror	r24
    908a:	97 f9       	bld	r25, 7
    908c:	08 95       	ret

0000908e <__udivmodhi4>:
    908e:	aa 1b       	sub	r26, r26
    9090:	bb 1b       	sub	r27, r27
    9092:	51 e1       	ldi	r21, 0x11	; 17
    9094:	07 c0       	rjmp	.+14     	; 0x90a4 <__udivmodhi4_ep>

00009096 <__udivmodhi4_loop>:
    9096:	aa 1f       	adc	r26, r26
    9098:	bb 1f       	adc	r27, r27
    909a:	a6 17       	cp	r26, r22
    909c:	b7 07       	cpc	r27, r23
    909e:	10 f0       	brcs	.+4      	; 0x90a4 <__udivmodhi4_ep>
    90a0:	a6 1b       	sub	r26, r22
    90a2:	b7 0b       	sbc	r27, r23

000090a4 <__udivmodhi4_ep>:
    90a4:	88 1f       	adc	r24, r24
    90a6:	99 1f       	adc	r25, r25
    90a8:	5a 95       	dec	r21
    90aa:	a9 f7       	brne	.-22     	; 0x9096 <__udivmodhi4_loop>
    90ac:	80 95       	com	r24
    90ae:	90 95       	com	r25
    90b0:	bc 01       	movw	r22, r24
    90b2:	cd 01       	movw	r24, r26
    90b4:	08 95       	ret

000090b6 <__divmodhi4>:
    90b6:	97 fb       	bst	r25, 7
    90b8:	07 2e       	mov	r0, r23
    90ba:	16 f4       	brtc	.+4      	; 0x90c0 <__divmodhi4+0xa>
    90bc:	00 94       	com	r0
    90be:	07 d0       	rcall	.+14     	; 0x90ce <__divmodhi4_neg1>
    90c0:	77 fd       	sbrc	r23, 7
    90c2:	09 d0       	rcall	.+18     	; 0x90d6 <__divmodhi4_neg2>
    90c4:	0e 94 47 48 	call	0x908e	; 0x908e <__udivmodhi4>
    90c8:	07 fc       	sbrc	r0, 7
    90ca:	05 d0       	rcall	.+10     	; 0x90d6 <__divmodhi4_neg2>
    90cc:	3e f4       	brtc	.+14     	; 0x90dc <__divmodhi4_exit>

000090ce <__divmodhi4_neg1>:
    90ce:	90 95       	com	r25
    90d0:	81 95       	neg	r24
    90d2:	9f 4f       	sbci	r25, 0xFF	; 255
    90d4:	08 95       	ret

000090d6 <__divmodhi4_neg2>:
    90d6:	70 95       	com	r23
    90d8:	61 95       	neg	r22
    90da:	7f 4f       	sbci	r23, 0xFF	; 255

000090dc <__divmodhi4_exit>:
    90dc:	08 95       	ret

000090de <__udivmodsi4>:
    90de:	a1 e2       	ldi	r26, 0x21	; 33
    90e0:	1a 2e       	mov	r1, r26
    90e2:	aa 1b       	sub	r26, r26
    90e4:	bb 1b       	sub	r27, r27
    90e6:	fd 01       	movw	r30, r26
    90e8:	0d c0       	rjmp	.+26     	; 0x9104 <__udivmodsi4_ep>

000090ea <__udivmodsi4_loop>:
    90ea:	aa 1f       	adc	r26, r26
    90ec:	bb 1f       	adc	r27, r27
    90ee:	ee 1f       	adc	r30, r30
    90f0:	ff 1f       	adc	r31, r31
    90f2:	a2 17       	cp	r26, r18
    90f4:	b3 07       	cpc	r27, r19
    90f6:	e4 07       	cpc	r30, r20
    90f8:	f5 07       	cpc	r31, r21
    90fa:	20 f0       	brcs	.+8      	; 0x9104 <__udivmodsi4_ep>
    90fc:	a2 1b       	sub	r26, r18
    90fe:	b3 0b       	sbc	r27, r19
    9100:	e4 0b       	sbc	r30, r20
    9102:	f5 0b       	sbc	r31, r21

00009104 <__udivmodsi4_ep>:
    9104:	66 1f       	adc	r22, r22
    9106:	77 1f       	adc	r23, r23
    9108:	88 1f       	adc	r24, r24
    910a:	99 1f       	adc	r25, r25
    910c:	1a 94       	dec	r1
    910e:	69 f7       	brne	.-38     	; 0x90ea <__udivmodsi4_loop>
    9110:	60 95       	com	r22
    9112:	70 95       	com	r23
    9114:	80 95       	com	r24
    9116:	90 95       	com	r25
    9118:	9b 01       	movw	r18, r22
    911a:	ac 01       	movw	r20, r24
    911c:	bd 01       	movw	r22, r26
    911e:	cf 01       	movw	r24, r30
    9120:	08 95       	ret

00009122 <__divmodsi4>:
    9122:	05 2e       	mov	r0, r21
    9124:	97 fb       	bst	r25, 7
    9126:	1e f4       	brtc	.+6      	; 0x912e <__divmodsi4+0xc>
    9128:	00 94       	com	r0
    912a:	0e 94 a8 48 	call	0x9150	; 0x9150 <__negsi2>
    912e:	57 fd       	sbrc	r21, 7
    9130:	07 d0       	rcall	.+14     	; 0x9140 <__divmodsi4_neg2>
    9132:	0e 94 6f 48 	call	0x90de	; 0x90de <__udivmodsi4>
    9136:	07 fc       	sbrc	r0, 7
    9138:	03 d0       	rcall	.+6      	; 0x9140 <__divmodsi4_neg2>
    913a:	4e f4       	brtc	.+18     	; 0x914e <__divmodsi4_exit>
    913c:	0c 94 a8 48 	jmp	0x9150	; 0x9150 <__negsi2>

00009140 <__divmodsi4_neg2>:
    9140:	50 95       	com	r21
    9142:	40 95       	com	r20
    9144:	30 95       	com	r19
    9146:	21 95       	neg	r18
    9148:	3f 4f       	sbci	r19, 0xFF	; 255
    914a:	4f 4f       	sbci	r20, 0xFF	; 255
    914c:	5f 4f       	sbci	r21, 0xFF	; 255

0000914e <__divmodsi4_exit>:
    914e:	08 95       	ret

00009150 <__negsi2>:
    9150:	90 95       	com	r25
    9152:	80 95       	com	r24
    9154:	70 95       	com	r23
    9156:	61 95       	neg	r22
    9158:	7f 4f       	sbci	r23, 0xFF	; 255
    915a:	8f 4f       	sbci	r24, 0xFF	; 255
    915c:	9f 4f       	sbci	r25, 0xFF	; 255
    915e:	08 95       	ret

00009160 <__tablejump2__>:
    9160:	ee 0f       	add	r30, r30
    9162:	ff 1f       	adc	r31, r31

00009164 <__tablejump__>:
    9164:	05 90       	lpm	r0, Z+
    9166:	f4 91       	lpm	r31, Z
    9168:	e0 2d       	mov	r30, r0
    916a:	09 94       	ijmp

0000916c <__mulhisi3>:
    916c:	0e 94 be 48 	call	0x917c	; 0x917c <__umulhisi3>
    9170:	33 23       	and	r19, r19
    9172:	12 f4       	brpl	.+4      	; 0x9178 <__mulhisi3+0xc>
    9174:	8a 1b       	sub	r24, r26
    9176:	9b 0b       	sbc	r25, r27
    9178:	0c 94 cf 48 	jmp	0x919e	; 0x919e <__usmulhisi3_tail>

0000917c <__umulhisi3>:
    917c:	a2 9f       	mul	r26, r18
    917e:	b0 01       	movw	r22, r0
    9180:	b3 9f       	mul	r27, r19
    9182:	c0 01       	movw	r24, r0
    9184:	a3 9f       	mul	r26, r19
    9186:	70 0d       	add	r23, r0
    9188:	81 1d       	adc	r24, r1
    918a:	11 24       	eor	r1, r1
    918c:	91 1d       	adc	r25, r1
    918e:	b2 9f       	mul	r27, r18
    9190:	70 0d       	add	r23, r0
    9192:	81 1d       	adc	r24, r1
    9194:	11 24       	eor	r1, r1
    9196:	91 1d       	adc	r25, r1
    9198:	08 95       	ret

0000919a <__usmulhisi3>:
    919a:	0e 94 be 48 	call	0x917c	; 0x917c <__umulhisi3>

0000919e <__usmulhisi3_tail>:
    919e:	b7 ff       	sbrs	r27, 7
    91a0:	08 95       	ret
    91a2:	82 1b       	sub	r24, r18
    91a4:	93 0b       	sbc	r25, r19
    91a6:	08 95       	ret

000091a8 <__muluhisi3>:
    91a8:	0e 94 be 48 	call	0x917c	; 0x917c <__umulhisi3>
    91ac:	a5 9f       	mul	r26, r21
    91ae:	90 0d       	add	r25, r0
    91b0:	b4 9f       	mul	r27, r20
    91b2:	90 0d       	add	r25, r0
    91b4:	a4 9f       	mul	r26, r20
    91b6:	80 0d       	add	r24, r0
    91b8:	91 1d       	adc	r25, r1
    91ba:	11 24       	eor	r1, r1
    91bc:	08 95       	ret

000091be <__mulshisi3>:
    91be:	b7 ff       	sbrs	r27, 7
    91c0:	0c 94 d4 48 	jmp	0x91a8	; 0x91a8 <__muluhisi3>

000091c4 <__mulohisi3>:
    91c4:	0e 94 d4 48 	call	0x91a8	; 0x91a8 <__muluhisi3>
    91c8:	82 1b       	sub	r24, r18
    91ca:	93 0b       	sbc	r25, r19
    91cc:	08 95       	ret

000091ce <memcpy_P>:
    91ce:	fb 01       	movw	r30, r22
    91d0:	dc 01       	movw	r26, r24
    91d2:	02 c0       	rjmp	.+4      	; 0x91d8 <memcpy_P+0xa>
    91d4:	05 90       	lpm	r0, Z+
    91d6:	0d 92       	st	X+, r0
    91d8:	41 50       	subi	r20, 0x01	; 1
    91da:	50 40       	sbci	r21, 0x00	; 0
    91dc:	d8 f7       	brcc	.-10     	; 0x91d4 <memcpy_P+0x6>
    91de:	08 95       	ret

000091e0 <memmove>:
    91e0:	68 17       	cp	r22, r24
    91e2:	79 07       	cpc	r23, r25
    91e4:	68 f4       	brcc	.+26     	; 0x9200 <memmove+0x20>
    91e6:	fb 01       	movw	r30, r22
    91e8:	dc 01       	movw	r26, r24
    91ea:	e4 0f       	add	r30, r20
    91ec:	f5 1f       	adc	r31, r21
    91ee:	a4 0f       	add	r26, r20
    91f0:	b5 1f       	adc	r27, r21
    91f2:	02 c0       	rjmp	.+4      	; 0x91f8 <memmove+0x18>
    91f4:	02 90       	ld	r0, -Z
    91f6:	0e 92       	st	-X, r0
    91f8:	41 50       	subi	r20, 0x01	; 1
    91fa:	50 40       	sbci	r21, 0x00	; 0
    91fc:	d8 f7       	brcc	.-10     	; 0x91f4 <memmove+0x14>
    91fe:	08 95       	ret
    9200:	0c 94 4d 49 	jmp	0x929a	; 0x929a <memcpy>

00009204 <__itoa_ncheck>:
    9204:	bb 27       	eor	r27, r27
    9206:	4a 30       	cpi	r20, 0x0A	; 10
    9208:	31 f4       	brne	.+12     	; 0x9216 <__itoa_ncheck+0x12>
    920a:	99 23       	and	r25, r25
    920c:	22 f4       	brpl	.+8      	; 0x9216 <__itoa_ncheck+0x12>
    920e:	bd e2       	ldi	r27, 0x2D	; 45
    9210:	90 95       	com	r25
    9212:	81 95       	neg	r24
    9214:	9f 4f       	sbci	r25, 0xFF	; 255
    9216:	0c 94 0e 49 	jmp	0x921c	; 0x921c <__utoa_common>

0000921a <__utoa_ncheck>:
    921a:	bb 27       	eor	r27, r27

0000921c <__utoa_common>:
    921c:	fb 01       	movw	r30, r22
    921e:	55 27       	eor	r21, r21
    9220:	aa 27       	eor	r26, r26
    9222:	88 0f       	add	r24, r24
    9224:	99 1f       	adc	r25, r25
    9226:	aa 1f       	adc	r26, r26
    9228:	a4 17       	cp	r26, r20
    922a:	10 f0       	brcs	.+4      	; 0x9230 <__utoa_common+0x14>
    922c:	a4 1b       	sub	r26, r20
    922e:	83 95       	inc	r24
    9230:	50 51       	subi	r21, 0x10	; 16
    9232:	b9 f7       	brne	.-18     	; 0x9222 <__utoa_common+0x6>
    9234:	a0 5d       	subi	r26, 0xD0	; 208
    9236:	aa 33       	cpi	r26, 0x3A	; 58
    9238:	08 f0       	brcs	.+2      	; 0x923c <__utoa_common+0x20>
    923a:	a9 5d       	subi	r26, 0xD9	; 217
    923c:	a1 93       	st	Z+, r26
    923e:	00 97       	sbiw	r24, 0x00	; 0
    9240:	79 f7       	brne	.-34     	; 0x9220 <__utoa_common+0x4>
    9242:	b1 11       	cpse	r27, r1
    9244:	b1 93       	st	Z+, r27
    9246:	11 92       	st	Z+, r1
    9248:	cb 01       	movw	r24, r22
    924a:	0c 94 56 49 	jmp	0x92ac	; 0x92ac <strrev>

0000924e <__eerd_block_m644pa>:
    924e:	dc 01       	movw	r26, r24
    9250:	cb 01       	movw	r24, r22

00009252 <__eerd_blraw_m644pa>:
    9252:	fc 01       	movw	r30, r24
    9254:	f9 99       	sbic	0x1f, 1	; 31
    9256:	fe cf       	rjmp	.-4      	; 0x9254 <__eerd_blraw_m644pa+0x2>
    9258:	06 c0       	rjmp	.+12     	; 0x9266 <__eerd_blraw_m644pa+0x14>
    925a:	f2 bd       	out	0x22, r31	; 34
    925c:	e1 bd       	out	0x21, r30	; 33
    925e:	f8 9a       	sbi	0x1f, 0	; 31
    9260:	31 96       	adiw	r30, 0x01	; 1
    9262:	00 b4       	in	r0, 0x20	; 32
    9264:	0d 92       	st	X+, r0
    9266:	41 50       	subi	r20, 0x01	; 1
    9268:	50 40       	sbci	r21, 0x00	; 0
    926a:	b8 f7       	brcc	.-18     	; 0x925a <__eerd_blraw_m644pa+0x8>
    926c:	08 95       	ret

0000926e <__eerd_byte_m644pa>:
    926e:	f9 99       	sbic	0x1f, 1	; 31
    9270:	fe cf       	rjmp	.-4      	; 0x926e <__eerd_byte_m644pa>
    9272:	92 bd       	out	0x22, r25	; 34
    9274:	81 bd       	out	0x21, r24	; 33
    9276:	f8 9a       	sbi	0x1f, 0	; 31
    9278:	99 27       	eor	r25, r25
    927a:	80 b5       	in	r24, 0x20	; 32
    927c:	08 95       	ret

0000927e <__eewr_byte_m644pa>:
    927e:	26 2f       	mov	r18, r22

00009280 <__eewr_r18_m644pa>:
    9280:	f9 99       	sbic	0x1f, 1	; 31
    9282:	fe cf       	rjmp	.-4      	; 0x9280 <__eewr_r18_m644pa>
    9284:	1f ba       	out	0x1f, r1	; 31
    9286:	92 bd       	out	0x22, r25	; 34
    9288:	81 bd       	out	0x21, r24	; 33
    928a:	20 bd       	out	0x20, r18	; 32
    928c:	0f b6       	in	r0, 0x3f	; 63
    928e:	f8 94       	cli
    9290:	fa 9a       	sbi	0x1f, 2	; 31
    9292:	f9 9a       	sbi	0x1f, 1	; 31
    9294:	0f be       	out	0x3f, r0	; 63
    9296:	01 96       	adiw	r24, 0x01	; 1
    9298:	08 95       	ret

0000929a <memcpy>:
    929a:	fb 01       	movw	r30, r22
    929c:	dc 01       	movw	r26, r24
    929e:	02 c0       	rjmp	.+4      	; 0x92a4 <memcpy+0xa>
    92a0:	01 90       	ld	r0, Z+
    92a2:	0d 92       	st	X+, r0
    92a4:	41 50       	subi	r20, 0x01	; 1
    92a6:	50 40       	sbci	r21, 0x00	; 0
    92a8:	d8 f7       	brcc	.-10     	; 0x92a0 <memcpy+0x6>
    92aa:	08 95       	ret

000092ac <strrev>:
    92ac:	dc 01       	movw	r26, r24
    92ae:	fc 01       	movw	r30, r24
    92b0:	67 2f       	mov	r22, r23
    92b2:	71 91       	ld	r23, Z+
    92b4:	77 23       	and	r23, r23
    92b6:	e1 f7       	brne	.-8      	; 0x92b0 <strrev+0x4>
    92b8:	32 97       	sbiw	r30, 0x02	; 2
    92ba:	04 c0       	rjmp	.+8      	; 0x92c4 <strrev+0x18>
    92bc:	7c 91       	ld	r23, X
    92be:	6d 93       	st	X+, r22
    92c0:	70 83       	st	Z, r23
    92c2:	62 91       	ld	r22, -Z
    92c4:	ae 17       	cp	r26, r30
    92c6:	bf 07       	cpc	r27, r31
    92c8:	c8 f3       	brcs	.-14     	; 0x92bc <strrev+0x10>
    92ca:	08 95       	ret

000092cc <_exit>:
    92cc:	f8 94       	cli

000092ce <__stop_program>:
    92ce:	ff cf       	rjmp	.-2      	; 0x92ce <__stop_program>
