
OpenAeroVTOL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000040e  00800100  00009026  000090ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00009026  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000341  0080050e  0080050e  000094c8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000094c8  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000660  00000000  00000000  000094f8  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00013f85  00000000  00000000  00009b58  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000034ed  00000000  00000000  0001dadd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00003cae  00000000  00000000  00020fca  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00001400  00000000  00000000  00024c78  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000271b  00000000  00000000  00026078  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00008a88  00000000  00000000  00028793  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000500  00000000  00000000  0003121b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 40 0d 	jmp	0x1a80	; 0x1a80 <__ctors_end>
       4:	0c 94 95 2a 	jmp	0x552a	; 0x552a <__vector_1>
       8:	0c 94 5d 2a 	jmp	0x54ba	; 0x54ba <__vector_2>
       c:	0c 94 40 2b 	jmp	0x5680	; 0x5680 <__vector_3>
      10:	0c 94 66 0d 	jmp	0x1acc	; 0x1acc <__bad_interrupt>
      14:	0c 94 07 2b 	jmp	0x560e	; 0x560e <__vector_5>
      18:	0c 94 66 0d 	jmp	0x1acc	; 0x1acc <__bad_interrupt>
      1c:	0c 94 ce 2a 	jmp	0x559c	; 0x559c <__vector_7>
      20:	0c 94 66 0d 	jmp	0x1acc	; 0x1acc <__bad_interrupt>
      24:	0c 94 66 0d 	jmp	0x1acc	; 0x1acc <__bad_interrupt>
      28:	0c 94 66 0d 	jmp	0x1acc	; 0x1acc <__bad_interrupt>
      2c:	0c 94 66 0d 	jmp	0x1acc	; 0x1acc <__bad_interrupt>
      30:	0c 94 66 0d 	jmp	0x1acc	; 0x1acc <__bad_interrupt>
      34:	0c 94 66 0d 	jmp	0x1acc	; 0x1acc <__bad_interrupt>
      38:	0c 94 66 0d 	jmp	0x1acc	; 0x1acc <__bad_interrupt>
      3c:	0c 94 66 0d 	jmp	0x1acc	; 0x1acc <__bad_interrupt>
      40:	0c 94 66 0d 	jmp	0x1acc	; 0x1acc <__bad_interrupt>
      44:	0c 94 66 0d 	jmp	0x1acc	; 0x1acc <__bad_interrupt>
      48:	0c 94 46 2a 	jmp	0x548c	; 0x548c <__vector_18>
      4c:	0c 94 66 0d 	jmp	0x1acc	; 0x1acc <__bad_interrupt>
      50:	0c 94 02 2c 	jmp	0x5804	; 0x5804 <__vector_20>
      54:	0c 94 66 0d 	jmp	0x1acc	; 0x1acc <__bad_interrupt>
      58:	0c 94 66 0d 	jmp	0x1acc	; 0x1acc <__bad_interrupt>
      5c:	0c 94 66 0d 	jmp	0x1acc	; 0x1acc <__bad_interrupt>
      60:	0c 94 66 0d 	jmp	0x1acc	; 0x1acc <__bad_interrupt>
      64:	0c 94 66 0d 	jmp	0x1acc	; 0x1acc <__bad_interrupt>
      68:	0c 94 66 0d 	jmp	0x1acc	; 0x1acc <__bad_interrupt>
      6c:	0c 94 66 0d 	jmp	0x1acc	; 0x1acc <__bad_interrupt>
      70:	0c 94 66 0d 	jmp	0x1acc	; 0x1acc <__bad_interrupt>
      74:	0c 94 66 0d 	jmp	0x1acc	; 0x1acc <__bad_interrupt>
      78:	0c 94 66 0d 	jmp	0x1acc	; 0x1acc <__bad_interrupt>
      7c:	44 32       	cpi	r20, 0x24	; 36
      7e:	46 32       	cpi	r20, 0x26	; 38
      80:	49 32       	cpi	r20, 0x29	; 41
      82:	4b 32       	cpi	r20, 0x2B	; 43
      84:	4d 32       	cpi	r20, 0x2D	; 45
      86:	4f 32       	cpi	r20, 0x2F	; 47
      88:	51 32       	cpi	r21, 0x21	; 33
      8a:	53 32       	cpi	r21, 0x23	; 35
      8c:	56 32       	cpi	r21, 0x26	; 38
      8e:	58 32       	cpi	r21, 0x28	; 40
      90:	5a 32       	cpi	r21, 0x2A	; 42
      92:	5c 32       	cpi	r21, 0x2C	; 44
      94:	5e 32       	cpi	r21, 0x2E	; 46
      96:	60 32       	cpi	r22, 0x20	; 32
      98:	62 32       	cpi	r22, 0x22	; 34
      9a:	64 32       	cpi	r22, 0x24	; 36
      9c:	67 32       	cpi	r22, 0x27	; 39
      9e:	69 32       	cpi	r22, 0x29	; 41
      a0:	6b 32       	cpi	r22, 0x2B	; 43

000000a2 <Acc_Pol>:
      a2:	ff ff 01 ff 01 ff 01 ff ff 01 01 01 ff 01 01 ff     ................
      b2:	ff ff                                               ..

000000b4 <ACC_RPY_Order>:
      b4:	00 01 02 02 00 01 00 01 02 00 01 02 01 00 02 00     ................
      c4:	02 01                                               ..

000000c6 <FUTABA>:
      c6:	01 02 00 03 04 05 06 07                             ........

000000ce <JR>:
      ce:	00 01 02 03 04 05 06 07                             ........

000000d6 <Trans_Matrix>:
      d6:	05 02 06 01 05 08 03 07 05                          .........

000000df <Wingdings>:
      df:	01 02 41 05 0d 00 0f 00 22 00 33 00 44 00 4f 09     ..A.....".3.D.O.
      ef:	01 00 03 00 07 00 0f 00 1f 00 0f 00 07 00 03 00     ................
      ff:	01 00 08 1c 00 1c 00 1c 00 1c 00 7f 00 3e 00 1c     .............>..
     10f:	00 08 00 08 08 00 1c 00 3e 00 7f 00 1c 00 1c 00     ........>.......
     11f:	1c 00 1c 00 05 ff 01 fe 00 7c 00 38 00 10 00 0d     .........|.8....
     12f:	40 00 60 00 70 00 78 00 7c 00 7e 00 7f 00 7e 00     @.`.p.x.|.~...~.
     13f:	7c 00 78 00 70 00 60 00 40 00                       |.x.p.`.@.

00000149 <Verdana14>:
     149:	01 02 20 5b 13 00 bb 00 c5 00 cc 00 cc 00 cc 00     .. [............
     159:	cc 01 03 01 03 01 03 01 16 01 29 01 29 01 29 01     ..........).).).
     169:	36 01 49 01 50 01 50 01 6f 01 88 01 a4 01 c0 01     6.I.P.P.o.......
     179:	df 01 fb 02 1a 02 36 02 55 02 74 02 7b 02 7b 02     ......6.U.t.{.{.
     189:	7b 02 7b 02 7b 02 94 02 94 02 bc 02 db 02 fd 03     {.{.{...........
     199:	22 03 3e 03 5a 03 82 03 a1 03 b4 03 ca 03 ec 04     ".>.Z...........
     1a9:	08 04 2d 04 4c 04 74 04 8d 04 b5 04 d7 04 f9 05     ..-.L.t.........
     1b9:	1e 05 3d 05 65 05 99 05 bb 05 e0 06 02 06 02 06     ..=.e...........
     1c9:	1b 06 1b 06 1b 06 1b 06 1b 06 34 06 50 06 69 06     ..........4.P.i.
     1d9:	85 06 a1 06 b4 06 d0 06 e9 06 f0 07 00 07 1c 07     ................
     1e9:	23 07 4e 07 67 07 86 07 a2 07 be 07 d1 07 ea 07     #.N.g...........
     1f9:	fd 08 16 08 32 08 5d 08 79 08 95 03 00 00 00 00     ....2.].y.......
     209:	00 00 00 00 00 02 fe 67 00 fe 67 00 12 78 00 00     .......g..g..x..
     219:	fe 01 00 02 01 00 02 01 00 02 01 00 fe 41 00 78     .............A.x
     229:	70 00 00 1c 00 00 07 00 e0 00 00 38 00 00 0e 1e     p..........8....
     239:	00 82 7f 00 80 40 00 80 40 00 80 40 00 80 7f 00     .....@..@..@....
     249:	00 1e 00 06 c0 1f 00 f8 ff 00 3c e0 01 07 00 07     ..........<.....
     259:	03 00 06 01 00 04 06 01 00 04 03 00 06 07 00 07     ................
     269:	3c e0 01 f8 ff 00 c0 1f 00 04 00 00 03 00 f0 03     <...............
     279:	00 70 00 00 10 00 06 00 03 00 00 03 00 00 03 00     .p..............
     289:	00 03 00 00 03 00 00 03 00 02 00 70 00 00 70 00     ...........p..p.
     299:	0a f0 0f 00 fc 3f 00 0c 30 00 06 60 00 06 60 00     .....?..0..`..`.
     2a9:	06 60 00 06 60 00 0c 30 00 fc 3f 00 f0 0f 00 08     .`..`..0..?.....
     2b9:	18 60 00 18 60 00 18 60 00 fe 7f 00 fe 7f 00 00     .`..`..`........
     2c9:	60 00 00 60 00 00 60 00 09 0c 70 00 06 78 00 06     `..`..`...p..x..
     2d9:	6c 00 06 66 00 06 63 00 8e 61 00 fc 60 00 78 60     l..f..c..a..`.x`
     2e9:	00 00 60 00 09 0c 30 00 06 60 00 06 60 00 86 61     ..`...0..`..`..a
     2f9:	00 86 61 00 86 61 00 ce 73 00 7c 3f 00 38 1e 00     ..a..a..s.|?.8..
     309:	0a 00 07 00 80 07 00 c0 07 00 f0 06 00 38 06 00     .............8..
     319:	1c 06 00 fe 7f 00 fe 7f 00 00 06 00 00 06 00 09     ................
     329:	00 30 00 fe 60 00 fe 60 00 c6 60 00 c6 60 00 c6     .0..`..`..`..`..
     339:	60 00 c6 31 00 86 3f 00 06 0f 00 0a e0 0f 00 f0     `..1..?.........
     349:	3f 00 9c 30 00 cc 60 00 c6 60 00 c6 60 00 c6 60     ?..0..`..`..`..`
     359:	00 c6 31 00 86 3f 00 00 0f 00 09 06 00 00 06 40     ..1..?.........@
     369:	00 06 70 00 06 7c 00 06 0f 00 c6 03 00 f6 00 00     ..p..|..........
     379:	3e 00 00 0e 00 00 0a 38 1e 00 7c 3f 00 ce 71 00     >......8..|?..q.
     389:	c6 60 00 c6 60 00 86 61 00 86 61 00 4e 73 00 7c     .`..`..a..a.Ns.|
     399:	3f 00 38 1e 00 0a f0 00 00 fc 61 00 8c 63 00 06     ?.8.......a..c..
     3a9:	63 00 06 63 00 06 63 00 06 33 00 0c 39 00 fc 1f     c..c..c..3..9...
     3b9:	00 f0 07 00 02 70 70 00 70 70 00 08 0c 00 00 06     .....pp.pp......
     3c9:	00 00 06 67 00 06 67 00 86 01 00 ce 00 00 fc 00     ...g..g.........
     3d9:	00 38 00 00 0d 00 40 00 00 78 00 00 3f 00 c0 07     .8....@..x..?...
     3e9:	00 f8 06 00 3e 06 00 06 06 00 3e 06 00 f8 06 00     ....>.....>.....
     3f9:	c0 07 00 00 3f 00 00 78 00 00 40 00 0a fe 7f 00     ....?..x..@.....
     409:	fe 7f 00 86 61 00 86 61 00 86 61 00 86 61 00 c6     ....a..a..a..a..
     419:	61 00 7c 73 00 3c 3f 00 00 1e 00 0b e0 07 00 f8     a.|s.<?.........
     429:	1f 00 1c 38 00 0c 30 00 06 60 00 06 60 00 06 60     ...8..0..`..`..`
     439:	00 06 60 00 06 60 00 06 20 00 0c 30 00 0c fe 7f     ..`..`.. ..0....
     449:	00 fe 7f 00 06 60 00 06 60 00 06 60 00 06 60 00     .....`..`..`..`.
     459:	06 60 00 0e 70 00 0c 30 00 38 1c 00 f8 0f 00 e0     .`..p..0.8......
     469:	07 00 09 fe 7f 00 fe 7f 00 c6 60 00 c6 60 00 c6     ..........`..`..
     479:	60 00 c6 60 00 c6 60 00 c6 60 00 c6 60 00 09 fe     `..`..`..`..`...
     489:	7f 00 fe 7f 00 86 01 00 86 01 00 86 01 00 86 01     ................
     499:	00 86 01 00 86 01 00 06 00 00 0d e0 07 00 f8 1f     ................
     4a9:	00 3c 3c 00 0c 30 00 0e 70 00 06 60 00 06 60 00     .<<..0..p..`..`.
     4b9:	06 63 00 06 63 00 06 63 00 06 63 00 0c 3f 00 0c     .c..c..c..c..?..
     4c9:	3f 00 0a fe 7f 00 fe 7f 00 c0 00 00 c0 00 00 c0     ?...............
     4d9:	00 00 c0 00 00 c0 00 00 c0 00 00 fe 7f 00 fe 7f     ................
     4e9:	00 06 06 60 00 06 60 00 fe 7f 00 fe 7f 00 06 60     ...`..`........`
     4f9:	00 06 60 00 07 00 60 00 00 60 00 06 60 00 06 60     ..`...`..`..`..`
     509:	00 06 70 00 fe 3f 00 fe 1f 00 0b fe 7f 00 fe 7f     ..p..?..........
     519:	00 80 03 00 c0 01 00 e0 03 00 70 07 00 38 1c 00     ..........p..8..
     529:	1c 38 00 0e 70 00 06 60 00 02 40 00 09 fe 7f 00     .8..p..`..@.....
     539:	fe 7f 00 00 60 00 00 60 00 00 60 00 00 60 00 00     ....`..`..`..`..
     549:	60 00 00 60 00 00 60 00 0c fe 7f 00 fe 7f 00 0e     `..`..`.........
     559:	00 00 38 00 00 e0 01 00 80 07 00 00 07 00 e0 01     ..8.............
     569:	00 38 00 00 0e 00 00 fe 7f 00 fe 7f 00 0a fe 7f     .8..............
     579:	00 fe 7f 00 0e 00 00 3c 00 00 e0 00 00 80 03 00     .......<........
     589:	00 1e 00 00 78 00 fe 7f 00 fe 7f 00 0d e0 07 00     ....x...........
     599:	f8 1f 00 1c 38 00 0c 30 00 06 60 00 06 60 00 06     ....8..0..`..`..
     5a9:	60 00 06 60 00 06 60 00 0c 30 00 1c 38 00 f8 1f     `..`..`..0..8...
     5b9:	00 e0 07 00 08 fe 7f 00 fe 7f 00 06 03 00 06 03     ................
     5c9:	00 06 03 00 8e 03 00 fc 01 00 f8 00 00 0d e0 07     ................
     5d9:	00 f8 1f 00 1c 38 00 0c 30 00 06 60 00 06 60 00     .....8..0..`..`.
     5e9:	06 60 00 06 e0 01 06 e0 03 0c 30 07 1c 38 06 f8     .`........0..8..
     5f9:	1f 06 e0 07 06 0b fe 7f 00 fe 7f 00 86 01 00 86     ................
     609:	01 00 86 01 00 86 07 00 ce 0e 00 fc 1c 00 78 70     ..............xp
     619:	00 00 60 00 00 40 00 0b 78 30 00 fc 70 00 ce 60     ..`..@..x0..p..`
     629:	00 86 61 00 86 61 00 86 61 00 86 61 00 86 61 00     ..a..a..a..a..a.
     639:	06 33 00 0c 3f 00 00 1e 00 0c 06 00 00 06 00 00     .3..?...........
     649:	06 00 00 06 00 00 06 00 00 fe 7f 00 fe 7f 00 06     ................
     659:	00 00 06 00 00 06 00 00 06 00 00 06 00 00 0a fe     ................
     669:	0f 00 fe 3f 00 00 70 00 00 60 00 00 60 00 00 60     ...?..p..`..`..`
     679:	00 00 60 00 00 70 00 fe 3f 00 fe 0f 00 0d 02 00     ..`..p..?.......
     689:	00 1e 00 00 fc 00 00 e0 03 00 80 1f 00 00 7c 00     ..............|.
     699:	00 60 00 00 7c 00 80 1f 00 e0 03 00 fc 00 00 1e     .`..|...........
     6a9:	00 00 02 00 00 11 06 00 00 7e 00 00 f8 07 00 80     .........~......
     6b9:	3f 00 00 78 00 00 7c 00 c0 0f 00 7e 00 00 06 00     ?..x..|....~....
     6c9:	00 7e 00 00 e0 07 00 00 7e 00 00 70 00 80 7f 00     .~......~..p....
     6d9:	f8 07 00 7e 00 00 06 00 00 0b 02 40 00 06 60 00     ...~.......@..`.
     6e9:	1e 78 00 38 1c 00 e0 07 00 80 01 00 e0 07 00 38     .x.8...........8
     6f9:	1e 00 1e 78 00 06 60 00 02 40 00 0c 02 00 00 06     ...x..`..@......
     709:	00 00 1e 00 00 78 00 00 e0 00 00 c0 7f 00 c0 7f     .....x..........
     719:	00 e0 00 00 78 00 00 1e 00 00 06 00 00 02 00 00     ....x...........
     729:	0b 06 70 00 06 78 00 06 7c 00 06 6e 00 06 67 00     ..p..x..|..n..g.
     739:	c6 63 00 e6 60 00 76 60 00 3e 60 00 1e 60 00 0e     .c..`.v`.>`..`..
     749:	60 00 08 03 00 00 1f 00 00 fe 00 00 f0 07 00 80     `...............
     759:	3f 00 00 fc 01 00 e0 03 00 00 03 08 00 3c 00 30     ?............<.0
     769:	7e 00 30 67 00 30 63 00 30 63 00 30 33 00 e0 7f     ~.0g.0c.0c.03...
     779:	00 e0 7f 00 09 ff 7f 00 ff 7f 00 60 20 00 30 60     ...........` .0`
     789:	00 30 60 00 30 60 00 70 70 00 e0 3f 00 c0 0f 00     .0`.0`.pp..?....
     799:	08 80 0f 00 e0 3f 00 60 30 00 30 60 00 30 60 00     .....?.`0.0`.0`.
     7a9:	30 60 00 30 60 00 60 30 00 09 80 1f 00 e0 3f 00     0`.0`.`0......?.
     7b9:	70 70 00 30 60 00 30 60 00 30 60 00 30 30 00 ff     pp.0`.0`.0`.00..
     7c9:	7f 00 ff 7f 00 09 80 0f 00 e0 3f 00 60 33 00 30     ..........?.`3.0
     7d9:	63 00 30 63 00 30 63 00 70 63 00 e0 63 00 c0 33     c.0c.0c.pc..c..3
     7e9:	00 06 30 00 00 fe 7f 00 ff 7f 00 33 00 00 33 00     ..0........3..3.
     7f9:	00 03 00 00 09 80 1f 00 e0 3f 06 70 70 06 30 60     .........?.pp.0`
     809:	06 30 60 06 30 60 06 30 30 07 f0 ff 03 f0 ff 01     .0`.0`.00.......
     819:	08 ff 7f 00 ff 7f 00 60 00 00 30 00 00 30 00 00     .......`..0..0..
     829:	30 00 00 f0 7f 00 e0 7f 00 02 f6 7f 00 f6 7f 00     0...............
     839:	05 00 00 06 30 00 06 30 00 06 f6 ff 07 f6 ff 03     ....0..0........
     849:	09 ff 7f 00 ff 7f 00 00 06 00 00 07 00 80 0f 00     ................
     859:	c0 38 00 70 70 00 30 60 00 10 40 00 02 ff 7f 00     .8.pp.0`..@.....
     869:	ff 7f 00 0e f0 7f 00 f0 7f 00 60 00 00 30 00 00     ..........`..0..
     879:	30 00 00 30 00 00 f0 7f 00 e0 7f 00 60 00 00 30     0..0........`..0
     889:	00 00 30 00 00 30 00 00 f0 7f 00 e0 7f 00 08 f0     ..0..0..........
     899:	7f 00 f0 7f 00 60 00 00 30 00 00 30 00 00 30 00     .....`..0..0..0.
     8a9:	00 f0 7f 00 e0 7f 00 0a 80 0f 00 e0 3f 00 60 30     ............?.`0
     8b9:	00 30 60 00 30 60 00 30 60 00 30 60 00 60 30 00     .0`.0`.0`.0`.`0.
     8c9:	e0 3f 00 80 0f 00 09 f0 ff 07 f0 ff 07 60 60 00     .?...........``.
     8d9:	30 60 00 30 60 00 30 60 00 70 70 00 e0 3f 00 c0     0`.0`.0`.pp..?..
     8e9:	0f 00 09 80 1f 00 e0 3f 00 70 70 00 30 60 00 30     .......?.pp.0`.0
     8f9:	60 00 30 60 00 30 30 00 f0 ff 07 f0 ff 07 06 f0     `.0`.00.........
     909:	7f 00 f0 7f 00 60 00 00 30 00 00 30 00 00 30 00     .....`..0..0..0.
     919:	00 08 c0 31 00 e0 63 00 30 63 00 30 63 00 30 66     ...1..c.0c.0c.0f
     929:	00 30 66 00 30 3e 00 60 1c 00 06 30 00 00 fe 3f     .0f.0>.`...0...?
     939:	00 fe 7f 00 30 60 00 30 60 00 30 60 00 08 f0 1f     ....0`.0`.0`....
     949:	00 f0 7f 00 00 60 00 00 60 00 00 60 00 00 30 00     .....`..`..`..0.
     959:	f0 7f 00 f0 7f 00 09 10 00 00 f0 00 00 e0 07 00     ................
     969:	00 3e 00 00 60 00 00 3e 00 e0 07 00 f0 00 00 10     .>..`..>........
     979:	00 00 0e 30 00 00 f0 03 00 c0 3f 00 00 78 00 00     ...0......?..x..
     989:	7c 00 80 07 00 f0 00 00 f0 00 00 c0 07 00 00 3c     |..............<
     999:	00 00 70 00 c0 3f 00 f0 03 00 30 00 00 09 10 40     ..p..?....0....@
     9a9:	00 30 60 00 f0 78 00 c0 1d 00 00 07 00 c0 1d 00     .0`..x..........
     9b9:	f0 78 00 30 60 00 10 40 00 09 10 00 00 f0 00 00     .x.0`..@........
     9c9:	e0 07 06 00 bf 07 00 f0 01 00 3f 00 e0 07 00 f0     ..........?.....
     9d9:	00 00 10 00 00 08 30 70 00 30 78 00 30 7c 00 30     ......0p.0x.0|.0
     9e9:	66 00 30 63 00 f0 61 00 f0 60 00 70 60 00           f.0c..a..`.p`.

000009f7 <Verdana8>:
     9f7:	01 02 20 5b 0b 00 bb 00 be 00 c1 00 c1 00 c1 00     .. [............
     a07:	c1 00 d6 00 d6 00 d6 00 dd 00 e4 00 e4 00 e4 00     ................
     a17:	e9 00 f0 00 f3 00 f3 00 fe 01 09 01 14 01 1f 01     ................
     a27:	2c 01 37 01 42 01 4d 01 58 01 63 01 66 01 66 01     ,.7.B.M.X.c.f.f.
     a37:	66 01 66 01 66 01 6f 01 6f 01 7c 01 89 01 98 01     f.f.f.o.o.|.....
     a47:	a7 01 b2 01 bd 01 cc 01 d9 01 e0 01 e9 01 f6 02     ................
     a57:	01 02 10 02 1d 02 2c 02 37 02 46 02 53 02 60 02     ......,.7.F.S.`.
     a67:	6f 02 7c 02 89 02 9c 02 a9 02 b8 02 c5 02 c5 02     o.|.............
     a77:	c5 02 c5 02 c5 02 c5 02 c5 02 d0 02 db 02 e6 02     ................
     a87:	f1 02 fc 03 05 03 10 03 1b 03 1e 03 25 03 30 03     ............%.0.
     a97:	33 03 46 03 51 03 5c 03 67 03 72 03 7b 03 84 03     3.F.Q.\.g.r.{...
     aa7:	8d 03 98 03 a3 03 b2 03 bd 03 c8 01 00 00 01 7e     ...............~
     ab7:	01 0a 0c 00 12 00 12 00 8c 01 60 00 18 00 c6 00     ..........`.....
     ac7:	20 01 20 01 c0 00 03 f8 00 06 03 01 04 03 01 04      . .............
     ad7:	06 03 f8 00 02 00 04 80 03 03 20 00 20 00 20 00     .......... . . .
     ae7:	01 80 01 05 fc 00 02 01 02 01 02 01 fc 00 05 04     ................
     af7:	01 04 01 fe 01 00 01 00 01 05 84 01 42 01 22 01     ............B.".
     b07:	12 01 0c 01 05 84 00 02 01 12 01 12 01 ec 00 06     ................
     b17:	60 00 50 00 48 00 44 00 fe 01 40 00 05 9e 00 12     `.P.H.D...@.....
     b27:	01 12 01 12 01 e2 00 05 f8 00 14 01 12 01 12 01     ................
     b37:	e0 00 05 02 00 82 01 62 00 1a 00 06 00 05 ec 00     .......b........
     b47:	12 01 12 01 12 01 ec 00 05 1c 00 22 01 22 01 a2     ..........."."..
     b57:	00 7c 00 01 98 01 04 02 00 62 01 12 00 0c 00 06     .|.......b......
     b67:	c0 01 78 00 46 00 46 00 78 00 c0 01 06 fe 01 12     ..x.F.F.x.......
     b77:	01 12 01 12 01 1c 01 e0 00 07 78 00 84 00 02 01     ..........x.....
     b87:	02 01 02 01 02 01 84 00 07 fe 01 02 01 02 01 02     ................
     b97:	01 02 01 84 00 78 00 05 fe 01 12 01 12 01 12 01     .....x..........
     ba7:	12 01 05 fe 01 12 00 12 00 12 00 02 00 07 78 00     ..............x.
     bb7:	84 00 02 01 02 01 22 01 22 01 e4 00 06 fe 01 10     ......".".......
     bc7:	00 10 00 10 00 10 00 fe 01 03 02 01 fe 01 02 01     ................
     bd7:	04 00 01 02 01 02 01 fe 00 06 fe 01 20 00 30 00     ............ .0.
     be7:	48 00 84 00 02 01 05 fe 01 00 01 00 01 00 01 00     H...............
     bf7:	01 07 fe 01 06 00 18 00 60 00 18 00 06 00 fe 01     ........`.......
     c07:	06 fe 01 06 00 18 00 60 00 80 01 fe 01 07 78 00     .......`......x.
     c17:	84 00 02 01 02 01 02 01 84 00 78 00 05 fe 01 22     ..........x...."
     c27:	00 22 00 22 00 1c 00 07 78 00 84 00 02 01 02 01     ."."....x.......
     c37:	02 03 84 04 78 04 06 fe 01 22 00 22 00 62 00 9c     ....x....".".b..
     c47:	00 00 01 06 8c 00 12 01 12 01 22 01 22 01 c4 00     .........."."...
     c57:	07 02 00 02 00 02 00 fe 01 02 00 02 00 02 00 06     ................
     c67:	fe 00 00 01 00 01 00 01 00 01 fe 00 06 0e 00 70     ...............p
     c77:	00 80 01 80 01 70 00 0e 00 09 06 00 78 00 80 01     .....p......x...
     c87:	78 00 06 00 78 00 80 01 78 00 06 00 06 86 01 48     x...x...x......H
     c97:	00 30 00 30 00 48 00 86 01 07 02 00 04 00 08 00     .0.0.H..........
     ca7:	f0 01 08 00 04 00 02 00 06 82 01 42 01 22 01 12     ...........B."..
     cb7:	01 0a 01 06 01 05 c0 00 28 01 28 01 28 01 f0 01     ........(.(.(...
     cc7:	05 ff 01 08 01 08 01 08 01 f0 00 05 f0 00 08 01     ................
     cd7:	08 01 08 01 90 00 05 f0 00 08 01 08 01 08 01 ff     ................
     ce7:	01 05 f0 00 28 01 28 01 28 01 b0 00 04 08 00 fe     ....(.(.(.......
     cf7:	01 09 00 09 00 05 f0 00 08 05 08 05 08 05 f8 03     ................
     d07:	05 ff 01 08 00 08 00 08 00 f0 01 01 f9 01 03 00     ................
     d17:	04 08 04 f9 03 05 ff 01 40 00 60 00 90 00 08 01     ........@.`.....
     d27:	01 ff 01 09 f8 01 08 00 08 00 08 00 f0 01 08 00     ................
     d37:	08 00 08 00 f0 01 05 f8 01 08 00 08 00 08 00 f0     ................
     d47:	01 05 f0 00 08 01 08 01 08 01 f0 00 05 f8 07 08     ................
     d57:	01 08 01 08 01 f0 00 05 f0 00 08 01 08 01 08 01     ................
     d67:	f8 07 04 f8 01 10 00 08 00 08 00 04 30 01 28 01     ............0.(.
     d77:	48 01 c8 00 04 08 00 fe 00 08 01 08 01 05 f8 00     H...............
     d87:	00 01 00 01 00 01 f8 01 05 18 00 60 00 80 01 60     ...........`...`
     d97:	00 18 00 07 78 00 80 01 60 00 18 00 60 00 80 01     ....x...`...`...
     da7:	78 00 05 08 01 90 00 60 00 90 00 08 01 05 08 00     x......`........
     db7:	70 04 80 03 70 00 08 00 04 88 01 48 01 28 01 18     p...p......H.(..
     dc7:	01                                                  .

00000dc8 <lcd_commmands>:
     dc8:	af 40 a0 a6 a4 a2 ee c8 2f 24 ac 00 f8 00           .@....../$....

00000dd6 <pagemap>:
     dd6:	07 06 05 04 03 02 01 00                             ........

00000dde <text_menu>:
     dde:	1b 15 0e 10 09 10 04 10 ff 0f fa 0f 13 10 13 10     ................
     dee:	13 10 74 17 6c 17 72 17 70 17 6e 17 67 17 62 17     ..t.l.r.p.n.g.b.
     dfe:	5d 17 58 17 6f 11 8f 11 8a 11 84 11 b6 14 7e 17     ].X.o.........~.
     e0e:	76 17 ea 15 07 16 02 16 fc 15 f8 15 f4 15 13 10     v...............
     e1e:	d5 11 cc 11 dd 11 c5 11 c0 11 23 10 1e 10 19 10     ..........#.....
     e2e:	14 10 33 10 2d 10 27 10 5c 10 54 10 09 12 01 12     ..3.-.'.\.T.....
     e3e:	1a 14 15 14 12 14 08 14 fe 13 13 10 13 10 4f 10     ..............O.
     e4e:	f4 11 ef 11 e6 11 45 11 ef 15 39 11 a5 14 a1 14     ......E...9.....
     e5e:	9b 14 92 14 13 10 13 10 1b 15 18 15 74 10 7b 10     ............t.{.
     e6e:	6a 10 13 10 13 10 9c 11 95 11 4d 17 3b 17 28 17     j.........M.;.(.
     e7e:	16 17 00 17 f1 16 dd 16 c9 16 bb 16 ac 16 9d 16     ................
     e8e:	8e 16 7f 16 70 16 61 16 52 16 3e 16 25 16 0c 16     ....p.a.R.>.%...
     e9e:	13 10 13 10 23 10 1e 10 19 10 45 10 14 10 4a 10     ....#.....E...J.
     eae:	ac 11 dd 11 d5 11 cc 11 c5 11 c0 11 bb 11 b6 11     ................
     ebe:	b1 11 ac 11 a5 11 9f 11 89 14 82 14 78 11 62 10     ............x.b.
     ece:	4f 10 01 11 f5 10 13 10 b2 10 a9 10 a0 10 9c 10     O...............
     ede:	93 10 8b 10 13 10 13 10 13 10 83 17 7c 11 1a 11     ............|...
     eee:	0c 11 07 11 ed 10 e2 10 13 10 84 10 7b 10 13 10     ............{...
     efe:	13 10 13 10 02 16 fc 15 f8 15 0f 15 05 15 fa 14     ................
     f0e:	eb 14 dd 14 ce 14 c1 14 b6 14 aa 14 75 14 6b 14     ............u.k.
     f1e:	63 14 56 14 1d 14 4c 14 42 14 38 14 2c 14 38 10     c.V...L.B.8.,.8.
     f2e:	13 10 13 10 d6 15 ce 15 c0 15 b3 15 a5 15 9a 15     ................
     f3e:	91 15 88 15 79 15 6b 15 5c 15 50 15 49 15 42 15     ....y.k.\.P.I.B.
     f4e:	35 15 29 15 1f 15 de 15 13 10 13 10 f6 13 eb 13     5.).............
     f5e:	da 13 cd 13 c2 13 b2 13 a2 13 93 13 83 13 73 13     ..............s.
     f6e:	63 13 53 13 43 13 33 13 25 13 17 13 08 13 f9 12     c.S.C.3.%.......
     f7e:	ec 12 df 12 d3 12 c7 12 bb 12 ae 12 a4 12 9a 12     ................
     f8e:	8d 12 82 12 75 12 6a 12 5d 12 82 12 50 12 6a 12     ....u.j.]...P.j.
     f9e:	13 10 13 10 09 12 01 12 fb 11 13 10 dd 10 d8 10     ................
     fae:	d3 10 ce 10 c9 10 c4 10 bf 10 ba 10 dd 11 d5 11     ................
     fbe:	cc 11 c5 11 c0 11 bb 11 b6 11 b1 11 47 12 3d 12     ............G.=.
     fce:	35 12 2d 12 24 12 1b 12 11 12 ac 11 09 12 01 12     5.-.$...........
     fde:	fb 11 13 10 13 10 30 11 27 11 65 11 5f 11 53 11     ......0.'.e._.S.
     fee:	9f 17 99 17 0f 15 90 17 8e 17 8c 17                 ............

00000ffa <VBAT39>:
     ffa:	33 2e 39 56 00                                      3.9V.

00000fff <VBAT38>:
     fff:	33 2e 38 56 00                                      3.8V.

00001004 <VBAT37>:
    1004:	33 2e 37 56 00                                      3.7V.

00001009 <VBAT36>:
    1009:	33 2e 36 56 00                                      3.6V.

0000100e <VBAT35>:
    100e:	33 2e 35 56 00                                      3.5V.

00001013 <Dummy0>:
	...

00001014 <MPU6050LPF4>:
    1014:	34 34 48 7a 00                                      44Hz.

00001019 <MPU6050LPF3>:
    1019:	32 31 48 7a 00                                      21Hz.

0000101e <MPU6050LPF2>:
    101e:	31 30 48 7a 00                                      10Hz.

00001023 <MPU6050LPF1>:
    1023:	35 48 7a 00                                         5Hz.

00001027 <MPU6050LPF7>:
    1027:	32 36 30 48 7a 00                                   260Hz.

0000102d <MPU6050LPF6>:
    102d:	31 38 34 48 7a 00                                   184Hz.

00001033 <MPU6050LPF5>:
    1033:	39 34 48 7a 00                                      94Hz.

00001038 <GeneralText10>:
    1038:	4d 50 55 36 30 35 30 20 4c 50 46 3a 00              MPU6050 LPF:.

00001045 <SWLPF2>:
    1045:	33 32 48 7a 00                                      32Hz.

0000104a <SWLPF1>:
    104a:	37 34 48 7a 00                                      74Hz.

0000104f <Random1>:
    104f:	48 69 67 68 00                                      High.

00001054 <Safety2>:
    1054:	41 72 6d 61 62 6c 65 00                             Armable.

0000105c <Safety1>:
    105c:	41 72 6d 65 64 00                                   Armed.

00001062 <GeneralText5>:
    1062:	53 79 6e 63 20 52 43 00                             Sync RC.

0000106a <MixerItem16>:
    106a:	52 65 76 53 63 61 6c 65 64 00                       RevScaled.

00001074 <MixerItem15>:
    1074:	53 63 61 6c 65 64 00                                Scaled.

0000107b <MixerItem12>:
    107b:	52 65 76 65 72 73 65 64 00                          Reversed.

00001084 <MixerItem11>:
    1084:	4e 6f 72 6d 61 6c 00                                Normal.

0000108b <MixerMenuItem7>:
    108b:	50 69 74 63 68 55 70 00                             PitchUp.

00001093 <MixerMenuItem6>:
    1093:	53 69 64 65 77 61 79 73 00                          Sideways.

0000109c <MixerMenuItem5>:
    109c:	41 66 74 00                                         Aft.

000010a0 <MixerMenuItem4>:
    10a0:	49 6e 76 65 72 74 65 64 00                          Inverted.

000010a9 <MixerMenuItem3>:
    10a9:	56 65 72 74 69 63 61 6c 00                          Vertical.

000010b2 <MixerMenuItem2>:
    10b2:	46 6f 72 77 61 72 64 00                             Forward.

000010ba <MOUT8>:
    10ba:	4f 55 54 38 00                                      OUT8.

000010bf <MOUT7>:
    10bf:	4f 55 54 37 00                                      OUT7.

000010c4 <MOUT6>:
    10c4:	4f 55 54 36 00                                      OUT6.

000010c9 <MOUT5>:
    10c9:	4f 55 54 35 00                                      OUT5.

000010ce <MOUT4>:
    10ce:	4f 55 54 34 00                                      OUT4.

000010d3 <MOUT3>:
    10d3:	4f 55 54 33 00                                      OUT3.

000010d8 <MOUT2>:
    10d8:	4f 55 54 32 00                                      OUT2.

000010dd <MOUT1>:
    10dd:	4f 55 54 31 00                                      OUT1.

000010e2 <Status5>:
    10e2:	28 44 69 73 61 72 6d 65 64 29 00                    (Disarmed).

000010ed <Status4>:
    10ed:	28 41 72 6d 65 64 29 00                             (Armed).

000010f5 <Status2>:
    10f5:	66 6f 72 20 73 74 61 74 75 73 2e 00                 for status..

00001101 <Status0>:
    1101:	50 72 65 73 73 00                                   Press.

00001107 <WizardText2>:
    1107:	44 6f 6e 65 00                                      Done.

0000110c <WizardText1>:
    110c:	48 6f 6c 64 20 61 73 20 73 68 6f 77 6e 00           Hold as shown.

0000111a <WizardText0>:
    111a:	4e 6f 20 52 58 20 73 69 67 6e 61 6c 00              No RX signal.

00001127 <PText6>:
    1127:	73 65 74 74 69 6e 67 73 00                          settings.

00001130 <PText5>:
    1130:	55 70 64 61 74 69 6e 67 00                          Updating.

00001139 <PText4>:
    1139:	43 61 6c 2e 20 66 61 69 6c 65 64 00                 Cal. failed.

00001145 <PText3>:
    1145:	45 53 43 20 43 61 6c 69 62 72 61 74 65 00           ESC Calibrate.

00001153 <PText2>:
    1153:	48 6f 6c 64 20 73 74 65 61 64 79 00                 Hold steady.

0000115f <PText1>:
    115f:	52 65 73 65 74 00                                   Reset.

00001165 <PText0>:
    1165:	4f 70 65 6e 41 65 72 6f 32 00                       OpenAero2.

0000116f <Disarmed>:
    116f:	44 69 73 61 72 6d 65 64 00                          Disarmed.

00001178 <ErrorText10>:
    1178:	4c 6f 77 00                                         Low.

0000117c <Status3>:
    117c:	42 61 74 74 65 72 79 00                             Battery.

00001184 <ErrorText7>:
    1184:	4d 6f 64 65 6c 00                                   Model.

0000118a <ErrorText6>:
    118a:	4c 6f 73 74 00                                      Lost.

0000118f <ErrorText5>:
    118f:	45 72 72 6f 72 00                                   Error.

00001195 <ErrorText4>:
    1195:	53 69 67 6e 61 6c 00                                Signal.

0000119c <ErrorText3>:
    119c:	4e 6f 00                                            No.

0000119f <ChannelRef12>:
    119f:	45 6c 65 76 2e 00                                   Elev..

000011a5 <ChannelRef10>:
    11a5:	54 68 72 6f 74 2e 00                                Throt..

000011ac <ChannelRef8>:
    11ac:	4e 6f 6e 65 00                                      None.

000011b1 <ChannelRef7>:
    11b1:	41 55 58 33 00                                      AUX3.

000011b6 <ChannelRef6>:
    11b6:	41 55 58 32 00                                      AUX2.

000011bb <ChannelRef5>:
    11bb:	41 55 58 31 00                                      AUX1.

000011c0 <ChannelRef4>:
    11c0:	47 65 61 72 00                                      Gear.

000011c5 <ChannelRef3>:
    11c5:	52 75 64 64 65 72 00                                Rudder.

000011cc <ChannelRef2>:
    11cc:	45 6c 65 76 61 74 6f 72 00                          Elevator.

000011d5 <ChannelRef1>:
    11d5:	41 69 6c 65 72 6f 6e 00                             Aileron.

000011dd <ChannelRef0>:
    11dd:	54 68 72 6f 74 74 6c 65 00                          Throttle.

000011e6 <MixerItem62>:
    11e6:	53 71 72 74 53 69 6e 65 00                          SqrtSine.

000011ef <MixerItem61>:
    11ef:	53 69 6e 65 00                                      Sine.

000011f4 <MixerItem60>:
    11f4:	4c 69 6e 65 61 72 00                                Linear.

000011fb <MixerItem49>:
    11fb:	4d 6f 74 6f 72 00                                   Motor.

00001201 <MixerItem41>:
    1201:	44 2e 53 65 72 76 6f 00                             D.Servo.

00001209 <MixerItem40>:
    1209:	41 2e 53 65 72 76 6f 00                             A.Servo.

00001211 <MixerItem81>:
    1211:	41 4c 20 50 69 74 63 68 3a 00                       AL Pitch:.

0000121b <MixerItem80>:
    121b:	41 4c 20 52 6f 6c 6c 3a 00                          AL Roll:.

00001224 <MixerItem74>:
    1224:	41 63 63 50 69 74 63 68 00                          AccPitch.

0000122d <MixerItem73>:
    122d:	41 63 63 52 6f 6c 6c 00                             AccRoll.

00001235 <MixerItem72>:
    1235:	47 79 72 6f 59 61 77 00                             GyroYaw.

0000123d <MixerItem71>:
    123d:	47 79 72 6f 50 69 74 63 68 00                       GyroPitch.

00001247 <MixerItem70>:
    1247:	47 79 72 6f 52 6f 6c 6c 00                          GyroRoll.

00001250 <MixerItem31>:
    1250:	50 32 20 53 6f 75 72 63 65 20 42 3a 00              P2 Source B:.

0000125d <MixerItem21>:
    125d:	50 31 20 53 6f 75 72 63 65 20 42 3a 00              P1 Source B:.

0000126a <MixerItem30>:
    126a:	50 32 20 56 6f 6c 75 6d 65 3a 00                    P2 Volume:.

00001275 <MixerItem29>:
    1275:	50 32 20 53 6f 75 72 63 65 20 41 3a 00              P2 Source A:.

00001282 <MixerItem2>:
    1282:	50 31 20 56 6f 6c 75 6d 65 3a 00                    P1 Volume:.

0000128d <MixerItem0>:
    128d:	50 31 20 53 6f 75 72 63 65 20 41 3a 00              P1 Source A:.

0000129a <MixerItem43>:
    129a:	50 32 20 5a 20 61 63 63 3a 00                       P2 Z acc:.

000012a4 <MixerItem42>:
    12a4:	50 31 20 5a 20 61 63 63 3a 00                       P1 Z acc:.

000012ae <MixerItem28>:
    12ae:	50 32 20 50 69 74 63 68 20 41 4c 3a 00              P2 Pitch AL:.

000012bb <MixerItem3>:
    12bb:	50 31 20 50 69 74 63 68 20 41 4c 00                 P1 Pitch AL.

000012c7 <MixerItem27>:
    12c7:	50 32 20 52 6f 6c 6c 20 41 4c 3a 00                 P2 Roll AL:.

000012d3 <MixerItem7>:
    12d3:	50 31 20 52 6f 6c 6c 20 41 4c 3a 00                 P1 Roll AL:.

000012df <MixerItem26>:
    12df:	50 32 20 59 61 77 20 67 79 72 6f 3a 00              P2 Yaw gyro:.

000012ec <MixerItem6>:
    12ec:	50 31 20 59 61 77 20 67 79 72 6f 3a 00              P1 Yaw gyro:.

000012f9 <MixerItem25>:
    12f9:	50 32 20 50 69 74 63 68 20 67 79 72 6f 3a 00        P2 Pitch gyro:.

00001308 <MixerItem5>:
    1308:	50 31 20 50 69 74 63 68 20 67 79 72 6f 3a 00        P1 Pitch gyro:.

00001317 <MixerItem24>:
    1317:	50 32 20 52 6f 6c 6c 20 67 79 72 6f 3a 00           P2 Roll gyro:.

00001325 <MixerItem4>:
    1325:	50 31 20 52 6f 6c 6c 20 67 79 72 6f 3a 00           P1 Roll gyro:.

00001333 <MixerItem56>:
    1333:	50 32 20 52 75 64 2e 20 76 6f 6c 75 6d 65 3a 00     P2 Rud. volume:.

00001343 <MixerItem53>:
    1343:	50 31 20 52 75 64 2e 20 76 6f 6c 75 6d 65 3a 00     P1 Rud. volume:.

00001353 <MixerItem55>:
    1353:	50 32 20 45 6c 65 2e 20 76 6f 6c 75 6d 65 3a 00     P2 Ele. volume:.

00001363 <MixerItem52>:
    1363:	50 31 20 45 6c 65 2e 20 76 6f 6c 75 6d 65 3a 00     P1 Ele. volume:.

00001373 <MixerItem54>:
    1373:	50 32 20 41 69 6c 2e 20 76 6f 6c 75 6d 65 3a 00     P2 Ail. volume:.

00001383 <MixerItem51>:
    1383:	50 31 20 41 69 6c 2e 20 76 6f 6c 75 6d 65 3a 00     P1 Ail. volume:.

00001393 <Mixeritem50>:
    1393:	54 68 72 6f 74 74 6c 65 20 63 75 72 76 65 00        Throttle curve.

000013a2 <MixerItem33>:
    13a2:	50 32 20 54 68 72 2e 20 76 6f 6c 75 6d 65 3a 00     P2 Thr. volume:.

000013b2 <MixerItem23>:
    13b2:	50 31 20 54 68 72 2e 20 76 6f 6c 75 6d 65 3a 00     P1 Thr. volume:.

000013c2 <MixerItem34>:
    13c2:	50 32 20 4f 66 66 73 65 74 3a 00                    P2 Offset:.

000013cd <MixerItem35>:
    13cd:	50 31 2e 6e 20 4f 66 66 73 65 74 3a 00              P1.n Offset:.

000013da <MixerItem36>:
    13da:	50 31 2e 6e 20 25 20 6f 66 20 74 72 61 6e 73 3a     P1.n % of trans:
	...

000013eb <MixerItem20>:
    13eb:	50 31 20 4f 66 66 73 65 74 3a 00                    P1 Offset:.

000013f6 <MixerItem1>:
    13f6:	44 65 76 69 63 65 3a 00                             Device:.

000013fe <P5text>:
    13fe:	50 31 2e 6e 20 2d 20 50 32 00                       P1.n - P2.

00001408 <P4text>:
    1408:	50 31 20 2d 20 50 31 2e 6e 00                       P1 - P1.n.

00001412 <P3text>:
    1412:	50 32 00                                            P2.

00001415 <P2text>:
    1415:	50 31 2e 6e 00                                      P1.n.

0000141a <P1text>:
    141a:	50 31 00                                            P1.

0000141d <BattMenuItem2>:
    141d:	4d 69 6e 2e 20 63 65 6c 6c 20 28 56 29 3a 00        Min. cell (V):.

0000142c <GeneralText7>:
    142c:	41 4c 20 63 6f 72 72 65 63 74 3a 00                 AL correct:.

00001438 <GeneralText16>:
    1438:	47 79 72 6f 20 4c 50 46 3a 00                       Gyro LPF:.

00001442 <GeneralText6>:
    1442:	41 63 63 2e 20 4c 50 46 3a 00                       Acc. LPF:.

0000144c <GeneralText3>:
    144c:	50 57 4d 20 72 61 74 65 3a 00                       PWM rate:.

00001456 <GeneralText2>:
    1456:	44 69 73 61 72 6d 20 74 69 6d 65 3a 00              Disarm time:.

00001463 <AutoMenuItem2>:
    1463:	53 61 66 65 74 79 3a 00                             Safety:.

0000146b <Contrast>:
    146b:	43 6f 6e 74 72 61 73 74 3a 00                       Contrast:.

00001475 <MixerMenuItem0>:
    1475:	4f 72 69 65 6e 74 61 74 69 6f 6e 3a 00              Orientation:.

00001482 <RCMenuItem7>:
    1482:	46 75 74 61 62 61 00                                Futaba.

00001489 <RCMenuItem6>:
    1489:	4a 52 2c 53 70 6b 74 6d 00                          JR,Spktm.

00001492 <RXMode3>:
    1492:	53 70 65 6b 74 72 75 6d 00                          Spektrum.

0000149b <RXMode2>:
    149b:	53 2d 42 75 73 00                                   S-Bus.

000014a1 <RXMode1>:
    14a1:	50 57 4d 00                                         PWM.

000014a5 <RXMode0>:
    14a5:	43 50 50 4d 00                                      CPPM.

000014aa <Transition_P1n>:
    14aa:	54 72 61 6e 73 2e 20 50 31 6e 3a 00                 Trans. P1n:.

000014b6 <Transition>:
    14b6:	54 72 61 6e 73 69 74 69 6f 6e 00                    Transition.

000014c1 <RCMenuItem10>:
    14c1:	52 75 64 64 65 72 20 70 6f 6c 2e 3a 00              Rudder pol.:.

000014ce <RCMenuItem9>:
    14ce:	45 6c 65 76 61 74 6f 72 20 70 6f 6c 2e 3a 00        Elevator pol.:.

000014dd <RCMenuItem8>:
    14dd:	41 69 6c 65 72 6f 6e 20 70 6f 6c 2e 3a 00           Aileron pol.:.

000014eb <RCMenuItem2>:
    14eb:	50 72 6f 66 69 6c 65 20 43 68 61 6e 2e 3a 00        Profile Chan.:.

000014fa <RCMenuItem0>:
    14fa:	43 68 2e 20 6f 72 64 65 72 3a 00                    Ch. order:.

00001505 <RCMenuItem20>:
    1505:	50 57 4d 20 73 79 6e 63 3a 00                       PWM sync:.

0000150f <RCMenuItem1>:
    150f:	52 58 20 74 79 70 65 3a 00                          RX type:.

00001518 <AutoMenuItem15>:
    1518:	4f 4e 00                                            ON.

0000151b <AutoMenuItem11>:
    151b:	4f 46 46 00                                         OFF.

0000151f <StabMenuItem30>:
    151f:	59 61 77 20 74 72 69 6d 3a 00                       Yaw trim:.

00001529 <StabMenuItem9>:
    1529:	59 61 77 20 49 20 72 61 74 65 3a 00                 Yaw I rate:.

00001535 <StabMenuItem12>:
    1535:	59 61 77 20 49 20 4c 69 6d 69 74 3a 00              Yaw I Limit:.

00001542 <StabMenuItem8>:
    1542:	59 61 77 20 49 3a 00                                Yaw I:.

00001549 <StabMenuItem7>:
    1549:	59 61 77 20 50 3a 00                                Yaw P:.

00001550 <AutoMenuItem8>:
    1550:	50 69 74 63 68 20 74 72 69 6d 3a 00                 Pitch trim:.

0000155c <AutoMenuItem21>:
    155c:	50 69 74 63 68 20 41 75 74 6f 4c 76 6c 3a 00        Pitch AutoLvl:.

0000156b <StabMenuItem6>:
    156b:	50 69 74 63 68 20 49 20 72 61 74 65 3a 00           Pitch I rate:.

00001579 <StabMenuItem11>:
    1579:	50 69 74 63 68 20 49 20 4c 69 6d 69 74 3a 00        Pitch I Limit:.

00001588 <StabMenuItem5>:
    1588:	50 69 74 63 68 20 49 3a 00                          Pitch I:.

00001591 <AutoMenuItem4>:
    1591:	50 69 74 63 68 20 50 3a 00                          Pitch P:.

0000159a <AutoMenuItem7>:
    159a:	52 6f 6c 6c 20 74 72 69 6d 3a 00                    Roll trim:.

000015a5 <AutoMenuItem20>:
    15a5:	52 6f 6c 6c 20 41 75 74 6f 4c 76 6c 3a 00           Roll AutoLvl:.

000015b3 <StabMenuItem3>:
    15b3:	52 6f 6c 6c 20 49 20 72 61 74 65 3a 00              Roll I rate:.

000015c0 <StabMenuItem10>:
    15c0:	52 6f 6c 6c 20 49 20 4c 69 6d 69 74 3a 00           Roll I Limit:.

000015ce <StabMenuItem2>:
    15ce:	52 6f 6c 6c 20 49 3a 00                             Roll I:.

000015d6 <AutoMenuItem1>:
    15d6:	52 6f 6c 6c 20 50 3a 00                             Roll P:.

000015de <StabMenuItem13>:
    15de:	41 63 63 20 56 65 72 74 20 50 3a 00                 Acc Vert P:.

000015ea <SensorMenuItem2>:
    15ea:	49 6e 76 2e 00                                      Inv..

000015ef <SensorMenuItem1>:
    15ef:	43 61 6c 2e 00                                      Cal..

000015f4 <PText19>:
    15f4:	41 63 63 00                                         Acc.

000015f8 <PText18>:
    15f8:	59 61 77 00                                         Yaw.

000015fc <PText17>:
    15fc:	50 69 74 63 68 00                                   Pitch.

00001602 <PText16>:
    1602:	52 6f 6c 6c 00                                      Roll.

00001607 <PText15>:
    1607:	47 79 72 6f 00                                      Gyro.

0000160c <MainMenuItem23>:
    160c:	31 39 2e 20 50 6f 73 2e 20 53 65 72 76 6f 20 74     19. Pos. Servo t
    161c:	72 76 6c 2e 20 28 25 29 00                          rvl. (%).

00001625 <MainMenuItem22>:
    1625:	31 38 2e 20 4e 65 67 2e 20 53 65 72 76 6f 20 74     18. Neg. Servo t
    1635:	72 76 6c 2e 20 28 25 29 00                          rvl. (%).

0000163e <MainMenuItem20>:
    163e:	31 37 2e 20 53 65 72 76 6f 20 64 69 72 65 63 74     17. Servo direct
    164e:	69 6f 6e 00                                         ion.

00001652 <MainMenuItem18>:
    1652:	31 36 2e 20 4f 55 54 38 20 4d 69 78 65 72 00        16. OUT8 Mixer.

00001661 <MainMenuItem17>:
    1661:	31 35 2e 20 4f 55 54 37 20 4d 69 78 65 72 00        15. OUT7 Mixer.

00001670 <MainMenuItem16>:
    1670:	31 34 2e 20 4f 55 54 36 20 4d 69 78 65 72 00        14. OUT6 Mixer.

0000167f <MainMenuItem15>:
    167f:	31 33 2e 20 4f 55 54 35 20 4d 69 78 65 72 00        13. OUT5 Mixer.

0000168e <MainMenuItem14>:
    168e:	31 32 2e 20 4f 55 54 34 20 4d 69 78 65 72 00        12. OUT4 Mixer.

0000169d <MainMenuItem13>:
    169d:	31 31 2e 20 4f 55 54 33 20 4d 69 78 65 72 00        11. OUT3 Mixer.

000016ac <MainMenuItem12>:
    16ac:	31 30 2e 20 4f 55 54 32 20 4d 69 78 65 72 00        10. OUT2 Mixer.

000016bb <MainMenuItem11>:
    16bb:	39 2e 20 4f 55 54 31 20 4d 69 78 65 72 00           9. OUT1 Mixer.

000016c9 <MainMenuItem3>:
    16c9:	38 2e 20 46 6c 69 67 68 74 20 70 72 6f 66 69 6c     8. Flight profil
    16d9:	65 20 32 00                                         e 2.

000016dd <MainMenuItem2>:
    16dd:	37 2e 20 46 6c 69 67 68 74 20 70 72 6f 66 69 6c     7. Flight profil
    16ed:	65 20 31 00                                         e 1.

000016f1 <MainMenuItem10>:
    16f1:	36 2e 20 4c 65 76 65 6c 20 6d 65 74 65 72 00        6. Level meter.

00001700 <MainMenuItem8>:
    1700:	35 2e 20 53 65 6e 73 6f 72 20 63 61 6c 69 62 72     5. Sensor calibr
    1710:	61 74 69 6f 6e 00                                   ation.

00001716 <MainMenuItem7>:
    1716:	34 2e 20 53 74 69 63 6b 20 70 6f 6c 61 72 69 74     4. Stick polarit
    1726:	79 00                                               y.

00001728 <MainMenuItem9>:
    1728:	33 2e 20 52 65 63 65 69 76 65 72 20 69 6e 70 75     3. Receiver inpu
    1738:	74 73 00                                            ts.

0000173b <MainMenuItem1>:
    173b:	32 2e 20 52 65 63 65 69 76 65 72 20 73 65 74 75     2. Receiver setu
    174b:	70 00                                               p.

0000174d <MainMenuItem0>:
    174d:	31 2e 20 47 65 6e 65 72 61 6c 00                    1. General.

00001758 <MenuFrame8>:
    1758:	53 61 76 65 00                                      Save.

0000175d <MenuFrame7>:
    175d:	44 65 66 2e 00                                      Def..

00001762 <MenuFrame6>:
    1762:	42 61 63 6b 00                                      Back.

00001767 <MenuFrame5>:
    1767:	4d 65 6e 75 00                                      Menu.

0000176c <MenuFrame1>:
    176c:	45 00                                               E.

0000176e <MenuFrame4>:
    176e:	44 00                                               D.

00001770 <MenuFrame3>:
    1770:	43 00                                               C.

00001772 <MenuFrame2>:
    1772:	42 00                                               B.

00001774 <MenuFrame0>:
    1774:	41 00                                               A.

00001776 <StatusText9>:
    1776:	4a 69 74 74 65 72 3a 00                             Jitter:.

0000177e <StatusText8>:
    177e:	50 6f 73 3a 00                                      Pos:.

00001783 <StatusText7>:
    1783:	42 61 74 74 65 72 79 3a 00                          Battery:.

0000178c <StatusText5>:
    178c:	30 00                                               0.

0000178e <StatusText4>:
    178e:	2e 00                                               ..

00001790 <StatusText3>:
    1790:	50 72 6f 66 69 6c 65 3a 00                          Profile:.

00001799 <StatusText1>:
    1799:	4d 6f 64 65 3a 00                                   Mode:.

0000179f <StatusText0>:
    179f:	56 65 72 73 69 6f 6e 3a 20 31 2e 31 20 42 33 00     Version: 1.1 B3.

000017af <Gyro_Pol>:
    17af:	01 01 01 01 01 01 01 ff ff ff ff 01 01 ff 01 ff     ................
    17bf:	01 01                                               ..

000017c1 <Gyro_RPY_Order>:
    17c1:	00 01 02 01 02 00 00 01 02 00 01 02 01 00 02 02     ................
    17d1:	01 00                                               ..

000017d3 <LPF_lookup>:
    17d3:	17 0c 06 04 03 02 01                                .......

000017da <lines>:
    17da:	03 0f 1b 27                                         ...'

000017de <flight_menu_ranges>:
    17de:	00 7f 01 00 3c 00 7f 01 00 28 00 7d 01 00 0a 00     ....<....(.}....
    17ee:	04 01 00 02 00 7f 01 00 05 81 7f 01 00 00 00 7f     ................
    17fe:	01 00 3c 00 7f 01 00 28 00 7d 01 00 0a 00 04 01     ..<....(.}......
    180e:	00 02 00 7f 01 00 05 81 7f 01 00 00 00 7f 01 00     ................
    181e:	50 00 7f 01 00 00 00 7d 01 00 00 00 04 01 00 01     P......}........
    182e:	81 7f 01 00 00 00 7f 01 00 00                       ..........

00001838 <FlightMenuText>:
	...

0000184a <mixer_menu_ranges>:
    184a:	00 02 01 01 00 83 7d 01 00 00 01 63 01 00 32 83     ......}....c..2.
    185a:	7d 01 00 00 83 7d 01 00 00 00 7d 01 00 64 00 7d     }....}....}..d.}
    186a:	01 00 64 00 02 01 01 00 83 7d 01 00 00 83 7d 01     ..d......}....}.
    187a:	00 00 83 7d 01 00 00 83 7d 01 00 00 83 7d 01 00     ...}....}....}..
    188a:	00 83 7d 01 00 00 00 02 01 01 00 00 02 01 01 00     ..}.............
    189a:	00 02 01 01 00 00 02 01 01 00 00 02 01 01 00 00     ................
    18aa:	02 01 01 00 00 02 01 01 00 00 02 01 01 00 00 02     ................
    18ba:	01 01 00 00 02 01 01 00 00 02 01 01 00 00 02 01     ................
    18ca:	01 00 00 0f 01 01 0f 83 7d 01 00 00 00 0f 01 01     ........}.......
    18da:	0f 83 7d 01 00 00 00 0f 01 01 0f 83 7d 01 00 00     ..}.........}...
    18ea:	00 0f 01 01 0f 83 7d 01 00 00                       ......}...

000018f4 <MixerMenuText>:
    18f4:	e2 00 00 00 00 00 00 38 00 00 00 00 00 00 44 44     .......8......DD
    1904:	44 44 44 44 44 44 44 44 44 44 ee 00 ee 00 ee 00     DDDDDDDDDD......
    1914:	ee 00                                               ..

00001916 <servo_menu_ranges>:
    1916:	00 01 01 01 00 83 00 01 00 9c 00 7d 01 00 64        ...........}..d

00001925 <ServoMenuText>:
    1925:	8d 8d 8d 8d 8d 8d 8d 8d 00 00 00 00 00 00 00 00     ................
	...

0000193d <rc_menu_ranges>:
    193d:	00 03 01 01 01 00 04 01 01 04 00 01 01 01 00 00     ................
    194d:	08 01 01 04 00 01 01 01 00 00 01 01 01 00 00 01     ................
    195d:	01 01 00 00 28 01 00 00 01 63 01 00 32 00 00 00     ....(....c..2...
    196d:	00 00 00 05 01 01 00 1c 32 01 00 24 00 01 01 01     ........2..$....
    197d:	01 00 7f 01 00 1e 00 05 01 01 00 00 02 01 01 00     ................
    198d:	00 06 01 01 02 00 06 01 01 06 01 0a 01 00 07 00     ................
    199d:	06 01 01 02                                         ....

000019a1 <RCMenuText>:
    19a1:	3e 69 74 69 8d 8d 8d 00 00 00 7c 00 2c 00 00 76     >iti......|.,..v
    19b1:	62 62 00 25                                         bb.%

000019b5 <SQRTSIN>:
    19b5:	00 0d 12 16 19 1c 1f 21 23 26 28 29 2b 2d 2f 30     .......!#&()+-/0
    19c5:	32 33 35 36 38 39 3a 3b 3d 3e 3f 40 41 42 43 44     235689:;=>?@ABCD
    19d5:	45 46 47 48 49 4a 4b 4c 4d 4d 4e 4f 50 51 51 52     EFGHIJKLMMNOPQQR
    19e5:	53 53 54 55 55 56 57 57 58 58 59 59 5a 5a 5b 5b     SSTUUVWWXXYYZZ[[
    19f5:	5c 5c 5d 5d 5e 5e 5e 5f 5f 5f 60 60 60 61 61 61     \\]]^^^___```aaa
    1a05:	62 62 62 62 62 63 63 63 63 63 63 63 64 64 64 64     bbbbbcccccccdddd
    1a15:	64 64 64 64 64                                      ddddd

00001a1a <SIN>:
    1a1a:	00 02 03 05 06 08 0a 0b 0d 0e 10 11 13 14 16 17     ................
    1a2a:	19 1a 1c 1d 1f 20 22 23 25 26 28 29 2b 2c 2d 2f     ..... "#%&()+,-/
    1a3a:	30 32 33 34 36 37 38 3a 3b 3c 3d 3f 40 41 42 43     0234678:;<=?@ABC
    1a4a:	44 46 47 48 49 4a 4b 4c 4d 4e 4f 50 51 52 53 54     DFGHIJKLMNOPQRST
    1a5a:	54 55 56 57 58 58 59 5a 5a 5b 5c 5c 5d 5e 5e 5f     TUVWXXYZZ[\\]^^_
    1a6a:	5f 60 60 60 61 61 62 62 62 63 63 63 63 63 64 64     _```aabbbcccccdd
    1a7a:	64 64 64 64 64 00                                   ddddd.

00001a80 <__ctors_end>:
    1a80:	11 24       	eor	r1, r1
    1a82:	1f be       	out	0x3f, r1	; 63
    1a84:	cf ef       	ldi	r28, 0xFF	; 255
    1a86:	d0 e1       	ldi	r29, 0x10	; 16
    1a88:	de bf       	out	0x3e, r29	; 62
    1a8a:	cd bf       	out	0x3d, r28	; 61

00001a8c <wdt_init>:
// WDT reset prototype. Placed before main() in code to prevent wdt re-firing
void wdt_init(void) __attribute__((naked)) __attribute__((section(".init3")));

void wdt_init(void)
{
	MCUSR = 0;
    1a8c:	14 be       	out	0x34, r1	; 52
	wdt_disable();
    1a8e:	88 e1       	ldi	r24, 0x18	; 24
    1a90:	0f b6       	in	r0, 0x3f	; 63
    1a92:	f8 94       	cli
    1a94:	80 93 60 00 	sts	0x0060, r24
    1a98:	10 92 60 00 	sts	0x0060, r1
    1a9c:	0f be       	out	0x3f, r0	; 63

00001a9e <__do_copy_data>:
    1a9e:	15 e0       	ldi	r17, 0x05	; 5
    1aa0:	a0 e0       	ldi	r26, 0x00	; 0
    1aa2:	b1 e0       	ldi	r27, 0x01	; 1
    1aa4:	e6 e2       	ldi	r30, 0x26	; 38
    1aa6:	f0 e9       	ldi	r31, 0x90	; 144
    1aa8:	02 c0       	rjmp	.+4      	; 0x1aae <__do_copy_data+0x10>
    1aaa:	05 90       	lpm	r0, Z+
    1aac:	0d 92       	st	X+, r0
    1aae:	ae 30       	cpi	r26, 0x0E	; 14
    1ab0:	b1 07       	cpc	r27, r17
    1ab2:	d9 f7       	brne	.-10     	; 0x1aaa <__do_copy_data+0xc>

00001ab4 <__do_clear_bss>:
    1ab4:	28 e0       	ldi	r18, 0x08	; 8
    1ab6:	ae e0       	ldi	r26, 0x0E	; 14
    1ab8:	b5 e0       	ldi	r27, 0x05	; 5
    1aba:	01 c0       	rjmp	.+2      	; 0x1abe <.do_clear_bss_start>

00001abc <.do_clear_bss_loop>:
    1abc:	1d 92       	st	X+, r1

00001abe <.do_clear_bss_start>:
    1abe:	af 34       	cpi	r26, 0x4F	; 79
    1ac0:	b2 07       	cpc	r27, r18
    1ac2:	e1 f7       	brne	.-8      	; 0x1abc <.do_clear_bss_loop>
    1ac4:	0e 94 a7 19 	call	0x334e	; 0x334e <main>
    1ac8:	0c 94 11 48 	jmp	0x9022	; 0x9022 <_exit>

00001acc <__bad_interrupt>:
    1acc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00001ad0 <glcd_delay>:
;*************************************************************************

	.global glcd_delay
	.func   glcd_delay
glcd_delay:
	nop					// 1 5 * 50ns = 250ns = 4MHz
    1ad0:	00 00       	nop
	ret					// 4 (5 cycles)
    1ad2:	08 95       	ret

00001ad4 <glcd_delay_1us>:
;*************************************************************************

	.global glcd_delay_1us
	.func   glcd_delay_1us
glcd_delay_1us:
	rcall	glcd_delay
    1ad4:	fd df       	rcall	.-6      	; 0x1ad0 <glcd_delay>
	rcall	glcd_delay
    1ad6:	fc df       	rcall	.-8      	; 0x1ad0 <glcd_delay>
	rcall	glcd_delay
    1ad8:	fb df       	rcall	.-10     	; 0x1ad0 <glcd_delay>
	rcall	glcd_delay
    1ada:	fa df       	rcall	.-12     	; 0x1ad0 <glcd_delay>
	ret
    1adc:	08 95       	ret

00001ade <bind_master>:
;*************************************************************************

	.global bind_master
	.func   bind_master
bind_master:
	push	YL			//	1
    1ade:	cf 93       	push	r28
	push	XL			//	1
    1ae0:	af 93       	push	r26

	ldi		XL,0x5		// 	1 Master is 5 pulses
    1ae2:	a5 e0       	ldi	r26, 0x05	; 5

00001ae4 <master_loop>:
master_loop:
	cbi 	BIND		//	2
    1ae4:	58 98       	cbi	0x0b, 0	; 11
	ldi		YL,0x76		// 	1 		118us
    1ae6:	c6 e7       	ldi	r28, 0x76	; 118
	call	VarDelay	//	4
    1ae8:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <VarDelay>
	sbi		BIND		//	2
    1aec:	58 9a       	sbi	0x0b, 0	; 11
	ldi		YL,0x7A		// 	1 		122us
    1aee:	ca e7       	ldi	r28, 0x7A	; 122
	call	VarDelay	//	4
    1af0:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <VarDelay>
	dec		XL			//	1
    1af4:	aa 95       	dec	r26
	brne	master_loop	//  2 1
    1af6:	b1 f7       	brne	.-20     	; 0x1ae4 <master_loop>

	pop		XL			//	  1
    1af8:	af 91       	pop	r26
	pop		YL			//	  1
    1afa:	cf 91       	pop	r28
	ret					//	  4 
    1afc:	08 95       	ret

00001afe <VarDelay>:
; 5 cycles to configure and call, 4 to return and 2 to change bit afterwards = 11
; 20 cycles makes 1.0us
;*************************************************************************

VarDelay:
	rjmp .+0			// 2
    1afe:	00 c0       	rjmp	.+0      	; 0x1b00 <VarDelay+0x2>
	rjmp .+0			// 2
    1b00:	00 c0       	rjmp	.+0      	; 0x1b02 <VarDelay+0x4>
	rjmp .+0			// 2
    1b02:	00 c0       	rjmp	.+0      	; 0x1b04 <VarDelay+0x6>
	rjmp .+0			// 2
    1b04:	00 c0       	rjmp	.+0      	; 0x1b06 <VarDelay+0x8>
	rjmp .+0			// 2
    1b06:	00 c0       	rjmp	.+0      	; 0x1b08 <VarDelay+0xa>
	rjmp .+0			// 2
    1b08:	00 c0       	rjmp	.+0      	; 0x1b0a <VarDelay+0xc>
	rjmp .+0			// 2
    1b0a:	00 c0       	rjmp	.+0      	; 0x1b0c <VarDelay+0xe>
	rjmp .+0			// 2
    1b0c:	00 c0       	rjmp	.+0      	; 0x1b0e <VarDelay+0x10>
	nop					// 1
    1b0e:	00 00       	nop
	dec 	YL			// 1
    1b10:	ca 95       	dec	r28
	brne	VarDelay	// 2 1
    1b12:	a9 f7       	brne	.-22     	; 0x1afe <VarDelay>
	ret					//   4 
    1b14:	08 95       	ret

00001b16 <output_servo_ppm_asm>:

	.global output_servo_ppm_asm
	.func   output_servo_ppm_asm
output_servo_ppm_asm:
// Copy r22 (containing ServoFlag) into r15
	mov		r15, r22	
    1b16:	f6 2e       	mov	r15, r22
// Save regs
	push	ZL			// 2			
    1b18:	ef 93       	push	r30
	push	ZH			// 2
    1b1a:	ff 93       	push	r31
	push	XL			// 2
    1b1c:	af 93       	push	r26
	push	XH			// 2
    1b1e:	bf 93       	push	r27
	push	YL			// 2
    1b20:	cf 93       	push	r28
	push	YH			// 2
    1b22:	df 93       	push	r29
	push	16			// 2
    1b24:	0f 93       	push	r16
	push	17			// 2
    1b26:	1f 93       	push	r17
	push	18			// 2
    1b28:	2f 93       	push	r18
	push	19			// 2
    1b2a:	3f 93       	push	r19
	push	20			// 2
    1b2c:	4f 93       	push	r20
	push	21			// 2
    1b2e:	5f 93       	push	r21
	push	22			// 2
    1b30:	6f 93       	push	r22
	push	23			// 2
    1b32:	7f 93       	push	r23

// Get start address of ServoOut[0] into Z
	mov		ZL, r24		// 1 Low byte
    1b34:	e8 2f       	mov	r30, r24
	mov		ZH, r25		// 1 High byte
    1b36:	f9 2f       	mov	r31, r25

// Save initial address for later
	push	24			// 2
    1b38:	8f 93       	push	r24
	push	25			// 2
    1b3a:	9f 93       	push	r25

// Trim 16-bit values to suit individual needs, 
// Save result and copy lower 3 bits to r16 to r23 (96 cycles)

// M1
	ld		XL, Z+ 		// 2			Load XL with data at address in Z
    1b3c:	a1 91       	ld	r26, Z+
	ld		XH, Z+		// 2			Load XH with data at address in Z+1
    1b3e:	b1 91       	ld	r27, Z+
	subi	XL,	0x4b	// 1 			Trim servo pulse (was 4a)
    1b40:	ab 54       	subi	r26, 0x4B	; 75
	sbci 	XH,	0x03	// 1
    1b42:	b3 40       	sbci	r27, 0x03	; 3
	push	XL 			// 2			Save trimmed value to the stack
    1b44:	af 93       	push	r26
	push	XH 			// 2
    1b46:	bf 93       	push	r27
	andi	XL,	0x07	// 1			And all but first 3 bits
    1b48:	a7 70       	andi	r26, 0x07	; 7
	mov		r23,XL		// 1 (12)		Copy 8-bit result to regs
    1b4a:	7a 2f       	mov	r23, r26
// M2
	ld		XL, Z+
    1b4c:	a1 91       	ld	r26, Z+
	ld		XH, Z+
    1b4e:	b1 91       	ld	r27, Z+
	subi	XL,	0xe6  // was e6
    1b50:	a6 5e       	subi	r26, 0xE6	; 230
	sbci 	XH,	0x02
    1b52:	b2 40       	sbci	r27, 0x02	; 2
	push	XL 		
    1b54:	af 93       	push	r26
	push	XH 		
    1b56:	bf 93       	push	r27
	andi	XL,	0x07
    1b58:	a7 70       	andi	r26, 0x07	; 7
	mov		r22,XL	
    1b5a:	6a 2f       	mov	r22, r26
// M3
	ld		XL, Z+
    1b5c:	a1 91       	ld	r26, Z+
	ld		XH, Z+
    1b5e:	b1 91       	ld	r27, Z+
	subi	XL,	0x82
    1b60:	a2 58       	subi	r26, 0x82	; 130
	sbci 	XH,	0x02
    1b62:	b2 40       	sbci	r27, 0x02	; 2
	push	XL 		
    1b64:	af 93       	push	r26
	push	XH 		
    1b66:	bf 93       	push	r27
	andi	XL,	0x07
    1b68:	a7 70       	andi	r26, 0x07	; 7
	mov		r21,XL	
    1b6a:	5a 2f       	mov	r21, r26
// M4
	ld		XL, Z+
    1b6c:	a1 91       	ld	r26, Z+
	ld		XH, Z+
    1b6e:	b1 91       	ld	r27, Z+
	subi	XL,	0x1e
    1b70:	ae 51       	subi	r26, 0x1E	; 30
	sbci 	XH,	0x02
    1b72:	b2 40       	sbci	r27, 0x02	; 2
	push	XL 	
    1b74:	af 93       	push	r26
	push	XH 	
    1b76:	bf 93       	push	r27
	andi	XL,	0x07
    1b78:	a7 70       	andi	r26, 0x07	; 7
	mov		r20,XL	
    1b7a:	4a 2f       	mov	r20, r26
// M5
	ld		XL, Z+
    1b7c:	a1 91       	ld	r26, Z+
	ld		XH, Z+
    1b7e:	b1 91       	ld	r27, Z+
	subi	XL,	0xba // was b9
    1b80:	aa 5b       	subi	r26, 0xBA	; 186
	sbci 	XH,	0x01
    1b82:	b1 40       	sbci	r27, 0x01	; 1
	push	XL 	
    1b84:	af 93       	push	r26
	push	XH 	
    1b86:	bf 93       	push	r27
	andi	XL,	0x07
    1b88:	a7 70       	andi	r26, 0x07	; 7
	mov		r19,XL	
    1b8a:	3a 2f       	mov	r19, r26
// M6
	ld		XL, Z+
    1b8c:	a1 91       	ld	r26, Z+
	ld		XH, Z+
    1b8e:	b1 91       	ld	r27, Z+
	subi	XL,	0x55 // was 55
    1b90:	a5 55       	subi	r26, 0x55	; 85
	sbci 	XH,	0x01
    1b92:	b1 40       	sbci	r27, 0x01	; 1
	push	XL 	
    1b94:	af 93       	push	r26
	push	XH 	
    1b96:	bf 93       	push	r27
	andi	XL,	0x07
    1b98:	a7 70       	andi	r26, 0x07	; 7
	mov		r18,XL
    1b9a:	2a 2f       	mov	r18, r26
// M7
	ld		XL, Z+
    1b9c:	a1 91       	ld	r26, Z+
	ld		XH, Z+
    1b9e:	b1 91       	ld	r27, Z+
	subi	XL,	0xf1 // was f1
    1ba0:	a1 5f       	subi	r26, 0xF1	; 241
	sbci 	XH,	0x00
    1ba2:	b0 40       	sbci	r27, 0x00	; 0
	push	XL 	
    1ba4:	af 93       	push	r26
	push	XH 
    1ba6:	bf 93       	push	r27
	andi	XL,	0x07
    1ba8:	a7 70       	andi	r26, 0x07	; 7
	mov		r17,XL
    1baa:	1a 2f       	mov	r17, r26
// M8
	ld		XL, Z+
    1bac:	a1 91       	ld	r26, Z+
	ld		XH, Z+
    1bae:	b1 91       	ld	r27, Z+
	subi	XL,	0x8d // Was 8d
    1bb0:	ad 58       	subi	r26, 0x8D	; 141
	sbci 	XH,	0x00
    1bb2:	b0 40       	sbci	r27, 0x00	; 0
	push	XL
    1bb4:	af 93       	push	r26
	push	XH 
    1bb6:	bf 93       	push	r27
	andi	XL,	0x07
    1bb8:	a7 70       	andi	r26, 0x07	; 7
	mov		r16,XL
    1bba:	0a 2f       	mov	r16, r26
// Time out lower 3 bits of pulse value (Zero to 7us)
// Each chunk is always executed in 1+10+1+147 = 159 cycles or 7.95us
// This does affect the inter-pulse delay, but not the pulsewidth.

// M1
	mov		r25,r23		// 1
    1bbc:	97 2f       	mov	r25, r23
	call	DelayHigh	// 10 (where r25 = 7)
    1bbe:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <DelayHigh>
	sbrc	r15,0		// 1 (False),	2 if true
    1bc2:	f0 fc       	sbrc	r15, 0
	sbi 	M1			// 1,			0
    1bc4:	46 9a       	sbi	0x08, 6	; 8
	call	DelayLow	// 7 + 140 (where r25 = 0)
    1bc6:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <DelayLow>
	call    pwm_delay   // 100us
    1bca:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <pwm_delay>
	call    pwm_delay
    1bce:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <pwm_delay>

// M2
	mov		r25,r22
    1bd2:	96 2f       	mov	r25, r22
	call	DelayHigh
    1bd4:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <DelayHigh>
	sbrc	r15,1		// Don't switch on if if ServoFlag bit is cleared
    1bd8:	f1 fc       	sbrc	r15, 1
	sbi 	M2
    1bda:	44 9a       	sbi	0x08, 4	; 8
	call	DelayLow
    1bdc:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <DelayLow>
	call    pwm_delay   // 100us
    1be0:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <pwm_delay>
	call    pwm_delay
    1be4:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <pwm_delay>

// M3
	mov		r25,r21
    1be8:	95 2f       	mov	r25, r21
	call	DelayHigh
    1bea:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <DelayHigh>
	sbrc	r15,2		// Don't switch on if if ServoFlag bit is cleared
    1bee:	f2 fc       	sbrc	r15, 2
	sbi 	M3
    1bf0:	42 9a       	sbi	0x08, 2	; 8
	call	DelayLow
    1bf2:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <DelayLow>
	call    pwm_delay   // 100us
    1bf6:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <pwm_delay>
	call    pwm_delay
    1bfa:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <pwm_delay>

// M4
	mov		r25,r20
    1bfe:	94 2f       	mov	r25, r20
	call	DelayHigh
    1c00:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <DelayHigh>
	sbrc	r15,3		// Don't switch on if if ServoFlag bit is cleared
    1c04:	f3 fc       	sbrc	r15, 3
	sbi 	M4
    1c06:	43 9a       	sbi	0x08, 3	; 8
	call	DelayLow
    1c08:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <DelayLow>
	call    pwm_delay   // 100us
    1c0c:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <pwm_delay>
	call    pwm_delay
    1c10:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <pwm_delay>

// M5
	mov		r25,r19
    1c14:	93 2f       	mov	r25, r19
	call	DelayHigh
    1c16:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <DelayHigh>
	sbrc	r15,4		// Don't switch on if if ServoFlag bit is cleared
    1c1a:	f4 fc       	sbrc	r15, 4
	sbi 	M5
    1c1c:	14 9a       	sbi	0x02, 4	; 2
	call	DelayLow
    1c1e:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <DelayLow>
	call    pwm_delay   // 100us
    1c22:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <pwm_delay>
	call    pwm_delay
    1c26:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <pwm_delay>

// M6
	mov		r25,r18
    1c2a:	92 2f       	mov	r25, r18
	call	DelayHigh
    1c2c:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <DelayHigh>
	sbrc	r15,5		// Don't switch on if if ServoFlag bit is cleared
    1c30:	f5 fc       	sbrc	r15, 5
	sbi 	M6
    1c32:	15 9a       	sbi	0x02, 5	; 2
	call	DelayLow
    1c34:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <DelayLow>
	call    pwm_delay   // 100us
    1c38:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <pwm_delay>
	call    pwm_delay
    1c3c:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <pwm_delay>

// M7
	mov		r25,r17
    1c40:	91 2f       	mov	r25, r17
	call	DelayHigh
    1c42:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <DelayHigh>
	sbrc	r15,6		// Don't switch on if if ServoFlag bit is cleared
    1c46:	f6 fc       	sbrc	r15, 6
	sbi 	M7
    1c48:	45 9a       	sbi	0x08, 5	; 8
	call	DelayLow
    1c4a:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <DelayLow>
	call    pwm_delay   // 100us
    1c4e:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <pwm_delay>
	call    pwm_delay
    1c52:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <pwm_delay>

// M8
	mov		r25,r16
    1c56:	90 2f       	mov	r25, r16
	call	DelayHigh
    1c58:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <DelayHigh>
	sbrc	r15,7		// Don't switch on if if ServoFlag bit is cleared
    1c5c:	f7 fc       	sbrc	r15, 7
	sbi 	M8			// 1
    1c5e:	47 9a       	sbi	0x08, 7	; 8
	call	DelayLow
    1c60:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <DelayLow>
// At this point, the largest pulse that we can generate is 256 * 8 = 2.048ms
// However we would like to be able to generate up to 2.100ms (150%) - an extra 52us
// So we can fluff it out another 200us so that we can subtract enough to keep r16 under 0xff or 256 :)
// With this setup, M1 can go down to 850 and M8 can go up to 2150

	call    pwm_delay   // 150us
    1c64:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <pwm_delay>
	call    pwm_delay
    1c68:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <pwm_delay>
	call    pwm_delay
    1c6c:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <pwm_delay>

// Copy trimmed array data into regs
// This now represents steps of 8us chunks
	pop		XH			// M8
    1c70:	bf 91       	pop	r27
	pop		XL
    1c72:	af 91       	pop	r26
	call	shuffle_8
    1c74:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <shuffle_8>
	mov		r16,XL
    1c78:	0a 2f       	mov	r16, r26
	pop		XH			// M7
    1c7a:	bf 91       	pop	r27
	pop		XL
    1c7c:	af 91       	pop	r26
	call	shuffle_8
    1c7e:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <shuffle_8>
	mov		r17,XL
    1c82:	1a 2f       	mov	r17, r26
	pop		XH			// M6
    1c84:	bf 91       	pop	r27
	pop		XL
    1c86:	af 91       	pop	r26
	call	shuffle_8
    1c88:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <shuffle_8>
	mov		r18,XL
    1c8c:	2a 2f       	mov	r18, r26
	pop		XH			// M5
    1c8e:	bf 91       	pop	r27
	pop		XL
    1c90:	af 91       	pop	r26
	call	shuffle_8
    1c92:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <shuffle_8>
	mov		r19,XL
    1c96:	3a 2f       	mov	r19, r26
	pop		XH			// M4
    1c98:	bf 91       	pop	r27
	pop		XL
    1c9a:	af 91       	pop	r26
	call	shuffle_8
    1c9c:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <shuffle_8>
	mov		r20,XL
    1ca0:	4a 2f       	mov	r20, r26
	pop		XH			// M3
    1ca2:	bf 91       	pop	r27
	pop		XL
    1ca4:	af 91       	pop	r26
	call	shuffle_8
    1ca6:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <shuffle_8>
	mov		r21,XL
    1caa:	5a 2f       	mov	r21, r26
	pop		XH			// M2
    1cac:	bf 91       	pop	r27
	pop		XL
    1cae:	af 91       	pop	r26
	call	shuffle_8
    1cb0:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <shuffle_8>
	mov		r22,XL
    1cb4:	6a 2f       	mov	r22, r26
	pop		XH			// M1
    1cb6:	bf 91       	pop	r27
	pop		XL
    1cb8:	af 91       	pop	r26
	call	shuffle_8
    1cba:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <shuffle_8>
	mov		r23,XL
    1cbe:	7a 2f       	mov	r23, r26

// Loop prep
	ldi 	YL,0x13		// 1			Set loop count to 113h or 275 (275 * 8us = 2200us)
    1cc0:	c3 e1       	ldi	r28, 0x13	; 19
	ldi		YH,0x01		// 1
    1cc2:	d1 e0       	ldi	r29, 0x01	; 1
	clr		0			// 1 (7)
    1cc4:	00 24       	eor	r0, r0

00001cc6 <nloop>:

// Ninja loop - 7 cycles each side (8 x 7 = 56 + 6 to loop + 98 pad = 160 cycles)
// 20 cyles = 1us, 160 cycles = 8us

nloop:
	subi	r23,1		// 1 			ServoOut1
    1cc6:	71 50       	subi	r23, 0x01	; 1
	brne	j1			// 2	1	
    1cc8:	19 f4       	brne	.+6      	; 0x1cd0 <j1>
	cbi 	M1			// 		2		Clear output M1 if done (+5 = 1448 = 72.4us = 48)
    1cca:	46 98       	cbi	0x08, 6	; 8
	jmp		jj1			//		3
    1ccc:	0c 94 6a 0e 	jmp	0x1cd4	; 0x1cd4 <jj1>

00001cd0 <j1>:
j1:
	rjmp 	.+0			// 2
    1cd0:	00 c0       	rjmp	.+0      	; 0x1cd2 <j1+0x2>
	rjmp 	.+0			// 2
    1cd2:	00 c0       	rjmp	.+0      	; 0x1cd4 <jj1>

00001cd4 <jj1>:
jj1:
	subi	r22,1		// 1			ServoOut2
    1cd4:	61 50       	subi	r22, 0x01	; 1
	brne	j2			// 2	1
    1cd6:	19 f4       	brne	.+6      	; 0x1cde <j2>
	cbi 	M2			// 		2		Clear output M2 if done (+11 = 1285 = 64.25us = 40)
    1cd8:	44 98       	cbi	0x08, 4	; 8
	jmp		jj2			//		3
    1cda:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <jj2>

00001cde <j2>:
j2:
	rjmp	.+0
    1cde:	00 c0       	rjmp	.+0      	; 0x1ce0 <j2+0x2>
	rjmp	.+0
    1ce0:	00 c0       	rjmp	.+0      	; 0x1ce2 <jj2>

00001ce2 <jj2>:
jj2:
	subi	r21,1
    1ce2:	51 50       	subi	r21, 0x01	; 1
	brne	j3
    1ce4:	19 f4       	brne	.+6      	; 0x1cec <j3>
	cbi 	M3
    1ce6:	42 98       	cbi	0x08, 2	; 8
	jmp		jj3
    1ce8:	0c 94 78 0e 	jmp	0x1cf0	; 0x1cf0 <jj3>

00001cec <j3>:
j3:
	rjmp	.+0
    1cec:	00 c0       	rjmp	.+0      	; 0x1cee <j3+0x2>
	rjmp	.+0
    1cee:	00 c0       	rjmp	.+0      	; 0x1cf0 <jj3>

00001cf0 <jj3>:
jj3:
	subi 	r20,1
    1cf0:	41 50       	subi	r20, 0x01	; 1
	brne	j4
    1cf2:	19 f4       	brne	.+6      	; 0x1cfa <j4>
	cbi 	M4
    1cf4:	43 98       	cbi	0x08, 3	; 8
	jmp		jj4	
    1cf6:	0c 94 7f 0e 	jmp	0x1cfe	; 0x1cfe <jj4>

00001cfa <j4>:
j4:
	rjmp 	.+0
    1cfa:	00 c0       	rjmp	.+0      	; 0x1cfc <j4+0x2>
	rjmp 	.+0
    1cfc:	00 c0       	rjmp	.+0      	; 0x1cfe <jj4>

00001cfe <jj4>:
jj4:
	subi	r19,1
    1cfe:	31 50       	subi	r19, 0x01	; 1
	brne	j5
    1d00:	19 f4       	brne	.+6      	; 0x1d08 <j5>
	cbi 	M5
    1d02:	14 98       	cbi	0x02, 4	; 2
	jmp		jj5
    1d04:	0c 94 86 0e 	jmp	0x1d0c	; 0x1d0c <jj5>

00001d08 <j5>:
j5:
	rjmp 	.+0
    1d08:	00 c0       	rjmp	.+0      	; 0x1d0a <j5+0x2>
	rjmp 	.+0
    1d0a:	00 c0       	rjmp	.+0      	; 0x1d0c <jj5>

00001d0c <jj5>:
jj5:
	subi	r18,1
    1d0c:	21 50       	subi	r18, 0x01	; 1
	brne	j6
    1d0e:	19 f4       	brne	.+6      	; 0x1d16 <j6>
	cbi 	M6
    1d10:	15 98       	cbi	0x02, 5	; 2
	jmp		jj6
    1d12:	0c 94 8d 0e 	jmp	0x1d1a	; 0x1d1a <jj6>

00001d16 <j6>:
j6:
	rjmp 	.+0
    1d16:	00 c0       	rjmp	.+0      	; 0x1d18 <j6+0x2>
	rjmp	.+0
    1d18:	00 c0       	rjmp	.+0      	; 0x1d1a <jj6>

00001d1a <jj6>:
jj6:
	subi	r17,1
    1d1a:	11 50       	subi	r17, 0x01	; 1
	brne	j7
    1d1c:	19 f4       	brne	.+6      	; 0x1d24 <j7>
	cbi 	M7
    1d1e:	45 98       	cbi	0x08, 5	; 8
	jmp		jj7
    1d20:	0c 94 94 0e 	jmp	0x1d28	; 0x1d28 <jj7>

00001d24 <j7>:
j7:
	rjmp 	.+0
    1d24:	00 c0       	rjmp	.+0      	; 0x1d26 <j7+0x2>
	rjmp 	.+0
    1d26:	00 c0       	rjmp	.+0      	; 0x1d28 <jj7>

00001d28 <jj7>:
jj7:
	subi 	r16,1		// ServoOut 8
    1d28:	01 50       	subi	r16, 0x01	; 1
	brne	j8
    1d2a:	19 f4       	brne	.+6      	; 0x1d32 <j8>
	cbi 	M8
    1d2c:	47 98       	cbi	0x08, 7	; 8
	jmp		jj8
    1d2e:	0c 94 9b 0e 	jmp	0x1d36	; 0x1d36 <jj8>

00001d32 <j8>:
j8:
	rjmp 	.+0
    1d32:	00 c0       	rjmp	.+0      	; 0x1d34 <j8+0x2>
	rjmp 	.+0
    1d34:	00 c0       	rjmp	.+0      	; 0x1d36 <jj8>

00001d36 <jj8>:
jj8:
	call	pad_100_delay // (100)
    1d36:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <pad_100_delay>

	subi 	YL,1		// 1
    1d3a:	c1 50       	subi	r28, 0x01	; 1
	sbc 	YH,0		// 1
    1d3c:	d0 09       	sbc	r29, r0
	breq	skiploop	// 1	2		Loop until zero - 1 false 2 true
    1d3e:	11 f0       	breq	.+4      	; 0x1d44 <skiploop>
	jmp		nloop		// 3			Can't reach nloop with a brne alone
    1d40:	0c 94 63 0e 	jmp	0x1cc6	; 0x1cc6 <nloop>

00001d44 <skiploop>:

skiploop:
	pop		25			// 		2		Restore regs
    1d44:	9f 91       	pop	r25
	pop		24			// 		2
    1d46:	8f 91       	pop	r24
	pop		23			//		2
    1d48:	7f 91       	pop	r23
	pop		22			//		2
    1d4a:	6f 91       	pop	r22
	pop		21			//		2
    1d4c:	5f 91       	pop	r21
	pop		20			//		2
    1d4e:	4f 91       	pop	r20
	pop		19			//		2
    1d50:	3f 91       	pop	r19
	pop		18			//		2
    1d52:	2f 91       	pop	r18
	pop		17			//		2
    1d54:	1f 91       	pop	r17
	pop		16			//		2
    1d56:	0f 91       	pop	r16
	pop		YH			//		2
    1d58:	df 91       	pop	r29
	pop		YL			//		2
    1d5a:	cf 91       	pop	r28
	pop		XH			//		2
    1d5c:	bf 91       	pop	r27
	pop		XL			//		2
    1d5e:	af 91       	pop	r26
	pop		ZH			// 		2
    1d60:	ff 91       	pop	r31
	pop		ZL			//		2
    1d62:	ef 91       	pop	r30

	ret					//		4
    1d64:	08 95       	ret

00001d66 <output_servo_ppm_asm3>:
;*************************************************************************

	.global output_servo_ppm_asm3
	.func   output_servo_ppm_asm3
output_servo_ppm_asm3:
	push	16			// Save regs
    1d66:	0f 93       	push	r16
	push	17
    1d68:	1f 93       	push	r17
	push	18
    1d6a:	2f 93       	push	r18

	//ldi 	16,0x34		// 1			Set loop count to 834h or 2100
	ldi 	16,0xFC		// 1			Set loop count to 8FCh or 2300(us)
    1d6c:	0c ef       	ldi	r16, 0xFC	; 252
	ldi		17,0x08	
    1d6e:	18 e0       	ldi	r17, 0x08	; 8
	clr		0
    1d70:	00 24       	eor	r0, r0

00001d72 <jump_table>:

jump_table:
	cpi		r24,0x00	; 0				
    1d72:	80 30       	cpi	r24, 0x00	; 0
	breq	in1
    1d74:	71 f0       	breq	.+28     	; 0x1d92 <in1>
	cpi		r24,0x01	; 1
    1d76:	81 30       	cpi	r24, 0x01	; 1
	breq	in2
    1d78:	79 f0       	breq	.+30     	; 0x1d98 <in2>
	cpi		r24,0x02	; 2
    1d7a:	82 30       	cpi	r24, 0x02	; 2
	breq	in3
    1d7c:	81 f0       	breq	.+32     	; 0x1d9e <in3>
	cpi		r24,0x03	; 3
    1d7e:	83 30       	cpi	r24, 0x03	; 3
	breq	in4
    1d80:	89 f0       	breq	.+34     	; 0x1da4 <in4>
	cpi		r24,0x04	; 4
    1d82:	84 30       	cpi	r24, 0x04	; 4
	breq	in5
    1d84:	91 f0       	breq	.+36     	; 0x1daa <in5>
	cpi		r24,0x05	; 5
    1d86:	85 30       	cpi	r24, 0x05	; 5
	breq	in6
    1d88:	99 f0       	breq	.+38     	; 0x1db0 <in6>
	cpi		r24,0x06	; 6
    1d8a:	86 30       	cpi	r24, 0x06	; 6
	breq	in7
    1d8c:	a1 f0       	breq	.+40     	; 0x1db6 <in7>
	cpi		r24,0x07	; 7
    1d8e:	87 30       	cpi	r24, 0x07	; 7
	breq	in8
    1d90:	a9 f0       	breq	.+42     	; 0x1dbc <in8>

00001d92 <in1>:

in1:sbi 	M1			// Set output high
    1d92:	46 9a       	sbi	0x08, 6	; 8
	jmp		loopin
    1d94:	0c 94 e1 0e 	jmp	0x1dc2	; 0x1dc2 <loopin>

00001d98 <in2>:
in2:sbi 	M2
    1d98:	44 9a       	sbi	0x08, 4	; 8
	jmp		loopin
    1d9a:	0c 94 e1 0e 	jmp	0x1dc2	; 0x1dc2 <loopin>

00001d9e <in3>:
in3:sbi 	M3	
    1d9e:	42 9a       	sbi	0x08, 2	; 8
	jmp		loopin
    1da0:	0c 94 e1 0e 	jmp	0x1dc2	; 0x1dc2 <loopin>

00001da4 <in4>:
in4:sbi 	M4
    1da4:	43 9a       	sbi	0x08, 3	; 8
	jmp		loopin
    1da6:	0c 94 e1 0e 	jmp	0x1dc2	; 0x1dc2 <loopin>

00001daa <in5>:
in5:sbi 	M5
    1daa:	14 9a       	sbi	0x02, 4	; 2
	jmp		loopin
    1dac:	0c 94 e1 0e 	jmp	0x1dc2	; 0x1dc2 <loopin>

00001db0 <in6>:
in6:sbi 	M6
    1db0:	15 9a       	sbi	0x02, 5	; 2
	jmp		loopin
    1db2:	0c 94 e1 0e 	jmp	0x1dc2	; 0x1dc2 <loopin>

00001db6 <in7>:
in7:sbi 	M7
    1db6:	45 9a       	sbi	0x08, 5	; 8
	jmp		loopin
    1db8:	0c 94 e1 0e 	jmp	0x1dc2	; 0x1dc2 <loopin>

00001dbc <in8>:
in8:sbi 	M8
    1dbc:	47 9a       	sbi	0x08, 7	; 8
	jmp		loopin
    1dbe:	0c 94 e1 0e 	jmp	0x1dc2	; 0x1dc2 <loopin>

00001dc2 <loopin>:

// Loop - 20 cycles = 1us
loopin:
						// <---------	Left column is skip execution path
	rjmp .+0			// 2 	<----	Right column is pulse end execution path
    1dc2:	00 c0       	rjmp	.+0      	; 0x1dc4 <loopin+0x2>
	rjmp .+0			// 2
    1dc4:	00 c0       	rjmp	.+0      	; 0x1dc6 <loopin+0x4>
	rjmp .+0			// 2
    1dc6:	00 c0       	rjmp	.+0      	; 0x1dc8 <loopin+0x6>
	rjmp .+0			// 2
    1dc8:	00 c0       	rjmp	.+0      	; 0x1dca <loopin+0x8>
	rjmp .+0			// 2
    1dca:	00 c0       	rjmp	.+0      	; 0x1dcc <loopin+0xa>
	rjmp .+0			// 2
    1dcc:	00 c0       	rjmp	.+0      	; 0x1dce <loopin+0xc>

	subi	r22,1		// 1 			Time servo pulse
    1dce:	61 50       	subi	r22, 0x01	; 1
	sbc 	r23,0		// 1
    1dd0:	70 09       	sbc	r23, r0
	brne	loopout		// 2	1
    1dd2:	19 f4       	brne	.+6      	; 0x1dda <loopout>

// Clear outputs if done
	ldi		r18,0x00	 // 1
    1dd4:	20 e0       	ldi	r18, 0x00	; 0
	out 	SERVO_OUT_KK20,r18// 1			Boom.
    1dd6:	28 b9       	out	0x08, r18	; 8
	out 	SERVO_OUT_KK21,r18// 1			KK2.1 has a couple of outputs on Port A also.
    1dd8:	22 b9       	out	0x02, r18	; 2

00001dda <loopout>:

// Exit
loopout:
	subi 	16,1		// 1			+4 cycles = total 20 cycles
    1dda:	01 50       	subi	r16, 0x01	; 1
	sbc 	17,0		// 1
    1ddc:	10 09       	sbc	r17, r0
	brne	loopin		// 2	1		Loop until zero
    1dde:	89 f7       	brne	.-30     	; 0x1dc2 <loopin>

	pop		18
    1de0:	2f 91       	pop	r18
	pop		17			// Restore regs
    1de2:	1f 91       	pop	r17
	pop		16
    1de4:	0f 91       	pop	r16
	ret	
    1de6:	08 95       	ret

00001de8 <pwm_delay>:
;*************************************************************************	
; void pwm_delay(void) 50us output spacing delay (8 cycle loop - 400ns)
;*************************************************************************

pwm_delay:				// 4 to call
	push	16			// 1
    1de8:	0f 93       	push	r16
	ldi 	16,0x65		// 1
    1dea:	05 e6       	ldi	r16, 0x65	; 101

00001dec <pwm_loop>:

pwm_loop:
	rjmp .+0			// 2
    1dec:	00 c0       	rjmp	.+0      	; 0x1dee <pwm_loop+0x2>
	rjmp .+0			// 2
    1dee:	00 c0       	rjmp	.+0      	; 0x1df0 <pwm_loop+0x4>
	rjmp .+0			// 2
    1df0:	00 c0       	rjmp	.+0      	; 0x1df2 <pwm_loop+0x6>
	subi	r16,1		// 1
    1df2:	01 50       	subi	r16, 0x01	; 1
	brne	pwm_loop	// 2  1
    1df4:	d9 f7       	brne	.-10     	; 0x1dec <pwm_loop>

00001df6 <pwm_exit>:

pwm_exit:
	pop		16			//    1
    1df6:	0f 91       	pop	r16
	ret					//    4 to return
    1df8:	08 95       	ret

00001dfa <pad_100_delay>:
; pad_100_delay 98 cycle padding delay
; Takes 4 to call, so we need 94 cycles burnt here
;*************************************************************************

pad_100_delay:
	push	16			// 		2		Save regs
    1dfa:	0f 93       	push	r16
	ldi 	16,0x09		// 		1		Set loop count to 09h or 9
    1dfc:	09 e0       	ldi	r16, 0x09	; 9

00001dfe <pad_100>:

pad_100:				//				9 cycles, 8 on last
	rjmp .+0			// 2
    1dfe:	00 c0       	rjmp	.+0      	; 0x1e00 <pad_100+0x2>
	rjmp .+0			// 2			8 x 9cyc + 8 = 80
    1e00:	00 c0       	rjmp	.+0      	; 0x1e02 <pad_100+0x4>
	rjmp .+0			// 2
    1e02:	00 c0       	rjmp	.+0      	; 0x1e04 <pad_100+0x6>

	subi 	16,1		// 1
    1e04:	01 50       	subi	r16, 0x01	; 1
	brne	pad_100		// 2	1		Loop until zero	
    1e06:	d9 f7       	brne	.-10     	; 0x1dfe <pad_100>

	nop					// 		1		Trim to precisely the right value
    1e08:	00 00       	nop
	rjmp .+0			// 		2
    1e0a:	00 c0       	rjmp	.+0      	; 0x1e0c <pad_100+0xe>
	rjmp .+0			// 		2
    1e0c:	00 c0       	rjmp	.+0      	; 0x1e0e <pad_100+0x10>

	pop		16			// 		2		Restore regs
    1e0e:	0f 91       	pop	r16
	ret					// 		4 (94 cycles)
    1e10:	08 95       	ret

00001e12 <us_delay>:
; void us_delay(void) 1us delay for ninja skills
; Takes 4 to call, 4 to return, so we need 12 cycles burnt here
;*************************************************************************

us_delay:
	rjmp .+0			// 2
    1e12:	00 c0       	rjmp	.+0      	; 0x1e14 <us_delay+0x2>
	rjmp .+0			// 2
    1e14:	00 c0       	rjmp	.+0      	; 0x1e16 <us_delay+0x4>
	rjmp .+0			// 2
    1e16:	00 c0       	rjmp	.+0      	; 0x1e18 <us_delay+0x6>
	rjmp .+0			// 2
    1e18:	00 c0       	rjmp	.+0      	; 0x1e1a <us_delay+0x8>
	ret					// 4 (16 cycles)
    1e1a:	08 95       	ret

00001e1c <shuffle_8>:
;*************************************************************************	
; Space-saving macro-ish suroutines
;*************************************************************************

shuffle_8: // (10 cycles)
	lsr		XH			// 1 Rotate right into carry
    1e1c:	b6 95       	lsr	r27
	ror		XL			// 1 Rotate right with carry from MSB
    1e1e:	a7 95       	ror	r26
	lsr		XH			// 1
    1e20:	b6 95       	lsr	r27
	ror		XL			// 1
    1e22:	a7 95       	ror	r26
	lsr		XH			// 1
    1e24:	b6 95       	lsr	r27
	ror		XL			// 1
    1e26:	a7 95       	ror	r26
	ret					// 4
    1e28:	08 95       	ret

00001e2a <DelayHigh>:
; 10 and 150 cycles at 1us intervals per value in r26
; 
;*************************************************************************

DelayHigh:				// (0)	(1)	(2+) each extra is +20
	ldi		YL,0x07		// 1	1	1
    1e2a:	c7 e0       	ldi	r28, 0x07	; 7
	andi	r25,0x07	
    1e2c:	97 70       	andi	r25, 0x07	; 7
	eor		YL,r25		// 1 	1	1
    1e2e:	c9 27       	eor	r28, r25
	breq	LoopHighOut1// 2	1	1
    1e30:	31 f0       	breq	.+12     	; 0x1e3e <LoopHighOut1>

00001e32 <LoopHigh>:
LoopHigh:
	call    us_delay	// 		16	16
    1e32:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <us_delay>
	dec 	YL			// 		1	1
    1e36:	ca 95       	dec	r28
	breq	LoopHighOut2// 		2	1/2
    1e38:	09 f0       	breq	.+2      	; 0x1e3c <LoopHighOut2>
	rjmp	LoopHigh	// 			2
    1e3a:	fb cf       	rjmp	.-10     	; 0x1e32 <LoopHigh>

00001e3c <LoopHighOut2>:
LoopHighOut2:
	rjmp .+0			// 		2	2
    1e3c:	00 c0       	rjmp	.+0      	; 0x1e3e <LoopHighOut1>

00001e3e <LoopHighOut1>:
LoopHighOut1:
	nop					// 1	1	1
    1e3e:	00 00       	nop
    ret					// 4	4	4
    1e40:	08 95       	ret

00001e42 <DelayLow>:
; regardless of the value of r25
;
;*************************************************************************

DelayLow:				// (0)	(1)	(2+) each extra is +20
	mov		YL,r25		// 1	1	
    1e42:	c9 2f       	mov	r28, r25
	andi	YL,0x07	
    1e44:	c7 70       	andi	r28, 0x07	; 7
	breq	LoopLowOut1	// 2	1	1
    1e46:	31 f0       	breq	.+12     	; 0x1e54 <LoopLowOut1>

00001e48 <LoopLow>:
LoopLow:
	call    us_delay	//		16	16
    1e48:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <us_delay>
	dec 	YL			//		1	1
    1e4c:	ca 95       	dec	r28
	breq	LoopLowOut2	//		2	1/2
    1e4e:	09 f0       	breq	.+2      	; 0x1e52 <LoopLowOut2>
	rjmp	LoopLow		//			2
    1e50:	fb cf       	rjmp	.-10     	; 0x1e48 <LoopLow>

00001e52 <LoopLowOut2>:
LoopLowOut2:
	rjmp .+0			// 		2	2
    1e52:	00 c0       	rjmp	.+0      	; 0x1e54 <LoopLowOut1>

00001e54 <LoopLowOut1>:
LoopLowOut1:
    ret					// 4	4	4
    1e54:	08 95       	ret

00001e56 <get_raw_accs>:
//***************************************************************
// Fill accADC with RPY data appropriate to the board orientation
//***************************************************************

void get_raw_accs(void)
{
    1e56:	cf 93       	push	r28
    1e58:	df 93       	push	r29
    1e5a:	cd b7       	in	r28, 0x3d	; 61
    1e5c:	de b7       	in	r29, 0x3e	; 62
    1e5e:	2c 97       	sbiw	r28, 0x0c	; 12
    1e60:	0f b6       	in	r0, 0x3f	; 63
    1e62:	f8 94       	cli
    1e64:	de bf       	out	0x3e, r29	; 62
    1e66:	0f be       	out	0x3f, r0	; 63
    1e68:	cd bf       	out	0x3d, r28	; 61
	// Get data from MPU6050
	uint8_t Accs[6];
	int16_t temp1, temp2;

	// Get the i2c data from the MPU6050
	readI2CbyteArray(MPU60X0_DEFAULT_ADDRESS,MPU60X0_RA_ACCEL_XOUT_H,(uint8_t *)Accs,6);
    1e6a:	26 e0       	ldi	r18, 0x06	; 6
    1e6c:	ae 01       	movw	r20, r28
    1e6e:	4f 5f       	subi	r20, 0xFF	; 255
    1e70:	5f 4f       	sbci	r21, 0xFF	; 255
    1e72:	6b e3       	ldi	r22, 0x3B	; 59
    1e74:	80 ed       	ldi	r24, 0xD0	; 208
    1e76:	0e 94 b4 23 	call	0x4768	; 0x4768 <readI2CbyteArray>

	// Reassemble data into accADC array and down sample to reduce resolution and noise
	// This notation is true to the chip, but not the board orientation

	temp1 = Accs[0] << 8;					// Accel X
    1e7a:	89 81       	ldd	r24, Y+1	; 0x01
    1e7c:	90 e0       	ldi	r25, 0x00	; 0
    1e7e:	98 2f       	mov	r25, r24
    1e80:	88 27       	eor	r24, r24
	temp2 = Accs[1];
    1e82:	2a 81       	ldd	r18, Y+2	; 0x02
	RawADC[ROLL] = (temp1 + temp2) >> 6;
    1e84:	82 0f       	add	r24, r18
    1e86:	91 1d       	adc	r25, r1
    1e88:	36 e0       	ldi	r19, 0x06	; 6
    1e8a:	95 95       	asr	r25
    1e8c:	87 95       	ror	r24
    1e8e:	3a 95       	dec	r19
    1e90:	e1 f7       	brne	.-8      	; 0x1e8a <get_raw_accs+0x34>
    1e92:	98 87       	std	Y+8, r25	; 0x08
    1e94:	8f 83       	std	Y+7, r24	; 0x07

	temp1 = Accs[2] << 8;					// Accel Y
    1e96:	8b 81       	ldd	r24, Y+3	; 0x03
    1e98:	90 e0       	ldi	r25, 0x00	; 0
    1e9a:	98 2f       	mov	r25, r24
    1e9c:	88 27       	eor	r24, r24
	temp2 = Accs[3];
    1e9e:	2c 81       	ldd	r18, Y+4	; 0x04
	RawADC[PITCH] = -((temp1 + temp2) >> 6);
    1ea0:	82 0f       	add	r24, r18
    1ea2:	91 1d       	adc	r25, r1
    1ea4:	56 e0       	ldi	r21, 0x06	; 6
    1ea6:	95 95       	asr	r25
    1ea8:	87 95       	ror	r24
    1eaa:	5a 95       	dec	r21
    1eac:	e1 f7       	brne	.-8      	; 0x1ea6 <get_raw_accs+0x50>
    1eae:	91 95       	neg	r25
    1eb0:	81 95       	neg	r24
    1eb2:	91 09       	sbc	r25, r1
    1eb4:	9a 87       	std	Y+10, r25	; 0x0a
    1eb6:	89 87       	std	Y+9, r24	; 0x09

	temp1 = Accs[4] << 8;					// Accel Z
    1eb8:	8d 81       	ldd	r24, Y+5	; 0x05
    1eba:	90 e0       	ldi	r25, 0x00	; 0
    1ebc:	98 2f       	mov	r25, r24
    1ebe:	88 27       	eor	r24, r24
	temp2 = Accs[5];
    1ec0:	2e 81       	ldd	r18, Y+6	; 0x06
	RawADC[YAW] = (temp1 + temp2) >> 6;
    1ec2:	82 0f       	add	r24, r18
    1ec4:	91 1d       	adc	r25, r1
    1ec6:	76 e0       	ldi	r23, 0x06	; 6
    1ec8:	95 95       	asr	r25
    1eca:	87 95       	ror	r24
    1ecc:	7a 95       	dec	r23
    1ece:	e1 f7       	brne	.-8      	; 0x1ec8 <get_raw_accs+0x72>
    1ed0:	9c 87       	std	Y+12, r25	; 0x0c
    1ed2:	8b 87       	std	Y+11, r24	; 0x0b

	// Reorient the data as per the board orientation	
	for (i=0; i<NUMBEROFAXIS; i++)
	{
		// Rearrange the sensors
		accADC[i] = RawADC[(int8_t)pgm_read_byte(&ACC_RPY_Order[Config.Orientation][i])];
    1ed4:	20 91 3b 06 	lds	r18, 0x063B
    1ed8:	ae e3       	ldi	r26, 0x3E	; 62
    1eda:	b5 e0       	ldi	r27, 0x05	; 5
    1edc:	43 e0       	ldi	r20, 0x03	; 3
    1ede:	24 02       	muls	r18, r20
    1ee0:	90 01       	movw	r18, r0
    1ee2:	11 24       	eor	r1, r1
    1ee4:	80 e0       	ldi	r24, 0x00	; 0
    1ee6:	90 e0       	ldi	r25, 0x00	; 0
    1ee8:	2c 54       	subi	r18, 0x4C	; 76
    1eea:	3f 4f       	sbci	r19, 0xFF	; 255
    1eec:	f9 01       	movw	r30, r18
    1eee:	e8 0f       	add	r30, r24
    1ef0:	f9 1f       	adc	r31, r25
    1ef2:	e4 91       	lpm	r30, Z
    1ef4:	ee 0f       	add	r30, r30
    1ef6:	ff 0b       	sbc	r31, r31
    1ef8:	41 e0       	ldi	r20, 0x01	; 1
    1efa:	50 e0       	ldi	r21, 0x00	; 0
    1efc:	4c 0f       	add	r20, r28
    1efe:	5d 1f       	adc	r21, r29
    1f00:	e4 0f       	add	r30, r20
    1f02:	f5 1f       	adc	r31, r21
    1f04:	46 81       	ldd	r20, Z+6	; 0x06
    1f06:	57 81       	ldd	r21, Z+7	; 0x07
    1f08:	4d 93       	st	X+, r20
    1f0a:	5d 93       	st	X+, r21
    1f0c:	01 96       	adiw	r24, 0x01	; 1
	temp1 = Accs[4] << 8;					// Accel Z
	temp2 = Accs[5];
	RawADC[YAW] = (temp1 + temp2) >> 6;

	// Reorient the data as per the board orientation	
	for (i=0; i<NUMBEROFAXIS; i++)
    1f0e:	83 30       	cpi	r24, 0x03	; 3
    1f10:	91 05       	cpc	r25, r1
    1f12:	61 f7       	brne	.-40     	; 0x1eec <get_raw_accs+0x96>
	{
		// Rearrange the sensors
		accADC[i] = RawADC[(int8_t)pgm_read_byte(&ACC_RPY_Order[Config.Orientation][i])];
	}
}
    1f14:	2c 96       	adiw	r28, 0x0c	; 12
    1f16:	0f b6       	in	r0, 0x3f	; 63
    1f18:	f8 94       	cli
    1f1a:	de bf       	out	0x3e, r29	; 62
    1f1c:	0f be       	out	0x3f, r0	; 63
    1f1e:	cd bf       	out	0x3d, r28	; 61
    1f20:	df 91       	pop	r29
    1f22:	cf 91       	pop	r28
    1f24:	08 95       	ret

00001f26 <ReadAcc>:

int16_t accADC[NUMBEROFAXIS];	// Holds Acc ADC values - always in RPY order
int16_t accVert = 0;			// Holds the level-zeroed Z-acc value. Used for height damping in hover only.

void ReadAcc()
{
    1f26:	1f 93       	push	r17
    1f28:	cf 93       	push	r28
    1f2a:	df 93       	push	r29
	uint8_t i;

	get_raw_accs();				// Updates accADC[] (RPY)
    1f2c:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <get_raw_accs>

	// Use default Config.AccZero for Acc-Z if inverse calibration not done yet
	// Actual zero is held in Config.AccZeroNormZ waiting for inv calibration
	if (!(Config.Main_flags & (1 << inv_cal_done)))
    1f30:	80 91 ba 07 	lds	r24, 0x07BA
    1f34:	80 fd       	sbrc	r24, 0
    1f36:	05 c0       	rjmp	.+10     	; 0x1f42 <ReadAcc+0x1c>
	{
		Config.AccZero[YAW] = 0;
    1f38:	10 92 a2 07 	sts	0x07A2, r1
    1f3c:	10 92 a1 07 	sts	0x07A1, r1
    1f40:	0e c0       	rjmp	.+28     	; 0x1f5e <ReadAcc+0x38>

	// If inverted cal done, Config.AccZeroNormZ and Config.AccZeroDiff have
	// valid values
	else
	{
		Config.AccZero[YAW] = Config.AccZeroNormZ - Config.AccZeroDiff;
    1f42:	80 91 a3 07 	lds	r24, 0x07A3
    1f46:	90 91 a4 07 	lds	r25, 0x07A4
    1f4a:	20 91 a7 07 	lds	r18, 0x07A7
    1f4e:	30 91 a8 07 	lds	r19, 0x07A8
    1f52:	82 1b       	sub	r24, r18
    1f54:	93 0b       	sbc	r25, r19
    1f56:	90 93 a2 07 	sts	0x07A2, r25
    1f5a:	80 93 a1 07 	sts	0x07A1, r24
	{
		// Remove offsets from acc outputs
		accADC[i] -= Config.AccZero[i];

		// Change polarity
		accADC[i] *= (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation][i]);
    1f5e:	20 91 3b 06 	lds	r18, 0x063B
    1f62:	cd e9       	ldi	r28, 0x9D	; 157
    1f64:	d7 e0       	ldi	r29, 0x07	; 7
    1f66:	ae e3       	ldi	r26, 0x3E	; 62
    1f68:	b5 e0       	ldi	r27, 0x05	; 5
    1f6a:	83 e0       	ldi	r24, 0x03	; 3
    1f6c:	28 02       	muls	r18, r24
    1f6e:	90 01       	movw	r18, r0
    1f70:	11 24       	eor	r1, r1
    1f72:	80 e0       	ldi	r24, 0x00	; 0
    1f74:	90 e0       	ldi	r25, 0x00	; 0
    1f76:	2e 55       	subi	r18, 0x5E	; 94
    1f78:	3f 4f       	sbci	r19, 0xFF	; 255
	}

	for (i=0; i < NUMBEROFAXIS; i++)
	{
		// Remove offsets from acc outputs
		accADC[i] -= Config.AccZero[i];
    1f7a:	69 91       	ld	r22, Y+
    1f7c:	79 91       	ld	r23, Y+
    1f7e:	f9 01       	movw	r30, r18
    1f80:	e8 0f       	add	r30, r24
    1f82:	f9 1f       	adc	r31, r25

		// Change polarity
		accADC[i] *= (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation][i]);
    1f84:	14 91       	lpm	r17, Z
	}

	for (i=0; i < NUMBEROFAXIS; i++)
	{
		// Remove offsets from acc outputs
		accADC[i] -= Config.AccZero[i];
    1f86:	4d 91       	ld	r20, X+
    1f88:	5c 91       	ld	r21, X
    1f8a:	11 97       	sbiw	r26, 0x01	; 1
    1f8c:	46 1b       	sub	r20, r22
    1f8e:	57 0b       	sbc	r21, r23

		// Change polarity
		accADC[i] *= (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation][i]);
    1f90:	14 03       	mulsu	r17, r20
    1f92:	b0 01       	movw	r22, r0
    1f94:	15 9f       	mul	r17, r21
    1f96:	70 0d       	add	r23, r0
    1f98:	11 24       	eor	r1, r1
    1f9a:	6d 93       	st	X+, r22
    1f9c:	7d 93       	st	X+, r23
    1f9e:	01 96       	adiw	r24, 0x01	; 1
	else
	{
		Config.AccZero[YAW] = Config.AccZeroNormZ - Config.AccZeroDiff;
	}

	for (i=0; i < NUMBEROFAXIS; i++)
    1fa0:	83 30       	cpi	r24, 0x03	; 3
    1fa2:	91 05       	cpc	r25, r1
    1fa4:	51 f7       	brne	.-44     	; 0x1f7a <ReadAcc+0x54>
	}

	// Recalculate current accVert using filtered acc value
	// Note that AccSmooth[YAW] is already zeroed around 1G so we have to re-add 
	// the zero back here so that Config.AccZeroNormZ subtracts the correct amount
	 accVert = accSmooth[YAW] + (Config.AccZeroNormZ - Config.AccZero[YAW]);
    1fa6:	60 91 a3 07 	lds	r22, 0x07A3
    1faa:	70 91 a4 07 	lds	r23, 0x07A4
    1fae:	80 91 a1 07 	lds	r24, 0x07A1
    1fb2:	90 91 a2 07 	lds	r25, 0x07A2
    1fb6:	68 1b       	sub	r22, r24
    1fb8:	79 0b       	sbc	r23, r25
    1fba:	88 27       	eor	r24, r24
    1fbc:	77 fd       	sbrc	r23, 7
    1fbe:	80 95       	com	r24
    1fc0:	98 2f       	mov	r25, r24
    1fc2:	0e 94 db 45 	call	0x8bb6	; 0x8bb6 <__floatsisf>
    1fc6:	20 91 a3 05 	lds	r18, 0x05A3
    1fca:	30 91 a4 05 	lds	r19, 0x05A4
    1fce:	40 91 a5 05 	lds	r20, 0x05A5
    1fd2:	50 91 a6 05 	lds	r21, 0x05A6
    1fd6:	0e 94 d8 44 	call	0x89b0	; 0x89b0 <__addsf3>
    1fda:	0e 94 a8 45 	call	0x8b50	; 0x8b50 <__fixsfsi>
    1fde:	70 93 0f 05 	sts	0x050F, r23
    1fe2:	60 93 0e 05 	sts	0x050E, r22
}
    1fe6:	df 91       	pop	r29
    1fe8:	cf 91       	pop	r28
    1fea:	1f 91       	pop	r17
    1fec:	08 95       	ret

00001fee <CalibrateAcc>:
//***************************************************************
// Calibration routines
//***************************************************************

void CalibrateAcc(int8_t type)
{
    1fee:	1f 93       	push	r17
    1ff0:	cf 93       	push	r28
    1ff2:	df 93       	push	r29
    1ff4:	00 d0       	rcall	.+0      	; 0x1ff6 <CalibrateAcc+0x8>
    1ff6:	00 d0       	rcall	.+0      	; 0x1ff8 <CalibrateAcc+0xa>
    1ff8:	00 d0       	rcall	.+0      	; 0x1ffa <CalibrateAcc+0xc>
    1ffa:	cd b7       	in	r28, 0x3d	; 61
    1ffc:	de b7       	in	r29, 0x3e	; 62
	uint8_t i;
	int16_t accZero[NUMBEROFAXIS] = {0,0,0};	// Used for calibrating Accs on ground
    1ffe:	1a 82       	std	Y+2, r1	; 0x02
    2000:	19 82       	std	Y+1, r1	; 0x01
    2002:	1c 82       	std	Y+4, r1	; 0x04
    2004:	1b 82       	std	Y+3, r1	; 0x03
    2006:	1e 82       	std	Y+6, r1	; 0x06
    2008:	1d 82       	std	Y+5, r1	; 0x05

	// Calibrate acc
	if (type == NORMAL)
    200a:	81 11       	cpse	r24, r1
    200c:	6f c0       	rjmp	.+222    	; 0x20ec <CalibrateAcc+0xfe>
    200e:	10 e2       	ldi	r17, 0x20	; 32
	{
		// Get average zero value (over 32 readings)
		for (i = 0; i < 32; i++)
		{
			get_raw_accs();						// Updates accADC[] with signals reoriented into (RPY)
    2010:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <get_raw_accs>

			accZero[ROLL] += accADC[ROLL];
    2014:	89 81       	ldd	r24, Y+1	; 0x01
    2016:	9a 81       	ldd	r25, Y+2	; 0x02
    2018:	20 91 3e 05 	lds	r18, 0x053E
    201c:	30 91 3f 05 	lds	r19, 0x053F
    2020:	82 0f       	add	r24, r18
    2022:	93 1f       	adc	r25, r19
    2024:	9a 83       	std	Y+2, r25	; 0x02
    2026:	89 83       	std	Y+1, r24	; 0x01
			accZero[PITCH] += accADC[PITCH];						
    2028:	8b 81       	ldd	r24, Y+3	; 0x03
    202a:	9c 81       	ldd	r25, Y+4	; 0x04
    202c:	20 91 40 05 	lds	r18, 0x0540
    2030:	30 91 41 05 	lds	r19, 0x0541
    2034:	82 0f       	add	r24, r18
    2036:	93 1f       	adc	r25, r19
    2038:	9c 83       	std	Y+4, r25	; 0x04
    203a:	8b 83       	std	Y+3, r24	; 0x03
			accZero[YAW] += accADC[YAW];		
    203c:	8d 81       	ldd	r24, Y+5	; 0x05
    203e:	9e 81       	ldd	r25, Y+6	; 0x06
    2040:	20 91 42 05 	lds	r18, 0x0542
    2044:	30 91 43 05 	lds	r19, 0x0543
    2048:	82 0f       	add	r24, r18
    204a:	93 1f       	adc	r25, r19
    204c:	9e 83       	std	Y+6, r25	; 0x06
    204e:	8d 83       	std	Y+5, r24	; 0x05
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2050:	8f e4       	ldi	r24, 0x4F	; 79
    2052:	93 ec       	ldi	r25, 0xC3	; 195
    2054:	01 97       	sbiw	r24, 0x01	; 1
    2056:	f1 f7       	brne	.-4      	; 0x2054 <CalibrateAcc+0x66>
    2058:	00 c0       	rjmp	.+0      	; 0x205a <CalibrateAcc+0x6c>
    205a:	00 00       	nop
    205c:	11 50       	subi	r17, 0x01	; 1

	// Calibrate acc
	if (type == NORMAL)
	{
		// Get average zero value (over 32 readings)
		for (i = 0; i < 32; i++)
    205e:	c1 f6       	brne	.-80     	; 0x2010 <CalibrateAcc+0x22>
    2060:	fe 01       	movw	r30, r28
    2062:	31 96       	adiw	r30, 0x01	; 1
    2064:	9e 01       	movw	r18, r28
    2066:	29 5f       	subi	r18, 0xF9	; 249
    2068:	3f 4f       	sbci	r19, 0xFF	; 255
		}

		for (i = 0; i < NUMBEROFAXIS; i++)		// For selected axis in RPY order
		{
			// Round and divide by 32
			accZero[i] = ((accZero[i] + 16) >> 5);
    206a:	80 81       	ld	r24, Z
    206c:	91 81       	ldd	r25, Z+1	; 0x01
    206e:	40 96       	adiw	r24, 0x10	; 16
    2070:	45 e0       	ldi	r20, 0x05	; 5
    2072:	95 95       	asr	r25
    2074:	87 95       	ror	r24
    2076:	4a 95       	dec	r20
    2078:	e1 f7       	brne	.-8      	; 0x2072 <CalibrateAcc+0x84>
    207a:	81 93       	st	Z+, r24
    207c:	91 93       	st	Z+, r25
			accZero[YAW] += accADC[YAW];		

			_delay_ms(10);						// Get a better acc average over time
		}

		for (i = 0; i < NUMBEROFAXIS; i++)		// For selected axis in RPY order
    207e:	e2 17       	cp	r30, r18
    2080:	f3 07       	cpc	r31, r19
    2082:	99 f7       	brne	.-26     	; 0x206a <CalibrateAcc+0x7c>
			// Round and divide by 32
			accZero[i] = ((accZero[i] + 16) >> 5);
		}

		// Reset zeros to normal cal
		Config.AccZero[ROLL] = accZero[ROLL]; 
    2084:	89 81       	ldd	r24, Y+1	; 0x01
    2086:	9a 81       	ldd	r25, Y+2	; 0x02
    2088:	90 93 9e 07 	sts	0x079E, r25
    208c:	80 93 9d 07 	sts	0x079D, r24
		Config.AccZero[PITCH] = accZero[PITCH]; 
    2090:	8b 81       	ldd	r24, Y+3	; 0x03
    2092:	9c 81       	ldd	r25, Y+4	; 0x04
    2094:	90 93 a0 07 	sts	0x07A0, r25
    2098:	80 93 9f 07 	sts	0x079F, r24
		Config.AccZeroNormZ = accZero[YAW]; 
			
		// Correct polarity of AccZeroNormZ as per orientation
		Config.AccZeroNormZ *= (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation][YAW]);
    209c:	80 91 3b 06 	lds	r24, 0x063B
    20a0:	99 27       	eor	r25, r25
    20a2:	87 fd       	sbrc	r24, 7
    20a4:	90 95       	com	r25
    20a6:	fc 01       	movw	r30, r24
    20a8:	ee 0f       	add	r30, r30
    20aa:	ff 1f       	adc	r31, r31
    20ac:	e8 0f       	add	r30, r24
    20ae:	f9 1f       	adc	r31, r25
    20b0:	ec 55       	subi	r30, 0x5C	; 92
    20b2:	ff 4f       	sbci	r31, 0xFF	; 255
    20b4:	44 91       	lpm	r20, Z
    20b6:	2d 81       	ldd	r18, Y+5	; 0x05
    20b8:	3e 81       	ldd	r19, Y+6	; 0x06
    20ba:	42 03       	mulsu	r20, r18
    20bc:	c0 01       	movw	r24, r0
    20be:	43 9f       	mul	r20, r19
    20c0:	90 0d       	add	r25, r0
    20c2:	11 24       	eor	r1, r1
    20c4:	90 93 a4 07 	sts	0x07A4, r25
    20c8:	80 93 a3 07 	sts	0x07A3, r24
			
		// Flag that normal cal done
		Config.Main_flags |= (1 << normal_cal_done);
    20cc:	80 91 ba 07 	lds	r24, 0x07BA
    20d0:	82 60       	ori	r24, 0x02	; 2
    20d2:	80 93 ba 07 	sts	0x07BA, r24
	
		// Save new calibration and flash LED for confirmation
		Save_Config_to_EEPROM();
    20d6:	0e 94 9c 16 	call	0x2d38	; 0x2d38 <Save_Config_to_EEPROM>
		LED1 = 1;
    20da:	2b 9a       	sbi	0x05, 3	; 5
    20dc:	9f e7       	ldi	r25, 0x7F	; 127
    20de:	24 e8       	ldi	r18, 0x84	; 132
    20e0:	4e e1       	ldi	r20, 0x1E	; 30
    20e2:	91 50       	subi	r25, 0x01	; 1
    20e4:	20 40       	sbci	r18, 0x00	; 0
    20e6:	40 40       	sbci	r20, 0x00	; 0
    20e8:	e1 f7       	brne	.-8      	; 0x20e2 <CalibrateAcc+0xf4>
    20ea:	67 c0       	rjmp	.+206    	; 0x21ba <CalibrateAcc+0x1cc>

	else
	// Calibrate inverted acc
	{
		// Only update the inverted cal value if preceded by a normal calibration
		if (Config.Main_flags & (1 << normal_cal_done))
    20ec:	80 91 ba 07 	lds	r24, 0x07BA
    20f0:	81 ff       	sbrs	r24, 1
    20f2:	66 c0       	rjmp	.+204    	; 0x21c0 <CalibrateAcc+0x1d2>
		{
			// Get average zero value (over 32 readings)
			Config.AccZeroInvZ = 0;
    20f4:	10 92 a6 07 	sts	0x07A6, r1
    20f8:	10 92 a5 07 	sts	0x07A5, r1
    20fc:	10 e2       	ldi	r17, 0x20	; 32

			for (i = 0; i < 32; i++)
			{
				get_raw_accs();					// Updates gyroADC[] with reoriented vales
    20fe:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <get_raw_accs>
				Config.AccZeroInvZ += accADC[YAW];		
    2102:	80 91 a5 07 	lds	r24, 0x07A5
    2106:	90 91 a6 07 	lds	r25, 0x07A6
    210a:	20 91 42 05 	lds	r18, 0x0542
    210e:	30 91 43 05 	lds	r19, 0x0543
    2112:	82 0f       	add	r24, r18
    2114:	93 1f       	adc	r25, r19
    2116:	90 93 a6 07 	sts	0x07A6, r25
    211a:	80 93 a5 07 	sts	0x07A5, r24
    211e:	8f e4       	ldi	r24, 0x4F	; 79
    2120:	93 ec       	ldi	r25, 0xC3	; 195
    2122:	01 97       	sbiw	r24, 0x01	; 1
    2124:	f1 f7       	brne	.-4      	; 0x2122 <CalibrateAcc+0x134>
    2126:	00 c0       	rjmp	.+0      	; 0x2128 <CalibrateAcc+0x13a>
    2128:	00 00       	nop
    212a:	11 50       	subi	r17, 0x01	; 1
		if (Config.Main_flags & (1 << normal_cal_done))
		{
			// Get average zero value (over 32 readings)
			Config.AccZeroInvZ = 0;

			for (i = 0; i < 32; i++)
    212c:	41 f7       	brne	.-48     	; 0x20fe <CalibrateAcc+0x110>

			// Round and divide by 32
			Config.AccZeroInvZ = ((Config.AccZeroInvZ + 16) >> 5);		// Inverted zero point
			
			// Correct polarity of AccZeroInvZ as per orientation
			Config.AccZeroInvZ *= (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation][YAW]);
    212e:	80 91 3b 06 	lds	r24, 0x063B
    2132:	99 27       	eor	r25, r25
    2134:	87 fd       	sbrc	r24, 7
    2136:	90 95       	com	r25
    2138:	fc 01       	movw	r30, r24
    213a:	ee 0f       	add	r30, r30
    213c:	ff 1f       	adc	r31, r31
    213e:	e8 0f       	add	r30, r24
    2140:	f9 1f       	adc	r31, r25
    2142:	ec 55       	subi	r30, 0x5C	; 92
    2144:	ff 4f       	sbci	r31, 0xFF	; 255
    2146:	44 91       	lpm	r20, Z
				Config.AccZeroInvZ += accADC[YAW];		
				_delay_ms(10);					// Get a better acc average over time
			}

			// Round and divide by 32
			Config.AccZeroInvZ = ((Config.AccZeroInvZ + 16) >> 5);		// Inverted zero point
    2148:	20 91 a5 07 	lds	r18, 0x07A5
    214c:	30 91 a6 07 	lds	r19, 0x07A6
    2150:	20 5f       	subi	r18, 0xF0	; 240
    2152:	3f 4f       	sbci	r19, 0xFF	; 255
    2154:	b5 e0       	ldi	r27, 0x05	; 5
    2156:	35 95       	asr	r19
    2158:	27 95       	ror	r18
    215a:	ba 95       	dec	r27
    215c:	e1 f7       	brne	.-8      	; 0x2156 <CalibrateAcc+0x168>
			
			// Correct polarity of AccZeroInvZ as per orientation
			Config.AccZeroInvZ *= (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation][YAW]);
    215e:	42 03       	mulsu	r20, r18
    2160:	c0 01       	movw	r24, r0
    2162:	43 9f       	mul	r20, r19
    2164:	90 0d       	add	r25, r0
    2166:	11 24       	eor	r1, r1
    2168:	90 93 a6 07 	sts	0x07A6, r25
    216c:	80 93 a5 07 	sts	0x07A5, r24

			// Test if board is actually inverted relative to board orientation.
			if (Config.AccZeroInvZ < 0)
    2170:	97 ff       	sbrs	r25, 7
    2172:	26 c0       	rjmp	.+76     	; 0x21c0 <CalibrateAcc+0x1d2>
			{

				// Reset zero to halfway between min and max Z
				Config.AccZeroDiff = ((Config.AccZeroNormZ - Config.AccZeroInvZ) >> 1);
    2174:	20 91 a3 07 	lds	r18, 0x07A3
    2178:	30 91 a4 07 	lds	r19, 0x07A4
    217c:	a9 01       	movw	r20, r18
    217e:	48 1b       	sub	r20, r24
    2180:	59 0b       	sbc	r21, r25
    2182:	ca 01       	movw	r24, r20
    2184:	95 95       	asr	r25
    2186:	87 95       	ror	r24
    2188:	90 93 a8 07 	sts	0x07A8, r25
    218c:	80 93 a7 07 	sts	0x07A7, r24
				Config.AccZero[YAW] = Config.AccZeroNormZ - Config.AccZeroDiff; // Config.AccZero[YAW] is now valid to use
    2190:	28 1b       	sub	r18, r24
    2192:	39 0b       	sbc	r19, r25
    2194:	30 93 a2 07 	sts	0x07A2, r19
    2198:	20 93 a1 07 	sts	0x07A1, r18

				// Flag that inverted cal done
				Config.Main_flags |= (1 << inv_cal_done);
    219c:	80 91 ba 07 	lds	r24, 0x07BA
    21a0:	81 60       	ori	r24, 0x01	; 1
    21a2:	80 93 ba 07 	sts	0x07BA, r24

				// Save new calibration and flash LED for confirmation
				Save_Config_to_EEPROM();
    21a6:	0e 94 9c 16 	call	0x2d38	; 0x2d38 <Save_Config_to_EEPROM>
				LED1 = 1;
    21aa:	2b 9a       	sbi	0x05, 3	; 5
    21ac:	5f e7       	ldi	r21, 0x7F	; 127
    21ae:	84 e8       	ldi	r24, 0x84	; 132
    21b0:	9e e1       	ldi	r25, 0x1E	; 30
    21b2:	51 50       	subi	r21, 0x01	; 1
    21b4:	80 40       	sbci	r24, 0x00	; 0
    21b6:	90 40       	sbci	r25, 0x00	; 0
    21b8:	e1 f7       	brne	.-8      	; 0x21b2 <CalibrateAcc+0x1c4>
    21ba:	00 c0       	rjmp	.+0      	; 0x21bc <CalibrateAcc+0x1ce>
    21bc:	00 00       	nop
				_delay_ms(500);
				LED1 = 0;
    21be:	2b 98       	cbi	0x05, 3	; 5
			}
		}
	}
}
    21c0:	26 96       	adiw	r28, 0x06	; 6
    21c2:	0f b6       	in	r0, 0x3f	; 63
    21c4:	f8 94       	cli
    21c6:	de bf       	out	0x3e, r29	; 62
    21c8:	0f be       	out	0x3f, r0	; 63
    21ca:	cd bf       	out	0x3d, r28	; 61
    21cc:	df 91       	pop	r29
    21ce:	cf 91       	pop	r28
    21d0:	1f 91       	pop	r17
    21d2:	08 95       	ret

000021d4 <init_i2c_accs>:
// Set up the MPU6050 (Acc)
//***************************************************************

void init_i2c_accs(void)
{
	writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_PWR_MGMT_1, 0x01); // Gyro X clock, awake
    21d4:	41 e0       	ldi	r20, 0x01	; 1
    21d6:	6b e6       	ldi	r22, 0x6B	; 107
    21d8:	80 ed       	ldi	r24, 0xD0	; 208
    21da:	0e 94 9d 23 	call	0x473a	; 0x473a <writeI2Cbyte>
	writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_ACCEL_CONFIG, ACCFS4G); // 4G full scale
    21de:	48 e0       	ldi	r20, 0x08	; 8
    21e0:	6c e1       	ldi	r22, 0x1C	; 28
    21e2:	80 ed       	ldi	r24, 0xD0	; 208
    21e4:	0c 94 9d 23 	jmp	0x473a	; 0x473a <writeI2Cbyte>

000021e8 <Init_ADC>:
//***********************************************************

void Init_ADC(void)
{
	// Digital Input Disable Register - ADC0~7 Digital Input Disable
	DIDR0 	= (1<<ADC0D)|(1<<ADC1D)|(1<<ADC2D)|(1<<ADC3D)|(1<<ADC4D)|(1<<ADC5D)|(1<<ADC6D)|(1<<ADC7D);
    21e8:	8f ef       	ldi	r24, 0xFF	; 255
    21ea:	80 93 7e 00 	sts	0x007E, r24
	
	// ADC Control and Status Register B - ADTS2:0
	ADCSRB 	= 0x00;
    21ee:	10 92 7b 00 	sts	0x007B, r1
    21f2:	08 95       	ret

000021f4 <read_adc>:
}

void read_adc(uint8_t channel)
{
	ADMUX	= channel;
    21f4:	80 93 7c 00 	sts	0x007C, r24
	
	// ADEN, ADSC, ADPS1,2
	ADCSRA 	= (1<<ADEN)|(1<<ADSC)|(1<<ADPS1)|(1<<ADPS2);
    21f8:	86 ec       	ldi	r24, 0xC6	; 198
    21fa:	80 93 7a 00 	sts	0x007A, r24

	// Wait to complete. Result is in ADCW
	while (ADCSRA & (1 << ADSC));
    21fe:	80 91 7a 00 	lds	r24, 0x007A
    2202:	86 fd       	sbrc	r24, 6
    2204:	fc cf       	rjmp	.-8      	; 0x21fe <read_adc+0xa>
}
    2206:	08 95       	ret

00002208 <Display_balance>:
//************************************************************
// Code
//************************************************************

void Display_balance(void)
{
    2208:	cf 92       	push	r12
    220a:	df 92       	push	r13
    220c:	ef 92       	push	r14
    220e:	0f 93       	push	r16
    2210:	cf 93       	push	r28
    2212:	df 93       	push	r29

	#ifdef KK2Mini
	st7565_set_brightness(28);
	#endif

	while(BUTTON1 != 0)
    2214:	1f 9b       	sbis	0x03, 7	; 3
    2216:	85 c0       	rjmp	.+266    	; 0x2322 <Display_balance+0x11a>
	{
		// Read accs
		ReadAcc();
    2218:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <ReadAcc>

		// Refresh accSmooth values
		// Fake the IMU period as accSmooth doesn't need that
		simple_imu_update(0);
    221c:	60 e0       	ldi	r22, 0x00	; 0
    221e:	70 e0       	ldi	r23, 0x00	; 0
    2220:	cb 01       	movw	r24, r22
    2222:	0e 94 61 26 	call	0x4cc2	; 0x4cc2 <simple_imu_update>
		
		// Convert acc signal to a pixel position
		x_pos = accSmooth[PITCH] + 32;
    2226:	20 e0       	ldi	r18, 0x00	; 0
    2228:	30 e0       	ldi	r19, 0x00	; 0
    222a:	40 e0       	ldi	r20, 0x00	; 0
    222c:	52 e4       	ldi	r21, 0x42	; 66
    222e:	60 91 9f 05 	lds	r22, 0x059F
    2232:	70 91 a0 05 	lds	r23, 0x05A0
    2236:	80 91 a1 05 	lds	r24, 0x05A1
    223a:	90 91 a2 05 	lds	r25, 0x05A2
    223e:	0e 94 d8 44 	call	0x89b0	; 0x89b0 <__addsf3>
    2242:	0e 94 a8 45 	call	0x8b50	; 0x8b50 <__fixsfsi>
    2246:	eb 01       	movw	r28, r22
		y_pos = accSmooth[ROLL] + 64;
    2248:	20 e0       	ldi	r18, 0x00	; 0
    224a:	30 e0       	ldi	r19, 0x00	; 0
    224c:	40 e8       	ldi	r20, 0x80	; 128
    224e:	52 e4       	ldi	r21, 0x42	; 66
    2250:	60 91 9b 05 	lds	r22, 0x059B
    2254:	70 91 9c 05 	lds	r23, 0x059C
    2258:	80 91 9d 05 	lds	r24, 0x059D
    225c:	90 91 9e 05 	lds	r25, 0x059E
    2260:	0e 94 d8 44 	call	0x89b0	; 0x89b0 <__addsf3>
    2264:	0e 94 a8 45 	call	0x8b50	; 0x8b50 <__fixsfsi>
    2268:	6b 01       	movw	r12, r22

		if (x_pos < 0) x_pos = 0;
    226a:	d7 fd       	sbrc	r29, 7
    226c:	06 c0       	rjmp	.+12     	; 0x227a <Display_balance+0x72>
		if (x_pos > 64) x_pos = 64;
    226e:	c1 34       	cpi	r28, 0x41	; 65
    2270:	d1 05       	cpc	r29, r1
    2272:	2c f0       	brlt	.+10     	; 0x227e <Display_balance+0x76>
    2274:	c0 e4       	ldi	r28, 0x40	; 64
    2276:	d0 e0       	ldi	r29, 0x00	; 0
    2278:	02 c0       	rjmp	.+4      	; 0x227e <Display_balance+0x76>
		
		// Convert acc signal to a pixel position
		x_pos = accSmooth[PITCH] + 32;
		y_pos = accSmooth[ROLL] + 64;

		if (x_pos < 0) x_pos = 0;
    227a:	c0 e0       	ldi	r28, 0x00	; 0
    227c:	d0 e0       	ldi	r29, 0x00	; 0
		if (x_pos > 64) x_pos = 64;
		if (y_pos < 0) y_pos = 0;
    227e:	d7 fc       	sbrc	r13, 7
    2280:	08 c0       	rjmp	.+16     	; 0x2292 <Display_balance+0x8a>
		if (y_pos > 128) y_pos = 128;
    2282:	21 e8       	ldi	r18, 0x81	; 129
    2284:	c2 16       	cp	r12, r18
    2286:	d1 04       	cpc	r13, r1
    2288:	34 f0       	brlt	.+12     	; 0x2296 <Display_balance+0x8e>
    228a:	80 e8       	ldi	r24, 0x80	; 128
    228c:	c8 2e       	mov	r12, r24
    228e:	d1 2c       	mov	r13, r1
    2290:	02 c0       	rjmp	.+4      	; 0x2296 <Display_balance+0x8e>
		x_pos = accSmooth[PITCH] + 32;
		y_pos = accSmooth[ROLL] + 64;

		if (x_pos < 0) x_pos = 0;
		if (x_pos > 64) x_pos = 64;
		if (y_pos < 0) y_pos = 0;
    2292:	c1 2c       	mov	r12, r1
    2294:	d1 2c       	mov	r13, r1
		if (y_pos > 128) y_pos = 128;

		// Print bottom markers
		LCD_Display_Text(12, (const unsigned char*)Wingdings, 2, 55); 	// Left
    2296:	27 e3       	ldi	r18, 0x37	; 55
    2298:	30 e0       	ldi	r19, 0x00	; 0
    229a:	42 e0       	ldi	r20, 0x02	; 2
    229c:	50 e0       	ldi	r21, 0x00	; 0
    229e:	6f ed       	ldi	r22, 0xDF	; 223
    22a0:	70 e0       	ldi	r23, 0x00	; 0
    22a2:	8c e0       	ldi	r24, 0x0C	; 12
    22a4:	90 e0       	ldi	r25, 0x00	; 0
    22a6:	0e 94 3f 21 	call	0x427e	; 0x427e <LCD_Display_Text>

		// Draw balance meter
		drawrect(buffer, 0, 0, 128, 64, 1);		// Border
    22aa:	ee 24       	eor	r14, r14
    22ac:	e3 94       	inc	r14
    22ae:	00 e4       	ldi	r16, 0x40	; 64
    22b0:	20 e8       	ldi	r18, 0x80	; 128
    22b2:	40 e0       	ldi	r20, 0x00	; 0
    22b4:	60 e0       	ldi	r22, 0x00	; 0
    22b6:	81 e0       	ldi	r24, 0x01	; 1
    22b8:	91 e0       	ldi	r25, 0x01	; 1
    22ba:	0e 94 5c 20 	call	0x40b8	; 0x40b8 <drawrect>
		drawrect(buffer, 54, 22, 21, 21, 1);	// Target
    22be:	05 e1       	ldi	r16, 0x15	; 21
    22c0:	25 e1       	ldi	r18, 0x15	; 21
    22c2:	46 e1       	ldi	r20, 0x16	; 22
    22c4:	66 e3       	ldi	r22, 0x36	; 54
    22c6:	81 e0       	ldi	r24, 0x01	; 1
    22c8:	91 e0       	ldi	r25, 0x01	; 1
    22ca:	0e 94 5c 20 	call	0x40b8	; 0x40b8 <drawrect>
		drawline(buffer, 64, 8, 64, 56, 1); 	// Crosshairs
    22ce:	08 e3       	ldi	r16, 0x38	; 56
    22d0:	20 e4       	ldi	r18, 0x40	; 64
    22d2:	48 e0       	ldi	r20, 0x08	; 8
    22d4:	60 e4       	ldi	r22, 0x40	; 64
    22d6:	81 e0       	ldi	r24, 0x01	; 1
    22d8:	91 e0       	ldi	r25, 0x01	; 1
    22da:	0e 94 be 1f 	call	0x3f7c	; 0x3f7c <drawline>
		drawline(buffer, 32, 32, 96, 32, 1);
    22de:	00 e2       	ldi	r16, 0x20	; 32
    22e0:	20 e6       	ldi	r18, 0x60	; 96
    22e2:	40 e2       	ldi	r20, 0x20	; 32
    22e4:	60 e2       	ldi	r22, 0x20	; 32
    22e6:	81 e0       	ldi	r24, 0x01	; 1
    22e8:	91 e0       	ldi	r25, 0x01	; 1
    22ea:	0e 94 be 1f 	call	0x3f7c	; 0x3f7c <drawline>
		fillcircle(buffer, y_pos, x_pos, 8, 1);	// Bubble
    22ee:	01 e0       	ldi	r16, 0x01	; 1
    22f0:	28 e0       	ldi	r18, 0x08	; 8
    22f2:	4c 2f       	mov	r20, r28
    22f4:	6c 2d       	mov	r22, r12
    22f6:	81 e0       	ldi	r24, 0x01	; 1
    22f8:	91 e0       	ldi	r25, 0x01	; 1
    22fa:	0e 94 ae 20 	call	0x415c	; 0x415c <fillcircle>

		// Refresh GLCD
		write_buffer(buffer);
    22fe:	81 e0       	ldi	r24, 0x01	; 1
    2300:	91 e0       	ldi	r25, 0x01	; 1
    2302:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <write_buffer>
		clear_buffer(buffer);
    2306:	81 e0       	ldi	r24, 0x01	; 1
    2308:	91 e0       	ldi	r25, 0x01	; 1
    230a:	0e 94 5e 1f 	call	0x3ebc	; 0x3ebc <clear_buffer>
    230e:	8f e7       	ldi	r24, 0x7F	; 127
    2310:	98 e3       	ldi	r25, 0x38	; 56
    2312:	21 e0       	ldi	r18, 0x01	; 1
    2314:	81 50       	subi	r24, 0x01	; 1
    2316:	90 40       	sbci	r25, 0x00	; 0
    2318:	20 40       	sbci	r18, 0x00	; 0
    231a:	e1 f7       	brne	.-8      	; 0x2314 <Display_balance+0x10c>
    231c:	00 c0       	rjmp	.+0      	; 0x231e <Display_balance+0x116>
    231e:	00 00       	nop
    2320:	79 cf       	rjmp	.-270    	; 0x2214 <Display_balance+0xc>
	#ifdef KK2Mini
	clear_buffer(buffer);
	write_buffer(buffer);
	st7565_set_brightness(Config.Contrast);
	#endif
}
    2322:	df 91       	pop	r29
    2324:	cf 91       	pop	r28
    2326:	0f 91       	pop	r16
    2328:	ef 90       	pop	r14
    232a:	df 90       	pop	r13
    232c:	cf 90       	pop	r12
    232e:	08 95       	ret

00002330 <Display_rcinput>:
//************************************************************

void Display_rcinput(void)
{
	// Re-enable interrupts. High seed mode may have left them off
	init_int();
    2330:	0e 94 7c 2d 	call	0x5af8	; 0x5af8 <init_int>
	
	while(BUTTON1 != 0)
    2334:	1f 9b       	sbis	0x03, 7	; 3
    2336:	fa c0       	rjmp	.+500    	; 0x252c <Display_rcinput+0x1fc>
	{
		if (BUTTON4 == 0)
    2338:	1c 9b       	sbis	0x03, 4	; 3
		{
			CenterSticks();
    233a:	0e 94 83 42 	call	0x8506	; 0x8506 <CenterSticks>
		}

		RxGetChannels();
    233e:	0e 94 ee 41 	call	0x83dc	; 0x83dc <RxGetChannels>

		LCD_Display_Text(114,(const unsigned char*)Verdana8,0,0); // Throttle
    2342:	20 e0       	ldi	r18, 0x00	; 0
    2344:	30 e0       	ldi	r19, 0x00	; 0
    2346:	40 e0       	ldi	r20, 0x00	; 0
    2348:	50 e0       	ldi	r21, 0x00	; 0
    234a:	67 ef       	ldi	r22, 0xF7	; 247
    234c:	79 e0       	ldi	r23, 0x09	; 9
    234e:	82 e7       	ldi	r24, 0x72	; 114
    2350:	90 e0       	ldi	r25, 0x00	; 0
    2352:	0e 94 3f 21 	call	0x427e	; 0x427e <LCD_Display_Text>
		LCD_Display_Text(32,(const unsigned char*)Verdana8,0,10);
    2356:	2a e0       	ldi	r18, 0x0A	; 10
    2358:	30 e0       	ldi	r19, 0x00	; 0
    235a:	40 e0       	ldi	r20, 0x00	; 0
    235c:	50 e0       	ldi	r21, 0x00	; 0
    235e:	67 ef       	ldi	r22, 0xF7	; 247
    2360:	79 e0       	ldi	r23, 0x09	; 9
    2362:	80 e2       	ldi	r24, 0x20	; 32
    2364:	90 e0       	ldi	r25, 0x00	; 0
    2366:	0e 94 3f 21 	call	0x427e	; 0x427e <LCD_Display_Text>
		LCD_Display_Text(115,(const unsigned char*)Verdana8,0,20);
    236a:	24 e1       	ldi	r18, 0x14	; 20
    236c:	30 e0       	ldi	r19, 0x00	; 0
    236e:	40 e0       	ldi	r20, 0x00	; 0
    2370:	50 e0       	ldi	r21, 0x00	; 0
    2372:	67 ef       	ldi	r22, 0xF7	; 247
    2374:	79 e0       	ldi	r23, 0x09	; 9
    2376:	83 e7       	ldi	r24, 0x73	; 115
    2378:	90 e0       	ldi	r25, 0x00	; 0
    237a:	0e 94 3f 21 	call	0x427e	; 0x427e <LCD_Display_Text>
		LCD_Display_Text(35,(const unsigned char*)Verdana8,0,30);
    237e:	2e e1       	ldi	r18, 0x1E	; 30
    2380:	30 e0       	ldi	r19, 0x00	; 0
    2382:	40 e0       	ldi	r20, 0x00	; 0
    2384:	50 e0       	ldi	r21, 0x00	; 0
    2386:	67 ef       	ldi	r22, 0xF7	; 247
    2388:	79 e0       	ldi	r23, 0x09	; 9
    238a:	83 e2       	ldi	r24, 0x23	; 35
    238c:	90 e0       	ldi	r25, 0x00	; 0
    238e:	0e 94 3f 21 	call	0x427e	; 0x427e <LCD_Display_Text>

		LCD_Display_Text(109,(const unsigned char*)Verdana8,70,0); // Gear
    2392:	20 e0       	ldi	r18, 0x00	; 0
    2394:	30 e0       	ldi	r19, 0x00	; 0
    2396:	46 e4       	ldi	r20, 0x46	; 70
    2398:	50 e0       	ldi	r21, 0x00	; 0
    239a:	67 ef       	ldi	r22, 0xF7	; 247
    239c:	79 e0       	ldi	r23, 0x09	; 9
    239e:	8d e6       	ldi	r24, 0x6D	; 109
    23a0:	90 e0       	ldi	r25, 0x00	; 0
    23a2:	0e 94 3f 21 	call	0x427e	; 0x427e <LCD_Display_Text>
		LCD_Display_Text(110,(const unsigned char*)Verdana8,70,10);
    23a6:	2a e0       	ldi	r18, 0x0A	; 10
    23a8:	30 e0       	ldi	r19, 0x00	; 0
    23aa:	46 e4       	ldi	r20, 0x46	; 70
    23ac:	50 e0       	ldi	r21, 0x00	; 0
    23ae:	67 ef       	ldi	r22, 0xF7	; 247
    23b0:	79 e0       	ldi	r23, 0x09	; 9
    23b2:	8e e6       	ldi	r24, 0x6E	; 110
    23b4:	90 e0       	ldi	r25, 0x00	; 0
    23b6:	0e 94 3f 21 	call	0x427e	; 0x427e <LCD_Display_Text>
		LCD_Display_Text(111,(const unsigned char*)Verdana8,70,20);
    23ba:	24 e1       	ldi	r18, 0x14	; 20
    23bc:	30 e0       	ldi	r19, 0x00	; 0
    23be:	46 e4       	ldi	r20, 0x46	; 70
    23c0:	50 e0       	ldi	r21, 0x00	; 0
    23c2:	67 ef       	ldi	r22, 0xF7	; 247
    23c4:	79 e0       	ldi	r23, 0x09	; 9
    23c6:	8f e6       	ldi	r24, 0x6F	; 111
    23c8:	90 e0       	ldi	r25, 0x00	; 0
    23ca:	0e 94 3f 21 	call	0x427e	; 0x427e <LCD_Display_Text>
		LCD_Display_Text(112,(const unsigned char*)Verdana8,70,30);
    23ce:	2e e1       	ldi	r18, 0x1E	; 30
    23d0:	30 e0       	ldi	r19, 0x00	; 0
    23d2:	46 e4       	ldi	r20, 0x46	; 70
    23d4:	50 e0       	ldi	r21, 0x00	; 0
    23d6:	67 ef       	ldi	r22, 0xF7	; 247
    23d8:	79 e0       	ldi	r23, 0x09	; 9
    23da:	80 e7       	ldi	r24, 0x70	; 112
    23dc:	90 e0       	ldi	r25, 0x00	; 0
    23de:	0e 94 3f 21 	call	0x427e	; 0x427e <LCD_Display_Text>

		mugui_lcd_puts(itoa(MonopolarThrottle,pBuffer,10),(const unsigned char*)Verdana8,37,0);
    23e2:	80 91 2b 08 	lds	r24, 0x082B
    23e6:	90 91 2c 08 	lds	r25, 0x082C
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    23ea:	4a e0       	ldi	r20, 0x0A	; 10
    23ec:	61 e6       	ldi	r22, 0x61	; 97
    23ee:	75 e0       	ldi	r23, 0x05	; 5
    23f0:	0e 94 ad 47 	call	0x8f5a	; 0x8f5a <__itoa_ncheck>
    23f4:	20 e0       	ldi	r18, 0x00	; 0
    23f6:	30 e0       	ldi	r19, 0x00	; 0
    23f8:	45 e2       	ldi	r20, 0x25	; 37
    23fa:	50 e0       	ldi	r21, 0x00	; 0
    23fc:	67 ef       	ldi	r22, 0xF7	; 247
    23fe:	79 e0       	ldi	r23, 0x09	; 9
    2400:	0e 94 51 3d 	call	0x7aa2	; 0x7aa2 <mugui_lcd_puts>
		mugui_lcd_puts(itoa(RCinputs[AILERON],pBuffer,10),(const unsigned char*)Verdana8,37,10);
    2404:	80 91 2f 08 	lds	r24, 0x082F
    2408:	90 91 30 08 	lds	r25, 0x0830
    240c:	4a e0       	ldi	r20, 0x0A	; 10
    240e:	61 e6       	ldi	r22, 0x61	; 97
    2410:	75 e0       	ldi	r23, 0x05	; 5
    2412:	0e 94 ad 47 	call	0x8f5a	; 0x8f5a <__itoa_ncheck>
    2416:	2a e0       	ldi	r18, 0x0A	; 10
    2418:	30 e0       	ldi	r19, 0x00	; 0
    241a:	45 e2       	ldi	r20, 0x25	; 37
    241c:	50 e0       	ldi	r21, 0x00	; 0
    241e:	67 ef       	ldi	r22, 0xF7	; 247
    2420:	79 e0       	ldi	r23, 0x09	; 9
    2422:	0e 94 51 3d 	call	0x7aa2	; 0x7aa2 <mugui_lcd_puts>
		mugui_lcd_puts(itoa(RCinputs[ELEVATOR],pBuffer,10),(const unsigned char*)Verdana8,37,20);
    2426:	80 91 31 08 	lds	r24, 0x0831
    242a:	90 91 32 08 	lds	r25, 0x0832
    242e:	4a e0       	ldi	r20, 0x0A	; 10
    2430:	61 e6       	ldi	r22, 0x61	; 97
    2432:	75 e0       	ldi	r23, 0x05	; 5
    2434:	0e 94 ad 47 	call	0x8f5a	; 0x8f5a <__itoa_ncheck>
    2438:	24 e1       	ldi	r18, 0x14	; 20
    243a:	30 e0       	ldi	r19, 0x00	; 0
    243c:	45 e2       	ldi	r20, 0x25	; 37
    243e:	50 e0       	ldi	r21, 0x00	; 0
    2440:	67 ef       	ldi	r22, 0xF7	; 247
    2442:	79 e0       	ldi	r23, 0x09	; 9
    2444:	0e 94 51 3d 	call	0x7aa2	; 0x7aa2 <mugui_lcd_puts>
		mugui_lcd_puts(itoa(RCinputs[RUDDER],pBuffer,10),(const unsigned char*)Verdana8,37,30);
    2448:	80 91 33 08 	lds	r24, 0x0833
    244c:	90 91 34 08 	lds	r25, 0x0834
    2450:	4a e0       	ldi	r20, 0x0A	; 10
    2452:	61 e6       	ldi	r22, 0x61	; 97
    2454:	75 e0       	ldi	r23, 0x05	; 5
    2456:	0e 94 ad 47 	call	0x8f5a	; 0x8f5a <__itoa_ncheck>
    245a:	2e e1       	ldi	r18, 0x1E	; 30
    245c:	30 e0       	ldi	r19, 0x00	; 0
    245e:	45 e2       	ldi	r20, 0x25	; 37
    2460:	50 e0       	ldi	r21, 0x00	; 0
    2462:	67 ef       	ldi	r22, 0xF7	; 247
    2464:	79 e0       	ldi	r23, 0x09	; 9
    2466:	0e 94 51 3d 	call	0x7aa2	; 0x7aa2 <mugui_lcd_puts>

		mugui_lcd_puts(itoa(RCinputs[GEAR],pBuffer,10),(const unsigned char*)Verdana8,100,0);
    246a:	80 91 35 08 	lds	r24, 0x0835
    246e:	90 91 36 08 	lds	r25, 0x0836
    2472:	4a e0       	ldi	r20, 0x0A	; 10
    2474:	61 e6       	ldi	r22, 0x61	; 97
    2476:	75 e0       	ldi	r23, 0x05	; 5
    2478:	0e 94 ad 47 	call	0x8f5a	; 0x8f5a <__itoa_ncheck>
    247c:	20 e0       	ldi	r18, 0x00	; 0
    247e:	30 e0       	ldi	r19, 0x00	; 0
    2480:	44 e6       	ldi	r20, 0x64	; 100
    2482:	50 e0       	ldi	r21, 0x00	; 0
    2484:	67 ef       	ldi	r22, 0xF7	; 247
    2486:	79 e0       	ldi	r23, 0x09	; 9
    2488:	0e 94 51 3d 	call	0x7aa2	; 0x7aa2 <mugui_lcd_puts>
		mugui_lcd_puts(itoa(RCinputs[AUX1],pBuffer,10),(const unsigned char*)Verdana8,100,10);
    248c:	80 91 37 08 	lds	r24, 0x0837
    2490:	90 91 38 08 	lds	r25, 0x0838
    2494:	4a e0       	ldi	r20, 0x0A	; 10
    2496:	61 e6       	ldi	r22, 0x61	; 97
    2498:	75 e0       	ldi	r23, 0x05	; 5
    249a:	0e 94 ad 47 	call	0x8f5a	; 0x8f5a <__itoa_ncheck>
    249e:	2a e0       	ldi	r18, 0x0A	; 10
    24a0:	30 e0       	ldi	r19, 0x00	; 0
    24a2:	44 e6       	ldi	r20, 0x64	; 100
    24a4:	50 e0       	ldi	r21, 0x00	; 0
    24a6:	67 ef       	ldi	r22, 0xF7	; 247
    24a8:	79 e0       	ldi	r23, 0x09	; 9
    24aa:	0e 94 51 3d 	call	0x7aa2	; 0x7aa2 <mugui_lcd_puts>
		mugui_lcd_puts(itoa(RCinputs[AUX2],pBuffer,10),(const unsigned char*)Verdana8,100,20);
    24ae:	80 91 39 08 	lds	r24, 0x0839
    24b2:	90 91 3a 08 	lds	r25, 0x083A
    24b6:	4a e0       	ldi	r20, 0x0A	; 10
    24b8:	61 e6       	ldi	r22, 0x61	; 97
    24ba:	75 e0       	ldi	r23, 0x05	; 5
    24bc:	0e 94 ad 47 	call	0x8f5a	; 0x8f5a <__itoa_ncheck>
    24c0:	24 e1       	ldi	r18, 0x14	; 20
    24c2:	30 e0       	ldi	r19, 0x00	; 0
    24c4:	44 e6       	ldi	r20, 0x64	; 100
    24c6:	50 e0       	ldi	r21, 0x00	; 0
    24c8:	67 ef       	ldi	r22, 0xF7	; 247
    24ca:	79 e0       	ldi	r23, 0x09	; 9
    24cc:	0e 94 51 3d 	call	0x7aa2	; 0x7aa2 <mugui_lcd_puts>
		mugui_lcd_puts(itoa(RCinputs[AUX3],pBuffer,10),(const unsigned char*)Verdana8,100,30);
    24d0:	80 91 3b 08 	lds	r24, 0x083B
    24d4:	90 91 3c 08 	lds	r25, 0x083C
    24d8:	4a e0       	ldi	r20, 0x0A	; 10
    24da:	61 e6       	ldi	r22, 0x61	; 97
    24dc:	75 e0       	ldi	r23, 0x05	; 5
    24de:	0e 94 ad 47 	call	0x8f5a	; 0x8f5a <__itoa_ncheck>
    24e2:	2e e1       	ldi	r18, 0x1E	; 30
    24e4:	30 e0       	ldi	r19, 0x00	; 0
    24e6:	44 e6       	ldi	r20, 0x64	; 100
    24e8:	50 e0       	ldi	r21, 0x00	; 0
    24ea:	67 ef       	ldi	r22, 0xF7	; 247
    24ec:	79 e0       	ldi	r23, 0x09	; 9
    24ee:	0e 94 51 3d 	call	0x7aa2	; 0x7aa2 <mugui_lcd_puts>

		// Print bottom text and markers
		LCD_Display_Text(12, (const unsigned char*)Wingdings, 0, 57); 	// Left
    24f2:	29 e3       	ldi	r18, 0x39	; 57
    24f4:	30 e0       	ldi	r19, 0x00	; 0
    24f6:	40 e0       	ldi	r20, 0x00	; 0
    24f8:	50 e0       	ldi	r21, 0x00	; 0
    24fa:	6f ed       	ldi	r22, 0xDF	; 223
    24fc:	70 e0       	ldi	r23, 0x00	; 0
    24fe:	8c e0       	ldi	r24, 0x0C	; 12
    2500:	90 e0       	ldi	r25, 0x00	; 0
    2502:	0e 94 3f 21 	call	0x427e	; 0x427e <LCD_Display_Text>
		LCD_Display_Text(60, (const unsigned char*)Verdana8, 110, 55); 	// Cal.
    2506:	27 e3       	ldi	r18, 0x37	; 55
    2508:	30 e0       	ldi	r19, 0x00	; 0
    250a:	4e e6       	ldi	r20, 0x6E	; 110
    250c:	50 e0       	ldi	r21, 0x00	; 0
    250e:	67 ef       	ldi	r22, 0xF7	; 247
    2510:	79 e0       	ldi	r23, 0x09	; 9
    2512:	8c e3       	ldi	r24, 0x3C	; 60
    2514:	90 e0       	ldi	r25, 0x00	; 0
    2516:	0e 94 3f 21 	call	0x427e	; 0x427e <LCD_Display_Text>

		// Update buffer
		write_buffer(buffer);
    251a:	81 e0       	ldi	r24, 0x01	; 1
    251c:	91 e0       	ldi	r25, 0x01	; 1
    251e:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <write_buffer>
		clear_buffer(buffer);
    2522:	81 e0       	ldi	r24, 0x01	; 1
    2524:	91 e0       	ldi	r25, 0x01	; 1
    2526:	0e 94 5e 1f 	call	0x3ebc	; 0x3ebc <clear_buffer>
    252a:	04 cf       	rjmp	.-504    	; 0x2334 <Display_rcinput+0x4>
	}
}
    252c:	08 95       	ret

0000252e <Display_sensors>:
// Code
//************************************************************

void Display_sensors(void)
{
	while(BUTTON1 != 0)
    252e:	1f 9b       	sbis	0x03, 7	; 3
    2530:	ed c0       	rjmp	.+474    	; 0x270c <Display_sensors+0x1de>
	{
	
		// Normal calibrate button pressed
		if (BUTTON4 == 0)
    2532:	1c 99       	sbic	0x03, 4	; 3
    2534:	1a c0       	rjmp	.+52     	; 0x256a <Display_sensors+0x3c>
		{
			// Wait until finger off button
			while(BUTTON4 == 0)
    2536:	1c 99       	sbic	0x03, 4	; 3
    2538:	0a c0       	rjmp	.+20     	; 0x254e <Display_sensors+0x20>
    253a:	2f e3       	ldi	r18, 0x3F	; 63
    253c:	8d e0       	ldi	r24, 0x0D	; 13
    253e:	93 e0       	ldi	r25, 0x03	; 3
    2540:	21 50       	subi	r18, 0x01	; 1
    2542:	80 40       	sbci	r24, 0x00	; 0
    2544:	90 40       	sbci	r25, 0x00	; 0
    2546:	e1 f7       	brne	.-8      	; 0x2540 <Display_sensors+0x12>
    2548:	00 c0       	rjmp	.+0      	; 0x254a <Display_sensors+0x1c>
    254a:	00 00       	nop
    254c:	f4 cf       	rjmp	.-24     	; 0x2536 <Display_sensors+0x8>
    254e:	2f e3       	ldi	r18, 0x3F	; 63
    2550:	82 e4       	ldi	r24, 0x42	; 66
    2552:	9f e0       	ldi	r25, 0x0F	; 15
    2554:	21 50       	subi	r18, 0x01	; 1
    2556:	80 40       	sbci	r24, 0x00	; 0
    2558:	90 40       	sbci	r25, 0x00	; 0
    255a:	e1 f7       	brne	.-8      	; 0x2554 <Display_sensors+0x26>
    255c:	00 c0       	rjmp	.+0      	; 0x255e <Display_sensors+0x30>
    255e:	00 00       	nop
			
			// Pause until steady		
			_delay_ms(250);
			
			// Calibrate sensors
			CalibrateGyrosFast();		
    2560:	0e 94 52 22 	call	0x44a4	; 0x44a4 <CalibrateGyrosFast>
			CalibrateAcc(NORMAL);
    2564:	80 e0       	ldi	r24, 0x00	; 0
    2566:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <CalibrateAcc>
		}

		// Inverted calibrate button pressed
		if (BUTTON3 == 0)
    256a:	1d 99       	sbic	0x03, 5	; 3
    256c:	0c c0       	rjmp	.+24     	; 0x2586 <Display_sensors+0x58>
    256e:	2f e3       	ldi	r18, 0x3F	; 63
    2570:	82 e4       	ldi	r24, 0x42	; 66
    2572:	9f e0       	ldi	r25, 0x0F	; 15
    2574:	21 50       	subi	r18, 0x01	; 1
    2576:	80 40       	sbci	r24, 0x00	; 0
    2578:	90 40       	sbci	r25, 0x00	; 0
    257a:	e1 f7       	brne	.-8      	; 0x2574 <Display_sensors+0x46>
    257c:	00 c0       	rjmp	.+0      	; 0x257e <Display_sensors+0x50>
    257e:	00 00       	nop
		{
			// Wait until button snap dissipated
			_delay_ms(250);
			CalibrateAcc(REVERSED);
    2580:	81 e0       	ldi	r24, 0x01	; 1
    2582:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <CalibrateAcc>
		}

		ReadGyros();
    2586:	0e 94 25 22 	call	0x444a	; 0x444a <ReadGyros>
		ReadAcc();
    258a:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <ReadAcc>

		LCD_Display_Text(26,(const unsigned char*)Verdana8,37,0); 	// Gyro
    258e:	20 e0       	ldi	r18, 0x00	; 0
    2590:	30 e0       	ldi	r19, 0x00	; 0
    2592:	45 e2       	ldi	r20, 0x25	; 37
    2594:	50 e0       	ldi	r21, 0x00	; 0
    2596:	67 ef       	ldi	r22, 0xF7	; 247
    2598:	79 e0       	ldi	r23, 0x09	; 9
    259a:	8a e1       	ldi	r24, 0x1A	; 26
    259c:	90 e0       	ldi	r25, 0x00	; 0
    259e:	0e 94 3f 21 	call	0x427e	; 0x427e <LCD_Display_Text>
		LCD_Display_Text(30,(const unsigned char*)Verdana8,77,0); 	// Acc
    25a2:	20 e0       	ldi	r18, 0x00	; 0
    25a4:	30 e0       	ldi	r19, 0x00	; 0
    25a6:	4d e4       	ldi	r20, 0x4D	; 77
    25a8:	50 e0       	ldi	r21, 0x00	; 0
    25aa:	67 ef       	ldi	r22, 0xF7	; 247
    25ac:	79 e0       	ldi	r23, 0x09	; 9
    25ae:	8e e1       	ldi	r24, 0x1E	; 30
    25b0:	90 e0       	ldi	r25, 0x00	; 0
    25b2:	0e 94 3f 21 	call	0x427e	; 0x427e <LCD_Display_Text>
		//
		LCD_Display_Text(27,(const unsigned char*)Verdana8,5,13);	// Roll
    25b6:	2d e0       	ldi	r18, 0x0D	; 13
    25b8:	30 e0       	ldi	r19, 0x00	; 0
    25ba:	45 e0       	ldi	r20, 0x05	; 5
    25bc:	50 e0       	ldi	r21, 0x00	; 0
    25be:	67 ef       	ldi	r22, 0xF7	; 247
    25c0:	79 e0       	ldi	r23, 0x09	; 9
    25c2:	8b e1       	ldi	r24, 0x1B	; 27
    25c4:	90 e0       	ldi	r25, 0x00	; 0
    25c6:	0e 94 3f 21 	call	0x427e	; 0x427e <LCD_Display_Text>
		LCD_Display_Text(28,(const unsigned char*)Verdana8,5,23);	// Pitch
    25ca:	27 e1       	ldi	r18, 0x17	; 23
    25cc:	30 e0       	ldi	r19, 0x00	; 0
    25ce:	45 e0       	ldi	r20, 0x05	; 5
    25d0:	50 e0       	ldi	r21, 0x00	; 0
    25d2:	67 ef       	ldi	r22, 0xF7	; 247
    25d4:	79 e0       	ldi	r23, 0x09	; 9
    25d6:	8c e1       	ldi	r24, 0x1C	; 28
    25d8:	90 e0       	ldi	r25, 0x00	; 0
    25da:	0e 94 3f 21 	call	0x427e	; 0x427e <LCD_Display_Text>
		LCD_Display_Text(29,(const unsigned char*)Verdana8,5,33);	// Yaw/Z
    25de:	21 e2       	ldi	r18, 0x21	; 33
    25e0:	30 e0       	ldi	r19, 0x00	; 0
    25e2:	45 e0       	ldi	r20, 0x05	; 5
    25e4:	50 e0       	ldi	r21, 0x00	; 0
    25e6:	67 ef       	ldi	r22, 0xF7	; 247
    25e8:	79 e0       	ldi	r23, 0x09	; 9
    25ea:	8d e1       	ldi	r24, 0x1D	; 29
    25ec:	90 e0       	ldi	r25, 0x00	; 0
    25ee:	0e 94 3f 21 	call	0x427e	; 0x427e <LCD_Display_Text>
    25f2:	4a e0       	ldi	r20, 0x0A	; 10
    25f4:	61 e6       	ldi	r22, 0x61	; 97
    25f6:	75 e0       	ldi	r23, 0x05	; 5
    25f8:	80 91 71 05 	lds	r24, 0x0571
    25fc:	90 91 72 05 	lds	r25, 0x0572
    2600:	0e 94 ad 47 	call	0x8f5a	; 0x8f5a <__itoa_ncheck>
		//
		mugui_lcd_puts(itoa(gyroADC[ROLL],pBuffer,10),(const unsigned char*)Verdana8,40,13);
    2604:	2d e0       	ldi	r18, 0x0D	; 13
    2606:	30 e0       	ldi	r19, 0x00	; 0
    2608:	48 e2       	ldi	r20, 0x28	; 40
    260a:	50 e0       	ldi	r21, 0x00	; 0
    260c:	67 ef       	ldi	r22, 0xF7	; 247
    260e:	79 e0       	ldi	r23, 0x09	; 9
    2610:	0e 94 51 3d 	call	0x7aa2	; 0x7aa2 <mugui_lcd_puts>
    2614:	4a e0       	ldi	r20, 0x0A	; 10
    2616:	61 e6       	ldi	r22, 0x61	; 97
    2618:	75 e0       	ldi	r23, 0x05	; 5
    261a:	80 91 73 05 	lds	r24, 0x0573
    261e:	90 91 74 05 	lds	r25, 0x0574
    2622:	0e 94 ad 47 	call	0x8f5a	; 0x8f5a <__itoa_ncheck>
		mugui_lcd_puts(itoa(gyroADC[PITCH],pBuffer,10),(const unsigned char*)Verdana8,40,23);
    2626:	27 e1       	ldi	r18, 0x17	; 23
    2628:	30 e0       	ldi	r19, 0x00	; 0
    262a:	48 e2       	ldi	r20, 0x28	; 40
    262c:	50 e0       	ldi	r21, 0x00	; 0
    262e:	67 ef       	ldi	r22, 0xF7	; 247
    2630:	79 e0       	ldi	r23, 0x09	; 9
    2632:	0e 94 51 3d 	call	0x7aa2	; 0x7aa2 <mugui_lcd_puts>
    2636:	4a e0       	ldi	r20, 0x0A	; 10
    2638:	61 e6       	ldi	r22, 0x61	; 97
    263a:	75 e0       	ldi	r23, 0x05	; 5
    263c:	80 91 75 05 	lds	r24, 0x0575
    2640:	90 91 76 05 	lds	r25, 0x0576
    2644:	0e 94 ad 47 	call	0x8f5a	; 0x8f5a <__itoa_ncheck>
		mugui_lcd_puts(itoa(gyroADC[YAW],pBuffer,10),(const unsigned char*)Verdana8,40,33);
    2648:	21 e2       	ldi	r18, 0x21	; 33
    264a:	30 e0       	ldi	r19, 0x00	; 0
    264c:	48 e2       	ldi	r20, 0x28	; 40
    264e:	50 e0       	ldi	r21, 0x00	; 0
    2650:	67 ef       	ldi	r22, 0xF7	; 247
    2652:	79 e0       	ldi	r23, 0x09	; 9
    2654:	0e 94 51 3d 	call	0x7aa2	; 0x7aa2 <mugui_lcd_puts>
    2658:	4a e0       	ldi	r20, 0x0A	; 10
    265a:	61 e6       	ldi	r22, 0x61	; 97
    265c:	75 e0       	ldi	r23, 0x05	; 5
    265e:	80 91 3e 05 	lds	r24, 0x053E
    2662:	90 91 3f 05 	lds	r25, 0x053F
    2666:	0e 94 ad 47 	call	0x8f5a	; 0x8f5a <__itoa_ncheck>
		mugui_lcd_puts(itoa(accADC[ROLL],pBuffer,10),(const unsigned char*)Verdana8,80,13);
    266a:	2d e0       	ldi	r18, 0x0D	; 13
    266c:	30 e0       	ldi	r19, 0x00	; 0
    266e:	40 e5       	ldi	r20, 0x50	; 80
    2670:	50 e0       	ldi	r21, 0x00	; 0
    2672:	67 ef       	ldi	r22, 0xF7	; 247
    2674:	79 e0       	ldi	r23, 0x09	; 9
    2676:	0e 94 51 3d 	call	0x7aa2	; 0x7aa2 <mugui_lcd_puts>
    267a:	4a e0       	ldi	r20, 0x0A	; 10
    267c:	61 e6       	ldi	r22, 0x61	; 97
    267e:	75 e0       	ldi	r23, 0x05	; 5
    2680:	80 91 40 05 	lds	r24, 0x0540
    2684:	90 91 41 05 	lds	r25, 0x0541
    2688:	0e 94 ad 47 	call	0x8f5a	; 0x8f5a <__itoa_ncheck>
		mugui_lcd_puts(itoa(accADC[PITCH],pBuffer,10),(const unsigned char*)Verdana8,80,23);
    268c:	27 e1       	ldi	r18, 0x17	; 23
    268e:	30 e0       	ldi	r19, 0x00	; 0
    2690:	40 e5       	ldi	r20, 0x50	; 80
    2692:	50 e0       	ldi	r21, 0x00	; 0
    2694:	67 ef       	ldi	r22, 0xF7	; 247
    2696:	79 e0       	ldi	r23, 0x09	; 9
    2698:	0e 94 51 3d 	call	0x7aa2	; 0x7aa2 <mugui_lcd_puts>
    269c:	4a e0       	ldi	r20, 0x0A	; 10
    269e:	61 e6       	ldi	r22, 0x61	; 97
    26a0:	75 e0       	ldi	r23, 0x05	; 5
    26a2:	80 91 42 05 	lds	r24, 0x0542
    26a6:	90 91 43 05 	lds	r25, 0x0543
    26aa:	0e 94 ad 47 	call	0x8f5a	; 0x8f5a <__itoa_ncheck>
		mugui_lcd_puts(itoa(accADC[YAW],pBuffer,10),(const unsigned char*)Verdana8,80,33);
    26ae:	21 e2       	ldi	r18, 0x21	; 33
    26b0:	30 e0       	ldi	r19, 0x00	; 0
    26b2:	40 e5       	ldi	r20, 0x50	; 80
    26b4:	50 e0       	ldi	r21, 0x00	; 0
    26b6:	67 ef       	ldi	r22, 0xF7	; 247
    26b8:	79 e0       	ldi	r23, 0x09	; 9
    26ba:	0e 94 51 3d 	call	0x7aa2	; 0x7aa2 <mugui_lcd_puts>

		// Print bottom markers
		LCD_Display_Text(12, (const unsigned char*)Wingdings, 0, 57); 	// Left
    26be:	29 e3       	ldi	r18, 0x39	; 57
    26c0:	30 e0       	ldi	r19, 0x00	; 0
    26c2:	40 e0       	ldi	r20, 0x00	; 0
    26c4:	50 e0       	ldi	r21, 0x00	; 0
    26c6:	6f ed       	ldi	r22, 0xDF	; 223
    26c8:	70 e0       	ldi	r23, 0x00	; 0
    26ca:	8c e0       	ldi	r24, 0x0C	; 12
    26cc:	90 e0       	ldi	r25, 0x00	; 0
    26ce:	0e 94 3f 21 	call	0x427e	; 0x427e <LCD_Display_Text>
		LCD_Display_Text(60, (const unsigned char*)Verdana8, 108, 55); 	// Calibrate
    26d2:	27 e3       	ldi	r18, 0x37	; 55
    26d4:	30 e0       	ldi	r19, 0x00	; 0
    26d6:	4c e6       	ldi	r20, 0x6C	; 108
    26d8:	50 e0       	ldi	r21, 0x00	; 0
    26da:	67 ef       	ldi	r22, 0xF7	; 247
    26dc:	79 e0       	ldi	r23, 0x09	; 9
    26de:	8c e3       	ldi	r24, 0x3C	; 60
    26e0:	90 e0       	ldi	r25, 0x00	; 0
    26e2:	0e 94 3f 21 	call	0x427e	; 0x427e <LCD_Display_Text>
		LCD_Display_Text(25, (const unsigned char*)Verdana8, 75, 55); 	// Inverted Calibrate		
    26e6:	27 e3       	ldi	r18, 0x37	; 55
    26e8:	30 e0       	ldi	r19, 0x00	; 0
    26ea:	4b e4       	ldi	r20, 0x4B	; 75
    26ec:	50 e0       	ldi	r21, 0x00	; 0
    26ee:	67 ef       	ldi	r22, 0xF7	; 247
    26f0:	79 e0       	ldi	r23, 0x09	; 9
    26f2:	89 e1       	ldi	r24, 0x19	; 25
    26f4:	90 e0       	ldi	r25, 0x00	; 0
    26f6:	0e 94 3f 21 	call	0x427e	; 0x427e <LCD_Display_Text>

		// Update buffer
		write_buffer(buffer);
    26fa:	81 e0       	ldi	r24, 0x01	; 1
    26fc:	91 e0       	ldi	r25, 0x01	; 1
    26fe:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <write_buffer>
		clear_buffer(buffer);
    2702:	81 e0       	ldi	r24, 0x01	; 1
    2704:	91 e0       	ldi	r25, 0x01	; 1
    2706:	0e 94 5e 1f 	call	0x3ebc	; 0x3ebc <clear_buffer>
    270a:	11 cf       	rjmp	.-478    	; 0x252e <Display_sensors>
	}
}
    270c:	08 95       	ret

0000270e <Display_status>:
//************************************************************
// Code
//************************************************************

void Display_status(void)
{
    270e:	bf 92       	push	r11
    2710:	cf 92       	push	r12
    2712:	df 92       	push	r13
    2714:	ef 92       	push	r14
    2716:	ff 92       	push	r15
    2718:	0f 93       	push	r16
    271a:	1f 93       	push	r17
    271c:	cf 93       	push	r28
    271e:	df 93       	push	r29
    2720:	00 d0       	rcall	.+0      	; 0x2722 <Display_status+0x14>
    2722:	00 d0       	rcall	.+0      	; 0x2724 <Display_status+0x16>
    2724:	cd b7       	in	r28, 0x3d	; 61
    2726:	de b7       	in	r29, 0x3e	; 62
	int16_t temp;
	uint16_t vbat_temp; 
	int8_t	pos1, pos2, pos3;
	mugui_size16_t size;

	clear_buffer(buffer);
    2728:	81 e0       	ldi	r24, 0x01	; 1
    272a:	91 e0       	ldi	r25, 0x01	; 1
    272c:	0e 94 5e 1f 	call	0x3ebc	; 0x3ebc <clear_buffer>

	// Display text
	LCD_Display_Text(264,(const unsigned char*)Verdana8,0,0); 	// Version text
    2730:	20 e0       	ldi	r18, 0x00	; 0
    2732:	30 e0       	ldi	r19, 0x00	; 0
    2734:	40 e0       	ldi	r20, 0x00	; 0
    2736:	50 e0       	ldi	r21, 0x00	; 0
    2738:	67 ef       	ldi	r22, 0xF7	; 247
    273a:	79 e0       	ldi	r23, 0x09	; 9
    273c:	88 e0       	ldi	r24, 0x08	; 8
    273e:	91 e0       	ldi	r25, 0x01	; 1
    2740:	0e 94 3f 21 	call	0x427e	; 0x427e <LCD_Display_Text>
	LCD_Display_Text(266,(const unsigned char*)Verdana8,0,16); 	// RX sync
    2744:	20 e1       	ldi	r18, 0x10	; 16
    2746:	30 e0       	ldi	r19, 0x00	; 0
    2748:	40 e0       	ldi	r20, 0x00	; 0
    274a:	50 e0       	ldi	r21, 0x00	; 0
    274c:	67 ef       	ldi	r22, 0xF7	; 247
    274e:	79 e0       	ldi	r23, 0x09	; 9
    2750:	8a e0       	ldi	r24, 0x0A	; 10
    2752:	91 e0       	ldi	r25, 0x01	; 1
    2754:	0e 94 3f 21 	call	0x427e	; 0x427e <LCD_Display_Text>
	LCD_Display_Text(267,(const unsigned char*)Verdana8,0,27); 	// Profile
    2758:	2b e1       	ldi	r18, 0x1B	; 27
    275a:	30 e0       	ldi	r19, 0x00	; 0
    275c:	40 e0       	ldi	r20, 0x00	; 0
    275e:	50 e0       	ldi	r21, 0x00	; 0
    2760:	67 ef       	ldi	r22, 0xF7	; 247
    2762:	79 e0       	ldi	r23, 0x09	; 9
    2764:	8b e0       	ldi	r24, 0x0B	; 11
    2766:	91 e0       	ldi	r25, 0x01	; 1
    2768:	0e 94 3f 21 	call	0x427e	; 0x427e <LCD_Display_Text>
	LCD_Display_Text(23,(const unsigned char*)Verdana8,88,27); 	// Pos
    276c:	2b e1       	ldi	r18, 0x1B	; 27
    276e:	30 e0       	ldi	r19, 0x00	; 0
    2770:	48 e5       	ldi	r20, 0x58	; 88
    2772:	50 e0       	ldi	r21, 0x00	; 0
    2774:	67 ef       	ldi	r22, 0xF7	; 247
    2776:	79 e0       	ldi	r23, 0x09	; 9
    2778:	87 e1       	ldi	r24, 0x17	; 23
    277a:	90 e0       	ldi	r25, 0x00	; 0
    277c:	0e 94 3f 21 	call	0x427e	; 0x427e <LCD_Display_Text>
	LCD_Display_Text(133,(const unsigned char*)Verdana8,0,38); 	// Battery
    2780:	26 e2       	ldi	r18, 0x26	; 38
    2782:	30 e0       	ldi	r19, 0x00	; 0
    2784:	40 e0       	ldi	r20, 0x00	; 0
    2786:	50 e0       	ldi	r21, 0x00	; 0
    2788:	67 ef       	ldi	r22, 0xF7	; 247
    278a:	79 e0       	ldi	r23, 0x09	; 9
    278c:	85 e8       	ldi	r24, 0x85	; 133
    278e:	90 e0       	ldi	r25, 0x00	; 0
    2790:	0e 94 3f 21 	call	0x427e	; 0x427e <LCD_Display_Text>
	
	// Display menu and markers
	LCD_Display_Text(9, (const unsigned char*)Wingdings, 0, 59);// Down
    2794:	2b e3       	ldi	r18, 0x3B	; 59
    2796:	30 e0       	ldi	r19, 0x00	; 0
    2798:	40 e0       	ldi	r20, 0x00	; 0
    279a:	50 e0       	ldi	r21, 0x00	; 0
    279c:	6f ed       	ldi	r22, 0xDF	; 223
    279e:	70 e0       	ldi	r23, 0x00	; 0
    27a0:	89 e0       	ldi	r24, 0x09	; 9
    27a2:	90 e0       	ldi	r25, 0x00	; 0
    27a4:	0e 94 3f 21 	call	0x427e	; 0x427e <LCD_Display_Text>
	LCD_Display_Text(14,(const unsigned char*)Verdana8,10,55);	// Menu
    27a8:	27 e3       	ldi	r18, 0x37	; 55
    27aa:	30 e0       	ldi	r19, 0x00	; 0
    27ac:	4a e0       	ldi	r20, 0x0A	; 10
    27ae:	50 e0       	ldi	r21, 0x00	; 0
    27b0:	67 ef       	ldi	r22, 0xF7	; 247
    27b2:	79 e0       	ldi	r23, 0x09	; 9
    27b4:	8e e0       	ldi	r24, 0x0E	; 14
    27b6:	90 e0       	ldi	r25, 0x00	; 0
    27b8:	0e 94 3f 21 	call	0x427e	; 0x427e <LCD_Display_Text>

	// Display values
	print_menu_text(0, 1, (62 + Config.RxMode), 45, 16); // Rx mode
    27bc:	40 91 dc 05 	lds	r20, 0x05DC
    27c0:	55 27       	eor	r21, r21
    27c2:	47 fd       	sbrc	r20, 7
    27c4:	50 95       	com	r21
    27c6:	42 5c       	subi	r20, 0xC2	; 194
    27c8:	5f 4f       	sbci	r21, 0xFF	; 255
    27ca:	00 e1       	ldi	r16, 0x10	; 16
    27cc:	2d e2       	ldi	r18, 0x2D	; 45
    27ce:	61 e0       	ldi	r22, 0x01	; 1
    27d0:	80 e0       	ldi	r24, 0x00	; 0
    27d2:	90 e0       	ldi	r25, 0x00	; 0
    27d4:	0e 94 3a 2e 	call	0x5c74	; 0x5c74 <print_menu_text>
    27d8:	4a e0       	ldi	r20, 0x0A	; 10
    27da:	61 e6       	ldi	r22, 0x61	; 97
    27dc:	75 e0       	ldi	r23, 0x05	; 5
    27de:	80 91 21 05 	lds	r24, 0x0521
    27e2:	90 91 22 05 	lds	r25, 0x0522
    27e6:	0e 94 ad 47 	call	0x8f5a	; 0x8f5a <__itoa_ncheck>
	mugui_lcd_puts(itoa(transition,pBuffer,10),(const unsigned char*)Verdana8,110,27); // Raw transition value
    27ea:	2b e1       	ldi	r18, 0x1B	; 27
    27ec:	30 e0       	ldi	r19, 0x00	; 0
    27ee:	4e e6       	ldi	r20, 0x6E	; 110
    27f0:	50 e0       	ldi	r21, 0x00	; 0
    27f2:	67 ef       	ldi	r22, 0xF7	; 247
    27f4:	79 e0       	ldi	r23, 0x09	; 9
    27f6:	0e 94 51 3d 	call	0x7aa2	; 0x7aa2 <mugui_lcd_puts>

	if (Config.RxMode == PWM)
    27fa:	80 91 dc 05 	lds	r24, 0x05DC
    27fe:	81 30       	cpi	r24, 0x01	; 1
    2800:	d9 f4       	brne	.+54     	; 0x2838 <Display_status+0x12a>
	{
		LCD_Display_Text(24,(const unsigned char*)Verdana8,77,38); // Interrupt counter text 
    2802:	26 e2       	ldi	r18, 0x26	; 38
    2804:	30 e0       	ldi	r19, 0x00	; 0
    2806:	4d e4       	ldi	r20, 0x4D	; 77
    2808:	50 e0       	ldi	r21, 0x00	; 0
    280a:	67 ef       	ldi	r22, 0xF7	; 247
    280c:	79 e0       	ldi	r23, 0x09	; 9
    280e:	88 e1       	ldi	r24, 0x18	; 24
    2810:	90 e0       	ldi	r25, 0x00	; 0
    2812:	0e 94 3f 21 	call	0x427e	; 0x427e <LCD_Display_Text>
		mugui_lcd_puts(itoa(InterruptCount,pBuffer,10),(const unsigned char*)Verdana8,110,38); // Interrupt counter
    2816:	80 91 1c 05 	lds	r24, 0x051C
    281a:	90 91 1d 05 	lds	r25, 0x051D
    281e:	4a e0       	ldi	r20, 0x0A	; 10
    2820:	61 e6       	ldi	r22, 0x61	; 97
    2822:	75 e0       	ldi	r23, 0x05	; 5
    2824:	0e 94 ad 47 	call	0x8f5a	; 0x8f5a <__itoa_ncheck>
    2828:	26 e2       	ldi	r18, 0x26	; 38
    282a:	30 e0       	ldi	r19, 0x00	; 0
    282c:	4e e6       	ldi	r20, 0x6E	; 110
    282e:	50 e0       	ldi	r21, 0x00	; 0
    2830:	67 ef       	ldi	r22, 0xF7	; 247
    2832:	79 e0       	ldi	r23, 0x09	; 9
    2834:	0e 94 51 3d 	call	0x7aa2	; 0x7aa2 <mugui_lcd_puts>
	}

	// Display transition point
	if (transition <= 0)
    2838:	80 91 21 05 	lds	r24, 0x0521
    283c:	90 91 22 05 	lds	r25, 0x0522
    2840:	18 16       	cp	r1, r24
    2842:	19 06       	cpc	r1, r25
    2844:	4c f0       	brlt	.+18     	; 0x2858 <Display_status+0x14a>
	{
		LCD_Display_Text(48,(const unsigned char*)Verdana8,45,27);
    2846:	2b e1       	ldi	r18, 0x1B	; 27
    2848:	30 e0       	ldi	r19, 0x00	; 0
    284a:	4d e2       	ldi	r20, 0x2D	; 45
    284c:	50 e0       	ldi	r21, 0x00	; 0
    284e:	67 ef       	ldi	r22, 0xF7	; 247
    2850:	79 e0       	ldi	r23, 0x09	; 9
    2852:	80 e3       	ldi	r24, 0x30	; 48
    2854:	90 e0       	ldi	r25, 0x00	; 0
    2856:	31 c0       	rjmp	.+98     	; 0x28ba <Display_status+0x1ac>
	}
	else if (transition >= 100)
    2858:	84 36       	cpi	r24, 0x64	; 100
    285a:	91 05       	cpc	r25, r1
    285c:	4c f0       	brlt	.+18     	; 0x2870 <Display_status+0x162>
	{
		LCD_Display_Text(50,(const unsigned char*)Verdana8,45,27);
    285e:	2b e1       	ldi	r18, 0x1B	; 27
    2860:	30 e0       	ldi	r19, 0x00	; 0
    2862:	4d e2       	ldi	r20, 0x2D	; 45
    2864:	50 e0       	ldi	r21, 0x00	; 0
    2866:	67 ef       	ldi	r22, 0xF7	; 247
    2868:	79 e0       	ldi	r23, 0x09	; 9
    286a:	82 e3       	ldi	r24, 0x32	; 50
    286c:	90 e0       	ldi	r25, 0x00	; 0
    286e:	25 c0       	rjmp	.+74     	; 0x28ba <Display_status+0x1ac>
	}
	else if (transition == Config.Transition_P1n)
    2870:	20 91 e4 05 	lds	r18, 0x05E4
    2874:	33 27       	eor	r19, r19
    2876:	27 fd       	sbrc	r18, 7
    2878:	30 95       	com	r19
    287a:	82 17       	cp	r24, r18
    287c:	93 07       	cpc	r25, r19
    287e:	49 f4       	brne	.+18     	; 0x2892 <Display_status+0x184>
	{
		LCD_Display_Text(49,(const unsigned char*)Verdana8,45,27);
    2880:	2b e1       	ldi	r18, 0x1B	; 27
    2882:	30 e0       	ldi	r19, 0x00	; 0
    2884:	4d e2       	ldi	r20, 0x2D	; 45
    2886:	50 e0       	ldi	r21, 0x00	; 0
    2888:	67 ef       	ldi	r22, 0xF7	; 247
    288a:	79 e0       	ldi	r23, 0x09	; 9
    288c:	81 e3       	ldi	r24, 0x31	; 49
    288e:	90 e0       	ldi	r25, 0x00	; 0
    2890:	14 c0       	rjmp	.+40     	; 0x28ba <Display_status+0x1ac>
	}
	else if (transition < Config.Transition_P1n)
    2892:	82 17       	cp	r24, r18
    2894:	93 07       	cpc	r25, r19
    2896:	4c f4       	brge	.+18     	; 0x28aa <Display_status+0x19c>
	{
		LCD_Display_Text(51,(const unsigned char*)Verdana8,45,27);
    2898:	2b e1       	ldi	r18, 0x1B	; 27
    289a:	30 e0       	ldi	r19, 0x00	; 0
    289c:	4d e2       	ldi	r20, 0x2D	; 45
    289e:	50 e0       	ldi	r21, 0x00	; 0
    28a0:	67 ef       	ldi	r22, 0xF7	; 247
    28a2:	79 e0       	ldi	r23, 0x09	; 9
    28a4:	83 e3       	ldi	r24, 0x33	; 51
    28a6:	90 e0       	ldi	r25, 0x00	; 0
    28a8:	08 c0       	rjmp	.+16     	; 0x28ba <Display_status+0x1ac>
	}
	else
	{
		LCD_Display_Text(52,(const unsigned char*)Verdana8,45,27);
    28aa:	2b e1       	ldi	r18, 0x1B	; 27
    28ac:	30 e0       	ldi	r19, 0x00	; 0
    28ae:	4d e2       	ldi	r20, 0x2D	; 45
    28b0:	50 e0       	ldi	r21, 0x00	; 0
    28b2:	67 ef       	ldi	r22, 0xF7	; 247
    28b4:	79 e0       	ldi	r23, 0x09	; 9
    28b6:	84 e3       	ldi	r24, 0x34	; 52
    28b8:	90 e0       	ldi	r25, 0x00	; 0
    28ba:	0e 94 3f 21 	call	0x427e	; 0x427e <LCD_Display_Text>

	// Display voltage
	uint8_t x_loc = 45;		// X location of voltage display
	uint8_t y_loc = 38;		// Y location of voltage display

	vbat_temp = GetVbat();
    28be:	0e 94 b8 44 	call	0x8970	; 0x8970 <GetVbat>
    28c2:	6c 01       	movw	r12, r24
	temp = vbat_temp/100;	// Display whole decimal part first
    28c4:	64 e6       	ldi	r22, 0x64	; 100
    28c6:	70 e0       	ldi	r23, 0x00	; 0
    28c8:	0e 94 f2 46 	call	0x8de4	; 0x8de4 <__udivmodhi4>
    28cc:	8b 01       	movw	r16, r22
    28ce:	4a e0       	ldi	r20, 0x0A	; 10
    28d0:	61 e6       	ldi	r22, 0x61	; 97
    28d2:	75 e0       	ldi	r23, 0x05	; 5
    28d4:	c8 01       	movw	r24, r16
    28d6:	0e 94 ad 47 	call	0x8f5a	; 0x8f5a <__itoa_ncheck>
	mugui_text_sizestring(itoa(temp,pBuffer,10), (const unsigned char*)Verdana8, &size);
    28da:	ae 01       	movw	r20, r28
    28dc:	4f 5f       	subi	r20, 0xFF	; 255
    28de:	5f 4f       	sbci	r21, 0xFF	; 255
    28e0:	67 ef       	ldi	r22, 0xF7	; 247
    28e2:	79 e0       	ldi	r23, 0x09	; 9
    28e4:	0e 94 02 3c 	call	0x7804	; 0x7804 <mugui_text_sizestring>
    28e8:	4a e0       	ldi	r20, 0x0A	; 10
    28ea:	61 e6       	ldi	r22, 0x61	; 97
    28ec:	75 e0       	ldi	r23, 0x05	; 5
    28ee:	c8 01       	movw	r24, r16
    28f0:	0e 94 ad 47 	call	0x8f5a	; 0x8f5a <__itoa_ncheck>
	mugui_lcd_puts(itoa(temp,pBuffer,10),(const unsigned char*)Verdana8,x_loc,y_loc);
    28f4:	26 e2       	ldi	r18, 0x26	; 38
    28f6:	30 e0       	ldi	r19, 0x00	; 0
    28f8:	4d e2       	ldi	r20, 0x2D	; 45
    28fa:	50 e0       	ldi	r21, 0x00	; 0
    28fc:	67 ef       	ldi	r22, 0xF7	; 247
    28fe:	79 e0       	ldi	r23, 0x09	; 9
    2900:	0e 94 51 3d 	call	0x7aa2	; 0x7aa2 <mugui_lcd_puts>
	pos1 = size.x;

	vbat_temp = vbat_temp - (temp * 100); // Now display the parts to the right of the decimal point
    2904:	2c e9       	ldi	r18, 0x9C	; 156
    2906:	20 03       	mulsu	r18, r16
    2908:	70 01       	movw	r14, r0
    290a:	21 9f       	mul	r18, r17
    290c:	f0 0c       	add	r15, r0
    290e:	11 24       	eor	r1, r1
    2910:	ec 0c       	add	r14, r12
    2912:	fd 1c       	adc	r15, r13

	LCD_Display_Text(268,(const unsigned char*)Verdana8,(x_loc + pos1),y_loc);
    2914:	09 81       	ldd	r16, Y+1	; 0x01
    2916:	11 27       	eor	r17, r17
    2918:	07 fd       	sbrc	r16, 7
    291a:	10 95       	com	r17
    291c:	03 5d       	subi	r16, 0xD3	; 211
    291e:	1f 4f       	sbci	r17, 0xFF	; 255
    2920:	26 e2       	ldi	r18, 0x26	; 38
    2922:	30 e0       	ldi	r19, 0x00	; 0
    2924:	a8 01       	movw	r20, r16
    2926:	67 ef       	ldi	r22, 0xF7	; 247
    2928:	79 e0       	ldi	r23, 0x09	; 9
    292a:	8c e0       	ldi	r24, 0x0C	; 12
    292c:	91 e0       	ldi	r25, 0x01	; 1
    292e:	0e 94 3f 21 	call	0x427e	; 0x427e <LCD_Display_Text>
	mugui_text_sizestring(".", (const unsigned char*)Verdana8, &size);
    2932:	ae 01       	movw	r20, r28
    2934:	4f 5f       	subi	r20, 0xFF	; 255
    2936:	5f 4f       	sbci	r21, 0xFF	; 255
    2938:	67 ef       	ldi	r22, 0xF7	; 247
    293a:	79 e0       	ldi	r23, 0x09	; 9
    293c:	89 e0       	ldi	r24, 0x09	; 9
    293e:	95 e0       	ldi	r25, 0x05	; 5
    2940:	0e 94 02 3c 	call	0x7804	; 0x7804 <mugui_text_sizestring>
	pos3 = size.x;
    2944:	c9 80       	ldd	r12, Y+1	; 0x01
	mugui_text_sizestring("0", (const unsigned char*)Verdana8, &size);
    2946:	ae 01       	movw	r20, r28
    2948:	4f 5f       	subi	r20, 0xFF	; 255
    294a:	5f 4f       	sbci	r21, 0xFF	; 255
    294c:	67 ef       	ldi	r22, 0xF7	; 247
    294e:	79 e0       	ldi	r23, 0x09	; 9
    2950:	8b e0       	ldi	r24, 0x0B	; 11
    2952:	95 e0       	ldi	r25, 0x05	; 5
    2954:	0e 94 02 3c 	call	0x7804	; 0x7804 <mugui_text_sizestring>
	pos2 = size.x;
    2958:	b9 80       	ldd	r11, Y+1	; 0x01
    295a:	dd 24       	eor	r13, r13
    295c:	c7 fc       	sbrc	r12, 7
    295e:	d0 94       	com	r13

	if (vbat_temp >= 10)
    2960:	8a e0       	ldi	r24, 0x0A	; 10
    2962:	e8 16       	cp	r14, r24
    2964:	f1 04       	cpc	r15, r1
    2966:	40 f0       	brcs	.+16     	; 0x2978 <Display_status+0x26a>
    2968:	4a e0       	ldi	r20, 0x0A	; 10
    296a:	61 e6       	ldi	r22, 0x61	; 97
    296c:	75 e0       	ldi	r23, 0x05	; 5
    296e:	c7 01       	movw	r24, r14
    2970:	0e 94 ad 47 	call	0x8f5a	; 0x8f5a <__itoa_ncheck>
	{
		mugui_lcd_puts(itoa(vbat_temp,pBuffer,10),(const unsigned char*)Verdana8,(x_loc + pos1 + pos3),y_loc);
    2974:	a8 01       	movw	r20, r16
    2976:	16 c0       	rjmp	.+44     	; 0x29a4 <Display_status+0x296>
	}
	else
	{
		LCD_Display_Text(269,(const unsigned char*)Verdana8,(x_loc + pos1 + pos3),y_loc);
    2978:	a8 01       	movw	r20, r16
    297a:	4c 0d       	add	r20, r12
    297c:	5d 1d       	adc	r21, r13
    297e:	26 e2       	ldi	r18, 0x26	; 38
    2980:	30 e0       	ldi	r19, 0x00	; 0
    2982:	67 ef       	ldi	r22, 0xF7	; 247
    2984:	79 e0       	ldi	r23, 0x09	; 9
    2986:	8d e0       	ldi	r24, 0x0D	; 13
    2988:	91 e0       	ldi	r25, 0x01	; 1
    298a:	0e 94 3f 21 	call	0x427e	; 0x427e <LCD_Display_Text>
    298e:	4a e0       	ldi	r20, 0x0A	; 10
    2990:	61 e6       	ldi	r22, 0x61	; 97
    2992:	75 e0       	ldi	r23, 0x05	; 5
    2994:	c7 01       	movw	r24, r14
    2996:	0e 94 ad 47 	call	0x8f5a	; 0x8f5a <__itoa_ncheck>
		mugui_lcd_puts(itoa(vbat_temp,pBuffer,10),(const unsigned char*)Verdana8,(x_loc + pos1 + pos2 + pos3),y_loc);
    299a:	a8 01       	movw	r20, r16
    299c:	4b 0d       	add	r20, r11
    299e:	51 1d       	adc	r21, r1
    29a0:	b7 fc       	sbrc	r11, 7
    29a2:	5a 95       	dec	r21
    29a4:	4c 0d       	add	r20, r12
    29a6:	5d 1d       	adc	r21, r13
    29a8:	26 e2       	ldi	r18, 0x26	; 38
    29aa:	30 e0       	ldi	r19, 0x00	; 0
    29ac:	67 ef       	ldi	r22, 0xF7	; 247
    29ae:	79 e0       	ldi	r23, 0x09	; 9
    29b0:	0e 94 51 3d 	call	0x7aa2	; 0x7aa2 <mugui_lcd_puts>
	}

	// Display error messages
	if (General_error != 0)
    29b4:	80 91 20 05 	lds	r24, 0x0520
    29b8:	88 23       	and	r24, r24
    29ba:	09 f4       	brne	.+2      	; 0x29be <Display_status+0x2b0>
    29bc:	65 c0       	rjmp	.+202    	; 0x2a88 <Display_status+0x37a>
	{
		// Create message box
		fillrect(buffer, 14,8, 96, 48, 0);	// White box
    29be:	e1 2c       	mov	r14, r1
    29c0:	00 e3       	ldi	r16, 0x30	; 48
    29c2:	20 e6       	ldi	r18, 0x60	; 96
    29c4:	48 e0       	ldi	r20, 0x08	; 8
    29c6:	6e e0       	ldi	r22, 0x0E	; 14
    29c8:	81 e0       	ldi	r24, 0x01	; 1
    29ca:	91 e0       	ldi	r25, 0x01	; 1
    29cc:	0e 94 28 20 	call	0x4050	; 0x4050 <fillrect>
		drawrect(buffer, 14,8, 96, 48, 1); 	// Outline
    29d0:	ee 24       	eor	r14, r14
    29d2:	e3 94       	inc	r14
    29d4:	20 e6       	ldi	r18, 0x60	; 96
    29d6:	48 e0       	ldi	r20, 0x08	; 8
    29d8:	6e e0       	ldi	r22, 0x0E	; 14
    29da:	81 e0       	ldi	r24, 0x01	; 1
    29dc:	91 e0       	ldi	r25, 0x01	; 1
    29de:	0e 94 5c 20 	call	0x40b8	; 0x40b8 <drawrect>

		// Prioritise error from top to bottom
		if((General_error & (1 << LVA_ALARM)) != 0)
    29e2:	80 91 20 05 	lds	r24, 0x0520
    29e6:	83 ff       	sbrs	r24, 3
    29e8:	13 c0       	rjmp	.+38     	; 0x2a10 <Display_status+0x302>
		{
			LCD_Display_Text(134,(const unsigned char*)Verdana14,33,14);	// Battery
    29ea:	2e e0       	ldi	r18, 0x0E	; 14
    29ec:	30 e0       	ldi	r19, 0x00	; 0
    29ee:	41 e2       	ldi	r20, 0x21	; 33
    29f0:	50 e0       	ldi	r21, 0x00	; 0
    29f2:	69 e4       	ldi	r22, 0x49	; 73
    29f4:	71 e0       	ldi	r23, 0x01	; 1
    29f6:	86 e8       	ldi	r24, 0x86	; 134
    29f8:	90 e0       	ldi	r25, 0x00	; 0
    29fa:	0e 94 3f 21 	call	0x427e	; 0x427e <LCD_Display_Text>
			LCD_Display_Text(118,(const unsigned char*)Verdana14,46,34);	// Low
    29fe:	22 e2       	ldi	r18, 0x22	; 34
    2a00:	30 e0       	ldi	r19, 0x00	; 0
    2a02:	4e e2       	ldi	r20, 0x2E	; 46
    2a04:	50 e0       	ldi	r21, 0x00	; 0
    2a06:	69 e4       	ldi	r22, 0x49	; 73
    2a08:	71 e0       	ldi	r23, 0x01	; 1
    2a0a:	86 e7       	ldi	r24, 0x76	; 118
    2a0c:	90 e0       	ldi	r25, 0x00	; 0
    2a0e:	3a c0       	rjmp	.+116    	; 0x2a84 <Display_status+0x376>
		}
		else if((General_error & (1 << NO_SIGNAL)) != 0)
    2a10:	80 91 20 05 	lds	r24, 0x0520
    2a14:	81 ff       	sbrs	r24, 1
    2a16:	13 c0       	rjmp	.+38     	; 0x2a3e <Display_status+0x330>
		{
			LCD_Display_Text(75,(const unsigned char*)Verdana14,51,13); 	// No
    2a18:	2d e0       	ldi	r18, 0x0D	; 13
    2a1a:	30 e0       	ldi	r19, 0x00	; 0
    2a1c:	43 e3       	ldi	r20, 0x33	; 51
    2a1e:	50 e0       	ldi	r21, 0x00	; 0
    2a20:	69 e4       	ldi	r22, 0x49	; 73
    2a22:	71 e0       	ldi	r23, 0x01	; 1
    2a24:	8b e4       	ldi	r24, 0x4B	; 75
    2a26:	90 e0       	ldi	r25, 0x00	; 0
    2a28:	0e 94 3f 21 	call	0x427e	; 0x427e <LCD_Display_Text>
			LCD_Display_Text(76,(const unsigned char*)Verdana14,39,33);		// Signal
    2a2c:	21 e2       	ldi	r18, 0x21	; 33
    2a2e:	30 e0       	ldi	r19, 0x00	; 0
    2a30:	47 e2       	ldi	r20, 0x27	; 39
    2a32:	50 e0       	ldi	r21, 0x00	; 0
    2a34:	69 e4       	ldi	r22, 0x49	; 73
    2a36:	71 e0       	ldi	r23, 0x01	; 1
    2a38:	8c e4       	ldi	r24, 0x4C	; 76
    2a3a:	90 e0       	ldi	r25, 0x00	; 0
    2a3c:	23 c0       	rjmp	.+70     	; 0x2a84 <Display_status+0x376>
		}
		else if((General_error & (1 << THROTTLE_HIGH)) != 0)
    2a3e:	80 91 20 05 	lds	r24, 0x0520
    2a42:	80 ff       	sbrs	r24, 0
    2a44:	13 c0       	rjmp	.+38     	; 0x2a6c <Display_status+0x35e>
		{
			LCD_Display_Text(105,(const unsigned char*)Verdana14,28,14);	// Throttle
    2a46:	2e e0       	ldi	r18, 0x0E	; 14
    2a48:	30 e0       	ldi	r19, 0x00	; 0
    2a4a:	4c e1       	ldi	r20, 0x1C	; 28
    2a4c:	50 e0       	ldi	r21, 0x00	; 0
    2a4e:	69 e4       	ldi	r22, 0x49	; 73
    2a50:	71 e0       	ldi	r23, 0x01	; 1
    2a52:	89 e6       	ldi	r24, 0x69	; 105
    2a54:	90 e0       	ldi	r25, 0x00	; 0
    2a56:	0e 94 3f 21 	call	0x427e	; 0x427e <LCD_Display_Text>
			LCD_Display_Text(55,(const unsigned char*)Verdana14,46,34);		// High
    2a5a:	22 e2       	ldi	r18, 0x22	; 34
    2a5c:	30 e0       	ldi	r19, 0x00	; 0
    2a5e:	4e e2       	ldi	r20, 0x2E	; 46
    2a60:	50 e0       	ldi	r21, 0x00	; 0
    2a62:	69 e4       	ldi	r22, 0x49	; 73
    2a64:	71 e0       	ldi	r23, 0x01	; 1
    2a66:	87 e3       	ldi	r24, 0x37	; 55
    2a68:	90 e0       	ldi	r25, 0x00	; 0
    2a6a:	0c c0       	rjmp	.+24     	; 0x2a84 <Display_status+0x376>
		}
		else if((General_error & (1 << DISARMED)) != 0)
    2a6c:	80 91 20 05 	lds	r24, 0x0520
    2a70:	82 ff       	sbrs	r24, 2
    2a72:	0a c0       	rjmp	.+20     	; 0x2a88 <Display_status+0x37a>
		{
			LCD_Display_Text(18,(const unsigned char*)Verdana14,25,24); 	// Disarmed
    2a74:	28 e1       	ldi	r18, 0x18	; 24
    2a76:	30 e0       	ldi	r19, 0x00	; 0
    2a78:	49 e1       	ldi	r20, 0x19	; 25
    2a7a:	50 e0       	ldi	r21, 0x00	; 0
    2a7c:	69 e4       	ldi	r22, 0x49	; 73
    2a7e:	71 e0       	ldi	r23, 0x01	; 1
    2a80:	82 e1       	ldi	r24, 0x12	; 18
    2a82:	90 e0       	ldi	r25, 0x00	; 0
    2a84:	0e 94 3f 21 	call	0x427e	; 0x427e <LCD_Display_Text>
		}
	}

	// Write buffer to complete
	write_buffer(buffer);
    2a88:	81 e0       	ldi	r24, 0x01	; 1
    2a8a:	91 e0       	ldi	r25, 0x01	; 1
    2a8c:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <write_buffer>
	clear_buffer(buffer);
    2a90:	81 e0       	ldi	r24, 0x01	; 1
    2a92:	91 e0       	ldi	r25, 0x01	; 1
    2a94:	0e 94 5e 1f 	call	0x3ebc	; 0x3ebc <clear_buffer>
}
    2a98:	0f 90       	pop	r0
    2a9a:	0f 90       	pop	r0
    2a9c:	0f 90       	pop	r0
    2a9e:	0f 90       	pop	r0
    2aa0:	df 91       	pop	r29
    2aa2:	cf 91       	pop	r28
    2aa4:	1f 91       	pop	r17
    2aa6:	0f 91       	pop	r16
    2aa8:	ff 90       	pop	r15
    2aaa:	ef 90       	pop	r14
    2aac:	df 90       	pop	r13
    2aae:	cf 90       	pop	r12
    2ab0:	bf 90       	pop	r11
    2ab2:	08 95       	ret

00002ab4 <Display_sticks>:
//************************************************************
// Code
//************************************************************

void Display_sticks(void)
{
    2ab4:	af 92       	push	r10
    2ab6:	bf 92       	push	r11
    2ab8:	cf 92       	push	r12
    2aba:	df 92       	push	r13
    2abc:	ef 92       	push	r14
    2abe:	ff 92       	push	r15
    2ac0:	0f 93       	push	r16
    2ac2:	1f 93       	push	r17
    2ac4:	cf 93       	push	r28
    2ac6:	df 93       	push	r29
	int8_t	temp_aileron, temp_elevator, temp_rudder;
	bool	CalibrateDone = false;
	bool	CalibrateStarted = false;

	// Save original settings in case user aborts
	temp_aileron = Config.AileronPol;
    2ac8:	d0 90 e0 05 	lds	r13, 0x05E0
	temp_elevator = Config.ElevatorPol;
    2acc:	f0 90 e1 05 	lds	r15, 0x05E1
	temp_rudder = Config.RudderPol;
    2ad0:	a0 90 e2 05 	lds	r10, 0x05E2

	// Reset to defaults - not ideal, but it works
	Config.AileronPol = NORMAL;
    2ad4:	10 92 e0 05 	sts	0x05E0, r1
	Config.ElevatorPol =  NORMAL;
    2ad8:	10 92 e1 05 	sts	0x05E1, r1
	Config.RudderPol = NORMAL;
    2adc:	10 92 e2 05 	sts	0x05E2, r1
{
	int8_t	i;
	int8_t	offset;
	int8_t	temp_aileron, temp_elevator, temp_rudder;
	bool	CalibrateDone = false;
	bool	CalibrateStarted = false;
    2ae0:	d0 e0       	ldi	r29, 0x00	; 0
void Display_sticks(void)
{
	int8_t	i;
	int8_t	offset;
	int8_t	temp_aileron, temp_elevator, temp_rudder;
	bool	CalibrateDone = false;
    2ae2:	c0 e0       	ldi	r28, 0x00	; 0
	Config.AileronPol = NORMAL;
	Config.ElevatorPol =  NORMAL;
	Config.RudderPol = NORMAL;

	// Until exit button pressed or complete
	while((BUTTON1 != 0) && (!CalibrateDone))
    2ae4:	1f 9b       	sbis	0x03, 7	; 3
    2ae6:	b6 c0       	rjmp	.+364    	; 0x2c54 <Display_sticks+0x1a0>
    2ae8:	c1 11       	cpse	r28, r1
    2aea:	b6 c0       	rjmp	.+364    	; 0x2c58 <Display_sticks+0x1a4>
	{
		// Draw first stick on the left
		offset = 0;

		// Clear screen buffer
		clear_buffer(buffer);
    2aec:	81 e0       	ldi	r24, 0x01	; 1
    2aee:	91 e0       	ldi	r25, 0x01	; 1
    2af0:	0e 94 5e 1f 	call	0x3ebc	; 0x3ebc <clear_buffer>
    2af4:	92 e0       	ldi	r25, 0x02	; 2
    2af6:	c9 2e       	mov	r12, r25

	// Until exit button pressed or complete
	while((BUTTON1 != 0) && (!CalibrateDone))
	{
		// Draw first stick on the left
		offset = 0;
    2af8:	10 e0       	ldi	r17, 0x00	; 0
		clear_buffer(buffer);

		// Draw graphic
		for (i = 0; i < 2; i++)
		{
			drawrect(buffer, 17 + offset, 0, 40, 40, 1);			// Box
    2afa:	61 e1       	ldi	r22, 0x11	; 17
    2afc:	61 0f       	add	r22, r17
    2afe:	ee 24       	eor	r14, r14
    2b00:	e3 94       	inc	r14
    2b02:	08 e2       	ldi	r16, 0x28	; 40
    2b04:	28 e2       	ldi	r18, 0x28	; 40
    2b06:	40 e0       	ldi	r20, 0x00	; 0
    2b08:	81 e0       	ldi	r24, 0x01	; 1
    2b0a:	91 e0       	ldi	r25, 0x01	; 1
    2b0c:	0e 94 5c 20 	call	0x40b8	; 0x40b8 <drawrect>
			drawline(buffer, 38 + offset,20, 48 + offset,  3, 1); 	// Line 1
    2b10:	86 e2       	ldi	r24, 0x26	; 38
    2b12:	b8 2e       	mov	r11, r24
    2b14:	b1 0e       	add	r11, r17
    2b16:	20 e3       	ldi	r18, 0x30	; 48
    2b18:	21 0f       	add	r18, r17
    2b1a:	03 e0       	ldi	r16, 0x03	; 3
    2b1c:	44 e1       	ldi	r20, 0x14	; 20
    2b1e:	6b 2d       	mov	r22, r11
    2b20:	81 e0       	ldi	r24, 0x01	; 1
    2b22:	91 e0       	ldi	r25, 0x01	; 1
    2b24:	0e 94 be 1f 	call	0x3f7c	; 0x3f7c <drawline>
			drawline(buffer, 41 + offset,21, 56 + offset,  6, 1); 	// Line 2
    2b28:	28 e3       	ldi	r18, 0x38	; 56
    2b2a:	21 0f       	add	r18, r17
    2b2c:	69 e2       	ldi	r22, 0x29	; 41
    2b2e:	61 0f       	add	r22, r17
    2b30:	06 e0       	ldi	r16, 0x06	; 6
    2b32:	45 e1       	ldi	r20, 0x15	; 21
    2b34:	81 e0       	ldi	r24, 0x01	; 1
    2b36:	91 e0       	ldi	r25, 0x01	; 1
    2b38:	0e 94 be 1f 	call	0x3f7c	; 0x3f7c <drawline>
			fillcircle(buffer, 38 + offset, 21, 2, 1);				// Center
    2b3c:	01 e0       	ldi	r16, 0x01	; 1
    2b3e:	22 e0       	ldi	r18, 0x02	; 2
    2b40:	45 e1       	ldi	r20, 0x15	; 21
    2b42:	6b 2d       	mov	r22, r11
    2b44:	81 e0       	ldi	r24, 0x01	; 1
    2b46:	91 e0       	ldi	r25, 0x01	; 1
    2b48:	0e 94 ae 20 	call	0x415c	; 0x415c <fillcircle>
			fillcircle(buffer, 51 + offset, 5, 4, 1);				// End
    2b4c:	63 e3       	ldi	r22, 0x33	; 51
    2b4e:	61 0f       	add	r22, r17
    2b50:	24 e0       	ldi	r18, 0x04	; 4
    2b52:	45 e0       	ldi	r20, 0x05	; 5
    2b54:	81 e0       	ldi	r24, 0x01	; 1
    2b56:	91 e0       	ldi	r25, 0x01	; 1
    2b58:	0e 94 ae 20 	call	0x415c	; 0x415c <fillcircle>
    2b5c:	ca 94       	dec	r12

		// Clear screen buffer
		clear_buffer(buffer);

		// Draw graphic
		for (i = 0; i < 2; i++)
    2b5e:	11 f0       	breq	.+4      	; 0x2b64 <Display_sticks+0xb0>
			drawline(buffer, 41 + offset,21, 56 + offset,  6, 1); 	// Line 2
			fillcircle(buffer, 38 + offset, 21, 2, 1);				// Center
			fillcircle(buffer, 51 + offset, 5, 4, 1);				// End

			// Draw second stick on the right
			offset = 52;
    2b60:	14 e3       	ldi	r17, 0x34	; 52
    2b62:	cb cf       	rjmp	.-106    	; 0x2afa <Display_sticks+0x46>
		}

		// Print bottom text and markers
		LCD_Display_Text(12, (const unsigned char*)Wingdings, 0, 57); 		// Left
    2b64:	29 e3       	ldi	r18, 0x39	; 57
    2b66:	30 e0       	ldi	r19, 0x00	; 0
    2b68:	40 e0       	ldi	r20, 0x00	; 0
    2b6a:	50 e0       	ldi	r21, 0x00	; 0
    2b6c:	6f ed       	ldi	r22, 0xDF	; 223
    2b6e:	70 e0       	ldi	r23, 0x00	; 0
    2b70:	8c e0       	ldi	r24, 0x0C	; 12
    2b72:	90 e0       	ldi	r25, 0x00	; 0
    2b74:	0e 94 3f 21 	call	0x427e	; 0x427e <LCD_Display_Text>

		// If uncalibrated
		if (!CalibrateDone)
		{
			RxGetChannels();
    2b78:	0e 94 ee 41 	call	0x83dc	; 0x83dc <RxGetChannels>
			
			// Display warning if sticks not centered or no RC signal while not started calibrating
			if (((RCinputs[AILERON] < -2000) || (RCinputs[AILERON] > 2000)) && !CalibrateStarted)
    2b7c:	80 91 2f 08 	lds	r24, 0x082F
    2b80:	90 91 30 08 	lds	r25, 0x0830
    2b84:	80 33       	cpi	r24, 0x30	; 48
    2b86:	98 4f       	sbci	r25, 0xF8	; 248
    2b88:	3c f0       	brlt	.+14     	; 0x2b98 <Display_sticks+0xe4>
    2b8a:	80 91 2f 08 	lds	r24, 0x082F
    2b8e:	90 91 30 08 	lds	r25, 0x0830
    2b92:	81 3d       	cpi	r24, 0xD1	; 209
    2b94:	97 40       	sbci	r25, 0x07	; 7
    2b96:	6c f0       	brlt	.+26     	; 0x2bb2 <Display_sticks+0xfe>
    2b98:	d1 11       	cpse	r29, r1
    2b9a:	0b c0       	rjmp	.+22     	; 0x2bb2 <Display_sticks+0xfe>
			{
				LCD_Display_Text(135,(const unsigned char*)Verdana14,16,43); 	// "No RX signal?"
    2b9c:	2b e2       	ldi	r18, 0x2B	; 43
    2b9e:	30 e0       	ldi	r19, 0x00	; 0
    2ba0:	40 e1       	ldi	r20, 0x10	; 16
    2ba2:	50 e0       	ldi	r21, 0x00	; 0
    2ba4:	69 e4       	ldi	r22, 0x49	; 73
    2ba6:	71 e0       	ldi	r23, 0x01	; 1
    2ba8:	87 e8       	ldi	r24, 0x87	; 135
    2baa:	90 e0       	ldi	r25, 0x00	; 0
    2bac:	0e 94 3f 21 	call	0x427e	; 0x427e <LCD_Display_Text>
    2bb0:	4c c0       	rjmp	.+152    	; 0x2c4a <Display_sticks+0x196>
			}

			// Sticks have not moved far enough but RC being received
			else if ((RCinputs[AILERON] < 500) && (RCinputs[AILERON] > -500))
    2bb2:	80 91 2f 08 	lds	r24, 0x082F
    2bb6:	90 91 30 08 	lds	r25, 0x0830
    2bba:	84 3f       	cpi	r24, 0xF4	; 244
    2bbc:	91 40       	sbci	r25, 0x01	; 1
    2bbe:	9c f4       	brge	.+38     	; 0x2be6 <Display_sticks+0x132>
    2bc0:	80 91 2f 08 	lds	r24, 0x082F
    2bc4:	90 91 30 08 	lds	r25, 0x0830
    2bc8:	8d 30       	cpi	r24, 0x0D	; 13
    2bca:	9e 4f       	sbci	r25, 0xFE	; 254
    2bcc:	64 f0       	brlt	.+24     	; 0x2be6 <Display_sticks+0x132>
			{
				CalibrateStarted = true;
				LCD_Display_Text(136,(const unsigned char*)Verdana14,9,43); 	// "Hold as shown"
    2bce:	2b e2       	ldi	r18, 0x2B	; 43
    2bd0:	30 e0       	ldi	r19, 0x00	; 0
    2bd2:	49 e0       	ldi	r20, 0x09	; 9
    2bd4:	50 e0       	ldi	r21, 0x00	; 0
    2bd6:	69 e4       	ldi	r22, 0x49	; 73
    2bd8:	71 e0       	ldi	r23, 0x01	; 1
    2bda:	88 e8       	ldi	r24, 0x88	; 136
    2bdc:	90 e0       	ldi	r25, 0x00	; 0
    2bde:	0e 94 3f 21 	call	0x427e	; 0x427e <LCD_Display_Text>
			}

			// Sticks have not moved far enough but RC being received
			else if ((RCinputs[AILERON] < 500) && (RCinputs[AILERON] > -500))
			{
				CalibrateStarted = true;
    2be2:	d1 e0       	ldi	r29, 0x01	; 1
				LCD_Display_Text(136,(const unsigned char*)Verdana14,9,43); 	// "Hold as shown"
    2be4:	32 c0       	rjmp	.+100    	; 0x2c4a <Display_sticks+0x196>

			// Sticks should now be in the right position
			// Reverse wrong input channels
			else
			{
				if (RCinputs[AILERON] < 0)
    2be6:	80 91 2f 08 	lds	r24, 0x082F
    2bea:	90 91 30 08 	lds	r25, 0x0830
    2bee:	97 ff       	sbrs	r25, 7
    2bf0:	03 c0       	rjmp	.+6      	; 0x2bf8 <Display_sticks+0x144>
				{
					Config.AileronPol = REVERSED;
    2bf2:	81 e0       	ldi	r24, 0x01	; 1
    2bf4:	80 93 e0 05 	sts	0x05E0, r24
				}

				if (RCinputs[ELEVATOR] < 0)
    2bf8:	80 91 31 08 	lds	r24, 0x0831
    2bfc:	90 91 32 08 	lds	r25, 0x0832
    2c00:	97 ff       	sbrs	r25, 7
    2c02:	03 c0       	rjmp	.+6      	; 0x2c0a <Display_sticks+0x156>
				{
					Config.ElevatorPol = REVERSED;
    2c04:	81 e0       	ldi	r24, 0x01	; 1
    2c06:	80 93 e1 05 	sts	0x05E1, r24
				}

				if (RCinputs[RUDDER] < 0)
    2c0a:	80 91 33 08 	lds	r24, 0x0833
    2c0e:	90 91 34 08 	lds	r25, 0x0834
    2c12:	97 ff       	sbrs	r25, 7
    2c14:	03 c0       	rjmp	.+6      	; 0x2c1c <Display_sticks+0x168>
				{
					Config.RudderPol = REVERSED;
    2c16:	81 e0       	ldi	r24, 0x01	; 1
    2c18:	80 93 e2 05 	sts	0x05E2, r24
				}

				// If all positive - done!
				if ((RCinputs[AILERON] > 0) && (RCinputs[ELEVATOR] > 0) && (RCinputs[RUDDER] > 0))
    2c1c:	80 91 2f 08 	lds	r24, 0x082F
    2c20:	90 91 30 08 	lds	r25, 0x0830
    2c24:	18 16       	cp	r1, r24
    2c26:	19 06       	cpc	r1, r25
    2c28:	84 f4       	brge	.+32     	; 0x2c4a <Display_sticks+0x196>
    2c2a:	80 91 31 08 	lds	r24, 0x0831
    2c2e:	90 91 32 08 	lds	r25, 0x0832
    2c32:	18 16       	cp	r1, r24
    2c34:	19 06       	cpc	r1, r25
    2c36:	4c f4       	brge	.+18     	; 0x2c4a <Display_sticks+0x196>
    2c38:	80 91 33 08 	lds	r24, 0x0833
    2c3c:	90 91 34 08 	lds	r25, 0x0834
    2c40:	c1 e0       	ldi	r28, 0x01	; 1
    2c42:	18 16       	cp	r1, r24
    2c44:	19 06       	cpc	r1, r25
    2c46:	0c f0       	brlt	.+2      	; 0x2c4a <Display_sticks+0x196>
    2c48:	c0 e0       	ldi	r28, 0x00	; 0
				}
			}
		}

		// Update buffer
		write_buffer(buffer);
    2c4a:	81 e0       	ldi	r24, 0x01	; 1
    2c4c:	91 e0       	ldi	r25, 0x01	; 1
    2c4e:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <write_buffer>
    2c52:	48 cf       	rjmp	.-368    	; 0x2ae4 <Display_sticks+0x30>
	}

	// Save value and return
	if (CalibrateDone)
    2c54:	cc 23       	and	r28, r28
    2c56:	39 f1       	breq	.+78     	; 0x2ca6 <Display_sticks+0x1f2>
	{
		LCD_Display_Text(137,(const unsigned char*)Verdana14,40,43); 	// "Done!"
    2c58:	2b e2       	ldi	r18, 0x2B	; 43
    2c5a:	30 e0       	ldi	r19, 0x00	; 0
    2c5c:	48 e2       	ldi	r20, 0x28	; 40
    2c5e:	50 e0       	ldi	r21, 0x00	; 0
    2c60:	69 e4       	ldi	r22, 0x49	; 73
    2c62:	71 e0       	ldi	r23, 0x01	; 1
    2c64:	89 e8       	ldi	r24, 0x89	; 137
    2c66:	90 e0       	ldi	r25, 0x00	; 0
    2c68:	0e 94 3f 21 	call	0x427e	; 0x427e <LCD_Display_Text>
		// Update buffer
		write_buffer(buffer);
    2c6c:	81 e0       	ldi	r24, 0x01	; 1
    2c6e:	91 e0       	ldi	r25, 0x01	; 1
    2c70:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <write_buffer>
		clear_buffer(buffer);
    2c74:	81 e0       	ldi	r24, 0x01	; 1
    2c76:	91 e0       	ldi	r25, 0x01	; 1
    2c78:	0e 94 5e 1f 	call	0x3ebc	; 0x3ebc <clear_buffer>
    2c7c:	8f e7       	ldi	r24, 0x7F	; 127
    2c7e:	94 e8       	ldi	r25, 0x84	; 132
    2c80:	2e e1       	ldi	r18, 0x1E	; 30
    2c82:	81 50       	subi	r24, 0x01	; 1
    2c84:	90 40       	sbci	r25, 0x00	; 0
    2c86:	20 40       	sbci	r18, 0x00	; 0
    2c88:	e1 f7       	brne	.-8      	; 0x2c82 <Display_sticks+0x1ce>
    2c8a:	00 c0       	rjmp	.+0      	; 0x2c8c <Display_sticks+0x1d8>
    2c8c:	00 00       	nop
		// Restore old settings if failed
		Config.AileronPol = temp_aileron;
		Config.ElevatorPol = temp_elevator;
		Config.RudderPol = temp_rudder;
	}
}
    2c8e:	df 91       	pop	r29
    2c90:	cf 91       	pop	r28
    2c92:	1f 91       	pop	r17
    2c94:	0f 91       	pop	r16
    2c96:	ff 90       	pop	r15
    2c98:	ef 90       	pop	r14
    2c9a:	df 90       	pop	r13
    2c9c:	cf 90       	pop	r12
    2c9e:	bf 90       	pop	r11
    2ca0:	af 90       	pop	r10
		// Update buffer
		write_buffer(buffer);
		clear_buffer(buffer);
		// Pause so that the "Done!" text is readable
		_delay_ms(500);
		Save_Config_to_EEPROM();
    2ca2:	0c 94 9c 16 	jmp	0x2d38	; 0x2d38 <Save_Config_to_EEPROM>
 	}
	else
	{
		// Restore old settings if failed
		Config.AileronPol = temp_aileron;
    2ca6:	d0 92 e0 05 	sts	0x05E0, r13
		Config.ElevatorPol = temp_elevator;
    2caa:	f0 92 e1 05 	sts	0x05E1, r15
		Config.RudderPol = temp_rudder;
    2cae:	a0 92 e2 05 	sts	0x05E2, r10
	}
}
    2cb2:	df 91       	pop	r29
    2cb4:	cf 91       	pop	r28
    2cb6:	1f 91       	pop	r17
    2cb8:	0f 91       	pop	r16
    2cba:	ff 90       	pop	r15
    2cbc:	ef 90       	pop	r14
    2cbe:	df 90       	pop	r13
    2cc0:	cf 90       	pop	r12
    2cc2:	bf 90       	pop	r11
    2cc4:	af 90       	pop	r10
    2cc6:	08 95       	ret

00002cc8 <eeprom_write_byte_changed>:
}

// addr is the address in eeprom
// value is the value to be written
void eeprom_write_byte_changed(uint8_t *addr, uint8_t value)
{
    2cc8:	0f 93       	push	r16
    2cca:	1f 93       	push	r17
    2ccc:	cf 93       	push	r28
    2cce:	df 93       	push	r29
    2cd0:	1f 92       	push	r1
    2cd2:	cd b7       	in	r28, 0x3d	; 61
    2cd4:	de b7       	in	r29, 0x3e	; 62
    2cd6:	8c 01       	movw	r16, r24
	if (eeprom_read_byte(addr) != value)
    2cd8:	69 83       	std	Y+1, r22	; 0x01
    2cda:	0e 94 e2 47 	call	0x8fc4	; 0x8fc4 <__eerd_byte_m644pa>
    2cde:	69 81       	ldd	r22, Y+1	; 0x01
    2ce0:	86 17       	cp	r24, r22
    2ce2:	41 f0       	breq	.+16     	; 0x2cf4 <eeprom_write_byte_changed+0x2c>
	{
		// void eeprom_write_byte (uint8_t *__p, uint8_t __value);
		eeprom_write_byte(addr, value);
    2ce4:	c8 01       	movw	r24, r16
	}
}
    2ce6:	0f 90       	pop	r0
    2ce8:	df 91       	pop	r29
    2cea:	cf 91       	pop	r28
    2cec:	1f 91       	pop	r17
    2cee:	0f 91       	pop	r16
void eeprom_write_byte_changed(uint8_t *addr, uint8_t value)
{
	if (eeprom_read_byte(addr) != value)
	{
		// void eeprom_write_byte (uint8_t *__p, uint8_t __value);
		eeprom_write_byte(addr, value);
    2cf0:	0c 94 ea 47 	jmp	0x8fd4	; 0x8fd4 <__eewr_byte_m644pa>
	}
}
    2cf4:	0f 90       	pop	r0
    2cf6:	df 91       	pop	r29
    2cf8:	cf 91       	pop	r28
    2cfa:	1f 91       	pop	r17
    2cfc:	0f 91       	pop	r16
    2cfe:	08 95       	ret

00002d00 <eeprom_write_block_changes>:
}

// src is the address in RAM
// dest is the address in eeprom (hence const)
void eeprom_write_block_changes(uint8_t *src, uint8_t *dest, uint16_t size)
{ 
    2d00:	ef 92       	push	r14
    2d02:	ff 92       	push	r15
    2d04:	0f 93       	push	r16
    2d06:	1f 93       	push	r17
    2d08:	cf 93       	push	r28
    2d0a:	df 93       	push	r29
    2d0c:	ec 01       	movw	r28, r24
    2d0e:	8b 01       	movw	r16, r22
    2d10:	7a 01       	movw	r14, r20
    2d12:	e8 0e       	add	r14, r24
    2d14:	f9 1e       	adc	r15, r25
	uint16_t len;
	uint8_t value;

	for (len=0; len < size; len++)
    2d16:	ce 15       	cp	r28, r14
    2d18:	df 05       	cpc	r29, r15
    2d1a:	39 f0       	breq	.+14     	; 0x2d2a <eeprom_write_block_changes+0x2a>
	{
		// Get value at src
		value = *src;
		
		// Write the value at src to dest
		eeprom_write_byte_changed(dest, value);
    2d1c:	69 91       	ld	r22, Y+
    2d1e:	c8 01       	movw	r24, r16
    2d20:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <eeprom_write_byte_changed>
		src++;
		dest++;
    2d24:	0f 5f       	subi	r16, 0xFF	; 255
    2d26:	1f 4f       	sbci	r17, 0xFF	; 255
    2d28:	f6 cf       	rjmp	.-20     	; 0x2d16 <eeprom_write_block_changes+0x16>
	}
}
    2d2a:	df 91       	pop	r29
    2d2c:	cf 91       	pop	r28
    2d2e:	1f 91       	pop	r17
    2d30:	0f 91       	pop	r16
    2d32:	ff 90       	pop	r15
    2d34:	ef 90       	pop	r14
    2d36:	08 95       	ret

00002d38 <Save_Config_to_EEPROM>:
const uint8_t	FUTABA[MAX_RC_CHANNELS] PROGMEM = {1,2,0,3,4,5,6,7}; 	// Futaba channel sequence (AETRGF12)

void Save_Config_to_EEPROM(void)
{
	// Write to eeProm
	cli();
    2d38:	f8 94       	cli
	eeprom_write_block_changes((uint8_t*)&Config, (uint8_t*)EEPROM_DATA_START_POS, sizeof(CONFIG_STRUCT));	
    2d3a:	48 e0       	ldi	r20, 0x08	; 8
    2d3c:	52 e0       	ldi	r21, 0x02	; 2
    2d3e:	60 e0       	ldi	r22, 0x00	; 0
    2d40:	70 e0       	ldi	r23, 0x00	; 0
    2d42:	83 eb       	ldi	r24, 0xB3	; 179
    2d44:	95 e0       	ldi	r25, 0x05	; 5
    2d46:	0e 94 80 16 	call	0x2d00	; 0x2d00 <eeprom_write_block_changes>
	sei();
    2d4a:	78 94       	sei
    2d4c:	08 95       	ret

00002d4e <Update_V1_0_to_V1_1>:
// Config data restructure code
//************************************************************

// Upgrade V1.0 structure to V1.1 structure
void Update_V1_0_to_V1_1(void)
{
    2d4e:	2f 92       	push	r2
    2d50:	3f 92       	push	r3
    2d52:	4f 92       	push	r4
    2d54:	5f 92       	push	r5
    2d56:	6f 92       	push	r6
    2d58:	7f 92       	push	r7
    2d5a:	8f 92       	push	r8
    2d5c:	9f 92       	push	r9
    2d5e:	af 92       	push	r10
    2d60:	bf 92       	push	r11
    2d62:	cf 92       	push	r12
    2d64:	df 92       	push	r13
    2d66:	ef 92       	push	r14
    2d68:	ff 92       	push	r15
    2d6a:	0f 93       	push	r16
    2d6c:	1f 93       	push	r17
    2d6e:	cf 93       	push	r28
    2d70:	df 93       	push	r29
    2d72:	cd b7       	in	r28, 0x3d	; 61
    2d74:	de b7       	in	r29, 0x3e	; 62
    2d76:	c5 54       	subi	r28, 0x45	; 69
    2d78:	d1 40       	sbci	r29, 0x01	; 1
    2d7a:	0f b6       	in	r0, 0x3f	; 63
    2d7c:	f8 94       	cli
    2d7e:	de bf       	out	0x3e, r29	; 62
    2d80:	0f be       	out	0x3f, r0	; 63
    2d82:	cd bf       	out	0x3d, r28	; 61
	int8_t		P2_sensors;				// Sensor switches (6)
	int8_t		P1_scale;				// P1 sensor scale flags (6)
	int8_t		P2_scale;				// P2 sensor scale flags (6)

	// Save old P2 Source B volume
	memcpy((void*)&temp,(void*)1836,1); // Ugly - fix this properly.
    2d84:	40 91 2c 07 	lds	r20, 0x072C
    2d88:	cf 5b       	subi	r28, 0xBF	; 191
    2d8a:	de 4f       	sbci	r29, 0xFE	; 254
    2d8c:	48 83       	st	Y, r20
    2d8e:	c1 54       	subi	r28, 0x41	; 65
    2d90:	d1 40       	sbci	r29, 0x01	; 1
	 
	// Move data that exists after the channel mixer to new location
	// Hard-coded to V1.0 RAM location	
	memmove((void*)&Config.Servo_reverse, (void*)1837, 74);	// RAM location determined empirically
    2d92:	4a e4       	ldi	r20, 0x4A	; 74
    2d94:	50 e0       	ldi	r21, 0x00	; 0
    2d96:	6d e2       	ldi	r22, 0x2D	; 45
    2d98:	77 e0       	ldi	r23, 0x07	; 7
    2d9a:	85 e7       	ldi	r24, 0x75	; 117
    2d9c:	97 e0       	ldi	r25, 0x07	; 7
    2d9e:	0e 94 9b 47 	call	0x8f36	; 0x8f36 <memmove>
    2da2:	25 e4       	ldi	r18, 0x45	; 69
    2da4:	36 e0       	ldi	r19, 0x06	; 6
    2da6:	ae 01       	movw	r20, r28
    2da8:	4f 5c       	subi	r20, 0xCF	; 207
    2daa:	5e 4f       	sbci	r21, 0xFE	; 254
    2dac:	ce 01       	movw	r24, r28
    2dae:	01 96       	adiw	r24, 0x01	; 1
	{
		src = (void*)Config.Channel;	// Same location as old one
		dst = (void*)mixer_buffer;
		src += (i * OLDSIZE);			// Step to next old data in (corrupted) config structure
		dst += (i * NEWSIZE);			// Step to next location for new data in the buffer
		memcpy(dst, src, OLDSIZE);		// Move only the old (smaller) data
    2db0:	6d e1       	ldi	r22, 0x1D	; 29
    2db2:	f9 01       	movw	r30, r18
    2db4:	dc 01       	movw	r26, r24
    2db6:	76 2f       	mov	r23, r22
    2db8:	01 90       	ld	r0, Z+
    2dba:	0d 92       	st	X+, r0
    2dbc:	7a 95       	dec	r23
    2dbe:	e1 f7       	brne	.-8      	; 0x2db8 <Update_V1_0_to_V1_1+0x6a>
    2dc0:	86 96       	adiw	r24, 0x26	; 38
    2dc2:	23 5e       	subi	r18, 0xE3	; 227
    2dc4:	3f 4f       	sbci	r19, 0xFF	; 255
	// Move data that exists after the channel mixer to new location
	// Hard-coded to V1.0 RAM location	
	memmove((void*)&Config.Servo_reverse, (void*)1837, 74);	// RAM location determined empirically
	
	// Copy the old channel[] structure into buffer, spaced out to match the new structure
	for (i = 0; i < MAX_OUTPUTS; i++)
    2dc6:	84 17       	cp	r24, r20
    2dc8:	95 07       	cpc	r25, r21
    2dca:	99 f7       	brne	.-26     	; 0x2db2 <Update_V1_0_to_V1_1+0x64>
    2dcc:	4e 01       	movw	r8, r28
    2dce:	83 e1       	ldi	r24, 0x13	; 19
    2dd0:	88 0e       	add	r8, r24
    2dd2:	91 1c       	adc	r9, r1
    2dd4:	5e 01       	movw	r10, r28
    2dd6:	94 e1       	ldi	r25, 0x14	; 20
    2dd8:	a9 0e       	add	r10, r25
    2dda:	b1 1c       	adc	r11, r1
    2ddc:	6e 01       	movw	r12, r28
    2dde:	e5 e1       	ldi	r30, 0x15	; 21
    2de0:	ce 0e       	add	r12, r30
    2de2:	d1 1c       	adc	r13, r1
    2de4:	ce 01       	movw	r24, r28
    2de6:	46 96       	adiw	r24, 0x16	; 22
    2de8:	cf 5c       	subi	r28, 0xCF	; 207
    2dea:	de 4f       	sbci	r29, 0xFE	; 254
    2dec:	99 83       	std	Y+1, r25	; 0x01
    2dee:	88 83       	st	Y, r24
    2df0:	c1 53       	subi	r28, 0x31	; 49
    2df2:	d1 40       	sbci	r29, 0x01	; 1
    2df4:	8e 01       	movw	r16, r28
    2df6:	02 5e       	subi	r16, 0xE2	; 226
    2df8:	1f 4f       	sbci	r17, 0xFF	; 255
    2dfa:	fe 01       	movw	r30, r28
    2dfc:	7d 96       	adiw	r30, 0x1d	; 29
    2dfe:	c7 5c       	subi	r28, 0xC7	; 199
    2e00:	de 4f       	sbci	r29, 0xFE	; 254
    2e02:	f9 83       	std	Y+1, r31	; 0x01
    2e04:	e8 83       	st	Y, r30
    2e06:	c9 53       	subi	r28, 0x39	; 57
    2e08:	d1 40       	sbci	r29, 0x01	; 1
    2e0a:	06 96       	adiw	r24, 0x06	; 6
    2e0c:	cd 5c       	subi	r28, 0xCD	; 205
    2e0e:	de 4f       	sbci	r29, 0xFE	; 254
    2e10:	99 83       	std	Y+1, r25	; 0x01
    2e12:	88 83       	st	Y, r24
    2e14:	c3 53       	subi	r28, 0x33	; 51
    2e16:	d1 40       	sbci	r29, 0x01	; 1
    2e18:	32 97       	sbiw	r30, 0x02	; 2
    2e1a:	c3 5c       	subi	r28, 0xC3	; 195
    2e1c:	de 4f       	sbci	r29, 0xFE	; 254
    2e1e:	f9 83       	std	Y+1, r31	; 0x01
    2e20:	e8 83       	st	Y, r30
    2e22:	cd 53       	subi	r28, 0x3D	; 61
    2e24:	d1 40       	sbci	r29, 0x01	; 1
    2e26:	02 97       	sbiw	r24, 0x02	; 2
    2e28:	c9 5c       	subi	r28, 0xC9	; 201
    2e2a:	de 4f       	sbci	r29, 0xFE	; 254
    2e2c:	99 83       	std	Y+1, r25	; 0x01
    2e2e:	88 83       	st	Y, r24
    2e30:	c7 53       	subi	r28, 0x37	; 55
    2e32:	d1 40       	sbci	r29, 0x01	; 1
    2e34:	32 97       	sbiw	r30, 0x02	; 2
    2e36:	c5 5c       	subi	r28, 0xC5	; 197
    2e38:	de 4f       	sbci	r29, 0xFE	; 254
    2e3a:	f9 83       	std	Y+1, r31	; 0x01
    2e3c:	e8 83       	st	Y, r30
    2e3e:	cb 53       	subi	r28, 0x3B	; 59
    2e40:	d1 40       	sbci	r29, 0x01	; 1
    2e42:	02 97       	sbiw	r24, 0x02	; 2
    2e44:	cb 5c       	subi	r28, 0xCB	; 203
    2e46:	de 4f       	sbci	r29, 0xFE	; 254
    2e48:	99 83       	std	Y+1, r25	; 0x01
    2e4a:	88 83       	st	Y, r24
    2e4c:	c5 53       	subi	r28, 0x35	; 53
    2e4e:	d1 40       	sbci	r29, 0x01	; 1
    2e50:	7e 01       	movw	r14, r28
    2e52:	97 e1       	ldi	r25, 0x17	; 23
    2e54:	e9 0e       	add	r14, r25
    2e56:	f1 1c       	adc	r15, r1
    2e58:	3e 01       	movw	r6, r28
    2e5a:	e5 e0       	ldi	r30, 0x05	; 5
    2e5c:	6e 0e       	add	r6, r30
    2e5e:	71 1c       	adc	r7, r1
    2e60:	81 e0       	ldi	r24, 0x01	; 1
    2e62:	90 e0       	ldi	r25, 0x00	; 0
    2e64:	8c 0f       	add	r24, r28
    2e66:	9d 1f       	adc	r25, r29
    2e68:	83 5b       	subi	r24, 0xB3	; 179
    2e6a:	9e 4f       	sbci	r25, 0xFE	; 254
    2e6c:	ce 5b       	subi	r28, 0xBE	; 190
    2e6e:	de 4f       	sbci	r29, 0xFE	; 254
    2e70:	99 83       	std	Y+1, r25	; 0x01
    2e72:	88 83       	st	Y, r24
    2e74:	c2 54       	subi	r28, 0x42	; 66
    2e76:	d1 40       	sbci	r29, 0x01	; 1
    2e78:	fe 01       	movw	r30, r28
    2e7a:	31 96       	adiw	r30, 0x01	; 1
    2e7c:	c1 5c       	subi	r28, 0xC1	; 193
    2e7e:	de 4f       	sbci	r29, 0xFE	; 254
    2e80:	f9 83       	std	Y+1, r31	; 0x01
    2e82:	e8 83       	st	Y, r30
    2e84:	cf 53       	subi	r28, 0x3F	; 63
    2e86:	d1 40       	sbci	r29, 0x01	; 1
		
		// Take old motor marker switch and convert
		if ((P1_sensors & (1 << MotorMarker)) != 0)
		{
			// Set the new value in the right place
			mixer_buffer[4 + (i * NEWSIZE)] = MOTOR;
    2e88:	82 e0       	ldi	r24, 0x02	; 2
    2e8a:	58 2e       	mov	r5, r24
			{
				mixer_buffer[18 + (i * NEWSIZE)] = SCALE;
			}
			else
			{
				mixer_buffer[18 + (i * NEWSIZE)] = ON;
    2e8c:	44 24       	eor	r4, r4
    2e8e:	43 94       	inc	r4
	for (i = 0; i < MAX_OUTPUTS; i++)
	{
		// Move all bytes from the OLD P1_offset [4] up by one to make space for the Motor_marker byte
		src = &mixer_buffer[4 + (i * NEWSIZE)];	// The old P1_offset byte
		dst = &mixer_buffer[5 + (i * NEWSIZE)];
		memmove(dst, src, (OLDSIZE - 4));// Move all but P1_value, P2_value
    2e90:	49 e1       	ldi	r20, 0x19	; 25
    2e92:	50 e0       	ldi	r21, 0x00	; 0
    2e94:	b3 01       	movw	r22, r6
    2e96:	c8 01       	movw	r24, r16
    2e98:	48 97       	sbiw	r24, 0x18	; 24
    2e9a:	0e 94 9b 47 	call	0x8f36	; 0x8f36 <memmove>

		// Save the old switches
		P1_sensors = mixer_buffer[18 + (i * NEWSIZE)];
    2e9e:	f4 01       	movw	r30, r8
    2ea0:	30 80       	ld	r3, Z
		P2_sensors = mixer_buffer[19 + (i * NEWSIZE)];
    2ea2:	f5 01       	movw	r30, r10
    2ea4:	20 81       	ld	r18, Z
		P1_scale = mixer_buffer[20 + (i * NEWSIZE)];
    2ea6:	f6 01       	movw	r30, r12
    2ea8:	30 81       	ld	r19, Z
		P2_scale = mixer_buffer[21 + (i * NEWSIZE)];
    2eaa:	cf 5c       	subi	r28, 0xCF	; 207
    2eac:	de 4f       	sbci	r29, 0xFE	; 254
    2eae:	e8 81       	ld	r30, Y
    2eb0:	f9 81       	ldd	r31, Y+1	; 0x01
    2eb2:	c1 53       	subi	r28, 0x31	; 49
    2eb4:	d1 40       	sbci	r29, 0x01	; 1
    2eb6:	20 80       	ld	r2, Z
		
		// Take old motor marker switch and convert
		if ((P1_sensors & (1 << MotorMarker)) != 0)
		{
			// Set the new value in the right place
			mixer_buffer[4 + (i * NEWSIZE)] = MOTOR;
    2eb8:	f3 01       	movw	r30, r6
		P2_sensors = mixer_buffer[19 + (i * NEWSIZE)];
		P1_scale = mixer_buffer[20 + (i * NEWSIZE)];
		P2_scale = mixer_buffer[21 + (i * NEWSIZE)];
		
		// Take old motor marker switch and convert
		if ((P1_sensors & (1 << MotorMarker)) != 0)
    2eba:	36 fe       	sbrs	r3, 6
    2ebc:	02 c0       	rjmp	.+4      	; 0x2ec2 <Update_V1_0_to_V1_1+0x174>
		{
			// Set the new value in the right place
			mixer_buffer[4 + (i * NEWSIZE)] = MOTOR;
    2ebe:	50 82       	st	Z, r5
    2ec0:	01 c0       	rjmp	.+2      	; 0x2ec4 <Update_V1_0_to_V1_1+0x176>
		}
		else
		{
			mixer_buffer[4 + (i * NEWSIZE)] = ASERVO;
    2ec2:	10 82       	st	Z, r1
		}

		// Move the universal source bytes (8) up eight bytes
		src = &mixer_buffer[22 + (i * NEWSIZE)]; // 21 + 1
		dst = &mixer_buffer[30 + (i * NEWSIZE)];
		memmove(dst, src, 8);
    2ec4:	48 e0       	ldi	r20, 0x08	; 8
    2ec6:	50 e0       	ldi	r21, 0x00	; 0
    2ec8:	b7 01       	movw	r22, r14
    2eca:	c8 01       	movw	r24, r16
    2ecc:	01 96       	adiw	r24, 0x01	; 1
    2ece:	cc 5b       	subi	r28, 0xBC	; 188
    2ed0:	de 4f       	sbci	r29, 0xFE	; 254
    2ed2:	28 83       	st	Y, r18
    2ed4:	c4 54       	subi	r28, 0x44	; 68
    2ed6:	d1 40       	sbci	r29, 0x01	; 1
    2ed8:	cb 5b       	subi	r28, 0xBB	; 187
    2eda:	de 4f       	sbci	r29, 0xFE	; 254
    2edc:	38 83       	st	Y, r19
    2ede:	c5 54       	subi	r28, 0x45	; 69
    2ee0:	d1 40       	sbci	r29, 0x01	; 1
    2ee2:	0e 94 9b 47 	call	0x8f36	; 0x8f36 <memmove>
    2ee6:	80 e0       	ldi	r24, 0x00	; 0
    2ee8:	90 e0       	ldi	r25, 0x00	; 0
    2eea:	cb 5b       	subi	r28, 0xBB	; 187
    2eec:	de 4f       	sbci	r29, 0xFE	; 254
    2eee:	38 81       	ld	r19, Y
    2ef0:	c5 54       	subi	r28, 0x45	; 69
    2ef2:	d1 40       	sbci	r29, 0x01	; 1
    2ef4:	cc 5b       	subi	r28, 0xBC	; 188
    2ef6:	de 4f       	sbci	r29, 0xFE	; 254
    2ef8:	28 81       	ld	r18, Y
    2efa:	c4 54       	subi	r28, 0x44	; 68
    2efc:	d1 40       	sbci	r29, 0x01	; 1
    2efe:	c1 5c       	subi	r28, 0xC1	; 193
    2f00:	de 4f       	sbci	r29, 0xFE	; 254
    2f02:	e8 81       	ld	r30, Y
    2f04:	f9 81       	ldd	r31, Y+1	; 0x01
    2f06:	cf 53       	subi	r28, 0x3F	; 63
    2f08:	d1 40       	sbci	r29, 0x01	; 1
    2f0a:	e8 0f       	add	r30, r24
    2f0c:	f9 1f       	adc	r31, r25
		
		// Convert old "None" settings to new ones
		// Skip every second byte
		for (j = 0; j < 8; j += 2)
		{
			if (mixer_buffer[30 + (i * NEWSIZE) + j] == 13) // 13 was the old "None"
    2f0e:	46 8d       	ldd	r20, Z+30	; 0x1e
    2f10:	4d 30       	cpi	r20, 0x0D	; 13
    2f12:	11 f4       	brne	.+4      	; 0x2f18 <Update_V1_0_to_V1_1+0x1ca>
			{
				mixer_buffer[30 + (i * NEWSIZE) + j] = NOMIX;
    2f14:	4f e0       	ldi	r20, 0x0F	; 15
    2f16:	46 8f       	std	Z+30, r20	; 0x1e
    2f18:	02 96       	adiw	r24, 0x02	; 2
		memmove(dst, src, 8);

		
		// Convert old "None" settings to new ones
		// Skip every second byte
		for (j = 0; j < 8; j += 2)
    2f1a:	88 30       	cpi	r24, 0x08	; 8
    2f1c:	91 05       	cpc	r25, r1
    2f1e:	79 f7       	brne	.-34     	; 0x2efe <Update_V1_0_to_V1_1+0x1b0>
		// P1 roll gyro
		if ((P1_sensors & (1 << RollGyro)) != 0)
		{
			if ((P1_scale & (1 << RollScale)) != 0)
			{
				mixer_buffer[18 + (i * NEWSIZE)] = SCALE;
    2f20:	f4 01       	movw	r30, r8
			}			
		}

		// Expand the old switches into new bytes
		// P1 roll gyro
		if ((P1_sensors & (1 << RollGyro)) != 0)
    2f22:	30 fe       	sbrs	r3, 0
    2f24:	06 c0       	rjmp	.+12     	; 0x2f32 <Update_V1_0_to_V1_1+0x1e4>
		{
			if ((P1_scale & (1 << RollScale)) != 0)
    2f26:	30 ff       	sbrs	r19, 0
    2f28:	02 c0       	rjmp	.+4      	; 0x2f2e <Update_V1_0_to_V1_1+0x1e0>
			{
				mixer_buffer[18 + (i * NEWSIZE)] = SCALE;
    2f2a:	50 82       	st	Z, r5
    2f2c:	03 c0       	rjmp	.+6      	; 0x2f34 <Update_V1_0_to_V1_1+0x1e6>
			}
			else
			{
				mixer_buffer[18 + (i * NEWSIZE)] = ON;
    2f2e:	40 82       	st	Z, r4
    2f30:	01 c0       	rjmp	.+2      	; 0x2f34 <Update_V1_0_to_V1_1+0x1e6>
			}
		}
		else
		{
			mixer_buffer[18 + (i * NEWSIZE)] = OFF;
    2f32:	10 82       	st	Z, r1
		// P2 roll gyro
		if ((P2_sensors & (1 << RollGyro)) != 0)
		{
			if ((P2_scale & (1 << RollScale)) != 0)
			{
				mixer_buffer[19 + (i * NEWSIZE)] = SCALE;
    2f34:	f5 01       	movw	r30, r10
		{
			mixer_buffer[18 + (i * NEWSIZE)] = OFF;
		}

		// P2 roll gyro
		if ((P2_sensors & (1 << RollGyro)) != 0)
    2f36:	20 ff       	sbrs	r18, 0
    2f38:	06 c0       	rjmp	.+12     	; 0x2f46 <Update_V1_0_to_V1_1+0x1f8>
		{
			if ((P2_scale & (1 << RollScale)) != 0)
    2f3a:	20 fe       	sbrs	r2, 0
    2f3c:	02 c0       	rjmp	.+4      	; 0x2f42 <Update_V1_0_to_V1_1+0x1f4>
			{
				mixer_buffer[19 + (i * NEWSIZE)] = SCALE;
    2f3e:	50 82       	st	Z, r5
    2f40:	03 c0       	rjmp	.+6      	; 0x2f48 <Update_V1_0_to_V1_1+0x1fa>
			}
			else
			{
				mixer_buffer[19 + (i * NEWSIZE)] = ON;
    2f42:	40 82       	st	Z, r4
    2f44:	01 c0       	rjmp	.+2      	; 0x2f48 <Update_V1_0_to_V1_1+0x1fa>
			}
		}
		else
		{
			mixer_buffer[19 + (i * NEWSIZE)] = OFF;
    2f46:	10 82       	st	Z, r1
		// P1 pitch gyro
		if ((P1_sensors & (1 << PitchGyro)) != 0)
		{
			if ((P1_scale & (1 << PitchScale)) != 0)
			{
				mixer_buffer[20 + (i * NEWSIZE)] = SCALE;
    2f48:	f6 01       	movw	r30, r12
		{
			mixer_buffer[19 + (i * NEWSIZE)] = OFF;
		}

		// P1 pitch gyro
		if ((P1_sensors & (1 << PitchGyro)) != 0)
    2f4a:	31 fe       	sbrs	r3, 1
    2f4c:	06 c0       	rjmp	.+12     	; 0x2f5a <Update_V1_0_to_V1_1+0x20c>
		{
			if ((P1_scale & (1 << PitchScale)) != 0)
    2f4e:	31 ff       	sbrs	r19, 1
    2f50:	02 c0       	rjmp	.+4      	; 0x2f56 <Update_V1_0_to_V1_1+0x208>
			{
				mixer_buffer[20 + (i * NEWSIZE)] = SCALE;
    2f52:	50 82       	st	Z, r5
    2f54:	03 c0       	rjmp	.+6      	; 0x2f5c <Update_V1_0_to_V1_1+0x20e>
			}
			else
			{
				mixer_buffer[20 + (i * NEWSIZE)] = ON;
    2f56:	40 82       	st	Z, r4
    2f58:	01 c0       	rjmp	.+2      	; 0x2f5c <Update_V1_0_to_V1_1+0x20e>
			}
		}
		else
		{
			mixer_buffer[20 + (i * NEWSIZE)] = OFF;
    2f5a:	10 82       	st	Z, r1
		// P2 pitch gyro
		if ((P2_sensors & (1 << PitchGyro)) != 0)
		{
			if ((P2_scale & (1 << PitchScale)) != 0)
			{
				mixer_buffer[21 + (i * NEWSIZE)] = SCALE;
    2f5c:	cf 5c       	subi	r28, 0xCF	; 207
    2f5e:	de 4f       	sbci	r29, 0xFE	; 254
    2f60:	e8 81       	ld	r30, Y
    2f62:	f9 81       	ldd	r31, Y+1	; 0x01
    2f64:	c1 53       	subi	r28, 0x31	; 49
    2f66:	d1 40       	sbci	r29, 0x01	; 1
		{
			mixer_buffer[20 + (i * NEWSIZE)] = OFF;
		}

		// P2 pitch gyro
		if ((P2_sensors & (1 << PitchGyro)) != 0)
    2f68:	21 ff       	sbrs	r18, 1
    2f6a:	06 c0       	rjmp	.+12     	; 0x2f78 <Update_V1_0_to_V1_1+0x22a>
		{
			if ((P2_scale & (1 << PitchScale)) != 0)
    2f6c:	21 fe       	sbrs	r2, 1
    2f6e:	02 c0       	rjmp	.+4      	; 0x2f74 <Update_V1_0_to_V1_1+0x226>
			{
				mixer_buffer[21 + (i * NEWSIZE)] = SCALE;
    2f70:	50 82       	st	Z, r5
    2f72:	03 c0       	rjmp	.+6      	; 0x2f7a <Update_V1_0_to_V1_1+0x22c>
			}
			else
			{
				mixer_buffer[21 + (i * NEWSIZE)] = ON;
    2f74:	40 82       	st	Z, r4
    2f76:	01 c0       	rjmp	.+2      	; 0x2f7a <Update_V1_0_to_V1_1+0x22c>
			}
		}
		else
		{
			mixer_buffer[21 + (i * NEWSIZE)] = OFF;
    2f78:	10 82       	st	Z, r1
		// P1 yaw_gyro
		if ((P1_sensors & (1 << YawGyro)) != 0)
		{
			if ((P1_scale & (1 << YawScale)) != 0)
			{
				mixer_buffer[22 + (i * NEWSIZE)] = SCALE;
    2f7a:	f7 01       	movw	r30, r14
		{
			mixer_buffer[21 + (i * NEWSIZE)] = OFF;
		}

		// P1 yaw_gyro
		if ((P1_sensors & (1 << YawGyro)) != 0)
    2f7c:	32 fe       	sbrs	r3, 2
    2f7e:	06 c0       	rjmp	.+12     	; 0x2f8c <Update_V1_0_to_V1_1+0x23e>
		{
			if ((P1_scale & (1 << YawScale)) != 0)
    2f80:	32 ff       	sbrs	r19, 2
    2f82:	02 c0       	rjmp	.+4      	; 0x2f88 <Update_V1_0_to_V1_1+0x23a>
			{
				mixer_buffer[22 + (i * NEWSIZE)] = SCALE;
    2f84:	50 82       	st	Z, r5
    2f86:	03 c0       	rjmp	.+6      	; 0x2f8e <Update_V1_0_to_V1_1+0x240>
			}
			else
			{
				mixer_buffer[22 + (i * NEWSIZE)] = ON;
    2f88:	40 82       	st	Z, r4
    2f8a:	01 c0       	rjmp	.+2      	; 0x2f8e <Update_V1_0_to_V1_1+0x240>
			}
		}
		else
		{
			mixer_buffer[22 + (i * NEWSIZE)] = OFF;
    2f8c:	10 82       	st	Z, r1
		// P2 yaw gyro
		if ((P2_sensors & (1 << YawGyro)) != 0)
		{
			if ((P2_scale & (1 << YawScale)) != 0)
			{
				mixer_buffer[23 + (i * NEWSIZE)] = SCALE;
    2f8e:	cb 5c       	subi	r28, 0xCB	; 203
    2f90:	de 4f       	sbci	r29, 0xFE	; 254
    2f92:	e8 81       	ld	r30, Y
    2f94:	f9 81       	ldd	r31, Y+1	; 0x01
    2f96:	c5 53       	subi	r28, 0x35	; 53
    2f98:	d1 40       	sbci	r29, 0x01	; 1
		{
			mixer_buffer[22 + (i * NEWSIZE)] = OFF;
		}

		// P2 yaw gyro
		if ((P2_sensors & (1 << YawGyro)) != 0)
    2f9a:	22 ff       	sbrs	r18, 2
    2f9c:	06 c0       	rjmp	.+12     	; 0x2faa <Update_V1_0_to_V1_1+0x25c>
		{
			if ((P2_scale & (1 << YawScale)) != 0)
    2f9e:	22 fe       	sbrs	r2, 2
    2fa0:	02 c0       	rjmp	.+4      	; 0x2fa6 <Update_V1_0_to_V1_1+0x258>
			{
				mixer_buffer[23 + (i * NEWSIZE)] = SCALE;
    2fa2:	50 82       	st	Z, r5
    2fa4:	03 c0       	rjmp	.+6      	; 0x2fac <Update_V1_0_to_V1_1+0x25e>
			}
			else
			{
				mixer_buffer[23 + (i * NEWSIZE)] = ON;
    2fa6:	40 82       	st	Z, r4
    2fa8:	01 c0       	rjmp	.+2      	; 0x2fac <Update_V1_0_to_V1_1+0x25e>
			}
		}
		else
		{
			mixer_buffer[23 + (i * NEWSIZE)] = OFF;
    2faa:	10 82       	st	Z, r1
		// P1 roll acc
		if ((P1_sensors & (1 << RollAcc)) != 0)
		{
			if ((P1_scale & (1 << AccRollScale)) != 0)
			{
				mixer_buffer[24 + (i * NEWSIZE)] = SCALE;
    2fac:	c5 5c       	subi	r28, 0xC5	; 197
    2fae:	de 4f       	sbci	r29, 0xFE	; 254
    2fb0:	e8 81       	ld	r30, Y
    2fb2:	f9 81       	ldd	r31, Y+1	; 0x01
    2fb4:	cb 53       	subi	r28, 0x3B	; 59
    2fb6:	d1 40       	sbci	r29, 0x01	; 1
		{
			mixer_buffer[23 + (i * NEWSIZE)] = OFF;
		}

		// P1 roll acc
		if ((P1_sensors & (1 << RollAcc)) != 0)
    2fb8:	33 fe       	sbrs	r3, 3
    2fba:	06 c0       	rjmp	.+12     	; 0x2fc8 <Update_V1_0_to_V1_1+0x27a>
		{
			if ((P1_scale & (1 << AccRollScale)) != 0)
    2fbc:	33 ff       	sbrs	r19, 3
    2fbe:	02 c0       	rjmp	.+4      	; 0x2fc4 <Update_V1_0_to_V1_1+0x276>
			{
				mixer_buffer[24 + (i * NEWSIZE)] = SCALE;
    2fc0:	50 82       	st	Z, r5
    2fc2:	03 c0       	rjmp	.+6      	; 0x2fca <Update_V1_0_to_V1_1+0x27c>
			}
			else
			{
				mixer_buffer[24 + (i * NEWSIZE)] = ON;
    2fc4:	40 82       	st	Z, r4
    2fc6:	01 c0       	rjmp	.+2      	; 0x2fca <Update_V1_0_to_V1_1+0x27c>
			}
		}
		else
		{
			mixer_buffer[24 + (i * NEWSIZE)] = OFF;
    2fc8:	10 82       	st	Z, r1
		// P2 roll acc
		if ((P2_sensors & (1 << RollAcc)) != 0)
		{
			if ((P2_scale & (1 << AccRollScale)) != 0)
			{
				mixer_buffer[25 + (i * NEWSIZE)] = SCALE;
    2fca:	c9 5c       	subi	r28, 0xC9	; 201
    2fcc:	de 4f       	sbci	r29, 0xFE	; 254
    2fce:	e8 81       	ld	r30, Y
    2fd0:	f9 81       	ldd	r31, Y+1	; 0x01
    2fd2:	c7 53       	subi	r28, 0x37	; 55
    2fd4:	d1 40       	sbci	r29, 0x01	; 1
		{
			mixer_buffer[24 + (i * NEWSIZE)] = OFF;
		}

		// P2 roll acc
		if ((P2_sensors & (1 << RollAcc)) != 0)
    2fd6:	23 ff       	sbrs	r18, 3
    2fd8:	06 c0       	rjmp	.+12     	; 0x2fe6 <Update_V1_0_to_V1_1+0x298>
		{
			if ((P2_scale & (1 << AccRollScale)) != 0)
    2fda:	23 fe       	sbrs	r2, 3
    2fdc:	02 c0       	rjmp	.+4      	; 0x2fe2 <Update_V1_0_to_V1_1+0x294>
			{
				mixer_buffer[25 + (i * NEWSIZE)] = SCALE;
    2fde:	50 82       	st	Z, r5
    2fe0:	03 c0       	rjmp	.+6      	; 0x2fe8 <Update_V1_0_to_V1_1+0x29a>
			}
			else
			{
				mixer_buffer[25 + (i * NEWSIZE)] = ON;
    2fe2:	40 82       	st	Z, r4
    2fe4:	01 c0       	rjmp	.+2      	; 0x2fe8 <Update_V1_0_to_V1_1+0x29a>
			}
		}
		else
		{
			mixer_buffer[25 + (i * NEWSIZE)] = OFF;
    2fe6:	10 82       	st	Z, r1
		// P1 pitch acc
		if ((P1_sensors & (1 << PitchAcc)) != 0)
		{
			if ((P1_scale & (1 << AccPitchScale)) != 0)
			{
				mixer_buffer[26 + (i * NEWSIZE)] = SCALE;
    2fe8:	c3 5c       	subi	r28, 0xC3	; 195
    2fea:	de 4f       	sbci	r29, 0xFE	; 254
    2fec:	e8 81       	ld	r30, Y
    2fee:	f9 81       	ldd	r31, Y+1	; 0x01
    2ff0:	cd 53       	subi	r28, 0x3D	; 61
    2ff2:	d1 40       	sbci	r29, 0x01	; 1
		{
			mixer_buffer[25 + (i * NEWSIZE)] = OFF;
		}

		// P1 pitch acc
		if ((P1_sensors & (1 << PitchAcc)) != 0)
    2ff4:	34 fe       	sbrs	r3, 4
    2ff6:	06 c0       	rjmp	.+12     	; 0x3004 <Update_V1_0_to_V1_1+0x2b6>
		{
			if ((P1_scale & (1 << AccPitchScale)) != 0)
    2ff8:	34 ff       	sbrs	r19, 4
    2ffa:	02 c0       	rjmp	.+4      	; 0x3000 <Update_V1_0_to_V1_1+0x2b2>
			{
				mixer_buffer[26 + (i * NEWSIZE)] = SCALE;
    2ffc:	50 82       	st	Z, r5
    2ffe:	03 c0       	rjmp	.+6      	; 0x3006 <Update_V1_0_to_V1_1+0x2b8>
			}
			else
			{
				mixer_buffer[26 + (i * NEWSIZE)] = ON;
    3000:	40 82       	st	Z, r4
    3002:	01 c0       	rjmp	.+2      	; 0x3006 <Update_V1_0_to_V1_1+0x2b8>
			}
		}
		else
		{
			mixer_buffer[26 + (i * NEWSIZE)] = OFF;
    3004:	10 82       	st	Z, r1
		// P2 pitch acc
		if ((P2_sensors & (1 << PitchAcc)) != 0)
		{
			if ((P2_scale & (1 << AccPitchScale)) != 0)
			{
				mixer_buffer[27 + (i * NEWSIZE)] = SCALE;
    3006:	cd 5c       	subi	r28, 0xCD	; 205
    3008:	de 4f       	sbci	r29, 0xFE	; 254
    300a:	e8 81       	ld	r30, Y
    300c:	f9 81       	ldd	r31, Y+1	; 0x01
    300e:	c3 53       	subi	r28, 0x33	; 51
    3010:	d1 40       	sbci	r29, 0x01	; 1
		{
			mixer_buffer[26 + (i * NEWSIZE)] = OFF;
		}

		// P2 pitch acc
		if ((P2_sensors & (1 << PitchAcc)) != 0)
    3012:	24 ff       	sbrs	r18, 4
    3014:	06 c0       	rjmp	.+12     	; 0x3022 <Update_V1_0_to_V1_1+0x2d4>
		{
			if ((P2_scale & (1 << AccPitchScale)) != 0)
    3016:	24 fe       	sbrs	r2, 4
    3018:	02 c0       	rjmp	.+4      	; 0x301e <Update_V1_0_to_V1_1+0x2d0>
			{
				mixer_buffer[27 + (i * NEWSIZE)] = SCALE;
    301a:	50 82       	st	Z, r5
    301c:	03 c0       	rjmp	.+6      	; 0x3024 <Update_V1_0_to_V1_1+0x2d6>
			}
			else
			{
				mixer_buffer[27 + (i * NEWSIZE)] = ON;
    301e:	40 82       	st	Z, r4
    3020:	01 c0       	rjmp	.+2      	; 0x3024 <Update_V1_0_to_V1_1+0x2d6>
			}
		}
		else
		{
			mixer_buffer[27 + (i * NEWSIZE)] = OFF;
    3022:	10 82       	st	Z, r1
		// P1 Z delta acc
		if ((P1_sensors & (1 << ZDeltaAcc)) != 0)
		{
			if ((P1_scale & (1 << AccZScale)) != 0)
			{
				mixer_buffer[28 + (i * NEWSIZE)] = SCALE;
    3024:	c7 5c       	subi	r28, 0xC7	; 199
    3026:	de 4f       	sbci	r29, 0xFE	; 254
    3028:	e8 81       	ld	r30, Y
    302a:	f9 81       	ldd	r31, Y+1	; 0x01
    302c:	c9 53       	subi	r28, 0x39	; 57
    302e:	d1 40       	sbci	r29, 0x01	; 1
		{
			mixer_buffer[27 + (i * NEWSIZE)] = OFF;
		}

		// P1 Z delta acc
		if ((P1_sensors & (1 << ZDeltaAcc)) != 0)
    3030:	35 fe       	sbrs	r3, 5
    3032:	06 c0       	rjmp	.+12     	; 0x3040 <Update_V1_0_to_V1_1+0x2f2>
		{
			if ((P1_scale & (1 << AccZScale)) != 0)
    3034:	35 ff       	sbrs	r19, 5
    3036:	02 c0       	rjmp	.+4      	; 0x303c <Update_V1_0_to_V1_1+0x2ee>
			{
				mixer_buffer[28 + (i * NEWSIZE)] = SCALE;
    3038:	50 82       	st	Z, r5
    303a:	03 c0       	rjmp	.+6      	; 0x3042 <Update_V1_0_to_V1_1+0x2f4>
			}
			else
			{
				mixer_buffer[28 + (i * NEWSIZE)] = ON;
    303c:	40 82       	st	Z, r4
    303e:	01 c0       	rjmp	.+2      	; 0x3042 <Update_V1_0_to_V1_1+0x2f4>
			}
		}
		else
		{
			mixer_buffer[28 + (i * NEWSIZE)] = OFF;
    3040:	10 82       	st	Z, r1
		// P2 Z delta acc
		if ((P2_sensors & (1 << ZDeltaAcc)) != 0)
		{
			if ((P2_scale & (1 << AccZScale)) != 0)
			{
				mixer_buffer[29 + (i * NEWSIZE)] = SCALE;
    3042:	f8 01       	movw	r30, r16
		{
			mixer_buffer[28 + (i * NEWSIZE)] = OFF;
		}

		// P2 Z delta acc
		if ((P2_sensors & (1 << ZDeltaAcc)) != 0)
    3044:	25 ff       	sbrs	r18, 5
    3046:	06 c0       	rjmp	.+12     	; 0x3054 <Update_V1_0_to_V1_1+0x306>
		{
			if ((P2_scale & (1 << AccZScale)) != 0)
    3048:	25 fe       	sbrs	r2, 5
    304a:	02 c0       	rjmp	.+4      	; 0x3050 <Update_V1_0_to_V1_1+0x302>
			{
				mixer_buffer[29 + (i * NEWSIZE)] = SCALE;
    304c:	50 82       	st	Z, r5
    304e:	03 c0       	rjmp	.+6      	; 0x3056 <Update_V1_0_to_V1_1+0x308>
			}
			else
			{
				mixer_buffer[29 + (i * NEWSIZE)] = ON;
    3050:	40 82       	st	Z, r4
    3052:	01 c0       	rjmp	.+2      	; 0x3056 <Update_V1_0_to_V1_1+0x308>
			}
		}
		else
		{
			mixer_buffer[29 + (i * NEWSIZE)] = OFF;
    3054:	10 82       	st	Z, r1
    3056:	c1 5c       	subi	r28, 0xC1	; 193
    3058:	de 4f       	sbci	r29, 0xFE	; 254
    305a:	88 81       	ld	r24, Y
    305c:	99 81       	ldd	r25, Y+1	; 0x01
    305e:	cf 53       	subi	r28, 0x3F	; 63
    3060:	d1 40       	sbci	r29, 0x01	; 1
    3062:	86 96       	adiw	r24, 0x26	; 38
    3064:	c1 5c       	subi	r28, 0xC1	; 193
    3066:	de 4f       	sbci	r29, 0xFE	; 254
    3068:	99 83       	std	Y+1, r25	; 0x01
    306a:	88 83       	st	Y, r24
    306c:	cf 53       	subi	r28, 0x3F	; 63
    306e:	d1 40       	sbci	r29, 0x01	; 1
    3070:	96 e2       	ldi	r25, 0x26	; 38
    3072:	89 0e       	add	r8, r25
    3074:	91 1c       	adc	r9, r1
    3076:	e6 e2       	ldi	r30, 0x26	; 38
    3078:	ae 0e       	add	r10, r30
    307a:	b1 1c       	adc	r11, r1
    307c:	f6 e2       	ldi	r31, 0x26	; 38
    307e:	cf 0e       	add	r12, r31
    3080:	d1 1c       	adc	r13, r1
    3082:	cf 5c       	subi	r28, 0xCF	; 207
    3084:	de 4f       	sbci	r29, 0xFE	; 254
    3086:	88 81       	ld	r24, Y
    3088:	99 81       	ldd	r25, Y+1	; 0x01
    308a:	c1 53       	subi	r28, 0x31	; 49
    308c:	d1 40       	sbci	r29, 0x01	; 1
    308e:	86 96       	adiw	r24, 0x26	; 38
    3090:	cf 5c       	subi	r28, 0xCF	; 207
    3092:	de 4f       	sbci	r29, 0xFE	; 254
    3094:	99 83       	std	Y+1, r25	; 0x01
    3096:	88 83       	st	Y, r24
    3098:	c1 53       	subi	r28, 0x31	; 49
    309a:	d1 40       	sbci	r29, 0x01	; 1
    309c:	0a 5d       	subi	r16, 0xDA	; 218
    309e:	1f 4f       	sbci	r17, 0xFF	; 255
    30a0:	c7 5c       	subi	r28, 0xC7	; 199
    30a2:	de 4f       	sbci	r29, 0xFE	; 254
    30a4:	e8 81       	ld	r30, Y
    30a6:	f9 81       	ldd	r31, Y+1	; 0x01
    30a8:	c9 53       	subi	r28, 0x39	; 57
    30aa:	d1 40       	sbci	r29, 0x01	; 1
    30ac:	b6 96       	adiw	r30, 0x26	; 38
    30ae:	c7 5c       	subi	r28, 0xC7	; 199
    30b0:	de 4f       	sbci	r29, 0xFE	; 254
    30b2:	f9 83       	std	Y+1, r31	; 0x01
    30b4:	e8 83       	st	Y, r30
    30b6:	c9 53       	subi	r28, 0x39	; 57
    30b8:	d1 40       	sbci	r29, 0x01	; 1
    30ba:	cd 5c       	subi	r28, 0xCD	; 205
    30bc:	de 4f       	sbci	r29, 0xFE	; 254
    30be:	88 81       	ld	r24, Y
    30c0:	99 81       	ldd	r25, Y+1	; 0x01
    30c2:	c3 53       	subi	r28, 0x33	; 51
    30c4:	d1 40       	sbci	r29, 0x01	; 1
    30c6:	86 96       	adiw	r24, 0x26	; 38
    30c8:	cd 5c       	subi	r28, 0xCD	; 205
    30ca:	de 4f       	sbci	r29, 0xFE	; 254
    30cc:	99 83       	std	Y+1, r25	; 0x01
    30ce:	88 83       	st	Y, r24
    30d0:	c3 53       	subi	r28, 0x33	; 51
    30d2:	d1 40       	sbci	r29, 0x01	; 1
    30d4:	c3 5c       	subi	r28, 0xC3	; 195
    30d6:	de 4f       	sbci	r29, 0xFE	; 254
    30d8:	e8 81       	ld	r30, Y
    30da:	f9 81       	ldd	r31, Y+1	; 0x01
    30dc:	cd 53       	subi	r28, 0x3D	; 61
    30de:	d1 40       	sbci	r29, 0x01	; 1
    30e0:	b6 96       	adiw	r30, 0x26	; 38
    30e2:	c3 5c       	subi	r28, 0xC3	; 195
    30e4:	de 4f       	sbci	r29, 0xFE	; 254
    30e6:	f9 83       	std	Y+1, r31	; 0x01
    30e8:	e8 83       	st	Y, r30
    30ea:	cd 53       	subi	r28, 0x3D	; 61
    30ec:	d1 40       	sbci	r29, 0x01	; 1
    30ee:	c9 5c       	subi	r28, 0xC9	; 201
    30f0:	de 4f       	sbci	r29, 0xFE	; 254
    30f2:	88 81       	ld	r24, Y
    30f4:	99 81       	ldd	r25, Y+1	; 0x01
    30f6:	c7 53       	subi	r28, 0x37	; 55
    30f8:	d1 40       	sbci	r29, 0x01	; 1
    30fa:	86 96       	adiw	r24, 0x26	; 38
    30fc:	c9 5c       	subi	r28, 0xC9	; 201
    30fe:	de 4f       	sbci	r29, 0xFE	; 254
    3100:	99 83       	std	Y+1, r25	; 0x01
    3102:	88 83       	st	Y, r24
    3104:	c7 53       	subi	r28, 0x37	; 55
    3106:	d1 40       	sbci	r29, 0x01	; 1
    3108:	c5 5c       	subi	r28, 0xC5	; 197
    310a:	de 4f       	sbci	r29, 0xFE	; 254
    310c:	e8 81       	ld	r30, Y
    310e:	f9 81       	ldd	r31, Y+1	; 0x01
    3110:	cb 53       	subi	r28, 0x3B	; 59
    3112:	d1 40       	sbci	r29, 0x01	; 1
    3114:	b6 96       	adiw	r30, 0x26	; 38
    3116:	c5 5c       	subi	r28, 0xC5	; 197
    3118:	de 4f       	sbci	r29, 0xFE	; 254
    311a:	f9 83       	std	Y+1, r31	; 0x01
    311c:	e8 83       	st	Y, r30
    311e:	cb 53       	subi	r28, 0x3B	; 59
    3120:	d1 40       	sbci	r29, 0x01	; 1
    3122:	cb 5c       	subi	r28, 0xCB	; 203
    3124:	de 4f       	sbci	r29, 0xFE	; 254
    3126:	88 81       	ld	r24, Y
    3128:	99 81       	ldd	r25, Y+1	; 0x01
    312a:	c5 53       	subi	r28, 0x35	; 53
    312c:	d1 40       	sbci	r29, 0x01	; 1
    312e:	86 96       	adiw	r24, 0x26	; 38
    3130:	cb 5c       	subi	r28, 0xCB	; 203
    3132:	de 4f       	sbci	r29, 0xFE	; 254
    3134:	99 83       	std	Y+1, r25	; 0x01
    3136:	88 83       	st	Y, r24
    3138:	c5 53       	subi	r28, 0x35	; 53
    313a:	d1 40       	sbci	r29, 0x01	; 1
    313c:	96 e2       	ldi	r25, 0x26	; 38
    313e:	e9 0e       	add	r14, r25
    3140:	f1 1c       	adc	r15, r1
    3142:	e6 e2       	ldi	r30, 0x26	; 38
    3144:	6e 0e       	add	r6, r30
    3146:	71 1c       	adc	r7, r1
		dst += (i * NEWSIZE);			// Step to next location for new data in the buffer
		memcpy(dst, src, OLDSIZE);		// Move only the old (smaller) data
	}

	// Rearrange one output at a time	
	for (i = 0; i < MAX_OUTPUTS; i++)
    3148:	ce 5b       	subi	r28, 0xBE	; 190
    314a:	de 4f       	sbci	r29, 0xFE	; 254
    314c:	88 81       	ld	r24, Y
    314e:	99 81       	ldd	r25, Y+1	; 0x01
    3150:	c2 54       	subi	r28, 0x42	; 66
    3152:	d1 40       	sbci	r29, 0x01	; 1
    3154:	08 17       	cp	r16, r24
    3156:	19 07       	cpc	r17, r25
    3158:	09 f0       	breq	.+2      	; 0x315c <Update_V1_0_to_V1_1+0x40e>
    315a:	9a ce       	rjmp	.-716    	; 0x2e90 <Update_V1_0_to_V1_1+0x142>
	}
		
	// Copy buffer back into new structure
	src = (void*)mixer_buffer;
	dst = (void*)Config.Channel;
	memcpy(dst, src, sizeof(mixer_buffer) - 1); // This appears to be spot on.
    315c:	8f e2       	ldi	r24, 0x2F	; 47
    315e:	91 e0       	ldi	r25, 0x01	; 1
    3160:	fe 01       	movw	r30, r28
    3162:	31 96       	adiw	r30, 0x01	; 1
    3164:	a5 e4       	ldi	r26, 0x45	; 69
    3166:	b6 e0       	ldi	r27, 0x06	; 6
    3168:	01 90       	ld	r0, Z+
    316a:	0d 92       	st	X+, r0
    316c:	01 97       	sbiw	r24, 0x01	; 1
    316e:	e1 f7       	brne	.-8      	; 0x3168 <Update_V1_0_to_V1_1+0x41a>

	// Restore corrupted byte manually
	Config.Channel[7].P2_source_b_volume = temp; // Ugly - fix this properly.
    3170:	cf 5b       	subi	r28, 0xBF	; 191
    3172:	de 4f       	sbci	r29, 0xFE	; 254
    3174:	98 81       	ld	r25, Y
    3176:	c1 54       	subi	r28, 0x41	; 65
    3178:	d1 40       	sbci	r29, 0x01	; 1
    317a:	90 93 74 07 	sts	0x0774, r25

	// Set magic number to V1.1 signature
	Config.setup = MAGIC_NUMBER;
    317e:	86 e3       	ldi	r24, 0x36	; 54
    3180:	80 93 b3 05 	sts	0x05B3, r24
}
    3184:	cb 5b       	subi	r28, 0xBB	; 187
    3186:	de 4f       	sbci	r29, 0xFE	; 254
    3188:	0f b6       	in	r0, 0x3f	; 63
    318a:	f8 94       	cli
    318c:	de bf       	out	0x3e, r29	; 62
    318e:	0f be       	out	0x3f, r0	; 63
    3190:	cd bf       	out	0x3d, r28	; 61
    3192:	df 91       	pop	r29
    3194:	cf 91       	pop	r28
    3196:	1f 91       	pop	r17
    3198:	0f 91       	pop	r16
    319a:	ff 90       	pop	r15
    319c:	ef 90       	pop	r14
    319e:	df 90       	pop	r13
    31a0:	cf 90       	pop	r12
    31a2:	bf 90       	pop	r11
    31a4:	af 90       	pop	r10
    31a6:	9f 90       	pop	r9
    31a8:	8f 90       	pop	r8
    31aa:	7f 90       	pop	r7
    31ac:	6f 90       	pop	r6
    31ae:	5f 90       	pop	r5
    31b0:	4f 90       	pop	r4
    31b2:	3f 90       	pop	r3
    31b4:	2f 90       	pop	r2
    31b6:	08 95       	ret

000031b8 <Set_EEPROM_Default_Config>:
	Config.setup = MAGIC_NUMBER;
}

// Force a factory reset
void Set_EEPROM_Default_Config(void)
{
    31b8:	cf 93       	push	r28
    31ba:	df 93       	push	r29
	uint8_t i;
	
	// Clear entire Config space first
	memset(&Config.setup,0,(sizeof(Config)));
    31bc:	88 e0       	ldi	r24, 0x08	; 8
    31be:	92 e0       	ldi	r25, 0x02	; 2
    31c0:	e3 eb       	ldi	r30, 0xB3	; 179
    31c2:	f5 e0       	ldi	r31, 0x05	; 5
    31c4:	df 01       	movw	r26, r30
    31c6:	9c 01       	movw	r18, r24
    31c8:	1d 92       	st	X+, r1
    31ca:	21 50       	subi	r18, 0x01	; 1
    31cc:	30 40       	sbci	r19, 0x00	; 0
    31ce:	e1 f7       	brne	.-8      	; 0x31c8 <Set_EEPROM_Default_Config+0x10>

	// Set magic number to current signature
	Config.setup = MAGIC_NUMBER;
    31d0:	86 e3       	ldi	r24, 0x36	; 54
    31d2:	80 93 b3 05 	sts	0x05B3, r24

	// Misc settings
	Config.RxMode = PWM;				// Default to PWM
    31d6:	81 e0       	ldi	r24, 0x01	; 1
    31d8:	80 93 dc 05 	sts	0x05DC, r24
	Config.PWM_Sync = GEAR;
    31dc:	84 e0       	ldi	r24, 0x04	; 4
    31de:	80 93 dd 05 	sts	0x05DD, r24
	Config.Acc_LPF = 2;					// Acc LPF around 21Hz (5, 10, 21, 32, 44, 74, None)
    31e2:	92 e0       	ldi	r25, 0x02	; 2
    31e4:	90 93 41 06 	sts	0x0641, r25
	Config.Gyro_LPF = 6;				// Gyro LPF off "None" (5, 10, 21, 32, 44, 74, None)
    31e8:	96 e0       	ldi	r25, 0x06	; 6
    31ea:	90 93 42 06 	sts	0x0642, r25
	Config.CF_factor = 7;
    31ee:	97 e0       	ldi	r25, 0x07	; 7
    31f0:	90 93 43 06 	sts	0x0643, r25
	Config.FlightChan = GEAR;			// Channel GEAR switches flight mode by default
    31f4:	80 93 df 05 	sts	0x05DF, r24
	Config.Disarm_timer = 30;			// Default to 30 seconds
    31f8:	8e e1       	ldi	r24, 0x1E	; 30
    31fa:	80 93 3e 06 	sts	0x063E, r24
	Config.Transition_P1n = 50;			// Set P1.n point to 50%
    31fe:	82 e3       	ldi	r24, 0x32	; 50
    3200:	80 93 e4 05 	sts	0x05E4, r24
    3204:	ee ec       	ldi	r30, 0xCE	; 206
    3206:	f0 e0       	ldi	r31, 0x00	; 0
    3208:	c4 eb       	ldi	r28, 0xB4	; 180
    320a:	d5 e0       	ldi	r29, 0x05	; 5
    320c:	ad e8       	ldi	r26, 0x8D	; 141
    320e:	b7 e0       	ldi	r27, 0x07	; 7

	// Servo defaults
	for (i = 0; i < MAX_RC_CHANNELS; i++)
	{
		Config.ChannelOrder[i] = pgm_read_byte(&JR[i]);
		Config.RxChannelZeroOffset[i] = 3750;
    3210:	86 ea       	ldi	r24, 0xA6	; 166
    3212:	9e e0       	ldi	r25, 0x0E	; 14
	Config.Transition_P1n = 50;			// Set P1.n point to 50%

	// Servo defaults
	for (i = 0; i < MAX_RC_CHANNELS; i++)
	{
		Config.ChannelOrder[i] = pgm_read_byte(&JR[i]);
    3214:	24 91       	lpm	r18, Z
    3216:	29 93       	st	Y+, r18
		Config.RxChannelZeroOffset[i] = 3750;
    3218:	8d 93       	st	X+, r24
    321a:	9d 93       	st	X+, r25
    321c:	31 96       	adiw	r30, 0x01	; 1
	Config.FlightChan = GEAR;			// Channel GEAR switches flight mode by default
	Config.Disarm_timer = 30;			// Default to 30 seconds
	Config.Transition_P1n = 50;			// Set P1.n point to 50%

	// Servo defaults
	for (i = 0; i < MAX_RC_CHANNELS; i++)
    321e:	30 e0       	ldi	r19, 0x00	; 0
    3220:	e6 3d       	cpi	r30, 0xD6	; 214
    3222:	f3 07       	cpc	r31, r19
    3224:	b9 f7       	brne	.-18     	; 0x3214 <Set_EEPROM_Default_Config+0x5c>
		Config.ChannelOrder[i] = pgm_read_byte(&JR[i]);
		Config.RxChannelZeroOffset[i] = 3750;
	}
	
	// Monopolar throttle is a special case. Set to -100% or -1000
	Config.RxChannelZeroOffset[THROTTLE] = 2750;
    3226:	8e eb       	ldi	r24, 0xBE	; 190
    3228:	9a e0       	ldi	r25, 0x0A	; 10
    322a:	90 93 8e 07 	sts	0x078E, r25
    322e:	80 93 8d 07 	sts	0x078D, r24
    3232:	e9 e6       	ldi	r30, 0x69	; 105
    3234:	f6 e0       	ldi	r31, 0x06	; 6
    3236:	cd e7       	ldi	r28, 0x7D	; 125
    3238:	d7 e0       	ldi	r29, 0x07	; 7
    323a:	65 e8       	ldi	r22, 0x85	; 133
    323c:	77 e0       	ldi	r23, 0x07	; 7

	// Preset mixers to safe values
	for (i = 0; i < MAX_OUTPUTS; i++)
	{
		Config.Channel[i].P1n_position	= 50;
    323e:	52 e3       	ldi	r21, 0x32	; 50
		Config.Channel[i].P1_source_a 	= NOMIX;
    3240:	2f e0       	ldi	r18, 0x0F	; 15
		Config.Channel[i].P1_source_b 	= NOMIX;
		Config.Channel[i].P2_source_a 	= NOMIX;
		Config.Channel[i].P2_source_b 	= NOMIX;
		Config.min_travel[i] = -100;
    3242:	4c e9       	ldi	r20, 0x9C	; 156
		Config.max_travel[i] = 100;
    3244:	34 e6       	ldi	r19, 0x64	; 100
    3246:	cf 01       	movw	r24, r30
    3248:	4e 97       	sbiw	r24, 0x1e	; 30
	Config.RxChannelZeroOffset[THROTTLE] = 2750;

	// Preset mixers to safe values
	for (i = 0; i < MAX_OUTPUTS; i++)
	{
		Config.Channel[i].P1n_position	= 50;
    324a:	dc 01       	movw	r26, r24
    324c:	5c 93       	st	X, r21
    324e:	48 96       	adiw	r24, 0x18	; 24
		Config.Channel[i].P1_source_a 	= NOMIX;
    3250:	dc 01       	movw	r26, r24
    3252:	2c 93       	st	X, r18
    3254:	04 96       	adiw	r24, 0x04	; 4
		Config.Channel[i].P1_source_b 	= NOMIX;
    3256:	dc 01       	movw	r26, r24
    3258:	2c 93       	st	X, r18
    325a:	02 97       	sbiw	r24, 0x02	; 2
		Config.Channel[i].P2_source_a 	= NOMIX;
    325c:	dc 01       	movw	r26, r24
    325e:	2c 93       	st	X, r18
		Config.Channel[i].P2_source_b 	= NOMIX;
    3260:	20 83       	st	Z, r18
		Config.min_travel[i] = -100;
    3262:	49 93       	st	Y+, r20
		Config.max_travel[i] = 100;
    3264:	84 e6       	ldi	r24, 0x64	; 100
    3266:	db 01       	movw	r26, r22
    3268:	3d 93       	st	X+, r19
    326a:	bd 01       	movw	r22, r26
    326c:	b6 96       	adiw	r30, 0x26	; 38
	
	// Monopolar throttle is a special case. Set to -100% or -1000
	Config.RxChannelZeroOffset[THROTTLE] = 2750;

	// Preset mixers to safe values
	for (i = 0; i < MAX_OUTPUTS; i++)
    326e:	b7 e0       	ldi	r27, 0x07	; 7
    3270:	e9 39       	cpi	r30, 0x99	; 153
    3272:	fb 07       	cpc	r31, r27
    3274:	41 f7       	brne	.-48     	; 0x3246 <Set_EEPROM_Default_Config+0x8e>
		Config.min_travel[i] = -100;
		Config.max_travel[i] = 100;
	}

	// Preset simple mixing for primary channels - all models
	Config.Channel[OUT1].P1_throttle_volume = 100;
    3276:	80 93 4e 06 	sts	0x064E, r24
	Config.Channel[OUT2].P1_aileron_volume = 100;
    327a:	80 93 77 06 	sts	0x0677, r24
	Config.Channel[OUT3].P1_elevator_volume = 100;
    327e:	80 93 9f 06 	sts	0x069F, r24
	Config.Channel[OUT4].P1_rudder_volume = 100;
    3282:	80 93 c7 06 	sts	0x06C7, r24
	
	// Set up profile 1
	Config.FlightMode[P1].Roll_P_mult = 60;			// PID defaults
    3286:	2c e3       	ldi	r18, 0x3C	; 60
    3288:	20 93 e5 05 	sts	0x05E5, r18
	Config.FlightMode[P1].A_Roll_P_mult = 5;
    328c:	95 e0       	ldi	r25, 0x05	; 5
    328e:	90 93 e9 05 	sts	0x05E9, r25
	Config.FlightMode[P1].Pitch_P_mult = 60;
    3292:	20 93 eb 05 	sts	0x05EB, r18
	Config.FlightMode[P1].A_Pitch_P_mult = 5;
    3296:	90 93 ef 05 	sts	0x05EF, r25
	Config.FlightMode[P1].Yaw_P_mult = 80;
    329a:	90 e5       	ldi	r25, 0x50	; 80
    329c:	90 93 f1 05 	sts	0x05F1, r25
	Config.FlightMode[P1].Roll_I_mult = 40;
    32a0:	28 e2       	ldi	r18, 0x28	; 40
    32a2:	20 93 e6 05 	sts	0x05E6, r18
	Config.FlightMode[P1].Roll_limit = 10;
    32a6:	9a e0       	ldi	r25, 0x0A	; 10
    32a8:	90 93 e7 05 	sts	0x05E7, r25
	Config.FlightMode[P1].Pitch_I_mult = 40;
    32ac:	20 93 ec 05 	sts	0x05EC, r18
	Config.FlightMode[P1].Pitch_limit = 10;
    32b0:	90 93 ed 05 	sts	0x05ED, r25
	Config.FlightMode[P1].Roll_Rate = 2;
    32b4:	92 e0       	ldi	r25, 0x02	; 2
    32b6:	90 93 e8 05 	sts	0x05E8, r25
	Config.FlightMode[P1].Pitch_Rate = 2;
    32ba:	90 93 ee 05 	sts	0x05EE, r25
	Config.FlightMode[P1].Yaw_Rate = 1;
    32be:	21 e0       	ldi	r18, 0x01	; 1
    32c0:	20 93 f4 05 	sts	0x05F4, r18

	// Set up profile 2
	Config.FlightMode[P2].Roll_Rate = 2;
    32c4:	90 93 fa 05 	sts	0x05FA, r25
	Config.FlightMode[P2].Pitch_Rate = 2;
    32c8:	90 93 00 06 	sts	0x0600, r25
	Config.FlightMode[P2].Yaw_Rate = 1;
    32cc:	20 93 06 06 	sts	0x0606, r18
	
	// Preset stick volumes
	Config.Channel[OUT1].P2_throttle_volume = 100;
    32d0:	80 93 4f 06 	sts	0x064F, r24
	Config.Channel[OUT2].P2_aileron_volume = 100;
    32d4:	80 93 78 06 	sts	0x0678, r24
	Config.Channel[OUT3].P2_elevator_volume = 100;
    32d8:	80 93 a0 06 	sts	0x06A0, r24
	Config.Channel[OUT4].P2_rudder_volume = 100;
    32dc:	80 93 c8 06 	sts	0x06C8, r24

	// Preset basic axis gyros in P2
	Config.Channel[OUT2].P2_Roll_gyro = ON;
    32e0:	20 93 7e 06 	sts	0x067E, r18
	Config.Channel[OUT3].P2_Pitch_gyro = ON;
    32e4:	20 93 a6 06 	sts	0x06A6, r18
	Config.Channel[OUT4].P2_Yaw_gyro = ON;
    32e8:	20 93 ce 06 	sts	0x06CE, r18
	Config.Channel[OUT4].P1_Yaw_gyro = ON;
	Config.Channel[OUT4].P2_Yaw_gyro = ON;
#endif
	
	// Set default sensor LPF
	Config.MPU6050_LPF = 2;				// 6 - 2 = 4. MPU6050's internal LPF. Values are 0x06 = 5Hz, (5)10Hz, (4)21Hz*, (3)44Hz, (2)94Hz, (1)184Hz LPF, (0)260Hz
    32ec:	90 93 44 06 	sts	0x0644, r25

	// Preset AccZeroNormZ
	Config.AccZeroNormZ		= 128;
    32f0:	80 e8       	ldi	r24, 0x80	; 128
    32f2:	90 e0       	ldi	r25, 0x00	; 0
    32f4:	90 93 a4 07 	sts	0x07A4, r25
    32f8:	80 93 a3 07 	sts	0x07A3, r24

	#ifdef KK2Mini
	Config.Contrast = 30;				// Contrast (KK2 Mini)
	#else
	Config.Contrast = 36;				// Contrast (Everything else)
    32fc:	84 e2       	ldi	r24, 0x24	; 36
    32fe:	80 93 3c 06 	sts	0x063C, r24
	#endif
}
    3302:	df 91       	pop	r29
    3304:	cf 91       	pop	r28
    3306:	08 95       	ret

00003308 <Initial_EEPROM_Config_Load>:
		eeprom_write_byte(addr, value);
	}
}

bool Initial_EEPROM_Config_Load(void)
{
    3308:	cf 93       	push	r28
    330a:	df 93       	push	r29
    330c:	1f 92       	push	r1
    330e:	cd b7       	in	r28, 0x3d	; 61
    3310:	de b7       	in	r29, 0x3e	; 62
	bool	updated = false;
	
	// Read eeProm data into RAM
	// void eeprom_read_block (void *pointer_ram, const void *pointer_eeprom, size_t n)
	eeprom_read_block((void*)&Config, (const void*)EEPROM_DATA_START_POS, sizeof(CONFIG_STRUCT));
    3312:	48 e0       	ldi	r20, 0x08	; 8
    3314:	52 e0       	ldi	r21, 0x02	; 2
    3316:	60 e0       	ldi	r22, 0x00	; 0
    3318:	70 e0       	ldi	r23, 0x00	; 0
    331a:	83 eb       	ldi	r24, 0xB3	; 179
    331c:	95 e0       	ldi	r25, 0x05	; 5
    331e:	0e 94 d2 47 	call	0x8fa4	; 0x8fa4 <__eerd_block_m644pa>
	
	// See if we know what to do with the current eeprom data
	// Config.setup holds the magic number from the current EEPROM
	switch(Config.setup)
    3322:	80 91 b3 05 	lds	r24, 0x05B3
    3326:	85 33       	cpi	r24, 0x35	; 53
    3328:	29 f0       	breq	.+10     	; 0x3334 <Initial_EEPROM_Config_Load+0x2c>
    332a:	86 33       	cpi	r24, 0x36	; 54
    332c:	39 f0       	breq	.+14     	; 0x333c <Initial_EEPROM_Config_Load+0x34>
			// Fall through...
			break;

		default:							// Unknown solution - restore to factory defaults
			// Load factory defaults
			Set_EEPROM_Default_Config();
    332e:	0e 94 dc 18 	call	0x31b8	; 0x31b8 <Set_EEPROM_Default_Config>
    3332:	04 c0       	rjmp	.+8      	; 0x333c <Initial_EEPROM_Config_Load+0x34>
	// See if we know what to do with the current eeprom data
	// Config.setup holds the magic number from the current EEPROM
	switch(Config.setup)
	{
		case V1_0_SIGNATURE:				// V1.0 detected
			Update_V1_0_to_V1_1();
    3334:	0e 94 a7 16 	call	0x2d4e	; 0x2d4e <Update_V1_0_to_V1_1>
			updated = true;
    3338:	81 e0       	ldi	r24, 0x01	; 1
    333a:	01 c0       	rjmp	.+2      	; 0x333e <Initial_EEPROM_Config_Load+0x36>
	}
}

bool Initial_EEPROM_Config_Load(void)
{
	bool	updated = false;
    333c:	80 e0       	ldi	r24, 0x00	; 0
			Set_EEPROM_Default_Config();
			break;
	}
	
	// Save back to eeprom	
	Save_Config_to_EEPROM();
    333e:	89 83       	std	Y+1, r24	; 0x01
    3340:	0e 94 9c 16 	call	0x2d38	; 0x2d38 <Save_Config_to_EEPROM>
	
	// Return info regarding eeprom structure changes 
	return updated;
}
    3344:	89 81       	ldd	r24, Y+1	; 0x01
    3346:	0f 90       	pop	r0
    3348:	df 91       	pop	r29
    334a:	cf 91       	pop	r28
    334c:	08 95       	ret

0000334e <main>:
//************************************************************
//* Main loop
//************************************************************

int main(void)
{
    334e:	cf 93       	push	r28
    3350:	df 93       	push	r29
    3352:	cd b7       	in	r28, 0x3d	; 61
    3354:	de b7       	in	r29, 0x3e	; 62
    3356:	a2 97       	sbiw	r28, 0x22	; 34
    3358:	0f b6       	in	r0, 0x3f	; 63
    335a:	f8 94       	cli
    335c:	de bf       	out	0x3e, r29	; 62
    335e:	0f be       	out	0x3f, r0	; 63
    3360:	cd bf       	out	0x3d, r28	; 61
	uint16_t RC_Interrupts = 0;
	uint8_t	old_alarms = 0;
	uint8_t ServoFlag = 0;
	uint8_t i = 0;
	
	init();							// Do all init tasks
    3362:	0e 94 79 28 	call	0x50f2	; 0x50f2 <init>
	int8_t	old_flight = 3;			// Old flight profile
	int8_t	old_trans_mode = 0;		// Old transition mode
	int16_t temp1 = 0;
	uint16_t transition_time = 0;
	uint16_t RC_Interrupts = 0;
	uint8_t	old_alarms = 0;
    3366:	1f 8e       	std	Y+31, r1	; 0x1f
	uint16_t InterruptCounter = 0;
	uint8_t	Disarm_seconds = 0;
	uint8_t Status_seconds = 0;
	uint8_t Menu_mode = STATUS_TIMEOUT;
	int8_t	old_flight = 3;			// Old flight profile
	int8_t	old_trans_mode = 0;		// Old transition mode
    3368:	1e 8e       	std	Y+30, r1	; 0x1e
	// Locals
	uint16_t InterruptCounter = 0;
	uint8_t	Disarm_seconds = 0;
	uint8_t Status_seconds = 0;
	uint8_t Menu_mode = STATUS_TIMEOUT;
	int8_t	old_flight = 3;			// Old flight profile
    336a:	03 e0       	ldi	r16, 0x03	; 3

	// Locals
	uint16_t InterruptCounter = 0;
	uint8_t	Disarm_seconds = 0;
	uint8_t Status_seconds = 0;
	uint8_t Menu_mode = STATUS_TIMEOUT;
    336c:	16 e0       	ldi	r17, 0x06	; 6
	uint8_t ServoRate_TCNT2 = 0;

	// Locals
	uint16_t InterruptCounter = 0;
	uint8_t	Disarm_seconds = 0;
	uint8_t Status_seconds = 0;
    336e:	1f 82       	std	Y+7, r1	; 0x07
	uint8_t Servo_TCNT2 = 0;
	uint8_t ServoRate_TCNT2 = 0;

	// Locals
	uint16_t InterruptCounter = 0;
	uint8_t	Disarm_seconds = 0;
    3370:	1b 82       	std	Y+3, r1	; 0x03
	uint8_t Ticker_TCNT2 = 0;
	uint8_t Servo_TCNT2 = 0;
	uint8_t ServoRate_TCNT2 = 0;

	// Locals
	uint16_t InterruptCounter = 0;
    3372:	1e 82       	std	Y+6, r1	; 0x06
    3374:	1d 82       	std	Y+5, r1	; 0x05
	uint8_t Refresh_TCNT2 = 0;
	uint8_t Disarm_TCNT2 = 0;
	uint8_t Arm_TCNT2 = 0;
	uint8_t Ticker_TCNT2 = 0;
	uint8_t Servo_TCNT2 = 0;
	uint8_t ServoRate_TCNT2 = 0;
    3376:	1d 8e       	std	Y+29, r1	; 0x1d
	uint8_t Status_TCNT2 = 0;
	uint8_t Refresh_TCNT2 = 0;
	uint8_t Disarm_TCNT2 = 0;
	uint8_t Arm_TCNT2 = 0;
	uint8_t Ticker_TCNT2 = 0;
	uint8_t Servo_TCNT2 = 0;
    3378:	1c 8e       	std	Y+28, r1	; 0x1c
	uint8_t Transition_TCNT2 = 0;
	uint8_t Status_TCNT2 = 0;
	uint8_t Refresh_TCNT2 = 0;
	uint8_t Disarm_TCNT2 = 0;
	uint8_t Arm_TCNT2 = 0;
	uint8_t Ticker_TCNT2 = 0;
    337a:	1b 8e       	std	Y+27, r1	; 0x1b
	uint16_t RC_Rate_TCNT1 = 0;
	uint8_t Transition_TCNT2 = 0;
	uint8_t Status_TCNT2 = 0;
	uint8_t Refresh_TCNT2 = 0;
	uint8_t Disarm_TCNT2 = 0;
	uint8_t Arm_TCNT2 = 0;
    337c:	1a 8e       	std	Y+26, r1	; 0x1a
	// Timer incrementers
	uint16_t RC_Rate_TCNT1 = 0;
	uint8_t Transition_TCNT2 = 0;
	uint8_t Status_TCNT2 = 0;
	uint8_t Refresh_TCNT2 = 0;
	uint8_t Disarm_TCNT2 = 0;
    337e:	19 8e       	std	Y+25, r1	; 0x19

	// Timer incrementers
	uint16_t RC_Rate_TCNT1 = 0;
	uint8_t Transition_TCNT2 = 0;
	uint8_t Status_TCNT2 = 0;
	uint8_t Refresh_TCNT2 = 0;
    3380:	18 8e       	std	Y+24, r1	; 0x18
	uint16_t ticker_16 = 0;

	// Timer incrementers
	uint16_t RC_Rate_TCNT1 = 0;
	uint8_t Transition_TCNT2 = 0;
	uint8_t Status_TCNT2 = 0;
    3382:	1f 8a       	std	Y+23, r1	; 0x17
	uint16_t Save_TCNT1 = 0;
	uint16_t ticker_16 = 0;

	// Timer incrementers
	uint16_t RC_Rate_TCNT1 = 0;
	uint8_t Transition_TCNT2 = 0;
    3384:	1e 8a       	std	Y+22, r1	; 0x16
	uint16_t Disarm_timer = 0;
	uint16_t Save_TCNT1 = 0;
	uint16_t ticker_16 = 0;

	// Timer incrementers
	uint16_t RC_Rate_TCNT1 = 0;
    3386:	1d 86       	std	Y+13, r1	; 0x0d
    3388:	1c 86       	std	Y+12, r1	; 0x0c
	uint16_t UpdateStatus_timer = 0;
	uint16_t Ticker_Count = 0;
	uint16_t RC_Timeout = 0;
	uint16_t Servo_Rate = 0;
	uint16_t Transition_timeout = 0;
	uint16_t Disarm_timer = 0;
    338a:	41 2c       	mov	r4, r1
    338c:	51 2c       	mov	r5, r1
	uint16_t Status_timeout = 0;
	uint16_t UpdateStatus_timer = 0;
	uint16_t Ticker_Count = 0;
	uint16_t RC_Timeout = 0;
	uint16_t Servo_Rate = 0;
	uint16_t Transition_timeout = 0;
    338e:	21 2c       	mov	r2, r1
    3390:	31 2c       	mov	r3, r1
	// 16-bit timers
	uint16_t Status_timeout = 0;
	uint16_t UpdateStatus_timer = 0;
	uint16_t Ticker_Count = 0;
	uint16_t RC_Timeout = 0;
	uint16_t Servo_Rate = 0;
    3392:	1b 86       	std	Y+11, r1	; 0x0b
    3394:	1a 86       	std	Y+10, r1	; 0x0a

	// 16-bit timers
	uint16_t Status_timeout = 0;
	uint16_t UpdateStatus_timer = 0;
	uint16_t Ticker_Count = 0;
	uint16_t RC_Timeout = 0;
    3396:	61 2c       	mov	r6, r1
    3398:	71 2c       	mov	r7, r1
//	uint32_t RC_Master_Timer = 0;

	// 16-bit timers
	uint16_t Status_timeout = 0;
	uint16_t UpdateStatus_timer = 0;
	uint16_t Ticker_Count = 0;
    339a:	1c 8a       	std	Y+20, r1	; 0x14
    339c:	1b 8a       	std	Y+19, r1	; 0x13
	uint32_t RC_Rate_Timer = 0;
//	uint32_t RC_Master_Timer = 0;

	// 16-bit timers
	uint16_t Status_timeout = 0;
	uint16_t UpdateStatus_timer = 0;
    339e:	19 86       	std	Y+9, r1	; 0x09
    33a0:	18 86       	std	Y+8, r1	; 0x08
	uint32_t Arm_timer = 0;
	uint32_t RC_Rate_Timer = 0;
//	uint32_t RC_Master_Timer = 0;

	// 16-bit timers
	uint16_t Status_timeout = 0;
    33a2:	1a a2       	std	Y+34, r1	; 0x22
    33a4:	19 a2       	std	Y+33, r1	; 0x21
	bool PWM_Last_Call = false;
	bool ResampleRCRate = false;

	// 32-bit timers
	uint32_t Arm_timer = 0;
	uint32_t RC_Rate_Timer = 0;
    33a6:	c1 2c       	mov	r12, r1
    33a8:	d1 2c       	mov	r13, r1
    33aa:	76 01       	movw	r14, r12
	bool ServoTick = false;
	bool PWM_Last_Call = false;
	bool ResampleRCRate = false;

	// 32-bit timers
	uint32_t Arm_timer = 0;
    33ac:	81 2c       	mov	r8, r1
    33ae:	91 2c       	mov	r9, r1
    33b0:	54 01       	movw	r10, r8
	bool RCrateMeasured = false;
	bool PWMBlocked = false;
	bool RCInterruptsON = false;
	bool ServoTick = false;
	bool PWM_Last_Call = false;
	bool ResampleRCRate = false;
    33b2:	1a 8a       	std	Y+18, r1	; 0x12
	bool TransitionUpdated = false;
	bool RCrateMeasured = false;
	bool PWMBlocked = false;
	bool RCInterruptsON = false;
	bool ServoTick = false;
	bool PWM_Last_Call = false;
    33b4:	19 8a       	std	Y+17, r1	; 0x11
	// Flags
	bool TransitionUpdated = false;
	bool RCrateMeasured = false;
	bool PWMBlocked = false;
	bool RCInterruptsON = false;
	bool ServoTick = false;
    33b6:	1c 82       	std	Y+4, r1	; 0x04
{
	// Flags
	bool TransitionUpdated = false;
	bool RCrateMeasured = false;
	bool PWMBlocked = false;
	bool RCInterruptsON = false;
    33b8:	18 8a       	std	Y+16, r1	; 0x10
int main(void)
{
	// Flags
	bool TransitionUpdated = false;
	bool RCrateMeasured = false;
	bool PWMBlocked = false;
    33ba:	1a 82       	std	Y+2, r1	; 0x02

int main(void)
{
	// Flags
	bool TransitionUpdated = false;
	bool RCrateMeasured = false;
    33bc:	19 82       	std	Y+1, r1	; 0x01

	// Main loop
	while (1)
	{
		// Increment the loop counter
		LoopCount++;
    33be:	80 91 18 05 	lds	r24, 0x0518
    33c2:	8f 5f       	subi	r24, 0xFF	; 255
    33c4:	80 93 18 05 	sts	0x0518, r24
		//* Check for interruption of PWM generation
		//* The "JitterFlag" flag was reset just before PWM generation.
		//* Being set here means that an interrupt has occurred.
		//************************************************************

		if (JitterFlag == true)
    33c8:	80 91 e7 07 	lds	r24, 0x07E7
    33cc:	88 23       	and	r24, r24
    33ce:	31 f0       	breq	.+12     	; 0x33dc <main+0x8e>
		{
			InterruptCounter++;
    33d0:	2d 81       	ldd	r18, Y+5	; 0x05
    33d2:	3e 81       	ldd	r19, Y+6	; 0x06
    33d4:	2f 5f       	subi	r18, 0xFF	; 255
    33d6:	3f 4f       	sbci	r19, 0xFF	; 255
    33d8:	3e 83       	std	Y+6, r19	; 0x06
    33da:	2d 83       	std	Y+5, r18	; 0x05

		//************************************************************
		//* State machine for switching between screens safely
		//************************************************************

		switch(Menu_mode) 
    33dc:	14 30       	cpi	r17, 0x04	; 4
    33de:	d9 f1       	breq	.+118    	; 0x3456 <main+0x108>
    33e0:	88 f4       	brcc	.+34     	; 0x3404 <main+0xb6>
    33e2:	11 23       	and	r17, r17
    33e4:	11 f1       	breq	.+68     	; 0x342a <main+0xdc>
    33e6:	13 30       	cpi	r17, 0x03	; 3
    33e8:	09 f0       	breq	.+2      	; 0x33ec <main+0x9e>
    33ea:	55 c0       	rjmp	.+170    	; 0x3496 <main+0x148>
			case STATUS:
				// Reset the status screen period
				UpdateStatus_timer = 0;

				// Update status screen
				Display_status();
    33ec:	0e 94 87 13 	call	0x270e	; 0x270e <Display_status>
				
				// Force code to wait for a new packet
				// Note that FAST mode won't care about this
				Interrupted = false;
    33f0:	10 92 cc 07 	sts	0x07CC, r1

				// FAST mode needs to block PWM generation manually
				PWMBlocked = true;	
				init_int(); // Re-enable interrupts so that PWM is unblocked after the next data
    33f4:	0e 94 7c 2d 	call	0x5af8	; 0x5af8 <init_int>

				// Wait for timeout
				Menu_mode = WAITING_TIMEOUT_BD;
    33f8:	15 e0       	ldi	r17, 0x05	; 5
				break;

			// Status screen first display
			case STATUS:
				// Reset the status screen period
				UpdateStatus_timer = 0;
    33fa:	19 86       	std	Y+9, r1	; 0x09
    33fc:	18 86       	std	Y+8, r1	; 0x08
				// Force code to wait for a new packet
				// Note that FAST mode won't care about this
				Interrupted = false;

				// FAST mode needs to block PWM generation manually
				PWMBlocked = true;	
    33fe:	31 e0       	ldi	r19, 0x01	; 1
    3400:	3a 83       	std	Y+2, r19	; 0x02
				init_int(); // Re-enable interrupts so that PWM is unblocked after the next data

				// Wait for timeout
				Menu_mode = WAITING_TIMEOUT_BD;
				break;
    3402:	49 c0       	rjmp	.+146    	; 0x3496 <main+0x148>

		//************************************************************
		//* State machine for switching between screens safely
		//************************************************************

		switch(Menu_mode) 
    3404:	16 30       	cpi	r17, 0x06	; 6
    3406:	e1 f1       	breq	.+120    	; 0x3480 <main+0x132>
    3408:	10 f1       	brcs	.+68     	; 0x344e <main+0x100>
    340a:	17 30       	cpi	r17, 0x07	; 7
    340c:	09 f0       	breq	.+2      	; 0x3410 <main+0xc2>
    340e:	43 c0       	rjmp	.+134    	; 0x3496 <main+0x148>

				break;

			// In MENU mode, 
			case MENU:
				LVA = 0;	// Make sure buzzer is off :)
    3410:	29 98       	cbi	0x05, 1	; 5
				// Disarm the FC
				General_error |= (1 << DISARMED);
    3412:	80 91 20 05 	lds	r24, 0x0520
    3416:	84 60       	ori	r24, 0x04	; 4
    3418:	80 93 20 05 	sts	0x0520, r24
				// Start the menu system
				menu_main();
    341c:	0e 94 7c 32 	call	0x64f8	; 0x64f8 <menu_main>
				// Switch back to status screen when leaving menu
				Menu_mode = STATUS;
				// Reset timeout once back in status screen
				Status_seconds = 0;
				// Reset IMU on return from menu
				reset_IMU();
    3420:	0e 94 30 28 	call	0x5060	; 0x5060 <reset_IMU>
				
				// Force code to wait for a new packet
				Interrupted = false;
    3424:	10 92 cc 07 	sts	0x07CC, r1
    3428:	32 c0       	rjmp	.+100    	; 0x348e <main+0x140>
		switch(Menu_mode) 
		{
			// In IDLE mode, the text "Press for status" is displayed ONCE.
			// If a button is pressed the mode changes to STATUS
			case IDLE:
				if((PINB & 0xf0) != 0xf0)
    342a:	83 b1       	in	r24, 0x03	; 3
    342c:	80 7f       	andi	r24, 0xF0	; 240
    342e:	80 3f       	cpi	r24, 0xF0	; 240
    3430:	49 f0       	breq	.+18     	; 0x3444 <main+0xf6>
				{
					Menu_mode = STATUS;
					// Reset the status screen timeout
					Status_seconds = 0;
					menu_beep(1);
    3432:	81 e0       	ldi	r24, 0x01	; 1
    3434:	0e 94 15 30 	call	0x602a	; 0x602a <menu_beep>
					
					// When not in idle mode, enable Timer0 interrupts as loop rate 
					// is slow and we need TMR0 to fully measure it.
					// This may cause PWM generation interruption
					TIMSK0 |= (1 << TOIE0);	
    3438:	80 91 6e 00 	lds	r24, 0x006E
    343c:	81 60       	ori	r24, 0x01	; 1
    343e:	80 93 6e 00 	sts	0x006E, r24
    3442:	25 c0       	rjmp	.+74     	; 0x348e <main+0x140>
				}
				// Idle mode - fast loop rate so don't need TMR0.
				// We don't want TMR0 to interrupt PWM generation.
				else
				{
					TIMSK0 = 0; 		// Disable Timer0 interrupts
    3444:	10 92 6e 00 	sts	0x006E, r1
					TIFR0 = 1;			// Clear interrupt flag
    3448:	81 e0       	ldi	r24, 0x01	; 1
    344a:	85 bb       	out	0x15, r24	; 21
    344c:	24 c0       	rjmp	.+72     	; 0x3496 <main+0x148>

			// Status screen up, but button still down ;)
			// This is designed to stop the menu appearing instead of the status screen
			// as it will stay here until the button is released
			case WAITING_TIMEOUT_BD:
				if(BUTTON1 == 0)
    344e:	1f 9b       	sbis	0x03, 7	; 3
    3450:	22 c0       	rjmp	.+68     	; 0x3496 <main+0x148>
				{
					Menu_mode = WAITING_TIMEOUT_BD;
				}
				else
				{
					Menu_mode = WAITING_TIMEOUT;
    3452:	14 e0       	ldi	r17, 0x04	; 4
    3454:	20 c0       	rjmp	.+64     	; 0x3496 <main+0x148>
												
			// Status screen up, waiting for timeout or action
			// but button is back up
			case WAITING_TIMEOUT:
				// In status screen, change back to idle after timing out
				if (Status_seconds >= 3)
    3456:	4f 81       	ldd	r20, Y+7	; 0x07
    3458:	43 30       	cpi	r20, 0x03	; 3
    345a:	e0 f4       	brcc	.+56     	; 0x3494 <main+0x146>
				{
					Menu_mode = STATUS_TIMEOUT;
				}

				// Jump to menu if button pressed
				else if(BUTTON1 == 0)
    345c:	1f 99       	sbic	0x03, 7	; 3
    345e:	07 c0       	rjmp	.+14     	; 0x346e <main+0x120>
				{
					Menu_mode = MENU;
					menu_beep(1);
    3460:	81 e0       	ldi	r24, 0x01	; 1
    3462:	0e 94 15 30 	call	0x602a	; 0x602a <menu_beep>
					
					// Force code to wait for a new packet
					Interrupted = false;
    3466:	10 92 cc 07 	sts	0x07CC, r1
				}

				// Jump to menu if button pressed
				else if(BUTTON1 == 0)
				{
					Menu_mode = MENU;
    346a:	17 e0       	ldi	r17, 0x07	; 7
    346c:	14 c0       	rjmp	.+40     	; 0x3496 <main+0x148>
					// Force code to wait for a new packet
					Interrupted = false;
				}

				// Update status screen while waiting to time out
				else if (UpdateStatus_timer > (SECOND_TIMER >> 2))
    346e:	88 85       	ldd	r24, Y+8	; 0x08
    3470:	99 85       	ldd	r25, Y+9	; 0x09
    3472:	83 31       	cpi	r24, 0x13	; 19
    3474:	93 41       	sbci	r25, 0x13	; 19
    3476:	78 f0       	brcs	.+30     	; 0x3496 <main+0x148>
				{
					Menu_mode = STATUS;
					Disable_RC_Interrupts(); // Debug - probably unnecessary
    3478:	0e 94 69 2d 	call	0x5ad2	; 0x5ad2 <Disable_RC_Interrupts>
				}

				// Update status screen while waiting to time out
				else if (UpdateStatus_timer > (SECOND_TIMER >> 2))
				{
					Menu_mode = STATUS;
    347c:	13 e0       	ldi	r17, 0x03	; 3
    347e:	0b c0       	rjmp	.+22     	; 0x3496 <main+0x148>
				break;

			// In STATUS_TIMEOUT mode, the idle screen is displayed and the mode changed to IDLE
			case STATUS_TIMEOUT:
				// Pop up the Idle screen
				idle_screen();
    3480:	0e 94 4a 21 	call	0x4294	; 0x4294 <idle_screen>

				// Switch to IDLE mode
				Menu_mode = IDLE;

				// Force code to wait for a new packet
				Interrupted = false;
    3484:	10 92 cc 07 	sts	0x07CC, r1
			case STATUS_TIMEOUT:
				// Pop up the Idle screen
				idle_screen();

				// Switch to IDLE mode
				Menu_mode = IDLE;
    3488:	10 e0       	ldi	r17, 0x00	; 0

				// Force code to wait for a new packet
				Interrupted = false;
				PWMBlocked = false;	
    348a:	1a 82       	std	Y+2, r1	; 0x02
				//PWMBlocked = true;	

				break;
    348c:	04 c0       	rjmp	.+8      	; 0x3496 <main+0x148>
				// Disarm the FC
				General_error |= (1 << DISARMED);
				// Start the menu system
				menu_main();
				// Switch back to status screen when leaving menu
				Menu_mode = STATUS;
    348e:	13 e0       	ldi	r17, 0x03	; 3
				// Reset timeout once back in status screen
				Status_seconds = 0;
    3490:	1f 82       	std	Y+7, r1	; 0x07
				
				// Force code to wait for a new packet
				Interrupted = false;
				//PWMBlocked = true;	
								
				break;
    3492:	01 c0       	rjmp	.+2      	; 0x3496 <main+0x148>
			case WAITING_TIMEOUT:
				// In status screen, change back to idle after timing out
				if (Status_seconds >= 3)
				//if (Status_seconds >= 10) // debug
				{
					Menu_mode = STATUS_TIMEOUT;
    3494:	16 e0       	ldi	r17, 0x06	; 6
		//************************************************************
		//* Status menu timing
		//************************************************************

		// Count elapsed seconds
		if (Status_timeout > SECOND_TIMER)
    3496:	e9 a1       	ldd	r30, Y+33	; 0x21
    3498:	fa a1       	ldd	r31, Y+34	; 0x22
    349a:	ec 34       	cpi	r30, 0x4C	; 76
    349c:	fc 44       	sbci	r31, 0x4C	; 76
    349e:	98 f0       	brcs	.+38     	; 0x34c6 <main+0x178>
		{
			Status_seconds++;
    34a0:	3f 81       	ldd	r19, Y+7	; 0x07
    34a2:	3f 5f       	subi	r19, 0xFF	; 255
    34a4:	3f 83       	std	Y+7, r19	; 0x07
			Status_timeout = 0;

			// Update the interrupt count each second
			InterruptCount = InterruptCounter;
    34a6:	4d 81       	ldd	r20, Y+5	; 0x05
    34a8:	5e 81       	ldd	r21, Y+6	; 0x06
    34aa:	50 93 1d 05 	sts	0x051D, r21
    34ae:	40 93 1c 05 	sts	0x051C, r20
			InterruptCounter = 0;
			
			// Re-measure the frame rate in FAST mode every second
			if (Config.Servo_rate == FAST)
    34b2:	80 91 40 06 	lds	r24, 0x0640
			Status_seconds++;
			Status_timeout = 0;

			// Update the interrupt count each second
			InterruptCount = InterruptCounter;
			InterruptCounter = 0;
    34b6:	1e 82       	std	Y+6, r1	; 0x06
    34b8:	1d 82       	std	Y+5, r1	; 0x05

		// Count elapsed seconds
		if (Status_timeout > SECOND_TIMER)
		{
			Status_seconds++;
			Status_timeout = 0;
    34ba:	1a a2       	std	Y+34, r1	; 0x22
    34bc:	19 a2       	std	Y+33, r1	; 0x21
			// Update the interrupt count each second
			InterruptCount = InterruptCounter;
			InterruptCounter = 0;
			
			// Re-measure the frame rate in FAST mode every second
			if (Config.Servo_rate == FAST)
    34be:	82 30       	cpi	r24, 0x02	; 2
    34c0:	11 f4       	brne	.+4      	; 0x34c6 <main+0x178>
			{
				ResampleRCRate = true;
    34c2:	51 e0       	ldi	r21, 0x01	; 1
    34c4:	5a 8b       	std	Y+18, r21	; 0x12
		//* System ticker - based on TCNT2 (19.531kHz)
		//* 
		//* ((Ticker_Count >> 8) &8) 	= 4.77Hz (Disarm and LVA alarms)
		//************************************************************

		if ((Ticker_Count >> 8) &8) 
    34c6:	8b 89       	ldd	r24, Y+19	; 0x13
    34c8:	9c 89       	ldd	r25, Y+20	; 0x14
    34ca:	93 ff       	sbrs	r25, 3
    34cc:	04 c0       	rjmp	.+8      	; 0x34d6 <main+0x188>
		{
			Alarm_flags |= (1 << BUZZER_ON);	// 4.77Hz beep
    34ce:	80 91 1e 05 	lds	r24, 0x051E
    34d2:	80 61       	ori	r24, 0x10	; 16
    34d4:	03 c0       	rjmp	.+6      	; 0x34dc <main+0x18e>
		}
		else 
		{
			Alarm_flags &= ~(1 << BUZZER_ON);
    34d6:	80 91 1e 05 	lds	r24, 0x051E
    34da:	8f 7e       	andi	r24, 0xEF	; 239
    34dc:	80 93 1e 05 	sts	0x051E, r24
		//************************************************************
		//* Alarms
		//************************************************************

		// If RC signal is overdue, signal RX error message and disarm
		if (Overdue)
    34e0:	80 91 19 05 	lds	r24, 0x0519
    34e4:	88 23       	and	r24, r24
    34e6:	b1 f0       	breq	.+44     	; 0x3514 <main+0x1c6>
		{
			General_error |= (1 << NO_SIGNAL);		// Set NO_SIGNAL bit
    34e8:	80 91 20 05 	lds	r24, 0x0520
    34ec:	82 60       	ori	r24, 0x02	; 2
    34ee:	80 93 20 05 	sts	0x0520, r24
			
			// If FC is set to "armable" and is currently armed, disarm the FC
			if ((Config.ArmMode == ARMABLE) && ((General_error & (1 << DISARMED)) == 0))
    34f2:	80 91 3d 06 	lds	r24, 0x063D
    34f6:	81 30       	cpi	r24, 0x01	; 1
    34f8:	91 f4       	brne	.+36     	; 0x351e <main+0x1d0>
    34fa:	80 91 20 05 	lds	r24, 0x0520
    34fe:	82 fd       	sbrc	r24, 2
    3500:	0e c0       	rjmp	.+28     	; 0x351e <main+0x1d0>
			{
				General_error |= (1 << DISARMED);	// Set flags to disarmed
    3502:	80 91 20 05 	lds	r24, 0x0520
    3506:	84 60       	ori	r24, 0x04	; 4
    3508:	80 93 20 05 	sts	0x0520, r24
				menu_beep(1);						// Signal that FC is now disarmed
    350c:	81 e0       	ldi	r24, 0x01	; 1
    350e:	0e 94 15 30 	call	0x602a	; 0x602a <menu_beep>
    3512:	05 c0       	rjmp	.+10     	; 0x351e <main+0x1d0>
			}
		}
		else
		{
			General_error &= ~(1 << NO_SIGNAL);	// Clear NO_SIGNAL bit
    3514:	80 91 20 05 	lds	r24, 0x0520
    3518:	8d 7f       	andi	r24, 0xFD	; 253
    351a:	80 93 20 05 	sts	0x0520, r24
		}

		// Beep buzzer if Vbat lower than trigger		
		if (GetVbat() < Config.PowerTriggerActual)
    351e:	0e 94 b8 44 	call	0x8970	; 0x8970 <GetVbat>
    3522:	20 91 39 06 	lds	r18, 0x0639
    3526:	30 91 3a 06 	lds	r19, 0x063A
    352a:	82 17       	cp	r24, r18
    352c:	93 07       	cpc	r25, r19
    352e:	20 f4       	brcc	.+8      	; 0x3538 <main+0x1ea>
		{
			General_error |= (1 << LVA_ALARM);	// Set LVA_Alarm flag
    3530:	80 91 20 05 	lds	r24, 0x0520
    3534:	88 60       	ori	r24, 0x08	; 8
    3536:	03 c0       	rjmp	.+6      	; 0x353e <main+0x1f0>
		}
		else 
		{
			General_error &= ~(1 << LVA_ALARM);	// Clear LVA_Alarm flag
    3538:	80 91 20 05 	lds	r24, 0x0520
    353c:	87 7f       	andi	r24, 0xF7	; 247
    353e:	80 93 20 05 	sts	0x0520, r24
		}

		// Turn on buzzer if in alarm state (BUZZER_ON is oscillating)
		if	(
			 (
				(General_error & (1 << LVA_ALARM)) ||		// Low battery
    3542:	80 91 20 05 	lds	r24, 0x0520
		{
			General_error &= ~(1 << LVA_ALARM);	// Clear LVA_Alarm flag
		}

		// Turn on buzzer if in alarm state (BUZZER_ON is oscillating)
		if	(
    3546:	83 fd       	sbrc	r24, 3
    3548:	08 c0       	rjmp	.+16     	; 0x355a <main+0x20c>
			 (
				(General_error & (1 << LVA_ALARM)) ||		// Low battery
				(General_error & (1 << NO_SIGNAL)) ||		// No signal
    354a:	80 91 20 05 	lds	r24, 0x0520
		}

		// Turn on buzzer if in alarm state (BUZZER_ON is oscillating)
		if	(
			 (
				(General_error & (1 << LVA_ALARM)) ||		// Low battery
    354e:	81 fd       	sbrc	r24, 1
    3550:	04 c0       	rjmp	.+8      	; 0x355a <main+0x20c>
				(General_error & (1 << NO_SIGNAL)) ||		// No signal
				(General_error & (1 << THROTTLE_HIGH))		// Throttle high
    3552:	80 91 20 05 	lds	r24, 0x0520

		// Turn on buzzer if in alarm state (BUZZER_ON is oscillating)
		if	(
			 (
				(General_error & (1 << LVA_ALARM)) ||		// Low battery
				(General_error & (1 << NO_SIGNAL)) ||		// No signal
    3556:	80 ff       	sbrs	r24, 0
    3558:	06 c0       	rjmp	.+12     	; 0x3566 <main+0x218>
				(General_error & (1 << THROTTLE_HIGH))		// Throttle high
			 ) && 
			  (Alarm_flags & (1 << BUZZER_ON))
    355a:	80 91 1e 05 	lds	r24, 0x051E
		if	(
			 (
				(General_error & (1 << LVA_ALARM)) ||		// Low battery
				(General_error & (1 << NO_SIGNAL)) ||		// No signal
				(General_error & (1 << THROTTLE_HIGH))		// Throttle high
			 ) && 
    355e:	84 ff       	sbrs	r24, 4
    3560:	02 c0       	rjmp	.+4      	; 0x3566 <main+0x218>
			  (Alarm_flags & (1 << BUZZER_ON))
			) 
		{
			LVA = 1;
    3562:	29 9a       	sbi	0x05, 1	; 5
    3564:	01 c0       	rjmp	.+2      	; 0x3568 <main+0x21a>
		}
		else 
		{
			LVA = 0;
    3566:	29 98       	cbi	0x05, 1	; 5

		//************************************************************
		//* Arm/disarm handling
		//************************************************************

		if (Config.ArmMode == ARMABLE)
    3568:	80 91 3d 06 	lds	r24, 0x063D
    356c:	81 30       	cpi	r24, 0x01	; 1
    356e:	09 f0       	breq	.+2      	; 0x3572 <main+0x224>
    3570:	93 c0       	rjmp	.+294    	; 0x3698 <main+0x34a>
			// Manual arm/disarm

			// If sticks not at extremes, reset manual arm/disarm timer
			// Sticks down and centered = armed. Down and outside = disarmed
			if (
				((-ARM_TIMER_RESET_1 < RCinputs[AILERON]) && (RCinputs[AILERON] < ARM_TIMER_RESET_1)) ||
    3572:	80 91 2f 08 	lds	r24, 0x082F
    3576:	90 91 30 08 	lds	r25, 0x0830
		{
			// Manual arm/disarm

			// If sticks not at extremes, reset manual arm/disarm timer
			// Sticks down and centered = armed. Down and outside = disarmed
			if (
    357a:	81 34       	cpi	r24, 0x41	; 65
    357c:	9c 4f       	sbci	r25, 0xFC	; 252
    357e:	44 f0       	brlt	.+16     	; 0x3590 <main+0x242>
				((-ARM_TIMER_RESET_1 < RCinputs[AILERON]) && (RCinputs[AILERON] < ARM_TIMER_RESET_1)) ||
    3580:	80 91 2f 08 	lds	r24, 0x082F
    3584:	90 91 30 08 	lds	r25, 0x0830
    3588:	80 3c       	cpi	r24, 0xC0	; 192
    358a:	93 40       	sbci	r25, 0x03	; 3
    358c:	0c f4       	brge	.+2      	; 0x3590 <main+0x242>
    358e:	53 c0       	rjmp	.+166    	; 0x3636 <main+0x2e8>
				((-ARM_TIMER_RESET_1 < RCinputs[ELEVATOR]) && (RCinputs[ELEVATOR] < ARM_TIMER_RESET_1)) ||
    3590:	80 91 31 08 	lds	r24, 0x0831
    3594:	90 91 32 08 	lds	r25, 0x0832
			// Manual arm/disarm

			// If sticks not at extremes, reset manual arm/disarm timer
			// Sticks down and centered = armed. Down and outside = disarmed
			if (
				((-ARM_TIMER_RESET_1 < RCinputs[AILERON]) && (RCinputs[AILERON] < ARM_TIMER_RESET_1)) ||
    3598:	81 34       	cpi	r24, 0x41	; 65
    359a:	9c 4f       	sbci	r25, 0xFC	; 252
    359c:	44 f0       	brlt	.+16     	; 0x35ae <main+0x260>
				((-ARM_TIMER_RESET_1 < RCinputs[ELEVATOR]) && (RCinputs[ELEVATOR] < ARM_TIMER_RESET_1)) ||
    359e:	80 91 31 08 	lds	r24, 0x0831
    35a2:	90 91 32 08 	lds	r25, 0x0832
    35a6:	80 3c       	cpi	r24, 0xC0	; 192
    35a8:	93 40       	sbci	r25, 0x03	; 3
    35aa:	0c f4       	brge	.+2      	; 0x35ae <main+0x260>
    35ac:	44 c0       	rjmp	.+136    	; 0x3636 <main+0x2e8>
				((-ARM_TIMER_RESET_1 < RCinputs[RUDDER]) && (RCinputs[RUDDER] < ARM_TIMER_RESET_1)) ||
    35ae:	80 91 33 08 	lds	r24, 0x0833
    35b2:	90 91 34 08 	lds	r25, 0x0834

			// If sticks not at extremes, reset manual arm/disarm timer
			// Sticks down and centered = armed. Down and outside = disarmed
			if (
				((-ARM_TIMER_RESET_1 < RCinputs[AILERON]) && (RCinputs[AILERON] < ARM_TIMER_RESET_1)) ||
				((-ARM_TIMER_RESET_1 < RCinputs[ELEVATOR]) && (RCinputs[ELEVATOR] < ARM_TIMER_RESET_1)) ||
    35b6:	81 34       	cpi	r24, 0x41	; 65
    35b8:	9c 4f       	sbci	r25, 0xFC	; 252
    35ba:	3c f0       	brlt	.+14     	; 0x35ca <main+0x27c>
				((-ARM_TIMER_RESET_1 < RCinputs[RUDDER]) && (RCinputs[RUDDER] < ARM_TIMER_RESET_1)) ||
    35bc:	80 91 33 08 	lds	r24, 0x0833
    35c0:	90 91 34 08 	lds	r25, 0x0834
    35c4:	80 3c       	cpi	r24, 0xC0	; 192
    35c6:	93 40       	sbci	r25, 0x03	; 3
    35c8:	b4 f1       	brlt	.+108    	; 0x3636 <main+0x2e8>
				(ARM_TIMER_RESET_2 < MonopolarThrottle)
    35ca:	80 91 2b 08 	lds	r24, 0x082B
    35ce:	90 91 2c 08 	lds	r25, 0x082C
			// If sticks not at extremes, reset manual arm/disarm timer
			// Sticks down and centered = armed. Down and outside = disarmed
			if (
				((-ARM_TIMER_RESET_1 < RCinputs[AILERON]) && (RCinputs[AILERON] < ARM_TIMER_RESET_1)) ||
				((-ARM_TIMER_RESET_1 < RCinputs[ELEVATOR]) && (RCinputs[ELEVATOR] < ARM_TIMER_RESET_1)) ||
				((-ARM_TIMER_RESET_1 < RCinputs[RUDDER]) && (RCinputs[RUDDER] < ARM_TIMER_RESET_1)) ||
    35d2:	c3 97       	sbiw	r24, 0x33	; 51
    35d4:	84 f5       	brge	.+96     	; 0x3636 <main+0x2e8>
				Arm_timer = 0;
			}

			// If arm timer times out, the sticks must have been at extremes for ARM_TIMER seconds
			// If aileron is at min, arm the FC
			if ((Arm_timer > ARM_TIMER) && (RCinputs[AILERON] < -ARM_TIMER_RESET_1))
    35d6:	4c e4       	ldi	r20, 0x4C	; 76
    35d8:	84 16       	cp	r8, r20
    35da:	94 06       	cpc	r9, r20
    35dc:	a1 04       	cpc	r10, r1
    35de:	b1 04       	cpc	r11, r1
    35e0:	68 f1       	brcs	.+90     	; 0x363c <main+0x2ee>
    35e2:	80 91 2f 08 	lds	r24, 0x082F
    35e6:	90 91 30 08 	lds	r25, 0x0830
    35ea:	80 34       	cpi	r24, 0x40	; 64
    35ec:	9c 4f       	sbci	r25, 0xFC	; 252
    35ee:	6c f4       	brge	.+26     	; 0x360a <main+0x2bc>
			{
				Arm_timer = 0;
				General_error &= ~(1 << DISARMED);		// Set flags to armed (negate disarmed)
    35f0:	80 91 20 05 	lds	r24, 0x0520
    35f4:	8b 7f       	andi	r24, 0xFB	; 251
    35f6:	80 93 20 05 	sts	0x0520, r24
				CalibrateGyrosSlow();					// Calibrate gyros
    35fa:	0e 94 a7 22 	call	0x454e	; 0x454e <CalibrateGyrosSlow>
				menu_beep(20);							// Signal that FC is ready
    35fe:	84 e1       	ldi	r24, 0x14	; 20
    3600:	0e 94 15 30 	call	0x602a	; 0x602a <menu_beep>
				reset_IMU();							// Reset IMU just in case...
    3604:	0e 94 30 28 	call	0x5060	; 0x5060 <reset_IMU>
    3608:	16 c0       	rjmp	.+44     	; 0x3636 <main+0x2e8>
			}
			// Else, disarm the FC after DISARM_TIMER seconds if aileron at max
			else if ((Arm_timer > DISARM_TIMER) && (RCinputs[AILERON] > ARM_TIMER_RESET_1))
    360a:	82 ee       	ldi	r24, 0xE2	; 226
    360c:	88 16       	cp	r8, r24
    360e:	84 ee       	ldi	r24, 0xE4	; 228
    3610:	98 06       	cpc	r9, r24
    3612:	a1 04       	cpc	r10, r1
    3614:	b1 04       	cpc	r11, r1
    3616:	90 f0       	brcs	.+36     	; 0x363c <main+0x2ee>
    3618:	80 91 2f 08 	lds	r24, 0x082F
    361c:	90 91 30 08 	lds	r25, 0x0830
    3620:	81 3c       	cpi	r24, 0xC1	; 193
    3622:	93 40       	sbci	r25, 0x03	; 3
    3624:	5c f0       	brlt	.+22     	; 0x363c <main+0x2ee>
			{
				Arm_timer = 0;
				General_error |= (1 << DISARMED);		// Set flags to disarmed
    3626:	80 91 20 05 	lds	r24, 0x0520
    362a:	84 60       	ori	r24, 0x04	; 4
    362c:	80 93 20 05 	sts	0x0520, r24
				menu_beep(1);							// Signal that FC is now disarmed
    3630:	81 e0       	ldi	r24, 0x01	; 1
    3632:	0e 94 15 30 	call	0x602a	; 0x602a <menu_beep>
    3636:	81 2c       	mov	r8, r1
    3638:	91 2c       	mov	r9, r1
    363a:	54 01       	movw	r10, r8
			}

			// Automatic disarm

			// Reset auto-disarm count if any RX activity or set to zero, or when currently disarmed
			if ((Flight_flags & (1 << RxActivity)) || (Config.Disarm_timer == 0) || (General_error & (1 << DISARMED)))
    363c:	80 91 1f 05 	lds	r24, 0x051F
    3640:	80 fd       	sbrc	r24, 0
    3642:	10 c0       	rjmp	.+32     	; 0x3664 <main+0x316>
    3644:	80 91 3e 06 	lds	r24, 0x063E
    3648:	88 23       	and	r24, r24
    364a:	61 f0       	breq	.+24     	; 0x3664 <main+0x316>
    364c:	80 91 20 05 	lds	r24, 0x0520
    3650:	82 fd       	sbrc	r24, 2
    3652:	08 c0       	rjmp	.+16     	; 0x3664 <main+0x316>
				Disarm_timer = 0;
				Disarm_seconds = 0;
			}
		
			// Increment disarm timer (seconds) if armed
			if (Disarm_timer > SECOND_TIMER)
    3654:	bc e4       	ldi	r27, 0x4C	; 76
    3656:	4b 16       	cp	r4, r27
    3658:	5b 06       	cpc	r5, r27
    365a:	38 f0       	brcs	.+14     	; 0x366a <main+0x31c>
			{
				Disarm_seconds++;
    365c:	eb 81       	ldd	r30, Y+3	; 0x03
    365e:	ef 5f       	subi	r30, 0xFF	; 255
    3660:	eb 83       	std	Y+3, r30	; 0x03
    3662:	01 c0       	rjmp	.+2      	; 0x3666 <main+0x318>
    3664:	1b 82       	std	Y+3, r1	; 0x03
    3666:	41 2c       	mov	r4, r1
    3668:	51 2c       	mov	r5, r1
				Disarm_timer = 0;
			}

			// Auto-disarm model if timeout enabled and due
			if ((Disarm_seconds >= Config.Disarm_timer) && (Config.Disarm_timer >= 30))	
    366a:	40 91 3e 06 	lds	r20, 0x063E
    366e:	fb 81       	ldd	r31, Y+3	; 0x03
    3670:	2f 2f       	mov	r18, r31
    3672:	30 e0       	ldi	r19, 0x00	; 0
    3674:	84 2f       	mov	r24, r20
    3676:	99 27       	eor	r25, r25
    3678:	87 fd       	sbrc	r24, 7
    367a:	90 95       	com	r25
    367c:	28 17       	cp	r18, r24
    367e:	39 07       	cpc	r19, r25
    3680:	84 f0       	brlt	.+32     	; 0x36a2 <main+0x354>
    3682:	4e 31       	cpi	r20, 0x1E	; 30
    3684:	74 f0       	brlt	.+28     	; 0x36a2 <main+0x354>
			{
				// Disarm the FC
				General_error |= (1 << DISARMED);		// Set flags to disarmed
    3686:	80 91 20 05 	lds	r24, 0x0520
    368a:	84 60       	ori	r24, 0x04	; 4
    368c:	80 93 20 05 	sts	0x0520, r24
				menu_beep(1);							// Signal that FC is now disarmed
    3690:	81 e0       	ldi	r24, 0x01	; 1
    3692:	0e 94 15 30 	call	0x602a	; 0x602a <menu_beep>
    3696:	05 c0       	rjmp	.+10     	; 0x36a2 <main+0x354>
			}
		}
		// Arm when ArmMode is OFF
		else 
		{
			General_error &= ~(1 << DISARMED);			// Set flags to armed
    3698:	80 91 20 05 	lds	r24, 0x0520
    369c:	8b 7f       	andi	r24, 0xFB	; 251
    369e:	80 93 20 05 	sts	0x0520, r24
		//************************************************************
		//* Get RC data
		//************************************************************

		// Update zeroed RC channel data
		RxGetChannels();
    36a2:	0e 94 ee 41 	call	0x83dc	; 0x83dc <RxGetChannels>

		// Check for throttle reset
		if (MonopolarThrottle < THROTTLEIDLE)
    36a6:	80 91 2b 08 	lds	r24, 0x082B
    36aa:	90 91 2c 08 	lds	r25, 0x082C
    36ae:	c2 97       	sbiw	r24, 0x32	; 50
    36b0:	5c f4       	brge	.+22     	; 0x36c8 <main+0x37a>
		{
			// Clear throttle high error
			General_error &= ~(1 << THROTTLE_HIGH);	
    36b2:	80 91 20 05 	lds	r24, 0x0520
    36b6:	8e 7f       	andi	r24, 0xFE	; 254
    36b8:	80 93 20 05 	sts	0x0520, r24

			// Reset I-terms at throttle cut. Using memset saves code space
			memset(&IntegralGyro[P1][ROLL], 0, sizeof(int32_t) * 6); 
    36bc:	88 e1       	ldi	r24, 0x18	; 24
    36be:	af ee       	ldi	r26, 0xEF	; 239
    36c0:	b7 e0       	ldi	r27, 0x07	; 7
    36c2:	1d 92       	st	X+, r1
    36c4:	8a 95       	dec	r24
    36c6:	e9 f7       	brne	.-6      	; 0x36c2 <main+0x374>
		//* by the Config.TransitionSpeed setting.
		//* The transition will hold at P1n position if directed to
		//************************************************************

		// P2 transition point hard-coded to 50% above center
		if 	(RCinputs[Config.FlightChan] > 500)
    36c8:	80 91 df 05 	lds	r24, 0x05DF
    36cc:	88 0f       	add	r24, r24
    36ce:	99 0b       	sbc	r25, r25
    36d0:	fc 01       	movw	r30, r24
    36d2:	e3 5d       	subi	r30, 0xD3	; 211
    36d4:	f7 4f       	sbci	r31, 0xF7	; 247
    36d6:	20 81       	ld	r18, Z
    36d8:	31 81       	ldd	r19, Z+1	; 0x01
    36da:	25 3f       	cpi	r18, 0xF5	; 245
    36dc:	31 40       	sbci	r19, 0x01	; 1
    36de:	14 f0       	brlt	.+4      	; 0x36e4 <main+0x396>
		{
			Config.FlightSel = 2;			// Flight mode 2 (P2)
    36e0:	22 e0       	ldi	r18, 0x02	; 2
    36e2:	06 c0       	rjmp	.+12     	; 0x36f0 <main+0x3a2>
		}
		// P1.n transition point hard-coded to 50% below center
		else if (RCinputs[Config.FlightChan] > -500)
    36e4:	20 81       	ld	r18, Z
    36e6:	31 81       	ldd	r19, Z+1	; 0x01
    36e8:	2d 30       	cpi	r18, 0x0D	; 13
    36ea:	3e 4f       	sbci	r19, 0xFE	; 254
    36ec:	24 f0       	brlt	.+8      	; 0x36f6 <main+0x3a8>
		{
			Config.FlightSel = 1;			// Flight mode 1 (P1.n)
    36ee:	21 e0       	ldi	r18, 0x01	; 1
    36f0:	20 93 b1 07 	sts	0x07B1, r18
    36f4:	02 c0       	rjmp	.+4      	; 0x36fa <main+0x3ac>
		}
		// Otherwise the default is P1
		else
		{
			Config.FlightSel = 0;			// Flight mode 0 (P1)
    36f6:	10 92 b1 07 	sts	0x07B1, r1
		//* Set up the correct state for the current setting.
		//* Check for initial startup - the only time that old_flight should be "3".
		//* Also, re-initialise if the transition setting is changed
		//************************************************************

		if ((old_flight == 3) || (old_trans_mode != Config.TransitionSpeed))
    36fa:	03 30       	cpi	r16, 0x03	; 3
    36fc:	29 f0       	breq	.+10     	; 0x3708 <main+0x3ba>
    36fe:	20 91 e3 05 	lds	r18, 0x05E3
    3702:	fe 8d       	ldd	r31, Y+30	; 0x1e
    3704:	f2 17       	cp	r31, r18
    3706:	21 f1       	breq	.+72     	; 0x3750 <main+0x402>
		{
			switch(Config.FlightSel)
    3708:	00 91 b1 07 	lds	r16, 0x07B1
    370c:	01 30       	cpi	r16, 0x01	; 1
    370e:	59 f0       	breq	.+22     	; 0x3726 <main+0x3d8>
    3710:	02 30       	cpi	r16, 0x02	; 2
    3712:	91 f0       	breq	.+36     	; 0x3738 <main+0x3ea>
    3714:	01 11       	cpse	r16, r1
    3716:	19 c0       	rjmp	.+50     	; 0x374a <main+0x3fc>
			{
				case 0:
					Transition_state = TRANS_P1;
    3718:	10 92 23 05 	sts	0x0523, r1
					transition_counter = 0;
    371c:	10 92 25 05 	sts	0x0525, r1
    3720:	10 92 24 05 	sts	0x0524, r1
					break;
    3724:	12 c0       	rjmp	.+36     	; 0x374a <main+0x3fc>
				case 1:
					Transition_state = TRANS_P1n;
    3726:	24 e0       	ldi	r18, 0x04	; 4
    3728:	20 93 23 05 	sts	0x0523, r18
					transition_counter = Config.Transition_P1n; // Set transition point to the user-selected point
    372c:	20 91 e4 05 	lds	r18, 0x05E4
    3730:	33 27       	eor	r19, r19
    3732:	27 fd       	sbrc	r18, 7
    3734:	30 95       	com	r19
    3736:	05 c0       	rjmp	.+10     	; 0x3742 <main+0x3f4>
					break;
				case 2:
					Transition_state = TRANS_P2;
    3738:	29 e0       	ldi	r18, 0x09	; 9
    373a:	20 93 23 05 	sts	0x0523, r18
					transition_counter = 100;
    373e:	24 e6       	ldi	r18, 0x64	; 100
    3740:	30 e0       	ldi	r19, 0x00	; 0
    3742:	30 93 25 05 	sts	0x0525, r19
    3746:	20 93 24 05 	sts	0x0524, r18
					break;
				default:
					break;
			}		 
			old_flight = Config.FlightSel;
			old_trans_mode = Config.TransitionSpeed;
    374a:	30 91 e3 05 	lds	r19, 0x05E3
    374e:	3e 8f       	std	Y+30, r19	; 0x1e
		//************************************************************
		//* Transition state handling
		//************************************************************

		// Update timed transition when changing flight modes
		if (Config.FlightSel != old_flight)
    3750:	40 91 b1 07 	lds	r20, 0x07B1
    3754:	4d 8b       	std	Y+21, r20	; 0x15
    3756:	21 e0       	ldi	r18, 0x01	; 1
    3758:	40 13       	cpse	r20, r16
    375a:	01 c0       	rjmp	.+2      	; 0x375e <main+0x410>
    375c:	20 e0       	ldi	r18, 0x00	; 0
			TransitionUpdated = true;
		}

		// Work out transition number when manually transitioning
		// Convert number to percentage (0 to 100%)
		if (Config.TransitionSpeed == 0)
    375e:	30 91 e3 05 	lds	r19, 0x05E3
    3762:	31 11       	cpse	r19, r1
    3764:	1b c0       	rjmp	.+54     	; 0x379c <main+0x44e>
		{
			// Offset RC input to (approx) -250 to 2250
			temp1 = RCinputs[Config.FlightChan] + 1000;
    3766:	fc 01       	movw	r30, r24
    3768:	e3 5d       	subi	r30, 0xD3	; 211
    376a:	f7 4f       	sbci	r31, 0xF7	; 247
    376c:	80 81       	ld	r24, Z
    376e:	91 81       	ldd	r25, Z+1	; 0x01
    3770:	88 51       	subi	r24, 0x18	; 24
    3772:	9c 4f       	sbci	r25, 0xFC	; 252
    3774:	97 ff       	sbrs	r25, 7
    3776:	02 c0       	rjmp	.+4      	; 0x377c <main+0x42e>
    3778:	80 e0       	ldi	r24, 0x00	; 0
    377a:	90 e0       	ldi	r25, 0x00	; 0
			// Trim lower end to zero (0 to 2250)
			if (temp1 < 0) temp1 = 0;

			// Convert 0 to 2250 to 0 to 125. Divide by 20
			// Round to avoid truncation errors
			transition = (temp1 + 10) / 20;
    377c:	0a 96       	adiw	r24, 0x0a	; 10
    377e:	64 e1       	ldi	r22, 0x14	; 20
    3780:	70 e0       	ldi	r23, 0x00	; 0
    3782:	0e 94 06 47 	call	0x8e0c	; 0x8e0c <__divmodhi4>

			// transition now has a range of 0 to 101 for 0 to 2000 input
			// Limit extent of transition value 0 to 100 (101 steps)
			if (transition > 100) transition = 100;
    3786:	65 36       	cpi	r22, 0x65	; 101
    3788:	71 05       	cpc	r23, r1
    378a:	0c f4       	brge	.+2      	; 0x378e <main+0x440>
    378c:	10 c3       	rjmp	.+1568   	; 0x3dae <main+0xa60>
    378e:	84 e6       	ldi	r24, 0x64	; 100
    3790:	90 e0       	ldi	r25, 0x00	; 0
    3792:	90 93 22 05 	sts	0x0522, r25
    3796:	80 93 21 05 	sts	0x0521, r24
    379a:	0d c3       	rjmp	.+1562   	; 0x3db6 <main+0xa68>
		}
		else
		{
			// transition_counter counts from 0 to 100 (101 steps)
			transition = transition_counter;
    379c:	80 91 24 05 	lds	r24, 0x0524
    37a0:	90 91 25 05 	lds	r25, 0x0525
    37a4:	90 93 22 05 	sts	0x0522, r25
    37a8:	80 93 21 05 	sts	0x0521, r24
		{
			Transition_state = TRANSITIONING;
		}

		// Update transition state change when control value or flight mode changes
		if (TransitionUpdated)
    37ac:	22 23       	and	r18, r18
    37ae:	99 f0       	breq	.+38     	; 0x37d6 <main+0x488>
		{
			// Update transition state from matrix
			Transition_state = (uint8_t)pgm_read_byte(&Trans_Matrix[Config.FlightSel][old_flight]);
    37b0:	ad 89       	ldd	r26, Y+21	; 0x15
    37b2:	8a 2f       	mov	r24, r26
    37b4:	99 27       	eor	r25, r25
    37b6:	87 fd       	sbrc	r24, 7
    37b8:	90 95       	com	r25
    37ba:	fc 01       	movw	r30, r24
    37bc:	ee 0f       	add	r30, r30
    37be:	ff 1f       	adc	r31, r31
    37c0:	e8 0f       	add	r30, r24
    37c2:	f9 1f       	adc	r31, r25
    37c4:	e0 0f       	add	r30, r16
    37c6:	f1 1d       	adc	r31, r1
    37c8:	07 fd       	sbrc	r16, 7
    37ca:	fa 95       	dec	r31
    37cc:	ea 52       	subi	r30, 0x2A	; 42
    37ce:	ff 4f       	sbci	r31, 0xFF	; 255
    37d0:	e4 91       	lpm	r30, Z
    37d2:	e0 93 23 05 	sts	0x0523, r30

		// Calculate transition time from user's setting
		transition_time = TRANSITION_TIMER * Config.TransitionSpeed;
		
		// Update state, values and transition_counter every Config.TransitionSpeed if not zero. 195 = 10ms
		if (((Config.TransitionSpeed != 0) && (Transition_timeout > transition_time)) ||
    37d6:	33 23       	and	r19, r19
    37d8:	39 f0       	breq	.+14     	; 0x37e8 <main+0x49a>
			// Update transition state from matrix
			Transition_state = (uint8_t)pgm_read_byte(&Trans_Matrix[Config.FlightSel][old_flight]);
		}

		// Calculate transition time from user's setting
		transition_time = TRANSITION_TIMER * Config.TransitionSpeed;
    37da:	43 ec       	ldi	r20, 0xC3	; 195
    37dc:	34 03       	mulsu	r19, r20
    37de:	c0 01       	movw	r24, r0
    37e0:	11 24       	eor	r1, r1
		
		// Update state, values and transition_counter every Config.TransitionSpeed if not zero. 195 = 10ms
		if (((Config.TransitionSpeed != 0) && (Transition_timeout > transition_time)) ||
    37e2:	82 15       	cp	r24, r2
    37e4:	93 05       	cpc	r25, r3
    37e6:	18 f0       	brcs	.+6      	; 0x37ee <main+0x4a0>
    37e8:	22 23       	and	r18, r18
    37ea:	09 f4       	brne	.+2      	; 0x37ee <main+0x4a0>
    37ec:	a9 c0       	rjmp	.+338    	; 0x3940 <main+0x5f2>
		{
			Transition_timeout = 0;
			TransitionUpdated = false;

			// Fixed, end-point states
			if (Transition_state == TRANS_P1)
    37ee:	80 91 23 05 	lds	r24, 0x0523
    37f2:	81 11       	cpse	r24, r1
    37f4:	05 c0       	rjmp	.+10     	; 0x3800 <main+0x4b2>
			{
				transition_counter = 0;
    37f6:	10 92 25 05 	sts	0x0525, r1
    37fa:	10 92 24 05 	sts	0x0524, r1
    37fe:	22 c0       	rjmp	.+68     	; 0x3844 <main+0x4f6>
			}
			else if (Transition_state == TRANS_P1n)
    3800:	84 30       	cpi	r24, 0x04	; 4
    3802:	31 f4       	brne	.+12     	; 0x3810 <main+0x4c2>
			{
				transition_counter = Config.Transition_P1n;
    3804:	80 91 e4 05 	lds	r24, 0x05E4
    3808:	99 27       	eor	r25, r25
    380a:	87 fd       	sbrc	r24, 7
    380c:	90 95       	com	r25
    380e:	04 c0       	rjmp	.+8      	; 0x3818 <main+0x4ca>
			}
			else if (Transition_state == TRANS_P2)
    3810:	89 30       	cpi	r24, 0x09	; 9
    3812:	39 f4       	brne	.+14     	; 0x3822 <main+0x4d4>
			{
				transition_counter = 100;
    3814:	84 e6       	ldi	r24, 0x64	; 100
    3816:	90 e0       	ldi	r25, 0x00	; 0
    3818:	90 93 25 05 	sts	0x0525, r25
    381c:	80 93 24 05 	sts	0x0524, r24
    3820:	11 c0       	rjmp	.+34     	; 0x3844 <main+0x4f6>
			}		

			// Over-ride users requesting silly states
			// If transition_counter is above P1.n but request is P1 to P1.n or 
			// if transition_counter is below P1.n but request is P2 to P1.n...
			if ((Transition_state == TRANS_P1_to_P1n_start) && (transition_counter > Config.Transition_P1n))
    3822:	81 30       	cpi	r24, 0x01	; 1
    3824:	79 f4       	brne	.+30     	; 0x3844 <main+0x4f6>
    3826:	80 91 e4 05 	lds	r24, 0x05E4
    382a:	99 27       	eor	r25, r25
    382c:	87 fd       	sbrc	r24, 7
    382e:	90 95       	com	r25
    3830:	20 91 24 05 	lds	r18, 0x0524
    3834:	30 91 25 05 	lds	r19, 0x0525
    3838:	82 17       	cp	r24, r18
    383a:	93 07       	cpc	r25, r19
    383c:	1c f4       	brge	.+6      	; 0x3844 <main+0x4f6>
			{
				// Reset state to a more appropriate one
				Transition_state = TRANS_P2_to_P1n_start;
    383e:	88 e0       	ldi	r24, 0x08	; 8
    3840:	80 93 23 05 	sts	0x0523, r24
			}

			if ((Transition_state == TRANS_P2_to_P1n_start) && (transition_counter < Config.Transition_P1n))
    3844:	80 91 23 05 	lds	r24, 0x0523
    3848:	88 30       	cpi	r24, 0x08	; 8
    384a:	79 f4       	brne	.+30     	; 0x386a <main+0x51c>
    384c:	80 91 e4 05 	lds	r24, 0x05E4
    3850:	99 27       	eor	r25, r25
    3852:	87 fd       	sbrc	r24, 7
    3854:	90 95       	com	r25
    3856:	20 91 24 05 	lds	r18, 0x0524
    385a:	30 91 25 05 	lds	r19, 0x0525
    385e:	28 17       	cp	r18, r24
    3860:	39 07       	cpc	r19, r25
    3862:	1c f4       	brge	.+6      	; 0x386a <main+0x51c>
			{
				// Reset state to a more appropriate one
				Transition_state = TRANS_P1_to_P1n_start;
    3864:	81 e0       	ldi	r24, 0x01	; 1
    3866:	80 93 23 05 	sts	0x0523, r24
			}

			// Handle timed transition towards P1
			if ((Transition_state == TRANS_P1n_to_P1_start) || (Transition_state == TRANS_P2_to_P1_start))
    386a:	80 91 23 05 	lds	r24, 0x0523
    386e:	8b 7f       	andi	r24, 0xFB	; 251
    3870:	82 30       	cpi	r24, 0x02	; 2
    3872:	91 f4       	brne	.+36     	; 0x3898 <main+0x54a>
			{
				transition_counter--;
    3874:	80 91 24 05 	lds	r24, 0x0524
    3878:	90 91 25 05 	lds	r25, 0x0525
    387c:	01 97       	sbiw	r24, 0x01	; 1
    387e:	90 93 25 05 	sts	0x0525, r25
    3882:	80 93 24 05 	sts	0x0524, r24
				if (transition_counter <= 0)
    3886:	18 16       	cp	r1, r24
    3888:	19 06       	cpc	r1, r25
    388a:	34 f0       	brlt	.+12     	; 0x3898 <main+0x54a>
				{
					transition_counter = 0;
    388c:	10 92 25 05 	sts	0x0525, r1
    3890:	10 92 24 05 	sts	0x0524, r1
					Transition_state = TRANS_P1;
    3894:	10 92 23 05 	sts	0x0523, r1
				}
			}

			// Handle timed transition between P1.n and P1
			if (Transition_state == TRANS_P1_to_P1n_start)
    3898:	80 91 23 05 	lds	r24, 0x0523
    389c:	81 30       	cpi	r24, 0x01	; 1
    389e:	c1 f4       	brne	.+48     	; 0x38d0 <main+0x582>
			{
				transition_counter++;
    38a0:	80 91 24 05 	lds	r24, 0x0524
    38a4:	90 91 25 05 	lds	r25, 0x0525
    38a8:	01 96       	adiw	r24, 0x01	; 1
    38aa:	90 93 25 05 	sts	0x0525, r25
    38ae:	80 93 24 05 	sts	0x0524, r24
				if (transition_counter >= Config.Transition_P1n)
    38b2:	20 91 e4 05 	lds	r18, 0x05E4
    38b6:	33 27       	eor	r19, r19
    38b8:	27 fd       	sbrc	r18, 7
    38ba:	30 95       	com	r19
    38bc:	82 17       	cp	r24, r18
    38be:	93 07       	cpc	r25, r19
    38c0:	3c f0       	brlt	.+14     	; 0x38d0 <main+0x582>
				{
					transition_counter = Config.Transition_P1n;
    38c2:	30 93 25 05 	sts	0x0525, r19
    38c6:	20 93 24 05 	sts	0x0524, r18
					Transition_state = TRANS_P1n;
    38ca:	84 e0       	ldi	r24, 0x04	; 4
    38cc:	80 93 23 05 	sts	0x0523, r24
				}
			}			
				
			// Handle timed transition between P1.n and P2
			if (Transition_state == TRANS_P2_to_P1n_start)
    38d0:	80 91 23 05 	lds	r24, 0x0523
    38d4:	88 30       	cpi	r24, 0x08	; 8
    38d6:	c1 f4       	brne	.+48     	; 0x3908 <main+0x5ba>
			{
				transition_counter--;
    38d8:	80 91 24 05 	lds	r24, 0x0524
    38dc:	90 91 25 05 	lds	r25, 0x0525
    38e0:	01 97       	sbiw	r24, 0x01	; 1
    38e2:	90 93 25 05 	sts	0x0525, r25
    38e6:	80 93 24 05 	sts	0x0524, r24
				if (transition_counter <= Config.Transition_P1n)
    38ea:	20 91 e4 05 	lds	r18, 0x05E4
    38ee:	33 27       	eor	r19, r19
    38f0:	27 fd       	sbrc	r18, 7
    38f2:	30 95       	com	r19
    38f4:	28 17       	cp	r18, r24
    38f6:	39 07       	cpc	r19, r25
    38f8:	3c f0       	brlt	.+14     	; 0x3908 <main+0x5ba>
				{
					transition_counter = Config.Transition_P1n;
    38fa:	30 93 25 05 	sts	0x0525, r19
    38fe:	20 93 24 05 	sts	0x0524, r18
					Transition_state = TRANS_P1n;
    3902:	84 e0       	ldi	r24, 0x04	; 4
    3904:	80 93 23 05 	sts	0x0523, r24
				}
			}

			// Handle timed transition towards P2
			if ((Transition_state == TRANS_P1n_to_P2_start) || (Transition_state == TRANS_P1_to_P2_start))
    3908:	80 91 23 05 	lds	r24, 0x0523
    390c:	8b 7f       	andi	r24, 0xFB	; 251
    390e:	83 30       	cpi	r24, 0x03	; 3
    3910:	a9 f4       	brne	.+42     	; 0x393c <main+0x5ee>
			{
				transition_counter++;
    3912:	80 91 24 05 	lds	r24, 0x0524
    3916:	90 91 25 05 	lds	r25, 0x0525
    391a:	01 96       	adiw	r24, 0x01	; 1
    391c:	90 93 25 05 	sts	0x0525, r25
    3920:	80 93 24 05 	sts	0x0524, r24
				if (transition_counter >= 100)
    3924:	84 36       	cpi	r24, 0x64	; 100
    3926:	91 05       	cpc	r25, r1
    3928:	4c f0       	brlt	.+18     	; 0x393c <main+0x5ee>
				{
					transition_counter = 100;
    392a:	a4 e6       	ldi	r26, 0x64	; 100
    392c:	b0 e0       	ldi	r27, 0x00	; 0
    392e:	b0 93 25 05 	sts	0x0525, r27
    3932:	a0 93 24 05 	sts	0x0524, r26
					Transition_state = TRANS_P2;
    3936:	89 e0       	ldi	r24, 0x09	; 9
    3938:	80 93 23 05 	sts	0x0523, r24
		// Update state, values and transition_counter every Config.TransitionSpeed if not zero. 195 = 10ms
		if (((Config.TransitionSpeed != 0) && (Transition_timeout > transition_time)) ||
			// Update immediately
			TransitionUpdated)
		{
			Transition_timeout = 0;
    393c:	21 2c       	mov	r2, r1
    393e:	31 2c       	mov	r3, r1
			}

		} // Update transition_counter

		// Zero the I-terms of the opposite state so as to ensure a bump-less transition
		if ((Transition_state == TRANS_P1) || (transition == 0))
    3940:	20 91 23 05 	lds	r18, 0x0523
    3944:	22 23       	and	r18, r18
    3946:	31 f0       	breq	.+12     	; 0x3954 <main+0x606>
    3948:	80 91 21 05 	lds	r24, 0x0521
    394c:	90 91 22 05 	lds	r25, 0x0522
    3950:	00 97       	sbiw	r24, 0x00	; 0
    3952:	39 f4       	brne	.+14     	; 0x3962 <main+0x614>
		{
			// Clear P2 I-term while fully in P1
			memset(&IntegralGyro[P2][ROLL], 0, sizeof(int32_t) * NUMBEROFAXIS);
    3954:	8c e0       	ldi	r24, 0x0C	; 12
    3956:	eb ef       	ldi	r30, 0xFB	; 251
    3958:	f7 e0       	ldi	r31, 0x07	; 7
    395a:	11 92       	st	Z+, r1
    395c:	8a 95       	dec	r24
    395e:	e9 f7       	brne	.-6      	; 0x395a <main+0x60c>
    3960:	0b c0       	rjmp	.+22     	; 0x3978 <main+0x62a>
		}
		else if ((Transition_state == TRANS_P2) || (transition == 100))
    3962:	29 30       	cpi	r18, 0x09	; 9
    3964:	19 f0       	breq	.+6      	; 0x396c <main+0x61e>
    3966:	84 36       	cpi	r24, 0x64	; 100
    3968:	91 05       	cpc	r25, r1
    396a:	31 f4       	brne	.+12     	; 0x3978 <main+0x62a>
		{
			// Clear P1 I-term while fully in P2
			memset(&IntegralGyro[P1][ROLL], 0, sizeof(int32_t) * NUMBEROFAXIS);
    396c:	8c e0       	ldi	r24, 0x0C	; 12
    396e:	af ee       	ldi	r26, 0xEF	; 239
    3970:	b7 e0       	ldi	r27, 0x07	; 7
    3972:	1d 92       	st	X+, r1
    3974:	8a 95       	dec	r24
    3976:	e9 f7       	brne	.-6      	; 0x3972 <main+0x624>
		//************************************************************
		//* Update timers
		//************************************************************

		// Safely get current value of TCNT1
		Save_TCNT1 = TIM16_ReadTCNT1();
    3978:	0e 94 fa 2b 	call	0x57f4	; 0x57f4 <TIM16_ReadTCNT1>
    397c:	9f 87       	std	Y+15, r25	; 0x0f
    397e:	8e 87       	std	Y+14, r24	; 0x0e
		//RC_Rate_Timer += (Save_TCNT1 - RC_Rate_TCNT1);
		//RC_Rate_TCNT1 = Save_TCNT1;
		
		// Handle TCNT1-based timer correctly - this actually seems necessary...
		// Work out the current RC rate by measuring between incoming RC packets
		if (Save_TCNT1 < RC_Rate_TCNT1)
    3980:	2c 85       	ldd	r18, Y+12	; 0x0c
    3982:	3d 85       	ldd	r19, Y+13	; 0x0d
    3984:	82 17       	cp	r24, r18
    3986:	93 07       	cpc	r25, r19
    3988:	98 f4       	brcc	.+38     	; 0x39b0 <main+0x662>
		{
			RC_Rate_Timer += (65536 - RC_Rate_TCNT1 + Save_TCNT1);
    398a:	80 e0       	ldi	r24, 0x00	; 0
    398c:	90 e0       	ldi	r25, 0x00	; 0
    398e:	a1 e0       	ldi	r26, 0x01	; 1
    3990:	b0 e0       	ldi	r27, 0x00	; 0
    3992:	82 1b       	sub	r24, r18
    3994:	93 0b       	sbc	r25, r19
    3996:	a1 09       	sbc	r26, r1
    3998:	b1 09       	sbc	r27, r1
    399a:	ee 85       	ldd	r30, Y+14	; 0x0e
    399c:	ff 85       	ldd	r31, Y+15	; 0x0f
    399e:	8e 0f       	add	r24, r30
    39a0:	9f 1f       	adc	r25, r31
    39a2:	a1 1d       	adc	r26, r1
    39a4:	b1 1d       	adc	r27, r1
    39a6:	c8 0e       	add	r12, r24
    39a8:	d9 1e       	adc	r13, r25
    39aa:	ea 1e       	adc	r14, r26
    39ac:	fb 1e       	adc	r15, r27
    39ae:	0a c0       	rjmp	.+20     	; 0x39c4 <main+0x676>
		}
		else
		{
			RC_Rate_Timer += (Save_TCNT1 - RC_Rate_TCNT1);
    39b0:	8e 85       	ldd	r24, Y+14	; 0x0e
    39b2:	9f 85       	ldd	r25, Y+15	; 0x0f
    39b4:	2c 85       	ldd	r18, Y+12	; 0x0c
    39b6:	3d 85       	ldd	r19, Y+13	; 0x0d
    39b8:	82 1b       	sub	r24, r18
    39ba:	93 0b       	sbc	r25, r19
    39bc:	c8 0e       	add	r12, r24
    39be:	d9 1e       	adc	r13, r25
    39c0:	e1 1c       	adc	r14, r1
    39c2:	f1 1c       	adc	r15, r1
		}
		
		RC_Rate_TCNT1 = Save_TCNT1;

		// Arm timer for timing stick hold
		Arm_timer += (uint8_t)(TCNT2 - Arm_TCNT2); 
    39c4:	80 91 b2 00 	lds	r24, 0x00B2
    39c8:	3a 8d       	ldd	r19, Y+26	; 0x1a
    39ca:	83 1b       	sub	r24, r19
    39cc:	88 0e       	add	r8, r24
    39ce:	91 1c       	adc	r9, r1
    39d0:	a1 1c       	adc	r10, r1
    39d2:	b1 1c       	adc	r11, r1
		Arm_TCNT2 = TCNT2;
    39d4:	40 91 b2 00 	lds	r20, 0x00B2
    39d8:	4a 8f       	std	Y+26, r20	; 0x1a

		// 16-bit timers (Max. 3.35s measurement on T2)
		// All TCNT2 timers increment at 19.531 kHz

		// Sets the desired SERVO_RATE by flagging ServoTick when PWM due
		Servo_Rate += (uint8_t)(TCNT2 - ServoRate_TCNT2);
    39da:	80 91 b2 00 	lds	r24, 0x00B2
    39de:	5d 8d       	ldd	r21, Y+29	; 0x1d
    39e0:	85 1b       	sub	r24, r21
    39e2:	aa 85       	ldd	r26, Y+10	; 0x0a
    39e4:	bb 85       	ldd	r27, Y+11	; 0x0b
    39e6:	a8 0f       	add	r26, r24
    39e8:	b1 1d       	adc	r27, r1
    39ea:	bb 87       	std	Y+11, r27	; 0x0b
    39ec:	aa 87       	std	Y+10, r26	; 0x0a
		ServoRate_TCNT2 = TCNT2;
    39ee:	b0 91 b2 00 	lds	r27, 0x00B2
    39f2:	bd 8f       	std	Y+29, r27	; 0x1d
		
		// Signal RC overdue after RC_OVERDUE time (500ms)
		RC_Timeout += (uint8_t)(TCNT2 - Servo_TCNT2);
    39f4:	80 91 b2 00 	lds	r24, 0x00B2
    39f8:	ec 8d       	ldd	r30, Y+28	; 0x1c
    39fa:	8e 1b       	sub	r24, r30
    39fc:	68 0e       	add	r6, r24
    39fe:	71 1c       	adc	r7, r1
		Servo_TCNT2 = TCNT2;
    3a00:	f0 91 b2 00 	lds	r31, 0x00B2
    3a04:	fc 8f       	std	Y+28, r31	; 0x1c
		
		// Update transition timer
		Transition_timeout += (uint8_t)(TCNT2 - Transition_TCNT2);
    3a06:	80 91 b2 00 	lds	r24, 0x00B2
    3a0a:	2e 89       	ldd	r18, Y+22	; 0x16
    3a0c:	82 1b       	sub	r24, r18
    3a0e:	28 0e       	add	r2, r24
    3a10:	31 1c       	adc	r3, r1
		Transition_TCNT2 = TCNT2;
    3a12:	30 91 b2 00 	lds	r19, 0x00B2
    3a16:	3e 8b       	std	Y+22, r19	; 0x16

		// Update status timeout
		Status_timeout += (uint8_t)(TCNT2 - Status_TCNT2);
    3a18:	80 91 b2 00 	lds	r24, 0x00B2
    3a1c:	4f 89       	ldd	r20, Y+23	; 0x17
    3a1e:	84 1b       	sub	r24, r20
    3a20:	a9 a1       	ldd	r26, Y+33	; 0x21
    3a22:	ba a1       	ldd	r27, Y+34	; 0x22
    3a24:	a8 0f       	add	r26, r24
    3a26:	b1 1d       	adc	r27, r1
    3a28:	ba a3       	std	Y+34, r27	; 0x22
    3a2a:	a9 a3       	std	Y+33, r26	; 0x21
		Status_TCNT2 = TCNT2;
    3a2c:	b0 91 b2 00 	lds	r27, 0x00B2
    3a30:	bf 8b       	std	Y+23, r27	; 0x17
		
		// Status refresh timer
		UpdateStatus_timer += (uint8_t)(TCNT2 - Refresh_TCNT2);
    3a32:	80 91 b2 00 	lds	r24, 0x00B2
    3a36:	e8 8d       	ldd	r30, Y+24	; 0x18
    3a38:	8e 1b       	sub	r24, r30
    3a3a:	28 85       	ldd	r18, Y+8	; 0x08
    3a3c:	39 85       	ldd	r19, Y+9	; 0x09
    3a3e:	28 0f       	add	r18, r24
    3a40:	31 1d       	adc	r19, r1
    3a42:	39 87       	std	Y+9, r19	; 0x09
    3a44:	28 87       	std	Y+8, r18	; 0x08
		Refresh_TCNT2 = TCNT2;
    3a46:	30 91 b2 00 	lds	r19, 0x00B2
    3a4a:	38 8f       	std	Y+24, r19	; 0x18

		// Auto-disarm timer
		Disarm_timer += (uint8_t)(TCNT2 - Disarm_TCNT2);
    3a4c:	80 91 b2 00 	lds	r24, 0x00B2
    3a50:	49 8d       	ldd	r20, Y+25	; 0x19
    3a52:	84 1b       	sub	r24, r20
    3a54:	48 0e       	add	r4, r24
    3a56:	51 1c       	adc	r5, r1
		Disarm_TCNT2 = TCNT2;
    3a58:	50 91 b2 00 	lds	r21, 0x00B2
    3a5c:	59 8f       	std	Y+25, r21	; 0x19

		// Timer for audible alarms
		Ticker_Count += (uint8_t)(TCNT2 - Ticker_TCNT2);
    3a5e:	80 91 b2 00 	lds	r24, 0x00B2
    3a62:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3a64:	89 1b       	sub	r24, r25
    3a66:	ab 89       	ldd	r26, Y+19	; 0x13
    3a68:	bc 89       	ldd	r27, Y+20	; 0x14
    3a6a:	a8 0f       	add	r26, r24
    3a6c:	b1 1d       	adc	r27, r1
    3a6e:	bc 8b       	std	Y+20, r27	; 0x14
    3a70:	ab 8b       	std	Y+19, r26	; 0x13
		Ticker_TCNT2 = TCNT2;
    3a72:	b0 91 b2 00 	lds	r27, 0x00B2
    3a76:	bb 8f       	std	Y+27, r27	; 0x1b
		//* Manage desired output update rate when limited by
		//* the PWM rate set to "Low"
		//************************************************************

		// Flag update required based on SERVO_RATE_LOW (50Hz) - 19.97ms
		if (Servo_Rate > SERVO_RATE_LOW)
    3a78:	ea 85       	ldd	r30, Y+10	; 0x0a
    3a7a:	fb 85       	ldd	r31, Y+11	; 0x0b
    3a7c:	e7 38       	cpi	r30, 0x87	; 135
    3a7e:	f1 40       	sbci	r31, 0x01	; 1
    3a80:	20 f0       	brcs	.+8      	; 0x3a8a <main+0x73c>
		{
			ServoTick = true; // Slow device is ready for output generation
			Servo_Rate = 0;
    3a82:	1b 86       	std	Y+11, r1	; 0x0b
    3a84:	1a 86       	std	Y+10, r1	; 0x0a
		//************************************************************

		// Flag update required based on SERVO_RATE_LOW (50Hz) - 19.97ms
		if (Servo_Rate > SERVO_RATE_LOW)
		{
			ServoTick = true; // Slow device is ready for output generation
    3a86:	31 e0       	ldi	r19, 0x01	; 1
    3a88:	3c 83       	std	Y+4, r19	; 0x04
		//************************************************************
		//* Measure incoming RC rate and flag no signal
		//************************************************************

		// Check to see if the RC input is overdue (500ms)
		if (RC_Timeout > RC_OVERDUE)
    3a8a:	46 e2       	ldi	r20, 0x26	; 38
    3a8c:	64 16       	cp	r6, r20
    3a8e:	74 06       	cpc	r7, r20
    3a90:	18 f0       	brcs	.+6      	; 0x3a98 <main+0x74a>
		{
			Overdue = true;	// This results in a "No Signal" error
    3a92:	81 e0       	ldi	r24, 0x01	; 1
    3a94:	80 93 19 05 	sts	0x0519, r24
	
		//************************************************************
		//* Read sensors
		//************************************************************

		ReadGyros();
    3a98:	0e 94 25 22 	call	0x444a	; 0x444a <ReadGyros>
		ReadAcc();
    3a9c:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <ReadAcc>
		// These two are concatenated to create a virtual timer that can measure up to 
		// 256 x 26.2ms = 6.7072s at which point the "period" is 16,768,000, a 24-bit number
		//************************************************************
		
		// Safely get current value of TCNT1
		Save_TCNT1 = TIM16_ReadTCNT1();
    3aa0:	0e 94 fa 2b 	call	0x57f4	; 0x57f4 <TIM16_ReadTCNT1>
		
		// Reset Timer0 count
		TCNT0 = 0;
    3aa4:	16 bc       	out	0x26, r1	; 38

		// Handle TCNT1 overflow correctly - this actually seems necessary...
		// ticker_16 will hold the most recent amount measured by TCNT1
		// Timer1 (16bit) - run @ 2.5MHz (400ns) - max 26.2ms
		if (Save_TCNT1 < LoopStartTCNT1)
    3aa6:	20 91 1a 05 	lds	r18, 0x051A
    3aaa:	30 91 1b 05 	lds	r19, 0x051B
    3aae:	82 17       	cp	r24, r18
    3ab0:	93 07       	cpc	r25, r19
    3ab2:	48 f4       	brcc	.+18     	; 0x3ac6 <main+0x778>
		{
			ticker_16 = (65536 - LoopStartTCNT1) + Save_TCNT1;
    3ab4:	20 91 1a 05 	lds	r18, 0x051A
    3ab8:	30 91 1b 05 	lds	r19, 0x051B
    3abc:	dc 01       	movw	r26, r24
    3abe:	a2 1b       	sub	r26, r18
    3ac0:	b3 0b       	sbc	r27, r19
    3ac2:	9d 01       	movw	r18, r26
    3ac4:	08 c0       	rjmp	.+16     	; 0x3ad6 <main+0x788>
		}
		else
		{
			ticker_16 = (Save_TCNT1 - LoopStartTCNT1);
    3ac6:	20 91 1a 05 	lds	r18, 0x051A
    3aca:	30 91 1b 05 	lds	r19, 0x051B
    3ace:	fc 01       	movw	r30, r24
    3ad0:	e2 1b       	sub	r30, r18
    3ad2:	f3 0b       	sbc	r31, r19
    3ad4:	9f 01       	movw	r18, r30
		}
		
		// Store old TCNT for next measurement
		LoopStartTCNT1 = Save_TCNT1;
    3ad6:	90 93 1b 05 	sts	0x051B, r25
    3ada:	80 93 1a 05 	sts	0x051A, r24
		
		// Handle both Timer1 under- and over-run cases
		// If TMR0_counter is less than 2, ICNT1 has not overflowed
		if (TMR0_counter < 2)
    3ade:	80 91 cf 07 	lds	r24, 0x07CF
    3ae2:	90 91 d0 07 	lds	r25, 0x07D0
    3ae6:	a9 01       	movw	r20, r18
    3ae8:	60 e0       	ldi	r22, 0x00	; 0
    3aea:	70 e0       	ldi	r23, 0x00	; 0
    3aec:	02 97       	sbiw	r24, 0x02	; 2
    3aee:	48 f4       	brcc	.+18     	; 0x3b02 <main+0x7b4>
		{
			interval = ticker_16;
    3af0:	40 93 5d 05 	sts	0x055D, r20
    3af4:	50 93 5e 05 	sts	0x055E, r21
    3af8:	60 93 5f 05 	sts	0x055F, r22
    3afc:	70 93 60 05 	sts	0x0560, r23
    3b00:	19 c0       	rjmp	.+50     	; 0x3b34 <main+0x7e6>
		// So we use chunks of TCNT0, counted during the loop interval
		// to work out the exact period.
		// Timer0 (8bit) - run @ 20MHz / 1024 = 19.531kHz or 51.2us - max 13.1ms
		else
		{
			interval = ticker_16 + (TMR0_counter * 32768);
    3b02:	80 91 cf 07 	lds	r24, 0x07CF
    3b06:	90 91 d0 07 	lds	r25, 0x07D0
    3b0a:	a0 e0       	ldi	r26, 0x00	; 0
    3b0c:	b0 e0       	ldi	r27, 0x00	; 0
    3b0e:	3f e0       	ldi	r19, 0x0F	; 15
    3b10:	88 0f       	add	r24, r24
    3b12:	99 1f       	adc	r25, r25
    3b14:	aa 1f       	adc	r26, r26
    3b16:	bb 1f       	adc	r27, r27
    3b18:	3a 95       	dec	r19
    3b1a:	d1 f7       	brne	.-12     	; 0x3b10 <main+0x7c2>
    3b1c:	84 0f       	add	r24, r20
    3b1e:	95 1f       	adc	r25, r21
    3b20:	a6 1f       	adc	r26, r22
    3b22:	b7 1f       	adc	r27, r23
    3b24:	80 93 5d 05 	sts	0x055D, r24
    3b28:	90 93 5e 05 	sts	0x055E, r25
    3b2c:	a0 93 5f 05 	sts	0x055F, r26
    3b30:	b0 93 60 05 	sts	0x0560, r27
		}

		TMR0_counter = 0;
    3b34:	10 92 d0 07 	sts	0x07D0, r1
    3b38:	10 92 cf 07 	sts	0x07CF, r1
				
		// Call IMU with interval
		simple_imu_update(interval);
    3b3c:	60 91 5d 05 	lds	r22, 0x055D
    3b40:	70 91 5e 05 	lds	r23, 0x055E
    3b44:	80 91 5f 05 	lds	r24, 0x055F
    3b48:	90 91 60 05 	lds	r25, 0x0560
    3b4c:	0e 94 61 26 	call	0x4cc2	; 0x4cc2 <simple_imu_update>

		//************************************************************
		//* Update I-terms, average gyro values
		//************************************************************

		Sensor_PID();
    3b50:	0e 94 86 3d 	call	0x7b0c	; 0x7b0c <Sensor_PID>
		
		//************************************************************
		//* Measure incoming RC. Result in SlowRC state and RC_Rate_Timer
		//************************************************************

		if (Interrupted)
    3b54:	80 91 cc 07 	lds	r24, 0x07CC
    3b58:	88 23       	and	r24, r24
    3b5a:	09 f4       	brne	.+2      	; 0x3b5e <main+0x810>
    3b5c:	9b c0       	rjmp	.+310    	; 0x3c94 <main+0x946>
		{
			// Measure incoming RC rate. Threshold is 60Hz.

			if (Config.Servo_rate < FAST)
    3b5e:	e0 91 40 06 	lds	r30, 0x0640
    3b62:	e2 30       	cpi	r30, 0x02	; 2
    3b64:	6c f4       	brge	.+26     	; 0x3b80 <main+0x832>
			{
				if (RC_Rate_Timer > SLOW_RC_RATE)
    3b66:	f4 ec       	ldi	r31, 0xC4	; 196
    3b68:	cf 16       	cp	r12, r31
    3b6a:	f2 ea       	ldi	r31, 0xA2	; 162
    3b6c:	df 06       	cpc	r13, r31
    3b6e:	e1 04       	cpc	r14, r1
    3b70:	f1 04       	cpc	r15, r1
    3b72:	20 f0       	brcs	.+8      	; 0x3b7c <main+0x82e>
				{
					SlowRC = true;
    3b74:	81 e0       	ldi	r24, 0x01	; 1
    3b76:	80 93 00 01 	sts	0x0100, r24
    3b7a:	02 c0       	rjmp	.+4      	; 0x3b80 <main+0x832>
				}
				else
				{
					SlowRC = false;
    3b7c:	10 92 00 01 	sts	0x0100, r1
				}
			}
			
			if ((!RCrateMeasured) && (Config.Servo_rate == FAST))
    3b80:	29 81       	ldd	r18, Y+1	; 0x01
    3b82:	21 11       	cpse	r18, r1
    3b84:	1d c0       	rjmp	.+58     	; 0x3bc0 <main+0x872>
    3b86:	e2 30       	cpi	r30, 0x02	; 2
    3b88:	d9 f4       	brne	.+54     	; 0x3bc0 <main+0x872>
				//LED1 = !LED1; // Debug

				// In high-speed mode, the RC rate will be unfairly marked as "slow" once measured and interrupt blocking starts.
				// To stop this being a problem, only set SlowRC prior to RCrateMeasured becoming true in this mode
				// Debug - or when re-measuring the rate...
				if (RC_Rate_Timer > SLOW_RC_RATE)
    3b8a:	34 ec       	ldi	r19, 0xC4	; 196
    3b8c:	c3 16       	cp	r12, r19
    3b8e:	32 ea       	ldi	r19, 0xA2	; 162
    3b90:	d3 06       	cpc	r13, r19
    3b92:	e1 04       	cpc	r14, r1
    3b94:	f1 04       	cpc	r15, r1
    3b96:	20 f0       	brcs	.+8      	; 0x3ba0 <main+0x852>
				{
					SlowRC = true;
    3b98:	81 e0       	ldi	r24, 0x01	; 1
    3b9a:	80 93 00 01 	sts	0x0100, r24
    3b9e:	02 c0       	rjmp	.+4      	; 0x3ba4 <main+0x856>
				}
				else
				{
					SlowRC = false;
    3ba0:	10 92 00 01 	sts	0x0100, r1
				}	
					
				// If RC rate not measured yet keep refreshing RC_Master_Timer		
				// This is only valid for high speed mode. Other modes just use the SlowRC flag.
				// Note that FrameRate is only valid for serial data
				RC_Master_Timer = FrameRate; 
    3ba4:	80 91 ea 07 	lds	r24, 0x07EA
    3ba8:	90 91 eb 07 	lds	r25, 0x07EB
    3bac:	a0 e0       	ldi	r26, 0x00	; 0
    3bae:	b0 e0       	ldi	r27, 0x00	; 0
    3bb0:	80 93 14 05 	sts	0x0514, r24
    3bb4:	90 93 15 05 	sts	0x0515, r25
    3bb8:	a0 93 16 05 	sts	0x0516, r26
    3bbc:	b0 93 17 05 	sts	0x0517, r27
			//************************************************************
				
			// Work out the exact amount of time that we must wait before
			// signalling "last call" and re-enabling interrupts

			if (RC_Master_Timer > 0) // Debug - don't calculate until a valid measurement is available
    3bc0:	80 91 14 05 	lds	r24, 0x0514
    3bc4:	90 91 15 05 	lds	r25, 0x0515
    3bc8:	a0 91 16 05 	lds	r26, 0x0516
    3bcc:	b0 91 17 05 	lds	r27, 0x0517
    3bd0:	89 2b       	or	r24, r25
    3bd2:	8a 2b       	or	r24, r26
    3bd4:	8b 2b       	or	r24, r27
    3bd6:	c9 f1       	breq	.+114    	; 0x3c4a <main+0x8fc>
			{
				// RC rate is 22ms
				if (SlowRC)
    3bd8:	80 91 00 01 	lds	r24, 0x0100
    3bdc:	88 23       	and	r24, r24
    3bde:	d9 f0       	breq	.+54     	; 0x3c16 <main+0x8c8>
				{
					// 41ms (8 cycles)
					PWM_Available_Timer = (2 * (RC_Master_Timer + SBUS_PERIOD)) - SBUS_PERIOD - PWM_PERIOD - PWM_PERIOD;
    3be0:	80 91 14 05 	lds	r24, 0x0514
    3be4:	90 91 15 05 	lds	r25, 0x0515
    3be8:	a0 91 16 05 	lds	r26, 0x0516
    3bec:	b0 91 17 05 	lds	r27, 0x0517
    3bf0:	88 0f       	add	r24, r24
    3bf2:	99 1f       	adc	r25, r25
    3bf4:	aa 1f       	adc	r26, r26
    3bf6:	bb 1f       	adc	r27, r27
    3bf8:	8a 57       	subi	r24, 0x7A	; 122
    3bfa:	9f 43       	sbci	r25, 0x3F	; 63
    3bfc:	a1 09       	sbc	r26, r1
    3bfe:	b1 09       	sbc	r27, r1
    3c00:	80 93 10 05 	sts	0x0510, r24
    3c04:	90 93 11 05 	sts	0x0511, r25
    3c08:	a0 93 12 05 	sts	0x0512, r26
    3c0c:	b0 93 13 05 	sts	0x0513, r27
					// 30ms (6 cycles)
					PWM_Available_Timer = (3 * (RC_Master_Timer + SBUS_PERIOD)) - SBUS_PERIOD - PWM_PERIOD - PWM_PERIOD - (PWM_PERIOD >> 1);
				}
				
				// Once the high speed rate has been calculated, signal that PWM is good to go.
				RCrateMeasured = true;
    3c10:	41 e0       	ldi	r20, 0x01	; 1
    3c12:	49 83       	std	Y+1, r20	; 0x01
    3c14:	1a c0       	rjmp	.+52     	; 0x3c4a <main+0x8fc>

				// RC rate is 11ms
				else
				{
					// 30ms (6 cycles)
					PWM_Available_Timer = (3 * (RC_Master_Timer + SBUS_PERIOD)) - SBUS_PERIOD - PWM_PERIOD - PWM_PERIOD - (PWM_PERIOD >> 1);
    3c16:	20 91 14 05 	lds	r18, 0x0514
    3c1a:	30 91 15 05 	lds	r19, 0x0515
    3c1e:	40 91 16 05 	lds	r20, 0x0516
    3c22:	50 91 17 05 	lds	r21, 0x0517
    3c26:	a3 e0       	ldi	r26, 0x03	; 3
    3c28:	b0 e0       	ldi	r27, 0x00	; 0
    3c2a:	0e 94 7f 47 	call	0x8efe	; 0x8efe <__muluhisi3>
    3c2e:	66 5b       	subi	r22, 0xB6	; 182
    3c30:	75 43       	sbci	r23, 0x35	; 53
    3c32:	81 09       	sbc	r24, r1
    3c34:	91 09       	sbc	r25, r1
    3c36:	60 93 10 05 	sts	0x0510, r22
    3c3a:	70 93 11 05 	sts	0x0511, r23
    3c3e:	80 93 12 05 	sts	0x0512, r24
    3c42:	90 93 13 05 	sts	0x0513, r25
				}
				
				// Once the high speed rate has been calculated, signal that PWM is good to go.
				RCrateMeasured = true;
    3c46:	21 e0       	ldi	r18, 0x01	; 1
    3c48:	29 83       	std	Y+1, r18	; 0x01
			
			// Reset RC timeout
			RC_Timeout = 0;

			// No longer overdue
			Overdue = false;
    3c4a:	10 92 19 05 	sts	0x0519, r1
							
			// Increment interrupt counter
			RC_Interrupts++;		

			// Block RC interrupts until timeout if period has been calculated
			if ((Config.Servo_rate == FAST) && RCrateMeasured)
    3c4e:	e2 30       	cpi	r30, 0x02	; 2
    3c50:	91 f4       	brne	.+36     	; 0x3c76 <main+0x928>
    3c52:	39 81       	ldd	r19, Y+1	; 0x01
    3c54:	33 23       	and	r19, r19
    3c56:	79 f0       	breq	.+30     	; 0x3c76 <main+0x928>
			{
				// If it's time to resample the RC rate, do it now
				// so as not to disturb PWM generation.
				// This will result in a double gap
				if (ResampleRCRate)
    3c58:	4a 89       	ldd	r20, Y+18	; 0x12
    3c5a:	41 11       	cpse	r20, r1
    3c5c:	12 c0       	rjmp	.+36     	; 0x3c82 <main+0x934>
					ResampleRCRate = false;		// Reset resample request
					
				}
				else
				{
					Interrupted = false;		// Cancel pending interrupts
    3c5e:	10 92 cc 07 	sts	0x07CC, r1
					Disable_RC_Interrupts();	// Disable RC interrupts
    3c62:	0e 94 69 2d 	call	0x5ad2	; 0x5ad2 <Disable_RC_Interrupts>
				// Once the high speed rate has been calculated, signal that PWM is good to go.
				RCrateMeasured = true;
			}
			
			// Reset RC timeout
			RC_Timeout = 0;
    3c66:	61 2c       	mov	r6, r1
    3c68:	71 2c       	mov	r7, r1

			// No longer overdue
			Overdue = false;
			
			// Reset rate timer once data received
			RC_Rate_Timer = 0;
    3c6a:	c1 2c       	mov	r12, r1
    3c6c:	d1 2c       	mov	r13, r1
    3c6e:	76 01       	movw	r14, r12
				}
				else
				{
					Interrupted = false;		// Cancel pending interrupts
					Disable_RC_Interrupts();	// Disable RC interrupts
					RCInterruptsON = false;		// Flag it for the rest of the code
    3c70:	18 8a       	std	Y+16, r1	; 0x10
					PWMBlocked = false;			// Enable PWM generation					
    3c72:	1a 82       	std	Y+2, r1	; 0x02
    3c74:	0f c0       	rjmp	.+30     	; 0x3c94 <main+0x946>
				// Once the high speed rate has been calculated, signal that PWM is good to go.
				RCrateMeasured = true;
			}
			
			// Reset RC timeout
			RC_Timeout = 0;
    3c76:	61 2c       	mov	r6, r1
    3c78:	71 2c       	mov	r7, r1

			// No longer overdue
			Overdue = false;
			
			// Reset rate timer once data received
			RC_Rate_Timer = 0;
    3c7a:	c1 2c       	mov	r12, r1
    3c7c:	d1 2c       	mov	r13, r1
    3c7e:	76 01       	movw	r14, r12
    3c80:	09 c0       	rjmp	.+18     	; 0x3c94 <main+0x946>
				// Once the high speed rate has been calculated, signal that PWM is good to go.
				RCrateMeasured = true;
			}
			
			// Reset RC timeout
			RC_Timeout = 0;
    3c82:	61 2c       	mov	r6, r1
    3c84:	71 2c       	mov	r7, r1

			// No longer overdue
			Overdue = false;
			
			// Reset rate timer once data received
			RC_Rate_Timer = 0;
    3c86:	c1 2c       	mov	r12, r1
    3c88:	d1 2c       	mov	r13, r1
    3c8a:	76 01       	movw	r14, r12
				// This will result in a double gap
				if (ResampleRCRate)
				{
					RCrateMeasured = false;		// Force remeasure of RC rate
					PWMBlocked = true;			// Disable Fast-mode PWM generation		
					ResampleRCRate = false;		// Reset resample request
    3c8c:	1a 8a       	std	Y+18, r1	; 0x12
				// so as not to disturb PWM generation.
				// This will result in a double gap
				if (ResampleRCRate)
				{
					RCrateMeasured = false;		// Force remeasure of RC rate
					PWMBlocked = true;			// Disable Fast-mode PWM generation		
    3c8e:	51 e0       	ldi	r21, 0x01	; 1
    3c90:	5a 83       	std	Y+2, r21	; 0x02
				// If it's time to resample the RC rate, do it now
				// so as not to disturb PWM generation.
				// This will result in a double gap
				if (ResampleRCRate)
				{
					RCrateMeasured = false;		// Force remeasure of RC rate
    3c92:	19 82       	std	Y+1, r1	; 0x01
		//************************************************************
		//* Enable RC interrupts when ready (RC rate measured and RC interrupts OFF)
		//* and set PWM last call made
		//************************************************************

		if ((RC_Rate_Timer > PWM_Available_Timer) && RCrateMeasured && !RCInterruptsON)
    3c94:	80 91 10 05 	lds	r24, 0x0510
    3c98:	90 91 11 05 	lds	r25, 0x0511
    3c9c:	a0 91 12 05 	lds	r26, 0x0512
    3ca0:	b0 91 13 05 	lds	r27, 0x0513
    3ca4:	8c 15       	cp	r24, r12
    3ca6:	9d 05       	cpc	r25, r13
    3ca8:	ae 05       	cpc	r26, r14
    3caa:	bf 05       	cpc	r27, r15
    3cac:	60 f4       	brcc	.+24     	; 0x3cc6 <main+0x978>
    3cae:	29 81       	ldd	r18, Y+1	; 0x01
    3cb0:	22 23       	and	r18, r18
    3cb2:	49 f0       	breq	.+18     	; 0x3cc6 <main+0x978>
    3cb4:	38 89       	ldd	r19, Y+16	; 0x10
    3cb6:	31 11       	cpse	r19, r1
    3cb8:	06 c0       	rjmp	.+12     	; 0x3cc6 <main+0x978>
		{
			// Re-enable interrupts
			init_int();
    3cba:	0e 94 7c 2d 	call	0x5af8	; 0x5af8 <init_int>
			RCInterruptsON = true;
			
			// Signal last PWM generation
			PWM_Last_Call = true;
    3cbe:	41 e0       	ldi	r20, 0x01	; 1
    3cc0:	49 8b       	std	Y+17, r20	; 0x11

		if ((RC_Rate_Timer > PWM_Available_Timer) && RCrateMeasured && !RCInterruptsON)
		{
			// Re-enable interrupts
			init_int();
			RCInterruptsON = true;
    3cc2:	51 e0       	ldi	r21, 0x01	; 1
    3cc4:	58 8b       	std	Y+16, r21	; 0x10
		//************************************************************

		// Cases where we are ready to output
		if	(
				// Interrupted in any mode
				(Interrupted) ||											// Run at RC rate
    3cc6:	80 91 cc 07 	lds	r24, 0x07CC
		//* Output PWM to ESCs/Servos where required, 
		//* based on a very specific set of conditions
		//************************************************************

		// Cases where we are ready to output
		if	(
    3cca:	81 11       	cpse	r24, r1
    3ccc:	08 c0       	rjmp	.+16     	; 0x3cde <main+0x990>
				// Interrupted in any mode
				(Interrupted) ||											// Run at RC rate
    3cce:	80 91 40 06 	lds	r24, 0x0640
    3cd2:	82 30       	cpi	r24, 0x02	; 2
    3cd4:	09 f0       	breq	.+2      	; 0x3cd8 <main+0x98a>
    3cd6:	5d c0       	rjmp	.+186    	; 0x3d92 <main+0xa44>

				// Every loop in FAST mode unless blocked
				((Config.Servo_rate == FAST) && (!PWMBlocked))				// Run at full loop rate if allowed
    3cd8:	8a 81       	ldd	r24, Y+2	; 0x02
    3cda:	81 11       	cpse	r24, r1
    3cdc:	5a c0       	rjmp	.+180    	; 0x3d92 <main+0xa44>
			//* The execution rates are:
			//* The RC rate unless in FAST mode
			//* High speed in FAST mode
			//******************************************************************

			if (Interrupted)
    3cde:	80 91 cc 07 	lds	r24, 0x07CC
    3ce2:	81 11       	cpse	r24, r1
			{
				Interrupted = false;		// Reset interrupted flag if that was the cause of entry			
    3ce4:	10 92 cc 07 	sts	0x07CC, r1
			// For each output, mark the ones that are to fire this time
			for (i = 0; i < MAX_OUTPUTS; i++)
			{
				// Mark bits depending on the selected output type
				if	(
						((Config.Servo_rate == FAST) && (Config.Channel[i].Motor_marker == ASERVO) && ServoTick) ||					// At ServoTick for A.Servo in FAST mode
    3ce8:	90 91 40 06 	lds	r25, 0x0640
    3cec:	e9 e4       	ldi	r30, 0x49	; 73
    3cee:	f6 e0       	ldi	r31, 0x06	; 6
    3cf0:	20 e0       	ldi	r18, 0x00	; 0
    3cf2:	30 e0       	ldi	r19, 0x00	; 0
			}

			// Decide which outputs fire this time, depending on their device setting (A.Servo, D.Servo, Motor)
			// D.Servo, Motor are always ready, but A.Servo must be limited to Servo_rate, flagged by ServoTick

			ServoFlag = 0;
    3cf4:	80 e0       	ldi	r24, 0x00	; 0
				
			// For each output, mark the ones that are to fire this time
			for (i = 0; i < MAX_OUTPUTS; i++)
			{
				// Mark bits depending on the selected output type
				if	(
    3cf6:	92 30       	cpi	r25, 0x02	; 2
    3cf8:	39 f4       	brne	.+14     	; 0x3d08 <main+0x9ba>
						((Config.Servo_rate == FAST) && (Config.Channel[i].Motor_marker == ASERVO) && ServoTick) ||					// At ServoTick for A.Servo in FAST mode
    3cfa:	40 81       	ld	r20, Z
    3cfc:	41 11       	cpse	r20, r1
    3cfe:	17 c0       	rjmp	.+46     	; 0x3d2e <main+0x9e0>
    3d00:	ac 81       	ldd	r26, Y+4	; 0x04
    3d02:	a1 11       	cpse	r26, r1
    3d04:	25 c0       	rjmp	.+74     	; 0x3d50 <main+0xa02>
    3d06:	13 c0       	rjmp	.+38     	; 0x3d2e <main+0x9e0>
    3d08:	91 30       	cpi	r25, 0x01	; 1
    3d0a:	79 f4       	brne	.+30     	; 0x3d2a <main+0x9dc>
						((Config.Servo_rate == SYNC) && (Config.Channel[i].Motor_marker == ASERVO) && (!SlowRC) && ServoTick) ||	// At ServoTick for A.Servo in SYNC with Fast RC
    3d0c:	40 81       	ld	r20, Z
    3d0e:	41 11       	cpse	r20, r1
    3d10:	0e c0       	rjmp	.+28     	; 0x3d2e <main+0x9e0>
    3d12:	40 91 00 01 	lds	r20, 0x0100
    3d16:	41 11       	cpse	r20, r1
    3d18:	03 c0       	rjmp	.+6      	; 0x3d20 <main+0x9d2>
    3d1a:	bc 81       	ldd	r27, Y+4	; 0x04
    3d1c:	b1 11       	cpse	r27, r1
    3d1e:	18 c0       	rjmp	.+48     	; 0x3d50 <main+0xa02>
						((Config.Servo_rate == SYNC) && (Config.Channel[i].Motor_marker == ASERVO) && (SlowRC)) ||					// At RC rate for A.Servo with slow RC
    3d20:	40 91 00 01 	lds	r20, 0x0100
    3d24:	41 11       	cpse	r20, r1
    3d26:	14 c0       	rjmp	.+40     	; 0x3d50 <main+0xa02>
    3d28:	02 c0       	rjmp	.+4      	; 0x3d2e <main+0x9e0>
    3d2a:	19 16       	cp	r1, r25
    3d2c:	24 f4       	brge	.+8      	; 0x3d36 <main+0x9e8>
						((Config.Servo_rate >= SYNC) && (Config.Channel[i].Motor_marker > ASERVO)) ||								// Always for D.Servo and Motor in SYNC or FAST modes
    3d2e:	40 81       	ld	r20, Z
    3d30:	14 16       	cp	r1, r20
    3d32:	74 f0       	brlt	.+28     	; 0x3d50 <main+0xa02>
    3d34:	15 c0       	rjmp	.+42     	; 0x3d60 <main+0xa12>
    3d36:	91 11       	cpse	r25, r1
    3d38:	13 c0       	rjmp	.+38     	; 0x3d60 <main+0xa12>
						((Config.Servo_rate == LOW) && (!SlowRC) && ServoTick) ||													// All outputs at ServoTick in LOW mode with fast RC
    3d3a:	40 91 00 01 	lds	r20, 0x0100
    3d3e:	41 11       	cpse	r20, r1
    3d40:	03 c0       	rjmp	.+6      	; 0x3d48 <main+0x9fa>
    3d42:	4c 81       	ldd	r20, Y+4	; 0x04
    3d44:	41 11       	cpse	r20, r1
    3d46:	04 c0       	rjmp	.+8      	; 0x3d50 <main+0xa02>
						((Config.Servo_rate == LOW) && (SlowRC))																	// All outputs at  RC rate in LOW mode with slow RC
    3d48:	40 91 00 01 	lds	r20, 0x0100
    3d4c:	44 23       	and	r20, r20
    3d4e:	41 f0       	breq	.+16     	; 0x3d60 <main+0xa12>
					)
				{
					ServoFlag |= (1 << i);
    3d50:	41 e0       	ldi	r20, 0x01	; 1
    3d52:	50 e0       	ldi	r21, 0x00	; 0
    3d54:	02 2e       	mov	r0, r18
    3d56:	01 c0       	rjmp	.+2      	; 0x3d5a <main+0xa0c>
    3d58:	44 0f       	add	r20, r20
    3d5a:	0a 94       	dec	r0
    3d5c:	ea f7       	brpl	.-6      	; 0x3d58 <main+0xa0a>
    3d5e:	84 2b       	or	r24, r20
    3d60:	2f 5f       	subi	r18, 0xFF	; 255
    3d62:	3f 4f       	sbci	r19, 0xFF	; 255
    3d64:	b6 96       	adiw	r30, 0x26	; 38
			// D.Servo, Motor are always ready, but A.Servo must be limited to Servo_rate, flagged by ServoTick

			ServoFlag = 0;
				
			// For each output, mark the ones that are to fire this time
			for (i = 0; i < MAX_OUTPUTS; i++)
    3d66:	28 30       	cpi	r18, 0x08	; 8
    3d68:	31 05       	cpc	r19, r1
    3d6a:	29 f6       	brne	.-118    	; 0x3cf6 <main+0x9a8>
			{
				ServoTick = false;
			}

			// Block PWM generation after last call called
			if (PWM_Last_Call)
    3d6c:	59 89       	ldd	r21, Y+17	; 0x11
    3d6e:	55 23       	and	r21, r21
    3d70:	11 f0       	breq	.+4      	; 0x3d76 <main+0xa28>
			{
				PWMBlocked = true;				// Block PWM generation on notification of last call
    3d72:	91 e0       	ldi	r25, 0x01	; 1
    3d74:	9a 83       	std	Y+2, r25	; 0x02
				PWM_Last_Call = false;			// Reset last call flag	
			}
			
			Calculate_PID();					// Calculate PID values
    3d76:	88 a3       	std	Y+32, r24	; 0x20
    3d78:	0e 94 3f 3f 	call	0x7e7e	; 0x7e7e <Calculate_PID>
			ProcessMixer();						// Do all the mixer tasks - can be very slow
    3d7c:	0e 94 43 37 	call	0x6e86	; 0x6e86 <ProcessMixer>
			UpdateServos();						// Transfer Config.Channel[i].value data to ServoOut[i] and check servo limits
    3d80:	0e 94 e3 36 	call	0x6dc6	; 0x6dc6 <UpdateServos>
			output_servo_ppm(ServoFlag);		// Output servo signal
    3d84:	88 a1       	ldd	r24, Y+32	; 0x20
    3d86:	0e 94 d8 42 	call	0x85b0	; 0x85b0 <output_servo_ppm>
			
			LoopCount = 0;						// Reset loop counter for averaging accVert
    3d8a:	10 92 18 05 	sts	0x0518, r1
    3d8e:	19 8a       	std	Y+17, r1	; 0x11
    3d90:	1c 82       	std	Y+4, r1	; 0x04
		//* Carefully update idle screen if error level changed
		//************************************************************	

		// Only update idle when error state has changed.
		// This prevents the continual updating of the LCD disrupting the FC
		if (old_alarms != General_error)
    3d92:	80 91 20 05 	lds	r24, 0x0520
    3d96:	af 8d       	ldd	r26, Y+31	; 0x1f
    3d98:	a8 13       	cpse	r26, r24
		{
			// Force update of idle screen
			Menu_mode = STATUS_TIMEOUT;
    3d9a:	16 e0       	ldi	r17, 0x06	; 6
		}
			
		// Save current alarm state into old_alarms
		old_alarms = General_error;
    3d9c:	b0 91 20 05 	lds	r27, 0x0520
    3da0:	bf 8f       	std	Y+31, r27	; 0x1f
		//************************************************************
		//* Transition state handling
		//************************************************************

		// Update timed transition when changing flight modes
		if (Config.FlightSel != old_flight)
    3da2:	0d 89       	ldd	r16, Y+21	; 0x15
		//************************************************************
		//* Update timers
		//************************************************************

		// Safely get current value of TCNT1
		Save_TCNT1 = TIM16_ReadTCNT1();
    3da4:	ee 85       	ldd	r30, Y+14	; 0x0e
    3da6:	ff 85       	ldd	r31, Y+15	; 0x0f
    3da8:	fd 87       	std	Y+13, r31	; 0x0d
    3daa:	ec 87       	std	Y+12, r30	; 0x0c
		}
			
		// Save current alarm state into old_alarms
		old_alarms = General_error;
		
	} // while loop
    3dac:	08 cb       	rjmp	.-2544   	; 0x33be <main+0x70>
			// Trim lower end to zero (0 to 2250)
			if (temp1 < 0) temp1 = 0;

			// Convert 0 to 2250 to 0 to 125. Divide by 20
			// Round to avoid truncation errors
			transition = (temp1 + 10) / 20;
    3dae:	70 93 22 05 	sts	0x0522, r23
    3db2:	60 93 21 05 	sts	0x0521, r22

		// Always in the TRANSITIONING state when Config.TransitionSpeed is 0
		// This prevents state changes when controlled by a channel
		if (Config.TransitionSpeed == 0)
		{
			Transition_state = TRANSITIONING;
    3db6:	85 e0       	ldi	r24, 0x05	; 5
    3db8:	80 93 23 05 	sts	0x0523, r24
    3dbc:	f7 cc       	rjmp	.-1554   	; 0x37ac <main+0x45e>

00003dbe <spiwrite>:
const uint8_t pagemap[] PROGMEM 		= { 7, 6, 5, 4, 3, 2, 1, 0 }; 
const uint8_t lcd_commmands[] PROGMEM	= {0xAF,0x40,0xA0,0xA6,0xA4,0xA2,0xEE,0xC8,0x2F,0x24,0xAC,0x00,0xF8,0x00};	// LCD command string 14

// Software SPI write
inline void spiwrite(uint8_t c) 
{
    3dbe:	0f 93       	push	r16
    3dc0:	1f 93       	push	r17
    3dc2:	cf 93       	push	r28
    3dc4:	df 93       	push	r29
    3dc6:	c7 e0       	ldi	r28, 0x07	; 7
    3dc8:	d0 e0       	ldi	r29, 0x00	; 0
	int8_t i;
	for (i = 7; i >= 0; i--) 
	{
		LCD_SCL = 0;
		if (c & (1 << (i)))		// Bit set?
    3dca:	08 2f       	mov	r16, r24
    3dcc:	10 e0       	ldi	r17, 0x00	; 0
inline void spiwrite(uint8_t c) 
{
	int8_t i;
	for (i = 7; i >= 0; i--) 
	{
		LCD_SCL = 0;
    3dce:	5c 98       	cbi	0x0b, 4	; 11
		if (c & (1 << (i)))		// Bit set?
    3dd0:	c8 01       	movw	r24, r16
    3dd2:	0c 2e       	mov	r0, r28
    3dd4:	02 c0       	rjmp	.+4      	; 0x3dda <spiwrite+0x1c>
    3dd6:	95 95       	asr	r25
    3dd8:	87 95       	ror	r24
    3dda:	0a 94       	dec	r0
    3ddc:	e2 f7       	brpl	.-8      	; 0x3dd6 <spiwrite+0x18>
    3dde:	80 ff       	sbrs	r24, 0
    3de0:	02 c0       	rjmp	.+4      	; 0x3de6 <spiwrite+0x28>
		{
			LCD_SI = 1;
    3de2:	59 9a       	sbi	0x0b, 1	; 11
    3de4:	01 c0       	rjmp	.+2      	; 0x3de8 <spiwrite+0x2a>
		}
		else					// Bit clear?
		{
			LCD_SI = 0;
    3de6:	59 98       	cbi	0x0b, 1	; 11
		}
		
		LCD_SCL = 1;
    3de8:	5c 9a       	sbi	0x0b, 4	; 11

		glcd_delay();			// 250ns
    3dea:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <glcd_delay>
    3dee:	21 97       	sbiw	r28, 0x01	; 1
    3df0:	70 f7       	brcc	.-36     	; 0x3dce <spiwrite+0x10>
	}
}
    3df2:	df 91       	pop	r29
    3df4:	cf 91       	pop	r28
    3df6:	1f 91       	pop	r17
    3df8:	0f 91       	pop	r16
    3dfa:	08 95       	ret

00003dfc <st7565_command>:

// Send command to LCD
void st7565_command(uint8_t c) 
{
	LCD_A0 = 0;
    3dfc:	5f 98       	cbi	0x0b, 7	; 11
	spiwrite(c);
    3dfe:	0c 94 df 1e 	jmp	0x3dbe	; 0x3dbe <spiwrite>

00003e02 <st7565_data>:
}

// Send data to LCD
void st7565_data(uint8_t c) 
{
	LCD_A0 = 1;
    3e02:	5f 9a       	sbi	0x0b, 7	; 11
	spiwrite(c);
    3e04:	0c 94 df 1e 	jmp	0x3dbe	; 0x3dbe <spiwrite>

00003e08 <st7565_set_brightness>:
}


// Set LCD brightness
void st7565_set_brightness(uint8_t val) 
{
    3e08:	cf 93       	push	r28
    3e0a:	c8 2f       	mov	r28, r24
	st7565_command(CMD_SET_VOLUME_FIRST);					// 0x81
    3e0c:	81 e8       	ldi	r24, 0x81	; 129
    3e0e:	0e 94 fe 1e 	call	0x3dfc	; 0x3dfc <st7565_command>
	st7565_command(val);
    3e12:	8c 2f       	mov	r24, r28
}
    3e14:	cf 91       	pop	r28

// Set LCD brightness
void st7565_set_brightness(uint8_t val) 
{
	st7565_command(CMD_SET_VOLUME_FIRST);					// 0x81
	st7565_command(val);
    3e16:	0c 94 fe 1e 	jmp	0x3dfc	; 0x3dfc <st7565_command>

00003e1a <st7565_init>:
	spiwrite(c);
}

// Initialise LCD
void st7565_init(void) 
{
    3e1a:	cf 93       	push	r28
    3e1c:	df 93       	push	r29
	// Toggle RST low to reset and CS low so it'll listen to us
	LCD_CSI = 0;
    3e1e:	5d 98       	cbi	0x0b, 5	; 11
	LCD_RES = 0;
    3e20:	5e 98       	cbi	0x0b, 6	; 11
    3e22:	87 e8       	ldi	r24, 0x87	; 135
    3e24:	93 e1       	ldi	r25, 0x13	; 19
    3e26:	01 97       	sbiw	r24, 0x01	; 1
    3e28:	f1 f7       	brne	.-4      	; 0x3e26 <st7565_init+0xc>
    3e2a:	00 c0       	rjmp	.+0      	; 0x3e2c <st7565_init+0x12>
    3e2c:	00 00       	nop
	_delay_ms(1); // Datasheet says 1us for 3.3V operation
	LCD_RES = 1;
    3e2e:	5e 9a       	sbi	0x0b, 6	; 11
    3e30:	c8 ec       	ldi	r28, 0xC8	; 200
    3e32:	dd e0       	ldi	r29, 0x0D	; 13

	// Send command sequence
	for (int i = 0; i < 14; i++)
	{
		st7565_command((uint8_t)pgm_read_byte(&lcd_commmands[i]));
    3e34:	fe 01       	movw	r30, r28
    3e36:	84 91       	lpm	r24, Z
    3e38:	0e 94 fe 1e 	call	0x3dfc	; 0x3dfc <st7565_command>
    3e3c:	21 96       	adiw	r28, 0x01	; 1
	LCD_RES = 0;
	_delay_ms(1); // Datasheet says 1us for 3.3V operation
	LCD_RES = 1;

	// Send command sequence
	for (int i = 0; i < 14; i++)
    3e3e:	fd e0       	ldi	r31, 0x0D	; 13
    3e40:	c6 3d       	cpi	r28, 0xD6	; 214
    3e42:	df 07       	cpc	r29, r31
    3e44:	b9 f7       	brne	.-18     	; 0x3e34 <st7565_init+0x1a>
	{
		st7565_command((uint8_t)pgm_read_byte(&lcd_commmands[i]));
	}

	st7565_set_brightness(Config.Contrast);	
    3e46:	80 91 3c 06 	lds	r24, 0x063C
    3e4a:	0e 94 04 1f 	call	0x3e08	; 0x3e08 <st7565_set_brightness>
	st7565_command(CMD_SET_COM_REVERSE); 		// For logo	0xC8
    3e4e:	88 ec       	ldi	r24, 0xC8	; 200
}
    3e50:	df 91       	pop	r29
    3e52:	cf 91       	pop	r28
	{
		st7565_command((uint8_t)pgm_read_byte(&lcd_commmands[i]));
	}

	st7565_set_brightness(Config.Contrast);	
	st7565_command(CMD_SET_COM_REVERSE); 		// For logo	0xC8
    3e54:	0c 94 fe 1e 	jmp	0x3dfc	; 0x3dfc <st7565_command>

00003e58 <write_buffer>:
	st7565_command(val);
}

// Write LCD buffer
void write_buffer(uint8_t *buffer) 
{
    3e58:	df 92       	push	r13
    3e5a:	ef 92       	push	r14
    3e5c:	ff 92       	push	r15
    3e5e:	0f 93       	push	r16
    3e60:	1f 93       	push	r17
    3e62:	cf 93       	push	r28
    3e64:	df 93       	push	r29
    3e66:	c6 ed       	ldi	r28, 0xD6	; 214
    3e68:	dd e0       	ldi	r29, 0x0D	; 13
    3e6a:	8c 01       	movw	r16, r24
	uint8_t c, p;
	for(p = 0; p < 8; p++) 
	{
		st7565_command(CMD_SET_PAGE | (uint8_t)pgm_read_byte(&pagemap[p]));		// Page 7 to 0
    3e6c:	fe 01       	movw	r30, r28
    3e6e:	84 91       	lpm	r24, Z
    3e70:	80 6b       	ori	r24, 0xB0	; 176
    3e72:	0e 94 fe 1e 	call	0x3dfc	; 0x3dfc <st7565_command>
		st7565_command(CMD_SET_COLUMN_LOWER | (0x0 & 0xf));						// Column 0
    3e76:	80 e0       	ldi	r24, 0x00	; 0
    3e78:	0e 94 fe 1e 	call	0x3dfc	; 0x3dfc <st7565_command>
		st7565_command(CMD_SET_COLUMN_UPPER | ((0x0 >> 4) & 0xf));				// Column 0
    3e7c:	80 e1       	ldi	r24, 0x10	; 16
    3e7e:	0e 94 fe 1e 	call	0x3dfc	; 0x3dfc <st7565_command>
		st7565_command(CMD_RMW);												// Sets auto-increment
    3e82:	80 ee       	ldi	r24, 0xE0	; 224
    3e84:	0e 94 fe 1e 	call	0x3dfc	; 0x3dfc <st7565_command>
    3e88:	78 01       	movw	r14, r16

		for(c = 0; c < 128; c++) 
    3e8a:	d1 2c       	mov	r13, r1
		{
			st7565_data(buffer[(128*p)+c]);
    3e8c:	f7 01       	movw	r30, r14
    3e8e:	81 91       	ld	r24, Z+
    3e90:	7f 01       	movw	r14, r30
    3e92:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <st7565_data>
		st7565_command(CMD_SET_PAGE | (uint8_t)pgm_read_byte(&pagemap[p]));		// Page 7 to 0
		st7565_command(CMD_SET_COLUMN_LOWER | (0x0 & 0xf));						// Column 0
		st7565_command(CMD_SET_COLUMN_UPPER | ((0x0 >> 4) & 0xf));				// Column 0
		st7565_command(CMD_RMW);												// Sets auto-increment

		for(c = 0; c < 128; c++) 
    3e96:	d3 94       	inc	r13
    3e98:	f0 e8       	ldi	r31, 0x80	; 128
    3e9a:	df 12       	cpse	r13, r31
    3e9c:	f7 cf       	rjmp	.-18     	; 0x3e8c <write_buffer+0x34>
    3e9e:	21 96       	adiw	r28, 0x01	; 1
    3ea0:	00 58       	subi	r16, 0x80	; 128
    3ea2:	1f 4f       	sbci	r17, 0xFF	; 255

// Write LCD buffer
void write_buffer(uint8_t *buffer) 
{
	uint8_t c, p;
	for(p = 0; p < 8; p++) 
    3ea4:	8d e0       	ldi	r24, 0x0D	; 13
    3ea6:	ce 3d       	cpi	r28, 0xDE	; 222
    3ea8:	d8 07       	cpc	r29, r24
    3eaa:	01 f7       	brne	.-64     	; 0x3e6c <write_buffer+0x14>
		for(c = 0; c < 128; c++) 
		{
			st7565_data(buffer[(128*p)+c]);
		}
	}
}
    3eac:	df 91       	pop	r29
    3eae:	cf 91       	pop	r28
    3eb0:	1f 91       	pop	r17
    3eb2:	0f 91       	pop	r16
    3eb4:	ff 90       	pop	r15
    3eb6:	ef 90       	pop	r14
    3eb8:	df 90       	pop	r13
    3eba:	08 95       	ret

00003ebc <clear_buffer>:

// Clear buffer
void clear_buffer(uint8_t *buff) 
{
	memset(buff, 0, 1024);
    3ebc:	20 e0       	ldi	r18, 0x00	; 0
    3ebe:	34 e0       	ldi	r19, 0x04	; 4
    3ec0:	fc 01       	movw	r30, r24
    3ec2:	a9 01       	movw	r20, r18
    3ec4:	11 92       	st	Z+, r1
    3ec6:	41 50       	subi	r20, 0x01	; 1
    3ec8:	50 40       	sbci	r21, 0x00	; 0
    3eca:	e1 f7       	brne	.-8      	; 0x3ec4 <clear_buffer+0x8>
    3ecc:	08 95       	ret

00003ece <clear_screen>:
}

// Clear screen (does not clear buffer)
void clear_screen(void)
{
    3ece:	cf 93       	push	r28
    3ed0:	df 93       	push	r29
	uint8_t p, c;

	for(p = 0; p < 8; p++)
    3ed2:	d0 e0       	ldi	r29, 0x00	; 0
	{
		st7565_command(CMD_SET_PAGE | p);								// Set page to p
    3ed4:	8d 2f       	mov	r24, r29
    3ed6:	80 6b       	ori	r24, 0xB0	; 176
    3ed8:	0e 94 fe 1e 	call	0x3dfc	; 0x3dfc <st7565_command>
		for(c = 0; c < 128; c++) 										// Was 129, which I think is wrong...
    3edc:	c0 e0       	ldi	r28, 0x00	; 0
		{
			st7565_command(CMD_SET_COLUMN_LOWER | (c & 0xf));
    3ede:	8c 2f       	mov	r24, r28
    3ee0:	8f 70       	andi	r24, 0x0F	; 15
    3ee2:	0e 94 fe 1e 	call	0x3dfc	; 0x3dfc <st7565_command>
			st7565_command(CMD_SET_COLUMN_UPPER | ((c >> 4) & 0xf));	// Set column to c
    3ee6:	8c 2f       	mov	r24, r28
    3ee8:	82 95       	swap	r24
    3eea:	8f 70       	andi	r24, 0x0F	; 15
    3eec:	80 61       	ori	r24, 0x10	; 16
    3eee:	0e 94 fe 1e 	call	0x3dfc	; 0x3dfc <st7565_command>
			st7565_data(0x00);											// Clear data
    3ef2:	80 e0       	ldi	r24, 0x00	; 0
    3ef4:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <st7565_data>
	uint8_t p, c;

	for(p = 0; p < 8; p++)
	{
		st7565_command(CMD_SET_PAGE | p);								// Set page to p
		for(c = 0; c < 128; c++) 										// Was 129, which I think is wrong...
    3ef8:	cf 5f       	subi	r28, 0xFF	; 255
    3efa:	c0 38       	cpi	r28, 0x80	; 128
    3efc:	81 f7       	brne	.-32     	; 0x3ede <clear_screen+0x10>
// Clear screen (does not clear buffer)
void clear_screen(void)
{
	uint8_t p, c;

	for(p = 0; p < 8; p++)
    3efe:	df 5f       	subi	r29, 0xFF	; 255
    3f00:	d8 30       	cpi	r29, 0x08	; 8
    3f02:	41 f7       	brne	.-48     	; 0x3ed4 <clear_screen+0x6>
			st7565_command(CMD_SET_COLUMN_LOWER | (c & 0xf));
			st7565_command(CMD_SET_COLUMN_UPPER | ((c >> 4) & 0xf));	// Set column to c
			st7565_data(0x00);											// Clear data
		}
	}
}
    3f04:	df 91       	pop	r29
    3f06:	cf 91       	pop	r28
    3f08:	08 95       	ret

00003f0a <setpixel>:
//***********************************************************

// Set a single pixel
void setpixel(uint8_t *buff, uint8_t x, uint8_t y, uint8_t color) 
{
	if ((x >= LCDWIDTH) || (y >= LCDHEIGHT))
    3f0a:	67 fd       	sbrc	r22, 7
    3f0c:	36 c0       	rjmp	.+108    	; 0x3f7a <setpixel+0x70>
    3f0e:	40 34       	cpi	r20, 0x40	; 64
    3f10:	a0 f5       	brcc	.+104    	; 0x3f7a <setpixel+0x70>
    3f12:	34 2f       	mov	r19, r20
    3f14:	36 95       	lsr	r19
    3f16:	36 95       	lsr	r19
    3f18:	36 95       	lsr	r19
    3f1a:	e6 2f       	mov	r30, r22
    3f1c:	f0 e0       	ldi	r31, 0x00	; 0
    3f1e:	50 e0       	ldi	r21, 0x00	; 0
	{
		return;
	}
	// x is which column
	if (color)
    3f20:	22 23       	and	r18, r18
    3f22:	a9 f0       	breq	.+42     	; 0x3f4e <setpixel+0x44>
	{
		buff[x+ (y/8)*128] |= (1 << (7-(y%8)));  
    3f24:	20 e8       	ldi	r18, 0x80	; 128
    3f26:	32 9f       	mul	r19, r18
    3f28:	e0 0d       	add	r30, r0
    3f2a:	f1 1d       	adc	r31, r1
    3f2c:	11 24       	eor	r1, r1
    3f2e:	e8 0f       	add	r30, r24
    3f30:	f9 1f       	adc	r31, r25
    3f32:	40 95       	com	r20
    3f34:	50 95       	com	r21
    3f36:	47 70       	andi	r20, 0x07	; 7
    3f38:	55 27       	eor	r21, r21
    3f3a:	81 e0       	ldi	r24, 0x01	; 1
    3f3c:	90 e0       	ldi	r25, 0x00	; 0
    3f3e:	04 2e       	mov	r0, r20
    3f40:	01 c0       	rjmp	.+2      	; 0x3f44 <setpixel+0x3a>
    3f42:	88 0f       	add	r24, r24
    3f44:	0a 94       	dec	r0
    3f46:	ea f7       	brpl	.-6      	; 0x3f42 <setpixel+0x38>
    3f48:	90 81       	ld	r25, Z
    3f4a:	98 2b       	or	r25, r24
    3f4c:	15 c0       	rjmp	.+42     	; 0x3f78 <setpixel+0x6e>
	}
	else
	{
		buff[x+ (y/8)*128] &= ~(1 << (7-(y%8))); 
    3f4e:	20 e8       	ldi	r18, 0x80	; 128
    3f50:	32 9f       	mul	r19, r18
    3f52:	e0 0d       	add	r30, r0
    3f54:	f1 1d       	adc	r31, r1
    3f56:	11 24       	eor	r1, r1
    3f58:	e8 0f       	add	r30, r24
    3f5a:	f9 1f       	adc	r31, r25
    3f5c:	40 95       	com	r20
    3f5e:	50 95       	com	r21
    3f60:	47 70       	andi	r20, 0x07	; 7
    3f62:	55 27       	eor	r21, r21
    3f64:	81 e0       	ldi	r24, 0x01	; 1
    3f66:	90 e0       	ldi	r25, 0x00	; 0
    3f68:	04 2e       	mov	r0, r20
    3f6a:	01 c0       	rjmp	.+2      	; 0x3f6e <setpixel+0x64>
    3f6c:	88 0f       	add	r24, r24
    3f6e:	0a 94       	dec	r0
    3f70:	ea f7       	brpl	.-6      	; 0x3f6c <setpixel+0x62>
    3f72:	80 95       	com	r24
    3f74:	90 81       	ld	r25, Z
    3f76:	98 23       	and	r25, r24
    3f78:	90 83       	st	Z, r25
    3f7a:	08 95       	ret

00003f7c <drawline>:
	}
}

// Bresenham's algorithm - From wikipedia
void drawline(uint8_t *buff, uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1, uint8_t color) 
{
    3f7c:	9f 92       	push	r9
    3f7e:	af 92       	push	r10
    3f80:	bf 92       	push	r11
    3f82:	cf 92       	push	r12
    3f84:	df 92       	push	r13
    3f86:	ef 92       	push	r14
    3f88:	ff 92       	push	r15
    3f8a:	0f 93       	push	r16
    3f8c:	1f 93       	push	r17
    3f8e:	cf 93       	push	r28
    3f90:	df 93       	push	r29
    3f92:	ec 01       	movw	r28, r24
    3f94:	16 2f       	mov	r17, r22
    3f96:	f4 2e       	mov	r15, r20
    3f98:	d2 2e       	mov	r13, r18
	uint8_t steep = abs(y1 - y0) > abs(x1 - x0);
    3f9a:	a0 2f       	mov	r26, r16
    3f9c:	b0 e0       	ldi	r27, 0x00	; 0
    3f9e:	a4 1b       	sub	r26, r20
    3fa0:	b1 09       	sbc	r27, r1
    3fa2:	b7 ff       	sbrs	r27, 7
    3fa4:	03 c0       	rjmp	.+6      	; 0x3fac <drawline+0x30>
    3fa6:	b1 95       	neg	r27
    3fa8:	a1 95       	neg	r26
    3faa:	b1 09       	sbc	r27, r1
    3fac:	ed 2d       	mov	r30, r13
    3fae:	f0 e0       	ldi	r31, 0x00	; 0
    3fb0:	e1 1b       	sub	r30, r17
    3fb2:	f1 09       	sbc	r31, r1
    3fb4:	f7 ff       	sbrs	r31, 7
    3fb6:	03 c0       	rjmp	.+6      	; 0x3fbe <drawline+0x42>
    3fb8:	f1 95       	neg	r31
    3fba:	e1 95       	neg	r30
    3fbc:	f1 09       	sbc	r31, r1
    3fbe:	bb 24       	eor	r11, r11
    3fc0:	b3 94       	inc	r11
    3fc2:	ea 17       	cp	r30, r26
    3fc4:	fb 07       	cpc	r31, r27
    3fc6:	14 f0       	brlt	.+4      	; 0x3fcc <drawline+0x50>
    3fc8:	b1 2c       	mov	r11, r1
    3fca:	06 c0       	rjmp	.+12     	; 0x3fd8 <drawline+0x5c>
    3fcc:	8d 2d       	mov	r24, r13
	if (steep) 
	{
		swap(x0, y0);
		swap(x1, y1);
    3fce:	d0 2e       	mov	r13, r16
    3fd0:	08 2f       	mov	r16, r24
    3fd2:	81 2f       	mov	r24, r17
void drawline(uint8_t *buff, uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1, uint8_t color) 
{
	uint8_t steep = abs(y1 - y0) > abs(x1 - x0);
	if (steep) 
	{
		swap(x0, y0);
    3fd4:	1f 2d       	mov	r17, r15
    3fd6:	f8 2e       	mov	r15, r24
		swap(x1, y1);
	}

	if (x0 > x1) 
    3fd8:	d1 16       	cp	r13, r17
    3fda:	30 f4       	brcc	.+12     	; 0x3fe8 <drawline+0x6c>
    3fdc:	8f 2d       	mov	r24, r15
	{
		swap(x0, x1);
		swap(y0, y1);
    3fde:	f0 2e       	mov	r15, r16
    3fe0:	08 2f       	mov	r16, r24
    3fe2:	81 2f       	mov	r24, r17
    3fe4:	1d 2d       	mov	r17, r13
    3fe6:	d8 2e       	mov	r13, r24
	}

	uint8_t dx, dy;
	dx = x1 - x0;
    3fe8:	ad 2c       	mov	r10, r13
    3fea:	a1 1a       	sub	r10, r17
	dy = abs(y1 - y0);
    3fec:	e0 2f       	mov	r30, r16
    3fee:	f0 e0       	ldi	r31, 0x00	; 0
    3ff0:	ef 19       	sub	r30, r15
    3ff2:	f1 09       	sbc	r31, r1
    3ff4:	f7 ff       	sbrs	r31, 7
    3ff6:	03 c0       	rjmp	.+6      	; 0x3ffe <drawline+0x82>
    3ff8:	f1 95       	neg	r31
    3ffa:	e1 95       	neg	r30
    3ffc:	f1 09       	sbc	r31, r1
    3ffe:	9e 2e       	mov	r9, r30

	int8_t err = dx / 2;
    4000:	ca 2c       	mov	r12, r10
    4002:	c6 94       	lsr	r12
	int8_t ystep;

	if (y0 < y1) 
    4004:	f0 16       	cp	r15, r16
    4006:	10 f4       	brcc	.+4      	; 0x400c <drawline+0x90>
	{
		ystep = 1;
    4008:	01 e0       	ldi	r16, 0x01	; 1
    400a:	10 c0       	rjmp	.+32     	; 0x402c <drawline+0xb0>
	} 
	else 
	{
		ystep = -1;
    400c:	0f ef       	ldi	r16, 0xFF	; 255
    400e:	0e c0       	rjmp	.+28     	; 0x402c <drawline+0xb0>

	for (; x0<x1; x0++) 
	{
		if (steep) 
		{
			setpixel(buff, y0, x0, color);
    4010:	2e 2d       	mov	r18, r14
		ystep = -1;
	}

	for (; x0<x1; x0++) 
	{
		if (steep) 
    4012:	bb 20       	and	r11, r11
    4014:	71 f0       	breq	.+28     	; 0x4032 <drawline+0xb6>
		{
			setpixel(buff, y0, x0, color);
    4016:	41 2f       	mov	r20, r17
    4018:	6f 2d       	mov	r22, r15
		} 
		else 
		{
			setpixel(buff, x0, y0, color);
    401a:	ce 01       	movw	r24, r28
    401c:	0e 94 85 1f 	call	0x3f0a	; 0x3f0a <setpixel>
		}
		err -= dy;
    4020:	c9 18       	sub	r12, r9
		if (err < 0) 
    4022:	c7 fe       	sbrs	r12, 7
    4024:	02 c0       	rjmp	.+4      	; 0x402a <drawline+0xae>
		{
			y0 += ystep;
    4026:	f0 0e       	add	r15, r16
			err += dx;
    4028:	ca 0c       	add	r12, r10
	else 
	{
		ystep = -1;
	}

	for (; x0<x1; x0++) 
    402a:	1f 5f       	subi	r17, 0xFF	; 255
    402c:	1d 15       	cp	r17, r13
    402e:	80 f3       	brcs	.-32     	; 0x4010 <drawline+0x94>
    4030:	03 c0       	rjmp	.+6      	; 0x4038 <drawline+0xbc>
		{
			setpixel(buff, y0, x0, color);
		} 
		else 
		{
			setpixel(buff, x0, y0, color);
    4032:	4f 2d       	mov	r20, r15
    4034:	61 2f       	mov	r22, r17
    4036:	f1 cf       	rjmp	.-30     	; 0x401a <drawline+0x9e>
		{
			y0 += ystep;
			err += dx;
		}
	}
}
    4038:	df 91       	pop	r29
    403a:	cf 91       	pop	r28
    403c:	1f 91       	pop	r17
    403e:	0f 91       	pop	r16
    4040:	ff 90       	pop	r15
    4042:	ef 90       	pop	r14
    4044:	df 90       	pop	r13
    4046:	cf 90       	pop	r12
    4048:	bf 90       	pop	r11
    404a:	af 90       	pop	r10
    404c:	9f 90       	pop	r9
    404e:	08 95       	ret

00004050 <fillrect>:

// Filled rectangle
void fillrect(uint8_t *buff, uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color) 
{
    4050:	af 92       	push	r10
    4052:	bf 92       	push	r11
    4054:	cf 92       	push	r12
    4056:	df 92       	push	r13
    4058:	ef 92       	push	r14
    405a:	ff 92       	push	r15
    405c:	0f 93       	push	r16
    405e:	1f 93       	push	r17
    4060:	cf 93       	push	r28
    4062:	df 93       	push	r29
    4064:	6c 01       	movw	r12, r24
    4066:	a4 2e       	mov	r10, r20
	// Stupidest version - just pixels - but fast with internal buffer!
	for (uint8_t i=x; i<x+w; i++) 
    4068:	f6 2e       	mov	r15, r22
    406a:	c2 2f       	mov	r28, r18
    406c:	d0 e0       	ldi	r29, 0x00	; 0
    406e:	c6 0f       	add	r28, r22
    4070:	d1 1d       	adc	r29, r1
	{
		for (uint8_t j=y; j<y+h; j++) 
    4072:	10 e0       	ldi	r17, 0x00	; 0
    4074:	04 0f       	add	r16, r20
    4076:	11 1d       	adc	r17, r1

// Filled rectangle
void fillrect(uint8_t *buff, uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color) 
{
	// Stupidest version - just pixels - but fast with internal buffer!
	for (uint8_t i=x; i<x+w; i++) 
    4078:	8f 2d       	mov	r24, r15
    407a:	90 e0       	ldi	r25, 0x00	; 0
    407c:	8c 17       	cp	r24, r28
    407e:	9d 07       	cpc	r25, r29
    4080:	84 f4       	brge	.+32     	; 0x40a2 <fillrect+0x52>
    4082:	ba 2c       	mov	r11, r10
	{
		for (uint8_t j=y; j<y+h; j++) 
    4084:	8b 2d       	mov	r24, r11
    4086:	90 e0       	ldi	r25, 0x00	; 0
    4088:	80 17       	cp	r24, r16
    408a:	91 07       	cpc	r25, r17
    408c:	44 f4       	brge	.+16     	; 0x409e <fillrect+0x4e>
		{
			setpixel(buff, i, j, color);
    408e:	2e 2d       	mov	r18, r14
    4090:	4b 2d       	mov	r20, r11
    4092:	6f 2d       	mov	r22, r15
    4094:	c6 01       	movw	r24, r12
    4096:	0e 94 85 1f 	call	0x3f0a	; 0x3f0a <setpixel>
void fillrect(uint8_t *buff, uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color) 
{
	// Stupidest version - just pixels - but fast with internal buffer!
	for (uint8_t i=x; i<x+w; i++) 
	{
		for (uint8_t j=y; j<y+h; j++) 
    409a:	b3 94       	inc	r11
    409c:	f3 cf       	rjmp	.-26     	; 0x4084 <fillrect+0x34>

// Filled rectangle
void fillrect(uint8_t *buff, uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color) 
{
	// Stupidest version - just pixels - but fast with internal buffer!
	for (uint8_t i=x; i<x+w; i++) 
    409e:	f3 94       	inc	r15
    40a0:	eb cf       	rjmp	.-42     	; 0x4078 <fillrect+0x28>
		for (uint8_t j=y; j<y+h; j++) 
		{
			setpixel(buff, i, j, color);
		}
	}
}
    40a2:	df 91       	pop	r29
    40a4:	cf 91       	pop	r28
    40a6:	1f 91       	pop	r17
    40a8:	0f 91       	pop	r16
    40aa:	ff 90       	pop	r15
    40ac:	ef 90       	pop	r14
    40ae:	df 90       	pop	r13
    40b0:	cf 90       	pop	r12
    40b2:	bf 90       	pop	r11
    40b4:	af 90       	pop	r10
    40b6:	08 95       	ret

000040b8 <drawrect>:

// Draw a rectangle
void drawrect(uint8_t *buff, uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color) 
{
    40b8:	9f 92       	push	r9
    40ba:	af 92       	push	r10
    40bc:	bf 92       	push	r11
    40be:	cf 92       	push	r12
    40c0:	df 92       	push	r13
    40c2:	ef 92       	push	r14
    40c4:	ff 92       	push	r15
    40c6:	0f 93       	push	r16
    40c8:	1f 93       	push	r17
    40ca:	cf 93       	push	r28
    40cc:	df 93       	push	r29
    40ce:	ec 01       	movw	r28, r24
    40d0:	f6 2e       	mov	r15, r22
    40d2:	b4 2e       	mov	r11, r20
    40d4:	92 2e       	mov	r9, r18
	// Stupidest version - just pixels - but fast with internal buffer!
	for (uint8_t i=x; i<x+w; i++) 
    40d6:	16 2f       	mov	r17, r22
    40d8:	c2 2e       	mov	r12, r18
    40da:	d1 2c       	mov	r13, r1
    40dc:	c6 0e       	add	r12, r22
    40de:	d1 1c       	adc	r13, r1
	{
		setpixel(buff, i, y, color);
		setpixel(buff, i, y+h-1, color);
    40e0:	aa 24       	eor	r10, r10
    40e2:	aa 94       	dec	r10
    40e4:	a0 0e       	add	r10, r16
    40e6:	a4 0e       	add	r10, r20

// Draw a rectangle
void drawrect(uint8_t *buff, uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color) 
{
	// Stupidest version - just pixels - but fast with internal buffer!
	for (uint8_t i=x; i<x+w; i++) 
    40e8:	81 2f       	mov	r24, r17
    40ea:	90 e0       	ldi	r25, 0x00	; 0
    40ec:	8c 15       	cp	r24, r12
    40ee:	9d 05       	cpc	r25, r13
    40f0:	74 f4       	brge	.+28     	; 0x410e <drawrect+0x56>
	{
		setpixel(buff, i, y, color);
    40f2:	2e 2d       	mov	r18, r14
    40f4:	4b 2d       	mov	r20, r11
    40f6:	61 2f       	mov	r22, r17
    40f8:	ce 01       	movw	r24, r28
    40fa:	0e 94 85 1f 	call	0x3f0a	; 0x3f0a <setpixel>
		setpixel(buff, i, y+h-1, color);
    40fe:	2e 2d       	mov	r18, r14
    4100:	4a 2d       	mov	r20, r10
    4102:	61 2f       	mov	r22, r17
    4104:	ce 01       	movw	r24, r28
    4106:	0e 94 85 1f 	call	0x3f0a	; 0x3f0a <setpixel>

// Draw a rectangle
void drawrect(uint8_t *buff, uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color) 
{
	// Stupidest version - just pixels - but fast with internal buffer!
	for (uint8_t i=x; i<x+w; i++) 
    410a:	1f 5f       	subi	r17, 0xFF	; 255
    410c:	ed cf       	rjmp	.-38     	; 0x40e8 <drawrect+0x30>
    410e:	db 2c       	mov	r13, r11
	{
		setpixel(buff, i, y, color);
		setpixel(buff, i, y+h-1, color);
	}
	for (uint8_t i=y; i<y+h; i++) 
    4110:	10 e0       	ldi	r17, 0x00	; 0
    4112:	0b 0d       	add	r16, r11
    4114:	11 1d       	adc	r17, r1
	{
		setpixel(buff, x, i, color);
		setpixel(buff, x+w-1, i, color);
    4116:	cc 24       	eor	r12, r12
    4118:	ca 94       	dec	r12
    411a:	c9 0c       	add	r12, r9
    411c:	cf 0c       	add	r12, r15
	for (uint8_t i=x; i<x+w; i++) 
	{
		setpixel(buff, i, y, color);
		setpixel(buff, i, y+h-1, color);
	}
	for (uint8_t i=y; i<y+h; i++) 
    411e:	8d 2d       	mov	r24, r13
    4120:	90 e0       	ldi	r25, 0x00	; 0
    4122:	80 17       	cp	r24, r16
    4124:	91 07       	cpc	r25, r17
    4126:	74 f4       	brge	.+28     	; 0x4144 <drawrect+0x8c>
	{
		setpixel(buff, x, i, color);
    4128:	2e 2d       	mov	r18, r14
    412a:	4d 2d       	mov	r20, r13
    412c:	6f 2d       	mov	r22, r15
    412e:	ce 01       	movw	r24, r28
    4130:	0e 94 85 1f 	call	0x3f0a	; 0x3f0a <setpixel>
		setpixel(buff, x+w-1, i, color);
    4134:	2e 2d       	mov	r18, r14
    4136:	4d 2d       	mov	r20, r13
    4138:	6c 2d       	mov	r22, r12
    413a:	ce 01       	movw	r24, r28
    413c:	0e 94 85 1f 	call	0x3f0a	; 0x3f0a <setpixel>
	for (uint8_t i=x; i<x+w; i++) 
	{
		setpixel(buff, i, y, color);
		setpixel(buff, i, y+h-1, color);
	}
	for (uint8_t i=y; i<y+h; i++) 
    4140:	d3 94       	inc	r13
    4142:	ed cf       	rjmp	.-38     	; 0x411e <drawrect+0x66>
	{
		setpixel(buff, x, i, color);
		setpixel(buff, x+w-1, i, color);
	} 
}
    4144:	df 91       	pop	r29
    4146:	cf 91       	pop	r28
    4148:	1f 91       	pop	r17
    414a:	0f 91       	pop	r16
    414c:	ff 90       	pop	r15
    414e:	ef 90       	pop	r14
    4150:	df 90       	pop	r13
    4152:	cf 90       	pop	r12
    4154:	bf 90       	pop	r11
    4156:	af 90       	pop	r10
    4158:	9f 90       	pop	r9
    415a:	08 95       	ret

0000415c <fillcircle>:

// Draw a filled circle
// Edge-clip bug fixed by D. Thompson - 3/2/2014
void fillcircle(uint8_t *buff, uint8_t x0, uint8_t y0, uint8_t r, uint8_t color) 
{
    415c:	4f 92       	push	r4
    415e:	5f 92       	push	r5
    4160:	6f 92       	push	r6
    4162:	7f 92       	push	r7
    4164:	8f 92       	push	r8
    4166:	9f 92       	push	r9
    4168:	af 92       	push	r10
    416a:	bf 92       	push	r11
    416c:	cf 92       	push	r12
    416e:	df 92       	push	r13
    4170:	ef 92       	push	r14
    4172:	ff 92       	push	r15
    4174:	0f 93       	push	r16
    4176:	1f 93       	push	r17
    4178:	cf 93       	push	r28
    417a:	df 93       	push	r29
    417c:	ec 01       	movw	r28, r24
    417e:	96 2e       	mov	r9, r22
    4180:	a4 2e       	mov	r10, r20
	int8_t f = 1 - r;
    4182:	bb 24       	eor	r11, r11
    4184:	b3 94       	inc	r11
    4186:	b2 1a       	sub	r11, r18
	int8_t ddF_x = 1;
	int8_t ddF_y = -2 * r;
    4188:	82 2e       	mov	r8, r18
    418a:	81 94       	neg	r8
    418c:	88 0c       	add	r8, r8
	int8_t x = 0;
	int8_t y = r;
    418e:	12 2f       	mov	r17, r18
	int8_t i = 0;

	for (i=y0-r; i<=y0+r; i++) 
    4190:	74 2e       	mov	r7, r20
    4192:	72 1a       	sub	r7, r18
    4194:	e4 2e       	mov	r14, r20
    4196:	f1 2c       	mov	r15, r1
    4198:	67 01       	movw	r12, r14
    419a:	c2 0e       	add	r12, r18
    419c:	d1 1c       	adc	r13, r1
    419e:	87 2d       	mov	r24, r7
    41a0:	99 27       	eor	r25, r25
    41a2:	87 fd       	sbrc	r24, 7
    41a4:	90 95       	com	r25
    41a6:	c8 16       	cp	r12, r24
    41a8:	d9 06       	cpc	r13, r25
    41aa:	44 f0       	brlt	.+16     	; 0x41bc <fillcircle+0x60>
	{
		setpixel(buff, x0, i, color);
    41ac:	20 2f       	mov	r18, r16
    41ae:	47 2d       	mov	r20, r7
    41b0:	69 2d       	mov	r22, r9
    41b2:	ce 01       	movw	r24, r28
    41b4:	0e 94 85 1f 	call	0x3f0a	; 0x3f0a <setpixel>
    41b8:	73 94       	inc	r7
    41ba:	f1 cf       	rjmp	.-30     	; 0x419e <fillcircle+0x42>
	int8_t ddF_y = -2 * r;
	int8_t x = 0;
	int8_t y = r;
	int8_t i = 0;

	for (i=y0-r; i<=y0+r; i++) 
    41bc:	71 2c       	mov	r7, r1
	{
		setpixel(buff, x0, i, color);
	}

	while (x<y) 
    41be:	71 16       	cp	r7, r17
    41c0:	0c f0       	brlt	.+2      	; 0x41c4 <fillcircle+0x68>
    41c2:	4c c0       	rjmp	.+152    	; 0x425c <fillcircle+0x100>
	{
		if (f >= 0) 
    41c4:	b7 fc       	sbrc	r11, 7
    41c6:	04 c0       	rjmp	.+8      	; 0x41d0 <fillcircle+0x74>
		{
			y--;
    41c8:	11 50       	subi	r17, 0x01	; 1
			ddF_y += 2;
    41ca:	83 94       	inc	r8
    41cc:	83 94       	inc	r8
			f += ddF_y;
    41ce:	b8 0c       	add	r11, r8
    41d0:	73 94       	inc	r7
    41d2:	87 2d       	mov	r24, r7
    41d4:	88 0f       	add	r24, r24
    41d6:	8f 5f       	subi	r24, 0xFF	; 255
		}

		x++;
		ddF_x += 2;
		f += ddF_x;
    41d8:	b8 0e       	add	r11, r24

		for (i=y0-y; i<=y0+y; i++) 
    41da:	6a 2c       	mov	r6, r10
    41dc:	61 1a       	sub	r6, r17
    41de:	67 01       	movw	r12, r14
    41e0:	c1 0e       	add	r12, r17
    41e2:	d1 1c       	adc	r13, r1
    41e4:	17 fd       	sbrc	r17, 7
    41e6:	da 94       	dec	r13
    41e8:	47 2c       	mov	r4, r7
    41ea:	49 0c       	add	r4, r9
    41ec:	59 2c       	mov	r5, r9
    41ee:	57 18       	sub	r5, r7
    41f0:	86 2d       	mov	r24, r6
    41f2:	99 27       	eor	r25, r25
    41f4:	87 fd       	sbrc	r24, 7
    41f6:	90 95       	com	r25
    41f8:	c8 16       	cp	r12, r24
    41fa:	d9 06       	cpc	r13, r25
    41fc:	74 f0       	brlt	.+28     	; 0x421a <fillcircle+0xbe>
		{
			setpixel(buff, x0+x, i, color);
    41fe:	20 2f       	mov	r18, r16
    4200:	46 2d       	mov	r20, r6
    4202:	64 2d       	mov	r22, r4
    4204:	ce 01       	movw	r24, r28
    4206:	0e 94 85 1f 	call	0x3f0a	; 0x3f0a <setpixel>
			setpixel(buff, x0-x, i, color);
    420a:	20 2f       	mov	r18, r16
    420c:	46 2d       	mov	r20, r6
    420e:	65 2d       	mov	r22, r5
    4210:	ce 01       	movw	r24, r28
    4212:	0e 94 85 1f 	call	0x3f0a	; 0x3f0a <setpixel>
    4216:	63 94       	inc	r6
    4218:	eb cf       	rjmp	.-42     	; 0x41f0 <fillcircle+0x94>
    421a:	6a 2c       	mov	r6, r10
    421c:	67 18       	sub	r6, r7
		} 
		for (i=y0-x; i<=y0+x; i++) 
    421e:	67 01       	movw	r12, r14
    4220:	c7 0c       	add	r12, r7
    4222:	d1 1c       	adc	r13, r1
    4224:	77 fc       	sbrc	r7, 7
    4226:	da 94       	dec	r13
		{
			setpixel(buff, x0+y, i, color);
    4228:	41 2e       	mov	r4, r17
    422a:	49 0c       	add	r4, r9
			setpixel(buff, x0-y, i, color);
    422c:	59 2c       	mov	r5, r9
    422e:	51 1a       	sub	r5, r17
		for (i=y0-y; i<=y0+y; i++) 
		{
			setpixel(buff, x0+x, i, color);
			setpixel(buff, x0-x, i, color);
		} 
		for (i=y0-x; i<=y0+x; i++) 
    4230:	86 2d       	mov	r24, r6
    4232:	99 27       	eor	r25, r25
    4234:	87 fd       	sbrc	r24, 7
    4236:	90 95       	com	r25
    4238:	c8 16       	cp	r12, r24
    423a:	d9 06       	cpc	r13, r25
    423c:	0c f4       	brge	.+2      	; 0x4240 <fillcircle+0xe4>
    423e:	bf cf       	rjmp	.-130    	; 0x41be <fillcircle+0x62>
		{
			setpixel(buff, x0+y, i, color);
    4240:	20 2f       	mov	r18, r16
    4242:	46 2d       	mov	r20, r6
    4244:	64 2d       	mov	r22, r4
    4246:	ce 01       	movw	r24, r28
    4248:	0e 94 85 1f 	call	0x3f0a	; 0x3f0a <setpixel>
			setpixel(buff, x0-y, i, color);
    424c:	20 2f       	mov	r18, r16
    424e:	46 2d       	mov	r20, r6
    4250:	65 2d       	mov	r22, r5
    4252:	ce 01       	movw	r24, r28
    4254:	0e 94 85 1f 	call	0x3f0a	; 0x3f0a <setpixel>
    4258:	63 94       	inc	r6
    425a:	ea cf       	rjmp	.-44     	; 0x4230 <fillcircle+0xd4>
		}    
	}
}
    425c:	df 91       	pop	r29
    425e:	cf 91       	pop	r28
    4260:	1f 91       	pop	r17
    4262:	0f 91       	pop	r16
    4264:	ff 90       	pop	r15
    4266:	ef 90       	pop	r14
    4268:	df 90       	pop	r13
    426a:	cf 90       	pop	r12
    426c:	bf 90       	pop	r11
    426e:	af 90       	pop	r10
    4270:	9f 90       	pop	r9
    4272:	8f 90       	pop	r8
    4274:	7f 90       	pop	r7
    4276:	6f 90       	pop	r6
    4278:	5f 90       	pop	r5
    427a:	4f 90       	pop	r4
    427c:	08 95       	ret

0000427e <LCD_Display_Text>:
//************************************************************

// Print Menuitem from Program memory at a particular location
void LCD_Display_Text (uint16_t menuitem, const unsigned char* font,uint16_t x, uint16_t y)
{
	gLCDprint_Menu_P((char*)pgm_read_word(&text_menu[menuitem]), font, x, y);
    427e:	88 0f       	add	r24, r24
    4280:	99 1f       	adc	r25, r25
    4282:	82 52       	subi	r24, 0x22	; 34
    4284:	92 4f       	sbci	r25, 0xF2	; 242
    4286:	fc 01       	movw	r30, r24
    4288:	85 91       	lpm	r24, Z+
    428a:	94 91       	lpm	r25, Z
}

// Print a string from RAM at a particular location in a particular font
void gLCDprint_Menu_P(const char *s, const unsigned char* font,uint16_t x, uint16_t y)
{
	pgm_mugui_lcd_puts((const unsigned char*)s, font, x, y);
    428c:	0c 94 23 3d 	jmp	0x7a46	; 0x7a46 <pgm_mugui_lcd_puts>

00004290 <gLCDprint_Menu_P>:
    4290:	0c 94 23 3d 	jmp	0x7a46	; 0x7a46 <pgm_mugui_lcd_puts>

00004294 <idle_screen>:
}

// Pop up the Idle screen
void idle_screen(void)
{
	clear_buffer(buffer);
    4294:	81 e0       	ldi	r24, 0x01	; 1
    4296:	91 e0       	ldi	r25, 0x01	; 1
    4298:	0e 94 5e 1f 	call	0x3ebc	; 0x3ebc <clear_buffer>

	// Change Status screen depending on arm mode
	LCD_Display_Text(121,(const unsigned char*)Verdana14,41,3); 	// "Press"
    429c:	23 e0       	ldi	r18, 0x03	; 3
    429e:	30 e0       	ldi	r19, 0x00	; 0
    42a0:	49 e2       	ldi	r20, 0x29	; 41
    42a2:	50 e0       	ldi	r21, 0x00	; 0
    42a4:	69 e4       	ldi	r22, 0x49	; 73
    42a6:	71 e0       	ldi	r23, 0x01	; 1
    42a8:	89 e7       	ldi	r24, 0x79	; 121
    42aa:	90 e0       	ldi	r25, 0x00	; 0
    42ac:	0e 94 3f 21 	call	0x427e	; 0x427e <LCD_Display_Text>
	LCD_Display_Text(122,(const unsigned char*)Verdana14,24,23);	// "for status."
    42b0:	27 e1       	ldi	r18, 0x17	; 23
    42b2:	30 e0       	ldi	r19, 0x00	; 0
    42b4:	48 e1       	ldi	r20, 0x18	; 24
    42b6:	50 e0       	ldi	r21, 0x00	; 0
    42b8:	69 e4       	ldi	r22, 0x49	; 73
    42ba:	71 e0       	ldi	r23, 0x01	; 1
    42bc:	8a e7       	ldi	r24, 0x7A	; 122
    42be:	90 e0       	ldi	r25, 0x00	; 0
    42c0:	0e 94 3f 21 	call	0x427e	; 0x427e <LCD_Display_Text>
	p++;
	dummy = (uint16_t)*p;
	mugui_lcd_puts(utoa(dummy,pBuffer,10),(const unsigned char*)Verdana8,105,30);
*/
	// Display most important error
	if ((General_error & (1 << LVA_ALARM)) != 0)					// Low voltage
    42c4:	80 91 20 05 	lds	r24, 0x0520
    42c8:	83 ff       	sbrs	r24, 3
    42ca:	13 c0       	rjmp	.+38     	; 0x42f2 <idle_screen+0x5e>
	{
		LCD_Display_Text(134,(const unsigned char*)Verdana14,12,43);// "Battery"
    42cc:	2b e2       	ldi	r18, 0x2B	; 43
    42ce:	30 e0       	ldi	r19, 0x00	; 0
    42d0:	4c e0       	ldi	r20, 0x0C	; 12
    42d2:	50 e0       	ldi	r21, 0x00	; 0
    42d4:	69 e4       	ldi	r22, 0x49	; 73
    42d6:	71 e0       	ldi	r23, 0x01	; 1
    42d8:	86 e8       	ldi	r24, 0x86	; 134
    42da:	90 e0       	ldi	r25, 0x00	; 0
    42dc:	0e 94 3f 21 	call	0x427e	; 0x427e <LCD_Display_Text>
		LCD_Display_Text(118,(const unsigned char*)Verdana14,80,43); // "Low"
    42e0:	2b e2       	ldi	r18, 0x2B	; 43
    42e2:	30 e0       	ldi	r19, 0x00	; 0
    42e4:	40 e5       	ldi	r20, 0x50	; 80
    42e6:	50 e0       	ldi	r21, 0x00	; 0
    42e8:	69 e4       	ldi	r22, 0x49	; 73
    42ea:	71 e0       	ldi	r23, 0x01	; 1
    42ec:	86 e7       	ldi	r24, 0x76	; 118
    42ee:	90 e0       	ldi	r25, 0x00	; 0
    42f0:	41 c0       	rjmp	.+130    	; 0x4374 <idle_screen+0xe0>
	}
	
	else if ((General_error & (1 << NO_SIGNAL)) != 0)				// No signal
    42f2:	80 91 20 05 	lds	r24, 0x0520
    42f6:	81 ff       	sbrs	r24, 1
    42f8:	13 c0       	rjmp	.+38     	; 0x4320 <idle_screen+0x8c>
	{
		LCD_Display_Text(75,(const unsigned char*)Verdana14,28,43); // "No"
    42fa:	2b e2       	ldi	r18, 0x2B	; 43
    42fc:	30 e0       	ldi	r19, 0x00	; 0
    42fe:	4c e1       	ldi	r20, 0x1C	; 28
    4300:	50 e0       	ldi	r21, 0x00	; 0
    4302:	69 e4       	ldi	r22, 0x49	; 73
    4304:	71 e0       	ldi	r23, 0x01	; 1
    4306:	8b e4       	ldi	r24, 0x4B	; 75
    4308:	90 e0       	ldi	r25, 0x00	; 0
    430a:	0e 94 3f 21 	call	0x427e	; 0x427e <LCD_Display_Text>
		LCD_Display_Text(76,(const unsigned char*)Verdana14,54,43); // "Signal"
    430e:	2b e2       	ldi	r18, 0x2B	; 43
    4310:	30 e0       	ldi	r19, 0x00	; 0
    4312:	46 e3       	ldi	r20, 0x36	; 54
    4314:	50 e0       	ldi	r21, 0x00	; 0
    4316:	69 e4       	ldi	r22, 0x49	; 73
    4318:	71 e0       	ldi	r23, 0x01	; 1
    431a:	8c e4       	ldi	r24, 0x4C	; 76
    431c:	90 e0       	ldi	r25, 0x00	; 0
    431e:	2a c0       	rjmp	.+84     	; 0x4374 <idle_screen+0xe0>
	}
	
	else if ((General_error & (1 << THROTTLE_HIGH)) != 0)			// Throttle high
    4320:	80 91 20 05 	lds	r24, 0x0520
    4324:	80 ff       	sbrs	r24, 0
    4326:	13 c0       	rjmp	.+38     	; 0x434e <idle_screen+0xba>
	{
		LCD_Display_Text(105,(const unsigned char*)Verdana14,10,43);// "Throttle"
    4328:	2b e2       	ldi	r18, 0x2B	; 43
    432a:	30 e0       	ldi	r19, 0x00	; 0
    432c:	4a e0       	ldi	r20, 0x0A	; 10
    432e:	50 e0       	ldi	r21, 0x00	; 0
    4330:	69 e4       	ldi	r22, 0x49	; 73
    4332:	71 e0       	ldi	r23, 0x01	; 1
    4334:	89 e6       	ldi	r24, 0x69	; 105
    4336:	90 e0       	ldi	r25, 0x00	; 0
    4338:	0e 94 3f 21 	call	0x427e	; 0x427e <LCD_Display_Text>
		LCD_Display_Text(55,(const unsigned char*)Verdana14,81,43);	// "High"
    433c:	2b e2       	ldi	r18, 0x2B	; 43
    433e:	30 e0       	ldi	r19, 0x00	; 0
    4340:	41 e5       	ldi	r20, 0x51	; 81
    4342:	50 e0       	ldi	r21, 0x00	; 0
    4344:	69 e4       	ldi	r22, 0x49	; 73
    4346:	71 e0       	ldi	r23, 0x01	; 1
    4348:	87 e3       	ldi	r24, 0x37	; 55
    434a:	90 e0       	ldi	r25, 0x00	; 0
    434c:	13 c0       	rjmp	.+38     	; 0x4374 <idle_screen+0xe0>
	}
	
	else if ((General_error & (1 << DISARMED)) != 0)				// Disarmed
    434e:	80 91 20 05 	lds	r24, 0x0520
	{
		LCD_Display_Text(139,(const unsigned char*)Verdana14,20,43);// "(Disarmed)"
    4352:	2b e2       	ldi	r18, 0x2B	; 43
    4354:	30 e0       	ldi	r19, 0x00	; 0
	{
		LCD_Display_Text(105,(const unsigned char*)Verdana14,10,43);// "Throttle"
		LCD_Display_Text(55,(const unsigned char*)Verdana14,81,43);	// "High"
	}
	
	else if ((General_error & (1 << DISARMED)) != 0)				// Disarmed
    4356:	82 ff       	sbrs	r24, 2
    4358:	07 c0       	rjmp	.+14     	; 0x4368 <idle_screen+0xd4>
	{
		LCD_Display_Text(139,(const unsigned char*)Verdana14,20,43);// "(Disarmed)"
    435a:	44 e1       	ldi	r20, 0x14	; 20
    435c:	50 e0       	ldi	r21, 0x00	; 0
    435e:	69 e4       	ldi	r22, 0x49	; 73
    4360:	71 e0       	ldi	r23, 0x01	; 1
    4362:	8b e8       	ldi	r24, 0x8B	; 139
    4364:	90 e0       	ldi	r25, 0x00	; 0
    4366:	06 c0       	rjmp	.+12     	; 0x4374 <idle_screen+0xe0>
	}
	else
	{
		LCD_Display_Text(138,(const unsigned char*)Verdana14,28,43);// "(Armed)"
    4368:	4c e1       	ldi	r20, 0x1C	; 28
    436a:	50 e0       	ldi	r21, 0x00	; 0
    436c:	69 e4       	ldi	r22, 0x49	; 73
    436e:	71 e0       	ldi	r23, 0x01	; 1
    4370:	8a e8       	ldi	r24, 0x8A	; 138
    4372:	90 e0       	ldi	r25, 0x00	; 0
    4374:	0e 94 3f 21 	call	0x427e	; 0x427e <LCD_Display_Text>
	}

	write_buffer(buffer);
    4378:	81 e0       	ldi	r24, 0x01	; 1
    437a:	91 e0       	ldi	r25, 0x01	; 1
    437c:	0c 94 2c 1f 	jmp	0x3e58	; 0x3e58 <write_buffer>

00004380 <get_raw_gyros>:
		gyroADC[i] *= (int8_t)pgm_read_byte(&Gyro_Pol[Config.Orientation][i]);
	}
}

void get_raw_gyros(void)
{
    4380:	cf 93       	push	r28
    4382:	df 93       	push	r29
    4384:	cd b7       	in	r28, 0x3d	; 61
    4386:	de b7       	in	r29, 0x3e	; 62
    4388:	2c 97       	sbiw	r28, 0x0c	; 12
    438a:	0f b6       	in	r0, 0x3f	; 63
    438c:	f8 94       	cli
    438e:	de bf       	out	0x3e, r29	; 62
    4390:	0f be       	out	0x3f, r0	; 63
    4392:	cd bf       	out	0x3d, r28	; 61
	uint8_t i;
	uint8_t Gyros[6];
	int16_t temp1, temp2;

	// Get the i2c data from the MPU6050
	readI2CbyteArray(MPU60X0_DEFAULT_ADDRESS,MPU60X0_RA_GYRO_XOUT_H,(uint8_t *)Gyros,6);
    4394:	26 e0       	ldi	r18, 0x06	; 6
    4396:	ae 01       	movw	r20, r28
    4398:	4f 5f       	subi	r20, 0xFF	; 255
    439a:	5f 4f       	sbci	r21, 0xFF	; 255
    439c:	63 e4       	ldi	r22, 0x43	; 67
    439e:	80 ed       	ldi	r24, 0xD0	; 208
    43a0:	0e 94 b4 23 	call	0x4768	; 0x4768 <readI2CbyteArray>

	// Reassemble data into gyroADC array and down-sample to reduce resolution and noise
	temp1 = Gyros[0] << 8;
    43a4:	89 81       	ldd	r24, Y+1	; 0x01
    43a6:	90 e0       	ldi	r25, 0x00	; 0
    43a8:	98 2f       	mov	r25, r24
    43aa:	88 27       	eor	r24, r24
	temp2 = Gyros[1];
    43ac:	2a 81       	ldd	r18, Y+2	; 0x02
	RawADC[PITCH] = (temp1 + temp2) >> GYRODIV;
    43ae:	82 0f       	add	r24, r18
    43b0:	91 1d       	adc	r25, r1
    43b2:	34 e0       	ldi	r19, 0x04	; 4
    43b4:	95 95       	asr	r25
    43b6:	87 95       	ror	r24
    43b8:	3a 95       	dec	r19
    43ba:	e1 f7       	brne	.-8      	; 0x43b4 <get_raw_gyros+0x34>
    43bc:	9a 87       	std	Y+10, r25	; 0x0a
    43be:	89 87       	std	Y+9, r24	; 0x09

	temp1 = Gyros[2] << 8;
    43c0:	8b 81       	ldd	r24, Y+3	; 0x03
    43c2:	90 e0       	ldi	r25, 0x00	; 0
    43c4:	98 2f       	mov	r25, r24
    43c6:	88 27       	eor	r24, r24
	temp2 = Gyros[3];
    43c8:	2c 81       	ldd	r18, Y+4	; 0x04
	RawADC[ROLL] = (temp1 + temp2) >> GYRODIV;
    43ca:	82 0f       	add	r24, r18
    43cc:	91 1d       	adc	r25, r1
    43ce:	54 e0       	ldi	r21, 0x04	; 4
    43d0:	95 95       	asr	r25
    43d2:	87 95       	ror	r24
    43d4:	5a 95       	dec	r21
    43d6:	e1 f7       	brne	.-8      	; 0x43d0 <get_raw_gyros+0x50>
    43d8:	98 87       	std	Y+8, r25	; 0x08
    43da:	8f 83       	std	Y+7, r24	; 0x07

	temp1 = Gyros[4] << 8;
    43dc:	8d 81       	ldd	r24, Y+5	; 0x05
    43de:	90 e0       	ldi	r25, 0x00	; 0
    43e0:	98 2f       	mov	r25, r24
    43e2:	88 27       	eor	r24, r24
	temp2 = Gyros[5];
    43e4:	2e 81       	ldd	r18, Y+6	; 0x06
	RawADC[YAW] = (temp1 + temp2) >> GYRODIV;
    43e6:	82 0f       	add	r24, r18
    43e8:	91 1d       	adc	r25, r1
    43ea:	74 e0       	ldi	r23, 0x04	; 4
    43ec:	95 95       	asr	r25
    43ee:	87 95       	ror	r24
    43f0:	7a 95       	dec	r23
    43f2:	e1 f7       	brne	.-8      	; 0x43ec <get_raw_gyros+0x6c>
    43f4:	9c 87       	std	Y+12, r25	; 0x0c
    43f6:	8b 87       	std	Y+11, r24	; 0x0b

	// Reorient the data as per the board orientation	
	for (i=0; i<NUMBEROFAXIS; i++)
	{
		// Rearrange the sensors
		gyroADC[i] 	= RawADC[(int8_t)pgm_read_byte(&Gyro_RPY_Order[Config.Orientation][i])];
    43f8:	20 91 3b 06 	lds	r18, 0x063B
    43fc:	a1 e7       	ldi	r26, 0x71	; 113
    43fe:	b5 e0       	ldi	r27, 0x05	; 5
    4400:	43 e0       	ldi	r20, 0x03	; 3
    4402:	24 02       	muls	r18, r20
    4404:	90 01       	movw	r18, r0
    4406:	11 24       	eor	r1, r1
    4408:	80 e0       	ldi	r24, 0x00	; 0
    440a:	90 e0       	ldi	r25, 0x00	; 0
    440c:	2f 53       	subi	r18, 0x3F	; 63
    440e:	38 4e       	sbci	r19, 0xE8	; 232
    4410:	f9 01       	movw	r30, r18
    4412:	e8 0f       	add	r30, r24
    4414:	f9 1f       	adc	r31, r25
    4416:	e4 91       	lpm	r30, Z
    4418:	ee 0f       	add	r30, r30
    441a:	ff 0b       	sbc	r31, r31
    441c:	41 e0       	ldi	r20, 0x01	; 1
    441e:	50 e0       	ldi	r21, 0x00	; 0
    4420:	4c 0f       	add	r20, r28
    4422:	5d 1f       	adc	r21, r29
    4424:	e4 0f       	add	r30, r20
    4426:	f5 1f       	adc	r31, r21
    4428:	46 81       	ldd	r20, Z+6	; 0x06
    442a:	57 81       	ldd	r21, Z+7	; 0x07
    442c:	4d 93       	st	X+, r20
    442e:	5d 93       	st	X+, r21
    4430:	01 96       	adiw	r24, 0x01	; 1
	temp1 = Gyros[4] << 8;
	temp2 = Gyros[5];
	RawADC[YAW] = (temp1 + temp2) >> GYRODIV;

	// Reorient the data as per the board orientation	
	for (i=0; i<NUMBEROFAXIS; i++)
    4432:	83 30       	cpi	r24, 0x03	; 3
    4434:	91 05       	cpc	r25, r1
    4436:	61 f7       	brne	.-40     	; 0x4410 <get_raw_gyros+0x90>
	{
		// Rearrange the sensors
		gyroADC[i] 	= RawADC[(int8_t)pgm_read_byte(&Gyro_RPY_Order[Config.Orientation][i])];
	}
}
    4438:	2c 96       	adiw	r28, 0x0c	; 12
    443a:	0f b6       	in	r0, 0x3f	; 63
    443c:	f8 94       	cli
    443e:	de bf       	out	0x3e, r29	; 62
    4440:	0f be       	out	0x3f, r0	; 63
    4442:	cd bf       	out	0x3d, r28	; 61
    4444:	df 91       	pop	r29
    4446:	cf 91       	pop	r28
    4448:	08 95       	ret

0000444a <ReadGyros>:
//************************************************************

int16_t gyroADC[NUMBEROFAXIS];			// Holds Gyro ADCs

void ReadGyros(void)					// Conventional orientation
{
    444a:	1f 93       	push	r17
    444c:	cf 93       	push	r28
    444e:	df 93       	push	r29
	uint8_t i;

	get_raw_gyros();					// Updates gyroADC[]
    4450:	0e 94 c0 21 	call	0x4380	; 0x4380 <get_raw_gyros>
	{
		// Remove offsets from gyro outputs
		gyroADC[i] -= Config.gyroZero[i];

		// Change polarity
		gyroADC[i] *= (int8_t)pgm_read_byte(&Gyro_Pol[Config.Orientation][i]);
    4454:	20 91 3b 06 	lds	r18, 0x063B
    4458:	c9 ea       	ldi	r28, 0xA9	; 169
    445a:	d7 e0       	ldi	r29, 0x07	; 7
    445c:	a1 e7       	ldi	r26, 0x71	; 113
    445e:	b5 e0       	ldi	r27, 0x05	; 5
    4460:	83 e0       	ldi	r24, 0x03	; 3
    4462:	28 02       	muls	r18, r24
    4464:	90 01       	movw	r18, r0
    4466:	11 24       	eor	r1, r1
    4468:	80 e0       	ldi	r24, 0x00	; 0
    446a:	90 e0       	ldi	r25, 0x00	; 0
    446c:	21 55       	subi	r18, 0x51	; 81
    446e:	38 4e       	sbci	r19, 0xE8	; 232
	get_raw_gyros();					// Updates gyroADC[]

	for (i=0; i<NUMBEROFAXIS; i++)	
	{
		// Remove offsets from gyro outputs
		gyroADC[i] -= Config.gyroZero[i];
    4470:	69 91       	ld	r22, Y+
    4472:	79 91       	ld	r23, Y+
    4474:	f9 01       	movw	r30, r18
    4476:	e8 0f       	add	r30, r24
    4478:	f9 1f       	adc	r31, r25

		// Change polarity
		gyroADC[i] *= (int8_t)pgm_read_byte(&Gyro_Pol[Config.Orientation][i]);
    447a:	14 91       	lpm	r17, Z
	get_raw_gyros();					// Updates gyroADC[]

	for (i=0; i<NUMBEROFAXIS; i++)	
	{
		// Remove offsets from gyro outputs
		gyroADC[i] -= Config.gyroZero[i];
    447c:	4d 91       	ld	r20, X+
    447e:	5c 91       	ld	r21, X
    4480:	11 97       	sbiw	r26, 0x01	; 1
    4482:	46 1b       	sub	r20, r22
    4484:	57 0b       	sbc	r21, r23

		// Change polarity
		gyroADC[i] *= (int8_t)pgm_read_byte(&Gyro_Pol[Config.Orientation][i]);
    4486:	14 03       	mulsu	r17, r20
    4488:	b0 01       	movw	r22, r0
    448a:	15 9f       	mul	r17, r21
    448c:	70 0d       	add	r23, r0
    448e:	11 24       	eor	r1, r1
    4490:	6d 93       	st	X+, r22
    4492:	7d 93       	st	X+, r23
    4494:	01 96       	adiw	r24, 0x01	; 1
{
	uint8_t i;

	get_raw_gyros();					// Updates gyroADC[]

	for (i=0; i<NUMBEROFAXIS; i++)	
    4496:	83 30       	cpi	r24, 0x03	; 3
    4498:	91 05       	cpc	r25, r1
    449a:	51 f7       	brne	.-44     	; 0x4470 <ReadGyros+0x26>
		gyroADC[i] -= Config.gyroZero[i];

		// Change polarity
		gyroADC[i] *= (int8_t)pgm_read_byte(&Gyro_Pol[Config.Orientation][i]);
	}
}
    449c:	df 91       	pop	r29
    449e:	cf 91       	pop	r28
    44a0:	1f 91       	pop	r17
    44a2:	08 95       	ret

000044a4 <CalibrateGyrosFast>:
//***************************************************************
// Calibration routines
//***************************************************************

void CalibrateGyrosFast(void)
{
    44a4:	cf 93       	push	r28
	uint8_t i;

	// Clear gyro zeros
	memset(&Config.gyroZero[ROLL],0,(sizeof(int16_t) * NUMBEROFAXIS));
    44a6:	86 e0       	ldi	r24, 0x06	; 6
    44a8:	e9 ea       	ldi	r30, 0xA9	; 169
    44aa:	f7 e0       	ldi	r31, 0x07	; 7
    44ac:	df 01       	movw	r26, r30
    44ae:	1d 92       	st	X+, r1
    44b0:	8a 95       	dec	r24
    44b2:	e9 f7       	brne	.-6      	; 0x44ae <CalibrateGyrosFast+0xa>
    44b4:	c0 e2       	ldi	r28, 0x20	; 32

	// Calculate average over 32 reads
	for (i=0; i<32; i++)
	{
		get_raw_gyros();				// Updates gyroADC[]
    44b6:	0e 94 c0 21 	call	0x4380	; 0x4380 <get_raw_gyros>

		Config.gyroZero[ROLL] 	+= gyroADC[ROLL];						
    44ba:	40 91 a9 07 	lds	r20, 0x07A9
    44be:	50 91 aa 07 	lds	r21, 0x07AA
    44c2:	80 91 71 05 	lds	r24, 0x0571
    44c6:	90 91 72 05 	lds	r25, 0x0572
    44ca:	48 0f       	add	r20, r24
    44cc:	59 1f       	adc	r21, r25
    44ce:	50 93 aa 07 	sts	0x07AA, r21
    44d2:	40 93 a9 07 	sts	0x07A9, r20
		Config.gyroZero[PITCH] 	+= gyroADC[PITCH];	
    44d6:	20 91 ab 07 	lds	r18, 0x07AB
    44da:	30 91 ac 07 	lds	r19, 0x07AC
    44de:	80 91 73 05 	lds	r24, 0x0573
    44e2:	90 91 74 05 	lds	r25, 0x0574
    44e6:	28 0f       	add	r18, r24
    44e8:	39 1f       	adc	r19, r25
    44ea:	30 93 ac 07 	sts	0x07AC, r19
    44ee:	20 93 ab 07 	sts	0x07AB, r18
		Config.gyroZero[YAW] 	+= gyroADC[YAW];
    44f2:	80 91 ad 07 	lds	r24, 0x07AD
    44f6:	90 91 ae 07 	lds	r25, 0x07AE
    44fa:	60 91 75 05 	lds	r22, 0x0575
    44fe:	70 91 76 05 	lds	r23, 0x0576
    4502:	86 0f       	add	r24, r22
    4504:	97 1f       	adc	r25, r23
    4506:	90 93 ae 07 	sts	0x07AE, r25
    450a:	80 93 ad 07 	sts	0x07AD, r24
    450e:	c1 50       	subi	r28, 0x01	; 1

	// Clear gyro zeros
	memset(&Config.gyroZero[ROLL],0,(sizeof(int16_t) * NUMBEROFAXIS));

	// Calculate average over 32 reads
	for (i=0; i<32; i++)
    4510:	91 f6       	brne	.-92     	; 0x44b6 <CalibrateGyrosFast+0x12>
	}

	// Average readings for all axis
	for (i=0; i<NUMBEROFAXIS; i++)
	{
		Config.gyroZero[i] 	= (Config.gyroZero[i] >> 5);	// Divide by 32	
    4512:	e5 e0       	ldi	r30, 0x05	; 5
    4514:	55 95       	asr	r21
    4516:	47 95       	ror	r20
    4518:	ea 95       	dec	r30
    451a:	e1 f7       	brne	.-8      	; 0x4514 <CalibrateGyrosFast+0x70>
    451c:	50 93 aa 07 	sts	0x07AA, r21
    4520:	40 93 a9 07 	sts	0x07A9, r20
    4524:	f5 e0       	ldi	r31, 0x05	; 5
    4526:	35 95       	asr	r19
    4528:	27 95       	ror	r18
    452a:	fa 95       	dec	r31
    452c:	e1 f7       	brne	.-8      	; 0x4526 <CalibrateGyrosFast+0x82>
    452e:	30 93 ac 07 	sts	0x07AC, r19
    4532:	20 93 ab 07 	sts	0x07AB, r18
    4536:	a5 e0       	ldi	r26, 0x05	; 5
    4538:	95 95       	asr	r25
    453a:	87 95       	ror	r24
    453c:	aa 95       	dec	r26
    453e:	e1 f7       	brne	.-8      	; 0x4538 <CalibrateGyrosFast+0x94>
    4540:	90 93 ae 07 	sts	0x07AE, r25
    4544:	80 93 ad 07 	sts	0x07AD, r24
	}

	Save_Config_to_EEPROM();
}
    4548:	cf 91       	pop	r28
	for (i=0; i<NUMBEROFAXIS; i++)
	{
		Config.gyroZero[i] 	= (Config.gyroZero[i] >> 5);	// Divide by 32	
	}

	Save_Config_to_EEPROM();
    454a:	0c 94 9c 16 	jmp	0x2d38	; 0x2d38 <Save_Config_to_EEPROM>

0000454e <CalibrateGyrosSlow>:
}

bool CalibrateGyrosSlow(void)
{
    454e:	2f 92       	push	r2
    4550:	3f 92       	push	r3
    4552:	4f 92       	push	r4
    4554:	5f 92       	push	r5
    4556:	6f 92       	push	r6
    4558:	7f 92       	push	r7
    455a:	8f 92       	push	r8
    455c:	9f 92       	push	r9
    455e:	af 92       	push	r10
    4560:	bf 92       	push	r11
    4562:	cf 92       	push	r12
    4564:	df 92       	push	r13
    4566:	ef 92       	push	r14
    4568:	ff 92       	push	r15
    456a:	0f 93       	push	r16
    456c:	1f 93       	push	r17
    456e:	cf 93       	push	r28
    4570:	df 93       	push	r29
    4572:	cd b7       	in	r28, 0x3d	; 61
    4574:	de b7       	in	r29, 0x3e	; 62
    4576:	65 97       	sbiw	r28, 0x15	; 21
    4578:	0f b6       	in	r0, 0x3f	; 63
    457a:	f8 94       	cli
    457c:	de bf       	out	0x3e, r29	; 62
    457e:	0f be       	out	0x3f, r0	; 63
    4580:	cd bf       	out	0x3d, r28	; 61
	float 		GyroSmooth[NUMBEROFAXIS];
	int16_t		GyroOld[NUMBEROFAXIS] = {0,0,0};
    4582:	1e 86       	std	Y+14, r1	; 0x0e
    4584:	1d 86       	std	Y+13, r1	; 0x0d
    4586:	18 8a       	std	Y+16, r1	; 0x10
    4588:	1f 86       	std	Y+15, r1	; 0x0f
    458a:	1a 8a       	std	Y+18, r1	; 0x12
    458c:	19 8a       	std	Y+17, r1	; 0x11
	uint8_t		Gyro_TCNT2 = 0;
	bool		Gyros_Stable = false;

	// Populate Config.gyroZero[] with ballpark figures
	// This makes slow calibrate on much faster
	CalibrateGyrosFast();	
    458e:	0e 94 52 22 	call	0x44a4	; 0x44a4 <CalibrateGyrosFast>
	
	// Optimise starting point for each board
	for (axis = 0; axis < NUMBEROFAXIS; axis++)
	{
		GyroSmooth[axis] = Config.gyroZero[axis];			
    4592:	60 91 a9 07 	lds	r22, 0x07A9
    4596:	70 91 aa 07 	lds	r23, 0x07AA
    459a:	88 27       	eor	r24, r24
    459c:	77 fd       	sbrc	r23, 7
    459e:	80 95       	com	r24
    45a0:	98 2f       	mov	r25, r24
    45a2:	0e 94 db 45 	call	0x8bb6	; 0x8bb6 <__floatsisf>
    45a6:	69 83       	std	Y+1, r22	; 0x01
    45a8:	7a 83       	std	Y+2, r23	; 0x02
    45aa:	8b 83       	std	Y+3, r24	; 0x03
    45ac:	9c 83       	std	Y+4, r25	; 0x04
    45ae:	60 91 ab 07 	lds	r22, 0x07AB
    45b2:	70 91 ac 07 	lds	r23, 0x07AC
    45b6:	88 27       	eor	r24, r24
    45b8:	77 fd       	sbrc	r23, 7
    45ba:	80 95       	com	r24
    45bc:	98 2f       	mov	r25, r24
    45be:	0e 94 db 45 	call	0x8bb6	; 0x8bb6 <__floatsisf>
    45c2:	6d 83       	std	Y+5, r22	; 0x05
    45c4:	7e 83       	std	Y+6, r23	; 0x06
    45c6:	8f 83       	std	Y+7, r24	; 0x07
    45c8:	98 87       	std	Y+8, r25	; 0x08
    45ca:	60 91 ad 07 	lds	r22, 0x07AD
    45ce:	70 91 ae 07 	lds	r23, 0x07AE
    45d2:	88 27       	eor	r24, r24
    45d4:	77 fd       	sbrc	r23, 7
    45d6:	80 95       	com	r24
    45d8:	98 2f       	mov	r25, r24
    45da:	0e 94 db 45 	call	0x8bb6	; 0x8bb6 <__floatsisf>
    45de:	69 87       	std	Y+9, r22	; 0x09
    45e0:	7a 87       	std	Y+10, r23	; 0x0a
    45e2:	8b 87       	std	Y+11, r24	; 0x0b
    45e4:	9c 87       	std	Y+12, r25	; 0x0c
    45e6:	1d 8a       	std	Y+21, r1	; 0x15
    45e8:	1b 8a       	std	Y+19, r1	; 0x13
    45ea:	e1 2c       	mov	r14, r1
    45ec:	f1 2c       	mov	r15, r1
    45ee:	00 e0       	ldi	r16, 0x00	; 0
    45f0:	10 e0       	ldi	r17, 0x00	; 0
	
	// Wait until gyros stable. Timeout after CAL_TIMEOUT seconds
	while (!Gyros_Stable && ((Gyro_seconds <= CAL_TIMEOUT)))
	{
		// Update status timeout
		Gyro_timeout += (uint8_t)(TCNT2 - Gyro_TCNT2);
    45f2:	80 91 b2 00 	lds	r24, 0x00B2
    45f6:	9d 89       	ldd	r25, Y+21	; 0x15
    45f8:	89 1b       	sub	r24, r25
    45fa:	e8 0e       	add	r14, r24
    45fc:	f1 1c       	adc	r15, r1
		Gyro_TCNT2 = TCNT2;
    45fe:	e0 91 b2 00 	lds	r30, 0x00B2
    4602:	ed 8b       	std	Y+21, r30	; 0x15

		// Count elapsed seconds
		if (Gyro_timeout > SECOND_TIMER)
    4604:	fc e4       	ldi	r31, 0x4C	; 76
    4606:	ef 16       	cp	r14, r31
    4608:	ff 06       	cpc	r15, r31
    460a:	28 f0       	brcs	.+10     	; 0x4616 <CalibrateGyrosSlow+0xc8>
		{
			Gyro_seconds++;
    460c:	8b 89       	ldd	r24, Y+19	; 0x13
    460e:	8f 5f       	subi	r24, 0xFF	; 255
    4610:	8b 8b       	std	Y+19, r24	; 0x13
			Gyro_timeout = 0;
    4612:	e1 2c       	mov	r14, r1
    4614:	f1 2c       	mov	r15, r1
		}

		get_raw_gyros();
    4616:	0e 94 c0 21 	call	0x4380	; 0x4380 <get_raw_gyros>
    461a:	fe 01       	movw	r30, r28
    461c:	31 96       	adiw	r30, 0x01	; 1
    461e:	6f 01       	movw	r12, r30
    4620:	b1 e7       	ldi	r27, 0x71	; 113
    4622:	2b 2e       	mov	r2, r27
    4624:	b5 e0       	ldi	r27, 0x05	; 5
    4626:	3b 2e       	mov	r3, r27
    4628:	ce 01       	movw	r24, r28
    462a:	0d 96       	adiw	r24, 0x0d	; 13
    462c:	5c 01       	movw	r10, r24

		// Calculate very long rolling average
		for (axis = 0; axis < NUMBEROFAXIS; axis++) 
    462e:	1c 8a       	std	Y+20, r1	; 0x14
		{
			GyroSmooth[axis] = ((GyroSmooth[axis] * (float)999) + (float)(gyroADC[axis])) / (float)1000;
    4630:	f1 01       	movw	r30, r2
    4632:	81 90       	ld	r8, Z+
    4634:	91 90       	ld	r9, Z+
    4636:	1f 01       	movw	r2, r30
    4638:	20 e0       	ldi	r18, 0x00	; 0
    463a:	30 ec       	ldi	r19, 0xC0	; 192
    463c:	49 e7       	ldi	r20, 0x79	; 121
    463e:	54 e4       	ldi	r21, 0x44	; 68
    4640:	f6 01       	movw	r30, r12
    4642:	60 81       	ld	r22, Z
    4644:	71 81       	ldd	r23, Z+1	; 0x01
    4646:	82 81       	ldd	r24, Z+2	; 0x02
    4648:	93 81       	ldd	r25, Z+3	; 0x03
    464a:	0e 94 8f 46 	call	0x8d1e	; 0x8d1e <__mulsf3>
    464e:	2b 01       	movw	r4, r22
    4650:	3c 01       	movw	r6, r24
    4652:	b4 01       	movw	r22, r8
    4654:	88 27       	eor	r24, r24
    4656:	77 fd       	sbrc	r23, 7
    4658:	80 95       	com	r24
    465a:	98 2f       	mov	r25, r24
    465c:	0e 94 db 45 	call	0x8bb6	; 0x8bb6 <__floatsisf>
    4660:	9b 01       	movw	r18, r22
    4662:	ac 01       	movw	r20, r24
    4664:	c3 01       	movw	r24, r6
    4666:	b2 01       	movw	r22, r4
    4668:	0e 94 d8 44 	call	0x89b0	; 0x89b0 <__addsf3>
    466c:	20 e0       	ldi	r18, 0x00	; 0
    466e:	30 e0       	ldi	r19, 0x00	; 0
    4670:	4a e7       	ldi	r20, 0x7A	; 122
    4672:	54 e4       	ldi	r21, 0x44	; 68
    4674:	0e 94 40 45 	call	0x8a80	; 0x8a80 <__divsf3>
    4678:	f6 01       	movw	r30, r12
    467a:	60 83       	st	Z, r22
    467c:	71 83       	std	Z+1, r23	; 0x01
    467e:	82 83       	std	Z+2, r24	; 0x02
    4680:	93 83       	std	Z+3, r25	; 0x03
			
			// See if changing
			if (GyroOld[axis] != (int16_t)GyroSmooth[axis])
    4682:	0e 94 a8 45 	call	0x8b50	; 0x8b50 <__fixsfsi>
    4686:	f5 01       	movw	r30, r10
    4688:	20 81       	ld	r18, Z
    468a:	31 81       	ldd	r19, Z+1	; 0x01
    468c:	26 17       	cp	r18, r22
    468e:	37 07       	cpc	r19, r23
    4690:	11 f0       	breq	.+4      	; 0x4696 <CalibrateGyrosSlow+0x148>
			{
				Gyros_Stable = false;
				Stable_counter = 0;
    4692:	00 e0       	ldi	r16, 0x00	; 0
    4694:	10 e0       	ldi	r17, 0x00	; 0
			}
		
			// Save old reading
			GyroOld[axis] = (int16_t)GyroSmooth[axis];
    4696:	f5 01       	movw	r30, r10
    4698:	61 93       	st	Z+, r22
    469a:	71 93       	st	Z+, r23
    469c:	5f 01       	movw	r10, r30
		}

		get_raw_gyros();

		// Calculate very long rolling average
		for (axis = 0; axis < NUMBEROFAXIS; axis++) 
    469e:	fc 89       	ldd	r31, Y+20	; 0x14
    46a0:	ff 5f       	subi	r31, 0xFF	; 255
    46a2:	fc 8b       	std	Y+20, r31	; 0x14
    46a4:	84 e0       	ldi	r24, 0x04	; 4
    46a6:	c8 0e       	add	r12, r24
    46a8:	d1 1c       	adc	r13, r1
    46aa:	f3 30       	cpi	r31, 0x03	; 3
    46ac:	09 f6       	brne	.-126    	; 0x4630 <CalibrateGyrosSlow+0xe2>
			// Save old reading
			GyroOld[axis] = (int16_t)GyroSmooth[axis];
		}
		
		// Increment stable counter to measure how long we are still
		Stable_counter++;
    46ae:	0f 5f       	subi	r16, 0xFF	; 255
    46b0:	1f 4f       	sbci	r17, 0xFF	; 255
		
		// If stable for 5 seconds, do a quick calibrate
		if (Stable_counter > CAL_STABLE_TIME)
    46b2:	09 3c       	cpi	r16, 0xC9	; 201
    46b4:	11 05       	cpc	r17, r1
    46b6:	20 f0       	brcs	.+8      	; 0x46c0 <CalibrateGyrosSlow+0x172>
		{
			Gyros_Stable = true;	
			CalibrateGyrosFast();		
    46b8:	0e 94 52 22 	call	0x44a4	; 0x44a4 <CalibrateGyrosFast>
		Stable_counter++;
		
		// If stable for 5 seconds, do a quick calibrate
		if (Stable_counter > CAL_STABLE_TIME)
		{
			Gyros_Stable = true;	
    46bc:	81 e0       	ldi	r24, 0x01	; 1
    46be:	01 c0       	rjmp	.+2      	; 0x46c2 <CalibrateGyrosSlow+0x174>
    46c0:	80 e0       	ldi	r24, 0x00	; 0
    46c2:	e7 e8       	ldi	r30, 0x87	; 135
    46c4:	f3 e1       	ldi	r31, 0x13	; 19
    46c6:	31 97       	sbiw	r30, 0x01	; 1
    46c8:	f1 f7       	brne	.-4      	; 0x46c6 <CalibrateGyrosSlow+0x178>
    46ca:	00 c0       	rjmp	.+0      	; 0x46cc <CalibrateGyrosSlow+0x17e>
    46cc:	00 00       	nop
	{
		GyroSmooth[axis] = Config.gyroZero[axis];			
	}
	
	// Wait until gyros stable. Timeout after CAL_TIMEOUT seconds
	while (!Gyros_Stable && ((Gyro_seconds <= CAL_TIMEOUT)))
    46ce:	81 11       	cpse	r24, r1
    46d0:	04 c0       	rjmp	.+8      	; 0x46da <CalibrateGyrosSlow+0x18c>
    46d2:	fb 89       	ldd	r31, Y+19	; 0x13
    46d4:	f6 30       	cpi	r31, 0x06	; 6
    46d6:	08 f4       	brcc	.+2      	; 0x46da <CalibrateGyrosSlow+0x18c>
    46d8:	8c cf       	rjmp	.-232    	; 0x45f2 <CalibrateGyrosSlow+0xa4>
		// Otherwise the original saved values are used
	}
	
	// Return success or failure
	return(Gyros_Stable);
}
    46da:	65 96       	adiw	r28, 0x15	; 21
    46dc:	0f b6       	in	r0, 0x3f	; 63
    46de:	f8 94       	cli
    46e0:	de bf       	out	0x3e, r29	; 62
    46e2:	0f be       	out	0x3f, r0	; 63
    46e4:	cd bf       	out	0x3d, r28	; 61
    46e6:	df 91       	pop	r29
    46e8:	cf 91       	pop	r28
    46ea:	1f 91       	pop	r17
    46ec:	0f 91       	pop	r16
    46ee:	ff 90       	pop	r15
    46f0:	ef 90       	pop	r14
    46f2:	df 90       	pop	r13
    46f4:	cf 90       	pop	r12
    46f6:	bf 90       	pop	r11
    46f8:	af 90       	pop	r10
    46fa:	9f 90       	pop	r9
    46fc:	8f 90       	pop	r8
    46fe:	7f 90       	pop	r7
    4700:	6f 90       	pop	r6
    4702:	5f 90       	pop	r5
    4704:	4f 90       	pop	r4
    4706:	3f 90       	pop	r3
    4708:	2f 90       	pop	r2
    470a:	08 95       	ret

0000470c <init_i2c_gyros>:
//***************************************************************

void init_i2c_gyros(void)
{
	// First, configure the MPU6050
	writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_PWR_MGMT_1, 0x01); 			// Gyro X clock, awake
    470c:	41 e0       	ldi	r20, 0x01	; 1
    470e:	6b e6       	ldi	r22, 0x6B	; 107
    4710:	80 ed       	ldi	r24, 0xD0	; 208
    4712:	0e 94 9d 23 	call	0x473a	; 0x473a <writeI2Cbyte>
	
	// Make INT pin open-drain so that we can connect it straight to the MPU
	writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_INT_PIN_CFG, 0x40);			// INT output is open-drain
    4716:	40 e4       	ldi	r20, 0x40	; 64
    4718:	67 e3       	ldi	r22, 0x37	; 55
    471a:	80 ed       	ldi	r24, 0xD0	; 208
    471c:	0e 94 9d 23 	call	0x473a	; 0x473a <writeI2Cbyte>
	
	// MPU6050's internal LPF. Values are 0x06 = 5Hz, (5)10Hz, (4)21Hz, (3)44Hz, (2)94Hz, (1)184Hz LPF, (0)260Hz
	// Software's values are 0 to 6 = 5Hz to 260Hz, so numbering is reversed here.
	writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_CONFIG, (6 - Config.MPU6050_LPF));
    4720:	46 e0       	ldi	r20, 0x06	; 6
    4722:	80 91 44 06 	lds	r24, 0x0644
    4726:	48 1b       	sub	r20, r24
    4728:	6a e1       	ldi	r22, 0x1A	; 26
    472a:	80 ed       	ldi	r24, 0xD0	; 208
    472c:	0e 94 9d 23 	call	0x473a	; 0x473a <writeI2Cbyte>
	
	// Now configure gyros
	writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_GYRO_CONFIG, GYROFS2000DEG);	// 2000 deg/sec
    4730:	48 e1       	ldi	r20, 0x18	; 24
    4732:	6b e1       	ldi	r22, 0x1B	; 27
    4734:	80 ed       	ldi	r24, 0xD0	; 208
    4736:	0c 94 9d 23 	jmp	0x473a	; 0x473a <writeI2Cbyte>

0000473a <writeI2Cbyte>:
//************************************************************
// Code
//************************************************************

void writeI2Cbyte(uint8_t address, uint8_t location, uint8_t value)
{
    473a:	cf 93       	push	r28
    473c:	df 93       	push	r29
    473e:	00 d0       	rcall	.+0      	; 0x4740 <writeI2Cbyte+0x6>
    4740:	cd b7       	in	r28, 0x3d	; 61
    4742:	de b7       	in	r29, 0x3e	; 62
    i2c_start_wait(address+I2C_WRITE);				// Set up device address 
    4744:	4a 83       	std	Y+2, r20	; 0x02
    4746:	69 83       	std	Y+1, r22	; 0x01
    4748:	0e 94 b6 43 	call	0x876c	; 0x876c <i2c_start_wait>
    i2c_write(location);							// Set up register address 
    474c:	69 81       	ldd	r22, Y+1	; 0x01
    474e:	86 2f       	mov	r24, r22
    4750:	0e 94 06 44 	call	0x880c	; 0x880c <i2c_write>
    i2c_write(value); 								// Write byte
    4754:	4a 81       	ldd	r20, Y+2	; 0x02
    4756:	84 2f       	mov	r24, r20
    4758:	0e 94 06 44 	call	0x880c	; 0x880c <i2c_write>
    i2c_stop();
}
    475c:	0f 90       	pop	r0
    475e:	0f 90       	pop	r0
    4760:	df 91       	pop	r29
    4762:	cf 91       	pop	r28
void writeI2Cbyte(uint8_t address, uint8_t location, uint8_t value)
{
    i2c_start_wait(address+I2C_WRITE);				// Set up device address 
    i2c_write(location);							// Set up register address 
    i2c_write(value); 								// Write byte
    i2c_stop();
    4764:	0c 94 f7 43 	jmp	0x87ee	; 0x87ee <i2c_stop>

00004768 <readI2CbyteArray>:
}

void readI2CbyteArray(uint8_t address, uint8_t location, uint8_t *array,uint8_t size)
{
    4768:	cf 92       	push	r12
    476a:	df 92       	push	r13
    476c:	ef 92       	push	r14
    476e:	ff 92       	push	r15
    4770:	0f 93       	push	r16
    4772:	1f 93       	push	r17
    4774:	cf 93       	push	r28
    4776:	df 93       	push	r29
    4778:	00 d0       	rcall	.+0      	; 0x477a <readI2CbyteArray+0x12>
    477a:	1f 92       	push	r1
    477c:	cd b7       	in	r28, 0x3d	; 61
    477e:	de b7       	in	r29, 0x3e	; 62
    4780:	18 2f       	mov	r17, r24
    4782:	e2 2e       	mov	r14, r18
	int i=0;

    i2c_start_wait(address+I2C_WRITE);
    4784:	4a 83       	std	Y+2, r20	; 0x02
    4786:	5b 83       	std	Y+3, r21	; 0x03
    4788:	69 83       	std	Y+1, r22	; 0x01
    478a:	0e 94 b6 43 	call	0x876c	; 0x876c <i2c_start_wait>
    i2c_write(location);							// Set up register address 
    478e:	69 81       	ldd	r22, Y+1	; 0x01
    4790:	86 2f       	mov	r24, r22
    4792:	0e 94 06 44 	call	0x880c	; 0x880c <i2c_write>
    i2c_rep_start(address+I2C_READ);
    4796:	81 e0       	ldi	r24, 0x01	; 1
    4798:	81 0f       	add	r24, r17
    479a:	0e 94 f5 43 	call	0x87ea	; 0x87ea <i2c_rep_start>
    479e:	4a 81       	ldd	r20, Y+2	; 0x02
    47a0:	c4 2e       	mov	r12, r20
    47a2:	5b 81       	ldd	r21, Y+3	; 0x03
    47a4:	d5 2e       	mov	r13, r21
    i2c_stop();
}

void readI2CbyteArray(uint8_t address, uint8_t location, uint8_t *array,uint8_t size)
{
	int i=0;
    47a6:	00 e0       	ldi	r16, 0x00	; 0
    47a8:	10 e0       	ldi	r17, 0x00	; 0

    i2c_start_wait(address+I2C_WRITE);
    i2c_write(location);							// Set up register address 
    i2c_rep_start(address+I2C_READ);

	while (i < size)
    47aa:	f1 2c       	mov	r15, r1
    47ac:	0e 15       	cp	r16, r14
    47ae:	1f 05       	cpc	r17, r15
    47b0:	84 f4       	brge	.+32     	; 0x47d2 <readI2CbyteArray+0x6a>
	{
		if ((i+1)!=size)
    47b2:	0f 5f       	subi	r16, 0xFF	; 255
    47b4:	1f 4f       	sbci	r17, 0xFF	; 255
    47b6:	0e 15       	cp	r16, r14
    47b8:	1f 05       	cpc	r17, r15
    47ba:	19 f0       	breq	.+6      	; 0x47c2 <readI2CbyteArray+0x5a>
		{
			array[i]=i2c_readAck();
    47bc:	0e 94 26 44 	call	0x884c	; 0x884c <i2c_readAck>
    47c0:	02 c0       	rjmp	.+4      	; 0x47c6 <readI2CbyteArray+0x5e>
		}
		else
		{
			array[i]=i2c_readNak(); 				// Read without ACK on last byte
    47c2:	0e 94 3f 44 	call	0x887e	; 0x887e <i2c_readNak>
    47c6:	f6 01       	movw	r30, r12
    47c8:	80 83       	st	Z, r24
    47ca:	ff ef       	ldi	r31, 0xFF	; 255
    47cc:	cf 1a       	sub	r12, r31
    47ce:	df 0a       	sbc	r13, r31
    47d0:	ed cf       	rjmp	.-38     	; 0x47ac <readI2CbyteArray+0x44>
		}
		i++;
	}

    i2c_stop();
}
    47d2:	0f 90       	pop	r0
    47d4:	0f 90       	pop	r0
    47d6:	0f 90       	pop	r0
    47d8:	df 91       	pop	r29
    47da:	cf 91       	pop	r28
    47dc:	1f 91       	pop	r17
    47de:	0f 91       	pop	r16
    47e0:	ff 90       	pop	r15
    47e2:	ef 90       	pop	r14
    47e4:	df 90       	pop	r13
    47e6:	cf 90       	pop	r12
			array[i]=i2c_readNak(); 				// Read without ACK on last byte
		}
		i++;
	}

    i2c_stop();
    47e8:	0c 94 f7 43 	jmp	0x87ee	; 0x87ee <i2c_stop>

000047ec <RotateVector>:
	VectorX = VectorNewA;
	VectorY = VectorNewB;
}

void RotateVector(float angle)
{
    47ec:	4f 92       	push	r4
    47ee:	5f 92       	push	r5
    47f0:	6f 92       	push	r6
    47f2:	7f 92       	push	r7
    47f4:	8f 92       	push	r8
    47f6:	9f 92       	push	r9
    47f8:	af 92       	push	r10
    47fa:	bf 92       	push	r11
    47fc:	cf 92       	push	r12
    47fe:	df 92       	push	r13
    4800:	ef 92       	push	r14
    4802:	ff 92       	push	r15
    4804:	cf 93       	push	r28
    4806:	df 93       	push	r29
    4808:	cd b7       	in	r28, 0x3d	; 61
    480a:	de b7       	in	r29, 0x3e	; 62
    480c:	28 97       	sbiw	r28, 0x08	; 8
    480e:	0f b6       	in	r0, 0x3f	; 63
    4810:	f8 94       	cli
    4812:	de bf       	out	0x3e, r29	; 62
    4814:	0f be       	out	0x3f, r0	; 63
    4816:	cd bf       	out	0x3d, r28	; 61
    4818:	6b 01       	movw	r12, r22
    481a:	7c 01       	movw	r14, r24
	VectorNewA = VectorA * small_cos(angle) - VectorB * small_sine(angle);
    481c:	80 90 ab 05 	lds	r8, 0x05AB
    4820:	90 90 ac 05 	lds	r9, 0x05AC
    4824:	a0 90 ad 05 	lds	r10, 0x05AD
    4828:	b0 90 ae 05 	lds	r11, 0x05AE
float small_cos(float angle)
{
	// cos(angle) = (1 - (angle^2 / 2))
	float temp;
	
	temp = (angle * angle) / 2;
    482c:	9b 01       	movw	r18, r22
    482e:	ac 01       	movw	r20, r24
    4830:	0e 94 8f 46 	call	0x8d1e	; 0x8d1e <__mulsf3>
    4834:	20 e0       	ldi	r18, 0x00	; 0
    4836:	30 e0       	ldi	r19, 0x00	; 0
    4838:	40 e0       	ldi	r20, 0x00	; 0
    483a:	5f e3       	ldi	r21, 0x3F	; 63
    483c:	0e 94 8f 46 	call	0x8d1e	; 0x8d1e <__mulsf3>
    4840:	9b 01       	movw	r18, r22
    4842:	ac 01       	movw	r20, r24
	temp = 1 - temp;
    4844:	60 e0       	ldi	r22, 0x00	; 0
    4846:	70 e0       	ldi	r23, 0x00	; 0
    4848:	80 e8       	ldi	r24, 0x80	; 128
    484a:	9f e3       	ldi	r25, 0x3F	; 63
    484c:	0e 94 d7 44 	call	0x89ae	; 0x89ae <__subsf3>
    4850:	69 83       	std	Y+1, r22	; 0x01
    4852:	7a 83       	std	Y+2, r23	; 0x02
    4854:	8b 83       	std	Y+3, r24	; 0x03
    4856:	9c 83       	std	Y+4, r25	; 0x04
	VectorY = VectorNewB;
}

void RotateVector(float angle)
{
	VectorNewA = VectorA * small_cos(angle) - VectorB * small_sine(angle);
    4858:	40 90 af 05 	lds	r4, 0x05AF
    485c:	50 90 b0 05 	lds	r5, 0x05B0
    4860:	60 90 b1 05 	lds	r6, 0x05B1
    4864:	70 90 b2 05 	lds	r7, 0x05B2
    4868:	9b 01       	movw	r18, r22
    486a:	ac 01       	movw	r20, r24
    486c:	c5 01       	movw	r24, r10
    486e:	b4 01       	movw	r22, r8
    4870:	0e 94 8f 46 	call	0x8d1e	; 0x8d1e <__mulsf3>
    4874:	6d 83       	std	Y+5, r22	; 0x05
    4876:	7e 83       	std	Y+6, r23	; 0x06
    4878:	8f 83       	std	Y+7, r24	; 0x07
    487a:	98 87       	std	Y+8, r25	; 0x08
    487c:	a7 01       	movw	r20, r14
    487e:	96 01       	movw	r18, r12
    4880:	c3 01       	movw	r24, r6
    4882:	b2 01       	movw	r22, r4
    4884:	0e 94 8f 46 	call	0x8d1e	; 0x8d1e <__mulsf3>
    4888:	9b 01       	movw	r18, r22
    488a:	ac 01       	movw	r20, r24
    488c:	6d 81       	ldd	r22, Y+5	; 0x05
    488e:	7e 81       	ldd	r23, Y+6	; 0x06
    4890:	8f 81       	ldd	r24, Y+7	; 0x07
    4892:	98 85       	ldd	r25, Y+8	; 0x08
    4894:	0e 94 d7 44 	call	0x89ae	; 0x89ae <__subsf3>
    4898:	60 93 97 05 	sts	0x0597, r22
    489c:	70 93 98 05 	sts	0x0598, r23
    48a0:	80 93 99 05 	sts	0x0599, r24
    48a4:	90 93 9a 05 	sts	0x059A, r25
	VectorNewB = VectorA * small_sine(angle) + VectorB * small_cos(angle);
    48a8:	a7 01       	movw	r20, r14
    48aa:	96 01       	movw	r18, r12
    48ac:	c5 01       	movw	r24, r10
    48ae:	b4 01       	movw	r22, r8
    48b0:	0e 94 8f 46 	call	0x8d1e	; 0x8d1e <__mulsf3>
    48b4:	6b 01       	movw	r12, r22
    48b6:	7c 01       	movw	r14, r24
    48b8:	29 81       	ldd	r18, Y+1	; 0x01
    48ba:	3a 81       	ldd	r19, Y+2	; 0x02
    48bc:	4b 81       	ldd	r20, Y+3	; 0x03
    48be:	5c 81       	ldd	r21, Y+4	; 0x04
    48c0:	c3 01       	movw	r24, r6
    48c2:	b2 01       	movw	r22, r4
    48c4:	0e 94 8f 46 	call	0x8d1e	; 0x8d1e <__mulsf3>
    48c8:	9b 01       	movw	r18, r22
    48ca:	ac 01       	movw	r20, r24
    48cc:	c7 01       	movw	r24, r14
    48ce:	b6 01       	movw	r22, r12
    48d0:	0e 94 d8 44 	call	0x89b0	; 0x89b0 <__addsf3>
    48d4:	60 93 77 05 	sts	0x0577, r22
    48d8:	70 93 78 05 	sts	0x0578, r23
    48dc:	80 93 79 05 	sts	0x0579, r24
    48e0:	90 93 7a 05 	sts	0x057A, r25
}
    48e4:	28 96       	adiw	r28, 0x08	; 8
    48e6:	0f b6       	in	r0, 0x3f	; 63
    48e8:	f8 94       	cli
    48ea:	de bf       	out	0x3e, r29	; 62
    48ec:	0f be       	out	0x3f, r0	; 63
    48ee:	cd bf       	out	0x3d, r28	; 61
    48f0:	df 91       	pop	r29
    48f2:	cf 91       	pop	r28
    48f4:	ff 90       	pop	r15
    48f6:	ef 90       	pop	r14
    48f8:	df 90       	pop	r13
    48fa:	cf 90       	pop	r12
    48fc:	bf 90       	pop	r11
    48fe:	af 90       	pop	r10
    4900:	9f 90       	pop	r9
    4902:	8f 90       	pop	r8
    4904:	7f 90       	pop	r7
    4906:	6f 90       	pop	r6
    4908:	5f 90       	pop	r5
    490a:	4f 90       	pop	r4
    490c:	08 95       	ret

0000490e <thetascale>:

void thetascale(float gyro, float interval)
{
    490e:	cf 92       	push	r12
    4910:	df 92       	push	r13
    4912:	ef 92       	push	r14
    4914:	ff 92       	push	r15
    4916:	69 01       	movw	r12, r18
    4918:	7a 01       	movw	r14, r20
	// interval = time in seconds since last measurement
	// GYROSENSRADIANS = conversion from raw gyro data to rad/s
	// theta = actual number of radians moved

	theta = (gyro * GYROSENSRADIANS * interval);
    491a:	25 ef       	ldi	r18, 0xF5	; 245
    491c:	31 ea       	ldi	r19, 0xA1	; 161
    491e:	4b e8       	ldi	r20, 0x8B	; 139
    4920:	5c e3       	ldi	r21, 0x3C	; 60
    4922:	0e 94 8f 46 	call	0x8d1e	; 0x8d1e <__mulsf3>
    4926:	a7 01       	movw	r20, r14
    4928:	96 01       	movw	r18, r12
    492a:	0e 94 8f 46 	call	0x8d1e	; 0x8d1e <__mulsf3>
    492e:	6b 01       	movw	r12, r22
    4930:	7c 01       	movw	r14, r24
	
	// The sin() and cos() functions don't appreciate large 
	// input values. Limit the input values to +/-15 degrees. 
	
	if (theta > maxdeltaangle)
    4932:	26 ea       	ldi	r18, 0xA6	; 166
    4934:	3a e0       	ldi	r19, 0x0A	; 10
    4936:	46 e8       	ldi	r20, 0x86	; 134
    4938:	5e e3       	ldi	r21, 0x3E	; 62
    493a:	0e 94 8b 46 	call	0x8d16	; 0x8d16 <__gesf2>
    493e:	18 16       	cp	r1, r24
    4940:	4c f0       	brlt	.+18     	; 0x4954 <thetascale+0x46>
{
	// interval = time in seconds since last measurement
	// GYROSENSRADIANS = conversion from raw gyro data to rad/s
	// theta = actual number of radians moved

	theta = (gyro * GYROSENSRADIANS * interval);
    4942:	c0 92 8b 05 	sts	0x058B, r12
    4946:	d0 92 8c 05 	sts	0x058C, r13
    494a:	e0 92 8d 05 	sts	0x058D, r14
    494e:	f0 92 8e 05 	sts	0x058E, r15
    4952:	0c c0       	rjmp	.+24     	; 0x496c <thetascale+0x5e>
	// The sin() and cos() functions don't appreciate large 
	// input values. Limit the input values to +/-15 degrees. 
	
	if (theta > maxdeltaangle)
	{
		theta = maxdeltaangle;
    4954:	86 ea       	ldi	r24, 0xA6	; 166
    4956:	9a e0       	ldi	r25, 0x0A	; 10
    4958:	a6 e8       	ldi	r26, 0x86	; 134
    495a:	be e3       	ldi	r27, 0x3E	; 62
    495c:	80 93 8b 05 	sts	0x058B, r24
    4960:	90 93 8c 05 	sts	0x058C, r25
    4964:	a0 93 8d 05 	sts	0x058D, r26
    4968:	b0 93 8e 05 	sts	0x058E, r27
	}
	
	if (theta < -maxdeltaangle)
    496c:	26 ea       	ldi	r18, 0xA6	; 166
    496e:	3a e0       	ldi	r19, 0x0A	; 10
    4970:	46 e8       	ldi	r20, 0x86	; 134
    4972:	5e eb       	ldi	r21, 0xBE	; 190
    4974:	60 91 8b 05 	lds	r22, 0x058B
    4978:	70 91 8c 05 	lds	r23, 0x058C
    497c:	80 91 8d 05 	lds	r24, 0x058D
    4980:	90 91 8e 05 	lds	r25, 0x058E
    4984:	0e 94 3c 45 	call	0x8a78	; 0x8a78 <__cmpsf2>
    4988:	87 ff       	sbrs	r24, 7
    498a:	0c c0       	rjmp	.+24     	; 0x49a4 <thetascale+0x96>
	{
		theta = -maxdeltaangle;
    498c:	86 ea       	ldi	r24, 0xA6	; 166
    498e:	9a e0       	ldi	r25, 0x0A	; 10
    4990:	a6 e8       	ldi	r26, 0x86	; 134
    4992:	be eb       	ldi	r27, 0xBE	; 190
    4994:	80 93 8b 05 	sts	0x058B, r24
    4998:	90 93 8c 05 	sts	0x058C, r25
    499c:	a0 93 8d 05 	sts	0x058D, r26
    49a0:	b0 93 8e 05 	sts	0x058E, r27
	}
}
    49a4:	ff 90       	pop	r15
    49a6:	ef 90       	pop	r14
    49a8:	df 90       	pop	r13
    49aa:	cf 90       	pop	r12
    49ac:	08 95       	ret

000049ae <Rotate3dVector>:
	angle[ROLL] = (int16_t)(EulerAngleRoll * -100);
	angle[PITCH] = (int16_t)(EulerAnglePitch * -100);
}

void Rotate3dVector(void)
{
    49ae:	cf 93       	push	r28
    49b0:	df 93       	push	r29
    49b2:	00 d0       	rcall	.+0      	; 0x49b4 <Rotate3dVector+0x6>
    49b4:	00 d0       	rcall	.+0      	; 0x49b6 <Rotate3dVector+0x8>
    49b6:	cd b7       	in	r28, 0x3d	; 61
    49b8:	de b7       	in	r29, 0x3e	; 62
	// Rotate around X axis (pitch)
	thetascale(GyroPitchVC, interval);
    49ba:	20 91 5d 05 	lds	r18, 0x055D
    49be:	30 91 5e 05 	lds	r19, 0x055E
    49c2:	40 91 5f 05 	lds	r20, 0x055F
    49c6:	50 91 60 05 	lds	r21, 0x0560
    49ca:	60 91 87 05 	lds	r22, 0x0587
    49ce:	70 91 88 05 	lds	r23, 0x0588
    49d2:	80 91 89 05 	lds	r24, 0x0589
    49d6:	90 91 8a 05 	lds	r25, 0x058A
    49da:	0e 94 87 24 	call	0x490e	; 0x490e <thetascale>
	VectorA = VectorY;
    49de:	80 91 26 05 	lds	r24, 0x0526
    49e2:	90 91 27 05 	lds	r25, 0x0527
    49e6:	a0 91 28 05 	lds	r26, 0x0528
    49ea:	b0 91 29 05 	lds	r27, 0x0529
    49ee:	80 93 ab 05 	sts	0x05AB, r24
    49f2:	90 93 ac 05 	sts	0x05AC, r25
    49f6:	a0 93 ad 05 	sts	0x05AD, r26
    49fa:	b0 93 ae 05 	sts	0x05AE, r27
	VectorB = VectorZ;
    49fe:	80 91 01 05 	lds	r24, 0x0501
    4a02:	90 91 02 05 	lds	r25, 0x0502
    4a06:	a0 91 03 05 	lds	r26, 0x0503
    4a0a:	b0 91 04 05 	lds	r27, 0x0504
    4a0e:	80 93 af 05 	sts	0x05AF, r24
    4a12:	90 93 b0 05 	sts	0x05B0, r25
    4a16:	a0 93 b1 05 	sts	0x05B1, r26
    4a1a:	b0 93 b2 05 	sts	0x05B2, r27
	RotateVector(theta);
    4a1e:	60 91 8b 05 	lds	r22, 0x058B
    4a22:	70 91 8c 05 	lds	r23, 0x058C
    4a26:	80 91 8d 05 	lds	r24, 0x058D
    4a2a:	90 91 8e 05 	lds	r25, 0x058E
    4a2e:	0e 94 f6 23 	call	0x47ec	; 0x47ec <RotateVector>
	VectorY = VectorNewA;
    4a32:	80 91 97 05 	lds	r24, 0x0597
    4a36:	90 91 98 05 	lds	r25, 0x0598
    4a3a:	a0 91 99 05 	lds	r26, 0x0599
    4a3e:	b0 91 9a 05 	lds	r27, 0x059A
    4a42:	80 93 26 05 	sts	0x0526, r24
    4a46:	90 93 27 05 	sts	0x0527, r25
    4a4a:	a0 93 28 05 	sts	0x0528, r26
    4a4e:	b0 93 29 05 	sts	0x0529, r27
	VectorZ = VectorNewB;
    4a52:	80 91 77 05 	lds	r24, 0x0577
    4a56:	90 91 78 05 	lds	r25, 0x0578
    4a5a:	a0 91 79 05 	lds	r26, 0x0579
    4a5e:	b0 91 7a 05 	lds	r27, 0x057A
    4a62:	80 93 01 05 	sts	0x0501, r24
    4a66:	90 93 02 05 	sts	0x0502, r25
    4a6a:	a0 93 03 05 	sts	0x0503, r26
    4a6e:	b0 93 04 05 	sts	0x0504, r27

	// Rotate around Y axis (roll)
	thetascale (GyroRollVC, interval);
    4a72:	20 91 5d 05 	lds	r18, 0x055D
    4a76:	30 91 5e 05 	lds	r19, 0x055E
    4a7a:	40 91 5f 05 	lds	r20, 0x055F
    4a7e:	50 91 60 05 	lds	r21, 0x0560
    4a82:	60 91 8f 05 	lds	r22, 0x058F
    4a86:	70 91 90 05 	lds	r23, 0x0590
    4a8a:	80 91 91 05 	lds	r24, 0x0591
    4a8e:	90 91 92 05 	lds	r25, 0x0592
    4a92:	0e 94 87 24 	call	0x490e	; 0x490e <thetascale>
	VectorA = VectorX;
    4a96:	80 91 2a 05 	lds	r24, 0x052A
    4a9a:	90 91 2b 05 	lds	r25, 0x052B
    4a9e:	a0 91 2c 05 	lds	r26, 0x052C
    4aa2:	b0 91 2d 05 	lds	r27, 0x052D
    4aa6:	80 93 ab 05 	sts	0x05AB, r24
    4aaa:	90 93 ac 05 	sts	0x05AC, r25
    4aae:	a0 93 ad 05 	sts	0x05AD, r26
    4ab2:	b0 93 ae 05 	sts	0x05AE, r27
	VectorB = VectorZ;
    4ab6:	80 91 01 05 	lds	r24, 0x0501
    4aba:	90 91 02 05 	lds	r25, 0x0502
    4abe:	a0 91 03 05 	lds	r26, 0x0503
    4ac2:	b0 91 04 05 	lds	r27, 0x0504
    4ac6:	80 93 af 05 	sts	0x05AF, r24
    4aca:	90 93 b0 05 	sts	0x05B0, r25
    4ace:	a0 93 b1 05 	sts	0x05B1, r26
    4ad2:	b0 93 b2 05 	sts	0x05B2, r27
	RotateVector(theta);
    4ad6:	60 91 8b 05 	lds	r22, 0x058B
    4ada:	70 91 8c 05 	lds	r23, 0x058C
    4ade:	80 91 8d 05 	lds	r24, 0x058D
    4ae2:	90 91 8e 05 	lds	r25, 0x058E
    4ae6:	0e 94 f6 23 	call	0x47ec	; 0x47ec <RotateVector>
	VectorX = VectorNewA;
    4aea:	80 91 97 05 	lds	r24, 0x0597
    4aee:	90 91 98 05 	lds	r25, 0x0598
    4af2:	a0 91 99 05 	lds	r26, 0x0599
    4af6:	b0 91 9a 05 	lds	r27, 0x059A
    4afa:	80 93 2a 05 	sts	0x052A, r24
    4afe:	90 93 2b 05 	sts	0x052B, r25
    4b02:	a0 93 2c 05 	sts	0x052C, r26
    4b06:	b0 93 2d 05 	sts	0x052D, r27
	VectorZ = VectorNewB;
    4b0a:	80 91 77 05 	lds	r24, 0x0577
    4b0e:	90 91 78 05 	lds	r25, 0x0578
    4b12:	a0 91 79 05 	lds	r26, 0x0579
    4b16:	b0 91 7a 05 	lds	r27, 0x057A
    4b1a:	80 93 01 05 	sts	0x0501, r24
    4b1e:	90 93 02 05 	sts	0x0502, r25
    4b22:	a0 93 03 05 	sts	0x0503, r26
    4b26:	b0 93 04 05 	sts	0x0504, r27

	// Rotate around Z axis (yaw)
	thetascale(gyroADC[YAW], interval);
    4b2a:	20 91 5d 05 	lds	r18, 0x055D
    4b2e:	30 91 5e 05 	lds	r19, 0x055E
    4b32:	40 91 5f 05 	lds	r20, 0x055F
    4b36:	50 91 60 05 	lds	r21, 0x0560
    4b3a:	60 91 75 05 	lds	r22, 0x0575
    4b3e:	70 91 76 05 	lds	r23, 0x0576
    4b42:	88 27       	eor	r24, r24
    4b44:	77 fd       	sbrc	r23, 7
    4b46:	80 95       	com	r24
    4b48:	98 2f       	mov	r25, r24
    4b4a:	29 83       	std	Y+1, r18	; 0x01
    4b4c:	3a 83       	std	Y+2, r19	; 0x02
    4b4e:	4b 83       	std	Y+3, r20	; 0x03
    4b50:	5c 83       	std	Y+4, r21	; 0x04
    4b52:	0e 94 db 45 	call	0x8bb6	; 0x8bb6 <__floatsisf>
    4b56:	29 81       	ldd	r18, Y+1	; 0x01
    4b58:	3a 81       	ldd	r19, Y+2	; 0x02
    4b5a:	4b 81       	ldd	r20, Y+3	; 0x03
    4b5c:	5c 81       	ldd	r21, Y+4	; 0x04
    4b5e:	0e 94 87 24 	call	0x490e	; 0x490e <thetascale>
	VectorA = VectorX;
    4b62:	80 91 2a 05 	lds	r24, 0x052A
    4b66:	90 91 2b 05 	lds	r25, 0x052B
    4b6a:	a0 91 2c 05 	lds	r26, 0x052C
    4b6e:	b0 91 2d 05 	lds	r27, 0x052D
    4b72:	80 93 ab 05 	sts	0x05AB, r24
    4b76:	90 93 ac 05 	sts	0x05AC, r25
    4b7a:	a0 93 ad 05 	sts	0x05AD, r26
    4b7e:	b0 93 ae 05 	sts	0x05AE, r27
	VectorB = VectorY;
    4b82:	80 91 26 05 	lds	r24, 0x0526
    4b86:	90 91 27 05 	lds	r25, 0x0527
    4b8a:	a0 91 28 05 	lds	r26, 0x0528
    4b8e:	b0 91 29 05 	lds	r27, 0x0529
    4b92:	80 93 af 05 	sts	0x05AF, r24
    4b96:	90 93 b0 05 	sts	0x05B0, r25
    4b9a:	a0 93 b1 05 	sts	0x05B1, r26
    4b9e:	b0 93 b2 05 	sts	0x05B2, r27
	RotateVector(theta);
    4ba2:	60 91 8b 05 	lds	r22, 0x058B
    4ba6:	70 91 8c 05 	lds	r23, 0x058C
    4baa:	80 91 8d 05 	lds	r24, 0x058D
    4bae:	90 91 8e 05 	lds	r25, 0x058E
    4bb2:	0e 94 f6 23 	call	0x47ec	; 0x47ec <RotateVector>
	VectorX = VectorNewA;
    4bb6:	80 91 97 05 	lds	r24, 0x0597
    4bba:	90 91 98 05 	lds	r25, 0x0598
    4bbe:	a0 91 99 05 	lds	r26, 0x0599
    4bc2:	b0 91 9a 05 	lds	r27, 0x059A
    4bc6:	80 93 2a 05 	sts	0x052A, r24
    4bca:	90 93 2b 05 	sts	0x052B, r25
    4bce:	a0 93 2c 05 	sts	0x052C, r26
    4bd2:	b0 93 2d 05 	sts	0x052D, r27
	VectorY = VectorNewB;
    4bd6:	80 91 77 05 	lds	r24, 0x0577
    4bda:	90 91 78 05 	lds	r25, 0x0578
    4bde:	a0 91 79 05 	lds	r26, 0x0579
    4be2:	b0 91 7a 05 	lds	r27, 0x057A
    4be6:	80 93 26 05 	sts	0x0526, r24
    4bea:	90 93 27 05 	sts	0x0527, r25
    4bee:	a0 93 28 05 	sts	0x0528, r26
    4bf2:	b0 93 29 05 	sts	0x0529, r27
}
    4bf6:	0f 90       	pop	r0
    4bf8:	0f 90       	pop	r0
    4bfa:	0f 90       	pop	r0
    4bfc:	0f 90       	pop	r0
    4bfe:	df 91       	pop	r29
    4c00:	cf 91       	pop	r28
    4c02:	08 95       	ret

00004c04 <ext2>:
	EulerAngleRoll = ext2(VectorX);
	EulerAnglePitch = ext2(VectorY);
}

float ext2(float Vector)
{
    4c04:	cf 92       	push	r12
    4c06:	df 92       	push	r13
    4c08:	ef 92       	push	r14
    4c0a:	ff 92       	push	r15
	float temp;
	
	// Rough translation to Euler angles
	temp = Vector * 90;
    4c0c:	20 e0       	ldi	r18, 0x00	; 0
    4c0e:	30 e0       	ldi	r19, 0x00	; 0
    4c10:	44 eb       	ldi	r20, 0xB4	; 180
    4c12:	52 e4       	ldi	r21, 0x42	; 66
    4c14:	0e 94 8f 46 	call	0x8d1e	; 0x8d1e <__mulsf3>
    4c18:	6b 01       	movw	r12, r22
    4c1a:	7c 01       	movw	r14, r24

	// Change 0-90-0 to 0-90-180 so that
	// swap happens at 100% inverted
	if (VectorZ < 0)
    4c1c:	20 e0       	ldi	r18, 0x00	; 0
    4c1e:	30 e0       	ldi	r19, 0x00	; 0
    4c20:	a9 01       	movw	r20, r18
    4c22:	60 91 01 05 	lds	r22, 0x0501
    4c26:	70 91 02 05 	lds	r23, 0x0502
    4c2a:	80 91 03 05 	lds	r24, 0x0503
    4c2e:	90 91 04 05 	lds	r25, 0x0504
    4c32:	0e 94 3c 45 	call	0x8a78	; 0x8a78 <__cmpsf2>
    4c36:	87 ff       	sbrs	r24, 7
    4c38:	18 c0       	rjmp	.+48     	; 0x4c6a <ext2+0x66>
	{
		// CW rotations
		if (temp > 0)
    4c3a:	20 e0       	ldi	r18, 0x00	; 0
    4c3c:	30 e0       	ldi	r19, 0x00	; 0
    4c3e:	a9 01       	movw	r20, r18
    4c40:	c7 01       	movw	r24, r14
    4c42:	b6 01       	movw	r22, r12
    4c44:	0e 94 8b 46 	call	0x8d16	; 0x8d16 <__gesf2>
		{
			temp = 180 - temp;
    4c48:	a7 01       	movw	r20, r14
    4c4a:	96 01       	movw	r18, r12
	// Change 0-90-0 to 0-90-180 so that
	// swap happens at 100% inverted
	if (VectorZ < 0)
	{
		// CW rotations
		if (temp > 0)
    4c4c:	18 16       	cp	r1, r24
    4c4e:	2c f4       	brge	.+10     	; 0x4c5a <ext2+0x56>
		{
			temp = 180 - temp;
    4c50:	60 e0       	ldi	r22, 0x00	; 0
    4c52:	70 e0       	ldi	r23, 0x00	; 0
    4c54:	84 e3       	ldi	r24, 0x34	; 52
    4c56:	93 e4       	ldi	r25, 0x43	; 67
    4c58:	04 c0       	rjmp	.+8      	; 0x4c62 <ext2+0x5e>
		}
		// CCW rotations
		else
		{
			temp = -180 - temp;
    4c5a:	60 e0       	ldi	r22, 0x00	; 0
    4c5c:	70 e0       	ldi	r23, 0x00	; 0
    4c5e:	84 e3       	ldi	r24, 0x34	; 52
    4c60:	93 ec       	ldi	r25, 0xC3	; 195
    4c62:	0e 94 d7 44 	call	0x89ae	; 0x89ae <__subsf3>
    4c66:	6b 01       	movw	r12, r22
    4c68:	7c 01       	movw	r14, r24
		}
	}

	return (temp);
}
    4c6a:	c7 01       	movw	r24, r14
    4c6c:	b6 01       	movw	r22, r12
    4c6e:	ff 90       	pop	r15
    4c70:	ef 90       	pop	r14
    4c72:	df 90       	pop	r13
    4c74:	cf 90       	pop	r12
    4c76:	08 95       	ret

00004c78 <ExtractEulerAngles>:
	return temp;
}

void ExtractEulerAngles(void)
{
	EulerAngleRoll = ext2(VectorX);
    4c78:	60 91 2a 05 	lds	r22, 0x052A
    4c7c:	70 91 2b 05 	lds	r23, 0x052B
    4c80:	80 91 2c 05 	lds	r24, 0x052C
    4c84:	90 91 2d 05 	lds	r25, 0x052D
    4c88:	0e 94 02 26 	call	0x4c04	; 0x4c04 <ext2>
    4c8c:	60 93 a7 05 	sts	0x05A7, r22
    4c90:	70 93 a8 05 	sts	0x05A8, r23
    4c94:	80 93 a9 05 	sts	0x05A9, r24
    4c98:	90 93 aa 05 	sts	0x05AA, r25
	EulerAnglePitch = ext2(VectorY);
    4c9c:	60 91 26 05 	lds	r22, 0x0526
    4ca0:	70 91 27 05 	lds	r23, 0x0527
    4ca4:	80 91 28 05 	lds	r24, 0x0528
    4ca8:	90 91 29 05 	lds	r25, 0x0529
    4cac:	0e 94 02 26 	call	0x4c04	; 0x4c04 <ext2>
    4cb0:	60 93 7b 05 	sts	0x057B, r22
    4cb4:	70 93 7c 05 	sts	0x057C, r23
    4cb8:	80 93 7d 05 	sts	0x057D, r24
    4cbc:	90 93 7e 05 	sts	0x057E, r25
    4cc0:	08 95       	ret

00004cc2 <simple_imu_update>:
//		* = swapped axis
//
//************************************************************

void simple_imu_update(uint32_t period)
{
    4cc2:	4f 92       	push	r4
    4cc4:	5f 92       	push	r5
    4cc6:	6f 92       	push	r6
    4cc8:	7f 92       	push	r7
    4cca:	8f 92       	push	r8
    4ccc:	9f 92       	push	r9
    4cce:	af 92       	push	r10
    4cd0:	bf 92       	push	r11
    4cd2:	cf 92       	push	r12
    4cd4:	df 92       	push	r13
    4cd6:	ef 92       	push	r14
    4cd8:	ff 92       	push	r15
    4cda:	0f 93       	push	r16
    4cdc:	1f 93       	push	r17
    4cde:	cf 93       	push	r28
    4ce0:	df 93       	push	r29
    4ce2:	cd b7       	in	r28, 0x3d	; 61
    4ce4:	de b7       	in	r29, 0x3e	; 62
    4ce6:	28 97       	sbiw	r28, 0x08	; 8
    4ce8:	0f b6       	in	r0, 0x3f	; 63
    4cea:	f8 94       	cli
    4cec:	de bf       	out	0x3e, r29	; 62
    4cee:	0f be       	out	0x3f, r0	; 63
    4cf0:	cd bf       	out	0x3d, r28	; 61
	uint32_t	roll_sq, pitch_sq, yaw_sq;
	uint32_t 	AccMag = 0;
		
	// Work out interval in seconds
	// Convert (period) from units of 400ns (1/2500000) to seconds (1s/400ns = 2500000)
	tempf = period;						// Promote int16_t to float
    4cf2:	0e 94 d9 45 	call	0x8bb2	; 0x8bb2 <__floatunsisf>
	interval = tempf/2500000.0f;		// This gives the period in seconds
    4cf6:	20 e8       	ldi	r18, 0x80	; 128
    4cf8:	36 e9       	ldi	r19, 0x96	; 150
    4cfa:	48 e1       	ldi	r20, 0x18	; 24
    4cfc:	5a e4       	ldi	r21, 0x4A	; 74
    4cfe:	0e 94 40 45 	call	0x8a80	; 0x8a80 <__divsf3>
    4d02:	60 93 5d 05 	sts	0x055D, r22
    4d06:	70 93 5e 05 	sts	0x055E, r23
    4d0a:	80 93 5f 05 	sts	0x055F, r24
    4d0e:	90 93 60 05 	sts	0x0560, r25

	tempf = pgm_read_byte(&LPF_lookup[Config.Acc_LPF]); // Lookup actual LPF value and promote
    4d12:	60 91 41 06 	lds	r22, 0x0641
    4d16:	e6 2f       	mov	r30, r22
    4d18:	ff 27       	eor	r31, r31
    4d1a:	e7 fd       	sbrc	r30, 7
    4d1c:	f0 95       	com	r31
    4d1e:	ed 52       	subi	r30, 0x2D	; 45
    4d20:	f8 4e       	sbci	r31, 0xE8	; 232
    4d22:	64 91       	lpm	r22, Z
    4d24:	70 e0       	ldi	r23, 0x00	; 0
    4d26:	80 e0       	ldi	r24, 0x00	; 0
    4d28:	90 e0       	ldi	r25, 0x00	; 0
    4d2a:	0e 94 d9 45 	call	0x8bb2	; 0x8bb2 <__floatunsisf>
    4d2e:	6b 01       	movw	r12, r22
    4d30:	7c 01       	movw	r14, r24
    4d32:	0e e3       	ldi	r16, 0x3E	; 62
    4d34:	15 e0       	ldi	r17, 0x05	; 5
    4d36:	8b e9       	ldi	r24, 0x9B	; 155
    4d38:	68 2e       	mov	r6, r24
    4d3a:	85 e0       	ldi	r24, 0x05	; 5
    4d3c:	78 2e       	mov	r7, r24
	
	// Smooth Acc signals - note that accSmooth is in [ROLL, PITCH, YAW] order
	for (axis = 0; axis < NUMBEROFAXIS; axis++)
	{
		accADCf = accADC[axis]; // Promote
    4d3e:	d8 01       	movw	r26, r16
    4d40:	6d 91       	ld	r22, X+
    4d42:	7d 91       	ld	r23, X+
    4d44:	8d 01       	movw	r16, r26
    4d46:	88 27       	eor	r24, r24
    4d48:	77 fd       	sbrc	r23, 7
    4d4a:	80 95       	com	r24
    4d4c:	98 2f       	mov	r25, r24
    4d4e:	0e 94 db 45 	call	0x8bb6	; 0x8bb6 <__floatsisf>
    4d52:	4b 01       	movw	r8, r22
    4d54:	5c 01       	movw	r10, r24
		
		// Acc LPF
		if (tempf > 1)
    4d56:	20 e0       	ldi	r18, 0x00	; 0
    4d58:	30 e0       	ldi	r19, 0x00	; 0
    4d5a:	40 e8       	ldi	r20, 0x80	; 128
    4d5c:	5f e3       	ldi	r21, 0x3F	; 63
    4d5e:	c7 01       	movw	r24, r14
    4d60:	b6 01       	movw	r22, r12
    4d62:	0e 94 8b 46 	call	0x8d16	; 0x8d16 <__gesf2>
    4d66:	18 16       	cp	r1, r24
    4d68:	f4 f4       	brge	.+60     	; 0x4da6 <simple_imu_update+0xe4>
		{
			// Acc LPF
			accSmooth[axis] = (accSmooth[axis] * (tempf - 1.0f) - accADCf) / tempf;
    4d6a:	20 e0       	ldi	r18, 0x00	; 0
    4d6c:	30 e0       	ldi	r19, 0x00	; 0
    4d6e:	40 e8       	ldi	r20, 0x80	; 128
    4d70:	5f e3       	ldi	r21, 0x3F	; 63
    4d72:	c7 01       	movw	r24, r14
    4d74:	b6 01       	movw	r22, r12
    4d76:	0e 94 d7 44 	call	0x89ae	; 0x89ae <__subsf3>
    4d7a:	f3 01       	movw	r30, r6
    4d7c:	20 81       	ld	r18, Z
    4d7e:	31 81       	ldd	r19, Z+1	; 0x01
    4d80:	42 81       	ldd	r20, Z+2	; 0x02
    4d82:	53 81       	ldd	r21, Z+3	; 0x03
    4d84:	0e 94 8f 46 	call	0x8d1e	; 0x8d1e <__mulsf3>
    4d88:	a5 01       	movw	r20, r10
    4d8a:	94 01       	movw	r18, r8
    4d8c:	0e 94 d7 44 	call	0x89ae	; 0x89ae <__subsf3>
    4d90:	a7 01       	movw	r20, r14
    4d92:	96 01       	movw	r18, r12
    4d94:	0e 94 40 45 	call	0x8a80	; 0x8a80 <__divsf3>
    4d98:	d3 01       	movw	r26, r6
    4d9a:	6d 93       	st	X+, r22
    4d9c:	7d 93       	st	X+, r23
    4d9e:	8d 93       	st	X+, r24
    4da0:	9c 93       	st	X, r25
    4da2:	13 97       	sbiw	r26, 0x03	; 3
    4da4:	09 c0       	rjmp	.+18     	; 0x4db8 <simple_imu_update+0xf6>
		}
		else
		{
			// Use raw accADC[axis] as source for acc values
			accSmooth[axis] =  -accADCf;
    4da6:	b7 fa       	bst	r11, 7
    4da8:	b0 94       	com	r11
    4daa:	b7 f8       	bld	r11, 7
    4dac:	b0 94       	com	r11
    4dae:	f3 01       	movw	r30, r6
    4db0:	80 82       	st	Z, r8
    4db2:	91 82       	std	Z+1, r9	; 0x01
    4db4:	a2 82       	std	Z+2, r10	; 0x02
    4db6:	b3 82       	std	Z+3, r11	; 0x03
    4db8:	f4 e0       	ldi	r31, 0x04	; 4
    4dba:	6f 0e       	add	r6, r31
    4dbc:	71 1c       	adc	r7, r1
	interval = tempf/2500000.0f;		// This gives the period in seconds

	tempf = pgm_read_byte(&LPF_lookup[Config.Acc_LPF]); // Lookup actual LPF value and promote
	
	// Smooth Acc signals - note that accSmooth is in [ROLL, PITCH, YAW] order
	for (axis = 0; axis < NUMBEROFAXIS; axis++)
    4dbe:	85 e0       	ldi	r24, 0x05	; 5
    4dc0:	04 34       	cpi	r16, 0x44	; 68
    4dc2:	18 07       	cpc	r17, r24
    4dc4:	09 f0       	breq	.+2      	; 0x4dc8 <simple_imu_update+0x106>
    4dc6:	bb cf       	rjmp	.-138    	; 0x4d3e <simple_imu_update+0x7c>
			accSmooth[axis] =  -accADCf;
		}
	}
	
	// Add correction data to gyro inputs based on difference between Euler angles and acc angles
	AccAngleRoll = accSmooth[ROLL] * SMALLANGLEFACTOR;		// KK2 - AccYfilter
    4dc8:	23 ec       	ldi	r18, 0xC3	; 195
    4dca:	35 ef       	ldi	r19, 0xF5	; 245
    4dcc:	48 e2       	ldi	r20, 0x28	; 40
    4dce:	5f e3       	ldi	r21, 0x3F	; 63
    4dd0:	60 91 9b 05 	lds	r22, 0x059B
    4dd4:	70 91 9c 05 	lds	r23, 0x059C
    4dd8:	80 91 9d 05 	lds	r24, 0x059D
    4ddc:	90 91 9e 05 	lds	r25, 0x059E
    4de0:	0e 94 8f 46 	call	0x8d1e	; 0x8d1e <__mulsf3>
    4de4:	69 83       	std	Y+1, r22	; 0x01
    4de6:	7a 83       	std	Y+2, r23	; 0x02
    4de8:	8b 83       	std	Y+3, r24	; 0x03
    4dea:	9c 83       	std	Y+4, r25	; 0x04
    4dec:	60 93 7f 05 	sts	0x057F, r22
    4df0:	70 93 80 05 	sts	0x0580, r23
    4df4:	80 93 81 05 	sts	0x0581, r24
    4df8:	90 93 82 05 	sts	0x0582, r25
	AccAnglePitch = accSmooth[PITCH] * SMALLANGLEFACTOR;
    4dfc:	23 ec       	ldi	r18, 0xC3	; 195
    4dfe:	35 ef       	ldi	r19, 0xF5	; 245
    4e00:	48 e2       	ldi	r20, 0x28	; 40
    4e02:	5f e3       	ldi	r21, 0x3F	; 63
    4e04:	60 91 9f 05 	lds	r22, 0x059F
    4e08:	70 91 a0 05 	lds	r23, 0x05A0
    4e0c:	80 91 a1 05 	lds	r24, 0x05A1
    4e10:	90 91 a2 05 	lds	r25, 0x05A2
    4e14:	0e 94 8f 46 	call	0x8d1e	; 0x8d1e <__mulsf3>
    4e18:	6d 83       	std	Y+5, r22	; 0x05
    4e1a:	7e 83       	std	Y+6, r23	; 0x06
    4e1c:	8f 83       	std	Y+7, r24	; 0x07
    4e1e:	98 87       	std	Y+8, r25	; 0x08
    4e20:	60 93 83 05 	sts	0x0583, r22
    4e24:	70 93 84 05 	sts	0x0584, r23
    4e28:	80 93 85 05 	sts	0x0585, r24
    4e2c:	90 93 86 05 	sts	0x0586, r25

	// Copy/promote gyro values for rotate
	GyroRollVC = gyroADC[ROLL];								// KK2 - GyroRoll
    4e30:	60 91 71 05 	lds	r22, 0x0571
    4e34:	70 91 72 05 	lds	r23, 0x0572
    4e38:	88 27       	eor	r24, r24
    4e3a:	77 fd       	sbrc	r23, 7
    4e3c:	80 95       	com	r24
    4e3e:	98 2f       	mov	r25, r24
    4e40:	0e 94 db 45 	call	0x8bb6	; 0x8bb6 <__floatsisf>
    4e44:	2b 01       	movw	r4, r22
    4e46:	3c 01       	movw	r6, r24
    4e48:	60 93 8f 05 	sts	0x058F, r22
    4e4c:	70 93 90 05 	sts	0x0590, r23
    4e50:	80 93 91 05 	sts	0x0591, r24
    4e54:	90 93 92 05 	sts	0x0592, r25
	GyroPitchVC = gyroADC[PITCH];
    4e58:	60 91 73 05 	lds	r22, 0x0573
    4e5c:	70 91 74 05 	lds	r23, 0x0574
    4e60:	88 27       	eor	r24, r24
    4e62:	77 fd       	sbrc	r23, 7
    4e64:	80 95       	com	r24
    4e66:	98 2f       	mov	r25, r24
    4e68:	0e 94 db 45 	call	0x8bb6	; 0x8bb6 <__floatsisf>
    4e6c:	6b 01       	movw	r12, r22
    4e6e:	7c 01       	movw	r14, r24
    4e70:	60 93 87 05 	sts	0x0587, r22
    4e74:	70 93 88 05 	sts	0x0588, r23
    4e78:	80 93 89 05 	sts	0x0589, r24
    4e7c:	90 93 8a 05 	sts	0x058A, r25

	// Calculate acceleration magnitude.
	roll_sq = (accADC[ROLL] * accADC[ROLL]);
    4e80:	20 91 3e 05 	lds	r18, 0x053E
    4e84:	30 91 3f 05 	lds	r19, 0x053F
	pitch_sq = (accADC[PITCH] * accADC[PITCH]);
    4e88:	40 91 40 05 	lds	r20, 0x0540
    4e8c:	50 91 41 05 	lds	r21, 0x0541
	yaw_sq = (accADC[YAW] * accADC[YAW]);
    4e90:	e0 91 42 05 	lds	r30, 0x0542
    4e94:	f0 91 43 05 	lds	r31, 0x0543
	GyroRollVC = gyroADC[ROLL];								// KK2 - GyroRoll
	GyroPitchVC = gyroADC[PITCH];

	// Calculate acceleration magnitude.
	roll_sq = (accADC[ROLL] * accADC[ROLL]);
	pitch_sq = (accADC[PITCH] * accADC[PITCH]);
    4e98:	44 9f       	mul	r20, r20
    4e9a:	40 01       	movw	r8, r0
    4e9c:	45 9f       	mul	r20, r21
    4e9e:	90 0c       	add	r9, r0
    4ea0:	90 0c       	add	r9, r0
    4ea2:	11 24       	eor	r1, r1
    4ea4:	b4 01       	movw	r22, r8
    4ea6:	88 27       	eor	r24, r24
    4ea8:	77 fd       	sbrc	r23, 7
    4eaa:	80 95       	com	r24
    4eac:	98 2f       	mov	r25, r24
	// Copy/promote gyro values for rotate
	GyroRollVC = gyroADC[ROLL];								// KK2 - GyroRoll
	GyroPitchVC = gyroADC[PITCH];

	// Calculate acceleration magnitude.
	roll_sq = (accADC[ROLL] * accADC[ROLL]);
    4eae:	22 9f       	mul	r18, r18
    4eb0:	a0 01       	movw	r20, r0
    4eb2:	23 9f       	mul	r18, r19
    4eb4:	50 0d       	add	r21, r0
    4eb6:	50 0d       	add	r21, r0
    4eb8:	11 24       	eor	r1, r1
    4eba:	8a 01       	movw	r16, r20
    4ebc:	22 27       	eor	r18, r18
    4ebe:	17 fd       	sbrc	r17, 7
    4ec0:	20 95       	com	r18
    4ec2:	32 2f       	mov	r19, r18
	pitch_sq = (accADC[PITCH] * accADC[PITCH]);
	yaw_sq = (accADC[YAW] * accADC[YAW]);
	AccMag = roll_sq + pitch_sq + yaw_sq;
    4ec4:	60 0f       	add	r22, r16
    4ec6:	71 1f       	adc	r23, r17
    4ec8:	82 1f       	adc	r24, r18
    4eca:	93 1f       	adc	r25, r19
	GyroPitchVC = gyroADC[PITCH];

	// Calculate acceleration magnitude.
	roll_sq = (accADC[ROLL] * accADC[ROLL]);
	pitch_sq = (accADC[PITCH] * accADC[PITCH]);
	yaw_sq = (accADC[YAW] * accADC[YAW]);
    4ecc:	ee 9f       	mul	r30, r30
    4ece:	90 01       	movw	r18, r0
    4ed0:	ef 9f       	mul	r30, r31
    4ed2:	30 0d       	add	r19, r0
    4ed4:	30 0d       	add	r19, r0
    4ed6:	11 24       	eor	r1, r1
    4ed8:	89 01       	movw	r16, r18
    4eda:	22 27       	eor	r18, r18
    4edc:	17 fd       	sbrc	r17, 7
    4ede:	20 95       	com	r18
    4ee0:	32 2f       	mov	r19, r18
	AccMag = roll_sq + pitch_sq + yaw_sq;
    4ee2:	60 0f       	add	r22, r16
    4ee4:	71 1f       	adc	r23, r17
    4ee6:	82 1f       	adc	r24, r18
    4ee8:	93 1f       	adc	r25, r19
	
	// Add acc correction if inside local acceleration bounds and not inverted according to VectorZ
	// This is actually a kind of Complementary Filter
	if	((AccMag > acc_0_85G_SQ) && (AccMag < acc_1_15G_SQ) && (VectorZ > 0.5))
    4eea:	0e 94 d9 45 	call	0x8bb2	; 0x8bb2 <__floatunsisf>
    4eee:	4b 01       	movw	r8, r22
    4ef0:	5c 01       	movw	r10, r24
    4ef2:	20 e0       	ldi	r18, 0x00	; 0
    4ef4:	34 ef       	ldi	r19, 0xF4	; 244
    4ef6:	48 e3       	ldi	r20, 0x38	; 56
    4ef8:	56 e4       	ldi	r21, 0x46	; 70
    4efa:	0e 94 8b 46 	call	0x8d16	; 0x8d16 <__gesf2>
    4efe:	18 16       	cp	r1, r24
    4f00:	0c f0       	brlt	.+2      	; 0x4f04 <simple_imu_update+0x242>
    4f02:	6b c0       	rjmp	.+214    	; 0x4fda <simple_imu_update+0x318>
    4f04:	20 e0       	ldi	r18, 0x00	; 0
    4f06:	38 e4       	ldi	r19, 0x48	; 72
    4f08:	49 ea       	ldi	r20, 0xA9	; 169
    4f0a:	56 e4       	ldi	r21, 0x46	; 70
    4f0c:	c5 01       	movw	r24, r10
    4f0e:	b4 01       	movw	r22, r8
    4f10:	0e 94 3c 45 	call	0x8a78	; 0x8a78 <__cmpsf2>
    4f14:	87 ff       	sbrs	r24, 7
    4f16:	61 c0       	rjmp	.+194    	; 0x4fda <simple_imu_update+0x318>
    4f18:	20 e0       	ldi	r18, 0x00	; 0
    4f1a:	30 e0       	ldi	r19, 0x00	; 0
    4f1c:	40 e0       	ldi	r20, 0x00	; 0
    4f1e:	5f e3       	ldi	r21, 0x3F	; 63
    4f20:	60 91 01 05 	lds	r22, 0x0501
    4f24:	70 91 02 05 	lds	r23, 0x0502
    4f28:	80 91 03 05 	lds	r24, 0x0503
    4f2c:	90 91 04 05 	lds	r25, 0x0504
    4f30:	0e 94 8b 46 	call	0x8d16	; 0x8d16 <__gesf2>
    4f34:	18 16       	cp	r1, r24
    4f36:	0c f0       	brlt	.+2      	; 0x4f3a <simple_imu_update+0x278>
    4f38:	50 c0       	rjmp	.+160    	; 0x4fda <simple_imu_update+0x318>
	{
		tempf = (EulerAngleRoll - AccAngleRoll) / (11 - Config.CF_factor); // Default Config.CF_factor is 7
    4f3a:	80 91 43 06 	lds	r24, 0x0643
    4f3e:	6b e0       	ldi	r22, 0x0B	; 11
    4f40:	70 e0       	ldi	r23, 0x00	; 0
    4f42:	68 1b       	sub	r22, r24
    4f44:	71 09       	sbc	r23, r1
    4f46:	87 fd       	sbrc	r24, 7
    4f48:	73 95       	inc	r23
    4f4a:	88 27       	eor	r24, r24
    4f4c:	77 fd       	sbrc	r23, 7
    4f4e:	80 95       	com	r24
    4f50:	98 2f       	mov	r25, r24
    4f52:	0e 94 db 45 	call	0x8bb6	; 0x8bb6 <__floatsisf>
    4f56:	4b 01       	movw	r8, r22
    4f58:	5c 01       	movw	r10, r24
    4f5a:	29 81       	ldd	r18, Y+1	; 0x01
    4f5c:	3a 81       	ldd	r19, Y+2	; 0x02
    4f5e:	4b 81       	ldd	r20, Y+3	; 0x03
    4f60:	5c 81       	ldd	r21, Y+4	; 0x04
    4f62:	60 91 a7 05 	lds	r22, 0x05A7
    4f66:	70 91 a8 05 	lds	r23, 0x05A8
    4f6a:	80 91 a9 05 	lds	r24, 0x05A9
    4f6e:	90 91 aa 05 	lds	r25, 0x05AA
    4f72:	0e 94 d7 44 	call	0x89ae	; 0x89ae <__subsf3>
    4f76:	a5 01       	movw	r20, r10
    4f78:	94 01       	movw	r18, r8
    4f7a:	0e 94 40 45 	call	0x8a80	; 0x8a80 <__divsf3>
    4f7e:	9b 01       	movw	r18, r22
    4f80:	ac 01       	movw	r20, r24
		GyroRollVC = GyroRollVC + tempf;
    4f82:	c3 01       	movw	r24, r6
    4f84:	b2 01       	movw	r22, r4
    4f86:	0e 94 d8 44 	call	0x89b0	; 0x89b0 <__addsf3>
    4f8a:	60 93 8f 05 	sts	0x058F, r22
    4f8e:	70 93 90 05 	sts	0x0590, r23
    4f92:	80 93 91 05 	sts	0x0591, r24
    4f96:	90 93 92 05 	sts	0x0592, r25
		
		tempf = (EulerAnglePitch - AccAnglePitch) /(11 - Config.CF_factor);
    4f9a:	2d 81       	ldd	r18, Y+5	; 0x05
    4f9c:	3e 81       	ldd	r19, Y+6	; 0x06
    4f9e:	4f 81       	ldd	r20, Y+7	; 0x07
    4fa0:	58 85       	ldd	r21, Y+8	; 0x08
    4fa2:	60 91 7b 05 	lds	r22, 0x057B
    4fa6:	70 91 7c 05 	lds	r23, 0x057C
    4faa:	80 91 7d 05 	lds	r24, 0x057D
    4fae:	90 91 7e 05 	lds	r25, 0x057E
    4fb2:	0e 94 d7 44 	call	0x89ae	; 0x89ae <__subsf3>
    4fb6:	a5 01       	movw	r20, r10
    4fb8:	94 01       	movw	r18, r8
    4fba:	0e 94 40 45 	call	0x8a80	; 0x8a80 <__divsf3>
    4fbe:	9b 01       	movw	r18, r22
    4fc0:	ac 01       	movw	r20, r24
		GyroPitchVC = GyroPitchVC + tempf;
    4fc2:	c7 01       	movw	r24, r14
    4fc4:	b6 01       	movw	r22, r12
    4fc6:	0e 94 d8 44 	call	0x89b0	; 0x89b0 <__addsf3>
    4fca:	60 93 87 05 	sts	0x0587, r22
    4fce:	70 93 88 05 	sts	0x0588, r23
    4fd2:	80 93 89 05 	sts	0x0589, r24
    4fd6:	90 93 8a 05 	sts	0x058A, r25
	}

	// Rotate up-direction 3D vector with gyro inputs
	Rotate3dVector();
    4fda:	0e 94 d7 24 	call	0x49ae	; 0x49ae <Rotate3dVector>
	ExtractEulerAngles();
    4fde:	0e 94 3c 26 	call	0x4c78	; 0x4c78 <ExtractEulerAngles>
	
	// Upscale to 0.01 degrees resolution and copy to angle[] for display
	angle[ROLL] = (int16_t)(EulerAngleRoll * -100);
    4fe2:	20 e0       	ldi	r18, 0x00	; 0
    4fe4:	30 e0       	ldi	r19, 0x00	; 0
    4fe6:	48 ec       	ldi	r20, 0xC8	; 200
    4fe8:	52 ec       	ldi	r21, 0xC2	; 194
    4fea:	60 91 a7 05 	lds	r22, 0x05A7
    4fee:	70 91 a8 05 	lds	r23, 0x05A8
    4ff2:	80 91 a9 05 	lds	r24, 0x05A9
    4ff6:	90 91 aa 05 	lds	r25, 0x05AA
    4ffa:	0e 94 8f 46 	call	0x8d1e	; 0x8d1e <__mulsf3>
    4ffe:	0e 94 a8 45 	call	0x8b50	; 0x8b50 <__fixsfsi>
    5002:	70 93 94 05 	sts	0x0594, r23
    5006:	60 93 93 05 	sts	0x0593, r22
	angle[PITCH] = (int16_t)(EulerAnglePitch * -100);
    500a:	20 e0       	ldi	r18, 0x00	; 0
    500c:	30 e0       	ldi	r19, 0x00	; 0
    500e:	48 ec       	ldi	r20, 0xC8	; 200
    5010:	52 ec       	ldi	r21, 0xC2	; 194
    5012:	60 91 7b 05 	lds	r22, 0x057B
    5016:	70 91 7c 05 	lds	r23, 0x057C
    501a:	80 91 7d 05 	lds	r24, 0x057D
    501e:	90 91 7e 05 	lds	r25, 0x057E
    5022:	0e 94 8f 46 	call	0x8d1e	; 0x8d1e <__mulsf3>
    5026:	0e 94 a8 45 	call	0x8b50	; 0x8b50 <__fixsfsi>
    502a:	70 93 96 05 	sts	0x0596, r23
    502e:	60 93 95 05 	sts	0x0595, r22
}
    5032:	28 96       	adiw	r28, 0x08	; 8
    5034:	0f b6       	in	r0, 0x3f	; 63
    5036:	f8 94       	cli
    5038:	de bf       	out	0x3e, r29	; 62
    503a:	0f be       	out	0x3f, r0	; 63
    503c:	cd bf       	out	0x3d, r28	; 61
    503e:	df 91       	pop	r29
    5040:	cf 91       	pop	r28
    5042:	1f 91       	pop	r17
    5044:	0f 91       	pop	r16
    5046:	ff 90       	pop	r15
    5048:	ef 90       	pop	r14
    504a:	df 90       	pop	r13
    504c:	cf 90       	pop	r12
    504e:	bf 90       	pop	r11
    5050:	af 90       	pop	r10
    5052:	9f 90       	pop	r9
    5054:	8f 90       	pop	r8
    5056:	7f 90       	pop	r7
    5058:	6f 90       	pop	r6
    505a:	5f 90       	pop	r5
    505c:	4f 90       	pop	r4
    505e:	08 95       	ret

00005060 <reset_IMU>:
}

void reset_IMU(void)
{
	// Initialise the vector to point straight up
	VectorX = 0;
    5060:	10 92 2a 05 	sts	0x052A, r1
    5064:	10 92 2b 05 	sts	0x052B, r1
    5068:	10 92 2c 05 	sts	0x052C, r1
    506c:	10 92 2d 05 	sts	0x052D, r1
	VectorY = 0;
    5070:	10 92 26 05 	sts	0x0526, r1
    5074:	10 92 27 05 	sts	0x0527, r1
    5078:	10 92 28 05 	sts	0x0528, r1
    507c:	10 92 29 05 	sts	0x0529, r1
	VectorZ = 1;
    5080:	80 e0       	ldi	r24, 0x00	; 0
    5082:	90 e0       	ldi	r25, 0x00	; 0
    5084:	a0 e8       	ldi	r26, 0x80	; 128
    5086:	bf e3       	ldi	r27, 0x3F	; 63
    5088:	80 93 01 05 	sts	0x0501, r24
    508c:	90 93 02 05 	sts	0x0502, r25
    5090:	a0 93 03 05 	sts	0x0503, r26
    5094:	b0 93 04 05 	sts	0x0504, r27
	
	// Initialise internal vectors and attitude	
	VectorA = 0;
    5098:	10 92 ab 05 	sts	0x05AB, r1
    509c:	10 92 ac 05 	sts	0x05AC, r1
    50a0:	10 92 ad 05 	sts	0x05AD, r1
    50a4:	10 92 ae 05 	sts	0x05AE, r1
	VectorB = 0;
    50a8:	10 92 af 05 	sts	0x05AF, r1
    50ac:	10 92 b0 05 	sts	0x05B0, r1
    50b0:	10 92 b1 05 	sts	0x05B1, r1
    50b4:	10 92 b2 05 	sts	0x05B2, r1
	EulerAngleRoll = 0;
    50b8:	10 92 a7 05 	sts	0x05A7, r1
    50bc:	10 92 a8 05 	sts	0x05A8, r1
    50c0:	10 92 a9 05 	sts	0x05A9, r1
    50c4:	10 92 aa 05 	sts	0x05AA, r1
	EulerAnglePitch = 0;
    50c8:	10 92 7b 05 	sts	0x057B, r1
    50cc:	10 92 7c 05 	sts	0x057C, r1
    50d0:	10 92 7d 05 	sts	0x057D, r1
    50d4:	10 92 7e 05 	sts	0x057E, r1

	// Reset loop count to zero
	TMR0_counter = 0;	// TMR0 overflow counter
    50d8:	10 92 d0 07 	sts	0x07D0, r1
    50dc:	10 92 cf 07 	sts	0x07CF, r1
	TCNT1 = 0;			// TCNT1 current time
    50e0:	10 92 85 00 	sts	0x0085, r1
    50e4:	10 92 84 00 	sts	0x0084, r1
	LoopStartTCNT1 = 0;	// TCNT1 last loop time
    50e8:	10 92 1b 05 	sts	0x051B, r1
    50ec:	10 92 1a 05 	sts	0x051A, r1
    50f0:	08 95       	ret

000050f2 <init>:

CONFIG_STRUCT Config;			// eeProm data configuration
uint16_t SystemVoltage = 0;		// Initial voltage measured.

void init(void)
{
    50f2:	cf 93       	push	r28
	
	//***********************************************************
	// I/O setup
	//***********************************************************
	// Set port directions
	DDRA		= 0x30;		// Port A
    50f4:	80 e3       	ldi	r24, 0x30	; 48
    50f6:	81 b9       	out	0x01, r24	; 1
	DDRC		= 0xFC;		// Port C
    50f8:	8c ef       	ldi	r24, 0xFC	; 252
    50fa:	87 b9       	out	0x07, r24	; 7
	DDRB		= 0x0A;		// Port B
    50fc:	8a e0       	ldi	r24, 0x0A	; 10
    50fe:	84 b9       	out	0x04, r24	; 4
	DDRD		= 0xF2;		// Port D
    5100:	82 ef       	ldi	r24, 0xF2	; 242
    5102:	8a b9       	out	0x0a, r24	; 10

	// Hold all PWM outputs low to stop glitches
	// M5 and M6 are on PortA for KK2.1
	MOTORS		= 0;
    5104:	18 b8       	out	0x08, r1	; 8
	M5			= 0;
    5106:	14 98       	cbi	0x02, 4	; 2
	M6			= 0;
    5108:	15 98       	cbi	0x02, 5	; 2

	// Preset I/O pins
	LED1 		= 0;		// LED1 off
    510a:	2b 98       	cbi	0x05, 3	; 5
	LVA 		= 0; 		// LVA alarm OFF
    510c:	29 98       	cbi	0x05, 1	; 5
	LCD_SCL		= 1;		// GLCD clock high
    510e:	5c 9a       	sbi	0x0b, 4	; 11

	// Set/clear pull-ups (1 = set, 0 = clear)
	PINB		= 0xF5;		// Set PB pull-ups
    5110:	85 ef       	ldi	r24, 0xF5	; 245
    5112:	83 b9       	out	0x03, r24	; 3
	PIND		= 0x0C;		// Set PD pull-ups (Don't pull up RX yet)
    5114:	8c e0       	ldi	r24, 0x0C	; 12
    5116:	89 b9       	out	0x09, r24	; 9
    5118:	2f e5       	ldi	r18, 0x5F	; 95
    511a:	88 ed       	ldi	r24, 0xD8	; 216
    511c:	93 e0       	ldi	r25, 0x03	; 3
    511e:	21 50       	subi	r18, 0x01	; 1
    5120:	80 40       	sbci	r24, 0x00	; 0
    5122:	90 40       	sbci	r25, 0x00	; 0
    5124:	e1 f7       	brne	.-8      	; 0x511e <init+0x2c>
    5126:	00 c0       	rjmp	.+0      	; 0x5128 <init+0x36>
    5128:	00 00       	nop
	_delay_ms(63);				// Pause while satellite wakes up	
								// and pull-ups have time to rise.
								// Tweak until bind pulses about 68ms after power-up

	// Bind as master if ONLY button 4 pressed
	if ((PINB & 0xf0) == 0xE0)
    512a:	83 b1       	in	r24, 0x03	; 3
    512c:	80 7f       	andi	r24, 0xF0	; 240
    512e:	80 3e       	cpi	r24, 0xE0	; 224
    5130:	21 f4       	brne	.+8      	; 0x513a <init+0x48>
	{
		DDRD		= 0xF3;		// Switch PD0 to output
    5132:	83 ef       	ldi	r24, 0xF3	; 243
    5134:	8a b9       	out	0x0a, r24	; 10
		bind_master();
    5136:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <bind_master>
	}

	DDRD		= 0xF2;			// Reset Port D directions
    513a:	82 ef       	ldi	r24, 0xF2	; 242
    513c:	8a b9       	out	0x0a, r24	; 10

	// Set/clear pull-ups (1 = set, 0 = clear)
	PIND		= 0x0D;			// Set PD pull-ups (now pull up RX as well)
    513e:	8d e0       	ldi	r24, 0x0D	; 13
    5140:	89 b9       	out	0x09, r24	; 9
	// Timers
	//***********************************************************

	// Timer0 (8bit) - run @ 20MHz / 1024 = 19.531kHz or 51.2us - max 13.1ms
	// Slow timer to extend Timer 1
	TCCR0A = 0;								// Normal operation
    5142:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0x05;							// Clk / 1024 = 19.531kHz or 51.2us - max 13.1ms
    5144:	85 e0       	ldi	r24, 0x05	; 5
    5146:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= (1 << TOIE0);					// Enable interrupts
    5148:	80 91 6e 00 	lds	r24, 0x006E
    514c:	81 60       	ori	r24, 0x01	; 1
    514e:	80 93 6e 00 	sts	0x006E, r24
	TCNT0 = 0;								// Reset counter
    5152:	16 bc       	out	0x26, r1	; 38
	
	// Timer1 (16bit) - run @ 2.5MHz (400ns) - max 26.2ms
	// Used to measure Rx Signals & control ESC/servo output rate
	TCCR1A = 0;
    5154:	10 92 80 00 	sts	0x0080, r1
	TCCR1B |= (1 << CS11);					// Clk/8 = 2.5MHz
    5158:	80 91 81 00 	lds	r24, 0x0081
    515c:	82 60       	ori	r24, 0x02	; 2
    515e:	80 93 81 00 	sts	0x0081, r24

	// Timer2 8bit - run @ 20MHz / 1024 = 19.531kHz or 51.2us - max 13.1ms
	// Used to time arm/disarm intervals
	TCCR2A = 0;	
    5162:	10 92 b0 00 	sts	0x00B0, r1
	TCCR2B = 0x07;							// Clk/1024 = 19.531kHz
    5166:	87 e0       	ldi	r24, 0x07	; 7
    5168:	80 93 b1 00 	sts	0x00B1, r24
	TIMSK2 = 0;
    516c:	10 92 70 00 	sts	0x0070, r1
	TIFR2 = 0;
    5170:	17 ba       	out	0x17, r1	; 23
	TCNT2 = 0;								// Reset counter
    5172:	10 92 b2 00 	sts	0x00B2, r1
	//***********************************************************
	// Interrupts and pin function setup
	//***********************************************************

	// Pin change interrupt enables PCINT1, PCINT2 and PCINT3 (Throttle, AUX and CPPM input)
	PCICR  = 0x0A;							// PCINT8  to PCINT15 (PCINT1 group - AUX)
    5176:	9a e0       	ldi	r25, 0x0A	; 10
    5178:	90 93 68 00 	sts	0x0068, r25
											// PCINT24 to PCINT31 (PCINT3 group - THR)
	PCIFR  = 0x0F;							// Clear PCIF0 interrupt flag 
    517c:	9f e0       	ldi	r25, 0x0F	; 15
    517e:	9b bb       	out	0x1b, r25	; 27
											// Clear PCIF1 interrupt flag 
											// Clear PCIF2 interrupt flag 
											// Clear PCIF3 interrupt flag 

	// External interrupts INT0 (Elevator) and INT1 (Aileron) and INT2 (Rudder)
	EICRA = 0x15;							// Any change INT0
    5180:	95 e1       	ldi	r25, 0x15	; 21
    5182:	90 93 69 00 	sts	0x0069, r25
											// Any change INT1
											// Any change INT2
	EIFR  = 0x07; 							// Clear INT0 interrupt flag (Elevator)
    5186:	8c bb       	out	0x1c, r24	; 28
	//***********************************************************
	// Start up
	//***********************************************************

	// Preset important flags
	Interrupted = false;						
    5188:	10 92 cc 07 	sts	0x07CC, r1

	// Load EEPROM settings
	updated = Initial_EEPROM_Config_Load(); // Config now contains valid values
    518c:	0e 94 84 19 	call	0x3308	; 0x3308 <Initial_EEPROM_Config_Load>
    5190:	c8 2f       	mov	r28, r24
    5192:	20 e0       	ldi	r18, 0x00	; 0
    5194:	30 e0       	ldi	r19, 0x00	; 0
	//***********************************************************

	for (i = 0; i < MAX_RC_CHANNELS; i++)
	{
		
		RxChannel[i] = 3750;
    5196:	46 ea       	ldi	r20, 0xA6	; 166
    5198:	5e e0       	ldi	r21, 0x0E	; 14
    519a:	f9 01       	movw	r30, r18
    519c:	ee 0f       	add	r30, r30
    519e:	ff 1f       	adc	r31, r31
    51a0:	e4 54       	subi	r30, 0x44	; 68
    51a2:	f8 4f       	sbci	r31, 0xF8	; 248
    51a4:	51 83       	std	Z+1, r21	; 0x01
    51a6:	40 83       	st	Z, r20
    51a8:	2f 5f       	subi	r18, 0xFF	; 255
    51aa:	3f 4f       	sbci	r19, 0xFF	; 255
	// RX channel defaults for when no RC connected
	// Not doing this can result in the FC trying (unsuccessfully) to arm
	// and makes entry into the menus very hard
	//***********************************************************

	for (i = 0; i < MAX_RC_CHANNELS; i++)
    51ac:	28 30       	cpi	r18, 0x08	; 8
    51ae:	31 05       	cpc	r19, r1
    51b0:	a1 f7       	brne	.-24     	; 0x519a <init+0xa8>
	{
		
		RxChannel[i] = 3750;
	}
	
	RxChannel[THROTTLE] = 2500; // Min throttle
    51b2:	24 ec       	ldi	r18, 0xC4	; 196
    51b4:	39 e0       	ldi	r19, 0x09	; 9
    51b6:	30 93 bd 07 	sts	0x07BD, r19
    51ba:	20 93 bc 07 	sts	0x07BC, r18
	//***********************************************************
	// GLCD initialisation
	//***********************************************************

	// Initialise the GLCD
	st7565_init();
    51be:	0e 94 0d 1f 	call	0x3e1a	; 0x3e1a <st7565_init>

	// Make sure the LCD is blank without clearing buffer (and so no logo)
	clear_screen();
    51c2:	0e 94 67 1f 	call	0x3ece	; 0x3ece <clear_screen>
	//***********************************************************
	// ESC calibration
	//***********************************************************
	
	// Calibrate ESCs if ONLY buttons 1 and 4 pressed
	if ((PINB & 0xf0) == 0x60)
    51c6:	93 b1       	in	r25, 0x03	; 3
    51c8:	90 7f       	andi	r25, 0xF0	; 240
    51ca:	90 36       	cpi	r25, 0x60	; 96
    51cc:	09 f0       	breq	.+2      	; 0x51d0 <init+0xde>
    51ce:	71 c0       	rjmp	.+226    	; 0x52b2 <init+0x1c0>
	{
		// Display calibrating message
		st7565_command(CMD_SET_COM_NORMAL); 	// For text (not for logo)
    51d0:	80 ec       	ldi	r24, 0xC0	; 192
    51d2:	0e 94 fe 1e 	call	0x3dfc	; 0x3dfc <st7565_command>
		clear_buffer(buffer);
    51d6:	81 e0       	ldi	r24, 0x01	; 1
    51d8:	91 e0       	ldi	r25, 0x01	; 1
    51da:	0e 94 5e 1f 	call	0x3ebc	; 0x3ebc <clear_buffer>
		LCD_Display_Text(59,(const unsigned char*)Verdana14,10,25);
    51de:	29 e1       	ldi	r18, 0x19	; 25
    51e0:	30 e0       	ldi	r19, 0x00	; 0
    51e2:	4a e0       	ldi	r20, 0x0A	; 10
    51e4:	50 e0       	ldi	r21, 0x00	; 0
    51e6:	69 e4       	ldi	r22, 0x49	; 73
    51e8:	71 e0       	ldi	r23, 0x01	; 1
    51ea:	8b e3       	ldi	r24, 0x3B	; 59
    51ec:	90 e0       	ldi	r25, 0x00	; 0
    51ee:	0e 94 3f 21 	call	0x427e	; 0x427e <LCD_Display_Text>
		write_buffer(buffer);
    51f2:	81 e0       	ldi	r24, 0x01	; 1
    51f4:	91 e0       	ldi	r25, 0x01	; 1
    51f6:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <write_buffer>
		clear_buffer(buffer);
    51fa:	81 e0       	ldi	r24, 0x01	; 1
    51fc:	91 e0       	ldi	r25, 0x01	; 1
    51fe:	0e 94 5e 1f 	call	0x3ebc	; 0x3ebc <clear_buffer>
    5202:	e9 e4       	ldi	r30, 0x49	; 73
    5204:	f6 e0       	ldi	r31, 0x06	; 6
    5206:	80 e0       	ldi	r24, 0x00	; 0
    5208:	90 e0       	ldi	r25, 0x00	; 0
				// Set output to maximum pulse width
				ServoOut[i] = MOTOR_100;
			}
			else
			{
				ServoOut[i] = SERVO_CENTER;
    520a:	4c ed       	ldi	r20, 0xDC	; 220
    520c:	55 e0       	ldi	r21, 0x05	; 5
		{
			// Check for motor marker
			if (Config.Channel[i].Motor_marker == MOTOR)
			{
				// Set output to maximum pulse width
				ServoOut[i] = MOTOR_100;
    520e:	6c e6       	ldi	r22, 0x6C	; 108
    5210:	77 e0       	ldi	r23, 0x07	; 7
				
		// For each output
		for (i = 0; i < MAX_OUTPUTS; i++)
		{
			// Check for motor marker
			if (Config.Channel[i].Motor_marker == MOTOR)
    5212:	a0 81       	ld	r26, Z
    5214:	9c 01       	movw	r18, r24
    5216:	22 0f       	add	r18, r18
    5218:	33 1f       	adc	r19, r19
    521a:	a2 30       	cpi	r26, 0x02	; 2
    521c:	39 f4       	brne	.+14     	; 0x522c <init+0x13a>
			{
				// Set output to maximum pulse width
				ServoOut[i] = MOTOR_100;
    521e:	d9 01       	movw	r26, r18
    5220:	a1 5c       	subi	r26, 0xC1	; 193
    5222:	b7 4f       	sbci	r27, 0xF7	; 247
    5224:	11 96       	adiw	r26, 0x01	; 1
    5226:	7c 93       	st	X, r23
    5228:	6e 93       	st	-X, r22
    522a:	06 c0       	rjmp	.+12     	; 0x5238 <init+0x146>
			}
			else
			{
				ServoOut[i] = SERVO_CENTER;
    522c:	d9 01       	movw	r26, r18
    522e:	a1 5c       	subi	r26, 0xC1	; 193
    5230:	b7 4f       	sbci	r27, 0xF7	; 247
    5232:	11 96       	adiw	r26, 0x01	; 1
    5234:	5c 93       	st	X, r21
    5236:	4e 93       	st	-X, r20
    5238:	01 96       	adiw	r24, 0x01	; 1
    523a:	b6 96       	adiw	r30, 0x26	; 38
		LCD_Display_Text(59,(const unsigned char*)Verdana14,10,25);
		write_buffer(buffer);
		clear_buffer(buffer);
				
		// For each output
		for (i = 0; i < MAX_OUTPUTS; i++)
    523c:	88 30       	cpi	r24, 0x08	; 8
    523e:	91 05       	cpc	r25, r1
    5240:	41 f7       	brne	.-48     	; 0x5212 <init+0x120>
				ServoOut[i] = SERVO_CENTER;
			}
		}
					
		// Output HIGH pulse (1.9ms) until buttons released
		while ((PINB & 0xf0) == 0x60)
    5242:	83 b1       	in	r24, 0x03	; 3
    5244:	80 7f       	andi	r24, 0xF0	; 240
    5246:	80 36       	cpi	r24, 0x60	; 96
    5248:	79 f4       	brne	.+30     	; 0x5268 <init+0x176>
		{
			// Pass address of ServoOut array and select all outputs
			output_servo_ppm_asm(&ServoOut[0], 0xFF);
    524a:	6f ef       	ldi	r22, 0xFF	; 255
    524c:	8f e3       	ldi	r24, 0x3F	; 63
    524e:	98 e0       	ldi	r25, 0x08	; 8
    5250:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <output_servo_ppm_asm>
    5254:	2f e7       	ldi	r18, 0x7F	; 127
    5256:	88 e3       	ldi	r24, 0x38	; 56
    5258:	91 e0       	ldi	r25, 0x01	; 1
    525a:	21 50       	subi	r18, 0x01	; 1
    525c:	80 40       	sbci	r24, 0x00	; 0
    525e:	90 40       	sbci	r25, 0x00	; 0
    5260:	e1 f7       	brne	.-8      	; 0x525a <init+0x168>
    5262:	00 c0       	rjmp	.+0      	; 0x5264 <init+0x172>
    5264:	00 00       	nop
    5266:	ed cf       	rjmp	.-38     	; 0x5242 <init+0x150>
				ServoOut[i] = SERVO_CENTER;
			}
		}
					
		// Output HIGH pulse (1.9ms) until buttons released
		while ((PINB & 0xf0) == 0x60)
    5268:	e9 e4       	ldi	r30, 0x49	; 73
    526a:	f6 e0       	ldi	r31, 0x06	; 6
    526c:	80 e0       	ldi	r24, 0x00	; 0
    526e:	90 e0       	ldi	r25, 0x00	; 0
		{
			// Check for motor marker
			if (Config.Channel[i].Motor_marker == MOTOR)
			{
				// Set output to maximum pulse width
				ServoOut[i] = MOTOR_0;
    5270:	2c e4       	ldi	r18, 0x4C	; 76
    5272:	34 e0       	ldi	r19, 0x04	; 4
		// Output LOW pulse (1.1ms) after buttons released
		// For each output
		for (i = 0; i < MAX_OUTPUTS; i++)
		{
			// Check for motor marker
			if (Config.Channel[i].Motor_marker == MOTOR)
    5274:	40 81       	ld	r20, Z
    5276:	42 30       	cpi	r20, 0x02	; 2
    5278:	41 f4       	brne	.+16     	; 0x528a <init+0x198>
			{
				// Set output to maximum pulse width
				ServoOut[i] = MOTOR_0;
    527a:	dc 01       	movw	r26, r24
    527c:	aa 0f       	add	r26, r26
    527e:	bb 1f       	adc	r27, r27
    5280:	a1 5c       	subi	r26, 0xC1	; 193
    5282:	b7 4f       	sbci	r27, 0xF7	; 247
    5284:	11 96       	adiw	r26, 0x01	; 1
    5286:	3c 93       	st	X, r19
    5288:	2e 93       	st	-X, r18
    528a:	01 96       	adiw	r24, 0x01	; 1
    528c:	b6 96       	adiw	r30, 0x26	; 38
			_delay_ms(20);			
		}

		// Output LOW pulse (1.1ms) after buttons released
		// For each output
		for (i = 0; i < MAX_OUTPUTS; i++)
    528e:	88 30       	cpi	r24, 0x08	; 8
    5290:	91 05       	cpc	r25, r1
    5292:	81 f7       	brne	.-32     	; 0x5274 <init+0x182>

		// Loop forever here
		while(1)
		{
			// Pass address of ServoOut array and select all outputs
			output_servo_ppm_asm(&ServoOut[0], 0xFF);
    5294:	6f ef       	ldi	r22, 0xFF	; 255
    5296:	8f e3       	ldi	r24, 0x3F	; 63
    5298:	98 e0       	ldi	r25, 0x08	; 8
    529a:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <output_servo_ppm_asm>
    529e:	2f e7       	ldi	r18, 0x7F	; 127
    52a0:	88 e3       	ldi	r24, 0x38	; 56
    52a2:	91 e0       	ldi	r25, 0x01	; 1
    52a4:	21 50       	subi	r18, 0x01	; 1
    52a6:	80 40       	sbci	r24, 0x00	; 0
    52a8:	90 40       	sbci	r25, 0x00	; 0
    52aa:	e1 f7       	brne	.-8      	; 0x52a4 <init+0x1b2>
    52ac:	00 c0       	rjmp	.+0      	; 0x52ae <init+0x1bc>
    52ae:	00 00       	nop
    52b0:	f1 cf       	rjmp	.-30     	; 0x5294 <init+0x1a2>
    52b2:	2f e7       	ldi	r18, 0x7F	; 127
    52b4:	8f e4       	ldi	r24, 0x4F	; 79
    52b6:	92 e1       	ldi	r25, 0x12	; 18
    52b8:	21 50       	subi	r18, 0x01	; 1
    52ba:	80 40       	sbci	r24, 0x00	; 0
    52bc:	90 40       	sbci	r25, 0x00	; 0
    52be:	e1 f7       	brne	.-8      	; 0x52b8 <init+0x1c6>
    52c0:	00 c0       	rjmp	.+0      	; 0x52c2 <init+0x1d0>
    52c2:	00 00       	nop

	// This delay prevents the GLCD flashing up a ghost image of old data
	_delay_ms(300);

	// Reload default eeprom settings if middle two buttons are pressed
	if ((PINB & 0xf0) == 0x90)
    52c4:	93 b1       	in	r25, 0x03	; 3
    52c6:	90 7f       	andi	r25, 0xF0	; 240
    52c8:	90 39       	cpi	r25, 0x90	; 144
    52ca:	51 f5       	brne	.+84     	; 0x5320 <init+0x22e>
	{
		// Display reset message
		st7565_command(CMD_SET_COM_NORMAL); 	// For text (not for logo)
    52cc:	80 ec       	ldi	r24, 0xC0	; 192
    52ce:	0e 94 fe 1e 	call	0x3dfc	; 0x3dfc <st7565_command>
		clear_buffer(buffer);
    52d2:	81 e0       	ldi	r24, 0x01	; 1
    52d4:	91 e0       	ldi	r25, 0x01	; 1
    52d6:	0e 94 5e 1f 	call	0x3ebc	; 0x3ebc <clear_buffer>
		LCD_Display_Text(262,(const unsigned char*)Verdana14,40,25); // "Reset"
    52da:	29 e1       	ldi	r18, 0x19	; 25
    52dc:	30 e0       	ldi	r19, 0x00	; 0
    52de:	48 e2       	ldi	r20, 0x28	; 40
    52e0:	50 e0       	ldi	r21, 0x00	; 0
    52e2:	69 e4       	ldi	r22, 0x49	; 73
    52e4:	71 e0       	ldi	r23, 0x01	; 1
    52e6:	86 e0       	ldi	r24, 0x06	; 6
    52e8:	91 e0       	ldi	r25, 0x01	; 1
    52ea:	0e 94 3f 21 	call	0x427e	; 0x427e <LCD_Display_Text>
		write_buffer(buffer);
    52ee:	81 e0       	ldi	r24, 0x01	; 1
    52f0:	91 e0       	ldi	r25, 0x01	; 1
    52f2:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <write_buffer>
		clear_buffer(buffer);
    52f6:	81 e0       	ldi	r24, 0x01	; 1
    52f8:	91 e0       	ldi	r25, 0x01	; 1
    52fa:	0e 94 5e 1f 	call	0x3ebc	; 0x3ebc <clear_buffer>
		
		// Reset EEPROM settings
		Set_EEPROM_Default_Config();
    52fe:	0e 94 dc 18 	call	0x31b8	; 0x31b8 <Set_EEPROM_Default_Config>
		Save_Config_to_EEPROM();
    5302:	0e 94 9c 16 	call	0x2d38	; 0x2d38 <Save_Config_to_EEPROM>

		// Set contrast to the default value
		st7565_set_brightness(Config.Contrast);
    5306:	80 91 3c 06 	lds	r24, 0x063C
    530a:	0e 94 04 1f 	call	0x3e08	; 0x3e08 <st7565_set_brightness>
    530e:	2f e7       	ldi	r18, 0x7F	; 127
    5310:	84 e8       	ldi	r24, 0x84	; 132
    5312:	9e e1       	ldi	r25, 0x1E	; 30
    5314:	21 50       	subi	r18, 0x01	; 1
    5316:	80 40       	sbci	r24, 0x00	; 0
    5318:	90 40       	sbci	r25, 0x00	; 0
    531a:	e1 f7       	brne	.-8      	; 0x5314 <init+0x222>
    531c:	00 c0       	rjmp	.+0      	; 0x531e <init+0x22c>
    531e:	00 00       	nop

		_delay_ms(500);		// Save is now too fast to show the "Reset" text long enough
	}

	// Display message in place of logo when updating eeprom structure
	if (updated)
    5320:	cc 23       	and	r28, r28
    5322:	21 f1       	breq	.+72     	; 0x536c <init+0x27a>
	{
		st7565_command(CMD_SET_COM_NORMAL); 	// For text (not for logo)
    5324:	80 ec       	ldi	r24, 0xC0	; 192
    5326:	0e 94 fe 1e 	call	0x3dfc	; 0x3dfc <st7565_command>
		clear_buffer(buffer);
    532a:	81 e0       	ldi	r24, 0x01	; 1
    532c:	91 e0       	ldi	r25, 0x01	; 1
    532e:	0e 94 5e 1f 	call	0x3ebc	; 0x3ebc <clear_buffer>
		LCD_Display_Text(259,(const unsigned char*)Verdana14,30,13); // "Updating"
    5332:	2d e0       	ldi	r18, 0x0D	; 13
    5334:	30 e0       	ldi	r19, 0x00	; 0
    5336:	4e e1       	ldi	r20, 0x1E	; 30
    5338:	50 e0       	ldi	r21, 0x00	; 0
    533a:	69 e4       	ldi	r22, 0x49	; 73
    533c:	71 e0       	ldi	r23, 0x01	; 1
    533e:	83 e0       	ldi	r24, 0x03	; 3
    5340:	91 e0       	ldi	r25, 0x01	; 1
    5342:	0e 94 3f 21 	call	0x427e	; 0x427e <LCD_Display_Text>
		LCD_Display_Text(260,(const unsigned char*)Verdana14,33,37); // "settings"
    5346:	25 e2       	ldi	r18, 0x25	; 37
    5348:	30 e0       	ldi	r19, 0x00	; 0
    534a:	41 e2       	ldi	r20, 0x21	; 33
    534c:	50 e0       	ldi	r21, 0x00	; 0
    534e:	69 e4       	ldi	r22, 0x49	; 73
    5350:	71 e0       	ldi	r23, 0x01	; 1
    5352:	84 e0       	ldi	r24, 0x04	; 4
    5354:	91 e0       	ldi	r25, 0x01	; 1
    5356:	0e 94 3f 21 	call	0x427e	; 0x427e <LCD_Display_Text>
		write_buffer(buffer);
    535a:	81 e0       	ldi	r24, 0x01	; 1
    535c:	91 e0       	ldi	r25, 0x01	; 1
    535e:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <write_buffer>
		clear_buffer(buffer);		
    5362:	81 e0       	ldi	r24, 0x01	; 1
    5364:	91 e0       	ldi	r25, 0x01	; 1
    5366:	0e 94 5e 1f 	call	0x3ebc	; 0x3ebc <clear_buffer>
    536a:	04 c0       	rjmp	.+8      	; 0x5374 <init+0x282>
		_delay_ms(1000);	
	}
	else
	{
		// Write logo from buffer
		write_buffer(buffer);
    536c:	81 e0       	ldi	r24, 0x01	; 1
    536e:	91 e0       	ldi	r25, 0x01	; 1
    5370:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <write_buffer>
    5374:	2f ef       	ldi	r18, 0xFF	; 255
    5376:	88 e0       	ldi	r24, 0x08	; 8
    5378:	9d e3       	ldi	r25, 0x3D	; 61
    537a:	21 50       	subi	r18, 0x01	; 1
    537c:	80 40       	sbci	r24, 0x00	; 0
    537e:	90 40       	sbci	r25, 0x00	; 0
    5380:	e1 f7       	brne	.-8      	; 0x537a <init+0x288>
    5382:	00 c0       	rjmp	.+0      	; 0x5384 <init+0x292>
    5384:	00 00       	nop
		_delay_ms(1000);
	}

	clear_buffer(buffer);
    5386:	81 e0       	ldi	r24, 0x01	; 1
    5388:	91 e0       	ldi	r25, 0x01	; 1
    538a:	0e 94 5e 1f 	call	0x3ebc	; 0x3ebc <clear_buffer>
	write_buffer(buffer);
    538e:	81 e0       	ldi	r24, 0x01	; 1
    5390:	91 e0       	ldi	r25, 0x01	; 1
    5392:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <write_buffer>
	
	st7565_init(); // Seems necessary for KK2 mini
    5396:	0e 94 0d 1f 	call	0x3e1a	; 0x3e1a <st7565_init>
	
	//***********************************************************
	// i2c init
	//***********************************************************	

	i2c_init();
    539a:	0e 94 73 43 	call	0x86e6	; 0x86e6 <i2c_init>
	init_i2c_gyros();
    539e:	0e 94 86 23 	call	0x470c	; 0x470c <init_i2c_gyros>
	init_i2c_accs();
    53a2:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <init_i2c_accs>
	//***********************************************************
	// Remaining init tasks
	//***********************************************************

	// Display "Hold steady" message
	clear_buffer(buffer);
    53a6:	81 e0       	ldi	r24, 0x01	; 1
    53a8:	91 e0       	ldi	r25, 0x01	; 1
    53aa:	0e 94 5e 1f 	call	0x3ebc	; 0x3ebc <clear_buffer>
	st7565_command(CMD_SET_COM_NORMAL); 	// For text (not for logo)
    53ae:	80 ec       	ldi	r24, 0xC0	; 192
    53b0:	0e 94 fe 1e 	call	0x3dfc	; 0x3dfc <st7565_command>
	LCD_Display_Text(263,(const unsigned char*)Verdana14,18,25);	// "Hold steady"
    53b4:	29 e1       	ldi	r18, 0x19	; 25
    53b6:	30 e0       	ldi	r19, 0x00	; 0
    53b8:	42 e1       	ldi	r20, 0x12	; 18
    53ba:	50 e0       	ldi	r21, 0x00	; 0
    53bc:	69 e4       	ldi	r22, 0x49	; 73
    53be:	71 e0       	ldi	r23, 0x01	; 1
    53c0:	87 e0       	ldi	r24, 0x07	; 7
    53c2:	91 e0       	ldi	r25, 0x01	; 1
    53c4:	0e 94 3f 21 	call	0x427e	; 0x427e <LCD_Display_Text>
	write_buffer(buffer);	
    53c8:	81 e0       	ldi	r24, 0x01	; 1
    53ca:	91 e0       	ldi	r25, 0x01	; 1
    53cc:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <write_buffer>
	clear_buffer(buffer);
    53d0:	81 e0       	ldi	r24, 0x01	; 1
    53d2:	91 e0       	ldi	r25, 0x01	; 1
    53d4:	0e 94 5e 1f 	call	0x3ebc	; 0x3ebc <clear_buffer>
		
	// Do startup tasks
	Init_ADC();
    53d8:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <Init_ADC>
	init_int();								// Initialise interrupts based on RC input mode
    53dc:	0e 94 7c 2d 	call	0x5af8	; 0x5af8 <init_int>
	init_uart();							// Initialise UART
    53e0:	0e 94 58 44 	call	0x88b0	; 0x88b0 <init_uart>

	// Initial gyro calibration
	if (!CalibrateGyrosSlow())
    53e4:	0e 94 a7 22 	call	0x454e	; 0x454e <CalibrateGyrosSlow>
    53e8:	81 11       	cpse	r24, r1
    53ea:	28 c0       	rjmp	.+80     	; 0x543c <init+0x34a>
	{
		clear_buffer(buffer);
    53ec:	81 e0       	ldi	r24, 0x01	; 1
    53ee:	91 e0       	ldi	r25, 0x01	; 1
    53f0:	0e 94 5e 1f 	call	0x3ebc	; 0x3ebc <clear_buffer>
		LCD_Display_Text(61,(const unsigned char*)Verdana14,25,25); // "Cal. failed"
    53f4:	29 e1       	ldi	r18, 0x19	; 25
    53f6:	30 e0       	ldi	r19, 0x00	; 0
    53f8:	49 e1       	ldi	r20, 0x19	; 25
    53fa:	50 e0       	ldi	r21, 0x00	; 0
    53fc:	69 e4       	ldi	r22, 0x49	; 73
    53fe:	71 e0       	ldi	r23, 0x01	; 1
    5400:	8d e3       	ldi	r24, 0x3D	; 61
    5402:	90 e0       	ldi	r25, 0x00	; 0
    5404:	0e 94 3f 21 	call	0x427e	; 0x427e <LCD_Display_Text>
		write_buffer(buffer);
    5408:	81 e0       	ldi	r24, 0x01	; 1
    540a:	91 e0       	ldi	r25, 0x01	; 1
    540c:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <write_buffer>
    5410:	2f ef       	ldi	r18, 0xFF	; 255
    5412:	88 e0       	ldi	r24, 0x08	; 8
    5414:	9d e3       	ldi	r25, 0x3D	; 61
    5416:	21 50       	subi	r18, 0x01	; 1
    5418:	80 40       	sbci	r24, 0x00	; 0
    541a:	90 40       	sbci	r25, 0x00	; 0
    541c:	e1 f7       	brne	.-8      	; 0x5416 <init+0x324>
    541e:	00 c0       	rjmp	.+0      	; 0x5420 <init+0x32e>
    5420:	00 00       	nop
		_delay_ms(1000);
		
		// Reset
		cli();
    5422:	f8 94       	cli
		wdt_enable(WDTO_15MS);				// Watchdog on, 15ms
    5424:	28 e0       	ldi	r18, 0x08	; 8
    5426:	88 e1       	ldi	r24, 0x18	; 24
    5428:	90 e0       	ldi	r25, 0x00	; 0
    542a:	0f b6       	in	r0, 0x3f	; 63
    542c:	f8 94       	cli
    542e:	a8 95       	wdr
    5430:	80 93 60 00 	sts	0x0060, r24
    5434:	0f be       	out	0x3f, r0	; 63
    5436:	20 93 60 00 	sts	0x0060, r18
    543a:	ff cf       	rjmp	.-2      	; 0x543a <init+0x348>
		while(1);							// Wait for reboot
	}

	// Update voltage detection
	SystemVoltage = GetVbat();				// Check power-up battery voltage
    543c:	0e 94 b8 44 	call	0x8970	; 0x8970 <GetVbat>
    5440:	90 93 2f 05 	sts	0x052F, r25
    5444:	80 93 2e 05 	sts	0x052E, r24
	UpdateLimits();							// Update travel and trigger limits
    5448:	0e 94 91 35 	call	0x6b22	; 0x6b22 <UpdateLimits>

	// Disarm on start-up if Armed setting is ARMABLE
	if (Config.ArmMode == ARMABLE)
    544c:	80 91 3d 06 	lds	r24, 0x063D
    5450:	81 30       	cpi	r24, 0x01	; 1
    5452:	29 f4       	brne	.+10     	; 0x545e <init+0x36c>
	{
		General_error |= (1 << DISARMED); 	// Set disarmed bit
    5454:	80 91 20 05 	lds	r24, 0x0520
    5458:	84 60       	ori	r24, 0x04	; 4
    545a:	80 93 20 05 	sts	0x0520, r24
	}

	// Check to see that throttle is low if RC detected
	if (Interrupted)
    545e:	80 91 cc 07 	lds	r24, 0x07CC
    5462:	88 23       	and	r24, r24
    5464:	69 f0       	breq	.+26     	; 0x5480 <init+0x38e>
	{
		RxGetChannels();
    5466:	0e 94 ee 41 	call	0x83dc	; 0x83dc <RxGetChannels>
		if (MonopolarThrottle > THROTTLEIDLE)
    546a:	80 91 2b 08 	lds	r24, 0x082B
    546e:	90 91 2c 08 	lds	r25, 0x082C
    5472:	c3 97       	sbiw	r24, 0x33	; 51
    5474:	2c f0       	brlt	.+10     	; 0x5480 <init+0x38e>
		{
			General_error |= (1 << THROTTLE_HIGH); 	// Set throttle high error bit
    5476:	80 91 20 05 	lds	r24, 0x0520
    547a:	81 60       	ori	r24, 0x01	; 1
    547c:	80 93 20 05 	sts	0x0520, r24
		}
	}

	// Reset IMU
	reset_IMU();
    5480:	0e 94 30 28 	call	0x5060	; 0x5060 <reset_IMU>

	// Beep that init is complete
	menu_beep(1);
    5484:	81 e0       	ldi	r24, 0x01	; 1

} // init()
    5486:	cf 91       	pop	r28

	// Reset IMU
	reset_IMU();

	// Beep that init is complete
	menu_beep(1);
    5488:	0c 94 15 30 	jmp	0x602a	; 0x602a <menu_beep>

0000548c <__vector_18>:
//************************************************************
//* Timer 0 overflow handler for extending TMR1
//************************************************************

ISR(TIMER0_OVF_vect)
{
    548c:	1f 92       	push	r1
    548e:	0f 92       	push	r0
    5490:	0f b6       	in	r0, 0x3f	; 63
    5492:	0f 92       	push	r0
    5494:	11 24       	eor	r1, r1
    5496:	8f 93       	push	r24
    5498:	9f 93       	push	r25
	TMR0_counter++;
    549a:	80 91 cf 07 	lds	r24, 0x07CF
    549e:	90 91 d0 07 	lds	r25, 0x07D0
    54a2:	01 96       	adiw	r24, 0x01	; 1
    54a4:	90 93 d0 07 	sts	0x07D0, r25
    54a8:	80 93 cf 07 	sts	0x07CF, r24
}
    54ac:	9f 91       	pop	r25
    54ae:	8f 91       	pop	r24
    54b0:	0f 90       	pop	r0
    54b2:	0f be       	out	0x3f, r0	; 63
    54b4:	0f 90       	pop	r0
    54b6:	1f 90       	pop	r1
    54b8:	18 95       	reti

000054ba <__vector_2>:
//* Standard PWM mode
//* Sequential PWM inputs from a normal RC receiver
//************************************************************

ISR(INT1_vect)
{
    54ba:	1f 92       	push	r1
    54bc:	0f 92       	push	r0
    54be:	0f b6       	in	r0, 0x3f	; 63
    54c0:	0f 92       	push	r0
    54c2:	11 24       	eor	r1, r1
    54c4:	2f 93       	push	r18
    54c6:	3f 93       	push	r19
    54c8:	8f 93       	push	r24
    54ca:	9f 93       	push	r25
	// Log interrupts that occur during PWM generation
	if (JitterGate)	JitterFlag = true;	
    54cc:	80 91 e6 07 	lds	r24, 0x07E6
    54d0:	88 23       	and	r24, r24
    54d2:	19 f0       	breq	.+6      	; 0x54da <__vector_2+0x20>
    54d4:	81 e0       	ldi	r24, 0x01	; 1
    54d6:	80 93 e7 07 	sts	0x07E7, r24

	if (RX_ROLL)	// Rising
    54da:	4b 9b       	sbis	0x09, 3	; 9
    54dc:	09 c0       	rjmp	.+18     	; 0x54f0 <__vector_2+0x36>
	{
		RxChannelStart[AILERON] = TCNT1;
    54de:	80 91 84 00 	lds	r24, 0x0084
    54e2:	90 91 85 00 	lds	r25, 0x0085
    54e6:	90 93 d4 07 	sts	0x07D4, r25
    54ea:	80 93 d3 07 	sts	0x07D3, r24
    54ee:	14 c0       	rjmp	.+40     	; 0x5518 <__vector_2+0x5e>
	} 
	else 
	{				// Falling
		RxChannel[AILERON] = TCNT1 - RxChannelStart[AILERON];
    54f0:	80 91 84 00 	lds	r24, 0x0084
    54f4:	90 91 85 00 	lds	r25, 0x0085
    54f8:	20 91 d3 07 	lds	r18, 0x07D3
    54fc:	30 91 d4 07 	lds	r19, 0x07D4
    5500:	82 1b       	sub	r24, r18
    5502:	93 0b       	sbc	r25, r19
    5504:	90 93 bf 07 	sts	0x07BF, r25
    5508:	80 93 be 07 	sts	0x07BE, r24
		if (Config.PWM_Sync == AILERON) 
    550c:	80 91 dd 05 	lds	r24, 0x05DD
    5510:	81 30       	cpi	r24, 0x01	; 1
    5512:	11 f4       	brne	.+4      	; 0x5518 <__vector_2+0x5e>
		{
			Interrupted = true;						// Signal that interrupt block has finished
    5514:	80 93 cc 07 	sts	0x07CC, r24
		}
	}
}
    5518:	9f 91       	pop	r25
    551a:	8f 91       	pop	r24
    551c:	3f 91       	pop	r19
    551e:	2f 91       	pop	r18
    5520:	0f 90       	pop	r0
    5522:	0f be       	out	0x3f, r0	; 63
    5524:	0f 90       	pop	r0
    5526:	1f 90       	pop	r1
    5528:	18 95       	reti

0000552a <__vector_1>:

ISR(INT0_vect)
{
    552a:	1f 92       	push	r1
    552c:	0f 92       	push	r0
    552e:	0f b6       	in	r0, 0x3f	; 63
    5530:	0f 92       	push	r0
    5532:	11 24       	eor	r1, r1
    5534:	2f 93       	push	r18
    5536:	3f 93       	push	r19
    5538:	8f 93       	push	r24
    553a:	9f 93       	push	r25
	if (JitterGate)	JitterFlag = true;	
    553c:	80 91 e6 07 	lds	r24, 0x07E6
    5540:	88 23       	and	r24, r24
    5542:	19 f0       	breq	.+6      	; 0x554a <__vector_1+0x20>
    5544:	81 e0       	ldi	r24, 0x01	; 1
    5546:	80 93 e7 07 	sts	0x07E7, r24

	if (RX_PITCH)	// Rising 
    554a:	4a 9b       	sbis	0x09, 2	; 9
    554c:	09 c0       	rjmp	.+18     	; 0x5560 <__vector_1+0x36>
	{
		RxChannelStart[ELEVATOR] = TCNT1;
    554e:	80 91 84 00 	lds	r24, 0x0084
    5552:	90 91 85 00 	lds	r25, 0x0085
    5556:	90 93 d6 07 	sts	0x07D6, r25
    555a:	80 93 d5 07 	sts	0x07D5, r24
    555e:	15 c0       	rjmp	.+42     	; 0x558a <__vector_1+0x60>
	} 
	else 
	{				// Falling
		RxChannel[ELEVATOR] = TCNT1 - RxChannelStart[ELEVATOR];
    5560:	80 91 84 00 	lds	r24, 0x0084
    5564:	90 91 85 00 	lds	r25, 0x0085
    5568:	20 91 d5 07 	lds	r18, 0x07D5
    556c:	30 91 d6 07 	lds	r19, 0x07D6
    5570:	82 1b       	sub	r24, r18
    5572:	93 0b       	sbc	r25, r19
    5574:	90 93 c1 07 	sts	0x07C1, r25
    5578:	80 93 c0 07 	sts	0x07C0, r24
		if (Config.PWM_Sync == ELEVATOR) 
    557c:	80 91 dd 05 	lds	r24, 0x05DD
    5580:	82 30       	cpi	r24, 0x02	; 2
    5582:	19 f4       	brne	.+6      	; 0x558a <__vector_1+0x60>
		{
			Interrupted = true;						// Signal that interrupt block has finished
    5584:	81 e0       	ldi	r24, 0x01	; 1
    5586:	80 93 cc 07 	sts	0x07CC, r24
		}
	}
}
    558a:	9f 91       	pop	r25
    558c:	8f 91       	pop	r24
    558e:	3f 91       	pop	r19
    5590:	2f 91       	pop	r18
    5592:	0f 90       	pop	r0
    5594:	0f be       	out	0x3f, r0	; 63
    5596:	0f 90       	pop	r0
    5598:	1f 90       	pop	r1
    559a:	18 95       	reti

0000559c <__vector_7>:

ISR(PCINT3_vect)
{
    559c:	1f 92       	push	r1
    559e:	0f 92       	push	r0
    55a0:	0f b6       	in	r0, 0x3f	; 63
    55a2:	0f 92       	push	r0
    55a4:	11 24       	eor	r1, r1
    55a6:	2f 93       	push	r18
    55a8:	3f 93       	push	r19
    55aa:	8f 93       	push	r24
    55ac:	9f 93       	push	r25
	if (JitterGate)	JitterFlag = true;	
    55ae:	80 91 e6 07 	lds	r24, 0x07E6
    55b2:	88 23       	and	r24, r24
    55b4:	19 f0       	breq	.+6      	; 0x55bc <__vector_7+0x20>
    55b6:	81 e0       	ldi	r24, 0x01	; 1
    55b8:	80 93 e7 07 	sts	0x07E7, r24
		
	if (RX_COLL)	// Rising
    55bc:	48 9b       	sbis	0x09, 0	; 9
    55be:	09 c0       	rjmp	.+18     	; 0x55d2 <__vector_7+0x36>
	{
		RxChannelStart[THROTTLE] = TCNT1;
    55c0:	80 91 84 00 	lds	r24, 0x0084
    55c4:	90 91 85 00 	lds	r25, 0x0085
    55c8:	90 93 d2 07 	sts	0x07D2, r25
    55cc:	80 93 d1 07 	sts	0x07D1, r24
    55d0:	15 c0       	rjmp	.+42     	; 0x55fc <__vector_7+0x60>
	} 
	else 
	{				// Falling
		RxChannel[THROTTLE] = TCNT1 - RxChannelStart[THROTTLE];
    55d2:	80 91 84 00 	lds	r24, 0x0084
    55d6:	90 91 85 00 	lds	r25, 0x0085
    55da:	20 91 d1 07 	lds	r18, 0x07D1
    55de:	30 91 d2 07 	lds	r19, 0x07D2
    55e2:	82 1b       	sub	r24, r18
    55e4:	93 0b       	sbc	r25, r19
    55e6:	90 93 bd 07 	sts	0x07BD, r25
    55ea:	80 93 bc 07 	sts	0x07BC, r24
		if (Config.PWM_Sync == THROTTLE) 
    55ee:	80 91 dd 05 	lds	r24, 0x05DD
    55f2:	81 11       	cpse	r24, r1
    55f4:	03 c0       	rjmp	.+6      	; 0x55fc <__vector_7+0x60>
		{
			Interrupted = true;						// Signal that interrupt block has finished
    55f6:	81 e0       	ldi	r24, 0x01	; 1
    55f8:	80 93 cc 07 	sts	0x07CC, r24
		}
	}
}
    55fc:	9f 91       	pop	r25
    55fe:	8f 91       	pop	r24
    5600:	3f 91       	pop	r19
    5602:	2f 91       	pop	r18
    5604:	0f 90       	pop	r0
    5606:	0f be       	out	0x3f, r0	; 63
    5608:	0f 90       	pop	r0
    560a:	1f 90       	pop	r1
    560c:	18 95       	reti

0000560e <__vector_5>:


ISR(PCINT1_vect)
{
    560e:	1f 92       	push	r1
    5610:	0f 92       	push	r0
    5612:	0f b6       	in	r0, 0x3f	; 63
    5614:	0f 92       	push	r0
    5616:	11 24       	eor	r1, r1
    5618:	2f 93       	push	r18
    561a:	3f 93       	push	r19
    561c:	8f 93       	push	r24
    561e:	9f 93       	push	r25
	if (JitterGate)	JitterFlag = true;
    5620:	80 91 e6 07 	lds	r24, 0x07E6
    5624:	88 23       	and	r24, r24
    5626:	19 f0       	breq	.+6      	; 0x562e <__vector_5+0x20>
    5628:	81 e0       	ldi	r24, 0x01	; 1
    562a:	80 93 e7 07 	sts	0x07E7, r24

	if (RX_AUX)	// Rising
    562e:	18 9b       	sbis	0x03, 0	; 3
    5630:	09 c0       	rjmp	.+18     	; 0x5644 <__vector_5+0x36>
	{
		RxChannelStart[GEAR] = TCNT1;
    5632:	80 91 84 00 	lds	r24, 0x0084
    5636:	90 91 85 00 	lds	r25, 0x0085
    563a:	90 93 da 07 	sts	0x07DA, r25
    563e:	80 93 d9 07 	sts	0x07D9, r24
    5642:	15 c0       	rjmp	.+42     	; 0x566e <__vector_5+0x60>
	} 
	else 
	{				// Falling
		RxChannel[GEAR] = TCNT1 - RxChannelStart[GEAR];
    5644:	80 91 84 00 	lds	r24, 0x0084
    5648:	90 91 85 00 	lds	r25, 0x0085
    564c:	20 91 d9 07 	lds	r18, 0x07D9
    5650:	30 91 da 07 	lds	r19, 0x07DA
    5654:	82 1b       	sub	r24, r18
    5656:	93 0b       	sbc	r25, r19
    5658:	90 93 c5 07 	sts	0x07C5, r25
    565c:	80 93 c4 07 	sts	0x07C4, r24
		if (Config.PWM_Sync == GEAR) 
    5660:	80 91 dd 05 	lds	r24, 0x05DD
    5664:	84 30       	cpi	r24, 0x04	; 4
    5666:	19 f4       	brne	.+6      	; 0x566e <__vector_5+0x60>
		{
			Interrupted = true;						// Signal that interrupt block has finished
    5668:	81 e0       	ldi	r24, 0x01	; 1
    566a:	80 93 cc 07 	sts	0x07CC, r24
		}
	}
}
    566e:	9f 91       	pop	r25
    5670:	8f 91       	pop	r24
    5672:	3f 91       	pop	r19
    5674:	2f 91       	pop	r18
    5676:	0f 90       	pop	r0
    5678:	0f be       	out	0x3f, r0	; 63
    567a:	0f 90       	pop	r0
    567c:	1f 90       	pop	r1
    567e:	18 95       	reti

00005680 <__vector_3>:
// Compacted CPPM RX code thanks to Edgar
//
//************************************************************

ISR(INT2_vect)
{
    5680:	1f 92       	push	r1
    5682:	0f 92       	push	r0
    5684:	0f b6       	in	r0, 0x3f	; 63
    5686:	0f 92       	push	r0
    5688:	11 24       	eor	r1, r1
    568a:	2f 93       	push	r18
    568c:	3f 93       	push	r19
    568e:	4f 93       	push	r20
    5690:	5f 93       	push	r21
    5692:	8f 93       	push	r24
    5694:	9f 93       	push	r25
    5696:	af 93       	push	r26
    5698:	bf 93       	push	r27
    569a:	ef 93       	push	r30
    569c:	ff 93       	push	r31
	if (JitterGate)	JitterFlag = true;	
    569e:	80 91 e6 07 	lds	r24, 0x07E6
    56a2:	88 23       	and	r24, r24
    56a4:	19 f0       	breq	.+6      	; 0x56ac <__vector_3+0x2c>
    56a6:	81 e0       	ldi	r24, 0x01	; 1
    56a8:	80 93 e7 07 	sts	0x07E7, r24

    // Backup TCNT1
    uint16_t tCount;
    tCount = TCNT1;
    56ac:	80 91 84 00 	lds	r24, 0x0084
    56b0:	90 91 85 00 	lds	r25, 0x0085

	uint8_t curChannel;
	uint8_t prevChannel;

	if (Config.RxMode != CPPM_MODE)
    56b4:	20 91 dc 05 	lds	r18, 0x05DC
    56b8:	22 23       	and	r18, r18
    56ba:	d1 f0       	breq	.+52     	; 0x56f0 <__vector_3+0x70>
	{
		if (RX_YAW)	// Rising
    56bc:	1a 9b       	sbis	0x03, 2	; 3
    56be:	05 c0       	rjmp	.+10     	; 0x56ca <__vector_3+0x4a>
		{
			RxChannelStart[RUDDER] = tCount;
    56c0:	90 93 d8 07 	sts	0x07D8, r25
    56c4:	80 93 d7 07 	sts	0x07D7, r24
    56c8:	86 c0       	rjmp	.+268    	; 0x57d6 <__vector_3+0x156>
		} 
		else 
		{			// Falling
			RxChannel[RUDDER] = tCount - RxChannelStart[RUDDER];
    56ca:	20 91 d7 07 	lds	r18, 0x07D7
    56ce:	30 91 d8 07 	lds	r19, 0x07D8
    56d2:	82 1b       	sub	r24, r18
    56d4:	93 0b       	sbc	r25, r19
    56d6:	90 93 c3 07 	sts	0x07C3, r25
    56da:	80 93 c2 07 	sts	0x07C2, r24
			if (Config.PWM_Sync == RUDDER) 
    56de:	80 91 dd 05 	lds	r24, 0x05DD
    56e2:	83 30       	cpi	r24, 0x03	; 3
    56e4:	09 f0       	breq	.+2      	; 0x56e8 <__vector_3+0x68>
    56e6:	77 c0       	rjmp	.+238    	; 0x57d6 <__vector_3+0x156>
			{
				Interrupted = true;					// Signal that interrupt block has finished
    56e8:	81 e0       	ldi	r24, 0x01	; 1
    56ea:	80 93 cc 07 	sts	0x07CC, r24
    56ee:	73 c0       	rjmp	.+230    	; 0x57d6 <__vector_3+0x156>
	// CPPM receivers.
	//************************************************************
	else
	{
		// Only respond to negative-going interrupts
		if (CPPM) return;
    56f0:	1a 99       	sbic	0x03, 2	; 3
    56f2:	71 c0       	rjmp	.+226    	; 0x57d6 <__vector_3+0x156>

		// Check to see if previous period was a sync pulse or too small to be valid
		// If so, reset the channel number
		if (((tCount - PPMSyncStart) > SYNCPULSEWIDTH) || ((tCount - PPMSyncStart) < MINPULSEWIDTH))
    56f4:	20 91 e4 07 	lds	r18, 0x07E4
    56f8:	30 91 e5 07 	lds	r19, 0x07E5
    56fc:	ac 01       	movw	r20, r24
    56fe:	42 1b       	sub	r20, r18
    5700:	53 0b       	sbc	r21, r19
    5702:	9a 01       	movw	r18, r20
    5704:	2f 35       	cpi	r18, 0x5F	; 95
    5706:	3a 41       	sbci	r19, 0x1A	; 26
    5708:	58 f4       	brcc	.+22     	; 0x5720 <__vector_3+0xa0>
    570a:	20 91 e4 07 	lds	r18, 0x07E4
    570e:	30 91 e5 07 	lds	r19, 0x07E5
    5712:	ac 01       	movw	r20, r24
    5714:	42 1b       	sub	r20, r18
    5716:	53 0b       	sbc	r21, r19
    5718:	9a 01       	movw	r18, r20
    571a:	2e 3e       	cpi	r18, 0xEE	; 238
    571c:	32 40       	sbci	r19, 0x02	; 2
    571e:	10 f4       	brcc	.+4      	; 0x5724 <__vector_3+0xa4>
		{
			ch_num = 0;
    5720:	10 92 e3 07 	sts	0x07E3, r1
		}

		// Update PPMSyncStart with current value
		PPMSyncStart = tCount;
    5724:	90 93 e5 07 	sts	0x07E5, r25
    5728:	80 93 e4 07 	sts	0x07E4, r24

		// Get the channel number of the current channel in the requested channel order
        curChannel = Config.ChannelOrder[ch_num];
    572c:	e0 91 e3 07 	lds	r30, 0x07E3
    5730:	f0 e0       	ldi	r31, 0x00	; 0
    5732:	ed 54       	subi	r30, 0x4D	; 77
    5734:	fa 4f       	sbci	r31, 0xFA	; 250
    5736:	e1 81       	ldd	r30, Z+1	; 0x01

		// Set up previous channel number based on the requested channel order
		if (ch_num > 0)
    5738:	20 91 e3 07 	lds	r18, 0x07E3
    573c:	22 23       	and	r18, r18
    573e:	39 f0       	breq	.+14     	; 0x574e <__vector_3+0xce>
		{
			prevChannel = Config.ChannelOrder[ch_num-1];
    5740:	a0 91 e3 07 	lds	r26, 0x07E3
    5744:	b0 e0       	ldi	r27, 0x00	; 0
    5746:	ad 54       	subi	r26, 0x4D	; 77
    5748:	ba 4f       	sbci	r27, 0xFA	; 250
    574a:	2c 91       	ld	r18, X
    574c:	01 c0       	rjmp	.+2      	; 0x5750 <__vector_3+0xd0>
		}
		else
		{
			prevChannel = 0;
    574e:	20 e0       	ldi	r18, 0x00	; 0
		}

		// Measure the channel data only for the first MAX_CPPM_CHANNELS (currently 8)
		// Prevent code from over-running RxChannelStart[]
        if (ch_num < MAX_CPPM_CHANNELS)
    5750:	30 91 e3 07 	lds	r19, 0x07E3
    5754:	38 30       	cpi	r19, 0x08	; 8
    5756:	38 f4       	brcc	.+14     	; 0x5766 <__vector_3+0xe6>
		{
            RxChannelStart[curChannel] = tCount;
    5758:	f0 e0       	ldi	r31, 0x00	; 0
    575a:	ee 0f       	add	r30, r30
    575c:	ff 1f       	adc	r31, r31
    575e:	ef 52       	subi	r30, 0x2F	; 47
    5760:	f8 4f       	sbci	r31, 0xF8	; 248
    5762:	91 83       	std	Z+1, r25	; 0x01
    5764:	80 83       	st	Z, r24
		}

		// When ch_num = 0, the first channel has not yet been measured.
		// That only occurs at the second pulse. Prevent code from over-running RxChannel[]
        if ((ch_num > 0) && (ch_num <= MAX_CPPM_CHANNELS))
    5766:	30 91 e3 07 	lds	r19, 0x07E3
    576a:	33 23       	and	r19, r19
    576c:	99 f0       	breq	.+38     	; 0x5794 <__vector_3+0x114>
    576e:	30 91 e3 07 	lds	r19, 0x07E3
    5772:	39 30       	cpi	r19, 0x09	; 9
    5774:	78 f4       	brcc	.+30     	; 0x5794 <__vector_3+0x114>
        {
		   RxChannel[prevChannel] = tCount - RxChannelStart[prevChannel];
    5776:	30 e0       	ldi	r19, 0x00	; 0
    5778:	22 0f       	add	r18, r18
    577a:	33 1f       	adc	r19, r19
    577c:	f9 01       	movw	r30, r18
    577e:	ef 52       	subi	r30, 0x2F	; 47
    5780:	f8 4f       	sbci	r31, 0xF8	; 248
    5782:	40 81       	ld	r20, Z
    5784:	51 81       	ldd	r21, Z+1	; 0x01
    5786:	84 1b       	sub	r24, r20
    5788:	95 0b       	sbc	r25, r21
    578a:	f9 01       	movw	r30, r18
    578c:	e4 54       	subi	r30, 0x44	; 68
    578e:	f8 4f       	sbci	r31, 0xF8	; 248
    5790:	91 83       	std	Z+1, r25	; 0x01
    5792:	80 83       	st	Z, r24
		}

        // Increment to the next channel
		ch_num++;
    5794:	80 91 e3 07 	lds	r24, 0x07E3
    5798:	8f 5f       	subi	r24, 0xFF	; 255
    579a:	80 93 e3 07 	sts	0x07E3, r24

		// Work out the highest channel number automatically.
		// Update the maximum channel seen so far.
		if (ch_num > max_chan) 
    579e:	90 91 e3 07 	lds	r25, 0x07E3
    57a2:	80 91 cd 07 	lds	r24, 0x07CD
    57a6:	89 17       	cp	r24, r25
    57a8:	28 f4       	brcc	.+10     	; 0x57b4 <__vector_3+0x134>
		{
			max_chan = ch_num;					// Update max channel number
    57aa:	80 91 e3 07 	lds	r24, 0x07E3
    57ae:	80 93 cd 07 	sts	0x07CD, r24
    57b2:	09 c0       	rjmp	.+18     	; 0x57c6 <__vector_3+0x146>
		}
		// If the current channel is the highest channel, CPPM is complete
		else if (ch_num == max_chan)
    57b4:	90 91 e3 07 	lds	r25, 0x07E3
    57b8:	80 91 cd 07 	lds	r24, 0x07CD
    57bc:	98 13       	cpse	r25, r24
    57be:	03 c0       	rjmp	.+6      	; 0x57c6 <__vector_3+0x146>
		{
			Interrupted = true;					// Signal that interrupt block has finished
    57c0:	81 e0       	ldi	r24, 0x01	; 1
    57c2:	80 93 cc 07 	sts	0x07CC, r24
		}
	
		// If the signal is ever lost, reset measured max channel number
		// and force a recalculation
		if (Overdue)
    57c6:	80 91 19 05 	lds	r24, 0x0519
    57ca:	88 23       	and	r24, r24
    57cc:	21 f0       	breq	.+8      	; 0x57d6 <__vector_3+0x156>
		{
			max_chan = 0;
    57ce:	10 92 cd 07 	sts	0x07CD, r1
			Overdue = false;
    57d2:	10 92 19 05 	sts	0x0519, r1
		}
	}
} // ISR(INT2_vect)
    57d6:	ff 91       	pop	r31
    57d8:	ef 91       	pop	r30
    57da:	bf 91       	pop	r27
    57dc:	af 91       	pop	r26
    57de:	9f 91       	pop	r25
    57e0:	8f 91       	pop	r24
    57e2:	5f 91       	pop	r21
    57e4:	4f 91       	pop	r20
    57e6:	3f 91       	pop	r19
    57e8:	2f 91       	pop	r18
    57ea:	0f 90       	pop	r0
    57ec:	0f be       	out	0x3f, r0	; 63
    57ee:	0f 90       	pop	r0
    57f0:	1f 90       	pop	r1
    57f2:	18 95       	reti

000057f4 <TIM16_ReadTCNT1>:
{
	uint8_t sreg;
	uint16_t i;
	
	/* Save global interrupt flag */
	sreg = SREG;
    57f4:	2f b7       	in	r18, 0x3f	; 63
	
	/* Disable interrupts */
	cli();
    57f6:	f8 94       	cli
	
	/* Read TCNTn into i */
	i = TCNT1;
    57f8:	80 91 84 00 	lds	r24, 0x0084
    57fc:	90 91 85 00 	lds	r25, 0x0085
	
	/* Restore global interrupt flag */
	SREG = sreg;
    5800:	2f bf       	out	0x3f, r18	; 63
	return i;
}
    5802:	08 95       	ret

00005804 <__vector_20>:
//************************************************************
//* Serial receive interrupt
//************************************************************

ISR(USART0_RX_vect)
{
    5804:	1f 92       	push	r1
    5806:	0f 92       	push	r0
    5808:	0f b6       	in	r0, 0x3f	; 63
    580a:	0f 92       	push	r0
    580c:	11 24       	eor	r1, r1
    580e:	2f 93       	push	r18
    5810:	3f 93       	push	r19
    5812:	4f 93       	push	r20
    5814:	5f 93       	push	r21
    5816:	6f 93       	push	r22
    5818:	7f 93       	push	r23
    581a:	8f 93       	push	r24
    581c:	9f 93       	push	r25
    581e:	af 93       	push	r26
    5820:	bf 93       	push	r27
    5822:	cf 93       	push	r28
    5824:	ef 93       	push	r30
    5826:	ff 93       	push	r31
	//************************************************************
	//* Common entry code
	//************************************************************

	// Read byte first
	temp = UDR0;
    5828:	c0 91 c6 00 	lds	r28, 0x00C6

	// Save current time stamp
	Save_TCNT1 = TIM16_ReadTCNT1();
    582c:	0e 94 fa 2b 	call	0x57f4	; 0x57f4 <TIM16_ReadTCNT1>
	
	// Work out interval properly
	// Note that CurrentPeriod cannot be larger than 26.2ms
	
	//CurrentPeriod = Save_TCNT1 - PPMSyncStart;
	if (Save_TCNT1 < PPMSyncStart)
    5830:	20 91 e4 07 	lds	r18, 0x07E4
    5834:	30 91 e5 07 	lds	r19, 0x07E5
	{
		CurrentPeriod = (65536 - PPMSyncStart + Save_TCNT1);
	}
	else
	{
		CurrentPeriod = (Save_TCNT1 - PPMSyncStart);
    5838:	20 91 e4 07 	lds	r18, 0x07E4
    583c:	30 91 e5 07 	lds	r19, 0x07E5
    5840:	ac 01       	movw	r20, r24
    5842:	42 1b       	sub	r20, r18
    5844:	53 0b       	sbc	r21, r19
    5846:	9a 01       	movw	r18, r20
	}

	// Handle start of new packet
	if (CurrentPeriod > PACKET_TIMER) // 5.0ms
    5848:	25 3c       	cpi	r18, 0xC5	; 197
    584a:	59 e0       	ldi	r21, 0x09	; 9
    584c:	35 07       	cpc	r19, r21
    584e:	90 f0       	brcs	.+36     	; 0x5874 <__vector_20+0x70>
	{
		// Reset variables
		rcindex = 0;
    5850:	10 92 bb 07 	sts	0x07BB, r1
		bytecount = 0;
    5854:	10 92 ce 07 	sts	0x07CE, r1
		ch_num = 0;
    5858:	10 92 e3 07 	sts	0x07E3, r1
		checksum = 0;
    585c:	10 92 e9 07 	sts	0x07E9, r1
    5860:	10 92 e8 07 	sts	0x07E8, r1
		chanmask16 = 0;
    5864:	10 92 e2 07 	sts	0x07E2, r1
    5868:	10 92 e1 07 	sts	0x07E1, r1

		// Save frame rate to global
		FrameRate = CurrentPeriod;
    586c:	30 93 eb 07 	sts	0x07EB, r19
    5870:	20 93 ea 07 	sts	0x07EA, r18
	}

	// Timestamp this interrupt
	PPMSyncStart = Save_TCNT1;
    5874:	90 93 e5 07 	sts	0x07E5, r25
    5878:	80 93 e4 07 	sts	0x07E4, r24
	
	// Put received byte in buffer if space available
	if (rcindex < SBUFFER_SIZE)
    587c:	80 91 bb 07 	lds	r24, 0x07BB
    5880:	89 31       	cpi	r24, 0x19	; 25
    5882:	50 f4       	brcc	.+20     	; 0x5898 <__vector_20+0x94>
	{
		sBuffer[rcindex++] = temp;			
    5884:	e0 91 bb 07 	lds	r30, 0x07BB
    5888:	81 e0       	ldi	r24, 0x01	; 1
    588a:	8e 0f       	add	r24, r30
    588c:	80 93 bb 07 	sts	0x07BB, r24
    5890:	f0 e0       	ldi	r31, 0x00	; 0
    5892:	ec 5b       	subi	r30, 0xBC	; 188
    5894:	fa 4f       	sbci	r31, 0xFA	; 250
    5896:	c0 83       	st	Z, r28
	//* 	bit0 = n/a
	//* 24 endbyte = 00000000b (SBUS) or (data % 0xCF) (SBUS2)
	//*
	//************************************************************

	if (Config.RxMode == SBUS)
    5898:	80 91 dc 05 	lds	r24, 0x05DC
    589c:	82 30       	cpi	r24, 0x02	; 2
    589e:	09 f0       	breq	.+2      	; 0x58a2 <__vector_20+0x9e>
    58a0:	90 c0       	rjmp	.+288    	; 0x59c2 <__vector_20+0x1be>
	{
		// Flag that packet has completed
		if ((bytecount == 24) && ((temp == 0x00) || ((temp % 0xCF) == 0x04)))
    58a2:	80 91 ce 07 	lds	r24, 0x07CE
    58a6:	88 31       	cpi	r24, 0x18	; 24
    58a8:	09 f0       	breq	.+2      	; 0x58ac <__vector_20+0xa8>
    58aa:	fc c0       	rjmp	.+504    	; 0x5aa4 <__vector_20+0x2a0>
    58ac:	cc 23       	and	r28, r28
    58ae:	59 f0       	breq	.+22     	; 0x58c6 <__vector_20+0xc2>
    58b0:	81 e0       	ldi	r24, 0x01	; 1
    58b2:	cf 3c       	cpi	r28, 0xCF	; 207
    58b4:	08 f4       	brcc	.+2      	; 0x58b8 <__vector_20+0xb4>
    58b6:	80 e0       	ldi	r24, 0x00	; 0
    58b8:	91 e3       	ldi	r25, 0x31	; 49
    58ba:	89 9f       	mul	r24, r25
    58bc:	c0 0d       	add	r28, r0
    58be:	11 24       	eor	r1, r1
    58c0:	c4 30       	cpi	r28, 0x04	; 4
    58c2:	09 f0       	breq	.+2      	; 0x58c6 <__vector_20+0xc2>
    58c4:	ef c0       	rjmp	.+478    	; 0x5aa4 <__vector_20+0x2a0>
		{
			// If frame lost, ignore packet
			if ((sBuffer[23] & 0x20) == 0)
    58c6:	80 91 5b 05 	lds	r24, 0x055B
    58ca:	85 fd       	sbrc	r24, 5
    58cc:	eb c0       	rjmp	.+470    	; 0x5aa4 <__vector_20+0x2a0>
			{
				// RC sync established
				Interrupted = true;
    58ce:	81 e0       	ldi	r24, 0x01	; 1
    58d0:	80 93 cc 07 	sts	0x07CC, r24
    58d4:	80 e0       	ldi	r24, 0x00	; 0
    58d6:	90 e0       	ldi	r25, 0x00	; 0

				// Clear channel data
				for (j = 0; j < MAX_RC_CHANNELS; j++)
				{
					RxChannel[j] = 0;
    58d8:	fc 01       	movw	r30, r24
    58da:	ee 0f       	add	r30, r30
    58dc:	ff 1f       	adc	r31, r31
    58de:	e4 54       	subi	r30, 0x44	; 68
    58e0:	f8 4f       	sbci	r31, 0xF8	; 248
    58e2:	11 82       	std	Z+1, r1	; 0x01
    58e4:	10 82       	st	Z, r1
    58e6:	01 96       	adiw	r24, 0x01	; 1
			{
				// RC sync established
				Interrupted = true;

				// Clear channel data
				for (j = 0; j < MAX_RC_CHANNELS; j++)
    58e8:	88 30       	cpi	r24, 0x08	; 8
    58ea:	91 05       	cpc	r25, r1
    58ec:	a9 f7       	brne	.-22     	; 0x58d8 <__vector_20+0xd4>
    58ee:	a8 e5       	ldi	r26, 0x58	; 88
    58f0:	70 e0       	ldi	r23, 0x00	; 0
    58f2:	c0 e0       	ldi	r28, 0x00	; 0
    58f4:	60 e0       	ldi	r22, 0x00	; 0
    58f6:	b1 e0       	ldi	r27, 0x01	; 1
                for (j = 0; j < 88; j++)
                {
                    if (sBuffer[sindex] & (1<<chan_mask))
                    {
						// Place the RC data into the correct channel order for the transmitted system
						RxChannel[Config.ChannelOrder[chan_shift]] |= (1<<data_mask);
    58f8:	21 e0       	ldi	r18, 0x01	; 1
    58fa:	30 e0       	ldi	r19, 0x00	; 0

                // Deconstruct S-Bus data
				// 8 channels * 11 bits = 88 bits
                for (j = 0; j < 88; j++)
                {
                    if (sBuffer[sindex] & (1<<chan_mask))
    58fc:	eb 2f       	mov	r30, r27
    58fe:	f0 e0       	ldi	r31, 0x00	; 0
    5900:	ec 5b       	subi	r30, 0xBC	; 188
    5902:	fa 4f       	sbci	r31, 0xFA	; 250
    5904:	80 81       	ld	r24, Z
    5906:	90 e0       	ldi	r25, 0x00	; 0
    5908:	06 2e       	mov	r0, r22
    590a:	02 c0       	rjmp	.+4      	; 0x5910 <__vector_20+0x10c>
    590c:	95 95       	asr	r25
    590e:	87 95       	ror	r24
    5910:	0a 94       	dec	r0
    5912:	e2 f7       	brpl	.-8      	; 0x590c <__vector_20+0x108>
    5914:	80 ff       	sbrs	r24, 0
    5916:	17 c0       	rjmp	.+46     	; 0x5946 <__vector_20+0x142>
                    {
						// Place the RC data into the correct channel order for the transmitted system
						RxChannel[Config.ChannelOrder[chan_shift]] |= (1<<data_mask);
    5918:	ec 2f       	mov	r30, r28
    591a:	f0 e0       	ldi	r31, 0x00	; 0
    591c:	ed 54       	subi	r30, 0x4D	; 77
    591e:	fa 4f       	sbci	r31, 0xFA	; 250
    5920:	e1 81       	ldd	r30, Z+1	; 0x01
    5922:	f0 e0       	ldi	r31, 0x00	; 0
    5924:	ee 0f       	add	r30, r30
    5926:	ff 1f       	adc	r31, r31
    5928:	e4 54       	subi	r30, 0x44	; 68
    592a:	f8 4f       	sbci	r31, 0xF8	; 248
    592c:	80 81       	ld	r24, Z
    592e:	91 81       	ldd	r25, Z+1	; 0x01
    5930:	a9 01       	movw	r20, r18
    5932:	07 2e       	mov	r0, r23
    5934:	02 c0       	rjmp	.+4      	; 0x593a <__vector_20+0x136>
    5936:	44 0f       	add	r20, r20
    5938:	55 1f       	adc	r21, r21
    593a:	0a 94       	dec	r0
    593c:	e2 f7       	brpl	.-8      	; 0x5936 <__vector_20+0x132>
    593e:	84 2b       	or	r24, r20
    5940:	95 2b       	or	r25, r21
    5942:	91 83       	std	Z+1, r25	; 0x01
    5944:	80 83       	st	Z, r24
                    }

                    chan_mask++;
    5946:	6f 5f       	subi	r22, 0xFF	; 255
                    data_mask++;
    5948:	7f 5f       	subi	r23, 0xFF	; 255

                    // If we have done 8 bits, move to next byte in buffer
					if (chan_mask == 8)
    594a:	68 30       	cpi	r22, 0x08	; 8
    594c:	11 f4       	brne	.+4      	; 0x5952 <__vector_20+0x14e>
                    {
                        chan_mask =0;
                        sindex++;
    594e:	bf 5f       	subi	r27, 0xFF	; 255
                    data_mask++;

                    // If we have done 8 bits, move to next byte in buffer
					if (chan_mask == 8)
                    {
                        chan_mask =0;
    5950:	60 e0       	ldi	r22, 0x00	; 0
                        sindex++;
                    }

                    // If we have reconstructed all 11 bits of one channel's data (2047)
					// increment the channel number
					if (data_mask == 11)
    5952:	7b 30       	cpi	r23, 0x0B	; 11
    5954:	11 f4       	brne	.+4      	; 0x595a <__vector_20+0x156>
                    {
                        data_mask =0;
                        chan_shift++;
    5956:	cf 5f       	subi	r28, 0xFF	; 255

                    // If we have reconstructed all 11 bits of one channel's data (2047)
					// increment the channel number
					if (data_mask == 11)
                    {
                        data_mask =0;
    5958:	70 e0       	ldi	r23, 0x00	; 0
    595a:	a1 50       	subi	r26, 0x01	; 1
				// Start from second byte
				sindex = 1;

                // Deconstruct S-Bus data
				// 8 channels * 11 bits = 88 bits
                for (j = 0; j < 88; j++)
    595c:	79 f6       	brne	.-98     	; 0x58fc <__vector_20+0xf8>
    595e:	40 e0       	ldi	r20, 0x00	; 0
    5960:	50 e0       	ldi	r21, 0x00	; 0

				// Convert to  OpenAero2 values (0~2047 -> 2500~4999)
				for (j = 0; j < MAX_RC_CHANNELS; j++)
				{
					// Subtract weird-ass Futaba offset
					itemp16= RxChannel[j] - 1024;	
    5962:	fa 01       	movw	r30, r20
    5964:	ee 0f       	add	r30, r30
    5966:	ff 1f       	adc	r31, r31
    5968:	e4 54       	subi	r30, 0x44	; 68
    596a:	f8 4f       	sbci	r31, 0xF8	; 248
    596c:	20 81       	ld	r18, Z
    596e:	31 81       	ldd	r19, Z+1	; 0x01
    5970:	34 50       	subi	r19, 0x04	; 4
					
					// Expand into OpenAero2 units							
					itemp16 = itemp16 + (itemp16 >> 2) + (itemp16 >> 3) + (itemp16 >> 4) + (itemp16 >> 5); 	// Quick multiply by 1.469 :)
    5972:	c9 01       	movw	r24, r18
    5974:	95 95       	asr	r25
    5976:	87 95       	ror	r24
    5978:	95 95       	asr	r25
    597a:	87 95       	ror	r24
    597c:	82 0f       	add	r24, r18
    597e:	93 1f       	adc	r25, r19
    5980:	b9 01       	movw	r22, r18
    5982:	a3 e0       	ldi	r26, 0x03	; 3
    5984:	75 95       	asr	r23
    5986:	67 95       	ror	r22
    5988:	aa 95       	dec	r26
    598a:	e1 f7       	brne	.-8      	; 0x5984 <__vector_20+0x180>
    598c:	86 0f       	add	r24, r22
    598e:	97 1f       	adc	r25, r23
    5990:	b9 01       	movw	r22, r18
    5992:	b4 e0       	ldi	r27, 0x04	; 4
    5994:	75 95       	asr	r23
    5996:	67 95       	ror	r22
    5998:	ba 95       	dec	r27
    599a:	e1 f7       	brne	.-8      	; 0x5994 <__vector_20+0x190>
    599c:	86 0f       	add	r24, r22
    599e:	97 1f       	adc	r25, r23
    59a0:	c5 e0       	ldi	r28, 0x05	; 5
    59a2:	35 95       	asr	r19
    59a4:	27 95       	ror	r18
    59a6:	ca 95       	dec	r28
    59a8:	e1 f7       	brne	.-8      	; 0x59a2 <__vector_20+0x19e>
    59aa:	82 0f       	add	r24, r18
    59ac:	93 1f       	adc	r25, r19
					//itemp16 = itemp16 + (itemp16 >> 1); // Quicker mulitply by 1.5

					// Add back in OpenAero2 offset
					RxChannel[j] = itemp16 + 3750;				
    59ae:	8a 55       	subi	r24, 0x5A	; 90
    59b0:	91 4f       	sbci	r25, 0xF1	; 241
    59b2:	91 83       	std	Z+1, r25	; 0x01
    59b4:	80 83       	st	Z, r24
    59b6:	4f 5f       	subi	r20, 0xFF	; 255
    59b8:	5f 4f       	sbci	r21, 0xFF	; 255
                        chan_shift++;
                    }
                }

				// Convert to  OpenAero2 values (0~2047 -> 2500~4999)
				for (j = 0; j < MAX_RC_CHANNELS; j++)
    59ba:	48 30       	cpi	r20, 0x08	; 8
    59bc:	51 05       	cpc	r21, r1
    59be:	89 f6       	brne	.-94     	; 0x5962 <__vector_20+0x15e>
    59c0:	71 c0       	rjmp	.+226    	; 0x5aa4 <__vector_20+0x2a0>
	//* 0 = 750us, 1023/2047 = 2250us
	//*
	//************************************************************

	// Handle Spektrum format
	if (Config.RxMode == SPEKTRUM)
    59c2:	83 30       	cpi	r24, 0x03	; 3
    59c4:	09 f0       	breq	.+2      	; 0x59c8 <__vector_20+0x1c4>
    59c6:	6e c0       	rjmp	.+220    	; 0x5aa4 <__vector_20+0x2a0>
	{
		// Process data when all packets received
		if (bytecount >= 15)
    59c8:	80 91 ce 07 	lds	r24, 0x07CE
    59cc:	8f 30       	cpi	r24, 0x0F	; 15
    59ce:	08 f4       	brcc	.+2      	; 0x59d2 <__vector_20+0x1ce>
    59d0:	69 c0       	rjmp	.+210    	; 0x5aa4 <__vector_20+0x2a0>
		{
			// Ahem... ah... just stick the last byte into the buffer manually...(hides)
			sBuffer[15] = temp;
    59d2:	c0 93 53 05 	sts	0x0553, r28

			// Set start of channel data per format
			sindex = 2; // Channel data from byte 3

			// Work out if this is 10 or 11 bit data
			if (sBuffer[1] & 0x10) 	// 0 for 10 bit resolution 1 for 11 bit resolution
    59d6:	80 91 45 05 	lds	r24, 0x0545
    59da:	84 ff       	sbrs	r24, 4
    59dc:	04 c0       	rjmp	.+8      	; 0x59e6 <__vector_20+0x1e2>
			{
				chan_mask = 0x78;	// 11 bit (2048)
				data_mask = 0x07;
    59de:	c7 e0       	ldi	r28, 0x07	; 7
				chan_shift = 0x03;
    59e0:	63 e0       	ldi	r22, 0x03	; 3
			sindex = 2; // Channel data from byte 3

			// Work out if this is 10 or 11 bit data
			if (sBuffer[1] & 0x10) 	// 0 for 10 bit resolution 1 for 11 bit resolution
			{
				chan_mask = 0x78;	// 11 bit (2048)
    59e2:	78 e7       	ldi	r23, 0x78	; 120
    59e4:	03 c0       	rjmp	.+6      	; 0x59ec <__vector_20+0x1e8>
				chan_shift = 0x03;
			}
			else
			{
				chan_mask = 0x3C;	// 10 bit (1024)
				data_mask = 0x03;
    59e6:	c3 e0       	ldi	r28, 0x03	; 3
				chan_shift = 0x02;
    59e8:	62 e0       	ldi	r22, 0x02	; 2
				data_mask = 0x07;
				chan_shift = 0x03;
			}
			else
			{
				chan_mask = 0x3C;	// 10 bit (1024)
    59ea:	7c e3       	ldi	r23, 0x3C	; 60
    59ec:	e7 e4       	ldi	r30, 0x47	; 71
    59ee:	f5 e0       	ldi	r31, 0x05	; 5
    59f0:	df 01       	movw	r26, r30
    59f2:	11 97       	sbiw	r26, 0x01	; 1
			// Work out which channel the data is intended for from the channel number data
			// Channels can also be in the second packet. Spektrum has 7 channels per packet.
			for (j = 0; j < 7; j++)
			{
				// Extract channel number
				ch_num = (sBuffer[sindex] & chan_mask) >> chan_shift;
    59f4:	2c 91       	ld	r18, X
    59f6:	82 2f       	mov	r24, r18
    59f8:	87 23       	and	r24, r23
    59fa:	90 e0       	ldi	r25, 0x00	; 0
    59fc:	06 2e       	mov	r0, r22
    59fe:	02 c0       	rjmp	.+4      	; 0x5a04 <__vector_20+0x200>
    5a00:	95 95       	asr	r25
    5a02:	87 95       	ror	r24
    5a04:	0a 94       	dec	r0
    5a06:	e2 f7       	brpl	.-8      	; 0x5a00 <__vector_20+0x1fc>
    5a08:	80 93 e3 07 	sts	0x07E3, r24

				// Reconstruct channel data
				temp16 = ((sBuffer[sindex] & data_mask) << 8) + sBuffer[sindex + 1];
    5a0c:	80 81       	ld	r24, Z

				// Expand to OpenAero2 units if a valid channel
				// Blank channels have the channel number of 16
				if (ch_num < MAX_RC_CHANNELS)
    5a0e:	90 91 e3 07 	lds	r25, 0x07E3
    5a12:	98 30       	cpi	r25, 0x08	; 8
    5a14:	f0 f5       	brcc	.+124    	; 0x5a92 <__vector_20+0x28e>
			{
				// Extract channel number
				ch_num = (sBuffer[sindex] & chan_mask) >> chan_shift;

				// Reconstruct channel data
				temp16 = ((sBuffer[sindex] & data_mask) << 8) + sBuffer[sindex + 1];
    5a16:	2c 23       	and	r18, r28
    5a18:	30 e0       	ldi	r19, 0x00	; 0
    5a1a:	32 2f       	mov	r19, r18
    5a1c:	22 27       	eor	r18, r18
    5a1e:	28 0f       	add	r18, r24
    5a20:	31 1d       	adc	r19, r1
				// Expand to OpenAero2 units if a valid channel
				// Blank channels have the channel number of 16
				if (ch_num < MAX_RC_CHANNELS)
				{
					// Subtract Spektrum center offset
					if (chan_shift == 0x03) // 11-bit
    5a22:	63 30       	cpi	r22, 0x03	; 3
    5a24:	11 f4       	brne	.+4      	; 0x5a2a <__vector_20+0x226>
					{
						itemp16 = temp16 - 1024;
    5a26:	34 50       	subi	r19, 0x04	; 4
    5a28:	01 c0       	rjmp	.+2      	; 0x5a2c <__vector_20+0x228>
					}
					else
					{
						itemp16 = temp16 - 512;	
    5a2a:	32 50       	subi	r19, 0x02	; 2
					}					

					// Quick multiply by 2.93
					itemp16 = (itemp16 << 1) + (itemp16 >> 1) + (itemp16 >> 2) + (itemp16 >> 3) + (itemp16 >> 4); 
    5a2c:	c9 01       	movw	r24, r18
    5a2e:	88 0f       	add	r24, r24
    5a30:	99 1f       	adc	r25, r25
    5a32:	a9 01       	movw	r20, r18
    5a34:	55 95       	asr	r21
    5a36:	47 95       	ror	r20
    5a38:	84 0f       	add	r24, r20
    5a3a:	95 1f       	adc	r25, r21
    5a3c:	a9 01       	movw	r20, r18
    5a3e:	55 95       	asr	r21
    5a40:	47 95       	ror	r20
    5a42:	55 95       	asr	r21
    5a44:	47 95       	ror	r20
    5a46:	84 0f       	add	r24, r20
    5a48:	95 1f       	adc	r25, r21
    5a4a:	a9 01       	movw	r20, r18
    5a4c:	a3 e0       	ldi	r26, 0x03	; 3
    5a4e:	55 95       	asr	r21
    5a50:	47 95       	ror	r20
    5a52:	aa 95       	dec	r26
    5a54:	e1 f7       	brne	.-8      	; 0x5a4e <__vector_20+0x24a>
    5a56:	84 0f       	add	r24, r20
    5a58:	95 1f       	adc	r25, r21
    5a5a:	b4 e0       	ldi	r27, 0x04	; 4
    5a5c:	35 95       	asr	r19
    5a5e:	27 95       	ror	r18
    5a60:	ba 95       	dec	r27
    5a62:	e1 f7       	brne	.-8      	; 0x5a5c <__vector_20+0x258>
    5a64:	82 0f       	add	r24, r18
    5a66:	93 1f       	adc	r25, r19

					if (chan_shift == 0x03) // 11-bit
    5a68:	63 30       	cpi	r22, 0x03	; 3
    5a6a:	11 f4       	brne	.+4      	; 0x5a70 <__vector_20+0x26c>
					{
						// Divide in case of 11-bit value
						itemp16 = itemp16 >> 1;								
    5a6c:	95 95       	asr	r25
    5a6e:	87 95       	ror	r24
					}

					// Add back in OpenAero2 offset
					itemp16 += 3750;										

					RxChannel[Config.ChannelOrder[ch_num]] = itemp16;
    5a70:	a0 91 e3 07 	lds	r26, 0x07E3
    5a74:	b0 e0       	ldi	r27, 0x00	; 0
    5a76:	ad 54       	subi	r26, 0x4D	; 77
    5a78:	ba 4f       	sbci	r27, 0xFA	; 250
    5a7a:	11 96       	adiw	r26, 0x01	; 1
    5a7c:	ac 91       	ld	r26, X
    5a7e:	b0 e0       	ldi	r27, 0x00	; 0
						// Divide in case of 11-bit value
						itemp16 = itemp16 >> 1;								
					}

					// Add back in OpenAero2 offset
					itemp16 += 3750;										
    5a80:	8a 55       	subi	r24, 0x5A	; 90
    5a82:	91 4f       	sbci	r25, 0xF1	; 241

					RxChannel[Config.ChannelOrder[ch_num]] = itemp16;
    5a84:	aa 0f       	add	r26, r26
    5a86:	bb 1f       	adc	r27, r27
    5a88:	a4 54       	subi	r26, 0x44	; 68
    5a8a:	b8 4f       	sbci	r27, 0xF8	; 248
    5a8c:	11 96       	adiw	r26, 0x01	; 1
    5a8e:	9c 93       	st	X, r25
    5a90:	8e 93       	st	-X, r24
    5a92:	32 96       	adiw	r30, 0x02	; 2
				chan_shift = 0x02;
			}

			// Work out which channel the data is intended for from the channel number data
			// Channels can also be in the second packet. Spektrum has 7 channels per packet.
			for (j = 0; j < 7; j++)
    5a94:	45 e0       	ldi	r20, 0x05	; 5
    5a96:	e5 35       	cpi	r30, 0x55	; 85
    5a98:	f4 07       	cpc	r31, r20
    5a9a:	09 f0       	breq	.+2      	; 0x5a9e <__vector_20+0x29a>
    5a9c:	a9 cf       	rjmp	.-174    	; 0x59f0 <__vector_20+0x1ec>
				sindex += 2;

			} // For each pair of bytes
			
			// RC sync established
			Interrupted = true;
    5a9e:	81 e0       	ldi	r24, 0x01	; 1
    5aa0:	80 93 cc 07 	sts	0x07CC, r24
	//************************************************************
	//* Common exit code
	//************************************************************

	// Increment byte count
	bytecount++;
    5aa4:	80 91 ce 07 	lds	r24, 0x07CE
    5aa8:	8f 5f       	subi	r24, 0xFF	; 255
    5aaa:	80 93 ce 07 	sts	0x07CE, r24
}
    5aae:	ff 91       	pop	r31
    5ab0:	ef 91       	pop	r30
    5ab2:	cf 91       	pop	r28
    5ab4:	bf 91       	pop	r27
    5ab6:	af 91       	pop	r26
    5ab8:	9f 91       	pop	r25
    5aba:	8f 91       	pop	r24
    5abc:	7f 91       	pop	r23
    5abe:	6f 91       	pop	r22
    5ac0:	5f 91       	pop	r21
    5ac2:	4f 91       	pop	r20
    5ac4:	3f 91       	pop	r19
    5ac6:	2f 91       	pop	r18
    5ac8:	0f 90       	pop	r0
    5aca:	0f be       	out	0x3f, r0	; 63
    5acc:	0f 90       	pop	r0
    5ace:	1f 90       	pop	r1
    5ad0:	18 95       	reti

00005ad2 <Disable_RC_Interrupts>:
// Disable RC interrupts as required
//***********************************************************

void Disable_RC_Interrupts(void)
{
	cli();	// Disable interrupts
    5ad2:	f8 94       	cli

	// Disable PWM input interrupts
	PCMSK1 = 0;							// Disable AUX
    5ad4:	10 92 6c 00 	sts	0x006C, r1
	PCMSK3 = 0;							// Disable THR
    5ad8:	10 92 73 00 	sts	0x0073, r1
	EIMSK  = 0;							// Disable INT0, 1 and 2
    5adc:	1d ba       	out	0x1d, r1	; 29

	// Disable receiver (flushes buffer)
	UCSR0B &= ~(1 << RXEN0);	
    5ade:	e1 ec       	ldi	r30, 0xC1	; 193
    5ae0:	f0 e0       	ldi	r31, 0x00	; 0
    5ae2:	80 81       	ld	r24, Z
    5ae4:	8f 7e       	andi	r24, 0xEF	; 239
    5ae6:	80 83       	st	Z, r24

	// Disable serial interrupt	
	UCSR0B &= ~(1 << RXCIE0);
    5ae8:	80 81       	ld	r24, Z
    5aea:	8f 77       	andi	r24, 0x7F	; 127
    5aec:	80 83       	st	Z, r24
	
	// Clear interrupt flags
	PCIFR	= 0x0F;						// Clear PCIF0~PCIF3 interrupt flags
    5aee:	8f e0       	ldi	r24, 0x0F	; 15
    5af0:	8b bb       	out	0x1b, r24	; 27
	EIFR	= 0x00; 					// Clear INT0~INT2 interrupt flags (Elevator, Aileron, Rudder/CPPM)
    5af2:	1c ba       	out	0x1c, r1	; 28
	
	sei(); // Re-enable interrupts
    5af4:	78 94       	sei
    5af6:	08 95       	ret

00005af8 <init_int>:
// Reconfigure RC interrupts
//***********************************************************

void init_int(void)
{
	cli();	// Disable interrupts
    5af8:	f8 94       	cli
	
	switch (Config.RxMode)
    5afa:	80 91 dc 05 	lds	r24, 0x05DC
    5afe:	81 30       	cpi	r24, 0x01	; 1
    5b00:	c9 f0       	breq	.+50     	; 0x5b34 <init_int+0x3c>
    5b02:	44 f4       	brge	.+16     	; 0x5b14 <init_int+0x1c>
    5b04:	81 11       	cpse	r24, r1
    5b06:	2c c0       	rjmp	.+88     	; 0x5b60 <init_int+0x68>
	{
		case CPPM_MODE:
			PCMSK1 = 0;							// Disable AUX
    5b08:	10 92 6c 00 	sts	0x006C, r1
			PCMSK3 = 0;							// Disable THR
    5b0c:	10 92 73 00 	sts	0x0073, r1
			EIMSK = 0x04;						// Enable INT2 (Rudder/CPPM input)
    5b10:	84 e0       	ldi	r24, 0x04	; 4
    5b12:	1b c0       	rjmp	.+54     	; 0x5b4a <init_int+0x52>

void init_int(void)
{
	cli();	// Disable interrupts
	
	switch (Config.RxMode)
    5b14:	84 30       	cpi	r24, 0x04	; 4
    5b16:	24 f5       	brge	.+72     	; 0x5b60 <init_int+0x68>
			break;

		case SBUS:
		case SPEKTRUM:
			// Disable PWM input interrupts
			PCMSK1 = 0;							// Disable AUX
    5b18:	10 92 6c 00 	sts	0x006C, r1
			PCMSK3 = 0;							// Disable THR
    5b1c:	10 92 73 00 	sts	0x0073, r1
			EIMSK  = 0;							// Disable INT0, 1 and 2 
    5b20:	1d ba       	out	0x1d, r1	; 29
			
			// Enable serial receiver and interrupts
			UCSR0B |= (1 << RXCIE0);			// Enable serial interrupt
    5b22:	80 91 c1 00 	lds	r24, 0x00C1
    5b26:	80 68       	ori	r24, 0x80	; 128
    5b28:	80 93 c1 00 	sts	0x00C1, r24
			UCSR0B |= (1 << RXEN0);				// Enable receiver
    5b2c:	80 91 c1 00 	lds	r24, 0x00C1
    5b30:	80 61       	ori	r24, 0x10	; 16
    5b32:	14 c0       	rjmp	.+40     	; 0x5b5c <init_int+0x64>
			UCSR0B &= ~(1 << RXCIE0);			// Disable serial interrupt
			UCSR0B &= ~(1 << RXEN0);			// Disable receiver and flush buffer
			break;

		case PWM:
			PCMSK1 |= (1 << PCINT8);			// PB0 (Aux pin change mask)
    5b34:	80 91 6c 00 	lds	r24, 0x006C
    5b38:	81 60       	ori	r24, 0x01	; 1
    5b3a:	80 93 6c 00 	sts	0x006C, r24
			PCMSK3 |= (1 << PCINT24);			// PD0 (Throttle pin change mask)
    5b3e:	80 91 73 00 	lds	r24, 0x0073
    5b42:	81 60       	ori	r24, 0x01	; 1
    5b44:	80 93 73 00 	sts	0x0073, r24
			EIMSK  = 0x07;						// Enable INT0, 1 and 2 
    5b48:	87 e0       	ldi	r24, 0x07	; 7
    5b4a:	8d bb       	out	0x1d, r24	; 29
			UCSR0B &= ~(1 << RXCIE0);			// Disable serial interrupt
    5b4c:	80 91 c1 00 	lds	r24, 0x00C1
    5b50:	8f 77       	andi	r24, 0x7F	; 127
    5b52:	80 93 c1 00 	sts	0x00C1, r24
			UCSR0B &= ~(1 << RXEN0);			// Disable receiver and flush buffer
    5b56:	80 91 c1 00 	lds	r24, 0x00C1
    5b5a:	8f 7e       	andi	r24, 0xEF	; 239
			PCMSK3 = 0;							// Disable THR
			EIMSK  = 0;							// Disable INT0, 1 and 2 
			
			// Enable serial receiver and interrupts
			UCSR0B |= (1 << RXCIE0);			// Enable serial interrupt
			UCSR0B |= (1 << RXEN0);				// Enable receiver
    5b5c:	80 93 c1 00 	sts	0x00C1, r24
		default:
			break;	
	}	

	// Clear interrupt flags
	PCIFR	= 0x0F;								// Clear PCIF0~PCIF3 interrupt flags
    5b60:	8f e0       	ldi	r24, 0x0F	; 15
    5b62:	8b bb       	out	0x1b, r24	; 27
	EIFR	= 0x00; 							// Clear INT0~INT2 interrupt flags (Elevator, Aileron, Rudder/CPPM)
    5b64:	1c ba       	out	0x1c, r1	; 28

	sei(); // Re-enable interrupts
    5b66:	78 94       	sei
    5b68:	08 95       	ret

00005b6a <print_menu_frame>:
// style = menu style (0 = main, 1 = sub)
//************************************************************
void print_menu_frame(uint8_t style)
{
	// Print bottom markers
	if (style == 0)
    5b6a:	81 11       	cpse	r24, r1
    5b6c:	27 c0       	rjmp	.+78     	; 0x5bbc <print_menu_frame+0x52>
	{
		LCD_Display_Text(12, (const unsigned char*)Wingdings, 0, 57); 	// Left
    5b6e:	29 e3       	ldi	r18, 0x39	; 57
    5b70:	30 e0       	ldi	r19, 0x00	; 0
    5b72:	40 e0       	ldi	r20, 0x00	; 0
    5b74:	50 e0       	ldi	r21, 0x00	; 0
    5b76:	6f ed       	ldi	r22, 0xDF	; 223
    5b78:	70 e0       	ldi	r23, 0x00	; 0
    5b7a:	8c e0       	ldi	r24, 0x0C	; 12
    5b7c:	90 e0       	ldi	r25, 0x00	; 0
    5b7e:	0e 94 3f 21 	call	0x427e	; 0x427e <LCD_Display_Text>
		LCD_Display_Text(10, (const unsigned char*)Wingdings, 38, 59); 	// Up
    5b82:	2b e3       	ldi	r18, 0x3B	; 59
    5b84:	30 e0       	ldi	r19, 0x00	; 0
    5b86:	46 e2       	ldi	r20, 0x26	; 38
    5b88:	50 e0       	ldi	r21, 0x00	; 0
    5b8a:	6f ed       	ldi	r22, 0xDF	; 223
    5b8c:	70 e0       	ldi	r23, 0x00	; 0
    5b8e:	8a e0       	ldi	r24, 0x0A	; 10
    5b90:	90 e0       	ldi	r25, 0x00	; 0
    5b92:	0e 94 3f 21 	call	0x427e	; 0x427e <LCD_Display_Text>
		LCD_Display_Text(9, (const unsigned char*)Wingdings, 80, 59); 	// Down
    5b96:	2b e3       	ldi	r18, 0x3B	; 59
    5b98:	30 e0       	ldi	r19, 0x00	; 0
    5b9a:	40 e5       	ldi	r20, 0x50	; 80
    5b9c:	50 e0       	ldi	r21, 0x00	; 0
    5b9e:	6f ed       	ldi	r22, 0xDF	; 223
    5ba0:	70 e0       	ldi	r23, 0x00	; 0
    5ba2:	89 e0       	ldi	r24, 0x09	; 9
    5ba4:	90 e0       	ldi	r25, 0x00	; 0
    5ba6:	0e 94 3f 21 	call	0x427e	; 0x427e <LCD_Display_Text>
		LCD_Display_Text(11, (const unsigned char*)Wingdings, 120, 57); // Right
    5baa:	29 e3       	ldi	r18, 0x39	; 57
    5bac:	30 e0       	ldi	r19, 0x00	; 0
    5bae:	48 e7       	ldi	r20, 0x78	; 120
    5bb0:	50 e0       	ldi	r21, 0x00	; 0
    5bb2:	6f ed       	ldi	r22, 0xDF	; 223
    5bb4:	70 e0       	ldi	r23, 0x00	; 0
    5bb6:	8b e0       	ldi	r24, 0x0B	; 11
    5bb8:	90 e0       	ldi	r25, 0x00	; 0
    5bba:	26 c0       	rjmp	.+76     	; 0x5c08 <print_menu_frame+0x9e>
	}
	else
	{
		LCD_Display_Text(16, (const unsigned char*)Verdana8, 0, 54); 	// Clear
    5bbc:	26 e3       	ldi	r18, 0x36	; 54
    5bbe:	30 e0       	ldi	r19, 0x00	; 0
    5bc0:	40 e0       	ldi	r20, 0x00	; 0
    5bc2:	50 e0       	ldi	r21, 0x00	; 0
    5bc4:	67 ef       	ldi	r22, 0xF7	; 247
    5bc6:	79 e0       	ldi	r23, 0x09	; 9
    5bc8:	80 e1       	ldi	r24, 0x10	; 16
    5bca:	90 e0       	ldi	r25, 0x00	; 0
    5bcc:	0e 94 3f 21 	call	0x427e	; 0x427e <LCD_Display_Text>
		LCD_Display_Text(10, (const unsigned char*)Wingdings, 38, 59);	// Up
    5bd0:	2b e3       	ldi	r18, 0x3B	; 59
    5bd2:	30 e0       	ldi	r19, 0x00	; 0
    5bd4:	46 e2       	ldi	r20, 0x26	; 38
    5bd6:	50 e0       	ldi	r21, 0x00	; 0
    5bd8:	6f ed       	ldi	r22, 0xDF	; 223
    5bda:	70 e0       	ldi	r23, 0x00	; 0
    5bdc:	8a e0       	ldi	r24, 0x0A	; 10
    5bde:	90 e0       	ldi	r25, 0x00	; 0
    5be0:	0e 94 3f 21 	call	0x427e	; 0x427e <LCD_Display_Text>
		LCD_Display_Text(9, (const unsigned char*)Wingdings, 80, 59);	// Down
    5be4:	2b e3       	ldi	r18, 0x3B	; 59
    5be6:	30 e0       	ldi	r19, 0x00	; 0
    5be8:	40 e5       	ldi	r20, 0x50	; 80
    5bea:	50 e0       	ldi	r21, 0x00	; 0
    5bec:	6f ed       	ldi	r22, 0xDF	; 223
    5bee:	70 e0       	ldi	r23, 0x00	; 0
    5bf0:	89 e0       	ldi	r24, 0x09	; 9
    5bf2:	90 e0       	ldi	r25, 0x00	; 0
    5bf4:	0e 94 3f 21 	call	0x427e	; 0x427e <LCD_Display_Text>
		LCD_Display_Text(17, (const unsigned char*)Verdana8, 103, 54);	// Save
    5bf8:	26 e3       	ldi	r18, 0x36	; 54
    5bfa:	30 e0       	ldi	r19, 0x00	; 0
    5bfc:	47 e6       	ldi	r20, 0x67	; 103
    5bfe:	50 e0       	ldi	r21, 0x00	; 0
    5c00:	67 ef       	ldi	r22, 0xF7	; 247
    5c02:	79 e0       	ldi	r23, 0x09	; 9
    5c04:	81 e1       	ldi	r24, 0x11	; 17
    5c06:	90 e0       	ldi	r25, 0x00	; 0
    5c08:	0e 94 3f 21 	call	0x427e	; 0x427e <LCD_Display_Text>
	}

	// Write from buffer
	write_buffer(buffer);
    5c0c:	81 e0       	ldi	r24, 0x01	; 1
    5c0e:	91 e0       	ldi	r25, 0x01	; 1
    5c10:	0c 94 2c 1f 	jmp	0x3e58	; 0x3e58 <write_buffer>

00005c14 <get_menu_range>:
//************************************************************
// get_menu_range - Get range info from PROGMEM for a specific item
//************************************************************

menu_range_t get_menu_range(const unsigned char* menu_ranges, uint8_t menuitem)
{
    5c14:	cf 93       	push	r28
    5c16:	df 93       	push	r29
    5c18:	cd b7       	in	r28, 0x3d	; 61
    5c1a:	de b7       	in	r29, 0x3e	; 62
    5c1c:	2a 97       	sbiw	r28, 0x0a	; 10
    5c1e:	0f b6       	in	r0, 0x3f	; 63
    5c20:	f8 94       	cli
    5c22:	de bf       	out	0x3e, r29	; 62
    5c24:	0f be       	out	0x3f, r0	; 63
    5c26:	cd bf       	out	0x3d, r28	; 61
	menu_range_t	range;
	memcpy_P(&range, &menu_ranges[menuitem * sizeof(range)], sizeof(range));
    5c28:	25 e0       	ldi	r18, 0x05	; 5
    5c2a:	62 9f       	mul	r22, r18
    5c2c:	80 0d       	add	r24, r0
    5c2e:	91 1d       	adc	r25, r1
    5c30:	11 24       	eor	r1, r1
    5c32:	bc 01       	movw	r22, r24
    5c34:	45 e0       	ldi	r20, 0x05	; 5
    5c36:	50 e0       	ldi	r21, 0x00	; 0
    5c38:	ce 01       	movw	r24, r28
    5c3a:	06 96       	adiw	r24, 0x06	; 6
    5c3c:	0e 94 92 47 	call	0x8f24	; 0x8f24 <memcpy_P>
	return (range);
    5c40:	85 e0       	ldi	r24, 0x05	; 5
    5c42:	fe 01       	movw	r30, r28
    5c44:	36 96       	adiw	r30, 0x06	; 6
    5c46:	de 01       	movw	r26, r28
    5c48:	11 96       	adiw	r26, 0x01	; 1
    5c4a:	01 90       	ld	r0, Z+
    5c4c:	0d 92       	st	X+, r0
    5c4e:	8a 95       	dec	r24
    5c50:	e1 f7       	brne	.-8      	; 0x5c4a <get_menu_range+0x36>
    5c52:	29 81       	ldd	r18, Y+1	; 0x01
    5c54:	3a 81       	ldd	r19, Y+2	; 0x02
    5c56:	4b 81       	ldd	r20, Y+3	; 0x03
    5c58:	5c 81       	ldd	r21, Y+4	; 0x04
    5c5a:	6d 81       	ldd	r22, Y+5	; 0x05
}
    5c5c:	70 e0       	ldi	r23, 0x00	; 0
    5c5e:	80 e0       	ldi	r24, 0x00	; 0
    5c60:	90 e0       	ldi	r25, 0x00	; 0
    5c62:	2a 96       	adiw	r28, 0x0a	; 10
    5c64:	0f b6       	in	r0, 0x3f	; 63
    5c66:	f8 94       	cli
    5c68:	de bf       	out	0x3e, r29	; 62
    5c6a:	0f be       	out	0x3f, r0	; 63
    5c6c:	cd bf       	out	0x3d, r28	; 61
    5c6e:	df 91       	pop	r29
    5c70:	cf 91       	pop	r28
    5c72:	08 95       	ret

00005c74 <print_menu_text>:
// x = horizontal location on screen
// y = vertical location on screen
//************************************************************

void print_menu_text(int16_t values, uint8_t style, uint16_t text_link, uint8_t x, uint8_t y)
{
    5c74:	0f 93       	push	r16
    5c76:	1f 93       	push	r17
    5c78:	cf 93       	push	r28
    5c7a:	df 93       	push	r29
    5c7c:	fa 01       	movw	r30, r20
    5c7e:	10 e0       	ldi	r17, 0x00	; 0
    5c80:	c2 2f       	mov	r28, r18
    5c82:	d0 e0       	ldi	r29, 0x00	; 0
	if (style == 0) // Numeral
    5c84:	61 11       	cpse	r22, r1
    5c86:	0f c0       	rjmp	.+30     	; 0x5ca6 <print_menu_text+0x32>
    5c88:	4a e0       	ldi	r20, 0x0A	; 10
    5c8a:	61 e6       	ldi	r22, 0x61	; 97
    5c8c:	75 e0       	ldi	r23, 0x05	; 5
    5c8e:	0e 94 ad 47 	call	0x8f5a	; 0x8f5a <__itoa_ncheck>
	{
		mugui_lcd_puts(itoa(values,pBuffer,10),(const unsigned char*)Verdana8,x,y);
    5c92:	98 01       	movw	r18, r16
    5c94:	ae 01       	movw	r20, r28
    5c96:	67 ef       	ldi	r22, 0xF7	; 247
    5c98:	79 e0       	ldi	r23, 0x09	; 9
	}
	else
	{
		LCD_Display_Text(text_link, (const unsigned char*)Verdana8,x,y);
	}
}
    5c9a:	df 91       	pop	r29
    5c9c:	cf 91       	pop	r28
    5c9e:	1f 91       	pop	r17
    5ca0:	0f 91       	pop	r16

void print_menu_text(int16_t values, uint8_t style, uint16_t text_link, uint8_t x, uint8_t y)
{
	if (style == 0) // Numeral
	{
		mugui_lcd_puts(itoa(values,pBuffer,10),(const unsigned char*)Verdana8,x,y);
    5ca2:	0c 94 51 3d 	jmp	0x7aa2	; 0x7aa2 <mugui_lcd_puts>
	}
	else
	{
		LCD_Display_Text(text_link, (const unsigned char*)Verdana8,x,y);
    5ca6:	98 01       	movw	r18, r16
    5ca8:	ae 01       	movw	r20, r28
    5caa:	67 ef       	ldi	r22, 0xF7	; 247
    5cac:	79 e0       	ldi	r23, 0x09	; 9
    5cae:	cf 01       	movw	r24, r30
	}
}
    5cb0:	df 91       	pop	r29
    5cb2:	cf 91       	pop	r28
    5cb4:	1f 91       	pop	r17
    5cb6:	0f 91       	pop	r16
	{
		mugui_lcd_puts(itoa(values,pBuffer,10),(const unsigned char*)Verdana8,x,y);
	}
	else
	{
		LCD_Display_Text(text_link, (const unsigned char*)Verdana8,x,y);
    5cb8:	0c 94 3f 21 	jmp	0x427e	; 0x427e <LCD_Display_Text>

00005cbc <poll_buttons>:
// Poll buttons, wait until something pressed, debounce and 
// return button info.
//************************************************************

uint8_t poll_buttons(bool acceleration)
{
    5cbc:	68 2f       	mov	r22, r24
	static uint8_t button_count = 0;
	uint8_t buttons = 0;

	button = (PINB & 0xf0); // button is global, buttons is local
    5cbe:	93 b1       	in	r25, 0x03	; 3
    5cc0:	90 7f       	andi	r25, 0xF0	; 240
    5cc2:	90 93 ec 07 	sts	0x07EC, r25
//************************************************************

uint8_t poll_buttons(bool acceleration)
{
	static uint8_t button_count = 0;
	uint8_t buttons = 0;
    5cc6:	80 e0       	ldi	r24, 0x00	; 0
			button = buttons;
		}

		// Reset button acceleration
		button_count = 0;
		button_multiplier = 1;
    5cc8:	71 e0       	ldi	r23, 0x01	; 1
	static uint8_t button_count = 0;
	uint8_t buttons = 0;

	button = (PINB & 0xf0); // button is global, buttons is local

	while (button == NONE)					
    5cca:	90 91 ec 07 	lds	r25, 0x07EC
    5cce:	90 3f       	cpi	r25, 0xF0	; 240
    5cd0:	c9 f4       	brne	.+50     	; 0x5d04 <poll_buttons+0x48>
	{
		buttons = (PINB & 0xf0);	
    5cd2:	83 b1       	in	r24, 0x03	; 3
    5cd4:	80 7f       	andi	r24, 0xF0	; 240
    5cd6:	ef e4       	ldi	r30, 0x4F	; 79
    5cd8:	f3 ec       	ldi	r31, 0xC3	; 195
    5cda:	31 97       	sbiw	r30, 0x01	; 1
    5cdc:	f1 f7       	brne	.-4      	; 0x5cda <poll_buttons+0x1e>
    5cde:	00 c0       	rjmp	.+0      	; 0x5ce0 <poll_buttons+0x24>
    5ce0:	00 00       	nop
		_delay_ms(10);

		if (buttons != (PINB & 0xf0))
    5ce2:	23 b1       	in	r18, 0x03	; 3
    5ce4:	48 2f       	mov	r20, r24
    5ce6:	50 e0       	ldi	r21, 0x00	; 0
    5ce8:	20 7f       	andi	r18, 0xF0	; 240
    5cea:	30 e0       	ldi	r19, 0x00	; 0
    5cec:	42 17       	cp	r20, r18
    5cee:	53 07       	cpc	r21, r19
    5cf0:	19 f4       	brne	.+6      	; 0x5cf8 <poll_buttons+0x3c>
		{
			buttons = 0; // Buttons different
		}
		else // Buttons the same - update global
		{
			button = buttons;
    5cf2:	80 93 ec 07 	sts	0x07EC, r24
    5cf6:	01 c0       	rjmp	.+2      	; 0x5cfa <poll_buttons+0x3e>
		buttons = (PINB & 0xf0);	
		_delay_ms(10);

		if (buttons != (PINB & 0xf0))
		{
			buttons = 0; // Buttons different
    5cf8:	80 e0       	ldi	r24, 0x00	; 0
		{
			button = buttons;
		}

		// Reset button acceleration
		button_count = 0;
    5cfa:	10 92 30 05 	sts	0x0530, r1
		button_multiplier = 1;
    5cfe:	70 93 ed 07 	sts	0x07ED, r23
    5d02:	e3 cf       	rjmp	.-58     	; 0x5cca <poll_buttons+0xe>
	}

	// Check for buttons being held down if requested
	if ((button != NONE) && (acceleration))
    5d04:	66 23       	and	r22, r22
    5d06:	71 f0       	breq	.+28     	; 0x5d24 <poll_buttons+0x68>
	{
		// Count the number of times incremented
		button_count++; 
    5d08:	90 91 30 05 	lds	r25, 0x0530
    5d0c:	9f 5f       	subi	r25, 0xFF	; 255
    5d0e:	90 93 30 05 	sts	0x0530, r25
		if (button_count >= 10)
    5d12:	9a 30       	cpi	r25, 0x0A	; 10
    5d14:	38 f0       	brcs	.+14     	; 0x5d24 <poll_buttons+0x68>
		{
			button_count = 0;
    5d16:	10 92 30 05 	sts	0x0530, r1
			button_multiplier ++;
    5d1a:	90 91 ed 07 	lds	r25, 0x07ED
    5d1e:	9f 5f       	subi	r25, 0xFF	; 255
    5d20:	90 93 ed 07 	sts	0x07ED, r25
		}
	}

	return buttons;
}
    5d24:	08 95       	ret

00005d26 <do_menu_item>:
// servo_enable = Enable real-time updating of servo position
// servo_number = Servo number to update
//************************************************************

void do_menu_item(uint16_t menuitem, int8_t *values, uint8_t mult, menu_range_t range, int8_t offset, uint16_t text_link, bool servo_enable, int16_t servo_number)
{
    5d26:	2f 92       	push	r2
    5d28:	3f 92       	push	r3
    5d2a:	4f 92       	push	r4
    5d2c:	5f 92       	push	r5
    5d2e:	6f 92       	push	r6
    5d30:	7f 92       	push	r7
    5d32:	8f 92       	push	r8
    5d34:	9f 92       	push	r9
    5d36:	af 92       	push	r10
    5d38:	bf 92       	push	r11
    5d3a:	cf 92       	push	r12
    5d3c:	df 92       	push	r13
    5d3e:	ef 92       	push	r14
    5d40:	ff 92       	push	r15
    5d42:	0f 93       	push	r16
    5d44:	1f 93       	push	r17
    5d46:	cf 93       	push	r28
    5d48:	df 93       	push	r29
    5d4a:	cd b7       	in	r28, 0x3d	; 61
    5d4c:	de b7       	in	r29, 0x3e	; 62
    5d4e:	67 97       	sbiw	r28, 0x17	; 23
    5d50:	0f b6       	in	r0, 0x3f	; 63
    5d52:	f8 94       	cli
    5d54:	de bf       	out	0x3e, r29	; 62
    5d56:	0f be       	out	0x3f, r0	; 63
    5d58:	cd bf       	out	0x3d, r28	; 61
    5d5a:	1c 01       	movw	r2, r24
    5d5c:	78 8b       	std	Y+16, r23	; 0x10
    5d5e:	6f 87       	std	Y+15, r22	; 0x0f
    5d60:	4a 87       	std	Y+10, r20	; 0x0a
    5d62:	ed 82       	std	Y+5, r14	; 0x05
    5d64:	fe 82       	std	Y+6, r15	; 0x06
    5d66:	0f 83       	std	Y+7, r16	; 0x07
    5d68:	18 87       	std	Y+8, r17	; 0x08
    5d6a:	29 87       	std	Y+9, r18	; 0x09
    5d6c:	bc 8a       	std	Y+20, r11	; 0x14
    5d6e:	ab 8a       	std	Y+19, r10	; 0x13
    5d70:	4e 2d       	mov	r20, r14
    5d72:	3f 2d       	mov	r19, r15
    5d74:	0c 87       	std	Y+12, r16	; 0x0c
    5d76:	1b 87       	std	Y+11, r17	; 0x0b
	mugui_size16_t size;
	int16_t temp16;
	int16_t value = (int8_t)*values;
    5d78:	fb 01       	movw	r30, r22
    5d7a:	20 81       	ld	r18, Z
    5d7c:	a2 2e       	mov	r10, r18
    5d7e:	bb 24       	eor	r11, r11
    5d80:	a7 fc       	sbrc	r10, 7
    5d82:	b0 94       	com	r11
	uint8_t button_inc = 0;
	bool	button_lock = false;
	bool	first_time = true;

	// Multiply value for display only if style is 2
	if (range.style == 2)
    5d84:	12 30       	cpi	r17, 0x02	; 2
    5d86:	29 f4       	brne	.+10     	; 0x5d92 <do_menu_item+0x6c>
	{
		value = value * mult;
    5d88:	5a 85       	ldd	r21, Y+10	; 0x0a
    5d8a:	25 03       	mulsu	r18, r21
    5d8c:	50 01       	movw	r10, r0
    5d8e:	11 24       	eor	r1, r1
    5d90:	02 c0       	rjmp	.+4      	; 0x5d96 <do_menu_item+0x70>
	}
	else mult = 1;
    5d92:	81 e0       	ldi	r24, 0x01	; 1
    5d94:	8a 87       	std	Y+10, r24	; 0x0a

	button = NONE;
    5d96:	20 ef       	ldi	r18, 0xF0	; 240
    5d98:	20 93 ec 07 	sts	0x07EC, r18
		{
			value = (range.default_value * mult);
		}

		// Limit values to set ranges
		if (value < (range.lower * mult)) 
    5d9c:	fa 85       	ldd	r31, Y+10	; 0x0a
    5d9e:	ef 2f       	mov	r30, r31
    5da0:	f0 e0       	ldi	r31, 0x00	; 0
    5da2:	fa 8b       	std	Y+18, r31	; 0x12
    5da4:	e9 8b       	std	Y+17, r30	; 0x11
    5da6:	2a 85       	ldd	r18, Y+10	; 0x0a
    5da8:	42 03       	mulsu	r20, r18
    5daa:	20 01       	movw	r4, r0
    5dac:	11 24       	eor	r1, r1
		{
			value = range.lower * mult;
		}
		
		if (value > (range.upper * mult)) 
    5dae:	32 03       	mulsu	r19, r18
    5db0:	c0 01       	movw	r24, r0
    5db2:	11 24       	eor	r1, r1
    5db4:	9e 87       	std	Y+14, r25	; 0x0e
    5db6:	8d 87       	std	Y+13, r24	; 0x0d
	uint8_t display_update = 0;
	uint8_t servo_update = 0;
	uint8_t button_update = 0;
	uint8_t button_inc = 0;
	bool	button_lock = false;
	bool	first_time = true;
    5db8:	91 e0       	ldi	r25, 0x01	; 1
	int16_t value = (int8_t)*values;
	uint8_t display_update = 0;
	uint8_t servo_update = 0;
	uint8_t button_update = 0;
	uint8_t button_inc = 0;
	bool	button_lock = false;
    5dba:	71 2c       	mov	r7, r1
	mugui_size16_t size;
	int16_t temp16;
	int16_t value = (int8_t)*values;
	uint8_t display_update = 0;
	uint8_t servo_update = 0;
	uint8_t button_update = 0;
    5dbc:	91 2c       	mov	r9, r1
{
	mugui_size16_t size;
	int16_t temp16;
	int16_t value = (int8_t)*values;
	uint8_t display_update = 0;
	uint8_t servo_update = 0;
    5dbe:	61 2c       	mov	r6, r1
void do_menu_item(uint16_t menuitem, int8_t *values, uint8_t mult, menu_range_t range, int8_t offset, uint16_t text_link, bool servo_enable, int16_t servo_number)
{
	mugui_size16_t size;
	int16_t temp16;
	int16_t value = (int8_t)*values;
	uint8_t display_update = 0;
    5dc0:	f1 2c       	mov	r15, r1
			first_time = false;

			clear_buffer(buffer);

			// Print title
			gLCDprint_Menu_P((char*)pgm_read_word(&text_menu[menuitem]), (const unsigned char*)Verdana14, 0, 0);
    5dc2:	81 01       	movw	r16, r2
    5dc4:	00 0f       	add	r16, r16
    5dc6:	11 1f       	adc	r17, r17
    5dc8:	02 52       	subi	r16, 0x22	; 34
    5dca:	12 4f       	sbci	r17, 0xF2	; 242

			// Print value
			if ((range.style == 0) || (range.style == 2)) // numeric and numeric * 4
    5dcc:	3b 85       	ldd	r19, Y+11	; 0x0b
    5dce:	3d 7f       	andi	r19, 0xFD	; 253
    5dd0:	3d 8b       	std	Y+21, r19	; 0x15
			{
				// Write numeric value, centered on screen
				mugui_text_sizestring(itoa(value,pBuffer,10), (const unsigned char*)Verdana14, &size);
				mugui_lcd_puts(itoa(value,pBuffer,10),(const unsigned char*)Verdana14,((128-size.x)/2)+offset,25);
    5dd2:	ec 2d       	mov	r30, r12
    5dd4:	ff 27       	eor	r31, r31
    5dd6:	e7 fd       	sbrc	r30, 7
    5dd8:	f0 95       	com	r31
    5dda:	ff 8b       	std	Y+23, r31	; 0x17
    5ddc:	ee 8b       	std	Y+22, r30	; 0x16

		// Set servo position if required and update every 4 * 5ms = 20ms
		// Ignore if the output is marked as a motor
		if	(
			((servo_enable) && (servo_update >= 4)) &&
			(Config.Channel[servo_number].Motor_marker != MOTOR)
    5dde:	86 e2       	ldi	r24, 0x26	; 38
    5de0:	2c a5       	ldd	r18, Y+44	; 0x2c
    5de2:	3d a5       	ldd	r19, Y+45	; 0x2d
    5de4:	82 9f       	mul	r24, r18
    5de6:	60 01       	movw	r12, r0
    5de8:	83 9f       	mul	r24, r19
    5dea:	d0 0c       	add	r13, r0
    5dec:	11 24       	eor	r1, r1
    5dee:	f6 01       	movw	r30, r12
    5df0:	e7 5b       	subi	r30, 0xB7	; 183
    5df2:	f9 4f       	sbci	r31, 0xF9	; 249
    5df4:	6f 01       	movw	r12, r30
	button = NONE;

	// This is a loop that cycles until Button 4 is pressed (Save)
	// The GLCD updating slows servo updates down too much so only update the GLCD periodically
	// When not updating the GLCD the servo should be updated at 50Hz (20ms)
	while (button != ENTER)
    5df6:	80 91 ec 07 	lds	r24, 0x07EC
    5dfa:	80 3e       	cpi	r24, 0xE0	; 224
    5dfc:	09 f4       	brne	.+2      	; 0x5e00 <do_menu_item+0xda>
    5dfe:	ed c0       	rjmp	.+474    	; 0x5fda <do_menu_item+0x2b4>
	{
		// Increment loopcount so that we can time various things
		display_update++;
		servo_update++;
    5e00:	63 94       	inc	r6

		// Vary the button increment delay depending on the function
		if (servo_enable)
    5e02:	88 20       	and	r8, r8
    5e04:	11 f0       	breq	.+4      	; 0x5e0a <do_menu_item+0xe4>
		{
			button_inc = 20; // For servos
    5e06:	24 e1       	ldi	r18, 0x14	; 20
    5e08:	01 c0       	rjmp	.+2      	; 0x5e0c <do_menu_item+0xe6>
		}
		else
		{
			button_inc = 1;	// For everything else (numbers)
    5e0a:	21 e0       	ldi	r18, 0x01	; 1
		}

		// Increment button timer when pressed
		if (button != NONE)
    5e0c:	80 3f       	cpi	r24, 0xF0	; 240
    5e0e:	19 f0       	breq	.+6      	; 0x5e16 <do_menu_item+0xf0>
		{
			button_update++;
    5e10:	93 94       	inc	r9

			// Release button lock after button_inc loops
			if (button_update > button_inc)
    5e12:	29 15       	cp	r18, r9
    5e14:	10 f4       	brcc	.+4      	; 0x5e1a <do_menu_item+0xf4>
		}
		// Remove lock when not pressed
		else 
		{
			button_update = 0;
			button_lock = false;
    5e16:	71 2c       	mov	r7, r1
			} 
		}
		// Remove lock when not pressed
		else 
		{
			button_update = 0;
    5e18:	91 2c       	mov	r9, r1
			button_lock = false;
		}

		// Display update
		if 	(!servo_enable || 									// Non-servo value or
    5e1a:	88 20       	and	r8, r8
    5e1c:	49 f0       	breq	.+18     	; 0x5e30 <do_menu_item+0x10a>
	// The GLCD updating slows servo updates down too much so only update the GLCD periodically
	// When not updating the GLCD the servo should be updated at 50Hz (20ms)
	while (button != ENTER)
	{
		// Increment loopcount so that we can time various things
		display_update++;
    5e1e:	f3 94       	inc	r15
			button_update = 0;
			button_lock = false;
		}

		// Display update
		if 	(!servo_enable || 									// Non-servo value or
    5e20:	ff e1       	ldi	r31, 0x1F	; 31
    5e22:	ff 15       	cp	r31, r15
    5e24:	10 f4       	brcc	.+4      	; 0x5e2a <do_menu_item+0x104>
			((display_update >= 32) && (button != NONE)) || 	// Servo value and 32 cycles passed but only with a button pressed or...
    5e26:	80 3f       	cpi	r24, 0xF0	; 240
    5e28:	19 f4       	brne	.+6      	; 0x5e30 <do_menu_item+0x10a>
    5e2a:	99 23       	and	r25, r25
    5e2c:	09 f4       	brne	.+2      	; 0x5e30 <do_menu_item+0x10a>
    5e2e:	69 c0       	rjmp	.+210    	; 0x5f02 <do_menu_item+0x1dc>
			 (first_time))										// First time into routine
		{
			display_update = 0;
			first_time = false;

			clear_buffer(buffer);
    5e30:	81 e0       	ldi	r24, 0x01	; 1
    5e32:	91 e0       	ldi	r25, 0x01	; 1
    5e34:	0e 94 5e 1f 	call	0x3ebc	; 0x3ebc <clear_buffer>

			// Print title
			gLCDprint_Menu_P((char*)pgm_read_word(&text_menu[menuitem]), (const unsigned char*)Verdana14, 0, 0);
    5e38:	f8 01       	movw	r30, r16
    5e3a:	85 91       	lpm	r24, Z+
    5e3c:	94 91       	lpm	r25, Z
    5e3e:	20 e0       	ldi	r18, 0x00	; 0
    5e40:	30 e0       	ldi	r19, 0x00	; 0
    5e42:	40 e0       	ldi	r20, 0x00	; 0
    5e44:	50 e0       	ldi	r21, 0x00	; 0
    5e46:	69 e4       	ldi	r22, 0x49	; 73
    5e48:	71 e0       	ldi	r23, 0x01	; 1
    5e4a:	0e 94 48 21 	call	0x4290	; 0x4290 <gLCDprint_Menu_P>

			// Print value
			if ((range.style == 0) || (range.style == 2)) // numeric and numeric * 4
    5e4e:	2d 89       	ldd	r18, Y+21	; 0x15
    5e50:	21 11       	cpse	r18, r1
    5e52:	28 c0       	rjmp	.+80     	; 0x5ea4 <do_menu_item+0x17e>
    5e54:	4a e0       	ldi	r20, 0x0A	; 10
    5e56:	61 e6       	ldi	r22, 0x61	; 97
    5e58:	75 e0       	ldi	r23, 0x05	; 5
    5e5a:	c5 01       	movw	r24, r10
    5e5c:	0e 94 ad 47 	call	0x8f5a	; 0x8f5a <__itoa_ncheck>
			{
				// Write numeric value, centered on screen
				mugui_text_sizestring(itoa(value,pBuffer,10), (const unsigned char*)Verdana14, &size);
    5e60:	ae 01       	movw	r20, r28
    5e62:	4f 5f       	subi	r20, 0xFF	; 255
    5e64:	5f 4f       	sbci	r21, 0xFF	; 255
    5e66:	69 e4       	ldi	r22, 0x49	; 73
    5e68:	71 e0       	ldi	r23, 0x01	; 1
    5e6a:	0e 94 02 3c 	call	0x7804	; 0x7804 <mugui_text_sizestring>
				mugui_lcd_puts(itoa(value,pBuffer,10),(const unsigned char*)Verdana14,((128-size.x)/2)+offset,25);
    5e6e:	89 81       	ldd	r24, Y+1	; 0x01
    5e70:	9a 81       	ldd	r25, Y+2	; 0x02
    5e72:	70 e8       	ldi	r23, 0x80	; 128
    5e74:	e7 2e       	mov	r14, r23
    5e76:	f1 2c       	mov	r15, r1
    5e78:	e8 1a       	sub	r14, r24
    5e7a:	f9 0a       	sbc	r15, r25
    5e7c:	f6 94       	lsr	r15
    5e7e:	e7 94       	ror	r14
    5e80:	8e 89       	ldd	r24, Y+22	; 0x16
    5e82:	9f 89       	ldd	r25, Y+23	; 0x17
    5e84:	e8 0e       	add	r14, r24
    5e86:	f9 1e       	adc	r15, r25
    5e88:	4a e0       	ldi	r20, 0x0A	; 10
    5e8a:	61 e6       	ldi	r22, 0x61	; 97
    5e8c:	75 e0       	ldi	r23, 0x05	; 5
    5e8e:	c5 01       	movw	r24, r10
    5e90:	0e 94 ad 47 	call	0x8f5a	; 0x8f5a <__itoa_ncheck>
    5e94:	29 e1       	ldi	r18, 0x19	; 25
    5e96:	30 e0       	ldi	r19, 0x00	; 0
    5e98:	a7 01       	movw	r20, r14
    5e9a:	69 e4       	ldi	r22, 0x49	; 73
    5e9c:	71 e0       	ldi	r23, 0x01	; 1
    5e9e:	0e 94 51 3d 	call	0x7aa2	; 0x7aa2 <mugui_lcd_puts>
    5ea2:	25 c0       	rjmp	.+74     	; 0x5eee <do_menu_item+0x1c8>
			}
			else // text
			{
				// Write text, centered on screen
				// NB: pBuffer obviously has to be larger than the longest text string printed... duh...
				pgm_mugui_scopy((char*)pgm_read_word(&text_menu[text_link + value])); // Copy string to pBuffer
    5ea4:	eb 88       	ldd	r14, Y+19	; 0x13
    5ea6:	fc 88       	ldd	r15, Y+20	; 0x14
    5ea8:	ea 0c       	add	r14, r10
    5eaa:	fb 1c       	adc	r15, r11
    5eac:	f7 01       	movw	r30, r14
    5eae:	ee 0f       	add	r30, r30
    5eb0:	ff 1f       	adc	r31, r31
    5eb2:	e2 52       	subi	r30, 0x22	; 34
    5eb4:	f2 4f       	sbci	r31, 0xF2	; 242
    5eb6:	85 91       	lpm	r24, Z+
    5eb8:	94 91       	lpm	r25, Z
    5eba:	0e 94 50 3c 	call	0x78a0	; 0x78a0 <pgm_mugui_scopy>

				mugui_text_sizestring((char*)pBuffer, (const unsigned char*)Verdana14, &size);
    5ebe:	ae 01       	movw	r20, r28
    5ec0:	4f 5f       	subi	r20, 0xFF	; 255
    5ec2:	5f 4f       	sbci	r21, 0xFF	; 255
    5ec4:	69 e4       	ldi	r22, 0x49	; 73
    5ec6:	71 e0       	ldi	r23, 0x01	; 1
    5ec8:	81 e6       	ldi	r24, 0x61	; 97
    5eca:	95 e0       	ldi	r25, 0x05	; 5
    5ecc:	0e 94 02 3c 	call	0x7804	; 0x7804 <mugui_text_sizestring>
				LCD_Display_Text(text_link + value, (const unsigned char*)Verdana14,((128-size.x)/2),25);
    5ed0:	89 81       	ldd	r24, Y+1	; 0x01
    5ed2:	9a 81       	ldd	r25, Y+2	; 0x02
    5ed4:	40 e8       	ldi	r20, 0x80	; 128
    5ed6:	50 e0       	ldi	r21, 0x00	; 0
    5ed8:	48 1b       	sub	r20, r24
    5eda:	59 0b       	sbc	r21, r25
    5edc:	56 95       	lsr	r21
    5ede:	47 95       	ror	r20
    5ee0:	29 e1       	ldi	r18, 0x19	; 25
    5ee2:	30 e0       	ldi	r19, 0x00	; 0
    5ee4:	69 e4       	ldi	r22, 0x49	; 73
    5ee6:	71 e0       	ldi	r23, 0x01	; 1
    5ee8:	c7 01       	movw	r24, r14
    5eea:	0e 94 3f 21 	call	0x427e	; 0x427e <LCD_Display_Text>
			}

			// Print bottom markers
			print_menu_frame(1);
    5eee:	81 e0       	ldi	r24, 0x01	; 1
    5ef0:	0e 94 b5 2d 	call	0x5b6a	; 0x5b6a <print_menu_frame>

			// Write from buffer
			write_buffer(buffer);
    5ef4:	81 e0       	ldi	r24, 0x01	; 1
    5ef6:	91 e0       	ldi	r25, 0x01	; 1
    5ef8:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <write_buffer>
		}

		// Poll buttons when idle
		// Don't use button acceleration when moving servos
		// And don't block the code with poll_buttons()
		if (servo_enable)
    5efc:	88 20       	and	r8, r8
    5efe:	49 f0       	breq	.+18     	; 0x5f12 <do_menu_item+0x1ec>
		// Display update
		if 	(!servo_enable || 									// Non-servo value or
			((display_update >= 32) && (button != NONE)) || 	// Servo value and 32 cycles passed but only with a button pressed or...
			 (first_time))										// First time into routine
		{
			display_update = 0;
    5f00:	f1 2c       	mov	r15, r1
		// Poll buttons when idle
		// Don't use button acceleration when moving servos
		// And don't block the code with poll_buttons()
		if (servo_enable)
		{
			button = (PINB & 0xf0);	
    5f02:	83 b1       	in	r24, 0x03	; 3
    5f04:	80 7f       	andi	r24, 0xF0	; 240
    5f06:	80 93 ec 07 	sts	0x07EC, r24
			button_multiplier = 1;
    5f0a:	91 e0       	ldi	r25, 0x01	; 1
    5f0c:	90 93 ed 07 	sts	0x07ED, r25
    5f10:	04 c0       	rjmp	.+8      	; 0x5f1a <do_menu_item+0x1f4>
		}
		else
		{
			poll_buttons(true);
    5f12:	81 e0       	ldi	r24, 0x01	; 1
    5f14:	0e 94 5e 2e 	call	0x5cbc	; 0x5cbc <poll_buttons>
		// Display update
		if 	(!servo_enable || 									// Non-servo value or
			((display_update >= 32) && (button != NONE)) || 	// Servo value and 32 cycles passed but only with a button pressed or...
			 (first_time))										// First time into routine
		{
			display_update = 0;
    5f18:	f1 2c       	mov	r15, r1
		{
			poll_buttons(true);
		}

		// Handle cursor Up/Down limits
		if (button == DOWN)
    5f1a:	80 91 ec 07 	lds	r24, 0x07EC
    5f1e:	80 3d       	cpi	r24, 0xD0	; 208
    5f20:	51 f4       	brne	.+20     	; 0x5f36 <do_menu_item+0x210>
		{
			if (button_lock == false)
    5f22:	71 10       	cpse	r7, r1
    5f24:	7f c0       	rjmp	.+254    	; 0x6024 <do_menu_item+0x2fe>
			{
				button_lock = true;
				value = value - (range.increment * button_multiplier);
    5f26:	80 91 ed 07 	lds	r24, 0x07ED
    5f2a:	ec 85       	ldd	r30, Y+12	; 0x0c
    5f2c:	e8 9f       	mul	r30, r24
    5f2e:	a0 18       	sub	r10, r0
    5f30:	b1 08       	sbc	r11, r1
    5f32:	11 24       	eor	r1, r1
    5f34:	0b c0       	rjmp	.+22     	; 0x5f4c <do_menu_item+0x226>
				button_update = 0;
			}
		}

		if (button == UP)
    5f36:	80 3b       	cpi	r24, 0xB0	; 176
    5f38:	59 f4       	brne	.+22     	; 0x5f50 <do_menu_item+0x22a>
		{
			if (button_lock == false)
    5f3a:	71 10       	cpse	r7, r1
    5f3c:	73 c0       	rjmp	.+230    	; 0x6024 <do_menu_item+0x2fe>
			{
				button_lock = true;
				value = value + (range.increment * button_multiplier);
    5f3e:	80 91 ed 07 	lds	r24, 0x07ED
    5f42:	fc 85       	ldd	r31, Y+12	; 0x0c
    5f44:	f8 9f       	mul	r31, r24
    5f46:	a0 0c       	add	r10, r0
    5f48:	b1 1c       	adc	r11, r1
    5f4a:	11 24       	eor	r1, r1
				button_update = 0;
    5f4c:	91 2c       	mov	r9, r1
    5f4e:	6a c0       	rjmp	.+212    	; 0x6024 <do_menu_item+0x2fe>
			}
		}

		if (button == BACK)	
    5f50:	80 37       	cpi	r24, 0x70	; 112
    5f52:	29 f4       	brne	.+10     	; 0x5f5e <do_menu_item+0x238>
		{
			value = (range.default_value * mult);
    5f54:	29 85       	ldd	r18, Y+9	; 0x09
    5f56:	3a 85       	ldd	r19, Y+10	; 0x0a
    5f58:	23 03       	mulsu	r18, r19
    5f5a:	50 01       	movw	r10, r0
    5f5c:	11 24       	eor	r1, r1
    5f5e:	a4 14       	cp	r10, r4
    5f60:	b5 04       	cpc	r11, r5
    5f62:	0c f4       	brge	.+2      	; 0x5f66 <do_menu_item+0x240>
    5f64:	52 01       	movw	r10, r4
    5f66:	8d 85       	ldd	r24, Y+13	; 0x0d
    5f68:	9e 85       	ldd	r25, Y+14	; 0x0e
    5f6a:	8a 15       	cp	r24, r10
    5f6c:	9b 05       	cpc	r25, r11
    5f6e:	0c f4       	brge	.+2      	; 0x5f72 <do_menu_item+0x24c>
    5f70:	5c 01       	movw	r10, r24
		{
			value = range.upper * mult;
		}

		// Update contrast setting
		if (menuitem == CONTRAST)
    5f72:	9f e9       	ldi	r25, 0x9F	; 159
    5f74:	29 16       	cp	r2, r25
    5f76:	31 04       	cpc	r3, r1
    5f78:	19 f4       	brne	.+6      	; 0x5f80 <do_menu_item+0x25a>
		{
			st7565_set_brightness(value);
    5f7a:	8a 2d       	mov	r24, r10
    5f7c:	0e 94 04 1f 	call	0x3e08	; 0x3e08 <st7565_set_brightness>
		}

		// Set servo position if required and update every 4 * 5ms = 20ms
		// Ignore if the output is marked as a motor
		if	(
    5f80:	88 20       	and	r8, r8
    5f82:	c1 f0       	breq	.+48     	; 0x5fb4 <do_menu_item+0x28e>
			((servo_enable) && (servo_update >= 4)) &&
    5f84:	e3 e0       	ldi	r30, 0x03	; 3
    5f86:	e6 15       	cp	r30, r6
    5f88:	a8 f4       	brcc	.+42     	; 0x5fb4 <do_menu_item+0x28e>
    5f8a:	f6 01       	movw	r30, r12
    5f8c:	80 81       	ld	r24, Z
    5f8e:	82 30       	cpi	r24, 0x02	; 2
    5f90:	89 f0       	breq	.+34     	; 0x5fb4 <do_menu_item+0x28e>
			(Config.Channel[servo_number].Motor_marker != MOTOR)
			)
		{
			servo_update = 0;

			temp16 = scale_percent(value);	// Convert to servo position (from %)
    5f92:	8a 2d       	mov	r24, r10
    5f94:	0e 94 fb 3b 	call	0x77f6	; 0x77f6 <scale_percent>

			// Scale servo from 2500~5000 to 875~2125
			temp16 = ((temp16 - 3750) >> 1) + 1500; 
    5f98:	86 5a       	subi	r24, 0xA6	; 166
    5f9a:	9e 40       	sbci	r25, 0x0E	; 14
    5f9c:	95 95       	asr	r25
    5f9e:	87 95       	ror	r24

			cli();
    5fa0:	f8 94       	cli
			servo_update = 0;

			temp16 = scale_percent(value);	// Convert to servo position (from %)

			// Scale servo from 2500~5000 to 875~2125
			temp16 = ((temp16 - 3750) >> 1) + 1500; 
    5fa2:	bc 01       	movw	r22, r24
    5fa4:	64 52       	subi	r22, 0x24	; 36
    5fa6:	7a 4f       	sbci	r23, 0xFA	; 250

			cli();
			output_servo_ppm_asm3(servo_number, temp16);
    5fa8:	8c a5       	ldd	r24, Y+44	; 0x2c
    5faa:	9d a5       	ldd	r25, Y+45	; 0x2d
    5fac:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <output_servo_ppm_asm3>
			sei();
    5fb0:	78 94       	sei
		if	(
			((servo_enable) && (servo_update >= 4)) &&
			(Config.Channel[servo_number].Motor_marker != MOTOR)
			)
		{
			servo_update = 0;
    5fb2:	61 2c       	mov	r6, r1
			output_servo_ppm_asm3(servo_number, temp16);
			sei();
		}

		// Slow the loop rate for text items		
		 if (range.style == 1)
    5fb4:	fb 85       	ldd	r31, Y+11	; 0x0b
    5fb6:	f1 30       	cpi	r31, 0x01	; 1
    5fb8:	41 f4       	brne	.+16     	; 0x5fca <do_menu_item+0x2a4>
    5fba:	2f e7       	ldi	r18, 0x7F	; 127
    5fbc:	3a e1       	ldi	r19, 0x1A	; 26
    5fbe:	56 e0       	ldi	r21, 0x06	; 6
    5fc0:	21 50       	subi	r18, 0x01	; 1
    5fc2:	30 40       	sbci	r19, 0x00	; 0
    5fc4:	50 40       	sbci	r21, 0x00	; 0
    5fc6:	e1 f7       	brne	.-8      	; 0x5fc0 <do_menu_item+0x29a>
    5fc8:	04 c0       	rjmp	.+8      	; 0x5fd2 <do_menu_item+0x2ac>
    5fca:	87 ea       	ldi	r24, 0xA7	; 167
    5fcc:	91 e6       	ldi	r25, 0x61	; 97
    5fce:	01 97       	sbiw	r24, 0x01	; 1
    5fd0:	f1 f7       	brne	.-4      	; 0x5fce <do_menu_item+0x2a8>
    5fd2:	00 c0       	rjmp	.+0      	; 0x5fd4 <do_menu_item+0x2ae>
    5fd4:	00 00       	nop
    5fd6:	90 e0       	ldi	r25, 0x00	; 0
    5fd8:	0e cf       	rjmp	.-484    	; 0x5df6 <do_menu_item+0xd0>

	// Exit
	button = ENTER;

	// Divide value from that displayed if style = 2
	if (range.style == 2)
    5fda:	9b 85       	ldd	r25, Y+11	; 0x0b
    5fdc:	92 30       	cpi	r25, 0x02	; 2
    5fde:	31 f4       	brne	.+12     	; 0x5fec <do_menu_item+0x2c6>
	{
		value = value / mult;
    5fe0:	c5 01       	movw	r24, r10
    5fe2:	69 89       	ldd	r22, Y+17	; 0x11
    5fe4:	7a 89       	ldd	r23, Y+18	; 0x12
    5fe6:	0e 94 06 47 	call	0x8e0c	; 0x8e0c <__divmodhi4>
    5fea:	5b 01       	movw	r10, r22
	}

	*values = (int8_t)value;
    5fec:	ef 85       	ldd	r30, Y+15	; 0x0f
    5fee:	f8 89       	ldd	r31, Y+16	; 0x10
    5ff0:	a0 82       	st	Z, r10
}
    5ff2:	67 96       	adiw	r28, 0x17	; 23
    5ff4:	0f b6       	in	r0, 0x3f	; 63
    5ff6:	f8 94       	cli
    5ff8:	de bf       	out	0x3e, r29	; 62
    5ffa:	0f be       	out	0x3f, r0	; 63
    5ffc:	cd bf       	out	0x3d, r28	; 61
    5ffe:	df 91       	pop	r29
    6000:	cf 91       	pop	r28
    6002:	1f 91       	pop	r17
    6004:	0f 91       	pop	r16
    6006:	ff 90       	pop	r15
    6008:	ef 90       	pop	r14
    600a:	df 90       	pop	r13
    600c:	cf 90       	pop	r12
    600e:	bf 90       	pop	r11
    6010:	af 90       	pop	r10
    6012:	9f 90       	pop	r9
    6014:	8f 90       	pop	r8
    6016:	7f 90       	pop	r7
    6018:	6f 90       	pop	r6
    601a:	5f 90       	pop	r5
    601c:	4f 90       	pop	r4
    601e:	3f 90       	pop	r3
    6020:	2f 90       	pop	r2
    6022:	08 95       	ret
		// Display update
		if 	(!servo_enable || 									// Non-servo value or
			((display_update >= 32) && (button != NONE)) || 	// Servo value and 32 cycles passed but only with a button pressed or...
			 (first_time))										// First time into routine
		{
			display_update = 0;
    6024:	77 24       	eor	r7, r7
    6026:	73 94       	inc	r7
    6028:	9a cf       	rjmp	.-204    	; 0x5f5e <do_menu_item+0x238>

0000602a <menu_beep>:

void menu_beep(uint8_t beeps)
{
	uint8_t i;

	for (i=0; i < beeps; i++)
    602a:	90 e0       	ldi	r25, 0x00	; 0
    602c:	98 17       	cp	r25, r24
    602e:	b1 f0       	breq	.+44     	; 0x605c <menu_beep+0x32>
	{ 
		LVA = 1;
    6030:	29 9a       	sbi	0x05, 1	; 5
    6032:	2f e9       	ldi	r18, 0x9F	; 159
    6034:	36 e8       	ldi	r19, 0x86	; 134
    6036:	41 e0       	ldi	r20, 0x01	; 1
    6038:	21 50       	subi	r18, 0x01	; 1
    603a:	30 40       	sbci	r19, 0x00	; 0
    603c:	40 40       	sbci	r20, 0x00	; 0
    603e:	e1 f7       	brne	.-8      	; 0x6038 <menu_beep+0xe>
    6040:	00 c0       	rjmp	.+0      	; 0x6042 <menu_beep+0x18>
    6042:	00 00       	nop
		_delay_ms(25);
		LVA = 0;
    6044:	29 98       	cbi	0x05, 1	; 5
    6046:	2f e9       	ldi	r18, 0x9F	; 159
    6048:	36 e8       	ldi	r19, 0x86	; 134
    604a:	41 e0       	ldi	r20, 0x01	; 1
    604c:	21 50       	subi	r18, 0x01	; 1
    604e:	30 40       	sbci	r19, 0x00	; 0
    6050:	40 40       	sbci	r20, 0x00	; 0
    6052:	e1 f7       	brne	.-8      	; 0x604c <menu_beep+0x22>
    6054:	00 c0       	rjmp	.+0      	; 0x6056 <menu_beep+0x2c>
    6056:	00 00       	nop

void menu_beep(uint8_t beeps)
{
	uint8_t i;

	for (i=0; i < beeps; i++)
    6058:	9f 5f       	subi	r25, 0xFF	; 255
    605a:	e8 cf       	rjmp	.-48     	; 0x602c <menu_beep+0x2>
		LVA = 1;
		_delay_ms(25);
		LVA = 0;
		_delay_ms(25);
	}
}
    605c:	08 95       	ret

0000605e <update_menu>:
// top*		= Item number currently on top line
// temp*	= Currently selected item number
//************************************************************

void update_menu(uint8_t items, uint8_t start, uint8_t offset, uint8_t button, uint8_t* cursor, uint16_t* top, uint16_t* temp)
{
    605e:	af 92       	push	r10
    6060:	bf 92       	push	r11
    6062:	cf 92       	push	r12
    6064:	df 92       	push	r13
    6066:	ef 92       	push	r14
    6068:	ff 92       	push	r15
    606a:	0f 93       	push	r16
    606c:	1f 93       	push	r17
    606e:	cf 93       	push	r28
    6070:	df 93       	push	r29
    6072:	00 d0       	rcall	.+0      	; 0x6074 <update_menu+0x16>
    6074:	cd b7       	in	r28, 0x3d	; 61
    6076:	de b7       	in	r29, 0x3e	; 62
    6078:	98 2f       	mov	r25, r24
    607a:	58 01       	movw	r10, r16
	// Temporarily add in offset :(
	*top = *top + offset;
    607c:	04 2f       	mov	r16, r20
    607e:	10 e0       	ldi	r17, 0x00	; 0
    6080:	d7 01       	movw	r26, r14
    6082:	ed 91       	ld	r30, X+
    6084:	fc 91       	ld	r31, X
    6086:	11 97       	sbiw	r26, 0x01	; 1
    6088:	e0 0f       	add	r30, r16
    608a:	f1 1f       	adc	r31, r17
    608c:	ed 93       	st	X+, r30
    608e:	fc 93       	st	X, r31
	start = start + offset;
    6090:	64 0f       	add	r22, r20

	// Calculate which function has been requested
	if (button == ENTER)
    6092:	20 3e       	cpi	r18, 0xE0	; 224
    6094:	b1 f4       	brne	.+44     	; 0x60c2 <update_menu+0x64>
	{
		switch(*cursor) 
    6096:	d5 01       	movw	r26, r10
    6098:	8c 91       	ld	r24, X
    609a:	8f 30       	cpi	r24, 0x0F	; 15
    609c:	59 f0       	breq	.+22     	; 0x60b4 <update_menu+0x56>
    609e:	18 f4       	brcc	.+6      	; 0x60a6 <update_menu+0x48>
    60a0:	83 30       	cpi	r24, 0x03	; 3
    60a2:	49 f0       	breq	.+18     	; 0x60b6 <update_menu+0x58>
    60a4:	4d c0       	rjmp	.+154    	; 0x6140 <update_menu+0xe2>
    60a6:	8b 31       	cpi	r24, 0x1B	; 27
    60a8:	51 f0       	breq	.+20     	; 0x60be <update_menu+0x60>
    60aa:	87 32       	cpi	r24, 0x27	; 39
    60ac:	09 f0       	breq	.+2      	; 0x60b0 <update_menu+0x52>
    60ae:	48 c0       	rjmp	.+144    	; 0x6140 <update_menu+0xe2>
				break;	
			case LINE2:
				*temp = *top + 2;
				break;
			case LINE3:
				*temp = *top + 3;
    60b0:	33 96       	adiw	r30, 0x03	; 3
    60b2:	01 c0       	rjmp	.+2      	; 0x60b6 <update_menu+0x58>
		{
			case LINE0:
				*temp = *top;
				break;
			case LINE1:
				*temp = *top + 1;
    60b4:	31 96       	adiw	r30, 0x01	; 1
    60b6:	d6 01       	movw	r26, r12
    60b8:	ed 93       	st	X+, r30
    60ba:	fc 93       	st	X, r31
				break;	
    60bc:	41 c0       	rjmp	.+130    	; 0x6140 <update_menu+0xe2>
			case LINE2:
				*temp = *top + 2;
    60be:	32 96       	adiw	r30, 0x02	; 2
    60c0:	fa cf       	rjmp	.-12     	; 0x60b6 <update_menu+0x58>
				break;
		}
	}

	// Handle cursor Up/Down limits
	if (button == DOWN)	
    60c2:	20 3d       	cpi	r18, 0xD0	; 208
    60c4:	f9 f4       	brne	.+62     	; 0x6104 <update_menu+0xa6>
	{
		switch(*cursor) 
    60c6:	f5 01       	movw	r30, r10
    60c8:	80 81       	ld	r24, Z
    60ca:	8f 30       	cpi	r24, 0x0F	; 15
    60cc:	69 f0       	breq	.+26     	; 0x60e8 <update_menu+0x8a>
    60ce:	18 f4       	brcc	.+6      	; 0x60d6 <update_menu+0x78>
    60d0:	83 30       	cpi	r24, 0x03	; 3
    60d2:	31 f0       	breq	.+12     	; 0x60e0 <update_menu+0x82>
    60d4:	15 c0       	rjmp	.+42     	; 0x6100 <update_menu+0xa2>
    60d6:	8b 31       	cpi	r24, 0x1B	; 27
    60d8:	59 f0       	breq	.+22     	; 0x60f0 <update_menu+0x92>
    60da:	87 32       	cpi	r24, 0x27	; 39
    60dc:	69 f0       	breq	.+26     	; 0x60f8 <update_menu+0x9a>
    60de:	10 c0       	rjmp	.+32     	; 0x6100 <update_menu+0xa2>
		{
			case LINE0:
				if (items > 1) *cursor = LINE1;
    60e0:	92 30       	cpi	r25, 0x02	; 2
    60e2:	70 f1       	brcs	.+92     	; 0x6140 <update_menu+0xe2>
    60e4:	8f e0       	ldi	r24, 0x0F	; 15
    60e6:	27 c0       	rjmp	.+78     	; 0x6136 <update_menu+0xd8>
				break;	
			case LINE1:
				if (items > 2) *cursor = LINE2;
    60e8:	93 30       	cpi	r25, 0x03	; 3
    60ea:	50 f1       	brcs	.+84     	; 0x6140 <update_menu+0xe2>
    60ec:	8b e1       	ldi	r24, 0x1B	; 27
    60ee:	1f c0       	rjmp	.+62     	; 0x612e <update_menu+0xd0>
				break;	
			case LINE2:
				if (items > 3) *cursor = LINE3;
    60f0:	94 30       	cpi	r25, 0x04	; 4
    60f2:	30 f1       	brcs	.+76     	; 0x6140 <update_menu+0xe2>
    60f4:	87 e2       	ldi	r24, 0x27	; 39
    60f6:	1f c0       	rjmp	.+62     	; 0x6136 <update_menu+0xd8>
				break;
			case LINE3:
				if (items > 4) *cursor = NEXTLINE;
    60f8:	95 30       	cpi	r25, 0x05	; 5
    60fa:	10 f1       	brcs	.+68     	; 0x6140 <update_menu+0xe2>
    60fc:	88 e2       	ldi	r24, 0x28	; 40
    60fe:	17 c0       	rjmp	.+46     	; 0x612e <update_menu+0xd0>
				break;
			default:
				*cursor = NEXTLINE;
    6100:	88 e2       	ldi	r24, 0x28	; 40
    6102:	19 c0       	rjmp	.+50     	; 0x6136 <update_menu+0xd8>
				break;
		}
	}

	if (button == UP)	
    6104:	20 3b       	cpi	r18, 0xB0	; 176
    6106:	d1 f4       	brne	.+52     	; 0x613c <update_menu+0xde>
	{
		switch(*cursor) 
    6108:	f5 01       	movw	r30, r10
    610a:	80 81       	ld	r24, Z
    610c:	8f 30       	cpi	r24, 0x0F	; 15
    610e:	69 f0       	breq	.+26     	; 0x612a <update_menu+0xcc>
    6110:	20 f4       	brcc	.+8      	; 0x611a <update_menu+0xbc>
    6112:	83 30       	cpi	r24, 0x03	; 3
    6114:	79 f4       	brne	.+30     	; 0x6134 <update_menu+0xd6>
				break;
			case LINE1:
				*cursor = LINE0;
				break;
			case LINE0:
				*cursor = PREVLINE;
    6116:	82 e0       	ldi	r24, 0x02	; 2
    6118:	0a c0       	rjmp	.+20     	; 0x612e <update_menu+0xd0>
		}
	}

	if (button == UP)	
	{
		switch(*cursor) 
    611a:	8b 31       	cpi	r24, 0x1B	; 27
    611c:	21 f0       	breq	.+8      	; 0x6126 <update_menu+0xc8>
    611e:	87 32       	cpi	r24, 0x27	; 39
    6120:	49 f4       	brne	.+18     	; 0x6134 <update_menu+0xd6>
		{
			case LINE3:
				*cursor = LINE2;
    6122:	8b e1       	ldi	r24, 0x1B	; 27
    6124:	08 c0       	rjmp	.+16     	; 0x6136 <update_menu+0xd8>
				break;	
			case LINE2:
				*cursor = LINE1;
    6126:	8f e0       	ldi	r24, 0x0F	; 15
    6128:	02 c0       	rjmp	.+4      	; 0x612e <update_menu+0xd0>
				break;
			case LINE1:
				*cursor = LINE0;
    612a:	83 e0       	ldi	r24, 0x03	; 3
    612c:	04 c0       	rjmp	.+8      	; 0x6136 <update_menu+0xd8>
				break;
			case LINE0:
				*cursor = PREVLINE;
    612e:	f5 01       	movw	r30, r10
    6130:	80 83       	st	Z, r24
				break;
    6132:	06 c0       	rjmp	.+12     	; 0x6140 <update_menu+0xe2>
			default:
				*cursor = PREVLINE;
    6134:	82 e0       	ldi	r24, 0x02	; 2
    6136:	d5 01       	movw	r26, r10
    6138:	8c 93       	st	X, r24
				break;
    613a:	02 c0       	rjmp	.+4      	; 0x6140 <update_menu+0xe2>
		}
	}

	if (button != NONE)	
    613c:	20 3f       	cpi	r18, 0xF0	; 240
    613e:	81 f0       	breq	.+32     	; 0x6160 <update_menu+0x102>
	{
		menu_beep(1);
    6140:	81 e0       	ldi	r24, 0x01	; 1
    6142:	69 83       	std	Y+1, r22	; 0x01
    6144:	9a 83       	std	Y+2, r25	; 0x02
    6146:	0e 94 15 30 	call	0x602a	; 0x602a <menu_beep>
    614a:	bf ef       	ldi	r27, 0xFF	; 255
    614c:	e4 e3       	ldi	r30, 0x34	; 52
    614e:	fc e0       	ldi	r31, 0x0C	; 12
    6150:	b1 50       	subi	r27, 0x01	; 1
    6152:	e0 40       	sbci	r30, 0x00	; 0
    6154:	f0 40       	sbci	r31, 0x00	; 0
    6156:	e1 f7       	brne	.-8      	; 0x6150 <update_menu+0xf2>
    6158:	00 c0       	rjmp	.+0      	; 0x615a <update_menu+0xfc>
    615a:	00 00       	nop
    615c:	9a 81       	ldd	r25, Y+2	; 0x02
    615e:	69 81       	ldd	r22, Y+1	; 0x01
		_delay_ms(200);
	}

	// When cursor is at limits and button pressed
	if (*cursor == PREVLINE)								// Up				
    6160:	d5 01       	movw	r26, r10
    6162:	8c 91       	ld	r24, X
    6164:	82 30       	cpi	r24, 0x02	; 2
    6166:	71 f4       	brne	.+28     	; 0x6184 <update_menu+0x126>
	{
		*cursor  = LINE0;
    6168:	83 e0       	ldi	r24, 0x03	; 3
    616a:	8c 93       	st	X, r24
		if (*top > start) 
    616c:	f7 01       	movw	r30, r14
    616e:	20 81       	ld	r18, Z
    6170:	31 81       	ldd	r19, Z+1	; 0x01
    6172:	46 2f       	mov	r20, r22
    6174:	50 e0       	ldi	r21, 0x00	; 0
    6176:	42 17       	cp	r20, r18
    6178:	53 07       	cpc	r21, r19
    617a:	20 f4       	brcc	.+8      	; 0x6184 <update_menu+0x126>
		{
			*top = *top - 1;								// Shuffle list up
    617c:	21 50       	subi	r18, 0x01	; 1
    617e:	31 09       	sbc	r19, r1
    6180:	31 83       	std	Z+1, r19	; 0x01
    6182:	20 83       	st	Z, r18
		}
	}
	
	if (*cursor == NEXTLINE)								// Down
    6184:	d5 01       	movw	r26, r10
    6186:	8c 91       	ld	r24, X
    6188:	88 32       	cpi	r24, 0x28	; 40
    618a:	a1 f4       	brne	.+40     	; 0x61b4 <update_menu+0x156>
	{
		*cursor  = LINE3;
    618c:	87 e2       	ldi	r24, 0x27	; 39
    618e:	8c 93       	st	X, r24
		if ((*top + 3) < (uint16_t)((start + items) - 1))	// Compiler throws a warning here without the cast. top is uint16_t, start is uint8_t, items = uint8_t
    6190:	f7 01       	movw	r30, r14
    6192:	20 81       	ld	r18, Z
    6194:	31 81       	ldd	r19, Z+1	; 0x01
    6196:	a9 01       	movw	r20, r18
    6198:	4d 5f       	subi	r20, 0xFD	; 253
    619a:	5f 4f       	sbci	r21, 0xFF	; 255
    619c:	89 2f       	mov	r24, r25
    619e:	90 e0       	ldi	r25, 0x00	; 0
    61a0:	86 0f       	add	r24, r22
    61a2:	91 1d       	adc	r25, r1
    61a4:	01 97       	sbiw	r24, 0x01	; 1
    61a6:	48 17       	cp	r20, r24
    61a8:	59 07       	cpc	r21, r25
    61aa:	20 f4       	brcc	.+8      	; 0x61b4 <update_menu+0x156>
		{
			*top = *top + 1;								// Shuffle list down
    61ac:	2f 5f       	subi	r18, 0xFF	; 255
    61ae:	3f 4f       	sbci	r19, 0xFF	; 255
    61b0:	31 83       	std	Z+1, r19	; 0x01
    61b2:	20 83       	st	Z, r18
		}
	}

	// Remove temporary offset
	*top = *top - offset;
    61b4:	d7 01       	movw	r26, r14
    61b6:	8d 91       	ld	r24, X+
    61b8:	9c 91       	ld	r25, X
    61ba:	11 97       	sbiw	r26, 0x01	; 1
    61bc:	80 1b       	sub	r24, r16
    61be:	91 0b       	sbc	r25, r17
    61c0:	8d 93       	st	X+, r24
    61c2:	9c 93       	st	X, r25
}
    61c4:	0f 90       	pop	r0
    61c6:	0f 90       	pop	r0
    61c8:	df 91       	pop	r29
    61ca:	cf 91       	pop	r28
    61cc:	1f 91       	pop	r17
    61ce:	0f 91       	pop	r16
    61d0:	ff 90       	pop	r15
    61d2:	ef 90       	pop	r14
    61d4:	df 90       	pop	r13
    61d6:	cf 90       	pop	r12
    61d8:	bf 90       	pop	r11
    61da:	af 90       	pop	r10
    61dc:	08 95       	ret

000061de <print_cursor>:
// Print cursor on specified line
//************************************************************

void print_cursor(uint8_t line)
{
	LCD_Display_Text(13, (const unsigned char*)Wingdings, CURSOROFFSET, line);
    61de:	28 2f       	mov	r18, r24
    61e0:	30 e0       	ldi	r19, 0x00	; 0
    61e2:	43 e0       	ldi	r20, 0x03	; 3
    61e4:	50 e0       	ldi	r21, 0x00	; 0
    61e6:	6f ed       	ldi	r22, 0xDF	; 223
    61e8:	70 e0       	ldi	r23, 0x00	; 0
    61ea:	8d e0       	ldi	r24, 0x0D	; 13
    61ec:	90 e0       	ldi	r25, 0x00	; 0
    61ee:	0c 94 3f 21 	jmp	0x427e	; 0x427e <LCD_Display_Text>

000061f2 <print_menu_items>:
// MenuOffsets = originally an array, now just a fixed horizontal offset for the value text
// text_link = pointer to the text list for the values if not numeric
// cursor = cursor position
//**********************************************************************
void print_menu_items(uint16_t top, uint16_t start, int8_t values[], const unsigned char* menu_ranges, uint8_t rangetype, uint8_t MenuOffsets, const unsigned char* text_link, uint8_t cursor)
{
    61f2:	2f 92       	push	r2
    61f4:	3f 92       	push	r3
    61f6:	4f 92       	push	r4
    61f8:	5f 92       	push	r5
    61fa:	6f 92       	push	r6
    61fc:	7f 92       	push	r7
    61fe:	8f 92       	push	r8
    6200:	9f 92       	push	r9
    6202:	af 92       	push	r10
    6204:	bf 92       	push	r11
    6206:	cf 92       	push	r12
    6208:	df 92       	push	r13
    620a:	ef 92       	push	r14
    620c:	ff 92       	push	r15
    620e:	0f 93       	push	r16
    6210:	1f 93       	push	r17
    6212:	cf 93       	push	r28
    6214:	df 93       	push	r29
    6216:	cd b7       	in	r28, 0x3d	; 61
    6218:	de b7       	in	r29, 0x3e	; 62
    621a:	2a 97       	sbiw	r28, 0x0a	; 10
    621c:	0f b6       	in	r0, 0x3f	; 63
    621e:	f8 94       	cli
    6220:	de bf       	out	0x3e, r29	; 62
    6222:	0f be       	out	0x3f, r0	; 63
    6224:	cd bf       	out	0x3d, r28	; 61
    6226:	2c 01       	movw	r4, r24
    6228:	4a 01       	movw	r8, r20
    622a:	39 01       	movw	r6, r18
    622c:	0e 83       	std	Y+6, r16	; 0x06
    622e:	ef 82       	std	Y+7, r14	; 0x07
    6230:	a8 86       	std	Y+8, r10	; 0x08
	menu_range_t	range1;
		
	// Clear buffer before each update
	clear_buffer(buffer);
    6232:	81 e0       	ldi	r24, 0x01	; 1
    6234:	91 e0       	ldi	r25, 0x01	; 1
    6236:	69 87       	std	Y+9, r22	; 0x09
    6238:	7a 87       	std	Y+10, r23	; 0x0a
    623a:	0e 94 5e 1f 	call	0x3ebc	; 0x3ebc <clear_buffer>
	print_menu_frame(0);
    623e:	80 e0       	ldi	r24, 0x00	; 0
    6240:	0e 94 b5 2d 	call	0x5b6a	; 0x5b6a <print_menu_frame>
    6244:	25 e0       	ldi	r18, 0x05	; 5
    6246:	69 85       	ldd	r22, Y+9	; 0x09
    6248:	7a 85       	ldd	r23, Y+10	; 0x0a
    624a:	26 9f       	mul	r18, r22
    624c:	c0 01       	movw	r24, r0
    624e:	27 9f       	mul	r18, r23
    6250:	90 0d       	add	r25, r0
    6252:	11 24       	eor	r1, r1
    6254:	13 01       	movw	r2, r6
    6256:	28 1a       	sub	r2, r24
    6258:	39 0a       	sbc	r3, r25
    625a:	24 9d       	mul	r18, r4
    625c:	c0 01       	movw	r24, r0
    625e:	25 9d       	mul	r18, r5
    6260:	90 0d       	add	r25, r0
    6262:	11 24       	eor	r1, r1
    6264:	28 0e       	add	r2, r24
    6266:	39 1e       	adc	r3, r25
    6268:	72 01       	movw	r14, r4
    626a:	a1 2c       	mov	r10, r1
    626c:	b1 2c       	mov	r11, r1
    626e:	aa ed       	ldi	r26, 0xDA	; 218
    6270:	4a 2e       	mov	r4, r26
    6272:	a7 e1       	ldi	r26, 0x17	; 23
    6274:	5a 2e       	mov	r5, r26
    6276:	4e 18       	sub	r4, r14
    6278:	5f 08       	sbc	r5, r15
    627a:	c6 1a       	sub	r12, r22
    627c:	d7 0a       	sbc	r13, r23
    627e:	86 1a       	sub	r8, r22
    6280:	97 0a       	sbc	r9, r23
    6282:	82 01       	movw	r16, r4
    6284:	0e 0d       	add	r16, r14
    6286:	1f 1d       	adc	r17, r15
	
	// Print each line
	for (uint8_t i = 0; i < 4; i++)
	{
		LCD_Display_Text(top+i,(const unsigned char*)Verdana8,ITEMOFFSET,(uint8_t)pgm_read_byte(&lines[i]));
    6288:	f8 01       	movw	r30, r16
    628a:	24 91       	lpm	r18, Z
    628c:	30 e0       	ldi	r19, 0x00	; 0
    628e:	4a e0       	ldi	r20, 0x0A	; 10
    6290:	50 e0       	ldi	r21, 0x00	; 0
    6292:	67 ef       	ldi	r22, 0xF7	; 247
    6294:	79 e0       	ldi	r23, 0x09	; 9
    6296:	c7 01       	movw	r24, r14
    6298:	0e 94 3f 21 	call	0x427e	; 0x427e <LCD_Display_Text>

		// Handle unique or copied ranges (to reduce space)
		if (rangetype == 0)
    629c:	fe 81       	ldd	r31, Y+6	; 0x06
		{
			// Use each unique entry
			memcpy_P(&range1, &menu_ranges[(top+i - start)* sizeof(range1)], sizeof(range1));
    629e:	45 e0       	ldi	r20, 0x05	; 5
    62a0:	50 e0       	ldi	r21, 0x00	; 0
	for (uint8_t i = 0; i < 4; i++)
	{
		LCD_Display_Text(top+i,(const unsigned char*)Verdana8,ITEMOFFSET,(uint8_t)pgm_read_byte(&lines[i]));

		// Handle unique or copied ranges (to reduce space)
		if (rangetype == 0)
    62a2:	f1 11       	cpse	r31, r1
    62a4:	04 c0       	rjmp	.+8      	; 0x62ae <print_menu_items+0xbc>
		{
			// Use each unique entry
			memcpy_P(&range1, &menu_ranges[(top+i - start)* sizeof(range1)], sizeof(range1));
    62a6:	b5 01       	movw	r22, r10
    62a8:	62 0d       	add	r22, r2
    62aa:	73 1d       	adc	r23, r3
    62ac:	01 c0       	rjmp	.+2      	; 0x62b0 <print_menu_items+0xbe>
		}
		else
		{
			// Use just the first entry in array for all 
			memcpy_P(&range1, &menu_ranges[0], sizeof(range1));
    62ae:	b3 01       	movw	r22, r6
    62b0:	ce 01       	movw	r24, r28
    62b2:	01 96       	adiw	r24, 0x01	; 1
    62b4:	0e 94 92 47 	call	0x8f24	; 0x8f24 <memcpy_P>
		}

		print_menu_text((values[top+i - start]), range1.style, (pgm_read_byte(&text_link[top+i - start]) + values[top+i - start]), MenuOffsets, (uint8_t)pgm_read_byte(&lines[i]));
    62b8:	f8 01       	movw	r30, r16
    62ba:	04 91       	lpm	r16, Z
    62bc:	f6 01       	movw	r30, r12
    62be:	ee 0d       	add	r30, r14
    62c0:	ff 1d       	adc	r31, r15
    62c2:	e4 91       	lpm	r30, Z
    62c4:	d4 01       	movw	r26, r8
    62c6:	ae 0d       	add	r26, r14
    62c8:	bf 1d       	adc	r27, r15
    62ca:	8c 91       	ld	r24, X
    62cc:	99 27       	eor	r25, r25
    62ce:	87 fd       	sbrc	r24, 7
    62d0:	90 95       	com	r25
    62d2:	ac 01       	movw	r20, r24
    62d4:	4e 0f       	add	r20, r30
    62d6:	51 1d       	adc	r21, r1
    62d8:	2f 81       	ldd	r18, Y+7	; 0x07
    62da:	6c 81       	ldd	r22, Y+4	; 0x04
    62dc:	0e 94 3a 2e 	call	0x5c74	; 0x5c74 <print_menu_text>
    62e0:	ff ef       	ldi	r31, 0xFF	; 255
    62e2:	ef 1a       	sub	r14, r31
    62e4:	ff 0a       	sbc	r15, r31
    62e6:	85 e0       	ldi	r24, 0x05	; 5
    62e8:	a8 0e       	add	r10, r24
    62ea:	b1 1c       	adc	r11, r1
	// Clear buffer before each update
	clear_buffer(buffer);
	print_menu_frame(0);
	
	// Print each line
	for (uint8_t i = 0; i < 4; i++)
    62ec:	e4 e1       	ldi	r30, 0x14	; 20
    62ee:	ae 16       	cp	r10, r30
    62f0:	b1 04       	cpc	r11, r1
    62f2:	09 f0       	breq	.+2      	; 0x62f6 <print_menu_items+0x104>
    62f4:	c6 cf       	rjmp	.-116    	; 0x6282 <print_menu_items+0x90>
		}

		print_menu_text((values[top+i - start]), range1.style, (pgm_read_byte(&text_link[top+i - start]) + values[top+i - start]), MenuOffsets, (uint8_t)pgm_read_byte(&lines[i]));
	}

	print_cursor(cursor);	// Cursor
    62f6:	88 85       	ldd	r24, Y+8	; 0x08
    62f8:	0e 94 ef 30 	call	0x61de	; 0x61de <print_cursor>
	write_buffer(buffer);
    62fc:	81 e0       	ldi	r24, 0x01	; 1
    62fe:	91 e0       	ldi	r25, 0x01	; 1
    6300:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <write_buffer>
	poll_buttons(true);
    6304:	81 e0       	ldi	r24, 0x01	; 1
    6306:	0e 94 5e 2e 	call	0x5cbc	; 0x5cbc <poll_buttons>
}
    630a:	2a 96       	adiw	r28, 0x0a	; 10
    630c:	0f b6       	in	r0, 0x3f	; 63
    630e:	f8 94       	cli
    6310:	de bf       	out	0x3e, r29	; 62
    6312:	0f be       	out	0x3f, r0	; 63
    6314:	cd bf       	out	0x3d, r28	; 61
    6316:	df 91       	pop	r29
    6318:	cf 91       	pop	r28
    631a:	1f 91       	pop	r17
    631c:	0f 91       	pop	r16
    631e:	ff 90       	pop	r15
    6320:	ef 90       	pop	r14
    6322:	df 90       	pop	r13
    6324:	cf 90       	pop	r12
    6326:	bf 90       	pop	r11
    6328:	af 90       	pop	r10
    632a:	9f 90       	pop	r9
    632c:	8f 90       	pop	r8
    632e:	7f 90       	pop	r7
    6330:	6f 90       	pop	r6
    6332:	5f 90       	pop	r5
    6334:	4f 90       	pop	r4
    6336:	3f 90       	pop	r3
    6338:	2f 90       	pop	r2
    633a:	08 95       	ret

0000633c <menu_flight>:
//************************************************************
// Main menu-specific setup
//************************************************************

void menu_flight(uint8_t mode)
{
    633c:	6f 92       	push	r6
    633e:	7f 92       	push	r7
    6340:	8f 92       	push	r8
    6342:	af 92       	push	r10
    6344:	bf 92       	push	r11
    6346:	cf 92       	push	r12
    6348:	df 92       	push	r13
    634a:	ef 92       	push	r14
    634c:	ff 92       	push	r15
    634e:	0f 93       	push	r16
    6350:	1f 93       	push	r17
    6352:	cf 93       	push	r28
    6354:	df 93       	push	r29
    6356:	00 d0       	rcall	.+0      	; 0x6358 <menu_flight+0x1c>
    6358:	00 d0       	rcall	.+0      	; 0x635a <menu_flight+0x1e>
    635a:	1f 92       	push	r1
    635c:	cd b7       	in	r28, 0x3d	; 61
    635e:	de b7       	in	r29, 0x3e	; 62
	int8_t *value_ptr;
	menu_range_t range;
	uint8_t text_link;

	// If sub-menu item has changed, reset sub-menu positions
	if (menu_flag)
    6360:	90 91 ee 07 	lds	r25, 0x07EE
    6364:	99 23       	and	r25, r25
    6366:	41 f0       	breq	.+16     	; 0x6378 <menu_flight+0x3c>
	{
		sub_top = FLIGHTSTART;
    6368:	2a ea       	ldi	r18, 0xAA	; 170
    636a:	30 e0       	ldi	r19, 0x00	; 0
    636c:	30 93 37 05 	sts	0x0537, r19
    6370:	20 93 36 05 	sts	0x0536, r18
		menu_flag = 0;
    6374:	10 92 ee 07 	sts	0x07EE, r1
	}

	while(button != BACK)
	{
		value_ptr = &Config.FlightMode[mode].Roll_P_mult;
    6378:	92 e1       	ldi	r25, 0x12	; 18
    637a:	89 9f       	mul	r24, r25
    637c:	30 01       	movw	r6, r0
    637e:	11 24       	eor	r1, r1
    6380:	c3 01       	movw	r24, r6
    6382:	8b 51       	subi	r24, 0x1B	; 27
    6384:	9a 4f       	sbci	r25, 0xFA	; 250
    6386:	3c 01       	movw	r6, r24
	{
		sub_top = FLIGHTSTART;
		menu_flag = 0;
	}

	while(button != BACK)
    6388:	80 91 ec 07 	lds	r24, 0x07EC
    638c:	80 37       	cpi	r24, 0x70	; 112
    638e:	09 f4       	brne	.+2      	; 0x6392 <menu_flight+0x56>
    6390:	5d c0       	rjmp	.+186    	; 0x644c <menu_flight+0x110>
	{
		value_ptr = &Config.FlightMode[mode].Roll_P_mult;

		// Print menu
		print_menu_items(sub_top, FLIGHTSTART, value_ptr, (const unsigned char*)flight_menu_ranges, 0, FLIGHTOFFSET, (const unsigned char*)FlightMenuText, cursor);
    6392:	a0 90 05 05 	lds	r10, 0x0505
    6396:	88 e3       	ldi	r24, 0x38	; 56
    6398:	c8 2e       	mov	r12, r24
    639a:	88 e1       	ldi	r24, 0x18	; 24
    639c:	d8 2e       	mov	r13, r24
    639e:	9f e4       	ldi	r25, 0x4F	; 79
    63a0:	e9 2e       	mov	r14, r25
    63a2:	00 e0       	ldi	r16, 0x00	; 0
    63a4:	2e ed       	ldi	r18, 0xDE	; 222
    63a6:	37 e1       	ldi	r19, 0x17	; 23
    63a8:	a3 01       	movw	r20, r6
    63aa:	6a ea       	ldi	r22, 0xAA	; 170
    63ac:	70 e0       	ldi	r23, 0x00	; 0
    63ae:	80 91 36 05 	lds	r24, 0x0536
    63b2:	90 91 37 05 	lds	r25, 0x0537
    63b6:	0e 94 f9 30 	call	0x61f2	; 0x61f2 <print_menu_items>

		// Handle menu changes
		update_menu(FLIGHTITEMS, FLIGHTSTART, 0, button, &cursor, &sub_top, &menu_temp);
    63ba:	21 e3       	ldi	r18, 0x31	; 49
    63bc:	c2 2e       	mov	r12, r18
    63be:	25 e0       	ldi	r18, 0x05	; 5
    63c0:	d2 2e       	mov	r13, r18
    63c2:	36 e3       	ldi	r19, 0x36	; 54
    63c4:	e3 2e       	mov	r14, r19
    63c6:	35 e0       	ldi	r19, 0x05	; 5
    63c8:	f3 2e       	mov	r15, r19
    63ca:	05 e0       	ldi	r16, 0x05	; 5
    63cc:	15 e0       	ldi	r17, 0x05	; 5
    63ce:	20 91 ec 07 	lds	r18, 0x07EC
    63d2:	40 e0       	ldi	r20, 0x00	; 0
    63d4:	6a ea       	ldi	r22, 0xAA	; 170
    63d6:	82 e1       	ldi	r24, 0x12	; 18
    63d8:	0e 94 2f 30 	call	0x605e	; 0x605e <update_menu>
		range = get_menu_range ((const unsigned char*)flight_menu_ranges, (menu_temp - FLIGHTSTART));
    63dc:	60 91 31 05 	lds	r22, 0x0531
    63e0:	6a 5a       	subi	r22, 0xAA	; 170
    63e2:	8e ed       	ldi	r24, 0xDE	; 222
    63e4:	97 e1       	ldi	r25, 0x17	; 23
    63e6:	0e 94 0a 2e 	call	0x5c14	; 0x5c14 <get_menu_range>
    63ea:	29 83       	std	Y+1, r18	; 0x01
    63ec:	3a 83       	std	Y+2, r19	; 0x02
    63ee:	4b 83       	std	Y+3, r20	; 0x03
    63f0:	5c 83       	std	Y+4, r21	; 0x04
    63f2:	6d 83       	std	Y+5, r22	; 0x05

		if (button == ENTER)
    63f4:	80 91 ec 07 	lds	r24, 0x07EC
    63f8:	80 3e       	cpi	r24, 0xE0	; 224
    63fa:	e1 f4       	brne	.+56     	; 0x6434 <menu_flight+0xf8>
		{
			text_link = pgm_read_byte(&FlightMenuText[menu_temp - FLIGHTSTART]);
    63fc:	80 91 31 05 	lds	r24, 0x0531
    6400:	90 91 32 05 	lds	r25, 0x0532
    6404:	bc 01       	movw	r22, r24
    6406:	6a 5a       	subi	r22, 0xAA	; 170
    6408:	71 09       	sbc	r23, r1
    640a:	fb 01       	movw	r30, r22
    640c:	e8 5c       	subi	r30, 0xC8	; 200
    640e:	f7 4e       	sbci	r31, 0xE7	; 231
    6410:	a4 90       	lpm	r10, Z
			do_menu_item(menu_temp, value_ptr + (menu_temp - FLIGHTSTART), 1, range, 0, text_link, false, 0);
    6412:	b1 2c       	mov	r11, r1
    6414:	66 0d       	add	r22, r6
    6416:	77 1d       	adc	r23, r7
    6418:	1f 92       	push	r1
    641a:	1f 92       	push	r1
    641c:	81 2c       	mov	r8, r1
    641e:	c1 2c       	mov	r12, r1
    6420:	e9 80       	ldd	r14, Y+1	; 0x01
    6422:	fa 80       	ldd	r15, Y+2	; 0x02
    6424:	0b 81       	ldd	r16, Y+3	; 0x03
    6426:	1c 81       	ldd	r17, Y+4	; 0x04
    6428:	2d 81       	ldd	r18, Y+5	; 0x05
    642a:	41 e0       	ldi	r20, 0x01	; 1
    642c:	0e 94 93 2e 	call	0x5d26	; 0x5d26 <do_menu_item>
    6430:	0f 90       	pop	r0
    6432:	0f 90       	pop	r0
		}

		// Update limits when exiting
		if (button == ENTER)
    6434:	80 91 ec 07 	lds	r24, 0x07EC
    6438:	80 3e       	cpi	r24, 0xE0	; 224
    643a:	09 f0       	breq	.+2      	; 0x643e <menu_flight+0x102>
    643c:	a5 cf       	rjmp	.-182    	; 0x6388 <menu_flight+0x4c>
		{
			UpdateLimits();			 // Update I-term limits and triggers based on percentages
    643e:	0e 94 91 35 	call	0x6b22	; 0x6b22 <UpdateLimits>
			Save_Config_to_EEPROM(); // Save value and return
    6442:	0e 94 9c 16 	call	0x2d38	; 0x2d38 <Save_Config_to_EEPROM>
			Wait_BUTTON4();			 // Wait for user's finger off the button
    6446:	0e 94 fa 32 	call	0x65f4	; 0x65f4 <Wait_BUTTON4>
    644a:	9e cf       	rjmp	.-196    	; 0x6388 <menu_flight+0x4c>
		}
	}
}
    644c:	0f 90       	pop	r0
    644e:	0f 90       	pop	r0
    6450:	0f 90       	pop	r0
    6452:	0f 90       	pop	r0
    6454:	0f 90       	pop	r0
    6456:	df 91       	pop	r29
    6458:	cf 91       	pop	r28
    645a:	1f 91       	pop	r17
    645c:	0f 91       	pop	r16
    645e:	ff 90       	pop	r15
    6460:	ef 90       	pop	r14
    6462:	df 90       	pop	r13
    6464:	cf 90       	pop	r12
    6466:	bf 90       	pop	r11
    6468:	af 90       	pop	r10
    646a:	8f 90       	pop	r8
    646c:	7f 90       	pop	r7
    646e:	6f 90       	pop	r6
    6470:	08 95       	ret

00006472 <do_main_menu_item>:
	}
}

void do_main_menu_item(uint8_t menuitem)
{
	switch(menuitem) 
    6472:	90 e0       	ldi	r25, 0x00	; 0
    6474:	fc 01       	movw	r30, r24
    6476:	ed 54       	subi	r30, 0x4D	; 77
    6478:	f1 09       	sbc	r31, r1
    647a:	e3 31       	cpi	r30, 0x13	; 19
    647c:	f1 05       	cpc	r31, r1
    647e:	70 f5       	brcc	.+92     	; 0x64dc <do_main_menu_item+0x6a>
    6480:	e2 5c       	subi	r30, 0xC2	; 194
    6482:	ff 4f       	sbci	r31, 0xFF	; 255
    6484:	0c 94 5b 47 	jmp	0x8eb6	; 0x8eb6 <__tablejump2__>
	{
		case MAINSTART:
			menu_rc_setup(2); 		// 1.General
    6488:	82 e0       	ldi	r24, 0x02	; 2
    648a:	01 c0       	rjmp	.+2      	; 0x648e <do_main_menu_item+0x1c>
			break;
		case MAINSTART+1:
			menu_rc_setup(1); 		// 2.RX setup	
    648c:	81 e0       	ldi	r24, 0x01	; 1
    648e:	0c 94 8f 34 	jmp	0x691e	; 0x691e <menu_rc_setup>
			break;
		case MAINSTART+2:
			Display_rcinput();		// 3.RX inputs
    6492:	0c 94 98 11 	jmp	0x2330	; 0x2330 <Display_rcinput>
			break;
		case MAINSTART+3:
			Display_sticks(); 		// 4.Stick polarity	
    6496:	0c 94 5a 15 	jmp	0x2ab4	; 0x2ab4 <Display_sticks>
			break;
		case MAINSTART+4:
			Display_sensors();		// 5.Sensor calibration
    649a:	0c 94 97 12 	jmp	0x252e	; 0x252e <Display_sensors>
			break;
		case MAINSTART+5:
			Display_balance();		// 6.Level meter
    649e:	0c 94 04 11 	jmp	0x2208	; 0x2208 <Display_balance>
			break;
		case MAINSTART+6:
			menu_flight(0);			// 7.Flight profile 1
    64a2:	80 e0       	ldi	r24, 0x00	; 0
    64a4:	01 c0       	rjmp	.+2      	; 0x64a8 <do_main_menu_item+0x36>
			break;
		case MAINSTART+7:
			menu_flight(1); 		// 8.Flight profile 2
    64a6:	81 e0       	ldi	r24, 0x01	; 1
    64a8:	0c 94 9e 31 	jmp	0x633c	; 0x633c <menu_flight>
			break;
		case MAINSTART+8:
			menu_mixer(0);			// 9.OUT1 Mixer
    64ac:	80 e0       	ldi	r24, 0x00	; 0
    64ae:	0d c0       	rjmp	.+26     	; 0x64ca <do_main_menu_item+0x58>
			break;
		case MAINSTART+9:
			menu_mixer(1);			// 10.OUT2 Mixer
    64b0:	81 e0       	ldi	r24, 0x01	; 1
    64b2:	0b c0       	rjmp	.+22     	; 0x64ca <do_main_menu_item+0x58>
			break;
		case MAINSTART+10:
			menu_mixer(2);			// 11.OUT3 Mixer
    64b4:	82 e0       	ldi	r24, 0x02	; 2
    64b6:	09 c0       	rjmp	.+18     	; 0x64ca <do_main_menu_item+0x58>
			break;
		case MAINSTART+11:
			menu_mixer(3);			// 12.OUT4 Mixer
    64b8:	83 e0       	ldi	r24, 0x03	; 3
    64ba:	07 c0       	rjmp	.+14     	; 0x64ca <do_main_menu_item+0x58>
			break;
		case MAINSTART+12:
			menu_mixer(4);			// 13.OUT5 Mixer
    64bc:	84 e0       	ldi	r24, 0x04	; 4
    64be:	05 c0       	rjmp	.+10     	; 0x64ca <do_main_menu_item+0x58>
			break;
		case MAINSTART+13:
			menu_mixer(5);			// 14.OUT6 Mixer
    64c0:	85 e0       	ldi	r24, 0x05	; 5
    64c2:	03 c0       	rjmp	.+6      	; 0x64ca <do_main_menu_item+0x58>
			break;
		case MAINSTART+14:
			menu_mixer(6);			// 15.OUT7 Mixer
    64c4:	86 e0       	ldi	r24, 0x06	; 6
    64c6:	01 c0       	rjmp	.+2      	; 0x64ca <do_main_menu_item+0x58>
			break;
		case MAINSTART+15:
			menu_mixer(7);			// 16.OUT8 Mixer
    64c8:	87 e0       	ldi	r24, 0x07	; 7
    64ca:	0c 94 07 33 	jmp	0x660e	; 0x660e <menu_mixer>
			break;
		case MAINSTART+16:
			menu_servo_setup(1);	// 17.Servo direction
    64ce:	81 e0       	ldi	r24, 0x01	; 1
    64d0:	03 c0       	rjmp	.+6      	; 0x64d8 <do_main_menu_item+0x66>
			break;
		case MAINSTART+17:
			menu_servo_setup(2); 	// 18.Neg. Servo trvl. (%)
    64d2:	82 e0       	ldi	r24, 0x02	; 2
    64d4:	01 c0       	rjmp	.+2      	; 0x64d8 <do_main_menu_item+0x66>
			break;
		case MAINSTART+18:
			menu_servo_setup(3); 	// 19.Pos. Servo trvl. (%)
    64d6:	83 e0       	ldi	r24, 0x03	; 3
    64d8:	0c 94 a2 33 	jmp	0x6744	; 0x6744 <menu_servo_setup>
    64dc:	08 95       	ret

000064de <Wait_BUTTON1>:
	} // Switch
}

void Wait_BUTTON1(void)
{
	while(BUTTON1 == 0)
    64de:	1f 99       	sbic	0x03, 7	; 3
    64e0:	0a c0       	rjmp	.+20     	; 0x64f6 <Wait_BUTTON1+0x18>
    64e2:	2f e3       	ldi	r18, 0x3F	; 63
    64e4:	8d e0       	ldi	r24, 0x0D	; 13
    64e6:	93 e0       	ldi	r25, 0x03	; 3
    64e8:	21 50       	subi	r18, 0x01	; 1
    64ea:	80 40       	sbci	r24, 0x00	; 0
    64ec:	90 40       	sbci	r25, 0x00	; 0
    64ee:	e1 f7       	brne	.-8      	; 0x64e8 <Wait_BUTTON1+0xa>
    64f0:	00 c0       	rjmp	.+0      	; 0x64f2 <Wait_BUTTON1+0x14>
    64f2:	00 00       	nop
    64f4:	f4 cf       	rjmp	.-24     	; 0x64de <Wait_BUTTON1>
	{
		_delay_ms(50);
	}
}
    64f6:	08 95       	ret

000064f8 <menu_main>:
uint16_t main_top = MAINSTART;
uint16_t sub_top = 0;
uint8_t menu_flag;

void menu_main(void)
{
    64f8:	af 92       	push	r10
    64fa:	bf 92       	push	r11
    64fc:	cf 92       	push	r12
    64fe:	df 92       	push	r13
    6500:	ef 92       	push	r14
    6502:	ff 92       	push	r15
    6504:	0f 93       	push	r16
    6506:	1f 93       	push	r17
    6508:	cf 93       	push	r28
    650a:	df 93       	push	r29
	static uint8_t main_cursor = LINE0;	// These are now static so as to remember the main menu position
	static uint16_t main_temp = 0;
	static uint8_t old_menu = 0;

	button = NONE;
    650c:	80 ef       	ldi	r24, 0xF0	; 240
    650e:	80 93 ec 07 	sts	0x07EC, r24

	// Wait until user's finger is off button 1
	Wait_BUTTON1();
    6512:	0e 94 6f 32 	call	0x64de	; 0x64de <Wait_BUTTON1>

		// If main menu item has changed, reset sub-menu positions
		// and flag to sub-menus that positions need to be reset
		if (main_temp != old_menu)
		{
			cursor = LINE0;
    6516:	23 e0       	ldi	r18, 0x03	; 3
    6518:	b2 2e       	mov	r11, r18

		// If ENTER pressed, jump to menu 
		if (button == ENTER)
		{
			do_main_menu_item(main_temp);
			button = NONE;
    651a:	30 ef       	ldi	r19, 0xF0	; 240
    651c:	a3 2e       	mov	r10, r19
	button = NONE;

	// Wait until user's finger is off button 1
	Wait_BUTTON1();
	
	while(button != BACK)
    651e:	80 91 ec 07 	lds	r24, 0x07EC
    6522:	80 37       	cpi	r24, 0x70	; 112
    6524:	09 f4       	brne	.+2      	; 0x6528 <menu_main+0x30>
    6526:	5b c0       	rjmp	.+182    	; 0x65de <menu_main+0xe6>
	{
		// Clear buffer before each update
		clear_buffer(buffer);	
    6528:	81 e0       	ldi	r24, 0x01	; 1
    652a:	91 e0       	ldi	r25, 0x01	; 1
    652c:	0e 94 5e 1f 	call	0x3ebc	; 0x3ebc <clear_buffer>

		// Print menu
		print_menu_frame(0);													// Frame
    6530:	80 e0       	ldi	r24, 0x00	; 0
    6532:	0e 94 b5 2d 	call	0x5b6a	; 0x5b6a <print_menu_frame>
		
		for (uint16_t i = 0; i < 4; i++)
    6536:	c0 e0       	ldi	r28, 0x00	; 0
    6538:	d0 e0       	ldi	r29, 0x00	; 0
    653a:	fe 01       	movw	r30, r28
    653c:	e6 52       	subi	r30, 0x26	; 38
    653e:	f8 4e       	sbci	r31, 0xE8	; 232
		{
			LCD_Display_Text(main_top+i,(const unsigned char*)Verdana8,ITEMOFFSET,(uint8_t)pgm_read_byte(&lines[i]));	// Lines
    6540:	24 91       	lpm	r18, Z
    6542:	30 e0       	ldi	r19, 0x00	; 0
    6544:	80 91 07 05 	lds	r24, 0x0507
    6548:	90 91 08 05 	lds	r25, 0x0508
    654c:	4a e0       	ldi	r20, 0x0A	; 10
    654e:	50 e0       	ldi	r21, 0x00	; 0
    6550:	67 ef       	ldi	r22, 0xF7	; 247
    6552:	79 e0       	ldi	r23, 0x09	; 9
    6554:	8c 0f       	add	r24, r28
    6556:	9d 1f       	adc	r25, r29
    6558:	0e 94 3f 21 	call	0x427e	; 0x427e <LCD_Display_Text>
		clear_buffer(buffer);	

		// Print menu
		print_menu_frame(0);													// Frame
		
		for (uint16_t i = 0; i < 4; i++)
    655c:	21 96       	adiw	r28, 0x01	; 1
    655e:	c4 30       	cpi	r28, 0x04	; 4
    6560:	d1 05       	cpc	r29, r1
    6562:	59 f7       	brne	.-42     	; 0x653a <menu_main+0x42>
		{
			LCD_Display_Text(main_top+i,(const unsigned char*)Verdana8,ITEMOFFSET,(uint8_t)pgm_read_byte(&lines[i]));	// Lines
		}

		print_cursor(main_cursor);												// Cursor
    6564:	80 91 06 05 	lds	r24, 0x0506
    6568:	0e 94 ef 30 	call	0x61de	; 0x61de <print_cursor>
		write_buffer(buffer);
    656c:	81 e0       	ldi	r24, 0x01	; 1
    656e:	91 e0       	ldi	r25, 0x01	; 1
    6570:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <write_buffer>

		// Poll buttons when idle
		poll_buttons(true);
    6574:	81 e0       	ldi	r24, 0x01	; 1
    6576:	0e 94 5e 2e 	call	0x5cbc	; 0x5cbc <poll_buttons>

		// Handle menu changes
		update_menu(MAINITEMS, MAINSTART, 0, button, &main_cursor, &main_top, &main_temp);
    657a:	84 e3       	ldi	r24, 0x34	; 52
    657c:	c8 2e       	mov	r12, r24
    657e:	85 e0       	ldi	r24, 0x05	; 5
    6580:	d8 2e       	mov	r13, r24
    6582:	97 e0       	ldi	r25, 0x07	; 7
    6584:	e9 2e       	mov	r14, r25
    6586:	95 e0       	ldi	r25, 0x05	; 5
    6588:	f9 2e       	mov	r15, r25
    658a:	06 e0       	ldi	r16, 0x06	; 6
    658c:	15 e0       	ldi	r17, 0x05	; 5
    658e:	20 91 ec 07 	lds	r18, 0x07EC
    6592:	40 e0       	ldi	r20, 0x00	; 0
    6594:	6d e4       	ldi	r22, 0x4D	; 77
    6596:	83 e1       	ldi	r24, 0x13	; 19
    6598:	0e 94 2f 30 	call	0x605e	; 0x605e <update_menu>

		// If main menu item has changed, reset sub-menu positions
		// and flag to sub-menus that positions need to be reset
		if (main_temp != old_menu)
    659c:	80 91 34 05 	lds	r24, 0x0534
    65a0:	90 91 35 05 	lds	r25, 0x0535
    65a4:	20 91 33 05 	lds	r18, 0x0533
    65a8:	30 e0       	ldi	r19, 0x00	; 0
    65aa:	82 17       	cp	r24, r18
    65ac:	93 07       	cpc	r25, r19
    65ae:	59 f0       	breq	.+22     	; 0x65c6 <menu_main+0xce>
		{
			cursor = LINE0;
    65b0:	b0 92 05 05 	sts	0x0505, r11
			menu_temp = 0;
    65b4:	10 92 32 05 	sts	0x0532, r1
    65b8:	10 92 31 05 	sts	0x0531, r1
			old_menu = main_temp;
    65bc:	80 93 33 05 	sts	0x0533, r24
			menu_flag = 1;
    65c0:	21 e0       	ldi	r18, 0x01	; 1
    65c2:	20 93 ee 07 	sts	0x07EE, r18
		}

		// If ENTER pressed, jump to menu 
		if (button == ENTER)
    65c6:	20 91 ec 07 	lds	r18, 0x07EC
    65ca:	20 3e       	cpi	r18, 0xE0	; 224
    65cc:	09 f0       	breq	.+2      	; 0x65d0 <menu_main+0xd8>
    65ce:	a7 cf       	rjmp	.-178    	; 0x651e <menu_main+0x26>
		{
			do_main_menu_item(main_temp);
    65d0:	0e 94 39 32 	call	0x6472	; 0x6472 <do_main_menu_item>
			button = NONE;
    65d4:	a0 92 ec 07 	sts	0x07EC, r10

			// Wait until user's finger is off button 1
			Wait_BUTTON1();
    65d8:	0e 94 6f 32 	call	0x64de	; 0x64de <Wait_BUTTON1>
    65dc:	a0 cf       	rjmp	.-192    	; 0x651e <menu_main+0x26>
		}
	}
}
    65de:	df 91       	pop	r29
    65e0:	cf 91       	pop	r28
    65e2:	1f 91       	pop	r17
    65e4:	0f 91       	pop	r16
    65e6:	ff 90       	pop	r15
    65e8:	ef 90       	pop	r14
    65ea:	df 90       	pop	r13
    65ec:	cf 90       	pop	r12
    65ee:	bf 90       	pop	r11
    65f0:	af 90       	pop	r10
    65f2:	08 95       	ret

000065f4 <Wait_BUTTON4>:
	}
}

void Wait_BUTTON4(void)
{
	while(BUTTON4 == 0)
    65f4:	1c 99       	sbic	0x03, 4	; 3
    65f6:	0a c0       	rjmp	.+20     	; 0x660c <Wait_BUTTON4+0x18>
    65f8:	2f e3       	ldi	r18, 0x3F	; 63
    65fa:	8d e0       	ldi	r24, 0x0D	; 13
    65fc:	93 e0       	ldi	r25, 0x03	; 3
    65fe:	21 50       	subi	r18, 0x01	; 1
    6600:	80 40       	sbci	r24, 0x00	; 0
    6602:	90 40       	sbci	r25, 0x00	; 0
    6604:	e1 f7       	brne	.-8      	; 0x65fe <Wait_BUTTON4+0xa>
    6606:	00 c0       	rjmp	.+0      	; 0x6608 <Wait_BUTTON4+0x14>
    6608:	00 00       	nop
    660a:	f4 cf       	rjmp	.-24     	; 0x65f4 <Wait_BUTTON4>
	{
		_delay_ms(50);
	}
    660c:	08 95       	ret

0000660e <menu_mixer>:
//************************************************************
// Main menu-specific setup
//************************************************************

void menu_mixer(uint8_t i)
{
    660e:	6f 92       	push	r6
    6610:	7f 92       	push	r7
    6612:	8f 92       	push	r8
    6614:	af 92       	push	r10
    6616:	bf 92       	push	r11
    6618:	cf 92       	push	r12
    661a:	df 92       	push	r13
    661c:	ef 92       	push	r14
    661e:	ff 92       	push	r15
    6620:	0f 93       	push	r16
    6622:	1f 93       	push	r17
    6624:	cf 93       	push	r28
    6626:	df 93       	push	r29
    6628:	00 d0       	rcall	.+0      	; 0x662a <menu_mixer+0x1c>
    662a:	00 d0       	rcall	.+0      	; 0x662c <menu_mixer+0x1e>
    662c:	1f 92       	push	r1
    662e:	cd b7       	in	r28, 0x3d	; 61
    6630:	de b7       	in	r29, 0x3e	; 62
	int8_t *value_ptr;
	menu_range_t range;
	uint8_t text_link = 0;

	// If sub-menu item has changed, reset sub-menu positions
	if (menu_flag)
    6632:	90 91 ee 07 	lds	r25, 0x07EE
    6636:	99 23       	and	r25, r25
    6638:	41 f0       	breq	.+16     	; 0x664a <menu_mixer+0x3c>
	{
		sub_top = MIXERSTART;
    663a:	2e eb       	ldi	r18, 0xBE	; 190
    663c:	30 e0       	ldi	r19, 0x00	; 0
    663e:	30 93 37 05 	sts	0x0537, r19
    6642:	20 93 36 05 	sts	0x0536, r18
		menu_flag = 0;
    6646:	10 92 ee 07 	sts	0x07EE, r1
	}

	while(button != BACK)
	{
		value_ptr = &Config.Channel[i].Motor_marker;
    664a:	96 e2       	ldi	r25, 0x26	; 38
    664c:	89 9f       	mul	r24, r25
    664e:	30 01       	movw	r6, r0
    6650:	11 24       	eor	r1, r1
    6652:	c3 01       	movw	r24, r6
    6654:	87 5b       	subi	r24, 0xB7	; 183
    6656:	99 4f       	sbci	r25, 0xF9	; 249
    6658:	3c 01       	movw	r6, r24
	{
		sub_top = MIXERSTART;
		menu_flag = 0;
	}

	while(button != BACK)
    665a:	80 91 ec 07 	lds	r24, 0x07EC
    665e:	80 37       	cpi	r24, 0x70	; 112
    6660:	09 f4       	brne	.+2      	; 0x6664 <menu_mixer+0x56>
    6662:	5d c0       	rjmp	.+186    	; 0x671e <menu_mixer+0x110>
	{
		value_ptr = &Config.Channel[i].Motor_marker;

		// Print menu
		print_menu_items(sub_top, MIXERSTART, value_ptr, (const unsigned char*)mixer_menu_ranges, 0, MIXOFFSET, (const unsigned char*)MixerMenuText, cursor);
    6664:	a0 90 05 05 	lds	r10, 0x0505
    6668:	84 ef       	ldi	r24, 0xF4	; 244
    666a:	c8 2e       	mov	r12, r24
    666c:	88 e1       	ldi	r24, 0x18	; 24
    666e:	d8 2e       	mov	r13, r24
    6670:	99 e5       	ldi	r25, 0x59	; 89
    6672:	e9 2e       	mov	r14, r25
    6674:	00 e0       	ldi	r16, 0x00	; 0
    6676:	2a e4       	ldi	r18, 0x4A	; 74
    6678:	38 e1       	ldi	r19, 0x18	; 24
    667a:	a3 01       	movw	r20, r6
    667c:	6e eb       	ldi	r22, 0xBE	; 190
    667e:	70 e0       	ldi	r23, 0x00	; 0
    6680:	80 91 36 05 	lds	r24, 0x0536
    6684:	90 91 37 05 	lds	r25, 0x0537
    6688:	0e 94 f9 30 	call	0x61f2	; 0x61f2 <print_menu_items>

		// Handle menu changes
		update_menu(MIXERITEMS, MIXERSTART, 0, button, &cursor, &sub_top, &menu_temp);
    668c:	21 e3       	ldi	r18, 0x31	; 49
    668e:	c2 2e       	mov	r12, r18
    6690:	25 e0       	ldi	r18, 0x05	; 5
    6692:	d2 2e       	mov	r13, r18
    6694:	36 e3       	ldi	r19, 0x36	; 54
    6696:	e3 2e       	mov	r14, r19
    6698:	35 e0       	ldi	r19, 0x05	; 5
    669a:	f3 2e       	mov	r15, r19
    669c:	05 e0       	ldi	r16, 0x05	; 5
    669e:	15 e0       	ldi	r17, 0x05	; 5
    66a0:	20 91 ec 07 	lds	r18, 0x07EC
    66a4:	40 e0       	ldi	r20, 0x00	; 0
    66a6:	6e eb       	ldi	r22, 0xBE	; 190
    66a8:	82 e2       	ldi	r24, 0x22	; 34
    66aa:	0e 94 2f 30 	call	0x605e	; 0x605e <update_menu>
		range = get_menu_range ((const unsigned char*)mixer_menu_ranges, menu_temp - MIXERSTART);
    66ae:	60 91 31 05 	lds	r22, 0x0531
    66b2:	6e 5b       	subi	r22, 0xBE	; 190
    66b4:	8a e4       	ldi	r24, 0x4A	; 74
    66b6:	98 e1       	ldi	r25, 0x18	; 24
    66b8:	0e 94 0a 2e 	call	0x5c14	; 0x5c14 <get_menu_range>
    66bc:	29 83       	std	Y+1, r18	; 0x01
    66be:	3a 83       	std	Y+2, r19	; 0x02
    66c0:	4b 83       	std	Y+3, r20	; 0x03
    66c2:	5c 83       	std	Y+4, r21	; 0x04
    66c4:	6d 83       	std	Y+5, r22	; 0x05

		if (button == ENTER)
    66c6:	80 91 ec 07 	lds	r24, 0x07EC
    66ca:	80 3e       	cpi	r24, 0xE0	; 224
    66cc:	e1 f4       	brne	.+56     	; 0x6706 <menu_mixer+0xf8>
		{
			text_link = pgm_read_byte(&MixerMenuText[menu_temp - MIXERSTART]);
    66ce:	80 91 31 05 	lds	r24, 0x0531
    66d2:	90 91 32 05 	lds	r25, 0x0532
    66d6:	bc 01       	movw	r22, r24
    66d8:	6e 5b       	subi	r22, 0xBE	; 190
    66da:	71 09       	sbc	r23, r1
    66dc:	fb 01       	movw	r30, r22
    66de:	ec 50       	subi	r30, 0x0C	; 12
    66e0:	f7 4e       	sbci	r31, 0xE7	; 231
    66e2:	a4 90       	lpm	r10, Z
			do_menu_item(menu_temp, value_ptr + (menu_temp - MIXERSTART), 1, range, 0, text_link, false, 0);
    66e4:	b1 2c       	mov	r11, r1
    66e6:	66 0d       	add	r22, r6
    66e8:	77 1d       	adc	r23, r7
    66ea:	1f 92       	push	r1
    66ec:	1f 92       	push	r1
    66ee:	81 2c       	mov	r8, r1
    66f0:	c1 2c       	mov	r12, r1
    66f2:	e9 80       	ldd	r14, Y+1	; 0x01
    66f4:	fa 80       	ldd	r15, Y+2	; 0x02
    66f6:	0b 81       	ldd	r16, Y+3	; 0x03
    66f8:	1c 81       	ldd	r17, Y+4	; 0x04
    66fa:	2d 81       	ldd	r18, Y+5	; 0x05
    66fc:	41 e0       	ldi	r20, 0x01	; 1
    66fe:	0e 94 93 2e 	call	0x5d26	; 0x5d26 <do_menu_item>
    6702:	0f 90       	pop	r0
    6704:	0f 90       	pop	r0
		}

		// Update limits when exiting
		if (button == ENTER)
    6706:	80 91 ec 07 	lds	r24, 0x07EC
    670a:	80 3e       	cpi	r24, 0xE0	; 224
    670c:	09 f0       	breq	.+2      	; 0x6710 <menu_mixer+0x102>
    670e:	a5 cf       	rjmp	.-182    	; 0x665a <menu_mixer+0x4c>
		{
			UpdateLimits();			 // Update travel limits based on percentages
    6710:	0e 94 91 35 	call	0x6b22	; 0x6b22 <UpdateLimits>
			Save_Config_to_EEPROM(); // Save value and return
    6714:	0e 94 9c 16 	call	0x2d38	; 0x2d38 <Save_Config_to_EEPROM>
			Wait_BUTTON4();			 // Wait for user's finger off the button
    6718:	0e 94 fa 32 	call	0x65f4	; 0x65f4 <Wait_BUTTON4>
    671c:	9e cf       	rjmp	.-196    	; 0x665a <menu_mixer+0x4c>
		}
	}
}
    671e:	0f 90       	pop	r0
    6720:	0f 90       	pop	r0
    6722:	0f 90       	pop	r0
    6724:	0f 90       	pop	r0
    6726:	0f 90       	pop	r0
    6728:	df 91       	pop	r29
    672a:	cf 91       	pop	r28
    672c:	1f 91       	pop	r17
    672e:	0f 91       	pop	r16
    6730:	ff 90       	pop	r15
    6732:	ef 90       	pop	r14
    6734:	df 90       	pop	r13
    6736:	cf 90       	pop	r12
    6738:	bf 90       	pop	r11
    673a:	af 90       	pop	r10
    673c:	8f 90       	pop	r8
    673e:	7f 90       	pop	r7
    6740:	6f 90       	pop	r6
    6742:	08 95       	ret

00006744 <menu_servo_setup>:
//************************************************************
// Main menu-specific setup
//************************************************************

void menu_servo_setup(uint8_t section)
{
    6744:	2f 92       	push	r2
    6746:	3f 92       	push	r3
    6748:	4f 92       	push	r4
    674a:	5f 92       	push	r5
    674c:	6f 92       	push	r6
    674e:	7f 92       	push	r7
    6750:	8f 92       	push	r8
    6752:	9f 92       	push	r9
    6754:	af 92       	push	r10
    6756:	bf 92       	push	r11
    6758:	cf 92       	push	r12
    675a:	df 92       	push	r13
    675c:	ef 92       	push	r14
    675e:	ff 92       	push	r15
    6760:	0f 93       	push	r16
    6762:	1f 93       	push	r17
    6764:	cf 93       	push	r28
    6766:	df 93       	push	r29
    6768:	cd b7       	in	r28, 0x3d	; 61
    676a:	de b7       	in	r29, 0x3e	; 62
    676c:	28 97       	sbiw	r28, 0x08	; 8
    676e:	0f b6       	in	r0, 0x3f	; 63
    6770:	f8 94       	cli
    6772:	de bf       	out	0x3e, r29	; 62
    6774:	0f be       	out	0x3f, r0	; 63
    6776:	cd bf       	out	0x3d, r28	; 61
    6778:	98 2e       	mov	r9, r24
	uint8_t i = 0;
	bool	servo_enable = false;
	bool	zero_setting = false;

	// If submenu item has changed, reset submenu positions
	if (menu_flag)
    677a:	80 91 ee 07 	lds	r24, 0x07EE
    677e:	88 23       	and	r24, r24
    6780:	41 f0       	breq	.+16     	; 0x6792 <menu_servo_setup+0x4e>
	{
		sub_top = SERVOSTART;
    6782:	86 ee       	ldi	r24, 0xE6	; 230
    6784:	90 e0       	ldi	r25, 0x00	; 0
    6786:	90 93 37 05 	sts	0x0537, r25
    678a:	80 93 36 05 	sts	0x0536, r24
		menu_flag = 0;
    678e:	10 92 ee 07 	sts	0x07EE, r1
			}

			// Do not allow servo enable for throttle if in CPPM mode
			if ((Config.Channel[menu_temp - SERVOSTART].P1_source_a == THROTTLE) && (Config.RxMode == CPPM_MODE))
			{
				servo_enable = false;
    6792:	1e 82       	std	Y+6, r1	; 0x06
    6794:	55 e7       	ldi	r21, 0x75	; 117
    6796:	65 2e       	mov	r6, r21
    6798:	57 e0       	ldi	r21, 0x07	; 7
    679a:	75 2e       	mov	r7, r21
					break;
			}
		}

		// Print menu
		print_menu_items(sub_top, SERVOSTART, value_ptr, (const unsigned char*)servo_menu_ranges[section - 1], 1, SERVOOFFSET, (const unsigned char*)ServoMenuText[section - 1], cursor);
    679c:	29 2c       	mov	r2, r9
    679e:	31 2c       	mov	r3, r1
    67a0:	41 e0       	ldi	r20, 0x01	; 1
    67a2:	24 1a       	sub	r2, r20
    67a4:	31 08       	sbc	r3, r1
    67a6:	85 e0       	ldi	r24, 0x05	; 5
    67a8:	82 9d       	mul	r24, r2
    67aa:	20 01       	movw	r4, r0
    67ac:	83 9d       	mul	r24, r3
    67ae:	50 0c       	add	r5, r0
    67b0:	11 24       	eor	r1, r1
    67b2:	c2 01       	movw	r24, r4
    67b4:	8a 5e       	subi	r24, 0xEA	; 234
    67b6:	96 4e       	sbci	r25, 0xE6	; 230
    67b8:	2c 01       	movw	r4, r24
    67ba:	63 e0       	ldi	r22, 0x03	; 3
    67bc:	22 0c       	add	r2, r2
    67be:	33 1c       	adc	r3, r3
    67c0:	6a 95       	dec	r22
    67c2:	e1 f7       	brne	.-8      	; 0x67bc <menu_servo_setup+0x78>
    67c4:	d1 01       	movw	r26, r2
    67c6:	ab 5d       	subi	r26, 0xDB	; 219
    67c8:	b6 4e       	sbci	r27, 0xE6	; 230
    67ca:	b8 87       	std	Y+8, r27	; 0x08
    67cc:	af 83       	std	Y+7, r26	; 0x07
		menu_flag = 0;
	}

	// Get menu offsets
	// 1 = Reverse, 2 = Min, 3 = Max
	while(button != BACK)
    67ce:	80 91 ec 07 	lds	r24, 0x07EC
    67d2:	80 37       	cpi	r24, 0x70	; 112
    67d4:	09 f4       	brne	.+2      	; 0x67d8 <menu_servo_setup+0x94>
    67d6:	8a c0       	rjmp	.+276    	; 0x68ec <menu_servo_setup+0x1a8>
    67d8:	88 e0       	ldi	r24, 0x08	; 8
    67da:	81 2c       	mov	r8, r1
	{
		// Load values from eeprom
		for (i = 0; i < SERVOITEMS; i++)
		{
			switch(section)
    67dc:	b2 e0       	ldi	r27, 0x02	; 2
    67de:	9b 16       	cp	r9, r27
    67e0:	61 f0       	breq	.+24     	; 0x67fa <menu_servo_setup+0xb6>
    67e2:	43 e0       	ldi	r20, 0x03	; 3
    67e4:	94 12       	cpse	r9, r20
    67e6:	11 c0       	rjmp	.+34     	; 0x680a <menu_servo_setup+0xc6>
					zero_setting = true;
					break;
				case 3:
					value_ptr = &Config.max_travel[0];
					servo_enable = true;
					zero_setting = true;
    67e8:	a1 e0       	ldi	r26, 0x01	; 1
    67ea:	ae 83       	std	Y+6, r26	; 0x06
					servo_enable = true;
					zero_setting = true;
					break;
				case 3:
					value_ptr = &Config.max_travel[0];
					servo_enable = true;
    67ec:	88 24       	eor	r8, r8
    67ee:	83 94       	inc	r8
					value_ptr = &Config.min_travel[0];
					servo_enable = true;
					zero_setting = true;
					break;
				case 3:
					value_ptr = &Config.max_travel[0];
    67f0:	35 e8       	ldi	r19, 0x85	; 133
    67f2:	63 2e       	mov	r6, r19
    67f4:	37 e0       	ldi	r19, 0x07	; 7
    67f6:	73 2e       	mov	r7, r19
					servo_enable = true;
					zero_setting = true;
					break;
    67f8:	08 c0       	rjmp	.+16     	; 0x680a <menu_servo_setup+0xc6>
				case 1:
					break;
				case 2:
					value_ptr = &Config.min_travel[0];
					servo_enable = true;
					zero_setting = true;
    67fa:	91 e0       	ldi	r25, 0x01	; 1
    67fc:	9e 83       	std	Y+6, r25	; 0x06
			{
				case 1:
					break;
				case 2:
					value_ptr = &Config.min_travel[0];
					servo_enable = true;
    67fe:	88 24       	eor	r8, r8
    6800:	83 94       	inc	r8
			switch(section)
			{
				case 1:
					break;
				case 2:
					value_ptr = &Config.min_travel[0];
    6802:	4d e7       	ldi	r20, 0x7D	; 125
    6804:	64 2e       	mov	r6, r20
    6806:	47 e0       	ldi	r20, 0x07	; 7
    6808:	74 2e       	mov	r7, r20
    680a:	81 50       	subi	r24, 0x01	; 1
	// Get menu offsets
	// 1 = Reverse, 2 = Min, 3 = Max
	while(button != BACK)
	{
		// Load values from eeprom
		for (i = 0; i < SERVOITEMS; i++)
    680c:	39 f7       	brne	.-50     	; 0x67dc <menu_servo_setup+0x98>
					break;
			}
		}

		// Print menu
		print_menu_items(sub_top, SERVOSTART, value_ptr, (const unsigned char*)servo_menu_ranges[section - 1], 1, SERVOOFFSET, (const unsigned char*)ServoMenuText[section - 1], cursor);
    680e:	a0 90 05 05 	lds	r10, 0x0505
    6812:	cf 80       	ldd	r12, Y+7	; 0x07
    6814:	d8 84       	ldd	r13, Y+8	; 0x08
    6816:	80 e5       	ldi	r24, 0x50	; 80
    6818:	e8 2e       	mov	r14, r24
    681a:	01 e0       	ldi	r16, 0x01	; 1
    681c:	92 01       	movw	r18, r4
    681e:	a3 01       	movw	r20, r6
    6820:	66 ee       	ldi	r22, 0xE6	; 230
    6822:	70 e0       	ldi	r23, 0x00	; 0
    6824:	80 91 36 05 	lds	r24, 0x0536
    6828:	90 91 37 05 	lds	r25, 0x0537
    682c:	0e 94 f9 30 	call	0x61f2	; 0x61f2 <print_menu_items>

		// Handle menu changes
		update_menu(SERVOITEMS, SERVOSTART, 0, button, &cursor, &sub_top, &menu_temp);
    6830:	91 e3       	ldi	r25, 0x31	; 49
    6832:	c9 2e       	mov	r12, r25
    6834:	95 e0       	ldi	r25, 0x05	; 5
    6836:	d9 2e       	mov	r13, r25
    6838:	26 e3       	ldi	r18, 0x36	; 54
    683a:	e2 2e       	mov	r14, r18
    683c:	25 e0       	ldi	r18, 0x05	; 5
    683e:	f2 2e       	mov	r15, r18
    6840:	05 e0       	ldi	r16, 0x05	; 5
    6842:	15 e0       	ldi	r17, 0x05	; 5
    6844:	20 91 ec 07 	lds	r18, 0x07EC
    6848:	40 e0       	ldi	r20, 0x00	; 0
    684a:	66 ee       	ldi	r22, 0xE6	; 230
    684c:	88 e0       	ldi	r24, 0x08	; 8
    684e:	0e 94 2f 30 	call	0x605e	; 0x605e <update_menu>
		range = get_menu_range ((const unsigned char*)servo_menu_ranges[section - 1], 0);
    6852:	60 e0       	ldi	r22, 0x00	; 0
    6854:	c2 01       	movw	r24, r4
    6856:	0e 94 0a 2e 	call	0x5c14	; 0x5c14 <get_menu_range>
    685a:	29 83       	std	Y+1, r18	; 0x01
    685c:	3a 83       	std	Y+2, r19	; 0x02
    685e:	4b 83       	std	Y+3, r20	; 0x03
    6860:	5c 83       	std	Y+4, r21	; 0x04
    6862:	6d 83       	std	Y+5, r22	; 0x05

		if (button == ENTER)
    6864:	80 91 ec 07 	lds	r24, 0x07EC
    6868:	80 3e       	cpi	r24, 0xE0	; 224
    686a:	a1 f5       	brne	.+104    	; 0x68d4 <menu_servo_setup+0x190>
		{
			text_link = pgm_read_byte(&ServoMenuText[section - 1][menu_temp - SERVOSTART]);
    686c:	80 91 31 05 	lds	r24, 0x0531
    6870:	90 91 32 05 	lds	r25, 0x0532
    6874:	9c 01       	movw	r18, r24
    6876:	26 5e       	subi	r18, 0xE6	; 230
    6878:	31 09       	sbc	r19, r1
    687a:	f9 01       	movw	r30, r18
    687c:	e2 0d       	add	r30, r2
    687e:	f3 1d       	adc	r31, r3
    6880:	eb 5d       	subi	r30, 0xDB	; 219
    6882:	f6 4e       	sbci	r31, 0xE6	; 230
    6884:	e4 91       	lpm	r30, Z
    6886:	b3 01       	movw	r22, r6
    6888:	62 0f       	add	r22, r18
    688a:	73 1f       	adc	r23, r19

			// Zero limits if adjusting
			if (zero_setting)
    688c:	be 81       	ldd	r27, Y+6	; 0x06
    688e:	bb 23       	and	r27, r27
    6890:	11 f0       	breq	.+4      	; 0x6896 <menu_servo_setup+0x152>
			{
				value_ptr[menu_temp - SERVOSTART] = 0;
    6892:	db 01       	movw	r26, r22
    6894:	1c 92       	st	X, r1
			}

			// Do not allow servo enable for throttle if in CPPM mode
			if ((Config.Channel[menu_temp - SERVOSTART].P1_source_a == THROTTLE) && (Config.RxMode == CPPM_MODE))
    6896:	46 e2       	ldi	r20, 0x26	; 38
    6898:	42 9f       	mul	r20, r18
    689a:	d0 01       	movw	r26, r0
    689c:	43 9f       	mul	r20, r19
    689e:	b0 0d       	add	r27, r0
    68a0:	11 24       	eor	r1, r1
    68a2:	ad 59       	subi	r26, 0x9D	; 157
    68a4:	b9 4f       	sbci	r27, 0xF9	; 249
    68a6:	4c 91       	ld	r20, X
    68a8:	41 11       	cpse	r20, r1
    68aa:	05 c0       	rjmp	.+10     	; 0x68b6 <menu_servo_setup+0x172>
    68ac:	40 91 dc 05 	lds	r20, 0x05DC
    68b0:	41 11       	cpse	r20, r1
    68b2:	01 c0       	rjmp	.+2      	; 0x68b6 <menu_servo_setup+0x172>
			{
				servo_enable = false;
    68b4:	81 2c       	mov	r8, r1
			}

			do_menu_item(menu_temp, value_ptr + (menu_temp - SERVOSTART), 1, range, 0, text_link, servo_enable, (menu_temp - SERVOSTART));
    68b6:	ae 2e       	mov	r10, r30
    68b8:	b1 2c       	mov	r11, r1
    68ba:	3f 93       	push	r19
    68bc:	2f 93       	push	r18
    68be:	c1 2c       	mov	r12, r1
    68c0:	e9 80       	ldd	r14, Y+1	; 0x01
    68c2:	fa 80       	ldd	r15, Y+2	; 0x02
    68c4:	0b 81       	ldd	r16, Y+3	; 0x03
    68c6:	1c 81       	ldd	r17, Y+4	; 0x04
    68c8:	2d 81       	ldd	r18, Y+5	; 0x05
    68ca:	41 e0       	ldi	r20, 0x01	; 1
    68cc:	0e 94 93 2e 	call	0x5d26	; 0x5d26 <do_menu_item>
    68d0:	0f 90       	pop	r0
    68d2:	0f 90       	pop	r0
		}

		// Disable servos
		servo_enable = false;

		if (button == ENTER)
    68d4:	80 91 ec 07 	lds	r24, 0x07EC
    68d8:	80 3e       	cpi	r24, 0xE0	; 224
    68da:	09 f0       	breq	.+2      	; 0x68de <menu_servo_setup+0x19a>
    68dc:	78 cf       	rjmp	.-272    	; 0x67ce <menu_servo_setup+0x8a>
		{
			UpdateLimits();				// Update actual servo trims
    68de:	0e 94 91 35 	call	0x6b22	; 0x6b22 <UpdateLimits>
			Save_Config_to_EEPROM();	// Save value and return
    68e2:	0e 94 9c 16 	call	0x2d38	; 0x2d38 <Save_Config_to_EEPROM>
			Wait_BUTTON4();				// Wait for user's finger off the button
    68e6:	0e 94 fa 32 	call	0x65f4	; 0x65f4 <Wait_BUTTON4>
    68ea:	71 cf       	rjmp	.-286    	; 0x67ce <menu_servo_setup+0x8a>
		}
	}
}
    68ec:	28 96       	adiw	r28, 0x08	; 8
    68ee:	0f b6       	in	r0, 0x3f	; 63
    68f0:	f8 94       	cli
    68f2:	de bf       	out	0x3e, r29	; 62
    68f4:	0f be       	out	0x3f, r0	; 63
    68f6:	cd bf       	out	0x3d, r28	; 61
    68f8:	df 91       	pop	r29
    68fa:	cf 91       	pop	r28
    68fc:	1f 91       	pop	r17
    68fe:	0f 91       	pop	r16
    6900:	ff 90       	pop	r15
    6902:	ef 90       	pop	r14
    6904:	df 90       	pop	r13
    6906:	cf 90       	pop	r12
    6908:	bf 90       	pop	r11
    690a:	af 90       	pop	r10
    690c:	9f 90       	pop	r9
    690e:	8f 90       	pop	r8
    6910:	7f 90       	pop	r7
    6912:	6f 90       	pop	r6
    6914:	5f 90       	pop	r5
    6916:	4f 90       	pop	r4
    6918:	3f 90       	pop	r3
    691a:	2f 90       	pop	r2
    691c:	08 95       	ret

0000691e <menu_rc_setup>:
//************************************************************
// Main menu-specific setup
//************************************************************

void menu_rc_setup(uint8_t section)
{
    691e:	2f 92       	push	r2
    6920:	3f 92       	push	r3
    6922:	4f 92       	push	r4
    6924:	5f 92       	push	r5
    6926:	6f 92       	push	r6
    6928:	7f 92       	push	r7
    692a:	8f 92       	push	r8
    692c:	9f 92       	push	r9
    692e:	af 92       	push	r10
    6930:	bf 92       	push	r11
    6932:	cf 92       	push	r12
    6934:	df 92       	push	r13
    6936:	ef 92       	push	r14
    6938:	ff 92       	push	r15
    693a:	0f 93       	push	r16
    693c:	1f 93       	push	r17
    693e:	cf 93       	push	r28
    6940:	df 93       	push	r29
    6942:	cd b7       	in	r28, 0x3d	; 61
    6944:	de b7       	in	r29, 0x3e	; 62
    6946:	2a 97       	sbiw	r28, 0x0a	; 10
    6948:	0f b6       	in	r0, 0x3f	; 63
    694a:	f8 94       	cli
    694c:	de bf       	out	0x3e, r29	; 62
    694e:	0f be       	out	0x3f, r0	; 63
    6950:	cd bf       	out	0x3d, r28	; 61
    6952:	88 87       	std	Y+8, r24	; 0x08
	uint8_t i;
	uint8_t offset = 0;			// Index into channel structure
	uint8_t	items= RCITEMS;		// Items in group
	
	// If submenu item has changed, reset submenu positions
	if (menu_flag)
    6954:	80 91 ee 07 	lds	r24, 0x07EE
    6958:	88 23       	and	r24, r24
    695a:	41 f0       	breq	.+16     	; 0x696c <menu_rc_setup+0x4e>
	{
		sub_top = RCSTART;
    695c:	85 e9       	ldi	r24, 0x95	; 149
    695e:	90 e0       	ldi	r25, 0x00	; 0
    6960:	90 93 37 05 	sts	0x0537, r25
    6964:	80 93 36 05 	sts	0x0536, r24
		menu_flag = 0;
    6968:	10 92 ee 07 	sts	0x07EE, r1
			writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_CONFIG, (6 - Config.MPU6050_LPF));

			// Update channel sequence
			for (i = 0; i < MAX_RC_CHANNELS; i++)
			{
				if (Config.TxSeq == FUTABASEQ)
    696c:	29 e0       	ldi	r18, 0x09	; 9
    696e:	2f 83       	std	Y+7, r18	; 0x07
    6970:	1e 82       	std	Y+6, r1	; 0x06
    6972:	6c ed       	ldi	r22, 0xDC	; 220
    6974:	46 2e       	mov	r4, r22
    6976:	65 e0       	ldi	r22, 0x05	; 5
    6978:	56 2e       	mov	r5, r22
			default:
				break;
		}

		// Print menu
		print_menu_items(sub_top + offset, RCSTART + offset, value_ptr, (const unsigned char*)rc_menu_ranges[section - 1], 0, RCOFFSET, (const unsigned char*)RCMenuText[section - 1], cursor);
    697a:	38 85       	ldd	r19, Y+8	; 0x08
    697c:	83 2f       	mov	r24, r19
    697e:	90 e0       	ldi	r25, 0x00	; 0
    6980:	01 97       	sbiw	r24, 0x01	; 1
    6982:	22 e3       	ldi	r18, 0x32	; 50
    6984:	28 9f       	mul	r18, r24
    6986:	30 01       	movw	r6, r0
    6988:	29 9f       	mul	r18, r25
    698a:	70 0c       	add	r7, r0
    698c:	11 24       	eor	r1, r1
    698e:	93 01       	movw	r18, r6
    6990:	23 5c       	subi	r18, 0xC3	; 195
    6992:	36 4e       	sbci	r19, 0xE6	; 230
    6994:	39 01       	movw	r6, r18
    6996:	2a e0       	ldi	r18, 0x0A	; 10
    6998:	28 9f       	mul	r18, r24
    699a:	10 01       	movw	r2, r0
    699c:	29 9f       	mul	r18, r25
    699e:	30 0c       	add	r3, r0
    69a0:	11 24       	eor	r1, r1
    69a2:	c1 01       	movw	r24, r2
    69a4:	8f 55       	subi	r24, 0x5F	; 95
    69a6:	96 4e       	sbci	r25, 0xE6	; 230
    69a8:	9a 87       	std	Y+10, r25	; 0x0a
    69aa:	89 87       	std	Y+9, r24	; 0x09
	{
		sub_top = RCSTART;
		menu_flag = 0;
	}

	while(button != BACK)
    69ac:	80 91 ec 07 	lds	r24, 0x07EC
    69b0:	80 37       	cpi	r24, 0x70	; 112
    69b2:	09 f4       	brne	.+2      	; 0x69b6 <menu_rc_setup+0x98>
    69b4:	9d c0       	rjmp	.+314    	; 0x6af0 <menu_rc_setup+0x1d2>
	{
		// Get menu offsets and load values from eeprom
		// 1 = RC, 2 = General
		switch(section)
    69b6:	98 85       	ldd	r25, Y+8	; 0x08
    69b8:	92 30       	cpi	r25, 0x02	; 2
    69ba:	41 f4       	brne	.+16     	; 0x69cc <menu_rc_setup+0xae>
		{
			case 1:				// RC setup menu
				break;
			case 2:				// General menu
				offset = RCITEMS;
				items = GENERALITEMS;
    69bc:	2a e0       	ldi	r18, 0x0A	; 10
    69be:	2f 83       	std	Y+7, r18	; 0x07
		switch(section)
		{
			case 1:				// RC setup menu
				break;
			case 2:				// General menu
				offset = RCITEMS;
    69c0:	39 e0       	ldi	r19, 0x09	; 9
    69c2:	3e 83       	std	Y+6, r19	; 0x06
				items = GENERALITEMS;
				value_ptr = &Config.Orientation;
    69c4:	5b e3       	ldi	r21, 0x3B	; 59
    69c6:	45 2e       	mov	r4, r21
    69c8:	56 e0       	ldi	r21, 0x06	; 6
    69ca:	55 2e       	mov	r5, r21
			default:
				break;
		}

		// Print menu
		print_menu_items(sub_top + offset, RCSTART + offset, value_ptr, (const unsigned char*)rc_menu_ranges[section - 1], 0, RCOFFSET, (const unsigned char*)RCMenuText[section - 1], cursor);
    69cc:	8e 81       	ldd	r24, Y+6	; 0x06
    69ce:	88 2e       	mov	r8, r24
    69d0:	91 2c       	mov	r9, r1
    69d2:	b4 01       	movw	r22, r8
    69d4:	6b 56       	subi	r22, 0x6B	; 107
    69d6:	7f 4f       	sbci	r23, 0xFF	; 255
    69d8:	80 91 36 05 	lds	r24, 0x0536
    69dc:	90 91 37 05 	lds	r25, 0x0537
    69e0:	a0 90 05 05 	lds	r10, 0x0505
    69e4:	c9 84       	ldd	r12, Y+9	; 0x09
    69e6:	da 84       	ldd	r13, Y+10	; 0x0a
    69e8:	2f e4       	ldi	r18, 0x4F	; 79
    69ea:	e2 2e       	mov	r14, r18
    69ec:	00 e0       	ldi	r16, 0x00	; 0
    69ee:	93 01       	movw	r18, r6
    69f0:	a2 01       	movw	r20, r4
    69f2:	88 0d       	add	r24, r8
    69f4:	99 1d       	adc	r25, r9
    69f6:	0e 94 f9 30 	call	0x61f2	; 0x61f2 <print_menu_items>

		// Handle menu changes
		update_menu(items, RCSTART, offset, button, &cursor, &sub_top, &menu_temp);
    69fa:	31 e3       	ldi	r19, 0x31	; 49
    69fc:	c3 2e       	mov	r12, r19
    69fe:	35 e0       	ldi	r19, 0x05	; 5
    6a00:	d3 2e       	mov	r13, r19
    6a02:	46 e3       	ldi	r20, 0x36	; 54
    6a04:	e4 2e       	mov	r14, r20
    6a06:	45 e0       	ldi	r20, 0x05	; 5
    6a08:	f4 2e       	mov	r15, r20
    6a0a:	05 e0       	ldi	r16, 0x05	; 5
    6a0c:	15 e0       	ldi	r17, 0x05	; 5
    6a0e:	20 91 ec 07 	lds	r18, 0x07EC
    6a12:	4e 81       	ldd	r20, Y+6	; 0x06
    6a14:	65 e9       	ldi	r22, 0x95	; 149
    6a16:	8f 81       	ldd	r24, Y+7	; 0x07
    6a18:	0e 94 2f 30 	call	0x605e	; 0x605e <update_menu>
		range = get_menu_range ((const unsigned char*)rc_menu_ranges[section - 1], (menu_temp - RCSTART - offset)); 
    6a1c:	60 91 31 05 	lds	r22, 0x0531
    6a20:	65 59       	subi	r22, 0x95	; 149
    6a22:	9e 81       	ldd	r25, Y+6	; 0x06
    6a24:	69 1b       	sub	r22, r25
    6a26:	c3 01       	movw	r24, r6
    6a28:	0e 94 0a 2e 	call	0x5c14	; 0x5c14 <get_menu_range>
    6a2c:	29 83       	std	Y+1, r18	; 0x01
    6a2e:	3a 83       	std	Y+2, r19	; 0x02
    6a30:	4b 83       	std	Y+3, r20	; 0x03
    6a32:	5c 83       	std	Y+4, r21	; 0x04
    6a34:	6d 83       	std	Y+5, r22	; 0x05

		if (button == ENTER)
    6a36:	80 91 ec 07 	lds	r24, 0x07EC
    6a3a:	80 3e       	cpi	r24, 0xE0	; 224
    6a3c:	09 f5       	brne	.+66     	; 0x6a80 <menu_rc_setup+0x162>
		{
			text_link = pgm_read_byte(&RCMenuText[section - 1][menu_temp - RCSTART - offset]);
    6a3e:	80 91 31 05 	lds	r24, 0x0531
    6a42:	90 91 32 05 	lds	r25, 0x0532
    6a46:	bc 01       	movw	r22, r24
    6a48:	65 59       	subi	r22, 0x95	; 149
    6a4a:	71 09       	sbc	r23, r1
    6a4c:	68 19       	sub	r22, r8
    6a4e:	79 09       	sbc	r23, r9
    6a50:	fb 01       	movw	r30, r22
    6a52:	e2 0d       	add	r30, r2
    6a54:	f3 1d       	adc	r31, r3
    6a56:	ef 55       	subi	r30, 0x5F	; 95
    6a58:	f6 4e       	sbci	r31, 0xE6	; 230
    6a5a:	e4 91       	lpm	r30, Z
			do_menu_item(menu_temp, value_ptr + (menu_temp - RCSTART - offset), 1, range, 0, text_link, false, 0);
    6a5c:	ae 2e       	mov	r10, r30
    6a5e:	b1 2c       	mov	r11, r1
    6a60:	64 0d       	add	r22, r4
    6a62:	75 1d       	adc	r23, r5
    6a64:	1f 92       	push	r1
    6a66:	1f 92       	push	r1
    6a68:	81 2c       	mov	r8, r1
    6a6a:	c1 2c       	mov	r12, r1
    6a6c:	e9 80       	ldd	r14, Y+1	; 0x01
    6a6e:	fa 80       	ldd	r15, Y+2	; 0x02
    6a70:	0b 81       	ldd	r16, Y+3	; 0x03
    6a72:	1c 81       	ldd	r17, Y+4	; 0x04
    6a74:	2d 81       	ldd	r18, Y+5	; 0x05
    6a76:	41 e0       	ldi	r20, 0x01	; 1
    6a78:	0e 94 93 2e 	call	0x5d26	; 0x5d26 <do_menu_item>
    6a7c:	0f 90       	pop	r0
    6a7e:	0f 90       	pop	r0
		}

		if (button == ENTER)
    6a80:	80 91 ec 07 	lds	r24, 0x07EC
    6a84:	80 3e       	cpi	r24, 0xE0	; 224
    6a86:	09 f0       	breq	.+2      	; 0x6a8a <menu_rc_setup+0x16c>
    6a88:	91 cf       	rjmp	.-222    	; 0x69ac <menu_rc_setup+0x8e>
		{
			init_int();				// In case RC type has changed, reinitialise interrupts
    6a8a:	0e 94 7c 2d 	call	0x5af8	; 0x5af8 <init_int>
			init_uart();			// and UART
    6a8e:	0e 94 58 44 	call	0x88b0	; 0x88b0 <init_uart>
			UpdateLimits();			// Update I-term limits and triggers based on percentages
    6a92:	0e 94 91 35 	call	0x6b22	; 0x6b22 <UpdateLimits>

			// Update MPU6050 LPF and reverse sense of menu items
			writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_CONFIG, (6 - Config.MPU6050_LPF));
    6a96:	80 91 44 06 	lds	r24, 0x0644
    6a9a:	46 e0       	ldi	r20, 0x06	; 6
    6a9c:	48 1b       	sub	r20, r24
    6a9e:	6a e1       	ldi	r22, 0x1A	; 26
    6aa0:	80 ed       	ldi	r24, 0xD0	; 208
    6aa2:	0e 94 9d 23 	call	0x473a	; 0x473a <writeI2Cbyte>

			// Update channel sequence
			for (i = 0; i < MAX_RC_CHANNELS; i++)
			{
				if (Config.TxSeq == FUTABASEQ)
    6aa6:	20 91 de 05 	lds	r18, 0x05DE
    6aaa:	a4 eb       	ldi	r26, 0xB4	; 180
    6aac:	b5 e0       	ldi	r27, 0x05	; 5
    6aae:	80 e0       	ldi	r24, 0x00	; 0
    6ab0:	90 e0       	ldi	r25, 0x00	; 0
    6ab2:	fc 01       	movw	r30, r24
    6ab4:	21 30       	cpi	r18, 0x01	; 1
    6ab6:	19 f4       	brne	.+6      	; 0x6abe <menu_rc_setup+0x1a0>
    6ab8:	ea 53       	subi	r30, 0x3A	; 58
    6aba:	ff 4f       	sbci	r31, 0xFF	; 255
    6abc:	02 c0       	rjmp	.+4      	; 0x6ac2 <menu_rc_setup+0x1a4>
    6abe:	e2 53       	subi	r30, 0x32	; 50
    6ac0:	ff 4f       	sbci	r31, 0xFF	; 255
				{
					Config.ChannelOrder[i] = pgm_read_byte(&FUTABA[i]);
				}
				else
				{
					Config.ChannelOrder[i] = pgm_read_byte(&JR[i]);
    6ac2:	e4 91       	lpm	r30, Z
    6ac4:	ec 93       	st	X, r30
    6ac6:	01 96       	adiw	r24, 0x01	; 1
    6ac8:	11 96       	adiw	r26, 0x01	; 1

			// Update MPU6050 LPF and reverse sense of menu items
			writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_CONFIG, (6 - Config.MPU6050_LPF));

			// Update channel sequence
			for (i = 0; i < MAX_RC_CHANNELS; i++)
    6aca:	88 30       	cpi	r24, 0x08	; 8
    6acc:	91 05       	cpc	r25, r1
    6ace:	89 f7       	brne	.-30     	; 0x6ab2 <menu_rc_setup+0x194>
				}
			}

			// Check validity of RX type and PWM speed selection
			// If illegal setting, drop down to RC Sync
			if ((Config.RxMode != SBUS) && (Config.Servo_rate == FAST))
    6ad0:	80 91 dc 05 	lds	r24, 0x05DC
    6ad4:	82 30       	cpi	r24, 0x02	; 2
    6ad6:	39 f0       	breq	.+14     	; 0x6ae6 <menu_rc_setup+0x1c8>
    6ad8:	80 91 40 06 	lds	r24, 0x0640
    6adc:	82 30       	cpi	r24, 0x02	; 2
    6ade:	19 f4       	brne	.+6      	; 0x6ae6 <menu_rc_setup+0x1c8>
			{
				Config.Servo_rate = SYNC;
    6ae0:	81 e0       	ldi	r24, 0x01	; 1
    6ae2:	80 93 40 06 	sts	0x0640, r24
			}

			Save_Config_to_EEPROM(); // Save value and return
    6ae6:	0e 94 9c 16 	call	0x2d38	; 0x2d38 <Save_Config_to_EEPROM>
			Wait_BUTTON4();			 // Wait for user's finger off the button
    6aea:	0e 94 fa 32 	call	0x65f4	; 0x65f4 <Wait_BUTTON4>
    6aee:	5e cf       	rjmp	.-324    	; 0x69ac <menu_rc_setup+0x8e>
		}
	}
}
    6af0:	2a 96       	adiw	r28, 0x0a	; 10
    6af2:	0f b6       	in	r0, 0x3f	; 63
    6af4:	f8 94       	cli
    6af6:	de bf       	out	0x3e, r29	; 62
    6af8:	0f be       	out	0x3f, r0	; 63
    6afa:	cd bf       	out	0x3d, r28	; 61
    6afc:	df 91       	pop	r29
    6afe:	cf 91       	pop	r28
    6b00:	1f 91       	pop	r17
    6b02:	0f 91       	pop	r16
    6b04:	ff 90       	pop	r15
    6b06:	ef 90       	pop	r14
    6b08:	df 90       	pop	r13
    6b0a:	cf 90       	pop	r12
    6b0c:	bf 90       	pop	r11
    6b0e:	af 90       	pop	r10
    6b10:	9f 90       	pop	r9
    6b12:	8f 90       	pop	r8
    6b14:	7f 90       	pop	r7
    6b16:	6f 90       	pop	r6
    6b18:	5f 90       	pop	r5
    6b1a:	4f 90       	pop	r4
    6b1c:	3f 90       	pop	r3
    6b1e:	2f 90       	pop	r2
    6b20:	08 95       	ret

00006b22 <UpdateLimits>:

// Update actual limits value with that from the mix setting percentages
// This is only done at start-up and whenever the values are changed
// so as to reduce CPU loop load
void UpdateLimits(void)
{
    6b22:	6f 92       	push	r6
    6b24:	7f 92       	push	r7
    6b26:	8f 92       	push	r8
    6b28:	9f 92       	push	r9
    6b2a:	af 92       	push	r10
    6b2c:	bf 92       	push	r11
    6b2e:	cf 92       	push	r12
    6b30:	df 92       	push	r13
    6b32:	ef 92       	push	r14
    6b34:	ff 92       	push	r15
    6b36:	0f 93       	push	r16
    6b38:	1f 93       	push	r17
    6b3a:	cf 93       	push	r28
    6b3c:	df 93       	push	r29
    6b3e:	cd b7       	in	r28, 0x3d	; 61
    6b40:	de b7       	in	r29, 0x3e	; 62
    6b42:	2c 97       	sbiw	r28, 0x0c	; 12
    6b44:	0f b6       	in	r0, 0x3f	; 63
    6b46:	f8 94       	cli
    6b48:	de bf       	out	0x3e, r29	; 62
    6b4a:	0f be       	out	0x3f, r0	; 63
    6b4c:	cd bf       	out	0x3d, r28	; 61
	uint8_t i,j;
	int32_t temp32, gain32;

	int8_t limits[FLIGHT_MODES][NUMBEROFAXIS] = 
    6b4e:	80 91 e7 05 	lds	r24, 0x05E7
    6b52:	8f 83       	std	Y+7, r24	; 0x07
    6b54:	80 91 ed 05 	lds	r24, 0x05ED
    6b58:	88 87       	std	Y+8, r24	; 0x08
    6b5a:	80 91 f3 05 	lds	r24, 0x05F3
    6b5e:	89 87       	std	Y+9, r24	; 0x09
    6b60:	80 91 f9 05 	lds	r24, 0x05F9
    6b64:	8a 87       	std	Y+10, r24	; 0x0a
    6b66:	80 91 ff 05 	lds	r24, 0x05FF
    6b6a:	8b 87       	std	Y+11, r24	; 0x0b
    6b6c:	80 91 05 06 	lds	r24, 0x0605
    6b70:	8c 87       	std	Y+12, r24	; 0x0c
		{
			{Config.FlightMode[P1].Roll_limit, Config.FlightMode[P1].Pitch_limit, Config.FlightMode[P1].Yaw_limit},
			{Config.FlightMode[P2].Roll_limit, Config.FlightMode[P2].Pitch_limit, Config.FlightMode[P2].Yaw_limit}
		};

	int8_t gains[FLIGHT_MODES][NUMBEROFAXIS] = 
    6b72:	80 91 e6 05 	lds	r24, 0x05E6
    6b76:	89 83       	std	Y+1, r24	; 0x01
    6b78:	80 91 ec 05 	lds	r24, 0x05EC
    6b7c:	8a 83       	std	Y+2, r24	; 0x02
    6b7e:	80 91 f2 05 	lds	r24, 0x05F2
    6b82:	8b 83       	std	Y+3, r24	; 0x03
    6b84:	80 91 f8 05 	lds	r24, 0x05F8
    6b88:	8c 83       	std	Y+4, r24	; 0x04
    6b8a:	80 91 fe 05 	lds	r24, 0x05FE
    6b8e:	8d 83       	std	Y+5, r24	; 0x05
    6b90:	80 91 04 06 	lds	r24, 0x0604
    6b94:	8e 83       	std	Y+6, r24	; 0x06
			{Config.FlightMode[P2].Roll_I_mult, Config.FlightMode[P2].Pitch_I_mult, Config.FlightMode[P2].Yaw_I_mult}
		};

	// Update LVA trigger
	// Vbat is measured in units of 10mV, so PowerTriggerActual of 1270 equates to 12.7V
	switch (Config.PowerTrigger)
    6b96:	80 91 3f 06 	lds	r24, 0x063F
    6b9a:	82 30       	cpi	r24, 0x02	; 2
    6b9c:	81 f0       	breq	.+32     	; 0x6bbe <UpdateLimits+0x9c>
    6b9e:	3c f4       	brge	.+14     	; 0x6bae <UpdateLimits+0x8c>
    6ba0:	88 23       	and	r24, r24
    6ba2:	d1 f0       	breq	.+52     	; 0x6bd8 <UpdateLimits+0xb6>
    6ba4:	81 30       	cpi	r24, 0x01	; 1
    6ba6:	c1 f4       	brne	.+48     	; 0x6bd8 <UpdateLimits+0xb6>
	{
		case 0:
		Config.PowerTriggerActual = 0;			// Off
		break;
		case 1:
		Config.PowerTriggerActual = 350; 		// 3.5V
    6ba8:	8e e5       	ldi	r24, 0x5E	; 94
    6baa:	91 e0       	ldi	r25, 0x01	; 1
    6bac:	10 c0       	rjmp	.+32     	; 0x6bce <UpdateLimits+0xac>
			{Config.FlightMode[P2].Roll_I_mult, Config.FlightMode[P2].Pitch_I_mult, Config.FlightMode[P2].Yaw_I_mult}
		};

	// Update LVA trigger
	// Vbat is measured in units of 10mV, so PowerTriggerActual of 1270 equates to 12.7V
	switch (Config.PowerTrigger)
    6bae:	84 30       	cpi	r24, 0x04	; 4
    6bb0:	61 f0       	breq	.+24     	; 0x6bca <UpdateLimits+0xa8>
    6bb2:	44 f0       	brlt	.+16     	; 0x6bc4 <UpdateLimits+0xa2>
    6bb4:	85 30       	cpi	r24, 0x05	; 5
    6bb6:	81 f4       	brne	.+32     	; 0x6bd8 <UpdateLimits+0xb6>
		break;
		case 4:
		Config.PowerTriggerActual = 380; 		// 3.8V
		break;
		case 5:
		Config.PowerTriggerActual = 390; 		// 3.9V
    6bb8:	86 e8       	ldi	r24, 0x86	; 134
    6bba:	91 e0       	ldi	r25, 0x01	; 1
    6bbc:	08 c0       	rjmp	.+16     	; 0x6bce <UpdateLimits+0xac>
		break;
		case 1:
		Config.PowerTriggerActual = 350; 		// 3.5V
		break;
		case 2:
		Config.PowerTriggerActual = 360; 		// 3.6V
    6bbe:	88 e6       	ldi	r24, 0x68	; 104
    6bc0:	91 e0       	ldi	r25, 0x01	; 1
    6bc2:	05 c0       	rjmp	.+10     	; 0x6bce <UpdateLimits+0xac>
		break;
		case 3:
		Config.PowerTriggerActual = 370; 		// 3.7V
    6bc4:	82 e7       	ldi	r24, 0x72	; 114
    6bc6:	91 e0       	ldi	r25, 0x01	; 1
    6bc8:	02 c0       	rjmp	.+4      	; 0x6bce <UpdateLimits+0xac>
		break;
		case 4:
		Config.PowerTriggerActual = 380; 		// 3.8V
    6bca:	8c e7       	ldi	r24, 0x7C	; 124
    6bcc:	91 e0       	ldi	r25, 0x01	; 1
		break;
		case 5:
		Config.PowerTriggerActual = 390; 		// 3.9V
    6bce:	90 93 3a 06 	sts	0x063A, r25
    6bd2:	80 93 39 06 	sts	0x0639, r24
		break;
    6bd6:	04 c0       	rjmp	.+8      	; 0x6be0 <UpdateLimits+0xbe>
		default:
		Config.PowerTriggerActual = 0;
    6bd8:	10 92 3a 06 	sts	0x063A, r1
    6bdc:	10 92 39 06 	sts	0x0639, r1
		break;
	}
			
	// Determine cell count and use to multiply trigger
	if (SystemVoltage >= 2150)										// 6S - 21.5V or at least 3.58V per cell
    6be0:	20 91 2e 05 	lds	r18, 0x052E
    6be4:	30 91 2f 05 	lds	r19, 0x052F
    6be8:	80 91 39 06 	lds	r24, 0x0639
    6bec:	90 91 3a 06 	lds	r25, 0x063A
    6bf0:	26 36       	cpi	r18, 0x66	; 102
    6bf2:	48 e0       	ldi	r20, 0x08	; 8
    6bf4:	34 07       	cpc	r19, r20
    6bf6:	88 f0       	brcs	.+34     	; 0x6c1a <UpdateLimits+0xf8>
	{
		Config.PowerTriggerActual *= 6;
    6bf8:	46 e0       	ldi	r20, 0x06	; 6
    6bfa:	48 9f       	mul	r20, r24
    6bfc:	90 01       	movw	r18, r0
    6bfe:	49 9f       	mul	r20, r25
    6c00:	30 0d       	add	r19, r0
    6c02:	11 24       	eor	r1, r1
    6c04:	30 93 3a 06 	sts	0x063A, r19
    6c08:	20 93 39 06 	sts	0x0639, r18
    6c0c:	79 e0       	ldi	r23, 0x09	; 9
    6c0e:	a7 2e       	mov	r10, r23
    6c10:	76 e0       	ldi	r23, 0x06	; 6
    6c12:	b7 2e       	mov	r11, r23

// Update actual limits value with that from the mix setting percentages
// This is only done at start-up and whenever the values are changed
// so as to reduce CPU loop load
void UpdateLimits(void)
{
    6c14:	00 e0       	ldi	r16, 0x00	; 0
    6c16:	10 e0       	ldi	r17, 0x00	; 0
    6c18:	25 c0       	rjmp	.+74     	; 0x6c64 <UpdateLimits+0x142>
	// Determine cell count and use to multiply trigger
	if (SystemVoltage >= 2150)										// 6S - 21.5V or at least 3.58V per cell
	{
		Config.PowerTriggerActual *= 6;
	}
	else if ((SystemVoltage >= 1730) && (SystemVoltage < 2150))		// 5S 17.3V to 21.5V or 4.32V(4S) to 3.58V(6S) per cell
    6c1a:	a9 01       	movw	r20, r18
    6c1c:	42 5c       	subi	r20, 0xC2	; 194
    6c1e:	56 40       	sbci	r21, 0x06	; 6
    6c20:	44 3a       	cpi	r20, 0xA4	; 164
    6c22:	51 40       	sbci	r21, 0x01	; 1
    6c24:	10 f4       	brcc	.+4      	; 0x6c2a <UpdateLimits+0x108>
	{
		Config.PowerTriggerActual *= 5;
    6c26:	45 e0       	ldi	r20, 0x05	; 5
    6c28:	e8 cf       	rjmp	.-48     	; 0x6bfa <UpdateLimits+0xd8>
	}
	else if ((SystemVoltage >= 1300) && (SystemVoltage < 1730))		// 4S 13.0V to 17.3V or 4.33V(3S) to 3.46V(5S) per cell
    6c2a:	a9 01       	movw	r20, r18
    6c2c:	44 51       	subi	r20, 0x14	; 20
    6c2e:	55 40       	sbci	r21, 0x05	; 5
    6c30:	4e 3a       	cpi	r20, 0xAE	; 174
    6c32:	51 40       	sbci	r21, 0x01	; 1
    6c34:	28 f4       	brcc	.+10     	; 0x6c40 <UpdateLimits+0x11e>
	{
		Config.PowerTriggerActual *= 4;
    6c36:	88 0f       	add	r24, r24
    6c38:	99 1f       	adc	r25, r25
    6c3a:	88 0f       	add	r24, r24
    6c3c:	99 1f       	adc	r25, r25
    6c3e:	0d c0       	rjmp	.+26     	; 0x6c5a <UpdateLimits+0x138>
	}
	else if ((SystemVoltage >= 900) && (SystemVoltage < 1300))		// 3S 9.0V to 13.0V or 4.5V(2S) to 3.25V(4S) per cell
    6c40:	24 58       	subi	r18, 0x84	; 132
    6c42:	33 40       	sbci	r19, 0x03	; 3
    6c44:	20 39       	cpi	r18, 0x90	; 144
    6c46:	31 40       	sbci	r19, 0x01	; 1
    6c48:	30 f4       	brcc	.+12     	; 0x6c56 <UpdateLimits+0x134>
	{
		Config.PowerTriggerActual *= 3;
    6c4a:	9c 01       	movw	r18, r24
    6c4c:	22 0f       	add	r18, r18
    6c4e:	33 1f       	adc	r19, r19
    6c50:	28 0f       	add	r18, r24
    6c52:	39 1f       	adc	r19, r25
    6c54:	d7 cf       	rjmp	.-82     	; 0x6c04 <UpdateLimits+0xe2>
	}
	else if (SystemVoltage < 900)									// 2S Under 9.0V or 3.0V(3S) per cell
	{
		Config.PowerTriggerActual *= 2;
    6c56:	88 0f       	add	r24, r24
    6c58:	99 1f       	adc	r25, r25
    6c5a:	90 93 3a 06 	sts	0x063A, r25
    6c5e:	80 93 39 06 	sts	0x0639, r24
    6c62:	d4 cf       	rjmp	.-88     	; 0x6c0c <UpdateLimits+0xea>

// Update actual limits value with that from the mix setting percentages
// This is only done at start-up and whenever the values are changed
// so as to reduce CPU loop load
void UpdateLimits(void)
{
    6c64:	65 01       	movw	r12, r10
    6c66:	e1 2c       	mov	r14, r1
    6c68:	f1 2c       	mov	r15, r1
    6c6a:	87 e0       	ldi	r24, 0x07	; 7
    6c6c:	88 2e       	mov	r8, r24
    6c6e:	91 2c       	mov	r9, r1
    6c70:	8c 0e       	add	r8, r28
    6c72:	9d 1e       	adc	r9, r29
    6c74:	80 0e       	add	r8, r16
    6c76:	91 1e       	adc	r9, r17
    6c78:	66 24       	eor	r6, r6
    6c7a:	63 94       	inc	r6
    6c7c:	71 2c       	mov	r7, r1
    6c7e:	6c 0e       	add	r6, r28
    6c80:	7d 1e       	adc	r7, r29
    6c82:	60 0e       	add	r6, r16
    6c84:	71 1e       	adc	r7, r17
    6c86:	f4 01       	movw	r30, r8
    6c88:	ee 0d       	add	r30, r14
    6c8a:	ff 1d       	adc	r31, r15
	// Update I_term input constraints for all profiles
	for (j = 0; j < FLIGHT_MODES; j++)
	{
		for (i = 0; i < NUMBEROFAXIS; i++)
		{
			temp32 	= limits[j][i]; 						// Promote limit %
    6c8c:	a0 81       	ld	r26, Z

			// I-term output (throw). Convert from % to actual count
			// A value of 80,000 results in +/- 1250 or full throw at the output stage
			// This is because the maximum signal value is +/-1250 after division by 64. 1250 * 64 = 80,000
			Config.Raw_I_Limits[j][i] = temp32 * (int32_t)640;	// 80,000 / 125% = 640
    6c8e:	bb 27       	eor	r27, r27
    6c90:	a7 fd       	sbrc	r26, 7
    6c92:	b0 95       	com	r27
    6c94:	20 e8       	ldi	r18, 0x80	; 128
    6c96:	32 e0       	ldi	r19, 0x02	; 2
    6c98:	0e 94 78 47 	call	0x8ef0	; 0x8ef0 <__usmulhisi3>
    6c9c:	f6 01       	movw	r30, r12
    6c9e:	61 93       	st	Z+, r22
    6ca0:	71 93       	st	Z+, r23
    6ca2:	81 93       	st	Z+, r24
    6ca4:	91 93       	st	Z+, r25
    6ca6:	6f 01       	movw	r12, r30
    6ca8:	f3 01       	movw	r30, r6
    6caa:	ee 0d       	add	r30, r14
    6cac:	ff 1d       	adc	r31, r15

			// I-term source limits. These have to be different due to the I-term gain setting
			// I-term = (gyro * gain) / 32, so the gyro count for a particular gain and limit is
			// Gyro = (I-term * 32) / gain :) 

			if (gains[j][i] != 0)
    6cae:	20 81       	ld	r18, Z
    6cb0:	22 23       	and	r18, r18
    6cb2:	b1 f0       	breq	.+44     	; 0x6ce0 <UpdateLimits+0x1be>
			{
				gain32 = gains[j][i];						// Promote gain value
				Config.Raw_I_Constrain[j][i] = (Config.Raw_I_Limits[j][i] << 5) / gain32;
    6cb4:	35 e0       	ldi	r19, 0x05	; 5
    6cb6:	66 0f       	add	r22, r22
    6cb8:	77 1f       	adc	r23, r23
    6cba:	88 1f       	adc	r24, r24
    6cbc:	99 1f       	adc	r25, r25
    6cbe:	3a 95       	dec	r19
    6cc0:	d1 f7       	brne	.-12     	; 0x6cb6 <UpdateLimits+0x194>
			// I-term = (gyro * gain) / 32, so the gyro count for a particular gain and limit is
			// Gyro = (I-term * 32) / gain :) 

			if (gains[j][i] != 0)
			{
				gain32 = gains[j][i];						// Promote gain value
    6cc2:	33 27       	eor	r19, r19
    6cc4:	27 fd       	sbrc	r18, 7
    6cc6:	30 95       	com	r19
    6cc8:	43 2f       	mov	r20, r19
    6cca:	53 2f       	mov	r21, r19
				Config.Raw_I_Constrain[j][i] = (Config.Raw_I_Limits[j][i] << 5) / gain32;
    6ccc:	0e 94 3c 47 	call	0x8e78	; 0x8e78 <__divmodsi4>
    6cd0:	d6 01       	movw	r26, r12
    6cd2:	54 96       	adiw	r26, 0x14	; 20
    6cd4:	2d 93       	st	X+, r18
    6cd6:	3d 93       	st	X+, r19
    6cd8:	4d 93       	st	X+, r20
    6cda:	5c 93       	st	X, r21
    6cdc:	57 97       	sbiw	r26, 0x17	; 23
    6cde:	05 c0       	rjmp	.+10     	; 0x6cea <UpdateLimits+0x1c8>
			}
			else 
			{
				Config.Raw_I_Constrain[j][i] = 0;
    6ce0:	f6 01       	movw	r30, r12
    6ce2:	14 8a       	std	Z+20, r1	; 0x14
    6ce4:	15 8a       	std	Z+21, r1	; 0x15
    6ce6:	16 8a       	std	Z+22, r1	; 0x16
    6ce8:	17 8a       	std	Z+23, r1	; 0x17
    6cea:	ff ef       	ldi	r31, 0xFF	; 255
    6cec:	ef 1a       	sub	r14, r31
    6cee:	ff 0a       	sbc	r15, r31
	}

	// Update I_term input constraints for all profiles
	for (j = 0; j < FLIGHT_MODES; j++)
	{
		for (i = 0; i < NUMBEROFAXIS; i++)
    6cf0:	23 e0       	ldi	r18, 0x03	; 3
    6cf2:	e2 16       	cp	r14, r18
    6cf4:	f1 04       	cpc	r15, r1
    6cf6:	39 f6       	brne	.-114    	; 0x6c86 <UpdateLimits+0x164>
    6cf8:	4c e0       	ldi	r20, 0x0C	; 12
    6cfa:	a4 0e       	add	r10, r20
    6cfc:	b1 1c       	adc	r11, r1
    6cfe:	0d 5f       	subi	r16, 0xFD	; 253
    6d00:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		Config.PowerTriggerActual *= 2;
	}

	// Update I_term input constraints for all profiles
	for (j = 0; j < FLIGHT_MODES; j++)
    6d02:	06 30       	cpi	r16, 0x06	; 6
    6d04:	11 05       	cpc	r17, r1
    6d06:	09 f0       	breq	.+2      	; 0x6d0a <UpdateLimits+0x1e8>
    6d08:	ad cf       	rjmp	.-166    	; 0x6c64 <UpdateLimits+0x142>
    6d0a:	8d e7       	ldi	r24, 0x7D	; 125
    6d0c:	97 e0       	ldi	r25, 0x07	; 7
    6d0e:	ec eb       	ldi	r30, 0xBC	; 188
    6d10:	f5 e0       	ldi	r31, 0x05	; 5
    6d12:	65 e8       	ldi	r22, 0x85	; 133
    6d14:	77 e0       	ldi	r23, 0x07	; 7
	}

	// Update travel limits
	for (i = 0; i < MIX_OUTPUTS; i++)
	{
		Config.Limits[i].minimum = scale_percent(Config.min_travel[i]);
    6d16:	dc 01       	movw	r26, r24
    6d18:	2d 91       	ld	r18, X+
    6d1a:	cd 01       	movw	r24, r26
int16_t scale_percent(int8_t value)
{
	int16_t temp16_1, temp16_2;

	temp16_1 = value; // Promote
	temp16_2 = ((temp16_1 * (int16_t)10) + 3750);
    6d1c:	ba e0       	ldi	r27, 0x0A	; 10
    6d1e:	2b 02       	muls	r18, r27
    6d20:	90 01       	movw	r18, r0
    6d22:	11 24       	eor	r1, r1
    6d24:	2a 55       	subi	r18, 0x5A	; 90
    6d26:	31 4f       	sbci	r19, 0xF1	; 241
	}

	// Update travel limits
	for (i = 0; i < MIX_OUTPUTS; i++)
	{
		Config.Limits[i].minimum = scale_percent(Config.min_travel[i]);
    6d28:	31 83       	std	Z+1, r19	; 0x01
    6d2a:	20 83       	st	Z, r18
		Config.Limits[i].maximum = scale_percent(Config.max_travel[i]);
    6d2c:	db 01       	movw	r26, r22
    6d2e:	2d 91       	ld	r18, X+
    6d30:	bd 01       	movw	r22, r26
int16_t scale_percent(int8_t value)
{
	int16_t temp16_1, temp16_2;

	temp16_1 = value; // Promote
	temp16_2 = ((temp16_1 * (int16_t)10) + 3750);
    6d32:	ba e0       	ldi	r27, 0x0A	; 10
    6d34:	2b 02       	muls	r18, r27
    6d36:	90 01       	movw	r18, r0
    6d38:	11 24       	eor	r1, r1
    6d3a:	2a 55       	subi	r18, 0x5A	; 90
    6d3c:	31 4f       	sbci	r19, 0xF1	; 241

	// Update travel limits
	for (i = 0; i < MIX_OUTPUTS; i++)
	{
		Config.Limits[i].minimum = scale_percent(Config.min_travel[i]);
		Config.Limits[i].maximum = scale_percent(Config.max_travel[i]);
    6d3e:	33 83       	std	Z+3, r19	; 0x03
    6d40:	22 83       	std	Z+2, r18	; 0x02
    6d42:	34 96       	adiw	r30, 0x04	; 4
			}
		}
	}

	// Update travel limits
	for (i = 0; i < MIX_OUTPUTS; i++)
    6d44:	25 e0       	ldi	r18, 0x05	; 5
    6d46:	ec 3d       	cpi	r30, 0xDC	; 220
    6d48:	f2 07       	cpc	r31, r18
    6d4a:	29 f7       	brne	.-54     	; 0x6d16 <UpdateLimits+0x1f4>

	// Adjust trim to match 0.01 degree resolution
	// A value of 127 multiplied by 10 = 1270 which in 1/100ths of a degree equates to 12.7 degrees
	for (i = P1; i <= P2; i++)
	{
		Config.Rolltrim[i] = Config.FlightMode[i].AccRollZeroTrim * 10;
    6d4c:	80 91 ea 05 	lds	r24, 0x05EA
    6d50:	4a e0       	ldi	r20, 0x0A	; 10
    6d52:	84 02       	muls	r24, r20
    6d54:	c0 01       	movw	r24, r0
    6d56:	11 24       	eor	r1, r1
    6d58:	90 93 b3 07 	sts	0x07B3, r25
    6d5c:	80 93 b2 07 	sts	0x07B2, r24
		Config.Pitchtrim[i] = Config.FlightMode[i].AccPitchZeroTrim * 10;
    6d60:	80 91 f0 05 	lds	r24, 0x05F0
    6d64:	6a e0       	ldi	r22, 0x0A	; 10
    6d66:	86 02       	muls	r24, r22
    6d68:	c0 01       	movw	r24, r0
    6d6a:	11 24       	eor	r1, r1
    6d6c:	90 93 b7 07 	sts	0x07B7, r25
    6d70:	80 93 b6 07 	sts	0x07B6, r24

	// Adjust trim to match 0.01 degree resolution
	// A value of 127 multiplied by 10 = 1270 which in 1/100ths of a degree equates to 12.7 degrees
	for (i = P1; i <= P2; i++)
	{
		Config.Rolltrim[i] = Config.FlightMode[i].AccRollZeroTrim * 10;
    6d74:	80 91 fc 05 	lds	r24, 0x05FC
    6d78:	aa e0       	ldi	r26, 0x0A	; 10
    6d7a:	8a 02       	muls	r24, r26
    6d7c:	c0 01       	movw	r24, r0
    6d7e:	11 24       	eor	r1, r1
    6d80:	90 93 b5 07 	sts	0x07B5, r25
    6d84:	80 93 b4 07 	sts	0x07B4, r24
		Config.Pitchtrim[i] = Config.FlightMode[i].AccPitchZeroTrim * 10;
    6d88:	80 91 02 06 	lds	r24, 0x0602
    6d8c:	ba e0       	ldi	r27, 0x0A	; 10
    6d8e:	8b 02       	muls	r24, r27
    6d90:	c0 01       	movw	r24, r0
    6d92:	11 24       	eor	r1, r1
    6d94:	90 93 b9 07 	sts	0x07B9, r25
    6d98:	80 93 b8 07 	sts	0x07B8, r24
	}
}
    6d9c:	2c 96       	adiw	r28, 0x0c	; 12
    6d9e:	0f b6       	in	r0, 0x3f	; 63
    6da0:	f8 94       	cli
    6da2:	de bf       	out	0x3e, r29	; 62
    6da4:	0f be       	out	0x3f, r0	; 63
    6da6:	cd bf       	out	0x3d, r28	; 61
    6da8:	df 91       	pop	r29
    6daa:	cf 91       	pop	r28
    6dac:	1f 91       	pop	r17
    6dae:	0f 91       	pop	r16
    6db0:	ff 90       	pop	r15
    6db2:	ef 90       	pop	r14
    6db4:	df 90       	pop	r13
    6db6:	cf 90       	pop	r12
    6db8:	bf 90       	pop	r11
    6dba:	af 90       	pop	r10
    6dbc:	9f 90       	pop	r9
    6dbe:	8f 90       	pop	r8
    6dc0:	7f 90       	pop	r7
    6dc2:	6f 90       	pop	r6
    6dc4:	08 95       	ret

00006dc6 <UpdateServos>:

// Update servos from the mixer Config.Channel[i].P1_value data, add offsets and enforce travel limits
void UpdateServos(void)
{
    6dc6:	0f 93       	push	r16
    6dc8:	1f 93       	push	r17
    6dca:	cf 93       	push	r28
    6dcc:	df 93       	push	r29
    6dce:	a5 e4       	ldi	r26, 0x45	; 69
    6dd0:	b6 e0       	ldi	r27, 0x06	; 6
    6dd2:	05 e7       	ldi	r16, 0x75	; 117
    6dd4:	17 e0       	ldi	r17, 0x07	; 7
    6dd6:	ec eb       	ldi	r30, 0xBC	; 188
    6dd8:	f5 e0       	ldi	r31, 0x05	; 5
    6dda:	80 e0       	ldi	r24, 0x00	; 0
    6ddc:	90 e0       	ldi	r25, 0x00	; 0
	int16_t temp1 = 0; // Output value

	for (i = 0; i < MIX_OUTPUTS; i++)
	{
		// Servo reverse and trim for the eight physical outputs
		temp1 = Config.Channel[i].P1_value;
    6dde:	2d 91       	ld	r18, X+
    6de0:	3c 91       	ld	r19, X
    6de2:	11 97       	sbiw	r26, 0x01	; 1

		// Reverse this channel for the eight physical outputs
		if ((i <= MIX_OUTPUTS) && (Config.Servo_reverse[i] == ON))
    6de4:	e8 01       	movw	r28, r16
    6de6:	49 91       	ld	r20, Y+
    6de8:	8e 01       	movw	r16, r28
    6dea:	41 30       	cpi	r20, 0x01	; 1
    6dec:	19 f4       	brne	.+6      	; 0x6df4 <UpdateServos+0x2e>
		{	
			temp1 = -temp1;
    6dee:	31 95       	neg	r19
    6df0:	21 95       	neg	r18
    6df2:	31 09       	sbc	r19, r1
		}

		// Add offset value to restore to system compatible value
		temp1 += 3750;
    6df4:	2a 55       	subi	r18, 0x5A	; 90
    6df6:	31 4f       	sbci	r19, 0xF1	; 241

		// Enforce min, max travel limits
		if (temp1 > Config.Limits[i].maximum)
    6df8:	62 81       	ldd	r22, Z+2	; 0x02
    6dfa:	73 81       	ldd	r23, Z+3	; 0x03
    6dfc:	ac 01       	movw	r20, r24
    6dfe:	44 0f       	add	r20, r20
    6e00:	55 1f       	adc	r21, r21
    6e02:	62 17       	cp	r22, r18
    6e04:	73 07       	cpc	r23, r19
    6e06:	24 f4       	brge	.+8      	; 0x6e10 <UpdateServos+0x4a>
		{
			ServoOut[i] = Config.Limits[i].maximum;
    6e08:	41 5c       	subi	r20, 0xC1	; 193
    6e0a:	57 4f       	sbci	r21, 0xF7	; 247
    6e0c:	ea 01       	movw	r28, r20
    6e0e:	08 c0       	rjmp	.+16     	; 0x6e20 <UpdateServos+0x5a>
		}

		else if (temp1 < Config.Limits[i].minimum)
    6e10:	60 81       	ld	r22, Z
    6e12:	71 81       	ldd	r23, Z+1	; 0x01
		{
			ServoOut[i] = Config.Limits[i].minimum;
    6e14:	41 5c       	subi	r20, 0xC1	; 193
    6e16:	57 4f       	sbci	r21, 0xF7	; 247
    6e18:	ea 01       	movw	r28, r20
		if (temp1 > Config.Limits[i].maximum)
		{
			ServoOut[i] = Config.Limits[i].maximum;
		}

		else if (temp1 < Config.Limits[i].minimum)
    6e1a:	26 17       	cp	r18, r22
    6e1c:	37 07       	cpc	r19, r23
    6e1e:	1c f4       	brge	.+6      	; 0x6e26 <UpdateServos+0x60>
		{
			ServoOut[i] = Config.Limits[i].minimum;
    6e20:	79 83       	std	Y+1, r23	; 0x01
    6e22:	68 83       	st	Y, r22
    6e24:	02 c0       	rjmp	.+4      	; 0x6e2a <UpdateServos+0x64>
		}

		// Transfer value to servo
		else
		{
			ServoOut[i] = temp1;
    6e26:	39 83       	std	Y+1, r19	; 0x01
    6e28:	28 83       	st	Y, r18
    6e2a:	01 96       	adiw	r24, 0x01	; 1
    6e2c:	96 96       	adiw	r26, 0x26	; 38
    6e2e:	34 96       	adiw	r30, 0x04	; 4
void UpdateServos(void)
{
	uint8_t i;
	int16_t temp1 = 0; // Output value

	for (i = 0; i < MIX_OUTPUTS; i++)
    6e30:	88 30       	cpi	r24, 0x08	; 8
    6e32:	91 05       	cpc	r25, r1
    6e34:	a1 f6       	brne	.-88     	; 0x6dde <UpdateServos+0x18>
		else
		{
			ServoOut[i] = temp1;
		}
	}
}
    6e36:	df 91       	pop	r29
    6e38:	cf 91       	pop	r28
    6e3a:	1f 91       	pop	r17
    6e3c:	0f 91       	pop	r16
    6e3e:	08 95       	ret

00006e40 <scale32>:

// 32 bit multiply/scale for broken GCC
// Returns immediately if multiplier is 100, 0 or -100
int16_t scale32(int16_t value16, int16_t multiplier16)
{
    6e40:	9c 01       	movw	r18, r24
	int32_t temp32 = 0;
	int32_t mult32 = 0;

	// No change if 100% (no scaling)
	if (multiplier16 == 100)
    6e42:	64 36       	cpi	r22, 0x64	; 100
    6e44:	71 05       	cpc	r23, r1
    6e46:	e9 f0       	breq	.+58     	; 0x6e82 <scale32+0x42>
	{
		return value16;
	}

	// Reverse if -100%
	else if (multiplier16 == -100)
    6e48:	6c 39       	cpi	r22, 0x9C	; 156
    6e4a:	8f ef       	ldi	r24, 0xFF	; 255
    6e4c:	78 07       	cpc	r23, r24
    6e4e:	29 f4       	brne	.+10     	; 0x6e5a <scale32+0x1a>
	{
		return -value16;	
    6e50:	88 27       	eor	r24, r24
    6e52:	99 27       	eor	r25, r25
    6e54:	82 1b       	sub	r24, r18
    6e56:	93 0b       	sbc	r25, r19
    6e58:	08 95       	ret
	}

	// Zero if 0%
	else if (multiplier16 == 0)
    6e5a:	61 15       	cp	r22, r1
    6e5c:	71 05       	cpc	r23, r1
    6e5e:	71 f0       	breq	.+28     	; 0x6e7c <scale32+0x3c>
	else
	{
		// GCC is broken bad regarding multiplying 32 bit numbers, hence all this crap...
		mult32 = multiplier16;
		temp32 = value16;
		temp32 = temp32 * mult32;
    6e60:	db 01       	movw	r26, r22
    6e62:	0e 94 61 47 	call	0x8ec2	; 0x8ec2 <__mulhisi3>

		// Divide by 100 and round to get scaled value
		temp32 = (temp32 + (int32_t)50) / (int32_t)100; // Constants need to be cast up to 32 bits
    6e66:	6e 5c       	subi	r22, 0xCE	; 206
    6e68:	7f 4f       	sbci	r23, 0xFF	; 255
    6e6a:	8f 4f       	sbci	r24, 0xFF	; 255
    6e6c:	9f 4f       	sbci	r25, 0xFF	; 255
    6e6e:	24 e6       	ldi	r18, 0x64	; 100
    6e70:	30 e0       	ldi	r19, 0x00	; 0
    6e72:	40 e0       	ldi	r20, 0x00	; 0
    6e74:	50 e0       	ldi	r21, 0x00	; 0
    6e76:	0e 94 3c 47 	call	0x8e78	; 0x8e78 <__divmodsi4>
    6e7a:	03 c0       	rjmp	.+6      	; 0x6e82 <scale32+0x42>
	}

	// Zero if 0%
	else if (multiplier16 == 0)
	{
		return 0;	
    6e7c:	80 e0       	ldi	r24, 0x00	; 0
    6e7e:	90 e0       	ldi	r25, 0x00	; 0
    6e80:	08 95       	ret
	int32_t mult32 = 0;

	// No change if 100% (no scaling)
	if (multiplier16 == 100)
	{
		return value16;
    6e82:	c9 01       	movw	r24, r18
		temp32 = (temp32 + (int32_t)50) / (int32_t)100; // Constants need to be cast up to 32 bits
		value16 = (int16_t)temp32;
	}

	return value16;
}
    6e84:	08 95       	ret

00006e86 <ProcessMixer>:
//************************************************************
// Code
//************************************************************

void ProcessMixer(void)
{
    6e86:	2f 92       	push	r2
    6e88:	3f 92       	push	r3
    6e8a:	4f 92       	push	r4
    6e8c:	5f 92       	push	r5
    6e8e:	6f 92       	push	r6
    6e90:	7f 92       	push	r7
    6e92:	8f 92       	push	r8
    6e94:	9f 92       	push	r9
    6e96:	af 92       	push	r10
    6e98:	bf 92       	push	r11
    6e9a:	cf 92       	push	r12
    6e9c:	df 92       	push	r13
    6e9e:	ef 92       	push	r14
    6ea0:	ff 92       	push	r15
    6ea2:	0f 93       	push	r16
    6ea4:	1f 93       	push	r17
    6ea6:	cf 93       	push	r28
    6ea8:	df 93       	push	r29
    6eaa:	cd b7       	in	r28, 0x3d	; 61
    6eac:	de b7       	in	r29, 0x3e	; 62
    6eae:	e2 97       	sbiw	r28, 0x32	; 50
    6eb0:	0f b6       	in	r0, 0x3f	; 63
    6eb2:	f8 94       	cli
    6eb4:	de bf       	out	0x3e, r29	; 62
    6eb6:	0f be       	out	0x3f, r0	; 63
    6eb8:	cd bf       	out	0x3d, r28	; 61
	int16_t	Step1 = 0;
	int16_t	Step2 = 0;
	int8_t	itemp8 = 0;

	// Copy the sensor data to an array for easy indexing - acc data is from accSmooth, increased to reasonable rates
	temp1 = (int16_t)accSmooth[ROLL] << 3;
    6eba:	60 91 9b 05 	lds	r22, 0x059B
    6ebe:	70 91 9c 05 	lds	r23, 0x059C
    6ec2:	80 91 9d 05 	lds	r24, 0x059D
    6ec6:	90 91 9e 05 	lds	r25, 0x059E
    6eca:	0e 94 a8 45 	call	0x8b50	; 0x8b50 <__fixsfsi>
    6ece:	8b 01       	movw	r16, r22
    6ed0:	83 e0       	ldi	r24, 0x03	; 3
    6ed2:	00 0f       	add	r16, r16
    6ed4:	11 1f       	adc	r17, r17
    6ed6:	8a 95       	dec	r24
    6ed8:	e1 f7       	brne	.-8      	; 0x6ed2 <ProcessMixer+0x4c>
	temp2 = (int16_t)accSmooth[PITCH] << 3;
    6eda:	60 91 9f 05 	lds	r22, 0x059F
    6ede:	70 91 a0 05 	lds	r23, 0x05A0
    6ee2:	80 91 a1 05 	lds	r24, 0x05A1
    6ee6:	90 91 a2 05 	lds	r25, 0x05A2
    6eea:	0e 94 a8 45 	call	0x8b50	; 0x8b50 <__fixsfsi>
    6eee:	93 e0       	ldi	r25, 0x03	; 3
    6ef0:	66 0f       	add	r22, r22
    6ef2:	77 1f       	adc	r23, r23
    6ef4:	9a 95       	dec	r25
    6ef6:	e1 f7       	brne	.-8      	; 0x6ef0 <ProcessMixer+0x6a>
	int16_t	SensorDataP1[7] = {PID_Gyros[P1][ROLL], PID_Gyros[P1][PITCH], PID_Gyros[P1][YAW], temp1, temp2, PID_ACCs[P1][ROLL], PID_ACCs[P1][PITCH]};
    6ef8:	40 90 13 08 	lds	r4, 0x0813
    6efc:	50 90 14 08 	lds	r5, 0x0814
    6f00:	58 8a       	std	Y+16, r5	; 0x10
    6f02:	4f 86       	std	Y+15, r4	; 0x0f
    6f04:	20 91 15 08 	lds	r18, 0x0815
    6f08:	30 91 16 08 	lds	r19, 0x0816
    6f0c:	38 a3       	std	Y+32, r19	; 0x20
    6f0e:	2f 8f       	std	Y+31, r18	; 0x1f
    6f10:	3a 8b       	std	Y+18, r19	; 0x12
    6f12:	29 8b       	std	Y+17, r18	; 0x11
    6f14:	40 91 17 08 	lds	r20, 0x0817
    6f18:	50 91 18 08 	lds	r21, 0x0818
    6f1c:	5a a3       	std	Y+34, r21	; 0x22
    6f1e:	49 a3       	std	Y+33, r20	; 0x21
    6f20:	5c 8b       	std	Y+20, r21	; 0x14
    6f22:	4b 8b       	std	Y+19, r20	; 0x13
    6f24:	1e 8b       	std	Y+22, r17	; 0x16
    6f26:	0d 8b       	std	Y+21, r16	; 0x15
    6f28:	78 8f       	std	Y+24, r23	; 0x18
    6f2a:	6f 8b       	std	Y+23, r22	; 0x17
    6f2c:	20 91 1f 08 	lds	r18, 0x081F
    6f30:	30 91 20 08 	lds	r19, 0x0820
    6f34:	3c a3       	std	Y+36, r19	; 0x24
    6f36:	2b a3       	std	Y+35, r18	; 0x23
    6f38:	3a 8f       	std	Y+26, r19	; 0x1a
    6f3a:	29 8f       	std	Y+25, r18	; 0x19
    6f3c:	40 91 21 08 	lds	r20, 0x0821
    6f40:	50 91 22 08 	lds	r21, 0x0822
    6f44:	5e a3       	std	Y+38, r21	; 0x26
    6f46:	4d a3       	std	Y+37, r20	; 0x25
    6f48:	5c 8f       	std	Y+28, r21	; 0x1c
    6f4a:	4b 8f       	std	Y+27, r20	; 0x1b
	int16_t	SensorDataP2[7] = {PID_Gyros[P2][ROLL], PID_Gyros[P2][PITCH], PID_Gyros[P2][YAW], temp1, temp2, PID_ACCs[P2][ROLL], PID_ACCs[P2][PITCH]}; 
    6f4c:	20 91 19 08 	lds	r18, 0x0819
    6f50:	30 91 1a 08 	lds	r19, 0x081A
    6f54:	38 a7       	std	Y+40, r19	; 0x28
    6f56:	2f a3       	std	Y+39, r18	; 0x27
    6f58:	3a 83       	std	Y+2, r19	; 0x02
    6f5a:	29 83       	std	Y+1, r18	; 0x01
    6f5c:	40 91 1b 08 	lds	r20, 0x081B
    6f60:	50 91 1c 08 	lds	r21, 0x081C
    6f64:	5a a7       	std	Y+42, r21	; 0x2a
    6f66:	49 a7       	std	Y+41, r20	; 0x29
    6f68:	5c 83       	std	Y+4, r21	; 0x04
    6f6a:	4b 83       	std	Y+3, r20	; 0x03
    6f6c:	20 90 1d 08 	lds	r2, 0x081D
    6f70:	30 90 1e 08 	lds	r3, 0x081E
    6f74:	3e 82       	std	Y+6, r3	; 0x06
    6f76:	2d 82       	std	Y+5, r2	; 0x05
    6f78:	18 87       	std	Y+8, r17	; 0x08
    6f7a:	0f 83       	std	Y+7, r16	; 0x07
    6f7c:	7a 87       	std	Y+10, r23	; 0x0a
    6f7e:	69 87       	std	Y+9, r22	; 0x09
    6f80:	a0 90 25 08 	lds	r10, 0x0825
    6f84:	b0 90 26 08 	lds	r11, 0x0826
    6f88:	bc 86       	std	Y+12, r11	; 0x0c
    6f8a:	ab 86       	std	Y+11, r10	; 0x0b
    6f8c:	80 90 27 08 	lds	r8, 0x0827
    6f90:	90 90 28 08 	lds	r9, 0x0828
    6f94:	9e 86       	std	Y+14, r9	; 0x0e
    6f96:	8d 86       	std	Y+13, r8	; 0x0d
		//************************************************************
		// Mix in gyros
		//************************************************************ 

		// P1 gyros
		if (Transition_state < TRANS_P2)
    6f98:	50 91 23 05 	lds	r21, 0x0523
    6f9c:	5d 8f       	std	Y+29, r21	; 0x1d
			switch (Config.Channel[i].P1_Z_delta_acc)
			{
				case OFF:
					break;
				case ON:
					P1_solution = P1_solution - PID_ACCs[P1][YAW];
    6f9e:	20 91 23 08 	lds	r18, 0x0823
    6fa2:	30 91 24 08 	lds	r19, 0x0824
    6fa6:	3c a7       	std	Y+44, r19	; 0x2c
    6fa8:	2b a7       	std	Y+43, r18	; 0x2b
			switch (Config.Channel[i].P2_Z_delta_acc)
			{
				case OFF:
					break;
				case ON:
					P2_solution = P2_solution - PID_ACCs[P2][YAW];
    6faa:	40 91 29 08 	lds	r20, 0x0829
    6fae:	50 91 2a 08 	lds	r21, 0x082A
    6fb2:	5e a7       	std	Y+46, r21	; 0x2e
    6fb4:	4d a7       	std	Y+45, r20	; 0x2d
    6fb6:	c1 2c       	mov	r12, r1
    6fb8:	d1 2c       	mov	r13, r1
			switch (Config.Channel[i].P2_Roll_gyro)
			{
				case OFF:
					break;
				case ON:
					P2_solution = P2_solution - PID_Gyros[P2][ROLL];
    6fba:	2f a1       	ldd	r18, Y+39	; 0x27
    6fbc:	38 a5       	ldd	r19, Y+40	; 0x28
    6fbe:	31 95       	neg	r19
    6fc0:	21 95       	neg	r18
    6fc2:	31 09       	sbc	r19, r1
    6fc4:	38 ab       	std	Y+48, r19	; 0x30
    6fc6:	2f a7       	std	Y+47, r18	; 0x2f
			switch (Config.Channel[i].P1_Roll_gyro) 
			{
				case OFF:
					break;
				case ON:
					P1_solution = P1_solution - PID_Gyros[P1][ROLL];
    6fc8:	44 27       	eor	r20, r20
    6fca:	55 27       	eor	r21, r21
    6fcc:	44 19       	sub	r20, r4
    6fce:	55 09       	sbc	r21, r5
    6fd0:	5a ab       	std	Y+50, r21	; 0x32
    6fd2:	49 ab       	std	Y+49, r20	; 0x31
		//************************************************************
		// Mix in gyros
		//************************************************************ 

		// P1 gyros
		if (Transition_state < TRANS_P2)
    6fd4:	5d 8d       	ldd	r21, Y+29	; 0x1d
    6fd6:	59 30       	cpi	r21, 0x09	; 9
    6fd8:	08 f0       	brcs	.+2      	; 0x6fdc <ProcessMixer+0x156>
    6fda:	5b c0       	rjmp	.+182    	; 0x7092 <ProcessMixer+0x20c>
    6fdc:	86 01       	movw	r16, r12
    6fde:	0d 54       	subi	r16, 0x4D	; 77
    6fe0:	1a 4f       	sbci	r17, 0xFA	; 250
    6fe2:	f8 01       	movw	r30, r16
    6fe4:	ec 55       	subi	r30, 0x5C	; 92
    6fe6:	ff 4f       	sbci	r31, 0xFF	; 255
		{
			switch (Config.Channel[i].P1_Roll_gyro) 
    6fe8:	80 81       	ld	r24, Z
    6fea:	81 30       	cpi	r24, 0x01	; 1
    6fec:	91 f0       	breq	.+36     	; 0x7012 <ProcessMixer+0x18c>
    6fee:	82 30       	cpi	r24, 0x02	; 2
    6ff0:	99 f4       	brne	.+38     	; 0x7018 <ProcessMixer+0x192>
    6ff2:	f8 01       	movw	r30, r16
    6ff4:	e2 56       	subi	r30, 0x62	; 98
    6ff6:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				case ON:
					P1_solution = P1_solution - PID_Gyros[P1][ROLL];
					break;
				case SCALE:
					P1_solution = P1_solution - scale32(PID_Gyros[P1][ROLL], Config.Channel[i].P1_aileron_volume * 5); 
    6ff8:	60 81       	ld	r22, Z
    6ffa:	85 e0       	ldi	r24, 0x05	; 5
    6ffc:	68 02       	muls	r22, r24
    6ffe:	b0 01       	movw	r22, r0
    7000:	11 24       	eor	r1, r1
    7002:	c2 01       	movw	r24, r4
    7004:	0e 94 20 37 	call	0x6e40	; 0x6e40 <scale32>
    7008:	ee 24       	eor	r14, r14
    700a:	ff 24       	eor	r15, r15
    700c:	e8 1a       	sub	r14, r24
    700e:	f9 0a       	sbc	r15, r25
					break;
    7010:	05 c0       	rjmp	.+10     	; 0x701c <ProcessMixer+0x196>
			switch (Config.Channel[i].P1_Roll_gyro) 
			{
				case OFF:
					break;
				case ON:
					P1_solution = P1_solution - PID_Gyros[P1][ROLL];
    7012:	e9 a8       	ldd	r14, Y+49	; 0x31
    7014:	fa a8       	ldd	r15, Y+50	; 0x32
					break;
    7016:	02 c0       	rjmp	.+4      	; 0x701c <ProcessMixer+0x196>
	{
		//************************************************************
		// Zero each channel value to start
		//************************************************************

		P1_solution = 0;
    7018:	e1 2c       	mov	r14, r1
    701a:	f1 2c       	mov	r15, r1
    701c:	f8 01       	movw	r30, r16
    701e:	ea 55       	subi	r30, 0x5A	; 90
    7020:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				default:
					break;	
			}

			switch (Config.Channel[i].P1_Pitch_gyro)
    7022:	80 81       	ld	r24, Z
    7024:	81 30       	cpi	r24, 0x01	; 1
    7026:	89 f0       	breq	.+34     	; 0x704a <ProcessMixer+0x1c4>
    7028:	82 30       	cpi	r24, 0x02	; 2
    702a:	99 f4       	brne	.+38     	; 0x7052 <ProcessMixer+0x1cc>
    702c:	f8 01       	movw	r30, r16
    702e:	e0 56       	subi	r30, 0x60	; 96
    7030:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				case ON:
					P1_solution = P1_solution - PID_Gyros[P1][PITCH];
					break;
				case SCALE:
					P1_solution = P1_solution - scale32(PID_Gyros[P1][PITCH], Config.Channel[i].P1_elevator_volume * 5);
    7032:	60 81       	ld	r22, Z
    7034:	35 e0       	ldi	r19, 0x05	; 5
    7036:	63 02       	muls	r22, r19
    7038:	b0 01       	movw	r22, r0
    703a:	11 24       	eor	r1, r1
    703c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    703e:	98 a1       	ldd	r25, Y+32	; 0x20
    7040:	0e 94 20 37 	call	0x6e40	; 0x6e40 <scale32>
    7044:	e8 1a       	sub	r14, r24
    7046:	f9 0a       	sbc	r15, r25
					break;
    7048:	04 c0       	rjmp	.+8      	; 0x7052 <ProcessMixer+0x1cc>
			switch (Config.Channel[i].P1_Pitch_gyro)
			{
				case OFF:
					break;
				case ON:
					P1_solution = P1_solution - PID_Gyros[P1][PITCH];
    704a:	2f 8d       	ldd	r18, Y+31	; 0x1f
    704c:	38 a1       	ldd	r19, Y+32	; 0x20
    704e:	e2 1a       	sub	r14, r18
    7050:	f3 0a       	sbc	r15, r19
    7052:	f8 01       	movw	r30, r16
    7054:	e8 55       	subi	r30, 0x58	; 88
    7056:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				default:
					break;
			}

			switch (Config.Channel[i].P1_Yaw_gyro)
    7058:	80 81       	ld	r24, Z
    705a:	81 30       	cpi	r24, 0x01	; 1
    705c:	89 f0       	breq	.+34     	; 0x7080 <ProcessMixer+0x1fa>
    705e:	82 30       	cpi	r24, 0x02	; 2
    7060:	99 f4       	brne	.+38     	; 0x7088 <ProcessMixer+0x202>
    7062:	f8 01       	movw	r30, r16
    7064:	ee 55       	subi	r30, 0x5E	; 94
    7066:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				case ON:
					P1_solution = P1_solution - PID_Gyros[P1][YAW];
					break;
				case SCALE:
					P1_solution = P1_solution - scale32(PID_Gyros[P1][YAW], Config.Channel[i].P1_rudder_volume * 5);
    7068:	60 81       	ld	r22, Z
    706a:	55 e0       	ldi	r21, 0x05	; 5
    706c:	65 02       	muls	r22, r21
    706e:	b0 01       	movw	r22, r0
    7070:	11 24       	eor	r1, r1
    7072:	89 a1       	ldd	r24, Y+33	; 0x21
    7074:	9a a1       	ldd	r25, Y+34	; 0x22
    7076:	0e 94 20 37 	call	0x6e40	; 0x6e40 <scale32>
    707a:	e8 1a       	sub	r14, r24
    707c:	f9 0a       	sbc	r15, r25
					break;
    707e:	04 c0       	rjmp	.+8      	; 0x7088 <ProcessMixer+0x202>
			switch (Config.Channel[i].P1_Yaw_gyro)
			{
				case OFF:
					break;
				case ON:
					P1_solution = P1_solution - PID_Gyros[P1][YAW];
    7080:	49 a1       	ldd	r20, Y+33	; 0x21
    7082:	5a a1       	ldd	r21, Y+34	; 0x22
    7084:	e4 1a       	sub	r14, r20
    7086:	f5 0a       	sbc	r15, r21
					break;
			}
		}

		// P2 gyros
		if (Transition_state > TRANS_P1)
    7088:	2d 8d       	ldd	r18, Y+29	; 0x1d
    708a:	22 23       	and	r18, r18
    708c:	09 f4       	brne	.+2      	; 0x7090 <ProcessMixer+0x20a>
    708e:	5d c0       	rjmp	.+186    	; 0x714a <ProcessMixer+0x2c4>
    7090:	02 c0       	rjmp	.+4      	; 0x7096 <ProcessMixer+0x210>
	{
		//************************************************************
		// Zero each channel value to start
		//************************************************************

		P1_solution = 0;
    7092:	e1 2c       	mov	r14, r1
    7094:	f1 2c       	mov	r15, r1
    7096:	a6 01       	movw	r20, r12
    7098:	4d 54       	subi	r20, 0x4D	; 77
    709a:	5a 4f       	sbci	r21, 0xFA	; 250
    709c:	3a 01       	movw	r6, r20
    709e:	fa 01       	movw	r30, r20
    70a0:	eb 55       	subi	r30, 0x5B	; 91
    70a2:	ff 4f       	sbci	r31, 0xFF	; 255
		}

		// P2 gyros
		if (Transition_state > TRANS_P1)
		{
			switch (Config.Channel[i].P2_Roll_gyro)
    70a4:	80 81       	ld	r24, Z
    70a6:	81 30       	cpi	r24, 0x01	; 1
    70a8:	99 f0       	breq	.+38     	; 0x70d0 <ProcessMixer+0x24a>
    70aa:	82 30       	cpi	r24, 0x02	; 2
    70ac:	a1 f4       	brne	.+40     	; 0x70d6 <ProcessMixer+0x250>
    70ae:	fa 01       	movw	r30, r20
    70b0:	e1 56       	subi	r30, 0x61	; 97
    70b2:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				case ON:
					P2_solution = P2_solution - PID_Gyros[P2][ROLL];
					break;
				case SCALE:
					P2_solution = P2_solution - scale32(PID_Gyros[P2][ROLL], Config.Channel[i].P2_aileron_volume * 5);
    70b4:	60 81       	ld	r22, Z
    70b6:	55 e0       	ldi	r21, 0x05	; 5
    70b8:	65 02       	muls	r22, r21
    70ba:	b0 01       	movw	r22, r0
    70bc:	11 24       	eor	r1, r1
    70be:	8f a1       	ldd	r24, Y+39	; 0x27
    70c0:	98 a5       	ldd	r25, Y+40	; 0x28
    70c2:	0e 94 20 37 	call	0x6e40	; 0x6e40 <scale32>
    70c6:	00 27       	eor	r16, r16
    70c8:	11 27       	eor	r17, r17
    70ca:	08 1b       	sub	r16, r24
    70cc:	19 0b       	sbc	r17, r25
					break;
    70ce:	05 c0       	rjmp	.+10     	; 0x70da <ProcessMixer+0x254>
			switch (Config.Channel[i].P2_Roll_gyro)
			{
				case OFF:
					break;
				case ON:
					P2_solution = P2_solution - PID_Gyros[P2][ROLL];
    70d0:	0f a5       	ldd	r16, Y+47	; 0x2f
    70d2:	18 a9       	ldd	r17, Y+48	; 0x30
					break;
    70d4:	02 c0       	rjmp	.+4      	; 0x70da <ProcessMixer+0x254>
		//************************************************************
		// Zero each channel value to start
		//************************************************************

		P1_solution = 0;
		P2_solution = 0;
    70d6:	00 e0       	ldi	r16, 0x00	; 0
    70d8:	10 e0       	ldi	r17, 0x00	; 0
    70da:	f3 01       	movw	r30, r6
    70dc:	e9 55       	subi	r30, 0x59	; 89
    70de:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				default:
					break;
			}

			switch (Config.Channel[i].P2_Pitch_gyro)
    70e0:	80 81       	ld	r24, Z
    70e2:	81 30       	cpi	r24, 0x01	; 1
    70e4:	89 f0       	breq	.+34     	; 0x7108 <ProcessMixer+0x282>
    70e6:	82 30       	cpi	r24, 0x02	; 2
    70e8:	99 f4       	brne	.+38     	; 0x7110 <ProcessMixer+0x28a>
    70ea:	f3 01       	movw	r30, r6
    70ec:	ef 55       	subi	r30, 0x5F	; 95
    70ee:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				case ON:
					P2_solution = P2_solution - PID_Gyros[P2][PITCH];
					break;
				case SCALE:
					P2_solution = P2_solution - scale32(PID_Gyros[P2][PITCH], Config.Channel[i].P2_elevator_volume * 5);
    70f0:	60 81       	ld	r22, Z
    70f2:	35 e0       	ldi	r19, 0x05	; 5
    70f4:	63 02       	muls	r22, r19
    70f6:	b0 01       	movw	r22, r0
    70f8:	11 24       	eor	r1, r1
    70fa:	89 a5       	ldd	r24, Y+41	; 0x29
    70fc:	9a a5       	ldd	r25, Y+42	; 0x2a
    70fe:	0e 94 20 37 	call	0x6e40	; 0x6e40 <scale32>
    7102:	08 1b       	sub	r16, r24
    7104:	19 0b       	sbc	r17, r25
					break;
    7106:	04 c0       	rjmp	.+8      	; 0x7110 <ProcessMixer+0x28a>
			switch (Config.Channel[i].P2_Pitch_gyro)
			{
				case OFF:
					break;
				case ON:
					P2_solution = P2_solution - PID_Gyros[P2][PITCH];
    7108:	29 a5       	ldd	r18, Y+41	; 0x29
    710a:	3a a5       	ldd	r19, Y+42	; 0x2a
    710c:	02 1b       	sub	r16, r18
    710e:	13 0b       	sbc	r17, r19
    7110:	f3 01       	movw	r30, r6
    7112:	e7 55       	subi	r30, 0x57	; 87
    7114:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				default:
					break;
			}

			switch (Config.Channel[i].P2_Yaw_gyro)
    7116:	80 81       	ld	r24, Z
    7118:	81 30       	cpi	r24, 0x01	; 1
    711a:	81 f0       	breq	.+32     	; 0x713c <ProcessMixer+0x2b6>
    711c:	82 30       	cpi	r24, 0x02	; 2
    711e:	81 f4       	brne	.+32     	; 0x7140 <ProcessMixer+0x2ba>
    7120:	f3 01       	movw	r30, r6
    7122:	ed 55       	subi	r30, 0x5D	; 93
    7124:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				case ON:
					P2_solution = P2_solution - PID_Gyros[P2][YAW];
					break;
				case SCALE:
					P2_solution = P2_solution - scale32(PID_Gyros[P2][YAW], Config.Channel[i].P2_rudder_volume * 5);
    7126:	60 81       	ld	r22, Z
    7128:	45 e0       	ldi	r20, 0x05	; 5
    712a:	64 02       	muls	r22, r20
    712c:	b0 01       	movw	r22, r0
    712e:	11 24       	eor	r1, r1
    7130:	c1 01       	movw	r24, r2
    7132:	0e 94 20 37 	call	0x6e40	; 0x6e40 <scale32>
    7136:	08 1b       	sub	r16, r24
    7138:	19 0b       	sbc	r17, r25
					break;
    713a:	02 c0       	rjmp	.+4      	; 0x7140 <ProcessMixer+0x2ba>
			switch (Config.Channel[i].P2_Yaw_gyro)
			{
				case OFF:
					break;
				case ON:
					P2_solution = P2_solution - PID_Gyros[P2][YAW];
    713c:	02 19       	sub	r16, r2
    713e:	13 09       	sbc	r17, r3

		//************************************************************
		// Mix in accelerometers
		//************************************************************ 
		// P1
		if (Transition_state < TRANS_P2)
    7140:	5d 8d       	ldd	r21, Y+29	; 0x1d
    7142:	59 30       	cpi	r21, 0x09	; 9
    7144:	08 f0       	brcs	.+2      	; 0x7148 <ProcessMixer+0x2c2>
    7146:	5c c0       	rjmp	.+184    	; 0x7200 <ProcessMixer+0x37a>
    7148:	02 c0       	rjmp	.+4      	; 0x714e <ProcessMixer+0x2c8>
		//************************************************************
		// Zero each channel value to start
		//************************************************************

		P1_solution = 0;
		P2_solution = 0;
    714a:	00 e0       	ldi	r16, 0x00	; 0
    714c:	10 e0       	ldi	r17, 0x00	; 0
    714e:	c6 01       	movw	r24, r12
    7150:	8d 54       	subi	r24, 0x4D	; 77
    7152:	9a 4f       	sbci	r25, 0xFA	; 250
    7154:	3c 01       	movw	r6, r24
    7156:	fc 01       	movw	r30, r24
    7158:	e6 55       	subi	r30, 0x56	; 86
    715a:	ff 4f       	sbci	r31, 0xFF	; 255
		// Mix in accelerometers
		//************************************************************ 
		// P1
		if (Transition_state < TRANS_P2)
		{
			switch (Config.Channel[i].P1_Roll_acc)
    715c:	80 81       	ld	r24, Z
    715e:	81 30       	cpi	r24, 0x01	; 1
    7160:	89 f0       	breq	.+34     	; 0x7184 <ProcessMixer+0x2fe>
    7162:	82 30       	cpi	r24, 0x02	; 2
    7164:	99 f4       	brne	.+38     	; 0x718c <ProcessMixer+0x306>
    7166:	f3 01       	movw	r30, r6
    7168:	e2 56       	subi	r30, 0x62	; 98
    716a:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				case ON:
					P1_solution = P1_solution - PID_ACCs[P1][ROLL];
					break;
				case SCALE:
					P1_solution = P1_solution - scale32(PID_ACCs[P1][ROLL], Config.Channel[i].P1_aileron_volume * 5);
    716c:	60 81       	ld	r22, Z
    716e:	35 e0       	ldi	r19, 0x05	; 5
    7170:	63 02       	muls	r22, r19
    7172:	b0 01       	movw	r22, r0
    7174:	11 24       	eor	r1, r1
    7176:	8b a1       	ldd	r24, Y+35	; 0x23
    7178:	9c a1       	ldd	r25, Y+36	; 0x24
    717a:	0e 94 20 37 	call	0x6e40	; 0x6e40 <scale32>
    717e:	e8 1a       	sub	r14, r24
    7180:	f9 0a       	sbc	r15, r25
					break;
    7182:	04 c0       	rjmp	.+8      	; 0x718c <ProcessMixer+0x306>
			switch (Config.Channel[i].P1_Roll_acc)
			{
				case OFF:
					break;
				case ON:
					P1_solution = P1_solution - PID_ACCs[P1][ROLL];
    7184:	2b a1       	ldd	r18, Y+35	; 0x23
    7186:	3c a1       	ldd	r19, Y+36	; 0x24
    7188:	e2 1a       	sub	r14, r18
    718a:	f3 0a       	sbc	r15, r19
    718c:	f3 01       	movw	r30, r6
    718e:	e4 55       	subi	r30, 0x54	; 84
    7190:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				default:
					break;
			}			

			switch (Config.Channel[i].P1_Pitch_acc)
    7192:	80 81       	ld	r24, Z
    7194:	81 30       	cpi	r24, 0x01	; 1
    7196:	89 f0       	breq	.+34     	; 0x71ba <ProcessMixer+0x334>
    7198:	82 30       	cpi	r24, 0x02	; 2
    719a:	99 f4       	brne	.+38     	; 0x71c2 <ProcessMixer+0x33c>
    719c:	f3 01       	movw	r30, r6
    719e:	e0 56       	subi	r30, 0x60	; 96
    71a0:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				case ON:
					P1_solution = P1_solution - PID_ACCs[P1][PITCH];
					break;
				case SCALE:
					P1_solution = P1_solution - scale32(PID_ACCs[P1][PITCH], Config.Channel[i].P1_elevator_volume * 5);
    71a2:	60 81       	ld	r22, Z
    71a4:	55 e0       	ldi	r21, 0x05	; 5
    71a6:	65 02       	muls	r22, r21
    71a8:	b0 01       	movw	r22, r0
    71aa:	11 24       	eor	r1, r1
    71ac:	8d a1       	ldd	r24, Y+37	; 0x25
    71ae:	9e a1       	ldd	r25, Y+38	; 0x26
    71b0:	0e 94 20 37 	call	0x6e40	; 0x6e40 <scale32>
    71b4:	e8 1a       	sub	r14, r24
    71b6:	f9 0a       	sbc	r15, r25
					break;
    71b8:	04 c0       	rjmp	.+8      	; 0x71c2 <ProcessMixer+0x33c>
			switch (Config.Channel[i].P1_Pitch_acc)
			{
				case OFF:
					break;
				case ON:
					P1_solution = P1_solution - PID_ACCs[P1][PITCH];
    71ba:	4d a1       	ldd	r20, Y+37	; 0x25
    71bc:	5e a1       	ldd	r21, Y+38	; 0x26
    71be:	e4 1a       	sub	r14, r20
    71c0:	f5 0a       	sbc	r15, r21
    71c2:	f3 01       	movw	r30, r6
    71c4:	e2 55       	subi	r30, 0x52	; 82
    71c6:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				default:
					break;
			}

			switch (Config.Channel[i].P1_Z_delta_acc)
    71c8:	80 81       	ld	r24, Z
    71ca:	81 30       	cpi	r24, 0x01	; 1
    71cc:	89 f0       	breq	.+34     	; 0x71f0 <ProcessMixer+0x36a>
    71ce:	82 30       	cpi	r24, 0x02	; 2
    71d0:	99 f4       	brne	.+38     	; 0x71f8 <ProcessMixer+0x372>
    71d2:	f3 01       	movw	r30, r6
    71d4:	e5 56       	subi	r30, 0x65	; 101
    71d6:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				case ON:
					P1_solution = P1_solution - PID_ACCs[P1][YAW];
					break;
				case SCALE:
					P1_solution = P1_solution - scale32(PID_ACCs[P1][YAW], Config.Channel[i].P1_throttle_volume * 5);
    71d8:	60 81       	ld	r22, Z
    71da:	35 e0       	ldi	r19, 0x05	; 5
    71dc:	63 02       	muls	r22, r19
    71de:	b0 01       	movw	r22, r0
    71e0:	11 24       	eor	r1, r1
    71e2:	8b a5       	ldd	r24, Y+43	; 0x2b
    71e4:	9c a5       	ldd	r25, Y+44	; 0x2c
    71e6:	0e 94 20 37 	call	0x6e40	; 0x6e40 <scale32>
    71ea:	e8 1a       	sub	r14, r24
    71ec:	f9 0a       	sbc	r15, r25
					break;
    71ee:	04 c0       	rjmp	.+8      	; 0x71f8 <ProcessMixer+0x372>
			switch (Config.Channel[i].P1_Z_delta_acc)
			{
				case OFF:
					break;
				case ON:
					P1_solution = P1_solution - PID_ACCs[P1][YAW];
    71f0:	2b a5       	ldd	r18, Y+43	; 0x2b
    71f2:	3c a5       	ldd	r19, Y+44	; 0x2c
    71f4:	e2 1a       	sub	r14, r18
    71f6:	f3 0a       	sbc	r15, r19
					break;
			}
		}

		// P2
		if (Transition_state > TRANS_P1)
    71f8:	4d 8d       	ldd	r20, Y+29	; 0x1d
    71fa:	44 23       	and	r20, r20
    71fc:	09 f4       	brne	.+2      	; 0x7200 <ProcessMixer+0x37a>
    71fe:	53 c0       	rjmp	.+166    	; 0x72a6 <ProcessMixer+0x420>
    7200:	c6 01       	movw	r24, r12
    7202:	8d 54       	subi	r24, 0x4D	; 77
    7204:	9a 4f       	sbci	r25, 0xFA	; 250
    7206:	3c 01       	movw	r6, r24
    7208:	fc 01       	movw	r30, r24
    720a:	e5 55       	subi	r30, 0x55	; 85
    720c:	ff 4f       	sbci	r31, 0xFF	; 255
		{
			switch (Config.Channel[i].P2_Roll_acc)
    720e:	80 81       	ld	r24, Z
    7210:	81 30       	cpi	r24, 0x01	; 1
    7212:	81 f0       	breq	.+32     	; 0x7234 <ProcessMixer+0x3ae>
    7214:	82 30       	cpi	r24, 0x02	; 2
    7216:	81 f4       	brne	.+32     	; 0x7238 <ProcessMixer+0x3b2>
    7218:	f3 01       	movw	r30, r6
    721a:	e1 56       	subi	r30, 0x61	; 97
    721c:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				case ON:
					P2_solution = P2_solution - PID_ACCs[P2][ROLL];
					break;
				case SCALE:
					P2_solution = P2_solution - scale32(PID_ACCs[P2][ROLL], Config.Channel[i].P2_aileron_volume * 5);
    721e:	60 81       	ld	r22, Z
    7220:	95 e0       	ldi	r25, 0x05	; 5
    7222:	69 02       	muls	r22, r25
    7224:	b0 01       	movw	r22, r0
    7226:	11 24       	eor	r1, r1
    7228:	c5 01       	movw	r24, r10
    722a:	0e 94 20 37 	call	0x6e40	; 0x6e40 <scale32>
    722e:	08 1b       	sub	r16, r24
    7230:	19 0b       	sbc	r17, r25
					break;
    7232:	02 c0       	rjmp	.+4      	; 0x7238 <ProcessMixer+0x3b2>
			switch (Config.Channel[i].P2_Roll_acc)
			{
				case OFF:
					break;
				case ON:
					P2_solution = P2_solution - PID_ACCs[P2][ROLL];
    7234:	0a 19       	sub	r16, r10
    7236:	1b 09       	sbc	r17, r11
    7238:	f3 01       	movw	r30, r6
    723a:	e3 55       	subi	r30, 0x53	; 83
    723c:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				default:
					break;
			}

			switch (Config.Channel[i].P2_Pitch_acc)
    723e:	80 81       	ld	r24, Z
    7240:	81 30       	cpi	r24, 0x01	; 1
    7242:	81 f0       	breq	.+32     	; 0x7264 <ProcessMixer+0x3de>
    7244:	82 30       	cpi	r24, 0x02	; 2
    7246:	81 f4       	brne	.+32     	; 0x7268 <ProcessMixer+0x3e2>
    7248:	f3 01       	movw	r30, r6
    724a:	ef 55       	subi	r30, 0x5F	; 95
    724c:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				case ON:
					P2_solution = P2_solution - PID_ACCs[P2][PITCH];
					break;
				case SCALE:
					P2_solution = P2_solution - scale32(PID_ACCs[P2][PITCH], Config.Channel[i].P2_elevator_volume * 5);
    724e:	60 81       	ld	r22, Z
    7250:	a5 e0       	ldi	r26, 0x05	; 5
    7252:	6a 02       	muls	r22, r26
    7254:	b0 01       	movw	r22, r0
    7256:	11 24       	eor	r1, r1
    7258:	c4 01       	movw	r24, r8
    725a:	0e 94 20 37 	call	0x6e40	; 0x6e40 <scale32>
    725e:	08 1b       	sub	r16, r24
    7260:	19 0b       	sbc	r17, r25
					break;
    7262:	02 c0       	rjmp	.+4      	; 0x7268 <ProcessMixer+0x3e2>
			switch (Config.Channel[i].P2_Pitch_acc)
			{
				case OFF:
					break;
				case ON:
					P2_solution = P2_solution - PID_ACCs[P2][PITCH];
    7264:	08 19       	sub	r16, r8
    7266:	19 09       	sbc	r17, r9
    7268:	f3 01       	movw	r30, r6
    726a:	e1 55       	subi	r30, 0x51	; 81
    726c:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				default:
					break;
			}

			switch (Config.Channel[i].P2_Z_delta_acc)
    726e:	80 81       	ld	r24, Z
    7270:	81 30       	cpi	r24, 0x01	; 1
    7272:	89 f0       	breq	.+34     	; 0x7296 <ProcessMixer+0x410>
    7274:	82 30       	cpi	r24, 0x02	; 2
    7276:	99 f4       	brne	.+38     	; 0x729e <ProcessMixer+0x418>
    7278:	f3 01       	movw	r30, r6
    727a:	e4 56       	subi	r30, 0x64	; 100
    727c:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				case ON:
					P2_solution = P2_solution - PID_ACCs[P2][YAW];
					break;
				case SCALE:
					P2_solution = P2_solution - scale32(PID_ACCs[P2][YAW], Config.Channel[i].P2_throttle_volume * 5);
    727e:	60 81       	ld	r22, Z
    7280:	35 e0       	ldi	r19, 0x05	; 5
    7282:	63 02       	muls	r22, r19
    7284:	b0 01       	movw	r22, r0
    7286:	11 24       	eor	r1, r1
    7288:	8d a5       	ldd	r24, Y+45	; 0x2d
    728a:	9e a5       	ldd	r25, Y+46	; 0x2e
    728c:	0e 94 20 37 	call	0x6e40	; 0x6e40 <scale32>
    7290:	08 1b       	sub	r16, r24
    7292:	19 0b       	sbc	r17, r25
					break;
    7294:	04 c0       	rjmp	.+8      	; 0x729e <ProcessMixer+0x418>
			switch (Config.Channel[i].P2_Z_delta_acc)
			{
				case OFF:
					break;
				case ON:
					P2_solution = P2_solution - PID_ACCs[P2][YAW];
    7296:	2d a5       	ldd	r18, Y+45	; 0x2d
    7298:	3e a5       	ldd	r19, Y+46	; 0x2e
    729a:	02 1b       	sub	r16, r18
    729c:	13 0b       	sbc	r17, r19
		//************************************************************
		// Process mixers
		//************************************************************ 

		// Mix in other outputs here (P1)
		if (Transition_state < TRANS_P2)
    729e:	4d 8d       	ldd	r20, Y+29	; 0x1d
    72a0:	49 30       	cpi	r20, 0x09	; 9
    72a2:	08 f0       	brcs	.+2      	; 0x72a6 <ProcessMixer+0x420>
    72a4:	8d c0       	rjmp	.+282    	; 0x73c0 <ProcessMixer+0x53a>
    72a6:	c6 01       	movw	r24, r12
    72a8:	8d 54       	subi	r24, 0x4D	; 77
    72aa:	9a 4f       	sbci	r25, 0xFA	; 250
    72ac:	3c 01       	movw	r6, r24
    72ae:	fc 01       	movw	r30, r24
    72b0:	e2 56       	subi	r30, 0x62	; 98
    72b2:	ff 4f       	sbci	r31, 0xFF	; 255
		{
			// Mix in dedicated RC sources - aileron, elevator and rudder
			if (Config.Channel[i].P1_aileron_volume !=0) 					// Mix in dedicated aileron
    72b4:	60 81       	ld	r22, Z
    72b6:	66 23       	and	r22, r22
    72b8:	59 f0       	breq	.+22     	; 0x72d0 <ProcessMixer+0x44a>
			{
				temp2 = scale32(RCinputs[AILERON], Config.Channel[i].P1_aileron_volume);
    72ba:	80 91 2f 08 	lds	r24, 0x082F
    72be:	90 91 30 08 	lds	r25, 0x0830
    72c2:	77 27       	eor	r23, r23
    72c4:	67 fd       	sbrc	r22, 7
    72c6:	70 95       	com	r23
    72c8:	0e 94 20 37 	call	0x6e40	; 0x6e40 <scale32>
				P1_solution = P1_solution + temp2;
    72cc:	e8 0e       	add	r14, r24
    72ce:	f9 1e       	adc	r15, r25
    72d0:	f3 01       	movw	r30, r6
    72d2:	e0 56       	subi	r30, 0x60	; 96
    72d4:	ff 4f       	sbci	r31, 0xFF	; 255
			}
			if (Config.Channel[i].P1_elevator_volume !=0) 					// Mix in dedicated elevator
    72d6:	60 81       	ld	r22, Z
    72d8:	66 23       	and	r22, r22
    72da:	59 f0       	breq	.+22     	; 0x72f2 <ProcessMixer+0x46c>
			{
				temp2 = scale32(RCinputs[ELEVATOR], Config.Channel[i].P1_elevator_volume);
    72dc:	80 91 31 08 	lds	r24, 0x0831
    72e0:	90 91 32 08 	lds	r25, 0x0832
    72e4:	77 27       	eor	r23, r23
    72e6:	67 fd       	sbrc	r22, 7
    72e8:	70 95       	com	r23
    72ea:	0e 94 20 37 	call	0x6e40	; 0x6e40 <scale32>
				P1_solution = P1_solution + temp2;
    72ee:	e8 0e       	add	r14, r24
    72f0:	f9 1e       	adc	r15, r25
    72f2:	f3 01       	movw	r30, r6
    72f4:	ee 55       	subi	r30, 0x5E	; 94
    72f6:	ff 4f       	sbci	r31, 0xFF	; 255
			}
			if (Config.Channel[i].P1_rudder_volume !=0) 					// Mix in dedicated rudder
    72f8:	60 81       	ld	r22, Z
    72fa:	66 23       	and	r22, r22
    72fc:	59 f0       	breq	.+22     	; 0x7314 <ProcessMixer+0x48e>
			{
				temp2 = scale32(RCinputs[RUDDER], Config.Channel[i].P1_rudder_volume);
    72fe:	80 91 33 08 	lds	r24, 0x0833
    7302:	90 91 34 08 	lds	r25, 0x0834
    7306:	77 27       	eor	r23, r23
    7308:	67 fd       	sbrc	r22, 7
    730a:	70 95       	com	r23
    730c:	0e 94 20 37 	call	0x6e40	; 0x6e40 <scale32>
				P1_solution = P1_solution + temp2;
    7310:	e8 0e       	add	r14, r24
    7312:	f9 1e       	adc	r15, r25
    7314:	f3 01       	movw	r30, r6
    7316:	ef 54       	subi	r30, 0x4F	; 79
    7318:	ff 4f       	sbci	r31, 0xFF	; 255
			}

			// Other sources
			if ((Config.Channel[i].P1_source_a_volume !=0) && (Config.Channel[i].P1_source_a != NOMIX)) // Mix in first extra source
    731a:	60 81       	ld	r22, Z
    731c:	66 23       	and	r22, r22
    731e:	19 f1       	breq	.+70     	; 0x7366 <ProcessMixer+0x4e0>
    7320:	31 97       	sbiw	r30, 0x01	; 1
    7322:	80 81       	ld	r24, Z
    7324:	8f 30       	cpi	r24, 0x0F	; 15
    7326:	f9 f0       	breq	.+62     	; 0x7366 <ProcessMixer+0x4e0>
    7328:	e8 2f       	mov	r30, r24
    732a:	ff 27       	eor	r31, r31
    732c:	e7 fd       	sbrc	r30, 7
    732e:	f0 95       	com	r31
			{
				// Is the source a sensor?
				if (Config.Channel[i].P1_source_a > (MAX_RC_CHANNELS - 1))
    7330:	88 30       	cpi	r24, 0x08	; 8
    7332:	64 f0       	brlt	.+24     	; 0x734c <ProcessMixer+0x4c6>
				{
					temp2 = SensorDataP1[Config.Channel[i].P1_source_a - EXT_SOURCE];
    7334:	38 97       	sbiw	r30, 0x08	; 8
    7336:	ee 0f       	add	r30, r30
    7338:	ff 1f       	adc	r31, r31
    733a:	a1 e0       	ldi	r26, 0x01	; 1
    733c:	b0 e0       	ldi	r27, 0x00	; 0
    733e:	ac 0f       	add	r26, r28
    7340:	bd 1f       	adc	r27, r29
    7342:	ea 0f       	add	r30, r26
    7344:	fb 1f       	adc	r31, r27
    7346:	86 85       	ldd	r24, Z+14	; 0x0e
    7348:	97 85       	ldd	r25, Z+15	; 0x0f
    734a:	06 c0       	rjmp	.+12     	; 0x7358 <ProcessMixer+0x4d2>
				}
				// Is the source an RC input?
				else
				{
					// Yes, calculate RC channel number from source number and return RC value
					temp2 = RCinputs[Config.Channel[i].P1_source_a];
    734c:	ee 0f       	add	r30, r30
    734e:	ff 1f       	adc	r31, r31
    7350:	e3 5d       	subi	r30, 0xD3	; 211
    7352:	f7 4f       	sbci	r31, 0xF7	; 247
    7354:	80 81       	ld	r24, Z
    7356:	91 81       	ldd	r25, Z+1	; 0x01
				}

				temp2 = scale32(temp2, Config.Channel[i].P1_source_a_volume);
    7358:	77 27       	eor	r23, r23
    735a:	67 fd       	sbrc	r22, 7
    735c:	70 95       	com	r23
    735e:	0e 94 20 37 	call	0x6e40	; 0x6e40 <scale32>
				P1_solution = P1_solution + temp2;
    7362:	e8 0e       	add	r14, r24
    7364:	f9 1e       	adc	r15, r25
    7366:	f3 01       	movw	r30, r6
    7368:	eb 54       	subi	r30, 0x4B	; 75
    736a:	ff 4f       	sbci	r31, 0xFF	; 255
			}
			if ((Config.Channel[i].P1_source_b_volume !=0) && (Config.Channel[i].P1_source_b != NOMIX)) // Mix in second extra source
    736c:	60 81       	ld	r22, Z
    736e:	66 23       	and	r22, r22
    7370:	19 f1       	breq	.+70     	; 0x73b8 <ProcessMixer+0x532>
    7372:	31 97       	sbiw	r30, 0x01	; 1
    7374:	80 81       	ld	r24, Z
    7376:	8f 30       	cpi	r24, 0x0F	; 15
    7378:	f9 f0       	breq	.+62     	; 0x73b8 <ProcessMixer+0x532>
    737a:	e8 2f       	mov	r30, r24
    737c:	ff 27       	eor	r31, r31
    737e:	e7 fd       	sbrc	r30, 7
    7380:	f0 95       	com	r31
			{
				// Is the source a sensor?
				if (Config.Channel[i].P1_source_b > (MAX_RC_CHANNELS - 1))
    7382:	88 30       	cpi	r24, 0x08	; 8
    7384:	64 f0       	brlt	.+24     	; 0x739e <ProcessMixer+0x518>
				{
					temp2 = SensorDataP1[Config.Channel[i].P1_source_b - EXT_SOURCE];
    7386:	38 97       	sbiw	r30, 0x08	; 8
    7388:	ee 0f       	add	r30, r30
    738a:	ff 1f       	adc	r31, r31
    738c:	21 e0       	ldi	r18, 0x01	; 1
    738e:	30 e0       	ldi	r19, 0x00	; 0
    7390:	2c 0f       	add	r18, r28
    7392:	3d 1f       	adc	r19, r29
    7394:	e2 0f       	add	r30, r18
    7396:	f3 1f       	adc	r31, r19
    7398:	86 85       	ldd	r24, Z+14	; 0x0e
    739a:	97 85       	ldd	r25, Z+15	; 0x0f
    739c:	06 c0       	rjmp	.+12     	; 0x73aa <ProcessMixer+0x524>
				}
				// Is the source an RC input?
				else
				{
					temp2 = RCinputs[Config.Channel[i].P1_source_b];
    739e:	ee 0f       	add	r30, r30
    73a0:	ff 1f       	adc	r31, r31
    73a2:	e3 5d       	subi	r30, 0xD3	; 211
    73a4:	f7 4f       	sbci	r31, 0xF7	; 247
    73a6:	80 81       	ld	r24, Z
    73a8:	91 81       	ldd	r25, Z+1	; 0x01
				}

				temp2 = scale32(temp2, Config.Channel[i].P1_source_b_volume);
    73aa:	77 27       	eor	r23, r23
    73ac:	67 fd       	sbrc	r22, 7
    73ae:	70 95       	com	r23
    73b0:	0e 94 20 37 	call	0x6e40	; 0x6e40 <scale32>
				P1_solution = P1_solution + temp2;
    73b4:	e8 0e       	add	r14, r24
    73b6:	f9 1e       	adc	r15, r25
			}
		}

		// Mix in other outputs here (P2)
		if (Transition_state > TRANS_P1)	
    73b8:	3d 8d       	ldd	r19, Y+29	; 0x1d
    73ba:	33 23       	and	r19, r19
    73bc:	09 f4       	brne	.+2      	; 0x73c0 <ProcessMixer+0x53a>
    73be:	85 c0       	rjmp	.+266    	; 0x74ca <ProcessMixer+0x644>
    73c0:	a6 01       	movw	r20, r12
    73c2:	4d 54       	subi	r20, 0x4D	; 77
    73c4:	5a 4f       	sbci	r21, 0xFA	; 250
    73c6:	3a 01       	movw	r6, r20
    73c8:	fa 01       	movw	r30, r20
    73ca:	e1 56       	subi	r30, 0x61	; 97
    73cc:	ff 4f       	sbci	r31, 0xFF	; 255
		{
			// Mix in dedicated RC sources - aileron, elevator and rudder
			if (Config.Channel[i].P2_aileron_volume !=0) 					// Mix in dedicated aileron
    73ce:	60 81       	ld	r22, Z
    73d0:	66 23       	and	r22, r22
    73d2:	59 f0       	breq	.+22     	; 0x73ea <ProcessMixer+0x564>
			{
				temp2 = scale32(RCinputs[AILERON], Config.Channel[i].P2_aileron_volume);
    73d4:	80 91 2f 08 	lds	r24, 0x082F
    73d8:	90 91 30 08 	lds	r25, 0x0830
    73dc:	77 27       	eor	r23, r23
    73de:	67 fd       	sbrc	r22, 7
    73e0:	70 95       	com	r23
    73e2:	0e 94 20 37 	call	0x6e40	; 0x6e40 <scale32>
				P2_solution = P2_solution + temp2;
    73e6:	08 0f       	add	r16, r24
    73e8:	19 1f       	adc	r17, r25
    73ea:	f3 01       	movw	r30, r6
    73ec:	ef 55       	subi	r30, 0x5F	; 95
    73ee:	ff 4f       	sbci	r31, 0xFF	; 255
			}
			if (Config.Channel[i].P2_elevator_volume !=0) 					// Mix in dedicated elevator
    73f0:	60 81       	ld	r22, Z
    73f2:	66 23       	and	r22, r22
    73f4:	59 f0       	breq	.+22     	; 0x740c <ProcessMixer+0x586>
			{
				temp2 = scale32(RCinputs[ELEVATOR], Config.Channel[i].P2_elevator_volume);
    73f6:	80 91 31 08 	lds	r24, 0x0831
    73fa:	90 91 32 08 	lds	r25, 0x0832
    73fe:	77 27       	eor	r23, r23
    7400:	67 fd       	sbrc	r22, 7
    7402:	70 95       	com	r23
    7404:	0e 94 20 37 	call	0x6e40	; 0x6e40 <scale32>
				P2_solution = P2_solution + temp2;
    7408:	08 0f       	add	r16, r24
    740a:	19 1f       	adc	r17, r25
    740c:	f3 01       	movw	r30, r6
    740e:	ed 55       	subi	r30, 0x5D	; 93
    7410:	ff 4f       	sbci	r31, 0xFF	; 255
			}
			if (Config.Channel[i].P2_rudder_volume !=0) 					// Mix in dedicated rudder
    7412:	60 81       	ld	r22, Z
    7414:	66 23       	and	r22, r22
    7416:	59 f0       	breq	.+22     	; 0x742e <ProcessMixer+0x5a8>
			{
				temp2 = scale32(RCinputs[RUDDER], Config.Channel[i].P2_rudder_volume);
    7418:	80 91 33 08 	lds	r24, 0x0833
    741c:	90 91 34 08 	lds	r25, 0x0834
    7420:	77 27       	eor	r23, r23
    7422:	67 fd       	sbrc	r22, 7
    7424:	70 95       	com	r23
    7426:	0e 94 20 37 	call	0x6e40	; 0x6e40 <scale32>
				P2_solution = P2_solution + temp2;
    742a:	08 0f       	add	r16, r24
    742c:	19 1f       	adc	r17, r25
    742e:	f3 01       	movw	r30, r6
    7430:	ed 54       	subi	r30, 0x4D	; 77
    7432:	ff 4f       	sbci	r31, 0xFF	; 255
			}

			// Other sources
			if ((Config.Channel[i].P2_source_a_volume !=0) && (Config.Channel[i].P2_source_a != NOMIX)) // Mix in first extra source
    7434:	60 81       	ld	r22, Z
    7436:	66 23       	and	r22, r22
    7438:	09 f1       	breq	.+66     	; 0x747c <ProcessMixer+0x5f6>
    743a:	31 97       	sbiw	r30, 0x01	; 1
    743c:	80 81       	ld	r24, Z
    743e:	8f 30       	cpi	r24, 0x0F	; 15
    7440:	e9 f0       	breq	.+58     	; 0x747c <ProcessMixer+0x5f6>
    7442:	e8 2f       	mov	r30, r24
    7444:	ff 27       	eor	r31, r31
    7446:	e7 fd       	sbrc	r30, 7
    7448:	f0 95       	com	r31
			{
				// Is the source a sensor?
				if (Config.Channel[i].P2_source_a > (MAX_RC_CHANNELS - 1))
    744a:	88 30       	cpi	r24, 0x08	; 8
    744c:	54 f0       	brlt	.+20     	; 0x7462 <ProcessMixer+0x5dc>
				{
					temp2 = SensorDataP2[Config.Channel[i].P2_source_a - EXT_SOURCE];
    744e:	38 97       	sbiw	r30, 0x08	; 8
    7450:	ee 0f       	add	r30, r30
    7452:	ff 1f       	adc	r31, r31
    7454:	81 e0       	ldi	r24, 0x01	; 1
    7456:	90 e0       	ldi	r25, 0x00	; 0
    7458:	8c 0f       	add	r24, r28
    745a:	9d 1f       	adc	r25, r29
    745c:	e8 0f       	add	r30, r24
    745e:	f9 1f       	adc	r31, r25
    7460:	04 c0       	rjmp	.+8      	; 0x746a <ProcessMixer+0x5e4>
				}
				// Is the source an RC input?
				else 
				{
					temp2 = RCinputs[Config.Channel[i].P2_source_a];
    7462:	ee 0f       	add	r30, r30
    7464:	ff 1f       	adc	r31, r31
    7466:	e3 5d       	subi	r30, 0xD3	; 211
    7468:	f7 4f       	sbci	r31, 0xF7	; 247
    746a:	80 81       	ld	r24, Z
    746c:	91 81       	ldd	r25, Z+1	; 0x01
				}

				temp2 = scale32(temp2, Config.Channel[i].P2_source_a_volume);
    746e:	77 27       	eor	r23, r23
    7470:	67 fd       	sbrc	r22, 7
    7472:	70 95       	com	r23
    7474:	0e 94 20 37 	call	0x6e40	; 0x6e40 <scale32>
				P2_solution = P2_solution + temp2;
    7478:	08 0f       	add	r16, r24
    747a:	19 1f       	adc	r17, r25
    747c:	f3 01       	movw	r30, r6
    747e:	e9 54       	subi	r30, 0x49	; 73
    7480:	ff 4f       	sbci	r31, 0xFF	; 255
			}
			if ((Config.Channel[i].P2_source_b_volume !=0) && (Config.Channel[i].P2_source_b != NOMIX)) // Mix in second extra source
    7482:	60 81       	ld	r22, Z
    7484:	66 23       	and	r22, r22
    7486:	09 f1       	breq	.+66     	; 0x74ca <ProcessMixer+0x644>
    7488:	31 97       	sbiw	r30, 0x01	; 1
    748a:	80 81       	ld	r24, Z
    748c:	8f 30       	cpi	r24, 0x0F	; 15
    748e:	e9 f0       	breq	.+58     	; 0x74ca <ProcessMixer+0x644>
    7490:	e8 2f       	mov	r30, r24
    7492:	ff 27       	eor	r31, r31
    7494:	e7 fd       	sbrc	r30, 7
    7496:	f0 95       	com	r31
			{
				// Is the source a sensor?
				if (Config.Channel[i].P2_source_b > (MAX_RC_CHANNELS - 1))
    7498:	88 30       	cpi	r24, 0x08	; 8
    749a:	54 f0       	brlt	.+20     	; 0x74b0 <ProcessMixer+0x62a>
				{
					temp2 = SensorDataP2[Config.Channel[i].P2_source_b - EXT_SOURCE];
    749c:	38 97       	sbiw	r30, 0x08	; 8
    749e:	ee 0f       	add	r30, r30
    74a0:	ff 1f       	adc	r31, r31
    74a2:	a1 e0       	ldi	r26, 0x01	; 1
    74a4:	b0 e0       	ldi	r27, 0x00	; 0
    74a6:	ac 0f       	add	r26, r28
    74a8:	bd 1f       	adc	r27, r29
    74aa:	ea 0f       	add	r30, r26
    74ac:	fb 1f       	adc	r31, r27
    74ae:	04 c0       	rjmp	.+8      	; 0x74b8 <ProcessMixer+0x632>
				}
				// Is the source an RC input?
				else
				{
					temp2 = RCinputs[Config.Channel[i].P2_source_b];
    74b0:	ee 0f       	add	r30, r30
    74b2:	ff 1f       	adc	r31, r31
    74b4:	e3 5d       	subi	r30, 0xD3	; 211
    74b6:	f7 4f       	sbci	r31, 0xF7	; 247
    74b8:	80 81       	ld	r24, Z
    74ba:	91 81       	ldd	r25, Z+1	; 0x01
				}

				temp2 = scale32(temp2, Config.Channel[i].P2_source_b_volume);
    74bc:	77 27       	eor	r23, r23
    74be:	67 fd       	sbrc	r22, 7
    74c0:	70 95       	com	r23
    74c2:	0e 94 20 37 	call	0x6e40	; 0x6e40 <scale32>
				P2_solution = P2_solution + temp2;
    74c6:	08 0f       	add	r16, r24
    74c8:	19 1f       	adc	r17, r25
    74ca:	c6 01       	movw	r24, r12
    74cc:	8d 54       	subi	r24, 0x4D	; 77
    74ce:	9a 4f       	sbci	r25, 0xFA	; 250
    74d0:	fc 01       	movw	r30, r24
    74d2:	ee 56       	subi	r30, 0x6E	; 110
    74d4:	ff 4f       	sbci	r31, 0xFF	; 255
			}
		}
			
		// Save solution for this channel. Note that this contains cross-mixed data from the *last* cycle
		Config.Channel[i].P1_value = P1_solution;
    74d6:	f1 82       	std	Z+1, r15	; 0x01
    74d8:	e0 82       	st	Z, r14
    74da:	32 96       	adiw	r30, 0x02	; 2
		Config.Channel[i].P2_value = P2_solution;
    74dc:	11 83       	std	Z+1, r17	; 0x01
    74de:	00 83       	st	Z, r16
    74e0:	b6 e2       	ldi	r27, 0x26	; 38
    74e2:	cb 0e       	add	r12, r27
    74e4:	d1 1c       	adc	r13, r1

	//************************************************************
	// Main mix loop - sensors, RC inputs and other channels
	//************************************************************

	for (i = 0; i < MIX_OUTPUTS; i++)
    74e6:	e0 e3       	ldi	r30, 0x30	; 48
    74e8:	ce 16       	cp	r12, r30
    74ea:	e1 e0       	ldi	r30, 0x01	; 1
    74ec:	de 06       	cpc	r13, r30
    74ee:	09 f0       	breq	.+2      	; 0x74f2 <ProcessMixer+0x66c>
    74f0:	71 cd       	rjmp	.-1310   	; 0x6fd4 <ProcessMixer+0x14e>
	//************************************************************
	// Mixer transition code
	//************************************************************ 

	// Convert number to percentage (0 to 100%)
	if (Config.TransitionSpeed != 0) 
    74f2:	80 91 e3 05 	lds	r24, 0x05E3
    74f6:	88 23       	and	r24, r24
    74f8:	41 f0       	breq	.+16     	; 0x750a <ProcessMixer+0x684>
	{
		// transition_counter counts from 0 to 100 (101 steps)
		transition = transition_counter;
    74fa:	80 91 24 05 	lds	r24, 0x0524
    74fe:	90 91 25 05 	lds	r25, 0x0525
    7502:	90 93 22 05 	sts	0x0522, r25
    7506:	80 93 21 05 	sts	0x0521, r24

	// Recalculate P1 values based on transition stage
	for (i = 0; i < MIX_OUTPUTS; i++)
	{
		// Speed up the easy ones :)
		if (transition == 0)
    750a:	00 91 21 05 	lds	r16, 0x0521
    750e:	10 91 22 05 	lds	r17, 0x0522
		}
		else
		{
			// Get source channel value
			temp1 = Config.Channel[i].P1_value;
			temp1 = scale32(temp1, (100 - transition));
    7512:	b4 e6       	ldi	r27, 0x64	; 100
    7514:	cb 2e       	mov	r12, r27
    7516:	d1 2c       	mov	r13, r1
    7518:	c0 1a       	sub	r12, r16
    751a:	d1 0a       	sbc	r13, r17
    751c:	85 e4       	ldi	r24, 0x45	; 69
    751e:	e8 2e       	mov	r14, r24
    7520:	86 e0       	ldi	r24, 0x06	; 6
    7522:	f8 2e       	mov	r15, r24

	// Recalculate P1 values based on transition stage
	for (i = 0; i < MIX_OUTPUTS; i++)
	{
		// Speed up the easy ones :)
		if (transition == 0)
    7524:	01 15       	cp	r16, r1
    7526:	11 05       	cpc	r17, r1
    7528:	21 f4       	brne	.+8      	; 0x7532 <ProcessMixer+0x6ac>
		{
			temp1 = Config.Channel[i].P1_value;
    752a:	d7 01       	movw	r26, r14
    752c:	8d 91       	ld	r24, X+
    752e:	9c 91       	ld	r25, X
    7530:	16 c0       	rjmp	.+44     	; 0x755e <ProcessMixer+0x6d8>
		}
		else if (transition >= 100)
    7532:	04 36       	cpi	r16, 0x64	; 100
    7534:	11 05       	cpc	r17, r1
    7536:	24 f0       	brlt	.+8      	; 0x7540 <ProcessMixer+0x6ba>
		{
			temp1 = Config.Channel[i].P2_value;
    7538:	f7 01       	movw	r30, r14
    753a:	82 81       	ldd	r24, Z+2	; 0x02
    753c:	93 81       	ldd	r25, Z+3	; 0x03
    753e:	0f c0       	rjmp	.+30     	; 0x755e <ProcessMixer+0x6d8>
		}
		else
		{
			// Get source channel value
			temp1 = Config.Channel[i].P1_value;
			temp1 = scale32(temp1, (100 - transition));
    7540:	b6 01       	movw	r22, r12
    7542:	d7 01       	movw	r26, r14
    7544:	8d 91       	ld	r24, X+
    7546:	9c 91       	ld	r25, X
    7548:	0e 94 20 37 	call	0x6e40	; 0x6e40 <scale32>
    754c:	5c 01       	movw	r10, r24

			// Get destination channel value
			temp2 = Config.Channel[i].P2_value;
			temp2 = scale32(temp2, transition);
    754e:	b8 01       	movw	r22, r16
    7550:	f7 01       	movw	r30, r14
    7552:	82 81       	ldd	r24, Z+2	; 0x02
    7554:	93 81       	ldd	r25, Z+3	; 0x03
    7556:	0e 94 20 37 	call	0x6e40	; 0x6e40 <scale32>

			// Sum the mixers
			temp1 = temp1 + temp2;
    755a:	8a 0d       	add	r24, r10
    755c:	9b 1d       	adc	r25, r11
		}
		// Save transitioned solution into P1
		Config.Channel[i].P1_value = temp1;
    755e:	d7 01       	movw	r26, r14
    7560:	8d 93       	st	X+, r24
    7562:	9c 93       	st	X, r25
    7564:	b6 e2       	ldi	r27, 0x26	; 38
    7566:	eb 0e       	add	r14, r27
    7568:	f1 1c       	adc	r15, r1
		// transition_counter counts from 0 to 100 (101 steps)
		transition = transition_counter;
	}

	// Recalculate P1 values based on transition stage
	for (i = 0; i < MIX_OUTPUTS; i++)
    756a:	e5 e7       	ldi	r30, 0x75	; 117
    756c:	ee 16       	cp	r14, r30
    756e:	e7 e0       	ldi	r30, 0x07	; 7
    7570:	fe 06       	cpc	r15, r30
    7572:	c1 f6       	brne	.-80     	; 0x7524 <ProcessMixer+0x69e>
    7574:	6f e4       	ldi	r22, 0x4F	; 79
    7576:	c6 2e       	mov	r12, r22
    7578:	66 e0       	ldi	r22, 0x06	; 6
    757a:	d6 2e       	mov	r13, r22
    757c:	70 e5       	ldi	r23, 0x50	; 80
    757e:	87 2e       	mov	r8, r23
    7580:	76 e0       	ldi	r23, 0x06	; 6
    7582:	97 2e       	mov	r9, r23
    7584:	e5 e4       	ldi	r30, 0x45	; 69
    7586:	ee 2e       	mov	r14, r30
    7588:	e6 e0       	ldi	r30, 0x06	; 6
    758a:	fe 2e       	mov	r15, r30
			if (Config.Channel[i].P1_throttle_volume != Config.Channel[i].P2_throttle_volume)
			{
				// Calculate step difference in 1/100ths and round
				temp1 = (Config.Channel[i].P2_throttle_volume - Config.Channel[i].P1_throttle_volume);
				temp1 = temp1 << 7; 						// Multiply by 128 so divide gives reasonable step values
				Step1 = temp1 / 100;	
    758c:	f4 e6       	ldi	r31, 0x64	; 100
    758e:	af 2e       	mov	r10, r31
    7590:	b1 2c       	mov	r11, r1
    7592:	80 2f       	mov	r24, r16
    7594:	99 27       	eor	r25, r25
    7596:	87 fd       	sbrc	r24, 7
    7598:	90 95       	com	r25
					}
					// If P2 greater than P1, SINE is the one we want
					else
					{
						// Multiply SQRTSIN[transition] steps (0 to 100)
						temp3 = (int8_t)pgm_read_byte(&SQRTSIN[(int8_t)transition]);
    759a:	9c 01       	movw	r18, r24
    759c:	2b 54       	subi	r18, 0x4B	; 75
    759e:	36 4e       	sbci	r19, 0xE6	; 230
    75a0:	3e 8f       	std	Y+30, r19	; 0x1e
    75a2:	2d 8f       	std	Y+29, r18	; 0x1d
					// Choose between SQRT SINE and SQRT COSINE
					// If P2 less than P1, COSINE (reverse SINE) is the one we want
					if (Step1 < 0)
					{ 
						// Multiply SQRTSIN[100 - transition] steps (0 to 100)
						temp3 = 100 - (int8_t)pgm_read_byte(&SQRTSIN[100 - (int8_t)transition]);
    75a4:	95 01       	movw	r18, r10
    75a6:	28 1b       	sub	r18, r24
    75a8:	39 0b       	sbc	r19, r25
    75aa:	a9 01       	movw	r20, r18
    75ac:	4b 54       	subi	r20, 0x4B	; 75
    75ae:	56 4e       	sbci	r21, 0xE6	; 230
    75b0:	58 a3       	std	Y+32, r21	; 0x20
    75b2:	4f 8f       	std	Y+31, r20	; 0x1f
					}
					// If P2 greater than P1, SINE is the one we want
					else
					{
						// Multiply SIN[transition] steps (0 to 100)
						temp3 = (int8_t)pgm_read_byte(&SIN[(int8_t)transition]);
    75b4:	dc 01       	movw	r26, r24
    75b6:	a6 5e       	subi	r26, 0xE6	; 230
    75b8:	b5 4e       	sbci	r27, 0xE5	; 229
    75ba:	1d 01       	movw	r2, r26
					// Choose between SINE and COSINE
					// If P2 less than P1, COSINE (reverse SINE) is the one we want
					if (Step1 < 0)
					{ 
						// Multiply SIN[100 - transition] steps (0 to 100)
						temp3 = 100 - (int8_t)pgm_read_byte(&SIN[100 - (int8_t)transition]);
    75bc:	f9 01       	movw	r30, r18
    75be:	e6 5e       	subi	r30, 0xE6	; 230
    75c0:	f5 4e       	sbci	r31, 0xE5	; 229
    75c2:	2f 01       	movw	r4, r30
		} // No throttle
		
		// No throttles, so clamp to THROTTLEMIN if flagged as a motor
		else if (Config.Channel[i].Motor_marker == MOTOR)
		{
			Config.Channel[i].P1_value = -THROTTLEOFFSET; // 3750-1250 = 2500 = 1.0ms
    75c4:	ae e1       	ldi	r26, 0x1E	; 30
    75c6:	6a 2e       	mov	r6, r26
    75c8:	ab ef       	ldi	r26, 0xFB	; 251
    75ca:	7a 2e       	mov	r7, r26
    75cc:	f6 01       	movw	r30, r12
    75ce:	31 97       	sbiw	r30, 0x01	; 1
	//************************************************************ 

	for (i = 0; i < MIX_OUTPUTS; i++)
	{
		// Ignore if both throttle volumes are 0% (no throttle)
		if 	(!((Config.Channel[i].P1_throttle_volume == 0) && 
    75d0:	90 81       	ld	r25, Z
    75d2:	d6 01       	movw	r26, r12
    75d4:	8c 91       	ld	r24, X
    75d6:	91 11       	cpse	r25, r1
    75d8:	03 c0       	rjmp	.+6      	; 0x75e0 <ProcessMixer+0x75a>
    75da:	88 23       	and	r24, r24
    75dc:	09 f4       	brne	.+2      	; 0x75e0 <ProcessMixer+0x75a>
    75de:	61 c0       	rjmp	.+194    	; 0x76a2 <ProcessMixer+0x81c>
    75e0:	29 2f       	mov	r18, r25
    75e2:	33 27       	eor	r19, r19
    75e4:	27 fd       	sbrc	r18, 7
    75e6:	30 95       	com	r19
			(Config.Channel[i].P2_throttle_volume == 0)))
		{
			// Only process if there is a curve
			if (Config.Channel[i].P1_throttle_volume != Config.Channel[i].P2_throttle_volume)
    75e8:	98 17       	cp	r25, r24
    75ea:	09 f4       	brne	.+2      	; 0x75ee <ProcessMixer+0x768>
    75ec:	48 c0       	rjmp	.+144    	; 0x767e <ProcessMixer+0x7f8>
			{
				// Calculate step difference in 1/100ths and round
				temp1 = (Config.Channel[i].P2_throttle_volume - Config.Channel[i].P1_throttle_volume);
    75ee:	99 27       	eor	r25, r25
    75f0:	87 fd       	sbrc	r24, 7
    75f2:	90 95       	com	r25
    75f4:	82 1b       	sub	r24, r18
    75f6:	93 0b       	sbc	r25, r19
				temp1 = temp1 << 7; 						// Multiply by 128 so divide gives reasonable step values
    75f8:	96 95       	lsr	r25
    75fa:	98 2f       	mov	r25, r24
    75fc:	88 27       	eor	r24, r24
    75fe:	97 95       	ror	r25
    7600:	87 95       	ror	r24
				Step1 = temp1 / 100;	
    7602:	b5 01       	movw	r22, r10
    7604:	0e 94 06 47 	call	0x8e0c	; 0x8e0c <__divmodhi4>

				// Set start (P1) point
				temp2 = Config.Channel[i].P1_throttle_volume; // Promote to 16 bits
				temp2 = temp2 << 7;
    7608:	36 95       	lsr	r19
    760a:	32 2f       	mov	r19, r18
    760c:	22 27       	eor	r18, r18
    760e:	37 95       	ror	r19
    7610:	27 95       	ror	r18

				// Linear vs. Sinusoidal calculation
				if (Config.Channel[i].Throttle_curve == LINEAR)
    7612:	f4 01       	movw	r30, r8
    7614:	80 81       	ld	r24, Z
    7616:	81 11       	cpse	r24, r1
    7618:	08 c0       	rjmp	.+16     	; 0x762a <ProcessMixer+0x7a4>
				{
					// Multiply [transition] steps (0 to 100)
					temp3 = temp2 + (Step1 * transition);
    761a:	60 9f       	mul	r22, r16
    761c:	c0 01       	movw	r24, r0
    761e:	61 9f       	mul	r22, r17
    7620:	90 0d       	add	r25, r0
    7622:	70 9f       	mul	r23, r16
    7624:	90 0d       	add	r25, r0
    7626:	11 24       	eor	r1, r1
    7628:	20 c0       	rjmp	.+64     	; 0x766a <ProcessMixer+0x7e4>
				}

				// SINE
				else if (Config.Channel[i].Throttle_curve == SINE)
    762a:	81 30       	cpi	r24, 0x01	; 1
    762c:	31 f4       	brne	.+12     	; 0x763a <ProcessMixer+0x7b4>
				{
					// Choose between SINE and COSINE
					// If P2 less than P1, COSINE (reverse SINE) is the one we want
					if (Step1 < 0)
    762e:	77 ff       	sbrs	r23, 7
    7630:	02 c0       	rjmp	.+4      	; 0x7636 <ProcessMixer+0x7b0>
					{ 
						// Multiply SIN[100 - transition] steps (0 to 100)
						temp3 = 100 - (int8_t)pgm_read_byte(&SIN[100 - (int8_t)transition]);
    7632:	f2 01       	movw	r30, r4
    7634:	06 c0       	rjmp	.+12     	; 0x7642 <ProcessMixer+0x7bc>
					}
					// If P2 greater than P1, SINE is the one we want
					else
					{
						// Multiply SIN[transition] steps (0 to 100)
						temp3 = (int8_t)pgm_read_byte(&SIN[(int8_t)transition]);
    7636:	f1 01       	movw	r30, r2
    7638:	0d c0       	rjmp	.+26     	; 0x7654 <ProcessMixer+0x7ce>
				// SQRT SINE
				else
				{
					// Choose between SQRT SINE and SQRT COSINE
					// If P2 less than P1, COSINE (reverse SINE) is the one we want
					if (Step1 < 0)
    763a:	77 ff       	sbrs	r23, 7
    763c:	09 c0       	rjmp	.+18     	; 0x7650 <ProcessMixer+0x7ca>
					{ 
						// Multiply SQRTSIN[100 - transition] steps (0 to 100)
						temp3 = 100 - (int8_t)pgm_read_byte(&SQRTSIN[100 - (int8_t)transition]);
    763e:	ef 8d       	ldd	r30, Y+31	; 0x1f
    7640:	f8 a1       	ldd	r31, Y+32	; 0x20
    7642:	84 91       	lpm	r24, Z
    7644:	a5 01       	movw	r20, r10
    7646:	48 1b       	sub	r20, r24
    7648:	51 09       	sbc	r21, r1
    764a:	87 fd       	sbrc	r24, 7
    764c:	53 95       	inc	r21
    764e:	06 c0       	rjmp	.+12     	; 0x765c <ProcessMixer+0x7d6>
					}
					// If P2 greater than P1, SINE is the one we want
					else
					{
						// Multiply SQRTSIN[transition] steps (0 to 100)
						temp3 = (int8_t)pgm_read_byte(&SQRTSIN[(int8_t)transition]);
    7650:	ed 8d       	ldd	r30, Y+29	; 0x1d
    7652:	fe 8d       	ldd	r31, Y+30	; 0x1e
    7654:	44 91       	lpm	r20, Z
    7656:	55 27       	eor	r21, r21
    7658:	47 fd       	sbrc	r20, 7
    765a:	50 95       	com	r21
					}

					// Get SINE% (temp2) of difference in volumes (Step1)
					// Step1 is already in 100ths of the difference * 128
					// temp1 is the start volume * 128
					temp3 = temp2 + (Step1 * temp3);
    765c:	64 9f       	mul	r22, r20
    765e:	c0 01       	movw	r24, r0
    7660:	65 9f       	mul	r22, r21
    7662:	90 0d       	add	r25, r0
    7664:	74 9f       	mul	r23, r20
    7666:	90 0d       	add	r25, r0
    7668:	11 24       	eor	r1, r1
    766a:	82 0f       	add	r24, r18
    766c:	93 1f       	adc	r25, r19
				}

				// Round, then rescale to normal value
				temp3 = temp3 + 64;
    766e:	bc 01       	movw	r22, r24
    7670:	60 5c       	subi	r22, 0xC0	; 192
    7672:	7f 4f       	sbci	r23, 0xFF	; 255
				temp3 = temp3 >> 7;
    7674:	66 0f       	add	r22, r22
    7676:	67 2f       	mov	r22, r23
    7678:	66 1f       	adc	r22, r22
    767a:	77 0b       	sbc	r23, r23
    767c:	01 c0       	rjmp	.+2      	; 0x7680 <ProcessMixer+0x7fa>
			
			// No curve
			else
			{
				// Just use the value of P1 volume as there is no curve
				temp3 = Config.Channel[i].P1_throttle_volume; // Promote to 16 bits
    767e:	b9 01       	movw	r22, r18
			}

			// Calculate actual throttle value to the curve
			temp3 = scale32(MonopolarThrottle, temp3);
    7680:	80 91 2b 08 	lds	r24, 0x082B
    7684:	90 91 2c 08 	lds	r25, 0x082C
    7688:	0e 94 20 37 	call	0x6e40	; 0x6e40 <scale32>

			// At this point, the throttle values are 0 to 2500 (+/-150%)
			// Re-scale throttle values back to neutral-centered system values (+/-1250) 
			// and set the minimum throttle point to 1.1ms.
			// A THROTTLEMIN value of 1000 will result in 2750, or 1.1ms
			temp3 = temp3 - THROTTLEMIN;
    768c:	88 5e       	subi	r24, 0xE8	; 232
    768e:	93 40       	sbci	r25, 0x03	; 3

			// Add offset to channel value
			Config.Channel[i].P1_value += temp3;
    7690:	d7 01       	movw	r26, r14
    7692:	2d 91       	ld	r18, X+
    7694:	3c 91       	ld	r19, X
    7696:	11 97       	sbiw	r26, 0x01	; 1
    7698:	28 0f       	add	r18, r24
    769a:	39 1f       	adc	r19, r25
    769c:	2d 93       	st	X+, r18
    769e:	3c 93       	st	X, r19
    76a0:	08 c0       	rjmp	.+16     	; 0x76b2 <ProcessMixer+0x82c>
    76a2:	f6 01       	movw	r30, r12
    76a4:	36 97       	sbiw	r30, 0x06	; 6

		} // No throttle
		
		// No throttles, so clamp to THROTTLEMIN if flagged as a motor
		else if (Config.Channel[i].Motor_marker == MOTOR)
    76a6:	80 81       	ld	r24, Z
    76a8:	82 30       	cpi	r24, 0x02	; 2
    76aa:	19 f4       	brne	.+6      	; 0x76b2 <ProcessMixer+0x82c>
		{
			Config.Channel[i].P1_value = -THROTTLEOFFSET; // 3750-1250 = 2500 = 1.0ms
    76ac:	f7 01       	movw	r30, r14
    76ae:	71 82       	std	Z+1, r7	; 0x01
    76b0:	60 82       	st	Z, r6
    76b2:	f6 e2       	ldi	r31, 0x26	; 38
    76b4:	ef 0e       	add	r14, r31
    76b6:	f1 1c       	adc	r15, r1
    76b8:	26 e2       	ldi	r18, 0x26	; 38
    76ba:	c2 0e       	add	r12, r18
    76bc:	d1 1c       	adc	r13, r1
    76be:	36 e2       	ldi	r19, 0x26	; 38
    76c0:	83 0e       	add	r8, r19
    76c2:	91 1c       	adc	r9, r1
	// Groovy throttle curve handling. Must be after the transition.
	// Uses the transition value, but is not part of the transition
	// mixer. Linear or Sine curve. Reverse Sine done automatically
	//************************************************************ 

	for (i = 0; i < MIX_OUTPUTS; i++)
    76c4:	45 e7       	ldi	r20, 0x75	; 117
    76c6:	e4 16       	cp	r14, r20
    76c8:	47 e0       	ldi	r20, 0x07	; 7
    76ca:	f4 06       	cpc	r15, r20
    76cc:	09 f0       	breq	.+2      	; 0x76d0 <ProcessMixer+0x84a>
    76ce:	7e cf       	rjmp	.-260    	; 0x75cc <ProcessMixer+0x746>
    76d0:	ed e4       	ldi	r30, 0x4D	; 77
    76d2:	f6 e0       	ldi	r31, 0x06	; 6
    76d4:	25 e4       	ldi	r18, 0x45	; 69
    76d6:	36 e0       	ldi	r19, 0x06	; 6
			// Work out distance to cover over stage 2 (P1.n to P2)
			temp2 = Config.Channel[i].P2_offset - Config.Channel[i].P1n_offset;
			temp2 = temp2 << 7;

			// Divide distance into steps
			temp1 = (100 - Config.Channel[i].P1n_position); 
    76d8:	94 e6       	ldi	r25, 0x64	; 100
    76da:	69 2e       	mov	r6, r25
    76dc:	71 2c       	mov	r7, r1
    76de:	df 01       	movw	r26, r30
    76e0:	13 97       	sbiw	r26, 0x03	; 3
	//************************************************************ 

	for (i = 0; i < MIX_OUTPUTS; i++)
	{
		// Simplify if all are the same
		if (!((Config.Channel[i].P1_offset == Config.Channel[i].P1n_offset) &&
    76e2:	cc 90       	ld	r12, X
    76e4:	12 96       	adiw	r26, 0x02	; 2
    76e6:	ac 90       	ld	r10, X
    76e8:	50 80       	ld	r5, Z
    76ea:	ca 10       	cpse	r12, r10
    76ec:	03 c0       	rjmp	.+6      	; 0x76f4 <ProcessMixer+0x86e>
    76ee:	5c 14       	cp	r5, r12
    76f0:	09 f4       	brne	.+2      	; 0x76f4 <ProcessMixer+0x86e>
    76f2:	53 c0       	rjmp	.+166    	; 0x779a <ProcessMixer+0x914>
		 	 (Config.Channel[i].P2_offset == Config.Channel[i].P1n_offset)))
		{
			// Work out distance to cover over stage 1 (P1 to P1.n)
			temp1 = Config.Channel[i].P1n_offset - Config.Channel[i].P1_offset;
    76f4:	bb 24       	eor	r11, r11
    76f6:	a7 fc       	sbrc	r10, 7
    76f8:	b0 94       	com	r11
    76fa:	dd 24       	eor	r13, r13
    76fc:	c7 fc       	sbrc	r12, 7
    76fe:	d0 94       	com	r13
    7700:	c5 01       	movw	r24, r10
    7702:	8c 19       	sub	r24, r12
    7704:	9d 09       	sbc	r25, r13
    7706:	df 01       	movw	r26, r30
    7708:	12 97       	sbiw	r26, 0x02	; 2
			temp1 = temp1 << 7; // Multiply by 128 so divide gives reasonable step values

			// Divide distance into steps
			temp2 = Config.Channel[i].P1n_position; 
    770a:	ec 90       	ld	r14, X
    770c:	ff 24       	eor	r15, r15
    770e:	e7 fc       	sbrc	r14, 7
    7710:	f0 94       	com	r15
		if (!((Config.Channel[i].P1_offset == Config.Channel[i].P1n_offset) &&
		 	 (Config.Channel[i].P2_offset == Config.Channel[i].P1n_offset)))
		{
			// Work out distance to cover over stage 1 (P1 to P1.n)
			temp1 = Config.Channel[i].P1n_offset - Config.Channel[i].P1_offset;
			temp1 = temp1 << 7; // Multiply by 128 so divide gives reasonable step values
    7712:	96 95       	lsr	r25
    7714:	98 2f       	mov	r25, r24
    7716:	88 27       	eor	r24, r24
    7718:	97 95       	ror	r25
    771a:	87 95       	ror	r24

			// Divide distance into steps
			temp2 = Config.Channel[i].P1n_position; 
			Step1 = ((temp1 + (temp2 >> 1)) / temp2) ; // Divide and round result
    771c:	a7 01       	movw	r20, r14
    771e:	55 95       	asr	r21
    7720:	47 95       	ror	r20
    7722:	84 0f       	add	r24, r20
    7724:	95 1f       	adc	r25, r21
    7726:	b7 01       	movw	r22, r14
    7728:	0e 94 06 47 	call	0x8e0c	; 0x8e0c <__divmodhi4>
    772c:	4b 01       	movw	r8, r22
		
			// Work out distance to cover over stage 2 (P1.n to P2)
			temp2 = Config.Channel[i].P2_offset - Config.Channel[i].P1n_offset;
    772e:	85 2d       	mov	r24, r5
    7730:	99 27       	eor	r25, r25
    7732:	87 fd       	sbrc	r24, 7
    7734:	90 95       	com	r25
    7736:	8a 19       	sub	r24, r10
    7738:	9b 09       	sbc	r25, r11
			temp2 = temp2 << 7;

			// Divide distance into steps
			temp1 = (100 - Config.Channel[i].P1n_position); 
    773a:	b3 01       	movw	r22, r6
    773c:	6e 19       	sub	r22, r14
    773e:	7f 09       	sbc	r23, r15
			temp2 = Config.Channel[i].P1n_position; 
			Step1 = ((temp1 + (temp2 >> 1)) / temp2) ; // Divide and round result
		
			// Work out distance to cover over stage 2 (P1.n to P2)
			temp2 = Config.Channel[i].P2_offset - Config.Channel[i].P1n_offset;
			temp2 = temp2 << 7;
    7740:	96 95       	lsr	r25
    7742:	98 2f       	mov	r25, r24
    7744:	88 27       	eor	r24, r24
    7746:	97 95       	ror	r25
    7748:	87 95       	ror	r24

			// Divide distance into steps
			temp1 = (100 - Config.Channel[i].P1n_position); 
			Step2 = ((temp2 + (temp1 >> 1)) / temp1) ; // Divide and round result	
    774a:	ab 01       	movw	r20, r22
    774c:	55 95       	asr	r21
    774e:	47 95       	ror	r20
    7750:	84 0f       	add	r24, r20
    7752:	95 1f       	adc	r25, r21
    7754:	0e 94 06 47 	call	0x8e0c	; 0x8e0c <__divmodhi4>

			// Set start (P1) point
			temp3 = Config.Channel[i].P1_offset; // Promote to 16bits
			temp3 = temp3 << 7;
    7758:	d6 94       	lsr	r13
    775a:	dc 2c       	mov	r13, r12
    775c:	cc 24       	eor	r12, r12
    775e:	d7 94       	ror	r13
    7760:	c7 94       	ror	r12

			// Count up transition steps of the appropriate step size
			for (j = 0; j < transition; j++)
    7762:	40 e0       	ldi	r20, 0x00	; 0
    7764:	84 2f       	mov	r24, r20
    7766:	90 e0       	ldi	r25, 0x00	; 0
    7768:	80 17       	cp	r24, r16
    776a:	91 07       	cpc	r25, r17
    776c:	54 f4       	brge	.+20     	; 0x7782 <ProcessMixer+0x8fc>
			{
				// If in stage 1 use Step1 size
				if (j < Config.Channel[i].P1n_position)
    776e:	8e 15       	cp	r24, r14
    7770:	9f 05       	cpc	r25, r15
    7772:	1c f4       	brge	.+6      	; 0x777a <ProcessMixer+0x8f4>
				{
					temp3 += Step1;
    7774:	c8 0c       	add	r12, r8
    7776:	d9 1c       	adc	r13, r9
    7778:	02 c0       	rjmp	.+4      	; 0x777e <ProcessMixer+0x8f8>
				}
				// If in stage 2 use Step2 size
				else
				{
					temp3 += Step2;
    777a:	c6 0e       	add	r12, r22
    777c:	d7 1e       	adc	r13, r23
			// Set start (P1) point
			temp3 = Config.Channel[i].P1_offset; // Promote to 16bits
			temp3 = temp3 << 7;

			// Count up transition steps of the appropriate step size
			for (j = 0; j < transition; j++)
    777e:	4f 5f       	subi	r20, 0xFF	; 255
    7780:	f1 cf       	rjmp	.-30     	; 0x7764 <ProcessMixer+0x8de>
					temp3 += Step2;
				}
			}

			// Reformat into a system-compatible value
			itemp8 = (int8_t)((temp3 + 64) >> 7);							// Round then divide by 128
    7782:	c6 01       	movw	r24, r12
    7784:	80 5c       	subi	r24, 0xC0	; 192
    7786:	9f 4f       	sbci	r25, 0xFF	; 255
    7788:	88 0f       	add	r24, r24
    778a:	89 2f       	mov	r24, r25
    778c:	88 1f       	adc	r24, r24
    778e:	99 0b       	sbc	r25, r25
int16_t scale_percent_nooffset(int8_t value)
{
	int16_t temp16_1, temp16_2;

	temp16_1 = value; // Promote
	temp16_2 = (temp16_1 * (int16_t)10);
    7790:	5a e0       	ldi	r21, 0x0A	; 10
    7792:	85 02       	muls	r24, r21
    7794:	60 01       	movw	r12, r0
    7796:	11 24       	eor	r1, r1
				}
			}

			// Reformat into a system-compatible value
			itemp8 = (int8_t)((temp3 + 64) >> 7);							// Round then divide by 128
			P1_solution = scale_percent_nooffset(itemp8);	
    7798:	05 c0       	rjmp	.+10     	; 0x77a4 <ProcessMixer+0x91e>
int16_t scale_percent_nooffset(int8_t value)
{
	int16_t temp16_1, temp16_2;

	temp16_1 = value; // Promote
	temp16_2 = (temp16_1 * (int16_t)10);
    779a:	85 2d       	mov	r24, r5
    779c:	9a e0       	ldi	r25, 0x0A	; 10
    779e:	89 02       	muls	r24, r25
    77a0:	60 01       	movw	r12, r0
    77a2:	11 24       	eor	r1, r1
		{
			P1_solution = scale_percent_nooffset(Config.Channel[i].P1_offset);
		}

		// Add offset to channel value
		Config.Channel[i].P1_value += P1_solution;
    77a4:	d9 01       	movw	r26, r18
    77a6:	4d 91       	ld	r20, X+
    77a8:	5c 91       	ld	r21, X
    77aa:	11 97       	sbiw	r26, 0x01	; 1
    77ac:	4c 0d       	add	r20, r12
    77ae:	5d 1d       	adc	r21, r13
    77b0:	4d 93       	st	X+, r20
    77b2:	5c 93       	st	X, r21
    77b4:	2a 5d       	subi	r18, 0xDA	; 218
    77b6:	3f 4f       	sbci	r19, 0xFF	; 255
    77b8:	b6 96       	adiw	r30, 0x26	; 38
	//************************************************************
	// Per-channel 3-point offset needs to be after the transition  
	// loop as it is non-linear, unlike the transition.
	//************************************************************ 

	for (i = 0; i < MIX_OUTPUTS; i++)
    77ba:	b7 e0       	ldi	r27, 0x07	; 7
    77bc:	ed 37       	cpi	r30, 0x7D	; 125
    77be:	fb 07       	cpc	r31, r27
    77c0:	09 f0       	breq	.+2      	; 0x77c4 <ProcessMixer+0x93e>
    77c2:	8d cf       	rjmp	.-230    	; 0x76de <ProcessMixer+0x858>

		// Add offset to channel value
		Config.Channel[i].P1_value += P1_solution;
	}

} // ProcessMixer()
    77c4:	e2 96       	adiw	r28, 0x32	; 50
    77c6:	0f b6       	in	r0, 0x3f	; 63
    77c8:	f8 94       	cli
    77ca:	de bf       	out	0x3e, r29	; 62
    77cc:	0f be       	out	0x3f, r0	; 63
    77ce:	cd bf       	out	0x3d, r28	; 61
    77d0:	df 91       	pop	r29
    77d2:	cf 91       	pop	r28
    77d4:	1f 91       	pop	r17
    77d6:	0f 91       	pop	r16
    77d8:	ff 90       	pop	r15
    77da:	ef 90       	pop	r14
    77dc:	df 90       	pop	r13
    77de:	cf 90       	pop	r12
    77e0:	bf 90       	pop	r11
    77e2:	af 90       	pop	r10
    77e4:	9f 90       	pop	r9
    77e6:	8f 90       	pop	r8
    77e8:	7f 90       	pop	r7
    77ea:	6f 90       	pop	r6
    77ec:	5f 90       	pop	r5
    77ee:	4f 90       	pop	r4
    77f0:	3f 90       	pop	r3
    77f2:	2f 90       	pop	r2
    77f4:	08 95       	ret

000077f6 <scale_percent>:
int16_t scale_percent(int8_t value)
{
	int16_t temp16_1, temp16_2;

	temp16_1 = value; // Promote
	temp16_2 = ((temp16_1 * (int16_t)10) + 3750);
    77f6:	2a e0       	ldi	r18, 0x0A	; 10
    77f8:	82 02       	muls	r24, r18
    77fa:	c0 01       	movw	r24, r0
    77fc:	11 24       	eor	r1, r1

	return temp16_2;
}
    77fe:	8a 55       	subi	r24, 0x5A	; 90
    7800:	91 4f       	sbci	r25, 0xF1	; 241
    7802:	08 95       	ret

00007804 <mugui_text_sizestring>:
	\return void
	\date 	12.08.2009
*/
/************************************************************************/
void mugui_text_sizestring(mugui_char_t *s, const unsigned char* font, mugui_size16_t *size)
{
    7804:	df 92       	push	r13
    7806:	ef 92       	push	r14
    7808:	ff 92       	push	r15
    780a:	0f 93       	push	r16
    780c:	1f 93       	push	r17
    780e:	cf 93       	push	r28
    7810:	df 93       	push	r29
	mugui_uint8_t  indexhighbyte = 0; 		//high byte of the bitmap address in the array
	mugui_uint32_t indexaddress = 0;		//bitmap address in the array (derived from low and high byte)

	/* read header of the font          */
	/* pgm_read_byte is ATMega specific */
	length = strlen(s);
    7812:	dc 01       	movw	r26, r24
    7814:	0d 90       	ld	r0, X+
    7816:	00 20       	and	r0, r0
    7818:	e9 f7       	brne	.-6      	; 0x7814 <mugui_text_sizestring+0x10>
    781a:	11 97       	sbiw	r26, 0x01	; 1
    781c:	a8 1b       	sub	r26, r24
    781e:	b9 0b       	sbc	r27, r25
	height = pgm_read_byte(&font[4]);
    7820:	fb 01       	movw	r30, r22
    7822:	34 96       	adiw	r30, 0x04	; 4
    7824:	e4 90       	lpm	r14, Z
    7826:	f1 2c       	mov	r15, r1

	startcharacter = pgm_read_byte(&font[2]);
    7828:	32 97       	sbiw	r30, 0x02	; 2
    782a:	d4 90       	lpm	r13, Z
    782c:	ec 01       	movw	r28, r24
    782e:	a8 0f       	add	r26, r24
    7830:	b9 1f       	adc	r27, r25
	mugui_uint8_t  distance = 1;			//distance between characters
	mugui_uint16_t length = 0;				//temporary length of string
	mugui_uint16_t i = 0;					//counter variable
	mugui_uint16_t startcharacter = 0; 	    //startcharacter of the font
	mugui_uint16_t height = 0;				//height of the bitmap
	mugui_uint16_t width = 0; 				//width of the bitmap
    7832:	80 e0       	ldi	r24, 0x00	; 0
    7834:	90 e0       	ldi	r25, 0x00	; 0
	/* pgm_read_byte is ATMega specific */
	length = strlen(s);
	height = pgm_read_byte(&font[4]);

	startcharacter = pgm_read_byte(&font[2]);
	for(i=0;i<length;i++) //every character in prop fonts has its own width
    7836:	ca 17       	cp	r28, r26
    7838:	db 07       	cpc	r29, r27
    783a:	29 f1       	breq	.+74     	; 0x7886 <mugui_text_sizestring+0x82>
	{
		index = s[i] - startcharacter;
    783c:	29 91       	ld	r18, Y+
    783e:	2d 19       	sub	r18, r13
		indexhighbyte = pgm_read_byte(&font[index*2 + 5]);
    7840:	30 e0       	ldi	r19, 0x00	; 0
    7842:	22 0f       	add	r18, r18
    7844:	33 1f       	adc	r19, r19
    7846:	f9 01       	movw	r30, r18
    7848:	35 96       	adiw	r30, 0x05	; 5
    784a:	e6 0f       	add	r30, r22
    784c:	f7 1f       	adc	r31, r23
    784e:	04 91       	lpm	r16, Z
		indexlowbyte = pgm_read_byte(&font[index*2 + 6]);
    7850:	f9 01       	movw	r30, r18
    7852:	36 96       	adiw	r30, 0x06	; 6
    7854:	e6 0f       	add	r30, r22
    7856:	f7 1f       	adc	r31, r23
    7858:	e4 91       	lpm	r30, Z
		indexaddress = (mugui_int64_t)indexhighbyte;
    785a:	10 e0       	ldi	r17, 0x00	; 0
    785c:	20 e0       	ldi	r18, 0x00	; 0
    785e:	30 e0       	ldi	r19, 0x00	; 0
		indexaddress = indexaddress << 8;
    7860:	32 2f       	mov	r19, r18
    7862:	21 2f       	mov	r18, r17
    7864:	10 2f       	mov	r17, r16
    7866:	00 27       	eor	r16, r16
		indexaddress += indexlowbyte;
    7868:	0e 0f       	add	r16, r30
    786a:	11 1d       	adc	r17, r1
    786c:	21 1d       	adc	r18, r1
    786e:	31 1d       	adc	r19, r1
		width += pgm_read_byte(&font[indexaddress]) + distance;
    7870:	fb 01       	movw	r30, r22
    7872:	e0 0f       	add	r30, r16
    7874:	f1 1f       	adc	r31, r17
    7876:	04 91       	lpm	r16, Z
    7878:	20 2f       	mov	r18, r16
    787a:	30 e0       	ldi	r19, 0x00	; 0
    787c:	2f 5f       	subi	r18, 0xFF	; 255
    787e:	3f 4f       	sbci	r19, 0xFF	; 255
    7880:	82 0f       	add	r24, r18
    7882:	93 1f       	adc	r25, r19
    7884:	d8 cf       	rjmp	.-80     	; 0x7836 <mugui_text_sizestring+0x32>
	}

	/* prepare return value */
	size->x = width;
    7886:	fa 01       	movw	r30, r20
    7888:	91 83       	std	Z+1, r25	; 0x01
    788a:	80 83       	st	Z, r24
	size->y = height;
    788c:	f3 82       	std	Z+3, r15	; 0x03
    788e:	e2 82       	std	Z+2, r14	; 0x02
}
    7890:	df 91       	pop	r29
    7892:	cf 91       	pop	r28
    7894:	1f 91       	pop	r17
    7896:	0f 91       	pop	r16
    7898:	ff 90       	pop	r15
    789a:	ef 90       	pop	r14
    789c:	df 90       	pop	r13
    789e:	08 95       	ret

000078a0 <pgm_mugui_scopy>:
	\date 	30.07.2012
	\Created by D. Thompson
*/
/************************************************************************/
void pgm_mugui_scopy(const char *s)
{
    78a0:	a1 e6       	ldi	r26, 0x61	; 97
    78a2:	b5 e0       	ldi	r27, 0x05	; 5
	int i = 0;
    78a4:	20 e0       	ldi	r18, 0x00	; 0
    78a6:	30 e0       	ldi	r19, 0x00	; 0
    78a8:	fc 01       	movw	r30, r24
    78aa:	e2 0f       	add	r30, r18
    78ac:	f3 1f       	adc	r31, r19

	// Copy string until terminator but don't over-write buffer
	while((pgm_read_byte(s) != 0x00) && (i < (PBUFFER_SIZE - 1)))
    78ae:	44 91       	lpm	r20, Z
    78b0:	44 23       	and	r20, r20
    78b2:	41 f0       	breq	.+16     	; 0x78c4 <pgm_mugui_scopy+0x24>
    78b4:	2f 30       	cpi	r18, 0x0F	; 15
    78b6:	31 05       	cpc	r19, r1
    78b8:	29 f0       	breq	.+10     	; 0x78c4 <pgm_mugui_scopy+0x24>
	{
		pBuffer[i] = pgm_read_byte(s++);
    78ba:	e4 91       	lpm	r30, Z
    78bc:	ed 93       	st	X+, r30
		i++;
    78be:	2f 5f       	subi	r18, 0xFF	; 255
    78c0:	3f 4f       	sbci	r19, 0xFF	; 255
    78c2:	f2 cf       	rjmp	.-28     	; 0x78a8 <pgm_mugui_scopy+0x8>
	}
	
	// Add the terminator regardless of the amount copied
	pBuffer[i] = 0x00;
    78c4:	f9 01       	movw	r30, r18
    78c6:	ef 59       	subi	r30, 0x9F	; 159
    78c8:	fa 4f       	sbci	r31, 0xFA	; 250
    78ca:	10 82       	st	Z, r1
    78cc:	08 95       	ret

000078ce <mugui_lcd_putc>:
	\date 	13.11.2009
	\Modified by D. Thompson 14/08/2012 - Now hard-coded for proportional, type 2 (verticalCeiling)
*/
/************************************************************************/
mugui_uint16_t mugui_lcd_putc(mugui_char_t c, const unsigned char* font,mugui_uint16_t x, mugui_uint16_t y)
{
    78ce:	2f 92       	push	r2
    78d0:	3f 92       	push	r3
    78d2:	4f 92       	push	r4
    78d4:	5f 92       	push	r5
    78d6:	6f 92       	push	r6
    78d8:	7f 92       	push	r7
    78da:	8f 92       	push	r8
    78dc:	9f 92       	push	r9
    78de:	af 92       	push	r10
    78e0:	bf 92       	push	r11
    78e2:	cf 92       	push	r12
    78e4:	df 92       	push	r13
    78e6:	ef 92       	push	r14
    78e8:	ff 92       	push	r15
    78ea:	0f 93       	push	r16
    78ec:	1f 93       	push	r17
    78ee:	cf 93       	push	r28
    78f0:	df 93       	push	r29
    78f2:	cd b7       	in	r28, 0x3d	; 61
    78f4:	de b7       	in	r29, 0x3e	; 62
    78f6:	29 97       	sbiw	r28, 0x09	; 9
    78f8:	0f b6       	in	r0, 0x3f	; 63
    78fa:	f8 94       	cli
    78fc:	de bf       	out	0x3e, r29	; 62
    78fe:	0f be       	out	0x3f, r0	; 63
    7900:	cd bf       	out	0x3d, r28	; 61
    7902:	4c 83       	std	Y+4, r20	; 0x04
    7904:	2d 83       	std	Y+5, r18	; 0x05
	mugui_uint8_t  tc= 0;	 				//temorary count
	mugui_uint8_t  bytes= 0;  				//bytes per line or row

	/* Read header of the font          */
	/* pgm_read_byte is ATMega specific */
	startcharacter = pgm_read_byte(&font[2]);
    7906:	fb 01       	movw	r30, r22
    7908:	32 96       	adiw	r30, 0x02	; 2
    790a:	94 91       	lpm	r25, Z
	height = pgm_read_byte(&font[4]);
    790c:	32 96       	adiw	r30, 0x02	; 2
    790e:	e4 91       	lpm	r30, Z
    7910:	2e 2e       	mov	r2, r30
    7912:	31 2c       	mov	r3, r1

	/* Read the rest of the header */
	index = c - startcharacter;
    7914:	89 1b       	sub	r24, r25
	indexhighbyte = pgm_read_byte(&font[index*2 + 5]);
    7916:	90 e0       	ldi	r25, 0x00	; 0
    7918:	88 0f       	add	r24, r24
    791a:	99 1f       	adc	r25, r25
    791c:	fc 01       	movw	r30, r24
    791e:	35 96       	adiw	r30, 0x05	; 5
    7920:	e6 0f       	add	r30, r22
    7922:	f7 1f       	adc	r31, r23
    7924:	64 90       	lpm	r6, Z
	indexlowbyte = pgm_read_byte(&font[index*2 + 6]);
    7926:	fc 01       	movw	r30, r24
    7928:	36 96       	adiw	r30, 0x06	; 6
    792a:	e6 0f       	add	r30, r22
    792c:	f7 1f       	adc	r31, r23
    792e:	84 91       	lpm	r24, Z
	indexaddress = (mugui_int64_t)indexhighbyte;
    7930:	06 2d       	mov	r16, r6
    7932:	10 e0       	ldi	r17, 0x00	; 0
    7934:	20 e0       	ldi	r18, 0x00	; 0
    7936:	30 e0       	ldi	r19, 0x00	; 0
	indexaddress = indexaddress << 8;
    7938:	32 2f       	mov	r19, r18
    793a:	21 2f       	mov	r18, r17
    793c:	10 2f       	mov	r17, r16
    793e:	00 27       	eor	r16, r16
	indexaddress += indexlowbyte;
    7940:	08 0f       	add	r16, r24
    7942:	11 1d       	adc	r17, r1
    7944:	21 1d       	adc	r18, r1
    7946:	31 1d       	adc	r19, r1
	width = pgm_read_byte(&font[indexaddress]);
    7948:	c8 01       	movw	r24, r16
    794a:	fb 01       	movw	r30, r22
    794c:	e0 0f       	add	r30, r16
    794e:	f1 1f       	adc	r31, r17
    7950:	64 90       	lpm	r6, Z
    7952:	71 2c       	mov	r7, r1

	/* Determine the number of bytes for given width */ 
	bytes = ((height-1)>>3)+1;
    7954:	21 01       	movw	r4, r2
    7956:	21 e0       	ldi	r18, 0x01	; 1
    7958:	42 1a       	sub	r4, r18
    795a:	51 08       	sbc	r5, r1
    795c:	13 e0       	ldi	r17, 0x03	; 3
    795e:	56 94       	lsr	r5
    7960:	47 94       	ror	r4
    7962:	1a 95       	dec	r17
    7964:	e1 f7       	brne	.-8      	; 0x795e <mugui_lcd_putc+0x90>
    7966:	43 94       	inc	r4
    7968:	a4 2d       	mov	r26, r4
    796a:	b0 e0       	ldi	r27, 0x00	; 0
    796c:	ba 83       	std	Y+2, r27	; 0x02
    796e:	a9 83       	std	Y+1, r26	; 0x01
	/* For every column */
	for(tx= 0; tx < width; tx++) //for every row
    7970:	a1 2c       	mov	r10, r1
    7972:	b1 2c       	mov	r11, r1
    7974:	00 e0       	ldi	r16, 0x00	; 0
    7976:	10 e0       	ldi	r17, 0x00	; 0
    7978:	4b 01       	movw	r8, r22
    797a:	bf ef       	ldi	r27, 0xFF	; 255
    797c:	8b 1a       	sub	r8, r27
    797e:	9b 0a       	sbc	r9, r27
    7980:	88 0e       	add	r8, r24
    7982:	99 1e       	adc	r9, r25
    7984:	06 15       	cp	r16, r6
    7986:	17 05       	cpc	r17, r7
    7988:	08 f0       	brcs	.+2      	; 0x798c <mugui_lcd_putc+0xbe>
    798a:	43 c0       	rjmp	.+134    	; 0x7a12 <mugui_lcd_putc+0x144>
    798c:	c1 2c       	mov	r12, r1
    798e:	d1 2c       	mov	r13, r1
    7990:	e1 2c       	mov	r14, r1
    7992:	f1 2c       	mov	r15, r1
    7994:	94 01       	movw	r18, r8
    7996:	2a 0d       	add	r18, r10
    7998:	3b 1d       	adc	r19, r11
    799a:	3f 83       	std	Y+7, r19	; 0x07
    799c:	2e 83       	std	Y+6, r18	; 0x06
    799e:	5c 80       	ldd	r5, Y+4	; 0x04
    79a0:	50 0e       	add	r5, r16
	{
		ty = 0;
		/* For every byte */
		for(tb = 0; tb < bytes; tb ++)
    79a2:	c4 14       	cp	r12, r4
    79a4:	78 f5       	brcc	.+94     	; 0x7a04 <mugui_lcd_putc+0x136>
    79a6:	ee 81       	ldd	r30, Y+6	; 0x06
    79a8:	ff 81       	ldd	r31, Y+7	; 0x07
    79aa:	ec 0d       	add	r30, r12
    79ac:	fd 1d       	adc	r31, r13
		{
			/* Read bytes from program memory - ATMega specific */
			data = pgm_read_byte(&font[indexaddress + 1 + bytes*tx + tb]);
    79ae:	34 91       	lpm	r19, Z
    79b0:	3b 83       	std	Y+3, r19	; 0x03
    79b2:	19 86       	std	Y+9, r1	; 0x09
    79b4:	18 86       	std	Y+8, r1	; 0x08
			/* For every bit within the height */
			for(tc = 0;  ( (tc < 8) && (ty < height) ); tc ++)
    79b6:	e2 14       	cp	r14, r2
    79b8:	f3 04       	cpc	r15, r3
    79ba:	00 f5       	brcc	.+64     	; 0x79fc <mugui_lcd_putc+0x12e>
			{
					/* Determine the bit mask */
					mask = 1<<(tc);
    79bc:	81 e0       	ldi	r24, 0x01	; 1
    79be:	90 e0       	ldi	r25, 0x00	; 0
    79c0:	08 84       	ldd	r0, Y+8	; 0x08
    79c2:	02 c0       	rjmp	.+4      	; 0x79c8 <mugui_lcd_putc+0xfa>
    79c4:	88 0f       	add	r24, r24
    79c6:	99 1f       	adc	r25, r25
    79c8:	0a 94       	dec	r0
    79ca:	e2 f7       	brpl	.-8      	; 0x79c4 <mugui_lcd_putc+0xf6>
					bit = data & mask;
    79cc:	3b 81       	ldd	r19, Y+3	; 0x03
    79ce:	83 23       	and	r24, r19
    79d0:	4d 81       	ldd	r20, Y+5	; 0x05
    79d2:	4e 0d       	add	r20, r14
					if(bit)
    79d4:	88 23       	and	r24, r24
    79d6:	11 f0       	breq	.+4      	; 0x79dc <mugui_lcd_putc+0x10e>
					{
						setpixel(buffer,tx+x,ty+y,1);
    79d8:	21 e0       	ldi	r18, 0x01	; 1
    79da:	01 c0       	rjmp	.+2      	; 0x79de <mugui_lcd_putc+0x110>
					}
					else
					{
						setpixel(buffer,tx+x,ty+y,0);
    79dc:	20 e0       	ldi	r18, 0x00	; 0
    79de:	65 2d       	mov	r22, r5
    79e0:	81 e0       	ldi	r24, 0x01	; 1
    79e2:	91 e0       	ldi	r25, 0x01	; 1
    79e4:	0e 94 85 1f 	call	0x3f0a	; 0x3f0a <setpixel>
					}
					ty++;
    79e8:	8f ef       	ldi	r24, 0xFF	; 255
    79ea:	e8 1a       	sub	r14, r24
    79ec:	f8 0a       	sbc	r15, r24
    79ee:	a8 85       	ldd	r26, Y+8	; 0x08
    79f0:	b9 85       	ldd	r27, Y+9	; 0x09
    79f2:	11 96       	adiw	r26, 0x01	; 1
    79f4:	b9 87       	std	Y+9, r27	; 0x09
    79f6:	a8 87       	std	Y+8, r26	; 0x08
		for(tb = 0; tb < bytes; tb ++)
		{
			/* Read bytes from program memory - ATMega specific */
			data = pgm_read_byte(&font[indexaddress + 1 + bytes*tx + tb]);
			/* For every bit within the height */
			for(tc = 0;  ( (tc < 8) && (ty < height) ); tc ++)
    79f8:	18 97       	sbiw	r26, 0x08	; 8
    79fa:	e9 f6       	brne	.-70     	; 0x79b6 <mugui_lcd_putc+0xe8>
    79fc:	bf ef       	ldi	r27, 0xFF	; 255
    79fe:	cb 1a       	sub	r12, r27
    7a00:	db 0a       	sbc	r13, r27
    7a02:	cf cf       	rjmp	.-98     	; 0x79a2 <mugui_lcd_putc+0xd4>
	width = pgm_read_byte(&font[indexaddress]);

	/* Determine the number of bytes for given width */ 
	bytes = ((height-1)>>3)+1;
	/* For every column */
	for(tx= 0; tx < width; tx++) //for every row
    7a04:	0f 5f       	subi	r16, 0xFF	; 255
    7a06:	1f 4f       	sbci	r17, 0xFF	; 255
    7a08:	e9 81       	ldd	r30, Y+1	; 0x01
    7a0a:	fa 81       	ldd	r31, Y+2	; 0x02
    7a0c:	ae 0e       	add	r10, r30
    7a0e:	bf 1e       	adc	r11, r31
    7a10:	b9 cf       	rjmp	.-142    	; 0x7984 <mugui_lcd_putc+0xb6>
			}
		}
	}

	return width;
}
    7a12:	c3 01       	movw	r24, r6
    7a14:	29 96       	adiw	r28, 0x09	; 9
    7a16:	0f b6       	in	r0, 0x3f	; 63
    7a18:	f8 94       	cli
    7a1a:	de bf       	out	0x3e, r29	; 62
    7a1c:	0f be       	out	0x3f, r0	; 63
    7a1e:	cd bf       	out	0x3d, r28	; 61
    7a20:	df 91       	pop	r29
    7a22:	cf 91       	pop	r28
    7a24:	1f 91       	pop	r17
    7a26:	0f 91       	pop	r16
    7a28:	ff 90       	pop	r15
    7a2a:	ef 90       	pop	r14
    7a2c:	df 90       	pop	r13
    7a2e:	cf 90       	pop	r12
    7a30:	bf 90       	pop	r11
    7a32:	af 90       	pop	r10
    7a34:	9f 90       	pop	r9
    7a36:	8f 90       	pop	r8
    7a38:	7f 90       	pop	r7
    7a3a:	6f 90       	pop	r6
    7a3c:	5f 90       	pop	r5
    7a3e:	4f 90       	pop	r4
    7a40:	3f 90       	pop	r3
    7a42:	2f 90       	pop	r2
    7a44:	08 95       	ret

00007a46 <pgm_mugui_lcd_puts>:
	\date 	12.08.2009
	\Modified by D. Thompson 27/07/2012
*/
/************************************************************************/
void pgm_mugui_lcd_puts(const unsigned char* s, const unsigned char* font,mugui_uint16_t x, mugui_uint16_t y)
{
    7a46:	af 92       	push	r10
    7a48:	bf 92       	push	r11
    7a4a:	cf 92       	push	r12
    7a4c:	df 92       	push	r13
    7a4e:	ef 92       	push	r14
    7a50:	ff 92       	push	r15
    7a52:	0f 93       	push	r16
    7a54:	1f 93       	push	r17
    7a56:	cf 93       	push	r28
    7a58:	df 93       	push	r29
    7a5a:	ec 01       	movw	r28, r24
    7a5c:	7b 01       	movw	r14, r22
    7a5e:	6a 01       	movw	r12, r20
    7a60:	59 01       	movw	r10, r18
	mugui_uint8_t distance  = 1;			// Distance between characters
	mugui_uint16_t xpos     = 0;			// Relative xpos of character
    7a62:	00 e0       	ldi	r16, 0x00	; 0
    7a64:	10 e0       	ldi	r17, 0x00	; 0

	while(pgm_read_byte(s) != 0x00) 
    7a66:	ce 01       	movw	r24, r28
    7a68:	fe 01       	movw	r30, r28
    7a6a:	24 91       	lpm	r18, Z
    7a6c:	22 23       	and	r18, r18
    7a6e:	71 f0       	breq	.+28     	; 0x7a8c <pgm_mugui_lcd_puts+0x46>
	{
		xpos += mugui_lcd_putc(pgm_read_byte(s++), font, x + xpos, y) + distance;
    7a70:	21 96       	adiw	r28, 0x01	; 1
    7a72:	fc 01       	movw	r30, r24
    7a74:	84 91       	lpm	r24, Z
    7a76:	a8 01       	movw	r20, r16
    7a78:	4c 0d       	add	r20, r12
    7a7a:	5d 1d       	adc	r21, r13
    7a7c:	95 01       	movw	r18, r10
    7a7e:	b7 01       	movw	r22, r14
    7a80:	0e 94 67 3c 	call	0x78ce	; 0x78ce <mugui_lcd_putc>
    7a84:	01 96       	adiw	r24, 0x01	; 1
    7a86:	08 0f       	add	r16, r24
    7a88:	19 1f       	adc	r17, r25
    7a8a:	ed cf       	rjmp	.-38     	; 0x7a66 <pgm_mugui_lcd_puts+0x20>
	}
}
    7a8c:	df 91       	pop	r29
    7a8e:	cf 91       	pop	r28
    7a90:	1f 91       	pop	r17
    7a92:	0f 91       	pop	r16
    7a94:	ff 90       	pop	r15
    7a96:	ef 90       	pop	r14
    7a98:	df 90       	pop	r13
    7a9a:	cf 90       	pop	r12
    7a9c:	bf 90       	pop	r11
    7a9e:	af 90       	pop	r10
    7aa0:	08 95       	ret

00007aa2 <mugui_lcd_puts>:
	\return void
	\date 	12.08.2009
*/
/************************************************************************/
void mugui_lcd_puts(mugui_char_t *s, const unsigned char* font,mugui_uint16_t x, mugui_uint16_t y)
{
    7aa2:	8f 92       	push	r8
    7aa4:	9f 92       	push	r9
    7aa6:	af 92       	push	r10
    7aa8:	bf 92       	push	r11
    7aaa:	cf 92       	push	r12
    7aac:	df 92       	push	r13
    7aae:	ef 92       	push	r14
    7ab0:	ff 92       	push	r15
    7ab2:	0f 93       	push	r16
    7ab4:	1f 93       	push	r17
    7ab6:	cf 93       	push	r28
    7ab8:	df 93       	push	r29
    7aba:	6b 01       	movw	r12, r22
    7abc:	5a 01       	movw	r10, r20
    7abe:	49 01       	movw	r8, r18
	mugui_uint8_t distance  = 1;			//distance between characters
	mugui_uint16_t xpos     = 0;			//relativ xpos of character
	mugui_uint16_t length 	= 0;			//temporary length of string
	mugui_uint16_t i 		= 0;			//counter variable
	
	length = strlen(s);
    7ac0:	ec 01       	movw	r28, r24
    7ac2:	09 90       	ld	r0, Y+
    7ac4:	00 20       	and	r0, r0
    7ac6:	e9 f7       	brne	.-6      	; 0x7ac2 <mugui_lcd_puts+0x20>
    7ac8:	8c 01       	movw	r16, r24
    7aca:	21 97       	sbiw	r28, 0x01	; 1
*/
/************************************************************************/
void mugui_lcd_puts(mugui_char_t *s, const unsigned char* font,mugui_uint16_t x, mugui_uint16_t y)
{
	mugui_uint8_t distance  = 1;			//distance between characters
	mugui_uint16_t xpos     = 0;			//relativ xpos of character
    7acc:	e1 2c       	mov	r14, r1
    7ace:	f1 2c       	mov	r15, r1
	mugui_uint16_t length 	= 0;			//temporary length of string
	mugui_uint16_t i 		= 0;			//counter variable
	
	length = strlen(s);
	for(i=0; i<length; i++)
    7ad0:	0c 17       	cp	r16, r28
    7ad2:	1d 07       	cpc	r17, r29
    7ad4:	71 f0       	breq	.+28     	; 0x7af2 <mugui_lcd_puts+0x50>
	{
		xpos += mugui_lcd_putc(s[i], font, x + xpos, y) + distance;
    7ad6:	a7 01       	movw	r20, r14
    7ad8:	4a 0d       	add	r20, r10
    7ada:	5b 1d       	adc	r21, r11
    7adc:	94 01       	movw	r18, r8
    7ade:	b6 01       	movw	r22, r12
    7ae0:	f8 01       	movw	r30, r16
    7ae2:	81 91       	ld	r24, Z+
    7ae4:	8f 01       	movw	r16, r30
    7ae6:	0e 94 67 3c 	call	0x78ce	; 0x78ce <mugui_lcd_putc>
    7aea:	01 96       	adiw	r24, 0x01	; 1
    7aec:	e8 0e       	add	r14, r24
    7aee:	f9 1e       	adc	r15, r25
    7af0:	ef cf       	rjmp	.-34     	; 0x7ad0 <mugui_lcd_puts+0x2e>
	}
}
    7af2:	df 91       	pop	r29
    7af4:	cf 91       	pop	r28
    7af6:	1f 91       	pop	r17
    7af8:	0f 91       	pop	r16
    7afa:	ff 90       	pop	r15
    7afc:	ef 90       	pop	r14
    7afe:	df 90       	pop	r13
    7b00:	cf 90       	pop	r12
    7b02:	bf 90       	pop	r11
    7b04:	af 90       	pop	r10
    7b06:	9f 90       	pop	r9
    7b08:	8f 90       	pop	r8
    7b0a:	08 95       	ret

00007b0c <Sensor_PID>:
int32_t PID_AvgAccVert = 0;
float 	gyroSmooth[NUMBEROFAXIS];					// Filtered gyro data
	
// Run each loop to average gyro data and also accVert data
void Sensor_PID(void)
{
    7b0c:	2f 92       	push	r2
    7b0e:	3f 92       	push	r3
    7b10:	4f 92       	push	r4
    7b12:	5f 92       	push	r5
    7b14:	6f 92       	push	r6
    7b16:	7f 92       	push	r7
    7b18:	8f 92       	push	r8
    7b1a:	9f 92       	push	r9
    7b1c:	af 92       	push	r10
    7b1e:	bf 92       	push	r11
    7b20:	cf 92       	push	r12
    7b22:	df 92       	push	r13
    7b24:	ef 92       	push	r14
    7b26:	ff 92       	push	r15
    7b28:	0f 93       	push	r16
    7b2a:	1f 93       	push	r17
    7b2c:	cf 93       	push	r28
    7b2e:	df 93       	push	r29
    7b30:	cd b7       	in	r28, 0x3d	; 61
    7b32:	de b7       	in	r29, 0x3e	; 62
    7b34:	6d 97       	sbiw	r28, 0x1d	; 29
    7b36:	0f b6       	in	r0, 0x3f	; 63
    7b38:	f8 94       	cli
    7b3a:	de bf       	out	0x3e, r29	; 62
    7b3c:	0f be       	out	0x3f, r0	; 63
    7b3e:	cd bf       	out	0x3d, r28	; 61
	// RIGHT roll = +ve gyro, UP pitch = +ve gyro and LEFT yaw = +ve gyro.
	// However the way we have organised stick polarity, RIGHT roll and yaw are +ve, and DOWN elevator is too.
	// When combining with the gyro signals, the sticks have to be in the opposite polarity as the gyros.
	// As described above, pitch and yaw are already opposed, but roll needs to be reversed.

	int16_t	RCinputsAxis[NUMBEROFAXIS] = {-RCinputs[AILERON], RCinputs[ELEVATOR], RCinputs[RUDDER]};
    7b40:	80 91 2f 08 	lds	r24, 0x082F
    7b44:	90 91 30 08 	lds	r25, 0x0830
    7b48:	91 95       	neg	r25
    7b4a:	81 95       	neg	r24
    7b4c:	91 09       	sbc	r25, r1
    7b4e:	98 87       	std	Y+8, r25	; 0x08
    7b50:	8f 83       	std	Y+7, r24	; 0x07
    7b52:	80 91 31 08 	lds	r24, 0x0831
    7b56:	90 91 32 08 	lds	r25, 0x0832
    7b5a:	9a 87       	std	Y+10, r25	; 0x0a
    7b5c:	89 87       	std	Y+9, r24	; 0x09
    7b5e:	80 91 33 08 	lds	r24, 0x0833
    7b62:	90 91 34 08 	lds	r25, 0x0834
    7b66:	9c 87       	std	Y+12, r25	; 0x0c
    7b68:	8b 87       	std	Y+11, r24	; 0x0b
	
	int8_t Stick_rates[FLIGHT_MODES][NUMBEROFAXIS] =
    7b6a:	80 91 e8 05 	lds	r24, 0x05E8
    7b6e:	89 83       	std	Y+1, r24	; 0x01
    7b70:	80 91 ee 05 	lds	r24, 0x05EE
    7b74:	8a 83       	std	Y+2, r24	; 0x02
    7b76:	80 91 f4 05 	lds	r24, 0x05F4
    7b7a:	8b 83       	std	Y+3, r24	; 0x03
    7b7c:	80 91 fa 05 	lds	r24, 0x05FA
    7b80:	8c 83       	std	Y+4, r24	; 0x04
    7b82:	80 91 00 06 	lds	r24, 0x0600
    7b86:	8d 83       	std	Y+5, r24	; 0x05
    7b88:	80 91 06 06 	lds	r24, 0x0606
    7b8c:	8e 83       	std	Y+6, r24	; 0x06
		{Config.FlightMode[P1].Roll_Rate, Config.FlightMode[P1].Pitch_Rate, Config.FlightMode[P1].Yaw_Rate},
		{Config.FlightMode[P2].Roll_Rate, Config.FlightMode[P2].Pitch_Rate, Config.FlightMode[P2].Yaw_Rate}
	};
	
	// Gyro LPF scale
	tempf = pgm_read_byte(&LPF_lookup[Config.Gyro_LPF]); // Lookup actual LPF value and promote
    7b8e:	60 91 42 06 	lds	r22, 0x0642
    7b92:	e6 2f       	mov	r30, r22
    7b94:	ff 27       	eor	r31, r31
    7b96:	e7 fd       	sbrc	r30, 7
    7b98:	f0 95       	com	r31
    7b9a:	ed 52       	subi	r30, 0x2D	; 45
    7b9c:	f8 4e       	sbci	r31, 0xE8	; 232
    7b9e:	64 91       	lpm	r22, Z
    7ba0:	70 e0       	ldi	r23, 0x00	; 0
    7ba2:	80 e0       	ldi	r24, 0x00	; 0
    7ba4:	90 e0       	ldi	r25, 0x00	; 0
    7ba6:	0e 94 d9 45 	call	0x8bb2	; 0x8bb2 <__floatunsisf>
    7baa:	6b 01       	movw	r12, r22
    7bac:	7c 01       	movw	r14, r24
    7bae:	81 e7       	ldi	r24, 0x71	; 113
    7bb0:	a8 2e       	mov	r10, r24
    7bb2:	85 e0       	ldi	r24, 0x05	; 5
    7bb4:	b8 2e       	mov	r11, r24
    7bb6:	97 e0       	ldi	r25, 0x07	; 7
    7bb8:	89 2e       	mov	r8, r25
    7bba:	98 e0       	ldi	r25, 0x08	; 8
    7bbc:	99 2e       	mov	r9, r25
    7bbe:	0f ee       	ldi	r16, 0xEF	; 239
    7bc0:	17 e0       	ldi	r17, 0x07	; 7
    7bc2:	2d e2       	ldi	r18, 0x2D	; 45
    7bc4:	36 e0       	ldi	r19, 0x06	; 6
    7bc6:	3b 8b       	std	Y+19, r19	; 0x13
    7bc8:	2a 8b       	std	Y+18, r18	; 0x12
    7bca:	ae 01       	movw	r20, r28
    7bcc:	49 5f       	subi	r20, 0xF9	; 249
    7bce:	5f 4f       	sbci	r21, 0xFF	; 255
    7bd0:	5d 8b       	std	Y+21, r21	; 0x15
    7bd2:	4c 8b       	std	Y+20, r20	; 0x14
    7bd4:	be 01       	movw	r22, r28
    7bd6:	6f 5f       	subi	r22, 0xFF	; 255
    7bd8:	7f 4f       	sbci	r23, 0xFF	; 255
    7bda:	7f 8b       	std	Y+23, r23	; 0x17
    7bdc:	6e 8b       	std	Y+22, r22	; 0x16
    7bde:	ce 01       	movw	r24, r28
    7be0:	04 96       	adiw	r24, 0x04	; 4
    7be2:	99 8b       	std	Y+17, r25	; 0x11
    7be4:	88 8b       	std	Y+16, r24	; 0x10
    7be6:	a1 e2       	ldi	r26, 0x21	; 33
    7be8:	b6 e0       	ldi	r27, 0x06	; 6
    7bea:	bf 87       	std	Y+15, r27	; 0x0f
    7bec:	ae 87       	std	Y+14, r26	; 0x0e
	
	for (axis = 0; axis <= YAW; axis ++)
    7bee:	1d 86       	std	Y+13, r1	; 0x0d
			gyroADC[axis] = 0;
		}
		
		// Work out stick rate divider. 0 is slowest, 4 is fastest.
		// /64 (15.25), /32 (30.5), /16 (61*), /8 (122), /4 (244)
		stick_P1 = RCinputsAxis[axis] >> (4 - (Stick_rates[P1][axis] - 2));
    7bf0:	26 e0       	ldi	r18, 0x06	; 6
    7bf2:	62 2e       	mov	r6, r18
    7bf4:	71 2c       	mov	r7, r1
		//************************************************************
		// Increment and limit gyro I-terms, handle heading hold nicely
		//************************************************************

		// Reduce Gyro drift noise before adding into I-term
		if ((gyroADC[axis] > -GYRO_DEADBAND) && (gyroADC[axis] < GYRO_DEADBAND)) 
    7bf6:	f5 01       	movw	r30, r10
    7bf8:	80 81       	ld	r24, Z
    7bfa:	91 81       	ldd	r25, Z+1	; 0x01
    7bfc:	04 96       	adiw	r24, 0x04	; 4
    7bfe:	09 97       	sbiw	r24, 0x09	; 9
    7c00:	10 f4       	brcc	.+4      	; 0x7c06 <Sensor_PID+0xfa>
		{
			gyroADC[axis] = 0;
    7c02:	11 82       	std	Z+1, r1	; 0x01
    7c04:	10 82       	st	Z, r1
		}
		
		// Work out stick rate divider. 0 is slowest, 4 is fastest.
		// /64 (15.25), /32 (30.5), /16 (61*), /8 (122), /4 (244)
		stick_P1 = RCinputsAxis[axis] >> (4 - (Stick_rates[P1][axis] - 2));
    7c06:	ac 89       	ldd	r26, Y+20	; 0x14
    7c08:	bd 89       	ldd	r27, Y+21	; 0x15
    7c0a:	2d 91       	ld	r18, X+
    7c0c:	3d 91       	ld	r19, X+
    7c0e:	bd 8b       	std	Y+21, r27	; 0x15
    7c10:	ac 8b       	std	Y+20, r26	; 0x14
    7c12:	ee 89       	ldd	r30, Y+22	; 0x16
    7c14:	ff 89       	ldd	r31, Y+23	; 0x17
    7c16:	41 91       	ld	r20, Z+
    7c18:	ff 8b       	std	Y+23, r31	; 0x17
    7c1a:	ee 8b       	std	Y+22, r30	; 0x16
		stick_P2 = RCinputsAxis[axis] >> (4 - (Stick_rates[P2][axis] - 2));
    7c1c:	a8 89       	ldd	r26, Y+16	; 0x10
    7c1e:	b9 89       	ldd	r27, Y+17	; 0x11
    7c20:	ed 91       	ld	r30, X+
    7c22:	b9 8b       	std	Y+17, r27	; 0x11
    7c24:	a8 8b       	std	Y+16, r26	; 0x10

		// Calculate I-term from gyro and stick data 
		// These may look similar, but they are constrained quite differently.
		IntegralGyro[P1][axis] += (gyroADC[axis] + stick_P1);
    7c26:	d5 01       	movw	r26, r10
    7c28:	0d 90       	ld	r0, X+
    7c2a:	bc 91       	ld	r27, X
    7c2c:	a0 2d       	mov	r26, r0
    7c2e:	bd 8f       	std	Y+29, r27	; 0x1d
    7c30:	ac 8f       	std	Y+28, r26	; 0x1c
			gyroADC[axis] = 0;
		}
		
		// Work out stick rate divider. 0 is slowest, 4 is fastest.
		// /64 (15.25), /32 (30.5), /16 (61*), /8 (122), /4 (244)
		stick_P1 = RCinputsAxis[axis] >> (4 - (Stick_rates[P1][axis] - 2));
    7c32:	b3 01       	movw	r22, r6
    7c34:	64 1b       	sub	r22, r20
    7c36:	71 09       	sbc	r23, r1
    7c38:	47 fd       	sbrc	r20, 7
    7c3a:	73 95       	inc	r23
    7c3c:	c9 01       	movw	r24, r18
    7c3e:	02 c0       	rjmp	.+4      	; 0x7c44 <Sensor_PID+0x138>
    7c40:	95 95       	asr	r25
    7c42:	87 95       	ror	r24
    7c44:	6a 95       	dec	r22
    7c46:	e2 f7       	brpl	.-8      	; 0x7c40 <Sensor_PID+0x134>
    7c48:	ac 01       	movw	r20, r24
		stick_P2 = RCinputsAxis[axis] >> (4 - (Stick_rates[P2][axis] - 2));

		// Calculate I-term from gyro and stick data 
		// These may look similar, but they are constrained quite differently.
		IntegralGyro[P1][axis] += (gyroADC[axis] + stick_P1);
    7c4a:	4a 0f       	add	r20, r26
    7c4c:	5b 1f       	adc	r21, r27
    7c4e:	66 27       	eor	r22, r22
    7c50:	57 fd       	sbrc	r21, 7
    7c52:	60 95       	com	r22
    7c54:	76 2f       	mov	r23, r22
    7c56:	d8 01       	movw	r26, r16
    7c58:	2d 90       	ld	r2, X+
    7c5a:	3d 90       	ld	r3, X+
    7c5c:	4d 90       	ld	r4, X+
    7c5e:	5c 90       	ld	r5, X
    7c60:	13 97       	sbiw	r26, 0x03	; 3
    7c62:	24 0e       	add	r2, r20
    7c64:	35 1e       	adc	r3, r21
    7c66:	46 1e       	adc	r4, r22
    7c68:	57 1e       	adc	r5, r23
    7c6a:	2d 92       	st	X+, r2
    7c6c:	3d 92       	st	X+, r3
    7c6e:	4d 92       	st	X+, r4
    7c70:	5c 92       	st	X, r5
    7c72:	13 97       	sbiw	r26, 0x03	; 3
		}
		
		// Work out stick rate divider. 0 is slowest, 4 is fastest.
		// /64 (15.25), /32 (30.5), /16 (61*), /8 (122), /4 (244)
		stick_P1 = RCinputsAxis[axis] >> (4 - (Stick_rates[P1][axis] - 2));
		stick_P2 = RCinputsAxis[axis] >> (4 - (Stick_rates[P2][axis] - 2));
    7c74:	a3 01       	movw	r20, r6
    7c76:	4e 1b       	sub	r20, r30
    7c78:	51 09       	sbc	r21, r1
    7c7a:	e7 fd       	sbrc	r30, 7
    7c7c:	53 95       	inc	r21
    7c7e:	02 c0       	rjmp	.+4      	; 0x7c84 <Sensor_PID+0x178>
    7c80:	35 95       	asr	r19
    7c82:	27 95       	ror	r18
    7c84:	4a 95       	dec	r20
    7c86:	e2 f7       	brpl	.-8      	; 0x7c80 <Sensor_PID+0x174>

		// Calculate I-term from gyro and stick data 
		// These may look similar, but they are constrained quite differently.
		IntegralGyro[P1][axis] += (gyroADC[axis] + stick_P1);
		IntegralGyro[P2][axis] += (gyroADC[axis] + stick_P2);
    7c88:	ec 8d       	ldd	r30, Y+28	; 0x1c
    7c8a:	fd 8d       	ldd	r31, Y+29	; 0x1d
    7c8c:	2e 0f       	add	r18, r30
    7c8e:	3f 1f       	adc	r19, r31
    7c90:	a9 01       	movw	r20, r18
    7c92:	66 27       	eor	r22, r22
    7c94:	57 fd       	sbrc	r21, 7
    7c96:	60 95       	com	r22
    7c98:	76 2f       	mov	r23, r22
    7c9a:	48 8f       	std	Y+24, r20	; 0x18
    7c9c:	59 8f       	std	Y+25, r21	; 0x19
    7c9e:	6a 8f       	std	Y+26, r22	; 0x1a
    7ca0:	7b 8f       	std	Y+27, r23	; 0x1b
    7ca2:	1c 96       	adiw	r26, 0x0c	; 12
    7ca4:	4d 91       	ld	r20, X+
    7ca6:	5d 91       	ld	r21, X+
    7ca8:	6d 91       	ld	r22, X+
    7caa:	7c 91       	ld	r23, X
    7cac:	1f 97       	sbiw	r26, 0x0f	; 15
    7cae:	88 8d       	ldd	r24, Y+24	; 0x18
    7cb0:	99 8d       	ldd	r25, Y+25	; 0x19
    7cb2:	aa 8d       	ldd	r26, Y+26	; 0x1a
    7cb4:	bb 8d       	ldd	r27, Y+27	; 0x1b
    7cb6:	48 0f       	add	r20, r24
    7cb8:	59 1f       	adc	r21, r25
    7cba:	6a 1f       	adc	r22, r26
    7cbc:	7b 1f       	adc	r23, r27
    7cbe:	d8 01       	movw	r26, r16
    7cc0:	1c 96       	adiw	r26, 0x0c	; 12
    7cc2:	4d 93       	st	X+, r20
    7cc4:	5d 93       	st	X+, r21
    7cc6:	6d 93       	st	X+, r22
    7cc8:	7c 93       	st	X, r23
    7cca:	1f 97       	sbiw	r26, 0x0f	; 15

		// Limit the I-terms to the user-set limits
		for (i = P1; i <= P2; i++)
		{
			if (IntegralGyro[i][axis] > Config.Raw_I_Constrain[i][axis])
    7ccc:	ee 85       	ldd	r30, Y+14	; 0x0e
    7cce:	ff 85       	ldd	r31, Y+15	; 0x0f
    7cd0:	41 91       	ld	r20, Z+
    7cd2:	51 91       	ld	r21, Z+
    7cd4:	61 91       	ld	r22, Z+
    7cd6:	71 91       	ld	r23, Z+
    7cd8:	ff 87       	std	Y+15, r31	; 0x0f
    7cda:	ee 87       	std	Y+14, r30	; 0x0e
    7cdc:	42 15       	cp	r20, r2
    7cde:	53 05       	cpc	r21, r3
    7ce0:	64 05       	cpc	r22, r4
    7ce2:	75 05       	cpc	r23, r5
    7ce4:	2c f4       	brge	.+10     	; 0x7cf0 <Sensor_PID+0x1e4>
			{
				IntegralGyro[i][axis] = Config.Raw_I_Constrain[i][axis];
    7ce6:	4d 93       	st	X+, r20
    7ce8:	5d 93       	st	X+, r21
    7cea:	6d 93       	st	X+, r22
    7cec:	7c 93       	st	X, r23
    7cee:	13 97       	sbiw	r26, 0x03	; 3
			}
			if (IntegralGyro[i][axis] < -Config.Raw_I_Constrain[i][axis])
    7cf0:	70 95       	com	r23
    7cf2:	60 95       	com	r22
    7cf4:	50 95       	com	r21
    7cf6:	41 95       	neg	r20
    7cf8:	5f 4f       	sbci	r21, 0xFF	; 255
    7cfa:	6f 4f       	sbci	r22, 0xFF	; 255
    7cfc:	7f 4f       	sbci	r23, 0xFF	; 255
    7cfe:	f8 01       	movw	r30, r16
    7d00:	20 80       	ld	r2, Z
    7d02:	31 80       	ldd	r3, Z+1	; 0x01
    7d04:	42 80       	ldd	r4, Z+2	; 0x02
    7d06:	53 80       	ldd	r5, Z+3	; 0x03
    7d08:	24 16       	cp	r2, r20
    7d0a:	35 06       	cpc	r3, r21
    7d0c:	46 06       	cpc	r4, r22
    7d0e:	57 06       	cpc	r5, r23
    7d10:	24 f4       	brge	.+8      	; 0x7d1a <Sensor_PID+0x20e>
			{
				IntegralGyro[i][axis] = -Config.Raw_I_Constrain[i][axis];
    7d12:	40 83       	st	Z, r20
    7d14:	51 83       	std	Z+1, r21	; 0x01
    7d16:	62 83       	std	Z+2, r22	; 0x02
    7d18:	73 83       	std	Z+3, r23	; 0x03
		IntegralGyro[P2][axis] += (gyroADC[axis] + stick_P2);

		// Limit the I-terms to the user-set limits
		for (i = P1; i <= P2; i++)
		{
			if (IntegralGyro[i][axis] > Config.Raw_I_Constrain[i][axis])
    7d1a:	ea 89       	ldd	r30, Y+18	; 0x12
    7d1c:	fb 89       	ldd	r31, Y+19	; 0x13
    7d1e:	41 91       	ld	r20, Z+
    7d20:	51 91       	ld	r21, Z+
    7d22:	61 91       	ld	r22, Z+
    7d24:	71 91       	ld	r23, Z+
    7d26:	fb 8b       	std	Y+19, r31	; 0x13
    7d28:	ea 8b       	std	Y+18, r30	; 0x12
    7d2a:	d8 01       	movw	r26, r16
    7d2c:	1c 96       	adiw	r26, 0x0c	; 12
    7d2e:	2d 90       	ld	r2, X+
    7d30:	3d 90       	ld	r3, X+
    7d32:	4d 90       	ld	r4, X+
    7d34:	5c 90       	ld	r5, X
    7d36:	1f 97       	sbiw	r26, 0x0f	; 15
    7d38:	42 15       	cp	r20, r2
    7d3a:	53 05       	cpc	r21, r3
    7d3c:	64 05       	cpc	r22, r4
    7d3e:	75 05       	cpc	r23, r5
    7d40:	2c f4       	brge	.+10     	; 0x7d4c <Sensor_PID+0x240>
			{
				IntegralGyro[i][axis] = Config.Raw_I_Constrain[i][axis];
    7d42:	f8 01       	movw	r30, r16
    7d44:	44 87       	std	Z+12, r20	; 0x0c
    7d46:	55 87       	std	Z+13, r21	; 0x0d
    7d48:	66 87       	std	Z+14, r22	; 0x0e
    7d4a:	77 87       	std	Z+15, r23	; 0x0f
			}
			if (IntegralGyro[i][axis] < -Config.Raw_I_Constrain[i][axis])
    7d4c:	70 95       	com	r23
    7d4e:	60 95       	com	r22
    7d50:	50 95       	com	r21
    7d52:	41 95       	neg	r20
    7d54:	5f 4f       	sbci	r21, 0xFF	; 255
    7d56:	6f 4f       	sbci	r22, 0xFF	; 255
    7d58:	7f 4f       	sbci	r23, 0xFF	; 255
    7d5a:	d8 01       	movw	r26, r16
    7d5c:	1c 96       	adiw	r26, 0x0c	; 12
    7d5e:	2d 90       	ld	r2, X+
    7d60:	3d 90       	ld	r3, X+
    7d62:	4d 90       	ld	r4, X+
    7d64:	5c 90       	ld	r5, X
    7d66:	1f 97       	sbiw	r26, 0x0f	; 15
    7d68:	24 16       	cp	r2, r20
    7d6a:	35 06       	cpc	r3, r21
    7d6c:	46 06       	cpc	r4, r22
    7d6e:	57 06       	cpc	r5, r23
    7d70:	2c f4       	brge	.+10     	; 0x7d7c <Sensor_PID+0x270>
			{
				IntegralGyro[i][axis] = -Config.Raw_I_Constrain[i][axis];
    7d72:	f8 01       	movw	r30, r16
    7d74:	44 87       	std	Z+12, r20	; 0x0c
    7d76:	55 87       	std	Z+13, r21	; 0x0d
    7d78:	66 87       	std	Z+14, r22	; 0x0e
    7d7a:	77 87       	std	Z+15, r23	; 0x0f

		//************************************************************
		// Gyro LPF
		//************************************************************	
			
		gyroADCf = gyroADC[axis]; // Promote
    7d7c:	2c 8d       	ldd	r18, Y+28	; 0x1c
    7d7e:	3d 8d       	ldd	r19, Y+29	; 0x1d
    7d80:	b9 01       	movw	r22, r18
    7d82:	88 27       	eor	r24, r24
    7d84:	77 fd       	sbrc	r23, 7
    7d86:	80 95       	com	r24
    7d88:	98 2f       	mov	r25, r24
    7d8a:	0e 94 db 45 	call	0x8bb6	; 0x8bb6 <__floatsisf>
    7d8e:	1b 01       	movw	r2, r22
    7d90:	2c 01       	movw	r4, r24

		if (tempf > 1)
    7d92:	20 e0       	ldi	r18, 0x00	; 0
    7d94:	30 e0       	ldi	r19, 0x00	; 0
    7d96:	40 e8       	ldi	r20, 0x80	; 128
    7d98:	5f e3       	ldi	r21, 0x3F	; 63
    7d9a:	c7 01       	movw	r24, r14
    7d9c:	b6 01       	movw	r22, r12
    7d9e:	0e 94 8b 46 	call	0x8d16	; 0x8d16 <__gesf2>
    7da2:	18 16       	cp	r1, r24
    7da4:	ec f4       	brge	.+58     	; 0x7de0 <Sensor_PID+0x2d4>
		{
			// Gyro LPF
			gyroSmooth[axis] = (gyroSmooth[axis] * (tempf - 1.0f) + gyroADCf) / tempf;
    7da6:	20 e0       	ldi	r18, 0x00	; 0
    7da8:	30 e0       	ldi	r19, 0x00	; 0
    7daa:	40 e8       	ldi	r20, 0x80	; 128
    7dac:	5f e3       	ldi	r21, 0x3F	; 63
    7dae:	c7 01       	movw	r24, r14
    7db0:	b6 01       	movw	r22, r12
    7db2:	0e 94 d7 44 	call	0x89ae	; 0x89ae <__subsf3>
    7db6:	d4 01       	movw	r26, r8
    7db8:	2d 91       	ld	r18, X+
    7dba:	3d 91       	ld	r19, X+
    7dbc:	4d 91       	ld	r20, X+
    7dbe:	5c 91       	ld	r21, X
    7dc0:	0e 94 8f 46 	call	0x8d1e	; 0x8d1e <__mulsf3>
    7dc4:	a2 01       	movw	r20, r4
    7dc6:	91 01       	movw	r18, r2
    7dc8:	0e 94 d8 44 	call	0x89b0	; 0x89b0 <__addsf3>
    7dcc:	a7 01       	movw	r20, r14
    7dce:	96 01       	movw	r18, r12
    7dd0:	0e 94 40 45 	call	0x8a80	; 0x8a80 <__divsf3>
    7dd4:	f4 01       	movw	r30, r8
    7dd6:	60 83       	st	Z, r22
    7dd8:	71 83       	std	Z+1, r23	; 0x01
    7dda:	82 83       	std	Z+2, r24	; 0x02
    7ddc:	93 83       	std	Z+3, r25	; 0x03
    7dde:	06 c0       	rjmp	.+12     	; 0x7dec <Sensor_PID+0x2e0>
		}
		else
		{
			// Use raw gyroADC[axis] as source for gyro values
			gyroSmooth[axis] =  gyroADCf;
    7de0:	d4 01       	movw	r26, r8
    7de2:	2d 92       	st	X+, r2
    7de4:	3d 92       	st	X+, r3
    7de6:	4d 92       	st	X+, r4
    7de8:	5c 92       	st	X, r5
    7dea:	13 97       	sbiw	r26, 0x03	; 3
		}		
		
		// Demote back to int16_t
		gyroADC[axis] = (int16_t)gyroSmooth[axis];		
    7dec:	f4 01       	movw	r30, r8
    7dee:	61 91       	ld	r22, Z+
    7df0:	71 91       	ld	r23, Z+
    7df2:	81 91       	ld	r24, Z+
    7df4:	91 91       	ld	r25, Z+
    7df6:	4f 01       	movw	r8, r30
    7df8:	0e 94 a8 45 	call	0x8b50	; 0x8b50 <__fixsfsi>
    7dfc:	d5 01       	movw	r26, r10
    7dfe:	6d 93       	st	X+, r22
    7e00:	7d 93       	st	X+, r23
    7e02:	5d 01       	movw	r10, r26
    7e04:	bd 85       	ldd	r27, Y+13	; 0x0d
    7e06:	bf 5f       	subi	r27, 0xFF	; 255
    7e08:	bd 87       	std	Y+13, r27	; 0x0d
    7e0a:	0c 5f       	subi	r16, 0xFC	; 252
    7e0c:	1f 4f       	sbci	r17, 0xFF	; 255
	};
	
	// Gyro LPF scale
	tempf = pgm_read_byte(&LPF_lookup[Config.Gyro_LPF]); // Lookup actual LPF value and promote
	
	for (axis = 0; axis <= YAW; axis ++)
    7e0e:	b3 30       	cpi	r27, 0x03	; 3
    7e10:	09 f0       	breq	.+2      	; 0x7e14 <Sensor_PID+0x308>
    7e12:	f1 ce       	rjmp	.-542    	; 0x7bf6 <Sensor_PID+0xea>
		// Demote back to int16_t
		gyroADC[axis] = (int16_t)gyroSmooth[axis];		
	}
	
	// Average accVert prior to Calculate_PID()
	PID_AvgAccVert += accVert;
    7e14:	40 91 0e 05 	lds	r20, 0x050E
    7e18:	50 91 0f 05 	lds	r21, 0x050F
    7e1c:	66 27       	eor	r22, r22
    7e1e:	57 fd       	sbrc	r21, 7
    7e20:	60 95       	com	r22
    7e22:	76 2f       	mov	r23, r22
    7e24:	80 91 38 05 	lds	r24, 0x0538
    7e28:	90 91 39 05 	lds	r25, 0x0539
    7e2c:	a0 91 3a 05 	lds	r26, 0x053A
    7e30:	b0 91 3b 05 	lds	r27, 0x053B
    7e34:	84 0f       	add	r24, r20
    7e36:	95 1f       	adc	r25, r21
    7e38:	a6 1f       	adc	r26, r22
    7e3a:	b7 1f       	adc	r27, r23
    7e3c:	80 93 38 05 	sts	0x0538, r24
    7e40:	90 93 39 05 	sts	0x0539, r25
    7e44:	a0 93 3a 05 	sts	0x053A, r26
    7e48:	b0 93 3b 05 	sts	0x053B, r27
			
}
    7e4c:	6d 96       	adiw	r28, 0x1d	; 29
    7e4e:	0f b6       	in	r0, 0x3f	; 63
    7e50:	f8 94       	cli
    7e52:	de bf       	out	0x3e, r29	; 62
    7e54:	0f be       	out	0x3f, r0	; 63
    7e56:	cd bf       	out	0x3d, r28	; 61
    7e58:	df 91       	pop	r29
    7e5a:	cf 91       	pop	r28
    7e5c:	1f 91       	pop	r17
    7e5e:	0f 91       	pop	r16
    7e60:	ff 90       	pop	r15
    7e62:	ef 90       	pop	r14
    7e64:	df 90       	pop	r13
    7e66:	cf 90       	pop	r12
    7e68:	bf 90       	pop	r11
    7e6a:	af 90       	pop	r10
    7e6c:	9f 90       	pop	r9
    7e6e:	8f 90       	pop	r8
    7e70:	7f 90       	pop	r7
    7e72:	6f 90       	pop	r6
    7e74:	5f 90       	pop	r5
    7e76:	4f 90       	pop	r4
    7e78:	3f 90       	pop	r3
    7e7a:	2f 90       	pop	r2
    7e7c:	08 95       	ret

00007e7e <Calculate_PID>:

// Run just before PWM output, using averaged data
void Calculate_PID(void)
{
    7e7e:	2f 92       	push	r2
    7e80:	3f 92       	push	r3
    7e82:	4f 92       	push	r4
    7e84:	5f 92       	push	r5
    7e86:	6f 92       	push	r6
    7e88:	7f 92       	push	r7
    7e8a:	8f 92       	push	r8
    7e8c:	9f 92       	push	r9
    7e8e:	af 92       	push	r10
    7e90:	bf 92       	push	r11
    7e92:	cf 92       	push	r12
    7e94:	df 92       	push	r13
    7e96:	ef 92       	push	r14
    7e98:	ff 92       	push	r15
    7e9a:	0f 93       	push	r16
    7e9c:	1f 93       	push	r17
    7e9e:	cf 93       	push	r28
    7ea0:	df 93       	push	r29
    7ea2:	cd b7       	in	r28, 0x3d	; 61
    7ea4:	de b7       	in	r29, 0x3e	; 62
    7ea6:	ca 54       	subi	r28, 0x4A	; 74
    7ea8:	d1 09       	sbc	r29, r1
    7eaa:	0f b6       	in	r0, 0x3f	; 63
    7eac:	f8 94       	cli
    7eae:	de bf       	out	0x3e, r29	; 62
    7eb0:	0f be       	out	0x3f, r0	; 63
    7eb2:	cd bf       	out	0x3d, r28	; 61
	int16_t AvAccVert = 0;
	int8_t	axis = 0;
	int8_t i = 0;

	// Initialise arrays with gain values.
	int8_t 	P_gain[FLIGHT_MODES][NUMBEROFAXIS] = 
    7eb4:	80 91 e5 05 	lds	r24, 0x05E5
    7eb8:	8d 8b       	std	Y+21, r24	; 0x15
    7eba:	80 91 eb 05 	lds	r24, 0x05EB
    7ebe:	8e 8b       	std	Y+22, r24	; 0x16
    7ec0:	80 91 f1 05 	lds	r24, 0x05F1
    7ec4:	8f 8b       	std	Y+23, r24	; 0x17
    7ec6:	80 91 f7 05 	lds	r24, 0x05F7
    7eca:	88 8f       	std	Y+24, r24	; 0x18
    7ecc:	80 91 fd 05 	lds	r24, 0x05FD
    7ed0:	89 8f       	std	Y+25, r24	; 0x19
    7ed2:	80 91 03 06 	lds	r24, 0x0603
    7ed6:	8a 8f       	std	Y+26, r24	; 0x1a
		{
			{Config.FlightMode[P1].Roll_P_mult, Config.FlightMode[P1].Pitch_P_mult, Config.FlightMode[P1].Yaw_P_mult},
		 	{Config.FlightMode[P2].Roll_P_mult, Config.FlightMode[P2].Pitch_P_mult, Config.FlightMode[P2].Yaw_P_mult}
		};

	int8_t 	I_gain[FLIGHT_MODES][NUMBEROFAXIS] = 
    7ed8:	80 91 e6 05 	lds	r24, 0x05E6
    7edc:	8f 87       	std	Y+15, r24	; 0x0f
    7ede:	80 91 ec 05 	lds	r24, 0x05EC
    7ee2:	88 8b       	std	Y+16, r24	; 0x10
    7ee4:	80 91 f2 05 	lds	r24, 0x05F2
    7ee8:	89 8b       	std	Y+17, r24	; 0x11
    7eea:	80 91 f8 05 	lds	r24, 0x05F8
    7eee:	8a 8b       	std	Y+18, r24	; 0x12
    7ef0:	80 91 fe 05 	lds	r24, 0x05FE
    7ef4:	8b 8b       	std	Y+19, r24	; 0x13
    7ef6:	80 91 04 06 	lds	r24, 0x0604
    7efa:	8c 8b       	std	Y+20, r24	; 0x14
		{
			{Config.FlightMode[P1].Roll_I_mult, Config.FlightMode[P1].Pitch_I_mult, Config.FlightMode[P1].Yaw_I_mult},
			{Config.FlightMode[P2].Roll_I_mult, Config.FlightMode[P2].Pitch_I_mult, Config.FlightMode[P2].Yaw_I_mult}
		};

	int8_t 	L_gain[FLIGHT_MODES][NUMBEROFAXIS] = 
    7efc:	80 91 e9 05 	lds	r24, 0x05E9
    7f00:	89 87       	std	Y+9, r24	; 0x09
    7f02:	80 91 ef 05 	lds	r24, 0x05EF
    7f06:	8a 87       	std	Y+10, r24	; 0x0a
		{
			{Config.FlightMode[P1].A_Roll_P_mult, Config.FlightMode[P1].A_Pitch_P_mult, Config.FlightMode[P1].A_Zed_P_mult},
    7f08:	20 91 f6 05 	lds	r18, 0x05F6
    7f0c:	29 a7       	std	Y+41, r18	; 0x29
		{
			{Config.FlightMode[P1].Roll_I_mult, Config.FlightMode[P1].Pitch_I_mult, Config.FlightMode[P1].Yaw_I_mult},
			{Config.FlightMode[P2].Roll_I_mult, Config.FlightMode[P2].Pitch_I_mult, Config.FlightMode[P2].Yaw_I_mult}
		};

	int8_t 	L_gain[FLIGHT_MODES][NUMBEROFAXIS] = 
    7f0e:	2b 87       	std	Y+11, r18	; 0x0b
    7f10:	80 91 fb 05 	lds	r24, 0x05FB
    7f14:	8c 87       	std	Y+12, r24	; 0x0c
    7f16:	80 91 01 06 	lds	r24, 0x0601
    7f1a:	8d 87       	std	Y+13, r24	; 0x0d
		{
			{Config.FlightMode[P1].A_Roll_P_mult, Config.FlightMode[P1].A_Pitch_P_mult, Config.FlightMode[P1].A_Zed_P_mult},
			{Config.FlightMode[P2].A_Roll_P_mult, Config.FlightMode[P2].A_Pitch_P_mult, Config.FlightMode[P2].A_Zed_P_mult}
    7f1c:	30 91 08 06 	lds	r19, 0x0608
    7f20:	3a a7       	std	Y+42, r19	; 0x2a
		{
			{Config.FlightMode[P1].Roll_I_mult, Config.FlightMode[P1].Pitch_I_mult, Config.FlightMode[P1].Yaw_I_mult},
			{Config.FlightMode[P2].Roll_I_mult, Config.FlightMode[P2].Pitch_I_mult, Config.FlightMode[P2].Yaw_I_mult}
		};

	int8_t 	L_gain[FLIGHT_MODES][NUMBEROFAXIS] = 
    7f22:	3e 87       	std	Y+14, r19	; 0x0e
			{Config.FlightMode[P1].A_Roll_P_mult, Config.FlightMode[P1].A_Pitch_P_mult, Config.FlightMode[P1].A_Zed_P_mult},
			{Config.FlightMode[P2].A_Roll_P_mult, Config.FlightMode[P2].A_Pitch_P_mult, Config.FlightMode[P2].A_Zed_P_mult}
		};

	// Only for roll and pitch acc trim
	int16_t	L_trim[FLIGHT_MODES][2] =
    7f24:	80 91 b2 07 	lds	r24, 0x07B2
    7f28:	90 91 b3 07 	lds	r25, 0x07B3
    7f2c:	9a 83       	std	Y+2, r25	; 0x02
    7f2e:	89 83       	std	Y+1, r24	; 0x01
    7f30:	80 91 b6 07 	lds	r24, 0x07B6
    7f34:	90 91 b7 07 	lds	r25, 0x07B7
    7f38:	9c 83       	std	Y+4, r25	; 0x04
    7f3a:	8b 83       	std	Y+3, r24	; 0x03
    7f3c:	80 91 b4 07 	lds	r24, 0x07B4
    7f40:	90 91 b5 07 	lds	r25, 0x07B5
    7f44:	9e 83       	std	Y+6, r25	; 0x06
    7f46:	8d 83       	std	Y+5, r24	; 0x05
    7f48:	80 91 b8 07 	lds	r24, 0x07B8
    7f4c:	90 91 b9 07 	lds	r25, 0x07B9
    7f50:	98 87       	std	Y+8, r25	; 0x08
    7f52:	8f 83       	std	Y+7, r24	; 0x07
			{Config.Rolltrim[P1], Config.Pitchtrim[P1]},
			{Config.Rolltrim[P2], Config.Pitchtrim[P2]}
		};

	// Average accVert
	AvAccVert = (int16_t)(PID_AvgAccVert / LoopCount);
    7f54:	20 91 18 05 	lds	r18, 0x0518
    7f58:	30 e0       	ldi	r19, 0x00	; 0
    7f5a:	40 e0       	ldi	r20, 0x00	; 0
    7f5c:	50 e0       	ldi	r21, 0x00	; 0
    7f5e:	60 91 38 05 	lds	r22, 0x0538
    7f62:	70 91 39 05 	lds	r23, 0x0539
    7f66:	80 91 3a 05 	lds	r24, 0x053A
    7f6a:	90 91 3b 05 	lds	r25, 0x053B
    7f6e:	0e 94 3c 47 	call	0x8e78	; 0x8e78 <__divmodsi4>
    7f72:	29 96       	adiw	r28, 0x09	; 9
    7f74:	2c af       	std	Y+60, r18	; 0x3c
    7f76:	3d af       	std	Y+61, r19	; 0x3d
    7f78:	4e af       	std	Y+62, r20	; 0x3e
    7f7a:	5f af       	std	Y+63, r21	; 0x3f
    7f7c:	29 97       	sbiw	r28, 0x09	; 9
	PID_AvgAccVert = 0;							// Reset average
    7f7e:	10 92 38 05 	sts	0x0538, r1
    7f82:	10 92 39 05 	sts	0x0539, r1
    7f86:	10 92 3a 05 	sts	0x053A, r1
    7f8a:	10 92 3b 05 	sts	0x053B, r1
		// Add in gyro Yaw trim
		//************************************************************

		if (axis == YAW)
		{
			PID_gyro_temp1 = (int32_t)(Config.FlightMode[P1].Yaw_trim << 6);
    7f8e:	80 91 f5 05 	lds	r24, 0x05F5
    7f92:	40 e4       	ldi	r20, 0x40	; 64
    7f94:	84 02       	muls	r24, r20
    7f96:	c0 01       	movw	r24, r0
    7f98:	11 24       	eor	r1, r1
    7f9a:	9c 01       	movw	r18, r24
    7f9c:	44 27       	eor	r20, r20
    7f9e:	37 fd       	sbrc	r19, 7
    7fa0:	40 95       	com	r20
    7fa2:	54 2f       	mov	r21, r20
    7fa4:	29 af       	std	Y+57, r18	; 0x39
    7fa6:	3a af       	std	Y+58, r19	; 0x3a
    7fa8:	4b af       	std	Y+59, r20	; 0x3b
    7faa:	5c af       	std	Y+60, r21	; 0x3c
			PID_gyro_temp2 = (int32_t)(Config.FlightMode[P2].Yaw_trim << 6);
    7fac:	80 91 07 06 	lds	r24, 0x0607
    7fb0:	30 e4       	ldi	r19, 0x40	; 64
    7fb2:	83 02       	muls	r24, r19
    7fb4:	c0 01       	movw	r24, r0
    7fb6:	11 24       	eor	r1, r1
    7fb8:	9c 01       	movw	r18, r24
    7fba:	44 27       	eor	r20, r20
    7fbc:	37 fd       	sbrc	r19, 7
    7fbe:	40 95       	com	r20
    7fc0:	54 2f       	mov	r21, r20
    7fc2:	21 96       	adiw	r28, 0x01	; 1
    7fc4:	2c af       	std	Y+60, r18	; 0x3c
    7fc6:	3d af       	std	Y+61, r19	; 0x3d
    7fc8:	4e af       	std	Y+62, r20	; 0x3e
    7fca:	5f af       	std	Y+63, r21	; 0x3f
    7fcc:	21 97       	sbiw	r28, 0x01	; 1
    7fce:	e1 e7       	ldi	r30, 0x71	; 113
    7fd0:	f5 e0       	ldi	r31, 0x05	; 5
    7fd2:	f8 af       	std	Y+56, r31	; 0x38
    7fd4:	ef ab       	std	Y+55, r30	; 0x37
    7fd6:	fe 01       	movw	r30, r28
    7fd8:	75 96       	adiw	r30, 0x15	; 21
    7fda:	fe ab       	std	Y+54, r31	; 0x36
    7fdc:	ed ab       	std	Y+53, r30	; 0x35
    7fde:	ef ee       	ldi	r30, 0xEF	; 239
    7fe0:	f7 e0       	ldi	r31, 0x07	; 7
    7fe2:	fe a3       	std	Y+38, r31	; 0x26
    7fe4:	ed a3       	std	Y+37, r30	; 0x25
    7fe6:	fe 01       	movw	r30, r28
    7fe8:	3f 96       	adiw	r30, 0x0f	; 15
    7fea:	fc ab       	std	Y+52, r31	; 0x34
    7fec:	eb ab       	std	Y+51, r30	; 0x33
    7fee:	39 96       	adiw	r30, 0x09	; 9
    7ff0:	fa ab       	std	Y+50, r31	; 0x32
    7ff2:	e9 ab       	std	Y+49, r30	; 0x31
    7ff4:	36 97       	sbiw	r30, 0x06	; 6
    7ff6:	f8 ab       	std	Y+48, r31	; 0x30
    7ff8:	ef a7       	std	Y+47, r30	; 0x2f
    7ffa:	e9 e0       	ldi	r30, 0x09	; 9
    7ffc:	f6 e0       	ldi	r31, 0x06	; 6
    7ffe:	fe a7       	std	Y+46, r31	; 0x2e
    8000:	ed a7       	std	Y+45, r30	; 0x2d
    8002:	e3 e1       	ldi	r30, 0x13	; 19
    8004:	f8 e0       	ldi	r31, 0x08	; 8
    8006:	fc a3       	std	Y+36, r31	; 0x24
    8008:	eb a3       	std	Y+35, r30	; 0x23
    800a:	e3 e9       	ldi	r30, 0x93	; 147
    800c:	f5 e0       	ldi	r31, 0x05	; 5
    800e:	f8 a7       	std	Y+40, r31	; 0x28
    8010:	ef a3       	std	Y+39, r30	; 0x27
    8012:	fe 01       	movw	r30, r28
    8014:	31 96       	adiw	r30, 0x01	; 1
    8016:	fa a3       	std	Y+34, r31	; 0x22
    8018:	e9 a3       	std	Y+33, r30	; 0x21
    801a:	ef e1       	ldi	r30, 0x1F	; 31
    801c:	f8 e0       	ldi	r31, 0x08	; 8
    801e:	f8 a3       	std	Y+32, r31	; 0x20
    8020:	ef 8f       	std	Y+31, r30	; 0x1f
    8022:	1e 01       	movw	r2, r28
    8024:	fc e0       	ldi	r31, 0x0C	; 12
    8026:	2f 0e       	add	r2, r31
    8028:	31 1c       	adc	r3, r1
    802a:	e5 e1       	ldi	r30, 0x15	; 21
    802c:	f6 e0       	ldi	r31, 0x06	; 6
    802e:	fc a7       	std	Y+44, r31	; 0x2c
    8030:	eb a7       	std	Y+43, r30	; 0x2b
    8032:	2b 96       	adiw	r28, 0x0b	; 11
    8034:	1f ae       	std	Y+63, r1	; 0x3f
    8036:	1e ae       	std	Y+62, r1	; 0x3e
    8038:	2b 97       	sbiw	r28, 0x0b	; 11
		}
		// Reset PID_gyro variables to that data does not accumulate cross-axis
		else
		{
			PID_gyro_temp1 = 0;
			PID_gyro_temp2 = 0;
    803a:	81 2c       	mov	r8, r1
    803c:	91 2c       	mov	r9, r1
    803e:	54 01       	movw	r10, r8
			PID_gyro_temp2 = (int32_t)(Config.FlightMode[P2].Yaw_trim << 6);
		}
		// Reset PID_gyro variables to that data does not accumulate cross-axis
		else
		{
			PID_gyro_temp1 = 0;
    8040:	80 e0       	ldi	r24, 0x00	; 0
    8042:	90 e0       	ldi	r25, 0x00	; 0
    8044:	dc 01       	movw	r26, r24
		//************************************************************
		// Calculate PID gains
		//************************************************************

		// Gyro P-term													// Profile P1
		PID_gyro_temp1 += gyroADC[axis] * P_gain[P1][axis];				// Multiply P-term (Max gain of 127)
    8046:	ef a9       	ldd	r30, Y+55	; 0x37
    8048:	f8 ad       	ldd	r31, Y+56	; 0x38
    804a:	01 91       	ld	r16, Z+
    804c:	11 91       	ld	r17, Z+
    804e:	f8 af       	std	Y+56, r31	; 0x38
    8050:	ef ab       	std	Y+55, r30	; 0x37
    8052:	ed a9       	ldd	r30, Y+53	; 0x35
    8054:	fe a9       	ldd	r31, Y+54	; 0x36
    8056:	41 91       	ld	r20, Z+
    8058:	fe ab       	std	Y+54, r31	; 0x36
    805a:	ed ab       	std	Y+53, r30	; 0x35
    805c:	40 03       	mulsu	r20, r16
    805e:	90 01       	movw	r18, r0
    8060:	41 9f       	mul	r20, r17
    8062:	30 0d       	add	r19, r0
    8064:	11 24       	eor	r1, r1
    8066:	44 27       	eor	r20, r20
    8068:	37 fd       	sbrc	r19, 7
    806a:	40 95       	com	r20
    806c:	54 2f       	mov	r21, r20
    806e:	28 0f       	add	r18, r24
    8070:	39 1f       	adc	r19, r25
    8072:	4a 1f       	adc	r20, r26
    8074:	5b 1f       	adc	r21, r27
		PID_gyro_temp1 = PID_gyro_temp1 * (int32_t)3;					// Multiply by 3
    8076:	a3 e0       	ldi	r26, 0x03	; 3
    8078:	b0 e0       	ldi	r27, 0x00	; 0
    807a:	0e 94 7f 47 	call	0x8efe	; 0x8efe <__muluhisi3>
    807e:	25 96       	adiw	r28, 0x05	; 5
    8080:	6c af       	std	Y+60, r22	; 0x3c
    8082:	7d af       	std	Y+61, r23	; 0x3d
    8084:	8e af       	std	Y+62, r24	; 0x3e
    8086:	9f af       	std	Y+63, r25	; 0x3f
    8088:	25 97       	sbiw	r28, 0x05	; 5

		// Gyro I-term
		PID_Gyro_I_actual1 = IntegralGyro[P1][axis] * I_gain[P1][axis];	// Multiply I-term (Max gain of 127)
    808a:	eb a9       	ldd	r30, Y+51	; 0x33
    808c:	fc a9       	ldd	r31, Y+52	; 0x34
    808e:	a1 91       	ld	r26, Z+
    8090:	fc ab       	std	Y+52, r31	; 0x34
    8092:	eb ab       	std	Y+51, r30	; 0x33
    8094:	ed a1       	ldd	r30, Y+37	; 0x25
    8096:	fe a1       	ldd	r31, Y+38	; 0x26
    8098:	20 81       	ld	r18, Z
    809a:	31 81       	ldd	r19, Z+1	; 0x01
    809c:	42 81       	ldd	r20, Z+2	; 0x02
    809e:	53 81       	ldd	r21, Z+3	; 0x03
    80a0:	bb 27       	eor	r27, r27
    80a2:	a7 fd       	sbrc	r26, 7
    80a4:	b0 95       	com	r27
    80a6:	0e 94 8a 47 	call	0x8f14	; 0x8f14 <__mulshisi3>
    80aa:	2b 01       	movw	r4, r22
    80ac:	3c 01       	movw	r6, r24
		PID_Gyro_I_actual1 = PID_Gyro_I_actual1 >> 5;					// Divide by 32
    80ae:	85 e0       	ldi	r24, 0x05	; 5
    80b0:	75 94       	asr	r7
    80b2:	67 94       	ror	r6
    80b4:	57 94       	ror	r5
    80b6:	47 94       	ror	r4
    80b8:	8a 95       	dec	r24
    80ba:	d1 f7       	brne	.-12     	; 0x80b0 <Calculate_PID+0x232>

		// Gyro P-term
		PID_gyro_temp2 += gyroADC[axis] * P_gain[P2][axis];				// Profile P2
    80bc:	e9 a9       	ldd	r30, Y+49	; 0x31
    80be:	fa a9       	ldd	r31, Y+50	; 0x32
    80c0:	41 91       	ld	r20, Z+
    80c2:	fa ab       	std	Y+50, r31	; 0x32
    80c4:	e9 ab       	std	Y+49, r30	; 0x31
    80c6:	40 03       	mulsu	r20, r16
    80c8:	90 01       	movw	r18, r0
    80ca:	41 9f       	mul	r20, r17
    80cc:	30 0d       	add	r19, r0
    80ce:	11 24       	eor	r1, r1
    80d0:	44 27       	eor	r20, r20
    80d2:	37 fd       	sbrc	r19, 7
    80d4:	40 95       	com	r20
    80d6:	54 2f       	mov	r21, r20
    80d8:	28 0d       	add	r18, r8
    80da:	39 1d       	adc	r19, r9
    80dc:	4a 1d       	adc	r20, r10
    80de:	5b 1d       	adc	r21, r11
		PID_gyro_temp2 = PID_gyro_temp2 * (int32_t)3;
    80e0:	a3 e0       	ldi	r26, 0x03	; 3
    80e2:	b0 e0       	ldi	r27, 0x00	; 0
    80e4:	0e 94 7f 47 	call	0x8efe	; 0x8efe <__muluhisi3>
    80e8:	4b 01       	movw	r8, r22
    80ea:	5c 01       	movw	r10, r24

		// Gyro I-term
		PID_Gyro_I_actual2 = IntegralGyro[P2][axis] * I_gain[P2][axis];
    80ec:	ef a5       	ldd	r30, Y+47	; 0x2f
    80ee:	f8 a9       	ldd	r31, Y+48	; 0x30
    80f0:	a1 91       	ld	r26, Z+
    80f2:	f8 ab       	std	Y+48, r31	; 0x30
    80f4:	ef a7       	std	Y+47, r30	; 0x2f
    80f6:	ed a1       	ldd	r30, Y+37	; 0x25
    80f8:	fe a1       	ldd	r31, Y+38	; 0x26
    80fa:	24 85       	ldd	r18, Z+12	; 0x0c
    80fc:	35 85       	ldd	r19, Z+13	; 0x0d
    80fe:	46 85       	ldd	r20, Z+14	; 0x0e
    8100:	57 85       	ldd	r21, Z+15	; 0x0f
    8102:	bb 27       	eor	r27, r27
    8104:	a7 fd       	sbrc	r26, 7
    8106:	b0 95       	com	r27
    8108:	0e 94 8a 47 	call	0x8f14	; 0x8f14 <__mulshisi3>
		PID_Gyro_I_actual2 = PID_Gyro_I_actual2 >> 5;
    810c:	25 e0       	ldi	r18, 0x05	; 5
    810e:	95 95       	asr	r25
    8110:	87 95       	ror	r24
    8112:	77 95       	ror	r23
    8114:	67 95       	ror	r22
    8116:	2a 95       	dec	r18
    8118:	d1 f7       	brne	.-12     	; 0x810e <Calculate_PID+0x290>
		//************************************************************
		// I-term output limits
		//************************************************************

		// P1 limits
		if (PID_Gyro_I_actual1 > Config.Raw_I_Limits[P1][axis]) 
    811a:	ed a5       	ldd	r30, Y+45	; 0x2d
    811c:	fe a5       	ldd	r31, Y+46	; 0x2e
    811e:	c1 90       	ld	r12, Z+
    8120:	d1 90       	ld	r13, Z+
    8122:	e1 90       	ld	r14, Z+
    8124:	f1 90       	ld	r15, Z+
    8126:	fe a7       	std	Y+46, r31	; 0x2e
    8128:	ed a7       	std	Y+45, r30	; 0x2d
    812a:	c4 14       	cp	r12, r4
    812c:	d5 04       	cpc	r13, r5
    812e:	e6 04       	cpc	r14, r6
    8130:	f7 04       	cpc	r15, r7
    8132:	84 f0       	brlt	.+32     	; 0x8154 <Calculate_PID+0x2d6>
		{
			PID_Gyro_I_actual1 = Config.Raw_I_Limits[P1][axis];
		}
		else if (PID_Gyro_I_actual1 < -Config.Raw_I_Limits[P1][axis]) 
    8134:	00 27       	eor	r16, r16
    8136:	11 27       	eor	r17, r17
    8138:	98 01       	movw	r18, r16
    813a:	0c 19       	sub	r16, r12
    813c:	1d 09       	sbc	r17, r13
    813e:	2e 09       	sbc	r18, r14
    8140:	3f 09       	sbc	r19, r15
    8142:	73 01       	movw	r14, r6
    8144:	62 01       	movw	r12, r4
    8146:	40 16       	cp	r4, r16
    8148:	51 06       	cpc	r5, r17
    814a:	62 06       	cpc	r6, r18
    814c:	73 06       	cpc	r7, r19
    814e:	14 f4       	brge	.+4      	; 0x8154 <Calculate_PID+0x2d6>
    8150:	68 01       	movw	r12, r16
    8152:	79 01       	movw	r14, r18
		{
			PID_Gyro_I_actual1 = -Config.Raw_I_Limits[P1][axis];	
		}

		// P2 limits
		if (PID_Gyro_I_actual2 > Config.Raw_I_Limits[P2][axis]) 
    8154:	eb a5       	ldd	r30, Y+43	; 0x2b
    8156:	fc a5       	ldd	r31, Y+44	; 0x2c
    8158:	21 91       	ld	r18, Z+
    815a:	31 91       	ld	r19, Z+
    815c:	41 91       	ld	r20, Z+
    815e:	51 91       	ld	r21, Z+
    8160:	fc a7       	std	Y+44, r31	; 0x2c
    8162:	eb a7       	std	Y+43, r30	; 0x2b
    8164:	2b 8f       	std	Y+27, r18	; 0x1b
    8166:	3c 8f       	std	Y+28, r19	; 0x1c
    8168:	4d 8f       	std	Y+29, r20	; 0x1d
    816a:	5e 8f       	std	Y+30, r21	; 0x1e
    816c:	26 17       	cp	r18, r22
    816e:	37 07       	cpc	r19, r23
    8170:	48 07       	cpc	r20, r24
    8172:	59 07       	cpc	r21, r25
    8174:	b4 f0       	brlt	.+44     	; 0x81a2 <Calculate_PID+0x324>
		{
			PID_Gyro_I_actual2 = Config.Raw_I_Limits[P2][axis];
		}
		else if (PID_Gyro_I_actual2 < -Config.Raw_I_Limits[P2][axis]) 
    8176:	89 01       	movw	r16, r18
    8178:	9a 01       	movw	r18, r20
    817a:	30 95       	com	r19
    817c:	20 95       	com	r18
    817e:	10 95       	com	r17
    8180:	01 95       	neg	r16
    8182:	1f 4f       	sbci	r17, 0xFF	; 255
    8184:	2f 4f       	sbci	r18, 0xFF	; 255
    8186:	3f 4f       	sbci	r19, 0xFF	; 255
    8188:	6b 8f       	std	Y+27, r22	; 0x1b
    818a:	7c 8f       	std	Y+28, r23	; 0x1c
    818c:	8d 8f       	std	Y+29, r24	; 0x1d
    818e:	9e 8f       	std	Y+30, r25	; 0x1e
    8190:	60 17       	cp	r22, r16
    8192:	71 07       	cpc	r23, r17
    8194:	82 07       	cpc	r24, r18
    8196:	93 07       	cpc	r25, r19
    8198:	24 f4       	brge	.+8      	; 0x81a2 <Calculate_PID+0x324>
    819a:	0b 8f       	std	Y+27, r16	; 0x1b
    819c:	1c 8f       	std	Y+28, r17	; 0x1c
    819e:	2d 8f       	std	Y+29, r18	; 0x1d
    81a0:	3e 8f       	std	Y+30, r19	; 0x1e

		//************************************************************
		// Sum Gyro P, I and D terms and rescale
		//************************************************************

		PID_Gyros[P1][axis] = (int16_t)((PID_gyro_temp1 + PID_Gyro_I_actual1) >> PID_SCALE);  // PID_SCALE was 6, now 5
    81a2:	25 96       	adiw	r28, 0x05	; 5
    81a4:	4c ac       	ldd	r4, Y+60	; 0x3c
    81a6:	5d ac       	ldd	r5, Y+61	; 0x3d
    81a8:	6e ac       	ldd	r6, Y+62	; 0x3e
    81aa:	7f ac       	ldd	r7, Y+63	; 0x3f
    81ac:	25 97       	sbiw	r28, 0x05	; 5
    81ae:	4c 0c       	add	r4, r12
    81b0:	5d 1c       	adc	r5, r13
    81b2:	6e 1c       	adc	r6, r14
    81b4:	7f 1c       	adc	r7, r15
    81b6:	a6 e0       	ldi	r26, 0x06	; 6
    81b8:	75 94       	asr	r7
    81ba:	67 94       	ror	r6
    81bc:	57 94       	ror	r5
    81be:	47 94       	ror	r4
    81c0:	aa 95       	dec	r26
    81c2:	d1 f7       	brne	.-12     	; 0x81b8 <Calculate_PID+0x33a>
    81c4:	eb a1       	ldd	r30, Y+35	; 0x23
    81c6:	fc a1       	ldd	r31, Y+36	; 0x24
    81c8:	51 82       	std	Z+1, r5	; 0x01
    81ca:	40 82       	st	Z, r4
		PID_Gyros[P2][axis] = (int16_t)((PID_gyro_temp2 + PID_Gyro_I_actual2) >> PID_SCALE);
    81cc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    81ce:	9c 8d       	ldd	r25, Y+28	; 0x1c
    81d0:	ad 8d       	ldd	r26, Y+29	; 0x1d
    81d2:	be 8d       	ldd	r27, Y+30	; 0x1e
    81d4:	88 0d       	add	r24, r8
    81d6:	99 1d       	adc	r25, r9
    81d8:	aa 1d       	adc	r26, r10
    81da:	bb 1d       	adc	r27, r11
    81dc:	16 e0       	ldi	r17, 0x06	; 6
    81de:	b5 95       	asr	r27
    81e0:	a7 95       	ror	r26
    81e2:	97 95       	ror	r25
    81e4:	87 95       	ror	r24
    81e6:	1a 95       	dec	r17
    81e8:	d1 f7       	brne	.-12     	; 0x81de <Calculate_PID+0x360>
    81ea:	97 83       	std	Z+7, r25	; 0x07
    81ec:	86 83       	std	Z+6, r24	; 0x06

		//************************************************************
		// Calculate error from angle data and trim (roll and pitch only)
		//************************************************************

		if (axis < YAW)
    81ee:	2a 96       	adiw	r28, 0x0a	; 10
    81f0:	ff ad       	ldd	r31, Y+63	; 0x3f
    81f2:	2a 97       	sbiw	r28, 0x0a	; 10
    81f4:	f2 30       	cpi	r31, 0x02	; 2
    81f6:	e9 f1       	breq	.+122    	; 0x8272 <Calculate_PID+0x3f4>
		{
			// Do for P1 and P2
			for (i = P1; i <= P2; i++)
			{
				PID_acc_temp1 = angle[axis] - L_trim[i][axis];				// Offset angle with trim
    81f8:	ef a1       	ldd	r30, Y+39	; 0x27
    81fa:	f8 a5       	ldd	r31, Y+40	; 0x28
    81fc:	40 81       	ld	r20, Z
    81fe:	51 81       	ldd	r21, Z+1	; 0x01
    8200:	e9 a1       	ldd	r30, Y+33	; 0x21
    8202:	fa a1       	ldd	r31, Y+34	; 0x22
    8204:	80 81       	ld	r24, Z
    8206:	91 81       	ldd	r25, Z+1	; 0x01
    8208:	9a 01       	movw	r18, r20
    820a:	28 1b       	sub	r18, r24
    820c:	39 0b       	sbc	r19, r25
    820e:	a9 e0       	ldi	r26, 0x09	; 9
    8210:	b0 e0       	ldi	r27, 0x00	; 0
    8212:	ac 0f       	add	r26, r28
    8214:	bd 1f       	adc	r27, r29
    8216:	2b 96       	adiw	r28, 0x0b	; 11
    8218:	ee ad       	ldd	r30, Y+62	; 0x3e
    821a:	ff ad       	ldd	r31, Y+63	; 0x3f
    821c:	2b 97       	sbiw	r28, 0x0b	; 11
    821e:	ae 0f       	add	r26, r30
    8220:	bf 1f       	adc	r27, r31
				PID_acc_temp1 *= L_gain[i][axis];							// P-term of accelerometer (Max gain of 127)
    8222:	ac 91       	ld	r26, X
    8224:	bb 27       	eor	r27, r27
    8226:	a7 fd       	sbrc	r26, 7
    8228:	b0 95       	com	r27
    822a:	0e 94 61 47 	call	0x8ec2	; 0x8ec2 <__mulhisi3>
				PID_ACCs[i][axis] = (int16_t)(PID_acc_temp1 >> 8);			// Reduce and convert to integer
    822e:	bb 27       	eor	r27, r27
    8230:	97 fd       	sbrc	r25, 7
    8232:	ba 95       	dec	r27
    8234:	a9 2f       	mov	r26, r25
    8236:	98 2f       	mov	r25, r24
    8238:	87 2f       	mov	r24, r23
    823a:	ef 8d       	ldd	r30, Y+31	; 0x1f
    823c:	f8 a1       	ldd	r31, Y+32	; 0x20
    823e:	91 83       	std	Z+1, r25	; 0x01
    8240:	80 83       	st	Z, r24
		if (axis < YAW)
		{
			// Do for P1 and P2
			for (i = P1; i <= P2; i++)
			{
				PID_acc_temp1 = angle[axis] - L_trim[i][axis];				// Offset angle with trim
    8242:	e9 a1       	ldd	r30, Y+33	; 0x21
    8244:	fa a1       	ldd	r31, Y+34	; 0x22
    8246:	84 81       	ldd	r24, Z+4	; 0x04
    8248:	95 81       	ldd	r25, Z+5	; 0x05
    824a:	9a 01       	movw	r18, r20
    824c:	28 1b       	sub	r18, r24
    824e:	39 0b       	sbc	r19, r25
				PID_acc_temp1 *= L_gain[i][axis];							// P-term of accelerometer (Max gain of 127)
    8250:	f1 01       	movw	r30, r2
    8252:	a0 81       	ld	r26, Z
    8254:	bb 27       	eor	r27, r27
    8256:	a7 fd       	sbrc	r26, 7
    8258:	b0 95       	com	r27
    825a:	0e 94 61 47 	call	0x8ec2	; 0x8ec2 <__mulhisi3>
				PID_ACCs[i][axis] = (int16_t)(PID_acc_temp1 >> 8);			// Reduce and convert to integer
    825e:	bb 27       	eor	r27, r27
    8260:	97 fd       	sbrc	r25, 7
    8262:	ba 95       	dec	r27
    8264:	a9 2f       	mov	r26, r25
    8266:	98 2f       	mov	r25, r24
    8268:	87 2f       	mov	r24, r23
    826a:	ef 8d       	ldd	r30, Y+31	; 0x1f
    826c:	f8 a1       	ldd	r31, Y+32	; 0x20
    826e:	97 83       	std	Z+7, r25	; 0x07
    8270:	86 83       	std	Z+6, r24	; 0x06
	PID_AvgAccVert = 0;							// Reset average

	//************************************************************
	// PID loop
	//************************************************************
	for (axis = 0; axis <= YAW; axis ++)
    8272:	2b 96       	adiw	r28, 0x0b	; 11
    8274:	ee ad       	ldd	r30, Y+62	; 0x3e
    8276:	ff ad       	ldd	r31, Y+63	; 0x3f
    8278:	2b 97       	sbiw	r28, 0x0b	; 11
    827a:	32 97       	sbiw	r30, 0x02	; 2
    827c:	e1 f1       	breq	.+120    	; 0x82f6 <Calculate_PID+0x478>
	{
		//************************************************************
		// Add in gyro Yaw trim
		//************************************************************

		if (axis == YAW)
    827e:	2a 96       	adiw	r28, 0x0a	; 10
    8280:	ff ad       	ldd	r31, Y+63	; 0x3f
    8282:	2a 97       	sbiw	r28, 0x0a	; 10
    8284:	f1 30       	cpi	r31, 0x01	; 1
    8286:	39 f0       	breq	.+14     	; 0x8296 <Calculate_PID+0x418>
		}
		// Reset PID_gyro variables to that data does not accumulate cross-axis
		else
		{
			PID_gyro_temp1 = 0;
			PID_gyro_temp2 = 0;
    8288:	81 2c       	mov	r8, r1
    828a:	91 2c       	mov	r9, r1
    828c:	54 01       	movw	r10, r8
			PID_gyro_temp2 = (int32_t)(Config.FlightMode[P2].Yaw_trim << 6);
		}
		// Reset PID_gyro variables to that data does not accumulate cross-axis
		else
		{
			PID_gyro_temp1 = 0;
    828e:	80 e0       	ldi	r24, 0x00	; 0
    8290:	90 e0       	ldi	r25, 0x00	; 0
    8292:	dc 01       	movw	r26, r24
    8294:	0a c0       	rjmp	.+20     	; 0x82aa <Calculate_PID+0x42c>
		//************************************************************

		if (axis == YAW)
		{
			PID_gyro_temp1 = (int32_t)(Config.FlightMode[P1].Yaw_trim << 6);
			PID_gyro_temp2 = (int32_t)(Config.FlightMode[P2].Yaw_trim << 6);
    8296:	21 96       	adiw	r28, 0x01	; 1
    8298:	8c ac       	ldd	r8, Y+60	; 0x3c
    829a:	9d ac       	ldd	r9, Y+61	; 0x3d
    829c:	ae ac       	ldd	r10, Y+62	; 0x3e
    829e:	bf ac       	ldd	r11, Y+63	; 0x3f
    82a0:	21 97       	sbiw	r28, 0x01	; 1
		// Add in gyro Yaw trim
		//************************************************************

		if (axis == YAW)
		{
			PID_gyro_temp1 = (int32_t)(Config.FlightMode[P1].Yaw_trim << 6);
    82a2:	89 ad       	ldd	r24, Y+57	; 0x39
    82a4:	9a ad       	ldd	r25, Y+58	; 0x3a
    82a6:	ab ad       	ldd	r26, Y+59	; 0x3b
    82a8:	bc ad       	ldd	r27, Y+60	; 0x3c
    82aa:	2b 96       	adiw	r28, 0x0b	; 11
    82ac:	ee ad       	ldd	r30, Y+62	; 0x3e
    82ae:	ff ad       	ldd	r31, Y+63	; 0x3f
    82b0:	2b 97       	sbiw	r28, 0x0b	; 11
    82b2:	31 96       	adiw	r30, 0x01	; 1
    82b4:	2b 96       	adiw	r28, 0x0b	; 11
    82b6:	ff af       	std	Y+63, r31	; 0x3f
    82b8:	ee af       	std	Y+62, r30	; 0x3e
    82ba:	2b 97       	sbiw	r28, 0x0b	; 11
    82bc:	ed a1       	ldd	r30, Y+37	; 0x25
    82be:	fe a1       	ldd	r31, Y+38	; 0x26
    82c0:	34 96       	adiw	r30, 0x04	; 4
    82c2:	fe a3       	std	Y+38, r31	; 0x26
    82c4:	ed a3       	std	Y+37, r30	; 0x25
    82c6:	eb a1       	ldd	r30, Y+35	; 0x23
    82c8:	fc a1       	ldd	r31, Y+36	; 0x24
    82ca:	32 96       	adiw	r30, 0x02	; 2
    82cc:	fc a3       	std	Y+36, r31	; 0x24
    82ce:	eb a3       	std	Y+35, r30	; 0x23
    82d0:	ef a1       	ldd	r30, Y+39	; 0x27
    82d2:	f8 a5       	ldd	r31, Y+40	; 0x28
    82d4:	32 96       	adiw	r30, 0x02	; 2
    82d6:	f8 a7       	std	Y+40, r31	; 0x28
    82d8:	ef a3       	std	Y+39, r30	; 0x27
    82da:	e9 a1       	ldd	r30, Y+33	; 0x21
    82dc:	fa a1       	ldd	r31, Y+34	; 0x22
    82de:	32 96       	adiw	r30, 0x02	; 2
    82e0:	fa a3       	std	Y+34, r31	; 0x22
    82e2:	e9 a3       	std	Y+33, r30	; 0x21
    82e4:	ef 8d       	ldd	r30, Y+31	; 0x1f
    82e6:	f8 a1       	ldd	r31, Y+32	; 0x20
    82e8:	32 96       	adiw	r30, 0x02	; 2
    82ea:	f8 a3       	std	Y+32, r31	; 0x20
    82ec:	ef 8f       	std	Y+31, r30	; 0x1f
    82ee:	ff ef       	ldi	r31, 0xFF	; 255
    82f0:	2f 1a       	sub	r2, r31
    82f2:	3f 0a       	sbc	r3, r31
    82f4:	a8 ce       	rjmp	.-688    	; 0x8046 <Calculate_PID+0x1c8>
	//************************************************************

	// Do for P1 and P2
	for (i = P1; i <= P2; i++)
	{
		PID_acc_temp1 = -AvAccVert;				// Get and copy Z-acc value. Negate to oppose G
    82f6:	27 96       	adiw	r28, 0x07	; 7
    82f8:	ce ac       	ldd	r12, Y+62	; 0x3e
    82fa:	df ac       	ldd	r13, Y+63	; 0x3f
    82fc:	27 97       	sbiw	r28, 0x07	; 7
    82fe:	d1 94       	neg	r13
    8300:	c1 94       	neg	r12
    8302:	d1 08       	sbc	r13, r1

		PID_acc_temp1 *= L_gain[i][YAW];		// Multiply P-term (Max gain of 127)
    8304:	96 01       	movw	r18, r12
    8306:	f9 a5       	ldd	r31, Y+41	; 0x29
    8308:	af 2f       	mov	r26, r31
    830a:	bb 27       	eor	r27, r27
    830c:	a7 fd       	sbrc	r26, 7
    830e:	b0 95       	com	r27
    8310:	0e 94 61 47 	call	0x8ec2	; 0x8ec2 <__mulhisi3>

		PID_acc_temp1 = PID_acc_temp1 >> 4;		// Moderate Z-acc to reasonable values
    8314:	44 e0       	ldi	r20, 0x04	; 4
    8316:	95 95       	asr	r25
    8318:	87 95       	ror	r24
    831a:	77 95       	ror	r23
    831c:	67 95       	ror	r22
    831e:	4a 95       	dec	r20
    8320:	d1 f7       	brne	.-12     	; 0x8316 <Calculate_PID+0x498>

		if (PID_acc_temp1 > MAX_ZGAIN)			// Limit to +/-MAX_ZGAIN
    8322:	65 3f       	cpi	r22, 0xF5	; 245
    8324:	21 e0       	ldi	r18, 0x01	; 1
    8326:	72 07       	cpc	r23, r18
    8328:	81 05       	cpc	r24, r1
    832a:	91 05       	cpc	r25, r1
    832c:	64 f4       	brge	.+24     	; 0x8346 <Calculate_PID+0x4c8>
		{
			PID_acc_temp1 = MAX_ZGAIN;
		}
		if (PID_acc_temp1 < -MAX_ZGAIN)
    832e:	6c 30       	cpi	r22, 0x0C	; 12
    8330:	3e ef       	ldi	r19, 0xFE	; 254
    8332:	73 07       	cpc	r23, r19
    8334:	3f ef       	ldi	r19, 0xFF	; 255
    8336:	83 07       	cpc	r24, r19
    8338:	93 07       	cpc	r25, r19
    833a:	4c f4       	brge	.+18     	; 0x834e <Calculate_PID+0x4d0>
		{
			PID_acc_temp1 = -MAX_ZGAIN;
    833c:	6c e0       	ldi	r22, 0x0C	; 12
    833e:	7e ef       	ldi	r23, 0xFE	; 254
    8340:	8f ef       	ldi	r24, 0xFF	; 255
    8342:	9f ef       	ldi	r25, 0xFF	; 255
    8344:	04 c0       	rjmp	.+8      	; 0x834e <Calculate_PID+0x4d0>

		PID_acc_temp1 = PID_acc_temp1 >> 4;		// Moderate Z-acc to reasonable values

		if (PID_acc_temp1 > MAX_ZGAIN)			// Limit to +/-MAX_ZGAIN
		{
			PID_acc_temp1 = MAX_ZGAIN;
    8346:	64 ef       	ldi	r22, 0xF4	; 244
    8348:	71 e0       	ldi	r23, 0x01	; 1
    834a:	80 e0       	ldi	r24, 0x00	; 0
    834c:	90 e0       	ldi	r25, 0x00	; 0
		if (PID_acc_temp1 < -MAX_ZGAIN)
		{
			PID_acc_temp1 = -MAX_ZGAIN;
		}

		PID_ACCs[i][YAW] = (int16_t)PID_acc_temp1; // Copy to global values
    834e:	70 93 24 08 	sts	0x0824, r23
    8352:	60 93 23 08 	sts	0x0823, r22
	// Do for P1 and P2
	for (i = P1; i <= P2; i++)
	{
		PID_acc_temp1 = -AvAccVert;				// Get and copy Z-acc value. Negate to oppose G

		PID_acc_temp1 *= L_gain[i][YAW];		// Multiply P-term (Max gain of 127)
    8356:	96 01       	movw	r18, r12
    8358:	4a a5       	ldd	r20, Y+42	; 0x2a
    835a:	a4 2f       	mov	r26, r20
    835c:	bb 27       	eor	r27, r27
    835e:	a7 fd       	sbrc	r26, 7
    8360:	b0 95       	com	r27
    8362:	0e 94 61 47 	call	0x8ec2	; 0x8ec2 <__mulhisi3>

		PID_acc_temp1 = PID_acc_temp1 >> 4;		// Moderate Z-acc to reasonable values
    8366:	34 e0       	ldi	r19, 0x04	; 4
    8368:	95 95       	asr	r25
    836a:	87 95       	ror	r24
    836c:	77 95       	ror	r23
    836e:	67 95       	ror	r22
    8370:	3a 95       	dec	r19
    8372:	d1 f7       	brne	.-12     	; 0x8368 <Calculate_PID+0x4ea>

		if (PID_acc_temp1 > MAX_ZGAIN)			// Limit to +/-MAX_ZGAIN
    8374:	65 3f       	cpi	r22, 0xF5	; 245
    8376:	51 e0       	ldi	r21, 0x01	; 1
    8378:	75 07       	cpc	r23, r21
    837a:	81 05       	cpc	r24, r1
    837c:	91 05       	cpc	r25, r1
    837e:	64 f4       	brge	.+24     	; 0x8398 <Calculate_PID+0x51a>
		{
			PID_acc_temp1 = MAX_ZGAIN;
		}
		if (PID_acc_temp1 < -MAX_ZGAIN)
    8380:	6c 30       	cpi	r22, 0x0C	; 12
    8382:	ae ef       	ldi	r26, 0xFE	; 254
    8384:	7a 07       	cpc	r23, r26
    8386:	af ef       	ldi	r26, 0xFF	; 255
    8388:	8a 07       	cpc	r24, r26
    838a:	9a 07       	cpc	r25, r26
    838c:	4c f4       	brge	.+18     	; 0x83a0 <Calculate_PID+0x522>
		{
			PID_acc_temp1 = -MAX_ZGAIN;
    838e:	6c e0       	ldi	r22, 0x0C	; 12
    8390:	7e ef       	ldi	r23, 0xFE	; 254
    8392:	8f ef       	ldi	r24, 0xFF	; 255
    8394:	9f ef       	ldi	r25, 0xFF	; 255
    8396:	04 c0       	rjmp	.+8      	; 0x83a0 <Calculate_PID+0x522>

		PID_acc_temp1 = PID_acc_temp1 >> 4;		// Moderate Z-acc to reasonable values

		if (PID_acc_temp1 > MAX_ZGAIN)			// Limit to +/-MAX_ZGAIN
		{
			PID_acc_temp1 = MAX_ZGAIN;
    8398:	64 ef       	ldi	r22, 0xF4	; 244
    839a:	71 e0       	ldi	r23, 0x01	; 1
    839c:	80 e0       	ldi	r24, 0x00	; 0
    839e:	90 e0       	ldi	r25, 0x00	; 0
		if (PID_acc_temp1 < -MAX_ZGAIN)
		{
			PID_acc_temp1 = -MAX_ZGAIN;
		}

		PID_ACCs[i][YAW] = (int16_t)PID_acc_temp1; // Copy to global values
    83a0:	70 93 2a 08 	sts	0x082A, r23
    83a4:	60 93 29 08 	sts	0x0829, r22
	}
}
    83a8:	c6 5b       	subi	r28, 0xB6	; 182
    83aa:	df 4f       	sbci	r29, 0xFF	; 255
    83ac:	0f b6       	in	r0, 0x3f	; 63
    83ae:	f8 94       	cli
    83b0:	de bf       	out	0x3e, r29	; 62
    83b2:	0f be       	out	0x3f, r0	; 63
    83b4:	cd bf       	out	0x3d, r28	; 61
    83b6:	df 91       	pop	r29
    83b8:	cf 91       	pop	r28
    83ba:	1f 91       	pop	r17
    83bc:	0f 91       	pop	r16
    83be:	ff 90       	pop	r15
    83c0:	ef 90       	pop	r14
    83c2:	df 90       	pop	r13
    83c4:	cf 90       	pop	r12
    83c6:	bf 90       	pop	r11
    83c8:	af 90       	pop	r10
    83ca:	9f 90       	pop	r9
    83cc:	8f 90       	pop	r8
    83ce:	7f 90       	pop	r7
    83d0:	6f 90       	pop	r6
    83d2:	5f 90       	pop	r5
    83d4:	4f 90       	pop	r4
    83d6:	3f 90       	pop	r3
    83d8:	2f 90       	pop	r2
    83da:	08 95       	ret

000083dc <RxGetChannels>:
volatile int16_t MonopolarThrottle;				// Monopolar throttle

// Get raw flight channel data (~2500 to 5000) and remove zero offset
// Use channel mapping for reconfigurability
void RxGetChannels(void)
{
    83dc:	ed e8       	ldi	r30, 0x8D	; 141
    83de:	f7 e0       	ldi	r31, 0x07	; 7
	static	int16_t	OldRxSum;			// Sum of all major channels
	int16_t	RxSumDiff;
	int16_t	RxSum, i;

	// Remove zero offsets
	for (i=0; i < MAX_RC_CHANNELS; i++)
    83e0:	80 e0       	ldi	r24, 0x00	; 0
    83e2:	90 e0       	ldi	r25, 0x00	; 0
	{
		RCinputs[i]	= RxChannel[i] - Config.RxChannelZeroOffset[i];
    83e4:	ac 01       	movw	r20, r24
    83e6:	44 0f       	add	r20, r20
    83e8:	55 1f       	adc	r21, r21
    83ea:	da 01       	movw	r26, r20
    83ec:	a4 54       	subi	r26, 0x44	; 68
    83ee:	b8 4f       	sbci	r27, 0xF8	; 248
    83f0:	2d 91       	ld	r18, X+
    83f2:	3c 91       	ld	r19, X
    83f4:	61 91       	ld	r22, Z+
    83f6:	71 91       	ld	r23, Z+
    83f8:	26 1b       	sub	r18, r22
    83fa:	37 0b       	sbc	r19, r23
    83fc:	da 01       	movw	r26, r20
    83fe:	a3 5d       	subi	r26, 0xD3	; 211
    8400:	b7 4f       	sbci	r27, 0xF7	; 247
    8402:	11 96       	adiw	r26, 0x01	; 1
    8404:	3c 93       	st	X, r19
    8406:	2e 93       	st	-X, r18
	static	int16_t	OldRxSum;			// Sum of all major channels
	int16_t	RxSumDiff;
	int16_t	RxSum, i;

	// Remove zero offsets
	for (i=0; i < MAX_RC_CHANNELS; i++)
    8408:	01 96       	adiw	r24, 0x01	; 1
    840a:	88 30       	cpi	r24, 0x08	; 8
    840c:	91 05       	cpc	r25, r1
    840e:	51 f7       	brne	.-44     	; 0x83e4 <RxGetChannels+0x8>
	{
		RCinputs[i]	= RxChannel[i] - Config.RxChannelZeroOffset[i];
	}

	// Special handling for monopolar throttle
	MonopolarThrottle = RxChannel[THROTTLE] - Config.RxChannelZeroOffset[THROTTLE];
    8410:	80 91 bc 07 	lds	r24, 0x07BC
    8414:	90 91 bd 07 	lds	r25, 0x07BD
    8418:	20 91 8d 07 	lds	r18, 0x078D
    841c:	30 91 8e 07 	lds	r19, 0x078E
    8420:	82 1b       	sub	r24, r18
    8422:	93 0b       	sbc	r25, r19
    8424:	90 93 2c 08 	sts	0x082C, r25
    8428:	80 93 2b 08 	sts	0x082B, r24

	// Bipolar throttle must use the nominal mid-point
	RCinputs[THROTTLE] = RxChannel[THROTTLE] - 3750; 
    842c:	80 91 bc 07 	lds	r24, 0x07BC
    8430:	90 91 bd 07 	lds	r25, 0x07BD
    8434:	86 5a       	subi	r24, 0xA6	; 166
    8436:	9e 40       	sbci	r25, 0x0E	; 14
    8438:	90 93 2e 08 	sts	0x082E, r25
    843c:	80 93 2d 08 	sts	0x082D, r24

	// Reverse primary channels as requested
	if (Config.AileronPol == REVERSED)
    8440:	80 91 e0 05 	lds	r24, 0x05E0
    8444:	81 30       	cpi	r24, 0x01	; 1
    8446:	59 f4       	brne	.+22     	; 0x845e <RxGetChannels+0x82>
	{
		RCinputs[AILERON] = -RCinputs[AILERON];
    8448:	80 91 2f 08 	lds	r24, 0x082F
    844c:	90 91 30 08 	lds	r25, 0x0830
    8450:	91 95       	neg	r25
    8452:	81 95       	neg	r24
    8454:	91 09       	sbc	r25, r1
    8456:	90 93 30 08 	sts	0x0830, r25
    845a:	80 93 2f 08 	sts	0x082F, r24
	}

	if (Config.ElevatorPol == REVERSED)
    845e:	80 91 e1 05 	lds	r24, 0x05E1
    8462:	81 30       	cpi	r24, 0x01	; 1
    8464:	59 f4       	brne	.+22     	; 0x847c <RxGetChannels+0xa0>
	{
		RCinputs[ELEVATOR] = -RCinputs[ELEVATOR];
    8466:	80 91 31 08 	lds	r24, 0x0831
    846a:	90 91 32 08 	lds	r25, 0x0832
    846e:	91 95       	neg	r25
    8470:	81 95       	neg	r24
    8472:	91 09       	sbc	r25, r1
    8474:	90 93 32 08 	sts	0x0832, r25
    8478:	80 93 31 08 	sts	0x0831, r24
	}

	if (Config.RudderPol == REVERSED)
    847c:	80 91 e2 05 	lds	r24, 0x05E2
    8480:	81 30       	cpi	r24, 0x01	; 1
    8482:	59 f4       	brne	.+22     	; 0x849a <RxGetChannels+0xbe>
	{
		RCinputs[RUDDER] = -RCinputs[RUDDER];
    8484:	80 91 33 08 	lds	r24, 0x0833
    8488:	90 91 34 08 	lds	r25, 0x0834
    848c:	91 95       	neg	r25
    848e:	81 95       	neg	r24
    8490:	91 09       	sbc	r25, r1
    8492:	90 93 34 08 	sts	0x0834, r25
    8496:	80 93 33 08 	sts	0x0833, r24
	}

	// Calculate RX activity
	RxSum = RCinputs[AILERON] + RCinputs[ELEVATOR] + RCinputs[RUDDER];
    849a:	80 91 2f 08 	lds	r24, 0x082F
    849e:	90 91 30 08 	lds	r25, 0x0830
    84a2:	40 91 31 08 	lds	r20, 0x0831
    84a6:	50 91 32 08 	lds	r21, 0x0832
    84aa:	20 91 33 08 	lds	r18, 0x0833
    84ae:	30 91 34 08 	lds	r19, 0x0834
    84b2:	84 0f       	add	r24, r20
    84b4:	95 1f       	adc	r25, r21
    84b6:	82 0f       	add	r24, r18
    84b8:	93 1f       	adc	r25, r19
	RxSumDiff = RxSum - OldRxSum;
    84ba:	20 91 3c 05 	lds	r18, 0x053C
    84be:	30 91 3d 05 	lds	r19, 0x053D
    84c2:	ac 01       	movw	r20, r24
    84c4:	42 1b       	sub	r20, r18
    84c6:	53 0b       	sbc	r21, r19
    84c8:	9a 01       	movw	r18, r20

	// Set RX activity flag if movement above noise floor or throttle above minimum
	if ((RxSumDiff > NOISE_THRESH) || (RxSumDiff < -NOISE_THRESH) || (MonopolarThrottle > THROTTLEIDLE)) 
    84ca:	2b 5f       	subi	r18, 0xFB	; 251
    84cc:	3f 4f       	sbci	r19, 0xFF	; 255
    84ce:	2b 30       	cpi	r18, 0x0B	; 11
    84d0:	31 05       	cpc	r19, r1
    84d2:	38 f4       	brcc	.+14     	; 0x84e2 <RxGetChannels+0x106>
    84d4:	20 91 2b 08 	lds	r18, 0x082B
    84d8:	30 91 2c 08 	lds	r19, 0x082C
    84dc:	23 33       	cpi	r18, 0x33	; 51
    84de:	31 05       	cpc	r19, r1
    84e0:	24 f0       	brlt	.+8      	; 0x84ea <RxGetChannels+0x10e>
	{
		Flight_flags |= (1 << RxActivity);
    84e2:	20 91 1f 05 	lds	r18, 0x051F
    84e6:	21 60       	ori	r18, 0x01	; 1
    84e8:	03 c0       	rjmp	.+6      	; 0x84f0 <RxGetChannels+0x114>
	}
	else 
	{
		Flight_flags &= ~(1 << RxActivity);
    84ea:	20 91 1f 05 	lds	r18, 0x051F
    84ee:	2e 7f       	andi	r18, 0xFE	; 254
    84f0:	20 93 1f 05 	sts	0x051F, r18
	}
	
	// Preset RCinputs[NOCHAN] for sanity
	RCinputs[NOCHAN] = 0;
    84f4:	10 92 3e 08 	sts	0x083E, r1
    84f8:	10 92 3d 08 	sts	0x083D, r1

	OldRxSum = RxSum;
    84fc:	90 93 3d 05 	sts	0x053D, r25
    8500:	80 93 3c 05 	sts	0x053C, r24
    8504:	08 95       	ret

00008506 <CenterSticks>:
}

// Center sticks on request from Menu
void CenterSticks(void)		
{
    8506:	0f 93       	push	r16
    8508:	1f 93       	push	r17
    850a:	cf 93       	push	r28
    850c:	df 93       	push	r29
    850e:	cd b7       	in	r28, 0x3d	; 61
    8510:	de b7       	in	r29, 0x3e	; 62
    8512:	60 97       	sbiw	r28, 0x10	; 16
    8514:	0f b6       	in	r0, 0x3f	; 63
    8516:	f8 94       	cli
    8518:	de bf       	out	0x3e, r29	; 62
    851a:	0f be       	out	0x3f, r0	; 63
    851c:	cd bf       	out	0x3d, r28	; 61
	uint8_t i, j;
	uint16_t RxChannelZeroOffset[MAX_RC_CHANNELS] = {0,0,0,0,0,0,0,0};
    851e:	8e 01       	movw	r16, r28
    8520:	0f 5f       	subi	r16, 0xFF	; 255
    8522:	1f 4f       	sbci	r17, 0xFF	; 255
    8524:	80 e1       	ldi	r24, 0x10	; 16
    8526:	d8 01       	movw	r26, r16
    8528:	1d 92       	st	X+, r1
    852a:	8a 95       	dec	r24
    852c:	e9 f7       	brne	.-6      	; 0x8528 <CenterSticks+0x22>
    852e:	68 e0       	ldi	r22, 0x08	; 8
	OldRxSum = RxSum;
}

// Center sticks on request from Menu
void CenterSticks(void)		
{
    8530:	d8 01       	movw	r26, r16
    8532:	80 e0       	ldi	r24, 0x00	; 0
    8534:	90 e0       	ldi	r25, 0x00	; 0
	// RxChannel will auto-update every RC frame (normally 46Hz or so)
	for (i=0; i<8; i++)
	{
		for (j=0; j<MAX_RC_CHANNELS; j++)
		{
			RxChannelZeroOffset[j] += RxChannel[j];
    8536:	9c 01       	movw	r18, r24
    8538:	22 0f       	add	r18, r18
    853a:	33 1f       	adc	r19, r19
    853c:	24 54       	subi	r18, 0x44	; 68
    853e:	38 4f       	sbci	r19, 0xF8	; 248
    8540:	f9 01       	movw	r30, r18
    8542:	40 81       	ld	r20, Z
    8544:	51 81       	ldd	r21, Z+1	; 0x01
    8546:	2d 91       	ld	r18, X+
    8548:	3c 91       	ld	r19, X
    854a:	11 97       	sbiw	r26, 0x01	; 1
    854c:	24 0f       	add	r18, r20
    854e:	35 1f       	adc	r19, r21
    8550:	2d 93       	st	X+, r18
    8552:	3d 93       	st	X+, r19
    8554:	01 96       	adiw	r24, 0x01	; 1

	// Take an average of eight readings
	// RxChannel will auto-update every RC frame (normally 46Hz or so)
	for (i=0; i<8; i++)
	{
		for (j=0; j<MAX_RC_CHANNELS; j++)
    8556:	88 30       	cpi	r24, 0x08	; 8
    8558:	91 05       	cpc	r25, r1
    855a:	69 f7       	brne	.-38     	; 0x8536 <CenterSticks+0x30>
    855c:	ff e7       	ldi	r31, 0x7F	; 127
    855e:	2a e1       	ldi	r18, 0x1A	; 26
    8560:	86 e0       	ldi	r24, 0x06	; 6
    8562:	f1 50       	subi	r31, 0x01	; 1
    8564:	20 40       	sbci	r18, 0x00	; 0
    8566:	80 40       	sbci	r24, 0x00	; 0
    8568:	e1 f7       	brne	.-8      	; 0x8562 <CenterSticks+0x5c>
    856a:	00 c0       	rjmp	.+0      	; 0x856c <CenterSticks+0x66>
    856c:	00 00       	nop
    856e:	61 50       	subi	r22, 0x01	; 1
	uint8_t i, j;
	uint16_t RxChannelZeroOffset[MAX_RC_CHANNELS] = {0,0,0,0,0,0,0,0};

	// Take an average of eight readings
	// RxChannel will auto-update every RC frame (normally 46Hz or so)
	for (i=0; i<8; i++)
    8570:	f9 f6       	brne	.-66     	; 0x8530 <CenterSticks+0x2a>
    8572:	ad e8       	ldi	r26, 0x8D	; 141
    8574:	b7 e0       	ldi	r27, 0x07	; 7
    8576:	9e 01       	movw	r18, r28
    8578:	2f 5e       	subi	r18, 0xEF	; 239
    857a:	3f 4f       	sbci	r19, 0xFF	; 255
    857c:	f8 01       	movw	r30, r16
		_delay_ms(100); // Wait for a new frame
	}

	for (i=0;i<MAX_RC_CHANNELS;i++)
	{
		Config.RxChannelZeroOffset[i] = ((RxChannelZeroOffset[i] + 4) >> 3); // Round and divide by 8
    857e:	81 91       	ld	r24, Z+
    8580:	91 91       	ld	r25, Z+
    8582:	04 96       	adiw	r24, 0x04	; 4
    8584:	43 e0       	ldi	r20, 0x03	; 3
    8586:	96 95       	lsr	r25
    8588:	87 95       	ror	r24
    858a:	4a 95       	dec	r20
    858c:	e1 f7       	brne	.-8      	; 0x8586 <CenterSticks+0x80>
    858e:	8d 93       	st	X+, r24
    8590:	9d 93       	st	X+, r25
			RxChannelZeroOffset[j] += RxChannel[j];
		}
		_delay_ms(100); // Wait for a new frame
	}

	for (i=0;i<MAX_RC_CHANNELS;i++)
    8592:	e2 17       	cp	r30, r18
    8594:	f3 07       	cpc	r31, r19
    8596:	99 f7       	brne	.-26     	; 0x857e <CenterSticks+0x78>
	{
		Config.RxChannelZeroOffset[i] = ((RxChannelZeroOffset[i] + 4) >> 3); // Round and divide by 8
	}

	Save_Config_to_EEPROM();
}
    8598:	60 96       	adiw	r28, 0x10	; 16
    859a:	0f b6       	in	r0, 0x3f	; 63
    859c:	f8 94       	cli
    859e:	de bf       	out	0x3e, r29	; 62
    85a0:	0f be       	out	0x3f, r0	; 63
    85a2:	cd bf       	out	0x3d, r28	; 61
    85a4:	df 91       	pop	r29
    85a6:	cf 91       	pop	r28
    85a8:	1f 91       	pop	r17
    85aa:	0f 91       	pop	r16
	for (i=0;i<MAX_RC_CHANNELS;i++)
	{
		Config.RxChannelZeroOffset[i] = ((RxChannelZeroOffset[i] + 4) >> 3); // Round and divide by 8
	}

	Save_Config_to_EEPROM();
    85ac:	0c 94 9c 16 	jmp	0x2d38	; 0x2d38 <Save_Config_to_EEPROM>

000085b0 <output_servo_ppm>:
//************************************************************

volatile uint16_t ServoOut[MAX_OUTPUTS];

void output_servo_ppm(uint8_t ServoFlag)
{
    85b0:	8f 92       	push	r8
    85b2:	9f 92       	push	r9
    85b4:	af 92       	push	r10
    85b6:	bf 92       	push	r11
    85b8:	df 92       	push	r13
    85ba:	ef 92       	push	r14
    85bc:	ff 92       	push	r15
    85be:	0f 93       	push	r16
    85c0:	1f 93       	push	r17
    85c2:	cf 93       	push	r28
    85c4:	df 93       	push	r29
    85c6:	d8 2e       	mov	r13, r24
    85c8:	09 e4       	ldi	r16, 0x49	; 73
    85ca:	16 e0       	ldi	r17, 0x06	; 6
    85cc:	c0 e0       	ldi	r28, 0x00	; 0
    85ce:	d0 e0       	ldi	r29, 0x00	; 0
			temp = ((temp - 3750) >> 1) + 1500;
		}
		else
		{
			// Scale servo from 2500~5000 to 1000~2000
			temp = ((temp << 2) + 5) / 10; 	// Round and convert	
    85d0:	ea e0       	ldi	r30, 0x0A	; 10
    85d2:	8e 2e       	mov	r8, r30
    85d4:	91 2c       	mov	r9, r1
    85d6:	a1 2c       	mov	r10, r1
    85d8:	b1 2c       	mov	r11, r1
	uint8_t i = 0;

	// Re-span numbers from internal values to microseconds
	for (i = 0; i < MAX_OUTPUTS; i++)
	{
		temp = ServoOut[i];					// Promote to 32 bits
    85da:	7e 01       	movw	r14, r28
    85dc:	ee 0c       	add	r14, r14
    85de:	ff 1c       	adc	r15, r15
    85e0:	f7 01       	movw	r30, r14
    85e2:	e1 5c       	subi	r30, 0xC1	; 193
    85e4:	f7 4f       	sbci	r31, 0xF7	; 247
    85e6:	20 81       	ld	r18, Z
    85e8:	31 81       	ldd	r19, Z+1	; 0x01
    85ea:	a9 01       	movw	r20, r18
    85ec:	60 e0       	ldi	r22, 0x00	; 0
    85ee:	70 e0       	ldi	r23, 0x00	; 0

		// Check for motor marker and ignore if set
		if (Config.Channel[i].Motor_marker == MOTOR)
    85f0:	f8 01       	movw	r30, r16
    85f2:	80 81       	ld	r24, Z
    85f4:	82 30       	cpi	r24, 0x02	; 2
    85f6:	79 f4       	brne	.+30     	; 0x8616 <output_servo_ppm+0x66>
		{
			// Scale servo from 2500~5000 to 875~2125
			temp = ((temp - 3750) >> 1) + 1500;
    85f8:	9a 01       	movw	r18, r20
    85fa:	ab 01       	movw	r20, r22
    85fc:	26 5a       	subi	r18, 0xA6	; 166
    85fe:	3e 40       	sbci	r19, 0x0E	; 14
    8600:	41 09       	sbc	r20, r1
    8602:	51 09       	sbc	r21, r1
    8604:	56 95       	lsr	r21
    8606:	47 95       	ror	r20
    8608:	37 95       	ror	r19
    860a:	27 95       	ror	r18
    860c:	24 52       	subi	r18, 0x24	; 36
    860e:	3a 4f       	sbci	r19, 0xFA	; 250
    8610:	4f 4f       	sbci	r20, 0xFF	; 255
    8612:	5f 4f       	sbci	r21, 0xFF	; 255
    8614:	11 c0       	rjmp	.+34     	; 0x8638 <output_servo_ppm+0x88>
		}
		else
		{
			// Scale servo from 2500~5000 to 1000~2000
			temp = ((temp << 2) + 5) / 10; 	// Round and convert	
    8616:	cb 01       	movw	r24, r22
    8618:	ba 01       	movw	r22, r20
    861a:	52 e0       	ldi	r21, 0x02	; 2
    861c:	66 0f       	add	r22, r22
    861e:	77 1f       	adc	r23, r23
    8620:	88 1f       	adc	r24, r24
    8622:	99 1f       	adc	r25, r25
    8624:	5a 95       	dec	r21
    8626:	d1 f7       	brne	.-12     	; 0x861c <output_servo_ppm+0x6c>
    8628:	6b 5f       	subi	r22, 0xFB	; 251
    862a:	7f 4f       	sbci	r23, 0xFF	; 255
    862c:	8f 4f       	sbci	r24, 0xFF	; 255
    862e:	9f 4f       	sbci	r25, 0xFF	; 255
    8630:	a5 01       	movw	r20, r10
    8632:	94 01       	movw	r18, r8
    8634:	0e 94 1a 47 	call	0x8e34	; 0x8e34 <__udivmodsi4>
		}
		
		ServoOut[i] = (uint16_t)temp;
    8638:	f7 01       	movw	r30, r14
    863a:	e1 5c       	subi	r30, 0xC1	; 193
    863c:	f7 4f       	sbci	r31, 0xF7	; 247
    863e:	31 83       	std	Z+1, r19	; 0x01
    8640:	20 83       	st	Z, r18
    8642:	21 96       	adiw	r28, 0x01	; 1
    8644:	0a 5d       	subi	r16, 0xDA	; 218
    8646:	1f 4f       	sbci	r17, 0xFF	; 255
{
	uint32_t temp;
	uint8_t i = 0;

	// Re-span numbers from internal values to microseconds
	for (i = 0; i < MAX_OUTPUTS; i++)
    8648:	c8 30       	cpi	r28, 0x08	; 8
    864a:	d1 05       	cpc	r29, r1
    864c:	31 f6       	brne	.-116    	; 0x85da <output_servo_ppm+0x2a>
		
		ServoOut[i] = (uint16_t)temp;
	}

	// Re-sample throttle value
	MonopolarThrottle = RxChannel[THROTTLE] - Config.RxChannelZeroOffset[THROTTLE];
    864e:	80 91 bc 07 	lds	r24, 0x07BC
    8652:	90 91 bd 07 	lds	r25, 0x07BD
    8656:	20 91 8d 07 	lds	r18, 0x078D
    865a:	30 91 8e 07 	lds	r19, 0x078E
    865e:	82 1b       	sub	r24, r18
    8660:	93 0b       	sbc	r25, r19
    8662:	90 93 2c 08 	sts	0x082C, r25
    8666:	80 93 2b 08 	sts	0x082B, r24

	// Check for motor flags if throttle is below arming minimum or disarmed
	// and set all motors to minimum throttle if so
	if 	(
			(MonopolarThrottle < THROTTLEIDLE) || 
    866a:	80 91 2b 08 	lds	r24, 0x082B
    866e:	90 91 2c 08 	lds	r25, 0x082C
	// Re-sample throttle value
	MonopolarThrottle = RxChannel[THROTTLE] - Config.RxChannelZeroOffset[THROTTLE];

	// Check for motor flags if throttle is below arming minimum or disarmed
	// and set all motors to minimum throttle if so
	if 	(
    8672:	c2 97       	sbiw	r24, 0x32	; 50
    8674:	ac f0       	brlt	.+42     	; 0x86a0 <output_servo_ppm+0xf0>
			(MonopolarThrottle < THROTTLEIDLE) || 
			((General_error & (1 << DISARMED)) != 0)
    8676:	80 91 20 05 	lds	r24, 0x0520
	MonopolarThrottle = RxChannel[THROTTLE] - Config.RxChannelZeroOffset[THROTTLE];

	// Check for motor flags if throttle is below arming minimum or disarmed
	// and set all motors to minimum throttle if so
	if 	(
			(MonopolarThrottle < THROTTLEIDLE) || 
    867a:	82 fd       	sbrc	r24, 2
    867c:	11 c0       	rjmp	.+34     	; 0x86a0 <output_servo_ppm+0xf0>
		}
	}

	// Determine output rate based on device type
	// Suppress outputs during throttle high error
	if((General_error & (1 << THROTTLE_HIGH)) == 0)
    867e:	80 91 20 05 	lds	r24, 0x0520
    8682:	80 fd       	sbrc	r24, 0
    8684:	24 c0       	rjmp	.+72     	; 0x86ce <output_servo_ppm+0x11e>
	{
		// Reset JitterFlag immediately before PWM generation
		JitterFlag = false;
    8686:	10 92 e7 07 	sts	0x07E7, r1
	
		// We now care about interrupts
		JitterGate = true;
    868a:	81 e0       	ldi	r24, 0x01	; 1
    868c:	80 93 e6 07 	sts	0x07E6, r24

		// Pass address of ServoOut array
		output_servo_ppm_asm(&ServoOut[0], ServoFlag);
    8690:	6d 2d       	mov	r22, r13
    8692:	8f e3       	ldi	r24, 0x3F	; 63
    8694:	98 e0       	ldi	r25, 0x08	; 8
    8696:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <output_servo_ppm_asm>
		
		// We no longer care about interrupts
		JitterGate = false;
    869a:	10 92 e6 07 	sts	0x07E6, r1
    869e:	17 c0       	rjmp	.+46     	; 0x86ce <output_servo_ppm+0x11e>
//************************************************************

volatile uint16_t ServoOut[MAX_OUTPUTS];

void output_servo_ppm(uint8_t ServoFlag)
{
    86a0:	e9 e4       	ldi	r30, 0x49	; 73
    86a2:	f6 e0       	ldi	r31, 0x06	; 6
    86a4:	80 e0       	ldi	r24, 0x00	; 0
    86a6:	90 e0       	ldi	r25, 0x00	; 0
		{
			// Check for motor marker
			if (Config.Channel[i].Motor_marker == MOTOR)
			{
				// Set output to minimum pulse width (1000us)
				ServoOut[i] = MOTORMIN;
    86a8:	28 ee       	ldi	r18, 0xE8	; 232
    86aa:	33 e0       	ldi	r19, 0x03	; 3
	{
		// For each output
		for (i = 0; i < MAX_OUTPUTS; i++)
		{
			// Check for motor marker
			if (Config.Channel[i].Motor_marker == MOTOR)
    86ac:	40 81       	ld	r20, Z
    86ae:	42 30       	cpi	r20, 0x02	; 2
    86b0:	41 f4       	brne	.+16     	; 0x86c2 <output_servo_ppm+0x112>
			{
				// Set output to minimum pulse width (1000us)
				ServoOut[i] = MOTORMIN;
    86b2:	dc 01       	movw	r26, r24
    86b4:	aa 0f       	add	r26, r26
    86b6:	bb 1f       	adc	r27, r27
    86b8:	a1 5c       	subi	r26, 0xC1	; 193
    86ba:	b7 4f       	sbci	r27, 0xF7	; 247
    86bc:	11 96       	adiw	r26, 0x01	; 1
    86be:	3c 93       	st	X, r19
    86c0:	2e 93       	st	-X, r18
    86c2:	01 96       	adiw	r24, 0x01	; 1
    86c4:	b6 96       	adiw	r30, 0x26	; 38
			(MonopolarThrottle < THROTTLEIDLE) || 
			((General_error & (1 << DISARMED)) != 0)
		)
	{
		// For each output
		for (i = 0; i < MAX_OUTPUTS; i++)
    86c6:	88 30       	cpi	r24, 0x08	; 8
    86c8:	91 05       	cpc	r25, r1
    86ca:	81 f7       	brne	.-32     	; 0x86ac <output_servo_ppm+0xfc>
    86cc:	d8 cf       	rjmp	.-80     	; 0x867e <output_servo_ppm+0xce>
		output_servo_ppm_asm(&ServoOut[0], ServoFlag);
		
		// We no longer care about interrupts
		JitterGate = false;
	}
}
    86ce:	df 91       	pop	r29
    86d0:	cf 91       	pop	r28
    86d2:	1f 91       	pop	r17
    86d4:	0f 91       	pop	r16
    86d6:	ff 90       	pop	r15
    86d8:	ef 90       	pop	r14
    86da:	df 90       	pop	r13
    86dc:	bf 90       	pop	r11
    86de:	af 90       	pop	r10
    86e0:	9f 90       	pop	r9
    86e2:	8f 90       	pop	r8
    86e4:	08 95       	ret

000086e6 <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
  TWSR = 0;                         /* no prescaler */
    86e6:	10 92 b9 00 	sts	0x00B9, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
    86ea:	81 e1       	ldi	r24, 0x11	; 17
    86ec:	80 93 b8 00 	sts	0x00B8, r24
    86f0:	08 95       	ret

000086f2 <i2c_start>:
{
	uint32_t  i2c_timer = 0;
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    86f2:	94 ea       	ldi	r25, 0xA4	; 164
    86f4:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
    86f8:	4f ef       	ldi	r20, 0xFF	; 255
    86fa:	50 e0       	ldi	r21, 0x00	; 0
    86fc:	60 e0       	ldi	r22, 0x00	; 0
    86fe:	70 e0       	ldi	r23, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    8700:	90 91 bc 00 	lds	r25, 0x00BC
    8704:	97 fd       	sbrc	r25, 7
    8706:	06 c0       	rjmp	.+12     	; 0x8714 <i2c_start+0x22>
    8708:	41 50       	subi	r20, 0x01	; 1
    870a:	51 09       	sbc	r21, r1
    870c:	61 09       	sbc	r22, r1
    870e:	71 09       	sbc	r23, r1
    8710:	b8 f7       	brcc	.-18     	; 0x8700 <i2c_start+0xe>
    8712:	06 c0       	rjmp	.+12     	; 0x8720 <i2c_start+0x2e>
	if(i2c_timer == 0)
    8714:	45 2b       	or	r20, r21
    8716:	46 2b       	or	r20, r22
    8718:	47 2b       	or	r20, r23
    871a:	11 f4       	brne	.+4      	; 0x8720 <i2c_start+0x2e>
		return 1;
    871c:	81 e0       	ldi	r24, 0x01	; 1
    871e:	08 95       	ret

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    8720:	90 91 b9 00 	lds	r25, 0x00B9
    8724:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
    8726:	98 30       	cpi	r25, 0x08	; 8
    8728:	11 f0       	breq	.+4      	; 0x872e <i2c_start+0x3c>
    872a:	90 31       	cpi	r25, 0x10	; 16
    872c:	b9 f7       	brne	.-18     	; 0x871c <i2c_start+0x2a>

	// send device address
	TWDR = address;
    872e:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    8732:	84 e8       	ldi	r24, 0x84	; 132
    8734:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	i2c_timer = I2C_TIMER_DELAY;
    8738:	8f ef       	ldi	r24, 0xFF	; 255
    873a:	90 e0       	ldi	r25, 0x00	; 0
    873c:	a0 e0       	ldi	r26, 0x00	; 0
    873e:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    8740:	20 91 bc 00 	lds	r18, 0x00BC
    8744:	27 fd       	sbrc	r18, 7
    8746:	05 c0       	rjmp	.+10     	; 0x8752 <i2c_start+0x60>
    8748:	01 97       	sbiw	r24, 0x01	; 1
    874a:	a1 09       	sbc	r26, r1
    874c:	b1 09       	sbc	r27, r1
    874e:	c0 f7       	brcc	.-16     	; 0x8740 <i2c_start+0x4e>
    8750:	04 c0       	rjmp	.+8      	; 0x875a <i2c_start+0x68>
	if(i2c_timer == 0)
    8752:	89 2b       	or	r24, r25
    8754:	8a 2b       	or	r24, r26
    8756:	8b 2b       	or	r24, r27
    8758:	09 f3       	breq	.-62     	; 0x871c <i2c_start+0x2a>
		return 1;

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    875a:	80 91 b9 00 	lds	r24, 0x00B9
    875e:	88 7f       	andi	r24, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
    8760:	88 31       	cpi	r24, 0x18	; 24
    8762:	11 f0       	breq	.+4      	; 0x8768 <i2c_start+0x76>
    8764:	80 34       	cpi	r24, 0x40	; 64
    8766:	d1 f6       	brne	.-76     	; 0x871c <i2c_start+0x2a>

	return 0;
    8768:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */
    876a:	08 95       	ret

0000876c <i2c_start_wait>:
	uint8_t   twst;

    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    876c:	44 ea       	ldi	r20, 0xA4	; 164
    	twst = TW_STATUS & 0xF8;
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
    	TWCR = (1<<TWINT) | (1<<TWEN);
    876e:	54 e8       	ldi	r21, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    8770:	64 e9       	ldi	r22, 0x94	; 148
	uint8_t   twst;

    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    8772:	40 93 bc 00 	sts	0x00BC, r20
    
    	// wait until transmission completed
	    i2c_timer = I2C_TIMER_DELAY;
    	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    8776:	20 e0       	ldi	r18, 0x00	; 0
    8778:	30 e0       	ldi	r19, 0x00	; 0
    877a:	90 91 bc 00 	lds	r25, 0x00BC
    877e:	97 fd       	sbrc	r25, 7
    8780:	06 c0       	rjmp	.+12     	; 0x878e <i2c_start_wait+0x22>
    8782:	2f 5f       	subi	r18, 0xFF	; 255
    8784:	3f 4f       	sbci	r19, 0xFF	; 255
    8786:	21 15       	cp	r18, r1
    8788:	91 e0       	ldi	r25, 0x01	; 1
    878a:	39 07       	cpc	r19, r25
    878c:	b1 f7       	brne	.-20     	; 0x877a <i2c_start_wait+0xe>

    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    878e:	90 91 b9 00 	lds	r25, 0x00B9
    8792:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    8794:	98 30       	cpi	r25, 0x08	; 8
    8796:	11 f0       	breq	.+4      	; 0x879c <i2c_start_wait+0x30>
    8798:	90 31       	cpi	r25, 0x10	; 16
    879a:	59 f7       	brne	.-42     	; 0x8772 <i2c_start_wait+0x6>
    
    	// send device address
    	TWDR = address;
    879c:	80 93 bb 00 	sts	0x00BB, r24
    	TWCR = (1<<TWINT) | (1<<TWEN);
    87a0:	50 93 bc 00 	sts	0x00BC, r21
    
    	// wail until transmission completed
    	i2c_timer = I2C_TIMER_DELAY;
    	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    87a4:	20 e0       	ldi	r18, 0x00	; 0
    87a6:	30 e0       	ldi	r19, 0x00	; 0
    87a8:	90 91 bc 00 	lds	r25, 0x00BC
    87ac:	97 fd       	sbrc	r25, 7
    87ae:	06 c0       	rjmp	.+12     	; 0x87bc <i2c_start_wait+0x50>
    87b0:	2f 5f       	subi	r18, 0xFF	; 255
    87b2:	3f 4f       	sbci	r19, 0xFF	; 255
    87b4:	21 15       	cp	r18, r1
    87b6:	91 e0       	ldi	r25, 0x01	; 1
    87b8:	39 07       	cpc	r19, r25
    87ba:	b1 f7       	brne	.-20     	; 0x87a8 <i2c_start_wait+0x3c>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    87bc:	90 91 b9 00 	lds	r25, 0x00B9
    87c0:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    87c2:	90 32       	cpi	r25, 0x20	; 32
    87c4:	11 f0       	breq	.+4      	; 0x87ca <i2c_start_wait+0x5e>
    87c6:	98 35       	cpi	r25, 0x58	; 88
    87c8:	79 f4       	brne	.+30     	; 0x87e8 <i2c_start_wait+0x7c>
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    87ca:	60 93 bc 00 	sts	0x00BC, r22
	        
	        // wait until stop condition is executed and bus released
	        i2c_timer = I2C_TIMER_DELAY;
	        while((TWCR & (1<<TWSTO)) && i2c_timer--);
    87ce:	20 e0       	ldi	r18, 0x00	; 0
    87d0:	30 e0       	ldi	r19, 0x00	; 0
    87d2:	90 91 bc 00 	lds	r25, 0x00BC
    87d6:	94 ff       	sbrs	r25, 4
    87d8:	cc cf       	rjmp	.-104    	; 0x8772 <i2c_start_wait+0x6>
    87da:	2f 5f       	subi	r18, 0xFF	; 255
    87dc:	3f 4f       	sbci	r19, 0xFF	; 255
    87de:	21 15       	cp	r18, r1
    87e0:	91 e0       	ldi	r25, 0x01	; 1
    87e2:	39 07       	cpc	r19, r25
    87e4:	b1 f7       	brne	.-20     	; 0x87d2 <i2c_start_wait+0x66>
    87e6:	c5 cf       	rjmp	.-118    	; 0x8772 <i2c_start_wait+0x6>
    87e8:	08 95       	ret

000087ea <i2c_rep_start>:
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );
    87ea:	0c 94 79 43 	jmp	0x86f2	; 0x86f2 <i2c_start>

000087ee <i2c_stop>:
void i2c_stop(void)
{
	uint32_t  i2c_timer = 0;

    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    87ee:	84 e9       	ldi	r24, 0x94	; 148
    87f0:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait until stop condition is executed and bus released
	i2c_timer = I2C_TIMER_DELAY;
	while((TWCR & (1<<TWSTO)) && i2c_timer--);
    87f4:	80 e0       	ldi	r24, 0x00	; 0
    87f6:	90 e0       	ldi	r25, 0x00	; 0
    87f8:	20 91 bc 00 	lds	r18, 0x00BC
    87fc:	24 ff       	sbrs	r18, 4
    87fe:	05 c0       	rjmp	.+10     	; 0x880a <i2c_stop+0x1c>
    8800:	01 96       	adiw	r24, 0x01	; 1
    8802:	81 15       	cp	r24, r1
    8804:	21 e0       	ldi	r18, 0x01	; 1
    8806:	92 07       	cpc	r25, r18
    8808:	b9 f7       	brne	.-18     	; 0x87f8 <i2c_stop+0xa>
    880a:	08 95       	ret

0000880c <i2c_write>:
{	
	uint32_t  i2c_timer = 0;
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    880c:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    8810:	84 e8       	ldi	r24, 0x84	; 132
    8812:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
    8816:	8f ef       	ldi	r24, 0xFF	; 255
    8818:	90 e0       	ldi	r25, 0x00	; 0
    881a:	a0 e0       	ldi	r26, 0x00	; 0
    881c:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    881e:	20 91 bc 00 	lds	r18, 0x00BC
    8822:	27 fd       	sbrc	r18, 7
    8824:	05 c0       	rjmp	.+10     	; 0x8830 <i2c_write+0x24>
    8826:	01 97       	sbiw	r24, 0x01	; 1
    8828:	a1 09       	sbc	r26, r1
    882a:	b1 09       	sbc	r27, r1
    882c:	c0 f7       	brcc	.-16     	; 0x881e <i2c_write+0x12>
    882e:	04 c0       	rjmp	.+8      	; 0x8838 <i2c_write+0x2c>
	if(i2c_timer == 0)
    8830:	89 2b       	or	r24, r25
    8832:	8a 2b       	or	r24, r26
    8834:	8b 2b       	or	r24, r27
    8836:	41 f0       	breq	.+16     	; 0x8848 <i2c_write+0x3c>
		return 1;

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    8838:	90 91 b9 00 	lds	r25, 0x00B9
    883c:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
    883e:	81 e0       	ldi	r24, 0x01	; 1
    8840:	98 32       	cpi	r25, 0x28	; 40
    8842:	19 f4       	brne	.+6      	; 0x884a <i2c_write+0x3e>
    8844:	80 e0       	ldi	r24, 0x00	; 0
    8846:	08 95       	ret

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 1;
    8848:	81 e0       	ldi	r24, 0x01	; 1
	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
    884a:	08 95       	ret

0000884c <i2c_readAck>:
*************************************************************************/
unsigned char i2c_readAck(void)
{
	uint32_t  i2c_timer = 0;

	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    884c:	84 ec       	ldi	r24, 0xC4	; 196
    884e:	80 93 bc 00 	sts	0x00BC, r24
	i2c_timer = I2C_TIMER_DELAY;
    8852:	8f ef       	ldi	r24, 0xFF	; 255
    8854:	90 e0       	ldi	r25, 0x00	; 0
    8856:	a0 e0       	ldi	r26, 0x00	; 0
    8858:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    885a:	20 91 bc 00 	lds	r18, 0x00BC
    885e:	27 fd       	sbrc	r18, 7
    8860:	05 c0       	rjmp	.+10     	; 0x886c <i2c_readAck+0x20>
    8862:	01 97       	sbiw	r24, 0x01	; 1
    8864:	a1 09       	sbc	r26, r1
    8866:	b1 09       	sbc	r27, r1
    8868:	c0 f7       	brcc	.-16     	; 0x885a <i2c_readAck+0xe>
    886a:	04 c0       	rjmp	.+8      	; 0x8874 <i2c_readAck+0x28>
	if(i2c_timer == 0)
    886c:	89 2b       	or	r24, r25
    886e:	8a 2b       	or	r24, r26
    8870:	8b 2b       	or	r24, r27
    8872:	19 f0       	breq	.+6      	; 0x887a <i2c_readAck+0x2e>
		return 0;

    return TWDR;
    8874:	80 91 bb 00 	lds	r24, 0x00BB
    8878:	08 95       	ret

	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 0;
    887a:	80 e0       	ldi	r24, 0x00	; 0

    return TWDR;

}/* i2c_readAck */
    887c:	08 95       	ret

0000887e <i2c_readNak>:
*************************************************************************/
unsigned char i2c_readNak(void)
{
	uint32_t  i2c_timer = 0;

	TWCR = (1<<TWINT) | (1<<TWEN);
    887e:	84 e8       	ldi	r24, 0x84	; 132
    8880:	80 93 bc 00 	sts	0x00BC, r24
	i2c_timer = I2C_TIMER_DELAY;
    8884:	8f ef       	ldi	r24, 0xFF	; 255
    8886:	90 e0       	ldi	r25, 0x00	; 0
    8888:	a0 e0       	ldi	r26, 0x00	; 0
    888a:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    888c:	20 91 bc 00 	lds	r18, 0x00BC
    8890:	27 fd       	sbrc	r18, 7
    8892:	05 c0       	rjmp	.+10     	; 0x889e <i2c_readNak+0x20>
    8894:	01 97       	sbiw	r24, 0x01	; 1
    8896:	a1 09       	sbc	r26, r1
    8898:	b1 09       	sbc	r27, r1
    889a:	c0 f7       	brcc	.-16     	; 0x888c <i2c_readNak+0xe>
    889c:	04 c0       	rjmp	.+8      	; 0x88a6 <i2c_readNak+0x28>
	if(i2c_timer == 0)
    889e:	89 2b       	or	r24, r25
    88a0:	8a 2b       	or	r24, r26
    88a2:	8b 2b       	or	r24, r27
    88a4:	19 f0       	breq	.+6      	; 0x88ac <i2c_readNak+0x2e>
		return 0;
	
    return TWDR;
    88a6:	80 91 bb 00 	lds	r24, 0x00BB
    88aa:	08 95       	ret

	TWCR = (1<<TWINT) | (1<<TWEN);
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 0;
    88ac:	80 e0       	ldi	r24, 0x00	; 0
	
    return TWDR;

}/* i2c_readNak */
    88ae:	08 95       	ret

000088b0 <init_uart>:
#define BAUD_PRESCALE_SPEKTRUM ((F_CPU + USART_BAUDRATE_SPEKTRUM * 8L) / (USART_BAUDRATE_SPEKTRUM * 16L) - 1) // Default RX rate for Spektrum

// Initialise UART with adjusted bitrate
void init_uart(void)
{
	cli();								// Atmel wants global interrupts disabled when changing UART setup on the fly
    88b0:	f8 94       	cli
	
	UCSR0B &= ~(1 << RXCIE0);			// Disable serial interrupt
    88b2:	80 91 c1 00 	lds	r24, 0x00C1
    88b6:	8f 77       	andi	r24, 0x7F	; 127
    88b8:	80 93 c1 00 	sts	0x00C1, r24

	while (UCSR0A & (1 << RXC0))		// Make sure there is nothing in the RX0 reg
    88bc:	80 91 c0 00 	lds	r24, 0x00C0
    88c0:	87 ff       	sbrs	r24, 7
    88c2:	05 c0       	rjmp	.+10     	; 0x88ce <init_uart+0x1e>
	{
		UCSR0C = UDR0;					// So as not to annoy Studio 6, use UCSR0C as a temp reg until UDR0 empty. Sorry, UCSR0C...
    88c4:	80 91 c6 00 	lds	r24, 0x00C6
    88c8:	80 93 c2 00 	sts	0x00C2, r24
    88cc:	f7 cf       	rjmp	.-18     	; 0x88bc <init_uart+0xc>
	}
	
	// Reset UART regs to a known state
	UCSR0A = 0; // U2X = 0, no master mode, flags cleared 
    88ce:	10 92 c0 00 	sts	0x00C0, r1
	UCSR0B = 0; // Clear flags, disable tx/rx, 8 bits
    88d2:	10 92 c1 00 	sts	0x00C1, r1
	UCSR0C = 6; // 8N1
    88d6:	86 e0       	ldi	r24, 0x06	; 6
    88d8:	80 93 c2 00 	sts	0x00C2, r24

	switch (Config.RxMode)
    88dc:	80 91 dc 05 	lds	r24, 0x05DC
    88e0:	82 30       	cpi	r24, 0x02	; 2
    88e2:	09 f1       	breq	.+66     	; 0x8926 <init_uart+0x76>
    88e4:	34 f4       	brge	.+12     	; 0x88f2 <init_uart+0x42>
    88e6:	87 fd       	sbrc	r24, 7
    88e8:	41 c0       	rjmp	.+130    	; 0x896c <init_uart+0xbc>
			UCSR0B |=  (1 << RXCIE0);					// Enable serial interrupt
			break;

		case CPPM_MODE:
		case PWM:
			UCSR0B &= 	~(1 << RXEN0);					// Disable receiver in PWM and CPPM modes
    88ea:	80 91 c1 00 	lds	r24, 0x00C1
    88ee:	8f 7e       	andi	r24, 0xEF	; 239
    88f0:	3b c0       	rjmp	.+118    	; 0x8968 <init_uart+0xb8>
	// Reset UART regs to a known state
	UCSR0A = 0; // U2X = 0, no master mode, flags cleared 
	UCSR0B = 0; // Clear flags, disable tx/rx, 8 bits
	UCSR0C = 6; // 8N1

	switch (Config.RxMode)
    88f2:	83 30       	cpi	r24, 0x03	; 3
    88f4:	d9 f5       	brne	.+118    	; 0x896c <init_uart+0xbc>
			UCSR0B |=  (1 << RXCIE0);					// Enable serial interrupt
			break;

		// Spektrum 8N1 (8 data bits / No parity / 1 stop bit / 115.2Kbps)
		case SPEKTRUM: 	
			UCSR0A &=  ~(1 << U2X0);					// Clear the 2x flag
    88f6:	80 91 c0 00 	lds	r24, 0x00C0
    88fa:	8d 7f       	andi	r24, 0xFD	; 253
    88fc:	80 93 c0 00 	sts	0x00C0, r24
			UBRR0H  =  (BAUD_PRESCALE_SPEKTRUM >> 8); 	// Actual = 113636, Error = -1.36%
    8900:	10 92 c5 00 	sts	0x00C5, r1
			UBRR0L  =   BAUD_PRESCALE_SPEKTRUM & 0xff;	// 0x0A (10.35)	
    8904:	8a e0       	ldi	r24, 0x0A	; 10
    8906:	80 93 c4 00 	sts	0x00C4, r24
			UCSR0B |= 	(1 << RXEN0);					// Enable receiver
    890a:	80 91 c1 00 	lds	r24, 0x00C1
    890e:	80 61       	ori	r24, 0x10	; 16
    8910:	80 93 c1 00 	sts	0x00C1, r24
			UCSR0C &=  ~(1 << USBS0); 					// 1 stop bit
    8914:	80 91 c2 00 	lds	r24, 0x00C2
    8918:	87 7f       	andi	r24, 0xF7	; 247
    891a:	80 93 c2 00 	sts	0x00C2, r24
			UCSR0C &=  ~(1 << UPM00) | 					// No parity 
    891e:	80 91 c2 00 	lds	r24, 0x00C2
    8922:	8f 7e       	andi	r24, 0xEF	; 239
    8924:	1c c0       	rjmp	.+56     	; 0x895e <init_uart+0xae>

	switch (Config.RxMode)
	{
		// Futaba S-Bus 8E2 (8 data bits / Even parity / 2 stop bits / 100Kbps)
		case SBUS: 		
			UCSR0A |=  (1 << U2X0);						// Need to set the 2x flag
    8926:	80 91 c0 00 	lds	r24, 0x00C0
    892a:	82 60       	ori	r24, 0x02	; 2
    892c:	80 93 c0 00 	sts	0x00C0, r24
			UBRR0H  = (BAUD_PRESCALE_SBUS >> 8);  		// Actual = 100000 , Error = 0%	
    8930:	10 92 c5 00 	sts	0x00C5, r1
			UBRR0L  =  BAUD_PRESCALE_SBUS & 0xff;		// 0x18 (24)
    8934:	88 e1       	ldi	r24, 0x18	; 24
    8936:	80 93 c4 00 	sts	0x00C4, r24
			UCSR0B |=  (1 << RXEN0);					// Enable receiver
    893a:	80 91 c1 00 	lds	r24, 0x00C1
    893e:	80 61       	ori	r24, 0x10	; 16
    8940:	80 93 c1 00 	sts	0x00C1, r24
			UCSR0C |=  (1 << USBS0); 					// 2 stop bits
    8944:	80 91 c2 00 	lds	r24, 0x00C2
    8948:	88 60       	ori	r24, 0x08	; 8
    894a:	80 93 c2 00 	sts	0x00C2, r24
			UCSR0C &= ~(1 << UPM00); 					// Even parity 
    894e:	80 91 c2 00 	lds	r24, 0x00C2
    8952:	8f 7e       	andi	r24, 0xEF	; 239
    8954:	80 93 c2 00 	sts	0x00C2, r24
			UCSR0C |=  (1 << UPM01); 
    8958:	80 91 c2 00 	lds	r24, 0x00C2
    895c:	80 62       	ori	r24, 0x20	; 32
			UCSR0A &=  ~(1 << U2X0);					// Clear the 2x flag
			UBRR0H  =  (BAUD_PRESCALE_SPEKTRUM >> 8); 	// Actual = 113636, Error = -1.36%
			UBRR0L  =   BAUD_PRESCALE_SPEKTRUM & 0xff;	// 0x0A (10.35)	
			UCSR0B |= 	(1 << RXEN0);					// Enable receiver
			UCSR0C &=  ~(1 << USBS0); 					// 1 stop bit
			UCSR0C &=  ~(1 << UPM00) | 					// No parity 
    895e:	80 93 c2 00 	sts	0x00C2, r24
						(1 << UPM01); 
			UCSR0B |=  (1 << RXCIE0);					// Enable serial interrupt
    8962:	80 91 c1 00 	lds	r24, 0x00C1
    8966:	80 68       	ori	r24, 0x80	; 128
			break;

		case CPPM_MODE:
		case PWM:
			UCSR0B &= 	~(1 << RXEN0);					// Disable receiver in PWM and CPPM modes
    8968:	80 93 c1 00 	sts	0x00C1, r24
		default:
			break;
	}

	// Re-enable interrupts
	sei();
    896c:	78 94       	sei
    896e:	08 95       	ret

00008970 <GetVbat>:

uint16_t GetVbat(void)				// Get battery voltage (VBAT on ADC3)
{
	uint16_t	vBat;				// Battery voltage
		
	read_adc(AIN_VBAT1);				// Multiplication factor = (Display volts / 1024) / (Vbat / 11 / Vref)
    8970:	83 e0       	ldi	r24, 0x03	; 3
    8972:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <read_adc>
	// For Vref = 2.45V, Multiplication factor = 2.632
	// For Vref = 2.305V, Multiplication factor = approx 2.5
	// An input voltage of 10V will results in a value of 999.
	// This means that the number represents units of 10mV.

	vBat = ADCW;
    8976:	80 91 78 00 	lds	r24, 0x0078
    897a:	90 91 79 00 	lds	r25, 0x0079

	// Multiply by 2.578125
	// 2 + 1/2 + 1/16 + 1/64
	vBat = (vBat << 1) + (vBat >> 1) + (vBat >> 4) + (vBat >> 6); // Multiply by 2.578125
    897e:	9c 01       	movw	r18, r24
    8980:	36 95       	lsr	r19
    8982:	27 95       	ror	r18
    8984:	ac 01       	movw	r20, r24
    8986:	44 0f       	add	r20, r20
    8988:	55 1f       	adc	r21, r21
    898a:	24 0f       	add	r18, r20
    898c:	35 1f       	adc	r19, r21
    898e:	ac 01       	movw	r20, r24
    8990:	74 e0       	ldi	r23, 0x04	; 4
    8992:	56 95       	lsr	r21
    8994:	47 95       	ror	r20
    8996:	7a 95       	dec	r23
    8998:	e1 f7       	brne	.-8      	; 0x8992 <GetVbat+0x22>
    899a:	24 0f       	add	r18, r20
    899c:	35 1f       	adc	r19, r21
    899e:	e6 e0       	ldi	r30, 0x06	; 6
    89a0:	96 95       	lsr	r25
    89a2:	87 95       	ror	r24
    89a4:	ea 95       	dec	r30
    89a6:	e1 f7       	brne	.-8      	; 0x89a0 <GetVbat+0x30>

	return vBat;
}
    89a8:	82 0f       	add	r24, r18
    89aa:	93 1f       	adc	r25, r19
    89ac:	08 95       	ret

000089ae <__subsf3>:
    89ae:	50 58       	subi	r21, 0x80	; 128

000089b0 <__addsf3>:
    89b0:	bb 27       	eor	r27, r27
    89b2:	aa 27       	eor	r26, r26
    89b4:	0e d0       	rcall	.+28     	; 0x89d2 <__addsf3x>
    89b6:	75 c1       	rjmp	.+746    	; 0x8ca2 <__fp_round>
    89b8:	66 d1       	rcall	.+716    	; 0x8c86 <__fp_pscA>
    89ba:	30 f0       	brcs	.+12     	; 0x89c8 <__addsf3+0x18>
    89bc:	6b d1       	rcall	.+726    	; 0x8c94 <__fp_pscB>
    89be:	20 f0       	brcs	.+8      	; 0x89c8 <__addsf3+0x18>
    89c0:	31 f4       	brne	.+12     	; 0x89ce <__addsf3+0x1e>
    89c2:	9f 3f       	cpi	r25, 0xFF	; 255
    89c4:	11 f4       	brne	.+4      	; 0x89ca <__addsf3+0x1a>
    89c6:	1e f4       	brtc	.+6      	; 0x89ce <__addsf3+0x1e>
    89c8:	5b c1       	rjmp	.+694    	; 0x8c80 <__fp_nan>
    89ca:	0e f4       	brtc	.+2      	; 0x89ce <__addsf3+0x1e>
    89cc:	e0 95       	com	r30
    89ce:	e7 fb       	bst	r30, 7
    89d0:	51 c1       	rjmp	.+674    	; 0x8c74 <__fp_inf>

000089d2 <__addsf3x>:
    89d2:	e9 2f       	mov	r30, r25
    89d4:	77 d1       	rcall	.+750    	; 0x8cc4 <__fp_split3>
    89d6:	80 f3       	brcs	.-32     	; 0x89b8 <__addsf3+0x8>
    89d8:	ba 17       	cp	r27, r26
    89da:	62 07       	cpc	r22, r18
    89dc:	73 07       	cpc	r23, r19
    89de:	84 07       	cpc	r24, r20
    89e0:	95 07       	cpc	r25, r21
    89e2:	18 f0       	brcs	.+6      	; 0x89ea <__addsf3x+0x18>
    89e4:	71 f4       	brne	.+28     	; 0x8a02 <__addsf3x+0x30>
    89e6:	9e f5       	brtc	.+102    	; 0x8a4e <__addsf3x+0x7c>
    89e8:	8f c1       	rjmp	.+798    	; 0x8d08 <__fp_zero>
    89ea:	0e f4       	brtc	.+2      	; 0x89ee <__addsf3x+0x1c>
    89ec:	e0 95       	com	r30
    89ee:	0b 2e       	mov	r0, r27
    89f0:	ba 2f       	mov	r27, r26
    89f2:	a0 2d       	mov	r26, r0
    89f4:	0b 01       	movw	r0, r22
    89f6:	b9 01       	movw	r22, r18
    89f8:	90 01       	movw	r18, r0
    89fa:	0c 01       	movw	r0, r24
    89fc:	ca 01       	movw	r24, r20
    89fe:	a0 01       	movw	r20, r0
    8a00:	11 24       	eor	r1, r1
    8a02:	ff 27       	eor	r31, r31
    8a04:	59 1b       	sub	r21, r25
    8a06:	99 f0       	breq	.+38     	; 0x8a2e <__addsf3x+0x5c>
    8a08:	59 3f       	cpi	r21, 0xF9	; 249
    8a0a:	50 f4       	brcc	.+20     	; 0x8a20 <__addsf3x+0x4e>
    8a0c:	50 3e       	cpi	r21, 0xE0	; 224
    8a0e:	68 f1       	brcs	.+90     	; 0x8a6a <__addsf3x+0x98>
    8a10:	1a 16       	cp	r1, r26
    8a12:	f0 40       	sbci	r31, 0x00	; 0
    8a14:	a2 2f       	mov	r26, r18
    8a16:	23 2f       	mov	r18, r19
    8a18:	34 2f       	mov	r19, r20
    8a1a:	44 27       	eor	r20, r20
    8a1c:	58 5f       	subi	r21, 0xF8	; 248
    8a1e:	f3 cf       	rjmp	.-26     	; 0x8a06 <__addsf3x+0x34>
    8a20:	46 95       	lsr	r20
    8a22:	37 95       	ror	r19
    8a24:	27 95       	ror	r18
    8a26:	a7 95       	ror	r26
    8a28:	f0 40       	sbci	r31, 0x00	; 0
    8a2a:	53 95       	inc	r21
    8a2c:	c9 f7       	brne	.-14     	; 0x8a20 <__addsf3x+0x4e>
    8a2e:	7e f4       	brtc	.+30     	; 0x8a4e <__addsf3x+0x7c>
    8a30:	1f 16       	cp	r1, r31
    8a32:	ba 0b       	sbc	r27, r26
    8a34:	62 0b       	sbc	r22, r18
    8a36:	73 0b       	sbc	r23, r19
    8a38:	84 0b       	sbc	r24, r20
    8a3a:	ba f0       	brmi	.+46     	; 0x8a6a <__addsf3x+0x98>
    8a3c:	91 50       	subi	r25, 0x01	; 1
    8a3e:	a1 f0       	breq	.+40     	; 0x8a68 <__addsf3x+0x96>
    8a40:	ff 0f       	add	r31, r31
    8a42:	bb 1f       	adc	r27, r27
    8a44:	66 1f       	adc	r22, r22
    8a46:	77 1f       	adc	r23, r23
    8a48:	88 1f       	adc	r24, r24
    8a4a:	c2 f7       	brpl	.-16     	; 0x8a3c <__addsf3x+0x6a>
    8a4c:	0e c0       	rjmp	.+28     	; 0x8a6a <__addsf3x+0x98>
    8a4e:	ba 0f       	add	r27, r26
    8a50:	62 1f       	adc	r22, r18
    8a52:	73 1f       	adc	r23, r19
    8a54:	84 1f       	adc	r24, r20
    8a56:	48 f4       	brcc	.+18     	; 0x8a6a <__addsf3x+0x98>
    8a58:	87 95       	ror	r24
    8a5a:	77 95       	ror	r23
    8a5c:	67 95       	ror	r22
    8a5e:	b7 95       	ror	r27
    8a60:	f7 95       	ror	r31
    8a62:	9e 3f       	cpi	r25, 0xFE	; 254
    8a64:	08 f0       	brcs	.+2      	; 0x8a68 <__addsf3x+0x96>
    8a66:	b3 cf       	rjmp	.-154    	; 0x89ce <__addsf3+0x1e>
    8a68:	93 95       	inc	r25
    8a6a:	88 0f       	add	r24, r24
    8a6c:	08 f0       	brcs	.+2      	; 0x8a70 <__addsf3x+0x9e>
    8a6e:	99 27       	eor	r25, r25
    8a70:	ee 0f       	add	r30, r30
    8a72:	97 95       	ror	r25
    8a74:	87 95       	ror	r24
    8a76:	08 95       	ret

00008a78 <__cmpsf2>:
    8a78:	d9 d0       	rcall	.+434    	; 0x8c2c <__fp_cmp>
    8a7a:	08 f4       	brcc	.+2      	; 0x8a7e <__cmpsf2+0x6>
    8a7c:	81 e0       	ldi	r24, 0x01	; 1
    8a7e:	08 95       	ret

00008a80 <__divsf3>:
    8a80:	0c d0       	rcall	.+24     	; 0x8a9a <__divsf3x>
    8a82:	0f c1       	rjmp	.+542    	; 0x8ca2 <__fp_round>
    8a84:	07 d1       	rcall	.+526    	; 0x8c94 <__fp_pscB>
    8a86:	40 f0       	brcs	.+16     	; 0x8a98 <__divsf3+0x18>
    8a88:	fe d0       	rcall	.+508    	; 0x8c86 <__fp_pscA>
    8a8a:	30 f0       	brcs	.+12     	; 0x8a98 <__divsf3+0x18>
    8a8c:	21 f4       	brne	.+8      	; 0x8a96 <__divsf3+0x16>
    8a8e:	5f 3f       	cpi	r21, 0xFF	; 255
    8a90:	19 f0       	breq	.+6      	; 0x8a98 <__divsf3+0x18>
    8a92:	f0 c0       	rjmp	.+480    	; 0x8c74 <__fp_inf>
    8a94:	51 11       	cpse	r21, r1
    8a96:	39 c1       	rjmp	.+626    	; 0x8d0a <__fp_szero>
    8a98:	f3 c0       	rjmp	.+486    	; 0x8c80 <__fp_nan>

00008a9a <__divsf3x>:
    8a9a:	14 d1       	rcall	.+552    	; 0x8cc4 <__fp_split3>
    8a9c:	98 f3       	brcs	.-26     	; 0x8a84 <__divsf3+0x4>

00008a9e <__divsf3_pse>:
    8a9e:	99 23       	and	r25, r25
    8aa0:	c9 f3       	breq	.-14     	; 0x8a94 <__divsf3+0x14>
    8aa2:	55 23       	and	r21, r21
    8aa4:	b1 f3       	breq	.-20     	; 0x8a92 <__divsf3+0x12>
    8aa6:	95 1b       	sub	r25, r21
    8aa8:	55 0b       	sbc	r21, r21
    8aaa:	bb 27       	eor	r27, r27
    8aac:	aa 27       	eor	r26, r26
    8aae:	62 17       	cp	r22, r18
    8ab0:	73 07       	cpc	r23, r19
    8ab2:	84 07       	cpc	r24, r20
    8ab4:	38 f0       	brcs	.+14     	; 0x8ac4 <__divsf3_pse+0x26>
    8ab6:	9f 5f       	subi	r25, 0xFF	; 255
    8ab8:	5f 4f       	sbci	r21, 0xFF	; 255
    8aba:	22 0f       	add	r18, r18
    8abc:	33 1f       	adc	r19, r19
    8abe:	44 1f       	adc	r20, r20
    8ac0:	aa 1f       	adc	r26, r26
    8ac2:	a9 f3       	breq	.-22     	; 0x8aae <__divsf3_pse+0x10>
    8ac4:	33 d0       	rcall	.+102    	; 0x8b2c <__divsf3_pse+0x8e>
    8ac6:	0e 2e       	mov	r0, r30
    8ac8:	3a f0       	brmi	.+14     	; 0x8ad8 <__divsf3_pse+0x3a>
    8aca:	e0 e8       	ldi	r30, 0x80	; 128
    8acc:	30 d0       	rcall	.+96     	; 0x8b2e <__divsf3_pse+0x90>
    8ace:	91 50       	subi	r25, 0x01	; 1
    8ad0:	50 40       	sbci	r21, 0x00	; 0
    8ad2:	e6 95       	lsr	r30
    8ad4:	00 1c       	adc	r0, r0
    8ad6:	ca f7       	brpl	.-14     	; 0x8aca <__divsf3_pse+0x2c>
    8ad8:	29 d0       	rcall	.+82     	; 0x8b2c <__divsf3_pse+0x8e>
    8ada:	fe 2f       	mov	r31, r30
    8adc:	27 d0       	rcall	.+78     	; 0x8b2c <__divsf3_pse+0x8e>
    8ade:	66 0f       	add	r22, r22
    8ae0:	77 1f       	adc	r23, r23
    8ae2:	88 1f       	adc	r24, r24
    8ae4:	bb 1f       	adc	r27, r27
    8ae6:	26 17       	cp	r18, r22
    8ae8:	37 07       	cpc	r19, r23
    8aea:	48 07       	cpc	r20, r24
    8aec:	ab 07       	cpc	r26, r27
    8aee:	b0 e8       	ldi	r27, 0x80	; 128
    8af0:	09 f0       	breq	.+2      	; 0x8af4 <__divsf3_pse+0x56>
    8af2:	bb 0b       	sbc	r27, r27
    8af4:	80 2d       	mov	r24, r0
    8af6:	bf 01       	movw	r22, r30
    8af8:	ff 27       	eor	r31, r31
    8afa:	93 58       	subi	r25, 0x83	; 131
    8afc:	5f 4f       	sbci	r21, 0xFF	; 255
    8afe:	2a f0       	brmi	.+10     	; 0x8b0a <__divsf3_pse+0x6c>
    8b00:	9e 3f       	cpi	r25, 0xFE	; 254
    8b02:	51 05       	cpc	r21, r1
    8b04:	68 f0       	brcs	.+26     	; 0x8b20 <__divsf3_pse+0x82>
    8b06:	b6 c0       	rjmp	.+364    	; 0x8c74 <__fp_inf>
    8b08:	00 c1       	rjmp	.+512    	; 0x8d0a <__fp_szero>
    8b0a:	5f 3f       	cpi	r21, 0xFF	; 255
    8b0c:	ec f3       	brlt	.-6      	; 0x8b08 <__divsf3_pse+0x6a>
    8b0e:	98 3e       	cpi	r25, 0xE8	; 232
    8b10:	dc f3       	brlt	.-10     	; 0x8b08 <__divsf3_pse+0x6a>
    8b12:	86 95       	lsr	r24
    8b14:	77 95       	ror	r23
    8b16:	67 95       	ror	r22
    8b18:	b7 95       	ror	r27
    8b1a:	f7 95       	ror	r31
    8b1c:	9f 5f       	subi	r25, 0xFF	; 255
    8b1e:	c9 f7       	brne	.-14     	; 0x8b12 <__divsf3_pse+0x74>
    8b20:	88 0f       	add	r24, r24
    8b22:	91 1d       	adc	r25, r1
    8b24:	96 95       	lsr	r25
    8b26:	87 95       	ror	r24
    8b28:	97 f9       	bld	r25, 7
    8b2a:	08 95       	ret
    8b2c:	e1 e0       	ldi	r30, 0x01	; 1
    8b2e:	66 0f       	add	r22, r22
    8b30:	77 1f       	adc	r23, r23
    8b32:	88 1f       	adc	r24, r24
    8b34:	bb 1f       	adc	r27, r27
    8b36:	62 17       	cp	r22, r18
    8b38:	73 07       	cpc	r23, r19
    8b3a:	84 07       	cpc	r24, r20
    8b3c:	ba 07       	cpc	r27, r26
    8b3e:	20 f0       	brcs	.+8      	; 0x8b48 <__divsf3_pse+0xaa>
    8b40:	62 1b       	sub	r22, r18
    8b42:	73 0b       	sbc	r23, r19
    8b44:	84 0b       	sbc	r24, r20
    8b46:	ba 0b       	sbc	r27, r26
    8b48:	ee 1f       	adc	r30, r30
    8b4a:	88 f7       	brcc	.-30     	; 0x8b2e <__divsf3_pse+0x90>
    8b4c:	e0 95       	com	r30
    8b4e:	08 95       	ret

00008b50 <__fixsfsi>:
    8b50:	04 d0       	rcall	.+8      	; 0x8b5a <__fixunssfsi>
    8b52:	68 94       	set
    8b54:	b1 11       	cpse	r27, r1
    8b56:	d9 c0       	rjmp	.+434    	; 0x8d0a <__fp_szero>
    8b58:	08 95       	ret

00008b5a <__fixunssfsi>:
    8b5a:	bc d0       	rcall	.+376    	; 0x8cd4 <__fp_splitA>
    8b5c:	88 f0       	brcs	.+34     	; 0x8b80 <__fixunssfsi+0x26>
    8b5e:	9f 57       	subi	r25, 0x7F	; 127
    8b60:	90 f0       	brcs	.+36     	; 0x8b86 <__fixunssfsi+0x2c>
    8b62:	b9 2f       	mov	r27, r25
    8b64:	99 27       	eor	r25, r25
    8b66:	b7 51       	subi	r27, 0x17	; 23
    8b68:	a0 f0       	brcs	.+40     	; 0x8b92 <__fixunssfsi+0x38>
    8b6a:	d1 f0       	breq	.+52     	; 0x8ba0 <__fixunssfsi+0x46>
    8b6c:	66 0f       	add	r22, r22
    8b6e:	77 1f       	adc	r23, r23
    8b70:	88 1f       	adc	r24, r24
    8b72:	99 1f       	adc	r25, r25
    8b74:	1a f0       	brmi	.+6      	; 0x8b7c <__fixunssfsi+0x22>
    8b76:	ba 95       	dec	r27
    8b78:	c9 f7       	brne	.-14     	; 0x8b6c <__fixunssfsi+0x12>
    8b7a:	12 c0       	rjmp	.+36     	; 0x8ba0 <__fixunssfsi+0x46>
    8b7c:	b1 30       	cpi	r27, 0x01	; 1
    8b7e:	81 f0       	breq	.+32     	; 0x8ba0 <__fixunssfsi+0x46>
    8b80:	c3 d0       	rcall	.+390    	; 0x8d08 <__fp_zero>
    8b82:	b1 e0       	ldi	r27, 0x01	; 1
    8b84:	08 95       	ret
    8b86:	c0 c0       	rjmp	.+384    	; 0x8d08 <__fp_zero>
    8b88:	67 2f       	mov	r22, r23
    8b8a:	78 2f       	mov	r23, r24
    8b8c:	88 27       	eor	r24, r24
    8b8e:	b8 5f       	subi	r27, 0xF8	; 248
    8b90:	39 f0       	breq	.+14     	; 0x8ba0 <__fixunssfsi+0x46>
    8b92:	b9 3f       	cpi	r27, 0xF9	; 249
    8b94:	cc f3       	brlt	.-14     	; 0x8b88 <__fixunssfsi+0x2e>
    8b96:	86 95       	lsr	r24
    8b98:	77 95       	ror	r23
    8b9a:	67 95       	ror	r22
    8b9c:	b3 95       	inc	r27
    8b9e:	d9 f7       	brne	.-10     	; 0x8b96 <__fixunssfsi+0x3c>
    8ba0:	3e f4       	brtc	.+14     	; 0x8bb0 <__fixunssfsi+0x56>
    8ba2:	90 95       	com	r25
    8ba4:	80 95       	com	r24
    8ba6:	70 95       	com	r23
    8ba8:	61 95       	neg	r22
    8baa:	7f 4f       	sbci	r23, 0xFF	; 255
    8bac:	8f 4f       	sbci	r24, 0xFF	; 255
    8bae:	9f 4f       	sbci	r25, 0xFF	; 255
    8bb0:	08 95       	ret

00008bb2 <__floatunsisf>:
    8bb2:	e8 94       	clt
    8bb4:	09 c0       	rjmp	.+18     	; 0x8bc8 <__floatsisf+0x12>

00008bb6 <__floatsisf>:
    8bb6:	97 fb       	bst	r25, 7
    8bb8:	3e f4       	brtc	.+14     	; 0x8bc8 <__floatsisf+0x12>
    8bba:	90 95       	com	r25
    8bbc:	80 95       	com	r24
    8bbe:	70 95       	com	r23
    8bc0:	61 95       	neg	r22
    8bc2:	7f 4f       	sbci	r23, 0xFF	; 255
    8bc4:	8f 4f       	sbci	r24, 0xFF	; 255
    8bc6:	9f 4f       	sbci	r25, 0xFF	; 255
    8bc8:	99 23       	and	r25, r25
    8bca:	a9 f0       	breq	.+42     	; 0x8bf6 <__floatsisf+0x40>
    8bcc:	f9 2f       	mov	r31, r25
    8bce:	96 e9       	ldi	r25, 0x96	; 150
    8bd0:	bb 27       	eor	r27, r27
    8bd2:	93 95       	inc	r25
    8bd4:	f6 95       	lsr	r31
    8bd6:	87 95       	ror	r24
    8bd8:	77 95       	ror	r23
    8bda:	67 95       	ror	r22
    8bdc:	b7 95       	ror	r27
    8bde:	f1 11       	cpse	r31, r1
    8be0:	f8 cf       	rjmp	.-16     	; 0x8bd2 <__floatsisf+0x1c>
    8be2:	fa f4       	brpl	.+62     	; 0x8c22 <__floatsisf+0x6c>
    8be4:	bb 0f       	add	r27, r27
    8be6:	11 f4       	brne	.+4      	; 0x8bec <__floatsisf+0x36>
    8be8:	60 ff       	sbrs	r22, 0
    8bea:	1b c0       	rjmp	.+54     	; 0x8c22 <__floatsisf+0x6c>
    8bec:	6f 5f       	subi	r22, 0xFF	; 255
    8bee:	7f 4f       	sbci	r23, 0xFF	; 255
    8bf0:	8f 4f       	sbci	r24, 0xFF	; 255
    8bf2:	9f 4f       	sbci	r25, 0xFF	; 255
    8bf4:	16 c0       	rjmp	.+44     	; 0x8c22 <__floatsisf+0x6c>
    8bf6:	88 23       	and	r24, r24
    8bf8:	11 f0       	breq	.+4      	; 0x8bfe <__floatsisf+0x48>
    8bfa:	96 e9       	ldi	r25, 0x96	; 150
    8bfc:	11 c0       	rjmp	.+34     	; 0x8c20 <__floatsisf+0x6a>
    8bfe:	77 23       	and	r23, r23
    8c00:	21 f0       	breq	.+8      	; 0x8c0a <__floatsisf+0x54>
    8c02:	9e e8       	ldi	r25, 0x8E	; 142
    8c04:	87 2f       	mov	r24, r23
    8c06:	76 2f       	mov	r23, r22
    8c08:	05 c0       	rjmp	.+10     	; 0x8c14 <__floatsisf+0x5e>
    8c0a:	66 23       	and	r22, r22
    8c0c:	71 f0       	breq	.+28     	; 0x8c2a <__floatsisf+0x74>
    8c0e:	96 e8       	ldi	r25, 0x86	; 134
    8c10:	86 2f       	mov	r24, r22
    8c12:	70 e0       	ldi	r23, 0x00	; 0
    8c14:	60 e0       	ldi	r22, 0x00	; 0
    8c16:	2a f0       	brmi	.+10     	; 0x8c22 <__floatsisf+0x6c>
    8c18:	9a 95       	dec	r25
    8c1a:	66 0f       	add	r22, r22
    8c1c:	77 1f       	adc	r23, r23
    8c1e:	88 1f       	adc	r24, r24
    8c20:	da f7       	brpl	.-10     	; 0x8c18 <__floatsisf+0x62>
    8c22:	88 0f       	add	r24, r24
    8c24:	96 95       	lsr	r25
    8c26:	87 95       	ror	r24
    8c28:	97 f9       	bld	r25, 7
    8c2a:	08 95       	ret

00008c2c <__fp_cmp>:
    8c2c:	99 0f       	add	r25, r25
    8c2e:	00 08       	sbc	r0, r0
    8c30:	55 0f       	add	r21, r21
    8c32:	aa 0b       	sbc	r26, r26
    8c34:	e0 e8       	ldi	r30, 0x80	; 128
    8c36:	fe ef       	ldi	r31, 0xFE	; 254
    8c38:	16 16       	cp	r1, r22
    8c3a:	17 06       	cpc	r1, r23
    8c3c:	e8 07       	cpc	r30, r24
    8c3e:	f9 07       	cpc	r31, r25
    8c40:	c0 f0       	brcs	.+48     	; 0x8c72 <__fp_cmp+0x46>
    8c42:	12 16       	cp	r1, r18
    8c44:	13 06       	cpc	r1, r19
    8c46:	e4 07       	cpc	r30, r20
    8c48:	f5 07       	cpc	r31, r21
    8c4a:	98 f0       	brcs	.+38     	; 0x8c72 <__fp_cmp+0x46>
    8c4c:	62 1b       	sub	r22, r18
    8c4e:	73 0b       	sbc	r23, r19
    8c50:	84 0b       	sbc	r24, r20
    8c52:	95 0b       	sbc	r25, r21
    8c54:	39 f4       	brne	.+14     	; 0x8c64 <__fp_cmp+0x38>
    8c56:	0a 26       	eor	r0, r26
    8c58:	61 f0       	breq	.+24     	; 0x8c72 <__fp_cmp+0x46>
    8c5a:	23 2b       	or	r18, r19
    8c5c:	24 2b       	or	r18, r20
    8c5e:	25 2b       	or	r18, r21
    8c60:	21 f4       	brne	.+8      	; 0x8c6a <__fp_cmp+0x3e>
    8c62:	08 95       	ret
    8c64:	0a 26       	eor	r0, r26
    8c66:	09 f4       	brne	.+2      	; 0x8c6a <__fp_cmp+0x3e>
    8c68:	a1 40       	sbci	r26, 0x01	; 1
    8c6a:	a6 95       	lsr	r26
    8c6c:	8f ef       	ldi	r24, 0xFF	; 255
    8c6e:	81 1d       	adc	r24, r1
    8c70:	81 1d       	adc	r24, r1
    8c72:	08 95       	ret

00008c74 <__fp_inf>:
    8c74:	97 f9       	bld	r25, 7
    8c76:	9f 67       	ori	r25, 0x7F	; 127
    8c78:	80 e8       	ldi	r24, 0x80	; 128
    8c7a:	70 e0       	ldi	r23, 0x00	; 0
    8c7c:	60 e0       	ldi	r22, 0x00	; 0
    8c7e:	08 95       	ret

00008c80 <__fp_nan>:
    8c80:	9f ef       	ldi	r25, 0xFF	; 255
    8c82:	80 ec       	ldi	r24, 0xC0	; 192
    8c84:	08 95       	ret

00008c86 <__fp_pscA>:
    8c86:	00 24       	eor	r0, r0
    8c88:	0a 94       	dec	r0
    8c8a:	16 16       	cp	r1, r22
    8c8c:	17 06       	cpc	r1, r23
    8c8e:	18 06       	cpc	r1, r24
    8c90:	09 06       	cpc	r0, r25
    8c92:	08 95       	ret

00008c94 <__fp_pscB>:
    8c94:	00 24       	eor	r0, r0
    8c96:	0a 94       	dec	r0
    8c98:	12 16       	cp	r1, r18
    8c9a:	13 06       	cpc	r1, r19
    8c9c:	14 06       	cpc	r1, r20
    8c9e:	05 06       	cpc	r0, r21
    8ca0:	08 95       	ret

00008ca2 <__fp_round>:
    8ca2:	09 2e       	mov	r0, r25
    8ca4:	03 94       	inc	r0
    8ca6:	00 0c       	add	r0, r0
    8ca8:	11 f4       	brne	.+4      	; 0x8cae <__fp_round+0xc>
    8caa:	88 23       	and	r24, r24
    8cac:	52 f0       	brmi	.+20     	; 0x8cc2 <__fp_round+0x20>
    8cae:	bb 0f       	add	r27, r27
    8cb0:	40 f4       	brcc	.+16     	; 0x8cc2 <__fp_round+0x20>
    8cb2:	bf 2b       	or	r27, r31
    8cb4:	11 f4       	brne	.+4      	; 0x8cba <__fp_round+0x18>
    8cb6:	60 ff       	sbrs	r22, 0
    8cb8:	04 c0       	rjmp	.+8      	; 0x8cc2 <__fp_round+0x20>
    8cba:	6f 5f       	subi	r22, 0xFF	; 255
    8cbc:	7f 4f       	sbci	r23, 0xFF	; 255
    8cbe:	8f 4f       	sbci	r24, 0xFF	; 255
    8cc0:	9f 4f       	sbci	r25, 0xFF	; 255
    8cc2:	08 95       	ret

00008cc4 <__fp_split3>:
    8cc4:	57 fd       	sbrc	r21, 7
    8cc6:	90 58       	subi	r25, 0x80	; 128
    8cc8:	44 0f       	add	r20, r20
    8cca:	55 1f       	adc	r21, r21
    8ccc:	59 f0       	breq	.+22     	; 0x8ce4 <__fp_splitA+0x10>
    8cce:	5f 3f       	cpi	r21, 0xFF	; 255
    8cd0:	71 f0       	breq	.+28     	; 0x8cee <__fp_splitA+0x1a>
    8cd2:	47 95       	ror	r20

00008cd4 <__fp_splitA>:
    8cd4:	88 0f       	add	r24, r24
    8cd6:	97 fb       	bst	r25, 7
    8cd8:	99 1f       	adc	r25, r25
    8cda:	61 f0       	breq	.+24     	; 0x8cf4 <__fp_splitA+0x20>
    8cdc:	9f 3f       	cpi	r25, 0xFF	; 255
    8cde:	79 f0       	breq	.+30     	; 0x8cfe <__fp_splitA+0x2a>
    8ce0:	87 95       	ror	r24
    8ce2:	08 95       	ret
    8ce4:	12 16       	cp	r1, r18
    8ce6:	13 06       	cpc	r1, r19
    8ce8:	14 06       	cpc	r1, r20
    8cea:	55 1f       	adc	r21, r21
    8cec:	f2 cf       	rjmp	.-28     	; 0x8cd2 <__fp_split3+0xe>
    8cee:	46 95       	lsr	r20
    8cf0:	f1 df       	rcall	.-30     	; 0x8cd4 <__fp_splitA>
    8cf2:	08 c0       	rjmp	.+16     	; 0x8d04 <__fp_splitA+0x30>
    8cf4:	16 16       	cp	r1, r22
    8cf6:	17 06       	cpc	r1, r23
    8cf8:	18 06       	cpc	r1, r24
    8cfa:	99 1f       	adc	r25, r25
    8cfc:	f1 cf       	rjmp	.-30     	; 0x8ce0 <__fp_splitA+0xc>
    8cfe:	86 95       	lsr	r24
    8d00:	71 05       	cpc	r23, r1
    8d02:	61 05       	cpc	r22, r1
    8d04:	08 94       	sec
    8d06:	08 95       	ret

00008d08 <__fp_zero>:
    8d08:	e8 94       	clt

00008d0a <__fp_szero>:
    8d0a:	bb 27       	eor	r27, r27
    8d0c:	66 27       	eor	r22, r22
    8d0e:	77 27       	eor	r23, r23
    8d10:	cb 01       	movw	r24, r22
    8d12:	97 f9       	bld	r25, 7
    8d14:	08 95       	ret

00008d16 <__gesf2>:
    8d16:	8a df       	rcall	.-236    	; 0x8c2c <__fp_cmp>
    8d18:	08 f4       	brcc	.+2      	; 0x8d1c <__gesf2+0x6>
    8d1a:	8f ef       	ldi	r24, 0xFF	; 255
    8d1c:	08 95       	ret

00008d1e <__mulsf3>:
    8d1e:	0b d0       	rcall	.+22     	; 0x8d36 <__mulsf3x>
    8d20:	c0 cf       	rjmp	.-128    	; 0x8ca2 <__fp_round>
    8d22:	b1 df       	rcall	.-158    	; 0x8c86 <__fp_pscA>
    8d24:	28 f0       	brcs	.+10     	; 0x8d30 <__mulsf3+0x12>
    8d26:	b6 df       	rcall	.-148    	; 0x8c94 <__fp_pscB>
    8d28:	18 f0       	brcs	.+6      	; 0x8d30 <__mulsf3+0x12>
    8d2a:	95 23       	and	r25, r21
    8d2c:	09 f0       	breq	.+2      	; 0x8d30 <__mulsf3+0x12>
    8d2e:	a2 cf       	rjmp	.-188    	; 0x8c74 <__fp_inf>
    8d30:	a7 cf       	rjmp	.-178    	; 0x8c80 <__fp_nan>
    8d32:	11 24       	eor	r1, r1
    8d34:	ea cf       	rjmp	.-44     	; 0x8d0a <__fp_szero>

00008d36 <__mulsf3x>:
    8d36:	c6 df       	rcall	.-116    	; 0x8cc4 <__fp_split3>
    8d38:	a0 f3       	brcs	.-24     	; 0x8d22 <__mulsf3+0x4>

00008d3a <__mulsf3_pse>:
    8d3a:	95 9f       	mul	r25, r21
    8d3c:	d1 f3       	breq	.-12     	; 0x8d32 <__mulsf3+0x14>
    8d3e:	95 0f       	add	r25, r21
    8d40:	50 e0       	ldi	r21, 0x00	; 0
    8d42:	55 1f       	adc	r21, r21
    8d44:	62 9f       	mul	r22, r18
    8d46:	f0 01       	movw	r30, r0
    8d48:	72 9f       	mul	r23, r18
    8d4a:	bb 27       	eor	r27, r27
    8d4c:	f0 0d       	add	r31, r0
    8d4e:	b1 1d       	adc	r27, r1
    8d50:	63 9f       	mul	r22, r19
    8d52:	aa 27       	eor	r26, r26
    8d54:	f0 0d       	add	r31, r0
    8d56:	b1 1d       	adc	r27, r1
    8d58:	aa 1f       	adc	r26, r26
    8d5a:	64 9f       	mul	r22, r20
    8d5c:	66 27       	eor	r22, r22
    8d5e:	b0 0d       	add	r27, r0
    8d60:	a1 1d       	adc	r26, r1
    8d62:	66 1f       	adc	r22, r22
    8d64:	82 9f       	mul	r24, r18
    8d66:	22 27       	eor	r18, r18
    8d68:	b0 0d       	add	r27, r0
    8d6a:	a1 1d       	adc	r26, r1
    8d6c:	62 1f       	adc	r22, r18
    8d6e:	73 9f       	mul	r23, r19
    8d70:	b0 0d       	add	r27, r0
    8d72:	a1 1d       	adc	r26, r1
    8d74:	62 1f       	adc	r22, r18
    8d76:	83 9f       	mul	r24, r19
    8d78:	a0 0d       	add	r26, r0
    8d7a:	61 1d       	adc	r22, r1
    8d7c:	22 1f       	adc	r18, r18
    8d7e:	74 9f       	mul	r23, r20
    8d80:	33 27       	eor	r19, r19
    8d82:	a0 0d       	add	r26, r0
    8d84:	61 1d       	adc	r22, r1
    8d86:	23 1f       	adc	r18, r19
    8d88:	84 9f       	mul	r24, r20
    8d8a:	60 0d       	add	r22, r0
    8d8c:	21 1d       	adc	r18, r1
    8d8e:	82 2f       	mov	r24, r18
    8d90:	76 2f       	mov	r23, r22
    8d92:	6a 2f       	mov	r22, r26
    8d94:	11 24       	eor	r1, r1
    8d96:	9f 57       	subi	r25, 0x7F	; 127
    8d98:	50 40       	sbci	r21, 0x00	; 0
    8d9a:	8a f0       	brmi	.+34     	; 0x8dbe <__mulsf3_pse+0x84>
    8d9c:	e1 f0       	breq	.+56     	; 0x8dd6 <__mulsf3_pse+0x9c>
    8d9e:	88 23       	and	r24, r24
    8da0:	4a f0       	brmi	.+18     	; 0x8db4 <__mulsf3_pse+0x7a>
    8da2:	ee 0f       	add	r30, r30
    8da4:	ff 1f       	adc	r31, r31
    8da6:	bb 1f       	adc	r27, r27
    8da8:	66 1f       	adc	r22, r22
    8daa:	77 1f       	adc	r23, r23
    8dac:	88 1f       	adc	r24, r24
    8dae:	91 50       	subi	r25, 0x01	; 1
    8db0:	50 40       	sbci	r21, 0x00	; 0
    8db2:	a9 f7       	brne	.-22     	; 0x8d9e <__mulsf3_pse+0x64>
    8db4:	9e 3f       	cpi	r25, 0xFE	; 254
    8db6:	51 05       	cpc	r21, r1
    8db8:	70 f0       	brcs	.+28     	; 0x8dd6 <__mulsf3_pse+0x9c>
    8dba:	5c cf       	rjmp	.-328    	; 0x8c74 <__fp_inf>
    8dbc:	a6 cf       	rjmp	.-180    	; 0x8d0a <__fp_szero>
    8dbe:	5f 3f       	cpi	r21, 0xFF	; 255
    8dc0:	ec f3       	brlt	.-6      	; 0x8dbc <__mulsf3_pse+0x82>
    8dc2:	98 3e       	cpi	r25, 0xE8	; 232
    8dc4:	dc f3       	brlt	.-10     	; 0x8dbc <__mulsf3_pse+0x82>
    8dc6:	86 95       	lsr	r24
    8dc8:	77 95       	ror	r23
    8dca:	67 95       	ror	r22
    8dcc:	b7 95       	ror	r27
    8dce:	f7 95       	ror	r31
    8dd0:	e7 95       	ror	r30
    8dd2:	9f 5f       	subi	r25, 0xFF	; 255
    8dd4:	c1 f7       	brne	.-16     	; 0x8dc6 <__mulsf3_pse+0x8c>
    8dd6:	fe 2b       	or	r31, r30
    8dd8:	88 0f       	add	r24, r24
    8dda:	91 1d       	adc	r25, r1
    8ddc:	96 95       	lsr	r25
    8dde:	87 95       	ror	r24
    8de0:	97 f9       	bld	r25, 7
    8de2:	08 95       	ret

00008de4 <__udivmodhi4>:
    8de4:	aa 1b       	sub	r26, r26
    8de6:	bb 1b       	sub	r27, r27
    8de8:	51 e1       	ldi	r21, 0x11	; 17
    8dea:	07 c0       	rjmp	.+14     	; 0x8dfa <__udivmodhi4_ep>

00008dec <__udivmodhi4_loop>:
    8dec:	aa 1f       	adc	r26, r26
    8dee:	bb 1f       	adc	r27, r27
    8df0:	a6 17       	cp	r26, r22
    8df2:	b7 07       	cpc	r27, r23
    8df4:	10 f0       	brcs	.+4      	; 0x8dfa <__udivmodhi4_ep>
    8df6:	a6 1b       	sub	r26, r22
    8df8:	b7 0b       	sbc	r27, r23

00008dfa <__udivmodhi4_ep>:
    8dfa:	88 1f       	adc	r24, r24
    8dfc:	99 1f       	adc	r25, r25
    8dfe:	5a 95       	dec	r21
    8e00:	a9 f7       	brne	.-22     	; 0x8dec <__udivmodhi4_loop>
    8e02:	80 95       	com	r24
    8e04:	90 95       	com	r25
    8e06:	bc 01       	movw	r22, r24
    8e08:	cd 01       	movw	r24, r26
    8e0a:	08 95       	ret

00008e0c <__divmodhi4>:
    8e0c:	97 fb       	bst	r25, 7
    8e0e:	07 2e       	mov	r0, r23
    8e10:	16 f4       	brtc	.+4      	; 0x8e16 <__divmodhi4+0xa>
    8e12:	00 94       	com	r0
    8e14:	07 d0       	rcall	.+14     	; 0x8e24 <__divmodhi4_neg1>
    8e16:	77 fd       	sbrc	r23, 7
    8e18:	09 d0       	rcall	.+18     	; 0x8e2c <__divmodhi4_neg2>
    8e1a:	0e 94 f2 46 	call	0x8de4	; 0x8de4 <__udivmodhi4>
    8e1e:	07 fc       	sbrc	r0, 7
    8e20:	05 d0       	rcall	.+10     	; 0x8e2c <__divmodhi4_neg2>
    8e22:	3e f4       	brtc	.+14     	; 0x8e32 <__divmodhi4_exit>

00008e24 <__divmodhi4_neg1>:
    8e24:	90 95       	com	r25
    8e26:	81 95       	neg	r24
    8e28:	9f 4f       	sbci	r25, 0xFF	; 255
    8e2a:	08 95       	ret

00008e2c <__divmodhi4_neg2>:
    8e2c:	70 95       	com	r23
    8e2e:	61 95       	neg	r22
    8e30:	7f 4f       	sbci	r23, 0xFF	; 255

00008e32 <__divmodhi4_exit>:
    8e32:	08 95       	ret

00008e34 <__udivmodsi4>:
    8e34:	a1 e2       	ldi	r26, 0x21	; 33
    8e36:	1a 2e       	mov	r1, r26
    8e38:	aa 1b       	sub	r26, r26
    8e3a:	bb 1b       	sub	r27, r27
    8e3c:	fd 01       	movw	r30, r26
    8e3e:	0d c0       	rjmp	.+26     	; 0x8e5a <__udivmodsi4_ep>

00008e40 <__udivmodsi4_loop>:
    8e40:	aa 1f       	adc	r26, r26
    8e42:	bb 1f       	adc	r27, r27
    8e44:	ee 1f       	adc	r30, r30
    8e46:	ff 1f       	adc	r31, r31
    8e48:	a2 17       	cp	r26, r18
    8e4a:	b3 07       	cpc	r27, r19
    8e4c:	e4 07       	cpc	r30, r20
    8e4e:	f5 07       	cpc	r31, r21
    8e50:	20 f0       	brcs	.+8      	; 0x8e5a <__udivmodsi4_ep>
    8e52:	a2 1b       	sub	r26, r18
    8e54:	b3 0b       	sbc	r27, r19
    8e56:	e4 0b       	sbc	r30, r20
    8e58:	f5 0b       	sbc	r31, r21

00008e5a <__udivmodsi4_ep>:
    8e5a:	66 1f       	adc	r22, r22
    8e5c:	77 1f       	adc	r23, r23
    8e5e:	88 1f       	adc	r24, r24
    8e60:	99 1f       	adc	r25, r25
    8e62:	1a 94       	dec	r1
    8e64:	69 f7       	brne	.-38     	; 0x8e40 <__udivmodsi4_loop>
    8e66:	60 95       	com	r22
    8e68:	70 95       	com	r23
    8e6a:	80 95       	com	r24
    8e6c:	90 95       	com	r25
    8e6e:	9b 01       	movw	r18, r22
    8e70:	ac 01       	movw	r20, r24
    8e72:	bd 01       	movw	r22, r26
    8e74:	cf 01       	movw	r24, r30
    8e76:	08 95       	ret

00008e78 <__divmodsi4>:
    8e78:	05 2e       	mov	r0, r21
    8e7a:	97 fb       	bst	r25, 7
    8e7c:	1e f4       	brtc	.+6      	; 0x8e84 <__divmodsi4+0xc>
    8e7e:	00 94       	com	r0
    8e80:	0e 94 53 47 	call	0x8ea6	; 0x8ea6 <__negsi2>
    8e84:	57 fd       	sbrc	r21, 7
    8e86:	07 d0       	rcall	.+14     	; 0x8e96 <__divmodsi4_neg2>
    8e88:	0e 94 1a 47 	call	0x8e34	; 0x8e34 <__udivmodsi4>
    8e8c:	07 fc       	sbrc	r0, 7
    8e8e:	03 d0       	rcall	.+6      	; 0x8e96 <__divmodsi4_neg2>
    8e90:	4e f4       	brtc	.+18     	; 0x8ea4 <__divmodsi4_exit>
    8e92:	0c 94 53 47 	jmp	0x8ea6	; 0x8ea6 <__negsi2>

00008e96 <__divmodsi4_neg2>:
    8e96:	50 95       	com	r21
    8e98:	40 95       	com	r20
    8e9a:	30 95       	com	r19
    8e9c:	21 95       	neg	r18
    8e9e:	3f 4f       	sbci	r19, 0xFF	; 255
    8ea0:	4f 4f       	sbci	r20, 0xFF	; 255
    8ea2:	5f 4f       	sbci	r21, 0xFF	; 255

00008ea4 <__divmodsi4_exit>:
    8ea4:	08 95       	ret

00008ea6 <__negsi2>:
    8ea6:	90 95       	com	r25
    8ea8:	80 95       	com	r24
    8eaa:	70 95       	com	r23
    8eac:	61 95       	neg	r22
    8eae:	7f 4f       	sbci	r23, 0xFF	; 255
    8eb0:	8f 4f       	sbci	r24, 0xFF	; 255
    8eb2:	9f 4f       	sbci	r25, 0xFF	; 255
    8eb4:	08 95       	ret

00008eb6 <__tablejump2__>:
    8eb6:	ee 0f       	add	r30, r30
    8eb8:	ff 1f       	adc	r31, r31

00008eba <__tablejump__>:
    8eba:	05 90       	lpm	r0, Z+
    8ebc:	f4 91       	lpm	r31, Z
    8ebe:	e0 2d       	mov	r30, r0
    8ec0:	09 94       	ijmp

00008ec2 <__mulhisi3>:
    8ec2:	0e 94 69 47 	call	0x8ed2	; 0x8ed2 <__umulhisi3>
    8ec6:	33 23       	and	r19, r19
    8ec8:	12 f4       	brpl	.+4      	; 0x8ece <__mulhisi3+0xc>
    8eca:	8a 1b       	sub	r24, r26
    8ecc:	9b 0b       	sbc	r25, r27
    8ece:	0c 94 7a 47 	jmp	0x8ef4	; 0x8ef4 <__usmulhisi3_tail>

00008ed2 <__umulhisi3>:
    8ed2:	a2 9f       	mul	r26, r18
    8ed4:	b0 01       	movw	r22, r0
    8ed6:	b3 9f       	mul	r27, r19
    8ed8:	c0 01       	movw	r24, r0
    8eda:	a3 9f       	mul	r26, r19
    8edc:	70 0d       	add	r23, r0
    8ede:	81 1d       	adc	r24, r1
    8ee0:	11 24       	eor	r1, r1
    8ee2:	91 1d       	adc	r25, r1
    8ee4:	b2 9f       	mul	r27, r18
    8ee6:	70 0d       	add	r23, r0
    8ee8:	81 1d       	adc	r24, r1
    8eea:	11 24       	eor	r1, r1
    8eec:	91 1d       	adc	r25, r1
    8eee:	08 95       	ret

00008ef0 <__usmulhisi3>:
    8ef0:	0e 94 69 47 	call	0x8ed2	; 0x8ed2 <__umulhisi3>

00008ef4 <__usmulhisi3_tail>:
    8ef4:	b7 ff       	sbrs	r27, 7
    8ef6:	08 95       	ret
    8ef8:	82 1b       	sub	r24, r18
    8efa:	93 0b       	sbc	r25, r19
    8efc:	08 95       	ret

00008efe <__muluhisi3>:
    8efe:	0e 94 69 47 	call	0x8ed2	; 0x8ed2 <__umulhisi3>
    8f02:	a5 9f       	mul	r26, r21
    8f04:	90 0d       	add	r25, r0
    8f06:	b4 9f       	mul	r27, r20
    8f08:	90 0d       	add	r25, r0
    8f0a:	a4 9f       	mul	r26, r20
    8f0c:	80 0d       	add	r24, r0
    8f0e:	91 1d       	adc	r25, r1
    8f10:	11 24       	eor	r1, r1
    8f12:	08 95       	ret

00008f14 <__mulshisi3>:
    8f14:	b7 ff       	sbrs	r27, 7
    8f16:	0c 94 7f 47 	jmp	0x8efe	; 0x8efe <__muluhisi3>

00008f1a <__mulohisi3>:
    8f1a:	0e 94 7f 47 	call	0x8efe	; 0x8efe <__muluhisi3>
    8f1e:	82 1b       	sub	r24, r18
    8f20:	93 0b       	sbc	r25, r19
    8f22:	08 95       	ret

00008f24 <memcpy_P>:
    8f24:	fb 01       	movw	r30, r22
    8f26:	dc 01       	movw	r26, r24
    8f28:	02 c0       	rjmp	.+4      	; 0x8f2e <memcpy_P+0xa>
    8f2a:	05 90       	lpm	r0, Z+
    8f2c:	0d 92       	st	X+, r0
    8f2e:	41 50       	subi	r20, 0x01	; 1
    8f30:	50 40       	sbci	r21, 0x00	; 0
    8f32:	d8 f7       	brcc	.-10     	; 0x8f2a <memcpy_P+0x6>
    8f34:	08 95       	ret

00008f36 <memmove>:
    8f36:	68 17       	cp	r22, r24
    8f38:	79 07       	cpc	r23, r25
    8f3a:	68 f4       	brcc	.+26     	; 0x8f56 <memmove+0x20>
    8f3c:	fb 01       	movw	r30, r22
    8f3e:	dc 01       	movw	r26, r24
    8f40:	e4 0f       	add	r30, r20
    8f42:	f5 1f       	adc	r31, r21
    8f44:	a4 0f       	add	r26, r20
    8f46:	b5 1f       	adc	r27, r21
    8f48:	02 c0       	rjmp	.+4      	; 0x8f4e <memmove+0x18>
    8f4a:	02 90       	ld	r0, -Z
    8f4c:	0e 92       	st	-X, r0
    8f4e:	41 50       	subi	r20, 0x01	; 1
    8f50:	50 40       	sbci	r21, 0x00	; 0
    8f52:	d8 f7       	brcc	.-10     	; 0x8f4a <memmove+0x14>
    8f54:	08 95       	ret
    8f56:	0c 94 f8 47 	jmp	0x8ff0	; 0x8ff0 <memcpy>

00008f5a <__itoa_ncheck>:
    8f5a:	bb 27       	eor	r27, r27
    8f5c:	4a 30       	cpi	r20, 0x0A	; 10
    8f5e:	31 f4       	brne	.+12     	; 0x8f6c <__itoa_ncheck+0x12>
    8f60:	99 23       	and	r25, r25
    8f62:	22 f4       	brpl	.+8      	; 0x8f6c <__itoa_ncheck+0x12>
    8f64:	bd e2       	ldi	r27, 0x2D	; 45
    8f66:	90 95       	com	r25
    8f68:	81 95       	neg	r24
    8f6a:	9f 4f       	sbci	r25, 0xFF	; 255
    8f6c:	0c 94 b9 47 	jmp	0x8f72	; 0x8f72 <__utoa_common>

00008f70 <__utoa_ncheck>:
    8f70:	bb 27       	eor	r27, r27

00008f72 <__utoa_common>:
    8f72:	fb 01       	movw	r30, r22
    8f74:	55 27       	eor	r21, r21
    8f76:	aa 27       	eor	r26, r26
    8f78:	88 0f       	add	r24, r24
    8f7a:	99 1f       	adc	r25, r25
    8f7c:	aa 1f       	adc	r26, r26
    8f7e:	a4 17       	cp	r26, r20
    8f80:	10 f0       	brcs	.+4      	; 0x8f86 <__utoa_common+0x14>
    8f82:	a4 1b       	sub	r26, r20
    8f84:	83 95       	inc	r24
    8f86:	50 51       	subi	r21, 0x10	; 16
    8f88:	b9 f7       	brne	.-18     	; 0x8f78 <__utoa_common+0x6>
    8f8a:	a0 5d       	subi	r26, 0xD0	; 208
    8f8c:	aa 33       	cpi	r26, 0x3A	; 58
    8f8e:	08 f0       	brcs	.+2      	; 0x8f92 <__utoa_common+0x20>
    8f90:	a9 5d       	subi	r26, 0xD9	; 217
    8f92:	a1 93       	st	Z+, r26
    8f94:	00 97       	sbiw	r24, 0x00	; 0
    8f96:	79 f7       	brne	.-34     	; 0x8f76 <__utoa_common+0x4>
    8f98:	b1 11       	cpse	r27, r1
    8f9a:	b1 93       	st	Z+, r27
    8f9c:	11 92       	st	Z+, r1
    8f9e:	cb 01       	movw	r24, r22
    8fa0:	0c 94 01 48 	jmp	0x9002	; 0x9002 <strrev>

00008fa4 <__eerd_block_m644pa>:
    8fa4:	dc 01       	movw	r26, r24
    8fa6:	cb 01       	movw	r24, r22

00008fa8 <__eerd_blraw_m644pa>:
    8fa8:	fc 01       	movw	r30, r24
    8faa:	f9 99       	sbic	0x1f, 1	; 31
    8fac:	fe cf       	rjmp	.-4      	; 0x8faa <__eerd_blraw_m644pa+0x2>
    8fae:	06 c0       	rjmp	.+12     	; 0x8fbc <__eerd_blraw_m644pa+0x14>
    8fb0:	f2 bd       	out	0x22, r31	; 34
    8fb2:	e1 bd       	out	0x21, r30	; 33
    8fb4:	f8 9a       	sbi	0x1f, 0	; 31
    8fb6:	31 96       	adiw	r30, 0x01	; 1
    8fb8:	00 b4       	in	r0, 0x20	; 32
    8fba:	0d 92       	st	X+, r0
    8fbc:	41 50       	subi	r20, 0x01	; 1
    8fbe:	50 40       	sbci	r21, 0x00	; 0
    8fc0:	b8 f7       	brcc	.-18     	; 0x8fb0 <__eerd_blraw_m644pa+0x8>
    8fc2:	08 95       	ret

00008fc4 <__eerd_byte_m644pa>:
    8fc4:	f9 99       	sbic	0x1f, 1	; 31
    8fc6:	fe cf       	rjmp	.-4      	; 0x8fc4 <__eerd_byte_m644pa>
    8fc8:	92 bd       	out	0x22, r25	; 34
    8fca:	81 bd       	out	0x21, r24	; 33
    8fcc:	f8 9a       	sbi	0x1f, 0	; 31
    8fce:	99 27       	eor	r25, r25
    8fd0:	80 b5       	in	r24, 0x20	; 32
    8fd2:	08 95       	ret

00008fd4 <__eewr_byte_m644pa>:
    8fd4:	26 2f       	mov	r18, r22

00008fd6 <__eewr_r18_m644pa>:
    8fd6:	f9 99       	sbic	0x1f, 1	; 31
    8fd8:	fe cf       	rjmp	.-4      	; 0x8fd6 <__eewr_r18_m644pa>
    8fda:	1f ba       	out	0x1f, r1	; 31
    8fdc:	92 bd       	out	0x22, r25	; 34
    8fde:	81 bd       	out	0x21, r24	; 33
    8fe0:	20 bd       	out	0x20, r18	; 32
    8fe2:	0f b6       	in	r0, 0x3f	; 63
    8fe4:	f8 94       	cli
    8fe6:	fa 9a       	sbi	0x1f, 2	; 31
    8fe8:	f9 9a       	sbi	0x1f, 1	; 31
    8fea:	0f be       	out	0x3f, r0	; 63
    8fec:	01 96       	adiw	r24, 0x01	; 1
    8fee:	08 95       	ret

00008ff0 <memcpy>:
    8ff0:	fb 01       	movw	r30, r22
    8ff2:	dc 01       	movw	r26, r24
    8ff4:	02 c0       	rjmp	.+4      	; 0x8ffa <memcpy+0xa>
    8ff6:	01 90       	ld	r0, Z+
    8ff8:	0d 92       	st	X+, r0
    8ffa:	41 50       	subi	r20, 0x01	; 1
    8ffc:	50 40       	sbci	r21, 0x00	; 0
    8ffe:	d8 f7       	brcc	.-10     	; 0x8ff6 <memcpy+0x6>
    9000:	08 95       	ret

00009002 <strrev>:
    9002:	dc 01       	movw	r26, r24
    9004:	fc 01       	movw	r30, r24
    9006:	67 2f       	mov	r22, r23
    9008:	71 91       	ld	r23, Z+
    900a:	77 23       	and	r23, r23
    900c:	e1 f7       	brne	.-8      	; 0x9006 <strrev+0x4>
    900e:	32 97       	sbiw	r30, 0x02	; 2
    9010:	04 c0       	rjmp	.+8      	; 0x901a <strrev+0x18>
    9012:	7c 91       	ld	r23, X
    9014:	6d 93       	st	X+, r22
    9016:	70 83       	st	Z, r23
    9018:	62 91       	ld	r22, -Z
    901a:	ae 17       	cp	r26, r30
    901c:	bf 07       	cpc	r27, r31
    901e:	c8 f3       	brcs	.-14     	; 0x9012 <strrev+0x10>
    9020:	08 95       	ret

00009022 <_exit>:
    9022:	f8 94       	cli

00009024 <__stop_program>:
    9024:	ff cf       	rjmp	.-2      	; 0x9024 <__stop_program>
