
OpenAeroVTOL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000040e  00800100  000090f2  00009186  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000090f2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000033f  0080050e  0080050e  00009594  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00009594  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000660  00000000  00000000  000095c8  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00013b5a  00000000  00000000  00009c28  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00003541  00000000  00000000  0001d782  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00003cf6  00000000  00000000  00020cc3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00001400  00000000  00000000  000249bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000026f6  00000000  00000000  00025dbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00008bb4  00000000  00000000  000284b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000500  00000000  00000000  00031066  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 0d 	jmp	0x1a54	; 0x1a54 <__ctors_end>
       4:	0c 94 5c 2a 	jmp	0x54b8	; 0x54b8 <__vector_1>
       8:	0c 94 24 2a 	jmp	0x5448	; 0x5448 <__vector_2>
       c:	0c 94 07 2b 	jmp	0x560e	; 0x560e <__vector_3>
      10:	0c 94 50 0d 	jmp	0x1aa0	; 0x1aa0 <__bad_interrupt>
      14:	0c 94 ce 2a 	jmp	0x559c	; 0x559c <__vector_5>
      18:	0c 94 50 0d 	jmp	0x1aa0	; 0x1aa0 <__bad_interrupt>
      1c:	0c 94 95 2a 	jmp	0x552a	; 0x552a <__vector_7>
      20:	0c 94 50 0d 	jmp	0x1aa0	; 0x1aa0 <__bad_interrupt>
      24:	0c 94 50 0d 	jmp	0x1aa0	; 0x1aa0 <__bad_interrupt>
      28:	0c 94 50 0d 	jmp	0x1aa0	; 0x1aa0 <__bad_interrupt>
      2c:	0c 94 50 0d 	jmp	0x1aa0	; 0x1aa0 <__bad_interrupt>
      30:	0c 94 50 0d 	jmp	0x1aa0	; 0x1aa0 <__bad_interrupt>
      34:	0c 94 50 0d 	jmp	0x1aa0	; 0x1aa0 <__bad_interrupt>
      38:	0c 94 50 0d 	jmp	0x1aa0	; 0x1aa0 <__bad_interrupt>
      3c:	0c 94 50 0d 	jmp	0x1aa0	; 0x1aa0 <__bad_interrupt>
      40:	0c 94 50 0d 	jmp	0x1aa0	; 0x1aa0 <__bad_interrupt>
      44:	0c 94 50 0d 	jmp	0x1aa0	; 0x1aa0 <__bad_interrupt>
      48:	0c 94 0d 2a 	jmp	0x541a	; 0x541a <__vector_18>
      4c:	0c 94 50 0d 	jmp	0x1aa0	; 0x1aa0 <__bad_interrupt>
      50:	0c 94 c9 2b 	jmp	0x5792	; 0x5792 <__vector_20>
      54:	0c 94 50 0d 	jmp	0x1aa0	; 0x1aa0 <__bad_interrupt>
      58:	0c 94 50 0d 	jmp	0x1aa0	; 0x1aa0 <__bad_interrupt>
      5c:	0c 94 50 0d 	jmp	0x1aa0	; 0x1aa0 <__bad_interrupt>
      60:	0c 94 50 0d 	jmp	0x1aa0	; 0x1aa0 <__bad_interrupt>
      64:	0c 94 50 0d 	jmp	0x1aa0	; 0x1aa0 <__bad_interrupt>
      68:	0c 94 50 0d 	jmp	0x1aa0	; 0x1aa0 <__bad_interrupt>
      6c:	0c 94 50 0d 	jmp	0x1aa0	; 0x1aa0 <__bad_interrupt>
      70:	0c 94 50 0d 	jmp	0x1aa0	; 0x1aa0 <__bad_interrupt>
      74:	0c 94 50 0d 	jmp	0x1aa0	; 0x1aa0 <__bad_interrupt>
      78:	0c 94 50 0d 	jmp	0x1aa0	; 0x1aa0 <__bad_interrupt>
      7c:	f6 31       	cpi	r31, 0x16	; 22
      7e:	f8 31       	cpi	r31, 0x18	; 24
      80:	fb 31       	cpi	r31, 0x1B	; 27
      82:	fd 31       	cpi	r31, 0x1D	; 29
      84:	ff 31       	cpi	r31, 0x1F	; 31
      86:	01 32       	cpi	r16, 0x21	; 33
      88:	03 32       	cpi	r16, 0x23	; 35
      8a:	05 32       	cpi	r16, 0x25	; 37
      8c:	08 32       	cpi	r16, 0x28	; 40
      8e:	0a 32       	cpi	r16, 0x2A	; 42
      90:	0c 32       	cpi	r16, 0x2C	; 44
      92:	0e 32       	cpi	r16, 0x2E	; 46
      94:	10 32       	cpi	r17, 0x20	; 32
      96:	12 32       	cpi	r17, 0x22	; 34
      98:	14 32       	cpi	r17, 0x24	; 36
      9a:	16 32       	cpi	r17, 0x26	; 38
      9c:	19 32       	cpi	r17, 0x29	; 41
      9e:	1b 32       	cpi	r17, 0x2B	; 43
      a0:	1d 32       	cpi	r17, 0x2D	; 45

000000a2 <Acc_Pol>:
      a2:	ff ff 01 ff 01 ff 01 ff ff 01 01 01 ff 01 01 ff     ................
      b2:	ff ff                                               ..

000000b4 <ACC_RPY_Order>:
      b4:	00 01 02 02 00 01 00 01 02 00 01 02 01 00 02 00     ................
      c4:	02 01                                               ..

000000c6 <FUTABA>:
      c6:	01 02 00 03 04 05 06 07                             ........

000000ce <JR>:
      ce:	00 01 02 03 04 05 06 07                             ........

000000d6 <Trans_Matrix>:
      d6:	05 02 06 01 05 08 03 07 05                          .........

000000df <Wingdings>:
      df:	01 02 41 05 0d 00 0f 00 22 00 33 00 44 00 4f 09     ..A.....".3.D.O.
      ef:	01 00 03 00 07 00 0f 00 1f 00 0f 00 07 00 03 00     ................
      ff:	01 00 08 1c 00 1c 00 1c 00 1c 00 7f 00 3e 00 1c     .............>..
     10f:	00 08 00 08 08 00 1c 00 3e 00 7f 00 1c 00 1c 00     ........>.......
     11f:	1c 00 1c 00 05 ff 01 fe 00 7c 00 38 00 10 00 0d     .........|.8....
     12f:	40 00 60 00 70 00 78 00 7c 00 7e 00 7f 00 7e 00     @.`.p.x.|.~...~.
     13f:	7c 00 78 00 70 00 60 00 40 00                       |.x.p.`.@.

00000149 <Verdana14>:
     149:	01 02 20 5b 13 00 bb 00 c5 00 cc 00 cc 00 cc 00     .. [............
     159:	cc 01 03 01 03 01 03 01 16 01 29 01 29 01 29 01     ..........).).).
     169:	36 01 49 01 50 01 50 01 6f 01 88 01 a4 01 c0 01     6.I.P.P.o.......
     179:	df 01 fb 02 1a 02 36 02 55 02 74 02 7b 02 7b 02     ......6.U.t.{.{.
     189:	7b 02 7b 02 7b 02 94 02 94 02 bc 02 db 02 fd 03     {.{.{...........
     199:	22 03 3e 03 5a 03 82 03 a1 03 b4 03 ca 03 ec 04     ".>.Z...........
     1a9:	08 04 2d 04 4c 04 74 04 8d 04 b5 04 d7 04 f9 05     ..-.L.t.........
     1b9:	1e 05 3d 05 65 05 99 05 bb 05 e0 06 02 06 02 06     ..=.e...........
     1c9:	1b 06 1b 06 1b 06 1b 06 1b 06 34 06 50 06 69 06     ..........4.P.i.
     1d9:	85 06 a1 06 b4 06 d0 06 e9 06 f0 07 00 07 1c 07     ................
     1e9:	23 07 4e 07 67 07 86 07 a2 07 be 07 d1 07 ea 07     #.N.g...........
     1f9:	fd 08 16 08 32 08 5d 08 79 08 95 03 00 00 00 00     ....2.].y.......
     209:	00 00 00 00 00 02 fe 67 00 fe 67 00 12 78 00 00     .......g..g..x..
     219:	fe 01 00 02 01 00 02 01 00 02 01 00 fe 41 00 78     .............A.x
     229:	70 00 00 1c 00 00 07 00 e0 00 00 38 00 00 0e 1e     p..........8....
     239:	00 82 7f 00 80 40 00 80 40 00 80 40 00 80 7f 00     .....@..@..@....
     249:	00 1e 00 06 c0 1f 00 f8 ff 00 3c e0 01 07 00 07     ..........<.....
     259:	03 00 06 01 00 04 06 01 00 04 03 00 06 07 00 07     ................
     269:	3c e0 01 f8 ff 00 c0 1f 00 04 00 00 03 00 f0 03     <...............
     279:	00 70 00 00 10 00 06 00 03 00 00 03 00 00 03 00     .p..............
     289:	00 03 00 00 03 00 00 03 00 02 00 70 00 00 70 00     ...........p..p.
     299:	0a f0 0f 00 fc 3f 00 0c 30 00 06 60 00 06 60 00     .....?..0..`..`.
     2a9:	06 60 00 06 60 00 0c 30 00 fc 3f 00 f0 0f 00 08     .`..`..0..?.....
     2b9:	18 60 00 18 60 00 18 60 00 fe 7f 00 fe 7f 00 00     .`..`..`........
     2c9:	60 00 00 60 00 00 60 00 09 0c 70 00 06 78 00 06     `..`..`...p..x..
     2d9:	6c 00 06 66 00 06 63 00 8e 61 00 fc 60 00 78 60     l..f..c..a..`.x`
     2e9:	00 00 60 00 09 0c 30 00 06 60 00 06 60 00 86 61     ..`...0..`..`..a
     2f9:	00 86 61 00 86 61 00 ce 73 00 7c 3f 00 38 1e 00     ..a..a..s.|?.8..
     309:	0a 00 07 00 80 07 00 c0 07 00 f0 06 00 38 06 00     .............8..
     319:	1c 06 00 fe 7f 00 fe 7f 00 00 06 00 00 06 00 09     ................
     329:	00 30 00 fe 60 00 fe 60 00 c6 60 00 c6 60 00 c6     .0..`..`..`..`..
     339:	60 00 c6 31 00 86 3f 00 06 0f 00 0a e0 0f 00 f0     `..1..?.........
     349:	3f 00 9c 30 00 cc 60 00 c6 60 00 c6 60 00 c6 60     ?..0..`..`..`..`
     359:	00 c6 31 00 86 3f 00 00 0f 00 09 06 00 00 06 40     ..1..?.........@
     369:	00 06 70 00 06 7c 00 06 0f 00 c6 03 00 f6 00 00     ..p..|..........
     379:	3e 00 00 0e 00 00 0a 38 1e 00 7c 3f 00 ce 71 00     >......8..|?..q.
     389:	c6 60 00 c6 60 00 86 61 00 86 61 00 4e 73 00 7c     .`..`..a..a.Ns.|
     399:	3f 00 38 1e 00 0a f0 00 00 fc 61 00 8c 63 00 06     ?.8.......a..c..
     3a9:	63 00 06 63 00 06 63 00 06 33 00 0c 39 00 fc 1f     c..c..c..3..9...
     3b9:	00 f0 07 00 02 70 70 00 70 70 00 08 0c 00 00 06     .....pp.pp......
     3c9:	00 00 06 67 00 06 67 00 86 01 00 ce 00 00 fc 00     ...g..g.........
     3d9:	00 38 00 00 0d 00 40 00 00 78 00 00 3f 00 c0 07     .8....@..x..?...
     3e9:	00 f8 06 00 3e 06 00 06 06 00 3e 06 00 f8 06 00     ....>.....>.....
     3f9:	c0 07 00 00 3f 00 00 78 00 00 40 00 0a fe 7f 00     ....?..x..@.....
     409:	fe 7f 00 86 61 00 86 61 00 86 61 00 86 61 00 c6     ....a..a..a..a..
     419:	61 00 7c 73 00 3c 3f 00 00 1e 00 0b e0 07 00 f8     a.|s.<?.........
     429:	1f 00 1c 38 00 0c 30 00 06 60 00 06 60 00 06 60     ...8..0..`..`..`
     439:	00 06 60 00 06 60 00 06 20 00 0c 30 00 0c fe 7f     ..`..`.. ..0....
     449:	00 fe 7f 00 06 60 00 06 60 00 06 60 00 06 60 00     .....`..`..`..`.
     459:	06 60 00 0e 70 00 0c 30 00 38 1c 00 f8 0f 00 e0     .`..p..0.8......
     469:	07 00 09 fe 7f 00 fe 7f 00 c6 60 00 c6 60 00 c6     ..........`..`..
     479:	60 00 c6 60 00 c6 60 00 c6 60 00 c6 60 00 09 fe     `..`..`..`..`...
     489:	7f 00 fe 7f 00 86 01 00 86 01 00 86 01 00 86 01     ................
     499:	00 86 01 00 86 01 00 06 00 00 0d e0 07 00 f8 1f     ................
     4a9:	00 3c 3c 00 0c 30 00 0e 70 00 06 60 00 06 60 00     .<<..0..p..`..`.
     4b9:	06 63 00 06 63 00 06 63 00 06 63 00 0c 3f 00 0c     .c..c..c..c..?..
     4c9:	3f 00 0a fe 7f 00 fe 7f 00 c0 00 00 c0 00 00 c0     ?...............
     4d9:	00 00 c0 00 00 c0 00 00 c0 00 00 fe 7f 00 fe 7f     ................
     4e9:	00 06 06 60 00 06 60 00 fe 7f 00 fe 7f 00 06 60     ...`..`........`
     4f9:	00 06 60 00 07 00 60 00 00 60 00 06 60 00 06 60     ..`...`..`..`..`
     509:	00 06 70 00 fe 3f 00 fe 1f 00 0b fe 7f 00 fe 7f     ..p..?..........
     519:	00 80 03 00 c0 01 00 e0 03 00 70 07 00 38 1c 00     ..........p..8..
     529:	1c 38 00 0e 70 00 06 60 00 02 40 00 09 fe 7f 00     .8..p..`..@.....
     539:	fe 7f 00 00 60 00 00 60 00 00 60 00 00 60 00 00     ....`..`..`..`..
     549:	60 00 00 60 00 00 60 00 0c fe 7f 00 fe 7f 00 0e     `..`..`.........
     559:	00 00 38 00 00 e0 01 00 80 07 00 00 07 00 e0 01     ..8.............
     569:	00 38 00 00 0e 00 00 fe 7f 00 fe 7f 00 0a fe 7f     .8..............
     579:	00 fe 7f 00 0e 00 00 3c 00 00 e0 00 00 80 03 00     .......<........
     589:	00 1e 00 00 78 00 fe 7f 00 fe 7f 00 0d e0 07 00     ....x...........
     599:	f8 1f 00 1c 38 00 0c 30 00 06 60 00 06 60 00 06     ....8..0..`..`..
     5a9:	60 00 06 60 00 06 60 00 0c 30 00 1c 38 00 f8 1f     `..`..`..0..8...
     5b9:	00 e0 07 00 08 fe 7f 00 fe 7f 00 06 03 00 06 03     ................
     5c9:	00 06 03 00 8e 03 00 fc 01 00 f8 00 00 0d e0 07     ................
     5d9:	00 f8 1f 00 1c 38 00 0c 30 00 06 60 00 06 60 00     .....8..0..`..`.
     5e9:	06 60 00 06 e0 01 06 e0 03 0c 30 07 1c 38 06 f8     .`........0..8..
     5f9:	1f 06 e0 07 06 0b fe 7f 00 fe 7f 00 86 01 00 86     ................
     609:	01 00 86 01 00 86 07 00 ce 0e 00 fc 1c 00 78 70     ..............xp
     619:	00 00 60 00 00 40 00 0b 78 30 00 fc 70 00 ce 60     ..`..@..x0..p..`
     629:	00 86 61 00 86 61 00 86 61 00 86 61 00 86 61 00     ..a..a..a..a..a.
     639:	06 33 00 0c 3f 00 00 1e 00 0c 06 00 00 06 00 00     .3..?...........
     649:	06 00 00 06 00 00 06 00 00 fe 7f 00 fe 7f 00 06     ................
     659:	00 00 06 00 00 06 00 00 06 00 00 06 00 00 0a fe     ................
     669:	0f 00 fe 3f 00 00 70 00 00 60 00 00 60 00 00 60     ...?..p..`..`..`
     679:	00 00 60 00 00 70 00 fe 3f 00 fe 0f 00 0d 02 00     ..`..p..?.......
     689:	00 1e 00 00 fc 00 00 e0 03 00 80 1f 00 00 7c 00     ..............|.
     699:	00 60 00 00 7c 00 80 1f 00 e0 03 00 fc 00 00 1e     .`..|...........
     6a9:	00 00 02 00 00 11 06 00 00 7e 00 00 f8 07 00 80     .........~......
     6b9:	3f 00 00 78 00 00 7c 00 c0 0f 00 7e 00 00 06 00     ?..x..|....~....
     6c9:	00 7e 00 00 e0 07 00 00 7e 00 00 70 00 80 7f 00     .~......~..p....
     6d9:	f8 07 00 7e 00 00 06 00 00 0b 02 40 00 06 60 00     ...~.......@..`.
     6e9:	1e 78 00 38 1c 00 e0 07 00 80 01 00 e0 07 00 38     .x.8...........8
     6f9:	1e 00 1e 78 00 06 60 00 02 40 00 0c 02 00 00 06     ...x..`..@......
     709:	00 00 1e 00 00 78 00 00 e0 00 00 c0 7f 00 c0 7f     .....x..........
     719:	00 e0 00 00 78 00 00 1e 00 00 06 00 00 02 00 00     ....x...........
     729:	0b 06 70 00 06 78 00 06 7c 00 06 6e 00 06 67 00     ..p..x..|..n..g.
     739:	c6 63 00 e6 60 00 76 60 00 3e 60 00 1e 60 00 0e     .c..`.v`.>`..`..
     749:	60 00 08 03 00 00 1f 00 00 fe 00 00 f0 07 00 80     `...............
     759:	3f 00 00 fc 01 00 e0 03 00 00 03 08 00 3c 00 30     ?............<.0
     769:	7e 00 30 67 00 30 63 00 30 63 00 30 33 00 e0 7f     ~.0g.0c.0c.03...
     779:	00 e0 7f 00 09 ff 7f 00 ff 7f 00 60 20 00 30 60     ...........` .0`
     789:	00 30 60 00 30 60 00 70 70 00 e0 3f 00 c0 0f 00     .0`.0`.pp..?....
     799:	08 80 0f 00 e0 3f 00 60 30 00 30 60 00 30 60 00     .....?.`0.0`.0`.
     7a9:	30 60 00 30 60 00 60 30 00 09 80 1f 00 e0 3f 00     0`.0`.`0......?.
     7b9:	70 70 00 30 60 00 30 60 00 30 60 00 30 30 00 ff     pp.0`.0`.0`.00..
     7c9:	7f 00 ff 7f 00 09 80 0f 00 e0 3f 00 60 33 00 30     ..........?.`3.0
     7d9:	63 00 30 63 00 30 63 00 70 63 00 e0 63 00 c0 33     c.0c.0c.pc..c..3
     7e9:	00 06 30 00 00 fe 7f 00 ff 7f 00 33 00 00 33 00     ..0........3..3.
     7f9:	00 03 00 00 09 80 1f 00 e0 3f 06 70 70 06 30 60     .........?.pp.0`
     809:	06 30 60 06 30 60 06 30 30 07 f0 ff 03 f0 ff 01     .0`.0`.00.......
     819:	08 ff 7f 00 ff 7f 00 60 00 00 30 00 00 30 00 00     .......`..0..0..
     829:	30 00 00 f0 7f 00 e0 7f 00 02 f6 7f 00 f6 7f 00     0...............
     839:	05 00 00 06 30 00 06 30 00 06 f6 ff 07 f6 ff 03     ....0..0........
     849:	09 ff 7f 00 ff 7f 00 00 06 00 00 07 00 80 0f 00     ................
     859:	c0 38 00 70 70 00 30 60 00 10 40 00 02 ff 7f 00     .8.pp.0`..@.....
     869:	ff 7f 00 0e f0 7f 00 f0 7f 00 60 00 00 30 00 00     ..........`..0..
     879:	30 00 00 30 00 00 f0 7f 00 e0 7f 00 60 00 00 30     0..0........`..0
     889:	00 00 30 00 00 30 00 00 f0 7f 00 e0 7f 00 08 f0     ..0..0..........
     899:	7f 00 f0 7f 00 60 00 00 30 00 00 30 00 00 30 00     .....`..0..0..0.
     8a9:	00 f0 7f 00 e0 7f 00 0a 80 0f 00 e0 3f 00 60 30     ............?.`0
     8b9:	00 30 60 00 30 60 00 30 60 00 30 60 00 60 30 00     .0`.0`.0`.0`.`0.
     8c9:	e0 3f 00 80 0f 00 09 f0 ff 07 f0 ff 07 60 60 00     .?...........``.
     8d9:	30 60 00 30 60 00 30 60 00 70 70 00 e0 3f 00 c0     0`.0`.0`.pp..?..
     8e9:	0f 00 09 80 1f 00 e0 3f 00 70 70 00 30 60 00 30     .......?.pp.0`.0
     8f9:	60 00 30 60 00 30 30 00 f0 ff 07 f0 ff 07 06 f0     `.0`.00.........
     909:	7f 00 f0 7f 00 60 00 00 30 00 00 30 00 00 30 00     .....`..0..0..0.
     919:	00 08 c0 31 00 e0 63 00 30 63 00 30 63 00 30 66     ...1..c.0c.0c.0f
     929:	00 30 66 00 30 3e 00 60 1c 00 06 30 00 00 fe 3f     .0f.0>.`...0...?
     939:	00 fe 7f 00 30 60 00 30 60 00 30 60 00 08 f0 1f     ....0`.0`.0`....
     949:	00 f0 7f 00 00 60 00 00 60 00 00 60 00 00 30 00     .....`..`..`..0.
     959:	f0 7f 00 f0 7f 00 09 10 00 00 f0 00 00 e0 07 00     ................
     969:	00 3e 00 00 60 00 00 3e 00 e0 07 00 f0 00 00 10     .>..`..>........
     979:	00 00 0e 30 00 00 f0 03 00 c0 3f 00 00 78 00 00     ...0......?..x..
     989:	7c 00 80 07 00 f0 00 00 f0 00 00 c0 07 00 00 3c     |..............<
     999:	00 00 70 00 c0 3f 00 f0 03 00 30 00 00 09 10 40     ..p..?....0....@
     9a9:	00 30 60 00 f0 78 00 c0 1d 00 00 07 00 c0 1d 00     .0`..x..........
     9b9:	f0 78 00 30 60 00 10 40 00 09 10 00 00 f0 00 00     .x.0`..@........
     9c9:	e0 07 06 00 bf 07 00 f0 01 00 3f 00 e0 07 00 f0     ..........?.....
     9d9:	00 00 10 00 00 08 30 70 00 30 78 00 30 7c 00 30     ......0p.0x.0|.0
     9e9:	66 00 30 63 00 f0 61 00 f0 60 00 70 60 00           f.0c..a..`.p`.

000009f7 <Verdana8>:
     9f7:	01 02 20 5b 0b 00 bb 00 be 00 c1 00 c1 00 c1 00     .. [............
     a07:	c1 00 d6 00 d6 00 d6 00 dd 00 e4 00 e4 00 e4 00     ................
     a17:	e9 00 f0 00 f3 00 f3 00 fe 01 09 01 14 01 1f 01     ................
     a27:	2c 01 37 01 42 01 4d 01 58 01 63 01 66 01 66 01     ,.7.B.M.X.c.f.f.
     a37:	66 01 66 01 66 01 6f 01 6f 01 7c 01 89 01 98 01     f.f.f.o.o.|.....
     a47:	a7 01 b2 01 bd 01 cc 01 d9 01 e0 01 e9 01 f6 02     ................
     a57:	01 02 10 02 1d 02 2c 02 37 02 46 02 53 02 60 02     ......,.7.F.S.`.
     a67:	6f 02 7c 02 89 02 9c 02 a9 02 b8 02 c5 02 c5 02     o.|.............
     a77:	c5 02 c5 02 c5 02 c5 02 c5 02 d0 02 db 02 e6 02     ................
     a87:	f1 02 fc 03 05 03 10 03 1b 03 1e 03 25 03 30 03     ............%.0.
     a97:	33 03 46 03 51 03 5c 03 67 03 72 03 7b 03 84 03     3.F.Q.\.g.r.{...
     aa7:	8d 03 98 03 a3 03 b2 03 bd 03 c8 01 00 00 01 7e     ...............~
     ab7:	01 0a 0c 00 12 00 12 00 8c 01 60 00 18 00 c6 00     ..........`.....
     ac7:	20 01 20 01 c0 00 03 f8 00 06 03 01 04 03 01 04      . .............
     ad7:	06 03 f8 00 02 00 04 80 03 03 20 00 20 00 20 00     .......... . . .
     ae7:	01 80 01 05 fc 00 02 01 02 01 02 01 fc 00 05 04     ................
     af7:	01 04 01 fe 01 00 01 00 01 05 84 01 42 01 22 01     ............B.".
     b07:	12 01 0c 01 05 84 00 02 01 12 01 12 01 ec 00 06     ................
     b17:	60 00 50 00 48 00 44 00 fe 01 40 00 05 9e 00 12     `.P.H.D...@.....
     b27:	01 12 01 12 01 e2 00 05 f8 00 14 01 12 01 12 01     ................
     b37:	e0 00 05 02 00 82 01 62 00 1a 00 06 00 05 ec 00     .......b........
     b47:	12 01 12 01 12 01 ec 00 05 1c 00 22 01 22 01 a2     ..........."."..
     b57:	00 7c 00 01 98 01 04 02 00 62 01 12 00 0c 00 06     .|.......b......
     b67:	c0 01 78 00 46 00 46 00 78 00 c0 01 06 fe 01 12     ..x.F.F.x.......
     b77:	01 12 01 12 01 1c 01 e0 00 07 78 00 84 00 02 01     ..........x.....
     b87:	02 01 02 01 02 01 84 00 07 fe 01 02 01 02 01 02     ................
     b97:	01 02 01 84 00 78 00 05 fe 01 12 01 12 01 12 01     .....x..........
     ba7:	12 01 05 fe 01 12 00 12 00 12 00 02 00 07 78 00     ..............x.
     bb7:	84 00 02 01 02 01 22 01 22 01 e4 00 06 fe 01 10     ......".".......
     bc7:	00 10 00 10 00 10 00 fe 01 03 02 01 fe 01 02 01     ................
     bd7:	04 00 01 02 01 02 01 fe 00 06 fe 01 20 00 30 00     ............ .0.
     be7:	48 00 84 00 02 01 05 fe 01 00 01 00 01 00 01 00     H...............
     bf7:	01 07 fe 01 06 00 18 00 60 00 18 00 06 00 fe 01     ........`.......
     c07:	06 fe 01 06 00 18 00 60 00 80 01 fe 01 07 78 00     .......`......x.
     c17:	84 00 02 01 02 01 02 01 84 00 78 00 05 fe 01 22     ..........x...."
     c27:	00 22 00 22 00 1c 00 07 78 00 84 00 02 01 02 01     ."."....x.......
     c37:	02 03 84 04 78 04 06 fe 01 22 00 22 00 62 00 9c     ....x....".".b..
     c47:	00 00 01 06 8c 00 12 01 12 01 22 01 22 01 c4 00     .........."."...
     c57:	07 02 00 02 00 02 00 fe 01 02 00 02 00 02 00 06     ................
     c67:	fe 00 00 01 00 01 00 01 00 01 fe 00 06 0e 00 70     ...............p
     c77:	00 80 01 80 01 70 00 0e 00 09 06 00 78 00 80 01     .....p......x...
     c87:	78 00 06 00 78 00 80 01 78 00 06 00 06 86 01 48     x...x...x......H
     c97:	00 30 00 30 00 48 00 86 01 07 02 00 04 00 08 00     .0.0.H..........
     ca7:	f0 01 08 00 04 00 02 00 06 82 01 42 01 22 01 12     ...........B."..
     cb7:	01 0a 01 06 01 05 c0 00 28 01 28 01 28 01 f0 01     ........(.(.(...
     cc7:	05 ff 01 08 01 08 01 08 01 f0 00 05 f0 00 08 01     ................
     cd7:	08 01 08 01 90 00 05 f0 00 08 01 08 01 08 01 ff     ................
     ce7:	01 05 f0 00 28 01 28 01 28 01 b0 00 04 08 00 fe     ....(.(.(.......
     cf7:	01 09 00 09 00 05 f0 00 08 05 08 05 08 05 f8 03     ................
     d07:	05 ff 01 08 00 08 00 08 00 f0 01 01 f9 01 03 00     ................
     d17:	04 08 04 f9 03 05 ff 01 40 00 60 00 90 00 08 01     ........@.`.....
     d27:	01 ff 01 09 f8 01 08 00 08 00 08 00 f0 01 08 00     ................
     d37:	08 00 08 00 f0 01 05 f8 01 08 00 08 00 08 00 f0     ................
     d47:	01 05 f0 00 08 01 08 01 08 01 f0 00 05 f8 07 08     ................
     d57:	01 08 01 08 01 f0 00 05 f0 00 08 01 08 01 08 01     ................
     d67:	f8 07 04 f8 01 10 00 08 00 08 00 04 30 01 28 01     ............0.(.
     d77:	48 01 c8 00 04 08 00 fe 00 08 01 08 01 05 f8 00     H...............
     d87:	00 01 00 01 00 01 f8 01 05 18 00 60 00 80 01 60     ...........`...`
     d97:	00 18 00 07 78 00 80 01 60 00 18 00 60 00 80 01     ....x...`...`...
     da7:	78 00 05 08 01 90 00 60 00 90 00 08 01 05 08 00     x......`........
     db7:	70 04 80 03 70 00 08 00 04 88 01 48 01 28 01 18     p...p......H.(..
     dc7:	01                                                  .

00000dc8 <lcd_commmands>:
     dc8:	af 40 a0 a6 a4 a2 ee c8 2f 24 ac 00 f8 00           .@....../$....

00000dd6 <pagemap>:
     dd6:	07 06 05 04 03 02 01 00                             ........

00000dde <text_menu>:
     dde:	3a 11 34 11 28 11 73 17 6d 17 e3 14 64 17 62 17     :.4.(.s.m...d.b.
     dee:	60 17 48 17 40 17 46 17 44 17 42 17 3b 17 36 17     `.H.@.F.D.B.;.6.
     dfe:	31 17 2c 17 44 11 64 11 5f 11 59 11 8a 14 52 17     1.,.D.d._.Y...R.
     e0e:	4a 17 be 15 db 15 d6 15 d0 15 cc 15 c8 15 e8 0f     J...............
     e1e:	aa 11 a1 11 b2 11 9a 11 95 11 f8 0f f3 0f ee 0f     ................
     e2e:	e9 0f 08 10 02 10 fc 0f 31 10 29 10 de 11 d6 11     ........1.).....
     e3e:	ef 13 ea 13 e7 13 dd 13 d3 13 e8 0f e8 0f 24 10     ..............$.
     e4e:	c9 11 c4 11 bb 11 1a 11 c3 15 0e 11 79 14 75 14     ............y.u.
     e5e:	6f 14 66 14 e8 0f e8 0f ef 14 ec 14 50 10 49 10     o.f.........P.I.
     e6e:	3f 10 e8 0f e8 0f 71 11 6a 11 21 17 0f 17 fc 16     ?.....q.j.!.....
     e7e:	ea 16 d4 16 c5 16 b1 16 9d 16 8f 16 80 16 71 16     ..............q.
     e8e:	62 16 53 16 44 16 35 16 26 16 12 16 f9 15 e0 15     b.S.D.5.&.......
     e9e:	e8 0f e8 0f f8 0f f3 0f ee 0f 1a 10 e9 0f 1f 10     ................
     eae:	81 11 b2 11 aa 11 a1 11 9a 11 95 11 90 11 8b 11     ................
     ebe:	86 11 81 11 7a 11 74 11 5d 14 56 14 4d 11 37 10     ....z.t.].V.M.7.
     ece:	24 10 d6 10 ca 10 e8 0f 87 10 7e 10 75 10 71 10     $.........~.u.q.
     ede:	68 10 60 10 e8 0f e8 0f e8 0f 57 17 51 11 ef 10     h.`.......W.Q...
     eee:	e1 10 dc 10 c2 10 b7 10 e8 0f 59 10 50 10 e8 0f     ..........Y.P...
     efe:	e8 0f e8 0f d6 15 d0 15 cc 15 e3 14 d9 14 ce 14     ................
     f0e:	bf 14 b1 14 a2 14 95 14 8a 14 7e 14 49 14 3f 14     ..........~.I.?.
     f1e:	37 14 2a 14 f2 13 20 14 16 14 0c 14 00 14 0d 10     7.*... .........
     f2e:	e8 0f e8 0f aa 15 a2 15 94 15 87 15 79 15 6e 15     ............y.n.
     f3e:	65 15 5c 15 4d 15 3f 15 30 15 24 15 1d 15 16 15     e.\.M.?.0.$.....
     f4e:	09 15 fd 14 f3 14 b2 15 e8 0f e8 0f cb 13 c0 13     ................
     f5e:	af 13 a2 13 97 13 87 13 77 13 68 13 58 13 48 13     ........w.h.X.H.
     f6e:	38 13 28 13 18 13 08 13 fa 12 ec 12 dd 12 ce 12     8.(.............
     f7e:	c1 12 b4 12 a8 12 9c 12 90 12 83 12 79 12 6f 12     ............y.o.
     f8e:	62 12 57 12 4a 12 3f 12 32 12 57 12 25 12 3f 12     b.W.J.?.2.W.%.?.
     f9e:	e8 0f e8 0f de 11 d6 11 d0 11 e8 0f b2 10 ad 10     ................
     fae:	a8 10 a3 10 9e 10 99 10 94 10 8f 10 b2 11 aa 11     ................
     fbe:	a1 11 9a 11 95 11 90 11 8b 11 86 11 1c 12 12 12     ................
     fce:	0a 12 02 12 f9 11 f0 11 e6 11 81 11 de 11 d6 11     ................
     fde:	d0 11 e8 0f e8 0f 05 11 fc 10                       ..........

00000fe8 <Dummy0>:
	...

00000fe9 <MPU6050LPF4>:
     fe9:	34 34 48 7a 00                                      44Hz.

00000fee <MPU6050LPF3>:
     fee:	32 31 48 7a 00                                      21Hz.

00000ff3 <MPU6050LPF2>:
     ff3:	31 30 48 7a 00                                      10Hz.

00000ff8 <MPU6050LPF1>:
     ff8:	35 48 7a 00                                         5Hz.

00000ffc <MPU6050LPF7>:
     ffc:	32 36 30 48 7a 00                                   260Hz.

00001002 <MPU6050LPF6>:
    1002:	31 38 34 48 7a 00                                   184Hz.

00001008 <MPU6050LPF5>:
    1008:	39 34 48 7a 00                                      94Hz.

0000100d <GeneralText10>:
    100d:	4d 50 55 36 30 35 30 20 4c 50 46 3a 00              MPU6050 LPF:.

0000101a <SWLPF2>:
    101a:	33 32 48 7a 00                                      32Hz.

0000101f <SWLPF1>:
    101f:	37 34 48 7a 00                                      74Hz.

00001024 <Random1>:
    1024:	48 69 67 68 00                                      High.

00001029 <Safety2>:
    1029:	41 72 6d 61 62 6c 65 00                             Armable.

00001031 <Safety1>:
    1031:	41 72 6d 65 64 00                                   Armed.

00001037 <GeneralText5>:
    1037:	53 79 6e 63 20 52 43 00                             Sync RC.

0000103f <MixerItem16>:
    103f:	52 65 76 53 63 61 6c 65 64 00                       RevScaled.

00001049 <MixerItem15>:
    1049:	53 63 61 6c 65 64 00                                Scaled.

00001050 <MixerItem12>:
    1050:	52 65 76 65 72 73 65 64 00                          Reversed.

00001059 <MixerItem11>:
    1059:	4e 6f 72 6d 61 6c 00                                Normal.

00001060 <MixerMenuItem7>:
    1060:	50 69 74 63 68 55 70 00                             PitchUp.

00001068 <MixerMenuItem6>:
    1068:	53 69 64 65 77 61 79 73 00                          Sideways.

00001071 <MixerMenuItem5>:
    1071:	41 66 74 00                                         Aft.

00001075 <MixerMenuItem4>:
    1075:	49 6e 76 65 72 74 65 64 00                          Inverted.

0000107e <MixerMenuItem3>:
    107e:	56 65 72 74 69 63 61 6c 00                          Vertical.

00001087 <MixerMenuItem2>:
    1087:	46 6f 72 77 61 72 64 00                             Forward.

0000108f <MOUT8>:
    108f:	4f 55 54 38 00                                      OUT8.

00001094 <MOUT7>:
    1094:	4f 55 54 37 00                                      OUT7.

00001099 <MOUT6>:
    1099:	4f 55 54 36 00                                      OUT6.

0000109e <MOUT5>:
    109e:	4f 55 54 35 00                                      OUT5.

000010a3 <MOUT4>:
    10a3:	4f 55 54 34 00                                      OUT4.

000010a8 <MOUT3>:
    10a8:	4f 55 54 33 00                                      OUT3.

000010ad <MOUT2>:
    10ad:	4f 55 54 32 00                                      OUT2.

000010b2 <MOUT1>:
    10b2:	4f 55 54 31 00                                      OUT1.

000010b7 <Status5>:
    10b7:	28 44 69 73 61 72 6d 65 64 29 00                    (Disarmed).

000010c2 <Status4>:
    10c2:	28 41 72 6d 65 64 29 00                             (Armed).

000010ca <Status2>:
    10ca:	66 6f 72 20 73 74 61 74 75 73 2e 00                 for status..

000010d6 <Status0>:
    10d6:	50 72 65 73 73 00                                   Press.

000010dc <WizardText2>:
    10dc:	44 6f 6e 65 00                                      Done.

000010e1 <WizardText1>:
    10e1:	48 6f 6c 64 20 61 73 20 73 68 6f 77 6e 00           Hold as shown.

000010ef <WizardText0>:
    10ef:	4e 6f 20 52 58 20 73 69 67 6e 61 6c 00              No RX signal.

000010fc <PText6>:
    10fc:	73 65 74 74 69 6e 67 73 00                          settings.

00001105 <PText5>:
    1105:	55 70 64 61 74 69 6e 67 00                          Updating.

0000110e <PText4>:
    110e:	43 61 6c 2e 20 66 61 69 6c 65 64 00                 Cal. failed.

0000111a <PText3>:
    111a:	45 53 43 20 43 61 6c 69 62 72 61 74 65 00           ESC Calibrate.

00001128 <PText2>:
    1128:	48 6f 6c 64 20 73 74 65 61 64 79 00                 Hold steady.

00001134 <PText1>:
    1134:	52 65 73 65 74 00                                   Reset.

0000113a <PText0>:
    113a:	4f 70 65 6e 41 65 72 6f 32 00                       OpenAero2.

00001144 <Disarmed>:
    1144:	44 69 73 61 72 6d 65 64 00                          Disarmed.

0000114d <ErrorText10>:
    114d:	4c 6f 77 00                                         Low.

00001151 <Status3>:
    1151:	42 61 74 74 65 72 79 00                             Battery.

00001159 <ErrorText7>:
    1159:	4d 6f 64 65 6c 00                                   Model.

0000115f <ErrorText6>:
    115f:	4c 6f 73 74 00                                      Lost.

00001164 <ErrorText5>:
    1164:	45 72 72 6f 72 00                                   Error.

0000116a <ErrorText4>:
    116a:	53 69 67 6e 61 6c 00                                Signal.

00001171 <ErrorText3>:
    1171:	4e 6f 00                                            No.

00001174 <ChannelRef12>:
    1174:	45 6c 65 76 2e 00                                   Elev..

0000117a <ChannelRef10>:
    117a:	54 68 72 6f 74 2e 00                                Throt..

00001181 <ChannelRef8>:
    1181:	4e 6f 6e 65 00                                      None.

00001186 <ChannelRef7>:
    1186:	41 55 58 33 00                                      AUX3.

0000118b <ChannelRef6>:
    118b:	41 55 58 32 00                                      AUX2.

00001190 <ChannelRef5>:
    1190:	41 55 58 31 00                                      AUX1.

00001195 <ChannelRef4>:
    1195:	47 65 61 72 00                                      Gear.

0000119a <ChannelRef3>:
    119a:	52 75 64 64 65 72 00                                Rudder.

000011a1 <ChannelRef2>:
    11a1:	45 6c 65 76 61 74 6f 72 00                          Elevator.

000011aa <ChannelRef1>:
    11aa:	41 69 6c 65 72 6f 6e 00                             Aileron.

000011b2 <ChannelRef0>:
    11b2:	54 68 72 6f 74 74 6c 65 00                          Throttle.

000011bb <MixerItem62>:
    11bb:	53 71 72 74 53 69 6e 65 00                          SqrtSine.

000011c4 <MixerItem61>:
    11c4:	53 69 6e 65 00                                      Sine.

000011c9 <MixerItem60>:
    11c9:	4c 69 6e 65 61 72 00                                Linear.

000011d0 <MixerItem49>:
    11d0:	4d 6f 74 6f 72 00                                   Motor.

000011d6 <MixerItem41>:
    11d6:	44 2e 53 65 72 76 6f 00                             D.Servo.

000011de <MixerItem40>:
    11de:	41 2e 53 65 72 76 6f 00                             A.Servo.

000011e6 <MixerItem81>:
    11e6:	41 4c 20 50 69 74 63 68 3a 00                       AL Pitch:.

000011f0 <MixerItem80>:
    11f0:	41 4c 20 52 6f 6c 6c 3a 00                          AL Roll:.

000011f9 <MixerItem74>:
    11f9:	41 63 63 50 69 74 63 68 00                          AccPitch.

00001202 <MixerItem73>:
    1202:	41 63 63 52 6f 6c 6c 00                             AccRoll.

0000120a <MixerItem72>:
    120a:	47 79 72 6f 59 61 77 00                             GyroYaw.

00001212 <MixerItem71>:
    1212:	47 79 72 6f 50 69 74 63 68 00                       GyroPitch.

0000121c <MixerItem70>:
    121c:	47 79 72 6f 52 6f 6c 6c 00                          GyroRoll.

00001225 <MixerItem31>:
    1225:	50 32 20 53 6f 75 72 63 65 20 42 3a 00              P2 Source B:.

00001232 <MixerItem21>:
    1232:	50 31 20 53 6f 75 72 63 65 20 42 3a 00              P1 Source B:.

0000123f <MixerItem30>:
    123f:	50 32 20 56 6f 6c 75 6d 65 3a 00                    P2 Volume:.

0000124a <MixerItem29>:
    124a:	50 32 20 53 6f 75 72 63 65 20 41 3a 00              P2 Source A:.

00001257 <MixerItem2>:
    1257:	50 31 20 56 6f 6c 75 6d 65 3a 00                    P1 Volume:.

00001262 <MixerItem0>:
    1262:	50 31 20 53 6f 75 72 63 65 20 41 3a 00              P1 Source A:.

0000126f <MixerItem43>:
    126f:	50 32 20 5a 20 61 63 63 3a 00                       P2 Z acc:.

00001279 <MixerItem42>:
    1279:	50 31 20 5a 20 61 63 63 3a 00                       P1 Z acc:.

00001283 <MixerItem28>:
    1283:	50 32 20 50 69 74 63 68 20 41 4c 3a 00              P2 Pitch AL:.

00001290 <MixerItem3>:
    1290:	50 31 20 50 69 74 63 68 20 41 4c 00                 P1 Pitch AL.

0000129c <MixerItem27>:
    129c:	50 32 20 52 6f 6c 6c 20 41 4c 3a 00                 P2 Roll AL:.

000012a8 <MixerItem7>:
    12a8:	50 31 20 52 6f 6c 6c 20 41 4c 3a 00                 P1 Roll AL:.

000012b4 <MixerItem26>:
    12b4:	50 32 20 59 61 77 20 67 79 72 6f 3a 00              P2 Yaw gyro:.

000012c1 <MixerItem6>:
    12c1:	50 31 20 59 61 77 20 67 79 72 6f 3a 00              P1 Yaw gyro:.

000012ce <MixerItem25>:
    12ce:	50 32 20 50 69 74 63 68 20 67 79 72 6f 3a 00        P2 Pitch gyro:.

000012dd <MixerItem5>:
    12dd:	50 31 20 50 69 74 63 68 20 67 79 72 6f 3a 00        P1 Pitch gyro:.

000012ec <MixerItem24>:
    12ec:	50 32 20 52 6f 6c 6c 20 67 79 72 6f 3a 00           P2 Roll gyro:.

000012fa <MixerItem4>:
    12fa:	50 31 20 52 6f 6c 6c 20 67 79 72 6f 3a 00           P1 Roll gyro:.

00001308 <MixerItem56>:
    1308:	50 32 20 52 75 64 2e 20 76 6f 6c 75 6d 65 3a 00     P2 Rud. volume:.

00001318 <MixerItem53>:
    1318:	50 31 20 52 75 64 2e 20 76 6f 6c 75 6d 65 3a 00     P1 Rud. volume:.

00001328 <MixerItem55>:
    1328:	50 32 20 45 6c 65 2e 20 76 6f 6c 75 6d 65 3a 00     P2 Ele. volume:.

00001338 <MixerItem52>:
    1338:	50 31 20 45 6c 65 2e 20 76 6f 6c 75 6d 65 3a 00     P1 Ele. volume:.

00001348 <MixerItem54>:
    1348:	50 32 20 41 69 6c 2e 20 76 6f 6c 75 6d 65 3a 00     P2 Ail. volume:.

00001358 <MixerItem51>:
    1358:	50 31 20 41 69 6c 2e 20 76 6f 6c 75 6d 65 3a 00     P1 Ail. volume:.

00001368 <Mixeritem50>:
    1368:	54 68 72 6f 74 74 6c 65 20 63 75 72 76 65 00        Throttle curve.

00001377 <MixerItem33>:
    1377:	50 32 20 54 68 72 2e 20 76 6f 6c 75 6d 65 3a 00     P2 Thr. volume:.

00001387 <MixerItem23>:
    1387:	50 31 20 54 68 72 2e 20 76 6f 6c 75 6d 65 3a 00     P1 Thr. volume:.

00001397 <MixerItem34>:
    1397:	50 32 20 4f 66 66 73 65 74 3a 00                    P2 Offset:.

000013a2 <MixerItem35>:
    13a2:	50 31 2e 6e 20 4f 66 66 73 65 74 3a 00              P1.n Offset:.

000013af <MixerItem36>:
    13af:	50 31 2e 6e 20 25 20 6f 66 20 74 72 61 6e 73 3a     P1.n % of trans:
	...

000013c0 <MixerItem20>:
    13c0:	50 31 20 4f 66 66 73 65 74 3a 00                    P1 Offset:.

000013cb <MixerItem1>:
    13cb:	44 65 76 69 63 65 3a 00                             Device:.

000013d3 <P5text>:
    13d3:	50 31 2e 6e 20 2d 20 50 32 00                       P1.n - P2.

000013dd <P4text>:
    13dd:	50 31 20 2d 20 50 31 2e 6e 00                       P1 - P1.n.

000013e7 <P3text>:
    13e7:	50 32 00                                            P2.

000013ea <P2text>:
    13ea:	50 31 2e 6e 00                                      P1.n.

000013ef <P1text>:
    13ef:	50 31 00                                            P1.

000013f2 <BattMenuItem2>:
    13f2:	42 61 74 2e 20 4c 56 41 20 78 31 30 3a 00           Bat. LVA x10:.

00001400 <GeneralText7>:
    1400:	41 4c 20 63 6f 72 72 65 63 74 3a 00                 AL correct:.

0000140c <GeneralText16>:
    140c:	47 79 72 6f 20 4c 50 46 3a 00                       Gyro LPF:.

00001416 <GeneralText6>:
    1416:	41 63 63 2e 20 4c 50 46 3a 00                       Acc. LPF:.

00001420 <GeneralText3>:
    1420:	50 57 4d 20 72 61 74 65 3a 00                       PWM rate:.

0000142a <GeneralText2>:
    142a:	44 69 73 61 72 6d 20 74 69 6d 65 3a 00              Disarm time:.

00001437 <AutoMenuItem2>:
    1437:	53 61 66 65 74 79 3a 00                             Safety:.

0000143f <Contrast>:
    143f:	43 6f 6e 74 72 61 73 74 3a 00                       Contrast:.

00001449 <MixerMenuItem0>:
    1449:	4f 72 69 65 6e 74 61 74 69 6f 6e 3a 00              Orientation:.

00001456 <RCMenuItem7>:
    1456:	46 75 74 61 62 61 00                                Futaba.

0000145d <RCMenuItem6>:
    145d:	4a 52 2c 53 70 6b 74 6d 00                          JR,Spktm.

00001466 <RXMode3>:
    1466:	53 70 65 6b 74 72 75 6d 00                          Spektrum.

0000146f <RXMode2>:
    146f:	53 2d 42 75 73 00                                   S-Bus.

00001475 <RXMode1>:
    1475:	50 57 4d 00                                         PWM.

00001479 <RXMode0>:
    1479:	43 50 50 4d 00                                      CPPM.

0000147e <Transition_P1n>:
    147e:	54 72 61 6e 73 2e 20 50 31 6e 3a 00                 Trans. P1n:.

0000148a <Transition>:
    148a:	54 72 61 6e 73 69 74 69 6f 6e 00                    Transition.

00001495 <RCMenuItem10>:
    1495:	52 75 64 64 65 72 20 70 6f 6c 2e 3a 00              Rudder pol.:.

000014a2 <RCMenuItem9>:
    14a2:	45 6c 65 76 61 74 6f 72 20 70 6f 6c 2e 3a 00        Elevator pol.:.

000014b1 <RCMenuItem8>:
    14b1:	41 69 6c 65 72 6f 6e 20 70 6f 6c 2e 3a 00           Aileron pol.:.

000014bf <RCMenuItem2>:
    14bf:	50 72 6f 66 69 6c 65 20 43 68 61 6e 2e 3a 00        Profile Chan.:.

000014ce <RCMenuItem0>:
    14ce:	43 68 2e 20 6f 72 64 65 72 3a 00                    Ch. order:.

000014d9 <RCMenuItem20>:
    14d9:	50 57 4d 20 73 79 6e 63 3a 00                       PWM sync:.

000014e3 <RCMenuItem1>:
    14e3:	52 58 20 74 79 70 65 3a 00                          RX type:.

000014ec <AutoMenuItem15>:
    14ec:	4f 4e 00                                            ON.

000014ef <AutoMenuItem11>:
    14ef:	4f 46 46 00                                         OFF.

000014f3 <StabMenuItem30>:
    14f3:	59 61 77 20 74 72 69 6d 3a 00                       Yaw trim:.

000014fd <StabMenuItem9>:
    14fd:	59 61 77 20 49 20 72 61 74 65 3a 00                 Yaw I rate:.

00001509 <StabMenuItem12>:
    1509:	59 61 77 20 49 20 4c 69 6d 69 74 3a 00              Yaw I Limit:.

00001516 <StabMenuItem8>:
    1516:	59 61 77 20 49 3a 00                                Yaw I:.

0000151d <StabMenuItem7>:
    151d:	59 61 77 20 50 3a 00                                Yaw P:.

00001524 <AutoMenuItem8>:
    1524:	50 69 74 63 68 20 74 72 69 6d 3a 00                 Pitch trim:.

00001530 <AutoMenuItem21>:
    1530:	50 69 74 63 68 20 41 75 74 6f 4c 76 6c 3a 00        Pitch AutoLvl:.

0000153f <StabMenuItem6>:
    153f:	50 69 74 63 68 20 49 20 72 61 74 65 3a 00           Pitch I rate:.

0000154d <StabMenuItem11>:
    154d:	50 69 74 63 68 20 49 20 4c 69 6d 69 74 3a 00        Pitch I Limit:.

0000155c <StabMenuItem5>:
    155c:	50 69 74 63 68 20 49 3a 00                          Pitch I:.

00001565 <AutoMenuItem4>:
    1565:	50 69 74 63 68 20 50 3a 00                          Pitch P:.

0000156e <AutoMenuItem7>:
    156e:	52 6f 6c 6c 20 74 72 69 6d 3a 00                    Roll trim:.

00001579 <AutoMenuItem20>:
    1579:	52 6f 6c 6c 20 41 75 74 6f 4c 76 6c 3a 00           Roll AutoLvl:.

00001587 <StabMenuItem3>:
    1587:	52 6f 6c 6c 20 49 20 72 61 74 65 3a 00              Roll I rate:.

00001594 <StabMenuItem10>:
    1594:	52 6f 6c 6c 20 49 20 4c 69 6d 69 74 3a 00           Roll I Limit:.

000015a2 <StabMenuItem2>:
    15a2:	52 6f 6c 6c 20 49 3a 00                             Roll I:.

000015aa <AutoMenuItem1>:
    15aa:	52 6f 6c 6c 20 50 3a 00                             Roll P:.

000015b2 <StabMenuItem13>:
    15b2:	41 63 63 20 56 65 72 74 20 50 3a 00                 Acc Vert P:.

000015be <SensorMenuItem2>:
    15be:	49 6e 76 2e 00                                      Inv..

000015c3 <SensorMenuItem1>:
    15c3:	43 61 6c 2e 00                                      Cal..

000015c8 <PText19>:
    15c8:	41 63 63 00                                         Acc.

000015cc <PText18>:
    15cc:	59 61 77 00                                         Yaw.

000015d0 <PText17>:
    15d0:	50 69 74 63 68 00                                   Pitch.

000015d6 <PText16>:
    15d6:	52 6f 6c 6c 00                                      Roll.

000015db <PText15>:
    15db:	47 79 72 6f 00                                      Gyro.

000015e0 <MainMenuItem23>:
    15e0:	31 39 2e 20 50 6f 73 2e 20 53 65 72 76 6f 20 74     19. Pos. Servo t
    15f0:	72 76 6c 2e 20 28 25 29 00                          rvl. (%).

000015f9 <MainMenuItem22>:
    15f9:	31 38 2e 20 4e 65 67 2e 20 53 65 72 76 6f 20 74     18. Neg. Servo t
    1609:	72 76 6c 2e 20 28 25 29 00                          rvl. (%).

00001612 <MainMenuItem20>:
    1612:	31 37 2e 20 53 65 72 76 6f 20 64 69 72 65 63 74     17. Servo direct
    1622:	69 6f 6e 00                                         ion.

00001626 <MainMenuItem18>:
    1626:	31 36 2e 20 4f 55 54 38 20 4d 69 78 65 72 00        16. OUT8 Mixer.

00001635 <MainMenuItem17>:
    1635:	31 35 2e 20 4f 55 54 37 20 4d 69 78 65 72 00        15. OUT7 Mixer.

00001644 <MainMenuItem16>:
    1644:	31 34 2e 20 4f 55 54 36 20 4d 69 78 65 72 00        14. OUT6 Mixer.

00001653 <MainMenuItem15>:
    1653:	31 33 2e 20 4f 55 54 35 20 4d 69 78 65 72 00        13. OUT5 Mixer.

00001662 <MainMenuItem14>:
    1662:	31 32 2e 20 4f 55 54 34 20 4d 69 78 65 72 00        12. OUT4 Mixer.

00001671 <MainMenuItem13>:
    1671:	31 31 2e 20 4f 55 54 33 20 4d 69 78 65 72 00        11. OUT3 Mixer.

00001680 <MainMenuItem12>:
    1680:	31 30 2e 20 4f 55 54 32 20 4d 69 78 65 72 00        10. OUT2 Mixer.

0000168f <MainMenuItem11>:
    168f:	39 2e 20 4f 55 54 31 20 4d 69 78 65 72 00           9. OUT1 Mixer.

0000169d <MainMenuItem3>:
    169d:	38 2e 20 46 6c 69 67 68 74 20 70 72 6f 66 69 6c     8. Flight profil
    16ad:	65 20 32 00                                         e 2.

000016b1 <MainMenuItem2>:
    16b1:	37 2e 20 46 6c 69 67 68 74 20 70 72 6f 66 69 6c     7. Flight profil
    16c1:	65 20 31 00                                         e 1.

000016c5 <MainMenuItem10>:
    16c5:	36 2e 20 4c 65 76 65 6c 20 6d 65 74 65 72 00        6. Level meter.

000016d4 <MainMenuItem8>:
    16d4:	35 2e 20 53 65 6e 73 6f 72 20 63 61 6c 69 62 72     5. Sensor calibr
    16e4:	61 74 69 6f 6e 00                                   ation.

000016ea <MainMenuItem7>:
    16ea:	34 2e 20 53 74 69 63 6b 20 70 6f 6c 61 72 69 74     4. Stick polarit
    16fa:	79 00                                               y.

000016fc <MainMenuItem9>:
    16fc:	33 2e 20 52 65 63 65 69 76 65 72 20 69 6e 70 75     3. Receiver inpu
    170c:	74 73 00                                            ts.

0000170f <MainMenuItem1>:
    170f:	32 2e 20 52 65 63 65 69 76 65 72 20 73 65 74 75     2. Receiver setu
    171f:	70 00                                               p.

00001721 <MainMenuItem0>:
    1721:	31 2e 20 47 65 6e 65 72 61 6c 00                    1. General.

0000172c <MenuFrame8>:
    172c:	53 61 76 65 00                                      Save.

00001731 <MenuFrame7>:
    1731:	44 65 66 2e 00                                      Def..

00001736 <MenuFrame6>:
    1736:	42 61 63 6b 00                                      Back.

0000173b <MenuFrame5>:
    173b:	4d 65 6e 75 00                                      Menu.

00001740 <MenuFrame1>:
    1740:	45 00                                               E.

00001742 <MenuFrame4>:
    1742:	44 00                                               D.

00001744 <MenuFrame3>:
    1744:	43 00                                               C.

00001746 <MenuFrame2>:
    1746:	42 00                                               B.

00001748 <MenuFrame0>:
    1748:	41 00                                               A.

0000174a <StatusText9>:
    174a:	4a 69 74 74 65 72 3a 00                             Jitter:.

00001752 <StatusText8>:
    1752:	50 6f 73 3a 00                                      Pos:.

00001757 <StatusText7>:
    1757:	42 61 74 74 65 72 79 3a 00                          Battery:.

00001760 <StatusText5>:
    1760:	30 00                                               0.

00001762 <StatusText4>:
    1762:	2e 00                                               ..

00001764 <StatusText3>:
    1764:	50 72 6f 66 69 6c 65 3a 00                          Profile:.

0000176d <StatusText1>:
    176d:	4d 6f 64 65 3a 00                                   Mode:.

00001773 <StatusText0>:
    1773:	56 65 72 73 69 6f 6e 3a 20 31 2e 31 20 42 31 00     Version: 1.1 B1.

00001783 <Gyro_Pol>:
    1783:	01 01 01 01 01 01 01 ff ff ff ff 01 01 ff 01 ff     ................
    1793:	01 01                                               ..

00001795 <Gyro_RPY_Order>:
    1795:	00 01 02 01 02 00 00 01 02 00 01 02 01 00 02 02     ................
    17a5:	01 00                                               ..

000017a7 <LPF_lookup>:
    17a7:	17 0c 06 04 03 02 01                                .......

000017ae <lines>:
    17ae:	03 0f 1b 27                                         ...'

000017b2 <flight_menu_ranges>:
    17b2:	00 7f 01 00 3c 00 7f 01 00 28 00 7d 01 00 0a 00     ....<....(.}....
    17c2:	04 01 00 02 00 7f 01 00 05 81 7f 01 00 00 00 7f     ................
    17d2:	01 00 3c 00 7f 01 00 28 00 7d 01 00 0a 00 04 01     ..<....(.}......
    17e2:	00 02 00 7f 01 00 05 81 7f 01 00 00 00 7f 01 00     ................
    17f2:	50 00 7f 01 00 00 00 7d 01 00 00 00 04 01 00 01     P......}........
    1802:	81 7f 01 00 00 00 7f 01 00 00                       ..........

0000180c <FlightMenuText>:
	...

0000181e <mixer_menu_ranges>:
    181e:	00 02 01 01 00 83 7d 01 00 00 01 63 01 00 32 83     ......}....c..2.
    182e:	7d 01 00 00 83 7d 01 00 00 00 7d 01 00 64 00 7d     }....}....}..d.}
    183e:	01 00 64 00 02 01 01 00 83 7d 01 00 00 83 7d 01     ..d......}....}.
    184e:	00 00 83 7d 01 00 00 83 7d 01 00 00 83 7d 01 00     ...}....}....}..
    185e:	00 83 7d 01 00 00 00 02 01 01 00 00 02 01 01 00     ..}.............
    186e:	00 02 01 01 00 00 02 01 01 00 00 02 01 01 00 00     ................
    187e:	02 01 01 00 00 02 01 01 00 00 02 01 01 00 00 02     ................
    188e:	01 01 00 00 02 01 01 00 00 02 01 01 00 00 02 01     ................
    189e:	01 00 00 0f 01 01 0f 83 7d 01 00 00 00 0f 01 01     ........}.......
    18ae:	0f 83 7d 01 00 00 00 0f 01 01 0f 83 7d 01 00 00     ..}.........}...
    18be:	00 0f 01 01 0f 83 7d 01 00 00                       ......}...

000018c8 <MixerMenuText>:
    18c8:	e2 00 00 00 00 00 00 38 00 00 00 00 00 00 44 44     .......8......DD
    18d8:	44 44 44 44 44 44 44 44 44 44 ee 00 ee 00 ee 00     DDDDDDDDDD......
    18e8:	ee 00                                               ..

000018ea <servo_menu_ranges>:
    18ea:	00 01 01 01 00 83 00 01 00 9c 00 7d 01 00 64        ...........}..d

000018f9 <ServoMenuText>:
    18f9:	8d 8d 8d 8d 8d 8d 8d 8d 00 00 00 00 00 00 00 00     ................
	...

00001911 <rc_menu_ranges>:
    1911:	00 03 01 01 01 00 04 01 01 04 00 01 01 01 00 00     ................
    1921:	08 01 01 04 00 01 01 01 00 00 01 01 01 00 00 01     ................
    1931:	01 01 00 00 28 01 00 00 01 63 01 00 32 00 00 00     ....(....c..2...
    1941:	00 00 00 05 01 01 00 1c 32 01 00 24 00 01 01 01     ........2..$....
    1951:	01 00 7f 01 00 1e 00 7f 01 00 00 00 02 01 01 00     ................
    1961:	00 06 01 01 02 00 06 01 01 06 01 0a 01 00 07 00     ................
    1971:	06 01 01 02                                         ....

00001975 <RCMenuText>:
    1975:	3e 69 74 69 8d 8d 8d 00 00 00 7c 00 2c 00 00 76     >iti......|.,..v
    1985:	62 62 00 25                                         bb.%

00001989 <SQRTSIN>:
    1989:	00 0d 12 16 19 1c 1f 21 23 26 28 29 2b 2d 2f 30     .......!#&()+-/0
    1999:	32 33 35 36 38 39 3a 3b 3d 3e 3f 40 41 42 43 44     235689:;=>?@ABCD
    19a9:	45 46 47 48 49 4a 4b 4c 4d 4d 4e 4f 50 51 51 52     EFGHIJKLMMNOPQQR
    19b9:	53 53 54 55 55 56 57 57 58 58 59 59 5a 5a 5b 5b     SSTUUVWWXXYYZZ[[
    19c9:	5c 5c 5d 5d 5e 5e 5e 5f 5f 5f 60 60 60 61 61 61     \\]]^^^___```aaa
    19d9:	62 62 62 62 62 63 63 63 63 63 63 63 64 64 64 64     bbbbbcccccccdddd
    19e9:	64 64 64 64 64                                      ddddd

000019ee <SIN>:
    19ee:	00 02 03 05 06 08 0a 0b 0d 0e 10 11 13 14 16 17     ................
    19fe:	19 1a 1c 1d 1f 20 22 23 25 26 28 29 2b 2c 2d 2f     ..... "#%&()+,-/
    1a0e:	30 32 33 34 36 37 38 3a 3b 3c 3d 3f 40 41 42 43     0234678:;<=?@ABC
    1a1e:	44 46 47 48 49 4a 4b 4c 4d 4e 4f 50 51 52 53 54     DFGHIJKLMNOPQRST
    1a2e:	54 55 56 57 58 58 59 5a 5a 5b 5c 5c 5d 5e 5e 5f     TUVWXXYZZ[\\]^^_
    1a3e:	5f 60 60 60 61 61 62 62 62 63 63 63 63 63 64 64     _```aabbbcccccdd
    1a4e:	64 64 64 64 64 00                                   ddddd.

00001a54 <__ctors_end>:
    1a54:	11 24       	eor	r1, r1
    1a56:	1f be       	out	0x3f, r1	; 63
    1a58:	cf ef       	ldi	r28, 0xFF	; 255
    1a5a:	d0 e1       	ldi	r29, 0x10	; 16
    1a5c:	de bf       	out	0x3e, r29	; 62
    1a5e:	cd bf       	out	0x3d, r28	; 61

00001a60 <wdt_init>:
// WDT reset prototype. Placed before main() in code to prevent wdt re-firing
void wdt_init(void) __attribute__((naked)) __attribute__((section(".init3")));

void wdt_init(void)
{
	MCUSR = 0;
    1a60:	14 be       	out	0x34, r1	; 52
	wdt_disable();
    1a62:	88 e1       	ldi	r24, 0x18	; 24
    1a64:	0f b6       	in	r0, 0x3f	; 63
    1a66:	f8 94       	cli
    1a68:	80 93 60 00 	sts	0x0060, r24
    1a6c:	10 92 60 00 	sts	0x0060, r1
    1a70:	0f be       	out	0x3f, r0	; 63

00001a72 <__do_copy_data>:
    1a72:	15 e0       	ldi	r17, 0x05	; 5
    1a74:	a0 e0       	ldi	r26, 0x00	; 0
    1a76:	b1 e0       	ldi	r27, 0x01	; 1
    1a78:	e2 ef       	ldi	r30, 0xF2	; 242
    1a7a:	f0 e9       	ldi	r31, 0x90	; 144
    1a7c:	02 c0       	rjmp	.+4      	; 0x1a82 <__do_copy_data+0x10>
    1a7e:	05 90       	lpm	r0, Z+
    1a80:	0d 92       	st	X+, r0
    1a82:	ae 30       	cpi	r26, 0x0E	; 14
    1a84:	b1 07       	cpc	r27, r17
    1a86:	d9 f7       	brne	.-10     	; 0x1a7e <__do_copy_data+0xc>

00001a88 <__do_clear_bss>:
    1a88:	28 e0       	ldi	r18, 0x08	; 8
    1a8a:	ae e0       	ldi	r26, 0x0E	; 14
    1a8c:	b5 e0       	ldi	r27, 0x05	; 5
    1a8e:	01 c0       	rjmp	.+2      	; 0x1a92 <.do_clear_bss_start>

00001a90 <.do_clear_bss_loop>:
    1a90:	1d 92       	st	X+, r1

00001a92 <.do_clear_bss_start>:
    1a92:	ad 34       	cpi	r26, 0x4D	; 77
    1a94:	b2 07       	cpc	r27, r18
    1a96:	e1 f7       	brne	.-8      	; 0x1a90 <.do_clear_bss_loop>
    1a98:	0e 94 83 19 	call	0x3306	; 0x3306 <main>
    1a9c:	0c 94 77 48 	jmp	0x90ee	; 0x90ee <_exit>

00001aa0 <__bad_interrupt>:
    1aa0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00001aa4 <glcd_delay>:
;*************************************************************************

	.global glcd_delay
	.func   glcd_delay
glcd_delay:
	nop					// 1 5 * 50ns = 250ns = 4MHz
    1aa4:	00 00       	nop
	ret					// 4 (5 cycles)
    1aa6:	08 95       	ret

00001aa8 <glcd_delay_1us>:
;*************************************************************************

	.global glcd_delay_1us
	.func   glcd_delay_1us
glcd_delay_1us:
	rcall	glcd_delay
    1aa8:	fd df       	rcall	.-6      	; 0x1aa4 <glcd_delay>
	rcall	glcd_delay
    1aaa:	fc df       	rcall	.-8      	; 0x1aa4 <glcd_delay>
	rcall	glcd_delay
    1aac:	fb df       	rcall	.-10     	; 0x1aa4 <glcd_delay>
	rcall	glcd_delay
    1aae:	fa df       	rcall	.-12     	; 0x1aa4 <glcd_delay>
	ret
    1ab0:	08 95       	ret

00001ab2 <bind_master>:
;*************************************************************************

	.global bind_master
	.func   bind_master
bind_master:
	push	YL			//	1
    1ab2:	cf 93       	push	r28
	push	XL			//	1
    1ab4:	af 93       	push	r26

	ldi		XL,0x5		// 	1 Master is 5 pulses
    1ab6:	a5 e0       	ldi	r26, 0x05	; 5

00001ab8 <master_loop>:
master_loop:
	cbi 	BIND		//	2
    1ab8:	58 98       	cbi	0x0b, 0	; 11
	ldi		YL,0x76		// 	1 		118us
    1aba:	c6 e7       	ldi	r28, 0x76	; 118
	call	VarDelay	//	4
    1abc:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <VarDelay>
	sbi		BIND		//	2
    1ac0:	58 9a       	sbi	0x0b, 0	; 11
	ldi		YL,0x7A		// 	1 		122us
    1ac2:	ca e7       	ldi	r28, 0x7A	; 122
	call	VarDelay	//	4
    1ac4:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <VarDelay>
	dec		XL			//	1
    1ac8:	aa 95       	dec	r26
	brne	master_loop	//  2 1
    1aca:	b1 f7       	brne	.-20     	; 0x1ab8 <master_loop>

	pop		XL			//	  1
    1acc:	af 91       	pop	r26
	pop		YL			//	  1
    1ace:	cf 91       	pop	r28
	ret					//	  4 
    1ad0:	08 95       	ret

00001ad2 <VarDelay>:
; 5 cycles to configure and call, 4 to return and 2 to change bit afterwards = 11
; 20 cycles makes 1.0us
;*************************************************************************

VarDelay:
	rjmp .+0			// 2
    1ad2:	00 c0       	rjmp	.+0      	; 0x1ad4 <VarDelay+0x2>
	rjmp .+0			// 2
    1ad4:	00 c0       	rjmp	.+0      	; 0x1ad6 <VarDelay+0x4>
	rjmp .+0			// 2
    1ad6:	00 c0       	rjmp	.+0      	; 0x1ad8 <VarDelay+0x6>
	rjmp .+0			// 2
    1ad8:	00 c0       	rjmp	.+0      	; 0x1ada <VarDelay+0x8>
	rjmp .+0			// 2
    1ada:	00 c0       	rjmp	.+0      	; 0x1adc <VarDelay+0xa>
	rjmp .+0			// 2
    1adc:	00 c0       	rjmp	.+0      	; 0x1ade <VarDelay+0xc>
	rjmp .+0			// 2
    1ade:	00 c0       	rjmp	.+0      	; 0x1ae0 <VarDelay+0xe>
	rjmp .+0			// 2
    1ae0:	00 c0       	rjmp	.+0      	; 0x1ae2 <VarDelay+0x10>
	nop					// 1
    1ae2:	00 00       	nop
	dec 	YL			// 1
    1ae4:	ca 95       	dec	r28
	brne	VarDelay	// 2 1
    1ae6:	a9 f7       	brne	.-22     	; 0x1ad2 <VarDelay>
	ret					//   4 
    1ae8:	08 95       	ret

00001aea <output_servo_ppm_asm>:

	.global output_servo_ppm_asm
	.func   output_servo_ppm_asm
output_servo_ppm_asm:
// Copy r22 (containing ServoFlag) into r15
	mov		r15, r22	
    1aea:	f6 2e       	mov	r15, r22
// Save regs
	push	ZL			// 2			
    1aec:	ef 93       	push	r30
	push	ZH			// 2
    1aee:	ff 93       	push	r31
	push	XL			// 2
    1af0:	af 93       	push	r26
	push	XH			// 2
    1af2:	bf 93       	push	r27
	push	YL			// 2
    1af4:	cf 93       	push	r28
	push	YH			// 2
    1af6:	df 93       	push	r29
	push	16			// 2
    1af8:	0f 93       	push	r16
	push	17			// 2
    1afa:	1f 93       	push	r17
	push	18			// 2
    1afc:	2f 93       	push	r18
	push	19			// 2
    1afe:	3f 93       	push	r19
	push	20			// 2
    1b00:	4f 93       	push	r20
	push	21			// 2
    1b02:	5f 93       	push	r21
	push	22			// 2
    1b04:	6f 93       	push	r22
	push	23			// 2
    1b06:	7f 93       	push	r23

// Get start address of ServoOut[0] into Z
	mov		ZL, r24		// 1 Low byte
    1b08:	e8 2f       	mov	r30, r24
	mov		ZH, r25		// 1 High byte
    1b0a:	f9 2f       	mov	r31, r25

// Save initial address for later
	push	24			// 2
    1b0c:	8f 93       	push	r24
	push	25			// 2
    1b0e:	9f 93       	push	r25

// Trim 16-bit values to suit individual needs, 
// Save result and copy lower 3 bits to r16 to r23 (96 cycles)

// M1
	ld		XL, Z+ 		// 2			Load XL with data at address in Z
    1b10:	a1 91       	ld	r26, Z+
	ld		XH, Z+		// 2			Load XH with data at address in Z+1
    1b12:	b1 91       	ld	r27, Z+
	subi	XL,	0x4b	// 1 			Trim servo pulse (was 4a)
    1b14:	ab 54       	subi	r26, 0x4B	; 75
	sbci 	XH,	0x03	// 1
    1b16:	b3 40       	sbci	r27, 0x03	; 3
	push	XL 			// 2			Save trimmed value to the stack
    1b18:	af 93       	push	r26
	push	XH 			// 2
    1b1a:	bf 93       	push	r27
	andi	XL,	0x07	// 1			And all but first 3 bits
    1b1c:	a7 70       	andi	r26, 0x07	; 7
	mov		r23,XL		// 1 (12)		Copy 8-bit result to regs
    1b1e:	7a 2f       	mov	r23, r26
// M2
	ld		XL, Z+
    1b20:	a1 91       	ld	r26, Z+
	ld		XH, Z+
    1b22:	b1 91       	ld	r27, Z+
	subi	XL,	0xe6  // was e6
    1b24:	a6 5e       	subi	r26, 0xE6	; 230
	sbci 	XH,	0x02
    1b26:	b2 40       	sbci	r27, 0x02	; 2
	push	XL 		
    1b28:	af 93       	push	r26
	push	XH 		
    1b2a:	bf 93       	push	r27
	andi	XL,	0x07
    1b2c:	a7 70       	andi	r26, 0x07	; 7
	mov		r22,XL	
    1b2e:	6a 2f       	mov	r22, r26
// M3
	ld		XL, Z+
    1b30:	a1 91       	ld	r26, Z+
	ld		XH, Z+
    1b32:	b1 91       	ld	r27, Z+
	subi	XL,	0x82
    1b34:	a2 58       	subi	r26, 0x82	; 130
	sbci 	XH,	0x02
    1b36:	b2 40       	sbci	r27, 0x02	; 2
	push	XL 		
    1b38:	af 93       	push	r26
	push	XH 		
    1b3a:	bf 93       	push	r27
	andi	XL,	0x07
    1b3c:	a7 70       	andi	r26, 0x07	; 7
	mov		r21,XL	
    1b3e:	5a 2f       	mov	r21, r26
// M4
	ld		XL, Z+
    1b40:	a1 91       	ld	r26, Z+
	ld		XH, Z+
    1b42:	b1 91       	ld	r27, Z+
	subi	XL,	0x1e
    1b44:	ae 51       	subi	r26, 0x1E	; 30
	sbci 	XH,	0x02
    1b46:	b2 40       	sbci	r27, 0x02	; 2
	push	XL 	
    1b48:	af 93       	push	r26
	push	XH 	
    1b4a:	bf 93       	push	r27
	andi	XL,	0x07
    1b4c:	a7 70       	andi	r26, 0x07	; 7
	mov		r20,XL	
    1b4e:	4a 2f       	mov	r20, r26
// M5
	ld		XL, Z+
    1b50:	a1 91       	ld	r26, Z+
	ld		XH, Z+
    1b52:	b1 91       	ld	r27, Z+
	subi	XL,	0xba // was b9
    1b54:	aa 5b       	subi	r26, 0xBA	; 186
	sbci 	XH,	0x01
    1b56:	b1 40       	sbci	r27, 0x01	; 1
	push	XL 	
    1b58:	af 93       	push	r26
	push	XH 	
    1b5a:	bf 93       	push	r27
	andi	XL,	0x07
    1b5c:	a7 70       	andi	r26, 0x07	; 7
	mov		r19,XL	
    1b5e:	3a 2f       	mov	r19, r26
// M6
	ld		XL, Z+
    1b60:	a1 91       	ld	r26, Z+
	ld		XH, Z+
    1b62:	b1 91       	ld	r27, Z+
	subi	XL,	0x55 // was 55
    1b64:	a5 55       	subi	r26, 0x55	; 85
	sbci 	XH,	0x01
    1b66:	b1 40       	sbci	r27, 0x01	; 1
	push	XL 	
    1b68:	af 93       	push	r26
	push	XH 	
    1b6a:	bf 93       	push	r27
	andi	XL,	0x07
    1b6c:	a7 70       	andi	r26, 0x07	; 7
	mov		r18,XL
    1b6e:	2a 2f       	mov	r18, r26
// M7
	ld		XL, Z+
    1b70:	a1 91       	ld	r26, Z+
	ld		XH, Z+
    1b72:	b1 91       	ld	r27, Z+
	subi	XL,	0xf1 // was f1
    1b74:	a1 5f       	subi	r26, 0xF1	; 241
	sbci 	XH,	0x00
    1b76:	b0 40       	sbci	r27, 0x00	; 0
	push	XL 	
    1b78:	af 93       	push	r26
	push	XH 
    1b7a:	bf 93       	push	r27
	andi	XL,	0x07
    1b7c:	a7 70       	andi	r26, 0x07	; 7
	mov		r17,XL
    1b7e:	1a 2f       	mov	r17, r26
// M8
	ld		XL, Z+
    1b80:	a1 91       	ld	r26, Z+
	ld		XH, Z+
    1b82:	b1 91       	ld	r27, Z+
	subi	XL,	0x8d // Was 8d
    1b84:	ad 58       	subi	r26, 0x8D	; 141
	sbci 	XH,	0x00
    1b86:	b0 40       	sbci	r27, 0x00	; 0
	push	XL
    1b88:	af 93       	push	r26
	push	XH 
    1b8a:	bf 93       	push	r27
	andi	XL,	0x07
    1b8c:	a7 70       	andi	r26, 0x07	; 7
	mov		r16,XL
    1b8e:	0a 2f       	mov	r16, r26
// Time out lower 3 bits of pulse value (Zero to 7us)
// Each chunk is always executed in 1+10+1+147 = 159 cycles or 7.95us
// This does affect the inter-pulse delay, but not the pulsewidth.

// M1
	mov		r25,r23		// 1
    1b90:	97 2f       	mov	r25, r23
	call	DelayHigh	// 10 (where r25 = 7)
    1b92:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <DelayHigh>
	sbrc	r15,0		// 1 (False),	2 if true
    1b96:	f0 fc       	sbrc	r15, 0
	sbi 	M1			// 1,			0
    1b98:	46 9a       	sbi	0x08, 6	; 8
	call	DelayLow	// 7 + 140 (where r25 = 0)
    1b9a:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <DelayLow>
	call    pwm_delay   // 100us
    1b9e:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <pwm_delay>
	call    pwm_delay
    1ba2:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <pwm_delay>

// M2
	mov		r25,r22
    1ba6:	96 2f       	mov	r25, r22
	call	DelayHigh
    1ba8:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <DelayHigh>
	sbrc	r15,1		// Don't switch on if if ServoFlag bit is cleared
    1bac:	f1 fc       	sbrc	r15, 1
	sbi 	M2
    1bae:	44 9a       	sbi	0x08, 4	; 8
	call	DelayLow
    1bb0:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <DelayLow>
	call    pwm_delay   // 100us
    1bb4:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <pwm_delay>
	call    pwm_delay
    1bb8:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <pwm_delay>

// M3
	mov		r25,r21
    1bbc:	95 2f       	mov	r25, r21
	call	DelayHigh
    1bbe:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <DelayHigh>
	sbrc	r15,2		// Don't switch on if if ServoFlag bit is cleared
    1bc2:	f2 fc       	sbrc	r15, 2
	sbi 	M3
    1bc4:	42 9a       	sbi	0x08, 2	; 8
	call	DelayLow
    1bc6:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <DelayLow>
	call    pwm_delay   // 100us
    1bca:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <pwm_delay>
	call    pwm_delay
    1bce:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <pwm_delay>

// M4
	mov		r25,r20
    1bd2:	94 2f       	mov	r25, r20
	call	DelayHigh
    1bd4:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <DelayHigh>
	sbrc	r15,3		// Don't switch on if if ServoFlag bit is cleared
    1bd8:	f3 fc       	sbrc	r15, 3
	sbi 	M4
    1bda:	43 9a       	sbi	0x08, 3	; 8
	call	DelayLow
    1bdc:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <DelayLow>
	call    pwm_delay   // 100us
    1be0:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <pwm_delay>
	call    pwm_delay
    1be4:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <pwm_delay>

// M5
	mov		r25,r19
    1be8:	93 2f       	mov	r25, r19
	call	DelayHigh
    1bea:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <DelayHigh>
	sbrc	r15,4		// Don't switch on if if ServoFlag bit is cleared
    1bee:	f4 fc       	sbrc	r15, 4
	sbi 	M5
    1bf0:	14 9a       	sbi	0x02, 4	; 2
	call	DelayLow
    1bf2:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <DelayLow>
	call    pwm_delay   // 100us
    1bf6:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <pwm_delay>
	call    pwm_delay
    1bfa:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <pwm_delay>

// M6
	mov		r25,r18
    1bfe:	92 2f       	mov	r25, r18
	call	DelayHigh
    1c00:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <DelayHigh>
	sbrc	r15,5		// Don't switch on if if ServoFlag bit is cleared
    1c04:	f5 fc       	sbrc	r15, 5
	sbi 	M6
    1c06:	15 9a       	sbi	0x02, 5	; 2
	call	DelayLow
    1c08:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <DelayLow>
	call    pwm_delay   // 100us
    1c0c:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <pwm_delay>
	call    pwm_delay
    1c10:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <pwm_delay>

// M7
	mov		r25,r17
    1c14:	91 2f       	mov	r25, r17
	call	DelayHigh
    1c16:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <DelayHigh>
	sbrc	r15,6		// Don't switch on if if ServoFlag bit is cleared
    1c1a:	f6 fc       	sbrc	r15, 6
	sbi 	M7
    1c1c:	45 9a       	sbi	0x08, 5	; 8
	call	DelayLow
    1c1e:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <DelayLow>
	call    pwm_delay   // 100us
    1c22:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <pwm_delay>
	call    pwm_delay
    1c26:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <pwm_delay>

// M8
	mov		r25,r16
    1c2a:	90 2f       	mov	r25, r16
	call	DelayHigh
    1c2c:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <DelayHigh>
	sbrc	r15,7		// Don't switch on if if ServoFlag bit is cleared
    1c30:	f7 fc       	sbrc	r15, 7
	sbi 	M8			// 1
    1c32:	47 9a       	sbi	0x08, 7	; 8
	call	DelayLow
    1c34:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <DelayLow>
// At this point, the largest pulse that we can generate is 256 * 8 = 2.048ms
// However we would like to be able to generate up to 2.100ms (150%) - an extra 52us
// So we can fluff it out another 200us so that we can subtract enough to keep r16 under 0xff or 256 :)
// With this setup, M1 can go down to 850 and M8 can go up to 2150

	call    pwm_delay   // 150us
    1c38:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <pwm_delay>
	call    pwm_delay
    1c3c:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <pwm_delay>
	call    pwm_delay
    1c40:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <pwm_delay>

// Copy trimmed array data into regs
// This now represents steps of 8us chunks
	pop		XH			// M8
    1c44:	bf 91       	pop	r27
	pop		XL
    1c46:	af 91       	pop	r26
	call	shuffle_8
    1c48:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <shuffle_8>
	mov		r16,XL
    1c4c:	0a 2f       	mov	r16, r26
	pop		XH			// M7
    1c4e:	bf 91       	pop	r27
	pop		XL
    1c50:	af 91       	pop	r26
	call	shuffle_8
    1c52:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <shuffle_8>
	mov		r17,XL
    1c56:	1a 2f       	mov	r17, r26
	pop		XH			// M6
    1c58:	bf 91       	pop	r27
	pop		XL
    1c5a:	af 91       	pop	r26
	call	shuffle_8
    1c5c:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <shuffle_8>
	mov		r18,XL
    1c60:	2a 2f       	mov	r18, r26
	pop		XH			// M5
    1c62:	bf 91       	pop	r27
	pop		XL
    1c64:	af 91       	pop	r26
	call	shuffle_8
    1c66:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <shuffle_8>
	mov		r19,XL
    1c6a:	3a 2f       	mov	r19, r26
	pop		XH			// M4
    1c6c:	bf 91       	pop	r27
	pop		XL
    1c6e:	af 91       	pop	r26
	call	shuffle_8
    1c70:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <shuffle_8>
	mov		r20,XL
    1c74:	4a 2f       	mov	r20, r26
	pop		XH			// M3
    1c76:	bf 91       	pop	r27
	pop		XL
    1c78:	af 91       	pop	r26
	call	shuffle_8
    1c7a:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <shuffle_8>
	mov		r21,XL
    1c7e:	5a 2f       	mov	r21, r26
	pop		XH			// M2
    1c80:	bf 91       	pop	r27
	pop		XL
    1c82:	af 91       	pop	r26
	call	shuffle_8
    1c84:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <shuffle_8>
	mov		r22,XL
    1c88:	6a 2f       	mov	r22, r26
	pop		XH			// M1
    1c8a:	bf 91       	pop	r27
	pop		XL
    1c8c:	af 91       	pop	r26
	call	shuffle_8
    1c8e:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <shuffle_8>
	mov		r23,XL
    1c92:	7a 2f       	mov	r23, r26

// Loop prep
	ldi 	YL,0x13		// 1			Set loop count to 113h or 275 (275 * 8us = 2200us)
    1c94:	c3 e1       	ldi	r28, 0x13	; 19
	ldi		YH,0x01		// 1
    1c96:	d1 e0       	ldi	r29, 0x01	; 1
	clr		0			// 1 (7)
    1c98:	00 24       	eor	r0, r0

00001c9a <nloop>:

// Ninja loop - 7 cycles each side (8 x 7 = 56 + 6 to loop + 98 pad = 160 cycles)
// 20 cyles = 1us, 160 cycles = 8us

nloop:
	subi	r23,1		// 1 			ServoOut1
    1c9a:	71 50       	subi	r23, 0x01	; 1
	brne	j1			// 2	1	
    1c9c:	19 f4       	brne	.+6      	; 0x1ca4 <j1>
	cbi 	M1			// 		2		Clear output M1 if done (+5 = 1448 = 72.4us = 48)
    1c9e:	46 98       	cbi	0x08, 6	; 8
	jmp		jj1			//		3
    1ca0:	0c 94 54 0e 	jmp	0x1ca8	; 0x1ca8 <jj1>

00001ca4 <j1>:
j1:
	rjmp 	.+0			// 2
    1ca4:	00 c0       	rjmp	.+0      	; 0x1ca6 <j1+0x2>
	rjmp 	.+0			// 2
    1ca6:	00 c0       	rjmp	.+0      	; 0x1ca8 <jj1>

00001ca8 <jj1>:
jj1:
	subi	r22,1		// 1			ServoOut2
    1ca8:	61 50       	subi	r22, 0x01	; 1
	brne	j2			// 2	1
    1caa:	19 f4       	brne	.+6      	; 0x1cb2 <j2>
	cbi 	M2			// 		2		Clear output M2 if done (+11 = 1285 = 64.25us = 40)
    1cac:	44 98       	cbi	0x08, 4	; 8
	jmp		jj2			//		3
    1cae:	0c 94 5b 0e 	jmp	0x1cb6	; 0x1cb6 <jj2>

00001cb2 <j2>:
j2:
	rjmp	.+0
    1cb2:	00 c0       	rjmp	.+0      	; 0x1cb4 <j2+0x2>
	rjmp	.+0
    1cb4:	00 c0       	rjmp	.+0      	; 0x1cb6 <jj2>

00001cb6 <jj2>:
jj2:
	subi	r21,1
    1cb6:	51 50       	subi	r21, 0x01	; 1
	brne	j3
    1cb8:	19 f4       	brne	.+6      	; 0x1cc0 <j3>
	cbi 	M3
    1cba:	42 98       	cbi	0x08, 2	; 8
	jmp		jj3
    1cbc:	0c 94 62 0e 	jmp	0x1cc4	; 0x1cc4 <jj3>

00001cc0 <j3>:
j3:
	rjmp	.+0
    1cc0:	00 c0       	rjmp	.+0      	; 0x1cc2 <j3+0x2>
	rjmp	.+0
    1cc2:	00 c0       	rjmp	.+0      	; 0x1cc4 <jj3>

00001cc4 <jj3>:
jj3:
	subi 	r20,1
    1cc4:	41 50       	subi	r20, 0x01	; 1
	brne	j4
    1cc6:	19 f4       	brne	.+6      	; 0x1cce <j4>
	cbi 	M4
    1cc8:	43 98       	cbi	0x08, 3	; 8
	jmp		jj4	
    1cca:	0c 94 69 0e 	jmp	0x1cd2	; 0x1cd2 <jj4>

00001cce <j4>:
j4:
	rjmp 	.+0
    1cce:	00 c0       	rjmp	.+0      	; 0x1cd0 <j4+0x2>
	rjmp 	.+0
    1cd0:	00 c0       	rjmp	.+0      	; 0x1cd2 <jj4>

00001cd2 <jj4>:
jj4:
	subi	r19,1
    1cd2:	31 50       	subi	r19, 0x01	; 1
	brne	j5
    1cd4:	19 f4       	brne	.+6      	; 0x1cdc <j5>
	cbi 	M5
    1cd6:	14 98       	cbi	0x02, 4	; 2
	jmp		jj5
    1cd8:	0c 94 70 0e 	jmp	0x1ce0	; 0x1ce0 <jj5>

00001cdc <j5>:
j5:
	rjmp 	.+0
    1cdc:	00 c0       	rjmp	.+0      	; 0x1cde <j5+0x2>
	rjmp 	.+0
    1cde:	00 c0       	rjmp	.+0      	; 0x1ce0 <jj5>

00001ce0 <jj5>:
jj5:
	subi	r18,1
    1ce0:	21 50       	subi	r18, 0x01	; 1
	brne	j6
    1ce2:	19 f4       	brne	.+6      	; 0x1cea <j6>
	cbi 	M6
    1ce4:	15 98       	cbi	0x02, 5	; 2
	jmp		jj6
    1ce6:	0c 94 77 0e 	jmp	0x1cee	; 0x1cee <jj6>

00001cea <j6>:
j6:
	rjmp 	.+0
    1cea:	00 c0       	rjmp	.+0      	; 0x1cec <j6+0x2>
	rjmp	.+0
    1cec:	00 c0       	rjmp	.+0      	; 0x1cee <jj6>

00001cee <jj6>:
jj6:
	subi	r17,1
    1cee:	11 50       	subi	r17, 0x01	; 1
	brne	j7
    1cf0:	19 f4       	brne	.+6      	; 0x1cf8 <j7>
	cbi 	M7
    1cf2:	45 98       	cbi	0x08, 5	; 8
	jmp		jj7
    1cf4:	0c 94 7e 0e 	jmp	0x1cfc	; 0x1cfc <jj7>

00001cf8 <j7>:
j7:
	rjmp 	.+0
    1cf8:	00 c0       	rjmp	.+0      	; 0x1cfa <j7+0x2>
	rjmp 	.+0
    1cfa:	00 c0       	rjmp	.+0      	; 0x1cfc <jj7>

00001cfc <jj7>:
jj7:
	subi 	r16,1		// ServoOut 8
    1cfc:	01 50       	subi	r16, 0x01	; 1
	brne	j8
    1cfe:	19 f4       	brne	.+6      	; 0x1d06 <j8>
	cbi 	M8
    1d00:	47 98       	cbi	0x08, 7	; 8
	jmp		jj8
    1d02:	0c 94 85 0e 	jmp	0x1d0a	; 0x1d0a <jj8>

00001d06 <j8>:
j8:
	rjmp 	.+0
    1d06:	00 c0       	rjmp	.+0      	; 0x1d08 <j8+0x2>
	rjmp 	.+0
    1d08:	00 c0       	rjmp	.+0      	; 0x1d0a <jj8>

00001d0a <jj8>:
jj8:
	call	pad_100_delay // (100)
    1d0a:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <pad_100_delay>

	subi 	YL,1		// 1
    1d0e:	c1 50       	subi	r28, 0x01	; 1
	sbc 	YH,0		// 1
    1d10:	d0 09       	sbc	r29, r0
	breq	skiploop	// 1	2		Loop until zero - 1 false 2 true
    1d12:	11 f0       	breq	.+4      	; 0x1d18 <skiploop>
	jmp		nloop		// 3			Can't reach nloop with a brne alone
    1d14:	0c 94 4d 0e 	jmp	0x1c9a	; 0x1c9a <nloop>

00001d18 <skiploop>:

skiploop:
	pop		25			// 		2		Restore regs
    1d18:	9f 91       	pop	r25
	pop		24			// 		2
    1d1a:	8f 91       	pop	r24
	pop		23			//		2
    1d1c:	7f 91       	pop	r23
	pop		22			//		2
    1d1e:	6f 91       	pop	r22
	pop		21			//		2
    1d20:	5f 91       	pop	r21
	pop		20			//		2
    1d22:	4f 91       	pop	r20
	pop		19			//		2
    1d24:	3f 91       	pop	r19
	pop		18			//		2
    1d26:	2f 91       	pop	r18
	pop		17			//		2
    1d28:	1f 91       	pop	r17
	pop		16			//		2
    1d2a:	0f 91       	pop	r16
	pop		YH			//		2
    1d2c:	df 91       	pop	r29
	pop		YL			//		2
    1d2e:	cf 91       	pop	r28
	pop		XH			//		2
    1d30:	bf 91       	pop	r27
	pop		XL			//		2
    1d32:	af 91       	pop	r26
	pop		ZH			// 		2
    1d34:	ff 91       	pop	r31
	pop		ZL			//		2
    1d36:	ef 91       	pop	r30

	ret					//		4
    1d38:	08 95       	ret

00001d3a <output_servo_ppm_asm3>:
;*************************************************************************

	.global output_servo_ppm_asm3
	.func   output_servo_ppm_asm3
output_servo_ppm_asm3:
	push	16			// Save regs
    1d3a:	0f 93       	push	r16
	push	17
    1d3c:	1f 93       	push	r17
	push	18
    1d3e:	2f 93       	push	r18

	//ldi 	16,0x34		// 1			Set loop count to 834h or 2100
	ldi 	16,0xFC		// 1			Set loop count to 8FCh or 2300(us)
    1d40:	0c ef       	ldi	r16, 0xFC	; 252
	ldi		17,0x08	
    1d42:	18 e0       	ldi	r17, 0x08	; 8
	clr		0
    1d44:	00 24       	eor	r0, r0

00001d46 <jump_table>:

jump_table:
	cpi		r24,0x00	; 0				
    1d46:	80 30       	cpi	r24, 0x00	; 0
	breq	in1
    1d48:	71 f0       	breq	.+28     	; 0x1d66 <in1>
	cpi		r24,0x01	; 1
    1d4a:	81 30       	cpi	r24, 0x01	; 1
	breq	in2
    1d4c:	79 f0       	breq	.+30     	; 0x1d6c <in2>
	cpi		r24,0x02	; 2
    1d4e:	82 30       	cpi	r24, 0x02	; 2
	breq	in3
    1d50:	81 f0       	breq	.+32     	; 0x1d72 <in3>
	cpi		r24,0x03	; 3
    1d52:	83 30       	cpi	r24, 0x03	; 3
	breq	in4
    1d54:	89 f0       	breq	.+34     	; 0x1d78 <in4>
	cpi		r24,0x04	; 4
    1d56:	84 30       	cpi	r24, 0x04	; 4
	breq	in5
    1d58:	91 f0       	breq	.+36     	; 0x1d7e <in5>
	cpi		r24,0x05	; 5
    1d5a:	85 30       	cpi	r24, 0x05	; 5
	breq	in6
    1d5c:	99 f0       	breq	.+38     	; 0x1d84 <in6>
	cpi		r24,0x06	; 6
    1d5e:	86 30       	cpi	r24, 0x06	; 6
	breq	in7
    1d60:	a1 f0       	breq	.+40     	; 0x1d8a <in7>
	cpi		r24,0x07	; 7
    1d62:	87 30       	cpi	r24, 0x07	; 7
	breq	in8
    1d64:	a9 f0       	breq	.+42     	; 0x1d90 <in8>

00001d66 <in1>:

in1:sbi 	M1			// Set output high
    1d66:	46 9a       	sbi	0x08, 6	; 8
	jmp		loopin
    1d68:	0c 94 cb 0e 	jmp	0x1d96	; 0x1d96 <loopin>

00001d6c <in2>:
in2:sbi 	M2
    1d6c:	44 9a       	sbi	0x08, 4	; 8
	jmp		loopin
    1d6e:	0c 94 cb 0e 	jmp	0x1d96	; 0x1d96 <loopin>

00001d72 <in3>:
in3:sbi 	M3	
    1d72:	42 9a       	sbi	0x08, 2	; 8
	jmp		loopin
    1d74:	0c 94 cb 0e 	jmp	0x1d96	; 0x1d96 <loopin>

00001d78 <in4>:
in4:sbi 	M4
    1d78:	43 9a       	sbi	0x08, 3	; 8
	jmp		loopin
    1d7a:	0c 94 cb 0e 	jmp	0x1d96	; 0x1d96 <loopin>

00001d7e <in5>:
in5:sbi 	M5
    1d7e:	14 9a       	sbi	0x02, 4	; 2
	jmp		loopin
    1d80:	0c 94 cb 0e 	jmp	0x1d96	; 0x1d96 <loopin>

00001d84 <in6>:
in6:sbi 	M6
    1d84:	15 9a       	sbi	0x02, 5	; 2
	jmp		loopin
    1d86:	0c 94 cb 0e 	jmp	0x1d96	; 0x1d96 <loopin>

00001d8a <in7>:
in7:sbi 	M7
    1d8a:	45 9a       	sbi	0x08, 5	; 8
	jmp		loopin
    1d8c:	0c 94 cb 0e 	jmp	0x1d96	; 0x1d96 <loopin>

00001d90 <in8>:
in8:sbi 	M8
    1d90:	47 9a       	sbi	0x08, 7	; 8
	jmp		loopin
    1d92:	0c 94 cb 0e 	jmp	0x1d96	; 0x1d96 <loopin>

00001d96 <loopin>:

// Loop - 20 cycles = 1us
loopin:
						// <---------	Left column is skip execution path
	rjmp .+0			// 2 	<----	Right column is pulse end execution path
    1d96:	00 c0       	rjmp	.+0      	; 0x1d98 <loopin+0x2>
	rjmp .+0			// 2
    1d98:	00 c0       	rjmp	.+0      	; 0x1d9a <loopin+0x4>
	rjmp .+0			// 2
    1d9a:	00 c0       	rjmp	.+0      	; 0x1d9c <loopin+0x6>
	rjmp .+0			// 2
    1d9c:	00 c0       	rjmp	.+0      	; 0x1d9e <loopin+0x8>
	rjmp .+0			// 2
    1d9e:	00 c0       	rjmp	.+0      	; 0x1da0 <loopin+0xa>
	rjmp .+0			// 2
    1da0:	00 c0       	rjmp	.+0      	; 0x1da2 <loopin+0xc>

	subi	r22,1		// 1 			Time servo pulse
    1da2:	61 50       	subi	r22, 0x01	; 1
	sbc 	r23,0		// 1
    1da4:	70 09       	sbc	r23, r0
	brne	loopout		// 2	1
    1da6:	19 f4       	brne	.+6      	; 0x1dae <loopout>

// Clear outputs if done
	ldi		r18,0x00	 // 1
    1da8:	20 e0       	ldi	r18, 0x00	; 0
	out 	SERVO_OUT_KK20,r18// 1			Boom.
    1daa:	28 b9       	out	0x08, r18	; 8
	out 	SERVO_OUT_KK21,r18// 1			KK2.1 has a couple of outputs on Port A also.
    1dac:	22 b9       	out	0x02, r18	; 2

00001dae <loopout>:

// Exit
loopout:
	subi 	16,1		// 1			+4 cycles = total 20 cycles
    1dae:	01 50       	subi	r16, 0x01	; 1
	sbc 	17,0		// 1
    1db0:	10 09       	sbc	r17, r0
	brne	loopin		// 2	1		Loop until zero
    1db2:	89 f7       	brne	.-30     	; 0x1d96 <loopin>

	pop		18
    1db4:	2f 91       	pop	r18
	pop		17			// Restore regs
    1db6:	1f 91       	pop	r17
	pop		16
    1db8:	0f 91       	pop	r16
	ret	
    1dba:	08 95       	ret

00001dbc <pwm_delay>:
;*************************************************************************	
; void pwm_delay(void) 50us output spacing delay (8 cycle loop - 400ns)
;*************************************************************************

pwm_delay:				// 4 to call
	push	16			// 1
    1dbc:	0f 93       	push	r16
	ldi 	16,0x65		// 1
    1dbe:	05 e6       	ldi	r16, 0x65	; 101

00001dc0 <pwm_loop>:

pwm_loop:
	rjmp .+0			// 2
    1dc0:	00 c0       	rjmp	.+0      	; 0x1dc2 <pwm_loop+0x2>
	rjmp .+0			// 2
    1dc2:	00 c0       	rjmp	.+0      	; 0x1dc4 <pwm_loop+0x4>
	rjmp .+0			// 2
    1dc4:	00 c0       	rjmp	.+0      	; 0x1dc6 <pwm_loop+0x6>
	subi	r16,1		// 1
    1dc6:	01 50       	subi	r16, 0x01	; 1
	brne	pwm_loop	// 2  1
    1dc8:	d9 f7       	brne	.-10     	; 0x1dc0 <pwm_loop>

00001dca <pwm_exit>:

pwm_exit:
	pop		16			//    1
    1dca:	0f 91       	pop	r16
	ret					//    4 to return
    1dcc:	08 95       	ret

00001dce <pad_100_delay>:
; pad_100_delay 98 cycle padding delay
; Takes 4 to call, so we need 94 cycles burnt here
;*************************************************************************

pad_100_delay:
	push	16			// 		2		Save regs
    1dce:	0f 93       	push	r16
	ldi 	16,0x09		// 		1		Set loop count to 09h or 9
    1dd0:	09 e0       	ldi	r16, 0x09	; 9

00001dd2 <pad_100>:

pad_100:				//				9 cycles, 8 on last
	rjmp .+0			// 2
    1dd2:	00 c0       	rjmp	.+0      	; 0x1dd4 <pad_100+0x2>
	rjmp .+0			// 2			8 x 9cyc + 8 = 80
    1dd4:	00 c0       	rjmp	.+0      	; 0x1dd6 <pad_100+0x4>
	rjmp .+0			// 2
    1dd6:	00 c0       	rjmp	.+0      	; 0x1dd8 <pad_100+0x6>

	subi 	16,1		// 1
    1dd8:	01 50       	subi	r16, 0x01	; 1
	brne	pad_100		// 2	1		Loop until zero	
    1dda:	d9 f7       	brne	.-10     	; 0x1dd2 <pad_100>

	nop					// 		1		Trim to precisely the right value
    1ddc:	00 00       	nop
	rjmp .+0			// 		2
    1dde:	00 c0       	rjmp	.+0      	; 0x1de0 <pad_100+0xe>
	rjmp .+0			// 		2
    1de0:	00 c0       	rjmp	.+0      	; 0x1de2 <pad_100+0x10>

	pop		16			// 		2		Restore regs
    1de2:	0f 91       	pop	r16
	ret					// 		4 (94 cycles)
    1de4:	08 95       	ret

00001de6 <us_delay>:
; void us_delay(void) 1us delay for ninja skills
; Takes 4 to call, 4 to return, so we need 12 cycles burnt here
;*************************************************************************

us_delay:
	rjmp .+0			// 2
    1de6:	00 c0       	rjmp	.+0      	; 0x1de8 <us_delay+0x2>
	rjmp .+0			// 2
    1de8:	00 c0       	rjmp	.+0      	; 0x1dea <us_delay+0x4>
	rjmp .+0			// 2
    1dea:	00 c0       	rjmp	.+0      	; 0x1dec <us_delay+0x6>
	rjmp .+0			// 2
    1dec:	00 c0       	rjmp	.+0      	; 0x1dee <us_delay+0x8>
	ret					// 4 (16 cycles)
    1dee:	08 95       	ret

00001df0 <shuffle_8>:
;*************************************************************************	
; Space-saving macro-ish suroutines
;*************************************************************************

shuffle_8: // (10 cycles)
	lsr		XH			// 1 Rotate right into carry
    1df0:	b6 95       	lsr	r27
	ror		XL			// 1 Rotate right with carry from MSB
    1df2:	a7 95       	ror	r26
	lsr		XH			// 1
    1df4:	b6 95       	lsr	r27
	ror		XL			// 1
    1df6:	a7 95       	ror	r26
	lsr		XH			// 1
    1df8:	b6 95       	lsr	r27
	ror		XL			// 1
    1dfa:	a7 95       	ror	r26
	ret					// 4
    1dfc:	08 95       	ret

00001dfe <DelayHigh>:
; 10 and 150 cycles at 1us intervals per value in r26
; 
;*************************************************************************

DelayHigh:				// (0)	(1)	(2+) each extra is +20
	ldi		YL,0x07		// 1	1	1
    1dfe:	c7 e0       	ldi	r28, 0x07	; 7
	andi	r25,0x07	
    1e00:	97 70       	andi	r25, 0x07	; 7
	eor		YL,r25		// 1 	1	1
    1e02:	c9 27       	eor	r28, r25
	breq	LoopHighOut1// 2	1	1
    1e04:	31 f0       	breq	.+12     	; 0x1e12 <LoopHighOut1>

00001e06 <LoopHigh>:
LoopHigh:
	call    us_delay	// 		16	16
    1e06:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <us_delay>
	dec 	YL			// 		1	1
    1e0a:	ca 95       	dec	r28
	breq	LoopHighOut2// 		2	1/2
    1e0c:	09 f0       	breq	.+2      	; 0x1e10 <LoopHighOut2>
	rjmp	LoopHigh	// 			2
    1e0e:	fb cf       	rjmp	.-10     	; 0x1e06 <LoopHigh>

00001e10 <LoopHighOut2>:
LoopHighOut2:
	rjmp .+0			// 		2	2
    1e10:	00 c0       	rjmp	.+0      	; 0x1e12 <LoopHighOut1>

00001e12 <LoopHighOut1>:
LoopHighOut1:
	nop					// 1	1	1
    1e12:	00 00       	nop
    ret					// 4	4	4
    1e14:	08 95       	ret

00001e16 <DelayLow>:
; regardless of the value of r25
;
;*************************************************************************

DelayLow:				// (0)	(1)	(2+) each extra is +20
	mov		YL,r25		// 1	1	
    1e16:	c9 2f       	mov	r28, r25
	andi	YL,0x07	
    1e18:	c7 70       	andi	r28, 0x07	; 7
	breq	LoopLowOut1	// 2	1	1
    1e1a:	31 f0       	breq	.+12     	; 0x1e28 <LoopLowOut1>

00001e1c <LoopLow>:
LoopLow:
	call    us_delay	//		16	16
    1e1c:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <us_delay>
	dec 	YL			//		1	1
    1e20:	ca 95       	dec	r28
	breq	LoopLowOut2	//		2	1/2
    1e22:	09 f0       	breq	.+2      	; 0x1e26 <LoopLowOut2>
	rjmp	LoopLow		//			2
    1e24:	fb cf       	rjmp	.-10     	; 0x1e1c <LoopLow>

00001e26 <LoopLowOut2>:
LoopLowOut2:
	rjmp .+0			// 		2	2
    1e26:	00 c0       	rjmp	.+0      	; 0x1e28 <LoopLowOut1>

00001e28 <LoopLowOut1>:
LoopLowOut1:
    ret					// 4	4	4
    1e28:	08 95       	ret

00001e2a <get_raw_accs>:
//***************************************************************
// Fill accADC with RPY data appropriate to the board orientation
//***************************************************************

void get_raw_accs(void)
{
    1e2a:	cf 93       	push	r28
    1e2c:	df 93       	push	r29
    1e2e:	cd b7       	in	r28, 0x3d	; 61
    1e30:	de b7       	in	r29, 0x3e	; 62
    1e32:	2c 97       	sbiw	r28, 0x0c	; 12
    1e34:	0f b6       	in	r0, 0x3f	; 63
    1e36:	f8 94       	cli
    1e38:	de bf       	out	0x3e, r29	; 62
    1e3a:	0f be       	out	0x3f, r0	; 63
    1e3c:	cd bf       	out	0x3d, r28	; 61
	// Get data from MPU6050
	uint8_t Accs[6];
	int16_t temp1, temp2;

	// Get the i2c data from the MPU6050
	readI2CbyteArray(MPU60X0_DEFAULT_ADDRESS,MPU60X0_RA_ACCEL_XOUT_H,(uint8_t *)Accs,6);
    1e3e:	26 e0       	ldi	r18, 0x06	; 6
    1e40:	ae 01       	movw	r20, r28
    1e42:	4f 5f       	subi	r20, 0xFF	; 255
    1e44:	5f 4f       	sbci	r21, 0xFF	; 255
    1e46:	6b e3       	ldi	r22, 0x3B	; 59
    1e48:	80 ed       	ldi	r24, 0xD0	; 208
    1e4a:	0e 94 81 23 	call	0x4702	; 0x4702 <readI2CbyteArray>

	// Reassemble data into accADC array and down sample to reduce resolution and noise
	// This notation is true to the chip, but not the board orientation

	temp1 = Accs[0] << 8;					// Accel X
    1e4e:	89 81       	ldd	r24, Y+1	; 0x01
    1e50:	90 e0       	ldi	r25, 0x00	; 0
    1e52:	98 2f       	mov	r25, r24
    1e54:	88 27       	eor	r24, r24
	temp2 = Accs[1];
    1e56:	2a 81       	ldd	r18, Y+2	; 0x02
	RawADC[ROLL] = (temp1 + temp2) >> 6;
    1e58:	82 0f       	add	r24, r18
    1e5a:	91 1d       	adc	r25, r1
    1e5c:	36 e0       	ldi	r19, 0x06	; 6
    1e5e:	95 95       	asr	r25
    1e60:	87 95       	ror	r24
    1e62:	3a 95       	dec	r19
    1e64:	e1 f7       	brne	.-8      	; 0x1e5e <get_raw_accs+0x34>
    1e66:	98 87       	std	Y+8, r25	; 0x08
    1e68:	8f 83       	std	Y+7, r24	; 0x07

	temp1 = Accs[2] << 8;					// Accel Y
    1e6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e6c:	90 e0       	ldi	r25, 0x00	; 0
    1e6e:	98 2f       	mov	r25, r24
    1e70:	88 27       	eor	r24, r24
	temp2 = Accs[3];
    1e72:	2c 81       	ldd	r18, Y+4	; 0x04
	RawADC[PITCH] = -((temp1 + temp2) >> 6);
    1e74:	82 0f       	add	r24, r18
    1e76:	91 1d       	adc	r25, r1
    1e78:	56 e0       	ldi	r21, 0x06	; 6
    1e7a:	95 95       	asr	r25
    1e7c:	87 95       	ror	r24
    1e7e:	5a 95       	dec	r21
    1e80:	e1 f7       	brne	.-8      	; 0x1e7a <get_raw_accs+0x50>
    1e82:	91 95       	neg	r25
    1e84:	81 95       	neg	r24
    1e86:	91 09       	sbc	r25, r1
    1e88:	9a 87       	std	Y+10, r25	; 0x0a
    1e8a:	89 87       	std	Y+9, r24	; 0x09

	temp1 = Accs[4] << 8;					// Accel Z
    1e8c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e8e:	90 e0       	ldi	r25, 0x00	; 0
    1e90:	98 2f       	mov	r25, r24
    1e92:	88 27       	eor	r24, r24
	temp2 = Accs[5];
    1e94:	2e 81       	ldd	r18, Y+6	; 0x06
	RawADC[YAW] = (temp1 + temp2) >> 6;
    1e96:	82 0f       	add	r24, r18
    1e98:	91 1d       	adc	r25, r1
    1e9a:	76 e0       	ldi	r23, 0x06	; 6
    1e9c:	95 95       	asr	r25
    1e9e:	87 95       	ror	r24
    1ea0:	7a 95       	dec	r23
    1ea2:	e1 f7       	brne	.-8      	; 0x1e9c <get_raw_accs+0x72>
    1ea4:	9c 87       	std	Y+12, r25	; 0x0c
    1ea6:	8b 87       	std	Y+11, r24	; 0x0b

	// Reorient the data as per the board orientation	
	for (i=0; i<NUMBEROFAXIS; i++)
	{
		// Rearrange the sensors
		accADC[i] = RawADC[(int8_t)pgm_read_byte(&ACC_RPY_Order[Config.Orientation][i])];
    1ea8:	20 91 39 06 	lds	r18, 0x0639
    1eac:	ac e3       	ldi	r26, 0x3C	; 60
    1eae:	b5 e0       	ldi	r27, 0x05	; 5
    1eb0:	43 e0       	ldi	r20, 0x03	; 3
    1eb2:	24 02       	muls	r18, r20
    1eb4:	90 01       	movw	r18, r0
    1eb6:	11 24       	eor	r1, r1
    1eb8:	80 e0       	ldi	r24, 0x00	; 0
    1eba:	90 e0       	ldi	r25, 0x00	; 0
    1ebc:	2c 54       	subi	r18, 0x4C	; 76
    1ebe:	3f 4f       	sbci	r19, 0xFF	; 255
    1ec0:	f9 01       	movw	r30, r18
    1ec2:	e8 0f       	add	r30, r24
    1ec4:	f9 1f       	adc	r31, r25
    1ec6:	e4 91       	lpm	r30, Z
    1ec8:	ee 0f       	add	r30, r30
    1eca:	ff 0b       	sbc	r31, r31
    1ecc:	41 e0       	ldi	r20, 0x01	; 1
    1ece:	50 e0       	ldi	r21, 0x00	; 0
    1ed0:	4c 0f       	add	r20, r28
    1ed2:	5d 1f       	adc	r21, r29
    1ed4:	e4 0f       	add	r30, r20
    1ed6:	f5 1f       	adc	r31, r21
    1ed8:	46 81       	ldd	r20, Z+6	; 0x06
    1eda:	57 81       	ldd	r21, Z+7	; 0x07
    1edc:	4d 93       	st	X+, r20
    1ede:	5d 93       	st	X+, r21
    1ee0:	01 96       	adiw	r24, 0x01	; 1
	temp1 = Accs[4] << 8;					// Accel Z
	temp2 = Accs[5];
	RawADC[YAW] = (temp1 + temp2) >> 6;

	// Reorient the data as per the board orientation	
	for (i=0; i<NUMBEROFAXIS; i++)
    1ee2:	83 30       	cpi	r24, 0x03	; 3
    1ee4:	91 05       	cpc	r25, r1
    1ee6:	61 f7       	brne	.-40     	; 0x1ec0 <get_raw_accs+0x96>
	{
		// Rearrange the sensors
		accADC[i] = RawADC[(int8_t)pgm_read_byte(&ACC_RPY_Order[Config.Orientation][i])];
	}
}
    1ee8:	2c 96       	adiw	r28, 0x0c	; 12
    1eea:	0f b6       	in	r0, 0x3f	; 63
    1eec:	f8 94       	cli
    1eee:	de bf       	out	0x3e, r29	; 62
    1ef0:	0f be       	out	0x3f, r0	; 63
    1ef2:	cd bf       	out	0x3d, r28	; 61
    1ef4:	df 91       	pop	r29
    1ef6:	cf 91       	pop	r28
    1ef8:	08 95       	ret

00001efa <ReadAcc>:

int16_t accADC[NUMBEROFAXIS];	// Holds Acc ADC values - always in RPY order
int16_t accVert = 0;			// Holds the level-zeroed Z-acc value. Used for height damping in hover only.

void ReadAcc()
{
    1efa:	1f 93       	push	r17
    1efc:	cf 93       	push	r28
    1efe:	df 93       	push	r29
	uint8_t i;

	get_raw_accs();				// Updates accADC[] (RPY)
    1f00:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <get_raw_accs>

	// Use default Config.AccZero for Acc-Z if inverse calibration not done yet
	// Actual zero is held in Config.AccZeroNormZ waiting for inv calibration
	if (!(Config.Main_flags & (1 << inv_cal_done)))
    1f04:	80 91 b8 07 	lds	r24, 0x07B8
    1f08:	80 fd       	sbrc	r24, 0
    1f0a:	05 c0       	rjmp	.+10     	; 0x1f16 <ReadAcc+0x1c>
	{
		Config.AccZero[YAW] = 0;
    1f0c:	10 92 a0 07 	sts	0x07A0, r1
    1f10:	10 92 9f 07 	sts	0x079F, r1
    1f14:	0e c0       	rjmp	.+28     	; 0x1f32 <ReadAcc+0x38>

	// If inverted cal done, Config.AccZeroNormZ and Config.AccZeroDiff have
	// valid values
	else
	{
		Config.AccZero[YAW] = Config.AccZeroNormZ - Config.AccZeroDiff;
    1f16:	80 91 a1 07 	lds	r24, 0x07A1
    1f1a:	90 91 a2 07 	lds	r25, 0x07A2
    1f1e:	20 91 a5 07 	lds	r18, 0x07A5
    1f22:	30 91 a6 07 	lds	r19, 0x07A6
    1f26:	82 1b       	sub	r24, r18
    1f28:	93 0b       	sbc	r25, r19
    1f2a:	90 93 a0 07 	sts	0x07A0, r25
    1f2e:	80 93 9f 07 	sts	0x079F, r24
	{
		// Remove offsets from acc outputs
		accADC[i] -= Config.AccZero[i];

		// Change polarity
		accADC[i] *= (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation][i]);
    1f32:	20 91 39 06 	lds	r18, 0x0639
    1f36:	cb e9       	ldi	r28, 0x9B	; 155
    1f38:	d7 e0       	ldi	r29, 0x07	; 7
    1f3a:	ac e3       	ldi	r26, 0x3C	; 60
    1f3c:	b5 e0       	ldi	r27, 0x05	; 5
    1f3e:	83 e0       	ldi	r24, 0x03	; 3
    1f40:	28 02       	muls	r18, r24
    1f42:	90 01       	movw	r18, r0
    1f44:	11 24       	eor	r1, r1
    1f46:	80 e0       	ldi	r24, 0x00	; 0
    1f48:	90 e0       	ldi	r25, 0x00	; 0
    1f4a:	2e 55       	subi	r18, 0x5E	; 94
    1f4c:	3f 4f       	sbci	r19, 0xFF	; 255
	}

	for (i=0; i < NUMBEROFAXIS; i++)
	{
		// Remove offsets from acc outputs
		accADC[i] -= Config.AccZero[i];
    1f4e:	69 91       	ld	r22, Y+
    1f50:	79 91       	ld	r23, Y+
    1f52:	f9 01       	movw	r30, r18
    1f54:	e8 0f       	add	r30, r24
    1f56:	f9 1f       	adc	r31, r25

		// Change polarity
		accADC[i] *= (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation][i]);
    1f58:	14 91       	lpm	r17, Z
	}

	for (i=0; i < NUMBEROFAXIS; i++)
	{
		// Remove offsets from acc outputs
		accADC[i] -= Config.AccZero[i];
    1f5a:	4d 91       	ld	r20, X+
    1f5c:	5c 91       	ld	r21, X
    1f5e:	11 97       	sbiw	r26, 0x01	; 1
    1f60:	46 1b       	sub	r20, r22
    1f62:	57 0b       	sbc	r21, r23

		// Change polarity
		accADC[i] *= (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation][i]);
    1f64:	14 03       	mulsu	r17, r20
    1f66:	b0 01       	movw	r22, r0
    1f68:	15 9f       	mul	r17, r21
    1f6a:	70 0d       	add	r23, r0
    1f6c:	11 24       	eor	r1, r1
    1f6e:	6d 93       	st	X+, r22
    1f70:	7d 93       	st	X+, r23
    1f72:	01 96       	adiw	r24, 0x01	; 1
	else
	{
		Config.AccZero[YAW] = Config.AccZeroNormZ - Config.AccZeroDiff;
	}

	for (i=0; i < NUMBEROFAXIS; i++)
    1f74:	83 30       	cpi	r24, 0x03	; 3
    1f76:	91 05       	cpc	r25, r1
    1f78:	51 f7       	brne	.-44     	; 0x1f4e <ReadAcc+0x54>
	}

	// Recalculate current accVert using filtered acc value
	// Note that AccSmooth[YAW] is already zeroed around 1G so we have to re-add 
	// the zero back here so that Config.AccZeroNormZ subtracts the correct amount
	 accVert = accSmooth[YAW] + (Config.AccZeroNormZ - Config.AccZero[YAW]);
    1f7a:	60 91 a1 07 	lds	r22, 0x07A1
    1f7e:	70 91 a2 07 	lds	r23, 0x07A2
    1f82:	80 91 9f 07 	lds	r24, 0x079F
    1f86:	90 91 a0 07 	lds	r25, 0x07A0
    1f8a:	68 1b       	sub	r22, r24
    1f8c:	79 0b       	sbc	r23, r25
    1f8e:	88 27       	eor	r24, r24
    1f90:	77 fd       	sbrc	r23, 7
    1f92:	80 95       	com	r24
    1f94:	98 2f       	mov	r25, r24
    1f96:	0e 94 41 46 	call	0x8c82	; 0x8c82 <__floatsisf>
    1f9a:	20 91 a1 05 	lds	r18, 0x05A1
    1f9e:	30 91 a2 05 	lds	r19, 0x05A2
    1fa2:	40 91 a3 05 	lds	r20, 0x05A3
    1fa6:	50 91 a4 05 	lds	r21, 0x05A4
    1faa:	0e 94 3e 45 	call	0x8a7c	; 0x8a7c <__addsf3>
    1fae:	0e 94 0e 46 	call	0x8c1c	; 0x8c1c <__fixsfsi>
    1fb2:	70 93 0f 05 	sts	0x050F, r23
    1fb6:	60 93 0e 05 	sts	0x050E, r22
}
    1fba:	df 91       	pop	r29
    1fbc:	cf 91       	pop	r28
    1fbe:	1f 91       	pop	r17
    1fc0:	08 95       	ret

00001fc2 <CalibrateAcc>:
//***************************************************************
// Calibration routines
//***************************************************************

void CalibrateAcc(int8_t type)
{
    1fc2:	1f 93       	push	r17
    1fc4:	cf 93       	push	r28
    1fc6:	df 93       	push	r29
    1fc8:	00 d0       	rcall	.+0      	; 0x1fca <CalibrateAcc+0x8>
    1fca:	00 d0       	rcall	.+0      	; 0x1fcc <CalibrateAcc+0xa>
    1fcc:	00 d0       	rcall	.+0      	; 0x1fce <CalibrateAcc+0xc>
    1fce:	cd b7       	in	r28, 0x3d	; 61
    1fd0:	de b7       	in	r29, 0x3e	; 62
	uint8_t i;
	int16_t accZero[NUMBEROFAXIS] = {0,0,0};	// Used for calibrating Accs on ground
    1fd2:	1a 82       	std	Y+2, r1	; 0x02
    1fd4:	19 82       	std	Y+1, r1	; 0x01
    1fd6:	1c 82       	std	Y+4, r1	; 0x04
    1fd8:	1b 82       	std	Y+3, r1	; 0x03
    1fda:	1e 82       	std	Y+6, r1	; 0x06
    1fdc:	1d 82       	std	Y+5, r1	; 0x05

	// Calibrate acc
	if (type == NORMAL)
    1fde:	81 11       	cpse	r24, r1
    1fe0:	6f c0       	rjmp	.+222    	; 0x20c0 <CalibrateAcc+0xfe>
    1fe2:	10 e2       	ldi	r17, 0x20	; 32
	{
		// Get average zero value (over 32 readings)
		for (i = 0; i < 32; i++)
		{
			get_raw_accs();						// Updates accADC[] with signals reoriented into (RPY)
    1fe4:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <get_raw_accs>

			accZero[ROLL] += accADC[ROLL];
    1fe8:	89 81       	ldd	r24, Y+1	; 0x01
    1fea:	9a 81       	ldd	r25, Y+2	; 0x02
    1fec:	20 91 3c 05 	lds	r18, 0x053C
    1ff0:	30 91 3d 05 	lds	r19, 0x053D
    1ff4:	82 0f       	add	r24, r18
    1ff6:	93 1f       	adc	r25, r19
    1ff8:	9a 83       	std	Y+2, r25	; 0x02
    1ffa:	89 83       	std	Y+1, r24	; 0x01
			accZero[PITCH] += accADC[PITCH];						
    1ffc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ffe:	9c 81       	ldd	r25, Y+4	; 0x04
    2000:	20 91 3e 05 	lds	r18, 0x053E
    2004:	30 91 3f 05 	lds	r19, 0x053F
    2008:	82 0f       	add	r24, r18
    200a:	93 1f       	adc	r25, r19
    200c:	9c 83       	std	Y+4, r25	; 0x04
    200e:	8b 83       	std	Y+3, r24	; 0x03
			accZero[YAW] += accADC[YAW];		
    2010:	8d 81       	ldd	r24, Y+5	; 0x05
    2012:	9e 81       	ldd	r25, Y+6	; 0x06
    2014:	20 91 40 05 	lds	r18, 0x0540
    2018:	30 91 41 05 	lds	r19, 0x0541
    201c:	82 0f       	add	r24, r18
    201e:	93 1f       	adc	r25, r19
    2020:	9e 83       	std	Y+6, r25	; 0x06
    2022:	8d 83       	std	Y+5, r24	; 0x05
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2024:	8f e4       	ldi	r24, 0x4F	; 79
    2026:	93 ec       	ldi	r25, 0xC3	; 195
    2028:	01 97       	sbiw	r24, 0x01	; 1
    202a:	f1 f7       	brne	.-4      	; 0x2028 <CalibrateAcc+0x66>
    202c:	00 c0       	rjmp	.+0      	; 0x202e <CalibrateAcc+0x6c>
    202e:	00 00       	nop
    2030:	11 50       	subi	r17, 0x01	; 1

	// Calibrate acc
	if (type == NORMAL)
	{
		// Get average zero value (over 32 readings)
		for (i = 0; i < 32; i++)
    2032:	c1 f6       	brne	.-80     	; 0x1fe4 <CalibrateAcc+0x22>
    2034:	fe 01       	movw	r30, r28
    2036:	31 96       	adiw	r30, 0x01	; 1
    2038:	9e 01       	movw	r18, r28
    203a:	29 5f       	subi	r18, 0xF9	; 249
    203c:	3f 4f       	sbci	r19, 0xFF	; 255
		}

		for (i = 0; i < NUMBEROFAXIS; i++)		// For selected axis in RPY order
		{
			// Round and divide by 32
			accZero[i] = ((accZero[i] + 16) >> 5);
    203e:	80 81       	ld	r24, Z
    2040:	91 81       	ldd	r25, Z+1	; 0x01
    2042:	40 96       	adiw	r24, 0x10	; 16
    2044:	45 e0       	ldi	r20, 0x05	; 5
    2046:	95 95       	asr	r25
    2048:	87 95       	ror	r24
    204a:	4a 95       	dec	r20
    204c:	e1 f7       	brne	.-8      	; 0x2046 <CalibrateAcc+0x84>
    204e:	81 93       	st	Z+, r24
    2050:	91 93       	st	Z+, r25
			accZero[YAW] += accADC[YAW];		

			_delay_ms(10);						// Get a better acc average over time
		}

		for (i = 0; i < NUMBEROFAXIS; i++)		// For selected axis in RPY order
    2052:	e2 17       	cp	r30, r18
    2054:	f3 07       	cpc	r31, r19
    2056:	99 f7       	brne	.-26     	; 0x203e <CalibrateAcc+0x7c>
			// Round and divide by 32
			accZero[i] = ((accZero[i] + 16) >> 5);
		}

		// Reset zeros to normal cal
		Config.AccZero[ROLL] = accZero[ROLL]; 
    2058:	89 81       	ldd	r24, Y+1	; 0x01
    205a:	9a 81       	ldd	r25, Y+2	; 0x02
    205c:	90 93 9c 07 	sts	0x079C, r25
    2060:	80 93 9b 07 	sts	0x079B, r24
		Config.AccZero[PITCH] = accZero[PITCH]; 
    2064:	8b 81       	ldd	r24, Y+3	; 0x03
    2066:	9c 81       	ldd	r25, Y+4	; 0x04
    2068:	90 93 9e 07 	sts	0x079E, r25
    206c:	80 93 9d 07 	sts	0x079D, r24
		Config.AccZeroNormZ = accZero[YAW]; 
			
		// Correct polarity of AccZeroNormZ as per orientation
		Config.AccZeroNormZ *= (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation][YAW]);
    2070:	80 91 39 06 	lds	r24, 0x0639
    2074:	99 27       	eor	r25, r25
    2076:	87 fd       	sbrc	r24, 7
    2078:	90 95       	com	r25
    207a:	fc 01       	movw	r30, r24
    207c:	ee 0f       	add	r30, r30
    207e:	ff 1f       	adc	r31, r31
    2080:	e8 0f       	add	r30, r24
    2082:	f9 1f       	adc	r31, r25
    2084:	ec 55       	subi	r30, 0x5C	; 92
    2086:	ff 4f       	sbci	r31, 0xFF	; 255
    2088:	44 91       	lpm	r20, Z
    208a:	2d 81       	ldd	r18, Y+5	; 0x05
    208c:	3e 81       	ldd	r19, Y+6	; 0x06
    208e:	42 03       	mulsu	r20, r18
    2090:	c0 01       	movw	r24, r0
    2092:	43 9f       	mul	r20, r19
    2094:	90 0d       	add	r25, r0
    2096:	11 24       	eor	r1, r1
    2098:	90 93 a2 07 	sts	0x07A2, r25
    209c:	80 93 a1 07 	sts	0x07A1, r24
			
		// Flag that normal cal done
		Config.Main_flags |= (1 << normal_cal_done);
    20a0:	80 91 b8 07 	lds	r24, 0x07B8
    20a4:	82 60       	ori	r24, 0x02	; 2
    20a6:	80 93 b8 07 	sts	0x07B8, r24
	
		// Save new calibration and flash LED for confirmation
		Save_Config_to_EEPROM();
    20aa:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <Save_Config_to_EEPROM>
		LED1 = 1;
    20ae:	2b 9a       	sbi	0x05, 3	; 5
    20b0:	9f e7       	ldi	r25, 0x7F	; 127
    20b2:	24 e8       	ldi	r18, 0x84	; 132
    20b4:	4e e1       	ldi	r20, 0x1E	; 30
    20b6:	91 50       	subi	r25, 0x01	; 1
    20b8:	20 40       	sbci	r18, 0x00	; 0
    20ba:	40 40       	sbci	r20, 0x00	; 0
    20bc:	e1 f7       	brne	.-8      	; 0x20b6 <CalibrateAcc+0xf4>
    20be:	67 c0       	rjmp	.+206    	; 0x218e <CalibrateAcc+0x1cc>

	else
	// Calibrate inverted acc
	{
		// Only update the inverted cal value if preceded by a normal calibration
		if (Config.Main_flags & (1 << normal_cal_done))
    20c0:	80 91 b8 07 	lds	r24, 0x07B8
    20c4:	81 ff       	sbrs	r24, 1
    20c6:	66 c0       	rjmp	.+204    	; 0x2194 <CalibrateAcc+0x1d2>
		{
			// Get average zero value (over 32 readings)
			Config.AccZeroInvZ = 0;
    20c8:	10 92 a4 07 	sts	0x07A4, r1
    20cc:	10 92 a3 07 	sts	0x07A3, r1
    20d0:	10 e2       	ldi	r17, 0x20	; 32

			for (i = 0; i < 32; i++)
			{
				get_raw_accs();					// Updates gyroADC[] with reoriented vales
    20d2:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <get_raw_accs>
				Config.AccZeroInvZ += accADC[YAW];		
    20d6:	80 91 a3 07 	lds	r24, 0x07A3
    20da:	90 91 a4 07 	lds	r25, 0x07A4
    20de:	20 91 40 05 	lds	r18, 0x0540
    20e2:	30 91 41 05 	lds	r19, 0x0541
    20e6:	82 0f       	add	r24, r18
    20e8:	93 1f       	adc	r25, r19
    20ea:	90 93 a4 07 	sts	0x07A4, r25
    20ee:	80 93 a3 07 	sts	0x07A3, r24
    20f2:	8f e4       	ldi	r24, 0x4F	; 79
    20f4:	93 ec       	ldi	r25, 0xC3	; 195
    20f6:	01 97       	sbiw	r24, 0x01	; 1
    20f8:	f1 f7       	brne	.-4      	; 0x20f6 <CalibrateAcc+0x134>
    20fa:	00 c0       	rjmp	.+0      	; 0x20fc <CalibrateAcc+0x13a>
    20fc:	00 00       	nop
    20fe:	11 50       	subi	r17, 0x01	; 1
		if (Config.Main_flags & (1 << normal_cal_done))
		{
			// Get average zero value (over 32 readings)
			Config.AccZeroInvZ = 0;

			for (i = 0; i < 32; i++)
    2100:	41 f7       	brne	.-48     	; 0x20d2 <CalibrateAcc+0x110>

			// Round and divide by 32
			Config.AccZeroInvZ = ((Config.AccZeroInvZ + 16) >> 5);		// Inverted zero point
			
			// Correct polarity of AccZeroInvZ as per orientation
			Config.AccZeroInvZ *= (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation][YAW]);
    2102:	80 91 39 06 	lds	r24, 0x0639
    2106:	99 27       	eor	r25, r25
    2108:	87 fd       	sbrc	r24, 7
    210a:	90 95       	com	r25
    210c:	fc 01       	movw	r30, r24
    210e:	ee 0f       	add	r30, r30
    2110:	ff 1f       	adc	r31, r31
    2112:	e8 0f       	add	r30, r24
    2114:	f9 1f       	adc	r31, r25
    2116:	ec 55       	subi	r30, 0x5C	; 92
    2118:	ff 4f       	sbci	r31, 0xFF	; 255
    211a:	44 91       	lpm	r20, Z
				Config.AccZeroInvZ += accADC[YAW];		
				_delay_ms(10);					// Get a better acc average over time
			}

			// Round and divide by 32
			Config.AccZeroInvZ = ((Config.AccZeroInvZ + 16) >> 5);		// Inverted zero point
    211c:	20 91 a3 07 	lds	r18, 0x07A3
    2120:	30 91 a4 07 	lds	r19, 0x07A4
    2124:	20 5f       	subi	r18, 0xF0	; 240
    2126:	3f 4f       	sbci	r19, 0xFF	; 255
    2128:	b5 e0       	ldi	r27, 0x05	; 5
    212a:	35 95       	asr	r19
    212c:	27 95       	ror	r18
    212e:	ba 95       	dec	r27
    2130:	e1 f7       	brne	.-8      	; 0x212a <CalibrateAcc+0x168>
			
			// Correct polarity of AccZeroInvZ as per orientation
			Config.AccZeroInvZ *= (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation][YAW]);
    2132:	42 03       	mulsu	r20, r18
    2134:	c0 01       	movw	r24, r0
    2136:	43 9f       	mul	r20, r19
    2138:	90 0d       	add	r25, r0
    213a:	11 24       	eor	r1, r1
    213c:	90 93 a4 07 	sts	0x07A4, r25
    2140:	80 93 a3 07 	sts	0x07A3, r24

			// Test if board is actually inverted relative to board orientation.
			if (Config.AccZeroInvZ < 0)
    2144:	97 ff       	sbrs	r25, 7
    2146:	26 c0       	rjmp	.+76     	; 0x2194 <CalibrateAcc+0x1d2>
			{

				// Reset zero to halfway between min and max Z
				Config.AccZeroDiff = ((Config.AccZeroNormZ - Config.AccZeroInvZ) >> 1);
    2148:	20 91 a1 07 	lds	r18, 0x07A1
    214c:	30 91 a2 07 	lds	r19, 0x07A2
    2150:	a9 01       	movw	r20, r18
    2152:	48 1b       	sub	r20, r24
    2154:	59 0b       	sbc	r21, r25
    2156:	ca 01       	movw	r24, r20
    2158:	95 95       	asr	r25
    215a:	87 95       	ror	r24
    215c:	90 93 a6 07 	sts	0x07A6, r25
    2160:	80 93 a5 07 	sts	0x07A5, r24
				Config.AccZero[YAW] = Config.AccZeroNormZ - Config.AccZeroDiff; // Config.AccZero[YAW] is now valid to use
    2164:	28 1b       	sub	r18, r24
    2166:	39 0b       	sbc	r19, r25
    2168:	30 93 a0 07 	sts	0x07A0, r19
    216c:	20 93 9f 07 	sts	0x079F, r18

				// Flag that inverted cal done
				Config.Main_flags |= (1 << inv_cal_done);
    2170:	80 91 b8 07 	lds	r24, 0x07B8
    2174:	81 60       	ori	r24, 0x01	; 1
    2176:	80 93 b8 07 	sts	0x07B8, r24

				// Save new calibration and flash LED for confirmation
				Save_Config_to_EEPROM();
    217a:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <Save_Config_to_EEPROM>
				LED1 = 1;
    217e:	2b 9a       	sbi	0x05, 3	; 5
    2180:	5f e7       	ldi	r21, 0x7F	; 127
    2182:	84 e8       	ldi	r24, 0x84	; 132
    2184:	9e e1       	ldi	r25, 0x1E	; 30
    2186:	51 50       	subi	r21, 0x01	; 1
    2188:	80 40       	sbci	r24, 0x00	; 0
    218a:	90 40       	sbci	r25, 0x00	; 0
    218c:	e1 f7       	brne	.-8      	; 0x2186 <CalibrateAcc+0x1c4>
    218e:	00 c0       	rjmp	.+0      	; 0x2190 <CalibrateAcc+0x1ce>
    2190:	00 00       	nop
				_delay_ms(500);
				LED1 = 0;
    2192:	2b 98       	cbi	0x05, 3	; 5
			}
		}
	}
}
    2194:	26 96       	adiw	r28, 0x06	; 6
    2196:	0f b6       	in	r0, 0x3f	; 63
    2198:	f8 94       	cli
    219a:	de bf       	out	0x3e, r29	; 62
    219c:	0f be       	out	0x3f, r0	; 63
    219e:	cd bf       	out	0x3d, r28	; 61
    21a0:	df 91       	pop	r29
    21a2:	cf 91       	pop	r28
    21a4:	1f 91       	pop	r17
    21a6:	08 95       	ret

000021a8 <init_i2c_accs>:
// Set up the MPU6050 (Acc)
//***************************************************************

void init_i2c_accs(void)
{
	writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_PWR_MGMT_1, 0x01); // Gyro X clock, awake
    21a8:	41 e0       	ldi	r20, 0x01	; 1
    21aa:	6b e6       	ldi	r22, 0x6B	; 107
    21ac:	80 ed       	ldi	r24, 0xD0	; 208
    21ae:	0e 94 6a 23 	call	0x46d4	; 0x46d4 <writeI2Cbyte>
	writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_ACCEL_CONFIG, ACCFS4G); // 4G full scale
    21b2:	48 e0       	ldi	r20, 0x08	; 8
    21b4:	6c e1       	ldi	r22, 0x1C	; 28
    21b6:	80 ed       	ldi	r24, 0xD0	; 208
    21b8:	0c 94 6a 23 	jmp	0x46d4	; 0x46d4 <writeI2Cbyte>

000021bc <Init_ADC>:
//***********************************************************

void Init_ADC(void)
{
	// Digital Input Disable Register - ADC0~7 Digital Input Disable
	DIDR0 	= (1<<ADC0D)|(1<<ADC1D)|(1<<ADC2D)|(1<<ADC3D)|(1<<ADC4D)|(1<<ADC5D)|(1<<ADC6D)|(1<<ADC7D);
    21bc:	8f ef       	ldi	r24, 0xFF	; 255
    21be:	80 93 7e 00 	sts	0x007E, r24
	
	// ADC Control and Status Register B - ADTS2:0
	ADCSRB 	= 0x00;
    21c2:	10 92 7b 00 	sts	0x007B, r1
    21c6:	08 95       	ret

000021c8 <read_adc>:
}

void read_adc(uint8_t channel)
{
	ADMUX	= channel;
    21c8:	80 93 7c 00 	sts	0x007C, r24
	
	// ADEN, ADSC, ADPS1,2
	ADCSRA 	= (1<<ADEN)|(1<<ADSC)|(1<<ADPS1)|(1<<ADPS2);
    21cc:	86 ec       	ldi	r24, 0xC6	; 198
    21ce:	80 93 7a 00 	sts	0x007A, r24

	// Wait to complete. Result is in ADCW
	while (ADCSRA & (1 << ADSC));
    21d2:	80 91 7a 00 	lds	r24, 0x007A
    21d6:	86 fd       	sbrc	r24, 6
    21d8:	fc cf       	rjmp	.-8      	; 0x21d2 <read_adc+0xa>
}
    21da:	08 95       	ret

000021dc <Display_balance>:
//************************************************************
// Code
//************************************************************

void Display_balance(void)
{
    21dc:	cf 92       	push	r12
    21de:	df 92       	push	r13
    21e0:	ef 92       	push	r14
    21e2:	0f 93       	push	r16
    21e4:	cf 93       	push	r28
    21e6:	df 93       	push	r29

	#ifdef KK2Mini
	st7565_set_brightness(28);
	#endif

	while(BUTTON1 != 0)
    21e8:	1f 9b       	sbis	0x03, 7	; 3
    21ea:	85 c0       	rjmp	.+266    	; 0x22f6 <Display_balance+0x11a>
	{
		// Read accs
		ReadAcc();
    21ec:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <ReadAcc>

		// Refresh accSmooth values
		// Fake the IMU period as accSmooth doesn't need that
		simple_imu_update(0);
    21f0:	60 e0       	ldi	r22, 0x00	; 0
    21f2:	70 e0       	ldi	r23, 0x00	; 0
    21f4:	cb 01       	movw	r24, r22
    21f6:	0e 94 2e 26 	call	0x4c5c	; 0x4c5c <simple_imu_update>
		
		// Convert acc signal to a pixel position
		x_pos = accSmooth[PITCH] + 32;
    21fa:	20 e0       	ldi	r18, 0x00	; 0
    21fc:	30 e0       	ldi	r19, 0x00	; 0
    21fe:	40 e0       	ldi	r20, 0x00	; 0
    2200:	52 e4       	ldi	r21, 0x42	; 66
    2202:	60 91 9d 05 	lds	r22, 0x059D
    2206:	70 91 9e 05 	lds	r23, 0x059E
    220a:	80 91 9f 05 	lds	r24, 0x059F
    220e:	90 91 a0 05 	lds	r25, 0x05A0
    2212:	0e 94 3e 45 	call	0x8a7c	; 0x8a7c <__addsf3>
    2216:	0e 94 0e 46 	call	0x8c1c	; 0x8c1c <__fixsfsi>
    221a:	eb 01       	movw	r28, r22
		y_pos = accSmooth[ROLL] + 64;
    221c:	20 e0       	ldi	r18, 0x00	; 0
    221e:	30 e0       	ldi	r19, 0x00	; 0
    2220:	40 e8       	ldi	r20, 0x80	; 128
    2222:	52 e4       	ldi	r21, 0x42	; 66
    2224:	60 91 99 05 	lds	r22, 0x0599
    2228:	70 91 9a 05 	lds	r23, 0x059A
    222c:	80 91 9b 05 	lds	r24, 0x059B
    2230:	90 91 9c 05 	lds	r25, 0x059C
    2234:	0e 94 3e 45 	call	0x8a7c	; 0x8a7c <__addsf3>
    2238:	0e 94 0e 46 	call	0x8c1c	; 0x8c1c <__fixsfsi>
    223c:	6b 01       	movw	r12, r22

		if (x_pos < 0) x_pos = 0;
    223e:	d7 fd       	sbrc	r29, 7
    2240:	06 c0       	rjmp	.+12     	; 0x224e <Display_balance+0x72>
		if (x_pos > 64) x_pos = 64;
    2242:	c1 34       	cpi	r28, 0x41	; 65
    2244:	d1 05       	cpc	r29, r1
    2246:	2c f0       	brlt	.+10     	; 0x2252 <Display_balance+0x76>
    2248:	c0 e4       	ldi	r28, 0x40	; 64
    224a:	d0 e0       	ldi	r29, 0x00	; 0
    224c:	02 c0       	rjmp	.+4      	; 0x2252 <Display_balance+0x76>
		
		// Convert acc signal to a pixel position
		x_pos = accSmooth[PITCH] + 32;
		y_pos = accSmooth[ROLL] + 64;

		if (x_pos < 0) x_pos = 0;
    224e:	c0 e0       	ldi	r28, 0x00	; 0
    2250:	d0 e0       	ldi	r29, 0x00	; 0
		if (x_pos > 64) x_pos = 64;
		if (y_pos < 0) y_pos = 0;
    2252:	d7 fc       	sbrc	r13, 7
    2254:	08 c0       	rjmp	.+16     	; 0x2266 <Display_balance+0x8a>
		if (y_pos > 128) y_pos = 128;
    2256:	21 e8       	ldi	r18, 0x81	; 129
    2258:	c2 16       	cp	r12, r18
    225a:	d1 04       	cpc	r13, r1
    225c:	34 f0       	brlt	.+12     	; 0x226a <Display_balance+0x8e>
    225e:	80 e8       	ldi	r24, 0x80	; 128
    2260:	c8 2e       	mov	r12, r24
    2262:	d1 2c       	mov	r13, r1
    2264:	02 c0       	rjmp	.+4      	; 0x226a <Display_balance+0x8e>
		x_pos = accSmooth[PITCH] + 32;
		y_pos = accSmooth[ROLL] + 64;

		if (x_pos < 0) x_pos = 0;
		if (x_pos > 64) x_pos = 64;
		if (y_pos < 0) y_pos = 0;
    2266:	c1 2c       	mov	r12, r1
    2268:	d1 2c       	mov	r13, r1
		if (y_pos > 128) y_pos = 128;

		// Print bottom markers
		LCD_Display_Text(12, (const unsigned char*)Wingdings, 2, 55); 	// Left
    226a:	27 e3       	ldi	r18, 0x37	; 55
    226c:	30 e0       	ldi	r19, 0x00	; 0
    226e:	42 e0       	ldi	r20, 0x02	; 2
    2270:	50 e0       	ldi	r21, 0x00	; 0
    2272:	6f ed       	ldi	r22, 0xDF	; 223
    2274:	70 e0       	ldi	r23, 0x00	; 0
    2276:	8c e0       	ldi	r24, 0x0C	; 12
    2278:	90 e0       	ldi	r25, 0x00	; 0
    227a:	0e 94 ff 20 	call	0x41fe	; 0x41fe <LCD_Display_Text>

		// Draw balance meter
		drawrect(buffer, 0, 0, 128, 64, 1);		// Border
    227e:	ee 24       	eor	r14, r14
    2280:	e3 94       	inc	r14
    2282:	00 e4       	ldi	r16, 0x40	; 64
    2284:	20 e8       	ldi	r18, 0x80	; 128
    2286:	40 e0       	ldi	r20, 0x00	; 0
    2288:	60 e0       	ldi	r22, 0x00	; 0
    228a:	81 e0       	ldi	r24, 0x01	; 1
    228c:	91 e0       	ldi	r25, 0x01	; 1
    228e:	0e 94 1c 20 	call	0x4038	; 0x4038 <drawrect>
		drawrect(buffer, 54, 22, 21, 21, 1);	// Target
    2292:	05 e1       	ldi	r16, 0x15	; 21
    2294:	25 e1       	ldi	r18, 0x15	; 21
    2296:	46 e1       	ldi	r20, 0x16	; 22
    2298:	66 e3       	ldi	r22, 0x36	; 54
    229a:	81 e0       	ldi	r24, 0x01	; 1
    229c:	91 e0       	ldi	r25, 0x01	; 1
    229e:	0e 94 1c 20 	call	0x4038	; 0x4038 <drawrect>
		drawline(buffer, 64, 8, 64, 56, 1); 	// Crosshairs
    22a2:	08 e3       	ldi	r16, 0x38	; 56
    22a4:	20 e4       	ldi	r18, 0x40	; 64
    22a6:	48 e0       	ldi	r20, 0x08	; 8
    22a8:	60 e4       	ldi	r22, 0x40	; 64
    22aa:	81 e0       	ldi	r24, 0x01	; 1
    22ac:	91 e0       	ldi	r25, 0x01	; 1
    22ae:	0e 94 7e 1f 	call	0x3efc	; 0x3efc <drawline>
		drawline(buffer, 32, 32, 96, 32, 1);
    22b2:	00 e2       	ldi	r16, 0x20	; 32
    22b4:	20 e6       	ldi	r18, 0x60	; 96
    22b6:	40 e2       	ldi	r20, 0x20	; 32
    22b8:	60 e2       	ldi	r22, 0x20	; 32
    22ba:	81 e0       	ldi	r24, 0x01	; 1
    22bc:	91 e0       	ldi	r25, 0x01	; 1
    22be:	0e 94 7e 1f 	call	0x3efc	; 0x3efc <drawline>
		fillcircle(buffer, y_pos, x_pos, 8, 1);	// Bubble
    22c2:	01 e0       	ldi	r16, 0x01	; 1
    22c4:	28 e0       	ldi	r18, 0x08	; 8
    22c6:	4c 2f       	mov	r20, r28
    22c8:	6c 2d       	mov	r22, r12
    22ca:	81 e0       	ldi	r24, 0x01	; 1
    22cc:	91 e0       	ldi	r25, 0x01	; 1
    22ce:	0e 94 6e 20 	call	0x40dc	; 0x40dc <fillcircle>

		// Refresh GLCD
		write_buffer(buffer);
    22d2:	81 e0       	ldi	r24, 0x01	; 1
    22d4:	91 e0       	ldi	r25, 0x01	; 1
    22d6:	0e 94 ec 1e 	call	0x3dd8	; 0x3dd8 <write_buffer>
		clear_buffer(buffer);
    22da:	81 e0       	ldi	r24, 0x01	; 1
    22dc:	91 e0       	ldi	r25, 0x01	; 1
    22de:	0e 94 1e 1f 	call	0x3e3c	; 0x3e3c <clear_buffer>
    22e2:	8f e7       	ldi	r24, 0x7F	; 127
    22e4:	98 e3       	ldi	r25, 0x38	; 56
    22e6:	21 e0       	ldi	r18, 0x01	; 1
    22e8:	81 50       	subi	r24, 0x01	; 1
    22ea:	90 40       	sbci	r25, 0x00	; 0
    22ec:	20 40       	sbci	r18, 0x00	; 0
    22ee:	e1 f7       	brne	.-8      	; 0x22e8 <Display_balance+0x10c>
    22f0:	00 c0       	rjmp	.+0      	; 0x22f2 <Display_balance+0x116>
    22f2:	00 00       	nop
    22f4:	79 cf       	rjmp	.-270    	; 0x21e8 <Display_balance+0xc>
	#ifdef KK2Mini
	clear_buffer(buffer);
	write_buffer(buffer);
	st7565_set_brightness(Config.Contrast);
	#endif
}
    22f6:	df 91       	pop	r29
    22f8:	cf 91       	pop	r28
    22fa:	0f 91       	pop	r16
    22fc:	ef 90       	pop	r14
    22fe:	df 90       	pop	r13
    2300:	cf 90       	pop	r12
    2302:	08 95       	ret

00002304 <Display_rcinput>:
//************************************************************

void Display_rcinput(void)
{
	// Re-enable interrupts. High seed mode may have left them off
	init_int();
    2304:	0e 94 43 2d 	call	0x5a86	; 0x5a86 <init_int>
	
	while(BUTTON1 != 0)
    2308:	1f 9b       	sbis	0x03, 7	; 3
    230a:	fa c0       	rjmp	.+500    	; 0x2500 <Display_rcinput+0x1fc>
	{
		if (BUTTON4 == 0)
    230c:	1c 9b       	sbis	0x03, 4	; 3
		{
			CenterSticks();
    230e:	0e 94 f9 42 	call	0x85f2	; 0x85f2 <CenterSticks>
		}

		RxGetChannels();
    2312:	0e 94 64 42 	call	0x84c8	; 0x84c8 <RxGetChannels>

		LCD_Display_Text(114,(const unsigned char*)Verdana8,0,0); // Throttle
    2316:	20 e0       	ldi	r18, 0x00	; 0
    2318:	30 e0       	ldi	r19, 0x00	; 0
    231a:	40 e0       	ldi	r20, 0x00	; 0
    231c:	50 e0       	ldi	r21, 0x00	; 0
    231e:	67 ef       	ldi	r22, 0xF7	; 247
    2320:	79 e0       	ldi	r23, 0x09	; 9
    2322:	82 e7       	ldi	r24, 0x72	; 114
    2324:	90 e0       	ldi	r25, 0x00	; 0
    2326:	0e 94 ff 20 	call	0x41fe	; 0x41fe <LCD_Display_Text>
		LCD_Display_Text(32,(const unsigned char*)Verdana8,0,10);
    232a:	2a e0       	ldi	r18, 0x0A	; 10
    232c:	30 e0       	ldi	r19, 0x00	; 0
    232e:	40 e0       	ldi	r20, 0x00	; 0
    2330:	50 e0       	ldi	r21, 0x00	; 0
    2332:	67 ef       	ldi	r22, 0xF7	; 247
    2334:	79 e0       	ldi	r23, 0x09	; 9
    2336:	80 e2       	ldi	r24, 0x20	; 32
    2338:	90 e0       	ldi	r25, 0x00	; 0
    233a:	0e 94 ff 20 	call	0x41fe	; 0x41fe <LCD_Display_Text>
		LCD_Display_Text(115,(const unsigned char*)Verdana8,0,20);
    233e:	24 e1       	ldi	r18, 0x14	; 20
    2340:	30 e0       	ldi	r19, 0x00	; 0
    2342:	40 e0       	ldi	r20, 0x00	; 0
    2344:	50 e0       	ldi	r21, 0x00	; 0
    2346:	67 ef       	ldi	r22, 0xF7	; 247
    2348:	79 e0       	ldi	r23, 0x09	; 9
    234a:	83 e7       	ldi	r24, 0x73	; 115
    234c:	90 e0       	ldi	r25, 0x00	; 0
    234e:	0e 94 ff 20 	call	0x41fe	; 0x41fe <LCD_Display_Text>
		LCD_Display_Text(35,(const unsigned char*)Verdana8,0,30);
    2352:	2e e1       	ldi	r18, 0x1E	; 30
    2354:	30 e0       	ldi	r19, 0x00	; 0
    2356:	40 e0       	ldi	r20, 0x00	; 0
    2358:	50 e0       	ldi	r21, 0x00	; 0
    235a:	67 ef       	ldi	r22, 0xF7	; 247
    235c:	79 e0       	ldi	r23, 0x09	; 9
    235e:	83 e2       	ldi	r24, 0x23	; 35
    2360:	90 e0       	ldi	r25, 0x00	; 0
    2362:	0e 94 ff 20 	call	0x41fe	; 0x41fe <LCD_Display_Text>

		LCD_Display_Text(109,(const unsigned char*)Verdana8,70,0); // Gear
    2366:	20 e0       	ldi	r18, 0x00	; 0
    2368:	30 e0       	ldi	r19, 0x00	; 0
    236a:	46 e4       	ldi	r20, 0x46	; 70
    236c:	50 e0       	ldi	r21, 0x00	; 0
    236e:	67 ef       	ldi	r22, 0xF7	; 247
    2370:	79 e0       	ldi	r23, 0x09	; 9
    2372:	8d e6       	ldi	r24, 0x6D	; 109
    2374:	90 e0       	ldi	r25, 0x00	; 0
    2376:	0e 94 ff 20 	call	0x41fe	; 0x41fe <LCD_Display_Text>
		LCD_Display_Text(110,(const unsigned char*)Verdana8,70,10);
    237a:	2a e0       	ldi	r18, 0x0A	; 10
    237c:	30 e0       	ldi	r19, 0x00	; 0
    237e:	46 e4       	ldi	r20, 0x46	; 70
    2380:	50 e0       	ldi	r21, 0x00	; 0
    2382:	67 ef       	ldi	r22, 0xF7	; 247
    2384:	79 e0       	ldi	r23, 0x09	; 9
    2386:	8e e6       	ldi	r24, 0x6E	; 110
    2388:	90 e0       	ldi	r25, 0x00	; 0
    238a:	0e 94 ff 20 	call	0x41fe	; 0x41fe <LCD_Display_Text>
		LCD_Display_Text(111,(const unsigned char*)Verdana8,70,20);
    238e:	24 e1       	ldi	r18, 0x14	; 20
    2390:	30 e0       	ldi	r19, 0x00	; 0
    2392:	46 e4       	ldi	r20, 0x46	; 70
    2394:	50 e0       	ldi	r21, 0x00	; 0
    2396:	67 ef       	ldi	r22, 0xF7	; 247
    2398:	79 e0       	ldi	r23, 0x09	; 9
    239a:	8f e6       	ldi	r24, 0x6F	; 111
    239c:	90 e0       	ldi	r25, 0x00	; 0
    239e:	0e 94 ff 20 	call	0x41fe	; 0x41fe <LCD_Display_Text>
		LCD_Display_Text(112,(const unsigned char*)Verdana8,70,30);
    23a2:	2e e1       	ldi	r18, 0x1E	; 30
    23a4:	30 e0       	ldi	r19, 0x00	; 0
    23a6:	46 e4       	ldi	r20, 0x46	; 70
    23a8:	50 e0       	ldi	r21, 0x00	; 0
    23aa:	67 ef       	ldi	r22, 0xF7	; 247
    23ac:	79 e0       	ldi	r23, 0x09	; 9
    23ae:	80 e7       	ldi	r24, 0x70	; 112
    23b0:	90 e0       	ldi	r25, 0x00	; 0
    23b2:	0e 94 ff 20 	call	0x41fe	; 0x41fe <LCD_Display_Text>

		mugui_lcd_puts(itoa(MonopolarThrottle,pBuffer,10),(const unsigned char*)Verdana8,37,0);
    23b6:	80 91 29 08 	lds	r24, 0x0829
    23ba:	90 91 2a 08 	lds	r25, 0x082A
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    23be:	4a e0       	ldi	r20, 0x0A	; 10
    23c0:	6f e5       	ldi	r22, 0x5F	; 95
    23c2:	75 e0       	ldi	r23, 0x05	; 5
    23c4:	0e 94 13 48 	call	0x9026	; 0x9026 <__itoa_ncheck>
    23c8:	20 e0       	ldi	r18, 0x00	; 0
    23ca:	30 e0       	ldi	r19, 0x00	; 0
    23cc:	45 e2       	ldi	r20, 0x25	; 37
    23ce:	50 e0       	ldi	r21, 0x00	; 0
    23d0:	67 ef       	ldi	r22, 0xF7	; 247
    23d2:	79 e0       	ldi	r23, 0x09	; 9
    23d4:	0e 94 c7 3d 	call	0x7b8e	; 0x7b8e <mugui_lcd_puts>
		mugui_lcd_puts(itoa(RCinputs[AILERON],pBuffer,10),(const unsigned char*)Verdana8,37,10);
    23d8:	80 91 2d 08 	lds	r24, 0x082D
    23dc:	90 91 2e 08 	lds	r25, 0x082E
    23e0:	4a e0       	ldi	r20, 0x0A	; 10
    23e2:	6f e5       	ldi	r22, 0x5F	; 95
    23e4:	75 e0       	ldi	r23, 0x05	; 5
    23e6:	0e 94 13 48 	call	0x9026	; 0x9026 <__itoa_ncheck>
    23ea:	2a e0       	ldi	r18, 0x0A	; 10
    23ec:	30 e0       	ldi	r19, 0x00	; 0
    23ee:	45 e2       	ldi	r20, 0x25	; 37
    23f0:	50 e0       	ldi	r21, 0x00	; 0
    23f2:	67 ef       	ldi	r22, 0xF7	; 247
    23f4:	79 e0       	ldi	r23, 0x09	; 9
    23f6:	0e 94 c7 3d 	call	0x7b8e	; 0x7b8e <mugui_lcd_puts>
		mugui_lcd_puts(itoa(RCinputs[ELEVATOR],pBuffer,10),(const unsigned char*)Verdana8,37,20);
    23fa:	80 91 2f 08 	lds	r24, 0x082F
    23fe:	90 91 30 08 	lds	r25, 0x0830
    2402:	4a e0       	ldi	r20, 0x0A	; 10
    2404:	6f e5       	ldi	r22, 0x5F	; 95
    2406:	75 e0       	ldi	r23, 0x05	; 5
    2408:	0e 94 13 48 	call	0x9026	; 0x9026 <__itoa_ncheck>
    240c:	24 e1       	ldi	r18, 0x14	; 20
    240e:	30 e0       	ldi	r19, 0x00	; 0
    2410:	45 e2       	ldi	r20, 0x25	; 37
    2412:	50 e0       	ldi	r21, 0x00	; 0
    2414:	67 ef       	ldi	r22, 0xF7	; 247
    2416:	79 e0       	ldi	r23, 0x09	; 9
    2418:	0e 94 c7 3d 	call	0x7b8e	; 0x7b8e <mugui_lcd_puts>
		mugui_lcd_puts(itoa(RCinputs[RUDDER],pBuffer,10),(const unsigned char*)Verdana8,37,30);
    241c:	80 91 31 08 	lds	r24, 0x0831
    2420:	90 91 32 08 	lds	r25, 0x0832
    2424:	4a e0       	ldi	r20, 0x0A	; 10
    2426:	6f e5       	ldi	r22, 0x5F	; 95
    2428:	75 e0       	ldi	r23, 0x05	; 5
    242a:	0e 94 13 48 	call	0x9026	; 0x9026 <__itoa_ncheck>
    242e:	2e e1       	ldi	r18, 0x1E	; 30
    2430:	30 e0       	ldi	r19, 0x00	; 0
    2432:	45 e2       	ldi	r20, 0x25	; 37
    2434:	50 e0       	ldi	r21, 0x00	; 0
    2436:	67 ef       	ldi	r22, 0xF7	; 247
    2438:	79 e0       	ldi	r23, 0x09	; 9
    243a:	0e 94 c7 3d 	call	0x7b8e	; 0x7b8e <mugui_lcd_puts>

		mugui_lcd_puts(itoa(RCinputs[GEAR],pBuffer,10),(const unsigned char*)Verdana8,100,0);
    243e:	80 91 33 08 	lds	r24, 0x0833
    2442:	90 91 34 08 	lds	r25, 0x0834
    2446:	4a e0       	ldi	r20, 0x0A	; 10
    2448:	6f e5       	ldi	r22, 0x5F	; 95
    244a:	75 e0       	ldi	r23, 0x05	; 5
    244c:	0e 94 13 48 	call	0x9026	; 0x9026 <__itoa_ncheck>
    2450:	20 e0       	ldi	r18, 0x00	; 0
    2452:	30 e0       	ldi	r19, 0x00	; 0
    2454:	44 e6       	ldi	r20, 0x64	; 100
    2456:	50 e0       	ldi	r21, 0x00	; 0
    2458:	67 ef       	ldi	r22, 0xF7	; 247
    245a:	79 e0       	ldi	r23, 0x09	; 9
    245c:	0e 94 c7 3d 	call	0x7b8e	; 0x7b8e <mugui_lcd_puts>
		mugui_lcd_puts(itoa(RCinputs[AUX1],pBuffer,10),(const unsigned char*)Verdana8,100,10);
    2460:	80 91 35 08 	lds	r24, 0x0835
    2464:	90 91 36 08 	lds	r25, 0x0836
    2468:	4a e0       	ldi	r20, 0x0A	; 10
    246a:	6f e5       	ldi	r22, 0x5F	; 95
    246c:	75 e0       	ldi	r23, 0x05	; 5
    246e:	0e 94 13 48 	call	0x9026	; 0x9026 <__itoa_ncheck>
    2472:	2a e0       	ldi	r18, 0x0A	; 10
    2474:	30 e0       	ldi	r19, 0x00	; 0
    2476:	44 e6       	ldi	r20, 0x64	; 100
    2478:	50 e0       	ldi	r21, 0x00	; 0
    247a:	67 ef       	ldi	r22, 0xF7	; 247
    247c:	79 e0       	ldi	r23, 0x09	; 9
    247e:	0e 94 c7 3d 	call	0x7b8e	; 0x7b8e <mugui_lcd_puts>
		mugui_lcd_puts(itoa(RCinputs[AUX2],pBuffer,10),(const unsigned char*)Verdana8,100,20);
    2482:	80 91 37 08 	lds	r24, 0x0837
    2486:	90 91 38 08 	lds	r25, 0x0838
    248a:	4a e0       	ldi	r20, 0x0A	; 10
    248c:	6f e5       	ldi	r22, 0x5F	; 95
    248e:	75 e0       	ldi	r23, 0x05	; 5
    2490:	0e 94 13 48 	call	0x9026	; 0x9026 <__itoa_ncheck>
    2494:	24 e1       	ldi	r18, 0x14	; 20
    2496:	30 e0       	ldi	r19, 0x00	; 0
    2498:	44 e6       	ldi	r20, 0x64	; 100
    249a:	50 e0       	ldi	r21, 0x00	; 0
    249c:	67 ef       	ldi	r22, 0xF7	; 247
    249e:	79 e0       	ldi	r23, 0x09	; 9
    24a0:	0e 94 c7 3d 	call	0x7b8e	; 0x7b8e <mugui_lcd_puts>
		mugui_lcd_puts(itoa(RCinputs[AUX3],pBuffer,10),(const unsigned char*)Verdana8,100,30);
    24a4:	80 91 39 08 	lds	r24, 0x0839
    24a8:	90 91 3a 08 	lds	r25, 0x083A
    24ac:	4a e0       	ldi	r20, 0x0A	; 10
    24ae:	6f e5       	ldi	r22, 0x5F	; 95
    24b0:	75 e0       	ldi	r23, 0x05	; 5
    24b2:	0e 94 13 48 	call	0x9026	; 0x9026 <__itoa_ncheck>
    24b6:	2e e1       	ldi	r18, 0x1E	; 30
    24b8:	30 e0       	ldi	r19, 0x00	; 0
    24ba:	44 e6       	ldi	r20, 0x64	; 100
    24bc:	50 e0       	ldi	r21, 0x00	; 0
    24be:	67 ef       	ldi	r22, 0xF7	; 247
    24c0:	79 e0       	ldi	r23, 0x09	; 9
    24c2:	0e 94 c7 3d 	call	0x7b8e	; 0x7b8e <mugui_lcd_puts>

		// Print bottom text and markers
		LCD_Display_Text(12, (const unsigned char*)Wingdings, 0, 57); 	// Left
    24c6:	29 e3       	ldi	r18, 0x39	; 57
    24c8:	30 e0       	ldi	r19, 0x00	; 0
    24ca:	40 e0       	ldi	r20, 0x00	; 0
    24cc:	50 e0       	ldi	r21, 0x00	; 0
    24ce:	6f ed       	ldi	r22, 0xDF	; 223
    24d0:	70 e0       	ldi	r23, 0x00	; 0
    24d2:	8c e0       	ldi	r24, 0x0C	; 12
    24d4:	90 e0       	ldi	r25, 0x00	; 0
    24d6:	0e 94 ff 20 	call	0x41fe	; 0x41fe <LCD_Display_Text>
		LCD_Display_Text(60, (const unsigned char*)Verdana8, 110, 55); 	// Cal.
    24da:	27 e3       	ldi	r18, 0x37	; 55
    24dc:	30 e0       	ldi	r19, 0x00	; 0
    24de:	4e e6       	ldi	r20, 0x6E	; 110
    24e0:	50 e0       	ldi	r21, 0x00	; 0
    24e2:	67 ef       	ldi	r22, 0xF7	; 247
    24e4:	79 e0       	ldi	r23, 0x09	; 9
    24e6:	8c e3       	ldi	r24, 0x3C	; 60
    24e8:	90 e0       	ldi	r25, 0x00	; 0
    24ea:	0e 94 ff 20 	call	0x41fe	; 0x41fe <LCD_Display_Text>

		// Update buffer
		write_buffer(buffer);
    24ee:	81 e0       	ldi	r24, 0x01	; 1
    24f0:	91 e0       	ldi	r25, 0x01	; 1
    24f2:	0e 94 ec 1e 	call	0x3dd8	; 0x3dd8 <write_buffer>
		clear_buffer(buffer);
    24f6:	81 e0       	ldi	r24, 0x01	; 1
    24f8:	91 e0       	ldi	r25, 0x01	; 1
    24fa:	0e 94 1e 1f 	call	0x3e3c	; 0x3e3c <clear_buffer>
    24fe:	04 cf       	rjmp	.-504    	; 0x2308 <Display_rcinput+0x4>
	}
}
    2500:	08 95       	ret

00002502 <Display_sensors>:
// Code
//************************************************************

void Display_sensors(void)
{
	while(BUTTON1 != 0)
    2502:	1f 9b       	sbis	0x03, 7	; 3
    2504:	ed c0       	rjmp	.+474    	; 0x26e0 <Display_sensors+0x1de>
	{
	
		// Normal calibrate button pressed
		if (BUTTON4 == 0)
    2506:	1c 99       	sbic	0x03, 4	; 3
    2508:	1a c0       	rjmp	.+52     	; 0x253e <Display_sensors+0x3c>
		{
			// Wait until finger off button
			while(BUTTON4 == 0)
    250a:	1c 99       	sbic	0x03, 4	; 3
    250c:	0a c0       	rjmp	.+20     	; 0x2522 <Display_sensors+0x20>
    250e:	2f e3       	ldi	r18, 0x3F	; 63
    2510:	8d e0       	ldi	r24, 0x0D	; 13
    2512:	93 e0       	ldi	r25, 0x03	; 3
    2514:	21 50       	subi	r18, 0x01	; 1
    2516:	80 40       	sbci	r24, 0x00	; 0
    2518:	90 40       	sbci	r25, 0x00	; 0
    251a:	e1 f7       	brne	.-8      	; 0x2514 <Display_sensors+0x12>
    251c:	00 c0       	rjmp	.+0      	; 0x251e <Display_sensors+0x1c>
    251e:	00 00       	nop
    2520:	f4 cf       	rjmp	.-24     	; 0x250a <Display_sensors+0x8>
    2522:	2f e3       	ldi	r18, 0x3F	; 63
    2524:	82 e4       	ldi	r24, 0x42	; 66
    2526:	9f e0       	ldi	r25, 0x0F	; 15
    2528:	21 50       	subi	r18, 0x01	; 1
    252a:	80 40       	sbci	r24, 0x00	; 0
    252c:	90 40       	sbci	r25, 0x00	; 0
    252e:	e1 f7       	brne	.-8      	; 0x2528 <Display_sensors+0x26>
    2530:	00 c0       	rjmp	.+0      	; 0x2532 <Display_sensors+0x30>
    2532:	00 00       	nop
			
			// Pause until steady		
			_delay_ms(250);
			
			// Calibrate sensors
			CalibrateGyrosFast();		
    2534:	0e 94 1f 22 	call	0x443e	; 0x443e <CalibrateGyrosFast>
			CalibrateAcc(NORMAL);
    2538:	80 e0       	ldi	r24, 0x00	; 0
    253a:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <CalibrateAcc>
		}

		// Inverted calibrate button pressed
		if (BUTTON3 == 0)
    253e:	1d 99       	sbic	0x03, 5	; 3
    2540:	0c c0       	rjmp	.+24     	; 0x255a <Display_sensors+0x58>
    2542:	2f e3       	ldi	r18, 0x3F	; 63
    2544:	82 e4       	ldi	r24, 0x42	; 66
    2546:	9f e0       	ldi	r25, 0x0F	; 15
    2548:	21 50       	subi	r18, 0x01	; 1
    254a:	80 40       	sbci	r24, 0x00	; 0
    254c:	90 40       	sbci	r25, 0x00	; 0
    254e:	e1 f7       	brne	.-8      	; 0x2548 <Display_sensors+0x46>
    2550:	00 c0       	rjmp	.+0      	; 0x2552 <Display_sensors+0x50>
    2552:	00 00       	nop
		{
			// Wait until button snap dissipated
			_delay_ms(250);
			CalibrateAcc(REVERSED);
    2554:	81 e0       	ldi	r24, 0x01	; 1
    2556:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <CalibrateAcc>
		}

		ReadGyros();
    255a:	0e 94 f2 21 	call	0x43e4	; 0x43e4 <ReadGyros>
		ReadAcc();
    255e:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <ReadAcc>

		LCD_Display_Text(26,(const unsigned char*)Verdana8,37,0); 	// Gyro
    2562:	20 e0       	ldi	r18, 0x00	; 0
    2564:	30 e0       	ldi	r19, 0x00	; 0
    2566:	45 e2       	ldi	r20, 0x25	; 37
    2568:	50 e0       	ldi	r21, 0x00	; 0
    256a:	67 ef       	ldi	r22, 0xF7	; 247
    256c:	79 e0       	ldi	r23, 0x09	; 9
    256e:	8a e1       	ldi	r24, 0x1A	; 26
    2570:	90 e0       	ldi	r25, 0x00	; 0
    2572:	0e 94 ff 20 	call	0x41fe	; 0x41fe <LCD_Display_Text>
		LCD_Display_Text(30,(const unsigned char*)Verdana8,77,0); 	// Acc
    2576:	20 e0       	ldi	r18, 0x00	; 0
    2578:	30 e0       	ldi	r19, 0x00	; 0
    257a:	4d e4       	ldi	r20, 0x4D	; 77
    257c:	50 e0       	ldi	r21, 0x00	; 0
    257e:	67 ef       	ldi	r22, 0xF7	; 247
    2580:	79 e0       	ldi	r23, 0x09	; 9
    2582:	8e e1       	ldi	r24, 0x1E	; 30
    2584:	90 e0       	ldi	r25, 0x00	; 0
    2586:	0e 94 ff 20 	call	0x41fe	; 0x41fe <LCD_Display_Text>
		//
		LCD_Display_Text(27,(const unsigned char*)Verdana8,5,13);	// Roll
    258a:	2d e0       	ldi	r18, 0x0D	; 13
    258c:	30 e0       	ldi	r19, 0x00	; 0
    258e:	45 e0       	ldi	r20, 0x05	; 5
    2590:	50 e0       	ldi	r21, 0x00	; 0
    2592:	67 ef       	ldi	r22, 0xF7	; 247
    2594:	79 e0       	ldi	r23, 0x09	; 9
    2596:	8b e1       	ldi	r24, 0x1B	; 27
    2598:	90 e0       	ldi	r25, 0x00	; 0
    259a:	0e 94 ff 20 	call	0x41fe	; 0x41fe <LCD_Display_Text>
		LCD_Display_Text(28,(const unsigned char*)Verdana8,5,23);	// Pitch
    259e:	27 e1       	ldi	r18, 0x17	; 23
    25a0:	30 e0       	ldi	r19, 0x00	; 0
    25a2:	45 e0       	ldi	r20, 0x05	; 5
    25a4:	50 e0       	ldi	r21, 0x00	; 0
    25a6:	67 ef       	ldi	r22, 0xF7	; 247
    25a8:	79 e0       	ldi	r23, 0x09	; 9
    25aa:	8c e1       	ldi	r24, 0x1C	; 28
    25ac:	90 e0       	ldi	r25, 0x00	; 0
    25ae:	0e 94 ff 20 	call	0x41fe	; 0x41fe <LCD_Display_Text>
		LCD_Display_Text(29,(const unsigned char*)Verdana8,5,33);	// Yaw/Z
    25b2:	21 e2       	ldi	r18, 0x21	; 33
    25b4:	30 e0       	ldi	r19, 0x00	; 0
    25b6:	45 e0       	ldi	r20, 0x05	; 5
    25b8:	50 e0       	ldi	r21, 0x00	; 0
    25ba:	67 ef       	ldi	r22, 0xF7	; 247
    25bc:	79 e0       	ldi	r23, 0x09	; 9
    25be:	8d e1       	ldi	r24, 0x1D	; 29
    25c0:	90 e0       	ldi	r25, 0x00	; 0
    25c2:	0e 94 ff 20 	call	0x41fe	; 0x41fe <LCD_Display_Text>
    25c6:	4a e0       	ldi	r20, 0x0A	; 10
    25c8:	6f e5       	ldi	r22, 0x5F	; 95
    25ca:	75 e0       	ldi	r23, 0x05	; 5
    25cc:	80 91 6f 05 	lds	r24, 0x056F
    25d0:	90 91 70 05 	lds	r25, 0x0570
    25d4:	0e 94 13 48 	call	0x9026	; 0x9026 <__itoa_ncheck>
		//
		mugui_lcd_puts(itoa(gyroADC[ROLL],pBuffer,10),(const unsigned char*)Verdana8,40,13);
    25d8:	2d e0       	ldi	r18, 0x0D	; 13
    25da:	30 e0       	ldi	r19, 0x00	; 0
    25dc:	48 e2       	ldi	r20, 0x28	; 40
    25de:	50 e0       	ldi	r21, 0x00	; 0
    25e0:	67 ef       	ldi	r22, 0xF7	; 247
    25e2:	79 e0       	ldi	r23, 0x09	; 9
    25e4:	0e 94 c7 3d 	call	0x7b8e	; 0x7b8e <mugui_lcd_puts>
    25e8:	4a e0       	ldi	r20, 0x0A	; 10
    25ea:	6f e5       	ldi	r22, 0x5F	; 95
    25ec:	75 e0       	ldi	r23, 0x05	; 5
    25ee:	80 91 71 05 	lds	r24, 0x0571
    25f2:	90 91 72 05 	lds	r25, 0x0572
    25f6:	0e 94 13 48 	call	0x9026	; 0x9026 <__itoa_ncheck>
		mugui_lcd_puts(itoa(gyroADC[PITCH],pBuffer,10),(const unsigned char*)Verdana8,40,23);
    25fa:	27 e1       	ldi	r18, 0x17	; 23
    25fc:	30 e0       	ldi	r19, 0x00	; 0
    25fe:	48 e2       	ldi	r20, 0x28	; 40
    2600:	50 e0       	ldi	r21, 0x00	; 0
    2602:	67 ef       	ldi	r22, 0xF7	; 247
    2604:	79 e0       	ldi	r23, 0x09	; 9
    2606:	0e 94 c7 3d 	call	0x7b8e	; 0x7b8e <mugui_lcd_puts>
    260a:	4a e0       	ldi	r20, 0x0A	; 10
    260c:	6f e5       	ldi	r22, 0x5F	; 95
    260e:	75 e0       	ldi	r23, 0x05	; 5
    2610:	80 91 73 05 	lds	r24, 0x0573
    2614:	90 91 74 05 	lds	r25, 0x0574
    2618:	0e 94 13 48 	call	0x9026	; 0x9026 <__itoa_ncheck>
		mugui_lcd_puts(itoa(gyroADC[YAW],pBuffer,10),(const unsigned char*)Verdana8,40,33);
    261c:	21 e2       	ldi	r18, 0x21	; 33
    261e:	30 e0       	ldi	r19, 0x00	; 0
    2620:	48 e2       	ldi	r20, 0x28	; 40
    2622:	50 e0       	ldi	r21, 0x00	; 0
    2624:	67 ef       	ldi	r22, 0xF7	; 247
    2626:	79 e0       	ldi	r23, 0x09	; 9
    2628:	0e 94 c7 3d 	call	0x7b8e	; 0x7b8e <mugui_lcd_puts>
    262c:	4a e0       	ldi	r20, 0x0A	; 10
    262e:	6f e5       	ldi	r22, 0x5F	; 95
    2630:	75 e0       	ldi	r23, 0x05	; 5
    2632:	80 91 3c 05 	lds	r24, 0x053C
    2636:	90 91 3d 05 	lds	r25, 0x053D
    263a:	0e 94 13 48 	call	0x9026	; 0x9026 <__itoa_ncheck>
		mugui_lcd_puts(itoa(accADC[ROLL],pBuffer,10),(const unsigned char*)Verdana8,80,13);
    263e:	2d e0       	ldi	r18, 0x0D	; 13
    2640:	30 e0       	ldi	r19, 0x00	; 0
    2642:	40 e5       	ldi	r20, 0x50	; 80
    2644:	50 e0       	ldi	r21, 0x00	; 0
    2646:	67 ef       	ldi	r22, 0xF7	; 247
    2648:	79 e0       	ldi	r23, 0x09	; 9
    264a:	0e 94 c7 3d 	call	0x7b8e	; 0x7b8e <mugui_lcd_puts>
    264e:	4a e0       	ldi	r20, 0x0A	; 10
    2650:	6f e5       	ldi	r22, 0x5F	; 95
    2652:	75 e0       	ldi	r23, 0x05	; 5
    2654:	80 91 3e 05 	lds	r24, 0x053E
    2658:	90 91 3f 05 	lds	r25, 0x053F
    265c:	0e 94 13 48 	call	0x9026	; 0x9026 <__itoa_ncheck>
		mugui_lcd_puts(itoa(accADC[PITCH],pBuffer,10),(const unsigned char*)Verdana8,80,23);
    2660:	27 e1       	ldi	r18, 0x17	; 23
    2662:	30 e0       	ldi	r19, 0x00	; 0
    2664:	40 e5       	ldi	r20, 0x50	; 80
    2666:	50 e0       	ldi	r21, 0x00	; 0
    2668:	67 ef       	ldi	r22, 0xF7	; 247
    266a:	79 e0       	ldi	r23, 0x09	; 9
    266c:	0e 94 c7 3d 	call	0x7b8e	; 0x7b8e <mugui_lcd_puts>
    2670:	4a e0       	ldi	r20, 0x0A	; 10
    2672:	6f e5       	ldi	r22, 0x5F	; 95
    2674:	75 e0       	ldi	r23, 0x05	; 5
    2676:	80 91 40 05 	lds	r24, 0x0540
    267a:	90 91 41 05 	lds	r25, 0x0541
    267e:	0e 94 13 48 	call	0x9026	; 0x9026 <__itoa_ncheck>
		mugui_lcd_puts(itoa(accADC[YAW],pBuffer,10),(const unsigned char*)Verdana8,80,33);
    2682:	21 e2       	ldi	r18, 0x21	; 33
    2684:	30 e0       	ldi	r19, 0x00	; 0
    2686:	40 e5       	ldi	r20, 0x50	; 80
    2688:	50 e0       	ldi	r21, 0x00	; 0
    268a:	67 ef       	ldi	r22, 0xF7	; 247
    268c:	79 e0       	ldi	r23, 0x09	; 9
    268e:	0e 94 c7 3d 	call	0x7b8e	; 0x7b8e <mugui_lcd_puts>

		// Print bottom markers
		LCD_Display_Text(12, (const unsigned char*)Wingdings, 0, 57); 	// Left
    2692:	29 e3       	ldi	r18, 0x39	; 57
    2694:	30 e0       	ldi	r19, 0x00	; 0
    2696:	40 e0       	ldi	r20, 0x00	; 0
    2698:	50 e0       	ldi	r21, 0x00	; 0
    269a:	6f ed       	ldi	r22, 0xDF	; 223
    269c:	70 e0       	ldi	r23, 0x00	; 0
    269e:	8c e0       	ldi	r24, 0x0C	; 12
    26a0:	90 e0       	ldi	r25, 0x00	; 0
    26a2:	0e 94 ff 20 	call	0x41fe	; 0x41fe <LCD_Display_Text>
		LCD_Display_Text(60, (const unsigned char*)Verdana8, 108, 55); 	// Calibrate
    26a6:	27 e3       	ldi	r18, 0x37	; 55
    26a8:	30 e0       	ldi	r19, 0x00	; 0
    26aa:	4c e6       	ldi	r20, 0x6C	; 108
    26ac:	50 e0       	ldi	r21, 0x00	; 0
    26ae:	67 ef       	ldi	r22, 0xF7	; 247
    26b0:	79 e0       	ldi	r23, 0x09	; 9
    26b2:	8c e3       	ldi	r24, 0x3C	; 60
    26b4:	90 e0       	ldi	r25, 0x00	; 0
    26b6:	0e 94 ff 20 	call	0x41fe	; 0x41fe <LCD_Display_Text>
		LCD_Display_Text(25, (const unsigned char*)Verdana8, 75, 55); 	// Inverted Calibrate		
    26ba:	27 e3       	ldi	r18, 0x37	; 55
    26bc:	30 e0       	ldi	r19, 0x00	; 0
    26be:	4b e4       	ldi	r20, 0x4B	; 75
    26c0:	50 e0       	ldi	r21, 0x00	; 0
    26c2:	67 ef       	ldi	r22, 0xF7	; 247
    26c4:	79 e0       	ldi	r23, 0x09	; 9
    26c6:	89 e1       	ldi	r24, 0x19	; 25
    26c8:	90 e0       	ldi	r25, 0x00	; 0
    26ca:	0e 94 ff 20 	call	0x41fe	; 0x41fe <LCD_Display_Text>

		// Update buffer
		write_buffer(buffer);
    26ce:	81 e0       	ldi	r24, 0x01	; 1
    26d0:	91 e0       	ldi	r25, 0x01	; 1
    26d2:	0e 94 ec 1e 	call	0x3dd8	; 0x3dd8 <write_buffer>
		clear_buffer(buffer);
    26d6:	81 e0       	ldi	r24, 0x01	; 1
    26d8:	91 e0       	ldi	r25, 0x01	; 1
    26da:	0e 94 1e 1f 	call	0x3e3c	; 0x3e3c <clear_buffer>
    26de:	11 cf       	rjmp	.-478    	; 0x2502 <Display_sensors>
	}
}
    26e0:	08 95       	ret

000026e2 <Display_status>:
//************************************************************
// Code
//************************************************************

void Display_status(void)
{
    26e2:	bf 92       	push	r11
    26e4:	cf 92       	push	r12
    26e6:	df 92       	push	r13
    26e8:	ef 92       	push	r14
    26ea:	ff 92       	push	r15
    26ec:	0f 93       	push	r16
    26ee:	1f 93       	push	r17
    26f0:	cf 93       	push	r28
    26f2:	df 93       	push	r29
    26f4:	00 d0       	rcall	.+0      	; 0x26f6 <Display_status+0x14>
    26f6:	00 d0       	rcall	.+0      	; 0x26f8 <Display_status+0x16>
    26f8:	cd b7       	in	r28, 0x3d	; 61
    26fa:	de b7       	in	r29, 0x3e	; 62
	int16_t temp;
	uint16_t vbat_temp; 
	int8_t	pos1, pos2, pos3;
	mugui_size16_t size;

	clear_buffer(buffer);
    26fc:	81 e0       	ldi	r24, 0x01	; 1
    26fe:	91 e0       	ldi	r25, 0x01	; 1
    2700:	0e 94 1e 1f 	call	0x3e3c	; 0x3e3c <clear_buffer>

	// Display text
	LCD_Display_Text(3,(const unsigned char*)Verdana8,0,0); 	// Version text
    2704:	20 e0       	ldi	r18, 0x00	; 0
    2706:	30 e0       	ldi	r19, 0x00	; 0
    2708:	40 e0       	ldi	r20, 0x00	; 0
    270a:	50 e0       	ldi	r21, 0x00	; 0
    270c:	67 ef       	ldi	r22, 0xF7	; 247
    270e:	79 e0       	ldi	r23, 0x09	; 9
    2710:	83 e0       	ldi	r24, 0x03	; 3
    2712:	90 e0       	ldi	r25, 0x00	; 0
    2714:	0e 94 ff 20 	call	0x41fe	; 0x41fe <LCD_Display_Text>
	LCD_Display_Text(5,(const unsigned char*)Verdana8,0,16); 	// RX sync
    2718:	20 e1       	ldi	r18, 0x10	; 16
    271a:	30 e0       	ldi	r19, 0x00	; 0
    271c:	40 e0       	ldi	r20, 0x00	; 0
    271e:	50 e0       	ldi	r21, 0x00	; 0
    2720:	67 ef       	ldi	r22, 0xF7	; 247
    2722:	79 e0       	ldi	r23, 0x09	; 9
    2724:	85 e0       	ldi	r24, 0x05	; 5
    2726:	90 e0       	ldi	r25, 0x00	; 0
    2728:	0e 94 ff 20 	call	0x41fe	; 0x41fe <LCD_Display_Text>
	LCD_Display_Text(6,(const unsigned char*)Verdana8,0,27); 	// Profile
    272c:	2b e1       	ldi	r18, 0x1B	; 27
    272e:	30 e0       	ldi	r19, 0x00	; 0
    2730:	40 e0       	ldi	r20, 0x00	; 0
    2732:	50 e0       	ldi	r21, 0x00	; 0
    2734:	67 ef       	ldi	r22, 0xF7	; 247
    2736:	79 e0       	ldi	r23, 0x09	; 9
    2738:	86 e0       	ldi	r24, 0x06	; 6
    273a:	90 e0       	ldi	r25, 0x00	; 0
    273c:	0e 94 ff 20 	call	0x41fe	; 0x41fe <LCD_Display_Text>
	LCD_Display_Text(23,(const unsigned char*)Verdana8,88,27); 	// Pos
    2740:	2b e1       	ldi	r18, 0x1B	; 27
    2742:	30 e0       	ldi	r19, 0x00	; 0
    2744:	48 e5       	ldi	r20, 0x58	; 88
    2746:	50 e0       	ldi	r21, 0x00	; 0
    2748:	67 ef       	ldi	r22, 0xF7	; 247
    274a:	79 e0       	ldi	r23, 0x09	; 9
    274c:	87 e1       	ldi	r24, 0x17	; 23
    274e:	90 e0       	ldi	r25, 0x00	; 0
    2750:	0e 94 ff 20 	call	0x41fe	; 0x41fe <LCD_Display_Text>
	LCD_Display_Text(133,(const unsigned char*)Verdana8,0,38); 	// Battery
    2754:	26 e2       	ldi	r18, 0x26	; 38
    2756:	30 e0       	ldi	r19, 0x00	; 0
    2758:	40 e0       	ldi	r20, 0x00	; 0
    275a:	50 e0       	ldi	r21, 0x00	; 0
    275c:	67 ef       	ldi	r22, 0xF7	; 247
    275e:	79 e0       	ldi	r23, 0x09	; 9
    2760:	85 e8       	ldi	r24, 0x85	; 133
    2762:	90 e0       	ldi	r25, 0x00	; 0
    2764:	0e 94 ff 20 	call	0x41fe	; 0x41fe <LCD_Display_Text>
	
	// Display menu and markers
	LCD_Display_Text(9, (const unsigned char*)Wingdings, 0, 59);// Down
    2768:	2b e3       	ldi	r18, 0x3B	; 59
    276a:	30 e0       	ldi	r19, 0x00	; 0
    276c:	40 e0       	ldi	r20, 0x00	; 0
    276e:	50 e0       	ldi	r21, 0x00	; 0
    2770:	6f ed       	ldi	r22, 0xDF	; 223
    2772:	70 e0       	ldi	r23, 0x00	; 0
    2774:	89 e0       	ldi	r24, 0x09	; 9
    2776:	90 e0       	ldi	r25, 0x00	; 0
    2778:	0e 94 ff 20 	call	0x41fe	; 0x41fe <LCD_Display_Text>
	LCD_Display_Text(14,(const unsigned char*)Verdana8,10,55);	// Menu
    277c:	27 e3       	ldi	r18, 0x37	; 55
    277e:	30 e0       	ldi	r19, 0x00	; 0
    2780:	4a e0       	ldi	r20, 0x0A	; 10
    2782:	50 e0       	ldi	r21, 0x00	; 0
    2784:	67 ef       	ldi	r22, 0xF7	; 247
    2786:	79 e0       	ldi	r23, 0x09	; 9
    2788:	8e e0       	ldi	r24, 0x0E	; 14
    278a:	90 e0       	ldi	r25, 0x00	; 0
    278c:	0e 94 ff 20 	call	0x41fe	; 0x41fe <LCD_Display_Text>

	// Display values
	print_menu_text(0, 1, (62 + Config.RxMode), 45, 16); // Rx mode
    2790:	40 91 da 05 	lds	r20, 0x05DA
    2794:	55 27       	eor	r21, r21
    2796:	47 fd       	sbrc	r20, 7
    2798:	50 95       	com	r21
    279a:	42 5c       	subi	r20, 0xC2	; 194
    279c:	5f 4f       	sbci	r21, 0xFF	; 255
    279e:	00 e1       	ldi	r16, 0x10	; 16
    27a0:	2d e2       	ldi	r18, 0x2D	; 45
    27a2:	61 e0       	ldi	r22, 0x01	; 1
    27a4:	80 e0       	ldi	r24, 0x00	; 0
    27a6:	90 e0       	ldi	r25, 0x00	; 0
    27a8:	0e 94 01 2e 	call	0x5c02	; 0x5c02 <print_menu_text>
    27ac:	4a e0       	ldi	r20, 0x0A	; 10
    27ae:	6f e5       	ldi	r22, 0x5F	; 95
    27b0:	75 e0       	ldi	r23, 0x05	; 5
    27b2:	80 91 21 05 	lds	r24, 0x0521
    27b6:	90 91 22 05 	lds	r25, 0x0522
    27ba:	0e 94 13 48 	call	0x9026	; 0x9026 <__itoa_ncheck>
	mugui_lcd_puts(itoa(transition,pBuffer,10),(const unsigned char*)Verdana8,110,27); // Raw transition value
    27be:	2b e1       	ldi	r18, 0x1B	; 27
    27c0:	30 e0       	ldi	r19, 0x00	; 0
    27c2:	4e e6       	ldi	r20, 0x6E	; 110
    27c4:	50 e0       	ldi	r21, 0x00	; 0
    27c6:	67 ef       	ldi	r22, 0xF7	; 247
    27c8:	79 e0       	ldi	r23, 0x09	; 9
    27ca:	0e 94 c7 3d 	call	0x7b8e	; 0x7b8e <mugui_lcd_puts>

	if (Config.RxMode == PWM)
    27ce:	80 91 da 05 	lds	r24, 0x05DA
    27d2:	81 30       	cpi	r24, 0x01	; 1
    27d4:	d9 f4       	brne	.+54     	; 0x280c <Display_status+0x12a>
	{
		LCD_Display_Text(24,(const unsigned char*)Verdana8,77,38); // Interrupt counter text 
    27d6:	26 e2       	ldi	r18, 0x26	; 38
    27d8:	30 e0       	ldi	r19, 0x00	; 0
    27da:	4d e4       	ldi	r20, 0x4D	; 77
    27dc:	50 e0       	ldi	r21, 0x00	; 0
    27de:	67 ef       	ldi	r22, 0xF7	; 247
    27e0:	79 e0       	ldi	r23, 0x09	; 9
    27e2:	88 e1       	ldi	r24, 0x18	; 24
    27e4:	90 e0       	ldi	r25, 0x00	; 0
    27e6:	0e 94 ff 20 	call	0x41fe	; 0x41fe <LCD_Display_Text>
		mugui_lcd_puts(itoa(InterruptCount,pBuffer,10),(const unsigned char*)Verdana8,110,38); // Interrupt counter
    27ea:	80 91 1c 05 	lds	r24, 0x051C
    27ee:	90 91 1d 05 	lds	r25, 0x051D
    27f2:	4a e0       	ldi	r20, 0x0A	; 10
    27f4:	6f e5       	ldi	r22, 0x5F	; 95
    27f6:	75 e0       	ldi	r23, 0x05	; 5
    27f8:	0e 94 13 48 	call	0x9026	; 0x9026 <__itoa_ncheck>
    27fc:	26 e2       	ldi	r18, 0x26	; 38
    27fe:	30 e0       	ldi	r19, 0x00	; 0
    2800:	4e e6       	ldi	r20, 0x6E	; 110
    2802:	50 e0       	ldi	r21, 0x00	; 0
    2804:	67 ef       	ldi	r22, 0xF7	; 247
    2806:	79 e0       	ldi	r23, 0x09	; 9
    2808:	0e 94 c7 3d 	call	0x7b8e	; 0x7b8e <mugui_lcd_puts>
	}

	// Display transition point
	if (transition <= 0)
    280c:	80 91 21 05 	lds	r24, 0x0521
    2810:	90 91 22 05 	lds	r25, 0x0522
    2814:	18 16       	cp	r1, r24
    2816:	19 06       	cpc	r1, r25
    2818:	4c f0       	brlt	.+18     	; 0x282c <Display_status+0x14a>
	{
		LCD_Display_Text(48,(const unsigned char*)Verdana8,45,27);
    281a:	2b e1       	ldi	r18, 0x1B	; 27
    281c:	30 e0       	ldi	r19, 0x00	; 0
    281e:	4d e2       	ldi	r20, 0x2D	; 45
    2820:	50 e0       	ldi	r21, 0x00	; 0
    2822:	67 ef       	ldi	r22, 0xF7	; 247
    2824:	79 e0       	ldi	r23, 0x09	; 9
    2826:	80 e3       	ldi	r24, 0x30	; 48
    2828:	90 e0       	ldi	r25, 0x00	; 0
    282a:	31 c0       	rjmp	.+98     	; 0x288e <Display_status+0x1ac>
	}
	else if (transition >= 100)
    282c:	84 36       	cpi	r24, 0x64	; 100
    282e:	91 05       	cpc	r25, r1
    2830:	4c f0       	brlt	.+18     	; 0x2844 <Display_status+0x162>
	{
		LCD_Display_Text(50,(const unsigned char*)Verdana8,45,27);
    2832:	2b e1       	ldi	r18, 0x1B	; 27
    2834:	30 e0       	ldi	r19, 0x00	; 0
    2836:	4d e2       	ldi	r20, 0x2D	; 45
    2838:	50 e0       	ldi	r21, 0x00	; 0
    283a:	67 ef       	ldi	r22, 0xF7	; 247
    283c:	79 e0       	ldi	r23, 0x09	; 9
    283e:	82 e3       	ldi	r24, 0x32	; 50
    2840:	90 e0       	ldi	r25, 0x00	; 0
    2842:	25 c0       	rjmp	.+74     	; 0x288e <Display_status+0x1ac>
	}
	else if (transition == Config.Transition_P1n)
    2844:	20 91 e2 05 	lds	r18, 0x05E2
    2848:	33 27       	eor	r19, r19
    284a:	27 fd       	sbrc	r18, 7
    284c:	30 95       	com	r19
    284e:	82 17       	cp	r24, r18
    2850:	93 07       	cpc	r25, r19
    2852:	49 f4       	brne	.+18     	; 0x2866 <Display_status+0x184>
	{
		LCD_Display_Text(49,(const unsigned char*)Verdana8,45,27);
    2854:	2b e1       	ldi	r18, 0x1B	; 27
    2856:	30 e0       	ldi	r19, 0x00	; 0
    2858:	4d e2       	ldi	r20, 0x2D	; 45
    285a:	50 e0       	ldi	r21, 0x00	; 0
    285c:	67 ef       	ldi	r22, 0xF7	; 247
    285e:	79 e0       	ldi	r23, 0x09	; 9
    2860:	81 e3       	ldi	r24, 0x31	; 49
    2862:	90 e0       	ldi	r25, 0x00	; 0
    2864:	14 c0       	rjmp	.+40     	; 0x288e <Display_status+0x1ac>
	}
	else if (transition < Config.Transition_P1n)
    2866:	82 17       	cp	r24, r18
    2868:	93 07       	cpc	r25, r19
    286a:	4c f4       	brge	.+18     	; 0x287e <Display_status+0x19c>
	{
		LCD_Display_Text(51,(const unsigned char*)Verdana8,45,27);
    286c:	2b e1       	ldi	r18, 0x1B	; 27
    286e:	30 e0       	ldi	r19, 0x00	; 0
    2870:	4d e2       	ldi	r20, 0x2D	; 45
    2872:	50 e0       	ldi	r21, 0x00	; 0
    2874:	67 ef       	ldi	r22, 0xF7	; 247
    2876:	79 e0       	ldi	r23, 0x09	; 9
    2878:	83 e3       	ldi	r24, 0x33	; 51
    287a:	90 e0       	ldi	r25, 0x00	; 0
    287c:	08 c0       	rjmp	.+16     	; 0x288e <Display_status+0x1ac>
	}
	else
	{
		LCD_Display_Text(52,(const unsigned char*)Verdana8,45,27);
    287e:	2b e1       	ldi	r18, 0x1B	; 27
    2880:	30 e0       	ldi	r19, 0x00	; 0
    2882:	4d e2       	ldi	r20, 0x2D	; 45
    2884:	50 e0       	ldi	r21, 0x00	; 0
    2886:	67 ef       	ldi	r22, 0xF7	; 247
    2888:	79 e0       	ldi	r23, 0x09	; 9
    288a:	84 e3       	ldi	r24, 0x34	; 52
    288c:	90 e0       	ldi	r25, 0x00	; 0
    288e:	0e 94 ff 20 	call	0x41fe	; 0x41fe <LCD_Display_Text>

	// Display voltage
	uint8_t x_loc = 45;		// X location of voltage display
	uint8_t y_loc = 38;		// Y location of voltage display

	vbat_temp = GetVbat();
    2892:	0e 94 2e 45 	call	0x8a5c	; 0x8a5c <GetVbat>
    2896:	6c 01       	movw	r12, r24
	temp = vbat_temp/100;	// Display whole decimal part first
    2898:	64 e6       	ldi	r22, 0x64	; 100
    289a:	70 e0       	ldi	r23, 0x00	; 0
    289c:	0e 94 58 47 	call	0x8eb0	; 0x8eb0 <__udivmodhi4>
    28a0:	8b 01       	movw	r16, r22
    28a2:	4a e0       	ldi	r20, 0x0A	; 10
    28a4:	6f e5       	ldi	r22, 0x5F	; 95
    28a6:	75 e0       	ldi	r23, 0x05	; 5
    28a8:	c8 01       	movw	r24, r16
    28aa:	0e 94 13 48 	call	0x9026	; 0x9026 <__itoa_ncheck>
	mugui_text_sizestring(itoa(temp,pBuffer,10), (const unsigned char*)Verdana8, &size);
    28ae:	ae 01       	movw	r20, r28
    28b0:	4f 5f       	subi	r20, 0xFF	; 255
    28b2:	5f 4f       	sbci	r21, 0xFF	; 255
    28b4:	67 ef       	ldi	r22, 0xF7	; 247
    28b6:	79 e0       	ldi	r23, 0x09	; 9
    28b8:	0e 94 78 3c 	call	0x78f0	; 0x78f0 <mugui_text_sizestring>
    28bc:	4a e0       	ldi	r20, 0x0A	; 10
    28be:	6f e5       	ldi	r22, 0x5F	; 95
    28c0:	75 e0       	ldi	r23, 0x05	; 5
    28c2:	c8 01       	movw	r24, r16
    28c4:	0e 94 13 48 	call	0x9026	; 0x9026 <__itoa_ncheck>
	mugui_lcd_puts(itoa(temp,pBuffer,10),(const unsigned char*)Verdana8,x_loc,y_loc);
    28c8:	26 e2       	ldi	r18, 0x26	; 38
    28ca:	30 e0       	ldi	r19, 0x00	; 0
    28cc:	4d e2       	ldi	r20, 0x2D	; 45
    28ce:	50 e0       	ldi	r21, 0x00	; 0
    28d0:	67 ef       	ldi	r22, 0xF7	; 247
    28d2:	79 e0       	ldi	r23, 0x09	; 9
    28d4:	0e 94 c7 3d 	call	0x7b8e	; 0x7b8e <mugui_lcd_puts>
	pos1 = size.x;

	vbat_temp = vbat_temp - (temp * 100); // Now display the parts to the right of the decimal point
    28d8:	2c e9       	ldi	r18, 0x9C	; 156
    28da:	20 03       	mulsu	r18, r16
    28dc:	70 01       	movw	r14, r0
    28de:	21 9f       	mul	r18, r17
    28e0:	f0 0c       	add	r15, r0
    28e2:	11 24       	eor	r1, r1
    28e4:	ec 0c       	add	r14, r12
    28e6:	fd 1c       	adc	r15, r13

	LCD_Display_Text(7,(const unsigned char*)Verdana8,(x_loc + pos1),y_loc);
    28e8:	09 81       	ldd	r16, Y+1	; 0x01
    28ea:	11 27       	eor	r17, r17
    28ec:	07 fd       	sbrc	r16, 7
    28ee:	10 95       	com	r17
    28f0:	03 5d       	subi	r16, 0xD3	; 211
    28f2:	1f 4f       	sbci	r17, 0xFF	; 255
    28f4:	26 e2       	ldi	r18, 0x26	; 38
    28f6:	30 e0       	ldi	r19, 0x00	; 0
    28f8:	a8 01       	movw	r20, r16
    28fa:	67 ef       	ldi	r22, 0xF7	; 247
    28fc:	79 e0       	ldi	r23, 0x09	; 9
    28fe:	87 e0       	ldi	r24, 0x07	; 7
    2900:	90 e0       	ldi	r25, 0x00	; 0
    2902:	0e 94 ff 20 	call	0x41fe	; 0x41fe <LCD_Display_Text>
	mugui_text_sizestring(".", (const unsigned char*)Verdana8, &size);
    2906:	ae 01       	movw	r20, r28
    2908:	4f 5f       	subi	r20, 0xFF	; 255
    290a:	5f 4f       	sbci	r21, 0xFF	; 255
    290c:	67 ef       	ldi	r22, 0xF7	; 247
    290e:	79 e0       	ldi	r23, 0x09	; 9
    2910:	89 e0       	ldi	r24, 0x09	; 9
    2912:	95 e0       	ldi	r25, 0x05	; 5
    2914:	0e 94 78 3c 	call	0x78f0	; 0x78f0 <mugui_text_sizestring>
	pos3 = size.x;
    2918:	c9 80       	ldd	r12, Y+1	; 0x01
	mugui_text_sizestring("0", (const unsigned char*)Verdana8, &size);
    291a:	ae 01       	movw	r20, r28
    291c:	4f 5f       	subi	r20, 0xFF	; 255
    291e:	5f 4f       	sbci	r21, 0xFF	; 255
    2920:	67 ef       	ldi	r22, 0xF7	; 247
    2922:	79 e0       	ldi	r23, 0x09	; 9
    2924:	8b e0       	ldi	r24, 0x0B	; 11
    2926:	95 e0       	ldi	r25, 0x05	; 5
    2928:	0e 94 78 3c 	call	0x78f0	; 0x78f0 <mugui_text_sizestring>
	pos2 = size.x;
    292c:	b9 80       	ldd	r11, Y+1	; 0x01
    292e:	dd 24       	eor	r13, r13
    2930:	c7 fc       	sbrc	r12, 7
    2932:	d0 94       	com	r13

	if (vbat_temp >= 10)
    2934:	8a e0       	ldi	r24, 0x0A	; 10
    2936:	e8 16       	cp	r14, r24
    2938:	f1 04       	cpc	r15, r1
    293a:	40 f0       	brcs	.+16     	; 0x294c <Display_status+0x26a>
    293c:	4a e0       	ldi	r20, 0x0A	; 10
    293e:	6f e5       	ldi	r22, 0x5F	; 95
    2940:	75 e0       	ldi	r23, 0x05	; 5
    2942:	c7 01       	movw	r24, r14
    2944:	0e 94 13 48 	call	0x9026	; 0x9026 <__itoa_ncheck>
	{
		mugui_lcd_puts(itoa(vbat_temp,pBuffer,10),(const unsigned char*)Verdana8,(x_loc + pos1 + pos3),y_loc);
    2948:	a8 01       	movw	r20, r16
    294a:	16 c0       	rjmp	.+44     	; 0x2978 <Display_status+0x296>
	}
	else
	{
		LCD_Display_Text(8,(const unsigned char*)Verdana8,(x_loc + pos1 + pos3),y_loc);
    294c:	a8 01       	movw	r20, r16
    294e:	4c 0d       	add	r20, r12
    2950:	5d 1d       	adc	r21, r13
    2952:	26 e2       	ldi	r18, 0x26	; 38
    2954:	30 e0       	ldi	r19, 0x00	; 0
    2956:	67 ef       	ldi	r22, 0xF7	; 247
    2958:	79 e0       	ldi	r23, 0x09	; 9
    295a:	88 e0       	ldi	r24, 0x08	; 8
    295c:	90 e0       	ldi	r25, 0x00	; 0
    295e:	0e 94 ff 20 	call	0x41fe	; 0x41fe <LCD_Display_Text>
    2962:	4a e0       	ldi	r20, 0x0A	; 10
    2964:	6f e5       	ldi	r22, 0x5F	; 95
    2966:	75 e0       	ldi	r23, 0x05	; 5
    2968:	c7 01       	movw	r24, r14
    296a:	0e 94 13 48 	call	0x9026	; 0x9026 <__itoa_ncheck>
		mugui_lcd_puts(itoa(vbat_temp,pBuffer,10),(const unsigned char*)Verdana8,(x_loc + pos1 + pos2 + pos3),y_loc);
    296e:	a8 01       	movw	r20, r16
    2970:	4b 0d       	add	r20, r11
    2972:	51 1d       	adc	r21, r1
    2974:	b7 fc       	sbrc	r11, 7
    2976:	5a 95       	dec	r21
    2978:	4c 0d       	add	r20, r12
    297a:	5d 1d       	adc	r21, r13
    297c:	26 e2       	ldi	r18, 0x26	; 38
    297e:	30 e0       	ldi	r19, 0x00	; 0
    2980:	67 ef       	ldi	r22, 0xF7	; 247
    2982:	79 e0       	ldi	r23, 0x09	; 9
    2984:	0e 94 c7 3d 	call	0x7b8e	; 0x7b8e <mugui_lcd_puts>
	}

	// Display error messages
	if (General_error != 0)
    2988:	80 91 20 05 	lds	r24, 0x0520
    298c:	88 23       	and	r24, r24
    298e:	09 f4       	brne	.+2      	; 0x2992 <Display_status+0x2b0>
    2990:	65 c0       	rjmp	.+202    	; 0x2a5c <Display_status+0x37a>
	{
		// Create message box
		fillrect(buffer, 14,8, 96, 48, 0);	// White box
    2992:	e1 2c       	mov	r14, r1
    2994:	00 e3       	ldi	r16, 0x30	; 48
    2996:	20 e6       	ldi	r18, 0x60	; 96
    2998:	48 e0       	ldi	r20, 0x08	; 8
    299a:	6e e0       	ldi	r22, 0x0E	; 14
    299c:	81 e0       	ldi	r24, 0x01	; 1
    299e:	91 e0       	ldi	r25, 0x01	; 1
    29a0:	0e 94 e8 1f 	call	0x3fd0	; 0x3fd0 <fillrect>
		drawrect(buffer, 14,8, 96, 48, 1); 	// Outline
    29a4:	ee 24       	eor	r14, r14
    29a6:	e3 94       	inc	r14
    29a8:	20 e6       	ldi	r18, 0x60	; 96
    29aa:	48 e0       	ldi	r20, 0x08	; 8
    29ac:	6e e0       	ldi	r22, 0x0E	; 14
    29ae:	81 e0       	ldi	r24, 0x01	; 1
    29b0:	91 e0       	ldi	r25, 0x01	; 1
    29b2:	0e 94 1c 20 	call	0x4038	; 0x4038 <drawrect>

		// Prioritise error from top to bottom
		if((General_error & (1 << LVA_ALARM)) != 0)
    29b6:	80 91 20 05 	lds	r24, 0x0520
    29ba:	83 ff       	sbrs	r24, 3
    29bc:	13 c0       	rjmp	.+38     	; 0x29e4 <Display_status+0x302>
		{
			LCD_Display_Text(134,(const unsigned char*)Verdana14,33,14);	// Battery
    29be:	2e e0       	ldi	r18, 0x0E	; 14
    29c0:	30 e0       	ldi	r19, 0x00	; 0
    29c2:	41 e2       	ldi	r20, 0x21	; 33
    29c4:	50 e0       	ldi	r21, 0x00	; 0
    29c6:	69 e4       	ldi	r22, 0x49	; 73
    29c8:	71 e0       	ldi	r23, 0x01	; 1
    29ca:	86 e8       	ldi	r24, 0x86	; 134
    29cc:	90 e0       	ldi	r25, 0x00	; 0
    29ce:	0e 94 ff 20 	call	0x41fe	; 0x41fe <LCD_Display_Text>
			LCD_Display_Text(118,(const unsigned char*)Verdana14,46,34);	// Low
    29d2:	22 e2       	ldi	r18, 0x22	; 34
    29d4:	30 e0       	ldi	r19, 0x00	; 0
    29d6:	4e e2       	ldi	r20, 0x2E	; 46
    29d8:	50 e0       	ldi	r21, 0x00	; 0
    29da:	69 e4       	ldi	r22, 0x49	; 73
    29dc:	71 e0       	ldi	r23, 0x01	; 1
    29de:	86 e7       	ldi	r24, 0x76	; 118
    29e0:	90 e0       	ldi	r25, 0x00	; 0
    29e2:	3a c0       	rjmp	.+116    	; 0x2a58 <Display_status+0x376>
		}
		else if((General_error & (1 << NO_SIGNAL)) != 0)
    29e4:	80 91 20 05 	lds	r24, 0x0520
    29e8:	81 ff       	sbrs	r24, 1
    29ea:	13 c0       	rjmp	.+38     	; 0x2a12 <Display_status+0x330>
		{
			LCD_Display_Text(75,(const unsigned char*)Verdana14,51,13); 	// No
    29ec:	2d e0       	ldi	r18, 0x0D	; 13
    29ee:	30 e0       	ldi	r19, 0x00	; 0
    29f0:	43 e3       	ldi	r20, 0x33	; 51
    29f2:	50 e0       	ldi	r21, 0x00	; 0
    29f4:	69 e4       	ldi	r22, 0x49	; 73
    29f6:	71 e0       	ldi	r23, 0x01	; 1
    29f8:	8b e4       	ldi	r24, 0x4B	; 75
    29fa:	90 e0       	ldi	r25, 0x00	; 0
    29fc:	0e 94 ff 20 	call	0x41fe	; 0x41fe <LCD_Display_Text>
			LCD_Display_Text(76,(const unsigned char*)Verdana14,39,33);		// Signal
    2a00:	21 e2       	ldi	r18, 0x21	; 33
    2a02:	30 e0       	ldi	r19, 0x00	; 0
    2a04:	47 e2       	ldi	r20, 0x27	; 39
    2a06:	50 e0       	ldi	r21, 0x00	; 0
    2a08:	69 e4       	ldi	r22, 0x49	; 73
    2a0a:	71 e0       	ldi	r23, 0x01	; 1
    2a0c:	8c e4       	ldi	r24, 0x4C	; 76
    2a0e:	90 e0       	ldi	r25, 0x00	; 0
    2a10:	23 c0       	rjmp	.+70     	; 0x2a58 <Display_status+0x376>
		}
		else if((General_error & (1 << THROTTLE_HIGH)) != 0)
    2a12:	80 91 20 05 	lds	r24, 0x0520
    2a16:	80 ff       	sbrs	r24, 0
    2a18:	13 c0       	rjmp	.+38     	; 0x2a40 <Display_status+0x35e>
		{
			LCD_Display_Text(105,(const unsigned char*)Verdana14,28,14);	// Throttle
    2a1a:	2e e0       	ldi	r18, 0x0E	; 14
    2a1c:	30 e0       	ldi	r19, 0x00	; 0
    2a1e:	4c e1       	ldi	r20, 0x1C	; 28
    2a20:	50 e0       	ldi	r21, 0x00	; 0
    2a22:	69 e4       	ldi	r22, 0x49	; 73
    2a24:	71 e0       	ldi	r23, 0x01	; 1
    2a26:	89 e6       	ldi	r24, 0x69	; 105
    2a28:	90 e0       	ldi	r25, 0x00	; 0
    2a2a:	0e 94 ff 20 	call	0x41fe	; 0x41fe <LCD_Display_Text>
			LCD_Display_Text(55,(const unsigned char*)Verdana14,46,34);		// High
    2a2e:	22 e2       	ldi	r18, 0x22	; 34
    2a30:	30 e0       	ldi	r19, 0x00	; 0
    2a32:	4e e2       	ldi	r20, 0x2E	; 46
    2a34:	50 e0       	ldi	r21, 0x00	; 0
    2a36:	69 e4       	ldi	r22, 0x49	; 73
    2a38:	71 e0       	ldi	r23, 0x01	; 1
    2a3a:	87 e3       	ldi	r24, 0x37	; 55
    2a3c:	90 e0       	ldi	r25, 0x00	; 0
    2a3e:	0c c0       	rjmp	.+24     	; 0x2a58 <Display_status+0x376>
		}
		else if((General_error & (1 << DISARMED)) != 0)
    2a40:	80 91 20 05 	lds	r24, 0x0520
    2a44:	82 ff       	sbrs	r24, 2
    2a46:	0a c0       	rjmp	.+20     	; 0x2a5c <Display_status+0x37a>
		{
			LCD_Display_Text(18,(const unsigned char*)Verdana14,25,24); 	// Disarmed
    2a48:	28 e1       	ldi	r18, 0x18	; 24
    2a4a:	30 e0       	ldi	r19, 0x00	; 0
    2a4c:	49 e1       	ldi	r20, 0x19	; 25
    2a4e:	50 e0       	ldi	r21, 0x00	; 0
    2a50:	69 e4       	ldi	r22, 0x49	; 73
    2a52:	71 e0       	ldi	r23, 0x01	; 1
    2a54:	82 e1       	ldi	r24, 0x12	; 18
    2a56:	90 e0       	ldi	r25, 0x00	; 0
    2a58:	0e 94 ff 20 	call	0x41fe	; 0x41fe <LCD_Display_Text>
		}
	}

	// Write buffer to complete
	write_buffer(buffer);
    2a5c:	81 e0       	ldi	r24, 0x01	; 1
    2a5e:	91 e0       	ldi	r25, 0x01	; 1
    2a60:	0e 94 ec 1e 	call	0x3dd8	; 0x3dd8 <write_buffer>
	clear_buffer(buffer);
    2a64:	81 e0       	ldi	r24, 0x01	; 1
    2a66:	91 e0       	ldi	r25, 0x01	; 1
    2a68:	0e 94 1e 1f 	call	0x3e3c	; 0x3e3c <clear_buffer>
}
    2a6c:	0f 90       	pop	r0
    2a6e:	0f 90       	pop	r0
    2a70:	0f 90       	pop	r0
    2a72:	0f 90       	pop	r0
    2a74:	df 91       	pop	r29
    2a76:	cf 91       	pop	r28
    2a78:	1f 91       	pop	r17
    2a7a:	0f 91       	pop	r16
    2a7c:	ff 90       	pop	r15
    2a7e:	ef 90       	pop	r14
    2a80:	df 90       	pop	r13
    2a82:	cf 90       	pop	r12
    2a84:	bf 90       	pop	r11
    2a86:	08 95       	ret

00002a88 <Display_sticks>:
//************************************************************
// Code
//************************************************************

void Display_sticks(void)
{
    2a88:	af 92       	push	r10
    2a8a:	bf 92       	push	r11
    2a8c:	cf 92       	push	r12
    2a8e:	df 92       	push	r13
    2a90:	ef 92       	push	r14
    2a92:	ff 92       	push	r15
    2a94:	0f 93       	push	r16
    2a96:	1f 93       	push	r17
    2a98:	cf 93       	push	r28
    2a9a:	df 93       	push	r29
	int8_t	temp_aileron, temp_elevator, temp_rudder;
	bool	CalibrateDone = false;
	bool	CalibrateStarted = false;

	// Save original settings in case user aborts
	temp_aileron = Config.AileronPol;
    2a9c:	d0 90 de 05 	lds	r13, 0x05DE
	temp_elevator = Config.ElevatorPol;
    2aa0:	f0 90 df 05 	lds	r15, 0x05DF
	temp_rudder = Config.RudderPol;
    2aa4:	a0 90 e0 05 	lds	r10, 0x05E0

	// Reset to defaults - not ideal, but it works
	Config.AileronPol = NORMAL;
    2aa8:	10 92 de 05 	sts	0x05DE, r1
	Config.ElevatorPol =  NORMAL;
    2aac:	10 92 df 05 	sts	0x05DF, r1
	Config.RudderPol = NORMAL;
    2ab0:	10 92 e0 05 	sts	0x05E0, r1
{
	int8_t	i;
	int8_t	offset;
	int8_t	temp_aileron, temp_elevator, temp_rudder;
	bool	CalibrateDone = false;
	bool	CalibrateStarted = false;
    2ab4:	d0 e0       	ldi	r29, 0x00	; 0
void Display_sticks(void)
{
	int8_t	i;
	int8_t	offset;
	int8_t	temp_aileron, temp_elevator, temp_rudder;
	bool	CalibrateDone = false;
    2ab6:	c0 e0       	ldi	r28, 0x00	; 0
	Config.AileronPol = NORMAL;
	Config.ElevatorPol =  NORMAL;
	Config.RudderPol = NORMAL;

	// Until exit button pressed or complete
	while((BUTTON1 != 0) && (!CalibrateDone))
    2ab8:	1f 9b       	sbis	0x03, 7	; 3
    2aba:	b6 c0       	rjmp	.+364    	; 0x2c28 <Display_sticks+0x1a0>
    2abc:	c1 11       	cpse	r28, r1
    2abe:	b6 c0       	rjmp	.+364    	; 0x2c2c <Display_sticks+0x1a4>
	{
		// Draw first stick on the left
		offset = 0;

		// Clear screen buffer
		clear_buffer(buffer);
    2ac0:	81 e0       	ldi	r24, 0x01	; 1
    2ac2:	91 e0       	ldi	r25, 0x01	; 1
    2ac4:	0e 94 1e 1f 	call	0x3e3c	; 0x3e3c <clear_buffer>
    2ac8:	92 e0       	ldi	r25, 0x02	; 2
    2aca:	c9 2e       	mov	r12, r25

	// Until exit button pressed or complete
	while((BUTTON1 != 0) && (!CalibrateDone))
	{
		// Draw first stick on the left
		offset = 0;
    2acc:	10 e0       	ldi	r17, 0x00	; 0
		clear_buffer(buffer);

		// Draw graphic
		for (i = 0; i < 2; i++)
		{
			drawrect(buffer, 17 + offset, 0, 40, 40, 1);			// Box
    2ace:	61 e1       	ldi	r22, 0x11	; 17
    2ad0:	61 0f       	add	r22, r17
    2ad2:	ee 24       	eor	r14, r14
    2ad4:	e3 94       	inc	r14
    2ad6:	08 e2       	ldi	r16, 0x28	; 40
    2ad8:	28 e2       	ldi	r18, 0x28	; 40
    2ada:	40 e0       	ldi	r20, 0x00	; 0
    2adc:	81 e0       	ldi	r24, 0x01	; 1
    2ade:	91 e0       	ldi	r25, 0x01	; 1
    2ae0:	0e 94 1c 20 	call	0x4038	; 0x4038 <drawrect>
			drawline(buffer, 38 + offset,20, 48 + offset,  3, 1); 	// Line 1
    2ae4:	86 e2       	ldi	r24, 0x26	; 38
    2ae6:	b8 2e       	mov	r11, r24
    2ae8:	b1 0e       	add	r11, r17
    2aea:	20 e3       	ldi	r18, 0x30	; 48
    2aec:	21 0f       	add	r18, r17
    2aee:	03 e0       	ldi	r16, 0x03	; 3
    2af0:	44 e1       	ldi	r20, 0x14	; 20
    2af2:	6b 2d       	mov	r22, r11
    2af4:	81 e0       	ldi	r24, 0x01	; 1
    2af6:	91 e0       	ldi	r25, 0x01	; 1
    2af8:	0e 94 7e 1f 	call	0x3efc	; 0x3efc <drawline>
			drawline(buffer, 41 + offset,21, 56 + offset,  6, 1); 	// Line 2
    2afc:	28 e3       	ldi	r18, 0x38	; 56
    2afe:	21 0f       	add	r18, r17
    2b00:	69 e2       	ldi	r22, 0x29	; 41
    2b02:	61 0f       	add	r22, r17
    2b04:	06 e0       	ldi	r16, 0x06	; 6
    2b06:	45 e1       	ldi	r20, 0x15	; 21
    2b08:	81 e0       	ldi	r24, 0x01	; 1
    2b0a:	91 e0       	ldi	r25, 0x01	; 1
    2b0c:	0e 94 7e 1f 	call	0x3efc	; 0x3efc <drawline>
			fillcircle(buffer, 38 + offset, 21, 2, 1);				// Center
    2b10:	01 e0       	ldi	r16, 0x01	; 1
    2b12:	22 e0       	ldi	r18, 0x02	; 2
    2b14:	45 e1       	ldi	r20, 0x15	; 21
    2b16:	6b 2d       	mov	r22, r11
    2b18:	81 e0       	ldi	r24, 0x01	; 1
    2b1a:	91 e0       	ldi	r25, 0x01	; 1
    2b1c:	0e 94 6e 20 	call	0x40dc	; 0x40dc <fillcircle>
			fillcircle(buffer, 51 + offset, 5, 4, 1);				// End
    2b20:	63 e3       	ldi	r22, 0x33	; 51
    2b22:	61 0f       	add	r22, r17
    2b24:	24 e0       	ldi	r18, 0x04	; 4
    2b26:	45 e0       	ldi	r20, 0x05	; 5
    2b28:	81 e0       	ldi	r24, 0x01	; 1
    2b2a:	91 e0       	ldi	r25, 0x01	; 1
    2b2c:	0e 94 6e 20 	call	0x40dc	; 0x40dc <fillcircle>
    2b30:	ca 94       	dec	r12

		// Clear screen buffer
		clear_buffer(buffer);

		// Draw graphic
		for (i = 0; i < 2; i++)
    2b32:	11 f0       	breq	.+4      	; 0x2b38 <Display_sticks+0xb0>
			drawline(buffer, 41 + offset,21, 56 + offset,  6, 1); 	// Line 2
			fillcircle(buffer, 38 + offset, 21, 2, 1);				// Center
			fillcircle(buffer, 51 + offset, 5, 4, 1);				// End

			// Draw second stick on the right
			offset = 52;
    2b34:	14 e3       	ldi	r17, 0x34	; 52
    2b36:	cb cf       	rjmp	.-106    	; 0x2ace <Display_sticks+0x46>
		}

		// Print bottom text and markers
		LCD_Display_Text(12, (const unsigned char*)Wingdings, 0, 57); 		// Left
    2b38:	29 e3       	ldi	r18, 0x39	; 57
    2b3a:	30 e0       	ldi	r19, 0x00	; 0
    2b3c:	40 e0       	ldi	r20, 0x00	; 0
    2b3e:	50 e0       	ldi	r21, 0x00	; 0
    2b40:	6f ed       	ldi	r22, 0xDF	; 223
    2b42:	70 e0       	ldi	r23, 0x00	; 0
    2b44:	8c e0       	ldi	r24, 0x0C	; 12
    2b46:	90 e0       	ldi	r25, 0x00	; 0
    2b48:	0e 94 ff 20 	call	0x41fe	; 0x41fe <LCD_Display_Text>

		// If uncalibrated
		if (!CalibrateDone)
		{
			RxGetChannels();
    2b4c:	0e 94 64 42 	call	0x84c8	; 0x84c8 <RxGetChannels>
			
			// Display warning if sticks not centered or no RC signal while not started calibrating
			if (((RCinputs[AILERON] < -2000) || (RCinputs[AILERON] > 2000)) && !CalibrateStarted)
    2b50:	80 91 2d 08 	lds	r24, 0x082D
    2b54:	90 91 2e 08 	lds	r25, 0x082E
    2b58:	80 33       	cpi	r24, 0x30	; 48
    2b5a:	98 4f       	sbci	r25, 0xF8	; 248
    2b5c:	3c f0       	brlt	.+14     	; 0x2b6c <Display_sticks+0xe4>
    2b5e:	80 91 2d 08 	lds	r24, 0x082D
    2b62:	90 91 2e 08 	lds	r25, 0x082E
    2b66:	81 3d       	cpi	r24, 0xD1	; 209
    2b68:	97 40       	sbci	r25, 0x07	; 7
    2b6a:	6c f0       	brlt	.+26     	; 0x2b86 <Display_sticks+0xfe>
    2b6c:	d1 11       	cpse	r29, r1
    2b6e:	0b c0       	rjmp	.+22     	; 0x2b86 <Display_sticks+0xfe>
			{
				LCD_Display_Text(135,(const unsigned char*)Verdana14,16,43); 	// "No RX signal?"
    2b70:	2b e2       	ldi	r18, 0x2B	; 43
    2b72:	30 e0       	ldi	r19, 0x00	; 0
    2b74:	40 e1       	ldi	r20, 0x10	; 16
    2b76:	50 e0       	ldi	r21, 0x00	; 0
    2b78:	69 e4       	ldi	r22, 0x49	; 73
    2b7a:	71 e0       	ldi	r23, 0x01	; 1
    2b7c:	87 e8       	ldi	r24, 0x87	; 135
    2b7e:	90 e0       	ldi	r25, 0x00	; 0
    2b80:	0e 94 ff 20 	call	0x41fe	; 0x41fe <LCD_Display_Text>
    2b84:	4c c0       	rjmp	.+152    	; 0x2c1e <Display_sticks+0x196>
			}

			// Sticks have not moved far enough but RC being received
			else if ((RCinputs[AILERON] < 500) && (RCinputs[AILERON] > -500))
    2b86:	80 91 2d 08 	lds	r24, 0x082D
    2b8a:	90 91 2e 08 	lds	r25, 0x082E
    2b8e:	84 3f       	cpi	r24, 0xF4	; 244
    2b90:	91 40       	sbci	r25, 0x01	; 1
    2b92:	9c f4       	brge	.+38     	; 0x2bba <Display_sticks+0x132>
    2b94:	80 91 2d 08 	lds	r24, 0x082D
    2b98:	90 91 2e 08 	lds	r25, 0x082E
    2b9c:	8d 30       	cpi	r24, 0x0D	; 13
    2b9e:	9e 4f       	sbci	r25, 0xFE	; 254
    2ba0:	64 f0       	brlt	.+24     	; 0x2bba <Display_sticks+0x132>
			{
				CalibrateStarted = true;
				LCD_Display_Text(136,(const unsigned char*)Verdana14,9,43); 	// "Hold as shown"
    2ba2:	2b e2       	ldi	r18, 0x2B	; 43
    2ba4:	30 e0       	ldi	r19, 0x00	; 0
    2ba6:	49 e0       	ldi	r20, 0x09	; 9
    2ba8:	50 e0       	ldi	r21, 0x00	; 0
    2baa:	69 e4       	ldi	r22, 0x49	; 73
    2bac:	71 e0       	ldi	r23, 0x01	; 1
    2bae:	88 e8       	ldi	r24, 0x88	; 136
    2bb0:	90 e0       	ldi	r25, 0x00	; 0
    2bb2:	0e 94 ff 20 	call	0x41fe	; 0x41fe <LCD_Display_Text>
			}

			// Sticks have not moved far enough but RC being received
			else if ((RCinputs[AILERON] < 500) && (RCinputs[AILERON] > -500))
			{
				CalibrateStarted = true;
    2bb6:	d1 e0       	ldi	r29, 0x01	; 1
				LCD_Display_Text(136,(const unsigned char*)Verdana14,9,43); 	// "Hold as shown"
    2bb8:	32 c0       	rjmp	.+100    	; 0x2c1e <Display_sticks+0x196>

			// Sticks should now be in the right position
			// Reverse wrong input channels
			else
			{
				if (RCinputs[AILERON] < 0)
    2bba:	80 91 2d 08 	lds	r24, 0x082D
    2bbe:	90 91 2e 08 	lds	r25, 0x082E
    2bc2:	97 ff       	sbrs	r25, 7
    2bc4:	03 c0       	rjmp	.+6      	; 0x2bcc <Display_sticks+0x144>
				{
					Config.AileronPol = REVERSED;
    2bc6:	81 e0       	ldi	r24, 0x01	; 1
    2bc8:	80 93 de 05 	sts	0x05DE, r24
				}

				if (RCinputs[ELEVATOR] < 0)
    2bcc:	80 91 2f 08 	lds	r24, 0x082F
    2bd0:	90 91 30 08 	lds	r25, 0x0830
    2bd4:	97 ff       	sbrs	r25, 7
    2bd6:	03 c0       	rjmp	.+6      	; 0x2bde <Display_sticks+0x156>
				{
					Config.ElevatorPol = REVERSED;
    2bd8:	81 e0       	ldi	r24, 0x01	; 1
    2bda:	80 93 df 05 	sts	0x05DF, r24
				}

				if (RCinputs[RUDDER] < 0)
    2bde:	80 91 31 08 	lds	r24, 0x0831
    2be2:	90 91 32 08 	lds	r25, 0x0832
    2be6:	97 ff       	sbrs	r25, 7
    2be8:	03 c0       	rjmp	.+6      	; 0x2bf0 <Display_sticks+0x168>
				{
					Config.RudderPol = REVERSED;
    2bea:	81 e0       	ldi	r24, 0x01	; 1
    2bec:	80 93 e0 05 	sts	0x05E0, r24
				}

				// If all positive - done!
				if ((RCinputs[AILERON] > 0) && (RCinputs[ELEVATOR] > 0) && (RCinputs[RUDDER] > 0))
    2bf0:	80 91 2d 08 	lds	r24, 0x082D
    2bf4:	90 91 2e 08 	lds	r25, 0x082E
    2bf8:	18 16       	cp	r1, r24
    2bfa:	19 06       	cpc	r1, r25
    2bfc:	84 f4       	brge	.+32     	; 0x2c1e <Display_sticks+0x196>
    2bfe:	80 91 2f 08 	lds	r24, 0x082F
    2c02:	90 91 30 08 	lds	r25, 0x0830
    2c06:	18 16       	cp	r1, r24
    2c08:	19 06       	cpc	r1, r25
    2c0a:	4c f4       	brge	.+18     	; 0x2c1e <Display_sticks+0x196>
    2c0c:	80 91 31 08 	lds	r24, 0x0831
    2c10:	90 91 32 08 	lds	r25, 0x0832
    2c14:	c1 e0       	ldi	r28, 0x01	; 1
    2c16:	18 16       	cp	r1, r24
    2c18:	19 06       	cpc	r1, r25
    2c1a:	0c f0       	brlt	.+2      	; 0x2c1e <Display_sticks+0x196>
    2c1c:	c0 e0       	ldi	r28, 0x00	; 0
				}
			}
		}

		// Update buffer
		write_buffer(buffer);
    2c1e:	81 e0       	ldi	r24, 0x01	; 1
    2c20:	91 e0       	ldi	r25, 0x01	; 1
    2c22:	0e 94 ec 1e 	call	0x3dd8	; 0x3dd8 <write_buffer>
    2c26:	48 cf       	rjmp	.-368    	; 0x2ab8 <Display_sticks+0x30>
	}

	// Save value and return
	if (CalibrateDone)
    2c28:	cc 23       	and	r28, r28
    2c2a:	39 f1       	breq	.+78     	; 0x2c7a <Display_sticks+0x1f2>
	{
		LCD_Display_Text(137,(const unsigned char*)Verdana14,40,43); 	// "Done!"
    2c2c:	2b e2       	ldi	r18, 0x2B	; 43
    2c2e:	30 e0       	ldi	r19, 0x00	; 0
    2c30:	48 e2       	ldi	r20, 0x28	; 40
    2c32:	50 e0       	ldi	r21, 0x00	; 0
    2c34:	69 e4       	ldi	r22, 0x49	; 73
    2c36:	71 e0       	ldi	r23, 0x01	; 1
    2c38:	89 e8       	ldi	r24, 0x89	; 137
    2c3a:	90 e0       	ldi	r25, 0x00	; 0
    2c3c:	0e 94 ff 20 	call	0x41fe	; 0x41fe <LCD_Display_Text>
		// Update buffer
		write_buffer(buffer);
    2c40:	81 e0       	ldi	r24, 0x01	; 1
    2c42:	91 e0       	ldi	r25, 0x01	; 1
    2c44:	0e 94 ec 1e 	call	0x3dd8	; 0x3dd8 <write_buffer>
		clear_buffer(buffer);
    2c48:	81 e0       	ldi	r24, 0x01	; 1
    2c4a:	91 e0       	ldi	r25, 0x01	; 1
    2c4c:	0e 94 1e 1f 	call	0x3e3c	; 0x3e3c <clear_buffer>
    2c50:	8f e7       	ldi	r24, 0x7F	; 127
    2c52:	94 e8       	ldi	r25, 0x84	; 132
    2c54:	2e e1       	ldi	r18, 0x1E	; 30
    2c56:	81 50       	subi	r24, 0x01	; 1
    2c58:	90 40       	sbci	r25, 0x00	; 0
    2c5a:	20 40       	sbci	r18, 0x00	; 0
    2c5c:	e1 f7       	brne	.-8      	; 0x2c56 <Display_sticks+0x1ce>
    2c5e:	00 c0       	rjmp	.+0      	; 0x2c60 <Display_sticks+0x1d8>
    2c60:	00 00       	nop
		// Restore old settings if failed
		Config.AileronPol = temp_aileron;
		Config.ElevatorPol = temp_elevator;
		Config.RudderPol = temp_rudder;
	}
}
    2c62:	df 91       	pop	r29
    2c64:	cf 91       	pop	r28
    2c66:	1f 91       	pop	r17
    2c68:	0f 91       	pop	r16
    2c6a:	ff 90       	pop	r15
    2c6c:	ef 90       	pop	r14
    2c6e:	df 90       	pop	r13
    2c70:	cf 90       	pop	r12
    2c72:	bf 90       	pop	r11
    2c74:	af 90       	pop	r10
		// Update buffer
		write_buffer(buffer);
		clear_buffer(buffer);
		// Pause so that the "Done!" text is readable
		_delay_ms(500);
		Save_Config_to_EEPROM();
    2c76:	0c 94 86 16 	jmp	0x2d0c	; 0x2d0c <Save_Config_to_EEPROM>
 	}
	else
	{
		// Restore old settings if failed
		Config.AileronPol = temp_aileron;
    2c7a:	d0 92 de 05 	sts	0x05DE, r13
		Config.ElevatorPol = temp_elevator;
    2c7e:	f0 92 df 05 	sts	0x05DF, r15
		Config.RudderPol = temp_rudder;
    2c82:	a0 92 e0 05 	sts	0x05E0, r10
	}
}
    2c86:	df 91       	pop	r29
    2c88:	cf 91       	pop	r28
    2c8a:	1f 91       	pop	r17
    2c8c:	0f 91       	pop	r16
    2c8e:	ff 90       	pop	r15
    2c90:	ef 90       	pop	r14
    2c92:	df 90       	pop	r13
    2c94:	cf 90       	pop	r12
    2c96:	bf 90       	pop	r11
    2c98:	af 90       	pop	r10
    2c9a:	08 95       	ret

00002c9c <eeprom_write_byte_changed>:
}

// addr is the address in eeprom
// value is the value to be written
void eeprom_write_byte_changed(uint8_t *addr, uint8_t value)
{
    2c9c:	0f 93       	push	r16
    2c9e:	1f 93       	push	r17
    2ca0:	cf 93       	push	r28
    2ca2:	df 93       	push	r29
    2ca4:	1f 92       	push	r1
    2ca6:	cd b7       	in	r28, 0x3d	; 61
    2ca8:	de b7       	in	r29, 0x3e	; 62
    2caa:	8c 01       	movw	r16, r24
	if (eeprom_read_byte(addr) != value)
    2cac:	69 83       	std	Y+1, r22	; 0x01
    2cae:	0e 94 48 48 	call	0x9090	; 0x9090 <__eerd_byte_m644pa>
    2cb2:	69 81       	ldd	r22, Y+1	; 0x01
    2cb4:	86 17       	cp	r24, r22
    2cb6:	41 f0       	breq	.+16     	; 0x2cc8 <eeprom_write_byte_changed+0x2c>
	{
		// void eeprom_write_byte (uint8_t *__p, uint8_t __value);
		eeprom_write_byte(addr, value);
    2cb8:	c8 01       	movw	r24, r16
	}
}
    2cba:	0f 90       	pop	r0
    2cbc:	df 91       	pop	r29
    2cbe:	cf 91       	pop	r28
    2cc0:	1f 91       	pop	r17
    2cc2:	0f 91       	pop	r16
void eeprom_write_byte_changed(uint8_t *addr, uint8_t value)
{
	if (eeprom_read_byte(addr) != value)
	{
		// void eeprom_write_byte (uint8_t *__p, uint8_t __value);
		eeprom_write_byte(addr, value);
    2cc4:	0c 94 50 48 	jmp	0x90a0	; 0x90a0 <__eewr_byte_m644pa>
	}
}
    2cc8:	0f 90       	pop	r0
    2cca:	df 91       	pop	r29
    2ccc:	cf 91       	pop	r28
    2cce:	1f 91       	pop	r17
    2cd0:	0f 91       	pop	r16
    2cd2:	08 95       	ret

00002cd4 <eeprom_write_block_changes>:
}

// src is the address in RAM
// dest is the address in eeprom (hence const)
void eeprom_write_block_changes(uint8_t *src, uint8_t *dest, uint16_t size)
{ 
    2cd4:	ef 92       	push	r14
    2cd6:	ff 92       	push	r15
    2cd8:	0f 93       	push	r16
    2cda:	1f 93       	push	r17
    2cdc:	cf 93       	push	r28
    2cde:	df 93       	push	r29
    2ce0:	ec 01       	movw	r28, r24
    2ce2:	8b 01       	movw	r16, r22
    2ce4:	7a 01       	movw	r14, r20
    2ce6:	e8 0e       	add	r14, r24
    2ce8:	f9 1e       	adc	r15, r25
	uint16_t len;
	uint8_t value;

	for (len=0; len < size; len++)
    2cea:	ce 15       	cp	r28, r14
    2cec:	df 05       	cpc	r29, r15
    2cee:	39 f0       	breq	.+14     	; 0x2cfe <eeprom_write_block_changes+0x2a>
	{
		// Get value at src
		value = *src;
		
		// Write the value at src to dest
		eeprom_write_byte_changed(dest, value);
    2cf0:	69 91       	ld	r22, Y+
    2cf2:	c8 01       	movw	r24, r16
    2cf4:	0e 94 4e 16 	call	0x2c9c	; 0x2c9c <eeprom_write_byte_changed>
		src++;
		dest++;
    2cf8:	0f 5f       	subi	r16, 0xFF	; 255
    2cfa:	1f 4f       	sbci	r17, 0xFF	; 255
    2cfc:	f6 cf       	rjmp	.-20     	; 0x2cea <eeprom_write_block_changes+0x16>
	}
}
    2cfe:	df 91       	pop	r29
    2d00:	cf 91       	pop	r28
    2d02:	1f 91       	pop	r17
    2d04:	0f 91       	pop	r16
    2d06:	ff 90       	pop	r15
    2d08:	ef 90       	pop	r14
    2d0a:	08 95       	ret

00002d0c <Save_Config_to_EEPROM>:
const uint8_t	FUTABA[MAX_RC_CHANNELS] PROGMEM = {1,2,0,3,4,5,6,7}; 	// Futaba channel sequence (AETRGF12)

void Save_Config_to_EEPROM(void)
{
	// Write to eeProm
	cli();
    2d0c:	f8 94       	cli
	eeprom_write_block_changes((uint8_t*)&Config, (uint8_t*)EEPROM_DATA_START_POS, sizeof(CONFIG_STRUCT));	
    2d0e:	48 e0       	ldi	r20, 0x08	; 8
    2d10:	52 e0       	ldi	r21, 0x02	; 2
    2d12:	60 e0       	ldi	r22, 0x00	; 0
    2d14:	70 e0       	ldi	r23, 0x00	; 0
    2d16:	81 eb       	ldi	r24, 0xB1	; 177
    2d18:	95 e0       	ldi	r25, 0x05	; 5
    2d1a:	0e 94 6a 16 	call	0x2cd4	; 0x2cd4 <eeprom_write_block_changes>
	sei();
    2d1e:	78 94       	sei
    2d20:	08 95       	ret

00002d22 <Update_V1_0_to_V1_1>:
// Config data restructure code
//************************************************************

// Upgrade V1.0 structure to V1.1 structure
void Update_V1_0_to_V1_1(void)
{
    2d22:	2f 92       	push	r2
    2d24:	3f 92       	push	r3
    2d26:	4f 92       	push	r4
    2d28:	5f 92       	push	r5
    2d2a:	6f 92       	push	r6
    2d2c:	7f 92       	push	r7
    2d2e:	8f 92       	push	r8
    2d30:	9f 92       	push	r9
    2d32:	af 92       	push	r10
    2d34:	bf 92       	push	r11
    2d36:	cf 92       	push	r12
    2d38:	df 92       	push	r13
    2d3a:	ef 92       	push	r14
    2d3c:	ff 92       	push	r15
    2d3e:	0f 93       	push	r16
    2d40:	1f 93       	push	r17
    2d42:	cf 93       	push	r28
    2d44:	df 93       	push	r29
    2d46:	cd b7       	in	r28, 0x3d	; 61
    2d48:	de b7       	in	r29, 0x3e	; 62
    2d4a:	c4 54       	subi	r28, 0x44	; 68
    2d4c:	d1 40       	sbci	r29, 0x01	; 1
    2d4e:	0f b6       	in	r0, 0x3f	; 63
    2d50:	f8 94       	cli
    2d52:	de bf       	out	0x3e, r29	; 62
    2d54:	0f be       	out	0x3f, r0	; 63
    2d56:	cd bf       	out	0x3d, r28	; 61
	int8_t		P1_scale;				// P1 sensor scale flags (6)
	int8_t		P2_scale;				// P2 sensor scale flags (6)

	// Move data that exists after the channel mixer to new location
	// Hard-coded to V1.0 RAM location
	memmove(Config.Servo_reverse, (void*)1832, 74);	// (29 * 8) + 1600 = 1832. This works perfectly.
    2d58:	4a e4       	ldi	r20, 0x4A	; 74
    2d5a:	50 e0       	ldi	r21, 0x00	; 0
    2d5c:	68 e2       	ldi	r22, 0x28	; 40
    2d5e:	77 e0       	ldi	r23, 0x07	; 7
    2d60:	83 e7       	ldi	r24, 0x73	; 115
    2d62:	97 e0       	ldi	r25, 0x07	; 7
    2d64:	0e 94 01 48 	call	0x9002	; 0x9002 <memmove>
    2d68:	23 e4       	ldi	r18, 0x43	; 67
    2d6a:	36 e0       	ldi	r19, 0x06	; 6
    2d6c:	ae 01       	movw	r20, r28
    2d6e:	4f 5c       	subi	r20, 0xCF	; 207
    2d70:	5e 4f       	sbci	r21, 0xFE	; 254
    2d72:	ce 01       	movw	r24, r28
    2d74:	01 96       	adiw	r24, 0x01	; 1
	{
		src = (void*)Config.Channel;
		dst = (void*)mixer_buffer;
		src += (i * OLDSIZE);			// Step to next old data in (corrupted) config structure
		dst += (i * NEWSIZE);			// Step to next location for new data in the buffer
		memmove(dst, src, OLDSIZE);		// Move only the old (smaller) data
    2d76:	6d e1       	ldi	r22, 0x1D	; 29
    2d78:	f9 01       	movw	r30, r18
    2d7a:	dc 01       	movw	r26, r24
    2d7c:	76 2f       	mov	r23, r22
    2d7e:	01 90       	ld	r0, Z+
    2d80:	0d 92       	st	X+, r0
    2d82:	7a 95       	dec	r23
    2d84:	e1 f7       	brne	.-8      	; 0x2d7e <Update_V1_0_to_V1_1+0x5c>
    2d86:	86 96       	adiw	r24, 0x26	; 38
    2d88:	23 5e       	subi	r18, 0xE3	; 227
    2d8a:	3f 4f       	sbci	r19, 0xFF	; 255
	// Move data that exists after the channel mixer to new location
	// Hard-coded to V1.0 RAM location
	memmove(Config.Servo_reverse, (void*)1832, 74);	// (29 * 8) + 1600 = 1832. This works perfectly.
	
	// Copy the old channel[] structure into buffer, spaced out to match the new structure
	for (i = 0; i < MAX_OUTPUTS; i++)
    2d8c:	84 17       	cp	r24, r20
    2d8e:	95 07       	cpc	r25, r21
    2d90:	99 f7       	brne	.-26     	; 0x2d78 <Update_V1_0_to_V1_1+0x56>
    2d92:	4e 01       	movw	r8, r28
    2d94:	43 e1       	ldi	r20, 0x13	; 19
    2d96:	84 0e       	add	r8, r20
    2d98:	91 1c       	adc	r9, r1
    2d9a:	5e 01       	movw	r10, r28
    2d9c:	84 e1       	ldi	r24, 0x14	; 20
    2d9e:	a8 0e       	add	r10, r24
    2da0:	b1 1c       	adc	r11, r1
    2da2:	6e 01       	movw	r12, r28
    2da4:	95 e1       	ldi	r25, 0x15	; 21
    2da6:	c9 0e       	add	r12, r25
    2da8:	d1 1c       	adc	r13, r1
    2daa:	fe 01       	movw	r30, r28
    2dac:	76 96       	adiw	r30, 0x16	; 22
    2dae:	cf 5c       	subi	r28, 0xCF	; 207
    2db0:	de 4f       	sbci	r29, 0xFE	; 254
    2db2:	f9 83       	std	Y+1, r31	; 0x01
    2db4:	e8 83       	st	Y, r30
    2db6:	c1 53       	subi	r28, 0x31	; 49
    2db8:	d1 40       	sbci	r29, 0x01	; 1
    2dba:	8e 01       	movw	r16, r28
    2dbc:	02 5e       	subi	r16, 0xE2	; 226
    2dbe:	1f 4f       	sbci	r17, 0xFF	; 255
    2dc0:	ce 01       	movw	r24, r28
    2dc2:	4d 96       	adiw	r24, 0x1d	; 29
    2dc4:	c7 5c       	subi	r28, 0xC7	; 199
    2dc6:	de 4f       	sbci	r29, 0xFE	; 254
    2dc8:	99 83       	std	Y+1, r25	; 0x01
    2dca:	88 83       	st	Y, r24
    2dcc:	c9 53       	subi	r28, 0x39	; 57
    2dce:	d1 40       	sbci	r29, 0x01	; 1
    2dd0:	36 96       	adiw	r30, 0x06	; 6
    2dd2:	cd 5c       	subi	r28, 0xCD	; 205
    2dd4:	de 4f       	sbci	r29, 0xFE	; 254
    2dd6:	f9 83       	std	Y+1, r31	; 0x01
    2dd8:	e8 83       	st	Y, r30
    2dda:	c3 53       	subi	r28, 0x33	; 51
    2ddc:	d1 40       	sbci	r29, 0x01	; 1
    2dde:	02 97       	sbiw	r24, 0x02	; 2
    2de0:	c3 5c       	subi	r28, 0xC3	; 195
    2de2:	de 4f       	sbci	r29, 0xFE	; 254
    2de4:	99 83       	std	Y+1, r25	; 0x01
    2de6:	88 83       	st	Y, r24
    2de8:	cd 53       	subi	r28, 0x3D	; 61
    2dea:	d1 40       	sbci	r29, 0x01	; 1
    2dec:	32 97       	sbiw	r30, 0x02	; 2
    2dee:	c9 5c       	subi	r28, 0xC9	; 201
    2df0:	de 4f       	sbci	r29, 0xFE	; 254
    2df2:	f9 83       	std	Y+1, r31	; 0x01
    2df4:	e8 83       	st	Y, r30
    2df6:	c7 53       	subi	r28, 0x37	; 55
    2df8:	d1 40       	sbci	r29, 0x01	; 1
    2dfa:	02 97       	sbiw	r24, 0x02	; 2
    2dfc:	c5 5c       	subi	r28, 0xC5	; 197
    2dfe:	de 4f       	sbci	r29, 0xFE	; 254
    2e00:	99 83       	std	Y+1, r25	; 0x01
    2e02:	88 83       	st	Y, r24
    2e04:	cb 53       	subi	r28, 0x3B	; 59
    2e06:	d1 40       	sbci	r29, 0x01	; 1
    2e08:	32 97       	sbiw	r30, 0x02	; 2
    2e0a:	cb 5c       	subi	r28, 0xCB	; 203
    2e0c:	de 4f       	sbci	r29, 0xFE	; 254
    2e0e:	f9 83       	std	Y+1, r31	; 0x01
    2e10:	e8 83       	st	Y, r30
    2e12:	c5 53       	subi	r28, 0x35	; 53
    2e14:	d1 40       	sbci	r29, 0x01	; 1
    2e16:	7e 01       	movw	r14, r28
    2e18:	f7 e1       	ldi	r31, 0x17	; 23
    2e1a:	ef 0e       	add	r14, r31
    2e1c:	f1 1c       	adc	r15, r1
    2e1e:	3e 01       	movw	r6, r28
    2e20:	45 e0       	ldi	r20, 0x05	; 5
    2e22:	64 0e       	add	r6, r20
    2e24:	71 1c       	adc	r7, r1
    2e26:	81 e0       	ldi	r24, 0x01	; 1
    2e28:	90 e0       	ldi	r25, 0x00	; 0
    2e2a:	8c 0f       	add	r24, r28
    2e2c:	9d 1f       	adc	r25, r29
    2e2e:	83 5b       	subi	r24, 0xB3	; 179
    2e30:	9e 4f       	sbci	r25, 0xFE	; 254
    2e32:	cf 5b       	subi	r28, 0xBF	; 191
    2e34:	de 4f       	sbci	r29, 0xFE	; 254
    2e36:	99 83       	std	Y+1, r25	; 0x01
    2e38:	88 83       	st	Y, r24
    2e3a:	c1 54       	subi	r28, 0x41	; 65
    2e3c:	d1 40       	sbci	r29, 0x01	; 1
    2e3e:	fe 01       	movw	r30, r28
    2e40:	31 96       	adiw	r30, 0x01	; 1
    2e42:	c1 5c       	subi	r28, 0xC1	; 193
    2e44:	de 4f       	sbci	r29, 0xFE	; 254
    2e46:	f9 83       	std	Y+1, r31	; 0x01
    2e48:	e8 83       	st	Y, r30
    2e4a:	cf 53       	subi	r28, 0x3F	; 63
    2e4c:	d1 40       	sbci	r29, 0x01	; 1
		
		// Take old motor marker switch and convert
		if ((P1_sensors & (1 << MotorMarker)) != 0)
		{
			// Set the new value in the right place
			mixer_buffer[4 + (i * NEWSIZE)] = MOTOR;
    2e4e:	82 e0       	ldi	r24, 0x02	; 2
    2e50:	58 2e       	mov	r5, r24
			{
				mixer_buffer[18 + (i * NEWSIZE)] = SCALE;
			}
			else
			{
				mixer_buffer[18 + (i * NEWSIZE)] = ON;
    2e52:	44 24       	eor	r4, r4
    2e54:	43 94       	inc	r4
	for (i = 0; i < MAX_OUTPUTS; i++)
	{
		// Move all bytes from P1_offset up by one to make space for the Motor_marker byte
		src = &mixer_buffer[4 + (i * NEWSIZE)];	// The old P1_offset byte
		dst = &mixer_buffer[5 + (i * NEWSIZE)];
		memmove(dst, src, (OLDSIZE - 4));// Move all but P1_value, P2_value
    2e56:	49 e1       	ldi	r20, 0x19	; 25
    2e58:	50 e0       	ldi	r21, 0x00	; 0
    2e5a:	b3 01       	movw	r22, r6
    2e5c:	c8 01       	movw	r24, r16
    2e5e:	48 97       	sbiw	r24, 0x18	; 24
    2e60:	0e 94 01 48 	call	0x9002	; 0x9002 <memmove>

		// Save the old switches
		P1_sensors = mixer_buffer[18 + (i * NEWSIZE)];
    2e64:	f4 01       	movw	r30, r8
    2e66:	30 80       	ld	r3, Z
		P2_sensors = mixer_buffer[19 + (i * NEWSIZE)];
    2e68:	f5 01       	movw	r30, r10
    2e6a:	20 81       	ld	r18, Z
		P1_scale = mixer_buffer[20 + (i * NEWSIZE)];
    2e6c:	f6 01       	movw	r30, r12
    2e6e:	30 81       	ld	r19, Z
		P2_scale = mixer_buffer[21 + (i * NEWSIZE)];
    2e70:	cf 5c       	subi	r28, 0xCF	; 207
    2e72:	de 4f       	sbci	r29, 0xFE	; 254
    2e74:	e8 81       	ld	r30, Y
    2e76:	f9 81       	ldd	r31, Y+1	; 0x01
    2e78:	c1 53       	subi	r28, 0x31	; 49
    2e7a:	d1 40       	sbci	r29, 0x01	; 1
    2e7c:	20 80       	ld	r2, Z
		
		// Take old motor marker switch and convert
		if ((P1_sensors & (1 << MotorMarker)) != 0)
		{
			// Set the new value in the right place
			mixer_buffer[4 + (i * NEWSIZE)] = MOTOR;
    2e7e:	f3 01       	movw	r30, r6
		P2_sensors = mixer_buffer[19 + (i * NEWSIZE)];
		P1_scale = mixer_buffer[20 + (i * NEWSIZE)];
		P2_scale = mixer_buffer[21 + (i * NEWSIZE)];
		
		// Take old motor marker switch and convert
		if ((P1_sensors & (1 << MotorMarker)) != 0)
    2e80:	36 fe       	sbrs	r3, 6
    2e82:	02 c0       	rjmp	.+4      	; 0x2e88 <Update_V1_0_to_V1_1+0x166>
		{
			// Set the new value in the right place
			mixer_buffer[4 + (i * NEWSIZE)] = MOTOR;
    2e84:	50 82       	st	Z, r5
    2e86:	01 c0       	rjmp	.+2      	; 0x2e8a <Update_V1_0_to_V1_1+0x168>
		}
		else
		{
			mixer_buffer[4 + (i * NEWSIZE)] = ASERVO;
    2e88:	10 82       	st	Z, r1
		}

		// Move the universal source bytes (8) up eight bytes
		src = &mixer_buffer[22 + (i * NEWSIZE)]; // 21 + 1
		dst = &mixer_buffer[30 + (i * NEWSIZE)];
		memmove(dst, src, 8);
    2e8a:	48 e0       	ldi	r20, 0x08	; 8
    2e8c:	50 e0       	ldi	r21, 0x00	; 0
    2e8e:	b7 01       	movw	r22, r14
    2e90:	c8 01       	movw	r24, r16
    2e92:	01 96       	adiw	r24, 0x01	; 1
    2e94:	cd 5b       	subi	r28, 0xBD	; 189
    2e96:	de 4f       	sbci	r29, 0xFE	; 254
    2e98:	28 83       	st	Y, r18
    2e9a:	c3 54       	subi	r28, 0x43	; 67
    2e9c:	d1 40       	sbci	r29, 0x01	; 1
    2e9e:	cc 5b       	subi	r28, 0xBC	; 188
    2ea0:	de 4f       	sbci	r29, 0xFE	; 254
    2ea2:	38 83       	st	Y, r19
    2ea4:	c4 54       	subi	r28, 0x44	; 68
    2ea6:	d1 40       	sbci	r29, 0x01	; 1
    2ea8:	0e 94 01 48 	call	0x9002	; 0x9002 <memmove>
    2eac:	80 e0       	ldi	r24, 0x00	; 0
    2eae:	90 e0       	ldi	r25, 0x00	; 0
    2eb0:	cc 5b       	subi	r28, 0xBC	; 188
    2eb2:	de 4f       	sbci	r29, 0xFE	; 254
    2eb4:	38 81       	ld	r19, Y
    2eb6:	c4 54       	subi	r28, 0x44	; 68
    2eb8:	d1 40       	sbci	r29, 0x01	; 1
    2eba:	cd 5b       	subi	r28, 0xBD	; 189
    2ebc:	de 4f       	sbci	r29, 0xFE	; 254
    2ebe:	28 81       	ld	r18, Y
    2ec0:	c3 54       	subi	r28, 0x43	; 67
    2ec2:	d1 40       	sbci	r29, 0x01	; 1
    2ec4:	c1 5c       	subi	r28, 0xC1	; 193
    2ec6:	de 4f       	sbci	r29, 0xFE	; 254
    2ec8:	e8 81       	ld	r30, Y
    2eca:	f9 81       	ldd	r31, Y+1	; 0x01
    2ecc:	cf 53       	subi	r28, 0x3F	; 63
    2ece:	d1 40       	sbci	r29, 0x01	; 1
    2ed0:	e8 0f       	add	r30, r24
    2ed2:	f9 1f       	adc	r31, r25
	
		// Convert old "None" settings to new ones
		// Skip every second byte
		for (j = 0; j < 8; j += 2)
		{
			if (mixer_buffer[30 + (i * NEWSIZE) + j] == 13) // 13 was the old "None"
    2ed4:	46 8d       	ldd	r20, Z+30	; 0x1e
    2ed6:	4d 30       	cpi	r20, 0x0D	; 13
    2ed8:	11 f4       	brne	.+4      	; 0x2ede <Update_V1_0_to_V1_1+0x1bc>
			{
				mixer_buffer[30 + (i * NEWSIZE) + j] = NOMIX;
    2eda:	4f e0       	ldi	r20, 0x0F	; 15
    2edc:	46 8f       	std	Z+30, r20	; 0x1e
    2ede:	02 96       	adiw	r24, 0x02	; 2
		dst = &mixer_buffer[30 + (i * NEWSIZE)];
		memmove(dst, src, 8);
	
		// Convert old "None" settings to new ones
		// Skip every second byte
		for (j = 0; j < 8; j += 2)
    2ee0:	88 30       	cpi	r24, 0x08	; 8
    2ee2:	91 05       	cpc	r25, r1
    2ee4:	79 f7       	brne	.-34     	; 0x2ec4 <Update_V1_0_to_V1_1+0x1a2>
		// P1 roll gyro
		if ((P1_sensors & (1 << RollGyro)) != 0)
		{
			if ((P1_scale & (1 << RollScale)) != 0)
			{
				mixer_buffer[18 + (i * NEWSIZE)] = SCALE;
    2ee6:	f4 01       	movw	r30, r8
			}			
		}

		// Expand the old switches into new bytes
		// P1 roll gyro
		if ((P1_sensors & (1 << RollGyro)) != 0)
    2ee8:	30 fe       	sbrs	r3, 0
    2eea:	06 c0       	rjmp	.+12     	; 0x2ef8 <Update_V1_0_to_V1_1+0x1d6>
		{
			if ((P1_scale & (1 << RollScale)) != 0)
    2eec:	30 ff       	sbrs	r19, 0
    2eee:	02 c0       	rjmp	.+4      	; 0x2ef4 <Update_V1_0_to_V1_1+0x1d2>
			{
				mixer_buffer[18 + (i * NEWSIZE)] = SCALE;
    2ef0:	50 82       	st	Z, r5
    2ef2:	03 c0       	rjmp	.+6      	; 0x2efa <Update_V1_0_to_V1_1+0x1d8>
			}
			else
			{
				mixer_buffer[18 + (i * NEWSIZE)] = ON;
    2ef4:	40 82       	st	Z, r4
    2ef6:	01 c0       	rjmp	.+2      	; 0x2efa <Update_V1_0_to_V1_1+0x1d8>
			}
		}
		else
		{
			mixer_buffer[18 + (i * NEWSIZE)] = OFF;
    2ef8:	10 82       	st	Z, r1
		// P2 roll gyro
		if ((P2_sensors & (1 << RollGyro)) != 0)
		{
			if ((P2_scale & (1 << RollScale)) != 0)
			{
				mixer_buffer[19 + (i * NEWSIZE)] = SCALE;
    2efa:	f5 01       	movw	r30, r10
		{
			mixer_buffer[18 + (i * NEWSIZE)] = OFF;
		}

		// P2 roll gyro
		if ((P2_sensors & (1 << RollGyro)) != 0)
    2efc:	20 ff       	sbrs	r18, 0
    2efe:	06 c0       	rjmp	.+12     	; 0x2f0c <Update_V1_0_to_V1_1+0x1ea>
		{
			if ((P2_scale & (1 << RollScale)) != 0)
    2f00:	20 fe       	sbrs	r2, 0
    2f02:	02 c0       	rjmp	.+4      	; 0x2f08 <Update_V1_0_to_V1_1+0x1e6>
			{
				mixer_buffer[19 + (i * NEWSIZE)] = SCALE;
    2f04:	50 82       	st	Z, r5
    2f06:	03 c0       	rjmp	.+6      	; 0x2f0e <Update_V1_0_to_V1_1+0x1ec>
			}
			else
			{
				mixer_buffer[19 + (i * NEWSIZE)] = ON;
    2f08:	40 82       	st	Z, r4
    2f0a:	01 c0       	rjmp	.+2      	; 0x2f0e <Update_V1_0_to_V1_1+0x1ec>
			}
		}
		else
		{
			mixer_buffer[19 + (i * NEWSIZE)] = OFF;
    2f0c:	10 82       	st	Z, r1
		// P1 pitch gyro
		if ((P1_sensors & (1 << PitchGyro)) != 0)
		{
			if ((P1_scale & (1 << PitchScale)) != 0)
			{
				mixer_buffer[20 + (i * NEWSIZE)] = SCALE;
    2f0e:	f6 01       	movw	r30, r12
		{
			mixer_buffer[19 + (i * NEWSIZE)] = OFF;
		}

		// P1 pitch gyro
		if ((P1_sensors & (1 << PitchGyro)) != 0)
    2f10:	31 fe       	sbrs	r3, 1
    2f12:	06 c0       	rjmp	.+12     	; 0x2f20 <Update_V1_0_to_V1_1+0x1fe>
		{
			if ((P1_scale & (1 << PitchScale)) != 0)
    2f14:	31 ff       	sbrs	r19, 1
    2f16:	02 c0       	rjmp	.+4      	; 0x2f1c <Update_V1_0_to_V1_1+0x1fa>
			{
				mixer_buffer[20 + (i * NEWSIZE)] = SCALE;
    2f18:	50 82       	st	Z, r5
    2f1a:	03 c0       	rjmp	.+6      	; 0x2f22 <Update_V1_0_to_V1_1+0x200>
			}
			else
			{
				mixer_buffer[20 + (i * NEWSIZE)] = ON;
    2f1c:	40 82       	st	Z, r4
    2f1e:	01 c0       	rjmp	.+2      	; 0x2f22 <Update_V1_0_to_V1_1+0x200>
			}
		}
		else
		{
			mixer_buffer[20 + (i * NEWSIZE)] = OFF;
    2f20:	10 82       	st	Z, r1
		// P2 pitch gyro
		if ((P2_sensors & (1 << PitchGyro)) != 0)
		{
			if ((P2_scale & (1 << PitchScale)) != 0)
			{
				mixer_buffer[21 + (i * NEWSIZE)] = SCALE;
    2f22:	cf 5c       	subi	r28, 0xCF	; 207
    2f24:	de 4f       	sbci	r29, 0xFE	; 254
    2f26:	e8 81       	ld	r30, Y
    2f28:	f9 81       	ldd	r31, Y+1	; 0x01
    2f2a:	c1 53       	subi	r28, 0x31	; 49
    2f2c:	d1 40       	sbci	r29, 0x01	; 1
		{
			mixer_buffer[20 + (i * NEWSIZE)] = OFF;
		}

		// P2 pitch gyro
		if ((P2_sensors & (1 << PitchGyro)) != 0)
    2f2e:	21 ff       	sbrs	r18, 1
    2f30:	06 c0       	rjmp	.+12     	; 0x2f3e <Update_V1_0_to_V1_1+0x21c>
		{
			if ((P2_scale & (1 << PitchScale)) != 0)
    2f32:	21 fe       	sbrs	r2, 1
    2f34:	02 c0       	rjmp	.+4      	; 0x2f3a <Update_V1_0_to_V1_1+0x218>
			{
				mixer_buffer[21 + (i * NEWSIZE)] = SCALE;
    2f36:	50 82       	st	Z, r5
    2f38:	03 c0       	rjmp	.+6      	; 0x2f40 <Update_V1_0_to_V1_1+0x21e>
			}
			else
			{
				mixer_buffer[21 + (i * NEWSIZE)] = ON;
    2f3a:	40 82       	st	Z, r4
    2f3c:	01 c0       	rjmp	.+2      	; 0x2f40 <Update_V1_0_to_V1_1+0x21e>
			}
		}
		else
		{
			mixer_buffer[21 + (i * NEWSIZE)] = OFF;
    2f3e:	10 82       	st	Z, r1
		// P1 yaw_gyro
		if ((P1_sensors & (1 << YawGyro)) != 0)
		{
			if ((P1_scale & (1 << YawScale)) != 0)
			{
				mixer_buffer[22 + (i * NEWSIZE)] = SCALE;
    2f40:	f7 01       	movw	r30, r14
		{
			mixer_buffer[21 + (i * NEWSIZE)] = OFF;
		}

		// P1 yaw_gyro
		if ((P1_sensors & (1 << YawGyro)) != 0)
    2f42:	32 fe       	sbrs	r3, 2
    2f44:	06 c0       	rjmp	.+12     	; 0x2f52 <Update_V1_0_to_V1_1+0x230>
		{
			if ((P1_scale & (1 << YawScale)) != 0)
    2f46:	32 ff       	sbrs	r19, 2
    2f48:	02 c0       	rjmp	.+4      	; 0x2f4e <Update_V1_0_to_V1_1+0x22c>
			{
				mixer_buffer[22 + (i * NEWSIZE)] = SCALE;
    2f4a:	50 82       	st	Z, r5
    2f4c:	03 c0       	rjmp	.+6      	; 0x2f54 <Update_V1_0_to_V1_1+0x232>
			}
			else
			{
				mixer_buffer[22 + (i * NEWSIZE)] = ON;
    2f4e:	40 82       	st	Z, r4
    2f50:	01 c0       	rjmp	.+2      	; 0x2f54 <Update_V1_0_to_V1_1+0x232>
			}
		}
		else
		{
			mixer_buffer[22 + (i * NEWSIZE)] = OFF;
    2f52:	10 82       	st	Z, r1
		// P2 yaw gyro
		if ((P2_sensors & (1 << YawGyro)) != 0)
		{
			if ((P2_scale & (1 << YawScale)) != 0)
			{
				mixer_buffer[23 + (i * NEWSIZE)] = SCALE;
    2f54:	cb 5c       	subi	r28, 0xCB	; 203
    2f56:	de 4f       	sbci	r29, 0xFE	; 254
    2f58:	e8 81       	ld	r30, Y
    2f5a:	f9 81       	ldd	r31, Y+1	; 0x01
    2f5c:	c5 53       	subi	r28, 0x35	; 53
    2f5e:	d1 40       	sbci	r29, 0x01	; 1
		{
			mixer_buffer[22 + (i * NEWSIZE)] = OFF;
		}

		// P2 yaw gyro
		if ((P2_sensors & (1 << YawGyro)) != 0)
    2f60:	22 ff       	sbrs	r18, 2
    2f62:	06 c0       	rjmp	.+12     	; 0x2f70 <Update_V1_0_to_V1_1+0x24e>
		{
			if ((P2_scale & (1 << YawScale)) != 0)
    2f64:	22 fe       	sbrs	r2, 2
    2f66:	02 c0       	rjmp	.+4      	; 0x2f6c <Update_V1_0_to_V1_1+0x24a>
			{
				mixer_buffer[23 + (i * NEWSIZE)] = SCALE;
    2f68:	50 82       	st	Z, r5
    2f6a:	03 c0       	rjmp	.+6      	; 0x2f72 <Update_V1_0_to_V1_1+0x250>
			}
			else
			{
				mixer_buffer[23 + (i * NEWSIZE)] = ON;
    2f6c:	40 82       	st	Z, r4
    2f6e:	01 c0       	rjmp	.+2      	; 0x2f72 <Update_V1_0_to_V1_1+0x250>
			}
		}
		else
		{
			mixer_buffer[23 + (i * NEWSIZE)] = OFF;
    2f70:	10 82       	st	Z, r1
		// P1 roll acc
		if ((P1_sensors & (1 << RollAcc)) != 0)
		{
			if ((P1_scale & (1 << AccRollScale)) != 0)
			{
				mixer_buffer[24 + (i * NEWSIZE)] = SCALE;
    2f72:	c5 5c       	subi	r28, 0xC5	; 197
    2f74:	de 4f       	sbci	r29, 0xFE	; 254
    2f76:	e8 81       	ld	r30, Y
    2f78:	f9 81       	ldd	r31, Y+1	; 0x01
    2f7a:	cb 53       	subi	r28, 0x3B	; 59
    2f7c:	d1 40       	sbci	r29, 0x01	; 1
		{
			mixer_buffer[23 + (i * NEWSIZE)] = OFF;
		}

		// P1 roll acc
		if ((P1_sensors & (1 << RollAcc)) != 0)
    2f7e:	33 fe       	sbrs	r3, 3
    2f80:	06 c0       	rjmp	.+12     	; 0x2f8e <Update_V1_0_to_V1_1+0x26c>
		{
			if ((P1_scale & (1 << AccRollScale)) != 0)
    2f82:	33 ff       	sbrs	r19, 3
    2f84:	02 c0       	rjmp	.+4      	; 0x2f8a <Update_V1_0_to_V1_1+0x268>
			{
				mixer_buffer[24 + (i * NEWSIZE)] = SCALE;
    2f86:	50 82       	st	Z, r5
    2f88:	03 c0       	rjmp	.+6      	; 0x2f90 <Update_V1_0_to_V1_1+0x26e>
			}
			else
			{
				mixer_buffer[24 + (i * NEWSIZE)] = ON;
    2f8a:	40 82       	st	Z, r4
    2f8c:	01 c0       	rjmp	.+2      	; 0x2f90 <Update_V1_0_to_V1_1+0x26e>
			}
		}
		else
		{
			mixer_buffer[24 + (i * NEWSIZE)] = OFF;
    2f8e:	10 82       	st	Z, r1
		// P2 roll acc
		if ((P2_sensors & (1 << RollAcc)) != 0)
		{
			if ((P2_scale & (1 << AccRollScale)) != 0)
			{
				mixer_buffer[25 + (i * NEWSIZE)] = SCALE;
    2f90:	c9 5c       	subi	r28, 0xC9	; 201
    2f92:	de 4f       	sbci	r29, 0xFE	; 254
    2f94:	e8 81       	ld	r30, Y
    2f96:	f9 81       	ldd	r31, Y+1	; 0x01
    2f98:	c7 53       	subi	r28, 0x37	; 55
    2f9a:	d1 40       	sbci	r29, 0x01	; 1
		{
			mixer_buffer[24 + (i * NEWSIZE)] = OFF;
		}

		// P2 roll acc
		if ((P2_sensors & (1 << RollAcc)) != 0)
    2f9c:	23 ff       	sbrs	r18, 3
    2f9e:	06 c0       	rjmp	.+12     	; 0x2fac <Update_V1_0_to_V1_1+0x28a>
		{
			if ((P2_scale & (1 << AccRollScale)) != 0)
    2fa0:	23 fe       	sbrs	r2, 3
    2fa2:	02 c0       	rjmp	.+4      	; 0x2fa8 <Update_V1_0_to_V1_1+0x286>
			{
				mixer_buffer[25 + (i * NEWSIZE)] = SCALE;
    2fa4:	50 82       	st	Z, r5
    2fa6:	03 c0       	rjmp	.+6      	; 0x2fae <Update_V1_0_to_V1_1+0x28c>
			}
			else
			{
				mixer_buffer[25 + (i * NEWSIZE)] = ON;
    2fa8:	40 82       	st	Z, r4
    2faa:	01 c0       	rjmp	.+2      	; 0x2fae <Update_V1_0_to_V1_1+0x28c>
			}
		}
		else
		{
			mixer_buffer[25 + (i * NEWSIZE)] = OFF;
    2fac:	10 82       	st	Z, r1
		// P1 pitch acc
		if ((P1_sensors & (1 << PitchAcc)) != 0)
		{
			if ((P1_scale & (1 << AccPitchScale)) != 0)
			{
				mixer_buffer[26 + (i * NEWSIZE)] = SCALE;
    2fae:	c3 5c       	subi	r28, 0xC3	; 195
    2fb0:	de 4f       	sbci	r29, 0xFE	; 254
    2fb2:	e8 81       	ld	r30, Y
    2fb4:	f9 81       	ldd	r31, Y+1	; 0x01
    2fb6:	cd 53       	subi	r28, 0x3D	; 61
    2fb8:	d1 40       	sbci	r29, 0x01	; 1
		{
			mixer_buffer[25 + (i * NEWSIZE)] = OFF;
		}

		// P1 pitch acc
		if ((P1_sensors & (1 << PitchAcc)) != 0)
    2fba:	34 fe       	sbrs	r3, 4
    2fbc:	06 c0       	rjmp	.+12     	; 0x2fca <Update_V1_0_to_V1_1+0x2a8>
		{
			if ((P1_scale & (1 << AccPitchScale)) != 0)
    2fbe:	34 ff       	sbrs	r19, 4
    2fc0:	02 c0       	rjmp	.+4      	; 0x2fc6 <Update_V1_0_to_V1_1+0x2a4>
			{
				mixer_buffer[26 + (i * NEWSIZE)] = SCALE;
    2fc2:	50 82       	st	Z, r5
    2fc4:	03 c0       	rjmp	.+6      	; 0x2fcc <Update_V1_0_to_V1_1+0x2aa>
			}
			else
			{
				mixer_buffer[26 + (i * NEWSIZE)] = ON;
    2fc6:	40 82       	st	Z, r4
    2fc8:	01 c0       	rjmp	.+2      	; 0x2fcc <Update_V1_0_to_V1_1+0x2aa>
			}
		}
		else
		{
			mixer_buffer[26 + (i * NEWSIZE)] = OFF;
    2fca:	10 82       	st	Z, r1
		// P2 pitch acc
		if ((P2_sensors & (1 << PitchAcc)) != 0)
		{
			if ((P2_scale & (1 << AccPitchScale)) != 0)
			{
				mixer_buffer[27 + (i * NEWSIZE)] = SCALE;
    2fcc:	cd 5c       	subi	r28, 0xCD	; 205
    2fce:	de 4f       	sbci	r29, 0xFE	; 254
    2fd0:	e8 81       	ld	r30, Y
    2fd2:	f9 81       	ldd	r31, Y+1	; 0x01
    2fd4:	c3 53       	subi	r28, 0x33	; 51
    2fd6:	d1 40       	sbci	r29, 0x01	; 1
		{
			mixer_buffer[26 + (i * NEWSIZE)] = OFF;
		}

		// P2 pitch acc
		if ((P2_sensors & (1 << PitchAcc)) != 0)
    2fd8:	24 ff       	sbrs	r18, 4
    2fda:	06 c0       	rjmp	.+12     	; 0x2fe8 <Update_V1_0_to_V1_1+0x2c6>
		{
			if ((P2_scale & (1 << AccPitchScale)) != 0)
    2fdc:	24 fe       	sbrs	r2, 4
    2fde:	02 c0       	rjmp	.+4      	; 0x2fe4 <Update_V1_0_to_V1_1+0x2c2>
			{
				mixer_buffer[27 + (i * NEWSIZE)] = SCALE;
    2fe0:	50 82       	st	Z, r5
    2fe2:	03 c0       	rjmp	.+6      	; 0x2fea <Update_V1_0_to_V1_1+0x2c8>
			}
			else
			{
				mixer_buffer[27 + (i * NEWSIZE)] = ON;
    2fe4:	40 82       	st	Z, r4
    2fe6:	01 c0       	rjmp	.+2      	; 0x2fea <Update_V1_0_to_V1_1+0x2c8>
			}
		}
		else
		{
			mixer_buffer[27 + (i * NEWSIZE)] = OFF;
    2fe8:	10 82       	st	Z, r1
		// P1 Z delta acc
		if ((P1_sensors & (1 << ZDeltaAcc)) != 0)
		{
			if ((P1_scale & (1 << AccZScale)) != 0)
			{
				mixer_buffer[28 + (i * NEWSIZE)] = SCALE;
    2fea:	c7 5c       	subi	r28, 0xC7	; 199
    2fec:	de 4f       	sbci	r29, 0xFE	; 254
    2fee:	e8 81       	ld	r30, Y
    2ff0:	f9 81       	ldd	r31, Y+1	; 0x01
    2ff2:	c9 53       	subi	r28, 0x39	; 57
    2ff4:	d1 40       	sbci	r29, 0x01	; 1
		{
			mixer_buffer[27 + (i * NEWSIZE)] = OFF;
		}

		// P1 Z delta acc
		if ((P1_sensors & (1 << ZDeltaAcc)) != 0)
    2ff6:	35 fe       	sbrs	r3, 5
    2ff8:	06 c0       	rjmp	.+12     	; 0x3006 <Update_V1_0_to_V1_1+0x2e4>
		{
			if ((P1_scale & (1 << AccZScale)) != 0)
    2ffa:	35 ff       	sbrs	r19, 5
    2ffc:	02 c0       	rjmp	.+4      	; 0x3002 <Update_V1_0_to_V1_1+0x2e0>
			{
				mixer_buffer[28 + (i * NEWSIZE)] = SCALE;
    2ffe:	50 82       	st	Z, r5
    3000:	03 c0       	rjmp	.+6      	; 0x3008 <Update_V1_0_to_V1_1+0x2e6>
			}
			else
			{
				mixer_buffer[28 + (i * NEWSIZE)] = ON;
    3002:	40 82       	st	Z, r4
    3004:	01 c0       	rjmp	.+2      	; 0x3008 <Update_V1_0_to_V1_1+0x2e6>
			}
		}
		else
		{
			mixer_buffer[28 + (i * NEWSIZE)] = OFF;
    3006:	10 82       	st	Z, r1
		// P2 Z delta acc
		if ((P2_sensors & (1 << ZDeltaAcc)) != 0)
		{
			if ((P2_scale & (1 << AccZScale)) != 0)
			{
				mixer_buffer[29 + (i * NEWSIZE)] = SCALE;
    3008:	f8 01       	movw	r30, r16
		{
			mixer_buffer[28 + (i * NEWSIZE)] = OFF;
		}

		// P2 Z delta acc
		if ((P2_sensors & (1 << ZDeltaAcc)) != 0)
    300a:	25 ff       	sbrs	r18, 5
    300c:	06 c0       	rjmp	.+12     	; 0x301a <Update_V1_0_to_V1_1+0x2f8>
		{
			if ((P2_scale & (1 << AccZScale)) != 0)
    300e:	25 fe       	sbrs	r2, 5
    3010:	02 c0       	rjmp	.+4      	; 0x3016 <Update_V1_0_to_V1_1+0x2f4>
			{
				mixer_buffer[29 + (i * NEWSIZE)] = SCALE;
    3012:	50 82       	st	Z, r5
    3014:	03 c0       	rjmp	.+6      	; 0x301c <Update_V1_0_to_V1_1+0x2fa>
			}
			else
			{
				mixer_buffer[29 + (i * NEWSIZE)] = ON;
    3016:	40 82       	st	Z, r4
    3018:	01 c0       	rjmp	.+2      	; 0x301c <Update_V1_0_to_V1_1+0x2fa>
			}
		}
		else
		{
			mixer_buffer[29 + (i * NEWSIZE)] = OFF;
    301a:	10 82       	st	Z, r1
    301c:	c1 5c       	subi	r28, 0xC1	; 193
    301e:	de 4f       	sbci	r29, 0xFE	; 254
    3020:	88 81       	ld	r24, Y
    3022:	99 81       	ldd	r25, Y+1	; 0x01
    3024:	cf 53       	subi	r28, 0x3F	; 63
    3026:	d1 40       	sbci	r29, 0x01	; 1
    3028:	86 96       	adiw	r24, 0x26	; 38
    302a:	c1 5c       	subi	r28, 0xC1	; 193
    302c:	de 4f       	sbci	r29, 0xFE	; 254
    302e:	99 83       	std	Y+1, r25	; 0x01
    3030:	88 83       	st	Y, r24
    3032:	cf 53       	subi	r28, 0x3F	; 63
    3034:	d1 40       	sbci	r29, 0x01	; 1
    3036:	96 e2       	ldi	r25, 0x26	; 38
    3038:	89 0e       	add	r8, r25
    303a:	91 1c       	adc	r9, r1
    303c:	e6 e2       	ldi	r30, 0x26	; 38
    303e:	ae 0e       	add	r10, r30
    3040:	b1 1c       	adc	r11, r1
    3042:	f6 e2       	ldi	r31, 0x26	; 38
    3044:	cf 0e       	add	r12, r31
    3046:	d1 1c       	adc	r13, r1
    3048:	cf 5c       	subi	r28, 0xCF	; 207
    304a:	de 4f       	sbci	r29, 0xFE	; 254
    304c:	88 81       	ld	r24, Y
    304e:	99 81       	ldd	r25, Y+1	; 0x01
    3050:	c1 53       	subi	r28, 0x31	; 49
    3052:	d1 40       	sbci	r29, 0x01	; 1
    3054:	86 96       	adiw	r24, 0x26	; 38
    3056:	cf 5c       	subi	r28, 0xCF	; 207
    3058:	de 4f       	sbci	r29, 0xFE	; 254
    305a:	99 83       	std	Y+1, r25	; 0x01
    305c:	88 83       	st	Y, r24
    305e:	c1 53       	subi	r28, 0x31	; 49
    3060:	d1 40       	sbci	r29, 0x01	; 1
    3062:	0a 5d       	subi	r16, 0xDA	; 218
    3064:	1f 4f       	sbci	r17, 0xFF	; 255
    3066:	c7 5c       	subi	r28, 0xC7	; 199
    3068:	de 4f       	sbci	r29, 0xFE	; 254
    306a:	e8 81       	ld	r30, Y
    306c:	f9 81       	ldd	r31, Y+1	; 0x01
    306e:	c9 53       	subi	r28, 0x39	; 57
    3070:	d1 40       	sbci	r29, 0x01	; 1
    3072:	b6 96       	adiw	r30, 0x26	; 38
    3074:	c7 5c       	subi	r28, 0xC7	; 199
    3076:	de 4f       	sbci	r29, 0xFE	; 254
    3078:	f9 83       	std	Y+1, r31	; 0x01
    307a:	e8 83       	st	Y, r30
    307c:	c9 53       	subi	r28, 0x39	; 57
    307e:	d1 40       	sbci	r29, 0x01	; 1
    3080:	cd 5c       	subi	r28, 0xCD	; 205
    3082:	de 4f       	sbci	r29, 0xFE	; 254
    3084:	88 81       	ld	r24, Y
    3086:	99 81       	ldd	r25, Y+1	; 0x01
    3088:	c3 53       	subi	r28, 0x33	; 51
    308a:	d1 40       	sbci	r29, 0x01	; 1
    308c:	86 96       	adiw	r24, 0x26	; 38
    308e:	cd 5c       	subi	r28, 0xCD	; 205
    3090:	de 4f       	sbci	r29, 0xFE	; 254
    3092:	99 83       	std	Y+1, r25	; 0x01
    3094:	88 83       	st	Y, r24
    3096:	c3 53       	subi	r28, 0x33	; 51
    3098:	d1 40       	sbci	r29, 0x01	; 1
    309a:	c3 5c       	subi	r28, 0xC3	; 195
    309c:	de 4f       	sbci	r29, 0xFE	; 254
    309e:	e8 81       	ld	r30, Y
    30a0:	f9 81       	ldd	r31, Y+1	; 0x01
    30a2:	cd 53       	subi	r28, 0x3D	; 61
    30a4:	d1 40       	sbci	r29, 0x01	; 1
    30a6:	b6 96       	adiw	r30, 0x26	; 38
    30a8:	c3 5c       	subi	r28, 0xC3	; 195
    30aa:	de 4f       	sbci	r29, 0xFE	; 254
    30ac:	f9 83       	std	Y+1, r31	; 0x01
    30ae:	e8 83       	st	Y, r30
    30b0:	cd 53       	subi	r28, 0x3D	; 61
    30b2:	d1 40       	sbci	r29, 0x01	; 1
    30b4:	c9 5c       	subi	r28, 0xC9	; 201
    30b6:	de 4f       	sbci	r29, 0xFE	; 254
    30b8:	88 81       	ld	r24, Y
    30ba:	99 81       	ldd	r25, Y+1	; 0x01
    30bc:	c7 53       	subi	r28, 0x37	; 55
    30be:	d1 40       	sbci	r29, 0x01	; 1
    30c0:	86 96       	adiw	r24, 0x26	; 38
    30c2:	c9 5c       	subi	r28, 0xC9	; 201
    30c4:	de 4f       	sbci	r29, 0xFE	; 254
    30c6:	99 83       	std	Y+1, r25	; 0x01
    30c8:	88 83       	st	Y, r24
    30ca:	c7 53       	subi	r28, 0x37	; 55
    30cc:	d1 40       	sbci	r29, 0x01	; 1
    30ce:	c5 5c       	subi	r28, 0xC5	; 197
    30d0:	de 4f       	sbci	r29, 0xFE	; 254
    30d2:	e8 81       	ld	r30, Y
    30d4:	f9 81       	ldd	r31, Y+1	; 0x01
    30d6:	cb 53       	subi	r28, 0x3B	; 59
    30d8:	d1 40       	sbci	r29, 0x01	; 1
    30da:	b6 96       	adiw	r30, 0x26	; 38
    30dc:	c5 5c       	subi	r28, 0xC5	; 197
    30de:	de 4f       	sbci	r29, 0xFE	; 254
    30e0:	f9 83       	std	Y+1, r31	; 0x01
    30e2:	e8 83       	st	Y, r30
    30e4:	cb 53       	subi	r28, 0x3B	; 59
    30e6:	d1 40       	sbci	r29, 0x01	; 1
    30e8:	cb 5c       	subi	r28, 0xCB	; 203
    30ea:	de 4f       	sbci	r29, 0xFE	; 254
    30ec:	88 81       	ld	r24, Y
    30ee:	99 81       	ldd	r25, Y+1	; 0x01
    30f0:	c5 53       	subi	r28, 0x35	; 53
    30f2:	d1 40       	sbci	r29, 0x01	; 1
    30f4:	86 96       	adiw	r24, 0x26	; 38
    30f6:	cb 5c       	subi	r28, 0xCB	; 203
    30f8:	de 4f       	sbci	r29, 0xFE	; 254
    30fa:	99 83       	std	Y+1, r25	; 0x01
    30fc:	88 83       	st	Y, r24
    30fe:	c5 53       	subi	r28, 0x35	; 53
    3100:	d1 40       	sbci	r29, 0x01	; 1
    3102:	96 e2       	ldi	r25, 0x26	; 38
    3104:	e9 0e       	add	r14, r25
    3106:	f1 1c       	adc	r15, r1
    3108:	e6 e2       	ldi	r30, 0x26	; 38
    310a:	6e 0e       	add	r6, r30
    310c:	71 1c       	adc	r7, r1
		dst += (i * NEWSIZE);			// Step to next location for new data in the buffer
		memmove(dst, src, OLDSIZE);		// Move only the old (smaller) data
	}

	// Rearrange one output at a time	
	for (i = 0; i < MAX_OUTPUTS; i++)
    310e:	cf 5b       	subi	r28, 0xBF	; 191
    3110:	de 4f       	sbci	r29, 0xFE	; 254
    3112:	88 81       	ld	r24, Y
    3114:	99 81       	ldd	r25, Y+1	; 0x01
    3116:	c1 54       	subi	r28, 0x41	; 65
    3118:	d1 40       	sbci	r29, 0x01	; 1
    311a:	08 17       	cp	r16, r24
    311c:	19 07       	cpc	r17, r25
    311e:	09 f0       	breq	.+2      	; 0x3122 <Update_V1_0_to_V1_1+0x400>
    3120:	9a ce       	rjmp	.-716    	; 0x2e56 <Update_V1_0_to_V1_1+0x134>
	}
		
	// Copy buffer back into new structure
	src = (void*)mixer_buffer;
	dst = (void*)Config.Channel;
	memmove(dst, src, sizeof(mixer_buffer));
    3122:	80 e3       	ldi	r24, 0x30	; 48
    3124:	91 e0       	ldi	r25, 0x01	; 1
    3126:	fe 01       	movw	r30, r28
    3128:	31 96       	adiw	r30, 0x01	; 1
    312a:	a3 e4       	ldi	r26, 0x43	; 67
    312c:	b6 e0       	ldi	r27, 0x06	; 6
    312e:	01 90       	ld	r0, Z+
    3130:	0d 92       	st	X+, r0
    3132:	01 97       	sbiw	r24, 0x01	; 1
    3134:	e1 f7       	brne	.-8      	; 0x312e <Update_V1_0_to_V1_1+0x40c>
		
	// Set magic number to V1.1 signature
	Config.setup = MAGIC_NUMBER;
    3136:	86 e3       	ldi	r24, 0x36	; 54
    3138:	80 93 b1 05 	sts	0x05B1, r24
}
    313c:	cc 5b       	subi	r28, 0xBC	; 188
    313e:	de 4f       	sbci	r29, 0xFE	; 254
    3140:	0f b6       	in	r0, 0x3f	; 63
    3142:	f8 94       	cli
    3144:	de bf       	out	0x3e, r29	; 62
    3146:	0f be       	out	0x3f, r0	; 63
    3148:	cd bf       	out	0x3d, r28	; 61
    314a:	df 91       	pop	r29
    314c:	cf 91       	pop	r28
    314e:	1f 91       	pop	r17
    3150:	0f 91       	pop	r16
    3152:	ff 90       	pop	r15
    3154:	ef 90       	pop	r14
    3156:	df 90       	pop	r13
    3158:	cf 90       	pop	r12
    315a:	bf 90       	pop	r11
    315c:	af 90       	pop	r10
    315e:	9f 90       	pop	r9
    3160:	8f 90       	pop	r8
    3162:	7f 90       	pop	r7
    3164:	6f 90       	pop	r6
    3166:	5f 90       	pop	r5
    3168:	4f 90       	pop	r4
    316a:	3f 90       	pop	r3
    316c:	2f 90       	pop	r2
    316e:	08 95       	ret

00003170 <Set_EEPROM_Default_Config>:
	Config.setup = MAGIC_NUMBER;
}

// Force a factory reset
void Set_EEPROM_Default_Config(void)
{
    3170:	cf 93       	push	r28
    3172:	df 93       	push	r29
	uint8_t i;
	
	// Clear entire Config space first
	memset(&Config.setup,0,(sizeof(Config)));
    3174:	88 e0       	ldi	r24, 0x08	; 8
    3176:	92 e0       	ldi	r25, 0x02	; 2
    3178:	e1 eb       	ldi	r30, 0xB1	; 177
    317a:	f5 e0       	ldi	r31, 0x05	; 5
    317c:	df 01       	movw	r26, r30
    317e:	9c 01       	movw	r18, r24
    3180:	1d 92       	st	X+, r1
    3182:	21 50       	subi	r18, 0x01	; 1
    3184:	30 40       	sbci	r19, 0x00	; 0
    3186:	e1 f7       	brne	.-8      	; 0x3180 <Set_EEPROM_Default_Config+0x10>

	// Set magic number to current signature
	Config.setup = MAGIC_NUMBER;
    3188:	86 e3       	ldi	r24, 0x36	; 54
    318a:	80 93 b1 05 	sts	0x05B1, r24

	// Misc settings
	Config.RxMode = PWM;				// Default to PWM
    318e:	81 e0       	ldi	r24, 0x01	; 1
    3190:	80 93 da 05 	sts	0x05DA, r24
	Config.PWM_Sync = GEAR;
    3194:	84 e0       	ldi	r24, 0x04	; 4
    3196:	80 93 db 05 	sts	0x05DB, r24
	Config.Acc_LPF = 2;					// Acc LPF around 21Hz (5, 10, 21, 32, 44, 74, None)
    319a:	92 e0       	ldi	r25, 0x02	; 2
    319c:	90 93 3f 06 	sts	0x063F, r25
	Config.Gyro_LPF = 6;				// Gyro LPF off "None" (5, 10, 21, 32, 44, 74, None)
    31a0:	96 e0       	ldi	r25, 0x06	; 6
    31a2:	90 93 40 06 	sts	0x0640, r25
	Config.CF_factor = 7;
    31a6:	97 e0       	ldi	r25, 0x07	; 7
    31a8:	90 93 41 06 	sts	0x0641, r25
	Config.FlightChan = GEAR;			// Channel GEAR switches flight mode by default
    31ac:	80 93 dd 05 	sts	0x05DD, r24
	Config.Disarm_timer = 30;			// Default to 30 seconds
    31b0:	8e e1       	ldi	r24, 0x1E	; 30
    31b2:	80 93 3c 06 	sts	0x063C, r24
	Config.Transition_P1n = 50;			// Set P1.n point to 50%
    31b6:	82 e3       	ldi	r24, 0x32	; 50
    31b8:	80 93 e2 05 	sts	0x05E2, r24
    31bc:	ee ec       	ldi	r30, 0xCE	; 206
    31be:	f0 e0       	ldi	r31, 0x00	; 0
    31c0:	c2 eb       	ldi	r28, 0xB2	; 178
    31c2:	d5 e0       	ldi	r29, 0x05	; 5
    31c4:	ab e8       	ldi	r26, 0x8B	; 139
    31c6:	b7 e0       	ldi	r27, 0x07	; 7

	// Servo defaults
	for (i = 0; i < MAX_RC_CHANNELS; i++)
	{
		Config.ChannelOrder[i] = pgm_read_byte(&JR[i]);
		Config.RxChannelZeroOffset[i] = 3750;
    31c8:	86 ea       	ldi	r24, 0xA6	; 166
    31ca:	9e e0       	ldi	r25, 0x0E	; 14
	Config.Transition_P1n = 50;			// Set P1.n point to 50%

	// Servo defaults
	for (i = 0; i < MAX_RC_CHANNELS; i++)
	{
		Config.ChannelOrder[i] = pgm_read_byte(&JR[i]);
    31cc:	24 91       	lpm	r18, Z
    31ce:	29 93       	st	Y+, r18
		Config.RxChannelZeroOffset[i] = 3750;
    31d0:	8d 93       	st	X+, r24
    31d2:	9d 93       	st	X+, r25
    31d4:	31 96       	adiw	r30, 0x01	; 1
	Config.FlightChan = GEAR;			// Channel GEAR switches flight mode by default
	Config.Disarm_timer = 30;			// Default to 30 seconds
	Config.Transition_P1n = 50;			// Set P1.n point to 50%

	// Servo defaults
	for (i = 0; i < MAX_RC_CHANNELS; i++)
    31d6:	30 e0       	ldi	r19, 0x00	; 0
    31d8:	e6 3d       	cpi	r30, 0xD6	; 214
    31da:	f3 07       	cpc	r31, r19
    31dc:	b9 f7       	brne	.-18     	; 0x31cc <Set_EEPROM_Default_Config+0x5c>
		Config.ChannelOrder[i] = pgm_read_byte(&JR[i]);
		Config.RxChannelZeroOffset[i] = 3750;
	}
	
	// Monopolar throttle is a special case. Set to -100% or -1000
	Config.RxChannelZeroOffset[THROTTLE] = 2750;
    31de:	8e eb       	ldi	r24, 0xBE	; 190
    31e0:	9a e0       	ldi	r25, 0x0A	; 10
    31e2:	90 93 8c 07 	sts	0x078C, r25
    31e6:	80 93 8b 07 	sts	0x078B, r24
    31ea:	e7 e6       	ldi	r30, 0x67	; 103
    31ec:	f6 e0       	ldi	r31, 0x06	; 6
    31ee:	cb e7       	ldi	r28, 0x7B	; 123
    31f0:	d7 e0       	ldi	r29, 0x07	; 7
    31f2:	63 e8       	ldi	r22, 0x83	; 131
    31f4:	77 e0       	ldi	r23, 0x07	; 7

	// Preset mixers to safe values
	for (i = 0; i < MAX_OUTPUTS; i++)
	{
		Config.Channel[i].P1n_position	= 50;
    31f6:	52 e3       	ldi	r21, 0x32	; 50
		Config.Channel[i].P1_source_a 	= NOMIX;
    31f8:	2f e0       	ldi	r18, 0x0F	; 15
		Config.Channel[i].P1_source_b 	= NOMIX;
		Config.Channel[i].P2_source_a 	= NOMIX;
		Config.Channel[i].P2_source_b 	= NOMIX;
		Config.min_travel[i] = -100;
    31fa:	4c e9       	ldi	r20, 0x9C	; 156
		Config.max_travel[i] = 100;
    31fc:	34 e6       	ldi	r19, 0x64	; 100
    31fe:	cf 01       	movw	r24, r30
    3200:	4e 97       	sbiw	r24, 0x1e	; 30
	Config.RxChannelZeroOffset[THROTTLE] = 2750;

	// Preset mixers to safe values
	for (i = 0; i < MAX_OUTPUTS; i++)
	{
		Config.Channel[i].P1n_position	= 50;
    3202:	dc 01       	movw	r26, r24
    3204:	5c 93       	st	X, r21
    3206:	48 96       	adiw	r24, 0x18	; 24
		Config.Channel[i].P1_source_a 	= NOMIX;
    3208:	dc 01       	movw	r26, r24
    320a:	2c 93       	st	X, r18
    320c:	04 96       	adiw	r24, 0x04	; 4
		Config.Channel[i].P1_source_b 	= NOMIX;
    320e:	dc 01       	movw	r26, r24
    3210:	2c 93       	st	X, r18
    3212:	02 97       	sbiw	r24, 0x02	; 2
		Config.Channel[i].P2_source_a 	= NOMIX;
    3214:	dc 01       	movw	r26, r24
    3216:	2c 93       	st	X, r18
		Config.Channel[i].P2_source_b 	= NOMIX;
    3218:	20 83       	st	Z, r18
		Config.min_travel[i] = -100;
    321a:	49 93       	st	Y+, r20
		Config.max_travel[i] = 100;
    321c:	84 e6       	ldi	r24, 0x64	; 100
    321e:	db 01       	movw	r26, r22
    3220:	3d 93       	st	X+, r19
    3222:	bd 01       	movw	r22, r26
    3224:	b6 96       	adiw	r30, 0x26	; 38
	
	// Monopolar throttle is a special case. Set to -100% or -1000
	Config.RxChannelZeroOffset[THROTTLE] = 2750;

	// Preset mixers to safe values
	for (i = 0; i < MAX_OUTPUTS; i++)
    3226:	b7 e0       	ldi	r27, 0x07	; 7
    3228:	e7 39       	cpi	r30, 0x97	; 151
    322a:	fb 07       	cpc	r31, r27
    322c:	41 f7       	brne	.-48     	; 0x31fe <Set_EEPROM_Default_Config+0x8e>
		Config.min_travel[i] = -100;
		Config.max_travel[i] = 100;
	}

	// Preset simple mixing for primary channels - all models
	Config.Channel[OUT1].P1_throttle_volume = 100;
    322e:	80 93 4c 06 	sts	0x064C, r24
	Config.Channel[OUT2].P1_aileron_volume = 100;
    3232:	80 93 75 06 	sts	0x0675, r24
	Config.Channel[OUT3].P1_elevator_volume = 100;
    3236:	80 93 9d 06 	sts	0x069D, r24
	Config.Channel[OUT4].P1_rudder_volume = 100;
    323a:	80 93 c5 06 	sts	0x06C5, r24
	
	// Set up profile 1
	Config.FlightMode[P1].Roll_P_mult = 60;			// PID defaults
    323e:	2c e3       	ldi	r18, 0x3C	; 60
    3240:	20 93 e3 05 	sts	0x05E3, r18
	Config.FlightMode[P1].A_Roll_P_mult = 5;
    3244:	95 e0       	ldi	r25, 0x05	; 5
    3246:	90 93 e7 05 	sts	0x05E7, r25
	Config.FlightMode[P1].Pitch_P_mult = 60;
    324a:	20 93 e9 05 	sts	0x05E9, r18
	Config.FlightMode[P1].A_Pitch_P_mult = 5;
    324e:	90 93 ed 05 	sts	0x05ED, r25
	Config.FlightMode[P1].Yaw_P_mult = 80;
    3252:	90 e5       	ldi	r25, 0x50	; 80
    3254:	90 93 ef 05 	sts	0x05EF, r25
	Config.FlightMode[P1].Roll_I_mult = 40;
    3258:	28 e2       	ldi	r18, 0x28	; 40
    325a:	20 93 e4 05 	sts	0x05E4, r18
	Config.FlightMode[P1].Roll_limit = 10;
    325e:	9a e0       	ldi	r25, 0x0A	; 10
    3260:	90 93 e5 05 	sts	0x05E5, r25
	Config.FlightMode[P1].Pitch_I_mult = 40;
    3264:	20 93 ea 05 	sts	0x05EA, r18
	Config.FlightMode[P1].Pitch_limit = 10;
    3268:	90 93 eb 05 	sts	0x05EB, r25
	Config.FlightMode[P1].Roll_Rate = 2;
    326c:	92 e0       	ldi	r25, 0x02	; 2
    326e:	90 93 e6 05 	sts	0x05E6, r25
	Config.FlightMode[P1].Pitch_Rate = 2;
    3272:	90 93 ec 05 	sts	0x05EC, r25
	Config.FlightMode[P1].Yaw_Rate = 1;
    3276:	21 e0       	ldi	r18, 0x01	; 1
    3278:	20 93 f2 05 	sts	0x05F2, r18

	// Set up profile 2
	Config.FlightMode[P2].Roll_Rate = 2;
    327c:	90 93 f8 05 	sts	0x05F8, r25
	Config.FlightMode[P2].Pitch_Rate = 2;
    3280:	90 93 fe 05 	sts	0x05FE, r25
	Config.FlightMode[P2].Yaw_Rate = 1;
    3284:	20 93 04 06 	sts	0x0604, r18
	
	// Preset stick volumes
	Config.Channel[OUT1].P2_throttle_volume = 100;
    3288:	80 93 4d 06 	sts	0x064D, r24
	Config.Channel[OUT2].P2_aileron_volume = 100;
    328c:	80 93 76 06 	sts	0x0676, r24
	Config.Channel[OUT3].P2_elevator_volume = 100;
    3290:	80 93 9e 06 	sts	0x069E, r24
	Config.Channel[OUT4].P2_rudder_volume = 100;
    3294:	80 93 c6 06 	sts	0x06C6, r24

	// Preset basic axis gyros in P2
	Config.Channel[OUT2].P2_Roll_gyro = ON;
    3298:	20 93 7c 06 	sts	0x067C, r18
	Config.Channel[OUT3].P2_Pitch_gyro = ON;
    329c:	20 93 a4 06 	sts	0x06A4, r18
	Config.Channel[OUT4].P2_Yaw_gyro = ON;
    32a0:	20 93 cc 06 	sts	0x06CC, r18
	Config.Channel[OUT4].P1_Yaw_gyro = ON;
	Config.Channel[OUT4].P2_Yaw_gyro = ON;
#endif
	
	// Set default sensor LPF
	Config.MPU6050_LPF = 2;				// 6 - 2 = 4. MPU6050's internal LPF. Values are 0x06 = 5Hz, (5)10Hz, (4)21Hz*, (3)44Hz, (2)94Hz, (1)184Hz LPF, (0)260Hz
    32a4:	90 93 42 06 	sts	0x0642, r25

	// Preset AccZeroNormZ
	Config.AccZeroNormZ		= 128;
    32a8:	80 e8       	ldi	r24, 0x80	; 128
    32aa:	90 e0       	ldi	r25, 0x00	; 0
    32ac:	90 93 a2 07 	sts	0x07A2, r25
    32b0:	80 93 a1 07 	sts	0x07A1, r24

	#ifdef KK2Mini
	Config.Contrast = 30;				// Contrast (KK2 Mini)
	#else
	Config.Contrast = 36;				// Contrast (Everything else)
    32b4:	84 e2       	ldi	r24, 0x24	; 36
    32b6:	80 93 3a 06 	sts	0x063A, r24
	#endif
}
    32ba:	df 91       	pop	r29
    32bc:	cf 91       	pop	r28
    32be:	08 95       	ret

000032c0 <Initial_EEPROM_Config_Load>:
		eeprom_write_byte(addr, value);
	}
}

bool Initial_EEPROM_Config_Load(void)
{
    32c0:	cf 93       	push	r28
    32c2:	df 93       	push	r29
    32c4:	1f 92       	push	r1
    32c6:	cd b7       	in	r28, 0x3d	; 61
    32c8:	de b7       	in	r29, 0x3e	; 62
	bool	updated = false;
	
	// Read eeProm data into RAM
	// void eeprom_read_block (void *pointer_ram, const void *pointer_eeprom, size_t n)
	eeprom_read_block((void*)&Config, (const void*)EEPROM_DATA_START_POS, sizeof(CONFIG_STRUCT));
    32ca:	48 e0       	ldi	r20, 0x08	; 8
    32cc:	52 e0       	ldi	r21, 0x02	; 2
    32ce:	60 e0       	ldi	r22, 0x00	; 0
    32d0:	70 e0       	ldi	r23, 0x00	; 0
    32d2:	81 eb       	ldi	r24, 0xB1	; 177
    32d4:	95 e0       	ldi	r25, 0x05	; 5
    32d6:	0e 94 38 48 	call	0x9070	; 0x9070 <__eerd_block_m644pa>
	
	// See if we know what to do with the current eeprom data
	// Config.setup holds the magic number from the current EEPROM
	switch(Config.setup)
    32da:	80 91 b1 05 	lds	r24, 0x05B1
    32de:	85 33       	cpi	r24, 0x35	; 53
    32e0:	29 f0       	breq	.+10     	; 0x32ec <Initial_EEPROM_Config_Load+0x2c>
    32e2:	86 33       	cpi	r24, 0x36	; 54
    32e4:	39 f0       	breq	.+14     	; 0x32f4 <Initial_EEPROM_Config_Load+0x34>
*/
			break;

		default:							// Unknown solution - restore to factory defaults
			// Load factory defaults
			Set_EEPROM_Default_Config();
    32e6:	0e 94 b8 18 	call	0x3170	; 0x3170 <Set_EEPROM_Default_Config>
    32ea:	04 c0       	rjmp	.+8      	; 0x32f4 <Initial_EEPROM_Config_Load+0x34>
	// See if we know what to do with the current eeprom data
	// Config.setup holds the magic number from the current EEPROM
	switch(Config.setup)
	{
		case V1_0_SIGNATURE:				// V1.0 detected
			Update_V1_0_to_V1_1();
    32ec:	0e 94 91 16 	call	0x2d22	; 0x2d22 <Update_V1_0_to_V1_1>
			updated = true;
    32f0:	81 e0       	ldi	r24, 0x01	; 1
    32f2:	01 c0       	rjmp	.+2      	; 0x32f6 <Initial_EEPROM_Config_Load+0x36>
	}
}

bool Initial_EEPROM_Config_Load(void)
{
	bool	updated = false;
    32f4:	80 e0       	ldi	r24, 0x00	; 0
			Set_EEPROM_Default_Config();
			break;
	}
	
	// Save back to eeprom	
	Save_Config_to_EEPROM();
    32f6:	89 83       	std	Y+1, r24	; 0x01
    32f8:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <Save_Config_to_EEPROM>
	
	// Return info regarding eeprom structure changes 
	return updated;
}
    32fc:	89 81       	ldd	r24, Y+1	; 0x01
    32fe:	0f 90       	pop	r0
    3300:	df 91       	pop	r29
    3302:	cf 91       	pop	r28
    3304:	08 95       	ret

00003306 <main>:
//************************************************************
//* Main loop
//************************************************************

int main(void)
{
    3306:	cf 93       	push	r28
    3308:	df 93       	push	r29
    330a:	cd b7       	in	r28, 0x3d	; 61
    330c:	de b7       	in	r29, 0x3e	; 62
    330e:	a3 97       	sbiw	r28, 0x23	; 35
    3310:	0f b6       	in	r0, 0x3f	; 63
    3312:	f8 94       	cli
    3314:	de bf       	out	0x3e, r29	; 62
    3316:	0f be       	out	0x3f, r0	; 63
    3318:	cd bf       	out	0x3d, r28	; 61
	uint16_t RC_Interrupts = 0;
	uint8_t	old_alarms = 0;
	uint8_t ServoFlag = 0;
	uint8_t i = 0;
	
	init();							// Do all init tasks
    331a:	0e 94 46 28 	call	0x508c	; 0x508c <init>
	int8_t	old_flight = 3;			// Old flight profile
	int8_t	old_trans_mode = 0;		// Old transition mode
	int16_t temp1 = 0;
	uint16_t transition_time = 0;
	uint16_t RC_Interrupts = 0;
	uint8_t	old_alarms = 0;
    331e:	18 a2       	std	Y+32, r1	; 0x20
	uint8_t Menu_mode = STATUS_TIMEOUT;
	int8_t	old_flight = 3;			// Old flight profile
	int8_t	old_trans_mode = 0;		// Old transition mode
	int16_t temp1 = 0;
	uint16_t transition_time = 0;
	uint16_t RC_Interrupts = 0;
    3320:	1d 8a       	std	Y+21, r1	; 0x15
    3322:	1c 8a       	std	Y+20, r1	; 0x14
	uint16_t InterruptCounter = 0;
	uint8_t	Disarm_seconds = 0;
	uint8_t Status_seconds = 0;
	uint8_t Menu_mode = STATUS_TIMEOUT;
	int8_t	old_flight = 3;			// Old flight profile
	int8_t	old_trans_mode = 0;		// Old transition mode
    3324:	1f 8e       	std	Y+31, r1	; 0x1f
	// Locals
	uint16_t InterruptCounter = 0;
	uint8_t	Disarm_seconds = 0;
	uint8_t Status_seconds = 0;
	uint8_t Menu_mode = STATUS_TIMEOUT;
	int8_t	old_flight = 3;			// Old flight profile
    3326:	53 e0       	ldi	r21, 0x03	; 3
    3328:	75 2e       	mov	r7, r21

	// Locals
	uint16_t InterruptCounter = 0;
	uint8_t	Disarm_seconds = 0;
	uint8_t Status_seconds = 0;
	uint8_t Menu_mode = STATUS_TIMEOUT;
    332a:	16 e0       	ldi	r17, 0x06	; 6
	uint8_t ServoRate_TCNT2 = 0;

	// Locals
	uint16_t InterruptCounter = 0;
	uint8_t	Disarm_seconds = 0;
	uint8_t Status_seconds = 0;
    332c:	1b 82       	std	Y+3, r1	; 0x03
	uint8_t Servo_TCNT2 = 0;
	uint8_t ServoRate_TCNT2 = 0;

	// Locals
	uint16_t InterruptCounter = 0;
	uint8_t	Disarm_seconds = 0;
    332e:	61 2c       	mov	r6, r1
	uint8_t Ticker_TCNT2 = 0;
	uint8_t Servo_TCNT2 = 0;
	uint8_t ServoRate_TCNT2 = 0;

	// Locals
	uint16_t InterruptCounter = 0;
    3330:	1d 86       	std	Y+13, r1	; 0x0d
    3332:	1c 86       	std	Y+12, r1	; 0x0c
	uint8_t Refresh_TCNT2 = 0;
	uint8_t Disarm_TCNT2 = 0;
	uint8_t Arm_TCNT2 = 0;
	uint8_t Ticker_TCNT2 = 0;
	uint8_t Servo_TCNT2 = 0;
	uint8_t ServoRate_TCNT2 = 0;
    3334:	1e 8e       	std	Y+30, r1	; 0x1e
	uint8_t Status_TCNT2 = 0;
	uint8_t Refresh_TCNT2 = 0;
	uint8_t Disarm_TCNT2 = 0;
	uint8_t Arm_TCNT2 = 0;
	uint8_t Ticker_TCNT2 = 0;
	uint8_t Servo_TCNT2 = 0;
    3336:	1d 8e       	std	Y+29, r1	; 0x1d
	uint8_t Transition_TCNT2 = 0;
	uint8_t Status_TCNT2 = 0;
	uint8_t Refresh_TCNT2 = 0;
	uint8_t Disarm_TCNT2 = 0;
	uint8_t Arm_TCNT2 = 0;
	uint8_t Ticker_TCNT2 = 0;
    3338:	1c 8e       	std	Y+28, r1	; 0x1c
	uint16_t RC_Rate_TCNT1 = 0;
	uint8_t Transition_TCNT2 = 0;
	uint8_t Status_TCNT2 = 0;
	uint8_t Refresh_TCNT2 = 0;
	uint8_t Disarm_TCNT2 = 0;
	uint8_t Arm_TCNT2 = 0;
    333a:	1b 8e       	std	Y+27, r1	; 0x1b
	// Timer incrementers
	uint16_t RC_Rate_TCNT1 = 0;
	uint8_t Transition_TCNT2 = 0;
	uint8_t Status_TCNT2 = 0;
	uint8_t Refresh_TCNT2 = 0;
	uint8_t Disarm_TCNT2 = 0;
    333c:	1a 8e       	std	Y+26, r1	; 0x1a

	// Timer incrementers
	uint16_t RC_Rate_TCNT1 = 0;
	uint8_t Transition_TCNT2 = 0;
	uint8_t Status_TCNT2 = 0;
	uint8_t Refresh_TCNT2 = 0;
    333e:	19 8e       	std	Y+25, r1	; 0x19
	uint16_t ticker_16 = 0;

	// Timer incrementers
	uint16_t RC_Rate_TCNT1 = 0;
	uint8_t Transition_TCNT2 = 0;
	uint8_t Status_TCNT2 = 0;
    3340:	18 8e       	std	Y+24, r1	; 0x18
	uint16_t Save_TCNT1 = 0;
	uint16_t ticker_16 = 0;

	// Timer incrementers
	uint16_t RC_Rate_TCNT1 = 0;
	uint8_t Transition_TCNT2 = 0;
    3342:	1f 8a       	std	Y+23, r1	; 0x17
	uint16_t Disarm_timer = 0;
	uint16_t Save_TCNT1 = 0;
	uint16_t ticker_16 = 0;

	// Timer incrementers
	uint16_t RC_Rate_TCNT1 = 0;
    3344:	1b 86       	std	Y+11, r1	; 0x0b
    3346:	1a 86       	std	Y+10, r1	; 0x0a
	uint16_t UpdateStatus_timer = 0;
	uint16_t Ticker_Count = 0;
	uint16_t RC_Timeout = 0;
	uint16_t Servo_Rate = 0;
	uint16_t Transition_timeout = 0;
	uint16_t Disarm_timer = 0;
    3348:	21 2c       	mov	r2, r1
    334a:	31 2c       	mov	r3, r1
	uint16_t Status_timeout = 0;
	uint16_t UpdateStatus_timer = 0;
	uint16_t Ticker_Count = 0;
	uint16_t RC_Timeout = 0;
	uint16_t Servo_Rate = 0;
	uint16_t Transition_timeout = 0;
    334c:	41 2c       	mov	r4, r1
    334e:	51 2c       	mov	r5, r1
	// 16-bit timers
	uint16_t Status_timeout = 0;
	uint16_t UpdateStatus_timer = 0;
	uint16_t Ticker_Count = 0;
	uint16_t RC_Timeout = 0;
	uint16_t Servo_Rate = 0;
    3350:	19 86       	std	Y+9, r1	; 0x09
    3352:	18 86       	std	Y+8, r1	; 0x08

	// 16-bit timers
	uint16_t Status_timeout = 0;
	uint16_t UpdateStatus_timer = 0;
	uint16_t Ticker_Count = 0;
	uint16_t RC_Timeout = 0;
    3354:	1b a2       	std	Y+35, r1	; 0x23
    3356:	1a a2       	std	Y+34, r1	; 0x22
//	uint32_t RC_Master_Timer = 0;

	// 16-bit timers
	uint16_t Status_timeout = 0;
	uint16_t UpdateStatus_timer = 0;
	uint16_t Ticker_Count = 0;
    3358:	1b 8a       	std	Y+19, r1	; 0x13
    335a:	1a 8a       	std	Y+18, r1	; 0x12
	uint32_t RC_Rate_Timer = 0;
//	uint32_t RC_Master_Timer = 0;

	// 16-bit timers
	uint16_t Status_timeout = 0;
	uint16_t UpdateStatus_timer = 0;
    335c:	1f 82       	std	Y+7, r1	; 0x07
    335e:	1e 82       	std	Y+6, r1	; 0x06
	uint32_t Arm_timer = 0;
	uint32_t RC_Rate_Timer = 0;
//	uint32_t RC_Master_Timer = 0;

	// 16-bit timers
	uint16_t Status_timeout = 0;
    3360:	1d 82       	std	Y+5, r1	; 0x05
    3362:	1c 82       	std	Y+4, r1	; 0x04
	bool ServoTick = false;
	bool PWM_Last_Call = false;

	// 32-bit timers
	uint32_t Arm_timer = 0;
	uint32_t RC_Rate_Timer = 0;
    3364:	81 2c       	mov	r8, r1
    3366:	91 2c       	mov	r9, r1
    3368:	54 01       	movw	r10, r8
	bool RCInterruptsON = false;
	bool ServoTick = false;
	bool PWM_Last_Call = false;

	// 32-bit timers
	uint32_t Arm_timer = 0;
    336a:	c1 2c       	mov	r12, r1
    336c:	d1 2c       	mov	r13, r1
    336e:	76 01       	movw	r14, r12
	bool TransitionUpdated = false;
	bool RCrateMeasured = false;
	bool PWMBlocked = false;
	bool RCInterruptsON = false;
	bool ServoTick = false;
	bool PWM_Last_Call = false;
    3370:	19 8a       	std	Y+17, r1	; 0x11
	// Flags
	bool TransitionUpdated = false;
	bool RCrateMeasured = false;
	bool PWMBlocked = false;
	bool RCInterruptsON = false;
	bool ServoTick = false;
    3372:	1a 82       	std	Y+2, r1	; 0x02
{
	// Flags
	bool TransitionUpdated = false;
	bool RCrateMeasured = false;
	bool PWMBlocked = false;
	bool RCInterruptsON = false;
    3374:	18 8a       	std	Y+16, r1	; 0x10
int main(void)
{
	// Flags
	bool TransitionUpdated = false;
	bool RCrateMeasured = false;
	bool PWMBlocked = false;
    3376:	19 82       	std	Y+1, r1	; 0x01

int main(void)
{
	// Flags
	bool TransitionUpdated = false;
	bool RCrateMeasured = false;
    3378:	00 e0       	ldi	r16, 0x00	; 0

	// Main loop
	while (1)
	{
		// Increment the loop counter
		LoopCount++;
    337a:	80 91 18 05 	lds	r24, 0x0518
    337e:	8f 5f       	subi	r24, 0xFF	; 255
    3380:	80 93 18 05 	sts	0x0518, r24
		//************************************************************
		//* Check for interruption of PWM generation
		//* The "JitterFlag" flag was reset just before PWM generation
		//************************************************************

		if (JitterFlag == true)
    3384:	80 91 e5 07 	lds	r24, 0x07E5
    3388:	88 23       	and	r24, r24
    338a:	31 f0       	breq	.+12     	; 0x3398 <main+0x92>
		{
			InterruptCounter++;
    338c:	2c 85       	ldd	r18, Y+12	; 0x0c
    338e:	3d 85       	ldd	r19, Y+13	; 0x0d
    3390:	2f 5f       	subi	r18, 0xFF	; 255
    3392:	3f 4f       	sbci	r19, 0xFF	; 255
    3394:	3d 87       	std	Y+13, r19	; 0x0d
    3396:	2c 87       	std	Y+12, r18	; 0x0c

		//************************************************************
		//* State machine for switching between screens safely
		//************************************************************

		switch(Menu_mode) 
    3398:	14 30       	cpi	r17, 0x04	; 4
    339a:	d9 f1       	breq	.+118    	; 0x3412 <main+0x10c>
    339c:	88 f4       	brcc	.+34     	; 0x33c0 <main+0xba>
    339e:	11 23       	and	r17, r17
    33a0:	11 f1       	breq	.+68     	; 0x33e6 <main+0xe0>
    33a2:	13 30       	cpi	r17, 0x03	; 3
    33a4:	09 f0       	breq	.+2      	; 0x33a8 <main+0xa2>
    33a6:	55 c0       	rjmp	.+170    	; 0x3452 <main+0x14c>
			case STATUS:
				// Reset the status screen period
				UpdateStatus_timer = 0;

				// Update status screen
				Display_status();
    33a8:	0e 94 71 13 	call	0x26e2	; 0x26e2 <Display_status>
				
				// Force code to wait for a new packet
				Interrupted = false;
    33ac:	10 92 ca 07 	sts	0x07CA, r1

				// Debug
				PWMBlocked = true;	
				init_int();
    33b0:	0e 94 43 2d 	call	0x5a86	; 0x5a86 <init_int>

				// Wait for timeout
				Menu_mode = WAITING_TIMEOUT_BD;
    33b4:	15 e0       	ldi	r17, 0x05	; 5
				break;

			// Status screen first display
			case STATUS:
				// Reset the status screen period
				UpdateStatus_timer = 0;
    33b6:	1f 82       	std	Y+7, r1	; 0x07
    33b8:	1e 82       	std	Y+6, r1	; 0x06
				
				// Force code to wait for a new packet
				Interrupted = false;

				// Debug
				PWMBlocked = true;	
    33ba:	31 e0       	ldi	r19, 0x01	; 1
    33bc:	39 83       	std	Y+1, r19	; 0x01
				init_int();

				// Wait for timeout
				Menu_mode = WAITING_TIMEOUT_BD;
				break;
    33be:	49 c0       	rjmp	.+146    	; 0x3452 <main+0x14c>

		//************************************************************
		//* State machine for switching between screens safely
		//************************************************************

		switch(Menu_mode) 
    33c0:	16 30       	cpi	r17, 0x06	; 6
    33c2:	e1 f1       	breq	.+120    	; 0x343c <main+0x136>
    33c4:	10 f1       	brcs	.+68     	; 0x340a <main+0x104>
    33c6:	17 30       	cpi	r17, 0x07	; 7
    33c8:	09 f0       	breq	.+2      	; 0x33cc <main+0xc6>
    33ca:	43 c0       	rjmp	.+134    	; 0x3452 <main+0x14c>

				break;

			// In MENU mode, 
			case MENU:
				LVA = 0;	// Make sure buzzer is off :)
    33cc:	29 98       	cbi	0x05, 1	; 5
				// Disarm the FC
				General_error |= (1 << DISARMED);
    33ce:	80 91 20 05 	lds	r24, 0x0520
    33d2:	84 60       	ori	r24, 0x04	; 4
    33d4:	80 93 20 05 	sts	0x0520, r24
				// Start the menu system
				menu_main();
    33d8:	0e 94 2e 32 	call	0x645c	; 0x645c <menu_main>
				// Switch back to status screen when leaving menu
				Menu_mode = STATUS;
				// Reset timeout once back in status screen
				Status_seconds = 0;
				// Reset IMU on return from menu
				reset_IMU();
    33dc:	0e 94 fd 27 	call	0x4ffa	; 0x4ffa <reset_IMU>
				
				// Force code to wait for a new packet
				Interrupted = false;
    33e0:	10 92 ca 07 	sts	0x07CA, r1
    33e4:	32 c0       	rjmp	.+100    	; 0x344a <main+0x144>
		switch(Menu_mode) 
		{
			// In IDLE mode, the text "Press for status" is displayed ONCE.
			// If a button is pressed the mode changes to STATUS
			case IDLE:
				if((PINB & 0xf0) != 0xf0)
    33e6:	83 b1       	in	r24, 0x03	; 3
    33e8:	80 7f       	andi	r24, 0xF0	; 240
    33ea:	80 3f       	cpi	r24, 0xF0	; 240
    33ec:	49 f0       	breq	.+18     	; 0x3400 <main+0xfa>
				{
					Menu_mode = STATUS;
					// Reset the status screen timeout
					Status_seconds = 0;
					menu_beep(1);
    33ee:	81 e0       	ldi	r24, 0x01	; 1
    33f0:	0e 94 c7 2f 	call	0x5f8e	; 0x5f8e <menu_beep>
					
					// When not in idle mode, enable Timer0 interrupts as loop rate 
					// is slow and we need TMR0 to fully measure it.
					TIMSK0 |= (1 << TOIE0);	
    33f4:	80 91 6e 00 	lds	r24, 0x006E
    33f8:	81 60       	ori	r24, 0x01	; 1
    33fa:	80 93 6e 00 	sts	0x006E, r24
    33fe:	25 c0       	rjmp	.+74     	; 0x344a <main+0x144>
				}
				// Idle mode - fast loop rate so don't need TMR0.
				// We don't want TMR0 to interrupt PWM generation.
				else
				{
					TIMSK0 = 0; 		// Disable Timer0 interrupts
    3400:	10 92 6e 00 	sts	0x006E, r1
					TIFR0 = 1;			// Clear interrupt flag
    3404:	81 e0       	ldi	r24, 0x01	; 1
    3406:	85 bb       	out	0x15, r24	; 21
    3408:	24 c0       	rjmp	.+72     	; 0x3452 <main+0x14c>

			// Status screen up, but button still down ;)
			// This is designed to stop the menu appearing instead of the status screen
			// as it will stay here until the button is released
			case WAITING_TIMEOUT_BD:
				if(BUTTON1 == 0)
    340a:	1f 9b       	sbis	0x03, 7	; 3
    340c:	22 c0       	rjmp	.+68     	; 0x3452 <main+0x14c>
				{
					Menu_mode = WAITING_TIMEOUT_BD;
				}
				else
				{
					Menu_mode = WAITING_TIMEOUT;
    340e:	14 e0       	ldi	r17, 0x04	; 4
    3410:	20 c0       	rjmp	.+64     	; 0x3452 <main+0x14c>
												
			// Status screen up, waiting for timeout or action
			// but button is back up
			case WAITING_TIMEOUT:
				// In status screen, change back to idle after timing out
				if (Status_seconds >= 2)
    3412:	4b 81       	ldd	r20, Y+3	; 0x03
    3414:	42 30       	cpi	r20, 0x02	; 2
    3416:	e0 f4       	brcc	.+56     	; 0x3450 <main+0x14a>
				{
					Menu_mode = STATUS_TIMEOUT;
				}

				// Jump to menu if button pressed
				else if(BUTTON1 == 0)
    3418:	1f 99       	sbic	0x03, 7	; 3
    341a:	07 c0       	rjmp	.+14     	; 0x342a <main+0x124>
				{
					Menu_mode = MENU;
					menu_beep(1);
    341c:	81 e0       	ldi	r24, 0x01	; 1
    341e:	0e 94 c7 2f 	call	0x5f8e	; 0x5f8e <menu_beep>
					
					// Force code to wait for a new packet
					Interrupted = false;
    3422:	10 92 ca 07 	sts	0x07CA, r1
				}

				// Jump to menu if button pressed
				else if(BUTTON1 == 0)
				{
					Menu_mode = MENU;
    3426:	17 e0       	ldi	r17, 0x07	; 7
    3428:	14 c0       	rjmp	.+40     	; 0x3452 <main+0x14c>
					// Force code to wait for a new packet
					Interrupted = false;
				}

				// Update status screen while waiting to time out
				else if (UpdateStatus_timer > (SECOND_TIMER >> 2))
    342a:	8e 81       	ldd	r24, Y+6	; 0x06
    342c:	9f 81       	ldd	r25, Y+7	; 0x07
    342e:	83 31       	cpi	r24, 0x13	; 19
    3430:	93 41       	sbci	r25, 0x13	; 19
    3432:	78 f0       	brcs	.+30     	; 0x3452 <main+0x14c>
				{
					Menu_mode = STATUS;
					Disable_RC_Interrupts(); // Debug
    3434:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <Disable_RC_Interrupts>
				}

				// Update status screen while waiting to time out
				else if (UpdateStatus_timer > (SECOND_TIMER >> 2))
				{
					Menu_mode = STATUS;
    3438:	13 e0       	ldi	r17, 0x03	; 3
    343a:	0b c0       	rjmp	.+22     	; 0x3452 <main+0x14c>
				break;

			// In STATUS_TIMEOUT mode, the idle screen is displayed and the mode changed to IDLE
			case STATUS_TIMEOUT:
				// Pop up the Idle screen
				idle_screen();
    343c:	0e 94 0a 21 	call	0x4214	; 0x4214 <idle_screen>

				// Switch to IDLE mode
				Menu_mode = IDLE;

				// Force code to wait for a new packet
				Interrupted = false;
    3440:	10 92 ca 07 	sts	0x07CA, r1
			case STATUS_TIMEOUT:
				// Pop up the Idle screen
				idle_screen();

				// Switch to IDLE mode
				Menu_mode = IDLE;
    3444:	10 e0       	ldi	r17, 0x00	; 0

				// Force code to wait for a new packet
				Interrupted = false;
				PWMBlocked = false;	
    3446:	19 82       	std	Y+1, r1	; 0x01

				break;
    3448:	04 c0       	rjmp	.+8      	; 0x3452 <main+0x14c>
				// Disarm the FC
				General_error |= (1 << DISARMED);
				// Start the menu system
				menu_main();
				// Switch back to status screen when leaving menu
				Menu_mode = STATUS;
    344a:	13 e0       	ldi	r17, 0x03	; 3
				// Reset timeout once back in status screen
				Status_seconds = 0;
    344c:	1b 82       	std	Y+3, r1	; 0x03
				reset_IMU();
				
				// Force code to wait for a new packet
				Interrupted = false;
								
				break;
    344e:	01 c0       	rjmp	.+2      	; 0x3452 <main+0x14c>
			case WAITING_TIMEOUT:
				// In status screen, change back to idle after timing out
				if (Status_seconds >= 2)
				//if (Status_seconds >= 10) // debug
				{
					Menu_mode = STATUS_TIMEOUT;
    3450:	16 e0       	ldi	r17, 0x06	; 6
		//************************************************************
		//* Status menu timing
		//************************************************************

		// Count elapsed seconds
		if (Status_timeout > SECOND_TIMER)
    3452:	ec 81       	ldd	r30, Y+4	; 0x04
    3454:	fd 81       	ldd	r31, Y+5	; 0x05
    3456:	ec 34       	cpi	r30, 0x4C	; 76
    3458:	fc 44       	sbci	r31, 0x4C	; 76
    345a:	68 f0       	brcs	.+26     	; 0x3476 <main+0x170>
		{
			Status_seconds++;
    345c:	3b 81       	ldd	r19, Y+3	; 0x03
    345e:	3f 5f       	subi	r19, 0xFF	; 255
    3460:	3b 83       	std	Y+3, r19	; 0x03
			Status_timeout = 0;

			// Update the interrupt count each second
			InterruptCount = InterruptCounter;
    3462:	4c 85       	ldd	r20, Y+12	; 0x0c
    3464:	5d 85       	ldd	r21, Y+13	; 0x0d
    3466:	50 93 1d 05 	sts	0x051D, r21
    346a:	40 93 1c 05 	sts	0x051C, r20
			InterruptCounter = 0;
    346e:	1d 86       	std	Y+13, r1	; 0x0d
    3470:	1c 86       	std	Y+12, r1	; 0x0c

		// Count elapsed seconds
		if (Status_timeout > SECOND_TIMER)
		{
			Status_seconds++;
			Status_timeout = 0;
    3472:	1d 82       	std	Y+5, r1	; 0x05
    3474:	1c 82       	std	Y+4, r1	; 0x04
		//* System ticker - based on TCNT2 (19.531kHz)
		//* 
		//* ((Ticker_Count >> 8) &8) 	= 4.77Hz (Disarm and LVA alarms)
		//************************************************************

		if ((Ticker_Count >> 8) &8) 
    3476:	8a 89       	ldd	r24, Y+18	; 0x12
    3478:	9b 89       	ldd	r25, Y+19	; 0x13
    347a:	93 ff       	sbrs	r25, 3
    347c:	04 c0       	rjmp	.+8      	; 0x3486 <main+0x180>
		{
			Alarm_flags |= (1 << BUZZER_ON);	// 4.77Hz beep
    347e:	80 91 1e 05 	lds	r24, 0x051E
    3482:	80 61       	ori	r24, 0x10	; 16
    3484:	03 c0       	rjmp	.+6      	; 0x348c <main+0x186>
		}
		else 
		{
			Alarm_flags &= ~(1 << BUZZER_ON);
    3486:	80 91 1e 05 	lds	r24, 0x051E
    348a:	8f 7e       	andi	r24, 0xEF	; 239
    348c:	80 93 1e 05 	sts	0x051E, r24
		//************************************************************
		//* Alarms
		//************************************************************

		// If RC signal is overdue, signal RX error message and disarm
		if (Overdue)
    3490:	80 91 19 05 	lds	r24, 0x0519
    3494:	88 23       	and	r24, r24
    3496:	b1 f0       	breq	.+44     	; 0x34c4 <main+0x1be>
		{
			General_error |= (1 << NO_SIGNAL);		// Set NO_SIGNAL bit
    3498:	80 91 20 05 	lds	r24, 0x0520
    349c:	82 60       	ori	r24, 0x02	; 2
    349e:	80 93 20 05 	sts	0x0520, r24
			
			// If FC is set to "armable" and is currently armed, disarm the FC
			if ((Config.ArmMode == ARMABLE) && ((General_error & (1 << DISARMED)) == 0))
    34a2:	80 91 3b 06 	lds	r24, 0x063B
    34a6:	81 30       	cpi	r24, 0x01	; 1
    34a8:	91 f4       	brne	.+36     	; 0x34ce <main+0x1c8>
    34aa:	80 91 20 05 	lds	r24, 0x0520
    34ae:	82 fd       	sbrc	r24, 2
    34b0:	0e c0       	rjmp	.+28     	; 0x34ce <main+0x1c8>
			{
				General_error |= (1 << DISARMED);	// Set flags to disarmed
    34b2:	80 91 20 05 	lds	r24, 0x0520
    34b6:	84 60       	ori	r24, 0x04	; 4
    34b8:	80 93 20 05 	sts	0x0520, r24
				menu_beep(1);						// Signal that FC is now disarmed
    34bc:	81 e0       	ldi	r24, 0x01	; 1
    34be:	0e 94 c7 2f 	call	0x5f8e	; 0x5f8e <menu_beep>
    34c2:	05 c0       	rjmp	.+10     	; 0x34ce <main+0x1c8>
			}
		}
		else
		{
			General_error &= ~(1 << NO_SIGNAL);	// Clear NO_SIGNAL bit
    34c4:	80 91 20 05 	lds	r24, 0x0520
    34c8:	8d 7f       	andi	r24, 0xFD	; 253
    34ca:	80 93 20 05 	sts	0x0520, r24
		}

		// Beep buzzer if Vbat lower than trigger
		// Vbat is measured in units of 10mV, so a PowerTrigger of 127 equates to 12.7V
		if (GetVbat() < Config.PowerTriggerActual)
    34ce:	0e 94 2e 45 	call	0x8a5c	; 0x8a5c <GetVbat>
    34d2:	20 91 37 06 	lds	r18, 0x0637
    34d6:	30 91 38 06 	lds	r19, 0x0638
    34da:	82 17       	cp	r24, r18
    34dc:	93 07       	cpc	r25, r19
    34de:	20 f4       	brcc	.+8      	; 0x34e8 <main+0x1e2>
		{
			General_error |= (1 << LVA_ALARM);	// Set LVA_Alarm flag
    34e0:	80 91 20 05 	lds	r24, 0x0520
    34e4:	88 60       	ori	r24, 0x08	; 8
    34e6:	03 c0       	rjmp	.+6      	; 0x34ee <main+0x1e8>
		}
		else 
		{
			General_error &= ~(1 << LVA_ALARM);	// Clear LVA_Alarm flag
    34e8:	80 91 20 05 	lds	r24, 0x0520
    34ec:	87 7f       	andi	r24, 0xF7	; 247
    34ee:	80 93 20 05 	sts	0x0520, r24
		}

		// Turn on buzzer if in alarm state (BUZZER_ON is oscillating)
		if	(
			 (
				(General_error & (1 << LVA_ALARM)) ||		// Low battery
    34f2:	80 91 20 05 	lds	r24, 0x0520
		{
			General_error &= ~(1 << LVA_ALARM);	// Clear LVA_Alarm flag
		}

		// Turn on buzzer if in alarm state (BUZZER_ON is oscillating)
		if	(
    34f6:	83 fd       	sbrc	r24, 3
    34f8:	08 c0       	rjmp	.+16     	; 0x350a <main+0x204>
			 (
				(General_error & (1 << LVA_ALARM)) ||		// Low battery
				(General_error & (1 << NO_SIGNAL)) ||		// No signal
    34fa:	80 91 20 05 	lds	r24, 0x0520
		}

		// Turn on buzzer if in alarm state (BUZZER_ON is oscillating)
		if	(
			 (
				(General_error & (1 << LVA_ALARM)) ||		// Low battery
    34fe:	81 fd       	sbrc	r24, 1
    3500:	04 c0       	rjmp	.+8      	; 0x350a <main+0x204>
				(General_error & (1 << NO_SIGNAL)) ||		// No signal
				(General_error & (1 << THROTTLE_HIGH))		// Throttle high
    3502:	80 91 20 05 	lds	r24, 0x0520

		// Turn on buzzer if in alarm state (BUZZER_ON is oscillating)
		if	(
			 (
				(General_error & (1 << LVA_ALARM)) ||		// Low battery
				(General_error & (1 << NO_SIGNAL)) ||		// No signal
    3506:	80 ff       	sbrs	r24, 0
    3508:	06 c0       	rjmp	.+12     	; 0x3516 <main+0x210>
				(General_error & (1 << THROTTLE_HIGH))		// Throttle high
			 ) && 
			  (Alarm_flags & (1 << BUZZER_ON))
    350a:	80 91 1e 05 	lds	r24, 0x051E
		if	(
			 (
				(General_error & (1 << LVA_ALARM)) ||		// Low battery
				(General_error & (1 << NO_SIGNAL)) ||		// No signal
				(General_error & (1 << THROTTLE_HIGH))		// Throttle high
			 ) && 
    350e:	84 ff       	sbrs	r24, 4
    3510:	02 c0       	rjmp	.+4      	; 0x3516 <main+0x210>
			  (Alarm_flags & (1 << BUZZER_ON))
			) 
		{
			LVA = 1;
    3512:	29 9a       	sbi	0x05, 1	; 5
    3514:	01 c0       	rjmp	.+2      	; 0x3518 <main+0x212>
		}
		else 
		{
			LVA = 0;
    3516:	29 98       	cbi	0x05, 1	; 5

		//************************************************************
		//* Arm/disarm handling
		//************************************************************

		if (Config.ArmMode == ARMABLE)
    3518:	80 91 3b 06 	lds	r24, 0x063B
    351c:	81 30       	cpi	r24, 0x01	; 1
    351e:	09 f0       	breq	.+2      	; 0x3522 <main+0x21c>
    3520:	90 c0       	rjmp	.+288    	; 0x3642 <main+0x33c>
			// Manual arm/disarm

			// If sticks not at extremes, reset manual arm/disarm timer
			// Sticks down and centered = armed. Down and outside = disarmed
			if (
				((-ARM_TIMER_RESET_1 < RCinputs[AILERON]) && (RCinputs[AILERON] < ARM_TIMER_RESET_1)) ||
    3522:	80 91 2d 08 	lds	r24, 0x082D
    3526:	90 91 2e 08 	lds	r25, 0x082E
		{
			// Manual arm/disarm

			// If sticks not at extremes, reset manual arm/disarm timer
			// Sticks down and centered = armed. Down and outside = disarmed
			if (
    352a:	81 34       	cpi	r24, 0x41	; 65
    352c:	9c 4f       	sbci	r25, 0xFC	; 252
    352e:	44 f0       	brlt	.+16     	; 0x3540 <main+0x23a>
				((-ARM_TIMER_RESET_1 < RCinputs[AILERON]) && (RCinputs[AILERON] < ARM_TIMER_RESET_1)) ||
    3530:	80 91 2d 08 	lds	r24, 0x082D
    3534:	90 91 2e 08 	lds	r25, 0x082E
    3538:	80 3c       	cpi	r24, 0xC0	; 192
    353a:	93 40       	sbci	r25, 0x03	; 3
    353c:	0c f4       	brge	.+2      	; 0x3540 <main+0x23a>
    353e:	53 c0       	rjmp	.+166    	; 0x35e6 <main+0x2e0>
				((-ARM_TIMER_RESET_1 < RCinputs[ELEVATOR]) && (RCinputs[ELEVATOR] < ARM_TIMER_RESET_1)) ||
    3540:	80 91 2f 08 	lds	r24, 0x082F
    3544:	90 91 30 08 	lds	r25, 0x0830
			// Manual arm/disarm

			// If sticks not at extremes, reset manual arm/disarm timer
			// Sticks down and centered = armed. Down and outside = disarmed
			if (
				((-ARM_TIMER_RESET_1 < RCinputs[AILERON]) && (RCinputs[AILERON] < ARM_TIMER_RESET_1)) ||
    3548:	81 34       	cpi	r24, 0x41	; 65
    354a:	9c 4f       	sbci	r25, 0xFC	; 252
    354c:	44 f0       	brlt	.+16     	; 0x355e <main+0x258>
				((-ARM_TIMER_RESET_1 < RCinputs[ELEVATOR]) && (RCinputs[ELEVATOR] < ARM_TIMER_RESET_1)) ||
    354e:	80 91 2f 08 	lds	r24, 0x082F
    3552:	90 91 30 08 	lds	r25, 0x0830
    3556:	80 3c       	cpi	r24, 0xC0	; 192
    3558:	93 40       	sbci	r25, 0x03	; 3
    355a:	0c f4       	brge	.+2      	; 0x355e <main+0x258>
    355c:	44 c0       	rjmp	.+136    	; 0x35e6 <main+0x2e0>
				((-ARM_TIMER_RESET_1 < RCinputs[RUDDER]) && (RCinputs[RUDDER] < ARM_TIMER_RESET_1)) ||
    355e:	80 91 31 08 	lds	r24, 0x0831
    3562:	90 91 32 08 	lds	r25, 0x0832

			// If sticks not at extremes, reset manual arm/disarm timer
			// Sticks down and centered = armed. Down and outside = disarmed
			if (
				((-ARM_TIMER_RESET_1 < RCinputs[AILERON]) && (RCinputs[AILERON] < ARM_TIMER_RESET_1)) ||
				((-ARM_TIMER_RESET_1 < RCinputs[ELEVATOR]) && (RCinputs[ELEVATOR] < ARM_TIMER_RESET_1)) ||
    3566:	81 34       	cpi	r24, 0x41	; 65
    3568:	9c 4f       	sbci	r25, 0xFC	; 252
    356a:	3c f0       	brlt	.+14     	; 0x357a <main+0x274>
				((-ARM_TIMER_RESET_1 < RCinputs[RUDDER]) && (RCinputs[RUDDER] < ARM_TIMER_RESET_1)) ||
    356c:	80 91 31 08 	lds	r24, 0x0831
    3570:	90 91 32 08 	lds	r25, 0x0832
    3574:	80 3c       	cpi	r24, 0xC0	; 192
    3576:	93 40       	sbci	r25, 0x03	; 3
    3578:	b4 f1       	brlt	.+108    	; 0x35e6 <main+0x2e0>
				(ARM_TIMER_RESET_2 < MonopolarThrottle)
    357a:	80 91 29 08 	lds	r24, 0x0829
    357e:	90 91 2a 08 	lds	r25, 0x082A
			// If sticks not at extremes, reset manual arm/disarm timer
			// Sticks down and centered = armed. Down and outside = disarmed
			if (
				((-ARM_TIMER_RESET_1 < RCinputs[AILERON]) && (RCinputs[AILERON] < ARM_TIMER_RESET_1)) ||
				((-ARM_TIMER_RESET_1 < RCinputs[ELEVATOR]) && (RCinputs[ELEVATOR] < ARM_TIMER_RESET_1)) ||
				((-ARM_TIMER_RESET_1 < RCinputs[RUDDER]) && (RCinputs[RUDDER] < ARM_TIMER_RESET_1)) ||
    3582:	c3 97       	sbiw	r24, 0x33	; 51
    3584:	84 f5       	brge	.+96     	; 0x35e6 <main+0x2e0>
				Arm_timer = 0;
			}

			// If arm timer times out, the sticks must have been at extremes for ARM_TIMER seconds
			// If aileron is at min, arm the FC
			if ((Arm_timer > ARM_TIMER) && (RCinputs[AILERON] < -ARM_TIMER_RESET_1))
    3586:	4c e4       	ldi	r20, 0x4C	; 76
    3588:	c4 16       	cp	r12, r20
    358a:	d4 06       	cpc	r13, r20
    358c:	e1 04       	cpc	r14, r1
    358e:	f1 04       	cpc	r15, r1
    3590:	68 f1       	brcs	.+90     	; 0x35ec <main+0x2e6>
    3592:	80 91 2d 08 	lds	r24, 0x082D
    3596:	90 91 2e 08 	lds	r25, 0x082E
    359a:	80 34       	cpi	r24, 0x40	; 64
    359c:	9c 4f       	sbci	r25, 0xFC	; 252
    359e:	6c f4       	brge	.+26     	; 0x35ba <main+0x2b4>
			{
				Arm_timer = 0;
				General_error &= ~(1 << DISARMED);		// Set flags to armed (negate disarmed)
    35a0:	80 91 20 05 	lds	r24, 0x0520
    35a4:	8b 7f       	andi	r24, 0xFB	; 251
    35a6:	80 93 20 05 	sts	0x0520, r24
				CalibrateGyrosSlow();					// Calibrate gyros
    35aa:	0e 94 74 22 	call	0x44e8	; 0x44e8 <CalibrateGyrosSlow>
				menu_beep(20);							// Signal that FC is ready
    35ae:	84 e1       	ldi	r24, 0x14	; 20
    35b0:	0e 94 c7 2f 	call	0x5f8e	; 0x5f8e <menu_beep>
				reset_IMU();							// Reset IMU just in case...
    35b4:	0e 94 fd 27 	call	0x4ffa	; 0x4ffa <reset_IMU>
    35b8:	16 c0       	rjmp	.+44     	; 0x35e6 <main+0x2e0>
			}
			// Else, disarm the FC after DISARM_TIMER seconds if aileron at max
			else if ((Arm_timer > DISARM_TIMER) && (RCinputs[AILERON] > ARM_TIMER_RESET_1))
    35ba:	82 ee       	ldi	r24, 0xE2	; 226
    35bc:	c8 16       	cp	r12, r24
    35be:	84 ee       	ldi	r24, 0xE4	; 228
    35c0:	d8 06       	cpc	r13, r24
    35c2:	e1 04       	cpc	r14, r1
    35c4:	f1 04       	cpc	r15, r1
    35c6:	90 f0       	brcs	.+36     	; 0x35ec <main+0x2e6>
    35c8:	80 91 2d 08 	lds	r24, 0x082D
    35cc:	90 91 2e 08 	lds	r25, 0x082E
    35d0:	81 3c       	cpi	r24, 0xC1	; 193
    35d2:	93 40       	sbci	r25, 0x03	; 3
    35d4:	5c f0       	brlt	.+22     	; 0x35ec <main+0x2e6>
			{
				Arm_timer = 0;
				General_error |= (1 << DISARMED);		// Set flags to disarmed
    35d6:	80 91 20 05 	lds	r24, 0x0520
    35da:	84 60       	ori	r24, 0x04	; 4
    35dc:	80 93 20 05 	sts	0x0520, r24
				menu_beep(1);							// Signal that FC is now disarmed
    35e0:	81 e0       	ldi	r24, 0x01	; 1
    35e2:	0e 94 c7 2f 	call	0x5f8e	; 0x5f8e <menu_beep>
    35e6:	c1 2c       	mov	r12, r1
    35e8:	d1 2c       	mov	r13, r1
    35ea:	76 01       	movw	r14, r12
			}

			// Automatic disarm

			// Reset auto-disarm count if any RX activity or set to zero, or when currently disarmed
			if ((Flight_flags & (1 << RxActivity)) || (Config.Disarm_timer == 0) || (General_error & (1 << DISARMED)))
    35ec:	80 91 1f 05 	lds	r24, 0x051F
    35f0:	80 fd       	sbrc	r24, 0
    35f2:	0e c0       	rjmp	.+28     	; 0x3610 <main+0x30a>
    35f4:	80 91 3c 06 	lds	r24, 0x063C
    35f8:	88 23       	and	r24, r24
    35fa:	51 f0       	breq	.+20     	; 0x3610 <main+0x30a>
    35fc:	80 91 20 05 	lds	r24, 0x0520
    3600:	82 fd       	sbrc	r24, 2
    3602:	06 c0       	rjmp	.+12     	; 0x3610 <main+0x30a>
				Disarm_timer = 0;
				Disarm_seconds = 0;
			}
		
			// Increment disarm timer (seconds) if armed
			if (Disarm_timer > SECOND_TIMER)
    3604:	bc e4       	ldi	r27, 0x4C	; 76
    3606:	2b 16       	cp	r2, r27
    3608:	3b 06       	cpc	r3, r27
    360a:	28 f0       	brcs	.+10     	; 0x3616 <main+0x310>
			{
				Disarm_seconds++;
    360c:	63 94       	inc	r6
    360e:	01 c0       	rjmp	.+2      	; 0x3612 <main+0x30c>
    3610:	61 2c       	mov	r6, r1
    3612:	21 2c       	mov	r2, r1
    3614:	31 2c       	mov	r3, r1
				Disarm_timer = 0;
			}

			// Auto-disarm model if timeout enabled and due
			if ((Disarm_seconds >= Config.Disarm_timer) && (Config.Disarm_timer >= 30))	
    3616:	40 91 3c 06 	lds	r20, 0x063C
    361a:	26 2d       	mov	r18, r6
    361c:	30 e0       	ldi	r19, 0x00	; 0
    361e:	84 2f       	mov	r24, r20
    3620:	99 27       	eor	r25, r25
    3622:	87 fd       	sbrc	r24, 7
    3624:	90 95       	com	r25
    3626:	28 17       	cp	r18, r24
    3628:	39 07       	cpc	r19, r25
    362a:	84 f0       	brlt	.+32     	; 0x364c <main+0x346>
    362c:	4e 31       	cpi	r20, 0x1E	; 30
    362e:	74 f0       	brlt	.+28     	; 0x364c <main+0x346>
			{
				// Disarm the FC
				General_error |= (1 << DISARMED);		// Set flags to disarmed
    3630:	80 91 20 05 	lds	r24, 0x0520
    3634:	84 60       	ori	r24, 0x04	; 4
    3636:	80 93 20 05 	sts	0x0520, r24
				menu_beep(1);							// Signal that FC is now disarmed
    363a:	81 e0       	ldi	r24, 0x01	; 1
    363c:	0e 94 c7 2f 	call	0x5f8e	; 0x5f8e <menu_beep>
    3640:	05 c0       	rjmp	.+10     	; 0x364c <main+0x346>
			}
		}
		// Arm when ArmMode is OFF
		else 
		{
			General_error &= ~(1 << DISARMED);			// Set flags to armed
    3642:	80 91 20 05 	lds	r24, 0x0520
    3646:	8b 7f       	andi	r24, 0xFB	; 251
    3648:	80 93 20 05 	sts	0x0520, r24
		//************************************************************
		//* Get RC data
		//************************************************************

		// Update zeroed RC channel data
		RxGetChannels();
    364c:	0e 94 64 42 	call	0x84c8	; 0x84c8 <RxGetChannels>

		// Check for throttle reset
		if (MonopolarThrottle < THROTTLEIDLE)
    3650:	80 91 29 08 	lds	r24, 0x0829
    3654:	90 91 2a 08 	lds	r25, 0x082A
    3658:	c2 97       	sbiw	r24, 0x32	; 50
    365a:	5c f4       	brge	.+22     	; 0x3672 <main+0x36c>
		{
			// Clear throttle high error
			General_error &= ~(1 << THROTTLE_HIGH);	
    365c:	80 91 20 05 	lds	r24, 0x0520
    3660:	8e 7f       	andi	r24, 0xFE	; 254
    3662:	80 93 20 05 	sts	0x0520, r24

			// Reset I-terms at throttle cut. Using memset saves code space
			memset(&IntegralGyro[P1][ROLL], 0, sizeof(int32_t) * 6); 
    3666:	88 e1       	ldi	r24, 0x18	; 24
    3668:	ed ee       	ldi	r30, 0xED	; 237
    366a:	f7 e0       	ldi	r31, 0x07	; 7
    366c:	11 92       	st	Z+, r1
    366e:	8a 95       	dec	r24
    3670:	e9 f7       	brne	.-6      	; 0x366c <main+0x366>
		//* by the Config.TransitionSpeed setting.
		//* The transition will hold at P1n position if directed to
		//************************************************************

		// P2 transition point hard-coded to 50% above center
		if 	(RCinputs[Config.FlightChan] > 500)
    3672:	80 91 dd 05 	lds	r24, 0x05DD
    3676:	88 0f       	add	r24, r24
    3678:	99 0b       	sbc	r25, r25
    367a:	fc 01       	movw	r30, r24
    367c:	e5 5d       	subi	r30, 0xD5	; 213
    367e:	f7 4f       	sbci	r31, 0xF7	; 247
    3680:	20 81       	ld	r18, Z
    3682:	31 81       	ldd	r19, Z+1	; 0x01
    3684:	25 3f       	cpi	r18, 0xF5	; 245
    3686:	31 40       	sbci	r19, 0x01	; 1
    3688:	14 f0       	brlt	.+4      	; 0x368e <main+0x388>
		{
			Config.FlightSel = 2;			// Flight mode 2 (P2)
    368a:	22 e0       	ldi	r18, 0x02	; 2
    368c:	06 c0       	rjmp	.+12     	; 0x369a <main+0x394>
		}
		// P1.n transition point hard-coded to 50% below center
		else if (RCinputs[Config.FlightChan] > -500)
    368e:	20 81       	ld	r18, Z
    3690:	31 81       	ldd	r19, Z+1	; 0x01
    3692:	2d 30       	cpi	r18, 0x0D	; 13
    3694:	3e 4f       	sbci	r19, 0xFE	; 254
    3696:	24 f0       	brlt	.+8      	; 0x36a0 <main+0x39a>
		{
			Config.FlightSel = 1;			// Flight mode 1 (P1.n)
    3698:	21 e0       	ldi	r18, 0x01	; 1
    369a:	20 93 af 07 	sts	0x07AF, r18
    369e:	02 c0       	rjmp	.+4      	; 0x36a4 <main+0x39e>
		}
		// Otherwise the default is P1
		else
		{
			Config.FlightSel = 0;			// Flight mode 0 (P1)
    36a0:	10 92 af 07 	sts	0x07AF, r1
		//* Set up the correct state for the current setting.
		//* Check for initial startup - the only time that old_flight should be "3".
		//* Also, re-initialise if the transition setting is changed
		//************************************************************

		if ((old_flight == 3) || (old_trans_mode != Config.TransitionSpeed))
    36a4:	a3 e0       	ldi	r26, 0x03	; 3
    36a6:	7a 16       	cp	r7, r26
    36a8:	29 f0       	breq	.+10     	; 0x36b4 <main+0x3ae>
    36aa:	20 91 e1 05 	lds	r18, 0x05E1
    36ae:	bf 8d       	ldd	r27, Y+31	; 0x1f
    36b0:	b2 17       	cp	r27, r18
    36b2:	31 f1       	breq	.+76     	; 0x3700 <main+0x3fa>
		{
			switch(Config.FlightSel)
    36b4:	70 90 af 07 	lds	r7, 0x07AF
    36b8:	e1 e0       	ldi	r30, 0x01	; 1
    36ba:	7e 16       	cp	r7, r30
    36bc:	61 f0       	breq	.+24     	; 0x36d6 <main+0x3d0>
    36be:	f2 e0       	ldi	r31, 0x02	; 2
    36c0:	7f 16       	cp	r7, r31
    36c2:	91 f0       	breq	.+36     	; 0x36e8 <main+0x3e2>
    36c4:	71 10       	cpse	r7, r1
    36c6:	19 c0       	rjmp	.+50     	; 0x36fa <main+0x3f4>
			{
				case 0:
					Transition_state = TRANS_P1;
    36c8:	10 92 23 05 	sts	0x0523, r1
					transition_counter = 0;
    36cc:	10 92 25 05 	sts	0x0525, r1
    36d0:	10 92 24 05 	sts	0x0524, r1
					break;
    36d4:	12 c0       	rjmp	.+36     	; 0x36fa <main+0x3f4>
				case 1:
					Transition_state = TRANS_P1n;
    36d6:	24 e0       	ldi	r18, 0x04	; 4
    36d8:	20 93 23 05 	sts	0x0523, r18
					transition_counter = Config.Transition_P1n; // Set transition point to the user-selected point
    36dc:	20 91 e2 05 	lds	r18, 0x05E2
    36e0:	33 27       	eor	r19, r19
    36e2:	27 fd       	sbrc	r18, 7
    36e4:	30 95       	com	r19
    36e6:	05 c0       	rjmp	.+10     	; 0x36f2 <main+0x3ec>
					break;
				case 2:
					Transition_state = TRANS_P2;
    36e8:	29 e0       	ldi	r18, 0x09	; 9
    36ea:	20 93 23 05 	sts	0x0523, r18
					transition_counter = 100;
    36ee:	24 e6       	ldi	r18, 0x64	; 100
    36f0:	30 e0       	ldi	r19, 0x00	; 0
    36f2:	30 93 25 05 	sts	0x0525, r19
    36f6:	20 93 24 05 	sts	0x0524, r18
					break;
				default:
					break;
			}		 
			old_flight = Config.FlightSel;
			old_trans_mode = Config.TransitionSpeed;
    36fa:	30 91 e1 05 	lds	r19, 0x05E1
    36fe:	3f 8f       	std	Y+31, r19	; 0x1f
		//************************************************************
		//* Transition state handling
		//************************************************************

		// Update timed transition when changing flight modes
		if (Config.FlightSel != old_flight)
    3700:	40 91 af 07 	lds	r20, 0x07AF
    3704:	4e 8b       	std	Y+22, r20	; 0x16
    3706:	21 e0       	ldi	r18, 0x01	; 1
    3708:	47 11       	cpse	r20, r7
    370a:	01 c0       	rjmp	.+2      	; 0x370e <main+0x408>
    370c:	20 e0       	ldi	r18, 0x00	; 0
			TransitionUpdated = true;
		}

		// Work out transition number when manually transitioning
		// Convert number to percentage (0 to 100%)
		if (Config.TransitionSpeed == 0)
    370e:	30 91 e1 05 	lds	r19, 0x05E1
    3712:	31 11       	cpse	r19, r1
    3714:	1b c0       	rjmp	.+54     	; 0x374c <main+0x446>
		{
			// Offset RC input to (approx) -250 to 2250
			temp1 = RCinputs[Config.FlightChan] + 1000;
    3716:	fc 01       	movw	r30, r24
    3718:	e5 5d       	subi	r30, 0xD5	; 213
    371a:	f7 4f       	sbci	r31, 0xF7	; 247
    371c:	80 81       	ld	r24, Z
    371e:	91 81       	ldd	r25, Z+1	; 0x01
    3720:	88 51       	subi	r24, 0x18	; 24
    3722:	9c 4f       	sbci	r25, 0xFC	; 252
    3724:	97 ff       	sbrs	r25, 7
    3726:	02 c0       	rjmp	.+4      	; 0x372c <main+0x426>
    3728:	80 e0       	ldi	r24, 0x00	; 0
    372a:	90 e0       	ldi	r25, 0x00	; 0
			// Trim lower end to zero (0 to 2250)
			if (temp1 < 0) temp1 = 0;

			// Convert 0 to 2250 to 0 to 125. Divide by 20
			// Round to avoid truncation errors
			transition = (temp1 + 10) / 20;
    372c:	0a 96       	adiw	r24, 0x0a	; 10
    372e:	64 e1       	ldi	r22, 0x14	; 20
    3730:	70 e0       	ldi	r23, 0x00	; 0
    3732:	0e 94 6c 47 	call	0x8ed8	; 0x8ed8 <__divmodhi4>

			// transition now has a range of 0 to 101 for 0 to 2000 input
			// Limit extent of transition value 0 to 100 (101 steps)
			if (transition > 100) transition = 100;
    3736:	65 36       	cpi	r22, 0x65	; 101
    3738:	71 05       	cpc	r23, r1
    373a:	0c f4       	brge	.+2      	; 0x373e <main+0x438>
    373c:	f8 c2       	rjmp	.+1520   	; 0x3d2e <main+0xa28>
    373e:	84 e6       	ldi	r24, 0x64	; 100
    3740:	90 e0       	ldi	r25, 0x00	; 0
    3742:	90 93 22 05 	sts	0x0522, r25
    3746:	80 93 21 05 	sts	0x0521, r24
    374a:	f5 c2       	rjmp	.+1514   	; 0x3d36 <main+0xa30>
		}
		else
		{
			// transition_counter counts from 0 to 100 (101 steps)
			transition = transition_counter;
    374c:	80 91 24 05 	lds	r24, 0x0524
    3750:	90 91 25 05 	lds	r25, 0x0525
    3754:	90 93 22 05 	sts	0x0522, r25
    3758:	80 93 21 05 	sts	0x0521, r24
		{
			Transition_state = TRANSITIONING;
		}

		// Update transition state change when control value or flight mode changes
		if (TransitionUpdated)
    375c:	22 23       	and	r18, r18
    375e:	99 f0       	breq	.+38     	; 0x3786 <main+0x480>
		{
			// Update transition state from matrix
			Transition_state = (uint8_t)pgm_read_byte(&Trans_Matrix[Config.FlightSel][old_flight]);
    3760:	ae 89       	ldd	r26, Y+22	; 0x16
    3762:	8a 2f       	mov	r24, r26
    3764:	99 27       	eor	r25, r25
    3766:	87 fd       	sbrc	r24, 7
    3768:	90 95       	com	r25
    376a:	fc 01       	movw	r30, r24
    376c:	ee 0f       	add	r30, r30
    376e:	ff 1f       	adc	r31, r31
    3770:	e8 0f       	add	r30, r24
    3772:	f9 1f       	adc	r31, r25
    3774:	e7 0d       	add	r30, r7
    3776:	f1 1d       	adc	r31, r1
    3778:	77 fc       	sbrc	r7, 7
    377a:	fa 95       	dec	r31
    377c:	ea 52       	subi	r30, 0x2A	; 42
    377e:	ff 4f       	sbci	r31, 0xFF	; 255
    3780:	e4 91       	lpm	r30, Z
    3782:	e0 93 23 05 	sts	0x0523, r30

		// Calculate transition time from user's setting
		transition_time = TRANSITION_TIMER * Config.TransitionSpeed;
		
		// Update state, values and transition_counter every Config.TransitionSpeed if not zero. 195 = 10ms
		if (((Config.TransitionSpeed != 0) && (Transition_timeout > transition_time)) ||
    3786:	33 23       	and	r19, r19
    3788:	39 f0       	breq	.+14     	; 0x3798 <main+0x492>
			// Update transition state from matrix
			Transition_state = (uint8_t)pgm_read_byte(&Trans_Matrix[Config.FlightSel][old_flight]);
		}

		// Calculate transition time from user's setting
		transition_time = TRANSITION_TIMER * Config.TransitionSpeed;
    378a:	43 ec       	ldi	r20, 0xC3	; 195
    378c:	34 03       	mulsu	r19, r20
    378e:	c0 01       	movw	r24, r0
    3790:	11 24       	eor	r1, r1
		
		// Update state, values and transition_counter every Config.TransitionSpeed if not zero. 195 = 10ms
		if (((Config.TransitionSpeed != 0) && (Transition_timeout > transition_time)) ||
    3792:	84 15       	cp	r24, r4
    3794:	95 05       	cpc	r25, r5
    3796:	18 f0       	brcs	.+6      	; 0x379e <main+0x498>
    3798:	22 23       	and	r18, r18
    379a:	09 f4       	brne	.+2      	; 0x379e <main+0x498>
    379c:	a9 c0       	rjmp	.+338    	; 0x38f0 <main+0x5ea>
		{
			Transition_timeout = 0;
			TransitionUpdated = false;

			// Fixed, end-point states
			if (Transition_state == TRANS_P1)
    379e:	80 91 23 05 	lds	r24, 0x0523
    37a2:	81 11       	cpse	r24, r1
    37a4:	05 c0       	rjmp	.+10     	; 0x37b0 <main+0x4aa>
			{
				transition_counter = 0;
    37a6:	10 92 25 05 	sts	0x0525, r1
    37aa:	10 92 24 05 	sts	0x0524, r1
    37ae:	22 c0       	rjmp	.+68     	; 0x37f4 <main+0x4ee>
			}
			else if (Transition_state == TRANS_P1n)
    37b0:	84 30       	cpi	r24, 0x04	; 4
    37b2:	31 f4       	brne	.+12     	; 0x37c0 <main+0x4ba>
			{
				transition_counter = Config.Transition_P1n;
    37b4:	80 91 e2 05 	lds	r24, 0x05E2
    37b8:	99 27       	eor	r25, r25
    37ba:	87 fd       	sbrc	r24, 7
    37bc:	90 95       	com	r25
    37be:	04 c0       	rjmp	.+8      	; 0x37c8 <main+0x4c2>
			}
			else if (Transition_state == TRANS_P2)
    37c0:	89 30       	cpi	r24, 0x09	; 9
    37c2:	39 f4       	brne	.+14     	; 0x37d2 <main+0x4cc>
			{
				transition_counter = 100;
    37c4:	84 e6       	ldi	r24, 0x64	; 100
    37c6:	90 e0       	ldi	r25, 0x00	; 0
    37c8:	90 93 25 05 	sts	0x0525, r25
    37cc:	80 93 24 05 	sts	0x0524, r24
    37d0:	11 c0       	rjmp	.+34     	; 0x37f4 <main+0x4ee>
			}		

			// Over-ride users requesting silly states
			// If transition_counter is above P1.n but request is P1 to P1.n or 
			// if transition_counter is below P1.n but request is P2 to P1.n...
			if ((Transition_state == TRANS_P1_to_P1n_start) && (transition_counter > Config.Transition_P1n))
    37d2:	81 30       	cpi	r24, 0x01	; 1
    37d4:	79 f4       	brne	.+30     	; 0x37f4 <main+0x4ee>
    37d6:	80 91 e2 05 	lds	r24, 0x05E2
    37da:	99 27       	eor	r25, r25
    37dc:	87 fd       	sbrc	r24, 7
    37de:	90 95       	com	r25
    37e0:	20 91 24 05 	lds	r18, 0x0524
    37e4:	30 91 25 05 	lds	r19, 0x0525
    37e8:	82 17       	cp	r24, r18
    37ea:	93 07       	cpc	r25, r19
    37ec:	1c f4       	brge	.+6      	; 0x37f4 <main+0x4ee>
			{
				// Reset state to a more appropriate one
				Transition_state = TRANS_P2_to_P1n_start;
    37ee:	88 e0       	ldi	r24, 0x08	; 8
    37f0:	80 93 23 05 	sts	0x0523, r24
			}

			if ((Transition_state == TRANS_P2_to_P1n_start) && (transition_counter < Config.Transition_P1n))
    37f4:	80 91 23 05 	lds	r24, 0x0523
    37f8:	88 30       	cpi	r24, 0x08	; 8
    37fa:	79 f4       	brne	.+30     	; 0x381a <main+0x514>
    37fc:	80 91 e2 05 	lds	r24, 0x05E2
    3800:	99 27       	eor	r25, r25
    3802:	87 fd       	sbrc	r24, 7
    3804:	90 95       	com	r25
    3806:	20 91 24 05 	lds	r18, 0x0524
    380a:	30 91 25 05 	lds	r19, 0x0525
    380e:	28 17       	cp	r18, r24
    3810:	39 07       	cpc	r19, r25
    3812:	1c f4       	brge	.+6      	; 0x381a <main+0x514>
			{
				// Reset state to a more appropriate one
				Transition_state = TRANS_P1_to_P1n_start;
    3814:	81 e0       	ldi	r24, 0x01	; 1
    3816:	80 93 23 05 	sts	0x0523, r24
			}

			// Handle timed transition towards P1
			if ((Transition_state == TRANS_P1n_to_P1_start) || (Transition_state == TRANS_P2_to_P1_start))
    381a:	80 91 23 05 	lds	r24, 0x0523
    381e:	8b 7f       	andi	r24, 0xFB	; 251
    3820:	82 30       	cpi	r24, 0x02	; 2
    3822:	91 f4       	brne	.+36     	; 0x3848 <main+0x542>
			{
				transition_counter--;
    3824:	80 91 24 05 	lds	r24, 0x0524
    3828:	90 91 25 05 	lds	r25, 0x0525
    382c:	01 97       	sbiw	r24, 0x01	; 1
    382e:	90 93 25 05 	sts	0x0525, r25
    3832:	80 93 24 05 	sts	0x0524, r24
				if (transition_counter <= 0)
    3836:	18 16       	cp	r1, r24
    3838:	19 06       	cpc	r1, r25
    383a:	34 f0       	brlt	.+12     	; 0x3848 <main+0x542>
				{
					transition_counter = 0;
    383c:	10 92 25 05 	sts	0x0525, r1
    3840:	10 92 24 05 	sts	0x0524, r1
					Transition_state = TRANS_P1;
    3844:	10 92 23 05 	sts	0x0523, r1
				}
			}

			// Handle timed transition between P1.n and P1
			if (Transition_state == TRANS_P1_to_P1n_start)
    3848:	80 91 23 05 	lds	r24, 0x0523
    384c:	81 30       	cpi	r24, 0x01	; 1
    384e:	c1 f4       	brne	.+48     	; 0x3880 <main+0x57a>
			{
				transition_counter++;
    3850:	80 91 24 05 	lds	r24, 0x0524
    3854:	90 91 25 05 	lds	r25, 0x0525
    3858:	01 96       	adiw	r24, 0x01	; 1
    385a:	90 93 25 05 	sts	0x0525, r25
    385e:	80 93 24 05 	sts	0x0524, r24
				if (transition_counter >= Config.Transition_P1n)
    3862:	20 91 e2 05 	lds	r18, 0x05E2
    3866:	33 27       	eor	r19, r19
    3868:	27 fd       	sbrc	r18, 7
    386a:	30 95       	com	r19
    386c:	82 17       	cp	r24, r18
    386e:	93 07       	cpc	r25, r19
    3870:	3c f0       	brlt	.+14     	; 0x3880 <main+0x57a>
				{
					transition_counter = Config.Transition_P1n;
    3872:	30 93 25 05 	sts	0x0525, r19
    3876:	20 93 24 05 	sts	0x0524, r18
					Transition_state = TRANS_P1n;
    387a:	84 e0       	ldi	r24, 0x04	; 4
    387c:	80 93 23 05 	sts	0x0523, r24
				}
			}			
				
			// Handle timed transition between P1.n and P2
			if (Transition_state == TRANS_P2_to_P1n_start)
    3880:	80 91 23 05 	lds	r24, 0x0523
    3884:	88 30       	cpi	r24, 0x08	; 8
    3886:	c1 f4       	brne	.+48     	; 0x38b8 <main+0x5b2>
			{
				transition_counter--;
    3888:	80 91 24 05 	lds	r24, 0x0524
    388c:	90 91 25 05 	lds	r25, 0x0525
    3890:	01 97       	sbiw	r24, 0x01	; 1
    3892:	90 93 25 05 	sts	0x0525, r25
    3896:	80 93 24 05 	sts	0x0524, r24
				if (transition_counter <= Config.Transition_P1n)
    389a:	20 91 e2 05 	lds	r18, 0x05E2
    389e:	33 27       	eor	r19, r19
    38a0:	27 fd       	sbrc	r18, 7
    38a2:	30 95       	com	r19
    38a4:	28 17       	cp	r18, r24
    38a6:	39 07       	cpc	r19, r25
    38a8:	3c f0       	brlt	.+14     	; 0x38b8 <main+0x5b2>
				{
					transition_counter = Config.Transition_P1n;
    38aa:	30 93 25 05 	sts	0x0525, r19
    38ae:	20 93 24 05 	sts	0x0524, r18
					Transition_state = TRANS_P1n;
    38b2:	84 e0       	ldi	r24, 0x04	; 4
    38b4:	80 93 23 05 	sts	0x0523, r24
				}
			}

			// Handle timed transition towards P2
			if ((Transition_state == TRANS_P1n_to_P2_start) || (Transition_state == TRANS_P1_to_P2_start))
    38b8:	80 91 23 05 	lds	r24, 0x0523
    38bc:	8b 7f       	andi	r24, 0xFB	; 251
    38be:	83 30       	cpi	r24, 0x03	; 3
    38c0:	a9 f4       	brne	.+42     	; 0x38ec <main+0x5e6>
			{
				transition_counter++;
    38c2:	80 91 24 05 	lds	r24, 0x0524
    38c6:	90 91 25 05 	lds	r25, 0x0525
    38ca:	01 96       	adiw	r24, 0x01	; 1
    38cc:	90 93 25 05 	sts	0x0525, r25
    38d0:	80 93 24 05 	sts	0x0524, r24
				if (transition_counter >= 100)
    38d4:	84 36       	cpi	r24, 0x64	; 100
    38d6:	91 05       	cpc	r25, r1
    38d8:	4c f0       	brlt	.+18     	; 0x38ec <main+0x5e6>
				{
					transition_counter = 100;
    38da:	a4 e6       	ldi	r26, 0x64	; 100
    38dc:	b0 e0       	ldi	r27, 0x00	; 0
    38de:	b0 93 25 05 	sts	0x0525, r27
    38e2:	a0 93 24 05 	sts	0x0524, r26
					Transition_state = TRANS_P2;
    38e6:	89 e0       	ldi	r24, 0x09	; 9
    38e8:	80 93 23 05 	sts	0x0523, r24
		// Update state, values and transition_counter every Config.TransitionSpeed if not zero. 195 = 10ms
		if (((Config.TransitionSpeed != 0) && (Transition_timeout > transition_time)) ||
			// Update immediately
			TransitionUpdated)
		{
			Transition_timeout = 0;
    38ec:	41 2c       	mov	r4, r1
    38ee:	51 2c       	mov	r5, r1
			}

		} // Update transition_counter

		// Zero the I-terms of the opposite state so as to ensure a bump-less transition
		if ((Transition_state == TRANS_P1) || (transition == 0))
    38f0:	20 91 23 05 	lds	r18, 0x0523
    38f4:	22 23       	and	r18, r18
    38f6:	31 f0       	breq	.+12     	; 0x3904 <main+0x5fe>
    38f8:	80 91 21 05 	lds	r24, 0x0521
    38fc:	90 91 22 05 	lds	r25, 0x0522
    3900:	00 97       	sbiw	r24, 0x00	; 0
    3902:	39 f4       	brne	.+14     	; 0x3912 <main+0x60c>
		{
			// Clear P2 I-term while fully in P1
			memset(&IntegralGyro[P2][ROLL], 0, sizeof(int32_t) * NUMBEROFAXIS);
    3904:	8c e0       	ldi	r24, 0x0C	; 12
    3906:	e9 ef       	ldi	r30, 0xF9	; 249
    3908:	f7 e0       	ldi	r31, 0x07	; 7
    390a:	11 92       	st	Z+, r1
    390c:	8a 95       	dec	r24
    390e:	e9 f7       	brne	.-6      	; 0x390a <main+0x604>
    3910:	0b c0       	rjmp	.+22     	; 0x3928 <main+0x622>
		}
		else if ((Transition_state == TRANS_P2) || (transition == 100))
    3912:	29 30       	cpi	r18, 0x09	; 9
    3914:	19 f0       	breq	.+6      	; 0x391c <main+0x616>
    3916:	84 36       	cpi	r24, 0x64	; 100
    3918:	91 05       	cpc	r25, r1
    391a:	31 f4       	brne	.+12     	; 0x3928 <main+0x622>
		{
			// Clear P1 I-term while fully in P2
			memset(&IntegralGyro[P1][ROLL], 0, sizeof(int32_t) * NUMBEROFAXIS);
    391c:	8c e0       	ldi	r24, 0x0C	; 12
    391e:	ad ee       	ldi	r26, 0xED	; 237
    3920:	b7 e0       	ldi	r27, 0x07	; 7
    3922:	1d 92       	st	X+, r1
    3924:	8a 95       	dec	r24
    3926:	e9 f7       	brne	.-6      	; 0x3922 <main+0x61c>
		//************************************************************
		//* Update timers
		//************************************************************

		// Safely get current value of TCNT1
		Save_TCNT1 = TIM16_ReadTCNT1();
    3928:	0e 94 c1 2b 	call	0x5782	; 0x5782 <TIM16_ReadTCNT1>
    392c:	9f 87       	std	Y+15, r25	; 0x0f
    392e:	8e 87       	std	Y+14, r24	; 0x0e
		//RC_Rate_Timer += (Save_TCNT1 - RC_Rate_TCNT1);
		//RC_Rate_TCNT1 = Save_TCNT1;
		
		// Handle TCNT1-based timer correctly - this actually seems necessary...
		// Work out the current RC rate by measuring between incoming RC packets
		if (Save_TCNT1 < RC_Rate_TCNT1)
    3930:	2a 85       	ldd	r18, Y+10	; 0x0a
    3932:	3b 85       	ldd	r19, Y+11	; 0x0b
    3934:	82 17       	cp	r24, r18
    3936:	93 07       	cpc	r25, r19
    3938:	98 f4       	brcc	.+38     	; 0x3960 <main+0x65a>
		{
			RC_Rate_Timer += (65536 - RC_Rate_TCNT1 + Save_TCNT1);
    393a:	80 e0       	ldi	r24, 0x00	; 0
    393c:	90 e0       	ldi	r25, 0x00	; 0
    393e:	a1 e0       	ldi	r26, 0x01	; 1
    3940:	b0 e0       	ldi	r27, 0x00	; 0
    3942:	82 1b       	sub	r24, r18
    3944:	93 0b       	sbc	r25, r19
    3946:	a1 09       	sbc	r26, r1
    3948:	b1 09       	sbc	r27, r1
    394a:	ee 85       	ldd	r30, Y+14	; 0x0e
    394c:	ff 85       	ldd	r31, Y+15	; 0x0f
    394e:	8e 0f       	add	r24, r30
    3950:	9f 1f       	adc	r25, r31
    3952:	a1 1d       	adc	r26, r1
    3954:	b1 1d       	adc	r27, r1
    3956:	88 0e       	add	r8, r24
    3958:	99 1e       	adc	r9, r25
    395a:	aa 1e       	adc	r10, r26
    395c:	bb 1e       	adc	r11, r27
    395e:	0a c0       	rjmp	.+20     	; 0x3974 <main+0x66e>
		}
		else
		{
			RC_Rate_Timer += (Save_TCNT1 - RC_Rate_TCNT1);
    3960:	8e 85       	ldd	r24, Y+14	; 0x0e
    3962:	9f 85       	ldd	r25, Y+15	; 0x0f
    3964:	2a 85       	ldd	r18, Y+10	; 0x0a
    3966:	3b 85       	ldd	r19, Y+11	; 0x0b
    3968:	82 1b       	sub	r24, r18
    396a:	93 0b       	sbc	r25, r19
    396c:	88 0e       	add	r8, r24
    396e:	99 1e       	adc	r9, r25
    3970:	a1 1c       	adc	r10, r1
    3972:	b1 1c       	adc	r11, r1
		}
		
		RC_Rate_TCNT1 = Save_TCNT1;

		// Arm timer for timing stick hold
		Arm_timer += (uint8_t)(TCNT2 - Arm_TCNT2); 
    3974:	80 91 b2 00 	lds	r24, 0x00B2
    3978:	3b 8d       	ldd	r19, Y+27	; 0x1b
    397a:	83 1b       	sub	r24, r19
    397c:	c8 0e       	add	r12, r24
    397e:	d1 1c       	adc	r13, r1
    3980:	e1 1c       	adc	r14, r1
    3982:	f1 1c       	adc	r15, r1
		Arm_TCNT2 = TCNT2;
    3984:	40 91 b2 00 	lds	r20, 0x00B2
    3988:	4b 8f       	std	Y+27, r20	; 0x1b

		// 16-bit timers (Max. 3.35s measurement on T2)
		// All TCNT2 timers increment at 19.531 kHz

		// Sets the desired SERVO_RATE by flagging ServoTick when PWM due
		Servo_Rate += (uint8_t)(TCNT2 - ServoRate_TCNT2);
    398a:	80 91 b2 00 	lds	r24, 0x00B2
    398e:	5e 8d       	ldd	r21, Y+30	; 0x1e
    3990:	85 1b       	sub	r24, r21
    3992:	a8 85       	ldd	r26, Y+8	; 0x08
    3994:	b9 85       	ldd	r27, Y+9	; 0x09
    3996:	a8 0f       	add	r26, r24
    3998:	b1 1d       	adc	r27, r1
    399a:	b9 87       	std	Y+9, r27	; 0x09
    399c:	a8 87       	std	Y+8, r26	; 0x08
		ServoRate_TCNT2 = TCNT2;
    399e:	b0 91 b2 00 	lds	r27, 0x00B2
    39a2:	be 8f       	std	Y+30, r27	; 0x1e
		
		// Signal RC overdue after RC_OVERDUE time (500ms)
		RC_Timeout += (uint8_t)(TCNT2 - Servo_TCNT2);
    39a4:	80 91 b2 00 	lds	r24, 0x00B2
    39a8:	ed 8d       	ldd	r30, Y+29	; 0x1d
    39aa:	8e 1b       	sub	r24, r30
    39ac:	2a a1       	ldd	r18, Y+34	; 0x22
    39ae:	3b a1       	ldd	r19, Y+35	; 0x23
    39b0:	28 0f       	add	r18, r24
    39b2:	31 1d       	adc	r19, r1
    39b4:	3b a3       	std	Y+35, r19	; 0x23
    39b6:	2a a3       	std	Y+34, r18	; 0x22
		Servo_TCNT2 = TCNT2;
    39b8:	30 91 b2 00 	lds	r19, 0x00B2
    39bc:	3d 8f       	std	Y+29, r19	; 0x1d
		
		// Update transition timer
		Transition_timeout += (uint8_t)(TCNT2 - Transition_TCNT2);
    39be:	80 91 b2 00 	lds	r24, 0x00B2
    39c2:	4f 89       	ldd	r20, Y+23	; 0x17
    39c4:	84 1b       	sub	r24, r20
    39c6:	48 0e       	add	r4, r24
    39c8:	51 1c       	adc	r5, r1
		Transition_TCNT2 = TCNT2;
    39ca:	50 91 b2 00 	lds	r21, 0x00B2
    39ce:	5f 8b       	std	Y+23, r21	; 0x17

		// Update status timeout
		Status_timeout += (uint8_t)(TCNT2 - Status_TCNT2);
    39d0:	80 91 b2 00 	lds	r24, 0x00B2
    39d4:	98 8d       	ldd	r25, Y+24	; 0x18
    39d6:	89 1b       	sub	r24, r25
    39d8:	ac 81       	ldd	r26, Y+4	; 0x04
    39da:	bd 81       	ldd	r27, Y+5	; 0x05
    39dc:	a8 0f       	add	r26, r24
    39de:	b1 1d       	adc	r27, r1
    39e0:	bd 83       	std	Y+5, r27	; 0x05
    39e2:	ac 83       	std	Y+4, r26	; 0x04
		Status_TCNT2 = TCNT2;
    39e4:	b0 91 b2 00 	lds	r27, 0x00B2
    39e8:	b8 8f       	std	Y+24, r27	; 0x18
		
		// Status refresh timer
		UpdateStatus_timer += (uint8_t)(TCNT2 - Refresh_TCNT2);
    39ea:	80 91 b2 00 	lds	r24, 0x00B2
    39ee:	e9 8d       	ldd	r30, Y+25	; 0x19
    39f0:	8e 1b       	sub	r24, r30
    39f2:	2e 81       	ldd	r18, Y+6	; 0x06
    39f4:	3f 81       	ldd	r19, Y+7	; 0x07
    39f6:	28 0f       	add	r18, r24
    39f8:	31 1d       	adc	r19, r1
    39fa:	3f 83       	std	Y+7, r19	; 0x07
    39fc:	2e 83       	std	Y+6, r18	; 0x06
		Refresh_TCNT2 = TCNT2;
    39fe:	30 91 b2 00 	lds	r19, 0x00B2
    3a02:	39 8f       	std	Y+25, r19	; 0x19

		// Auto-disarm timer
		Disarm_timer += (uint8_t)(TCNT2 - Disarm_TCNT2);
    3a04:	80 91 b2 00 	lds	r24, 0x00B2
    3a08:	4a 8d       	ldd	r20, Y+26	; 0x1a
    3a0a:	84 1b       	sub	r24, r20
    3a0c:	28 0e       	add	r2, r24
    3a0e:	31 1c       	adc	r3, r1
		Disarm_TCNT2 = TCNT2;
    3a10:	50 91 b2 00 	lds	r21, 0x00B2
    3a14:	5a 8f       	std	Y+26, r21	; 0x1a

		// Timer for audible alarms
		Ticker_Count += (uint8_t)(TCNT2 - Ticker_TCNT2);
    3a16:	80 91 b2 00 	lds	r24, 0x00B2
    3a1a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3a1c:	89 1b       	sub	r24, r25
    3a1e:	aa 89       	ldd	r26, Y+18	; 0x12
    3a20:	bb 89       	ldd	r27, Y+19	; 0x13
    3a22:	a8 0f       	add	r26, r24
    3a24:	b1 1d       	adc	r27, r1
    3a26:	bb 8b       	std	Y+19, r27	; 0x13
    3a28:	aa 8b       	std	Y+18, r26	; 0x12
		Ticker_TCNT2 = TCNT2;
    3a2a:	b0 91 b2 00 	lds	r27, 0x00B2
    3a2e:	bc 8f       	std	Y+28, r27	; 0x1c
		//* Manage desired output update rate when limited by
		//* the PWM rate set to "Low"
		//************************************************************

		// Flag update required based on SERVO_RATE_LOW (50Hz) - 19.97ms
		if (Servo_Rate > SERVO_RATE_LOW)
    3a30:	e8 85       	ldd	r30, Y+8	; 0x08
    3a32:	f9 85       	ldd	r31, Y+9	; 0x09
    3a34:	e7 38       	cpi	r30, 0x87	; 135
    3a36:	f1 40       	sbci	r31, 0x01	; 1
    3a38:	20 f0       	brcs	.+8      	; 0x3a42 <main+0x73c>
		{
			ServoTick = true; // Slow device is ready for output generation
			Servo_Rate = 0;
    3a3a:	19 86       	std	Y+9, r1	; 0x09
    3a3c:	18 86       	std	Y+8, r1	; 0x08
		//************************************************************

		// Flag update required based on SERVO_RATE_LOW (50Hz) - 19.97ms
		if (Servo_Rate > SERVO_RATE_LOW)
		{
			ServoTick = true; // Slow device is ready for output generation
    3a3e:	31 e0       	ldi	r19, 0x01	; 1
    3a40:	3a 83       	std	Y+2, r19	; 0x02
		//************************************************************
		//* Measure incoming RC rate and flag no signal
		//************************************************************

		// Check to see if the RC input is overdue (500ms)
		if (RC_Timeout > RC_OVERDUE)
    3a42:	4a a1       	ldd	r20, Y+34	; 0x22
    3a44:	5b a1       	ldd	r21, Y+35	; 0x23
    3a46:	46 32       	cpi	r20, 0x26	; 38
    3a48:	56 42       	sbci	r21, 0x26	; 38
    3a4a:	18 f0       	brcs	.+6      	; 0x3a52 <main+0x74c>
		{
			Overdue = true;	// This results in a "No Signal" error
    3a4c:	81 e0       	ldi	r24, 0x01	; 1
    3a4e:	80 93 19 05 	sts	0x0519, r24
	
		//************************************************************
		//* Read sensors
		//************************************************************

		ReadGyros();
    3a52:	0e 94 f2 21 	call	0x43e4	; 0x43e4 <ReadGyros>
		ReadAcc();
    3a56:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <ReadAcc>
		// These two are concatenated to create a virtual timer that can measure up to 
		// 256 x 26.2ms = 6.7072s at which point the "period" is 16,768,000, a 24-bit number
		//************************************************************
		
		// Safely get current value of TCNT1
		Save_TCNT1 = TIM16_ReadTCNT1();
    3a5a:	0e 94 c1 2b 	call	0x5782	; 0x5782 <TIM16_ReadTCNT1>
		
		// Reset Timer0 count
		TCNT0 = 0;
    3a5e:	16 bc       	out	0x26, r1	; 38

		// Handle TCNT1 overflow correctly - this actually seems necessary...
		// ticker_16 will hold the most recent amount measured by TCNT1
		// Timer1 (16bit) - run @ 2.5MHz (400ns) - max 26.2ms
		if (Save_TCNT1 < LoopStartTCNT1)
    3a60:	20 91 1a 05 	lds	r18, 0x051A
    3a64:	30 91 1b 05 	lds	r19, 0x051B
    3a68:	82 17       	cp	r24, r18
    3a6a:	93 07       	cpc	r25, r19
    3a6c:	48 f4       	brcc	.+18     	; 0x3a80 <main+0x77a>
		{
			ticker_16 = (65536 - LoopStartTCNT1) + Save_TCNT1;
    3a6e:	20 91 1a 05 	lds	r18, 0x051A
    3a72:	30 91 1b 05 	lds	r19, 0x051B
    3a76:	dc 01       	movw	r26, r24
    3a78:	a2 1b       	sub	r26, r18
    3a7a:	b3 0b       	sbc	r27, r19
    3a7c:	9d 01       	movw	r18, r26
    3a7e:	08 c0       	rjmp	.+16     	; 0x3a90 <main+0x78a>
		}
		else
		{
			ticker_16 = (Save_TCNT1 - LoopStartTCNT1);
    3a80:	20 91 1a 05 	lds	r18, 0x051A
    3a84:	30 91 1b 05 	lds	r19, 0x051B
    3a88:	fc 01       	movw	r30, r24
    3a8a:	e2 1b       	sub	r30, r18
    3a8c:	f3 0b       	sbc	r31, r19
    3a8e:	9f 01       	movw	r18, r30
		}
		
		// Store old TCNT for next measurement
		LoopStartTCNT1 = Save_TCNT1;
    3a90:	90 93 1b 05 	sts	0x051B, r25
    3a94:	80 93 1a 05 	sts	0x051A, r24
		
		// Handle both Timer1 under- and over-run cases
		// If TMR0_counter is less than 2, ICNT1 has not overflowed
		if (TMR0_counter < 2)
    3a98:	80 91 cd 07 	lds	r24, 0x07CD
    3a9c:	90 91 ce 07 	lds	r25, 0x07CE
    3aa0:	a9 01       	movw	r20, r18
    3aa2:	60 e0       	ldi	r22, 0x00	; 0
    3aa4:	70 e0       	ldi	r23, 0x00	; 0
    3aa6:	02 97       	sbiw	r24, 0x02	; 2
    3aa8:	48 f4       	brcc	.+18     	; 0x3abc <main+0x7b6>
		{
			interval = ticker_16;
    3aaa:	40 93 5b 05 	sts	0x055B, r20
    3aae:	50 93 5c 05 	sts	0x055C, r21
    3ab2:	60 93 5d 05 	sts	0x055D, r22
    3ab6:	70 93 5e 05 	sts	0x055E, r23
    3aba:	19 c0       	rjmp	.+50     	; 0x3aee <main+0x7e8>
		// So we use chunks of TCNT0, counted during the loop interval
		// to work out the exact period.
		// Timer0 (8bit) - run @ 20MHz / 1024 = 19.531kHz or 51.2us - max 13.1ms
		else
		{
			interval = ticker_16 + (TMR0_counter * 32768);
    3abc:	80 91 cd 07 	lds	r24, 0x07CD
    3ac0:	90 91 ce 07 	lds	r25, 0x07CE
    3ac4:	a0 e0       	ldi	r26, 0x00	; 0
    3ac6:	b0 e0       	ldi	r27, 0x00	; 0
    3ac8:	3f e0       	ldi	r19, 0x0F	; 15
    3aca:	88 0f       	add	r24, r24
    3acc:	99 1f       	adc	r25, r25
    3ace:	aa 1f       	adc	r26, r26
    3ad0:	bb 1f       	adc	r27, r27
    3ad2:	3a 95       	dec	r19
    3ad4:	d1 f7       	brne	.-12     	; 0x3aca <main+0x7c4>
    3ad6:	84 0f       	add	r24, r20
    3ad8:	95 1f       	adc	r25, r21
    3ada:	a6 1f       	adc	r26, r22
    3adc:	b7 1f       	adc	r27, r23
    3ade:	80 93 5b 05 	sts	0x055B, r24
    3ae2:	90 93 5c 05 	sts	0x055C, r25
    3ae6:	a0 93 5d 05 	sts	0x055D, r26
    3aea:	b0 93 5e 05 	sts	0x055E, r27
		}

		TMR0_counter = 0;
    3aee:	10 92 ce 07 	sts	0x07CE, r1
    3af2:	10 92 cd 07 	sts	0x07CD, r1
				
		// Call IMU with interval
		simple_imu_update(interval);
    3af6:	60 91 5b 05 	lds	r22, 0x055B
    3afa:	70 91 5c 05 	lds	r23, 0x055C
    3afe:	80 91 5d 05 	lds	r24, 0x055D
    3b02:	90 91 5e 05 	lds	r25, 0x055E
    3b06:	0e 94 2e 26 	call	0x4c5c	; 0x4c5c <simple_imu_update>

		//************************************************************
		//* Update I-terms, average gyro values
		//************************************************************

		Sensor_PID();
    3b0a:	0e 94 fc 3d 	call	0x7bf8	; 0x7bf8 <Sensor_PID>
		
		//************************************************************
		//* Measure incoming RC. Result in SlowRC state and RC_Rate_Timer
		//************************************************************

		if (Interrupted)
    3b0e:	80 91 ca 07 	lds	r24, 0x07CA
    3b12:	88 23       	and	r24, r24
    3b14:	09 f4       	brne	.+2      	; 0x3b18 <main+0x812>
    3b16:	41 c0       	rjmp	.+130    	; 0x3b9a <main+0x894>
		{
			// Measure incoming RC rate. Threshold is 60Hz.
			// In high-speed mode, the RC rate will be unfairly marked as "slow" once measured and interrupt blocking starts.
			// To stop this being a problem, only set SlowRC prior to RCrateMeasured becoming true in this mode
			if (((Config.Servo_rate == FAST) && (!RCrateMeasured)) || (Config.Servo_rate < FAST))
    3b18:	20 91 3e 06 	lds	r18, 0x063E
    3b1c:	22 30       	cpi	r18, 0x02	; 2
    3b1e:	19 f4       	brne	.+6      	; 0x3b26 <main+0x820>
    3b20:	01 11       	cpse	r16, r1
    3b22:	1e c0       	rjmp	.+60     	; 0x3b60 <main+0x85a>
    3b24:	02 c0       	rjmp	.+4      	; 0x3b2a <main+0x824>
    3b26:	22 30       	cpi	r18, 0x02	; 2
    3b28:	dc f4       	brge	.+54     	; 0x3b60 <main+0x85a>
			{
				if (RC_Rate_Timer > SLOW_RC_RATE)
    3b2a:	f4 ec       	ldi	r31, 0xC4	; 196
    3b2c:	8f 16       	cp	r8, r31
    3b2e:	f2 ea       	ldi	r31, 0xA2	; 162
    3b30:	9f 06       	cpc	r9, r31
    3b32:	a1 04       	cpc	r10, r1
    3b34:	b1 04       	cpc	r11, r1
    3b36:	20 f0       	brcs	.+8      	; 0x3b40 <main+0x83a>
				{
					SlowRC = true;
    3b38:	81 e0       	ldi	r24, 0x01	; 1
    3b3a:	80 93 00 01 	sts	0x0100, r24
    3b3e:	02 c0       	rjmp	.+4      	; 0x3b44 <main+0x83e>
				}
				else
				{
					SlowRC = false;
    3b40:	10 92 00 01 	sts	0x0100, r1
				}		
				
				// If RC rate not measured yet keep refreshing RC_Master_Timer		
				// This is only valid for high speed mode. Other modes just use the SlowRC flag.
				// Note that Framerate is only valid for serial data
				RC_Master_Timer = FrameRate; 
    3b44:	80 91 e8 07 	lds	r24, 0x07E8
    3b48:	90 91 e9 07 	lds	r25, 0x07E9
    3b4c:	a0 e0       	ldi	r26, 0x00	; 0
    3b4e:	b0 e0       	ldi	r27, 0x00	; 0
    3b50:	80 93 14 05 	sts	0x0514, r24
    3b54:	90 93 15 05 	sts	0x0515, r25
    3b58:	a0 93 16 05 	sts	0x0516, r26
    3b5c:	b0 93 17 05 	sts	0x0517, r27
			
			// Reset RC timeout
			RC_Timeout = 0;

			// No longer overdue
			Overdue = false;
    3b60:	10 92 19 05 	sts	0x0519, r1
			
			// Reset rate timer once data received
			RC_Rate_Timer = 0;
							
			// Increment interrupt counter
			RC_Interrupts++;		
    3b64:	4c 89       	ldd	r20, Y+20	; 0x14
    3b66:	5d 89       	ldd	r21, Y+21	; 0x15
    3b68:	4f 5f       	subi	r20, 0xFF	; 255
    3b6a:	5f 4f       	sbci	r21, 0xFF	; 255
    3b6c:	5d 8b       	std	Y+21, r21	; 0x15
    3b6e:	4c 8b       	std	Y+20, r20	; 0x14

			// Block RC interrupts until timeout if period has been calculated
			if ((Config.Servo_rate == FAST) && RCrateMeasured)
    3b70:	22 30       	cpi	r18, 0x02	; 2
    3b72:	71 f4       	brne	.+28     	; 0x3b90 <main+0x88a>
    3b74:	00 23       	and	r16, r16
    3b76:	a1 f0       	breq	.+40     	; 0x3ba0 <main+0x89a>
			{
				Interrupted = false;		// Cancel pending interruots
    3b78:	10 92 ca 07 	sts	0x07CA, r1
				Disable_RC_Interrupts();	// Disable RC interrupts
    3b7c:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <Disable_RC_Interrupts>
				// Note that Framerate is only valid for serial data
				RC_Master_Timer = FrameRate; 
			}
			
			// Reset RC timeout
			RC_Timeout = 0;
    3b80:	1b a2       	std	Y+35, r1	; 0x23
    3b82:	1a a2       	std	Y+34, r1	; 0x22

			// No longer overdue
			Overdue = false;
			
			// Reset rate timer once data received
			RC_Rate_Timer = 0;
    3b84:	81 2c       	mov	r8, r1
    3b86:	91 2c       	mov	r9, r1
    3b88:	54 01       	movw	r10, r8
			// Block RC interrupts until timeout if period has been calculated
			if ((Config.Servo_rate == FAST) && RCrateMeasured)
			{
				Interrupted = false;		// Cancel pending interruots
				Disable_RC_Interrupts();	// Disable RC interrupts
				RCInterruptsON = false;		// Flag it for the rest of the code
    3b8a:	18 8a       	std	Y+16, r1	; 0x10
				PWMBlocked = false;			// Enable PWM generation
    3b8c:	19 82       	std	Y+1, r1	; 0x01
    3b8e:	49 c0       	rjmp	.+146    	; 0x3c22 <main+0x91c>
				// Note that Framerate is only valid for serial data
				RC_Master_Timer = FrameRate; 
			}
			
			// Reset RC timeout
			RC_Timeout = 0;
    3b90:	1b a2       	std	Y+35, r1	; 0x23
    3b92:	1a a2       	std	Y+34, r1	; 0x22

			// No longer overdue
			Overdue = false;
			
			// Reset rate timer once data received
			RC_Rate_Timer = 0;
    3b94:	81 2c       	mov	r8, r1
    3b96:	91 2c       	mov	r9, r1
    3b98:	54 01       	movw	r10, r8
		//************************************************************
		//* Work out the high speed mode RC blocking period once only. Only relevant for high speed mode.
		//* Wait for at least five interrupt cycles before measuring.
		//************************************************************

		if(!RCrateMeasured && (RC_Interrupts > 5))
    3b9a:	01 11       	cpse	r16, r1
    3b9c:	42 c0       	rjmp	.+132    	; 0x3c22 <main+0x91c>
    3b9e:	05 c0       	rjmp	.+10     	; 0x3baa <main+0x8a4>
				// Note that Framerate is only valid for serial data
				RC_Master_Timer = FrameRate; 
			}
			
			// Reset RC timeout
			RC_Timeout = 0;
    3ba0:	1b a2       	std	Y+35, r1	; 0x23
    3ba2:	1a a2       	std	Y+34, r1	; 0x22

			// No longer overdue
			Overdue = false;
			
			// Reset rate timer once data received
			RC_Rate_Timer = 0;
    3ba4:	81 2c       	mov	r8, r1
    3ba6:	91 2c       	mov	r9, r1
    3ba8:	54 01       	movw	r10, r8
		//************************************************************
		//* Work out the high speed mode RC blocking period once only. Only relevant for high speed mode.
		//* Wait for at least five interrupt cycles before measuring.
		//************************************************************

		if(!RCrateMeasured && (RC_Interrupts > 5))
    3baa:	8c 89       	ldd	r24, Y+20	; 0x14
    3bac:	9d 89       	ldd	r25, Y+21	; 0x15
    3bae:	06 97       	sbiw	r24, 0x06	; 6
    3bb0:	b8 f1       	brcs	.+110    	; 0x3c20 <main+0x91a>
		{
			// Work out the exact amount of time, at the current loop rate that we must wait before
			// signalling "last call" and re-enabling interrupts

			// RC rate is 22ms
			if (SlowRC)
    3bb2:	80 91 00 01 	lds	r24, 0x0100
    3bb6:	88 23       	and	r24, r24
    3bb8:	c9 f0       	breq	.+50     	; 0x3bec <main+0x8e6>
			{
				// 41ms (8 cycles)
				PWM_Available_Timer = (2 * (RC_Master_Timer + SBUS_PERIOD)) - SBUS_PERIOD - PWM_PERIOD - PWM_PERIOD;
    3bba:	80 91 14 05 	lds	r24, 0x0514
    3bbe:	90 91 15 05 	lds	r25, 0x0515
    3bc2:	a0 91 16 05 	lds	r26, 0x0516
    3bc6:	b0 91 17 05 	lds	r27, 0x0517
    3bca:	88 0f       	add	r24, r24
    3bcc:	99 1f       	adc	r25, r25
    3bce:	aa 1f       	adc	r26, r26
    3bd0:	bb 1f       	adc	r27, r27
    3bd2:	8a 57       	subi	r24, 0x7A	; 122
    3bd4:	9f 43       	sbci	r25, 0x3F	; 63
    3bd6:	a1 09       	sbc	r26, r1
    3bd8:	b1 09       	sbc	r27, r1
    3bda:	80 93 10 05 	sts	0x0510, r24
    3bde:	90 93 11 05 	sts	0x0511, r25
    3be2:	a0 93 12 05 	sts	0x0512, r26
    3be6:	b0 93 13 05 	sts	0x0513, r27
    3bea:	18 c0       	rjmp	.+48     	; 0x3c1c <main+0x916>

			// RC rate is 11ms
			else
			{
				// 30ms (6 cycles)
				PWM_Available_Timer = (3 * (RC_Master_Timer + SBUS_PERIOD)) - SBUS_PERIOD - PWM_PERIOD - PWM_PERIOD;
    3bec:	20 91 14 05 	lds	r18, 0x0514
    3bf0:	30 91 15 05 	lds	r19, 0x0515
    3bf4:	40 91 16 05 	lds	r20, 0x0516
    3bf8:	50 91 17 05 	lds	r21, 0x0517
    3bfc:	a3 e0       	ldi	r26, 0x03	; 3
    3bfe:	b0 e0       	ldi	r27, 0x00	; 0
    3c00:	0e 94 e5 47 	call	0x8fca	; 0x8fca <__muluhisi3>
    3c04:	6c 54       	subi	r22, 0x4C	; 76
    3c06:	7d 41       	sbci	r23, 0x1D	; 29
    3c08:	81 09       	sbc	r24, r1
    3c0a:	91 09       	sbc	r25, r1
    3c0c:	60 93 10 05 	sts	0x0510, r22
    3c10:	70 93 11 05 	sts	0x0511, r23
    3c14:	80 93 12 05 	sts	0x0512, r24
    3c18:	90 93 13 05 	sts	0x0513, r25
			}
			
			// Once the high speed rate has been calculated, signal that PWM is good to go.
			RCrateMeasured = true;			
    3c1c:	01 e0       	ldi	r16, 0x01	; 1
    3c1e:	01 c0       	rjmp	.+2      	; 0x3c22 <main+0x91c>
    3c20:	00 e0       	ldi	r16, 0x00	; 0
		//************************************************************
		//* Enable RC interrupts when ready (RC rate measured and RC interrupts OFF)
		//* and set PWM last call made
		//************************************************************

		if ((RC_Rate_Timer > PWM_Available_Timer) && RCrateMeasured && !RCInterruptsON)
    3c22:	80 91 10 05 	lds	r24, 0x0510
    3c26:	90 91 11 05 	lds	r25, 0x0511
    3c2a:	a0 91 12 05 	lds	r26, 0x0512
    3c2e:	b0 91 13 05 	lds	r27, 0x0513
    3c32:	88 15       	cp	r24, r8
    3c34:	99 05       	cpc	r25, r9
    3c36:	aa 05       	cpc	r26, r10
    3c38:	bb 05       	cpc	r27, r11
    3c3a:	58 f4       	brcc	.+22     	; 0x3c52 <main+0x94c>
    3c3c:	00 23       	and	r16, r16
    3c3e:	49 f0       	breq	.+18     	; 0x3c52 <main+0x94c>
    3c40:	98 89       	ldd	r25, Y+16	; 0x10
    3c42:	91 11       	cpse	r25, r1
    3c44:	06 c0       	rjmp	.+12     	; 0x3c52 <main+0x94c>
		{
			// Re-enable interrupts
			init_int();
    3c46:	0e 94 43 2d 	call	0x5a86	; 0x5a86 <init_int>
			RCInterruptsON = true;
			
			// Signal last PWM generation
			PWM_Last_Call = true;
    3c4a:	a1 e0       	ldi	r26, 0x01	; 1
    3c4c:	a9 8b       	std	Y+17, r26	; 0x11

		if ((RC_Rate_Timer > PWM_Available_Timer) && RCrateMeasured && !RCInterruptsON)
		{
			// Re-enable interrupts
			init_int();
			RCInterruptsON = true;
    3c4e:	b1 e0       	ldi	r27, 0x01	; 1
    3c50:	b8 8b       	std	Y+16, r27	; 0x10
		//************************************************************

		// Cases where we are ready to output
		if	(
				// Interrupted and LOW or SYNC
				((Config.Servo_rate != FAST) && (Interrupted)) ||			// Run at RC rate
    3c52:	90 91 3e 06 	lds	r25, 0x063E
		//* Output PWM to ESCs/Servos where required, 
		//* based on a very specific set of conditions
		//************************************************************

		// Cases where we are ready to output
		if	(
    3c56:	92 30       	cpi	r25, 0x02	; 2
    3c58:	41 f0       	breq	.+16     	; 0x3c6a <main+0x964>
				// Interrupted and LOW or SYNC
				((Config.Servo_rate != FAST) && (Interrupted)) ||			// Run at RC rate
    3c5a:	80 91 ca 07 	lds	r24, 0x07CA
    3c5e:	88 23       	and	r24, r24
    3c60:	09 f4       	brne	.+2      	; 0x3c64 <main+0x95e>
    3c62:	57 c0       	rjmp	.+174    	; 0x3d12 <main+0xa0c>
			//* High speed in FAST mode
			//******************************************************************

			if (Config.Servo_rate != FAST)
			{
				Interrupted = false;		// Reset interrupted flag if that was the cause of entry			
    3c64:	10 92 ca 07 	sts	0x07CA, r1
    3c68:	03 c0       	rjmp	.+6      	; 0x3c70 <main+0x96a>
		if	(
				// Interrupted and LOW or SYNC
				((Config.Servo_rate != FAST) && (Interrupted)) ||			// Run at RC rate

				// Every loop in FAST mode unless blocked
				((Config.Servo_rate == FAST) && (!PWMBlocked))				// Run at full loop rate if allowed
    3c6a:	e9 81       	ldd	r30, Y+1	; 0x01
    3c6c:	e1 11       	cpse	r30, r1
    3c6e:	51 c0       	rjmp	.+162    	; 0x3d12 <main+0xa0c>
    3c70:	e7 e4       	ldi	r30, 0x47	; 71
    3c72:	f6 e0       	ldi	r31, 0x06	; 6

		if ((RC_Rate_Timer > PWM_Available_Timer) && RCrateMeasured && !RCInterruptsON)
		{
			// Re-enable interrupts
			init_int();
			RCInterruptsON = true;
    3c74:	20 e0       	ldi	r18, 0x00	; 0
    3c76:	30 e0       	ldi	r19, 0x00	; 0
			}

			// Decide which outputs fire this time, depending on their device setting (A.Servo, D.Servo, Motor)
			// D.Servo, Motor are always ready, but A.Servo must be limited to Servo_rate, flagged by ServoTick

			ServoFlag = 0;
    3c78:	80 e0       	ldi	r24, 0x00	; 0
				
			// For each output, mark the ones that are to fire this time
			for (i = 0; i < MAX_OUTPUTS; i++)
			{
				// Mark bits depending on the selected output type
				if	(
    3c7a:	92 30       	cpi	r25, 0x02	; 2
    3c7c:	29 f4       	brne	.+10     	; 0x3c88 <main+0x982>
						((Config.Servo_rate == FAST) && (Config.Channel[i].Motor_marker == ASERVO) && ServoTick) ||					// At ServoTick for A.Servo in FAST mode
    3c7e:	40 81       	ld	r20, Z
    3c80:	41 11       	cpse	r20, r1
    3c82:	15 c0       	rjmp	.+42     	; 0x3cae <main+0x9a8>
    3c84:	4a 81       	ldd	r20, Y+2	; 0x02
    3c86:	0e c0       	rjmp	.+28     	; 0x3ca4 <main+0x99e>
    3c88:	91 30       	cpi	r25, 0x01	; 1
    3c8a:	79 f4       	brne	.+30     	; 0x3caa <main+0x9a4>
						((Config.Servo_rate == SYNC) && (Config.Channel[i].Motor_marker == ASERVO) && (!SlowRC) && ServoTick) ||	// At ServoTick for A.Servo in SYNC with Fast RC
    3c8c:	40 81       	ld	r20, Z
    3c8e:	41 11       	cpse	r20, r1
    3c90:	0e c0       	rjmp	.+28     	; 0x3cae <main+0x9a8>
    3c92:	40 91 00 01 	lds	r20, 0x0100
    3c96:	41 11       	cpse	r20, r1
    3c98:	03 c0       	rjmp	.+6      	; 0x3ca0 <main+0x99a>
    3c9a:	5a 81       	ldd	r21, Y+2	; 0x02
    3c9c:	51 11       	cpse	r21, r1
    3c9e:	18 c0       	rjmp	.+48     	; 0x3cd0 <main+0x9ca>
						((Config.Servo_rate == SYNC) && (Config.Channel[i].Motor_marker == ASERVO) && (SlowRC)) ||					// At RC rate for A.Servo with slow RC
    3ca0:	40 91 00 01 	lds	r20, 0x0100
    3ca4:	41 11       	cpse	r20, r1
    3ca6:	14 c0       	rjmp	.+40     	; 0x3cd0 <main+0x9ca>
    3ca8:	02 c0       	rjmp	.+4      	; 0x3cae <main+0x9a8>
    3caa:	19 16       	cp	r1, r25
    3cac:	24 f4       	brge	.+8      	; 0x3cb6 <main+0x9b0>
						((Config.Servo_rate >= SYNC) && (Config.Channel[i].Motor_marker > ASERVO)) ||								// Always for D.Servo and Motor in SYNC or FAST modes
    3cae:	40 81       	ld	r20, Z
    3cb0:	14 16       	cp	r1, r20
    3cb2:	74 f0       	brlt	.+28     	; 0x3cd0 <main+0x9ca>
    3cb4:	15 c0       	rjmp	.+42     	; 0x3ce0 <main+0x9da>
    3cb6:	91 11       	cpse	r25, r1
    3cb8:	13 c0       	rjmp	.+38     	; 0x3ce0 <main+0x9da>
						((Config.Servo_rate == LOW) && (!SlowRC) && ServoTick) ||													// All outputs at ServoTick in LOW mode with fast RC
    3cba:	40 91 00 01 	lds	r20, 0x0100
    3cbe:	41 11       	cpse	r20, r1
    3cc0:	03 c0       	rjmp	.+6      	; 0x3cc8 <main+0x9c2>
    3cc2:	aa 81       	ldd	r26, Y+2	; 0x02
    3cc4:	a1 11       	cpse	r26, r1
    3cc6:	04 c0       	rjmp	.+8      	; 0x3cd0 <main+0x9ca>
						((Config.Servo_rate == LOW) && (SlowRC))																	// All outputs at  RC rate in LOW mode with slow RC
    3cc8:	40 91 00 01 	lds	r20, 0x0100
    3ccc:	44 23       	and	r20, r20
    3cce:	41 f0       	breq	.+16     	; 0x3ce0 <main+0x9da>
					)
				{
					ServoFlag |= (1 << i);
    3cd0:	41 e0       	ldi	r20, 0x01	; 1
    3cd2:	50 e0       	ldi	r21, 0x00	; 0
    3cd4:	02 2e       	mov	r0, r18
    3cd6:	01 c0       	rjmp	.+2      	; 0x3cda <main+0x9d4>
    3cd8:	44 0f       	add	r20, r20
    3cda:	0a 94       	dec	r0
    3cdc:	ea f7       	brpl	.-6      	; 0x3cd8 <main+0x9d2>
    3cde:	84 2b       	or	r24, r20
    3ce0:	2f 5f       	subi	r18, 0xFF	; 255
    3ce2:	3f 4f       	sbci	r19, 0xFF	; 255
    3ce4:	b6 96       	adiw	r30, 0x26	; 38
			// D.Servo, Motor are always ready, but A.Servo must be limited to Servo_rate, flagged by ServoTick

			ServoFlag = 0;
				
			// For each output, mark the ones that are to fire this time
			for (i = 0; i < MAX_OUTPUTS; i++)
    3ce6:	28 30       	cpi	r18, 0x08	; 8
    3ce8:	31 05       	cpc	r19, r1
    3cea:	39 f6       	brne	.-114    	; 0x3c7a <main+0x974>
			{
				ServoTick = false;
			}

			// Block PWM generation after last call called
			if (PWM_Last_Call)
    3cec:	b9 89       	ldd	r27, Y+17	; 0x11
    3cee:	bb 23       	and	r27, r27
    3cf0:	11 f0       	breq	.+4      	; 0x3cf6 <main+0x9f0>
			{
				PWMBlocked = true;				// Block PWM generation on notification of last call
    3cf2:	e1 e0       	ldi	r30, 0x01	; 1
    3cf4:	e9 83       	std	Y+1, r30	; 0x01
				PWM_Last_Call = false;			// Reset last call flag	
			}
			
			Calculate_PID();					// Calculate PID values
    3cf6:	89 a3       	std	Y+33, r24	; 0x21
    3cf8:	0e 94 b5 3f 	call	0x7f6a	; 0x7f6a <Calculate_PID>
			ProcessMixer();						// Do all the mixer tasks - can be very slow
    3cfc:	0e 94 9d 36 	call	0x6d3a	; 0x6d3a <ProcessMixer>
			UpdateServos();						// Transfer Config.Channel[i].value data to ServoOut[i] and check servo limits
    3d00:	0e 94 3d 36 	call	0x6c7a	; 0x6c7a <UpdateServos>
			output_servo_ppm(ServoFlag);		// Output servo signal
    3d04:	89 a1       	ldd	r24, Y+33	; 0x21
    3d06:	0e 94 4e 43 	call	0x869c	; 0x869c <output_servo_ppm>
			
			LoopCount = 0;						// Reset loop counter for averaging accVert
    3d0a:	10 92 18 05 	sts	0x0518, r1
    3d0e:	19 8a       	std	Y+17, r1	; 0x11
    3d10:	1a 82       	std	Y+2, r1	; 0x02
		//* Carefully update idle screen if error level changed
		//************************************************************	

		// Only update idle when error state has changed.
		// This prevents the continual updating of the LCD disrupting the FC
		if (old_alarms != General_error)
    3d12:	80 91 20 05 	lds	r24, 0x0520
    3d16:	f8 a1       	ldd	r31, Y+32	; 0x20
    3d18:	f8 13       	cpse	r31, r24
		{
			// Force update of idle screen
			Menu_mode = STATUS_TIMEOUT;
    3d1a:	16 e0       	ldi	r17, 0x06	; 6
		}
			
		// Save current alarm state into old_alarms
		old_alarms = General_error;
    3d1c:	20 91 20 05 	lds	r18, 0x0520
    3d20:	28 a3       	std	Y+32, r18	; 0x20
		//************************************************************
		//* Transition state handling
		//************************************************************

		// Update timed transition when changing flight modes
		if (Config.FlightSel != old_flight)
    3d22:	7e 88       	ldd	r7, Y+22	; 0x16
		//************************************************************
		//* Update timers
		//************************************************************

		// Safely get current value of TCNT1
		Save_TCNT1 = TIM16_ReadTCNT1();
    3d24:	4e 85       	ldd	r20, Y+14	; 0x0e
    3d26:	5f 85       	ldd	r21, Y+15	; 0x0f
    3d28:	5b 87       	std	Y+11, r21	; 0x0b
    3d2a:	4a 87       	std	Y+10, r20	; 0x0a
		}
			
		// Save current alarm state into old_alarms
		old_alarms = General_error;
		
	} // while loop
    3d2c:	26 cb       	rjmp	.-2484   	; 0x337a <main+0x74>
			// Trim lower end to zero (0 to 2250)
			if (temp1 < 0) temp1 = 0;

			// Convert 0 to 2250 to 0 to 125. Divide by 20
			// Round to avoid truncation errors
			transition = (temp1 + 10) / 20;
    3d2e:	70 93 22 05 	sts	0x0522, r23
    3d32:	60 93 21 05 	sts	0x0521, r22

		// Always in the TRANSITIONING state when Config.TransitionSpeed is 0
		// This prevents state changes when controlled by a channel
		if (Config.TransitionSpeed == 0)
		{
			Transition_state = TRANSITIONING;
    3d36:	85 e0       	ldi	r24, 0x05	; 5
    3d38:	80 93 23 05 	sts	0x0523, r24
    3d3c:	0f cd       	rjmp	.-1506   	; 0x375c <main+0x456>

00003d3e <spiwrite>:
const uint8_t pagemap[] PROGMEM 		= { 7, 6, 5, 4, 3, 2, 1, 0 }; 
const uint8_t lcd_commmands[] PROGMEM	= {0xAF,0x40,0xA0,0xA6,0xA4,0xA2,0xEE,0xC8,0x2F,0x24,0xAC,0x00,0xF8,0x00};	// LCD command string 14

// Software SPI write
inline void spiwrite(uint8_t c) 
{
    3d3e:	0f 93       	push	r16
    3d40:	1f 93       	push	r17
    3d42:	cf 93       	push	r28
    3d44:	df 93       	push	r29
    3d46:	c7 e0       	ldi	r28, 0x07	; 7
    3d48:	d0 e0       	ldi	r29, 0x00	; 0
	int8_t i;
	for (i = 7; i >= 0; i--) 
	{
		LCD_SCL = 0;
		if (c & (1 << (i)))		// Bit set?
    3d4a:	08 2f       	mov	r16, r24
    3d4c:	10 e0       	ldi	r17, 0x00	; 0
inline void spiwrite(uint8_t c) 
{
	int8_t i;
	for (i = 7; i >= 0; i--) 
	{
		LCD_SCL = 0;
    3d4e:	5c 98       	cbi	0x0b, 4	; 11
		if (c & (1 << (i)))		// Bit set?
    3d50:	c8 01       	movw	r24, r16
    3d52:	0c 2e       	mov	r0, r28
    3d54:	02 c0       	rjmp	.+4      	; 0x3d5a <spiwrite+0x1c>
    3d56:	95 95       	asr	r25
    3d58:	87 95       	ror	r24
    3d5a:	0a 94       	dec	r0
    3d5c:	e2 f7       	brpl	.-8      	; 0x3d56 <spiwrite+0x18>
    3d5e:	80 ff       	sbrs	r24, 0
    3d60:	02 c0       	rjmp	.+4      	; 0x3d66 <spiwrite+0x28>
		{
			LCD_SI = 1;
    3d62:	59 9a       	sbi	0x0b, 1	; 11
    3d64:	01 c0       	rjmp	.+2      	; 0x3d68 <spiwrite+0x2a>
		}
		else					// Bit clear?
		{
			LCD_SI = 0;
    3d66:	59 98       	cbi	0x0b, 1	; 11
		}
		
		LCD_SCL = 1;
    3d68:	5c 9a       	sbi	0x0b, 4	; 11

		glcd_delay();			// 250ns
    3d6a:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <glcd_delay>
    3d6e:	21 97       	sbiw	r28, 0x01	; 1
    3d70:	70 f7       	brcc	.-36     	; 0x3d4e <spiwrite+0x10>
	}
}
    3d72:	df 91       	pop	r29
    3d74:	cf 91       	pop	r28
    3d76:	1f 91       	pop	r17
    3d78:	0f 91       	pop	r16
    3d7a:	08 95       	ret

00003d7c <st7565_command>:

// Send command to LCD
void st7565_command(uint8_t c) 
{
	LCD_A0 = 0;
    3d7c:	5f 98       	cbi	0x0b, 7	; 11
	spiwrite(c);
    3d7e:	0c 94 9f 1e 	jmp	0x3d3e	; 0x3d3e <spiwrite>

00003d82 <st7565_data>:
}

// Send data to LCD
void st7565_data(uint8_t c) 
{
	LCD_A0 = 1;
    3d82:	5f 9a       	sbi	0x0b, 7	; 11
	spiwrite(c);
    3d84:	0c 94 9f 1e 	jmp	0x3d3e	; 0x3d3e <spiwrite>

00003d88 <st7565_set_brightness>:
}


// Set LCD brightness
void st7565_set_brightness(uint8_t val) 
{
    3d88:	cf 93       	push	r28
    3d8a:	c8 2f       	mov	r28, r24
	st7565_command(CMD_SET_VOLUME_FIRST);					// 0x81
    3d8c:	81 e8       	ldi	r24, 0x81	; 129
    3d8e:	0e 94 be 1e 	call	0x3d7c	; 0x3d7c <st7565_command>
	st7565_command(val);
    3d92:	8c 2f       	mov	r24, r28
}
    3d94:	cf 91       	pop	r28

// Set LCD brightness
void st7565_set_brightness(uint8_t val) 
{
	st7565_command(CMD_SET_VOLUME_FIRST);					// 0x81
	st7565_command(val);
    3d96:	0c 94 be 1e 	jmp	0x3d7c	; 0x3d7c <st7565_command>

00003d9a <st7565_init>:
	spiwrite(c);
}

// Initialise LCD
void st7565_init(void) 
{
    3d9a:	cf 93       	push	r28
    3d9c:	df 93       	push	r29
	// Toggle RST low to reset and CS low so it'll listen to us
	LCD_CSI = 0;
    3d9e:	5d 98       	cbi	0x0b, 5	; 11
	LCD_RES = 0;
    3da0:	5e 98       	cbi	0x0b, 6	; 11
    3da2:	87 e8       	ldi	r24, 0x87	; 135
    3da4:	93 e1       	ldi	r25, 0x13	; 19
    3da6:	01 97       	sbiw	r24, 0x01	; 1
    3da8:	f1 f7       	brne	.-4      	; 0x3da6 <st7565_init+0xc>
    3daa:	00 c0       	rjmp	.+0      	; 0x3dac <st7565_init+0x12>
    3dac:	00 00       	nop
	_delay_ms(1); // Datasheet says 1us for 3.3V operation
	LCD_RES = 1;
    3dae:	5e 9a       	sbi	0x0b, 6	; 11
    3db0:	c8 ec       	ldi	r28, 0xC8	; 200
    3db2:	dd e0       	ldi	r29, 0x0D	; 13

	// Send command sequence
	for (int i = 0; i < 14; i++)
	{
		st7565_command((uint8_t)pgm_read_byte(&lcd_commmands[i]));
    3db4:	fe 01       	movw	r30, r28
    3db6:	84 91       	lpm	r24, Z
    3db8:	0e 94 be 1e 	call	0x3d7c	; 0x3d7c <st7565_command>
    3dbc:	21 96       	adiw	r28, 0x01	; 1
	LCD_RES = 0;
	_delay_ms(1); // Datasheet says 1us for 3.3V operation
	LCD_RES = 1;

	// Send command sequence
	for (int i = 0; i < 14; i++)
    3dbe:	fd e0       	ldi	r31, 0x0D	; 13
    3dc0:	c6 3d       	cpi	r28, 0xD6	; 214
    3dc2:	df 07       	cpc	r29, r31
    3dc4:	b9 f7       	brne	.-18     	; 0x3db4 <st7565_init+0x1a>
	{
		st7565_command((uint8_t)pgm_read_byte(&lcd_commmands[i]));
	}

	st7565_set_brightness(Config.Contrast);	
    3dc6:	80 91 3a 06 	lds	r24, 0x063A
    3dca:	0e 94 c4 1e 	call	0x3d88	; 0x3d88 <st7565_set_brightness>
	st7565_command(CMD_SET_COM_REVERSE); 		// For logo	0xC8
    3dce:	88 ec       	ldi	r24, 0xC8	; 200
}
    3dd0:	df 91       	pop	r29
    3dd2:	cf 91       	pop	r28
	{
		st7565_command((uint8_t)pgm_read_byte(&lcd_commmands[i]));
	}

	st7565_set_brightness(Config.Contrast);	
	st7565_command(CMD_SET_COM_REVERSE); 		// For logo	0xC8
    3dd4:	0c 94 be 1e 	jmp	0x3d7c	; 0x3d7c <st7565_command>

00003dd8 <write_buffer>:
	st7565_command(val);
}

// Write LCD buffer
void write_buffer(uint8_t *buffer) 
{
    3dd8:	df 92       	push	r13
    3dda:	ef 92       	push	r14
    3ddc:	ff 92       	push	r15
    3dde:	0f 93       	push	r16
    3de0:	1f 93       	push	r17
    3de2:	cf 93       	push	r28
    3de4:	df 93       	push	r29
    3de6:	c6 ed       	ldi	r28, 0xD6	; 214
    3de8:	dd e0       	ldi	r29, 0x0D	; 13
    3dea:	8c 01       	movw	r16, r24
	uint8_t c, p;
	for(p = 0; p < 8; p++) 
	{
		st7565_command(CMD_SET_PAGE | (uint8_t)pgm_read_byte(&pagemap[p]));		// Page 7 to 0
    3dec:	fe 01       	movw	r30, r28
    3dee:	84 91       	lpm	r24, Z
    3df0:	80 6b       	ori	r24, 0xB0	; 176
    3df2:	0e 94 be 1e 	call	0x3d7c	; 0x3d7c <st7565_command>
		st7565_command(CMD_SET_COLUMN_LOWER | (0x0 & 0xf));						// Column 0
    3df6:	80 e0       	ldi	r24, 0x00	; 0
    3df8:	0e 94 be 1e 	call	0x3d7c	; 0x3d7c <st7565_command>
		st7565_command(CMD_SET_COLUMN_UPPER | ((0x0 >> 4) & 0xf));				// Column 0
    3dfc:	80 e1       	ldi	r24, 0x10	; 16
    3dfe:	0e 94 be 1e 	call	0x3d7c	; 0x3d7c <st7565_command>
		st7565_command(CMD_RMW);												// Sets auto-increment
    3e02:	80 ee       	ldi	r24, 0xE0	; 224
    3e04:	0e 94 be 1e 	call	0x3d7c	; 0x3d7c <st7565_command>
    3e08:	78 01       	movw	r14, r16

		for(c = 0; c < 128; c++) 
    3e0a:	d1 2c       	mov	r13, r1
		{
			st7565_data(buffer[(128*p)+c]);
    3e0c:	f7 01       	movw	r30, r14
    3e0e:	81 91       	ld	r24, Z+
    3e10:	7f 01       	movw	r14, r30
    3e12:	0e 94 c1 1e 	call	0x3d82	; 0x3d82 <st7565_data>
		st7565_command(CMD_SET_PAGE | (uint8_t)pgm_read_byte(&pagemap[p]));		// Page 7 to 0
		st7565_command(CMD_SET_COLUMN_LOWER | (0x0 & 0xf));						// Column 0
		st7565_command(CMD_SET_COLUMN_UPPER | ((0x0 >> 4) & 0xf));				// Column 0
		st7565_command(CMD_RMW);												// Sets auto-increment

		for(c = 0; c < 128; c++) 
    3e16:	d3 94       	inc	r13
    3e18:	f0 e8       	ldi	r31, 0x80	; 128
    3e1a:	df 12       	cpse	r13, r31
    3e1c:	f7 cf       	rjmp	.-18     	; 0x3e0c <write_buffer+0x34>
    3e1e:	21 96       	adiw	r28, 0x01	; 1
    3e20:	00 58       	subi	r16, 0x80	; 128
    3e22:	1f 4f       	sbci	r17, 0xFF	; 255

// Write LCD buffer
void write_buffer(uint8_t *buffer) 
{
	uint8_t c, p;
	for(p = 0; p < 8; p++) 
    3e24:	8d e0       	ldi	r24, 0x0D	; 13
    3e26:	ce 3d       	cpi	r28, 0xDE	; 222
    3e28:	d8 07       	cpc	r29, r24
    3e2a:	01 f7       	brne	.-64     	; 0x3dec <write_buffer+0x14>
		for(c = 0; c < 128; c++) 
		{
			st7565_data(buffer[(128*p)+c]);
		}
	}
}
    3e2c:	df 91       	pop	r29
    3e2e:	cf 91       	pop	r28
    3e30:	1f 91       	pop	r17
    3e32:	0f 91       	pop	r16
    3e34:	ff 90       	pop	r15
    3e36:	ef 90       	pop	r14
    3e38:	df 90       	pop	r13
    3e3a:	08 95       	ret

00003e3c <clear_buffer>:

// Clear buffer
void clear_buffer(uint8_t *buff) 
{
	memset(buff, 0, 1024);
    3e3c:	20 e0       	ldi	r18, 0x00	; 0
    3e3e:	34 e0       	ldi	r19, 0x04	; 4
    3e40:	fc 01       	movw	r30, r24
    3e42:	a9 01       	movw	r20, r18
    3e44:	11 92       	st	Z+, r1
    3e46:	41 50       	subi	r20, 0x01	; 1
    3e48:	50 40       	sbci	r21, 0x00	; 0
    3e4a:	e1 f7       	brne	.-8      	; 0x3e44 <clear_buffer+0x8>
    3e4c:	08 95       	ret

00003e4e <clear_screen>:
}

// Clear screen (does not clear buffer)
void clear_screen(void)
{
    3e4e:	cf 93       	push	r28
    3e50:	df 93       	push	r29
	uint8_t p, c;

	for(p = 0; p < 8; p++)
    3e52:	d0 e0       	ldi	r29, 0x00	; 0
	{
		st7565_command(CMD_SET_PAGE | p);								// Set page to p
    3e54:	8d 2f       	mov	r24, r29
    3e56:	80 6b       	ori	r24, 0xB0	; 176
    3e58:	0e 94 be 1e 	call	0x3d7c	; 0x3d7c <st7565_command>
		for(c = 0; c < 128; c++) 										// Was 129, which I think is wrong...
    3e5c:	c0 e0       	ldi	r28, 0x00	; 0
		{
			st7565_command(CMD_SET_COLUMN_LOWER | (c & 0xf));
    3e5e:	8c 2f       	mov	r24, r28
    3e60:	8f 70       	andi	r24, 0x0F	; 15
    3e62:	0e 94 be 1e 	call	0x3d7c	; 0x3d7c <st7565_command>
			st7565_command(CMD_SET_COLUMN_UPPER | ((c >> 4) & 0xf));	// Set column to c
    3e66:	8c 2f       	mov	r24, r28
    3e68:	82 95       	swap	r24
    3e6a:	8f 70       	andi	r24, 0x0F	; 15
    3e6c:	80 61       	ori	r24, 0x10	; 16
    3e6e:	0e 94 be 1e 	call	0x3d7c	; 0x3d7c <st7565_command>
			st7565_data(0x00);											// Clear data
    3e72:	80 e0       	ldi	r24, 0x00	; 0
    3e74:	0e 94 c1 1e 	call	0x3d82	; 0x3d82 <st7565_data>
	uint8_t p, c;

	for(p = 0; p < 8; p++)
	{
		st7565_command(CMD_SET_PAGE | p);								// Set page to p
		for(c = 0; c < 128; c++) 										// Was 129, which I think is wrong...
    3e78:	cf 5f       	subi	r28, 0xFF	; 255
    3e7a:	c0 38       	cpi	r28, 0x80	; 128
    3e7c:	81 f7       	brne	.-32     	; 0x3e5e <clear_screen+0x10>
// Clear screen (does not clear buffer)
void clear_screen(void)
{
	uint8_t p, c;

	for(p = 0; p < 8; p++)
    3e7e:	df 5f       	subi	r29, 0xFF	; 255
    3e80:	d8 30       	cpi	r29, 0x08	; 8
    3e82:	41 f7       	brne	.-48     	; 0x3e54 <clear_screen+0x6>
			st7565_command(CMD_SET_COLUMN_LOWER | (c & 0xf));
			st7565_command(CMD_SET_COLUMN_UPPER | ((c >> 4) & 0xf));	// Set column to c
			st7565_data(0x00);											// Clear data
		}
	}
}
    3e84:	df 91       	pop	r29
    3e86:	cf 91       	pop	r28
    3e88:	08 95       	ret

00003e8a <setpixel>:
//***********************************************************

// Set a single pixel
void setpixel(uint8_t *buff, uint8_t x, uint8_t y, uint8_t color) 
{
	if ((x >= LCDWIDTH) || (y >= LCDHEIGHT))
    3e8a:	67 fd       	sbrc	r22, 7
    3e8c:	36 c0       	rjmp	.+108    	; 0x3efa <setpixel+0x70>
    3e8e:	40 34       	cpi	r20, 0x40	; 64
    3e90:	a0 f5       	brcc	.+104    	; 0x3efa <setpixel+0x70>
    3e92:	34 2f       	mov	r19, r20
    3e94:	36 95       	lsr	r19
    3e96:	36 95       	lsr	r19
    3e98:	36 95       	lsr	r19
    3e9a:	e6 2f       	mov	r30, r22
    3e9c:	f0 e0       	ldi	r31, 0x00	; 0
    3e9e:	50 e0       	ldi	r21, 0x00	; 0
	{
		return;
	}
	// x is which column
	if (color)
    3ea0:	22 23       	and	r18, r18
    3ea2:	a9 f0       	breq	.+42     	; 0x3ece <setpixel+0x44>
	{
		buff[x+ (y/8)*128] |= (1 << (7-(y%8)));  
    3ea4:	20 e8       	ldi	r18, 0x80	; 128
    3ea6:	32 9f       	mul	r19, r18
    3ea8:	e0 0d       	add	r30, r0
    3eaa:	f1 1d       	adc	r31, r1
    3eac:	11 24       	eor	r1, r1
    3eae:	e8 0f       	add	r30, r24
    3eb0:	f9 1f       	adc	r31, r25
    3eb2:	40 95       	com	r20
    3eb4:	50 95       	com	r21
    3eb6:	47 70       	andi	r20, 0x07	; 7
    3eb8:	55 27       	eor	r21, r21
    3eba:	81 e0       	ldi	r24, 0x01	; 1
    3ebc:	90 e0       	ldi	r25, 0x00	; 0
    3ebe:	04 2e       	mov	r0, r20
    3ec0:	01 c0       	rjmp	.+2      	; 0x3ec4 <setpixel+0x3a>
    3ec2:	88 0f       	add	r24, r24
    3ec4:	0a 94       	dec	r0
    3ec6:	ea f7       	brpl	.-6      	; 0x3ec2 <setpixel+0x38>
    3ec8:	90 81       	ld	r25, Z
    3eca:	98 2b       	or	r25, r24
    3ecc:	15 c0       	rjmp	.+42     	; 0x3ef8 <setpixel+0x6e>
	}
	else
	{
		buff[x+ (y/8)*128] &= ~(1 << (7-(y%8))); 
    3ece:	20 e8       	ldi	r18, 0x80	; 128
    3ed0:	32 9f       	mul	r19, r18
    3ed2:	e0 0d       	add	r30, r0
    3ed4:	f1 1d       	adc	r31, r1
    3ed6:	11 24       	eor	r1, r1
    3ed8:	e8 0f       	add	r30, r24
    3eda:	f9 1f       	adc	r31, r25
    3edc:	40 95       	com	r20
    3ede:	50 95       	com	r21
    3ee0:	47 70       	andi	r20, 0x07	; 7
    3ee2:	55 27       	eor	r21, r21
    3ee4:	81 e0       	ldi	r24, 0x01	; 1
    3ee6:	90 e0       	ldi	r25, 0x00	; 0
    3ee8:	04 2e       	mov	r0, r20
    3eea:	01 c0       	rjmp	.+2      	; 0x3eee <setpixel+0x64>
    3eec:	88 0f       	add	r24, r24
    3eee:	0a 94       	dec	r0
    3ef0:	ea f7       	brpl	.-6      	; 0x3eec <setpixel+0x62>
    3ef2:	80 95       	com	r24
    3ef4:	90 81       	ld	r25, Z
    3ef6:	98 23       	and	r25, r24
    3ef8:	90 83       	st	Z, r25
    3efa:	08 95       	ret

00003efc <drawline>:
	}
}

// Bresenham's algorithm - From wikipedia
void drawline(uint8_t *buff, uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1, uint8_t color) 
{
    3efc:	9f 92       	push	r9
    3efe:	af 92       	push	r10
    3f00:	bf 92       	push	r11
    3f02:	cf 92       	push	r12
    3f04:	df 92       	push	r13
    3f06:	ef 92       	push	r14
    3f08:	ff 92       	push	r15
    3f0a:	0f 93       	push	r16
    3f0c:	1f 93       	push	r17
    3f0e:	cf 93       	push	r28
    3f10:	df 93       	push	r29
    3f12:	ec 01       	movw	r28, r24
    3f14:	16 2f       	mov	r17, r22
    3f16:	f4 2e       	mov	r15, r20
    3f18:	d2 2e       	mov	r13, r18
	uint8_t steep = abs(y1 - y0) > abs(x1 - x0);
    3f1a:	a0 2f       	mov	r26, r16
    3f1c:	b0 e0       	ldi	r27, 0x00	; 0
    3f1e:	a4 1b       	sub	r26, r20
    3f20:	b1 09       	sbc	r27, r1
    3f22:	b7 ff       	sbrs	r27, 7
    3f24:	03 c0       	rjmp	.+6      	; 0x3f2c <drawline+0x30>
    3f26:	b1 95       	neg	r27
    3f28:	a1 95       	neg	r26
    3f2a:	b1 09       	sbc	r27, r1
    3f2c:	ed 2d       	mov	r30, r13
    3f2e:	f0 e0       	ldi	r31, 0x00	; 0
    3f30:	e1 1b       	sub	r30, r17
    3f32:	f1 09       	sbc	r31, r1
    3f34:	f7 ff       	sbrs	r31, 7
    3f36:	03 c0       	rjmp	.+6      	; 0x3f3e <drawline+0x42>
    3f38:	f1 95       	neg	r31
    3f3a:	e1 95       	neg	r30
    3f3c:	f1 09       	sbc	r31, r1
    3f3e:	bb 24       	eor	r11, r11
    3f40:	b3 94       	inc	r11
    3f42:	ea 17       	cp	r30, r26
    3f44:	fb 07       	cpc	r31, r27
    3f46:	14 f0       	brlt	.+4      	; 0x3f4c <drawline+0x50>
    3f48:	b1 2c       	mov	r11, r1
    3f4a:	06 c0       	rjmp	.+12     	; 0x3f58 <drawline+0x5c>
    3f4c:	8d 2d       	mov	r24, r13
	if (steep) 
	{
		swap(x0, y0);
		swap(x1, y1);
    3f4e:	d0 2e       	mov	r13, r16
    3f50:	08 2f       	mov	r16, r24
    3f52:	81 2f       	mov	r24, r17
void drawline(uint8_t *buff, uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1, uint8_t color) 
{
	uint8_t steep = abs(y1 - y0) > abs(x1 - x0);
	if (steep) 
	{
		swap(x0, y0);
    3f54:	1f 2d       	mov	r17, r15
    3f56:	f8 2e       	mov	r15, r24
		swap(x1, y1);
	}

	if (x0 > x1) 
    3f58:	d1 16       	cp	r13, r17
    3f5a:	30 f4       	brcc	.+12     	; 0x3f68 <drawline+0x6c>
    3f5c:	8f 2d       	mov	r24, r15
	{
		swap(x0, x1);
		swap(y0, y1);
    3f5e:	f0 2e       	mov	r15, r16
    3f60:	08 2f       	mov	r16, r24
    3f62:	81 2f       	mov	r24, r17
    3f64:	1d 2d       	mov	r17, r13
    3f66:	d8 2e       	mov	r13, r24
	}

	uint8_t dx, dy;
	dx = x1 - x0;
    3f68:	ad 2c       	mov	r10, r13
    3f6a:	a1 1a       	sub	r10, r17
	dy = abs(y1 - y0);
    3f6c:	e0 2f       	mov	r30, r16
    3f6e:	f0 e0       	ldi	r31, 0x00	; 0
    3f70:	ef 19       	sub	r30, r15
    3f72:	f1 09       	sbc	r31, r1
    3f74:	f7 ff       	sbrs	r31, 7
    3f76:	03 c0       	rjmp	.+6      	; 0x3f7e <drawline+0x82>
    3f78:	f1 95       	neg	r31
    3f7a:	e1 95       	neg	r30
    3f7c:	f1 09       	sbc	r31, r1
    3f7e:	9e 2e       	mov	r9, r30

	int8_t err = dx / 2;
    3f80:	ca 2c       	mov	r12, r10
    3f82:	c6 94       	lsr	r12
	int8_t ystep;

	if (y0 < y1) 
    3f84:	f0 16       	cp	r15, r16
    3f86:	10 f4       	brcc	.+4      	; 0x3f8c <drawline+0x90>
	{
		ystep = 1;
    3f88:	01 e0       	ldi	r16, 0x01	; 1
    3f8a:	10 c0       	rjmp	.+32     	; 0x3fac <drawline+0xb0>
	} 
	else 
	{
		ystep = -1;
    3f8c:	0f ef       	ldi	r16, 0xFF	; 255
    3f8e:	0e c0       	rjmp	.+28     	; 0x3fac <drawline+0xb0>

	for (; x0<x1; x0++) 
	{
		if (steep) 
		{
			setpixel(buff, y0, x0, color);
    3f90:	2e 2d       	mov	r18, r14
		ystep = -1;
	}

	for (; x0<x1; x0++) 
	{
		if (steep) 
    3f92:	bb 20       	and	r11, r11
    3f94:	71 f0       	breq	.+28     	; 0x3fb2 <drawline+0xb6>
		{
			setpixel(buff, y0, x0, color);
    3f96:	41 2f       	mov	r20, r17
    3f98:	6f 2d       	mov	r22, r15
		} 
		else 
		{
			setpixel(buff, x0, y0, color);
    3f9a:	ce 01       	movw	r24, r28
    3f9c:	0e 94 45 1f 	call	0x3e8a	; 0x3e8a <setpixel>
		}
		err -= dy;
    3fa0:	c9 18       	sub	r12, r9
		if (err < 0) 
    3fa2:	c7 fe       	sbrs	r12, 7
    3fa4:	02 c0       	rjmp	.+4      	; 0x3faa <drawline+0xae>
		{
			y0 += ystep;
    3fa6:	f0 0e       	add	r15, r16
			err += dx;
    3fa8:	ca 0c       	add	r12, r10
	else 
	{
		ystep = -1;
	}

	for (; x0<x1; x0++) 
    3faa:	1f 5f       	subi	r17, 0xFF	; 255
    3fac:	1d 15       	cp	r17, r13
    3fae:	80 f3       	brcs	.-32     	; 0x3f90 <drawline+0x94>
    3fb0:	03 c0       	rjmp	.+6      	; 0x3fb8 <drawline+0xbc>
		{
			setpixel(buff, y0, x0, color);
		} 
		else 
		{
			setpixel(buff, x0, y0, color);
    3fb2:	4f 2d       	mov	r20, r15
    3fb4:	61 2f       	mov	r22, r17
    3fb6:	f1 cf       	rjmp	.-30     	; 0x3f9a <drawline+0x9e>
		{
			y0 += ystep;
			err += dx;
		}
	}
}
    3fb8:	df 91       	pop	r29
    3fba:	cf 91       	pop	r28
    3fbc:	1f 91       	pop	r17
    3fbe:	0f 91       	pop	r16
    3fc0:	ff 90       	pop	r15
    3fc2:	ef 90       	pop	r14
    3fc4:	df 90       	pop	r13
    3fc6:	cf 90       	pop	r12
    3fc8:	bf 90       	pop	r11
    3fca:	af 90       	pop	r10
    3fcc:	9f 90       	pop	r9
    3fce:	08 95       	ret

00003fd0 <fillrect>:

// Filled rectangle
void fillrect(uint8_t *buff, uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color) 
{
    3fd0:	af 92       	push	r10
    3fd2:	bf 92       	push	r11
    3fd4:	cf 92       	push	r12
    3fd6:	df 92       	push	r13
    3fd8:	ef 92       	push	r14
    3fda:	ff 92       	push	r15
    3fdc:	0f 93       	push	r16
    3fde:	1f 93       	push	r17
    3fe0:	cf 93       	push	r28
    3fe2:	df 93       	push	r29
    3fe4:	6c 01       	movw	r12, r24
    3fe6:	a4 2e       	mov	r10, r20
	// Stupidest version - just pixels - but fast with internal buffer!
	for (uint8_t i=x; i<x+w; i++) 
    3fe8:	f6 2e       	mov	r15, r22
    3fea:	c2 2f       	mov	r28, r18
    3fec:	d0 e0       	ldi	r29, 0x00	; 0
    3fee:	c6 0f       	add	r28, r22
    3ff0:	d1 1d       	adc	r29, r1
	{
		for (uint8_t j=y; j<y+h; j++) 
    3ff2:	10 e0       	ldi	r17, 0x00	; 0
    3ff4:	04 0f       	add	r16, r20
    3ff6:	11 1d       	adc	r17, r1

// Filled rectangle
void fillrect(uint8_t *buff, uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color) 
{
	// Stupidest version - just pixels - but fast with internal buffer!
	for (uint8_t i=x; i<x+w; i++) 
    3ff8:	8f 2d       	mov	r24, r15
    3ffa:	90 e0       	ldi	r25, 0x00	; 0
    3ffc:	8c 17       	cp	r24, r28
    3ffe:	9d 07       	cpc	r25, r29
    4000:	84 f4       	brge	.+32     	; 0x4022 <fillrect+0x52>
    4002:	ba 2c       	mov	r11, r10
	{
		for (uint8_t j=y; j<y+h; j++) 
    4004:	8b 2d       	mov	r24, r11
    4006:	90 e0       	ldi	r25, 0x00	; 0
    4008:	80 17       	cp	r24, r16
    400a:	91 07       	cpc	r25, r17
    400c:	44 f4       	brge	.+16     	; 0x401e <fillrect+0x4e>
		{
			setpixel(buff, i, j, color);
    400e:	2e 2d       	mov	r18, r14
    4010:	4b 2d       	mov	r20, r11
    4012:	6f 2d       	mov	r22, r15
    4014:	c6 01       	movw	r24, r12
    4016:	0e 94 45 1f 	call	0x3e8a	; 0x3e8a <setpixel>
void fillrect(uint8_t *buff, uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color) 
{
	// Stupidest version - just pixels - but fast with internal buffer!
	for (uint8_t i=x; i<x+w; i++) 
	{
		for (uint8_t j=y; j<y+h; j++) 
    401a:	b3 94       	inc	r11
    401c:	f3 cf       	rjmp	.-26     	; 0x4004 <fillrect+0x34>

// Filled rectangle
void fillrect(uint8_t *buff, uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color) 
{
	// Stupidest version - just pixels - but fast with internal buffer!
	for (uint8_t i=x; i<x+w; i++) 
    401e:	f3 94       	inc	r15
    4020:	eb cf       	rjmp	.-42     	; 0x3ff8 <fillrect+0x28>
		for (uint8_t j=y; j<y+h; j++) 
		{
			setpixel(buff, i, j, color);
		}
	}
}
    4022:	df 91       	pop	r29
    4024:	cf 91       	pop	r28
    4026:	1f 91       	pop	r17
    4028:	0f 91       	pop	r16
    402a:	ff 90       	pop	r15
    402c:	ef 90       	pop	r14
    402e:	df 90       	pop	r13
    4030:	cf 90       	pop	r12
    4032:	bf 90       	pop	r11
    4034:	af 90       	pop	r10
    4036:	08 95       	ret

00004038 <drawrect>:

// Draw a rectangle
void drawrect(uint8_t *buff, uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color) 
{
    4038:	9f 92       	push	r9
    403a:	af 92       	push	r10
    403c:	bf 92       	push	r11
    403e:	cf 92       	push	r12
    4040:	df 92       	push	r13
    4042:	ef 92       	push	r14
    4044:	ff 92       	push	r15
    4046:	0f 93       	push	r16
    4048:	1f 93       	push	r17
    404a:	cf 93       	push	r28
    404c:	df 93       	push	r29
    404e:	ec 01       	movw	r28, r24
    4050:	f6 2e       	mov	r15, r22
    4052:	b4 2e       	mov	r11, r20
    4054:	92 2e       	mov	r9, r18
	// Stupidest version - just pixels - but fast with internal buffer!
	for (uint8_t i=x; i<x+w; i++) 
    4056:	16 2f       	mov	r17, r22
    4058:	c2 2e       	mov	r12, r18
    405a:	d1 2c       	mov	r13, r1
    405c:	c6 0e       	add	r12, r22
    405e:	d1 1c       	adc	r13, r1
	{
		setpixel(buff, i, y, color);
		setpixel(buff, i, y+h-1, color);
    4060:	aa 24       	eor	r10, r10
    4062:	aa 94       	dec	r10
    4064:	a0 0e       	add	r10, r16
    4066:	a4 0e       	add	r10, r20

// Draw a rectangle
void drawrect(uint8_t *buff, uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color) 
{
	// Stupidest version - just pixels - but fast with internal buffer!
	for (uint8_t i=x; i<x+w; i++) 
    4068:	81 2f       	mov	r24, r17
    406a:	90 e0       	ldi	r25, 0x00	; 0
    406c:	8c 15       	cp	r24, r12
    406e:	9d 05       	cpc	r25, r13
    4070:	74 f4       	brge	.+28     	; 0x408e <drawrect+0x56>
	{
		setpixel(buff, i, y, color);
    4072:	2e 2d       	mov	r18, r14
    4074:	4b 2d       	mov	r20, r11
    4076:	61 2f       	mov	r22, r17
    4078:	ce 01       	movw	r24, r28
    407a:	0e 94 45 1f 	call	0x3e8a	; 0x3e8a <setpixel>
		setpixel(buff, i, y+h-1, color);
    407e:	2e 2d       	mov	r18, r14
    4080:	4a 2d       	mov	r20, r10
    4082:	61 2f       	mov	r22, r17
    4084:	ce 01       	movw	r24, r28
    4086:	0e 94 45 1f 	call	0x3e8a	; 0x3e8a <setpixel>

// Draw a rectangle
void drawrect(uint8_t *buff, uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color) 
{
	// Stupidest version - just pixels - but fast with internal buffer!
	for (uint8_t i=x; i<x+w; i++) 
    408a:	1f 5f       	subi	r17, 0xFF	; 255
    408c:	ed cf       	rjmp	.-38     	; 0x4068 <drawrect+0x30>
    408e:	db 2c       	mov	r13, r11
	{
		setpixel(buff, i, y, color);
		setpixel(buff, i, y+h-1, color);
	}
	for (uint8_t i=y; i<y+h; i++) 
    4090:	10 e0       	ldi	r17, 0x00	; 0
    4092:	0b 0d       	add	r16, r11
    4094:	11 1d       	adc	r17, r1
	{
		setpixel(buff, x, i, color);
		setpixel(buff, x+w-1, i, color);
    4096:	cc 24       	eor	r12, r12
    4098:	ca 94       	dec	r12
    409a:	c9 0c       	add	r12, r9
    409c:	cf 0c       	add	r12, r15
	for (uint8_t i=x; i<x+w; i++) 
	{
		setpixel(buff, i, y, color);
		setpixel(buff, i, y+h-1, color);
	}
	for (uint8_t i=y; i<y+h; i++) 
    409e:	8d 2d       	mov	r24, r13
    40a0:	90 e0       	ldi	r25, 0x00	; 0
    40a2:	80 17       	cp	r24, r16
    40a4:	91 07       	cpc	r25, r17
    40a6:	74 f4       	brge	.+28     	; 0x40c4 <drawrect+0x8c>
	{
		setpixel(buff, x, i, color);
    40a8:	2e 2d       	mov	r18, r14
    40aa:	4d 2d       	mov	r20, r13
    40ac:	6f 2d       	mov	r22, r15
    40ae:	ce 01       	movw	r24, r28
    40b0:	0e 94 45 1f 	call	0x3e8a	; 0x3e8a <setpixel>
		setpixel(buff, x+w-1, i, color);
    40b4:	2e 2d       	mov	r18, r14
    40b6:	4d 2d       	mov	r20, r13
    40b8:	6c 2d       	mov	r22, r12
    40ba:	ce 01       	movw	r24, r28
    40bc:	0e 94 45 1f 	call	0x3e8a	; 0x3e8a <setpixel>
	for (uint8_t i=x; i<x+w; i++) 
	{
		setpixel(buff, i, y, color);
		setpixel(buff, i, y+h-1, color);
	}
	for (uint8_t i=y; i<y+h; i++) 
    40c0:	d3 94       	inc	r13
    40c2:	ed cf       	rjmp	.-38     	; 0x409e <drawrect+0x66>
	{
		setpixel(buff, x, i, color);
		setpixel(buff, x+w-1, i, color);
	} 
}
    40c4:	df 91       	pop	r29
    40c6:	cf 91       	pop	r28
    40c8:	1f 91       	pop	r17
    40ca:	0f 91       	pop	r16
    40cc:	ff 90       	pop	r15
    40ce:	ef 90       	pop	r14
    40d0:	df 90       	pop	r13
    40d2:	cf 90       	pop	r12
    40d4:	bf 90       	pop	r11
    40d6:	af 90       	pop	r10
    40d8:	9f 90       	pop	r9
    40da:	08 95       	ret

000040dc <fillcircle>:

// Draw a filled circle
// Edge-clip bug fixed by D. Thompson - 3/2/2014
void fillcircle(uint8_t *buff, uint8_t x0, uint8_t y0, uint8_t r, uint8_t color) 
{
    40dc:	4f 92       	push	r4
    40de:	5f 92       	push	r5
    40e0:	6f 92       	push	r6
    40e2:	7f 92       	push	r7
    40e4:	8f 92       	push	r8
    40e6:	9f 92       	push	r9
    40e8:	af 92       	push	r10
    40ea:	bf 92       	push	r11
    40ec:	cf 92       	push	r12
    40ee:	df 92       	push	r13
    40f0:	ef 92       	push	r14
    40f2:	ff 92       	push	r15
    40f4:	0f 93       	push	r16
    40f6:	1f 93       	push	r17
    40f8:	cf 93       	push	r28
    40fa:	df 93       	push	r29
    40fc:	ec 01       	movw	r28, r24
    40fe:	96 2e       	mov	r9, r22
    4100:	a4 2e       	mov	r10, r20
	int8_t f = 1 - r;
    4102:	bb 24       	eor	r11, r11
    4104:	b3 94       	inc	r11
    4106:	b2 1a       	sub	r11, r18
	int8_t ddF_x = 1;
	int8_t ddF_y = -2 * r;
    4108:	82 2e       	mov	r8, r18
    410a:	81 94       	neg	r8
    410c:	88 0c       	add	r8, r8
	int8_t x = 0;
	int8_t y = r;
    410e:	12 2f       	mov	r17, r18
	int8_t i = 0;

	for (i=y0-r; i<=y0+r; i++) 
    4110:	74 2e       	mov	r7, r20
    4112:	72 1a       	sub	r7, r18
    4114:	e4 2e       	mov	r14, r20
    4116:	f1 2c       	mov	r15, r1
    4118:	67 01       	movw	r12, r14
    411a:	c2 0e       	add	r12, r18
    411c:	d1 1c       	adc	r13, r1
    411e:	87 2d       	mov	r24, r7
    4120:	99 27       	eor	r25, r25
    4122:	87 fd       	sbrc	r24, 7
    4124:	90 95       	com	r25
    4126:	c8 16       	cp	r12, r24
    4128:	d9 06       	cpc	r13, r25
    412a:	44 f0       	brlt	.+16     	; 0x413c <fillcircle+0x60>
	{
		setpixel(buff, x0, i, color);
    412c:	20 2f       	mov	r18, r16
    412e:	47 2d       	mov	r20, r7
    4130:	69 2d       	mov	r22, r9
    4132:	ce 01       	movw	r24, r28
    4134:	0e 94 45 1f 	call	0x3e8a	; 0x3e8a <setpixel>
    4138:	73 94       	inc	r7
    413a:	f1 cf       	rjmp	.-30     	; 0x411e <fillcircle+0x42>
	int8_t ddF_y = -2 * r;
	int8_t x = 0;
	int8_t y = r;
	int8_t i = 0;

	for (i=y0-r; i<=y0+r; i++) 
    413c:	71 2c       	mov	r7, r1
	{
		setpixel(buff, x0, i, color);
	}

	while (x<y) 
    413e:	71 16       	cp	r7, r17
    4140:	0c f0       	brlt	.+2      	; 0x4144 <fillcircle+0x68>
    4142:	4c c0       	rjmp	.+152    	; 0x41dc <fillcircle+0x100>
	{
		if (f >= 0) 
    4144:	b7 fc       	sbrc	r11, 7
    4146:	04 c0       	rjmp	.+8      	; 0x4150 <fillcircle+0x74>
		{
			y--;
    4148:	11 50       	subi	r17, 0x01	; 1
			ddF_y += 2;
    414a:	83 94       	inc	r8
    414c:	83 94       	inc	r8
			f += ddF_y;
    414e:	b8 0c       	add	r11, r8
    4150:	73 94       	inc	r7
    4152:	87 2d       	mov	r24, r7
    4154:	88 0f       	add	r24, r24
    4156:	8f 5f       	subi	r24, 0xFF	; 255
		}

		x++;
		ddF_x += 2;
		f += ddF_x;
    4158:	b8 0e       	add	r11, r24

		for (i=y0-y; i<=y0+y; i++) 
    415a:	6a 2c       	mov	r6, r10
    415c:	61 1a       	sub	r6, r17
    415e:	67 01       	movw	r12, r14
    4160:	c1 0e       	add	r12, r17
    4162:	d1 1c       	adc	r13, r1
    4164:	17 fd       	sbrc	r17, 7
    4166:	da 94       	dec	r13
    4168:	47 2c       	mov	r4, r7
    416a:	49 0c       	add	r4, r9
    416c:	59 2c       	mov	r5, r9
    416e:	57 18       	sub	r5, r7
    4170:	86 2d       	mov	r24, r6
    4172:	99 27       	eor	r25, r25
    4174:	87 fd       	sbrc	r24, 7
    4176:	90 95       	com	r25
    4178:	c8 16       	cp	r12, r24
    417a:	d9 06       	cpc	r13, r25
    417c:	74 f0       	brlt	.+28     	; 0x419a <fillcircle+0xbe>
		{
			setpixel(buff, x0+x, i, color);
    417e:	20 2f       	mov	r18, r16
    4180:	46 2d       	mov	r20, r6
    4182:	64 2d       	mov	r22, r4
    4184:	ce 01       	movw	r24, r28
    4186:	0e 94 45 1f 	call	0x3e8a	; 0x3e8a <setpixel>
			setpixel(buff, x0-x, i, color);
    418a:	20 2f       	mov	r18, r16
    418c:	46 2d       	mov	r20, r6
    418e:	65 2d       	mov	r22, r5
    4190:	ce 01       	movw	r24, r28
    4192:	0e 94 45 1f 	call	0x3e8a	; 0x3e8a <setpixel>
    4196:	63 94       	inc	r6
    4198:	eb cf       	rjmp	.-42     	; 0x4170 <fillcircle+0x94>
    419a:	6a 2c       	mov	r6, r10
    419c:	67 18       	sub	r6, r7
		} 
		for (i=y0-x; i<=y0+x; i++) 
    419e:	67 01       	movw	r12, r14
    41a0:	c7 0c       	add	r12, r7
    41a2:	d1 1c       	adc	r13, r1
    41a4:	77 fc       	sbrc	r7, 7
    41a6:	da 94       	dec	r13
		{
			setpixel(buff, x0+y, i, color);
    41a8:	41 2e       	mov	r4, r17
    41aa:	49 0c       	add	r4, r9
			setpixel(buff, x0-y, i, color);
    41ac:	59 2c       	mov	r5, r9
    41ae:	51 1a       	sub	r5, r17
		for (i=y0-y; i<=y0+y; i++) 
		{
			setpixel(buff, x0+x, i, color);
			setpixel(buff, x0-x, i, color);
		} 
		for (i=y0-x; i<=y0+x; i++) 
    41b0:	86 2d       	mov	r24, r6
    41b2:	99 27       	eor	r25, r25
    41b4:	87 fd       	sbrc	r24, 7
    41b6:	90 95       	com	r25
    41b8:	c8 16       	cp	r12, r24
    41ba:	d9 06       	cpc	r13, r25
    41bc:	0c f4       	brge	.+2      	; 0x41c0 <fillcircle+0xe4>
    41be:	bf cf       	rjmp	.-130    	; 0x413e <fillcircle+0x62>
		{
			setpixel(buff, x0+y, i, color);
    41c0:	20 2f       	mov	r18, r16
    41c2:	46 2d       	mov	r20, r6
    41c4:	64 2d       	mov	r22, r4
    41c6:	ce 01       	movw	r24, r28
    41c8:	0e 94 45 1f 	call	0x3e8a	; 0x3e8a <setpixel>
			setpixel(buff, x0-y, i, color);
    41cc:	20 2f       	mov	r18, r16
    41ce:	46 2d       	mov	r20, r6
    41d0:	65 2d       	mov	r22, r5
    41d2:	ce 01       	movw	r24, r28
    41d4:	0e 94 45 1f 	call	0x3e8a	; 0x3e8a <setpixel>
    41d8:	63 94       	inc	r6
    41da:	ea cf       	rjmp	.-44     	; 0x41b0 <fillcircle+0xd4>
		}    
	}
}
    41dc:	df 91       	pop	r29
    41de:	cf 91       	pop	r28
    41e0:	1f 91       	pop	r17
    41e2:	0f 91       	pop	r16
    41e4:	ff 90       	pop	r15
    41e6:	ef 90       	pop	r14
    41e8:	df 90       	pop	r13
    41ea:	cf 90       	pop	r12
    41ec:	bf 90       	pop	r11
    41ee:	af 90       	pop	r10
    41f0:	9f 90       	pop	r9
    41f2:	8f 90       	pop	r8
    41f4:	7f 90       	pop	r7
    41f6:	6f 90       	pop	r6
    41f8:	5f 90       	pop	r5
    41fa:	4f 90       	pop	r4
    41fc:	08 95       	ret

000041fe <LCD_Display_Text>:
//************************************************************

// Print Menuitem from Program memory at a particular location
void LCD_Display_Text (uint16_t menuitem, const unsigned char* font,uint16_t x, uint16_t y)
{
	gLCDprint_Menu_P((char*)pgm_read_word(&text_menu[menuitem]), font, x, y);
    41fe:	88 0f       	add	r24, r24
    4200:	99 1f       	adc	r25, r25
    4202:	82 52       	subi	r24, 0x22	; 34
    4204:	92 4f       	sbci	r25, 0xF2	; 242
    4206:	fc 01       	movw	r30, r24
    4208:	85 91       	lpm	r24, Z+
    420a:	94 91       	lpm	r25, Z
}

// Print a string from RAM at a particular location in a particular font
void gLCDprint_Menu_P(const char *s, const unsigned char* font,uint16_t x, uint16_t y)
{
	pgm_mugui_lcd_puts((const unsigned char*)s, font, x, y);
    420c:	0c 94 99 3d 	jmp	0x7b32	; 0x7b32 <pgm_mugui_lcd_puts>

00004210 <gLCDprint_Menu_P>:
    4210:	0c 94 99 3d 	jmp	0x7b32	; 0x7b32 <pgm_mugui_lcd_puts>

00004214 <idle_screen>:
}

// Pop up the Idle screen
void idle_screen(void)
{
	clear_buffer(buffer);
    4214:	81 e0       	ldi	r24, 0x01	; 1
    4216:	91 e0       	ldi	r25, 0x01	; 1
    4218:	0e 94 1e 1f 	call	0x3e3c	; 0x3e3c <clear_buffer>

	// Change Status screen depending on arm mode
	LCD_Display_Text(121,(const unsigned char*)Verdana14,41,3); 	// "Press"
    421c:	23 e0       	ldi	r18, 0x03	; 3
    421e:	30 e0       	ldi	r19, 0x00	; 0
    4220:	49 e2       	ldi	r20, 0x29	; 41
    4222:	50 e0       	ldi	r21, 0x00	; 0
    4224:	69 e4       	ldi	r22, 0x49	; 73
    4226:	71 e0       	ldi	r23, 0x01	; 1
    4228:	89 e7       	ldi	r24, 0x79	; 121
    422a:	90 e0       	ldi	r25, 0x00	; 0
    422c:	0e 94 ff 20 	call	0x41fe	; 0x41fe <LCD_Display_Text>
	LCD_Display_Text(122,(const unsigned char*)Verdana14,24,23);	// "for status."
    4230:	27 e1       	ldi	r18, 0x17	; 23
    4232:	30 e0       	ldi	r19, 0x00	; 0
    4234:	48 e1       	ldi	r20, 0x18	; 24
    4236:	50 e0       	ldi	r21, 0x00	; 0
    4238:	69 e4       	ldi	r22, 0x49	; 73
    423a:	71 e0       	ldi	r23, 0x01	; 1
    423c:	8a e7       	ldi	r24, 0x7A	; 122
    423e:	90 e0       	ldi	r25, 0x00	; 0
    4240:	0e 94 ff 20 	call	0x41fe	; 0x41fe <LCD_Display_Text>

	uint16_t dummy = 0;
	dummy = (uint16_t)(RC_Master_Timer & 0xffff);
    4244:	80 91 14 05 	lds	r24, 0x0514
    4248:	90 91 15 05 	lds	r25, 0x0515
    424c:	a0 91 16 05 	lds	r26, 0x0516
    4250:	b0 91 17 05 	lds	r27, 0x0517
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__utoa_ncheck (unsigned int, char *, unsigned char);
	return __utoa_ncheck (__val, __s, __radix);
    4254:	4a e0       	ldi	r20, 0x0A	; 10
    4256:	6f e5       	ldi	r22, 0x5F	; 95
    4258:	75 e0       	ldi	r23, 0x05	; 5
    425a:	0e 94 1e 48 	call	0x903c	; 0x903c <__utoa_ncheck>
	mugui_lcd_puts(utoa(dummy,pBuffer,10),(const unsigned char*)Verdana8,25,43);
    425e:	2b e2       	ldi	r18, 0x2B	; 43
    4260:	30 e0       	ldi	r19, 0x00	; 0
    4262:	49 e1       	ldi	r20, 0x19	; 25
    4264:	50 e0       	ldi	r21, 0x00	; 0
    4266:	67 ef       	ldi	r22, 0xF7	; 247
    4268:	79 e0       	ldi	r23, 0x09	; 9
    426a:	0e 94 c7 3d 	call	0x7b8e	; 0x7b8e <mugui_lcd_puts>
	dummy = (uint16_t)(RC_Master_Timer >> 16);
    426e:	80 91 14 05 	lds	r24, 0x0514
    4272:	90 91 15 05 	lds	r25, 0x0515
    4276:	a0 91 16 05 	lds	r26, 0x0516
    427a:	b0 91 17 05 	lds	r27, 0x0517
    427e:	4a e0       	ldi	r20, 0x0A	; 10
    4280:	6f e5       	ldi	r22, 0x5F	; 95
    4282:	75 e0       	ldi	r23, 0x05	; 5
    4284:	cd 01       	movw	r24, r26
    4286:	0e 94 1e 48 	call	0x903c	; 0x903c <__utoa_ncheck>
	mugui_lcd_puts(utoa(dummy,pBuffer,10),(const unsigned char*)Verdana8,5,43);	
    428a:	2b e2       	ldi	r18, 0x2B	; 43
    428c:	30 e0       	ldi	r19, 0x00	; 0
    428e:	45 e0       	ldi	r20, 0x05	; 5
    4290:	50 e0       	ldi	r21, 0x00	; 0
    4292:	67 ef       	ldi	r22, 0xF7	; 247
    4294:	79 e0       	ldi	r23, 0x09	; 9
    4296:	0e 94 c7 3d 	call	0x7b8e	; 0x7b8e <mugui_lcd_puts>

	dummy = (uint16_t)(PWM_Available_Timer & 0xffff);
    429a:	80 91 10 05 	lds	r24, 0x0510
    429e:	90 91 11 05 	lds	r25, 0x0511
    42a2:	a0 91 12 05 	lds	r26, 0x0512
    42a6:	b0 91 13 05 	lds	r27, 0x0513
    42aa:	4a e0       	ldi	r20, 0x0A	; 10
    42ac:	6f e5       	ldi	r22, 0x5F	; 95
    42ae:	75 e0       	ldi	r23, 0x05	; 5
    42b0:	0e 94 1e 48 	call	0x903c	; 0x903c <__utoa_ncheck>
	mugui_lcd_puts(utoa(dummy,pBuffer,10),(const unsigned char*)Verdana8,25,53);
    42b4:	25 e3       	ldi	r18, 0x35	; 53
    42b6:	30 e0       	ldi	r19, 0x00	; 0
    42b8:	49 e1       	ldi	r20, 0x19	; 25
    42ba:	50 e0       	ldi	r21, 0x00	; 0
    42bc:	67 ef       	ldi	r22, 0xF7	; 247
    42be:	79 e0       	ldi	r23, 0x09	; 9
    42c0:	0e 94 c7 3d 	call	0x7b8e	; 0x7b8e <mugui_lcd_puts>
	dummy = (uint16_t)(PWM_Available_Timer >> 16);
    42c4:	80 91 10 05 	lds	r24, 0x0510
    42c8:	90 91 11 05 	lds	r25, 0x0511
    42cc:	a0 91 12 05 	lds	r26, 0x0512
    42d0:	b0 91 13 05 	lds	r27, 0x0513
    42d4:	4a e0       	ldi	r20, 0x0A	; 10
    42d6:	6f e5       	ldi	r22, 0x5F	; 95
    42d8:	75 e0       	ldi	r23, 0x05	; 5
    42da:	cd 01       	movw	r24, r26
    42dc:	0e 94 1e 48 	call	0x903c	; 0x903c <__utoa_ncheck>
	mugui_lcd_puts(utoa(dummy,pBuffer,10),(const unsigned char*)Verdana8,5,53);
    42e0:	25 e3       	ldi	r18, 0x35	; 53
    42e2:	30 e0       	ldi	r19, 0x00	; 0
    42e4:	45 e0       	ldi	r20, 0x05	; 5
    42e6:	50 e0       	ldi	r21, 0x00	; 0
    42e8:	67 ef       	ldi	r22, 0xF7	; 247
    42ea:	79 e0       	ldi	r23, 0x09	; 9
    42ec:	0e 94 c7 3d 	call	0x7b8e	; 0x7b8e <mugui_lcd_puts>


	
	if(SlowRC)
    42f0:	80 91 00 01 	lds	r24, 0x0100
	{
		LCD_Display_Text(118,(const unsigned char*)Verdana8,60,43); // LOW
    42f4:	2b e2       	ldi	r18, 0x2B	; 43
    42f6:	30 e0       	ldi	r19, 0x00	; 0
    42f8:	4c e3       	ldi	r20, 0x3C	; 60
    42fa:	50 e0       	ldi	r21, 0x00	; 0
    42fc:	67 ef       	ldi	r22, 0xF7	; 247
    42fe:	79 e0       	ldi	r23, 0x09	; 9
	dummy = (uint16_t)(PWM_Available_Timer >> 16);
	mugui_lcd_puts(utoa(dummy,pBuffer,10),(const unsigned char*)Verdana8,5,53);


	
	if(SlowRC)
    4300:	88 23       	and	r24, r24
    4302:	19 f0       	breq	.+6      	; 0x430a <idle_screen+0xf6>
	{
		LCD_Display_Text(118,(const unsigned char*)Verdana8,60,43); // LOW
    4304:	86 e7       	ldi	r24, 0x76	; 118
    4306:	90 e0       	ldi	r25, 0x00	; 0
    4308:	02 c0       	rjmp	.+4      	; 0x430e <idle_screen+0xfa>
	}
	else
	{
		LCD_Display_Text(55,(const unsigned char*)Verdana8,60,43);  // HIGH
    430a:	87 e3       	ldi	r24, 0x37	; 55
    430c:	90 e0       	ldi	r25, 0x00	; 0
    430e:	0e 94 ff 20 	call	0x41fe	; 0x41fe <LCD_Display_Text>
	else
	{
		LCD_Display_Text(138,(const unsigned char*)Verdana14,28,43);// "(Armed)"
	}
*/	
	write_buffer(buffer);
    4312:	81 e0       	ldi	r24, 0x01	; 1
    4314:	91 e0       	ldi	r25, 0x01	; 1
    4316:	0c 94 ec 1e 	jmp	0x3dd8	; 0x3dd8 <write_buffer>

0000431a <get_raw_gyros>:
		gyroADC[i] *= (int8_t)pgm_read_byte(&Gyro_Pol[Config.Orientation][i]);
	}
}

void get_raw_gyros(void)
{
    431a:	cf 93       	push	r28
    431c:	df 93       	push	r29
    431e:	cd b7       	in	r28, 0x3d	; 61
    4320:	de b7       	in	r29, 0x3e	; 62
    4322:	2c 97       	sbiw	r28, 0x0c	; 12
    4324:	0f b6       	in	r0, 0x3f	; 63
    4326:	f8 94       	cli
    4328:	de bf       	out	0x3e, r29	; 62
    432a:	0f be       	out	0x3f, r0	; 63
    432c:	cd bf       	out	0x3d, r28	; 61
	uint8_t i;
	uint8_t Gyros[6];
	int16_t temp1, temp2;

	// Get the i2c data from the MPU6050
	readI2CbyteArray(MPU60X0_DEFAULT_ADDRESS,MPU60X0_RA_GYRO_XOUT_H,(uint8_t *)Gyros,6);
    432e:	26 e0       	ldi	r18, 0x06	; 6
    4330:	ae 01       	movw	r20, r28
    4332:	4f 5f       	subi	r20, 0xFF	; 255
    4334:	5f 4f       	sbci	r21, 0xFF	; 255
    4336:	63 e4       	ldi	r22, 0x43	; 67
    4338:	80 ed       	ldi	r24, 0xD0	; 208
    433a:	0e 94 81 23 	call	0x4702	; 0x4702 <readI2CbyteArray>

	// Reassemble data into gyroADC array and down-sample to reduce resolution and noise
	temp1 = Gyros[0] << 8;
    433e:	89 81       	ldd	r24, Y+1	; 0x01
    4340:	90 e0       	ldi	r25, 0x00	; 0
    4342:	98 2f       	mov	r25, r24
    4344:	88 27       	eor	r24, r24
	temp2 = Gyros[1];
    4346:	2a 81       	ldd	r18, Y+2	; 0x02
	RawADC[PITCH] = (temp1 + temp2) >> GYRODIV;
    4348:	82 0f       	add	r24, r18
    434a:	91 1d       	adc	r25, r1
    434c:	34 e0       	ldi	r19, 0x04	; 4
    434e:	95 95       	asr	r25
    4350:	87 95       	ror	r24
    4352:	3a 95       	dec	r19
    4354:	e1 f7       	brne	.-8      	; 0x434e <get_raw_gyros+0x34>
    4356:	9a 87       	std	Y+10, r25	; 0x0a
    4358:	89 87       	std	Y+9, r24	; 0x09

	temp1 = Gyros[2] << 8;
    435a:	8b 81       	ldd	r24, Y+3	; 0x03
    435c:	90 e0       	ldi	r25, 0x00	; 0
    435e:	98 2f       	mov	r25, r24
    4360:	88 27       	eor	r24, r24
	temp2 = Gyros[3];
    4362:	2c 81       	ldd	r18, Y+4	; 0x04
	RawADC[ROLL] = (temp1 + temp2) >> GYRODIV;
    4364:	82 0f       	add	r24, r18
    4366:	91 1d       	adc	r25, r1
    4368:	54 e0       	ldi	r21, 0x04	; 4
    436a:	95 95       	asr	r25
    436c:	87 95       	ror	r24
    436e:	5a 95       	dec	r21
    4370:	e1 f7       	brne	.-8      	; 0x436a <get_raw_gyros+0x50>
    4372:	98 87       	std	Y+8, r25	; 0x08
    4374:	8f 83       	std	Y+7, r24	; 0x07

	temp1 = Gyros[4] << 8;
    4376:	8d 81       	ldd	r24, Y+5	; 0x05
    4378:	90 e0       	ldi	r25, 0x00	; 0
    437a:	98 2f       	mov	r25, r24
    437c:	88 27       	eor	r24, r24
	temp2 = Gyros[5];
    437e:	2e 81       	ldd	r18, Y+6	; 0x06
	RawADC[YAW] = (temp1 + temp2) >> GYRODIV;
    4380:	82 0f       	add	r24, r18
    4382:	91 1d       	adc	r25, r1
    4384:	74 e0       	ldi	r23, 0x04	; 4
    4386:	95 95       	asr	r25
    4388:	87 95       	ror	r24
    438a:	7a 95       	dec	r23
    438c:	e1 f7       	brne	.-8      	; 0x4386 <get_raw_gyros+0x6c>
    438e:	9c 87       	std	Y+12, r25	; 0x0c
    4390:	8b 87       	std	Y+11, r24	; 0x0b

	// Reorient the data as per the board orientation	
	for (i=0; i<NUMBEROFAXIS; i++)
	{
		// Rearrange the sensors
		gyroADC[i] 	= RawADC[(int8_t)pgm_read_byte(&Gyro_RPY_Order[Config.Orientation][i])];
    4392:	20 91 39 06 	lds	r18, 0x0639
    4396:	af e6       	ldi	r26, 0x6F	; 111
    4398:	b5 e0       	ldi	r27, 0x05	; 5
    439a:	43 e0       	ldi	r20, 0x03	; 3
    439c:	24 02       	muls	r18, r20
    439e:	90 01       	movw	r18, r0
    43a0:	11 24       	eor	r1, r1
    43a2:	80 e0       	ldi	r24, 0x00	; 0
    43a4:	90 e0       	ldi	r25, 0x00	; 0
    43a6:	2b 56       	subi	r18, 0x6B	; 107
    43a8:	38 4e       	sbci	r19, 0xE8	; 232
    43aa:	f9 01       	movw	r30, r18
    43ac:	e8 0f       	add	r30, r24
    43ae:	f9 1f       	adc	r31, r25
    43b0:	e4 91       	lpm	r30, Z
    43b2:	ee 0f       	add	r30, r30
    43b4:	ff 0b       	sbc	r31, r31
    43b6:	41 e0       	ldi	r20, 0x01	; 1
    43b8:	50 e0       	ldi	r21, 0x00	; 0
    43ba:	4c 0f       	add	r20, r28
    43bc:	5d 1f       	adc	r21, r29
    43be:	e4 0f       	add	r30, r20
    43c0:	f5 1f       	adc	r31, r21
    43c2:	46 81       	ldd	r20, Z+6	; 0x06
    43c4:	57 81       	ldd	r21, Z+7	; 0x07
    43c6:	4d 93       	st	X+, r20
    43c8:	5d 93       	st	X+, r21
    43ca:	01 96       	adiw	r24, 0x01	; 1
	temp1 = Gyros[4] << 8;
	temp2 = Gyros[5];
	RawADC[YAW] = (temp1 + temp2) >> GYRODIV;

	// Reorient the data as per the board orientation	
	for (i=0; i<NUMBEROFAXIS; i++)
    43cc:	83 30       	cpi	r24, 0x03	; 3
    43ce:	91 05       	cpc	r25, r1
    43d0:	61 f7       	brne	.-40     	; 0x43aa <get_raw_gyros+0x90>
	{
		// Rearrange the sensors
		gyroADC[i] 	= RawADC[(int8_t)pgm_read_byte(&Gyro_RPY_Order[Config.Orientation][i])];
	}
}
    43d2:	2c 96       	adiw	r28, 0x0c	; 12
    43d4:	0f b6       	in	r0, 0x3f	; 63
    43d6:	f8 94       	cli
    43d8:	de bf       	out	0x3e, r29	; 62
    43da:	0f be       	out	0x3f, r0	; 63
    43dc:	cd bf       	out	0x3d, r28	; 61
    43de:	df 91       	pop	r29
    43e0:	cf 91       	pop	r28
    43e2:	08 95       	ret

000043e4 <ReadGyros>:
//************************************************************

int16_t gyroADC[NUMBEROFAXIS];			// Holds Gyro ADCs

void ReadGyros(void)					// Conventional orientation
{
    43e4:	1f 93       	push	r17
    43e6:	cf 93       	push	r28
    43e8:	df 93       	push	r29
	uint8_t i;

	get_raw_gyros();					// Updates gyroADC[]
    43ea:	0e 94 8d 21 	call	0x431a	; 0x431a <get_raw_gyros>
	{
		// Remove offsets from gyro outputs
		gyroADC[i] -= Config.gyroZero[i];

		// Change polarity
		gyroADC[i] *= (int8_t)pgm_read_byte(&Gyro_Pol[Config.Orientation][i]);
    43ee:	20 91 39 06 	lds	r18, 0x0639
    43f2:	c7 ea       	ldi	r28, 0xA7	; 167
    43f4:	d7 e0       	ldi	r29, 0x07	; 7
    43f6:	af e6       	ldi	r26, 0x6F	; 111
    43f8:	b5 e0       	ldi	r27, 0x05	; 5
    43fa:	83 e0       	ldi	r24, 0x03	; 3
    43fc:	28 02       	muls	r18, r24
    43fe:	90 01       	movw	r18, r0
    4400:	11 24       	eor	r1, r1
    4402:	80 e0       	ldi	r24, 0x00	; 0
    4404:	90 e0       	ldi	r25, 0x00	; 0
    4406:	2d 57       	subi	r18, 0x7D	; 125
    4408:	38 4e       	sbci	r19, 0xE8	; 232
	get_raw_gyros();					// Updates gyroADC[]

	for (i=0; i<NUMBEROFAXIS; i++)	
	{
		// Remove offsets from gyro outputs
		gyroADC[i] -= Config.gyroZero[i];
    440a:	69 91       	ld	r22, Y+
    440c:	79 91       	ld	r23, Y+
    440e:	f9 01       	movw	r30, r18
    4410:	e8 0f       	add	r30, r24
    4412:	f9 1f       	adc	r31, r25

		// Change polarity
		gyroADC[i] *= (int8_t)pgm_read_byte(&Gyro_Pol[Config.Orientation][i]);
    4414:	14 91       	lpm	r17, Z
	get_raw_gyros();					// Updates gyroADC[]

	for (i=0; i<NUMBEROFAXIS; i++)	
	{
		// Remove offsets from gyro outputs
		gyroADC[i] -= Config.gyroZero[i];
    4416:	4d 91       	ld	r20, X+
    4418:	5c 91       	ld	r21, X
    441a:	11 97       	sbiw	r26, 0x01	; 1
    441c:	46 1b       	sub	r20, r22
    441e:	57 0b       	sbc	r21, r23

		// Change polarity
		gyroADC[i] *= (int8_t)pgm_read_byte(&Gyro_Pol[Config.Orientation][i]);
    4420:	14 03       	mulsu	r17, r20
    4422:	b0 01       	movw	r22, r0
    4424:	15 9f       	mul	r17, r21
    4426:	70 0d       	add	r23, r0
    4428:	11 24       	eor	r1, r1
    442a:	6d 93       	st	X+, r22
    442c:	7d 93       	st	X+, r23
    442e:	01 96       	adiw	r24, 0x01	; 1
{
	uint8_t i;

	get_raw_gyros();					// Updates gyroADC[]

	for (i=0; i<NUMBEROFAXIS; i++)	
    4430:	83 30       	cpi	r24, 0x03	; 3
    4432:	91 05       	cpc	r25, r1
    4434:	51 f7       	brne	.-44     	; 0x440a <ReadGyros+0x26>
		gyroADC[i] -= Config.gyroZero[i];

		// Change polarity
		gyroADC[i] *= (int8_t)pgm_read_byte(&Gyro_Pol[Config.Orientation][i]);
	}
}
    4436:	df 91       	pop	r29
    4438:	cf 91       	pop	r28
    443a:	1f 91       	pop	r17
    443c:	08 95       	ret

0000443e <CalibrateGyrosFast>:
//***************************************************************
// Calibration routines
//***************************************************************

void CalibrateGyrosFast(void)
{
    443e:	cf 93       	push	r28
	uint8_t i;

	// Clear gyro zeros
	memset(&Config.gyroZero[ROLL],0,(sizeof(int16_t) * NUMBEROFAXIS));
    4440:	86 e0       	ldi	r24, 0x06	; 6
    4442:	e7 ea       	ldi	r30, 0xA7	; 167
    4444:	f7 e0       	ldi	r31, 0x07	; 7
    4446:	df 01       	movw	r26, r30
    4448:	1d 92       	st	X+, r1
    444a:	8a 95       	dec	r24
    444c:	e9 f7       	brne	.-6      	; 0x4448 <CalibrateGyrosFast+0xa>
    444e:	c0 e2       	ldi	r28, 0x20	; 32

	// Calculate average over 32 reads
	for (i=0; i<32; i++)
	{
		get_raw_gyros();				// Updates gyroADC[]
    4450:	0e 94 8d 21 	call	0x431a	; 0x431a <get_raw_gyros>

		Config.gyroZero[ROLL] 	+= gyroADC[ROLL];						
    4454:	40 91 a7 07 	lds	r20, 0x07A7
    4458:	50 91 a8 07 	lds	r21, 0x07A8
    445c:	80 91 6f 05 	lds	r24, 0x056F
    4460:	90 91 70 05 	lds	r25, 0x0570
    4464:	48 0f       	add	r20, r24
    4466:	59 1f       	adc	r21, r25
    4468:	50 93 a8 07 	sts	0x07A8, r21
    446c:	40 93 a7 07 	sts	0x07A7, r20
		Config.gyroZero[PITCH] 	+= gyroADC[PITCH];	
    4470:	20 91 a9 07 	lds	r18, 0x07A9
    4474:	30 91 aa 07 	lds	r19, 0x07AA
    4478:	80 91 71 05 	lds	r24, 0x0571
    447c:	90 91 72 05 	lds	r25, 0x0572
    4480:	28 0f       	add	r18, r24
    4482:	39 1f       	adc	r19, r25
    4484:	30 93 aa 07 	sts	0x07AA, r19
    4488:	20 93 a9 07 	sts	0x07A9, r18
		Config.gyroZero[YAW] 	+= gyroADC[YAW];
    448c:	80 91 ab 07 	lds	r24, 0x07AB
    4490:	90 91 ac 07 	lds	r25, 0x07AC
    4494:	60 91 73 05 	lds	r22, 0x0573
    4498:	70 91 74 05 	lds	r23, 0x0574
    449c:	86 0f       	add	r24, r22
    449e:	97 1f       	adc	r25, r23
    44a0:	90 93 ac 07 	sts	0x07AC, r25
    44a4:	80 93 ab 07 	sts	0x07AB, r24
    44a8:	c1 50       	subi	r28, 0x01	; 1

	// Clear gyro zeros
	memset(&Config.gyroZero[ROLL],0,(sizeof(int16_t) * NUMBEROFAXIS));

	// Calculate average over 32 reads
	for (i=0; i<32; i++)
    44aa:	91 f6       	brne	.-92     	; 0x4450 <CalibrateGyrosFast+0x12>
	}

	// Average readings for all axis
	for (i=0; i<NUMBEROFAXIS; i++)
	{
		Config.gyroZero[i] 	= (Config.gyroZero[i] >> 5);	// Divide by 32	
    44ac:	e5 e0       	ldi	r30, 0x05	; 5
    44ae:	55 95       	asr	r21
    44b0:	47 95       	ror	r20
    44b2:	ea 95       	dec	r30
    44b4:	e1 f7       	brne	.-8      	; 0x44ae <CalibrateGyrosFast+0x70>
    44b6:	50 93 a8 07 	sts	0x07A8, r21
    44ba:	40 93 a7 07 	sts	0x07A7, r20
    44be:	f5 e0       	ldi	r31, 0x05	; 5
    44c0:	35 95       	asr	r19
    44c2:	27 95       	ror	r18
    44c4:	fa 95       	dec	r31
    44c6:	e1 f7       	brne	.-8      	; 0x44c0 <CalibrateGyrosFast+0x82>
    44c8:	30 93 aa 07 	sts	0x07AA, r19
    44cc:	20 93 a9 07 	sts	0x07A9, r18
    44d0:	a5 e0       	ldi	r26, 0x05	; 5
    44d2:	95 95       	asr	r25
    44d4:	87 95       	ror	r24
    44d6:	aa 95       	dec	r26
    44d8:	e1 f7       	brne	.-8      	; 0x44d2 <CalibrateGyrosFast+0x94>
    44da:	90 93 ac 07 	sts	0x07AC, r25
    44de:	80 93 ab 07 	sts	0x07AB, r24
	}

	Save_Config_to_EEPROM();
}
    44e2:	cf 91       	pop	r28
	for (i=0; i<NUMBEROFAXIS; i++)
	{
		Config.gyroZero[i] 	= (Config.gyroZero[i] >> 5);	// Divide by 32	
	}

	Save_Config_to_EEPROM();
    44e4:	0c 94 86 16 	jmp	0x2d0c	; 0x2d0c <Save_Config_to_EEPROM>

000044e8 <CalibrateGyrosSlow>:
}

bool CalibrateGyrosSlow(void)
{
    44e8:	2f 92       	push	r2
    44ea:	3f 92       	push	r3
    44ec:	4f 92       	push	r4
    44ee:	5f 92       	push	r5
    44f0:	6f 92       	push	r6
    44f2:	7f 92       	push	r7
    44f4:	8f 92       	push	r8
    44f6:	9f 92       	push	r9
    44f8:	af 92       	push	r10
    44fa:	bf 92       	push	r11
    44fc:	cf 92       	push	r12
    44fe:	df 92       	push	r13
    4500:	ef 92       	push	r14
    4502:	ff 92       	push	r15
    4504:	0f 93       	push	r16
    4506:	1f 93       	push	r17
    4508:	cf 93       	push	r28
    450a:	df 93       	push	r29
    450c:	cd b7       	in	r28, 0x3d	; 61
    450e:	de b7       	in	r29, 0x3e	; 62
    4510:	65 97       	sbiw	r28, 0x15	; 21
    4512:	0f b6       	in	r0, 0x3f	; 63
    4514:	f8 94       	cli
    4516:	de bf       	out	0x3e, r29	; 62
    4518:	0f be       	out	0x3f, r0	; 63
    451a:	cd bf       	out	0x3d, r28	; 61
	float 		GyroSmooth[NUMBEROFAXIS];
	int16_t		GyroOld[NUMBEROFAXIS] = {0,0,0};
    451c:	1e 86       	std	Y+14, r1	; 0x0e
    451e:	1d 86       	std	Y+13, r1	; 0x0d
    4520:	18 8a       	std	Y+16, r1	; 0x10
    4522:	1f 86       	std	Y+15, r1	; 0x0f
    4524:	1a 8a       	std	Y+18, r1	; 0x12
    4526:	19 8a       	std	Y+17, r1	; 0x11
	uint8_t		Gyro_TCNT2 = 0;
	bool		Gyros_Stable = false;

	// Populate Config.gyroZero[] with ballpark figures
	// This makes slow calibrate on much faster
	CalibrateGyrosFast();	
    4528:	0e 94 1f 22 	call	0x443e	; 0x443e <CalibrateGyrosFast>
	
	// Optimise starting point for each board
	for (axis = 0; axis < NUMBEROFAXIS; axis++)
	{
		GyroSmooth[axis] = Config.gyroZero[axis];			
    452c:	60 91 a7 07 	lds	r22, 0x07A7
    4530:	70 91 a8 07 	lds	r23, 0x07A8
    4534:	88 27       	eor	r24, r24
    4536:	77 fd       	sbrc	r23, 7
    4538:	80 95       	com	r24
    453a:	98 2f       	mov	r25, r24
    453c:	0e 94 41 46 	call	0x8c82	; 0x8c82 <__floatsisf>
    4540:	69 83       	std	Y+1, r22	; 0x01
    4542:	7a 83       	std	Y+2, r23	; 0x02
    4544:	8b 83       	std	Y+3, r24	; 0x03
    4546:	9c 83       	std	Y+4, r25	; 0x04
    4548:	60 91 a9 07 	lds	r22, 0x07A9
    454c:	70 91 aa 07 	lds	r23, 0x07AA
    4550:	88 27       	eor	r24, r24
    4552:	77 fd       	sbrc	r23, 7
    4554:	80 95       	com	r24
    4556:	98 2f       	mov	r25, r24
    4558:	0e 94 41 46 	call	0x8c82	; 0x8c82 <__floatsisf>
    455c:	6d 83       	std	Y+5, r22	; 0x05
    455e:	7e 83       	std	Y+6, r23	; 0x06
    4560:	8f 83       	std	Y+7, r24	; 0x07
    4562:	98 87       	std	Y+8, r25	; 0x08
    4564:	60 91 ab 07 	lds	r22, 0x07AB
    4568:	70 91 ac 07 	lds	r23, 0x07AC
    456c:	88 27       	eor	r24, r24
    456e:	77 fd       	sbrc	r23, 7
    4570:	80 95       	com	r24
    4572:	98 2f       	mov	r25, r24
    4574:	0e 94 41 46 	call	0x8c82	; 0x8c82 <__floatsisf>
    4578:	69 87       	std	Y+9, r22	; 0x09
    457a:	7a 87       	std	Y+10, r23	; 0x0a
    457c:	8b 87       	std	Y+11, r24	; 0x0b
    457e:	9c 87       	std	Y+12, r25	; 0x0c
    4580:	1d 8a       	std	Y+21, r1	; 0x15
    4582:	1b 8a       	std	Y+19, r1	; 0x13
    4584:	e1 2c       	mov	r14, r1
    4586:	f1 2c       	mov	r15, r1
    4588:	00 e0       	ldi	r16, 0x00	; 0
    458a:	10 e0       	ldi	r17, 0x00	; 0
	
	// Wait until gyros stable. Timeout after CAL_TIMEOUT seconds
	while (!Gyros_Stable && ((Gyro_seconds <= CAL_TIMEOUT)))
	{
		// Update status timeout
		Gyro_timeout += (uint8_t)(TCNT2 - Gyro_TCNT2);
    458c:	80 91 b2 00 	lds	r24, 0x00B2
    4590:	9d 89       	ldd	r25, Y+21	; 0x15
    4592:	89 1b       	sub	r24, r25
    4594:	e8 0e       	add	r14, r24
    4596:	f1 1c       	adc	r15, r1
		Gyro_TCNT2 = TCNT2;
    4598:	e0 91 b2 00 	lds	r30, 0x00B2
    459c:	ed 8b       	std	Y+21, r30	; 0x15

		// Count elapsed seconds
		if (Gyro_timeout > SECOND_TIMER)
    459e:	fc e4       	ldi	r31, 0x4C	; 76
    45a0:	ef 16       	cp	r14, r31
    45a2:	ff 06       	cpc	r15, r31
    45a4:	28 f0       	brcs	.+10     	; 0x45b0 <CalibrateGyrosSlow+0xc8>
		{
			Gyro_seconds++;
    45a6:	8b 89       	ldd	r24, Y+19	; 0x13
    45a8:	8f 5f       	subi	r24, 0xFF	; 255
    45aa:	8b 8b       	std	Y+19, r24	; 0x13
			Gyro_timeout = 0;
    45ac:	e1 2c       	mov	r14, r1
    45ae:	f1 2c       	mov	r15, r1
		}

		get_raw_gyros();
    45b0:	0e 94 8d 21 	call	0x431a	; 0x431a <get_raw_gyros>
    45b4:	fe 01       	movw	r30, r28
    45b6:	31 96       	adiw	r30, 0x01	; 1
    45b8:	6f 01       	movw	r12, r30
    45ba:	bf e6       	ldi	r27, 0x6F	; 111
    45bc:	2b 2e       	mov	r2, r27
    45be:	b5 e0       	ldi	r27, 0x05	; 5
    45c0:	3b 2e       	mov	r3, r27
    45c2:	ce 01       	movw	r24, r28
    45c4:	0d 96       	adiw	r24, 0x0d	; 13
    45c6:	5c 01       	movw	r10, r24

		// Calculate very long rolling average
		for (axis = 0; axis < NUMBEROFAXIS; axis++) 
    45c8:	1c 8a       	std	Y+20, r1	; 0x14
		{
			GyroSmooth[axis] = ((GyroSmooth[axis] * (float)999) + (float)(gyroADC[axis])) / (float)1000;
    45ca:	f1 01       	movw	r30, r2
    45cc:	81 90       	ld	r8, Z+
    45ce:	91 90       	ld	r9, Z+
    45d0:	1f 01       	movw	r2, r30
    45d2:	20 e0       	ldi	r18, 0x00	; 0
    45d4:	30 ec       	ldi	r19, 0xC0	; 192
    45d6:	49 e7       	ldi	r20, 0x79	; 121
    45d8:	54 e4       	ldi	r21, 0x44	; 68
    45da:	f6 01       	movw	r30, r12
    45dc:	60 81       	ld	r22, Z
    45de:	71 81       	ldd	r23, Z+1	; 0x01
    45e0:	82 81       	ldd	r24, Z+2	; 0x02
    45e2:	93 81       	ldd	r25, Z+3	; 0x03
    45e4:	0e 94 f5 46 	call	0x8dea	; 0x8dea <__mulsf3>
    45e8:	2b 01       	movw	r4, r22
    45ea:	3c 01       	movw	r6, r24
    45ec:	b4 01       	movw	r22, r8
    45ee:	88 27       	eor	r24, r24
    45f0:	77 fd       	sbrc	r23, 7
    45f2:	80 95       	com	r24
    45f4:	98 2f       	mov	r25, r24
    45f6:	0e 94 41 46 	call	0x8c82	; 0x8c82 <__floatsisf>
    45fa:	9b 01       	movw	r18, r22
    45fc:	ac 01       	movw	r20, r24
    45fe:	c3 01       	movw	r24, r6
    4600:	b2 01       	movw	r22, r4
    4602:	0e 94 3e 45 	call	0x8a7c	; 0x8a7c <__addsf3>
    4606:	20 e0       	ldi	r18, 0x00	; 0
    4608:	30 e0       	ldi	r19, 0x00	; 0
    460a:	4a e7       	ldi	r20, 0x7A	; 122
    460c:	54 e4       	ldi	r21, 0x44	; 68
    460e:	0e 94 a6 45 	call	0x8b4c	; 0x8b4c <__divsf3>
    4612:	f6 01       	movw	r30, r12
    4614:	60 83       	st	Z, r22
    4616:	71 83       	std	Z+1, r23	; 0x01
    4618:	82 83       	std	Z+2, r24	; 0x02
    461a:	93 83       	std	Z+3, r25	; 0x03
			
			// See if changing
			if (GyroOld[axis] != (int16_t)GyroSmooth[axis])
    461c:	0e 94 0e 46 	call	0x8c1c	; 0x8c1c <__fixsfsi>
    4620:	f5 01       	movw	r30, r10
    4622:	20 81       	ld	r18, Z
    4624:	31 81       	ldd	r19, Z+1	; 0x01
    4626:	26 17       	cp	r18, r22
    4628:	37 07       	cpc	r19, r23
    462a:	11 f0       	breq	.+4      	; 0x4630 <CalibrateGyrosSlow+0x148>
			{
				Gyros_Stable = false;
				Stable_counter = 0;
    462c:	00 e0       	ldi	r16, 0x00	; 0
    462e:	10 e0       	ldi	r17, 0x00	; 0
			}
		
			// Save old reading
			GyroOld[axis] = (int16_t)GyroSmooth[axis];
    4630:	f5 01       	movw	r30, r10
    4632:	61 93       	st	Z+, r22
    4634:	71 93       	st	Z+, r23
    4636:	5f 01       	movw	r10, r30
		}

		get_raw_gyros();

		// Calculate very long rolling average
		for (axis = 0; axis < NUMBEROFAXIS; axis++) 
    4638:	fc 89       	ldd	r31, Y+20	; 0x14
    463a:	ff 5f       	subi	r31, 0xFF	; 255
    463c:	fc 8b       	std	Y+20, r31	; 0x14
    463e:	84 e0       	ldi	r24, 0x04	; 4
    4640:	c8 0e       	add	r12, r24
    4642:	d1 1c       	adc	r13, r1
    4644:	f3 30       	cpi	r31, 0x03	; 3
    4646:	09 f6       	brne	.-126    	; 0x45ca <CalibrateGyrosSlow+0xe2>
			// Save old reading
			GyroOld[axis] = (int16_t)GyroSmooth[axis];
		}
		
		// Increment stable counter to measure how long we are still
		Stable_counter++;
    4648:	0f 5f       	subi	r16, 0xFF	; 255
    464a:	1f 4f       	sbci	r17, 0xFF	; 255
		
		// If stable for 5 seconds, do a quick calibrate
		if (Stable_counter > CAL_STABLE_TIME)
    464c:	09 3c       	cpi	r16, 0xC9	; 201
    464e:	11 05       	cpc	r17, r1
    4650:	20 f0       	brcs	.+8      	; 0x465a <CalibrateGyrosSlow+0x172>
		{
			Gyros_Stable = true;	
			CalibrateGyrosFast();		
    4652:	0e 94 1f 22 	call	0x443e	; 0x443e <CalibrateGyrosFast>
		Stable_counter++;
		
		// If stable for 5 seconds, do a quick calibrate
		if (Stable_counter > CAL_STABLE_TIME)
		{
			Gyros_Stable = true;	
    4656:	81 e0       	ldi	r24, 0x01	; 1
    4658:	01 c0       	rjmp	.+2      	; 0x465c <CalibrateGyrosSlow+0x174>
    465a:	80 e0       	ldi	r24, 0x00	; 0
    465c:	e7 e8       	ldi	r30, 0x87	; 135
    465e:	f3 e1       	ldi	r31, 0x13	; 19
    4660:	31 97       	sbiw	r30, 0x01	; 1
    4662:	f1 f7       	brne	.-4      	; 0x4660 <CalibrateGyrosSlow+0x178>
    4664:	00 c0       	rjmp	.+0      	; 0x4666 <CalibrateGyrosSlow+0x17e>
    4666:	00 00       	nop
	{
		GyroSmooth[axis] = Config.gyroZero[axis];			
	}
	
	// Wait until gyros stable. Timeout after CAL_TIMEOUT seconds
	while (!Gyros_Stable && ((Gyro_seconds <= CAL_TIMEOUT)))
    4668:	81 11       	cpse	r24, r1
    466a:	04 c0       	rjmp	.+8      	; 0x4674 <CalibrateGyrosSlow+0x18c>
    466c:	fb 89       	ldd	r31, Y+19	; 0x13
    466e:	f6 30       	cpi	r31, 0x06	; 6
    4670:	08 f4       	brcc	.+2      	; 0x4674 <CalibrateGyrosSlow+0x18c>
    4672:	8c cf       	rjmp	.-232    	; 0x458c <CalibrateGyrosSlow+0xa4>
		// Otherwise the original saved values are used
	}
	
	// Return success or failure
	return(Gyros_Stable);
}
    4674:	65 96       	adiw	r28, 0x15	; 21
    4676:	0f b6       	in	r0, 0x3f	; 63
    4678:	f8 94       	cli
    467a:	de bf       	out	0x3e, r29	; 62
    467c:	0f be       	out	0x3f, r0	; 63
    467e:	cd bf       	out	0x3d, r28	; 61
    4680:	df 91       	pop	r29
    4682:	cf 91       	pop	r28
    4684:	1f 91       	pop	r17
    4686:	0f 91       	pop	r16
    4688:	ff 90       	pop	r15
    468a:	ef 90       	pop	r14
    468c:	df 90       	pop	r13
    468e:	cf 90       	pop	r12
    4690:	bf 90       	pop	r11
    4692:	af 90       	pop	r10
    4694:	9f 90       	pop	r9
    4696:	8f 90       	pop	r8
    4698:	7f 90       	pop	r7
    469a:	6f 90       	pop	r6
    469c:	5f 90       	pop	r5
    469e:	4f 90       	pop	r4
    46a0:	3f 90       	pop	r3
    46a2:	2f 90       	pop	r2
    46a4:	08 95       	ret

000046a6 <init_i2c_gyros>:
//***************************************************************

void init_i2c_gyros(void)
{
	// First, configure the MPU6050
	writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_PWR_MGMT_1, 0x01); 			// Gyro X clock, awake
    46a6:	41 e0       	ldi	r20, 0x01	; 1
    46a8:	6b e6       	ldi	r22, 0x6B	; 107
    46aa:	80 ed       	ldi	r24, 0xD0	; 208
    46ac:	0e 94 6a 23 	call	0x46d4	; 0x46d4 <writeI2Cbyte>
	
	// Make INT pin open-drain so that we can connect it straight to the MPU
	writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_INT_PIN_CFG, 0x40);			// INT output is open-drain
    46b0:	40 e4       	ldi	r20, 0x40	; 64
    46b2:	67 e3       	ldi	r22, 0x37	; 55
    46b4:	80 ed       	ldi	r24, 0xD0	; 208
    46b6:	0e 94 6a 23 	call	0x46d4	; 0x46d4 <writeI2Cbyte>
	
	// MPU6050's internal LPF. Values are 0x06 = 5Hz, (5)10Hz, (4)21Hz, (3)44Hz, (2)94Hz, (1)184Hz LPF, (0)260Hz
	// Software's values are 0 to 6 = 5Hz to 260Hz, so numbering is reversed here.
	writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_CONFIG, (6 - Config.MPU6050_LPF));
    46ba:	46 e0       	ldi	r20, 0x06	; 6
    46bc:	80 91 42 06 	lds	r24, 0x0642
    46c0:	48 1b       	sub	r20, r24
    46c2:	6a e1       	ldi	r22, 0x1A	; 26
    46c4:	80 ed       	ldi	r24, 0xD0	; 208
    46c6:	0e 94 6a 23 	call	0x46d4	; 0x46d4 <writeI2Cbyte>
	
	// Now configure gyros
	writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_GYRO_CONFIG, GYROFS2000DEG);	// 2000 deg/sec
    46ca:	48 e1       	ldi	r20, 0x18	; 24
    46cc:	6b e1       	ldi	r22, 0x1B	; 27
    46ce:	80 ed       	ldi	r24, 0xD0	; 208
    46d0:	0c 94 6a 23 	jmp	0x46d4	; 0x46d4 <writeI2Cbyte>

000046d4 <writeI2Cbyte>:
//************************************************************
// Code
//************************************************************

void writeI2Cbyte(uint8_t address, uint8_t location, uint8_t value)
{
    46d4:	cf 93       	push	r28
    46d6:	df 93       	push	r29
    46d8:	00 d0       	rcall	.+0      	; 0x46da <writeI2Cbyte+0x6>
    46da:	cd b7       	in	r28, 0x3d	; 61
    46dc:	de b7       	in	r29, 0x3e	; 62
    i2c_start_wait(address+I2C_WRITE);				// Set up device address 
    46de:	4a 83       	std	Y+2, r20	; 0x02
    46e0:	69 83       	std	Y+1, r22	; 0x01
    46e2:	0e 94 2c 44 	call	0x8858	; 0x8858 <i2c_start_wait>
    i2c_write(location);							// Set up register address 
    46e6:	69 81       	ldd	r22, Y+1	; 0x01
    46e8:	86 2f       	mov	r24, r22
    46ea:	0e 94 7c 44 	call	0x88f8	; 0x88f8 <i2c_write>
    i2c_write(value); 								// Write byte
    46ee:	4a 81       	ldd	r20, Y+2	; 0x02
    46f0:	84 2f       	mov	r24, r20
    46f2:	0e 94 7c 44 	call	0x88f8	; 0x88f8 <i2c_write>
    i2c_stop();
}
    46f6:	0f 90       	pop	r0
    46f8:	0f 90       	pop	r0
    46fa:	df 91       	pop	r29
    46fc:	cf 91       	pop	r28
void writeI2Cbyte(uint8_t address, uint8_t location, uint8_t value)
{
    i2c_start_wait(address+I2C_WRITE);				// Set up device address 
    i2c_write(location);							// Set up register address 
    i2c_write(value); 								// Write byte
    i2c_stop();
    46fe:	0c 94 6d 44 	jmp	0x88da	; 0x88da <i2c_stop>

00004702 <readI2CbyteArray>:
}

void readI2CbyteArray(uint8_t address, uint8_t location, uint8_t *array,uint8_t size)
{
    4702:	cf 92       	push	r12
    4704:	df 92       	push	r13
    4706:	ef 92       	push	r14
    4708:	ff 92       	push	r15
    470a:	0f 93       	push	r16
    470c:	1f 93       	push	r17
    470e:	cf 93       	push	r28
    4710:	df 93       	push	r29
    4712:	00 d0       	rcall	.+0      	; 0x4714 <readI2CbyteArray+0x12>
    4714:	1f 92       	push	r1
    4716:	cd b7       	in	r28, 0x3d	; 61
    4718:	de b7       	in	r29, 0x3e	; 62
    471a:	18 2f       	mov	r17, r24
    471c:	e2 2e       	mov	r14, r18
	int i=0;

    i2c_start_wait(address+I2C_WRITE);
    471e:	4a 83       	std	Y+2, r20	; 0x02
    4720:	5b 83       	std	Y+3, r21	; 0x03
    4722:	69 83       	std	Y+1, r22	; 0x01
    4724:	0e 94 2c 44 	call	0x8858	; 0x8858 <i2c_start_wait>
    i2c_write(location);							// Set up register address 
    4728:	69 81       	ldd	r22, Y+1	; 0x01
    472a:	86 2f       	mov	r24, r22
    472c:	0e 94 7c 44 	call	0x88f8	; 0x88f8 <i2c_write>
    i2c_rep_start(address+I2C_READ);
    4730:	81 e0       	ldi	r24, 0x01	; 1
    4732:	81 0f       	add	r24, r17
    4734:	0e 94 6b 44 	call	0x88d6	; 0x88d6 <i2c_rep_start>
    4738:	4a 81       	ldd	r20, Y+2	; 0x02
    473a:	c4 2e       	mov	r12, r20
    473c:	5b 81       	ldd	r21, Y+3	; 0x03
    473e:	d5 2e       	mov	r13, r21
    i2c_stop();
}

void readI2CbyteArray(uint8_t address, uint8_t location, uint8_t *array,uint8_t size)
{
	int i=0;
    4740:	00 e0       	ldi	r16, 0x00	; 0
    4742:	10 e0       	ldi	r17, 0x00	; 0

    i2c_start_wait(address+I2C_WRITE);
    i2c_write(location);							// Set up register address 
    i2c_rep_start(address+I2C_READ);

	while (i < size)
    4744:	f1 2c       	mov	r15, r1
    4746:	0e 15       	cp	r16, r14
    4748:	1f 05       	cpc	r17, r15
    474a:	84 f4       	brge	.+32     	; 0x476c <readI2CbyteArray+0x6a>
	{
		if ((i+1)!=size)
    474c:	0f 5f       	subi	r16, 0xFF	; 255
    474e:	1f 4f       	sbci	r17, 0xFF	; 255
    4750:	0e 15       	cp	r16, r14
    4752:	1f 05       	cpc	r17, r15
    4754:	19 f0       	breq	.+6      	; 0x475c <readI2CbyteArray+0x5a>
		{
			array[i]=i2c_readAck();
    4756:	0e 94 9c 44 	call	0x8938	; 0x8938 <i2c_readAck>
    475a:	02 c0       	rjmp	.+4      	; 0x4760 <readI2CbyteArray+0x5e>
		}
		else
		{
			array[i]=i2c_readNak(); 				// Read without ACK on last byte
    475c:	0e 94 b5 44 	call	0x896a	; 0x896a <i2c_readNak>
    4760:	f6 01       	movw	r30, r12
    4762:	80 83       	st	Z, r24
    4764:	ff ef       	ldi	r31, 0xFF	; 255
    4766:	cf 1a       	sub	r12, r31
    4768:	df 0a       	sbc	r13, r31
    476a:	ed cf       	rjmp	.-38     	; 0x4746 <readI2CbyteArray+0x44>
		}
		i++;
	}

    i2c_stop();
}
    476c:	0f 90       	pop	r0
    476e:	0f 90       	pop	r0
    4770:	0f 90       	pop	r0
    4772:	df 91       	pop	r29
    4774:	cf 91       	pop	r28
    4776:	1f 91       	pop	r17
    4778:	0f 91       	pop	r16
    477a:	ff 90       	pop	r15
    477c:	ef 90       	pop	r14
    477e:	df 90       	pop	r13
    4780:	cf 90       	pop	r12
			array[i]=i2c_readNak(); 				// Read without ACK on last byte
		}
		i++;
	}

    i2c_stop();
    4782:	0c 94 6d 44 	jmp	0x88da	; 0x88da <i2c_stop>

00004786 <RotateVector>:
	VectorX = VectorNewA;
	VectorY = VectorNewB;
}

void RotateVector(float angle)
{
    4786:	4f 92       	push	r4
    4788:	5f 92       	push	r5
    478a:	6f 92       	push	r6
    478c:	7f 92       	push	r7
    478e:	8f 92       	push	r8
    4790:	9f 92       	push	r9
    4792:	af 92       	push	r10
    4794:	bf 92       	push	r11
    4796:	cf 92       	push	r12
    4798:	df 92       	push	r13
    479a:	ef 92       	push	r14
    479c:	ff 92       	push	r15
    479e:	cf 93       	push	r28
    47a0:	df 93       	push	r29
    47a2:	cd b7       	in	r28, 0x3d	; 61
    47a4:	de b7       	in	r29, 0x3e	; 62
    47a6:	28 97       	sbiw	r28, 0x08	; 8
    47a8:	0f b6       	in	r0, 0x3f	; 63
    47aa:	f8 94       	cli
    47ac:	de bf       	out	0x3e, r29	; 62
    47ae:	0f be       	out	0x3f, r0	; 63
    47b0:	cd bf       	out	0x3d, r28	; 61
    47b2:	6b 01       	movw	r12, r22
    47b4:	7c 01       	movw	r14, r24
	VectorNewA = VectorA * small_cos(angle) - VectorB * small_sine(angle);
    47b6:	80 90 a9 05 	lds	r8, 0x05A9
    47ba:	90 90 aa 05 	lds	r9, 0x05AA
    47be:	a0 90 ab 05 	lds	r10, 0x05AB
    47c2:	b0 90 ac 05 	lds	r11, 0x05AC
float small_cos(float angle)
{
	// cos(angle) = (1 - (angle^2 / 2))
	float temp;
	
	temp = (angle * angle) / 2;
    47c6:	9b 01       	movw	r18, r22
    47c8:	ac 01       	movw	r20, r24
    47ca:	0e 94 f5 46 	call	0x8dea	; 0x8dea <__mulsf3>
    47ce:	20 e0       	ldi	r18, 0x00	; 0
    47d0:	30 e0       	ldi	r19, 0x00	; 0
    47d2:	40 e0       	ldi	r20, 0x00	; 0
    47d4:	5f e3       	ldi	r21, 0x3F	; 63
    47d6:	0e 94 f5 46 	call	0x8dea	; 0x8dea <__mulsf3>
    47da:	9b 01       	movw	r18, r22
    47dc:	ac 01       	movw	r20, r24
	temp = 1 - temp;
    47de:	60 e0       	ldi	r22, 0x00	; 0
    47e0:	70 e0       	ldi	r23, 0x00	; 0
    47e2:	80 e8       	ldi	r24, 0x80	; 128
    47e4:	9f e3       	ldi	r25, 0x3F	; 63
    47e6:	0e 94 3d 45 	call	0x8a7a	; 0x8a7a <__subsf3>
    47ea:	69 83       	std	Y+1, r22	; 0x01
    47ec:	7a 83       	std	Y+2, r23	; 0x02
    47ee:	8b 83       	std	Y+3, r24	; 0x03
    47f0:	9c 83       	std	Y+4, r25	; 0x04
	VectorY = VectorNewB;
}

void RotateVector(float angle)
{
	VectorNewA = VectorA * small_cos(angle) - VectorB * small_sine(angle);
    47f2:	40 90 ad 05 	lds	r4, 0x05AD
    47f6:	50 90 ae 05 	lds	r5, 0x05AE
    47fa:	60 90 af 05 	lds	r6, 0x05AF
    47fe:	70 90 b0 05 	lds	r7, 0x05B0
    4802:	9b 01       	movw	r18, r22
    4804:	ac 01       	movw	r20, r24
    4806:	c5 01       	movw	r24, r10
    4808:	b4 01       	movw	r22, r8
    480a:	0e 94 f5 46 	call	0x8dea	; 0x8dea <__mulsf3>
    480e:	6d 83       	std	Y+5, r22	; 0x05
    4810:	7e 83       	std	Y+6, r23	; 0x06
    4812:	8f 83       	std	Y+7, r24	; 0x07
    4814:	98 87       	std	Y+8, r25	; 0x08
    4816:	a7 01       	movw	r20, r14
    4818:	96 01       	movw	r18, r12
    481a:	c3 01       	movw	r24, r6
    481c:	b2 01       	movw	r22, r4
    481e:	0e 94 f5 46 	call	0x8dea	; 0x8dea <__mulsf3>
    4822:	9b 01       	movw	r18, r22
    4824:	ac 01       	movw	r20, r24
    4826:	6d 81       	ldd	r22, Y+5	; 0x05
    4828:	7e 81       	ldd	r23, Y+6	; 0x06
    482a:	8f 81       	ldd	r24, Y+7	; 0x07
    482c:	98 85       	ldd	r25, Y+8	; 0x08
    482e:	0e 94 3d 45 	call	0x8a7a	; 0x8a7a <__subsf3>
    4832:	60 93 95 05 	sts	0x0595, r22
    4836:	70 93 96 05 	sts	0x0596, r23
    483a:	80 93 97 05 	sts	0x0597, r24
    483e:	90 93 98 05 	sts	0x0598, r25
	VectorNewB = VectorA * small_sine(angle) + VectorB * small_cos(angle);
    4842:	a7 01       	movw	r20, r14
    4844:	96 01       	movw	r18, r12
    4846:	c5 01       	movw	r24, r10
    4848:	b4 01       	movw	r22, r8
    484a:	0e 94 f5 46 	call	0x8dea	; 0x8dea <__mulsf3>
    484e:	6b 01       	movw	r12, r22
    4850:	7c 01       	movw	r14, r24
    4852:	29 81       	ldd	r18, Y+1	; 0x01
    4854:	3a 81       	ldd	r19, Y+2	; 0x02
    4856:	4b 81       	ldd	r20, Y+3	; 0x03
    4858:	5c 81       	ldd	r21, Y+4	; 0x04
    485a:	c3 01       	movw	r24, r6
    485c:	b2 01       	movw	r22, r4
    485e:	0e 94 f5 46 	call	0x8dea	; 0x8dea <__mulsf3>
    4862:	9b 01       	movw	r18, r22
    4864:	ac 01       	movw	r20, r24
    4866:	c7 01       	movw	r24, r14
    4868:	b6 01       	movw	r22, r12
    486a:	0e 94 3e 45 	call	0x8a7c	; 0x8a7c <__addsf3>
    486e:	60 93 75 05 	sts	0x0575, r22
    4872:	70 93 76 05 	sts	0x0576, r23
    4876:	80 93 77 05 	sts	0x0577, r24
    487a:	90 93 78 05 	sts	0x0578, r25
}
    487e:	28 96       	adiw	r28, 0x08	; 8
    4880:	0f b6       	in	r0, 0x3f	; 63
    4882:	f8 94       	cli
    4884:	de bf       	out	0x3e, r29	; 62
    4886:	0f be       	out	0x3f, r0	; 63
    4888:	cd bf       	out	0x3d, r28	; 61
    488a:	df 91       	pop	r29
    488c:	cf 91       	pop	r28
    488e:	ff 90       	pop	r15
    4890:	ef 90       	pop	r14
    4892:	df 90       	pop	r13
    4894:	cf 90       	pop	r12
    4896:	bf 90       	pop	r11
    4898:	af 90       	pop	r10
    489a:	9f 90       	pop	r9
    489c:	8f 90       	pop	r8
    489e:	7f 90       	pop	r7
    48a0:	6f 90       	pop	r6
    48a2:	5f 90       	pop	r5
    48a4:	4f 90       	pop	r4
    48a6:	08 95       	ret

000048a8 <thetascale>:

void thetascale(float gyro, float interval)
{
    48a8:	cf 92       	push	r12
    48aa:	df 92       	push	r13
    48ac:	ef 92       	push	r14
    48ae:	ff 92       	push	r15
    48b0:	69 01       	movw	r12, r18
    48b2:	7a 01       	movw	r14, r20
	// interval = time in seconds since last measurement
	// GYROSENSRADIANS = conversion from raw gyro data to rad/s
	// theta = actual number of radians moved

	theta = (gyro * GYROSENSRADIANS * interval);
    48b4:	25 ef       	ldi	r18, 0xF5	; 245
    48b6:	31 ea       	ldi	r19, 0xA1	; 161
    48b8:	4b e8       	ldi	r20, 0x8B	; 139
    48ba:	5c e3       	ldi	r21, 0x3C	; 60
    48bc:	0e 94 f5 46 	call	0x8dea	; 0x8dea <__mulsf3>
    48c0:	a7 01       	movw	r20, r14
    48c2:	96 01       	movw	r18, r12
    48c4:	0e 94 f5 46 	call	0x8dea	; 0x8dea <__mulsf3>
    48c8:	6b 01       	movw	r12, r22
    48ca:	7c 01       	movw	r14, r24
	
	// The sin() and cos() functions don't appreciate large 
	// input values. Limit the input values to +/-15 degrees. 
	
	if (theta > maxdeltaangle)
    48cc:	26 ea       	ldi	r18, 0xA6	; 166
    48ce:	3a e0       	ldi	r19, 0x0A	; 10
    48d0:	46 e8       	ldi	r20, 0x86	; 134
    48d2:	5e e3       	ldi	r21, 0x3E	; 62
    48d4:	0e 94 f1 46 	call	0x8de2	; 0x8de2 <__gesf2>
    48d8:	18 16       	cp	r1, r24
    48da:	4c f0       	brlt	.+18     	; 0x48ee <thetascale+0x46>
{
	// interval = time in seconds since last measurement
	// GYROSENSRADIANS = conversion from raw gyro data to rad/s
	// theta = actual number of radians moved

	theta = (gyro * GYROSENSRADIANS * interval);
    48dc:	c0 92 89 05 	sts	0x0589, r12
    48e0:	d0 92 8a 05 	sts	0x058A, r13
    48e4:	e0 92 8b 05 	sts	0x058B, r14
    48e8:	f0 92 8c 05 	sts	0x058C, r15
    48ec:	0c c0       	rjmp	.+24     	; 0x4906 <thetascale+0x5e>
	// The sin() and cos() functions don't appreciate large 
	// input values. Limit the input values to +/-15 degrees. 
	
	if (theta > maxdeltaangle)
	{
		theta = maxdeltaangle;
    48ee:	86 ea       	ldi	r24, 0xA6	; 166
    48f0:	9a e0       	ldi	r25, 0x0A	; 10
    48f2:	a6 e8       	ldi	r26, 0x86	; 134
    48f4:	be e3       	ldi	r27, 0x3E	; 62
    48f6:	80 93 89 05 	sts	0x0589, r24
    48fa:	90 93 8a 05 	sts	0x058A, r25
    48fe:	a0 93 8b 05 	sts	0x058B, r26
    4902:	b0 93 8c 05 	sts	0x058C, r27
	}
	
	if (theta < -maxdeltaangle)
    4906:	26 ea       	ldi	r18, 0xA6	; 166
    4908:	3a e0       	ldi	r19, 0x0A	; 10
    490a:	46 e8       	ldi	r20, 0x86	; 134
    490c:	5e eb       	ldi	r21, 0xBE	; 190
    490e:	60 91 89 05 	lds	r22, 0x0589
    4912:	70 91 8a 05 	lds	r23, 0x058A
    4916:	80 91 8b 05 	lds	r24, 0x058B
    491a:	90 91 8c 05 	lds	r25, 0x058C
    491e:	0e 94 a2 45 	call	0x8b44	; 0x8b44 <__cmpsf2>
    4922:	87 ff       	sbrs	r24, 7
    4924:	0c c0       	rjmp	.+24     	; 0x493e <thetascale+0x96>
	{
		theta = -maxdeltaangle;
    4926:	86 ea       	ldi	r24, 0xA6	; 166
    4928:	9a e0       	ldi	r25, 0x0A	; 10
    492a:	a6 e8       	ldi	r26, 0x86	; 134
    492c:	be eb       	ldi	r27, 0xBE	; 190
    492e:	80 93 89 05 	sts	0x0589, r24
    4932:	90 93 8a 05 	sts	0x058A, r25
    4936:	a0 93 8b 05 	sts	0x058B, r26
    493a:	b0 93 8c 05 	sts	0x058C, r27
	}
}
    493e:	ff 90       	pop	r15
    4940:	ef 90       	pop	r14
    4942:	df 90       	pop	r13
    4944:	cf 90       	pop	r12
    4946:	08 95       	ret

00004948 <Rotate3dVector>:
	angle[ROLL] = (int16_t)(EulerAngleRoll * -100);
	angle[PITCH] = (int16_t)(EulerAnglePitch * -100);
}

void Rotate3dVector(void)
{
    4948:	cf 93       	push	r28
    494a:	df 93       	push	r29
    494c:	00 d0       	rcall	.+0      	; 0x494e <Rotate3dVector+0x6>
    494e:	00 d0       	rcall	.+0      	; 0x4950 <Rotate3dVector+0x8>
    4950:	cd b7       	in	r28, 0x3d	; 61
    4952:	de b7       	in	r29, 0x3e	; 62
	// Rotate around X axis (pitch)
	thetascale(GyroPitchVC, interval);
    4954:	20 91 5b 05 	lds	r18, 0x055B
    4958:	30 91 5c 05 	lds	r19, 0x055C
    495c:	40 91 5d 05 	lds	r20, 0x055D
    4960:	50 91 5e 05 	lds	r21, 0x055E
    4964:	60 91 85 05 	lds	r22, 0x0585
    4968:	70 91 86 05 	lds	r23, 0x0586
    496c:	80 91 87 05 	lds	r24, 0x0587
    4970:	90 91 88 05 	lds	r25, 0x0588
    4974:	0e 94 54 24 	call	0x48a8	; 0x48a8 <thetascale>
	VectorA = VectorY;
    4978:	80 91 26 05 	lds	r24, 0x0526
    497c:	90 91 27 05 	lds	r25, 0x0527
    4980:	a0 91 28 05 	lds	r26, 0x0528
    4984:	b0 91 29 05 	lds	r27, 0x0529
    4988:	80 93 a9 05 	sts	0x05A9, r24
    498c:	90 93 aa 05 	sts	0x05AA, r25
    4990:	a0 93 ab 05 	sts	0x05AB, r26
    4994:	b0 93 ac 05 	sts	0x05AC, r27
	VectorB = VectorZ;
    4998:	80 91 01 05 	lds	r24, 0x0501
    499c:	90 91 02 05 	lds	r25, 0x0502
    49a0:	a0 91 03 05 	lds	r26, 0x0503
    49a4:	b0 91 04 05 	lds	r27, 0x0504
    49a8:	80 93 ad 05 	sts	0x05AD, r24
    49ac:	90 93 ae 05 	sts	0x05AE, r25
    49b0:	a0 93 af 05 	sts	0x05AF, r26
    49b4:	b0 93 b0 05 	sts	0x05B0, r27
	RotateVector(theta);
    49b8:	60 91 89 05 	lds	r22, 0x0589
    49bc:	70 91 8a 05 	lds	r23, 0x058A
    49c0:	80 91 8b 05 	lds	r24, 0x058B
    49c4:	90 91 8c 05 	lds	r25, 0x058C
    49c8:	0e 94 c3 23 	call	0x4786	; 0x4786 <RotateVector>
	VectorY = VectorNewA;
    49cc:	80 91 95 05 	lds	r24, 0x0595
    49d0:	90 91 96 05 	lds	r25, 0x0596
    49d4:	a0 91 97 05 	lds	r26, 0x0597
    49d8:	b0 91 98 05 	lds	r27, 0x0598
    49dc:	80 93 26 05 	sts	0x0526, r24
    49e0:	90 93 27 05 	sts	0x0527, r25
    49e4:	a0 93 28 05 	sts	0x0528, r26
    49e8:	b0 93 29 05 	sts	0x0529, r27
	VectorZ = VectorNewB;
    49ec:	80 91 75 05 	lds	r24, 0x0575
    49f0:	90 91 76 05 	lds	r25, 0x0576
    49f4:	a0 91 77 05 	lds	r26, 0x0577
    49f8:	b0 91 78 05 	lds	r27, 0x0578
    49fc:	80 93 01 05 	sts	0x0501, r24
    4a00:	90 93 02 05 	sts	0x0502, r25
    4a04:	a0 93 03 05 	sts	0x0503, r26
    4a08:	b0 93 04 05 	sts	0x0504, r27

	// Rotate around Y axis (roll)
	thetascale (GyroRollVC, interval);
    4a0c:	20 91 5b 05 	lds	r18, 0x055B
    4a10:	30 91 5c 05 	lds	r19, 0x055C
    4a14:	40 91 5d 05 	lds	r20, 0x055D
    4a18:	50 91 5e 05 	lds	r21, 0x055E
    4a1c:	60 91 8d 05 	lds	r22, 0x058D
    4a20:	70 91 8e 05 	lds	r23, 0x058E
    4a24:	80 91 8f 05 	lds	r24, 0x058F
    4a28:	90 91 90 05 	lds	r25, 0x0590
    4a2c:	0e 94 54 24 	call	0x48a8	; 0x48a8 <thetascale>
	VectorA = VectorX;
    4a30:	80 91 2a 05 	lds	r24, 0x052A
    4a34:	90 91 2b 05 	lds	r25, 0x052B
    4a38:	a0 91 2c 05 	lds	r26, 0x052C
    4a3c:	b0 91 2d 05 	lds	r27, 0x052D
    4a40:	80 93 a9 05 	sts	0x05A9, r24
    4a44:	90 93 aa 05 	sts	0x05AA, r25
    4a48:	a0 93 ab 05 	sts	0x05AB, r26
    4a4c:	b0 93 ac 05 	sts	0x05AC, r27
	VectorB = VectorZ;
    4a50:	80 91 01 05 	lds	r24, 0x0501
    4a54:	90 91 02 05 	lds	r25, 0x0502
    4a58:	a0 91 03 05 	lds	r26, 0x0503
    4a5c:	b0 91 04 05 	lds	r27, 0x0504
    4a60:	80 93 ad 05 	sts	0x05AD, r24
    4a64:	90 93 ae 05 	sts	0x05AE, r25
    4a68:	a0 93 af 05 	sts	0x05AF, r26
    4a6c:	b0 93 b0 05 	sts	0x05B0, r27
	RotateVector(theta);
    4a70:	60 91 89 05 	lds	r22, 0x0589
    4a74:	70 91 8a 05 	lds	r23, 0x058A
    4a78:	80 91 8b 05 	lds	r24, 0x058B
    4a7c:	90 91 8c 05 	lds	r25, 0x058C
    4a80:	0e 94 c3 23 	call	0x4786	; 0x4786 <RotateVector>
	VectorX = VectorNewA;
    4a84:	80 91 95 05 	lds	r24, 0x0595
    4a88:	90 91 96 05 	lds	r25, 0x0596
    4a8c:	a0 91 97 05 	lds	r26, 0x0597
    4a90:	b0 91 98 05 	lds	r27, 0x0598
    4a94:	80 93 2a 05 	sts	0x052A, r24
    4a98:	90 93 2b 05 	sts	0x052B, r25
    4a9c:	a0 93 2c 05 	sts	0x052C, r26
    4aa0:	b0 93 2d 05 	sts	0x052D, r27
	VectorZ = VectorNewB;
    4aa4:	80 91 75 05 	lds	r24, 0x0575
    4aa8:	90 91 76 05 	lds	r25, 0x0576
    4aac:	a0 91 77 05 	lds	r26, 0x0577
    4ab0:	b0 91 78 05 	lds	r27, 0x0578
    4ab4:	80 93 01 05 	sts	0x0501, r24
    4ab8:	90 93 02 05 	sts	0x0502, r25
    4abc:	a0 93 03 05 	sts	0x0503, r26
    4ac0:	b0 93 04 05 	sts	0x0504, r27

	// Rotate around Z axis (yaw)
	thetascale(gyroADC[YAW], interval);
    4ac4:	20 91 5b 05 	lds	r18, 0x055B
    4ac8:	30 91 5c 05 	lds	r19, 0x055C
    4acc:	40 91 5d 05 	lds	r20, 0x055D
    4ad0:	50 91 5e 05 	lds	r21, 0x055E
    4ad4:	60 91 73 05 	lds	r22, 0x0573
    4ad8:	70 91 74 05 	lds	r23, 0x0574
    4adc:	88 27       	eor	r24, r24
    4ade:	77 fd       	sbrc	r23, 7
    4ae0:	80 95       	com	r24
    4ae2:	98 2f       	mov	r25, r24
    4ae4:	29 83       	std	Y+1, r18	; 0x01
    4ae6:	3a 83       	std	Y+2, r19	; 0x02
    4ae8:	4b 83       	std	Y+3, r20	; 0x03
    4aea:	5c 83       	std	Y+4, r21	; 0x04
    4aec:	0e 94 41 46 	call	0x8c82	; 0x8c82 <__floatsisf>
    4af0:	29 81       	ldd	r18, Y+1	; 0x01
    4af2:	3a 81       	ldd	r19, Y+2	; 0x02
    4af4:	4b 81       	ldd	r20, Y+3	; 0x03
    4af6:	5c 81       	ldd	r21, Y+4	; 0x04
    4af8:	0e 94 54 24 	call	0x48a8	; 0x48a8 <thetascale>
	VectorA = VectorX;
    4afc:	80 91 2a 05 	lds	r24, 0x052A
    4b00:	90 91 2b 05 	lds	r25, 0x052B
    4b04:	a0 91 2c 05 	lds	r26, 0x052C
    4b08:	b0 91 2d 05 	lds	r27, 0x052D
    4b0c:	80 93 a9 05 	sts	0x05A9, r24
    4b10:	90 93 aa 05 	sts	0x05AA, r25
    4b14:	a0 93 ab 05 	sts	0x05AB, r26
    4b18:	b0 93 ac 05 	sts	0x05AC, r27
	VectorB = VectorY;
    4b1c:	80 91 26 05 	lds	r24, 0x0526
    4b20:	90 91 27 05 	lds	r25, 0x0527
    4b24:	a0 91 28 05 	lds	r26, 0x0528
    4b28:	b0 91 29 05 	lds	r27, 0x0529
    4b2c:	80 93 ad 05 	sts	0x05AD, r24
    4b30:	90 93 ae 05 	sts	0x05AE, r25
    4b34:	a0 93 af 05 	sts	0x05AF, r26
    4b38:	b0 93 b0 05 	sts	0x05B0, r27
	RotateVector(theta);
    4b3c:	60 91 89 05 	lds	r22, 0x0589
    4b40:	70 91 8a 05 	lds	r23, 0x058A
    4b44:	80 91 8b 05 	lds	r24, 0x058B
    4b48:	90 91 8c 05 	lds	r25, 0x058C
    4b4c:	0e 94 c3 23 	call	0x4786	; 0x4786 <RotateVector>
	VectorX = VectorNewA;
    4b50:	80 91 95 05 	lds	r24, 0x0595
    4b54:	90 91 96 05 	lds	r25, 0x0596
    4b58:	a0 91 97 05 	lds	r26, 0x0597
    4b5c:	b0 91 98 05 	lds	r27, 0x0598
    4b60:	80 93 2a 05 	sts	0x052A, r24
    4b64:	90 93 2b 05 	sts	0x052B, r25
    4b68:	a0 93 2c 05 	sts	0x052C, r26
    4b6c:	b0 93 2d 05 	sts	0x052D, r27
	VectorY = VectorNewB;
    4b70:	80 91 75 05 	lds	r24, 0x0575
    4b74:	90 91 76 05 	lds	r25, 0x0576
    4b78:	a0 91 77 05 	lds	r26, 0x0577
    4b7c:	b0 91 78 05 	lds	r27, 0x0578
    4b80:	80 93 26 05 	sts	0x0526, r24
    4b84:	90 93 27 05 	sts	0x0527, r25
    4b88:	a0 93 28 05 	sts	0x0528, r26
    4b8c:	b0 93 29 05 	sts	0x0529, r27
}
    4b90:	0f 90       	pop	r0
    4b92:	0f 90       	pop	r0
    4b94:	0f 90       	pop	r0
    4b96:	0f 90       	pop	r0
    4b98:	df 91       	pop	r29
    4b9a:	cf 91       	pop	r28
    4b9c:	08 95       	ret

00004b9e <ext2>:
	EulerAngleRoll = ext2(VectorX);
	EulerAnglePitch = ext2(VectorY);
}

float ext2(float Vector)
{
    4b9e:	cf 92       	push	r12
    4ba0:	df 92       	push	r13
    4ba2:	ef 92       	push	r14
    4ba4:	ff 92       	push	r15
	float temp;
	
	// Rough translation to Euler angles
	temp = Vector * 90;
    4ba6:	20 e0       	ldi	r18, 0x00	; 0
    4ba8:	30 e0       	ldi	r19, 0x00	; 0
    4baa:	44 eb       	ldi	r20, 0xB4	; 180
    4bac:	52 e4       	ldi	r21, 0x42	; 66
    4bae:	0e 94 f5 46 	call	0x8dea	; 0x8dea <__mulsf3>
    4bb2:	6b 01       	movw	r12, r22
    4bb4:	7c 01       	movw	r14, r24

	// Change 0-90-0 to 0-90-180 so that
	// swap happens at 100% inverted
	if (VectorZ < 0)
    4bb6:	20 e0       	ldi	r18, 0x00	; 0
    4bb8:	30 e0       	ldi	r19, 0x00	; 0
    4bba:	a9 01       	movw	r20, r18
    4bbc:	60 91 01 05 	lds	r22, 0x0501
    4bc0:	70 91 02 05 	lds	r23, 0x0502
    4bc4:	80 91 03 05 	lds	r24, 0x0503
    4bc8:	90 91 04 05 	lds	r25, 0x0504
    4bcc:	0e 94 a2 45 	call	0x8b44	; 0x8b44 <__cmpsf2>
    4bd0:	87 ff       	sbrs	r24, 7
    4bd2:	18 c0       	rjmp	.+48     	; 0x4c04 <ext2+0x66>
	{
		// CW rotations
		if (temp > 0)
    4bd4:	20 e0       	ldi	r18, 0x00	; 0
    4bd6:	30 e0       	ldi	r19, 0x00	; 0
    4bd8:	a9 01       	movw	r20, r18
    4bda:	c7 01       	movw	r24, r14
    4bdc:	b6 01       	movw	r22, r12
    4bde:	0e 94 f1 46 	call	0x8de2	; 0x8de2 <__gesf2>
		{
			temp = 180 - temp;
    4be2:	a7 01       	movw	r20, r14
    4be4:	96 01       	movw	r18, r12
	// Change 0-90-0 to 0-90-180 so that
	// swap happens at 100% inverted
	if (VectorZ < 0)
	{
		// CW rotations
		if (temp > 0)
    4be6:	18 16       	cp	r1, r24
    4be8:	2c f4       	brge	.+10     	; 0x4bf4 <ext2+0x56>
		{
			temp = 180 - temp;
    4bea:	60 e0       	ldi	r22, 0x00	; 0
    4bec:	70 e0       	ldi	r23, 0x00	; 0
    4bee:	84 e3       	ldi	r24, 0x34	; 52
    4bf0:	93 e4       	ldi	r25, 0x43	; 67
    4bf2:	04 c0       	rjmp	.+8      	; 0x4bfc <ext2+0x5e>
		}
		// CCW rotations
		else
		{
			temp = -180 - temp;
    4bf4:	60 e0       	ldi	r22, 0x00	; 0
    4bf6:	70 e0       	ldi	r23, 0x00	; 0
    4bf8:	84 e3       	ldi	r24, 0x34	; 52
    4bfa:	93 ec       	ldi	r25, 0xC3	; 195
    4bfc:	0e 94 3d 45 	call	0x8a7a	; 0x8a7a <__subsf3>
    4c00:	6b 01       	movw	r12, r22
    4c02:	7c 01       	movw	r14, r24
		}
	}

	return (temp);
}
    4c04:	c7 01       	movw	r24, r14
    4c06:	b6 01       	movw	r22, r12
    4c08:	ff 90       	pop	r15
    4c0a:	ef 90       	pop	r14
    4c0c:	df 90       	pop	r13
    4c0e:	cf 90       	pop	r12
    4c10:	08 95       	ret

00004c12 <ExtractEulerAngles>:
	return temp;
}

void ExtractEulerAngles(void)
{
	EulerAngleRoll = ext2(VectorX);
    4c12:	60 91 2a 05 	lds	r22, 0x052A
    4c16:	70 91 2b 05 	lds	r23, 0x052B
    4c1a:	80 91 2c 05 	lds	r24, 0x052C
    4c1e:	90 91 2d 05 	lds	r25, 0x052D
    4c22:	0e 94 cf 25 	call	0x4b9e	; 0x4b9e <ext2>
    4c26:	60 93 a5 05 	sts	0x05A5, r22
    4c2a:	70 93 a6 05 	sts	0x05A6, r23
    4c2e:	80 93 a7 05 	sts	0x05A7, r24
    4c32:	90 93 a8 05 	sts	0x05A8, r25
	EulerAnglePitch = ext2(VectorY);
    4c36:	60 91 26 05 	lds	r22, 0x0526
    4c3a:	70 91 27 05 	lds	r23, 0x0527
    4c3e:	80 91 28 05 	lds	r24, 0x0528
    4c42:	90 91 29 05 	lds	r25, 0x0529
    4c46:	0e 94 cf 25 	call	0x4b9e	; 0x4b9e <ext2>
    4c4a:	60 93 79 05 	sts	0x0579, r22
    4c4e:	70 93 7a 05 	sts	0x057A, r23
    4c52:	80 93 7b 05 	sts	0x057B, r24
    4c56:	90 93 7c 05 	sts	0x057C, r25
    4c5a:	08 95       	ret

00004c5c <simple_imu_update>:
//		* = swapped axis
//
//************************************************************

void simple_imu_update(uint32_t period)
{
    4c5c:	4f 92       	push	r4
    4c5e:	5f 92       	push	r5
    4c60:	6f 92       	push	r6
    4c62:	7f 92       	push	r7
    4c64:	8f 92       	push	r8
    4c66:	9f 92       	push	r9
    4c68:	af 92       	push	r10
    4c6a:	bf 92       	push	r11
    4c6c:	cf 92       	push	r12
    4c6e:	df 92       	push	r13
    4c70:	ef 92       	push	r14
    4c72:	ff 92       	push	r15
    4c74:	0f 93       	push	r16
    4c76:	1f 93       	push	r17
    4c78:	cf 93       	push	r28
    4c7a:	df 93       	push	r29
    4c7c:	cd b7       	in	r28, 0x3d	; 61
    4c7e:	de b7       	in	r29, 0x3e	; 62
    4c80:	28 97       	sbiw	r28, 0x08	; 8
    4c82:	0f b6       	in	r0, 0x3f	; 63
    4c84:	f8 94       	cli
    4c86:	de bf       	out	0x3e, r29	; 62
    4c88:	0f be       	out	0x3f, r0	; 63
    4c8a:	cd bf       	out	0x3d, r28	; 61
	uint32_t	roll_sq, pitch_sq, yaw_sq;
	uint32_t 	AccMag = 0;
		
	// Work out interval in seconds
	// Convert (period) from units of 400ns (1/2500000) to seconds (1s/400ns = 2500000)
	tempf = period;						// Promote int16_t to float
    4c8c:	0e 94 3f 46 	call	0x8c7e	; 0x8c7e <__floatunsisf>
	interval = tempf/2500000.0f;		// This gives the period in seconds
    4c90:	20 e8       	ldi	r18, 0x80	; 128
    4c92:	36 e9       	ldi	r19, 0x96	; 150
    4c94:	48 e1       	ldi	r20, 0x18	; 24
    4c96:	5a e4       	ldi	r21, 0x4A	; 74
    4c98:	0e 94 a6 45 	call	0x8b4c	; 0x8b4c <__divsf3>
    4c9c:	60 93 5b 05 	sts	0x055B, r22
    4ca0:	70 93 5c 05 	sts	0x055C, r23
    4ca4:	80 93 5d 05 	sts	0x055D, r24
    4ca8:	90 93 5e 05 	sts	0x055E, r25

	tempf = pgm_read_byte(&LPF_lookup[Config.Acc_LPF]); // Lookup actual LPF value and promote
    4cac:	60 91 3f 06 	lds	r22, 0x063F
    4cb0:	e6 2f       	mov	r30, r22
    4cb2:	ff 27       	eor	r31, r31
    4cb4:	e7 fd       	sbrc	r30, 7
    4cb6:	f0 95       	com	r31
    4cb8:	e9 55       	subi	r30, 0x59	; 89
    4cba:	f8 4e       	sbci	r31, 0xE8	; 232
    4cbc:	64 91       	lpm	r22, Z
    4cbe:	70 e0       	ldi	r23, 0x00	; 0
    4cc0:	80 e0       	ldi	r24, 0x00	; 0
    4cc2:	90 e0       	ldi	r25, 0x00	; 0
    4cc4:	0e 94 3f 46 	call	0x8c7e	; 0x8c7e <__floatunsisf>
    4cc8:	6b 01       	movw	r12, r22
    4cca:	7c 01       	movw	r14, r24
    4ccc:	0c e3       	ldi	r16, 0x3C	; 60
    4cce:	15 e0       	ldi	r17, 0x05	; 5
    4cd0:	89 e9       	ldi	r24, 0x99	; 153
    4cd2:	68 2e       	mov	r6, r24
    4cd4:	85 e0       	ldi	r24, 0x05	; 5
    4cd6:	78 2e       	mov	r7, r24
	
	// Smooth Acc signals - note that accSmooth is in [ROLL, PITCH, YAW] order
	for (axis = 0; axis < NUMBEROFAXIS; axis++)
	{
		accADCf = accADC[axis]; // Promote
    4cd8:	d8 01       	movw	r26, r16
    4cda:	6d 91       	ld	r22, X+
    4cdc:	7d 91       	ld	r23, X+
    4cde:	8d 01       	movw	r16, r26
    4ce0:	88 27       	eor	r24, r24
    4ce2:	77 fd       	sbrc	r23, 7
    4ce4:	80 95       	com	r24
    4ce6:	98 2f       	mov	r25, r24
    4ce8:	0e 94 41 46 	call	0x8c82	; 0x8c82 <__floatsisf>
    4cec:	4b 01       	movw	r8, r22
    4cee:	5c 01       	movw	r10, r24
		
		// Acc LPF
		if (tempf > 1)
    4cf0:	20 e0       	ldi	r18, 0x00	; 0
    4cf2:	30 e0       	ldi	r19, 0x00	; 0
    4cf4:	40 e8       	ldi	r20, 0x80	; 128
    4cf6:	5f e3       	ldi	r21, 0x3F	; 63
    4cf8:	c7 01       	movw	r24, r14
    4cfa:	b6 01       	movw	r22, r12
    4cfc:	0e 94 f1 46 	call	0x8de2	; 0x8de2 <__gesf2>
    4d00:	18 16       	cp	r1, r24
    4d02:	f4 f4       	brge	.+60     	; 0x4d40 <simple_imu_update+0xe4>
		{
			// Acc LPF
			accSmooth[axis] = (accSmooth[axis] * (tempf - 1.0f) - accADCf) / tempf;
    4d04:	20 e0       	ldi	r18, 0x00	; 0
    4d06:	30 e0       	ldi	r19, 0x00	; 0
    4d08:	40 e8       	ldi	r20, 0x80	; 128
    4d0a:	5f e3       	ldi	r21, 0x3F	; 63
    4d0c:	c7 01       	movw	r24, r14
    4d0e:	b6 01       	movw	r22, r12
    4d10:	0e 94 3d 45 	call	0x8a7a	; 0x8a7a <__subsf3>
    4d14:	f3 01       	movw	r30, r6
    4d16:	20 81       	ld	r18, Z
    4d18:	31 81       	ldd	r19, Z+1	; 0x01
    4d1a:	42 81       	ldd	r20, Z+2	; 0x02
    4d1c:	53 81       	ldd	r21, Z+3	; 0x03
    4d1e:	0e 94 f5 46 	call	0x8dea	; 0x8dea <__mulsf3>
    4d22:	a5 01       	movw	r20, r10
    4d24:	94 01       	movw	r18, r8
    4d26:	0e 94 3d 45 	call	0x8a7a	; 0x8a7a <__subsf3>
    4d2a:	a7 01       	movw	r20, r14
    4d2c:	96 01       	movw	r18, r12
    4d2e:	0e 94 a6 45 	call	0x8b4c	; 0x8b4c <__divsf3>
    4d32:	d3 01       	movw	r26, r6
    4d34:	6d 93       	st	X+, r22
    4d36:	7d 93       	st	X+, r23
    4d38:	8d 93       	st	X+, r24
    4d3a:	9c 93       	st	X, r25
    4d3c:	13 97       	sbiw	r26, 0x03	; 3
    4d3e:	09 c0       	rjmp	.+18     	; 0x4d52 <simple_imu_update+0xf6>
		}
		else
		{
			// Use raw accADC[axis] as source for acc values
			accSmooth[axis] =  -accADCf;
    4d40:	b7 fa       	bst	r11, 7
    4d42:	b0 94       	com	r11
    4d44:	b7 f8       	bld	r11, 7
    4d46:	b0 94       	com	r11
    4d48:	f3 01       	movw	r30, r6
    4d4a:	80 82       	st	Z, r8
    4d4c:	91 82       	std	Z+1, r9	; 0x01
    4d4e:	a2 82       	std	Z+2, r10	; 0x02
    4d50:	b3 82       	std	Z+3, r11	; 0x03
    4d52:	f4 e0       	ldi	r31, 0x04	; 4
    4d54:	6f 0e       	add	r6, r31
    4d56:	71 1c       	adc	r7, r1
	interval = tempf/2500000.0f;		// This gives the period in seconds

	tempf = pgm_read_byte(&LPF_lookup[Config.Acc_LPF]); // Lookup actual LPF value and promote
	
	// Smooth Acc signals - note that accSmooth is in [ROLL, PITCH, YAW] order
	for (axis = 0; axis < NUMBEROFAXIS; axis++)
    4d58:	85 e0       	ldi	r24, 0x05	; 5
    4d5a:	02 34       	cpi	r16, 0x42	; 66
    4d5c:	18 07       	cpc	r17, r24
    4d5e:	09 f0       	breq	.+2      	; 0x4d62 <simple_imu_update+0x106>
    4d60:	bb cf       	rjmp	.-138    	; 0x4cd8 <simple_imu_update+0x7c>
			accSmooth[axis] =  -accADCf;
		}
	}
	
	// Add correction data to gyro inputs based on difference between Euler angles and acc angles
	AccAngleRoll = accSmooth[ROLL] * SMALLANGLEFACTOR;		// KK2 - AccYfilter
    4d62:	23 ec       	ldi	r18, 0xC3	; 195
    4d64:	35 ef       	ldi	r19, 0xF5	; 245
    4d66:	48 e2       	ldi	r20, 0x28	; 40
    4d68:	5f e3       	ldi	r21, 0x3F	; 63
    4d6a:	60 91 99 05 	lds	r22, 0x0599
    4d6e:	70 91 9a 05 	lds	r23, 0x059A
    4d72:	80 91 9b 05 	lds	r24, 0x059B
    4d76:	90 91 9c 05 	lds	r25, 0x059C
    4d7a:	0e 94 f5 46 	call	0x8dea	; 0x8dea <__mulsf3>
    4d7e:	69 83       	std	Y+1, r22	; 0x01
    4d80:	7a 83       	std	Y+2, r23	; 0x02
    4d82:	8b 83       	std	Y+3, r24	; 0x03
    4d84:	9c 83       	std	Y+4, r25	; 0x04
    4d86:	60 93 7d 05 	sts	0x057D, r22
    4d8a:	70 93 7e 05 	sts	0x057E, r23
    4d8e:	80 93 7f 05 	sts	0x057F, r24
    4d92:	90 93 80 05 	sts	0x0580, r25
	AccAnglePitch = accSmooth[PITCH] * SMALLANGLEFACTOR;
    4d96:	23 ec       	ldi	r18, 0xC3	; 195
    4d98:	35 ef       	ldi	r19, 0xF5	; 245
    4d9a:	48 e2       	ldi	r20, 0x28	; 40
    4d9c:	5f e3       	ldi	r21, 0x3F	; 63
    4d9e:	60 91 9d 05 	lds	r22, 0x059D
    4da2:	70 91 9e 05 	lds	r23, 0x059E
    4da6:	80 91 9f 05 	lds	r24, 0x059F
    4daa:	90 91 a0 05 	lds	r25, 0x05A0
    4dae:	0e 94 f5 46 	call	0x8dea	; 0x8dea <__mulsf3>
    4db2:	6d 83       	std	Y+5, r22	; 0x05
    4db4:	7e 83       	std	Y+6, r23	; 0x06
    4db6:	8f 83       	std	Y+7, r24	; 0x07
    4db8:	98 87       	std	Y+8, r25	; 0x08
    4dba:	60 93 81 05 	sts	0x0581, r22
    4dbe:	70 93 82 05 	sts	0x0582, r23
    4dc2:	80 93 83 05 	sts	0x0583, r24
    4dc6:	90 93 84 05 	sts	0x0584, r25

	// Copy/promote gyro values for rotate
	GyroRollVC = gyroADC[ROLL];								// KK2 - GyroRoll
    4dca:	60 91 6f 05 	lds	r22, 0x056F
    4dce:	70 91 70 05 	lds	r23, 0x0570
    4dd2:	88 27       	eor	r24, r24
    4dd4:	77 fd       	sbrc	r23, 7
    4dd6:	80 95       	com	r24
    4dd8:	98 2f       	mov	r25, r24
    4dda:	0e 94 41 46 	call	0x8c82	; 0x8c82 <__floatsisf>
    4dde:	2b 01       	movw	r4, r22
    4de0:	3c 01       	movw	r6, r24
    4de2:	60 93 8d 05 	sts	0x058D, r22
    4de6:	70 93 8e 05 	sts	0x058E, r23
    4dea:	80 93 8f 05 	sts	0x058F, r24
    4dee:	90 93 90 05 	sts	0x0590, r25
	GyroPitchVC = gyroADC[PITCH];
    4df2:	60 91 71 05 	lds	r22, 0x0571
    4df6:	70 91 72 05 	lds	r23, 0x0572
    4dfa:	88 27       	eor	r24, r24
    4dfc:	77 fd       	sbrc	r23, 7
    4dfe:	80 95       	com	r24
    4e00:	98 2f       	mov	r25, r24
    4e02:	0e 94 41 46 	call	0x8c82	; 0x8c82 <__floatsisf>
    4e06:	6b 01       	movw	r12, r22
    4e08:	7c 01       	movw	r14, r24
    4e0a:	60 93 85 05 	sts	0x0585, r22
    4e0e:	70 93 86 05 	sts	0x0586, r23
    4e12:	80 93 87 05 	sts	0x0587, r24
    4e16:	90 93 88 05 	sts	0x0588, r25

	// Calculate acceleration magnitude.
	roll_sq = (accADC[ROLL] * accADC[ROLL]);
    4e1a:	20 91 3c 05 	lds	r18, 0x053C
    4e1e:	30 91 3d 05 	lds	r19, 0x053D
	pitch_sq = (accADC[PITCH] * accADC[PITCH]);
    4e22:	40 91 3e 05 	lds	r20, 0x053E
    4e26:	50 91 3f 05 	lds	r21, 0x053F
	yaw_sq = (accADC[YAW] * accADC[YAW]);
    4e2a:	e0 91 40 05 	lds	r30, 0x0540
    4e2e:	f0 91 41 05 	lds	r31, 0x0541
	GyroRollVC = gyroADC[ROLL];								// KK2 - GyroRoll
	GyroPitchVC = gyroADC[PITCH];

	// Calculate acceleration magnitude.
	roll_sq = (accADC[ROLL] * accADC[ROLL]);
	pitch_sq = (accADC[PITCH] * accADC[PITCH]);
    4e32:	44 9f       	mul	r20, r20
    4e34:	40 01       	movw	r8, r0
    4e36:	45 9f       	mul	r20, r21
    4e38:	90 0c       	add	r9, r0
    4e3a:	90 0c       	add	r9, r0
    4e3c:	11 24       	eor	r1, r1
    4e3e:	b4 01       	movw	r22, r8
    4e40:	88 27       	eor	r24, r24
    4e42:	77 fd       	sbrc	r23, 7
    4e44:	80 95       	com	r24
    4e46:	98 2f       	mov	r25, r24
	// Copy/promote gyro values for rotate
	GyroRollVC = gyroADC[ROLL];								// KK2 - GyroRoll
	GyroPitchVC = gyroADC[PITCH];

	// Calculate acceleration magnitude.
	roll_sq = (accADC[ROLL] * accADC[ROLL]);
    4e48:	22 9f       	mul	r18, r18
    4e4a:	a0 01       	movw	r20, r0
    4e4c:	23 9f       	mul	r18, r19
    4e4e:	50 0d       	add	r21, r0
    4e50:	50 0d       	add	r21, r0
    4e52:	11 24       	eor	r1, r1
    4e54:	8a 01       	movw	r16, r20
    4e56:	22 27       	eor	r18, r18
    4e58:	17 fd       	sbrc	r17, 7
    4e5a:	20 95       	com	r18
    4e5c:	32 2f       	mov	r19, r18
	pitch_sq = (accADC[PITCH] * accADC[PITCH]);
	yaw_sq = (accADC[YAW] * accADC[YAW]);
	AccMag = roll_sq + pitch_sq + yaw_sq;
    4e5e:	60 0f       	add	r22, r16
    4e60:	71 1f       	adc	r23, r17
    4e62:	82 1f       	adc	r24, r18
    4e64:	93 1f       	adc	r25, r19
	GyroPitchVC = gyroADC[PITCH];

	// Calculate acceleration magnitude.
	roll_sq = (accADC[ROLL] * accADC[ROLL]);
	pitch_sq = (accADC[PITCH] * accADC[PITCH]);
	yaw_sq = (accADC[YAW] * accADC[YAW]);
    4e66:	ee 9f       	mul	r30, r30
    4e68:	90 01       	movw	r18, r0
    4e6a:	ef 9f       	mul	r30, r31
    4e6c:	30 0d       	add	r19, r0
    4e6e:	30 0d       	add	r19, r0
    4e70:	11 24       	eor	r1, r1
    4e72:	89 01       	movw	r16, r18
    4e74:	22 27       	eor	r18, r18
    4e76:	17 fd       	sbrc	r17, 7
    4e78:	20 95       	com	r18
    4e7a:	32 2f       	mov	r19, r18
	AccMag = roll_sq + pitch_sq + yaw_sq;
    4e7c:	60 0f       	add	r22, r16
    4e7e:	71 1f       	adc	r23, r17
    4e80:	82 1f       	adc	r24, r18
    4e82:	93 1f       	adc	r25, r19
	
	// Add acc correction if inside local acceleration bounds and not inverted according to VectorZ
	// This is actually a kind of Complementary Filter
	if	((AccMag > acc_0_85G_SQ) && (AccMag < acc_1_15G_SQ) && (VectorZ > 0.5))
    4e84:	0e 94 3f 46 	call	0x8c7e	; 0x8c7e <__floatunsisf>
    4e88:	4b 01       	movw	r8, r22
    4e8a:	5c 01       	movw	r10, r24
    4e8c:	20 e0       	ldi	r18, 0x00	; 0
    4e8e:	34 ef       	ldi	r19, 0xF4	; 244
    4e90:	48 e3       	ldi	r20, 0x38	; 56
    4e92:	56 e4       	ldi	r21, 0x46	; 70
    4e94:	0e 94 f1 46 	call	0x8de2	; 0x8de2 <__gesf2>
    4e98:	18 16       	cp	r1, r24
    4e9a:	0c f0       	brlt	.+2      	; 0x4e9e <simple_imu_update+0x242>
    4e9c:	6b c0       	rjmp	.+214    	; 0x4f74 <simple_imu_update+0x318>
    4e9e:	20 e0       	ldi	r18, 0x00	; 0
    4ea0:	38 e4       	ldi	r19, 0x48	; 72
    4ea2:	49 ea       	ldi	r20, 0xA9	; 169
    4ea4:	56 e4       	ldi	r21, 0x46	; 70
    4ea6:	c5 01       	movw	r24, r10
    4ea8:	b4 01       	movw	r22, r8
    4eaa:	0e 94 a2 45 	call	0x8b44	; 0x8b44 <__cmpsf2>
    4eae:	87 ff       	sbrs	r24, 7
    4eb0:	61 c0       	rjmp	.+194    	; 0x4f74 <simple_imu_update+0x318>
    4eb2:	20 e0       	ldi	r18, 0x00	; 0
    4eb4:	30 e0       	ldi	r19, 0x00	; 0
    4eb6:	40 e0       	ldi	r20, 0x00	; 0
    4eb8:	5f e3       	ldi	r21, 0x3F	; 63
    4eba:	60 91 01 05 	lds	r22, 0x0501
    4ebe:	70 91 02 05 	lds	r23, 0x0502
    4ec2:	80 91 03 05 	lds	r24, 0x0503
    4ec6:	90 91 04 05 	lds	r25, 0x0504
    4eca:	0e 94 f1 46 	call	0x8de2	; 0x8de2 <__gesf2>
    4ece:	18 16       	cp	r1, r24
    4ed0:	0c f0       	brlt	.+2      	; 0x4ed4 <simple_imu_update+0x278>
    4ed2:	50 c0       	rjmp	.+160    	; 0x4f74 <simple_imu_update+0x318>
	{
		tempf = (EulerAngleRoll - AccAngleRoll) / (11 - Config.CF_factor); // Default Config.CF_factor is 7
    4ed4:	80 91 41 06 	lds	r24, 0x0641
    4ed8:	6b e0       	ldi	r22, 0x0B	; 11
    4eda:	70 e0       	ldi	r23, 0x00	; 0
    4edc:	68 1b       	sub	r22, r24
    4ede:	71 09       	sbc	r23, r1
    4ee0:	87 fd       	sbrc	r24, 7
    4ee2:	73 95       	inc	r23
    4ee4:	88 27       	eor	r24, r24
    4ee6:	77 fd       	sbrc	r23, 7
    4ee8:	80 95       	com	r24
    4eea:	98 2f       	mov	r25, r24
    4eec:	0e 94 41 46 	call	0x8c82	; 0x8c82 <__floatsisf>
    4ef0:	4b 01       	movw	r8, r22
    4ef2:	5c 01       	movw	r10, r24
    4ef4:	29 81       	ldd	r18, Y+1	; 0x01
    4ef6:	3a 81       	ldd	r19, Y+2	; 0x02
    4ef8:	4b 81       	ldd	r20, Y+3	; 0x03
    4efa:	5c 81       	ldd	r21, Y+4	; 0x04
    4efc:	60 91 a5 05 	lds	r22, 0x05A5
    4f00:	70 91 a6 05 	lds	r23, 0x05A6
    4f04:	80 91 a7 05 	lds	r24, 0x05A7
    4f08:	90 91 a8 05 	lds	r25, 0x05A8
    4f0c:	0e 94 3d 45 	call	0x8a7a	; 0x8a7a <__subsf3>
    4f10:	a5 01       	movw	r20, r10
    4f12:	94 01       	movw	r18, r8
    4f14:	0e 94 a6 45 	call	0x8b4c	; 0x8b4c <__divsf3>
    4f18:	9b 01       	movw	r18, r22
    4f1a:	ac 01       	movw	r20, r24
		GyroRollVC = GyroRollVC + tempf;
    4f1c:	c3 01       	movw	r24, r6
    4f1e:	b2 01       	movw	r22, r4
    4f20:	0e 94 3e 45 	call	0x8a7c	; 0x8a7c <__addsf3>
    4f24:	60 93 8d 05 	sts	0x058D, r22
    4f28:	70 93 8e 05 	sts	0x058E, r23
    4f2c:	80 93 8f 05 	sts	0x058F, r24
    4f30:	90 93 90 05 	sts	0x0590, r25
		
		tempf = (EulerAnglePitch - AccAnglePitch) /(11 - Config.CF_factor);
    4f34:	2d 81       	ldd	r18, Y+5	; 0x05
    4f36:	3e 81       	ldd	r19, Y+6	; 0x06
    4f38:	4f 81       	ldd	r20, Y+7	; 0x07
    4f3a:	58 85       	ldd	r21, Y+8	; 0x08
    4f3c:	60 91 79 05 	lds	r22, 0x0579
    4f40:	70 91 7a 05 	lds	r23, 0x057A
    4f44:	80 91 7b 05 	lds	r24, 0x057B
    4f48:	90 91 7c 05 	lds	r25, 0x057C
    4f4c:	0e 94 3d 45 	call	0x8a7a	; 0x8a7a <__subsf3>
    4f50:	a5 01       	movw	r20, r10
    4f52:	94 01       	movw	r18, r8
    4f54:	0e 94 a6 45 	call	0x8b4c	; 0x8b4c <__divsf3>
    4f58:	9b 01       	movw	r18, r22
    4f5a:	ac 01       	movw	r20, r24
		GyroPitchVC = GyroPitchVC + tempf;
    4f5c:	c7 01       	movw	r24, r14
    4f5e:	b6 01       	movw	r22, r12
    4f60:	0e 94 3e 45 	call	0x8a7c	; 0x8a7c <__addsf3>
    4f64:	60 93 85 05 	sts	0x0585, r22
    4f68:	70 93 86 05 	sts	0x0586, r23
    4f6c:	80 93 87 05 	sts	0x0587, r24
    4f70:	90 93 88 05 	sts	0x0588, r25
	}

	// Rotate up-direction 3D vector with gyro inputs
	Rotate3dVector();
    4f74:	0e 94 a4 24 	call	0x4948	; 0x4948 <Rotate3dVector>
	ExtractEulerAngles();
    4f78:	0e 94 09 26 	call	0x4c12	; 0x4c12 <ExtractEulerAngles>
	
	// Upscale to 0.01 degrees resolution and copy to angle[] for display
	angle[ROLL] = (int16_t)(EulerAngleRoll * -100);
    4f7c:	20 e0       	ldi	r18, 0x00	; 0
    4f7e:	30 e0       	ldi	r19, 0x00	; 0
    4f80:	48 ec       	ldi	r20, 0xC8	; 200
    4f82:	52 ec       	ldi	r21, 0xC2	; 194
    4f84:	60 91 a5 05 	lds	r22, 0x05A5
    4f88:	70 91 a6 05 	lds	r23, 0x05A6
    4f8c:	80 91 a7 05 	lds	r24, 0x05A7
    4f90:	90 91 a8 05 	lds	r25, 0x05A8
    4f94:	0e 94 f5 46 	call	0x8dea	; 0x8dea <__mulsf3>
    4f98:	0e 94 0e 46 	call	0x8c1c	; 0x8c1c <__fixsfsi>
    4f9c:	70 93 92 05 	sts	0x0592, r23
    4fa0:	60 93 91 05 	sts	0x0591, r22
	angle[PITCH] = (int16_t)(EulerAnglePitch * -100);
    4fa4:	20 e0       	ldi	r18, 0x00	; 0
    4fa6:	30 e0       	ldi	r19, 0x00	; 0
    4fa8:	48 ec       	ldi	r20, 0xC8	; 200
    4faa:	52 ec       	ldi	r21, 0xC2	; 194
    4fac:	60 91 79 05 	lds	r22, 0x0579
    4fb0:	70 91 7a 05 	lds	r23, 0x057A
    4fb4:	80 91 7b 05 	lds	r24, 0x057B
    4fb8:	90 91 7c 05 	lds	r25, 0x057C
    4fbc:	0e 94 f5 46 	call	0x8dea	; 0x8dea <__mulsf3>
    4fc0:	0e 94 0e 46 	call	0x8c1c	; 0x8c1c <__fixsfsi>
    4fc4:	70 93 94 05 	sts	0x0594, r23
    4fc8:	60 93 93 05 	sts	0x0593, r22
}
    4fcc:	28 96       	adiw	r28, 0x08	; 8
    4fce:	0f b6       	in	r0, 0x3f	; 63
    4fd0:	f8 94       	cli
    4fd2:	de bf       	out	0x3e, r29	; 62
    4fd4:	0f be       	out	0x3f, r0	; 63
    4fd6:	cd bf       	out	0x3d, r28	; 61
    4fd8:	df 91       	pop	r29
    4fda:	cf 91       	pop	r28
    4fdc:	1f 91       	pop	r17
    4fde:	0f 91       	pop	r16
    4fe0:	ff 90       	pop	r15
    4fe2:	ef 90       	pop	r14
    4fe4:	df 90       	pop	r13
    4fe6:	cf 90       	pop	r12
    4fe8:	bf 90       	pop	r11
    4fea:	af 90       	pop	r10
    4fec:	9f 90       	pop	r9
    4fee:	8f 90       	pop	r8
    4ff0:	7f 90       	pop	r7
    4ff2:	6f 90       	pop	r6
    4ff4:	5f 90       	pop	r5
    4ff6:	4f 90       	pop	r4
    4ff8:	08 95       	ret

00004ffa <reset_IMU>:
}

void reset_IMU(void)
{
	// Initialise the vector to point straight up
	VectorX = 0;
    4ffa:	10 92 2a 05 	sts	0x052A, r1
    4ffe:	10 92 2b 05 	sts	0x052B, r1
    5002:	10 92 2c 05 	sts	0x052C, r1
    5006:	10 92 2d 05 	sts	0x052D, r1
	VectorY = 0;
    500a:	10 92 26 05 	sts	0x0526, r1
    500e:	10 92 27 05 	sts	0x0527, r1
    5012:	10 92 28 05 	sts	0x0528, r1
    5016:	10 92 29 05 	sts	0x0529, r1
	VectorZ = 1;
    501a:	80 e0       	ldi	r24, 0x00	; 0
    501c:	90 e0       	ldi	r25, 0x00	; 0
    501e:	a0 e8       	ldi	r26, 0x80	; 128
    5020:	bf e3       	ldi	r27, 0x3F	; 63
    5022:	80 93 01 05 	sts	0x0501, r24
    5026:	90 93 02 05 	sts	0x0502, r25
    502a:	a0 93 03 05 	sts	0x0503, r26
    502e:	b0 93 04 05 	sts	0x0504, r27
	
	// Initialise internal vectors and attitude	
	VectorA = 0;
    5032:	10 92 a9 05 	sts	0x05A9, r1
    5036:	10 92 aa 05 	sts	0x05AA, r1
    503a:	10 92 ab 05 	sts	0x05AB, r1
    503e:	10 92 ac 05 	sts	0x05AC, r1
	VectorB = 0;
    5042:	10 92 ad 05 	sts	0x05AD, r1
    5046:	10 92 ae 05 	sts	0x05AE, r1
    504a:	10 92 af 05 	sts	0x05AF, r1
    504e:	10 92 b0 05 	sts	0x05B0, r1
	EulerAngleRoll = 0;
    5052:	10 92 a5 05 	sts	0x05A5, r1
    5056:	10 92 a6 05 	sts	0x05A6, r1
    505a:	10 92 a7 05 	sts	0x05A7, r1
    505e:	10 92 a8 05 	sts	0x05A8, r1
	EulerAnglePitch = 0;
    5062:	10 92 79 05 	sts	0x0579, r1
    5066:	10 92 7a 05 	sts	0x057A, r1
    506a:	10 92 7b 05 	sts	0x057B, r1
    506e:	10 92 7c 05 	sts	0x057C, r1

	// Reset loop count to zero
	TMR0_counter = 0;	// TMR0 overflow counter
    5072:	10 92 ce 07 	sts	0x07CE, r1
    5076:	10 92 cd 07 	sts	0x07CD, r1
	TCNT1 = 0;			// TCNT1 current time
    507a:	10 92 85 00 	sts	0x0085, r1
    507e:	10 92 84 00 	sts	0x0084, r1
	LoopStartTCNT1 = 0;	// TCNT1 last loop time
    5082:	10 92 1b 05 	sts	0x051B, r1
    5086:	10 92 1a 05 	sts	0x051A, r1
    508a:	08 95       	ret

0000508c <init>:
//************************************************************

CONFIG_STRUCT Config;			// eeProm data configuration

void init(void)
{
    508c:	cf 93       	push	r28
	
	//***********************************************************
	// I/O setup
	//***********************************************************
	// Set port directions
	DDRA		= 0x30;		// Port A
    508e:	80 e3       	ldi	r24, 0x30	; 48
    5090:	81 b9       	out	0x01, r24	; 1
	DDRC		= 0xFC;		// Port C
    5092:	8c ef       	ldi	r24, 0xFC	; 252
    5094:	87 b9       	out	0x07, r24	; 7
	DDRB		= 0x0A;		// Port B
    5096:	8a e0       	ldi	r24, 0x0A	; 10
    5098:	84 b9       	out	0x04, r24	; 4
	DDRD		= 0xF2;		// Port D
    509a:	82 ef       	ldi	r24, 0xF2	; 242
    509c:	8a b9       	out	0x0a, r24	; 10

	// Hold all PWM outputs low to stop glitches
	// M5 and M6 are on PortA for KK2.1
	MOTORS		= 0;
    509e:	18 b8       	out	0x08, r1	; 8
	M5			= 0;
    50a0:	14 98       	cbi	0x02, 4	; 2
	M6			= 0;
    50a2:	15 98       	cbi	0x02, 5	; 2

	// Preset I/O pins
	LED1 		= 0;		// LED1 off
    50a4:	2b 98       	cbi	0x05, 3	; 5
	LVA 		= 0; 		// LVA alarm OFF
    50a6:	29 98       	cbi	0x05, 1	; 5
	LCD_SCL		= 1;		// GLCD clock high
    50a8:	5c 9a       	sbi	0x0b, 4	; 11

	// Set/clear pull-ups (1 = set, 0 = clear)
	PINB		= 0xF5;		// Set PB pull-ups
    50aa:	85 ef       	ldi	r24, 0xF5	; 245
    50ac:	83 b9       	out	0x03, r24	; 3
	PIND		= 0x0C;		// Set PD pull-ups (Don't pull up RX yet)
    50ae:	8c e0       	ldi	r24, 0x0C	; 12
    50b0:	89 b9       	out	0x09, r24	; 9
    50b2:	2f e5       	ldi	r18, 0x5F	; 95
    50b4:	88 ed       	ldi	r24, 0xD8	; 216
    50b6:	93 e0       	ldi	r25, 0x03	; 3
    50b8:	21 50       	subi	r18, 0x01	; 1
    50ba:	80 40       	sbci	r24, 0x00	; 0
    50bc:	90 40       	sbci	r25, 0x00	; 0
    50be:	e1 f7       	brne	.-8      	; 0x50b8 <init+0x2c>
    50c0:	00 c0       	rjmp	.+0      	; 0x50c2 <init+0x36>
    50c2:	00 00       	nop
	_delay_ms(63);				// Pause while satellite wakes up	
								// and pull-ups have time to rise.
								// Tweak until bind pulses about 68ms after power-up

	// Bind as master if ONLY button 4 pressed
	if ((PINB & 0xf0) == 0xE0)
    50c4:	83 b1       	in	r24, 0x03	; 3
    50c6:	80 7f       	andi	r24, 0xF0	; 240
    50c8:	80 3e       	cpi	r24, 0xE0	; 224
    50ca:	21 f4       	brne	.+8      	; 0x50d4 <init+0x48>
	{
		DDRD		= 0xF3;		// Switch PD0 to output
    50cc:	83 ef       	ldi	r24, 0xF3	; 243
    50ce:	8a b9       	out	0x0a, r24	; 10
		bind_master();
    50d0:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <bind_master>
	}

	DDRD		= 0xF2;			// Reset Port D directions
    50d4:	82 ef       	ldi	r24, 0xF2	; 242
    50d6:	8a b9       	out	0x0a, r24	; 10

	// Set/clear pull-ups (1 = set, 0 = clear)
	PIND		= 0x0D;			// Set PD pull-ups (now pull up RX as well)
    50d8:	8d e0       	ldi	r24, 0x0D	; 13
    50da:	89 b9       	out	0x09, r24	; 9
	// Timers
	//***********************************************************

	// Timer0 (8bit) - run @ 20MHz / 1024 = 19.531kHz or 51.2us - max 13.1ms
	// Slow timer to extend Timer 1
	TCCR0A = 0;								// Normal operation
    50dc:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0x05;							// Clk / 1024 = 19.531kHz or 51.2us - max 13.1ms
    50de:	85 e0       	ldi	r24, 0x05	; 5
    50e0:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= (1 << TOIE0);					// Enable interrupts
    50e2:	80 91 6e 00 	lds	r24, 0x006E
    50e6:	81 60       	ori	r24, 0x01	; 1
    50e8:	80 93 6e 00 	sts	0x006E, r24
	TCNT0 = 0;								// Reset counter
    50ec:	16 bc       	out	0x26, r1	; 38
	
	// Timer1 (16bit) - run @ 2.5MHz (400ns) - max 26.2ms
	// Used to measure Rx Signals & control ESC/servo output rate
	TCCR1A = 0;
    50ee:	10 92 80 00 	sts	0x0080, r1
	TCCR1B |= (1 << CS11);					// Clk/8 = 2.5MHz
    50f2:	80 91 81 00 	lds	r24, 0x0081
    50f6:	82 60       	ori	r24, 0x02	; 2
    50f8:	80 93 81 00 	sts	0x0081, r24

	// Timer2 8bit - run @ 20MHz / 1024 = 19.531kHz or 51.2us - max 13.1ms
	// Used to time arm/disarm intervals
	TCCR2A = 0;	
    50fc:	10 92 b0 00 	sts	0x00B0, r1
	TCCR2B = 0x07;							// Clk/1024 = 19.531kHz
    5100:	87 e0       	ldi	r24, 0x07	; 7
    5102:	80 93 b1 00 	sts	0x00B1, r24
	TIMSK2 = 0;
    5106:	10 92 70 00 	sts	0x0070, r1
	TIFR2 = 0;
    510a:	17 ba       	out	0x17, r1	; 23
	TCNT2 = 0;								// Reset counter
    510c:	10 92 b2 00 	sts	0x00B2, r1
	//***********************************************************
	// Interrupts and pin function setup
	//***********************************************************

	// Pin change interrupt enables PCINT1, PCINT2 and PCINT3 (Throttle, AUX and CPPM input)
	PCICR  = 0x0A;							// PCINT8  to PCINT15 (PCINT1 group - AUX)
    5110:	9a e0       	ldi	r25, 0x0A	; 10
    5112:	90 93 68 00 	sts	0x0068, r25
											// PCINT24 to PCINT31 (PCINT3 group - THR)
	PCIFR  = 0x0F;							// Clear PCIF0 interrupt flag 
    5116:	9f e0       	ldi	r25, 0x0F	; 15
    5118:	9b bb       	out	0x1b, r25	; 27
											// Clear PCIF1 interrupt flag 
											// Clear PCIF2 interrupt flag 
											// Clear PCIF3 interrupt flag 

	// External interrupts INT0 (Elevator) and INT1 (Aileron) and INT2 (Rudder)
	EICRA = 0x15;							// Any change INT0
    511a:	95 e1       	ldi	r25, 0x15	; 21
    511c:	90 93 69 00 	sts	0x0069, r25
											// Any change INT1
											// Any change INT2
	EIFR  = 0x07; 							// Clear INT0 interrupt flag (Elevator)
    5120:	8c bb       	out	0x1c, r24	; 28
	//***********************************************************
	// Start up
	//***********************************************************

	// Preset important flags
	Interrupted = false;						
    5122:	10 92 ca 07 	sts	0x07CA, r1

	// Load EEPROM settings
	updated = Initial_EEPROM_Config_Load(); // Config now contains valid values
    5126:	0e 94 60 19 	call	0x32c0	; 0x32c0 <Initial_EEPROM_Config_Load>
    512a:	c8 2f       	mov	r28, r24
    512c:	20 e0       	ldi	r18, 0x00	; 0
    512e:	30 e0       	ldi	r19, 0x00	; 0
	//***********************************************************

	for (i = 0; i < MAX_RC_CHANNELS; i++)
	{
		
		RxChannel[i] = 3750;
    5130:	46 ea       	ldi	r20, 0xA6	; 166
    5132:	5e e0       	ldi	r21, 0x0E	; 14
    5134:	f9 01       	movw	r30, r18
    5136:	ee 0f       	add	r30, r30
    5138:	ff 1f       	adc	r31, r31
    513a:	e6 54       	subi	r30, 0x46	; 70
    513c:	f8 4f       	sbci	r31, 0xF8	; 248
    513e:	51 83       	std	Z+1, r21	; 0x01
    5140:	40 83       	st	Z, r20
    5142:	2f 5f       	subi	r18, 0xFF	; 255
    5144:	3f 4f       	sbci	r19, 0xFF	; 255
	// RX channel defaults for when no RC connected
	// Not doing this can result in the FC trying (unsuccessfully) to arm
	// and makes entry into the menus very hard
	//***********************************************************

	for (i = 0; i < MAX_RC_CHANNELS; i++)
    5146:	28 30       	cpi	r18, 0x08	; 8
    5148:	31 05       	cpc	r19, r1
    514a:	a1 f7       	brne	.-24     	; 0x5134 <init+0xa8>
	{
		
		RxChannel[i] = 3750;
	}
	
	RxChannel[THROTTLE] = 2500; // Min throttle
    514c:	24 ec       	ldi	r18, 0xC4	; 196
    514e:	39 e0       	ldi	r19, 0x09	; 9
    5150:	30 93 bb 07 	sts	0x07BB, r19
    5154:	20 93 ba 07 	sts	0x07BA, r18
	//***********************************************************
	// GLCD initialisation
	//***********************************************************

	// Initialise the GLCD
	st7565_init();
    5158:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <st7565_init>

	// Make sure the LCD is blank without clearing buffer
	clear_screen();
    515c:	0e 94 27 1f 	call	0x3e4e	; 0x3e4e <clear_screen>
	//***********************************************************
	// ESC calibration
	//***********************************************************
	
	// Calibrate ESCs if ONLY buttons 1 and 4 pressed
	if ((PINB & 0xf0) == 0x60)
    5160:	93 b1       	in	r25, 0x03	; 3
    5162:	90 7f       	andi	r25, 0xF0	; 240
    5164:	90 36       	cpi	r25, 0x60	; 96
    5166:	09 f0       	breq	.+2      	; 0x516a <init+0xde>
    5168:	71 c0       	rjmp	.+226    	; 0x524c <init+0x1c0>
	{
		// Display calibrating message
		st7565_command(CMD_SET_COM_NORMAL); 	// For text (not for logo)
    516a:	80 ec       	ldi	r24, 0xC0	; 192
    516c:	0e 94 be 1e 	call	0x3d7c	; 0x3d7c <st7565_command>
		clear_buffer(buffer);
    5170:	81 e0       	ldi	r24, 0x01	; 1
    5172:	91 e0       	ldi	r25, 0x01	; 1
    5174:	0e 94 1e 1f 	call	0x3e3c	; 0x3e3c <clear_buffer>
		LCD_Display_Text(59,(const unsigned char*)Verdana14,10,25);
    5178:	29 e1       	ldi	r18, 0x19	; 25
    517a:	30 e0       	ldi	r19, 0x00	; 0
    517c:	4a e0       	ldi	r20, 0x0A	; 10
    517e:	50 e0       	ldi	r21, 0x00	; 0
    5180:	69 e4       	ldi	r22, 0x49	; 73
    5182:	71 e0       	ldi	r23, 0x01	; 1
    5184:	8b e3       	ldi	r24, 0x3B	; 59
    5186:	90 e0       	ldi	r25, 0x00	; 0
    5188:	0e 94 ff 20 	call	0x41fe	; 0x41fe <LCD_Display_Text>
		write_buffer(buffer);
    518c:	81 e0       	ldi	r24, 0x01	; 1
    518e:	91 e0       	ldi	r25, 0x01	; 1
    5190:	0e 94 ec 1e 	call	0x3dd8	; 0x3dd8 <write_buffer>
		clear_buffer(buffer);
    5194:	81 e0       	ldi	r24, 0x01	; 1
    5196:	91 e0       	ldi	r25, 0x01	; 1
    5198:	0e 94 1e 1f 	call	0x3e3c	; 0x3e3c <clear_buffer>
    519c:	e7 e4       	ldi	r30, 0x47	; 71
    519e:	f6 e0       	ldi	r31, 0x06	; 6
    51a0:	80 e0       	ldi	r24, 0x00	; 0
    51a2:	90 e0       	ldi	r25, 0x00	; 0
				// Set output to maximum pulse width
				ServoOut[i] = MOTOR_100;
			}
			else
			{
				ServoOut[i] = SERVO_CENTER;
    51a4:	4c ed       	ldi	r20, 0xDC	; 220
    51a6:	55 e0       	ldi	r21, 0x05	; 5
		{
			// Check for motor marker
			if (Config.Channel[i].Motor_marker == MOTOR)
			{
				// Set output to maximum pulse width
				ServoOut[i] = MOTOR_100;
    51a8:	6c e6       	ldi	r22, 0x6C	; 108
    51aa:	77 e0       	ldi	r23, 0x07	; 7
				
		// For each output
		for (i = 0; i < MAX_OUTPUTS; i++)
		{
			// Check for motor marker
			if (Config.Channel[i].Motor_marker == MOTOR)
    51ac:	a0 81       	ld	r26, Z
    51ae:	9c 01       	movw	r18, r24
    51b0:	22 0f       	add	r18, r18
    51b2:	33 1f       	adc	r19, r19
    51b4:	a2 30       	cpi	r26, 0x02	; 2
    51b6:	39 f4       	brne	.+14     	; 0x51c6 <init+0x13a>
			{
				// Set output to maximum pulse width
				ServoOut[i] = MOTOR_100;
    51b8:	d9 01       	movw	r26, r18
    51ba:	a3 5c       	subi	r26, 0xC3	; 195
    51bc:	b7 4f       	sbci	r27, 0xF7	; 247
    51be:	11 96       	adiw	r26, 0x01	; 1
    51c0:	7c 93       	st	X, r23
    51c2:	6e 93       	st	-X, r22
    51c4:	06 c0       	rjmp	.+12     	; 0x51d2 <init+0x146>
			}
			else
			{
				ServoOut[i] = SERVO_CENTER;
    51c6:	d9 01       	movw	r26, r18
    51c8:	a3 5c       	subi	r26, 0xC3	; 195
    51ca:	b7 4f       	sbci	r27, 0xF7	; 247
    51cc:	11 96       	adiw	r26, 0x01	; 1
    51ce:	5c 93       	st	X, r21
    51d0:	4e 93       	st	-X, r20
    51d2:	01 96       	adiw	r24, 0x01	; 1
    51d4:	b6 96       	adiw	r30, 0x26	; 38
		LCD_Display_Text(59,(const unsigned char*)Verdana14,10,25);
		write_buffer(buffer);
		clear_buffer(buffer);
				
		// For each output
		for (i = 0; i < MAX_OUTPUTS; i++)
    51d6:	88 30       	cpi	r24, 0x08	; 8
    51d8:	91 05       	cpc	r25, r1
    51da:	41 f7       	brne	.-48     	; 0x51ac <init+0x120>
				ServoOut[i] = SERVO_CENTER;
			}
		}
					
		// Output HIGH pulse (1.9ms) until buttons released
		while ((PINB & 0xf0) == 0x60)
    51dc:	83 b1       	in	r24, 0x03	; 3
    51de:	80 7f       	andi	r24, 0xF0	; 240
    51e0:	80 36       	cpi	r24, 0x60	; 96
    51e2:	79 f4       	brne	.+30     	; 0x5202 <init+0x176>
		{
			// Pass address of ServoOut array and select all outputs
			output_servo_ppm_asm(&ServoOut[0], 0xFF);
    51e4:	6f ef       	ldi	r22, 0xFF	; 255
    51e6:	8d e3       	ldi	r24, 0x3D	; 61
    51e8:	98 e0       	ldi	r25, 0x08	; 8
    51ea:	0e 94 75 0d 	call	0x1aea	; 0x1aea <output_servo_ppm_asm>
    51ee:	2f e7       	ldi	r18, 0x7F	; 127
    51f0:	88 e3       	ldi	r24, 0x38	; 56
    51f2:	91 e0       	ldi	r25, 0x01	; 1
    51f4:	21 50       	subi	r18, 0x01	; 1
    51f6:	80 40       	sbci	r24, 0x00	; 0
    51f8:	90 40       	sbci	r25, 0x00	; 0
    51fa:	e1 f7       	brne	.-8      	; 0x51f4 <init+0x168>
    51fc:	00 c0       	rjmp	.+0      	; 0x51fe <init+0x172>
    51fe:	00 00       	nop
    5200:	ed cf       	rjmp	.-38     	; 0x51dc <init+0x150>
				ServoOut[i] = SERVO_CENTER;
			}
		}
					
		// Output HIGH pulse (1.9ms) until buttons released
		while ((PINB & 0xf0) == 0x60)
    5202:	e7 e4       	ldi	r30, 0x47	; 71
    5204:	f6 e0       	ldi	r31, 0x06	; 6
    5206:	80 e0       	ldi	r24, 0x00	; 0
    5208:	90 e0       	ldi	r25, 0x00	; 0
		{
			// Check for motor marker
			if (Config.Channel[i].Motor_marker == MOTOR)
			{
				// Set output to maximum pulse width
				ServoOut[i] = MOTOR_0;
    520a:	2c e4       	ldi	r18, 0x4C	; 76
    520c:	34 e0       	ldi	r19, 0x04	; 4
		// Output LOW pulse (1.1ms) after buttons released
		// For each output
		for (i = 0; i < MAX_OUTPUTS; i++)
		{
			// Check for motor marker
			if (Config.Channel[i].Motor_marker == MOTOR)
    520e:	40 81       	ld	r20, Z
    5210:	42 30       	cpi	r20, 0x02	; 2
    5212:	41 f4       	brne	.+16     	; 0x5224 <init+0x198>
			{
				// Set output to maximum pulse width
				ServoOut[i] = MOTOR_0;
    5214:	dc 01       	movw	r26, r24
    5216:	aa 0f       	add	r26, r26
    5218:	bb 1f       	adc	r27, r27
    521a:	a3 5c       	subi	r26, 0xC3	; 195
    521c:	b7 4f       	sbci	r27, 0xF7	; 247
    521e:	11 96       	adiw	r26, 0x01	; 1
    5220:	3c 93       	st	X, r19
    5222:	2e 93       	st	-X, r18
    5224:	01 96       	adiw	r24, 0x01	; 1
    5226:	b6 96       	adiw	r30, 0x26	; 38
			_delay_ms(20);			
		}

		// Output LOW pulse (1.1ms) after buttons released
		// For each output
		for (i = 0; i < MAX_OUTPUTS; i++)
    5228:	88 30       	cpi	r24, 0x08	; 8
    522a:	91 05       	cpc	r25, r1
    522c:	81 f7       	brne	.-32     	; 0x520e <init+0x182>

		// Loop forever here
		while(1)
		{
			// Pass address of ServoOut array and select all outputs
			output_servo_ppm_asm(&ServoOut[0], 0xFF);
    522e:	6f ef       	ldi	r22, 0xFF	; 255
    5230:	8d e3       	ldi	r24, 0x3D	; 61
    5232:	98 e0       	ldi	r25, 0x08	; 8
    5234:	0e 94 75 0d 	call	0x1aea	; 0x1aea <output_servo_ppm_asm>
    5238:	2f e7       	ldi	r18, 0x7F	; 127
    523a:	88 e3       	ldi	r24, 0x38	; 56
    523c:	91 e0       	ldi	r25, 0x01	; 1
    523e:	21 50       	subi	r18, 0x01	; 1
    5240:	80 40       	sbci	r24, 0x00	; 0
    5242:	90 40       	sbci	r25, 0x00	; 0
    5244:	e1 f7       	brne	.-8      	; 0x523e <init+0x1b2>
    5246:	00 c0       	rjmp	.+0      	; 0x5248 <init+0x1bc>
    5248:	00 00       	nop
    524a:	f1 cf       	rjmp	.-30     	; 0x522e <init+0x1a2>
    524c:	2f e7       	ldi	r18, 0x7F	; 127
    524e:	8f e4       	ldi	r24, 0x4F	; 79
    5250:	92 e1       	ldi	r25, 0x12	; 18
    5252:	21 50       	subi	r18, 0x01	; 1
    5254:	80 40       	sbci	r24, 0x00	; 0
    5256:	90 40       	sbci	r25, 0x00	; 0
    5258:	e1 f7       	brne	.-8      	; 0x5252 <init+0x1c6>
    525a:	00 c0       	rjmp	.+0      	; 0x525c <init+0x1d0>
    525c:	00 00       	nop

	// This delay prevents the GLCD flashing up a ghost image of old data
	_delay_ms(300);

	// Reload default eeprom settings if middle two buttons are pressed
	if ((PINB & 0xf0) == 0x90)
    525e:	93 b1       	in	r25, 0x03	; 3
    5260:	90 7f       	andi	r25, 0xF0	; 240
    5262:	90 39       	cpi	r25, 0x90	; 144
    5264:	51 f5       	brne	.+84     	; 0x52ba <init+0x22e>
	{
		// Display reset message
		st7565_command(CMD_SET_COM_NORMAL); 	// For text (not for logo)
    5266:	80 ec       	ldi	r24, 0xC0	; 192
    5268:	0e 94 be 1e 	call	0x3d7c	; 0x3d7c <st7565_command>
		clear_buffer(buffer);
    526c:	81 e0       	ldi	r24, 0x01	; 1
    526e:	91 e0       	ldi	r25, 0x01	; 1
    5270:	0e 94 1e 1f 	call	0x3e3c	; 0x3e3c <clear_buffer>
		LCD_Display_Text(1,(const unsigned char*)Verdana14,40,25); // "Reset"
    5274:	29 e1       	ldi	r18, 0x19	; 25
    5276:	30 e0       	ldi	r19, 0x00	; 0
    5278:	48 e2       	ldi	r20, 0x28	; 40
    527a:	50 e0       	ldi	r21, 0x00	; 0
    527c:	69 e4       	ldi	r22, 0x49	; 73
    527e:	71 e0       	ldi	r23, 0x01	; 1
    5280:	81 e0       	ldi	r24, 0x01	; 1
    5282:	90 e0       	ldi	r25, 0x00	; 0
    5284:	0e 94 ff 20 	call	0x41fe	; 0x41fe <LCD_Display_Text>
		write_buffer(buffer);
    5288:	81 e0       	ldi	r24, 0x01	; 1
    528a:	91 e0       	ldi	r25, 0x01	; 1
    528c:	0e 94 ec 1e 	call	0x3dd8	; 0x3dd8 <write_buffer>
		clear_buffer(buffer);
    5290:	81 e0       	ldi	r24, 0x01	; 1
    5292:	91 e0       	ldi	r25, 0x01	; 1
    5294:	0e 94 1e 1f 	call	0x3e3c	; 0x3e3c <clear_buffer>
		
		// Reset EEPROM settings
		Set_EEPROM_Default_Config();
    5298:	0e 94 b8 18 	call	0x3170	; 0x3170 <Set_EEPROM_Default_Config>
		Save_Config_to_EEPROM();
    529c:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <Save_Config_to_EEPROM>

		// Set contrast to the default value
		st7565_set_brightness(Config.Contrast);
    52a0:	80 91 3a 06 	lds	r24, 0x063A
    52a4:	0e 94 c4 1e 	call	0x3d88	; 0x3d88 <st7565_set_brightness>
    52a8:	2f e7       	ldi	r18, 0x7F	; 127
    52aa:	84 e8       	ldi	r24, 0x84	; 132
    52ac:	9e e1       	ldi	r25, 0x1E	; 30
    52ae:	21 50       	subi	r18, 0x01	; 1
    52b0:	80 40       	sbci	r24, 0x00	; 0
    52b2:	90 40       	sbci	r25, 0x00	; 0
    52b4:	e1 f7       	brne	.-8      	; 0x52ae <init+0x222>
    52b6:	00 c0       	rjmp	.+0      	; 0x52b8 <init+0x22c>
    52b8:	00 00       	nop
		_delay_ms(500);		// Save is now too fast to show the "Reset" text long enough

	}

	// Display message in place of logo when updating eeprom structure
	if (updated)
    52ba:	cc 23       	and	r28, r28
    52bc:	21 f1       	breq	.+72     	; 0x5306 <init+0x27a>
	{
		st7565_command(CMD_SET_COM_NORMAL); 	// For text (not for logo)
    52be:	80 ec       	ldi	r24, 0xC0	; 192
    52c0:	0e 94 be 1e 	call	0x3d7c	; 0x3d7c <st7565_command>
		clear_buffer(buffer);
    52c4:	81 e0       	ldi	r24, 0x01	; 1
    52c6:	91 e0       	ldi	r25, 0x01	; 1
    52c8:	0e 94 1e 1f 	call	0x3e3c	; 0x3e3c <clear_buffer>
		LCD_Display_Text(259,(const unsigned char*)Verdana14,30,13); // "Updating"
    52cc:	2d e0       	ldi	r18, 0x0D	; 13
    52ce:	30 e0       	ldi	r19, 0x00	; 0
    52d0:	4e e1       	ldi	r20, 0x1E	; 30
    52d2:	50 e0       	ldi	r21, 0x00	; 0
    52d4:	69 e4       	ldi	r22, 0x49	; 73
    52d6:	71 e0       	ldi	r23, 0x01	; 1
    52d8:	83 e0       	ldi	r24, 0x03	; 3
    52da:	91 e0       	ldi	r25, 0x01	; 1
    52dc:	0e 94 ff 20 	call	0x41fe	; 0x41fe <LCD_Display_Text>
		LCD_Display_Text(260,(const unsigned char*)Verdana14,33,37); // "settings"
    52e0:	25 e2       	ldi	r18, 0x25	; 37
    52e2:	30 e0       	ldi	r19, 0x00	; 0
    52e4:	41 e2       	ldi	r20, 0x21	; 33
    52e6:	50 e0       	ldi	r21, 0x00	; 0
    52e8:	69 e4       	ldi	r22, 0x49	; 73
    52ea:	71 e0       	ldi	r23, 0x01	; 1
    52ec:	84 e0       	ldi	r24, 0x04	; 4
    52ee:	91 e0       	ldi	r25, 0x01	; 1
    52f0:	0e 94 ff 20 	call	0x41fe	; 0x41fe <LCD_Display_Text>
		write_buffer(buffer);
    52f4:	81 e0       	ldi	r24, 0x01	; 1
    52f6:	91 e0       	ldi	r25, 0x01	; 1
    52f8:	0e 94 ec 1e 	call	0x3dd8	; 0x3dd8 <write_buffer>
		clear_buffer(buffer);		
    52fc:	81 e0       	ldi	r24, 0x01	; 1
    52fe:	91 e0       	ldi	r25, 0x01	; 1
    5300:	0e 94 1e 1f 	call	0x3e3c	; 0x3e3c <clear_buffer>
    5304:	04 c0       	rjmp	.+8      	; 0x530e <init+0x282>
		_delay_ms(1000);	
	}
	else
	{
		// Write logo from buffer
		write_buffer(buffer);
    5306:	81 e0       	ldi	r24, 0x01	; 1
    5308:	91 e0       	ldi	r25, 0x01	; 1
    530a:	0e 94 ec 1e 	call	0x3dd8	; 0x3dd8 <write_buffer>
    530e:	2f ef       	ldi	r18, 0xFF	; 255
    5310:	88 e0       	ldi	r24, 0x08	; 8
    5312:	9d e3       	ldi	r25, 0x3D	; 61
    5314:	21 50       	subi	r18, 0x01	; 1
    5316:	80 40       	sbci	r24, 0x00	; 0
    5318:	90 40       	sbci	r25, 0x00	; 0
    531a:	e1 f7       	brne	.-8      	; 0x5314 <init+0x288>
    531c:	00 c0       	rjmp	.+0      	; 0x531e <init+0x292>
    531e:	00 00       	nop
		_delay_ms(1000);
	}

	clear_buffer(buffer);
    5320:	81 e0       	ldi	r24, 0x01	; 1
    5322:	91 e0       	ldi	r25, 0x01	; 1
    5324:	0e 94 1e 1f 	call	0x3e3c	; 0x3e3c <clear_buffer>
	write_buffer(buffer);
    5328:	81 e0       	ldi	r24, 0x01	; 1
    532a:	91 e0       	ldi	r25, 0x01	; 1
    532c:	0e 94 ec 1e 	call	0x3dd8	; 0x3dd8 <write_buffer>
	
	st7565_init(); // Seems necessary for KK2 mini
    5330:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <st7565_init>
	
	//***********************************************************
	// i2c init
	//***********************************************************	

	i2c_init();
    5334:	0e 94 e9 43 	call	0x87d2	; 0x87d2 <i2c_init>
	init_i2c_gyros();
    5338:	0e 94 53 23 	call	0x46a6	; 0x46a6 <init_i2c_gyros>
	init_i2c_accs();
    533c:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <init_i2c_accs>
	//***********************************************************
	// Remaining init tasks
	//***********************************************************

	// Display "Hold steady" message
	clear_buffer(buffer);
    5340:	81 e0       	ldi	r24, 0x01	; 1
    5342:	91 e0       	ldi	r25, 0x01	; 1
    5344:	0e 94 1e 1f 	call	0x3e3c	; 0x3e3c <clear_buffer>
	st7565_command(CMD_SET_COM_NORMAL); 	// For text (not for logo)
    5348:	80 ec       	ldi	r24, 0xC0	; 192
    534a:	0e 94 be 1e 	call	0x3d7c	; 0x3d7c <st7565_command>
	//clear_buffer(buffer);
	LCD_Display_Text(2,(const unsigned char*)Verdana14,18,25);	// "Hold steady"
    534e:	29 e1       	ldi	r18, 0x19	; 25
    5350:	30 e0       	ldi	r19, 0x00	; 0
    5352:	42 e1       	ldi	r20, 0x12	; 18
    5354:	50 e0       	ldi	r21, 0x00	; 0
    5356:	69 e4       	ldi	r22, 0x49	; 73
    5358:	71 e0       	ldi	r23, 0x01	; 1
    535a:	82 e0       	ldi	r24, 0x02	; 2
    535c:	90 e0       	ldi	r25, 0x00	; 0
    535e:	0e 94 ff 20 	call	0x41fe	; 0x41fe <LCD_Display_Text>
	write_buffer(buffer);	
    5362:	81 e0       	ldi	r24, 0x01	; 1
    5364:	91 e0       	ldi	r25, 0x01	; 1
    5366:	0e 94 ec 1e 	call	0x3dd8	; 0x3dd8 <write_buffer>
	clear_buffer(buffer);
    536a:	81 e0       	ldi	r24, 0x01	; 1
    536c:	91 e0       	ldi	r25, 0x01	; 1
    536e:	0e 94 1e 1f 	call	0x3e3c	; 0x3e3c <clear_buffer>
		
	// Do startup tasks
	UpdateLimits();							// Update travel limits	
    5372:	0e 94 43 35 	call	0x6a86	; 0x6a86 <UpdateLimits>
	Init_ADC();
    5376:	0e 94 de 10 	call	0x21bc	; 0x21bc <Init_ADC>
	init_int();								// Initialise interrupts based on RC input mode
    537a:	0e 94 43 2d 	call	0x5a86	; 0x5a86 <init_int>
	init_uart();							// Initialise UART
    537e:	0e 94 ce 44 	call	0x899c	; 0x899c <init_uart>

	// Initial gyro calibration
	if (!CalibrateGyrosSlow())
    5382:	0e 94 74 22 	call	0x44e8	; 0x44e8 <CalibrateGyrosSlow>
    5386:	81 11       	cpse	r24, r1
    5388:	28 c0       	rjmp	.+80     	; 0x53da <init+0x34e>
	{
		clear_buffer(buffer);
    538a:	81 e0       	ldi	r24, 0x01	; 1
    538c:	91 e0       	ldi	r25, 0x01	; 1
    538e:	0e 94 1e 1f 	call	0x3e3c	; 0x3e3c <clear_buffer>
		LCD_Display_Text(61,(const unsigned char*)Verdana14,25,25); // "Cal. failed"
    5392:	29 e1       	ldi	r18, 0x19	; 25
    5394:	30 e0       	ldi	r19, 0x00	; 0
    5396:	49 e1       	ldi	r20, 0x19	; 25
    5398:	50 e0       	ldi	r21, 0x00	; 0
    539a:	69 e4       	ldi	r22, 0x49	; 73
    539c:	71 e0       	ldi	r23, 0x01	; 1
    539e:	8d e3       	ldi	r24, 0x3D	; 61
    53a0:	90 e0       	ldi	r25, 0x00	; 0
    53a2:	0e 94 ff 20 	call	0x41fe	; 0x41fe <LCD_Display_Text>
		write_buffer(buffer);
    53a6:	81 e0       	ldi	r24, 0x01	; 1
    53a8:	91 e0       	ldi	r25, 0x01	; 1
    53aa:	0e 94 ec 1e 	call	0x3dd8	; 0x3dd8 <write_buffer>
    53ae:	2f ef       	ldi	r18, 0xFF	; 255
    53b0:	88 e0       	ldi	r24, 0x08	; 8
    53b2:	9d e3       	ldi	r25, 0x3D	; 61
    53b4:	21 50       	subi	r18, 0x01	; 1
    53b6:	80 40       	sbci	r24, 0x00	; 0
    53b8:	90 40       	sbci	r25, 0x00	; 0
    53ba:	e1 f7       	brne	.-8      	; 0x53b4 <init+0x328>
    53bc:	00 c0       	rjmp	.+0      	; 0x53be <init+0x332>
    53be:	00 00       	nop
		_delay_ms(1000);
		
		// Reset
		cli();
    53c0:	f8 94       	cli
		wdt_enable(WDTO_15MS);				// Watchdog on, 15ms
    53c2:	28 e0       	ldi	r18, 0x08	; 8
    53c4:	88 e1       	ldi	r24, 0x18	; 24
    53c6:	90 e0       	ldi	r25, 0x00	; 0
    53c8:	0f b6       	in	r0, 0x3f	; 63
    53ca:	f8 94       	cli
    53cc:	a8 95       	wdr
    53ce:	80 93 60 00 	sts	0x0060, r24
    53d2:	0f be       	out	0x3f, r0	; 63
    53d4:	20 93 60 00 	sts	0x0060, r18
    53d8:	ff cf       	rjmp	.-2      	; 0x53d8 <init+0x34c>
		while(1);							// Wait for reboot
	}

	// Disarm on start-up if Armed setting is ARMABLE
	if (Config.ArmMode == ARMABLE)
    53da:	80 91 3b 06 	lds	r24, 0x063B
    53de:	81 30       	cpi	r24, 0x01	; 1
    53e0:	29 f4       	brne	.+10     	; 0x53ec <init+0x360>
	{
		General_error |= (1 << DISARMED); 	// Set disarmed bit
    53e2:	80 91 20 05 	lds	r24, 0x0520
    53e6:	84 60       	ori	r24, 0x04	; 4
    53e8:	80 93 20 05 	sts	0x0520, r24
	}

	// Check to see that throttle is low if RC detected
	if (Interrupted)
    53ec:	80 91 ca 07 	lds	r24, 0x07CA
    53f0:	88 23       	and	r24, r24
    53f2:	69 f0       	breq	.+26     	; 0x540e <init+0x382>
	{
		RxGetChannels();
    53f4:	0e 94 64 42 	call	0x84c8	; 0x84c8 <RxGetChannels>
		if (MonopolarThrottle > THROTTLEIDLE)
    53f8:	80 91 29 08 	lds	r24, 0x0829
    53fc:	90 91 2a 08 	lds	r25, 0x082A
    5400:	c3 97       	sbiw	r24, 0x33	; 51
    5402:	2c f0       	brlt	.+10     	; 0x540e <init+0x382>
		{
			General_error |= (1 << THROTTLE_HIGH); 	// Set throttle high error bit
    5404:	80 91 20 05 	lds	r24, 0x0520
    5408:	81 60       	ori	r24, 0x01	; 1
    540a:	80 93 20 05 	sts	0x0520, r24
		}
	}

	// Reset IMU
	reset_IMU();
    540e:	0e 94 fd 27 	call	0x4ffa	; 0x4ffa <reset_IMU>

	// Beep that init is complete
	menu_beep(1);
    5412:	81 e0       	ldi	r24, 0x01	; 1

} // init()
    5414:	cf 91       	pop	r28

	// Reset IMU
	reset_IMU();

	// Beep that init is complete
	menu_beep(1);
    5416:	0c 94 c7 2f 	jmp	0x5f8e	; 0x5f8e <menu_beep>

0000541a <__vector_18>:
//************************************************************
//* Timer 0 overflow handler for extending TMR1
//************************************************************

ISR(TIMER0_OVF_vect)
{
    541a:	1f 92       	push	r1
    541c:	0f 92       	push	r0
    541e:	0f b6       	in	r0, 0x3f	; 63
    5420:	0f 92       	push	r0
    5422:	11 24       	eor	r1, r1
    5424:	8f 93       	push	r24
    5426:	9f 93       	push	r25
	TMR0_counter++;
    5428:	80 91 cd 07 	lds	r24, 0x07CD
    542c:	90 91 ce 07 	lds	r25, 0x07CE
    5430:	01 96       	adiw	r24, 0x01	; 1
    5432:	90 93 ce 07 	sts	0x07CE, r25
    5436:	80 93 cd 07 	sts	0x07CD, r24
}
    543a:	9f 91       	pop	r25
    543c:	8f 91       	pop	r24
    543e:	0f 90       	pop	r0
    5440:	0f be       	out	0x3f, r0	; 63
    5442:	0f 90       	pop	r0
    5444:	1f 90       	pop	r1
    5446:	18 95       	reti

00005448 <__vector_2>:
//* Standard PWM mode
//* Sequential PWM inputs from a normal RC receiver
//************************************************************

ISR(INT1_vect)
{
    5448:	1f 92       	push	r1
    544a:	0f 92       	push	r0
    544c:	0f b6       	in	r0, 0x3f	; 63
    544e:	0f 92       	push	r0
    5450:	11 24       	eor	r1, r1
    5452:	2f 93       	push	r18
    5454:	3f 93       	push	r19
    5456:	8f 93       	push	r24
    5458:	9f 93       	push	r25
	// Log interrupts that occur during PWM generation
	if (JitterGate)	JitterFlag = true;	
    545a:	80 91 e4 07 	lds	r24, 0x07E4
    545e:	88 23       	and	r24, r24
    5460:	19 f0       	breq	.+6      	; 0x5468 <__vector_2+0x20>
    5462:	81 e0       	ldi	r24, 0x01	; 1
    5464:	80 93 e5 07 	sts	0x07E5, r24

	if (RX_ROLL)	// Rising
    5468:	4b 9b       	sbis	0x09, 3	; 9
    546a:	09 c0       	rjmp	.+18     	; 0x547e <__vector_2+0x36>
	{
		RxChannelStart[AILERON] = TCNT1;
    546c:	80 91 84 00 	lds	r24, 0x0084
    5470:	90 91 85 00 	lds	r25, 0x0085
    5474:	90 93 d2 07 	sts	0x07D2, r25
    5478:	80 93 d1 07 	sts	0x07D1, r24
    547c:	14 c0       	rjmp	.+40     	; 0x54a6 <__vector_2+0x5e>
	} 
	else 
	{				// Falling
		RxChannel[AILERON] = TCNT1 - RxChannelStart[AILERON];
    547e:	80 91 84 00 	lds	r24, 0x0084
    5482:	90 91 85 00 	lds	r25, 0x0085
    5486:	20 91 d1 07 	lds	r18, 0x07D1
    548a:	30 91 d2 07 	lds	r19, 0x07D2
    548e:	82 1b       	sub	r24, r18
    5490:	93 0b       	sbc	r25, r19
    5492:	90 93 bd 07 	sts	0x07BD, r25
    5496:	80 93 bc 07 	sts	0x07BC, r24
		if (Config.PWM_Sync == AILERON) 
    549a:	80 91 db 05 	lds	r24, 0x05DB
    549e:	81 30       	cpi	r24, 0x01	; 1
    54a0:	11 f4       	brne	.+4      	; 0x54a6 <__vector_2+0x5e>
		{
			Interrupted = true;						// Signal that interrupt block has finished
    54a2:	80 93 ca 07 	sts	0x07CA, r24
		}
	}
}
    54a6:	9f 91       	pop	r25
    54a8:	8f 91       	pop	r24
    54aa:	3f 91       	pop	r19
    54ac:	2f 91       	pop	r18
    54ae:	0f 90       	pop	r0
    54b0:	0f be       	out	0x3f, r0	; 63
    54b2:	0f 90       	pop	r0
    54b4:	1f 90       	pop	r1
    54b6:	18 95       	reti

000054b8 <__vector_1>:

ISR(INT0_vect)
{
    54b8:	1f 92       	push	r1
    54ba:	0f 92       	push	r0
    54bc:	0f b6       	in	r0, 0x3f	; 63
    54be:	0f 92       	push	r0
    54c0:	11 24       	eor	r1, r1
    54c2:	2f 93       	push	r18
    54c4:	3f 93       	push	r19
    54c6:	8f 93       	push	r24
    54c8:	9f 93       	push	r25
	if (JitterGate)	JitterFlag = true;	
    54ca:	80 91 e4 07 	lds	r24, 0x07E4
    54ce:	88 23       	and	r24, r24
    54d0:	19 f0       	breq	.+6      	; 0x54d8 <__vector_1+0x20>
    54d2:	81 e0       	ldi	r24, 0x01	; 1
    54d4:	80 93 e5 07 	sts	0x07E5, r24

	if (RX_PITCH)	// Rising 
    54d8:	4a 9b       	sbis	0x09, 2	; 9
    54da:	09 c0       	rjmp	.+18     	; 0x54ee <__vector_1+0x36>
	{
		RxChannelStart[ELEVATOR] = TCNT1;
    54dc:	80 91 84 00 	lds	r24, 0x0084
    54e0:	90 91 85 00 	lds	r25, 0x0085
    54e4:	90 93 d4 07 	sts	0x07D4, r25
    54e8:	80 93 d3 07 	sts	0x07D3, r24
    54ec:	15 c0       	rjmp	.+42     	; 0x5518 <__vector_1+0x60>
	} 
	else 
	{				// Falling
		RxChannel[ELEVATOR] = TCNT1 - RxChannelStart[ELEVATOR];
    54ee:	80 91 84 00 	lds	r24, 0x0084
    54f2:	90 91 85 00 	lds	r25, 0x0085
    54f6:	20 91 d3 07 	lds	r18, 0x07D3
    54fa:	30 91 d4 07 	lds	r19, 0x07D4
    54fe:	82 1b       	sub	r24, r18
    5500:	93 0b       	sbc	r25, r19
    5502:	90 93 bf 07 	sts	0x07BF, r25
    5506:	80 93 be 07 	sts	0x07BE, r24
		if (Config.PWM_Sync == ELEVATOR) 
    550a:	80 91 db 05 	lds	r24, 0x05DB
    550e:	82 30       	cpi	r24, 0x02	; 2
    5510:	19 f4       	brne	.+6      	; 0x5518 <__vector_1+0x60>
		{
			Interrupted = true;						// Signal that interrupt block has finished
    5512:	81 e0       	ldi	r24, 0x01	; 1
    5514:	80 93 ca 07 	sts	0x07CA, r24
		}
	}
}
    5518:	9f 91       	pop	r25
    551a:	8f 91       	pop	r24
    551c:	3f 91       	pop	r19
    551e:	2f 91       	pop	r18
    5520:	0f 90       	pop	r0
    5522:	0f be       	out	0x3f, r0	; 63
    5524:	0f 90       	pop	r0
    5526:	1f 90       	pop	r1
    5528:	18 95       	reti

0000552a <__vector_7>:

ISR(PCINT3_vect)
{
    552a:	1f 92       	push	r1
    552c:	0f 92       	push	r0
    552e:	0f b6       	in	r0, 0x3f	; 63
    5530:	0f 92       	push	r0
    5532:	11 24       	eor	r1, r1
    5534:	2f 93       	push	r18
    5536:	3f 93       	push	r19
    5538:	8f 93       	push	r24
    553a:	9f 93       	push	r25
	if (JitterGate)	JitterFlag = true;	
    553c:	80 91 e4 07 	lds	r24, 0x07E4
    5540:	88 23       	and	r24, r24
    5542:	19 f0       	breq	.+6      	; 0x554a <__vector_7+0x20>
    5544:	81 e0       	ldi	r24, 0x01	; 1
    5546:	80 93 e5 07 	sts	0x07E5, r24
		
	if (RX_COLL)	// Rising
    554a:	48 9b       	sbis	0x09, 0	; 9
    554c:	09 c0       	rjmp	.+18     	; 0x5560 <__vector_7+0x36>
	{
		RxChannelStart[THROTTLE] = TCNT1;
    554e:	80 91 84 00 	lds	r24, 0x0084
    5552:	90 91 85 00 	lds	r25, 0x0085
    5556:	90 93 d0 07 	sts	0x07D0, r25
    555a:	80 93 cf 07 	sts	0x07CF, r24
    555e:	15 c0       	rjmp	.+42     	; 0x558a <__vector_7+0x60>
	} 
	else 
	{				// Falling
		RxChannel[THROTTLE] = TCNT1 - RxChannelStart[THROTTLE];
    5560:	80 91 84 00 	lds	r24, 0x0084
    5564:	90 91 85 00 	lds	r25, 0x0085
    5568:	20 91 cf 07 	lds	r18, 0x07CF
    556c:	30 91 d0 07 	lds	r19, 0x07D0
    5570:	82 1b       	sub	r24, r18
    5572:	93 0b       	sbc	r25, r19
    5574:	90 93 bb 07 	sts	0x07BB, r25
    5578:	80 93 ba 07 	sts	0x07BA, r24
		if (Config.PWM_Sync == THROTTLE) 
    557c:	80 91 db 05 	lds	r24, 0x05DB
    5580:	81 11       	cpse	r24, r1
    5582:	03 c0       	rjmp	.+6      	; 0x558a <__vector_7+0x60>
		{
			Interrupted = true;						// Signal that interrupt block has finished
    5584:	81 e0       	ldi	r24, 0x01	; 1
    5586:	80 93 ca 07 	sts	0x07CA, r24
		}
	}
}
    558a:	9f 91       	pop	r25
    558c:	8f 91       	pop	r24
    558e:	3f 91       	pop	r19
    5590:	2f 91       	pop	r18
    5592:	0f 90       	pop	r0
    5594:	0f be       	out	0x3f, r0	; 63
    5596:	0f 90       	pop	r0
    5598:	1f 90       	pop	r1
    559a:	18 95       	reti

0000559c <__vector_5>:


ISR(PCINT1_vect)
{
    559c:	1f 92       	push	r1
    559e:	0f 92       	push	r0
    55a0:	0f b6       	in	r0, 0x3f	; 63
    55a2:	0f 92       	push	r0
    55a4:	11 24       	eor	r1, r1
    55a6:	2f 93       	push	r18
    55a8:	3f 93       	push	r19
    55aa:	8f 93       	push	r24
    55ac:	9f 93       	push	r25
	if (JitterGate)	JitterFlag = true;
    55ae:	80 91 e4 07 	lds	r24, 0x07E4
    55b2:	88 23       	and	r24, r24
    55b4:	19 f0       	breq	.+6      	; 0x55bc <__vector_5+0x20>
    55b6:	81 e0       	ldi	r24, 0x01	; 1
    55b8:	80 93 e5 07 	sts	0x07E5, r24

	if (RX_AUX)	// Rising
    55bc:	18 9b       	sbis	0x03, 0	; 3
    55be:	09 c0       	rjmp	.+18     	; 0x55d2 <__vector_5+0x36>
	{
		RxChannelStart[GEAR] = TCNT1;
    55c0:	80 91 84 00 	lds	r24, 0x0084
    55c4:	90 91 85 00 	lds	r25, 0x0085
    55c8:	90 93 d8 07 	sts	0x07D8, r25
    55cc:	80 93 d7 07 	sts	0x07D7, r24
    55d0:	15 c0       	rjmp	.+42     	; 0x55fc <__vector_5+0x60>
	} 
	else 
	{				// Falling
		RxChannel[GEAR] = TCNT1 - RxChannelStart[GEAR];
    55d2:	80 91 84 00 	lds	r24, 0x0084
    55d6:	90 91 85 00 	lds	r25, 0x0085
    55da:	20 91 d7 07 	lds	r18, 0x07D7
    55de:	30 91 d8 07 	lds	r19, 0x07D8
    55e2:	82 1b       	sub	r24, r18
    55e4:	93 0b       	sbc	r25, r19
    55e6:	90 93 c3 07 	sts	0x07C3, r25
    55ea:	80 93 c2 07 	sts	0x07C2, r24
		if (Config.PWM_Sync == GEAR) 
    55ee:	80 91 db 05 	lds	r24, 0x05DB
    55f2:	84 30       	cpi	r24, 0x04	; 4
    55f4:	19 f4       	brne	.+6      	; 0x55fc <__vector_5+0x60>
		{
			Interrupted = true;						// Signal that interrupt block has finished
    55f6:	81 e0       	ldi	r24, 0x01	; 1
    55f8:	80 93 ca 07 	sts	0x07CA, r24
		}
	}
}
    55fc:	9f 91       	pop	r25
    55fe:	8f 91       	pop	r24
    5600:	3f 91       	pop	r19
    5602:	2f 91       	pop	r18
    5604:	0f 90       	pop	r0
    5606:	0f be       	out	0x3f, r0	; 63
    5608:	0f 90       	pop	r0
    560a:	1f 90       	pop	r1
    560c:	18 95       	reti

0000560e <__vector_3>:
// Compacted CPPM RX code thanks to Edgar
//
//************************************************************

ISR(INT2_vect)
{
    560e:	1f 92       	push	r1
    5610:	0f 92       	push	r0
    5612:	0f b6       	in	r0, 0x3f	; 63
    5614:	0f 92       	push	r0
    5616:	11 24       	eor	r1, r1
    5618:	2f 93       	push	r18
    561a:	3f 93       	push	r19
    561c:	4f 93       	push	r20
    561e:	5f 93       	push	r21
    5620:	8f 93       	push	r24
    5622:	9f 93       	push	r25
    5624:	af 93       	push	r26
    5626:	bf 93       	push	r27
    5628:	ef 93       	push	r30
    562a:	ff 93       	push	r31
	if (JitterGate)	JitterFlag = true;	
    562c:	80 91 e4 07 	lds	r24, 0x07E4
    5630:	88 23       	and	r24, r24
    5632:	19 f0       	breq	.+6      	; 0x563a <__vector_3+0x2c>
    5634:	81 e0       	ldi	r24, 0x01	; 1
    5636:	80 93 e5 07 	sts	0x07E5, r24

    // Backup TCNT1
    uint16_t tCount;
    tCount = TCNT1;
    563a:	80 91 84 00 	lds	r24, 0x0084
    563e:	90 91 85 00 	lds	r25, 0x0085

	uint8_t curChannel;
	uint8_t prevChannel;

	if (Config.RxMode != CPPM_MODE)
    5642:	20 91 da 05 	lds	r18, 0x05DA
    5646:	22 23       	and	r18, r18
    5648:	d1 f0       	breq	.+52     	; 0x567e <__vector_3+0x70>
	{
		if (RX_YAW)	// Rising
    564a:	1a 9b       	sbis	0x03, 2	; 3
    564c:	05 c0       	rjmp	.+10     	; 0x5658 <__vector_3+0x4a>
		{
			RxChannelStart[RUDDER] = tCount;
    564e:	90 93 d6 07 	sts	0x07D6, r25
    5652:	80 93 d5 07 	sts	0x07D5, r24
    5656:	86 c0       	rjmp	.+268    	; 0x5764 <__vector_3+0x156>
		} 
		else 
		{			// Falling
			RxChannel[RUDDER] = tCount - RxChannelStart[RUDDER];
    5658:	20 91 d5 07 	lds	r18, 0x07D5
    565c:	30 91 d6 07 	lds	r19, 0x07D6
    5660:	82 1b       	sub	r24, r18
    5662:	93 0b       	sbc	r25, r19
    5664:	90 93 c1 07 	sts	0x07C1, r25
    5668:	80 93 c0 07 	sts	0x07C0, r24
			if (Config.PWM_Sync == RUDDER) 
    566c:	80 91 db 05 	lds	r24, 0x05DB
    5670:	83 30       	cpi	r24, 0x03	; 3
    5672:	09 f0       	breq	.+2      	; 0x5676 <__vector_3+0x68>
    5674:	77 c0       	rjmp	.+238    	; 0x5764 <__vector_3+0x156>
			{
				Interrupted = true;					// Signal that interrupt block has finished
    5676:	81 e0       	ldi	r24, 0x01	; 1
    5678:	80 93 ca 07 	sts	0x07CA, r24
    567c:	73 c0       	rjmp	.+230    	; 0x5764 <__vector_3+0x156>
	// CPPM receivers.
	//************************************************************
	else
	{
		// Only respond to negative-going interrupts
		if (CPPM) return;
    567e:	1a 99       	sbic	0x03, 2	; 3
    5680:	71 c0       	rjmp	.+226    	; 0x5764 <__vector_3+0x156>

		// Check to see if previous period was a sync pulse or too small to be valid
		// If so, reset the channel number
		if (((tCount - PPMSyncStart) > SYNCPULSEWIDTH) || ((tCount - PPMSyncStart) < MINPULSEWIDTH))
    5682:	20 91 e2 07 	lds	r18, 0x07E2
    5686:	30 91 e3 07 	lds	r19, 0x07E3
    568a:	ac 01       	movw	r20, r24
    568c:	42 1b       	sub	r20, r18
    568e:	53 0b       	sbc	r21, r19
    5690:	9a 01       	movw	r18, r20
    5692:	2f 35       	cpi	r18, 0x5F	; 95
    5694:	3a 41       	sbci	r19, 0x1A	; 26
    5696:	58 f4       	brcc	.+22     	; 0x56ae <__vector_3+0xa0>
    5698:	20 91 e2 07 	lds	r18, 0x07E2
    569c:	30 91 e3 07 	lds	r19, 0x07E3
    56a0:	ac 01       	movw	r20, r24
    56a2:	42 1b       	sub	r20, r18
    56a4:	53 0b       	sbc	r21, r19
    56a6:	9a 01       	movw	r18, r20
    56a8:	2e 3e       	cpi	r18, 0xEE	; 238
    56aa:	32 40       	sbci	r19, 0x02	; 2
    56ac:	10 f4       	brcc	.+4      	; 0x56b2 <__vector_3+0xa4>
		{
			ch_num = 0;
    56ae:	10 92 e1 07 	sts	0x07E1, r1
		}

		// Update PPMSyncStart with current value
		PPMSyncStart = tCount;
    56b2:	90 93 e3 07 	sts	0x07E3, r25
    56b6:	80 93 e2 07 	sts	0x07E2, r24

		// Get the channel number of the current channel in the requested channel order
        curChannel = Config.ChannelOrder[ch_num];
    56ba:	e0 91 e1 07 	lds	r30, 0x07E1
    56be:	f0 e0       	ldi	r31, 0x00	; 0
    56c0:	ef 54       	subi	r30, 0x4F	; 79
    56c2:	fa 4f       	sbci	r31, 0xFA	; 250
    56c4:	e1 81       	ldd	r30, Z+1	; 0x01

		// Set up previous channel number based on the requested channel order
		if (ch_num > 0)
    56c6:	20 91 e1 07 	lds	r18, 0x07E1
    56ca:	22 23       	and	r18, r18
    56cc:	39 f0       	breq	.+14     	; 0x56dc <__vector_3+0xce>
		{
			prevChannel = Config.ChannelOrder[ch_num-1];
    56ce:	a0 91 e1 07 	lds	r26, 0x07E1
    56d2:	b0 e0       	ldi	r27, 0x00	; 0
    56d4:	af 54       	subi	r26, 0x4F	; 79
    56d6:	ba 4f       	sbci	r27, 0xFA	; 250
    56d8:	2c 91       	ld	r18, X
    56da:	01 c0       	rjmp	.+2      	; 0x56de <__vector_3+0xd0>
		}
		else
		{
			prevChannel = 0;
    56dc:	20 e0       	ldi	r18, 0x00	; 0
		}

		// Measure the channel data only for the first MAX_CPPM_CHANNELS (currently 8)
		// Prevent code from over-running RxChannelStart[]
        if (ch_num < MAX_CPPM_CHANNELS)
    56de:	30 91 e1 07 	lds	r19, 0x07E1
    56e2:	38 30       	cpi	r19, 0x08	; 8
    56e4:	38 f4       	brcc	.+14     	; 0x56f4 <__vector_3+0xe6>
		{
            RxChannelStart[curChannel] = tCount;
    56e6:	f0 e0       	ldi	r31, 0x00	; 0
    56e8:	ee 0f       	add	r30, r30
    56ea:	ff 1f       	adc	r31, r31
    56ec:	e1 53       	subi	r30, 0x31	; 49
    56ee:	f8 4f       	sbci	r31, 0xF8	; 248
    56f0:	91 83       	std	Z+1, r25	; 0x01
    56f2:	80 83       	st	Z, r24
		}

		// When ch_num = 0, the first channel has not yet been measured.
		// That only occurs at the second pulse. Prevent code from over-running RxChannel[]
        if ((ch_num > 0) && (ch_num <= MAX_CPPM_CHANNELS))
    56f4:	30 91 e1 07 	lds	r19, 0x07E1
    56f8:	33 23       	and	r19, r19
    56fa:	99 f0       	breq	.+38     	; 0x5722 <__vector_3+0x114>
    56fc:	30 91 e1 07 	lds	r19, 0x07E1
    5700:	39 30       	cpi	r19, 0x09	; 9
    5702:	78 f4       	brcc	.+30     	; 0x5722 <__vector_3+0x114>
        {
		   RxChannel[prevChannel] = tCount - RxChannelStart[prevChannel];
    5704:	30 e0       	ldi	r19, 0x00	; 0
    5706:	22 0f       	add	r18, r18
    5708:	33 1f       	adc	r19, r19
    570a:	f9 01       	movw	r30, r18
    570c:	e1 53       	subi	r30, 0x31	; 49
    570e:	f8 4f       	sbci	r31, 0xF8	; 248
    5710:	40 81       	ld	r20, Z
    5712:	51 81       	ldd	r21, Z+1	; 0x01
    5714:	84 1b       	sub	r24, r20
    5716:	95 0b       	sbc	r25, r21
    5718:	f9 01       	movw	r30, r18
    571a:	e6 54       	subi	r30, 0x46	; 70
    571c:	f8 4f       	sbci	r31, 0xF8	; 248
    571e:	91 83       	std	Z+1, r25	; 0x01
    5720:	80 83       	st	Z, r24
		}

        // Increment to the next channel
		ch_num++;
    5722:	80 91 e1 07 	lds	r24, 0x07E1
    5726:	8f 5f       	subi	r24, 0xFF	; 255
    5728:	80 93 e1 07 	sts	0x07E1, r24

		// Work out the highest channel number automatically.
		// Update the maximum channel seen so far.
		if (ch_num > max_chan) 
    572c:	90 91 e1 07 	lds	r25, 0x07E1
    5730:	80 91 cb 07 	lds	r24, 0x07CB
    5734:	89 17       	cp	r24, r25
    5736:	28 f4       	brcc	.+10     	; 0x5742 <__vector_3+0x134>
		{
			max_chan = ch_num;					// Update max channel number
    5738:	80 91 e1 07 	lds	r24, 0x07E1
    573c:	80 93 cb 07 	sts	0x07CB, r24
    5740:	09 c0       	rjmp	.+18     	; 0x5754 <__vector_3+0x146>
		}
		// If the current channel is the highest channel, CPPM is complete
		else if (ch_num == max_chan)
    5742:	90 91 e1 07 	lds	r25, 0x07E1
    5746:	80 91 cb 07 	lds	r24, 0x07CB
    574a:	98 13       	cpse	r25, r24
    574c:	03 c0       	rjmp	.+6      	; 0x5754 <__vector_3+0x146>
		{
			Interrupted = true;					// Signal that interrupt block has finished
    574e:	81 e0       	ldi	r24, 0x01	; 1
    5750:	80 93 ca 07 	sts	0x07CA, r24
		}
	
		// If the signal is ever lost, reset measured max channel number
		// and force a recalculation
		if (Overdue)
    5754:	80 91 19 05 	lds	r24, 0x0519
    5758:	88 23       	and	r24, r24
    575a:	21 f0       	breq	.+8      	; 0x5764 <__vector_3+0x156>
		{
			max_chan = 0;
    575c:	10 92 cb 07 	sts	0x07CB, r1
			Overdue = false;
    5760:	10 92 19 05 	sts	0x0519, r1
		}
	}
} // ISR(INT2_vect)
    5764:	ff 91       	pop	r31
    5766:	ef 91       	pop	r30
    5768:	bf 91       	pop	r27
    576a:	af 91       	pop	r26
    576c:	9f 91       	pop	r25
    576e:	8f 91       	pop	r24
    5770:	5f 91       	pop	r21
    5772:	4f 91       	pop	r20
    5774:	3f 91       	pop	r19
    5776:	2f 91       	pop	r18
    5778:	0f 90       	pop	r0
    577a:	0f be       	out	0x3f, r0	; 63
    577c:	0f 90       	pop	r0
    577e:	1f 90       	pop	r1
    5780:	18 95       	reti

00005782 <TIM16_ReadTCNT1>:
{
	uint8_t sreg;
	uint16_t i;
	
	/* Save global interrupt flag */
	sreg = SREG;
    5782:	2f b7       	in	r18, 0x3f	; 63
	
	/* Disable interrupts */
	cli();
    5784:	f8 94       	cli
	
	/* Read TCNTn into i */
	i = TCNT1;
    5786:	80 91 84 00 	lds	r24, 0x0084
    578a:	90 91 85 00 	lds	r25, 0x0085
	
	/* Restore global interrupt flag */
	SREG = sreg;
    578e:	2f bf       	out	0x3f, r18	; 63
	return i;
}
    5790:	08 95       	ret

00005792 <__vector_20>:
//************************************************************
//* Serial receive interrupt
//************************************************************

ISR(USART0_RX_vect)
{
    5792:	1f 92       	push	r1
    5794:	0f 92       	push	r0
    5796:	0f b6       	in	r0, 0x3f	; 63
    5798:	0f 92       	push	r0
    579a:	11 24       	eor	r1, r1
    579c:	2f 93       	push	r18
    579e:	3f 93       	push	r19
    57a0:	4f 93       	push	r20
    57a2:	5f 93       	push	r21
    57a4:	6f 93       	push	r22
    57a6:	7f 93       	push	r23
    57a8:	8f 93       	push	r24
    57aa:	9f 93       	push	r25
    57ac:	af 93       	push	r26
    57ae:	bf 93       	push	r27
    57b0:	cf 93       	push	r28
    57b2:	ef 93       	push	r30
    57b4:	ff 93       	push	r31
	//************************************************************
	//* Common entry code
	//************************************************************

	// Read byte first
	temp = UDR0;
    57b6:	c0 91 c6 00 	lds	r28, 0x00C6

	// Save current time stamp
	Save_TCNT1 = TIM16_ReadTCNT1();
    57ba:	0e 94 c1 2b 	call	0x5782	; 0x5782 <TIM16_ReadTCNT1>
	
	// Work out interval properly
	// Note that CurrentPeriod cannot be larger than 26.2ms
	
	//CurrentPeriod = Save_TCNT1 - PPMSyncStart;
	if (Save_TCNT1 < PPMSyncStart)
    57be:	20 91 e2 07 	lds	r18, 0x07E2
    57c2:	30 91 e3 07 	lds	r19, 0x07E3
	{
		CurrentPeriod = (65536 - PPMSyncStart + Save_TCNT1);
	}
	else
	{
		CurrentPeriod = (Save_TCNT1 - PPMSyncStart);
    57c6:	20 91 e2 07 	lds	r18, 0x07E2
    57ca:	30 91 e3 07 	lds	r19, 0x07E3
    57ce:	ac 01       	movw	r20, r24
    57d0:	42 1b       	sub	r20, r18
    57d2:	53 0b       	sbc	r21, r19
    57d4:	9a 01       	movw	r18, r20
	}

	// Handle start of new packet
	if (CurrentPeriod > PACKET_TIMER) // 5.0ms
    57d6:	25 3c       	cpi	r18, 0xC5	; 197
    57d8:	59 e0       	ldi	r21, 0x09	; 9
    57da:	35 07       	cpc	r19, r21
    57dc:	90 f0       	brcs	.+36     	; 0x5802 <__vector_20+0x70>
	{
		// Reset variables
		rcindex = 0;
    57de:	10 92 b9 07 	sts	0x07B9, r1
		bytecount = 0;
    57e2:	10 92 cc 07 	sts	0x07CC, r1
		ch_num = 0;
    57e6:	10 92 e1 07 	sts	0x07E1, r1
		checksum = 0;
    57ea:	10 92 e7 07 	sts	0x07E7, r1
    57ee:	10 92 e6 07 	sts	0x07E6, r1
		chanmask16 = 0;
    57f2:	10 92 e0 07 	sts	0x07E0, r1
    57f6:	10 92 df 07 	sts	0x07DF, r1

		// Save frame rate to global
		FrameRate = CurrentPeriod;
    57fa:	30 93 e9 07 	sts	0x07E9, r19
    57fe:	20 93 e8 07 	sts	0x07E8, r18
	}

	// Timestamp this interrupt
	PPMSyncStart = Save_TCNT1;
    5802:	90 93 e3 07 	sts	0x07E3, r25
    5806:	80 93 e2 07 	sts	0x07E2, r24
	
	// Put received byte in buffer if space available
	if (rcindex < SBUFFER_SIZE)
    580a:	80 91 b9 07 	lds	r24, 0x07B9
    580e:	89 31       	cpi	r24, 0x19	; 25
    5810:	50 f4       	brcc	.+20     	; 0x5826 <__vector_20+0x94>
	{
		sBuffer[rcindex++] = temp;			
    5812:	e0 91 b9 07 	lds	r30, 0x07B9
    5816:	81 e0       	ldi	r24, 0x01	; 1
    5818:	8e 0f       	add	r24, r30
    581a:	80 93 b9 07 	sts	0x07B9, r24
    581e:	f0 e0       	ldi	r31, 0x00	; 0
    5820:	ee 5b       	subi	r30, 0xBE	; 190
    5822:	fa 4f       	sbci	r31, 0xFA	; 250
    5824:	c0 83       	st	Z, r28
	//* 	bit0 = n/a
	//* 24 endbyte = 00000000b (SBUS) or (data % 0xCF) (SBUS2)
	//*
	//************************************************************

	if (Config.RxMode == SBUS)
    5826:	80 91 da 05 	lds	r24, 0x05DA
    582a:	82 30       	cpi	r24, 0x02	; 2
    582c:	09 f0       	breq	.+2      	; 0x5830 <__vector_20+0x9e>
    582e:	90 c0       	rjmp	.+288    	; 0x5950 <__vector_20+0x1be>
	{
		// Flag that packet has completed
		if ((bytecount == 24) && ((temp == 0x00) || ((temp % 0xCF) == 0x04)))
    5830:	80 91 cc 07 	lds	r24, 0x07CC
    5834:	88 31       	cpi	r24, 0x18	; 24
    5836:	09 f0       	breq	.+2      	; 0x583a <__vector_20+0xa8>
    5838:	fc c0       	rjmp	.+504    	; 0x5a32 <__vector_20+0x2a0>
    583a:	cc 23       	and	r28, r28
    583c:	59 f0       	breq	.+22     	; 0x5854 <__vector_20+0xc2>
    583e:	81 e0       	ldi	r24, 0x01	; 1
    5840:	cf 3c       	cpi	r28, 0xCF	; 207
    5842:	08 f4       	brcc	.+2      	; 0x5846 <__vector_20+0xb4>
    5844:	80 e0       	ldi	r24, 0x00	; 0
    5846:	91 e3       	ldi	r25, 0x31	; 49
    5848:	89 9f       	mul	r24, r25
    584a:	c0 0d       	add	r28, r0
    584c:	11 24       	eor	r1, r1
    584e:	c4 30       	cpi	r28, 0x04	; 4
    5850:	09 f0       	breq	.+2      	; 0x5854 <__vector_20+0xc2>
    5852:	ef c0       	rjmp	.+478    	; 0x5a32 <__vector_20+0x2a0>
		{
			// If frame lost, ignore packet
			if ((sBuffer[23] & 0x20) == 0)
    5854:	80 91 59 05 	lds	r24, 0x0559
    5858:	85 fd       	sbrc	r24, 5
    585a:	eb c0       	rjmp	.+470    	; 0x5a32 <__vector_20+0x2a0>
			{
				// RC sync established
				Interrupted = true;
    585c:	81 e0       	ldi	r24, 0x01	; 1
    585e:	80 93 ca 07 	sts	0x07CA, r24
    5862:	80 e0       	ldi	r24, 0x00	; 0
    5864:	90 e0       	ldi	r25, 0x00	; 0

				// Clear channel data
				for (j = 0; j < MAX_RC_CHANNELS; j++)
				{
					RxChannel[j] = 0;
    5866:	fc 01       	movw	r30, r24
    5868:	ee 0f       	add	r30, r30
    586a:	ff 1f       	adc	r31, r31
    586c:	e6 54       	subi	r30, 0x46	; 70
    586e:	f8 4f       	sbci	r31, 0xF8	; 248
    5870:	11 82       	std	Z+1, r1	; 0x01
    5872:	10 82       	st	Z, r1
    5874:	01 96       	adiw	r24, 0x01	; 1
			{
				// RC sync established
				Interrupted = true;

				// Clear channel data
				for (j = 0; j < MAX_RC_CHANNELS; j++)
    5876:	88 30       	cpi	r24, 0x08	; 8
    5878:	91 05       	cpc	r25, r1
    587a:	a9 f7       	brne	.-22     	; 0x5866 <__vector_20+0xd4>
    587c:	a8 e5       	ldi	r26, 0x58	; 88
    587e:	70 e0       	ldi	r23, 0x00	; 0
    5880:	c0 e0       	ldi	r28, 0x00	; 0
    5882:	60 e0       	ldi	r22, 0x00	; 0
    5884:	b1 e0       	ldi	r27, 0x01	; 1
                for (j = 0; j < 88; j++)
                {
                    if (sBuffer[sindex] & (1<<chan_mask))
                    {
						// Place the RC data into the correct channel order for the transmitted system
						RxChannel[Config.ChannelOrder[chan_shift]] |= (1<<data_mask);
    5886:	21 e0       	ldi	r18, 0x01	; 1
    5888:	30 e0       	ldi	r19, 0x00	; 0

                // Deconstruct S-Bus data
				// 8 channels * 11 bits = 88 bits
                for (j = 0; j < 88; j++)
                {
                    if (sBuffer[sindex] & (1<<chan_mask))
    588a:	eb 2f       	mov	r30, r27
    588c:	f0 e0       	ldi	r31, 0x00	; 0
    588e:	ee 5b       	subi	r30, 0xBE	; 190
    5890:	fa 4f       	sbci	r31, 0xFA	; 250
    5892:	80 81       	ld	r24, Z
    5894:	90 e0       	ldi	r25, 0x00	; 0
    5896:	06 2e       	mov	r0, r22
    5898:	02 c0       	rjmp	.+4      	; 0x589e <__vector_20+0x10c>
    589a:	95 95       	asr	r25
    589c:	87 95       	ror	r24
    589e:	0a 94       	dec	r0
    58a0:	e2 f7       	brpl	.-8      	; 0x589a <__vector_20+0x108>
    58a2:	80 ff       	sbrs	r24, 0
    58a4:	17 c0       	rjmp	.+46     	; 0x58d4 <__vector_20+0x142>
                    {
						// Place the RC data into the correct channel order for the transmitted system
						RxChannel[Config.ChannelOrder[chan_shift]] |= (1<<data_mask);
    58a6:	ec 2f       	mov	r30, r28
    58a8:	f0 e0       	ldi	r31, 0x00	; 0
    58aa:	ef 54       	subi	r30, 0x4F	; 79
    58ac:	fa 4f       	sbci	r31, 0xFA	; 250
    58ae:	e1 81       	ldd	r30, Z+1	; 0x01
    58b0:	f0 e0       	ldi	r31, 0x00	; 0
    58b2:	ee 0f       	add	r30, r30
    58b4:	ff 1f       	adc	r31, r31
    58b6:	e6 54       	subi	r30, 0x46	; 70
    58b8:	f8 4f       	sbci	r31, 0xF8	; 248
    58ba:	80 81       	ld	r24, Z
    58bc:	91 81       	ldd	r25, Z+1	; 0x01
    58be:	a9 01       	movw	r20, r18
    58c0:	07 2e       	mov	r0, r23
    58c2:	02 c0       	rjmp	.+4      	; 0x58c8 <__vector_20+0x136>
    58c4:	44 0f       	add	r20, r20
    58c6:	55 1f       	adc	r21, r21
    58c8:	0a 94       	dec	r0
    58ca:	e2 f7       	brpl	.-8      	; 0x58c4 <__vector_20+0x132>
    58cc:	84 2b       	or	r24, r20
    58ce:	95 2b       	or	r25, r21
    58d0:	91 83       	std	Z+1, r25	; 0x01
    58d2:	80 83       	st	Z, r24
                    }

                    chan_mask++;
    58d4:	6f 5f       	subi	r22, 0xFF	; 255
                    data_mask++;
    58d6:	7f 5f       	subi	r23, 0xFF	; 255

                    // If we have done 8 bits, move to next byte in buffer
					if (chan_mask == 8)
    58d8:	68 30       	cpi	r22, 0x08	; 8
    58da:	11 f4       	brne	.+4      	; 0x58e0 <__vector_20+0x14e>
                    {
                        chan_mask =0;
                        sindex++;
    58dc:	bf 5f       	subi	r27, 0xFF	; 255
                    data_mask++;

                    // If we have done 8 bits, move to next byte in buffer
					if (chan_mask == 8)
                    {
                        chan_mask =0;
    58de:	60 e0       	ldi	r22, 0x00	; 0
                        sindex++;
                    }

                    // If we have reconstructed all 11 bits of one channel's data (2047)
					// increment the channel number
					if (data_mask == 11)
    58e0:	7b 30       	cpi	r23, 0x0B	; 11
    58e2:	11 f4       	brne	.+4      	; 0x58e8 <__vector_20+0x156>
                    {
                        data_mask =0;
                        chan_shift++;
    58e4:	cf 5f       	subi	r28, 0xFF	; 255

                    // If we have reconstructed all 11 bits of one channel's data (2047)
					// increment the channel number
					if (data_mask == 11)
                    {
                        data_mask =0;
    58e6:	70 e0       	ldi	r23, 0x00	; 0
    58e8:	a1 50       	subi	r26, 0x01	; 1
				// Start from second byte
				sindex = 1;

                // Deconstruct S-Bus data
				// 8 channels * 11 bits = 88 bits
                for (j = 0; j < 88; j++)
    58ea:	79 f6       	brne	.-98     	; 0x588a <__vector_20+0xf8>
    58ec:	40 e0       	ldi	r20, 0x00	; 0
    58ee:	50 e0       	ldi	r21, 0x00	; 0

				// Convert to  OpenAero2 values (0~2047 -> 2500~4999)
				for (j = 0; j < MAX_RC_CHANNELS; j++)
				{
					// Subtract weird-ass Futaba offset
					itemp16= RxChannel[j] - 1024;	
    58f0:	fa 01       	movw	r30, r20
    58f2:	ee 0f       	add	r30, r30
    58f4:	ff 1f       	adc	r31, r31
    58f6:	e6 54       	subi	r30, 0x46	; 70
    58f8:	f8 4f       	sbci	r31, 0xF8	; 248
    58fa:	20 81       	ld	r18, Z
    58fc:	31 81       	ldd	r19, Z+1	; 0x01
    58fe:	34 50       	subi	r19, 0x04	; 4
					
					// Expand into OpenAero2 units							
					itemp16 = itemp16 + (itemp16 >> 2) + (itemp16 >> 3) + (itemp16 >> 4) + (itemp16 >> 5); 	// Quick multiply by 1.469 :)
    5900:	c9 01       	movw	r24, r18
    5902:	95 95       	asr	r25
    5904:	87 95       	ror	r24
    5906:	95 95       	asr	r25
    5908:	87 95       	ror	r24
    590a:	82 0f       	add	r24, r18
    590c:	93 1f       	adc	r25, r19
    590e:	b9 01       	movw	r22, r18
    5910:	a3 e0       	ldi	r26, 0x03	; 3
    5912:	75 95       	asr	r23
    5914:	67 95       	ror	r22
    5916:	aa 95       	dec	r26
    5918:	e1 f7       	brne	.-8      	; 0x5912 <__vector_20+0x180>
    591a:	86 0f       	add	r24, r22
    591c:	97 1f       	adc	r25, r23
    591e:	b9 01       	movw	r22, r18
    5920:	b4 e0       	ldi	r27, 0x04	; 4
    5922:	75 95       	asr	r23
    5924:	67 95       	ror	r22
    5926:	ba 95       	dec	r27
    5928:	e1 f7       	brne	.-8      	; 0x5922 <__vector_20+0x190>
    592a:	86 0f       	add	r24, r22
    592c:	97 1f       	adc	r25, r23
    592e:	c5 e0       	ldi	r28, 0x05	; 5
    5930:	35 95       	asr	r19
    5932:	27 95       	ror	r18
    5934:	ca 95       	dec	r28
    5936:	e1 f7       	brne	.-8      	; 0x5930 <__vector_20+0x19e>
    5938:	82 0f       	add	r24, r18
    593a:	93 1f       	adc	r25, r19
					//itemp16 = itemp16 + (itemp16 >> 1); // Quicker mulitply by 1.5

					// Add back in OpenAero2 offset
					RxChannel[j] = itemp16 + 3750;				
    593c:	8a 55       	subi	r24, 0x5A	; 90
    593e:	91 4f       	sbci	r25, 0xF1	; 241
    5940:	91 83       	std	Z+1, r25	; 0x01
    5942:	80 83       	st	Z, r24
    5944:	4f 5f       	subi	r20, 0xFF	; 255
    5946:	5f 4f       	sbci	r21, 0xFF	; 255
                        chan_shift++;
                    }
                }

				// Convert to  OpenAero2 values (0~2047 -> 2500~4999)
				for (j = 0; j < MAX_RC_CHANNELS; j++)
    5948:	48 30       	cpi	r20, 0x08	; 8
    594a:	51 05       	cpc	r21, r1
    594c:	89 f6       	brne	.-94     	; 0x58f0 <__vector_20+0x15e>
    594e:	71 c0       	rjmp	.+226    	; 0x5a32 <__vector_20+0x2a0>
	//* 0 = 750us, 1023/2047 = 2250us
	//*
	//************************************************************

	// Handle Spektrum format
	if (Config.RxMode == SPEKTRUM)
    5950:	83 30       	cpi	r24, 0x03	; 3
    5952:	09 f0       	breq	.+2      	; 0x5956 <__vector_20+0x1c4>
    5954:	6e c0       	rjmp	.+220    	; 0x5a32 <__vector_20+0x2a0>
	{
		// Process data when all packets received
		if (bytecount >= 15)
    5956:	80 91 cc 07 	lds	r24, 0x07CC
    595a:	8f 30       	cpi	r24, 0x0F	; 15
    595c:	08 f4       	brcc	.+2      	; 0x5960 <__vector_20+0x1ce>
    595e:	69 c0       	rjmp	.+210    	; 0x5a32 <__vector_20+0x2a0>
		{
			// Ahem... ah... just stick the last byte into the buffer manually...(hides)
			sBuffer[15] = temp;
    5960:	c0 93 51 05 	sts	0x0551, r28

			// Set start of channel data per format
			sindex = 2; // Channel data from byte 3

			// Work out if this is 10 or 11 bit data
			if (sBuffer[1] & 0x10) 	// 0 for 10 bit resolution 1 for 11 bit resolution
    5964:	80 91 43 05 	lds	r24, 0x0543
    5968:	84 ff       	sbrs	r24, 4
    596a:	04 c0       	rjmp	.+8      	; 0x5974 <__vector_20+0x1e2>
			{
				chan_mask = 0x78;	// 11 bit (2048)
				data_mask = 0x07;
    596c:	c7 e0       	ldi	r28, 0x07	; 7
				chan_shift = 0x03;
    596e:	63 e0       	ldi	r22, 0x03	; 3
			sindex = 2; // Channel data from byte 3

			// Work out if this is 10 or 11 bit data
			if (sBuffer[1] & 0x10) 	// 0 for 10 bit resolution 1 for 11 bit resolution
			{
				chan_mask = 0x78;	// 11 bit (2048)
    5970:	78 e7       	ldi	r23, 0x78	; 120
    5972:	03 c0       	rjmp	.+6      	; 0x597a <__vector_20+0x1e8>
				chan_shift = 0x03;
			}
			else
			{
				chan_mask = 0x3C;	// 10 bit (1024)
				data_mask = 0x03;
    5974:	c3 e0       	ldi	r28, 0x03	; 3
				chan_shift = 0x02;
    5976:	62 e0       	ldi	r22, 0x02	; 2
				data_mask = 0x07;
				chan_shift = 0x03;
			}
			else
			{
				chan_mask = 0x3C;	// 10 bit (1024)
    5978:	7c e3       	ldi	r23, 0x3C	; 60
    597a:	e5 e4       	ldi	r30, 0x45	; 69
    597c:	f5 e0       	ldi	r31, 0x05	; 5
    597e:	df 01       	movw	r26, r30
    5980:	11 97       	sbiw	r26, 0x01	; 1
			// Work out which channel the data is intended for from the channel number data
			// Channels can also be in the second packet. Spektrum has 7 channels per packet.
			for (j = 0; j < 7; j++)
			{
				// Extract channel number
				ch_num = (sBuffer[sindex] & chan_mask) >> chan_shift;
    5982:	2c 91       	ld	r18, X
    5984:	82 2f       	mov	r24, r18
    5986:	87 23       	and	r24, r23
    5988:	90 e0       	ldi	r25, 0x00	; 0
    598a:	06 2e       	mov	r0, r22
    598c:	02 c0       	rjmp	.+4      	; 0x5992 <__vector_20+0x200>
    598e:	95 95       	asr	r25
    5990:	87 95       	ror	r24
    5992:	0a 94       	dec	r0
    5994:	e2 f7       	brpl	.-8      	; 0x598e <__vector_20+0x1fc>
    5996:	80 93 e1 07 	sts	0x07E1, r24

				// Reconstruct channel data
				temp16 = ((sBuffer[sindex] & data_mask) << 8) + sBuffer[sindex + 1];
    599a:	80 81       	ld	r24, Z

				// Expand to OpenAero2 units if a valid channel
				// Blank channels have the channel number of 16
				if (ch_num < MAX_RC_CHANNELS)
    599c:	90 91 e1 07 	lds	r25, 0x07E1
    59a0:	98 30       	cpi	r25, 0x08	; 8
    59a2:	f0 f5       	brcc	.+124    	; 0x5a20 <__vector_20+0x28e>
			{
				// Extract channel number
				ch_num = (sBuffer[sindex] & chan_mask) >> chan_shift;

				// Reconstruct channel data
				temp16 = ((sBuffer[sindex] & data_mask) << 8) + sBuffer[sindex + 1];
    59a4:	2c 23       	and	r18, r28
    59a6:	30 e0       	ldi	r19, 0x00	; 0
    59a8:	32 2f       	mov	r19, r18
    59aa:	22 27       	eor	r18, r18
    59ac:	28 0f       	add	r18, r24
    59ae:	31 1d       	adc	r19, r1
				// Expand to OpenAero2 units if a valid channel
				// Blank channels have the channel number of 16
				if (ch_num < MAX_RC_CHANNELS)
				{
					// Subtract Spektrum center offset
					if (chan_shift == 0x03) // 11-bit
    59b0:	63 30       	cpi	r22, 0x03	; 3
    59b2:	11 f4       	brne	.+4      	; 0x59b8 <__vector_20+0x226>
					{
						itemp16 = temp16 - 1024;
    59b4:	34 50       	subi	r19, 0x04	; 4
    59b6:	01 c0       	rjmp	.+2      	; 0x59ba <__vector_20+0x228>
					}
					else
					{
						itemp16 = temp16 - 512;	
    59b8:	32 50       	subi	r19, 0x02	; 2
					}					

					// Quick multiply by 2.93
					itemp16 = (itemp16 << 1) + (itemp16 >> 1) + (itemp16 >> 2) + (itemp16 >> 3) + (itemp16 >> 4); 
    59ba:	c9 01       	movw	r24, r18
    59bc:	88 0f       	add	r24, r24
    59be:	99 1f       	adc	r25, r25
    59c0:	a9 01       	movw	r20, r18
    59c2:	55 95       	asr	r21
    59c4:	47 95       	ror	r20
    59c6:	84 0f       	add	r24, r20
    59c8:	95 1f       	adc	r25, r21
    59ca:	a9 01       	movw	r20, r18
    59cc:	55 95       	asr	r21
    59ce:	47 95       	ror	r20
    59d0:	55 95       	asr	r21
    59d2:	47 95       	ror	r20
    59d4:	84 0f       	add	r24, r20
    59d6:	95 1f       	adc	r25, r21
    59d8:	a9 01       	movw	r20, r18
    59da:	a3 e0       	ldi	r26, 0x03	; 3
    59dc:	55 95       	asr	r21
    59de:	47 95       	ror	r20
    59e0:	aa 95       	dec	r26
    59e2:	e1 f7       	brne	.-8      	; 0x59dc <__vector_20+0x24a>
    59e4:	84 0f       	add	r24, r20
    59e6:	95 1f       	adc	r25, r21
    59e8:	b4 e0       	ldi	r27, 0x04	; 4
    59ea:	35 95       	asr	r19
    59ec:	27 95       	ror	r18
    59ee:	ba 95       	dec	r27
    59f0:	e1 f7       	brne	.-8      	; 0x59ea <__vector_20+0x258>
    59f2:	82 0f       	add	r24, r18
    59f4:	93 1f       	adc	r25, r19

					if (chan_shift == 0x03) // 11-bit
    59f6:	63 30       	cpi	r22, 0x03	; 3
    59f8:	11 f4       	brne	.+4      	; 0x59fe <__vector_20+0x26c>
					{
						// Divide in case of 11-bit value
						itemp16 = itemp16 >> 1;								
    59fa:	95 95       	asr	r25
    59fc:	87 95       	ror	r24
					}

					// Add back in OpenAero2 offset
					itemp16 += 3750;										

					RxChannel[Config.ChannelOrder[ch_num]] = itemp16;
    59fe:	a0 91 e1 07 	lds	r26, 0x07E1
    5a02:	b0 e0       	ldi	r27, 0x00	; 0
    5a04:	af 54       	subi	r26, 0x4F	; 79
    5a06:	ba 4f       	sbci	r27, 0xFA	; 250
    5a08:	11 96       	adiw	r26, 0x01	; 1
    5a0a:	ac 91       	ld	r26, X
    5a0c:	b0 e0       	ldi	r27, 0x00	; 0
						// Divide in case of 11-bit value
						itemp16 = itemp16 >> 1;								
					}

					// Add back in OpenAero2 offset
					itemp16 += 3750;										
    5a0e:	8a 55       	subi	r24, 0x5A	; 90
    5a10:	91 4f       	sbci	r25, 0xF1	; 241

					RxChannel[Config.ChannelOrder[ch_num]] = itemp16;
    5a12:	aa 0f       	add	r26, r26
    5a14:	bb 1f       	adc	r27, r27
    5a16:	a6 54       	subi	r26, 0x46	; 70
    5a18:	b8 4f       	sbci	r27, 0xF8	; 248
    5a1a:	11 96       	adiw	r26, 0x01	; 1
    5a1c:	9c 93       	st	X, r25
    5a1e:	8e 93       	st	-X, r24
    5a20:	32 96       	adiw	r30, 0x02	; 2
				chan_shift = 0x02;
			}

			// Work out which channel the data is intended for from the channel number data
			// Channels can also be in the second packet. Spektrum has 7 channels per packet.
			for (j = 0; j < 7; j++)
    5a22:	45 e0       	ldi	r20, 0x05	; 5
    5a24:	e3 35       	cpi	r30, 0x53	; 83
    5a26:	f4 07       	cpc	r31, r20
    5a28:	09 f0       	breq	.+2      	; 0x5a2c <__vector_20+0x29a>
    5a2a:	a9 cf       	rjmp	.-174    	; 0x597e <__vector_20+0x1ec>
				sindex += 2;

			} // For each pair of bytes
			
			// RC sync established
			Interrupted = true;
    5a2c:	81 e0       	ldi	r24, 0x01	; 1
    5a2e:	80 93 ca 07 	sts	0x07CA, r24
	//************************************************************
	//* Common exit code
	//************************************************************

	// Increment byte count
	bytecount++;
    5a32:	80 91 cc 07 	lds	r24, 0x07CC
    5a36:	8f 5f       	subi	r24, 0xFF	; 255
    5a38:	80 93 cc 07 	sts	0x07CC, r24
}
    5a3c:	ff 91       	pop	r31
    5a3e:	ef 91       	pop	r30
    5a40:	cf 91       	pop	r28
    5a42:	bf 91       	pop	r27
    5a44:	af 91       	pop	r26
    5a46:	9f 91       	pop	r25
    5a48:	8f 91       	pop	r24
    5a4a:	7f 91       	pop	r23
    5a4c:	6f 91       	pop	r22
    5a4e:	5f 91       	pop	r21
    5a50:	4f 91       	pop	r20
    5a52:	3f 91       	pop	r19
    5a54:	2f 91       	pop	r18
    5a56:	0f 90       	pop	r0
    5a58:	0f be       	out	0x3f, r0	; 63
    5a5a:	0f 90       	pop	r0
    5a5c:	1f 90       	pop	r1
    5a5e:	18 95       	reti

00005a60 <Disable_RC_Interrupts>:
// Disable RC interrupts as required
//***********************************************************

void Disable_RC_Interrupts(void)
{
	cli();	// Disable interrupts
    5a60:	f8 94       	cli

	// Disable PWM input interrupts
	PCMSK1 = 0;							// Disable AUX
    5a62:	10 92 6c 00 	sts	0x006C, r1
	PCMSK3 = 0;							// Disable THR
    5a66:	10 92 73 00 	sts	0x0073, r1
	EIMSK  = 0;							// Disable INT0, 1 and 2
    5a6a:	1d ba       	out	0x1d, r1	; 29

	// Disable receiver (flushes buffer)
	UCSR0B &= ~(1 << RXEN0);	
    5a6c:	e1 ec       	ldi	r30, 0xC1	; 193
    5a6e:	f0 e0       	ldi	r31, 0x00	; 0
    5a70:	80 81       	ld	r24, Z
    5a72:	8f 7e       	andi	r24, 0xEF	; 239
    5a74:	80 83       	st	Z, r24

	// Disable serial interrupt	
	UCSR0B &= ~(1 << RXCIE0);
    5a76:	80 81       	ld	r24, Z
    5a78:	8f 77       	andi	r24, 0x7F	; 127
    5a7a:	80 83       	st	Z, r24
	
	// Clear interrupt flags
	PCIFR	= 0x0F;						// Clear PCIF0~PCIF3 interrupt flags
    5a7c:	8f e0       	ldi	r24, 0x0F	; 15
    5a7e:	8b bb       	out	0x1b, r24	; 27
	EIFR	= 0x00; 					// Clear INT0~INT2 interrupt flags (Elevator, Aileron, Rudder/CPPM)
    5a80:	1c ba       	out	0x1c, r1	; 28
	
	sei(); // Re-enable interrupts
    5a82:	78 94       	sei
    5a84:	08 95       	ret

00005a86 <init_int>:
// Reconfigure RC interrupts
//***********************************************************

void init_int(void)
{
	cli();	// Disable interrupts
    5a86:	f8 94       	cli
	
	switch (Config.RxMode)
    5a88:	80 91 da 05 	lds	r24, 0x05DA
    5a8c:	81 30       	cpi	r24, 0x01	; 1
    5a8e:	c9 f0       	breq	.+50     	; 0x5ac2 <init_int+0x3c>
    5a90:	44 f4       	brge	.+16     	; 0x5aa2 <init_int+0x1c>
    5a92:	81 11       	cpse	r24, r1
    5a94:	2c c0       	rjmp	.+88     	; 0x5aee <init_int+0x68>
	{
		case CPPM_MODE:
			PCMSK1 = 0;							// Disable AUX
    5a96:	10 92 6c 00 	sts	0x006C, r1
			PCMSK3 = 0;							// Disable THR
    5a9a:	10 92 73 00 	sts	0x0073, r1
			EIMSK = 0x04;						// Enable INT2 (Rudder/CPPM input)
    5a9e:	84 e0       	ldi	r24, 0x04	; 4
    5aa0:	1b c0       	rjmp	.+54     	; 0x5ad8 <init_int+0x52>

void init_int(void)
{
	cli();	// Disable interrupts
	
	switch (Config.RxMode)
    5aa2:	84 30       	cpi	r24, 0x04	; 4
    5aa4:	24 f5       	brge	.+72     	; 0x5aee <init_int+0x68>
			break;

		case SBUS:
		case SPEKTRUM:
			// Disable PWM input interrupts
			PCMSK1 = 0;							// Disable AUX
    5aa6:	10 92 6c 00 	sts	0x006C, r1
			PCMSK3 = 0;							// Disable THR
    5aaa:	10 92 73 00 	sts	0x0073, r1
			EIMSK  = 0;							// Disable INT0, 1 and 2 
    5aae:	1d ba       	out	0x1d, r1	; 29
			
			// Enable serial receiver and interrupts
			UCSR0B |= (1 << RXCIE0);			// Enable serial interrupt
    5ab0:	80 91 c1 00 	lds	r24, 0x00C1
    5ab4:	80 68       	ori	r24, 0x80	; 128
    5ab6:	80 93 c1 00 	sts	0x00C1, r24
			UCSR0B |= (1 << RXEN0);				// Enable receiver
    5aba:	80 91 c1 00 	lds	r24, 0x00C1
    5abe:	80 61       	ori	r24, 0x10	; 16
    5ac0:	14 c0       	rjmp	.+40     	; 0x5aea <init_int+0x64>
			UCSR0B &= ~(1 << RXCIE0);			// Disable serial interrupt
			UCSR0B &= ~(1 << RXEN0);			// Disable receiver and flush buffer
			break;

		case PWM:
			PCMSK1 |= (1 << PCINT8);			// PB0 (Aux pin change mask)
    5ac2:	80 91 6c 00 	lds	r24, 0x006C
    5ac6:	81 60       	ori	r24, 0x01	; 1
    5ac8:	80 93 6c 00 	sts	0x006C, r24
			PCMSK3 |= (1 << PCINT24);			// PD0 (Throttle pin change mask)
    5acc:	80 91 73 00 	lds	r24, 0x0073
    5ad0:	81 60       	ori	r24, 0x01	; 1
    5ad2:	80 93 73 00 	sts	0x0073, r24
			EIMSK  = 0x07;						// Enable INT0, 1 and 2 
    5ad6:	87 e0       	ldi	r24, 0x07	; 7
    5ad8:	8d bb       	out	0x1d, r24	; 29
			UCSR0B &= ~(1 << RXCIE0);			// Disable serial interrupt
    5ada:	80 91 c1 00 	lds	r24, 0x00C1
    5ade:	8f 77       	andi	r24, 0x7F	; 127
    5ae0:	80 93 c1 00 	sts	0x00C1, r24
			UCSR0B &= ~(1 << RXEN0);			// Disable receiver and flush buffer
    5ae4:	80 91 c1 00 	lds	r24, 0x00C1
    5ae8:	8f 7e       	andi	r24, 0xEF	; 239
			PCMSK3 = 0;							// Disable THR
			EIMSK  = 0;							// Disable INT0, 1 and 2 
			
			// Enable serial receiver and interrupts
			UCSR0B |= (1 << RXCIE0);			// Enable serial interrupt
			UCSR0B |= (1 << RXEN0);				// Enable receiver
    5aea:	80 93 c1 00 	sts	0x00C1, r24
		default:
			break;	
	}	

	// Clear interrupt flags
	PCIFR	= 0x0F;								// Clear PCIF0~PCIF3 interrupt flags
    5aee:	8f e0       	ldi	r24, 0x0F	; 15
    5af0:	8b bb       	out	0x1b, r24	; 27
	EIFR	= 0x00; 							// Clear INT0~INT2 interrupt flags (Elevator, Aileron, Rudder/CPPM)
    5af2:	1c ba       	out	0x1c, r1	; 28

	sei(); // Re-enable interrupts
    5af4:	78 94       	sei
    5af6:	08 95       	ret

00005af8 <print_menu_frame>:
// style = menu style (0 = main, 1 = sub)
//************************************************************
void print_menu_frame(uint8_t style)
{
	// Print bottom markers
	if (style == 0)
    5af8:	81 11       	cpse	r24, r1
    5afa:	27 c0       	rjmp	.+78     	; 0x5b4a <print_menu_frame+0x52>
	{
		LCD_Display_Text(12, (const unsigned char*)Wingdings, 0, 57); 	// Left
    5afc:	29 e3       	ldi	r18, 0x39	; 57
    5afe:	30 e0       	ldi	r19, 0x00	; 0
    5b00:	40 e0       	ldi	r20, 0x00	; 0
    5b02:	50 e0       	ldi	r21, 0x00	; 0
    5b04:	6f ed       	ldi	r22, 0xDF	; 223
    5b06:	70 e0       	ldi	r23, 0x00	; 0
    5b08:	8c e0       	ldi	r24, 0x0C	; 12
    5b0a:	90 e0       	ldi	r25, 0x00	; 0
    5b0c:	0e 94 ff 20 	call	0x41fe	; 0x41fe <LCD_Display_Text>
		LCD_Display_Text(10, (const unsigned char*)Wingdings, 38, 59); 	// Up
    5b10:	2b e3       	ldi	r18, 0x3B	; 59
    5b12:	30 e0       	ldi	r19, 0x00	; 0
    5b14:	46 e2       	ldi	r20, 0x26	; 38
    5b16:	50 e0       	ldi	r21, 0x00	; 0
    5b18:	6f ed       	ldi	r22, 0xDF	; 223
    5b1a:	70 e0       	ldi	r23, 0x00	; 0
    5b1c:	8a e0       	ldi	r24, 0x0A	; 10
    5b1e:	90 e0       	ldi	r25, 0x00	; 0
    5b20:	0e 94 ff 20 	call	0x41fe	; 0x41fe <LCD_Display_Text>
		LCD_Display_Text(9, (const unsigned char*)Wingdings, 80, 59); 	// Down
    5b24:	2b e3       	ldi	r18, 0x3B	; 59
    5b26:	30 e0       	ldi	r19, 0x00	; 0
    5b28:	40 e5       	ldi	r20, 0x50	; 80
    5b2a:	50 e0       	ldi	r21, 0x00	; 0
    5b2c:	6f ed       	ldi	r22, 0xDF	; 223
    5b2e:	70 e0       	ldi	r23, 0x00	; 0
    5b30:	89 e0       	ldi	r24, 0x09	; 9
    5b32:	90 e0       	ldi	r25, 0x00	; 0
    5b34:	0e 94 ff 20 	call	0x41fe	; 0x41fe <LCD_Display_Text>
		LCD_Display_Text(11, (const unsigned char*)Wingdings, 120, 57); // Right
    5b38:	29 e3       	ldi	r18, 0x39	; 57
    5b3a:	30 e0       	ldi	r19, 0x00	; 0
    5b3c:	48 e7       	ldi	r20, 0x78	; 120
    5b3e:	50 e0       	ldi	r21, 0x00	; 0
    5b40:	6f ed       	ldi	r22, 0xDF	; 223
    5b42:	70 e0       	ldi	r23, 0x00	; 0
    5b44:	8b e0       	ldi	r24, 0x0B	; 11
    5b46:	90 e0       	ldi	r25, 0x00	; 0
    5b48:	26 c0       	rjmp	.+76     	; 0x5b96 <print_menu_frame+0x9e>
	}
	else
	{
		LCD_Display_Text(16, (const unsigned char*)Verdana8, 0, 54); 	// Clear
    5b4a:	26 e3       	ldi	r18, 0x36	; 54
    5b4c:	30 e0       	ldi	r19, 0x00	; 0
    5b4e:	40 e0       	ldi	r20, 0x00	; 0
    5b50:	50 e0       	ldi	r21, 0x00	; 0
    5b52:	67 ef       	ldi	r22, 0xF7	; 247
    5b54:	79 e0       	ldi	r23, 0x09	; 9
    5b56:	80 e1       	ldi	r24, 0x10	; 16
    5b58:	90 e0       	ldi	r25, 0x00	; 0
    5b5a:	0e 94 ff 20 	call	0x41fe	; 0x41fe <LCD_Display_Text>
		LCD_Display_Text(10, (const unsigned char*)Wingdings, 38, 59);	// Up
    5b5e:	2b e3       	ldi	r18, 0x3B	; 59
    5b60:	30 e0       	ldi	r19, 0x00	; 0
    5b62:	46 e2       	ldi	r20, 0x26	; 38
    5b64:	50 e0       	ldi	r21, 0x00	; 0
    5b66:	6f ed       	ldi	r22, 0xDF	; 223
    5b68:	70 e0       	ldi	r23, 0x00	; 0
    5b6a:	8a e0       	ldi	r24, 0x0A	; 10
    5b6c:	90 e0       	ldi	r25, 0x00	; 0
    5b6e:	0e 94 ff 20 	call	0x41fe	; 0x41fe <LCD_Display_Text>
		LCD_Display_Text(9, (const unsigned char*)Wingdings, 80, 59);	// Down
    5b72:	2b e3       	ldi	r18, 0x3B	; 59
    5b74:	30 e0       	ldi	r19, 0x00	; 0
    5b76:	40 e5       	ldi	r20, 0x50	; 80
    5b78:	50 e0       	ldi	r21, 0x00	; 0
    5b7a:	6f ed       	ldi	r22, 0xDF	; 223
    5b7c:	70 e0       	ldi	r23, 0x00	; 0
    5b7e:	89 e0       	ldi	r24, 0x09	; 9
    5b80:	90 e0       	ldi	r25, 0x00	; 0
    5b82:	0e 94 ff 20 	call	0x41fe	; 0x41fe <LCD_Display_Text>
		LCD_Display_Text(17, (const unsigned char*)Verdana8, 103, 54);	// Save
    5b86:	26 e3       	ldi	r18, 0x36	; 54
    5b88:	30 e0       	ldi	r19, 0x00	; 0
    5b8a:	47 e6       	ldi	r20, 0x67	; 103
    5b8c:	50 e0       	ldi	r21, 0x00	; 0
    5b8e:	67 ef       	ldi	r22, 0xF7	; 247
    5b90:	79 e0       	ldi	r23, 0x09	; 9
    5b92:	81 e1       	ldi	r24, 0x11	; 17
    5b94:	90 e0       	ldi	r25, 0x00	; 0
    5b96:	0e 94 ff 20 	call	0x41fe	; 0x41fe <LCD_Display_Text>
	}

	// Write from buffer
	write_buffer(buffer);
    5b9a:	81 e0       	ldi	r24, 0x01	; 1
    5b9c:	91 e0       	ldi	r25, 0x01	; 1
    5b9e:	0c 94 ec 1e 	jmp	0x3dd8	; 0x3dd8 <write_buffer>

00005ba2 <get_menu_range>:
//************************************************************
// get_menu_range - Get range info from PROGMEM for a specific item
//************************************************************

menu_range_t get_menu_range(const unsigned char* menu_ranges, uint8_t menuitem)
{
    5ba2:	cf 93       	push	r28
    5ba4:	df 93       	push	r29
    5ba6:	cd b7       	in	r28, 0x3d	; 61
    5ba8:	de b7       	in	r29, 0x3e	; 62
    5baa:	2a 97       	sbiw	r28, 0x0a	; 10
    5bac:	0f b6       	in	r0, 0x3f	; 63
    5bae:	f8 94       	cli
    5bb0:	de bf       	out	0x3e, r29	; 62
    5bb2:	0f be       	out	0x3f, r0	; 63
    5bb4:	cd bf       	out	0x3d, r28	; 61
	menu_range_t	range;
	memcpy_P(&range, &menu_ranges[menuitem * sizeof(range)], sizeof(range));
    5bb6:	25 e0       	ldi	r18, 0x05	; 5
    5bb8:	62 9f       	mul	r22, r18
    5bba:	80 0d       	add	r24, r0
    5bbc:	91 1d       	adc	r25, r1
    5bbe:	11 24       	eor	r1, r1
    5bc0:	bc 01       	movw	r22, r24
    5bc2:	45 e0       	ldi	r20, 0x05	; 5
    5bc4:	50 e0       	ldi	r21, 0x00	; 0
    5bc6:	ce 01       	movw	r24, r28
    5bc8:	06 96       	adiw	r24, 0x06	; 6
    5bca:	0e 94 f8 47 	call	0x8ff0	; 0x8ff0 <memcpy_P>
	return (range);
    5bce:	85 e0       	ldi	r24, 0x05	; 5
    5bd0:	fe 01       	movw	r30, r28
    5bd2:	36 96       	adiw	r30, 0x06	; 6
    5bd4:	de 01       	movw	r26, r28
    5bd6:	11 96       	adiw	r26, 0x01	; 1
    5bd8:	01 90       	ld	r0, Z+
    5bda:	0d 92       	st	X+, r0
    5bdc:	8a 95       	dec	r24
    5bde:	e1 f7       	brne	.-8      	; 0x5bd8 <get_menu_range+0x36>
    5be0:	29 81       	ldd	r18, Y+1	; 0x01
    5be2:	3a 81       	ldd	r19, Y+2	; 0x02
    5be4:	4b 81       	ldd	r20, Y+3	; 0x03
    5be6:	5c 81       	ldd	r21, Y+4	; 0x04
    5be8:	6d 81       	ldd	r22, Y+5	; 0x05
}
    5bea:	70 e0       	ldi	r23, 0x00	; 0
    5bec:	80 e0       	ldi	r24, 0x00	; 0
    5bee:	90 e0       	ldi	r25, 0x00	; 0
    5bf0:	2a 96       	adiw	r28, 0x0a	; 10
    5bf2:	0f b6       	in	r0, 0x3f	; 63
    5bf4:	f8 94       	cli
    5bf6:	de bf       	out	0x3e, r29	; 62
    5bf8:	0f be       	out	0x3f, r0	; 63
    5bfa:	cd bf       	out	0x3d, r28	; 61
    5bfc:	df 91       	pop	r29
    5bfe:	cf 91       	pop	r28
    5c00:	08 95       	ret

00005c02 <print_menu_text>:
// x = horizontal location on screen
// y = vertical location on screen
//************************************************************

void print_menu_text(int16_t values, uint8_t style, uint16_t text_link, uint8_t x, uint8_t y)
{
    5c02:	0f 93       	push	r16
    5c04:	1f 93       	push	r17
    5c06:	cf 93       	push	r28
    5c08:	df 93       	push	r29
    5c0a:	fa 01       	movw	r30, r20
    5c0c:	10 e0       	ldi	r17, 0x00	; 0
    5c0e:	c2 2f       	mov	r28, r18
    5c10:	d0 e0       	ldi	r29, 0x00	; 0
	if (style == 0) // Numeral
    5c12:	61 11       	cpse	r22, r1
    5c14:	0f c0       	rjmp	.+30     	; 0x5c34 <print_menu_text+0x32>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    5c16:	4a e0       	ldi	r20, 0x0A	; 10
    5c18:	6f e5       	ldi	r22, 0x5F	; 95
    5c1a:	75 e0       	ldi	r23, 0x05	; 5
    5c1c:	0e 94 13 48 	call	0x9026	; 0x9026 <__itoa_ncheck>
	{
		mugui_lcd_puts(itoa(values,pBuffer,10),(const unsigned char*)Verdana8,x,y);
    5c20:	98 01       	movw	r18, r16
    5c22:	ae 01       	movw	r20, r28
    5c24:	67 ef       	ldi	r22, 0xF7	; 247
    5c26:	79 e0       	ldi	r23, 0x09	; 9
	}
	else
	{
		LCD_Display_Text(text_link, (const unsigned char*)Verdana8,x,y);
	}
}
    5c28:	df 91       	pop	r29
    5c2a:	cf 91       	pop	r28
    5c2c:	1f 91       	pop	r17
    5c2e:	0f 91       	pop	r16

void print_menu_text(int16_t values, uint8_t style, uint16_t text_link, uint8_t x, uint8_t y)
{
	if (style == 0) // Numeral
	{
		mugui_lcd_puts(itoa(values,pBuffer,10),(const unsigned char*)Verdana8,x,y);
    5c30:	0c 94 c7 3d 	jmp	0x7b8e	; 0x7b8e <mugui_lcd_puts>
	}
	else
	{
		LCD_Display_Text(text_link, (const unsigned char*)Verdana8,x,y);
    5c34:	98 01       	movw	r18, r16
    5c36:	ae 01       	movw	r20, r28
    5c38:	67 ef       	ldi	r22, 0xF7	; 247
    5c3a:	79 e0       	ldi	r23, 0x09	; 9
    5c3c:	cf 01       	movw	r24, r30
	}
}
    5c3e:	df 91       	pop	r29
    5c40:	cf 91       	pop	r28
    5c42:	1f 91       	pop	r17
    5c44:	0f 91       	pop	r16
	{
		mugui_lcd_puts(itoa(values,pBuffer,10),(const unsigned char*)Verdana8,x,y);
	}
	else
	{
		LCD_Display_Text(text_link, (const unsigned char*)Verdana8,x,y);
    5c46:	0c 94 ff 20 	jmp	0x41fe	; 0x41fe <LCD_Display_Text>

00005c4a <poll_buttons>:
// Poll buttons, wait until something pressed, debounce and 
// return button info.
//************************************************************

uint8_t poll_buttons(bool acceleration)
{
    5c4a:	68 2f       	mov	r22, r24
	static uint8_t button_count = 0;
	uint8_t buttons = 0;

	button = (PINB & 0xf0); // button is global, buttons is local
    5c4c:	93 b1       	in	r25, 0x03	; 3
    5c4e:	90 7f       	andi	r25, 0xF0	; 240
    5c50:	90 93 ea 07 	sts	0x07EA, r25
//************************************************************

uint8_t poll_buttons(bool acceleration)
{
	static uint8_t button_count = 0;
	uint8_t buttons = 0;
    5c54:	80 e0       	ldi	r24, 0x00	; 0
			button = buttons;
		}

		// Reset button acceleration
		button_count = 0;
		button_multiplier = 1;
    5c56:	71 e0       	ldi	r23, 0x01	; 1
	static uint8_t button_count = 0;
	uint8_t buttons = 0;

	button = (PINB & 0xf0); // button is global, buttons is local

	while (button == NONE)					
    5c58:	90 91 ea 07 	lds	r25, 0x07EA
    5c5c:	90 3f       	cpi	r25, 0xF0	; 240
    5c5e:	c9 f4       	brne	.+50     	; 0x5c92 <poll_buttons+0x48>
	{
		buttons = (PINB & 0xf0);	
    5c60:	83 b1       	in	r24, 0x03	; 3
    5c62:	80 7f       	andi	r24, 0xF0	; 240
    5c64:	ef e4       	ldi	r30, 0x4F	; 79
    5c66:	f3 ec       	ldi	r31, 0xC3	; 195
    5c68:	31 97       	sbiw	r30, 0x01	; 1
    5c6a:	f1 f7       	brne	.-4      	; 0x5c68 <poll_buttons+0x1e>
    5c6c:	00 c0       	rjmp	.+0      	; 0x5c6e <poll_buttons+0x24>
    5c6e:	00 00       	nop
		_delay_ms(10);

		if (buttons != (PINB & 0xf0))
    5c70:	23 b1       	in	r18, 0x03	; 3
    5c72:	48 2f       	mov	r20, r24
    5c74:	50 e0       	ldi	r21, 0x00	; 0
    5c76:	20 7f       	andi	r18, 0xF0	; 240
    5c78:	30 e0       	ldi	r19, 0x00	; 0
    5c7a:	42 17       	cp	r20, r18
    5c7c:	53 07       	cpc	r21, r19
    5c7e:	19 f4       	brne	.+6      	; 0x5c86 <poll_buttons+0x3c>
		{
			buttons = 0; // Buttons different
		}
		else // Buttons the same - update global
		{
			button = buttons;
    5c80:	80 93 ea 07 	sts	0x07EA, r24
    5c84:	01 c0       	rjmp	.+2      	; 0x5c88 <poll_buttons+0x3e>
		buttons = (PINB & 0xf0);	
		_delay_ms(10);

		if (buttons != (PINB & 0xf0))
		{
			buttons = 0; // Buttons different
    5c86:	80 e0       	ldi	r24, 0x00	; 0
		{
			button = buttons;
		}

		// Reset button acceleration
		button_count = 0;
    5c88:	10 92 2e 05 	sts	0x052E, r1
		button_multiplier = 1;
    5c8c:	70 93 eb 07 	sts	0x07EB, r23
    5c90:	e3 cf       	rjmp	.-58     	; 0x5c58 <poll_buttons+0xe>
	}

	// Check for buttons being held down if requested
	if ((button != NONE) && (acceleration))
    5c92:	66 23       	and	r22, r22
    5c94:	71 f0       	breq	.+28     	; 0x5cb2 <poll_buttons+0x68>
	{
		// Count the number of times incremented
		button_count++; 
    5c96:	90 91 2e 05 	lds	r25, 0x052E
    5c9a:	9f 5f       	subi	r25, 0xFF	; 255
    5c9c:	90 93 2e 05 	sts	0x052E, r25
		if (button_count >= 10)
    5ca0:	9a 30       	cpi	r25, 0x0A	; 10
    5ca2:	38 f0       	brcs	.+14     	; 0x5cb2 <poll_buttons+0x68>
		{
			button_count = 0;
    5ca4:	10 92 2e 05 	sts	0x052E, r1
			button_multiplier ++;
    5ca8:	90 91 eb 07 	lds	r25, 0x07EB
    5cac:	9f 5f       	subi	r25, 0xFF	; 255
    5cae:	90 93 eb 07 	sts	0x07EB, r25
		}
	}

	return buttons;
}
    5cb2:	08 95       	ret

00005cb4 <do_menu_item>:
// servo_enable = Enable real-time updating of servo position
// servo_number = Servo number to update
//************************************************************

void do_menu_item(uint16_t menuitem, int8_t *values, uint8_t mult, menu_range_t range, int8_t offset, uint16_t text_link, bool servo_enable, int16_t servo_number)
{
    5cb4:	2f 92       	push	r2
    5cb6:	3f 92       	push	r3
    5cb8:	4f 92       	push	r4
    5cba:	5f 92       	push	r5
    5cbc:	6f 92       	push	r6
    5cbe:	7f 92       	push	r7
    5cc0:	8f 92       	push	r8
    5cc2:	9f 92       	push	r9
    5cc4:	af 92       	push	r10
    5cc6:	bf 92       	push	r11
    5cc8:	cf 92       	push	r12
    5cca:	df 92       	push	r13
    5ccc:	ef 92       	push	r14
    5cce:	ff 92       	push	r15
    5cd0:	0f 93       	push	r16
    5cd2:	1f 93       	push	r17
    5cd4:	cf 93       	push	r28
    5cd6:	df 93       	push	r29
    5cd8:	cd b7       	in	r28, 0x3d	; 61
    5cda:	de b7       	in	r29, 0x3e	; 62
    5cdc:	65 97       	sbiw	r28, 0x15	; 21
    5cde:	0f b6       	in	r0, 0x3f	; 63
    5ce0:	f8 94       	cli
    5ce2:	de bf       	out	0x3e, r29	; 62
    5ce4:	0f be       	out	0x3f, r0	; 63
    5ce6:	cd bf       	out	0x3d, r28	; 61
    5ce8:	1c 01       	movw	r2, r24
    5cea:	78 8b       	std	Y+16, r23	; 0x10
    5cec:	6f 87       	std	Y+15, r22	; 0x0f
    5cee:	4a 87       	std	Y+10, r20	; 0x0a
    5cf0:	ed 82       	std	Y+5, r14	; 0x05
    5cf2:	fe 82       	std	Y+6, r15	; 0x06
    5cf4:	0f 83       	std	Y+7, r16	; 0x07
    5cf6:	18 87       	std	Y+8, r17	; 0x08
    5cf8:	29 87       	std	Y+9, r18	; 0x09
    5cfa:	bc 8a       	std	Y+20, r11	; 0x14
    5cfc:	ab 8a       	std	Y+19, r10	; 0x13
    5cfe:	4e 2d       	mov	r20, r14
    5d00:	3f 2d       	mov	r19, r15
    5d02:	0c 87       	std	Y+12, r16	; 0x0c
    5d04:	1b 87       	std	Y+11, r17	; 0x0b
	mugui_size16_t size;
	int16_t temp16;
	int16_t value = (int8_t)*values;
    5d06:	fb 01       	movw	r30, r22
    5d08:	20 81       	ld	r18, Z
    5d0a:	a2 2e       	mov	r10, r18
    5d0c:	bb 24       	eor	r11, r11
    5d0e:	a7 fc       	sbrc	r10, 7
    5d10:	b0 94       	com	r11
	uint8_t button_inc = 0;
	bool	button_lock = false;
	bool	first_time = true;

	// Multiply value for display only if style is 2
	if (range.style == 2)
    5d12:	12 30       	cpi	r17, 0x02	; 2
    5d14:	29 f4       	brne	.+10     	; 0x5d20 <do_menu_item+0x6c>
	{
		value = value * mult;
    5d16:	5a 85       	ldd	r21, Y+10	; 0x0a
    5d18:	25 03       	mulsu	r18, r21
    5d1a:	50 01       	movw	r10, r0
    5d1c:	11 24       	eor	r1, r1
    5d1e:	02 c0       	rjmp	.+4      	; 0x5d24 <do_menu_item+0x70>
	}
	else mult = 1;
    5d20:	81 e0       	ldi	r24, 0x01	; 1
    5d22:	8a 87       	std	Y+10, r24	; 0x0a

	button = NONE;
    5d24:	20 ef       	ldi	r18, 0xF0	; 240
    5d26:	20 93 ea 07 	sts	0x07EA, r18
		{
			value = (range.default_value * mult);
		}

		// Limit values to set ranges
		if (value < (range.lower * mult)) 
    5d2a:	fa 85       	ldd	r31, Y+10	; 0x0a
    5d2c:	ef 2f       	mov	r30, r31
    5d2e:	f0 e0       	ldi	r31, 0x00	; 0
    5d30:	fa 8b       	std	Y+18, r31	; 0x12
    5d32:	e9 8b       	std	Y+17, r30	; 0x11
    5d34:	2a 85       	ldd	r18, Y+10	; 0x0a
    5d36:	42 03       	mulsu	r20, r18
    5d38:	20 01       	movw	r4, r0
    5d3a:	11 24       	eor	r1, r1
		{
			value = range.lower * mult;
		}
		
		if (value > (range.upper * mult)) 
    5d3c:	32 03       	mulsu	r19, r18
    5d3e:	c0 01       	movw	r24, r0
    5d40:	11 24       	eor	r1, r1
    5d42:	9e 87       	std	Y+14, r25	; 0x0e
    5d44:	8d 87       	std	Y+13, r24	; 0x0d
	uint8_t display_update = 0;
	uint8_t servo_update = 0;
	uint8_t button_update = 0;
	uint8_t button_inc = 0;
	bool	button_lock = false;
	bool	first_time = true;
    5d46:	91 e0       	ldi	r25, 0x01	; 1
	int16_t value = (int8_t)*values;
	uint8_t display_update = 0;
	uint8_t servo_update = 0;
	uint8_t button_update = 0;
	uint8_t button_inc = 0;
	bool	button_lock = false;
    5d48:	71 2c       	mov	r7, r1
	mugui_size16_t size;
	int16_t temp16;
	int16_t value = (int8_t)*values;
	uint8_t display_update = 0;
	uint8_t servo_update = 0;
	uint8_t button_update = 0;
    5d4a:	91 2c       	mov	r9, r1
{
	mugui_size16_t size;
	int16_t temp16;
	int16_t value = (int8_t)*values;
	uint8_t display_update = 0;
	uint8_t servo_update = 0;
    5d4c:	61 2c       	mov	r6, r1
void do_menu_item(uint16_t menuitem, int8_t *values, uint8_t mult, menu_range_t range, int8_t offset, uint16_t text_link, bool servo_enable, int16_t servo_number)
{
	mugui_size16_t size;
	int16_t temp16;
	int16_t value = (int8_t)*values;
	uint8_t display_update = 0;
    5d4e:	f1 2c       	mov	r15, r1
			first_time = false;

			clear_buffer(buffer);

			// Print title
			gLCDprint_Menu_P((char*)pgm_read_word(&text_menu[menuitem]), (const unsigned char*)Verdana14, 0, 0);
    5d50:	81 01       	movw	r16, r2
    5d52:	00 0f       	add	r16, r16
    5d54:	11 1f       	adc	r17, r17
    5d56:	02 52       	subi	r16, 0x22	; 34
    5d58:	12 4f       	sbci	r17, 0xF2	; 242

			// Print value
			if ((range.style == 0) || (range.style == 2)) // numeric and numeric * 4
    5d5a:	3b 85       	ldd	r19, Y+11	; 0x0b
    5d5c:	3d 7f       	andi	r19, 0xFD	; 253
    5d5e:	3d 8b       	std	Y+21, r19	; 0x15
			{
				// Write numeric value, centered on screen
				mugui_text_sizestring(itoa(value,pBuffer,10), (const unsigned char*)Verdana14, &size);
				mugui_lcd_puts(itoa(value,pBuffer,10),(const unsigned char*)Verdana14,((128-size.x)/2)+offset,25);
    5d60:	dd 24       	eor	r13, r13
    5d62:	c7 fc       	sbrc	r12, 7
    5d64:	d0 94       	com	r13
	button = NONE;

	// This is a loop that cycles until Button 4 is pressed (Save)
	// The GLCD updating slows servo updates down too much so only update the GLCD periodically
	// When not updating the GLCD the servo should be updated at 50Hz (20ms)
	while (button != ENTER)
    5d66:	80 91 ea 07 	lds	r24, 0x07EA
    5d6a:	80 3e       	cpi	r24, 0xE0	; 224
    5d6c:	09 f4       	brne	.+2      	; 0x5d70 <do_menu_item+0xbc>
    5d6e:	e7 c0       	rjmp	.+462    	; 0x5f3e <do_menu_item+0x28a>
	{
		// Increment loopcount so that we can time various things
		display_update++;
		servo_update++;
    5d70:	63 94       	inc	r6

		// Vary the button increment delay depending on the function
		if (servo_enable)
    5d72:	88 20       	and	r8, r8
    5d74:	11 f0       	breq	.+4      	; 0x5d7a <do_menu_item+0xc6>
		{
			button_inc = 20; // For servos
    5d76:	24 e1       	ldi	r18, 0x14	; 20
    5d78:	01 c0       	rjmp	.+2      	; 0x5d7c <do_menu_item+0xc8>
		}
		else
		{
			button_inc = 1;	// For everything else (numbers)
    5d7a:	21 e0       	ldi	r18, 0x01	; 1
		}

		// Increment button timer when pressed
		if (button != NONE)
    5d7c:	80 3f       	cpi	r24, 0xF0	; 240
    5d7e:	19 f0       	breq	.+6      	; 0x5d86 <do_menu_item+0xd2>
		{
			button_update++;
    5d80:	93 94       	inc	r9

			// Release button lock after button_inc loops
			if (button_update > button_inc)
    5d82:	29 15       	cp	r18, r9
    5d84:	10 f4       	brcc	.+4      	; 0x5d8a <do_menu_item+0xd6>
		}
		// Remove lock when not pressed
		else 
		{
			button_update = 0;
			button_lock = false;
    5d86:	71 2c       	mov	r7, r1
			} 
		}
		// Remove lock when not pressed
		else 
		{
			button_update = 0;
    5d88:	91 2c       	mov	r9, r1
			button_lock = false;
		}

		// Display update
		if 	(!servo_enable || 									// Non-servo value or
    5d8a:	88 20       	and	r8, r8
    5d8c:	49 f0       	breq	.+18     	; 0x5da0 <do_menu_item+0xec>
	// The GLCD updating slows servo updates down too much so only update the GLCD periodically
	// When not updating the GLCD the servo should be updated at 50Hz (20ms)
	while (button != ENTER)
	{
		// Increment loopcount so that we can time various things
		display_update++;
    5d8e:	f3 94       	inc	r15
			button_update = 0;
			button_lock = false;
		}

		// Display update
		if 	(!servo_enable || 									// Non-servo value or
    5d90:	5f e1       	ldi	r21, 0x1F	; 31
    5d92:	5f 15       	cp	r21, r15
    5d94:	10 f4       	brcc	.+4      	; 0x5d9a <do_menu_item+0xe6>
			((display_update >= 32) && (button != NONE)) || 	// Servo value and 32 cycles passed but only with a button pressed or...
    5d96:	80 3f       	cpi	r24, 0xF0	; 240
    5d98:	19 f4       	brne	.+6      	; 0x5da0 <do_menu_item+0xec>
    5d9a:	99 23       	and	r25, r25
    5d9c:	09 f4       	brne	.+2      	; 0x5da0 <do_menu_item+0xec>
    5d9e:	67 c0       	rjmp	.+206    	; 0x5e6e <do_menu_item+0x1ba>
			 (first_time))										// First time into routine
		{
			display_update = 0;
			first_time = false;

			clear_buffer(buffer);
    5da0:	81 e0       	ldi	r24, 0x01	; 1
    5da2:	91 e0       	ldi	r25, 0x01	; 1
    5da4:	0e 94 1e 1f 	call	0x3e3c	; 0x3e3c <clear_buffer>

			// Print title
			gLCDprint_Menu_P((char*)pgm_read_word(&text_menu[menuitem]), (const unsigned char*)Verdana14, 0, 0);
    5da8:	f8 01       	movw	r30, r16
    5daa:	85 91       	lpm	r24, Z+
    5dac:	94 91       	lpm	r25, Z
    5dae:	20 e0       	ldi	r18, 0x00	; 0
    5db0:	30 e0       	ldi	r19, 0x00	; 0
    5db2:	40 e0       	ldi	r20, 0x00	; 0
    5db4:	50 e0       	ldi	r21, 0x00	; 0
    5db6:	69 e4       	ldi	r22, 0x49	; 73
    5db8:	71 e0       	ldi	r23, 0x01	; 1
    5dba:	0e 94 08 21 	call	0x4210	; 0x4210 <gLCDprint_Menu_P>

			// Print value
			if ((range.style == 0) || (range.style == 2)) // numeric and numeric * 4
    5dbe:	8d 89       	ldd	r24, Y+21	; 0x15
    5dc0:	81 11       	cpse	r24, r1
    5dc2:	26 c0       	rjmp	.+76     	; 0x5e10 <do_menu_item+0x15c>
    5dc4:	4a e0       	ldi	r20, 0x0A	; 10
    5dc6:	6f e5       	ldi	r22, 0x5F	; 95
    5dc8:	75 e0       	ldi	r23, 0x05	; 5
    5dca:	c5 01       	movw	r24, r10
    5dcc:	0e 94 13 48 	call	0x9026	; 0x9026 <__itoa_ncheck>
			{
				// Write numeric value, centered on screen
				mugui_text_sizestring(itoa(value,pBuffer,10), (const unsigned char*)Verdana14, &size);
    5dd0:	ae 01       	movw	r20, r28
    5dd2:	4f 5f       	subi	r20, 0xFF	; 255
    5dd4:	5f 4f       	sbci	r21, 0xFF	; 255
    5dd6:	69 e4       	ldi	r22, 0x49	; 73
    5dd8:	71 e0       	ldi	r23, 0x01	; 1
    5dda:	0e 94 78 3c 	call	0x78f0	; 0x78f0 <mugui_text_sizestring>
				mugui_lcd_puts(itoa(value,pBuffer,10),(const unsigned char*)Verdana14,((128-size.x)/2)+offset,25);
    5dde:	89 81       	ldd	r24, Y+1	; 0x01
    5de0:	9a 81       	ldd	r25, Y+2	; 0x02
    5de2:	70 e8       	ldi	r23, 0x80	; 128
    5de4:	e7 2e       	mov	r14, r23
    5de6:	f1 2c       	mov	r15, r1
    5de8:	e8 1a       	sub	r14, r24
    5dea:	f9 0a       	sbc	r15, r25
    5dec:	f6 94       	lsr	r15
    5dee:	e7 94       	ror	r14
    5df0:	ec 0c       	add	r14, r12
    5df2:	fd 1c       	adc	r15, r13
    5df4:	4a e0       	ldi	r20, 0x0A	; 10
    5df6:	6f e5       	ldi	r22, 0x5F	; 95
    5df8:	75 e0       	ldi	r23, 0x05	; 5
    5dfa:	c5 01       	movw	r24, r10
    5dfc:	0e 94 13 48 	call	0x9026	; 0x9026 <__itoa_ncheck>
    5e00:	29 e1       	ldi	r18, 0x19	; 25
    5e02:	30 e0       	ldi	r19, 0x00	; 0
    5e04:	a7 01       	movw	r20, r14
    5e06:	69 e4       	ldi	r22, 0x49	; 73
    5e08:	71 e0       	ldi	r23, 0x01	; 1
    5e0a:	0e 94 c7 3d 	call	0x7b8e	; 0x7b8e <mugui_lcd_puts>
    5e0e:	25 c0       	rjmp	.+74     	; 0x5e5a <do_menu_item+0x1a6>
			}
			else // text
			{
				// Write text, centered on screen
				// NB: pBuffer obviously has to be larger than the longest text string printed... duh...
				pgm_mugui_scopy((char*)pgm_read_word(&text_menu[text_link + value])); // Copy string to pBuffer
    5e10:	eb 88       	ldd	r14, Y+19	; 0x13
    5e12:	fc 88       	ldd	r15, Y+20	; 0x14
    5e14:	ea 0c       	add	r14, r10
    5e16:	fb 1c       	adc	r15, r11
    5e18:	f7 01       	movw	r30, r14
    5e1a:	ee 0f       	add	r30, r30
    5e1c:	ff 1f       	adc	r31, r31
    5e1e:	e2 52       	subi	r30, 0x22	; 34
    5e20:	f2 4f       	sbci	r31, 0xF2	; 242
    5e22:	85 91       	lpm	r24, Z+
    5e24:	94 91       	lpm	r25, Z
    5e26:	0e 94 c6 3c 	call	0x798c	; 0x798c <pgm_mugui_scopy>

				mugui_text_sizestring((char*)pBuffer, (const unsigned char*)Verdana14, &size);
    5e2a:	ae 01       	movw	r20, r28
    5e2c:	4f 5f       	subi	r20, 0xFF	; 255
    5e2e:	5f 4f       	sbci	r21, 0xFF	; 255
    5e30:	69 e4       	ldi	r22, 0x49	; 73
    5e32:	71 e0       	ldi	r23, 0x01	; 1
    5e34:	8f e5       	ldi	r24, 0x5F	; 95
    5e36:	95 e0       	ldi	r25, 0x05	; 5
    5e38:	0e 94 78 3c 	call	0x78f0	; 0x78f0 <mugui_text_sizestring>
				LCD_Display_Text(text_link + value, (const unsigned char*)Verdana14,((128-size.x)/2),25);
    5e3c:	89 81       	ldd	r24, Y+1	; 0x01
    5e3e:	9a 81       	ldd	r25, Y+2	; 0x02
    5e40:	40 e8       	ldi	r20, 0x80	; 128
    5e42:	50 e0       	ldi	r21, 0x00	; 0
    5e44:	48 1b       	sub	r20, r24
    5e46:	59 0b       	sbc	r21, r25
    5e48:	56 95       	lsr	r21
    5e4a:	47 95       	ror	r20
    5e4c:	29 e1       	ldi	r18, 0x19	; 25
    5e4e:	30 e0       	ldi	r19, 0x00	; 0
    5e50:	69 e4       	ldi	r22, 0x49	; 73
    5e52:	71 e0       	ldi	r23, 0x01	; 1
    5e54:	c7 01       	movw	r24, r14
    5e56:	0e 94 ff 20 	call	0x41fe	; 0x41fe <LCD_Display_Text>
			}

			// Print bottom markers
			print_menu_frame(1);
    5e5a:	81 e0       	ldi	r24, 0x01	; 1
    5e5c:	0e 94 7c 2d 	call	0x5af8	; 0x5af8 <print_menu_frame>

			// Write from buffer
			write_buffer(buffer);
    5e60:	81 e0       	ldi	r24, 0x01	; 1
    5e62:	91 e0       	ldi	r25, 0x01	; 1
    5e64:	0e 94 ec 1e 	call	0x3dd8	; 0x3dd8 <write_buffer>
		}

		// Poll buttons when idle
		// Don't use button acceleration when moving servos
		// And don't block the code with poll_buttons()
		if (servo_enable)
    5e68:	88 20       	and	r8, r8
    5e6a:	49 f0       	breq	.+18     	; 0x5e7e <do_menu_item+0x1ca>
		// Display update
		if 	(!servo_enable || 									// Non-servo value or
			((display_update >= 32) && (button != NONE)) || 	// Servo value and 32 cycles passed but only with a button pressed or...
			 (first_time))										// First time into routine
		{
			display_update = 0;
    5e6c:	f1 2c       	mov	r15, r1
		// Poll buttons when idle
		// Don't use button acceleration when moving servos
		// And don't block the code with poll_buttons()
		if (servo_enable)
		{
			button = (PINB & 0xf0);	
    5e6e:	83 b1       	in	r24, 0x03	; 3
    5e70:	80 7f       	andi	r24, 0xF0	; 240
    5e72:	80 93 ea 07 	sts	0x07EA, r24
			button_multiplier = 1;
    5e76:	91 e0       	ldi	r25, 0x01	; 1
    5e78:	90 93 eb 07 	sts	0x07EB, r25
    5e7c:	04 c0       	rjmp	.+8      	; 0x5e86 <do_menu_item+0x1d2>
		}
		else
		{
			poll_buttons(true);
    5e7e:	81 e0       	ldi	r24, 0x01	; 1
    5e80:	0e 94 25 2e 	call	0x5c4a	; 0x5c4a <poll_buttons>
		// Display update
		if 	(!servo_enable || 									// Non-servo value or
			((display_update >= 32) && (button != NONE)) || 	// Servo value and 32 cycles passed but only with a button pressed or...
			 (first_time))										// First time into routine
		{
			display_update = 0;
    5e84:	f1 2c       	mov	r15, r1
		{
			poll_buttons(true);
		}

		// Handle cursor Up/Down limits
		if (button == DOWN)
    5e86:	80 91 ea 07 	lds	r24, 0x07EA
    5e8a:	80 3d       	cpi	r24, 0xD0	; 208
    5e8c:	51 f4       	brne	.+20     	; 0x5ea2 <do_menu_item+0x1ee>
		{
			if (button_lock == false)
    5e8e:	71 10       	cpse	r7, r1
    5e90:	7b c0       	rjmp	.+246    	; 0x5f88 <do_menu_item+0x2d4>
			{
				button_lock = true;
				value = value - (range.increment * button_multiplier);
    5e92:	80 91 eb 07 	lds	r24, 0x07EB
    5e96:	ec 85       	ldd	r30, Y+12	; 0x0c
    5e98:	e8 9f       	mul	r30, r24
    5e9a:	a0 18       	sub	r10, r0
    5e9c:	b1 08       	sbc	r11, r1
    5e9e:	11 24       	eor	r1, r1
    5ea0:	0b c0       	rjmp	.+22     	; 0x5eb8 <do_menu_item+0x204>
				button_update = 0;
			}
		}

		if (button == UP)
    5ea2:	80 3b       	cpi	r24, 0xB0	; 176
    5ea4:	59 f4       	brne	.+22     	; 0x5ebc <do_menu_item+0x208>
		{
			if (button_lock == false)
    5ea6:	71 10       	cpse	r7, r1
    5ea8:	6f c0       	rjmp	.+222    	; 0x5f88 <do_menu_item+0x2d4>
			{
				button_lock = true;
				value = value + (range.increment * button_multiplier);
    5eaa:	80 91 eb 07 	lds	r24, 0x07EB
    5eae:	fc 85       	ldd	r31, Y+12	; 0x0c
    5eb0:	f8 9f       	mul	r31, r24
    5eb2:	a0 0c       	add	r10, r0
    5eb4:	b1 1c       	adc	r11, r1
    5eb6:	11 24       	eor	r1, r1
				button_update = 0;
    5eb8:	91 2c       	mov	r9, r1
    5eba:	66 c0       	rjmp	.+204    	; 0x5f88 <do_menu_item+0x2d4>
			}
		}

		if (button == BACK)	
    5ebc:	80 37       	cpi	r24, 0x70	; 112
    5ebe:	29 f4       	brne	.+10     	; 0x5eca <do_menu_item+0x216>
		{
			value = (range.default_value * mult);
    5ec0:	29 85       	ldd	r18, Y+9	; 0x09
    5ec2:	3a 85       	ldd	r19, Y+10	; 0x0a
    5ec4:	23 03       	mulsu	r18, r19
    5ec6:	50 01       	movw	r10, r0
    5ec8:	11 24       	eor	r1, r1
    5eca:	a4 14       	cp	r10, r4
    5ecc:	b5 04       	cpc	r11, r5
    5ece:	0c f4       	brge	.+2      	; 0x5ed2 <do_menu_item+0x21e>
    5ed0:	52 01       	movw	r10, r4
    5ed2:	8d 85       	ldd	r24, Y+13	; 0x0d
    5ed4:	9e 85       	ldd	r25, Y+14	; 0x0e
    5ed6:	8a 15       	cp	r24, r10
    5ed8:	9b 05       	cpc	r25, r11
    5eda:	0c f4       	brge	.+2      	; 0x5ede <do_menu_item+0x22a>
    5edc:	5c 01       	movw	r10, r24
		{
			value = range.upper * mult;
		}

		// Update contrast setting
		if (menuitem == CONTRAST)
    5ede:	9f e9       	ldi	r25, 0x9F	; 159
    5ee0:	29 16       	cp	r2, r25
    5ee2:	31 04       	cpc	r3, r1
    5ee4:	19 f4       	brne	.+6      	; 0x5eec <do_menu_item+0x238>
		{
			st7565_set_brightness(value);
    5ee6:	8a 2d       	mov	r24, r10
    5ee8:	0e 94 c4 1e 	call	0x3d88	; 0x3d88 <st7565_set_brightness>
		}

		// Set servo position if required and update every 4 * 5ms = 20ms
		// Ignore if the output is marked as a motor
		if	(
    5eec:	88 20       	and	r8, r8
    5eee:	a1 f0       	breq	.+40     	; 0x5f18 <do_menu_item+0x264>
//			((servo_enable) && (servo_update >= 4)) &&
	//		(Config.Channel[servo_number].Motor_marker == MOTOR)
			servo_enable && (servo_update >= 4)
    5ef0:	e3 e0       	ldi	r30, 0x03	; 3
    5ef2:	e6 15       	cp	r30, r6
    5ef4:	88 f4       	brcc	.+34     	; 0x5f18 <do_menu_item+0x264>
			)
		{
			servo_update = 0;

			temp16 = scale_percent(value);	// Convert to servo position (from %)
    5ef6:	8a 2d       	mov	r24, r10
    5ef8:	0e 94 71 3c 	call	0x78e2	; 0x78e2 <scale_percent>

			// Scale servo from 2500~5000 to 875~2125
			temp16 = ((temp16 - 3750) >> 1) + 1500; 
    5efc:	86 5a       	subi	r24, 0xA6	; 166
    5efe:	9e 40       	sbci	r25, 0x0E	; 14
    5f00:	95 95       	asr	r25
    5f02:	87 95       	ror	r24

			cli();
    5f04:	f8 94       	cli
			servo_update = 0;

			temp16 = scale_percent(value);	// Convert to servo position (from %)

			// Scale servo from 2500~5000 to 875~2125
			temp16 = ((temp16 - 3750) >> 1) + 1500; 
    5f06:	bc 01       	movw	r22, r24
    5f08:	64 52       	subi	r22, 0x24	; 36
    5f0a:	7a 4f       	sbci	r23, 0xFA	; 250

			cli();
			output_servo_ppm_asm3(servo_number, temp16);
    5f0c:	8a a5       	ldd	r24, Y+42	; 0x2a
    5f0e:	9b a5       	ldd	r25, Y+43	; 0x2b
    5f10:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <output_servo_ppm_asm3>
			sei();
    5f14:	78 94       	sei
//			((servo_enable) && (servo_update >= 4)) &&
	//		(Config.Channel[servo_number].Motor_marker == MOTOR)
			servo_enable && (servo_update >= 4)
			)
		{
			servo_update = 0;
    5f16:	61 2c       	mov	r6, r1
			output_servo_ppm_asm3(servo_number, temp16);
			sei();
		}

		// Slow the loop rate for text items		
		 if (range.style == 1)
    5f18:	fb 85       	ldd	r31, Y+11	; 0x0b
    5f1a:	f1 30       	cpi	r31, 0x01	; 1
    5f1c:	41 f4       	brne	.+16     	; 0x5f2e <do_menu_item+0x27a>
    5f1e:	2f e7       	ldi	r18, 0x7F	; 127
    5f20:	3a e1       	ldi	r19, 0x1A	; 26
    5f22:	56 e0       	ldi	r21, 0x06	; 6
    5f24:	21 50       	subi	r18, 0x01	; 1
    5f26:	30 40       	sbci	r19, 0x00	; 0
    5f28:	50 40       	sbci	r21, 0x00	; 0
    5f2a:	e1 f7       	brne	.-8      	; 0x5f24 <do_menu_item+0x270>
    5f2c:	04 c0       	rjmp	.+8      	; 0x5f36 <do_menu_item+0x282>
    5f2e:	87 ea       	ldi	r24, 0xA7	; 167
    5f30:	91 e6       	ldi	r25, 0x61	; 97
    5f32:	01 97       	sbiw	r24, 0x01	; 1
    5f34:	f1 f7       	brne	.-4      	; 0x5f32 <do_menu_item+0x27e>
    5f36:	00 c0       	rjmp	.+0      	; 0x5f38 <do_menu_item+0x284>
    5f38:	00 00       	nop
    5f3a:	90 e0       	ldi	r25, 0x00	; 0
    5f3c:	14 cf       	rjmp	.-472    	; 0x5d66 <do_menu_item+0xb2>

	// Exit
	button = ENTER;

	// Divide value from that displayed if style = 2
	if (range.style == 2)
    5f3e:	9b 85       	ldd	r25, Y+11	; 0x0b
    5f40:	92 30       	cpi	r25, 0x02	; 2
    5f42:	31 f4       	brne	.+12     	; 0x5f50 <do_menu_item+0x29c>
	{
		value = value / mult;
    5f44:	c5 01       	movw	r24, r10
    5f46:	69 89       	ldd	r22, Y+17	; 0x11
    5f48:	7a 89       	ldd	r23, Y+18	; 0x12
    5f4a:	0e 94 6c 47 	call	0x8ed8	; 0x8ed8 <__divmodhi4>
    5f4e:	5b 01       	movw	r10, r22
	}

	*values = (int8_t)value;
    5f50:	ef 85       	ldd	r30, Y+15	; 0x0f
    5f52:	f8 89       	ldd	r31, Y+16	; 0x10
    5f54:	a0 82       	st	Z, r10
}
    5f56:	65 96       	adiw	r28, 0x15	; 21
    5f58:	0f b6       	in	r0, 0x3f	; 63
    5f5a:	f8 94       	cli
    5f5c:	de bf       	out	0x3e, r29	; 62
    5f5e:	0f be       	out	0x3f, r0	; 63
    5f60:	cd bf       	out	0x3d, r28	; 61
    5f62:	df 91       	pop	r29
    5f64:	cf 91       	pop	r28
    5f66:	1f 91       	pop	r17
    5f68:	0f 91       	pop	r16
    5f6a:	ff 90       	pop	r15
    5f6c:	ef 90       	pop	r14
    5f6e:	df 90       	pop	r13
    5f70:	cf 90       	pop	r12
    5f72:	bf 90       	pop	r11
    5f74:	af 90       	pop	r10
    5f76:	9f 90       	pop	r9
    5f78:	8f 90       	pop	r8
    5f7a:	7f 90       	pop	r7
    5f7c:	6f 90       	pop	r6
    5f7e:	5f 90       	pop	r5
    5f80:	4f 90       	pop	r4
    5f82:	3f 90       	pop	r3
    5f84:	2f 90       	pop	r2
    5f86:	08 95       	ret
		// Display update
		if 	(!servo_enable || 									// Non-servo value or
			((display_update >= 32) && (button != NONE)) || 	// Servo value and 32 cycles passed but only with a button pressed or...
			 (first_time))										// First time into routine
		{
			display_update = 0;
    5f88:	77 24       	eor	r7, r7
    5f8a:	73 94       	inc	r7
    5f8c:	9e cf       	rjmp	.-196    	; 0x5eca <do_menu_item+0x216>

00005f8e <menu_beep>:

void menu_beep(uint8_t beeps)
{
	uint8_t i;

	for (i=0; i < beeps; i++)
    5f8e:	90 e0       	ldi	r25, 0x00	; 0
    5f90:	98 17       	cp	r25, r24
    5f92:	b1 f0       	breq	.+44     	; 0x5fc0 <menu_beep+0x32>
	{ 
		LVA = 1;
    5f94:	29 9a       	sbi	0x05, 1	; 5
    5f96:	2f e9       	ldi	r18, 0x9F	; 159
    5f98:	36 e8       	ldi	r19, 0x86	; 134
    5f9a:	41 e0       	ldi	r20, 0x01	; 1
    5f9c:	21 50       	subi	r18, 0x01	; 1
    5f9e:	30 40       	sbci	r19, 0x00	; 0
    5fa0:	40 40       	sbci	r20, 0x00	; 0
    5fa2:	e1 f7       	brne	.-8      	; 0x5f9c <menu_beep+0xe>
    5fa4:	00 c0       	rjmp	.+0      	; 0x5fa6 <menu_beep+0x18>
    5fa6:	00 00       	nop
		_delay_ms(25);
		LVA = 0;
    5fa8:	29 98       	cbi	0x05, 1	; 5
    5faa:	2f e9       	ldi	r18, 0x9F	; 159
    5fac:	36 e8       	ldi	r19, 0x86	; 134
    5fae:	41 e0       	ldi	r20, 0x01	; 1
    5fb0:	21 50       	subi	r18, 0x01	; 1
    5fb2:	30 40       	sbci	r19, 0x00	; 0
    5fb4:	40 40       	sbci	r20, 0x00	; 0
    5fb6:	e1 f7       	brne	.-8      	; 0x5fb0 <menu_beep+0x22>
    5fb8:	00 c0       	rjmp	.+0      	; 0x5fba <menu_beep+0x2c>
    5fba:	00 00       	nop

void menu_beep(uint8_t beeps)
{
	uint8_t i;

	for (i=0; i < beeps; i++)
    5fbc:	9f 5f       	subi	r25, 0xFF	; 255
    5fbe:	e8 cf       	rjmp	.-48     	; 0x5f90 <menu_beep+0x2>
		LVA = 1;
		_delay_ms(25);
		LVA = 0;
		_delay_ms(25);
	}
}
    5fc0:	08 95       	ret

00005fc2 <update_menu>:
// top*		= Item number currently on top line
// temp*	= Currently selected item number
//************************************************************

void update_menu(uint8_t items, uint8_t start, uint8_t offset, uint8_t button, uint8_t* cursor, uint16_t* top, uint16_t* temp)
{
    5fc2:	af 92       	push	r10
    5fc4:	bf 92       	push	r11
    5fc6:	cf 92       	push	r12
    5fc8:	df 92       	push	r13
    5fca:	ef 92       	push	r14
    5fcc:	ff 92       	push	r15
    5fce:	0f 93       	push	r16
    5fd0:	1f 93       	push	r17
    5fd2:	cf 93       	push	r28
    5fd4:	df 93       	push	r29
    5fd6:	00 d0       	rcall	.+0      	; 0x5fd8 <update_menu+0x16>
    5fd8:	cd b7       	in	r28, 0x3d	; 61
    5fda:	de b7       	in	r29, 0x3e	; 62
    5fdc:	98 2f       	mov	r25, r24
    5fde:	58 01       	movw	r10, r16
	// Temporarily add in offset :(
	*top = *top + offset;
    5fe0:	04 2f       	mov	r16, r20
    5fe2:	10 e0       	ldi	r17, 0x00	; 0
    5fe4:	d7 01       	movw	r26, r14
    5fe6:	ed 91       	ld	r30, X+
    5fe8:	fc 91       	ld	r31, X
    5fea:	11 97       	sbiw	r26, 0x01	; 1
    5fec:	e0 0f       	add	r30, r16
    5fee:	f1 1f       	adc	r31, r17
    5ff0:	ed 93       	st	X+, r30
    5ff2:	fc 93       	st	X, r31
	start = start + offset;
    5ff4:	64 0f       	add	r22, r20

	// Calculate which function has been requested
	if (button == ENTER)
    5ff6:	20 3e       	cpi	r18, 0xE0	; 224
    5ff8:	b1 f4       	brne	.+44     	; 0x6026 <update_menu+0x64>
	{
		switch(*cursor) 
    5ffa:	d5 01       	movw	r26, r10
    5ffc:	8c 91       	ld	r24, X
    5ffe:	8f 30       	cpi	r24, 0x0F	; 15
    6000:	59 f0       	breq	.+22     	; 0x6018 <update_menu+0x56>
    6002:	18 f4       	brcc	.+6      	; 0x600a <update_menu+0x48>
    6004:	83 30       	cpi	r24, 0x03	; 3
    6006:	49 f0       	breq	.+18     	; 0x601a <update_menu+0x58>
    6008:	4d c0       	rjmp	.+154    	; 0x60a4 <update_menu+0xe2>
    600a:	8b 31       	cpi	r24, 0x1B	; 27
    600c:	51 f0       	breq	.+20     	; 0x6022 <update_menu+0x60>
    600e:	87 32       	cpi	r24, 0x27	; 39
    6010:	09 f0       	breq	.+2      	; 0x6014 <update_menu+0x52>
    6012:	48 c0       	rjmp	.+144    	; 0x60a4 <update_menu+0xe2>
				break;	
			case LINE2:
				*temp = *top + 2;
				break;
			case LINE3:
				*temp = *top + 3;
    6014:	33 96       	adiw	r30, 0x03	; 3
    6016:	01 c0       	rjmp	.+2      	; 0x601a <update_menu+0x58>
		{
			case LINE0:
				*temp = *top;
				break;
			case LINE1:
				*temp = *top + 1;
    6018:	31 96       	adiw	r30, 0x01	; 1
    601a:	d6 01       	movw	r26, r12
    601c:	ed 93       	st	X+, r30
    601e:	fc 93       	st	X, r31
				break;	
    6020:	41 c0       	rjmp	.+130    	; 0x60a4 <update_menu+0xe2>
			case LINE2:
				*temp = *top + 2;
    6022:	32 96       	adiw	r30, 0x02	; 2
    6024:	fa cf       	rjmp	.-12     	; 0x601a <update_menu+0x58>
				break;
		}
	}

	// Handle cursor Up/Down limits
	if (button == DOWN)	
    6026:	20 3d       	cpi	r18, 0xD0	; 208
    6028:	f9 f4       	brne	.+62     	; 0x6068 <update_menu+0xa6>
	{
		switch(*cursor) 
    602a:	f5 01       	movw	r30, r10
    602c:	80 81       	ld	r24, Z
    602e:	8f 30       	cpi	r24, 0x0F	; 15
    6030:	69 f0       	breq	.+26     	; 0x604c <update_menu+0x8a>
    6032:	18 f4       	brcc	.+6      	; 0x603a <update_menu+0x78>
    6034:	83 30       	cpi	r24, 0x03	; 3
    6036:	31 f0       	breq	.+12     	; 0x6044 <update_menu+0x82>
    6038:	15 c0       	rjmp	.+42     	; 0x6064 <update_menu+0xa2>
    603a:	8b 31       	cpi	r24, 0x1B	; 27
    603c:	59 f0       	breq	.+22     	; 0x6054 <update_menu+0x92>
    603e:	87 32       	cpi	r24, 0x27	; 39
    6040:	69 f0       	breq	.+26     	; 0x605c <update_menu+0x9a>
    6042:	10 c0       	rjmp	.+32     	; 0x6064 <update_menu+0xa2>
		{
			case LINE0:
				if (items > 1) *cursor = LINE1;
    6044:	92 30       	cpi	r25, 0x02	; 2
    6046:	70 f1       	brcs	.+92     	; 0x60a4 <update_menu+0xe2>
    6048:	8f e0       	ldi	r24, 0x0F	; 15
    604a:	27 c0       	rjmp	.+78     	; 0x609a <update_menu+0xd8>
				break;	
			case LINE1:
				if (items > 2) *cursor = LINE2;
    604c:	93 30       	cpi	r25, 0x03	; 3
    604e:	50 f1       	brcs	.+84     	; 0x60a4 <update_menu+0xe2>
    6050:	8b e1       	ldi	r24, 0x1B	; 27
    6052:	1f c0       	rjmp	.+62     	; 0x6092 <update_menu+0xd0>
				break;	
			case LINE2:
				if (items > 3) *cursor = LINE3;
    6054:	94 30       	cpi	r25, 0x04	; 4
    6056:	30 f1       	brcs	.+76     	; 0x60a4 <update_menu+0xe2>
    6058:	87 e2       	ldi	r24, 0x27	; 39
    605a:	1f c0       	rjmp	.+62     	; 0x609a <update_menu+0xd8>
				break;
			case LINE3:
				if (items > 4) *cursor = NEXTLINE;
    605c:	95 30       	cpi	r25, 0x05	; 5
    605e:	10 f1       	brcs	.+68     	; 0x60a4 <update_menu+0xe2>
    6060:	88 e2       	ldi	r24, 0x28	; 40
    6062:	17 c0       	rjmp	.+46     	; 0x6092 <update_menu+0xd0>
				break;
			default:
				*cursor = NEXTLINE;
    6064:	88 e2       	ldi	r24, 0x28	; 40
    6066:	19 c0       	rjmp	.+50     	; 0x609a <update_menu+0xd8>
				break;
		}
	}

	if (button == UP)	
    6068:	20 3b       	cpi	r18, 0xB0	; 176
    606a:	d1 f4       	brne	.+52     	; 0x60a0 <update_menu+0xde>
	{
		switch(*cursor) 
    606c:	f5 01       	movw	r30, r10
    606e:	80 81       	ld	r24, Z
    6070:	8f 30       	cpi	r24, 0x0F	; 15
    6072:	69 f0       	breq	.+26     	; 0x608e <update_menu+0xcc>
    6074:	20 f4       	brcc	.+8      	; 0x607e <update_menu+0xbc>
    6076:	83 30       	cpi	r24, 0x03	; 3
    6078:	79 f4       	brne	.+30     	; 0x6098 <update_menu+0xd6>
				break;
			case LINE1:
				*cursor = LINE0;
				break;
			case LINE0:
				*cursor = PREVLINE;
    607a:	82 e0       	ldi	r24, 0x02	; 2
    607c:	0a c0       	rjmp	.+20     	; 0x6092 <update_menu+0xd0>
		}
	}

	if (button == UP)	
	{
		switch(*cursor) 
    607e:	8b 31       	cpi	r24, 0x1B	; 27
    6080:	21 f0       	breq	.+8      	; 0x608a <update_menu+0xc8>
    6082:	87 32       	cpi	r24, 0x27	; 39
    6084:	49 f4       	brne	.+18     	; 0x6098 <update_menu+0xd6>
		{
			case LINE3:
				*cursor = LINE2;
    6086:	8b e1       	ldi	r24, 0x1B	; 27
    6088:	08 c0       	rjmp	.+16     	; 0x609a <update_menu+0xd8>
				break;	
			case LINE2:
				*cursor = LINE1;
    608a:	8f e0       	ldi	r24, 0x0F	; 15
    608c:	02 c0       	rjmp	.+4      	; 0x6092 <update_menu+0xd0>
				break;
			case LINE1:
				*cursor = LINE0;
    608e:	83 e0       	ldi	r24, 0x03	; 3
    6090:	04 c0       	rjmp	.+8      	; 0x609a <update_menu+0xd8>
				break;
			case LINE0:
				*cursor = PREVLINE;
    6092:	f5 01       	movw	r30, r10
    6094:	80 83       	st	Z, r24
				break;
    6096:	06 c0       	rjmp	.+12     	; 0x60a4 <update_menu+0xe2>
			default:
				*cursor = PREVLINE;
    6098:	82 e0       	ldi	r24, 0x02	; 2
    609a:	d5 01       	movw	r26, r10
    609c:	8c 93       	st	X, r24
				break;
    609e:	02 c0       	rjmp	.+4      	; 0x60a4 <update_menu+0xe2>
		}
	}

	if (button != NONE)	
    60a0:	20 3f       	cpi	r18, 0xF0	; 240
    60a2:	81 f0       	breq	.+32     	; 0x60c4 <update_menu+0x102>
	{
		menu_beep(1);
    60a4:	81 e0       	ldi	r24, 0x01	; 1
    60a6:	69 83       	std	Y+1, r22	; 0x01
    60a8:	9a 83       	std	Y+2, r25	; 0x02
    60aa:	0e 94 c7 2f 	call	0x5f8e	; 0x5f8e <menu_beep>
    60ae:	bf ef       	ldi	r27, 0xFF	; 255
    60b0:	e4 e3       	ldi	r30, 0x34	; 52
    60b2:	fc e0       	ldi	r31, 0x0C	; 12
    60b4:	b1 50       	subi	r27, 0x01	; 1
    60b6:	e0 40       	sbci	r30, 0x00	; 0
    60b8:	f0 40       	sbci	r31, 0x00	; 0
    60ba:	e1 f7       	brne	.-8      	; 0x60b4 <update_menu+0xf2>
    60bc:	00 c0       	rjmp	.+0      	; 0x60be <update_menu+0xfc>
    60be:	00 00       	nop
    60c0:	9a 81       	ldd	r25, Y+2	; 0x02
    60c2:	69 81       	ldd	r22, Y+1	; 0x01
		_delay_ms(200);
	}

	// When cursor is at limits and button pressed
	if (*cursor == PREVLINE)								// Up				
    60c4:	d5 01       	movw	r26, r10
    60c6:	8c 91       	ld	r24, X
    60c8:	82 30       	cpi	r24, 0x02	; 2
    60ca:	71 f4       	brne	.+28     	; 0x60e8 <update_menu+0x126>
	{
		*cursor  = LINE0;
    60cc:	83 e0       	ldi	r24, 0x03	; 3
    60ce:	8c 93       	st	X, r24
		if (*top > start) 
    60d0:	f7 01       	movw	r30, r14
    60d2:	20 81       	ld	r18, Z
    60d4:	31 81       	ldd	r19, Z+1	; 0x01
    60d6:	46 2f       	mov	r20, r22
    60d8:	50 e0       	ldi	r21, 0x00	; 0
    60da:	42 17       	cp	r20, r18
    60dc:	53 07       	cpc	r21, r19
    60de:	20 f4       	brcc	.+8      	; 0x60e8 <update_menu+0x126>
		{
			*top = *top - 1;								// Shuffle list up
    60e0:	21 50       	subi	r18, 0x01	; 1
    60e2:	31 09       	sbc	r19, r1
    60e4:	31 83       	std	Z+1, r19	; 0x01
    60e6:	20 83       	st	Z, r18
		}
	}
	
	if (*cursor == NEXTLINE)								// Down
    60e8:	d5 01       	movw	r26, r10
    60ea:	8c 91       	ld	r24, X
    60ec:	88 32       	cpi	r24, 0x28	; 40
    60ee:	a1 f4       	brne	.+40     	; 0x6118 <update_menu+0x156>
	{
		*cursor  = LINE3;
    60f0:	87 e2       	ldi	r24, 0x27	; 39
    60f2:	8c 93       	st	X, r24
		if ((*top + 3) < (uint16_t)((start + items) - 1))	// Compiler throws a warning here without the cast. top is uint16_t, start is uint8_t, items = uint8_t
    60f4:	f7 01       	movw	r30, r14
    60f6:	20 81       	ld	r18, Z
    60f8:	31 81       	ldd	r19, Z+1	; 0x01
    60fa:	a9 01       	movw	r20, r18
    60fc:	4d 5f       	subi	r20, 0xFD	; 253
    60fe:	5f 4f       	sbci	r21, 0xFF	; 255
    6100:	89 2f       	mov	r24, r25
    6102:	90 e0       	ldi	r25, 0x00	; 0
    6104:	86 0f       	add	r24, r22
    6106:	91 1d       	adc	r25, r1
    6108:	01 97       	sbiw	r24, 0x01	; 1
    610a:	48 17       	cp	r20, r24
    610c:	59 07       	cpc	r21, r25
    610e:	20 f4       	brcc	.+8      	; 0x6118 <update_menu+0x156>
		{
			*top = *top + 1;								// Shuffle list down
    6110:	2f 5f       	subi	r18, 0xFF	; 255
    6112:	3f 4f       	sbci	r19, 0xFF	; 255
    6114:	31 83       	std	Z+1, r19	; 0x01
    6116:	20 83       	st	Z, r18
		}
	}

	// Remove temporary offset
	*top = *top - offset;
    6118:	d7 01       	movw	r26, r14
    611a:	8d 91       	ld	r24, X+
    611c:	9c 91       	ld	r25, X
    611e:	11 97       	sbiw	r26, 0x01	; 1
    6120:	80 1b       	sub	r24, r16
    6122:	91 0b       	sbc	r25, r17
    6124:	8d 93       	st	X+, r24
    6126:	9c 93       	st	X, r25
}
    6128:	0f 90       	pop	r0
    612a:	0f 90       	pop	r0
    612c:	df 91       	pop	r29
    612e:	cf 91       	pop	r28
    6130:	1f 91       	pop	r17
    6132:	0f 91       	pop	r16
    6134:	ff 90       	pop	r15
    6136:	ef 90       	pop	r14
    6138:	df 90       	pop	r13
    613a:	cf 90       	pop	r12
    613c:	bf 90       	pop	r11
    613e:	af 90       	pop	r10
    6140:	08 95       	ret

00006142 <print_cursor>:
// Print cursor on specified line
//************************************************************

void print_cursor(uint8_t line)
{
	LCD_Display_Text(13, (const unsigned char*)Wingdings, CURSOROFFSET, line);
    6142:	28 2f       	mov	r18, r24
    6144:	30 e0       	ldi	r19, 0x00	; 0
    6146:	43 e0       	ldi	r20, 0x03	; 3
    6148:	50 e0       	ldi	r21, 0x00	; 0
    614a:	6f ed       	ldi	r22, 0xDF	; 223
    614c:	70 e0       	ldi	r23, 0x00	; 0
    614e:	8d e0       	ldi	r24, 0x0D	; 13
    6150:	90 e0       	ldi	r25, 0x00	; 0
    6152:	0c 94 ff 20 	jmp	0x41fe	; 0x41fe <LCD_Display_Text>

00006156 <print_menu_items>:
// MenuOffsets = originally an array, now just a fixed horizontal offset for the value text
// text_link = pointer to the text list for the values if not numeric
// cursor = cursor position
//**********************************************************************
void print_menu_items(uint16_t top, uint16_t start, int8_t values[], const unsigned char* menu_ranges, uint8_t rangetype, uint8_t MenuOffsets, const unsigned char* text_link, uint8_t cursor)
{
    6156:	2f 92       	push	r2
    6158:	3f 92       	push	r3
    615a:	4f 92       	push	r4
    615c:	5f 92       	push	r5
    615e:	6f 92       	push	r6
    6160:	7f 92       	push	r7
    6162:	8f 92       	push	r8
    6164:	9f 92       	push	r9
    6166:	af 92       	push	r10
    6168:	bf 92       	push	r11
    616a:	cf 92       	push	r12
    616c:	df 92       	push	r13
    616e:	ef 92       	push	r14
    6170:	ff 92       	push	r15
    6172:	0f 93       	push	r16
    6174:	1f 93       	push	r17
    6176:	cf 93       	push	r28
    6178:	df 93       	push	r29
    617a:	cd b7       	in	r28, 0x3d	; 61
    617c:	de b7       	in	r29, 0x3e	; 62
    617e:	2a 97       	sbiw	r28, 0x0a	; 10
    6180:	0f b6       	in	r0, 0x3f	; 63
    6182:	f8 94       	cli
    6184:	de bf       	out	0x3e, r29	; 62
    6186:	0f be       	out	0x3f, r0	; 63
    6188:	cd bf       	out	0x3d, r28	; 61
    618a:	2c 01       	movw	r4, r24
    618c:	4a 01       	movw	r8, r20
    618e:	39 01       	movw	r6, r18
    6190:	0e 83       	std	Y+6, r16	; 0x06
    6192:	ef 82       	std	Y+7, r14	; 0x07
    6194:	a8 86       	std	Y+8, r10	; 0x08
	menu_range_t	range1;
		
	// Clear buffer before each update
	clear_buffer(buffer);
    6196:	81 e0       	ldi	r24, 0x01	; 1
    6198:	91 e0       	ldi	r25, 0x01	; 1
    619a:	69 87       	std	Y+9, r22	; 0x09
    619c:	7a 87       	std	Y+10, r23	; 0x0a
    619e:	0e 94 1e 1f 	call	0x3e3c	; 0x3e3c <clear_buffer>
	print_menu_frame(0);
    61a2:	80 e0       	ldi	r24, 0x00	; 0
    61a4:	0e 94 7c 2d 	call	0x5af8	; 0x5af8 <print_menu_frame>
    61a8:	25 e0       	ldi	r18, 0x05	; 5
    61aa:	69 85       	ldd	r22, Y+9	; 0x09
    61ac:	7a 85       	ldd	r23, Y+10	; 0x0a
    61ae:	26 9f       	mul	r18, r22
    61b0:	c0 01       	movw	r24, r0
    61b2:	27 9f       	mul	r18, r23
    61b4:	90 0d       	add	r25, r0
    61b6:	11 24       	eor	r1, r1
    61b8:	13 01       	movw	r2, r6
    61ba:	28 1a       	sub	r2, r24
    61bc:	39 0a       	sbc	r3, r25
    61be:	24 9d       	mul	r18, r4
    61c0:	c0 01       	movw	r24, r0
    61c2:	25 9d       	mul	r18, r5
    61c4:	90 0d       	add	r25, r0
    61c6:	11 24       	eor	r1, r1
    61c8:	28 0e       	add	r2, r24
    61ca:	39 1e       	adc	r3, r25
    61cc:	72 01       	movw	r14, r4
    61ce:	a1 2c       	mov	r10, r1
    61d0:	b1 2c       	mov	r11, r1
    61d2:	ae ea       	ldi	r26, 0xAE	; 174
    61d4:	4a 2e       	mov	r4, r26
    61d6:	a7 e1       	ldi	r26, 0x17	; 23
    61d8:	5a 2e       	mov	r5, r26
    61da:	4e 18       	sub	r4, r14
    61dc:	5f 08       	sbc	r5, r15
    61de:	c6 1a       	sub	r12, r22
    61e0:	d7 0a       	sbc	r13, r23
    61e2:	86 1a       	sub	r8, r22
    61e4:	97 0a       	sbc	r9, r23
    61e6:	82 01       	movw	r16, r4
    61e8:	0e 0d       	add	r16, r14
    61ea:	1f 1d       	adc	r17, r15
	
	// Print each line
	for (uint8_t i = 0; i < 4; i++)
	{
		LCD_Display_Text(top+i,(const unsigned char*)Verdana8,ITEMOFFSET,(uint8_t)pgm_read_byte(&lines[i]));
    61ec:	f8 01       	movw	r30, r16
    61ee:	24 91       	lpm	r18, Z
    61f0:	30 e0       	ldi	r19, 0x00	; 0
    61f2:	4a e0       	ldi	r20, 0x0A	; 10
    61f4:	50 e0       	ldi	r21, 0x00	; 0
    61f6:	67 ef       	ldi	r22, 0xF7	; 247
    61f8:	79 e0       	ldi	r23, 0x09	; 9
    61fa:	c7 01       	movw	r24, r14
    61fc:	0e 94 ff 20 	call	0x41fe	; 0x41fe <LCD_Display_Text>

		// Handle unique or copied ranges (to reduce space)
		if (rangetype == 0)
    6200:	fe 81       	ldd	r31, Y+6	; 0x06
		{
			// Use each unique entry
			memcpy_P(&range1, &menu_ranges[(top+i - start)* sizeof(range1)], sizeof(range1));
    6202:	45 e0       	ldi	r20, 0x05	; 5
    6204:	50 e0       	ldi	r21, 0x00	; 0
	for (uint8_t i = 0; i < 4; i++)
	{
		LCD_Display_Text(top+i,(const unsigned char*)Verdana8,ITEMOFFSET,(uint8_t)pgm_read_byte(&lines[i]));

		// Handle unique or copied ranges (to reduce space)
		if (rangetype == 0)
    6206:	f1 11       	cpse	r31, r1
    6208:	04 c0       	rjmp	.+8      	; 0x6212 <print_menu_items+0xbc>
		{
			// Use each unique entry
			memcpy_P(&range1, &menu_ranges[(top+i - start)* sizeof(range1)], sizeof(range1));
    620a:	b5 01       	movw	r22, r10
    620c:	62 0d       	add	r22, r2
    620e:	73 1d       	adc	r23, r3
    6210:	01 c0       	rjmp	.+2      	; 0x6214 <print_menu_items+0xbe>
		}
		else
		{
			// Use just the first entry in array for all 
			memcpy_P(&range1, &menu_ranges[0], sizeof(range1));
    6212:	b3 01       	movw	r22, r6
    6214:	ce 01       	movw	r24, r28
    6216:	01 96       	adiw	r24, 0x01	; 1
    6218:	0e 94 f8 47 	call	0x8ff0	; 0x8ff0 <memcpy_P>
		}

		print_menu_text((values[top+i - start]), range1.style, (pgm_read_byte(&text_link[top+i - start]) + values[top+i - start]), MenuOffsets, (uint8_t)pgm_read_byte(&lines[i]));
    621c:	f8 01       	movw	r30, r16
    621e:	04 91       	lpm	r16, Z
    6220:	f6 01       	movw	r30, r12
    6222:	ee 0d       	add	r30, r14
    6224:	ff 1d       	adc	r31, r15
    6226:	e4 91       	lpm	r30, Z
    6228:	d4 01       	movw	r26, r8
    622a:	ae 0d       	add	r26, r14
    622c:	bf 1d       	adc	r27, r15
    622e:	8c 91       	ld	r24, X
    6230:	99 27       	eor	r25, r25
    6232:	87 fd       	sbrc	r24, 7
    6234:	90 95       	com	r25
    6236:	ac 01       	movw	r20, r24
    6238:	4e 0f       	add	r20, r30
    623a:	51 1d       	adc	r21, r1
    623c:	2f 81       	ldd	r18, Y+7	; 0x07
    623e:	6c 81       	ldd	r22, Y+4	; 0x04
    6240:	0e 94 01 2e 	call	0x5c02	; 0x5c02 <print_menu_text>
    6244:	ff ef       	ldi	r31, 0xFF	; 255
    6246:	ef 1a       	sub	r14, r31
    6248:	ff 0a       	sbc	r15, r31
    624a:	85 e0       	ldi	r24, 0x05	; 5
    624c:	a8 0e       	add	r10, r24
    624e:	b1 1c       	adc	r11, r1
	// Clear buffer before each update
	clear_buffer(buffer);
	print_menu_frame(0);
	
	// Print each line
	for (uint8_t i = 0; i < 4; i++)
    6250:	e4 e1       	ldi	r30, 0x14	; 20
    6252:	ae 16       	cp	r10, r30
    6254:	b1 04       	cpc	r11, r1
    6256:	09 f0       	breq	.+2      	; 0x625a <print_menu_items+0x104>
    6258:	c6 cf       	rjmp	.-116    	; 0x61e6 <print_menu_items+0x90>
		}

		print_menu_text((values[top+i - start]), range1.style, (pgm_read_byte(&text_link[top+i - start]) + values[top+i - start]), MenuOffsets, (uint8_t)pgm_read_byte(&lines[i]));
	}

	print_cursor(cursor);	// Cursor
    625a:	88 85       	ldd	r24, Y+8	; 0x08
    625c:	0e 94 a1 30 	call	0x6142	; 0x6142 <print_cursor>
	write_buffer(buffer);
    6260:	81 e0       	ldi	r24, 0x01	; 1
    6262:	91 e0       	ldi	r25, 0x01	; 1
    6264:	0e 94 ec 1e 	call	0x3dd8	; 0x3dd8 <write_buffer>
	poll_buttons(true);
    6268:	81 e0       	ldi	r24, 0x01	; 1
    626a:	0e 94 25 2e 	call	0x5c4a	; 0x5c4a <poll_buttons>
}
    626e:	2a 96       	adiw	r28, 0x0a	; 10
    6270:	0f b6       	in	r0, 0x3f	; 63
    6272:	f8 94       	cli
    6274:	de bf       	out	0x3e, r29	; 62
    6276:	0f be       	out	0x3f, r0	; 63
    6278:	cd bf       	out	0x3d, r28	; 61
    627a:	df 91       	pop	r29
    627c:	cf 91       	pop	r28
    627e:	1f 91       	pop	r17
    6280:	0f 91       	pop	r16
    6282:	ff 90       	pop	r15
    6284:	ef 90       	pop	r14
    6286:	df 90       	pop	r13
    6288:	cf 90       	pop	r12
    628a:	bf 90       	pop	r11
    628c:	af 90       	pop	r10
    628e:	9f 90       	pop	r9
    6290:	8f 90       	pop	r8
    6292:	7f 90       	pop	r7
    6294:	6f 90       	pop	r6
    6296:	5f 90       	pop	r5
    6298:	4f 90       	pop	r4
    629a:	3f 90       	pop	r3
    629c:	2f 90       	pop	r2
    629e:	08 95       	ret

000062a0 <menu_flight>:
//************************************************************
// Main menu-specific setup
//************************************************************

void menu_flight(uint8_t mode)
{
    62a0:	6f 92       	push	r6
    62a2:	7f 92       	push	r7
    62a4:	8f 92       	push	r8
    62a6:	af 92       	push	r10
    62a8:	bf 92       	push	r11
    62aa:	cf 92       	push	r12
    62ac:	df 92       	push	r13
    62ae:	ef 92       	push	r14
    62b0:	ff 92       	push	r15
    62b2:	0f 93       	push	r16
    62b4:	1f 93       	push	r17
    62b6:	cf 93       	push	r28
    62b8:	df 93       	push	r29
    62ba:	00 d0       	rcall	.+0      	; 0x62bc <menu_flight+0x1c>
    62bc:	00 d0       	rcall	.+0      	; 0x62be <menu_flight+0x1e>
    62be:	1f 92       	push	r1
    62c0:	cd b7       	in	r28, 0x3d	; 61
    62c2:	de b7       	in	r29, 0x3e	; 62
	int8_t *value_ptr;
	menu_range_t range;
	uint8_t text_link;

	// If sub-menu item has changed, reset sub-menu positions
	if (menu_flag)
    62c4:	90 91 ec 07 	lds	r25, 0x07EC
    62c8:	99 23       	and	r25, r25
    62ca:	41 f0       	breq	.+16     	; 0x62dc <menu_flight+0x3c>
	{
		sub_top = FLIGHTSTART;
    62cc:	2a ea       	ldi	r18, 0xAA	; 170
    62ce:	30 e0       	ldi	r19, 0x00	; 0
    62d0:	30 93 35 05 	sts	0x0535, r19
    62d4:	20 93 34 05 	sts	0x0534, r18
		menu_flag = 0;
    62d8:	10 92 ec 07 	sts	0x07EC, r1
	}

	while(button != BACK)
	{
		value_ptr = &Config.FlightMode[mode].Roll_P_mult;
    62dc:	92 e1       	ldi	r25, 0x12	; 18
    62de:	89 9f       	mul	r24, r25
    62e0:	30 01       	movw	r6, r0
    62e2:	11 24       	eor	r1, r1
    62e4:	c3 01       	movw	r24, r6
    62e6:	8d 51       	subi	r24, 0x1D	; 29
    62e8:	9a 4f       	sbci	r25, 0xFA	; 250
    62ea:	3c 01       	movw	r6, r24
	{
		sub_top = FLIGHTSTART;
		menu_flag = 0;
	}

	while(button != BACK)
    62ec:	80 91 ea 07 	lds	r24, 0x07EA
    62f0:	80 37       	cpi	r24, 0x70	; 112
    62f2:	09 f4       	brne	.+2      	; 0x62f6 <menu_flight+0x56>
    62f4:	5d c0       	rjmp	.+186    	; 0x63b0 <menu_flight+0x110>
	{
		value_ptr = &Config.FlightMode[mode].Roll_P_mult;

		// Print menu
		print_menu_items(sub_top, FLIGHTSTART, value_ptr, (const unsigned char*)flight_menu_ranges, 0, FLIGHTOFFSET, (const unsigned char*)FlightMenuText, cursor);
    62f6:	a0 90 05 05 	lds	r10, 0x0505
    62fa:	8c e0       	ldi	r24, 0x0C	; 12
    62fc:	c8 2e       	mov	r12, r24
    62fe:	88 e1       	ldi	r24, 0x18	; 24
    6300:	d8 2e       	mov	r13, r24
    6302:	9f e4       	ldi	r25, 0x4F	; 79
    6304:	e9 2e       	mov	r14, r25
    6306:	00 e0       	ldi	r16, 0x00	; 0
    6308:	22 eb       	ldi	r18, 0xB2	; 178
    630a:	37 e1       	ldi	r19, 0x17	; 23
    630c:	a3 01       	movw	r20, r6
    630e:	6a ea       	ldi	r22, 0xAA	; 170
    6310:	70 e0       	ldi	r23, 0x00	; 0
    6312:	80 91 34 05 	lds	r24, 0x0534
    6316:	90 91 35 05 	lds	r25, 0x0535
    631a:	0e 94 ab 30 	call	0x6156	; 0x6156 <print_menu_items>

		// Handle menu changes
		update_menu(FLIGHTITEMS, FLIGHTSTART, 0, button, &cursor, &sub_top, &menu_temp);
    631e:	2f e2       	ldi	r18, 0x2F	; 47
    6320:	c2 2e       	mov	r12, r18
    6322:	25 e0       	ldi	r18, 0x05	; 5
    6324:	d2 2e       	mov	r13, r18
    6326:	34 e3       	ldi	r19, 0x34	; 52
    6328:	e3 2e       	mov	r14, r19
    632a:	35 e0       	ldi	r19, 0x05	; 5
    632c:	f3 2e       	mov	r15, r19
    632e:	05 e0       	ldi	r16, 0x05	; 5
    6330:	15 e0       	ldi	r17, 0x05	; 5
    6332:	20 91 ea 07 	lds	r18, 0x07EA
    6336:	40 e0       	ldi	r20, 0x00	; 0
    6338:	6a ea       	ldi	r22, 0xAA	; 170
    633a:	82 e1       	ldi	r24, 0x12	; 18
    633c:	0e 94 e1 2f 	call	0x5fc2	; 0x5fc2 <update_menu>
		range = get_menu_range ((const unsigned char*)flight_menu_ranges, (menu_temp - FLIGHTSTART));
    6340:	60 91 2f 05 	lds	r22, 0x052F
    6344:	6a 5a       	subi	r22, 0xAA	; 170
    6346:	82 eb       	ldi	r24, 0xB2	; 178
    6348:	97 e1       	ldi	r25, 0x17	; 23
    634a:	0e 94 d1 2d 	call	0x5ba2	; 0x5ba2 <get_menu_range>
    634e:	29 83       	std	Y+1, r18	; 0x01
    6350:	3a 83       	std	Y+2, r19	; 0x02
    6352:	4b 83       	std	Y+3, r20	; 0x03
    6354:	5c 83       	std	Y+4, r21	; 0x04
    6356:	6d 83       	std	Y+5, r22	; 0x05

		if (button == ENTER)
    6358:	80 91 ea 07 	lds	r24, 0x07EA
    635c:	80 3e       	cpi	r24, 0xE0	; 224
    635e:	e1 f4       	brne	.+56     	; 0x6398 <menu_flight+0xf8>
		{
			text_link = pgm_read_byte(&FlightMenuText[menu_temp - FLIGHTSTART]);
    6360:	80 91 2f 05 	lds	r24, 0x052F
    6364:	90 91 30 05 	lds	r25, 0x0530
    6368:	bc 01       	movw	r22, r24
    636a:	6a 5a       	subi	r22, 0xAA	; 170
    636c:	71 09       	sbc	r23, r1
    636e:	fb 01       	movw	r30, r22
    6370:	e4 5f       	subi	r30, 0xF4	; 244
    6372:	f7 4e       	sbci	r31, 0xE7	; 231
    6374:	a4 90       	lpm	r10, Z
			do_menu_item(menu_temp, value_ptr + (menu_temp - FLIGHTSTART), 1, range, 0, text_link, false, 0);
    6376:	b1 2c       	mov	r11, r1
    6378:	66 0d       	add	r22, r6
    637a:	77 1d       	adc	r23, r7
    637c:	1f 92       	push	r1
    637e:	1f 92       	push	r1
    6380:	81 2c       	mov	r8, r1
    6382:	c1 2c       	mov	r12, r1
    6384:	e9 80       	ldd	r14, Y+1	; 0x01
    6386:	fa 80       	ldd	r15, Y+2	; 0x02
    6388:	0b 81       	ldd	r16, Y+3	; 0x03
    638a:	1c 81       	ldd	r17, Y+4	; 0x04
    638c:	2d 81       	ldd	r18, Y+5	; 0x05
    638e:	41 e0       	ldi	r20, 0x01	; 1
    6390:	0e 94 5a 2e 	call	0x5cb4	; 0x5cb4 <do_menu_item>
    6394:	0f 90       	pop	r0
    6396:	0f 90       	pop	r0
		}

		// Update limits when exiting
		if (button == ENTER)
    6398:	80 91 ea 07 	lds	r24, 0x07EA
    639c:	80 3e       	cpi	r24, 0xE0	; 224
    639e:	09 f0       	breq	.+2      	; 0x63a2 <menu_flight+0x102>
    63a0:	a5 cf       	rjmp	.-182    	; 0x62ec <menu_flight+0x4c>
		{
			UpdateLimits();			 // Update I-term limits and triggers based on percentages
    63a2:	0e 94 43 35 	call	0x6a86	; 0x6a86 <UpdateLimits>
			Save_Config_to_EEPROM(); // Save value and return
    63a6:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <Save_Config_to_EEPROM>
			Wait_BUTTON4();			 // Wait for user's finger off the button
    63aa:	0e 94 ac 32 	call	0x6558	; 0x6558 <Wait_BUTTON4>
    63ae:	9e cf       	rjmp	.-196    	; 0x62ec <menu_flight+0x4c>
		}
	}
}
    63b0:	0f 90       	pop	r0
    63b2:	0f 90       	pop	r0
    63b4:	0f 90       	pop	r0
    63b6:	0f 90       	pop	r0
    63b8:	0f 90       	pop	r0
    63ba:	df 91       	pop	r29
    63bc:	cf 91       	pop	r28
    63be:	1f 91       	pop	r17
    63c0:	0f 91       	pop	r16
    63c2:	ff 90       	pop	r15
    63c4:	ef 90       	pop	r14
    63c6:	df 90       	pop	r13
    63c8:	cf 90       	pop	r12
    63ca:	bf 90       	pop	r11
    63cc:	af 90       	pop	r10
    63ce:	8f 90       	pop	r8
    63d0:	7f 90       	pop	r7
    63d2:	6f 90       	pop	r6
    63d4:	08 95       	ret

000063d6 <do_main_menu_item>:
	}
}

void do_main_menu_item(uint8_t menuitem)
{
	switch(menuitem) 
    63d6:	90 e0       	ldi	r25, 0x00	; 0
    63d8:	fc 01       	movw	r30, r24
    63da:	ed 54       	subi	r30, 0x4D	; 77
    63dc:	f1 09       	sbc	r31, r1
    63de:	e3 31       	cpi	r30, 0x13	; 19
    63e0:	f1 05       	cpc	r31, r1
    63e2:	70 f5       	brcc	.+92     	; 0x6440 <do_main_menu_item+0x6a>
    63e4:	e2 5c       	subi	r30, 0xC2	; 194
    63e6:	ff 4f       	sbci	r31, 0xFF	; 255
    63e8:	0c 94 c1 47 	jmp	0x8f82	; 0x8f82 <__tablejump2__>
	{
		case MAINSTART:
			menu_rc_setup(2); 		// 1.General
    63ec:	82 e0       	ldi	r24, 0x02	; 2
    63ee:	01 c0       	rjmp	.+2      	; 0x63f2 <do_main_menu_item+0x1c>
			break;
		case MAINSTART+1:
			menu_rc_setup(1); 		// 2.RX setup	
    63f0:	81 e0       	ldi	r24, 0x01	; 1
    63f2:	0c 94 41 34 	jmp	0x6882	; 0x6882 <menu_rc_setup>
			break;
		case MAINSTART+2:
			Display_rcinput();		// 3.RX inputs
    63f6:	0c 94 82 11 	jmp	0x2304	; 0x2304 <Display_rcinput>
			break;
		case MAINSTART+3:
			Display_sticks(); 		// 4.Stick polarity	
    63fa:	0c 94 44 15 	jmp	0x2a88	; 0x2a88 <Display_sticks>
			break;
		case MAINSTART+4:
			Display_sensors();		// 5.Sensor calibration
    63fe:	0c 94 81 12 	jmp	0x2502	; 0x2502 <Display_sensors>
			break;
		case MAINSTART+5:
			Display_balance();		// 6.Level meter
    6402:	0c 94 ee 10 	jmp	0x21dc	; 0x21dc <Display_balance>
			break;
		case MAINSTART+6:
			menu_flight(0);			// 7.Flight profile 1
    6406:	80 e0       	ldi	r24, 0x00	; 0
    6408:	01 c0       	rjmp	.+2      	; 0x640c <do_main_menu_item+0x36>
			break;
		case MAINSTART+7:
			menu_flight(1); 		// 8.Flight profile 2
    640a:	81 e0       	ldi	r24, 0x01	; 1
    640c:	0c 94 50 31 	jmp	0x62a0	; 0x62a0 <menu_flight>
			break;
		case MAINSTART+8:
			menu_mixer(0);			// 9.OUT1 Mixer
    6410:	80 e0       	ldi	r24, 0x00	; 0
    6412:	0d c0       	rjmp	.+26     	; 0x642e <do_main_menu_item+0x58>
			break;
		case MAINSTART+9:
			menu_mixer(1);			// 10.OUT2 Mixer
    6414:	81 e0       	ldi	r24, 0x01	; 1
    6416:	0b c0       	rjmp	.+22     	; 0x642e <do_main_menu_item+0x58>
			break;
		case MAINSTART+10:
			menu_mixer(2);			// 11.OUT3 Mixer
    6418:	82 e0       	ldi	r24, 0x02	; 2
    641a:	09 c0       	rjmp	.+18     	; 0x642e <do_main_menu_item+0x58>
			break;
		case MAINSTART+11:
			menu_mixer(3);			// 12.OUT4 Mixer
    641c:	83 e0       	ldi	r24, 0x03	; 3
    641e:	07 c0       	rjmp	.+14     	; 0x642e <do_main_menu_item+0x58>
			break;
		case MAINSTART+12:
			menu_mixer(4);			// 13.OUT5 Mixer
    6420:	84 e0       	ldi	r24, 0x04	; 4
    6422:	05 c0       	rjmp	.+10     	; 0x642e <do_main_menu_item+0x58>
			break;
		case MAINSTART+13:
			menu_mixer(5);			// 14.OUT6 Mixer
    6424:	85 e0       	ldi	r24, 0x05	; 5
    6426:	03 c0       	rjmp	.+6      	; 0x642e <do_main_menu_item+0x58>
			break;
		case MAINSTART+14:
			menu_mixer(6);			// 15.OUT7 Mixer
    6428:	86 e0       	ldi	r24, 0x06	; 6
    642a:	01 c0       	rjmp	.+2      	; 0x642e <do_main_menu_item+0x58>
			break;
		case MAINSTART+15:
			menu_mixer(7);			// 16.OUT8 Mixer
    642c:	87 e0       	ldi	r24, 0x07	; 7
    642e:	0c 94 b9 32 	jmp	0x6572	; 0x6572 <menu_mixer>
			break;
		case MAINSTART+16:
			menu_servo_setup(1);	// 17.Servo direction
    6432:	81 e0       	ldi	r24, 0x01	; 1
    6434:	03 c0       	rjmp	.+6      	; 0x643c <do_main_menu_item+0x66>
			break;
		case MAINSTART+17:
			menu_servo_setup(2); 	// 18.Neg. Servo trvl. (%)
    6436:	82 e0       	ldi	r24, 0x02	; 2
    6438:	01 c0       	rjmp	.+2      	; 0x643c <do_main_menu_item+0x66>
			break;
		case MAINSTART+18:
			menu_servo_setup(3); 	// 19.Pos. Servo trvl. (%)
    643a:	83 e0       	ldi	r24, 0x03	; 3
    643c:	0c 94 54 33 	jmp	0x66a8	; 0x66a8 <menu_servo_setup>
    6440:	08 95       	ret

00006442 <Wait_BUTTON1>:
	} // Switch
}

void Wait_BUTTON1(void)
{
	while(BUTTON1 == 0)
    6442:	1f 99       	sbic	0x03, 7	; 3
    6444:	0a c0       	rjmp	.+20     	; 0x645a <Wait_BUTTON1+0x18>
    6446:	2f e3       	ldi	r18, 0x3F	; 63
    6448:	8d e0       	ldi	r24, 0x0D	; 13
    644a:	93 e0       	ldi	r25, 0x03	; 3
    644c:	21 50       	subi	r18, 0x01	; 1
    644e:	80 40       	sbci	r24, 0x00	; 0
    6450:	90 40       	sbci	r25, 0x00	; 0
    6452:	e1 f7       	brne	.-8      	; 0x644c <Wait_BUTTON1+0xa>
    6454:	00 c0       	rjmp	.+0      	; 0x6456 <Wait_BUTTON1+0x14>
    6456:	00 00       	nop
    6458:	f4 cf       	rjmp	.-24     	; 0x6442 <Wait_BUTTON1>
	{
		_delay_ms(50);
	}
}
    645a:	08 95       	ret

0000645c <menu_main>:
uint16_t main_top = MAINSTART;
uint16_t sub_top = 0;
uint8_t menu_flag;

void menu_main(void)
{
    645c:	af 92       	push	r10
    645e:	bf 92       	push	r11
    6460:	cf 92       	push	r12
    6462:	df 92       	push	r13
    6464:	ef 92       	push	r14
    6466:	ff 92       	push	r15
    6468:	0f 93       	push	r16
    646a:	1f 93       	push	r17
    646c:	cf 93       	push	r28
    646e:	df 93       	push	r29
	static uint8_t main_cursor = LINE0;	// These are now static so as to remember the main menu position
	static uint16_t main_temp = 0;
	static uint8_t old_menu = 0;

	button = NONE;
    6470:	80 ef       	ldi	r24, 0xF0	; 240
    6472:	80 93 ea 07 	sts	0x07EA, r24

	// Wait until user's finger is off button 1
	Wait_BUTTON1();
    6476:	0e 94 21 32 	call	0x6442	; 0x6442 <Wait_BUTTON1>

		// If main menu item has changed, reset sub-menu positions
		// and flag to sub-menus that positions need to be reset
		if (main_temp != old_menu)
		{
			cursor = LINE0;
    647a:	23 e0       	ldi	r18, 0x03	; 3
    647c:	b2 2e       	mov	r11, r18

		// If ENTER pressed, jump to menu 
		if (button == ENTER)
		{
			do_main_menu_item(main_temp);
			button = NONE;
    647e:	30 ef       	ldi	r19, 0xF0	; 240
    6480:	a3 2e       	mov	r10, r19
	button = NONE;

	// Wait until user's finger is off button 1
	Wait_BUTTON1();
	
	while(button != BACK)
    6482:	80 91 ea 07 	lds	r24, 0x07EA
    6486:	80 37       	cpi	r24, 0x70	; 112
    6488:	09 f4       	brne	.+2      	; 0x648c <menu_main+0x30>
    648a:	5b c0       	rjmp	.+182    	; 0x6542 <menu_main+0xe6>
	{
		// Clear buffer before each update
		clear_buffer(buffer);	
    648c:	81 e0       	ldi	r24, 0x01	; 1
    648e:	91 e0       	ldi	r25, 0x01	; 1
    6490:	0e 94 1e 1f 	call	0x3e3c	; 0x3e3c <clear_buffer>

		// Print menu
		print_menu_frame(0);													// Frame
    6494:	80 e0       	ldi	r24, 0x00	; 0
    6496:	0e 94 7c 2d 	call	0x5af8	; 0x5af8 <print_menu_frame>
		
		for (uint16_t i = 0; i < 4; i++)
    649a:	c0 e0       	ldi	r28, 0x00	; 0
    649c:	d0 e0       	ldi	r29, 0x00	; 0
    649e:	fe 01       	movw	r30, r28
    64a0:	e2 55       	subi	r30, 0x52	; 82
    64a2:	f8 4e       	sbci	r31, 0xE8	; 232
		{
			LCD_Display_Text(main_top+i,(const unsigned char*)Verdana8,ITEMOFFSET,(uint8_t)pgm_read_byte(&lines[i]));	// Lines
    64a4:	24 91       	lpm	r18, Z
    64a6:	30 e0       	ldi	r19, 0x00	; 0
    64a8:	80 91 07 05 	lds	r24, 0x0507
    64ac:	90 91 08 05 	lds	r25, 0x0508
    64b0:	4a e0       	ldi	r20, 0x0A	; 10
    64b2:	50 e0       	ldi	r21, 0x00	; 0
    64b4:	67 ef       	ldi	r22, 0xF7	; 247
    64b6:	79 e0       	ldi	r23, 0x09	; 9
    64b8:	8c 0f       	add	r24, r28
    64ba:	9d 1f       	adc	r25, r29
    64bc:	0e 94 ff 20 	call	0x41fe	; 0x41fe <LCD_Display_Text>
		clear_buffer(buffer);	

		// Print menu
		print_menu_frame(0);													// Frame
		
		for (uint16_t i = 0; i < 4; i++)
    64c0:	21 96       	adiw	r28, 0x01	; 1
    64c2:	c4 30       	cpi	r28, 0x04	; 4
    64c4:	d1 05       	cpc	r29, r1
    64c6:	59 f7       	brne	.-42     	; 0x649e <menu_main+0x42>
		{
			LCD_Display_Text(main_top+i,(const unsigned char*)Verdana8,ITEMOFFSET,(uint8_t)pgm_read_byte(&lines[i]));	// Lines
		}

		print_cursor(main_cursor);												// Cursor
    64c8:	80 91 06 05 	lds	r24, 0x0506
    64cc:	0e 94 a1 30 	call	0x6142	; 0x6142 <print_cursor>
		write_buffer(buffer);
    64d0:	81 e0       	ldi	r24, 0x01	; 1
    64d2:	91 e0       	ldi	r25, 0x01	; 1
    64d4:	0e 94 ec 1e 	call	0x3dd8	; 0x3dd8 <write_buffer>

		// Poll buttons when idle
		poll_buttons(true);
    64d8:	81 e0       	ldi	r24, 0x01	; 1
    64da:	0e 94 25 2e 	call	0x5c4a	; 0x5c4a <poll_buttons>

		// Handle menu changes
		update_menu(MAINITEMS, MAINSTART, 0, button, &main_cursor, &main_top, &main_temp);
    64de:	82 e3       	ldi	r24, 0x32	; 50
    64e0:	c8 2e       	mov	r12, r24
    64e2:	85 e0       	ldi	r24, 0x05	; 5
    64e4:	d8 2e       	mov	r13, r24
    64e6:	97 e0       	ldi	r25, 0x07	; 7
    64e8:	e9 2e       	mov	r14, r25
    64ea:	95 e0       	ldi	r25, 0x05	; 5
    64ec:	f9 2e       	mov	r15, r25
    64ee:	06 e0       	ldi	r16, 0x06	; 6
    64f0:	15 e0       	ldi	r17, 0x05	; 5
    64f2:	20 91 ea 07 	lds	r18, 0x07EA
    64f6:	40 e0       	ldi	r20, 0x00	; 0
    64f8:	6d e4       	ldi	r22, 0x4D	; 77
    64fa:	83 e1       	ldi	r24, 0x13	; 19
    64fc:	0e 94 e1 2f 	call	0x5fc2	; 0x5fc2 <update_menu>

		// If main menu item has changed, reset sub-menu positions
		// and flag to sub-menus that positions need to be reset
		if (main_temp != old_menu)
    6500:	80 91 32 05 	lds	r24, 0x0532
    6504:	90 91 33 05 	lds	r25, 0x0533
    6508:	20 91 31 05 	lds	r18, 0x0531
    650c:	30 e0       	ldi	r19, 0x00	; 0
    650e:	82 17       	cp	r24, r18
    6510:	93 07       	cpc	r25, r19
    6512:	59 f0       	breq	.+22     	; 0x652a <menu_main+0xce>
		{
			cursor = LINE0;
    6514:	b0 92 05 05 	sts	0x0505, r11
			menu_temp = 0;
    6518:	10 92 30 05 	sts	0x0530, r1
    651c:	10 92 2f 05 	sts	0x052F, r1
			old_menu = main_temp;
    6520:	80 93 31 05 	sts	0x0531, r24
			menu_flag = 1;
    6524:	21 e0       	ldi	r18, 0x01	; 1
    6526:	20 93 ec 07 	sts	0x07EC, r18
		}

		// If ENTER pressed, jump to menu 
		if (button == ENTER)
    652a:	20 91 ea 07 	lds	r18, 0x07EA
    652e:	20 3e       	cpi	r18, 0xE0	; 224
    6530:	09 f0       	breq	.+2      	; 0x6534 <menu_main+0xd8>
    6532:	a7 cf       	rjmp	.-178    	; 0x6482 <menu_main+0x26>
		{
			do_main_menu_item(main_temp);
    6534:	0e 94 eb 31 	call	0x63d6	; 0x63d6 <do_main_menu_item>
			button = NONE;
    6538:	a0 92 ea 07 	sts	0x07EA, r10

			// Wait until user's finger is off button 1
			Wait_BUTTON1();
    653c:	0e 94 21 32 	call	0x6442	; 0x6442 <Wait_BUTTON1>
    6540:	a0 cf       	rjmp	.-192    	; 0x6482 <menu_main+0x26>
		}
	}
}
    6542:	df 91       	pop	r29
    6544:	cf 91       	pop	r28
    6546:	1f 91       	pop	r17
    6548:	0f 91       	pop	r16
    654a:	ff 90       	pop	r15
    654c:	ef 90       	pop	r14
    654e:	df 90       	pop	r13
    6550:	cf 90       	pop	r12
    6552:	bf 90       	pop	r11
    6554:	af 90       	pop	r10
    6556:	08 95       	ret

00006558 <Wait_BUTTON4>:
	}
}

void Wait_BUTTON4(void)
{
	while(BUTTON4 == 0)
    6558:	1c 99       	sbic	0x03, 4	; 3
    655a:	0a c0       	rjmp	.+20     	; 0x6570 <Wait_BUTTON4+0x18>
    655c:	2f e3       	ldi	r18, 0x3F	; 63
    655e:	8d e0       	ldi	r24, 0x0D	; 13
    6560:	93 e0       	ldi	r25, 0x03	; 3
    6562:	21 50       	subi	r18, 0x01	; 1
    6564:	80 40       	sbci	r24, 0x00	; 0
    6566:	90 40       	sbci	r25, 0x00	; 0
    6568:	e1 f7       	brne	.-8      	; 0x6562 <Wait_BUTTON4+0xa>
    656a:	00 c0       	rjmp	.+0      	; 0x656c <Wait_BUTTON4+0x14>
    656c:	00 00       	nop
    656e:	f4 cf       	rjmp	.-24     	; 0x6558 <Wait_BUTTON4>
	{
		_delay_ms(50);
	}
    6570:	08 95       	ret

00006572 <menu_mixer>:
//************************************************************
// Main menu-specific setup
//************************************************************

void menu_mixer(uint8_t i)
{
    6572:	6f 92       	push	r6
    6574:	7f 92       	push	r7
    6576:	8f 92       	push	r8
    6578:	af 92       	push	r10
    657a:	bf 92       	push	r11
    657c:	cf 92       	push	r12
    657e:	df 92       	push	r13
    6580:	ef 92       	push	r14
    6582:	ff 92       	push	r15
    6584:	0f 93       	push	r16
    6586:	1f 93       	push	r17
    6588:	cf 93       	push	r28
    658a:	df 93       	push	r29
    658c:	00 d0       	rcall	.+0      	; 0x658e <menu_mixer+0x1c>
    658e:	00 d0       	rcall	.+0      	; 0x6590 <menu_mixer+0x1e>
    6590:	1f 92       	push	r1
    6592:	cd b7       	in	r28, 0x3d	; 61
    6594:	de b7       	in	r29, 0x3e	; 62
	int8_t *value_ptr;
	menu_range_t range;
	uint8_t text_link = 0;

	// If sub-menu item has changed, reset sub-menu positions
	if (menu_flag)
    6596:	90 91 ec 07 	lds	r25, 0x07EC
    659a:	99 23       	and	r25, r25
    659c:	41 f0       	breq	.+16     	; 0x65ae <menu_mixer+0x3c>
	{
		sub_top = MIXERSTART;
    659e:	2e eb       	ldi	r18, 0xBE	; 190
    65a0:	30 e0       	ldi	r19, 0x00	; 0
    65a2:	30 93 35 05 	sts	0x0535, r19
    65a6:	20 93 34 05 	sts	0x0534, r18
		menu_flag = 0;
    65aa:	10 92 ec 07 	sts	0x07EC, r1
	}

	while(button != BACK)
	{
		value_ptr = &Config.Channel[i].Motor_marker;
    65ae:	96 e2       	ldi	r25, 0x26	; 38
    65b0:	89 9f       	mul	r24, r25
    65b2:	30 01       	movw	r6, r0
    65b4:	11 24       	eor	r1, r1
    65b6:	c3 01       	movw	r24, r6
    65b8:	89 5b       	subi	r24, 0xB9	; 185
    65ba:	99 4f       	sbci	r25, 0xF9	; 249
    65bc:	3c 01       	movw	r6, r24
	{
		sub_top = MIXERSTART;
		menu_flag = 0;
	}

	while(button != BACK)
    65be:	80 91 ea 07 	lds	r24, 0x07EA
    65c2:	80 37       	cpi	r24, 0x70	; 112
    65c4:	09 f4       	brne	.+2      	; 0x65c8 <menu_mixer+0x56>
    65c6:	5d c0       	rjmp	.+186    	; 0x6682 <menu_mixer+0x110>
	{
		value_ptr = &Config.Channel[i].Motor_marker;

		// Print menu
		print_menu_items(sub_top, MIXERSTART, value_ptr, (const unsigned char*)mixer_menu_ranges, 0, MIXOFFSET, (const unsigned char*)MixerMenuText, cursor);
    65c8:	a0 90 05 05 	lds	r10, 0x0505
    65cc:	88 ec       	ldi	r24, 0xC8	; 200
    65ce:	c8 2e       	mov	r12, r24
    65d0:	88 e1       	ldi	r24, 0x18	; 24
    65d2:	d8 2e       	mov	r13, r24
    65d4:	99 e5       	ldi	r25, 0x59	; 89
    65d6:	e9 2e       	mov	r14, r25
    65d8:	00 e0       	ldi	r16, 0x00	; 0
    65da:	2e e1       	ldi	r18, 0x1E	; 30
    65dc:	38 e1       	ldi	r19, 0x18	; 24
    65de:	a3 01       	movw	r20, r6
    65e0:	6e eb       	ldi	r22, 0xBE	; 190
    65e2:	70 e0       	ldi	r23, 0x00	; 0
    65e4:	80 91 34 05 	lds	r24, 0x0534
    65e8:	90 91 35 05 	lds	r25, 0x0535
    65ec:	0e 94 ab 30 	call	0x6156	; 0x6156 <print_menu_items>

		// Handle menu changes
		update_menu(MIXERITEMS, MIXERSTART, 0, button, &cursor, &sub_top, &menu_temp);
    65f0:	2f e2       	ldi	r18, 0x2F	; 47
    65f2:	c2 2e       	mov	r12, r18
    65f4:	25 e0       	ldi	r18, 0x05	; 5
    65f6:	d2 2e       	mov	r13, r18
    65f8:	34 e3       	ldi	r19, 0x34	; 52
    65fa:	e3 2e       	mov	r14, r19
    65fc:	35 e0       	ldi	r19, 0x05	; 5
    65fe:	f3 2e       	mov	r15, r19
    6600:	05 e0       	ldi	r16, 0x05	; 5
    6602:	15 e0       	ldi	r17, 0x05	; 5
    6604:	20 91 ea 07 	lds	r18, 0x07EA
    6608:	40 e0       	ldi	r20, 0x00	; 0
    660a:	6e eb       	ldi	r22, 0xBE	; 190
    660c:	82 e2       	ldi	r24, 0x22	; 34
    660e:	0e 94 e1 2f 	call	0x5fc2	; 0x5fc2 <update_menu>
		range = get_menu_range ((const unsigned char*)mixer_menu_ranges, menu_temp - MIXERSTART);
    6612:	60 91 2f 05 	lds	r22, 0x052F
    6616:	6e 5b       	subi	r22, 0xBE	; 190
    6618:	8e e1       	ldi	r24, 0x1E	; 30
    661a:	98 e1       	ldi	r25, 0x18	; 24
    661c:	0e 94 d1 2d 	call	0x5ba2	; 0x5ba2 <get_menu_range>
    6620:	29 83       	std	Y+1, r18	; 0x01
    6622:	3a 83       	std	Y+2, r19	; 0x02
    6624:	4b 83       	std	Y+3, r20	; 0x03
    6626:	5c 83       	std	Y+4, r21	; 0x04
    6628:	6d 83       	std	Y+5, r22	; 0x05

		if (button == ENTER)
    662a:	80 91 ea 07 	lds	r24, 0x07EA
    662e:	80 3e       	cpi	r24, 0xE0	; 224
    6630:	e1 f4       	brne	.+56     	; 0x666a <menu_mixer+0xf8>
		{
			text_link = pgm_read_byte(&MixerMenuText[menu_temp - MIXERSTART]);
    6632:	80 91 2f 05 	lds	r24, 0x052F
    6636:	90 91 30 05 	lds	r25, 0x0530
    663a:	bc 01       	movw	r22, r24
    663c:	6e 5b       	subi	r22, 0xBE	; 190
    663e:	71 09       	sbc	r23, r1
    6640:	fb 01       	movw	r30, r22
    6642:	e8 53       	subi	r30, 0x38	; 56
    6644:	f7 4e       	sbci	r31, 0xE7	; 231
    6646:	a4 90       	lpm	r10, Z
			do_menu_item(menu_temp, value_ptr + (menu_temp - MIXERSTART), 1, range, 0, text_link, false, 0);
    6648:	b1 2c       	mov	r11, r1
    664a:	66 0d       	add	r22, r6
    664c:	77 1d       	adc	r23, r7
    664e:	1f 92       	push	r1
    6650:	1f 92       	push	r1
    6652:	81 2c       	mov	r8, r1
    6654:	c1 2c       	mov	r12, r1
    6656:	e9 80       	ldd	r14, Y+1	; 0x01
    6658:	fa 80       	ldd	r15, Y+2	; 0x02
    665a:	0b 81       	ldd	r16, Y+3	; 0x03
    665c:	1c 81       	ldd	r17, Y+4	; 0x04
    665e:	2d 81       	ldd	r18, Y+5	; 0x05
    6660:	41 e0       	ldi	r20, 0x01	; 1
    6662:	0e 94 5a 2e 	call	0x5cb4	; 0x5cb4 <do_menu_item>
    6666:	0f 90       	pop	r0
    6668:	0f 90       	pop	r0
		}

		// Update limits when exiting
		if (button == ENTER)
    666a:	80 91 ea 07 	lds	r24, 0x07EA
    666e:	80 3e       	cpi	r24, 0xE0	; 224
    6670:	09 f0       	breq	.+2      	; 0x6674 <menu_mixer+0x102>
    6672:	a5 cf       	rjmp	.-182    	; 0x65be <menu_mixer+0x4c>
		{
			UpdateLimits();			 // Update travel limits based on percentages
    6674:	0e 94 43 35 	call	0x6a86	; 0x6a86 <UpdateLimits>
			Save_Config_to_EEPROM(); // Save value and return
    6678:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <Save_Config_to_EEPROM>
			Wait_BUTTON4();			 // Wait for user's finger off the button
    667c:	0e 94 ac 32 	call	0x6558	; 0x6558 <Wait_BUTTON4>
    6680:	9e cf       	rjmp	.-196    	; 0x65be <menu_mixer+0x4c>
		}
	}
}
    6682:	0f 90       	pop	r0
    6684:	0f 90       	pop	r0
    6686:	0f 90       	pop	r0
    6688:	0f 90       	pop	r0
    668a:	0f 90       	pop	r0
    668c:	df 91       	pop	r29
    668e:	cf 91       	pop	r28
    6690:	1f 91       	pop	r17
    6692:	0f 91       	pop	r16
    6694:	ff 90       	pop	r15
    6696:	ef 90       	pop	r14
    6698:	df 90       	pop	r13
    669a:	cf 90       	pop	r12
    669c:	bf 90       	pop	r11
    669e:	af 90       	pop	r10
    66a0:	8f 90       	pop	r8
    66a2:	7f 90       	pop	r7
    66a4:	6f 90       	pop	r6
    66a6:	08 95       	ret

000066a8 <menu_servo_setup>:
//************************************************************
// Main menu-specific setup
//************************************************************

void menu_servo_setup(uint8_t section)
{
    66a8:	2f 92       	push	r2
    66aa:	3f 92       	push	r3
    66ac:	4f 92       	push	r4
    66ae:	5f 92       	push	r5
    66b0:	6f 92       	push	r6
    66b2:	7f 92       	push	r7
    66b4:	8f 92       	push	r8
    66b6:	9f 92       	push	r9
    66b8:	af 92       	push	r10
    66ba:	bf 92       	push	r11
    66bc:	cf 92       	push	r12
    66be:	df 92       	push	r13
    66c0:	ef 92       	push	r14
    66c2:	ff 92       	push	r15
    66c4:	0f 93       	push	r16
    66c6:	1f 93       	push	r17
    66c8:	cf 93       	push	r28
    66ca:	df 93       	push	r29
    66cc:	cd b7       	in	r28, 0x3d	; 61
    66ce:	de b7       	in	r29, 0x3e	; 62
    66d0:	28 97       	sbiw	r28, 0x08	; 8
    66d2:	0f b6       	in	r0, 0x3f	; 63
    66d4:	f8 94       	cli
    66d6:	de bf       	out	0x3e, r29	; 62
    66d8:	0f be       	out	0x3f, r0	; 63
    66da:	cd bf       	out	0x3d, r28	; 61
    66dc:	98 2e       	mov	r9, r24
	uint8_t i = 0;
	bool	servo_enable = false;
	bool	zero_setting = false;

	// If submenu item has changed, reset submenu positions
	if (menu_flag)
    66de:	80 91 ec 07 	lds	r24, 0x07EC
    66e2:	88 23       	and	r24, r24
    66e4:	41 f0       	breq	.+16     	; 0x66f6 <menu_servo_setup+0x4e>
	{
		sub_top = SERVOSTART;
    66e6:	86 ee       	ldi	r24, 0xE6	; 230
    66e8:	90 e0       	ldi	r25, 0x00	; 0
    66ea:	90 93 35 05 	sts	0x0535, r25
    66ee:	80 93 34 05 	sts	0x0534, r24
		menu_flag = 0;
    66f2:	10 92 ec 07 	sts	0x07EC, r1
			}

			// Do not allow servo enable for throttle if in CPPM mode
			if ((Config.Channel[menu_temp - SERVOSTART].P1_source_a == THROTTLE) && (Config.RxMode == CPPM_MODE))
			{
				servo_enable = false;
    66f6:	1e 82       	std	Y+6, r1	; 0x06
    66f8:	53 e7       	ldi	r21, 0x73	; 115
    66fa:	65 2e       	mov	r6, r21
    66fc:	57 e0       	ldi	r21, 0x07	; 7
    66fe:	75 2e       	mov	r7, r21
					break;
			}
		}

		// Print menu
		print_menu_items(sub_top, SERVOSTART, value_ptr, (const unsigned char*)servo_menu_ranges[section - 1], 1, SERVOOFFSET, (const unsigned char*)ServoMenuText[section - 1], cursor);
    6700:	29 2c       	mov	r2, r9
    6702:	31 2c       	mov	r3, r1
    6704:	41 e0       	ldi	r20, 0x01	; 1
    6706:	24 1a       	sub	r2, r20
    6708:	31 08       	sbc	r3, r1
    670a:	85 e0       	ldi	r24, 0x05	; 5
    670c:	82 9d       	mul	r24, r2
    670e:	20 01       	movw	r4, r0
    6710:	83 9d       	mul	r24, r3
    6712:	50 0c       	add	r5, r0
    6714:	11 24       	eor	r1, r1
    6716:	c2 01       	movw	r24, r4
    6718:	86 51       	subi	r24, 0x16	; 22
    671a:	97 4e       	sbci	r25, 0xE7	; 231
    671c:	2c 01       	movw	r4, r24
    671e:	63 e0       	ldi	r22, 0x03	; 3
    6720:	22 0c       	add	r2, r2
    6722:	33 1c       	adc	r3, r3
    6724:	6a 95       	dec	r22
    6726:	e1 f7       	brne	.-8      	; 0x6720 <menu_servo_setup+0x78>
    6728:	d1 01       	movw	r26, r2
    672a:	a7 50       	subi	r26, 0x07	; 7
    672c:	b7 4e       	sbci	r27, 0xE7	; 231
    672e:	b8 87       	std	Y+8, r27	; 0x08
    6730:	af 83       	std	Y+7, r26	; 0x07
		menu_flag = 0;
	}

	// Get menu offsets
	// 1 = Reverse, 2 = Min, 3 = Max
	while(button != BACK)
    6732:	80 91 ea 07 	lds	r24, 0x07EA
    6736:	80 37       	cpi	r24, 0x70	; 112
    6738:	09 f4       	brne	.+2      	; 0x673c <menu_servo_setup+0x94>
    673a:	8a c0       	rjmp	.+276    	; 0x6850 <menu_servo_setup+0x1a8>
    673c:	88 e0       	ldi	r24, 0x08	; 8
    673e:	81 2c       	mov	r8, r1
	{
		// Load values from eeprom
		for (i = 0; i < SERVOITEMS; i++)
		{
			switch(section)
    6740:	b2 e0       	ldi	r27, 0x02	; 2
    6742:	9b 16       	cp	r9, r27
    6744:	61 f0       	breq	.+24     	; 0x675e <menu_servo_setup+0xb6>
    6746:	43 e0       	ldi	r20, 0x03	; 3
    6748:	94 12       	cpse	r9, r20
    674a:	11 c0       	rjmp	.+34     	; 0x676e <menu_servo_setup+0xc6>
					zero_setting = true;
					break;
				case 3:
					value_ptr = &Config.max_travel[0];
					servo_enable = true;
					zero_setting = true;
    674c:	a1 e0       	ldi	r26, 0x01	; 1
    674e:	ae 83       	std	Y+6, r26	; 0x06
					servo_enable = true;
					zero_setting = true;
					break;
				case 3:
					value_ptr = &Config.max_travel[0];
					servo_enable = true;
    6750:	88 24       	eor	r8, r8
    6752:	83 94       	inc	r8
					value_ptr = &Config.min_travel[0];
					servo_enable = true;
					zero_setting = true;
					break;
				case 3:
					value_ptr = &Config.max_travel[0];
    6754:	33 e8       	ldi	r19, 0x83	; 131
    6756:	63 2e       	mov	r6, r19
    6758:	37 e0       	ldi	r19, 0x07	; 7
    675a:	73 2e       	mov	r7, r19
					servo_enable = true;
					zero_setting = true;
					break;
    675c:	08 c0       	rjmp	.+16     	; 0x676e <menu_servo_setup+0xc6>
				case 1:
					break;
				case 2:
					value_ptr = &Config.min_travel[0];
					servo_enable = true;
					zero_setting = true;
    675e:	91 e0       	ldi	r25, 0x01	; 1
    6760:	9e 83       	std	Y+6, r25	; 0x06
			{
				case 1:
					break;
				case 2:
					value_ptr = &Config.min_travel[0];
					servo_enable = true;
    6762:	88 24       	eor	r8, r8
    6764:	83 94       	inc	r8
			switch(section)
			{
				case 1:
					break;
				case 2:
					value_ptr = &Config.min_travel[0];
    6766:	4b e7       	ldi	r20, 0x7B	; 123
    6768:	64 2e       	mov	r6, r20
    676a:	47 e0       	ldi	r20, 0x07	; 7
    676c:	74 2e       	mov	r7, r20
    676e:	81 50       	subi	r24, 0x01	; 1
	// Get menu offsets
	// 1 = Reverse, 2 = Min, 3 = Max
	while(button != BACK)
	{
		// Load values from eeprom
		for (i = 0; i < SERVOITEMS; i++)
    6770:	39 f7       	brne	.-50     	; 0x6740 <menu_servo_setup+0x98>
					break;
			}
		}

		// Print menu
		print_menu_items(sub_top, SERVOSTART, value_ptr, (const unsigned char*)servo_menu_ranges[section - 1], 1, SERVOOFFSET, (const unsigned char*)ServoMenuText[section - 1], cursor);
    6772:	a0 90 05 05 	lds	r10, 0x0505
    6776:	cf 80       	ldd	r12, Y+7	; 0x07
    6778:	d8 84       	ldd	r13, Y+8	; 0x08
    677a:	80 e5       	ldi	r24, 0x50	; 80
    677c:	e8 2e       	mov	r14, r24
    677e:	01 e0       	ldi	r16, 0x01	; 1
    6780:	92 01       	movw	r18, r4
    6782:	a3 01       	movw	r20, r6
    6784:	66 ee       	ldi	r22, 0xE6	; 230
    6786:	70 e0       	ldi	r23, 0x00	; 0
    6788:	80 91 34 05 	lds	r24, 0x0534
    678c:	90 91 35 05 	lds	r25, 0x0535
    6790:	0e 94 ab 30 	call	0x6156	; 0x6156 <print_menu_items>

		// Handle menu changes
		update_menu(SERVOITEMS, SERVOSTART, 0, button, &cursor, &sub_top, &menu_temp);
    6794:	9f e2       	ldi	r25, 0x2F	; 47
    6796:	c9 2e       	mov	r12, r25
    6798:	95 e0       	ldi	r25, 0x05	; 5
    679a:	d9 2e       	mov	r13, r25
    679c:	24 e3       	ldi	r18, 0x34	; 52
    679e:	e2 2e       	mov	r14, r18
    67a0:	25 e0       	ldi	r18, 0x05	; 5
    67a2:	f2 2e       	mov	r15, r18
    67a4:	05 e0       	ldi	r16, 0x05	; 5
    67a6:	15 e0       	ldi	r17, 0x05	; 5
    67a8:	20 91 ea 07 	lds	r18, 0x07EA
    67ac:	40 e0       	ldi	r20, 0x00	; 0
    67ae:	66 ee       	ldi	r22, 0xE6	; 230
    67b0:	88 e0       	ldi	r24, 0x08	; 8
    67b2:	0e 94 e1 2f 	call	0x5fc2	; 0x5fc2 <update_menu>
		range = get_menu_range ((const unsigned char*)servo_menu_ranges[section - 1], 0);
    67b6:	60 e0       	ldi	r22, 0x00	; 0
    67b8:	c2 01       	movw	r24, r4
    67ba:	0e 94 d1 2d 	call	0x5ba2	; 0x5ba2 <get_menu_range>
    67be:	29 83       	std	Y+1, r18	; 0x01
    67c0:	3a 83       	std	Y+2, r19	; 0x02
    67c2:	4b 83       	std	Y+3, r20	; 0x03
    67c4:	5c 83       	std	Y+4, r21	; 0x04
    67c6:	6d 83       	std	Y+5, r22	; 0x05

		if (button == ENTER)
    67c8:	80 91 ea 07 	lds	r24, 0x07EA
    67cc:	80 3e       	cpi	r24, 0xE0	; 224
    67ce:	a1 f5       	brne	.+104    	; 0x6838 <menu_servo_setup+0x190>
		{
			text_link = pgm_read_byte(&ServoMenuText[section - 1][menu_temp - SERVOSTART]);
    67d0:	80 91 2f 05 	lds	r24, 0x052F
    67d4:	90 91 30 05 	lds	r25, 0x0530
    67d8:	9c 01       	movw	r18, r24
    67da:	26 5e       	subi	r18, 0xE6	; 230
    67dc:	31 09       	sbc	r19, r1
    67de:	f9 01       	movw	r30, r18
    67e0:	e2 0d       	add	r30, r2
    67e2:	f3 1d       	adc	r31, r3
    67e4:	e7 50       	subi	r30, 0x07	; 7
    67e6:	f7 4e       	sbci	r31, 0xE7	; 231
    67e8:	e4 91       	lpm	r30, Z
    67ea:	b3 01       	movw	r22, r6
    67ec:	62 0f       	add	r22, r18
    67ee:	73 1f       	adc	r23, r19

			// Zero limits if adjusting
			if (zero_setting)
    67f0:	be 81       	ldd	r27, Y+6	; 0x06
    67f2:	bb 23       	and	r27, r27
    67f4:	11 f0       	breq	.+4      	; 0x67fa <menu_servo_setup+0x152>
			{
				value_ptr[menu_temp - SERVOSTART] = 0;
    67f6:	db 01       	movw	r26, r22
    67f8:	1c 92       	st	X, r1
			}

			// Do not allow servo enable for throttle if in CPPM mode
			if ((Config.Channel[menu_temp - SERVOSTART].P1_source_a == THROTTLE) && (Config.RxMode == CPPM_MODE))
    67fa:	46 e2       	ldi	r20, 0x26	; 38
    67fc:	42 9f       	mul	r20, r18
    67fe:	d0 01       	movw	r26, r0
    6800:	43 9f       	mul	r20, r19
    6802:	b0 0d       	add	r27, r0
    6804:	11 24       	eor	r1, r1
    6806:	af 59       	subi	r26, 0x9F	; 159
    6808:	b9 4f       	sbci	r27, 0xF9	; 249
    680a:	4c 91       	ld	r20, X
    680c:	41 11       	cpse	r20, r1
    680e:	05 c0       	rjmp	.+10     	; 0x681a <menu_servo_setup+0x172>
    6810:	40 91 da 05 	lds	r20, 0x05DA
    6814:	41 11       	cpse	r20, r1
    6816:	01 c0       	rjmp	.+2      	; 0x681a <menu_servo_setup+0x172>
			{
				servo_enable = false;
    6818:	81 2c       	mov	r8, r1
			}

			do_menu_item(menu_temp, value_ptr + (menu_temp - SERVOSTART), 1, range, 0, text_link, servo_enable, (menu_temp - SERVOSTART));
    681a:	ae 2e       	mov	r10, r30
    681c:	b1 2c       	mov	r11, r1
    681e:	3f 93       	push	r19
    6820:	2f 93       	push	r18
    6822:	c1 2c       	mov	r12, r1
    6824:	e9 80       	ldd	r14, Y+1	; 0x01
    6826:	fa 80       	ldd	r15, Y+2	; 0x02
    6828:	0b 81       	ldd	r16, Y+3	; 0x03
    682a:	1c 81       	ldd	r17, Y+4	; 0x04
    682c:	2d 81       	ldd	r18, Y+5	; 0x05
    682e:	41 e0       	ldi	r20, 0x01	; 1
    6830:	0e 94 5a 2e 	call	0x5cb4	; 0x5cb4 <do_menu_item>
    6834:	0f 90       	pop	r0
    6836:	0f 90       	pop	r0
		}

		// Disable servos
		servo_enable = false;

		if (button == ENTER)
    6838:	80 91 ea 07 	lds	r24, 0x07EA
    683c:	80 3e       	cpi	r24, 0xE0	; 224
    683e:	09 f0       	breq	.+2      	; 0x6842 <menu_servo_setup+0x19a>
    6840:	78 cf       	rjmp	.-272    	; 0x6732 <menu_servo_setup+0x8a>
		{
			UpdateLimits();				// Update actual servo trims
    6842:	0e 94 43 35 	call	0x6a86	; 0x6a86 <UpdateLimits>
			Save_Config_to_EEPROM();	// Save value and return
    6846:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <Save_Config_to_EEPROM>
			Wait_BUTTON4();				// Wait for user's finger off the button
    684a:	0e 94 ac 32 	call	0x6558	; 0x6558 <Wait_BUTTON4>
    684e:	71 cf       	rjmp	.-286    	; 0x6732 <menu_servo_setup+0x8a>
		}
	}
}
    6850:	28 96       	adiw	r28, 0x08	; 8
    6852:	0f b6       	in	r0, 0x3f	; 63
    6854:	f8 94       	cli
    6856:	de bf       	out	0x3e, r29	; 62
    6858:	0f be       	out	0x3f, r0	; 63
    685a:	cd bf       	out	0x3d, r28	; 61
    685c:	df 91       	pop	r29
    685e:	cf 91       	pop	r28
    6860:	1f 91       	pop	r17
    6862:	0f 91       	pop	r16
    6864:	ff 90       	pop	r15
    6866:	ef 90       	pop	r14
    6868:	df 90       	pop	r13
    686a:	cf 90       	pop	r12
    686c:	bf 90       	pop	r11
    686e:	af 90       	pop	r10
    6870:	9f 90       	pop	r9
    6872:	8f 90       	pop	r8
    6874:	7f 90       	pop	r7
    6876:	6f 90       	pop	r6
    6878:	5f 90       	pop	r5
    687a:	4f 90       	pop	r4
    687c:	3f 90       	pop	r3
    687e:	2f 90       	pop	r2
    6880:	08 95       	ret

00006882 <menu_rc_setup>:
//************************************************************
// Main menu-specific setup
//************************************************************

void menu_rc_setup(uint8_t section)
{
    6882:	2f 92       	push	r2
    6884:	3f 92       	push	r3
    6886:	4f 92       	push	r4
    6888:	5f 92       	push	r5
    688a:	6f 92       	push	r6
    688c:	7f 92       	push	r7
    688e:	8f 92       	push	r8
    6890:	9f 92       	push	r9
    6892:	af 92       	push	r10
    6894:	bf 92       	push	r11
    6896:	cf 92       	push	r12
    6898:	df 92       	push	r13
    689a:	ef 92       	push	r14
    689c:	ff 92       	push	r15
    689e:	0f 93       	push	r16
    68a0:	1f 93       	push	r17
    68a2:	cf 93       	push	r28
    68a4:	df 93       	push	r29
    68a6:	cd b7       	in	r28, 0x3d	; 61
    68a8:	de b7       	in	r29, 0x3e	; 62
    68aa:	2a 97       	sbiw	r28, 0x0a	; 10
    68ac:	0f b6       	in	r0, 0x3f	; 63
    68ae:	f8 94       	cli
    68b0:	de bf       	out	0x3e, r29	; 62
    68b2:	0f be       	out	0x3f, r0	; 63
    68b4:	cd bf       	out	0x3d, r28	; 61
    68b6:	88 87       	std	Y+8, r24	; 0x08
	uint8_t i;
	uint8_t offset = 0;			// Index into channel structure
	uint8_t	items= RCITEMS;		// Items in group
	
	// If submenu item has changed, reset submenu positions
	if (menu_flag)
    68b8:	80 91 ec 07 	lds	r24, 0x07EC
    68bc:	88 23       	and	r24, r24
    68be:	41 f0       	breq	.+16     	; 0x68d0 <menu_rc_setup+0x4e>
	{
		sub_top = RCSTART;
    68c0:	85 e9       	ldi	r24, 0x95	; 149
    68c2:	90 e0       	ldi	r25, 0x00	; 0
    68c4:	90 93 35 05 	sts	0x0535, r25
    68c8:	80 93 34 05 	sts	0x0534, r24
		menu_flag = 0;
    68cc:	10 92 ec 07 	sts	0x07EC, r1
			writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_CONFIG, (6 - Config.MPU6050_LPF));

			// Update channel sequence
			for (i = 0; i < MAX_RC_CHANNELS; i++)
			{
				if (Config.TxSeq == FUTABASEQ)
    68d0:	29 e0       	ldi	r18, 0x09	; 9
    68d2:	2f 83       	std	Y+7, r18	; 0x07
    68d4:	1e 82       	std	Y+6, r1	; 0x06
    68d6:	6a ed       	ldi	r22, 0xDA	; 218
    68d8:	46 2e       	mov	r4, r22
    68da:	65 e0       	ldi	r22, 0x05	; 5
    68dc:	56 2e       	mov	r5, r22
			default:
				break;
		}

		// Print menu
		print_menu_items(sub_top + offset, RCSTART + offset, value_ptr, (const unsigned char*)rc_menu_ranges[section - 1], 0, RCOFFSET, (const unsigned char*)RCMenuText[section - 1], cursor);
    68de:	38 85       	ldd	r19, Y+8	; 0x08
    68e0:	83 2f       	mov	r24, r19
    68e2:	90 e0       	ldi	r25, 0x00	; 0
    68e4:	01 97       	sbiw	r24, 0x01	; 1
    68e6:	22 e3       	ldi	r18, 0x32	; 50
    68e8:	28 9f       	mul	r18, r24
    68ea:	30 01       	movw	r6, r0
    68ec:	29 9f       	mul	r18, r25
    68ee:	70 0c       	add	r7, r0
    68f0:	11 24       	eor	r1, r1
    68f2:	93 01       	movw	r18, r6
    68f4:	2f 5e       	subi	r18, 0xEF	; 239
    68f6:	36 4e       	sbci	r19, 0xE6	; 230
    68f8:	39 01       	movw	r6, r18
    68fa:	2a e0       	ldi	r18, 0x0A	; 10
    68fc:	28 9f       	mul	r18, r24
    68fe:	10 01       	movw	r2, r0
    6900:	29 9f       	mul	r18, r25
    6902:	30 0c       	add	r3, r0
    6904:	11 24       	eor	r1, r1
    6906:	c1 01       	movw	r24, r2
    6908:	8b 58       	subi	r24, 0x8B	; 139
    690a:	96 4e       	sbci	r25, 0xE6	; 230
    690c:	9a 87       	std	Y+10, r25	; 0x0a
    690e:	89 87       	std	Y+9, r24	; 0x09
	{
		sub_top = RCSTART;
		menu_flag = 0;
	}

	while(button != BACK)
    6910:	80 91 ea 07 	lds	r24, 0x07EA
    6914:	80 37       	cpi	r24, 0x70	; 112
    6916:	09 f4       	brne	.+2      	; 0x691a <menu_rc_setup+0x98>
    6918:	9d c0       	rjmp	.+314    	; 0x6a54 <menu_rc_setup+0x1d2>
	{
		// Get menu offsets and load values from eeprom
		// 1 = RC, 2 = General
		switch(section)
    691a:	98 85       	ldd	r25, Y+8	; 0x08
    691c:	92 30       	cpi	r25, 0x02	; 2
    691e:	41 f4       	brne	.+16     	; 0x6930 <menu_rc_setup+0xae>
		{
			case 1:				// RC setup menu
				break;
			case 2:				// General menu
				offset = RCITEMS;
				items = GENERALITEMS;
    6920:	2a e0       	ldi	r18, 0x0A	; 10
    6922:	2f 83       	std	Y+7, r18	; 0x07
		switch(section)
		{
			case 1:				// RC setup menu
				break;
			case 2:				// General menu
				offset = RCITEMS;
    6924:	39 e0       	ldi	r19, 0x09	; 9
    6926:	3e 83       	std	Y+6, r19	; 0x06
				items = GENERALITEMS;
				value_ptr = &Config.Orientation;
    6928:	59 e3       	ldi	r21, 0x39	; 57
    692a:	45 2e       	mov	r4, r21
    692c:	56 e0       	ldi	r21, 0x06	; 6
    692e:	55 2e       	mov	r5, r21
			default:
				break;
		}

		// Print menu
		print_menu_items(sub_top + offset, RCSTART + offset, value_ptr, (const unsigned char*)rc_menu_ranges[section - 1], 0, RCOFFSET, (const unsigned char*)RCMenuText[section - 1], cursor);
    6930:	8e 81       	ldd	r24, Y+6	; 0x06
    6932:	88 2e       	mov	r8, r24
    6934:	91 2c       	mov	r9, r1
    6936:	b4 01       	movw	r22, r8
    6938:	6b 56       	subi	r22, 0x6B	; 107
    693a:	7f 4f       	sbci	r23, 0xFF	; 255
    693c:	80 91 34 05 	lds	r24, 0x0534
    6940:	90 91 35 05 	lds	r25, 0x0535
    6944:	a0 90 05 05 	lds	r10, 0x0505
    6948:	c9 84       	ldd	r12, Y+9	; 0x09
    694a:	da 84       	ldd	r13, Y+10	; 0x0a
    694c:	2f e4       	ldi	r18, 0x4F	; 79
    694e:	e2 2e       	mov	r14, r18
    6950:	00 e0       	ldi	r16, 0x00	; 0
    6952:	93 01       	movw	r18, r6
    6954:	a2 01       	movw	r20, r4
    6956:	88 0d       	add	r24, r8
    6958:	99 1d       	adc	r25, r9
    695a:	0e 94 ab 30 	call	0x6156	; 0x6156 <print_menu_items>

		// Handle menu changes
		update_menu(items, RCSTART, offset, button, &cursor, &sub_top, &menu_temp);
    695e:	3f e2       	ldi	r19, 0x2F	; 47
    6960:	c3 2e       	mov	r12, r19
    6962:	35 e0       	ldi	r19, 0x05	; 5
    6964:	d3 2e       	mov	r13, r19
    6966:	44 e3       	ldi	r20, 0x34	; 52
    6968:	e4 2e       	mov	r14, r20
    696a:	45 e0       	ldi	r20, 0x05	; 5
    696c:	f4 2e       	mov	r15, r20
    696e:	05 e0       	ldi	r16, 0x05	; 5
    6970:	15 e0       	ldi	r17, 0x05	; 5
    6972:	20 91 ea 07 	lds	r18, 0x07EA
    6976:	4e 81       	ldd	r20, Y+6	; 0x06
    6978:	65 e9       	ldi	r22, 0x95	; 149
    697a:	8f 81       	ldd	r24, Y+7	; 0x07
    697c:	0e 94 e1 2f 	call	0x5fc2	; 0x5fc2 <update_menu>
		range = get_menu_range ((const unsigned char*)rc_menu_ranges[section - 1], (menu_temp - RCSTART - offset)); 
    6980:	60 91 2f 05 	lds	r22, 0x052F
    6984:	65 59       	subi	r22, 0x95	; 149
    6986:	9e 81       	ldd	r25, Y+6	; 0x06
    6988:	69 1b       	sub	r22, r25
    698a:	c3 01       	movw	r24, r6
    698c:	0e 94 d1 2d 	call	0x5ba2	; 0x5ba2 <get_menu_range>
    6990:	29 83       	std	Y+1, r18	; 0x01
    6992:	3a 83       	std	Y+2, r19	; 0x02
    6994:	4b 83       	std	Y+3, r20	; 0x03
    6996:	5c 83       	std	Y+4, r21	; 0x04
    6998:	6d 83       	std	Y+5, r22	; 0x05

		if (button == ENTER)
    699a:	80 91 ea 07 	lds	r24, 0x07EA
    699e:	80 3e       	cpi	r24, 0xE0	; 224
    69a0:	09 f5       	brne	.+66     	; 0x69e4 <menu_rc_setup+0x162>
		{
			text_link = pgm_read_byte(&RCMenuText[section - 1][menu_temp - RCSTART - offset]);
    69a2:	80 91 2f 05 	lds	r24, 0x052F
    69a6:	90 91 30 05 	lds	r25, 0x0530
    69aa:	bc 01       	movw	r22, r24
    69ac:	65 59       	subi	r22, 0x95	; 149
    69ae:	71 09       	sbc	r23, r1
    69b0:	68 19       	sub	r22, r8
    69b2:	79 09       	sbc	r23, r9
    69b4:	fb 01       	movw	r30, r22
    69b6:	e2 0d       	add	r30, r2
    69b8:	f3 1d       	adc	r31, r3
    69ba:	eb 58       	subi	r30, 0x8B	; 139
    69bc:	f6 4e       	sbci	r31, 0xE6	; 230
    69be:	e4 91       	lpm	r30, Z
			do_menu_item(menu_temp, value_ptr + (menu_temp - RCSTART - offset), 1, range, 0, text_link, false, 0);
    69c0:	ae 2e       	mov	r10, r30
    69c2:	b1 2c       	mov	r11, r1
    69c4:	64 0d       	add	r22, r4
    69c6:	75 1d       	adc	r23, r5
    69c8:	1f 92       	push	r1
    69ca:	1f 92       	push	r1
    69cc:	81 2c       	mov	r8, r1
    69ce:	c1 2c       	mov	r12, r1
    69d0:	e9 80       	ldd	r14, Y+1	; 0x01
    69d2:	fa 80       	ldd	r15, Y+2	; 0x02
    69d4:	0b 81       	ldd	r16, Y+3	; 0x03
    69d6:	1c 81       	ldd	r17, Y+4	; 0x04
    69d8:	2d 81       	ldd	r18, Y+5	; 0x05
    69da:	41 e0       	ldi	r20, 0x01	; 1
    69dc:	0e 94 5a 2e 	call	0x5cb4	; 0x5cb4 <do_menu_item>
    69e0:	0f 90       	pop	r0
    69e2:	0f 90       	pop	r0
		}

		if (button == ENTER)
    69e4:	80 91 ea 07 	lds	r24, 0x07EA
    69e8:	80 3e       	cpi	r24, 0xE0	; 224
    69ea:	09 f0       	breq	.+2      	; 0x69ee <menu_rc_setup+0x16c>
    69ec:	91 cf       	rjmp	.-222    	; 0x6910 <menu_rc_setup+0x8e>
		{
			init_int();				// In case RC type has changed, reinitialise interrupts
    69ee:	0e 94 43 2d 	call	0x5a86	; 0x5a86 <init_int>
			init_uart();			// and UART
    69f2:	0e 94 ce 44 	call	0x899c	; 0x899c <init_uart>
			UpdateLimits();			// Update I-term limits and triggers based on percentages
    69f6:	0e 94 43 35 	call	0x6a86	; 0x6a86 <UpdateLimits>

			// Update MPU6050 LPF and reverse sense of menu items
			writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_CONFIG, (6 - Config.MPU6050_LPF));
    69fa:	80 91 42 06 	lds	r24, 0x0642
    69fe:	46 e0       	ldi	r20, 0x06	; 6
    6a00:	48 1b       	sub	r20, r24
    6a02:	6a e1       	ldi	r22, 0x1A	; 26
    6a04:	80 ed       	ldi	r24, 0xD0	; 208
    6a06:	0e 94 6a 23 	call	0x46d4	; 0x46d4 <writeI2Cbyte>

			// Update channel sequence
			for (i = 0; i < MAX_RC_CHANNELS; i++)
			{
				if (Config.TxSeq == FUTABASEQ)
    6a0a:	20 91 dc 05 	lds	r18, 0x05DC
    6a0e:	a2 eb       	ldi	r26, 0xB2	; 178
    6a10:	b5 e0       	ldi	r27, 0x05	; 5
    6a12:	80 e0       	ldi	r24, 0x00	; 0
    6a14:	90 e0       	ldi	r25, 0x00	; 0
    6a16:	fc 01       	movw	r30, r24
    6a18:	21 30       	cpi	r18, 0x01	; 1
    6a1a:	19 f4       	brne	.+6      	; 0x6a22 <menu_rc_setup+0x1a0>
    6a1c:	ea 53       	subi	r30, 0x3A	; 58
    6a1e:	ff 4f       	sbci	r31, 0xFF	; 255
    6a20:	02 c0       	rjmp	.+4      	; 0x6a26 <menu_rc_setup+0x1a4>
    6a22:	e2 53       	subi	r30, 0x32	; 50
    6a24:	ff 4f       	sbci	r31, 0xFF	; 255
				{
					Config.ChannelOrder[i] = pgm_read_byte(&FUTABA[i]);
				}
				else
				{
					Config.ChannelOrder[i] = pgm_read_byte(&JR[i]);
    6a26:	e4 91       	lpm	r30, Z
    6a28:	ec 93       	st	X, r30
    6a2a:	01 96       	adiw	r24, 0x01	; 1
    6a2c:	11 96       	adiw	r26, 0x01	; 1

			// Update MPU6050 LPF and reverse sense of menu items
			writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_CONFIG, (6 - Config.MPU6050_LPF));

			// Update channel sequence
			for (i = 0; i < MAX_RC_CHANNELS; i++)
    6a2e:	88 30       	cpi	r24, 0x08	; 8
    6a30:	91 05       	cpc	r25, r1
    6a32:	89 f7       	brne	.-30     	; 0x6a16 <menu_rc_setup+0x194>
				}
			}

			// Check validity of RX type and PWM speed selection
			// If illegal setting, drop down to RC Sync
			if ((Config.RxMode != SBUS) && (Config.Servo_rate == FAST))
    6a34:	80 91 da 05 	lds	r24, 0x05DA
    6a38:	82 30       	cpi	r24, 0x02	; 2
    6a3a:	39 f0       	breq	.+14     	; 0x6a4a <menu_rc_setup+0x1c8>
    6a3c:	80 91 3e 06 	lds	r24, 0x063E
    6a40:	82 30       	cpi	r24, 0x02	; 2
    6a42:	19 f4       	brne	.+6      	; 0x6a4a <menu_rc_setup+0x1c8>
			{
				Config.Servo_rate = SYNC;
    6a44:	81 e0       	ldi	r24, 0x01	; 1
    6a46:	80 93 3e 06 	sts	0x063E, r24
			}

			Save_Config_to_EEPROM(); // Save value and return
    6a4a:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <Save_Config_to_EEPROM>
			Wait_BUTTON4();			 // Wait for user's finger off the button
    6a4e:	0e 94 ac 32 	call	0x6558	; 0x6558 <Wait_BUTTON4>
    6a52:	5e cf       	rjmp	.-324    	; 0x6910 <menu_rc_setup+0x8e>
		}
	}
}
    6a54:	2a 96       	adiw	r28, 0x0a	; 10
    6a56:	0f b6       	in	r0, 0x3f	; 63
    6a58:	f8 94       	cli
    6a5a:	de bf       	out	0x3e, r29	; 62
    6a5c:	0f be       	out	0x3f, r0	; 63
    6a5e:	cd bf       	out	0x3d, r28	; 61
    6a60:	df 91       	pop	r29
    6a62:	cf 91       	pop	r28
    6a64:	1f 91       	pop	r17
    6a66:	0f 91       	pop	r16
    6a68:	ff 90       	pop	r15
    6a6a:	ef 90       	pop	r14
    6a6c:	df 90       	pop	r13
    6a6e:	cf 90       	pop	r12
    6a70:	bf 90       	pop	r11
    6a72:	af 90       	pop	r10
    6a74:	9f 90       	pop	r9
    6a76:	8f 90       	pop	r8
    6a78:	7f 90       	pop	r7
    6a7a:	6f 90       	pop	r6
    6a7c:	5f 90       	pop	r5
    6a7e:	4f 90       	pop	r4
    6a80:	3f 90       	pop	r3
    6a82:	2f 90       	pop	r2
    6a84:	08 95       	ret

00006a86 <UpdateLimits>:

// Update actual limits value with that from the mix setting percentages
// This is only done at start-up and whenever the values are changed
// so as to reduce CPU loop load
void UpdateLimits(void)
{
    6a86:	6f 92       	push	r6
    6a88:	7f 92       	push	r7
    6a8a:	8f 92       	push	r8
    6a8c:	9f 92       	push	r9
    6a8e:	af 92       	push	r10
    6a90:	bf 92       	push	r11
    6a92:	cf 92       	push	r12
    6a94:	df 92       	push	r13
    6a96:	ef 92       	push	r14
    6a98:	ff 92       	push	r15
    6a9a:	0f 93       	push	r16
    6a9c:	1f 93       	push	r17
    6a9e:	cf 93       	push	r28
    6aa0:	df 93       	push	r29
    6aa2:	cd b7       	in	r28, 0x3d	; 61
    6aa4:	de b7       	in	r29, 0x3e	; 62
    6aa6:	2c 97       	sbiw	r28, 0x0c	; 12
    6aa8:	0f b6       	in	r0, 0x3f	; 63
    6aaa:	f8 94       	cli
    6aac:	de bf       	out	0x3e, r29	; 62
    6aae:	0f be       	out	0x3f, r0	; 63
    6ab0:	cd bf       	out	0x3d, r28	; 61
	uint8_t i,j;
	int32_t temp32, gain32;

	int8_t limits[FLIGHT_MODES][NUMBEROFAXIS] = 
    6ab2:	80 91 e5 05 	lds	r24, 0x05E5
    6ab6:	8f 83       	std	Y+7, r24	; 0x07
    6ab8:	80 91 eb 05 	lds	r24, 0x05EB
    6abc:	88 87       	std	Y+8, r24	; 0x08
    6abe:	80 91 f1 05 	lds	r24, 0x05F1
    6ac2:	89 87       	std	Y+9, r24	; 0x09
    6ac4:	80 91 f7 05 	lds	r24, 0x05F7
    6ac8:	8a 87       	std	Y+10, r24	; 0x0a
    6aca:	80 91 fd 05 	lds	r24, 0x05FD
    6ace:	8b 87       	std	Y+11, r24	; 0x0b
    6ad0:	80 91 03 06 	lds	r24, 0x0603
    6ad4:	8c 87       	std	Y+12, r24	; 0x0c
		{
			{Config.FlightMode[P1].Roll_limit, Config.FlightMode[P1].Pitch_limit, Config.FlightMode[P1].Yaw_limit},
			{Config.FlightMode[P2].Roll_limit, Config.FlightMode[P2].Pitch_limit, Config.FlightMode[P2].Yaw_limit}
		};

	int8_t gains[FLIGHT_MODES][NUMBEROFAXIS] = 
    6ad6:	80 91 e4 05 	lds	r24, 0x05E4
    6ada:	89 83       	std	Y+1, r24	; 0x01
    6adc:	80 91 ea 05 	lds	r24, 0x05EA
    6ae0:	8a 83       	std	Y+2, r24	; 0x02
    6ae2:	80 91 f0 05 	lds	r24, 0x05F0
    6ae6:	8b 83       	std	Y+3, r24	; 0x03
    6ae8:	80 91 f6 05 	lds	r24, 0x05F6
    6aec:	8c 83       	std	Y+4, r24	; 0x04
    6aee:	80 91 fc 05 	lds	r24, 0x05FC
    6af2:	8d 83       	std	Y+5, r24	; 0x05
    6af4:	80 91 02 06 	lds	r24, 0x0602
    6af8:	8e 83       	std	Y+6, r24	; 0x06
			{Config.FlightMode[P1].Roll_I_mult, Config.FlightMode[P1].Pitch_I_mult, Config.FlightMode[P1].Yaw_I_mult},
			{Config.FlightMode[P2].Roll_I_mult, Config.FlightMode[P2].Pitch_I_mult, Config.FlightMode[P2].Yaw_I_mult}
		};

	// Update triggers
	Config.PowerTriggerActual = Config.PowerTrigger * 10;
    6afa:	80 91 3d 06 	lds	r24, 0x063D
    6afe:	2a e0       	ldi	r18, 0x0A	; 10
    6b00:	82 02       	muls	r24, r18
    6b02:	c0 01       	movw	r24, r0
    6b04:	11 24       	eor	r1, r1
    6b06:	90 93 38 06 	sts	0x0638, r25
    6b0a:	80 93 37 06 	sts	0x0637, r24
    6b0e:	47 e0       	ldi	r20, 0x07	; 7
    6b10:	a4 2e       	mov	r10, r20
    6b12:	46 e0       	ldi	r20, 0x06	; 6
    6b14:	b4 2e       	mov	r11, r20
    6b16:	00 e0       	ldi	r16, 0x00	; 0
    6b18:	10 e0       	ldi	r17, 0x00	; 0

// Update actual limits value with that from the mix setting percentages
// This is only done at start-up and whenever the values are changed
// so as to reduce CPU loop load
void UpdateLimits(void)
{
    6b1a:	65 01       	movw	r12, r10
    6b1c:	e1 2c       	mov	r14, r1
    6b1e:	f1 2c       	mov	r15, r1
    6b20:	87 e0       	ldi	r24, 0x07	; 7
    6b22:	88 2e       	mov	r8, r24
    6b24:	91 2c       	mov	r9, r1
    6b26:	8c 0e       	add	r8, r28
    6b28:	9d 1e       	adc	r9, r29
    6b2a:	80 0e       	add	r8, r16
    6b2c:	91 1e       	adc	r9, r17
    6b2e:	66 24       	eor	r6, r6
    6b30:	63 94       	inc	r6
    6b32:	71 2c       	mov	r7, r1
    6b34:	6c 0e       	add	r6, r28
    6b36:	7d 1e       	adc	r7, r29
    6b38:	60 0e       	add	r6, r16
    6b3a:	71 1e       	adc	r7, r17
    6b3c:	f4 01       	movw	r30, r8
    6b3e:	ee 0d       	add	r30, r14
    6b40:	ff 1d       	adc	r31, r15
	// Update I_term input constraints for all profiles
	for (j = 0; j < FLIGHT_MODES; j++)
	{
		for (i = 0; i < NUMBEROFAXIS; i++)
		{
			temp32 	= limits[j][i]; 						// Promote limit %
    6b42:	a0 81       	ld	r26, Z

			// I-term output (throw). Convert from % to actual count
			// A value of 80,000 results in +/- 1250 or full throw at the output stage
			// This is because the maximum signal value is +/-1250 after division by 64. 1250 * 64 = 80,000
			Config.Raw_I_Limits[j][i] = temp32 * (int32_t)640;	// 80,000 / 125% = 640
    6b44:	bb 27       	eor	r27, r27
    6b46:	a7 fd       	sbrc	r26, 7
    6b48:	b0 95       	com	r27
    6b4a:	20 e8       	ldi	r18, 0x80	; 128
    6b4c:	32 e0       	ldi	r19, 0x02	; 2
    6b4e:	0e 94 de 47 	call	0x8fbc	; 0x8fbc <__usmulhisi3>
    6b52:	d6 01       	movw	r26, r12
    6b54:	6d 93       	st	X+, r22
    6b56:	7d 93       	st	X+, r23
    6b58:	8d 93       	st	X+, r24
    6b5a:	9d 93       	st	X+, r25
    6b5c:	6d 01       	movw	r12, r26
    6b5e:	f3 01       	movw	r30, r6
    6b60:	ee 0d       	add	r30, r14
    6b62:	ff 1d       	adc	r31, r15

			// I-term source limits. These have to be different due to the I-term gain setting
			// I-term = (gyro * gain) / 32, so the gyro count for a particular gain and limit is
			// Gyro = (I-term * 32) / gain :) 

			if (gains[j][i] != 0)
    6b64:	20 81       	ld	r18, Z
    6b66:	22 23       	and	r18, r18
    6b68:	a1 f0       	breq	.+40     	; 0x6b92 <UpdateLimits+0x10c>
			{
				gain32 = gains[j][i];						// Promote gain value
				Config.Raw_I_Constrain[j][i] = (Config.Raw_I_Limits[j][i] << 5) / gain32;
    6b6a:	35 e0       	ldi	r19, 0x05	; 5
    6b6c:	66 0f       	add	r22, r22
    6b6e:	77 1f       	adc	r23, r23
    6b70:	88 1f       	adc	r24, r24
    6b72:	99 1f       	adc	r25, r25
    6b74:	3a 95       	dec	r19
    6b76:	d1 f7       	brne	.-12     	; 0x6b6c <UpdateLimits+0xe6>
			// I-term = (gyro * gain) / 32, so the gyro count for a particular gain and limit is
			// Gyro = (I-term * 32) / gain :) 

			if (gains[j][i] != 0)
			{
				gain32 = gains[j][i];						// Promote gain value
    6b78:	33 27       	eor	r19, r19
    6b7a:	27 fd       	sbrc	r18, 7
    6b7c:	30 95       	com	r19
    6b7e:	43 2f       	mov	r20, r19
    6b80:	53 2f       	mov	r21, r19
				Config.Raw_I_Constrain[j][i] = (Config.Raw_I_Limits[j][i] << 5) / gain32;
    6b82:	0e 94 a2 47 	call	0x8f44	; 0x8f44 <__divmodsi4>
    6b86:	f6 01       	movw	r30, r12
    6b88:	24 8b       	std	Z+20, r18	; 0x14
    6b8a:	35 8b       	std	Z+21, r19	; 0x15
    6b8c:	46 8b       	std	Z+22, r20	; 0x16
    6b8e:	57 8b       	std	Z+23, r21	; 0x17
    6b90:	06 c0       	rjmp	.+12     	; 0x6b9e <UpdateLimits+0x118>
			}
			else 
			{
				Config.Raw_I_Constrain[j][i] = 0;
    6b92:	54 96       	adiw	r26, 0x14	; 20
    6b94:	1d 92       	st	X+, r1
    6b96:	1d 92       	st	X+, r1
    6b98:	1d 92       	st	X+, r1
    6b9a:	1c 92       	st	X, r1
    6b9c:	57 97       	sbiw	r26, 0x17	; 23
    6b9e:	bf ef       	ldi	r27, 0xFF	; 255
    6ba0:	eb 1a       	sub	r14, r27
    6ba2:	fb 0a       	sbc	r15, r27
	Config.PowerTriggerActual = Config.PowerTrigger * 10;

	// Update I_term input constraints for all profiles
	for (j = 0; j < FLIGHT_MODES; j++)
	{
		for (i = 0; i < NUMBEROFAXIS; i++)
    6ba4:	e3 e0       	ldi	r30, 0x03	; 3
    6ba6:	ee 16       	cp	r14, r30
    6ba8:	f1 04       	cpc	r15, r1
    6baa:	41 f6       	brne	.-112    	; 0x6b3c <UpdateLimits+0xb6>
    6bac:	fc e0       	ldi	r31, 0x0C	; 12
    6bae:	af 0e       	add	r10, r31
    6bb0:	b1 1c       	adc	r11, r1
    6bb2:	0d 5f       	subi	r16, 0xFD	; 253
    6bb4:	1f 4f       	sbci	r17, 0xFF	; 255

	// Update triggers
	Config.PowerTriggerActual = Config.PowerTrigger * 10;

	// Update I_term input constraints for all profiles
	for (j = 0; j < FLIGHT_MODES; j++)
    6bb6:	06 30       	cpi	r16, 0x06	; 6
    6bb8:	11 05       	cpc	r17, r1
    6bba:	09 f0       	breq	.+2      	; 0x6bbe <UpdateLimits+0x138>
    6bbc:	ae cf       	rjmp	.-164    	; 0x6b1a <UpdateLimits+0x94>
    6bbe:	8b e7       	ldi	r24, 0x7B	; 123
    6bc0:	97 e0       	ldi	r25, 0x07	; 7
    6bc2:	ea eb       	ldi	r30, 0xBA	; 186
    6bc4:	f5 e0       	ldi	r31, 0x05	; 5
    6bc6:	63 e8       	ldi	r22, 0x83	; 131
    6bc8:	77 e0       	ldi	r23, 0x07	; 7
	}

	// Update travel limits
	for (i = 0; i < MIX_OUTPUTS; i++)
	{
		Config.Limits[i].minimum = scale_percent(Config.min_travel[i]);
    6bca:	dc 01       	movw	r26, r24
    6bcc:	2d 91       	ld	r18, X+
    6bce:	cd 01       	movw	r24, r26
int16_t scale_percent(int8_t value)
{
	int16_t temp16_1, temp16_2;

	temp16_1 = value; // Promote
	temp16_2 = ((temp16_1 * (int16_t)10) + 3750);
    6bd0:	ba e0       	ldi	r27, 0x0A	; 10
    6bd2:	2b 02       	muls	r18, r27
    6bd4:	90 01       	movw	r18, r0
    6bd6:	11 24       	eor	r1, r1
    6bd8:	2a 55       	subi	r18, 0x5A	; 90
    6bda:	31 4f       	sbci	r19, 0xF1	; 241
	}

	// Update travel limits
	for (i = 0; i < MIX_OUTPUTS; i++)
	{
		Config.Limits[i].minimum = scale_percent(Config.min_travel[i]);
    6bdc:	31 83       	std	Z+1, r19	; 0x01
    6bde:	20 83       	st	Z, r18
		Config.Limits[i].maximum = scale_percent(Config.max_travel[i]);
    6be0:	db 01       	movw	r26, r22
    6be2:	2d 91       	ld	r18, X+
    6be4:	bd 01       	movw	r22, r26
int16_t scale_percent(int8_t value)
{
	int16_t temp16_1, temp16_2;

	temp16_1 = value; // Promote
	temp16_2 = ((temp16_1 * (int16_t)10) + 3750);
    6be6:	ba e0       	ldi	r27, 0x0A	; 10
    6be8:	2b 02       	muls	r18, r27
    6bea:	90 01       	movw	r18, r0
    6bec:	11 24       	eor	r1, r1
    6bee:	2a 55       	subi	r18, 0x5A	; 90
    6bf0:	31 4f       	sbci	r19, 0xF1	; 241

	// Update travel limits
	for (i = 0; i < MIX_OUTPUTS; i++)
	{
		Config.Limits[i].minimum = scale_percent(Config.min_travel[i]);
		Config.Limits[i].maximum = scale_percent(Config.max_travel[i]);
    6bf2:	33 83       	std	Z+3, r19	; 0x03
    6bf4:	22 83       	std	Z+2, r18	; 0x02
    6bf6:	34 96       	adiw	r30, 0x04	; 4
			}
		}
	}

	// Update travel limits
	for (i = 0; i < MIX_OUTPUTS; i++)
    6bf8:	25 e0       	ldi	r18, 0x05	; 5
    6bfa:	ea 3d       	cpi	r30, 0xDA	; 218
    6bfc:	f2 07       	cpc	r31, r18
    6bfe:	29 f7       	brne	.-54     	; 0x6bca <UpdateLimits+0x144>

	// Adjust trim to match 0.01 degree resolution
	// A value of 127 multiplied by 10 = 1270 which in 1/100ths of a degree equates to 12.7 degrees
	for (i = P1; i <= P2; i++)
	{
		Config.Rolltrim[i] = Config.FlightMode[i].AccRollZeroTrim * 10;
    6c00:	80 91 e8 05 	lds	r24, 0x05E8
    6c04:	4a e0       	ldi	r20, 0x0A	; 10
    6c06:	84 02       	muls	r24, r20
    6c08:	c0 01       	movw	r24, r0
    6c0a:	11 24       	eor	r1, r1
    6c0c:	90 93 b1 07 	sts	0x07B1, r25
    6c10:	80 93 b0 07 	sts	0x07B0, r24
		Config.Pitchtrim[i] = Config.FlightMode[i].AccPitchZeroTrim * 10;
    6c14:	80 91 ee 05 	lds	r24, 0x05EE
    6c18:	aa e0       	ldi	r26, 0x0A	; 10
    6c1a:	8a 02       	muls	r24, r26
    6c1c:	c0 01       	movw	r24, r0
    6c1e:	11 24       	eor	r1, r1
    6c20:	90 93 b5 07 	sts	0x07B5, r25
    6c24:	80 93 b4 07 	sts	0x07B4, r24

	// Adjust trim to match 0.01 degree resolution
	// A value of 127 multiplied by 10 = 1270 which in 1/100ths of a degree equates to 12.7 degrees
	for (i = P1; i <= P2; i++)
	{
		Config.Rolltrim[i] = Config.FlightMode[i].AccRollZeroTrim * 10;
    6c28:	80 91 fa 05 	lds	r24, 0x05FA
    6c2c:	ba e0       	ldi	r27, 0x0A	; 10
    6c2e:	8b 02       	muls	r24, r27
    6c30:	c0 01       	movw	r24, r0
    6c32:	11 24       	eor	r1, r1
    6c34:	90 93 b3 07 	sts	0x07B3, r25
    6c38:	80 93 b2 07 	sts	0x07B2, r24
		Config.Pitchtrim[i] = Config.FlightMode[i].AccPitchZeroTrim * 10;
    6c3c:	80 91 00 06 	lds	r24, 0x0600
    6c40:	ea e0       	ldi	r30, 0x0A	; 10
    6c42:	8e 02       	muls	r24, r30
    6c44:	c0 01       	movw	r24, r0
    6c46:	11 24       	eor	r1, r1
    6c48:	90 93 b7 07 	sts	0x07B7, r25
    6c4c:	80 93 b6 07 	sts	0x07B6, r24
	}
}
    6c50:	2c 96       	adiw	r28, 0x0c	; 12
    6c52:	0f b6       	in	r0, 0x3f	; 63
    6c54:	f8 94       	cli
    6c56:	de bf       	out	0x3e, r29	; 62
    6c58:	0f be       	out	0x3f, r0	; 63
    6c5a:	cd bf       	out	0x3d, r28	; 61
    6c5c:	df 91       	pop	r29
    6c5e:	cf 91       	pop	r28
    6c60:	1f 91       	pop	r17
    6c62:	0f 91       	pop	r16
    6c64:	ff 90       	pop	r15
    6c66:	ef 90       	pop	r14
    6c68:	df 90       	pop	r13
    6c6a:	cf 90       	pop	r12
    6c6c:	bf 90       	pop	r11
    6c6e:	af 90       	pop	r10
    6c70:	9f 90       	pop	r9
    6c72:	8f 90       	pop	r8
    6c74:	7f 90       	pop	r7
    6c76:	6f 90       	pop	r6
    6c78:	08 95       	ret

00006c7a <UpdateServos>:

// Update servos from the mixer Config.Channel[i].P1_value data, add offsets and enforce travel limits
void UpdateServos(void)
{
    6c7a:	0f 93       	push	r16
    6c7c:	1f 93       	push	r17
    6c7e:	cf 93       	push	r28
    6c80:	df 93       	push	r29
    6c82:	a3 e4       	ldi	r26, 0x43	; 67
    6c84:	b6 e0       	ldi	r27, 0x06	; 6
    6c86:	03 e7       	ldi	r16, 0x73	; 115
    6c88:	17 e0       	ldi	r17, 0x07	; 7
    6c8a:	ea eb       	ldi	r30, 0xBA	; 186
    6c8c:	f5 e0       	ldi	r31, 0x05	; 5
    6c8e:	80 e0       	ldi	r24, 0x00	; 0
    6c90:	90 e0       	ldi	r25, 0x00	; 0
	int16_t temp1 = 0; // Output value

	for (i = 0; i < MIX_OUTPUTS; i++)
	{
		// Servo reverse and trim for the eight physical outputs
		temp1 = Config.Channel[i].P1_value;
    6c92:	2d 91       	ld	r18, X+
    6c94:	3c 91       	ld	r19, X
    6c96:	11 97       	sbiw	r26, 0x01	; 1

		// Reverse this channel for the eight physical outputs
		if ((i <= MIX_OUTPUTS) && (Config.Servo_reverse[i] == ON))
    6c98:	e8 01       	movw	r28, r16
    6c9a:	49 91       	ld	r20, Y+
    6c9c:	8e 01       	movw	r16, r28
    6c9e:	41 30       	cpi	r20, 0x01	; 1
    6ca0:	19 f4       	brne	.+6      	; 0x6ca8 <UpdateServos+0x2e>
		{	
			temp1 = -temp1;
    6ca2:	31 95       	neg	r19
    6ca4:	21 95       	neg	r18
    6ca6:	31 09       	sbc	r19, r1
		}

		// Add offset value to restore to system compatible value
		temp1 += 3750;
    6ca8:	2a 55       	subi	r18, 0x5A	; 90
    6caa:	31 4f       	sbci	r19, 0xF1	; 241

		// Enforce min, max travel limits
		if (temp1 > Config.Limits[i].maximum)
    6cac:	62 81       	ldd	r22, Z+2	; 0x02
    6cae:	73 81       	ldd	r23, Z+3	; 0x03
    6cb0:	ac 01       	movw	r20, r24
    6cb2:	44 0f       	add	r20, r20
    6cb4:	55 1f       	adc	r21, r21
    6cb6:	62 17       	cp	r22, r18
    6cb8:	73 07       	cpc	r23, r19
    6cba:	24 f4       	brge	.+8      	; 0x6cc4 <UpdateServos+0x4a>
		{
			ServoOut[i] = Config.Limits[i].maximum;
    6cbc:	43 5c       	subi	r20, 0xC3	; 195
    6cbe:	57 4f       	sbci	r21, 0xF7	; 247
    6cc0:	ea 01       	movw	r28, r20
    6cc2:	08 c0       	rjmp	.+16     	; 0x6cd4 <UpdateServos+0x5a>
		}

		else if (temp1 < Config.Limits[i].minimum)
    6cc4:	60 81       	ld	r22, Z
    6cc6:	71 81       	ldd	r23, Z+1	; 0x01
		{
			ServoOut[i] = Config.Limits[i].minimum;
    6cc8:	43 5c       	subi	r20, 0xC3	; 195
    6cca:	57 4f       	sbci	r21, 0xF7	; 247
    6ccc:	ea 01       	movw	r28, r20
		if (temp1 > Config.Limits[i].maximum)
		{
			ServoOut[i] = Config.Limits[i].maximum;
		}

		else if (temp1 < Config.Limits[i].minimum)
    6cce:	26 17       	cp	r18, r22
    6cd0:	37 07       	cpc	r19, r23
    6cd2:	1c f4       	brge	.+6      	; 0x6cda <UpdateServos+0x60>
		{
			ServoOut[i] = Config.Limits[i].minimum;
    6cd4:	79 83       	std	Y+1, r23	; 0x01
    6cd6:	68 83       	st	Y, r22
    6cd8:	02 c0       	rjmp	.+4      	; 0x6cde <UpdateServos+0x64>
		}

		// Transfer value to servo
		else
		{
			ServoOut[i] = temp1;
    6cda:	39 83       	std	Y+1, r19	; 0x01
    6cdc:	28 83       	st	Y, r18
    6cde:	01 96       	adiw	r24, 0x01	; 1
    6ce0:	96 96       	adiw	r26, 0x26	; 38
    6ce2:	34 96       	adiw	r30, 0x04	; 4
void UpdateServos(void)
{
	uint8_t i;
	int16_t temp1 = 0; // Output value

	for (i = 0; i < MIX_OUTPUTS; i++)
    6ce4:	88 30       	cpi	r24, 0x08	; 8
    6ce6:	91 05       	cpc	r25, r1
    6ce8:	a1 f6       	brne	.-88     	; 0x6c92 <UpdateServos+0x18>
		else
		{
			ServoOut[i] = temp1;
		}
	}
}
    6cea:	df 91       	pop	r29
    6cec:	cf 91       	pop	r28
    6cee:	1f 91       	pop	r17
    6cf0:	0f 91       	pop	r16
    6cf2:	08 95       	ret

00006cf4 <scale32>:

// 32 bit multiply/scale for broken GCC
// Returns immediately if multiplier is 100, 0 or -100
int16_t scale32(int16_t value16, int16_t multiplier16)
{
    6cf4:	9c 01       	movw	r18, r24
	int32_t temp32 = 0;
	int32_t mult32 = 0;

	// No change if 100% (no scaling)
	if (multiplier16 == 100)
    6cf6:	64 36       	cpi	r22, 0x64	; 100
    6cf8:	71 05       	cpc	r23, r1
    6cfa:	e9 f0       	breq	.+58     	; 0x6d36 <scale32+0x42>
	{
		return value16;
	}

	// Reverse if -100%
	else if (multiplier16 == -100)
    6cfc:	6c 39       	cpi	r22, 0x9C	; 156
    6cfe:	8f ef       	ldi	r24, 0xFF	; 255
    6d00:	78 07       	cpc	r23, r24
    6d02:	29 f4       	brne	.+10     	; 0x6d0e <scale32+0x1a>
	{
		return -value16;	
    6d04:	88 27       	eor	r24, r24
    6d06:	99 27       	eor	r25, r25
    6d08:	82 1b       	sub	r24, r18
    6d0a:	93 0b       	sbc	r25, r19
    6d0c:	08 95       	ret
	}

	// Zero if 0%
	else if (multiplier16 == 0)
    6d0e:	61 15       	cp	r22, r1
    6d10:	71 05       	cpc	r23, r1
    6d12:	71 f0       	breq	.+28     	; 0x6d30 <scale32+0x3c>
	else
	{
		// GCC is broken bad regarding multiplying 32 bit numbers, hence all this crap...
		mult32 = multiplier16;
		temp32 = value16;
		temp32 = temp32 * mult32;
    6d14:	db 01       	movw	r26, r22
    6d16:	0e 94 c7 47 	call	0x8f8e	; 0x8f8e <__mulhisi3>

		// Divide by 100 and round to get scaled value
		temp32 = (temp32 + (int32_t)50) / (int32_t)100; // Constants need to be cast up to 32 bits
    6d1a:	6e 5c       	subi	r22, 0xCE	; 206
    6d1c:	7f 4f       	sbci	r23, 0xFF	; 255
    6d1e:	8f 4f       	sbci	r24, 0xFF	; 255
    6d20:	9f 4f       	sbci	r25, 0xFF	; 255
    6d22:	24 e6       	ldi	r18, 0x64	; 100
    6d24:	30 e0       	ldi	r19, 0x00	; 0
    6d26:	40 e0       	ldi	r20, 0x00	; 0
    6d28:	50 e0       	ldi	r21, 0x00	; 0
    6d2a:	0e 94 a2 47 	call	0x8f44	; 0x8f44 <__divmodsi4>
    6d2e:	03 c0       	rjmp	.+6      	; 0x6d36 <scale32+0x42>
	}

	// Zero if 0%
	else if (multiplier16 == 0)
	{
		return 0;	
    6d30:	80 e0       	ldi	r24, 0x00	; 0
    6d32:	90 e0       	ldi	r25, 0x00	; 0
    6d34:	08 95       	ret
	int32_t mult32 = 0;

	// No change if 100% (no scaling)
	if (multiplier16 == 100)
	{
		return value16;
    6d36:	c9 01       	movw	r24, r18
		temp32 = (temp32 + (int32_t)50) / (int32_t)100; // Constants need to be cast up to 32 bits
		value16 = (int16_t)temp32;
	}

	return value16;
}
    6d38:	08 95       	ret

00006d3a <ProcessMixer>:
//************************************************************
// Code
//************************************************************

void ProcessMixer(void)
{
    6d3a:	2f 92       	push	r2
    6d3c:	3f 92       	push	r3
    6d3e:	4f 92       	push	r4
    6d40:	5f 92       	push	r5
    6d42:	6f 92       	push	r6
    6d44:	7f 92       	push	r7
    6d46:	8f 92       	push	r8
    6d48:	9f 92       	push	r9
    6d4a:	af 92       	push	r10
    6d4c:	bf 92       	push	r11
    6d4e:	cf 92       	push	r12
    6d50:	df 92       	push	r13
    6d52:	ef 92       	push	r14
    6d54:	ff 92       	push	r15
    6d56:	0f 93       	push	r16
    6d58:	1f 93       	push	r17
    6d5a:	cf 93       	push	r28
    6d5c:	df 93       	push	r29
    6d5e:	cd b7       	in	r28, 0x3d	; 61
    6d60:	de b7       	in	r29, 0x3e	; 62
    6d62:	e2 97       	sbiw	r28, 0x32	; 50
    6d64:	0f b6       	in	r0, 0x3f	; 63
    6d66:	f8 94       	cli
    6d68:	de bf       	out	0x3e, r29	; 62
    6d6a:	0f be       	out	0x3f, r0	; 63
    6d6c:	cd bf       	out	0x3d, r28	; 61
	int16_t	Step1 = 0;
	int16_t	Step2 = 0;
	int8_t	itemp8 = 0;

	// Copy the sensor data to an array for easy indexing - acc data is from accSmooth, increased to reasonable rates
	temp1 = (int16_t)accSmooth[ROLL] << 3;
    6d6e:	60 91 99 05 	lds	r22, 0x0599
    6d72:	70 91 9a 05 	lds	r23, 0x059A
    6d76:	80 91 9b 05 	lds	r24, 0x059B
    6d7a:	90 91 9c 05 	lds	r25, 0x059C
    6d7e:	0e 94 0e 46 	call	0x8c1c	; 0x8c1c <__fixsfsi>
    6d82:	8b 01       	movw	r16, r22
    6d84:	83 e0       	ldi	r24, 0x03	; 3
    6d86:	00 0f       	add	r16, r16
    6d88:	11 1f       	adc	r17, r17
    6d8a:	8a 95       	dec	r24
    6d8c:	e1 f7       	brne	.-8      	; 0x6d86 <ProcessMixer+0x4c>
	temp2 = (int16_t)accSmooth[PITCH] << 3;
    6d8e:	60 91 9d 05 	lds	r22, 0x059D
    6d92:	70 91 9e 05 	lds	r23, 0x059E
    6d96:	80 91 9f 05 	lds	r24, 0x059F
    6d9a:	90 91 a0 05 	lds	r25, 0x05A0
    6d9e:	0e 94 0e 46 	call	0x8c1c	; 0x8c1c <__fixsfsi>
    6da2:	93 e0       	ldi	r25, 0x03	; 3
    6da4:	66 0f       	add	r22, r22
    6da6:	77 1f       	adc	r23, r23
    6da8:	9a 95       	dec	r25
    6daa:	e1 f7       	brne	.-8      	; 0x6da4 <ProcessMixer+0x6a>
	int16_t	SensorDataP1[7] = {PID_Gyros[P1][ROLL], PID_Gyros[P1][PITCH], PID_Gyros[P1][YAW], temp1, temp2, PID_ACCs[P1][ROLL], PID_ACCs[P1][PITCH]};
    6dac:	20 91 11 08 	lds	r18, 0x0811
    6db0:	30 91 12 08 	lds	r19, 0x0812
    6db4:	38 a3       	std	Y+32, r19	; 0x20
    6db6:	2f 8f       	std	Y+31, r18	; 0x1f
    6db8:	38 8b       	std	Y+16, r19	; 0x10
    6dba:	2f 87       	std	Y+15, r18	; 0x0f
    6dbc:	40 91 13 08 	lds	r20, 0x0813
    6dc0:	50 91 14 08 	lds	r21, 0x0814
    6dc4:	5a a3       	std	Y+34, r21	; 0x22
    6dc6:	49 a3       	std	Y+33, r20	; 0x21
    6dc8:	5a 8b       	std	Y+18, r21	; 0x12
    6dca:	49 8b       	std	Y+17, r20	; 0x11
    6dcc:	20 91 15 08 	lds	r18, 0x0815
    6dd0:	30 91 16 08 	lds	r19, 0x0816
    6dd4:	3c a3       	std	Y+36, r19	; 0x24
    6dd6:	2b a3       	std	Y+35, r18	; 0x23
    6dd8:	3c 8b       	std	Y+20, r19	; 0x14
    6dda:	2b 8b       	std	Y+19, r18	; 0x13
    6ddc:	1e 8b       	std	Y+22, r17	; 0x16
    6dde:	0d 8b       	std	Y+21, r16	; 0x15
    6de0:	78 8f       	std	Y+24, r23	; 0x18
    6de2:	6f 8b       	std	Y+23, r22	; 0x17
    6de4:	40 91 1d 08 	lds	r20, 0x081D
    6de8:	50 91 1e 08 	lds	r21, 0x081E
    6dec:	5e a3       	std	Y+38, r21	; 0x26
    6dee:	4d a3       	std	Y+37, r20	; 0x25
    6df0:	5a 8f       	std	Y+26, r21	; 0x1a
    6df2:	49 8f       	std	Y+25, r20	; 0x19
    6df4:	20 91 1f 08 	lds	r18, 0x081F
    6df8:	30 91 20 08 	lds	r19, 0x0820
    6dfc:	38 a7       	std	Y+40, r19	; 0x28
    6dfe:	2f a3       	std	Y+39, r18	; 0x27
    6e00:	3c 8f       	std	Y+28, r19	; 0x1c
    6e02:	2b 8f       	std	Y+27, r18	; 0x1b
	int16_t	SensorDataP2[7] = {PID_Gyros[P2][ROLL], PID_Gyros[P2][PITCH], PID_Gyros[P2][YAW], temp1, temp2, PID_ACCs[P2][ROLL], PID_ACCs[P2][PITCH]}; 
    6e04:	40 91 17 08 	lds	r20, 0x0817
    6e08:	50 91 18 08 	lds	r21, 0x0818
    6e0c:	5a a7       	std	Y+42, r21	; 0x2a
    6e0e:	49 a7       	std	Y+41, r20	; 0x29
    6e10:	5a 83       	std	Y+2, r21	; 0x02
    6e12:	49 83       	std	Y+1, r20	; 0x01
    6e14:	20 90 19 08 	lds	r2, 0x0819
    6e18:	30 90 1a 08 	lds	r3, 0x081A
    6e1c:	3c 82       	std	Y+4, r3	; 0x04
    6e1e:	2b 82       	std	Y+3, r2	; 0x03
    6e20:	40 90 1b 08 	lds	r4, 0x081B
    6e24:	50 90 1c 08 	lds	r5, 0x081C
    6e28:	5e 82       	std	Y+6, r5	; 0x06
    6e2a:	4d 82       	std	Y+5, r4	; 0x05
    6e2c:	18 87       	std	Y+8, r17	; 0x08
    6e2e:	0f 83       	std	Y+7, r16	; 0x07
    6e30:	7a 87       	std	Y+10, r23	; 0x0a
    6e32:	69 87       	std	Y+9, r22	; 0x09
    6e34:	a0 90 23 08 	lds	r10, 0x0823
    6e38:	b0 90 24 08 	lds	r11, 0x0824
    6e3c:	bc 86       	std	Y+12, r11	; 0x0c
    6e3e:	ab 86       	std	Y+11, r10	; 0x0b
    6e40:	80 90 25 08 	lds	r8, 0x0825
    6e44:	90 90 26 08 	lds	r9, 0x0826
    6e48:	9e 86       	std	Y+14, r9	; 0x0e
    6e4a:	8d 86       	std	Y+13, r8	; 0x0d
		//************************************************************
		// Mix in gyros
		//************************************************************ 

		// P1 gyros
		if (Transition_state < TRANS_P2)
    6e4c:	50 91 23 05 	lds	r21, 0x0523
    6e50:	5d 8f       	std	Y+29, r21	; 0x1d
			switch (Config.Channel[i].P1_Z_delta_acc)
			{
				case OFF:
					break;
				case ON:
					P1_solution = P1_solution - PID_ACCs[P1][YAW];
    6e52:	20 91 21 08 	lds	r18, 0x0821
    6e56:	30 91 22 08 	lds	r19, 0x0822
    6e5a:	3c a7       	std	Y+44, r19	; 0x2c
    6e5c:	2b a7       	std	Y+43, r18	; 0x2b
			switch (Config.Channel[i].P2_Z_delta_acc)
			{
				case OFF:
					break;
				case ON:
					P2_solution = P2_solution - PID_ACCs[P2][YAW];
    6e5e:	40 91 27 08 	lds	r20, 0x0827
    6e62:	50 91 28 08 	lds	r21, 0x0828
    6e66:	5e a7       	std	Y+46, r21	; 0x2e
    6e68:	4d a7       	std	Y+45, r20	; 0x2d
    6e6a:	c1 2c       	mov	r12, r1
    6e6c:	d1 2c       	mov	r13, r1
			switch (Config.Channel[i].P2_Roll_gyro)
			{
				case OFF:
				break;
				case ON:
				P2_solution = P2_solution - PID_Gyros[P2][ROLL];
    6e6e:	29 a5       	ldd	r18, Y+41	; 0x29
    6e70:	3a a5       	ldd	r19, Y+42	; 0x2a
    6e72:	31 95       	neg	r19
    6e74:	21 95       	neg	r18
    6e76:	31 09       	sbc	r19, r1
    6e78:	38 ab       	std	Y+48, r19	; 0x30
    6e7a:	2f a7       	std	Y+47, r18	; 0x2f
			switch (Config.Channel[i].P1_Roll_gyro) 
			{
				case OFF:
					break;
				case ON:
					P1_solution = P1_solution - PID_Gyros[P1][ROLL];
    6e7c:	4f 8d       	ldd	r20, Y+31	; 0x1f
    6e7e:	58 a1       	ldd	r21, Y+32	; 0x20
    6e80:	51 95       	neg	r21
    6e82:	41 95       	neg	r20
    6e84:	51 09       	sbc	r21, r1
    6e86:	5a ab       	std	Y+50, r21	; 0x32
    6e88:	49 ab       	std	Y+49, r20	; 0x31
		//************************************************************
		// Mix in gyros
		//************************************************************ 

		// P1 gyros
		if (Transition_state < TRANS_P2)
    6e8a:	5d 8d       	ldd	r21, Y+29	; 0x1d
    6e8c:	59 30       	cpi	r21, 0x09	; 9
    6e8e:	08 f0       	brcs	.+2      	; 0x6e92 <ProcessMixer+0x158>
    6e90:	a6 c0       	rjmp	.+332    	; 0x6fde <ProcessMixer+0x2a4>
    6e92:	c6 01       	movw	r24, r12
    6e94:	8f 54       	subi	r24, 0x4F	; 79
    6e96:	9a 4f       	sbci	r25, 0xFA	; 250
    6e98:	7c 01       	movw	r14, r24
    6e9a:	fc 01       	movw	r30, r24
    6e9c:	ec 55       	subi	r30, 0x5C	; 92
    6e9e:	ff 4f       	sbci	r31, 0xFF	; 255
		{
			switch (Config.Channel[i].P1_Roll_gyro) 
    6ea0:	80 81       	ld	r24, Z
    6ea2:	82 30       	cpi	r24, 0x02	; 2
    6ea4:	71 f0       	breq	.+28     	; 0x6ec2 <ProcessMixer+0x188>
    6ea6:	1c f4       	brge	.+6      	; 0x6eae <ProcessMixer+0x174>
    6ea8:	81 30       	cpi	r24, 0x01	; 1
    6eaa:	41 f0       	breq	.+16     	; 0x6ebc <ProcessMixer+0x182>
    6eac:	04 c0       	rjmp	.+8      	; 0x6eb6 <ProcessMixer+0x17c>
    6eae:	83 30       	cpi	r24, 0x03	; 3
    6eb0:	39 f1       	breq	.+78     	; 0x6f00 <ProcessMixer+0x1c6>
    6eb2:	84 30       	cpi	r24, 0x04	; 4
    6eb4:	b9 f0       	breq	.+46     	; 0x6ee4 <ProcessMixer+0x1aa>
	{
		//************************************************************
		// Zero each channel value to start
		//************************************************************

		P1_solution = 0;
    6eb6:	00 e0       	ldi	r16, 0x00	; 0
    6eb8:	10 e0       	ldi	r17, 0x00	; 0
    6eba:	24 c0       	rjmp	.+72     	; 0x6f04 <ProcessMixer+0x1ca>
			switch (Config.Channel[i].P1_Roll_gyro) 
			{
				case OFF:
					break;
				case ON:
					P1_solution = P1_solution - PID_Gyros[P1][ROLL];
    6ebc:	09 a9       	ldd	r16, Y+49	; 0x31
    6ebe:	1a a9       	ldd	r17, Y+50	; 0x32
					break;
    6ec0:	21 c0       	rjmp	.+66     	; 0x6f04 <ProcessMixer+0x1ca>
    6ec2:	f7 01       	movw	r30, r14
    6ec4:	e2 56       	subi	r30, 0x62	; 98
    6ec6:	ff 4f       	sbci	r31, 0xFF	; 255
				case REVERSE:
					P1_solution = P1_solution + PID_Gyros[P1][ROLL];
					break;
				case SCALE:
					P1_solution = P1_solution - scale32(PID_Gyros[P1][ROLL], Config.Channel[i].P1_aileron_volume * 5); 
    6ec8:	60 81       	ld	r22, Z
    6eca:	95 e0       	ldi	r25, 0x05	; 5
    6ecc:	69 02       	muls	r22, r25
    6ece:	b0 01       	movw	r22, r0
    6ed0:	11 24       	eor	r1, r1
    6ed2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    6ed4:	98 a1       	ldd	r25, Y+32	; 0x20
    6ed6:	0e 94 7a 36 	call	0x6cf4	; 0x6cf4 <scale32>
    6eda:	00 27       	eor	r16, r16
    6edc:	11 27       	eor	r17, r17
    6ede:	08 1b       	sub	r16, r24
    6ee0:	19 0b       	sbc	r17, r25
					break;
    6ee2:	10 c0       	rjmp	.+32     	; 0x6f04 <ProcessMixer+0x1ca>
    6ee4:	f7 01       	movw	r30, r14
    6ee6:	e2 56       	subi	r30, 0x62	; 98
    6ee8:	ff 4f       	sbci	r31, 0xFF	; 255
				case REVERSESCALE:
					P1_solution = P1_solution + scale32(PID_Gyros[P1][ROLL], Config.Channel[i].P1_aileron_volume * 5); 
    6eea:	60 81       	ld	r22, Z
    6eec:	a5 e0       	ldi	r26, 0x05	; 5
    6eee:	6a 02       	muls	r22, r26
    6ef0:	b0 01       	movw	r22, r0
    6ef2:	11 24       	eor	r1, r1
    6ef4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    6ef6:	98 a1       	ldd	r25, Y+32	; 0x20
    6ef8:	0e 94 7a 36 	call	0x6cf4	; 0x6cf4 <scale32>
    6efc:	8c 01       	movw	r16, r24
					break;				
    6efe:	02 c0       	rjmp	.+4      	; 0x6f04 <ProcessMixer+0x1ca>
					break;
				case ON:
					P1_solution = P1_solution - PID_Gyros[P1][ROLL];
					break;
				case REVERSE:
					P1_solution = P1_solution + PID_Gyros[P1][ROLL];
    6f00:	0f 8d       	ldd	r16, Y+31	; 0x1f
    6f02:	18 a1       	ldd	r17, Y+32	; 0x20
    6f04:	f7 01       	movw	r30, r14
    6f06:	ea 55       	subi	r30, 0x5A	; 90
    6f08:	ff 4f       	sbci	r31, 0xFF	; 255
					break;				
				default:
					break;	
			}

			switch (Config.Channel[i].P1_Pitch_gyro)
    6f0a:	80 81       	ld	r24, Z
    6f0c:	82 30       	cpi	r24, 0x02	; 2
    6f0e:	01 f1       	breq	.+64     	; 0x6f50 <ProcessMixer+0x216>
    6f10:	3c f4       	brge	.+14     	; 0x6f20 <ProcessMixer+0x1e6>
    6f12:	81 30       	cpi	r24, 0x01	; 1
    6f14:	59 f5       	brne	.+86     	; 0x6f6c <ProcessMixer+0x232>
			{
				case OFF:
					break;
				case ON:
					P1_solution = P1_solution - PID_Gyros[P1][PITCH];
    6f16:	29 a1       	ldd	r18, Y+33	; 0x21
    6f18:	3a a1       	ldd	r19, Y+34	; 0x22
    6f1a:	02 1b       	sub	r16, r18
    6f1c:	13 0b       	sbc	r17, r19
					break;
    6f1e:	26 c0       	rjmp	.+76     	; 0x6f6c <ProcessMixer+0x232>
					break;				
				default:
					break;	
			}

			switch (Config.Channel[i].P1_Pitch_gyro)
    6f20:	83 30       	cpi	r24, 0x03	; 3
    6f22:	89 f0       	breq	.+34     	; 0x6f46 <ProcessMixer+0x20c>
    6f24:	84 30       	cpi	r24, 0x04	; 4
    6f26:	11 f5       	brne	.+68     	; 0x6f6c <ProcessMixer+0x232>
    6f28:	f7 01       	movw	r30, r14
    6f2a:	e0 56       	subi	r30, 0x60	; 96
    6f2c:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				case SCALE:
					P1_solution = P1_solution - scale32(PID_Gyros[P1][PITCH], Config.Channel[i].P1_elevator_volume * 5);
					break;
				case REVERSESCALE:
					P1_solution = P1_solution + scale32(PID_Gyros[P1][PITCH], Config.Channel[i].P1_elevator_volume * 5);
    6f2e:	60 81       	ld	r22, Z
    6f30:	85 e0       	ldi	r24, 0x05	; 5
    6f32:	68 02       	muls	r22, r24
    6f34:	b0 01       	movw	r22, r0
    6f36:	11 24       	eor	r1, r1
    6f38:	89 a1       	ldd	r24, Y+33	; 0x21
    6f3a:	9a a1       	ldd	r25, Y+34	; 0x22
    6f3c:	0e 94 7a 36 	call	0x6cf4	; 0x6cf4 <scale32>
    6f40:	08 0f       	add	r16, r24
    6f42:	19 1f       	adc	r17, r25
					break;
    6f44:	13 c0       	rjmp	.+38     	; 0x6f6c <ProcessMixer+0x232>
					break;
				case ON:
					P1_solution = P1_solution - PID_Gyros[P1][PITCH];
					break;
				case REVERSE:
					P1_solution = P1_solution + PID_Gyros[P1][PITCH];
    6f46:	49 a1       	ldd	r20, Y+33	; 0x21
    6f48:	5a a1       	ldd	r21, Y+34	; 0x22
    6f4a:	04 0f       	add	r16, r20
    6f4c:	15 1f       	adc	r17, r21
					break;
    6f4e:	0e c0       	rjmp	.+28     	; 0x6f6c <ProcessMixer+0x232>
    6f50:	f7 01       	movw	r30, r14
    6f52:	e0 56       	subi	r30, 0x60	; 96
    6f54:	ff 4f       	sbci	r31, 0xFF	; 255
				case SCALE:
					P1_solution = P1_solution - scale32(PID_Gyros[P1][PITCH], Config.Channel[i].P1_elevator_volume * 5);
    6f56:	60 81       	ld	r22, Z
    6f58:	55 e0       	ldi	r21, 0x05	; 5
    6f5a:	65 02       	muls	r22, r21
    6f5c:	b0 01       	movw	r22, r0
    6f5e:	11 24       	eor	r1, r1
    6f60:	89 a1       	ldd	r24, Y+33	; 0x21
    6f62:	9a a1       	ldd	r25, Y+34	; 0x22
    6f64:	0e 94 7a 36 	call	0x6cf4	; 0x6cf4 <scale32>
    6f68:	08 1b       	sub	r16, r24
    6f6a:	19 0b       	sbc	r17, r25
    6f6c:	f7 01       	movw	r30, r14
    6f6e:	e8 55       	subi	r30, 0x58	; 88
    6f70:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				default:
					break;
			}

			switch (Config.Channel[i].P1_Yaw_gyro)
    6f72:	80 81       	ld	r24, Z
    6f74:	82 30       	cpi	r24, 0x02	; 2
    6f76:	01 f1       	breq	.+64     	; 0x6fb8 <ProcessMixer+0x27e>
    6f78:	3c f4       	brge	.+14     	; 0x6f88 <ProcessMixer+0x24e>
    6f7a:	81 30       	cpi	r24, 0x01	; 1
    6f7c:	59 f5       	brne	.+86     	; 0x6fd4 <ProcessMixer+0x29a>
			{
				case OFF:
					break;
				case ON:
					P1_solution = P1_solution - PID_Gyros[P1][YAW];
    6f7e:	2b a1       	ldd	r18, Y+35	; 0x23
    6f80:	3c a1       	ldd	r19, Y+36	; 0x24
    6f82:	02 1b       	sub	r16, r18
    6f84:	13 0b       	sbc	r17, r19
					break;
    6f86:	26 c0       	rjmp	.+76     	; 0x6fd4 <ProcessMixer+0x29a>
					break;
				default:
					break;
			}

			switch (Config.Channel[i].P1_Yaw_gyro)
    6f88:	83 30       	cpi	r24, 0x03	; 3
    6f8a:	89 f0       	breq	.+34     	; 0x6fae <ProcessMixer+0x274>
    6f8c:	84 30       	cpi	r24, 0x04	; 4
    6f8e:	11 f5       	brne	.+68     	; 0x6fd4 <ProcessMixer+0x29a>
    6f90:	f7 01       	movw	r30, r14
    6f92:	ee 55       	subi	r30, 0x5E	; 94
    6f94:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				case SCALE:
					P1_solution = P1_solution - scale32(PID_Gyros[P1][YAW], Config.Channel[i].P1_rudder_volume * 5);
					break;
				case REVERSESCALE:
					P1_solution = P1_solution + scale32(PID_Gyros[P1][YAW], Config.Channel[i].P1_rudder_volume * 5);
    6f96:	60 81       	ld	r22, Z
    6f98:	85 e0       	ldi	r24, 0x05	; 5
    6f9a:	68 02       	muls	r22, r24
    6f9c:	b0 01       	movw	r22, r0
    6f9e:	11 24       	eor	r1, r1
    6fa0:	8b a1       	ldd	r24, Y+35	; 0x23
    6fa2:	9c a1       	ldd	r25, Y+36	; 0x24
    6fa4:	0e 94 7a 36 	call	0x6cf4	; 0x6cf4 <scale32>
    6fa8:	08 0f       	add	r16, r24
    6faa:	19 1f       	adc	r17, r25
					break;
    6fac:	13 c0       	rjmp	.+38     	; 0x6fd4 <ProcessMixer+0x29a>
					break;
				case ON:
					P1_solution = P1_solution - PID_Gyros[P1][YAW];
					break;
				case REVERSE:
					P1_solution = P1_solution + PID_Gyros[P1][YAW];
    6fae:	4b a1       	ldd	r20, Y+35	; 0x23
    6fb0:	5c a1       	ldd	r21, Y+36	; 0x24
    6fb2:	04 0f       	add	r16, r20
    6fb4:	15 1f       	adc	r17, r21
					break;
    6fb6:	0e c0       	rjmp	.+28     	; 0x6fd4 <ProcessMixer+0x29a>
    6fb8:	f7 01       	movw	r30, r14
    6fba:	ee 55       	subi	r30, 0x5E	; 94
    6fbc:	ff 4f       	sbci	r31, 0xFF	; 255
				case SCALE:
					P1_solution = P1_solution - scale32(PID_Gyros[P1][YAW], Config.Channel[i].P1_rudder_volume * 5);
    6fbe:	60 81       	ld	r22, Z
    6fc0:	55 e0       	ldi	r21, 0x05	; 5
    6fc2:	65 02       	muls	r22, r21
    6fc4:	b0 01       	movw	r22, r0
    6fc6:	11 24       	eor	r1, r1
    6fc8:	8b a1       	ldd	r24, Y+35	; 0x23
    6fca:	9c a1       	ldd	r25, Y+36	; 0x24
    6fcc:	0e 94 7a 36 	call	0x6cf4	; 0x6cf4 <scale32>
    6fd0:	08 1b       	sub	r16, r24
    6fd2:	19 0b       	sbc	r17, r25
					break;
			}
		}

		// P2 gyros
		if (Transition_state > TRANS_P1)
    6fd4:	2d 8d       	ldd	r18, Y+29	; 0x1d
    6fd6:	22 23       	and	r18, r18
    6fd8:	09 f4       	brne	.+2      	; 0x6fdc <ProcessMixer+0x2a2>
    6fda:	9d c0       	rjmp	.+314    	; 0x7116 <ProcessMixer+0x3dc>
    6fdc:	02 c0       	rjmp	.+4      	; 0x6fe2 <ProcessMixer+0x2a8>
	{
		//************************************************************
		// Zero each channel value to start
		//************************************************************

		P1_solution = 0;
    6fde:	00 e0       	ldi	r16, 0x00	; 0
    6fe0:	10 e0       	ldi	r17, 0x00	; 0
    6fe2:	a6 01       	movw	r20, r12
    6fe4:	4f 54       	subi	r20, 0x4F	; 79
    6fe6:	5a 4f       	sbci	r21, 0xFA	; 250
    6fe8:	3a 01       	movw	r6, r20
    6fea:	fa 01       	movw	r30, r20
    6fec:	eb 55       	subi	r30, 0x5B	; 91
    6fee:	ff 4f       	sbci	r31, 0xFF	; 255
		}

		// P2 gyros
		if (Transition_state > TRANS_P1)
		{
			switch (Config.Channel[i].P2_Roll_gyro)
    6ff0:	80 81       	ld	r24, Z
    6ff2:	82 30       	cpi	r24, 0x02	; 2
    6ff4:	71 f0       	breq	.+28     	; 0x7012 <ProcessMixer+0x2d8>
    6ff6:	1c f4       	brge	.+6      	; 0x6ffe <ProcessMixer+0x2c4>
    6ff8:	81 30       	cpi	r24, 0x01	; 1
    6ffa:	41 f0       	breq	.+16     	; 0x700c <ProcessMixer+0x2d2>
    6ffc:	04 c0       	rjmp	.+8      	; 0x7006 <ProcessMixer+0x2cc>
    6ffe:	83 30       	cpi	r24, 0x03	; 3
    7000:	39 f1       	breq	.+78     	; 0x7050 <ProcessMixer+0x316>
    7002:	84 30       	cpi	r24, 0x04	; 4
    7004:	b9 f0       	breq	.+46     	; 0x7034 <ProcessMixer+0x2fa>
		//************************************************************
		// Zero each channel value to start
		//************************************************************

		P1_solution = 0;
		P2_solution = 0;
    7006:	e1 2c       	mov	r14, r1
    7008:	f1 2c       	mov	r15, r1
    700a:	24 c0       	rjmp	.+72     	; 0x7054 <ProcessMixer+0x31a>
			switch (Config.Channel[i].P2_Roll_gyro)
			{
				case OFF:
				break;
				case ON:
				P2_solution = P2_solution - PID_Gyros[P2][ROLL];
    700c:	ef a4       	ldd	r14, Y+47	; 0x2f
    700e:	f8 a8       	ldd	r15, Y+48	; 0x30
				break;
    7010:	21 c0       	rjmp	.+66     	; 0x7054 <ProcessMixer+0x31a>
    7012:	fa 01       	movw	r30, r20
    7014:	e1 56       	subi	r30, 0x61	; 97
    7016:	ff 4f       	sbci	r31, 0xFF	; 255
				case REVERSE:
				P2_solution = P2_solution + PID_Gyros[P2][ROLL];
				break;
				case SCALE:
				P2_solution = P2_solution - scale32(PID_Gyros[P2][ROLL], Config.Channel[i].P2_aileron_volume * 5);
    7018:	60 81       	ld	r22, Z
    701a:	55 e0       	ldi	r21, 0x05	; 5
    701c:	65 02       	muls	r22, r21
    701e:	b0 01       	movw	r22, r0
    7020:	11 24       	eor	r1, r1
    7022:	89 a5       	ldd	r24, Y+41	; 0x29
    7024:	9a a5       	ldd	r25, Y+42	; 0x2a
    7026:	0e 94 7a 36 	call	0x6cf4	; 0x6cf4 <scale32>
    702a:	ee 24       	eor	r14, r14
    702c:	ff 24       	eor	r15, r15
    702e:	e8 1a       	sub	r14, r24
    7030:	f9 0a       	sbc	r15, r25
				break;
    7032:	10 c0       	rjmp	.+32     	; 0x7054 <ProcessMixer+0x31a>
    7034:	fa 01       	movw	r30, r20
    7036:	e1 56       	subi	r30, 0x61	; 97
    7038:	ff 4f       	sbci	r31, 0xFF	; 255
				case REVERSESCALE:
				P2_solution = P2_solution + scale32(PID_Gyros[P2][ROLL], Config.Channel[i].P2_aileron_volume * 5);
    703a:	60 81       	ld	r22, Z
    703c:	85 e0       	ldi	r24, 0x05	; 5
    703e:	68 02       	muls	r22, r24
    7040:	b0 01       	movw	r22, r0
    7042:	11 24       	eor	r1, r1
    7044:	89 a5       	ldd	r24, Y+41	; 0x29
    7046:	9a a5       	ldd	r25, Y+42	; 0x2a
    7048:	0e 94 7a 36 	call	0x6cf4	; 0x6cf4 <scale32>
    704c:	7c 01       	movw	r14, r24
				break;
    704e:	02 c0       	rjmp	.+4      	; 0x7054 <ProcessMixer+0x31a>
				break;
				case ON:
				P2_solution = P2_solution - PID_Gyros[P2][ROLL];
				break;
				case REVERSE:
				P2_solution = P2_solution + PID_Gyros[P2][ROLL];
    7050:	e9 a4       	ldd	r14, Y+41	; 0x29
    7052:	fa a4       	ldd	r15, Y+42	; 0x2a
    7054:	f3 01       	movw	r30, r6
    7056:	e9 55       	subi	r30, 0x59	; 89
    7058:	ff 4f       	sbci	r31, 0xFF	; 255
				break;
				default:
				break;
			}

			switch (Config.Channel[i].P2_Pitch_gyro)
    705a:	80 81       	ld	r24, Z
    705c:	82 30       	cpi	r24, 0x02	; 2
    705e:	d9 f0       	breq	.+54     	; 0x7096 <ProcessMixer+0x35c>
    7060:	2c f4       	brge	.+10     	; 0x706c <ProcessMixer+0x332>
    7062:	81 30       	cpi	r24, 0x01	; 1
    7064:	29 f5       	brne	.+74     	; 0x70b0 <ProcessMixer+0x376>
			{
				case OFF:
				break;
				case ON:
				P2_solution = P2_solution - PID_Gyros[P2][PITCH];
    7066:	e2 18       	sub	r14, r2
    7068:	f3 08       	sbc	r15, r3
				break;
    706a:	22 c0       	rjmp	.+68     	; 0x70b0 <ProcessMixer+0x376>
				break;
				default:
				break;
			}

			switch (Config.Channel[i].P2_Pitch_gyro)
    706c:	83 30       	cpi	r24, 0x03	; 3
    706e:	81 f0       	breq	.+32     	; 0x7090 <ProcessMixer+0x356>
    7070:	84 30       	cpi	r24, 0x04	; 4
    7072:	f1 f4       	brne	.+60     	; 0x70b0 <ProcessMixer+0x376>
    7074:	f3 01       	movw	r30, r6
    7076:	ef 55       	subi	r30, 0x5F	; 95
    7078:	ff 4f       	sbci	r31, 0xFF	; 255
				break;
				case SCALE:
				P2_solution = P2_solution - scale32(PID_Gyros[P2][PITCH], Config.Channel[i].P2_elevator_volume * 5);
				break;
				case REVERSESCALE:
				P2_solution = P2_solution + scale32(PID_Gyros[P2][PITCH], Config.Channel[i].P2_elevator_volume * 5);
    707a:	60 81       	ld	r22, Z
    707c:	a5 e0       	ldi	r26, 0x05	; 5
    707e:	6a 02       	muls	r22, r26
    7080:	b0 01       	movw	r22, r0
    7082:	11 24       	eor	r1, r1
    7084:	c1 01       	movw	r24, r2
    7086:	0e 94 7a 36 	call	0x6cf4	; 0x6cf4 <scale32>
    708a:	e8 0e       	add	r14, r24
    708c:	f9 1e       	adc	r15, r25
				break;
    708e:	10 c0       	rjmp	.+32     	; 0x70b0 <ProcessMixer+0x376>
				break;
				case ON:
				P2_solution = P2_solution - PID_Gyros[P2][PITCH];
				break;
				case REVERSE:
				P2_solution = P2_solution + PID_Gyros[P2][PITCH];
    7090:	e2 0c       	add	r14, r2
    7092:	f3 1c       	adc	r15, r3
				break;
    7094:	0d c0       	rjmp	.+26     	; 0x70b0 <ProcessMixer+0x376>
    7096:	f3 01       	movw	r30, r6
    7098:	ef 55       	subi	r30, 0x5F	; 95
    709a:	ff 4f       	sbci	r31, 0xFF	; 255
				case SCALE:
				P2_solution = P2_solution - scale32(PID_Gyros[P2][PITCH], Config.Channel[i].P2_elevator_volume * 5);
    709c:	60 81       	ld	r22, Z
    709e:	95 e0       	ldi	r25, 0x05	; 5
    70a0:	69 02       	muls	r22, r25
    70a2:	b0 01       	movw	r22, r0
    70a4:	11 24       	eor	r1, r1
    70a6:	c1 01       	movw	r24, r2
    70a8:	0e 94 7a 36 	call	0x6cf4	; 0x6cf4 <scale32>
    70ac:	e8 1a       	sub	r14, r24
    70ae:	f9 0a       	sbc	r15, r25
    70b0:	f3 01       	movw	r30, r6
    70b2:	e7 55       	subi	r30, 0x57	; 87
    70b4:	ff 4f       	sbci	r31, 0xFF	; 255
				break;
				default:
				break;
			}

			switch (Config.Channel[i].P2_Yaw_gyro)
    70b6:	80 81       	ld	r24, Z
    70b8:	82 30       	cpi	r24, 0x02	; 2
    70ba:	d9 f0       	breq	.+54     	; 0x70f2 <ProcessMixer+0x3b8>
    70bc:	2c f4       	brge	.+10     	; 0x70c8 <ProcessMixer+0x38e>
    70be:	81 30       	cpi	r24, 0x01	; 1
    70c0:	29 f5       	brne	.+74     	; 0x710c <ProcessMixer+0x3d2>
			{
				case OFF:
				break;
				case ON:
				P2_solution = P2_solution - PID_Gyros[P2][YAW];
    70c2:	e4 18       	sub	r14, r4
    70c4:	f5 08       	sbc	r15, r5
				break;
    70c6:	22 c0       	rjmp	.+68     	; 0x710c <ProcessMixer+0x3d2>
				break;
				default:
				break;
			}

			switch (Config.Channel[i].P2_Yaw_gyro)
    70c8:	83 30       	cpi	r24, 0x03	; 3
    70ca:	81 f0       	breq	.+32     	; 0x70ec <ProcessMixer+0x3b2>
    70cc:	84 30       	cpi	r24, 0x04	; 4
    70ce:	f1 f4       	brne	.+60     	; 0x710c <ProcessMixer+0x3d2>
    70d0:	f3 01       	movw	r30, r6
    70d2:	ed 55       	subi	r30, 0x5D	; 93
    70d4:	ff 4f       	sbci	r31, 0xFF	; 255
				break;
				case SCALE:
				P2_solution = P2_solution - scale32(PID_Gyros[P2][YAW], Config.Channel[i].P2_rudder_volume * 5);
				break;
				case REVERSESCALE:
				P2_solution = P2_solution + scale32(PID_Gyros[P2][YAW], Config.Channel[i].P2_rudder_volume * 5);
    70d6:	60 81       	ld	r22, Z
    70d8:	e5 e0       	ldi	r30, 0x05	; 5
    70da:	6e 02       	muls	r22, r30
    70dc:	b0 01       	movw	r22, r0
    70de:	11 24       	eor	r1, r1
    70e0:	c2 01       	movw	r24, r4
    70e2:	0e 94 7a 36 	call	0x6cf4	; 0x6cf4 <scale32>
    70e6:	e8 0e       	add	r14, r24
    70e8:	f9 1e       	adc	r15, r25
				break;
    70ea:	10 c0       	rjmp	.+32     	; 0x710c <ProcessMixer+0x3d2>
				break;
				case ON:
				P2_solution = P2_solution - PID_Gyros[P2][YAW];
				break;
				case REVERSE:
				P2_solution = P2_solution + PID_Gyros[P2][YAW];
    70ec:	e4 0c       	add	r14, r4
    70ee:	f5 1c       	adc	r15, r5
				break;
    70f0:	0d c0       	rjmp	.+26     	; 0x710c <ProcessMixer+0x3d2>
    70f2:	f3 01       	movw	r30, r6
    70f4:	ed 55       	subi	r30, 0x5D	; 93
    70f6:	ff 4f       	sbci	r31, 0xFF	; 255
				case SCALE:
				P2_solution = P2_solution - scale32(PID_Gyros[P2][YAW], Config.Channel[i].P2_rudder_volume * 5);
    70f8:	60 81       	ld	r22, Z
    70fa:	b5 e0       	ldi	r27, 0x05	; 5
    70fc:	6b 02       	muls	r22, r27
    70fe:	b0 01       	movw	r22, r0
    7100:	11 24       	eor	r1, r1
    7102:	c2 01       	movw	r24, r4
    7104:	0e 94 7a 36 	call	0x6cf4	; 0x6cf4 <scale32>
    7108:	e8 1a       	sub	r14, r24
    710a:	f9 0a       	sbc	r15, r25

		//************************************************************
		// Mix in accelerometers
		//************************************************************ 
		// P1
		if (Transition_state < TRANS_P2)
    710c:	2d 8d       	ldd	r18, Y+29	; 0x1d
    710e:	29 30       	cpi	r18, 0x09	; 9
    7110:	08 f0       	brcs	.+2      	; 0x7114 <ProcessMixer+0x3da>
    7112:	a7 c0       	rjmp	.+334    	; 0x7262 <ProcessMixer+0x528>
    7114:	02 c0       	rjmp	.+4      	; 0x711a <ProcessMixer+0x3e0>
		//************************************************************
		// Zero each channel value to start
		//************************************************************

		P1_solution = 0;
		P2_solution = 0;
    7116:	e1 2c       	mov	r14, r1
    7118:	f1 2c       	mov	r15, r1
    711a:	a6 01       	movw	r20, r12
    711c:	4f 54       	subi	r20, 0x4F	; 79
    711e:	5a 4f       	sbci	r21, 0xFA	; 250
    7120:	3a 01       	movw	r6, r20
    7122:	fa 01       	movw	r30, r20
    7124:	e6 55       	subi	r30, 0x56	; 86
    7126:	ff 4f       	sbci	r31, 0xFF	; 255
		// Mix in accelerometers
		//************************************************************ 
		// P1
		if (Transition_state < TRANS_P2)
		{
			switch (Config.Channel[i].P1_Roll_acc)
    7128:	80 81       	ld	r24, Z
    712a:	82 30       	cpi	r24, 0x02	; 2
    712c:	01 f1       	breq	.+64     	; 0x716e <ProcessMixer+0x434>
    712e:	3c f4       	brge	.+14     	; 0x713e <ProcessMixer+0x404>
    7130:	81 30       	cpi	r24, 0x01	; 1
    7132:	59 f5       	brne	.+86     	; 0x718a <ProcessMixer+0x450>
			{
				case OFF:
					break;
				case ON:
					P1_solution = P1_solution - PID_ACCs[P1][ROLL];
    7134:	2d a1       	ldd	r18, Y+37	; 0x25
    7136:	3e a1       	ldd	r19, Y+38	; 0x26
    7138:	02 1b       	sub	r16, r18
    713a:	13 0b       	sbc	r17, r19
					break;
    713c:	26 c0       	rjmp	.+76     	; 0x718a <ProcessMixer+0x450>
		// Mix in accelerometers
		//************************************************************ 
		// P1
		if (Transition_state < TRANS_P2)
		{
			switch (Config.Channel[i].P1_Roll_acc)
    713e:	83 30       	cpi	r24, 0x03	; 3
    7140:	89 f0       	breq	.+34     	; 0x7164 <ProcessMixer+0x42a>
    7142:	84 30       	cpi	r24, 0x04	; 4
    7144:	11 f5       	brne	.+68     	; 0x718a <ProcessMixer+0x450>
    7146:	fa 01       	movw	r30, r20
    7148:	e2 56       	subi	r30, 0x62	; 98
    714a:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				case SCALE:
					P1_solution = P1_solution - scale32(PID_ACCs[P1][ROLL], Config.Channel[i].P1_aileron_volume * 5);
					break;
				case REVERSESCALE:
					P1_solution = P1_solution + scale32(PID_ACCs[P1][ROLL], Config.Channel[i].P1_aileron_volume * 5);
    714c:	60 81       	ld	r22, Z
    714e:	85 e0       	ldi	r24, 0x05	; 5
    7150:	68 02       	muls	r22, r24
    7152:	b0 01       	movw	r22, r0
    7154:	11 24       	eor	r1, r1
    7156:	8d a1       	ldd	r24, Y+37	; 0x25
    7158:	9e a1       	ldd	r25, Y+38	; 0x26
    715a:	0e 94 7a 36 	call	0x6cf4	; 0x6cf4 <scale32>
    715e:	08 0f       	add	r16, r24
    7160:	19 1f       	adc	r17, r25
					break;
    7162:	13 c0       	rjmp	.+38     	; 0x718a <ProcessMixer+0x450>
					break;
				case ON:
					P1_solution = P1_solution - PID_ACCs[P1][ROLL];
					break;
				case REVERSE:
					P1_solution = P1_solution + PID_ACCs[P1][ROLL];
    7164:	4d a1       	ldd	r20, Y+37	; 0x25
    7166:	5e a1       	ldd	r21, Y+38	; 0x26
    7168:	04 0f       	add	r16, r20
    716a:	15 1f       	adc	r17, r21
					break;
    716c:	0e c0       	rjmp	.+28     	; 0x718a <ProcessMixer+0x450>
    716e:	fa 01       	movw	r30, r20
    7170:	e2 56       	subi	r30, 0x62	; 98
    7172:	ff 4f       	sbci	r31, 0xFF	; 255
				case SCALE:
					P1_solution = P1_solution - scale32(PID_ACCs[P1][ROLL], Config.Channel[i].P1_aileron_volume * 5);
    7174:	60 81       	ld	r22, Z
    7176:	55 e0       	ldi	r21, 0x05	; 5
    7178:	65 02       	muls	r22, r21
    717a:	b0 01       	movw	r22, r0
    717c:	11 24       	eor	r1, r1
    717e:	8d a1       	ldd	r24, Y+37	; 0x25
    7180:	9e a1       	ldd	r25, Y+38	; 0x26
    7182:	0e 94 7a 36 	call	0x6cf4	; 0x6cf4 <scale32>
    7186:	08 1b       	sub	r16, r24
    7188:	19 0b       	sbc	r17, r25
    718a:	f3 01       	movw	r30, r6
    718c:	e4 55       	subi	r30, 0x54	; 84
    718e:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				default:
					break;
			}			

			switch (Config.Channel[i].P1_Pitch_acc)
    7190:	80 81       	ld	r24, Z
    7192:	82 30       	cpi	r24, 0x02	; 2
    7194:	01 f1       	breq	.+64     	; 0x71d6 <ProcessMixer+0x49c>
    7196:	3c f4       	brge	.+14     	; 0x71a6 <ProcessMixer+0x46c>
    7198:	81 30       	cpi	r24, 0x01	; 1
    719a:	59 f5       	brne	.+86     	; 0x71f2 <ProcessMixer+0x4b8>
			{
				case OFF:
					break;
				case ON:
					P1_solution = P1_solution - PID_ACCs[P1][PITCH];
    719c:	2f a1       	ldd	r18, Y+39	; 0x27
    719e:	38 a5       	ldd	r19, Y+40	; 0x28
    71a0:	02 1b       	sub	r16, r18
    71a2:	13 0b       	sbc	r17, r19
					break;
    71a4:	26 c0       	rjmp	.+76     	; 0x71f2 <ProcessMixer+0x4b8>
					break;
				default:
					break;
			}			

			switch (Config.Channel[i].P1_Pitch_acc)
    71a6:	83 30       	cpi	r24, 0x03	; 3
    71a8:	89 f0       	breq	.+34     	; 0x71cc <ProcessMixer+0x492>
    71aa:	84 30       	cpi	r24, 0x04	; 4
    71ac:	11 f5       	brne	.+68     	; 0x71f2 <ProcessMixer+0x4b8>
    71ae:	f3 01       	movw	r30, r6
    71b0:	e0 56       	subi	r30, 0x60	; 96
    71b2:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				case SCALE:
					P1_solution = P1_solution - scale32(PID_ACCs[P1][PITCH], Config.Channel[i].P1_elevator_volume * 5);
					break;
				case REVERSESCALE:
					P1_solution = P1_solution + scale32(PID_ACCs[P1][PITCH], Config.Channel[i].P1_elevator_volume * 5);
    71b4:	60 81       	ld	r22, Z
    71b6:	85 e0       	ldi	r24, 0x05	; 5
    71b8:	68 02       	muls	r22, r24
    71ba:	b0 01       	movw	r22, r0
    71bc:	11 24       	eor	r1, r1
    71be:	8f a1       	ldd	r24, Y+39	; 0x27
    71c0:	98 a5       	ldd	r25, Y+40	; 0x28
    71c2:	0e 94 7a 36 	call	0x6cf4	; 0x6cf4 <scale32>
    71c6:	08 0f       	add	r16, r24
    71c8:	19 1f       	adc	r17, r25
					break;
    71ca:	13 c0       	rjmp	.+38     	; 0x71f2 <ProcessMixer+0x4b8>
					break;
				case ON:
					P1_solution = P1_solution - PID_ACCs[P1][PITCH];
					break;
				case REVERSE:
					P1_solution = P1_solution + PID_ACCs[P1][PITCH];
    71cc:	4f a1       	ldd	r20, Y+39	; 0x27
    71ce:	58 a5       	ldd	r21, Y+40	; 0x28
    71d0:	04 0f       	add	r16, r20
    71d2:	15 1f       	adc	r17, r21
					break;
    71d4:	0e c0       	rjmp	.+28     	; 0x71f2 <ProcessMixer+0x4b8>
    71d6:	f3 01       	movw	r30, r6
    71d8:	e0 56       	subi	r30, 0x60	; 96
    71da:	ff 4f       	sbci	r31, 0xFF	; 255
				case SCALE:
					P1_solution = P1_solution - scale32(PID_ACCs[P1][PITCH], Config.Channel[i].P1_elevator_volume * 5);
    71dc:	60 81       	ld	r22, Z
    71de:	55 e0       	ldi	r21, 0x05	; 5
    71e0:	65 02       	muls	r22, r21
    71e2:	b0 01       	movw	r22, r0
    71e4:	11 24       	eor	r1, r1
    71e6:	8f a1       	ldd	r24, Y+39	; 0x27
    71e8:	98 a5       	ldd	r25, Y+40	; 0x28
    71ea:	0e 94 7a 36 	call	0x6cf4	; 0x6cf4 <scale32>
    71ee:	08 1b       	sub	r16, r24
    71f0:	19 0b       	sbc	r17, r25
    71f2:	f3 01       	movw	r30, r6
    71f4:	e2 55       	subi	r30, 0x52	; 82
    71f6:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				default:
					break;
			}

			switch (Config.Channel[i].P1_Z_delta_acc)
    71f8:	80 81       	ld	r24, Z
    71fa:	82 30       	cpi	r24, 0x02	; 2
    71fc:	01 f1       	breq	.+64     	; 0x723e <ProcessMixer+0x504>
    71fe:	3c f4       	brge	.+14     	; 0x720e <ProcessMixer+0x4d4>
    7200:	81 30       	cpi	r24, 0x01	; 1
    7202:	59 f5       	brne	.+86     	; 0x725a <ProcessMixer+0x520>
			{
				case OFF:
					break;
				case ON:
					P1_solution = P1_solution - PID_ACCs[P1][YAW];
    7204:	2b a5       	ldd	r18, Y+43	; 0x2b
    7206:	3c a5       	ldd	r19, Y+44	; 0x2c
    7208:	02 1b       	sub	r16, r18
    720a:	13 0b       	sbc	r17, r19
					break;
    720c:	26 c0       	rjmp	.+76     	; 0x725a <ProcessMixer+0x520>
					break;
				default:
					break;
			}

			switch (Config.Channel[i].P1_Z_delta_acc)
    720e:	83 30       	cpi	r24, 0x03	; 3
    7210:	89 f0       	breq	.+34     	; 0x7234 <ProcessMixer+0x4fa>
    7212:	84 30       	cpi	r24, 0x04	; 4
    7214:	11 f5       	brne	.+68     	; 0x725a <ProcessMixer+0x520>
    7216:	f3 01       	movw	r30, r6
    7218:	e5 56       	subi	r30, 0x65	; 101
    721a:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				case SCALE:
					P1_solution = P1_solution - scale32(PID_ACCs[P1][YAW], Config.Channel[i].P1_throttle_volume * 5);
					break;
				case REVERSESCALE:
					P1_solution = P1_solution + scale32(PID_ACCs[P1][YAW], Config.Channel[i].P1_throttle_volume * 5);
    721c:	60 81       	ld	r22, Z
    721e:	85 e0       	ldi	r24, 0x05	; 5
    7220:	68 02       	muls	r22, r24
    7222:	b0 01       	movw	r22, r0
    7224:	11 24       	eor	r1, r1
    7226:	8b a5       	ldd	r24, Y+43	; 0x2b
    7228:	9c a5       	ldd	r25, Y+44	; 0x2c
    722a:	0e 94 7a 36 	call	0x6cf4	; 0x6cf4 <scale32>
    722e:	08 0f       	add	r16, r24
    7230:	19 1f       	adc	r17, r25
					break;
    7232:	13 c0       	rjmp	.+38     	; 0x725a <ProcessMixer+0x520>
					break;
				case ON:
					P1_solution = P1_solution - PID_ACCs[P1][YAW];
					break;
				case REVERSE:
					P1_solution = P1_solution + PID_ACCs[P1][YAW];
    7234:	4b a5       	ldd	r20, Y+43	; 0x2b
    7236:	5c a5       	ldd	r21, Y+44	; 0x2c
    7238:	04 0f       	add	r16, r20
    723a:	15 1f       	adc	r17, r21
					break;
    723c:	0e c0       	rjmp	.+28     	; 0x725a <ProcessMixer+0x520>
    723e:	f3 01       	movw	r30, r6
    7240:	e5 56       	subi	r30, 0x65	; 101
    7242:	ff 4f       	sbci	r31, 0xFF	; 255
				case SCALE:
					P1_solution = P1_solution - scale32(PID_ACCs[P1][YAW], Config.Channel[i].P1_throttle_volume * 5);
    7244:	60 81       	ld	r22, Z
    7246:	55 e0       	ldi	r21, 0x05	; 5
    7248:	65 02       	muls	r22, r21
    724a:	b0 01       	movw	r22, r0
    724c:	11 24       	eor	r1, r1
    724e:	8b a5       	ldd	r24, Y+43	; 0x2b
    7250:	9c a5       	ldd	r25, Y+44	; 0x2c
    7252:	0e 94 7a 36 	call	0x6cf4	; 0x6cf4 <scale32>
    7256:	08 1b       	sub	r16, r24
    7258:	19 0b       	sbc	r17, r25
					break;
			}
		}

		// P2
		if (Transition_state > TRANS_P1)
    725a:	2d 8d       	ldd	r18, Y+29	; 0x1d
    725c:	22 23       	and	r18, r18
    725e:	09 f4       	brne	.+2      	; 0x7262 <ProcessMixer+0x528>
    7260:	98 c0       	rjmp	.+304    	; 0x7392 <ProcessMixer+0x658>
    7262:	a6 01       	movw	r20, r12
    7264:	4f 54       	subi	r20, 0x4F	; 79
    7266:	5a 4f       	sbci	r21, 0xFA	; 250
    7268:	3a 01       	movw	r6, r20
    726a:	fa 01       	movw	r30, r20
    726c:	e5 55       	subi	r30, 0x55	; 85
    726e:	ff 4f       	sbci	r31, 0xFF	; 255
		{
			switch (Config.Channel[i].P2_Roll_acc)
    7270:	80 81       	ld	r24, Z
    7272:	82 30       	cpi	r24, 0x02	; 2
    7274:	d9 f0       	breq	.+54     	; 0x72ac <ProcessMixer+0x572>
    7276:	2c f4       	brge	.+10     	; 0x7282 <ProcessMixer+0x548>
    7278:	81 30       	cpi	r24, 0x01	; 1
    727a:	29 f5       	brne	.+74     	; 0x72c6 <ProcessMixer+0x58c>
			{
				case OFF:
					break;
				case ON:
					P2_solution = P2_solution - PID_ACCs[P2][ROLL];
    727c:	ea 18       	sub	r14, r10
    727e:	fb 08       	sbc	r15, r11
					break;
    7280:	22 c0       	rjmp	.+68     	; 0x72c6 <ProcessMixer+0x58c>
		}

		// P2
		if (Transition_state > TRANS_P1)
		{
			switch (Config.Channel[i].P2_Roll_acc)
    7282:	83 30       	cpi	r24, 0x03	; 3
    7284:	81 f0       	breq	.+32     	; 0x72a6 <ProcessMixer+0x56c>
    7286:	84 30       	cpi	r24, 0x04	; 4
    7288:	f1 f4       	brne	.+60     	; 0x72c6 <ProcessMixer+0x58c>
    728a:	fa 01       	movw	r30, r20
    728c:	e1 56       	subi	r30, 0x61	; 97
    728e:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				case SCALE:
					P2_solution = P2_solution - scale32(PID_ACCs[P2][ROLL], Config.Channel[i].P2_aileron_volume * 5);
					break;
				case REVERSESCALE:
					P2_solution = P2_solution + scale32(PID_ACCs[P2][ROLL], Config.Channel[i].P2_aileron_volume * 5);
    7290:	60 81       	ld	r22, Z
    7292:	85 e0       	ldi	r24, 0x05	; 5
    7294:	68 02       	muls	r22, r24
    7296:	b0 01       	movw	r22, r0
    7298:	11 24       	eor	r1, r1
    729a:	c5 01       	movw	r24, r10
    729c:	0e 94 7a 36 	call	0x6cf4	; 0x6cf4 <scale32>
    72a0:	e8 0e       	add	r14, r24
    72a2:	f9 1e       	adc	r15, r25
					break;
    72a4:	10 c0       	rjmp	.+32     	; 0x72c6 <ProcessMixer+0x58c>
					break;
				case ON:
					P2_solution = P2_solution - PID_ACCs[P2][ROLL];
					break;
				case REVERSE:
					P2_solution = P2_solution + PID_ACCs[P2][ROLL];
    72a6:	ea 0c       	add	r14, r10
    72a8:	fb 1c       	adc	r15, r11
					break;
    72aa:	0d c0       	rjmp	.+26     	; 0x72c6 <ProcessMixer+0x58c>
    72ac:	fa 01       	movw	r30, r20
    72ae:	e1 56       	subi	r30, 0x61	; 97
    72b0:	ff 4f       	sbci	r31, 0xFF	; 255
				case SCALE:
					P2_solution = P2_solution - scale32(PID_ACCs[P2][ROLL], Config.Channel[i].P2_aileron_volume * 5);
    72b2:	60 81       	ld	r22, Z
    72b4:	55 e0       	ldi	r21, 0x05	; 5
    72b6:	65 02       	muls	r22, r21
    72b8:	b0 01       	movw	r22, r0
    72ba:	11 24       	eor	r1, r1
    72bc:	c5 01       	movw	r24, r10
    72be:	0e 94 7a 36 	call	0x6cf4	; 0x6cf4 <scale32>
    72c2:	e8 1a       	sub	r14, r24
    72c4:	f9 0a       	sbc	r15, r25
    72c6:	f3 01       	movw	r30, r6
    72c8:	e3 55       	subi	r30, 0x53	; 83
    72ca:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				default:
					break;
			}

			switch (Config.Channel[i].P2_Pitch_acc)
    72cc:	80 81       	ld	r24, Z
    72ce:	82 30       	cpi	r24, 0x02	; 2
    72d0:	d9 f0       	breq	.+54     	; 0x7308 <ProcessMixer+0x5ce>
    72d2:	2c f4       	brge	.+10     	; 0x72de <ProcessMixer+0x5a4>
    72d4:	81 30       	cpi	r24, 0x01	; 1
    72d6:	29 f5       	brne	.+74     	; 0x7322 <ProcessMixer+0x5e8>
			{
				case OFF:
					break;
				case ON:
					P2_solution = P2_solution - PID_ACCs[P2][PITCH];
    72d8:	e8 18       	sub	r14, r8
    72da:	f9 08       	sbc	r15, r9
					break;
    72dc:	22 c0       	rjmp	.+68     	; 0x7322 <ProcessMixer+0x5e8>
					break;
				default:
					break;
			}

			switch (Config.Channel[i].P2_Pitch_acc)
    72de:	83 30       	cpi	r24, 0x03	; 3
    72e0:	81 f0       	breq	.+32     	; 0x7302 <ProcessMixer+0x5c8>
    72e2:	84 30       	cpi	r24, 0x04	; 4
    72e4:	f1 f4       	brne	.+60     	; 0x7322 <ProcessMixer+0x5e8>
    72e6:	f3 01       	movw	r30, r6
    72e8:	ef 55       	subi	r30, 0x5F	; 95
    72ea:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				case SCALE:
					P2_solution = P2_solution - scale32(PID_ACCs[P2][PITCH], Config.Channel[i].P2_elevator_volume * 5);
					break;
				case REVERSESCALE:
					P2_solution = P2_solution + scale32(PID_ACCs[P2][PITCH], Config.Channel[i].P2_elevator_volume * 5);
    72ec:	60 81       	ld	r22, Z
    72ee:	a5 e0       	ldi	r26, 0x05	; 5
    72f0:	6a 02       	muls	r22, r26
    72f2:	b0 01       	movw	r22, r0
    72f4:	11 24       	eor	r1, r1
    72f6:	c4 01       	movw	r24, r8
    72f8:	0e 94 7a 36 	call	0x6cf4	; 0x6cf4 <scale32>
    72fc:	e8 0e       	add	r14, r24
    72fe:	f9 1e       	adc	r15, r25
					break;
    7300:	10 c0       	rjmp	.+32     	; 0x7322 <ProcessMixer+0x5e8>
					break;
				case ON:
					P2_solution = P2_solution - PID_ACCs[P2][PITCH];
					break;
				case REVERSE:
					P2_solution = P2_solution + PID_ACCs[P2][PITCH];
    7302:	e8 0c       	add	r14, r8
    7304:	f9 1c       	adc	r15, r9
					break;
    7306:	0d c0       	rjmp	.+26     	; 0x7322 <ProcessMixer+0x5e8>
    7308:	f3 01       	movw	r30, r6
    730a:	ef 55       	subi	r30, 0x5F	; 95
    730c:	ff 4f       	sbci	r31, 0xFF	; 255
				case SCALE:
					P2_solution = P2_solution - scale32(PID_ACCs[P2][PITCH], Config.Channel[i].P2_elevator_volume * 5);
    730e:	60 81       	ld	r22, Z
    7310:	95 e0       	ldi	r25, 0x05	; 5
    7312:	69 02       	muls	r22, r25
    7314:	b0 01       	movw	r22, r0
    7316:	11 24       	eor	r1, r1
    7318:	c4 01       	movw	r24, r8
    731a:	0e 94 7a 36 	call	0x6cf4	; 0x6cf4 <scale32>
    731e:	e8 1a       	sub	r14, r24
    7320:	f9 0a       	sbc	r15, r25
    7322:	f3 01       	movw	r30, r6
    7324:	e1 55       	subi	r30, 0x51	; 81
    7326:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				default:
					break;
			}

			switch (Config.Channel[i].P2_Z_delta_acc)
    7328:	80 81       	ld	r24, Z
    732a:	82 30       	cpi	r24, 0x02	; 2
    732c:	01 f1       	breq	.+64     	; 0x736e <ProcessMixer+0x634>
    732e:	3c f4       	brge	.+14     	; 0x733e <ProcessMixer+0x604>
    7330:	81 30       	cpi	r24, 0x01	; 1
    7332:	59 f5       	brne	.+86     	; 0x738a <ProcessMixer+0x650>
			{
				case OFF:
					break;
				case ON:
					P2_solution = P2_solution - PID_ACCs[P2][YAW];
    7334:	2d a5       	ldd	r18, Y+45	; 0x2d
    7336:	3e a5       	ldd	r19, Y+46	; 0x2e
    7338:	e2 1a       	sub	r14, r18
    733a:	f3 0a       	sbc	r15, r19
					break;
    733c:	26 c0       	rjmp	.+76     	; 0x738a <ProcessMixer+0x650>
					break;
				default:
					break;
			}

			switch (Config.Channel[i].P2_Z_delta_acc)
    733e:	83 30       	cpi	r24, 0x03	; 3
    7340:	89 f0       	breq	.+34     	; 0x7364 <ProcessMixer+0x62a>
    7342:	84 30       	cpi	r24, 0x04	; 4
    7344:	11 f5       	brne	.+68     	; 0x738a <ProcessMixer+0x650>
    7346:	f3 01       	movw	r30, r6
    7348:	e4 56       	subi	r30, 0x64	; 100
    734a:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				case SCALE:
					P2_solution = P2_solution - scale32(PID_ACCs[P2][YAW], Config.Channel[i].P2_throttle_volume * 5);
					break;
				case REVERSESCALE:
					P2_solution = P2_solution + scale32(PID_ACCs[P2][YAW], Config.Channel[i].P2_throttle_volume * 5);
    734c:	60 81       	ld	r22, Z
    734e:	85 e0       	ldi	r24, 0x05	; 5
    7350:	68 02       	muls	r22, r24
    7352:	b0 01       	movw	r22, r0
    7354:	11 24       	eor	r1, r1
    7356:	8d a5       	ldd	r24, Y+45	; 0x2d
    7358:	9e a5       	ldd	r25, Y+46	; 0x2e
    735a:	0e 94 7a 36 	call	0x6cf4	; 0x6cf4 <scale32>
    735e:	e8 0e       	add	r14, r24
    7360:	f9 1e       	adc	r15, r25
					break;
    7362:	13 c0       	rjmp	.+38     	; 0x738a <ProcessMixer+0x650>
					break;
				case ON:
					P2_solution = P2_solution - PID_ACCs[P2][YAW];
					break;
				case REVERSE:
					P2_solution = P2_solution + PID_ACCs[P2][YAW];
    7364:	4d a5       	ldd	r20, Y+45	; 0x2d
    7366:	5e a5       	ldd	r21, Y+46	; 0x2e
    7368:	e4 0e       	add	r14, r20
    736a:	f5 1e       	adc	r15, r21
					break;
    736c:	0e c0       	rjmp	.+28     	; 0x738a <ProcessMixer+0x650>
    736e:	f3 01       	movw	r30, r6
    7370:	e4 56       	subi	r30, 0x64	; 100
    7372:	ff 4f       	sbci	r31, 0xFF	; 255
				case SCALE:
					P2_solution = P2_solution - scale32(PID_ACCs[P2][YAW], Config.Channel[i].P2_throttle_volume * 5);
    7374:	60 81       	ld	r22, Z
    7376:	55 e0       	ldi	r21, 0x05	; 5
    7378:	65 02       	muls	r22, r21
    737a:	b0 01       	movw	r22, r0
    737c:	11 24       	eor	r1, r1
    737e:	8d a5       	ldd	r24, Y+45	; 0x2d
    7380:	9e a5       	ldd	r25, Y+46	; 0x2e
    7382:	0e 94 7a 36 	call	0x6cf4	; 0x6cf4 <scale32>
    7386:	e8 1a       	sub	r14, r24
    7388:	f9 0a       	sbc	r15, r25
		//************************************************************
		// Process mixers
		//************************************************************ 

		// Mix in other outputs here (P1)
		if (Transition_state < TRANS_P2)
    738a:	2d 8d       	ldd	r18, Y+29	; 0x1d
    738c:	29 30       	cpi	r18, 0x09	; 9
    738e:	08 f0       	brcs	.+2      	; 0x7392 <ProcessMixer+0x658>
    7390:	8d c0       	rjmp	.+282    	; 0x74ac <ProcessMixer+0x772>
    7392:	a6 01       	movw	r20, r12
    7394:	4f 54       	subi	r20, 0x4F	; 79
    7396:	5a 4f       	sbci	r21, 0xFA	; 250
    7398:	3a 01       	movw	r6, r20
    739a:	fa 01       	movw	r30, r20
    739c:	e2 56       	subi	r30, 0x62	; 98
    739e:	ff 4f       	sbci	r31, 0xFF	; 255
		{
			// Mix in dedicated RC sources - aileron, elevator and rudder
			if (Config.Channel[i].P1_aileron_volume !=0) 					// Mix in dedicated aileron
    73a0:	60 81       	ld	r22, Z
    73a2:	66 23       	and	r22, r22
    73a4:	59 f0       	breq	.+22     	; 0x73bc <ProcessMixer+0x682>
			{
				temp2 = scale32(RCinputs[AILERON], Config.Channel[i].P1_aileron_volume);
    73a6:	80 91 2d 08 	lds	r24, 0x082D
    73aa:	90 91 2e 08 	lds	r25, 0x082E
    73ae:	77 27       	eor	r23, r23
    73b0:	67 fd       	sbrc	r22, 7
    73b2:	70 95       	com	r23
    73b4:	0e 94 7a 36 	call	0x6cf4	; 0x6cf4 <scale32>
				P1_solution = P1_solution + temp2;
    73b8:	08 0f       	add	r16, r24
    73ba:	19 1f       	adc	r17, r25
    73bc:	f3 01       	movw	r30, r6
    73be:	e0 56       	subi	r30, 0x60	; 96
    73c0:	ff 4f       	sbci	r31, 0xFF	; 255
			}
			if (Config.Channel[i].P1_elevator_volume !=0) 					// Mix in dedicated elevator
    73c2:	60 81       	ld	r22, Z
    73c4:	66 23       	and	r22, r22
    73c6:	59 f0       	breq	.+22     	; 0x73de <ProcessMixer+0x6a4>
			{
				temp2 = scale32(RCinputs[ELEVATOR], Config.Channel[i].P1_elevator_volume);
    73c8:	80 91 2f 08 	lds	r24, 0x082F
    73cc:	90 91 30 08 	lds	r25, 0x0830
    73d0:	77 27       	eor	r23, r23
    73d2:	67 fd       	sbrc	r22, 7
    73d4:	70 95       	com	r23
    73d6:	0e 94 7a 36 	call	0x6cf4	; 0x6cf4 <scale32>
				P1_solution = P1_solution + temp2;
    73da:	08 0f       	add	r16, r24
    73dc:	19 1f       	adc	r17, r25
    73de:	f3 01       	movw	r30, r6
    73e0:	ee 55       	subi	r30, 0x5E	; 94
    73e2:	ff 4f       	sbci	r31, 0xFF	; 255
			}
			if (Config.Channel[i].P1_rudder_volume !=0) 					// Mix in dedicated rudder
    73e4:	60 81       	ld	r22, Z
    73e6:	66 23       	and	r22, r22
    73e8:	59 f0       	breq	.+22     	; 0x7400 <ProcessMixer+0x6c6>
			{
				temp2 = scale32(RCinputs[RUDDER], Config.Channel[i].P1_rudder_volume);
    73ea:	80 91 31 08 	lds	r24, 0x0831
    73ee:	90 91 32 08 	lds	r25, 0x0832
    73f2:	77 27       	eor	r23, r23
    73f4:	67 fd       	sbrc	r22, 7
    73f6:	70 95       	com	r23
    73f8:	0e 94 7a 36 	call	0x6cf4	; 0x6cf4 <scale32>
				P1_solution = P1_solution + temp2;
    73fc:	08 0f       	add	r16, r24
    73fe:	19 1f       	adc	r17, r25
    7400:	f3 01       	movw	r30, r6
    7402:	ef 54       	subi	r30, 0x4F	; 79
    7404:	ff 4f       	sbci	r31, 0xFF	; 255
			}

			// Other sources
			if ((Config.Channel[i].P1_source_a_volume !=0) && (Config.Channel[i].P1_source_a != NOMIX)) // Mix in first extra source
    7406:	60 81       	ld	r22, Z
    7408:	66 23       	and	r22, r22
    740a:	19 f1       	breq	.+70     	; 0x7452 <ProcessMixer+0x718>
    740c:	31 97       	sbiw	r30, 0x01	; 1
    740e:	80 81       	ld	r24, Z
    7410:	8f 30       	cpi	r24, 0x0F	; 15
    7412:	f9 f0       	breq	.+62     	; 0x7452 <ProcessMixer+0x718>
    7414:	e8 2f       	mov	r30, r24
    7416:	ff 27       	eor	r31, r31
    7418:	e7 fd       	sbrc	r30, 7
    741a:	f0 95       	com	r31
			{
				// Is the source a sensor?
				if (Config.Channel[i].P1_source_a > (MAX_RC_CHANNELS - 1))
    741c:	88 30       	cpi	r24, 0x08	; 8
    741e:	64 f0       	brlt	.+24     	; 0x7438 <ProcessMixer+0x6fe>
				{
					temp2 = SensorDataP1[Config.Channel[i].P1_source_a - EXT_SOURCE];
    7420:	38 97       	sbiw	r30, 0x08	; 8
    7422:	ee 0f       	add	r30, r30
    7424:	ff 1f       	adc	r31, r31
    7426:	81 e0       	ldi	r24, 0x01	; 1
    7428:	90 e0       	ldi	r25, 0x00	; 0
    742a:	8c 0f       	add	r24, r28
    742c:	9d 1f       	adc	r25, r29
    742e:	e8 0f       	add	r30, r24
    7430:	f9 1f       	adc	r31, r25
    7432:	86 85       	ldd	r24, Z+14	; 0x0e
    7434:	97 85       	ldd	r25, Z+15	; 0x0f
    7436:	06 c0       	rjmp	.+12     	; 0x7444 <ProcessMixer+0x70a>
				}
				// Is the source an RC input?
				else
				{
					// Yes, calculate RC channel number from source number and return RC value
					temp2 = RCinputs[Config.Channel[i].P1_source_a];
    7438:	ee 0f       	add	r30, r30
    743a:	ff 1f       	adc	r31, r31
    743c:	e5 5d       	subi	r30, 0xD5	; 213
    743e:	f7 4f       	sbci	r31, 0xF7	; 247
    7440:	80 81       	ld	r24, Z
    7442:	91 81       	ldd	r25, Z+1	; 0x01
				}

				temp2 = scale32(temp2, Config.Channel[i].P1_source_a_volume);
    7444:	77 27       	eor	r23, r23
    7446:	67 fd       	sbrc	r22, 7
    7448:	70 95       	com	r23
    744a:	0e 94 7a 36 	call	0x6cf4	; 0x6cf4 <scale32>
				P1_solution = P1_solution + temp2;
    744e:	08 0f       	add	r16, r24
    7450:	19 1f       	adc	r17, r25
    7452:	f3 01       	movw	r30, r6
    7454:	eb 54       	subi	r30, 0x4B	; 75
    7456:	ff 4f       	sbci	r31, 0xFF	; 255
			}
			if ((Config.Channel[i].P1_source_b_volume !=0) && (Config.Channel[i].P1_source_b != NOMIX)) // Mix in second extra source
    7458:	60 81       	ld	r22, Z
    745a:	66 23       	and	r22, r22
    745c:	19 f1       	breq	.+70     	; 0x74a4 <ProcessMixer+0x76a>
    745e:	31 97       	sbiw	r30, 0x01	; 1
    7460:	80 81       	ld	r24, Z
    7462:	8f 30       	cpi	r24, 0x0F	; 15
    7464:	f9 f0       	breq	.+62     	; 0x74a4 <ProcessMixer+0x76a>
    7466:	e8 2f       	mov	r30, r24
    7468:	ff 27       	eor	r31, r31
    746a:	e7 fd       	sbrc	r30, 7
    746c:	f0 95       	com	r31
			{
				// Is the source a sensor?
				if (Config.Channel[i].P1_source_b > (MAX_RC_CHANNELS - 1))
    746e:	88 30       	cpi	r24, 0x08	; 8
    7470:	64 f0       	brlt	.+24     	; 0x748a <ProcessMixer+0x750>
				{
					temp2 = SensorDataP1[Config.Channel[i].P1_source_b - EXT_SOURCE];
    7472:	38 97       	sbiw	r30, 0x08	; 8
    7474:	ee 0f       	add	r30, r30
    7476:	ff 1f       	adc	r31, r31
    7478:	a1 e0       	ldi	r26, 0x01	; 1
    747a:	b0 e0       	ldi	r27, 0x00	; 0
    747c:	ac 0f       	add	r26, r28
    747e:	bd 1f       	adc	r27, r29
    7480:	ea 0f       	add	r30, r26
    7482:	fb 1f       	adc	r31, r27
    7484:	86 85       	ldd	r24, Z+14	; 0x0e
    7486:	97 85       	ldd	r25, Z+15	; 0x0f
    7488:	06 c0       	rjmp	.+12     	; 0x7496 <ProcessMixer+0x75c>
				}
				// Is the source an RC input?
				else
				{
					temp2 = RCinputs[Config.Channel[i].P1_source_b];
    748a:	ee 0f       	add	r30, r30
    748c:	ff 1f       	adc	r31, r31
    748e:	e5 5d       	subi	r30, 0xD5	; 213
    7490:	f7 4f       	sbci	r31, 0xF7	; 247
    7492:	80 81       	ld	r24, Z
    7494:	91 81       	ldd	r25, Z+1	; 0x01
				}

				temp2 = scale32(temp2, Config.Channel[i].P1_source_b_volume);
    7496:	77 27       	eor	r23, r23
    7498:	67 fd       	sbrc	r22, 7
    749a:	70 95       	com	r23
    749c:	0e 94 7a 36 	call	0x6cf4	; 0x6cf4 <scale32>
				P1_solution = P1_solution + temp2;
    74a0:	08 0f       	add	r16, r24
    74a2:	19 1f       	adc	r17, r25
			}
		}

		// Mix in other outputs here (P2)
		if (Transition_state > TRANS_P1)	
    74a4:	2d 8d       	ldd	r18, Y+29	; 0x1d
    74a6:	22 23       	and	r18, r18
    74a8:	09 f4       	brne	.+2      	; 0x74ac <ProcessMixer+0x772>
    74aa:	85 c0       	rjmp	.+266    	; 0x75b6 <ProcessMixer+0x87c>
    74ac:	a6 01       	movw	r20, r12
    74ae:	4f 54       	subi	r20, 0x4F	; 79
    74b0:	5a 4f       	sbci	r21, 0xFA	; 250
    74b2:	3a 01       	movw	r6, r20
    74b4:	fa 01       	movw	r30, r20
    74b6:	e1 56       	subi	r30, 0x61	; 97
    74b8:	ff 4f       	sbci	r31, 0xFF	; 255
		{
			// Mix in dedicated RC sources - aileron, elevator and rudder
			if (Config.Channel[i].P2_aileron_volume !=0) 					// Mix in dedicated aileron
    74ba:	60 81       	ld	r22, Z
    74bc:	66 23       	and	r22, r22
    74be:	59 f0       	breq	.+22     	; 0x74d6 <ProcessMixer+0x79c>
			{
				temp2 = scale32(RCinputs[AILERON], Config.Channel[i].P2_aileron_volume);
    74c0:	80 91 2d 08 	lds	r24, 0x082D
    74c4:	90 91 2e 08 	lds	r25, 0x082E
    74c8:	77 27       	eor	r23, r23
    74ca:	67 fd       	sbrc	r22, 7
    74cc:	70 95       	com	r23
    74ce:	0e 94 7a 36 	call	0x6cf4	; 0x6cf4 <scale32>
				P2_solution = P2_solution + temp2;
    74d2:	e8 0e       	add	r14, r24
    74d4:	f9 1e       	adc	r15, r25
    74d6:	f3 01       	movw	r30, r6
    74d8:	ef 55       	subi	r30, 0x5F	; 95
    74da:	ff 4f       	sbci	r31, 0xFF	; 255
			}
			if (Config.Channel[i].P2_elevator_volume !=0) 					// Mix in dedicated elevator
    74dc:	60 81       	ld	r22, Z
    74de:	66 23       	and	r22, r22
    74e0:	59 f0       	breq	.+22     	; 0x74f8 <ProcessMixer+0x7be>
			{
				temp2 = scale32(RCinputs[ELEVATOR], Config.Channel[i].P2_elevator_volume);
    74e2:	80 91 2f 08 	lds	r24, 0x082F
    74e6:	90 91 30 08 	lds	r25, 0x0830
    74ea:	77 27       	eor	r23, r23
    74ec:	67 fd       	sbrc	r22, 7
    74ee:	70 95       	com	r23
    74f0:	0e 94 7a 36 	call	0x6cf4	; 0x6cf4 <scale32>
				P2_solution = P2_solution + temp2;
    74f4:	e8 0e       	add	r14, r24
    74f6:	f9 1e       	adc	r15, r25
    74f8:	f3 01       	movw	r30, r6
    74fa:	ed 55       	subi	r30, 0x5D	; 93
    74fc:	ff 4f       	sbci	r31, 0xFF	; 255
			}
			if (Config.Channel[i].P2_rudder_volume !=0) 					// Mix in dedicated rudder
    74fe:	60 81       	ld	r22, Z
    7500:	66 23       	and	r22, r22
    7502:	59 f0       	breq	.+22     	; 0x751a <ProcessMixer+0x7e0>
			{
				temp2 = scale32(RCinputs[RUDDER], Config.Channel[i].P2_rudder_volume);
    7504:	80 91 31 08 	lds	r24, 0x0831
    7508:	90 91 32 08 	lds	r25, 0x0832
    750c:	77 27       	eor	r23, r23
    750e:	67 fd       	sbrc	r22, 7
    7510:	70 95       	com	r23
    7512:	0e 94 7a 36 	call	0x6cf4	; 0x6cf4 <scale32>
				P2_solution = P2_solution + temp2;
    7516:	e8 0e       	add	r14, r24
    7518:	f9 1e       	adc	r15, r25
    751a:	f3 01       	movw	r30, r6
    751c:	ed 54       	subi	r30, 0x4D	; 77
    751e:	ff 4f       	sbci	r31, 0xFF	; 255
			}

			// Other sources
			if ((Config.Channel[i].P2_source_a_volume !=0) && (Config.Channel[i].P2_source_a != NOMIX)) // Mix in first extra source
    7520:	60 81       	ld	r22, Z
    7522:	66 23       	and	r22, r22
    7524:	09 f1       	breq	.+66     	; 0x7568 <ProcessMixer+0x82e>
    7526:	31 97       	sbiw	r30, 0x01	; 1
    7528:	80 81       	ld	r24, Z
    752a:	8f 30       	cpi	r24, 0x0F	; 15
    752c:	e9 f0       	breq	.+58     	; 0x7568 <ProcessMixer+0x82e>
    752e:	e8 2f       	mov	r30, r24
    7530:	ff 27       	eor	r31, r31
    7532:	e7 fd       	sbrc	r30, 7
    7534:	f0 95       	com	r31
			{
				// Is the source a sensor?
				if (Config.Channel[i].P2_source_a > (MAX_RC_CHANNELS - 1))
    7536:	88 30       	cpi	r24, 0x08	; 8
    7538:	54 f0       	brlt	.+20     	; 0x754e <ProcessMixer+0x814>
				{
					temp2 = SensorDataP2[Config.Channel[i].P2_source_a - EXT_SOURCE];
    753a:	38 97       	sbiw	r30, 0x08	; 8
    753c:	ee 0f       	add	r30, r30
    753e:	ff 1f       	adc	r31, r31
    7540:	81 e0       	ldi	r24, 0x01	; 1
    7542:	90 e0       	ldi	r25, 0x00	; 0
    7544:	8c 0f       	add	r24, r28
    7546:	9d 1f       	adc	r25, r29
    7548:	e8 0f       	add	r30, r24
    754a:	f9 1f       	adc	r31, r25
    754c:	04 c0       	rjmp	.+8      	; 0x7556 <ProcessMixer+0x81c>
				}
				// Is the source an RC input?
				else 
				{
					temp2 = RCinputs[Config.Channel[i].P2_source_a];
    754e:	ee 0f       	add	r30, r30
    7550:	ff 1f       	adc	r31, r31
    7552:	e5 5d       	subi	r30, 0xD5	; 213
    7554:	f7 4f       	sbci	r31, 0xF7	; 247
    7556:	80 81       	ld	r24, Z
    7558:	91 81       	ldd	r25, Z+1	; 0x01
				}

				temp2 = scale32(temp2, Config.Channel[i].P2_source_a_volume);
    755a:	77 27       	eor	r23, r23
    755c:	67 fd       	sbrc	r22, 7
    755e:	70 95       	com	r23
    7560:	0e 94 7a 36 	call	0x6cf4	; 0x6cf4 <scale32>
				P2_solution = P2_solution + temp2;
    7564:	e8 0e       	add	r14, r24
    7566:	f9 1e       	adc	r15, r25
    7568:	f3 01       	movw	r30, r6
    756a:	e9 54       	subi	r30, 0x49	; 73
    756c:	ff 4f       	sbci	r31, 0xFF	; 255
			}
			if ((Config.Channel[i].P2_source_b_volume !=0) && (Config.Channel[i].P2_source_b != NOMIX)) // Mix in second extra source
    756e:	60 81       	ld	r22, Z
    7570:	66 23       	and	r22, r22
    7572:	09 f1       	breq	.+66     	; 0x75b6 <ProcessMixer+0x87c>
    7574:	31 97       	sbiw	r30, 0x01	; 1
    7576:	80 81       	ld	r24, Z
    7578:	8f 30       	cpi	r24, 0x0F	; 15
    757a:	e9 f0       	breq	.+58     	; 0x75b6 <ProcessMixer+0x87c>
    757c:	e8 2f       	mov	r30, r24
    757e:	ff 27       	eor	r31, r31
    7580:	e7 fd       	sbrc	r30, 7
    7582:	f0 95       	com	r31
			{
				// Is the source a sensor?
				if (Config.Channel[i].P2_source_b > (MAX_RC_CHANNELS - 1))
    7584:	88 30       	cpi	r24, 0x08	; 8
    7586:	54 f0       	brlt	.+20     	; 0x759c <ProcessMixer+0x862>
				{
					temp2 = SensorDataP2[Config.Channel[i].P2_source_b - EXT_SOURCE];
    7588:	38 97       	sbiw	r30, 0x08	; 8
    758a:	ee 0f       	add	r30, r30
    758c:	ff 1f       	adc	r31, r31
    758e:	a1 e0       	ldi	r26, 0x01	; 1
    7590:	b0 e0       	ldi	r27, 0x00	; 0
    7592:	ac 0f       	add	r26, r28
    7594:	bd 1f       	adc	r27, r29
    7596:	ea 0f       	add	r30, r26
    7598:	fb 1f       	adc	r31, r27
    759a:	04 c0       	rjmp	.+8      	; 0x75a4 <ProcessMixer+0x86a>
				}
				// Is the source an RC input?
				else
				{
					temp2 = RCinputs[Config.Channel[i].P2_source_b];
    759c:	ee 0f       	add	r30, r30
    759e:	ff 1f       	adc	r31, r31
    75a0:	e5 5d       	subi	r30, 0xD5	; 213
    75a2:	f7 4f       	sbci	r31, 0xF7	; 247
    75a4:	80 81       	ld	r24, Z
    75a6:	91 81       	ldd	r25, Z+1	; 0x01
				}

				temp2 = scale32(temp2, Config.Channel[i].P2_source_b_volume);
    75a8:	77 27       	eor	r23, r23
    75aa:	67 fd       	sbrc	r22, 7
    75ac:	70 95       	com	r23
    75ae:	0e 94 7a 36 	call	0x6cf4	; 0x6cf4 <scale32>
				P2_solution = P2_solution + temp2;
    75b2:	e8 0e       	add	r14, r24
    75b4:	f9 1e       	adc	r15, r25
    75b6:	c6 01       	movw	r24, r12
    75b8:	8f 54       	subi	r24, 0x4F	; 79
    75ba:	9a 4f       	sbci	r25, 0xFA	; 250
    75bc:	fc 01       	movw	r30, r24
    75be:	ee 56       	subi	r30, 0x6E	; 110
    75c0:	ff 4f       	sbci	r31, 0xFF	; 255
			}
		}
			
		// Save solution for this channel. Note that this contains cross-mixed data from the *last* cycle
		Config.Channel[i].P1_value = P1_solution;
    75c2:	11 83       	std	Z+1, r17	; 0x01
    75c4:	00 83       	st	Z, r16
    75c6:	32 96       	adiw	r30, 0x02	; 2
		Config.Channel[i].P2_value = P2_solution;
    75c8:	f1 82       	std	Z+1, r15	; 0x01
    75ca:	e0 82       	st	Z, r14
    75cc:	b6 e2       	ldi	r27, 0x26	; 38
    75ce:	cb 0e       	add	r12, r27
    75d0:	d1 1c       	adc	r13, r1

	//************************************************************
	// Main mix loop - sensors, RC inputs and other channels
	//************************************************************

	for (i = 0; i < MIX_OUTPUTS; i++)
    75d2:	e0 e3       	ldi	r30, 0x30	; 48
    75d4:	ce 16       	cp	r12, r30
    75d6:	e1 e0       	ldi	r30, 0x01	; 1
    75d8:	de 06       	cpc	r13, r30
    75da:	09 f0       	breq	.+2      	; 0x75de <ProcessMixer+0x8a4>
    75dc:	56 cc       	rjmp	.-1876   	; 0x6e8a <ProcessMixer+0x150>
	//************************************************************
	// Mixer transition code
	//************************************************************ 

	// Convert number to percentage (0 to 100%)
	if (Config.TransitionSpeed != 0) 
    75de:	80 91 e1 05 	lds	r24, 0x05E1
    75e2:	88 23       	and	r24, r24
    75e4:	41 f0       	breq	.+16     	; 0x75f6 <ProcessMixer+0x8bc>
	{
		// transition_counter counts from 0 to 100 (101 steps)
		transition = transition_counter;
    75e6:	80 91 24 05 	lds	r24, 0x0524
    75ea:	90 91 25 05 	lds	r25, 0x0525
    75ee:	90 93 22 05 	sts	0x0522, r25
    75f2:	80 93 21 05 	sts	0x0521, r24

	// Recalculate P1 values based on transition stage
	for (i = 0; i < MIX_OUTPUTS; i++)
	{
		// Speed up the easy ones :)
		if (transition == 0)
    75f6:	00 91 21 05 	lds	r16, 0x0521
    75fa:	10 91 22 05 	lds	r17, 0x0522
		}
		else
		{
			// Get source channel value
			temp1 = Config.Channel[i].P1_value;
			temp1 = scale32(temp1, (100 - transition));
    75fe:	b4 e6       	ldi	r27, 0x64	; 100
    7600:	cb 2e       	mov	r12, r27
    7602:	d1 2c       	mov	r13, r1
    7604:	c0 1a       	sub	r12, r16
    7606:	d1 0a       	sbc	r13, r17
    7608:	83 e4       	ldi	r24, 0x43	; 67
    760a:	e8 2e       	mov	r14, r24
    760c:	86 e0       	ldi	r24, 0x06	; 6
    760e:	f8 2e       	mov	r15, r24

	// Recalculate P1 values based on transition stage
	for (i = 0; i < MIX_OUTPUTS; i++)
	{
		// Speed up the easy ones :)
		if (transition == 0)
    7610:	01 15       	cp	r16, r1
    7612:	11 05       	cpc	r17, r1
    7614:	21 f4       	brne	.+8      	; 0x761e <ProcessMixer+0x8e4>
		{
			temp1 = Config.Channel[i].P1_value;
    7616:	d7 01       	movw	r26, r14
    7618:	8d 91       	ld	r24, X+
    761a:	9c 91       	ld	r25, X
    761c:	16 c0       	rjmp	.+44     	; 0x764a <ProcessMixer+0x910>
		}
		else if (transition >= 100)
    761e:	04 36       	cpi	r16, 0x64	; 100
    7620:	11 05       	cpc	r17, r1
    7622:	24 f0       	brlt	.+8      	; 0x762c <ProcessMixer+0x8f2>
		{
			temp1 = Config.Channel[i].P2_value;
    7624:	f7 01       	movw	r30, r14
    7626:	82 81       	ldd	r24, Z+2	; 0x02
    7628:	93 81       	ldd	r25, Z+3	; 0x03
    762a:	0f c0       	rjmp	.+30     	; 0x764a <ProcessMixer+0x910>
		}
		else
		{
			// Get source channel value
			temp1 = Config.Channel[i].P1_value;
			temp1 = scale32(temp1, (100 - transition));
    762c:	b6 01       	movw	r22, r12
    762e:	d7 01       	movw	r26, r14
    7630:	8d 91       	ld	r24, X+
    7632:	9c 91       	ld	r25, X
    7634:	0e 94 7a 36 	call	0x6cf4	; 0x6cf4 <scale32>
    7638:	5c 01       	movw	r10, r24

			// Get destination channel value
			temp2 = Config.Channel[i].P2_value;
			temp2 = scale32(temp2, transition);
    763a:	b8 01       	movw	r22, r16
    763c:	f7 01       	movw	r30, r14
    763e:	82 81       	ldd	r24, Z+2	; 0x02
    7640:	93 81       	ldd	r25, Z+3	; 0x03
    7642:	0e 94 7a 36 	call	0x6cf4	; 0x6cf4 <scale32>

			// Sum the mixers
			temp1 = temp1 + temp2;
    7646:	8a 0d       	add	r24, r10
    7648:	9b 1d       	adc	r25, r11
		}
		// Save transitioned solution into P1
		Config.Channel[i].P1_value = temp1;
    764a:	d7 01       	movw	r26, r14
    764c:	8d 93       	st	X+, r24
    764e:	9c 93       	st	X, r25
    7650:	b6 e2       	ldi	r27, 0x26	; 38
    7652:	eb 0e       	add	r14, r27
    7654:	f1 1c       	adc	r15, r1
		// transition_counter counts from 0 to 100 (101 steps)
		transition = transition_counter;
	}

	// Recalculate P1 values based on transition stage
	for (i = 0; i < MIX_OUTPUTS; i++)
    7656:	e3 e7       	ldi	r30, 0x73	; 115
    7658:	ee 16       	cp	r14, r30
    765a:	e7 e0       	ldi	r30, 0x07	; 7
    765c:	fe 06       	cpc	r15, r30
    765e:	c1 f6       	brne	.-80     	; 0x7610 <ProcessMixer+0x8d6>
    7660:	6d e4       	ldi	r22, 0x4D	; 77
    7662:	c6 2e       	mov	r12, r22
    7664:	66 e0       	ldi	r22, 0x06	; 6
    7666:	d6 2e       	mov	r13, r22
    7668:	7e e4       	ldi	r23, 0x4E	; 78
    766a:	87 2e       	mov	r8, r23
    766c:	76 e0       	ldi	r23, 0x06	; 6
    766e:	97 2e       	mov	r9, r23
    7670:	e3 e4       	ldi	r30, 0x43	; 67
    7672:	ee 2e       	mov	r14, r30
    7674:	e6 e0       	ldi	r30, 0x06	; 6
    7676:	fe 2e       	mov	r15, r30
			if (Config.Channel[i].P1_throttle_volume != Config.Channel[i].P2_throttle_volume)
			{
				// Calculate step difference in 1/100ths and round
				temp1 = (Config.Channel[i].P2_throttle_volume - Config.Channel[i].P1_throttle_volume);
				temp1 = temp1 << 7; 						// Multiply by 128 so divide gives reasonable step values
				Step1 = temp1 / 100;	
    7678:	f4 e6       	ldi	r31, 0x64	; 100
    767a:	af 2e       	mov	r10, r31
    767c:	b1 2c       	mov	r11, r1
    767e:	80 2f       	mov	r24, r16
    7680:	99 27       	eor	r25, r25
    7682:	87 fd       	sbrc	r24, 7
    7684:	90 95       	com	r25
					}
					// If P2 greater than P1, SINE is the one we want
					else
					{
						// Multiply SQRTSIN[transition] steps (0 to 100)
						temp3 = (int8_t)pgm_read_byte(&SQRTSIN[(int8_t)transition]);
    7686:	9c 01       	movw	r18, r24
    7688:	27 57       	subi	r18, 0x77	; 119
    768a:	36 4e       	sbci	r19, 0xE6	; 230
    768c:	3e 8f       	std	Y+30, r19	; 0x1e
    768e:	2d 8f       	std	Y+29, r18	; 0x1d
					// Choose between SQRT SINE and SQRT COSINE
					// If P2 less than P1, COSINE (reverse SINE) is the one we want
					if (Step1 < 0)
					{ 
						// Multiply SQRTSIN[100 - transition] steps (0 to 100)
						temp3 = 100 - (int8_t)pgm_read_byte(&SQRTSIN[100 - (int8_t)transition]);
    7690:	95 01       	movw	r18, r10
    7692:	28 1b       	sub	r18, r24
    7694:	39 0b       	sbc	r19, r25
    7696:	a9 01       	movw	r20, r18
    7698:	47 57       	subi	r20, 0x77	; 119
    769a:	56 4e       	sbci	r21, 0xE6	; 230
    769c:	58 a3       	std	Y+32, r21	; 0x20
    769e:	4f 8f       	std	Y+31, r20	; 0x1f
					}
					// If P2 greater than P1, SINE is the one we want
					else
					{
						// Multiply SIN[transition] steps (0 to 100)
						temp3 = (int8_t)pgm_read_byte(&SIN[(int8_t)transition]);
    76a0:	dc 01       	movw	r26, r24
    76a2:	a2 51       	subi	r26, 0x12	; 18
    76a4:	b6 4e       	sbci	r27, 0xE6	; 230
    76a6:	1d 01       	movw	r2, r26
					// Choose between SINE and COSINE
					// If P2 less than P1, COSINE (reverse SINE) is the one we want
					if (Step1 < 0)
					{ 
						// Multiply SIN[100 - transition] steps (0 to 100)
						temp3 = 100 - (int8_t)pgm_read_byte(&SIN[100 - (int8_t)transition]);
    76a8:	f9 01       	movw	r30, r18
    76aa:	e2 51       	subi	r30, 0x12	; 18
    76ac:	f6 4e       	sbci	r31, 0xE6	; 230
    76ae:	2f 01       	movw	r4, r30
		} // No throttle
		
		// No throttles, so clamp to THROTTLEMIN if flagged as a motor
		else if (Config.Channel[i].Motor_marker == MOTOR)
		{
			Config.Channel[i].P1_value = -THROTTLEOFFSET; // 3750-1250 = 2500 = 1.0ms
    76b0:	ae e1       	ldi	r26, 0x1E	; 30
    76b2:	6a 2e       	mov	r6, r26
    76b4:	ab ef       	ldi	r26, 0xFB	; 251
    76b6:	7a 2e       	mov	r7, r26
    76b8:	f6 01       	movw	r30, r12
    76ba:	31 97       	sbiw	r30, 0x01	; 1
	//************************************************************ 

	for (i = 0; i < MIX_OUTPUTS; i++)
	{
		// Ignore if both throttle volumes are 0% (no throttle)
		if 	(!((Config.Channel[i].P1_throttle_volume == 0) && 
    76bc:	90 81       	ld	r25, Z
    76be:	d6 01       	movw	r26, r12
    76c0:	8c 91       	ld	r24, X
    76c2:	91 11       	cpse	r25, r1
    76c4:	03 c0       	rjmp	.+6      	; 0x76cc <ProcessMixer+0x992>
    76c6:	88 23       	and	r24, r24
    76c8:	09 f4       	brne	.+2      	; 0x76cc <ProcessMixer+0x992>
    76ca:	61 c0       	rjmp	.+194    	; 0x778e <ProcessMixer+0xa54>
    76cc:	29 2f       	mov	r18, r25
    76ce:	33 27       	eor	r19, r19
    76d0:	27 fd       	sbrc	r18, 7
    76d2:	30 95       	com	r19
			(Config.Channel[i].P2_throttle_volume == 0)))
		{
			// Only process if there is a curve
			if (Config.Channel[i].P1_throttle_volume != Config.Channel[i].P2_throttle_volume)
    76d4:	98 17       	cp	r25, r24
    76d6:	09 f4       	brne	.+2      	; 0x76da <ProcessMixer+0x9a0>
    76d8:	48 c0       	rjmp	.+144    	; 0x776a <ProcessMixer+0xa30>
			{
				// Calculate step difference in 1/100ths and round
				temp1 = (Config.Channel[i].P2_throttle_volume - Config.Channel[i].P1_throttle_volume);
    76da:	99 27       	eor	r25, r25
    76dc:	87 fd       	sbrc	r24, 7
    76de:	90 95       	com	r25
    76e0:	82 1b       	sub	r24, r18
    76e2:	93 0b       	sbc	r25, r19
				temp1 = temp1 << 7; 						// Multiply by 128 so divide gives reasonable step values
    76e4:	96 95       	lsr	r25
    76e6:	98 2f       	mov	r25, r24
    76e8:	88 27       	eor	r24, r24
    76ea:	97 95       	ror	r25
    76ec:	87 95       	ror	r24
				Step1 = temp1 / 100;	
    76ee:	b5 01       	movw	r22, r10
    76f0:	0e 94 6c 47 	call	0x8ed8	; 0x8ed8 <__divmodhi4>

				// Set start (P1) point
				temp2 = Config.Channel[i].P1_throttle_volume; // Promote to 16 bits
				temp2 = temp2 << 7;
    76f4:	36 95       	lsr	r19
    76f6:	32 2f       	mov	r19, r18
    76f8:	22 27       	eor	r18, r18
    76fa:	37 95       	ror	r19
    76fc:	27 95       	ror	r18

				// Linear vs. Sinusoidal calculation
				if (Config.Channel[i].Throttle_curve == LINEAR)
    76fe:	f4 01       	movw	r30, r8
    7700:	80 81       	ld	r24, Z
    7702:	81 11       	cpse	r24, r1
    7704:	08 c0       	rjmp	.+16     	; 0x7716 <ProcessMixer+0x9dc>
				{
					// Multiply [transition] steps (0 to 100)
					temp3 = temp2 + (Step1 * transition);
    7706:	60 9f       	mul	r22, r16
    7708:	c0 01       	movw	r24, r0
    770a:	61 9f       	mul	r22, r17
    770c:	90 0d       	add	r25, r0
    770e:	70 9f       	mul	r23, r16
    7710:	90 0d       	add	r25, r0
    7712:	11 24       	eor	r1, r1
    7714:	20 c0       	rjmp	.+64     	; 0x7756 <ProcessMixer+0xa1c>
				}

				// SINE
				else if (Config.Channel[i].Throttle_curve == SINE)
    7716:	81 30       	cpi	r24, 0x01	; 1
    7718:	31 f4       	brne	.+12     	; 0x7726 <ProcessMixer+0x9ec>
				{
					// Choose between SINE and COSINE
					// If P2 less than P1, COSINE (reverse SINE) is the one we want
					if (Step1 < 0)
    771a:	77 ff       	sbrs	r23, 7
    771c:	02 c0       	rjmp	.+4      	; 0x7722 <ProcessMixer+0x9e8>
					{ 
						// Multiply SIN[100 - transition] steps (0 to 100)
						temp3 = 100 - (int8_t)pgm_read_byte(&SIN[100 - (int8_t)transition]);
    771e:	f2 01       	movw	r30, r4
    7720:	06 c0       	rjmp	.+12     	; 0x772e <ProcessMixer+0x9f4>
					}
					// If P2 greater than P1, SINE is the one we want
					else
					{
						// Multiply SIN[transition] steps (0 to 100)
						temp3 = (int8_t)pgm_read_byte(&SIN[(int8_t)transition]);
    7722:	f1 01       	movw	r30, r2
    7724:	0d c0       	rjmp	.+26     	; 0x7740 <ProcessMixer+0xa06>
				// SQRT SINE
				else
				{
					// Choose between SQRT SINE and SQRT COSINE
					// If P2 less than P1, COSINE (reverse SINE) is the one we want
					if (Step1 < 0)
    7726:	77 ff       	sbrs	r23, 7
    7728:	09 c0       	rjmp	.+18     	; 0x773c <ProcessMixer+0xa02>
					{ 
						// Multiply SQRTSIN[100 - transition] steps (0 to 100)
						temp3 = 100 - (int8_t)pgm_read_byte(&SQRTSIN[100 - (int8_t)transition]);
    772a:	ef 8d       	ldd	r30, Y+31	; 0x1f
    772c:	f8 a1       	ldd	r31, Y+32	; 0x20
    772e:	84 91       	lpm	r24, Z
    7730:	a5 01       	movw	r20, r10
    7732:	48 1b       	sub	r20, r24
    7734:	51 09       	sbc	r21, r1
    7736:	87 fd       	sbrc	r24, 7
    7738:	53 95       	inc	r21
    773a:	06 c0       	rjmp	.+12     	; 0x7748 <ProcessMixer+0xa0e>
					}
					// If P2 greater than P1, SINE is the one we want
					else
					{
						// Multiply SQRTSIN[transition] steps (0 to 100)
						temp3 = (int8_t)pgm_read_byte(&SQRTSIN[(int8_t)transition]);
    773c:	ed 8d       	ldd	r30, Y+29	; 0x1d
    773e:	fe 8d       	ldd	r31, Y+30	; 0x1e
    7740:	44 91       	lpm	r20, Z
    7742:	55 27       	eor	r21, r21
    7744:	47 fd       	sbrc	r20, 7
    7746:	50 95       	com	r21
					}

					// Get SINE% (temp2) of difference in volumes (Step1)
					// Step1 is already in 100ths of the difference * 128
					// temp1 is the start volume * 128
					temp3 = temp2 + (Step1 * temp3);
    7748:	64 9f       	mul	r22, r20
    774a:	c0 01       	movw	r24, r0
    774c:	65 9f       	mul	r22, r21
    774e:	90 0d       	add	r25, r0
    7750:	74 9f       	mul	r23, r20
    7752:	90 0d       	add	r25, r0
    7754:	11 24       	eor	r1, r1
    7756:	82 0f       	add	r24, r18
    7758:	93 1f       	adc	r25, r19
				}

				// Round, then rescale to normal value
				temp3 = temp3 + 64;
    775a:	bc 01       	movw	r22, r24
    775c:	60 5c       	subi	r22, 0xC0	; 192
    775e:	7f 4f       	sbci	r23, 0xFF	; 255
				temp3 = temp3 >> 7;
    7760:	66 0f       	add	r22, r22
    7762:	67 2f       	mov	r22, r23
    7764:	66 1f       	adc	r22, r22
    7766:	77 0b       	sbc	r23, r23
    7768:	01 c0       	rjmp	.+2      	; 0x776c <ProcessMixer+0xa32>
			
			// No curve
			else
			{
				// Just use the value of P1 volume as there is no curve
				temp3 = Config.Channel[i].P1_throttle_volume; // Promote to 16 bits
    776a:	b9 01       	movw	r22, r18
			}

			// Calculate actual throttle value to the curve
			temp3 = scale32(MonopolarThrottle, temp3);
    776c:	80 91 29 08 	lds	r24, 0x0829
    7770:	90 91 2a 08 	lds	r25, 0x082A
    7774:	0e 94 7a 36 	call	0x6cf4	; 0x6cf4 <scale32>

			// At this point, the throttle values are 0 to 2500 (+/-150%)
			// Re-scale throttle values back to neutral-centered system values (+/-1250) 
			// and set the minimum throttle point to 1.1ms.
			// A THROTTLEMIN value of 1000 will result in 2750, or 1.1ms
			temp3 = temp3 - THROTTLEMIN;
    7778:	88 5e       	subi	r24, 0xE8	; 232
    777a:	93 40       	sbci	r25, 0x03	; 3

			// Add offset to channel value
			Config.Channel[i].P1_value += temp3;
    777c:	d7 01       	movw	r26, r14
    777e:	2d 91       	ld	r18, X+
    7780:	3c 91       	ld	r19, X
    7782:	11 97       	sbiw	r26, 0x01	; 1
    7784:	28 0f       	add	r18, r24
    7786:	39 1f       	adc	r19, r25
    7788:	2d 93       	st	X+, r18
    778a:	3c 93       	st	X, r19
    778c:	08 c0       	rjmp	.+16     	; 0x779e <ProcessMixer+0xa64>
    778e:	f6 01       	movw	r30, r12
    7790:	36 97       	sbiw	r30, 0x06	; 6

		} // No throttle
		
		// No throttles, so clamp to THROTTLEMIN if flagged as a motor
		else if (Config.Channel[i].Motor_marker == MOTOR)
    7792:	80 81       	ld	r24, Z
    7794:	82 30       	cpi	r24, 0x02	; 2
    7796:	19 f4       	brne	.+6      	; 0x779e <ProcessMixer+0xa64>
		{
			Config.Channel[i].P1_value = -THROTTLEOFFSET; // 3750-1250 = 2500 = 1.0ms
    7798:	f7 01       	movw	r30, r14
    779a:	71 82       	std	Z+1, r7	; 0x01
    779c:	60 82       	st	Z, r6
    779e:	f6 e2       	ldi	r31, 0x26	; 38
    77a0:	ef 0e       	add	r14, r31
    77a2:	f1 1c       	adc	r15, r1
    77a4:	26 e2       	ldi	r18, 0x26	; 38
    77a6:	c2 0e       	add	r12, r18
    77a8:	d1 1c       	adc	r13, r1
    77aa:	36 e2       	ldi	r19, 0x26	; 38
    77ac:	83 0e       	add	r8, r19
    77ae:	91 1c       	adc	r9, r1
	// Groovy throttle curve handling. Must be after the transition.
	// Uses the transition value, but is not part of the transition
	// mixer. Linear or Sine curve. Reverse Sine done automatically
	//************************************************************ 

	for (i = 0; i < MIX_OUTPUTS; i++)
    77b0:	43 e7       	ldi	r20, 0x73	; 115
    77b2:	e4 16       	cp	r14, r20
    77b4:	47 e0       	ldi	r20, 0x07	; 7
    77b6:	f4 06       	cpc	r15, r20
    77b8:	09 f0       	breq	.+2      	; 0x77bc <ProcessMixer+0xa82>
    77ba:	7e cf       	rjmp	.-260    	; 0x76b8 <ProcessMixer+0x97e>
    77bc:	eb e4       	ldi	r30, 0x4B	; 75
    77be:	f6 e0       	ldi	r31, 0x06	; 6
    77c0:	23 e4       	ldi	r18, 0x43	; 67
    77c2:	36 e0       	ldi	r19, 0x06	; 6
			// Work out distance to cover over stage 2 (P1.n to P2)
			temp2 = Config.Channel[i].P2_offset - Config.Channel[i].P1n_offset;
			temp2 = temp2 << 7;

			// Divide distance into steps
			temp1 = (100 - Config.Channel[i].P1n_position); 
    77c4:	94 e6       	ldi	r25, 0x64	; 100
    77c6:	69 2e       	mov	r6, r25
    77c8:	71 2c       	mov	r7, r1
    77ca:	df 01       	movw	r26, r30
    77cc:	13 97       	sbiw	r26, 0x03	; 3
	//************************************************************ 

	for (i = 0; i < MIX_OUTPUTS; i++)
	{
		// Simplify if all are the same
		if (!((Config.Channel[i].P1_offset == Config.Channel[i].P1n_offset) &&
    77ce:	cc 90       	ld	r12, X
    77d0:	12 96       	adiw	r26, 0x02	; 2
    77d2:	ac 90       	ld	r10, X
    77d4:	50 80       	ld	r5, Z
    77d6:	ca 10       	cpse	r12, r10
    77d8:	03 c0       	rjmp	.+6      	; 0x77e0 <ProcessMixer+0xaa6>
    77da:	5c 14       	cp	r5, r12
    77dc:	09 f4       	brne	.+2      	; 0x77e0 <ProcessMixer+0xaa6>
    77de:	53 c0       	rjmp	.+166    	; 0x7886 <ProcessMixer+0xb4c>
		 	 (Config.Channel[i].P2_offset == Config.Channel[i].P1n_offset)))
		{
			// Work out distance to cover over stage 1 (P1 to P1.n)
			temp1 = Config.Channel[i].P1n_offset - Config.Channel[i].P1_offset;
    77e0:	bb 24       	eor	r11, r11
    77e2:	a7 fc       	sbrc	r10, 7
    77e4:	b0 94       	com	r11
    77e6:	dd 24       	eor	r13, r13
    77e8:	c7 fc       	sbrc	r12, 7
    77ea:	d0 94       	com	r13
    77ec:	c5 01       	movw	r24, r10
    77ee:	8c 19       	sub	r24, r12
    77f0:	9d 09       	sbc	r25, r13
    77f2:	df 01       	movw	r26, r30
    77f4:	12 97       	sbiw	r26, 0x02	; 2
			temp1 = temp1 << 7; // Multiply by 128 so divide gives reasonable step values

			// Divide distance into steps
			temp2 = Config.Channel[i].P1n_position; 
    77f6:	ec 90       	ld	r14, X
    77f8:	ff 24       	eor	r15, r15
    77fa:	e7 fc       	sbrc	r14, 7
    77fc:	f0 94       	com	r15
		if (!((Config.Channel[i].P1_offset == Config.Channel[i].P1n_offset) &&
		 	 (Config.Channel[i].P2_offset == Config.Channel[i].P1n_offset)))
		{
			// Work out distance to cover over stage 1 (P1 to P1.n)
			temp1 = Config.Channel[i].P1n_offset - Config.Channel[i].P1_offset;
			temp1 = temp1 << 7; // Multiply by 128 so divide gives reasonable step values
    77fe:	96 95       	lsr	r25
    7800:	98 2f       	mov	r25, r24
    7802:	88 27       	eor	r24, r24
    7804:	97 95       	ror	r25
    7806:	87 95       	ror	r24

			// Divide distance into steps
			temp2 = Config.Channel[i].P1n_position; 
			Step1 = ((temp1 + (temp2 >> 1)) / temp2) ; // Divide and round result
    7808:	a7 01       	movw	r20, r14
    780a:	55 95       	asr	r21
    780c:	47 95       	ror	r20
    780e:	84 0f       	add	r24, r20
    7810:	95 1f       	adc	r25, r21
    7812:	b7 01       	movw	r22, r14
    7814:	0e 94 6c 47 	call	0x8ed8	; 0x8ed8 <__divmodhi4>
    7818:	4b 01       	movw	r8, r22
		
			// Work out distance to cover over stage 2 (P1.n to P2)
			temp2 = Config.Channel[i].P2_offset - Config.Channel[i].P1n_offset;
    781a:	85 2d       	mov	r24, r5
    781c:	99 27       	eor	r25, r25
    781e:	87 fd       	sbrc	r24, 7
    7820:	90 95       	com	r25
    7822:	8a 19       	sub	r24, r10
    7824:	9b 09       	sbc	r25, r11
			temp2 = temp2 << 7;

			// Divide distance into steps
			temp1 = (100 - Config.Channel[i].P1n_position); 
    7826:	b3 01       	movw	r22, r6
    7828:	6e 19       	sub	r22, r14
    782a:	7f 09       	sbc	r23, r15
			temp2 = Config.Channel[i].P1n_position; 
			Step1 = ((temp1 + (temp2 >> 1)) / temp2) ; // Divide and round result
		
			// Work out distance to cover over stage 2 (P1.n to P2)
			temp2 = Config.Channel[i].P2_offset - Config.Channel[i].P1n_offset;
			temp2 = temp2 << 7;
    782c:	96 95       	lsr	r25
    782e:	98 2f       	mov	r25, r24
    7830:	88 27       	eor	r24, r24
    7832:	97 95       	ror	r25
    7834:	87 95       	ror	r24

			// Divide distance into steps
			temp1 = (100 - Config.Channel[i].P1n_position); 
			Step2 = ((temp2 + (temp1 >> 1)) / temp1) ; // Divide and round result	
    7836:	ab 01       	movw	r20, r22
    7838:	55 95       	asr	r21
    783a:	47 95       	ror	r20
    783c:	84 0f       	add	r24, r20
    783e:	95 1f       	adc	r25, r21
    7840:	0e 94 6c 47 	call	0x8ed8	; 0x8ed8 <__divmodhi4>

			// Set start (P1) point
			temp3 = Config.Channel[i].P1_offset; // Promote to 16bits
			temp3 = temp3 << 7;
    7844:	d6 94       	lsr	r13
    7846:	dc 2c       	mov	r13, r12
    7848:	cc 24       	eor	r12, r12
    784a:	d7 94       	ror	r13
    784c:	c7 94       	ror	r12

			// Count up transition steps of the appropriate step size
			for (j = 0; j < transition; j++)
    784e:	40 e0       	ldi	r20, 0x00	; 0
    7850:	84 2f       	mov	r24, r20
    7852:	90 e0       	ldi	r25, 0x00	; 0
    7854:	80 17       	cp	r24, r16
    7856:	91 07       	cpc	r25, r17
    7858:	54 f4       	brge	.+20     	; 0x786e <ProcessMixer+0xb34>
			{
				// If in stage 1 use Step1 size
				if (j < Config.Channel[i].P1n_position)
    785a:	8e 15       	cp	r24, r14
    785c:	9f 05       	cpc	r25, r15
    785e:	1c f4       	brge	.+6      	; 0x7866 <ProcessMixer+0xb2c>
				{
					temp3 += Step1;
    7860:	c8 0c       	add	r12, r8
    7862:	d9 1c       	adc	r13, r9
    7864:	02 c0       	rjmp	.+4      	; 0x786a <ProcessMixer+0xb30>
				}
				// If in stage 2 use Step2 size
				else
				{
					temp3 += Step2;
    7866:	c6 0e       	add	r12, r22
    7868:	d7 1e       	adc	r13, r23
			// Set start (P1) point
			temp3 = Config.Channel[i].P1_offset; // Promote to 16bits
			temp3 = temp3 << 7;

			// Count up transition steps of the appropriate step size
			for (j = 0; j < transition; j++)
    786a:	4f 5f       	subi	r20, 0xFF	; 255
    786c:	f1 cf       	rjmp	.-30     	; 0x7850 <ProcessMixer+0xb16>
					temp3 += Step2;
				}
			}

			// Reformat into a system-compatible value
			itemp8 = (int8_t)((temp3 + 64) >> 7);							// Round then divide by 128
    786e:	c6 01       	movw	r24, r12
    7870:	80 5c       	subi	r24, 0xC0	; 192
    7872:	9f 4f       	sbci	r25, 0xFF	; 255
    7874:	88 0f       	add	r24, r24
    7876:	89 2f       	mov	r24, r25
    7878:	88 1f       	adc	r24, r24
    787a:	99 0b       	sbc	r25, r25
int16_t scale_percent_nooffset(int8_t value)
{
	int16_t temp16_1, temp16_2;

	temp16_1 = value; // Promote
	temp16_2 = (temp16_1 * (int16_t)10);
    787c:	5a e0       	ldi	r21, 0x0A	; 10
    787e:	85 02       	muls	r24, r21
    7880:	60 01       	movw	r12, r0
    7882:	11 24       	eor	r1, r1
				}
			}

			// Reformat into a system-compatible value
			itemp8 = (int8_t)((temp3 + 64) >> 7);							// Round then divide by 128
			P1_solution = scale_percent_nooffset(itemp8);	
    7884:	05 c0       	rjmp	.+10     	; 0x7890 <ProcessMixer+0xb56>
int16_t scale_percent_nooffset(int8_t value)
{
	int16_t temp16_1, temp16_2;

	temp16_1 = value; // Promote
	temp16_2 = (temp16_1 * (int16_t)10);
    7886:	85 2d       	mov	r24, r5
    7888:	9a e0       	ldi	r25, 0x0A	; 10
    788a:	89 02       	muls	r24, r25
    788c:	60 01       	movw	r12, r0
    788e:	11 24       	eor	r1, r1
		{
			P1_solution = scale_percent_nooffset(Config.Channel[i].P1_offset);
		}

		// Add offset to channel value
		Config.Channel[i].P1_value += P1_solution;
    7890:	d9 01       	movw	r26, r18
    7892:	4d 91       	ld	r20, X+
    7894:	5c 91       	ld	r21, X
    7896:	11 97       	sbiw	r26, 0x01	; 1
    7898:	4c 0d       	add	r20, r12
    789a:	5d 1d       	adc	r21, r13
    789c:	4d 93       	st	X+, r20
    789e:	5c 93       	st	X, r21
    78a0:	2a 5d       	subi	r18, 0xDA	; 218
    78a2:	3f 4f       	sbci	r19, 0xFF	; 255
    78a4:	b6 96       	adiw	r30, 0x26	; 38
	//************************************************************
	// Per-channel 3-point offset needs to be after the transition  
	// loop as it is non-linear, unlike the transition.
	//************************************************************ 

	for (i = 0; i < MIX_OUTPUTS; i++)
    78a6:	b7 e0       	ldi	r27, 0x07	; 7
    78a8:	eb 37       	cpi	r30, 0x7B	; 123
    78aa:	fb 07       	cpc	r31, r27
    78ac:	09 f0       	breq	.+2      	; 0x78b0 <ProcessMixer+0xb76>
    78ae:	8d cf       	rjmp	.-230    	; 0x77ca <ProcessMixer+0xa90>

		// Add offset to channel value
		Config.Channel[i].P1_value += P1_solution;
	}

} // ProcessMixer()
    78b0:	e2 96       	adiw	r28, 0x32	; 50
    78b2:	0f b6       	in	r0, 0x3f	; 63
    78b4:	f8 94       	cli
    78b6:	de bf       	out	0x3e, r29	; 62
    78b8:	0f be       	out	0x3f, r0	; 63
    78ba:	cd bf       	out	0x3d, r28	; 61
    78bc:	df 91       	pop	r29
    78be:	cf 91       	pop	r28
    78c0:	1f 91       	pop	r17
    78c2:	0f 91       	pop	r16
    78c4:	ff 90       	pop	r15
    78c6:	ef 90       	pop	r14
    78c8:	df 90       	pop	r13
    78ca:	cf 90       	pop	r12
    78cc:	bf 90       	pop	r11
    78ce:	af 90       	pop	r10
    78d0:	9f 90       	pop	r9
    78d2:	8f 90       	pop	r8
    78d4:	7f 90       	pop	r7
    78d6:	6f 90       	pop	r6
    78d8:	5f 90       	pop	r5
    78da:	4f 90       	pop	r4
    78dc:	3f 90       	pop	r3
    78de:	2f 90       	pop	r2
    78e0:	08 95       	ret

000078e2 <scale_percent>:
int16_t scale_percent(int8_t value)
{
	int16_t temp16_1, temp16_2;

	temp16_1 = value; // Promote
	temp16_2 = ((temp16_1 * (int16_t)10) + 3750);
    78e2:	2a e0       	ldi	r18, 0x0A	; 10
    78e4:	82 02       	muls	r24, r18
    78e6:	c0 01       	movw	r24, r0
    78e8:	11 24       	eor	r1, r1

	return temp16_2;
}
    78ea:	8a 55       	subi	r24, 0x5A	; 90
    78ec:	91 4f       	sbci	r25, 0xF1	; 241
    78ee:	08 95       	ret

000078f0 <mugui_text_sizestring>:
	\return void
	\date 	12.08.2009
*/
/************************************************************************/
void mugui_text_sizestring(mugui_char_t *s, const unsigned char* font, mugui_size16_t *size)
{
    78f0:	df 92       	push	r13
    78f2:	ef 92       	push	r14
    78f4:	ff 92       	push	r15
    78f6:	0f 93       	push	r16
    78f8:	1f 93       	push	r17
    78fa:	cf 93       	push	r28
    78fc:	df 93       	push	r29
	mugui_uint8_t  indexhighbyte = 0; 		//high byte of the bitmap address in the array
	mugui_uint32_t indexaddress = 0;		//bitmap address in the array (derived from low and high byte)

	/* read header of the font          */
	/* pgm_read_byte is ATMega specific */
	length = strlen(s);
    78fe:	dc 01       	movw	r26, r24
    7900:	0d 90       	ld	r0, X+
    7902:	00 20       	and	r0, r0
    7904:	e9 f7       	brne	.-6      	; 0x7900 <mugui_text_sizestring+0x10>
    7906:	11 97       	sbiw	r26, 0x01	; 1
    7908:	a8 1b       	sub	r26, r24
    790a:	b9 0b       	sbc	r27, r25
	height = pgm_read_byte(&font[4]);
    790c:	fb 01       	movw	r30, r22
    790e:	34 96       	adiw	r30, 0x04	; 4
    7910:	e4 90       	lpm	r14, Z
    7912:	f1 2c       	mov	r15, r1

	startcharacter = pgm_read_byte(&font[2]);
    7914:	32 97       	sbiw	r30, 0x02	; 2
    7916:	d4 90       	lpm	r13, Z
    7918:	ec 01       	movw	r28, r24
    791a:	a8 0f       	add	r26, r24
    791c:	b9 1f       	adc	r27, r25
	mugui_uint8_t  distance = 1;			//distance between characters
	mugui_uint16_t length = 0;				//temporary length of string
	mugui_uint16_t i = 0;					//counter variable
	mugui_uint16_t startcharacter = 0; 	    //startcharacter of the font
	mugui_uint16_t height = 0;				//height of the bitmap
	mugui_uint16_t width = 0; 				//width of the bitmap
    791e:	80 e0       	ldi	r24, 0x00	; 0
    7920:	90 e0       	ldi	r25, 0x00	; 0
	/* pgm_read_byte is ATMega specific */
	length = strlen(s);
	height = pgm_read_byte(&font[4]);

	startcharacter = pgm_read_byte(&font[2]);
	for(i=0;i<length;i++) //every character in prop fonts has its own width
    7922:	ca 17       	cp	r28, r26
    7924:	db 07       	cpc	r29, r27
    7926:	29 f1       	breq	.+74     	; 0x7972 <mugui_text_sizestring+0x82>
	{
		index = s[i] - startcharacter;
    7928:	29 91       	ld	r18, Y+
    792a:	2d 19       	sub	r18, r13
		indexhighbyte = pgm_read_byte(&font[index*2 + 5]);
    792c:	30 e0       	ldi	r19, 0x00	; 0
    792e:	22 0f       	add	r18, r18
    7930:	33 1f       	adc	r19, r19
    7932:	f9 01       	movw	r30, r18
    7934:	35 96       	adiw	r30, 0x05	; 5
    7936:	e6 0f       	add	r30, r22
    7938:	f7 1f       	adc	r31, r23
    793a:	04 91       	lpm	r16, Z
		indexlowbyte = pgm_read_byte(&font[index*2 + 6]);
    793c:	f9 01       	movw	r30, r18
    793e:	36 96       	adiw	r30, 0x06	; 6
    7940:	e6 0f       	add	r30, r22
    7942:	f7 1f       	adc	r31, r23
    7944:	e4 91       	lpm	r30, Z
		indexaddress = (mugui_int64_t)indexhighbyte;
    7946:	10 e0       	ldi	r17, 0x00	; 0
    7948:	20 e0       	ldi	r18, 0x00	; 0
    794a:	30 e0       	ldi	r19, 0x00	; 0
		indexaddress = indexaddress << 8;
    794c:	32 2f       	mov	r19, r18
    794e:	21 2f       	mov	r18, r17
    7950:	10 2f       	mov	r17, r16
    7952:	00 27       	eor	r16, r16
		indexaddress += indexlowbyte;
    7954:	0e 0f       	add	r16, r30
    7956:	11 1d       	adc	r17, r1
    7958:	21 1d       	adc	r18, r1
    795a:	31 1d       	adc	r19, r1
		width += pgm_read_byte(&font[indexaddress]) + distance;
    795c:	fb 01       	movw	r30, r22
    795e:	e0 0f       	add	r30, r16
    7960:	f1 1f       	adc	r31, r17
    7962:	04 91       	lpm	r16, Z
    7964:	20 2f       	mov	r18, r16
    7966:	30 e0       	ldi	r19, 0x00	; 0
    7968:	2f 5f       	subi	r18, 0xFF	; 255
    796a:	3f 4f       	sbci	r19, 0xFF	; 255
    796c:	82 0f       	add	r24, r18
    796e:	93 1f       	adc	r25, r19
    7970:	d8 cf       	rjmp	.-80     	; 0x7922 <mugui_text_sizestring+0x32>
	}

	/* prepare return value */
	size->x = width;
    7972:	fa 01       	movw	r30, r20
    7974:	91 83       	std	Z+1, r25	; 0x01
    7976:	80 83       	st	Z, r24
	size->y = height;
    7978:	f3 82       	std	Z+3, r15	; 0x03
    797a:	e2 82       	std	Z+2, r14	; 0x02
}
    797c:	df 91       	pop	r29
    797e:	cf 91       	pop	r28
    7980:	1f 91       	pop	r17
    7982:	0f 91       	pop	r16
    7984:	ff 90       	pop	r15
    7986:	ef 90       	pop	r14
    7988:	df 90       	pop	r13
    798a:	08 95       	ret

0000798c <pgm_mugui_scopy>:
	\date 	30.07.2012
	\Created by D. Thompson
*/
/************************************************************************/
void pgm_mugui_scopy(const char *s)
{
    798c:	af e5       	ldi	r26, 0x5F	; 95
    798e:	b5 e0       	ldi	r27, 0x05	; 5
	int i = 0;
    7990:	20 e0       	ldi	r18, 0x00	; 0
    7992:	30 e0       	ldi	r19, 0x00	; 0
    7994:	fc 01       	movw	r30, r24
    7996:	e2 0f       	add	r30, r18
    7998:	f3 1f       	adc	r31, r19

	// Copy string until terminator but don't over-write buffer
	while((pgm_read_byte(s) != 0x00) && (i < (PBUFFER_SIZE - 1)))
    799a:	44 91       	lpm	r20, Z
    799c:	44 23       	and	r20, r20
    799e:	41 f0       	breq	.+16     	; 0x79b0 <pgm_mugui_scopy+0x24>
    79a0:	2f 30       	cpi	r18, 0x0F	; 15
    79a2:	31 05       	cpc	r19, r1
    79a4:	29 f0       	breq	.+10     	; 0x79b0 <pgm_mugui_scopy+0x24>
	{
		pBuffer[i] = pgm_read_byte(s++);
    79a6:	e4 91       	lpm	r30, Z
    79a8:	ed 93       	st	X+, r30
		i++;
    79aa:	2f 5f       	subi	r18, 0xFF	; 255
    79ac:	3f 4f       	sbci	r19, 0xFF	; 255
    79ae:	f2 cf       	rjmp	.-28     	; 0x7994 <pgm_mugui_scopy+0x8>
	}
	
	// Add the terminator regardless of the amount copied
	pBuffer[i] = 0x00;
    79b0:	f9 01       	movw	r30, r18
    79b2:	e1 5a       	subi	r30, 0xA1	; 161
    79b4:	fa 4f       	sbci	r31, 0xFA	; 250
    79b6:	10 82       	st	Z, r1
    79b8:	08 95       	ret

000079ba <mugui_lcd_putc>:
	\date 	13.11.2009
	\Modified by D. Thompson 14/08/2012 - Now hard-coded for proportional, type 2 (verticalCeiling)
*/
/************************************************************************/
mugui_uint16_t mugui_lcd_putc(mugui_char_t c, const unsigned char* font,mugui_uint16_t x, mugui_uint16_t y)
{
    79ba:	2f 92       	push	r2
    79bc:	3f 92       	push	r3
    79be:	4f 92       	push	r4
    79c0:	5f 92       	push	r5
    79c2:	6f 92       	push	r6
    79c4:	7f 92       	push	r7
    79c6:	8f 92       	push	r8
    79c8:	9f 92       	push	r9
    79ca:	af 92       	push	r10
    79cc:	bf 92       	push	r11
    79ce:	cf 92       	push	r12
    79d0:	df 92       	push	r13
    79d2:	ef 92       	push	r14
    79d4:	ff 92       	push	r15
    79d6:	0f 93       	push	r16
    79d8:	1f 93       	push	r17
    79da:	cf 93       	push	r28
    79dc:	df 93       	push	r29
    79de:	cd b7       	in	r28, 0x3d	; 61
    79e0:	de b7       	in	r29, 0x3e	; 62
    79e2:	29 97       	sbiw	r28, 0x09	; 9
    79e4:	0f b6       	in	r0, 0x3f	; 63
    79e6:	f8 94       	cli
    79e8:	de bf       	out	0x3e, r29	; 62
    79ea:	0f be       	out	0x3f, r0	; 63
    79ec:	cd bf       	out	0x3d, r28	; 61
    79ee:	4c 83       	std	Y+4, r20	; 0x04
    79f0:	2d 83       	std	Y+5, r18	; 0x05
	mugui_uint8_t  tc= 0;	 				//temorary count
	mugui_uint8_t  bytes= 0;  				//bytes per line or row

	/* Read header of the font          */
	/* pgm_read_byte is ATMega specific */
	startcharacter = pgm_read_byte(&font[2]);
    79f2:	fb 01       	movw	r30, r22
    79f4:	32 96       	adiw	r30, 0x02	; 2
    79f6:	94 91       	lpm	r25, Z
	height = pgm_read_byte(&font[4]);
    79f8:	32 96       	adiw	r30, 0x02	; 2
    79fa:	e4 91       	lpm	r30, Z
    79fc:	2e 2e       	mov	r2, r30
    79fe:	31 2c       	mov	r3, r1

	/* Read the rest of the header */
	index = c - startcharacter;
    7a00:	89 1b       	sub	r24, r25
	indexhighbyte = pgm_read_byte(&font[index*2 + 5]);
    7a02:	90 e0       	ldi	r25, 0x00	; 0
    7a04:	88 0f       	add	r24, r24
    7a06:	99 1f       	adc	r25, r25
    7a08:	fc 01       	movw	r30, r24
    7a0a:	35 96       	adiw	r30, 0x05	; 5
    7a0c:	e6 0f       	add	r30, r22
    7a0e:	f7 1f       	adc	r31, r23
    7a10:	64 90       	lpm	r6, Z
	indexlowbyte = pgm_read_byte(&font[index*2 + 6]);
    7a12:	fc 01       	movw	r30, r24
    7a14:	36 96       	adiw	r30, 0x06	; 6
    7a16:	e6 0f       	add	r30, r22
    7a18:	f7 1f       	adc	r31, r23
    7a1a:	84 91       	lpm	r24, Z
	indexaddress = (mugui_int64_t)indexhighbyte;
    7a1c:	06 2d       	mov	r16, r6
    7a1e:	10 e0       	ldi	r17, 0x00	; 0
    7a20:	20 e0       	ldi	r18, 0x00	; 0
    7a22:	30 e0       	ldi	r19, 0x00	; 0
	indexaddress = indexaddress << 8;
    7a24:	32 2f       	mov	r19, r18
    7a26:	21 2f       	mov	r18, r17
    7a28:	10 2f       	mov	r17, r16
    7a2a:	00 27       	eor	r16, r16
	indexaddress += indexlowbyte;
    7a2c:	08 0f       	add	r16, r24
    7a2e:	11 1d       	adc	r17, r1
    7a30:	21 1d       	adc	r18, r1
    7a32:	31 1d       	adc	r19, r1
	width = pgm_read_byte(&font[indexaddress]);
    7a34:	c8 01       	movw	r24, r16
    7a36:	fb 01       	movw	r30, r22
    7a38:	e0 0f       	add	r30, r16
    7a3a:	f1 1f       	adc	r31, r17
    7a3c:	64 90       	lpm	r6, Z
    7a3e:	71 2c       	mov	r7, r1

	/* Determine the number of bytes for given width */ 
	bytes = ((height-1)>>3)+1;
    7a40:	21 01       	movw	r4, r2
    7a42:	21 e0       	ldi	r18, 0x01	; 1
    7a44:	42 1a       	sub	r4, r18
    7a46:	51 08       	sbc	r5, r1
    7a48:	13 e0       	ldi	r17, 0x03	; 3
    7a4a:	56 94       	lsr	r5
    7a4c:	47 94       	ror	r4
    7a4e:	1a 95       	dec	r17
    7a50:	e1 f7       	brne	.-8      	; 0x7a4a <mugui_lcd_putc+0x90>
    7a52:	43 94       	inc	r4
    7a54:	a4 2d       	mov	r26, r4
    7a56:	b0 e0       	ldi	r27, 0x00	; 0
    7a58:	ba 83       	std	Y+2, r27	; 0x02
    7a5a:	a9 83       	std	Y+1, r26	; 0x01
	/* For every column */
	for(tx= 0; tx < width; tx++) //for every row
    7a5c:	a1 2c       	mov	r10, r1
    7a5e:	b1 2c       	mov	r11, r1
    7a60:	00 e0       	ldi	r16, 0x00	; 0
    7a62:	10 e0       	ldi	r17, 0x00	; 0
    7a64:	4b 01       	movw	r8, r22
    7a66:	bf ef       	ldi	r27, 0xFF	; 255
    7a68:	8b 1a       	sub	r8, r27
    7a6a:	9b 0a       	sbc	r9, r27
    7a6c:	88 0e       	add	r8, r24
    7a6e:	99 1e       	adc	r9, r25
    7a70:	06 15       	cp	r16, r6
    7a72:	17 05       	cpc	r17, r7
    7a74:	08 f0       	brcs	.+2      	; 0x7a78 <mugui_lcd_putc+0xbe>
    7a76:	43 c0       	rjmp	.+134    	; 0x7afe <mugui_lcd_putc+0x144>
    7a78:	c1 2c       	mov	r12, r1
    7a7a:	d1 2c       	mov	r13, r1
    7a7c:	e1 2c       	mov	r14, r1
    7a7e:	f1 2c       	mov	r15, r1
    7a80:	94 01       	movw	r18, r8
    7a82:	2a 0d       	add	r18, r10
    7a84:	3b 1d       	adc	r19, r11
    7a86:	3f 83       	std	Y+7, r19	; 0x07
    7a88:	2e 83       	std	Y+6, r18	; 0x06
    7a8a:	5c 80       	ldd	r5, Y+4	; 0x04
    7a8c:	50 0e       	add	r5, r16
	{
		ty = 0;
		/* For every byte */
		for(tb = 0; tb < bytes; tb ++)
    7a8e:	c4 14       	cp	r12, r4
    7a90:	78 f5       	brcc	.+94     	; 0x7af0 <mugui_lcd_putc+0x136>
    7a92:	ee 81       	ldd	r30, Y+6	; 0x06
    7a94:	ff 81       	ldd	r31, Y+7	; 0x07
    7a96:	ec 0d       	add	r30, r12
    7a98:	fd 1d       	adc	r31, r13
		{
			/* Read bytes from program memory - ATMega specific */
			data = pgm_read_byte(&font[indexaddress + 1 + bytes*tx + tb]);
    7a9a:	34 91       	lpm	r19, Z
    7a9c:	3b 83       	std	Y+3, r19	; 0x03
    7a9e:	19 86       	std	Y+9, r1	; 0x09
    7aa0:	18 86       	std	Y+8, r1	; 0x08
			/* For every bit within the height */
			for(tc = 0;  ( (tc < 8) && (ty < height) ); tc ++)
    7aa2:	e2 14       	cp	r14, r2
    7aa4:	f3 04       	cpc	r15, r3
    7aa6:	00 f5       	brcc	.+64     	; 0x7ae8 <mugui_lcd_putc+0x12e>
			{
					/* Determine the bit mask */
					mask = 1<<(tc);
    7aa8:	81 e0       	ldi	r24, 0x01	; 1
    7aaa:	90 e0       	ldi	r25, 0x00	; 0
    7aac:	08 84       	ldd	r0, Y+8	; 0x08
    7aae:	02 c0       	rjmp	.+4      	; 0x7ab4 <mugui_lcd_putc+0xfa>
    7ab0:	88 0f       	add	r24, r24
    7ab2:	99 1f       	adc	r25, r25
    7ab4:	0a 94       	dec	r0
    7ab6:	e2 f7       	brpl	.-8      	; 0x7ab0 <mugui_lcd_putc+0xf6>
					bit = data & mask;
    7ab8:	3b 81       	ldd	r19, Y+3	; 0x03
    7aba:	83 23       	and	r24, r19
    7abc:	4d 81       	ldd	r20, Y+5	; 0x05
    7abe:	4e 0d       	add	r20, r14
					if(bit)
    7ac0:	88 23       	and	r24, r24
    7ac2:	11 f0       	breq	.+4      	; 0x7ac8 <mugui_lcd_putc+0x10e>
					{
						setpixel(buffer,tx+x,ty+y,1);
    7ac4:	21 e0       	ldi	r18, 0x01	; 1
    7ac6:	01 c0       	rjmp	.+2      	; 0x7aca <mugui_lcd_putc+0x110>
					}
					else
					{
						setpixel(buffer,tx+x,ty+y,0);
    7ac8:	20 e0       	ldi	r18, 0x00	; 0
    7aca:	65 2d       	mov	r22, r5
    7acc:	81 e0       	ldi	r24, 0x01	; 1
    7ace:	91 e0       	ldi	r25, 0x01	; 1
    7ad0:	0e 94 45 1f 	call	0x3e8a	; 0x3e8a <setpixel>
					}
					ty++;
    7ad4:	8f ef       	ldi	r24, 0xFF	; 255
    7ad6:	e8 1a       	sub	r14, r24
    7ad8:	f8 0a       	sbc	r15, r24
    7ada:	a8 85       	ldd	r26, Y+8	; 0x08
    7adc:	b9 85       	ldd	r27, Y+9	; 0x09
    7ade:	11 96       	adiw	r26, 0x01	; 1
    7ae0:	b9 87       	std	Y+9, r27	; 0x09
    7ae2:	a8 87       	std	Y+8, r26	; 0x08
		for(tb = 0; tb < bytes; tb ++)
		{
			/* Read bytes from program memory - ATMega specific */
			data = pgm_read_byte(&font[indexaddress + 1 + bytes*tx + tb]);
			/* For every bit within the height */
			for(tc = 0;  ( (tc < 8) && (ty < height) ); tc ++)
    7ae4:	18 97       	sbiw	r26, 0x08	; 8
    7ae6:	e9 f6       	brne	.-70     	; 0x7aa2 <mugui_lcd_putc+0xe8>
    7ae8:	bf ef       	ldi	r27, 0xFF	; 255
    7aea:	cb 1a       	sub	r12, r27
    7aec:	db 0a       	sbc	r13, r27
    7aee:	cf cf       	rjmp	.-98     	; 0x7a8e <mugui_lcd_putc+0xd4>
	width = pgm_read_byte(&font[indexaddress]);

	/* Determine the number of bytes for given width */ 
	bytes = ((height-1)>>3)+1;
	/* For every column */
	for(tx= 0; tx < width; tx++) //for every row
    7af0:	0f 5f       	subi	r16, 0xFF	; 255
    7af2:	1f 4f       	sbci	r17, 0xFF	; 255
    7af4:	e9 81       	ldd	r30, Y+1	; 0x01
    7af6:	fa 81       	ldd	r31, Y+2	; 0x02
    7af8:	ae 0e       	add	r10, r30
    7afa:	bf 1e       	adc	r11, r31
    7afc:	b9 cf       	rjmp	.-142    	; 0x7a70 <mugui_lcd_putc+0xb6>
			}
		}
	}

	return width;
}
    7afe:	c3 01       	movw	r24, r6
    7b00:	29 96       	adiw	r28, 0x09	; 9
    7b02:	0f b6       	in	r0, 0x3f	; 63
    7b04:	f8 94       	cli
    7b06:	de bf       	out	0x3e, r29	; 62
    7b08:	0f be       	out	0x3f, r0	; 63
    7b0a:	cd bf       	out	0x3d, r28	; 61
    7b0c:	df 91       	pop	r29
    7b0e:	cf 91       	pop	r28
    7b10:	1f 91       	pop	r17
    7b12:	0f 91       	pop	r16
    7b14:	ff 90       	pop	r15
    7b16:	ef 90       	pop	r14
    7b18:	df 90       	pop	r13
    7b1a:	cf 90       	pop	r12
    7b1c:	bf 90       	pop	r11
    7b1e:	af 90       	pop	r10
    7b20:	9f 90       	pop	r9
    7b22:	8f 90       	pop	r8
    7b24:	7f 90       	pop	r7
    7b26:	6f 90       	pop	r6
    7b28:	5f 90       	pop	r5
    7b2a:	4f 90       	pop	r4
    7b2c:	3f 90       	pop	r3
    7b2e:	2f 90       	pop	r2
    7b30:	08 95       	ret

00007b32 <pgm_mugui_lcd_puts>:
	\date 	12.08.2009
	\Modified by D. Thompson 27/07/2012
*/
/************************************************************************/
void pgm_mugui_lcd_puts(const unsigned char* s, const unsigned char* font,mugui_uint16_t x, mugui_uint16_t y)
{
    7b32:	af 92       	push	r10
    7b34:	bf 92       	push	r11
    7b36:	cf 92       	push	r12
    7b38:	df 92       	push	r13
    7b3a:	ef 92       	push	r14
    7b3c:	ff 92       	push	r15
    7b3e:	0f 93       	push	r16
    7b40:	1f 93       	push	r17
    7b42:	cf 93       	push	r28
    7b44:	df 93       	push	r29
    7b46:	ec 01       	movw	r28, r24
    7b48:	7b 01       	movw	r14, r22
    7b4a:	6a 01       	movw	r12, r20
    7b4c:	59 01       	movw	r10, r18
	mugui_uint8_t distance  = 1;			// Distance between characters
	mugui_uint16_t xpos     = 0;			// Relative xpos of character
    7b4e:	00 e0       	ldi	r16, 0x00	; 0
    7b50:	10 e0       	ldi	r17, 0x00	; 0

	while(pgm_read_byte(s) != 0x00) 
    7b52:	ce 01       	movw	r24, r28
    7b54:	fe 01       	movw	r30, r28
    7b56:	24 91       	lpm	r18, Z
    7b58:	22 23       	and	r18, r18
    7b5a:	71 f0       	breq	.+28     	; 0x7b78 <pgm_mugui_lcd_puts+0x46>
	{
		xpos += mugui_lcd_putc(pgm_read_byte(s++), font, x + xpos, y) + distance;
    7b5c:	21 96       	adiw	r28, 0x01	; 1
    7b5e:	fc 01       	movw	r30, r24
    7b60:	84 91       	lpm	r24, Z
    7b62:	a8 01       	movw	r20, r16
    7b64:	4c 0d       	add	r20, r12
    7b66:	5d 1d       	adc	r21, r13
    7b68:	95 01       	movw	r18, r10
    7b6a:	b7 01       	movw	r22, r14
    7b6c:	0e 94 dd 3c 	call	0x79ba	; 0x79ba <mugui_lcd_putc>
    7b70:	01 96       	adiw	r24, 0x01	; 1
    7b72:	08 0f       	add	r16, r24
    7b74:	19 1f       	adc	r17, r25
    7b76:	ed cf       	rjmp	.-38     	; 0x7b52 <pgm_mugui_lcd_puts+0x20>
	}
}
    7b78:	df 91       	pop	r29
    7b7a:	cf 91       	pop	r28
    7b7c:	1f 91       	pop	r17
    7b7e:	0f 91       	pop	r16
    7b80:	ff 90       	pop	r15
    7b82:	ef 90       	pop	r14
    7b84:	df 90       	pop	r13
    7b86:	cf 90       	pop	r12
    7b88:	bf 90       	pop	r11
    7b8a:	af 90       	pop	r10
    7b8c:	08 95       	ret

00007b8e <mugui_lcd_puts>:
	\return void
	\date 	12.08.2009
*/
/************************************************************************/
void mugui_lcd_puts(mugui_char_t *s, const unsigned char* font,mugui_uint16_t x, mugui_uint16_t y)
{
    7b8e:	8f 92       	push	r8
    7b90:	9f 92       	push	r9
    7b92:	af 92       	push	r10
    7b94:	bf 92       	push	r11
    7b96:	cf 92       	push	r12
    7b98:	df 92       	push	r13
    7b9a:	ef 92       	push	r14
    7b9c:	ff 92       	push	r15
    7b9e:	0f 93       	push	r16
    7ba0:	1f 93       	push	r17
    7ba2:	cf 93       	push	r28
    7ba4:	df 93       	push	r29
    7ba6:	6b 01       	movw	r12, r22
    7ba8:	5a 01       	movw	r10, r20
    7baa:	49 01       	movw	r8, r18
	mugui_uint8_t distance  = 1;			//distance between characters
	mugui_uint16_t xpos     = 0;			//relativ xpos of character
	mugui_uint16_t length 	= 0;			//temporary length of string
	mugui_uint16_t i 		= 0;			//counter variable
	
	length = strlen(s);
    7bac:	ec 01       	movw	r28, r24
    7bae:	09 90       	ld	r0, Y+
    7bb0:	00 20       	and	r0, r0
    7bb2:	e9 f7       	brne	.-6      	; 0x7bae <mugui_lcd_puts+0x20>
    7bb4:	8c 01       	movw	r16, r24
    7bb6:	21 97       	sbiw	r28, 0x01	; 1
*/
/************************************************************************/
void mugui_lcd_puts(mugui_char_t *s, const unsigned char* font,mugui_uint16_t x, mugui_uint16_t y)
{
	mugui_uint8_t distance  = 1;			//distance between characters
	mugui_uint16_t xpos     = 0;			//relativ xpos of character
    7bb8:	e1 2c       	mov	r14, r1
    7bba:	f1 2c       	mov	r15, r1
	mugui_uint16_t length 	= 0;			//temporary length of string
	mugui_uint16_t i 		= 0;			//counter variable
	
	length = strlen(s);
	for(i=0; i<length; i++)
    7bbc:	0c 17       	cp	r16, r28
    7bbe:	1d 07       	cpc	r17, r29
    7bc0:	71 f0       	breq	.+28     	; 0x7bde <mugui_lcd_puts+0x50>
	{
		xpos += mugui_lcd_putc(s[i], font, x + xpos, y) + distance;
    7bc2:	a7 01       	movw	r20, r14
    7bc4:	4a 0d       	add	r20, r10
    7bc6:	5b 1d       	adc	r21, r11
    7bc8:	94 01       	movw	r18, r8
    7bca:	b6 01       	movw	r22, r12
    7bcc:	f8 01       	movw	r30, r16
    7bce:	81 91       	ld	r24, Z+
    7bd0:	8f 01       	movw	r16, r30
    7bd2:	0e 94 dd 3c 	call	0x79ba	; 0x79ba <mugui_lcd_putc>
    7bd6:	01 96       	adiw	r24, 0x01	; 1
    7bd8:	e8 0e       	add	r14, r24
    7bda:	f9 1e       	adc	r15, r25
    7bdc:	ef cf       	rjmp	.-34     	; 0x7bbc <mugui_lcd_puts+0x2e>
	}
}
    7bde:	df 91       	pop	r29
    7be0:	cf 91       	pop	r28
    7be2:	1f 91       	pop	r17
    7be4:	0f 91       	pop	r16
    7be6:	ff 90       	pop	r15
    7be8:	ef 90       	pop	r14
    7bea:	df 90       	pop	r13
    7bec:	cf 90       	pop	r12
    7bee:	bf 90       	pop	r11
    7bf0:	af 90       	pop	r10
    7bf2:	9f 90       	pop	r9
    7bf4:	8f 90       	pop	r8
    7bf6:	08 95       	ret

00007bf8 <Sensor_PID>:
int32_t PID_AvgAccVert = 0;
float 	gyroSmooth[NUMBEROFAXIS];					// Filtered gyro data
	
// Run each loop to average gyro data and also accVert data
void Sensor_PID(void)
{
    7bf8:	2f 92       	push	r2
    7bfa:	3f 92       	push	r3
    7bfc:	4f 92       	push	r4
    7bfe:	5f 92       	push	r5
    7c00:	6f 92       	push	r6
    7c02:	7f 92       	push	r7
    7c04:	8f 92       	push	r8
    7c06:	9f 92       	push	r9
    7c08:	af 92       	push	r10
    7c0a:	bf 92       	push	r11
    7c0c:	cf 92       	push	r12
    7c0e:	df 92       	push	r13
    7c10:	ef 92       	push	r14
    7c12:	ff 92       	push	r15
    7c14:	0f 93       	push	r16
    7c16:	1f 93       	push	r17
    7c18:	cf 93       	push	r28
    7c1a:	df 93       	push	r29
    7c1c:	cd b7       	in	r28, 0x3d	; 61
    7c1e:	de b7       	in	r29, 0x3e	; 62
    7c20:	6d 97       	sbiw	r28, 0x1d	; 29
    7c22:	0f b6       	in	r0, 0x3f	; 63
    7c24:	f8 94       	cli
    7c26:	de bf       	out	0x3e, r29	; 62
    7c28:	0f be       	out	0x3f, r0	; 63
    7c2a:	cd bf       	out	0x3d, r28	; 61
	// RIGHT roll = +ve gyro, UP pitch = +ve gyro and LEFT yaw = +ve gyro.
	// However the way we have organised stick polarity, RIGHT roll and yaw are +ve, and DOWN elevator is too.
	// When combining with the gyro signals, the sticks have to be in the opposite polarity as the gyros.
	// As described above, pitch and yaw are already opposed, but roll needs to be reversed.

	int16_t	RCinputsAxis[NUMBEROFAXIS] = {-RCinputs[AILERON], RCinputs[ELEVATOR], RCinputs[RUDDER]};
    7c2c:	80 91 2d 08 	lds	r24, 0x082D
    7c30:	90 91 2e 08 	lds	r25, 0x082E
    7c34:	91 95       	neg	r25
    7c36:	81 95       	neg	r24
    7c38:	91 09       	sbc	r25, r1
    7c3a:	98 87       	std	Y+8, r25	; 0x08
    7c3c:	8f 83       	std	Y+7, r24	; 0x07
    7c3e:	80 91 2f 08 	lds	r24, 0x082F
    7c42:	90 91 30 08 	lds	r25, 0x0830
    7c46:	9a 87       	std	Y+10, r25	; 0x0a
    7c48:	89 87       	std	Y+9, r24	; 0x09
    7c4a:	80 91 31 08 	lds	r24, 0x0831
    7c4e:	90 91 32 08 	lds	r25, 0x0832
    7c52:	9c 87       	std	Y+12, r25	; 0x0c
    7c54:	8b 87       	std	Y+11, r24	; 0x0b
	
	int8_t Stick_rates[FLIGHT_MODES][NUMBEROFAXIS] =
    7c56:	80 91 e6 05 	lds	r24, 0x05E6
    7c5a:	89 83       	std	Y+1, r24	; 0x01
    7c5c:	80 91 ec 05 	lds	r24, 0x05EC
    7c60:	8a 83       	std	Y+2, r24	; 0x02
    7c62:	80 91 f2 05 	lds	r24, 0x05F2
    7c66:	8b 83       	std	Y+3, r24	; 0x03
    7c68:	80 91 f8 05 	lds	r24, 0x05F8
    7c6c:	8c 83       	std	Y+4, r24	; 0x04
    7c6e:	80 91 fe 05 	lds	r24, 0x05FE
    7c72:	8d 83       	std	Y+5, r24	; 0x05
    7c74:	80 91 04 06 	lds	r24, 0x0604
    7c78:	8e 83       	std	Y+6, r24	; 0x06
		{Config.FlightMode[P1].Roll_Rate, Config.FlightMode[P1].Pitch_Rate, Config.FlightMode[P1].Yaw_Rate},
		{Config.FlightMode[P2].Roll_Rate, Config.FlightMode[P2].Pitch_Rate, Config.FlightMode[P2].Yaw_Rate}
	};
	
	// Gyro LPF scale
	tempf = pgm_read_byte(&LPF_lookup[Config.Gyro_LPF]); // Lookup actual LPF value and promote
    7c7a:	60 91 40 06 	lds	r22, 0x0640
    7c7e:	e6 2f       	mov	r30, r22
    7c80:	ff 27       	eor	r31, r31
    7c82:	e7 fd       	sbrc	r30, 7
    7c84:	f0 95       	com	r31
    7c86:	e9 55       	subi	r30, 0x59	; 89
    7c88:	f8 4e       	sbci	r31, 0xE8	; 232
    7c8a:	64 91       	lpm	r22, Z
    7c8c:	70 e0       	ldi	r23, 0x00	; 0
    7c8e:	80 e0       	ldi	r24, 0x00	; 0
    7c90:	90 e0       	ldi	r25, 0x00	; 0
    7c92:	0e 94 3f 46 	call	0x8c7e	; 0x8c7e <__floatunsisf>
    7c96:	6b 01       	movw	r12, r22
    7c98:	7c 01       	movw	r14, r24
    7c9a:	8f e6       	ldi	r24, 0x6F	; 111
    7c9c:	a8 2e       	mov	r10, r24
    7c9e:	85 e0       	ldi	r24, 0x05	; 5
    7ca0:	b8 2e       	mov	r11, r24
    7ca2:	95 e0       	ldi	r25, 0x05	; 5
    7ca4:	89 2e       	mov	r8, r25
    7ca6:	98 e0       	ldi	r25, 0x08	; 8
    7ca8:	99 2e       	mov	r9, r25
    7caa:	0d ee       	ldi	r16, 0xED	; 237
    7cac:	17 e0       	ldi	r17, 0x07	; 7
    7cae:	2b e2       	ldi	r18, 0x2B	; 43
    7cb0:	36 e0       	ldi	r19, 0x06	; 6
    7cb2:	3b 8b       	std	Y+19, r19	; 0x13
    7cb4:	2a 8b       	std	Y+18, r18	; 0x12
    7cb6:	ae 01       	movw	r20, r28
    7cb8:	49 5f       	subi	r20, 0xF9	; 249
    7cba:	5f 4f       	sbci	r21, 0xFF	; 255
    7cbc:	5d 8b       	std	Y+21, r21	; 0x15
    7cbe:	4c 8b       	std	Y+20, r20	; 0x14
    7cc0:	be 01       	movw	r22, r28
    7cc2:	6f 5f       	subi	r22, 0xFF	; 255
    7cc4:	7f 4f       	sbci	r23, 0xFF	; 255
    7cc6:	7f 8b       	std	Y+23, r23	; 0x17
    7cc8:	6e 8b       	std	Y+22, r22	; 0x16
    7cca:	ce 01       	movw	r24, r28
    7ccc:	04 96       	adiw	r24, 0x04	; 4
    7cce:	99 8b       	std	Y+17, r25	; 0x11
    7cd0:	88 8b       	std	Y+16, r24	; 0x10
    7cd2:	af e1       	ldi	r26, 0x1F	; 31
    7cd4:	b6 e0       	ldi	r27, 0x06	; 6
    7cd6:	bf 87       	std	Y+15, r27	; 0x0f
    7cd8:	ae 87       	std	Y+14, r26	; 0x0e
	
	for (axis = 0; axis <= YAW; axis ++)
    7cda:	1d 86       	std	Y+13, r1	; 0x0d
			gyroADC[axis] = 0;
		}
		
		// Work out stick rate divider. 0 is slowest, 4 is fastest.
		// /64 (15.25), /32 (30.5), /16 (61*), /8 (122), /4 (244)
		stick_P1 = RCinputsAxis[axis] >> (4 - (Stick_rates[P1][axis] - 2));
    7cdc:	26 e0       	ldi	r18, 0x06	; 6
    7cde:	62 2e       	mov	r6, r18
    7ce0:	71 2c       	mov	r7, r1
		//************************************************************
		// Increment and limit gyro I-terms, handle heading hold nicely
		//************************************************************

		// Reduce Gyro drift noise before adding into I-term
		if ((gyroADC[axis] > -GYRO_DEADBAND) && (gyroADC[axis] < GYRO_DEADBAND)) 
    7ce2:	f5 01       	movw	r30, r10
    7ce4:	80 81       	ld	r24, Z
    7ce6:	91 81       	ldd	r25, Z+1	; 0x01
    7ce8:	04 96       	adiw	r24, 0x04	; 4
    7cea:	09 97       	sbiw	r24, 0x09	; 9
    7cec:	10 f4       	brcc	.+4      	; 0x7cf2 <Sensor_PID+0xfa>
		{
			gyroADC[axis] = 0;
    7cee:	11 82       	std	Z+1, r1	; 0x01
    7cf0:	10 82       	st	Z, r1
		}
		
		// Work out stick rate divider. 0 is slowest, 4 is fastest.
		// /64 (15.25), /32 (30.5), /16 (61*), /8 (122), /4 (244)
		stick_P1 = RCinputsAxis[axis] >> (4 - (Stick_rates[P1][axis] - 2));
    7cf2:	ac 89       	ldd	r26, Y+20	; 0x14
    7cf4:	bd 89       	ldd	r27, Y+21	; 0x15
    7cf6:	2d 91       	ld	r18, X+
    7cf8:	3d 91       	ld	r19, X+
    7cfa:	bd 8b       	std	Y+21, r27	; 0x15
    7cfc:	ac 8b       	std	Y+20, r26	; 0x14
    7cfe:	ee 89       	ldd	r30, Y+22	; 0x16
    7d00:	ff 89       	ldd	r31, Y+23	; 0x17
    7d02:	41 91       	ld	r20, Z+
    7d04:	ff 8b       	std	Y+23, r31	; 0x17
    7d06:	ee 8b       	std	Y+22, r30	; 0x16
		stick_P2 = RCinputsAxis[axis] >> (4 - (Stick_rates[P2][axis] - 2));
    7d08:	a8 89       	ldd	r26, Y+16	; 0x10
    7d0a:	b9 89       	ldd	r27, Y+17	; 0x11
    7d0c:	ed 91       	ld	r30, X+
    7d0e:	b9 8b       	std	Y+17, r27	; 0x11
    7d10:	a8 8b       	std	Y+16, r26	; 0x10

		// Calculate I-term from gyro and stick data 
		// These may look similar, but they are constrained quite differently.
		IntegralGyro[P1][axis] += (gyroADC[axis] + stick_P1);
    7d12:	d5 01       	movw	r26, r10
    7d14:	0d 90       	ld	r0, X+
    7d16:	bc 91       	ld	r27, X
    7d18:	a0 2d       	mov	r26, r0
    7d1a:	bd 8f       	std	Y+29, r27	; 0x1d
    7d1c:	ac 8f       	std	Y+28, r26	; 0x1c
			gyroADC[axis] = 0;
		}
		
		// Work out stick rate divider. 0 is slowest, 4 is fastest.
		// /64 (15.25), /32 (30.5), /16 (61*), /8 (122), /4 (244)
		stick_P1 = RCinputsAxis[axis] >> (4 - (Stick_rates[P1][axis] - 2));
    7d1e:	b3 01       	movw	r22, r6
    7d20:	64 1b       	sub	r22, r20
    7d22:	71 09       	sbc	r23, r1
    7d24:	47 fd       	sbrc	r20, 7
    7d26:	73 95       	inc	r23
    7d28:	c9 01       	movw	r24, r18
    7d2a:	02 c0       	rjmp	.+4      	; 0x7d30 <Sensor_PID+0x138>
    7d2c:	95 95       	asr	r25
    7d2e:	87 95       	ror	r24
    7d30:	6a 95       	dec	r22
    7d32:	e2 f7       	brpl	.-8      	; 0x7d2c <Sensor_PID+0x134>
    7d34:	ac 01       	movw	r20, r24
		stick_P2 = RCinputsAxis[axis] >> (4 - (Stick_rates[P2][axis] - 2));

		// Calculate I-term from gyro and stick data 
		// These may look similar, but they are constrained quite differently.
		IntegralGyro[P1][axis] += (gyroADC[axis] + stick_P1);
    7d36:	4a 0f       	add	r20, r26
    7d38:	5b 1f       	adc	r21, r27
    7d3a:	66 27       	eor	r22, r22
    7d3c:	57 fd       	sbrc	r21, 7
    7d3e:	60 95       	com	r22
    7d40:	76 2f       	mov	r23, r22
    7d42:	d8 01       	movw	r26, r16
    7d44:	2d 90       	ld	r2, X+
    7d46:	3d 90       	ld	r3, X+
    7d48:	4d 90       	ld	r4, X+
    7d4a:	5c 90       	ld	r5, X
    7d4c:	13 97       	sbiw	r26, 0x03	; 3
    7d4e:	24 0e       	add	r2, r20
    7d50:	35 1e       	adc	r3, r21
    7d52:	46 1e       	adc	r4, r22
    7d54:	57 1e       	adc	r5, r23
    7d56:	2d 92       	st	X+, r2
    7d58:	3d 92       	st	X+, r3
    7d5a:	4d 92       	st	X+, r4
    7d5c:	5c 92       	st	X, r5
    7d5e:	13 97       	sbiw	r26, 0x03	; 3
		}
		
		// Work out stick rate divider. 0 is slowest, 4 is fastest.
		// /64 (15.25), /32 (30.5), /16 (61*), /8 (122), /4 (244)
		stick_P1 = RCinputsAxis[axis] >> (4 - (Stick_rates[P1][axis] - 2));
		stick_P2 = RCinputsAxis[axis] >> (4 - (Stick_rates[P2][axis] - 2));
    7d60:	a3 01       	movw	r20, r6
    7d62:	4e 1b       	sub	r20, r30
    7d64:	51 09       	sbc	r21, r1
    7d66:	e7 fd       	sbrc	r30, 7
    7d68:	53 95       	inc	r21
    7d6a:	02 c0       	rjmp	.+4      	; 0x7d70 <Sensor_PID+0x178>
    7d6c:	35 95       	asr	r19
    7d6e:	27 95       	ror	r18
    7d70:	4a 95       	dec	r20
    7d72:	e2 f7       	brpl	.-8      	; 0x7d6c <Sensor_PID+0x174>

		// Calculate I-term from gyro and stick data 
		// These may look similar, but they are constrained quite differently.
		IntegralGyro[P1][axis] += (gyroADC[axis] + stick_P1);
		IntegralGyro[P2][axis] += (gyroADC[axis] + stick_P2);
    7d74:	ec 8d       	ldd	r30, Y+28	; 0x1c
    7d76:	fd 8d       	ldd	r31, Y+29	; 0x1d
    7d78:	2e 0f       	add	r18, r30
    7d7a:	3f 1f       	adc	r19, r31
    7d7c:	a9 01       	movw	r20, r18
    7d7e:	66 27       	eor	r22, r22
    7d80:	57 fd       	sbrc	r21, 7
    7d82:	60 95       	com	r22
    7d84:	76 2f       	mov	r23, r22
    7d86:	48 8f       	std	Y+24, r20	; 0x18
    7d88:	59 8f       	std	Y+25, r21	; 0x19
    7d8a:	6a 8f       	std	Y+26, r22	; 0x1a
    7d8c:	7b 8f       	std	Y+27, r23	; 0x1b
    7d8e:	1c 96       	adiw	r26, 0x0c	; 12
    7d90:	4d 91       	ld	r20, X+
    7d92:	5d 91       	ld	r21, X+
    7d94:	6d 91       	ld	r22, X+
    7d96:	7c 91       	ld	r23, X
    7d98:	1f 97       	sbiw	r26, 0x0f	; 15
    7d9a:	88 8d       	ldd	r24, Y+24	; 0x18
    7d9c:	99 8d       	ldd	r25, Y+25	; 0x19
    7d9e:	aa 8d       	ldd	r26, Y+26	; 0x1a
    7da0:	bb 8d       	ldd	r27, Y+27	; 0x1b
    7da2:	48 0f       	add	r20, r24
    7da4:	59 1f       	adc	r21, r25
    7da6:	6a 1f       	adc	r22, r26
    7da8:	7b 1f       	adc	r23, r27
    7daa:	d8 01       	movw	r26, r16
    7dac:	1c 96       	adiw	r26, 0x0c	; 12
    7dae:	4d 93       	st	X+, r20
    7db0:	5d 93       	st	X+, r21
    7db2:	6d 93       	st	X+, r22
    7db4:	7c 93       	st	X, r23
    7db6:	1f 97       	sbiw	r26, 0x0f	; 15

		// Limit the I-terms to the user-set limits
		for (i = P1; i <= P2; i++)
		{
			if (IntegralGyro[i][axis] > Config.Raw_I_Constrain[i][axis])
    7db8:	ee 85       	ldd	r30, Y+14	; 0x0e
    7dba:	ff 85       	ldd	r31, Y+15	; 0x0f
    7dbc:	41 91       	ld	r20, Z+
    7dbe:	51 91       	ld	r21, Z+
    7dc0:	61 91       	ld	r22, Z+
    7dc2:	71 91       	ld	r23, Z+
    7dc4:	ff 87       	std	Y+15, r31	; 0x0f
    7dc6:	ee 87       	std	Y+14, r30	; 0x0e
    7dc8:	42 15       	cp	r20, r2
    7dca:	53 05       	cpc	r21, r3
    7dcc:	64 05       	cpc	r22, r4
    7dce:	75 05       	cpc	r23, r5
    7dd0:	2c f4       	brge	.+10     	; 0x7ddc <Sensor_PID+0x1e4>
			{
				IntegralGyro[i][axis] = Config.Raw_I_Constrain[i][axis];
    7dd2:	4d 93       	st	X+, r20
    7dd4:	5d 93       	st	X+, r21
    7dd6:	6d 93       	st	X+, r22
    7dd8:	7c 93       	st	X, r23
    7dda:	13 97       	sbiw	r26, 0x03	; 3
			}
			if (IntegralGyro[i][axis] < -Config.Raw_I_Constrain[i][axis])
    7ddc:	70 95       	com	r23
    7dde:	60 95       	com	r22
    7de0:	50 95       	com	r21
    7de2:	41 95       	neg	r20
    7de4:	5f 4f       	sbci	r21, 0xFF	; 255
    7de6:	6f 4f       	sbci	r22, 0xFF	; 255
    7de8:	7f 4f       	sbci	r23, 0xFF	; 255
    7dea:	f8 01       	movw	r30, r16
    7dec:	20 80       	ld	r2, Z
    7dee:	31 80       	ldd	r3, Z+1	; 0x01
    7df0:	42 80       	ldd	r4, Z+2	; 0x02
    7df2:	53 80       	ldd	r5, Z+3	; 0x03
    7df4:	24 16       	cp	r2, r20
    7df6:	35 06       	cpc	r3, r21
    7df8:	46 06       	cpc	r4, r22
    7dfa:	57 06       	cpc	r5, r23
    7dfc:	24 f4       	brge	.+8      	; 0x7e06 <Sensor_PID+0x20e>
			{
				IntegralGyro[i][axis] = -Config.Raw_I_Constrain[i][axis];
    7dfe:	40 83       	st	Z, r20
    7e00:	51 83       	std	Z+1, r21	; 0x01
    7e02:	62 83       	std	Z+2, r22	; 0x02
    7e04:	73 83       	std	Z+3, r23	; 0x03
		IntegralGyro[P2][axis] += (gyroADC[axis] + stick_P2);

		// Limit the I-terms to the user-set limits
		for (i = P1; i <= P2; i++)
		{
			if (IntegralGyro[i][axis] > Config.Raw_I_Constrain[i][axis])
    7e06:	ea 89       	ldd	r30, Y+18	; 0x12
    7e08:	fb 89       	ldd	r31, Y+19	; 0x13
    7e0a:	41 91       	ld	r20, Z+
    7e0c:	51 91       	ld	r21, Z+
    7e0e:	61 91       	ld	r22, Z+
    7e10:	71 91       	ld	r23, Z+
    7e12:	fb 8b       	std	Y+19, r31	; 0x13
    7e14:	ea 8b       	std	Y+18, r30	; 0x12
    7e16:	d8 01       	movw	r26, r16
    7e18:	1c 96       	adiw	r26, 0x0c	; 12
    7e1a:	2d 90       	ld	r2, X+
    7e1c:	3d 90       	ld	r3, X+
    7e1e:	4d 90       	ld	r4, X+
    7e20:	5c 90       	ld	r5, X
    7e22:	1f 97       	sbiw	r26, 0x0f	; 15
    7e24:	42 15       	cp	r20, r2
    7e26:	53 05       	cpc	r21, r3
    7e28:	64 05       	cpc	r22, r4
    7e2a:	75 05       	cpc	r23, r5
    7e2c:	2c f4       	brge	.+10     	; 0x7e38 <Sensor_PID+0x240>
			{
				IntegralGyro[i][axis] = Config.Raw_I_Constrain[i][axis];
    7e2e:	f8 01       	movw	r30, r16
    7e30:	44 87       	std	Z+12, r20	; 0x0c
    7e32:	55 87       	std	Z+13, r21	; 0x0d
    7e34:	66 87       	std	Z+14, r22	; 0x0e
    7e36:	77 87       	std	Z+15, r23	; 0x0f
			}
			if (IntegralGyro[i][axis] < -Config.Raw_I_Constrain[i][axis])
    7e38:	70 95       	com	r23
    7e3a:	60 95       	com	r22
    7e3c:	50 95       	com	r21
    7e3e:	41 95       	neg	r20
    7e40:	5f 4f       	sbci	r21, 0xFF	; 255
    7e42:	6f 4f       	sbci	r22, 0xFF	; 255
    7e44:	7f 4f       	sbci	r23, 0xFF	; 255
    7e46:	d8 01       	movw	r26, r16
    7e48:	1c 96       	adiw	r26, 0x0c	; 12
    7e4a:	2d 90       	ld	r2, X+
    7e4c:	3d 90       	ld	r3, X+
    7e4e:	4d 90       	ld	r4, X+
    7e50:	5c 90       	ld	r5, X
    7e52:	1f 97       	sbiw	r26, 0x0f	; 15
    7e54:	24 16       	cp	r2, r20
    7e56:	35 06       	cpc	r3, r21
    7e58:	46 06       	cpc	r4, r22
    7e5a:	57 06       	cpc	r5, r23
    7e5c:	2c f4       	brge	.+10     	; 0x7e68 <Sensor_PID+0x270>
			{
				IntegralGyro[i][axis] = -Config.Raw_I_Constrain[i][axis];
    7e5e:	f8 01       	movw	r30, r16
    7e60:	44 87       	std	Z+12, r20	; 0x0c
    7e62:	55 87       	std	Z+13, r21	; 0x0d
    7e64:	66 87       	std	Z+14, r22	; 0x0e
    7e66:	77 87       	std	Z+15, r23	; 0x0f

		//************************************************************
		// Gyro LPF
		//************************************************************	
			
		gyroADCf = gyroADC[axis]; // Promote
    7e68:	2c 8d       	ldd	r18, Y+28	; 0x1c
    7e6a:	3d 8d       	ldd	r19, Y+29	; 0x1d
    7e6c:	b9 01       	movw	r22, r18
    7e6e:	88 27       	eor	r24, r24
    7e70:	77 fd       	sbrc	r23, 7
    7e72:	80 95       	com	r24
    7e74:	98 2f       	mov	r25, r24
    7e76:	0e 94 41 46 	call	0x8c82	; 0x8c82 <__floatsisf>
    7e7a:	1b 01       	movw	r2, r22
    7e7c:	2c 01       	movw	r4, r24

		if (tempf > 1)
    7e7e:	20 e0       	ldi	r18, 0x00	; 0
    7e80:	30 e0       	ldi	r19, 0x00	; 0
    7e82:	40 e8       	ldi	r20, 0x80	; 128
    7e84:	5f e3       	ldi	r21, 0x3F	; 63
    7e86:	c7 01       	movw	r24, r14
    7e88:	b6 01       	movw	r22, r12
    7e8a:	0e 94 f1 46 	call	0x8de2	; 0x8de2 <__gesf2>
    7e8e:	18 16       	cp	r1, r24
    7e90:	ec f4       	brge	.+58     	; 0x7ecc <Sensor_PID+0x2d4>
		{
			// Gyro LPF
			gyroSmooth[axis] = (gyroSmooth[axis] * (tempf - 1.0f) + gyroADCf) / tempf;
    7e92:	20 e0       	ldi	r18, 0x00	; 0
    7e94:	30 e0       	ldi	r19, 0x00	; 0
    7e96:	40 e8       	ldi	r20, 0x80	; 128
    7e98:	5f e3       	ldi	r21, 0x3F	; 63
    7e9a:	c7 01       	movw	r24, r14
    7e9c:	b6 01       	movw	r22, r12
    7e9e:	0e 94 3d 45 	call	0x8a7a	; 0x8a7a <__subsf3>
    7ea2:	d4 01       	movw	r26, r8
    7ea4:	2d 91       	ld	r18, X+
    7ea6:	3d 91       	ld	r19, X+
    7ea8:	4d 91       	ld	r20, X+
    7eaa:	5c 91       	ld	r21, X
    7eac:	0e 94 f5 46 	call	0x8dea	; 0x8dea <__mulsf3>
    7eb0:	a2 01       	movw	r20, r4
    7eb2:	91 01       	movw	r18, r2
    7eb4:	0e 94 3e 45 	call	0x8a7c	; 0x8a7c <__addsf3>
    7eb8:	a7 01       	movw	r20, r14
    7eba:	96 01       	movw	r18, r12
    7ebc:	0e 94 a6 45 	call	0x8b4c	; 0x8b4c <__divsf3>
    7ec0:	f4 01       	movw	r30, r8
    7ec2:	60 83       	st	Z, r22
    7ec4:	71 83       	std	Z+1, r23	; 0x01
    7ec6:	82 83       	std	Z+2, r24	; 0x02
    7ec8:	93 83       	std	Z+3, r25	; 0x03
    7eca:	06 c0       	rjmp	.+12     	; 0x7ed8 <Sensor_PID+0x2e0>
		}
		else
		{
			// Use raw gyroADC[axis] as source for gyro values
			gyroSmooth[axis] =  gyroADCf;
    7ecc:	d4 01       	movw	r26, r8
    7ece:	2d 92       	st	X+, r2
    7ed0:	3d 92       	st	X+, r3
    7ed2:	4d 92       	st	X+, r4
    7ed4:	5c 92       	st	X, r5
    7ed6:	13 97       	sbiw	r26, 0x03	; 3
		}		
		
		// Demote back to int16_t
		gyroADC[axis] = (int16_t)gyroSmooth[axis];		
    7ed8:	f4 01       	movw	r30, r8
    7eda:	61 91       	ld	r22, Z+
    7edc:	71 91       	ld	r23, Z+
    7ede:	81 91       	ld	r24, Z+
    7ee0:	91 91       	ld	r25, Z+
    7ee2:	4f 01       	movw	r8, r30
    7ee4:	0e 94 0e 46 	call	0x8c1c	; 0x8c1c <__fixsfsi>
    7ee8:	d5 01       	movw	r26, r10
    7eea:	6d 93       	st	X+, r22
    7eec:	7d 93       	st	X+, r23
    7eee:	5d 01       	movw	r10, r26
    7ef0:	bd 85       	ldd	r27, Y+13	; 0x0d
    7ef2:	bf 5f       	subi	r27, 0xFF	; 255
    7ef4:	bd 87       	std	Y+13, r27	; 0x0d
    7ef6:	0c 5f       	subi	r16, 0xFC	; 252
    7ef8:	1f 4f       	sbci	r17, 0xFF	; 255
	};
	
	// Gyro LPF scale
	tempf = pgm_read_byte(&LPF_lookup[Config.Gyro_LPF]); // Lookup actual LPF value and promote
	
	for (axis = 0; axis <= YAW; axis ++)
    7efa:	b3 30       	cpi	r27, 0x03	; 3
    7efc:	09 f0       	breq	.+2      	; 0x7f00 <Sensor_PID+0x308>
    7efe:	f1 ce       	rjmp	.-542    	; 0x7ce2 <Sensor_PID+0xea>
		// Demote back to int16_t
		gyroADC[axis] = (int16_t)gyroSmooth[axis];		
	}
	
	// Average accVert prior to Calculate_PID()
	PID_AvgAccVert += accVert;
    7f00:	40 91 0e 05 	lds	r20, 0x050E
    7f04:	50 91 0f 05 	lds	r21, 0x050F
    7f08:	66 27       	eor	r22, r22
    7f0a:	57 fd       	sbrc	r21, 7
    7f0c:	60 95       	com	r22
    7f0e:	76 2f       	mov	r23, r22
    7f10:	80 91 36 05 	lds	r24, 0x0536
    7f14:	90 91 37 05 	lds	r25, 0x0537
    7f18:	a0 91 38 05 	lds	r26, 0x0538
    7f1c:	b0 91 39 05 	lds	r27, 0x0539
    7f20:	84 0f       	add	r24, r20
    7f22:	95 1f       	adc	r25, r21
    7f24:	a6 1f       	adc	r26, r22
    7f26:	b7 1f       	adc	r27, r23
    7f28:	80 93 36 05 	sts	0x0536, r24
    7f2c:	90 93 37 05 	sts	0x0537, r25
    7f30:	a0 93 38 05 	sts	0x0538, r26
    7f34:	b0 93 39 05 	sts	0x0539, r27
			
}
    7f38:	6d 96       	adiw	r28, 0x1d	; 29
    7f3a:	0f b6       	in	r0, 0x3f	; 63
    7f3c:	f8 94       	cli
    7f3e:	de bf       	out	0x3e, r29	; 62
    7f40:	0f be       	out	0x3f, r0	; 63
    7f42:	cd bf       	out	0x3d, r28	; 61
    7f44:	df 91       	pop	r29
    7f46:	cf 91       	pop	r28
    7f48:	1f 91       	pop	r17
    7f4a:	0f 91       	pop	r16
    7f4c:	ff 90       	pop	r15
    7f4e:	ef 90       	pop	r14
    7f50:	df 90       	pop	r13
    7f52:	cf 90       	pop	r12
    7f54:	bf 90       	pop	r11
    7f56:	af 90       	pop	r10
    7f58:	9f 90       	pop	r9
    7f5a:	8f 90       	pop	r8
    7f5c:	7f 90       	pop	r7
    7f5e:	6f 90       	pop	r6
    7f60:	5f 90       	pop	r5
    7f62:	4f 90       	pop	r4
    7f64:	3f 90       	pop	r3
    7f66:	2f 90       	pop	r2
    7f68:	08 95       	ret

00007f6a <Calculate_PID>:

// Run just before PWM output, using averaged data
void Calculate_PID(void)
{
    7f6a:	2f 92       	push	r2
    7f6c:	3f 92       	push	r3
    7f6e:	4f 92       	push	r4
    7f70:	5f 92       	push	r5
    7f72:	6f 92       	push	r6
    7f74:	7f 92       	push	r7
    7f76:	8f 92       	push	r8
    7f78:	9f 92       	push	r9
    7f7a:	af 92       	push	r10
    7f7c:	bf 92       	push	r11
    7f7e:	cf 92       	push	r12
    7f80:	df 92       	push	r13
    7f82:	ef 92       	push	r14
    7f84:	ff 92       	push	r15
    7f86:	0f 93       	push	r16
    7f88:	1f 93       	push	r17
    7f8a:	cf 93       	push	r28
    7f8c:	df 93       	push	r29
    7f8e:	cd b7       	in	r28, 0x3d	; 61
    7f90:	de b7       	in	r29, 0x3e	; 62
    7f92:	ca 54       	subi	r28, 0x4A	; 74
    7f94:	d1 09       	sbc	r29, r1
    7f96:	0f b6       	in	r0, 0x3f	; 63
    7f98:	f8 94       	cli
    7f9a:	de bf       	out	0x3e, r29	; 62
    7f9c:	0f be       	out	0x3f, r0	; 63
    7f9e:	cd bf       	out	0x3d, r28	; 61
	int16_t AvAccVert = 0;
	int8_t	axis = 0;
	int8_t i = 0;

	// Initialise arrays with gain values.
	int8_t 	P_gain[FLIGHT_MODES][NUMBEROFAXIS] = 
    7fa0:	80 91 e3 05 	lds	r24, 0x05E3
    7fa4:	8d 8b       	std	Y+21, r24	; 0x15
    7fa6:	80 91 e9 05 	lds	r24, 0x05E9
    7faa:	8e 8b       	std	Y+22, r24	; 0x16
    7fac:	80 91 ef 05 	lds	r24, 0x05EF
    7fb0:	8f 8b       	std	Y+23, r24	; 0x17
    7fb2:	80 91 f5 05 	lds	r24, 0x05F5
    7fb6:	88 8f       	std	Y+24, r24	; 0x18
    7fb8:	80 91 fb 05 	lds	r24, 0x05FB
    7fbc:	89 8f       	std	Y+25, r24	; 0x19
    7fbe:	80 91 01 06 	lds	r24, 0x0601
    7fc2:	8a 8f       	std	Y+26, r24	; 0x1a
		{
			{Config.FlightMode[P1].Roll_P_mult, Config.FlightMode[P1].Pitch_P_mult, Config.FlightMode[P1].Yaw_P_mult},
		 	{Config.FlightMode[P2].Roll_P_mult, Config.FlightMode[P2].Pitch_P_mult, Config.FlightMode[P2].Yaw_P_mult}
		};

	int8_t 	I_gain[FLIGHT_MODES][NUMBEROFAXIS] = 
    7fc4:	80 91 e4 05 	lds	r24, 0x05E4
    7fc8:	8f 87       	std	Y+15, r24	; 0x0f
    7fca:	80 91 ea 05 	lds	r24, 0x05EA
    7fce:	88 8b       	std	Y+16, r24	; 0x10
    7fd0:	80 91 f0 05 	lds	r24, 0x05F0
    7fd4:	89 8b       	std	Y+17, r24	; 0x11
    7fd6:	80 91 f6 05 	lds	r24, 0x05F6
    7fda:	8a 8b       	std	Y+18, r24	; 0x12
    7fdc:	80 91 fc 05 	lds	r24, 0x05FC
    7fe0:	8b 8b       	std	Y+19, r24	; 0x13
    7fe2:	80 91 02 06 	lds	r24, 0x0602
    7fe6:	8c 8b       	std	Y+20, r24	; 0x14
		{
			{Config.FlightMode[P1].Roll_I_mult, Config.FlightMode[P1].Pitch_I_mult, Config.FlightMode[P1].Yaw_I_mult},
			{Config.FlightMode[P2].Roll_I_mult, Config.FlightMode[P2].Pitch_I_mult, Config.FlightMode[P2].Yaw_I_mult}
		};

	int8_t 	L_gain[FLIGHT_MODES][NUMBEROFAXIS] = 
    7fe8:	80 91 e7 05 	lds	r24, 0x05E7
    7fec:	89 87       	std	Y+9, r24	; 0x09
    7fee:	80 91 ed 05 	lds	r24, 0x05ED
    7ff2:	8a 87       	std	Y+10, r24	; 0x0a
		{
			{Config.FlightMode[P1].A_Roll_P_mult, Config.FlightMode[P1].A_Pitch_P_mult, Config.FlightMode[P1].A_Zed_P_mult},
    7ff4:	20 91 f4 05 	lds	r18, 0x05F4
    7ff8:	29 a7       	std	Y+41, r18	; 0x29
		{
			{Config.FlightMode[P1].Roll_I_mult, Config.FlightMode[P1].Pitch_I_mult, Config.FlightMode[P1].Yaw_I_mult},
			{Config.FlightMode[P2].Roll_I_mult, Config.FlightMode[P2].Pitch_I_mult, Config.FlightMode[P2].Yaw_I_mult}
		};

	int8_t 	L_gain[FLIGHT_MODES][NUMBEROFAXIS] = 
    7ffa:	2b 87       	std	Y+11, r18	; 0x0b
    7ffc:	80 91 f9 05 	lds	r24, 0x05F9
    8000:	8c 87       	std	Y+12, r24	; 0x0c
    8002:	80 91 ff 05 	lds	r24, 0x05FF
    8006:	8d 87       	std	Y+13, r24	; 0x0d
		{
			{Config.FlightMode[P1].A_Roll_P_mult, Config.FlightMode[P1].A_Pitch_P_mult, Config.FlightMode[P1].A_Zed_P_mult},
			{Config.FlightMode[P2].A_Roll_P_mult, Config.FlightMode[P2].A_Pitch_P_mult, Config.FlightMode[P2].A_Zed_P_mult}
    8008:	30 91 06 06 	lds	r19, 0x0606
    800c:	3a a7       	std	Y+42, r19	; 0x2a
		{
			{Config.FlightMode[P1].Roll_I_mult, Config.FlightMode[P1].Pitch_I_mult, Config.FlightMode[P1].Yaw_I_mult},
			{Config.FlightMode[P2].Roll_I_mult, Config.FlightMode[P2].Pitch_I_mult, Config.FlightMode[P2].Yaw_I_mult}
		};

	int8_t 	L_gain[FLIGHT_MODES][NUMBEROFAXIS] = 
    800e:	3e 87       	std	Y+14, r19	; 0x0e
			{Config.FlightMode[P1].A_Roll_P_mult, Config.FlightMode[P1].A_Pitch_P_mult, Config.FlightMode[P1].A_Zed_P_mult},
			{Config.FlightMode[P2].A_Roll_P_mult, Config.FlightMode[P2].A_Pitch_P_mult, Config.FlightMode[P2].A_Zed_P_mult}
		};

	// Only for roll and pitch acc trim
	int16_t	L_trim[FLIGHT_MODES][2] =
    8010:	80 91 b0 07 	lds	r24, 0x07B0
    8014:	90 91 b1 07 	lds	r25, 0x07B1
    8018:	9a 83       	std	Y+2, r25	; 0x02
    801a:	89 83       	std	Y+1, r24	; 0x01
    801c:	80 91 b4 07 	lds	r24, 0x07B4
    8020:	90 91 b5 07 	lds	r25, 0x07B5
    8024:	9c 83       	std	Y+4, r25	; 0x04
    8026:	8b 83       	std	Y+3, r24	; 0x03
    8028:	80 91 b2 07 	lds	r24, 0x07B2
    802c:	90 91 b3 07 	lds	r25, 0x07B3
    8030:	9e 83       	std	Y+6, r25	; 0x06
    8032:	8d 83       	std	Y+5, r24	; 0x05
    8034:	80 91 b6 07 	lds	r24, 0x07B6
    8038:	90 91 b7 07 	lds	r25, 0x07B7
    803c:	98 87       	std	Y+8, r25	; 0x08
    803e:	8f 83       	std	Y+7, r24	; 0x07
			{Config.Rolltrim[P1], Config.Pitchtrim[P1]},
			{Config.Rolltrim[P2], Config.Pitchtrim[P2]}
		};

	// Average accVert
	AvAccVert = (int16_t)(PID_AvgAccVert / LoopCount);
    8040:	20 91 18 05 	lds	r18, 0x0518
    8044:	30 e0       	ldi	r19, 0x00	; 0
    8046:	40 e0       	ldi	r20, 0x00	; 0
    8048:	50 e0       	ldi	r21, 0x00	; 0
    804a:	60 91 36 05 	lds	r22, 0x0536
    804e:	70 91 37 05 	lds	r23, 0x0537
    8052:	80 91 38 05 	lds	r24, 0x0538
    8056:	90 91 39 05 	lds	r25, 0x0539
    805a:	0e 94 a2 47 	call	0x8f44	; 0x8f44 <__divmodsi4>
    805e:	29 96       	adiw	r28, 0x09	; 9
    8060:	2c af       	std	Y+60, r18	; 0x3c
    8062:	3d af       	std	Y+61, r19	; 0x3d
    8064:	4e af       	std	Y+62, r20	; 0x3e
    8066:	5f af       	std	Y+63, r21	; 0x3f
    8068:	29 97       	sbiw	r28, 0x09	; 9
	PID_AvgAccVert = 0;							// Reset average
    806a:	10 92 36 05 	sts	0x0536, r1
    806e:	10 92 37 05 	sts	0x0537, r1
    8072:	10 92 38 05 	sts	0x0538, r1
    8076:	10 92 39 05 	sts	0x0539, r1
		// Add in gyro Yaw trim
		//************************************************************

		if (axis == YAW)
		{
			PID_gyro_temp1 = (int32_t)(Config.FlightMode[P1].Yaw_trim << 6);
    807a:	80 91 f3 05 	lds	r24, 0x05F3
    807e:	40 e4       	ldi	r20, 0x40	; 64
    8080:	84 02       	muls	r24, r20
    8082:	c0 01       	movw	r24, r0
    8084:	11 24       	eor	r1, r1
    8086:	9c 01       	movw	r18, r24
    8088:	44 27       	eor	r20, r20
    808a:	37 fd       	sbrc	r19, 7
    808c:	40 95       	com	r20
    808e:	54 2f       	mov	r21, r20
    8090:	29 af       	std	Y+57, r18	; 0x39
    8092:	3a af       	std	Y+58, r19	; 0x3a
    8094:	4b af       	std	Y+59, r20	; 0x3b
    8096:	5c af       	std	Y+60, r21	; 0x3c
			PID_gyro_temp2 = (int32_t)(Config.FlightMode[P2].Yaw_trim << 6);
    8098:	80 91 05 06 	lds	r24, 0x0605
    809c:	30 e4       	ldi	r19, 0x40	; 64
    809e:	83 02       	muls	r24, r19
    80a0:	c0 01       	movw	r24, r0
    80a2:	11 24       	eor	r1, r1
    80a4:	9c 01       	movw	r18, r24
    80a6:	44 27       	eor	r20, r20
    80a8:	37 fd       	sbrc	r19, 7
    80aa:	40 95       	com	r20
    80ac:	54 2f       	mov	r21, r20
    80ae:	21 96       	adiw	r28, 0x01	; 1
    80b0:	2c af       	std	Y+60, r18	; 0x3c
    80b2:	3d af       	std	Y+61, r19	; 0x3d
    80b4:	4e af       	std	Y+62, r20	; 0x3e
    80b6:	5f af       	std	Y+63, r21	; 0x3f
    80b8:	21 97       	sbiw	r28, 0x01	; 1
    80ba:	ef e6       	ldi	r30, 0x6F	; 111
    80bc:	f5 e0       	ldi	r31, 0x05	; 5
    80be:	f8 af       	std	Y+56, r31	; 0x38
    80c0:	ef ab       	std	Y+55, r30	; 0x37
    80c2:	fe 01       	movw	r30, r28
    80c4:	75 96       	adiw	r30, 0x15	; 21
    80c6:	fe ab       	std	Y+54, r31	; 0x36
    80c8:	ed ab       	std	Y+53, r30	; 0x35
    80ca:	ed ee       	ldi	r30, 0xED	; 237
    80cc:	f7 e0       	ldi	r31, 0x07	; 7
    80ce:	fe a3       	std	Y+38, r31	; 0x26
    80d0:	ed a3       	std	Y+37, r30	; 0x25
    80d2:	fe 01       	movw	r30, r28
    80d4:	3f 96       	adiw	r30, 0x0f	; 15
    80d6:	fc ab       	std	Y+52, r31	; 0x34
    80d8:	eb ab       	std	Y+51, r30	; 0x33
    80da:	39 96       	adiw	r30, 0x09	; 9
    80dc:	fa ab       	std	Y+50, r31	; 0x32
    80de:	e9 ab       	std	Y+49, r30	; 0x31
    80e0:	36 97       	sbiw	r30, 0x06	; 6
    80e2:	f8 ab       	std	Y+48, r31	; 0x30
    80e4:	ef a7       	std	Y+47, r30	; 0x2f
    80e6:	e7 e0       	ldi	r30, 0x07	; 7
    80e8:	f6 e0       	ldi	r31, 0x06	; 6
    80ea:	fe a7       	std	Y+46, r31	; 0x2e
    80ec:	ed a7       	std	Y+45, r30	; 0x2d
    80ee:	e1 e1       	ldi	r30, 0x11	; 17
    80f0:	f8 e0       	ldi	r31, 0x08	; 8
    80f2:	fc a3       	std	Y+36, r31	; 0x24
    80f4:	eb a3       	std	Y+35, r30	; 0x23
    80f6:	e1 e9       	ldi	r30, 0x91	; 145
    80f8:	f5 e0       	ldi	r31, 0x05	; 5
    80fa:	f8 a7       	std	Y+40, r31	; 0x28
    80fc:	ef a3       	std	Y+39, r30	; 0x27
    80fe:	fe 01       	movw	r30, r28
    8100:	31 96       	adiw	r30, 0x01	; 1
    8102:	fa a3       	std	Y+34, r31	; 0x22
    8104:	e9 a3       	std	Y+33, r30	; 0x21
    8106:	ed e1       	ldi	r30, 0x1D	; 29
    8108:	f8 e0       	ldi	r31, 0x08	; 8
    810a:	f8 a3       	std	Y+32, r31	; 0x20
    810c:	ef 8f       	std	Y+31, r30	; 0x1f
    810e:	1e 01       	movw	r2, r28
    8110:	fc e0       	ldi	r31, 0x0C	; 12
    8112:	2f 0e       	add	r2, r31
    8114:	31 1c       	adc	r3, r1
    8116:	e3 e1       	ldi	r30, 0x13	; 19
    8118:	f6 e0       	ldi	r31, 0x06	; 6
    811a:	fc a7       	std	Y+44, r31	; 0x2c
    811c:	eb a7       	std	Y+43, r30	; 0x2b
    811e:	2b 96       	adiw	r28, 0x0b	; 11
    8120:	1f ae       	std	Y+63, r1	; 0x3f
    8122:	1e ae       	std	Y+62, r1	; 0x3e
    8124:	2b 97       	sbiw	r28, 0x0b	; 11
		}
		// Reset PID_gyro variables to that data does not accumulate cross-axis
		else
		{
			PID_gyro_temp1 = 0;
			PID_gyro_temp2 = 0;
    8126:	81 2c       	mov	r8, r1
    8128:	91 2c       	mov	r9, r1
    812a:	54 01       	movw	r10, r8
			PID_gyro_temp2 = (int32_t)(Config.FlightMode[P2].Yaw_trim << 6);
		}
		// Reset PID_gyro variables to that data does not accumulate cross-axis
		else
		{
			PID_gyro_temp1 = 0;
    812c:	80 e0       	ldi	r24, 0x00	; 0
    812e:	90 e0       	ldi	r25, 0x00	; 0
    8130:	dc 01       	movw	r26, r24
		//************************************************************
		// Calculate PID gains
		//************************************************************

		// Gyro P-term													// Profile P1
		PID_gyro_temp1 += gyroADC[axis] * P_gain[P1][axis];				// Multiply P-term (Max gain of 127)
    8132:	ef a9       	ldd	r30, Y+55	; 0x37
    8134:	f8 ad       	ldd	r31, Y+56	; 0x38
    8136:	01 91       	ld	r16, Z+
    8138:	11 91       	ld	r17, Z+
    813a:	f8 af       	std	Y+56, r31	; 0x38
    813c:	ef ab       	std	Y+55, r30	; 0x37
    813e:	ed a9       	ldd	r30, Y+53	; 0x35
    8140:	fe a9       	ldd	r31, Y+54	; 0x36
    8142:	41 91       	ld	r20, Z+
    8144:	fe ab       	std	Y+54, r31	; 0x36
    8146:	ed ab       	std	Y+53, r30	; 0x35
    8148:	40 03       	mulsu	r20, r16
    814a:	90 01       	movw	r18, r0
    814c:	41 9f       	mul	r20, r17
    814e:	30 0d       	add	r19, r0
    8150:	11 24       	eor	r1, r1
    8152:	44 27       	eor	r20, r20
    8154:	37 fd       	sbrc	r19, 7
    8156:	40 95       	com	r20
    8158:	54 2f       	mov	r21, r20
    815a:	28 0f       	add	r18, r24
    815c:	39 1f       	adc	r19, r25
    815e:	4a 1f       	adc	r20, r26
    8160:	5b 1f       	adc	r21, r27
		PID_gyro_temp1 = PID_gyro_temp1 * (int32_t)3;					// Multiply by 3
    8162:	a3 e0       	ldi	r26, 0x03	; 3
    8164:	b0 e0       	ldi	r27, 0x00	; 0
    8166:	0e 94 e5 47 	call	0x8fca	; 0x8fca <__muluhisi3>
    816a:	25 96       	adiw	r28, 0x05	; 5
    816c:	6c af       	std	Y+60, r22	; 0x3c
    816e:	7d af       	std	Y+61, r23	; 0x3d
    8170:	8e af       	std	Y+62, r24	; 0x3e
    8172:	9f af       	std	Y+63, r25	; 0x3f
    8174:	25 97       	sbiw	r28, 0x05	; 5

		// Gyro I-term
		PID_Gyro_I_actual1 = IntegralGyro[P1][axis] * I_gain[P1][axis];	// Multiply I-term (Max gain of 127)
    8176:	eb a9       	ldd	r30, Y+51	; 0x33
    8178:	fc a9       	ldd	r31, Y+52	; 0x34
    817a:	a1 91       	ld	r26, Z+
    817c:	fc ab       	std	Y+52, r31	; 0x34
    817e:	eb ab       	std	Y+51, r30	; 0x33
    8180:	ed a1       	ldd	r30, Y+37	; 0x25
    8182:	fe a1       	ldd	r31, Y+38	; 0x26
    8184:	20 81       	ld	r18, Z
    8186:	31 81       	ldd	r19, Z+1	; 0x01
    8188:	42 81       	ldd	r20, Z+2	; 0x02
    818a:	53 81       	ldd	r21, Z+3	; 0x03
    818c:	bb 27       	eor	r27, r27
    818e:	a7 fd       	sbrc	r26, 7
    8190:	b0 95       	com	r27
    8192:	0e 94 f0 47 	call	0x8fe0	; 0x8fe0 <__mulshisi3>
    8196:	2b 01       	movw	r4, r22
    8198:	3c 01       	movw	r6, r24
		PID_Gyro_I_actual1 = PID_Gyro_I_actual1 >> 5;					// Divide by 32
    819a:	85 e0       	ldi	r24, 0x05	; 5
    819c:	75 94       	asr	r7
    819e:	67 94       	ror	r6
    81a0:	57 94       	ror	r5
    81a2:	47 94       	ror	r4
    81a4:	8a 95       	dec	r24
    81a6:	d1 f7       	brne	.-12     	; 0x819c <Calculate_PID+0x232>

		// Gyro P-term
		PID_gyro_temp2 += gyroADC[axis] * P_gain[P2][axis];				// Profile P2
    81a8:	e9 a9       	ldd	r30, Y+49	; 0x31
    81aa:	fa a9       	ldd	r31, Y+50	; 0x32
    81ac:	41 91       	ld	r20, Z+
    81ae:	fa ab       	std	Y+50, r31	; 0x32
    81b0:	e9 ab       	std	Y+49, r30	; 0x31
    81b2:	40 03       	mulsu	r20, r16
    81b4:	90 01       	movw	r18, r0
    81b6:	41 9f       	mul	r20, r17
    81b8:	30 0d       	add	r19, r0
    81ba:	11 24       	eor	r1, r1
    81bc:	44 27       	eor	r20, r20
    81be:	37 fd       	sbrc	r19, 7
    81c0:	40 95       	com	r20
    81c2:	54 2f       	mov	r21, r20
    81c4:	28 0d       	add	r18, r8
    81c6:	39 1d       	adc	r19, r9
    81c8:	4a 1d       	adc	r20, r10
    81ca:	5b 1d       	adc	r21, r11
		PID_gyro_temp2 = PID_gyro_temp2 * (int32_t)3;
    81cc:	a3 e0       	ldi	r26, 0x03	; 3
    81ce:	b0 e0       	ldi	r27, 0x00	; 0
    81d0:	0e 94 e5 47 	call	0x8fca	; 0x8fca <__muluhisi3>
    81d4:	4b 01       	movw	r8, r22
    81d6:	5c 01       	movw	r10, r24

		// Gyro I-term
		PID_Gyro_I_actual2 = IntegralGyro[P2][axis] * I_gain[P2][axis];
    81d8:	ef a5       	ldd	r30, Y+47	; 0x2f
    81da:	f8 a9       	ldd	r31, Y+48	; 0x30
    81dc:	a1 91       	ld	r26, Z+
    81de:	f8 ab       	std	Y+48, r31	; 0x30
    81e0:	ef a7       	std	Y+47, r30	; 0x2f
    81e2:	ed a1       	ldd	r30, Y+37	; 0x25
    81e4:	fe a1       	ldd	r31, Y+38	; 0x26
    81e6:	24 85       	ldd	r18, Z+12	; 0x0c
    81e8:	35 85       	ldd	r19, Z+13	; 0x0d
    81ea:	46 85       	ldd	r20, Z+14	; 0x0e
    81ec:	57 85       	ldd	r21, Z+15	; 0x0f
    81ee:	bb 27       	eor	r27, r27
    81f0:	a7 fd       	sbrc	r26, 7
    81f2:	b0 95       	com	r27
    81f4:	0e 94 f0 47 	call	0x8fe0	; 0x8fe0 <__mulshisi3>
		PID_Gyro_I_actual2 = PID_Gyro_I_actual2 >> 5;
    81f8:	25 e0       	ldi	r18, 0x05	; 5
    81fa:	95 95       	asr	r25
    81fc:	87 95       	ror	r24
    81fe:	77 95       	ror	r23
    8200:	67 95       	ror	r22
    8202:	2a 95       	dec	r18
    8204:	d1 f7       	brne	.-12     	; 0x81fa <Calculate_PID+0x290>
		//************************************************************
		// I-term output limits
		//************************************************************

		// P1 limits
		if (PID_Gyro_I_actual1 > Config.Raw_I_Limits[P1][axis]) 
    8206:	ed a5       	ldd	r30, Y+45	; 0x2d
    8208:	fe a5       	ldd	r31, Y+46	; 0x2e
    820a:	c1 90       	ld	r12, Z+
    820c:	d1 90       	ld	r13, Z+
    820e:	e1 90       	ld	r14, Z+
    8210:	f1 90       	ld	r15, Z+
    8212:	fe a7       	std	Y+46, r31	; 0x2e
    8214:	ed a7       	std	Y+45, r30	; 0x2d
    8216:	c4 14       	cp	r12, r4
    8218:	d5 04       	cpc	r13, r5
    821a:	e6 04       	cpc	r14, r6
    821c:	f7 04       	cpc	r15, r7
    821e:	84 f0       	brlt	.+32     	; 0x8240 <Calculate_PID+0x2d6>
		{
			PID_Gyro_I_actual1 = Config.Raw_I_Limits[P1][axis];
		}
		else if (PID_Gyro_I_actual1 < -Config.Raw_I_Limits[P1][axis]) 
    8220:	00 27       	eor	r16, r16
    8222:	11 27       	eor	r17, r17
    8224:	98 01       	movw	r18, r16
    8226:	0c 19       	sub	r16, r12
    8228:	1d 09       	sbc	r17, r13
    822a:	2e 09       	sbc	r18, r14
    822c:	3f 09       	sbc	r19, r15
    822e:	73 01       	movw	r14, r6
    8230:	62 01       	movw	r12, r4
    8232:	40 16       	cp	r4, r16
    8234:	51 06       	cpc	r5, r17
    8236:	62 06       	cpc	r6, r18
    8238:	73 06       	cpc	r7, r19
    823a:	14 f4       	brge	.+4      	; 0x8240 <Calculate_PID+0x2d6>
    823c:	68 01       	movw	r12, r16
    823e:	79 01       	movw	r14, r18
		{
			PID_Gyro_I_actual1 = -Config.Raw_I_Limits[P1][axis];	
		}

		// P2 limits
		if (PID_Gyro_I_actual2 > Config.Raw_I_Limits[P2][axis]) 
    8240:	eb a5       	ldd	r30, Y+43	; 0x2b
    8242:	fc a5       	ldd	r31, Y+44	; 0x2c
    8244:	21 91       	ld	r18, Z+
    8246:	31 91       	ld	r19, Z+
    8248:	41 91       	ld	r20, Z+
    824a:	51 91       	ld	r21, Z+
    824c:	fc a7       	std	Y+44, r31	; 0x2c
    824e:	eb a7       	std	Y+43, r30	; 0x2b
    8250:	2b 8f       	std	Y+27, r18	; 0x1b
    8252:	3c 8f       	std	Y+28, r19	; 0x1c
    8254:	4d 8f       	std	Y+29, r20	; 0x1d
    8256:	5e 8f       	std	Y+30, r21	; 0x1e
    8258:	26 17       	cp	r18, r22
    825a:	37 07       	cpc	r19, r23
    825c:	48 07       	cpc	r20, r24
    825e:	59 07       	cpc	r21, r25
    8260:	b4 f0       	brlt	.+44     	; 0x828e <Calculate_PID+0x324>
		{
			PID_Gyro_I_actual2 = Config.Raw_I_Limits[P2][axis];
		}
		else if (PID_Gyro_I_actual2 < -Config.Raw_I_Limits[P2][axis]) 
    8262:	89 01       	movw	r16, r18
    8264:	9a 01       	movw	r18, r20
    8266:	30 95       	com	r19
    8268:	20 95       	com	r18
    826a:	10 95       	com	r17
    826c:	01 95       	neg	r16
    826e:	1f 4f       	sbci	r17, 0xFF	; 255
    8270:	2f 4f       	sbci	r18, 0xFF	; 255
    8272:	3f 4f       	sbci	r19, 0xFF	; 255
    8274:	6b 8f       	std	Y+27, r22	; 0x1b
    8276:	7c 8f       	std	Y+28, r23	; 0x1c
    8278:	8d 8f       	std	Y+29, r24	; 0x1d
    827a:	9e 8f       	std	Y+30, r25	; 0x1e
    827c:	60 17       	cp	r22, r16
    827e:	71 07       	cpc	r23, r17
    8280:	82 07       	cpc	r24, r18
    8282:	93 07       	cpc	r25, r19
    8284:	24 f4       	brge	.+8      	; 0x828e <Calculate_PID+0x324>
    8286:	0b 8f       	std	Y+27, r16	; 0x1b
    8288:	1c 8f       	std	Y+28, r17	; 0x1c
    828a:	2d 8f       	std	Y+29, r18	; 0x1d
    828c:	3e 8f       	std	Y+30, r19	; 0x1e

		//************************************************************
		// Sum Gyro P, I and D terms and rescale
		//************************************************************

		PID_Gyros[P1][axis] = (int16_t)((PID_gyro_temp1 + PID_Gyro_I_actual1) >> PID_SCALE);  // PID_SCALE was 6, now 5
    828e:	25 96       	adiw	r28, 0x05	; 5
    8290:	4c ac       	ldd	r4, Y+60	; 0x3c
    8292:	5d ac       	ldd	r5, Y+61	; 0x3d
    8294:	6e ac       	ldd	r6, Y+62	; 0x3e
    8296:	7f ac       	ldd	r7, Y+63	; 0x3f
    8298:	25 97       	sbiw	r28, 0x05	; 5
    829a:	4c 0c       	add	r4, r12
    829c:	5d 1c       	adc	r5, r13
    829e:	6e 1c       	adc	r6, r14
    82a0:	7f 1c       	adc	r7, r15
    82a2:	a6 e0       	ldi	r26, 0x06	; 6
    82a4:	75 94       	asr	r7
    82a6:	67 94       	ror	r6
    82a8:	57 94       	ror	r5
    82aa:	47 94       	ror	r4
    82ac:	aa 95       	dec	r26
    82ae:	d1 f7       	brne	.-12     	; 0x82a4 <Calculate_PID+0x33a>
    82b0:	eb a1       	ldd	r30, Y+35	; 0x23
    82b2:	fc a1       	ldd	r31, Y+36	; 0x24
    82b4:	51 82       	std	Z+1, r5	; 0x01
    82b6:	40 82       	st	Z, r4
		PID_Gyros[P2][axis] = (int16_t)((PID_gyro_temp2 + PID_Gyro_I_actual2) >> PID_SCALE);
    82b8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    82ba:	9c 8d       	ldd	r25, Y+28	; 0x1c
    82bc:	ad 8d       	ldd	r26, Y+29	; 0x1d
    82be:	be 8d       	ldd	r27, Y+30	; 0x1e
    82c0:	88 0d       	add	r24, r8
    82c2:	99 1d       	adc	r25, r9
    82c4:	aa 1d       	adc	r26, r10
    82c6:	bb 1d       	adc	r27, r11
    82c8:	16 e0       	ldi	r17, 0x06	; 6
    82ca:	b5 95       	asr	r27
    82cc:	a7 95       	ror	r26
    82ce:	97 95       	ror	r25
    82d0:	87 95       	ror	r24
    82d2:	1a 95       	dec	r17
    82d4:	d1 f7       	brne	.-12     	; 0x82ca <Calculate_PID+0x360>
    82d6:	97 83       	std	Z+7, r25	; 0x07
    82d8:	86 83       	std	Z+6, r24	; 0x06

		//************************************************************
		// Calculate error from angle data and trim (roll and pitch only)
		//************************************************************

		if (axis < YAW)
    82da:	2a 96       	adiw	r28, 0x0a	; 10
    82dc:	ff ad       	ldd	r31, Y+63	; 0x3f
    82de:	2a 97       	sbiw	r28, 0x0a	; 10
    82e0:	f2 30       	cpi	r31, 0x02	; 2
    82e2:	e9 f1       	breq	.+122    	; 0x835e <Calculate_PID+0x3f4>
		{
			// Do for P1 and P2
			for (i = P1; i <= P2; i++)
			{
				PID_acc_temp1 = angle[axis] - L_trim[i][axis];				// Offset angle with trim
    82e4:	ef a1       	ldd	r30, Y+39	; 0x27
    82e6:	f8 a5       	ldd	r31, Y+40	; 0x28
    82e8:	40 81       	ld	r20, Z
    82ea:	51 81       	ldd	r21, Z+1	; 0x01
    82ec:	e9 a1       	ldd	r30, Y+33	; 0x21
    82ee:	fa a1       	ldd	r31, Y+34	; 0x22
    82f0:	80 81       	ld	r24, Z
    82f2:	91 81       	ldd	r25, Z+1	; 0x01
    82f4:	9a 01       	movw	r18, r20
    82f6:	28 1b       	sub	r18, r24
    82f8:	39 0b       	sbc	r19, r25
    82fa:	a9 e0       	ldi	r26, 0x09	; 9
    82fc:	b0 e0       	ldi	r27, 0x00	; 0
    82fe:	ac 0f       	add	r26, r28
    8300:	bd 1f       	adc	r27, r29
    8302:	2b 96       	adiw	r28, 0x0b	; 11
    8304:	ee ad       	ldd	r30, Y+62	; 0x3e
    8306:	ff ad       	ldd	r31, Y+63	; 0x3f
    8308:	2b 97       	sbiw	r28, 0x0b	; 11
    830a:	ae 0f       	add	r26, r30
    830c:	bf 1f       	adc	r27, r31
				PID_acc_temp1 *= L_gain[i][axis];							// P-term of accelerometer (Max gain of 127)
    830e:	ac 91       	ld	r26, X
    8310:	bb 27       	eor	r27, r27
    8312:	a7 fd       	sbrc	r26, 7
    8314:	b0 95       	com	r27
    8316:	0e 94 c7 47 	call	0x8f8e	; 0x8f8e <__mulhisi3>
				PID_ACCs[i][axis] = (int16_t)(PID_acc_temp1 >> 8);			// Reduce and convert to integer
    831a:	bb 27       	eor	r27, r27
    831c:	97 fd       	sbrc	r25, 7
    831e:	ba 95       	dec	r27
    8320:	a9 2f       	mov	r26, r25
    8322:	98 2f       	mov	r25, r24
    8324:	87 2f       	mov	r24, r23
    8326:	ef 8d       	ldd	r30, Y+31	; 0x1f
    8328:	f8 a1       	ldd	r31, Y+32	; 0x20
    832a:	91 83       	std	Z+1, r25	; 0x01
    832c:	80 83       	st	Z, r24
		if (axis < YAW)
		{
			// Do for P1 and P2
			for (i = P1; i <= P2; i++)
			{
				PID_acc_temp1 = angle[axis] - L_trim[i][axis];				// Offset angle with trim
    832e:	e9 a1       	ldd	r30, Y+33	; 0x21
    8330:	fa a1       	ldd	r31, Y+34	; 0x22
    8332:	84 81       	ldd	r24, Z+4	; 0x04
    8334:	95 81       	ldd	r25, Z+5	; 0x05
    8336:	9a 01       	movw	r18, r20
    8338:	28 1b       	sub	r18, r24
    833a:	39 0b       	sbc	r19, r25
				PID_acc_temp1 *= L_gain[i][axis];							// P-term of accelerometer (Max gain of 127)
    833c:	f1 01       	movw	r30, r2
    833e:	a0 81       	ld	r26, Z
    8340:	bb 27       	eor	r27, r27
    8342:	a7 fd       	sbrc	r26, 7
    8344:	b0 95       	com	r27
    8346:	0e 94 c7 47 	call	0x8f8e	; 0x8f8e <__mulhisi3>
				PID_ACCs[i][axis] = (int16_t)(PID_acc_temp1 >> 8);			// Reduce and convert to integer
    834a:	bb 27       	eor	r27, r27
    834c:	97 fd       	sbrc	r25, 7
    834e:	ba 95       	dec	r27
    8350:	a9 2f       	mov	r26, r25
    8352:	98 2f       	mov	r25, r24
    8354:	87 2f       	mov	r24, r23
    8356:	ef 8d       	ldd	r30, Y+31	; 0x1f
    8358:	f8 a1       	ldd	r31, Y+32	; 0x20
    835a:	97 83       	std	Z+7, r25	; 0x07
    835c:	86 83       	std	Z+6, r24	; 0x06
	PID_AvgAccVert = 0;							// Reset average

	//************************************************************
	// PID loop
	//************************************************************
	for (axis = 0; axis <= YAW; axis ++)
    835e:	2b 96       	adiw	r28, 0x0b	; 11
    8360:	ee ad       	ldd	r30, Y+62	; 0x3e
    8362:	ff ad       	ldd	r31, Y+63	; 0x3f
    8364:	2b 97       	sbiw	r28, 0x0b	; 11
    8366:	32 97       	sbiw	r30, 0x02	; 2
    8368:	e1 f1       	breq	.+120    	; 0x83e2 <Calculate_PID+0x478>
	{
		//************************************************************
		// Add in gyro Yaw trim
		//************************************************************

		if (axis == YAW)
    836a:	2a 96       	adiw	r28, 0x0a	; 10
    836c:	ff ad       	ldd	r31, Y+63	; 0x3f
    836e:	2a 97       	sbiw	r28, 0x0a	; 10
    8370:	f1 30       	cpi	r31, 0x01	; 1
    8372:	39 f0       	breq	.+14     	; 0x8382 <Calculate_PID+0x418>
		}
		// Reset PID_gyro variables to that data does not accumulate cross-axis
		else
		{
			PID_gyro_temp1 = 0;
			PID_gyro_temp2 = 0;
    8374:	81 2c       	mov	r8, r1
    8376:	91 2c       	mov	r9, r1
    8378:	54 01       	movw	r10, r8
			PID_gyro_temp2 = (int32_t)(Config.FlightMode[P2].Yaw_trim << 6);
		}
		// Reset PID_gyro variables to that data does not accumulate cross-axis
		else
		{
			PID_gyro_temp1 = 0;
    837a:	80 e0       	ldi	r24, 0x00	; 0
    837c:	90 e0       	ldi	r25, 0x00	; 0
    837e:	dc 01       	movw	r26, r24
    8380:	0a c0       	rjmp	.+20     	; 0x8396 <Calculate_PID+0x42c>
		//************************************************************

		if (axis == YAW)
		{
			PID_gyro_temp1 = (int32_t)(Config.FlightMode[P1].Yaw_trim << 6);
			PID_gyro_temp2 = (int32_t)(Config.FlightMode[P2].Yaw_trim << 6);
    8382:	21 96       	adiw	r28, 0x01	; 1
    8384:	8c ac       	ldd	r8, Y+60	; 0x3c
    8386:	9d ac       	ldd	r9, Y+61	; 0x3d
    8388:	ae ac       	ldd	r10, Y+62	; 0x3e
    838a:	bf ac       	ldd	r11, Y+63	; 0x3f
    838c:	21 97       	sbiw	r28, 0x01	; 1
		// Add in gyro Yaw trim
		//************************************************************

		if (axis == YAW)
		{
			PID_gyro_temp1 = (int32_t)(Config.FlightMode[P1].Yaw_trim << 6);
    838e:	89 ad       	ldd	r24, Y+57	; 0x39
    8390:	9a ad       	ldd	r25, Y+58	; 0x3a
    8392:	ab ad       	ldd	r26, Y+59	; 0x3b
    8394:	bc ad       	ldd	r27, Y+60	; 0x3c
    8396:	2b 96       	adiw	r28, 0x0b	; 11
    8398:	ee ad       	ldd	r30, Y+62	; 0x3e
    839a:	ff ad       	ldd	r31, Y+63	; 0x3f
    839c:	2b 97       	sbiw	r28, 0x0b	; 11
    839e:	31 96       	adiw	r30, 0x01	; 1
    83a0:	2b 96       	adiw	r28, 0x0b	; 11
    83a2:	ff af       	std	Y+63, r31	; 0x3f
    83a4:	ee af       	std	Y+62, r30	; 0x3e
    83a6:	2b 97       	sbiw	r28, 0x0b	; 11
    83a8:	ed a1       	ldd	r30, Y+37	; 0x25
    83aa:	fe a1       	ldd	r31, Y+38	; 0x26
    83ac:	34 96       	adiw	r30, 0x04	; 4
    83ae:	fe a3       	std	Y+38, r31	; 0x26
    83b0:	ed a3       	std	Y+37, r30	; 0x25
    83b2:	eb a1       	ldd	r30, Y+35	; 0x23
    83b4:	fc a1       	ldd	r31, Y+36	; 0x24
    83b6:	32 96       	adiw	r30, 0x02	; 2
    83b8:	fc a3       	std	Y+36, r31	; 0x24
    83ba:	eb a3       	std	Y+35, r30	; 0x23
    83bc:	ef a1       	ldd	r30, Y+39	; 0x27
    83be:	f8 a5       	ldd	r31, Y+40	; 0x28
    83c0:	32 96       	adiw	r30, 0x02	; 2
    83c2:	f8 a7       	std	Y+40, r31	; 0x28
    83c4:	ef a3       	std	Y+39, r30	; 0x27
    83c6:	e9 a1       	ldd	r30, Y+33	; 0x21
    83c8:	fa a1       	ldd	r31, Y+34	; 0x22
    83ca:	32 96       	adiw	r30, 0x02	; 2
    83cc:	fa a3       	std	Y+34, r31	; 0x22
    83ce:	e9 a3       	std	Y+33, r30	; 0x21
    83d0:	ef 8d       	ldd	r30, Y+31	; 0x1f
    83d2:	f8 a1       	ldd	r31, Y+32	; 0x20
    83d4:	32 96       	adiw	r30, 0x02	; 2
    83d6:	f8 a3       	std	Y+32, r31	; 0x20
    83d8:	ef 8f       	std	Y+31, r30	; 0x1f
    83da:	ff ef       	ldi	r31, 0xFF	; 255
    83dc:	2f 1a       	sub	r2, r31
    83de:	3f 0a       	sbc	r3, r31
    83e0:	a8 ce       	rjmp	.-688    	; 0x8132 <Calculate_PID+0x1c8>
	//************************************************************

	// Do for P1 and P2
	for (i = P1; i <= P2; i++)
	{
		PID_acc_temp1 = -AvAccVert;				// Get and copy Z-acc value. Negate to oppose G
    83e2:	27 96       	adiw	r28, 0x07	; 7
    83e4:	ce ac       	ldd	r12, Y+62	; 0x3e
    83e6:	df ac       	ldd	r13, Y+63	; 0x3f
    83e8:	27 97       	sbiw	r28, 0x07	; 7
    83ea:	d1 94       	neg	r13
    83ec:	c1 94       	neg	r12
    83ee:	d1 08       	sbc	r13, r1

		PID_acc_temp1 *= L_gain[i][YAW];		// Multiply P-term (Max gain of 127)
    83f0:	96 01       	movw	r18, r12
    83f2:	f9 a5       	ldd	r31, Y+41	; 0x29
    83f4:	af 2f       	mov	r26, r31
    83f6:	bb 27       	eor	r27, r27
    83f8:	a7 fd       	sbrc	r26, 7
    83fa:	b0 95       	com	r27
    83fc:	0e 94 c7 47 	call	0x8f8e	; 0x8f8e <__mulhisi3>

		PID_acc_temp1 = PID_acc_temp1 >> 4;		// Moderate Z-acc to reasonable values
    8400:	44 e0       	ldi	r20, 0x04	; 4
    8402:	95 95       	asr	r25
    8404:	87 95       	ror	r24
    8406:	77 95       	ror	r23
    8408:	67 95       	ror	r22
    840a:	4a 95       	dec	r20
    840c:	d1 f7       	brne	.-12     	; 0x8402 <Calculate_PID+0x498>

		if (PID_acc_temp1 > MAX_ZGAIN)			// Limit to +/-MAX_ZGAIN
    840e:	65 3f       	cpi	r22, 0xF5	; 245
    8410:	21 e0       	ldi	r18, 0x01	; 1
    8412:	72 07       	cpc	r23, r18
    8414:	81 05       	cpc	r24, r1
    8416:	91 05       	cpc	r25, r1
    8418:	64 f4       	brge	.+24     	; 0x8432 <Calculate_PID+0x4c8>
		{
			PID_acc_temp1 = MAX_ZGAIN;
		}
		if (PID_acc_temp1 < -MAX_ZGAIN)
    841a:	6c 30       	cpi	r22, 0x0C	; 12
    841c:	3e ef       	ldi	r19, 0xFE	; 254
    841e:	73 07       	cpc	r23, r19
    8420:	3f ef       	ldi	r19, 0xFF	; 255
    8422:	83 07       	cpc	r24, r19
    8424:	93 07       	cpc	r25, r19
    8426:	4c f4       	brge	.+18     	; 0x843a <Calculate_PID+0x4d0>
		{
			PID_acc_temp1 = -MAX_ZGAIN;
    8428:	6c e0       	ldi	r22, 0x0C	; 12
    842a:	7e ef       	ldi	r23, 0xFE	; 254
    842c:	8f ef       	ldi	r24, 0xFF	; 255
    842e:	9f ef       	ldi	r25, 0xFF	; 255
    8430:	04 c0       	rjmp	.+8      	; 0x843a <Calculate_PID+0x4d0>

		PID_acc_temp1 = PID_acc_temp1 >> 4;		// Moderate Z-acc to reasonable values

		if (PID_acc_temp1 > MAX_ZGAIN)			// Limit to +/-MAX_ZGAIN
		{
			PID_acc_temp1 = MAX_ZGAIN;
    8432:	64 ef       	ldi	r22, 0xF4	; 244
    8434:	71 e0       	ldi	r23, 0x01	; 1
    8436:	80 e0       	ldi	r24, 0x00	; 0
    8438:	90 e0       	ldi	r25, 0x00	; 0
		if (PID_acc_temp1 < -MAX_ZGAIN)
		{
			PID_acc_temp1 = -MAX_ZGAIN;
		}

		PID_ACCs[i][YAW] = (int16_t)PID_acc_temp1; // Copy to global values
    843a:	70 93 22 08 	sts	0x0822, r23
    843e:	60 93 21 08 	sts	0x0821, r22
	// Do for P1 and P2
	for (i = P1; i <= P2; i++)
	{
		PID_acc_temp1 = -AvAccVert;				// Get and copy Z-acc value. Negate to oppose G

		PID_acc_temp1 *= L_gain[i][YAW];		// Multiply P-term (Max gain of 127)
    8442:	96 01       	movw	r18, r12
    8444:	4a a5       	ldd	r20, Y+42	; 0x2a
    8446:	a4 2f       	mov	r26, r20
    8448:	bb 27       	eor	r27, r27
    844a:	a7 fd       	sbrc	r26, 7
    844c:	b0 95       	com	r27
    844e:	0e 94 c7 47 	call	0x8f8e	; 0x8f8e <__mulhisi3>

		PID_acc_temp1 = PID_acc_temp1 >> 4;		// Moderate Z-acc to reasonable values
    8452:	34 e0       	ldi	r19, 0x04	; 4
    8454:	95 95       	asr	r25
    8456:	87 95       	ror	r24
    8458:	77 95       	ror	r23
    845a:	67 95       	ror	r22
    845c:	3a 95       	dec	r19
    845e:	d1 f7       	brne	.-12     	; 0x8454 <Calculate_PID+0x4ea>

		if (PID_acc_temp1 > MAX_ZGAIN)			// Limit to +/-MAX_ZGAIN
    8460:	65 3f       	cpi	r22, 0xF5	; 245
    8462:	51 e0       	ldi	r21, 0x01	; 1
    8464:	75 07       	cpc	r23, r21
    8466:	81 05       	cpc	r24, r1
    8468:	91 05       	cpc	r25, r1
    846a:	64 f4       	brge	.+24     	; 0x8484 <Calculate_PID+0x51a>
		{
			PID_acc_temp1 = MAX_ZGAIN;
		}
		if (PID_acc_temp1 < -MAX_ZGAIN)
    846c:	6c 30       	cpi	r22, 0x0C	; 12
    846e:	ae ef       	ldi	r26, 0xFE	; 254
    8470:	7a 07       	cpc	r23, r26
    8472:	af ef       	ldi	r26, 0xFF	; 255
    8474:	8a 07       	cpc	r24, r26
    8476:	9a 07       	cpc	r25, r26
    8478:	4c f4       	brge	.+18     	; 0x848c <Calculate_PID+0x522>
		{
			PID_acc_temp1 = -MAX_ZGAIN;
    847a:	6c e0       	ldi	r22, 0x0C	; 12
    847c:	7e ef       	ldi	r23, 0xFE	; 254
    847e:	8f ef       	ldi	r24, 0xFF	; 255
    8480:	9f ef       	ldi	r25, 0xFF	; 255
    8482:	04 c0       	rjmp	.+8      	; 0x848c <Calculate_PID+0x522>

		PID_acc_temp1 = PID_acc_temp1 >> 4;		// Moderate Z-acc to reasonable values

		if (PID_acc_temp1 > MAX_ZGAIN)			// Limit to +/-MAX_ZGAIN
		{
			PID_acc_temp1 = MAX_ZGAIN;
    8484:	64 ef       	ldi	r22, 0xF4	; 244
    8486:	71 e0       	ldi	r23, 0x01	; 1
    8488:	80 e0       	ldi	r24, 0x00	; 0
    848a:	90 e0       	ldi	r25, 0x00	; 0
		if (PID_acc_temp1 < -MAX_ZGAIN)
		{
			PID_acc_temp1 = -MAX_ZGAIN;
		}

		PID_ACCs[i][YAW] = (int16_t)PID_acc_temp1; // Copy to global values
    848c:	70 93 28 08 	sts	0x0828, r23
    8490:	60 93 27 08 	sts	0x0827, r22
	}
}
    8494:	c6 5b       	subi	r28, 0xB6	; 182
    8496:	df 4f       	sbci	r29, 0xFF	; 255
    8498:	0f b6       	in	r0, 0x3f	; 63
    849a:	f8 94       	cli
    849c:	de bf       	out	0x3e, r29	; 62
    849e:	0f be       	out	0x3f, r0	; 63
    84a0:	cd bf       	out	0x3d, r28	; 61
    84a2:	df 91       	pop	r29
    84a4:	cf 91       	pop	r28
    84a6:	1f 91       	pop	r17
    84a8:	0f 91       	pop	r16
    84aa:	ff 90       	pop	r15
    84ac:	ef 90       	pop	r14
    84ae:	df 90       	pop	r13
    84b0:	cf 90       	pop	r12
    84b2:	bf 90       	pop	r11
    84b4:	af 90       	pop	r10
    84b6:	9f 90       	pop	r9
    84b8:	8f 90       	pop	r8
    84ba:	7f 90       	pop	r7
    84bc:	6f 90       	pop	r6
    84be:	5f 90       	pop	r5
    84c0:	4f 90       	pop	r4
    84c2:	3f 90       	pop	r3
    84c4:	2f 90       	pop	r2
    84c6:	08 95       	ret

000084c8 <RxGetChannels>:
volatile int16_t MonopolarThrottle;				// Monopolar throttle

// Get raw flight channel data (~2500 to 5000) and remove zero offset
// Use channel mapping for reconfigurability
void RxGetChannels(void)
{
    84c8:	eb e8       	ldi	r30, 0x8B	; 139
    84ca:	f7 e0       	ldi	r31, 0x07	; 7
	static	int16_t	OldRxSum;			// Sum of all major channels
	int16_t	RxSumDiff;
	int16_t	RxSum, i;

	// Remove zero offsets
	for (i=0; i < MAX_RC_CHANNELS; i++)
    84cc:	80 e0       	ldi	r24, 0x00	; 0
    84ce:	90 e0       	ldi	r25, 0x00	; 0
	{
		RCinputs[i]	= RxChannel[i] - Config.RxChannelZeroOffset[i];
    84d0:	ac 01       	movw	r20, r24
    84d2:	44 0f       	add	r20, r20
    84d4:	55 1f       	adc	r21, r21
    84d6:	da 01       	movw	r26, r20
    84d8:	a6 54       	subi	r26, 0x46	; 70
    84da:	b8 4f       	sbci	r27, 0xF8	; 248
    84dc:	2d 91       	ld	r18, X+
    84de:	3c 91       	ld	r19, X
    84e0:	61 91       	ld	r22, Z+
    84e2:	71 91       	ld	r23, Z+
    84e4:	26 1b       	sub	r18, r22
    84e6:	37 0b       	sbc	r19, r23
    84e8:	da 01       	movw	r26, r20
    84ea:	a5 5d       	subi	r26, 0xD5	; 213
    84ec:	b7 4f       	sbci	r27, 0xF7	; 247
    84ee:	11 96       	adiw	r26, 0x01	; 1
    84f0:	3c 93       	st	X, r19
    84f2:	2e 93       	st	-X, r18
	static	int16_t	OldRxSum;			// Sum of all major channels
	int16_t	RxSumDiff;
	int16_t	RxSum, i;

	// Remove zero offsets
	for (i=0; i < MAX_RC_CHANNELS; i++)
    84f4:	01 96       	adiw	r24, 0x01	; 1
    84f6:	88 30       	cpi	r24, 0x08	; 8
    84f8:	91 05       	cpc	r25, r1
    84fa:	51 f7       	brne	.-44     	; 0x84d0 <RxGetChannels+0x8>
	{
		RCinputs[i]	= RxChannel[i] - Config.RxChannelZeroOffset[i];
	}

	// Special handling for monopolar throttle
	MonopolarThrottle = RxChannel[THROTTLE] - Config.RxChannelZeroOffset[THROTTLE];
    84fc:	80 91 ba 07 	lds	r24, 0x07BA
    8500:	90 91 bb 07 	lds	r25, 0x07BB
    8504:	20 91 8b 07 	lds	r18, 0x078B
    8508:	30 91 8c 07 	lds	r19, 0x078C
    850c:	82 1b       	sub	r24, r18
    850e:	93 0b       	sbc	r25, r19
    8510:	90 93 2a 08 	sts	0x082A, r25
    8514:	80 93 29 08 	sts	0x0829, r24

	// Bipolar throttle must use the nominal mid-point
	RCinputs[THROTTLE] = RxChannel[THROTTLE] - 3750; 
    8518:	80 91 ba 07 	lds	r24, 0x07BA
    851c:	90 91 bb 07 	lds	r25, 0x07BB
    8520:	86 5a       	subi	r24, 0xA6	; 166
    8522:	9e 40       	sbci	r25, 0x0E	; 14
    8524:	90 93 2c 08 	sts	0x082C, r25
    8528:	80 93 2b 08 	sts	0x082B, r24

	// Reverse primary channels as requested
	if (Config.AileronPol == REVERSED)
    852c:	80 91 de 05 	lds	r24, 0x05DE
    8530:	81 30       	cpi	r24, 0x01	; 1
    8532:	59 f4       	brne	.+22     	; 0x854a <RxGetChannels+0x82>
	{
		RCinputs[AILERON] = -RCinputs[AILERON];
    8534:	80 91 2d 08 	lds	r24, 0x082D
    8538:	90 91 2e 08 	lds	r25, 0x082E
    853c:	91 95       	neg	r25
    853e:	81 95       	neg	r24
    8540:	91 09       	sbc	r25, r1
    8542:	90 93 2e 08 	sts	0x082E, r25
    8546:	80 93 2d 08 	sts	0x082D, r24
	}

	if (Config.ElevatorPol == REVERSED)
    854a:	80 91 df 05 	lds	r24, 0x05DF
    854e:	81 30       	cpi	r24, 0x01	; 1
    8550:	59 f4       	brne	.+22     	; 0x8568 <RxGetChannels+0xa0>
	{
		RCinputs[ELEVATOR] = -RCinputs[ELEVATOR];
    8552:	80 91 2f 08 	lds	r24, 0x082F
    8556:	90 91 30 08 	lds	r25, 0x0830
    855a:	91 95       	neg	r25
    855c:	81 95       	neg	r24
    855e:	91 09       	sbc	r25, r1
    8560:	90 93 30 08 	sts	0x0830, r25
    8564:	80 93 2f 08 	sts	0x082F, r24
	}

	if (Config.RudderPol == REVERSED)
    8568:	80 91 e0 05 	lds	r24, 0x05E0
    856c:	81 30       	cpi	r24, 0x01	; 1
    856e:	59 f4       	brne	.+22     	; 0x8586 <RxGetChannels+0xbe>
	{
		RCinputs[RUDDER] = -RCinputs[RUDDER];
    8570:	80 91 31 08 	lds	r24, 0x0831
    8574:	90 91 32 08 	lds	r25, 0x0832
    8578:	91 95       	neg	r25
    857a:	81 95       	neg	r24
    857c:	91 09       	sbc	r25, r1
    857e:	90 93 32 08 	sts	0x0832, r25
    8582:	80 93 31 08 	sts	0x0831, r24
	}

	// Calculate RX activity
	RxSum = RCinputs[AILERON] + RCinputs[ELEVATOR] + RCinputs[RUDDER];
    8586:	80 91 2d 08 	lds	r24, 0x082D
    858a:	90 91 2e 08 	lds	r25, 0x082E
    858e:	40 91 2f 08 	lds	r20, 0x082F
    8592:	50 91 30 08 	lds	r21, 0x0830
    8596:	20 91 31 08 	lds	r18, 0x0831
    859a:	30 91 32 08 	lds	r19, 0x0832
    859e:	84 0f       	add	r24, r20
    85a0:	95 1f       	adc	r25, r21
    85a2:	82 0f       	add	r24, r18
    85a4:	93 1f       	adc	r25, r19
	RxSumDiff = RxSum - OldRxSum;
    85a6:	20 91 3a 05 	lds	r18, 0x053A
    85aa:	30 91 3b 05 	lds	r19, 0x053B
    85ae:	ac 01       	movw	r20, r24
    85b0:	42 1b       	sub	r20, r18
    85b2:	53 0b       	sbc	r21, r19
    85b4:	9a 01       	movw	r18, r20

	// Set RX activity flag if movement above noise floor or throttle above minimum
	if ((RxSumDiff > NOISE_THRESH) || (RxSumDiff < -NOISE_THRESH) || (MonopolarThrottle > THROTTLEIDLE)) 
    85b6:	2b 5f       	subi	r18, 0xFB	; 251
    85b8:	3f 4f       	sbci	r19, 0xFF	; 255
    85ba:	2b 30       	cpi	r18, 0x0B	; 11
    85bc:	31 05       	cpc	r19, r1
    85be:	38 f4       	brcc	.+14     	; 0x85ce <RxGetChannels+0x106>
    85c0:	20 91 29 08 	lds	r18, 0x0829
    85c4:	30 91 2a 08 	lds	r19, 0x082A
    85c8:	23 33       	cpi	r18, 0x33	; 51
    85ca:	31 05       	cpc	r19, r1
    85cc:	24 f0       	brlt	.+8      	; 0x85d6 <RxGetChannels+0x10e>
	{
		Flight_flags |= (1 << RxActivity);
    85ce:	20 91 1f 05 	lds	r18, 0x051F
    85d2:	21 60       	ori	r18, 0x01	; 1
    85d4:	03 c0       	rjmp	.+6      	; 0x85dc <RxGetChannels+0x114>
	}
	else 
	{
		Flight_flags &= ~(1 << RxActivity);
    85d6:	20 91 1f 05 	lds	r18, 0x051F
    85da:	2e 7f       	andi	r18, 0xFE	; 254
    85dc:	20 93 1f 05 	sts	0x051F, r18
	}
	
	// Preset RCinputs[NOCHAN] for sanity
	RCinputs[NOCHAN] = 0;
    85e0:	10 92 3c 08 	sts	0x083C, r1
    85e4:	10 92 3b 08 	sts	0x083B, r1

	OldRxSum = RxSum;
    85e8:	90 93 3b 05 	sts	0x053B, r25
    85ec:	80 93 3a 05 	sts	0x053A, r24
    85f0:	08 95       	ret

000085f2 <CenterSticks>:
}

// Center sticks on request from Menu
void CenterSticks(void)		
{
    85f2:	0f 93       	push	r16
    85f4:	1f 93       	push	r17
    85f6:	cf 93       	push	r28
    85f8:	df 93       	push	r29
    85fa:	cd b7       	in	r28, 0x3d	; 61
    85fc:	de b7       	in	r29, 0x3e	; 62
    85fe:	60 97       	sbiw	r28, 0x10	; 16
    8600:	0f b6       	in	r0, 0x3f	; 63
    8602:	f8 94       	cli
    8604:	de bf       	out	0x3e, r29	; 62
    8606:	0f be       	out	0x3f, r0	; 63
    8608:	cd bf       	out	0x3d, r28	; 61
	uint8_t i, j;
	uint16_t RxChannelZeroOffset[MAX_RC_CHANNELS] = {0,0,0,0,0,0,0,0};
    860a:	8e 01       	movw	r16, r28
    860c:	0f 5f       	subi	r16, 0xFF	; 255
    860e:	1f 4f       	sbci	r17, 0xFF	; 255
    8610:	80 e1       	ldi	r24, 0x10	; 16
    8612:	d8 01       	movw	r26, r16
    8614:	1d 92       	st	X+, r1
    8616:	8a 95       	dec	r24
    8618:	e9 f7       	brne	.-6      	; 0x8614 <CenterSticks+0x22>
    861a:	68 e0       	ldi	r22, 0x08	; 8
	OldRxSum = RxSum;
}

// Center sticks on request from Menu
void CenterSticks(void)		
{
    861c:	d8 01       	movw	r26, r16
    861e:	80 e0       	ldi	r24, 0x00	; 0
    8620:	90 e0       	ldi	r25, 0x00	; 0
	// RxChannel will auto-update every RC frame (normally 46Hz or so)
	for (i=0; i<8; i++)
	{
		for (j=0; j<MAX_RC_CHANNELS; j++)
		{
			RxChannelZeroOffset[j] += RxChannel[j];
    8622:	9c 01       	movw	r18, r24
    8624:	22 0f       	add	r18, r18
    8626:	33 1f       	adc	r19, r19
    8628:	26 54       	subi	r18, 0x46	; 70
    862a:	38 4f       	sbci	r19, 0xF8	; 248
    862c:	f9 01       	movw	r30, r18
    862e:	40 81       	ld	r20, Z
    8630:	51 81       	ldd	r21, Z+1	; 0x01
    8632:	2d 91       	ld	r18, X+
    8634:	3c 91       	ld	r19, X
    8636:	11 97       	sbiw	r26, 0x01	; 1
    8638:	24 0f       	add	r18, r20
    863a:	35 1f       	adc	r19, r21
    863c:	2d 93       	st	X+, r18
    863e:	3d 93       	st	X+, r19
    8640:	01 96       	adiw	r24, 0x01	; 1

	// Take an average of eight readings
	// RxChannel will auto-update every RC frame (normally 46Hz or so)
	for (i=0; i<8; i++)
	{
		for (j=0; j<MAX_RC_CHANNELS; j++)
    8642:	88 30       	cpi	r24, 0x08	; 8
    8644:	91 05       	cpc	r25, r1
    8646:	69 f7       	brne	.-38     	; 0x8622 <CenterSticks+0x30>
    8648:	ff e7       	ldi	r31, 0x7F	; 127
    864a:	2a e1       	ldi	r18, 0x1A	; 26
    864c:	86 e0       	ldi	r24, 0x06	; 6
    864e:	f1 50       	subi	r31, 0x01	; 1
    8650:	20 40       	sbci	r18, 0x00	; 0
    8652:	80 40       	sbci	r24, 0x00	; 0
    8654:	e1 f7       	brne	.-8      	; 0x864e <CenterSticks+0x5c>
    8656:	00 c0       	rjmp	.+0      	; 0x8658 <CenterSticks+0x66>
    8658:	00 00       	nop
    865a:	61 50       	subi	r22, 0x01	; 1
	uint8_t i, j;
	uint16_t RxChannelZeroOffset[MAX_RC_CHANNELS] = {0,0,0,0,0,0,0,0};

	// Take an average of eight readings
	// RxChannel will auto-update every RC frame (normally 46Hz or so)
	for (i=0; i<8; i++)
    865c:	f9 f6       	brne	.-66     	; 0x861c <CenterSticks+0x2a>
    865e:	ab e8       	ldi	r26, 0x8B	; 139
    8660:	b7 e0       	ldi	r27, 0x07	; 7
    8662:	9e 01       	movw	r18, r28
    8664:	2f 5e       	subi	r18, 0xEF	; 239
    8666:	3f 4f       	sbci	r19, 0xFF	; 255
    8668:	f8 01       	movw	r30, r16
		_delay_ms(100); // Wait for a new frame
	}

	for (i=0;i<MAX_RC_CHANNELS;i++)
	{
		Config.RxChannelZeroOffset[i] = ((RxChannelZeroOffset[i] + 4) >> 3); // Round and divide by 8
    866a:	81 91       	ld	r24, Z+
    866c:	91 91       	ld	r25, Z+
    866e:	04 96       	adiw	r24, 0x04	; 4
    8670:	43 e0       	ldi	r20, 0x03	; 3
    8672:	96 95       	lsr	r25
    8674:	87 95       	ror	r24
    8676:	4a 95       	dec	r20
    8678:	e1 f7       	brne	.-8      	; 0x8672 <CenterSticks+0x80>
    867a:	8d 93       	st	X+, r24
    867c:	9d 93       	st	X+, r25
			RxChannelZeroOffset[j] += RxChannel[j];
		}
		_delay_ms(100); // Wait for a new frame
	}

	for (i=0;i<MAX_RC_CHANNELS;i++)
    867e:	e2 17       	cp	r30, r18
    8680:	f3 07       	cpc	r31, r19
    8682:	99 f7       	brne	.-26     	; 0x866a <CenterSticks+0x78>
	{
		Config.RxChannelZeroOffset[i] = ((RxChannelZeroOffset[i] + 4) >> 3); // Round and divide by 8
	}

	Save_Config_to_EEPROM();
}
    8684:	60 96       	adiw	r28, 0x10	; 16
    8686:	0f b6       	in	r0, 0x3f	; 63
    8688:	f8 94       	cli
    868a:	de bf       	out	0x3e, r29	; 62
    868c:	0f be       	out	0x3f, r0	; 63
    868e:	cd bf       	out	0x3d, r28	; 61
    8690:	df 91       	pop	r29
    8692:	cf 91       	pop	r28
    8694:	1f 91       	pop	r17
    8696:	0f 91       	pop	r16
	for (i=0;i<MAX_RC_CHANNELS;i++)
	{
		Config.RxChannelZeroOffset[i] = ((RxChannelZeroOffset[i] + 4) >> 3); // Round and divide by 8
	}

	Save_Config_to_EEPROM();
    8698:	0c 94 86 16 	jmp	0x2d0c	; 0x2d0c <Save_Config_to_EEPROM>

0000869c <output_servo_ppm>:
//************************************************************

volatile uint16_t ServoOut[MAX_OUTPUTS];

void output_servo_ppm(uint8_t ServoFlag)
{
    869c:	8f 92       	push	r8
    869e:	9f 92       	push	r9
    86a0:	af 92       	push	r10
    86a2:	bf 92       	push	r11
    86a4:	df 92       	push	r13
    86a6:	ef 92       	push	r14
    86a8:	ff 92       	push	r15
    86aa:	0f 93       	push	r16
    86ac:	1f 93       	push	r17
    86ae:	cf 93       	push	r28
    86b0:	df 93       	push	r29
    86b2:	d8 2e       	mov	r13, r24
    86b4:	07 e4       	ldi	r16, 0x47	; 71
    86b6:	16 e0       	ldi	r17, 0x06	; 6
    86b8:	c0 e0       	ldi	r28, 0x00	; 0
    86ba:	d0 e0       	ldi	r29, 0x00	; 0
			temp = ((temp - 3750) >> 1) + 1500;
		}
		else
		{
			// Scale servo from 2500~5000 to 1000~2000
			temp = ((temp << 2) + 5) / 10; 	// Round and convert	
    86bc:	ea e0       	ldi	r30, 0x0A	; 10
    86be:	8e 2e       	mov	r8, r30
    86c0:	91 2c       	mov	r9, r1
    86c2:	a1 2c       	mov	r10, r1
    86c4:	b1 2c       	mov	r11, r1
	uint8_t i = 0;

	// Re-span numbers from internal values to microseconds
	for (i = 0; i < MAX_OUTPUTS; i++)
	{
		temp = ServoOut[i];					// Promote to 32 bits
    86c6:	7e 01       	movw	r14, r28
    86c8:	ee 0c       	add	r14, r14
    86ca:	ff 1c       	adc	r15, r15
    86cc:	f7 01       	movw	r30, r14
    86ce:	e3 5c       	subi	r30, 0xC3	; 195
    86d0:	f7 4f       	sbci	r31, 0xF7	; 247
    86d2:	20 81       	ld	r18, Z
    86d4:	31 81       	ldd	r19, Z+1	; 0x01
    86d6:	a9 01       	movw	r20, r18
    86d8:	60 e0       	ldi	r22, 0x00	; 0
    86da:	70 e0       	ldi	r23, 0x00	; 0

		// Check for motor marker and ignore if set
		if (Config.Channel[i].Motor_marker == MOTOR)
    86dc:	f8 01       	movw	r30, r16
    86de:	80 81       	ld	r24, Z
    86e0:	82 30       	cpi	r24, 0x02	; 2
    86e2:	79 f4       	brne	.+30     	; 0x8702 <output_servo_ppm+0x66>
		{
			// Scale servo from 2500~5000 to 875~2125
			temp = ((temp - 3750) >> 1) + 1500;
    86e4:	9a 01       	movw	r18, r20
    86e6:	ab 01       	movw	r20, r22
    86e8:	26 5a       	subi	r18, 0xA6	; 166
    86ea:	3e 40       	sbci	r19, 0x0E	; 14
    86ec:	41 09       	sbc	r20, r1
    86ee:	51 09       	sbc	r21, r1
    86f0:	56 95       	lsr	r21
    86f2:	47 95       	ror	r20
    86f4:	37 95       	ror	r19
    86f6:	27 95       	ror	r18
    86f8:	24 52       	subi	r18, 0x24	; 36
    86fa:	3a 4f       	sbci	r19, 0xFA	; 250
    86fc:	4f 4f       	sbci	r20, 0xFF	; 255
    86fe:	5f 4f       	sbci	r21, 0xFF	; 255
    8700:	11 c0       	rjmp	.+34     	; 0x8724 <output_servo_ppm+0x88>
		}
		else
		{
			// Scale servo from 2500~5000 to 1000~2000
			temp = ((temp << 2) + 5) / 10; 	// Round and convert	
    8702:	cb 01       	movw	r24, r22
    8704:	ba 01       	movw	r22, r20
    8706:	52 e0       	ldi	r21, 0x02	; 2
    8708:	66 0f       	add	r22, r22
    870a:	77 1f       	adc	r23, r23
    870c:	88 1f       	adc	r24, r24
    870e:	99 1f       	adc	r25, r25
    8710:	5a 95       	dec	r21
    8712:	d1 f7       	brne	.-12     	; 0x8708 <output_servo_ppm+0x6c>
    8714:	6b 5f       	subi	r22, 0xFB	; 251
    8716:	7f 4f       	sbci	r23, 0xFF	; 255
    8718:	8f 4f       	sbci	r24, 0xFF	; 255
    871a:	9f 4f       	sbci	r25, 0xFF	; 255
    871c:	a5 01       	movw	r20, r10
    871e:	94 01       	movw	r18, r8
    8720:	0e 94 80 47 	call	0x8f00	; 0x8f00 <__udivmodsi4>
		}
		
		ServoOut[i] = (uint16_t)temp;
    8724:	f7 01       	movw	r30, r14
    8726:	e3 5c       	subi	r30, 0xC3	; 195
    8728:	f7 4f       	sbci	r31, 0xF7	; 247
    872a:	31 83       	std	Z+1, r19	; 0x01
    872c:	20 83       	st	Z, r18
    872e:	21 96       	adiw	r28, 0x01	; 1
    8730:	0a 5d       	subi	r16, 0xDA	; 218
    8732:	1f 4f       	sbci	r17, 0xFF	; 255
{
	uint32_t temp;
	uint8_t i = 0;

	// Re-span numbers from internal values to microseconds
	for (i = 0; i < MAX_OUTPUTS; i++)
    8734:	c8 30       	cpi	r28, 0x08	; 8
    8736:	d1 05       	cpc	r29, r1
    8738:	31 f6       	brne	.-116    	; 0x86c6 <output_servo_ppm+0x2a>
		
		ServoOut[i] = (uint16_t)temp;
	}

	// Re-sample throttle value
	MonopolarThrottle = RxChannel[THROTTLE] - Config.RxChannelZeroOffset[THROTTLE];
    873a:	80 91 ba 07 	lds	r24, 0x07BA
    873e:	90 91 bb 07 	lds	r25, 0x07BB
    8742:	20 91 8b 07 	lds	r18, 0x078B
    8746:	30 91 8c 07 	lds	r19, 0x078C
    874a:	82 1b       	sub	r24, r18
    874c:	93 0b       	sbc	r25, r19
    874e:	90 93 2a 08 	sts	0x082A, r25
    8752:	80 93 29 08 	sts	0x0829, r24

	// Check for motor flags if throttle is below arming minimum or disarmed
	// and set all motors to minimum throttle if so
	if 	(
			(MonopolarThrottle < THROTTLEIDLE) || 
    8756:	80 91 29 08 	lds	r24, 0x0829
    875a:	90 91 2a 08 	lds	r25, 0x082A
	// Re-sample throttle value
	MonopolarThrottle = RxChannel[THROTTLE] - Config.RxChannelZeroOffset[THROTTLE];

	// Check for motor flags if throttle is below arming minimum or disarmed
	// and set all motors to minimum throttle if so
	if 	(
    875e:	c2 97       	sbiw	r24, 0x32	; 50
    8760:	ac f0       	brlt	.+42     	; 0x878c <output_servo_ppm+0xf0>
			(MonopolarThrottle < THROTTLEIDLE) || 
			((General_error & (1 << DISARMED)) != 0)
    8762:	80 91 20 05 	lds	r24, 0x0520
	MonopolarThrottle = RxChannel[THROTTLE] - Config.RxChannelZeroOffset[THROTTLE];

	// Check for motor flags if throttle is below arming minimum or disarmed
	// and set all motors to minimum throttle if so
	if 	(
			(MonopolarThrottle < THROTTLEIDLE) || 
    8766:	82 fd       	sbrc	r24, 2
    8768:	11 c0       	rjmp	.+34     	; 0x878c <output_servo_ppm+0xf0>
		}
	}

	// Determine output rate based on device type
	// Suppress outputs during throttle high error
	if((General_error & (1 << THROTTLE_HIGH)) == 0)
    876a:	80 91 20 05 	lds	r24, 0x0520
    876e:	80 fd       	sbrc	r24, 0
    8770:	24 c0       	rjmp	.+72     	; 0x87ba <output_servo_ppm+0x11e>
	{
		// Reset JitterFlag immediately before PWM generation
		JitterFlag = false;
    8772:	10 92 e5 07 	sts	0x07E5, r1
	
		// We now care about interrupts
		JitterGate = true;
    8776:	81 e0       	ldi	r24, 0x01	; 1
    8778:	80 93 e4 07 	sts	0x07E4, r24

		// Pass address of ServoOut array
		output_servo_ppm_asm(&ServoOut[0], ServoFlag);
    877c:	6d 2d       	mov	r22, r13
    877e:	8d e3       	ldi	r24, 0x3D	; 61
    8780:	98 e0       	ldi	r25, 0x08	; 8
    8782:	0e 94 75 0d 	call	0x1aea	; 0x1aea <output_servo_ppm_asm>
		
		// We no longer care about interrupts
		JitterGate = false;
    8786:	10 92 e4 07 	sts	0x07E4, r1
    878a:	17 c0       	rjmp	.+46     	; 0x87ba <output_servo_ppm+0x11e>
//************************************************************

volatile uint16_t ServoOut[MAX_OUTPUTS];

void output_servo_ppm(uint8_t ServoFlag)
{
    878c:	e7 e4       	ldi	r30, 0x47	; 71
    878e:	f6 e0       	ldi	r31, 0x06	; 6
    8790:	80 e0       	ldi	r24, 0x00	; 0
    8792:	90 e0       	ldi	r25, 0x00	; 0
		{
			// Check for motor marker
			if (Config.Channel[i].Motor_marker == MOTOR)
			{
				// Set output to minimum pulse width (1000us)
				ServoOut[i] = MOTORMIN;
    8794:	28 ee       	ldi	r18, 0xE8	; 232
    8796:	33 e0       	ldi	r19, 0x03	; 3
	{
		// For each output
		for (i = 0; i < MAX_OUTPUTS; i++)
		{
			// Check for motor marker
			if (Config.Channel[i].Motor_marker == MOTOR)
    8798:	40 81       	ld	r20, Z
    879a:	42 30       	cpi	r20, 0x02	; 2
    879c:	41 f4       	brne	.+16     	; 0x87ae <output_servo_ppm+0x112>
			{
				// Set output to minimum pulse width (1000us)
				ServoOut[i] = MOTORMIN;
    879e:	dc 01       	movw	r26, r24
    87a0:	aa 0f       	add	r26, r26
    87a2:	bb 1f       	adc	r27, r27
    87a4:	a3 5c       	subi	r26, 0xC3	; 195
    87a6:	b7 4f       	sbci	r27, 0xF7	; 247
    87a8:	11 96       	adiw	r26, 0x01	; 1
    87aa:	3c 93       	st	X, r19
    87ac:	2e 93       	st	-X, r18
    87ae:	01 96       	adiw	r24, 0x01	; 1
    87b0:	b6 96       	adiw	r30, 0x26	; 38
			(MonopolarThrottle < THROTTLEIDLE) || 
			((General_error & (1 << DISARMED)) != 0)
		)
	{
		// For each output
		for (i = 0; i < MAX_OUTPUTS; i++)
    87b2:	88 30       	cpi	r24, 0x08	; 8
    87b4:	91 05       	cpc	r25, r1
    87b6:	81 f7       	brne	.-32     	; 0x8798 <output_servo_ppm+0xfc>
    87b8:	d8 cf       	rjmp	.-80     	; 0x876a <output_servo_ppm+0xce>
		output_servo_ppm_asm(&ServoOut[0], ServoFlag);
		
		// We no longer care about interrupts
		JitterGate = false;
	}
}
    87ba:	df 91       	pop	r29
    87bc:	cf 91       	pop	r28
    87be:	1f 91       	pop	r17
    87c0:	0f 91       	pop	r16
    87c2:	ff 90       	pop	r15
    87c4:	ef 90       	pop	r14
    87c6:	df 90       	pop	r13
    87c8:	bf 90       	pop	r11
    87ca:	af 90       	pop	r10
    87cc:	9f 90       	pop	r9
    87ce:	8f 90       	pop	r8
    87d0:	08 95       	ret

000087d2 <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
  TWSR = 0;                         /* no prescaler */
    87d2:	10 92 b9 00 	sts	0x00B9, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
    87d6:	81 e1       	ldi	r24, 0x11	; 17
    87d8:	80 93 b8 00 	sts	0x00B8, r24
    87dc:	08 95       	ret

000087de <i2c_start>:
{
	uint32_t  i2c_timer = 0;
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    87de:	94 ea       	ldi	r25, 0xA4	; 164
    87e0:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
    87e4:	4f ef       	ldi	r20, 0xFF	; 255
    87e6:	50 e0       	ldi	r21, 0x00	; 0
    87e8:	60 e0       	ldi	r22, 0x00	; 0
    87ea:	70 e0       	ldi	r23, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    87ec:	90 91 bc 00 	lds	r25, 0x00BC
    87f0:	97 fd       	sbrc	r25, 7
    87f2:	06 c0       	rjmp	.+12     	; 0x8800 <i2c_start+0x22>
    87f4:	41 50       	subi	r20, 0x01	; 1
    87f6:	51 09       	sbc	r21, r1
    87f8:	61 09       	sbc	r22, r1
    87fa:	71 09       	sbc	r23, r1
    87fc:	b8 f7       	brcc	.-18     	; 0x87ec <i2c_start+0xe>
    87fe:	06 c0       	rjmp	.+12     	; 0x880c <i2c_start+0x2e>
	if(i2c_timer == 0)
    8800:	45 2b       	or	r20, r21
    8802:	46 2b       	or	r20, r22
    8804:	47 2b       	or	r20, r23
    8806:	11 f4       	brne	.+4      	; 0x880c <i2c_start+0x2e>
		return 1;
    8808:	81 e0       	ldi	r24, 0x01	; 1
    880a:	08 95       	ret

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    880c:	90 91 b9 00 	lds	r25, 0x00B9
    8810:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
    8812:	98 30       	cpi	r25, 0x08	; 8
    8814:	11 f0       	breq	.+4      	; 0x881a <i2c_start+0x3c>
    8816:	90 31       	cpi	r25, 0x10	; 16
    8818:	b9 f7       	brne	.-18     	; 0x8808 <i2c_start+0x2a>

	// send device address
	TWDR = address;
    881a:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    881e:	84 e8       	ldi	r24, 0x84	; 132
    8820:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	i2c_timer = I2C_TIMER_DELAY;
    8824:	8f ef       	ldi	r24, 0xFF	; 255
    8826:	90 e0       	ldi	r25, 0x00	; 0
    8828:	a0 e0       	ldi	r26, 0x00	; 0
    882a:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    882c:	20 91 bc 00 	lds	r18, 0x00BC
    8830:	27 fd       	sbrc	r18, 7
    8832:	05 c0       	rjmp	.+10     	; 0x883e <i2c_start+0x60>
    8834:	01 97       	sbiw	r24, 0x01	; 1
    8836:	a1 09       	sbc	r26, r1
    8838:	b1 09       	sbc	r27, r1
    883a:	c0 f7       	brcc	.-16     	; 0x882c <i2c_start+0x4e>
    883c:	04 c0       	rjmp	.+8      	; 0x8846 <i2c_start+0x68>
	if(i2c_timer == 0)
    883e:	89 2b       	or	r24, r25
    8840:	8a 2b       	or	r24, r26
    8842:	8b 2b       	or	r24, r27
    8844:	09 f3       	breq	.-62     	; 0x8808 <i2c_start+0x2a>
		return 1;

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    8846:	80 91 b9 00 	lds	r24, 0x00B9
    884a:	88 7f       	andi	r24, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
    884c:	88 31       	cpi	r24, 0x18	; 24
    884e:	11 f0       	breq	.+4      	; 0x8854 <i2c_start+0x76>
    8850:	80 34       	cpi	r24, 0x40	; 64
    8852:	d1 f6       	brne	.-76     	; 0x8808 <i2c_start+0x2a>

	return 0;
    8854:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */
    8856:	08 95       	ret

00008858 <i2c_start_wait>:
	uint8_t   twst;

    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    8858:	44 ea       	ldi	r20, 0xA4	; 164
    	twst = TW_STATUS & 0xF8;
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
    	TWCR = (1<<TWINT) | (1<<TWEN);
    885a:	54 e8       	ldi	r21, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    885c:	64 e9       	ldi	r22, 0x94	; 148
	uint8_t   twst;

    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    885e:	40 93 bc 00 	sts	0x00BC, r20
    
    	// wait until transmission completed
	    i2c_timer = I2C_TIMER_DELAY;
    	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    8862:	20 e0       	ldi	r18, 0x00	; 0
    8864:	30 e0       	ldi	r19, 0x00	; 0
    8866:	90 91 bc 00 	lds	r25, 0x00BC
    886a:	97 fd       	sbrc	r25, 7
    886c:	06 c0       	rjmp	.+12     	; 0x887a <i2c_start_wait+0x22>
    886e:	2f 5f       	subi	r18, 0xFF	; 255
    8870:	3f 4f       	sbci	r19, 0xFF	; 255
    8872:	21 15       	cp	r18, r1
    8874:	91 e0       	ldi	r25, 0x01	; 1
    8876:	39 07       	cpc	r19, r25
    8878:	b1 f7       	brne	.-20     	; 0x8866 <i2c_start_wait+0xe>

    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    887a:	90 91 b9 00 	lds	r25, 0x00B9
    887e:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    8880:	98 30       	cpi	r25, 0x08	; 8
    8882:	11 f0       	breq	.+4      	; 0x8888 <i2c_start_wait+0x30>
    8884:	90 31       	cpi	r25, 0x10	; 16
    8886:	59 f7       	brne	.-42     	; 0x885e <i2c_start_wait+0x6>
    
    	// send device address
    	TWDR = address;
    8888:	80 93 bb 00 	sts	0x00BB, r24
    	TWCR = (1<<TWINT) | (1<<TWEN);
    888c:	50 93 bc 00 	sts	0x00BC, r21
    
    	// wail until transmission completed
    	i2c_timer = I2C_TIMER_DELAY;
    	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    8890:	20 e0       	ldi	r18, 0x00	; 0
    8892:	30 e0       	ldi	r19, 0x00	; 0
    8894:	90 91 bc 00 	lds	r25, 0x00BC
    8898:	97 fd       	sbrc	r25, 7
    889a:	06 c0       	rjmp	.+12     	; 0x88a8 <i2c_start_wait+0x50>
    889c:	2f 5f       	subi	r18, 0xFF	; 255
    889e:	3f 4f       	sbci	r19, 0xFF	; 255
    88a0:	21 15       	cp	r18, r1
    88a2:	91 e0       	ldi	r25, 0x01	; 1
    88a4:	39 07       	cpc	r19, r25
    88a6:	b1 f7       	brne	.-20     	; 0x8894 <i2c_start_wait+0x3c>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    88a8:	90 91 b9 00 	lds	r25, 0x00B9
    88ac:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    88ae:	90 32       	cpi	r25, 0x20	; 32
    88b0:	11 f0       	breq	.+4      	; 0x88b6 <i2c_start_wait+0x5e>
    88b2:	98 35       	cpi	r25, 0x58	; 88
    88b4:	79 f4       	brne	.+30     	; 0x88d4 <i2c_start_wait+0x7c>
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    88b6:	60 93 bc 00 	sts	0x00BC, r22
	        
	        // wait until stop condition is executed and bus released
	        i2c_timer = I2C_TIMER_DELAY;
	        while((TWCR & (1<<TWSTO)) && i2c_timer--);
    88ba:	20 e0       	ldi	r18, 0x00	; 0
    88bc:	30 e0       	ldi	r19, 0x00	; 0
    88be:	90 91 bc 00 	lds	r25, 0x00BC
    88c2:	94 ff       	sbrs	r25, 4
    88c4:	cc cf       	rjmp	.-104    	; 0x885e <i2c_start_wait+0x6>
    88c6:	2f 5f       	subi	r18, 0xFF	; 255
    88c8:	3f 4f       	sbci	r19, 0xFF	; 255
    88ca:	21 15       	cp	r18, r1
    88cc:	91 e0       	ldi	r25, 0x01	; 1
    88ce:	39 07       	cpc	r19, r25
    88d0:	b1 f7       	brne	.-20     	; 0x88be <i2c_start_wait+0x66>
    88d2:	c5 cf       	rjmp	.-118    	; 0x885e <i2c_start_wait+0x6>
    88d4:	08 95       	ret

000088d6 <i2c_rep_start>:
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );
    88d6:	0c 94 ef 43 	jmp	0x87de	; 0x87de <i2c_start>

000088da <i2c_stop>:
void i2c_stop(void)
{
	uint32_t  i2c_timer = 0;

    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    88da:	84 e9       	ldi	r24, 0x94	; 148
    88dc:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait until stop condition is executed and bus released
	i2c_timer = I2C_TIMER_DELAY;
	while((TWCR & (1<<TWSTO)) && i2c_timer--);
    88e0:	80 e0       	ldi	r24, 0x00	; 0
    88e2:	90 e0       	ldi	r25, 0x00	; 0
    88e4:	20 91 bc 00 	lds	r18, 0x00BC
    88e8:	24 ff       	sbrs	r18, 4
    88ea:	05 c0       	rjmp	.+10     	; 0x88f6 <i2c_stop+0x1c>
    88ec:	01 96       	adiw	r24, 0x01	; 1
    88ee:	81 15       	cp	r24, r1
    88f0:	21 e0       	ldi	r18, 0x01	; 1
    88f2:	92 07       	cpc	r25, r18
    88f4:	b9 f7       	brne	.-18     	; 0x88e4 <i2c_stop+0xa>
    88f6:	08 95       	ret

000088f8 <i2c_write>:
{	
	uint32_t  i2c_timer = 0;
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    88f8:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    88fc:	84 e8       	ldi	r24, 0x84	; 132
    88fe:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
    8902:	8f ef       	ldi	r24, 0xFF	; 255
    8904:	90 e0       	ldi	r25, 0x00	; 0
    8906:	a0 e0       	ldi	r26, 0x00	; 0
    8908:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    890a:	20 91 bc 00 	lds	r18, 0x00BC
    890e:	27 fd       	sbrc	r18, 7
    8910:	05 c0       	rjmp	.+10     	; 0x891c <i2c_write+0x24>
    8912:	01 97       	sbiw	r24, 0x01	; 1
    8914:	a1 09       	sbc	r26, r1
    8916:	b1 09       	sbc	r27, r1
    8918:	c0 f7       	brcc	.-16     	; 0x890a <i2c_write+0x12>
    891a:	04 c0       	rjmp	.+8      	; 0x8924 <i2c_write+0x2c>
	if(i2c_timer == 0)
    891c:	89 2b       	or	r24, r25
    891e:	8a 2b       	or	r24, r26
    8920:	8b 2b       	or	r24, r27
    8922:	41 f0       	breq	.+16     	; 0x8934 <i2c_write+0x3c>
		return 1;

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    8924:	90 91 b9 00 	lds	r25, 0x00B9
    8928:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
    892a:	81 e0       	ldi	r24, 0x01	; 1
    892c:	98 32       	cpi	r25, 0x28	; 40
    892e:	19 f4       	brne	.+6      	; 0x8936 <i2c_write+0x3e>
    8930:	80 e0       	ldi	r24, 0x00	; 0
    8932:	08 95       	ret

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 1;
    8934:	81 e0       	ldi	r24, 0x01	; 1
	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
    8936:	08 95       	ret

00008938 <i2c_readAck>:
*************************************************************************/
unsigned char i2c_readAck(void)
{
	uint32_t  i2c_timer = 0;

	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    8938:	84 ec       	ldi	r24, 0xC4	; 196
    893a:	80 93 bc 00 	sts	0x00BC, r24
	i2c_timer = I2C_TIMER_DELAY;
    893e:	8f ef       	ldi	r24, 0xFF	; 255
    8940:	90 e0       	ldi	r25, 0x00	; 0
    8942:	a0 e0       	ldi	r26, 0x00	; 0
    8944:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    8946:	20 91 bc 00 	lds	r18, 0x00BC
    894a:	27 fd       	sbrc	r18, 7
    894c:	05 c0       	rjmp	.+10     	; 0x8958 <i2c_readAck+0x20>
    894e:	01 97       	sbiw	r24, 0x01	; 1
    8950:	a1 09       	sbc	r26, r1
    8952:	b1 09       	sbc	r27, r1
    8954:	c0 f7       	brcc	.-16     	; 0x8946 <i2c_readAck+0xe>
    8956:	04 c0       	rjmp	.+8      	; 0x8960 <i2c_readAck+0x28>
	if(i2c_timer == 0)
    8958:	89 2b       	or	r24, r25
    895a:	8a 2b       	or	r24, r26
    895c:	8b 2b       	or	r24, r27
    895e:	19 f0       	breq	.+6      	; 0x8966 <i2c_readAck+0x2e>
		return 0;

    return TWDR;
    8960:	80 91 bb 00 	lds	r24, 0x00BB
    8964:	08 95       	ret

	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 0;
    8966:	80 e0       	ldi	r24, 0x00	; 0

    return TWDR;

}/* i2c_readAck */
    8968:	08 95       	ret

0000896a <i2c_readNak>:
*************************************************************************/
unsigned char i2c_readNak(void)
{
	uint32_t  i2c_timer = 0;

	TWCR = (1<<TWINT) | (1<<TWEN);
    896a:	84 e8       	ldi	r24, 0x84	; 132
    896c:	80 93 bc 00 	sts	0x00BC, r24
	i2c_timer = I2C_TIMER_DELAY;
    8970:	8f ef       	ldi	r24, 0xFF	; 255
    8972:	90 e0       	ldi	r25, 0x00	; 0
    8974:	a0 e0       	ldi	r26, 0x00	; 0
    8976:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    8978:	20 91 bc 00 	lds	r18, 0x00BC
    897c:	27 fd       	sbrc	r18, 7
    897e:	05 c0       	rjmp	.+10     	; 0x898a <i2c_readNak+0x20>
    8980:	01 97       	sbiw	r24, 0x01	; 1
    8982:	a1 09       	sbc	r26, r1
    8984:	b1 09       	sbc	r27, r1
    8986:	c0 f7       	brcc	.-16     	; 0x8978 <i2c_readNak+0xe>
    8988:	04 c0       	rjmp	.+8      	; 0x8992 <i2c_readNak+0x28>
	if(i2c_timer == 0)
    898a:	89 2b       	or	r24, r25
    898c:	8a 2b       	or	r24, r26
    898e:	8b 2b       	or	r24, r27
    8990:	19 f0       	breq	.+6      	; 0x8998 <i2c_readNak+0x2e>
		return 0;
	
    return TWDR;
    8992:	80 91 bb 00 	lds	r24, 0x00BB
    8996:	08 95       	ret

	TWCR = (1<<TWINT) | (1<<TWEN);
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 0;
    8998:	80 e0       	ldi	r24, 0x00	; 0
	
    return TWDR;

}/* i2c_readNak */
    899a:	08 95       	ret

0000899c <init_uart>:
#define BAUD_PRESCALE_SPEKTRUM ((F_CPU + USART_BAUDRATE_SPEKTRUM * 8L) / (USART_BAUDRATE_SPEKTRUM * 16L) - 1) // Default RX rate for Spektrum

// Initialise UART with adjusted bitrate
void init_uart(void)
{
	cli();								// Atmel wants global interrupts disabled when changing UART setup on the fly
    899c:	f8 94       	cli
	
	UCSR0B &= ~(1 << RXCIE0);			// Disable serial interrupt
    899e:	80 91 c1 00 	lds	r24, 0x00C1
    89a2:	8f 77       	andi	r24, 0x7F	; 127
    89a4:	80 93 c1 00 	sts	0x00C1, r24

	while (UCSR0A & (1 << RXC0))		// Make sure there is nothing in the RX0 reg
    89a8:	80 91 c0 00 	lds	r24, 0x00C0
    89ac:	87 ff       	sbrs	r24, 7
    89ae:	05 c0       	rjmp	.+10     	; 0x89ba <init_uart+0x1e>
	{
		UCSR0C = UDR0;					// So as not to annoy Studio 6, use UCSR0C as a temp reg until UDR0 empty. Sorry, UCSR0C...
    89b0:	80 91 c6 00 	lds	r24, 0x00C6
    89b4:	80 93 c2 00 	sts	0x00C2, r24
    89b8:	f7 cf       	rjmp	.-18     	; 0x89a8 <init_uart+0xc>
	}
	
	// Reset UART regs to a known state
	UCSR0A = 0; // U2X = 0, no master mode, flags cleared 
    89ba:	10 92 c0 00 	sts	0x00C0, r1
	UCSR0B = 0; // Clear flags, disable tx/rx, 8 bits
    89be:	10 92 c1 00 	sts	0x00C1, r1
	UCSR0C = 6; // 8N1
    89c2:	86 e0       	ldi	r24, 0x06	; 6
    89c4:	80 93 c2 00 	sts	0x00C2, r24

	switch (Config.RxMode)
    89c8:	80 91 da 05 	lds	r24, 0x05DA
    89cc:	82 30       	cpi	r24, 0x02	; 2
    89ce:	09 f1       	breq	.+66     	; 0x8a12 <init_uart+0x76>
    89d0:	34 f4       	brge	.+12     	; 0x89de <init_uart+0x42>
    89d2:	87 fd       	sbrc	r24, 7
    89d4:	41 c0       	rjmp	.+130    	; 0x8a58 <init_uart+0xbc>
			UCSR0B |=  (1 << RXCIE0);					// Enable serial interrupt
			break;

		case CPPM_MODE:
		case PWM:
			UCSR0B &= 	~(1 << RXEN0);					// Disable receiver in PWM and CPPM modes
    89d6:	80 91 c1 00 	lds	r24, 0x00C1
    89da:	8f 7e       	andi	r24, 0xEF	; 239
    89dc:	3b c0       	rjmp	.+118    	; 0x8a54 <init_uart+0xb8>
	// Reset UART regs to a known state
	UCSR0A = 0; // U2X = 0, no master mode, flags cleared 
	UCSR0B = 0; // Clear flags, disable tx/rx, 8 bits
	UCSR0C = 6; // 8N1

	switch (Config.RxMode)
    89de:	83 30       	cpi	r24, 0x03	; 3
    89e0:	d9 f5       	brne	.+118    	; 0x8a58 <init_uart+0xbc>
			UCSR0B |=  (1 << RXCIE0);					// Enable serial interrupt
			break;

		// Spektrum 8N1 (8 data bits / No parity / 1 stop bit / 115.2Kbps)
		case SPEKTRUM: 	
			UCSR0A &=  ~(1 << U2X0);					// Clear the 2x flag
    89e2:	80 91 c0 00 	lds	r24, 0x00C0
    89e6:	8d 7f       	andi	r24, 0xFD	; 253
    89e8:	80 93 c0 00 	sts	0x00C0, r24
			UBRR0H  =  (BAUD_PRESCALE_SPEKTRUM >> 8); 	// Actual = 113636, Error = -1.36%
    89ec:	10 92 c5 00 	sts	0x00C5, r1
			UBRR0L  =   BAUD_PRESCALE_SPEKTRUM & 0xff;	// 0x0A (10.35)	
    89f0:	8a e0       	ldi	r24, 0x0A	; 10
    89f2:	80 93 c4 00 	sts	0x00C4, r24
			UCSR0B |= 	(1 << RXEN0);					// Enable receiver
    89f6:	80 91 c1 00 	lds	r24, 0x00C1
    89fa:	80 61       	ori	r24, 0x10	; 16
    89fc:	80 93 c1 00 	sts	0x00C1, r24
			UCSR0C &=  ~(1 << USBS0); 					// 1 stop bit
    8a00:	80 91 c2 00 	lds	r24, 0x00C2
    8a04:	87 7f       	andi	r24, 0xF7	; 247
    8a06:	80 93 c2 00 	sts	0x00C2, r24
			UCSR0C &=  ~(1 << UPM00) | 					// No parity 
    8a0a:	80 91 c2 00 	lds	r24, 0x00C2
    8a0e:	8f 7e       	andi	r24, 0xEF	; 239
    8a10:	1c c0       	rjmp	.+56     	; 0x8a4a <init_uart+0xae>

	switch (Config.RxMode)
	{
		// Futaba S-Bus 8E2 (8 data bits / Even parity / 2 stop bits / 100Kbps)
		case SBUS: 		
			UCSR0A |=  (1 << U2X0);						// Need to set the 2x flag
    8a12:	80 91 c0 00 	lds	r24, 0x00C0
    8a16:	82 60       	ori	r24, 0x02	; 2
    8a18:	80 93 c0 00 	sts	0x00C0, r24
			UBRR0H  = (BAUD_PRESCALE_SBUS >> 8);  		// Actual = 100000 , Error = 0%	
    8a1c:	10 92 c5 00 	sts	0x00C5, r1
			UBRR0L  =  BAUD_PRESCALE_SBUS & 0xff;		// 0x18 (24)
    8a20:	88 e1       	ldi	r24, 0x18	; 24
    8a22:	80 93 c4 00 	sts	0x00C4, r24
			UCSR0B |=  (1 << RXEN0);					// Enable receiver
    8a26:	80 91 c1 00 	lds	r24, 0x00C1
    8a2a:	80 61       	ori	r24, 0x10	; 16
    8a2c:	80 93 c1 00 	sts	0x00C1, r24
			UCSR0C |=  (1 << USBS0); 					// 2 stop bits
    8a30:	80 91 c2 00 	lds	r24, 0x00C2
    8a34:	88 60       	ori	r24, 0x08	; 8
    8a36:	80 93 c2 00 	sts	0x00C2, r24
			UCSR0C &= ~(1 << UPM00); 					// Even parity 
    8a3a:	80 91 c2 00 	lds	r24, 0x00C2
    8a3e:	8f 7e       	andi	r24, 0xEF	; 239
    8a40:	80 93 c2 00 	sts	0x00C2, r24
			UCSR0C |=  (1 << UPM01); 
    8a44:	80 91 c2 00 	lds	r24, 0x00C2
    8a48:	80 62       	ori	r24, 0x20	; 32
			UCSR0A &=  ~(1 << U2X0);					// Clear the 2x flag
			UBRR0H  =  (BAUD_PRESCALE_SPEKTRUM >> 8); 	// Actual = 113636, Error = -1.36%
			UBRR0L  =   BAUD_PRESCALE_SPEKTRUM & 0xff;	// 0x0A (10.35)	
			UCSR0B |= 	(1 << RXEN0);					// Enable receiver
			UCSR0C &=  ~(1 << USBS0); 					// 1 stop bit
			UCSR0C &=  ~(1 << UPM00) | 					// No parity 
    8a4a:	80 93 c2 00 	sts	0x00C2, r24
						(1 << UPM01); 
			UCSR0B |=  (1 << RXCIE0);					// Enable serial interrupt
    8a4e:	80 91 c1 00 	lds	r24, 0x00C1
    8a52:	80 68       	ori	r24, 0x80	; 128
			break;

		case CPPM_MODE:
		case PWM:
			UCSR0B &= 	~(1 << RXEN0);					// Disable receiver in PWM and CPPM modes
    8a54:	80 93 c1 00 	sts	0x00C1, r24
		default:
			break;
	}

	// Re-enable interrupts
	sei();
    8a58:	78 94       	sei
    8a5a:	08 95       	ret

00008a5c <GetVbat>:

uint16_t GetVbat(void)				// Get battery voltage (VBAT on ADC3)
{
	uint16_t	vBat;				// Battery voltage
		
	read_adc(AIN_VBAT1);				// Multiplication factor = (Display volts / 1024) / (Vbat / 11 / Vref)
    8a5c:	83 e0       	ldi	r24, 0x03	; 3
    8a5e:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <read_adc>
	// For Vref = 2.45V, Multiplication factor = 2.632
	// For Vref = 2.305V, Multiplication factor = approx 2.5
	// An input voltage of 10V will results in a value of 999.
	// This means that the number represents units of 10mV.

	vBat = ADCW;
    8a62:	20 91 78 00 	lds	r18, 0x0078
    8a66:	30 91 79 00 	lds	r19, 0x0079

	// Multiply by 2.500
	// 2 + 1/2
	vBat = (vBat << 1) + (vBat >> 1); // Multiply by 2.500
    8a6a:	c9 01       	movw	r24, r18
    8a6c:	88 0f       	add	r24, r24
    8a6e:	99 1f       	adc	r25, r25
    8a70:	36 95       	lsr	r19
    8a72:	27 95       	ror	r18

	return vBat;
    8a74:	82 0f       	add	r24, r18
    8a76:	93 1f       	adc	r25, r19
    8a78:	08 95       	ret

00008a7a <__subsf3>:
    8a7a:	50 58       	subi	r21, 0x80	; 128

00008a7c <__addsf3>:
    8a7c:	bb 27       	eor	r27, r27
    8a7e:	aa 27       	eor	r26, r26
    8a80:	0e d0       	rcall	.+28     	; 0x8a9e <__addsf3x>
    8a82:	75 c1       	rjmp	.+746    	; 0x8d6e <__fp_round>
    8a84:	66 d1       	rcall	.+716    	; 0x8d52 <__fp_pscA>
    8a86:	30 f0       	brcs	.+12     	; 0x8a94 <__addsf3+0x18>
    8a88:	6b d1       	rcall	.+726    	; 0x8d60 <__fp_pscB>
    8a8a:	20 f0       	brcs	.+8      	; 0x8a94 <__addsf3+0x18>
    8a8c:	31 f4       	brne	.+12     	; 0x8a9a <__addsf3+0x1e>
    8a8e:	9f 3f       	cpi	r25, 0xFF	; 255
    8a90:	11 f4       	brne	.+4      	; 0x8a96 <__addsf3+0x1a>
    8a92:	1e f4       	brtc	.+6      	; 0x8a9a <__addsf3+0x1e>
    8a94:	5b c1       	rjmp	.+694    	; 0x8d4c <__fp_nan>
    8a96:	0e f4       	brtc	.+2      	; 0x8a9a <__addsf3+0x1e>
    8a98:	e0 95       	com	r30
    8a9a:	e7 fb       	bst	r30, 7
    8a9c:	51 c1       	rjmp	.+674    	; 0x8d40 <__fp_inf>

00008a9e <__addsf3x>:
    8a9e:	e9 2f       	mov	r30, r25
    8aa0:	77 d1       	rcall	.+750    	; 0x8d90 <__fp_split3>
    8aa2:	80 f3       	brcs	.-32     	; 0x8a84 <__addsf3+0x8>
    8aa4:	ba 17       	cp	r27, r26
    8aa6:	62 07       	cpc	r22, r18
    8aa8:	73 07       	cpc	r23, r19
    8aaa:	84 07       	cpc	r24, r20
    8aac:	95 07       	cpc	r25, r21
    8aae:	18 f0       	brcs	.+6      	; 0x8ab6 <__addsf3x+0x18>
    8ab0:	71 f4       	brne	.+28     	; 0x8ace <__addsf3x+0x30>
    8ab2:	9e f5       	brtc	.+102    	; 0x8b1a <__addsf3x+0x7c>
    8ab4:	8f c1       	rjmp	.+798    	; 0x8dd4 <__fp_zero>
    8ab6:	0e f4       	brtc	.+2      	; 0x8aba <__addsf3x+0x1c>
    8ab8:	e0 95       	com	r30
    8aba:	0b 2e       	mov	r0, r27
    8abc:	ba 2f       	mov	r27, r26
    8abe:	a0 2d       	mov	r26, r0
    8ac0:	0b 01       	movw	r0, r22
    8ac2:	b9 01       	movw	r22, r18
    8ac4:	90 01       	movw	r18, r0
    8ac6:	0c 01       	movw	r0, r24
    8ac8:	ca 01       	movw	r24, r20
    8aca:	a0 01       	movw	r20, r0
    8acc:	11 24       	eor	r1, r1
    8ace:	ff 27       	eor	r31, r31
    8ad0:	59 1b       	sub	r21, r25
    8ad2:	99 f0       	breq	.+38     	; 0x8afa <__addsf3x+0x5c>
    8ad4:	59 3f       	cpi	r21, 0xF9	; 249
    8ad6:	50 f4       	brcc	.+20     	; 0x8aec <__addsf3x+0x4e>
    8ad8:	50 3e       	cpi	r21, 0xE0	; 224
    8ada:	68 f1       	brcs	.+90     	; 0x8b36 <__addsf3x+0x98>
    8adc:	1a 16       	cp	r1, r26
    8ade:	f0 40       	sbci	r31, 0x00	; 0
    8ae0:	a2 2f       	mov	r26, r18
    8ae2:	23 2f       	mov	r18, r19
    8ae4:	34 2f       	mov	r19, r20
    8ae6:	44 27       	eor	r20, r20
    8ae8:	58 5f       	subi	r21, 0xF8	; 248
    8aea:	f3 cf       	rjmp	.-26     	; 0x8ad2 <__addsf3x+0x34>
    8aec:	46 95       	lsr	r20
    8aee:	37 95       	ror	r19
    8af0:	27 95       	ror	r18
    8af2:	a7 95       	ror	r26
    8af4:	f0 40       	sbci	r31, 0x00	; 0
    8af6:	53 95       	inc	r21
    8af8:	c9 f7       	brne	.-14     	; 0x8aec <__addsf3x+0x4e>
    8afa:	7e f4       	brtc	.+30     	; 0x8b1a <__addsf3x+0x7c>
    8afc:	1f 16       	cp	r1, r31
    8afe:	ba 0b       	sbc	r27, r26
    8b00:	62 0b       	sbc	r22, r18
    8b02:	73 0b       	sbc	r23, r19
    8b04:	84 0b       	sbc	r24, r20
    8b06:	ba f0       	brmi	.+46     	; 0x8b36 <__addsf3x+0x98>
    8b08:	91 50       	subi	r25, 0x01	; 1
    8b0a:	a1 f0       	breq	.+40     	; 0x8b34 <__addsf3x+0x96>
    8b0c:	ff 0f       	add	r31, r31
    8b0e:	bb 1f       	adc	r27, r27
    8b10:	66 1f       	adc	r22, r22
    8b12:	77 1f       	adc	r23, r23
    8b14:	88 1f       	adc	r24, r24
    8b16:	c2 f7       	brpl	.-16     	; 0x8b08 <__addsf3x+0x6a>
    8b18:	0e c0       	rjmp	.+28     	; 0x8b36 <__addsf3x+0x98>
    8b1a:	ba 0f       	add	r27, r26
    8b1c:	62 1f       	adc	r22, r18
    8b1e:	73 1f       	adc	r23, r19
    8b20:	84 1f       	adc	r24, r20
    8b22:	48 f4       	brcc	.+18     	; 0x8b36 <__addsf3x+0x98>
    8b24:	87 95       	ror	r24
    8b26:	77 95       	ror	r23
    8b28:	67 95       	ror	r22
    8b2a:	b7 95       	ror	r27
    8b2c:	f7 95       	ror	r31
    8b2e:	9e 3f       	cpi	r25, 0xFE	; 254
    8b30:	08 f0       	brcs	.+2      	; 0x8b34 <__addsf3x+0x96>
    8b32:	b3 cf       	rjmp	.-154    	; 0x8a9a <__addsf3+0x1e>
    8b34:	93 95       	inc	r25
    8b36:	88 0f       	add	r24, r24
    8b38:	08 f0       	brcs	.+2      	; 0x8b3c <__addsf3x+0x9e>
    8b3a:	99 27       	eor	r25, r25
    8b3c:	ee 0f       	add	r30, r30
    8b3e:	97 95       	ror	r25
    8b40:	87 95       	ror	r24
    8b42:	08 95       	ret

00008b44 <__cmpsf2>:
    8b44:	d9 d0       	rcall	.+434    	; 0x8cf8 <__fp_cmp>
    8b46:	08 f4       	brcc	.+2      	; 0x8b4a <__cmpsf2+0x6>
    8b48:	81 e0       	ldi	r24, 0x01	; 1
    8b4a:	08 95       	ret

00008b4c <__divsf3>:
    8b4c:	0c d0       	rcall	.+24     	; 0x8b66 <__divsf3x>
    8b4e:	0f c1       	rjmp	.+542    	; 0x8d6e <__fp_round>
    8b50:	07 d1       	rcall	.+526    	; 0x8d60 <__fp_pscB>
    8b52:	40 f0       	brcs	.+16     	; 0x8b64 <__divsf3+0x18>
    8b54:	fe d0       	rcall	.+508    	; 0x8d52 <__fp_pscA>
    8b56:	30 f0       	brcs	.+12     	; 0x8b64 <__divsf3+0x18>
    8b58:	21 f4       	brne	.+8      	; 0x8b62 <__divsf3+0x16>
    8b5a:	5f 3f       	cpi	r21, 0xFF	; 255
    8b5c:	19 f0       	breq	.+6      	; 0x8b64 <__divsf3+0x18>
    8b5e:	f0 c0       	rjmp	.+480    	; 0x8d40 <__fp_inf>
    8b60:	51 11       	cpse	r21, r1
    8b62:	39 c1       	rjmp	.+626    	; 0x8dd6 <__fp_szero>
    8b64:	f3 c0       	rjmp	.+486    	; 0x8d4c <__fp_nan>

00008b66 <__divsf3x>:
    8b66:	14 d1       	rcall	.+552    	; 0x8d90 <__fp_split3>
    8b68:	98 f3       	brcs	.-26     	; 0x8b50 <__divsf3+0x4>

00008b6a <__divsf3_pse>:
    8b6a:	99 23       	and	r25, r25
    8b6c:	c9 f3       	breq	.-14     	; 0x8b60 <__divsf3+0x14>
    8b6e:	55 23       	and	r21, r21
    8b70:	b1 f3       	breq	.-20     	; 0x8b5e <__divsf3+0x12>
    8b72:	95 1b       	sub	r25, r21
    8b74:	55 0b       	sbc	r21, r21
    8b76:	bb 27       	eor	r27, r27
    8b78:	aa 27       	eor	r26, r26
    8b7a:	62 17       	cp	r22, r18
    8b7c:	73 07       	cpc	r23, r19
    8b7e:	84 07       	cpc	r24, r20
    8b80:	38 f0       	brcs	.+14     	; 0x8b90 <__divsf3_pse+0x26>
    8b82:	9f 5f       	subi	r25, 0xFF	; 255
    8b84:	5f 4f       	sbci	r21, 0xFF	; 255
    8b86:	22 0f       	add	r18, r18
    8b88:	33 1f       	adc	r19, r19
    8b8a:	44 1f       	adc	r20, r20
    8b8c:	aa 1f       	adc	r26, r26
    8b8e:	a9 f3       	breq	.-22     	; 0x8b7a <__divsf3_pse+0x10>
    8b90:	33 d0       	rcall	.+102    	; 0x8bf8 <__divsf3_pse+0x8e>
    8b92:	0e 2e       	mov	r0, r30
    8b94:	3a f0       	brmi	.+14     	; 0x8ba4 <__divsf3_pse+0x3a>
    8b96:	e0 e8       	ldi	r30, 0x80	; 128
    8b98:	30 d0       	rcall	.+96     	; 0x8bfa <__divsf3_pse+0x90>
    8b9a:	91 50       	subi	r25, 0x01	; 1
    8b9c:	50 40       	sbci	r21, 0x00	; 0
    8b9e:	e6 95       	lsr	r30
    8ba0:	00 1c       	adc	r0, r0
    8ba2:	ca f7       	brpl	.-14     	; 0x8b96 <__divsf3_pse+0x2c>
    8ba4:	29 d0       	rcall	.+82     	; 0x8bf8 <__divsf3_pse+0x8e>
    8ba6:	fe 2f       	mov	r31, r30
    8ba8:	27 d0       	rcall	.+78     	; 0x8bf8 <__divsf3_pse+0x8e>
    8baa:	66 0f       	add	r22, r22
    8bac:	77 1f       	adc	r23, r23
    8bae:	88 1f       	adc	r24, r24
    8bb0:	bb 1f       	adc	r27, r27
    8bb2:	26 17       	cp	r18, r22
    8bb4:	37 07       	cpc	r19, r23
    8bb6:	48 07       	cpc	r20, r24
    8bb8:	ab 07       	cpc	r26, r27
    8bba:	b0 e8       	ldi	r27, 0x80	; 128
    8bbc:	09 f0       	breq	.+2      	; 0x8bc0 <__divsf3_pse+0x56>
    8bbe:	bb 0b       	sbc	r27, r27
    8bc0:	80 2d       	mov	r24, r0
    8bc2:	bf 01       	movw	r22, r30
    8bc4:	ff 27       	eor	r31, r31
    8bc6:	93 58       	subi	r25, 0x83	; 131
    8bc8:	5f 4f       	sbci	r21, 0xFF	; 255
    8bca:	2a f0       	brmi	.+10     	; 0x8bd6 <__divsf3_pse+0x6c>
    8bcc:	9e 3f       	cpi	r25, 0xFE	; 254
    8bce:	51 05       	cpc	r21, r1
    8bd0:	68 f0       	brcs	.+26     	; 0x8bec <__divsf3_pse+0x82>
    8bd2:	b6 c0       	rjmp	.+364    	; 0x8d40 <__fp_inf>
    8bd4:	00 c1       	rjmp	.+512    	; 0x8dd6 <__fp_szero>
    8bd6:	5f 3f       	cpi	r21, 0xFF	; 255
    8bd8:	ec f3       	brlt	.-6      	; 0x8bd4 <__divsf3_pse+0x6a>
    8bda:	98 3e       	cpi	r25, 0xE8	; 232
    8bdc:	dc f3       	brlt	.-10     	; 0x8bd4 <__divsf3_pse+0x6a>
    8bde:	86 95       	lsr	r24
    8be0:	77 95       	ror	r23
    8be2:	67 95       	ror	r22
    8be4:	b7 95       	ror	r27
    8be6:	f7 95       	ror	r31
    8be8:	9f 5f       	subi	r25, 0xFF	; 255
    8bea:	c9 f7       	brne	.-14     	; 0x8bde <__divsf3_pse+0x74>
    8bec:	88 0f       	add	r24, r24
    8bee:	91 1d       	adc	r25, r1
    8bf0:	96 95       	lsr	r25
    8bf2:	87 95       	ror	r24
    8bf4:	97 f9       	bld	r25, 7
    8bf6:	08 95       	ret
    8bf8:	e1 e0       	ldi	r30, 0x01	; 1
    8bfa:	66 0f       	add	r22, r22
    8bfc:	77 1f       	adc	r23, r23
    8bfe:	88 1f       	adc	r24, r24
    8c00:	bb 1f       	adc	r27, r27
    8c02:	62 17       	cp	r22, r18
    8c04:	73 07       	cpc	r23, r19
    8c06:	84 07       	cpc	r24, r20
    8c08:	ba 07       	cpc	r27, r26
    8c0a:	20 f0       	brcs	.+8      	; 0x8c14 <__divsf3_pse+0xaa>
    8c0c:	62 1b       	sub	r22, r18
    8c0e:	73 0b       	sbc	r23, r19
    8c10:	84 0b       	sbc	r24, r20
    8c12:	ba 0b       	sbc	r27, r26
    8c14:	ee 1f       	adc	r30, r30
    8c16:	88 f7       	brcc	.-30     	; 0x8bfa <__divsf3_pse+0x90>
    8c18:	e0 95       	com	r30
    8c1a:	08 95       	ret

00008c1c <__fixsfsi>:
    8c1c:	04 d0       	rcall	.+8      	; 0x8c26 <__fixunssfsi>
    8c1e:	68 94       	set
    8c20:	b1 11       	cpse	r27, r1
    8c22:	d9 c0       	rjmp	.+434    	; 0x8dd6 <__fp_szero>
    8c24:	08 95       	ret

00008c26 <__fixunssfsi>:
    8c26:	bc d0       	rcall	.+376    	; 0x8da0 <__fp_splitA>
    8c28:	88 f0       	brcs	.+34     	; 0x8c4c <__fixunssfsi+0x26>
    8c2a:	9f 57       	subi	r25, 0x7F	; 127
    8c2c:	90 f0       	brcs	.+36     	; 0x8c52 <__fixunssfsi+0x2c>
    8c2e:	b9 2f       	mov	r27, r25
    8c30:	99 27       	eor	r25, r25
    8c32:	b7 51       	subi	r27, 0x17	; 23
    8c34:	a0 f0       	brcs	.+40     	; 0x8c5e <__fixunssfsi+0x38>
    8c36:	d1 f0       	breq	.+52     	; 0x8c6c <__fixunssfsi+0x46>
    8c38:	66 0f       	add	r22, r22
    8c3a:	77 1f       	adc	r23, r23
    8c3c:	88 1f       	adc	r24, r24
    8c3e:	99 1f       	adc	r25, r25
    8c40:	1a f0       	brmi	.+6      	; 0x8c48 <__fixunssfsi+0x22>
    8c42:	ba 95       	dec	r27
    8c44:	c9 f7       	brne	.-14     	; 0x8c38 <__fixunssfsi+0x12>
    8c46:	12 c0       	rjmp	.+36     	; 0x8c6c <__fixunssfsi+0x46>
    8c48:	b1 30       	cpi	r27, 0x01	; 1
    8c4a:	81 f0       	breq	.+32     	; 0x8c6c <__fixunssfsi+0x46>
    8c4c:	c3 d0       	rcall	.+390    	; 0x8dd4 <__fp_zero>
    8c4e:	b1 e0       	ldi	r27, 0x01	; 1
    8c50:	08 95       	ret
    8c52:	c0 c0       	rjmp	.+384    	; 0x8dd4 <__fp_zero>
    8c54:	67 2f       	mov	r22, r23
    8c56:	78 2f       	mov	r23, r24
    8c58:	88 27       	eor	r24, r24
    8c5a:	b8 5f       	subi	r27, 0xF8	; 248
    8c5c:	39 f0       	breq	.+14     	; 0x8c6c <__fixunssfsi+0x46>
    8c5e:	b9 3f       	cpi	r27, 0xF9	; 249
    8c60:	cc f3       	brlt	.-14     	; 0x8c54 <__fixunssfsi+0x2e>
    8c62:	86 95       	lsr	r24
    8c64:	77 95       	ror	r23
    8c66:	67 95       	ror	r22
    8c68:	b3 95       	inc	r27
    8c6a:	d9 f7       	brne	.-10     	; 0x8c62 <__fixunssfsi+0x3c>
    8c6c:	3e f4       	brtc	.+14     	; 0x8c7c <__fixunssfsi+0x56>
    8c6e:	90 95       	com	r25
    8c70:	80 95       	com	r24
    8c72:	70 95       	com	r23
    8c74:	61 95       	neg	r22
    8c76:	7f 4f       	sbci	r23, 0xFF	; 255
    8c78:	8f 4f       	sbci	r24, 0xFF	; 255
    8c7a:	9f 4f       	sbci	r25, 0xFF	; 255
    8c7c:	08 95       	ret

00008c7e <__floatunsisf>:
    8c7e:	e8 94       	clt
    8c80:	09 c0       	rjmp	.+18     	; 0x8c94 <__floatsisf+0x12>

00008c82 <__floatsisf>:
    8c82:	97 fb       	bst	r25, 7
    8c84:	3e f4       	brtc	.+14     	; 0x8c94 <__floatsisf+0x12>
    8c86:	90 95       	com	r25
    8c88:	80 95       	com	r24
    8c8a:	70 95       	com	r23
    8c8c:	61 95       	neg	r22
    8c8e:	7f 4f       	sbci	r23, 0xFF	; 255
    8c90:	8f 4f       	sbci	r24, 0xFF	; 255
    8c92:	9f 4f       	sbci	r25, 0xFF	; 255
    8c94:	99 23       	and	r25, r25
    8c96:	a9 f0       	breq	.+42     	; 0x8cc2 <__floatsisf+0x40>
    8c98:	f9 2f       	mov	r31, r25
    8c9a:	96 e9       	ldi	r25, 0x96	; 150
    8c9c:	bb 27       	eor	r27, r27
    8c9e:	93 95       	inc	r25
    8ca0:	f6 95       	lsr	r31
    8ca2:	87 95       	ror	r24
    8ca4:	77 95       	ror	r23
    8ca6:	67 95       	ror	r22
    8ca8:	b7 95       	ror	r27
    8caa:	f1 11       	cpse	r31, r1
    8cac:	f8 cf       	rjmp	.-16     	; 0x8c9e <__floatsisf+0x1c>
    8cae:	fa f4       	brpl	.+62     	; 0x8cee <__floatsisf+0x6c>
    8cb0:	bb 0f       	add	r27, r27
    8cb2:	11 f4       	brne	.+4      	; 0x8cb8 <__floatsisf+0x36>
    8cb4:	60 ff       	sbrs	r22, 0
    8cb6:	1b c0       	rjmp	.+54     	; 0x8cee <__floatsisf+0x6c>
    8cb8:	6f 5f       	subi	r22, 0xFF	; 255
    8cba:	7f 4f       	sbci	r23, 0xFF	; 255
    8cbc:	8f 4f       	sbci	r24, 0xFF	; 255
    8cbe:	9f 4f       	sbci	r25, 0xFF	; 255
    8cc0:	16 c0       	rjmp	.+44     	; 0x8cee <__floatsisf+0x6c>
    8cc2:	88 23       	and	r24, r24
    8cc4:	11 f0       	breq	.+4      	; 0x8cca <__floatsisf+0x48>
    8cc6:	96 e9       	ldi	r25, 0x96	; 150
    8cc8:	11 c0       	rjmp	.+34     	; 0x8cec <__floatsisf+0x6a>
    8cca:	77 23       	and	r23, r23
    8ccc:	21 f0       	breq	.+8      	; 0x8cd6 <__floatsisf+0x54>
    8cce:	9e e8       	ldi	r25, 0x8E	; 142
    8cd0:	87 2f       	mov	r24, r23
    8cd2:	76 2f       	mov	r23, r22
    8cd4:	05 c0       	rjmp	.+10     	; 0x8ce0 <__floatsisf+0x5e>
    8cd6:	66 23       	and	r22, r22
    8cd8:	71 f0       	breq	.+28     	; 0x8cf6 <__floatsisf+0x74>
    8cda:	96 e8       	ldi	r25, 0x86	; 134
    8cdc:	86 2f       	mov	r24, r22
    8cde:	70 e0       	ldi	r23, 0x00	; 0
    8ce0:	60 e0       	ldi	r22, 0x00	; 0
    8ce2:	2a f0       	brmi	.+10     	; 0x8cee <__floatsisf+0x6c>
    8ce4:	9a 95       	dec	r25
    8ce6:	66 0f       	add	r22, r22
    8ce8:	77 1f       	adc	r23, r23
    8cea:	88 1f       	adc	r24, r24
    8cec:	da f7       	brpl	.-10     	; 0x8ce4 <__floatsisf+0x62>
    8cee:	88 0f       	add	r24, r24
    8cf0:	96 95       	lsr	r25
    8cf2:	87 95       	ror	r24
    8cf4:	97 f9       	bld	r25, 7
    8cf6:	08 95       	ret

00008cf8 <__fp_cmp>:
    8cf8:	99 0f       	add	r25, r25
    8cfa:	00 08       	sbc	r0, r0
    8cfc:	55 0f       	add	r21, r21
    8cfe:	aa 0b       	sbc	r26, r26
    8d00:	e0 e8       	ldi	r30, 0x80	; 128
    8d02:	fe ef       	ldi	r31, 0xFE	; 254
    8d04:	16 16       	cp	r1, r22
    8d06:	17 06       	cpc	r1, r23
    8d08:	e8 07       	cpc	r30, r24
    8d0a:	f9 07       	cpc	r31, r25
    8d0c:	c0 f0       	brcs	.+48     	; 0x8d3e <__fp_cmp+0x46>
    8d0e:	12 16       	cp	r1, r18
    8d10:	13 06       	cpc	r1, r19
    8d12:	e4 07       	cpc	r30, r20
    8d14:	f5 07       	cpc	r31, r21
    8d16:	98 f0       	brcs	.+38     	; 0x8d3e <__fp_cmp+0x46>
    8d18:	62 1b       	sub	r22, r18
    8d1a:	73 0b       	sbc	r23, r19
    8d1c:	84 0b       	sbc	r24, r20
    8d1e:	95 0b       	sbc	r25, r21
    8d20:	39 f4       	brne	.+14     	; 0x8d30 <__fp_cmp+0x38>
    8d22:	0a 26       	eor	r0, r26
    8d24:	61 f0       	breq	.+24     	; 0x8d3e <__fp_cmp+0x46>
    8d26:	23 2b       	or	r18, r19
    8d28:	24 2b       	or	r18, r20
    8d2a:	25 2b       	or	r18, r21
    8d2c:	21 f4       	brne	.+8      	; 0x8d36 <__fp_cmp+0x3e>
    8d2e:	08 95       	ret
    8d30:	0a 26       	eor	r0, r26
    8d32:	09 f4       	brne	.+2      	; 0x8d36 <__fp_cmp+0x3e>
    8d34:	a1 40       	sbci	r26, 0x01	; 1
    8d36:	a6 95       	lsr	r26
    8d38:	8f ef       	ldi	r24, 0xFF	; 255
    8d3a:	81 1d       	adc	r24, r1
    8d3c:	81 1d       	adc	r24, r1
    8d3e:	08 95       	ret

00008d40 <__fp_inf>:
    8d40:	97 f9       	bld	r25, 7
    8d42:	9f 67       	ori	r25, 0x7F	; 127
    8d44:	80 e8       	ldi	r24, 0x80	; 128
    8d46:	70 e0       	ldi	r23, 0x00	; 0
    8d48:	60 e0       	ldi	r22, 0x00	; 0
    8d4a:	08 95       	ret

00008d4c <__fp_nan>:
    8d4c:	9f ef       	ldi	r25, 0xFF	; 255
    8d4e:	80 ec       	ldi	r24, 0xC0	; 192
    8d50:	08 95       	ret

00008d52 <__fp_pscA>:
    8d52:	00 24       	eor	r0, r0
    8d54:	0a 94       	dec	r0
    8d56:	16 16       	cp	r1, r22
    8d58:	17 06       	cpc	r1, r23
    8d5a:	18 06       	cpc	r1, r24
    8d5c:	09 06       	cpc	r0, r25
    8d5e:	08 95       	ret

00008d60 <__fp_pscB>:
    8d60:	00 24       	eor	r0, r0
    8d62:	0a 94       	dec	r0
    8d64:	12 16       	cp	r1, r18
    8d66:	13 06       	cpc	r1, r19
    8d68:	14 06       	cpc	r1, r20
    8d6a:	05 06       	cpc	r0, r21
    8d6c:	08 95       	ret

00008d6e <__fp_round>:
    8d6e:	09 2e       	mov	r0, r25
    8d70:	03 94       	inc	r0
    8d72:	00 0c       	add	r0, r0
    8d74:	11 f4       	brne	.+4      	; 0x8d7a <__fp_round+0xc>
    8d76:	88 23       	and	r24, r24
    8d78:	52 f0       	brmi	.+20     	; 0x8d8e <__fp_round+0x20>
    8d7a:	bb 0f       	add	r27, r27
    8d7c:	40 f4       	brcc	.+16     	; 0x8d8e <__fp_round+0x20>
    8d7e:	bf 2b       	or	r27, r31
    8d80:	11 f4       	brne	.+4      	; 0x8d86 <__fp_round+0x18>
    8d82:	60 ff       	sbrs	r22, 0
    8d84:	04 c0       	rjmp	.+8      	; 0x8d8e <__fp_round+0x20>
    8d86:	6f 5f       	subi	r22, 0xFF	; 255
    8d88:	7f 4f       	sbci	r23, 0xFF	; 255
    8d8a:	8f 4f       	sbci	r24, 0xFF	; 255
    8d8c:	9f 4f       	sbci	r25, 0xFF	; 255
    8d8e:	08 95       	ret

00008d90 <__fp_split3>:
    8d90:	57 fd       	sbrc	r21, 7
    8d92:	90 58       	subi	r25, 0x80	; 128
    8d94:	44 0f       	add	r20, r20
    8d96:	55 1f       	adc	r21, r21
    8d98:	59 f0       	breq	.+22     	; 0x8db0 <__fp_splitA+0x10>
    8d9a:	5f 3f       	cpi	r21, 0xFF	; 255
    8d9c:	71 f0       	breq	.+28     	; 0x8dba <__fp_splitA+0x1a>
    8d9e:	47 95       	ror	r20

00008da0 <__fp_splitA>:
    8da0:	88 0f       	add	r24, r24
    8da2:	97 fb       	bst	r25, 7
    8da4:	99 1f       	adc	r25, r25
    8da6:	61 f0       	breq	.+24     	; 0x8dc0 <__fp_splitA+0x20>
    8da8:	9f 3f       	cpi	r25, 0xFF	; 255
    8daa:	79 f0       	breq	.+30     	; 0x8dca <__fp_splitA+0x2a>
    8dac:	87 95       	ror	r24
    8dae:	08 95       	ret
    8db0:	12 16       	cp	r1, r18
    8db2:	13 06       	cpc	r1, r19
    8db4:	14 06       	cpc	r1, r20
    8db6:	55 1f       	adc	r21, r21
    8db8:	f2 cf       	rjmp	.-28     	; 0x8d9e <__fp_split3+0xe>
    8dba:	46 95       	lsr	r20
    8dbc:	f1 df       	rcall	.-30     	; 0x8da0 <__fp_splitA>
    8dbe:	08 c0       	rjmp	.+16     	; 0x8dd0 <__fp_splitA+0x30>
    8dc0:	16 16       	cp	r1, r22
    8dc2:	17 06       	cpc	r1, r23
    8dc4:	18 06       	cpc	r1, r24
    8dc6:	99 1f       	adc	r25, r25
    8dc8:	f1 cf       	rjmp	.-30     	; 0x8dac <__fp_splitA+0xc>
    8dca:	86 95       	lsr	r24
    8dcc:	71 05       	cpc	r23, r1
    8dce:	61 05       	cpc	r22, r1
    8dd0:	08 94       	sec
    8dd2:	08 95       	ret

00008dd4 <__fp_zero>:
    8dd4:	e8 94       	clt

00008dd6 <__fp_szero>:
    8dd6:	bb 27       	eor	r27, r27
    8dd8:	66 27       	eor	r22, r22
    8dda:	77 27       	eor	r23, r23
    8ddc:	cb 01       	movw	r24, r22
    8dde:	97 f9       	bld	r25, 7
    8de0:	08 95       	ret

00008de2 <__gesf2>:
    8de2:	8a df       	rcall	.-236    	; 0x8cf8 <__fp_cmp>
    8de4:	08 f4       	brcc	.+2      	; 0x8de8 <__gesf2+0x6>
    8de6:	8f ef       	ldi	r24, 0xFF	; 255
    8de8:	08 95       	ret

00008dea <__mulsf3>:
    8dea:	0b d0       	rcall	.+22     	; 0x8e02 <__mulsf3x>
    8dec:	c0 cf       	rjmp	.-128    	; 0x8d6e <__fp_round>
    8dee:	b1 df       	rcall	.-158    	; 0x8d52 <__fp_pscA>
    8df0:	28 f0       	brcs	.+10     	; 0x8dfc <__mulsf3+0x12>
    8df2:	b6 df       	rcall	.-148    	; 0x8d60 <__fp_pscB>
    8df4:	18 f0       	brcs	.+6      	; 0x8dfc <__mulsf3+0x12>
    8df6:	95 23       	and	r25, r21
    8df8:	09 f0       	breq	.+2      	; 0x8dfc <__mulsf3+0x12>
    8dfa:	a2 cf       	rjmp	.-188    	; 0x8d40 <__fp_inf>
    8dfc:	a7 cf       	rjmp	.-178    	; 0x8d4c <__fp_nan>
    8dfe:	11 24       	eor	r1, r1
    8e00:	ea cf       	rjmp	.-44     	; 0x8dd6 <__fp_szero>

00008e02 <__mulsf3x>:
    8e02:	c6 df       	rcall	.-116    	; 0x8d90 <__fp_split3>
    8e04:	a0 f3       	brcs	.-24     	; 0x8dee <__mulsf3+0x4>

00008e06 <__mulsf3_pse>:
    8e06:	95 9f       	mul	r25, r21
    8e08:	d1 f3       	breq	.-12     	; 0x8dfe <__mulsf3+0x14>
    8e0a:	95 0f       	add	r25, r21
    8e0c:	50 e0       	ldi	r21, 0x00	; 0
    8e0e:	55 1f       	adc	r21, r21
    8e10:	62 9f       	mul	r22, r18
    8e12:	f0 01       	movw	r30, r0
    8e14:	72 9f       	mul	r23, r18
    8e16:	bb 27       	eor	r27, r27
    8e18:	f0 0d       	add	r31, r0
    8e1a:	b1 1d       	adc	r27, r1
    8e1c:	63 9f       	mul	r22, r19
    8e1e:	aa 27       	eor	r26, r26
    8e20:	f0 0d       	add	r31, r0
    8e22:	b1 1d       	adc	r27, r1
    8e24:	aa 1f       	adc	r26, r26
    8e26:	64 9f       	mul	r22, r20
    8e28:	66 27       	eor	r22, r22
    8e2a:	b0 0d       	add	r27, r0
    8e2c:	a1 1d       	adc	r26, r1
    8e2e:	66 1f       	adc	r22, r22
    8e30:	82 9f       	mul	r24, r18
    8e32:	22 27       	eor	r18, r18
    8e34:	b0 0d       	add	r27, r0
    8e36:	a1 1d       	adc	r26, r1
    8e38:	62 1f       	adc	r22, r18
    8e3a:	73 9f       	mul	r23, r19
    8e3c:	b0 0d       	add	r27, r0
    8e3e:	a1 1d       	adc	r26, r1
    8e40:	62 1f       	adc	r22, r18
    8e42:	83 9f       	mul	r24, r19
    8e44:	a0 0d       	add	r26, r0
    8e46:	61 1d       	adc	r22, r1
    8e48:	22 1f       	adc	r18, r18
    8e4a:	74 9f       	mul	r23, r20
    8e4c:	33 27       	eor	r19, r19
    8e4e:	a0 0d       	add	r26, r0
    8e50:	61 1d       	adc	r22, r1
    8e52:	23 1f       	adc	r18, r19
    8e54:	84 9f       	mul	r24, r20
    8e56:	60 0d       	add	r22, r0
    8e58:	21 1d       	adc	r18, r1
    8e5a:	82 2f       	mov	r24, r18
    8e5c:	76 2f       	mov	r23, r22
    8e5e:	6a 2f       	mov	r22, r26
    8e60:	11 24       	eor	r1, r1
    8e62:	9f 57       	subi	r25, 0x7F	; 127
    8e64:	50 40       	sbci	r21, 0x00	; 0
    8e66:	8a f0       	brmi	.+34     	; 0x8e8a <__mulsf3_pse+0x84>
    8e68:	e1 f0       	breq	.+56     	; 0x8ea2 <__mulsf3_pse+0x9c>
    8e6a:	88 23       	and	r24, r24
    8e6c:	4a f0       	brmi	.+18     	; 0x8e80 <__mulsf3_pse+0x7a>
    8e6e:	ee 0f       	add	r30, r30
    8e70:	ff 1f       	adc	r31, r31
    8e72:	bb 1f       	adc	r27, r27
    8e74:	66 1f       	adc	r22, r22
    8e76:	77 1f       	adc	r23, r23
    8e78:	88 1f       	adc	r24, r24
    8e7a:	91 50       	subi	r25, 0x01	; 1
    8e7c:	50 40       	sbci	r21, 0x00	; 0
    8e7e:	a9 f7       	brne	.-22     	; 0x8e6a <__mulsf3_pse+0x64>
    8e80:	9e 3f       	cpi	r25, 0xFE	; 254
    8e82:	51 05       	cpc	r21, r1
    8e84:	70 f0       	brcs	.+28     	; 0x8ea2 <__mulsf3_pse+0x9c>
    8e86:	5c cf       	rjmp	.-328    	; 0x8d40 <__fp_inf>
    8e88:	a6 cf       	rjmp	.-180    	; 0x8dd6 <__fp_szero>
    8e8a:	5f 3f       	cpi	r21, 0xFF	; 255
    8e8c:	ec f3       	brlt	.-6      	; 0x8e88 <__mulsf3_pse+0x82>
    8e8e:	98 3e       	cpi	r25, 0xE8	; 232
    8e90:	dc f3       	brlt	.-10     	; 0x8e88 <__mulsf3_pse+0x82>
    8e92:	86 95       	lsr	r24
    8e94:	77 95       	ror	r23
    8e96:	67 95       	ror	r22
    8e98:	b7 95       	ror	r27
    8e9a:	f7 95       	ror	r31
    8e9c:	e7 95       	ror	r30
    8e9e:	9f 5f       	subi	r25, 0xFF	; 255
    8ea0:	c1 f7       	brne	.-16     	; 0x8e92 <__mulsf3_pse+0x8c>
    8ea2:	fe 2b       	or	r31, r30
    8ea4:	88 0f       	add	r24, r24
    8ea6:	91 1d       	adc	r25, r1
    8ea8:	96 95       	lsr	r25
    8eaa:	87 95       	ror	r24
    8eac:	97 f9       	bld	r25, 7
    8eae:	08 95       	ret

00008eb0 <__udivmodhi4>:
    8eb0:	aa 1b       	sub	r26, r26
    8eb2:	bb 1b       	sub	r27, r27
    8eb4:	51 e1       	ldi	r21, 0x11	; 17
    8eb6:	07 c0       	rjmp	.+14     	; 0x8ec6 <__udivmodhi4_ep>

00008eb8 <__udivmodhi4_loop>:
    8eb8:	aa 1f       	adc	r26, r26
    8eba:	bb 1f       	adc	r27, r27
    8ebc:	a6 17       	cp	r26, r22
    8ebe:	b7 07       	cpc	r27, r23
    8ec0:	10 f0       	brcs	.+4      	; 0x8ec6 <__udivmodhi4_ep>
    8ec2:	a6 1b       	sub	r26, r22
    8ec4:	b7 0b       	sbc	r27, r23

00008ec6 <__udivmodhi4_ep>:
    8ec6:	88 1f       	adc	r24, r24
    8ec8:	99 1f       	adc	r25, r25
    8eca:	5a 95       	dec	r21
    8ecc:	a9 f7       	brne	.-22     	; 0x8eb8 <__udivmodhi4_loop>
    8ece:	80 95       	com	r24
    8ed0:	90 95       	com	r25
    8ed2:	bc 01       	movw	r22, r24
    8ed4:	cd 01       	movw	r24, r26
    8ed6:	08 95       	ret

00008ed8 <__divmodhi4>:
    8ed8:	97 fb       	bst	r25, 7
    8eda:	07 2e       	mov	r0, r23
    8edc:	16 f4       	brtc	.+4      	; 0x8ee2 <__divmodhi4+0xa>
    8ede:	00 94       	com	r0
    8ee0:	07 d0       	rcall	.+14     	; 0x8ef0 <__divmodhi4_neg1>
    8ee2:	77 fd       	sbrc	r23, 7
    8ee4:	09 d0       	rcall	.+18     	; 0x8ef8 <__divmodhi4_neg2>
    8ee6:	0e 94 58 47 	call	0x8eb0	; 0x8eb0 <__udivmodhi4>
    8eea:	07 fc       	sbrc	r0, 7
    8eec:	05 d0       	rcall	.+10     	; 0x8ef8 <__divmodhi4_neg2>
    8eee:	3e f4       	brtc	.+14     	; 0x8efe <__divmodhi4_exit>

00008ef0 <__divmodhi4_neg1>:
    8ef0:	90 95       	com	r25
    8ef2:	81 95       	neg	r24
    8ef4:	9f 4f       	sbci	r25, 0xFF	; 255
    8ef6:	08 95       	ret

00008ef8 <__divmodhi4_neg2>:
    8ef8:	70 95       	com	r23
    8efa:	61 95       	neg	r22
    8efc:	7f 4f       	sbci	r23, 0xFF	; 255

00008efe <__divmodhi4_exit>:
    8efe:	08 95       	ret

00008f00 <__udivmodsi4>:
    8f00:	a1 e2       	ldi	r26, 0x21	; 33
    8f02:	1a 2e       	mov	r1, r26
    8f04:	aa 1b       	sub	r26, r26
    8f06:	bb 1b       	sub	r27, r27
    8f08:	fd 01       	movw	r30, r26
    8f0a:	0d c0       	rjmp	.+26     	; 0x8f26 <__udivmodsi4_ep>

00008f0c <__udivmodsi4_loop>:
    8f0c:	aa 1f       	adc	r26, r26
    8f0e:	bb 1f       	adc	r27, r27
    8f10:	ee 1f       	adc	r30, r30
    8f12:	ff 1f       	adc	r31, r31
    8f14:	a2 17       	cp	r26, r18
    8f16:	b3 07       	cpc	r27, r19
    8f18:	e4 07       	cpc	r30, r20
    8f1a:	f5 07       	cpc	r31, r21
    8f1c:	20 f0       	brcs	.+8      	; 0x8f26 <__udivmodsi4_ep>
    8f1e:	a2 1b       	sub	r26, r18
    8f20:	b3 0b       	sbc	r27, r19
    8f22:	e4 0b       	sbc	r30, r20
    8f24:	f5 0b       	sbc	r31, r21

00008f26 <__udivmodsi4_ep>:
    8f26:	66 1f       	adc	r22, r22
    8f28:	77 1f       	adc	r23, r23
    8f2a:	88 1f       	adc	r24, r24
    8f2c:	99 1f       	adc	r25, r25
    8f2e:	1a 94       	dec	r1
    8f30:	69 f7       	brne	.-38     	; 0x8f0c <__udivmodsi4_loop>
    8f32:	60 95       	com	r22
    8f34:	70 95       	com	r23
    8f36:	80 95       	com	r24
    8f38:	90 95       	com	r25
    8f3a:	9b 01       	movw	r18, r22
    8f3c:	ac 01       	movw	r20, r24
    8f3e:	bd 01       	movw	r22, r26
    8f40:	cf 01       	movw	r24, r30
    8f42:	08 95       	ret

00008f44 <__divmodsi4>:
    8f44:	05 2e       	mov	r0, r21
    8f46:	97 fb       	bst	r25, 7
    8f48:	1e f4       	brtc	.+6      	; 0x8f50 <__divmodsi4+0xc>
    8f4a:	00 94       	com	r0
    8f4c:	0e 94 b9 47 	call	0x8f72	; 0x8f72 <__negsi2>
    8f50:	57 fd       	sbrc	r21, 7
    8f52:	07 d0       	rcall	.+14     	; 0x8f62 <__divmodsi4_neg2>
    8f54:	0e 94 80 47 	call	0x8f00	; 0x8f00 <__udivmodsi4>
    8f58:	07 fc       	sbrc	r0, 7
    8f5a:	03 d0       	rcall	.+6      	; 0x8f62 <__divmodsi4_neg2>
    8f5c:	4e f4       	brtc	.+18     	; 0x8f70 <__divmodsi4_exit>
    8f5e:	0c 94 b9 47 	jmp	0x8f72	; 0x8f72 <__negsi2>

00008f62 <__divmodsi4_neg2>:
    8f62:	50 95       	com	r21
    8f64:	40 95       	com	r20
    8f66:	30 95       	com	r19
    8f68:	21 95       	neg	r18
    8f6a:	3f 4f       	sbci	r19, 0xFF	; 255
    8f6c:	4f 4f       	sbci	r20, 0xFF	; 255
    8f6e:	5f 4f       	sbci	r21, 0xFF	; 255

00008f70 <__divmodsi4_exit>:
    8f70:	08 95       	ret

00008f72 <__negsi2>:
    8f72:	90 95       	com	r25
    8f74:	80 95       	com	r24
    8f76:	70 95       	com	r23
    8f78:	61 95       	neg	r22
    8f7a:	7f 4f       	sbci	r23, 0xFF	; 255
    8f7c:	8f 4f       	sbci	r24, 0xFF	; 255
    8f7e:	9f 4f       	sbci	r25, 0xFF	; 255
    8f80:	08 95       	ret

00008f82 <__tablejump2__>:
    8f82:	ee 0f       	add	r30, r30
    8f84:	ff 1f       	adc	r31, r31

00008f86 <__tablejump__>:
    8f86:	05 90       	lpm	r0, Z+
    8f88:	f4 91       	lpm	r31, Z
    8f8a:	e0 2d       	mov	r30, r0
    8f8c:	09 94       	ijmp

00008f8e <__mulhisi3>:
    8f8e:	0e 94 cf 47 	call	0x8f9e	; 0x8f9e <__umulhisi3>
    8f92:	33 23       	and	r19, r19
    8f94:	12 f4       	brpl	.+4      	; 0x8f9a <__mulhisi3+0xc>
    8f96:	8a 1b       	sub	r24, r26
    8f98:	9b 0b       	sbc	r25, r27
    8f9a:	0c 94 e0 47 	jmp	0x8fc0	; 0x8fc0 <__usmulhisi3_tail>

00008f9e <__umulhisi3>:
    8f9e:	a2 9f       	mul	r26, r18
    8fa0:	b0 01       	movw	r22, r0
    8fa2:	b3 9f       	mul	r27, r19
    8fa4:	c0 01       	movw	r24, r0
    8fa6:	a3 9f       	mul	r26, r19
    8fa8:	70 0d       	add	r23, r0
    8faa:	81 1d       	adc	r24, r1
    8fac:	11 24       	eor	r1, r1
    8fae:	91 1d       	adc	r25, r1
    8fb0:	b2 9f       	mul	r27, r18
    8fb2:	70 0d       	add	r23, r0
    8fb4:	81 1d       	adc	r24, r1
    8fb6:	11 24       	eor	r1, r1
    8fb8:	91 1d       	adc	r25, r1
    8fba:	08 95       	ret

00008fbc <__usmulhisi3>:
    8fbc:	0e 94 cf 47 	call	0x8f9e	; 0x8f9e <__umulhisi3>

00008fc0 <__usmulhisi3_tail>:
    8fc0:	b7 ff       	sbrs	r27, 7
    8fc2:	08 95       	ret
    8fc4:	82 1b       	sub	r24, r18
    8fc6:	93 0b       	sbc	r25, r19
    8fc8:	08 95       	ret

00008fca <__muluhisi3>:
    8fca:	0e 94 cf 47 	call	0x8f9e	; 0x8f9e <__umulhisi3>
    8fce:	a5 9f       	mul	r26, r21
    8fd0:	90 0d       	add	r25, r0
    8fd2:	b4 9f       	mul	r27, r20
    8fd4:	90 0d       	add	r25, r0
    8fd6:	a4 9f       	mul	r26, r20
    8fd8:	80 0d       	add	r24, r0
    8fda:	91 1d       	adc	r25, r1
    8fdc:	11 24       	eor	r1, r1
    8fde:	08 95       	ret

00008fe0 <__mulshisi3>:
    8fe0:	b7 ff       	sbrs	r27, 7
    8fe2:	0c 94 e5 47 	jmp	0x8fca	; 0x8fca <__muluhisi3>

00008fe6 <__mulohisi3>:
    8fe6:	0e 94 e5 47 	call	0x8fca	; 0x8fca <__muluhisi3>
    8fea:	82 1b       	sub	r24, r18
    8fec:	93 0b       	sbc	r25, r19
    8fee:	08 95       	ret

00008ff0 <memcpy_P>:
    8ff0:	fb 01       	movw	r30, r22
    8ff2:	dc 01       	movw	r26, r24
    8ff4:	02 c0       	rjmp	.+4      	; 0x8ffa <memcpy_P+0xa>
    8ff6:	05 90       	lpm	r0, Z+
    8ff8:	0d 92       	st	X+, r0
    8ffa:	41 50       	subi	r20, 0x01	; 1
    8ffc:	50 40       	sbci	r21, 0x00	; 0
    8ffe:	d8 f7       	brcc	.-10     	; 0x8ff6 <memcpy_P+0x6>
    9000:	08 95       	ret

00009002 <memmove>:
    9002:	68 17       	cp	r22, r24
    9004:	79 07       	cpc	r23, r25
    9006:	68 f4       	brcc	.+26     	; 0x9022 <memmove+0x20>
    9008:	fb 01       	movw	r30, r22
    900a:	dc 01       	movw	r26, r24
    900c:	e4 0f       	add	r30, r20
    900e:	f5 1f       	adc	r31, r21
    9010:	a4 0f       	add	r26, r20
    9012:	b5 1f       	adc	r27, r21
    9014:	02 c0       	rjmp	.+4      	; 0x901a <memmove+0x18>
    9016:	02 90       	ld	r0, -Z
    9018:	0e 92       	st	-X, r0
    901a:	41 50       	subi	r20, 0x01	; 1
    901c:	50 40       	sbci	r21, 0x00	; 0
    901e:	d8 f7       	brcc	.-10     	; 0x9016 <memmove+0x14>
    9020:	08 95       	ret
    9022:	0c 94 5e 48 	jmp	0x90bc	; 0x90bc <memcpy>

00009026 <__itoa_ncheck>:
    9026:	bb 27       	eor	r27, r27
    9028:	4a 30       	cpi	r20, 0x0A	; 10
    902a:	31 f4       	brne	.+12     	; 0x9038 <__itoa_ncheck+0x12>
    902c:	99 23       	and	r25, r25
    902e:	22 f4       	brpl	.+8      	; 0x9038 <__itoa_ncheck+0x12>
    9030:	bd e2       	ldi	r27, 0x2D	; 45
    9032:	90 95       	com	r25
    9034:	81 95       	neg	r24
    9036:	9f 4f       	sbci	r25, 0xFF	; 255
    9038:	0c 94 1f 48 	jmp	0x903e	; 0x903e <__utoa_common>

0000903c <__utoa_ncheck>:
    903c:	bb 27       	eor	r27, r27

0000903e <__utoa_common>:
    903e:	fb 01       	movw	r30, r22
    9040:	55 27       	eor	r21, r21
    9042:	aa 27       	eor	r26, r26
    9044:	88 0f       	add	r24, r24
    9046:	99 1f       	adc	r25, r25
    9048:	aa 1f       	adc	r26, r26
    904a:	a4 17       	cp	r26, r20
    904c:	10 f0       	brcs	.+4      	; 0x9052 <__utoa_common+0x14>
    904e:	a4 1b       	sub	r26, r20
    9050:	83 95       	inc	r24
    9052:	50 51       	subi	r21, 0x10	; 16
    9054:	b9 f7       	brne	.-18     	; 0x9044 <__utoa_common+0x6>
    9056:	a0 5d       	subi	r26, 0xD0	; 208
    9058:	aa 33       	cpi	r26, 0x3A	; 58
    905a:	08 f0       	brcs	.+2      	; 0x905e <__utoa_common+0x20>
    905c:	a9 5d       	subi	r26, 0xD9	; 217
    905e:	a1 93       	st	Z+, r26
    9060:	00 97       	sbiw	r24, 0x00	; 0
    9062:	79 f7       	brne	.-34     	; 0x9042 <__utoa_common+0x4>
    9064:	b1 11       	cpse	r27, r1
    9066:	b1 93       	st	Z+, r27
    9068:	11 92       	st	Z+, r1
    906a:	cb 01       	movw	r24, r22
    906c:	0c 94 67 48 	jmp	0x90ce	; 0x90ce <strrev>

00009070 <__eerd_block_m644pa>:
    9070:	dc 01       	movw	r26, r24
    9072:	cb 01       	movw	r24, r22

00009074 <__eerd_blraw_m644pa>:
    9074:	fc 01       	movw	r30, r24
    9076:	f9 99       	sbic	0x1f, 1	; 31
    9078:	fe cf       	rjmp	.-4      	; 0x9076 <__eerd_blraw_m644pa+0x2>
    907a:	06 c0       	rjmp	.+12     	; 0x9088 <__eerd_blraw_m644pa+0x14>
    907c:	f2 bd       	out	0x22, r31	; 34
    907e:	e1 bd       	out	0x21, r30	; 33
    9080:	f8 9a       	sbi	0x1f, 0	; 31
    9082:	31 96       	adiw	r30, 0x01	; 1
    9084:	00 b4       	in	r0, 0x20	; 32
    9086:	0d 92       	st	X+, r0
    9088:	41 50       	subi	r20, 0x01	; 1
    908a:	50 40       	sbci	r21, 0x00	; 0
    908c:	b8 f7       	brcc	.-18     	; 0x907c <__eerd_blraw_m644pa+0x8>
    908e:	08 95       	ret

00009090 <__eerd_byte_m644pa>:
    9090:	f9 99       	sbic	0x1f, 1	; 31
    9092:	fe cf       	rjmp	.-4      	; 0x9090 <__eerd_byte_m644pa>
    9094:	92 bd       	out	0x22, r25	; 34
    9096:	81 bd       	out	0x21, r24	; 33
    9098:	f8 9a       	sbi	0x1f, 0	; 31
    909a:	99 27       	eor	r25, r25
    909c:	80 b5       	in	r24, 0x20	; 32
    909e:	08 95       	ret

000090a0 <__eewr_byte_m644pa>:
    90a0:	26 2f       	mov	r18, r22

000090a2 <__eewr_r18_m644pa>:
    90a2:	f9 99       	sbic	0x1f, 1	; 31
    90a4:	fe cf       	rjmp	.-4      	; 0x90a2 <__eewr_r18_m644pa>
    90a6:	1f ba       	out	0x1f, r1	; 31
    90a8:	92 bd       	out	0x22, r25	; 34
    90aa:	81 bd       	out	0x21, r24	; 33
    90ac:	20 bd       	out	0x20, r18	; 32
    90ae:	0f b6       	in	r0, 0x3f	; 63
    90b0:	f8 94       	cli
    90b2:	fa 9a       	sbi	0x1f, 2	; 31
    90b4:	f9 9a       	sbi	0x1f, 1	; 31
    90b6:	0f be       	out	0x3f, r0	; 63
    90b8:	01 96       	adiw	r24, 0x01	; 1
    90ba:	08 95       	ret

000090bc <memcpy>:
    90bc:	fb 01       	movw	r30, r22
    90be:	dc 01       	movw	r26, r24
    90c0:	02 c0       	rjmp	.+4      	; 0x90c6 <memcpy+0xa>
    90c2:	01 90       	ld	r0, Z+
    90c4:	0d 92       	st	X+, r0
    90c6:	41 50       	subi	r20, 0x01	; 1
    90c8:	50 40       	sbci	r21, 0x00	; 0
    90ca:	d8 f7       	brcc	.-10     	; 0x90c2 <memcpy+0x6>
    90cc:	08 95       	ret

000090ce <strrev>:
    90ce:	dc 01       	movw	r26, r24
    90d0:	fc 01       	movw	r30, r24
    90d2:	67 2f       	mov	r22, r23
    90d4:	71 91       	ld	r23, Z+
    90d6:	77 23       	and	r23, r23
    90d8:	e1 f7       	brne	.-8      	; 0x90d2 <strrev+0x4>
    90da:	32 97       	sbiw	r30, 0x02	; 2
    90dc:	04 c0       	rjmp	.+8      	; 0x90e6 <strrev+0x18>
    90de:	7c 91       	ld	r23, X
    90e0:	6d 93       	st	X+, r22
    90e2:	70 83       	st	Z, r23
    90e4:	62 91       	ld	r22, -Z
    90e6:	ae 17       	cp	r26, r30
    90e8:	bf 07       	cpc	r27, r31
    90ea:	c8 f3       	brcs	.-14     	; 0x90de <strrev+0x10>
    90ec:	08 95       	ret

000090ee <_exit>:
    90ee:	f8 94       	cli

000090f0 <__stop_program>:
    90f0:	ff cf       	rjmp	.-2      	; 0x90f0 <__stop_program>
