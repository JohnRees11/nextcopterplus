
OpenAeroVTOL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000412  00800100  0000930a  0000939e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000930a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000033b  00800512  00800512  000097b0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000097b0  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000660  00000000  00000000  000097e0  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000140f8  00000000  00000000  00009e40  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000356f  00000000  00000000  0001df38  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00003e2a  00000000  00000000  000214a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00001440  00000000  00000000  000252d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00002793  00000000  00000000  00026714  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00008cb9  00000000  00000000  00028ea7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000500  00000000  00000000  00031b60  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 39 0d 	jmp	0x1a72	; 0x1a72 <__ctors_end>
       4:	0c 94 5e 2b 	jmp	0x56bc	; 0x56bc <__vector_1>
       8:	0c 94 26 2b 	jmp	0x564c	; 0x564c <__vector_2>
       c:	0c 94 11 2c 	jmp	0x5822	; 0x5822 <__vector_3>
      10:	0c 94 5f 0d 	jmp	0x1abe	; 0x1abe <__bad_interrupt>
      14:	0c 94 d0 2b 	jmp	0x57a0	; 0x57a0 <__vector_5>
      18:	0c 94 5f 0d 	jmp	0x1abe	; 0x1abe <__bad_interrupt>
      1c:	0c 94 97 2b 	jmp	0x572e	; 0x572e <__vector_7>
      20:	0c 94 5f 0d 	jmp	0x1abe	; 0x1abe <__bad_interrupt>
      24:	0c 94 5f 0d 	jmp	0x1abe	; 0x1abe <__bad_interrupt>
      28:	0c 94 5f 0d 	jmp	0x1abe	; 0x1abe <__bad_interrupt>
      2c:	0c 94 5f 0d 	jmp	0x1abe	; 0x1abe <__bad_interrupt>
      30:	0c 94 5f 0d 	jmp	0x1abe	; 0x1abe <__bad_interrupt>
      34:	0c 94 5f 0d 	jmp	0x1abe	; 0x1abe <__bad_interrupt>
      38:	0c 94 5f 0d 	jmp	0x1abe	; 0x1abe <__bad_interrupt>
      3c:	0c 94 5f 0d 	jmp	0x1abe	; 0x1abe <__bad_interrupt>
      40:	0c 94 5f 0d 	jmp	0x1abe	; 0x1abe <__bad_interrupt>
      44:	0c 94 5f 0d 	jmp	0x1abe	; 0x1abe <__bad_interrupt>
      48:	0c 94 0f 2b 	jmp	0x561e	; 0x561e <__vector_18>
      4c:	0c 94 5f 0d 	jmp	0x1abe	; 0x1abe <__bad_interrupt>
      50:	0c 94 cd 2c 	jmp	0x599a	; 0x599a <__vector_20>
      54:	0c 94 5f 0d 	jmp	0x1abe	; 0x1abe <__bad_interrupt>
      58:	0c 94 5f 0d 	jmp	0x1abe	; 0x1abe <__bad_interrupt>
      5c:	0c 94 5f 0d 	jmp	0x1abe	; 0x1abe <__bad_interrupt>
      60:	0c 94 5f 0d 	jmp	0x1abe	; 0x1abe <__bad_interrupt>
      64:	0c 94 5f 0d 	jmp	0x1abe	; 0x1abe <__bad_interrupt>
      68:	0c 94 5f 0d 	jmp	0x1abe	; 0x1abe <__bad_interrupt>
      6c:	0c 94 5f 0d 	jmp	0x1abe	; 0x1abe <__bad_interrupt>
      70:	0c 94 5f 0d 	jmp	0x1abe	; 0x1abe <__bad_interrupt>
      74:	0c 94 5f 0d 	jmp	0x1abe	; 0x1abe <__bad_interrupt>
      78:	0c 94 5f 0d 	jmp	0x1abe	; 0x1abe <__bad_interrupt>
      7c:	0b 1a       	sub	r0, r27
      7e:	81 1a       	sub	r8, r17
      80:	81 1a       	sub	r8, r17
      82:	1d 1a       	sub	r1, r29
      84:	2b 1a       	sub	r2, r27
      86:	37 1a       	sub	r3, r23
      88:	32 1a       	sub	r3, r18
      8a:	45 1a       	sub	r4, r21
      8c:	52 1a       	sub	r5, r18
      8e:	57 1a       	sub	r5, r23
      90:	63 1a       	sub	r6, r19
      92:	33 33       	cpi	r19, 0x33	; 51
      94:	35 33       	cpi	r19, 0x35	; 53
      96:	38 33       	cpi	r19, 0x38	; 56
      98:	3a 33       	cpi	r19, 0x3A	; 58
      9a:	3c 33       	cpi	r19, 0x3C	; 60
      9c:	3e 33       	cpi	r19, 0x3E	; 62
      9e:	40 33       	cpi	r20, 0x30	; 48
      a0:	42 33       	cpi	r20, 0x32	; 50
      a2:	45 33       	cpi	r20, 0x35	; 53
      a4:	47 33       	cpi	r20, 0x37	; 55
      a6:	49 33       	cpi	r20, 0x39	; 57
      a8:	4b 33       	cpi	r20, 0x3B	; 59
      aa:	4d 33       	cpi	r20, 0x3D	; 61
      ac:	4f 33       	cpi	r20, 0x3F	; 63
      ae:	51 33       	cpi	r21, 0x31	; 49
      b0:	53 33       	cpi	r21, 0x33	; 51
      b2:	56 33       	cpi	r21, 0x36	; 54
      b4:	58 33       	cpi	r21, 0x38	; 56
      b6:	5a 33       	cpi	r21, 0x3A	; 58

000000b8 <Acc_Pol>:
      b8:	ff ff 01 ff 01 ff 01 ff ff 01 01 01 ff 01 01 ff     ................
      c8:	ff ff                                               ..

000000ca <ACC_RPY_Order>:
      ca:	00 01 02 02 00 01 00 01 02 00 01 02 01 00 02 00     ................
      da:	02 01                                               ..

000000dc <FUTABA>:
      dc:	01 02 00 03 04 05 06 07                             ........

000000e4 <JR>:
      e4:	00 01 02 03 04 05 06 07                             ........

000000ec <Trans_Matrix>:
      ec:	05 02 06 01 05 08 03 07 05                          .........

000000f5 <Wingdings>:
      f5:	01 02 41 05 0d 00 0f 00 22 00 33 00 44 00 4f 09     ..A.....".3.D.O.
     105:	01 00 03 00 07 00 0f 00 1f 00 0f 00 07 00 03 00     ................
     115:	01 00 08 1c 00 1c 00 1c 00 1c 00 7f 00 3e 00 1c     .............>..
     125:	00 08 00 08 08 00 1c 00 3e 00 7f 00 1c 00 1c 00     ........>.......
     135:	1c 00 1c 00 05 ff 01 fe 00 7c 00 38 00 10 00 0d     .........|.8....
     145:	40 00 60 00 70 00 78 00 7c 00 7e 00 7f 00 7e 00     @.`.p.x.|.~...~.
     155:	7c 00 78 00 70 00 60 00 40 00                       |.x.p.`.@.

0000015f <Verdana14>:
     15f:	01 02 20 5b 13 00 bb 00 c5 00 cc 00 cc 00 cc 00     .. [............
     16f:	cc 01 03 01 03 01 03 01 16 01 29 01 29 01 29 01     ..........).).).
     17f:	36 01 49 01 50 01 50 01 6f 01 88 01 a4 01 c0 01     6.I.P.P.o.......
     18f:	df 01 fb 02 1a 02 36 02 55 02 74 02 7b 02 7b 02     ......6.U.t.{.{.
     19f:	7b 02 7b 02 7b 02 94 02 94 02 bc 02 db 02 fd 03     {.{.{...........
     1af:	22 03 3e 03 5a 03 82 03 a1 03 b4 03 ca 03 ec 04     ".>.Z...........
     1bf:	08 04 2d 04 4c 04 74 04 8d 04 b5 04 d7 04 f9 05     ..-.L.t.........
     1cf:	1e 05 3d 05 65 05 99 05 bb 05 e0 06 02 06 02 06     ..=.e...........
     1df:	1b 06 1b 06 1b 06 1b 06 1b 06 34 06 50 06 69 06     ..........4.P.i.
     1ef:	85 06 a1 06 b4 06 d0 06 e9 06 f0 07 00 07 1c 07     ................
     1ff:	23 07 4e 07 67 07 86 07 a2 07 be 07 d1 07 ea 07     #.N.g...........
     20f:	fd 08 16 08 32 08 5d 08 79 08 95 03 00 00 00 00     ....2.].y.......
     21f:	00 00 00 00 00 02 fe 67 00 fe 67 00 12 78 00 00     .......g..g..x..
     22f:	fe 01 00 02 01 00 02 01 00 02 01 00 fe 41 00 78     .............A.x
     23f:	70 00 00 1c 00 00 07 00 e0 00 00 38 00 00 0e 1e     p..........8....
     24f:	00 82 7f 00 80 40 00 80 40 00 80 40 00 80 7f 00     .....@..@..@....
     25f:	00 1e 00 06 c0 1f 00 f8 ff 00 3c e0 01 07 00 07     ..........<.....
     26f:	03 00 06 01 00 04 06 01 00 04 03 00 06 07 00 07     ................
     27f:	3c e0 01 f8 ff 00 c0 1f 00 04 00 00 03 00 f0 03     <...............
     28f:	00 70 00 00 10 00 06 00 03 00 00 03 00 00 03 00     .p..............
     29f:	00 03 00 00 03 00 00 03 00 02 00 70 00 00 70 00     ...........p..p.
     2af:	0a f0 0f 00 fc 3f 00 0c 30 00 06 60 00 06 60 00     .....?..0..`..`.
     2bf:	06 60 00 06 60 00 0c 30 00 fc 3f 00 f0 0f 00 08     .`..`..0..?.....
     2cf:	18 60 00 18 60 00 18 60 00 fe 7f 00 fe 7f 00 00     .`..`..`........
     2df:	60 00 00 60 00 00 60 00 09 0c 70 00 06 78 00 06     `..`..`...p..x..
     2ef:	6c 00 06 66 00 06 63 00 8e 61 00 fc 60 00 78 60     l..f..c..a..`.x`
     2ff:	00 00 60 00 09 0c 30 00 06 60 00 06 60 00 86 61     ..`...0..`..`..a
     30f:	00 86 61 00 86 61 00 ce 73 00 7c 3f 00 38 1e 00     ..a..a..s.|?.8..
     31f:	0a 00 07 00 80 07 00 c0 07 00 f0 06 00 38 06 00     .............8..
     32f:	1c 06 00 fe 7f 00 fe 7f 00 00 06 00 00 06 00 09     ................
     33f:	00 30 00 fe 60 00 fe 60 00 c6 60 00 c6 60 00 c6     .0..`..`..`..`..
     34f:	60 00 c6 31 00 86 3f 00 06 0f 00 0a e0 0f 00 f0     `..1..?.........
     35f:	3f 00 9c 30 00 cc 60 00 c6 60 00 c6 60 00 c6 60     ?..0..`..`..`..`
     36f:	00 c6 31 00 86 3f 00 00 0f 00 09 06 00 00 06 40     ..1..?.........@
     37f:	00 06 70 00 06 7c 00 06 0f 00 c6 03 00 f6 00 00     ..p..|..........
     38f:	3e 00 00 0e 00 00 0a 38 1e 00 7c 3f 00 ce 71 00     >......8..|?..q.
     39f:	c6 60 00 c6 60 00 86 61 00 86 61 00 4e 73 00 7c     .`..`..a..a.Ns.|
     3af:	3f 00 38 1e 00 0a f0 00 00 fc 61 00 8c 63 00 06     ?.8.......a..c..
     3bf:	63 00 06 63 00 06 63 00 06 33 00 0c 39 00 fc 1f     c..c..c..3..9...
     3cf:	00 f0 07 00 02 70 70 00 70 70 00 08 0c 00 00 06     .....pp.pp......
     3df:	00 00 06 67 00 06 67 00 86 01 00 ce 00 00 fc 00     ...g..g.........
     3ef:	00 38 00 00 0d 00 40 00 00 78 00 00 3f 00 c0 07     .8....@..x..?...
     3ff:	00 f8 06 00 3e 06 00 06 06 00 3e 06 00 f8 06 00     ....>.....>.....
     40f:	c0 07 00 00 3f 00 00 78 00 00 40 00 0a fe 7f 00     ....?..x..@.....
     41f:	fe 7f 00 86 61 00 86 61 00 86 61 00 86 61 00 c6     ....a..a..a..a..
     42f:	61 00 7c 73 00 3c 3f 00 00 1e 00 0b e0 07 00 f8     a.|s.<?.........
     43f:	1f 00 1c 38 00 0c 30 00 06 60 00 06 60 00 06 60     ...8..0..`..`..`
     44f:	00 06 60 00 06 60 00 06 20 00 0c 30 00 0c fe 7f     ..`..`.. ..0....
     45f:	00 fe 7f 00 06 60 00 06 60 00 06 60 00 06 60 00     .....`..`..`..`.
     46f:	06 60 00 0e 70 00 0c 30 00 38 1c 00 f8 0f 00 e0     .`..p..0.8......
     47f:	07 00 09 fe 7f 00 fe 7f 00 c6 60 00 c6 60 00 c6     ..........`..`..
     48f:	60 00 c6 60 00 c6 60 00 c6 60 00 c6 60 00 09 fe     `..`..`..`..`...
     49f:	7f 00 fe 7f 00 86 01 00 86 01 00 86 01 00 86 01     ................
     4af:	00 86 01 00 86 01 00 06 00 00 0d e0 07 00 f8 1f     ................
     4bf:	00 3c 3c 00 0c 30 00 0e 70 00 06 60 00 06 60 00     .<<..0..p..`..`.
     4cf:	06 63 00 06 63 00 06 63 00 06 63 00 0c 3f 00 0c     .c..c..c..c..?..
     4df:	3f 00 0a fe 7f 00 fe 7f 00 c0 00 00 c0 00 00 c0     ?...............
     4ef:	00 00 c0 00 00 c0 00 00 c0 00 00 fe 7f 00 fe 7f     ................
     4ff:	00 06 06 60 00 06 60 00 fe 7f 00 fe 7f 00 06 60     ...`..`........`
     50f:	00 06 60 00 07 00 60 00 00 60 00 06 60 00 06 60     ..`...`..`..`..`
     51f:	00 06 70 00 fe 3f 00 fe 1f 00 0b fe 7f 00 fe 7f     ..p..?..........
     52f:	00 80 03 00 c0 01 00 e0 03 00 70 07 00 38 1c 00     ..........p..8..
     53f:	1c 38 00 0e 70 00 06 60 00 02 40 00 09 fe 7f 00     .8..p..`..@.....
     54f:	fe 7f 00 00 60 00 00 60 00 00 60 00 00 60 00 00     ....`..`..`..`..
     55f:	60 00 00 60 00 00 60 00 0c fe 7f 00 fe 7f 00 0e     `..`..`.........
     56f:	00 00 38 00 00 e0 01 00 80 07 00 00 07 00 e0 01     ..8.............
     57f:	00 38 00 00 0e 00 00 fe 7f 00 fe 7f 00 0a fe 7f     .8..............
     58f:	00 fe 7f 00 0e 00 00 3c 00 00 e0 00 00 80 03 00     .......<........
     59f:	00 1e 00 00 78 00 fe 7f 00 fe 7f 00 0d e0 07 00     ....x...........
     5af:	f8 1f 00 1c 38 00 0c 30 00 06 60 00 06 60 00 06     ....8..0..`..`..
     5bf:	60 00 06 60 00 06 60 00 0c 30 00 1c 38 00 f8 1f     `..`..`..0..8...
     5cf:	00 e0 07 00 08 fe 7f 00 fe 7f 00 06 03 00 06 03     ................
     5df:	00 06 03 00 8e 03 00 fc 01 00 f8 00 00 0d e0 07     ................
     5ef:	00 f8 1f 00 1c 38 00 0c 30 00 06 60 00 06 60 00     .....8..0..`..`.
     5ff:	06 60 00 06 e0 01 06 e0 03 0c 30 07 1c 38 06 f8     .`........0..8..
     60f:	1f 06 e0 07 06 0b fe 7f 00 fe 7f 00 86 01 00 86     ................
     61f:	01 00 86 01 00 86 07 00 ce 0e 00 fc 1c 00 78 70     ..............xp
     62f:	00 00 60 00 00 40 00 0b 78 30 00 fc 70 00 ce 60     ..`..@..x0..p..`
     63f:	00 86 61 00 86 61 00 86 61 00 86 61 00 86 61 00     ..a..a..a..a..a.
     64f:	06 33 00 0c 3f 00 00 1e 00 0c 06 00 00 06 00 00     .3..?...........
     65f:	06 00 00 06 00 00 06 00 00 fe 7f 00 fe 7f 00 06     ................
     66f:	00 00 06 00 00 06 00 00 06 00 00 06 00 00 0a fe     ................
     67f:	0f 00 fe 3f 00 00 70 00 00 60 00 00 60 00 00 60     ...?..p..`..`..`
     68f:	00 00 60 00 00 70 00 fe 3f 00 fe 0f 00 0d 02 00     ..`..p..?.......
     69f:	00 1e 00 00 fc 00 00 e0 03 00 80 1f 00 00 7c 00     ..............|.
     6af:	00 60 00 00 7c 00 80 1f 00 e0 03 00 fc 00 00 1e     .`..|...........
     6bf:	00 00 02 00 00 11 06 00 00 7e 00 00 f8 07 00 80     .........~......
     6cf:	3f 00 00 78 00 00 7c 00 c0 0f 00 7e 00 00 06 00     ?..x..|....~....
     6df:	00 7e 00 00 e0 07 00 00 7e 00 00 70 00 80 7f 00     .~......~..p....
     6ef:	f8 07 00 7e 00 00 06 00 00 0b 02 40 00 06 60 00     ...~.......@..`.
     6ff:	1e 78 00 38 1c 00 e0 07 00 80 01 00 e0 07 00 38     .x.8...........8
     70f:	1e 00 1e 78 00 06 60 00 02 40 00 0c 02 00 00 06     ...x..`..@......
     71f:	00 00 1e 00 00 78 00 00 e0 00 00 c0 7f 00 c0 7f     .....x..........
     72f:	00 e0 00 00 78 00 00 1e 00 00 06 00 00 02 00 00     ....x...........
     73f:	0b 06 70 00 06 78 00 06 7c 00 06 6e 00 06 67 00     ..p..x..|..n..g.
     74f:	c6 63 00 e6 60 00 76 60 00 3e 60 00 1e 60 00 0e     .c..`.v`.>`..`..
     75f:	60 00 08 03 00 00 1f 00 00 fe 00 00 f0 07 00 80     `...............
     76f:	3f 00 00 fc 01 00 e0 03 00 00 03 08 00 3c 00 30     ?............<.0
     77f:	7e 00 30 67 00 30 63 00 30 63 00 30 33 00 e0 7f     ~.0g.0c.0c.03...
     78f:	00 e0 7f 00 09 ff 7f 00 ff 7f 00 60 20 00 30 60     ...........` .0`
     79f:	00 30 60 00 30 60 00 70 70 00 e0 3f 00 c0 0f 00     .0`.0`.pp..?....
     7af:	08 80 0f 00 e0 3f 00 60 30 00 30 60 00 30 60 00     .....?.`0.0`.0`.
     7bf:	30 60 00 30 60 00 60 30 00 09 80 1f 00 e0 3f 00     0`.0`.`0......?.
     7cf:	70 70 00 30 60 00 30 60 00 30 60 00 30 30 00 ff     pp.0`.0`.0`.00..
     7df:	7f 00 ff 7f 00 09 80 0f 00 e0 3f 00 60 33 00 30     ..........?.`3.0
     7ef:	63 00 30 63 00 30 63 00 70 63 00 e0 63 00 c0 33     c.0c.0c.pc..c..3
     7ff:	00 06 30 00 00 fe 7f 00 ff 7f 00 33 00 00 33 00     ..0........3..3.
     80f:	00 03 00 00 09 80 1f 00 e0 3f 06 70 70 06 30 60     .........?.pp.0`
     81f:	06 30 60 06 30 60 06 30 30 07 f0 ff 03 f0 ff 01     .0`.0`.00.......
     82f:	08 ff 7f 00 ff 7f 00 60 00 00 30 00 00 30 00 00     .......`..0..0..
     83f:	30 00 00 f0 7f 00 e0 7f 00 02 f6 7f 00 f6 7f 00     0...............
     84f:	05 00 00 06 30 00 06 30 00 06 f6 ff 07 f6 ff 03     ....0..0........
     85f:	09 ff 7f 00 ff 7f 00 00 06 00 00 07 00 80 0f 00     ................
     86f:	c0 38 00 70 70 00 30 60 00 10 40 00 02 ff 7f 00     .8.pp.0`..@.....
     87f:	ff 7f 00 0e f0 7f 00 f0 7f 00 60 00 00 30 00 00     ..........`..0..
     88f:	30 00 00 30 00 00 f0 7f 00 e0 7f 00 60 00 00 30     0..0........`..0
     89f:	00 00 30 00 00 30 00 00 f0 7f 00 e0 7f 00 08 f0     ..0..0..........
     8af:	7f 00 f0 7f 00 60 00 00 30 00 00 30 00 00 30 00     .....`..0..0..0.
     8bf:	00 f0 7f 00 e0 7f 00 0a 80 0f 00 e0 3f 00 60 30     ............?.`0
     8cf:	00 30 60 00 30 60 00 30 60 00 30 60 00 60 30 00     .0`.0`.0`.0`.`0.
     8df:	e0 3f 00 80 0f 00 09 f0 ff 07 f0 ff 07 60 60 00     .?...........``.
     8ef:	30 60 00 30 60 00 30 60 00 70 70 00 e0 3f 00 c0     0`.0`.0`.pp..?..
     8ff:	0f 00 09 80 1f 00 e0 3f 00 70 70 00 30 60 00 30     .......?.pp.0`.0
     90f:	60 00 30 60 00 30 30 00 f0 ff 07 f0 ff 07 06 f0     `.0`.00.........
     91f:	7f 00 f0 7f 00 60 00 00 30 00 00 30 00 00 30 00     .....`..0..0..0.
     92f:	00 08 c0 31 00 e0 63 00 30 63 00 30 63 00 30 66     ...1..c.0c.0c.0f
     93f:	00 30 66 00 30 3e 00 60 1c 00 06 30 00 00 fe 3f     .0f.0>.`...0...?
     94f:	00 fe 7f 00 30 60 00 30 60 00 30 60 00 08 f0 1f     ....0`.0`.0`....
     95f:	00 f0 7f 00 00 60 00 00 60 00 00 60 00 00 30 00     .....`..`..`..0.
     96f:	f0 7f 00 f0 7f 00 09 10 00 00 f0 00 00 e0 07 00     ................
     97f:	00 3e 00 00 60 00 00 3e 00 e0 07 00 f0 00 00 10     .>..`..>........
     98f:	00 00 0e 30 00 00 f0 03 00 c0 3f 00 00 78 00 00     ...0......?..x..
     99f:	7c 00 80 07 00 f0 00 00 f0 00 00 c0 07 00 00 3c     |..............<
     9af:	00 00 70 00 c0 3f 00 f0 03 00 30 00 00 09 10 40     ..p..?....0....@
     9bf:	00 30 60 00 f0 78 00 c0 1d 00 00 07 00 c0 1d 00     .0`..x..........
     9cf:	f0 78 00 30 60 00 10 40 00 09 10 00 00 f0 00 00     .x.0`..@........
     9df:	e0 07 06 00 bf 07 00 f0 01 00 3f 00 e0 07 00 f0     ..........?.....
     9ef:	00 00 10 00 00 08 30 70 00 30 78 00 30 7c 00 30     ......0p.0x.0|.0
     9ff:	66 00 30 63 00 f0 61 00 f0 60 00 70 60 00           f.0c..a..`.p`.

00000a0d <Verdana8>:
     a0d:	01 02 20 5b 0b 00 bb 00 be 00 c1 00 c1 00 c1 00     .. [............
     a1d:	c1 00 d6 00 d6 00 d6 00 dd 00 e4 00 e4 00 e4 00     ................
     a2d:	e9 00 f0 00 f3 00 f3 00 fe 01 09 01 14 01 1f 01     ................
     a3d:	2c 01 37 01 42 01 4d 01 58 01 63 01 66 01 66 01     ,.7.B.M.X.c.f.f.
     a4d:	66 01 66 01 66 01 6f 01 6f 01 7c 01 89 01 98 01     f.f.f.o.o.|.....
     a5d:	a7 01 b2 01 bd 01 cc 01 d9 01 e0 01 e9 01 f6 02     ................
     a6d:	01 02 10 02 1d 02 2c 02 37 02 46 02 53 02 60 02     ......,.7.F.S.`.
     a7d:	6f 02 7c 02 89 02 9c 02 a9 02 b8 02 c5 02 c5 02     o.|.............
     a8d:	c5 02 c5 02 c5 02 c5 02 c5 02 d0 02 db 02 e6 02     ................
     a9d:	f1 02 fc 03 05 03 10 03 1b 03 1e 03 25 03 30 03     ............%.0.
     aad:	33 03 46 03 51 03 5c 03 67 03 72 03 7b 03 84 03     3.F.Q.\.g.r.{...
     abd:	8d 03 98 03 a3 03 b2 03 bd 03 c8 01 00 00 01 7e     ...............~
     acd:	01 0a 0c 00 12 00 12 00 8c 01 60 00 18 00 c6 00     ..........`.....
     add:	20 01 20 01 c0 00 03 f8 00 06 03 01 04 03 01 04      . .............
     aed:	06 03 f8 00 02 00 04 80 03 03 20 00 20 00 20 00     .......... . . .
     afd:	01 80 01 05 fc 00 02 01 02 01 02 01 fc 00 05 04     ................
     b0d:	01 04 01 fe 01 00 01 00 01 05 84 01 42 01 22 01     ............B.".
     b1d:	12 01 0c 01 05 84 00 02 01 12 01 12 01 ec 00 06     ................
     b2d:	60 00 50 00 48 00 44 00 fe 01 40 00 05 9e 00 12     `.P.H.D...@.....
     b3d:	01 12 01 12 01 e2 00 05 f8 00 14 01 12 01 12 01     ................
     b4d:	e0 00 05 02 00 82 01 62 00 1a 00 06 00 05 ec 00     .......b........
     b5d:	12 01 12 01 12 01 ec 00 05 1c 00 22 01 22 01 a2     ..........."."..
     b6d:	00 7c 00 01 98 01 04 02 00 62 01 12 00 0c 00 06     .|.......b......
     b7d:	c0 01 78 00 46 00 46 00 78 00 c0 01 06 fe 01 12     ..x.F.F.x.......
     b8d:	01 12 01 12 01 1c 01 e0 00 07 78 00 84 00 02 01     ..........x.....
     b9d:	02 01 02 01 02 01 84 00 07 fe 01 02 01 02 01 02     ................
     bad:	01 02 01 84 00 78 00 05 fe 01 12 01 12 01 12 01     .....x..........
     bbd:	12 01 05 fe 01 12 00 12 00 12 00 02 00 07 78 00     ..............x.
     bcd:	84 00 02 01 02 01 22 01 22 01 e4 00 06 fe 01 10     ......".".......
     bdd:	00 10 00 10 00 10 00 fe 01 03 02 01 fe 01 02 01     ................
     bed:	04 00 01 02 01 02 01 fe 00 06 fe 01 20 00 30 00     ............ .0.
     bfd:	48 00 84 00 02 01 05 fe 01 00 01 00 01 00 01 00     H...............
     c0d:	01 07 fe 01 06 00 18 00 60 00 18 00 06 00 fe 01     ........`.......
     c1d:	06 fe 01 06 00 18 00 60 00 80 01 fe 01 07 78 00     .......`......x.
     c2d:	84 00 02 01 02 01 02 01 84 00 78 00 05 fe 01 22     ..........x...."
     c3d:	00 22 00 22 00 1c 00 07 78 00 84 00 02 01 02 01     ."."....x.......
     c4d:	02 03 84 04 78 04 06 fe 01 22 00 22 00 62 00 9c     ....x....".".b..
     c5d:	00 00 01 06 8c 00 12 01 12 01 22 01 22 01 c4 00     .........."."...
     c6d:	07 02 00 02 00 02 00 fe 01 02 00 02 00 02 00 06     ................
     c7d:	fe 00 00 01 00 01 00 01 00 01 fe 00 06 0e 00 70     ...............p
     c8d:	00 80 01 80 01 70 00 0e 00 09 06 00 78 00 80 01     .....p......x...
     c9d:	78 00 06 00 78 00 80 01 78 00 06 00 06 86 01 48     x...x...x......H
     cad:	00 30 00 30 00 48 00 86 01 07 02 00 04 00 08 00     .0.0.H..........
     cbd:	f0 01 08 00 04 00 02 00 06 82 01 42 01 22 01 12     ...........B."..
     ccd:	01 0a 01 06 01 05 c0 00 28 01 28 01 28 01 f0 01     ........(.(.(...
     cdd:	05 ff 01 08 01 08 01 08 01 f0 00 05 f0 00 08 01     ................
     ced:	08 01 08 01 90 00 05 f0 00 08 01 08 01 08 01 ff     ................
     cfd:	01 05 f0 00 28 01 28 01 28 01 b0 00 04 08 00 fe     ....(.(.(.......
     d0d:	01 09 00 09 00 05 f0 00 08 05 08 05 08 05 f8 03     ................
     d1d:	05 ff 01 08 00 08 00 08 00 f0 01 01 f9 01 03 00     ................
     d2d:	04 08 04 f9 03 05 ff 01 40 00 60 00 90 00 08 01     ........@.`.....
     d3d:	01 ff 01 09 f8 01 08 00 08 00 08 00 f0 01 08 00     ................
     d4d:	08 00 08 00 f0 01 05 f8 01 08 00 08 00 08 00 f0     ................
     d5d:	01 05 f0 00 08 01 08 01 08 01 f0 00 05 f8 07 08     ................
     d6d:	01 08 01 08 01 f0 00 05 f0 00 08 01 08 01 08 01     ................
     d7d:	f8 07 04 f8 01 10 00 08 00 08 00 04 30 01 28 01     ............0.(.
     d8d:	48 01 c8 00 04 08 00 fe 00 08 01 08 01 05 f8 00     H...............
     d9d:	00 01 00 01 00 01 f8 01 05 18 00 60 00 80 01 60     ...........`...`
     dad:	00 18 00 07 78 00 80 01 60 00 18 00 60 00 80 01     ....x...`...`...
     dbd:	78 00 05 08 01 90 00 60 00 90 00 08 01 05 08 00     x......`........
     dcd:	70 04 80 03 70 00 08 00 04 88 01 48 01 28 01 18     p...p......H.(..
     ddd:	01                                                  .

00000dde <lcd_commmands>:
     dde:	af 40 a0 a6 a4 a2 ee c8 2f 24 ac 00 f8 00           .@....../$....

00000dec <pagemap>:
     dec:	07 06 05 04 03 02 01 00                             ........

00000df4 <text_menu>:
     df4:	19 15 2a 10 25 10 20 10 1b 10 16 10 2f 10 2f 10     ..*.%. ....././.
     e04:	2f 10 72 17 6a 17 70 17 6e 17 6c 17 65 17 60 17     /.r.j.p.n.l.e.`.
     e14:	5b 17 56 17 9b 11 bb 11 b6 11 b0 11 de 14 7c 17     [.V...........|.
     e24:	74 17 e8 15 05 16 00 16 fa 15 f6 15 f2 15 2f 10     t............./.
     e34:	01 12 f8 11 09 12 f1 11 ec 11 3f 10 3a 10 35 10     ..........?.:.5.
     e44:	30 10 4f 10 49 10 43 10 88 10 80 10 35 12 2d 12     0.O.I.C.....5.-.
     e54:	44 14 3f 14 3c 14 32 14 28 14 2f 10 2f 10 7b 10     D.?.<.2.(././.{.
     e64:	20 12 1b 12 12 12 71 11 ed 15 65 11 cd 14 c9 14      .....q...e.....
     e74:	c3 14 ba 14 2f 10 2f 10 19 15 16 15 a0 10 a7 10     ...././.........
     e84:	96 10 2f 10 2f 10 c8 11 c1 11 4b 17 39 17 26 17     .././.....K.9.&.
     e94:	14 17 fe 16 ef 16 db 16 c7 16 b9 16 aa 16 9b 16     ................
     ea4:	8c 16 7d 16 6e 16 5f 16 50 16 3c 16 23 16 0a 16     ..}.n._.P.<.#...
     eb4:	2f 10 2f 10 3f 10 3a 10 35 10 61 10 30 10 66 10     /./.?.:.5.a.0.f.
     ec4:	d8 11 09 12 01 12 f8 11 f1 11 ec 11 e7 11 e2 11     ................
     ed4:	dd 11 d8 11 d1 11 cb 11 b1 14 aa 14 a4 11 8e 10     ................
     ee4:	7b 10 2d 11 21 11 2f 10 de 10 d5 10 cc 10 c8 10     {.-.!./.........
     ef4:	bf 10 b7 10 2f 10 2f 10 2f 10 81 17 a8 11 46 11     ..../././.....F.
     f04:	38 11 33 11 19 11 0e 11 2f 10 b0 10 a7 10 2f 10     8.3...../...../.
     f14:	2f 10 2f 10 00 16 fa 15 f6 15 0d 15 74 14 03 15     /./.........t...
     f24:	f8 14 e9 14 de 14 d2 14 2f 10 2f 10 9d 14 93 14     .......././.....
     f34:	8b 14 7e 14 47 14 54 10 6a 14 60 14 54 14 54 10     ..~.G.T.j.`.T.T.
     f44:	2f 10 2f 10 d4 15 cc 15 be 15 b1 15 a3 15 98 15     /./.............
     f54:	8f 15 86 15 77 15 69 15 5a 15 4e 15 47 15 40 15     ....w.i.Z.N.G.@.
     f64:	33 15 27 15 1d 15 dc 15 2f 10 2f 10 20 14 15 14     3.'....././. ...
     f74:	04 14 f7 13 ec 13 dc 13 cc 13 bd 13 ad 13 9d 13     ................
     f84:	8d 13 7d 13 6d 13 5d 13 4f 13 41 13 32 13 23 13     ..}.m.].O.A.2.#.
     f94:	16 13 09 13 fd 12 f1 12 e5 12 d8 12 ce 12 c4 12     ................
     fa4:	b7 12 ac 12 9f 12 94 12 87 12 ac 12 7a 12 94 12     ............z...
     fb4:	2f 10 2f 10 35 12 2d 12 27 12 2f 10 09 11 04 11     /./.5.-.'./.....
     fc4:	ff 10 fa 10 f5 10 f0 10 eb 10 e6 10 09 12 01 12     ................
     fd4:	f8 11 f1 11 ec 11 e7 11 e2 11 dd 11 71 12 67 12     ............q.g.
     fe4:	5f 12 57 12 4e 12 46 12 3d 12 d8 11 35 12 2d 12     _.W.N.F.=...5.-.
     ff4:	27 12 2f 10 2f 10 5c 11 53 11 91 11 8b 11 7f 11     '././.\.S.......
    1004:	9d 17 97 17 0d 15 8e 17 8c 17 8a 17 76 10 72 10     ............v.r.
    1014:	6b 10                                               k.

00001016 <VBAT39>:
    1016:	33 2e 39 56 00                                      3.9V.

0000101b <VBAT38>:
    101b:	33 2e 38 56 00                                      3.8V.

00001020 <VBAT37>:
    1020:	33 2e 37 56 00                                      3.7V.

00001025 <VBAT36>:
    1025:	33 2e 36 56 00                                      3.6V.

0000102a <VBAT35>:
    102a:	33 2e 35 56 00                                      3.5V.

0000102f <Dummy0>:
	...

00001030 <MPU6050LPF4>:
    1030:	34 34 48 7a 00                                      44Hz.

00001035 <MPU6050LPF3>:
    1035:	32 31 48 7a 00                                      21Hz.

0000103a <MPU6050LPF2>:
    103a:	31 30 48 7a 00                                      10Hz.

0000103f <MPU6050LPF1>:
    103f:	35 48 7a 00                                         5Hz.

00001043 <MPU6050LPF7>:
    1043:	32 36 30 48 7a 00                                   260Hz.

00001049 <MPU6050LPF6>:
    1049:	31 38 34 48 7a 00                                   184Hz.

0000104f <MPU6050LPF5>:
    104f:	39 34 48 7a 00                                      94Hz.

00001054 <GeneralText10>:
    1054:	4d 50 55 36 30 35 30 20 4c 50 46 3a 00              MPU6050 LPF:.

00001061 <SWLPF2>:
    1061:	33 32 48 7a 00                                      32Hz.

00001066 <SWLPF1>:
    1066:	37 34 48 7a 00                                      74Hz.

0000106b <Random12>:
    106b:	73 69 67 6e 61 6c 00                                signal.

00001072 <Random11>:
    1072:	6c 6f 77 00                                         low.

00001076 <Random10>:
    1076:	68 69 67 68 00                                      high.

0000107b <Random1>:
    107b:	48 69 67 68 00                                      High.

00001080 <Safety2>:
    1080:	41 72 6d 61 62 6c 65 00                             Armable.

00001088 <Safety1>:
    1088:	41 72 6d 65 64 00                                   Armed.

0000108e <GeneralText5>:
    108e:	53 79 6e 63 20 52 43 00                             Sync RC.

00001096 <MixerItem16>:
    1096:	52 65 76 53 63 61 6c 65 64 00                       RevScaled.

000010a0 <MixerItem15>:
    10a0:	53 63 61 6c 65 64 00                                Scaled.

000010a7 <MixerItem12>:
    10a7:	52 65 76 65 72 73 65 64 00                          Reversed.

000010b0 <MixerItem11>:
    10b0:	4e 6f 72 6d 61 6c 00                                Normal.

000010b7 <MixerMenuItem7>:
    10b7:	50 69 74 63 68 55 70 00                             PitchUp.

000010bf <MixerMenuItem6>:
    10bf:	53 69 64 65 77 61 79 73 00                          Sideways.

000010c8 <MixerMenuItem5>:
    10c8:	41 66 74 00                                         Aft.

000010cc <MixerMenuItem4>:
    10cc:	49 6e 76 65 72 74 65 64 00                          Inverted.

000010d5 <MixerMenuItem3>:
    10d5:	56 65 72 74 69 63 61 6c 00                          Vertical.

000010de <MixerMenuItem2>:
    10de:	46 6f 72 77 61 72 64 00                             Forward.

000010e6 <MOUT8>:
    10e6:	4f 55 54 38 00                                      OUT8.

000010eb <MOUT7>:
    10eb:	4f 55 54 37 00                                      OUT7.

000010f0 <MOUT6>:
    10f0:	4f 55 54 36 00                                      OUT6.

000010f5 <MOUT5>:
    10f5:	4f 55 54 35 00                                      OUT5.

000010fa <MOUT4>:
    10fa:	4f 55 54 34 00                                      OUT4.

000010ff <MOUT3>:
    10ff:	4f 55 54 33 00                                      OUT3.

00001104 <MOUT2>:
    1104:	4f 55 54 32 00                                      OUT2.

00001109 <MOUT1>:
    1109:	4f 55 54 31 00                                      OUT1.

0000110e <Status5>:
    110e:	28 44 69 73 61 72 6d 65 64 29 00                    (Disarmed).

00001119 <Status4>:
    1119:	28 41 72 6d 65 64 29 00                             (Armed).

00001121 <Status2>:
    1121:	66 6f 72 20 73 74 61 74 75 73 2e 00                 for status..

0000112d <Status0>:
    112d:	50 72 65 73 73 00                                   Press.

00001133 <WizardText2>:
    1133:	44 6f 6e 65 00                                      Done.

00001138 <WizardText1>:
    1138:	48 6f 6c 64 20 61 73 20 73 68 6f 77 6e 00           Hold as shown.

00001146 <WizardText0>:
    1146:	4e 6f 20 52 58 20 73 69 67 6e 61 6c 00              No RX signal.

00001153 <PText6>:
    1153:	73 65 74 74 69 6e 67 73 00                          settings.

0000115c <PText5>:
    115c:	55 70 64 61 74 69 6e 67 00                          Updating.

00001165 <PText4>:
    1165:	43 61 6c 2e 20 66 61 69 6c 65 64 00                 Cal. failed.

00001171 <PText3>:
    1171:	45 53 43 20 43 61 6c 69 62 72 61 74 65 00           ESC Calibrate.

0000117f <PText2>:
    117f:	48 6f 6c 64 20 73 74 65 61 64 79 00                 Hold steady.

0000118b <PText1>:
    118b:	52 65 73 65 74 00                                   Reset.

00001191 <PText0>:
    1191:	4f 70 65 6e 41 65 72 6f 32 00                       OpenAero2.

0000119b <Disarmed>:
    119b:	44 69 73 61 72 6d 65 64 00                          Disarmed.

000011a4 <ErrorText10>:
    11a4:	4c 6f 77 00                                         Low.

000011a8 <Status3>:
    11a8:	42 61 74 74 65 72 79 00                             Battery.

000011b0 <ErrorText7>:
    11b0:	4d 6f 64 65 6c 00                                   Model.

000011b6 <ErrorText6>:
    11b6:	4c 6f 73 74 00                                      Lost.

000011bb <ErrorText5>:
    11bb:	45 72 72 6f 72 00                                   Error.

000011c1 <ErrorText4>:
    11c1:	53 69 67 6e 61 6c 00                                Signal.

000011c8 <ErrorText3>:
    11c8:	4e 6f 00                                            No.

000011cb <ChannelRef12>:
    11cb:	45 6c 65 76 2e 00                                   Elev..

000011d1 <ChannelRef10>:
    11d1:	54 68 72 6f 74 2e 00                                Throt..

000011d8 <ChannelRef8>:
    11d8:	4e 6f 6e 65 00                                      None.

000011dd <ChannelRef7>:
    11dd:	41 55 58 33 00                                      AUX3.

000011e2 <ChannelRef6>:
    11e2:	41 55 58 32 00                                      AUX2.

000011e7 <ChannelRef5>:
    11e7:	41 55 58 31 00                                      AUX1.

000011ec <ChannelRef4>:
    11ec:	47 65 61 72 00                                      Gear.

000011f1 <ChannelRef3>:
    11f1:	52 75 64 64 65 72 00                                Rudder.

000011f8 <ChannelRef2>:
    11f8:	45 6c 65 76 61 74 6f 72 00                          Elevator.

00001201 <ChannelRef1>:
    1201:	41 69 6c 65 72 6f 6e 00                             Aileron.

00001209 <ChannelRef0>:
    1209:	54 68 72 6f 74 74 6c 65 00                          Throttle.

00001212 <MixerItem62>:
    1212:	53 71 72 74 53 69 6e 65 00                          SqrtSine.

0000121b <MixerItem61>:
    121b:	53 69 6e 65 00                                      Sine.

00001220 <MixerItem60>:
    1220:	4c 69 6e 65 61 72 00                                Linear.

00001227 <MixerItem49>:
    1227:	4d 6f 74 6f 72 00                                   Motor.

0000122d <MixerItem41>:
    122d:	44 2e 53 65 72 76 6f 00                             D.Servo.

00001235 <MixerItem40>:
    1235:	41 2e 53 65 72 76 6f 00                             A.Servo.

0000123d <MixerItem81>:
    123d:	41 4c 20 50 69 74 63 68 00                          AL Pitch.

00001246 <MixerItem80>:
    1246:	41 4c 20 52 6f 6c 6c 00                             AL Roll.

0000124e <MixerItem74>:
    124e:	41 63 63 50 69 74 63 68 00                          AccPitch.

00001257 <MixerItem73>:
    1257:	41 63 63 52 6f 6c 6c 00                             AccRoll.

0000125f <MixerItem72>:
    125f:	47 79 72 6f 59 61 77 00                             GyroYaw.

00001267 <MixerItem71>:
    1267:	47 79 72 6f 50 69 74 63 68 00                       GyroPitch.

00001271 <MixerItem70>:
    1271:	47 79 72 6f 52 6f 6c 6c 00                          GyroRoll.

0000127a <MixerItem31>:
    127a:	50 32 20 53 6f 75 72 63 65 20 42 3a 00              P2 Source B:.

00001287 <MixerItem21>:
    1287:	50 31 20 53 6f 75 72 63 65 20 42 3a 00              P1 Source B:.

00001294 <MixerItem30>:
    1294:	50 32 20 56 6f 6c 75 6d 65 3a 00                    P2 Volume:.

0000129f <MixerItem29>:
    129f:	50 32 20 53 6f 75 72 63 65 20 41 3a 00              P2 Source A:.

000012ac <MixerItem2>:
    12ac:	50 31 20 56 6f 6c 75 6d 65 3a 00                    P1 Volume:.

000012b7 <MixerItem0>:
    12b7:	50 31 20 53 6f 75 72 63 65 20 41 3a 00              P1 Source A:.

000012c4 <MixerItem43>:
    12c4:	50 32 20 5a 20 61 63 63 3a 00                       P2 Z acc:.

000012ce <MixerItem42>:
    12ce:	50 31 20 5a 20 61 63 63 3a 00                       P1 Z acc:.

000012d8 <MixerItem28>:
    12d8:	50 32 20 50 69 74 63 68 20 41 4c 3a 00              P2 Pitch AL:.

000012e5 <MixerItem3>:
    12e5:	50 31 20 50 69 74 63 68 20 41 4c 00                 P1 Pitch AL.

000012f1 <MixerItem27>:
    12f1:	50 32 20 52 6f 6c 6c 20 41 4c 3a 00                 P2 Roll AL:.

000012fd <MixerItem7>:
    12fd:	50 31 20 52 6f 6c 6c 20 41 4c 3a 00                 P1 Roll AL:.

00001309 <MixerItem26>:
    1309:	50 32 20 59 61 77 20 67 79 72 6f 3a 00              P2 Yaw gyro:.

00001316 <MixerItem6>:
    1316:	50 31 20 59 61 77 20 67 79 72 6f 3a 00              P1 Yaw gyro:.

00001323 <MixerItem25>:
    1323:	50 32 20 50 69 74 63 68 20 67 79 72 6f 3a 00        P2 Pitch gyro:.

00001332 <MixerItem5>:
    1332:	50 31 20 50 69 74 63 68 20 67 79 72 6f 3a 00        P1 Pitch gyro:.

00001341 <MixerItem24>:
    1341:	50 32 20 52 6f 6c 6c 20 67 79 72 6f 3a 00           P2 Roll gyro:.

0000134f <MixerItem4>:
    134f:	50 31 20 52 6f 6c 6c 20 67 79 72 6f 3a 00           P1 Roll gyro:.

0000135d <MixerItem56>:
    135d:	50 32 20 52 75 64 2e 20 76 6f 6c 75 6d 65 3a 00     P2 Rud. volume:.

0000136d <MixerItem53>:
    136d:	50 31 20 52 75 64 2e 20 76 6f 6c 75 6d 65 3a 00     P1 Rud. volume:.

0000137d <MixerItem55>:
    137d:	50 32 20 45 6c 65 2e 20 76 6f 6c 75 6d 65 3a 00     P2 Ele. volume:.

0000138d <MixerItem52>:
    138d:	50 31 20 45 6c 65 2e 20 76 6f 6c 75 6d 65 3a 00     P1 Ele. volume:.

0000139d <MixerItem54>:
    139d:	50 32 20 41 69 6c 2e 20 76 6f 6c 75 6d 65 3a 00     P2 Ail. volume:.

000013ad <MixerItem51>:
    13ad:	50 31 20 41 69 6c 2e 20 76 6f 6c 75 6d 65 3a 00     P1 Ail. volume:.

000013bd <Mixeritem50>:
    13bd:	54 68 72 6f 74 74 6c 65 20 63 75 72 76 65 00        Throttle curve.

000013cc <MixerItem33>:
    13cc:	50 32 20 54 68 72 2e 20 76 6f 6c 75 6d 65 3a 00     P2 Thr. volume:.

000013dc <MixerItem23>:
    13dc:	50 31 20 54 68 72 2e 20 76 6f 6c 75 6d 65 3a 00     P1 Thr. volume:.

000013ec <MixerItem34>:
    13ec:	50 32 20 4f 66 66 73 65 74 3a 00                    P2 Offset:.

000013f7 <MixerItem35>:
    13f7:	50 31 2e 6e 20 4f 66 66 73 65 74 3a 00              P1.n Offset:.

00001404 <MixerItem36>:
    1404:	50 31 2e 6e 20 25 20 6f 66 20 74 72 61 6e 73 3a     P1.n % of trans:
	...

00001415 <MixerItem20>:
    1415:	50 31 20 4f 66 66 73 65 74 3a 00                    P1 Offset:.

00001420 <MixerItem1>:
    1420:	44 65 76 69 63 65 3a 00                             Device:.

00001428 <P5text>:
    1428:	50 31 2e 6e 20 2d 20 50 32 00                       P1.n - P2.

00001432 <P4text>:
    1432:	50 31 20 2d 20 50 31 2e 6e 00                       P1 - P1.n.

0000143c <P3text>:
    143c:	50 32 00                                            P2.

0000143f <P2text>:
    143f:	50 31 2e 6e 00                                      P1.n.

00001444 <P1text>:
    1444:	50 31 00                                            P1.

00001447 <BattMenuItem2>:
    1447:	4c 6f 77 20 56 20 41 6c 61 72 6d 3a 00              Low V Alarm:.

00001454 <GeneralText7>:
    1454:	41 4c 20 63 6f 72 72 65 63 74 3a 00                 AL correct:.

00001460 <GeneralText16>:
    1460:	47 79 72 6f 20 4c 50 46 3a 00                       Gyro LPF:.

0000146a <GeneralText6>:
    146a:	41 63 63 2e 20 4c 50 46 3a 00                       Acc. LPF:.

00001474 <GeneralText3>:
    1474:	50 57 4d 20 72 61 74 65 3a 00                       PWM rate:.

0000147e <GeneralText2>:
    147e:	44 69 73 61 72 6d 20 74 69 6d 65 3a 00              Disarm time:.

0000148b <AutoMenuItem2>:
    148b:	53 61 66 65 74 79 3a 00                             Safety:.

00001493 <Contrast>:
    1493:	43 6f 6e 74 72 61 73 74 3a 00                       Contrast:.

0000149d <MixerMenuItem0>:
    149d:	4f 72 69 65 6e 74 61 74 69 6f 6e 3a 00              Orientation:.

000014aa <RCMenuItem7>:
    14aa:	46 75 74 61 62 61 00                                Futaba.

000014b1 <RCMenuItem6>:
    14b1:	4a 52 2c 53 70 6b 74 6d 00                          JR,Spktm.

000014ba <RXMode3>:
    14ba:	53 70 65 6b 74 72 75 6d 00                          Spektrum.

000014c3 <RXMode2>:
    14c3:	53 2d 42 75 73 00                                   S-Bus.

000014c9 <RXMode1>:
    14c9:	50 57 4d 00                                         PWM.

000014cd <RXMode0>:
    14cd:	43 50 50 4d 00                                      CPPM.

000014d2 <Transition_P1n>:
    14d2:	54 72 61 6e 73 2e 20 50 31 6e 3a 00                 Trans. P1n:.

000014de <Transition>:
    14de:	54 72 61 6e 73 69 74 69 6f 6e 00                    Transition.

000014e9 <RCMenuItem2>:
    14e9:	50 72 6f 66 69 6c 65 20 43 68 61 6e 2e 3a 00        Profile Chan.:.

000014f8 <RCMenuItem0>:
    14f8:	43 68 2e 20 6f 72 64 65 72 3a 00                    Ch. order:.

00001503 <RCMenuItem20>:
    1503:	50 57 4d 20 73 79 6e 63 3a 00                       PWM sync:.

0000150d <RCMenuItem1>:
    150d:	52 58 20 74 79 70 65 3a 00                          RX type:.

00001516 <AutoMenuItem15>:
    1516:	4f 4e 00                                            ON.

00001519 <AutoMenuItem11>:
    1519:	4f 46 46 00                                         OFF.

0000151d <StabMenuItem30>:
    151d:	59 61 77 20 74 72 69 6d 3a 00                       Yaw trim:.

00001527 <StabMenuItem9>:
    1527:	59 61 77 20 49 20 72 61 74 65 3a 00                 Yaw I rate:.

00001533 <StabMenuItem12>:
    1533:	59 61 77 20 49 20 4c 69 6d 69 74 3a 00              Yaw I Limit:.

00001540 <StabMenuItem8>:
    1540:	59 61 77 20 49 3a 00                                Yaw I:.

00001547 <StabMenuItem7>:
    1547:	59 61 77 20 50 3a 00                                Yaw P:.

0000154e <AutoMenuItem8>:
    154e:	50 69 74 63 68 20 74 72 69 6d 3a 00                 Pitch trim:.

0000155a <AutoMenuItem21>:
    155a:	50 69 74 63 68 20 41 75 74 6f 4c 76 6c 3a 00        Pitch AutoLvl:.

00001569 <StabMenuItem6>:
    1569:	50 69 74 63 68 20 49 20 72 61 74 65 3a 00           Pitch I rate:.

00001577 <StabMenuItem11>:
    1577:	50 69 74 63 68 20 49 20 4c 69 6d 69 74 3a 00        Pitch I Limit:.

00001586 <StabMenuItem5>:
    1586:	50 69 74 63 68 20 49 3a 00                          Pitch I:.

0000158f <AutoMenuItem4>:
    158f:	50 69 74 63 68 20 50 3a 00                          Pitch P:.

00001598 <AutoMenuItem7>:
    1598:	52 6f 6c 6c 20 74 72 69 6d 3a 00                    Roll trim:.

000015a3 <AutoMenuItem20>:
    15a3:	52 6f 6c 6c 20 41 75 74 6f 4c 76 6c 3a 00           Roll AutoLvl:.

000015b1 <StabMenuItem3>:
    15b1:	52 6f 6c 6c 20 49 20 72 61 74 65 3a 00              Roll I rate:.

000015be <StabMenuItem10>:
    15be:	52 6f 6c 6c 20 49 20 4c 69 6d 69 74 3a 00           Roll I Limit:.

000015cc <StabMenuItem2>:
    15cc:	52 6f 6c 6c 20 49 3a 00                             Roll I:.

000015d4 <AutoMenuItem1>:
    15d4:	52 6f 6c 6c 20 50 3a 00                             Roll P:.

000015dc <StabMenuItem13>:
    15dc:	41 63 63 20 56 65 72 74 20 50 3a 00                 Acc Vert P:.

000015e8 <SensorMenuItem2>:
    15e8:	49 6e 76 2e 00                                      Inv..

000015ed <SensorMenuItem1>:
    15ed:	43 61 6c 2e 00                                      Cal..

000015f2 <PText19>:
    15f2:	41 63 63 00                                         Acc.

000015f6 <PText18>:
    15f6:	59 61 77 00                                         Yaw.

000015fa <PText17>:
    15fa:	50 69 74 63 68 00                                   Pitch.

00001600 <PText16>:
    1600:	52 6f 6c 6c 00                                      Roll.

00001605 <PText15>:
    1605:	47 79 72 6f 00                                      Gyro.

0000160a <MainMenuItem23>:
    160a:	31 39 2e 20 50 6f 73 2e 20 53 65 72 76 6f 20 74     19. Pos. Servo t
    161a:	72 76 6c 2e 20 28 25 29 00                          rvl. (%).

00001623 <MainMenuItem22>:
    1623:	31 38 2e 20 4e 65 67 2e 20 53 65 72 76 6f 20 74     18. Neg. Servo t
    1633:	72 76 6c 2e 20 28 25 29 00                          rvl. (%).

0000163c <MainMenuItem20>:
    163c:	31 37 2e 20 53 65 72 76 6f 20 64 69 72 65 63 74     17. Servo direct
    164c:	69 6f 6e 00                                         ion.

00001650 <MainMenuItem18>:
    1650:	31 36 2e 20 4f 55 54 38 20 4d 69 78 65 72 00        16. OUT8 Mixer.

0000165f <MainMenuItem17>:
    165f:	31 35 2e 20 4f 55 54 37 20 4d 69 78 65 72 00        15. OUT7 Mixer.

0000166e <MainMenuItem16>:
    166e:	31 34 2e 20 4f 55 54 36 20 4d 69 78 65 72 00        14. OUT6 Mixer.

0000167d <MainMenuItem15>:
    167d:	31 33 2e 20 4f 55 54 35 20 4d 69 78 65 72 00        13. OUT5 Mixer.

0000168c <MainMenuItem14>:
    168c:	31 32 2e 20 4f 55 54 34 20 4d 69 78 65 72 00        12. OUT4 Mixer.

0000169b <MainMenuItem13>:
    169b:	31 31 2e 20 4f 55 54 33 20 4d 69 78 65 72 00        11. OUT3 Mixer.

000016aa <MainMenuItem12>:
    16aa:	31 30 2e 20 4f 55 54 32 20 4d 69 78 65 72 00        10. OUT2 Mixer.

000016b9 <MainMenuItem11>:
    16b9:	39 2e 20 4f 55 54 31 20 4d 69 78 65 72 00           9. OUT1 Mixer.

000016c7 <MainMenuItem3>:
    16c7:	38 2e 20 46 6c 69 67 68 74 20 70 72 6f 66 69 6c     8. Flight profil
    16d7:	65 20 32 00                                         e 2.

000016db <MainMenuItem2>:
    16db:	37 2e 20 46 6c 69 67 68 74 20 70 72 6f 66 69 6c     7. Flight profil
    16eb:	65 20 31 00                                         e 1.

000016ef <MainMenuItem10>:
    16ef:	36 2e 20 4c 65 76 65 6c 20 6d 65 74 65 72 00        6. Level meter.

000016fe <MainMenuItem8>:
    16fe:	35 2e 20 53 65 6e 73 6f 72 20 63 61 6c 69 62 72     5. Sensor calibr
    170e:	61 74 69 6f 6e 00                                   ation.

00001714 <MainMenuItem7>:
    1714:	34 2e 20 53 74 69 63 6b 20 70 6f 6c 61 72 69 74     4. Stick polarit
    1724:	79 00                                               y.

00001726 <MainMenuItem9>:
    1726:	33 2e 20 52 65 63 65 69 76 65 72 20 69 6e 70 75     3. Receiver inpu
    1736:	74 73 00                                            ts.

00001739 <MainMenuItem1>:
    1739:	32 2e 20 52 65 63 65 69 76 65 72 20 73 65 74 75     2. Receiver setu
    1749:	70 00                                               p.

0000174b <MainMenuItem0>:
    174b:	31 2e 20 47 65 6e 65 72 61 6c 00                    1. General.

00001756 <MenuFrame8>:
    1756:	53 61 76 65 00                                      Save.

0000175b <MenuFrame7>:
    175b:	44 65 66 2e 00                                      Def..

00001760 <MenuFrame6>:
    1760:	42 61 63 6b 00                                      Back.

00001765 <MenuFrame5>:
    1765:	4d 65 6e 75 00                                      Menu.

0000176a <MenuFrame1>:
    176a:	45 00                                               E.

0000176c <MenuFrame4>:
    176c:	44 00                                               D.

0000176e <MenuFrame3>:
    176e:	43 00                                               C.

00001770 <MenuFrame2>:
    1770:	42 00                                               B.

00001772 <MenuFrame0>:
    1772:	41 00                                               A.

00001774 <StatusText9>:
    1774:	4a 69 74 74 65 72 3a 00                             Jitter:.

0000177c <StatusText8>:
    177c:	50 6f 73 3a 00                                      Pos:.

00001781 <StatusText7>:
    1781:	42 61 74 74 65 72 79 3a 00                          Battery:.

0000178a <StatusText5>:
    178a:	30 00                                               0.

0000178c <StatusText4>:
    178c:	2e 00                                               ..

0000178e <StatusText3>:
    178e:	50 72 6f 66 69 6c 65 3a 00                          Profile:.

00001797 <StatusText1>:
    1797:	4d 6f 64 65 3a 00                                   Mode:.

0000179d <StatusText0>:
    179d:	56 65 72 73 69 6f 6e 3a 20 31 2e 31 20 42 38 00     Version: 1.1 B8.

000017ad <Gyro_Pol>:
    17ad:	01 01 01 01 01 01 01 ff ff ff ff 01 01 ff 01 ff     ................
    17bd:	01 01                                               ..

000017bf <Gyro_RPY_Order>:
    17bf:	00 01 02 01 02 00 00 01 02 00 01 02 01 00 02 02     ................
    17cf:	01 00                                               ..

000017d1 <LPF_lookup>:
    17d1:	17 0c 06 04 03 02 01                                .......

000017d8 <lines>:
    17d8:	03 0f 1b 27                                         ...'

000017dc <flight_menu_ranges>:
    17dc:	00 7f 01 00 3c 00 7f 01 00 28 00 7d 01 00 0a 00     ....<....(.}....
    17ec:	04 01 00 02 00 7f 01 00 05 81 7f 01 00 00 00 7f     ................
    17fc:	01 00 3c 00 7f 01 00 28 00 7d 01 00 0a 00 04 01     ..<....(.}......
    180c:	00 02 00 7f 01 00 05 81 7f 01 00 00 00 7f 01 00     ................
    181c:	50 00 7f 01 00 00 00 7d 01 00 00 00 04 01 00 01     P......}........
    182c:	81 7f 01 00 00 00 7f 01 00 00                       ..........

00001836 <FlightMenuText>:
	...

00001848 <mixer_menu_ranges>:
    1848:	00 02 01 01 00 83 7d 01 00 00 01 63 01 00 32 83     ......}....c..2.
    1858:	7d 01 00 00 83 7d 01 00 00 00 7d 01 00 64 00 7d     }....}....}..d.}
    1868:	01 00 64 00 02 01 01 00 83 7d 01 00 00 83 7d 01     ..d......}....}.
    1878:	00 00 83 7d 01 00 00 83 7d 01 00 00 83 7d 01 00     ...}....}....}..
    1888:	00 83 7d 01 00 00 00 02 01 01 00 00 02 01 01 00     ..}.............
    1898:	00 02 01 01 00 00 02 01 01 00 00 02 01 01 00 00     ................
    18a8:	02 01 01 00 00 02 01 01 00 00 02 01 01 00 00 02     ................
    18b8:	01 01 00 00 02 01 01 00 00 02 01 01 00 00 02 01     ................
    18c8:	01 00 00 0f 01 01 0f 83 7d 01 00 00 00 0f 01 01     ........}.......
    18d8:	0f 83 7d 01 00 00 00 0f 01 01 0f 83 7d 01 00 00     ..}.........}...
    18e8:	00 0f 01 01 0f 83 7d 01 00 00                       ......}...

000018f2 <MixerMenuText>:
    18f2:	e2 00 00 00 00 00 00 38 00 00 00 00 00 00 44 44     .......8......DD
    1902:	44 44 44 44 44 44 44 44 44 44 ee 00 ee 00 ee 00     DDDDDDDDDD......
    1912:	ee 00                                               ..

00001914 <servo_menu_ranges>:
    1914:	00 01 01 01 00 83 00 01 03 9c 00 7d 01 03 64        ...........}..d

00001923 <ServoMenuText>:
    1923:	8d 8d 8d 8d 8d 8d 8d 8d 00 00 00 00 00 00 00 00     ................
	...

0000193b <rc_menu_ranges>:
    193b:	00 03 01 01 01 00 02 01 01 00 00 04 01 01 04 00     ................
    194b:	01 01 01 00 00 07 01 01 04 00 28 01 00 00 01 63     ..........(....c
    195b:	01 00 32 00 00 00 00 00 00 00 00 00 00 00 05 01     ..2.............
    196b:	01 00 1c 32 01 00 24 00 01 01 01 01 00 7f 01 00     ...2..$.........
    197b:	1e 00 05 01 01 00 00 06 01 01 02 00 06 01 01 02     ................
    198b:	00 06 01 01 06 01 0a 01 00 07                       ..........

00001995 <RCMenuText>:
    1995:	3e 76 69 74 69 00 00 00 00 7c 00 2c 00 00 25 62     >viti....|.,..%b
    19a5:	62 00                                               b.

000019a7 <SQRTSIN>:
    19a7:	00 0d 12 16 19 1c 1f 21 23 26 28 29 2b 2d 2f 30     .......!#&()+-/0
    19b7:	32 33 35 36 38 39 3a 3b 3d 3e 3f 40 41 42 43 44     235689:;=>?@ABCD
    19c7:	45 46 47 48 49 4a 4b 4c 4d 4d 4e 4f 50 51 51 52     EFGHIJKLMMNOPQQR
    19d7:	53 53 54 55 55 56 57 57 58 58 59 59 5a 5a 5b 5b     SSTUUVWWXXYYZZ[[
    19e7:	5c 5c 5d 5d 5e 5e 5e 5f 5f 5f 60 60 60 61 61 61     \\]]^^^___```aaa
    19f7:	62 62 62 62 62 63 63 63 63 63 63 63 64 64 64 64     bbbbbcccccccdddd
    1a07:	64 64 64 64 64                                      ddddd

00001a0c <SIN>:
    1a0c:	00 02 03 05 06 08 0a 0b 0d 0e 10 11 13 14 16 17     ................
    1a1c:	19 1a 1c 1d 1f 20 22 23 25 26 28 29 2b 2c 2d 2f     ..... "#%&()+,-/
    1a2c:	30 32 33 34 36 37 38 3a 3b 3c 3d 3f 40 41 42 43     0234678:;<=?@ABC
    1a3c:	44 46 47 48 49 4a 4b 4c 4d 4e 4f 50 51 52 53 54     DFGHIJKLMNOPQRST
    1a4c:	54 55 56 57 58 58 59 5a 5a 5b 5c 5c 5d 5e 5e 5f     TUVWXXYZZ[\\]^^_
    1a5c:	5f 60 60 60 61 61 62 62 62 63 63 63 63 63 64 64     _```aabbbcccccdd
    1a6c:	64 64 64 64 64 00                                   ddddd.

00001a72 <__ctors_end>:
    1a72:	11 24       	eor	r1, r1
    1a74:	1f be       	out	0x3f, r1	; 63
    1a76:	cf ef       	ldi	r28, 0xFF	; 255
    1a78:	d0 e1       	ldi	r29, 0x10	; 16
    1a7a:	de bf       	out	0x3e, r29	; 62
    1a7c:	cd bf       	out	0x3d, r28	; 61

00001a7e <wdt_init>:
// WDT reset prototype. Placed before main() in code to prevent wdt re-firing
void wdt_init(void) __attribute__((naked)) __attribute__((section(".init3")));

void wdt_init(void)
{
	MCUSR = 0;
    1a7e:	14 be       	out	0x34, r1	; 52
	wdt_disable();
    1a80:	88 e1       	ldi	r24, 0x18	; 24
    1a82:	0f b6       	in	r0, 0x3f	; 63
    1a84:	f8 94       	cli
    1a86:	80 93 60 00 	sts	0x0060, r24
    1a8a:	10 92 60 00 	sts	0x0060, r1
    1a8e:	0f be       	out	0x3f, r0	; 63

00001a90 <__do_copy_data>:
    1a90:	15 e0       	ldi	r17, 0x05	; 5
    1a92:	a0 e0       	ldi	r26, 0x00	; 0
    1a94:	b1 e0       	ldi	r27, 0x01	; 1
    1a96:	ea e0       	ldi	r30, 0x0A	; 10
    1a98:	f3 e9       	ldi	r31, 0x93	; 147
    1a9a:	02 c0       	rjmp	.+4      	; 0x1aa0 <__do_copy_data+0x10>
    1a9c:	05 90       	lpm	r0, Z+
    1a9e:	0d 92       	st	X+, r0
    1aa0:	a2 31       	cpi	r26, 0x12	; 18
    1aa2:	b1 07       	cpc	r27, r17
    1aa4:	d9 f7       	brne	.-10     	; 0x1a9c <__do_copy_data+0xc>

00001aa6 <__do_clear_bss>:
    1aa6:	28 e0       	ldi	r18, 0x08	; 8
    1aa8:	a2 e1       	ldi	r26, 0x12	; 18
    1aaa:	b5 e0       	ldi	r27, 0x05	; 5
    1aac:	01 c0       	rjmp	.+2      	; 0x1ab0 <.do_clear_bss_start>

00001aae <.do_clear_bss_loop>:
    1aae:	1d 92       	st	X+, r1

00001ab0 <.do_clear_bss_start>:
    1ab0:	ad 34       	cpi	r26, 0x4D	; 77
    1ab2:	b2 07       	cpc	r27, r18
    1ab4:	e1 f7       	brne	.-8      	; 0x1aae <.do_clear_bss_loop>
    1ab6:	0e 94 b6 19 	call	0x336c	; 0x336c <main>
    1aba:	0c 94 83 49 	jmp	0x9306	; 0x9306 <_exit>

00001abe <__bad_interrupt>:
    1abe:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00001ac2 <glcd_delay>:
;*************************************************************************

	.global glcd_delay
	.func   glcd_delay
glcd_delay:
	nop					// 1 5 * 50ns = 250ns = 4MHz
    1ac2:	00 00       	nop
	ret					// 4 (5 cycles)
    1ac4:	08 95       	ret

00001ac6 <glcd_delay_1us>:
;*************************************************************************

	.global glcd_delay_1us
	.func   glcd_delay_1us
glcd_delay_1us:
	rcall	glcd_delay
    1ac6:	fd df       	rcall	.-6      	; 0x1ac2 <glcd_delay>
	rcall	glcd_delay
    1ac8:	fc df       	rcall	.-8      	; 0x1ac2 <glcd_delay>
	rcall	glcd_delay
    1aca:	fb df       	rcall	.-10     	; 0x1ac2 <glcd_delay>
	rcall	glcd_delay
    1acc:	fa df       	rcall	.-12     	; 0x1ac2 <glcd_delay>
	ret
    1ace:	08 95       	ret

00001ad0 <bind_master>:
;*************************************************************************

	.global bind_master
	.func   bind_master
bind_master:
	push	YL			//	1
    1ad0:	cf 93       	push	r28
	push	XL			//	1
    1ad2:	af 93       	push	r26

	ldi		XL,0x5		// 	1 Master is 5 pulses
    1ad4:	a5 e0       	ldi	r26, 0x05	; 5

00001ad6 <master_loop>:
master_loop:
	cbi 	BIND		//	2
    1ad6:	58 98       	cbi	0x0b, 0	; 11
	ldi		YL,0x76		// 	1 		118us
    1ad8:	c6 e7       	ldi	r28, 0x76	; 118
	call	VarDelay	//	4
    1ada:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <VarDelay>
	sbi		BIND		//	2
    1ade:	58 9a       	sbi	0x0b, 0	; 11
	ldi		YL,0x7A		// 	1 		122us
    1ae0:	ca e7       	ldi	r28, 0x7A	; 122
	call	VarDelay	//	4
    1ae2:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <VarDelay>
	dec		XL			//	1
    1ae6:	aa 95       	dec	r26
	brne	master_loop	//  2 1
    1ae8:	b1 f7       	brne	.-20     	; 0x1ad6 <master_loop>

	pop		XL			//	  1
    1aea:	af 91       	pop	r26
	pop		YL			//	  1
    1aec:	cf 91       	pop	r28
	ret					//	  4 
    1aee:	08 95       	ret

00001af0 <VarDelay>:
; 5 cycles to configure and call, 4 to return and 2 to change bit afterwards = 11
; 20 cycles makes 1.0us
;*************************************************************************

VarDelay:
	rjmp .+0			// 2
    1af0:	00 c0       	rjmp	.+0      	; 0x1af2 <VarDelay+0x2>
	rjmp .+0			// 2
    1af2:	00 c0       	rjmp	.+0      	; 0x1af4 <VarDelay+0x4>
	rjmp .+0			// 2
    1af4:	00 c0       	rjmp	.+0      	; 0x1af6 <VarDelay+0x6>
	rjmp .+0			// 2
    1af6:	00 c0       	rjmp	.+0      	; 0x1af8 <VarDelay+0x8>
	rjmp .+0			// 2
    1af8:	00 c0       	rjmp	.+0      	; 0x1afa <VarDelay+0xa>
	rjmp .+0			// 2
    1afa:	00 c0       	rjmp	.+0      	; 0x1afc <VarDelay+0xc>
	rjmp .+0			// 2
    1afc:	00 c0       	rjmp	.+0      	; 0x1afe <VarDelay+0xe>
	rjmp .+0			// 2
    1afe:	00 c0       	rjmp	.+0      	; 0x1b00 <VarDelay+0x10>
	nop					// 1
    1b00:	00 00       	nop
	dec 	YL			// 1
    1b02:	ca 95       	dec	r28
	brne	VarDelay	// 2 1
    1b04:	a9 f7       	brne	.-22     	; 0x1af0 <VarDelay>
	ret					//   4 
    1b06:	08 95       	ret

00001b08 <output_servo_ppm_asm>:

	.global output_servo_ppm_asm
	.func   output_servo_ppm_asm
output_servo_ppm_asm:
// Copy r22 (containing ServoFlag) into r15
	mov		r15, r22	
    1b08:	f6 2e       	mov	r15, r22
// Save regs
	push	ZL			// 2			
    1b0a:	ef 93       	push	r30
	push	ZH			// 2
    1b0c:	ff 93       	push	r31
	push	XL			// 2
    1b0e:	af 93       	push	r26
	push	XH			// 2
    1b10:	bf 93       	push	r27
	push	YL			// 2
    1b12:	cf 93       	push	r28
	push	YH			// 2
    1b14:	df 93       	push	r29
	push	16			// 2
    1b16:	0f 93       	push	r16
	push	17			// 2
    1b18:	1f 93       	push	r17
	push	18			// 2
    1b1a:	2f 93       	push	r18
	push	19			// 2
    1b1c:	3f 93       	push	r19
	push	20			// 2
    1b1e:	4f 93       	push	r20
	push	21			// 2
    1b20:	5f 93       	push	r21
	push	22			// 2
    1b22:	6f 93       	push	r22
	push	23			// 2
    1b24:	7f 93       	push	r23

// Get start address of ServoOut[0] into Z
	mov		ZL, r24		// 1 Low byte
    1b26:	e8 2f       	mov	r30, r24
	mov		ZH, r25		// 1 High byte
    1b28:	f9 2f       	mov	r31, r25

// Save initial address for later
	push	24			// 2
    1b2a:	8f 93       	push	r24
	push	25			// 2
    1b2c:	9f 93       	push	r25

// Trim 16-bit values to suit individual needs, 
// Save result and copy lower 3 bits to r16 to r23 (96 cycles)

// M1
	ld		XL, Z+ 		// 2			Load XL with data at address in Z
    1b2e:	a1 91       	ld	r26, Z+
	ld		XH, Z+		// 2			Load XH with data at address in Z+1
    1b30:	b1 91       	ld	r27, Z+
	subi	XL,	0xc6	// 1 			Trim servo pulse (was 34a)
    1b32:	a6 5c       	subi	r26, 0xC6	; 198
	sbci 	XH,	0x00	// 1
    1b34:	b0 40       	sbci	r27, 0x00	; 0
	push	XL 			// 2			Save trimmed value to the stack
    1b36:	af 93       	push	r26
	push	XH 			// 2
    1b38:	bf 93       	push	r27
	andi	XL,	0x07	// 1			And all but first 3 bits
    1b3a:	a7 70       	andi	r26, 0x07	; 7
	mov		r23,XL		// 1 (12)		Copy 8-bit result to regs
    1b3c:	7a 2f       	mov	r23, r26
// M2
	ld		XL, Z+
    1b3e:	a1 91       	ld	r26, Z+
	ld		XH, Z+
    1b40:	b1 91       	ld	r27, Z+
	subi	XL,	0xbe  // was 2e6
    1b42:	ae 5b       	subi	r26, 0xBE	; 190
	sbci 	XH,	0x00
    1b44:	b0 40       	sbci	r27, 0x00	; 0
	push	XL 		
    1b46:	af 93       	push	r26
	push	XH 		
    1b48:	bf 93       	push	r27
	andi	XL,	0x07
    1b4a:	a7 70       	andi	r26, 0x07	; 7
	mov		r22,XL	
    1b4c:	6a 2f       	mov	r22, r26
// M3
	ld		XL, Z+
    1b4e:	a1 91       	ld	r26, Z+
	ld		XH, Z+
    1b50:	b1 91       	ld	r27, Z+
	subi	XL,	0xb6 // was 282
    1b52:	a6 5b       	subi	r26, 0xB6	; 182
	sbci 	XH,	0x00
    1b54:	b0 40       	sbci	r27, 0x00	; 0
	push	XL 		
    1b56:	af 93       	push	r26
	push	XH 		
    1b58:	bf 93       	push	r27
	andi	XL,	0x07
    1b5a:	a7 70       	andi	r26, 0x07	; 7
	mov		r21,XL	
    1b5c:	5a 2f       	mov	r21, r26
// M4
	ld		XL, Z+
    1b5e:	a1 91       	ld	r26, Z+
	ld		XH, Z+
    1b60:	b1 91       	ld	r27, Z+
	subi	XL,	0xae // was 21e
    1b62:	ae 5a       	subi	r26, 0xAE	; 174
	sbci 	XH,	0x00
    1b64:	b0 40       	sbci	r27, 0x00	; 0
	push	XL 	
    1b66:	af 93       	push	r26
	push	XH 	
    1b68:	bf 93       	push	r27
	andi	XL,	0x07
    1b6a:	a7 70       	andi	r26, 0x07	; 7
	mov		r20,XL	
    1b6c:	4a 2f       	mov	r20, r26
// M5
	ld		XL, Z+
    1b6e:	a1 91       	ld	r26, Z+
	ld		XH, Z+
    1b70:	b1 91       	ld	r27, Z+
	subi	XL,	0xa5 // was 1ba
    1b72:	a5 5a       	subi	r26, 0xA5	; 165
	sbci 	XH,	0x00
    1b74:	b0 40       	sbci	r27, 0x00	; 0
	push	XL 	
    1b76:	af 93       	push	r26
	push	XH 	
    1b78:	bf 93       	push	r27
	andi	XL,	0x07
    1b7a:	a7 70       	andi	r26, 0x07	; 7
	mov		r19,XL	
    1b7c:	3a 2f       	mov	r19, r26
// M6
	ld		XL, Z+
    1b7e:	a1 91       	ld	r26, Z+
	ld		XH, Z+
    1b80:	b1 91       	ld	r27, Z+
	subi	XL,	0x9D // was 155
    1b82:	ad 59       	subi	r26, 0x9D	; 157
	sbci 	XH,	0x00
    1b84:	b0 40       	sbci	r27, 0x00	; 0
	push	XL 	
    1b86:	af 93       	push	r26
	push	XH 	
    1b88:	bf 93       	push	r27
	andi	XL,	0x07
    1b8a:	a7 70       	andi	r26, 0x07	; 7
	mov		r18,XL
    1b8c:	2a 2f       	mov	r18, r26
// M7
	ld		XL, Z+
    1b8e:	a1 91       	ld	r26, Z+
	ld		XH, Z+
    1b90:	b1 91       	ld	r27, Z+
	subi	XL,	0x95 // was f1
    1b92:	a5 59       	subi	r26, 0x95	; 149
	sbci 	XH,	0x00
    1b94:	b0 40       	sbci	r27, 0x00	; 0
	push	XL 	
    1b96:	af 93       	push	r26
	push	XH 
    1b98:	bf 93       	push	r27
	andi	XL,	0x07
    1b9a:	a7 70       	andi	r26, 0x07	; 7
	mov		r17,XL
    1b9c:	1a 2f       	mov	r17, r26
// M8
	ld		XL, Z+
    1b9e:	a1 91       	ld	r26, Z+
	ld		XH, Z+
    1ba0:	b1 91       	ld	r27, Z+
	subi	XL,	0x8d // Was 8d
    1ba2:	ad 58       	subi	r26, 0x8D	; 141
	sbci 	XH,	0x00
    1ba4:	b0 40       	sbci	r27, 0x00	; 0
	push	XL
    1ba6:	af 93       	push	r26
	push	XH 
    1ba8:	bf 93       	push	r27
	andi	XL,	0x07
    1baa:	a7 70       	andi	r26, 0x07	; 7
	mov		r16,XL
    1bac:	0a 2f       	mov	r16, r26
// Time out lower 3 bits of pulse value (Zero to 7us)
// Each chunk is always executed in 1+10+1+147 = 159 cycles or 7.95us
// This does affect the inter-pulse delay, but not the pulsewidth.

// M1
	mov		r25,r23		// 1
    1bae:	97 2f       	mov	r25, r23
	call	DelayHigh	// 10 (where r25 = 7)
    1bb0:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <DelayHigh>
	sbrc	r15,0		// 1 (False),	2 if true
    1bb4:	f0 fc       	sbrc	r15, 0
	sbi 	M1			// 1,			0
    1bb6:	46 9a       	sbi	0x08, 6	; 8
	call	DelayLow	// 7 + 140 (where r25 = 0)
    1bb8:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <DelayLow>
	//call    pwm_delay   // 100us
	//call    pwm_delay

// M2
	mov		r25,r22
    1bbc:	96 2f       	mov	r25, r22
	call	DelayHigh
    1bbe:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <DelayHigh>
	sbrc	r15,1		// Don't switch on if if ServoFlag bit is cleared
    1bc2:	f1 fc       	sbrc	r15, 1
	sbi 	M2
    1bc4:	44 9a       	sbi	0x08, 4	; 8
	call	DelayLow
    1bc6:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <DelayLow>
	//call    pwm_delay   // 100us
	//call    pwm_delay

// M3
	mov		r25,r21
    1bca:	95 2f       	mov	r25, r21
	call	DelayHigh
    1bcc:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <DelayHigh>
	sbrc	r15,2		// Don't switch on if if ServoFlag bit is cleared
    1bd0:	f2 fc       	sbrc	r15, 2
	sbi 	M3
    1bd2:	42 9a       	sbi	0x08, 2	; 8
	call	DelayLow
    1bd4:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <DelayLow>
	//call    pwm_delay   // 100us
	//call    pwm_delay

// M4
	mov		r25,r20
    1bd8:	94 2f       	mov	r25, r20
	call	DelayHigh
    1bda:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <DelayHigh>
	sbrc	r15,3		// Don't switch on if if ServoFlag bit is cleared
    1bde:	f3 fc       	sbrc	r15, 3
	sbi 	M4
    1be0:	43 9a       	sbi	0x08, 3	; 8
	call	DelayLow
    1be2:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <DelayLow>
	//call    pwm_delay   // 100us
	//call    pwm_delay

// M5
	mov		r25,r19
    1be6:	93 2f       	mov	r25, r19
	call	DelayHigh
    1be8:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <DelayHigh>
	sbrc	r15,4		// Don't switch on if if ServoFlag bit is cleared
    1bec:	f4 fc       	sbrc	r15, 4
	sbi 	M5
    1bee:	14 9a       	sbi	0x02, 4	; 2
	call	DelayLow
    1bf0:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <DelayLow>
	//call    pwm_delay   // 100us
	//call    pwm_delay

// M6
	mov		r25,r18
    1bf4:	92 2f       	mov	r25, r18
	call	DelayHigh
    1bf6:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <DelayHigh>
	sbrc	r15,5		// Don't switch on if if ServoFlag bit is cleared
    1bfa:	f5 fc       	sbrc	r15, 5
	sbi 	M6
    1bfc:	15 9a       	sbi	0x02, 5	; 2
	call	DelayLow
    1bfe:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <DelayLow>
	//call    pwm_delay   // 100us
	//call    pwm_delay

// M7
	mov		r25,r17
    1c02:	91 2f       	mov	r25, r17
	call	DelayHigh
    1c04:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <DelayHigh>
	sbrc	r15,6		// Don't switch on if if ServoFlag bit is cleared
    1c08:	f6 fc       	sbrc	r15, 6
	sbi 	M7
    1c0a:	45 9a       	sbi	0x08, 5	; 8
	call	DelayLow
    1c0c:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <DelayLow>
	//call    pwm_delay   // 100us
	//call    pwm_delay

// M8
	mov		r25,r16
    1c10:	90 2f       	mov	r25, r16
	call	DelayHigh
    1c12:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <DelayHigh>
	sbrc	r15,7		// Don't switch on if if ServoFlag bit is cleared
    1c16:	f7 fc       	sbrc	r15, 7
	sbi 	M8			// 1
    1c18:	47 9a       	sbi	0x08, 7	; 8
	call	DelayLow
    1c1a:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <DelayLow>
// At this point, the largest pulse that we can generate is 256 * 8 = 2.048ms
// However we would like to be able to generate up to 2.100ms (150%) - an extra 52us
// So we can fluff it out another 200us so that we can subtract enough to keep r16 under 0xff or 256 :)
// With this setup, M1 can go down to 850 and M8 can go up to 2150

	call    pwm_delay   // 150us
    1c1e:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <pwm_delay>
	call    pwm_delay
    1c22:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <pwm_delay>
	call    pwm_delay
    1c26:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <pwm_delay>

// Copy trimmed array data into regs
// This now represents steps of 8us chunks
	pop		XH			// M8
    1c2a:	bf 91       	pop	r27
	pop		XL
    1c2c:	af 91       	pop	r26
	call	shuffle_8
    1c2e:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <shuffle_8>
	mov		r16,XL
    1c32:	0a 2f       	mov	r16, r26
	pop		XH			// M7
    1c34:	bf 91       	pop	r27
	pop		XL
    1c36:	af 91       	pop	r26
	call	shuffle_8
    1c38:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <shuffle_8>
	mov		r17,XL
    1c3c:	1a 2f       	mov	r17, r26
	pop		XH			// M6
    1c3e:	bf 91       	pop	r27
	pop		XL
    1c40:	af 91       	pop	r26
	call	shuffle_8
    1c42:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <shuffle_8>
	mov		r18,XL
    1c46:	2a 2f       	mov	r18, r26
	pop		XH			// M5
    1c48:	bf 91       	pop	r27
	pop		XL
    1c4a:	af 91       	pop	r26
	call	shuffle_8
    1c4c:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <shuffle_8>
	mov		r19,XL
    1c50:	3a 2f       	mov	r19, r26
	pop		XH			// M4
    1c52:	bf 91       	pop	r27
	pop		XL
    1c54:	af 91       	pop	r26
	call	shuffle_8
    1c56:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <shuffle_8>
	mov		r20,XL
    1c5a:	4a 2f       	mov	r20, r26
	pop		XH			// M3
    1c5c:	bf 91       	pop	r27
	pop		XL
    1c5e:	af 91       	pop	r26
	call	shuffle_8
    1c60:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <shuffle_8>
	mov		r21,XL
    1c64:	5a 2f       	mov	r21, r26
	pop		XH			// M2
    1c66:	bf 91       	pop	r27
	pop		XL
    1c68:	af 91       	pop	r26
	call	shuffle_8
    1c6a:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <shuffle_8>
	mov		r22,XL
    1c6e:	6a 2f       	mov	r22, r26
	pop		XH			// M1
    1c70:	bf 91       	pop	r27
	pop		XL
    1c72:	af 91       	pop	r26
	call	shuffle_8
    1c74:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <shuffle_8>
	mov		r23,XL
    1c78:	7a 2f       	mov	r23, r26

// Loop prep
	ldi 	YL,0xFF		// 1			Set loop count to ffh or 255 (255 * 8us = 2040us + 150us = 2190us)
    1c7a:	cf ef       	ldi	r28, 0xFF	; 255
	ldi		YH,0x00		// 1
    1c7c:	d0 e0       	ldi	r29, 0x00	; 0
	clr		0			// 1 (7)
    1c7e:	00 24       	eor	r0, r0

00001c80 <nloop>:

// Ninja loop - 7 cycles each side (8 x 7 = 56 + 6 to loop + 98 pad = 160 cycles)
// 20 cyles = 1us, 160 cycles = 8us

nloop:
	subi	r23,1		// 1 			ServoOut1
    1c80:	71 50       	subi	r23, 0x01	; 1
	brne	j1			// 2	1	
    1c82:	19 f4       	brne	.+6      	; 0x1c8a <j1>
	cbi 	M1			// 		2		Clear output M1 if done (+5 = 1448 = 72.4us = 48)
    1c84:	46 98       	cbi	0x08, 6	; 8
	jmp		jj1			//		3
    1c86:	0c 94 47 0e 	jmp	0x1c8e	; 0x1c8e <jj1>

00001c8a <j1>:
j1:
	rjmp 	.+0			// 2
    1c8a:	00 c0       	rjmp	.+0      	; 0x1c8c <j1+0x2>
	rjmp 	.+0			// 2
    1c8c:	00 c0       	rjmp	.+0      	; 0x1c8e <jj1>

00001c8e <jj1>:
jj1:
	subi	r22,1		// 1			ServoOut2
    1c8e:	61 50       	subi	r22, 0x01	; 1
	brne	j2			// 2	1
    1c90:	19 f4       	brne	.+6      	; 0x1c98 <j2>
	cbi 	M2			// 		2		Clear output M2 if done (+11 = 1285 = 64.25us = 40)
    1c92:	44 98       	cbi	0x08, 4	; 8
	jmp		jj2			//		3
    1c94:	0c 94 4e 0e 	jmp	0x1c9c	; 0x1c9c <jj2>

00001c98 <j2>:
j2:
	rjmp	.+0
    1c98:	00 c0       	rjmp	.+0      	; 0x1c9a <j2+0x2>
	rjmp	.+0
    1c9a:	00 c0       	rjmp	.+0      	; 0x1c9c <jj2>

00001c9c <jj2>:
jj2:
	subi	r21,1
    1c9c:	51 50       	subi	r21, 0x01	; 1
	brne	j3
    1c9e:	19 f4       	brne	.+6      	; 0x1ca6 <j3>
	cbi 	M3
    1ca0:	42 98       	cbi	0x08, 2	; 8
	jmp		jj3
    1ca2:	0c 94 55 0e 	jmp	0x1caa	; 0x1caa <jj3>

00001ca6 <j3>:
j3:
	rjmp	.+0
    1ca6:	00 c0       	rjmp	.+0      	; 0x1ca8 <j3+0x2>
	rjmp	.+0
    1ca8:	00 c0       	rjmp	.+0      	; 0x1caa <jj3>

00001caa <jj3>:
jj3:
	subi 	r20,1
    1caa:	41 50       	subi	r20, 0x01	; 1
	brne	j4
    1cac:	19 f4       	brne	.+6      	; 0x1cb4 <j4>
	cbi 	M4
    1cae:	43 98       	cbi	0x08, 3	; 8
	jmp		jj4	
    1cb0:	0c 94 5c 0e 	jmp	0x1cb8	; 0x1cb8 <jj4>

00001cb4 <j4>:
j4:
	rjmp 	.+0
    1cb4:	00 c0       	rjmp	.+0      	; 0x1cb6 <j4+0x2>
	rjmp 	.+0
    1cb6:	00 c0       	rjmp	.+0      	; 0x1cb8 <jj4>

00001cb8 <jj4>:
jj4:
	subi	r19,1
    1cb8:	31 50       	subi	r19, 0x01	; 1
	brne	j5
    1cba:	19 f4       	brne	.+6      	; 0x1cc2 <j5>
	cbi 	M5
    1cbc:	14 98       	cbi	0x02, 4	; 2
	jmp		jj5
    1cbe:	0c 94 63 0e 	jmp	0x1cc6	; 0x1cc6 <jj5>

00001cc2 <j5>:
j5:
	rjmp 	.+0
    1cc2:	00 c0       	rjmp	.+0      	; 0x1cc4 <j5+0x2>
	rjmp 	.+0
    1cc4:	00 c0       	rjmp	.+0      	; 0x1cc6 <jj5>

00001cc6 <jj5>:
jj5:
	subi	r18,1
    1cc6:	21 50       	subi	r18, 0x01	; 1
	brne	j6
    1cc8:	19 f4       	brne	.+6      	; 0x1cd0 <j6>
	cbi 	M6
    1cca:	15 98       	cbi	0x02, 5	; 2
	jmp		jj6
    1ccc:	0c 94 6a 0e 	jmp	0x1cd4	; 0x1cd4 <jj6>

00001cd0 <j6>:
j6:
	rjmp 	.+0
    1cd0:	00 c0       	rjmp	.+0      	; 0x1cd2 <j6+0x2>
	rjmp	.+0
    1cd2:	00 c0       	rjmp	.+0      	; 0x1cd4 <jj6>

00001cd4 <jj6>:
jj6:
	subi	r17,1
    1cd4:	11 50       	subi	r17, 0x01	; 1
	brne	j7
    1cd6:	19 f4       	brne	.+6      	; 0x1cde <j7>
	cbi 	M7
    1cd8:	45 98       	cbi	0x08, 5	; 8
	jmp		jj7
    1cda:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <jj7>

00001cde <j7>:
j7:
	rjmp 	.+0
    1cde:	00 c0       	rjmp	.+0      	; 0x1ce0 <j7+0x2>
	rjmp 	.+0
    1ce0:	00 c0       	rjmp	.+0      	; 0x1ce2 <jj7>

00001ce2 <jj7>:
jj7:
	subi 	r16,1		// ServoOut 8
    1ce2:	01 50       	subi	r16, 0x01	; 1
	brne	j8
    1ce4:	19 f4       	brne	.+6      	; 0x1cec <j8>
	cbi 	M8
    1ce6:	47 98       	cbi	0x08, 7	; 8
	jmp		jj8
    1ce8:	0c 94 78 0e 	jmp	0x1cf0	; 0x1cf0 <jj8>

00001cec <j8>:
j8:
	rjmp 	.+0
    1cec:	00 c0       	rjmp	.+0      	; 0x1cee <j8+0x2>
	rjmp 	.+0
    1cee:	00 c0       	rjmp	.+0      	; 0x1cf0 <jj8>

00001cf0 <jj8>:
jj8:
	call	pad_100_delay // (100)
    1cf0:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <pad_100_delay>

	subi 	YL,1		// 1
    1cf4:	c1 50       	subi	r28, 0x01	; 1
	sbc 	YH,0		// 1
    1cf6:	d0 09       	sbc	r29, r0
	breq	skiploop	// 1	2		Loop until zero - 1 false 2 true
    1cf8:	11 f0       	breq	.+4      	; 0x1cfe <skiploop>
	jmp		nloop		// 3			Can't reach nloop with a brne alone
    1cfa:	0c 94 40 0e 	jmp	0x1c80	; 0x1c80 <nloop>

00001cfe <skiploop>:

skiploop:
	pop		25			// 		2		Restore regs
    1cfe:	9f 91       	pop	r25
	pop		24			// 		2
    1d00:	8f 91       	pop	r24
	pop		23			//		2
    1d02:	7f 91       	pop	r23
	pop		22			//		2
    1d04:	6f 91       	pop	r22
	pop		21			//		2
    1d06:	5f 91       	pop	r21
	pop		20			//		2
    1d08:	4f 91       	pop	r20
	pop		19			//		2
    1d0a:	3f 91       	pop	r19
	pop		18			//		2
    1d0c:	2f 91       	pop	r18
	pop		17			//		2
    1d0e:	1f 91       	pop	r17
	pop		16			//		2
    1d10:	0f 91       	pop	r16
	pop		YH			//		2
    1d12:	df 91       	pop	r29
	pop		YL			//		2
    1d14:	cf 91       	pop	r28
	pop		XH			//		2
    1d16:	bf 91       	pop	r27
	pop		XL			//		2
    1d18:	af 91       	pop	r26
	pop		ZH			// 		2
    1d1a:	ff 91       	pop	r31
	pop		ZL			//		2
    1d1c:	ef 91       	pop	r30

	ret					//		4
    1d1e:	08 95       	ret

00001d20 <output_servo_ppm_asm3>:
;*************************************************************************

	.global output_servo_ppm_asm3
	.func   output_servo_ppm_asm3
output_servo_ppm_asm3:
	push	16			// Save regs
    1d20:	0f 93       	push	r16
	push	17
    1d22:	1f 93       	push	r17
	push	18
    1d24:	2f 93       	push	r18

	//ldi 	16,0x34		// 1			Set loop count to 834h or 2100
	ldi 	16,0xFC		// 1			Set loop count to 8FCh or 2300(us)
    1d26:	0c ef       	ldi	r16, 0xFC	; 252
	ldi		17,0x08	
    1d28:	18 e0       	ldi	r17, 0x08	; 8
	clr		0
    1d2a:	00 24       	eor	r0, r0

00001d2c <jump_table>:

jump_table:
	cpi		r24,0x00	; 0				
    1d2c:	80 30       	cpi	r24, 0x00	; 0
	breq	in1
    1d2e:	71 f0       	breq	.+28     	; 0x1d4c <in1>
	cpi		r24,0x01	; 1
    1d30:	81 30       	cpi	r24, 0x01	; 1
	breq	in2
    1d32:	79 f0       	breq	.+30     	; 0x1d52 <in2>
	cpi		r24,0x02	; 2
    1d34:	82 30       	cpi	r24, 0x02	; 2
	breq	in3
    1d36:	81 f0       	breq	.+32     	; 0x1d58 <in3>
	cpi		r24,0x03	; 3
    1d38:	83 30       	cpi	r24, 0x03	; 3
	breq	in4
    1d3a:	89 f0       	breq	.+34     	; 0x1d5e <in4>
	cpi		r24,0x04	; 4
    1d3c:	84 30       	cpi	r24, 0x04	; 4
	breq	in5
    1d3e:	91 f0       	breq	.+36     	; 0x1d64 <in5>
	cpi		r24,0x05	; 5
    1d40:	85 30       	cpi	r24, 0x05	; 5
	breq	in6
    1d42:	99 f0       	breq	.+38     	; 0x1d6a <in6>
	cpi		r24,0x06	; 6
    1d44:	86 30       	cpi	r24, 0x06	; 6
	breq	in7
    1d46:	a1 f0       	breq	.+40     	; 0x1d70 <in7>
	cpi		r24,0x07	; 7
    1d48:	87 30       	cpi	r24, 0x07	; 7
	breq	in8
    1d4a:	a9 f0       	breq	.+42     	; 0x1d76 <in8>

00001d4c <in1>:

in1:sbi 	M1			// Set output high
    1d4c:	46 9a       	sbi	0x08, 6	; 8
	jmp		loopin
    1d4e:	0c 94 be 0e 	jmp	0x1d7c	; 0x1d7c <loopin>

00001d52 <in2>:
in2:sbi 	M2
    1d52:	44 9a       	sbi	0x08, 4	; 8
	jmp		loopin
    1d54:	0c 94 be 0e 	jmp	0x1d7c	; 0x1d7c <loopin>

00001d58 <in3>:
in3:sbi 	M3	
    1d58:	42 9a       	sbi	0x08, 2	; 8
	jmp		loopin
    1d5a:	0c 94 be 0e 	jmp	0x1d7c	; 0x1d7c <loopin>

00001d5e <in4>:
in4:sbi 	M4
    1d5e:	43 9a       	sbi	0x08, 3	; 8
	jmp		loopin
    1d60:	0c 94 be 0e 	jmp	0x1d7c	; 0x1d7c <loopin>

00001d64 <in5>:
in5:sbi 	M5
    1d64:	14 9a       	sbi	0x02, 4	; 2
	jmp		loopin
    1d66:	0c 94 be 0e 	jmp	0x1d7c	; 0x1d7c <loopin>

00001d6a <in6>:
in6:sbi 	M6
    1d6a:	15 9a       	sbi	0x02, 5	; 2
	jmp		loopin
    1d6c:	0c 94 be 0e 	jmp	0x1d7c	; 0x1d7c <loopin>

00001d70 <in7>:
in7:sbi 	M7
    1d70:	45 9a       	sbi	0x08, 5	; 8
	jmp		loopin
    1d72:	0c 94 be 0e 	jmp	0x1d7c	; 0x1d7c <loopin>

00001d76 <in8>:
in8:sbi 	M8
    1d76:	47 9a       	sbi	0x08, 7	; 8
	jmp		loopin
    1d78:	0c 94 be 0e 	jmp	0x1d7c	; 0x1d7c <loopin>

00001d7c <loopin>:

// Loop - 20 cycles = 1us
loopin:
						// <---------	Left column is skip execution path
	rjmp .+0			// 2 	<----	Right column is pulse end execution path
    1d7c:	00 c0       	rjmp	.+0      	; 0x1d7e <loopin+0x2>
	rjmp .+0			// 2
    1d7e:	00 c0       	rjmp	.+0      	; 0x1d80 <loopin+0x4>
	rjmp .+0			// 2
    1d80:	00 c0       	rjmp	.+0      	; 0x1d82 <loopin+0x6>
	rjmp .+0			// 2
    1d82:	00 c0       	rjmp	.+0      	; 0x1d84 <loopin+0x8>
	rjmp .+0			// 2
    1d84:	00 c0       	rjmp	.+0      	; 0x1d86 <loopin+0xa>
	rjmp .+0			// 2
    1d86:	00 c0       	rjmp	.+0      	; 0x1d88 <loopin+0xc>

	subi	r22,1		// 1 			Time servo pulse
    1d88:	61 50       	subi	r22, 0x01	; 1
	sbc 	r23,0		// 1
    1d8a:	70 09       	sbc	r23, r0
	brne	loopout		// 2	1
    1d8c:	19 f4       	brne	.+6      	; 0x1d94 <loopout>

// Clear outputs if done
	ldi		r18,0x00	 // 1
    1d8e:	20 e0       	ldi	r18, 0x00	; 0
	out 	SERVO_OUT_KK20,r18// 1			Boom.
    1d90:	28 b9       	out	0x08, r18	; 8
	out 	SERVO_OUT_KK21,r18// 1			KK2.1 has a couple of outputs on Port A also.
    1d92:	22 b9       	out	0x02, r18	; 2

00001d94 <loopout>:

// Exit
loopout:
	subi 	16,1		// 1			+4 cycles = total 20 cycles
    1d94:	01 50       	subi	r16, 0x01	; 1
	sbc 	17,0		// 1
    1d96:	10 09       	sbc	r17, r0
	brne	loopin		// 2	1		Loop until zero
    1d98:	89 f7       	brne	.-30     	; 0x1d7c <loopin>

	pop		18
    1d9a:	2f 91       	pop	r18
	pop		17			// Restore regs
    1d9c:	1f 91       	pop	r17
	pop		16
    1d9e:	0f 91       	pop	r16
	ret	
    1da0:	08 95       	ret

00001da2 <pwm_delay>:
;*************************************************************************	
; void pwm_delay(void) 50us output spacing delay (8 cycle loop - 400ns)
;*************************************************************************

pwm_delay:				// 4 to call
	push	16			// 1
    1da2:	0f 93       	push	r16
	ldi 	16,0x65		// 1
    1da4:	05 e6       	ldi	r16, 0x65	; 101

00001da6 <pwm_loop>:

pwm_loop:
	rjmp .+0			// 2
    1da6:	00 c0       	rjmp	.+0      	; 0x1da8 <pwm_loop+0x2>
	rjmp .+0			// 2
    1da8:	00 c0       	rjmp	.+0      	; 0x1daa <pwm_loop+0x4>
	rjmp .+0			// 2
    1daa:	00 c0       	rjmp	.+0      	; 0x1dac <pwm_loop+0x6>
	subi	r16,1		// 1
    1dac:	01 50       	subi	r16, 0x01	; 1
	brne	pwm_loop	// 2  1
    1dae:	d9 f7       	brne	.-10     	; 0x1da6 <pwm_loop>

00001db0 <pwm_exit>:

pwm_exit:
	pop		16			//    1
    1db0:	0f 91       	pop	r16
	ret					//    4 to return
    1db2:	08 95       	ret

00001db4 <pad_100_delay>:
; pad_100_delay 98 cycle padding delay
; Takes 4 to call, so we need 94 cycles burnt here
;*************************************************************************

pad_100_delay:
	push	16			// 		2		Save regs
    1db4:	0f 93       	push	r16
	ldi 	16,0x09		// 		1		Set loop count to 09h or 9
    1db6:	09 e0       	ldi	r16, 0x09	; 9

00001db8 <pad_100>:

pad_100:				//				9 cycles, 8 on last
	rjmp .+0			// 2
    1db8:	00 c0       	rjmp	.+0      	; 0x1dba <pad_100+0x2>
	rjmp .+0			// 2			8 x 9cyc + 8 = 80
    1dba:	00 c0       	rjmp	.+0      	; 0x1dbc <pad_100+0x4>
	rjmp .+0			// 2
    1dbc:	00 c0       	rjmp	.+0      	; 0x1dbe <pad_100+0x6>

	subi 	16,1		// 1
    1dbe:	01 50       	subi	r16, 0x01	; 1
	brne	pad_100		// 2	1		Loop until zero	
    1dc0:	d9 f7       	brne	.-10     	; 0x1db8 <pad_100>

	nop					// 		1		Trim to precisely the right value
    1dc2:	00 00       	nop
	rjmp .+0			// 		2
    1dc4:	00 c0       	rjmp	.+0      	; 0x1dc6 <pad_100+0xe>
	rjmp .+0			// 		2
    1dc6:	00 c0       	rjmp	.+0      	; 0x1dc8 <pad_100+0x10>

	pop		16			// 		2		Restore regs
    1dc8:	0f 91       	pop	r16
	ret					// 		4 (94 cycles)
    1dca:	08 95       	ret

00001dcc <us_delay>:
; void us_delay(void) 1us delay for ninja skills
; Takes 4 to call, 4 to return, so we need 12 cycles burnt here
;*************************************************************************

us_delay:
	rjmp .+0			// 2
    1dcc:	00 c0       	rjmp	.+0      	; 0x1dce <us_delay+0x2>
	rjmp .+0			// 2
    1dce:	00 c0       	rjmp	.+0      	; 0x1dd0 <us_delay+0x4>
	rjmp .+0			// 2
    1dd0:	00 c0       	rjmp	.+0      	; 0x1dd2 <us_delay+0x6>
	rjmp .+0			// 2
    1dd2:	00 c0       	rjmp	.+0      	; 0x1dd4 <us_delay+0x8>
	ret					// 4 (16 cycles)
    1dd4:	08 95       	ret

00001dd6 <shuffle_8>:
;*************************************************************************	
; Space-saving macro-ish suroutines
;*************************************************************************

shuffle_8: // (10 cycles)
	lsr		XH			// 1 Rotate right into carry
    1dd6:	b6 95       	lsr	r27
	ror		XL			// 1 Rotate right with carry from MSB
    1dd8:	a7 95       	ror	r26
	lsr		XH			// 1
    1dda:	b6 95       	lsr	r27
	ror		XL			// 1
    1ddc:	a7 95       	ror	r26
	lsr		XH			// 1
    1dde:	b6 95       	lsr	r27
	ror		XL			// 1
    1de0:	a7 95       	ror	r26
	ret					// 4
    1de2:	08 95       	ret

00001de4 <DelayHigh>:
; 10 and 150 cycles at 1us intervals per value in r26
; 
;*************************************************************************

DelayHigh:				// (0)	(1)	(2+) each extra is +20
	ldi		YL,0x07		// 1	1	1
    1de4:	c7 e0       	ldi	r28, 0x07	; 7
	andi	r25,0x07	
    1de6:	97 70       	andi	r25, 0x07	; 7
	eor		YL,r25		// 1 	1	1
    1de8:	c9 27       	eor	r28, r25
	breq	LoopHighOut1// 2	1	1
    1dea:	31 f0       	breq	.+12     	; 0x1df8 <LoopHighOut1>

00001dec <LoopHigh>:
LoopHigh:
	call    us_delay	// 		16	16
    1dec:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <us_delay>
	dec 	YL			// 		1	1
    1df0:	ca 95       	dec	r28
	breq	LoopHighOut2// 		2	1/2
    1df2:	09 f0       	breq	.+2      	; 0x1df6 <LoopHighOut2>
	rjmp	LoopHigh	// 			2
    1df4:	fb cf       	rjmp	.-10     	; 0x1dec <LoopHigh>

00001df6 <LoopHighOut2>:
LoopHighOut2:
	rjmp .+0			// 		2	2
    1df6:	00 c0       	rjmp	.+0      	; 0x1df8 <LoopHighOut1>

00001df8 <LoopHighOut1>:
LoopHighOut1:
	nop					// 1	1	1
    1df8:	00 00       	nop
    ret					// 4	4	4
    1dfa:	08 95       	ret

00001dfc <DelayLow>:
; regardless of the value of r25
;
;*************************************************************************

DelayLow:				// (0)	(1)	(2+) each extra is +20
	mov		YL,r25		// 1	1	
    1dfc:	c9 2f       	mov	r28, r25
	andi	YL,0x07	
    1dfe:	c7 70       	andi	r28, 0x07	; 7
	breq	LoopLowOut1	// 2	1	1
    1e00:	31 f0       	breq	.+12     	; 0x1e0e <LoopLowOut1>

00001e02 <LoopLow>:
LoopLow:
	call    us_delay	//		16	16
    1e02:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <us_delay>
	dec 	YL			//		1	1
    1e06:	ca 95       	dec	r28
	breq	LoopLowOut2	//		2	1/2
    1e08:	09 f0       	breq	.+2      	; 0x1e0c <LoopLowOut2>
	rjmp	LoopLow		//			2
    1e0a:	fb cf       	rjmp	.-10     	; 0x1e02 <LoopLow>

00001e0c <LoopLowOut2>:
LoopLowOut2:
	rjmp .+0			// 		2	2
    1e0c:	00 c0       	rjmp	.+0      	; 0x1e0e <LoopLowOut1>

00001e0e <LoopLowOut1>:
LoopLowOut1:
    ret					// 4	4	4
    1e0e:	08 95       	ret

00001e10 <get_raw_accs>:
//***************************************************************
// Fill accADC with RPY data appropriate to the board orientation
//***************************************************************

void get_raw_accs(void)
{
    1e10:	cf 93       	push	r28
    1e12:	df 93       	push	r29
    1e14:	cd b7       	in	r28, 0x3d	; 61
    1e16:	de b7       	in	r29, 0x3e	; 62
    1e18:	2c 97       	sbiw	r28, 0x0c	; 12
    1e1a:	0f b6       	in	r0, 0x3f	; 63
    1e1c:	f8 94       	cli
    1e1e:	de bf       	out	0x3e, r29	; 62
    1e20:	0f be       	out	0x3f, r0	; 63
    1e22:	cd bf       	out	0x3d, r28	; 61
	// Get data from MPU6050
	uint8_t Accs[6];
	int16_t temp1, temp2;

	// Get the i2c data from the MPU6050
	readI2CbyteArray(MPU60X0_DEFAULT_ADDRESS,MPU60X0_RA_ACCEL_XOUT_H,(uint8_t *)Accs,6);
    1e24:	26 e0       	ldi	r18, 0x06	; 6
    1e26:	ae 01       	movw	r20, r28
    1e28:	4f 5f       	subi	r20, 0xFF	; 255
    1e2a:	5f 4f       	sbci	r21, 0xFF	; 255
    1e2c:	6b e3       	ldi	r22, 0x3B	; 59
    1e2e:	80 ed       	ldi	r24, 0xD0	; 208
    1e30:	0e 94 c9 24 	call	0x4992	; 0x4992 <readI2CbyteArray>

	// Reassemble data into accADC array and down sample to reduce resolution and noise
	// This notation is true to the chip, but not the board orientation

	temp1 = Accs[0] << 8;					// Accel X
    1e34:	89 81       	ldd	r24, Y+1	; 0x01
    1e36:	90 e0       	ldi	r25, 0x00	; 0
    1e38:	98 2f       	mov	r25, r24
    1e3a:	88 27       	eor	r24, r24
	temp2 = Accs[1];
    1e3c:	2a 81       	ldd	r18, Y+2	; 0x02
	RawADC[ROLL] = (temp1 + temp2) >> 6;
    1e3e:	82 0f       	add	r24, r18
    1e40:	91 1d       	adc	r25, r1
    1e42:	36 e0       	ldi	r19, 0x06	; 6
    1e44:	95 95       	asr	r25
    1e46:	87 95       	ror	r24
    1e48:	3a 95       	dec	r19
    1e4a:	e1 f7       	brne	.-8      	; 0x1e44 <get_raw_accs+0x34>
    1e4c:	98 87       	std	Y+8, r25	; 0x08
    1e4e:	8f 83       	std	Y+7, r24	; 0x07

	temp1 = Accs[2] << 8;					// Accel Y
    1e50:	8b 81       	ldd	r24, Y+3	; 0x03
    1e52:	90 e0       	ldi	r25, 0x00	; 0
    1e54:	98 2f       	mov	r25, r24
    1e56:	88 27       	eor	r24, r24
	temp2 = Accs[3];
    1e58:	2c 81       	ldd	r18, Y+4	; 0x04
	RawADC[PITCH] = -((temp1 + temp2) >> 6);
    1e5a:	82 0f       	add	r24, r18
    1e5c:	91 1d       	adc	r25, r1
    1e5e:	56 e0       	ldi	r21, 0x06	; 6
    1e60:	95 95       	asr	r25
    1e62:	87 95       	ror	r24
    1e64:	5a 95       	dec	r21
    1e66:	e1 f7       	brne	.-8      	; 0x1e60 <get_raw_accs+0x50>
    1e68:	91 95       	neg	r25
    1e6a:	81 95       	neg	r24
    1e6c:	91 09       	sbc	r25, r1
    1e6e:	9a 87       	std	Y+10, r25	; 0x0a
    1e70:	89 87       	std	Y+9, r24	; 0x09

	temp1 = Accs[4] << 8;					// Accel Z
    1e72:	8d 81       	ldd	r24, Y+5	; 0x05
    1e74:	90 e0       	ldi	r25, 0x00	; 0
    1e76:	98 2f       	mov	r25, r24
    1e78:	88 27       	eor	r24, r24
	temp2 = Accs[5];
    1e7a:	2e 81       	ldd	r18, Y+6	; 0x06
	RawADC[YAW] = (temp1 + temp2) >> 6;
    1e7c:	82 0f       	add	r24, r18
    1e7e:	91 1d       	adc	r25, r1
    1e80:	76 e0       	ldi	r23, 0x06	; 6
    1e82:	95 95       	asr	r25
    1e84:	87 95       	ror	r24
    1e86:	7a 95       	dec	r23
    1e88:	e1 f7       	brne	.-8      	; 0x1e82 <get_raw_accs+0x72>
    1e8a:	9c 87       	std	Y+12, r25	; 0x0c
    1e8c:	8b 87       	std	Y+11, r24	; 0x0b

	// Reorient the data as per the board orientation	
	for (i=0; i<NUMBEROFAXIS; i++)
	{
		// Rearrange the sensors
		accADC[i] = RawADC[(int8_t)pgm_read_byte(&ACC_RPY_Order[Config.Orientation][i])];
    1e8e:	20 91 39 06 	lds	r18, 0x0639
    1e92:	a4 e4       	ldi	r26, 0x44	; 68
    1e94:	b5 e0       	ldi	r27, 0x05	; 5
    1e96:	43 e0       	ldi	r20, 0x03	; 3
    1e98:	24 02       	muls	r18, r20
    1e9a:	90 01       	movw	r18, r0
    1e9c:	11 24       	eor	r1, r1
    1e9e:	80 e0       	ldi	r24, 0x00	; 0
    1ea0:	90 e0       	ldi	r25, 0x00	; 0
    1ea2:	26 53       	subi	r18, 0x36	; 54
    1ea4:	3f 4f       	sbci	r19, 0xFF	; 255
    1ea6:	f9 01       	movw	r30, r18
    1ea8:	e8 0f       	add	r30, r24
    1eaa:	f9 1f       	adc	r31, r25
    1eac:	e4 91       	lpm	r30, Z
    1eae:	ee 0f       	add	r30, r30
    1eb0:	ff 0b       	sbc	r31, r31
    1eb2:	41 e0       	ldi	r20, 0x01	; 1
    1eb4:	50 e0       	ldi	r21, 0x00	; 0
    1eb6:	4c 0f       	add	r20, r28
    1eb8:	5d 1f       	adc	r21, r29
    1eba:	e4 0f       	add	r30, r20
    1ebc:	f5 1f       	adc	r31, r21
    1ebe:	46 81       	ldd	r20, Z+6	; 0x06
    1ec0:	57 81       	ldd	r21, Z+7	; 0x07
    1ec2:	4d 93       	st	X+, r20
    1ec4:	5d 93       	st	X+, r21
    1ec6:	01 96       	adiw	r24, 0x01	; 1
	temp1 = Accs[4] << 8;					// Accel Z
	temp2 = Accs[5];
	RawADC[YAW] = (temp1 + temp2) >> 6;

	// Reorient the data as per the board orientation	
	for (i=0; i<NUMBEROFAXIS; i++)
    1ec8:	83 30       	cpi	r24, 0x03	; 3
    1eca:	91 05       	cpc	r25, r1
    1ecc:	61 f7       	brne	.-40     	; 0x1ea6 <get_raw_accs+0x96>
	{
		// Rearrange the sensors
		accADC[i] = RawADC[(int8_t)pgm_read_byte(&ACC_RPY_Order[Config.Orientation][i])];
	}
}
    1ece:	2c 96       	adiw	r28, 0x0c	; 12
    1ed0:	0f b6       	in	r0, 0x3f	; 63
    1ed2:	f8 94       	cli
    1ed4:	de bf       	out	0x3e, r29	; 62
    1ed6:	0f be       	out	0x3f, r0	; 63
    1ed8:	cd bf       	out	0x3d, r28	; 61
    1eda:	df 91       	pop	r29
    1edc:	cf 91       	pop	r28
    1ede:	08 95       	ret

00001ee0 <ReadAcc>:

int16_t accADC[NUMBEROFAXIS];	// Holds Acc ADC values - always in RPY order
int16_t accVert = 0;			// Holds the level-zeroed Z-acc value. Used for height damping in hover only.

void ReadAcc()
{
    1ee0:	1f 93       	push	r17
    1ee2:	cf 93       	push	r28
    1ee4:	df 93       	push	r29
	uint8_t i;

	get_raw_accs();				// Updates accADC[] (RPY)
    1ee6:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <get_raw_accs>

	// Use default Config.AccZero for Acc-Z if inverse calibration not done yet
	// Actual zero is held in Config.AccZeroNormZ waiting for inv calibration
	if (!(Config.Main_flags & (1 << inv_cal_done)))
    1eea:	80 91 b8 07 	lds	r24, 0x07B8
    1eee:	80 fd       	sbrc	r24, 0
    1ef0:	05 c0       	rjmp	.+10     	; 0x1efc <ReadAcc+0x1c>
	{
		Config.AccZero[YAW] = 0;
    1ef2:	10 92 a0 07 	sts	0x07A0, r1
    1ef6:	10 92 9f 07 	sts	0x079F, r1
    1efa:	0e c0       	rjmp	.+28     	; 0x1f18 <ReadAcc+0x38>

	// If inverted cal done, Config.AccZeroNormZ and Config.AccZeroDiff have
	// valid values
	else
	{
		Config.AccZero[YAW] = Config.AccZeroNormZ - Config.AccZeroDiff;
    1efc:	80 91 a1 07 	lds	r24, 0x07A1
    1f00:	90 91 a2 07 	lds	r25, 0x07A2
    1f04:	20 91 a5 07 	lds	r18, 0x07A5
    1f08:	30 91 a6 07 	lds	r19, 0x07A6
    1f0c:	82 1b       	sub	r24, r18
    1f0e:	93 0b       	sbc	r25, r19
    1f10:	90 93 a0 07 	sts	0x07A0, r25
    1f14:	80 93 9f 07 	sts	0x079F, r24
	{
		// Remove offsets from acc outputs
		accADC[i] -= Config.AccZero[i];

		// Change polarity
		accADC[i] *= (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation][i]);
    1f18:	20 91 39 06 	lds	r18, 0x0639
    1f1c:	cb e9       	ldi	r28, 0x9B	; 155
    1f1e:	d7 e0       	ldi	r29, 0x07	; 7
    1f20:	a4 e4       	ldi	r26, 0x44	; 68
    1f22:	b5 e0       	ldi	r27, 0x05	; 5
    1f24:	83 e0       	ldi	r24, 0x03	; 3
    1f26:	28 02       	muls	r18, r24
    1f28:	90 01       	movw	r18, r0
    1f2a:	11 24       	eor	r1, r1
    1f2c:	80 e0       	ldi	r24, 0x00	; 0
    1f2e:	90 e0       	ldi	r25, 0x00	; 0
    1f30:	28 54       	subi	r18, 0x48	; 72
    1f32:	3f 4f       	sbci	r19, 0xFF	; 255
	}

	for (i=0; i < NUMBEROFAXIS; i++)
	{
		// Remove offsets from acc outputs
		accADC[i] -= Config.AccZero[i];
    1f34:	69 91       	ld	r22, Y+
    1f36:	79 91       	ld	r23, Y+
    1f38:	f9 01       	movw	r30, r18
    1f3a:	e8 0f       	add	r30, r24
    1f3c:	f9 1f       	adc	r31, r25

		// Change polarity
		accADC[i] *= (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation][i]);
    1f3e:	14 91       	lpm	r17, Z
	}

	for (i=0; i < NUMBEROFAXIS; i++)
	{
		// Remove offsets from acc outputs
		accADC[i] -= Config.AccZero[i];
    1f40:	4d 91       	ld	r20, X+
    1f42:	5c 91       	ld	r21, X
    1f44:	11 97       	sbiw	r26, 0x01	; 1
    1f46:	46 1b       	sub	r20, r22
    1f48:	57 0b       	sbc	r21, r23

		// Change polarity
		accADC[i] *= (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation][i]);
    1f4a:	14 03       	mulsu	r17, r20
    1f4c:	b0 01       	movw	r22, r0
    1f4e:	15 9f       	mul	r17, r21
    1f50:	70 0d       	add	r23, r0
    1f52:	11 24       	eor	r1, r1
    1f54:	6d 93       	st	X+, r22
    1f56:	7d 93       	st	X+, r23
    1f58:	01 96       	adiw	r24, 0x01	; 1
	else
	{
		Config.AccZero[YAW] = Config.AccZeroNormZ - Config.AccZeroDiff;
	}

	for (i=0; i < NUMBEROFAXIS; i++)
    1f5a:	83 30       	cpi	r24, 0x03	; 3
    1f5c:	91 05       	cpc	r25, r1
    1f5e:	51 f7       	brne	.-44     	; 0x1f34 <ReadAcc+0x54>
	}

	// Recalculate current accVert using filtered acc value
	// Note that AccSmooth[YAW] is already zeroed around 1G so we have to re-add 
	// the zero back here so that Config.AccZeroNormZ subtracts the correct amount
	 accVert = accSmooth[YAW] + (Config.AccZeroNormZ - Config.AccZero[YAW]);
    1f60:	60 91 a1 07 	lds	r22, 0x07A1
    1f64:	70 91 a2 07 	lds	r23, 0x07A2
    1f68:	80 91 9f 07 	lds	r24, 0x079F
    1f6c:	90 91 a0 07 	lds	r25, 0x07A0
    1f70:	68 1b       	sub	r22, r24
    1f72:	79 0b       	sbc	r23, r25
    1f74:	88 27       	eor	r24, r24
    1f76:	77 fd       	sbrc	r23, 7
    1f78:	80 95       	com	r24
    1f7a:	98 2f       	mov	r25, r24
    1f7c:	0e 94 4d 47 	call	0x8e9a	; 0x8e9a <__floatsisf>
    1f80:	20 91 a1 05 	lds	r18, 0x05A1
    1f84:	30 91 a2 05 	lds	r19, 0x05A2
    1f88:	40 91 a3 05 	lds	r20, 0x05A3
    1f8c:	50 91 a4 05 	lds	r21, 0x05A4
    1f90:	0e 94 4a 46 	call	0x8c94	; 0x8c94 <__addsf3>
    1f94:	0e 94 1a 47 	call	0x8e34	; 0x8e34 <__fixsfsi>
    1f98:	70 93 13 05 	sts	0x0513, r23
    1f9c:	60 93 12 05 	sts	0x0512, r22
}
    1fa0:	df 91       	pop	r29
    1fa2:	cf 91       	pop	r28
    1fa4:	1f 91       	pop	r17
    1fa6:	08 95       	ret

00001fa8 <CalibrateAcc>:
//***************************************************************
// Calibration routines
//***************************************************************

void CalibrateAcc(int8_t type)
{
    1fa8:	1f 93       	push	r17
    1faa:	cf 93       	push	r28
    1fac:	df 93       	push	r29
    1fae:	00 d0       	rcall	.+0      	; 0x1fb0 <CalibrateAcc+0x8>
    1fb0:	00 d0       	rcall	.+0      	; 0x1fb2 <CalibrateAcc+0xa>
    1fb2:	00 d0       	rcall	.+0      	; 0x1fb4 <CalibrateAcc+0xc>
    1fb4:	cd b7       	in	r28, 0x3d	; 61
    1fb6:	de b7       	in	r29, 0x3e	; 62
	uint8_t i;
	int16_t accZero[NUMBEROFAXIS] = {0,0,0};	// Used for calibrating Accs on ground
    1fb8:	1a 82       	std	Y+2, r1	; 0x02
    1fba:	19 82       	std	Y+1, r1	; 0x01
    1fbc:	1c 82       	std	Y+4, r1	; 0x04
    1fbe:	1b 82       	std	Y+3, r1	; 0x03
    1fc0:	1e 82       	std	Y+6, r1	; 0x06
    1fc2:	1d 82       	std	Y+5, r1	; 0x05

	// Calibrate acc
	if (type == NORMAL)
    1fc4:	81 11       	cpse	r24, r1
    1fc6:	6f c0       	rjmp	.+222    	; 0x20a6 <CalibrateAcc+0xfe>
    1fc8:	10 e2       	ldi	r17, 0x20	; 32
	{
		// Get average zero value (over 32 readings)
		for (i = 0; i < 32; i++)
		{
			get_raw_accs();						// Updates accADC[] with signals reoriented into (RPY)
    1fca:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <get_raw_accs>

			accZero[ROLL] += accADC[ROLL];
    1fce:	89 81       	ldd	r24, Y+1	; 0x01
    1fd0:	9a 81       	ldd	r25, Y+2	; 0x02
    1fd2:	20 91 44 05 	lds	r18, 0x0544
    1fd6:	30 91 45 05 	lds	r19, 0x0545
    1fda:	82 0f       	add	r24, r18
    1fdc:	93 1f       	adc	r25, r19
    1fde:	9a 83       	std	Y+2, r25	; 0x02
    1fe0:	89 83       	std	Y+1, r24	; 0x01
			accZero[PITCH] += accADC[PITCH];						
    1fe2:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe4:	9c 81       	ldd	r25, Y+4	; 0x04
    1fe6:	20 91 46 05 	lds	r18, 0x0546
    1fea:	30 91 47 05 	lds	r19, 0x0547
    1fee:	82 0f       	add	r24, r18
    1ff0:	93 1f       	adc	r25, r19
    1ff2:	9c 83       	std	Y+4, r25	; 0x04
    1ff4:	8b 83       	std	Y+3, r24	; 0x03
			accZero[YAW] += accADC[YAW];		
    1ff6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ff8:	9e 81       	ldd	r25, Y+6	; 0x06
    1ffa:	20 91 48 05 	lds	r18, 0x0548
    1ffe:	30 91 49 05 	lds	r19, 0x0549
    2002:	82 0f       	add	r24, r18
    2004:	93 1f       	adc	r25, r19
    2006:	9e 83       	std	Y+6, r25	; 0x06
    2008:	8d 83       	std	Y+5, r24	; 0x05
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    200a:	8f e4       	ldi	r24, 0x4F	; 79
    200c:	93 ec       	ldi	r25, 0xC3	; 195
    200e:	01 97       	sbiw	r24, 0x01	; 1
    2010:	f1 f7       	brne	.-4      	; 0x200e <CalibrateAcc+0x66>
    2012:	00 c0       	rjmp	.+0      	; 0x2014 <CalibrateAcc+0x6c>
    2014:	00 00       	nop
    2016:	11 50       	subi	r17, 0x01	; 1

	// Calibrate acc
	if (type == NORMAL)
	{
		// Get average zero value (over 32 readings)
		for (i = 0; i < 32; i++)
    2018:	c1 f6       	brne	.-80     	; 0x1fca <CalibrateAcc+0x22>
    201a:	fe 01       	movw	r30, r28
    201c:	31 96       	adiw	r30, 0x01	; 1
    201e:	9e 01       	movw	r18, r28
    2020:	29 5f       	subi	r18, 0xF9	; 249
    2022:	3f 4f       	sbci	r19, 0xFF	; 255
		}

		for (i = 0; i < NUMBEROFAXIS; i++)		// For selected axis in RPY order
		{
			// Round and divide by 32
			accZero[i] = ((accZero[i] + 16) >> 5);
    2024:	80 81       	ld	r24, Z
    2026:	91 81       	ldd	r25, Z+1	; 0x01
    2028:	40 96       	adiw	r24, 0x10	; 16
    202a:	45 e0       	ldi	r20, 0x05	; 5
    202c:	95 95       	asr	r25
    202e:	87 95       	ror	r24
    2030:	4a 95       	dec	r20
    2032:	e1 f7       	brne	.-8      	; 0x202c <CalibrateAcc+0x84>
    2034:	81 93       	st	Z+, r24
    2036:	91 93       	st	Z+, r25
			accZero[YAW] += accADC[YAW];		

			_delay_ms(10);						// Get a better acc average over time
		}

		for (i = 0; i < NUMBEROFAXIS; i++)		// For selected axis in RPY order
    2038:	e2 17       	cp	r30, r18
    203a:	f3 07       	cpc	r31, r19
    203c:	99 f7       	brne	.-26     	; 0x2024 <CalibrateAcc+0x7c>
			// Round and divide by 32
			accZero[i] = ((accZero[i] + 16) >> 5);
		}

		// Reset zeros to normal cal
		Config.AccZero[ROLL] = accZero[ROLL]; 
    203e:	89 81       	ldd	r24, Y+1	; 0x01
    2040:	9a 81       	ldd	r25, Y+2	; 0x02
    2042:	90 93 9c 07 	sts	0x079C, r25
    2046:	80 93 9b 07 	sts	0x079B, r24
		Config.AccZero[PITCH] = accZero[PITCH]; 
    204a:	8b 81       	ldd	r24, Y+3	; 0x03
    204c:	9c 81       	ldd	r25, Y+4	; 0x04
    204e:	90 93 9e 07 	sts	0x079E, r25
    2052:	80 93 9d 07 	sts	0x079D, r24
		Config.AccZeroNormZ = accZero[YAW]; 
			
		// Correct polarity of AccZeroNormZ as per orientation
		Config.AccZeroNormZ *= (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation][YAW]);
    2056:	80 91 39 06 	lds	r24, 0x0639
    205a:	99 27       	eor	r25, r25
    205c:	87 fd       	sbrc	r24, 7
    205e:	90 95       	com	r25
    2060:	fc 01       	movw	r30, r24
    2062:	ee 0f       	add	r30, r30
    2064:	ff 1f       	adc	r31, r31
    2066:	e8 0f       	add	r30, r24
    2068:	f9 1f       	adc	r31, r25
    206a:	e6 54       	subi	r30, 0x46	; 70
    206c:	ff 4f       	sbci	r31, 0xFF	; 255
    206e:	44 91       	lpm	r20, Z
    2070:	2d 81       	ldd	r18, Y+5	; 0x05
    2072:	3e 81       	ldd	r19, Y+6	; 0x06
    2074:	42 03       	mulsu	r20, r18
    2076:	c0 01       	movw	r24, r0
    2078:	43 9f       	mul	r20, r19
    207a:	90 0d       	add	r25, r0
    207c:	11 24       	eor	r1, r1
    207e:	90 93 a2 07 	sts	0x07A2, r25
    2082:	80 93 a1 07 	sts	0x07A1, r24
			
		// Flag that normal cal done
		Config.Main_flags |= (1 << normal_cal_done);
    2086:	80 91 b8 07 	lds	r24, 0x07B8
    208a:	82 60       	ori	r24, 0x02	; 2
    208c:	80 93 b8 07 	sts	0x07B8, r24
	
		// Save new calibration and flash LED for confirmation
		Save_Config_to_EEPROM();
    2090:	0e 94 6b 16 	call	0x2cd6	; 0x2cd6 <Save_Config_to_EEPROM>
		LED1 = 1;
    2094:	2b 9a       	sbi	0x05, 3	; 5
    2096:	9f e7       	ldi	r25, 0x7F	; 127
    2098:	24 e8       	ldi	r18, 0x84	; 132
    209a:	4e e1       	ldi	r20, 0x1E	; 30
    209c:	91 50       	subi	r25, 0x01	; 1
    209e:	20 40       	sbci	r18, 0x00	; 0
    20a0:	40 40       	sbci	r20, 0x00	; 0
    20a2:	e1 f7       	brne	.-8      	; 0x209c <CalibrateAcc+0xf4>
    20a4:	67 c0       	rjmp	.+206    	; 0x2174 <CalibrateAcc+0x1cc>

	else
	// Calibrate inverted acc
	{
		// Only update the inverted cal value if preceded by a normal calibration
		if (Config.Main_flags & (1 << normal_cal_done))
    20a6:	80 91 b8 07 	lds	r24, 0x07B8
    20aa:	81 ff       	sbrs	r24, 1
    20ac:	66 c0       	rjmp	.+204    	; 0x217a <CalibrateAcc+0x1d2>
		{
			// Get average zero value (over 32 readings)
			Config.AccZeroInvZ = 0;
    20ae:	10 92 a4 07 	sts	0x07A4, r1
    20b2:	10 92 a3 07 	sts	0x07A3, r1
    20b6:	10 e2       	ldi	r17, 0x20	; 32

			for (i = 0; i < 32; i++)
			{
				get_raw_accs();					// Updates gyroADC[] with reoriented vales
    20b8:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <get_raw_accs>
				Config.AccZeroInvZ += accADC[YAW];		
    20bc:	80 91 a3 07 	lds	r24, 0x07A3
    20c0:	90 91 a4 07 	lds	r25, 0x07A4
    20c4:	20 91 48 05 	lds	r18, 0x0548
    20c8:	30 91 49 05 	lds	r19, 0x0549
    20cc:	82 0f       	add	r24, r18
    20ce:	93 1f       	adc	r25, r19
    20d0:	90 93 a4 07 	sts	0x07A4, r25
    20d4:	80 93 a3 07 	sts	0x07A3, r24
    20d8:	8f e4       	ldi	r24, 0x4F	; 79
    20da:	93 ec       	ldi	r25, 0xC3	; 195
    20dc:	01 97       	sbiw	r24, 0x01	; 1
    20de:	f1 f7       	brne	.-4      	; 0x20dc <CalibrateAcc+0x134>
    20e0:	00 c0       	rjmp	.+0      	; 0x20e2 <CalibrateAcc+0x13a>
    20e2:	00 00       	nop
    20e4:	11 50       	subi	r17, 0x01	; 1
		if (Config.Main_flags & (1 << normal_cal_done))
		{
			// Get average zero value (over 32 readings)
			Config.AccZeroInvZ = 0;

			for (i = 0; i < 32; i++)
    20e6:	41 f7       	brne	.-48     	; 0x20b8 <CalibrateAcc+0x110>

			// Round and divide by 32
			Config.AccZeroInvZ = ((Config.AccZeroInvZ + 16) >> 5);		// Inverted zero point
			
			// Correct polarity of AccZeroInvZ as per orientation
			Config.AccZeroInvZ *= (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation][YAW]);
    20e8:	80 91 39 06 	lds	r24, 0x0639
    20ec:	99 27       	eor	r25, r25
    20ee:	87 fd       	sbrc	r24, 7
    20f0:	90 95       	com	r25
    20f2:	fc 01       	movw	r30, r24
    20f4:	ee 0f       	add	r30, r30
    20f6:	ff 1f       	adc	r31, r31
    20f8:	e8 0f       	add	r30, r24
    20fa:	f9 1f       	adc	r31, r25
    20fc:	e6 54       	subi	r30, 0x46	; 70
    20fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2100:	44 91       	lpm	r20, Z
				Config.AccZeroInvZ += accADC[YAW];		
				_delay_ms(10);					// Get a better acc average over time
			}

			// Round and divide by 32
			Config.AccZeroInvZ = ((Config.AccZeroInvZ + 16) >> 5);		// Inverted zero point
    2102:	20 91 a3 07 	lds	r18, 0x07A3
    2106:	30 91 a4 07 	lds	r19, 0x07A4
    210a:	20 5f       	subi	r18, 0xF0	; 240
    210c:	3f 4f       	sbci	r19, 0xFF	; 255
    210e:	b5 e0       	ldi	r27, 0x05	; 5
    2110:	35 95       	asr	r19
    2112:	27 95       	ror	r18
    2114:	ba 95       	dec	r27
    2116:	e1 f7       	brne	.-8      	; 0x2110 <CalibrateAcc+0x168>
			
			// Correct polarity of AccZeroInvZ as per orientation
			Config.AccZeroInvZ *= (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation][YAW]);
    2118:	42 03       	mulsu	r20, r18
    211a:	c0 01       	movw	r24, r0
    211c:	43 9f       	mul	r20, r19
    211e:	90 0d       	add	r25, r0
    2120:	11 24       	eor	r1, r1
    2122:	90 93 a4 07 	sts	0x07A4, r25
    2126:	80 93 a3 07 	sts	0x07A3, r24

			// Test if board is actually inverted relative to board orientation.
			if (Config.AccZeroInvZ < 0)
    212a:	97 ff       	sbrs	r25, 7
    212c:	26 c0       	rjmp	.+76     	; 0x217a <CalibrateAcc+0x1d2>
			{

				// Reset zero to halfway between min and max Z
				Config.AccZeroDiff = ((Config.AccZeroNormZ - Config.AccZeroInvZ) >> 1);
    212e:	20 91 a1 07 	lds	r18, 0x07A1
    2132:	30 91 a2 07 	lds	r19, 0x07A2
    2136:	a9 01       	movw	r20, r18
    2138:	48 1b       	sub	r20, r24
    213a:	59 0b       	sbc	r21, r25
    213c:	ca 01       	movw	r24, r20
    213e:	95 95       	asr	r25
    2140:	87 95       	ror	r24
    2142:	90 93 a6 07 	sts	0x07A6, r25
    2146:	80 93 a5 07 	sts	0x07A5, r24
				Config.AccZero[YAW] = Config.AccZeroNormZ - Config.AccZeroDiff; // Config.AccZero[YAW] is now valid to use
    214a:	28 1b       	sub	r18, r24
    214c:	39 0b       	sbc	r19, r25
    214e:	30 93 a0 07 	sts	0x07A0, r19
    2152:	20 93 9f 07 	sts	0x079F, r18

				// Flag that inverted cal done
				Config.Main_flags |= (1 << inv_cal_done);
    2156:	80 91 b8 07 	lds	r24, 0x07B8
    215a:	81 60       	ori	r24, 0x01	; 1
    215c:	80 93 b8 07 	sts	0x07B8, r24

				// Save new calibration and flash LED for confirmation
				Save_Config_to_EEPROM();
    2160:	0e 94 6b 16 	call	0x2cd6	; 0x2cd6 <Save_Config_to_EEPROM>
				LED1 = 1;
    2164:	2b 9a       	sbi	0x05, 3	; 5
    2166:	5f e7       	ldi	r21, 0x7F	; 127
    2168:	84 e8       	ldi	r24, 0x84	; 132
    216a:	9e e1       	ldi	r25, 0x1E	; 30
    216c:	51 50       	subi	r21, 0x01	; 1
    216e:	80 40       	sbci	r24, 0x00	; 0
    2170:	90 40       	sbci	r25, 0x00	; 0
    2172:	e1 f7       	brne	.-8      	; 0x216c <CalibrateAcc+0x1c4>
    2174:	00 c0       	rjmp	.+0      	; 0x2176 <CalibrateAcc+0x1ce>
    2176:	00 00       	nop
				_delay_ms(500);
				LED1 = 0;
    2178:	2b 98       	cbi	0x05, 3	; 5
			}
		}
	}
}
    217a:	26 96       	adiw	r28, 0x06	; 6
    217c:	0f b6       	in	r0, 0x3f	; 63
    217e:	f8 94       	cli
    2180:	de bf       	out	0x3e, r29	; 62
    2182:	0f be       	out	0x3f, r0	; 63
    2184:	cd bf       	out	0x3d, r28	; 61
    2186:	df 91       	pop	r29
    2188:	cf 91       	pop	r28
    218a:	1f 91       	pop	r17
    218c:	08 95       	ret

0000218e <init_i2c_accs>:
// Set up the MPU6050 (Acc)
//***************************************************************

void init_i2c_accs(void)
{
	writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_PWR_MGMT_1, 0x01); // Gyro X clock, awake
    218e:	41 e0       	ldi	r20, 0x01	; 1
    2190:	6b e6       	ldi	r22, 0x6B	; 107
    2192:	80 ed       	ldi	r24, 0xD0	; 208
    2194:	0e 94 b2 24 	call	0x4964	; 0x4964 <writeI2Cbyte>
	writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_ACCEL_CONFIG, ACCFS4G); // 4G full scale
    2198:	48 e0       	ldi	r20, 0x08	; 8
    219a:	6c e1       	ldi	r22, 0x1C	; 28
    219c:	80 ed       	ldi	r24, 0xD0	; 208
    219e:	0c 94 b2 24 	jmp	0x4964	; 0x4964 <writeI2Cbyte>

000021a2 <Init_ADC>:
//***********************************************************

void Init_ADC(void)
{
	// Digital Input Disable Register - ADC0~7 Digital Input Disable
	DIDR0 	= (1<<ADC0D)|(1<<ADC1D)|(1<<ADC2D)|(1<<ADC3D)|(1<<ADC4D)|(1<<ADC5D)|(1<<ADC6D)|(1<<ADC7D);
    21a2:	8f ef       	ldi	r24, 0xFF	; 255
    21a4:	80 93 7e 00 	sts	0x007E, r24
	
	// ADC Control and Status Register B - ADTS2:0
	ADCSRB 	= 0x00;
    21a8:	10 92 7b 00 	sts	0x007B, r1
    21ac:	08 95       	ret

000021ae <read_adc>:
}

void read_adc(uint8_t channel)
{
	ADMUX	= channel;
    21ae:	80 93 7c 00 	sts	0x007C, r24
	
	// ADEN, ADSC, ADPS1,2
	ADCSRA 	= (1<<ADEN)|(1<<ADSC)|(1<<ADPS1)|(1<<ADPS2);
    21b2:	86 ec       	ldi	r24, 0xC6	; 198
    21b4:	80 93 7a 00 	sts	0x007A, r24

	// Wait to complete. Result is in ADCW
	while (ADCSRA & (1 << ADSC));
    21b8:	80 91 7a 00 	lds	r24, 0x007A
    21bc:	86 fd       	sbrc	r24, 6
    21be:	fc cf       	rjmp	.-8      	; 0x21b8 <read_adc+0xa>
}
    21c0:	08 95       	ret

000021c2 <Display_balance>:
//************************************************************
// Code
//************************************************************

void Display_balance(void)
{
    21c2:	cf 92       	push	r12
    21c4:	df 92       	push	r13
    21c6:	ef 92       	push	r14
    21c8:	0f 93       	push	r16
    21ca:	cf 93       	push	r28
    21cc:	df 93       	push	r29

	#ifdef KK2Mini
	st7565_set_brightness(28);
	#endif

	while(BUTTON1 != 0)
    21ce:	1f 9b       	sbis	0x03, 7	; 3
    21d0:	85 c0       	rjmp	.+266    	; 0x22dc <Display_balance+0x11a>
	{
		// Read accs
		ReadAcc();
    21d2:	0e 94 70 0f 	call	0x1ee0	; 0x1ee0 <ReadAcc>

		// Refresh accSmooth values
		// Fake the IMU period as accSmooth doesn't need that
		simple_imu_update(0);
    21d6:	60 e0       	ldi	r22, 0x00	; 0
    21d8:	70 e0       	ldi	r23, 0x00	; 0
    21da:	cb 01       	movw	r24, r22
    21dc:	0e 94 2a 27 	call	0x4e54	; 0x4e54 <simple_imu_update>
		
		// Convert acc signal to a pixel position
		x_pos = accSmooth[PITCH] + 32;
    21e0:	20 e0       	ldi	r18, 0x00	; 0
    21e2:	30 e0       	ldi	r19, 0x00	; 0
    21e4:	40 e0       	ldi	r20, 0x00	; 0
    21e6:	52 e4       	ldi	r21, 0x42	; 66
    21e8:	60 91 9d 05 	lds	r22, 0x059D
    21ec:	70 91 9e 05 	lds	r23, 0x059E
    21f0:	80 91 9f 05 	lds	r24, 0x059F
    21f4:	90 91 a0 05 	lds	r25, 0x05A0
    21f8:	0e 94 4a 46 	call	0x8c94	; 0x8c94 <__addsf3>
    21fc:	0e 94 1a 47 	call	0x8e34	; 0x8e34 <__fixsfsi>
    2200:	eb 01       	movw	r28, r22
		y_pos = accSmooth[ROLL] + 64;
    2202:	20 e0       	ldi	r18, 0x00	; 0
    2204:	30 e0       	ldi	r19, 0x00	; 0
    2206:	40 e8       	ldi	r20, 0x80	; 128
    2208:	52 e4       	ldi	r21, 0x42	; 66
    220a:	60 91 99 05 	lds	r22, 0x0599
    220e:	70 91 9a 05 	lds	r23, 0x059A
    2212:	80 91 9b 05 	lds	r24, 0x059B
    2216:	90 91 9c 05 	lds	r25, 0x059C
    221a:	0e 94 4a 46 	call	0x8c94	; 0x8c94 <__addsf3>
    221e:	0e 94 1a 47 	call	0x8e34	; 0x8e34 <__fixsfsi>
    2222:	6b 01       	movw	r12, r22

		if (x_pos < 0) x_pos = 0;
    2224:	d7 fd       	sbrc	r29, 7
    2226:	06 c0       	rjmp	.+12     	; 0x2234 <Display_balance+0x72>
		if (x_pos > 64) x_pos = 64;
    2228:	c1 34       	cpi	r28, 0x41	; 65
    222a:	d1 05       	cpc	r29, r1
    222c:	2c f0       	brlt	.+10     	; 0x2238 <Display_balance+0x76>
    222e:	c0 e4       	ldi	r28, 0x40	; 64
    2230:	d0 e0       	ldi	r29, 0x00	; 0
    2232:	02 c0       	rjmp	.+4      	; 0x2238 <Display_balance+0x76>
		
		// Convert acc signal to a pixel position
		x_pos = accSmooth[PITCH] + 32;
		y_pos = accSmooth[ROLL] + 64;

		if (x_pos < 0) x_pos = 0;
    2234:	c0 e0       	ldi	r28, 0x00	; 0
    2236:	d0 e0       	ldi	r29, 0x00	; 0
		if (x_pos > 64) x_pos = 64;
		if (y_pos < 0) y_pos = 0;
    2238:	d7 fc       	sbrc	r13, 7
    223a:	08 c0       	rjmp	.+16     	; 0x224c <Display_balance+0x8a>
		if (y_pos > 128) y_pos = 128;
    223c:	21 e8       	ldi	r18, 0x81	; 129
    223e:	c2 16       	cp	r12, r18
    2240:	d1 04       	cpc	r13, r1
    2242:	34 f0       	brlt	.+12     	; 0x2250 <Display_balance+0x8e>
    2244:	80 e8       	ldi	r24, 0x80	; 128
    2246:	c8 2e       	mov	r12, r24
    2248:	d1 2c       	mov	r13, r1
    224a:	02 c0       	rjmp	.+4      	; 0x2250 <Display_balance+0x8e>
		x_pos = accSmooth[PITCH] + 32;
		y_pos = accSmooth[ROLL] + 64;

		if (x_pos < 0) x_pos = 0;
		if (x_pos > 64) x_pos = 64;
		if (y_pos < 0) y_pos = 0;
    224c:	c1 2c       	mov	r12, r1
    224e:	d1 2c       	mov	r13, r1
		if (y_pos > 128) y_pos = 128;

		// Print bottom markers
		LCD_Display_Text(12, (const unsigned char*)Wingdings, 2, 55); 	// Left
    2250:	27 e3       	ldi	r18, 0x37	; 55
    2252:	30 e0       	ldi	r19, 0x00	; 0
    2254:	42 e0       	ldi	r20, 0x02	; 2
    2256:	50 e0       	ldi	r21, 0x00	; 0
    2258:	65 ef       	ldi	r22, 0xF5	; 245
    225a:	70 e0       	ldi	r23, 0x00	; 0
    225c:	8c e0       	ldi	r24, 0x0C	; 12
    225e:	90 e0       	ldi	r25, 0x00	; 0
    2260:	0e 94 54 22 	call	0x44a8	; 0x44a8 <LCD_Display_Text>

		// Draw balance meter
		drawrect(buffer, 0, 0, 128, 64, 1);		// Border
    2264:	ee 24       	eor	r14, r14
    2266:	e3 94       	inc	r14
    2268:	00 e4       	ldi	r16, 0x40	; 64
    226a:	20 e8       	ldi	r18, 0x80	; 128
    226c:	40 e0       	ldi	r20, 0x00	; 0
    226e:	60 e0       	ldi	r22, 0x00	; 0
    2270:	85 e0       	ldi	r24, 0x05	; 5
    2272:	91 e0       	ldi	r25, 0x01	; 1
    2274:	0e 94 71 21 	call	0x42e2	; 0x42e2 <drawrect>
		drawrect(buffer, 54, 22, 21, 21, 1);	// Target
    2278:	05 e1       	ldi	r16, 0x15	; 21
    227a:	25 e1       	ldi	r18, 0x15	; 21
    227c:	46 e1       	ldi	r20, 0x16	; 22
    227e:	66 e3       	ldi	r22, 0x36	; 54
    2280:	85 e0       	ldi	r24, 0x05	; 5
    2282:	91 e0       	ldi	r25, 0x01	; 1
    2284:	0e 94 71 21 	call	0x42e2	; 0x42e2 <drawrect>
		drawline(buffer, 64, 8, 64, 56, 1); 	// Crosshairs
    2288:	08 e3       	ldi	r16, 0x38	; 56
    228a:	20 e4       	ldi	r18, 0x40	; 64
    228c:	48 e0       	ldi	r20, 0x08	; 8
    228e:	60 e4       	ldi	r22, 0x40	; 64
    2290:	85 e0       	ldi	r24, 0x05	; 5
    2292:	91 e0       	ldi	r25, 0x01	; 1
    2294:	0e 94 07 21 	call	0x420e	; 0x420e <drawline>
		drawline(buffer, 32, 32, 96, 32, 1);
    2298:	00 e2       	ldi	r16, 0x20	; 32
    229a:	20 e6       	ldi	r18, 0x60	; 96
    229c:	40 e2       	ldi	r20, 0x20	; 32
    229e:	60 e2       	ldi	r22, 0x20	; 32
    22a0:	85 e0       	ldi	r24, 0x05	; 5
    22a2:	91 e0       	ldi	r25, 0x01	; 1
    22a4:	0e 94 07 21 	call	0x420e	; 0x420e <drawline>
		fillcircle(buffer, y_pos, x_pos, 8, 1);	// Bubble
    22a8:	01 e0       	ldi	r16, 0x01	; 1
    22aa:	28 e0       	ldi	r18, 0x08	; 8
    22ac:	4c 2f       	mov	r20, r28
    22ae:	6c 2d       	mov	r22, r12
    22b0:	85 e0       	ldi	r24, 0x05	; 5
    22b2:	91 e0       	ldi	r25, 0x01	; 1
    22b4:	0e 94 c3 21 	call	0x4386	; 0x4386 <fillcircle>

		// Refresh GLCD
		write_buffer(buffer);
    22b8:	85 e0       	ldi	r24, 0x05	; 5
    22ba:	91 e0       	ldi	r25, 0x01	; 1
    22bc:	0e 94 75 20 	call	0x40ea	; 0x40ea <write_buffer>
		clear_buffer(buffer);
    22c0:	85 e0       	ldi	r24, 0x05	; 5
    22c2:	91 e0       	ldi	r25, 0x01	; 1
    22c4:	0e 94 a7 20 	call	0x414e	; 0x414e <clear_buffer>
    22c8:	8f e7       	ldi	r24, 0x7F	; 127
    22ca:	98 e3       	ldi	r25, 0x38	; 56
    22cc:	21 e0       	ldi	r18, 0x01	; 1
    22ce:	81 50       	subi	r24, 0x01	; 1
    22d0:	90 40       	sbci	r25, 0x00	; 0
    22d2:	20 40       	sbci	r18, 0x00	; 0
    22d4:	e1 f7       	brne	.-8      	; 0x22ce <Display_balance+0x10c>
    22d6:	00 c0       	rjmp	.+0      	; 0x22d8 <Display_balance+0x116>
    22d8:	00 00       	nop
    22da:	79 cf       	rjmp	.-270    	; 0x21ce <Display_balance+0xc>
	#ifdef KK2Mini
	clear_buffer(buffer);
	write_buffer(buffer);
	st7565_set_brightness(Config.Contrast);
	#endif
}
    22dc:	df 91       	pop	r29
    22de:	cf 91       	pop	r28
    22e0:	0f 91       	pop	r16
    22e2:	ef 90       	pop	r14
    22e4:	df 90       	pop	r13
    22e6:	cf 90       	pop	r12
    22e8:	08 95       	ret

000022ea <Display_rcinput>:
//************************************************************

void Display_rcinput(void)
{
	// Re-enable interrupts. High seed mode may have left them off
	init_int();
    22ea:	0e 94 4e 2e 	call	0x5c9c	; 0x5c9c <init_int>
	
	while(BUTTON1 != 0)
    22ee:	1f 9b       	sbis	0x03, 7	; 3
    22f0:	fa c0       	rjmp	.+500    	; 0x24e6 <Display_rcinput+0x1fc>
	{
		if (BUTTON4 == 0)
    22f2:	1c 9b       	sbis	0x03, 4	; 3
		{
			CenterSticks();
    22f4:	0e 94 f5 43 	call	0x87ea	; 0x87ea <CenterSticks>
		}

		RxGetChannels();
    22f8:	0e 94 60 43 	call	0x86c0	; 0x86c0 <RxGetChannels>

		LCD_Display_Text(114,(const unsigned char*)Verdana8,0,0); // Throttle
    22fc:	20 e0       	ldi	r18, 0x00	; 0
    22fe:	30 e0       	ldi	r19, 0x00	; 0
    2300:	40 e0       	ldi	r20, 0x00	; 0
    2302:	50 e0       	ldi	r21, 0x00	; 0
    2304:	6d e0       	ldi	r22, 0x0D	; 13
    2306:	7a e0       	ldi	r23, 0x0A	; 10
    2308:	82 e7       	ldi	r24, 0x72	; 114
    230a:	90 e0       	ldi	r25, 0x00	; 0
    230c:	0e 94 54 22 	call	0x44a8	; 0x44a8 <LCD_Display_Text>
		LCD_Display_Text(32,(const unsigned char*)Verdana8,0,10);
    2310:	2a e0       	ldi	r18, 0x0A	; 10
    2312:	30 e0       	ldi	r19, 0x00	; 0
    2314:	40 e0       	ldi	r20, 0x00	; 0
    2316:	50 e0       	ldi	r21, 0x00	; 0
    2318:	6d e0       	ldi	r22, 0x0D	; 13
    231a:	7a e0       	ldi	r23, 0x0A	; 10
    231c:	80 e2       	ldi	r24, 0x20	; 32
    231e:	90 e0       	ldi	r25, 0x00	; 0
    2320:	0e 94 54 22 	call	0x44a8	; 0x44a8 <LCD_Display_Text>
		LCD_Display_Text(115,(const unsigned char*)Verdana8,0,20);
    2324:	24 e1       	ldi	r18, 0x14	; 20
    2326:	30 e0       	ldi	r19, 0x00	; 0
    2328:	40 e0       	ldi	r20, 0x00	; 0
    232a:	50 e0       	ldi	r21, 0x00	; 0
    232c:	6d e0       	ldi	r22, 0x0D	; 13
    232e:	7a e0       	ldi	r23, 0x0A	; 10
    2330:	83 e7       	ldi	r24, 0x73	; 115
    2332:	90 e0       	ldi	r25, 0x00	; 0
    2334:	0e 94 54 22 	call	0x44a8	; 0x44a8 <LCD_Display_Text>
		LCD_Display_Text(35,(const unsigned char*)Verdana8,0,30);
    2338:	2e e1       	ldi	r18, 0x1E	; 30
    233a:	30 e0       	ldi	r19, 0x00	; 0
    233c:	40 e0       	ldi	r20, 0x00	; 0
    233e:	50 e0       	ldi	r21, 0x00	; 0
    2340:	6d e0       	ldi	r22, 0x0D	; 13
    2342:	7a e0       	ldi	r23, 0x0A	; 10
    2344:	83 e2       	ldi	r24, 0x23	; 35
    2346:	90 e0       	ldi	r25, 0x00	; 0
    2348:	0e 94 54 22 	call	0x44a8	; 0x44a8 <LCD_Display_Text>

		LCD_Display_Text(109,(const unsigned char*)Verdana8,70,0); // Gear
    234c:	20 e0       	ldi	r18, 0x00	; 0
    234e:	30 e0       	ldi	r19, 0x00	; 0
    2350:	46 e4       	ldi	r20, 0x46	; 70
    2352:	50 e0       	ldi	r21, 0x00	; 0
    2354:	6d e0       	ldi	r22, 0x0D	; 13
    2356:	7a e0       	ldi	r23, 0x0A	; 10
    2358:	8d e6       	ldi	r24, 0x6D	; 109
    235a:	90 e0       	ldi	r25, 0x00	; 0
    235c:	0e 94 54 22 	call	0x44a8	; 0x44a8 <LCD_Display_Text>
		LCD_Display_Text(110,(const unsigned char*)Verdana8,70,10);
    2360:	2a e0       	ldi	r18, 0x0A	; 10
    2362:	30 e0       	ldi	r19, 0x00	; 0
    2364:	46 e4       	ldi	r20, 0x46	; 70
    2366:	50 e0       	ldi	r21, 0x00	; 0
    2368:	6d e0       	ldi	r22, 0x0D	; 13
    236a:	7a e0       	ldi	r23, 0x0A	; 10
    236c:	8e e6       	ldi	r24, 0x6E	; 110
    236e:	90 e0       	ldi	r25, 0x00	; 0
    2370:	0e 94 54 22 	call	0x44a8	; 0x44a8 <LCD_Display_Text>
		LCD_Display_Text(111,(const unsigned char*)Verdana8,70,20);
    2374:	24 e1       	ldi	r18, 0x14	; 20
    2376:	30 e0       	ldi	r19, 0x00	; 0
    2378:	46 e4       	ldi	r20, 0x46	; 70
    237a:	50 e0       	ldi	r21, 0x00	; 0
    237c:	6d e0       	ldi	r22, 0x0D	; 13
    237e:	7a e0       	ldi	r23, 0x0A	; 10
    2380:	8f e6       	ldi	r24, 0x6F	; 111
    2382:	90 e0       	ldi	r25, 0x00	; 0
    2384:	0e 94 54 22 	call	0x44a8	; 0x44a8 <LCD_Display_Text>
		LCD_Display_Text(112,(const unsigned char*)Verdana8,70,30);
    2388:	2e e1       	ldi	r18, 0x1E	; 30
    238a:	30 e0       	ldi	r19, 0x00	; 0
    238c:	46 e4       	ldi	r20, 0x46	; 70
    238e:	50 e0       	ldi	r21, 0x00	; 0
    2390:	6d e0       	ldi	r22, 0x0D	; 13
    2392:	7a e0       	ldi	r23, 0x0A	; 10
    2394:	80 e7       	ldi	r24, 0x70	; 112
    2396:	90 e0       	ldi	r25, 0x00	; 0
    2398:	0e 94 54 22 	call	0x44a8	; 0x44a8 <LCD_Display_Text>

		mugui_lcd_puts(itoa(MonopolarThrottle,pBuffer,10),(const unsigned char*)Verdana8,37,0);
    239c:	80 91 29 08 	lds	r24, 0x0829
    23a0:	90 91 2a 08 	lds	r25, 0x082A
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    23a4:	4a e0       	ldi	r20, 0x0A	; 10
    23a6:	63 e6       	ldi	r22, 0x63	; 99
    23a8:	75 e0       	ldi	r23, 0x05	; 5
    23aa:	0e 94 1f 49 	call	0x923e	; 0x923e <__itoa_ncheck>
    23ae:	20 e0       	ldi	r18, 0x00	; 0
    23b0:	30 e0       	ldi	r19, 0x00	; 0
    23b2:	45 e2       	ldi	r20, 0x25	; 37
    23b4:	50 e0       	ldi	r21, 0x00	; 0
    23b6:	6d e0       	ldi	r22, 0x0D	; 13
    23b8:	7a e0       	ldi	r23, 0x0A	; 10
    23ba:	0e 94 c3 3e 	call	0x7d86	; 0x7d86 <mugui_lcd_puts>
		mugui_lcd_puts(itoa(RCinputs[AILERON],pBuffer,10),(const unsigned char*)Verdana8,37,10);
    23be:	80 91 2d 08 	lds	r24, 0x082D
    23c2:	90 91 2e 08 	lds	r25, 0x082E
    23c6:	4a e0       	ldi	r20, 0x0A	; 10
    23c8:	63 e6       	ldi	r22, 0x63	; 99
    23ca:	75 e0       	ldi	r23, 0x05	; 5
    23cc:	0e 94 1f 49 	call	0x923e	; 0x923e <__itoa_ncheck>
    23d0:	2a e0       	ldi	r18, 0x0A	; 10
    23d2:	30 e0       	ldi	r19, 0x00	; 0
    23d4:	45 e2       	ldi	r20, 0x25	; 37
    23d6:	50 e0       	ldi	r21, 0x00	; 0
    23d8:	6d e0       	ldi	r22, 0x0D	; 13
    23da:	7a e0       	ldi	r23, 0x0A	; 10
    23dc:	0e 94 c3 3e 	call	0x7d86	; 0x7d86 <mugui_lcd_puts>
		mugui_lcd_puts(itoa(RCinputs[ELEVATOR],pBuffer,10),(const unsigned char*)Verdana8,37,20);
    23e0:	80 91 2f 08 	lds	r24, 0x082F
    23e4:	90 91 30 08 	lds	r25, 0x0830
    23e8:	4a e0       	ldi	r20, 0x0A	; 10
    23ea:	63 e6       	ldi	r22, 0x63	; 99
    23ec:	75 e0       	ldi	r23, 0x05	; 5
    23ee:	0e 94 1f 49 	call	0x923e	; 0x923e <__itoa_ncheck>
    23f2:	24 e1       	ldi	r18, 0x14	; 20
    23f4:	30 e0       	ldi	r19, 0x00	; 0
    23f6:	45 e2       	ldi	r20, 0x25	; 37
    23f8:	50 e0       	ldi	r21, 0x00	; 0
    23fa:	6d e0       	ldi	r22, 0x0D	; 13
    23fc:	7a e0       	ldi	r23, 0x0A	; 10
    23fe:	0e 94 c3 3e 	call	0x7d86	; 0x7d86 <mugui_lcd_puts>
		mugui_lcd_puts(itoa(RCinputs[RUDDER],pBuffer,10),(const unsigned char*)Verdana8,37,30);
    2402:	80 91 31 08 	lds	r24, 0x0831
    2406:	90 91 32 08 	lds	r25, 0x0832
    240a:	4a e0       	ldi	r20, 0x0A	; 10
    240c:	63 e6       	ldi	r22, 0x63	; 99
    240e:	75 e0       	ldi	r23, 0x05	; 5
    2410:	0e 94 1f 49 	call	0x923e	; 0x923e <__itoa_ncheck>
    2414:	2e e1       	ldi	r18, 0x1E	; 30
    2416:	30 e0       	ldi	r19, 0x00	; 0
    2418:	45 e2       	ldi	r20, 0x25	; 37
    241a:	50 e0       	ldi	r21, 0x00	; 0
    241c:	6d e0       	ldi	r22, 0x0D	; 13
    241e:	7a e0       	ldi	r23, 0x0A	; 10
    2420:	0e 94 c3 3e 	call	0x7d86	; 0x7d86 <mugui_lcd_puts>

		mugui_lcd_puts(itoa(RCinputs[GEAR],pBuffer,10),(const unsigned char*)Verdana8,100,0);
    2424:	80 91 33 08 	lds	r24, 0x0833
    2428:	90 91 34 08 	lds	r25, 0x0834
    242c:	4a e0       	ldi	r20, 0x0A	; 10
    242e:	63 e6       	ldi	r22, 0x63	; 99
    2430:	75 e0       	ldi	r23, 0x05	; 5
    2432:	0e 94 1f 49 	call	0x923e	; 0x923e <__itoa_ncheck>
    2436:	20 e0       	ldi	r18, 0x00	; 0
    2438:	30 e0       	ldi	r19, 0x00	; 0
    243a:	44 e6       	ldi	r20, 0x64	; 100
    243c:	50 e0       	ldi	r21, 0x00	; 0
    243e:	6d e0       	ldi	r22, 0x0D	; 13
    2440:	7a e0       	ldi	r23, 0x0A	; 10
    2442:	0e 94 c3 3e 	call	0x7d86	; 0x7d86 <mugui_lcd_puts>
		mugui_lcd_puts(itoa(RCinputs[AUX1],pBuffer,10),(const unsigned char*)Verdana8,100,10);
    2446:	80 91 35 08 	lds	r24, 0x0835
    244a:	90 91 36 08 	lds	r25, 0x0836
    244e:	4a e0       	ldi	r20, 0x0A	; 10
    2450:	63 e6       	ldi	r22, 0x63	; 99
    2452:	75 e0       	ldi	r23, 0x05	; 5
    2454:	0e 94 1f 49 	call	0x923e	; 0x923e <__itoa_ncheck>
    2458:	2a e0       	ldi	r18, 0x0A	; 10
    245a:	30 e0       	ldi	r19, 0x00	; 0
    245c:	44 e6       	ldi	r20, 0x64	; 100
    245e:	50 e0       	ldi	r21, 0x00	; 0
    2460:	6d e0       	ldi	r22, 0x0D	; 13
    2462:	7a e0       	ldi	r23, 0x0A	; 10
    2464:	0e 94 c3 3e 	call	0x7d86	; 0x7d86 <mugui_lcd_puts>
		mugui_lcd_puts(itoa(RCinputs[AUX2],pBuffer,10),(const unsigned char*)Verdana8,100,20);
    2468:	80 91 37 08 	lds	r24, 0x0837
    246c:	90 91 38 08 	lds	r25, 0x0838
    2470:	4a e0       	ldi	r20, 0x0A	; 10
    2472:	63 e6       	ldi	r22, 0x63	; 99
    2474:	75 e0       	ldi	r23, 0x05	; 5
    2476:	0e 94 1f 49 	call	0x923e	; 0x923e <__itoa_ncheck>
    247a:	24 e1       	ldi	r18, 0x14	; 20
    247c:	30 e0       	ldi	r19, 0x00	; 0
    247e:	44 e6       	ldi	r20, 0x64	; 100
    2480:	50 e0       	ldi	r21, 0x00	; 0
    2482:	6d e0       	ldi	r22, 0x0D	; 13
    2484:	7a e0       	ldi	r23, 0x0A	; 10
    2486:	0e 94 c3 3e 	call	0x7d86	; 0x7d86 <mugui_lcd_puts>
		mugui_lcd_puts(itoa(RCinputs[AUX3],pBuffer,10),(const unsigned char*)Verdana8,100,30);
    248a:	80 91 39 08 	lds	r24, 0x0839
    248e:	90 91 3a 08 	lds	r25, 0x083A
    2492:	4a e0       	ldi	r20, 0x0A	; 10
    2494:	63 e6       	ldi	r22, 0x63	; 99
    2496:	75 e0       	ldi	r23, 0x05	; 5
    2498:	0e 94 1f 49 	call	0x923e	; 0x923e <__itoa_ncheck>
    249c:	2e e1       	ldi	r18, 0x1E	; 30
    249e:	30 e0       	ldi	r19, 0x00	; 0
    24a0:	44 e6       	ldi	r20, 0x64	; 100
    24a2:	50 e0       	ldi	r21, 0x00	; 0
    24a4:	6d e0       	ldi	r22, 0x0D	; 13
    24a6:	7a e0       	ldi	r23, 0x0A	; 10
    24a8:	0e 94 c3 3e 	call	0x7d86	; 0x7d86 <mugui_lcd_puts>

		// Print bottom text and markers
		LCD_Display_Text(12, (const unsigned char*)Wingdings, 0, 57); 	// Left
    24ac:	29 e3       	ldi	r18, 0x39	; 57
    24ae:	30 e0       	ldi	r19, 0x00	; 0
    24b0:	40 e0       	ldi	r20, 0x00	; 0
    24b2:	50 e0       	ldi	r21, 0x00	; 0
    24b4:	65 ef       	ldi	r22, 0xF5	; 245
    24b6:	70 e0       	ldi	r23, 0x00	; 0
    24b8:	8c e0       	ldi	r24, 0x0C	; 12
    24ba:	90 e0       	ldi	r25, 0x00	; 0
    24bc:	0e 94 54 22 	call	0x44a8	; 0x44a8 <LCD_Display_Text>
		LCD_Display_Text(60, (const unsigned char*)Verdana8, 110, 55); 	// Cal.
    24c0:	27 e3       	ldi	r18, 0x37	; 55
    24c2:	30 e0       	ldi	r19, 0x00	; 0
    24c4:	4e e6       	ldi	r20, 0x6E	; 110
    24c6:	50 e0       	ldi	r21, 0x00	; 0
    24c8:	6d e0       	ldi	r22, 0x0D	; 13
    24ca:	7a e0       	ldi	r23, 0x0A	; 10
    24cc:	8c e3       	ldi	r24, 0x3C	; 60
    24ce:	90 e0       	ldi	r25, 0x00	; 0
    24d0:	0e 94 54 22 	call	0x44a8	; 0x44a8 <LCD_Display_Text>

		// Update buffer
		write_buffer(buffer);
    24d4:	85 e0       	ldi	r24, 0x05	; 5
    24d6:	91 e0       	ldi	r25, 0x01	; 1
    24d8:	0e 94 75 20 	call	0x40ea	; 0x40ea <write_buffer>
		clear_buffer(buffer);
    24dc:	85 e0       	ldi	r24, 0x05	; 5
    24de:	91 e0       	ldi	r25, 0x01	; 1
    24e0:	0e 94 a7 20 	call	0x414e	; 0x414e <clear_buffer>
    24e4:	04 cf       	rjmp	.-504    	; 0x22ee <Display_rcinput+0x4>
	}
}
    24e6:	08 95       	ret

000024e8 <Display_sensors>:
// Code
//************************************************************

void Display_sensors(void)
{
	while(BUTTON1 != 0)
    24e8:	1f 9b       	sbis	0x03, 7	; 3
    24ea:	ed c0       	rjmp	.+474    	; 0x26c6 <Display_sensors+0x1de>
	{
	
		// Normal calibrate button pressed
		if (BUTTON4 == 0)
    24ec:	1c 99       	sbic	0x03, 4	; 3
    24ee:	1a c0       	rjmp	.+52     	; 0x2524 <Display_sensors+0x3c>
		{
			// Wait until finger off button
			while(BUTTON4 == 0)
    24f0:	1c 99       	sbic	0x03, 4	; 3
    24f2:	0a c0       	rjmp	.+20     	; 0x2508 <Display_sensors+0x20>
    24f4:	2f e3       	ldi	r18, 0x3F	; 63
    24f6:	8d e0       	ldi	r24, 0x0D	; 13
    24f8:	93 e0       	ldi	r25, 0x03	; 3
    24fa:	21 50       	subi	r18, 0x01	; 1
    24fc:	80 40       	sbci	r24, 0x00	; 0
    24fe:	90 40       	sbci	r25, 0x00	; 0
    2500:	e1 f7       	brne	.-8      	; 0x24fa <Display_sensors+0x12>
    2502:	00 c0       	rjmp	.+0      	; 0x2504 <Display_sensors+0x1c>
    2504:	00 00       	nop
    2506:	f4 cf       	rjmp	.-24     	; 0x24f0 <Display_sensors+0x8>
    2508:	2f e3       	ldi	r18, 0x3F	; 63
    250a:	82 e4       	ldi	r24, 0x42	; 66
    250c:	9f e0       	ldi	r25, 0x0F	; 15
    250e:	21 50       	subi	r18, 0x01	; 1
    2510:	80 40       	sbci	r24, 0x00	; 0
    2512:	90 40       	sbci	r25, 0x00	; 0
    2514:	e1 f7       	brne	.-8      	; 0x250e <Display_sensors+0x26>
    2516:	00 c0       	rjmp	.+0      	; 0x2518 <Display_sensors+0x30>
    2518:	00 00       	nop
			
			// Pause until steady		
			_delay_ms(250);
			
			// Calibrate sensors
			CalibrateGyrosFast();		
    251a:	0e 94 67 23 	call	0x46ce	; 0x46ce <CalibrateGyrosFast>
			CalibrateAcc(NORMAL);
    251e:	80 e0       	ldi	r24, 0x00	; 0
    2520:	0e 94 d4 0f 	call	0x1fa8	; 0x1fa8 <CalibrateAcc>
		}

		// Inverted calibrate button pressed
		if (BUTTON3 == 0)
    2524:	1d 99       	sbic	0x03, 5	; 3
    2526:	0c c0       	rjmp	.+24     	; 0x2540 <Display_sensors+0x58>
    2528:	2f e3       	ldi	r18, 0x3F	; 63
    252a:	82 e4       	ldi	r24, 0x42	; 66
    252c:	9f e0       	ldi	r25, 0x0F	; 15
    252e:	21 50       	subi	r18, 0x01	; 1
    2530:	80 40       	sbci	r24, 0x00	; 0
    2532:	90 40       	sbci	r25, 0x00	; 0
    2534:	e1 f7       	brne	.-8      	; 0x252e <Display_sensors+0x46>
    2536:	00 c0       	rjmp	.+0      	; 0x2538 <Display_sensors+0x50>
    2538:	00 00       	nop
		{
			// Wait until button snap dissipated
			_delay_ms(250);
			CalibrateAcc(REVERSED);
    253a:	81 e0       	ldi	r24, 0x01	; 1
    253c:	0e 94 d4 0f 	call	0x1fa8	; 0x1fa8 <CalibrateAcc>
		}

		ReadGyros();
    2540:	0e 94 3a 23 	call	0x4674	; 0x4674 <ReadGyros>
		ReadAcc();
    2544:	0e 94 70 0f 	call	0x1ee0	; 0x1ee0 <ReadAcc>

		LCD_Display_Text(26,(const unsigned char*)Verdana8,37,0); 	// Gyro
    2548:	20 e0       	ldi	r18, 0x00	; 0
    254a:	30 e0       	ldi	r19, 0x00	; 0
    254c:	45 e2       	ldi	r20, 0x25	; 37
    254e:	50 e0       	ldi	r21, 0x00	; 0
    2550:	6d e0       	ldi	r22, 0x0D	; 13
    2552:	7a e0       	ldi	r23, 0x0A	; 10
    2554:	8a e1       	ldi	r24, 0x1A	; 26
    2556:	90 e0       	ldi	r25, 0x00	; 0
    2558:	0e 94 54 22 	call	0x44a8	; 0x44a8 <LCD_Display_Text>
		LCD_Display_Text(30,(const unsigned char*)Verdana8,77,0); 	// Acc
    255c:	20 e0       	ldi	r18, 0x00	; 0
    255e:	30 e0       	ldi	r19, 0x00	; 0
    2560:	4d e4       	ldi	r20, 0x4D	; 77
    2562:	50 e0       	ldi	r21, 0x00	; 0
    2564:	6d e0       	ldi	r22, 0x0D	; 13
    2566:	7a e0       	ldi	r23, 0x0A	; 10
    2568:	8e e1       	ldi	r24, 0x1E	; 30
    256a:	90 e0       	ldi	r25, 0x00	; 0
    256c:	0e 94 54 22 	call	0x44a8	; 0x44a8 <LCD_Display_Text>
		//
		LCD_Display_Text(27,(const unsigned char*)Verdana8,5,13);	// Roll
    2570:	2d e0       	ldi	r18, 0x0D	; 13
    2572:	30 e0       	ldi	r19, 0x00	; 0
    2574:	45 e0       	ldi	r20, 0x05	; 5
    2576:	50 e0       	ldi	r21, 0x00	; 0
    2578:	6d e0       	ldi	r22, 0x0D	; 13
    257a:	7a e0       	ldi	r23, 0x0A	; 10
    257c:	8b e1       	ldi	r24, 0x1B	; 27
    257e:	90 e0       	ldi	r25, 0x00	; 0
    2580:	0e 94 54 22 	call	0x44a8	; 0x44a8 <LCD_Display_Text>
		LCD_Display_Text(28,(const unsigned char*)Verdana8,5,23);	// Pitch
    2584:	27 e1       	ldi	r18, 0x17	; 23
    2586:	30 e0       	ldi	r19, 0x00	; 0
    2588:	45 e0       	ldi	r20, 0x05	; 5
    258a:	50 e0       	ldi	r21, 0x00	; 0
    258c:	6d e0       	ldi	r22, 0x0D	; 13
    258e:	7a e0       	ldi	r23, 0x0A	; 10
    2590:	8c e1       	ldi	r24, 0x1C	; 28
    2592:	90 e0       	ldi	r25, 0x00	; 0
    2594:	0e 94 54 22 	call	0x44a8	; 0x44a8 <LCD_Display_Text>
		LCD_Display_Text(29,(const unsigned char*)Verdana8,5,33);	// Yaw/Z
    2598:	21 e2       	ldi	r18, 0x21	; 33
    259a:	30 e0       	ldi	r19, 0x00	; 0
    259c:	45 e0       	ldi	r20, 0x05	; 5
    259e:	50 e0       	ldi	r21, 0x00	; 0
    25a0:	6d e0       	ldi	r22, 0x0D	; 13
    25a2:	7a e0       	ldi	r23, 0x0A	; 10
    25a4:	8d e1       	ldi	r24, 0x1D	; 29
    25a6:	90 e0       	ldi	r25, 0x00	; 0
    25a8:	0e 94 54 22 	call	0x44a8	; 0x44a8 <LCD_Display_Text>
    25ac:	4a e0       	ldi	r20, 0x0A	; 10
    25ae:	63 e6       	ldi	r22, 0x63	; 99
    25b0:	75 e0       	ldi	r23, 0x05	; 5
    25b2:	80 91 73 05 	lds	r24, 0x0573
    25b6:	90 91 74 05 	lds	r25, 0x0574
    25ba:	0e 94 1f 49 	call	0x923e	; 0x923e <__itoa_ncheck>
		//
		mugui_lcd_puts(itoa(gyroADC[ROLL],pBuffer,10),(const unsigned char*)Verdana8,40,13);
    25be:	2d e0       	ldi	r18, 0x0D	; 13
    25c0:	30 e0       	ldi	r19, 0x00	; 0
    25c2:	48 e2       	ldi	r20, 0x28	; 40
    25c4:	50 e0       	ldi	r21, 0x00	; 0
    25c6:	6d e0       	ldi	r22, 0x0D	; 13
    25c8:	7a e0       	ldi	r23, 0x0A	; 10
    25ca:	0e 94 c3 3e 	call	0x7d86	; 0x7d86 <mugui_lcd_puts>
    25ce:	4a e0       	ldi	r20, 0x0A	; 10
    25d0:	63 e6       	ldi	r22, 0x63	; 99
    25d2:	75 e0       	ldi	r23, 0x05	; 5
    25d4:	80 91 75 05 	lds	r24, 0x0575
    25d8:	90 91 76 05 	lds	r25, 0x0576
    25dc:	0e 94 1f 49 	call	0x923e	; 0x923e <__itoa_ncheck>
		mugui_lcd_puts(itoa(gyroADC[PITCH],pBuffer,10),(const unsigned char*)Verdana8,40,23);
    25e0:	27 e1       	ldi	r18, 0x17	; 23
    25e2:	30 e0       	ldi	r19, 0x00	; 0
    25e4:	48 e2       	ldi	r20, 0x28	; 40
    25e6:	50 e0       	ldi	r21, 0x00	; 0
    25e8:	6d e0       	ldi	r22, 0x0D	; 13
    25ea:	7a e0       	ldi	r23, 0x0A	; 10
    25ec:	0e 94 c3 3e 	call	0x7d86	; 0x7d86 <mugui_lcd_puts>
    25f0:	4a e0       	ldi	r20, 0x0A	; 10
    25f2:	63 e6       	ldi	r22, 0x63	; 99
    25f4:	75 e0       	ldi	r23, 0x05	; 5
    25f6:	80 91 77 05 	lds	r24, 0x0577
    25fa:	90 91 78 05 	lds	r25, 0x0578
    25fe:	0e 94 1f 49 	call	0x923e	; 0x923e <__itoa_ncheck>
		mugui_lcd_puts(itoa(gyroADC[YAW],pBuffer,10),(const unsigned char*)Verdana8,40,33);
    2602:	21 e2       	ldi	r18, 0x21	; 33
    2604:	30 e0       	ldi	r19, 0x00	; 0
    2606:	48 e2       	ldi	r20, 0x28	; 40
    2608:	50 e0       	ldi	r21, 0x00	; 0
    260a:	6d e0       	ldi	r22, 0x0D	; 13
    260c:	7a e0       	ldi	r23, 0x0A	; 10
    260e:	0e 94 c3 3e 	call	0x7d86	; 0x7d86 <mugui_lcd_puts>
    2612:	4a e0       	ldi	r20, 0x0A	; 10
    2614:	63 e6       	ldi	r22, 0x63	; 99
    2616:	75 e0       	ldi	r23, 0x05	; 5
    2618:	80 91 44 05 	lds	r24, 0x0544
    261c:	90 91 45 05 	lds	r25, 0x0545
    2620:	0e 94 1f 49 	call	0x923e	; 0x923e <__itoa_ncheck>
		mugui_lcd_puts(itoa(accADC[ROLL],pBuffer,10),(const unsigned char*)Verdana8,80,13);
    2624:	2d e0       	ldi	r18, 0x0D	; 13
    2626:	30 e0       	ldi	r19, 0x00	; 0
    2628:	40 e5       	ldi	r20, 0x50	; 80
    262a:	50 e0       	ldi	r21, 0x00	; 0
    262c:	6d e0       	ldi	r22, 0x0D	; 13
    262e:	7a e0       	ldi	r23, 0x0A	; 10
    2630:	0e 94 c3 3e 	call	0x7d86	; 0x7d86 <mugui_lcd_puts>
    2634:	4a e0       	ldi	r20, 0x0A	; 10
    2636:	63 e6       	ldi	r22, 0x63	; 99
    2638:	75 e0       	ldi	r23, 0x05	; 5
    263a:	80 91 46 05 	lds	r24, 0x0546
    263e:	90 91 47 05 	lds	r25, 0x0547
    2642:	0e 94 1f 49 	call	0x923e	; 0x923e <__itoa_ncheck>
		mugui_lcd_puts(itoa(accADC[PITCH],pBuffer,10),(const unsigned char*)Verdana8,80,23);
    2646:	27 e1       	ldi	r18, 0x17	; 23
    2648:	30 e0       	ldi	r19, 0x00	; 0
    264a:	40 e5       	ldi	r20, 0x50	; 80
    264c:	50 e0       	ldi	r21, 0x00	; 0
    264e:	6d e0       	ldi	r22, 0x0D	; 13
    2650:	7a e0       	ldi	r23, 0x0A	; 10
    2652:	0e 94 c3 3e 	call	0x7d86	; 0x7d86 <mugui_lcd_puts>
    2656:	4a e0       	ldi	r20, 0x0A	; 10
    2658:	63 e6       	ldi	r22, 0x63	; 99
    265a:	75 e0       	ldi	r23, 0x05	; 5
    265c:	80 91 48 05 	lds	r24, 0x0548
    2660:	90 91 49 05 	lds	r25, 0x0549
    2664:	0e 94 1f 49 	call	0x923e	; 0x923e <__itoa_ncheck>
		mugui_lcd_puts(itoa(accADC[YAW],pBuffer,10),(const unsigned char*)Verdana8,80,33);
    2668:	21 e2       	ldi	r18, 0x21	; 33
    266a:	30 e0       	ldi	r19, 0x00	; 0
    266c:	40 e5       	ldi	r20, 0x50	; 80
    266e:	50 e0       	ldi	r21, 0x00	; 0
    2670:	6d e0       	ldi	r22, 0x0D	; 13
    2672:	7a e0       	ldi	r23, 0x0A	; 10
    2674:	0e 94 c3 3e 	call	0x7d86	; 0x7d86 <mugui_lcd_puts>

		// Print bottom markers
		LCD_Display_Text(12, (const unsigned char*)Wingdings, 0, 57); 	// Left
    2678:	29 e3       	ldi	r18, 0x39	; 57
    267a:	30 e0       	ldi	r19, 0x00	; 0
    267c:	40 e0       	ldi	r20, 0x00	; 0
    267e:	50 e0       	ldi	r21, 0x00	; 0
    2680:	65 ef       	ldi	r22, 0xF5	; 245
    2682:	70 e0       	ldi	r23, 0x00	; 0
    2684:	8c e0       	ldi	r24, 0x0C	; 12
    2686:	90 e0       	ldi	r25, 0x00	; 0
    2688:	0e 94 54 22 	call	0x44a8	; 0x44a8 <LCD_Display_Text>
		LCD_Display_Text(60, (const unsigned char*)Verdana8, 108, 55); 	// Calibrate
    268c:	27 e3       	ldi	r18, 0x37	; 55
    268e:	30 e0       	ldi	r19, 0x00	; 0
    2690:	4c e6       	ldi	r20, 0x6C	; 108
    2692:	50 e0       	ldi	r21, 0x00	; 0
    2694:	6d e0       	ldi	r22, 0x0D	; 13
    2696:	7a e0       	ldi	r23, 0x0A	; 10
    2698:	8c e3       	ldi	r24, 0x3C	; 60
    269a:	90 e0       	ldi	r25, 0x00	; 0
    269c:	0e 94 54 22 	call	0x44a8	; 0x44a8 <LCD_Display_Text>
		LCD_Display_Text(25, (const unsigned char*)Verdana8, 75, 55); 	// Inverted Calibrate		
    26a0:	27 e3       	ldi	r18, 0x37	; 55
    26a2:	30 e0       	ldi	r19, 0x00	; 0
    26a4:	4b e4       	ldi	r20, 0x4B	; 75
    26a6:	50 e0       	ldi	r21, 0x00	; 0
    26a8:	6d e0       	ldi	r22, 0x0D	; 13
    26aa:	7a e0       	ldi	r23, 0x0A	; 10
    26ac:	89 e1       	ldi	r24, 0x19	; 25
    26ae:	90 e0       	ldi	r25, 0x00	; 0
    26b0:	0e 94 54 22 	call	0x44a8	; 0x44a8 <LCD_Display_Text>

		// Update buffer
		write_buffer(buffer);
    26b4:	85 e0       	ldi	r24, 0x05	; 5
    26b6:	91 e0       	ldi	r25, 0x01	; 1
    26b8:	0e 94 75 20 	call	0x40ea	; 0x40ea <write_buffer>
		clear_buffer(buffer);
    26bc:	85 e0       	ldi	r24, 0x05	; 5
    26be:	91 e0       	ldi	r25, 0x01	; 1
    26c0:	0e 94 a7 20 	call	0x414e	; 0x414e <clear_buffer>
    26c4:	11 cf       	rjmp	.-478    	; 0x24e8 <Display_sensors>
	}
}
    26c6:	08 95       	ret

000026c8 <Display_status>:
//************************************************************
// Code
//************************************************************

void Display_status(void)
{
    26c8:	bf 92       	push	r11
    26ca:	cf 92       	push	r12
    26cc:	df 92       	push	r13
    26ce:	ef 92       	push	r14
    26d0:	ff 92       	push	r15
    26d2:	0f 93       	push	r16
    26d4:	1f 93       	push	r17
    26d6:	cf 93       	push	r28
    26d8:	df 93       	push	r29
    26da:	00 d0       	rcall	.+0      	; 0x26dc <Display_status+0x14>
    26dc:	00 d0       	rcall	.+0      	; 0x26de <Display_status+0x16>
    26de:	cd b7       	in	r28, 0x3d	; 61
    26e0:	de b7       	in	r29, 0x3e	; 62
	int16_t temp;
	uint16_t vbat_temp; 
	int8_t	pos1, pos2, pos3;
	mugui_size16_t size;

	clear_buffer(buffer);
    26e2:	85 e0       	ldi	r24, 0x05	; 5
    26e4:	91 e0       	ldi	r25, 0x01	; 1
    26e6:	0e 94 a7 20 	call	0x414e	; 0x414e <clear_buffer>

	// Display text
	LCD_Display_Text(264,(const unsigned char*)Verdana8,0,0); 	// Version text
    26ea:	20 e0       	ldi	r18, 0x00	; 0
    26ec:	30 e0       	ldi	r19, 0x00	; 0
    26ee:	40 e0       	ldi	r20, 0x00	; 0
    26f0:	50 e0       	ldi	r21, 0x00	; 0
    26f2:	6d e0       	ldi	r22, 0x0D	; 13
    26f4:	7a e0       	ldi	r23, 0x0A	; 10
    26f6:	88 e0       	ldi	r24, 0x08	; 8
    26f8:	91 e0       	ldi	r25, 0x01	; 1
    26fa:	0e 94 54 22 	call	0x44a8	; 0x44a8 <LCD_Display_Text>
	LCD_Display_Text(266,(const unsigned char*)Verdana8,0,12); 	// RX sync
    26fe:	2c e0       	ldi	r18, 0x0C	; 12
    2700:	30 e0       	ldi	r19, 0x00	; 0
    2702:	40 e0       	ldi	r20, 0x00	; 0
    2704:	50 e0       	ldi	r21, 0x00	; 0
    2706:	6d e0       	ldi	r22, 0x0D	; 13
    2708:	7a e0       	ldi	r23, 0x0A	; 10
    270a:	8a e0       	ldi	r24, 0x0A	; 10
    270c:	91 e0       	ldi	r25, 0x01	; 1
    270e:	0e 94 54 22 	call	0x44a8	; 0x44a8 <LCD_Display_Text>
	LCD_Display_Text(267,(const unsigned char*)Verdana8,0,24); 	// Profile
    2712:	28 e1       	ldi	r18, 0x18	; 24
    2714:	30 e0       	ldi	r19, 0x00	; 0
    2716:	40 e0       	ldi	r20, 0x00	; 0
    2718:	50 e0       	ldi	r21, 0x00	; 0
    271a:	6d e0       	ldi	r22, 0x0D	; 13
    271c:	7a e0       	ldi	r23, 0x0A	; 10
    271e:	8b e0       	ldi	r24, 0x0B	; 11
    2720:	91 e0       	ldi	r25, 0x01	; 1
    2722:	0e 94 54 22 	call	0x44a8	; 0x44a8 <LCD_Display_Text>
	LCD_Display_Text(23,(const unsigned char*)Verdana8,88,24); 	// Pos
    2726:	28 e1       	ldi	r18, 0x18	; 24
    2728:	30 e0       	ldi	r19, 0x00	; 0
    272a:	48 e5       	ldi	r20, 0x58	; 88
    272c:	50 e0       	ldi	r21, 0x00	; 0
    272e:	6d e0       	ldi	r22, 0x0D	; 13
    2730:	7a e0       	ldi	r23, 0x0A	; 10
    2732:	87 e1       	ldi	r24, 0x17	; 23
    2734:	90 e0       	ldi	r25, 0x00	; 0
    2736:	0e 94 54 22 	call	0x44a8	; 0x44a8 <LCD_Display_Text>
	
	// Display menu and markers
	LCD_Display_Text(9, (const unsigned char*)Wingdings, 0, 59);// Down
    273a:	2b e3       	ldi	r18, 0x3B	; 59
    273c:	30 e0       	ldi	r19, 0x00	; 0
    273e:	40 e0       	ldi	r20, 0x00	; 0
    2740:	50 e0       	ldi	r21, 0x00	; 0
    2742:	65 ef       	ldi	r22, 0xF5	; 245
    2744:	70 e0       	ldi	r23, 0x00	; 0
    2746:	89 e0       	ldi	r24, 0x09	; 9
    2748:	90 e0       	ldi	r25, 0x00	; 0
    274a:	0e 94 54 22 	call	0x44a8	; 0x44a8 <LCD_Display_Text>
	LCD_Display_Text(14,(const unsigned char*)Verdana8,10,55);	// Menu
    274e:	27 e3       	ldi	r18, 0x37	; 55
    2750:	30 e0       	ldi	r19, 0x00	; 0
    2752:	4a e0       	ldi	r20, 0x0A	; 10
    2754:	50 e0       	ldi	r21, 0x00	; 0
    2756:	6d e0       	ldi	r22, 0x0D	; 13
    2758:	7a e0       	ldi	r23, 0x0A	; 10
    275a:	8e e0       	ldi	r24, 0x0E	; 14
    275c:	90 e0       	ldi	r25, 0x00	; 0
    275e:	0e 94 54 22 	call	0x44a8	; 0x44a8 <LCD_Display_Text>

	// Display values
	print_menu_text(0, 1, (62 + Config.RxMode), 45, 12); // Rx mode
    2762:	40 91 da 05 	lds	r20, 0x05DA
    2766:	55 27       	eor	r21, r21
    2768:	47 fd       	sbrc	r20, 7
    276a:	50 95       	com	r21
    276c:	42 5c       	subi	r20, 0xC2	; 194
    276e:	5f 4f       	sbci	r21, 0xFF	; 255
    2770:	0c e0       	ldi	r16, 0x0C	; 12
    2772:	2d e2       	ldi	r18, 0x2D	; 45
    2774:	61 e0       	ldi	r22, 0x01	; 1
    2776:	80 e0       	ldi	r24, 0x00	; 0
    2778:	90 e0       	ldi	r25, 0x00	; 0
    277a:	0e 94 0c 2f 	call	0x5e18	; 0x5e18 <print_menu_text>
    277e:	4a e0       	ldi	r20, 0x0A	; 10
    2780:	63 e6       	ldi	r22, 0x63	; 99
    2782:	75 e0       	ldi	r23, 0x05	; 5
    2784:	80 91 23 05 	lds	r24, 0x0523
    2788:	90 91 24 05 	lds	r25, 0x0524
    278c:	0e 94 1f 49 	call	0x923e	; 0x923e <__itoa_ncheck>
	mugui_lcd_puts(itoa(transition,pBuffer,10),(const unsigned char*)Verdana8,110,24); // Raw transition value
    2790:	28 e1       	ldi	r18, 0x18	; 24
    2792:	30 e0       	ldi	r19, 0x00	; 0
    2794:	4e e6       	ldi	r20, 0x6E	; 110
    2796:	50 e0       	ldi	r21, 0x00	; 0
    2798:	6d e0       	ldi	r22, 0x0D	; 13
    279a:	7a e0       	ldi	r23, 0x0A	; 10
    279c:	0e 94 c3 3e 	call	0x7d86	; 0x7d86 <mugui_lcd_puts>

	if (Config.RxMode == PWM)
    27a0:	80 91 da 05 	lds	r24, 0x05DA
    27a4:	81 30       	cpi	r24, 0x01	; 1
    27a6:	d9 f4       	brne	.+54     	; 0x27de <Display_status+0x116>
	{
		LCD_Display_Text(24,(const unsigned char*)Verdana8,77,12); // Interrupt counter text 
    27a8:	2c e0       	ldi	r18, 0x0C	; 12
    27aa:	30 e0       	ldi	r19, 0x00	; 0
    27ac:	4d e4       	ldi	r20, 0x4D	; 77
    27ae:	50 e0       	ldi	r21, 0x00	; 0
    27b0:	6d e0       	ldi	r22, 0x0D	; 13
    27b2:	7a e0       	ldi	r23, 0x0A	; 10
    27b4:	88 e1       	ldi	r24, 0x18	; 24
    27b6:	90 e0       	ldi	r25, 0x00	; 0
    27b8:	0e 94 54 22 	call	0x44a8	; 0x44a8 <LCD_Display_Text>
		mugui_lcd_puts(itoa(InterruptCount,pBuffer,10),(const unsigned char*)Verdana8,110,12); // Interrupt counter
    27bc:	80 91 1e 05 	lds	r24, 0x051E
    27c0:	90 91 1f 05 	lds	r25, 0x051F
    27c4:	4a e0       	ldi	r20, 0x0A	; 10
    27c6:	63 e6       	ldi	r22, 0x63	; 99
    27c8:	75 e0       	ldi	r23, 0x05	; 5
    27ca:	0e 94 1f 49 	call	0x923e	; 0x923e <__itoa_ncheck>
    27ce:	2c e0       	ldi	r18, 0x0C	; 12
    27d0:	30 e0       	ldi	r19, 0x00	; 0
    27d2:	4e e6       	ldi	r20, 0x6E	; 110
    27d4:	50 e0       	ldi	r21, 0x00	; 0
    27d6:	6d e0       	ldi	r22, 0x0D	; 13
    27d8:	7a e0       	ldi	r23, 0x0A	; 10
    27da:	0e 94 c3 3e 	call	0x7d86	; 0x7d86 <mugui_lcd_puts>
	}

	// Display transition point
	if (transition <= 0)
    27de:	80 91 23 05 	lds	r24, 0x0523
    27e2:	90 91 24 05 	lds	r25, 0x0524
    27e6:	18 16       	cp	r1, r24
    27e8:	19 06       	cpc	r1, r25
    27ea:	4c f0       	brlt	.+18     	; 0x27fe <Display_status+0x136>
	{
		LCD_Display_Text(48,(const unsigned char*)Verdana8,45,24);
    27ec:	28 e1       	ldi	r18, 0x18	; 24
    27ee:	30 e0       	ldi	r19, 0x00	; 0
    27f0:	4d e2       	ldi	r20, 0x2D	; 45
    27f2:	50 e0       	ldi	r21, 0x00	; 0
    27f4:	6d e0       	ldi	r22, 0x0D	; 13
    27f6:	7a e0       	ldi	r23, 0x0A	; 10
    27f8:	80 e3       	ldi	r24, 0x30	; 48
    27fa:	90 e0       	ldi	r25, 0x00	; 0
    27fc:	31 c0       	rjmp	.+98     	; 0x2860 <Display_status+0x198>
	}
	else if (transition >= 100)
    27fe:	84 36       	cpi	r24, 0x64	; 100
    2800:	91 05       	cpc	r25, r1
    2802:	4c f0       	brlt	.+18     	; 0x2816 <Display_status+0x14e>
	{
		LCD_Display_Text(50,(const unsigned char*)Verdana8,45,24);
    2804:	28 e1       	ldi	r18, 0x18	; 24
    2806:	30 e0       	ldi	r19, 0x00	; 0
    2808:	4d e2       	ldi	r20, 0x2D	; 45
    280a:	50 e0       	ldi	r21, 0x00	; 0
    280c:	6d e0       	ldi	r22, 0x0D	; 13
    280e:	7a e0       	ldi	r23, 0x0A	; 10
    2810:	82 e3       	ldi	r24, 0x32	; 50
    2812:	90 e0       	ldi	r25, 0x00	; 0
    2814:	25 c0       	rjmp	.+74     	; 0x2860 <Display_status+0x198>
	}
	else if (transition == Config.Transition_P1n)
    2816:	20 91 e0 05 	lds	r18, 0x05E0
    281a:	33 27       	eor	r19, r19
    281c:	27 fd       	sbrc	r18, 7
    281e:	30 95       	com	r19
    2820:	82 17       	cp	r24, r18
    2822:	93 07       	cpc	r25, r19
    2824:	49 f4       	brne	.+18     	; 0x2838 <Display_status+0x170>
	{
		LCD_Display_Text(49,(const unsigned char*)Verdana8,45,24);
    2826:	28 e1       	ldi	r18, 0x18	; 24
    2828:	30 e0       	ldi	r19, 0x00	; 0
    282a:	4d e2       	ldi	r20, 0x2D	; 45
    282c:	50 e0       	ldi	r21, 0x00	; 0
    282e:	6d e0       	ldi	r22, 0x0D	; 13
    2830:	7a e0       	ldi	r23, 0x0A	; 10
    2832:	81 e3       	ldi	r24, 0x31	; 49
    2834:	90 e0       	ldi	r25, 0x00	; 0
    2836:	14 c0       	rjmp	.+40     	; 0x2860 <Display_status+0x198>
	}
	else if (transition < Config.Transition_P1n)
    2838:	82 17       	cp	r24, r18
    283a:	93 07       	cpc	r25, r19
    283c:	4c f4       	brge	.+18     	; 0x2850 <Display_status+0x188>
	{
		LCD_Display_Text(51,(const unsigned char*)Verdana8,45,24);
    283e:	28 e1       	ldi	r18, 0x18	; 24
    2840:	30 e0       	ldi	r19, 0x00	; 0
    2842:	4d e2       	ldi	r20, 0x2D	; 45
    2844:	50 e0       	ldi	r21, 0x00	; 0
    2846:	6d e0       	ldi	r22, 0x0D	; 13
    2848:	7a e0       	ldi	r23, 0x0A	; 10
    284a:	83 e3       	ldi	r24, 0x33	; 51
    284c:	90 e0       	ldi	r25, 0x00	; 0
    284e:	08 c0       	rjmp	.+16     	; 0x2860 <Display_status+0x198>
	}
	else
	{
		LCD_Display_Text(52,(const unsigned char*)Verdana8,45,24);
    2850:	28 e1       	ldi	r18, 0x18	; 24
    2852:	30 e0       	ldi	r19, 0x00	; 0
    2854:	4d e2       	ldi	r20, 0x2D	; 45
    2856:	50 e0       	ldi	r21, 0x00	; 0
    2858:	6d e0       	ldi	r22, 0x0D	; 13
    285a:	7a e0       	ldi	r23, 0x0A	; 10
    285c:	84 e3       	ldi	r24, 0x34	; 52
    285e:	90 e0       	ldi	r25, 0x00	; 0
    2860:	0e 94 54 22 	call	0x44a8	; 0x44a8 <LCD_Display_Text>
	}


	// Don't display battery text if there are error messages
	if (General_error == 0)
    2864:	80 91 22 05 	lds	r24, 0x0522
    2868:	81 11       	cpse	r24, r1
    286a:	85 c0       	rjmp	.+266    	; 0x2976 <Display_status+0x2ae>
	{
		// Display voltage
		uint8_t x_loc = 45;		// X location of voltage display
		uint8_t y_loc = 36;		// Y location of voltage display

		LCD_Display_Text(133,(const unsigned char*)Verdana8,0,36); 	// Battery
    286c:	24 e2       	ldi	r18, 0x24	; 36
    286e:	30 e0       	ldi	r19, 0x00	; 0
    2870:	40 e0       	ldi	r20, 0x00	; 0
    2872:	50 e0       	ldi	r21, 0x00	; 0
    2874:	6d e0       	ldi	r22, 0x0D	; 13
    2876:	7a e0       	ldi	r23, 0x0A	; 10
    2878:	85 e8       	ldi	r24, 0x85	; 133
    287a:	90 e0       	ldi	r25, 0x00	; 0
    287c:	0e 94 54 22 	call	0x44a8	; 0x44a8 <LCD_Display_Text>

		vbat_temp = GetVbat();
    2880:	0e 94 2a 46 	call	0x8c54	; 0x8c54 <GetVbat>
    2884:	6c 01       	movw	r12, r24
		temp = vbat_temp/100;	// Display whole decimal part first
    2886:	64 e6       	ldi	r22, 0x64	; 100
    2888:	70 e0       	ldi	r23, 0x00	; 0
    288a:	0e 94 64 48 	call	0x90c8	; 0x90c8 <__udivmodhi4>
    288e:	8b 01       	movw	r16, r22
    2890:	4a e0       	ldi	r20, 0x0A	; 10
    2892:	63 e6       	ldi	r22, 0x63	; 99
    2894:	75 e0       	ldi	r23, 0x05	; 5
    2896:	c8 01       	movw	r24, r16
    2898:	0e 94 1f 49 	call	0x923e	; 0x923e <__itoa_ncheck>
		mugui_text_sizestring(itoa(temp,pBuffer,10), (const unsigned char*)Verdana8, &size);
    289c:	ae 01       	movw	r20, r28
    289e:	4f 5f       	subi	r20, 0xFF	; 255
    28a0:	5f 4f       	sbci	r21, 0xFF	; 255
    28a2:	6d e0       	ldi	r22, 0x0D	; 13
    28a4:	7a e0       	ldi	r23, 0x0A	; 10
    28a6:	0e 94 74 3d 	call	0x7ae8	; 0x7ae8 <mugui_text_sizestring>
    28aa:	4a e0       	ldi	r20, 0x0A	; 10
    28ac:	63 e6       	ldi	r22, 0x63	; 99
    28ae:	75 e0       	ldi	r23, 0x05	; 5
    28b0:	c8 01       	movw	r24, r16
    28b2:	0e 94 1f 49 	call	0x923e	; 0x923e <__itoa_ncheck>
		mugui_lcd_puts(itoa(temp,pBuffer,10),(const unsigned char*)Verdana8,x_loc,y_loc);
    28b6:	24 e2       	ldi	r18, 0x24	; 36
    28b8:	30 e0       	ldi	r19, 0x00	; 0
    28ba:	4d e2       	ldi	r20, 0x2D	; 45
    28bc:	50 e0       	ldi	r21, 0x00	; 0
    28be:	6d e0       	ldi	r22, 0x0D	; 13
    28c0:	7a e0       	ldi	r23, 0x0A	; 10
    28c2:	0e 94 c3 3e 	call	0x7d86	; 0x7d86 <mugui_lcd_puts>
		pos1 = size.x;

		vbat_temp = vbat_temp - (temp * 100); // Now display the parts to the right of the decimal point
    28c6:	2c e9       	ldi	r18, 0x9C	; 156
    28c8:	20 03       	mulsu	r18, r16
    28ca:	70 01       	movw	r14, r0
    28cc:	21 9f       	mul	r18, r17
    28ce:	f0 0c       	add	r15, r0
    28d0:	11 24       	eor	r1, r1
    28d2:	ec 0c       	add	r14, r12
    28d4:	fd 1c       	adc	r15, r13

		LCD_Display_Text(268,(const unsigned char*)Verdana8,(x_loc + pos1),y_loc);
    28d6:	09 81       	ldd	r16, Y+1	; 0x01
    28d8:	11 27       	eor	r17, r17
    28da:	07 fd       	sbrc	r16, 7
    28dc:	10 95       	com	r17
    28de:	03 5d       	subi	r16, 0xD3	; 211
    28e0:	1f 4f       	sbci	r17, 0xFF	; 255
    28e2:	24 e2       	ldi	r18, 0x24	; 36
    28e4:	30 e0       	ldi	r19, 0x00	; 0
    28e6:	a8 01       	movw	r20, r16
    28e8:	6d e0       	ldi	r22, 0x0D	; 13
    28ea:	7a e0       	ldi	r23, 0x0A	; 10
    28ec:	8c e0       	ldi	r24, 0x0C	; 12
    28ee:	91 e0       	ldi	r25, 0x01	; 1
    28f0:	0e 94 54 22 	call	0x44a8	; 0x44a8 <LCD_Display_Text>
		mugui_text_sizestring(".", (const unsigned char*)Verdana8, &size);
    28f4:	ae 01       	movw	r20, r28
    28f6:	4f 5f       	subi	r20, 0xFF	; 255
    28f8:	5f 4f       	sbci	r21, 0xFF	; 255
    28fa:	6d e0       	ldi	r22, 0x0D	; 13
    28fc:	7a e0       	ldi	r23, 0x0A	; 10
    28fe:	8d e0       	ldi	r24, 0x0D	; 13
    2900:	95 e0       	ldi	r25, 0x05	; 5
    2902:	0e 94 74 3d 	call	0x7ae8	; 0x7ae8 <mugui_text_sizestring>
		pos3 = size.x;
    2906:	c9 80       	ldd	r12, Y+1	; 0x01
		mugui_text_sizestring("0", (const unsigned char*)Verdana8, &size);
    2908:	ae 01       	movw	r20, r28
    290a:	4f 5f       	subi	r20, 0xFF	; 255
    290c:	5f 4f       	sbci	r21, 0xFF	; 255
    290e:	6d e0       	ldi	r22, 0x0D	; 13
    2910:	7a e0       	ldi	r23, 0x0A	; 10
    2912:	8f e0       	ldi	r24, 0x0F	; 15
    2914:	95 e0       	ldi	r25, 0x05	; 5
    2916:	0e 94 74 3d 	call	0x7ae8	; 0x7ae8 <mugui_text_sizestring>
		pos2 = size.x;
    291a:	b9 80       	ldd	r11, Y+1	; 0x01
    291c:	dd 24       	eor	r13, r13
    291e:	c7 fc       	sbrc	r12, 7
    2920:	d0 94       	com	r13

		if (vbat_temp >= 10)
    2922:	8a e0       	ldi	r24, 0x0A	; 10
    2924:	e8 16       	cp	r14, r24
    2926:	f1 04       	cpc	r15, r1
    2928:	40 f0       	brcs	.+16     	; 0x293a <Display_status+0x272>
    292a:	4a e0       	ldi	r20, 0x0A	; 10
    292c:	63 e6       	ldi	r22, 0x63	; 99
    292e:	75 e0       	ldi	r23, 0x05	; 5
    2930:	c7 01       	movw	r24, r14
    2932:	0e 94 1f 49 	call	0x923e	; 0x923e <__itoa_ncheck>
		{
			mugui_lcd_puts(itoa(vbat_temp,pBuffer,10),(const unsigned char*)Verdana8,(x_loc + pos1 + pos3),y_loc);
    2936:	a8 01       	movw	r20, r16
    2938:	16 c0       	rjmp	.+44     	; 0x2966 <Display_status+0x29e>
		}
		else
		{
			LCD_Display_Text(269,(const unsigned char*)Verdana8,(x_loc + pos1 + pos3),y_loc);
    293a:	a8 01       	movw	r20, r16
    293c:	4c 0d       	add	r20, r12
    293e:	5d 1d       	adc	r21, r13
    2940:	24 e2       	ldi	r18, 0x24	; 36
    2942:	30 e0       	ldi	r19, 0x00	; 0
    2944:	6d e0       	ldi	r22, 0x0D	; 13
    2946:	7a e0       	ldi	r23, 0x0A	; 10
    2948:	8d e0       	ldi	r24, 0x0D	; 13
    294a:	91 e0       	ldi	r25, 0x01	; 1
    294c:	0e 94 54 22 	call	0x44a8	; 0x44a8 <LCD_Display_Text>
    2950:	4a e0       	ldi	r20, 0x0A	; 10
    2952:	63 e6       	ldi	r22, 0x63	; 99
    2954:	75 e0       	ldi	r23, 0x05	; 5
    2956:	c7 01       	movw	r24, r14
    2958:	0e 94 1f 49 	call	0x923e	; 0x923e <__itoa_ncheck>
			mugui_lcd_puts(itoa(vbat_temp,pBuffer,10),(const unsigned char*)Verdana8,(x_loc + pos1 + pos2 + pos3),y_loc);
    295c:	a8 01       	movw	r20, r16
    295e:	4b 0d       	add	r20, r11
    2960:	51 1d       	adc	r21, r1
    2962:	b7 fc       	sbrc	r11, 7
    2964:	5a 95       	dec	r21
    2966:	4c 0d       	add	r20, r12
    2968:	5d 1d       	adc	r21, r13
    296a:	24 e2       	ldi	r18, 0x24	; 36
    296c:	30 e0       	ldi	r19, 0x00	; 0
    296e:	6d e0       	ldi	r22, 0x0D	; 13
    2970:	7a e0       	ldi	r23, 0x0A	; 10
    2972:	0e 94 c3 3e 	call	0x7d86	; 0x7d86 <mugui_lcd_puts>
		}
	}
	
	// Display error messages
	if (General_error != 0)
    2976:	80 91 22 05 	lds	r24, 0x0522
    297a:	88 23       	and	r24, r24
    297c:	09 f4       	brne	.+2      	; 0x2980 <Display_status+0x2b8>
    297e:	53 c0       	rjmp	.+166    	; 0x2a26 <Display_status+0x35e>
	{
		// Prioritise error from top to bottom
		if((General_error & (1 << LVA_ALARM)) != 0)
    2980:	80 91 22 05 	lds	r24, 0x0522
    2984:	83 ff       	sbrs	r24, 3
    2986:	13 c0       	rjmp	.+38     	; 0x29ae <Display_status+0x2e6>
		{
			LCD_Display_Text(134,(const unsigned char*)Verdana14,15,37);	// Battery
    2988:	25 e2       	ldi	r18, 0x25	; 37
    298a:	30 e0       	ldi	r19, 0x00	; 0
    298c:	4f e0       	ldi	r20, 0x0F	; 15
    298e:	50 e0       	ldi	r21, 0x00	; 0
    2990:	6f e5       	ldi	r22, 0x5F	; 95
    2992:	71 e0       	ldi	r23, 0x01	; 1
    2994:	86 e8       	ldi	r24, 0x86	; 134
    2996:	90 e0       	ldi	r25, 0x00	; 0
    2998:	0e 94 54 22 	call	0x44a8	; 0x44a8 <LCD_Display_Text>
			LCD_Display_Text(271,(const unsigned char*)Verdana14,79,37);	// low
    299c:	25 e2       	ldi	r18, 0x25	; 37
    299e:	30 e0       	ldi	r19, 0x00	; 0
    29a0:	4f e4       	ldi	r20, 0x4F	; 79
    29a2:	50 e0       	ldi	r21, 0x00	; 0
    29a4:	6f e5       	ldi	r22, 0x5F	; 95
    29a6:	71 e0       	ldi	r23, 0x01	; 1
    29a8:	8f e0       	ldi	r24, 0x0F	; 15
    29aa:	91 e0       	ldi	r25, 0x01	; 1
    29ac:	3a c0       	rjmp	.+116    	; 0x2a22 <Display_status+0x35a>
		}
		else if((General_error & (1 << NO_SIGNAL)) != 0)
    29ae:	80 91 22 05 	lds	r24, 0x0522
    29b2:	81 ff       	sbrs	r24, 1
    29b4:	13 c0       	rjmp	.+38     	; 0x29dc <Display_status+0x314>
		{
			LCD_Display_Text(75,(const unsigned char*)Verdana14,30,37); 	// No
    29b6:	25 e2       	ldi	r18, 0x25	; 37
    29b8:	30 e0       	ldi	r19, 0x00	; 0
    29ba:	4e e1       	ldi	r20, 0x1E	; 30
    29bc:	50 e0       	ldi	r21, 0x00	; 0
    29be:	6f e5       	ldi	r22, 0x5F	; 95
    29c0:	71 e0       	ldi	r23, 0x01	; 1
    29c2:	8b e4       	ldi	r24, 0x4B	; 75
    29c4:	90 e0       	ldi	r25, 0x00	; 0
    29c6:	0e 94 54 22 	call	0x44a8	; 0x44a8 <LCD_Display_Text>
			LCD_Display_Text(272,(const unsigned char*)Verdana14,55,37);	// signal
    29ca:	25 e2       	ldi	r18, 0x25	; 37
    29cc:	30 e0       	ldi	r19, 0x00	; 0
    29ce:	47 e3       	ldi	r20, 0x37	; 55
    29d0:	50 e0       	ldi	r21, 0x00	; 0
    29d2:	6f e5       	ldi	r22, 0x5F	; 95
    29d4:	71 e0       	ldi	r23, 0x01	; 1
    29d6:	80 e1       	ldi	r24, 0x10	; 16
    29d8:	91 e0       	ldi	r25, 0x01	; 1
    29da:	23 c0       	rjmp	.+70     	; 0x2a22 <Display_status+0x35a>
		}
		else if((General_error & (1 << THROTTLE_HIGH)) != 0)
    29dc:	80 91 22 05 	lds	r24, 0x0522
    29e0:	80 ff       	sbrs	r24, 0
    29e2:	13 c0       	rjmp	.+38     	; 0x2a0a <Display_status+0x342>
		{
			LCD_Display_Text(105,(const unsigned char*)Verdana14,11,37);	// Throttle
    29e4:	25 e2       	ldi	r18, 0x25	; 37
    29e6:	30 e0       	ldi	r19, 0x00	; 0
    29e8:	4b e0       	ldi	r20, 0x0B	; 11
    29ea:	50 e0       	ldi	r21, 0x00	; 0
    29ec:	6f e5       	ldi	r22, 0x5F	; 95
    29ee:	71 e0       	ldi	r23, 0x01	; 1
    29f0:	89 e6       	ldi	r24, 0x69	; 105
    29f2:	90 e0       	ldi	r25, 0x00	; 0
    29f4:	0e 94 54 22 	call	0x44a8	; 0x44a8 <LCD_Display_Text>
			LCD_Display_Text(270,(const unsigned char*)Verdana14,82,37);	// high
    29f8:	25 e2       	ldi	r18, 0x25	; 37
    29fa:	30 e0       	ldi	r19, 0x00	; 0
    29fc:	42 e5       	ldi	r20, 0x52	; 82
    29fe:	50 e0       	ldi	r21, 0x00	; 0
    2a00:	6f e5       	ldi	r22, 0x5F	; 95
    2a02:	71 e0       	ldi	r23, 0x01	; 1
    2a04:	8e e0       	ldi	r24, 0x0E	; 14
    2a06:	91 e0       	ldi	r25, 0x01	; 1
    2a08:	0c c0       	rjmp	.+24     	; 0x2a22 <Display_status+0x35a>
		}
		else if((General_error & (1 << DISARMED)) != 0)
    2a0a:	80 91 22 05 	lds	r24, 0x0522
    2a0e:	82 ff       	sbrs	r24, 2
    2a10:	0a c0       	rjmp	.+20     	; 0x2a26 <Display_status+0x35e>
		{
			LCD_Display_Text(18,(const unsigned char*)Verdana14,25,37); 	// Disarmed
    2a12:	25 e2       	ldi	r18, 0x25	; 37
    2a14:	30 e0       	ldi	r19, 0x00	; 0
    2a16:	49 e1       	ldi	r20, 0x19	; 25
    2a18:	50 e0       	ldi	r21, 0x00	; 0
    2a1a:	6f e5       	ldi	r22, 0x5F	; 95
    2a1c:	71 e0       	ldi	r23, 0x01	; 1
    2a1e:	82 e1       	ldi	r24, 0x12	; 18
    2a20:	90 e0       	ldi	r25, 0x00	; 0
    2a22:	0e 94 54 22 	call	0x44a8	; 0x44a8 <LCD_Display_Text>
		}
	}

	// Write buffer to complete
	write_buffer(buffer);
    2a26:	85 e0       	ldi	r24, 0x05	; 5
    2a28:	91 e0       	ldi	r25, 0x01	; 1
    2a2a:	0e 94 75 20 	call	0x40ea	; 0x40ea <write_buffer>
	clear_buffer(buffer);
    2a2e:	85 e0       	ldi	r24, 0x05	; 5
    2a30:	91 e0       	ldi	r25, 0x01	; 1
    2a32:	0e 94 a7 20 	call	0x414e	; 0x414e <clear_buffer>
}
    2a36:	0f 90       	pop	r0
    2a38:	0f 90       	pop	r0
    2a3a:	0f 90       	pop	r0
    2a3c:	0f 90       	pop	r0
    2a3e:	df 91       	pop	r29
    2a40:	cf 91       	pop	r28
    2a42:	1f 91       	pop	r17
    2a44:	0f 91       	pop	r16
    2a46:	ff 90       	pop	r15
    2a48:	ef 90       	pop	r14
    2a4a:	df 90       	pop	r13
    2a4c:	cf 90       	pop	r12
    2a4e:	bf 90       	pop	r11
    2a50:	08 95       	ret

00002a52 <Display_sticks>:
//************************************************************
// Code
//************************************************************

void Display_sticks(void)
{
    2a52:	af 92       	push	r10
    2a54:	bf 92       	push	r11
    2a56:	cf 92       	push	r12
    2a58:	df 92       	push	r13
    2a5a:	ef 92       	push	r14
    2a5c:	ff 92       	push	r15
    2a5e:	0f 93       	push	r16
    2a60:	1f 93       	push	r17
    2a62:	cf 93       	push	r28
    2a64:	df 93       	push	r29
	int8_t	temp_aileron, temp_elevator, temp_rudder;
	bool	CalibrateDone = false;
	bool	CalibrateStarted = false;

	// Save original settings in case user aborts
	temp_aileron = Config.AileronPol;
    2a66:	d0 90 e1 05 	lds	r13, 0x05E1
	temp_elevator = Config.ElevatorPol;
    2a6a:	f0 90 e2 05 	lds	r15, 0x05E2
	temp_rudder = Config.RudderPol;
    2a6e:	a0 90 42 06 	lds	r10, 0x0642

	// Reset to defaults - not ideal, but it works
	Config.AileronPol = NORMAL;
    2a72:	10 92 e1 05 	sts	0x05E1, r1
	Config.ElevatorPol =  NORMAL;
    2a76:	10 92 e2 05 	sts	0x05E2, r1
	Config.RudderPol = NORMAL;
    2a7a:	10 92 42 06 	sts	0x0642, r1
{
	int8_t	i;
	int8_t	offset;
	int8_t	temp_aileron, temp_elevator, temp_rudder;
	bool	CalibrateDone = false;
	bool	CalibrateStarted = false;
    2a7e:	d0 e0       	ldi	r29, 0x00	; 0
void Display_sticks(void)
{
	int8_t	i;
	int8_t	offset;
	int8_t	temp_aileron, temp_elevator, temp_rudder;
	bool	CalibrateDone = false;
    2a80:	c0 e0       	ldi	r28, 0x00	; 0
	Config.AileronPol = NORMAL;
	Config.ElevatorPol =  NORMAL;
	Config.RudderPol = NORMAL;

	// Until exit button pressed or complete
	while((BUTTON1 != 0) && (!CalibrateDone))
    2a82:	1f 9b       	sbis	0x03, 7	; 3
    2a84:	b6 c0       	rjmp	.+364    	; 0x2bf2 <Display_sticks+0x1a0>
    2a86:	c1 11       	cpse	r28, r1
    2a88:	b6 c0       	rjmp	.+364    	; 0x2bf6 <Display_sticks+0x1a4>
	{
		// Draw first stick on the left
		offset = 0;

		// Clear screen buffer
		clear_buffer(buffer);
    2a8a:	85 e0       	ldi	r24, 0x05	; 5
    2a8c:	91 e0       	ldi	r25, 0x01	; 1
    2a8e:	0e 94 a7 20 	call	0x414e	; 0x414e <clear_buffer>
    2a92:	92 e0       	ldi	r25, 0x02	; 2
    2a94:	c9 2e       	mov	r12, r25

	// Until exit button pressed or complete
	while((BUTTON1 != 0) && (!CalibrateDone))
	{
		// Draw first stick on the left
		offset = 0;
    2a96:	10 e0       	ldi	r17, 0x00	; 0
		clear_buffer(buffer);

		// Draw graphic
		for (i = 0; i < 2; i++)
		{
			drawrect(buffer, 17 + offset, 0, 40, 40, 1);			// Box
    2a98:	61 e1       	ldi	r22, 0x11	; 17
    2a9a:	61 0f       	add	r22, r17
    2a9c:	ee 24       	eor	r14, r14
    2a9e:	e3 94       	inc	r14
    2aa0:	08 e2       	ldi	r16, 0x28	; 40
    2aa2:	28 e2       	ldi	r18, 0x28	; 40
    2aa4:	40 e0       	ldi	r20, 0x00	; 0
    2aa6:	85 e0       	ldi	r24, 0x05	; 5
    2aa8:	91 e0       	ldi	r25, 0x01	; 1
    2aaa:	0e 94 71 21 	call	0x42e2	; 0x42e2 <drawrect>
			drawline(buffer, 38 + offset,20, 48 + offset,  3, 1); 	// Line 1
    2aae:	86 e2       	ldi	r24, 0x26	; 38
    2ab0:	b8 2e       	mov	r11, r24
    2ab2:	b1 0e       	add	r11, r17
    2ab4:	20 e3       	ldi	r18, 0x30	; 48
    2ab6:	21 0f       	add	r18, r17
    2ab8:	03 e0       	ldi	r16, 0x03	; 3
    2aba:	44 e1       	ldi	r20, 0x14	; 20
    2abc:	6b 2d       	mov	r22, r11
    2abe:	85 e0       	ldi	r24, 0x05	; 5
    2ac0:	91 e0       	ldi	r25, 0x01	; 1
    2ac2:	0e 94 07 21 	call	0x420e	; 0x420e <drawline>
			drawline(buffer, 41 + offset,21, 56 + offset,  6, 1); 	// Line 2
    2ac6:	28 e3       	ldi	r18, 0x38	; 56
    2ac8:	21 0f       	add	r18, r17
    2aca:	69 e2       	ldi	r22, 0x29	; 41
    2acc:	61 0f       	add	r22, r17
    2ace:	06 e0       	ldi	r16, 0x06	; 6
    2ad0:	45 e1       	ldi	r20, 0x15	; 21
    2ad2:	85 e0       	ldi	r24, 0x05	; 5
    2ad4:	91 e0       	ldi	r25, 0x01	; 1
    2ad6:	0e 94 07 21 	call	0x420e	; 0x420e <drawline>
			fillcircle(buffer, 38 + offset, 21, 2, 1);				// Center
    2ada:	01 e0       	ldi	r16, 0x01	; 1
    2adc:	22 e0       	ldi	r18, 0x02	; 2
    2ade:	45 e1       	ldi	r20, 0x15	; 21
    2ae0:	6b 2d       	mov	r22, r11
    2ae2:	85 e0       	ldi	r24, 0x05	; 5
    2ae4:	91 e0       	ldi	r25, 0x01	; 1
    2ae6:	0e 94 c3 21 	call	0x4386	; 0x4386 <fillcircle>
			fillcircle(buffer, 51 + offset, 5, 4, 1);				// End
    2aea:	63 e3       	ldi	r22, 0x33	; 51
    2aec:	61 0f       	add	r22, r17
    2aee:	24 e0       	ldi	r18, 0x04	; 4
    2af0:	45 e0       	ldi	r20, 0x05	; 5
    2af2:	85 e0       	ldi	r24, 0x05	; 5
    2af4:	91 e0       	ldi	r25, 0x01	; 1
    2af6:	0e 94 c3 21 	call	0x4386	; 0x4386 <fillcircle>
    2afa:	ca 94       	dec	r12

		// Clear screen buffer
		clear_buffer(buffer);

		// Draw graphic
		for (i = 0; i < 2; i++)
    2afc:	11 f0       	breq	.+4      	; 0x2b02 <Display_sticks+0xb0>
			drawline(buffer, 41 + offset,21, 56 + offset,  6, 1); 	// Line 2
			fillcircle(buffer, 38 + offset, 21, 2, 1);				// Center
			fillcircle(buffer, 51 + offset, 5, 4, 1);				// End

			// Draw second stick on the right
			offset = 52;
    2afe:	14 e3       	ldi	r17, 0x34	; 52
    2b00:	cb cf       	rjmp	.-106    	; 0x2a98 <Display_sticks+0x46>
		}

		// Print bottom text and markers
		LCD_Display_Text(12, (const unsigned char*)Wingdings, 0, 57); 		// Left
    2b02:	29 e3       	ldi	r18, 0x39	; 57
    2b04:	30 e0       	ldi	r19, 0x00	; 0
    2b06:	40 e0       	ldi	r20, 0x00	; 0
    2b08:	50 e0       	ldi	r21, 0x00	; 0
    2b0a:	65 ef       	ldi	r22, 0xF5	; 245
    2b0c:	70 e0       	ldi	r23, 0x00	; 0
    2b0e:	8c e0       	ldi	r24, 0x0C	; 12
    2b10:	90 e0       	ldi	r25, 0x00	; 0
    2b12:	0e 94 54 22 	call	0x44a8	; 0x44a8 <LCD_Display_Text>

		// If uncalibrated
		if (!CalibrateDone)
		{
			RxGetChannels();
    2b16:	0e 94 60 43 	call	0x86c0	; 0x86c0 <RxGetChannels>
			
			// Display warning if sticks not centered or no RC signal while not started calibrating
			if (((RCinputs[AILERON] < -2000) || (RCinputs[AILERON] > 2000)) && !CalibrateStarted)
    2b1a:	80 91 2d 08 	lds	r24, 0x082D
    2b1e:	90 91 2e 08 	lds	r25, 0x082E
    2b22:	80 33       	cpi	r24, 0x30	; 48
    2b24:	98 4f       	sbci	r25, 0xF8	; 248
    2b26:	3c f0       	brlt	.+14     	; 0x2b36 <Display_sticks+0xe4>
    2b28:	80 91 2d 08 	lds	r24, 0x082D
    2b2c:	90 91 2e 08 	lds	r25, 0x082E
    2b30:	81 3d       	cpi	r24, 0xD1	; 209
    2b32:	97 40       	sbci	r25, 0x07	; 7
    2b34:	6c f0       	brlt	.+26     	; 0x2b50 <Display_sticks+0xfe>
    2b36:	d1 11       	cpse	r29, r1
    2b38:	0b c0       	rjmp	.+22     	; 0x2b50 <Display_sticks+0xfe>
			{
				LCD_Display_Text(135,(const unsigned char*)Verdana14,16,43); 	// "No RX signal?"
    2b3a:	2b e2       	ldi	r18, 0x2B	; 43
    2b3c:	30 e0       	ldi	r19, 0x00	; 0
    2b3e:	40 e1       	ldi	r20, 0x10	; 16
    2b40:	50 e0       	ldi	r21, 0x00	; 0
    2b42:	6f e5       	ldi	r22, 0x5F	; 95
    2b44:	71 e0       	ldi	r23, 0x01	; 1
    2b46:	87 e8       	ldi	r24, 0x87	; 135
    2b48:	90 e0       	ldi	r25, 0x00	; 0
    2b4a:	0e 94 54 22 	call	0x44a8	; 0x44a8 <LCD_Display_Text>
    2b4e:	4c c0       	rjmp	.+152    	; 0x2be8 <Display_sticks+0x196>
			}

			// Sticks have not moved far enough but RC being received
			else if ((RCinputs[AILERON] < 500) && (RCinputs[AILERON] > -500))
    2b50:	80 91 2d 08 	lds	r24, 0x082D
    2b54:	90 91 2e 08 	lds	r25, 0x082E
    2b58:	84 3f       	cpi	r24, 0xF4	; 244
    2b5a:	91 40       	sbci	r25, 0x01	; 1
    2b5c:	9c f4       	brge	.+38     	; 0x2b84 <Display_sticks+0x132>
    2b5e:	80 91 2d 08 	lds	r24, 0x082D
    2b62:	90 91 2e 08 	lds	r25, 0x082E
    2b66:	8d 30       	cpi	r24, 0x0D	; 13
    2b68:	9e 4f       	sbci	r25, 0xFE	; 254
    2b6a:	64 f0       	brlt	.+24     	; 0x2b84 <Display_sticks+0x132>
			{
				CalibrateStarted = true;
				LCD_Display_Text(136,(const unsigned char*)Verdana14,9,43); 	// "Hold as shown"
    2b6c:	2b e2       	ldi	r18, 0x2B	; 43
    2b6e:	30 e0       	ldi	r19, 0x00	; 0
    2b70:	49 e0       	ldi	r20, 0x09	; 9
    2b72:	50 e0       	ldi	r21, 0x00	; 0
    2b74:	6f e5       	ldi	r22, 0x5F	; 95
    2b76:	71 e0       	ldi	r23, 0x01	; 1
    2b78:	88 e8       	ldi	r24, 0x88	; 136
    2b7a:	90 e0       	ldi	r25, 0x00	; 0
    2b7c:	0e 94 54 22 	call	0x44a8	; 0x44a8 <LCD_Display_Text>
			}

			// Sticks have not moved far enough but RC being received
			else if ((RCinputs[AILERON] < 500) && (RCinputs[AILERON] > -500))
			{
				CalibrateStarted = true;
    2b80:	d1 e0       	ldi	r29, 0x01	; 1
				LCD_Display_Text(136,(const unsigned char*)Verdana14,9,43); 	// "Hold as shown"
    2b82:	32 c0       	rjmp	.+100    	; 0x2be8 <Display_sticks+0x196>

			// Sticks should now be in the right position
			// Reverse wrong input channels
			else
			{
				if (RCinputs[AILERON] < 0)
    2b84:	80 91 2d 08 	lds	r24, 0x082D
    2b88:	90 91 2e 08 	lds	r25, 0x082E
    2b8c:	97 ff       	sbrs	r25, 7
    2b8e:	03 c0       	rjmp	.+6      	; 0x2b96 <Display_sticks+0x144>
				{
					Config.AileronPol = REVERSED;
    2b90:	81 e0       	ldi	r24, 0x01	; 1
    2b92:	80 93 e1 05 	sts	0x05E1, r24
				}

				if (RCinputs[ELEVATOR] < 0)
    2b96:	80 91 2f 08 	lds	r24, 0x082F
    2b9a:	90 91 30 08 	lds	r25, 0x0830
    2b9e:	97 ff       	sbrs	r25, 7
    2ba0:	03 c0       	rjmp	.+6      	; 0x2ba8 <Display_sticks+0x156>
				{
					Config.ElevatorPol = REVERSED;
    2ba2:	81 e0       	ldi	r24, 0x01	; 1
    2ba4:	80 93 e2 05 	sts	0x05E2, r24
				}

				if (RCinputs[RUDDER] < 0)
    2ba8:	80 91 31 08 	lds	r24, 0x0831
    2bac:	90 91 32 08 	lds	r25, 0x0832
    2bb0:	97 ff       	sbrs	r25, 7
    2bb2:	03 c0       	rjmp	.+6      	; 0x2bba <Display_sticks+0x168>
				{
					Config.RudderPol = REVERSED;
    2bb4:	81 e0       	ldi	r24, 0x01	; 1
    2bb6:	80 93 42 06 	sts	0x0642, r24
				}

				// If all positive - done!
				if ((RCinputs[AILERON] > 0) && (RCinputs[ELEVATOR] > 0) && (RCinputs[RUDDER] > 0))
    2bba:	80 91 2d 08 	lds	r24, 0x082D
    2bbe:	90 91 2e 08 	lds	r25, 0x082E
    2bc2:	18 16       	cp	r1, r24
    2bc4:	19 06       	cpc	r1, r25
    2bc6:	84 f4       	brge	.+32     	; 0x2be8 <Display_sticks+0x196>
    2bc8:	80 91 2f 08 	lds	r24, 0x082F
    2bcc:	90 91 30 08 	lds	r25, 0x0830
    2bd0:	18 16       	cp	r1, r24
    2bd2:	19 06       	cpc	r1, r25
    2bd4:	4c f4       	brge	.+18     	; 0x2be8 <Display_sticks+0x196>
    2bd6:	80 91 31 08 	lds	r24, 0x0831
    2bda:	90 91 32 08 	lds	r25, 0x0832
    2bde:	c1 e0       	ldi	r28, 0x01	; 1
    2be0:	18 16       	cp	r1, r24
    2be2:	19 06       	cpc	r1, r25
    2be4:	0c f0       	brlt	.+2      	; 0x2be8 <Display_sticks+0x196>
    2be6:	c0 e0       	ldi	r28, 0x00	; 0
				}
			}
		}

		// Update buffer
		write_buffer(buffer);
    2be8:	85 e0       	ldi	r24, 0x05	; 5
    2bea:	91 e0       	ldi	r25, 0x01	; 1
    2bec:	0e 94 75 20 	call	0x40ea	; 0x40ea <write_buffer>
    2bf0:	48 cf       	rjmp	.-368    	; 0x2a82 <Display_sticks+0x30>
	}

	// Save value and return
	if (CalibrateDone)
    2bf2:	cc 23       	and	r28, r28
    2bf4:	39 f1       	breq	.+78     	; 0x2c44 <Display_sticks+0x1f2>
	{
		LCD_Display_Text(137,(const unsigned char*)Verdana14,40,43); 	// "Done!"
    2bf6:	2b e2       	ldi	r18, 0x2B	; 43
    2bf8:	30 e0       	ldi	r19, 0x00	; 0
    2bfa:	48 e2       	ldi	r20, 0x28	; 40
    2bfc:	50 e0       	ldi	r21, 0x00	; 0
    2bfe:	6f e5       	ldi	r22, 0x5F	; 95
    2c00:	71 e0       	ldi	r23, 0x01	; 1
    2c02:	89 e8       	ldi	r24, 0x89	; 137
    2c04:	90 e0       	ldi	r25, 0x00	; 0
    2c06:	0e 94 54 22 	call	0x44a8	; 0x44a8 <LCD_Display_Text>
		// Update buffer
		write_buffer(buffer);
    2c0a:	85 e0       	ldi	r24, 0x05	; 5
    2c0c:	91 e0       	ldi	r25, 0x01	; 1
    2c0e:	0e 94 75 20 	call	0x40ea	; 0x40ea <write_buffer>
		clear_buffer(buffer);
    2c12:	85 e0       	ldi	r24, 0x05	; 5
    2c14:	91 e0       	ldi	r25, 0x01	; 1
    2c16:	0e 94 a7 20 	call	0x414e	; 0x414e <clear_buffer>
    2c1a:	8f e7       	ldi	r24, 0x7F	; 127
    2c1c:	94 e8       	ldi	r25, 0x84	; 132
    2c1e:	2e e1       	ldi	r18, 0x1E	; 30
    2c20:	81 50       	subi	r24, 0x01	; 1
    2c22:	90 40       	sbci	r25, 0x00	; 0
    2c24:	20 40       	sbci	r18, 0x00	; 0
    2c26:	e1 f7       	brne	.-8      	; 0x2c20 <Display_sticks+0x1ce>
    2c28:	00 c0       	rjmp	.+0      	; 0x2c2a <Display_sticks+0x1d8>
    2c2a:	00 00       	nop
		// Restore old settings if failed
		Config.AileronPol = temp_aileron;
		Config.ElevatorPol = temp_elevator;
		Config.RudderPol = temp_rudder;
	}
}
    2c2c:	df 91       	pop	r29
    2c2e:	cf 91       	pop	r28
    2c30:	1f 91       	pop	r17
    2c32:	0f 91       	pop	r16
    2c34:	ff 90       	pop	r15
    2c36:	ef 90       	pop	r14
    2c38:	df 90       	pop	r13
    2c3a:	cf 90       	pop	r12
    2c3c:	bf 90       	pop	r11
    2c3e:	af 90       	pop	r10
		// Update buffer
		write_buffer(buffer);
		clear_buffer(buffer);
		// Pause so that the "Done!" text is readable
		_delay_ms(500);
		Save_Config_to_EEPROM();
    2c40:	0c 94 6b 16 	jmp	0x2cd6	; 0x2cd6 <Save_Config_to_EEPROM>
 	}
	else
	{
		// Restore old settings if failed
		Config.AileronPol = temp_aileron;
    2c44:	d0 92 e1 05 	sts	0x05E1, r13
		Config.ElevatorPol = temp_elevator;
    2c48:	f0 92 e2 05 	sts	0x05E2, r15
		Config.RudderPol = temp_rudder;
    2c4c:	a0 92 42 06 	sts	0x0642, r10
	}
}
    2c50:	df 91       	pop	r29
    2c52:	cf 91       	pop	r28
    2c54:	1f 91       	pop	r17
    2c56:	0f 91       	pop	r16
    2c58:	ff 90       	pop	r15
    2c5a:	ef 90       	pop	r14
    2c5c:	df 90       	pop	r13
    2c5e:	cf 90       	pop	r12
    2c60:	bf 90       	pop	r11
    2c62:	af 90       	pop	r10
    2c64:	08 95       	ret

00002c66 <eeprom_write_byte_changed>:
}

// addr is the address in eeprom
// value is the value to be written
void eeprom_write_byte_changed(uint8_t *addr, uint8_t value)
{
    2c66:	0f 93       	push	r16
    2c68:	1f 93       	push	r17
    2c6a:	cf 93       	push	r28
    2c6c:	df 93       	push	r29
    2c6e:	1f 92       	push	r1
    2c70:	cd b7       	in	r28, 0x3d	; 61
    2c72:	de b7       	in	r29, 0x3e	; 62
    2c74:	8c 01       	movw	r16, r24
	if (eeprom_read_byte(addr) != value)
    2c76:	69 83       	std	Y+1, r22	; 0x01
    2c78:	0e 94 54 49 	call	0x92a8	; 0x92a8 <__eerd_byte_m644pa>
    2c7c:	69 81       	ldd	r22, Y+1	; 0x01
    2c7e:	86 17       	cp	r24, r22
    2c80:	41 f0       	breq	.+16     	; 0x2c92 <eeprom_write_byte_changed+0x2c>
	{
		// void eeprom_write_byte (uint8_t *__p, uint8_t __value);
		eeprom_write_byte(addr, value);
    2c82:	c8 01       	movw	r24, r16
	}
}
    2c84:	0f 90       	pop	r0
    2c86:	df 91       	pop	r29
    2c88:	cf 91       	pop	r28
    2c8a:	1f 91       	pop	r17
    2c8c:	0f 91       	pop	r16
void eeprom_write_byte_changed(uint8_t *addr, uint8_t value)
{
	if (eeprom_read_byte(addr) != value)
	{
		// void eeprom_write_byte (uint8_t *__p, uint8_t __value);
		eeprom_write_byte(addr, value);
    2c8e:	0c 94 5c 49 	jmp	0x92b8	; 0x92b8 <__eewr_byte_m644pa>
	}
}
    2c92:	0f 90       	pop	r0
    2c94:	df 91       	pop	r29
    2c96:	cf 91       	pop	r28
    2c98:	1f 91       	pop	r17
    2c9a:	0f 91       	pop	r16
    2c9c:	08 95       	ret

00002c9e <eeprom_write_block_changes>:
}

// src is the address in RAM
// dest is the address in eeprom (hence const)
void eeprom_write_block_changes(uint8_t *src, uint8_t *dest, uint16_t size)
{ 
    2c9e:	ef 92       	push	r14
    2ca0:	ff 92       	push	r15
    2ca2:	0f 93       	push	r16
    2ca4:	1f 93       	push	r17
    2ca6:	cf 93       	push	r28
    2ca8:	df 93       	push	r29
    2caa:	ec 01       	movw	r28, r24
    2cac:	8b 01       	movw	r16, r22
    2cae:	7a 01       	movw	r14, r20
    2cb0:	e8 0e       	add	r14, r24
    2cb2:	f9 1e       	adc	r15, r25
	uint16_t len;
	uint8_t value;

	for (len=0; len < size; len++)
    2cb4:	ce 15       	cp	r28, r14
    2cb6:	df 05       	cpc	r29, r15
    2cb8:	39 f0       	breq	.+14     	; 0x2cc8 <eeprom_write_block_changes+0x2a>
	{
		// Get value at src
		value = *src;
		
		// Write the value at src to dest
		eeprom_write_byte_changed(dest, value);
    2cba:	69 91       	ld	r22, Y+
    2cbc:	c8 01       	movw	r24, r16
    2cbe:	0e 94 33 16 	call	0x2c66	; 0x2c66 <eeprom_write_byte_changed>
		src++;
		dest++;
    2cc2:	0f 5f       	subi	r16, 0xFF	; 255
    2cc4:	1f 4f       	sbci	r17, 0xFF	; 255
    2cc6:	f6 cf       	rjmp	.-20     	; 0x2cb4 <eeprom_write_block_changes+0x16>
	}
}
    2cc8:	df 91       	pop	r29
    2cca:	cf 91       	pop	r28
    2ccc:	1f 91       	pop	r17
    2cce:	0f 91       	pop	r16
    2cd0:	ff 90       	pop	r15
    2cd2:	ef 90       	pop	r14
    2cd4:	08 95       	ret

00002cd6 <Save_Config_to_EEPROM>:
const uint8_t	FUTABA[MAX_RC_CHANNELS] PROGMEM = {1,2,0,3,4,5,6,7}; 	// Futaba channel sequence (AETRGF12)

void Save_Config_to_EEPROM(void)
{
	// Write to eeProm
	cli();
    2cd6:	f8 94       	cli
	eeprom_write_block_changes((uint8_t*)&Config, (uint8_t*)EEPROM_DATA_START_POS, sizeof(CONFIG_STRUCT));	
    2cd8:	48 e0       	ldi	r20, 0x08	; 8
    2cda:	52 e0       	ldi	r21, 0x02	; 2
    2cdc:	60 e0       	ldi	r22, 0x00	; 0
    2cde:	70 e0       	ldi	r23, 0x00	; 0
    2ce0:	81 eb       	ldi	r24, 0xB1	; 177
    2ce2:	95 e0       	ldi	r25, 0x05	; 5
    2ce4:	0e 94 4f 16 	call	0x2c9e	; 0x2c9e <eeprom_write_block_changes>
	sei();
    2ce8:	78 94       	sei
    2cea:	08 95       	ret

00002cec <Update_V1_0_to_V1_1>:
// Config data restructure code
//************************************************************

// Upgrade V1.0 structure to V1.1 structure
void Update_V1_0_to_V1_1(void)
{
    2cec:	2f 92       	push	r2
    2cee:	3f 92       	push	r3
    2cf0:	4f 92       	push	r4
    2cf2:	5f 92       	push	r5
    2cf4:	6f 92       	push	r6
    2cf6:	7f 92       	push	r7
    2cf8:	8f 92       	push	r8
    2cfa:	9f 92       	push	r9
    2cfc:	af 92       	push	r10
    2cfe:	bf 92       	push	r11
    2d00:	cf 92       	push	r12
    2d02:	df 92       	push	r13
    2d04:	ef 92       	push	r14
    2d06:	ff 92       	push	r15
    2d08:	0f 93       	push	r16
    2d0a:	1f 93       	push	r17
    2d0c:	cf 93       	push	r28
    2d0e:	df 93       	push	r29
    2d10:	cd b7       	in	r28, 0x3d	; 61
    2d12:	de b7       	in	r29, 0x3e	; 62
    2d14:	c5 54       	subi	r28, 0x45	; 69
    2d16:	d1 40       	sbci	r29, 0x01	; 1
    2d18:	0f b6       	in	r0, 0x3f	; 63
    2d1a:	f8 94       	cli
    2d1c:	de bf       	out	0x3e, r29	; 62
    2d1e:	0f be       	out	0x3f, r0	; 63
    2d20:	cd bf       	out	0x3d, r28	; 61
	int8_t		P2_scale;				// P2 sensor scale flags (6)

	// Save old P2 Source B volume. For some reason it gets clobbered.
	// We mustn't use hard-coded values are these change each version.
	// Use an offset from the current Config structure address
	memcpy((void*)&temp,(void*)((&Config.setup) + (377)),1);
    2d22:	40 91 2a 07 	lds	r20, 0x072A
    2d26:	cf 5b       	subi	r28, 0xBF	; 191
    2d28:	de 4f       	sbci	r29, 0xFE	; 254
    2d2a:	48 83       	st	Y, r20
    2d2c:	c1 54       	subi	r28, 0x41	; 65
    2d2e:	d1 40       	sbci	r29, 0x01	; 1
	 
	// Move data that exists after the channel mixer to new location
	// Hard-coded to V1.0 RAM offset	
	memmove((void*)&Config.Servo_reverse, (void*)((&Config.setup) + (378)), 74);	// RAM location determined empirically
    2d30:	4a e4       	ldi	r20, 0x4A	; 74
    2d32:	50 e0       	ldi	r21, 0x00	; 0
    2d34:	6b e2       	ldi	r22, 0x2B	; 43
    2d36:	77 e0       	ldi	r23, 0x07	; 7
    2d38:	83 e7       	ldi	r24, 0x73	; 115
    2d3a:	97 e0       	ldi	r25, 0x07	; 7
    2d3c:	0e 94 0d 49 	call	0x921a	; 0x921a <memmove>
    2d40:	23 e4       	ldi	r18, 0x43	; 67
    2d42:	36 e0       	ldi	r19, 0x06	; 6
    2d44:	ae 01       	movw	r20, r28
    2d46:	4f 5c       	subi	r20, 0xCF	; 207
    2d48:	5e 4f       	sbci	r21, 0xFE	; 254
    2d4a:	ce 01       	movw	r24, r28
    2d4c:	01 96       	adiw	r24, 0x01	; 1
	{
		src = (void*)Config.Channel;	// Same location as old one
		dst = (void*)mixer_buffer;
		src += (i * OLDSIZE);			// Step to next old data in (corrupted) config structure
		dst += (i * NEWSIZE);			// Step to next location for new data in the buffer
		memcpy(dst, src, OLDSIZE);		// Move only the old (smaller) data
    2d4e:	6d e1       	ldi	r22, 0x1D	; 29
    2d50:	f9 01       	movw	r30, r18
    2d52:	dc 01       	movw	r26, r24
    2d54:	76 2f       	mov	r23, r22
    2d56:	01 90       	ld	r0, Z+
    2d58:	0d 92       	st	X+, r0
    2d5a:	7a 95       	dec	r23
    2d5c:	e1 f7       	brne	.-8      	; 0x2d56 <Update_V1_0_to_V1_1+0x6a>
    2d5e:	86 96       	adiw	r24, 0x26	; 38
    2d60:	23 5e       	subi	r18, 0xE3	; 227
    2d62:	3f 4f       	sbci	r19, 0xFF	; 255
	// Move data that exists after the channel mixer to new location
	// Hard-coded to V1.0 RAM offset	
	memmove((void*)&Config.Servo_reverse, (void*)((&Config.setup) + (378)), 74);	// RAM location determined empirically
	
	// Copy the old channel[] structure into buffer, spaced out to match the new structure
	for (i = 0; i < MAX_OUTPUTS; i++)
    2d64:	84 17       	cp	r24, r20
    2d66:	95 07       	cpc	r25, r21
    2d68:	99 f7       	brne	.-26     	; 0x2d50 <Update_V1_0_to_V1_1+0x64>
    2d6a:	4e 01       	movw	r8, r28
    2d6c:	83 e1       	ldi	r24, 0x13	; 19
    2d6e:	88 0e       	add	r8, r24
    2d70:	91 1c       	adc	r9, r1
    2d72:	5e 01       	movw	r10, r28
    2d74:	94 e1       	ldi	r25, 0x14	; 20
    2d76:	a9 0e       	add	r10, r25
    2d78:	b1 1c       	adc	r11, r1
    2d7a:	6e 01       	movw	r12, r28
    2d7c:	e5 e1       	ldi	r30, 0x15	; 21
    2d7e:	ce 0e       	add	r12, r30
    2d80:	d1 1c       	adc	r13, r1
    2d82:	ce 01       	movw	r24, r28
    2d84:	46 96       	adiw	r24, 0x16	; 22
    2d86:	cf 5c       	subi	r28, 0xCF	; 207
    2d88:	de 4f       	sbci	r29, 0xFE	; 254
    2d8a:	99 83       	std	Y+1, r25	; 0x01
    2d8c:	88 83       	st	Y, r24
    2d8e:	c1 53       	subi	r28, 0x31	; 49
    2d90:	d1 40       	sbci	r29, 0x01	; 1
    2d92:	8e 01       	movw	r16, r28
    2d94:	02 5e       	subi	r16, 0xE2	; 226
    2d96:	1f 4f       	sbci	r17, 0xFF	; 255
    2d98:	fe 01       	movw	r30, r28
    2d9a:	7d 96       	adiw	r30, 0x1d	; 29
    2d9c:	c7 5c       	subi	r28, 0xC7	; 199
    2d9e:	de 4f       	sbci	r29, 0xFE	; 254
    2da0:	f9 83       	std	Y+1, r31	; 0x01
    2da2:	e8 83       	st	Y, r30
    2da4:	c9 53       	subi	r28, 0x39	; 57
    2da6:	d1 40       	sbci	r29, 0x01	; 1
    2da8:	06 96       	adiw	r24, 0x06	; 6
    2daa:	cd 5c       	subi	r28, 0xCD	; 205
    2dac:	de 4f       	sbci	r29, 0xFE	; 254
    2dae:	99 83       	std	Y+1, r25	; 0x01
    2db0:	88 83       	st	Y, r24
    2db2:	c3 53       	subi	r28, 0x33	; 51
    2db4:	d1 40       	sbci	r29, 0x01	; 1
    2db6:	32 97       	sbiw	r30, 0x02	; 2
    2db8:	c3 5c       	subi	r28, 0xC3	; 195
    2dba:	de 4f       	sbci	r29, 0xFE	; 254
    2dbc:	f9 83       	std	Y+1, r31	; 0x01
    2dbe:	e8 83       	st	Y, r30
    2dc0:	cd 53       	subi	r28, 0x3D	; 61
    2dc2:	d1 40       	sbci	r29, 0x01	; 1
    2dc4:	02 97       	sbiw	r24, 0x02	; 2
    2dc6:	c9 5c       	subi	r28, 0xC9	; 201
    2dc8:	de 4f       	sbci	r29, 0xFE	; 254
    2dca:	99 83       	std	Y+1, r25	; 0x01
    2dcc:	88 83       	st	Y, r24
    2dce:	c7 53       	subi	r28, 0x37	; 55
    2dd0:	d1 40       	sbci	r29, 0x01	; 1
    2dd2:	32 97       	sbiw	r30, 0x02	; 2
    2dd4:	c5 5c       	subi	r28, 0xC5	; 197
    2dd6:	de 4f       	sbci	r29, 0xFE	; 254
    2dd8:	f9 83       	std	Y+1, r31	; 0x01
    2dda:	e8 83       	st	Y, r30
    2ddc:	cb 53       	subi	r28, 0x3B	; 59
    2dde:	d1 40       	sbci	r29, 0x01	; 1
    2de0:	02 97       	sbiw	r24, 0x02	; 2
    2de2:	cb 5c       	subi	r28, 0xCB	; 203
    2de4:	de 4f       	sbci	r29, 0xFE	; 254
    2de6:	99 83       	std	Y+1, r25	; 0x01
    2de8:	88 83       	st	Y, r24
    2dea:	c5 53       	subi	r28, 0x35	; 53
    2dec:	d1 40       	sbci	r29, 0x01	; 1
    2dee:	7e 01       	movw	r14, r28
    2df0:	97 e1       	ldi	r25, 0x17	; 23
    2df2:	e9 0e       	add	r14, r25
    2df4:	f1 1c       	adc	r15, r1
    2df6:	3e 01       	movw	r6, r28
    2df8:	e5 e0       	ldi	r30, 0x05	; 5
    2dfa:	6e 0e       	add	r6, r30
    2dfc:	71 1c       	adc	r7, r1
    2dfe:	81 e0       	ldi	r24, 0x01	; 1
    2e00:	90 e0       	ldi	r25, 0x00	; 0
    2e02:	8c 0f       	add	r24, r28
    2e04:	9d 1f       	adc	r25, r29
    2e06:	83 5b       	subi	r24, 0xB3	; 179
    2e08:	9e 4f       	sbci	r25, 0xFE	; 254
    2e0a:	ce 5b       	subi	r28, 0xBE	; 190
    2e0c:	de 4f       	sbci	r29, 0xFE	; 254
    2e0e:	99 83       	std	Y+1, r25	; 0x01
    2e10:	88 83       	st	Y, r24
    2e12:	c2 54       	subi	r28, 0x42	; 66
    2e14:	d1 40       	sbci	r29, 0x01	; 1
    2e16:	fe 01       	movw	r30, r28
    2e18:	31 96       	adiw	r30, 0x01	; 1
    2e1a:	c1 5c       	subi	r28, 0xC1	; 193
    2e1c:	de 4f       	sbci	r29, 0xFE	; 254
    2e1e:	f9 83       	std	Y+1, r31	; 0x01
    2e20:	e8 83       	st	Y, r30
    2e22:	cf 53       	subi	r28, 0x3F	; 63
    2e24:	d1 40       	sbci	r29, 0x01	; 1
		
		// Take old motor marker switch and convert
		if ((P1_sensors & (1 << MotorMarker)) != 0)
		{
			// Set the new value in the right place
			mixer_buffer[4 + (i * NEWSIZE)] = MOTOR;
    2e26:	82 e0       	ldi	r24, 0x02	; 2
    2e28:	58 2e       	mov	r5, r24
			{
				mixer_buffer[18 + (i * NEWSIZE)] = SCALE;
			}
			else
			{
				mixer_buffer[18 + (i * NEWSIZE)] = ON;
    2e2a:	44 24       	eor	r4, r4
    2e2c:	43 94       	inc	r4
	for (i = 0; i < MAX_OUTPUTS; i++)
	{
		// Move all bytes from the OLD P1_offset [4] up by one to make space for the Motor_marker byte
		src = &mixer_buffer[4 + (i * NEWSIZE)];	// The old P1_offset byte
		dst = &mixer_buffer[5 + (i * NEWSIZE)];
		memmove(dst, src, (OLDSIZE - 4));// Move all but P1_value, P2_value
    2e2e:	49 e1       	ldi	r20, 0x19	; 25
    2e30:	50 e0       	ldi	r21, 0x00	; 0
    2e32:	b3 01       	movw	r22, r6
    2e34:	c8 01       	movw	r24, r16
    2e36:	48 97       	sbiw	r24, 0x18	; 24
    2e38:	0e 94 0d 49 	call	0x921a	; 0x921a <memmove>

		// Save the old switches
		P1_sensors = mixer_buffer[18 + (i * NEWSIZE)];
    2e3c:	f4 01       	movw	r30, r8
    2e3e:	30 80       	ld	r3, Z
		P2_sensors = mixer_buffer[19 + (i * NEWSIZE)];
    2e40:	f5 01       	movw	r30, r10
    2e42:	20 81       	ld	r18, Z
		P1_scale = mixer_buffer[20 + (i * NEWSIZE)];
    2e44:	f6 01       	movw	r30, r12
    2e46:	30 81       	ld	r19, Z
		P2_scale = mixer_buffer[21 + (i * NEWSIZE)];
    2e48:	cf 5c       	subi	r28, 0xCF	; 207
    2e4a:	de 4f       	sbci	r29, 0xFE	; 254
    2e4c:	e8 81       	ld	r30, Y
    2e4e:	f9 81       	ldd	r31, Y+1	; 0x01
    2e50:	c1 53       	subi	r28, 0x31	; 49
    2e52:	d1 40       	sbci	r29, 0x01	; 1
    2e54:	20 80       	ld	r2, Z
		
		// Take old motor marker switch and convert
		if ((P1_sensors & (1 << MotorMarker)) != 0)
		{
			// Set the new value in the right place
			mixer_buffer[4 + (i * NEWSIZE)] = MOTOR;
    2e56:	f3 01       	movw	r30, r6
		P2_sensors = mixer_buffer[19 + (i * NEWSIZE)];
		P1_scale = mixer_buffer[20 + (i * NEWSIZE)];
		P2_scale = mixer_buffer[21 + (i * NEWSIZE)];
		
		// Take old motor marker switch and convert
		if ((P1_sensors & (1 << MotorMarker)) != 0)
    2e58:	36 fe       	sbrs	r3, 6
    2e5a:	02 c0       	rjmp	.+4      	; 0x2e60 <Update_V1_0_to_V1_1+0x174>
		{
			// Set the new value in the right place
			mixer_buffer[4 + (i * NEWSIZE)] = MOTOR;
    2e5c:	50 82       	st	Z, r5
    2e5e:	01 c0       	rjmp	.+2      	; 0x2e62 <Update_V1_0_to_V1_1+0x176>
		}
		else
		{
			mixer_buffer[4 + (i * NEWSIZE)] = ASERVO;
    2e60:	10 82       	st	Z, r1
		}

		// Move the universal source bytes (8) up eight bytes
		src = &mixer_buffer[22 + (i * NEWSIZE)]; // 21 + 1
		dst = &mixer_buffer[30 + (i * NEWSIZE)];
		memmove(dst, src, 8);
    2e62:	48 e0       	ldi	r20, 0x08	; 8
    2e64:	50 e0       	ldi	r21, 0x00	; 0
    2e66:	b7 01       	movw	r22, r14
    2e68:	c8 01       	movw	r24, r16
    2e6a:	01 96       	adiw	r24, 0x01	; 1
    2e6c:	cc 5b       	subi	r28, 0xBC	; 188
    2e6e:	de 4f       	sbci	r29, 0xFE	; 254
    2e70:	28 83       	st	Y, r18
    2e72:	c4 54       	subi	r28, 0x44	; 68
    2e74:	d1 40       	sbci	r29, 0x01	; 1
    2e76:	cb 5b       	subi	r28, 0xBB	; 187
    2e78:	de 4f       	sbci	r29, 0xFE	; 254
    2e7a:	38 83       	st	Y, r19
    2e7c:	c5 54       	subi	r28, 0x45	; 69
    2e7e:	d1 40       	sbci	r29, 0x01	; 1
    2e80:	0e 94 0d 49 	call	0x921a	; 0x921a <memmove>
    2e84:	80 e0       	ldi	r24, 0x00	; 0
    2e86:	90 e0       	ldi	r25, 0x00	; 0
    2e88:	cb 5b       	subi	r28, 0xBB	; 187
    2e8a:	de 4f       	sbci	r29, 0xFE	; 254
    2e8c:	38 81       	ld	r19, Y
    2e8e:	c5 54       	subi	r28, 0x45	; 69
    2e90:	d1 40       	sbci	r29, 0x01	; 1
    2e92:	cc 5b       	subi	r28, 0xBC	; 188
    2e94:	de 4f       	sbci	r29, 0xFE	; 254
    2e96:	28 81       	ld	r18, Y
    2e98:	c4 54       	subi	r28, 0x44	; 68
    2e9a:	d1 40       	sbci	r29, 0x01	; 1
    2e9c:	c1 5c       	subi	r28, 0xC1	; 193
    2e9e:	de 4f       	sbci	r29, 0xFE	; 254
    2ea0:	e8 81       	ld	r30, Y
    2ea2:	f9 81       	ldd	r31, Y+1	; 0x01
    2ea4:	cf 53       	subi	r28, 0x3F	; 63
    2ea6:	d1 40       	sbci	r29, 0x01	; 1
    2ea8:	e8 0f       	add	r30, r24
    2eaa:	f9 1f       	adc	r31, r25
		
		// Convert old "None" settings to new ones
		// Skip every second byte
		for (j = 0; j < 8; j += 2)
		{
			if (mixer_buffer[30 + (i * NEWSIZE) + j] == 13) // 13 was the old "None"
    2eac:	46 8d       	ldd	r20, Z+30	; 0x1e
    2eae:	4d 30       	cpi	r20, 0x0D	; 13
    2eb0:	11 f4       	brne	.+4      	; 0x2eb6 <Update_V1_0_to_V1_1+0x1ca>
			{
				mixer_buffer[30 + (i * NEWSIZE) + j] = NOMIX;
    2eb2:	4f e0       	ldi	r20, 0x0F	; 15
    2eb4:	46 8f       	std	Z+30, r20	; 0x1e
    2eb6:	02 96       	adiw	r24, 0x02	; 2
		memmove(dst, src, 8);

		
		// Convert old "None" settings to new ones
		// Skip every second byte
		for (j = 0; j < 8; j += 2)
    2eb8:	88 30       	cpi	r24, 0x08	; 8
    2eba:	91 05       	cpc	r25, r1
    2ebc:	79 f7       	brne	.-34     	; 0x2e9c <Update_V1_0_to_V1_1+0x1b0>
		// P1 roll gyro
		if ((P1_sensors & (1 << RollGyro)) != 0)
		{
			if ((P1_scale & (1 << RollScale)) != 0)
			{
				mixer_buffer[18 + (i * NEWSIZE)] = SCALE;
    2ebe:	f4 01       	movw	r30, r8
			}			
		}

		// Expand the old switches into new bytes
		// P1 roll gyro
		if ((P1_sensors & (1 << RollGyro)) != 0)
    2ec0:	30 fe       	sbrs	r3, 0
    2ec2:	06 c0       	rjmp	.+12     	; 0x2ed0 <Update_V1_0_to_V1_1+0x1e4>
		{
			if ((P1_scale & (1 << RollScale)) != 0)
    2ec4:	30 ff       	sbrs	r19, 0
    2ec6:	02 c0       	rjmp	.+4      	; 0x2ecc <Update_V1_0_to_V1_1+0x1e0>
			{
				mixer_buffer[18 + (i * NEWSIZE)] = SCALE;
    2ec8:	50 82       	st	Z, r5
    2eca:	03 c0       	rjmp	.+6      	; 0x2ed2 <Update_V1_0_to_V1_1+0x1e6>
			}
			else
			{
				mixer_buffer[18 + (i * NEWSIZE)] = ON;
    2ecc:	40 82       	st	Z, r4
    2ece:	01 c0       	rjmp	.+2      	; 0x2ed2 <Update_V1_0_to_V1_1+0x1e6>
			}
		}
		else
		{
			mixer_buffer[18 + (i * NEWSIZE)] = OFF;
    2ed0:	10 82       	st	Z, r1
		// P2 roll gyro
		if ((P2_sensors & (1 << RollGyro)) != 0)
		{
			if ((P2_scale & (1 << RollScale)) != 0)
			{
				mixer_buffer[19 + (i * NEWSIZE)] = SCALE;
    2ed2:	f5 01       	movw	r30, r10
		{
			mixer_buffer[18 + (i * NEWSIZE)] = OFF;
		}

		// P2 roll gyro
		if ((P2_sensors & (1 << RollGyro)) != 0)
    2ed4:	20 ff       	sbrs	r18, 0
    2ed6:	06 c0       	rjmp	.+12     	; 0x2ee4 <Update_V1_0_to_V1_1+0x1f8>
		{
			if ((P2_scale & (1 << RollScale)) != 0)
    2ed8:	20 fe       	sbrs	r2, 0
    2eda:	02 c0       	rjmp	.+4      	; 0x2ee0 <Update_V1_0_to_V1_1+0x1f4>
			{
				mixer_buffer[19 + (i * NEWSIZE)] = SCALE;
    2edc:	50 82       	st	Z, r5
    2ede:	03 c0       	rjmp	.+6      	; 0x2ee6 <Update_V1_0_to_V1_1+0x1fa>
			}
			else
			{
				mixer_buffer[19 + (i * NEWSIZE)] = ON;
    2ee0:	40 82       	st	Z, r4
    2ee2:	01 c0       	rjmp	.+2      	; 0x2ee6 <Update_V1_0_to_V1_1+0x1fa>
			}
		}
		else
		{
			mixer_buffer[19 + (i * NEWSIZE)] = OFF;
    2ee4:	10 82       	st	Z, r1
		// P1 pitch gyro
		if ((P1_sensors & (1 << PitchGyro)) != 0)
		{
			if ((P1_scale & (1 << PitchScale)) != 0)
			{
				mixer_buffer[20 + (i * NEWSIZE)] = SCALE;
    2ee6:	f6 01       	movw	r30, r12
		{
			mixer_buffer[19 + (i * NEWSIZE)] = OFF;
		}

		// P1 pitch gyro
		if ((P1_sensors & (1 << PitchGyro)) != 0)
    2ee8:	31 fe       	sbrs	r3, 1
    2eea:	06 c0       	rjmp	.+12     	; 0x2ef8 <Update_V1_0_to_V1_1+0x20c>
		{
			if ((P1_scale & (1 << PitchScale)) != 0)
    2eec:	31 ff       	sbrs	r19, 1
    2eee:	02 c0       	rjmp	.+4      	; 0x2ef4 <Update_V1_0_to_V1_1+0x208>
			{
				mixer_buffer[20 + (i * NEWSIZE)] = SCALE;
    2ef0:	50 82       	st	Z, r5
    2ef2:	03 c0       	rjmp	.+6      	; 0x2efa <Update_V1_0_to_V1_1+0x20e>
			}
			else
			{
				mixer_buffer[20 + (i * NEWSIZE)] = ON;
    2ef4:	40 82       	st	Z, r4
    2ef6:	01 c0       	rjmp	.+2      	; 0x2efa <Update_V1_0_to_V1_1+0x20e>
			}
		}
		else
		{
			mixer_buffer[20 + (i * NEWSIZE)] = OFF;
    2ef8:	10 82       	st	Z, r1
		// P2 pitch gyro
		if ((P2_sensors & (1 << PitchGyro)) != 0)
		{
			if ((P2_scale & (1 << PitchScale)) != 0)
			{
				mixer_buffer[21 + (i * NEWSIZE)] = SCALE;
    2efa:	cf 5c       	subi	r28, 0xCF	; 207
    2efc:	de 4f       	sbci	r29, 0xFE	; 254
    2efe:	e8 81       	ld	r30, Y
    2f00:	f9 81       	ldd	r31, Y+1	; 0x01
    2f02:	c1 53       	subi	r28, 0x31	; 49
    2f04:	d1 40       	sbci	r29, 0x01	; 1
		{
			mixer_buffer[20 + (i * NEWSIZE)] = OFF;
		}

		// P2 pitch gyro
		if ((P2_sensors & (1 << PitchGyro)) != 0)
    2f06:	21 ff       	sbrs	r18, 1
    2f08:	06 c0       	rjmp	.+12     	; 0x2f16 <Update_V1_0_to_V1_1+0x22a>
		{
			if ((P2_scale & (1 << PitchScale)) != 0)
    2f0a:	21 fe       	sbrs	r2, 1
    2f0c:	02 c0       	rjmp	.+4      	; 0x2f12 <Update_V1_0_to_V1_1+0x226>
			{
				mixer_buffer[21 + (i * NEWSIZE)] = SCALE;
    2f0e:	50 82       	st	Z, r5
    2f10:	03 c0       	rjmp	.+6      	; 0x2f18 <Update_V1_0_to_V1_1+0x22c>
			}
			else
			{
				mixer_buffer[21 + (i * NEWSIZE)] = ON;
    2f12:	40 82       	st	Z, r4
    2f14:	01 c0       	rjmp	.+2      	; 0x2f18 <Update_V1_0_to_V1_1+0x22c>
			}
		}
		else
		{
			mixer_buffer[21 + (i * NEWSIZE)] = OFF;
    2f16:	10 82       	st	Z, r1
		// P1 yaw_gyro
		if ((P1_sensors & (1 << YawGyro)) != 0)
		{
			if ((P1_scale & (1 << YawScale)) != 0)
			{
				mixer_buffer[22 + (i * NEWSIZE)] = SCALE;
    2f18:	f7 01       	movw	r30, r14
		{
			mixer_buffer[21 + (i * NEWSIZE)] = OFF;
		}

		// P1 yaw_gyro
		if ((P1_sensors & (1 << YawGyro)) != 0)
    2f1a:	32 fe       	sbrs	r3, 2
    2f1c:	06 c0       	rjmp	.+12     	; 0x2f2a <Update_V1_0_to_V1_1+0x23e>
		{
			if ((P1_scale & (1 << YawScale)) != 0)
    2f1e:	32 ff       	sbrs	r19, 2
    2f20:	02 c0       	rjmp	.+4      	; 0x2f26 <Update_V1_0_to_V1_1+0x23a>
			{
				mixer_buffer[22 + (i * NEWSIZE)] = SCALE;
    2f22:	50 82       	st	Z, r5
    2f24:	03 c0       	rjmp	.+6      	; 0x2f2c <Update_V1_0_to_V1_1+0x240>
			}
			else
			{
				mixer_buffer[22 + (i * NEWSIZE)] = ON;
    2f26:	40 82       	st	Z, r4
    2f28:	01 c0       	rjmp	.+2      	; 0x2f2c <Update_V1_0_to_V1_1+0x240>
			}
		}
		else
		{
			mixer_buffer[22 + (i * NEWSIZE)] = OFF;
    2f2a:	10 82       	st	Z, r1
		// P2 yaw gyro
		if ((P2_sensors & (1 << YawGyro)) != 0)
		{
			if ((P2_scale & (1 << YawScale)) != 0)
			{
				mixer_buffer[23 + (i * NEWSIZE)] = SCALE;
    2f2c:	cb 5c       	subi	r28, 0xCB	; 203
    2f2e:	de 4f       	sbci	r29, 0xFE	; 254
    2f30:	e8 81       	ld	r30, Y
    2f32:	f9 81       	ldd	r31, Y+1	; 0x01
    2f34:	c5 53       	subi	r28, 0x35	; 53
    2f36:	d1 40       	sbci	r29, 0x01	; 1
		{
			mixer_buffer[22 + (i * NEWSIZE)] = OFF;
		}

		// P2 yaw gyro
		if ((P2_sensors & (1 << YawGyro)) != 0)
    2f38:	22 ff       	sbrs	r18, 2
    2f3a:	06 c0       	rjmp	.+12     	; 0x2f48 <Update_V1_0_to_V1_1+0x25c>
		{
			if ((P2_scale & (1 << YawScale)) != 0)
    2f3c:	22 fe       	sbrs	r2, 2
    2f3e:	02 c0       	rjmp	.+4      	; 0x2f44 <Update_V1_0_to_V1_1+0x258>
			{
				mixer_buffer[23 + (i * NEWSIZE)] = SCALE;
    2f40:	50 82       	st	Z, r5
    2f42:	03 c0       	rjmp	.+6      	; 0x2f4a <Update_V1_0_to_V1_1+0x25e>
			}
			else
			{
				mixer_buffer[23 + (i * NEWSIZE)] = ON;
    2f44:	40 82       	st	Z, r4
    2f46:	01 c0       	rjmp	.+2      	; 0x2f4a <Update_V1_0_to_V1_1+0x25e>
			}
		}
		else
		{
			mixer_buffer[23 + (i * NEWSIZE)] = OFF;
    2f48:	10 82       	st	Z, r1
		// P1 roll acc
		if ((P1_sensors & (1 << RollAcc)) != 0)
		{
			if ((P1_scale & (1 << AccRollScale)) != 0)
			{
				mixer_buffer[24 + (i * NEWSIZE)] = SCALE;
    2f4a:	c5 5c       	subi	r28, 0xC5	; 197
    2f4c:	de 4f       	sbci	r29, 0xFE	; 254
    2f4e:	e8 81       	ld	r30, Y
    2f50:	f9 81       	ldd	r31, Y+1	; 0x01
    2f52:	cb 53       	subi	r28, 0x3B	; 59
    2f54:	d1 40       	sbci	r29, 0x01	; 1
		{
			mixer_buffer[23 + (i * NEWSIZE)] = OFF;
		}

		// P1 roll acc
		if ((P1_sensors & (1 << RollAcc)) != 0)
    2f56:	33 fe       	sbrs	r3, 3
    2f58:	06 c0       	rjmp	.+12     	; 0x2f66 <Update_V1_0_to_V1_1+0x27a>
		{
			if ((P1_scale & (1 << AccRollScale)) != 0)
    2f5a:	33 ff       	sbrs	r19, 3
    2f5c:	02 c0       	rjmp	.+4      	; 0x2f62 <Update_V1_0_to_V1_1+0x276>
			{
				mixer_buffer[24 + (i * NEWSIZE)] = SCALE;
    2f5e:	50 82       	st	Z, r5
    2f60:	03 c0       	rjmp	.+6      	; 0x2f68 <Update_V1_0_to_V1_1+0x27c>
			}
			else
			{
				mixer_buffer[24 + (i * NEWSIZE)] = ON;
    2f62:	40 82       	st	Z, r4
    2f64:	01 c0       	rjmp	.+2      	; 0x2f68 <Update_V1_0_to_V1_1+0x27c>
			}
		}
		else
		{
			mixer_buffer[24 + (i * NEWSIZE)] = OFF;
    2f66:	10 82       	st	Z, r1
		// P2 roll acc
		if ((P2_sensors & (1 << RollAcc)) != 0)
		{
			if ((P2_scale & (1 << AccRollScale)) != 0)
			{
				mixer_buffer[25 + (i * NEWSIZE)] = SCALE;
    2f68:	c9 5c       	subi	r28, 0xC9	; 201
    2f6a:	de 4f       	sbci	r29, 0xFE	; 254
    2f6c:	e8 81       	ld	r30, Y
    2f6e:	f9 81       	ldd	r31, Y+1	; 0x01
    2f70:	c7 53       	subi	r28, 0x37	; 55
    2f72:	d1 40       	sbci	r29, 0x01	; 1
		{
			mixer_buffer[24 + (i * NEWSIZE)] = OFF;
		}

		// P2 roll acc
		if ((P2_sensors & (1 << RollAcc)) != 0)
    2f74:	23 ff       	sbrs	r18, 3
    2f76:	06 c0       	rjmp	.+12     	; 0x2f84 <Update_V1_0_to_V1_1+0x298>
		{
			if ((P2_scale & (1 << AccRollScale)) != 0)
    2f78:	23 fe       	sbrs	r2, 3
    2f7a:	02 c0       	rjmp	.+4      	; 0x2f80 <Update_V1_0_to_V1_1+0x294>
			{
				mixer_buffer[25 + (i * NEWSIZE)] = SCALE;
    2f7c:	50 82       	st	Z, r5
    2f7e:	03 c0       	rjmp	.+6      	; 0x2f86 <Update_V1_0_to_V1_1+0x29a>
			}
			else
			{
				mixer_buffer[25 + (i * NEWSIZE)] = ON;
    2f80:	40 82       	st	Z, r4
    2f82:	01 c0       	rjmp	.+2      	; 0x2f86 <Update_V1_0_to_V1_1+0x29a>
			}
		}
		else
		{
			mixer_buffer[25 + (i * NEWSIZE)] = OFF;
    2f84:	10 82       	st	Z, r1
		// P1 pitch acc
		if ((P1_sensors & (1 << PitchAcc)) != 0)
		{
			if ((P1_scale & (1 << AccPitchScale)) != 0)
			{
				mixer_buffer[26 + (i * NEWSIZE)] = SCALE;
    2f86:	c3 5c       	subi	r28, 0xC3	; 195
    2f88:	de 4f       	sbci	r29, 0xFE	; 254
    2f8a:	e8 81       	ld	r30, Y
    2f8c:	f9 81       	ldd	r31, Y+1	; 0x01
    2f8e:	cd 53       	subi	r28, 0x3D	; 61
    2f90:	d1 40       	sbci	r29, 0x01	; 1
		{
			mixer_buffer[25 + (i * NEWSIZE)] = OFF;
		}

		// P1 pitch acc
		if ((P1_sensors & (1 << PitchAcc)) != 0)
    2f92:	34 fe       	sbrs	r3, 4
    2f94:	06 c0       	rjmp	.+12     	; 0x2fa2 <Update_V1_0_to_V1_1+0x2b6>
		{
			if ((P1_scale & (1 << AccPitchScale)) != 0)
    2f96:	34 ff       	sbrs	r19, 4
    2f98:	02 c0       	rjmp	.+4      	; 0x2f9e <Update_V1_0_to_V1_1+0x2b2>
			{
				mixer_buffer[26 + (i * NEWSIZE)] = SCALE;
    2f9a:	50 82       	st	Z, r5
    2f9c:	03 c0       	rjmp	.+6      	; 0x2fa4 <Update_V1_0_to_V1_1+0x2b8>
			}
			else
			{
				mixer_buffer[26 + (i * NEWSIZE)] = ON;
    2f9e:	40 82       	st	Z, r4
    2fa0:	01 c0       	rjmp	.+2      	; 0x2fa4 <Update_V1_0_to_V1_1+0x2b8>
			}
		}
		else
		{
			mixer_buffer[26 + (i * NEWSIZE)] = OFF;
    2fa2:	10 82       	st	Z, r1
		// P2 pitch acc
		if ((P2_sensors & (1 << PitchAcc)) != 0)
		{
			if ((P2_scale & (1 << AccPitchScale)) != 0)
			{
				mixer_buffer[27 + (i * NEWSIZE)] = SCALE;
    2fa4:	cd 5c       	subi	r28, 0xCD	; 205
    2fa6:	de 4f       	sbci	r29, 0xFE	; 254
    2fa8:	e8 81       	ld	r30, Y
    2faa:	f9 81       	ldd	r31, Y+1	; 0x01
    2fac:	c3 53       	subi	r28, 0x33	; 51
    2fae:	d1 40       	sbci	r29, 0x01	; 1
		{
			mixer_buffer[26 + (i * NEWSIZE)] = OFF;
		}

		// P2 pitch acc
		if ((P2_sensors & (1 << PitchAcc)) != 0)
    2fb0:	24 ff       	sbrs	r18, 4
    2fb2:	06 c0       	rjmp	.+12     	; 0x2fc0 <Update_V1_0_to_V1_1+0x2d4>
		{
			if ((P2_scale & (1 << AccPitchScale)) != 0)
    2fb4:	24 fe       	sbrs	r2, 4
    2fb6:	02 c0       	rjmp	.+4      	; 0x2fbc <Update_V1_0_to_V1_1+0x2d0>
			{
				mixer_buffer[27 + (i * NEWSIZE)] = SCALE;
    2fb8:	50 82       	st	Z, r5
    2fba:	03 c0       	rjmp	.+6      	; 0x2fc2 <Update_V1_0_to_V1_1+0x2d6>
			}
			else
			{
				mixer_buffer[27 + (i * NEWSIZE)] = ON;
    2fbc:	40 82       	st	Z, r4
    2fbe:	01 c0       	rjmp	.+2      	; 0x2fc2 <Update_V1_0_to_V1_1+0x2d6>
			}
		}
		else
		{
			mixer_buffer[27 + (i * NEWSIZE)] = OFF;
    2fc0:	10 82       	st	Z, r1
		// P1 Z delta acc
		if ((P1_sensors & (1 << ZDeltaAcc)) != 0)
		{
			if ((P1_scale & (1 << AccZScale)) != 0)
			{
				mixer_buffer[28 + (i * NEWSIZE)] = SCALE;
    2fc2:	c7 5c       	subi	r28, 0xC7	; 199
    2fc4:	de 4f       	sbci	r29, 0xFE	; 254
    2fc6:	e8 81       	ld	r30, Y
    2fc8:	f9 81       	ldd	r31, Y+1	; 0x01
    2fca:	c9 53       	subi	r28, 0x39	; 57
    2fcc:	d1 40       	sbci	r29, 0x01	; 1
		{
			mixer_buffer[27 + (i * NEWSIZE)] = OFF;
		}

		// P1 Z delta acc
		if ((P1_sensors & (1 << ZDeltaAcc)) != 0)
    2fce:	35 fe       	sbrs	r3, 5
    2fd0:	06 c0       	rjmp	.+12     	; 0x2fde <Update_V1_0_to_V1_1+0x2f2>
		{
			if ((P1_scale & (1 << AccZScale)) != 0)
    2fd2:	35 ff       	sbrs	r19, 5
    2fd4:	02 c0       	rjmp	.+4      	; 0x2fda <Update_V1_0_to_V1_1+0x2ee>
			{
				mixer_buffer[28 + (i * NEWSIZE)] = SCALE;
    2fd6:	50 82       	st	Z, r5
    2fd8:	03 c0       	rjmp	.+6      	; 0x2fe0 <Update_V1_0_to_V1_1+0x2f4>
			}
			else
			{
				mixer_buffer[28 + (i * NEWSIZE)] = ON;
    2fda:	40 82       	st	Z, r4
    2fdc:	01 c0       	rjmp	.+2      	; 0x2fe0 <Update_V1_0_to_V1_1+0x2f4>
			}
		}
		else
		{
			mixer_buffer[28 + (i * NEWSIZE)] = OFF;
    2fde:	10 82       	st	Z, r1
		// P2 Z delta acc
		if ((P2_sensors & (1 << ZDeltaAcc)) != 0)
		{
			if ((P2_scale & (1 << AccZScale)) != 0)
			{
				mixer_buffer[29 + (i * NEWSIZE)] = SCALE;
    2fe0:	f8 01       	movw	r30, r16
		{
			mixer_buffer[28 + (i * NEWSIZE)] = OFF;
		}

		// P2 Z delta acc
		if ((P2_sensors & (1 << ZDeltaAcc)) != 0)
    2fe2:	25 ff       	sbrs	r18, 5
    2fe4:	06 c0       	rjmp	.+12     	; 0x2ff2 <Update_V1_0_to_V1_1+0x306>
		{
			if ((P2_scale & (1 << AccZScale)) != 0)
    2fe6:	25 fe       	sbrs	r2, 5
    2fe8:	02 c0       	rjmp	.+4      	; 0x2fee <Update_V1_0_to_V1_1+0x302>
			{
				mixer_buffer[29 + (i * NEWSIZE)] = SCALE;
    2fea:	50 82       	st	Z, r5
    2fec:	03 c0       	rjmp	.+6      	; 0x2ff4 <Update_V1_0_to_V1_1+0x308>
			}
			else
			{
				mixer_buffer[29 + (i * NEWSIZE)] = ON;
    2fee:	40 82       	st	Z, r4
    2ff0:	01 c0       	rjmp	.+2      	; 0x2ff4 <Update_V1_0_to_V1_1+0x308>
			}
		}
		else
		{
			mixer_buffer[29 + (i * NEWSIZE)] = OFF;
    2ff2:	10 82       	st	Z, r1
    2ff4:	c1 5c       	subi	r28, 0xC1	; 193
    2ff6:	de 4f       	sbci	r29, 0xFE	; 254
    2ff8:	88 81       	ld	r24, Y
    2ffa:	99 81       	ldd	r25, Y+1	; 0x01
    2ffc:	cf 53       	subi	r28, 0x3F	; 63
    2ffe:	d1 40       	sbci	r29, 0x01	; 1
    3000:	86 96       	adiw	r24, 0x26	; 38
    3002:	c1 5c       	subi	r28, 0xC1	; 193
    3004:	de 4f       	sbci	r29, 0xFE	; 254
    3006:	99 83       	std	Y+1, r25	; 0x01
    3008:	88 83       	st	Y, r24
    300a:	cf 53       	subi	r28, 0x3F	; 63
    300c:	d1 40       	sbci	r29, 0x01	; 1
    300e:	96 e2       	ldi	r25, 0x26	; 38
    3010:	89 0e       	add	r8, r25
    3012:	91 1c       	adc	r9, r1
    3014:	e6 e2       	ldi	r30, 0x26	; 38
    3016:	ae 0e       	add	r10, r30
    3018:	b1 1c       	adc	r11, r1
    301a:	f6 e2       	ldi	r31, 0x26	; 38
    301c:	cf 0e       	add	r12, r31
    301e:	d1 1c       	adc	r13, r1
    3020:	cf 5c       	subi	r28, 0xCF	; 207
    3022:	de 4f       	sbci	r29, 0xFE	; 254
    3024:	88 81       	ld	r24, Y
    3026:	99 81       	ldd	r25, Y+1	; 0x01
    3028:	c1 53       	subi	r28, 0x31	; 49
    302a:	d1 40       	sbci	r29, 0x01	; 1
    302c:	86 96       	adiw	r24, 0x26	; 38
    302e:	cf 5c       	subi	r28, 0xCF	; 207
    3030:	de 4f       	sbci	r29, 0xFE	; 254
    3032:	99 83       	std	Y+1, r25	; 0x01
    3034:	88 83       	st	Y, r24
    3036:	c1 53       	subi	r28, 0x31	; 49
    3038:	d1 40       	sbci	r29, 0x01	; 1
    303a:	0a 5d       	subi	r16, 0xDA	; 218
    303c:	1f 4f       	sbci	r17, 0xFF	; 255
    303e:	c7 5c       	subi	r28, 0xC7	; 199
    3040:	de 4f       	sbci	r29, 0xFE	; 254
    3042:	e8 81       	ld	r30, Y
    3044:	f9 81       	ldd	r31, Y+1	; 0x01
    3046:	c9 53       	subi	r28, 0x39	; 57
    3048:	d1 40       	sbci	r29, 0x01	; 1
    304a:	b6 96       	adiw	r30, 0x26	; 38
    304c:	c7 5c       	subi	r28, 0xC7	; 199
    304e:	de 4f       	sbci	r29, 0xFE	; 254
    3050:	f9 83       	std	Y+1, r31	; 0x01
    3052:	e8 83       	st	Y, r30
    3054:	c9 53       	subi	r28, 0x39	; 57
    3056:	d1 40       	sbci	r29, 0x01	; 1
    3058:	cd 5c       	subi	r28, 0xCD	; 205
    305a:	de 4f       	sbci	r29, 0xFE	; 254
    305c:	88 81       	ld	r24, Y
    305e:	99 81       	ldd	r25, Y+1	; 0x01
    3060:	c3 53       	subi	r28, 0x33	; 51
    3062:	d1 40       	sbci	r29, 0x01	; 1
    3064:	86 96       	adiw	r24, 0x26	; 38
    3066:	cd 5c       	subi	r28, 0xCD	; 205
    3068:	de 4f       	sbci	r29, 0xFE	; 254
    306a:	99 83       	std	Y+1, r25	; 0x01
    306c:	88 83       	st	Y, r24
    306e:	c3 53       	subi	r28, 0x33	; 51
    3070:	d1 40       	sbci	r29, 0x01	; 1
    3072:	c3 5c       	subi	r28, 0xC3	; 195
    3074:	de 4f       	sbci	r29, 0xFE	; 254
    3076:	e8 81       	ld	r30, Y
    3078:	f9 81       	ldd	r31, Y+1	; 0x01
    307a:	cd 53       	subi	r28, 0x3D	; 61
    307c:	d1 40       	sbci	r29, 0x01	; 1
    307e:	b6 96       	adiw	r30, 0x26	; 38
    3080:	c3 5c       	subi	r28, 0xC3	; 195
    3082:	de 4f       	sbci	r29, 0xFE	; 254
    3084:	f9 83       	std	Y+1, r31	; 0x01
    3086:	e8 83       	st	Y, r30
    3088:	cd 53       	subi	r28, 0x3D	; 61
    308a:	d1 40       	sbci	r29, 0x01	; 1
    308c:	c9 5c       	subi	r28, 0xC9	; 201
    308e:	de 4f       	sbci	r29, 0xFE	; 254
    3090:	88 81       	ld	r24, Y
    3092:	99 81       	ldd	r25, Y+1	; 0x01
    3094:	c7 53       	subi	r28, 0x37	; 55
    3096:	d1 40       	sbci	r29, 0x01	; 1
    3098:	86 96       	adiw	r24, 0x26	; 38
    309a:	c9 5c       	subi	r28, 0xC9	; 201
    309c:	de 4f       	sbci	r29, 0xFE	; 254
    309e:	99 83       	std	Y+1, r25	; 0x01
    30a0:	88 83       	st	Y, r24
    30a2:	c7 53       	subi	r28, 0x37	; 55
    30a4:	d1 40       	sbci	r29, 0x01	; 1
    30a6:	c5 5c       	subi	r28, 0xC5	; 197
    30a8:	de 4f       	sbci	r29, 0xFE	; 254
    30aa:	e8 81       	ld	r30, Y
    30ac:	f9 81       	ldd	r31, Y+1	; 0x01
    30ae:	cb 53       	subi	r28, 0x3B	; 59
    30b0:	d1 40       	sbci	r29, 0x01	; 1
    30b2:	b6 96       	adiw	r30, 0x26	; 38
    30b4:	c5 5c       	subi	r28, 0xC5	; 197
    30b6:	de 4f       	sbci	r29, 0xFE	; 254
    30b8:	f9 83       	std	Y+1, r31	; 0x01
    30ba:	e8 83       	st	Y, r30
    30bc:	cb 53       	subi	r28, 0x3B	; 59
    30be:	d1 40       	sbci	r29, 0x01	; 1
    30c0:	cb 5c       	subi	r28, 0xCB	; 203
    30c2:	de 4f       	sbci	r29, 0xFE	; 254
    30c4:	88 81       	ld	r24, Y
    30c6:	99 81       	ldd	r25, Y+1	; 0x01
    30c8:	c5 53       	subi	r28, 0x35	; 53
    30ca:	d1 40       	sbci	r29, 0x01	; 1
    30cc:	86 96       	adiw	r24, 0x26	; 38
    30ce:	cb 5c       	subi	r28, 0xCB	; 203
    30d0:	de 4f       	sbci	r29, 0xFE	; 254
    30d2:	99 83       	std	Y+1, r25	; 0x01
    30d4:	88 83       	st	Y, r24
    30d6:	c5 53       	subi	r28, 0x35	; 53
    30d8:	d1 40       	sbci	r29, 0x01	; 1
    30da:	96 e2       	ldi	r25, 0x26	; 38
    30dc:	e9 0e       	add	r14, r25
    30de:	f1 1c       	adc	r15, r1
    30e0:	e6 e2       	ldi	r30, 0x26	; 38
    30e2:	6e 0e       	add	r6, r30
    30e4:	71 1c       	adc	r7, r1
		dst += (i * NEWSIZE);			// Step to next location for new data in the buffer
		memcpy(dst, src, OLDSIZE);		// Move only the old (smaller) data
	}

	// Rearrange one output at a time	
	for (i = 0; i < MAX_OUTPUTS; i++)
    30e6:	ce 5b       	subi	r28, 0xBE	; 190
    30e8:	de 4f       	sbci	r29, 0xFE	; 254
    30ea:	88 81       	ld	r24, Y
    30ec:	99 81       	ldd	r25, Y+1	; 0x01
    30ee:	c2 54       	subi	r28, 0x42	; 66
    30f0:	d1 40       	sbci	r29, 0x01	; 1
    30f2:	08 17       	cp	r16, r24
    30f4:	19 07       	cpc	r17, r25
    30f6:	09 f0       	breq	.+2      	; 0x30fa <Update_V1_0_to_V1_1+0x40e>
    30f8:	9a ce       	rjmp	.-716    	; 0x2e2e <Update_V1_0_to_V1_1+0x142>
	}
		
	// Copy buffer back into new structure
	src = (void*)mixer_buffer;
	dst = (void*)Config.Channel;
	memcpy(dst, src, sizeof(mixer_buffer) - 1); // This appears to be spot on.
    30fa:	8f e2       	ldi	r24, 0x2F	; 47
    30fc:	91 e0       	ldi	r25, 0x01	; 1
    30fe:	fe 01       	movw	r30, r28
    3100:	31 96       	adiw	r30, 0x01	; 1
    3102:	a3 e4       	ldi	r26, 0x43	; 67
    3104:	b6 e0       	ldi	r27, 0x06	; 6
    3106:	01 90       	ld	r0, Z+
    3108:	0d 92       	st	X+, r0
    310a:	01 97       	sbiw	r24, 0x01	; 1
    310c:	e1 f7       	brne	.-8      	; 0x3106 <Update_V1_0_to_V1_1+0x41a>

	// Restore corrupted byte manually
	Config.Channel[7].P2_source_b_volume = temp; 
    310e:	cf 5b       	subi	r28, 0xBF	; 191
    3110:	de 4f       	sbci	r29, 0xFE	; 254
    3112:	98 81       	ld	r25, Y
    3114:	c1 54       	subi	r28, 0x41	; 65
    3116:	d1 40       	sbci	r29, 0x01	; 1
    3118:	90 93 72 07 	sts	0x0772, r25

	// Set magic number to V1.1 signature
	Config.setup = V1_1_SIGNATURE;
    311c:	86 e3       	ldi	r24, 0x36	; 54
    311e:	80 93 b1 05 	sts	0x05B1, r24
}
    3122:	cb 5b       	subi	r28, 0xBB	; 187
    3124:	de 4f       	sbci	r29, 0xFE	; 254
    3126:	0f b6       	in	r0, 0x3f	; 63
    3128:	f8 94       	cli
    312a:	de bf       	out	0x3e, r29	; 62
    312c:	0f be       	out	0x3f, r0	; 63
    312e:	cd bf       	out	0x3d, r28	; 61
    3130:	df 91       	pop	r29
    3132:	cf 91       	pop	r28
    3134:	1f 91       	pop	r17
    3136:	0f 91       	pop	r16
    3138:	ff 90       	pop	r15
    313a:	ef 90       	pop	r14
    313c:	df 90       	pop	r13
    313e:	cf 90       	pop	r12
    3140:	bf 90       	pop	r11
    3142:	af 90       	pop	r10
    3144:	9f 90       	pop	r9
    3146:	8f 90       	pop	r8
    3148:	7f 90       	pop	r7
    314a:	6f 90       	pop	r6
    314c:	5f 90       	pop	r5
    314e:	4f 90       	pop	r4
    3150:	3f 90       	pop	r3
    3152:	2f 90       	pop	r2
    3154:	08 95       	ret

00003156 <Update_V1_1_to_V1_1_B8>:

// Upgrade V1.1 structure to V1.1 Beta 8 structure
void Update_V1_1_to_V1_1_B8(void)
{
    3156:	cf 93       	push	r28
    3158:	df 93       	push	r29
    315a:	cd b7       	in	r28, 0x3d	; 61
    315c:	de b7       	in	r29, 0x3e	; 62
    315e:	28 97       	sbiw	r28, 0x08	; 8
    3160:	0f b6       	in	r0, 0x3f	; 63
    3162:	f8 94       	cli
    3164:	de bf       	out	0x3e, r29	; 62
    3166:	0f be       	out	0x3f, r0	; 63
    3168:	cd bf       	out	0x3d, r28	; 61
	int8_t	buffer[8];
	
	// Swap old settings into new
	buffer[0] = Config.RxMode;
    316a:	80 91 da 05 	lds	r24, 0x05DA
    316e:	89 83       	std	Y+1, r24	; 0x01
	buffer[1] = Config.MPU6050_LPF;
    3170:	80 91 3e 06 	lds	r24, 0x063E
    3174:	8a 83       	std	Y+2, r24	; 0x02
	buffer[2] = Config.Servo_rate;
    3176:	80 91 db 05 	lds	r24, 0x05DB
    317a:	8b 83       	std	Y+3, r24	; 0x03
	buffer[3] = Config.PWM_Sync;
    317c:	80 91 dc 05 	lds	r24, 0x05DC
    3180:	8c 83       	std	Y+4, r24	; 0x04
	buffer[4] = Config.TxSeq;
    3182:	80 91 dd 05 	lds	r24, 0x05DD
    3186:	8d 83       	std	Y+5, r24	; 0x05
	buffer[5] = Config.AileronPol;
    3188:	90 91 e1 05 	lds	r25, 0x05E1
    318c:	9e 83       	std	Y+6, r25	; 0x06
	buffer[6] = Config.ElevatorPol;
    318e:	90 91 e2 05 	lds	r25, 0x05E2
    3192:	9f 83       	std	Y+7, r25	; 0x07
	buffer[7] = Config.RudderPol;
    3194:	90 91 42 06 	lds	r25, 0x0642
    3198:	98 87       	std	Y+8, r25	; 0x08
	
	// Copy back to RC items structure
	memcpy(&Config.RxMode, &buffer,7);
    319a:	27 e0       	ldi	r18, 0x07	; 7
    319c:	fe 01       	movw	r30, r28
    319e:	31 96       	adiw	r30, 0x01	; 1
    31a0:	aa ed       	ldi	r26, 0xDA	; 218
    31a2:	b5 e0       	ldi	r27, 0x05	; 5
    31a4:	01 90       	ld	r0, Z+
    31a6:	0d 92       	st	X+, r0
    31a8:	2a 95       	dec	r18
    31aa:	e1 f7       	brne	.-8      	; 0x31a4 <Update_V1_1_to_V1_1_B8+0x4e>
	
	// Copy back to General items structure
	Config.MPU6050_LPF = buffer[7];
    31ac:	90 93 3e 06 	sts	0x063E, r25
	
	// "None" no longer an option for this channel
	if (Config.FlightChan == NOCHAN)
    31b0:	88 30       	cpi	r24, 0x08	; 8
    31b2:	19 f4       	brne	.+6      	; 0x31ba <Update_V1_1_to_V1_1_B8+0x64>
	{
		Config.FlightChan = AUX3;
    31b4:	87 e0       	ldi	r24, 0x07	; 7
    31b6:	80 93 de 05 	sts	0x05DE, r24
	}
	
	// Set magic number to V1.1 Beta 8 signature
	Config.setup = V1_1_B8_SIGNATURE;
    31ba:	87 e3       	ldi	r24, 0x37	; 55
    31bc:	80 93 b1 05 	sts	0x05B1, r24
}
    31c0:	28 96       	adiw	r28, 0x08	; 8
    31c2:	0f b6       	in	r0, 0x3f	; 63
    31c4:	f8 94       	cli
    31c6:	de bf       	out	0x3e, r29	; 62
    31c8:	0f be       	out	0x3f, r0	; 63
    31ca:	cd bf       	out	0x3d, r28	; 61
    31cc:	df 91       	pop	r29
    31ce:	cf 91       	pop	r28
    31d0:	08 95       	ret

000031d2 <Set_EEPROM_Default_Config>:

// Force a factory reset
void Set_EEPROM_Default_Config(void)
{
    31d2:	cf 93       	push	r28
    31d4:	df 93       	push	r29
	uint8_t i;
	
	// Clear entire Config space first
	memset(&Config.setup,0,(sizeof(Config)));
    31d6:	88 e0       	ldi	r24, 0x08	; 8
    31d8:	92 e0       	ldi	r25, 0x02	; 2
    31da:	e1 eb       	ldi	r30, 0xB1	; 177
    31dc:	f5 e0       	ldi	r31, 0x05	; 5
    31de:	df 01       	movw	r26, r30
    31e0:	9c 01       	movw	r18, r24
    31e2:	1d 92       	st	X+, r1
    31e4:	21 50       	subi	r18, 0x01	; 1
    31e6:	30 40       	sbci	r19, 0x00	; 0
    31e8:	e1 f7       	brne	.-8      	; 0x31e2 <Set_EEPROM_Default_Config+0x10>

	// Set magic number to current signature
	Config.setup = MAGIC_NUMBER;
    31ea:	87 e3       	ldi	r24, 0x37	; 55
    31ec:	80 93 b1 05 	sts	0x05B1, r24

	// Misc settings
	Config.RxMode = PWM;				// Default to PWM
    31f0:	81 e0       	ldi	r24, 0x01	; 1
    31f2:	80 93 da 05 	sts	0x05DA, r24
	Config.PWM_Sync = GEAR;
    31f6:	84 e0       	ldi	r24, 0x04	; 4
    31f8:	80 93 dc 05 	sts	0x05DC, r24
	Config.Acc_LPF = 6;					// Acc LPF around 21Hz (5, 10, 21, 32, 44, 74, None)
    31fc:	96 e0       	ldi	r25, 0x06	; 6
    31fe:	90 93 3f 06 	sts	0x063F, r25
	Config.Gyro_LPF = 6;				// Gyro LPF off "None" (5, 10, 21, 32, 44, 74, None)
    3202:	90 93 40 06 	sts	0x0640, r25
	Config.CF_factor = 7;
    3206:	97 e0       	ldi	r25, 0x07	; 7
    3208:	90 93 41 06 	sts	0x0641, r25
	Config.FlightChan = GEAR;			// Channel GEAR switches flight mode by default
    320c:	80 93 de 05 	sts	0x05DE, r24
	Config.Disarm_timer = 30;			// Default to 30 seconds
    3210:	8e e1       	ldi	r24, 0x1E	; 30
    3212:	80 93 3c 06 	sts	0x063C, r24
	Config.Transition_P1n = 50;			// Set P1.n point to 50%
    3216:	82 e3       	ldi	r24, 0x32	; 50
    3218:	80 93 e0 05 	sts	0x05E0, r24
    321c:	e4 ee       	ldi	r30, 0xE4	; 228
    321e:	f0 e0       	ldi	r31, 0x00	; 0
    3220:	c2 eb       	ldi	r28, 0xB2	; 178
    3222:	d5 e0       	ldi	r29, 0x05	; 5
    3224:	ab e8       	ldi	r26, 0x8B	; 139
    3226:	b7 e0       	ldi	r27, 0x07	; 7

	// Servo defaults
	for (i = 0; i < MAX_RC_CHANNELS; i++)
	{
		Config.ChannelOrder[i] = pgm_read_byte(&JR[i]);
		Config.RxChannelZeroOffset[i] = 3750;
    3228:	86 ea       	ldi	r24, 0xA6	; 166
    322a:	9e e0       	ldi	r25, 0x0E	; 14
	Config.Transition_P1n = 50;			// Set P1.n point to 50%

	// Servo defaults
	for (i = 0; i < MAX_RC_CHANNELS; i++)
	{
		Config.ChannelOrder[i] = pgm_read_byte(&JR[i]);
    322c:	24 91       	lpm	r18, Z
    322e:	29 93       	st	Y+, r18
		Config.RxChannelZeroOffset[i] = 3750;
    3230:	8d 93       	st	X+, r24
    3232:	9d 93       	st	X+, r25
    3234:	31 96       	adiw	r30, 0x01	; 1
	Config.FlightChan = GEAR;			// Channel GEAR switches flight mode by default
	Config.Disarm_timer = 30;			// Default to 30 seconds
	Config.Transition_P1n = 50;			// Set P1.n point to 50%

	// Servo defaults
	for (i = 0; i < MAX_RC_CHANNELS; i++)
    3236:	30 e0       	ldi	r19, 0x00	; 0
    3238:	ec 3e       	cpi	r30, 0xEC	; 236
    323a:	f3 07       	cpc	r31, r19
    323c:	b9 f7       	brne	.-18     	; 0x322c <Set_EEPROM_Default_Config+0x5a>
		Config.ChannelOrder[i] = pgm_read_byte(&JR[i]);
		Config.RxChannelZeroOffset[i] = 3750;
	}
	
	// Monopolar throttle is a special case. Set to -100% or -1000
	Config.RxChannelZeroOffset[THROTTLE] = 2750;
    323e:	8e eb       	ldi	r24, 0xBE	; 190
    3240:	9a e0       	ldi	r25, 0x0A	; 10
    3242:	90 93 8c 07 	sts	0x078C, r25
    3246:	80 93 8b 07 	sts	0x078B, r24
    324a:	e7 e6       	ldi	r30, 0x67	; 103
    324c:	f6 e0       	ldi	r31, 0x06	; 6
    324e:	cb e7       	ldi	r28, 0x7B	; 123
    3250:	d7 e0       	ldi	r29, 0x07	; 7
    3252:	63 e8       	ldi	r22, 0x83	; 131
    3254:	77 e0       	ldi	r23, 0x07	; 7
	}
*/	
	// Preset mixers to safe values
	for (i = 0; i < MAX_OUTPUTS; i++)
	{
		Config.Channel[i].P1n_position	= 50;
    3256:	52 e3       	ldi	r21, 0x32	; 50
		Config.Channel[i].P1_source_a 	= NOMIX;
    3258:	2f e0       	ldi	r18, 0x0F	; 15
		Config.Channel[i].P1_source_b 	= NOMIX;
		Config.Channel[i].P2_source_a 	= NOMIX;
		Config.Channel[i].P2_source_b 	= NOMIX;
		Config.min_travel[i] = -100;
    325a:	4c e9       	ldi	r20, 0x9C	; 156
		Config.max_travel[i] = 100;
    325c:	34 e6       	ldi	r19, 0x64	; 100
    325e:	cf 01       	movw	r24, r30
    3260:	4e 97       	sbiw	r24, 0x1e	; 30
	}
*/	
	// Preset mixers to safe values
	for (i = 0; i < MAX_OUTPUTS; i++)
	{
		Config.Channel[i].P1n_position	= 50;
    3262:	dc 01       	movw	r26, r24
    3264:	5c 93       	st	X, r21
    3266:	48 96       	adiw	r24, 0x18	; 24
		Config.Channel[i].P1_source_a 	= NOMIX;
    3268:	dc 01       	movw	r26, r24
    326a:	2c 93       	st	X, r18
    326c:	04 96       	adiw	r24, 0x04	; 4
		Config.Channel[i].P1_source_b 	= NOMIX;
    326e:	dc 01       	movw	r26, r24
    3270:	2c 93       	st	X, r18
    3272:	02 97       	sbiw	r24, 0x02	; 2
		Config.Channel[i].P2_source_a 	= NOMIX;
    3274:	dc 01       	movw	r26, r24
    3276:	2c 93       	st	X, r18
		Config.Channel[i].P2_source_b 	= NOMIX;
    3278:	20 83       	st	Z, r18
		Config.min_travel[i] = -100;
    327a:	49 93       	st	Y+, r20
		Config.max_travel[i] = 100;
    327c:	84 e6       	ldi	r24, 0x64	; 100
    327e:	db 01       	movw	r26, r22
    3280:	3d 93       	st	X+, r19
    3282:	bd 01       	movw	r22, r26
    3284:	b6 96       	adiw	r30, 0x26	; 38
		Config.Channel[i].P1_Pitch_acc = ON;
		Config.Channel[i].P1_Z_delta_acc = ON;
	}
*/	
	// Preset mixers to safe values
	for (i = 0; i < MAX_OUTPUTS; i++)
    3286:	b7 e0       	ldi	r27, 0x07	; 7
    3288:	e7 39       	cpi	r30, 0x97	; 151
    328a:	fb 07       	cpc	r31, r27
    328c:	41 f7       	brne	.-48     	; 0x325e <Set_EEPROM_Default_Config+0x8c>
		Config.min_travel[i] = -100;
		Config.max_travel[i] = 100;
	}

	// Preset simple mixing for primary channels - all models
	Config.Channel[OUT1].P1_throttle_volume = 100;
    328e:	80 93 4c 06 	sts	0x064C, r24
	Config.Channel[OUT2].P1_aileron_volume = 100;
    3292:	80 93 75 06 	sts	0x0675, r24
	Config.Channel[OUT3].P1_elevator_volume = 100;
    3296:	80 93 9d 06 	sts	0x069D, r24
	Config.Channel[OUT4].P1_rudder_volume = 100;
    329a:	80 93 c5 06 	sts	0x06C5, r24
	
	// Set up profile 1
	Config.FlightMode[P1].Roll_P_mult = 60;			// PID defaults
    329e:	2c e3       	ldi	r18, 0x3C	; 60
    32a0:	20 93 e3 05 	sts	0x05E3, r18
	Config.FlightMode[P1].A_Roll_P_mult = 5;
    32a4:	95 e0       	ldi	r25, 0x05	; 5
    32a6:	90 93 e7 05 	sts	0x05E7, r25
	Config.FlightMode[P1].Pitch_P_mult = 60;
    32aa:	20 93 e9 05 	sts	0x05E9, r18
	Config.FlightMode[P1].A_Pitch_P_mult = 5;
    32ae:	90 93 ed 05 	sts	0x05ED, r25
	Config.FlightMode[P1].Yaw_P_mult = 80;
    32b2:	90 e5       	ldi	r25, 0x50	; 80
    32b4:	90 93 ef 05 	sts	0x05EF, r25
	Config.FlightMode[P1].Roll_I_mult = 40;
    32b8:	28 e2       	ldi	r18, 0x28	; 40
    32ba:	20 93 e4 05 	sts	0x05E4, r18
	Config.FlightMode[P1].Roll_limit = 10;
    32be:	9a e0       	ldi	r25, 0x0A	; 10
    32c0:	90 93 e5 05 	sts	0x05E5, r25
	Config.FlightMode[P1].Pitch_I_mult = 40;
    32c4:	20 93 ea 05 	sts	0x05EA, r18
	Config.FlightMode[P1].Pitch_limit = 10;
    32c8:	90 93 eb 05 	sts	0x05EB, r25
	Config.FlightMode[P1].Roll_Rate = 2;
    32cc:	92 e0       	ldi	r25, 0x02	; 2
    32ce:	90 93 e6 05 	sts	0x05E6, r25
	Config.FlightMode[P1].Pitch_Rate = 2;
    32d2:	90 93 ec 05 	sts	0x05EC, r25
	Config.FlightMode[P1].Yaw_Rate = 1;
    32d6:	21 e0       	ldi	r18, 0x01	; 1
    32d8:	20 93 f2 05 	sts	0x05F2, r18

	// Set up profile 2
	Config.FlightMode[P2].Roll_Rate = 2;
    32dc:	90 93 f8 05 	sts	0x05F8, r25
	Config.FlightMode[P2].Pitch_Rate = 2;
    32e0:	90 93 fe 05 	sts	0x05FE, r25
	Config.FlightMode[P2].Yaw_Rate = 1;
    32e4:	20 93 04 06 	sts	0x0604, r18
	
	// Preset stick volumes
	Config.Channel[OUT1].P2_throttle_volume = 100;
    32e8:	80 93 4d 06 	sts	0x064D, r24
	Config.Channel[OUT2].P2_aileron_volume = 100;
    32ec:	80 93 76 06 	sts	0x0676, r24
	Config.Channel[OUT3].P2_elevator_volume = 100;
    32f0:	80 93 9e 06 	sts	0x069E, r24
	Config.Channel[OUT4].P2_rudder_volume = 100;
    32f4:	80 93 c6 06 	sts	0x06C6, r24

	// Preset basic axis gyros in P2
	Config.Channel[OUT2].P2_Roll_gyro = ON;
    32f8:	20 93 7c 06 	sts	0x067C, r18
	Config.Channel[OUT3].P2_Pitch_gyro = ON;
    32fc:	20 93 a4 06 	sts	0x06A4, r18
	Config.Channel[OUT4].P2_Yaw_gyro = ON;
    3300:	20 93 cc 06 	sts	0x06CC, r18
	Config.Channel[OUT4].P1_Yaw_gyro = ON;
	Config.Channel[OUT4].P2_Yaw_gyro = ON;
#endif
	
	// Set default sensor LPF
	Config.MPU6050_LPF = 2;				// 6 - 2 = 4. MPU6050's internal LPF. Values are 0x06 = 5Hz, (5)10Hz, (4)21Hz*, (3)44Hz, (2)94Hz, (1)184Hz LPF, (0)260Hz
    3304:	90 93 3e 06 	sts	0x063E, r25

	// Preset AccZeroNormZ
	Config.AccZeroNormZ		= 128;
    3308:	80 e8       	ldi	r24, 0x80	; 128
    330a:	90 e0       	ldi	r25, 0x00	; 0
    330c:	90 93 a2 07 	sts	0x07A2, r25
    3310:	80 93 a1 07 	sts	0x07A1, r24

	#ifdef KK2Mini
	Config.Contrast = 30;				// Contrast (KK2 Mini)
	#else
	Config.Contrast = 36;				// Contrast (Everything else)
    3314:	84 e2       	ldi	r24, 0x24	; 36
    3316:	80 93 3a 06 	sts	0x063A, r24
	#endif
}
    331a:	df 91       	pop	r29
    331c:	cf 91       	pop	r28
    331e:	08 95       	ret

00003320 <Initial_EEPROM_Config_Load>:
		eeprom_write_byte(addr, value);
	}
}

bool Initial_EEPROM_Config_Load(void)
{
    3320:	cf 93       	push	r28
    3322:	df 93       	push	r29
    3324:	1f 92       	push	r1
    3326:	cd b7       	in	r28, 0x3d	; 61
    3328:	de b7       	in	r29, 0x3e	; 62
	bool	updated = false;
	
	// Read eeProm data into RAM
	eeprom_read_block((void*)&Config, (const void*)EEPROM_DATA_START_POS, sizeof(CONFIG_STRUCT));
    332a:	48 e0       	ldi	r20, 0x08	; 8
    332c:	52 e0       	ldi	r21, 0x02	; 2
    332e:	60 e0       	ldi	r22, 0x00	; 0
    3330:	70 e0       	ldi	r23, 0x00	; 0
    3332:	81 eb       	ldi	r24, 0xB1	; 177
    3334:	95 e0       	ldi	r25, 0x05	; 5
    3336:	0e 94 44 49 	call	0x9288	; 0x9288 <__eerd_block_m644pa>
	
	// See if we know what to do with the current eeprom data
	// Config.setup holds the magic number from the current EEPROM
	switch(Config.setup)
    333a:	80 91 b1 05 	lds	r24, 0x05B1
    333e:	86 33       	cpi	r24, 0x36	; 54
    3340:	31 f0       	breq	.+12     	; 0x334e <Initial_EEPROM_Config_Load+0x2e>
    3342:	87 33       	cpi	r24, 0x37	; 55
    3344:	51 f0       	breq	.+20     	; 0x335a <Initial_EEPROM_Config_Load+0x3a>
    3346:	85 33       	cpi	r24, 0x35	; 53
    3348:	31 f4       	brne	.+12     	; 0x3356 <Initial_EEPROM_Config_Load+0x36>
	{
		case V1_0_SIGNATURE:				// V1.0 detected
			Update_V1_0_to_V1_1();
    334a:	0e 94 76 16 	call	0x2cec	; 0x2cec <Update_V1_0_to_V1_1>
			// Fall through...

		case V1_1_SIGNATURE:				// V1.1 Beta 7 (or below) detected
			Update_V1_1_to_V1_1_B8();	
    334e:	0e 94 ab 18 	call	0x3156	; 0x3156 <Update_V1_1_to_V1_1_B8>
			updated = true;	
    3352:	81 e0       	ldi	r24, 0x01	; 1
    3354:	03 c0       	rjmp	.+6      	; 0x335c <Initial_EEPROM_Config_Load+0x3c>
			// Fall through...
			break;

		default:							// Unknown solution - restore to factory defaults
			// Load factory defaults
			Set_EEPROM_Default_Config();
    3356:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <Set_EEPROM_Default_Config>
	}
}

bool Initial_EEPROM_Config_Load(void)
{
	bool	updated = false;
    335a:	80 e0       	ldi	r24, 0x00	; 0
			Set_EEPROM_Default_Config();
			break;
	}
	
	// Save back to eeprom	
	Save_Config_to_EEPROM();
    335c:	89 83       	std	Y+1, r24	; 0x01
    335e:	0e 94 6b 16 	call	0x2cd6	; 0x2cd6 <Save_Config_to_EEPROM>
	
	// Return info regarding eeprom structure changes 
	return updated;
}
    3362:	89 81       	ldd	r24, Y+1	; 0x01
    3364:	0f 90       	pop	r0
    3366:	df 91       	pop	r29
    3368:	cf 91       	pop	r28
    336a:	08 95       	ret

0000336c <main>:
//************************************************************
//* Main loop
//************************************************************

int main(void)
{
    336c:	cf 93       	push	r28
    336e:	df 93       	push	r29
    3370:	cd b7       	in	r28, 0x3d	; 61
    3372:	de b7       	in	r29, 0x3e	; 62
    3374:	a1 97       	sbiw	r28, 0x21	; 33
    3376:	0f b6       	in	r0, 0x3f	; 63
    3378:	f8 94       	cli
    337a:	de bf       	out	0x3e, r29	; 62
    337c:	0f be       	out	0x3f, r0	; 63
    337e:	cd bf       	out	0x3d, r28	; 61
	uint8_t ServoFlag = 0;
	uint8_t i = 0;
	int16_t PWM_pulses = 3; 
	uint16_t RC_Interrupts = 0;
	
	init();							// Do all init tasks
    3380:	0e 94 42 29 	call	0x5284	; 0x5284 <init>
	int16_t temp1 = 0;
	uint16_t transition_time = 0;
	uint8_t	old_alarms = 0;
	uint8_t ServoFlag = 0;
	uint8_t i = 0;
	int16_t PWM_pulses = 3; 
    3384:	23 e0       	ldi	r18, 0x03	; 3
    3386:	30 e0       	ldi	r19, 0x00	; 0
    3388:	39 a3       	std	Y+33, r19	; 0x21
    338a:	28 a3       	std	Y+32, r18	; 0x20
	uint8_t Menu_mode = STATUS_TIMEOUT;
	int8_t	old_flight = 3;			// Old flight profile
	int8_t	old_trans_mode = 0;		// Old transition mode
	int16_t temp1 = 0;
	uint16_t transition_time = 0;
	uint8_t	old_alarms = 0;
    338c:	1e 8e       	std	Y+30, r1	; 0x1e
	uint16_t InterruptCounter = 0;
	uint8_t	Disarm_seconds = 0;
	uint8_t Status_seconds = 0;
	uint8_t Menu_mode = STATUS_TIMEOUT;
	int8_t	old_flight = 3;			// Old flight profile
	int8_t	old_trans_mode = 0;		// Old transition mode
    338e:	1d 8e       	std	Y+29, r1	; 0x1d
	// Locals
	uint16_t InterruptCounter = 0;
	uint8_t	Disarm_seconds = 0;
	uint8_t Status_seconds = 0;
	uint8_t Menu_mode = STATUS_TIMEOUT;
	int8_t	old_flight = 3;			// Old flight profile
    3390:	33 e0       	ldi	r19, 0x03	; 3
    3392:	39 83       	std	Y+1, r19	; 0x01

	// Locals
	uint16_t InterruptCounter = 0;
	uint8_t	Disarm_seconds = 0;
	uint8_t Status_seconds = 0;
	uint8_t Menu_mode = STATUS_TIMEOUT;
    3394:	58 e0       	ldi	r21, 0x08	; 8
    3396:	b5 2e       	mov	r11, r21
	uint8_t ServoRate_TCNT2 = 0;

	// Locals
	uint16_t InterruptCounter = 0;
	uint8_t	Disarm_seconds = 0;
	uint8_t Status_seconds = 0;
    3398:	1b 86       	std	Y+11, r1	; 0x0b
	uint8_t Servo_TCNT2 = 0;
	uint8_t ServoRate_TCNT2 = 0;

	// Locals
	uint16_t InterruptCounter = 0;
	uint8_t	Disarm_seconds = 0;
    339a:	1b 82       	std	Y+3, r1	; 0x03
	uint8_t Ticker_TCNT2 = 0;
	uint8_t Servo_TCNT2 = 0;
	uint8_t ServoRate_TCNT2 = 0;

	// Locals
	uint16_t InterruptCounter = 0;
    339c:	1a 86       	std	Y+10, r1	; 0x0a
    339e:	19 86       	std	Y+9, r1	; 0x09
	uint8_t Refresh_TCNT2 = 0;
	uint8_t Disarm_TCNT2 = 0;
	uint8_t Arm_TCNT2 = 0;
	uint8_t Ticker_TCNT2 = 0;
	uint8_t Servo_TCNT2 = 0;
	uint8_t ServoRate_TCNT2 = 0;
    33a0:	1c 8e       	std	Y+28, r1	; 0x1c
	uint8_t Status_TCNT2 = 0;
	uint8_t Refresh_TCNT2 = 0;
	uint8_t Disarm_TCNT2 = 0;
	uint8_t Arm_TCNT2 = 0;
	uint8_t Ticker_TCNT2 = 0;
	uint8_t Servo_TCNT2 = 0;
    33a2:	1b 8e       	std	Y+27, r1	; 0x1b
	uint8_t Transition_TCNT2 = 0;
	uint8_t Status_TCNT2 = 0;
	uint8_t Refresh_TCNT2 = 0;
	uint8_t Disarm_TCNT2 = 0;
	uint8_t Arm_TCNT2 = 0;
	uint8_t Ticker_TCNT2 = 0;
    33a4:	1a 8e       	std	Y+26, r1	; 0x1a
	uint16_t RC_Rate_TCNT1 = 0;
	uint8_t Transition_TCNT2 = 0;
	uint8_t Status_TCNT2 = 0;
	uint8_t Refresh_TCNT2 = 0;
	uint8_t Disarm_TCNT2 = 0;
	uint8_t Arm_TCNT2 = 0;
    33a6:	19 8e       	std	Y+25, r1	; 0x19
	// Timer incrementers
	uint16_t RC_Rate_TCNT1 = 0;
	uint8_t Transition_TCNT2 = 0;
	uint8_t Status_TCNT2 = 0;
	uint8_t Refresh_TCNT2 = 0;
	uint8_t Disarm_TCNT2 = 0;
    33a8:	18 8e       	std	Y+24, r1	; 0x18

	// Timer incrementers
	uint16_t RC_Rate_TCNT1 = 0;
	uint8_t Transition_TCNT2 = 0;
	uint8_t Status_TCNT2 = 0;
	uint8_t Refresh_TCNT2 = 0;
    33aa:	1f 8a       	std	Y+23, r1	; 0x17
	uint16_t ticker_16 = 0;

	// Timer incrementers
	uint16_t RC_Rate_TCNT1 = 0;
	uint8_t Transition_TCNT2 = 0;
	uint8_t Status_TCNT2 = 0;
    33ac:	1e 8a       	std	Y+22, r1	; 0x16
	uint16_t Save_TCNT1 = 0;
	uint16_t ticker_16 = 0;

	// Timer incrementers
	uint16_t RC_Rate_TCNT1 = 0;
	uint8_t Transition_TCNT2 = 0;
    33ae:	1d 8a       	std	Y+21, r1	; 0x15
	uint16_t Disarm_timer = 0;
	uint16_t Save_TCNT1 = 0;
	uint16_t ticker_16 = 0;

	// Timer incrementers
	uint16_t RC_Rate_TCNT1 = 0;
    33b0:	1f 86       	std	Y+15, r1	; 0x0f
    33b2:	1e 86       	std	Y+14, r1	; 0x0e
	uint16_t UpdateStatus_timer = 0;
	uint16_t Ticker_Count = 0;
	uint16_t RC_Timeout = 0;
	uint16_t Servo_Rate = 0;
	uint16_t Transition_timeout = 0;
	uint16_t Disarm_timer = 0;
    33b4:	00 e0       	ldi	r16, 0x00	; 0
    33b6:	10 e0       	ldi	r17, 0x00	; 0
	uint16_t Status_timeout = 0;
	uint16_t UpdateStatus_timer = 0;
	uint16_t Ticker_Count = 0;
	uint16_t RC_Timeout = 0;
	uint16_t Servo_Rate = 0;
	uint16_t Transition_timeout = 0;
    33b8:	1e 82       	std	Y+6, r1	; 0x06
    33ba:	1d 82       	std	Y+5, r1	; 0x05
	// 16-bit timers
	uint16_t Status_timeout = 0;
	uint16_t UpdateStatus_timer = 0;
	uint16_t Ticker_Count = 0;
	uint16_t RC_Timeout = 0;
	uint16_t Servo_Rate = 0;
    33bc:	41 2c       	mov	r4, r1
    33be:	51 2c       	mov	r5, r1

	// 16-bit timers
	uint16_t Status_timeout = 0;
	uint16_t UpdateStatus_timer = 0;
	uint16_t Ticker_Count = 0;
	uint16_t RC_Timeout = 0;
    33c0:	61 2c       	mov	r6, r1
    33c2:	71 2c       	mov	r7, r1
	//uint32_t RC_Rate_Timer = 0;

	// 16-bit timers
	uint16_t Status_timeout = 0;
	uint16_t UpdateStatus_timer = 0;
	uint16_t Ticker_Count = 0;
    33c4:	1b 8a       	std	Y+19, r1	; 0x13
    33c6:	1a 8a       	std	Y+18, r1	; 0x12
	uint32_t Arm_timer = 0;
	//uint32_t RC_Rate_Timer = 0;

	// 16-bit timers
	uint16_t Status_timeout = 0;
	uint16_t UpdateStatus_timer = 0;
    33c8:	1d 86       	std	Y+13, r1	; 0x0d
    33ca:	1c 86       	std	Y+12, r1	; 0x0c
	// 32-bit timers
	uint32_t Arm_timer = 0;
	//uint32_t RC_Rate_Timer = 0;

	// 16-bit timers
	uint16_t Status_timeout = 0;
    33cc:	21 2c       	mov	r2, r1
    33ce:	31 2c       	mov	r3, r1
	bool ResampleRCRate = false;
	bool PWMOverride = false;
	bool Interrupted_Clone = false;

	// 32-bit timers
	uint32_t Arm_timer = 0;
    33d0:	c1 2c       	mov	r12, r1
    33d2:	d1 2c       	mov	r13, r1
    33d4:	76 01       	movw	r14, r12
	bool PWMBlocked = false;
	bool RCInterruptsON = false;
	bool ServoTick = false;
	bool ResampleRCRate = false;
	bool PWMOverride = false;
	bool Interrupted_Clone = false;
    33d6:	a1 2c       	mov	r10, r1
	bool TransitionUpdated = false;
	bool RCrateMeasured = false;
	bool PWMBlocked = false;
	bool RCInterruptsON = false;
	bool ServoTick = false;
	bool ResampleRCRate = false;
    33d8:	19 8a       	std	Y+17, r1	; 0x11
	// Flags
	bool TransitionUpdated = false;
	bool RCrateMeasured = false;
	bool PWMBlocked = false;
	bool RCInterruptsON = false;
	bool ServoTick = false;
    33da:	1a 82       	std	Y+2, r1	; 0x02
{
	// Flags
	bool TransitionUpdated = false;
	bool RCrateMeasured = false;
	bool PWMBlocked = false;
	bool RCInterruptsON = false;
    33dc:	18 8a       	std	Y+16, r1	; 0x10
int main(void)
{
	// Flags
	bool TransitionUpdated = false;
	bool RCrateMeasured = false;
	bool PWMBlocked = false;
    33de:	1c 82       	std	Y+4, r1	; 0x04

int main(void)
{
	// Flags
	bool TransitionUpdated = false;
	bool RCrateMeasured = false;
    33e0:	91 2c       	mov	r9, r1

	// Main loop
	while (1)
	{
		// Increment the loop counter
		LoopCount++;
    33e2:	80 91 1a 05 	lds	r24, 0x051A
    33e6:	8f 5f       	subi	r24, 0xFF	; 255
    33e8:	80 93 1a 05 	sts	0x051A, r24
		//* Check for interruption of PWM generation
		//* The "JitterFlag" flag was reset just before PWM generation.
		//* Being set here means that an interrupt has occurred.
		//************************************************************

		if (JitterFlag == true)
    33ec:	80 91 e5 07 	lds	r24, 0x07E5
    33f0:	88 23       	and	r24, r24
    33f2:	31 f0       	breq	.+12     	; 0x3400 <main+0x94>
		{
			InterruptCounter++;
    33f4:	49 85       	ldd	r20, Y+9	; 0x09
    33f6:	5a 85       	ldd	r21, Y+10	; 0x0a
    33f8:	4f 5f       	subi	r20, 0xFF	; 255
    33fa:	5f 4f       	sbci	r21, 0xFF	; 255
    33fc:	5a 87       	std	Y+10, r21	; 0x0a
    33fe:	49 87       	std	Y+9, r20	; 0x09
		//* State machine for switching between screens safely
		//************************************************************

		PWMOverride = false; // Assume PWM is OK until through the state machine

		switch(Menu_mode) 
    3400:	8b 2d       	mov	r24, r11
    3402:	90 e0       	ldi	r25, 0x00	; 0
    3404:	8b 30       	cpi	r24, 0x0B	; 11
    3406:	91 05       	cpc	r25, r1
    3408:	08 f0       	brcs	.+2      	; 0x340c <main+0xa0>
    340a:	7b c0       	rjmp	.+246    	; 0x3502 <main+0x196>
    340c:	fc 01       	movw	r30, r24
    340e:	e2 5c       	subi	r30, 0xC2	; 194
    3410:	ff 4f       	sbci	r31, 0xFF	; 255
    3412:	0c 94 cd 48 	jmp	0x919a	; 0x919a <__tablejump2__>
		{
			// In IDLE mode, the text "Press for status" is displayed ONCE.
			// If a button is pressed the mode changes to STATUS
			case IDLE:
				if((PINB & 0xf0) != 0xf0)
    3416:	83 b1       	in	r24, 0x03	; 3
    3418:	80 7f       	andi	r24, 0xF0	; 240
    341a:	80 3f       	cpi	r24, 0xF0	; 240
    341c:	49 f0       	breq	.+18     	; 0x3430 <main+0xc4>
					PWMOverride = false;
					
					// When not in idle mode, enable Timer0 interrupts as loop rate 
					// is slow and we need TMR0 to fully measure it.
					// This may cause PWM generation interruption
					TIMSK0 |= (1 << TOIE0);	
    341e:	80 91 6e 00 	lds	r24, 0x006E
    3422:	81 60       	ori	r24, 0x01	; 1
    3424:	80 93 6e 00 	sts	0x006E, r24
			// In IDLE mode, the text "Press for status" is displayed ONCE.
			// If a button is pressed the mode changes to STATUS
			case IDLE:
				if((PINB & 0xf0) != 0xf0)
				{
					Menu_mode = PRESTATUS;
    3428:	43 e0       	ldi	r20, 0x03	; 3
    342a:	b4 2e       	mov	r11, r20
					// Reset the status screen timeout
					Status_seconds = 0;
    342c:	1b 86       	std	Y+11, r1	; 0x0b
    342e:	69 c0       	rjmp	.+210    	; 0x3502 <main+0x196>
				}
				// Idle mode - fast loop rate so don't need TMR0.
				// We don't want TMR0 to interrupt PWM generation.
				else
				{
					TIMSK0 = 0; 		// Disable Timer0 interrupts
    3430:	10 92 6e 00 	sts	0x006E, r1
					TIFR0 = 1;			// Clear interrupt flag
    3434:	81 e0       	ldi	r24, 0x01	; 1
    3436:	85 bb       	out	0x15, r24	; 21
    3438:	64 c0       	rjmp	.+200    	; 0x3502 <main+0x196>
			// Waiting to safely enter Status screen
			// PWM activity must stop or have never started
			// or even just about to start.
			case PRESTATUS:
				// If interrupted, or if currently "No signal"
				if (Interrupted || Interrupted_Clone || Overdue)
    343a:	80 91 ca 07 	lds	r24, 0x07CA
    343e:	81 11       	cpse	r24, r1
    3440:	51 c0       	rjmp	.+162    	; 0x34e4 <main+0x178>
    3442:	a1 10       	cpse	r10, r1
    3444:	4f c0       	rjmp	.+158    	; 0x34e4 <main+0x178>
    3446:	80 91 1b 05 	lds	r24, 0x051B
    344a:	88 23       	and	r24, r24
    344c:	09 f4       	brne	.+2      	; 0x3450 <main+0xe4>
    344e:	59 c0       	rjmp	.+178    	; 0x3502 <main+0x196>
				{
					// Ready to move on
					Menu_mode = STATUS;
    3450:	f4 e0       	ldi	r31, 0x04	; 4
    3452:	bf 2e       	mov	r11, r31
    3454:	58 c0       	rjmp	.+176    	; 0x3506 <main+0x19a>
			case STATUS:
				// Reset the status screen period
				UpdateStatus_timer = 0;

				// Update status screen
				Display_status();
    3456:	0e 94 64 13 	call	0x26c8	; 0x26c8 <Display_status>
				
				// Prevent PWM output
				PWMOverride = true;

				// Wait for timeout
				Menu_mode = WAITING_TIMEOUT_BD;
    345a:	36 e0       	ldi	r19, 0x06	; 6
    345c:	b3 2e       	mov	r11, r19
				break;

			// Status screen first display
			case STATUS:
				// Reset the status screen period
				UpdateStatus_timer = 0;
    345e:	1d 86       	std	Y+13, r1	; 0x0d
    3460:	1c 86       	std	Y+12, r1	; 0x0c
    3462:	51 c0       	rjmp	.+162    	; 0x3506 <main+0x19a>

			// Status screen up, but button still down ;)
			// This is designed to stop the menu appearing instead of the status screen
			// as it will stay here until the button is released
			case WAITING_TIMEOUT_BD:
				if(BUTTON1 == 0)
    3464:	1f 9b       	sbis	0x03, 7	; 3
    3466:	4d c0       	rjmp	.+154    	; 0x3502 <main+0x196>
				{
					Menu_mode = WAITING_TIMEOUT_BD;
				}
				else
				{
					Menu_mode = WAITING_TIMEOUT;
    3468:	e5 e0       	ldi	r30, 0x05	; 5
    346a:	be 2e       	mov	r11, r30
    346c:	4a c0       	rjmp	.+148    	; 0x3502 <main+0x196>
			// Status screen up, waiting for timeout or action
			// but button is back up
			case WAITING_TIMEOUT:
				// In status screen, change back to idle after timing out
				//if (Status_seconds >= 3)
				if (Status_seconds >= 10) // debug
    346e:	2b 85       	ldd	r18, Y+11	; 0x0b
    3470:	2a 30       	cpi	r18, 0x0A	; 10
    3472:	e0 f5       	brcc	.+120    	; 0x34ec <main+0x180>
					// Enable PWM output
					PWMOverride = false;
				}

				// Jump to menu if button pressed
				else if(BUTTON1 == 0)
    3474:	1f 9b       	sbis	0x03, 7	; 3
    3476:	3d c0       	rjmp	.+122    	; 0x34f2 <main+0x186>
					// Prevent PWM output
					PWMOverride = true;
				}

				// Update status screen while waiting to time out
				else if (UpdateStatus_timer > (SECOND_TIMER >> 2))
    3478:	4c 85       	ldd	r20, Y+12	; 0x0c
    347a:	5d 85       	ldd	r21, Y+13	; 0x0d
    347c:	43 31       	cpi	r20, 0x13	; 19
    347e:	53 41       	sbci	r21, 0x13	; 19
    3480:	08 f4       	brcc	.+2      	; 0x3484 <main+0x118>
    3482:	3f c0       	rjmp	.+126    	; 0x3502 <main+0x196>
				{
					Menu_mode = PRESTATUS;
    3484:	23 e0       	ldi	r18, 0x03	; 3
    3486:	b2 2e       	mov	r11, r18
    3488:	3e c0       	rjmp	.+124    	; 0x3506 <main+0x19a>
				break;

			// Attempting to leave Status gracefully while PWM stopped.
			case PRESTATUS_TIMEOUT:
				// If interrupted, or if currently "No signal"
				if (Interrupted || Interrupted_Clone || Overdue)
    348a:	80 91 ca 07 	lds	r24, 0x07CA
    348e:	81 11       	cpse	r24, r1
    3490:	33 c0       	rjmp	.+102    	; 0x34f8 <main+0x18c>
    3492:	a1 10       	cpse	r10, r1
    3494:	31 c0       	rjmp	.+98     	; 0x34f8 <main+0x18c>
    3496:	80 91 1b 05 	lds	r24, 0x051B
    349a:	88 23       	and	r24, r24
    349c:	a1 f1       	breq	.+104    	; 0x3506 <main+0x19a>
				{
					// Switch to STATUS_TIMEOUT mode
					Menu_mode = STATUS_TIMEOUT;
    349e:	98 e0       	ldi	r25, 0x08	; 8
    34a0:	b9 2e       	mov	r11, r25
    34a2:	2f c0       	rjmp	.+94     	; 0x3502 <main+0x196>
				break;

			// In STATUS_TIMEOUT mode, the idle screen is displayed and the mode changed to IDLE
			case STATUS_TIMEOUT:
				// Pop up the Idle screen
				idle_screen();
    34a4:	0e 94 5f 22 	call	0x44be	; 0x44be <idle_screen>

				// Switch to IDLE mode
				Menu_mode = POSTSTATUS_TIMEOUT;
    34a8:	89 e0       	ldi	r24, 0x09	; 9
    34aa:	b8 2e       	mov	r11, r24
    34ac:	2c c0       	rjmp	.+88     	; 0x3506 <main+0x19a>
				break;

			// In POSTSTATUS_TIMEOUT mode, we wait for a PWM cycle to complete
			case POSTSTATUS_TIMEOUT:
				// If interrupted, or if currently "No signal"
				if (Interrupted || Interrupted_Clone || Overdue)
    34ae:	80 91 ca 07 	lds	r24, 0x07CA
    34b2:	81 11       	cpse	r24, r1
    34b4:	24 c0       	rjmp	.+72     	; 0x34fe <main+0x192>
    34b6:	a1 10       	cpse	r10, r1
    34b8:	22 c0       	rjmp	.+68     	; 0x34fe <main+0x192>
    34ba:	80 91 1b 05 	lds	r24, 0x051B
    34be:	88 23       	and	r24, r24
    34c0:	11 f1       	breq	.+68     	; 0x3506 <main+0x19a>
				{
					// Switch to IDLE mode
					Menu_mode = IDLE;
    34c2:	b1 2c       	mov	r11, r1
    34c4:	1e c0       	rjmp	.+60     	; 0x3502 <main+0x196>
				
				break;

			// In MENU mode, 
			case MENU:
				LVA = 0;	// Make sure buzzer is off :)
    34c6:	29 98       	cbi	0x05, 1	; 5
				// Disarm the FC
				General_error |= (1 << DISARMED);
    34c8:	80 91 22 05 	lds	r24, 0x0522
    34cc:	84 60       	ori	r24, 0x04	; 4
    34ce:	80 93 22 05 	sts	0x0522, r24
				LED1 = 0;
    34d2:	2b 98       	cbi	0x05, 3	; 5
				// Start the menu system
				menu_main();
    34d4:	0e 94 6b 33 	call	0x66d6	; 0x66d6 <menu_main>
				// Switch back to status screen when leaving menu
				Menu_mode = STATUS;
				// Reset timeout once back in status screen
				Status_seconds = 0;
				// Reset IMU on return from menu
				reset_IMU();
    34d8:	0e 94 f9 28 	call	0x51f2	; 0x51f2 <reset_IMU>
				General_error |= (1 << DISARMED);
				LED1 = 0;
				// Start the menu system
				menu_main();
				// Switch back to status screen when leaving menu
				Menu_mode = STATUS;
    34dc:	b4 e0       	ldi	r27, 0x04	; 4
    34de:	bb 2e       	mov	r11, r27
				// Reset timeout once back in status screen
				Status_seconds = 0;
    34e0:	1b 86       	std	Y+11, r1	; 0x0b
    34e2:	11 c0       	rjmp	.+34     	; 0x3506 <main+0x19a>
			case PRESTATUS:
				// If interrupted, or if currently "No signal"
				if (Interrupted || Interrupted_Clone || Overdue)
				{
					// Ready to move on
					Menu_mode = STATUS;
    34e4:	a4 e0       	ldi	r26, 0x04	; 4
    34e6:	ba 2e       	mov	r11, r26
							
					// Prevent PWM output
					PWMOverride = true;		
					
					// Clear Interrupted_Clone
					Interrupted_Clone = false;
    34e8:	a1 2c       	mov	r10, r1
    34ea:	0d c0       	rjmp	.+26     	; 0x3506 <main+0x19a>
			case WAITING_TIMEOUT:
				// In status screen, change back to idle after timing out
				//if (Status_seconds >= 3)
				if (Status_seconds >= 10) // debug
				{
					Menu_mode = PRESTATUS_TIMEOUT;
    34ec:	77 e0       	ldi	r23, 0x07	; 7
    34ee:	b7 2e       	mov	r11, r23
    34f0:	08 c0       	rjmp	.+16     	; 0x3502 <main+0x196>
				}

				// Jump to menu if button pressed
				else if(BUTTON1 == 0)
				{
					Menu_mode = MENU;
    34f2:	6a e0       	ldi	r22, 0x0A	; 10
    34f4:	b6 2e       	mov	r11, r22
    34f6:	07 c0       	rjmp	.+14     	; 0x3506 <main+0x19a>
			case PRESTATUS_TIMEOUT:
				// If interrupted, or if currently "No signal"
				if (Interrupted || Interrupted_Clone || Overdue)
				{
					// Switch to STATUS_TIMEOUT mode
					Menu_mode = STATUS_TIMEOUT;
    34f8:	58 e0       	ldi	r21, 0x08	; 8
    34fa:	b5 2e       	mov	r11, r21
    34fc:	01 c0       	rjmp	.+2      	; 0x3500 <main+0x194>
			case POSTSTATUS_TIMEOUT:
				// If interrupted, or if currently "No signal"
				if (Interrupted || Interrupted_Clone || Overdue)
				{
					// Switch to IDLE mode
					Menu_mode = IDLE;
    34fe:	b1 2c       	mov	r11, r1
					
					// Prevent PWM output
					PWMOverride = false;
					
					// Clear Interrupted_Clone
					Interrupted_Clone = false;
    3500:	a1 2c       	mov	r10, r1
				{
					// Switch to IDLE mode
					Menu_mode = IDLE;
					
					// Prevent PWM output
					PWMOverride = false;
    3502:	81 2c       	mov	r8, r1
    3504:	02 c0       	rjmp	.+4      	; 0x350a <main+0x19e>
					Interrupted_Clone = false;
				}
				else
				{
					// Enable PWM output
					PWMOverride = true;			
    3506:	88 24       	eor	r8, r8
    3508:	83 94       	inc	r8
		//************************************************************
		//* Status menu timing
		//************************************************************

		// Count elapsed seconds
		if (Status_timeout > SECOND_TIMER)
    350a:	9c e4       	ldi	r25, 0x4C	; 76
    350c:	29 16       	cp	r2, r25
    350e:	39 06       	cpc	r3, r25
    3510:	98 f0       	brcs	.+38     	; 0x3538 <main+0x1cc>
		{
			Status_seconds++;
    3512:	2b 85       	ldd	r18, Y+11	; 0x0b
    3514:	2f 5f       	subi	r18, 0xFF	; 255
    3516:	2b 87       	std	Y+11, r18	; 0x0b
			Status_timeout = 0;

			// Update the interrupt count each second
			InterruptCount = InterruptCounter;
    3518:	49 85       	ldd	r20, Y+9	; 0x09
    351a:	5a 85       	ldd	r21, Y+10	; 0x0a
    351c:	50 93 1f 05 	sts	0x051F, r21
    3520:	40 93 1e 05 	sts	0x051E, r20
			InterruptCounter = 0;
			
			// Re-measure the frame rate in FAST mode every second
			if (Config.Servo_rate == FAST)
    3524:	80 91 db 05 	lds	r24, 0x05DB
			Status_seconds++;
			Status_timeout = 0;

			// Update the interrupt count each second
			InterruptCount = InterruptCounter;
			InterruptCounter = 0;
    3528:	1a 86       	std	Y+10, r1	; 0x0a
    352a:	19 86       	std	Y+9, r1	; 0x09

		// Count elapsed seconds
		if (Status_timeout > SECOND_TIMER)
		{
			Status_seconds++;
			Status_timeout = 0;
    352c:	21 2c       	mov	r2, r1
    352e:	31 2c       	mov	r3, r1
			// Update the interrupt count each second
			InterruptCount = InterruptCounter;
			InterruptCounter = 0;
			
			// Re-measure the frame rate in FAST mode every second
			if (Config.Servo_rate == FAST)
    3530:	82 30       	cpi	r24, 0x02	; 2
    3532:	11 f4       	brne	.+4      	; 0x3538 <main+0x1cc>
			{
				ResampleRCRate = true;
    3534:	21 e0       	ldi	r18, 0x01	; 1
    3536:	29 8b       	std	Y+17, r18	; 0x11
		//* System ticker - based on TCNT2 (19.531kHz)
		//* 
		//* ((Ticker_Count >> 8) &8) 	= 4.77Hz (Disarm and LVA alarms)
		//************************************************************

		if ((Ticker_Count >> 8) &8) 
    3538:	4a 89       	ldd	r20, Y+18	; 0x12
    353a:	5b 89       	ldd	r21, Y+19	; 0x13
		{
			Alarm_flags |= (1 << BUZZER_ON);	// 4.77Hz beep
    353c:	80 91 20 05 	lds	r24, 0x0520
		//* System ticker - based on TCNT2 (19.531kHz)
		//* 
		//* ((Ticker_Count >> 8) &8) 	= 4.77Hz (Disarm and LVA alarms)
		//************************************************************

		if ((Ticker_Count >> 8) &8) 
    3540:	53 ff       	sbrs	r21, 3
    3542:	02 c0       	rjmp	.+4      	; 0x3548 <main+0x1dc>
		{
			Alarm_flags |= (1 << BUZZER_ON);	// 4.77Hz beep
    3544:	80 61       	ori	r24, 0x10	; 16
    3546:	01 c0       	rjmp	.+2      	; 0x354a <main+0x1de>
		}
		else 
		{
			Alarm_flags &= ~(1 << BUZZER_ON);
    3548:	8f 7e       	andi	r24, 0xEF	; 239
    354a:	80 93 20 05 	sts	0x0520, r24
		//************************************************************
		//* Alarms
		//************************************************************

		// If RC signal is overdue, signal RX error message and disarm
		if (Overdue)
    354e:	80 91 1b 05 	lds	r24, 0x051B
    3552:	88 23       	and	r24, r24
    3554:	a1 f0       	breq	.+40     	; 0x357e <main+0x212>
		{
			General_error |= (1 << NO_SIGNAL);		// Set NO_SIGNAL bit
    3556:	80 91 22 05 	lds	r24, 0x0522
    355a:	82 60       	ori	r24, 0x02	; 2
    355c:	80 93 22 05 	sts	0x0522, r24
			
			// If FC is set to "armable" and is currently armed, disarm the FC
			if ((Config.ArmMode == ARMABLE) && ((General_error & (1 << DISARMED)) == 0))
    3560:	80 91 3b 06 	lds	r24, 0x063B
    3564:	81 30       	cpi	r24, 0x01	; 1
    3566:	81 f4       	brne	.+32     	; 0x3588 <main+0x21c>
    3568:	80 91 22 05 	lds	r24, 0x0522
    356c:	82 fd       	sbrc	r24, 2
    356e:	0c c0       	rjmp	.+24     	; 0x3588 <main+0x21c>
			{
				General_error |= (1 << DISARMED);	// Set flags to disarmed
    3570:	80 91 22 05 	lds	r24, 0x0522
    3574:	84 60       	ori	r24, 0x04	; 4
    3576:	80 93 22 05 	sts	0x0522, r24
				LED1 = 0;							// Signal that FC is now disarmed
    357a:	2b 98       	cbi	0x05, 3	; 5
    357c:	05 c0       	rjmp	.+10     	; 0x3588 <main+0x21c>
			}
		}
		else
		{
			General_error &= ~(1 << NO_SIGNAL);	// Clear NO_SIGNAL bit
    357e:	80 91 22 05 	lds	r24, 0x0522
    3582:	8d 7f       	andi	r24, 0xFD	; 253
    3584:	80 93 22 05 	sts	0x0522, r24
		}

		// Beep buzzer if Vbat lower than trigger		
		if (GetVbat() < Config.PowerTriggerActual)
    3588:	0e 94 2a 46 	call	0x8c54	; 0x8c54 <GetVbat>
    358c:	20 91 37 06 	lds	r18, 0x0637
    3590:	30 91 38 06 	lds	r19, 0x0638
    3594:	82 17       	cp	r24, r18
    3596:	93 07       	cpc	r25, r19
    3598:	20 f4       	brcc	.+8      	; 0x35a2 <main+0x236>
		{
			General_error |= (1 << LVA_ALARM);	// Set LVA_Alarm flag
    359a:	80 91 22 05 	lds	r24, 0x0522
    359e:	88 60       	ori	r24, 0x08	; 8
    35a0:	03 c0       	rjmp	.+6      	; 0x35a8 <main+0x23c>
		}
		else 
		{
			General_error &= ~(1 << LVA_ALARM);	// Clear LVA_Alarm flag
    35a2:	80 91 22 05 	lds	r24, 0x0522
    35a6:	87 7f       	andi	r24, 0xF7	; 247
    35a8:	80 93 22 05 	sts	0x0522, r24
		}

		// Turn on buzzer if in alarm state (BUZZER_ON is oscillating)
		if	(
			 (
				(General_error & (1 << LVA_ALARM)) ||		// Low battery
    35ac:	80 91 22 05 	lds	r24, 0x0522
		{
			General_error &= ~(1 << LVA_ALARM);	// Clear LVA_Alarm flag
		}

		// Turn on buzzer if in alarm state (BUZZER_ON is oscillating)
		if	(
    35b0:	83 fd       	sbrc	r24, 3
    35b2:	08 c0       	rjmp	.+16     	; 0x35c4 <main+0x258>
			 (
				(General_error & (1 << LVA_ALARM)) ||		// Low battery
				(General_error & (1 << NO_SIGNAL)) ||		// No signal
    35b4:	80 91 22 05 	lds	r24, 0x0522
		}

		// Turn on buzzer if in alarm state (BUZZER_ON is oscillating)
		if	(
			 (
				(General_error & (1 << LVA_ALARM)) ||		// Low battery
    35b8:	81 fd       	sbrc	r24, 1
    35ba:	04 c0       	rjmp	.+8      	; 0x35c4 <main+0x258>
				(General_error & (1 << NO_SIGNAL)) ||		// No signal
				(General_error & (1 << THROTTLE_HIGH))		// Throttle high
    35bc:	80 91 22 05 	lds	r24, 0x0522

		// Turn on buzzer if in alarm state (BUZZER_ON is oscillating)
		if	(
			 (
				(General_error & (1 << LVA_ALARM)) ||		// Low battery
				(General_error & (1 << NO_SIGNAL)) ||		// No signal
    35c0:	80 ff       	sbrs	r24, 0
    35c2:	06 c0       	rjmp	.+12     	; 0x35d0 <main+0x264>
				(General_error & (1 << THROTTLE_HIGH))		// Throttle high
			 ) && 
			  (Alarm_flags & (1 << BUZZER_ON))
    35c4:	80 91 20 05 	lds	r24, 0x0520
		if	(
			 (
				(General_error & (1 << LVA_ALARM)) ||		// Low battery
				(General_error & (1 << NO_SIGNAL)) ||		// No signal
				(General_error & (1 << THROTTLE_HIGH))		// Throttle high
			 ) && 
    35c8:	84 ff       	sbrs	r24, 4
    35ca:	02 c0       	rjmp	.+4      	; 0x35d0 <main+0x264>
			  (Alarm_flags & (1 << BUZZER_ON))
			) 
		{
			LVA = 1;
    35cc:	29 9a       	sbi	0x05, 1	; 5
    35ce:	01 c0       	rjmp	.+2      	; 0x35d2 <main+0x266>
		}
		else 
		{
			LVA = 0;
    35d0:	29 98       	cbi	0x05, 1	; 5

		//************************************************************
		//* Arm/disarm handling
		//************************************************************

		if (Config.ArmMode == ARMABLE)
    35d2:	80 91 3b 06 	lds	r24, 0x063B
    35d6:	81 30       	cpi	r24, 0x01	; 1
    35d8:	09 f0       	breq	.+2      	; 0x35dc <main+0x270>
    35da:	8d c0       	rjmp	.+282    	; 0x36f6 <main+0x38a>
			// Manual arm/disarm

			// If sticks not at extremes, reset manual arm/disarm timer
			// Sticks down and centered = armed. Down and outside = disarmed
			if (
				((-ARM_TIMER_RESET_1 < RCinputs[AILERON]) && (RCinputs[AILERON] < ARM_TIMER_RESET_1)) ||
    35dc:	80 91 2d 08 	lds	r24, 0x082D
    35e0:	90 91 2e 08 	lds	r25, 0x082E
		{
			// Manual arm/disarm

			// If sticks not at extremes, reset manual arm/disarm timer
			// Sticks down and centered = armed. Down and outside = disarmed
			if (
    35e4:	81 34       	cpi	r24, 0x41	; 65
    35e6:	9c 4f       	sbci	r25, 0xFC	; 252
    35e8:	44 f0       	brlt	.+16     	; 0x35fa <main+0x28e>
				((-ARM_TIMER_RESET_1 < RCinputs[AILERON]) && (RCinputs[AILERON] < ARM_TIMER_RESET_1)) ||
    35ea:	80 91 2d 08 	lds	r24, 0x082D
    35ee:	90 91 2e 08 	lds	r25, 0x082E
    35f2:	80 3c       	cpi	r24, 0xC0	; 192
    35f4:	93 40       	sbci	r25, 0x03	; 3
    35f6:	0c f4       	brge	.+2      	; 0x35fa <main+0x28e>
    35f8:	4f c0       	rjmp	.+158    	; 0x3698 <main+0x32c>
				((-ARM_TIMER_RESET_1 < RCinputs[ELEVATOR]) && (RCinputs[ELEVATOR] < ARM_TIMER_RESET_1)) ||
    35fa:	80 91 2f 08 	lds	r24, 0x082F
    35fe:	90 91 30 08 	lds	r25, 0x0830
			// Manual arm/disarm

			// If sticks not at extremes, reset manual arm/disarm timer
			// Sticks down and centered = armed. Down and outside = disarmed
			if (
				((-ARM_TIMER_RESET_1 < RCinputs[AILERON]) && (RCinputs[AILERON] < ARM_TIMER_RESET_1)) ||
    3602:	81 34       	cpi	r24, 0x41	; 65
    3604:	9c 4f       	sbci	r25, 0xFC	; 252
    3606:	44 f0       	brlt	.+16     	; 0x3618 <main+0x2ac>
				((-ARM_TIMER_RESET_1 < RCinputs[ELEVATOR]) && (RCinputs[ELEVATOR] < ARM_TIMER_RESET_1)) ||
    3608:	80 91 2f 08 	lds	r24, 0x082F
    360c:	90 91 30 08 	lds	r25, 0x0830
    3610:	80 3c       	cpi	r24, 0xC0	; 192
    3612:	93 40       	sbci	r25, 0x03	; 3
    3614:	0c f4       	brge	.+2      	; 0x3618 <main+0x2ac>
    3616:	40 c0       	rjmp	.+128    	; 0x3698 <main+0x32c>
				((-ARM_TIMER_RESET_1 < RCinputs[RUDDER]) && (RCinputs[RUDDER] < ARM_TIMER_RESET_1)) ||
    3618:	80 91 31 08 	lds	r24, 0x0831
    361c:	90 91 32 08 	lds	r25, 0x0832

			// If sticks not at extremes, reset manual arm/disarm timer
			// Sticks down and centered = armed. Down and outside = disarmed
			if (
				((-ARM_TIMER_RESET_1 < RCinputs[AILERON]) && (RCinputs[AILERON] < ARM_TIMER_RESET_1)) ||
				((-ARM_TIMER_RESET_1 < RCinputs[ELEVATOR]) && (RCinputs[ELEVATOR] < ARM_TIMER_RESET_1)) ||
    3620:	81 34       	cpi	r24, 0x41	; 65
    3622:	9c 4f       	sbci	r25, 0xFC	; 252
    3624:	3c f0       	brlt	.+14     	; 0x3634 <main+0x2c8>
				((-ARM_TIMER_RESET_1 < RCinputs[RUDDER]) && (RCinputs[RUDDER] < ARM_TIMER_RESET_1)) ||
    3626:	80 91 31 08 	lds	r24, 0x0831
    362a:	90 91 32 08 	lds	r25, 0x0832
    362e:	80 3c       	cpi	r24, 0xC0	; 192
    3630:	93 40       	sbci	r25, 0x03	; 3
    3632:	94 f1       	brlt	.+100    	; 0x3698 <main+0x32c>
				(ARM_TIMER_RESET_2 < MonopolarThrottle)
    3634:	80 91 29 08 	lds	r24, 0x0829
    3638:	90 91 2a 08 	lds	r25, 0x082A
			// If sticks not at extremes, reset manual arm/disarm timer
			// Sticks down and centered = armed. Down and outside = disarmed
			if (
				((-ARM_TIMER_RESET_1 < RCinputs[AILERON]) && (RCinputs[AILERON] < ARM_TIMER_RESET_1)) ||
				((-ARM_TIMER_RESET_1 < RCinputs[ELEVATOR]) && (RCinputs[ELEVATOR] < ARM_TIMER_RESET_1)) ||
				((-ARM_TIMER_RESET_1 < RCinputs[RUDDER]) && (RCinputs[RUDDER] < ARM_TIMER_RESET_1)) ||
    363c:	c3 97       	sbiw	r24, 0x33	; 51
    363e:	64 f5       	brge	.+88     	; 0x3698 <main+0x32c>
				Arm_timer = 0;
			}

			// If arm timer times out, the sticks must have been at extremes for ARM_TIMER seconds
			// If aileron is at min, arm the FC
			if ((Arm_timer > ARM_TIMER) && (RCinputs[AILERON] < -ARM_TIMER_RESET_1))
    3640:	3c e4       	ldi	r19, 0x4C	; 76
    3642:	c3 16       	cp	r12, r19
    3644:	d3 06       	cpc	r13, r19
    3646:	e1 04       	cpc	r14, r1
    3648:	f1 04       	cpc	r15, r1
    364a:	48 f1       	brcs	.+82     	; 0x369e <main+0x332>
    364c:	80 91 2d 08 	lds	r24, 0x082D
    3650:	90 91 2e 08 	lds	r25, 0x082E
    3654:	80 34       	cpi	r24, 0x40	; 64
    3656:	9c 4f       	sbci	r25, 0xFC	; 252
    3658:	5c f4       	brge	.+22     	; 0x3670 <main+0x304>
			{
				Arm_timer = 0;
				General_error &= ~(1 << DISARMED);		// Set flags to armed (negate disarmed)
    365a:	80 91 22 05 	lds	r24, 0x0522
    365e:	8b 7f       	andi	r24, 0xFB	; 251
    3660:	80 93 22 05 	sts	0x0522, r24
				CalibrateGyrosSlow();					// Calibrate gyros
    3664:	0e 94 bc 23 	call	0x4778	; 0x4778 <CalibrateGyrosSlow>
				LED1 = 1;								// Signal that FC is ready
    3668:	2b 9a       	sbi	0x05, 3	; 5
				reset_IMU();							// Reset IMU just in case...
    366a:	0e 94 f9 28 	call	0x51f2	; 0x51f2 <reset_IMU>
    366e:	14 c0       	rjmp	.+40     	; 0x3698 <main+0x32c>
			}
			// Else, disarm the FC after DISARM_TIMER seconds if aileron at max
			else if ((Arm_timer > DISARM_TIMER) && (RCinputs[AILERON] > ARM_TIMER_RESET_1))
    3670:	52 ee       	ldi	r21, 0xE2	; 226
    3672:	c5 16       	cp	r12, r21
    3674:	54 ee       	ldi	r21, 0xE4	; 228
    3676:	d5 06       	cpc	r13, r21
    3678:	e1 04       	cpc	r14, r1
    367a:	f1 04       	cpc	r15, r1
    367c:	80 f0       	brcs	.+32     	; 0x369e <main+0x332>
    367e:	80 91 2d 08 	lds	r24, 0x082D
    3682:	90 91 2e 08 	lds	r25, 0x082E
    3686:	81 3c       	cpi	r24, 0xC1	; 193
    3688:	93 40       	sbci	r25, 0x03	; 3
    368a:	4c f0       	brlt	.+18     	; 0x369e <main+0x332>
			{
				Arm_timer = 0;
				General_error |= (1 << DISARMED);		// Set flags to disarmed
    368c:	80 91 22 05 	lds	r24, 0x0522
    3690:	84 60       	ori	r24, 0x04	; 4
    3692:	80 93 22 05 	sts	0x0522, r24
				LED1 = 0;								// Signal that FC is now disarmed
    3696:	2b 98       	cbi	0x05, 3	; 5
    3698:	c1 2c       	mov	r12, r1
    369a:	d1 2c       	mov	r13, r1
    369c:	76 01       	movw	r14, r12
			}

			// Automatic disarm

			// Reset auto-disarm count if any RX activity or set to zero, or when currently disarmed
			if ((Flight_flags & (1 << RxActivity)) || (Config.Disarm_timer == 0) || (General_error & (1 << DISARMED)))
    369e:	80 91 21 05 	lds	r24, 0x0521
    36a2:	80 fd       	sbrc	r24, 0
    36a4:	10 c0       	rjmp	.+32     	; 0x36c6 <main+0x35a>
    36a6:	80 91 3c 06 	lds	r24, 0x063C
    36aa:	88 23       	and	r24, r24
    36ac:	61 f0       	breq	.+24     	; 0x36c6 <main+0x35a>
    36ae:	80 91 22 05 	lds	r24, 0x0522
    36b2:	82 fd       	sbrc	r24, 2
    36b4:	08 c0       	rjmp	.+16     	; 0x36c6 <main+0x35a>
				Disarm_timer = 0;
				Disarm_seconds = 0;
			}
		
			// Increment disarm timer (seconds) if armed
			if (Disarm_timer > SECOND_TIMER)
    36b6:	0c 34       	cpi	r16, 0x4C	; 76
    36b8:	bc e4       	ldi	r27, 0x4C	; 76
    36ba:	1b 07       	cpc	r17, r27
    36bc:	38 f0       	brcs	.+14     	; 0x36cc <main+0x360>
			{
				Disarm_seconds++;
    36be:	2b 81       	ldd	r18, Y+3	; 0x03
    36c0:	2f 5f       	subi	r18, 0xFF	; 255
    36c2:	2b 83       	std	Y+3, r18	; 0x03
    36c4:	01 c0       	rjmp	.+2      	; 0x36c8 <main+0x35c>
    36c6:	1b 82       	std	Y+3, r1	; 0x03
    36c8:	00 e0       	ldi	r16, 0x00	; 0
    36ca:	10 e0       	ldi	r17, 0x00	; 0
				Disarm_timer = 0;
			}

			// Auto-disarm model if timeout enabled and due
			if ((Disarm_seconds >= Config.Disarm_timer) && (Config.Disarm_timer >= 30))	
    36cc:	40 91 3c 06 	lds	r20, 0x063C
    36d0:	5b 81       	ldd	r21, Y+3	; 0x03
    36d2:	25 2f       	mov	r18, r21
    36d4:	30 e0       	ldi	r19, 0x00	; 0
    36d6:	84 2f       	mov	r24, r20
    36d8:	99 27       	eor	r25, r25
    36da:	87 fd       	sbrc	r24, 7
    36dc:	90 95       	com	r25
    36de:	28 17       	cp	r18, r24
    36e0:	39 07       	cpc	r19, r25
    36e2:	7c f0       	brlt	.+30     	; 0x3702 <main+0x396>
    36e4:	4e 31       	cpi	r20, 0x1E	; 30
    36e6:	6c f0       	brlt	.+26     	; 0x3702 <main+0x396>
			{
				// Disarm the FC
				General_error |= (1 << DISARMED);		// Set flags to disarmed
    36e8:	80 91 22 05 	lds	r24, 0x0522
    36ec:	84 60       	ori	r24, 0x04	; 4
    36ee:	80 93 22 05 	sts	0x0522, r24
				LED1 = 0;								// Signal that FC is now disarmed
    36f2:	2b 98       	cbi	0x05, 3	; 5
    36f4:	06 c0       	rjmp	.+12     	; 0x3702 <main+0x396>
			}
		}
		// Arm when ArmMode is OFF
		else 
		{
			General_error &= ~(1 << DISARMED);			// Set flags to armed
    36f6:	80 91 22 05 	lds	r24, 0x0522
    36fa:	8b 7f       	andi	r24, 0xFB	; 251
    36fc:	80 93 22 05 	sts	0x0522, r24
			LED1 = 1;
    3700:	2b 9a       	sbi	0x05, 3	; 5
		//************************************************************
		//* Get RC data
		//************************************************************

		// Update zeroed RC channel data
		RxGetChannels();
    3702:	0e 94 60 43 	call	0x86c0	; 0x86c0 <RxGetChannels>

		// Check for throttle reset
		if (MonopolarThrottle < THROTTLEIDLE)
    3706:	80 91 29 08 	lds	r24, 0x0829
    370a:	90 91 2a 08 	lds	r25, 0x082A
    370e:	c2 97       	sbiw	r24, 0x32	; 50
    3710:	5c f4       	brge	.+22     	; 0x3728 <main+0x3bc>
		{
			// Clear throttle high error
			General_error &= ~(1 << THROTTLE_HIGH);	
    3712:	80 91 22 05 	lds	r24, 0x0522
    3716:	8e 7f       	andi	r24, 0xFE	; 254
    3718:	80 93 22 05 	sts	0x0522, r24

			// Reset I-terms at throttle cut. Using memset saves code space
			memset(&IntegralGyro[P1][ROLL], 0, sizeof(int32_t) * 6); 
    371c:	88 e1       	ldi	r24, 0x18	; 24
    371e:	ad ee       	ldi	r26, 0xED	; 237
    3720:	b7 e0       	ldi	r27, 0x07	; 7
    3722:	1d 92       	st	X+, r1
    3724:	8a 95       	dec	r24
    3726:	e9 f7       	brne	.-6      	; 0x3722 <main+0x3b6>
		//* by the Config.TransitionSpeed setting.
		//* The transition will hold at P1n position if directed to
		//************************************************************

		// P2 transition point hard-coded to 50% above center
		if 	(RCinputs[Config.FlightChan] > 500)
    3728:	80 91 de 05 	lds	r24, 0x05DE
    372c:	88 0f       	add	r24, r24
    372e:	99 0b       	sbc	r25, r25
    3730:	fc 01       	movw	r30, r24
    3732:	e5 5d       	subi	r30, 0xD5	; 213
    3734:	f7 4f       	sbci	r31, 0xF7	; 247
    3736:	20 81       	ld	r18, Z
    3738:	31 81       	ldd	r19, Z+1	; 0x01
    373a:	25 3f       	cpi	r18, 0xF5	; 245
    373c:	31 40       	sbci	r19, 0x01	; 1
    373e:	14 f0       	brlt	.+4      	; 0x3744 <main+0x3d8>
		{
			Config.FlightSel = 2;			// Flight mode 2 (P2)
    3740:	22 e0       	ldi	r18, 0x02	; 2
    3742:	06 c0       	rjmp	.+12     	; 0x3750 <main+0x3e4>
		}
		// P1.n transition point hard-coded to 50% below center
		else if (RCinputs[Config.FlightChan] > -500)
    3744:	20 81       	ld	r18, Z
    3746:	31 81       	ldd	r19, Z+1	; 0x01
    3748:	2d 30       	cpi	r18, 0x0D	; 13
    374a:	3e 4f       	sbci	r19, 0xFE	; 254
    374c:	24 f0       	brlt	.+8      	; 0x3756 <main+0x3ea>
		{
			Config.FlightSel = 1;			// Flight mode 1 (P1.n)
    374e:	21 e0       	ldi	r18, 0x01	; 1
    3750:	20 93 af 07 	sts	0x07AF, r18
    3754:	02 c0       	rjmp	.+4      	; 0x375a <main+0x3ee>
		}
		// Otherwise the default is P1
		else
		{
			Config.FlightSel = 0;			// Flight mode 0 (P1)
    3756:	10 92 af 07 	sts	0x07AF, r1
		//* Set up the correct state for the current setting.
		//* Check for initial startup - the only time that old_flight should be "3".
		//* Also, re-initialise if the transition setting is changed
		//************************************************************

		if ((old_flight == 3) || (old_trans_mode != Config.TransitionSpeed))
    375a:	29 81       	ldd	r18, Y+1	; 0x01
    375c:	23 30       	cpi	r18, 0x03	; 3
    375e:	29 f0       	breq	.+10     	; 0x376a <main+0x3fe>
    3760:	20 91 df 05 	lds	r18, 0x05DF
    3764:	3d 8d       	ldd	r19, Y+29	; 0x1d
    3766:	32 17       	cp	r19, r18
    3768:	49 f1       	breq	.+82     	; 0x37bc <main+0x450>
		{
			switch(Config.FlightSel)
    376a:	40 91 af 07 	lds	r20, 0x07AF
    376e:	49 83       	std	Y+1, r20	; 0x01
    3770:	41 30       	cpi	r20, 0x01	; 1
    3772:	59 f0       	breq	.+22     	; 0x378a <main+0x41e>
    3774:	42 30       	cpi	r20, 0x02	; 2
    3776:	b1 f0       	breq	.+44     	; 0x37a4 <main+0x438>
    3778:	41 11       	cpse	r20, r1
    377a:	1d c0       	rjmp	.+58     	; 0x37b6 <main+0x44a>
			{
				case 0:
					Transition_state = TRANS_P1;
    377c:	10 92 25 05 	sts	0x0525, r1
					transition_counter = 0;
    3780:	10 92 27 05 	sts	0x0527, r1
    3784:	10 92 26 05 	sts	0x0526, r1
					break;
    3788:	16 c0       	rjmp	.+44     	; 0x37b6 <main+0x44a>
				case 1:
					Transition_state = TRANS_P1n;
    378a:	24 e0       	ldi	r18, 0x04	; 4
    378c:	20 93 25 05 	sts	0x0525, r18
					transition_counter = Config.Transition_P1n; // Set transition point to the user-selected point
    3790:	20 91 e0 05 	lds	r18, 0x05E0
    3794:	33 27       	eor	r19, r19
    3796:	27 fd       	sbrc	r18, 7
    3798:	30 95       	com	r19
    379a:	30 93 27 05 	sts	0x0527, r19
    379e:	20 93 26 05 	sts	0x0526, r18
					break;
    37a2:	09 c0       	rjmp	.+18     	; 0x37b6 <main+0x44a>
				case 2:
					Transition_state = TRANS_P2;
    37a4:	29 e0       	ldi	r18, 0x09	; 9
    37a6:	20 93 25 05 	sts	0x0525, r18
					transition_counter = 100;
    37aa:	a4 e6       	ldi	r26, 0x64	; 100
    37ac:	b0 e0       	ldi	r27, 0x00	; 0
    37ae:	b0 93 27 05 	sts	0x0527, r27
    37b2:	a0 93 26 05 	sts	0x0526, r26
					break;
				default:
					break;
			}		 
			old_flight = Config.FlightSel;
			old_trans_mode = Config.TransitionSpeed;
    37b6:	20 91 df 05 	lds	r18, 0x05DF
    37ba:	2d 8f       	std	Y+29, r18	; 0x1d
		//************************************************************
		//* Transition state handling
		//************************************************************

		// Update timed transition when changing flight modes
		if (Config.FlightSel != old_flight)
    37bc:	30 91 af 07 	lds	r19, 0x07AF
    37c0:	3c 8b       	std	Y+20, r19	; 0x14
    37c2:	21 e0       	ldi	r18, 0x01	; 1
    37c4:	49 81       	ldd	r20, Y+1	; 0x01
    37c6:	34 13       	cpse	r19, r20
    37c8:	01 c0       	rjmp	.+2      	; 0x37cc <main+0x460>
    37ca:	20 e0       	ldi	r18, 0x00	; 0
			TransitionUpdated = true;
		}

		// Work out transition number when manually transitioning
		// Convert number to percentage (0 to 100%)
		if (Config.TransitionSpeed == 0)
    37cc:	30 91 df 05 	lds	r19, 0x05DF
    37d0:	31 11       	cpse	r19, r1
    37d2:	1b c0       	rjmp	.+54     	; 0x380a <main+0x49e>
		{
			// Offset RC input to (approx) -250 to 2250
			temp1 = RCinputs[Config.FlightChan] + 1000;
    37d4:	fc 01       	movw	r30, r24
    37d6:	e5 5d       	subi	r30, 0xD5	; 213
    37d8:	f7 4f       	sbci	r31, 0xF7	; 247
    37da:	80 81       	ld	r24, Z
    37dc:	91 81       	ldd	r25, Z+1	; 0x01
    37de:	88 51       	subi	r24, 0x18	; 24
    37e0:	9c 4f       	sbci	r25, 0xFC	; 252
    37e2:	97 ff       	sbrs	r25, 7
    37e4:	02 c0       	rjmp	.+4      	; 0x37ea <main+0x47e>
    37e6:	80 e0       	ldi	r24, 0x00	; 0
    37e8:	90 e0       	ldi	r25, 0x00	; 0
			// Trim lower end to zero (0 to 2250)
			if (temp1 < 0) temp1 = 0;

			// Convert 0 to 2250 to 0 to 125. Divide by 20
			// Round to avoid truncation errors
			transition = (temp1 + 10) / 20;
    37ea:	0a 96       	adiw	r24, 0x0a	; 10
    37ec:	64 e1       	ldi	r22, 0x14	; 20
    37ee:	70 e0       	ldi	r23, 0x00	; 0
    37f0:	0e 94 78 48 	call	0x90f0	; 0x90f0 <__divmodhi4>

			// transition now has a range of 0 to 101 for 0 to 2000 input
			// Limit extent of transition value 0 to 100 (101 steps)
			if (transition > 100) transition = 100;
    37f4:	65 36       	cpi	r22, 0x65	; 101
    37f6:	71 05       	cpc	r23, r1
    37f8:	0c f4       	brge	.+2      	; 0x37fc <main+0x490>
    37fa:	1a c4       	rjmp	.+2100   	; 0x4030 <main+0xcc4>
    37fc:	84 e6       	ldi	r24, 0x64	; 100
    37fe:	90 e0       	ldi	r25, 0x00	; 0
    3800:	90 93 24 05 	sts	0x0524, r25
    3804:	80 93 23 05 	sts	0x0523, r24
    3808:	17 c4       	rjmp	.+2094   	; 0x4038 <main+0xccc>
		}
		else
		{
			// transition_counter counts from 0 to 100 (101 steps)
			transition = transition_counter;
    380a:	80 91 26 05 	lds	r24, 0x0526
    380e:	90 91 27 05 	lds	r25, 0x0527
    3812:	90 93 24 05 	sts	0x0524, r25
    3816:	80 93 23 05 	sts	0x0523, r24
		{
			Transition_state = TRANSITIONING;
		}

		// Update transition state change when control value or flight mode changes
		if (TransitionUpdated)
    381a:	22 23       	and	r18, r18
    381c:	a1 f0       	breq	.+40     	; 0x3846 <main+0x4da>
		{
			// Update transition state from matrix
			Transition_state = (uint8_t)pgm_read_byte(&Trans_Matrix[Config.FlightSel][old_flight]);
    381e:	4c 89       	ldd	r20, Y+20	; 0x14
    3820:	84 2f       	mov	r24, r20
    3822:	99 27       	eor	r25, r25
    3824:	87 fd       	sbrc	r24, 7
    3826:	90 95       	com	r25
    3828:	fc 01       	movw	r30, r24
    382a:	ee 0f       	add	r30, r30
    382c:	ff 1f       	adc	r31, r31
    382e:	e8 0f       	add	r30, r24
    3830:	f9 1f       	adc	r31, r25
    3832:	49 81       	ldd	r20, Y+1	; 0x01
    3834:	e4 0f       	add	r30, r20
    3836:	f1 1d       	adc	r31, r1
    3838:	47 fd       	sbrc	r20, 7
    383a:	fa 95       	dec	r31
    383c:	e4 51       	subi	r30, 0x14	; 20
    383e:	ff 4f       	sbci	r31, 0xFF	; 255
    3840:	e4 91       	lpm	r30, Z
    3842:	e0 93 25 05 	sts	0x0525, r30

		// Calculate transition time from user's setting
		transition_time = TRANSITION_TIMER * Config.TransitionSpeed;
		
		// Update state, values and transition_counter every Config.TransitionSpeed if not zero. 195 = 10ms
		if (((Config.TransitionSpeed != 0) && (Transition_timeout > transition_time)) ||
    3846:	33 23       	and	r19, r19
    3848:	49 f0       	breq	.+18     	; 0x385c <main+0x4f0>
			// Update transition state from matrix
			Transition_state = (uint8_t)pgm_read_byte(&Trans_Matrix[Config.FlightSel][old_flight]);
		}

		// Calculate transition time from user's setting
		transition_time = TRANSITION_TIMER * Config.TransitionSpeed;
    384a:	53 ec       	ldi	r21, 0xC3	; 195
    384c:	35 03       	mulsu	r19, r21
    384e:	c0 01       	movw	r24, r0
    3850:	11 24       	eor	r1, r1
		
		// Update state, values and transition_counter every Config.TransitionSpeed if not zero. 195 = 10ms
		if (((Config.TransitionSpeed != 0) && (Transition_timeout > transition_time)) ||
    3852:	4d 81       	ldd	r20, Y+5	; 0x05
    3854:	5e 81       	ldd	r21, Y+6	; 0x06
    3856:	84 17       	cp	r24, r20
    3858:	95 07       	cpc	r25, r21
    385a:	18 f0       	brcs	.+6      	; 0x3862 <main+0x4f6>
    385c:	22 23       	and	r18, r18
    385e:	09 f4       	brne	.+2      	; 0x3862 <main+0x4f6>
    3860:	a9 c0       	rjmp	.+338    	; 0x39b4 <main+0x648>
		{
			Transition_timeout = 0;
			TransitionUpdated = false;

			// Fixed, end-point states
			if (Transition_state == TRANS_P1)
    3862:	80 91 25 05 	lds	r24, 0x0525
    3866:	81 11       	cpse	r24, r1
    3868:	05 c0       	rjmp	.+10     	; 0x3874 <main+0x508>
			{
				transition_counter = 0;
    386a:	10 92 27 05 	sts	0x0527, r1
    386e:	10 92 26 05 	sts	0x0526, r1
    3872:	22 c0       	rjmp	.+68     	; 0x38b8 <main+0x54c>
			}
			else if (Transition_state == TRANS_P1n)
    3874:	84 30       	cpi	r24, 0x04	; 4
    3876:	31 f4       	brne	.+12     	; 0x3884 <main+0x518>
			{
				transition_counter = Config.Transition_P1n;
    3878:	80 91 e0 05 	lds	r24, 0x05E0
    387c:	99 27       	eor	r25, r25
    387e:	87 fd       	sbrc	r24, 7
    3880:	90 95       	com	r25
    3882:	04 c0       	rjmp	.+8      	; 0x388c <main+0x520>
			}
			else if (Transition_state == TRANS_P2)
    3884:	89 30       	cpi	r24, 0x09	; 9
    3886:	39 f4       	brne	.+14     	; 0x3896 <main+0x52a>
			{
				transition_counter = 100;
    3888:	84 e6       	ldi	r24, 0x64	; 100
    388a:	90 e0       	ldi	r25, 0x00	; 0
    388c:	90 93 27 05 	sts	0x0527, r25
    3890:	80 93 26 05 	sts	0x0526, r24
    3894:	11 c0       	rjmp	.+34     	; 0x38b8 <main+0x54c>
			}		

			// Over-ride users requesting silly states
			// If transition_counter is above P1.n but request is P1 to P1.n or 
			// if transition_counter is below P1.n but request is P2 to P1.n...
			if ((Transition_state == TRANS_P1_to_P1n_start) && (transition_counter > Config.Transition_P1n))
    3896:	81 30       	cpi	r24, 0x01	; 1
    3898:	79 f4       	brne	.+30     	; 0x38b8 <main+0x54c>
    389a:	80 91 e0 05 	lds	r24, 0x05E0
    389e:	99 27       	eor	r25, r25
    38a0:	87 fd       	sbrc	r24, 7
    38a2:	90 95       	com	r25
    38a4:	20 91 26 05 	lds	r18, 0x0526
    38a8:	30 91 27 05 	lds	r19, 0x0527
    38ac:	82 17       	cp	r24, r18
    38ae:	93 07       	cpc	r25, r19
    38b0:	1c f4       	brge	.+6      	; 0x38b8 <main+0x54c>
			{
				// Reset state to a more appropriate one
				Transition_state = TRANS_P2_to_P1n_start;
    38b2:	88 e0       	ldi	r24, 0x08	; 8
    38b4:	80 93 25 05 	sts	0x0525, r24
			}

			if ((Transition_state == TRANS_P2_to_P1n_start) && (transition_counter < Config.Transition_P1n))
    38b8:	80 91 25 05 	lds	r24, 0x0525
    38bc:	88 30       	cpi	r24, 0x08	; 8
    38be:	79 f4       	brne	.+30     	; 0x38de <main+0x572>
    38c0:	80 91 e0 05 	lds	r24, 0x05E0
    38c4:	99 27       	eor	r25, r25
    38c6:	87 fd       	sbrc	r24, 7
    38c8:	90 95       	com	r25
    38ca:	20 91 26 05 	lds	r18, 0x0526
    38ce:	30 91 27 05 	lds	r19, 0x0527
    38d2:	28 17       	cp	r18, r24
    38d4:	39 07       	cpc	r19, r25
    38d6:	1c f4       	brge	.+6      	; 0x38de <main+0x572>
			{
				// Reset state to a more appropriate one
				Transition_state = TRANS_P1_to_P1n_start;
    38d8:	81 e0       	ldi	r24, 0x01	; 1
    38da:	80 93 25 05 	sts	0x0525, r24
			}

			// Handle timed transition towards P1
			if ((Transition_state == TRANS_P1n_to_P1_start) || (Transition_state == TRANS_P2_to_P1_start))
    38de:	80 91 25 05 	lds	r24, 0x0525
    38e2:	8b 7f       	andi	r24, 0xFB	; 251
    38e4:	82 30       	cpi	r24, 0x02	; 2
    38e6:	91 f4       	brne	.+36     	; 0x390c <main+0x5a0>
			{
				transition_counter--;
    38e8:	80 91 26 05 	lds	r24, 0x0526
    38ec:	90 91 27 05 	lds	r25, 0x0527
    38f0:	01 97       	sbiw	r24, 0x01	; 1
    38f2:	90 93 27 05 	sts	0x0527, r25
    38f6:	80 93 26 05 	sts	0x0526, r24
				if (transition_counter <= 0)
    38fa:	18 16       	cp	r1, r24
    38fc:	19 06       	cpc	r1, r25
    38fe:	34 f0       	brlt	.+12     	; 0x390c <main+0x5a0>
				{
					transition_counter = 0;
    3900:	10 92 27 05 	sts	0x0527, r1
    3904:	10 92 26 05 	sts	0x0526, r1
					Transition_state = TRANS_P1;
    3908:	10 92 25 05 	sts	0x0525, r1
				}
			}

			// Handle timed transition between P1.n and P1
			if (Transition_state == TRANS_P1_to_P1n_start)
    390c:	80 91 25 05 	lds	r24, 0x0525
    3910:	81 30       	cpi	r24, 0x01	; 1
    3912:	c1 f4       	brne	.+48     	; 0x3944 <main+0x5d8>
			{
				transition_counter++;
    3914:	80 91 26 05 	lds	r24, 0x0526
    3918:	90 91 27 05 	lds	r25, 0x0527
    391c:	01 96       	adiw	r24, 0x01	; 1
    391e:	90 93 27 05 	sts	0x0527, r25
    3922:	80 93 26 05 	sts	0x0526, r24
				if (transition_counter >= Config.Transition_P1n)
    3926:	20 91 e0 05 	lds	r18, 0x05E0
    392a:	33 27       	eor	r19, r19
    392c:	27 fd       	sbrc	r18, 7
    392e:	30 95       	com	r19
    3930:	82 17       	cp	r24, r18
    3932:	93 07       	cpc	r25, r19
    3934:	3c f0       	brlt	.+14     	; 0x3944 <main+0x5d8>
				{
					transition_counter = Config.Transition_P1n;
    3936:	30 93 27 05 	sts	0x0527, r19
    393a:	20 93 26 05 	sts	0x0526, r18
					Transition_state = TRANS_P1n;
    393e:	84 e0       	ldi	r24, 0x04	; 4
    3940:	80 93 25 05 	sts	0x0525, r24
				}
			}			
				
			// Handle timed transition between P1.n and P2
			if (Transition_state == TRANS_P2_to_P1n_start)
    3944:	80 91 25 05 	lds	r24, 0x0525
    3948:	88 30       	cpi	r24, 0x08	; 8
    394a:	c1 f4       	brne	.+48     	; 0x397c <main+0x610>
			{
				transition_counter--;
    394c:	80 91 26 05 	lds	r24, 0x0526
    3950:	90 91 27 05 	lds	r25, 0x0527
    3954:	01 97       	sbiw	r24, 0x01	; 1
    3956:	90 93 27 05 	sts	0x0527, r25
    395a:	80 93 26 05 	sts	0x0526, r24
				if (transition_counter <= Config.Transition_P1n)
    395e:	20 91 e0 05 	lds	r18, 0x05E0
    3962:	33 27       	eor	r19, r19
    3964:	27 fd       	sbrc	r18, 7
    3966:	30 95       	com	r19
    3968:	28 17       	cp	r18, r24
    396a:	39 07       	cpc	r19, r25
    396c:	3c f0       	brlt	.+14     	; 0x397c <main+0x610>
				{
					transition_counter = Config.Transition_P1n;
    396e:	30 93 27 05 	sts	0x0527, r19
    3972:	20 93 26 05 	sts	0x0526, r18
					Transition_state = TRANS_P1n;
    3976:	84 e0       	ldi	r24, 0x04	; 4
    3978:	80 93 25 05 	sts	0x0525, r24
				}
			}

			// Handle timed transition towards P2
			if ((Transition_state == TRANS_P1n_to_P2_start) || (Transition_state == TRANS_P1_to_P2_start))
    397c:	80 91 25 05 	lds	r24, 0x0525
    3980:	8b 7f       	andi	r24, 0xFB	; 251
    3982:	83 30       	cpi	r24, 0x03	; 3
    3984:	a9 f4       	brne	.+42     	; 0x39b0 <main+0x644>
			{
				transition_counter++;
    3986:	80 91 26 05 	lds	r24, 0x0526
    398a:	90 91 27 05 	lds	r25, 0x0527
    398e:	01 96       	adiw	r24, 0x01	; 1
    3990:	90 93 27 05 	sts	0x0527, r25
    3994:	80 93 26 05 	sts	0x0526, r24
				if (transition_counter >= 100)
    3998:	84 36       	cpi	r24, 0x64	; 100
    399a:	91 05       	cpc	r25, r1
    399c:	4c f0       	brlt	.+18     	; 0x39b0 <main+0x644>
				{
					transition_counter = 100;
    399e:	a4 e6       	ldi	r26, 0x64	; 100
    39a0:	b0 e0       	ldi	r27, 0x00	; 0
    39a2:	b0 93 27 05 	sts	0x0527, r27
    39a6:	a0 93 26 05 	sts	0x0526, r26
					Transition_state = TRANS_P2;
    39aa:	89 e0       	ldi	r24, 0x09	; 9
    39ac:	80 93 25 05 	sts	0x0525, r24
		// Update state, values and transition_counter every Config.TransitionSpeed if not zero. 195 = 10ms
		if (((Config.TransitionSpeed != 0) && (Transition_timeout > transition_time)) ||
			// Update immediately
			TransitionUpdated)
		{
			Transition_timeout = 0;
    39b0:	1e 82       	std	Y+6, r1	; 0x06
    39b2:	1d 82       	std	Y+5, r1	; 0x05
			}

		} // Update transition_counter

		// Zero the I-terms of the opposite state so as to ensure a bump-less transition
		if ((Transition_state == TRANS_P1) || (transition == 0))
    39b4:	20 91 25 05 	lds	r18, 0x0525
    39b8:	22 23       	and	r18, r18
    39ba:	31 f0       	breq	.+12     	; 0x39c8 <main+0x65c>
    39bc:	80 91 23 05 	lds	r24, 0x0523
    39c0:	90 91 24 05 	lds	r25, 0x0524
    39c4:	00 97       	sbiw	r24, 0x00	; 0
    39c6:	39 f4       	brne	.+14     	; 0x39d6 <main+0x66a>
		{
			// Clear P2 I-term while fully in P1
			memset(&IntegralGyro[P2][ROLL], 0, sizeof(int32_t) * NUMBEROFAXIS);
    39c8:	8c e0       	ldi	r24, 0x0C	; 12
    39ca:	e9 ef       	ldi	r30, 0xF9	; 249
    39cc:	f7 e0       	ldi	r31, 0x07	; 7
    39ce:	11 92       	st	Z+, r1
    39d0:	8a 95       	dec	r24
    39d2:	e9 f7       	brne	.-6      	; 0x39ce <main+0x662>
    39d4:	0b c0       	rjmp	.+22     	; 0x39ec <main+0x680>
		}
		else if ((Transition_state == TRANS_P2) || (transition == 100))
    39d6:	29 30       	cpi	r18, 0x09	; 9
    39d8:	19 f0       	breq	.+6      	; 0x39e0 <main+0x674>
    39da:	84 36       	cpi	r24, 0x64	; 100
    39dc:	91 05       	cpc	r25, r1
    39de:	31 f4       	brne	.+12     	; 0x39ec <main+0x680>
		{
			// Clear P1 I-term while fully in P2
			memset(&IntegralGyro[P1][ROLL], 0, sizeof(int32_t) * NUMBEROFAXIS);
    39e0:	8c e0       	ldi	r24, 0x0C	; 12
    39e2:	ad ee       	ldi	r26, 0xED	; 237
    39e4:	b7 e0       	ldi	r27, 0x07	; 7
    39e6:	1d 92       	st	X+, r1
    39e8:	8a 95       	dec	r24
    39ea:	e9 f7       	brne	.-6      	; 0x39e6 <main+0x67a>
		//************************************************************
		//* Update timers
		//************************************************************

		// Safely get current value of TCNT1
		Save_TCNT1 = TIM16_ReadTCNT1();
    39ec:	0e 94 09 2c 	call	0x5812	; 0x5812 <TIM16_ReadTCNT1>
    39f0:	98 87       	std	Y+8, r25	; 0x08
    39f2:	8f 83       	std	Y+7, r24	; 0x07
		//RC_Rate_Timer += (Save_TCNT1 - RC_Rate_TCNT1);
		//RC_Rate_TCNT1 = Save_TCNT1;
		
		// Handle TCNT1-based timer correctly - this actually seems necessary...
		// Work out the current RC rate by measuring between incoming RC packets
		if (Save_TCNT1 < RC_Rate_TCNT1)
    39f4:	2e 85       	ldd	r18, Y+14	; 0x0e
    39f6:	3f 85       	ldd	r19, Y+15	; 0x0f
		{
			RC_Rate_Timer += (65536 - RC_Rate_TCNT1 + Save_TCNT1);
    39f8:	40 91 16 05 	lds	r20, 0x0516
    39fc:	50 91 17 05 	lds	r21, 0x0517
    3a00:	60 91 18 05 	lds	r22, 0x0518
    3a04:	70 91 19 05 	lds	r23, 0x0519
		//RC_Rate_Timer += (Save_TCNT1 - RC_Rate_TCNT1);
		//RC_Rate_TCNT1 = Save_TCNT1;
		
		// Handle TCNT1-based timer correctly - this actually seems necessary...
		// Work out the current RC rate by measuring between incoming RC packets
		if (Save_TCNT1 < RC_Rate_TCNT1)
    3a08:	82 17       	cp	r24, r18
    3a0a:	93 07       	cpc	r25, r19
    3a0c:	d8 f4       	brcc	.+54     	; 0x3a44 <main+0x6d8>
		{
			RC_Rate_Timer += (65536 - RC_Rate_TCNT1 + Save_TCNT1);
    3a0e:	80 e0       	ldi	r24, 0x00	; 0
    3a10:	90 e0       	ldi	r25, 0x00	; 0
    3a12:	a1 e0       	ldi	r26, 0x01	; 1
    3a14:	b0 e0       	ldi	r27, 0x00	; 0
    3a16:	82 1b       	sub	r24, r18
    3a18:	93 0b       	sbc	r25, r19
    3a1a:	a1 09       	sbc	r26, r1
    3a1c:	b1 09       	sbc	r27, r1
    3a1e:	2f 81       	ldd	r18, Y+7	; 0x07
    3a20:	38 85       	ldd	r19, Y+8	; 0x08
    3a22:	82 0f       	add	r24, r18
    3a24:	93 1f       	adc	r25, r19
    3a26:	a1 1d       	adc	r26, r1
    3a28:	b1 1d       	adc	r27, r1
    3a2a:	84 0f       	add	r24, r20
    3a2c:	95 1f       	adc	r25, r21
    3a2e:	a6 1f       	adc	r26, r22
    3a30:	b7 1f       	adc	r27, r23
    3a32:	80 93 16 05 	sts	0x0516, r24
    3a36:	90 93 17 05 	sts	0x0517, r25
    3a3a:	a0 93 18 05 	sts	0x0518, r26
    3a3e:	b0 93 19 05 	sts	0x0519, r27
    3a42:	12 c0       	rjmp	.+36     	; 0x3a68 <main+0x6fc>
		}
		else
		{
			RC_Rate_Timer += (Save_TCNT1 - RC_Rate_TCNT1);
    3a44:	8f 81       	ldd	r24, Y+7	; 0x07
    3a46:	98 85       	ldd	r25, Y+8	; 0x08
    3a48:	2e 85       	ldd	r18, Y+14	; 0x0e
    3a4a:	3f 85       	ldd	r19, Y+15	; 0x0f
    3a4c:	82 1b       	sub	r24, r18
    3a4e:	93 0b       	sbc	r25, r19
    3a50:	48 0f       	add	r20, r24
    3a52:	59 1f       	adc	r21, r25
    3a54:	61 1d       	adc	r22, r1
    3a56:	71 1d       	adc	r23, r1
    3a58:	40 93 16 05 	sts	0x0516, r20
    3a5c:	50 93 17 05 	sts	0x0517, r21
    3a60:	60 93 18 05 	sts	0x0518, r22
    3a64:	70 93 19 05 	sts	0x0519, r23
		}
		
		RC_Rate_TCNT1 = Save_TCNT1;

		// Arm timer for timing stick hold
		Arm_timer += (uint8_t)(TCNT2 - Arm_TCNT2); 
    3a68:	80 91 b2 00 	lds	r24, 0x00B2
    3a6c:	39 8d       	ldd	r19, Y+25	; 0x19
    3a6e:	83 1b       	sub	r24, r19
    3a70:	c8 0e       	add	r12, r24
    3a72:	d1 1c       	adc	r13, r1
    3a74:	e1 1c       	adc	r14, r1
    3a76:	f1 1c       	adc	r15, r1
		Arm_TCNT2 = TCNT2;
    3a78:	40 91 b2 00 	lds	r20, 0x00B2
    3a7c:	49 8f       	std	Y+25, r20	; 0x19

		// 16-bit timers (Max. 3.35s measurement on T2)
		// All TCNT2 timers increment at 19.531 kHz

		// Sets the desired SERVO_RATE by flagging ServoTick when PWM due
		Servo_Rate += (uint8_t)(TCNT2 - ServoRate_TCNT2);
    3a7e:	80 91 b2 00 	lds	r24, 0x00B2
    3a82:	2c 8d       	ldd	r18, Y+28	; 0x1c
    3a84:	82 1b       	sub	r24, r18
    3a86:	48 0e       	add	r4, r24
    3a88:	51 1c       	adc	r5, r1
		ServoRate_TCNT2 = TCNT2;
    3a8a:	30 91 b2 00 	lds	r19, 0x00B2
    3a8e:	3c 8f       	std	Y+28, r19	; 0x1c
		
		// Signal RC overdue after RC_OVERDUE time (500ms)
		RC_Timeout += (uint8_t)(TCNT2 - Servo_TCNT2);
    3a90:	80 91 b2 00 	lds	r24, 0x00B2
    3a94:	4b 8d       	ldd	r20, Y+27	; 0x1b
    3a96:	84 1b       	sub	r24, r20
    3a98:	68 0e       	add	r6, r24
    3a9a:	71 1c       	adc	r7, r1
		Servo_TCNT2 = TCNT2;
    3a9c:	20 91 b2 00 	lds	r18, 0x00B2
    3aa0:	2b 8f       	std	Y+27, r18	; 0x1b
		
		// Update transition timer
		Transition_timeout += (uint8_t)(TCNT2 - Transition_TCNT2);
    3aa2:	80 91 b2 00 	lds	r24, 0x00B2
    3aa6:	3d 89       	ldd	r19, Y+21	; 0x15
    3aa8:	83 1b       	sub	r24, r19
    3aaa:	4d 81       	ldd	r20, Y+5	; 0x05
    3aac:	5e 81       	ldd	r21, Y+6	; 0x06
    3aae:	48 0f       	add	r20, r24
    3ab0:	51 1d       	adc	r21, r1
    3ab2:	5e 83       	std	Y+6, r21	; 0x06
    3ab4:	4d 83       	std	Y+5, r20	; 0x05
		Transition_TCNT2 = TCNT2;
    3ab6:	20 91 b2 00 	lds	r18, 0x00B2
    3aba:	2d 8b       	std	Y+21, r18	; 0x15

		// Update status timeout
		Status_timeout += (uint8_t)(TCNT2 - Status_TCNT2);
    3abc:	80 91 b2 00 	lds	r24, 0x00B2
    3ac0:	3e 89       	ldd	r19, Y+22	; 0x16
    3ac2:	83 1b       	sub	r24, r19
    3ac4:	28 0e       	add	r2, r24
    3ac6:	31 1c       	adc	r3, r1
		Status_TCNT2 = TCNT2;
    3ac8:	40 91 b2 00 	lds	r20, 0x00B2
    3acc:	4e 8b       	std	Y+22, r20	; 0x16
		
		// Status refresh timer
		UpdateStatus_timer += (uint8_t)(TCNT2 - Refresh_TCNT2);
    3ace:	80 91 b2 00 	lds	r24, 0x00B2
    3ad2:	2f 89       	ldd	r18, Y+23	; 0x17
    3ad4:	82 1b       	sub	r24, r18
    3ad6:	4c 85       	ldd	r20, Y+12	; 0x0c
    3ad8:	5d 85       	ldd	r21, Y+13	; 0x0d
    3ada:	48 0f       	add	r20, r24
    3adc:	51 1d       	adc	r21, r1
    3ade:	5d 87       	std	Y+13, r21	; 0x0d
    3ae0:	4c 87       	std	Y+12, r20	; 0x0c
		Refresh_TCNT2 = TCNT2;
    3ae2:	20 91 b2 00 	lds	r18, 0x00B2
    3ae6:	2f 8b       	std	Y+23, r18	; 0x17

		// Auto-disarm timer
		Disarm_timer += (uint8_t)(TCNT2 - Disarm_TCNT2);
    3ae8:	80 91 b2 00 	lds	r24, 0x00B2
    3aec:	38 8d       	ldd	r19, Y+24	; 0x18
    3aee:	83 1b       	sub	r24, r19
    3af0:	08 0f       	add	r16, r24
    3af2:	11 1d       	adc	r17, r1
		Disarm_TCNT2 = TCNT2;
    3af4:	40 91 b2 00 	lds	r20, 0x00B2
    3af8:	48 8f       	std	Y+24, r20	; 0x18

		// Timer for audible alarms
		Ticker_Count += (uint8_t)(TCNT2 - Ticker_TCNT2);
    3afa:	80 91 b2 00 	lds	r24, 0x00B2
    3afe:	2a 8d       	ldd	r18, Y+26	; 0x1a
    3b00:	82 1b       	sub	r24, r18
    3b02:	4a 89       	ldd	r20, Y+18	; 0x12
    3b04:	5b 89       	ldd	r21, Y+19	; 0x13
    3b06:	48 0f       	add	r20, r24
    3b08:	51 1d       	adc	r21, r1
    3b0a:	5b 8b       	std	Y+19, r21	; 0x13
    3b0c:	4a 8b       	std	Y+18, r20	; 0x12
		Ticker_TCNT2 = TCNT2;
    3b0e:	20 91 b2 00 	lds	r18, 0x00B2
    3b12:	2a 8f       	std	Y+26, r18	; 0x1a
		//* Manage desired output update rate when limited by
		//* the PWM rate set to "Low"
		//************************************************************

		// Flag update required based on SERVO_RATE_LOW (50Hz) - 19.97ms
		if (Servo_Rate > SERVO_RATE_LOW)
    3b14:	31 e6       	ldi	r19, 0x61	; 97
    3b16:	43 16       	cp	r4, r19
    3b18:	31 e0       	ldi	r19, 0x01	; 1
    3b1a:	53 06       	cpc	r5, r19
    3b1c:	20 f0       	brcs	.+8      	; 0x3b26 <main+0x7ba>
		{
			ServoTick = true; // Slow device is ready for output generation
			Servo_Rate = 0;
    3b1e:	41 2c       	mov	r4, r1
    3b20:	51 2c       	mov	r5, r1
		//************************************************************

		// Flag update required based on SERVO_RATE_LOW (50Hz) - 19.97ms
		if (Servo_Rate > SERVO_RATE_LOW)
		{
			ServoTick = true; // Slow device is ready for output generation
    3b22:	41 e0       	ldi	r20, 0x01	; 1
    3b24:	4a 83       	std	Y+2, r20	; 0x02
		//************************************************************
		//* Measure incoming RC rate and flag no signal
		//************************************************************

		// Check to see if the RC input is overdue (500ms)
		if (RC_Timeout > RC_OVERDUE)
    3b26:	56 e2       	ldi	r21, 0x26	; 38
    3b28:	65 16       	cp	r6, r21
    3b2a:	75 06       	cpc	r7, r21
    3b2c:	18 f0       	brcs	.+6      	; 0x3b34 <main+0x7c8>
		{
			Overdue = true;	// This results in a "No Signal" error
    3b2e:	81 e0       	ldi	r24, 0x01	; 1
    3b30:	80 93 1b 05 	sts	0x051B, r24
	
		//************************************************************
		//* Read sensors
		//************************************************************

		ReadGyros();
    3b34:	0e 94 3a 23 	call	0x4674	; 0x4674 <ReadGyros>
		ReadAcc();
    3b38:	0e 94 70 0f 	call	0x1ee0	; 0x1ee0 <ReadAcc>
		// These two are concatenated to create a virtual timer that can measure up to 
		// 256 x 26.2ms = 6.7072s at which point the "period" is 16,768,000, a 24-bit number
		//************************************************************
		
		// Safely get current value of TCNT1
		Save_TCNT1 = TIM16_ReadTCNT1();
    3b3c:	0e 94 09 2c 	call	0x5812	; 0x5812 <TIM16_ReadTCNT1>
		
		// Reset Timer0 count
		TCNT0 = 0;
    3b40:	16 bc       	out	0x26, r1	; 38

		// Handle TCNT1 overflow correctly - this actually seems necessary...
		// ticker_16 will hold the most recent amount measured by TCNT1
		// Timer1 (16bit) - run @ 2.5MHz (400ns) - max 26.2ms
		if (Save_TCNT1 < LoopStartTCNT1)
    3b42:	20 91 1c 05 	lds	r18, 0x051C
    3b46:	30 91 1d 05 	lds	r19, 0x051D
    3b4a:	82 17       	cp	r24, r18
    3b4c:	93 07       	cpc	r25, r19
    3b4e:	48 f4       	brcc	.+18     	; 0x3b62 <main+0x7f6>
		{
			ticker_16 = (65536 - LoopStartTCNT1) + Save_TCNT1;
    3b50:	20 91 1c 05 	lds	r18, 0x051C
    3b54:	30 91 1d 05 	lds	r19, 0x051D
    3b58:	dc 01       	movw	r26, r24
    3b5a:	a2 1b       	sub	r26, r18
    3b5c:	b3 0b       	sbc	r27, r19
    3b5e:	9d 01       	movw	r18, r26
    3b60:	08 c0       	rjmp	.+16     	; 0x3b72 <main+0x806>
		}
		else
		{
			ticker_16 = (Save_TCNT1 - LoopStartTCNT1);
    3b62:	20 91 1c 05 	lds	r18, 0x051C
    3b66:	30 91 1d 05 	lds	r19, 0x051D
    3b6a:	fc 01       	movw	r30, r24
    3b6c:	e2 1b       	sub	r30, r18
    3b6e:	f3 0b       	sbc	r31, r19
    3b70:	9f 01       	movw	r18, r30
		}
		
		// Store old TCNT for next measurement
		LoopStartTCNT1 = Save_TCNT1;
    3b72:	90 93 1d 05 	sts	0x051D, r25
    3b76:	80 93 1c 05 	sts	0x051C, r24
		
		// Handle both Timer1 under- and over-run cases
		// If TMR0_counter is less than 2, ICNT1 has not overflowed
		if (TMR0_counter < 2)
    3b7a:	80 91 cd 07 	lds	r24, 0x07CD
    3b7e:	90 91 ce 07 	lds	r25, 0x07CE
    3b82:	a9 01       	movw	r20, r18
    3b84:	60 e0       	ldi	r22, 0x00	; 0
    3b86:	70 e0       	ldi	r23, 0x00	; 0
    3b88:	02 97       	sbiw	r24, 0x02	; 2
    3b8a:	48 f4       	brcc	.+18     	; 0x3b9e <main+0x832>
		{
			interval = ticker_16; // uint16_t
    3b8c:	40 93 28 05 	sts	0x0528, r20
    3b90:	50 93 29 05 	sts	0x0529, r21
    3b94:	60 93 2a 05 	sts	0x052A, r22
    3b98:	70 93 2b 05 	sts	0x052B, r23
    3b9c:	19 c0       	rjmp	.+50     	; 0x3bd0 <main+0x864>
		// So we use chunks of TCNT0, counted during the loop interval
		// to work out the exact period.
		// Timer0 (8bit) - run @ 20MHz / 1024 = 19.531kHz or 51.2us - max 13.1ms
		else
		{
			interval = ticker_16 + (TMR0_counter * 32768);
    3b9e:	80 91 cd 07 	lds	r24, 0x07CD
    3ba2:	90 91 ce 07 	lds	r25, 0x07CE
    3ba6:	a0 e0       	ldi	r26, 0x00	; 0
    3ba8:	b0 e0       	ldi	r27, 0x00	; 0
    3baa:	2f e0       	ldi	r18, 0x0F	; 15
    3bac:	88 0f       	add	r24, r24
    3bae:	99 1f       	adc	r25, r25
    3bb0:	aa 1f       	adc	r26, r26
    3bb2:	bb 1f       	adc	r27, r27
    3bb4:	2a 95       	dec	r18
    3bb6:	d1 f7       	brne	.-12     	; 0x3bac <main+0x840>
    3bb8:	84 0f       	add	r24, r20
    3bba:	95 1f       	adc	r25, r21
    3bbc:	a6 1f       	adc	r26, r22
    3bbe:	b7 1f       	adc	r27, r23
    3bc0:	80 93 28 05 	sts	0x0528, r24
    3bc4:	90 93 29 05 	sts	0x0529, r25
    3bc8:	a0 93 2a 05 	sts	0x052A, r26
    3bcc:	b0 93 2b 05 	sts	0x052B, r27
		}

		TMR0_counter = 0;
    3bd0:	10 92 ce 07 	sts	0x07CE, r1
    3bd4:	10 92 cd 07 	sts	0x07CD, r1
				
		// Call IMU with interval
		simple_imu_update(interval);
    3bd8:	60 91 28 05 	lds	r22, 0x0528
    3bdc:	70 91 29 05 	lds	r23, 0x0529
    3be0:	80 91 2a 05 	lds	r24, 0x052A
    3be4:	90 91 2b 05 	lds	r25, 0x052B
    3be8:	0e 94 2a 27 	call	0x4e54	; 0x4e54 <simple_imu_update>

		//************************************************************
		//* Update I-terms, average gyro values each loop
		//************************************************************

		Sensor_PID();
    3bec:	0e 94 f8 3e 	call	0x7df0	; 0x7df0 <Sensor_PID>
		
		//*****************************************************************
		//* Measure incoming RC. Result in SlowRC state and RC_Rate_Timer
		//*****************************************************************

		if (Interrupted)
    3bf0:	80 91 ca 07 	lds	r24, 0x07CA
    3bf4:	88 23       	and	r24, r24
    3bf6:	09 f4       	brne	.+2      	; 0x3bfa <main+0x88e>
    3bf8:	38 c1       	rjmp	.+624    	; 0x3e6a <main+0xafe>
		{
			// Measure incoming RC rate. Threshold is 60Hz.

			if (Config.Servo_rate < FAST)
    3bfa:	20 91 db 05 	lds	r18, 0x05DB
    3bfe:	22 30       	cpi	r18, 0x02	; 2
    3c00:	9c f4       	brge	.+38     	; 0x3c28 <main+0x8bc>
			{
				if (RC_Rate_Timer > SLOW_RC_RATE)
    3c02:	80 91 16 05 	lds	r24, 0x0516
    3c06:	90 91 17 05 	lds	r25, 0x0517
    3c0a:	a0 91 18 05 	lds	r26, 0x0518
    3c0e:	b0 91 19 05 	lds	r27, 0x0519
    3c12:	84 3c       	cpi	r24, 0xC4	; 196
    3c14:	92 4a       	sbci	r25, 0xA2	; 162
    3c16:	a1 05       	cpc	r26, r1
    3c18:	b1 05       	cpc	r27, r1
    3c1a:	20 f0       	brcs	.+8      	; 0x3c24 <main+0x8b8>
				{
					SlowRC = true;
    3c1c:	81 e0       	ldi	r24, 0x01	; 1
    3c1e:	80 93 00 01 	sts	0x0100, r24
    3c22:	02 c0       	rjmp	.+4      	; 0x3c28 <main+0x8bc>
				}
				else
				{
					SlowRC = false;
    3c24:	10 92 00 01 	sts	0x0100, r1
				}
			}
			
			//if ((RC_Interrupts > 2) && (!RCrateMeasured) && (Config.Servo_rate == FAST))
			if ((!RCrateMeasured) && (Config.Servo_rate == FAST))
    3c28:	91 10       	cpse	r9, r1
    3c2a:	0a c2       	rjmp	.+1044   	; 0x4040 <main+0xcd4>
    3c2c:	22 30       	cpi	r18, 0x02	; 2
    3c2e:	09 f0       	breq	.+2      	; 0x3c32 <main+0x8c6>
    3c30:	0a c2       	rjmp	.+1044   	; 0x4046 <main+0xcda>
			{
				// In high-speed mode, the RC rate will be unfairly marked as "slow" once measured and interrupt blocking starts.
				// To stop this being a problem, only set SlowRC prior to RCrateMeasured becoming true in this mode
				if (FrameRate > SLOW_RC_RATE)
    3c32:	80 91 e8 07 	lds	r24, 0x07E8
    3c36:	90 91 e9 07 	lds	r25, 0x07E9
    3c3a:	84 3c       	cpi	r24, 0xC4	; 196
    3c3c:	92 4a       	sbci	r25, 0xA2	; 162
    3c3e:	20 f0       	brcs	.+8      	; 0x3c48 <main+0x8dc>
				{
					SlowRC = true;
    3c40:	81 e0       	ldi	r24, 0x01	; 1
    3c42:	80 93 00 01 	sts	0x0100, r24
    3c46:	02 c0       	rjmp	.+4      	; 0x3c4c <main+0x8e0>
				}
				else
				{
					SlowRC = false;
    3c48:	10 92 00 01 	sts	0x0100, r1

			//if (RCrateMeasured && (Config.Servo_rate == FAST) && !PWMOverride)
			if (RCrateMeasured && (Config.Servo_rate == FAST))
			{
				// Set minimal pulses doable (39.2 - n * cycletime)
				if (SlowRC)
    3c4c:	80 91 00 01 	lds	r24, 0x0100
    3c50:	88 23       	and	r24, r24
    3c52:	09 f4       	brne	.+2      	; 0x3c56 <main+0x8ea>
    3c54:	71 c0       	rjmp	.+226    	; 0x3d38 <main+0x9cc>
				{
					PWM_pulses = 4;				// Four pulses will fit if interval faster than 102Hz
				
					if (PWM_interval < 19600)	// 19600 = 7.84ms
    3c56:	80 91 01 01 	lds	r24, 0x0101
    3c5a:	90 91 02 01 	lds	r25, 0x0102
    3c5e:	a0 91 03 01 	lds	r26, 0x0103
    3c62:	b0 91 04 01 	lds	r27, 0x0104
    3c66:	80 39       	cpi	r24, 0x90	; 144
    3c68:	9c 44       	sbci	r25, 0x4C	; 76
    3c6a:	a1 05       	cpc	r26, r1
    3c6c:	b1 05       	cpc	r27, r1
    3c6e:	28 f0       	brcs	.+10     	; 0x3c7a <main+0x90e>
			if (RCrateMeasured && (Config.Servo_rate == FAST))
			{
				// Set minimal pulses doable (39.2 - n * cycletime)
				if (SlowRC)
				{
					PWM_pulses = 4;				// Four pulses will fit if interval faster than 102Hz
    3c70:	44 e0       	ldi	r20, 0x04	; 4
    3c72:	50 e0       	ldi	r21, 0x00	; 0
    3c74:	59 a3       	std	Y+33, r21	; 0x21
    3c76:	48 a3       	std	Y+32, r20	; 0x20
    3c78:	04 c0       	rjmp	.+8      	; 0x3c82 <main+0x916>
				
					if (PWM_interval < 19600)	// 19600 = 7.84ms
					{
						PWM_pulses += 1;		// Five pulses will fit if interval faster than 127Hz
    3c7a:	25 e0       	ldi	r18, 0x05	; 5
    3c7c:	30 e0       	ldi	r19, 0x00	; 0
    3c7e:	39 a3       	std	Y+33, r19	; 0x21
    3c80:	28 a3       	std	Y+32, r18	; 0x20
					}
				
					if (PWM_interval < 16333)	// 16333 = 6.53ms
    3c82:	80 91 01 01 	lds	r24, 0x0101
    3c86:	90 91 02 01 	lds	r25, 0x0102
    3c8a:	a0 91 03 01 	lds	r26, 0x0103
    3c8e:	b0 91 04 01 	lds	r27, 0x0104
    3c92:	8d 3c       	cpi	r24, 0xCD	; 205
    3c94:	9f 43       	sbci	r25, 0x3F	; 63
    3c96:	a1 05       	cpc	r26, r1
    3c98:	b1 05       	cpc	r27, r1
    3c9a:	30 f4       	brcc	.+12     	; 0x3ca8 <main+0x93c>
					{
						PWM_pulses += 1;		// Six pulses will fit if interval faster than 153Hz
    3c9c:	48 a1       	ldd	r20, Y+32	; 0x20
    3c9e:	59 a1       	ldd	r21, Y+33	; 0x21
    3ca0:	4f 5f       	subi	r20, 0xFF	; 255
    3ca2:	5f 4f       	sbci	r21, 0xFF	; 255
    3ca4:	59 a3       	std	Y+33, r21	; 0x21
    3ca6:	48 a3       	std	Y+32, r20	; 0x20
					}
				
					if (PWM_interval < 14000)	// 14000 = 5.6ms
    3ca8:	80 91 01 01 	lds	r24, 0x0101
    3cac:	90 91 02 01 	lds	r25, 0x0102
    3cb0:	a0 91 03 01 	lds	r26, 0x0103
    3cb4:	b0 91 04 01 	lds	r27, 0x0104
    3cb8:	80 3b       	cpi	r24, 0xB0	; 176
    3cba:	96 43       	sbci	r25, 0x36	; 54
    3cbc:	a1 05       	cpc	r26, r1
    3cbe:	b1 05       	cpc	r27, r1
    3cc0:	30 f4       	brcc	.+12     	; 0x3cce <main+0x962>
					{
						PWM_pulses += 1;		// Seven pulses will fit if interval faster than 179Hz
    3cc2:	28 a1       	ldd	r18, Y+32	; 0x20
    3cc4:	39 a1       	ldd	r19, Y+33	; 0x21
    3cc6:	2f 5f       	subi	r18, 0xFF	; 255
    3cc8:	3f 4f       	sbci	r19, 0xFF	; 255
    3cca:	39 a3       	std	Y+33, r19	; 0x21
    3ccc:	28 a3       	std	Y+32, r18	; 0x20
					}
				
					if (PWM_interval < 12250)	// 12250 = 4.9ms
    3cce:	80 91 01 01 	lds	r24, 0x0101
    3cd2:	90 91 02 01 	lds	r25, 0x0102
    3cd6:	a0 91 03 01 	lds	r26, 0x0103
    3cda:	b0 91 04 01 	lds	r27, 0x0104
    3cde:	8a 3d       	cpi	r24, 0xDA	; 218
    3ce0:	9f 42       	sbci	r25, 0x2F	; 47
    3ce2:	a1 05       	cpc	r26, r1
    3ce4:	b1 05       	cpc	r27, r1
    3ce6:	30 f4       	brcc	.+12     	; 0x3cf4 <main+0x988>
					{
						PWM_pulses += 1;		// Eight pulses will fit if interval faster than 204Hz
    3ce8:	48 a1       	ldd	r20, Y+32	; 0x20
    3cea:	59 a1       	ldd	r21, Y+33	; 0x21
    3cec:	4f 5f       	subi	r20, 0xFF	; 255
    3cee:	5f 4f       	sbci	r21, 0xFF	; 255
    3cf0:	59 a3       	std	Y+33, r21	; 0x21
    3cf2:	48 a3       	std	Y+32, r20	; 0x20
					}
				
					if (PWM_interval < 10888)	// 10888 = 4.35ms
    3cf4:	80 91 01 01 	lds	r24, 0x0101
    3cf8:	90 91 02 01 	lds	r25, 0x0102
    3cfc:	a0 91 03 01 	lds	r26, 0x0103
    3d00:	b0 91 04 01 	lds	r27, 0x0104
    3d04:	88 38       	cpi	r24, 0x88	; 136
    3d06:	9a 42       	sbci	r25, 0x2A	; 42
    3d08:	a1 05       	cpc	r26, r1
    3d0a:	b1 05       	cpc	r27, r1
    3d0c:	30 f4       	brcc	.+12     	; 0x3d1a <main+0x9ae>
					{
						PWM_pulses += 1;		// Nine pulses will fit if interval faster than 230Hz
    3d0e:	28 a1       	ldd	r18, Y+32	; 0x20
    3d10:	39 a1       	ldd	r19, Y+33	; 0x21
    3d12:	2f 5f       	subi	r18, 0xFF	; 255
    3d14:	3f 4f       	sbci	r19, 0xFF	; 255
    3d16:	39 a3       	std	Y+33, r19	; 0x21
    3d18:	28 a3       	std	Y+32, r18	; 0x20
					}
				
					if (PWM_interval < 9800)	// 9800 = 3.92ms
    3d1a:	80 91 01 01 	lds	r24, 0x0101
    3d1e:	90 91 02 01 	lds	r25, 0x0102
    3d22:	a0 91 03 01 	lds	r26, 0x0103
    3d26:	b0 91 04 01 	lds	r27, 0x0104
    3d2a:	88 34       	cpi	r24, 0x48	; 72
    3d2c:	96 42       	sbci	r25, 0x26	; 38
    3d2e:	a1 05       	cpc	r26, r1
    3d30:	b1 05       	cpc	r27, r1
    3d32:	08 f0       	brcs	.+2      	; 0x3d36 <main+0x9ca>
    3d34:	63 c0       	rjmp	.+198    	; 0x3dfc <main+0xa90>
    3d36:	5c c0       	rjmp	.+184    	; 0x3df0 <main+0xa84>
				}
				else
				{
					PWM_pulses = 3;				// Three pulses will fit if interval faster than 101Hz
				
					if (PWM_interval < 18437)	// 18437 = 7.37ms
    3d38:	80 91 01 01 	lds	r24, 0x0101
    3d3c:	90 91 02 01 	lds	r25, 0x0102
    3d40:	a0 91 03 01 	lds	r26, 0x0103
    3d44:	b0 91 04 01 	lds	r27, 0x0104
    3d48:	85 30       	cpi	r24, 0x05	; 5
    3d4a:	98 44       	sbci	r25, 0x48	; 72
    3d4c:	a1 05       	cpc	r26, r1
    3d4e:	b1 05       	cpc	r27, r1
    3d50:	28 f0       	brcs	.+10     	; 0x3d5c <main+0x9f0>
						PWM_pulses += 1;		// Ten pulses will fit if interval faster than 255Hz
					}
				}
				else
				{
					PWM_pulses = 3;				// Three pulses will fit if interval faster than 101Hz
    3d52:	23 e0       	ldi	r18, 0x03	; 3
    3d54:	30 e0       	ldi	r19, 0x00	; 0
    3d56:	39 a3       	std	Y+33, r19	; 0x21
    3d58:	28 a3       	std	Y+32, r18	; 0x20
    3d5a:	04 c0       	rjmp	.+8      	; 0x3d64 <main+0x9f8>
				
					if (PWM_interval < 18437)	// 18437 = 7.37ms
					{
						PWM_pulses += 1;		// Four pulses will fit if interval faster than 135Hz
    3d5c:	44 e0       	ldi	r20, 0x04	; 4
    3d5e:	50 e0       	ldi	r21, 0x00	; 0
    3d60:	59 a3       	std	Y+33, r21	; 0x21
    3d62:	48 a3       	std	Y+32, r20	; 0x20
					}
				
					if (PWM_interval < 14750)	// 14750 = 5.9ms
    3d64:	80 91 01 01 	lds	r24, 0x0101
    3d68:	90 91 02 01 	lds	r25, 0x0102
    3d6c:	a0 91 03 01 	lds	r26, 0x0103
    3d70:	b0 91 04 01 	lds	r27, 0x0104
    3d74:	8e 39       	cpi	r24, 0x9E	; 158
    3d76:	99 43       	sbci	r25, 0x39	; 57
    3d78:	a1 05       	cpc	r26, r1
    3d7a:	b1 05       	cpc	r27, r1
    3d7c:	30 f4       	brcc	.+12     	; 0x3d8a <main+0xa1e>
					{
						PWM_pulses += 1;		// Five pulses will fit if interval faster than 169Hz
    3d7e:	28 a1       	ldd	r18, Y+32	; 0x20
    3d80:	39 a1       	ldd	r19, Y+33	; 0x21
    3d82:	2f 5f       	subi	r18, 0xFF	; 255
    3d84:	3f 4f       	sbci	r19, 0xFF	; 255
    3d86:	39 a3       	std	Y+33, r19	; 0x21
    3d88:	28 a3       	std	Y+32, r18	; 0x20
					}
				
					if (PWM_interval < 11886)	// 11886 = 4.75ms
    3d8a:	80 91 01 01 	lds	r24, 0x0101
    3d8e:	90 91 02 01 	lds	r25, 0x0102
    3d92:	a0 91 03 01 	lds	r26, 0x0103
    3d96:	b0 91 04 01 	lds	r27, 0x0104
    3d9a:	8e 36       	cpi	r24, 0x6E	; 110
    3d9c:	9e 42       	sbci	r25, 0x2E	; 46
    3d9e:	a1 05       	cpc	r26, r1
    3da0:	b1 05       	cpc	r27, r1
    3da2:	30 f4       	brcc	.+12     	; 0x3db0 <main+0xa44>
					{
						PWM_pulses += 1;		// Six pulses will fit if interval faster than 210Hz
    3da4:	48 a1       	ldd	r20, Y+32	; 0x20
    3da6:	59 a1       	ldd	r21, Y+33	; 0x21
    3da8:	4f 5f       	subi	r20, 0xFF	; 255
    3daa:	5f 4f       	sbci	r21, 0xFF	; 255
    3dac:	59 a3       	std	Y+33, r21	; 0x21
    3dae:	48 a3       	std	Y+32, r20	; 0x20
					}
				
					if (PWM_interval < 10142)	// 10142 = 4.05ms
    3db0:	80 91 01 01 	lds	r24, 0x0101
    3db4:	90 91 02 01 	lds	r25, 0x0102
    3db8:	a0 91 03 01 	lds	r26, 0x0103
    3dbc:	b0 91 04 01 	lds	r27, 0x0104
    3dc0:	8e 39       	cpi	r24, 0x9E	; 158
    3dc2:	97 42       	sbci	r25, 0x27	; 39
    3dc4:	a1 05       	cpc	r26, r1
    3dc6:	b1 05       	cpc	r27, r1
    3dc8:	30 f4       	brcc	.+12     	; 0x3dd6 <main+0xa6a>
					{
						PWM_pulses += 1;		// Five pulses will fit if interval faster than 246Hz
    3dca:	28 a1       	ldd	r18, Y+32	; 0x20
    3dcc:	39 a1       	ldd	r19, Y+33	; 0x21
    3dce:	2f 5f       	subi	r18, 0xFF	; 255
    3dd0:	3f 4f       	sbci	r19, 0xFF	; 255
    3dd2:	39 a3       	std	Y+33, r19	; 0x21
    3dd4:	28 a3       	std	Y+32, r18	; 0x20
					}
				
					if (PWM_interval < 8859)	// 8859 = 3.5ms
    3dd6:	80 91 01 01 	lds	r24, 0x0101
    3dda:	90 91 02 01 	lds	r25, 0x0102
    3dde:	a0 91 03 01 	lds	r26, 0x0103
    3de2:	b0 91 04 01 	lds	r27, 0x0104
    3de6:	8b 39       	cpi	r24, 0x9B	; 155
    3de8:	92 42       	sbci	r25, 0x22	; 34
    3dea:	a1 05       	cpc	r26, r1
    3dec:	b1 05       	cpc	r27, r1
    3dee:	30 f4       	brcc	.+12     	; 0x3dfc <main+0xa90>
					{
						PWM_pulses += 1;		// Six pulses will fit if interval faster than 282Hz
    3df0:	48 a1       	ldd	r20, Y+32	; 0x20
    3df2:	59 a1       	ldd	r21, Y+33	; 0x21
    3df4:	4f 5f       	subi	r20, 0xFF	; 255
    3df6:	5f 4f       	sbci	r21, 0xFF	; 255
    3df8:	59 a3       	std	Y+33, r21	; 0x21
    3dfa:	48 a3       	std	Y+32, r20	; 0x20
    3dfc:	99 24       	eor	r9, r9
    3dfe:	93 94       	inc	r9
				PWM_pulses = 1;
			}
			
			
			// Copy to global when determined
			PWM_pulses_global = PWM_pulses;
    3e00:	48 a1       	ldd	r20, Y+32	; 0x20
    3e02:	59 a1       	ldd	r21, Y+33	; 0x21
    3e04:	50 93 15 05 	sts	0x0515, r21
    3e08:	40 93 14 05 	sts	0x0514, r20

			// Reset RC timeout
			RC_Timeout = 0;

			// No longer overdue
			Overdue = false;
    3e0c:	10 92 1b 05 	sts	0x051B, r1
			
			// Reset rate timer once data received
			RC_Rate_Timer = 0;
    3e10:	10 92 16 05 	sts	0x0516, r1
    3e14:	10 92 17 05 	sts	0x0517, r1
    3e18:	10 92 18 05 	sts	0x0518, r1
    3e1c:	10 92 19 05 	sts	0x0519, r1
			Save_TCNT1 = TIM16_ReadTCNT1();
    3e20:	0e 94 09 2c 	call	0x5812	; 0x5812 <TIM16_ReadTCNT1>
    3e24:	98 87       	std	Y+8, r25	; 0x08
    3e26:	8f 83       	std	Y+7, r24	; 0x07
			RC_Rate_TCNT1 = Save_TCNT1;

			// Block RC interrupts until timeout if period has been calculated
			if ((Config.Servo_rate == FAST) && RCrateMeasured)
    3e28:	80 91 db 05 	lds	r24, 0x05DB
    3e2c:	82 30       	cpi	r24, 0x02	; 2
    3e2e:	a1 f4       	brne	.+40     	; 0x3e58 <main+0xaec>
    3e30:	99 20       	and	r9, r9
    3e32:	91 f0       	breq	.+36     	; 0x3e58 <main+0xaec>
			{
				// If it's time to resample the RC rate, do it now
				// so as not to disturb PWM generation.
				// This will result in a double gap
				if (ResampleRCRate)
    3e34:	29 89       	ldd	r18, Y+17	; 0x11
    3e36:	21 11       	cpse	r18, r1
    3e38:	12 c0       	rjmp	.+36     	; 0x3e5e <main+0xaf2>
					ResampleRCRate = false;		// Reset resample request
					
				}
				else
				{
					if (Interrupted)
    3e3a:	80 91 ca 07 	lds	r24, 0x07CA
    3e3e:	88 23       	and	r24, r24
    3e40:	11 f0       	breq	.+4      	; 0x3e46 <main+0xada>
					{
						Interrupted_Clone = true;	// Hand "Interrupted" baton on to its clone
    3e42:	aa 24       	eor	r10, r10
    3e44:	a3 94       	inc	r10
					}
					Interrupted = false;		// Cancel pending interrupts
    3e46:	10 92 ca 07 	sts	0x07CA, r1
					Disable_RC_Interrupts();	// Disable RC interrupts
    3e4a:	0e 94 3b 2e 	call	0x5c76	; 0x5c76 <Disable_RC_Interrupts>
			
			// Copy to global when determined
			PWM_pulses_global = PWM_pulses;

			// Reset RC timeout
			RC_Timeout = 0;
    3e4e:	61 2c       	mov	r6, r1
    3e50:	71 2c       	mov	r7, r1
					{
						Interrupted_Clone = true;	// Hand "Interrupted" baton on to its clone
					}
					Interrupted = false;		// Cancel pending interrupts
					Disable_RC_Interrupts();	// Disable RC interrupts
					RCInterruptsON = false;		// Flag it for the rest of the code
    3e52:	18 8a       	std	Y+16, r1	; 0x10
					PWMBlocked = false;			// Enable PWM generation	
    3e54:	1c 82       	std	Y+4, r1	; 0x04
    3e56:	09 c0       	rjmp	.+18     	; 0x3e6a <main+0xafe>
			
			// Copy to global when determined
			PWM_pulses_global = PWM_pulses;

			// Reset RC timeout
			RC_Timeout = 0;
    3e58:	61 2c       	mov	r6, r1
    3e5a:	71 2c       	mov	r7, r1
    3e5c:	06 c0       	rjmp	.+12     	; 0x3e6a <main+0xafe>
    3e5e:	61 2c       	mov	r6, r1
    3e60:	71 2c       	mov	r7, r1
				// This will result in a double gap
				if (ResampleRCRate)
				{
					RCrateMeasured = false;		// Force remeasure of RC rate
					PWMBlocked = true;			// Disable Fast-mode PWM generation		
					ResampleRCRate = false;		// Reset resample request
    3e62:	19 8a       	std	Y+17, r1	; 0x11
				// so as not to disturb PWM generation.
				// This will result in a double gap
				if (ResampleRCRate)
				{
					RCrateMeasured = false;		// Force remeasure of RC rate
					PWMBlocked = true;			// Disable Fast-mode PWM generation		
    3e64:	31 e0       	ldi	r19, 0x01	; 1
    3e66:	3c 83       	std	Y+4, r19	; 0x04
				// If it's time to resample the RC rate, do it now
				// so as not to disturb PWM generation.
				// This will result in a double gap
				if (ResampleRCRate)
				{
					RCrateMeasured = false;		// Force remeasure of RC rate
    3e68:	91 2c       	mov	r9, r1
		// Cases where we are ready to output
		if	(
				// Interrupted in any mode
				//(Interrupted && !PWMOverride) ||							// Run at RC rate

				(Interrupted) ||
    3e6a:	80 91 ca 07 	lds	r24, 0x07CA
		//* Output PWM to ESCs/Servos where required, 
		//* based on a very specific set of conditions
		//************************************************************

		// Cases where we are ready to output
		if	(
    3e6e:	81 11       	cpse	r24, r1
    3e70:	08 c0       	rjmp	.+16     	; 0x3e82 <main+0xb16>
				// Interrupted in any mode
				//(Interrupted && !PWMOverride) ||							// Run at RC rate

				(Interrupted) ||
    3e72:	80 91 db 05 	lds	r24, 0x05DB
    3e76:	82 30       	cpi	r24, 0x02	; 2
    3e78:	09 f0       	breq	.+2      	; 0x3e7c <main+0xb10>
    3e7a:	b5 c0       	rjmp	.+362    	; 0x3fe6 <main+0xc7a>

				// Every loop in FAST mode unless blocked
				((Config.Servo_rate == FAST) && (!PWMBlocked))				// Run at full loop rate if allowed
    3e7c:	4c 81       	ldd	r20, Y+4	; 0x04
    3e7e:	41 11       	cpse	r20, r1
    3e80:	b2 c0       	rjmp	.+356    	; 0x3fe6 <main+0xc7a>
			//* The execution rates are:
			//* The RC rate unless in FAST mode
			//* High speed in FAST mode
			//******************************************************************

			if (Interrupted)
    3e82:	80 91 ca 07 	lds	r24, 0x07CA
    3e86:	88 23       	and	r24, r24
    3e88:	21 f0       	breq	.+8      	; 0x3e92 <main+0xb26>
			{
				Interrupted_Clone = true;	// Hand "Interrupted" baton on to its clone
				Interrupted = false;		// Reset interrupted flag if that was the cause of entry			
    3e8a:	10 92 ca 07 	sts	0x07CA, r1
			//* High speed in FAST mode
			//******************************************************************

			if (Interrupted)
			{
				Interrupted_Clone = true;	// Hand "Interrupted" baton on to its clone
    3e8e:	aa 24       	eor	r10, r10
    3e90:	a3 94       	inc	r10
			// For each output, mark the ones that are to fire this time
			for (i = 0; i < MAX_OUTPUTS; i++)
			{
				// Mark bits depending on the selected output type
				if	(
						((Config.Servo_rate == FAST) && (Config.Channel[i].Motor_marker == ASERVO) && ServoTick) ||					// At ServoTick for A.Servo in FAST mode
    3e92:	90 91 db 05 	lds	r25, 0x05DB
    3e96:	e7 e4       	ldi	r30, 0x47	; 71
    3e98:	f6 e0       	ldi	r31, 0x06	; 6
    3e9a:	20 e0       	ldi	r18, 0x00	; 0
    3e9c:	30 e0       	ldi	r19, 0x00	; 0
			}

			// Decide which outputs fire this time, depending on their device setting (A.Servo, D.Servo, Motor)
			// D.Servo, Motor are always ready, but A.Servo must be limited to Servo_rate, flagged by ServoTick

			ServoFlag = 0;
    3e9e:	80 e0       	ldi	r24, 0x00	; 0
				
			// For each output, mark the ones that are to fire this time
			for (i = 0; i < MAX_OUTPUTS; i++)
			{
				// Mark bits depending on the selected output type
				if	(
    3ea0:	92 30       	cpi	r25, 0x02	; 2
    3ea2:	29 f4       	brne	.+10     	; 0x3eae <main+0xb42>
						((Config.Servo_rate == FAST) && (Config.Channel[i].Motor_marker == ASERVO) && ServoTick) ||					// At ServoTick for A.Servo in FAST mode
    3ea4:	40 81       	ld	r20, Z
    3ea6:	41 11       	cpse	r20, r1
    3ea8:	15 c0       	rjmp	.+42     	; 0x3ed4 <main+0xb68>
    3eaa:	4a 81       	ldd	r20, Y+2	; 0x02
    3eac:	0e c0       	rjmp	.+28     	; 0x3eca <main+0xb5e>
    3eae:	91 30       	cpi	r25, 0x01	; 1
    3eb0:	79 f4       	brne	.+30     	; 0x3ed0 <main+0xb64>
						((Config.Servo_rate == SYNC) && (Config.Channel[i].Motor_marker == ASERVO) && (!SlowRC) && ServoTick) ||	// At ServoTick for A.Servo in SYNC with Fast RC
    3eb2:	40 81       	ld	r20, Z
    3eb4:	41 11       	cpse	r20, r1
    3eb6:	0e c0       	rjmp	.+28     	; 0x3ed4 <main+0xb68>
    3eb8:	40 91 00 01 	lds	r20, 0x0100
    3ebc:	41 11       	cpse	r20, r1
    3ebe:	03 c0       	rjmp	.+6      	; 0x3ec6 <main+0xb5a>
    3ec0:	4a 81       	ldd	r20, Y+2	; 0x02
    3ec2:	41 11       	cpse	r20, r1
    3ec4:	18 c0       	rjmp	.+48     	; 0x3ef6 <main+0xb8a>
						((Config.Servo_rate == SYNC) && (Config.Channel[i].Motor_marker == ASERVO) && (SlowRC)) ||					// At RC rate for A.Servo with slow RC
    3ec6:	40 91 00 01 	lds	r20, 0x0100
    3eca:	41 11       	cpse	r20, r1
    3ecc:	14 c0       	rjmp	.+40     	; 0x3ef6 <main+0xb8a>
    3ece:	02 c0       	rjmp	.+4      	; 0x3ed4 <main+0xb68>
    3ed0:	19 16       	cp	r1, r25
    3ed2:	24 f4       	brge	.+8      	; 0x3edc <main+0xb70>
						((Config.Servo_rate >= SYNC) && (Config.Channel[i].Motor_marker > ASERVO)) ||								// Always for D.Servo and Motor in SYNC or FAST modes
    3ed4:	40 81       	ld	r20, Z
    3ed6:	14 16       	cp	r1, r20
    3ed8:	74 f0       	brlt	.+28     	; 0x3ef6 <main+0xb8a>
    3eda:	15 c0       	rjmp	.+42     	; 0x3f06 <main+0xb9a>
    3edc:	91 11       	cpse	r25, r1
    3ede:	13 c0       	rjmp	.+38     	; 0x3f06 <main+0xb9a>
						((Config.Servo_rate == LOW) && (!SlowRC) && ServoTick) ||													// All outputs at ServoTick in LOW mode with fast RC
    3ee0:	40 91 00 01 	lds	r20, 0x0100
    3ee4:	41 11       	cpse	r20, r1
    3ee6:	03 c0       	rjmp	.+6      	; 0x3eee <main+0xb82>
    3ee8:	4a 81       	ldd	r20, Y+2	; 0x02
    3eea:	41 11       	cpse	r20, r1
    3eec:	04 c0       	rjmp	.+8      	; 0x3ef6 <main+0xb8a>
						((Config.Servo_rate == LOW) && (SlowRC))																	// All outputs at  RC rate in LOW mode with slow RC
    3eee:	40 91 00 01 	lds	r20, 0x0100
    3ef2:	44 23       	and	r20, r20
    3ef4:	41 f0       	breq	.+16     	; 0x3f06 <main+0xb9a>
					)
				{
					ServoFlag |= (1 << i);
    3ef6:	41 e0       	ldi	r20, 0x01	; 1
    3ef8:	50 e0       	ldi	r21, 0x00	; 0
    3efa:	02 2e       	mov	r0, r18
    3efc:	01 c0       	rjmp	.+2      	; 0x3f00 <main+0xb94>
    3efe:	44 0f       	add	r20, r20
    3f00:	0a 94       	dec	r0
    3f02:	ea f7       	brpl	.-6      	; 0x3efe <main+0xb92>
    3f04:	84 2b       	or	r24, r20
    3f06:	2f 5f       	subi	r18, 0xFF	; 255
    3f08:	3f 4f       	sbci	r19, 0xFF	; 255
    3f0a:	b6 96       	adiw	r30, 0x26	; 38
			// D.Servo, Motor are always ready, but A.Servo must be limited to Servo_rate, flagged by ServoTick

			ServoFlag = 0;
				
			// For each output, mark the ones that are to fire this time
			for (i = 0; i < MAX_OUTPUTS; i++)
    3f0c:	28 30       	cpi	r18, 0x08	; 8
    3f0e:	31 05       	cpc	r19, r1
    3f10:	39 f6       	brne	.-114    	; 0x3ea0 <main+0xb34>
					ServoFlag |= (1 << i);
				}
			}
								
			// Reset slow PWM flag if it was just set. It will automatically set again at around 50Hz
			if (ServoTick)
    3f12:	2a 81       	ldd	r18, Y+2	; 0x02
    3f14:	22 23       	and	r18, r18
    3f16:	11 f0       	breq	.+4      	; 0x3f1c <main+0xbb0>
			{
				ServoTick = false;
				Servo_Rate = 0;
    3f18:	41 2c       	mov	r4, r1
    3f1a:	51 2c       	mov	r5, r1
			}

			// Block PWM generation after last PWM pulse
			if ((PWM_pulses == 1) && (Config.Servo_rate == FAST))
    3f1c:	48 a1       	ldd	r20, Y+32	; 0x20
    3f1e:	59 a1       	ldd	r21, Y+33	; 0x21
    3f20:	41 30       	cpi	r20, 0x01	; 1
    3f22:	51 05       	cpc	r21, r1
    3f24:	e9 f5       	brne	.+122    	; 0x3fa0 <main+0xc34>
    3f26:	92 30       	cpi	r25, 0x02	; 2
    3f28:	d9 f5       	brne	.+118    	; 0x3fa0 <main+0xc34>
				
				// Refresh PWM_interval with the actual interval when generating PWM
				// if it lies within believable ranges of 120Hz to 250Hz
				// This is located here to make sure the interval measured
				// is during PWM generation cycles
				if ((interval < PWM_PERIOD_WORST) && (interval > PWM_PERIOD_BEST))
    3f2a:	40 91 28 05 	lds	r20, 0x0528
    3f2e:	50 91 29 05 	lds	r21, 0x0529
    3f32:	60 91 2a 05 	lds	r22, 0x052A
    3f36:	70 91 2b 05 	lds	r23, 0x052B
    3f3a:	41 36       	cpi	r20, 0x61	; 97
    3f3c:	51 45       	sbci	r21, 0x51	; 81
    3f3e:	61 05       	cpc	r22, r1
    3f40:	71 05       	cpc	r23, r1
    3f42:	00 f5       	brcc	.+64     	; 0x3f84 <main+0xc18>
    3f44:	40 91 28 05 	lds	r20, 0x0528
    3f48:	50 91 29 05 	lds	r21, 0x0529
    3f4c:	60 91 2a 05 	lds	r22, 0x052A
    3f50:	70 91 2b 05 	lds	r23, 0x052B
    3f54:	4e 38       	cpi	r20, 0x8E	; 142
    3f56:	50 42       	sbci	r21, 0x20	; 32
    3f58:	61 05       	cpc	r22, r1
    3f5a:	71 05       	cpc	r23, r1
    3f5c:	98 f0       	brcs	.+38     	; 0x3f84 <main+0xc18>
				{
					PWM_interval = interval;
    3f5e:	40 91 28 05 	lds	r20, 0x0528
    3f62:	50 91 29 05 	lds	r21, 0x0529
    3f66:	60 91 2a 05 	lds	r22, 0x052A
    3f6a:	70 91 2b 05 	lds	r23, 0x052B
    3f6e:	40 93 01 01 	sts	0x0101, r20
    3f72:	50 93 02 01 	sts	0x0102, r21
    3f76:	60 93 03 01 	sts	0x0103, r22
    3f7a:	70 93 04 01 	sts	0x0104, r23
			}

			// Block PWM generation after last PWM pulse
			if ((PWM_pulses == 1) && (Config.Servo_rate == FAST))
			{
				PWMBlocked = true;					// Block PWM generation on notification of last call
    3f7e:	21 e0       	ldi	r18, 0x01	; 1
    3f80:	2c 83       	std	Y+4, r18	; 0x04
				// if it lies within believable ranges of 120Hz to 250Hz
				// This is located here to make sure the interval measured
				// is during PWM generation cycles
				if ((interval < PWM_PERIOD_WORST) && (interval > PWM_PERIOD_BEST))
				{
					PWM_interval = interval;
    3f82:	0e c0       	rjmp	.+28     	; 0x3fa0 <main+0xc34>
				}
				else
				{
					PWM_interval = PWM_PERIOD_WORST; // 120Hz
    3f84:	21 e6       	ldi	r18, 0x61	; 97
    3f86:	31 e5       	ldi	r19, 0x51	; 81
    3f88:	40 e0       	ldi	r20, 0x00	; 0
    3f8a:	50 e0       	ldi	r21, 0x00	; 0
    3f8c:	20 93 01 01 	sts	0x0101, r18
    3f90:	30 93 02 01 	sts	0x0102, r19
    3f94:	40 93 03 01 	sts	0x0103, r20
    3f98:	50 93 04 01 	sts	0x0104, r21
			}

			// Block PWM generation after last PWM pulse
			if ((PWM_pulses == 1) && (Config.Servo_rate == FAST))
			{
				PWMBlocked = true;					// Block PWM generation on notification of last call
    3f9c:	31 e0       	ldi	r19, 0x01	; 1
    3f9e:	3c 83       	std	Y+4, r19	; 0x04
				}	
			
				
			}
			
			Calculate_PID();					// Calculate PID values
    3fa0:	8f 8f       	std	Y+31, r24	; 0x1f
    3fa2:	0e 94 b1 40 	call	0x8162	; 0x8162 <Calculate_PID>
			ProcessMixer();						// Do all the mixer tasks - can be very slow
    3fa6:	0e 94 3c 38 	call	0x7078	; 0x7078 <ProcessMixer>
			UpdateServos();						// Transfer Config.Channel[i].value data to ServoOut[i] and check servo limits
    3faa:	0e 94 dc 37 	call	0x6fb8	; 0x6fb8 <UpdateServos>
			
			// If, for some reason, a higher power has banned PWM output for this cycle, 
			// just fake a PWM interval. The PWM interval is currently 2.3ms, and doesn't vary.
			if (PWMOverride)
    3fae:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3fb0:	88 20       	and	r8, r8
    3fb2:	39 f0       	breq	.+14     	; 0x3fc2 <main+0xc56>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3fb4:	8b ee       	ldi	r24, 0xEB	; 235
    3fb6:	9c e2       	ldi	r25, 0x2C	; 44
    3fb8:	01 97       	sbiw	r24, 0x01	; 1
    3fba:	f1 f7       	brne	.-4      	; 0x3fb8 <main+0xc4c>
    3fbc:	00 c0       	rjmp	.+0      	; 0x3fbe <main+0xc52>
    3fbe:	00 00       	nop
    3fc0:	02 c0       	rjmp	.+4      	; 0x3fc6 <main+0xc5a>
				_delay_us(2300);
			}
			// Otherwise just output PWM normally
			else
			{
				output_servo_ppm(ServoFlag);		// Output servo signal			
    3fc2:	0e 94 4a 44 	call	0x8894	; 0x8894 <output_servo_ppm>
			}


			// Decrement PWM pulse sum
			if ((Config.Servo_rate == FAST) && (PWM_pulses > 0))
    3fc6:	80 91 db 05 	lds	r24, 0x05DB
    3fca:	82 30       	cpi	r24, 0x02	; 2
    3fcc:	49 f4       	brne	.+18     	; 0x3fe0 <main+0xc74>
    3fce:	28 a1       	ldd	r18, Y+32	; 0x20
    3fd0:	39 a1       	ldd	r19, Y+33	; 0x21
    3fd2:	12 16       	cp	r1, r18
    3fd4:	13 06       	cpc	r1, r19
    3fd6:	24 f4       	brge	.+8      	; 0x3fe0 <main+0xc74>
			{
				PWM_pulses--;
    3fd8:	21 50       	subi	r18, 0x01	; 1
    3fda:	31 09       	sbc	r19, r1
    3fdc:	39 a3       	std	Y+33, r19	; 0x21
    3fde:	28 a3       	std	Y+32, r18	; 0x20
			}
			
			LoopCount = 0;						// Reset loop counter for averaging accVert
    3fe0:	10 92 1a 05 	sts	0x051A, r1
    3fe4:	1a 82       	std	Y+2, r1	; 0x02
		//************************************************************
		//* Enable RC interrupts when ready (RC rate measured and RC interrupts OFF)
		//* and just one PWM remains
		//************************************************************

		if ((PWM_pulses < 1) && RCrateMeasured && !RCInterruptsON && (Config.Servo_rate == FAST))
    3fe6:	48 a1       	ldd	r20, Y+32	; 0x20
    3fe8:	59 a1       	ldd	r21, Y+33	; 0x21
    3fea:	14 16       	cp	r1, r20
    3fec:	15 06       	cpc	r1, r21
    3fee:	6c f0       	brlt	.+26     	; 0x400a <main+0xc9e>
    3ff0:	99 20       	and	r9, r9
    3ff2:	59 f0       	breq	.+22     	; 0x400a <main+0xc9e>
    3ff4:	28 89       	ldd	r18, Y+16	; 0x10
    3ff6:	21 11       	cpse	r18, r1
    3ff8:	08 c0       	rjmp	.+16     	; 0x400a <main+0xc9e>
    3ffa:	80 91 db 05 	lds	r24, 0x05DB
    3ffe:	82 30       	cpi	r24, 0x02	; 2
    4000:	21 f4       	brne	.+8      	; 0x400a <main+0xc9e>
		{
			init_int();					// Re-enable interrupts
    4002:	0e 94 4e 2e 	call	0x5c9c	; 0x5c9c <init_int>
			RCInterruptsON = true;
    4006:	31 e0       	ldi	r19, 0x01	; 1
    4008:	38 8b       	std	Y+16, r19	; 0x10
		//* Carefully update idle screen if error level changed
		//************************************************************	

		// Only update idle when error state has changed.
		// This prevents the continual updating of the LCD disrupting the FC
		if ((old_alarms != General_error) && (Menu_mode == IDLE))
    400a:	80 91 22 05 	lds	r24, 0x0522
    400e:	4e 8d       	ldd	r20, Y+30	; 0x1e
    4010:	48 17       	cp	r20, r24
    4012:	21 f0       	breq	.+8      	; 0x401c <main+0xcb0>
    4014:	b1 10       	cpse	r11, r1
    4016:	02 c0       	rjmp	.+4      	; 0x401c <main+0xcb0>
		{
			// Force safe update of idle screen
			Menu_mode = PRESTATUS_TIMEOUT;
    4018:	87 e0       	ldi	r24, 0x07	; 7
    401a:	b8 2e       	mov	r11, r24
		}
			
		// Save current alarm state into old_alarms
		old_alarms = General_error;
    401c:	20 91 22 05 	lds	r18, 0x0522
    4020:	2e 8f       	std	Y+30, r18	; 0x1e
		//************************************************************
		//* Transition state handling
		//************************************************************

		// Update timed transition when changing flight modes
		if (Config.FlightSel != old_flight)
    4022:	3c 89       	ldd	r19, Y+20	; 0x14
    4024:	39 83       	std	Y+1, r19	; 0x01
		}
			
		// Save current alarm state into old_alarms
		old_alarms = General_error;
		
	} // while loop
    4026:	4f 81       	ldd	r20, Y+7	; 0x07
    4028:	58 85       	ldd	r21, Y+8	; 0x08
    402a:	5f 87       	std	Y+15, r21	; 0x0f
    402c:	4e 87       	std	Y+14, r20	; 0x0e
    402e:	d9 c9       	rjmp	.-3150   	; 0x33e2 <main+0x76>
			// Trim lower end to zero (0 to 2250)
			if (temp1 < 0) temp1 = 0;

			// Convert 0 to 2250 to 0 to 125. Divide by 20
			// Round to avoid truncation errors
			transition = (temp1 + 10) / 20;
    4030:	70 93 24 05 	sts	0x0524, r23
    4034:	60 93 23 05 	sts	0x0523, r22

		// Always in the TRANSITIONING state when Config.TransitionSpeed is 0
		// This prevents state changes when controlled by a channel
		if (Config.TransitionSpeed == 0)
		{
			Transition_state = TRANSITIONING;
    4038:	85 e0       	ldi	r24, 0x05	; 5
    403a:	80 93 25 05 	sts	0x0525, r24
    403e:	ed cb       	rjmp	.-2086   	; 0x381a <main+0x4ae>
			//* Only relevant for high speed mode.
			//***********************************************************************
			//

			//if (RCrateMeasured && (Config.Servo_rate == FAST) && !PWMOverride)
			if (RCrateMeasured && (Config.Servo_rate == FAST))
    4040:	22 30       	cpi	r18, 0x02	; 2
    4042:	09 f4       	brne	.+2      	; 0x4046 <main+0xcda>
    4044:	03 ce       	rjmp	.-1018   	; 0x3c4c <main+0x8e0>
			}
			
			// Rate not measured or re-calibrating or not FAST mode
			else
			{
				PWM_pulses = 1;
    4046:	21 e0       	ldi	r18, 0x01	; 1
    4048:	30 e0       	ldi	r19, 0x00	; 0
    404a:	39 a3       	std	Y+33, r19	; 0x21
    404c:	28 a3       	std	Y+32, r18	; 0x20
    404e:	d8 ce       	rjmp	.-592    	; 0x3e00 <main+0xa94>

00004050 <spiwrite>:
const uint8_t pagemap[] PROGMEM 		= { 7, 6, 5, 4, 3, 2, 1, 0 }; 
const uint8_t lcd_commmands[] PROGMEM	= {0xAF,0x40,0xA0,0xA6,0xA4,0xA2,0xEE,0xC8,0x2F,0x24,0xAC,0x00,0xF8,0x00};	// LCD command string 14

// Software SPI write
inline void spiwrite(uint8_t c) 
{
    4050:	0f 93       	push	r16
    4052:	1f 93       	push	r17
    4054:	cf 93       	push	r28
    4056:	df 93       	push	r29
    4058:	c7 e0       	ldi	r28, 0x07	; 7
    405a:	d0 e0       	ldi	r29, 0x00	; 0
	int8_t i;
	for (i = 7; i >= 0; i--) 
	{
		LCD_SCL = 0;
		if (c & (1 << (i)))		// Bit set?
    405c:	08 2f       	mov	r16, r24
    405e:	10 e0       	ldi	r17, 0x00	; 0
inline void spiwrite(uint8_t c) 
{
	int8_t i;
	for (i = 7; i >= 0; i--) 
	{
		LCD_SCL = 0;
    4060:	5c 98       	cbi	0x0b, 4	; 11
		if (c & (1 << (i)))		// Bit set?
    4062:	c8 01       	movw	r24, r16
    4064:	0c 2e       	mov	r0, r28
    4066:	02 c0       	rjmp	.+4      	; 0x406c <spiwrite+0x1c>
    4068:	95 95       	asr	r25
    406a:	87 95       	ror	r24
    406c:	0a 94       	dec	r0
    406e:	e2 f7       	brpl	.-8      	; 0x4068 <spiwrite+0x18>
    4070:	80 ff       	sbrs	r24, 0
    4072:	02 c0       	rjmp	.+4      	; 0x4078 <spiwrite+0x28>
		{
			LCD_SI = 1;
    4074:	59 9a       	sbi	0x0b, 1	; 11
    4076:	01 c0       	rjmp	.+2      	; 0x407a <spiwrite+0x2a>
		}
		else					// Bit clear?
		{
			LCD_SI = 0;
    4078:	59 98       	cbi	0x0b, 1	; 11
		}
		
		LCD_SCL = 1;
    407a:	5c 9a       	sbi	0x0b, 4	; 11

		glcd_delay();			// 250ns
    407c:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <glcd_delay>
    4080:	21 97       	sbiw	r28, 0x01	; 1
    4082:	70 f7       	brcc	.-36     	; 0x4060 <spiwrite+0x10>
	}
}
    4084:	df 91       	pop	r29
    4086:	cf 91       	pop	r28
    4088:	1f 91       	pop	r17
    408a:	0f 91       	pop	r16
    408c:	08 95       	ret

0000408e <st7565_command>:

// Send command to LCD
void st7565_command(uint8_t c) 
{
	LCD_A0 = 0;
    408e:	5f 98       	cbi	0x0b, 7	; 11
	spiwrite(c);
    4090:	0c 94 28 20 	jmp	0x4050	; 0x4050 <spiwrite>

00004094 <st7565_data>:
}

// Send data to LCD
void st7565_data(uint8_t c) 
{
	LCD_A0 = 1;
    4094:	5f 9a       	sbi	0x0b, 7	; 11
	spiwrite(c);
    4096:	0c 94 28 20 	jmp	0x4050	; 0x4050 <spiwrite>

0000409a <st7565_set_brightness>:
}


// Set LCD brightness
void st7565_set_brightness(uint8_t val) 
{
    409a:	cf 93       	push	r28
    409c:	c8 2f       	mov	r28, r24
	st7565_command(CMD_SET_VOLUME_FIRST);					// 0x81
    409e:	81 e8       	ldi	r24, 0x81	; 129
    40a0:	0e 94 47 20 	call	0x408e	; 0x408e <st7565_command>
	st7565_command(val);
    40a4:	8c 2f       	mov	r24, r28
}
    40a6:	cf 91       	pop	r28

// Set LCD brightness
void st7565_set_brightness(uint8_t val) 
{
	st7565_command(CMD_SET_VOLUME_FIRST);					// 0x81
	st7565_command(val);
    40a8:	0c 94 47 20 	jmp	0x408e	; 0x408e <st7565_command>

000040ac <st7565_init>:
	spiwrite(c);
}

// Initialise LCD
void st7565_init(void) 
{
    40ac:	cf 93       	push	r28
    40ae:	df 93       	push	r29
	// Toggle RST low to reset and CS low so it'll listen to us
	LCD_CSI = 0;
    40b0:	5d 98       	cbi	0x0b, 5	; 11
	LCD_RES = 0;
    40b2:	5e 98       	cbi	0x0b, 6	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    40b4:	87 e8       	ldi	r24, 0x87	; 135
    40b6:	93 e1       	ldi	r25, 0x13	; 19
    40b8:	01 97       	sbiw	r24, 0x01	; 1
    40ba:	f1 f7       	brne	.-4      	; 0x40b8 <st7565_init+0xc>
    40bc:	00 c0       	rjmp	.+0      	; 0x40be <st7565_init+0x12>
    40be:	00 00       	nop
	_delay_ms(1); // Datasheet says 1us for 3.3V operation
	LCD_RES = 1;
    40c0:	5e 9a       	sbi	0x0b, 6	; 11
    40c2:	ce ed       	ldi	r28, 0xDE	; 222
    40c4:	dd e0       	ldi	r29, 0x0D	; 13

	// Send command sequence
	for (int i = 0; i < 14; i++)
	{
		st7565_command((uint8_t)pgm_read_byte(&lcd_commmands[i]));
    40c6:	fe 01       	movw	r30, r28
    40c8:	84 91       	lpm	r24, Z
    40ca:	0e 94 47 20 	call	0x408e	; 0x408e <st7565_command>
    40ce:	21 96       	adiw	r28, 0x01	; 1
	LCD_RES = 0;
	_delay_ms(1); // Datasheet says 1us for 3.3V operation
	LCD_RES = 1;

	// Send command sequence
	for (int i = 0; i < 14; i++)
    40d0:	fd e0       	ldi	r31, 0x0D	; 13
    40d2:	cc 3e       	cpi	r28, 0xEC	; 236
    40d4:	df 07       	cpc	r29, r31
    40d6:	b9 f7       	brne	.-18     	; 0x40c6 <st7565_init+0x1a>
	{
		st7565_command((uint8_t)pgm_read_byte(&lcd_commmands[i]));
	}

	st7565_set_brightness(Config.Contrast);	
    40d8:	80 91 3a 06 	lds	r24, 0x063A
    40dc:	0e 94 4d 20 	call	0x409a	; 0x409a <st7565_set_brightness>
	st7565_command(CMD_SET_COM_REVERSE); 		// For logo	0xC8
    40e0:	88 ec       	ldi	r24, 0xC8	; 200
}
    40e2:	df 91       	pop	r29
    40e4:	cf 91       	pop	r28
	{
		st7565_command((uint8_t)pgm_read_byte(&lcd_commmands[i]));
	}

	st7565_set_brightness(Config.Contrast);	
	st7565_command(CMD_SET_COM_REVERSE); 		// For logo	0xC8
    40e6:	0c 94 47 20 	jmp	0x408e	; 0x408e <st7565_command>

000040ea <write_buffer>:
	st7565_command(val);
}

// Write LCD buffer
void write_buffer(uint8_t *buffer) 
{
    40ea:	df 92       	push	r13
    40ec:	ef 92       	push	r14
    40ee:	ff 92       	push	r15
    40f0:	0f 93       	push	r16
    40f2:	1f 93       	push	r17
    40f4:	cf 93       	push	r28
    40f6:	df 93       	push	r29
    40f8:	cc ee       	ldi	r28, 0xEC	; 236
    40fa:	dd e0       	ldi	r29, 0x0D	; 13
    40fc:	8c 01       	movw	r16, r24
	uint8_t c, p;
	for(p = 0; p < 8; p++) 
	{
		st7565_command(CMD_SET_PAGE | (uint8_t)pgm_read_byte(&pagemap[p]));		// Page 7 to 0
    40fe:	fe 01       	movw	r30, r28
    4100:	84 91       	lpm	r24, Z
    4102:	80 6b       	ori	r24, 0xB0	; 176
    4104:	0e 94 47 20 	call	0x408e	; 0x408e <st7565_command>
		st7565_command(CMD_SET_COLUMN_LOWER | (0x0 & 0xf));						// Column 0
    4108:	80 e0       	ldi	r24, 0x00	; 0
    410a:	0e 94 47 20 	call	0x408e	; 0x408e <st7565_command>
		st7565_command(CMD_SET_COLUMN_UPPER | ((0x0 >> 4) & 0xf));				// Column 0
    410e:	80 e1       	ldi	r24, 0x10	; 16
    4110:	0e 94 47 20 	call	0x408e	; 0x408e <st7565_command>
		st7565_command(CMD_RMW);												// Sets auto-increment
    4114:	80 ee       	ldi	r24, 0xE0	; 224
    4116:	0e 94 47 20 	call	0x408e	; 0x408e <st7565_command>
    411a:	78 01       	movw	r14, r16

		for(c = 0; c < 128; c++) 
    411c:	d1 2c       	mov	r13, r1
		{
			st7565_data(buffer[(128*p)+c]);
    411e:	f7 01       	movw	r30, r14
    4120:	81 91       	ld	r24, Z+
    4122:	7f 01       	movw	r14, r30
    4124:	0e 94 4a 20 	call	0x4094	; 0x4094 <st7565_data>
		st7565_command(CMD_SET_PAGE | (uint8_t)pgm_read_byte(&pagemap[p]));		// Page 7 to 0
		st7565_command(CMD_SET_COLUMN_LOWER | (0x0 & 0xf));						// Column 0
		st7565_command(CMD_SET_COLUMN_UPPER | ((0x0 >> 4) & 0xf));				// Column 0
		st7565_command(CMD_RMW);												// Sets auto-increment

		for(c = 0; c < 128; c++) 
    4128:	d3 94       	inc	r13
    412a:	f0 e8       	ldi	r31, 0x80	; 128
    412c:	df 12       	cpse	r13, r31
    412e:	f7 cf       	rjmp	.-18     	; 0x411e <write_buffer+0x34>
    4130:	21 96       	adiw	r28, 0x01	; 1
    4132:	00 58       	subi	r16, 0x80	; 128
    4134:	1f 4f       	sbci	r17, 0xFF	; 255

// Write LCD buffer
void write_buffer(uint8_t *buffer) 
{
	uint8_t c, p;
	for(p = 0; p < 8; p++) 
    4136:	8d e0       	ldi	r24, 0x0D	; 13
    4138:	c4 3f       	cpi	r28, 0xF4	; 244
    413a:	d8 07       	cpc	r29, r24
    413c:	01 f7       	brne	.-64     	; 0x40fe <write_buffer+0x14>
		for(c = 0; c < 128; c++) 
		{
			st7565_data(buffer[(128*p)+c]);
		}
	}
}
    413e:	df 91       	pop	r29
    4140:	cf 91       	pop	r28
    4142:	1f 91       	pop	r17
    4144:	0f 91       	pop	r16
    4146:	ff 90       	pop	r15
    4148:	ef 90       	pop	r14
    414a:	df 90       	pop	r13
    414c:	08 95       	ret

0000414e <clear_buffer>:

// Clear buffer
void clear_buffer(uint8_t *buff) 
{
	memset(buff, 0, 1024);
    414e:	20 e0       	ldi	r18, 0x00	; 0
    4150:	34 e0       	ldi	r19, 0x04	; 4
    4152:	fc 01       	movw	r30, r24
    4154:	a9 01       	movw	r20, r18
    4156:	11 92       	st	Z+, r1
    4158:	41 50       	subi	r20, 0x01	; 1
    415a:	50 40       	sbci	r21, 0x00	; 0
    415c:	e1 f7       	brne	.-8      	; 0x4156 <clear_buffer+0x8>
    415e:	08 95       	ret

00004160 <clear_screen>:
}

// Clear screen (does not clear buffer)
void clear_screen(void)
{
    4160:	cf 93       	push	r28
    4162:	df 93       	push	r29
	uint8_t p, c;

	for(p = 0; p < 8; p++)
    4164:	d0 e0       	ldi	r29, 0x00	; 0
	{
		st7565_command(CMD_SET_PAGE | p);								// Set page to p
    4166:	8d 2f       	mov	r24, r29
    4168:	80 6b       	ori	r24, 0xB0	; 176
    416a:	0e 94 47 20 	call	0x408e	; 0x408e <st7565_command>
		for(c = 0; c < 128; c++) 										// Was 129, which I think is wrong...
    416e:	c0 e0       	ldi	r28, 0x00	; 0
		{
			st7565_command(CMD_SET_COLUMN_LOWER | (c & 0xf));
    4170:	8c 2f       	mov	r24, r28
    4172:	8f 70       	andi	r24, 0x0F	; 15
    4174:	0e 94 47 20 	call	0x408e	; 0x408e <st7565_command>
			st7565_command(CMD_SET_COLUMN_UPPER | ((c >> 4) & 0xf));	// Set column to c
    4178:	8c 2f       	mov	r24, r28
    417a:	82 95       	swap	r24
    417c:	8f 70       	andi	r24, 0x0F	; 15
    417e:	80 61       	ori	r24, 0x10	; 16
    4180:	0e 94 47 20 	call	0x408e	; 0x408e <st7565_command>
			st7565_data(0x00);											// Clear data
    4184:	80 e0       	ldi	r24, 0x00	; 0
    4186:	0e 94 4a 20 	call	0x4094	; 0x4094 <st7565_data>
	uint8_t p, c;

	for(p = 0; p < 8; p++)
	{
		st7565_command(CMD_SET_PAGE | p);								// Set page to p
		for(c = 0; c < 128; c++) 										// Was 129, which I think is wrong...
    418a:	cf 5f       	subi	r28, 0xFF	; 255
    418c:	c0 38       	cpi	r28, 0x80	; 128
    418e:	81 f7       	brne	.-32     	; 0x4170 <clear_screen+0x10>
// Clear screen (does not clear buffer)
void clear_screen(void)
{
	uint8_t p, c;

	for(p = 0; p < 8; p++)
    4190:	df 5f       	subi	r29, 0xFF	; 255
    4192:	d8 30       	cpi	r29, 0x08	; 8
    4194:	41 f7       	brne	.-48     	; 0x4166 <clear_screen+0x6>
			st7565_command(CMD_SET_COLUMN_LOWER | (c & 0xf));
			st7565_command(CMD_SET_COLUMN_UPPER | ((c >> 4) & 0xf));	// Set column to c
			st7565_data(0x00);											// Clear data
		}
	}
}
    4196:	df 91       	pop	r29
    4198:	cf 91       	pop	r28
    419a:	08 95       	ret

0000419c <setpixel>:
//***********************************************************

// Set a single pixel
void setpixel(uint8_t *buff, uint8_t x, uint8_t y, uint8_t color) 
{
	if ((x >= LCDWIDTH) || (y >= LCDHEIGHT))
    419c:	67 fd       	sbrc	r22, 7
    419e:	36 c0       	rjmp	.+108    	; 0x420c <setpixel+0x70>
    41a0:	40 34       	cpi	r20, 0x40	; 64
    41a2:	a0 f5       	brcc	.+104    	; 0x420c <setpixel+0x70>
    41a4:	34 2f       	mov	r19, r20
    41a6:	36 95       	lsr	r19
    41a8:	36 95       	lsr	r19
    41aa:	36 95       	lsr	r19
    41ac:	e6 2f       	mov	r30, r22
    41ae:	f0 e0       	ldi	r31, 0x00	; 0
    41b0:	50 e0       	ldi	r21, 0x00	; 0
	{
		return;
	}
	// x is which column
	if (color)
    41b2:	22 23       	and	r18, r18
    41b4:	a9 f0       	breq	.+42     	; 0x41e0 <setpixel+0x44>
	{
		buff[x+ (y/8)*128] |= (1 << (7-(y%8)));  
    41b6:	20 e8       	ldi	r18, 0x80	; 128
    41b8:	32 9f       	mul	r19, r18
    41ba:	e0 0d       	add	r30, r0
    41bc:	f1 1d       	adc	r31, r1
    41be:	11 24       	eor	r1, r1
    41c0:	e8 0f       	add	r30, r24
    41c2:	f9 1f       	adc	r31, r25
    41c4:	40 95       	com	r20
    41c6:	50 95       	com	r21
    41c8:	47 70       	andi	r20, 0x07	; 7
    41ca:	55 27       	eor	r21, r21
    41cc:	81 e0       	ldi	r24, 0x01	; 1
    41ce:	90 e0       	ldi	r25, 0x00	; 0
    41d0:	04 2e       	mov	r0, r20
    41d2:	01 c0       	rjmp	.+2      	; 0x41d6 <setpixel+0x3a>
    41d4:	88 0f       	add	r24, r24
    41d6:	0a 94       	dec	r0
    41d8:	ea f7       	brpl	.-6      	; 0x41d4 <setpixel+0x38>
    41da:	90 81       	ld	r25, Z
    41dc:	98 2b       	or	r25, r24
    41de:	15 c0       	rjmp	.+42     	; 0x420a <setpixel+0x6e>
	}
	else
	{
		buff[x+ (y/8)*128] &= ~(1 << (7-(y%8))); 
    41e0:	20 e8       	ldi	r18, 0x80	; 128
    41e2:	32 9f       	mul	r19, r18
    41e4:	e0 0d       	add	r30, r0
    41e6:	f1 1d       	adc	r31, r1
    41e8:	11 24       	eor	r1, r1
    41ea:	e8 0f       	add	r30, r24
    41ec:	f9 1f       	adc	r31, r25
    41ee:	40 95       	com	r20
    41f0:	50 95       	com	r21
    41f2:	47 70       	andi	r20, 0x07	; 7
    41f4:	55 27       	eor	r21, r21
    41f6:	81 e0       	ldi	r24, 0x01	; 1
    41f8:	90 e0       	ldi	r25, 0x00	; 0
    41fa:	04 2e       	mov	r0, r20
    41fc:	01 c0       	rjmp	.+2      	; 0x4200 <setpixel+0x64>
    41fe:	88 0f       	add	r24, r24
    4200:	0a 94       	dec	r0
    4202:	ea f7       	brpl	.-6      	; 0x41fe <setpixel+0x62>
    4204:	80 95       	com	r24
    4206:	90 81       	ld	r25, Z
    4208:	98 23       	and	r25, r24
    420a:	90 83       	st	Z, r25
    420c:	08 95       	ret

0000420e <drawline>:
	}
}

// Bresenham's algorithm - From wikipedia
void drawline(uint8_t *buff, uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1, uint8_t color) 
{
    420e:	9f 92       	push	r9
    4210:	af 92       	push	r10
    4212:	bf 92       	push	r11
    4214:	cf 92       	push	r12
    4216:	df 92       	push	r13
    4218:	ef 92       	push	r14
    421a:	ff 92       	push	r15
    421c:	0f 93       	push	r16
    421e:	1f 93       	push	r17
    4220:	cf 93       	push	r28
    4222:	df 93       	push	r29
    4224:	ec 01       	movw	r28, r24
    4226:	16 2f       	mov	r17, r22
    4228:	f4 2e       	mov	r15, r20
    422a:	d2 2e       	mov	r13, r18
	uint8_t steep = abs(y1 - y0) > abs(x1 - x0);
    422c:	a0 2f       	mov	r26, r16
    422e:	b0 e0       	ldi	r27, 0x00	; 0
    4230:	a4 1b       	sub	r26, r20
    4232:	b1 09       	sbc	r27, r1
    4234:	b7 ff       	sbrs	r27, 7
    4236:	03 c0       	rjmp	.+6      	; 0x423e <drawline+0x30>
    4238:	b1 95       	neg	r27
    423a:	a1 95       	neg	r26
    423c:	b1 09       	sbc	r27, r1
    423e:	ed 2d       	mov	r30, r13
    4240:	f0 e0       	ldi	r31, 0x00	; 0
    4242:	e1 1b       	sub	r30, r17
    4244:	f1 09       	sbc	r31, r1
    4246:	f7 ff       	sbrs	r31, 7
    4248:	03 c0       	rjmp	.+6      	; 0x4250 <drawline+0x42>
    424a:	f1 95       	neg	r31
    424c:	e1 95       	neg	r30
    424e:	f1 09       	sbc	r31, r1
    4250:	bb 24       	eor	r11, r11
    4252:	b3 94       	inc	r11
    4254:	ea 17       	cp	r30, r26
    4256:	fb 07       	cpc	r31, r27
    4258:	14 f0       	brlt	.+4      	; 0x425e <drawline+0x50>
    425a:	b1 2c       	mov	r11, r1
    425c:	06 c0       	rjmp	.+12     	; 0x426a <drawline+0x5c>
    425e:	8d 2d       	mov	r24, r13
	if (steep) 
	{
		swap(x0, y0);
		swap(x1, y1);
    4260:	d0 2e       	mov	r13, r16
    4262:	08 2f       	mov	r16, r24
    4264:	81 2f       	mov	r24, r17
void drawline(uint8_t *buff, uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1, uint8_t color) 
{
	uint8_t steep = abs(y1 - y0) > abs(x1 - x0);
	if (steep) 
	{
		swap(x0, y0);
    4266:	1f 2d       	mov	r17, r15
    4268:	f8 2e       	mov	r15, r24
		swap(x1, y1);
	}

	if (x0 > x1) 
    426a:	d1 16       	cp	r13, r17
    426c:	30 f4       	brcc	.+12     	; 0x427a <drawline+0x6c>
    426e:	8f 2d       	mov	r24, r15
	{
		swap(x0, x1);
		swap(y0, y1);
    4270:	f0 2e       	mov	r15, r16
    4272:	08 2f       	mov	r16, r24
    4274:	81 2f       	mov	r24, r17
    4276:	1d 2d       	mov	r17, r13
    4278:	d8 2e       	mov	r13, r24
	}

	uint8_t dx, dy;
	dx = x1 - x0;
    427a:	ad 2c       	mov	r10, r13
    427c:	a1 1a       	sub	r10, r17
	dy = abs(y1 - y0);
    427e:	e0 2f       	mov	r30, r16
    4280:	f0 e0       	ldi	r31, 0x00	; 0
    4282:	ef 19       	sub	r30, r15
    4284:	f1 09       	sbc	r31, r1
    4286:	f7 ff       	sbrs	r31, 7
    4288:	03 c0       	rjmp	.+6      	; 0x4290 <drawline+0x82>
    428a:	f1 95       	neg	r31
    428c:	e1 95       	neg	r30
    428e:	f1 09       	sbc	r31, r1
    4290:	9e 2e       	mov	r9, r30

	int8_t err = dx / 2;
    4292:	ca 2c       	mov	r12, r10
    4294:	c6 94       	lsr	r12
	int8_t ystep;

	if (y0 < y1) 
    4296:	f0 16       	cp	r15, r16
    4298:	10 f4       	brcc	.+4      	; 0x429e <drawline+0x90>
	{
		ystep = 1;
    429a:	01 e0       	ldi	r16, 0x01	; 1
    429c:	10 c0       	rjmp	.+32     	; 0x42be <drawline+0xb0>
	} 
	else 
	{
		ystep = -1;
    429e:	0f ef       	ldi	r16, 0xFF	; 255
    42a0:	0e c0       	rjmp	.+28     	; 0x42be <drawline+0xb0>

	for (; x0<x1; x0++) 
	{
		if (steep) 
		{
			setpixel(buff, y0, x0, color);
    42a2:	2e 2d       	mov	r18, r14
		ystep = -1;
	}

	for (; x0<x1; x0++) 
	{
		if (steep) 
    42a4:	bb 20       	and	r11, r11
    42a6:	71 f0       	breq	.+28     	; 0x42c4 <drawline+0xb6>
		{
			setpixel(buff, y0, x0, color);
    42a8:	41 2f       	mov	r20, r17
    42aa:	6f 2d       	mov	r22, r15
		} 
		else 
		{
			setpixel(buff, x0, y0, color);
    42ac:	ce 01       	movw	r24, r28
    42ae:	0e 94 ce 20 	call	0x419c	; 0x419c <setpixel>
		}
		err -= dy;
    42b2:	c9 18       	sub	r12, r9
		if (err < 0) 
    42b4:	c7 fe       	sbrs	r12, 7
    42b6:	02 c0       	rjmp	.+4      	; 0x42bc <drawline+0xae>
		{
			y0 += ystep;
    42b8:	f0 0e       	add	r15, r16
			err += dx;
    42ba:	ca 0c       	add	r12, r10
	else 
	{
		ystep = -1;
	}

	for (; x0<x1; x0++) 
    42bc:	1f 5f       	subi	r17, 0xFF	; 255
    42be:	1d 15       	cp	r17, r13
    42c0:	80 f3       	brcs	.-32     	; 0x42a2 <drawline+0x94>
    42c2:	03 c0       	rjmp	.+6      	; 0x42ca <drawline+0xbc>
		{
			setpixel(buff, y0, x0, color);
		} 
		else 
		{
			setpixel(buff, x0, y0, color);
    42c4:	4f 2d       	mov	r20, r15
    42c6:	61 2f       	mov	r22, r17
    42c8:	f1 cf       	rjmp	.-30     	; 0x42ac <drawline+0x9e>
		{
			y0 += ystep;
			err += dx;
		}
	}
}
    42ca:	df 91       	pop	r29
    42cc:	cf 91       	pop	r28
    42ce:	1f 91       	pop	r17
    42d0:	0f 91       	pop	r16
    42d2:	ff 90       	pop	r15
    42d4:	ef 90       	pop	r14
    42d6:	df 90       	pop	r13
    42d8:	cf 90       	pop	r12
    42da:	bf 90       	pop	r11
    42dc:	af 90       	pop	r10
    42de:	9f 90       	pop	r9
    42e0:	08 95       	ret

000042e2 <drawrect>:
	}
}

// Draw a rectangle
void drawrect(uint8_t *buff, uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color) 
{
    42e2:	9f 92       	push	r9
    42e4:	af 92       	push	r10
    42e6:	bf 92       	push	r11
    42e8:	cf 92       	push	r12
    42ea:	df 92       	push	r13
    42ec:	ef 92       	push	r14
    42ee:	ff 92       	push	r15
    42f0:	0f 93       	push	r16
    42f2:	1f 93       	push	r17
    42f4:	cf 93       	push	r28
    42f6:	df 93       	push	r29
    42f8:	ec 01       	movw	r28, r24
    42fa:	f6 2e       	mov	r15, r22
    42fc:	b4 2e       	mov	r11, r20
    42fe:	92 2e       	mov	r9, r18
	// Stupidest version - just pixels - but fast with internal buffer!
	for (uint8_t i=x; i<x+w; i++) 
    4300:	16 2f       	mov	r17, r22
    4302:	c2 2e       	mov	r12, r18
    4304:	d1 2c       	mov	r13, r1
    4306:	c6 0e       	add	r12, r22
    4308:	d1 1c       	adc	r13, r1
	{
		setpixel(buff, i, y, color);
		setpixel(buff, i, y+h-1, color);
    430a:	aa 24       	eor	r10, r10
    430c:	aa 94       	dec	r10
    430e:	a0 0e       	add	r10, r16
    4310:	a4 0e       	add	r10, r20

// Draw a rectangle
void drawrect(uint8_t *buff, uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color) 
{
	// Stupidest version - just pixels - but fast with internal buffer!
	for (uint8_t i=x; i<x+w; i++) 
    4312:	81 2f       	mov	r24, r17
    4314:	90 e0       	ldi	r25, 0x00	; 0
    4316:	8c 15       	cp	r24, r12
    4318:	9d 05       	cpc	r25, r13
    431a:	74 f4       	brge	.+28     	; 0x4338 <drawrect+0x56>
	{
		setpixel(buff, i, y, color);
    431c:	2e 2d       	mov	r18, r14
    431e:	4b 2d       	mov	r20, r11
    4320:	61 2f       	mov	r22, r17
    4322:	ce 01       	movw	r24, r28
    4324:	0e 94 ce 20 	call	0x419c	; 0x419c <setpixel>
		setpixel(buff, i, y+h-1, color);
    4328:	2e 2d       	mov	r18, r14
    432a:	4a 2d       	mov	r20, r10
    432c:	61 2f       	mov	r22, r17
    432e:	ce 01       	movw	r24, r28
    4330:	0e 94 ce 20 	call	0x419c	; 0x419c <setpixel>

// Draw a rectangle
void drawrect(uint8_t *buff, uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color) 
{
	// Stupidest version - just pixels - but fast with internal buffer!
	for (uint8_t i=x; i<x+w; i++) 
    4334:	1f 5f       	subi	r17, 0xFF	; 255
    4336:	ed cf       	rjmp	.-38     	; 0x4312 <drawrect+0x30>
    4338:	db 2c       	mov	r13, r11
	{
		setpixel(buff, i, y, color);
		setpixel(buff, i, y+h-1, color);
	}
	for (uint8_t i=y; i<y+h; i++) 
    433a:	10 e0       	ldi	r17, 0x00	; 0
    433c:	0b 0d       	add	r16, r11
    433e:	11 1d       	adc	r17, r1
	{
		setpixel(buff, x, i, color);
		setpixel(buff, x+w-1, i, color);
    4340:	cc 24       	eor	r12, r12
    4342:	ca 94       	dec	r12
    4344:	c9 0c       	add	r12, r9
    4346:	cf 0c       	add	r12, r15
	for (uint8_t i=x; i<x+w; i++) 
	{
		setpixel(buff, i, y, color);
		setpixel(buff, i, y+h-1, color);
	}
	for (uint8_t i=y; i<y+h; i++) 
    4348:	8d 2d       	mov	r24, r13
    434a:	90 e0       	ldi	r25, 0x00	; 0
    434c:	80 17       	cp	r24, r16
    434e:	91 07       	cpc	r25, r17
    4350:	74 f4       	brge	.+28     	; 0x436e <drawrect+0x8c>
	{
		setpixel(buff, x, i, color);
    4352:	2e 2d       	mov	r18, r14
    4354:	4d 2d       	mov	r20, r13
    4356:	6f 2d       	mov	r22, r15
    4358:	ce 01       	movw	r24, r28
    435a:	0e 94 ce 20 	call	0x419c	; 0x419c <setpixel>
		setpixel(buff, x+w-1, i, color);
    435e:	2e 2d       	mov	r18, r14
    4360:	4d 2d       	mov	r20, r13
    4362:	6c 2d       	mov	r22, r12
    4364:	ce 01       	movw	r24, r28
    4366:	0e 94 ce 20 	call	0x419c	; 0x419c <setpixel>
	for (uint8_t i=x; i<x+w; i++) 
	{
		setpixel(buff, i, y, color);
		setpixel(buff, i, y+h-1, color);
	}
	for (uint8_t i=y; i<y+h; i++) 
    436a:	d3 94       	inc	r13
    436c:	ed cf       	rjmp	.-38     	; 0x4348 <drawrect+0x66>
	{
		setpixel(buff, x, i, color);
		setpixel(buff, x+w-1, i, color);
	} 
}
    436e:	df 91       	pop	r29
    4370:	cf 91       	pop	r28
    4372:	1f 91       	pop	r17
    4374:	0f 91       	pop	r16
    4376:	ff 90       	pop	r15
    4378:	ef 90       	pop	r14
    437a:	df 90       	pop	r13
    437c:	cf 90       	pop	r12
    437e:	bf 90       	pop	r11
    4380:	af 90       	pop	r10
    4382:	9f 90       	pop	r9
    4384:	08 95       	ret

00004386 <fillcircle>:

// Draw a filled circle
// Edge-clip bug fixed by D. Thompson - 3/2/2014
void fillcircle(uint8_t *buff, uint8_t x0, uint8_t y0, uint8_t r, uint8_t color) 
{
    4386:	4f 92       	push	r4
    4388:	5f 92       	push	r5
    438a:	6f 92       	push	r6
    438c:	7f 92       	push	r7
    438e:	8f 92       	push	r8
    4390:	9f 92       	push	r9
    4392:	af 92       	push	r10
    4394:	bf 92       	push	r11
    4396:	cf 92       	push	r12
    4398:	df 92       	push	r13
    439a:	ef 92       	push	r14
    439c:	ff 92       	push	r15
    439e:	0f 93       	push	r16
    43a0:	1f 93       	push	r17
    43a2:	cf 93       	push	r28
    43a4:	df 93       	push	r29
    43a6:	ec 01       	movw	r28, r24
    43a8:	96 2e       	mov	r9, r22
    43aa:	a4 2e       	mov	r10, r20
	int8_t f = 1 - r;
    43ac:	bb 24       	eor	r11, r11
    43ae:	b3 94       	inc	r11
    43b0:	b2 1a       	sub	r11, r18
	int8_t ddF_x = 1;
	int8_t ddF_y = -2 * r;
    43b2:	82 2e       	mov	r8, r18
    43b4:	81 94       	neg	r8
    43b6:	88 0c       	add	r8, r8
	int8_t x = 0;
	int8_t y = r;
    43b8:	12 2f       	mov	r17, r18
	int8_t i = 0;

	for (i=y0-r; i<=y0+r; i++) 
    43ba:	74 2e       	mov	r7, r20
    43bc:	72 1a       	sub	r7, r18
    43be:	e4 2e       	mov	r14, r20
    43c0:	f1 2c       	mov	r15, r1
    43c2:	67 01       	movw	r12, r14
    43c4:	c2 0e       	add	r12, r18
    43c6:	d1 1c       	adc	r13, r1
    43c8:	87 2d       	mov	r24, r7
    43ca:	99 27       	eor	r25, r25
    43cc:	87 fd       	sbrc	r24, 7
    43ce:	90 95       	com	r25
    43d0:	c8 16       	cp	r12, r24
    43d2:	d9 06       	cpc	r13, r25
    43d4:	44 f0       	brlt	.+16     	; 0x43e6 <fillcircle+0x60>
	{
		setpixel(buff, x0, i, color);
    43d6:	20 2f       	mov	r18, r16
    43d8:	47 2d       	mov	r20, r7
    43da:	69 2d       	mov	r22, r9
    43dc:	ce 01       	movw	r24, r28
    43de:	0e 94 ce 20 	call	0x419c	; 0x419c <setpixel>
    43e2:	73 94       	inc	r7
    43e4:	f1 cf       	rjmp	.-30     	; 0x43c8 <fillcircle+0x42>
	int8_t ddF_y = -2 * r;
	int8_t x = 0;
	int8_t y = r;
	int8_t i = 0;

	for (i=y0-r; i<=y0+r; i++) 
    43e6:	71 2c       	mov	r7, r1
	{
		setpixel(buff, x0, i, color);
	}

	while (x<y) 
    43e8:	71 16       	cp	r7, r17
    43ea:	0c f0       	brlt	.+2      	; 0x43ee <fillcircle+0x68>
    43ec:	4c c0       	rjmp	.+152    	; 0x4486 <fillcircle+0x100>
	{
		if (f >= 0) 
    43ee:	b7 fc       	sbrc	r11, 7
    43f0:	04 c0       	rjmp	.+8      	; 0x43fa <fillcircle+0x74>
		{
			y--;
    43f2:	11 50       	subi	r17, 0x01	; 1
			ddF_y += 2;
    43f4:	83 94       	inc	r8
    43f6:	83 94       	inc	r8
			f += ddF_y;
    43f8:	b8 0c       	add	r11, r8
    43fa:	73 94       	inc	r7
    43fc:	87 2d       	mov	r24, r7
    43fe:	88 0f       	add	r24, r24
    4400:	8f 5f       	subi	r24, 0xFF	; 255
		}

		x++;
		ddF_x += 2;
		f += ddF_x;
    4402:	b8 0e       	add	r11, r24

		for (i=y0-y; i<=y0+y; i++) 
    4404:	6a 2c       	mov	r6, r10
    4406:	61 1a       	sub	r6, r17
    4408:	67 01       	movw	r12, r14
    440a:	c1 0e       	add	r12, r17
    440c:	d1 1c       	adc	r13, r1
    440e:	17 fd       	sbrc	r17, 7
    4410:	da 94       	dec	r13
    4412:	47 2c       	mov	r4, r7
    4414:	49 0c       	add	r4, r9
    4416:	59 2c       	mov	r5, r9
    4418:	57 18       	sub	r5, r7
    441a:	86 2d       	mov	r24, r6
    441c:	99 27       	eor	r25, r25
    441e:	87 fd       	sbrc	r24, 7
    4420:	90 95       	com	r25
    4422:	c8 16       	cp	r12, r24
    4424:	d9 06       	cpc	r13, r25
    4426:	74 f0       	brlt	.+28     	; 0x4444 <fillcircle+0xbe>
		{
			setpixel(buff, x0+x, i, color);
    4428:	20 2f       	mov	r18, r16
    442a:	46 2d       	mov	r20, r6
    442c:	64 2d       	mov	r22, r4
    442e:	ce 01       	movw	r24, r28
    4430:	0e 94 ce 20 	call	0x419c	; 0x419c <setpixel>
			setpixel(buff, x0-x, i, color);
    4434:	20 2f       	mov	r18, r16
    4436:	46 2d       	mov	r20, r6
    4438:	65 2d       	mov	r22, r5
    443a:	ce 01       	movw	r24, r28
    443c:	0e 94 ce 20 	call	0x419c	; 0x419c <setpixel>
    4440:	63 94       	inc	r6
    4442:	eb cf       	rjmp	.-42     	; 0x441a <fillcircle+0x94>
    4444:	6a 2c       	mov	r6, r10
    4446:	67 18       	sub	r6, r7
		} 
		for (i=y0-x; i<=y0+x; i++) 
    4448:	67 01       	movw	r12, r14
    444a:	c7 0c       	add	r12, r7
    444c:	d1 1c       	adc	r13, r1
    444e:	77 fc       	sbrc	r7, 7
    4450:	da 94       	dec	r13
		{
			setpixel(buff, x0+y, i, color);
    4452:	41 2e       	mov	r4, r17
    4454:	49 0c       	add	r4, r9
			setpixel(buff, x0-y, i, color);
    4456:	59 2c       	mov	r5, r9
    4458:	51 1a       	sub	r5, r17
		for (i=y0-y; i<=y0+y; i++) 
		{
			setpixel(buff, x0+x, i, color);
			setpixel(buff, x0-x, i, color);
		} 
		for (i=y0-x; i<=y0+x; i++) 
    445a:	86 2d       	mov	r24, r6
    445c:	99 27       	eor	r25, r25
    445e:	87 fd       	sbrc	r24, 7
    4460:	90 95       	com	r25
    4462:	c8 16       	cp	r12, r24
    4464:	d9 06       	cpc	r13, r25
    4466:	0c f4       	brge	.+2      	; 0x446a <fillcircle+0xe4>
    4468:	bf cf       	rjmp	.-130    	; 0x43e8 <fillcircle+0x62>
		{
			setpixel(buff, x0+y, i, color);
    446a:	20 2f       	mov	r18, r16
    446c:	46 2d       	mov	r20, r6
    446e:	64 2d       	mov	r22, r4
    4470:	ce 01       	movw	r24, r28
    4472:	0e 94 ce 20 	call	0x419c	; 0x419c <setpixel>
			setpixel(buff, x0-y, i, color);
    4476:	20 2f       	mov	r18, r16
    4478:	46 2d       	mov	r20, r6
    447a:	65 2d       	mov	r22, r5
    447c:	ce 01       	movw	r24, r28
    447e:	0e 94 ce 20 	call	0x419c	; 0x419c <setpixel>
    4482:	63 94       	inc	r6
    4484:	ea cf       	rjmp	.-44     	; 0x445a <fillcircle+0xd4>
		}    
	}
}
    4486:	df 91       	pop	r29
    4488:	cf 91       	pop	r28
    448a:	1f 91       	pop	r17
    448c:	0f 91       	pop	r16
    448e:	ff 90       	pop	r15
    4490:	ef 90       	pop	r14
    4492:	df 90       	pop	r13
    4494:	cf 90       	pop	r12
    4496:	bf 90       	pop	r11
    4498:	af 90       	pop	r10
    449a:	9f 90       	pop	r9
    449c:	8f 90       	pop	r8
    449e:	7f 90       	pop	r7
    44a0:	6f 90       	pop	r6
    44a2:	5f 90       	pop	r5
    44a4:	4f 90       	pop	r4
    44a6:	08 95       	ret

000044a8 <LCD_Display_Text>:
//************************************************************

// Print Menuitem from Program memory at a particular location
void LCD_Display_Text (uint16_t menuitem, const unsigned char* font,uint16_t x, uint16_t y)
{
	gLCDprint_Menu_P((char*)pgm_read_word(&text_menu[menuitem]), font, x, y);
    44a8:	88 0f       	add	r24, r24
    44aa:	99 1f       	adc	r25, r25
    44ac:	8c 50       	subi	r24, 0x0C	; 12
    44ae:	92 4f       	sbci	r25, 0xF2	; 242
    44b0:	fc 01       	movw	r30, r24
    44b2:	85 91       	lpm	r24, Z+
    44b4:	94 91       	lpm	r25, Z
}

// Print a string from RAM at a particular location in a particular font
void gLCDprint_Menu_P(const char *s, const unsigned char* font,uint16_t x, uint16_t y)
{
	pgm_mugui_lcd_puts((const unsigned char*)s, font, x, y);
    44b6:	0c 94 95 3e 	jmp	0x7d2a	; 0x7d2a <pgm_mugui_lcd_puts>

000044ba <gLCDprint_Menu_P>:
    44ba:	0c 94 95 3e 	jmp	0x7d2a	; 0x7d2a <pgm_mugui_lcd_puts>

000044be <idle_screen>:
}

// Pop up the Idle screen
void idle_screen(void)
{
	clear_buffer(buffer);
    44be:	85 e0       	ldi	r24, 0x05	; 5
    44c0:	91 e0       	ldi	r25, 0x01	; 1
    44c2:	0e 94 a7 20 	call	0x414e	; 0x414e <clear_buffer>

	// Change Status screen depending on arm mode
	LCD_Display_Text(121,(const unsigned char*)Verdana14,41,3); 	// "Press"
    44c6:	23 e0       	ldi	r18, 0x03	; 3
    44c8:	30 e0       	ldi	r19, 0x00	; 0
    44ca:	49 e2       	ldi	r20, 0x29	; 41
    44cc:	50 e0       	ldi	r21, 0x00	; 0
    44ce:	6f e5       	ldi	r22, 0x5F	; 95
    44d0:	71 e0       	ldi	r23, 0x01	; 1
    44d2:	89 e7       	ldi	r24, 0x79	; 121
    44d4:	90 e0       	ldi	r25, 0x00	; 0
    44d6:	0e 94 54 22 	call	0x44a8	; 0x44a8 <LCD_Display_Text>
	LCD_Display_Text(122,(const unsigned char*)Verdana14,24,23);	// "for status."
    44da:	27 e1       	ldi	r18, 0x17	; 23
    44dc:	30 e0       	ldi	r19, 0x00	; 0
    44de:	48 e1       	ldi	r20, 0x18	; 24
    44e0:	50 e0       	ldi	r21, 0x00	; 0
    44e2:	6f e5       	ldi	r22, 0x5F	; 95
    44e4:	71 e0       	ldi	r23, 0x01	; 1
    44e6:	8a e7       	ldi	r24, 0x7A	; 122
    44e8:	90 e0       	ldi	r25, 0x00	; 0
    44ea:	0e 94 54 22 	call	0x44a8	; 0x44a8 <LCD_Display_Text>
	dummy = (uint16_t)*p;
	mugui_lcd_puts(utoa(dummy,pBuffer,10),(const unsigned char*)Verdana8,105,30);
*/

	// Display most important error
	if ((General_error & (1 << LVA_ALARM)) != 0)					// Low voltage
    44ee:	80 91 22 05 	lds	r24, 0x0522
    44f2:	83 ff       	sbrs	r24, 3
    44f4:	13 c0       	rjmp	.+38     	; 0x451c <idle_screen+0x5e>
	{
		LCD_Display_Text(134,(const unsigned char*)Verdana14,12,43);// "Battery"
    44f6:	2b e2       	ldi	r18, 0x2B	; 43
    44f8:	30 e0       	ldi	r19, 0x00	; 0
    44fa:	4c e0       	ldi	r20, 0x0C	; 12
    44fc:	50 e0       	ldi	r21, 0x00	; 0
    44fe:	6f e5       	ldi	r22, 0x5F	; 95
    4500:	71 e0       	ldi	r23, 0x01	; 1
    4502:	86 e8       	ldi	r24, 0x86	; 134
    4504:	90 e0       	ldi	r25, 0x00	; 0
    4506:	0e 94 54 22 	call	0x44a8	; 0x44a8 <LCD_Display_Text>
		LCD_Display_Text(118,(const unsigned char*)Verdana14,80,43); // "Low"
    450a:	2b e2       	ldi	r18, 0x2B	; 43
    450c:	30 e0       	ldi	r19, 0x00	; 0
    450e:	40 e5       	ldi	r20, 0x50	; 80
    4510:	50 e0       	ldi	r21, 0x00	; 0
    4512:	6f e5       	ldi	r22, 0x5F	; 95
    4514:	71 e0       	ldi	r23, 0x01	; 1
    4516:	86 e7       	ldi	r24, 0x76	; 118
    4518:	90 e0       	ldi	r25, 0x00	; 0
    451a:	41 c0       	rjmp	.+130    	; 0x459e <idle_screen+0xe0>
	}
	
	else if ((General_error & (1 << NO_SIGNAL)) != 0)				// No signal
    451c:	80 91 22 05 	lds	r24, 0x0522
    4520:	81 ff       	sbrs	r24, 1
    4522:	13 c0       	rjmp	.+38     	; 0x454a <idle_screen+0x8c>
	{
		LCD_Display_Text(75,(const unsigned char*)Verdana14,28,43); // "No"
    4524:	2b e2       	ldi	r18, 0x2B	; 43
    4526:	30 e0       	ldi	r19, 0x00	; 0
    4528:	4c e1       	ldi	r20, 0x1C	; 28
    452a:	50 e0       	ldi	r21, 0x00	; 0
    452c:	6f e5       	ldi	r22, 0x5F	; 95
    452e:	71 e0       	ldi	r23, 0x01	; 1
    4530:	8b e4       	ldi	r24, 0x4B	; 75
    4532:	90 e0       	ldi	r25, 0x00	; 0
    4534:	0e 94 54 22 	call	0x44a8	; 0x44a8 <LCD_Display_Text>
		LCD_Display_Text(76,(const unsigned char*)Verdana14,54,43); // "Signal"
    4538:	2b e2       	ldi	r18, 0x2B	; 43
    453a:	30 e0       	ldi	r19, 0x00	; 0
    453c:	46 e3       	ldi	r20, 0x36	; 54
    453e:	50 e0       	ldi	r21, 0x00	; 0
    4540:	6f e5       	ldi	r22, 0x5F	; 95
    4542:	71 e0       	ldi	r23, 0x01	; 1
    4544:	8c e4       	ldi	r24, 0x4C	; 76
    4546:	90 e0       	ldi	r25, 0x00	; 0
    4548:	2a c0       	rjmp	.+84     	; 0x459e <idle_screen+0xe0>
	}
	
	else if ((General_error & (1 << THROTTLE_HIGH)) != 0)			// Throttle high
    454a:	80 91 22 05 	lds	r24, 0x0522
    454e:	80 ff       	sbrs	r24, 0
    4550:	13 c0       	rjmp	.+38     	; 0x4578 <idle_screen+0xba>
	{
		LCD_Display_Text(105,(const unsigned char*)Verdana14,10,43);// "Throttle"
    4552:	2b e2       	ldi	r18, 0x2B	; 43
    4554:	30 e0       	ldi	r19, 0x00	; 0
    4556:	4a e0       	ldi	r20, 0x0A	; 10
    4558:	50 e0       	ldi	r21, 0x00	; 0
    455a:	6f e5       	ldi	r22, 0x5F	; 95
    455c:	71 e0       	ldi	r23, 0x01	; 1
    455e:	89 e6       	ldi	r24, 0x69	; 105
    4560:	90 e0       	ldi	r25, 0x00	; 0
    4562:	0e 94 54 22 	call	0x44a8	; 0x44a8 <LCD_Display_Text>
		LCD_Display_Text(55,(const unsigned char*)Verdana14,81,43);	// "High"
    4566:	2b e2       	ldi	r18, 0x2B	; 43
    4568:	30 e0       	ldi	r19, 0x00	; 0
    456a:	41 e5       	ldi	r20, 0x51	; 81
    456c:	50 e0       	ldi	r21, 0x00	; 0
    456e:	6f e5       	ldi	r22, 0x5F	; 95
    4570:	71 e0       	ldi	r23, 0x01	; 1
    4572:	87 e3       	ldi	r24, 0x37	; 55
    4574:	90 e0       	ldi	r25, 0x00	; 0
    4576:	13 c0       	rjmp	.+38     	; 0x459e <idle_screen+0xe0>
	}
	
	else if ((General_error & (1 << DISARMED)) != 0)				// Disarmed
    4578:	80 91 22 05 	lds	r24, 0x0522
	{
		LCD_Display_Text(139,(const unsigned char*)Verdana14,20,43);// "(Disarmed)"
    457c:	2b e2       	ldi	r18, 0x2B	; 43
    457e:	30 e0       	ldi	r19, 0x00	; 0
	{
		LCD_Display_Text(105,(const unsigned char*)Verdana14,10,43);// "Throttle"
		LCD_Display_Text(55,(const unsigned char*)Verdana14,81,43);	// "High"
	}
	
	else if ((General_error & (1 << DISARMED)) != 0)				// Disarmed
    4580:	82 ff       	sbrs	r24, 2
    4582:	07 c0       	rjmp	.+14     	; 0x4592 <idle_screen+0xd4>
	{
		LCD_Display_Text(139,(const unsigned char*)Verdana14,20,43);// "(Disarmed)"
    4584:	44 e1       	ldi	r20, 0x14	; 20
    4586:	50 e0       	ldi	r21, 0x00	; 0
    4588:	6f e5       	ldi	r22, 0x5F	; 95
    458a:	71 e0       	ldi	r23, 0x01	; 1
    458c:	8b e8       	ldi	r24, 0x8B	; 139
    458e:	90 e0       	ldi	r25, 0x00	; 0
    4590:	06 c0       	rjmp	.+12     	; 0x459e <idle_screen+0xe0>
	}
	else
	{
		LCD_Display_Text(138,(const unsigned char*)Verdana14,28,43);// "(Armed)"
    4592:	4c e1       	ldi	r20, 0x1C	; 28
    4594:	50 e0       	ldi	r21, 0x00	; 0
    4596:	6f e5       	ldi	r22, 0x5F	; 95
    4598:	71 e0       	ldi	r23, 0x01	; 1
    459a:	8a e8       	ldi	r24, 0x8A	; 138
    459c:	90 e0       	ldi	r25, 0x00	; 0
    459e:	0e 94 54 22 	call	0x44a8	; 0x44a8 <LCD_Display_Text>
	}

	write_buffer(buffer);
    45a2:	85 e0       	ldi	r24, 0x05	; 5
    45a4:	91 e0       	ldi	r25, 0x01	; 1
    45a6:	0c 94 75 20 	jmp	0x40ea	; 0x40ea <write_buffer>

000045aa <get_raw_gyros>:
		gyroADC[i] *= (int8_t)pgm_read_byte(&Gyro_Pol[Config.Orientation][i]);
	}
}

void get_raw_gyros(void)
{
    45aa:	cf 93       	push	r28
    45ac:	df 93       	push	r29
    45ae:	cd b7       	in	r28, 0x3d	; 61
    45b0:	de b7       	in	r29, 0x3e	; 62
    45b2:	2c 97       	sbiw	r28, 0x0c	; 12
    45b4:	0f b6       	in	r0, 0x3f	; 63
    45b6:	f8 94       	cli
    45b8:	de bf       	out	0x3e, r29	; 62
    45ba:	0f be       	out	0x3f, r0	; 63
    45bc:	cd bf       	out	0x3d, r28	; 61
	uint8_t i;
	uint8_t Gyros[6];
	int16_t temp1, temp2;

	// Get the i2c data from the MPU6050
	readI2CbyteArray(MPU60X0_DEFAULT_ADDRESS,MPU60X0_RA_GYRO_XOUT_H,(uint8_t *)Gyros,6);
    45be:	26 e0       	ldi	r18, 0x06	; 6
    45c0:	ae 01       	movw	r20, r28
    45c2:	4f 5f       	subi	r20, 0xFF	; 255
    45c4:	5f 4f       	sbci	r21, 0xFF	; 255
    45c6:	63 e4       	ldi	r22, 0x43	; 67
    45c8:	80 ed       	ldi	r24, 0xD0	; 208
    45ca:	0e 94 c9 24 	call	0x4992	; 0x4992 <readI2CbyteArray>

	// Reassemble data into gyroADC array and down-sample to reduce resolution and noise
	temp1 = Gyros[0] << 8;
    45ce:	89 81       	ldd	r24, Y+1	; 0x01
    45d0:	90 e0       	ldi	r25, 0x00	; 0
    45d2:	98 2f       	mov	r25, r24
    45d4:	88 27       	eor	r24, r24
	temp2 = Gyros[1];
    45d6:	2a 81       	ldd	r18, Y+2	; 0x02
	RawADC[PITCH] = (temp1 + temp2) >> GYRODIV;
    45d8:	82 0f       	add	r24, r18
    45da:	91 1d       	adc	r25, r1
    45dc:	34 e0       	ldi	r19, 0x04	; 4
    45de:	95 95       	asr	r25
    45e0:	87 95       	ror	r24
    45e2:	3a 95       	dec	r19
    45e4:	e1 f7       	brne	.-8      	; 0x45de <get_raw_gyros+0x34>
    45e6:	9a 87       	std	Y+10, r25	; 0x0a
    45e8:	89 87       	std	Y+9, r24	; 0x09

	temp1 = Gyros[2] << 8;
    45ea:	8b 81       	ldd	r24, Y+3	; 0x03
    45ec:	90 e0       	ldi	r25, 0x00	; 0
    45ee:	98 2f       	mov	r25, r24
    45f0:	88 27       	eor	r24, r24
	temp2 = Gyros[3];
    45f2:	2c 81       	ldd	r18, Y+4	; 0x04
	RawADC[ROLL] = (temp1 + temp2) >> GYRODIV;
    45f4:	82 0f       	add	r24, r18
    45f6:	91 1d       	adc	r25, r1
    45f8:	54 e0       	ldi	r21, 0x04	; 4
    45fa:	95 95       	asr	r25
    45fc:	87 95       	ror	r24
    45fe:	5a 95       	dec	r21
    4600:	e1 f7       	brne	.-8      	; 0x45fa <get_raw_gyros+0x50>
    4602:	98 87       	std	Y+8, r25	; 0x08
    4604:	8f 83       	std	Y+7, r24	; 0x07

	temp1 = Gyros[4] << 8;
    4606:	8d 81       	ldd	r24, Y+5	; 0x05
    4608:	90 e0       	ldi	r25, 0x00	; 0
    460a:	98 2f       	mov	r25, r24
    460c:	88 27       	eor	r24, r24
	temp2 = Gyros[5];
    460e:	2e 81       	ldd	r18, Y+6	; 0x06
	RawADC[YAW] = (temp1 + temp2) >> GYRODIV;
    4610:	82 0f       	add	r24, r18
    4612:	91 1d       	adc	r25, r1
    4614:	74 e0       	ldi	r23, 0x04	; 4
    4616:	95 95       	asr	r25
    4618:	87 95       	ror	r24
    461a:	7a 95       	dec	r23
    461c:	e1 f7       	brne	.-8      	; 0x4616 <get_raw_gyros+0x6c>
    461e:	9c 87       	std	Y+12, r25	; 0x0c
    4620:	8b 87       	std	Y+11, r24	; 0x0b

	// Reorient the data as per the board orientation	
	for (i=0; i<NUMBEROFAXIS; i++)
	{
		// Rearrange the sensors
		gyroADC[i] 	= RawADC[(int8_t)pgm_read_byte(&Gyro_RPY_Order[Config.Orientation][i])];
    4622:	20 91 39 06 	lds	r18, 0x0639
    4626:	a3 e7       	ldi	r26, 0x73	; 115
    4628:	b5 e0       	ldi	r27, 0x05	; 5
    462a:	43 e0       	ldi	r20, 0x03	; 3
    462c:	24 02       	muls	r18, r20
    462e:	90 01       	movw	r18, r0
    4630:	11 24       	eor	r1, r1
    4632:	80 e0       	ldi	r24, 0x00	; 0
    4634:	90 e0       	ldi	r25, 0x00	; 0
    4636:	21 54       	subi	r18, 0x41	; 65
    4638:	38 4e       	sbci	r19, 0xE8	; 232
    463a:	f9 01       	movw	r30, r18
    463c:	e8 0f       	add	r30, r24
    463e:	f9 1f       	adc	r31, r25
    4640:	e4 91       	lpm	r30, Z
    4642:	ee 0f       	add	r30, r30
    4644:	ff 0b       	sbc	r31, r31
    4646:	41 e0       	ldi	r20, 0x01	; 1
    4648:	50 e0       	ldi	r21, 0x00	; 0
    464a:	4c 0f       	add	r20, r28
    464c:	5d 1f       	adc	r21, r29
    464e:	e4 0f       	add	r30, r20
    4650:	f5 1f       	adc	r31, r21
    4652:	46 81       	ldd	r20, Z+6	; 0x06
    4654:	57 81       	ldd	r21, Z+7	; 0x07
    4656:	4d 93       	st	X+, r20
    4658:	5d 93       	st	X+, r21
    465a:	01 96       	adiw	r24, 0x01	; 1
	temp1 = Gyros[4] << 8;
	temp2 = Gyros[5];
	RawADC[YAW] = (temp1 + temp2) >> GYRODIV;

	// Reorient the data as per the board orientation	
	for (i=0; i<NUMBEROFAXIS; i++)
    465c:	83 30       	cpi	r24, 0x03	; 3
    465e:	91 05       	cpc	r25, r1
    4660:	61 f7       	brne	.-40     	; 0x463a <get_raw_gyros+0x90>
	{
		// Rearrange the sensors
		gyroADC[i] 	= RawADC[(int8_t)pgm_read_byte(&Gyro_RPY_Order[Config.Orientation][i])];
	}
}
    4662:	2c 96       	adiw	r28, 0x0c	; 12
    4664:	0f b6       	in	r0, 0x3f	; 63
    4666:	f8 94       	cli
    4668:	de bf       	out	0x3e, r29	; 62
    466a:	0f be       	out	0x3f, r0	; 63
    466c:	cd bf       	out	0x3d, r28	; 61
    466e:	df 91       	pop	r29
    4670:	cf 91       	pop	r28
    4672:	08 95       	ret

00004674 <ReadGyros>:
//************************************************************

int16_t gyroADC[NUMBEROFAXIS];			// Holds Gyro ADCs

void ReadGyros(void)					// Conventional orientation
{
    4674:	1f 93       	push	r17
    4676:	cf 93       	push	r28
    4678:	df 93       	push	r29
	uint8_t i;

	get_raw_gyros();					// Updates gyroADC[]
    467a:	0e 94 d5 22 	call	0x45aa	; 0x45aa <get_raw_gyros>
	{
		// Remove offsets from gyro outputs
		gyroADC[i] -= Config.gyroZero[i];

		// Change polarity
		gyroADC[i] *= (int8_t)pgm_read_byte(&Gyro_Pol[Config.Orientation][i]);
    467e:	20 91 39 06 	lds	r18, 0x0639
    4682:	c7 ea       	ldi	r28, 0xA7	; 167
    4684:	d7 e0       	ldi	r29, 0x07	; 7
    4686:	a3 e7       	ldi	r26, 0x73	; 115
    4688:	b5 e0       	ldi	r27, 0x05	; 5
    468a:	83 e0       	ldi	r24, 0x03	; 3
    468c:	28 02       	muls	r18, r24
    468e:	90 01       	movw	r18, r0
    4690:	11 24       	eor	r1, r1
    4692:	80 e0       	ldi	r24, 0x00	; 0
    4694:	90 e0       	ldi	r25, 0x00	; 0
    4696:	23 55       	subi	r18, 0x53	; 83
    4698:	38 4e       	sbci	r19, 0xE8	; 232
	get_raw_gyros();					// Updates gyroADC[]

	for (i=0; i<NUMBEROFAXIS; i++)	
	{
		// Remove offsets from gyro outputs
		gyroADC[i] -= Config.gyroZero[i];
    469a:	69 91       	ld	r22, Y+
    469c:	79 91       	ld	r23, Y+
    469e:	f9 01       	movw	r30, r18
    46a0:	e8 0f       	add	r30, r24
    46a2:	f9 1f       	adc	r31, r25

		// Change polarity
		gyroADC[i] *= (int8_t)pgm_read_byte(&Gyro_Pol[Config.Orientation][i]);
    46a4:	14 91       	lpm	r17, Z
	get_raw_gyros();					// Updates gyroADC[]

	for (i=0; i<NUMBEROFAXIS; i++)	
	{
		// Remove offsets from gyro outputs
		gyroADC[i] -= Config.gyroZero[i];
    46a6:	4d 91       	ld	r20, X+
    46a8:	5c 91       	ld	r21, X
    46aa:	11 97       	sbiw	r26, 0x01	; 1
    46ac:	46 1b       	sub	r20, r22
    46ae:	57 0b       	sbc	r21, r23

		// Change polarity
		gyroADC[i] *= (int8_t)pgm_read_byte(&Gyro_Pol[Config.Orientation][i]);
    46b0:	14 03       	mulsu	r17, r20
    46b2:	b0 01       	movw	r22, r0
    46b4:	15 9f       	mul	r17, r21
    46b6:	70 0d       	add	r23, r0
    46b8:	11 24       	eor	r1, r1
    46ba:	6d 93       	st	X+, r22
    46bc:	7d 93       	st	X+, r23
    46be:	01 96       	adiw	r24, 0x01	; 1
{
	uint8_t i;

	get_raw_gyros();					// Updates gyroADC[]

	for (i=0; i<NUMBEROFAXIS; i++)	
    46c0:	83 30       	cpi	r24, 0x03	; 3
    46c2:	91 05       	cpc	r25, r1
    46c4:	51 f7       	brne	.-44     	; 0x469a <ReadGyros+0x26>
		gyroADC[i] -= Config.gyroZero[i];

		// Change polarity
		gyroADC[i] *= (int8_t)pgm_read_byte(&Gyro_Pol[Config.Orientation][i]);
	}
}
    46c6:	df 91       	pop	r29
    46c8:	cf 91       	pop	r28
    46ca:	1f 91       	pop	r17
    46cc:	08 95       	ret

000046ce <CalibrateGyrosFast>:
//***************************************************************
// Calibration routines
//***************************************************************

void CalibrateGyrosFast(void)
{
    46ce:	cf 93       	push	r28
	uint8_t i;

	// Clear gyro zeros
	memset(&Config.gyroZero[ROLL],0,(sizeof(int16_t) * NUMBEROFAXIS));
    46d0:	86 e0       	ldi	r24, 0x06	; 6
    46d2:	e7 ea       	ldi	r30, 0xA7	; 167
    46d4:	f7 e0       	ldi	r31, 0x07	; 7
    46d6:	df 01       	movw	r26, r30
    46d8:	1d 92       	st	X+, r1
    46da:	8a 95       	dec	r24
    46dc:	e9 f7       	brne	.-6      	; 0x46d8 <CalibrateGyrosFast+0xa>
    46de:	c0 e2       	ldi	r28, 0x20	; 32

	// Calculate average over 32 reads
	for (i=0; i<32; i++)
	{
		get_raw_gyros();				// Updates gyroADC[]
    46e0:	0e 94 d5 22 	call	0x45aa	; 0x45aa <get_raw_gyros>

		Config.gyroZero[ROLL] 	+= gyroADC[ROLL];						
    46e4:	40 91 a7 07 	lds	r20, 0x07A7
    46e8:	50 91 a8 07 	lds	r21, 0x07A8
    46ec:	80 91 73 05 	lds	r24, 0x0573
    46f0:	90 91 74 05 	lds	r25, 0x0574
    46f4:	48 0f       	add	r20, r24
    46f6:	59 1f       	adc	r21, r25
    46f8:	50 93 a8 07 	sts	0x07A8, r21
    46fc:	40 93 a7 07 	sts	0x07A7, r20
		Config.gyroZero[PITCH] 	+= gyroADC[PITCH];	
    4700:	20 91 a9 07 	lds	r18, 0x07A9
    4704:	30 91 aa 07 	lds	r19, 0x07AA
    4708:	80 91 75 05 	lds	r24, 0x0575
    470c:	90 91 76 05 	lds	r25, 0x0576
    4710:	28 0f       	add	r18, r24
    4712:	39 1f       	adc	r19, r25
    4714:	30 93 aa 07 	sts	0x07AA, r19
    4718:	20 93 a9 07 	sts	0x07A9, r18
		Config.gyroZero[YAW] 	+= gyroADC[YAW];
    471c:	80 91 ab 07 	lds	r24, 0x07AB
    4720:	90 91 ac 07 	lds	r25, 0x07AC
    4724:	60 91 77 05 	lds	r22, 0x0577
    4728:	70 91 78 05 	lds	r23, 0x0578
    472c:	86 0f       	add	r24, r22
    472e:	97 1f       	adc	r25, r23
    4730:	90 93 ac 07 	sts	0x07AC, r25
    4734:	80 93 ab 07 	sts	0x07AB, r24
    4738:	c1 50       	subi	r28, 0x01	; 1

	// Clear gyro zeros
	memset(&Config.gyroZero[ROLL],0,(sizeof(int16_t) * NUMBEROFAXIS));

	// Calculate average over 32 reads
	for (i=0; i<32; i++)
    473a:	91 f6       	brne	.-92     	; 0x46e0 <CalibrateGyrosFast+0x12>
	}

	// Average readings for all axis
	for (i=0; i<NUMBEROFAXIS; i++)
	{
		Config.gyroZero[i] 	= (Config.gyroZero[i] >> 5);	// Divide by 32	
    473c:	e5 e0       	ldi	r30, 0x05	; 5
    473e:	55 95       	asr	r21
    4740:	47 95       	ror	r20
    4742:	ea 95       	dec	r30
    4744:	e1 f7       	brne	.-8      	; 0x473e <CalibrateGyrosFast+0x70>
    4746:	50 93 a8 07 	sts	0x07A8, r21
    474a:	40 93 a7 07 	sts	0x07A7, r20
    474e:	f5 e0       	ldi	r31, 0x05	; 5
    4750:	35 95       	asr	r19
    4752:	27 95       	ror	r18
    4754:	fa 95       	dec	r31
    4756:	e1 f7       	brne	.-8      	; 0x4750 <CalibrateGyrosFast+0x82>
    4758:	30 93 aa 07 	sts	0x07AA, r19
    475c:	20 93 a9 07 	sts	0x07A9, r18
    4760:	a5 e0       	ldi	r26, 0x05	; 5
    4762:	95 95       	asr	r25
    4764:	87 95       	ror	r24
    4766:	aa 95       	dec	r26
    4768:	e1 f7       	brne	.-8      	; 0x4762 <CalibrateGyrosFast+0x94>
    476a:	90 93 ac 07 	sts	0x07AC, r25
    476e:	80 93 ab 07 	sts	0x07AB, r24
	}

	Save_Config_to_EEPROM();
}
    4772:	cf 91       	pop	r28
	for (i=0; i<NUMBEROFAXIS; i++)
	{
		Config.gyroZero[i] 	= (Config.gyroZero[i] >> 5);	// Divide by 32	
	}

	Save_Config_to_EEPROM();
    4774:	0c 94 6b 16 	jmp	0x2cd6	; 0x2cd6 <Save_Config_to_EEPROM>

00004778 <CalibrateGyrosSlow>:
}

bool CalibrateGyrosSlow(void)
{
    4778:	2f 92       	push	r2
    477a:	3f 92       	push	r3
    477c:	4f 92       	push	r4
    477e:	5f 92       	push	r5
    4780:	6f 92       	push	r6
    4782:	7f 92       	push	r7
    4784:	8f 92       	push	r8
    4786:	9f 92       	push	r9
    4788:	af 92       	push	r10
    478a:	bf 92       	push	r11
    478c:	cf 92       	push	r12
    478e:	df 92       	push	r13
    4790:	ef 92       	push	r14
    4792:	ff 92       	push	r15
    4794:	0f 93       	push	r16
    4796:	1f 93       	push	r17
    4798:	cf 93       	push	r28
    479a:	df 93       	push	r29
    479c:	cd b7       	in	r28, 0x3d	; 61
    479e:	de b7       	in	r29, 0x3e	; 62
    47a0:	65 97       	sbiw	r28, 0x15	; 21
    47a2:	0f b6       	in	r0, 0x3f	; 63
    47a4:	f8 94       	cli
    47a6:	de bf       	out	0x3e, r29	; 62
    47a8:	0f be       	out	0x3f, r0	; 63
    47aa:	cd bf       	out	0x3d, r28	; 61
	float 		GyroSmooth[NUMBEROFAXIS];
	int16_t		GyroOld[NUMBEROFAXIS] = {0,0,0};
    47ac:	1e 86       	std	Y+14, r1	; 0x0e
    47ae:	1d 86       	std	Y+13, r1	; 0x0d
    47b0:	18 8a       	std	Y+16, r1	; 0x10
    47b2:	1f 86       	std	Y+15, r1	; 0x0f
    47b4:	1a 8a       	std	Y+18, r1	; 0x12
    47b6:	19 8a       	std	Y+17, r1	; 0x11
	uint8_t		Gyro_TCNT2 = 0;
	bool		Gyros_Stable = false;

	// Populate Config.gyroZero[] with ballpark figures
	// This makes slow calibrate on much faster
	CalibrateGyrosFast();	
    47b8:	0e 94 67 23 	call	0x46ce	; 0x46ce <CalibrateGyrosFast>
	
	// Optimise starting point for each board
	for (axis = 0; axis < NUMBEROFAXIS; axis++)
	{
		GyroSmooth[axis] = Config.gyroZero[axis];			
    47bc:	60 91 a7 07 	lds	r22, 0x07A7
    47c0:	70 91 a8 07 	lds	r23, 0x07A8
    47c4:	88 27       	eor	r24, r24
    47c6:	77 fd       	sbrc	r23, 7
    47c8:	80 95       	com	r24
    47ca:	98 2f       	mov	r25, r24
    47cc:	0e 94 4d 47 	call	0x8e9a	; 0x8e9a <__floatsisf>
    47d0:	69 83       	std	Y+1, r22	; 0x01
    47d2:	7a 83       	std	Y+2, r23	; 0x02
    47d4:	8b 83       	std	Y+3, r24	; 0x03
    47d6:	9c 83       	std	Y+4, r25	; 0x04
    47d8:	60 91 a9 07 	lds	r22, 0x07A9
    47dc:	70 91 aa 07 	lds	r23, 0x07AA
    47e0:	88 27       	eor	r24, r24
    47e2:	77 fd       	sbrc	r23, 7
    47e4:	80 95       	com	r24
    47e6:	98 2f       	mov	r25, r24
    47e8:	0e 94 4d 47 	call	0x8e9a	; 0x8e9a <__floatsisf>
    47ec:	6d 83       	std	Y+5, r22	; 0x05
    47ee:	7e 83       	std	Y+6, r23	; 0x06
    47f0:	8f 83       	std	Y+7, r24	; 0x07
    47f2:	98 87       	std	Y+8, r25	; 0x08
    47f4:	60 91 ab 07 	lds	r22, 0x07AB
    47f8:	70 91 ac 07 	lds	r23, 0x07AC
    47fc:	88 27       	eor	r24, r24
    47fe:	77 fd       	sbrc	r23, 7
    4800:	80 95       	com	r24
    4802:	98 2f       	mov	r25, r24
    4804:	0e 94 4d 47 	call	0x8e9a	; 0x8e9a <__floatsisf>
    4808:	69 87       	std	Y+9, r22	; 0x09
    480a:	7a 87       	std	Y+10, r23	; 0x0a
    480c:	8b 87       	std	Y+11, r24	; 0x0b
    480e:	9c 87       	std	Y+12, r25	; 0x0c
    4810:	1d 8a       	std	Y+21, r1	; 0x15
    4812:	1b 8a       	std	Y+19, r1	; 0x13
    4814:	e1 2c       	mov	r14, r1
    4816:	f1 2c       	mov	r15, r1
    4818:	00 e0       	ldi	r16, 0x00	; 0
    481a:	10 e0       	ldi	r17, 0x00	; 0
	
	// Wait until gyros stable. Timeout after CAL_TIMEOUT seconds
	while (!Gyros_Stable && ((Gyro_seconds <= CAL_TIMEOUT)))
	{
		// Update status timeout
		Gyro_timeout += (uint8_t)(TCNT2 - Gyro_TCNT2);
    481c:	80 91 b2 00 	lds	r24, 0x00B2
    4820:	9d 89       	ldd	r25, Y+21	; 0x15
    4822:	89 1b       	sub	r24, r25
    4824:	e8 0e       	add	r14, r24
    4826:	f1 1c       	adc	r15, r1
		Gyro_TCNT2 = TCNT2;
    4828:	e0 91 b2 00 	lds	r30, 0x00B2
    482c:	ed 8b       	std	Y+21, r30	; 0x15

		// Count elapsed seconds
		if (Gyro_timeout > SECOND_TIMER)
    482e:	fc e4       	ldi	r31, 0x4C	; 76
    4830:	ef 16       	cp	r14, r31
    4832:	ff 06       	cpc	r15, r31
    4834:	28 f0       	brcs	.+10     	; 0x4840 <CalibrateGyrosSlow+0xc8>
		{
			Gyro_seconds++;
    4836:	8b 89       	ldd	r24, Y+19	; 0x13
    4838:	8f 5f       	subi	r24, 0xFF	; 255
    483a:	8b 8b       	std	Y+19, r24	; 0x13
			Gyro_timeout = 0;
    483c:	e1 2c       	mov	r14, r1
    483e:	f1 2c       	mov	r15, r1
		}

		get_raw_gyros();
    4840:	0e 94 d5 22 	call	0x45aa	; 0x45aa <get_raw_gyros>
    4844:	fe 01       	movw	r30, r28
    4846:	31 96       	adiw	r30, 0x01	; 1
    4848:	6f 01       	movw	r12, r30
    484a:	b3 e7       	ldi	r27, 0x73	; 115
    484c:	2b 2e       	mov	r2, r27
    484e:	b5 e0       	ldi	r27, 0x05	; 5
    4850:	3b 2e       	mov	r3, r27
    4852:	ce 01       	movw	r24, r28
    4854:	0d 96       	adiw	r24, 0x0d	; 13
    4856:	5c 01       	movw	r10, r24

		// Calculate very long rolling average
		for (axis = 0; axis < NUMBEROFAXIS; axis++) 
    4858:	1c 8a       	std	Y+20, r1	; 0x14
		{
			GyroSmooth[axis] = ((GyroSmooth[axis] * (float)999) + (float)(gyroADC[axis])) / (float)1000;
    485a:	f1 01       	movw	r30, r2
    485c:	81 90       	ld	r8, Z+
    485e:	91 90       	ld	r9, Z+
    4860:	1f 01       	movw	r2, r30
    4862:	20 e0       	ldi	r18, 0x00	; 0
    4864:	30 ec       	ldi	r19, 0xC0	; 192
    4866:	49 e7       	ldi	r20, 0x79	; 121
    4868:	54 e4       	ldi	r21, 0x44	; 68
    486a:	f6 01       	movw	r30, r12
    486c:	60 81       	ld	r22, Z
    486e:	71 81       	ldd	r23, Z+1	; 0x01
    4870:	82 81       	ldd	r24, Z+2	; 0x02
    4872:	93 81       	ldd	r25, Z+3	; 0x03
    4874:	0e 94 01 48 	call	0x9002	; 0x9002 <__mulsf3>
    4878:	2b 01       	movw	r4, r22
    487a:	3c 01       	movw	r6, r24
    487c:	b4 01       	movw	r22, r8
    487e:	88 27       	eor	r24, r24
    4880:	77 fd       	sbrc	r23, 7
    4882:	80 95       	com	r24
    4884:	98 2f       	mov	r25, r24
    4886:	0e 94 4d 47 	call	0x8e9a	; 0x8e9a <__floatsisf>
    488a:	9b 01       	movw	r18, r22
    488c:	ac 01       	movw	r20, r24
    488e:	c3 01       	movw	r24, r6
    4890:	b2 01       	movw	r22, r4
    4892:	0e 94 4a 46 	call	0x8c94	; 0x8c94 <__addsf3>
    4896:	20 e0       	ldi	r18, 0x00	; 0
    4898:	30 e0       	ldi	r19, 0x00	; 0
    489a:	4a e7       	ldi	r20, 0x7A	; 122
    489c:	54 e4       	ldi	r21, 0x44	; 68
    489e:	0e 94 b2 46 	call	0x8d64	; 0x8d64 <__divsf3>
    48a2:	f6 01       	movw	r30, r12
    48a4:	60 83       	st	Z, r22
    48a6:	71 83       	std	Z+1, r23	; 0x01
    48a8:	82 83       	std	Z+2, r24	; 0x02
    48aa:	93 83       	std	Z+3, r25	; 0x03
			
			// See if changing
			if (GyroOld[axis] != (int16_t)GyroSmooth[axis])
    48ac:	0e 94 1a 47 	call	0x8e34	; 0x8e34 <__fixsfsi>
    48b0:	f5 01       	movw	r30, r10
    48b2:	20 81       	ld	r18, Z
    48b4:	31 81       	ldd	r19, Z+1	; 0x01
    48b6:	26 17       	cp	r18, r22
    48b8:	37 07       	cpc	r19, r23
    48ba:	11 f0       	breq	.+4      	; 0x48c0 <CalibrateGyrosSlow+0x148>
			{
				Gyros_Stable = false;
				Stable_counter = 0;
    48bc:	00 e0       	ldi	r16, 0x00	; 0
    48be:	10 e0       	ldi	r17, 0x00	; 0
			}
		
			// Save old reading
			GyroOld[axis] = (int16_t)GyroSmooth[axis];
    48c0:	f5 01       	movw	r30, r10
    48c2:	61 93       	st	Z+, r22
    48c4:	71 93       	st	Z+, r23
    48c6:	5f 01       	movw	r10, r30
		}

		get_raw_gyros();

		// Calculate very long rolling average
		for (axis = 0; axis < NUMBEROFAXIS; axis++) 
    48c8:	fc 89       	ldd	r31, Y+20	; 0x14
    48ca:	ff 5f       	subi	r31, 0xFF	; 255
    48cc:	fc 8b       	std	Y+20, r31	; 0x14
    48ce:	84 e0       	ldi	r24, 0x04	; 4
    48d0:	c8 0e       	add	r12, r24
    48d2:	d1 1c       	adc	r13, r1
    48d4:	f3 30       	cpi	r31, 0x03	; 3
    48d6:	09 f6       	brne	.-126    	; 0x485a <CalibrateGyrosSlow+0xe2>
			// Save old reading
			GyroOld[axis] = (int16_t)GyroSmooth[axis];
		}
		
		// Increment stable counter to measure how long we are still
		Stable_counter++;
    48d8:	0f 5f       	subi	r16, 0xFF	; 255
    48da:	1f 4f       	sbci	r17, 0xFF	; 255
		
		// If stable for 5 seconds, do a quick calibrate
		if (Stable_counter > CAL_STABLE_TIME)
    48dc:	09 3c       	cpi	r16, 0xC9	; 201
    48de:	11 05       	cpc	r17, r1
    48e0:	20 f0       	brcs	.+8      	; 0x48ea <CalibrateGyrosSlow+0x172>
		{
			Gyros_Stable = true;	
			CalibrateGyrosFast();		
    48e2:	0e 94 67 23 	call	0x46ce	; 0x46ce <CalibrateGyrosFast>
		Stable_counter++;
		
		// If stable for 5 seconds, do a quick calibrate
		if (Stable_counter > CAL_STABLE_TIME)
		{
			Gyros_Stable = true;	
    48e6:	81 e0       	ldi	r24, 0x01	; 1
    48e8:	01 c0       	rjmp	.+2      	; 0x48ec <CalibrateGyrosSlow+0x174>
    48ea:	80 e0       	ldi	r24, 0x00	; 0
    48ec:	e7 e8       	ldi	r30, 0x87	; 135
    48ee:	f3 e1       	ldi	r31, 0x13	; 19
    48f0:	31 97       	sbiw	r30, 0x01	; 1
    48f2:	f1 f7       	brne	.-4      	; 0x48f0 <CalibrateGyrosSlow+0x178>
    48f4:	00 c0       	rjmp	.+0      	; 0x48f6 <CalibrateGyrosSlow+0x17e>
    48f6:	00 00       	nop
	{
		GyroSmooth[axis] = Config.gyroZero[axis];			
	}
	
	// Wait until gyros stable. Timeout after CAL_TIMEOUT seconds
	while (!Gyros_Stable && ((Gyro_seconds <= CAL_TIMEOUT)))
    48f8:	81 11       	cpse	r24, r1
    48fa:	04 c0       	rjmp	.+8      	; 0x4904 <CalibrateGyrosSlow+0x18c>
    48fc:	fb 89       	ldd	r31, Y+19	; 0x13
    48fe:	f6 30       	cpi	r31, 0x06	; 6
    4900:	08 f4       	brcc	.+2      	; 0x4904 <CalibrateGyrosSlow+0x18c>
    4902:	8c cf       	rjmp	.-232    	; 0x481c <CalibrateGyrosSlow+0xa4>
		// Otherwise the original saved values are used
	}
	
	// Return success or failure
	return(Gyros_Stable);
}
    4904:	65 96       	adiw	r28, 0x15	; 21
    4906:	0f b6       	in	r0, 0x3f	; 63
    4908:	f8 94       	cli
    490a:	de bf       	out	0x3e, r29	; 62
    490c:	0f be       	out	0x3f, r0	; 63
    490e:	cd bf       	out	0x3d, r28	; 61
    4910:	df 91       	pop	r29
    4912:	cf 91       	pop	r28
    4914:	1f 91       	pop	r17
    4916:	0f 91       	pop	r16
    4918:	ff 90       	pop	r15
    491a:	ef 90       	pop	r14
    491c:	df 90       	pop	r13
    491e:	cf 90       	pop	r12
    4920:	bf 90       	pop	r11
    4922:	af 90       	pop	r10
    4924:	9f 90       	pop	r9
    4926:	8f 90       	pop	r8
    4928:	7f 90       	pop	r7
    492a:	6f 90       	pop	r6
    492c:	5f 90       	pop	r5
    492e:	4f 90       	pop	r4
    4930:	3f 90       	pop	r3
    4932:	2f 90       	pop	r2
    4934:	08 95       	ret

00004936 <init_i2c_gyros>:
//***************************************************************

void init_i2c_gyros(void)
{
	// First, configure the MPU6050
	writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_PWR_MGMT_1, 0x01); 			// Gyro X clock, awake
    4936:	41 e0       	ldi	r20, 0x01	; 1
    4938:	6b e6       	ldi	r22, 0x6B	; 107
    493a:	80 ed       	ldi	r24, 0xD0	; 208
    493c:	0e 94 b2 24 	call	0x4964	; 0x4964 <writeI2Cbyte>
	
	// Make INT pin open-drain so that we can connect it straight to the MPU
	writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_INT_PIN_CFG, 0x40);			// INT output is open-drain
    4940:	40 e4       	ldi	r20, 0x40	; 64
    4942:	67 e3       	ldi	r22, 0x37	; 55
    4944:	80 ed       	ldi	r24, 0xD0	; 208
    4946:	0e 94 b2 24 	call	0x4964	; 0x4964 <writeI2Cbyte>
	
	// MPU6050's internal LPF. Values are 0x06 = 5Hz, (5)10Hz, (4)21Hz, (3)44Hz, (2)94Hz, (1)184Hz LPF, (0)260Hz
	// Software's values are 0 to 6 = 5Hz to 260Hz, so numbering is reversed here.
	writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_CONFIG, (6 - Config.MPU6050_LPF));
    494a:	46 e0       	ldi	r20, 0x06	; 6
    494c:	80 91 3e 06 	lds	r24, 0x063E
    4950:	48 1b       	sub	r20, r24
    4952:	6a e1       	ldi	r22, 0x1A	; 26
    4954:	80 ed       	ldi	r24, 0xD0	; 208
    4956:	0e 94 b2 24 	call	0x4964	; 0x4964 <writeI2Cbyte>
	
	// Now configure gyros
	writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_GYRO_CONFIG, GYROFS2000DEG);	// 2000 deg/sec
    495a:	48 e1       	ldi	r20, 0x18	; 24
    495c:	6b e1       	ldi	r22, 0x1B	; 27
    495e:	80 ed       	ldi	r24, 0xD0	; 208
    4960:	0c 94 b2 24 	jmp	0x4964	; 0x4964 <writeI2Cbyte>

00004964 <writeI2Cbyte>:
//************************************************************
// Code
//************************************************************

void writeI2Cbyte(uint8_t address, uint8_t location, uint8_t value)
{
    4964:	cf 93       	push	r28
    4966:	df 93       	push	r29
    4968:	00 d0       	rcall	.+0      	; 0x496a <writeI2Cbyte+0x6>
    496a:	cd b7       	in	r28, 0x3d	; 61
    496c:	de b7       	in	r29, 0x3e	; 62
    i2c_start_wait(address+I2C_WRITE);				// Set up device address 
    496e:	4a 83       	std	Y+2, r20	; 0x02
    4970:	69 83       	std	Y+1, r22	; 0x01
    4972:	0e 94 28 45 	call	0x8a50	; 0x8a50 <i2c_start_wait>
    i2c_write(location);							// Set up register address 
    4976:	69 81       	ldd	r22, Y+1	; 0x01
    4978:	86 2f       	mov	r24, r22
    497a:	0e 94 78 45 	call	0x8af0	; 0x8af0 <i2c_write>
    i2c_write(value); 								// Write byte
    497e:	4a 81       	ldd	r20, Y+2	; 0x02
    4980:	84 2f       	mov	r24, r20
    4982:	0e 94 78 45 	call	0x8af0	; 0x8af0 <i2c_write>
    i2c_stop();
}
    4986:	0f 90       	pop	r0
    4988:	0f 90       	pop	r0
    498a:	df 91       	pop	r29
    498c:	cf 91       	pop	r28
void writeI2Cbyte(uint8_t address, uint8_t location, uint8_t value)
{
    i2c_start_wait(address+I2C_WRITE);				// Set up device address 
    i2c_write(location);							// Set up register address 
    i2c_write(value); 								// Write byte
    i2c_stop();
    498e:	0c 94 69 45 	jmp	0x8ad2	; 0x8ad2 <i2c_stop>

00004992 <readI2CbyteArray>:
}

void readI2CbyteArray(uint8_t address, uint8_t location, uint8_t *array,uint8_t size)
{
    4992:	cf 92       	push	r12
    4994:	df 92       	push	r13
    4996:	ef 92       	push	r14
    4998:	ff 92       	push	r15
    499a:	0f 93       	push	r16
    499c:	1f 93       	push	r17
    499e:	cf 93       	push	r28
    49a0:	df 93       	push	r29
    49a2:	00 d0       	rcall	.+0      	; 0x49a4 <readI2CbyteArray+0x12>
    49a4:	1f 92       	push	r1
    49a6:	cd b7       	in	r28, 0x3d	; 61
    49a8:	de b7       	in	r29, 0x3e	; 62
    49aa:	18 2f       	mov	r17, r24
    49ac:	e2 2e       	mov	r14, r18
	int i=0;

    i2c_start_wait(address+I2C_WRITE);
    49ae:	4a 83       	std	Y+2, r20	; 0x02
    49b0:	5b 83       	std	Y+3, r21	; 0x03
    49b2:	69 83       	std	Y+1, r22	; 0x01
    49b4:	0e 94 28 45 	call	0x8a50	; 0x8a50 <i2c_start_wait>
    i2c_write(location);							// Set up register address 
    49b8:	69 81       	ldd	r22, Y+1	; 0x01
    49ba:	86 2f       	mov	r24, r22
    49bc:	0e 94 78 45 	call	0x8af0	; 0x8af0 <i2c_write>
    i2c_rep_start(address+I2C_READ);
    49c0:	81 e0       	ldi	r24, 0x01	; 1
    49c2:	81 0f       	add	r24, r17
    49c4:	0e 94 67 45 	call	0x8ace	; 0x8ace <i2c_rep_start>
    49c8:	4a 81       	ldd	r20, Y+2	; 0x02
    49ca:	c4 2e       	mov	r12, r20
    49cc:	5b 81       	ldd	r21, Y+3	; 0x03
    49ce:	d5 2e       	mov	r13, r21
    i2c_stop();
}

void readI2CbyteArray(uint8_t address, uint8_t location, uint8_t *array,uint8_t size)
{
	int i=0;
    49d0:	00 e0       	ldi	r16, 0x00	; 0
    49d2:	10 e0       	ldi	r17, 0x00	; 0

    i2c_start_wait(address+I2C_WRITE);
    i2c_write(location);							// Set up register address 
    i2c_rep_start(address+I2C_READ);

	while (i < size)
    49d4:	f1 2c       	mov	r15, r1
    49d6:	0e 15       	cp	r16, r14
    49d8:	1f 05       	cpc	r17, r15
    49da:	84 f4       	brge	.+32     	; 0x49fc <readI2CbyteArray+0x6a>
	{
		if ((i+1)!=size)
    49dc:	0f 5f       	subi	r16, 0xFF	; 255
    49de:	1f 4f       	sbci	r17, 0xFF	; 255
    49e0:	0e 15       	cp	r16, r14
    49e2:	1f 05       	cpc	r17, r15
    49e4:	19 f0       	breq	.+6      	; 0x49ec <readI2CbyteArray+0x5a>
		{
			array[i]=i2c_readAck();
    49e6:	0e 94 98 45 	call	0x8b30	; 0x8b30 <i2c_readAck>
    49ea:	02 c0       	rjmp	.+4      	; 0x49f0 <readI2CbyteArray+0x5e>
		}
		else
		{
			array[i]=i2c_readNak(); 				// Read without ACK on last byte
    49ec:	0e 94 b1 45 	call	0x8b62	; 0x8b62 <i2c_readNak>
    49f0:	f6 01       	movw	r30, r12
    49f2:	80 83       	st	Z, r24
    49f4:	ff ef       	ldi	r31, 0xFF	; 255
    49f6:	cf 1a       	sub	r12, r31
    49f8:	df 0a       	sbc	r13, r31
    49fa:	ed cf       	rjmp	.-38     	; 0x49d6 <readI2CbyteArray+0x44>
		}
		i++;
	}

    i2c_stop();
}
    49fc:	0f 90       	pop	r0
    49fe:	0f 90       	pop	r0
    4a00:	0f 90       	pop	r0
    4a02:	df 91       	pop	r29
    4a04:	cf 91       	pop	r28
    4a06:	1f 91       	pop	r17
    4a08:	0f 91       	pop	r16
    4a0a:	ff 90       	pop	r15
    4a0c:	ef 90       	pop	r14
    4a0e:	df 90       	pop	r13
    4a10:	cf 90       	pop	r12
			array[i]=i2c_readNak(); 				// Read without ACK on last byte
		}
		i++;
	}

    i2c_stop();
    4a12:	0c 94 69 45 	jmp	0x8ad2	; 0x8ad2 <i2c_stop>

00004a16 <RotateVector>:
	VectorX = VectorNewA;
	VectorY = VectorNewB;
}

void RotateVector(float angle)
{
    4a16:	4f 92       	push	r4
    4a18:	5f 92       	push	r5
    4a1a:	6f 92       	push	r6
    4a1c:	7f 92       	push	r7
    4a1e:	8f 92       	push	r8
    4a20:	9f 92       	push	r9
    4a22:	af 92       	push	r10
    4a24:	bf 92       	push	r11
    4a26:	cf 92       	push	r12
    4a28:	df 92       	push	r13
    4a2a:	ef 92       	push	r14
    4a2c:	ff 92       	push	r15
    4a2e:	cf 93       	push	r28
    4a30:	df 93       	push	r29
    4a32:	cd b7       	in	r28, 0x3d	; 61
    4a34:	de b7       	in	r29, 0x3e	; 62
    4a36:	28 97       	sbiw	r28, 0x08	; 8
    4a38:	0f b6       	in	r0, 0x3f	; 63
    4a3a:	f8 94       	cli
    4a3c:	de bf       	out	0x3e, r29	; 62
    4a3e:	0f be       	out	0x3f, r0	; 63
    4a40:	cd bf       	out	0x3d, r28	; 61
    4a42:	6b 01       	movw	r12, r22
    4a44:	7c 01       	movw	r14, r24
	VectorNewA = VectorA * small_cos(angle) - VectorB * small_sine(angle);
    4a46:	80 90 a9 05 	lds	r8, 0x05A9
    4a4a:	90 90 aa 05 	lds	r9, 0x05AA
    4a4e:	a0 90 ab 05 	lds	r10, 0x05AB
    4a52:	b0 90 ac 05 	lds	r11, 0x05AC
float small_cos(float angle)
{
	// cos(angle) = (1 - (angle^2 / 2))
	float temp;
	
	temp = (angle * angle) / 2;
    4a56:	9b 01       	movw	r18, r22
    4a58:	ac 01       	movw	r20, r24
    4a5a:	0e 94 01 48 	call	0x9002	; 0x9002 <__mulsf3>
    4a5e:	20 e0       	ldi	r18, 0x00	; 0
    4a60:	30 e0       	ldi	r19, 0x00	; 0
    4a62:	40 e0       	ldi	r20, 0x00	; 0
    4a64:	5f e3       	ldi	r21, 0x3F	; 63
    4a66:	0e 94 01 48 	call	0x9002	; 0x9002 <__mulsf3>
    4a6a:	9b 01       	movw	r18, r22
    4a6c:	ac 01       	movw	r20, r24
	temp = 1 - temp;
    4a6e:	60 e0       	ldi	r22, 0x00	; 0
    4a70:	70 e0       	ldi	r23, 0x00	; 0
    4a72:	80 e8       	ldi	r24, 0x80	; 128
    4a74:	9f e3       	ldi	r25, 0x3F	; 63
    4a76:	0e 94 49 46 	call	0x8c92	; 0x8c92 <__subsf3>
    4a7a:	69 83       	std	Y+1, r22	; 0x01
    4a7c:	7a 83       	std	Y+2, r23	; 0x02
    4a7e:	8b 83       	std	Y+3, r24	; 0x03
    4a80:	9c 83       	std	Y+4, r25	; 0x04
	VectorY = VectorNewB;
}

void RotateVector(float angle)
{
	VectorNewA = VectorA * small_cos(angle) - VectorB * small_sine(angle);
    4a82:	40 90 ad 05 	lds	r4, 0x05AD
    4a86:	50 90 ae 05 	lds	r5, 0x05AE
    4a8a:	60 90 af 05 	lds	r6, 0x05AF
    4a8e:	70 90 b0 05 	lds	r7, 0x05B0
    4a92:	9b 01       	movw	r18, r22
    4a94:	ac 01       	movw	r20, r24
    4a96:	c5 01       	movw	r24, r10
    4a98:	b4 01       	movw	r22, r8
    4a9a:	0e 94 01 48 	call	0x9002	; 0x9002 <__mulsf3>
    4a9e:	6d 83       	std	Y+5, r22	; 0x05
    4aa0:	7e 83       	std	Y+6, r23	; 0x06
    4aa2:	8f 83       	std	Y+7, r24	; 0x07
    4aa4:	98 87       	std	Y+8, r25	; 0x08
    4aa6:	a7 01       	movw	r20, r14
    4aa8:	96 01       	movw	r18, r12
    4aaa:	c3 01       	movw	r24, r6
    4aac:	b2 01       	movw	r22, r4
    4aae:	0e 94 01 48 	call	0x9002	; 0x9002 <__mulsf3>
    4ab2:	9b 01       	movw	r18, r22
    4ab4:	ac 01       	movw	r20, r24
    4ab6:	6d 81       	ldd	r22, Y+5	; 0x05
    4ab8:	7e 81       	ldd	r23, Y+6	; 0x06
    4aba:	8f 81       	ldd	r24, Y+7	; 0x07
    4abc:	98 85       	ldd	r25, Y+8	; 0x08
    4abe:	0e 94 49 46 	call	0x8c92	; 0x8c92 <__subsf3>
    4ac2:	60 93 95 05 	sts	0x0595, r22
    4ac6:	70 93 96 05 	sts	0x0596, r23
    4aca:	80 93 97 05 	sts	0x0597, r24
    4ace:	90 93 98 05 	sts	0x0598, r25
	VectorNewB = VectorA * small_sine(angle) + VectorB * small_cos(angle);
    4ad2:	a7 01       	movw	r20, r14
    4ad4:	96 01       	movw	r18, r12
    4ad6:	c5 01       	movw	r24, r10
    4ad8:	b4 01       	movw	r22, r8
    4ada:	0e 94 01 48 	call	0x9002	; 0x9002 <__mulsf3>
    4ade:	6b 01       	movw	r12, r22
    4ae0:	7c 01       	movw	r14, r24
    4ae2:	29 81       	ldd	r18, Y+1	; 0x01
    4ae4:	3a 81       	ldd	r19, Y+2	; 0x02
    4ae6:	4b 81       	ldd	r20, Y+3	; 0x03
    4ae8:	5c 81       	ldd	r21, Y+4	; 0x04
    4aea:	c3 01       	movw	r24, r6
    4aec:	b2 01       	movw	r22, r4
    4aee:	0e 94 01 48 	call	0x9002	; 0x9002 <__mulsf3>
    4af2:	9b 01       	movw	r18, r22
    4af4:	ac 01       	movw	r20, r24
    4af6:	c7 01       	movw	r24, r14
    4af8:	b6 01       	movw	r22, r12
    4afa:	0e 94 4a 46 	call	0x8c94	; 0x8c94 <__addsf3>
    4afe:	60 93 79 05 	sts	0x0579, r22
    4b02:	70 93 7a 05 	sts	0x057A, r23
    4b06:	80 93 7b 05 	sts	0x057B, r24
    4b0a:	90 93 7c 05 	sts	0x057C, r25
}
    4b0e:	28 96       	adiw	r28, 0x08	; 8
    4b10:	0f b6       	in	r0, 0x3f	; 63
    4b12:	f8 94       	cli
    4b14:	de bf       	out	0x3e, r29	; 62
    4b16:	0f be       	out	0x3f, r0	; 63
    4b18:	cd bf       	out	0x3d, r28	; 61
    4b1a:	df 91       	pop	r29
    4b1c:	cf 91       	pop	r28
    4b1e:	ff 90       	pop	r15
    4b20:	ef 90       	pop	r14
    4b22:	df 90       	pop	r13
    4b24:	cf 90       	pop	r12
    4b26:	bf 90       	pop	r11
    4b28:	af 90       	pop	r10
    4b2a:	9f 90       	pop	r9
    4b2c:	8f 90       	pop	r8
    4b2e:	7f 90       	pop	r7
    4b30:	6f 90       	pop	r6
    4b32:	5f 90       	pop	r5
    4b34:	4f 90       	pop	r4
    4b36:	08 95       	ret

00004b38 <thetascale>:

float thetascale(float gyro, float intervalf)
{
    4b38:	cf 92       	push	r12
    4b3a:	df 92       	push	r13
    4b3c:	ef 92       	push	r14
    4b3e:	ff 92       	push	r15
    4b40:	69 01       	movw	r12, r18
    4b42:	7a 01       	movw	r14, r20
	
	// intervalf = time in seconds since last measurement
	// GYROSENSRADIANS = conversion from raw gyro data to rad/s
	// theta = actual number of radians moved

	theta = (gyro * GYROSENSRADIANS * intervalf);
    4b44:	25 ef       	ldi	r18, 0xF5	; 245
    4b46:	31 ea       	ldi	r19, 0xA1	; 161
    4b48:	4b e8       	ldi	r20, 0x8B	; 139
    4b4a:	5c e3       	ldi	r21, 0x3C	; 60
    4b4c:	0e 94 01 48 	call	0x9002	; 0x9002 <__mulsf3>
    4b50:	a7 01       	movw	r20, r14
    4b52:	96 01       	movw	r18, r12
    4b54:	0e 94 01 48 	call	0x9002	; 0x9002 <__mulsf3>
    4b58:	6b 01       	movw	r12, r22
    4b5a:	7c 01       	movw	r14, r24
	
	// The sin() and cos() functions don't appreciate large 
	// input values. Limit the input values to +/-15 degrees. 
	
	if (theta > maxdeltaangle)
    4b5c:	26 ea       	ldi	r18, 0xA6	; 166
    4b5e:	3a e0       	ldi	r19, 0x0A	; 10
    4b60:	46 e8       	ldi	r20, 0x86	; 134
    4b62:	5e e3       	ldi	r21, 0x3E	; 62
    4b64:	0e 94 fd 47 	call	0x8ffa	; 0x8ffa <__gesf2>
    4b68:	18 16       	cp	r1, r24
    4b6a:	9c f0       	brlt	.+38     	; 0x4b92 <thetascale+0x5a>
	{
		theta = maxdeltaangle;
	}
	
	if (theta < -maxdeltaangle)
    4b6c:	26 ea       	ldi	r18, 0xA6	; 166
    4b6e:	3a e0       	ldi	r19, 0x0A	; 10
    4b70:	46 e8       	ldi	r20, 0x86	; 134
    4b72:	5e eb       	ldi	r21, 0xBE	; 190
    4b74:	c7 01       	movw	r24, r14
    4b76:	b6 01       	movw	r22, r12
    4b78:	0e 94 ae 46 	call	0x8d5c	; 0x8d5c <__cmpsf2>
    4b7c:	87 ff       	sbrs	r24, 7
    4b7e:	11 c0       	rjmp	.+34     	; 0x4ba2 <thetascale+0x6a>
	{
		theta = -maxdeltaangle;
    4b80:	86 ea       	ldi	r24, 0xA6	; 166
    4b82:	c8 2e       	mov	r12, r24
    4b84:	8a e0       	ldi	r24, 0x0A	; 10
    4b86:	d8 2e       	mov	r13, r24
    4b88:	86 e8       	ldi	r24, 0x86	; 134
    4b8a:	e8 2e       	mov	r14, r24
    4b8c:	8e eb       	ldi	r24, 0xBE	; 190
    4b8e:	f8 2e       	mov	r15, r24
    4b90:	08 c0       	rjmp	.+16     	; 0x4ba2 <thetascale+0x6a>
	// The sin() and cos() functions don't appreciate large 
	// input values. Limit the input values to +/-15 degrees. 
	
	if (theta > maxdeltaangle)
	{
		theta = maxdeltaangle;
    4b92:	96 ea       	ldi	r25, 0xA6	; 166
    4b94:	c9 2e       	mov	r12, r25
    4b96:	9a e0       	ldi	r25, 0x0A	; 10
    4b98:	d9 2e       	mov	r13, r25
    4b9a:	96 e8       	ldi	r25, 0x86	; 134
    4b9c:	e9 2e       	mov	r14, r25
    4b9e:	9e e3       	ldi	r25, 0x3E	; 62
    4ba0:	f9 2e       	mov	r15, r25
	{
		theta = -maxdeltaangle;
	}
	
	return theta;
}
    4ba2:	c7 01       	movw	r24, r14
    4ba4:	b6 01       	movw	r22, r12
    4ba6:	ff 90       	pop	r15
    4ba8:	ef 90       	pop	r14
    4baa:	df 90       	pop	r13
    4bac:	cf 90       	pop	r12
    4bae:	08 95       	ret

00004bb0 <Rotate3dVector>:
	angle[ROLL] = (int16_t)(EulerAngleRoll * -100);
	angle[PITCH] = (int16_t)(EulerAnglePitch * -100);
}

void Rotate3dVector(float intervalf)
{
    4bb0:	8f 92       	push	r8
    4bb2:	9f 92       	push	r9
    4bb4:	af 92       	push	r10
    4bb6:	bf 92       	push	r11
    4bb8:	cf 92       	push	r12
    4bba:	df 92       	push	r13
    4bbc:	ef 92       	push	r14
    4bbe:	ff 92       	push	r15
    4bc0:	0f 93       	push	r16
    4bc2:	1f 93       	push	r17
    4bc4:	6b 01       	movw	r12, r22
    4bc6:	7c 01       	movw	r14, r24
	float theta;
	
	// Rotate around X axis (pitch)
	theta = thetascale(GyroPitchVC, intervalf);
    4bc8:	60 91 89 05 	lds	r22, 0x0589
    4bcc:	70 91 8a 05 	lds	r23, 0x058A
    4bd0:	80 91 8b 05 	lds	r24, 0x058B
    4bd4:	90 91 8c 05 	lds	r25, 0x058C
    4bd8:	a7 01       	movw	r20, r14
    4bda:	96 01       	movw	r18, r12
    4bdc:	0e 94 9c 25 	call	0x4b38	; 0x4b38 <thetascale>
	VectorA = VectorY;
    4be0:	00 91 2c 05 	lds	r16, 0x052C
    4be4:	10 91 2d 05 	lds	r17, 0x052D
    4be8:	20 91 2e 05 	lds	r18, 0x052E
    4bec:	30 91 2f 05 	lds	r19, 0x052F
    4bf0:	00 93 a9 05 	sts	0x05A9, r16
    4bf4:	10 93 aa 05 	sts	0x05AA, r17
    4bf8:	20 93 ab 05 	sts	0x05AB, r18
    4bfc:	30 93 ac 05 	sts	0x05AC, r19
	VectorB = VectorZ;
    4c00:	00 91 05 05 	lds	r16, 0x0505
    4c04:	10 91 06 05 	lds	r17, 0x0506
    4c08:	20 91 07 05 	lds	r18, 0x0507
    4c0c:	30 91 08 05 	lds	r19, 0x0508
    4c10:	00 93 ad 05 	sts	0x05AD, r16
    4c14:	10 93 ae 05 	sts	0x05AE, r17
    4c18:	20 93 af 05 	sts	0x05AF, r18
    4c1c:	30 93 b0 05 	sts	0x05B0, r19
	RotateVector(theta);
    4c20:	0e 94 0b 25 	call	0x4a16	; 0x4a16 <RotateVector>
	VectorY = VectorNewA;
    4c24:	80 91 95 05 	lds	r24, 0x0595
    4c28:	90 91 96 05 	lds	r25, 0x0596
    4c2c:	a0 91 97 05 	lds	r26, 0x0597
    4c30:	b0 91 98 05 	lds	r27, 0x0598
    4c34:	80 93 2c 05 	sts	0x052C, r24
    4c38:	90 93 2d 05 	sts	0x052D, r25
    4c3c:	a0 93 2e 05 	sts	0x052E, r26
    4c40:	b0 93 2f 05 	sts	0x052F, r27
	VectorZ = VectorNewB;
    4c44:	80 90 79 05 	lds	r8, 0x0579
    4c48:	90 90 7a 05 	lds	r9, 0x057A
    4c4c:	a0 90 7b 05 	lds	r10, 0x057B
    4c50:	b0 90 7c 05 	lds	r11, 0x057C
    4c54:	80 92 05 05 	sts	0x0505, r8
    4c58:	90 92 06 05 	sts	0x0506, r9
    4c5c:	a0 92 07 05 	sts	0x0507, r10
    4c60:	b0 92 08 05 	sts	0x0508, r11

	// Rotate around Y axis (roll)
	theta = thetascale (GyroRollVC, intervalf);
    4c64:	60 91 8d 05 	lds	r22, 0x058D
    4c68:	70 91 8e 05 	lds	r23, 0x058E
    4c6c:	80 91 8f 05 	lds	r24, 0x058F
    4c70:	90 91 90 05 	lds	r25, 0x0590
    4c74:	a7 01       	movw	r20, r14
    4c76:	96 01       	movw	r18, r12
    4c78:	0e 94 9c 25 	call	0x4b38	; 0x4b38 <thetascale>
	VectorA = VectorX;
    4c7c:	00 91 30 05 	lds	r16, 0x0530
    4c80:	10 91 31 05 	lds	r17, 0x0531
    4c84:	20 91 32 05 	lds	r18, 0x0532
    4c88:	30 91 33 05 	lds	r19, 0x0533
    4c8c:	00 93 a9 05 	sts	0x05A9, r16
    4c90:	10 93 aa 05 	sts	0x05AA, r17
    4c94:	20 93 ab 05 	sts	0x05AB, r18
    4c98:	30 93 ac 05 	sts	0x05AC, r19
	VectorB = VectorZ;
    4c9c:	80 92 ad 05 	sts	0x05AD, r8
    4ca0:	90 92 ae 05 	sts	0x05AE, r9
    4ca4:	a0 92 af 05 	sts	0x05AF, r10
    4ca8:	b0 92 b0 05 	sts	0x05B0, r11
	RotateVector(theta);
    4cac:	0e 94 0b 25 	call	0x4a16	; 0x4a16 <RotateVector>
	VectorX = VectorNewA;
    4cb0:	80 90 95 05 	lds	r8, 0x0595
    4cb4:	90 90 96 05 	lds	r9, 0x0596
    4cb8:	a0 90 97 05 	lds	r10, 0x0597
    4cbc:	b0 90 98 05 	lds	r11, 0x0598
    4cc0:	80 92 30 05 	sts	0x0530, r8
    4cc4:	90 92 31 05 	sts	0x0531, r9
    4cc8:	a0 92 32 05 	sts	0x0532, r10
    4ccc:	b0 92 33 05 	sts	0x0533, r11
	VectorZ = VectorNewB;
    4cd0:	80 91 79 05 	lds	r24, 0x0579
    4cd4:	90 91 7a 05 	lds	r25, 0x057A
    4cd8:	a0 91 7b 05 	lds	r26, 0x057B
    4cdc:	b0 91 7c 05 	lds	r27, 0x057C
    4ce0:	80 93 05 05 	sts	0x0505, r24
    4ce4:	90 93 06 05 	sts	0x0506, r25
    4ce8:	a0 93 07 05 	sts	0x0507, r26
    4cec:	b0 93 08 05 	sts	0x0508, r27

	// Rotate around Z axis (yaw)
	theta = thetascale(gyroADC[YAW], intervalf);
    4cf0:	60 91 77 05 	lds	r22, 0x0577
    4cf4:	70 91 78 05 	lds	r23, 0x0578
    4cf8:	88 27       	eor	r24, r24
    4cfa:	77 fd       	sbrc	r23, 7
    4cfc:	80 95       	com	r24
    4cfe:	98 2f       	mov	r25, r24
    4d00:	0e 94 4d 47 	call	0x8e9a	; 0x8e9a <__floatsisf>
    4d04:	a7 01       	movw	r20, r14
    4d06:	96 01       	movw	r18, r12
    4d08:	0e 94 9c 25 	call	0x4b38	; 0x4b38 <thetascale>
	VectorA = VectorX;
    4d0c:	80 92 a9 05 	sts	0x05A9, r8
    4d10:	90 92 aa 05 	sts	0x05AA, r9
    4d14:	a0 92 ab 05 	sts	0x05AB, r10
    4d18:	b0 92 ac 05 	sts	0x05AC, r11
	VectorB = VectorY;
    4d1c:	c0 90 2c 05 	lds	r12, 0x052C
    4d20:	d0 90 2d 05 	lds	r13, 0x052D
    4d24:	e0 90 2e 05 	lds	r14, 0x052E
    4d28:	f0 90 2f 05 	lds	r15, 0x052F
    4d2c:	c0 92 ad 05 	sts	0x05AD, r12
    4d30:	d0 92 ae 05 	sts	0x05AE, r13
    4d34:	e0 92 af 05 	sts	0x05AF, r14
    4d38:	f0 92 b0 05 	sts	0x05B0, r15
	RotateVector(theta);
    4d3c:	0e 94 0b 25 	call	0x4a16	; 0x4a16 <RotateVector>
	VectorX = VectorNewA;
    4d40:	80 91 95 05 	lds	r24, 0x0595
    4d44:	90 91 96 05 	lds	r25, 0x0596
    4d48:	a0 91 97 05 	lds	r26, 0x0597
    4d4c:	b0 91 98 05 	lds	r27, 0x0598
    4d50:	80 93 30 05 	sts	0x0530, r24
    4d54:	90 93 31 05 	sts	0x0531, r25
    4d58:	a0 93 32 05 	sts	0x0532, r26
    4d5c:	b0 93 33 05 	sts	0x0533, r27
	VectorY = VectorNewB;
    4d60:	80 91 79 05 	lds	r24, 0x0579
    4d64:	90 91 7a 05 	lds	r25, 0x057A
    4d68:	a0 91 7b 05 	lds	r26, 0x057B
    4d6c:	b0 91 7c 05 	lds	r27, 0x057C
    4d70:	80 93 2c 05 	sts	0x052C, r24
    4d74:	90 93 2d 05 	sts	0x052D, r25
    4d78:	a0 93 2e 05 	sts	0x052E, r26
    4d7c:	b0 93 2f 05 	sts	0x052F, r27
}
    4d80:	1f 91       	pop	r17
    4d82:	0f 91       	pop	r16
    4d84:	ff 90       	pop	r15
    4d86:	ef 90       	pop	r14
    4d88:	df 90       	pop	r13
    4d8a:	cf 90       	pop	r12
    4d8c:	bf 90       	pop	r11
    4d8e:	af 90       	pop	r10
    4d90:	9f 90       	pop	r9
    4d92:	8f 90       	pop	r8
    4d94:	08 95       	ret

00004d96 <ext2>:
	EulerAngleRoll = ext2(VectorX);
	EulerAnglePitch = ext2(VectorY);
}

float ext2(float Vector)
{
    4d96:	cf 92       	push	r12
    4d98:	df 92       	push	r13
    4d9a:	ef 92       	push	r14
    4d9c:	ff 92       	push	r15
	float temp;
	
	// Rough translation to Euler angles
	temp = Vector * 90;
    4d9e:	20 e0       	ldi	r18, 0x00	; 0
    4da0:	30 e0       	ldi	r19, 0x00	; 0
    4da2:	44 eb       	ldi	r20, 0xB4	; 180
    4da4:	52 e4       	ldi	r21, 0x42	; 66
    4da6:	0e 94 01 48 	call	0x9002	; 0x9002 <__mulsf3>
    4daa:	6b 01       	movw	r12, r22
    4dac:	7c 01       	movw	r14, r24

	// Change 0-90-0 to 0-90-180 so that
	// swap happens at 100% inverted
	if (VectorZ < 0)
    4dae:	20 e0       	ldi	r18, 0x00	; 0
    4db0:	30 e0       	ldi	r19, 0x00	; 0
    4db2:	a9 01       	movw	r20, r18
    4db4:	60 91 05 05 	lds	r22, 0x0505
    4db8:	70 91 06 05 	lds	r23, 0x0506
    4dbc:	80 91 07 05 	lds	r24, 0x0507
    4dc0:	90 91 08 05 	lds	r25, 0x0508
    4dc4:	0e 94 ae 46 	call	0x8d5c	; 0x8d5c <__cmpsf2>
    4dc8:	87 ff       	sbrs	r24, 7
    4dca:	18 c0       	rjmp	.+48     	; 0x4dfc <ext2+0x66>
	{
		// CW rotations
		if (temp > 0)
    4dcc:	20 e0       	ldi	r18, 0x00	; 0
    4dce:	30 e0       	ldi	r19, 0x00	; 0
    4dd0:	a9 01       	movw	r20, r18
    4dd2:	c7 01       	movw	r24, r14
    4dd4:	b6 01       	movw	r22, r12
    4dd6:	0e 94 fd 47 	call	0x8ffa	; 0x8ffa <__gesf2>
		{
			temp = 180 - temp;
    4dda:	a7 01       	movw	r20, r14
    4ddc:	96 01       	movw	r18, r12
	// Change 0-90-0 to 0-90-180 so that
	// swap happens at 100% inverted
	if (VectorZ < 0)
	{
		// CW rotations
		if (temp > 0)
    4dde:	18 16       	cp	r1, r24
    4de0:	2c f4       	brge	.+10     	; 0x4dec <ext2+0x56>
		{
			temp = 180 - temp;
    4de2:	60 e0       	ldi	r22, 0x00	; 0
    4de4:	70 e0       	ldi	r23, 0x00	; 0
    4de6:	84 e3       	ldi	r24, 0x34	; 52
    4de8:	93 e4       	ldi	r25, 0x43	; 67
    4dea:	04 c0       	rjmp	.+8      	; 0x4df4 <ext2+0x5e>
		}
		// CCW rotations
		else
		{
			temp = -180 - temp;
    4dec:	60 e0       	ldi	r22, 0x00	; 0
    4dee:	70 e0       	ldi	r23, 0x00	; 0
    4df0:	84 e3       	ldi	r24, 0x34	; 52
    4df2:	93 ec       	ldi	r25, 0xC3	; 195
    4df4:	0e 94 49 46 	call	0x8c92	; 0x8c92 <__subsf3>
    4df8:	6b 01       	movw	r12, r22
    4dfa:	7c 01       	movw	r14, r24
		}
	}

	return (temp);
}
    4dfc:	c7 01       	movw	r24, r14
    4dfe:	b6 01       	movw	r22, r12
    4e00:	ff 90       	pop	r15
    4e02:	ef 90       	pop	r14
    4e04:	df 90       	pop	r13
    4e06:	cf 90       	pop	r12
    4e08:	08 95       	ret

00004e0a <ExtractEulerAngles>:
	return temp;
}

void ExtractEulerAngles(void)
{
	EulerAngleRoll = ext2(VectorX);
    4e0a:	60 91 30 05 	lds	r22, 0x0530
    4e0e:	70 91 31 05 	lds	r23, 0x0531
    4e12:	80 91 32 05 	lds	r24, 0x0532
    4e16:	90 91 33 05 	lds	r25, 0x0533
    4e1a:	0e 94 cb 26 	call	0x4d96	; 0x4d96 <ext2>
    4e1e:	60 93 a5 05 	sts	0x05A5, r22
    4e22:	70 93 a6 05 	sts	0x05A6, r23
    4e26:	80 93 a7 05 	sts	0x05A7, r24
    4e2a:	90 93 a8 05 	sts	0x05A8, r25
	EulerAnglePitch = ext2(VectorY);
    4e2e:	60 91 2c 05 	lds	r22, 0x052C
    4e32:	70 91 2d 05 	lds	r23, 0x052D
    4e36:	80 91 2e 05 	lds	r24, 0x052E
    4e3a:	90 91 2f 05 	lds	r25, 0x052F
    4e3e:	0e 94 cb 26 	call	0x4d96	; 0x4d96 <ext2>
    4e42:	60 93 7d 05 	sts	0x057D, r22
    4e46:	70 93 7e 05 	sts	0x057E, r23
    4e4a:	80 93 7f 05 	sts	0x057F, r24
    4e4e:	90 93 80 05 	sts	0x0580, r25
    4e52:	08 95       	ret

00004e54 <simple_imu_update>:
//		* = swapped axis
//
//************************************************************

void simple_imu_update(uint32_t period)
{
    4e54:	4f 92       	push	r4
    4e56:	5f 92       	push	r5
    4e58:	6f 92       	push	r6
    4e5a:	7f 92       	push	r7
    4e5c:	8f 92       	push	r8
    4e5e:	9f 92       	push	r9
    4e60:	af 92       	push	r10
    4e62:	bf 92       	push	r11
    4e64:	cf 92       	push	r12
    4e66:	df 92       	push	r13
    4e68:	ef 92       	push	r14
    4e6a:	ff 92       	push	r15
    4e6c:	0f 93       	push	r16
    4e6e:	1f 93       	push	r17
    4e70:	cf 93       	push	r28
    4e72:	df 93       	push	r29
    4e74:	cd b7       	in	r28, 0x3d	; 61
    4e76:	de b7       	in	r29, 0x3e	; 62
    4e78:	2c 97       	sbiw	r28, 0x0c	; 12
    4e7a:	0f b6       	in	r0, 0x3f	; 63
    4e7c:	f8 94       	cli
    4e7e:	de bf       	out	0x3e, r29	; 62
    4e80:	0f be       	out	0x3f, r0	; 63
    4e82:	cd bf       	out	0x3d, r28	; 61
	uint32_t	roll_sq, pitch_sq, yaw_sq;
	uint32_t 	AccMag = 0;
		
	// Work out interval in seconds
	// Convert (period) from units of 400ns (1/2500000) to seconds (1s/400ns = 2500000)
	tempf = period;						// Promote int16_t to float
    4e84:	0e 94 4b 47 	call	0x8e96	; 0x8e96 <__floatunsisf>
	intervalf = tempf/2500000.0f;		// This gives the period in seconds
    4e88:	20 e8       	ldi	r18, 0x80	; 128
    4e8a:	36 e9       	ldi	r19, 0x96	; 150
    4e8c:	48 e1       	ldi	r20, 0x18	; 24
    4e8e:	5a e4       	ldi	r21, 0x4A	; 74
    4e90:	0e 94 b2 46 	call	0x8d64	; 0x8d64 <__divsf3>
    4e94:	69 87       	std	Y+9, r22	; 0x09
    4e96:	7a 87       	std	Y+10, r23	; 0x0a
    4e98:	8b 87       	std	Y+11, r24	; 0x0b
    4e9a:	9c 87       	std	Y+12, r25	; 0x0c

	tempf = pgm_read_byte(&LPF_lookup[Config.Acc_LPF]); // Lookup actual LPF value and promote
    4e9c:	60 91 3f 06 	lds	r22, 0x063F
    4ea0:	e6 2f       	mov	r30, r22
    4ea2:	ff 27       	eor	r31, r31
    4ea4:	e7 fd       	sbrc	r30, 7
    4ea6:	f0 95       	com	r31
    4ea8:	ef 52       	subi	r30, 0x2F	; 47
    4eaa:	f8 4e       	sbci	r31, 0xE8	; 232
    4eac:	64 91       	lpm	r22, Z
    4eae:	70 e0       	ldi	r23, 0x00	; 0
    4eb0:	80 e0       	ldi	r24, 0x00	; 0
    4eb2:	90 e0       	ldi	r25, 0x00	; 0
    4eb4:	0e 94 4b 47 	call	0x8e96	; 0x8e96 <__floatunsisf>
    4eb8:	6b 01       	movw	r12, r22
    4eba:	7c 01       	movw	r14, r24
    4ebc:	04 e4       	ldi	r16, 0x44	; 68
    4ebe:	15 e0       	ldi	r17, 0x05	; 5
    4ec0:	29 e9       	ldi	r18, 0x99	; 153
    4ec2:	62 2e       	mov	r6, r18
    4ec4:	25 e0       	ldi	r18, 0x05	; 5
    4ec6:	72 2e       	mov	r7, r18
	
	// Smooth Acc signals - note that accSmooth is in [ROLL, PITCH, YAW] order
	for (axis = 0; axis < NUMBEROFAXIS; axis++)
	{
		accADCf = accADC[axis]; // Promote
    4ec8:	d8 01       	movw	r26, r16
    4eca:	6d 91       	ld	r22, X+
    4ecc:	7d 91       	ld	r23, X+
    4ece:	8d 01       	movw	r16, r26
    4ed0:	88 27       	eor	r24, r24
    4ed2:	77 fd       	sbrc	r23, 7
    4ed4:	80 95       	com	r24
    4ed6:	98 2f       	mov	r25, r24
    4ed8:	0e 94 4d 47 	call	0x8e9a	; 0x8e9a <__floatsisf>
    4edc:	4b 01       	movw	r8, r22
    4ede:	5c 01       	movw	r10, r24
		
		// Acc LPF
		if (tempf > 1)
    4ee0:	20 e0       	ldi	r18, 0x00	; 0
    4ee2:	30 e0       	ldi	r19, 0x00	; 0
    4ee4:	40 e8       	ldi	r20, 0x80	; 128
    4ee6:	5f e3       	ldi	r21, 0x3F	; 63
    4ee8:	c7 01       	movw	r24, r14
    4eea:	b6 01       	movw	r22, r12
    4eec:	0e 94 fd 47 	call	0x8ffa	; 0x8ffa <__gesf2>
    4ef0:	18 16       	cp	r1, r24
    4ef2:	f4 f4       	brge	.+60     	; 0x4f30 <simple_imu_update+0xdc>
		{
			// Acc LPF
			accSmooth[axis] = (accSmooth[axis] * (tempf - 1.0f) - accADCf) / tempf;
    4ef4:	20 e0       	ldi	r18, 0x00	; 0
    4ef6:	30 e0       	ldi	r19, 0x00	; 0
    4ef8:	40 e8       	ldi	r20, 0x80	; 128
    4efa:	5f e3       	ldi	r21, 0x3F	; 63
    4efc:	c7 01       	movw	r24, r14
    4efe:	b6 01       	movw	r22, r12
    4f00:	0e 94 49 46 	call	0x8c92	; 0x8c92 <__subsf3>
    4f04:	f3 01       	movw	r30, r6
    4f06:	20 81       	ld	r18, Z
    4f08:	31 81       	ldd	r19, Z+1	; 0x01
    4f0a:	42 81       	ldd	r20, Z+2	; 0x02
    4f0c:	53 81       	ldd	r21, Z+3	; 0x03
    4f0e:	0e 94 01 48 	call	0x9002	; 0x9002 <__mulsf3>
    4f12:	a5 01       	movw	r20, r10
    4f14:	94 01       	movw	r18, r8
    4f16:	0e 94 49 46 	call	0x8c92	; 0x8c92 <__subsf3>
    4f1a:	a7 01       	movw	r20, r14
    4f1c:	96 01       	movw	r18, r12
    4f1e:	0e 94 b2 46 	call	0x8d64	; 0x8d64 <__divsf3>
    4f22:	d3 01       	movw	r26, r6
    4f24:	6d 93       	st	X+, r22
    4f26:	7d 93       	st	X+, r23
    4f28:	8d 93       	st	X+, r24
    4f2a:	9c 93       	st	X, r25
    4f2c:	13 97       	sbiw	r26, 0x03	; 3
    4f2e:	09 c0       	rjmp	.+18     	; 0x4f42 <simple_imu_update+0xee>
		}
		else
		{
			// Use raw accADC[axis] as source for acc values
			accSmooth[axis] =  -accADCf;
    4f30:	b7 fa       	bst	r11, 7
    4f32:	b0 94       	com	r11
    4f34:	b7 f8       	bld	r11, 7
    4f36:	b0 94       	com	r11
    4f38:	f3 01       	movw	r30, r6
    4f3a:	80 82       	st	Z, r8
    4f3c:	91 82       	std	Z+1, r9	; 0x01
    4f3e:	a2 82       	std	Z+2, r10	; 0x02
    4f40:	b3 82       	std	Z+3, r11	; 0x03
    4f42:	f4 e0       	ldi	r31, 0x04	; 4
    4f44:	6f 0e       	add	r6, r31
    4f46:	71 1c       	adc	r7, r1
	intervalf = tempf/2500000.0f;		// This gives the period in seconds

	tempf = pgm_read_byte(&LPF_lookup[Config.Acc_LPF]); // Lookup actual LPF value and promote
	
	// Smooth Acc signals - note that accSmooth is in [ROLL, PITCH, YAW] order
	for (axis = 0; axis < NUMBEROFAXIS; axis++)
    4f48:	85 e0       	ldi	r24, 0x05	; 5
    4f4a:	0a 34       	cpi	r16, 0x4A	; 74
    4f4c:	18 07       	cpc	r17, r24
    4f4e:	09 f0       	breq	.+2      	; 0x4f52 <simple_imu_update+0xfe>
    4f50:	bb cf       	rjmp	.-138    	; 0x4ec8 <simple_imu_update+0x74>
			accSmooth[axis] =  -accADCf;
		}
	}
	
	// Add correction data to gyro inputs based on difference between Euler angles and acc angles
	AccAngleRoll = accSmooth[ROLL] * SMALLANGLEFACTOR;		// KK2 - AccYfilter
    4f52:	23 ec       	ldi	r18, 0xC3	; 195
    4f54:	35 ef       	ldi	r19, 0xF5	; 245
    4f56:	48 e2       	ldi	r20, 0x28	; 40
    4f58:	5f e3       	ldi	r21, 0x3F	; 63
    4f5a:	60 91 99 05 	lds	r22, 0x0599
    4f5e:	70 91 9a 05 	lds	r23, 0x059A
    4f62:	80 91 9b 05 	lds	r24, 0x059B
    4f66:	90 91 9c 05 	lds	r25, 0x059C
    4f6a:	0e 94 01 48 	call	0x9002	; 0x9002 <__mulsf3>
    4f6e:	69 83       	std	Y+1, r22	; 0x01
    4f70:	7a 83       	std	Y+2, r23	; 0x02
    4f72:	8b 83       	std	Y+3, r24	; 0x03
    4f74:	9c 83       	std	Y+4, r25	; 0x04
    4f76:	60 93 81 05 	sts	0x0581, r22
    4f7a:	70 93 82 05 	sts	0x0582, r23
    4f7e:	80 93 83 05 	sts	0x0583, r24
    4f82:	90 93 84 05 	sts	0x0584, r25
	AccAnglePitch = accSmooth[PITCH] * SMALLANGLEFACTOR;
    4f86:	23 ec       	ldi	r18, 0xC3	; 195
    4f88:	35 ef       	ldi	r19, 0xF5	; 245
    4f8a:	48 e2       	ldi	r20, 0x28	; 40
    4f8c:	5f e3       	ldi	r21, 0x3F	; 63
    4f8e:	60 91 9d 05 	lds	r22, 0x059D
    4f92:	70 91 9e 05 	lds	r23, 0x059E
    4f96:	80 91 9f 05 	lds	r24, 0x059F
    4f9a:	90 91 a0 05 	lds	r25, 0x05A0
    4f9e:	0e 94 01 48 	call	0x9002	; 0x9002 <__mulsf3>
    4fa2:	6d 83       	std	Y+5, r22	; 0x05
    4fa4:	7e 83       	std	Y+6, r23	; 0x06
    4fa6:	8f 83       	std	Y+7, r24	; 0x07
    4fa8:	98 87       	std	Y+8, r25	; 0x08
    4faa:	60 93 85 05 	sts	0x0585, r22
    4fae:	70 93 86 05 	sts	0x0586, r23
    4fb2:	80 93 87 05 	sts	0x0587, r24
    4fb6:	90 93 88 05 	sts	0x0588, r25

	// Copy/promote gyro values for rotate
	GyroRollVC = gyroADC[ROLL];								// KK2 - GyroRoll
    4fba:	60 91 73 05 	lds	r22, 0x0573
    4fbe:	70 91 74 05 	lds	r23, 0x0574
    4fc2:	88 27       	eor	r24, r24
    4fc4:	77 fd       	sbrc	r23, 7
    4fc6:	80 95       	com	r24
    4fc8:	98 2f       	mov	r25, r24
    4fca:	0e 94 4d 47 	call	0x8e9a	; 0x8e9a <__floatsisf>
    4fce:	2b 01       	movw	r4, r22
    4fd0:	3c 01       	movw	r6, r24
    4fd2:	60 93 8d 05 	sts	0x058D, r22
    4fd6:	70 93 8e 05 	sts	0x058E, r23
    4fda:	80 93 8f 05 	sts	0x058F, r24
    4fde:	90 93 90 05 	sts	0x0590, r25
	GyroPitchVC = gyroADC[PITCH];
    4fe2:	60 91 75 05 	lds	r22, 0x0575
    4fe6:	70 91 76 05 	lds	r23, 0x0576
    4fea:	88 27       	eor	r24, r24
    4fec:	77 fd       	sbrc	r23, 7
    4fee:	80 95       	com	r24
    4ff0:	98 2f       	mov	r25, r24
    4ff2:	0e 94 4d 47 	call	0x8e9a	; 0x8e9a <__floatsisf>
    4ff6:	6b 01       	movw	r12, r22
    4ff8:	7c 01       	movw	r14, r24
    4ffa:	60 93 89 05 	sts	0x0589, r22
    4ffe:	70 93 8a 05 	sts	0x058A, r23
    5002:	80 93 8b 05 	sts	0x058B, r24
    5006:	90 93 8c 05 	sts	0x058C, r25

	// Calculate acceleration magnitude.
	roll_sq = (accADC[ROLL] * accADC[ROLL]);
    500a:	20 91 44 05 	lds	r18, 0x0544
    500e:	30 91 45 05 	lds	r19, 0x0545
	pitch_sq = (accADC[PITCH] * accADC[PITCH]);
    5012:	40 91 46 05 	lds	r20, 0x0546
    5016:	50 91 47 05 	lds	r21, 0x0547
	yaw_sq = (accADC[YAW] * accADC[YAW]);
    501a:	e0 91 48 05 	lds	r30, 0x0548
    501e:	f0 91 49 05 	lds	r31, 0x0549
	GyroRollVC = gyroADC[ROLL];								// KK2 - GyroRoll
	GyroPitchVC = gyroADC[PITCH];

	// Calculate acceleration magnitude.
	roll_sq = (accADC[ROLL] * accADC[ROLL]);
	pitch_sq = (accADC[PITCH] * accADC[PITCH]);
    5022:	44 9f       	mul	r20, r20
    5024:	40 01       	movw	r8, r0
    5026:	45 9f       	mul	r20, r21
    5028:	90 0c       	add	r9, r0
    502a:	90 0c       	add	r9, r0
    502c:	11 24       	eor	r1, r1
    502e:	b4 01       	movw	r22, r8
    5030:	88 27       	eor	r24, r24
    5032:	77 fd       	sbrc	r23, 7
    5034:	80 95       	com	r24
    5036:	98 2f       	mov	r25, r24
	// Copy/promote gyro values for rotate
	GyroRollVC = gyroADC[ROLL];								// KK2 - GyroRoll
	GyroPitchVC = gyroADC[PITCH];

	// Calculate acceleration magnitude.
	roll_sq = (accADC[ROLL] * accADC[ROLL]);
    5038:	22 9f       	mul	r18, r18
    503a:	a0 01       	movw	r20, r0
    503c:	23 9f       	mul	r18, r19
    503e:	50 0d       	add	r21, r0
    5040:	50 0d       	add	r21, r0
    5042:	11 24       	eor	r1, r1
    5044:	8a 01       	movw	r16, r20
    5046:	22 27       	eor	r18, r18
    5048:	17 fd       	sbrc	r17, 7
    504a:	20 95       	com	r18
    504c:	32 2f       	mov	r19, r18
	pitch_sq = (accADC[PITCH] * accADC[PITCH]);
	yaw_sq = (accADC[YAW] * accADC[YAW]);
	AccMag = roll_sq + pitch_sq + yaw_sq;
    504e:	60 0f       	add	r22, r16
    5050:	71 1f       	adc	r23, r17
    5052:	82 1f       	adc	r24, r18
    5054:	93 1f       	adc	r25, r19
	GyroPitchVC = gyroADC[PITCH];

	// Calculate acceleration magnitude.
	roll_sq = (accADC[ROLL] * accADC[ROLL]);
	pitch_sq = (accADC[PITCH] * accADC[PITCH]);
	yaw_sq = (accADC[YAW] * accADC[YAW]);
    5056:	ee 9f       	mul	r30, r30
    5058:	90 01       	movw	r18, r0
    505a:	ef 9f       	mul	r30, r31
    505c:	30 0d       	add	r19, r0
    505e:	30 0d       	add	r19, r0
    5060:	11 24       	eor	r1, r1
    5062:	89 01       	movw	r16, r18
    5064:	22 27       	eor	r18, r18
    5066:	17 fd       	sbrc	r17, 7
    5068:	20 95       	com	r18
    506a:	32 2f       	mov	r19, r18
	AccMag = roll_sq + pitch_sq + yaw_sq;
    506c:	60 0f       	add	r22, r16
    506e:	71 1f       	adc	r23, r17
    5070:	82 1f       	adc	r24, r18
    5072:	93 1f       	adc	r25, r19
	
	// Add acc correction if inside local acceleration bounds and not inverted according to VectorZ
	// This is actually a kind of Complementary Filter
	if	((AccMag > acc_0_85G_SQ) && (AccMag < acc_1_15G_SQ) && (VectorZ > 0.5))
    5074:	0e 94 4b 47 	call	0x8e96	; 0x8e96 <__floatunsisf>
    5078:	4b 01       	movw	r8, r22
    507a:	5c 01       	movw	r10, r24
    507c:	20 e0       	ldi	r18, 0x00	; 0
    507e:	34 ef       	ldi	r19, 0xF4	; 244
    5080:	48 e3       	ldi	r20, 0x38	; 56
    5082:	56 e4       	ldi	r21, 0x46	; 70
    5084:	0e 94 fd 47 	call	0x8ffa	; 0x8ffa <__gesf2>
    5088:	18 16       	cp	r1, r24
    508a:	0c f0       	brlt	.+2      	; 0x508e <simple_imu_update+0x23a>
    508c:	6b c0       	rjmp	.+214    	; 0x5164 <simple_imu_update+0x310>
    508e:	20 e0       	ldi	r18, 0x00	; 0
    5090:	38 e4       	ldi	r19, 0x48	; 72
    5092:	49 ea       	ldi	r20, 0xA9	; 169
    5094:	56 e4       	ldi	r21, 0x46	; 70
    5096:	c5 01       	movw	r24, r10
    5098:	b4 01       	movw	r22, r8
    509a:	0e 94 ae 46 	call	0x8d5c	; 0x8d5c <__cmpsf2>
    509e:	87 ff       	sbrs	r24, 7
    50a0:	61 c0       	rjmp	.+194    	; 0x5164 <simple_imu_update+0x310>
    50a2:	20 e0       	ldi	r18, 0x00	; 0
    50a4:	30 e0       	ldi	r19, 0x00	; 0
    50a6:	40 e0       	ldi	r20, 0x00	; 0
    50a8:	5f e3       	ldi	r21, 0x3F	; 63
    50aa:	60 91 05 05 	lds	r22, 0x0505
    50ae:	70 91 06 05 	lds	r23, 0x0506
    50b2:	80 91 07 05 	lds	r24, 0x0507
    50b6:	90 91 08 05 	lds	r25, 0x0508
    50ba:	0e 94 fd 47 	call	0x8ffa	; 0x8ffa <__gesf2>
    50be:	18 16       	cp	r1, r24
    50c0:	0c f0       	brlt	.+2      	; 0x50c4 <simple_imu_update+0x270>
    50c2:	50 c0       	rjmp	.+160    	; 0x5164 <simple_imu_update+0x310>
	{
		tempf = (EulerAngleRoll - AccAngleRoll) / (11 - Config.CF_factor); // Default Config.CF_factor is 7
    50c4:	80 91 41 06 	lds	r24, 0x0641
    50c8:	6b e0       	ldi	r22, 0x0B	; 11
    50ca:	70 e0       	ldi	r23, 0x00	; 0
    50cc:	68 1b       	sub	r22, r24
    50ce:	71 09       	sbc	r23, r1
    50d0:	87 fd       	sbrc	r24, 7
    50d2:	73 95       	inc	r23
    50d4:	88 27       	eor	r24, r24
    50d6:	77 fd       	sbrc	r23, 7
    50d8:	80 95       	com	r24
    50da:	98 2f       	mov	r25, r24
    50dc:	0e 94 4d 47 	call	0x8e9a	; 0x8e9a <__floatsisf>
    50e0:	4b 01       	movw	r8, r22
    50e2:	5c 01       	movw	r10, r24
    50e4:	29 81       	ldd	r18, Y+1	; 0x01
    50e6:	3a 81       	ldd	r19, Y+2	; 0x02
    50e8:	4b 81       	ldd	r20, Y+3	; 0x03
    50ea:	5c 81       	ldd	r21, Y+4	; 0x04
    50ec:	60 91 a5 05 	lds	r22, 0x05A5
    50f0:	70 91 a6 05 	lds	r23, 0x05A6
    50f4:	80 91 a7 05 	lds	r24, 0x05A7
    50f8:	90 91 a8 05 	lds	r25, 0x05A8
    50fc:	0e 94 49 46 	call	0x8c92	; 0x8c92 <__subsf3>
    5100:	a5 01       	movw	r20, r10
    5102:	94 01       	movw	r18, r8
    5104:	0e 94 b2 46 	call	0x8d64	; 0x8d64 <__divsf3>
    5108:	9b 01       	movw	r18, r22
    510a:	ac 01       	movw	r20, r24
		GyroRollVC = GyroRollVC + tempf;
    510c:	c3 01       	movw	r24, r6
    510e:	b2 01       	movw	r22, r4
    5110:	0e 94 4a 46 	call	0x8c94	; 0x8c94 <__addsf3>
    5114:	60 93 8d 05 	sts	0x058D, r22
    5118:	70 93 8e 05 	sts	0x058E, r23
    511c:	80 93 8f 05 	sts	0x058F, r24
    5120:	90 93 90 05 	sts	0x0590, r25
		
		tempf = (EulerAnglePitch - AccAnglePitch) /(11 - Config.CF_factor);
    5124:	2d 81       	ldd	r18, Y+5	; 0x05
    5126:	3e 81       	ldd	r19, Y+6	; 0x06
    5128:	4f 81       	ldd	r20, Y+7	; 0x07
    512a:	58 85       	ldd	r21, Y+8	; 0x08
    512c:	60 91 7d 05 	lds	r22, 0x057D
    5130:	70 91 7e 05 	lds	r23, 0x057E
    5134:	80 91 7f 05 	lds	r24, 0x057F
    5138:	90 91 80 05 	lds	r25, 0x0580
    513c:	0e 94 49 46 	call	0x8c92	; 0x8c92 <__subsf3>
    5140:	a5 01       	movw	r20, r10
    5142:	94 01       	movw	r18, r8
    5144:	0e 94 b2 46 	call	0x8d64	; 0x8d64 <__divsf3>
    5148:	9b 01       	movw	r18, r22
    514a:	ac 01       	movw	r20, r24
		GyroPitchVC = GyroPitchVC + tempf;
    514c:	c7 01       	movw	r24, r14
    514e:	b6 01       	movw	r22, r12
    5150:	0e 94 4a 46 	call	0x8c94	; 0x8c94 <__addsf3>
    5154:	60 93 89 05 	sts	0x0589, r22
    5158:	70 93 8a 05 	sts	0x058A, r23
    515c:	80 93 8b 05 	sts	0x058B, r24
    5160:	90 93 8c 05 	sts	0x058C, r25
	}

	// Rotate up-direction 3D vector with gyro inputs
	Rotate3dVector(intervalf);
    5164:	69 85       	ldd	r22, Y+9	; 0x09
    5166:	7a 85       	ldd	r23, Y+10	; 0x0a
    5168:	8b 85       	ldd	r24, Y+11	; 0x0b
    516a:	9c 85       	ldd	r25, Y+12	; 0x0c
    516c:	0e 94 d8 25 	call	0x4bb0	; 0x4bb0 <Rotate3dVector>
	ExtractEulerAngles();
    5170:	0e 94 05 27 	call	0x4e0a	; 0x4e0a <ExtractEulerAngles>
	
	// Upscale to 0.01 degrees resolution and copy to angle[] for display
	angle[ROLL] = (int16_t)(EulerAngleRoll * -100);
    5174:	20 e0       	ldi	r18, 0x00	; 0
    5176:	30 e0       	ldi	r19, 0x00	; 0
    5178:	48 ec       	ldi	r20, 0xC8	; 200
    517a:	52 ec       	ldi	r21, 0xC2	; 194
    517c:	60 91 a5 05 	lds	r22, 0x05A5
    5180:	70 91 a6 05 	lds	r23, 0x05A6
    5184:	80 91 a7 05 	lds	r24, 0x05A7
    5188:	90 91 a8 05 	lds	r25, 0x05A8
    518c:	0e 94 01 48 	call	0x9002	; 0x9002 <__mulsf3>
    5190:	0e 94 1a 47 	call	0x8e34	; 0x8e34 <__fixsfsi>
    5194:	70 93 92 05 	sts	0x0592, r23
    5198:	60 93 91 05 	sts	0x0591, r22
	angle[PITCH] = (int16_t)(EulerAnglePitch * -100);
    519c:	20 e0       	ldi	r18, 0x00	; 0
    519e:	30 e0       	ldi	r19, 0x00	; 0
    51a0:	48 ec       	ldi	r20, 0xC8	; 200
    51a2:	52 ec       	ldi	r21, 0xC2	; 194
    51a4:	60 91 7d 05 	lds	r22, 0x057D
    51a8:	70 91 7e 05 	lds	r23, 0x057E
    51ac:	80 91 7f 05 	lds	r24, 0x057F
    51b0:	90 91 80 05 	lds	r25, 0x0580
    51b4:	0e 94 01 48 	call	0x9002	; 0x9002 <__mulsf3>
    51b8:	0e 94 1a 47 	call	0x8e34	; 0x8e34 <__fixsfsi>
    51bc:	70 93 94 05 	sts	0x0594, r23
    51c0:	60 93 93 05 	sts	0x0593, r22
}
    51c4:	2c 96       	adiw	r28, 0x0c	; 12
    51c6:	0f b6       	in	r0, 0x3f	; 63
    51c8:	f8 94       	cli
    51ca:	de bf       	out	0x3e, r29	; 62
    51cc:	0f be       	out	0x3f, r0	; 63
    51ce:	cd bf       	out	0x3d, r28	; 61
    51d0:	df 91       	pop	r29
    51d2:	cf 91       	pop	r28
    51d4:	1f 91       	pop	r17
    51d6:	0f 91       	pop	r16
    51d8:	ff 90       	pop	r15
    51da:	ef 90       	pop	r14
    51dc:	df 90       	pop	r13
    51de:	cf 90       	pop	r12
    51e0:	bf 90       	pop	r11
    51e2:	af 90       	pop	r10
    51e4:	9f 90       	pop	r9
    51e6:	8f 90       	pop	r8
    51e8:	7f 90       	pop	r7
    51ea:	6f 90       	pop	r6
    51ec:	5f 90       	pop	r5
    51ee:	4f 90       	pop	r4
    51f0:	08 95       	ret

000051f2 <reset_IMU>:
}

void reset_IMU(void)
{
	// Initialise the vector to point straight up
	VectorX = 0;
    51f2:	10 92 30 05 	sts	0x0530, r1
    51f6:	10 92 31 05 	sts	0x0531, r1
    51fa:	10 92 32 05 	sts	0x0532, r1
    51fe:	10 92 33 05 	sts	0x0533, r1
	VectorY = 0;
    5202:	10 92 2c 05 	sts	0x052C, r1
    5206:	10 92 2d 05 	sts	0x052D, r1
    520a:	10 92 2e 05 	sts	0x052E, r1
    520e:	10 92 2f 05 	sts	0x052F, r1
	VectorZ = 1;
    5212:	80 e0       	ldi	r24, 0x00	; 0
    5214:	90 e0       	ldi	r25, 0x00	; 0
    5216:	a0 e8       	ldi	r26, 0x80	; 128
    5218:	bf e3       	ldi	r27, 0x3F	; 63
    521a:	80 93 05 05 	sts	0x0505, r24
    521e:	90 93 06 05 	sts	0x0506, r25
    5222:	a0 93 07 05 	sts	0x0507, r26
    5226:	b0 93 08 05 	sts	0x0508, r27
	
	// Initialise internal vectors and attitude	
	VectorA = 0;
    522a:	10 92 a9 05 	sts	0x05A9, r1
    522e:	10 92 aa 05 	sts	0x05AA, r1
    5232:	10 92 ab 05 	sts	0x05AB, r1
    5236:	10 92 ac 05 	sts	0x05AC, r1
	VectorB = 0;
    523a:	10 92 ad 05 	sts	0x05AD, r1
    523e:	10 92 ae 05 	sts	0x05AE, r1
    5242:	10 92 af 05 	sts	0x05AF, r1
    5246:	10 92 b0 05 	sts	0x05B0, r1
	EulerAngleRoll = 0;
    524a:	10 92 a5 05 	sts	0x05A5, r1
    524e:	10 92 a6 05 	sts	0x05A6, r1
    5252:	10 92 a7 05 	sts	0x05A7, r1
    5256:	10 92 a8 05 	sts	0x05A8, r1
	EulerAnglePitch = 0;
    525a:	10 92 7d 05 	sts	0x057D, r1
    525e:	10 92 7e 05 	sts	0x057E, r1
    5262:	10 92 7f 05 	sts	0x057F, r1
    5266:	10 92 80 05 	sts	0x0580, r1

	// Reset loop count to zero
	TMR0_counter = 0;	// TMR0 overflow counter
    526a:	10 92 ce 07 	sts	0x07CE, r1
    526e:	10 92 cd 07 	sts	0x07CD, r1
	TCNT1 = 0;			// TCNT1 current time
    5272:	10 92 85 00 	sts	0x0085, r1
    5276:	10 92 84 00 	sts	0x0084, r1
	LoopStartTCNT1 = 0;	// TCNT1 last loop time
    527a:	10 92 1d 05 	sts	0x051D, r1
    527e:	10 92 1c 05 	sts	0x051C, r1
    5282:	08 95       	ret

00005284 <init>:

CONFIG_STRUCT Config;			// eeProm data configuration
uint16_t SystemVoltage = 0;		// Initial voltage measured.

void init(void)
{
    5284:	cf 93       	push	r28
	
	//***********************************************************
	// I/O setup
	//***********************************************************
	// Set port directions
	DDRA		= 0x30;		// Port A
    5286:	80 e3       	ldi	r24, 0x30	; 48
    5288:	81 b9       	out	0x01, r24	; 1
	DDRC		= 0xFC;		// Port C
    528a:	8c ef       	ldi	r24, 0xFC	; 252
    528c:	87 b9       	out	0x07, r24	; 7
	DDRB		= 0x0A;		// Port B
    528e:	8a e0       	ldi	r24, 0x0A	; 10
    5290:	84 b9       	out	0x04, r24	; 4
	DDRD		= 0xF2;		// Port D
    5292:	82 ef       	ldi	r24, 0xF2	; 242
    5294:	8a b9       	out	0x0a, r24	; 10

	// Hold all PWM outputs low to stop glitches
	// M5 and M6 are on PortA for KK2.1
	MOTORS		= 0;
    5296:	18 b8       	out	0x08, r1	; 8
	M5			= 0;
    5298:	14 98       	cbi	0x02, 4	; 2
	M6			= 0;
    529a:	15 98       	cbi	0x02, 5	; 2

	// Preset I/O pins
	LED1 		= 0;		// LED1 off
    529c:	2b 98       	cbi	0x05, 3	; 5
	LVA 		= 0; 		// LVA alarm OFF
    529e:	29 98       	cbi	0x05, 1	; 5
	LCD_SCL		= 1;		// GLCD clock high
    52a0:	5c 9a       	sbi	0x0b, 4	; 11

	// Set/clear pull-ups (1 = set, 0 = clear)
	PINB		= 0xF5;		// Set PB pull-ups
    52a2:	85 ef       	ldi	r24, 0xF5	; 245
    52a4:	83 b9       	out	0x03, r24	; 3
	PIND		= 0x0C;		// Set PD pull-ups (Don't pull up RX yet)
    52a6:	8c e0       	ldi	r24, 0x0C	; 12
    52a8:	89 b9       	out	0x09, r24	; 9
    52aa:	2f e5       	ldi	r18, 0x5F	; 95
    52ac:	88 ed       	ldi	r24, 0xD8	; 216
    52ae:	93 e0       	ldi	r25, 0x03	; 3
    52b0:	21 50       	subi	r18, 0x01	; 1
    52b2:	80 40       	sbci	r24, 0x00	; 0
    52b4:	90 40       	sbci	r25, 0x00	; 0
    52b6:	e1 f7       	brne	.-8      	; 0x52b0 <init+0x2c>
    52b8:	00 c0       	rjmp	.+0      	; 0x52ba <init+0x36>
    52ba:	00 00       	nop
	_delay_ms(63);				// Pause while satellite wakes up	
								// and pull-ups have time to rise.
								// Tweak until bind pulses about 68ms after power-up

	// Bind as master if ONLY button 4 pressed
	if ((PINB & 0xf0) == 0xE0)
    52bc:	83 b1       	in	r24, 0x03	; 3
    52be:	80 7f       	andi	r24, 0xF0	; 240
    52c0:	80 3e       	cpi	r24, 0xE0	; 224
    52c2:	21 f4       	brne	.+8      	; 0x52cc <init+0x48>
	{
		DDRD		= 0xF3;		// Switch PD0 to output
    52c4:	83 ef       	ldi	r24, 0xF3	; 243
    52c6:	8a b9       	out	0x0a, r24	; 10
		bind_master();
    52c8:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <bind_master>
	}

	DDRD		= 0xF2;			// Reset Port D directions
    52cc:	82 ef       	ldi	r24, 0xF2	; 242
    52ce:	8a b9       	out	0x0a, r24	; 10

	// Set/clear pull-ups (1 = set, 0 = clear)
	PIND		= 0x0D;			// Set PD pull-ups (now pull up RX as well)
    52d0:	8d e0       	ldi	r24, 0x0D	; 13
    52d2:	89 b9       	out	0x09, r24	; 9
	// Timers
	//***********************************************************

	// Timer0 (8bit) - run @ 20MHz / 1024 = 19.531kHz or 51.2us - max 13.1ms
	// Slow timer to extend Timer 1
	TCCR0A = 0;								// Normal operation
    52d4:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0x05;							// Clk / 1024 = 19.531kHz or 51.2us - max 13.1ms
    52d6:	85 e0       	ldi	r24, 0x05	; 5
    52d8:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= (1 << TOIE0);					// Enable interrupts
    52da:	80 91 6e 00 	lds	r24, 0x006E
    52de:	81 60       	ori	r24, 0x01	; 1
    52e0:	80 93 6e 00 	sts	0x006E, r24
	TCNT0 = 0;								// Reset counter
    52e4:	16 bc       	out	0x26, r1	; 38
	
	// Timer1 (16bit) - run @ 2.5MHz (400ns) - max 26.2ms
	// Used to measure Rx Signals & control ESC/servo output rate
	TCCR1A = 0;
    52e6:	10 92 80 00 	sts	0x0080, r1
	TCCR1B |= (1 << CS11);					// Clk/8 = 2.5MHz
    52ea:	80 91 81 00 	lds	r24, 0x0081
    52ee:	82 60       	ori	r24, 0x02	; 2
    52f0:	80 93 81 00 	sts	0x0081, r24

	// Timer2 8bit - run @ 20MHz / 1024 = 19.531kHz or 51.2us - max 13.1ms
	// Used to time arm/disarm intervals
	TCCR2A = 0;	
    52f4:	10 92 b0 00 	sts	0x00B0, r1
	TCCR2B = 0x07;							// Clk/1024 = 19.531kHz
    52f8:	87 e0       	ldi	r24, 0x07	; 7
    52fa:	80 93 b1 00 	sts	0x00B1, r24
	TIMSK2 = 0;
    52fe:	10 92 70 00 	sts	0x0070, r1
	TIFR2 = 0;
    5302:	17 ba       	out	0x17, r1	; 23
	TCNT2 = 0;								// Reset counter
    5304:	10 92 b2 00 	sts	0x00B2, r1
	//***********************************************************
	// Interrupts and pin function setup
	//***********************************************************

	// Pin change interrupt enables PCINT1, PCINT2 and PCINT3 (Throttle, AUX and CPPM input)
	PCICR  = 0x0A;							// PCINT8  to PCINT15 (PCINT1 group - AUX)
    5308:	9a e0       	ldi	r25, 0x0A	; 10
    530a:	90 93 68 00 	sts	0x0068, r25
											// PCINT24 to PCINT31 (PCINT3 group - THR)
	PCIFR  = 0x0F;							// Clear PCIF0 interrupt flag 
    530e:	9f e0       	ldi	r25, 0x0F	; 15
    5310:	9b bb       	out	0x1b, r25	; 27
											// Clear PCIF1 interrupt flag 
											// Clear PCIF2 interrupt flag 
											// Clear PCIF3 interrupt flag 

	// External interrupts INT0 (Elevator) and INT1 (Aileron) and INT2 (Rudder)
	EICRA = 0x15;							// Any change INT0
    5312:	95 e1       	ldi	r25, 0x15	; 21
    5314:	90 93 69 00 	sts	0x0069, r25
											// Any change INT1
											// Any change INT2
	EIFR  = 0x07; 							// Clear INT0 interrupt flag (Elevator)
    5318:	8c bb       	out	0x1c, r24	; 28
	//***********************************************************
	// Start up
	//***********************************************************

	// Preset important flags
	Interrupted = false;						
    531a:	10 92 ca 07 	sts	0x07CA, r1

	// Load EEPROM settings
	updated = Initial_EEPROM_Config_Load(); // Config now contains valid values
    531e:	0e 94 90 19 	call	0x3320	; 0x3320 <Initial_EEPROM_Config_Load>
    5322:	c8 2f       	mov	r28, r24
    5324:	20 e0       	ldi	r18, 0x00	; 0
    5326:	30 e0       	ldi	r19, 0x00	; 0
	//***********************************************************

	for (i = 0; i < MAX_RC_CHANNELS; i++)
	{
		
		RxChannel[i] = 3750;
    5328:	46 ea       	ldi	r20, 0xA6	; 166
    532a:	5e e0       	ldi	r21, 0x0E	; 14
    532c:	f9 01       	movw	r30, r18
    532e:	ee 0f       	add	r30, r30
    5330:	ff 1f       	adc	r31, r31
    5332:	e6 54       	subi	r30, 0x46	; 70
    5334:	f8 4f       	sbci	r31, 0xF8	; 248
    5336:	51 83       	std	Z+1, r21	; 0x01
    5338:	40 83       	st	Z, r20
    533a:	2f 5f       	subi	r18, 0xFF	; 255
    533c:	3f 4f       	sbci	r19, 0xFF	; 255
	// RX channel defaults for when no RC connected
	// Not doing this can result in the FC trying (unsuccessfully) to arm
	// and makes entry into the menus very hard
	//***********************************************************

	for (i = 0; i < MAX_RC_CHANNELS; i++)
    533e:	28 30       	cpi	r18, 0x08	; 8
    5340:	31 05       	cpc	r19, r1
    5342:	a1 f7       	brne	.-24     	; 0x532c <init+0xa8>
	{
		
		RxChannel[i] = 3750;
	}
	
	RxChannel[THROTTLE] = 2500; // Min throttle
    5344:	24 ec       	ldi	r18, 0xC4	; 196
    5346:	39 e0       	ldi	r19, 0x09	; 9
    5348:	30 93 bb 07 	sts	0x07BB, r19
    534c:	20 93 ba 07 	sts	0x07BA, r18
	//***********************************************************
	// GLCD initialisation
	//***********************************************************

	// Initialise the GLCD
	st7565_init();
    5350:	0e 94 56 20 	call	0x40ac	; 0x40ac <st7565_init>

	// Make sure the LCD is blank without clearing buffer (and so no logo)
	clear_screen();
    5354:	0e 94 b0 20 	call	0x4160	; 0x4160 <clear_screen>
	//***********************************************************
	// ESC calibration
	//***********************************************************
	
	// Calibrate ESCs if ONLY buttons 1 and 4 pressed
	if ((PINB & 0xf0) == 0x60)
    5358:	93 b1       	in	r25, 0x03	; 3
    535a:	90 7f       	andi	r25, 0xF0	; 240
    535c:	90 36       	cpi	r25, 0x60	; 96
    535e:	09 f0       	breq	.+2      	; 0x5362 <init+0xde>
    5360:	71 c0       	rjmp	.+226    	; 0x5444 <init+0x1c0>
	{
		// Display calibrating message
		st7565_command(CMD_SET_COM_NORMAL); 	// For text (not for logo)
    5362:	80 ec       	ldi	r24, 0xC0	; 192
    5364:	0e 94 47 20 	call	0x408e	; 0x408e <st7565_command>
		clear_buffer(buffer);
    5368:	85 e0       	ldi	r24, 0x05	; 5
    536a:	91 e0       	ldi	r25, 0x01	; 1
    536c:	0e 94 a7 20 	call	0x414e	; 0x414e <clear_buffer>
		LCD_Display_Text(59,(const unsigned char*)Verdana14,10,25);
    5370:	29 e1       	ldi	r18, 0x19	; 25
    5372:	30 e0       	ldi	r19, 0x00	; 0
    5374:	4a e0       	ldi	r20, 0x0A	; 10
    5376:	50 e0       	ldi	r21, 0x00	; 0
    5378:	6f e5       	ldi	r22, 0x5F	; 95
    537a:	71 e0       	ldi	r23, 0x01	; 1
    537c:	8b e3       	ldi	r24, 0x3B	; 59
    537e:	90 e0       	ldi	r25, 0x00	; 0
    5380:	0e 94 54 22 	call	0x44a8	; 0x44a8 <LCD_Display_Text>
		write_buffer(buffer);
    5384:	85 e0       	ldi	r24, 0x05	; 5
    5386:	91 e0       	ldi	r25, 0x01	; 1
    5388:	0e 94 75 20 	call	0x40ea	; 0x40ea <write_buffer>
		clear_buffer(buffer);
    538c:	85 e0       	ldi	r24, 0x05	; 5
    538e:	91 e0       	ldi	r25, 0x01	; 1
    5390:	0e 94 a7 20 	call	0x414e	; 0x414e <clear_buffer>
    5394:	e7 e4       	ldi	r30, 0x47	; 71
    5396:	f6 e0       	ldi	r31, 0x06	; 6
    5398:	80 e0       	ldi	r24, 0x00	; 0
    539a:	90 e0       	ldi	r25, 0x00	; 0
				// Set output to maximum pulse width
				ServoOut[i] = MOTOR_100;
			}
			else
			{
				ServoOut[i] = SERVO_CENTER;
    539c:	4c ed       	ldi	r20, 0xDC	; 220
    539e:	55 e0       	ldi	r21, 0x05	; 5
		{
			// Check for motor marker
			if (Config.Channel[i].Motor_marker == MOTOR)
			{
				// Set output to maximum pulse width
				ServoOut[i] = MOTOR_100;
    53a0:	6c e6       	ldi	r22, 0x6C	; 108
    53a2:	77 e0       	ldi	r23, 0x07	; 7
				
		// For each output
		for (i = 0; i < MAX_OUTPUTS; i++)
		{
			// Check for motor marker
			if (Config.Channel[i].Motor_marker == MOTOR)
    53a4:	a0 81       	ld	r26, Z
    53a6:	9c 01       	movw	r18, r24
    53a8:	22 0f       	add	r18, r18
    53aa:	33 1f       	adc	r19, r19
    53ac:	a2 30       	cpi	r26, 0x02	; 2
    53ae:	39 f4       	brne	.+14     	; 0x53be <init+0x13a>
			{
				// Set output to maximum pulse width
				ServoOut[i] = MOTOR_100;
    53b0:	d9 01       	movw	r26, r18
    53b2:	a3 5c       	subi	r26, 0xC3	; 195
    53b4:	b7 4f       	sbci	r27, 0xF7	; 247
    53b6:	11 96       	adiw	r26, 0x01	; 1
    53b8:	7c 93       	st	X, r23
    53ba:	6e 93       	st	-X, r22
    53bc:	06 c0       	rjmp	.+12     	; 0x53ca <init+0x146>
			}
			else
			{
				ServoOut[i] = SERVO_CENTER;
    53be:	d9 01       	movw	r26, r18
    53c0:	a3 5c       	subi	r26, 0xC3	; 195
    53c2:	b7 4f       	sbci	r27, 0xF7	; 247
    53c4:	11 96       	adiw	r26, 0x01	; 1
    53c6:	5c 93       	st	X, r21
    53c8:	4e 93       	st	-X, r20
    53ca:	01 96       	adiw	r24, 0x01	; 1
    53cc:	b6 96       	adiw	r30, 0x26	; 38
		LCD_Display_Text(59,(const unsigned char*)Verdana14,10,25);
		write_buffer(buffer);
		clear_buffer(buffer);
				
		// For each output
		for (i = 0; i < MAX_OUTPUTS; i++)
    53ce:	88 30       	cpi	r24, 0x08	; 8
    53d0:	91 05       	cpc	r25, r1
    53d2:	41 f7       	brne	.-48     	; 0x53a4 <init+0x120>
				ServoOut[i] = SERVO_CENTER;
			}
		}
					
		// Output HIGH pulse (1.9ms) until buttons released
		while ((PINB & 0xf0) == 0x60)
    53d4:	83 b1       	in	r24, 0x03	; 3
    53d6:	80 7f       	andi	r24, 0xF0	; 240
    53d8:	80 36       	cpi	r24, 0x60	; 96
    53da:	79 f4       	brne	.+30     	; 0x53fa <init+0x176>
		{
			// Pass address of ServoOut array and select all outputs
			output_servo_ppm_asm(&ServoOut[0], 0xFF);
    53dc:	6f ef       	ldi	r22, 0xFF	; 255
    53de:	8d e3       	ldi	r24, 0x3D	; 61
    53e0:	98 e0       	ldi	r25, 0x08	; 8
    53e2:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <output_servo_ppm_asm>
    53e6:	2f e7       	ldi	r18, 0x7F	; 127
    53e8:	88 e3       	ldi	r24, 0x38	; 56
    53ea:	91 e0       	ldi	r25, 0x01	; 1
    53ec:	21 50       	subi	r18, 0x01	; 1
    53ee:	80 40       	sbci	r24, 0x00	; 0
    53f0:	90 40       	sbci	r25, 0x00	; 0
    53f2:	e1 f7       	brne	.-8      	; 0x53ec <init+0x168>
    53f4:	00 c0       	rjmp	.+0      	; 0x53f6 <init+0x172>
    53f6:	00 00       	nop
    53f8:	ed cf       	rjmp	.-38     	; 0x53d4 <init+0x150>
				ServoOut[i] = SERVO_CENTER;
			}
		}
					
		// Output HIGH pulse (1.9ms) until buttons released
		while ((PINB & 0xf0) == 0x60)
    53fa:	e7 e4       	ldi	r30, 0x47	; 71
    53fc:	f6 e0       	ldi	r31, 0x06	; 6
    53fe:	80 e0       	ldi	r24, 0x00	; 0
    5400:	90 e0       	ldi	r25, 0x00	; 0
		{
			// Check for motor marker
			if (Config.Channel[i].Motor_marker == MOTOR)
			{
				// Set output to maximum pulse width
				ServoOut[i] = MOTOR_0;
    5402:	2c e4       	ldi	r18, 0x4C	; 76
    5404:	34 e0       	ldi	r19, 0x04	; 4
		// Output LOW pulse (1.1ms) after buttons released
		// For each output
		for (i = 0; i < MAX_OUTPUTS; i++)
		{
			// Check for motor marker
			if (Config.Channel[i].Motor_marker == MOTOR)
    5406:	40 81       	ld	r20, Z
    5408:	42 30       	cpi	r20, 0x02	; 2
    540a:	41 f4       	brne	.+16     	; 0x541c <init+0x198>
			{
				// Set output to maximum pulse width
				ServoOut[i] = MOTOR_0;
    540c:	dc 01       	movw	r26, r24
    540e:	aa 0f       	add	r26, r26
    5410:	bb 1f       	adc	r27, r27
    5412:	a3 5c       	subi	r26, 0xC3	; 195
    5414:	b7 4f       	sbci	r27, 0xF7	; 247
    5416:	11 96       	adiw	r26, 0x01	; 1
    5418:	3c 93       	st	X, r19
    541a:	2e 93       	st	-X, r18
    541c:	01 96       	adiw	r24, 0x01	; 1
    541e:	b6 96       	adiw	r30, 0x26	; 38
			_delay_ms(20);			
		}

		// Output LOW pulse (1.1ms) after buttons released
		// For each output
		for (i = 0; i < MAX_OUTPUTS; i++)
    5420:	88 30       	cpi	r24, 0x08	; 8
    5422:	91 05       	cpc	r25, r1
    5424:	81 f7       	brne	.-32     	; 0x5406 <init+0x182>

		// Loop forever here
		while(1)
		{
			// Pass address of ServoOut array and select all outputs
			output_servo_ppm_asm(&ServoOut[0], 0xFF);
    5426:	6f ef       	ldi	r22, 0xFF	; 255
    5428:	8d e3       	ldi	r24, 0x3D	; 61
    542a:	98 e0       	ldi	r25, 0x08	; 8
    542c:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <output_servo_ppm_asm>
    5430:	2f e7       	ldi	r18, 0x7F	; 127
    5432:	88 e3       	ldi	r24, 0x38	; 56
    5434:	91 e0       	ldi	r25, 0x01	; 1
    5436:	21 50       	subi	r18, 0x01	; 1
    5438:	80 40       	sbci	r24, 0x00	; 0
    543a:	90 40       	sbci	r25, 0x00	; 0
    543c:	e1 f7       	brne	.-8      	; 0x5436 <init+0x1b2>
    543e:	00 c0       	rjmp	.+0      	; 0x5440 <init+0x1bc>
    5440:	00 00       	nop
    5442:	f1 cf       	rjmp	.-30     	; 0x5426 <init+0x1a2>
    5444:	2f e7       	ldi	r18, 0x7F	; 127
    5446:	8f e4       	ldi	r24, 0x4F	; 79
    5448:	92 e1       	ldi	r25, 0x12	; 18
    544a:	21 50       	subi	r18, 0x01	; 1
    544c:	80 40       	sbci	r24, 0x00	; 0
    544e:	90 40       	sbci	r25, 0x00	; 0
    5450:	e1 f7       	brne	.-8      	; 0x544a <init+0x1c6>
    5452:	00 c0       	rjmp	.+0      	; 0x5454 <init+0x1d0>
    5454:	00 00       	nop

	// This delay prevents the GLCD flashing up a ghost image of old data
	_delay_ms(300);

	// Reload default eeprom settings if middle two buttons are pressed
	if ((PINB & 0xf0) == 0x90)
    5456:	93 b1       	in	r25, 0x03	; 3
    5458:	90 7f       	andi	r25, 0xF0	; 240
    545a:	90 39       	cpi	r25, 0x90	; 144
    545c:	51 f5       	brne	.+84     	; 0x54b2 <init+0x22e>
	{
		// Display reset message
		st7565_command(CMD_SET_COM_NORMAL); 	// For text (not for logo)
    545e:	80 ec       	ldi	r24, 0xC0	; 192
    5460:	0e 94 47 20 	call	0x408e	; 0x408e <st7565_command>
		clear_buffer(buffer);
    5464:	85 e0       	ldi	r24, 0x05	; 5
    5466:	91 e0       	ldi	r25, 0x01	; 1
    5468:	0e 94 a7 20 	call	0x414e	; 0x414e <clear_buffer>
		LCD_Display_Text(262,(const unsigned char*)Verdana14,40,25); // "Reset"
    546c:	29 e1       	ldi	r18, 0x19	; 25
    546e:	30 e0       	ldi	r19, 0x00	; 0
    5470:	48 e2       	ldi	r20, 0x28	; 40
    5472:	50 e0       	ldi	r21, 0x00	; 0
    5474:	6f e5       	ldi	r22, 0x5F	; 95
    5476:	71 e0       	ldi	r23, 0x01	; 1
    5478:	86 e0       	ldi	r24, 0x06	; 6
    547a:	91 e0       	ldi	r25, 0x01	; 1
    547c:	0e 94 54 22 	call	0x44a8	; 0x44a8 <LCD_Display_Text>
		write_buffer(buffer);
    5480:	85 e0       	ldi	r24, 0x05	; 5
    5482:	91 e0       	ldi	r25, 0x01	; 1
    5484:	0e 94 75 20 	call	0x40ea	; 0x40ea <write_buffer>
		clear_buffer(buffer);
    5488:	85 e0       	ldi	r24, 0x05	; 5
    548a:	91 e0       	ldi	r25, 0x01	; 1
    548c:	0e 94 a7 20 	call	0x414e	; 0x414e <clear_buffer>
		
		// Reset EEPROM settings
		Set_EEPROM_Default_Config();
    5490:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <Set_EEPROM_Default_Config>
		Save_Config_to_EEPROM();
    5494:	0e 94 6b 16 	call	0x2cd6	; 0x2cd6 <Save_Config_to_EEPROM>

		// Set contrast to the default value
		st7565_set_brightness(Config.Contrast);
    5498:	80 91 3a 06 	lds	r24, 0x063A
    549c:	0e 94 4d 20 	call	0x409a	; 0x409a <st7565_set_brightness>
    54a0:	2f e7       	ldi	r18, 0x7F	; 127
    54a2:	84 e8       	ldi	r24, 0x84	; 132
    54a4:	9e e1       	ldi	r25, 0x1E	; 30
    54a6:	21 50       	subi	r18, 0x01	; 1
    54a8:	80 40       	sbci	r24, 0x00	; 0
    54aa:	90 40       	sbci	r25, 0x00	; 0
    54ac:	e1 f7       	brne	.-8      	; 0x54a6 <init+0x222>
    54ae:	00 c0       	rjmp	.+0      	; 0x54b0 <init+0x22c>
    54b0:	00 00       	nop

		_delay_ms(500);		// Save is now too fast to show the "Reset" text long enough
	}

	// Display message in place of logo when updating eeprom structure
	if (updated)
    54b2:	cc 23       	and	r28, r28
    54b4:	21 f1       	breq	.+72     	; 0x54fe <init+0x27a>
	{
		st7565_command(CMD_SET_COM_NORMAL); 	// For text (not for logo)
    54b6:	80 ec       	ldi	r24, 0xC0	; 192
    54b8:	0e 94 47 20 	call	0x408e	; 0x408e <st7565_command>
		clear_buffer(buffer);
    54bc:	85 e0       	ldi	r24, 0x05	; 5
    54be:	91 e0       	ldi	r25, 0x01	; 1
    54c0:	0e 94 a7 20 	call	0x414e	; 0x414e <clear_buffer>
		LCD_Display_Text(259,(const unsigned char*)Verdana14,30,13); // "Updating"
    54c4:	2d e0       	ldi	r18, 0x0D	; 13
    54c6:	30 e0       	ldi	r19, 0x00	; 0
    54c8:	4e e1       	ldi	r20, 0x1E	; 30
    54ca:	50 e0       	ldi	r21, 0x00	; 0
    54cc:	6f e5       	ldi	r22, 0x5F	; 95
    54ce:	71 e0       	ldi	r23, 0x01	; 1
    54d0:	83 e0       	ldi	r24, 0x03	; 3
    54d2:	91 e0       	ldi	r25, 0x01	; 1
    54d4:	0e 94 54 22 	call	0x44a8	; 0x44a8 <LCD_Display_Text>
		LCD_Display_Text(260,(const unsigned char*)Verdana14,33,37); // "settings"
    54d8:	25 e2       	ldi	r18, 0x25	; 37
    54da:	30 e0       	ldi	r19, 0x00	; 0
    54dc:	41 e2       	ldi	r20, 0x21	; 33
    54de:	50 e0       	ldi	r21, 0x00	; 0
    54e0:	6f e5       	ldi	r22, 0x5F	; 95
    54e2:	71 e0       	ldi	r23, 0x01	; 1
    54e4:	84 e0       	ldi	r24, 0x04	; 4
    54e6:	91 e0       	ldi	r25, 0x01	; 1
    54e8:	0e 94 54 22 	call	0x44a8	; 0x44a8 <LCD_Display_Text>
		write_buffer(buffer);
    54ec:	85 e0       	ldi	r24, 0x05	; 5
    54ee:	91 e0       	ldi	r25, 0x01	; 1
    54f0:	0e 94 75 20 	call	0x40ea	; 0x40ea <write_buffer>
		clear_buffer(buffer);		
    54f4:	85 e0       	ldi	r24, 0x05	; 5
    54f6:	91 e0       	ldi	r25, 0x01	; 1
    54f8:	0e 94 a7 20 	call	0x414e	; 0x414e <clear_buffer>
    54fc:	04 c0       	rjmp	.+8      	; 0x5506 <init+0x282>
		_delay_ms(1000);	
	}
	else
	{
		// Write logo from buffer
		write_buffer(buffer);
    54fe:	85 e0       	ldi	r24, 0x05	; 5
    5500:	91 e0       	ldi	r25, 0x01	; 1
    5502:	0e 94 75 20 	call	0x40ea	; 0x40ea <write_buffer>
    5506:	2f ef       	ldi	r18, 0xFF	; 255
    5508:	88 e0       	ldi	r24, 0x08	; 8
    550a:	9d e3       	ldi	r25, 0x3D	; 61
    550c:	21 50       	subi	r18, 0x01	; 1
    550e:	80 40       	sbci	r24, 0x00	; 0
    5510:	90 40       	sbci	r25, 0x00	; 0
    5512:	e1 f7       	brne	.-8      	; 0x550c <init+0x288>
    5514:	00 c0       	rjmp	.+0      	; 0x5516 <init+0x292>
    5516:	00 00       	nop
		_delay_ms(1000);
	}

	clear_buffer(buffer);
    5518:	85 e0       	ldi	r24, 0x05	; 5
    551a:	91 e0       	ldi	r25, 0x01	; 1
    551c:	0e 94 a7 20 	call	0x414e	; 0x414e <clear_buffer>
	write_buffer(buffer);
    5520:	85 e0       	ldi	r24, 0x05	; 5
    5522:	91 e0       	ldi	r25, 0x01	; 1
    5524:	0e 94 75 20 	call	0x40ea	; 0x40ea <write_buffer>
	
	st7565_init(); // Seems necessary for KK2 mini
    5528:	0e 94 56 20 	call	0x40ac	; 0x40ac <st7565_init>
	
	//***********************************************************
	// i2c init
	//***********************************************************	

	i2c_init();
    552c:	0e 94 e5 44 	call	0x89ca	; 0x89ca <i2c_init>
	init_i2c_gyros();
    5530:	0e 94 9b 24 	call	0x4936	; 0x4936 <init_i2c_gyros>
	init_i2c_accs();
    5534:	0e 94 c7 10 	call	0x218e	; 0x218e <init_i2c_accs>
	//***********************************************************
	// Remaining init tasks
	//***********************************************************

	// Display "Hold steady" message
	clear_buffer(buffer);
    5538:	85 e0       	ldi	r24, 0x05	; 5
    553a:	91 e0       	ldi	r25, 0x01	; 1
    553c:	0e 94 a7 20 	call	0x414e	; 0x414e <clear_buffer>
	st7565_command(CMD_SET_COM_NORMAL); 	// For text (not for logo)
    5540:	80 ec       	ldi	r24, 0xC0	; 192
    5542:	0e 94 47 20 	call	0x408e	; 0x408e <st7565_command>
	LCD_Display_Text(263,(const unsigned char*)Verdana14,18,25);	// "Hold steady"
    5546:	29 e1       	ldi	r18, 0x19	; 25
    5548:	30 e0       	ldi	r19, 0x00	; 0
    554a:	42 e1       	ldi	r20, 0x12	; 18
    554c:	50 e0       	ldi	r21, 0x00	; 0
    554e:	6f e5       	ldi	r22, 0x5F	; 95
    5550:	71 e0       	ldi	r23, 0x01	; 1
    5552:	87 e0       	ldi	r24, 0x07	; 7
    5554:	91 e0       	ldi	r25, 0x01	; 1
    5556:	0e 94 54 22 	call	0x44a8	; 0x44a8 <LCD_Display_Text>
	write_buffer(buffer);	
    555a:	85 e0       	ldi	r24, 0x05	; 5
    555c:	91 e0       	ldi	r25, 0x01	; 1
    555e:	0e 94 75 20 	call	0x40ea	; 0x40ea <write_buffer>
	clear_buffer(buffer);
    5562:	85 e0       	ldi	r24, 0x05	; 5
    5564:	91 e0       	ldi	r25, 0x01	; 1
    5566:	0e 94 a7 20 	call	0x414e	; 0x414e <clear_buffer>
		
	// Do startup tasks
	Init_ADC();
    556a:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <Init_ADC>
	init_int();								// Initialise interrupts based on RC input mode
    556e:	0e 94 4e 2e 	call	0x5c9c	; 0x5c9c <init_int>
	init_uart();							// Initialise UART
    5572:	0e 94 ca 45 	call	0x8b94	; 0x8b94 <init_uart>

	// Initial gyro calibration
	if (!CalibrateGyrosSlow())
    5576:	0e 94 bc 23 	call	0x4778	; 0x4778 <CalibrateGyrosSlow>
    557a:	81 11       	cpse	r24, r1
    557c:	28 c0       	rjmp	.+80     	; 0x55ce <init+0x34a>
	{
		clear_buffer(buffer);
    557e:	85 e0       	ldi	r24, 0x05	; 5
    5580:	91 e0       	ldi	r25, 0x01	; 1
    5582:	0e 94 a7 20 	call	0x414e	; 0x414e <clear_buffer>
		LCD_Display_Text(61,(const unsigned char*)Verdana14,25,25); // "Cal. failed"
    5586:	29 e1       	ldi	r18, 0x19	; 25
    5588:	30 e0       	ldi	r19, 0x00	; 0
    558a:	49 e1       	ldi	r20, 0x19	; 25
    558c:	50 e0       	ldi	r21, 0x00	; 0
    558e:	6f e5       	ldi	r22, 0x5F	; 95
    5590:	71 e0       	ldi	r23, 0x01	; 1
    5592:	8d e3       	ldi	r24, 0x3D	; 61
    5594:	90 e0       	ldi	r25, 0x00	; 0
    5596:	0e 94 54 22 	call	0x44a8	; 0x44a8 <LCD_Display_Text>
		write_buffer(buffer);
    559a:	85 e0       	ldi	r24, 0x05	; 5
    559c:	91 e0       	ldi	r25, 0x01	; 1
    559e:	0e 94 75 20 	call	0x40ea	; 0x40ea <write_buffer>
    55a2:	2f ef       	ldi	r18, 0xFF	; 255
    55a4:	88 e0       	ldi	r24, 0x08	; 8
    55a6:	9d e3       	ldi	r25, 0x3D	; 61
    55a8:	21 50       	subi	r18, 0x01	; 1
    55aa:	80 40       	sbci	r24, 0x00	; 0
    55ac:	90 40       	sbci	r25, 0x00	; 0
    55ae:	e1 f7       	brne	.-8      	; 0x55a8 <init+0x324>
    55b0:	00 c0       	rjmp	.+0      	; 0x55b2 <init+0x32e>
    55b2:	00 00       	nop
		_delay_ms(1000);
		
		// Reset
		cli();
    55b4:	f8 94       	cli
		wdt_enable(WDTO_15MS);				// Watchdog on, 15ms
    55b6:	28 e0       	ldi	r18, 0x08	; 8
    55b8:	88 e1       	ldi	r24, 0x18	; 24
    55ba:	90 e0       	ldi	r25, 0x00	; 0
    55bc:	0f b6       	in	r0, 0x3f	; 63
    55be:	f8 94       	cli
    55c0:	a8 95       	wdr
    55c2:	80 93 60 00 	sts	0x0060, r24
    55c6:	0f be       	out	0x3f, r0	; 63
    55c8:	20 93 60 00 	sts	0x0060, r18
    55cc:	ff cf       	rjmp	.-2      	; 0x55cc <init+0x348>
		while(1);							// Wait for reboot
	}

	// Update voltage detection
	SystemVoltage = GetVbat();				// Check power-up battery voltage
    55ce:	0e 94 2a 46 	call	0x8c54	; 0x8c54 <GetVbat>
    55d2:	90 93 35 05 	sts	0x0535, r25
    55d6:	80 93 34 05 	sts	0x0534, r24
	UpdateLimits();							// Update travel and trigger limits
    55da:	0e 94 8a 36 	call	0x6d14	; 0x6d14 <UpdateLimits>

	// Disarm on start-up if Armed setting is ARMABLE
	if (Config.ArmMode == ARMABLE)
    55de:	80 91 3b 06 	lds	r24, 0x063B
    55e2:	81 30       	cpi	r24, 0x01	; 1
    55e4:	29 f4       	brne	.+10     	; 0x55f0 <init+0x36c>
	{
		General_error |= (1 << DISARMED); 	// Set disarmed bit
    55e6:	80 91 22 05 	lds	r24, 0x0522
    55ea:	84 60       	ori	r24, 0x04	; 4
    55ec:	80 93 22 05 	sts	0x0522, r24
	}

	// Check to see that throttle is low if RC detected
	if (Interrupted)
    55f0:	80 91 ca 07 	lds	r24, 0x07CA
    55f4:	88 23       	and	r24, r24
    55f6:	69 f0       	breq	.+26     	; 0x5612 <init+0x38e>
	{
		RxGetChannels();
    55f8:	0e 94 60 43 	call	0x86c0	; 0x86c0 <RxGetChannels>
		if (MonopolarThrottle > THROTTLEIDLE)
    55fc:	80 91 29 08 	lds	r24, 0x0829
    5600:	90 91 2a 08 	lds	r25, 0x082A
    5604:	c3 97       	sbiw	r24, 0x33	; 51
    5606:	2c f0       	brlt	.+10     	; 0x5612 <init+0x38e>
		{
			General_error |= (1 << THROTTLE_HIGH); 	// Set throttle high error bit
    5608:	80 91 22 05 	lds	r24, 0x0522
    560c:	81 60       	ori	r24, 0x01	; 1
    560e:	80 93 22 05 	sts	0x0522, r24
		}
	}

	// Reset IMU
	reset_IMU();
    5612:	0e 94 f9 28 	call	0x51f2	; 0x51f2 <reset_IMU>

	// Beep that init is complete
	menu_beep(1);
    5616:	81 e0       	ldi	r24, 0x01	; 1

} // init()
    5618:	cf 91       	pop	r28

	// Reset IMU
	reset_IMU();

	// Beep that init is complete
	menu_beep(1);
    561a:	0c 94 04 31 	jmp	0x6208	; 0x6208 <menu_beep>

0000561e <__vector_18>:
//************************************************************
//* Timer 0 overflow handler for extending TMR1
//************************************************************

ISR(TIMER0_OVF_vect)
{
    561e:	1f 92       	push	r1
    5620:	0f 92       	push	r0
    5622:	0f b6       	in	r0, 0x3f	; 63
    5624:	0f 92       	push	r0
    5626:	11 24       	eor	r1, r1
    5628:	8f 93       	push	r24
    562a:	9f 93       	push	r25
	TMR0_counter++;
    562c:	80 91 cd 07 	lds	r24, 0x07CD
    5630:	90 91 ce 07 	lds	r25, 0x07CE
    5634:	01 96       	adiw	r24, 0x01	; 1
    5636:	90 93 ce 07 	sts	0x07CE, r25
    563a:	80 93 cd 07 	sts	0x07CD, r24
}
    563e:	9f 91       	pop	r25
    5640:	8f 91       	pop	r24
    5642:	0f 90       	pop	r0
    5644:	0f be       	out	0x3f, r0	; 63
    5646:	0f 90       	pop	r0
    5648:	1f 90       	pop	r1
    564a:	18 95       	reti

0000564c <__vector_2>:
//* Standard PWM mode
//* Sequential PWM inputs from a normal RC receiver
//************************************************************

ISR(INT1_vect)
{
    564c:	1f 92       	push	r1
    564e:	0f 92       	push	r0
    5650:	0f b6       	in	r0, 0x3f	; 63
    5652:	0f 92       	push	r0
    5654:	11 24       	eor	r1, r1
    5656:	2f 93       	push	r18
    5658:	3f 93       	push	r19
    565a:	8f 93       	push	r24
    565c:	9f 93       	push	r25
	// Log interrupts that occur during PWM generation
	if (JitterGate)	JitterFlag = true;	
    565e:	80 91 e4 07 	lds	r24, 0x07E4
    5662:	88 23       	and	r24, r24
    5664:	19 f0       	breq	.+6      	; 0x566c <__vector_2+0x20>
    5666:	81 e0       	ldi	r24, 0x01	; 1
    5668:	80 93 e5 07 	sts	0x07E5, r24

	if (RX_ROLL)	// Rising
    566c:	4b 9b       	sbis	0x09, 3	; 9
    566e:	09 c0       	rjmp	.+18     	; 0x5682 <__vector_2+0x36>
	{
		RxChannelStart[AILERON] = TCNT1;
    5670:	80 91 84 00 	lds	r24, 0x0084
    5674:	90 91 85 00 	lds	r25, 0x0085
    5678:	90 93 d2 07 	sts	0x07D2, r25
    567c:	80 93 d1 07 	sts	0x07D1, r24
    5680:	14 c0       	rjmp	.+40     	; 0x56aa <__vector_2+0x5e>
	} 
	else 
	{				// Falling
		RxChannel[AILERON] = TCNT1 - RxChannelStart[AILERON];
    5682:	80 91 84 00 	lds	r24, 0x0084
    5686:	90 91 85 00 	lds	r25, 0x0085
    568a:	20 91 d1 07 	lds	r18, 0x07D1
    568e:	30 91 d2 07 	lds	r19, 0x07D2
    5692:	82 1b       	sub	r24, r18
    5694:	93 0b       	sbc	r25, r19
    5696:	90 93 bd 07 	sts	0x07BD, r25
    569a:	80 93 bc 07 	sts	0x07BC, r24
		if (Config.PWM_Sync == AILERON) 
    569e:	80 91 dc 05 	lds	r24, 0x05DC
    56a2:	81 30       	cpi	r24, 0x01	; 1
    56a4:	11 f4       	brne	.+4      	; 0x56aa <__vector_2+0x5e>
		{
			Interrupted = true;						// Signal that interrupt block has finished
    56a6:	80 93 ca 07 	sts	0x07CA, r24
		}
	}
}
    56aa:	9f 91       	pop	r25
    56ac:	8f 91       	pop	r24
    56ae:	3f 91       	pop	r19
    56b0:	2f 91       	pop	r18
    56b2:	0f 90       	pop	r0
    56b4:	0f be       	out	0x3f, r0	; 63
    56b6:	0f 90       	pop	r0
    56b8:	1f 90       	pop	r1
    56ba:	18 95       	reti

000056bc <__vector_1>:

ISR(INT0_vect)
{
    56bc:	1f 92       	push	r1
    56be:	0f 92       	push	r0
    56c0:	0f b6       	in	r0, 0x3f	; 63
    56c2:	0f 92       	push	r0
    56c4:	11 24       	eor	r1, r1
    56c6:	2f 93       	push	r18
    56c8:	3f 93       	push	r19
    56ca:	8f 93       	push	r24
    56cc:	9f 93       	push	r25
	if (JitterGate)	JitterFlag = true;	
    56ce:	80 91 e4 07 	lds	r24, 0x07E4
    56d2:	88 23       	and	r24, r24
    56d4:	19 f0       	breq	.+6      	; 0x56dc <__vector_1+0x20>
    56d6:	81 e0       	ldi	r24, 0x01	; 1
    56d8:	80 93 e5 07 	sts	0x07E5, r24

	if (RX_PITCH)	// Rising 
    56dc:	4a 9b       	sbis	0x09, 2	; 9
    56de:	09 c0       	rjmp	.+18     	; 0x56f2 <__vector_1+0x36>
	{
		RxChannelStart[ELEVATOR] = TCNT1;
    56e0:	80 91 84 00 	lds	r24, 0x0084
    56e4:	90 91 85 00 	lds	r25, 0x0085
    56e8:	90 93 d4 07 	sts	0x07D4, r25
    56ec:	80 93 d3 07 	sts	0x07D3, r24
    56f0:	15 c0       	rjmp	.+42     	; 0x571c <__vector_1+0x60>
	} 
	else 
	{				// Falling
		RxChannel[ELEVATOR] = TCNT1 - RxChannelStart[ELEVATOR];
    56f2:	80 91 84 00 	lds	r24, 0x0084
    56f6:	90 91 85 00 	lds	r25, 0x0085
    56fa:	20 91 d3 07 	lds	r18, 0x07D3
    56fe:	30 91 d4 07 	lds	r19, 0x07D4
    5702:	82 1b       	sub	r24, r18
    5704:	93 0b       	sbc	r25, r19
    5706:	90 93 bf 07 	sts	0x07BF, r25
    570a:	80 93 be 07 	sts	0x07BE, r24
		if (Config.PWM_Sync == ELEVATOR) 
    570e:	80 91 dc 05 	lds	r24, 0x05DC
    5712:	82 30       	cpi	r24, 0x02	; 2
    5714:	19 f4       	brne	.+6      	; 0x571c <__vector_1+0x60>
		{
			Interrupted = true;						// Signal that interrupt block has finished
    5716:	81 e0       	ldi	r24, 0x01	; 1
    5718:	80 93 ca 07 	sts	0x07CA, r24
		}
	}
}
    571c:	9f 91       	pop	r25
    571e:	8f 91       	pop	r24
    5720:	3f 91       	pop	r19
    5722:	2f 91       	pop	r18
    5724:	0f 90       	pop	r0
    5726:	0f be       	out	0x3f, r0	; 63
    5728:	0f 90       	pop	r0
    572a:	1f 90       	pop	r1
    572c:	18 95       	reti

0000572e <__vector_7>:

ISR(PCINT3_vect)
{
    572e:	1f 92       	push	r1
    5730:	0f 92       	push	r0
    5732:	0f b6       	in	r0, 0x3f	; 63
    5734:	0f 92       	push	r0
    5736:	11 24       	eor	r1, r1
    5738:	2f 93       	push	r18
    573a:	3f 93       	push	r19
    573c:	8f 93       	push	r24
    573e:	9f 93       	push	r25
	if (JitterGate)	JitterFlag = true;	
    5740:	80 91 e4 07 	lds	r24, 0x07E4
    5744:	88 23       	and	r24, r24
    5746:	19 f0       	breq	.+6      	; 0x574e <__vector_7+0x20>
    5748:	81 e0       	ldi	r24, 0x01	; 1
    574a:	80 93 e5 07 	sts	0x07E5, r24
		
	if (RX_COLL)	// Rising
    574e:	48 9b       	sbis	0x09, 0	; 9
    5750:	09 c0       	rjmp	.+18     	; 0x5764 <__vector_7+0x36>
	{
		RxChannelStart[THROTTLE] = TCNT1;
    5752:	80 91 84 00 	lds	r24, 0x0084
    5756:	90 91 85 00 	lds	r25, 0x0085
    575a:	90 93 d0 07 	sts	0x07D0, r25
    575e:	80 93 cf 07 	sts	0x07CF, r24
    5762:	15 c0       	rjmp	.+42     	; 0x578e <__vector_7+0x60>
	} 
	else 
	{				// Falling
		RxChannel[THROTTLE] = TCNT1 - RxChannelStart[THROTTLE];
    5764:	80 91 84 00 	lds	r24, 0x0084
    5768:	90 91 85 00 	lds	r25, 0x0085
    576c:	20 91 cf 07 	lds	r18, 0x07CF
    5770:	30 91 d0 07 	lds	r19, 0x07D0
    5774:	82 1b       	sub	r24, r18
    5776:	93 0b       	sbc	r25, r19
    5778:	90 93 bb 07 	sts	0x07BB, r25
    577c:	80 93 ba 07 	sts	0x07BA, r24
		if (Config.PWM_Sync == THROTTLE) 
    5780:	80 91 dc 05 	lds	r24, 0x05DC
    5784:	81 11       	cpse	r24, r1
    5786:	03 c0       	rjmp	.+6      	; 0x578e <__vector_7+0x60>
		{
			Interrupted = true;						// Signal that interrupt block has finished
    5788:	81 e0       	ldi	r24, 0x01	; 1
    578a:	80 93 ca 07 	sts	0x07CA, r24
		}
	}
}
    578e:	9f 91       	pop	r25
    5790:	8f 91       	pop	r24
    5792:	3f 91       	pop	r19
    5794:	2f 91       	pop	r18
    5796:	0f 90       	pop	r0
    5798:	0f be       	out	0x3f, r0	; 63
    579a:	0f 90       	pop	r0
    579c:	1f 90       	pop	r1
    579e:	18 95       	reti

000057a0 <__vector_5>:


ISR(PCINT1_vect)
{
    57a0:	1f 92       	push	r1
    57a2:	0f 92       	push	r0
    57a4:	0f b6       	in	r0, 0x3f	; 63
    57a6:	0f 92       	push	r0
    57a8:	11 24       	eor	r1, r1
    57aa:	2f 93       	push	r18
    57ac:	3f 93       	push	r19
    57ae:	8f 93       	push	r24
    57b0:	9f 93       	push	r25
	if (JitterGate)	JitterFlag = true;
    57b2:	80 91 e4 07 	lds	r24, 0x07E4
    57b6:	88 23       	and	r24, r24
    57b8:	19 f0       	breq	.+6      	; 0x57c0 <__vector_5+0x20>
    57ba:	81 e0       	ldi	r24, 0x01	; 1
    57bc:	80 93 e5 07 	sts	0x07E5, r24

	if (RX_AUX)	// Rising
    57c0:	18 9b       	sbis	0x03, 0	; 3
    57c2:	09 c0       	rjmp	.+18     	; 0x57d6 <__vector_5+0x36>
	{
		RxChannelStart[GEAR] = TCNT1;
    57c4:	80 91 84 00 	lds	r24, 0x0084
    57c8:	90 91 85 00 	lds	r25, 0x0085
    57cc:	90 93 d8 07 	sts	0x07D8, r25
    57d0:	80 93 d7 07 	sts	0x07D7, r24
    57d4:	15 c0       	rjmp	.+42     	; 0x5800 <__vector_5+0x60>
	} 
	else 
	{				// Falling
		RxChannel[GEAR] = TCNT1 - RxChannelStart[GEAR];
    57d6:	80 91 84 00 	lds	r24, 0x0084
    57da:	90 91 85 00 	lds	r25, 0x0085
    57de:	20 91 d7 07 	lds	r18, 0x07D7
    57e2:	30 91 d8 07 	lds	r19, 0x07D8
    57e6:	82 1b       	sub	r24, r18
    57e8:	93 0b       	sbc	r25, r19
    57ea:	90 93 c3 07 	sts	0x07C3, r25
    57ee:	80 93 c2 07 	sts	0x07C2, r24
		if (Config.PWM_Sync == GEAR) 
    57f2:	80 91 dc 05 	lds	r24, 0x05DC
    57f6:	84 30       	cpi	r24, 0x04	; 4
    57f8:	19 f4       	brne	.+6      	; 0x5800 <__vector_5+0x60>
		{
			Interrupted = true;						// Signal that interrupt block has finished
    57fa:	81 e0       	ldi	r24, 0x01	; 1
    57fc:	80 93 ca 07 	sts	0x07CA, r24
		}
	}
}
    5800:	9f 91       	pop	r25
    5802:	8f 91       	pop	r24
    5804:	3f 91       	pop	r19
    5806:	2f 91       	pop	r18
    5808:	0f 90       	pop	r0
    580a:	0f be       	out	0x3f, r0	; 63
    580c:	0f 90       	pop	r0
    580e:	1f 90       	pop	r1
    5810:	18 95       	reti

00005812 <TIM16_ReadTCNT1>:
{
	uint8_t sreg;
	uint16_t i;
	
	/* Save global interrupt flag */
	sreg = SREG;
    5812:	2f b7       	in	r18, 0x3f	; 63
	
	/* Disable interrupts */
	cli();
    5814:	f8 94       	cli
	
	/* Read TCNTn into i */
	i = TCNT1;
    5816:	80 91 84 00 	lds	r24, 0x0084
    581a:	90 91 85 00 	lds	r25, 0x0085
	
	/* Restore global interrupt flag */
	SREG = sreg;
    581e:	2f bf       	out	0x3f, r18	; 63
	return i;
}
    5820:	08 95       	ret

00005822 <__vector_3>:
// Compacted CPPM RX code thanks to Edgar
//
//************************************************************

ISR(INT2_vect)
{
    5822:	1f 92       	push	r1
    5824:	0f 92       	push	r0
    5826:	0f b6       	in	r0, 0x3f	; 63
    5828:	0f 92       	push	r0
    582a:	11 24       	eor	r1, r1
    582c:	2f 93       	push	r18
    582e:	3f 93       	push	r19
    5830:	4f 93       	push	r20
    5832:	5f 93       	push	r21
    5834:	6f 93       	push	r22
    5836:	7f 93       	push	r23
    5838:	8f 93       	push	r24
    583a:	9f 93       	push	r25
    583c:	af 93       	push	r26
    583e:	bf 93       	push	r27
    5840:	ef 93       	push	r30
    5842:	ff 93       	push	r31
	if (JitterGate)	JitterFlag = true;	
    5844:	80 91 e4 07 	lds	r24, 0x07E4
    5848:	88 23       	and	r24, r24
    584a:	19 f0       	breq	.+6      	; 0x5852 <__vector_3+0x30>
    584c:	81 e0       	ldi	r24, 0x01	; 1
    584e:	80 93 e5 07 	sts	0x07E5, r24

    // Backup TCNT1
    uint16_t tCount;
	
    tCount = TIM16_ReadTCNT1();
    5852:	0e 94 09 2c 	call	0x5812	; 0x5812 <TIM16_ReadTCNT1>

	uint8_t curChannel;
	uint8_t prevChannel;

	if (Config.RxMode != CPPM_MODE)
    5856:	20 91 da 05 	lds	r18, 0x05DA
    585a:	22 23       	and	r18, r18
    585c:	d1 f0       	breq	.+52     	; 0x5892 <__vector_3+0x70>
	{
		if (RX_YAW)	// Rising
    585e:	1a 9b       	sbis	0x03, 2	; 3
    5860:	05 c0       	rjmp	.+10     	; 0x586c <__vector_3+0x4a>
		{
			RxChannelStart[RUDDER] = tCount;
    5862:	90 93 d6 07 	sts	0x07D6, r25
    5866:	80 93 d5 07 	sts	0x07D5, r24
    586a:	86 c0       	rjmp	.+268    	; 0x5978 <__vector_3+0x156>
		} 
		else 
		{			// Falling
			RxChannel[RUDDER] = tCount - RxChannelStart[RUDDER];
    586c:	20 91 d5 07 	lds	r18, 0x07D5
    5870:	30 91 d6 07 	lds	r19, 0x07D6
    5874:	82 1b       	sub	r24, r18
    5876:	93 0b       	sbc	r25, r19
    5878:	90 93 c1 07 	sts	0x07C1, r25
    587c:	80 93 c0 07 	sts	0x07C0, r24
			if (Config.PWM_Sync == RUDDER) 
    5880:	80 91 dc 05 	lds	r24, 0x05DC
    5884:	83 30       	cpi	r24, 0x03	; 3
    5886:	09 f0       	breq	.+2      	; 0x588a <__vector_3+0x68>
    5888:	77 c0       	rjmp	.+238    	; 0x5978 <__vector_3+0x156>
			{
				Interrupted = true;					// Signal that interrupt block has finished
    588a:	81 e0       	ldi	r24, 0x01	; 1
    588c:	80 93 ca 07 	sts	0x07CA, r24
    5890:	73 c0       	rjmp	.+230    	; 0x5978 <__vector_3+0x156>
	// CPPM receivers.
	//************************************************************
	else
	{
		// Only respond to negative-going interrupts
		if (CPPM) return;
    5892:	1a 99       	sbic	0x03, 2	; 3
    5894:	71 c0       	rjmp	.+226    	; 0x5978 <__vector_3+0x156>

		// Check to see if previous period was a sync pulse or too small to be valid
		// If so, reset the channel number
		if (((tCount - PPMSyncStart) > SYNCPULSEWIDTH) || ((tCount - PPMSyncStart) < MINPULSEWIDTH))
    5896:	20 91 e2 07 	lds	r18, 0x07E2
    589a:	30 91 e3 07 	lds	r19, 0x07E3
    589e:	ac 01       	movw	r20, r24
    58a0:	42 1b       	sub	r20, r18
    58a2:	53 0b       	sbc	r21, r19
    58a4:	9a 01       	movw	r18, r20
    58a6:	2f 35       	cpi	r18, 0x5F	; 95
    58a8:	3a 41       	sbci	r19, 0x1A	; 26
    58aa:	58 f4       	brcc	.+22     	; 0x58c2 <__vector_3+0xa0>
    58ac:	20 91 e2 07 	lds	r18, 0x07E2
    58b0:	30 91 e3 07 	lds	r19, 0x07E3
    58b4:	ac 01       	movw	r20, r24
    58b6:	42 1b       	sub	r20, r18
    58b8:	53 0b       	sbc	r21, r19
    58ba:	9a 01       	movw	r18, r20
    58bc:	2e 3e       	cpi	r18, 0xEE	; 238
    58be:	32 40       	sbci	r19, 0x02	; 2
    58c0:	10 f4       	brcc	.+4      	; 0x58c6 <__vector_3+0xa4>
		{
			ch_num = 0;
    58c2:	10 92 e1 07 	sts	0x07E1, r1
		}

		// Update PPMSyncStart with current value
		PPMSyncStart = tCount;
    58c6:	90 93 e3 07 	sts	0x07E3, r25
    58ca:	80 93 e2 07 	sts	0x07E2, r24

		// Get the channel number of the current channel in the requested channel order
        curChannel = Config.ChannelOrder[ch_num];
    58ce:	e0 91 e1 07 	lds	r30, 0x07E1
    58d2:	f0 e0       	ldi	r31, 0x00	; 0
    58d4:	ef 54       	subi	r30, 0x4F	; 79
    58d6:	fa 4f       	sbci	r31, 0xFA	; 250
    58d8:	e1 81       	ldd	r30, Z+1	; 0x01

		// Set up previous channel number based on the requested channel order
		if (ch_num > 0)
    58da:	20 91 e1 07 	lds	r18, 0x07E1
    58de:	22 23       	and	r18, r18
    58e0:	39 f0       	breq	.+14     	; 0x58f0 <__vector_3+0xce>
		{
			prevChannel = Config.ChannelOrder[ch_num-1];
    58e2:	a0 91 e1 07 	lds	r26, 0x07E1
    58e6:	b0 e0       	ldi	r27, 0x00	; 0
    58e8:	af 54       	subi	r26, 0x4F	; 79
    58ea:	ba 4f       	sbci	r27, 0xFA	; 250
    58ec:	2c 91       	ld	r18, X
    58ee:	01 c0       	rjmp	.+2      	; 0x58f2 <__vector_3+0xd0>
		}
		else
		{
			prevChannel = 0;
    58f0:	20 e0       	ldi	r18, 0x00	; 0
		}

		// Measure the channel data only for the first MAX_CPPM_CHANNELS (currently 8)
		// Prevent code from over-running RxChannelStart[]
        if (ch_num < MAX_CPPM_CHANNELS)
    58f2:	30 91 e1 07 	lds	r19, 0x07E1
    58f6:	38 30       	cpi	r19, 0x08	; 8
    58f8:	38 f4       	brcc	.+14     	; 0x5908 <__vector_3+0xe6>
		{
            RxChannelStart[curChannel] = tCount;
    58fa:	f0 e0       	ldi	r31, 0x00	; 0
    58fc:	ee 0f       	add	r30, r30
    58fe:	ff 1f       	adc	r31, r31
    5900:	e1 53       	subi	r30, 0x31	; 49
    5902:	f8 4f       	sbci	r31, 0xF8	; 248
    5904:	91 83       	std	Z+1, r25	; 0x01
    5906:	80 83       	st	Z, r24
		}

		// When ch_num = 0, the first channel has not yet been measured.
		// That only occurs at the second pulse. Prevent code from over-running RxChannel[]
        if ((ch_num > 0) && (ch_num <= MAX_CPPM_CHANNELS))
    5908:	30 91 e1 07 	lds	r19, 0x07E1
    590c:	33 23       	and	r19, r19
    590e:	99 f0       	breq	.+38     	; 0x5936 <__vector_3+0x114>
    5910:	30 91 e1 07 	lds	r19, 0x07E1
    5914:	39 30       	cpi	r19, 0x09	; 9
    5916:	78 f4       	brcc	.+30     	; 0x5936 <__vector_3+0x114>
        {
		   RxChannel[prevChannel] = tCount - RxChannelStart[prevChannel];
    5918:	30 e0       	ldi	r19, 0x00	; 0
    591a:	22 0f       	add	r18, r18
    591c:	33 1f       	adc	r19, r19
    591e:	f9 01       	movw	r30, r18
    5920:	e1 53       	subi	r30, 0x31	; 49
    5922:	f8 4f       	sbci	r31, 0xF8	; 248
    5924:	40 81       	ld	r20, Z
    5926:	51 81       	ldd	r21, Z+1	; 0x01
    5928:	84 1b       	sub	r24, r20
    592a:	95 0b       	sbc	r25, r21
    592c:	f9 01       	movw	r30, r18
    592e:	e6 54       	subi	r30, 0x46	; 70
    5930:	f8 4f       	sbci	r31, 0xF8	; 248
    5932:	91 83       	std	Z+1, r25	; 0x01
    5934:	80 83       	st	Z, r24
		}

        // Increment to the next channel
		ch_num++;
    5936:	80 91 e1 07 	lds	r24, 0x07E1
    593a:	8f 5f       	subi	r24, 0xFF	; 255
    593c:	80 93 e1 07 	sts	0x07E1, r24

		// Work out the highest channel number automatically.
		// Update the maximum channel seen so far.
		if (ch_num > max_chan) 
    5940:	90 91 e1 07 	lds	r25, 0x07E1
    5944:	80 91 cb 07 	lds	r24, 0x07CB
    5948:	89 17       	cp	r24, r25
    594a:	28 f4       	brcc	.+10     	; 0x5956 <__vector_3+0x134>
		{
			max_chan = ch_num;					// Update max channel number
    594c:	80 91 e1 07 	lds	r24, 0x07E1
    5950:	80 93 cb 07 	sts	0x07CB, r24
    5954:	09 c0       	rjmp	.+18     	; 0x5968 <__vector_3+0x146>
		}
		// If the current channel is the highest channel, CPPM is complete
		else if (ch_num == max_chan)
    5956:	90 91 e1 07 	lds	r25, 0x07E1
    595a:	80 91 cb 07 	lds	r24, 0x07CB
    595e:	98 13       	cpse	r25, r24
    5960:	03 c0       	rjmp	.+6      	; 0x5968 <__vector_3+0x146>
		{
			Interrupted = true;					// Signal that interrupt block has finished
    5962:	81 e0       	ldi	r24, 0x01	; 1
    5964:	80 93 ca 07 	sts	0x07CA, r24
		}
	
		// If the signal is ever lost, reset measured max channel number
		// and force a recalculation
		if (Overdue)
    5968:	80 91 1b 05 	lds	r24, 0x051B
    596c:	88 23       	and	r24, r24
    596e:	21 f0       	breq	.+8      	; 0x5978 <__vector_3+0x156>
		{
			max_chan = 0;
    5970:	10 92 cb 07 	sts	0x07CB, r1
			Overdue = false;
    5974:	10 92 1b 05 	sts	0x051B, r1
		}
	}
} // ISR(INT2_vect)
    5978:	ff 91       	pop	r31
    597a:	ef 91       	pop	r30
    597c:	bf 91       	pop	r27
    597e:	af 91       	pop	r26
    5980:	9f 91       	pop	r25
    5982:	8f 91       	pop	r24
    5984:	7f 91       	pop	r23
    5986:	6f 91       	pop	r22
    5988:	5f 91       	pop	r21
    598a:	4f 91       	pop	r20
    598c:	3f 91       	pop	r19
    598e:	2f 91       	pop	r18
    5990:	0f 90       	pop	r0
    5992:	0f be       	out	0x3f, r0	; 63
    5994:	0f 90       	pop	r0
    5996:	1f 90       	pop	r1
    5998:	18 95       	reti

0000599a <__vector_20>:
//************************************************************
//* Serial receive interrupt
//************************************************************

ISR(USART0_RX_vect)
{
    599a:	1f 92       	push	r1
    599c:	0f 92       	push	r0
    599e:	0f b6       	in	r0, 0x3f	; 63
    59a0:	0f 92       	push	r0
    59a2:	11 24       	eor	r1, r1
    59a4:	2f 93       	push	r18
    59a6:	3f 93       	push	r19
    59a8:	4f 93       	push	r20
    59aa:	5f 93       	push	r21
    59ac:	6f 93       	push	r22
    59ae:	7f 93       	push	r23
    59b0:	8f 93       	push	r24
    59b2:	9f 93       	push	r25
    59b4:	af 93       	push	r26
    59b6:	bf 93       	push	r27
    59b8:	cf 93       	push	r28
    59ba:	ef 93       	push	r30
    59bc:	ff 93       	push	r31
	//************************************************************
	//* Common entry code
	//************************************************************

	// Log interrupts that occur during PWM generation
	if (JitterGate)	JitterFlag = true;
    59be:	80 91 e4 07 	lds	r24, 0x07E4
    59c2:	88 23       	and	r24, r24
    59c4:	19 f0       	breq	.+6      	; 0x59cc <__vector_20+0x32>
    59c6:	81 e0       	ldi	r24, 0x01	; 1
    59c8:	80 93 e5 07 	sts	0x07E5, r24

	// Read byte first
	temp = UDR0;
    59cc:	c0 91 c6 00 	lds	r28, 0x00C6

	// Save current time stamp
	Save_TCNT1 = TIM16_ReadTCNT1();
    59d0:	0e 94 09 2c 	call	0x5812	; 0x5812 <TIM16_ReadTCNT1>
	
	// Work out frame rate properly
	// Note that CurrentPeriod cannot be larger than 26.2ms
	
	//CurrentPeriod = Save_TCNT1 - PPMSyncStart;
	if (Save_TCNT1 < PPMSyncStart)
    59d4:	20 91 e2 07 	lds	r18, 0x07E2
    59d8:	30 91 e3 07 	lds	r19, 0x07E3
	{
		CurrentPeriod = (65536 - PPMSyncStart + Save_TCNT1);
	}
	else
	{
		CurrentPeriod = (Save_TCNT1 - PPMSyncStart);
    59dc:	20 91 e2 07 	lds	r18, 0x07E2
    59e0:	30 91 e3 07 	lds	r19, 0x07E3
    59e4:	ac 01       	movw	r20, r24
    59e6:	42 1b       	sub	r20, r18
    59e8:	53 0b       	sbc	r21, r19
    59ea:	9a 01       	movw	r18, r20
	}

	// Handle start of new packet
	if (CurrentPeriod > PACKET_TIMER) // 1.0ms
    59ec:	25 3c       	cpi	r18, 0xC5	; 197
    59ee:	59 e0       	ldi	r21, 0x09	; 9
    59f0:	35 07       	cpc	r19, r21
    59f2:	90 f0       	brcs	.+36     	; 0x5a18 <__vector_20+0x7e>
	{
		// Reset variables
		rcindex = 0;
    59f4:	10 92 b9 07 	sts	0x07B9, r1
		bytecount = 0;
    59f8:	10 92 cc 07 	sts	0x07CC, r1
		ch_num = 0;
    59fc:	10 92 e1 07 	sts	0x07E1, r1
		checksum = 0;
    5a00:	10 92 e7 07 	sts	0x07E7, r1
    5a04:	10 92 e6 07 	sts	0x07E6, r1
		chanmask16 = 0;
    5a08:	10 92 e0 07 	sts	0x07E0, r1
    5a0c:	10 92 df 07 	sts	0x07DF, r1

		// Save frame rate to global
		FrameRate = CurrentPeriod;
    5a10:	30 93 e9 07 	sts	0x07E9, r19
    5a14:	20 93 e8 07 	sts	0x07E8, r18
	}

	// Timestamp this interrupt
	PPMSyncStart = Save_TCNT1;
    5a18:	90 93 e3 07 	sts	0x07E3, r25
    5a1c:	80 93 e2 07 	sts	0x07E2, r24
	
	// Put received byte in buffer if space available
	if (rcindex < SBUFFER_SIZE)
    5a20:	80 91 b9 07 	lds	r24, 0x07B9
    5a24:	89 31       	cpi	r24, 0x19	; 25
    5a26:	50 f4       	brcc	.+20     	; 0x5a3c <__vector_20+0xa2>
	{
		sBuffer[rcindex++] = temp;			
    5a28:	e0 91 b9 07 	lds	r30, 0x07B9
    5a2c:	81 e0       	ldi	r24, 0x01	; 1
    5a2e:	8e 0f       	add	r24, r30
    5a30:	80 93 b9 07 	sts	0x07B9, r24
    5a34:	f0 e0       	ldi	r31, 0x00	; 0
    5a36:	e6 5b       	subi	r30, 0xB6	; 182
    5a38:	fa 4f       	sbci	r31, 0xFA	; 250
    5a3a:	c0 83       	st	Z, r28
	//* 	bit0 = n/a
	//* 24 endbyte = 00000000b (SBUS) or (data % 0xCF) (SBUS2)
	//*
	//************************************************************

	if (Config.RxMode == SBUS)
    5a3c:	80 91 da 05 	lds	r24, 0x05DA
    5a40:	82 30       	cpi	r24, 0x02	; 2
    5a42:	09 f0       	breq	.+2      	; 0x5a46 <__vector_20+0xac>
    5a44:	90 c0       	rjmp	.+288    	; 0x5b66 <__vector_20+0x1cc>
	{
		// Flag that packet has completed
		if ((bytecount == 24) && ((temp == 0x00) || ((temp % 0xCF) == 0x04)))
    5a46:	80 91 cc 07 	lds	r24, 0x07CC
    5a4a:	88 31       	cpi	r24, 0x18	; 24
    5a4c:	09 f0       	breq	.+2      	; 0x5a50 <__vector_20+0xb6>
    5a4e:	fc c0       	rjmp	.+504    	; 0x5c48 <__vector_20+0x2ae>
    5a50:	cc 23       	and	r28, r28
    5a52:	59 f0       	breq	.+22     	; 0x5a6a <__vector_20+0xd0>
    5a54:	81 e0       	ldi	r24, 0x01	; 1
    5a56:	cf 3c       	cpi	r28, 0xCF	; 207
    5a58:	08 f4       	brcc	.+2      	; 0x5a5c <__vector_20+0xc2>
    5a5a:	80 e0       	ldi	r24, 0x00	; 0
    5a5c:	91 e3       	ldi	r25, 0x31	; 49
    5a5e:	89 9f       	mul	r24, r25
    5a60:	c0 0d       	add	r28, r0
    5a62:	11 24       	eor	r1, r1
    5a64:	c4 30       	cpi	r28, 0x04	; 4
    5a66:	09 f0       	breq	.+2      	; 0x5a6a <__vector_20+0xd0>
    5a68:	ef c0       	rjmp	.+478    	; 0x5c48 <__vector_20+0x2ae>
		{
			// If frame lost, ignore packet
			if ((sBuffer[23] & 0x20) == 0)
    5a6a:	80 91 61 05 	lds	r24, 0x0561
    5a6e:	85 fd       	sbrc	r24, 5
    5a70:	eb c0       	rjmp	.+470    	; 0x5c48 <__vector_20+0x2ae>
			{
				// RC sync established
				Interrupted = true;
    5a72:	81 e0       	ldi	r24, 0x01	; 1
    5a74:	80 93 ca 07 	sts	0x07CA, r24
    5a78:	80 e0       	ldi	r24, 0x00	; 0
    5a7a:	90 e0       	ldi	r25, 0x00	; 0

				// Clear channel data
				for (j = 0; j < MAX_RC_CHANNELS; j++)
				{
					RxChannel[j] = 0;
    5a7c:	fc 01       	movw	r30, r24
    5a7e:	ee 0f       	add	r30, r30
    5a80:	ff 1f       	adc	r31, r31
    5a82:	e6 54       	subi	r30, 0x46	; 70
    5a84:	f8 4f       	sbci	r31, 0xF8	; 248
    5a86:	11 82       	std	Z+1, r1	; 0x01
    5a88:	10 82       	st	Z, r1
    5a8a:	01 96       	adiw	r24, 0x01	; 1
			{
				// RC sync established
				Interrupted = true;

				// Clear channel data
				for (j = 0; j < MAX_RC_CHANNELS; j++)
    5a8c:	88 30       	cpi	r24, 0x08	; 8
    5a8e:	91 05       	cpc	r25, r1
    5a90:	a9 f7       	brne	.-22     	; 0x5a7c <__vector_20+0xe2>
    5a92:	a8 e5       	ldi	r26, 0x58	; 88
    5a94:	70 e0       	ldi	r23, 0x00	; 0
    5a96:	c0 e0       	ldi	r28, 0x00	; 0
    5a98:	60 e0       	ldi	r22, 0x00	; 0
    5a9a:	b1 e0       	ldi	r27, 0x01	; 1
                for (j = 0; j < 88; j++)
                {
                    if (sBuffer[sindex] & (1<<chan_mask))
                    {
						// Place the RC data into the correct channel order for the transmitted system
						RxChannel[Config.ChannelOrder[chan_shift]] |= (1<<data_mask);
    5a9c:	21 e0       	ldi	r18, 0x01	; 1
    5a9e:	30 e0       	ldi	r19, 0x00	; 0

                // Deconstruct S-Bus data
				// 8 channels * 11 bits = 88 bits
                for (j = 0; j < 88; j++)
                {
                    if (sBuffer[sindex] & (1<<chan_mask))
    5aa0:	eb 2f       	mov	r30, r27
    5aa2:	f0 e0       	ldi	r31, 0x00	; 0
    5aa4:	e6 5b       	subi	r30, 0xB6	; 182
    5aa6:	fa 4f       	sbci	r31, 0xFA	; 250
    5aa8:	80 81       	ld	r24, Z
    5aaa:	90 e0       	ldi	r25, 0x00	; 0
    5aac:	06 2e       	mov	r0, r22
    5aae:	02 c0       	rjmp	.+4      	; 0x5ab4 <__vector_20+0x11a>
    5ab0:	95 95       	asr	r25
    5ab2:	87 95       	ror	r24
    5ab4:	0a 94       	dec	r0
    5ab6:	e2 f7       	brpl	.-8      	; 0x5ab0 <__vector_20+0x116>
    5ab8:	80 ff       	sbrs	r24, 0
    5aba:	17 c0       	rjmp	.+46     	; 0x5aea <__vector_20+0x150>
                    {
						// Place the RC data into the correct channel order for the transmitted system
						RxChannel[Config.ChannelOrder[chan_shift]] |= (1<<data_mask);
    5abc:	ec 2f       	mov	r30, r28
    5abe:	f0 e0       	ldi	r31, 0x00	; 0
    5ac0:	ef 54       	subi	r30, 0x4F	; 79
    5ac2:	fa 4f       	sbci	r31, 0xFA	; 250
    5ac4:	e1 81       	ldd	r30, Z+1	; 0x01
    5ac6:	f0 e0       	ldi	r31, 0x00	; 0
    5ac8:	ee 0f       	add	r30, r30
    5aca:	ff 1f       	adc	r31, r31
    5acc:	e6 54       	subi	r30, 0x46	; 70
    5ace:	f8 4f       	sbci	r31, 0xF8	; 248
    5ad0:	80 81       	ld	r24, Z
    5ad2:	91 81       	ldd	r25, Z+1	; 0x01
    5ad4:	a9 01       	movw	r20, r18
    5ad6:	07 2e       	mov	r0, r23
    5ad8:	02 c0       	rjmp	.+4      	; 0x5ade <__vector_20+0x144>
    5ada:	44 0f       	add	r20, r20
    5adc:	55 1f       	adc	r21, r21
    5ade:	0a 94       	dec	r0
    5ae0:	e2 f7       	brpl	.-8      	; 0x5ada <__vector_20+0x140>
    5ae2:	84 2b       	or	r24, r20
    5ae4:	95 2b       	or	r25, r21
    5ae6:	91 83       	std	Z+1, r25	; 0x01
    5ae8:	80 83       	st	Z, r24
                    }

                    chan_mask++;
    5aea:	6f 5f       	subi	r22, 0xFF	; 255
                    data_mask++;
    5aec:	7f 5f       	subi	r23, 0xFF	; 255

                    // If we have done 8 bits, move to next byte in buffer
					if (chan_mask == 8)
    5aee:	68 30       	cpi	r22, 0x08	; 8
    5af0:	11 f4       	brne	.+4      	; 0x5af6 <__vector_20+0x15c>
                    {
                        chan_mask =0;
                        sindex++;
    5af2:	bf 5f       	subi	r27, 0xFF	; 255
                    data_mask++;

                    // If we have done 8 bits, move to next byte in buffer
					if (chan_mask == 8)
                    {
                        chan_mask =0;
    5af4:	60 e0       	ldi	r22, 0x00	; 0
                        sindex++;
                    }

                    // If we have reconstructed all 11 bits of one channel's data (2047)
					// increment the channel number
					if (data_mask == 11)
    5af6:	7b 30       	cpi	r23, 0x0B	; 11
    5af8:	11 f4       	brne	.+4      	; 0x5afe <__vector_20+0x164>
                    {
                        data_mask =0;
                        chan_shift++;
    5afa:	cf 5f       	subi	r28, 0xFF	; 255

                    // If we have reconstructed all 11 bits of one channel's data (2047)
					// increment the channel number
					if (data_mask == 11)
                    {
                        data_mask =0;
    5afc:	70 e0       	ldi	r23, 0x00	; 0
    5afe:	a1 50       	subi	r26, 0x01	; 1
				// Start from second byte
				sindex = 1;

                // Deconstruct S-Bus data
				// 8 channels * 11 bits = 88 bits
                for (j = 0; j < 88; j++)
    5b00:	79 f6       	brne	.-98     	; 0x5aa0 <__vector_20+0x106>
    5b02:	40 e0       	ldi	r20, 0x00	; 0
    5b04:	50 e0       	ldi	r21, 0x00	; 0

				// Convert to  OpenAero2 values (0~2047 -> 2500~4999)
				for (j = 0; j < MAX_RC_CHANNELS; j++)
				{
					// Subtract weird-ass Futaba offset
					itemp16= RxChannel[j] - 1024;	
    5b06:	fa 01       	movw	r30, r20
    5b08:	ee 0f       	add	r30, r30
    5b0a:	ff 1f       	adc	r31, r31
    5b0c:	e6 54       	subi	r30, 0x46	; 70
    5b0e:	f8 4f       	sbci	r31, 0xF8	; 248
    5b10:	20 81       	ld	r18, Z
    5b12:	31 81       	ldd	r19, Z+1	; 0x01
    5b14:	34 50       	subi	r19, 0x04	; 4
					
					// Expand into OpenAero2 units							
					itemp16 = itemp16 + (itemp16 >> 2) + (itemp16 >> 3) + (itemp16 >> 4) + (itemp16 >> 5); 	// Quick multiply by 1.469 :)
    5b16:	c9 01       	movw	r24, r18
    5b18:	95 95       	asr	r25
    5b1a:	87 95       	ror	r24
    5b1c:	95 95       	asr	r25
    5b1e:	87 95       	ror	r24
    5b20:	82 0f       	add	r24, r18
    5b22:	93 1f       	adc	r25, r19
    5b24:	b9 01       	movw	r22, r18
    5b26:	a3 e0       	ldi	r26, 0x03	; 3
    5b28:	75 95       	asr	r23
    5b2a:	67 95       	ror	r22
    5b2c:	aa 95       	dec	r26
    5b2e:	e1 f7       	brne	.-8      	; 0x5b28 <__vector_20+0x18e>
    5b30:	86 0f       	add	r24, r22
    5b32:	97 1f       	adc	r25, r23
    5b34:	b9 01       	movw	r22, r18
    5b36:	b4 e0       	ldi	r27, 0x04	; 4
    5b38:	75 95       	asr	r23
    5b3a:	67 95       	ror	r22
    5b3c:	ba 95       	dec	r27
    5b3e:	e1 f7       	brne	.-8      	; 0x5b38 <__vector_20+0x19e>
    5b40:	86 0f       	add	r24, r22
    5b42:	97 1f       	adc	r25, r23
    5b44:	c5 e0       	ldi	r28, 0x05	; 5
    5b46:	35 95       	asr	r19
    5b48:	27 95       	ror	r18
    5b4a:	ca 95       	dec	r28
    5b4c:	e1 f7       	brne	.-8      	; 0x5b46 <__vector_20+0x1ac>
    5b4e:	82 0f       	add	r24, r18
    5b50:	93 1f       	adc	r25, r19
					//itemp16 = itemp16 + (itemp16 >> 1); // Quicker mulitply by 1.5

					// Add back in OpenAero2 offset
					RxChannel[j] = itemp16 + 3750;				
    5b52:	8a 55       	subi	r24, 0x5A	; 90
    5b54:	91 4f       	sbci	r25, 0xF1	; 241
    5b56:	91 83       	std	Z+1, r25	; 0x01
    5b58:	80 83       	st	Z, r24
    5b5a:	4f 5f       	subi	r20, 0xFF	; 255
    5b5c:	5f 4f       	sbci	r21, 0xFF	; 255
                        chan_shift++;
                    }
                }

				// Convert to  OpenAero2 values (0~2047 -> 2500~4999)
				for (j = 0; j < MAX_RC_CHANNELS; j++)
    5b5e:	48 30       	cpi	r20, 0x08	; 8
    5b60:	51 05       	cpc	r21, r1
    5b62:	89 f6       	brne	.-94     	; 0x5b06 <__vector_20+0x16c>
    5b64:	71 c0       	rjmp	.+226    	; 0x5c48 <__vector_20+0x2ae>
	//* 0 = 750us, 1023/2047 = 2250us
	//*
	//************************************************************

	// Handle Spektrum format
	if (Config.RxMode == SPEKTRUM)
    5b66:	83 30       	cpi	r24, 0x03	; 3
    5b68:	09 f0       	breq	.+2      	; 0x5b6c <__vector_20+0x1d2>
    5b6a:	6e c0       	rjmp	.+220    	; 0x5c48 <__vector_20+0x2ae>
	{
		// Process data when all packets received
		if (bytecount >= 15)
    5b6c:	80 91 cc 07 	lds	r24, 0x07CC
    5b70:	8f 30       	cpi	r24, 0x0F	; 15
    5b72:	08 f4       	brcc	.+2      	; 0x5b76 <__vector_20+0x1dc>
    5b74:	69 c0       	rjmp	.+210    	; 0x5c48 <__vector_20+0x2ae>
		{
			// Ahem... ah... just stick the last byte into the buffer manually...(hides)
			sBuffer[15] = temp;
    5b76:	c0 93 59 05 	sts	0x0559, r28

			// Set start of channel data per format
			sindex = 2; // Channel data from byte 3

			// Work out if this is 10 or 11 bit data
			if (sBuffer[1] & 0x10) 	// 0 for 10 bit resolution 1 for 11 bit resolution
    5b7a:	80 91 4b 05 	lds	r24, 0x054B
    5b7e:	84 ff       	sbrs	r24, 4
    5b80:	04 c0       	rjmp	.+8      	; 0x5b8a <__vector_20+0x1f0>
			{
				chan_mask = 0x78;	// 11 bit (2048)
				data_mask = 0x07;
    5b82:	c7 e0       	ldi	r28, 0x07	; 7
				chan_shift = 0x03;
    5b84:	63 e0       	ldi	r22, 0x03	; 3
			sindex = 2; // Channel data from byte 3

			// Work out if this is 10 or 11 bit data
			if (sBuffer[1] & 0x10) 	// 0 for 10 bit resolution 1 for 11 bit resolution
			{
				chan_mask = 0x78;	// 11 bit (2048)
    5b86:	78 e7       	ldi	r23, 0x78	; 120
    5b88:	03 c0       	rjmp	.+6      	; 0x5b90 <__vector_20+0x1f6>
				chan_shift = 0x03;
			}
			else
			{
				chan_mask = 0x3C;	// 10 bit (1024)
				data_mask = 0x03;
    5b8a:	c3 e0       	ldi	r28, 0x03	; 3
				chan_shift = 0x02;
    5b8c:	62 e0       	ldi	r22, 0x02	; 2
				data_mask = 0x07;
				chan_shift = 0x03;
			}
			else
			{
				chan_mask = 0x3C;	// 10 bit (1024)
    5b8e:	7c e3       	ldi	r23, 0x3C	; 60
    5b90:	ed e4       	ldi	r30, 0x4D	; 77
    5b92:	f5 e0       	ldi	r31, 0x05	; 5
    5b94:	df 01       	movw	r26, r30
    5b96:	11 97       	sbiw	r26, 0x01	; 1
			// Work out which channel the data is intended for from the channel number data
			// Channels can also be in the second packet. Spektrum has 7 channels per packet.
			for (j = 0; j < 7; j++)
			{
				// Extract channel number
				ch_num = (sBuffer[sindex] & chan_mask) >> chan_shift;
    5b98:	2c 91       	ld	r18, X
    5b9a:	82 2f       	mov	r24, r18
    5b9c:	87 23       	and	r24, r23
    5b9e:	90 e0       	ldi	r25, 0x00	; 0
    5ba0:	06 2e       	mov	r0, r22
    5ba2:	02 c0       	rjmp	.+4      	; 0x5ba8 <__vector_20+0x20e>
    5ba4:	95 95       	asr	r25
    5ba6:	87 95       	ror	r24
    5ba8:	0a 94       	dec	r0
    5baa:	e2 f7       	brpl	.-8      	; 0x5ba4 <__vector_20+0x20a>
    5bac:	80 93 e1 07 	sts	0x07E1, r24

				// Reconstruct channel data
				temp16 = ((sBuffer[sindex] & data_mask) << 8) + sBuffer[sindex + 1];
    5bb0:	80 81       	ld	r24, Z

				// Expand to OpenAero2 units if a valid channel
				// Blank channels have the channel number of 16
				if (ch_num < MAX_RC_CHANNELS)
    5bb2:	90 91 e1 07 	lds	r25, 0x07E1
    5bb6:	98 30       	cpi	r25, 0x08	; 8
    5bb8:	f0 f5       	brcc	.+124    	; 0x5c36 <__vector_20+0x29c>
			{
				// Extract channel number
				ch_num = (sBuffer[sindex] & chan_mask) >> chan_shift;

				// Reconstruct channel data
				temp16 = ((sBuffer[sindex] & data_mask) << 8) + sBuffer[sindex + 1];
    5bba:	2c 23       	and	r18, r28
    5bbc:	30 e0       	ldi	r19, 0x00	; 0
    5bbe:	32 2f       	mov	r19, r18
    5bc0:	22 27       	eor	r18, r18
    5bc2:	28 0f       	add	r18, r24
    5bc4:	31 1d       	adc	r19, r1
				// Expand to OpenAero2 units if a valid channel
				// Blank channels have the channel number of 16
				if (ch_num < MAX_RC_CHANNELS)
				{
					// Subtract Spektrum center offset
					if (chan_shift == 0x03) // 11-bit
    5bc6:	63 30       	cpi	r22, 0x03	; 3
    5bc8:	11 f4       	brne	.+4      	; 0x5bce <__vector_20+0x234>
					{
						itemp16 = temp16 - 1024;
    5bca:	34 50       	subi	r19, 0x04	; 4
    5bcc:	01 c0       	rjmp	.+2      	; 0x5bd0 <__vector_20+0x236>
					}
					else
					{
						itemp16 = temp16 - 512;	
    5bce:	32 50       	subi	r19, 0x02	; 2
					}					

					// Quick multiply by 2.93
					itemp16 = (itemp16 << 1) + (itemp16 >> 1) + (itemp16 >> 2) + (itemp16 >> 3) + (itemp16 >> 4); 
    5bd0:	c9 01       	movw	r24, r18
    5bd2:	88 0f       	add	r24, r24
    5bd4:	99 1f       	adc	r25, r25
    5bd6:	a9 01       	movw	r20, r18
    5bd8:	55 95       	asr	r21
    5bda:	47 95       	ror	r20
    5bdc:	84 0f       	add	r24, r20
    5bde:	95 1f       	adc	r25, r21
    5be0:	a9 01       	movw	r20, r18
    5be2:	55 95       	asr	r21
    5be4:	47 95       	ror	r20
    5be6:	55 95       	asr	r21
    5be8:	47 95       	ror	r20
    5bea:	84 0f       	add	r24, r20
    5bec:	95 1f       	adc	r25, r21
    5bee:	a9 01       	movw	r20, r18
    5bf0:	a3 e0       	ldi	r26, 0x03	; 3
    5bf2:	55 95       	asr	r21
    5bf4:	47 95       	ror	r20
    5bf6:	aa 95       	dec	r26
    5bf8:	e1 f7       	brne	.-8      	; 0x5bf2 <__vector_20+0x258>
    5bfa:	84 0f       	add	r24, r20
    5bfc:	95 1f       	adc	r25, r21
    5bfe:	b4 e0       	ldi	r27, 0x04	; 4
    5c00:	35 95       	asr	r19
    5c02:	27 95       	ror	r18
    5c04:	ba 95       	dec	r27
    5c06:	e1 f7       	brne	.-8      	; 0x5c00 <__vector_20+0x266>
    5c08:	82 0f       	add	r24, r18
    5c0a:	93 1f       	adc	r25, r19

					if (chan_shift == 0x03) // 11-bit
    5c0c:	63 30       	cpi	r22, 0x03	; 3
    5c0e:	11 f4       	brne	.+4      	; 0x5c14 <__vector_20+0x27a>
					{
						// Divide in case of 11-bit value
						itemp16 = itemp16 >> 1;								
    5c10:	95 95       	asr	r25
    5c12:	87 95       	ror	r24
					}

					// Add back in OpenAero2 offset
					itemp16 += 3750;										

					RxChannel[Config.ChannelOrder[ch_num]] = itemp16;
    5c14:	a0 91 e1 07 	lds	r26, 0x07E1
    5c18:	b0 e0       	ldi	r27, 0x00	; 0
    5c1a:	af 54       	subi	r26, 0x4F	; 79
    5c1c:	ba 4f       	sbci	r27, 0xFA	; 250
    5c1e:	11 96       	adiw	r26, 0x01	; 1
    5c20:	ac 91       	ld	r26, X
    5c22:	b0 e0       	ldi	r27, 0x00	; 0
						// Divide in case of 11-bit value
						itemp16 = itemp16 >> 1;								
					}

					// Add back in OpenAero2 offset
					itemp16 += 3750;										
    5c24:	8a 55       	subi	r24, 0x5A	; 90
    5c26:	91 4f       	sbci	r25, 0xF1	; 241

					RxChannel[Config.ChannelOrder[ch_num]] = itemp16;
    5c28:	aa 0f       	add	r26, r26
    5c2a:	bb 1f       	adc	r27, r27
    5c2c:	a6 54       	subi	r26, 0x46	; 70
    5c2e:	b8 4f       	sbci	r27, 0xF8	; 248
    5c30:	11 96       	adiw	r26, 0x01	; 1
    5c32:	9c 93       	st	X, r25
    5c34:	8e 93       	st	-X, r24
    5c36:	32 96       	adiw	r30, 0x02	; 2
				chan_shift = 0x02;
			}

			// Work out which channel the data is intended for from the channel number data
			// Channels can also be in the second packet. Spektrum has 7 channels per packet.
			for (j = 0; j < 7; j++)
    5c38:	45 e0       	ldi	r20, 0x05	; 5
    5c3a:	eb 35       	cpi	r30, 0x5B	; 91
    5c3c:	f4 07       	cpc	r31, r20
    5c3e:	09 f0       	breq	.+2      	; 0x5c42 <__vector_20+0x2a8>
    5c40:	a9 cf       	rjmp	.-174    	; 0x5b94 <__vector_20+0x1fa>
				sindex += 2;

			} // For each pair of bytes
			
			// RC sync established
			Interrupted = true;
    5c42:	81 e0       	ldi	r24, 0x01	; 1
    5c44:	80 93 ca 07 	sts	0x07CA, r24
	//************************************************************
	//* Common exit code
	//************************************************************

	// Increment byte count
	bytecount++;
    5c48:	80 91 cc 07 	lds	r24, 0x07CC
    5c4c:	8f 5f       	subi	r24, 0xFF	; 255
    5c4e:	80 93 cc 07 	sts	0x07CC, r24
}
    5c52:	ff 91       	pop	r31
    5c54:	ef 91       	pop	r30
    5c56:	cf 91       	pop	r28
    5c58:	bf 91       	pop	r27
    5c5a:	af 91       	pop	r26
    5c5c:	9f 91       	pop	r25
    5c5e:	8f 91       	pop	r24
    5c60:	7f 91       	pop	r23
    5c62:	6f 91       	pop	r22
    5c64:	5f 91       	pop	r21
    5c66:	4f 91       	pop	r20
    5c68:	3f 91       	pop	r19
    5c6a:	2f 91       	pop	r18
    5c6c:	0f 90       	pop	r0
    5c6e:	0f be       	out	0x3f, r0	; 63
    5c70:	0f 90       	pop	r0
    5c72:	1f 90       	pop	r1
    5c74:	18 95       	reti

00005c76 <Disable_RC_Interrupts>:
// Disable RC interrupts as required
//***********************************************************

void Disable_RC_Interrupts(void)
{
	cli();	// Disable interrupts
    5c76:	f8 94       	cli

	// Disable PWM input interrupts
	PCMSK1 = 0;							// Disable AUX
    5c78:	10 92 6c 00 	sts	0x006C, r1
	PCMSK3 = 0;							// Disable THR
    5c7c:	10 92 73 00 	sts	0x0073, r1
	EIMSK  = 0;							// Disable INT0, 1 and 2
    5c80:	1d ba       	out	0x1d, r1	; 29

	// Disable receiver (flushes buffer)
	UCSR0B &= ~(1 << RXEN0);	
    5c82:	e1 ec       	ldi	r30, 0xC1	; 193
    5c84:	f0 e0       	ldi	r31, 0x00	; 0
    5c86:	80 81       	ld	r24, Z
    5c88:	8f 7e       	andi	r24, 0xEF	; 239
    5c8a:	80 83       	st	Z, r24

	// Disable serial interrupt	
	UCSR0B &= ~(1 << RXCIE0);
    5c8c:	80 81       	ld	r24, Z
    5c8e:	8f 77       	andi	r24, 0x7F	; 127
    5c90:	80 83       	st	Z, r24
	
	// Clear interrupt flags
	PCIFR	= 0x0F;						// Clear PCIF0~PCIF3 interrupt flags
    5c92:	8f e0       	ldi	r24, 0x0F	; 15
    5c94:	8b bb       	out	0x1b, r24	; 27
	EIFR	= 0x00; 					// Clear INT0~INT2 interrupt flags (Elevator, Aileron, Rudder/CPPM)
    5c96:	1c ba       	out	0x1c, r1	; 28
	
	sei(); // Re-enable interrupts
    5c98:	78 94       	sei
    5c9a:	08 95       	ret

00005c9c <init_int>:
// Reconfigure RC interrupts
//***********************************************************

void init_int(void)
{
	cli();	// Disable interrupts
    5c9c:	f8 94       	cli
	
	switch (Config.RxMode)
    5c9e:	80 91 da 05 	lds	r24, 0x05DA
    5ca2:	81 30       	cpi	r24, 0x01	; 1
    5ca4:	c9 f0       	breq	.+50     	; 0x5cd8 <init_int+0x3c>
    5ca6:	44 f4       	brge	.+16     	; 0x5cb8 <init_int+0x1c>
    5ca8:	81 11       	cpse	r24, r1
    5caa:	2c c0       	rjmp	.+88     	; 0x5d04 <init_int+0x68>
	{
		case CPPM_MODE:
			PCMSK1 = 0;							// Disable AUX
    5cac:	10 92 6c 00 	sts	0x006C, r1
			PCMSK3 = 0;							// Disable THR
    5cb0:	10 92 73 00 	sts	0x0073, r1
			EIMSK = 0x04;						// Enable INT2 (Rudder/CPPM input)
    5cb4:	84 e0       	ldi	r24, 0x04	; 4
    5cb6:	1b c0       	rjmp	.+54     	; 0x5cee <init_int+0x52>

void init_int(void)
{
	cli();	// Disable interrupts
	
	switch (Config.RxMode)
    5cb8:	84 30       	cpi	r24, 0x04	; 4
    5cba:	24 f5       	brge	.+72     	; 0x5d04 <init_int+0x68>
			break;

		case SBUS:
		case SPEKTRUM:
			// Disable PWM input interrupts
			PCMSK1 = 0;							// Disable AUX
    5cbc:	10 92 6c 00 	sts	0x006C, r1
			PCMSK3 = 0;							// Disable THR
    5cc0:	10 92 73 00 	sts	0x0073, r1
			EIMSK  = 0;							// Disable INT0, 1 and 2 
    5cc4:	1d ba       	out	0x1d, r1	; 29
			
			// Enable serial receiver and interrupts
			UCSR0B |= (1 << RXCIE0);			// Enable serial interrupt
    5cc6:	80 91 c1 00 	lds	r24, 0x00C1
    5cca:	80 68       	ori	r24, 0x80	; 128
    5ccc:	80 93 c1 00 	sts	0x00C1, r24
			UCSR0B |= (1 << RXEN0);				// Enable receiver
    5cd0:	80 91 c1 00 	lds	r24, 0x00C1
    5cd4:	80 61       	ori	r24, 0x10	; 16
    5cd6:	14 c0       	rjmp	.+40     	; 0x5d00 <init_int+0x64>
			UCSR0B &= ~(1 << RXCIE0);			// Disable serial interrupt
			UCSR0B &= ~(1 << RXEN0);			// Disable receiver and flush buffer
			break;

		case PWM:
			PCMSK1 |= (1 << PCINT8);			// PB0 (Aux pin change mask)
    5cd8:	80 91 6c 00 	lds	r24, 0x006C
    5cdc:	81 60       	ori	r24, 0x01	; 1
    5cde:	80 93 6c 00 	sts	0x006C, r24
			PCMSK3 |= (1 << PCINT24);			// PD0 (Throttle pin change mask)
    5ce2:	80 91 73 00 	lds	r24, 0x0073
    5ce6:	81 60       	ori	r24, 0x01	; 1
    5ce8:	80 93 73 00 	sts	0x0073, r24
			EIMSK  = 0x07;						// Enable INT0, 1 and 2 
    5cec:	87 e0       	ldi	r24, 0x07	; 7
    5cee:	8d bb       	out	0x1d, r24	; 29
			UCSR0B &= ~(1 << RXCIE0);			// Disable serial interrupt
    5cf0:	80 91 c1 00 	lds	r24, 0x00C1
    5cf4:	8f 77       	andi	r24, 0x7F	; 127
    5cf6:	80 93 c1 00 	sts	0x00C1, r24
			UCSR0B &= ~(1 << RXEN0);			// Disable receiver and flush buffer
    5cfa:	80 91 c1 00 	lds	r24, 0x00C1
    5cfe:	8f 7e       	andi	r24, 0xEF	; 239
			PCMSK3 = 0;							// Disable THR
			EIMSK  = 0;							// Disable INT0, 1 and 2 
			
			// Enable serial receiver and interrupts
			UCSR0B |= (1 << RXCIE0);			// Enable serial interrupt
			UCSR0B |= (1 << RXEN0);				// Enable receiver
    5d00:	80 93 c1 00 	sts	0x00C1, r24
		default:
			break;	
	}	

	// Clear interrupt flags
	PCIFR	= 0x0F;								// Clear PCIF0~PCIF3 interrupt flags
    5d04:	8f e0       	ldi	r24, 0x0F	; 15
    5d06:	8b bb       	out	0x1b, r24	; 27
	EIFR	= 0x00; 							// Clear INT0~INT2 interrupt flags (Elevator, Aileron, Rudder/CPPM)
    5d08:	1c ba       	out	0x1c, r1	; 28

	sei(); // Re-enable interrupts
    5d0a:	78 94       	sei
    5d0c:	08 95       	ret

00005d0e <print_menu_frame>:
// style = menu style (0 = main, 1 = sub)
//************************************************************
void print_menu_frame(uint8_t style)
{
	// Print bottom markers
	if (style == 0)
    5d0e:	81 11       	cpse	r24, r1
    5d10:	27 c0       	rjmp	.+78     	; 0x5d60 <print_menu_frame+0x52>
	{
		LCD_Display_Text(12, (const unsigned char*)Wingdings, 0, 57); 	// Left
    5d12:	29 e3       	ldi	r18, 0x39	; 57
    5d14:	30 e0       	ldi	r19, 0x00	; 0
    5d16:	40 e0       	ldi	r20, 0x00	; 0
    5d18:	50 e0       	ldi	r21, 0x00	; 0
    5d1a:	65 ef       	ldi	r22, 0xF5	; 245
    5d1c:	70 e0       	ldi	r23, 0x00	; 0
    5d1e:	8c e0       	ldi	r24, 0x0C	; 12
    5d20:	90 e0       	ldi	r25, 0x00	; 0
    5d22:	0e 94 54 22 	call	0x44a8	; 0x44a8 <LCD_Display_Text>
		LCD_Display_Text(10, (const unsigned char*)Wingdings, 38, 59); 	// Up
    5d26:	2b e3       	ldi	r18, 0x3B	; 59
    5d28:	30 e0       	ldi	r19, 0x00	; 0
    5d2a:	46 e2       	ldi	r20, 0x26	; 38
    5d2c:	50 e0       	ldi	r21, 0x00	; 0
    5d2e:	65 ef       	ldi	r22, 0xF5	; 245
    5d30:	70 e0       	ldi	r23, 0x00	; 0
    5d32:	8a e0       	ldi	r24, 0x0A	; 10
    5d34:	90 e0       	ldi	r25, 0x00	; 0
    5d36:	0e 94 54 22 	call	0x44a8	; 0x44a8 <LCD_Display_Text>
		LCD_Display_Text(9, (const unsigned char*)Wingdings, 80, 59); 	// Down
    5d3a:	2b e3       	ldi	r18, 0x3B	; 59
    5d3c:	30 e0       	ldi	r19, 0x00	; 0
    5d3e:	40 e5       	ldi	r20, 0x50	; 80
    5d40:	50 e0       	ldi	r21, 0x00	; 0
    5d42:	65 ef       	ldi	r22, 0xF5	; 245
    5d44:	70 e0       	ldi	r23, 0x00	; 0
    5d46:	89 e0       	ldi	r24, 0x09	; 9
    5d48:	90 e0       	ldi	r25, 0x00	; 0
    5d4a:	0e 94 54 22 	call	0x44a8	; 0x44a8 <LCD_Display_Text>
		LCD_Display_Text(11, (const unsigned char*)Wingdings, 120, 57); // Right
    5d4e:	29 e3       	ldi	r18, 0x39	; 57
    5d50:	30 e0       	ldi	r19, 0x00	; 0
    5d52:	48 e7       	ldi	r20, 0x78	; 120
    5d54:	50 e0       	ldi	r21, 0x00	; 0
    5d56:	65 ef       	ldi	r22, 0xF5	; 245
    5d58:	70 e0       	ldi	r23, 0x00	; 0
    5d5a:	8b e0       	ldi	r24, 0x0B	; 11
    5d5c:	90 e0       	ldi	r25, 0x00	; 0
    5d5e:	26 c0       	rjmp	.+76     	; 0x5dac <print_menu_frame+0x9e>
	}
	else
	{
		LCD_Display_Text(16, (const unsigned char*)Verdana8, 0, 54); 	// Clear
    5d60:	26 e3       	ldi	r18, 0x36	; 54
    5d62:	30 e0       	ldi	r19, 0x00	; 0
    5d64:	40 e0       	ldi	r20, 0x00	; 0
    5d66:	50 e0       	ldi	r21, 0x00	; 0
    5d68:	6d e0       	ldi	r22, 0x0D	; 13
    5d6a:	7a e0       	ldi	r23, 0x0A	; 10
    5d6c:	80 e1       	ldi	r24, 0x10	; 16
    5d6e:	90 e0       	ldi	r25, 0x00	; 0
    5d70:	0e 94 54 22 	call	0x44a8	; 0x44a8 <LCD_Display_Text>
		LCD_Display_Text(10, (const unsigned char*)Wingdings, 38, 59);	// Up
    5d74:	2b e3       	ldi	r18, 0x3B	; 59
    5d76:	30 e0       	ldi	r19, 0x00	; 0
    5d78:	46 e2       	ldi	r20, 0x26	; 38
    5d7a:	50 e0       	ldi	r21, 0x00	; 0
    5d7c:	65 ef       	ldi	r22, 0xF5	; 245
    5d7e:	70 e0       	ldi	r23, 0x00	; 0
    5d80:	8a e0       	ldi	r24, 0x0A	; 10
    5d82:	90 e0       	ldi	r25, 0x00	; 0
    5d84:	0e 94 54 22 	call	0x44a8	; 0x44a8 <LCD_Display_Text>
		LCD_Display_Text(9, (const unsigned char*)Wingdings, 80, 59);	// Down
    5d88:	2b e3       	ldi	r18, 0x3B	; 59
    5d8a:	30 e0       	ldi	r19, 0x00	; 0
    5d8c:	40 e5       	ldi	r20, 0x50	; 80
    5d8e:	50 e0       	ldi	r21, 0x00	; 0
    5d90:	65 ef       	ldi	r22, 0xF5	; 245
    5d92:	70 e0       	ldi	r23, 0x00	; 0
    5d94:	89 e0       	ldi	r24, 0x09	; 9
    5d96:	90 e0       	ldi	r25, 0x00	; 0
    5d98:	0e 94 54 22 	call	0x44a8	; 0x44a8 <LCD_Display_Text>
		LCD_Display_Text(17, (const unsigned char*)Verdana8, 103, 54);	// Save
    5d9c:	26 e3       	ldi	r18, 0x36	; 54
    5d9e:	30 e0       	ldi	r19, 0x00	; 0
    5da0:	47 e6       	ldi	r20, 0x67	; 103
    5da2:	50 e0       	ldi	r21, 0x00	; 0
    5da4:	6d e0       	ldi	r22, 0x0D	; 13
    5da6:	7a e0       	ldi	r23, 0x0A	; 10
    5da8:	81 e1       	ldi	r24, 0x11	; 17
    5daa:	90 e0       	ldi	r25, 0x00	; 0
    5dac:	0e 94 54 22 	call	0x44a8	; 0x44a8 <LCD_Display_Text>
	}

	// Write from buffer
	write_buffer(buffer);
    5db0:	85 e0       	ldi	r24, 0x05	; 5
    5db2:	91 e0       	ldi	r25, 0x01	; 1
    5db4:	0c 94 75 20 	jmp	0x40ea	; 0x40ea <write_buffer>

00005db8 <get_menu_range>:
//************************************************************
// get_menu_range - Get range info from PROGMEM for a specific item
//************************************************************

menu_range_t get_menu_range(const unsigned char* menu_ranges, uint8_t menuitem)
{
    5db8:	cf 93       	push	r28
    5dba:	df 93       	push	r29
    5dbc:	cd b7       	in	r28, 0x3d	; 61
    5dbe:	de b7       	in	r29, 0x3e	; 62
    5dc0:	2a 97       	sbiw	r28, 0x0a	; 10
    5dc2:	0f b6       	in	r0, 0x3f	; 63
    5dc4:	f8 94       	cli
    5dc6:	de bf       	out	0x3e, r29	; 62
    5dc8:	0f be       	out	0x3f, r0	; 63
    5dca:	cd bf       	out	0x3d, r28	; 61
	menu_range_t	range;
	memcpy_P(&range, &menu_ranges[menuitem * sizeof(range)], sizeof(range));
    5dcc:	25 e0       	ldi	r18, 0x05	; 5
    5dce:	62 9f       	mul	r22, r18
    5dd0:	80 0d       	add	r24, r0
    5dd2:	91 1d       	adc	r25, r1
    5dd4:	11 24       	eor	r1, r1
    5dd6:	bc 01       	movw	r22, r24
    5dd8:	45 e0       	ldi	r20, 0x05	; 5
    5dda:	50 e0       	ldi	r21, 0x00	; 0
    5ddc:	ce 01       	movw	r24, r28
    5dde:	06 96       	adiw	r24, 0x06	; 6
    5de0:	0e 94 04 49 	call	0x9208	; 0x9208 <memcpy_P>
	return (range);
    5de4:	85 e0       	ldi	r24, 0x05	; 5
    5de6:	fe 01       	movw	r30, r28
    5de8:	36 96       	adiw	r30, 0x06	; 6
    5dea:	de 01       	movw	r26, r28
    5dec:	11 96       	adiw	r26, 0x01	; 1
    5dee:	01 90       	ld	r0, Z+
    5df0:	0d 92       	st	X+, r0
    5df2:	8a 95       	dec	r24
    5df4:	e1 f7       	brne	.-8      	; 0x5dee <get_menu_range+0x36>
    5df6:	29 81       	ldd	r18, Y+1	; 0x01
    5df8:	3a 81       	ldd	r19, Y+2	; 0x02
    5dfa:	4b 81       	ldd	r20, Y+3	; 0x03
    5dfc:	5c 81       	ldd	r21, Y+4	; 0x04
    5dfe:	6d 81       	ldd	r22, Y+5	; 0x05
}
    5e00:	70 e0       	ldi	r23, 0x00	; 0
    5e02:	80 e0       	ldi	r24, 0x00	; 0
    5e04:	90 e0       	ldi	r25, 0x00	; 0
    5e06:	2a 96       	adiw	r28, 0x0a	; 10
    5e08:	0f b6       	in	r0, 0x3f	; 63
    5e0a:	f8 94       	cli
    5e0c:	de bf       	out	0x3e, r29	; 62
    5e0e:	0f be       	out	0x3f, r0	; 63
    5e10:	cd bf       	out	0x3d, r28	; 61
    5e12:	df 91       	pop	r29
    5e14:	cf 91       	pop	r28
    5e16:	08 95       	ret

00005e18 <print_menu_text>:
// x = horizontal location on screen
// y = vertical location on screen
//************************************************************

void print_menu_text(int16_t values, uint8_t style, uint16_t text_link, uint8_t x, uint8_t y)
{
    5e18:	0f 93       	push	r16
    5e1a:	1f 93       	push	r17
    5e1c:	cf 93       	push	r28
    5e1e:	df 93       	push	r29
    5e20:	fa 01       	movw	r30, r20
    5e22:	10 e0       	ldi	r17, 0x00	; 0
    5e24:	c2 2f       	mov	r28, r18
    5e26:	d0 e0       	ldi	r29, 0x00	; 0
	if ((style == 0) || (style == 2) || (style == 3)) // Numeral
    5e28:	66 23       	and	r22, r22
    5e2a:	19 f0       	breq	.+6      	; 0x5e32 <print_menu_text+0x1a>
    5e2c:	62 50       	subi	r22, 0x02	; 2
    5e2e:	62 30       	cpi	r22, 0x02	; 2
    5e30:	78 f4       	brcc	.+30     	; 0x5e50 <print_menu_text+0x38>
    5e32:	4a e0       	ldi	r20, 0x0A	; 10
    5e34:	63 e6       	ldi	r22, 0x63	; 99
    5e36:	75 e0       	ldi	r23, 0x05	; 5
    5e38:	0e 94 1f 49 	call	0x923e	; 0x923e <__itoa_ncheck>
	{
		mugui_lcd_puts(itoa(values,pBuffer,10),(const unsigned char*)Verdana8,x,y);
    5e3c:	98 01       	movw	r18, r16
    5e3e:	ae 01       	movw	r20, r28
    5e40:	6d e0       	ldi	r22, 0x0D	; 13
    5e42:	7a e0       	ldi	r23, 0x0A	; 10
	}
	else
	{
		LCD_Display_Text(text_link, (const unsigned char*)Verdana8,x,y);
	}
}
    5e44:	df 91       	pop	r29
    5e46:	cf 91       	pop	r28
    5e48:	1f 91       	pop	r17
    5e4a:	0f 91       	pop	r16

void print_menu_text(int16_t values, uint8_t style, uint16_t text_link, uint8_t x, uint8_t y)
{
	if ((style == 0) || (style == 2) || (style == 3)) // Numeral
	{
		mugui_lcd_puts(itoa(values,pBuffer,10),(const unsigned char*)Verdana8,x,y);
    5e4c:	0c 94 c3 3e 	jmp	0x7d86	; 0x7d86 <mugui_lcd_puts>
	}
	else
	{
		LCD_Display_Text(text_link, (const unsigned char*)Verdana8,x,y);
    5e50:	98 01       	movw	r18, r16
    5e52:	ae 01       	movw	r20, r28
    5e54:	6d e0       	ldi	r22, 0x0D	; 13
    5e56:	7a e0       	ldi	r23, 0x0A	; 10
    5e58:	cf 01       	movw	r24, r30
	}
}
    5e5a:	df 91       	pop	r29
    5e5c:	cf 91       	pop	r28
    5e5e:	1f 91       	pop	r17
    5e60:	0f 91       	pop	r16
	{
		mugui_lcd_puts(itoa(values,pBuffer,10),(const unsigned char*)Verdana8,x,y);
	}
	else
	{
		LCD_Display_Text(text_link, (const unsigned char*)Verdana8,x,y);
    5e62:	0c 94 54 22 	jmp	0x44a8	; 0x44a8 <LCD_Display_Text>

00005e66 <poll_buttons>:
// Poll buttons, wait until something pressed, debounce and 
// return button info.
//************************************************************

uint8_t poll_buttons(bool acceleration)
{
    5e66:	68 2f       	mov	r22, r24
	static uint8_t button_count = 0;
	uint8_t buttons = 0;

	button = (PINB & 0xf0); // button is global, buttons is local
    5e68:	93 b1       	in	r25, 0x03	; 3
    5e6a:	90 7f       	andi	r25, 0xF0	; 240
    5e6c:	90 93 ea 07 	sts	0x07EA, r25
//************************************************************

uint8_t poll_buttons(bool acceleration)
{
	static uint8_t button_count = 0;
	uint8_t buttons = 0;
    5e70:	80 e0       	ldi	r24, 0x00	; 0
			button = buttons;
		}

		// Reset button acceleration
		button_count = 0;
		button_multiplier = 1;
    5e72:	71 e0       	ldi	r23, 0x01	; 1
	static uint8_t button_count = 0;
	uint8_t buttons = 0;

	button = (PINB & 0xf0); // button is global, buttons is local

	while (button == NONE)					
    5e74:	90 91 ea 07 	lds	r25, 0x07EA
    5e78:	90 3f       	cpi	r25, 0xF0	; 240
    5e7a:	c9 f4       	brne	.+50     	; 0x5eae <poll_buttons+0x48>
	{
		buttons = (PINB & 0xf0);	
    5e7c:	83 b1       	in	r24, 0x03	; 3
    5e7e:	80 7f       	andi	r24, 0xF0	; 240
    5e80:	e7 ea       	ldi	r30, 0xA7	; 167
    5e82:	f1 e6       	ldi	r31, 0x61	; 97
    5e84:	31 97       	sbiw	r30, 0x01	; 1
    5e86:	f1 f7       	brne	.-4      	; 0x5e84 <poll_buttons+0x1e>
    5e88:	00 c0       	rjmp	.+0      	; 0x5e8a <poll_buttons+0x24>
    5e8a:	00 00       	nop
		_delay_ms(5);

		if (buttons != (PINB & 0xf0))
    5e8c:	23 b1       	in	r18, 0x03	; 3
    5e8e:	48 2f       	mov	r20, r24
    5e90:	50 e0       	ldi	r21, 0x00	; 0
    5e92:	20 7f       	andi	r18, 0xF0	; 240
    5e94:	30 e0       	ldi	r19, 0x00	; 0
    5e96:	42 17       	cp	r20, r18
    5e98:	53 07       	cpc	r21, r19
    5e9a:	19 f4       	brne	.+6      	; 0x5ea2 <poll_buttons+0x3c>
		{
			buttons = 0; // Buttons different
		}
		else // Buttons the same - update global
		{
			button = buttons;
    5e9c:	80 93 ea 07 	sts	0x07EA, r24
    5ea0:	01 c0       	rjmp	.+2      	; 0x5ea4 <poll_buttons+0x3e>
		buttons = (PINB & 0xf0);	
		_delay_ms(5);

		if (buttons != (PINB & 0xf0))
		{
			buttons = 0; // Buttons different
    5ea2:	80 e0       	ldi	r24, 0x00	; 0
		{
			button = buttons;
		}

		// Reset button acceleration
		button_count = 0;
    5ea4:	10 92 36 05 	sts	0x0536, r1
		button_multiplier = 1;
    5ea8:	70 93 eb 07 	sts	0x07EB, r23
    5eac:	e3 cf       	rjmp	.-58     	; 0x5e74 <poll_buttons+0xe>
	}

	// Check for buttons being held down if requested
	if ((button != NONE) && (acceleration))
    5eae:	66 23       	and	r22, r22
    5eb0:	71 f0       	breq	.+28     	; 0x5ece <poll_buttons+0x68>
	{
		// Count the number of times incremented
		button_count++; 
    5eb2:	90 91 36 05 	lds	r25, 0x0536
    5eb6:	9f 5f       	subi	r25, 0xFF	; 255
    5eb8:	90 93 36 05 	sts	0x0536, r25
		if (button_count >= 10)
    5ebc:	9a 30       	cpi	r25, 0x0A	; 10
    5ebe:	38 f0       	brcs	.+14     	; 0x5ece <poll_buttons+0x68>
		{
			button_count = 0;
    5ec0:	10 92 36 05 	sts	0x0536, r1
			button_multiplier ++;
    5ec4:	90 91 eb 07 	lds	r25, 0x07EB
    5ec8:	9f 5f       	subi	r25, 0xFF	; 255
    5eca:	90 93 eb 07 	sts	0x07EB, r25
		}
	}

	return buttons;
}
    5ece:	08 95       	ret

00005ed0 <do_menu_item>:
// servo_enable = Enable real-time updating of servo position
// servo_number = Servo number to update
//************************************************************

void do_menu_item(uint16_t menuitem, int8_t *values, uint8_t mult, menu_range_t range, int8_t offset, uint16_t text_link, bool servo_enable, int16_t servo_number)
{
    5ed0:	2f 92       	push	r2
    5ed2:	3f 92       	push	r3
    5ed4:	4f 92       	push	r4
    5ed6:	5f 92       	push	r5
    5ed8:	6f 92       	push	r6
    5eda:	7f 92       	push	r7
    5edc:	8f 92       	push	r8
    5ede:	9f 92       	push	r9
    5ee0:	af 92       	push	r10
    5ee2:	bf 92       	push	r11
    5ee4:	cf 92       	push	r12
    5ee6:	df 92       	push	r13
    5ee8:	ef 92       	push	r14
    5eea:	ff 92       	push	r15
    5eec:	0f 93       	push	r16
    5eee:	1f 93       	push	r17
    5ef0:	cf 93       	push	r28
    5ef2:	df 93       	push	r29
    5ef4:	cd b7       	in	r28, 0x3d	; 61
    5ef6:	de b7       	in	r29, 0x3e	; 62
    5ef8:	69 97       	sbiw	r28, 0x19	; 25
    5efa:	0f b6       	in	r0, 0x3f	; 63
    5efc:	f8 94       	cli
    5efe:	de bf       	out	0x3e, r29	; 62
    5f00:	0f be       	out	0x3f, r0	; 63
    5f02:	cd bf       	out	0x3d, r28	; 61
    5f04:	3c 01       	movw	r6, r24
    5f06:	79 8b       	std	Y+17, r23	; 0x11
    5f08:	68 8b       	std	Y+16, r22	; 0x10
    5f0a:	4a 87       	std	Y+10, r20	; 0x0a
    5f0c:	ed 82       	std	Y+5, r14	; 0x05
    5f0e:	fe 82       	std	Y+6, r15	; 0x06
    5f10:	0f 83       	std	Y+7, r16	; 0x07
    5f12:	41 2e       	mov	r4, r17
    5f14:	18 87       	std	Y+8, r17	; 0x08
    5f16:	29 87       	std	Y+9, r18	; 0x09
    5f18:	bd 8a       	std	Y+21, r11	; 0x15
    5f1a:	ac 8a       	std	Y+20, r10	; 0x14
    5f1c:	4e 2d       	mov	r20, r14
    5f1e:	3f 2d       	mov	r19, r15
    5f20:	0d 87       	std	Y+13, r16	; 0x0d
	mugui_size16_t size;
	int16_t temp16;
	int16_t value = (int8_t)*values;
    5f22:	fb 01       	movw	r30, r22
    5f24:	20 81       	ld	r18, Z
    5f26:	a2 2e       	mov	r10, r18
    5f28:	bb 24       	eor	r11, r11
    5f2a:	a7 fc       	sbrc	r10, 7
    5f2c:	b0 94       	com	r11
	uint8_t button_inc = 0;
	bool	button_lock = false;
	bool	first_time = true;

	// Multiply value for display only if style is 2
	if (range.style == 2)
    5f2e:	f2 e0       	ldi	r31, 0x02	; 2
    5f30:	1f 13       	cpse	r17, r31
    5f32:	05 c0       	rjmp	.+10     	; 0x5f3e <do_menu_item+0x6e>
	{
		value = value * mult;
    5f34:	5a 85       	ldd	r21, Y+10	; 0x0a
    5f36:	25 03       	mulsu	r18, r21
    5f38:	50 01       	movw	r10, r0
    5f3a:	11 24       	eor	r1, r1
    5f3c:	02 c0       	rjmp	.+4      	; 0x5f42 <do_menu_item+0x72>
	}
	else mult = 1;
    5f3e:	81 e0       	ldi	r24, 0x01	; 1
    5f40:	8a 87       	std	Y+10, r24	; 0x0a

	button = NONE;
    5f42:	20 ef       	ldi	r18, 0xF0	; 240
    5f44:	20 93 ea 07 	sts	0x07EA, r18
		{
			value = (range.default_value * mult);
		}

		// Limit values to set ranges
		if (value < (range.lower * mult)) 
    5f48:	fa 85       	ldd	r31, Y+10	; 0x0a
    5f4a:	ef 2f       	mov	r30, r31
    5f4c:	f0 e0       	ldi	r31, 0x00	; 0
    5f4e:	fb 8b       	std	Y+19, r31	; 0x13
    5f50:	ea 8b       	std	Y+18, r30	; 0x12
    5f52:	2a 85       	ldd	r18, Y+10	; 0x0a
    5f54:	42 03       	mulsu	r20, r18
    5f56:	10 01       	movw	r2, r0
    5f58:	11 24       	eor	r1, r1
		{
			value = range.lower * mult;
		}
		
		if (value > (range.upper * mult)) 
    5f5a:	32 03       	mulsu	r19, r18
    5f5c:	a0 01       	movw	r20, r0
    5f5e:	11 24       	eor	r1, r1
    5f60:	5f 87       	std	Y+15, r21	; 0x0f
    5f62:	4e 87       	std	Y+14, r20	; 0x0e
	uint8_t display_update = 0;
	uint8_t servo_update = 0;
	uint8_t button_update = 0;
	uint8_t button_inc = 0;
	bool	button_lock = false;
	bool	first_time = true;
    5f64:	91 e0       	ldi	r25, 0x01	; 1
	int16_t value = (int8_t)*values;
	uint8_t display_update = 0;
	uint8_t servo_update = 0;
	uint8_t button_update = 0;
	uint8_t button_inc = 0;
	bool	button_lock = false;
    5f66:	91 2c       	mov	r9, r1
	mugui_size16_t size;
	int16_t temp16;
	int16_t value = (int8_t)*values;
	uint8_t display_update = 0;
	uint8_t servo_update = 0;
	uint8_t button_update = 0;
    5f68:	51 2c       	mov	r5, r1
void do_menu_item(uint16_t menuitem, int8_t *values, uint8_t mult, menu_range_t range, int8_t offset, uint16_t text_link, bool servo_enable, int16_t servo_number)
{
	mugui_size16_t size;
	int16_t temp16;
	int16_t value = (int8_t)*values;
	uint8_t display_update = 0;
    5f6a:	f1 2c       	mov	r15, r1
			first_time = false;

			clear_buffer(buffer);

			// Print title
			gLCDprint_Menu_P((char*)pgm_read_word(&text_menu[menuitem]), (const unsigned char*)Verdana14, 0, 0);
    5f6c:	83 01       	movw	r16, r6
    5f6e:	00 0f       	add	r16, r16
    5f70:	11 1f       	adc	r17, r17
    5f72:	0c 50       	subi	r16, 0x0C	; 12
    5f74:	12 4f       	sbci	r17, 0xF2	; 242
			// Print value
			if ((range.style == 0) || (range.style == 2) || (range.style == 3)) // numeric, numeric * 4, servo limits
			{
				// Write numeric value, centered on screen
				mugui_text_sizestring(itoa(value,pBuffer,10), (const unsigned char*)Verdana14, &size);
				mugui_lcd_puts(itoa(value,pBuffer,10),(const unsigned char*)Verdana14,((128-size.x)/2)+offset,25);
    5f76:	ec 2d       	mov	r30, r12
    5f78:	ff 27       	eor	r31, r31
    5f7a:	e7 fd       	sbrc	r30, 7
    5f7c:	f0 95       	com	r31
    5f7e:	ff 8b       	std	Y+23, r31	; 0x17
    5f80:	ee 8b       	std	Y+22, r30	; 0x16
    5f82:	f0 e8       	ldi	r31, 0x80	; 128
    5f84:	cf 2e       	mov	r12, r31
    5f86:	d1 2c       	mov	r13, r1

			// Print title
			gLCDprint_Menu_P((char*)pgm_read_word(&text_menu[menuitem]), (const unsigned char*)Verdana14, 0, 0);

			// Print value
			if ((range.style == 0) || (range.style == 2) || (range.style == 3)) // numeric, numeric * 4, servo limits
    5f88:	fe ef       	ldi	r31, 0xFE	; 254
    5f8a:	f4 0d       	add	r31, r4
    5f8c:	f8 8f       	std	Y+24, r31	; 0x18
		else if (range.style == 3)
		{
			// Loop rate = 20ms (50Hz)
			_delay_ms(20);
		}
		else if ((range.style == 0) || (range.style == 2))
    5f8e:	24 2d       	mov	r18, r4
    5f90:	2d 7f       	andi	r18, 0xFD	; 253
    5f92:	29 8f       	std	Y+25, r18	; 0x19

		// Set servo position if required
		// Ignore if the output is marked as a motor
		if	(
			(servo_enable) &&
			(Config.Channel[servo_number].Motor_marker != MOTOR)
    5f94:	86 e2       	ldi	r24, 0x26	; 38
    5f96:	ee a5       	ldd	r30, Y+46	; 0x2e
    5f98:	ff a5       	ldd	r31, Y+47	; 0x2f
    5f9a:	8e 9f       	mul	r24, r30
    5f9c:	a0 01       	movw	r20, r0
    5f9e:	8f 9f       	mul	r24, r31
    5fa0:	50 0d       	add	r21, r0
    5fa2:	11 24       	eor	r1, r1
    5fa4:	49 5b       	subi	r20, 0xB9	; 185
    5fa6:	59 4f       	sbci	r21, 0xF9	; 249
    5fa8:	5c 87       	std	Y+12, r21	; 0x0c
    5faa:	4b 87       	std	Y+11, r20	; 0x0b
	button = NONE;

	// This is a loop that cycles until Button 4 is pressed (Save)
	// The GLCD updating slows servo updates down too much so only update the GLCD periodically
	// When not updating the GLCD the servo should be updated at 50Hz (20ms)
	while (button != ENTER)
    5fac:	80 91 ea 07 	lds	r24, 0x07EA
    5fb0:	80 3e       	cpi	r24, 0xE0	; 224
    5fb2:	09 f4       	brne	.+2      	; 0x5fb6 <do_menu_item+0xe6>
    5fb4:	01 c1       	rjmp	.+514    	; 0x61b8 <do_menu_item+0x2e8>
		// Increment loopcount so that we can time various things
		display_update++;
		servo_update++;

		// Vary the button increment delay depending on the function
		if (servo_enable)
    5fb6:	88 20       	and	r8, r8
    5fb8:	11 f0       	breq	.+4      	; 0x5fbe <do_menu_item+0xee>
		{
			button_inc = 5; // For servos
    5fba:	25 e0       	ldi	r18, 0x05	; 5
    5fbc:	01 c0       	rjmp	.+2      	; 0x5fc0 <do_menu_item+0xf0>
		}
		else
		{
			button_inc = 1;	// For everything else (numbers)
    5fbe:	21 e0       	ldi	r18, 0x01	; 1
		}

		// Increment button timer when pressed
		if (button != NONE)
    5fc0:	80 3f       	cpi	r24, 0xF0	; 240
    5fc2:	19 f0       	breq	.+6      	; 0x5fca <do_menu_item+0xfa>
		{
			button_update++;
    5fc4:	53 94       	inc	r5

			// Release button lock after button_inc loops
			if (button_update > button_inc)
    5fc6:	25 15       	cp	r18, r5
    5fc8:	10 f4       	brcc	.+4      	; 0x5fce <do_menu_item+0xfe>
		}
		// Remove lock when not pressed
		else 
		{
			button_update = 0;
			button_lock = false;
    5fca:	91 2c       	mov	r9, r1
			} 
		}
		// Remove lock when not pressed
		else 
		{
			button_update = 0;
    5fcc:	51 2c       	mov	r5, r1
			button_lock = false;
		}

		// Display update
		if 	(!servo_enable || 									// Non-servo value or
    5fce:	88 20       	and	r8, r8
    5fd0:	49 f0       	breq	.+18     	; 0x5fe4 <do_menu_item+0x114>
	// The GLCD updating slows servo updates down too much so only update the GLCD periodically
	// When not updating the GLCD the servo should be updated at 50Hz (20ms)
	while (button != ENTER)
	{
		// Increment loopcount so that we can time various things
		display_update++;
    5fd2:	f3 94       	inc	r15
			button_update = 0;
			button_lock = false;
		}

		// Display update
		if 	(!servo_enable || 									// Non-servo value or
    5fd4:	f7 e0       	ldi	r31, 0x07	; 7
    5fd6:	ff 15       	cp	r31, r15
    5fd8:	10 f4       	brcc	.+4      	; 0x5fde <do_menu_item+0x10e>
			((display_update >= 8) && (button != NONE)) || 		// Servo value and 8 cycles passed but only with a button pressed or...
    5fda:	80 3f       	cpi	r24, 0xF0	; 240
    5fdc:	19 f4       	brne	.+6      	; 0x5fe4 <do_menu_item+0x114>
    5fde:	99 23       	and	r25, r25
    5fe0:	09 f4       	brne	.+2      	; 0x5fe4 <do_menu_item+0x114>
    5fe2:	66 c0       	rjmp	.+204    	; 0x60b0 <do_menu_item+0x1e0>
			 (first_time))										// First time into routine
		{
			display_update = 0;
			first_time = false;

			clear_buffer(buffer);
    5fe4:	85 e0       	ldi	r24, 0x05	; 5
    5fe6:	91 e0       	ldi	r25, 0x01	; 1
    5fe8:	0e 94 a7 20 	call	0x414e	; 0x414e <clear_buffer>

			// Print title
			gLCDprint_Menu_P((char*)pgm_read_word(&text_menu[menuitem]), (const unsigned char*)Verdana14, 0, 0);
    5fec:	f8 01       	movw	r30, r16
    5fee:	85 91       	lpm	r24, Z+
    5ff0:	94 91       	lpm	r25, Z
    5ff2:	20 e0       	ldi	r18, 0x00	; 0
    5ff4:	30 e0       	ldi	r19, 0x00	; 0
    5ff6:	40 e0       	ldi	r20, 0x00	; 0
    5ff8:	50 e0       	ldi	r21, 0x00	; 0
    5ffa:	6f e5       	ldi	r22, 0x5F	; 95
    5ffc:	71 e0       	ldi	r23, 0x01	; 1
    5ffe:	0e 94 5d 22 	call	0x44ba	; 0x44ba <gLCDprint_Menu_P>

			// Print value
			if ((range.style == 0) || (range.style == 2) || (range.style == 3)) // numeric, numeric * 4, servo limits
    6002:	44 20       	and	r4, r4
    6004:	19 f0       	breq	.+6      	; 0x600c <do_menu_item+0x13c>
    6006:	28 8d       	ldd	r18, Y+24	; 0x18
    6008:	22 30       	cpi	r18, 0x02	; 2
    600a:	30 f5       	brcc	.+76     	; 0x6058 <do_menu_item+0x188>
    600c:	4a e0       	ldi	r20, 0x0A	; 10
    600e:	63 e6       	ldi	r22, 0x63	; 99
    6010:	75 e0       	ldi	r23, 0x05	; 5
    6012:	c5 01       	movw	r24, r10
    6014:	0e 94 1f 49 	call	0x923e	; 0x923e <__itoa_ncheck>
			{
				// Write numeric value, centered on screen
				mugui_text_sizestring(itoa(value,pBuffer,10), (const unsigned char*)Verdana14, &size);
    6018:	ae 01       	movw	r20, r28
    601a:	4f 5f       	subi	r20, 0xFF	; 255
    601c:	5f 4f       	sbci	r21, 0xFF	; 255
    601e:	6f e5       	ldi	r22, 0x5F	; 95
    6020:	71 e0       	ldi	r23, 0x01	; 1
    6022:	0e 94 74 3d 	call	0x7ae8	; 0x7ae8 <mugui_text_sizestring>
				mugui_lcd_puts(itoa(value,pBuffer,10),(const unsigned char*)Verdana14,((128-size.x)/2)+offset,25);
    6026:	89 81       	ldd	r24, Y+1	; 0x01
    6028:	9a 81       	ldd	r25, Y+2	; 0x02
    602a:	76 01       	movw	r14, r12
    602c:	e8 1a       	sub	r14, r24
    602e:	f9 0a       	sbc	r15, r25
    6030:	f6 94       	lsr	r15
    6032:	e7 94       	ror	r14
    6034:	4e 89       	ldd	r20, Y+22	; 0x16
    6036:	5f 89       	ldd	r21, Y+23	; 0x17
    6038:	e4 0e       	add	r14, r20
    603a:	f5 1e       	adc	r15, r21
    603c:	4a e0       	ldi	r20, 0x0A	; 10
    603e:	63 e6       	ldi	r22, 0x63	; 99
    6040:	75 e0       	ldi	r23, 0x05	; 5
    6042:	c5 01       	movw	r24, r10
    6044:	0e 94 1f 49 	call	0x923e	; 0x923e <__itoa_ncheck>
    6048:	29 e1       	ldi	r18, 0x19	; 25
    604a:	30 e0       	ldi	r19, 0x00	; 0
    604c:	a7 01       	movw	r20, r14
    604e:	6f e5       	ldi	r22, 0x5F	; 95
    6050:	71 e0       	ldi	r23, 0x01	; 1
    6052:	0e 94 c3 3e 	call	0x7d86	; 0x7d86 <mugui_lcd_puts>
    6056:	24 c0       	rjmp	.+72     	; 0x60a0 <do_menu_item+0x1d0>
			}
			else // text
			{
				// Write text, centered on screen
				// NB: pBuffer obviously has to be larger than the longest text string printed... duh...
				pgm_mugui_scopy((char*)pgm_read_word(&text_menu[text_link + value])); // Copy string to pBuffer
    6058:	ec 88       	ldd	r14, Y+20	; 0x14
    605a:	fd 88       	ldd	r15, Y+21	; 0x15
    605c:	ea 0c       	add	r14, r10
    605e:	fb 1c       	adc	r15, r11
    6060:	f7 01       	movw	r30, r14
    6062:	ee 0f       	add	r30, r30
    6064:	ff 1f       	adc	r31, r31
    6066:	ec 50       	subi	r30, 0x0C	; 12
    6068:	f2 4f       	sbci	r31, 0xF2	; 242
    606a:	85 91       	lpm	r24, Z+
    606c:	94 91       	lpm	r25, Z
    606e:	0e 94 c2 3d 	call	0x7b84	; 0x7b84 <pgm_mugui_scopy>

				mugui_text_sizestring((char*)pBuffer, (const unsigned char*)Verdana14, &size);
    6072:	ae 01       	movw	r20, r28
    6074:	4f 5f       	subi	r20, 0xFF	; 255
    6076:	5f 4f       	sbci	r21, 0xFF	; 255
    6078:	6f e5       	ldi	r22, 0x5F	; 95
    607a:	71 e0       	ldi	r23, 0x01	; 1
    607c:	83 e6       	ldi	r24, 0x63	; 99
    607e:	95 e0       	ldi	r25, 0x05	; 5
    6080:	0e 94 74 3d 	call	0x7ae8	; 0x7ae8 <mugui_text_sizestring>
				LCD_Display_Text(text_link + value, (const unsigned char*)Verdana14,((128-size.x)/2),25);
    6084:	89 81       	ldd	r24, Y+1	; 0x01
    6086:	9a 81       	ldd	r25, Y+2	; 0x02
    6088:	a6 01       	movw	r20, r12
    608a:	48 1b       	sub	r20, r24
    608c:	59 0b       	sbc	r21, r25
    608e:	56 95       	lsr	r21
    6090:	47 95       	ror	r20
    6092:	29 e1       	ldi	r18, 0x19	; 25
    6094:	30 e0       	ldi	r19, 0x00	; 0
    6096:	6f e5       	ldi	r22, 0x5F	; 95
    6098:	71 e0       	ldi	r23, 0x01	; 1
    609a:	c7 01       	movw	r24, r14
    609c:	0e 94 54 22 	call	0x44a8	; 0x44a8 <LCD_Display_Text>
			}

			// Print bottom markers
			print_menu_frame(1);
    60a0:	81 e0       	ldi	r24, 0x01	; 1
    60a2:	0e 94 87 2e 	call	0x5d0e	; 0x5d0e <print_menu_frame>

			// Write from buffer
			write_buffer(buffer);
    60a6:	85 e0       	ldi	r24, 0x05	; 5
    60a8:	91 e0       	ldi	r25, 0x01	; 1
    60aa:	0e 94 75 20 	call	0x40ea	; 0x40ea <write_buffer>
		// Display update
		if 	(!servo_enable || 									// Non-servo value or
			((display_update >= 8) && (button != NONE)) || 		// Servo value and 8 cycles passed but only with a button pressed or...
			 (first_time))										// First time into routine
		{
			display_update = 0;
    60ae:	f1 2c       	mov	r15, r1
			write_buffer(buffer);
		}
		
		// Debug
		// Slow the loop rate for text items
		if (range.style == 1)
    60b0:	51 e0       	ldi	r21, 0x01	; 1
    60b2:	45 12       	cpse	r4, r21
    60b4:	08 c0       	rjmp	.+16     	; 0x60c6 <do_menu_item+0x1f6>
    60b6:	8f e3       	ldi	r24, 0x3F	; 63
    60b8:	92 e4       	ldi	r25, 0x42	; 66
    60ba:	ef e0       	ldi	r30, 0x0F	; 15
    60bc:	81 50       	subi	r24, 0x01	; 1
    60be:	90 40       	sbci	r25, 0x00	; 0
    60c0:	e0 40       	sbci	r30, 0x00	; 0
    60c2:	e1 f7       	brne	.-8      	; 0x60bc <do_menu_item+0x1ec>
    60c4:	15 c0       	rjmp	.+42     	; 0x60f0 <do_menu_item+0x220>
		{
			// Loop rate = 250ms (4Hz)
			_delay_ms(250);
		}
		else if (range.style == 3)
    60c6:	f3 e0       	ldi	r31, 0x03	; 3
    60c8:	4f 12       	cpse	r4, r31
    60ca:	08 c0       	rjmp	.+16     	; 0x60dc <do_menu_item+0x20c>
    60cc:	2f e7       	ldi	r18, 0x7F	; 127
    60ce:	38 e3       	ldi	r19, 0x38	; 56
    60d0:	41 e0       	ldi	r20, 0x01	; 1
    60d2:	21 50       	subi	r18, 0x01	; 1
    60d4:	30 40       	sbci	r19, 0x00	; 0
    60d6:	40 40       	sbci	r20, 0x00	; 0
    60d8:	e1 f7       	brne	.-8      	; 0x60d2 <do_menu_item+0x202>
    60da:	0a c0       	rjmp	.+20     	; 0x60f0 <do_menu_item+0x220>
		{
			// Loop rate = 20ms (50Hz)
			_delay_ms(20);
		}
		else if ((range.style == 0) || (range.style == 2))
    60dc:	59 8d       	ldd	r21, Y+25	; 0x19
    60de:	51 11       	cpse	r21, r1
    60e0:	09 c0       	rjmp	.+18     	; 0x60f4 <do_menu_item+0x224>
    60e2:	8f e7       	ldi	r24, 0x7F	; 127
    60e4:	9a e1       	ldi	r25, 0x1A	; 26
    60e6:	e6 e0       	ldi	r30, 0x06	; 6
    60e8:	81 50       	subi	r24, 0x01	; 1
    60ea:	90 40       	sbci	r25, 0x00	; 0
    60ec:	e0 40       	sbci	r30, 0x00	; 0
    60ee:	e1 f7       	brne	.-8      	; 0x60e8 <do_menu_item+0x218>
    60f0:	00 c0       	rjmp	.+0      	; 0x60f2 <do_menu_item+0x222>
    60f2:	00 00       	nop
		}

		// Poll buttons when idle
		// Don't use button acceleration when moving servos
		// And don't block the code with poll_buttons()
		if (servo_enable)
    60f4:	88 20       	and	r8, r8
    60f6:	41 f0       	breq	.+16     	; 0x6108 <do_menu_item+0x238>
		{
			button = (PINB & 0xf0);	
    60f8:	83 b1       	in	r24, 0x03	; 3
    60fa:	80 7f       	andi	r24, 0xF0	; 240
    60fc:	80 93 ea 07 	sts	0x07EA, r24
			button_multiplier = 1;
    6100:	81 e0       	ldi	r24, 0x01	; 1
    6102:	80 93 eb 07 	sts	0x07EB, r24
    6106:	03 c0       	rjmp	.+6      	; 0x610e <do_menu_item+0x23e>
		}
		else
		{
			poll_buttons(true);
    6108:	81 e0       	ldi	r24, 0x01	; 1
    610a:	0e 94 33 2f 	call	0x5e66	; 0x5e66 <poll_buttons>
		}

		// Debug - release button lock when pressed
		// unless a servo
		if ((button != NONE) && (!servo_enable))
    610e:	80 91 ea 07 	lds	r24, 0x07EA
    6112:	80 3f       	cpi	r24, 0xF0	; 240
    6114:	39 f1       	breq	.+78     	; 0x6164 <do_menu_item+0x294>
    6116:	88 20       	and	r8, r8
    6118:	c9 f0       	breq	.+50     	; 0x614c <do_menu_item+0x27c>
		{
				button_lock = false;
		}
		
		// Handle cursor Up/Down limits
		if (button == DOWN)
    611a:	80 3d       	cpi	r24, 0xD0	; 208
    611c:	51 f4       	brne	.+20     	; 0x6132 <do_menu_item+0x262>
		{
			if (button_lock == false)
    611e:	91 10       	cpse	r9, r1
    6120:	70 c0       	rjmp	.+224    	; 0x6202 <do_menu_item+0x332>
			{
				button_lock = true;
				value = value - (range.increment * button_multiplier);
    6122:	80 91 eb 07 	lds	r24, 0x07EB
    6126:	fd 85       	ldd	r31, Y+13	; 0x0d
    6128:	f8 9f       	mul	r31, r24
    612a:	a0 18       	sub	r10, r0
    612c:	b1 08       	sbc	r11, r1
    612e:	11 24       	eor	r1, r1
    6130:	0b c0       	rjmp	.+22     	; 0x6148 <do_menu_item+0x278>
				button_update = 0;
			}
		}

		if (button == UP)
    6132:	80 3b       	cpi	r24, 0xB0	; 176
    6134:	81 f4       	brne	.+32     	; 0x6156 <do_menu_item+0x286>
		{
			if (button_lock == false)
    6136:	91 10       	cpse	r9, r1
    6138:	64 c0       	rjmp	.+200    	; 0x6202 <do_menu_item+0x332>
			{
				button_lock = true;
				value = value + (range.increment * button_multiplier);
    613a:	80 91 eb 07 	lds	r24, 0x07EB
    613e:	2d 85       	ldd	r18, Y+13	; 0x0d
    6140:	28 9f       	mul	r18, r24
    6142:	a0 0c       	add	r10, r0
    6144:	b1 1c       	adc	r11, r1
    6146:	11 24       	eor	r1, r1
				button_update = 0;
    6148:	51 2c       	mov	r5, r1
    614a:	5b c0       	rjmp	.+182    	; 0x6202 <do_menu_item+0x332>
		{
				button_lock = false;
		}
		
		// Handle cursor Up/Down limits
		if (button == DOWN)
    614c:	80 3d       	cpi	r24, 0xD0	; 208
    614e:	49 f3       	breq	.-46     	; 0x6122 <do_menu_item+0x252>
				value = value - (range.increment * button_multiplier);
				button_update = 0;
			}
		}

		if (button == UP)
    6150:	80 3b       	cpi	r24, 0xB0	; 176
    6152:	99 f3       	breq	.-26     	; 0x613a <do_menu_item+0x26a>

		// Debug - release button lock when pressed
		// unless a servo
		if ((button != NONE) && (!servo_enable))
		{
				button_lock = false;
    6154:	91 2c       	mov	r9, r1
				value = value + (range.increment * button_multiplier);
				button_update = 0;
			}
		}

		if (button == BACK)	
    6156:	80 37       	cpi	r24, 0x70	; 112
    6158:	29 f4       	brne	.+10     	; 0x6164 <do_menu_item+0x294>
		{
			value = (range.default_value * mult);
    615a:	29 85       	ldd	r18, Y+9	; 0x09
    615c:	3a 85       	ldd	r19, Y+10	; 0x0a
    615e:	23 03       	mulsu	r18, r19
    6160:	50 01       	movw	r10, r0
    6162:	11 24       	eor	r1, r1
    6164:	a2 14       	cp	r10, r2
    6166:	b3 04       	cpc	r11, r3
    6168:	0c f4       	brge	.+2      	; 0x616c <do_menu_item+0x29c>
    616a:	51 01       	movw	r10, r2
    616c:	4e 85       	ldd	r20, Y+14	; 0x0e
    616e:	5f 85       	ldd	r21, Y+15	; 0x0f
    6170:	4a 15       	cp	r20, r10
    6172:	5b 05       	cpc	r21, r11
    6174:	0c f4       	brge	.+2      	; 0x6178 <do_menu_item+0x2a8>
    6176:	5a 01       	movw	r10, r20
		{
			value = range.upper * mult;
		}

		// Update contrast setting
		if (menuitem == CONTRAST)
    6178:	5f e9       	ldi	r21, 0x9F	; 159
    617a:	65 16       	cp	r6, r21
    617c:	71 04       	cpc	r7, r1
    617e:	19 f4       	brne	.+6      	; 0x6186 <do_menu_item+0x2b6>
		{
			st7565_set_brightness(value);
    6180:	8a 2d       	mov	r24, r10
    6182:	0e 94 4d 20 	call	0x409a	; 0x409a <st7565_set_brightness>
		}

		// Set servo position if required
		// Ignore if the output is marked as a motor
		if	(
    6186:	88 20       	and	r8, r8
    6188:	a9 f0       	breq	.+42     	; 0x61b4 <do_menu_item+0x2e4>
			(servo_enable) &&
    618a:	eb 85       	ldd	r30, Y+11	; 0x0b
    618c:	fc 85       	ldd	r31, Y+12	; 0x0c
    618e:	80 81       	ld	r24, Z
    6190:	82 30       	cpi	r24, 0x02	; 2
    6192:	81 f0       	breq	.+32     	; 0x61b4 <do_menu_item+0x2e4>
			(Config.Channel[servo_number].Motor_marker != MOTOR)
			)
		{
			servo_update = 0;

			temp16 = scale_percent(value);	// Convert to servo position (from %)
    6194:	8a 2d       	mov	r24, r10
    6196:	0e 94 6d 3d 	call	0x7ada	; 0x7ada <scale_percent>

			// Scale servo from 2500~5000 to 875~2125
			temp16 = ((temp16 - 3750) >> 1) + 1500; 
    619a:	86 5a       	subi	r24, 0xA6	; 166
    619c:	9e 40       	sbci	r25, 0x0E	; 14
    619e:	95 95       	asr	r25
    61a0:	87 95       	ror	r24

			cli();
    61a2:	f8 94       	cli
			servo_update = 0;

			temp16 = scale_percent(value);	// Convert to servo position (from %)

			// Scale servo from 2500~5000 to 875~2125
			temp16 = ((temp16 - 3750) >> 1) + 1500; 
    61a4:	bc 01       	movw	r22, r24
    61a6:	64 52       	subi	r22, 0x24	; 36
    61a8:	7a 4f       	sbci	r23, 0xFA	; 250

			cli();
			output_servo_ppm_asm3(servo_number, temp16);
    61aa:	8e a5       	ldd	r24, Y+46	; 0x2e
    61ac:	9f a5       	ldd	r25, Y+47	; 0x2f
    61ae:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <output_servo_ppm_asm3>
			sei();
    61b2:	78 94       	sei
    61b4:	90 e0       	ldi	r25, 0x00	; 0
    61b6:	fa ce       	rjmp	.-524    	; 0x5fac <do_menu_item+0xdc>

	// Exit
	button = ENTER;

	// Divide value from that displayed if style = 2
	if (range.style == 2)
    61b8:	f2 e0       	ldi	r31, 0x02	; 2
    61ba:	4f 12       	cpse	r4, r31
    61bc:	06 c0       	rjmp	.+12     	; 0x61ca <do_menu_item+0x2fa>
	{
		value = value / mult;
    61be:	c5 01       	movw	r24, r10
    61c0:	6a 89       	ldd	r22, Y+18	; 0x12
    61c2:	7b 89       	ldd	r23, Y+19	; 0x13
    61c4:	0e 94 78 48 	call	0x90f0	; 0x90f0 <__divmodhi4>
    61c8:	5b 01       	movw	r10, r22
	}

	*values = (int8_t)value;
    61ca:	e8 89       	ldd	r30, Y+16	; 0x10
    61cc:	f9 89       	ldd	r31, Y+17	; 0x11
    61ce:	a0 82       	st	Z, r10
}
    61d0:	69 96       	adiw	r28, 0x19	; 25
    61d2:	0f b6       	in	r0, 0x3f	; 63
    61d4:	f8 94       	cli
    61d6:	de bf       	out	0x3e, r29	; 62
    61d8:	0f be       	out	0x3f, r0	; 63
    61da:	cd bf       	out	0x3d, r28	; 61
    61dc:	df 91       	pop	r29
    61de:	cf 91       	pop	r28
    61e0:	1f 91       	pop	r17
    61e2:	0f 91       	pop	r16
    61e4:	ff 90       	pop	r15
    61e6:	ef 90       	pop	r14
    61e8:	df 90       	pop	r13
    61ea:	cf 90       	pop	r12
    61ec:	bf 90       	pop	r11
    61ee:	af 90       	pop	r10
    61f0:	9f 90       	pop	r9
    61f2:	8f 90       	pop	r8
    61f4:	7f 90       	pop	r7
    61f6:	6f 90       	pop	r6
    61f8:	5f 90       	pop	r5
    61fa:	4f 90       	pop	r4
    61fc:	3f 90       	pop	r3
    61fe:	2f 90       	pop	r2
    6200:	08 95       	ret

		// Debug - release button lock when pressed
		// unless a servo
		if ((button != NONE) && (!servo_enable))
		{
				button_lock = false;
    6202:	99 24       	eor	r9, r9
    6204:	93 94       	inc	r9
    6206:	ae cf       	rjmp	.-164    	; 0x6164 <do_menu_item+0x294>

00006208 <menu_beep>:

void menu_beep(uint8_t beeps)
{
	uint8_t i;

	for (i=0; i < beeps; i++)
    6208:	90 e0       	ldi	r25, 0x00	; 0
    620a:	98 17       	cp	r25, r24
    620c:	b1 f0       	breq	.+44     	; 0x623a <menu_beep+0x32>
	{ 
		LVA = 1;
    620e:	29 9a       	sbi	0x05, 1	; 5
    6210:	2f e9       	ldi	r18, 0x9F	; 159
    6212:	36 e8       	ldi	r19, 0x86	; 134
    6214:	41 e0       	ldi	r20, 0x01	; 1
    6216:	21 50       	subi	r18, 0x01	; 1
    6218:	30 40       	sbci	r19, 0x00	; 0
    621a:	40 40       	sbci	r20, 0x00	; 0
    621c:	e1 f7       	brne	.-8      	; 0x6216 <menu_beep+0xe>
    621e:	00 c0       	rjmp	.+0      	; 0x6220 <menu_beep+0x18>
    6220:	00 00       	nop
		_delay_ms(25);
		LVA = 0;
    6222:	29 98       	cbi	0x05, 1	; 5
    6224:	2f e9       	ldi	r18, 0x9F	; 159
    6226:	36 e8       	ldi	r19, 0x86	; 134
    6228:	41 e0       	ldi	r20, 0x01	; 1
    622a:	21 50       	subi	r18, 0x01	; 1
    622c:	30 40       	sbci	r19, 0x00	; 0
    622e:	40 40       	sbci	r20, 0x00	; 0
    6230:	e1 f7       	brne	.-8      	; 0x622a <menu_beep+0x22>
    6232:	00 c0       	rjmp	.+0      	; 0x6234 <menu_beep+0x2c>
    6234:	00 00       	nop

void menu_beep(uint8_t beeps)
{
	uint8_t i;

	for (i=0; i < beeps; i++)
    6236:	9f 5f       	subi	r25, 0xFF	; 255
    6238:	e8 cf       	rjmp	.-48     	; 0x620a <menu_beep+0x2>
		LVA = 1;
		_delay_ms(25);
		LVA = 0;
		_delay_ms(25);
	}
}
    623a:	08 95       	ret

0000623c <update_menu>:
// top*		= Item number currently on top line
// temp*	= Currently selected item number
//************************************************************

void update_menu(uint8_t items, uint8_t start, uint8_t offset, uint8_t button, uint8_t* cursor, uint16_t* top, uint16_t* temp)
{
    623c:	af 92       	push	r10
    623e:	bf 92       	push	r11
    6240:	cf 92       	push	r12
    6242:	df 92       	push	r13
    6244:	ef 92       	push	r14
    6246:	ff 92       	push	r15
    6248:	0f 93       	push	r16
    624a:	1f 93       	push	r17
    624c:	cf 93       	push	r28
    624e:	df 93       	push	r29
    6250:	00 d0       	rcall	.+0      	; 0x6252 <update_menu+0x16>
    6252:	cd b7       	in	r28, 0x3d	; 61
    6254:	de b7       	in	r29, 0x3e	; 62
    6256:	98 2f       	mov	r25, r24
    6258:	58 01       	movw	r10, r16
	// Temporarily add in offset :(
	*top = *top + offset;
    625a:	04 2f       	mov	r16, r20
    625c:	10 e0       	ldi	r17, 0x00	; 0
    625e:	d7 01       	movw	r26, r14
    6260:	ed 91       	ld	r30, X+
    6262:	fc 91       	ld	r31, X
    6264:	11 97       	sbiw	r26, 0x01	; 1
    6266:	e0 0f       	add	r30, r16
    6268:	f1 1f       	adc	r31, r17
    626a:	ed 93       	st	X+, r30
    626c:	fc 93       	st	X, r31
	start = start + offset;
    626e:	64 0f       	add	r22, r20

	// Calculate which function has been requested
	if (button == ENTER)
    6270:	20 3e       	cpi	r18, 0xE0	; 224
    6272:	b1 f4       	brne	.+44     	; 0x62a0 <update_menu+0x64>
	{
		switch(*cursor) 
    6274:	d5 01       	movw	r26, r10
    6276:	8c 91       	ld	r24, X
    6278:	8f 30       	cpi	r24, 0x0F	; 15
    627a:	59 f0       	breq	.+22     	; 0x6292 <update_menu+0x56>
    627c:	18 f4       	brcc	.+6      	; 0x6284 <update_menu+0x48>
    627e:	83 30       	cpi	r24, 0x03	; 3
    6280:	49 f0       	breq	.+18     	; 0x6294 <update_menu+0x58>
    6282:	4d c0       	rjmp	.+154    	; 0x631e <update_menu+0xe2>
    6284:	8b 31       	cpi	r24, 0x1B	; 27
    6286:	51 f0       	breq	.+20     	; 0x629c <update_menu+0x60>
    6288:	87 32       	cpi	r24, 0x27	; 39
    628a:	09 f0       	breq	.+2      	; 0x628e <update_menu+0x52>
    628c:	48 c0       	rjmp	.+144    	; 0x631e <update_menu+0xe2>
				break;	
			case LINE2:
				*temp = *top + 2;
				break;
			case LINE3:
				*temp = *top + 3;
    628e:	33 96       	adiw	r30, 0x03	; 3
    6290:	01 c0       	rjmp	.+2      	; 0x6294 <update_menu+0x58>
		{
			case LINE0:
				*temp = *top;
				break;
			case LINE1:
				*temp = *top + 1;
    6292:	31 96       	adiw	r30, 0x01	; 1
    6294:	d6 01       	movw	r26, r12
    6296:	ed 93       	st	X+, r30
    6298:	fc 93       	st	X, r31
				break;	
    629a:	41 c0       	rjmp	.+130    	; 0x631e <update_menu+0xe2>
			case LINE2:
				*temp = *top + 2;
    629c:	32 96       	adiw	r30, 0x02	; 2
    629e:	fa cf       	rjmp	.-12     	; 0x6294 <update_menu+0x58>
				break;
		}
	}

	// Handle cursor Up/Down limits
	if (button == DOWN)	
    62a0:	20 3d       	cpi	r18, 0xD0	; 208
    62a2:	f9 f4       	brne	.+62     	; 0x62e2 <update_menu+0xa6>
	{
		switch(*cursor) 
    62a4:	f5 01       	movw	r30, r10
    62a6:	80 81       	ld	r24, Z
    62a8:	8f 30       	cpi	r24, 0x0F	; 15
    62aa:	69 f0       	breq	.+26     	; 0x62c6 <update_menu+0x8a>
    62ac:	18 f4       	brcc	.+6      	; 0x62b4 <update_menu+0x78>
    62ae:	83 30       	cpi	r24, 0x03	; 3
    62b0:	31 f0       	breq	.+12     	; 0x62be <update_menu+0x82>
    62b2:	15 c0       	rjmp	.+42     	; 0x62de <update_menu+0xa2>
    62b4:	8b 31       	cpi	r24, 0x1B	; 27
    62b6:	59 f0       	breq	.+22     	; 0x62ce <update_menu+0x92>
    62b8:	87 32       	cpi	r24, 0x27	; 39
    62ba:	69 f0       	breq	.+26     	; 0x62d6 <update_menu+0x9a>
    62bc:	10 c0       	rjmp	.+32     	; 0x62de <update_menu+0xa2>
		{
			case LINE0:
				if (items > 1) *cursor = LINE1;
    62be:	92 30       	cpi	r25, 0x02	; 2
    62c0:	70 f1       	brcs	.+92     	; 0x631e <update_menu+0xe2>
    62c2:	8f e0       	ldi	r24, 0x0F	; 15
    62c4:	27 c0       	rjmp	.+78     	; 0x6314 <update_menu+0xd8>
				break;	
			case LINE1:
				if (items > 2) *cursor = LINE2;
    62c6:	93 30       	cpi	r25, 0x03	; 3
    62c8:	50 f1       	brcs	.+84     	; 0x631e <update_menu+0xe2>
    62ca:	8b e1       	ldi	r24, 0x1B	; 27
    62cc:	1f c0       	rjmp	.+62     	; 0x630c <update_menu+0xd0>
				break;	
			case LINE2:
				if (items > 3) *cursor = LINE3;
    62ce:	94 30       	cpi	r25, 0x04	; 4
    62d0:	30 f1       	brcs	.+76     	; 0x631e <update_menu+0xe2>
    62d2:	87 e2       	ldi	r24, 0x27	; 39
    62d4:	1f c0       	rjmp	.+62     	; 0x6314 <update_menu+0xd8>
				break;
			case LINE3:
				if (items > 4) *cursor = NEXTLINE;
    62d6:	95 30       	cpi	r25, 0x05	; 5
    62d8:	10 f1       	brcs	.+68     	; 0x631e <update_menu+0xe2>
    62da:	88 e2       	ldi	r24, 0x28	; 40
    62dc:	17 c0       	rjmp	.+46     	; 0x630c <update_menu+0xd0>
				break;
			default:
				*cursor = NEXTLINE;
    62de:	88 e2       	ldi	r24, 0x28	; 40
    62e0:	19 c0       	rjmp	.+50     	; 0x6314 <update_menu+0xd8>
				break;
		}
	}

	if (button == UP)	
    62e2:	20 3b       	cpi	r18, 0xB0	; 176
    62e4:	d1 f4       	brne	.+52     	; 0x631a <update_menu+0xde>
	{
		switch(*cursor) 
    62e6:	f5 01       	movw	r30, r10
    62e8:	80 81       	ld	r24, Z
    62ea:	8f 30       	cpi	r24, 0x0F	; 15
    62ec:	69 f0       	breq	.+26     	; 0x6308 <update_menu+0xcc>
    62ee:	20 f4       	brcc	.+8      	; 0x62f8 <update_menu+0xbc>
    62f0:	83 30       	cpi	r24, 0x03	; 3
    62f2:	79 f4       	brne	.+30     	; 0x6312 <update_menu+0xd6>
				break;
			case LINE1:
				*cursor = LINE0;
				break;
			case LINE0:
				*cursor = PREVLINE;
    62f4:	82 e0       	ldi	r24, 0x02	; 2
    62f6:	0a c0       	rjmp	.+20     	; 0x630c <update_menu+0xd0>
		}
	}

	if (button == UP)	
	{
		switch(*cursor) 
    62f8:	8b 31       	cpi	r24, 0x1B	; 27
    62fa:	21 f0       	breq	.+8      	; 0x6304 <update_menu+0xc8>
    62fc:	87 32       	cpi	r24, 0x27	; 39
    62fe:	49 f4       	brne	.+18     	; 0x6312 <update_menu+0xd6>
		{
			case LINE3:
				*cursor = LINE2;
    6300:	8b e1       	ldi	r24, 0x1B	; 27
    6302:	08 c0       	rjmp	.+16     	; 0x6314 <update_menu+0xd8>
				break;	
			case LINE2:
				*cursor = LINE1;
    6304:	8f e0       	ldi	r24, 0x0F	; 15
    6306:	02 c0       	rjmp	.+4      	; 0x630c <update_menu+0xd0>
				break;
			case LINE1:
				*cursor = LINE0;
    6308:	83 e0       	ldi	r24, 0x03	; 3
    630a:	04 c0       	rjmp	.+8      	; 0x6314 <update_menu+0xd8>
				break;
			case LINE0:
				*cursor = PREVLINE;
    630c:	f5 01       	movw	r30, r10
    630e:	80 83       	st	Z, r24
				break;
    6310:	06 c0       	rjmp	.+12     	; 0x631e <update_menu+0xe2>
			default:
				*cursor = PREVLINE;
    6312:	82 e0       	ldi	r24, 0x02	; 2
    6314:	d5 01       	movw	r26, r10
    6316:	8c 93       	st	X, r24
				break;
    6318:	02 c0       	rjmp	.+4      	; 0x631e <update_menu+0xe2>
		}
	}

	if (button != NONE)	
    631a:	20 3f       	cpi	r18, 0xF0	; 240
    631c:	81 f0       	breq	.+32     	; 0x633e <update_menu+0x102>
	{
		menu_beep(1);
    631e:	81 e0       	ldi	r24, 0x01	; 1
    6320:	69 83       	std	Y+1, r22	; 0x01
    6322:	9a 83       	std	Y+2, r25	; 0x02
    6324:	0e 94 04 31 	call	0x6208	; 0x6208 <menu_beep>
    6328:	bf ef       	ldi	r27, 0xFF	; 255
    632a:	e4 e3       	ldi	r30, 0x34	; 52
    632c:	fc e0       	ldi	r31, 0x0C	; 12
    632e:	b1 50       	subi	r27, 0x01	; 1
    6330:	e0 40       	sbci	r30, 0x00	; 0
    6332:	f0 40       	sbci	r31, 0x00	; 0
    6334:	e1 f7       	brne	.-8      	; 0x632e <update_menu+0xf2>
    6336:	00 c0       	rjmp	.+0      	; 0x6338 <update_menu+0xfc>
    6338:	00 00       	nop
    633a:	9a 81       	ldd	r25, Y+2	; 0x02
    633c:	69 81       	ldd	r22, Y+1	; 0x01
		_delay_ms(200);
	}

	// When cursor is at limits and button pressed
	if (*cursor == PREVLINE)								// Up				
    633e:	d5 01       	movw	r26, r10
    6340:	8c 91       	ld	r24, X
    6342:	82 30       	cpi	r24, 0x02	; 2
    6344:	71 f4       	brne	.+28     	; 0x6362 <update_menu+0x126>
	{
		*cursor  = LINE0;
    6346:	83 e0       	ldi	r24, 0x03	; 3
    6348:	8c 93       	st	X, r24
		if (*top > start) 
    634a:	f7 01       	movw	r30, r14
    634c:	20 81       	ld	r18, Z
    634e:	31 81       	ldd	r19, Z+1	; 0x01
    6350:	46 2f       	mov	r20, r22
    6352:	50 e0       	ldi	r21, 0x00	; 0
    6354:	42 17       	cp	r20, r18
    6356:	53 07       	cpc	r21, r19
    6358:	20 f4       	brcc	.+8      	; 0x6362 <update_menu+0x126>
		{
			*top = *top - 1;								// Shuffle list up
    635a:	21 50       	subi	r18, 0x01	; 1
    635c:	31 09       	sbc	r19, r1
    635e:	31 83       	std	Z+1, r19	; 0x01
    6360:	20 83       	st	Z, r18
		}
	}
	
	if (*cursor == NEXTLINE)								// Down
    6362:	d5 01       	movw	r26, r10
    6364:	8c 91       	ld	r24, X
    6366:	88 32       	cpi	r24, 0x28	; 40
    6368:	a1 f4       	brne	.+40     	; 0x6392 <update_menu+0x156>
	{
		*cursor  = LINE3;
    636a:	87 e2       	ldi	r24, 0x27	; 39
    636c:	8c 93       	st	X, r24
		if ((*top + 3) < (uint16_t)((start + items) - 1))	// Compiler throws a warning here without the cast. top is uint16_t, start is uint8_t, items = uint8_t
    636e:	f7 01       	movw	r30, r14
    6370:	20 81       	ld	r18, Z
    6372:	31 81       	ldd	r19, Z+1	; 0x01
    6374:	a9 01       	movw	r20, r18
    6376:	4d 5f       	subi	r20, 0xFD	; 253
    6378:	5f 4f       	sbci	r21, 0xFF	; 255
    637a:	89 2f       	mov	r24, r25
    637c:	90 e0       	ldi	r25, 0x00	; 0
    637e:	86 0f       	add	r24, r22
    6380:	91 1d       	adc	r25, r1
    6382:	01 97       	sbiw	r24, 0x01	; 1
    6384:	48 17       	cp	r20, r24
    6386:	59 07       	cpc	r21, r25
    6388:	20 f4       	brcc	.+8      	; 0x6392 <update_menu+0x156>
		{
			*top = *top + 1;								// Shuffle list down
    638a:	2f 5f       	subi	r18, 0xFF	; 255
    638c:	3f 4f       	sbci	r19, 0xFF	; 255
    638e:	31 83       	std	Z+1, r19	; 0x01
    6390:	20 83       	st	Z, r18
		}
	}

	// Remove temporary offset
	*top = *top - offset;
    6392:	d7 01       	movw	r26, r14
    6394:	8d 91       	ld	r24, X+
    6396:	9c 91       	ld	r25, X
    6398:	11 97       	sbiw	r26, 0x01	; 1
    639a:	80 1b       	sub	r24, r16
    639c:	91 0b       	sbc	r25, r17
    639e:	8d 93       	st	X+, r24
    63a0:	9c 93       	st	X, r25
}
    63a2:	0f 90       	pop	r0
    63a4:	0f 90       	pop	r0
    63a6:	df 91       	pop	r29
    63a8:	cf 91       	pop	r28
    63aa:	1f 91       	pop	r17
    63ac:	0f 91       	pop	r16
    63ae:	ff 90       	pop	r15
    63b0:	ef 90       	pop	r14
    63b2:	df 90       	pop	r13
    63b4:	cf 90       	pop	r12
    63b6:	bf 90       	pop	r11
    63b8:	af 90       	pop	r10
    63ba:	08 95       	ret

000063bc <print_cursor>:
// Print cursor on specified line
//************************************************************

void print_cursor(uint8_t line)
{
	LCD_Display_Text(13, (const unsigned char*)Wingdings, CURSOROFFSET, line);
    63bc:	28 2f       	mov	r18, r24
    63be:	30 e0       	ldi	r19, 0x00	; 0
    63c0:	43 e0       	ldi	r20, 0x03	; 3
    63c2:	50 e0       	ldi	r21, 0x00	; 0
    63c4:	65 ef       	ldi	r22, 0xF5	; 245
    63c6:	70 e0       	ldi	r23, 0x00	; 0
    63c8:	8d e0       	ldi	r24, 0x0D	; 13
    63ca:	90 e0       	ldi	r25, 0x00	; 0
    63cc:	0c 94 54 22 	jmp	0x44a8	; 0x44a8 <LCD_Display_Text>

000063d0 <print_menu_items>:
// MenuOffsets = originally an array, now just a fixed horizontal offset for the value text
// text_link = pointer to the text list for the values if not numeric
// cursor = cursor position
//**********************************************************************
void print_menu_items(uint16_t top, uint16_t start, int8_t values[], const unsigned char* menu_ranges, uint8_t rangetype, uint8_t MenuOffsets, const unsigned char* text_link, uint8_t cursor)
{
    63d0:	2f 92       	push	r2
    63d2:	3f 92       	push	r3
    63d4:	4f 92       	push	r4
    63d6:	5f 92       	push	r5
    63d8:	6f 92       	push	r6
    63da:	7f 92       	push	r7
    63dc:	8f 92       	push	r8
    63de:	9f 92       	push	r9
    63e0:	af 92       	push	r10
    63e2:	bf 92       	push	r11
    63e4:	cf 92       	push	r12
    63e6:	df 92       	push	r13
    63e8:	ef 92       	push	r14
    63ea:	ff 92       	push	r15
    63ec:	0f 93       	push	r16
    63ee:	1f 93       	push	r17
    63f0:	cf 93       	push	r28
    63f2:	df 93       	push	r29
    63f4:	cd b7       	in	r28, 0x3d	; 61
    63f6:	de b7       	in	r29, 0x3e	; 62
    63f8:	2a 97       	sbiw	r28, 0x0a	; 10
    63fa:	0f b6       	in	r0, 0x3f	; 63
    63fc:	f8 94       	cli
    63fe:	de bf       	out	0x3e, r29	; 62
    6400:	0f be       	out	0x3f, r0	; 63
    6402:	cd bf       	out	0x3d, r28	; 61
    6404:	2c 01       	movw	r4, r24
    6406:	4a 01       	movw	r8, r20
    6408:	39 01       	movw	r6, r18
    640a:	0e 83       	std	Y+6, r16	; 0x06
    640c:	ef 82       	std	Y+7, r14	; 0x07
    640e:	a8 86       	std	Y+8, r10	; 0x08
	menu_range_t	range1;
		
	// Clear buffer before each update
	clear_buffer(buffer);
    6410:	85 e0       	ldi	r24, 0x05	; 5
    6412:	91 e0       	ldi	r25, 0x01	; 1
    6414:	69 87       	std	Y+9, r22	; 0x09
    6416:	7a 87       	std	Y+10, r23	; 0x0a
    6418:	0e 94 a7 20 	call	0x414e	; 0x414e <clear_buffer>
	print_menu_frame(0);
    641c:	80 e0       	ldi	r24, 0x00	; 0
    641e:	0e 94 87 2e 	call	0x5d0e	; 0x5d0e <print_menu_frame>
    6422:	25 e0       	ldi	r18, 0x05	; 5
    6424:	69 85       	ldd	r22, Y+9	; 0x09
    6426:	7a 85       	ldd	r23, Y+10	; 0x0a
    6428:	26 9f       	mul	r18, r22
    642a:	c0 01       	movw	r24, r0
    642c:	27 9f       	mul	r18, r23
    642e:	90 0d       	add	r25, r0
    6430:	11 24       	eor	r1, r1
    6432:	13 01       	movw	r2, r6
    6434:	28 1a       	sub	r2, r24
    6436:	39 0a       	sbc	r3, r25
    6438:	24 9d       	mul	r18, r4
    643a:	c0 01       	movw	r24, r0
    643c:	25 9d       	mul	r18, r5
    643e:	90 0d       	add	r25, r0
    6440:	11 24       	eor	r1, r1
    6442:	28 0e       	add	r2, r24
    6444:	39 1e       	adc	r3, r25
    6446:	72 01       	movw	r14, r4
    6448:	a1 2c       	mov	r10, r1
    644a:	b1 2c       	mov	r11, r1
    644c:	a8 ed       	ldi	r26, 0xD8	; 216
    644e:	4a 2e       	mov	r4, r26
    6450:	a7 e1       	ldi	r26, 0x17	; 23
    6452:	5a 2e       	mov	r5, r26
    6454:	4e 18       	sub	r4, r14
    6456:	5f 08       	sbc	r5, r15
    6458:	c6 1a       	sub	r12, r22
    645a:	d7 0a       	sbc	r13, r23
    645c:	86 1a       	sub	r8, r22
    645e:	97 0a       	sbc	r9, r23
    6460:	82 01       	movw	r16, r4
    6462:	0e 0d       	add	r16, r14
    6464:	1f 1d       	adc	r17, r15
	
	// Print each line
	for (uint8_t i = 0; i < 4; i++)
	{
		LCD_Display_Text(top+i,(const unsigned char*)Verdana8,ITEMOFFSET,(uint8_t)pgm_read_byte(&lines[i]));
    6466:	f8 01       	movw	r30, r16
    6468:	24 91       	lpm	r18, Z
    646a:	30 e0       	ldi	r19, 0x00	; 0
    646c:	4a e0       	ldi	r20, 0x0A	; 10
    646e:	50 e0       	ldi	r21, 0x00	; 0
    6470:	6d e0       	ldi	r22, 0x0D	; 13
    6472:	7a e0       	ldi	r23, 0x0A	; 10
    6474:	c7 01       	movw	r24, r14
    6476:	0e 94 54 22 	call	0x44a8	; 0x44a8 <LCD_Display_Text>

		// Handle unique or copied ranges (to reduce space)
		if (rangetype == 0)
    647a:	fe 81       	ldd	r31, Y+6	; 0x06
		{
			// Use each unique entry
			memcpy_P(&range1, &menu_ranges[(top+i - start)* sizeof(range1)], sizeof(range1));
    647c:	45 e0       	ldi	r20, 0x05	; 5
    647e:	50 e0       	ldi	r21, 0x00	; 0
	for (uint8_t i = 0; i < 4; i++)
	{
		LCD_Display_Text(top+i,(const unsigned char*)Verdana8,ITEMOFFSET,(uint8_t)pgm_read_byte(&lines[i]));

		// Handle unique or copied ranges (to reduce space)
		if (rangetype == 0)
    6480:	f1 11       	cpse	r31, r1
    6482:	04 c0       	rjmp	.+8      	; 0x648c <print_menu_items+0xbc>
		{
			// Use each unique entry
			memcpy_P(&range1, &menu_ranges[(top+i - start)* sizeof(range1)], sizeof(range1));
    6484:	b5 01       	movw	r22, r10
    6486:	62 0d       	add	r22, r2
    6488:	73 1d       	adc	r23, r3
    648a:	01 c0       	rjmp	.+2      	; 0x648e <print_menu_items+0xbe>
		}
		else
		{
			// Use just the first entry in array for all 
			memcpy_P(&range1, &menu_ranges[0], sizeof(range1));
    648c:	b3 01       	movw	r22, r6
    648e:	ce 01       	movw	r24, r28
    6490:	01 96       	adiw	r24, 0x01	; 1
    6492:	0e 94 04 49 	call	0x9208	; 0x9208 <memcpy_P>
		}

		print_menu_text((values[top+i - start]), range1.style, (pgm_read_byte(&text_link[top+i - start]) + values[top+i - start]), MenuOffsets, (uint8_t)pgm_read_byte(&lines[i]));
    6496:	f8 01       	movw	r30, r16
    6498:	04 91       	lpm	r16, Z
    649a:	f6 01       	movw	r30, r12
    649c:	ee 0d       	add	r30, r14
    649e:	ff 1d       	adc	r31, r15
    64a0:	e4 91       	lpm	r30, Z
    64a2:	d4 01       	movw	r26, r8
    64a4:	ae 0d       	add	r26, r14
    64a6:	bf 1d       	adc	r27, r15
    64a8:	8c 91       	ld	r24, X
    64aa:	99 27       	eor	r25, r25
    64ac:	87 fd       	sbrc	r24, 7
    64ae:	90 95       	com	r25
    64b0:	ac 01       	movw	r20, r24
    64b2:	4e 0f       	add	r20, r30
    64b4:	51 1d       	adc	r21, r1
    64b6:	2f 81       	ldd	r18, Y+7	; 0x07
    64b8:	6c 81       	ldd	r22, Y+4	; 0x04
    64ba:	0e 94 0c 2f 	call	0x5e18	; 0x5e18 <print_menu_text>
    64be:	ff ef       	ldi	r31, 0xFF	; 255
    64c0:	ef 1a       	sub	r14, r31
    64c2:	ff 0a       	sbc	r15, r31
    64c4:	85 e0       	ldi	r24, 0x05	; 5
    64c6:	a8 0e       	add	r10, r24
    64c8:	b1 1c       	adc	r11, r1
	// Clear buffer before each update
	clear_buffer(buffer);
	print_menu_frame(0);
	
	// Print each line
	for (uint8_t i = 0; i < 4; i++)
    64ca:	e4 e1       	ldi	r30, 0x14	; 20
    64cc:	ae 16       	cp	r10, r30
    64ce:	b1 04       	cpc	r11, r1
    64d0:	09 f0       	breq	.+2      	; 0x64d4 <print_menu_items+0x104>
    64d2:	c6 cf       	rjmp	.-116    	; 0x6460 <print_menu_items+0x90>
		}

		print_menu_text((values[top+i - start]), range1.style, (pgm_read_byte(&text_link[top+i - start]) + values[top+i - start]), MenuOffsets, (uint8_t)pgm_read_byte(&lines[i]));
	}

	print_cursor(cursor);	// Cursor
    64d4:	88 85       	ldd	r24, Y+8	; 0x08
    64d6:	0e 94 de 31 	call	0x63bc	; 0x63bc <print_cursor>
	write_buffer(buffer);
    64da:	85 e0       	ldi	r24, 0x05	; 5
    64dc:	91 e0       	ldi	r25, 0x01	; 1
    64de:	0e 94 75 20 	call	0x40ea	; 0x40ea <write_buffer>
	poll_buttons(true);
    64e2:	81 e0       	ldi	r24, 0x01	; 1
    64e4:	0e 94 33 2f 	call	0x5e66	; 0x5e66 <poll_buttons>
}
    64e8:	2a 96       	adiw	r28, 0x0a	; 10
    64ea:	0f b6       	in	r0, 0x3f	; 63
    64ec:	f8 94       	cli
    64ee:	de bf       	out	0x3e, r29	; 62
    64f0:	0f be       	out	0x3f, r0	; 63
    64f2:	cd bf       	out	0x3d, r28	; 61
    64f4:	df 91       	pop	r29
    64f6:	cf 91       	pop	r28
    64f8:	1f 91       	pop	r17
    64fa:	0f 91       	pop	r16
    64fc:	ff 90       	pop	r15
    64fe:	ef 90       	pop	r14
    6500:	df 90       	pop	r13
    6502:	cf 90       	pop	r12
    6504:	bf 90       	pop	r11
    6506:	af 90       	pop	r10
    6508:	9f 90       	pop	r9
    650a:	8f 90       	pop	r8
    650c:	7f 90       	pop	r7
    650e:	6f 90       	pop	r6
    6510:	5f 90       	pop	r5
    6512:	4f 90       	pop	r4
    6514:	3f 90       	pop	r3
    6516:	2f 90       	pop	r2
    6518:	08 95       	ret

0000651a <menu_flight>:
//************************************************************
// Main menu-specific setup
//************************************************************

void menu_flight(uint8_t mode)
{
    651a:	6f 92       	push	r6
    651c:	7f 92       	push	r7
    651e:	8f 92       	push	r8
    6520:	af 92       	push	r10
    6522:	bf 92       	push	r11
    6524:	cf 92       	push	r12
    6526:	df 92       	push	r13
    6528:	ef 92       	push	r14
    652a:	ff 92       	push	r15
    652c:	0f 93       	push	r16
    652e:	1f 93       	push	r17
    6530:	cf 93       	push	r28
    6532:	df 93       	push	r29
    6534:	00 d0       	rcall	.+0      	; 0x6536 <menu_flight+0x1c>
    6536:	00 d0       	rcall	.+0      	; 0x6538 <menu_flight+0x1e>
    6538:	1f 92       	push	r1
    653a:	cd b7       	in	r28, 0x3d	; 61
    653c:	de b7       	in	r29, 0x3e	; 62
	int8_t *value_ptr;
	menu_range_t range;
	uint8_t text_link;

	// If sub-menu item has changed, reset sub-menu positions
	if (menu_flag)
    653e:	90 91 ec 07 	lds	r25, 0x07EC
    6542:	99 23       	and	r25, r25
    6544:	41 f0       	breq	.+16     	; 0x6556 <menu_flight+0x3c>
	{
		sub_top = FLIGHTSTART;
    6546:	2a ea       	ldi	r18, 0xAA	; 170
    6548:	30 e0       	ldi	r19, 0x00	; 0
    654a:	30 93 3d 05 	sts	0x053D, r19
    654e:	20 93 3c 05 	sts	0x053C, r18
		menu_flag = 0;
    6552:	10 92 ec 07 	sts	0x07EC, r1
	}

	while(button != BACK)
	{
		value_ptr = &Config.FlightMode[mode].Roll_P_mult;
    6556:	92 e1       	ldi	r25, 0x12	; 18
    6558:	89 9f       	mul	r24, r25
    655a:	30 01       	movw	r6, r0
    655c:	11 24       	eor	r1, r1
    655e:	c3 01       	movw	r24, r6
    6560:	8d 51       	subi	r24, 0x1D	; 29
    6562:	9a 4f       	sbci	r25, 0xFA	; 250
    6564:	3c 01       	movw	r6, r24
	{
		sub_top = FLIGHTSTART;
		menu_flag = 0;
	}

	while(button != BACK)
    6566:	80 91 ea 07 	lds	r24, 0x07EA
    656a:	80 37       	cpi	r24, 0x70	; 112
    656c:	09 f4       	brne	.+2      	; 0x6570 <menu_flight+0x56>
    656e:	5d c0       	rjmp	.+186    	; 0x662a <menu_flight+0x110>
	{
		value_ptr = &Config.FlightMode[mode].Roll_P_mult;

		// Print menu
		print_menu_items(sub_top, FLIGHTSTART, value_ptr, (const unsigned char*)flight_menu_ranges, 0, FLIGHTOFFSET, (const unsigned char*)FlightMenuText, cursor);
    6570:	a0 90 09 05 	lds	r10, 0x0509
    6574:	86 e3       	ldi	r24, 0x36	; 54
    6576:	c8 2e       	mov	r12, r24
    6578:	88 e1       	ldi	r24, 0x18	; 24
    657a:	d8 2e       	mov	r13, r24
    657c:	9f e4       	ldi	r25, 0x4F	; 79
    657e:	e9 2e       	mov	r14, r25
    6580:	00 e0       	ldi	r16, 0x00	; 0
    6582:	2c ed       	ldi	r18, 0xDC	; 220
    6584:	37 e1       	ldi	r19, 0x17	; 23
    6586:	a3 01       	movw	r20, r6
    6588:	6a ea       	ldi	r22, 0xAA	; 170
    658a:	70 e0       	ldi	r23, 0x00	; 0
    658c:	80 91 3c 05 	lds	r24, 0x053C
    6590:	90 91 3d 05 	lds	r25, 0x053D
    6594:	0e 94 e8 31 	call	0x63d0	; 0x63d0 <print_menu_items>

		// Handle menu changes
		update_menu(FLIGHTITEMS, FLIGHTSTART, 0, button, &cursor, &sub_top, &menu_temp);
    6598:	27 e3       	ldi	r18, 0x37	; 55
    659a:	c2 2e       	mov	r12, r18
    659c:	25 e0       	ldi	r18, 0x05	; 5
    659e:	d2 2e       	mov	r13, r18
    65a0:	3c e3       	ldi	r19, 0x3C	; 60
    65a2:	e3 2e       	mov	r14, r19
    65a4:	35 e0       	ldi	r19, 0x05	; 5
    65a6:	f3 2e       	mov	r15, r19
    65a8:	09 e0       	ldi	r16, 0x09	; 9
    65aa:	15 e0       	ldi	r17, 0x05	; 5
    65ac:	20 91 ea 07 	lds	r18, 0x07EA
    65b0:	40 e0       	ldi	r20, 0x00	; 0
    65b2:	6a ea       	ldi	r22, 0xAA	; 170
    65b4:	82 e1       	ldi	r24, 0x12	; 18
    65b6:	0e 94 1e 31 	call	0x623c	; 0x623c <update_menu>
		range = get_menu_range ((const unsigned char*)flight_menu_ranges, (menu_temp - FLIGHTSTART));
    65ba:	60 91 37 05 	lds	r22, 0x0537
    65be:	6a 5a       	subi	r22, 0xAA	; 170
    65c0:	8c ed       	ldi	r24, 0xDC	; 220
    65c2:	97 e1       	ldi	r25, 0x17	; 23
    65c4:	0e 94 dc 2e 	call	0x5db8	; 0x5db8 <get_menu_range>
    65c8:	29 83       	std	Y+1, r18	; 0x01
    65ca:	3a 83       	std	Y+2, r19	; 0x02
    65cc:	4b 83       	std	Y+3, r20	; 0x03
    65ce:	5c 83       	std	Y+4, r21	; 0x04
    65d0:	6d 83       	std	Y+5, r22	; 0x05

		if (button == ENTER)
    65d2:	80 91 ea 07 	lds	r24, 0x07EA
    65d6:	80 3e       	cpi	r24, 0xE0	; 224
    65d8:	e1 f4       	brne	.+56     	; 0x6612 <menu_flight+0xf8>
		{
			text_link = pgm_read_byte(&FlightMenuText[menu_temp - FLIGHTSTART]);
    65da:	80 91 37 05 	lds	r24, 0x0537
    65de:	90 91 38 05 	lds	r25, 0x0538
    65e2:	bc 01       	movw	r22, r24
    65e4:	6a 5a       	subi	r22, 0xAA	; 170
    65e6:	71 09       	sbc	r23, r1
    65e8:	fb 01       	movw	r30, r22
    65ea:	ea 5c       	subi	r30, 0xCA	; 202
    65ec:	f7 4e       	sbci	r31, 0xE7	; 231
    65ee:	a4 90       	lpm	r10, Z
			do_menu_item(menu_temp, value_ptr + (menu_temp - FLIGHTSTART), 1, range, 0, text_link, false, 0);
    65f0:	b1 2c       	mov	r11, r1
    65f2:	66 0d       	add	r22, r6
    65f4:	77 1d       	adc	r23, r7
    65f6:	1f 92       	push	r1
    65f8:	1f 92       	push	r1
    65fa:	81 2c       	mov	r8, r1
    65fc:	c1 2c       	mov	r12, r1
    65fe:	e9 80       	ldd	r14, Y+1	; 0x01
    6600:	fa 80       	ldd	r15, Y+2	; 0x02
    6602:	0b 81       	ldd	r16, Y+3	; 0x03
    6604:	1c 81       	ldd	r17, Y+4	; 0x04
    6606:	2d 81       	ldd	r18, Y+5	; 0x05
    6608:	41 e0       	ldi	r20, 0x01	; 1
    660a:	0e 94 68 2f 	call	0x5ed0	; 0x5ed0 <do_menu_item>
    660e:	0f 90       	pop	r0
    6610:	0f 90       	pop	r0
		}

		// Update limits when exiting
		if (button == ENTER)
    6612:	80 91 ea 07 	lds	r24, 0x07EA
    6616:	80 3e       	cpi	r24, 0xE0	; 224
    6618:	09 f0       	breq	.+2      	; 0x661c <menu_flight+0x102>
    661a:	a5 cf       	rjmp	.-182    	; 0x6566 <menu_flight+0x4c>
		{
			UpdateLimits();			 // Update I-term limits and triggers based on percentages
    661c:	0e 94 8a 36 	call	0x6d14	; 0x6d14 <UpdateLimits>
			Save_Config_to_EEPROM(); // Save value and return
    6620:	0e 94 6b 16 	call	0x2cd6	; 0x2cd6 <Save_Config_to_EEPROM>
			Wait_BUTTON4();			 // Wait for user's finger off the button
    6624:	0e 94 e9 33 	call	0x67d2	; 0x67d2 <Wait_BUTTON4>
    6628:	9e cf       	rjmp	.-196    	; 0x6566 <menu_flight+0x4c>
		}
	}
}
    662a:	0f 90       	pop	r0
    662c:	0f 90       	pop	r0
    662e:	0f 90       	pop	r0
    6630:	0f 90       	pop	r0
    6632:	0f 90       	pop	r0
    6634:	df 91       	pop	r29
    6636:	cf 91       	pop	r28
    6638:	1f 91       	pop	r17
    663a:	0f 91       	pop	r16
    663c:	ff 90       	pop	r15
    663e:	ef 90       	pop	r14
    6640:	df 90       	pop	r13
    6642:	cf 90       	pop	r12
    6644:	bf 90       	pop	r11
    6646:	af 90       	pop	r10
    6648:	8f 90       	pop	r8
    664a:	7f 90       	pop	r7
    664c:	6f 90       	pop	r6
    664e:	08 95       	ret

00006650 <do_main_menu_item>:
	}
}

void do_main_menu_item(uint8_t menuitem)
{
	switch(menuitem) 
    6650:	90 e0       	ldi	r25, 0x00	; 0
    6652:	fc 01       	movw	r30, r24
    6654:	ed 54       	subi	r30, 0x4D	; 77
    6656:	f1 09       	sbc	r31, r1
    6658:	e3 31       	cpi	r30, 0x13	; 19
    665a:	f1 05       	cpc	r31, r1
    665c:	70 f5       	brcc	.+92     	; 0x66ba <do_main_menu_item+0x6a>
    665e:	e7 5b       	subi	r30, 0xB7	; 183
    6660:	ff 4f       	sbci	r31, 0xFF	; 255
    6662:	0c 94 cd 48 	jmp	0x919a	; 0x919a <__tablejump2__>
	{
		case MAINSTART:
			menu_rc_setup(2); 		// 1.General
    6666:	82 e0       	ldi	r24, 0x02	; 2
    6668:	01 c0       	rjmp	.+2      	; 0x666c <do_main_menu_item+0x1c>
			break;
		case MAINSTART+1:
			menu_rc_setup(1); 		// 2.RX setup	
    666a:	81 e0       	ldi	r24, 0x01	; 1
    666c:	0c 94 7e 35 	jmp	0x6afc	; 0x6afc <menu_rc_setup>
			break;
		case MAINSTART+2:
			Display_rcinput();		// 3.RX inputs
    6670:	0c 94 75 11 	jmp	0x22ea	; 0x22ea <Display_rcinput>
			break;
		case MAINSTART+3:
			Display_sticks(); 		// 4.Stick polarity	
    6674:	0c 94 29 15 	jmp	0x2a52	; 0x2a52 <Display_sticks>
			break;
		case MAINSTART+4:
			Display_sensors();		// 5.Sensor calibration
    6678:	0c 94 74 12 	jmp	0x24e8	; 0x24e8 <Display_sensors>
			break;
		case MAINSTART+5:
			Display_balance();		// 6.Level meter
    667c:	0c 94 e1 10 	jmp	0x21c2	; 0x21c2 <Display_balance>
			break;
		case MAINSTART+6:
			menu_flight(0);			// 7.Flight profile 1
    6680:	80 e0       	ldi	r24, 0x00	; 0
    6682:	01 c0       	rjmp	.+2      	; 0x6686 <do_main_menu_item+0x36>
			break;
		case MAINSTART+7:
			menu_flight(1); 		// 8.Flight profile 2
    6684:	81 e0       	ldi	r24, 0x01	; 1
    6686:	0c 94 8d 32 	jmp	0x651a	; 0x651a <menu_flight>
			break;
		case MAINSTART+8:
			menu_mixer(0);			// 9.OUT1 Mixer
    668a:	80 e0       	ldi	r24, 0x00	; 0
    668c:	0d c0       	rjmp	.+26     	; 0x66a8 <do_main_menu_item+0x58>
			break;
		case MAINSTART+9:
			menu_mixer(1);			// 10.OUT2 Mixer
    668e:	81 e0       	ldi	r24, 0x01	; 1
    6690:	0b c0       	rjmp	.+22     	; 0x66a8 <do_main_menu_item+0x58>
			break;
		case MAINSTART+10:
			menu_mixer(2);			// 11.OUT3 Mixer
    6692:	82 e0       	ldi	r24, 0x02	; 2
    6694:	09 c0       	rjmp	.+18     	; 0x66a8 <do_main_menu_item+0x58>
			break;
		case MAINSTART+11:
			menu_mixer(3);			// 12.OUT4 Mixer
    6696:	83 e0       	ldi	r24, 0x03	; 3
    6698:	07 c0       	rjmp	.+14     	; 0x66a8 <do_main_menu_item+0x58>
			break;
		case MAINSTART+12:
			menu_mixer(4);			// 13.OUT5 Mixer
    669a:	84 e0       	ldi	r24, 0x04	; 4
    669c:	05 c0       	rjmp	.+10     	; 0x66a8 <do_main_menu_item+0x58>
			break;
		case MAINSTART+13:
			menu_mixer(5);			// 14.OUT6 Mixer
    669e:	85 e0       	ldi	r24, 0x05	; 5
    66a0:	03 c0       	rjmp	.+6      	; 0x66a8 <do_main_menu_item+0x58>
			break;
		case MAINSTART+14:
			menu_mixer(6);			// 15.OUT7 Mixer
    66a2:	86 e0       	ldi	r24, 0x06	; 6
    66a4:	01 c0       	rjmp	.+2      	; 0x66a8 <do_main_menu_item+0x58>
			break;
		case MAINSTART+15:
			menu_mixer(7);			// 16.OUT8 Mixer
    66a6:	87 e0       	ldi	r24, 0x07	; 7
    66a8:	0c 94 f6 33 	jmp	0x67ec	; 0x67ec <menu_mixer>
			break;
		case MAINSTART+16:
			menu_servo_setup(1);	// 17.Servo direction
    66ac:	81 e0       	ldi	r24, 0x01	; 1
    66ae:	03 c0       	rjmp	.+6      	; 0x66b6 <do_main_menu_item+0x66>
			break;
		case MAINSTART+17:
			menu_servo_setup(2); 	// 18.Neg. Servo trvl. (%)
    66b0:	82 e0       	ldi	r24, 0x02	; 2
    66b2:	01 c0       	rjmp	.+2      	; 0x66b6 <do_main_menu_item+0x66>
			break;
		case MAINSTART+18:
			menu_servo_setup(3); 	// 19.Pos. Servo trvl. (%)
    66b4:	83 e0       	ldi	r24, 0x03	; 3
    66b6:	0c 94 91 34 	jmp	0x6922	; 0x6922 <menu_servo_setup>
    66ba:	08 95       	ret

000066bc <Wait_BUTTON1>:
	} // Switch
}

void Wait_BUTTON1(void)
{
	while(BUTTON1 == 0)
    66bc:	1f 99       	sbic	0x03, 7	; 3
    66be:	0a c0       	rjmp	.+20     	; 0x66d4 <Wait_BUTTON1+0x18>
    66c0:	2f e3       	ldi	r18, 0x3F	; 63
    66c2:	8d e0       	ldi	r24, 0x0D	; 13
    66c4:	93 e0       	ldi	r25, 0x03	; 3
    66c6:	21 50       	subi	r18, 0x01	; 1
    66c8:	80 40       	sbci	r24, 0x00	; 0
    66ca:	90 40       	sbci	r25, 0x00	; 0
    66cc:	e1 f7       	brne	.-8      	; 0x66c6 <Wait_BUTTON1+0xa>
    66ce:	00 c0       	rjmp	.+0      	; 0x66d0 <Wait_BUTTON1+0x14>
    66d0:	00 00       	nop
    66d2:	f4 cf       	rjmp	.-24     	; 0x66bc <Wait_BUTTON1>
	{
		_delay_ms(50);
	}
}
    66d4:	08 95       	ret

000066d6 <menu_main>:
uint16_t main_top = MAINSTART;
uint16_t sub_top = 0;
uint8_t menu_flag;

void menu_main(void)
{
    66d6:	af 92       	push	r10
    66d8:	bf 92       	push	r11
    66da:	cf 92       	push	r12
    66dc:	df 92       	push	r13
    66de:	ef 92       	push	r14
    66e0:	ff 92       	push	r15
    66e2:	0f 93       	push	r16
    66e4:	1f 93       	push	r17
    66e6:	cf 93       	push	r28
    66e8:	df 93       	push	r29
	static uint8_t main_cursor = LINE0;	// These are now static so as to remember the main menu position
	static uint16_t main_temp = 0;
	static uint8_t old_menu = 0;

	button = NONE;
    66ea:	80 ef       	ldi	r24, 0xF0	; 240
    66ec:	80 93 ea 07 	sts	0x07EA, r24

	// Wait until user's finger is off button 1
	Wait_BUTTON1();
    66f0:	0e 94 5e 33 	call	0x66bc	; 0x66bc <Wait_BUTTON1>

		// If main menu item has changed, reset sub-menu positions
		// and flag to sub-menus that positions need to be reset
		if (main_temp != old_menu)
		{
			cursor = LINE0;
    66f4:	23 e0       	ldi	r18, 0x03	; 3
    66f6:	b2 2e       	mov	r11, r18

		// If ENTER pressed, jump to menu 
		if (button == ENTER)
		{
			do_main_menu_item(main_temp);
			button = NONE;
    66f8:	30 ef       	ldi	r19, 0xF0	; 240
    66fa:	a3 2e       	mov	r10, r19
	button = NONE;

	// Wait until user's finger is off button 1
	Wait_BUTTON1();
	
	while(button != BACK)
    66fc:	80 91 ea 07 	lds	r24, 0x07EA
    6700:	80 37       	cpi	r24, 0x70	; 112
    6702:	09 f4       	brne	.+2      	; 0x6706 <menu_main+0x30>
    6704:	5b c0       	rjmp	.+182    	; 0x67bc <menu_main+0xe6>
	{
		// Clear buffer before each update
		clear_buffer(buffer);	
    6706:	85 e0       	ldi	r24, 0x05	; 5
    6708:	91 e0       	ldi	r25, 0x01	; 1
    670a:	0e 94 a7 20 	call	0x414e	; 0x414e <clear_buffer>

		// Print menu
		print_menu_frame(0);													// Frame
    670e:	80 e0       	ldi	r24, 0x00	; 0
    6710:	0e 94 87 2e 	call	0x5d0e	; 0x5d0e <print_menu_frame>
		
		for (uint16_t i = 0; i < 4; i++)
    6714:	c0 e0       	ldi	r28, 0x00	; 0
    6716:	d0 e0       	ldi	r29, 0x00	; 0
    6718:	fe 01       	movw	r30, r28
    671a:	e8 52       	subi	r30, 0x28	; 40
    671c:	f8 4e       	sbci	r31, 0xE8	; 232
		{
			LCD_Display_Text(main_top+i,(const unsigned char*)Verdana8,ITEMOFFSET,(uint8_t)pgm_read_byte(&lines[i]));	// Lines
    671e:	24 91       	lpm	r18, Z
    6720:	30 e0       	ldi	r19, 0x00	; 0
    6722:	80 91 0b 05 	lds	r24, 0x050B
    6726:	90 91 0c 05 	lds	r25, 0x050C
    672a:	4a e0       	ldi	r20, 0x0A	; 10
    672c:	50 e0       	ldi	r21, 0x00	; 0
    672e:	6d e0       	ldi	r22, 0x0D	; 13
    6730:	7a e0       	ldi	r23, 0x0A	; 10
    6732:	8c 0f       	add	r24, r28
    6734:	9d 1f       	adc	r25, r29
    6736:	0e 94 54 22 	call	0x44a8	; 0x44a8 <LCD_Display_Text>
		clear_buffer(buffer);	

		// Print menu
		print_menu_frame(0);													// Frame
		
		for (uint16_t i = 0; i < 4; i++)
    673a:	21 96       	adiw	r28, 0x01	; 1
    673c:	c4 30       	cpi	r28, 0x04	; 4
    673e:	d1 05       	cpc	r29, r1
    6740:	59 f7       	brne	.-42     	; 0x6718 <menu_main+0x42>
		{
			LCD_Display_Text(main_top+i,(const unsigned char*)Verdana8,ITEMOFFSET,(uint8_t)pgm_read_byte(&lines[i]));	// Lines
		}

		print_cursor(main_cursor);												// Cursor
    6742:	80 91 0a 05 	lds	r24, 0x050A
    6746:	0e 94 de 31 	call	0x63bc	; 0x63bc <print_cursor>
		write_buffer(buffer);
    674a:	85 e0       	ldi	r24, 0x05	; 5
    674c:	91 e0       	ldi	r25, 0x01	; 1
    674e:	0e 94 75 20 	call	0x40ea	; 0x40ea <write_buffer>

		// Poll buttons when idle
		poll_buttons(true);
    6752:	81 e0       	ldi	r24, 0x01	; 1
    6754:	0e 94 33 2f 	call	0x5e66	; 0x5e66 <poll_buttons>

		// Handle menu changes
		update_menu(MAINITEMS, MAINSTART, 0, button, &main_cursor, &main_top, &main_temp);
    6758:	8a e3       	ldi	r24, 0x3A	; 58
    675a:	c8 2e       	mov	r12, r24
    675c:	85 e0       	ldi	r24, 0x05	; 5
    675e:	d8 2e       	mov	r13, r24
    6760:	9b e0       	ldi	r25, 0x0B	; 11
    6762:	e9 2e       	mov	r14, r25
    6764:	95 e0       	ldi	r25, 0x05	; 5
    6766:	f9 2e       	mov	r15, r25
    6768:	0a e0       	ldi	r16, 0x0A	; 10
    676a:	15 e0       	ldi	r17, 0x05	; 5
    676c:	20 91 ea 07 	lds	r18, 0x07EA
    6770:	40 e0       	ldi	r20, 0x00	; 0
    6772:	6d e4       	ldi	r22, 0x4D	; 77
    6774:	83 e1       	ldi	r24, 0x13	; 19
    6776:	0e 94 1e 31 	call	0x623c	; 0x623c <update_menu>

		// If main menu item has changed, reset sub-menu positions
		// and flag to sub-menus that positions need to be reset
		if (main_temp != old_menu)
    677a:	80 91 3a 05 	lds	r24, 0x053A
    677e:	90 91 3b 05 	lds	r25, 0x053B
    6782:	20 91 39 05 	lds	r18, 0x0539
    6786:	30 e0       	ldi	r19, 0x00	; 0
    6788:	82 17       	cp	r24, r18
    678a:	93 07       	cpc	r25, r19
    678c:	59 f0       	breq	.+22     	; 0x67a4 <menu_main+0xce>
		{
			cursor = LINE0;
    678e:	b0 92 09 05 	sts	0x0509, r11
			menu_temp = 0;
    6792:	10 92 38 05 	sts	0x0538, r1
    6796:	10 92 37 05 	sts	0x0537, r1
			old_menu = main_temp;
    679a:	80 93 39 05 	sts	0x0539, r24
			menu_flag = 1;
    679e:	21 e0       	ldi	r18, 0x01	; 1
    67a0:	20 93 ec 07 	sts	0x07EC, r18
		}

		// If ENTER pressed, jump to menu 
		if (button == ENTER)
    67a4:	20 91 ea 07 	lds	r18, 0x07EA
    67a8:	20 3e       	cpi	r18, 0xE0	; 224
    67aa:	09 f0       	breq	.+2      	; 0x67ae <menu_main+0xd8>
    67ac:	a7 cf       	rjmp	.-178    	; 0x66fc <menu_main+0x26>
		{
			do_main_menu_item(main_temp);
    67ae:	0e 94 28 33 	call	0x6650	; 0x6650 <do_main_menu_item>
			button = NONE;
    67b2:	a0 92 ea 07 	sts	0x07EA, r10

			// Wait until user's finger is off button 1
			Wait_BUTTON1();
    67b6:	0e 94 5e 33 	call	0x66bc	; 0x66bc <Wait_BUTTON1>
    67ba:	a0 cf       	rjmp	.-192    	; 0x66fc <menu_main+0x26>
		}
	}
}
    67bc:	df 91       	pop	r29
    67be:	cf 91       	pop	r28
    67c0:	1f 91       	pop	r17
    67c2:	0f 91       	pop	r16
    67c4:	ff 90       	pop	r15
    67c6:	ef 90       	pop	r14
    67c8:	df 90       	pop	r13
    67ca:	cf 90       	pop	r12
    67cc:	bf 90       	pop	r11
    67ce:	af 90       	pop	r10
    67d0:	08 95       	ret

000067d2 <Wait_BUTTON4>:
	}
}

void Wait_BUTTON4(void)
{
	while(BUTTON4 == 0)
    67d2:	1c 99       	sbic	0x03, 4	; 3
    67d4:	0a c0       	rjmp	.+20     	; 0x67ea <Wait_BUTTON4+0x18>
    67d6:	2f e3       	ldi	r18, 0x3F	; 63
    67d8:	8d e0       	ldi	r24, 0x0D	; 13
    67da:	93 e0       	ldi	r25, 0x03	; 3
    67dc:	21 50       	subi	r18, 0x01	; 1
    67de:	80 40       	sbci	r24, 0x00	; 0
    67e0:	90 40       	sbci	r25, 0x00	; 0
    67e2:	e1 f7       	brne	.-8      	; 0x67dc <Wait_BUTTON4+0xa>
    67e4:	00 c0       	rjmp	.+0      	; 0x67e6 <Wait_BUTTON4+0x14>
    67e6:	00 00       	nop
    67e8:	f4 cf       	rjmp	.-24     	; 0x67d2 <Wait_BUTTON4>
	{
		_delay_ms(50);
	}
    67ea:	08 95       	ret

000067ec <menu_mixer>:
//************************************************************
// Main menu-specific setup
//************************************************************

void menu_mixer(uint8_t i)
{
    67ec:	6f 92       	push	r6
    67ee:	7f 92       	push	r7
    67f0:	8f 92       	push	r8
    67f2:	af 92       	push	r10
    67f4:	bf 92       	push	r11
    67f6:	cf 92       	push	r12
    67f8:	df 92       	push	r13
    67fa:	ef 92       	push	r14
    67fc:	ff 92       	push	r15
    67fe:	0f 93       	push	r16
    6800:	1f 93       	push	r17
    6802:	cf 93       	push	r28
    6804:	df 93       	push	r29
    6806:	00 d0       	rcall	.+0      	; 0x6808 <menu_mixer+0x1c>
    6808:	00 d0       	rcall	.+0      	; 0x680a <menu_mixer+0x1e>
    680a:	1f 92       	push	r1
    680c:	cd b7       	in	r28, 0x3d	; 61
    680e:	de b7       	in	r29, 0x3e	; 62
	int8_t *value_ptr;
	menu_range_t range;
	uint8_t text_link = 0;

	// If sub-menu item has changed, reset sub-menu positions
	if (menu_flag)
    6810:	90 91 ec 07 	lds	r25, 0x07EC
    6814:	99 23       	and	r25, r25
    6816:	41 f0       	breq	.+16     	; 0x6828 <menu_mixer+0x3c>
	{
		sub_top = MIXERSTART;
    6818:	2e eb       	ldi	r18, 0xBE	; 190
    681a:	30 e0       	ldi	r19, 0x00	; 0
    681c:	30 93 3d 05 	sts	0x053D, r19
    6820:	20 93 3c 05 	sts	0x053C, r18
		menu_flag = 0;
    6824:	10 92 ec 07 	sts	0x07EC, r1
	}

	while(button != BACK)
	{
		value_ptr = &Config.Channel[i].Motor_marker;
    6828:	96 e2       	ldi	r25, 0x26	; 38
    682a:	89 9f       	mul	r24, r25
    682c:	30 01       	movw	r6, r0
    682e:	11 24       	eor	r1, r1
    6830:	c3 01       	movw	r24, r6
    6832:	89 5b       	subi	r24, 0xB9	; 185
    6834:	99 4f       	sbci	r25, 0xF9	; 249
    6836:	3c 01       	movw	r6, r24
	{
		sub_top = MIXERSTART;
		menu_flag = 0;
	}

	while(button != BACK)
    6838:	80 91 ea 07 	lds	r24, 0x07EA
    683c:	80 37       	cpi	r24, 0x70	; 112
    683e:	09 f4       	brne	.+2      	; 0x6842 <menu_mixer+0x56>
    6840:	5d c0       	rjmp	.+186    	; 0x68fc <menu_mixer+0x110>
	{
		value_ptr = &Config.Channel[i].Motor_marker;

		// Print menu
		print_menu_items(sub_top, MIXERSTART, value_ptr, (const unsigned char*)mixer_menu_ranges, 0, MIXOFFSET, (const unsigned char*)MixerMenuText, cursor);
    6842:	a0 90 09 05 	lds	r10, 0x0509
    6846:	82 ef       	ldi	r24, 0xF2	; 242
    6848:	c8 2e       	mov	r12, r24
    684a:	88 e1       	ldi	r24, 0x18	; 24
    684c:	d8 2e       	mov	r13, r24
    684e:	99 e5       	ldi	r25, 0x59	; 89
    6850:	e9 2e       	mov	r14, r25
    6852:	00 e0       	ldi	r16, 0x00	; 0
    6854:	28 e4       	ldi	r18, 0x48	; 72
    6856:	38 e1       	ldi	r19, 0x18	; 24
    6858:	a3 01       	movw	r20, r6
    685a:	6e eb       	ldi	r22, 0xBE	; 190
    685c:	70 e0       	ldi	r23, 0x00	; 0
    685e:	80 91 3c 05 	lds	r24, 0x053C
    6862:	90 91 3d 05 	lds	r25, 0x053D
    6866:	0e 94 e8 31 	call	0x63d0	; 0x63d0 <print_menu_items>

		// Handle menu changes
		update_menu(MIXERITEMS, MIXERSTART, 0, button, &cursor, &sub_top, &menu_temp);
    686a:	27 e3       	ldi	r18, 0x37	; 55
    686c:	c2 2e       	mov	r12, r18
    686e:	25 e0       	ldi	r18, 0x05	; 5
    6870:	d2 2e       	mov	r13, r18
    6872:	3c e3       	ldi	r19, 0x3C	; 60
    6874:	e3 2e       	mov	r14, r19
    6876:	35 e0       	ldi	r19, 0x05	; 5
    6878:	f3 2e       	mov	r15, r19
    687a:	09 e0       	ldi	r16, 0x09	; 9
    687c:	15 e0       	ldi	r17, 0x05	; 5
    687e:	20 91 ea 07 	lds	r18, 0x07EA
    6882:	40 e0       	ldi	r20, 0x00	; 0
    6884:	6e eb       	ldi	r22, 0xBE	; 190
    6886:	82 e2       	ldi	r24, 0x22	; 34
    6888:	0e 94 1e 31 	call	0x623c	; 0x623c <update_menu>
		range = get_menu_range ((const unsigned char*)mixer_menu_ranges, menu_temp - MIXERSTART);
    688c:	60 91 37 05 	lds	r22, 0x0537
    6890:	6e 5b       	subi	r22, 0xBE	; 190
    6892:	88 e4       	ldi	r24, 0x48	; 72
    6894:	98 e1       	ldi	r25, 0x18	; 24
    6896:	0e 94 dc 2e 	call	0x5db8	; 0x5db8 <get_menu_range>
    689a:	29 83       	std	Y+1, r18	; 0x01
    689c:	3a 83       	std	Y+2, r19	; 0x02
    689e:	4b 83       	std	Y+3, r20	; 0x03
    68a0:	5c 83       	std	Y+4, r21	; 0x04
    68a2:	6d 83       	std	Y+5, r22	; 0x05

		if (button == ENTER)
    68a4:	80 91 ea 07 	lds	r24, 0x07EA
    68a8:	80 3e       	cpi	r24, 0xE0	; 224
    68aa:	e1 f4       	brne	.+56     	; 0x68e4 <menu_mixer+0xf8>
		{
			text_link = pgm_read_byte(&MixerMenuText[menu_temp - MIXERSTART]);
    68ac:	80 91 37 05 	lds	r24, 0x0537
    68b0:	90 91 38 05 	lds	r25, 0x0538
    68b4:	bc 01       	movw	r22, r24
    68b6:	6e 5b       	subi	r22, 0xBE	; 190
    68b8:	71 09       	sbc	r23, r1
    68ba:	fb 01       	movw	r30, r22
    68bc:	ee 50       	subi	r30, 0x0E	; 14
    68be:	f7 4e       	sbci	r31, 0xE7	; 231
    68c0:	a4 90       	lpm	r10, Z
			do_menu_item(menu_temp, value_ptr + (menu_temp - MIXERSTART), 1, range, 0, text_link, false, 0);
    68c2:	b1 2c       	mov	r11, r1
    68c4:	66 0d       	add	r22, r6
    68c6:	77 1d       	adc	r23, r7
    68c8:	1f 92       	push	r1
    68ca:	1f 92       	push	r1
    68cc:	81 2c       	mov	r8, r1
    68ce:	c1 2c       	mov	r12, r1
    68d0:	e9 80       	ldd	r14, Y+1	; 0x01
    68d2:	fa 80       	ldd	r15, Y+2	; 0x02
    68d4:	0b 81       	ldd	r16, Y+3	; 0x03
    68d6:	1c 81       	ldd	r17, Y+4	; 0x04
    68d8:	2d 81       	ldd	r18, Y+5	; 0x05
    68da:	41 e0       	ldi	r20, 0x01	; 1
    68dc:	0e 94 68 2f 	call	0x5ed0	; 0x5ed0 <do_menu_item>
    68e0:	0f 90       	pop	r0
    68e2:	0f 90       	pop	r0
		}

		// Update limits when exiting
		if (button == ENTER)
    68e4:	80 91 ea 07 	lds	r24, 0x07EA
    68e8:	80 3e       	cpi	r24, 0xE0	; 224
    68ea:	09 f0       	breq	.+2      	; 0x68ee <menu_mixer+0x102>
    68ec:	a5 cf       	rjmp	.-182    	; 0x6838 <menu_mixer+0x4c>
		{
			UpdateLimits();			 // Update travel limits based on percentages
    68ee:	0e 94 8a 36 	call	0x6d14	; 0x6d14 <UpdateLimits>
			Save_Config_to_EEPROM(); // Save value and return
    68f2:	0e 94 6b 16 	call	0x2cd6	; 0x2cd6 <Save_Config_to_EEPROM>
			Wait_BUTTON4();			 // Wait for user's finger off the button
    68f6:	0e 94 e9 33 	call	0x67d2	; 0x67d2 <Wait_BUTTON4>
    68fa:	9e cf       	rjmp	.-196    	; 0x6838 <menu_mixer+0x4c>
		}
	}
}
    68fc:	0f 90       	pop	r0
    68fe:	0f 90       	pop	r0
    6900:	0f 90       	pop	r0
    6902:	0f 90       	pop	r0
    6904:	0f 90       	pop	r0
    6906:	df 91       	pop	r29
    6908:	cf 91       	pop	r28
    690a:	1f 91       	pop	r17
    690c:	0f 91       	pop	r16
    690e:	ff 90       	pop	r15
    6910:	ef 90       	pop	r14
    6912:	df 90       	pop	r13
    6914:	cf 90       	pop	r12
    6916:	bf 90       	pop	r11
    6918:	af 90       	pop	r10
    691a:	8f 90       	pop	r8
    691c:	7f 90       	pop	r7
    691e:	6f 90       	pop	r6
    6920:	08 95       	ret

00006922 <menu_servo_setup>:
//************************************************************
// Main menu-specific setup
//************************************************************

void menu_servo_setup(uint8_t section)
{
    6922:	2f 92       	push	r2
    6924:	3f 92       	push	r3
    6926:	4f 92       	push	r4
    6928:	5f 92       	push	r5
    692a:	6f 92       	push	r6
    692c:	7f 92       	push	r7
    692e:	8f 92       	push	r8
    6930:	9f 92       	push	r9
    6932:	af 92       	push	r10
    6934:	bf 92       	push	r11
    6936:	cf 92       	push	r12
    6938:	df 92       	push	r13
    693a:	ef 92       	push	r14
    693c:	ff 92       	push	r15
    693e:	0f 93       	push	r16
    6940:	1f 93       	push	r17
    6942:	cf 93       	push	r28
    6944:	df 93       	push	r29
    6946:	cd b7       	in	r28, 0x3d	; 61
    6948:	de b7       	in	r29, 0x3e	; 62
    694a:	28 97       	sbiw	r28, 0x08	; 8
    694c:	0f b6       	in	r0, 0x3f	; 63
    694e:	f8 94       	cli
    6950:	de bf       	out	0x3e, r29	; 62
    6952:	0f be       	out	0x3f, r0	; 63
    6954:	cd bf       	out	0x3d, r28	; 61
    6956:	98 2e       	mov	r9, r24
	uint8_t i = 0;
	bool	servo_enable = false;
	bool	zero_setting = false;

	// If submenu item has changed, reset submenu positions
	if (menu_flag)
    6958:	80 91 ec 07 	lds	r24, 0x07EC
    695c:	88 23       	and	r24, r24
    695e:	41 f0       	breq	.+16     	; 0x6970 <menu_servo_setup+0x4e>
	{
		sub_top = SERVOSTART;
    6960:	86 ee       	ldi	r24, 0xE6	; 230
    6962:	90 e0       	ldi	r25, 0x00	; 0
    6964:	90 93 3d 05 	sts	0x053D, r25
    6968:	80 93 3c 05 	sts	0x053C, r24
		menu_flag = 0;
    696c:	10 92 ec 07 	sts	0x07EC, r1
			}

			// Do not allow servo enable for throttle if in CPPM mode
			if ((Config.Channel[menu_temp - SERVOSTART].P1_source_a == THROTTLE) && (Config.RxMode == CPPM_MODE))
			{
				servo_enable = false;
    6970:	1e 82       	std	Y+6, r1	; 0x06
    6972:	53 e7       	ldi	r21, 0x73	; 115
    6974:	65 2e       	mov	r6, r21
    6976:	57 e0       	ldi	r21, 0x07	; 7
    6978:	75 2e       	mov	r7, r21
					break;
			}
		}

		// Print menu
		print_menu_items(sub_top, SERVOSTART, value_ptr, (const unsigned char*)servo_menu_ranges[section - 1], 1, SERVOOFFSET, (const unsigned char*)ServoMenuText[section - 1], cursor);
    697a:	29 2c       	mov	r2, r9
    697c:	31 2c       	mov	r3, r1
    697e:	41 e0       	ldi	r20, 0x01	; 1
    6980:	24 1a       	sub	r2, r20
    6982:	31 08       	sbc	r3, r1
    6984:	85 e0       	ldi	r24, 0x05	; 5
    6986:	82 9d       	mul	r24, r2
    6988:	20 01       	movw	r4, r0
    698a:	83 9d       	mul	r24, r3
    698c:	50 0c       	add	r5, r0
    698e:	11 24       	eor	r1, r1
    6990:	c2 01       	movw	r24, r4
    6992:	8c 5e       	subi	r24, 0xEC	; 236
    6994:	96 4e       	sbci	r25, 0xE6	; 230
    6996:	2c 01       	movw	r4, r24
    6998:	63 e0       	ldi	r22, 0x03	; 3
    699a:	22 0c       	add	r2, r2
    699c:	33 1c       	adc	r3, r3
    699e:	6a 95       	dec	r22
    69a0:	e1 f7       	brne	.-8      	; 0x699a <menu_servo_setup+0x78>
    69a2:	d1 01       	movw	r26, r2
    69a4:	ad 5d       	subi	r26, 0xDD	; 221
    69a6:	b6 4e       	sbci	r27, 0xE6	; 230
    69a8:	b8 87       	std	Y+8, r27	; 0x08
    69aa:	af 83       	std	Y+7, r26	; 0x07
		menu_flag = 0;
	}

	// Get menu offsets
	// 1 = Reverse, 2 = Min, 3 = Max
	while(button != BACK)
    69ac:	80 91 ea 07 	lds	r24, 0x07EA
    69b0:	80 37       	cpi	r24, 0x70	; 112
    69b2:	09 f4       	brne	.+2      	; 0x69b6 <menu_servo_setup+0x94>
    69b4:	8a c0       	rjmp	.+276    	; 0x6aca <menu_servo_setup+0x1a8>
    69b6:	88 e0       	ldi	r24, 0x08	; 8
    69b8:	81 2c       	mov	r8, r1
	{
		// Load values from eeprom
		for (i = 0; i < SERVOITEMS; i++)
		{
			switch(section)
    69ba:	b2 e0       	ldi	r27, 0x02	; 2
    69bc:	9b 16       	cp	r9, r27
    69be:	61 f0       	breq	.+24     	; 0x69d8 <menu_servo_setup+0xb6>
    69c0:	43 e0       	ldi	r20, 0x03	; 3
    69c2:	94 12       	cpse	r9, r20
    69c4:	11 c0       	rjmp	.+34     	; 0x69e8 <menu_servo_setup+0xc6>
					zero_setting = true;
					break;
				case 3:
					value_ptr = &Config.max_travel[0];
					servo_enable = true;
					zero_setting = true;
    69c6:	a1 e0       	ldi	r26, 0x01	; 1
    69c8:	ae 83       	std	Y+6, r26	; 0x06
					servo_enable = true;
					zero_setting = true;
					break;
				case 3:
					value_ptr = &Config.max_travel[0];
					servo_enable = true;
    69ca:	88 24       	eor	r8, r8
    69cc:	83 94       	inc	r8
					value_ptr = &Config.min_travel[0];
					servo_enable = true;
					zero_setting = true;
					break;
				case 3:
					value_ptr = &Config.max_travel[0];
    69ce:	33 e8       	ldi	r19, 0x83	; 131
    69d0:	63 2e       	mov	r6, r19
    69d2:	37 e0       	ldi	r19, 0x07	; 7
    69d4:	73 2e       	mov	r7, r19
					servo_enable = true;
					zero_setting = true;
					break;
    69d6:	08 c0       	rjmp	.+16     	; 0x69e8 <menu_servo_setup+0xc6>
				case 1:
					break;
				case 2:
					value_ptr = &Config.min_travel[0];
					servo_enable = true;
					zero_setting = true;
    69d8:	91 e0       	ldi	r25, 0x01	; 1
    69da:	9e 83       	std	Y+6, r25	; 0x06
			{
				case 1:
					break;
				case 2:
					value_ptr = &Config.min_travel[0];
					servo_enable = true;
    69dc:	88 24       	eor	r8, r8
    69de:	83 94       	inc	r8
			switch(section)
			{
				case 1:
					break;
				case 2:
					value_ptr = &Config.min_travel[0];
    69e0:	4b e7       	ldi	r20, 0x7B	; 123
    69e2:	64 2e       	mov	r6, r20
    69e4:	47 e0       	ldi	r20, 0x07	; 7
    69e6:	74 2e       	mov	r7, r20
    69e8:	81 50       	subi	r24, 0x01	; 1
	// Get menu offsets
	// 1 = Reverse, 2 = Min, 3 = Max
	while(button != BACK)
	{
		// Load values from eeprom
		for (i = 0; i < SERVOITEMS; i++)
    69ea:	39 f7       	brne	.-50     	; 0x69ba <menu_servo_setup+0x98>
					break;
			}
		}

		// Print menu
		print_menu_items(sub_top, SERVOSTART, value_ptr, (const unsigned char*)servo_menu_ranges[section - 1], 1, SERVOOFFSET, (const unsigned char*)ServoMenuText[section - 1], cursor);
    69ec:	a0 90 09 05 	lds	r10, 0x0509
    69f0:	cf 80       	ldd	r12, Y+7	; 0x07
    69f2:	d8 84       	ldd	r13, Y+8	; 0x08
    69f4:	80 e5       	ldi	r24, 0x50	; 80
    69f6:	e8 2e       	mov	r14, r24
    69f8:	01 e0       	ldi	r16, 0x01	; 1
    69fa:	92 01       	movw	r18, r4
    69fc:	a3 01       	movw	r20, r6
    69fe:	66 ee       	ldi	r22, 0xE6	; 230
    6a00:	70 e0       	ldi	r23, 0x00	; 0
    6a02:	80 91 3c 05 	lds	r24, 0x053C
    6a06:	90 91 3d 05 	lds	r25, 0x053D
    6a0a:	0e 94 e8 31 	call	0x63d0	; 0x63d0 <print_menu_items>

		// Handle menu changes
		update_menu(SERVOITEMS, SERVOSTART, 0, button, &cursor, &sub_top, &menu_temp);
    6a0e:	97 e3       	ldi	r25, 0x37	; 55
    6a10:	c9 2e       	mov	r12, r25
    6a12:	95 e0       	ldi	r25, 0x05	; 5
    6a14:	d9 2e       	mov	r13, r25
    6a16:	2c e3       	ldi	r18, 0x3C	; 60
    6a18:	e2 2e       	mov	r14, r18
    6a1a:	25 e0       	ldi	r18, 0x05	; 5
    6a1c:	f2 2e       	mov	r15, r18
    6a1e:	09 e0       	ldi	r16, 0x09	; 9
    6a20:	15 e0       	ldi	r17, 0x05	; 5
    6a22:	20 91 ea 07 	lds	r18, 0x07EA
    6a26:	40 e0       	ldi	r20, 0x00	; 0
    6a28:	66 ee       	ldi	r22, 0xE6	; 230
    6a2a:	88 e0       	ldi	r24, 0x08	; 8
    6a2c:	0e 94 1e 31 	call	0x623c	; 0x623c <update_menu>
		range = get_menu_range ((const unsigned char*)servo_menu_ranges[section - 1], 0);
    6a30:	60 e0       	ldi	r22, 0x00	; 0
    6a32:	c2 01       	movw	r24, r4
    6a34:	0e 94 dc 2e 	call	0x5db8	; 0x5db8 <get_menu_range>
    6a38:	29 83       	std	Y+1, r18	; 0x01
    6a3a:	3a 83       	std	Y+2, r19	; 0x02
    6a3c:	4b 83       	std	Y+3, r20	; 0x03
    6a3e:	5c 83       	std	Y+4, r21	; 0x04
    6a40:	6d 83       	std	Y+5, r22	; 0x05

		if (button == ENTER)
    6a42:	80 91 ea 07 	lds	r24, 0x07EA
    6a46:	80 3e       	cpi	r24, 0xE0	; 224
    6a48:	a1 f5       	brne	.+104    	; 0x6ab2 <menu_servo_setup+0x190>
		{
			text_link = pgm_read_byte(&ServoMenuText[section - 1][menu_temp - SERVOSTART]);
    6a4a:	80 91 37 05 	lds	r24, 0x0537
    6a4e:	90 91 38 05 	lds	r25, 0x0538
    6a52:	9c 01       	movw	r18, r24
    6a54:	26 5e       	subi	r18, 0xE6	; 230
    6a56:	31 09       	sbc	r19, r1
    6a58:	f9 01       	movw	r30, r18
    6a5a:	e2 0d       	add	r30, r2
    6a5c:	f3 1d       	adc	r31, r3
    6a5e:	ed 5d       	subi	r30, 0xDD	; 221
    6a60:	f6 4e       	sbci	r31, 0xE6	; 230
    6a62:	e4 91       	lpm	r30, Z
    6a64:	b3 01       	movw	r22, r6
    6a66:	62 0f       	add	r22, r18
    6a68:	73 1f       	adc	r23, r19

			// Zero limits if adjusting
			if (zero_setting)
    6a6a:	be 81       	ldd	r27, Y+6	; 0x06
    6a6c:	bb 23       	and	r27, r27
    6a6e:	11 f0       	breq	.+4      	; 0x6a74 <menu_servo_setup+0x152>
			{
				value_ptr[menu_temp - SERVOSTART] = 0;
    6a70:	db 01       	movw	r26, r22
    6a72:	1c 92       	st	X, r1
			}

			// Do not allow servo enable for throttle if in CPPM mode
			if ((Config.Channel[menu_temp - SERVOSTART].P1_source_a == THROTTLE) && (Config.RxMode == CPPM_MODE))
    6a74:	46 e2       	ldi	r20, 0x26	; 38
    6a76:	42 9f       	mul	r20, r18
    6a78:	d0 01       	movw	r26, r0
    6a7a:	43 9f       	mul	r20, r19
    6a7c:	b0 0d       	add	r27, r0
    6a7e:	11 24       	eor	r1, r1
    6a80:	af 59       	subi	r26, 0x9F	; 159
    6a82:	b9 4f       	sbci	r27, 0xF9	; 249
    6a84:	4c 91       	ld	r20, X
    6a86:	41 11       	cpse	r20, r1
    6a88:	05 c0       	rjmp	.+10     	; 0x6a94 <menu_servo_setup+0x172>
    6a8a:	40 91 da 05 	lds	r20, 0x05DA
    6a8e:	41 11       	cpse	r20, r1
    6a90:	01 c0       	rjmp	.+2      	; 0x6a94 <menu_servo_setup+0x172>
			{
				servo_enable = false;
    6a92:	81 2c       	mov	r8, r1
			}

			do_menu_item(menu_temp, value_ptr + (menu_temp - SERVOSTART), 1, range, 0, text_link, servo_enable, (menu_temp - SERVOSTART));
    6a94:	ae 2e       	mov	r10, r30
    6a96:	b1 2c       	mov	r11, r1
    6a98:	3f 93       	push	r19
    6a9a:	2f 93       	push	r18
    6a9c:	c1 2c       	mov	r12, r1
    6a9e:	e9 80       	ldd	r14, Y+1	; 0x01
    6aa0:	fa 80       	ldd	r15, Y+2	; 0x02
    6aa2:	0b 81       	ldd	r16, Y+3	; 0x03
    6aa4:	1c 81       	ldd	r17, Y+4	; 0x04
    6aa6:	2d 81       	ldd	r18, Y+5	; 0x05
    6aa8:	41 e0       	ldi	r20, 0x01	; 1
    6aaa:	0e 94 68 2f 	call	0x5ed0	; 0x5ed0 <do_menu_item>
    6aae:	0f 90       	pop	r0
    6ab0:	0f 90       	pop	r0
		}

		// Disable servos
		servo_enable = false;

		if (button == ENTER)
    6ab2:	80 91 ea 07 	lds	r24, 0x07EA
    6ab6:	80 3e       	cpi	r24, 0xE0	; 224
    6ab8:	09 f0       	breq	.+2      	; 0x6abc <menu_servo_setup+0x19a>
    6aba:	78 cf       	rjmp	.-272    	; 0x69ac <menu_servo_setup+0x8a>
		{
			UpdateLimits();				// Update actual servo trims
    6abc:	0e 94 8a 36 	call	0x6d14	; 0x6d14 <UpdateLimits>
			Save_Config_to_EEPROM();	// Save value and return
    6ac0:	0e 94 6b 16 	call	0x2cd6	; 0x2cd6 <Save_Config_to_EEPROM>
			Wait_BUTTON4();				// Wait for user's finger off the button
    6ac4:	0e 94 e9 33 	call	0x67d2	; 0x67d2 <Wait_BUTTON4>
    6ac8:	71 cf       	rjmp	.-286    	; 0x69ac <menu_servo_setup+0x8a>
		}
	}
}
    6aca:	28 96       	adiw	r28, 0x08	; 8
    6acc:	0f b6       	in	r0, 0x3f	; 63
    6ace:	f8 94       	cli
    6ad0:	de bf       	out	0x3e, r29	; 62
    6ad2:	0f be       	out	0x3f, r0	; 63
    6ad4:	cd bf       	out	0x3d, r28	; 61
    6ad6:	df 91       	pop	r29
    6ad8:	cf 91       	pop	r28
    6ada:	1f 91       	pop	r17
    6adc:	0f 91       	pop	r16
    6ade:	ff 90       	pop	r15
    6ae0:	ef 90       	pop	r14
    6ae2:	df 90       	pop	r13
    6ae4:	cf 90       	pop	r12
    6ae6:	bf 90       	pop	r11
    6ae8:	af 90       	pop	r10
    6aea:	9f 90       	pop	r9
    6aec:	8f 90       	pop	r8
    6aee:	7f 90       	pop	r7
    6af0:	6f 90       	pop	r6
    6af2:	5f 90       	pop	r5
    6af4:	4f 90       	pop	r4
    6af6:	3f 90       	pop	r3
    6af8:	2f 90       	pop	r2
    6afa:	08 95       	ret

00006afc <menu_rc_setup>:
//************************************************************
// Main menu-specific setup
//************************************************************

void menu_rc_setup(uint8_t section)
{
    6afc:	2f 92       	push	r2
    6afe:	3f 92       	push	r3
    6b00:	4f 92       	push	r4
    6b02:	5f 92       	push	r5
    6b04:	6f 92       	push	r6
    6b06:	7f 92       	push	r7
    6b08:	8f 92       	push	r8
    6b0a:	9f 92       	push	r9
    6b0c:	af 92       	push	r10
    6b0e:	bf 92       	push	r11
    6b10:	cf 92       	push	r12
    6b12:	df 92       	push	r13
    6b14:	ef 92       	push	r14
    6b16:	ff 92       	push	r15
    6b18:	0f 93       	push	r16
    6b1a:	1f 93       	push	r17
    6b1c:	cf 93       	push	r28
    6b1e:	df 93       	push	r29
    6b20:	cd b7       	in	r28, 0x3d	; 61
    6b22:	de b7       	in	r29, 0x3e	; 62
    6b24:	2a 97       	sbiw	r28, 0x0a	; 10
    6b26:	0f b6       	in	r0, 0x3f	; 63
    6b28:	f8 94       	cli
    6b2a:	de bf       	out	0x3e, r29	; 62
    6b2c:	0f be       	out	0x3f, r0	; 63
    6b2e:	cd bf       	out	0x3d, r28	; 61
    6b30:	88 87       	std	Y+8, r24	; 0x08
	uint8_t i;
	uint8_t offset = 0;			// Index into channel structure
	uint8_t	items= RCITEMS;		// Items in group
	
	// If submenu item has changed, reset submenu positions
	if (menu_flag)
    6b32:	80 91 ec 07 	lds	r24, 0x07EC
    6b36:	88 23       	and	r24, r24
    6b38:	41 f0       	breq	.+16     	; 0x6b4a <menu_rc_setup+0x4e>
	{
		sub_top = RCSTART;
    6b3a:	85 e9       	ldi	r24, 0x95	; 149
    6b3c:	90 e0       	ldi	r25, 0x00	; 0
    6b3e:	90 93 3d 05 	sts	0x053D, r25
    6b42:	80 93 3c 05 	sts	0x053C, r24
		menu_flag = 0;
    6b46:	10 92 ec 07 	sts	0x07EC, r1
			writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_CONFIG, (6 - Config.MPU6050_LPF));

			// Update channel sequence
			for (i = 0; i < MAX_RC_CHANNELS; i++)
			{
				if (Config.TxSeq == FUTABASEQ)
    6b4a:	27 e0       	ldi	r18, 0x07	; 7
    6b4c:	2f 83       	std	Y+7, r18	; 0x07
    6b4e:	1e 82       	std	Y+6, r1	; 0x06
    6b50:	6a ed       	ldi	r22, 0xDA	; 218
    6b52:	46 2e       	mov	r4, r22
    6b54:	65 e0       	ldi	r22, 0x05	; 5
    6b56:	56 2e       	mov	r5, r22
			default:
				break;
		}

		// Print menu
		print_menu_items(sub_top + offset, RCSTART + offset, value_ptr, (const unsigned char*)rc_menu_ranges[section - 1], 0, RCOFFSET, (const unsigned char*)RCMenuText[section - 1], cursor);
    6b58:	38 85       	ldd	r19, Y+8	; 0x08
    6b5a:	83 2f       	mov	r24, r19
    6b5c:	90 e0       	ldi	r25, 0x00	; 0
    6b5e:	01 97       	sbiw	r24, 0x01	; 1
    6b60:	2d e2       	ldi	r18, 0x2D	; 45
    6b62:	28 9f       	mul	r18, r24
    6b64:	30 01       	movw	r6, r0
    6b66:	29 9f       	mul	r18, r25
    6b68:	70 0c       	add	r7, r0
    6b6a:	11 24       	eor	r1, r1
    6b6c:	93 01       	movw	r18, r6
    6b6e:	25 5c       	subi	r18, 0xC5	; 197
    6b70:	36 4e       	sbci	r19, 0xE6	; 230
    6b72:	39 01       	movw	r6, r18
    6b74:	29 e0       	ldi	r18, 0x09	; 9
    6b76:	28 9f       	mul	r18, r24
    6b78:	10 01       	movw	r2, r0
    6b7a:	29 9f       	mul	r18, r25
    6b7c:	30 0c       	add	r3, r0
    6b7e:	11 24       	eor	r1, r1
    6b80:	c1 01       	movw	r24, r2
    6b82:	8b 56       	subi	r24, 0x6B	; 107
    6b84:	96 4e       	sbci	r25, 0xE6	; 230
    6b86:	9a 87       	std	Y+10, r25	; 0x0a
    6b88:	89 87       	std	Y+9, r24	; 0x09
	{
		sub_top = RCSTART;
		menu_flag = 0;
	}

	while(button != BACK)
    6b8a:	80 91 ea 07 	lds	r24, 0x07EA
    6b8e:	80 37       	cpi	r24, 0x70	; 112
    6b90:	09 f4       	brne	.+2      	; 0x6b94 <menu_rc_setup+0x98>
    6b92:	a7 c0       	rjmp	.+334    	; 0x6ce2 <menu_rc_setup+0x1e6>
	{
		// Get menu offsets and load values from eeprom
		// 1 = RC, 2 = General
		switch(section)
    6b94:	98 85       	ldd	r25, Y+8	; 0x08
    6b96:	92 30       	cpi	r25, 0x02	; 2
    6b98:	41 f4       	brne	.+16     	; 0x6baa <menu_rc_setup+0xae>
		{
			case 1:				// RC setup menu
				break;
			case 2:				// General menu
				offset = RCITEMSOFFSET;
				items = GENERALITEMS;
    6b9a:	29 e0       	ldi	r18, 0x09	; 9
    6b9c:	2f 83       	std	Y+7, r18	; 0x07
		switch(section)
		{
			case 1:				// RC setup menu
				break;
			case 2:				// General menu
				offset = RCITEMSOFFSET;
    6b9e:	39 e0       	ldi	r19, 0x09	; 9
    6ba0:	3e 83       	std	Y+6, r19	; 0x06
				items = GENERALITEMS;
				value_ptr = &Config.Orientation;
    6ba2:	59 e3       	ldi	r21, 0x39	; 57
    6ba4:	45 2e       	mov	r4, r21
    6ba6:	56 e0       	ldi	r21, 0x06	; 6
    6ba8:	55 2e       	mov	r5, r21
			default:
				break;
		}

		// Print menu
		print_menu_items(sub_top + offset, RCSTART + offset, value_ptr, (const unsigned char*)rc_menu_ranges[section - 1], 0, RCOFFSET, (const unsigned char*)RCMenuText[section - 1], cursor);
    6baa:	8e 81       	ldd	r24, Y+6	; 0x06
    6bac:	88 2e       	mov	r8, r24
    6bae:	91 2c       	mov	r9, r1
    6bb0:	b4 01       	movw	r22, r8
    6bb2:	6b 56       	subi	r22, 0x6B	; 107
    6bb4:	7f 4f       	sbci	r23, 0xFF	; 255
    6bb6:	80 91 3c 05 	lds	r24, 0x053C
    6bba:	90 91 3d 05 	lds	r25, 0x053D
    6bbe:	a0 90 09 05 	lds	r10, 0x0509
    6bc2:	c9 84       	ldd	r12, Y+9	; 0x09
    6bc4:	da 84       	ldd	r13, Y+10	; 0x0a
    6bc6:	2f e4       	ldi	r18, 0x4F	; 79
    6bc8:	e2 2e       	mov	r14, r18
    6bca:	00 e0       	ldi	r16, 0x00	; 0
    6bcc:	93 01       	movw	r18, r6
    6bce:	a2 01       	movw	r20, r4
    6bd0:	88 0d       	add	r24, r8
    6bd2:	99 1d       	adc	r25, r9
    6bd4:	0e 94 e8 31 	call	0x63d0	; 0x63d0 <print_menu_items>

		// Handle menu changes
		update_menu(items, RCSTART, offset, button, &cursor, &sub_top, &menu_temp);
    6bd8:	37 e3       	ldi	r19, 0x37	; 55
    6bda:	c3 2e       	mov	r12, r19
    6bdc:	35 e0       	ldi	r19, 0x05	; 5
    6bde:	d3 2e       	mov	r13, r19
    6be0:	4c e3       	ldi	r20, 0x3C	; 60
    6be2:	e4 2e       	mov	r14, r20
    6be4:	45 e0       	ldi	r20, 0x05	; 5
    6be6:	f4 2e       	mov	r15, r20
    6be8:	09 e0       	ldi	r16, 0x09	; 9
    6bea:	15 e0       	ldi	r17, 0x05	; 5
    6bec:	20 91 ea 07 	lds	r18, 0x07EA
    6bf0:	4e 81       	ldd	r20, Y+6	; 0x06
    6bf2:	65 e9       	ldi	r22, 0x95	; 149
    6bf4:	8f 81       	ldd	r24, Y+7	; 0x07
    6bf6:	0e 94 1e 31 	call	0x623c	; 0x623c <update_menu>
		range = get_menu_range ((const unsigned char*)rc_menu_ranges[section - 1], (menu_temp - RCSTART - offset)); 
    6bfa:	60 91 37 05 	lds	r22, 0x0537
    6bfe:	65 59       	subi	r22, 0x95	; 149
    6c00:	9e 81       	ldd	r25, Y+6	; 0x06
    6c02:	69 1b       	sub	r22, r25
    6c04:	c3 01       	movw	r24, r6
    6c06:	0e 94 dc 2e 	call	0x5db8	; 0x5db8 <get_menu_range>
    6c0a:	29 83       	std	Y+1, r18	; 0x01
    6c0c:	3a 83       	std	Y+2, r19	; 0x02
    6c0e:	4b 83       	std	Y+3, r20	; 0x03
    6c10:	5c 83       	std	Y+4, r21	; 0x04
    6c12:	6d 83       	std	Y+5, r22	; 0x05

		if (button == ENTER)
    6c14:	80 91 ea 07 	lds	r24, 0x07EA
    6c18:	80 3e       	cpi	r24, 0xE0	; 224
    6c1a:	09 f5       	brne	.+66     	; 0x6c5e <menu_rc_setup+0x162>
		{
			text_link = pgm_read_byte(&RCMenuText[section - 1][menu_temp - RCSTART - offset]);
    6c1c:	80 91 37 05 	lds	r24, 0x0537
    6c20:	90 91 38 05 	lds	r25, 0x0538
    6c24:	bc 01       	movw	r22, r24
    6c26:	65 59       	subi	r22, 0x95	; 149
    6c28:	71 09       	sbc	r23, r1
    6c2a:	68 19       	sub	r22, r8
    6c2c:	79 09       	sbc	r23, r9
    6c2e:	fb 01       	movw	r30, r22
    6c30:	e2 0d       	add	r30, r2
    6c32:	f3 1d       	adc	r31, r3
    6c34:	eb 56       	subi	r30, 0x6B	; 107
    6c36:	f6 4e       	sbci	r31, 0xE6	; 230
    6c38:	e4 91       	lpm	r30, Z
			do_menu_item(menu_temp, value_ptr + (menu_temp - RCSTART - offset), 1, range, 0, text_link, false, 0);
    6c3a:	ae 2e       	mov	r10, r30
    6c3c:	b1 2c       	mov	r11, r1
    6c3e:	64 0d       	add	r22, r4
    6c40:	75 1d       	adc	r23, r5
    6c42:	1f 92       	push	r1
    6c44:	1f 92       	push	r1
    6c46:	81 2c       	mov	r8, r1
    6c48:	c1 2c       	mov	r12, r1
    6c4a:	e9 80       	ldd	r14, Y+1	; 0x01
    6c4c:	fa 80       	ldd	r15, Y+2	; 0x02
    6c4e:	0b 81       	ldd	r16, Y+3	; 0x03
    6c50:	1c 81       	ldd	r17, Y+4	; 0x04
    6c52:	2d 81       	ldd	r18, Y+5	; 0x05
    6c54:	41 e0       	ldi	r20, 0x01	; 1
    6c56:	0e 94 68 2f 	call	0x5ed0	; 0x5ed0 <do_menu_item>
    6c5a:	0f 90       	pop	r0
    6c5c:	0f 90       	pop	r0
		}

		if (button == ENTER)
    6c5e:	80 91 ea 07 	lds	r24, 0x07EA
    6c62:	80 3e       	cpi	r24, 0xE0	; 224
    6c64:	09 f0       	breq	.+2      	; 0x6c68 <menu_rc_setup+0x16c>
    6c66:	91 cf       	rjmp	.-222    	; 0x6b8a <menu_rc_setup+0x8e>
		{
			init_int();				// In case RC type has changed, reinitialise interrupts
    6c68:	0e 94 4e 2e 	call	0x5c9c	; 0x5c9c <init_int>
			init_uart();			// and UART
    6c6c:	0e 94 ca 45 	call	0x8b94	; 0x8b94 <init_uart>
			UpdateLimits();			// Update I-term limits and triggers based on percentages
    6c70:	0e 94 8a 36 	call	0x6d14	; 0x6d14 <UpdateLimits>

			// Update MPU6050 LPF and reverse sense of menu items
			writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_CONFIG, (6 - Config.MPU6050_LPF));
    6c74:	80 91 3e 06 	lds	r24, 0x063E
    6c78:	46 e0       	ldi	r20, 0x06	; 6
    6c7a:	48 1b       	sub	r20, r24
    6c7c:	6a e1       	ldi	r22, 0x1A	; 26
    6c7e:	80 ed       	ldi	r24, 0xD0	; 208
    6c80:	0e 94 b2 24 	call	0x4964	; 0x4964 <writeI2Cbyte>

			// Update channel sequence
			for (i = 0; i < MAX_RC_CHANNELS; i++)
			{
				if (Config.TxSeq == FUTABASEQ)
    6c84:	20 91 dd 05 	lds	r18, 0x05DD
    6c88:	a2 eb       	ldi	r26, 0xB2	; 178
    6c8a:	b5 e0       	ldi	r27, 0x05	; 5
    6c8c:	80 e0       	ldi	r24, 0x00	; 0
    6c8e:	90 e0       	ldi	r25, 0x00	; 0
    6c90:	fc 01       	movw	r30, r24
    6c92:	21 30       	cpi	r18, 0x01	; 1
    6c94:	19 f4       	brne	.+6      	; 0x6c9c <menu_rc_setup+0x1a0>
    6c96:	e4 52       	subi	r30, 0x24	; 36
    6c98:	ff 4f       	sbci	r31, 0xFF	; 255
    6c9a:	02 c0       	rjmp	.+4      	; 0x6ca0 <menu_rc_setup+0x1a4>
    6c9c:	ec 51       	subi	r30, 0x1C	; 28
    6c9e:	ff 4f       	sbci	r31, 0xFF	; 255
				{
					Config.ChannelOrder[i] = pgm_read_byte(&FUTABA[i]);
				}
				else
				{
					Config.ChannelOrder[i] = pgm_read_byte(&JR[i]);
    6ca0:	e4 91       	lpm	r30, Z
    6ca2:	ec 93       	st	X, r30
    6ca4:	01 96       	adiw	r24, 0x01	; 1
    6ca6:	11 96       	adiw	r26, 0x01	; 1

			// Update MPU6050 LPF and reverse sense of menu items
			writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_CONFIG, (6 - Config.MPU6050_LPF));

			// Update channel sequence
			for (i = 0; i < MAX_RC_CHANNELS; i++)
    6ca8:	88 30       	cpi	r24, 0x08	; 8
    6caa:	91 05       	cpc	r25, r1
    6cac:	89 f7       	brne	.-30     	; 0x6c90 <menu_rc_setup+0x194>
				}
			}

			// Check validity of RX type and PWM speed selection
			// If illegal setting, drop down to RC Sync
			if ((Config.RxMode != SBUS) && (Config.Servo_rate == FAST))
    6cae:	80 91 da 05 	lds	r24, 0x05DA
    6cb2:	82 30       	cpi	r24, 0x02	; 2
    6cb4:	39 f0       	breq	.+14     	; 0x6cc4 <menu_rc_setup+0x1c8>
    6cb6:	80 91 db 05 	lds	r24, 0x05DB
    6cba:	82 30       	cpi	r24, 0x02	; 2
    6cbc:	19 f4       	brne	.+6      	; 0x6cc4 <menu_rc_setup+0x1c8>
			{
				Config.Servo_rate = SYNC;
    6cbe:	81 e0       	ldi	r24, 0x01	; 1
    6cc0:	80 93 db 05 	sts	0x05DB, r24
			}
			
			if (Config.ArmMode == ARMABLE)
    6cc4:	80 91 3b 06 	lds	r24, 0x063B
    6cc8:	81 30       	cpi	r24, 0x01	; 1
    6cca:	31 f4       	brne	.+12     	; 0x6cd8 <menu_rc_setup+0x1dc>
			{
				General_error |= (1 << DISARMED);	// Set flags to disarmed
    6ccc:	80 91 22 05 	lds	r24, 0x0522
    6cd0:	84 60       	ori	r24, 0x04	; 4
    6cd2:	80 93 22 05 	sts	0x0522, r24
				LED1 = 0;
    6cd6:	2b 98       	cbi	0x05, 3	; 5
			}

			Save_Config_to_EEPROM(); // Save value and return
    6cd8:	0e 94 6b 16 	call	0x2cd6	; 0x2cd6 <Save_Config_to_EEPROM>
			Wait_BUTTON4();			 // Wait for user's finger off the button
    6cdc:	0e 94 e9 33 	call	0x67d2	; 0x67d2 <Wait_BUTTON4>
    6ce0:	54 cf       	rjmp	.-344    	; 0x6b8a <menu_rc_setup+0x8e>
		}
	}
}
    6ce2:	2a 96       	adiw	r28, 0x0a	; 10
    6ce4:	0f b6       	in	r0, 0x3f	; 63
    6ce6:	f8 94       	cli
    6ce8:	de bf       	out	0x3e, r29	; 62
    6cea:	0f be       	out	0x3f, r0	; 63
    6cec:	cd bf       	out	0x3d, r28	; 61
    6cee:	df 91       	pop	r29
    6cf0:	cf 91       	pop	r28
    6cf2:	1f 91       	pop	r17
    6cf4:	0f 91       	pop	r16
    6cf6:	ff 90       	pop	r15
    6cf8:	ef 90       	pop	r14
    6cfa:	df 90       	pop	r13
    6cfc:	cf 90       	pop	r12
    6cfe:	bf 90       	pop	r11
    6d00:	af 90       	pop	r10
    6d02:	9f 90       	pop	r9
    6d04:	8f 90       	pop	r8
    6d06:	7f 90       	pop	r7
    6d08:	6f 90       	pop	r6
    6d0a:	5f 90       	pop	r5
    6d0c:	4f 90       	pop	r4
    6d0e:	3f 90       	pop	r3
    6d10:	2f 90       	pop	r2
    6d12:	08 95       	ret

00006d14 <UpdateLimits>:

// Update actual limits value with that from the mix setting percentages
// This is only done at start-up and whenever the values are changed
// so as to reduce CPU loop load
void UpdateLimits(void)
{
    6d14:	6f 92       	push	r6
    6d16:	7f 92       	push	r7
    6d18:	8f 92       	push	r8
    6d1a:	9f 92       	push	r9
    6d1c:	af 92       	push	r10
    6d1e:	bf 92       	push	r11
    6d20:	cf 92       	push	r12
    6d22:	df 92       	push	r13
    6d24:	ef 92       	push	r14
    6d26:	ff 92       	push	r15
    6d28:	0f 93       	push	r16
    6d2a:	1f 93       	push	r17
    6d2c:	cf 93       	push	r28
    6d2e:	df 93       	push	r29
    6d30:	cd b7       	in	r28, 0x3d	; 61
    6d32:	de b7       	in	r29, 0x3e	; 62
    6d34:	2c 97       	sbiw	r28, 0x0c	; 12
    6d36:	0f b6       	in	r0, 0x3f	; 63
    6d38:	f8 94       	cli
    6d3a:	de bf       	out	0x3e, r29	; 62
    6d3c:	0f be       	out	0x3f, r0	; 63
    6d3e:	cd bf       	out	0x3d, r28	; 61
	uint8_t i,j;
	int32_t temp32, gain32;

	int8_t limits[FLIGHT_MODES][NUMBEROFAXIS] = 
    6d40:	80 91 e5 05 	lds	r24, 0x05E5
    6d44:	8f 83       	std	Y+7, r24	; 0x07
    6d46:	80 91 eb 05 	lds	r24, 0x05EB
    6d4a:	88 87       	std	Y+8, r24	; 0x08
    6d4c:	80 91 f1 05 	lds	r24, 0x05F1
    6d50:	89 87       	std	Y+9, r24	; 0x09
    6d52:	80 91 f7 05 	lds	r24, 0x05F7
    6d56:	8a 87       	std	Y+10, r24	; 0x0a
    6d58:	80 91 fd 05 	lds	r24, 0x05FD
    6d5c:	8b 87       	std	Y+11, r24	; 0x0b
    6d5e:	80 91 03 06 	lds	r24, 0x0603
    6d62:	8c 87       	std	Y+12, r24	; 0x0c
		{
			{Config.FlightMode[P1].Roll_limit, Config.FlightMode[P1].Pitch_limit, Config.FlightMode[P1].Yaw_limit},
			{Config.FlightMode[P2].Roll_limit, Config.FlightMode[P2].Pitch_limit, Config.FlightMode[P2].Yaw_limit}
		};

	int8_t gains[FLIGHT_MODES][NUMBEROFAXIS] = 
    6d64:	80 91 e4 05 	lds	r24, 0x05E4
    6d68:	89 83       	std	Y+1, r24	; 0x01
    6d6a:	80 91 ea 05 	lds	r24, 0x05EA
    6d6e:	8a 83       	std	Y+2, r24	; 0x02
    6d70:	80 91 f0 05 	lds	r24, 0x05F0
    6d74:	8b 83       	std	Y+3, r24	; 0x03
    6d76:	80 91 f6 05 	lds	r24, 0x05F6
    6d7a:	8c 83       	std	Y+4, r24	; 0x04
    6d7c:	80 91 fc 05 	lds	r24, 0x05FC
    6d80:	8d 83       	std	Y+5, r24	; 0x05
    6d82:	80 91 02 06 	lds	r24, 0x0602
    6d86:	8e 83       	std	Y+6, r24	; 0x06
			{Config.FlightMode[P2].Roll_I_mult, Config.FlightMode[P2].Pitch_I_mult, Config.FlightMode[P2].Yaw_I_mult}
		};

	// Update LVA trigger
	// Vbat is measured in units of 10mV, so PowerTriggerActual of 1270 equates to 12.7V
	switch (Config.PowerTrigger)
    6d88:	80 91 3d 06 	lds	r24, 0x063D
    6d8c:	82 30       	cpi	r24, 0x02	; 2
    6d8e:	81 f0       	breq	.+32     	; 0x6db0 <UpdateLimits+0x9c>
    6d90:	3c f4       	brge	.+14     	; 0x6da0 <UpdateLimits+0x8c>
    6d92:	88 23       	and	r24, r24
    6d94:	d1 f0       	breq	.+52     	; 0x6dca <UpdateLimits+0xb6>
    6d96:	81 30       	cpi	r24, 0x01	; 1
    6d98:	c1 f4       	brne	.+48     	; 0x6dca <UpdateLimits+0xb6>
	{
		case 0:
		Config.PowerTriggerActual = 0;			// Off
		break;
		case 1:
		Config.PowerTriggerActual = 350; 		// 3.5V
    6d9a:	8e e5       	ldi	r24, 0x5E	; 94
    6d9c:	91 e0       	ldi	r25, 0x01	; 1
    6d9e:	10 c0       	rjmp	.+32     	; 0x6dc0 <UpdateLimits+0xac>
			{Config.FlightMode[P2].Roll_I_mult, Config.FlightMode[P2].Pitch_I_mult, Config.FlightMode[P2].Yaw_I_mult}
		};

	// Update LVA trigger
	// Vbat is measured in units of 10mV, so PowerTriggerActual of 1270 equates to 12.7V
	switch (Config.PowerTrigger)
    6da0:	84 30       	cpi	r24, 0x04	; 4
    6da2:	61 f0       	breq	.+24     	; 0x6dbc <UpdateLimits+0xa8>
    6da4:	44 f0       	brlt	.+16     	; 0x6db6 <UpdateLimits+0xa2>
    6da6:	85 30       	cpi	r24, 0x05	; 5
    6da8:	81 f4       	brne	.+32     	; 0x6dca <UpdateLimits+0xb6>
		break;
		case 4:
		Config.PowerTriggerActual = 380; 		// 3.8V
		break;
		case 5:
		Config.PowerTriggerActual = 390; 		// 3.9V
    6daa:	86 e8       	ldi	r24, 0x86	; 134
    6dac:	91 e0       	ldi	r25, 0x01	; 1
    6dae:	08 c0       	rjmp	.+16     	; 0x6dc0 <UpdateLimits+0xac>
		break;
		case 1:
		Config.PowerTriggerActual = 350; 		// 3.5V
		break;
		case 2:
		Config.PowerTriggerActual = 360; 		// 3.6V
    6db0:	88 e6       	ldi	r24, 0x68	; 104
    6db2:	91 e0       	ldi	r25, 0x01	; 1
    6db4:	05 c0       	rjmp	.+10     	; 0x6dc0 <UpdateLimits+0xac>
		break;
		case 3:
		Config.PowerTriggerActual = 370; 		// 3.7V
    6db6:	82 e7       	ldi	r24, 0x72	; 114
    6db8:	91 e0       	ldi	r25, 0x01	; 1
    6dba:	02 c0       	rjmp	.+4      	; 0x6dc0 <UpdateLimits+0xac>
		break;
		case 4:
		Config.PowerTriggerActual = 380; 		// 3.8V
    6dbc:	8c e7       	ldi	r24, 0x7C	; 124
    6dbe:	91 e0       	ldi	r25, 0x01	; 1
		break;
		case 5:
		Config.PowerTriggerActual = 390; 		// 3.9V
    6dc0:	90 93 38 06 	sts	0x0638, r25
    6dc4:	80 93 37 06 	sts	0x0637, r24
		break;
    6dc8:	04 c0       	rjmp	.+8      	; 0x6dd2 <UpdateLimits+0xbe>
		default:
		Config.PowerTriggerActual = 0;
    6dca:	10 92 38 06 	sts	0x0638, r1
    6dce:	10 92 37 06 	sts	0x0637, r1
		break;
	}
			
	// Determine cell count and use to multiply trigger
	if (SystemVoltage >= 2150)										// 6S - 21.5V or at least 3.58V per cell
    6dd2:	20 91 34 05 	lds	r18, 0x0534
    6dd6:	30 91 35 05 	lds	r19, 0x0535
    6dda:	80 91 37 06 	lds	r24, 0x0637
    6dde:	90 91 38 06 	lds	r25, 0x0638
    6de2:	26 36       	cpi	r18, 0x66	; 102
    6de4:	48 e0       	ldi	r20, 0x08	; 8
    6de6:	34 07       	cpc	r19, r20
    6de8:	88 f0       	brcs	.+34     	; 0x6e0c <UpdateLimits+0xf8>
	{
		Config.PowerTriggerActual *= 6;
    6dea:	46 e0       	ldi	r20, 0x06	; 6
    6dec:	48 9f       	mul	r20, r24
    6dee:	90 01       	movw	r18, r0
    6df0:	49 9f       	mul	r20, r25
    6df2:	30 0d       	add	r19, r0
    6df4:	11 24       	eor	r1, r1
    6df6:	30 93 38 06 	sts	0x0638, r19
    6dfa:	20 93 37 06 	sts	0x0637, r18
    6dfe:	77 e0       	ldi	r23, 0x07	; 7
    6e00:	a7 2e       	mov	r10, r23
    6e02:	76 e0       	ldi	r23, 0x06	; 6
    6e04:	b7 2e       	mov	r11, r23

// Update actual limits value with that from the mix setting percentages
// This is only done at start-up and whenever the values are changed
// so as to reduce CPU loop load
void UpdateLimits(void)
{
    6e06:	00 e0       	ldi	r16, 0x00	; 0
    6e08:	10 e0       	ldi	r17, 0x00	; 0
    6e0a:	25 c0       	rjmp	.+74     	; 0x6e56 <UpdateLimits+0x142>
	// Determine cell count and use to multiply trigger
	if (SystemVoltage >= 2150)										// 6S - 21.5V or at least 3.58V per cell
	{
		Config.PowerTriggerActual *= 6;
	}
	else if ((SystemVoltage >= 1730) && (SystemVoltage < 2150))		// 5S 17.3V to 21.5V or 4.32V(4S) to 3.58V(6S) per cell
    6e0c:	a9 01       	movw	r20, r18
    6e0e:	42 5c       	subi	r20, 0xC2	; 194
    6e10:	56 40       	sbci	r21, 0x06	; 6
    6e12:	44 3a       	cpi	r20, 0xA4	; 164
    6e14:	51 40       	sbci	r21, 0x01	; 1
    6e16:	10 f4       	brcc	.+4      	; 0x6e1c <UpdateLimits+0x108>
	{
		Config.PowerTriggerActual *= 5;
    6e18:	45 e0       	ldi	r20, 0x05	; 5
    6e1a:	e8 cf       	rjmp	.-48     	; 0x6dec <UpdateLimits+0xd8>
	}
	else if ((SystemVoltage >= 1300) && (SystemVoltage < 1730))		// 4S 13.0V to 17.3V or 4.33V(3S) to 3.46V(5S) per cell
    6e1c:	a9 01       	movw	r20, r18
    6e1e:	44 51       	subi	r20, 0x14	; 20
    6e20:	55 40       	sbci	r21, 0x05	; 5
    6e22:	4e 3a       	cpi	r20, 0xAE	; 174
    6e24:	51 40       	sbci	r21, 0x01	; 1
    6e26:	28 f4       	brcc	.+10     	; 0x6e32 <UpdateLimits+0x11e>
	{
		Config.PowerTriggerActual *= 4;
    6e28:	88 0f       	add	r24, r24
    6e2a:	99 1f       	adc	r25, r25
    6e2c:	88 0f       	add	r24, r24
    6e2e:	99 1f       	adc	r25, r25
    6e30:	0d c0       	rjmp	.+26     	; 0x6e4c <UpdateLimits+0x138>
	}
	else if ((SystemVoltage >= 900) && (SystemVoltage < 1300))		// 3S 9.0V to 13.0V or 4.5V(2S) to 3.25V(4S) per cell
    6e32:	24 58       	subi	r18, 0x84	; 132
    6e34:	33 40       	sbci	r19, 0x03	; 3
    6e36:	20 39       	cpi	r18, 0x90	; 144
    6e38:	31 40       	sbci	r19, 0x01	; 1
    6e3a:	30 f4       	brcc	.+12     	; 0x6e48 <UpdateLimits+0x134>
	{
		Config.PowerTriggerActual *= 3;
    6e3c:	9c 01       	movw	r18, r24
    6e3e:	22 0f       	add	r18, r18
    6e40:	33 1f       	adc	r19, r19
    6e42:	28 0f       	add	r18, r24
    6e44:	39 1f       	adc	r19, r25
    6e46:	d7 cf       	rjmp	.-82     	; 0x6df6 <UpdateLimits+0xe2>
	}
	else if (SystemVoltage < 900)									// 2S Under 9.0V or 3.0V(3S) per cell
	{
		Config.PowerTriggerActual *= 2;
    6e48:	88 0f       	add	r24, r24
    6e4a:	99 1f       	adc	r25, r25
    6e4c:	90 93 38 06 	sts	0x0638, r25
    6e50:	80 93 37 06 	sts	0x0637, r24
    6e54:	d4 cf       	rjmp	.-88     	; 0x6dfe <UpdateLimits+0xea>

// Update actual limits value with that from the mix setting percentages
// This is only done at start-up and whenever the values are changed
// so as to reduce CPU loop load
void UpdateLimits(void)
{
    6e56:	65 01       	movw	r12, r10
    6e58:	e1 2c       	mov	r14, r1
    6e5a:	f1 2c       	mov	r15, r1
    6e5c:	87 e0       	ldi	r24, 0x07	; 7
    6e5e:	88 2e       	mov	r8, r24
    6e60:	91 2c       	mov	r9, r1
    6e62:	8c 0e       	add	r8, r28
    6e64:	9d 1e       	adc	r9, r29
    6e66:	80 0e       	add	r8, r16
    6e68:	91 1e       	adc	r9, r17
    6e6a:	66 24       	eor	r6, r6
    6e6c:	63 94       	inc	r6
    6e6e:	71 2c       	mov	r7, r1
    6e70:	6c 0e       	add	r6, r28
    6e72:	7d 1e       	adc	r7, r29
    6e74:	60 0e       	add	r6, r16
    6e76:	71 1e       	adc	r7, r17
    6e78:	f4 01       	movw	r30, r8
    6e7a:	ee 0d       	add	r30, r14
    6e7c:	ff 1d       	adc	r31, r15
	// Update I_term input constraints for all profiles
	for (j = 0; j < FLIGHT_MODES; j++)
	{
		for (i = 0; i < NUMBEROFAXIS; i++)
		{
			temp32 	= limits[j][i]; 						// Promote limit %
    6e7e:	a0 81       	ld	r26, Z

			// I-term output (throw). Convert from % to actual count
			// A value of 80,000 results in +/- 1250 or full throw at the output stage
			// This is because the maximum signal value is +/-1250 after division by 64. 1250 * 64 = 80,000
			Config.Raw_I_Limits[j][i] = temp32 * (int32_t)640;	// 80,000 / 125% = 640
    6e80:	bb 27       	eor	r27, r27
    6e82:	a7 fd       	sbrc	r26, 7
    6e84:	b0 95       	com	r27
    6e86:	20 e8       	ldi	r18, 0x80	; 128
    6e88:	32 e0       	ldi	r19, 0x02	; 2
    6e8a:	0e 94 ea 48 	call	0x91d4	; 0x91d4 <__usmulhisi3>
    6e8e:	f6 01       	movw	r30, r12
    6e90:	61 93       	st	Z+, r22
    6e92:	71 93       	st	Z+, r23
    6e94:	81 93       	st	Z+, r24
    6e96:	91 93       	st	Z+, r25
    6e98:	6f 01       	movw	r12, r30
    6e9a:	f3 01       	movw	r30, r6
    6e9c:	ee 0d       	add	r30, r14
    6e9e:	ff 1d       	adc	r31, r15

			// I-term source limits. These have to be different due to the I-term gain setting
			// I-term = (gyro * gain) / 32, so the gyro count for a particular gain and limit is
			// Gyro = (I-term * 32) / gain :) 

			if (gains[j][i] != 0)
    6ea0:	20 81       	ld	r18, Z
    6ea2:	22 23       	and	r18, r18
    6ea4:	b1 f0       	breq	.+44     	; 0x6ed2 <UpdateLimits+0x1be>
			{
				gain32 = gains[j][i];						// Promote gain value
				Config.Raw_I_Constrain[j][i] = (Config.Raw_I_Limits[j][i] << 5) / gain32;
    6ea6:	35 e0       	ldi	r19, 0x05	; 5
    6ea8:	66 0f       	add	r22, r22
    6eaa:	77 1f       	adc	r23, r23
    6eac:	88 1f       	adc	r24, r24
    6eae:	99 1f       	adc	r25, r25
    6eb0:	3a 95       	dec	r19
    6eb2:	d1 f7       	brne	.-12     	; 0x6ea8 <UpdateLimits+0x194>
			// I-term = (gyro * gain) / 32, so the gyro count for a particular gain and limit is
			// Gyro = (I-term * 32) / gain :) 

			if (gains[j][i] != 0)
			{
				gain32 = gains[j][i];						// Promote gain value
    6eb4:	33 27       	eor	r19, r19
    6eb6:	27 fd       	sbrc	r18, 7
    6eb8:	30 95       	com	r19
    6eba:	43 2f       	mov	r20, r19
    6ebc:	53 2f       	mov	r21, r19
				Config.Raw_I_Constrain[j][i] = (Config.Raw_I_Limits[j][i] << 5) / gain32;
    6ebe:	0e 94 ae 48 	call	0x915c	; 0x915c <__divmodsi4>
    6ec2:	d6 01       	movw	r26, r12
    6ec4:	54 96       	adiw	r26, 0x14	; 20
    6ec6:	2d 93       	st	X+, r18
    6ec8:	3d 93       	st	X+, r19
    6eca:	4d 93       	st	X+, r20
    6ecc:	5c 93       	st	X, r21
    6ece:	57 97       	sbiw	r26, 0x17	; 23
    6ed0:	05 c0       	rjmp	.+10     	; 0x6edc <UpdateLimits+0x1c8>
			}
			else 
			{
				Config.Raw_I_Constrain[j][i] = 0;
    6ed2:	f6 01       	movw	r30, r12
    6ed4:	14 8a       	std	Z+20, r1	; 0x14
    6ed6:	15 8a       	std	Z+21, r1	; 0x15
    6ed8:	16 8a       	std	Z+22, r1	; 0x16
    6eda:	17 8a       	std	Z+23, r1	; 0x17
    6edc:	ff ef       	ldi	r31, 0xFF	; 255
    6ede:	ef 1a       	sub	r14, r31
    6ee0:	ff 0a       	sbc	r15, r31
	}

	// Update I_term input constraints for all profiles
	for (j = 0; j < FLIGHT_MODES; j++)
	{
		for (i = 0; i < NUMBEROFAXIS; i++)
    6ee2:	23 e0       	ldi	r18, 0x03	; 3
    6ee4:	e2 16       	cp	r14, r18
    6ee6:	f1 04       	cpc	r15, r1
    6ee8:	39 f6       	brne	.-114    	; 0x6e78 <UpdateLimits+0x164>
    6eea:	4c e0       	ldi	r20, 0x0C	; 12
    6eec:	a4 0e       	add	r10, r20
    6eee:	b1 1c       	adc	r11, r1
    6ef0:	0d 5f       	subi	r16, 0xFD	; 253
    6ef2:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		Config.PowerTriggerActual *= 2;
	}

	// Update I_term input constraints for all profiles
	for (j = 0; j < FLIGHT_MODES; j++)
    6ef4:	06 30       	cpi	r16, 0x06	; 6
    6ef6:	11 05       	cpc	r17, r1
    6ef8:	09 f0       	breq	.+2      	; 0x6efc <UpdateLimits+0x1e8>
    6efa:	ad cf       	rjmp	.-166    	; 0x6e56 <UpdateLimits+0x142>
    6efc:	8b e7       	ldi	r24, 0x7B	; 123
    6efe:	97 e0       	ldi	r25, 0x07	; 7
    6f00:	ea eb       	ldi	r30, 0xBA	; 186
    6f02:	f5 e0       	ldi	r31, 0x05	; 5
    6f04:	63 e8       	ldi	r22, 0x83	; 131
    6f06:	77 e0       	ldi	r23, 0x07	; 7
	}

	// Update travel limits
	for (i = 0; i < MIX_OUTPUTS; i++)
	{
		Config.Limits[i].minimum = scale_percent(Config.min_travel[i]);
    6f08:	dc 01       	movw	r26, r24
    6f0a:	2d 91       	ld	r18, X+
    6f0c:	cd 01       	movw	r24, r26
int16_t scale_percent(int8_t value)
{
	int16_t temp16_1, temp16_2;

	temp16_1 = value; // Promote
	temp16_2 = ((temp16_1 * (int16_t)10) + 3750);
    6f0e:	ba e0       	ldi	r27, 0x0A	; 10
    6f10:	2b 02       	muls	r18, r27
    6f12:	90 01       	movw	r18, r0
    6f14:	11 24       	eor	r1, r1
    6f16:	2a 55       	subi	r18, 0x5A	; 90
    6f18:	31 4f       	sbci	r19, 0xF1	; 241
	}

	// Update travel limits
	for (i = 0; i < MIX_OUTPUTS; i++)
	{
		Config.Limits[i].minimum = scale_percent(Config.min_travel[i]);
    6f1a:	31 83       	std	Z+1, r19	; 0x01
    6f1c:	20 83       	st	Z, r18
		Config.Limits[i].maximum = scale_percent(Config.max_travel[i]);
    6f1e:	db 01       	movw	r26, r22
    6f20:	2d 91       	ld	r18, X+
    6f22:	bd 01       	movw	r22, r26
int16_t scale_percent(int8_t value)
{
	int16_t temp16_1, temp16_2;

	temp16_1 = value; // Promote
	temp16_2 = ((temp16_1 * (int16_t)10) + 3750);
    6f24:	ba e0       	ldi	r27, 0x0A	; 10
    6f26:	2b 02       	muls	r18, r27
    6f28:	90 01       	movw	r18, r0
    6f2a:	11 24       	eor	r1, r1
    6f2c:	2a 55       	subi	r18, 0x5A	; 90
    6f2e:	31 4f       	sbci	r19, 0xF1	; 241

	// Update travel limits
	for (i = 0; i < MIX_OUTPUTS; i++)
	{
		Config.Limits[i].minimum = scale_percent(Config.min_travel[i]);
		Config.Limits[i].maximum = scale_percent(Config.max_travel[i]);
    6f30:	33 83       	std	Z+3, r19	; 0x03
    6f32:	22 83       	std	Z+2, r18	; 0x02
    6f34:	34 96       	adiw	r30, 0x04	; 4
			}
		}
	}

	// Update travel limits
	for (i = 0; i < MIX_OUTPUTS; i++)
    6f36:	25 e0       	ldi	r18, 0x05	; 5
    6f38:	ea 3d       	cpi	r30, 0xDA	; 218
    6f3a:	f2 07       	cpc	r31, r18
    6f3c:	29 f7       	brne	.-54     	; 0x6f08 <UpdateLimits+0x1f4>

	// Adjust trim to match 0.01 degree resolution
	// A value of 127 multiplied by 10 = 1270 which in 1/100ths of a degree equates to 12.7 degrees
	for (i = P1; i <= P2; i++)
	{
		Config.Rolltrim[i] = Config.FlightMode[i].AccRollZeroTrim * 10;
    6f3e:	80 91 e8 05 	lds	r24, 0x05E8
    6f42:	4a e0       	ldi	r20, 0x0A	; 10
    6f44:	84 02       	muls	r24, r20
    6f46:	c0 01       	movw	r24, r0
    6f48:	11 24       	eor	r1, r1
    6f4a:	90 93 b1 07 	sts	0x07B1, r25
    6f4e:	80 93 b0 07 	sts	0x07B0, r24
		Config.Pitchtrim[i] = Config.FlightMode[i].AccPitchZeroTrim * 10;
    6f52:	80 91 ee 05 	lds	r24, 0x05EE
    6f56:	6a e0       	ldi	r22, 0x0A	; 10
    6f58:	86 02       	muls	r24, r22
    6f5a:	c0 01       	movw	r24, r0
    6f5c:	11 24       	eor	r1, r1
    6f5e:	90 93 b5 07 	sts	0x07B5, r25
    6f62:	80 93 b4 07 	sts	0x07B4, r24

	// Adjust trim to match 0.01 degree resolution
	// A value of 127 multiplied by 10 = 1270 which in 1/100ths of a degree equates to 12.7 degrees
	for (i = P1; i <= P2; i++)
	{
		Config.Rolltrim[i] = Config.FlightMode[i].AccRollZeroTrim * 10;
    6f66:	80 91 fa 05 	lds	r24, 0x05FA
    6f6a:	aa e0       	ldi	r26, 0x0A	; 10
    6f6c:	8a 02       	muls	r24, r26
    6f6e:	c0 01       	movw	r24, r0
    6f70:	11 24       	eor	r1, r1
    6f72:	90 93 b3 07 	sts	0x07B3, r25
    6f76:	80 93 b2 07 	sts	0x07B2, r24
		Config.Pitchtrim[i] = Config.FlightMode[i].AccPitchZeroTrim * 10;
    6f7a:	80 91 00 06 	lds	r24, 0x0600
    6f7e:	ba e0       	ldi	r27, 0x0A	; 10
    6f80:	8b 02       	muls	r24, r27
    6f82:	c0 01       	movw	r24, r0
    6f84:	11 24       	eor	r1, r1
    6f86:	90 93 b7 07 	sts	0x07B7, r25
    6f8a:	80 93 b6 07 	sts	0x07B6, r24
	}
}
    6f8e:	2c 96       	adiw	r28, 0x0c	; 12
    6f90:	0f b6       	in	r0, 0x3f	; 63
    6f92:	f8 94       	cli
    6f94:	de bf       	out	0x3e, r29	; 62
    6f96:	0f be       	out	0x3f, r0	; 63
    6f98:	cd bf       	out	0x3d, r28	; 61
    6f9a:	df 91       	pop	r29
    6f9c:	cf 91       	pop	r28
    6f9e:	1f 91       	pop	r17
    6fa0:	0f 91       	pop	r16
    6fa2:	ff 90       	pop	r15
    6fa4:	ef 90       	pop	r14
    6fa6:	df 90       	pop	r13
    6fa8:	cf 90       	pop	r12
    6faa:	bf 90       	pop	r11
    6fac:	af 90       	pop	r10
    6fae:	9f 90       	pop	r9
    6fb0:	8f 90       	pop	r8
    6fb2:	7f 90       	pop	r7
    6fb4:	6f 90       	pop	r6
    6fb6:	08 95       	ret

00006fb8 <UpdateServos>:

// Update servos from the mixer Config.Channel[i].P1_value data, add offsets and enforce travel limits
void UpdateServos(void)
{
    6fb8:	0f 93       	push	r16
    6fba:	1f 93       	push	r17
    6fbc:	cf 93       	push	r28
    6fbe:	df 93       	push	r29
    6fc0:	a3 e4       	ldi	r26, 0x43	; 67
    6fc2:	b6 e0       	ldi	r27, 0x06	; 6
    6fc4:	03 e7       	ldi	r16, 0x73	; 115
    6fc6:	17 e0       	ldi	r17, 0x07	; 7
    6fc8:	ea eb       	ldi	r30, 0xBA	; 186
    6fca:	f5 e0       	ldi	r31, 0x05	; 5
    6fcc:	80 e0       	ldi	r24, 0x00	; 0
    6fce:	90 e0       	ldi	r25, 0x00	; 0
	int16_t temp1 = 0; // Output value

	for (i = 0; i < MIX_OUTPUTS; i++)
	{
		// Servo reverse and trim for the eight physical outputs
		temp1 = Config.Channel[i].P1_value;
    6fd0:	2d 91       	ld	r18, X+
    6fd2:	3c 91       	ld	r19, X
    6fd4:	11 97       	sbiw	r26, 0x01	; 1

		// Reverse this channel for the eight physical outputs
		if ((i <= MIX_OUTPUTS) && (Config.Servo_reverse[i] == ON))
    6fd6:	e8 01       	movw	r28, r16
    6fd8:	49 91       	ld	r20, Y+
    6fda:	8e 01       	movw	r16, r28
    6fdc:	41 30       	cpi	r20, 0x01	; 1
    6fde:	19 f4       	brne	.+6      	; 0x6fe6 <UpdateServos+0x2e>
		{	
			temp1 = -temp1;
    6fe0:	31 95       	neg	r19
    6fe2:	21 95       	neg	r18
    6fe4:	31 09       	sbc	r19, r1
		}

		// Add offset value to restore to system compatible value
		temp1 += 3750;
    6fe6:	2a 55       	subi	r18, 0x5A	; 90
    6fe8:	31 4f       	sbci	r19, 0xF1	; 241

		// Enforce min, max travel limits
		if (temp1 > Config.Limits[i].maximum)
    6fea:	62 81       	ldd	r22, Z+2	; 0x02
    6fec:	73 81       	ldd	r23, Z+3	; 0x03
    6fee:	ac 01       	movw	r20, r24
    6ff0:	44 0f       	add	r20, r20
    6ff2:	55 1f       	adc	r21, r21
    6ff4:	62 17       	cp	r22, r18
    6ff6:	73 07       	cpc	r23, r19
    6ff8:	24 f4       	brge	.+8      	; 0x7002 <UpdateServos+0x4a>
		{
			ServoOut[i] = Config.Limits[i].maximum;
    6ffa:	43 5c       	subi	r20, 0xC3	; 195
    6ffc:	57 4f       	sbci	r21, 0xF7	; 247
    6ffe:	ea 01       	movw	r28, r20
    7000:	08 c0       	rjmp	.+16     	; 0x7012 <UpdateServos+0x5a>
		}

		else if (temp1 < Config.Limits[i].minimum)
    7002:	60 81       	ld	r22, Z
    7004:	71 81       	ldd	r23, Z+1	; 0x01
		{
			ServoOut[i] = Config.Limits[i].minimum;
    7006:	43 5c       	subi	r20, 0xC3	; 195
    7008:	57 4f       	sbci	r21, 0xF7	; 247
    700a:	ea 01       	movw	r28, r20
		if (temp1 > Config.Limits[i].maximum)
		{
			ServoOut[i] = Config.Limits[i].maximum;
		}

		else if (temp1 < Config.Limits[i].minimum)
    700c:	26 17       	cp	r18, r22
    700e:	37 07       	cpc	r19, r23
    7010:	1c f4       	brge	.+6      	; 0x7018 <UpdateServos+0x60>
		{
			ServoOut[i] = Config.Limits[i].minimum;
    7012:	79 83       	std	Y+1, r23	; 0x01
    7014:	68 83       	st	Y, r22
    7016:	02 c0       	rjmp	.+4      	; 0x701c <UpdateServos+0x64>
		}

		// Transfer value to servo
		else
		{
			ServoOut[i] = temp1;
    7018:	39 83       	std	Y+1, r19	; 0x01
    701a:	28 83       	st	Y, r18
    701c:	01 96       	adiw	r24, 0x01	; 1
    701e:	96 96       	adiw	r26, 0x26	; 38
    7020:	34 96       	adiw	r30, 0x04	; 4
void UpdateServos(void)
{
	uint8_t i;
	int16_t temp1 = 0; // Output value

	for (i = 0; i < MIX_OUTPUTS; i++)
    7022:	88 30       	cpi	r24, 0x08	; 8
    7024:	91 05       	cpc	r25, r1
    7026:	a1 f6       	brne	.-88     	; 0x6fd0 <UpdateServos+0x18>
		else
		{
			ServoOut[i] = temp1;
		}
	}
}
    7028:	df 91       	pop	r29
    702a:	cf 91       	pop	r28
    702c:	1f 91       	pop	r17
    702e:	0f 91       	pop	r16
    7030:	08 95       	ret

00007032 <scale32>:

// 32 bit multiply/scale for broken GCC
// Returns immediately if multiplier is 100, 0 or -100
int16_t scale32(int16_t value16, int16_t multiplier16)
{
    7032:	9c 01       	movw	r18, r24
	int32_t temp32 = 0;
	int32_t mult32 = 0;

	// No change if 100% (no scaling)
	if (multiplier16 == 100)
    7034:	64 36       	cpi	r22, 0x64	; 100
    7036:	71 05       	cpc	r23, r1
    7038:	e9 f0       	breq	.+58     	; 0x7074 <scale32+0x42>
	{
		return value16;
	}

	// Reverse if -100%
	else if (multiplier16 == -100)
    703a:	6c 39       	cpi	r22, 0x9C	; 156
    703c:	8f ef       	ldi	r24, 0xFF	; 255
    703e:	78 07       	cpc	r23, r24
    7040:	29 f4       	brne	.+10     	; 0x704c <scale32+0x1a>
	{
		return -value16;	
    7042:	88 27       	eor	r24, r24
    7044:	99 27       	eor	r25, r25
    7046:	82 1b       	sub	r24, r18
    7048:	93 0b       	sbc	r25, r19
    704a:	08 95       	ret
	}

	// Zero if 0%
	else if (multiplier16 == 0)
    704c:	61 15       	cp	r22, r1
    704e:	71 05       	cpc	r23, r1
    7050:	71 f0       	breq	.+28     	; 0x706e <scale32+0x3c>
	else
	{
		// GCC is broken bad regarding multiplying 32 bit numbers, hence all this crap...
		mult32 = multiplier16;
		temp32 = value16;
		temp32 = temp32 * mult32;
    7052:	db 01       	movw	r26, r22
    7054:	0e 94 d3 48 	call	0x91a6	; 0x91a6 <__mulhisi3>

		// Divide by 100 and round to get scaled value
		temp32 = (temp32 + (int32_t)50) / (int32_t)100; // Constants need to be cast up to 32 bits
    7058:	6e 5c       	subi	r22, 0xCE	; 206
    705a:	7f 4f       	sbci	r23, 0xFF	; 255
    705c:	8f 4f       	sbci	r24, 0xFF	; 255
    705e:	9f 4f       	sbci	r25, 0xFF	; 255
    7060:	24 e6       	ldi	r18, 0x64	; 100
    7062:	30 e0       	ldi	r19, 0x00	; 0
    7064:	40 e0       	ldi	r20, 0x00	; 0
    7066:	50 e0       	ldi	r21, 0x00	; 0
    7068:	0e 94 ae 48 	call	0x915c	; 0x915c <__divmodsi4>
    706c:	03 c0       	rjmp	.+6      	; 0x7074 <scale32+0x42>
	}

	// Zero if 0%
	else if (multiplier16 == 0)
	{
		return 0;	
    706e:	80 e0       	ldi	r24, 0x00	; 0
    7070:	90 e0       	ldi	r25, 0x00	; 0
    7072:	08 95       	ret
	int32_t mult32 = 0;

	// No change if 100% (no scaling)
	if (multiplier16 == 100)
	{
		return value16;
    7074:	c9 01       	movw	r24, r18
		temp32 = (temp32 + (int32_t)50) / (int32_t)100; // Constants need to be cast up to 32 bits
		value16 = (int16_t)temp32;
	}

	return value16;
}
    7076:	08 95       	ret

00007078 <ProcessMixer>:
//************************************************************
// Code
//************************************************************

void ProcessMixer(void)
{
    7078:	2f 92       	push	r2
    707a:	3f 92       	push	r3
    707c:	4f 92       	push	r4
    707e:	5f 92       	push	r5
    7080:	6f 92       	push	r6
    7082:	7f 92       	push	r7
    7084:	8f 92       	push	r8
    7086:	9f 92       	push	r9
    7088:	af 92       	push	r10
    708a:	bf 92       	push	r11
    708c:	cf 92       	push	r12
    708e:	df 92       	push	r13
    7090:	ef 92       	push	r14
    7092:	ff 92       	push	r15
    7094:	0f 93       	push	r16
    7096:	1f 93       	push	r17
    7098:	cf 93       	push	r28
    709a:	df 93       	push	r29
    709c:	cd b7       	in	r28, 0x3d	; 61
    709e:	de b7       	in	r29, 0x3e	; 62
    70a0:	e2 97       	sbiw	r28, 0x32	; 50
    70a2:	0f b6       	in	r0, 0x3f	; 63
    70a4:	f8 94       	cli
    70a6:	de bf       	out	0x3e, r29	; 62
    70a8:	0f be       	out	0x3f, r0	; 63
    70aa:	cd bf       	out	0x3d, r28	; 61
	int16_t	Step1 = 0;
	int16_t	Step2 = 0;
	int8_t	itemp8 = 0;

	// Copy the sensor data to an array for easy indexing - acc data is from accSmooth, increased to reasonable rates
	temp1 = (int16_t)accSmooth[ROLL] << 3;
    70ac:	60 91 99 05 	lds	r22, 0x0599
    70b0:	70 91 9a 05 	lds	r23, 0x059A
    70b4:	80 91 9b 05 	lds	r24, 0x059B
    70b8:	90 91 9c 05 	lds	r25, 0x059C
    70bc:	0e 94 1a 47 	call	0x8e34	; 0x8e34 <__fixsfsi>
    70c0:	8b 01       	movw	r16, r22
    70c2:	83 e0       	ldi	r24, 0x03	; 3
    70c4:	00 0f       	add	r16, r16
    70c6:	11 1f       	adc	r17, r17
    70c8:	8a 95       	dec	r24
    70ca:	e1 f7       	brne	.-8      	; 0x70c4 <ProcessMixer+0x4c>
	temp2 = (int16_t)accSmooth[PITCH] << 3;
    70cc:	60 91 9d 05 	lds	r22, 0x059D
    70d0:	70 91 9e 05 	lds	r23, 0x059E
    70d4:	80 91 9f 05 	lds	r24, 0x059F
    70d8:	90 91 a0 05 	lds	r25, 0x05A0
    70dc:	0e 94 1a 47 	call	0x8e34	; 0x8e34 <__fixsfsi>
    70e0:	93 e0       	ldi	r25, 0x03	; 3
    70e2:	66 0f       	add	r22, r22
    70e4:	77 1f       	adc	r23, r23
    70e6:	9a 95       	dec	r25
    70e8:	e1 f7       	brne	.-8      	; 0x70e2 <ProcessMixer+0x6a>
	int16_t	SensorDataP1[7] = {PID_Gyros[P1][ROLL], PID_Gyros[P1][PITCH], PID_Gyros[P1][YAW], temp1, temp2, PID_ACCs[P1][ROLL], PID_ACCs[P1][PITCH]};
    70ea:	40 90 11 08 	lds	r4, 0x0811
    70ee:	50 90 12 08 	lds	r5, 0x0812
    70f2:	58 8a       	std	Y+16, r5	; 0x10
    70f4:	4f 86       	std	Y+15, r4	; 0x0f
    70f6:	20 91 13 08 	lds	r18, 0x0813
    70fa:	30 91 14 08 	lds	r19, 0x0814
    70fe:	38 a3       	std	Y+32, r19	; 0x20
    7100:	2f 8f       	std	Y+31, r18	; 0x1f
    7102:	3a 8b       	std	Y+18, r19	; 0x12
    7104:	29 8b       	std	Y+17, r18	; 0x11
    7106:	40 91 15 08 	lds	r20, 0x0815
    710a:	50 91 16 08 	lds	r21, 0x0816
    710e:	5a a3       	std	Y+34, r21	; 0x22
    7110:	49 a3       	std	Y+33, r20	; 0x21
    7112:	5c 8b       	std	Y+20, r21	; 0x14
    7114:	4b 8b       	std	Y+19, r20	; 0x13
    7116:	1e 8b       	std	Y+22, r17	; 0x16
    7118:	0d 8b       	std	Y+21, r16	; 0x15
    711a:	78 8f       	std	Y+24, r23	; 0x18
    711c:	6f 8b       	std	Y+23, r22	; 0x17
    711e:	20 91 1d 08 	lds	r18, 0x081D
    7122:	30 91 1e 08 	lds	r19, 0x081E
    7126:	3c a3       	std	Y+36, r19	; 0x24
    7128:	2b a3       	std	Y+35, r18	; 0x23
    712a:	3a 8f       	std	Y+26, r19	; 0x1a
    712c:	29 8f       	std	Y+25, r18	; 0x19
    712e:	40 91 1f 08 	lds	r20, 0x081F
    7132:	50 91 20 08 	lds	r21, 0x0820
    7136:	5e a3       	std	Y+38, r21	; 0x26
    7138:	4d a3       	std	Y+37, r20	; 0x25
    713a:	5c 8f       	std	Y+28, r21	; 0x1c
    713c:	4b 8f       	std	Y+27, r20	; 0x1b
	int16_t	SensorDataP2[7] = {PID_Gyros[P2][ROLL], PID_Gyros[P2][PITCH], PID_Gyros[P2][YAW], temp1, temp2, PID_ACCs[P2][ROLL], PID_ACCs[P2][PITCH]}; 
    713e:	20 91 17 08 	lds	r18, 0x0817
    7142:	30 91 18 08 	lds	r19, 0x0818
    7146:	38 a7       	std	Y+40, r19	; 0x28
    7148:	2f a3       	std	Y+39, r18	; 0x27
    714a:	3a 83       	std	Y+2, r19	; 0x02
    714c:	29 83       	std	Y+1, r18	; 0x01
    714e:	40 91 19 08 	lds	r20, 0x0819
    7152:	50 91 1a 08 	lds	r21, 0x081A
    7156:	5a a7       	std	Y+42, r21	; 0x2a
    7158:	49 a7       	std	Y+41, r20	; 0x29
    715a:	5c 83       	std	Y+4, r21	; 0x04
    715c:	4b 83       	std	Y+3, r20	; 0x03
    715e:	20 90 1b 08 	lds	r2, 0x081B
    7162:	30 90 1c 08 	lds	r3, 0x081C
    7166:	3e 82       	std	Y+6, r3	; 0x06
    7168:	2d 82       	std	Y+5, r2	; 0x05
    716a:	18 87       	std	Y+8, r17	; 0x08
    716c:	0f 83       	std	Y+7, r16	; 0x07
    716e:	7a 87       	std	Y+10, r23	; 0x0a
    7170:	69 87       	std	Y+9, r22	; 0x09
    7172:	a0 90 23 08 	lds	r10, 0x0823
    7176:	b0 90 24 08 	lds	r11, 0x0824
    717a:	bc 86       	std	Y+12, r11	; 0x0c
    717c:	ab 86       	std	Y+11, r10	; 0x0b
    717e:	80 90 25 08 	lds	r8, 0x0825
    7182:	90 90 26 08 	lds	r9, 0x0826
    7186:	9e 86       	std	Y+14, r9	; 0x0e
    7188:	8d 86       	std	Y+13, r8	; 0x0d
		//************************************************************
		// Mix in gyros
		//************************************************************ 

		// P1 gyros
		if (Transition_state < TRANS_P2)
    718a:	50 91 25 05 	lds	r21, 0x0525
    718e:	5d 8f       	std	Y+29, r21	; 0x1d
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P1_throttle_volume < 0 )
					{
						P1_solution = P1_solution + PID_ACCs[P1][YAW];			// Reverse if volume negative
    7190:	20 91 21 08 	lds	r18, 0x0821
    7194:	30 91 22 08 	lds	r19, 0x0822
    7198:	3c a7       	std	Y+44, r19	; 0x2c
    719a:	2b a7       	std	Y+43, r18	; 0x2b
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P2_throttle_volume < 0 )
					{
						P2_solution = P2_solution + PID_ACCs[P2][YAW];			// Reverse if volume negative
    719c:	40 91 27 08 	lds	r20, 0x0827
    71a0:	50 91 28 08 	lds	r21, 0x0828
    71a4:	5e a7       	std	Y+46, r21	; 0x2e
    71a6:	4d a7       	std	Y+45, r20	; 0x2d
    71a8:	c1 2c       	mov	r12, r1
    71aa:	d1 2c       	mov	r13, r1
					{
						P2_solution = P2_solution + PID_Gyros[P2][ROLL];		// Reverse if volume negative
					}
					else
					{
						P2_solution = P2_solution - PID_Gyros[P2][ROLL];
    71ac:	2f a1       	ldd	r18, Y+39	; 0x27
    71ae:	38 a5       	ldd	r19, Y+40	; 0x28
    71b0:	31 95       	neg	r19
    71b2:	21 95       	neg	r18
    71b4:	31 09       	sbc	r19, r1
    71b6:	38 ab       	std	Y+48, r19	; 0x30
    71b8:	2f a7       	std	Y+47, r18	; 0x2f
					{
						P1_solution = P1_solution + PID_Gyros[P1][ROLL];		// Reverse if volume negative
					}
					else
					{
						P1_solution = P1_solution - PID_Gyros[P1][ROLL];
    71ba:	44 27       	eor	r20, r20
    71bc:	55 27       	eor	r21, r21
    71be:	44 19       	sub	r20, r4
    71c0:	55 09       	sbc	r21, r5
    71c2:	5a ab       	std	Y+50, r21	; 0x32
    71c4:	49 ab       	std	Y+49, r20	; 0x31
		//************************************************************
		// Mix in gyros
		//************************************************************ 

		// P1 gyros
		if (Transition_state < TRANS_P2)
    71c6:	5d 8d       	ldd	r21, Y+29	; 0x1d
    71c8:	59 30       	cpi	r21, 0x09	; 9
    71ca:	08 f0       	brcs	.+2      	; 0x71ce <ProcessMixer+0x156>
    71cc:	79 c0       	rjmp	.+242    	; 0x72c0 <ProcessMixer+0x248>
    71ce:	86 01       	movw	r16, r12
    71d0:	0f 54       	subi	r16, 0x4F	; 79
    71d2:	1a 4f       	sbci	r17, 0xFA	; 250
    71d4:	f8 01       	movw	r30, r16
    71d6:	ec 55       	subi	r30, 0x5C	; 92
    71d8:	ff 4f       	sbci	r31, 0xFF	; 255
		{
			switch (Config.Channel[i].P1_Roll_gyro) 
    71da:	80 81       	ld	r24, Z
    71dc:	81 30       	cpi	r24, 0x01	; 1
    71de:	91 f0       	breq	.+36     	; 0x7204 <ProcessMixer+0x18c>
    71e0:	82 30       	cpi	r24, 0x02	; 2
    71e2:	c9 f4       	brne	.+50     	; 0x7216 <ProcessMixer+0x19e>
    71e4:	f8 01       	movw	r30, r16
    71e6:	e2 56       	subi	r30, 0x62	; 98
    71e8:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P1_solution = P1_solution - PID_Gyros[P1][ROLL];
					}
					break;
				case SCALE:
					P1_solution = P1_solution - scale32(PID_Gyros[P1][ROLL], Config.Channel[i].P1_aileron_volume * 5); 
    71ea:	60 81       	ld	r22, Z
    71ec:	85 e0       	ldi	r24, 0x05	; 5
    71ee:	68 02       	muls	r22, r24
    71f0:	b0 01       	movw	r22, r0
    71f2:	11 24       	eor	r1, r1
    71f4:	c2 01       	movw	r24, r4
    71f6:	0e 94 19 38 	call	0x7032	; 0x7032 <scale32>
    71fa:	ee 24       	eor	r14, r14
    71fc:	ff 24       	eor	r15, r15
    71fe:	e8 1a       	sub	r14, r24
    7200:	f9 0a       	sbc	r15, r25
					break;
    7202:	0d c0       	rjmp	.+26     	; 0x721e <ProcessMixer+0x1a6>
    7204:	f8 01       	movw	r30, r16
    7206:	e2 56       	subi	r30, 0x62	; 98
    7208:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P1_Roll_gyro) 
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P1_aileron_volume < 0 )
    720a:	80 81       	ld	r24, Z
    720c:	87 fd       	sbrc	r24, 7
    720e:	06 c0       	rjmp	.+12     	; 0x721c <ProcessMixer+0x1a4>
					{
						P1_solution = P1_solution + PID_Gyros[P1][ROLL];		// Reverse if volume negative
					}
					else
					{
						P1_solution = P1_solution - PID_Gyros[P1][ROLL];
    7210:	e9 a8       	ldd	r14, Y+49	; 0x31
    7212:	fa a8       	ldd	r15, Y+50	; 0x32
    7214:	04 c0       	rjmp	.+8      	; 0x721e <ProcessMixer+0x1a6>
	{
		//************************************************************
		// Zero each channel value to start
		//************************************************************

		P1_solution = 0;
    7216:	e1 2c       	mov	r14, r1
    7218:	f1 2c       	mov	r15, r1
    721a:	01 c0       	rjmp	.+2      	; 0x721e <ProcessMixer+0x1a6>
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P1_aileron_volume < 0 )
					{
						P1_solution = P1_solution + PID_Gyros[P1][ROLL];		// Reverse if volume negative
    721c:	72 01       	movw	r14, r4
    721e:	f8 01       	movw	r30, r16
    7220:	ea 55       	subi	r30, 0x5A	; 90
    7222:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				default:
					break;	
			}

			switch (Config.Channel[i].P1_Pitch_gyro)
    7224:	80 81       	ld	r24, Z
    7226:	81 30       	cpi	r24, 0x01	; 1
    7228:	89 f0       	breq	.+34     	; 0x724c <ProcessMixer+0x1d4>
    722a:	82 30       	cpi	r24, 0x02	; 2
    722c:	f1 f4       	brne	.+60     	; 0x726a <ProcessMixer+0x1f2>
    722e:	f8 01       	movw	r30, r16
    7230:	e0 56       	subi	r30, 0x60	; 96
    7232:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P1_solution = P1_solution + PID_Gyros[P1][PITCH];
					}
					break;
				case SCALE:
					P1_solution = P1_solution - scale32(PID_Gyros[P1][PITCH], Config.Channel[i].P1_elevator_volume * 5);
    7234:	60 81       	ld	r22, Z
    7236:	55 e0       	ldi	r21, 0x05	; 5
    7238:	65 02       	muls	r22, r21
    723a:	b0 01       	movw	r22, r0
    723c:	11 24       	eor	r1, r1
    723e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    7240:	98 a1       	ldd	r25, Y+32	; 0x20
    7242:	0e 94 19 38 	call	0x7032	; 0x7032 <scale32>
    7246:	e8 1a       	sub	r14, r24
    7248:	f9 0a       	sbc	r15, r25
					break;
    724a:	0f c0       	rjmp	.+30     	; 0x726a <ProcessMixer+0x1f2>
    724c:	f8 01       	movw	r30, r16
    724e:	e0 56       	subi	r30, 0x60	; 96
    7250:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P1_Pitch_gyro)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P1_elevator_volume < 0 )
    7252:	80 81       	ld	r24, Z
    7254:	87 ff       	sbrs	r24, 7
    7256:	05 c0       	rjmp	.+10     	; 0x7262 <ProcessMixer+0x1ea>
					{
						P1_solution = P1_solution - PID_Gyros[P1][PITCH];		// Reverse if volume negative
    7258:	2f 8d       	ldd	r18, Y+31	; 0x1f
    725a:	38 a1       	ldd	r19, Y+32	; 0x20
    725c:	e2 1a       	sub	r14, r18
    725e:	f3 0a       	sbc	r15, r19
    7260:	04 c0       	rjmp	.+8      	; 0x726a <ProcessMixer+0x1f2>
					}
					else
					{
						P1_solution = P1_solution + PID_Gyros[P1][PITCH];
    7262:	4f 8d       	ldd	r20, Y+31	; 0x1f
    7264:	58 a1       	ldd	r21, Y+32	; 0x20
    7266:	e4 0e       	add	r14, r20
    7268:	f5 1e       	adc	r15, r21
    726a:	f8 01       	movw	r30, r16
    726c:	e8 55       	subi	r30, 0x58	; 88
    726e:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				default:
					break;
			}

			switch (Config.Channel[i].P1_Yaw_gyro)
    7270:	80 81       	ld	r24, Z
    7272:	81 30       	cpi	r24, 0x01	; 1
    7274:	89 f0       	breq	.+34     	; 0x7298 <ProcessMixer+0x220>
    7276:	82 30       	cpi	r24, 0x02	; 2
    7278:	f1 f4       	brne	.+60     	; 0x72b6 <ProcessMixer+0x23e>
    727a:	f8 01       	movw	r30, r16
    727c:	ee 55       	subi	r30, 0x5E	; 94
    727e:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P1_solution = P1_solution + PID_Gyros[P1][YAW];
					}
					break;
				case SCALE:
					P1_solution = P1_solution - scale32(PID_Gyros[P1][YAW], Config.Channel[i].P1_rudder_volume * 5);
    7280:	60 81       	ld	r22, Z
    7282:	55 e0       	ldi	r21, 0x05	; 5
    7284:	65 02       	muls	r22, r21
    7286:	b0 01       	movw	r22, r0
    7288:	11 24       	eor	r1, r1
    728a:	89 a1       	ldd	r24, Y+33	; 0x21
    728c:	9a a1       	ldd	r25, Y+34	; 0x22
    728e:	0e 94 19 38 	call	0x7032	; 0x7032 <scale32>
    7292:	e8 1a       	sub	r14, r24
    7294:	f9 0a       	sbc	r15, r25
					break;
    7296:	0f c0       	rjmp	.+30     	; 0x72b6 <ProcessMixer+0x23e>
    7298:	f8 01       	movw	r30, r16
    729a:	ee 55       	subi	r30, 0x5E	; 94
    729c:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P1_Yaw_gyro)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P1_rudder_volume < 0 )
    729e:	80 81       	ld	r24, Z
    72a0:	87 ff       	sbrs	r24, 7
    72a2:	05 c0       	rjmp	.+10     	; 0x72ae <ProcessMixer+0x236>
					{
						P1_solution = P1_solution - PID_Gyros[P1][YAW];			// Reverse if volume negative
    72a4:	29 a1       	ldd	r18, Y+33	; 0x21
    72a6:	3a a1       	ldd	r19, Y+34	; 0x22
    72a8:	e2 1a       	sub	r14, r18
    72aa:	f3 0a       	sbc	r15, r19
    72ac:	04 c0       	rjmp	.+8      	; 0x72b6 <ProcessMixer+0x23e>
					}
					else
					{
						P1_solution = P1_solution + PID_Gyros[P1][YAW];
    72ae:	49 a1       	ldd	r20, Y+33	; 0x21
    72b0:	5a a1       	ldd	r21, Y+34	; 0x22
    72b2:	e4 0e       	add	r14, r20
    72b4:	f5 1e       	adc	r15, r21
					break;
			}
		}

		// P2 gyros
		if (Transition_state > TRANS_P1)
    72b6:	2d 8d       	ldd	r18, Y+29	; 0x1d
    72b8:	22 23       	and	r18, r18
    72ba:	09 f4       	brne	.+2      	; 0x72be <ProcessMixer+0x246>
    72bc:	7a c0       	rjmp	.+244    	; 0x73b2 <ProcessMixer+0x33a>
    72be:	02 c0       	rjmp	.+4      	; 0x72c4 <ProcessMixer+0x24c>
	{
		//************************************************************
		// Zero each channel value to start
		//************************************************************

		P1_solution = 0;
    72c0:	e1 2c       	mov	r14, r1
    72c2:	f1 2c       	mov	r15, r1
    72c4:	a6 01       	movw	r20, r12
    72c6:	4f 54       	subi	r20, 0x4F	; 79
    72c8:	5a 4f       	sbci	r21, 0xFA	; 250
    72ca:	3a 01       	movw	r6, r20
    72cc:	fa 01       	movw	r30, r20
    72ce:	eb 55       	subi	r30, 0x5B	; 91
    72d0:	ff 4f       	sbci	r31, 0xFF	; 255
		}

		// P2 gyros
		if (Transition_state > TRANS_P1)
		{
			switch (Config.Channel[i].P2_Roll_gyro)
    72d2:	80 81       	ld	r24, Z
    72d4:	81 30       	cpi	r24, 0x01	; 1
    72d6:	99 f0       	breq	.+38     	; 0x72fe <ProcessMixer+0x286>
    72d8:	82 30       	cpi	r24, 0x02	; 2
    72da:	d1 f4       	brne	.+52     	; 0x7310 <ProcessMixer+0x298>
    72dc:	fa 01       	movw	r30, r20
    72de:	e1 56       	subi	r30, 0x61	; 97
    72e0:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P2_solution = P2_solution - PID_Gyros[P2][ROLL];
					}
					break;
				case SCALE:
					P2_solution = P2_solution - scale32(PID_Gyros[P2][ROLL], Config.Channel[i].P2_aileron_volume * 5);
    72e2:	60 81       	ld	r22, Z
    72e4:	55 e0       	ldi	r21, 0x05	; 5
    72e6:	65 02       	muls	r22, r21
    72e8:	b0 01       	movw	r22, r0
    72ea:	11 24       	eor	r1, r1
    72ec:	8f a1       	ldd	r24, Y+39	; 0x27
    72ee:	98 a5       	ldd	r25, Y+40	; 0x28
    72f0:	0e 94 19 38 	call	0x7032	; 0x7032 <scale32>
    72f4:	00 27       	eor	r16, r16
    72f6:	11 27       	eor	r17, r17
    72f8:	08 1b       	sub	r16, r24
    72fa:	19 0b       	sbc	r17, r25
					break;
    72fc:	0e c0       	rjmp	.+28     	; 0x731a <ProcessMixer+0x2a2>
    72fe:	fa 01       	movw	r30, r20
    7300:	e1 56       	subi	r30, 0x61	; 97
    7302:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P2_Roll_gyro)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P2_aileron_volume < 0 )
    7304:	80 81       	ld	r24, Z
    7306:	87 fd       	sbrc	r24, 7
    7308:	06 c0       	rjmp	.+12     	; 0x7316 <ProcessMixer+0x29e>
					{
						P2_solution = P2_solution + PID_Gyros[P2][ROLL];		// Reverse if volume negative
					}
					else
					{
						P2_solution = P2_solution - PID_Gyros[P2][ROLL];
    730a:	0f a5       	ldd	r16, Y+47	; 0x2f
    730c:	18 a9       	ldd	r17, Y+48	; 0x30
    730e:	05 c0       	rjmp	.+10     	; 0x731a <ProcessMixer+0x2a2>
		//************************************************************
		// Zero each channel value to start
		//************************************************************

		P1_solution = 0;
		P2_solution = 0;
    7310:	00 e0       	ldi	r16, 0x00	; 0
    7312:	10 e0       	ldi	r17, 0x00	; 0
    7314:	02 c0       	rjmp	.+4      	; 0x731a <ProcessMixer+0x2a2>
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P2_aileron_volume < 0 )
					{
						P2_solution = P2_solution + PID_Gyros[P2][ROLL];		// Reverse if volume negative
    7316:	0f a1       	ldd	r16, Y+39	; 0x27
    7318:	18 a5       	ldd	r17, Y+40	; 0x28
    731a:	f3 01       	movw	r30, r6
    731c:	e9 55       	subi	r30, 0x59	; 89
    731e:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				default:
					break;
			}

			switch (Config.Channel[i].P2_Pitch_gyro)
    7320:	80 81       	ld	r24, Z
    7322:	81 30       	cpi	r24, 0x01	; 1
    7324:	89 f0       	breq	.+34     	; 0x7348 <ProcessMixer+0x2d0>
    7326:	82 30       	cpi	r24, 0x02	; 2
    7328:	f1 f4       	brne	.+60     	; 0x7366 <ProcessMixer+0x2ee>
    732a:	f3 01       	movw	r30, r6
    732c:	ef 55       	subi	r30, 0x5F	; 95
    732e:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P2_solution = P2_solution + PID_Gyros[P2][PITCH];
					}
					break;
				case SCALE:
					P2_solution = P2_solution - scale32(PID_Gyros[P2][PITCH], Config.Channel[i].P2_elevator_volume * 5);
    7330:	60 81       	ld	r22, Z
    7332:	55 e0       	ldi	r21, 0x05	; 5
    7334:	65 02       	muls	r22, r21
    7336:	b0 01       	movw	r22, r0
    7338:	11 24       	eor	r1, r1
    733a:	89 a5       	ldd	r24, Y+41	; 0x29
    733c:	9a a5       	ldd	r25, Y+42	; 0x2a
    733e:	0e 94 19 38 	call	0x7032	; 0x7032 <scale32>
    7342:	08 1b       	sub	r16, r24
    7344:	19 0b       	sbc	r17, r25
					break;
    7346:	0f c0       	rjmp	.+30     	; 0x7366 <ProcessMixer+0x2ee>
    7348:	f3 01       	movw	r30, r6
    734a:	ef 55       	subi	r30, 0x5F	; 95
    734c:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P2_Pitch_gyro)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P2_elevator_volume < 0 )
    734e:	80 81       	ld	r24, Z
    7350:	87 ff       	sbrs	r24, 7
    7352:	05 c0       	rjmp	.+10     	; 0x735e <ProcessMixer+0x2e6>
					{
						P2_solution = P2_solution - PID_Gyros[P2][PITCH];		// Reverse if volume negative
    7354:	29 a5       	ldd	r18, Y+41	; 0x29
    7356:	3a a5       	ldd	r19, Y+42	; 0x2a
    7358:	02 1b       	sub	r16, r18
    735a:	13 0b       	sbc	r17, r19
    735c:	04 c0       	rjmp	.+8      	; 0x7366 <ProcessMixer+0x2ee>
					}
					else
					{
						P2_solution = P2_solution + PID_Gyros[P2][PITCH];
    735e:	49 a5       	ldd	r20, Y+41	; 0x29
    7360:	5a a5       	ldd	r21, Y+42	; 0x2a
    7362:	04 0f       	add	r16, r20
    7364:	15 1f       	adc	r17, r21
    7366:	f3 01       	movw	r30, r6
    7368:	e7 55       	subi	r30, 0x57	; 87
    736a:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				default:
					break;
			}

			switch (Config.Channel[i].P2_Yaw_gyro)
    736c:	80 81       	ld	r24, Z
    736e:	81 30       	cpi	r24, 0x01	; 1
    7370:	81 f0       	breq	.+32     	; 0x7392 <ProcessMixer+0x31a>
    7372:	82 30       	cpi	r24, 0x02	; 2
    7374:	c9 f4       	brne	.+50     	; 0x73a8 <ProcessMixer+0x330>
    7376:	f3 01       	movw	r30, r6
    7378:	ed 55       	subi	r30, 0x5D	; 93
    737a:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P2_solution = P2_solution + PID_Gyros[P2][YAW];
					}
					break;
				case SCALE:
					P2_solution = P2_solution - scale32(PID_Gyros[P2][YAW], Config.Channel[i].P2_rudder_volume * 5);
    737c:	60 81       	ld	r22, Z
    737e:	85 e0       	ldi	r24, 0x05	; 5
    7380:	68 02       	muls	r22, r24
    7382:	b0 01       	movw	r22, r0
    7384:	11 24       	eor	r1, r1
    7386:	c1 01       	movw	r24, r2
    7388:	0e 94 19 38 	call	0x7032	; 0x7032 <scale32>
    738c:	08 1b       	sub	r16, r24
    738e:	19 0b       	sbc	r17, r25
					break;
    7390:	0b c0       	rjmp	.+22     	; 0x73a8 <ProcessMixer+0x330>
    7392:	f3 01       	movw	r30, r6
    7394:	ed 55       	subi	r30, 0x5D	; 93
    7396:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P2_Yaw_gyro)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P2_rudder_volume < 0 )
    7398:	80 81       	ld	r24, Z
    739a:	87 ff       	sbrs	r24, 7
    739c:	03 c0       	rjmp	.+6      	; 0x73a4 <ProcessMixer+0x32c>
					{
						P2_solution = P2_solution - PID_Gyros[P2][YAW];			// Reverse if volume negative
    739e:	02 19       	sub	r16, r2
    73a0:	13 09       	sbc	r17, r3
    73a2:	02 c0       	rjmp	.+4      	; 0x73a8 <ProcessMixer+0x330>
					}
					else
					{
						P2_solution = P2_solution + PID_Gyros[P2][YAW];
    73a4:	02 0d       	add	r16, r2
    73a6:	13 1d       	adc	r17, r3

		//************************************************************
		// Mix in accelerometers
		//************************************************************ 
		// P1
		if (Transition_state < TRANS_P2)
    73a8:	2d 8d       	ldd	r18, Y+29	; 0x1d
    73aa:	29 30       	cpi	r18, 0x09	; 9
    73ac:	08 f0       	brcs	.+2      	; 0x73b0 <ProcessMixer+0x338>
    73ae:	7d c0       	rjmp	.+250    	; 0x74aa <ProcessMixer+0x432>
    73b0:	02 c0       	rjmp	.+4      	; 0x73b6 <ProcessMixer+0x33e>
		//************************************************************
		// Zero each channel value to start
		//************************************************************

		P1_solution = 0;
		P2_solution = 0;
    73b2:	00 e0       	ldi	r16, 0x00	; 0
    73b4:	10 e0       	ldi	r17, 0x00	; 0
    73b6:	a6 01       	movw	r20, r12
    73b8:	4f 54       	subi	r20, 0x4F	; 79
    73ba:	5a 4f       	sbci	r21, 0xFA	; 250
    73bc:	3a 01       	movw	r6, r20
    73be:	fa 01       	movw	r30, r20
    73c0:	e6 55       	subi	r30, 0x56	; 86
    73c2:	ff 4f       	sbci	r31, 0xFF	; 255
		// Mix in accelerometers
		//************************************************************ 
		// P1
		if (Transition_state < TRANS_P2)
		{
			switch (Config.Channel[i].P1_Roll_acc)
    73c4:	80 81       	ld	r24, Z
    73c6:	81 30       	cpi	r24, 0x01	; 1
    73c8:	89 f0       	breq	.+34     	; 0x73ec <ProcessMixer+0x374>
    73ca:	82 30       	cpi	r24, 0x02	; 2
    73cc:	f1 f4       	brne	.+60     	; 0x740a <ProcessMixer+0x392>
    73ce:	fa 01       	movw	r30, r20
    73d0:	e2 56       	subi	r30, 0x62	; 98
    73d2:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P1_solution = P1_solution - PID_ACCs[P1][ROLL];			// or simply add
					}
					break;
				case SCALE:
					P1_solution = P1_solution - scale32(PID_ACCs[P1][ROLL], Config.Channel[i].P1_aileron_volume * 5);
    73d4:	60 81       	ld	r22, Z
    73d6:	55 e0       	ldi	r21, 0x05	; 5
    73d8:	65 02       	muls	r22, r21
    73da:	b0 01       	movw	r22, r0
    73dc:	11 24       	eor	r1, r1
    73de:	8b a1       	ldd	r24, Y+35	; 0x23
    73e0:	9c a1       	ldd	r25, Y+36	; 0x24
    73e2:	0e 94 19 38 	call	0x7032	; 0x7032 <scale32>
    73e6:	e8 1a       	sub	r14, r24
    73e8:	f9 0a       	sbc	r15, r25
					break;
    73ea:	0f c0       	rjmp	.+30     	; 0x740a <ProcessMixer+0x392>
    73ec:	fa 01       	movw	r30, r20
    73ee:	e2 56       	subi	r30, 0x62	; 98
    73f0:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P1_Roll_acc)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P1_aileron_volume < 0 )
    73f2:	80 81       	ld	r24, Z
    73f4:	87 ff       	sbrs	r24, 7
    73f6:	05 c0       	rjmp	.+10     	; 0x7402 <ProcessMixer+0x38a>
					{
						P1_solution = P1_solution + PID_ACCs[P1][ROLL];			// Reverse if volume negative
    73f8:	2b a1       	ldd	r18, Y+35	; 0x23
    73fa:	3c a1       	ldd	r19, Y+36	; 0x24
    73fc:	e2 0e       	add	r14, r18
    73fe:	f3 1e       	adc	r15, r19
    7400:	04 c0       	rjmp	.+8      	; 0x740a <ProcessMixer+0x392>
					}
					else
					{
						P1_solution = P1_solution - PID_ACCs[P1][ROLL];			// or simply add
    7402:	4b a1       	ldd	r20, Y+35	; 0x23
    7404:	5c a1       	ldd	r21, Y+36	; 0x24
    7406:	e4 1a       	sub	r14, r20
    7408:	f5 0a       	sbc	r15, r21
    740a:	f3 01       	movw	r30, r6
    740c:	e4 55       	subi	r30, 0x54	; 84
    740e:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				default:
					break;
			}			

			switch (Config.Channel[i].P1_Pitch_acc)
    7410:	80 81       	ld	r24, Z
    7412:	81 30       	cpi	r24, 0x01	; 1
    7414:	89 f0       	breq	.+34     	; 0x7438 <ProcessMixer+0x3c0>
    7416:	82 30       	cpi	r24, 0x02	; 2
    7418:	f1 f4       	brne	.+60     	; 0x7456 <ProcessMixer+0x3de>
    741a:	f3 01       	movw	r30, r6
    741c:	e0 56       	subi	r30, 0x60	; 96
    741e:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P1_solution = P1_solution + PID_ACCs[P1][PITCH];
					}
					break;
				case SCALE:
					P1_solution = P1_solution - scale32(PID_ACCs[P1][PITCH], Config.Channel[i].P1_elevator_volume * 5);
    7420:	60 81       	ld	r22, Z
    7422:	55 e0       	ldi	r21, 0x05	; 5
    7424:	65 02       	muls	r22, r21
    7426:	b0 01       	movw	r22, r0
    7428:	11 24       	eor	r1, r1
    742a:	8d a1       	ldd	r24, Y+37	; 0x25
    742c:	9e a1       	ldd	r25, Y+38	; 0x26
    742e:	0e 94 19 38 	call	0x7032	; 0x7032 <scale32>
    7432:	e8 1a       	sub	r14, r24
    7434:	f9 0a       	sbc	r15, r25
					break;
    7436:	0f c0       	rjmp	.+30     	; 0x7456 <ProcessMixer+0x3de>
    7438:	f3 01       	movw	r30, r6
    743a:	e0 56       	subi	r30, 0x60	; 96
    743c:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P1_Pitch_acc)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P1_elevator_volume < 0 )
    743e:	80 81       	ld	r24, Z
    7440:	87 ff       	sbrs	r24, 7
    7442:	05 c0       	rjmp	.+10     	; 0x744e <ProcessMixer+0x3d6>
					{
						P1_solution = P1_solution - PID_ACCs[P1][PITCH];		// Reverse if volume negative
    7444:	2d a1       	ldd	r18, Y+37	; 0x25
    7446:	3e a1       	ldd	r19, Y+38	; 0x26
    7448:	e2 1a       	sub	r14, r18
    744a:	f3 0a       	sbc	r15, r19
    744c:	04 c0       	rjmp	.+8      	; 0x7456 <ProcessMixer+0x3de>
					}
					else
					{
						P1_solution = P1_solution + PID_ACCs[P1][PITCH];
    744e:	4d a1       	ldd	r20, Y+37	; 0x25
    7450:	5e a1       	ldd	r21, Y+38	; 0x26
    7452:	e4 0e       	add	r14, r20
    7454:	f5 1e       	adc	r15, r21
    7456:	f3 01       	movw	r30, r6
    7458:	e2 55       	subi	r30, 0x52	; 82
    745a:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				default:
					break;
			}

			switch (Config.Channel[i].P1_Z_delta_acc)
    745c:	80 81       	ld	r24, Z
    745e:	81 30       	cpi	r24, 0x01	; 1
    7460:	89 f0       	breq	.+34     	; 0x7484 <ProcessMixer+0x40c>
    7462:	82 30       	cpi	r24, 0x02	; 2
    7464:	f1 f4       	brne	.+60     	; 0x74a2 <ProcessMixer+0x42a>
    7466:	f3 01       	movw	r30, r6
    7468:	e5 56       	subi	r30, 0x65	; 101
    746a:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P1_solution = P1_solution - PID_ACCs[P1][YAW];
					}
					break;
				case SCALE:
					P1_solution = P1_solution - scale32(PID_ACCs[P1][YAW], Config.Channel[i].P1_throttle_volume * 5);
    746c:	60 81       	ld	r22, Z
    746e:	55 e0       	ldi	r21, 0x05	; 5
    7470:	65 02       	muls	r22, r21
    7472:	b0 01       	movw	r22, r0
    7474:	11 24       	eor	r1, r1
    7476:	8b a5       	ldd	r24, Y+43	; 0x2b
    7478:	9c a5       	ldd	r25, Y+44	; 0x2c
    747a:	0e 94 19 38 	call	0x7032	; 0x7032 <scale32>
    747e:	e8 1a       	sub	r14, r24
    7480:	f9 0a       	sbc	r15, r25
					break;
    7482:	0f c0       	rjmp	.+30     	; 0x74a2 <ProcessMixer+0x42a>
    7484:	f3 01       	movw	r30, r6
    7486:	e5 56       	subi	r30, 0x65	; 101
    7488:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P1_Z_delta_acc)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P1_throttle_volume < 0 )
    748a:	80 81       	ld	r24, Z
    748c:	87 ff       	sbrs	r24, 7
    748e:	05 c0       	rjmp	.+10     	; 0x749a <ProcessMixer+0x422>
					{
						P1_solution = P1_solution + PID_ACCs[P1][YAW];			// Reverse if volume negative
    7490:	2b a5       	ldd	r18, Y+43	; 0x2b
    7492:	3c a5       	ldd	r19, Y+44	; 0x2c
    7494:	e2 0e       	add	r14, r18
    7496:	f3 1e       	adc	r15, r19
    7498:	04 c0       	rjmp	.+8      	; 0x74a2 <ProcessMixer+0x42a>
					}
					else
					{
						P1_solution = P1_solution - PID_ACCs[P1][YAW];
    749a:	4b a5       	ldd	r20, Y+43	; 0x2b
    749c:	5c a5       	ldd	r21, Y+44	; 0x2c
    749e:	e4 1a       	sub	r14, r20
    74a0:	f5 0a       	sbc	r15, r21
					break;
			}
		}

		// P2
		if (Transition_state > TRANS_P1)
    74a2:	2d 8d       	ldd	r18, Y+29	; 0x1d
    74a4:	22 23       	and	r18, r18
    74a6:	09 f4       	brne	.+2      	; 0x74aa <ProcessMixer+0x432>
    74a8:	70 c0       	rjmp	.+224    	; 0x758a <ProcessMixer+0x512>
    74aa:	a6 01       	movw	r20, r12
    74ac:	4f 54       	subi	r20, 0x4F	; 79
    74ae:	5a 4f       	sbci	r21, 0xFA	; 250
    74b0:	3a 01       	movw	r6, r20
    74b2:	fa 01       	movw	r30, r20
    74b4:	e5 55       	subi	r30, 0x55	; 85
    74b6:	ff 4f       	sbci	r31, 0xFF	; 255
		{
			switch (Config.Channel[i].P2_Roll_acc)
    74b8:	80 81       	ld	r24, Z
    74ba:	81 30       	cpi	r24, 0x01	; 1
    74bc:	81 f0       	breq	.+32     	; 0x74de <ProcessMixer+0x466>
    74be:	82 30       	cpi	r24, 0x02	; 2
    74c0:	c9 f4       	brne	.+50     	; 0x74f4 <ProcessMixer+0x47c>
    74c2:	fa 01       	movw	r30, r20
    74c4:	e1 56       	subi	r30, 0x61	; 97
    74c6:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P2_solution = P2_solution - PID_ACCs[P2][ROLL];			// or simply add
					}
					break;
				case SCALE:
					P2_solution = P2_solution - scale32(PID_ACCs[P2][ROLL], Config.Channel[i].P2_aileron_volume * 5);
    74c8:	60 81       	ld	r22, Z
    74ca:	55 e0       	ldi	r21, 0x05	; 5
    74cc:	65 02       	muls	r22, r21
    74ce:	b0 01       	movw	r22, r0
    74d0:	11 24       	eor	r1, r1
    74d2:	c5 01       	movw	r24, r10
    74d4:	0e 94 19 38 	call	0x7032	; 0x7032 <scale32>
    74d8:	08 1b       	sub	r16, r24
    74da:	19 0b       	sbc	r17, r25
					break;
    74dc:	0b c0       	rjmp	.+22     	; 0x74f4 <ProcessMixer+0x47c>
    74de:	fa 01       	movw	r30, r20
    74e0:	e1 56       	subi	r30, 0x61	; 97
    74e2:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P2_Roll_acc)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P2_aileron_volume < 0 )
    74e4:	80 81       	ld	r24, Z
    74e6:	87 ff       	sbrs	r24, 7
    74e8:	03 c0       	rjmp	.+6      	; 0x74f0 <ProcessMixer+0x478>
					{
						P2_solution = P2_solution + PID_ACCs[P2][ROLL];			// Reverse if volume negative
    74ea:	0a 0d       	add	r16, r10
    74ec:	1b 1d       	adc	r17, r11
    74ee:	02 c0       	rjmp	.+4      	; 0x74f4 <ProcessMixer+0x47c>
					}
					else
					{
						P2_solution = P2_solution - PID_ACCs[P2][ROLL];			// or simply add
    74f0:	0a 19       	sub	r16, r10
    74f2:	1b 09       	sbc	r17, r11
    74f4:	f3 01       	movw	r30, r6
    74f6:	e3 55       	subi	r30, 0x53	; 83
    74f8:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				default:
					break;
			}

			switch (Config.Channel[i].P2_Pitch_acc)
    74fa:	80 81       	ld	r24, Z
    74fc:	81 30       	cpi	r24, 0x01	; 1
    74fe:	81 f0       	breq	.+32     	; 0x7520 <ProcessMixer+0x4a8>
    7500:	82 30       	cpi	r24, 0x02	; 2
    7502:	c9 f4       	brne	.+50     	; 0x7536 <ProcessMixer+0x4be>
    7504:	f3 01       	movw	r30, r6
    7506:	ef 55       	subi	r30, 0x5F	; 95
    7508:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P2_solution = P2_solution + PID_ACCs[P2][PITCH];
					}
					break;
				case SCALE:
					P2_solution = P2_solution - scale32(PID_ACCs[P2][PITCH], Config.Channel[i].P2_elevator_volume * 5);
    750a:	60 81       	ld	r22, Z
    750c:	85 e0       	ldi	r24, 0x05	; 5
    750e:	68 02       	muls	r22, r24
    7510:	b0 01       	movw	r22, r0
    7512:	11 24       	eor	r1, r1
    7514:	c4 01       	movw	r24, r8
    7516:	0e 94 19 38 	call	0x7032	; 0x7032 <scale32>
    751a:	08 1b       	sub	r16, r24
    751c:	19 0b       	sbc	r17, r25
					break;
    751e:	0b c0       	rjmp	.+22     	; 0x7536 <ProcessMixer+0x4be>
    7520:	f3 01       	movw	r30, r6
    7522:	ef 55       	subi	r30, 0x5F	; 95
    7524:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P2_Pitch_acc)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P2_elevator_volume < 0 )
    7526:	80 81       	ld	r24, Z
    7528:	87 ff       	sbrs	r24, 7
    752a:	03 c0       	rjmp	.+6      	; 0x7532 <ProcessMixer+0x4ba>
					{

						P2_solution = P2_solution - PID_ACCs[P2][PITCH];		// Reverse if volume negative
    752c:	08 19       	sub	r16, r8
    752e:	19 09       	sbc	r17, r9
    7530:	02 c0       	rjmp	.+4      	; 0x7536 <ProcessMixer+0x4be>
					}
					else
					{
						P2_solution = P2_solution + PID_ACCs[P2][PITCH];
    7532:	08 0d       	add	r16, r8
    7534:	19 1d       	adc	r17, r9
    7536:	f3 01       	movw	r30, r6
    7538:	e1 55       	subi	r30, 0x51	; 81
    753a:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				default:
					break;
			}

			switch (Config.Channel[i].P2_Z_delta_acc)
    753c:	80 81       	ld	r24, Z
    753e:	81 30       	cpi	r24, 0x01	; 1
    7540:	89 f0       	breq	.+34     	; 0x7564 <ProcessMixer+0x4ec>
    7542:	82 30       	cpi	r24, 0x02	; 2
    7544:	f1 f4       	brne	.+60     	; 0x7582 <ProcessMixer+0x50a>
    7546:	f3 01       	movw	r30, r6
    7548:	e4 56       	subi	r30, 0x64	; 100
    754a:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P2_solution = P2_solution - PID_ACCs[P2][YAW];
					}
					break;
				case SCALE:
					P2_solution = P2_solution - scale32(PID_ACCs[P2][YAW], Config.Channel[i].P2_throttle_volume * 5);
    754c:	60 81       	ld	r22, Z
    754e:	55 e0       	ldi	r21, 0x05	; 5
    7550:	65 02       	muls	r22, r21
    7552:	b0 01       	movw	r22, r0
    7554:	11 24       	eor	r1, r1
    7556:	8d a5       	ldd	r24, Y+45	; 0x2d
    7558:	9e a5       	ldd	r25, Y+46	; 0x2e
    755a:	0e 94 19 38 	call	0x7032	; 0x7032 <scale32>
    755e:	08 1b       	sub	r16, r24
    7560:	19 0b       	sbc	r17, r25
					break;
    7562:	0f c0       	rjmp	.+30     	; 0x7582 <ProcessMixer+0x50a>
    7564:	f3 01       	movw	r30, r6
    7566:	e4 56       	subi	r30, 0x64	; 100
    7568:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P2_Z_delta_acc)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P2_throttle_volume < 0 )
    756a:	80 81       	ld	r24, Z
    756c:	87 ff       	sbrs	r24, 7
    756e:	05 c0       	rjmp	.+10     	; 0x757a <ProcessMixer+0x502>
					{
						P2_solution = P2_solution + PID_ACCs[P2][YAW];			// Reverse if volume negative
    7570:	2d a5       	ldd	r18, Y+45	; 0x2d
    7572:	3e a5       	ldd	r19, Y+46	; 0x2e
    7574:	02 0f       	add	r16, r18
    7576:	13 1f       	adc	r17, r19
    7578:	04 c0       	rjmp	.+8      	; 0x7582 <ProcessMixer+0x50a>
					}
					else
					{
						P2_solution = P2_solution - PID_ACCs[P2][YAW];
    757a:	4d a5       	ldd	r20, Y+45	; 0x2d
    757c:	5e a5       	ldd	r21, Y+46	; 0x2e
    757e:	04 1b       	sub	r16, r20
    7580:	15 0b       	sbc	r17, r21
		//************************************************************
		// Process mixers
		//************************************************************ 

		// Mix in other outputs here (P1)
		if (Transition_state < TRANS_P2)
    7582:	2d 8d       	ldd	r18, Y+29	; 0x1d
    7584:	29 30       	cpi	r18, 0x09	; 9
    7586:	08 f0       	brcs	.+2      	; 0x758a <ProcessMixer+0x512>
    7588:	8d c0       	rjmp	.+282    	; 0x76a4 <ProcessMixer+0x62c>
    758a:	a6 01       	movw	r20, r12
    758c:	4f 54       	subi	r20, 0x4F	; 79
    758e:	5a 4f       	sbci	r21, 0xFA	; 250
    7590:	3a 01       	movw	r6, r20
    7592:	fa 01       	movw	r30, r20
    7594:	e2 56       	subi	r30, 0x62	; 98
    7596:	ff 4f       	sbci	r31, 0xFF	; 255
		{
			// Mix in dedicated RC sources - aileron, elevator and rudder
			if (Config.Channel[i].P1_aileron_volume !=0) 					// Mix in dedicated aileron
    7598:	60 81       	ld	r22, Z
    759a:	66 23       	and	r22, r22
    759c:	59 f0       	breq	.+22     	; 0x75b4 <ProcessMixer+0x53c>
			{
				temp2 = scale32(RCinputs[AILERON], Config.Channel[i].P1_aileron_volume);
    759e:	80 91 2d 08 	lds	r24, 0x082D
    75a2:	90 91 2e 08 	lds	r25, 0x082E
    75a6:	77 27       	eor	r23, r23
    75a8:	67 fd       	sbrc	r22, 7
    75aa:	70 95       	com	r23
    75ac:	0e 94 19 38 	call	0x7032	; 0x7032 <scale32>
				P1_solution = P1_solution + temp2;
    75b0:	e8 0e       	add	r14, r24
    75b2:	f9 1e       	adc	r15, r25
    75b4:	f3 01       	movw	r30, r6
    75b6:	e0 56       	subi	r30, 0x60	; 96
    75b8:	ff 4f       	sbci	r31, 0xFF	; 255
			}
			if (Config.Channel[i].P1_elevator_volume !=0) 					// Mix in dedicated elevator
    75ba:	60 81       	ld	r22, Z
    75bc:	66 23       	and	r22, r22
    75be:	59 f0       	breq	.+22     	; 0x75d6 <ProcessMixer+0x55e>
			{
				temp2 = scale32(RCinputs[ELEVATOR], Config.Channel[i].P1_elevator_volume);
    75c0:	80 91 2f 08 	lds	r24, 0x082F
    75c4:	90 91 30 08 	lds	r25, 0x0830
    75c8:	77 27       	eor	r23, r23
    75ca:	67 fd       	sbrc	r22, 7
    75cc:	70 95       	com	r23
    75ce:	0e 94 19 38 	call	0x7032	; 0x7032 <scale32>
				P1_solution = P1_solution + temp2;
    75d2:	e8 0e       	add	r14, r24
    75d4:	f9 1e       	adc	r15, r25
    75d6:	f3 01       	movw	r30, r6
    75d8:	ee 55       	subi	r30, 0x5E	; 94
    75da:	ff 4f       	sbci	r31, 0xFF	; 255
			}
			if (Config.Channel[i].P1_rudder_volume !=0) 					// Mix in dedicated rudder
    75dc:	60 81       	ld	r22, Z
    75de:	66 23       	and	r22, r22
    75e0:	59 f0       	breq	.+22     	; 0x75f8 <ProcessMixer+0x580>
			{
				temp2 = scale32(RCinputs[RUDDER], Config.Channel[i].P1_rudder_volume);
    75e2:	80 91 31 08 	lds	r24, 0x0831
    75e6:	90 91 32 08 	lds	r25, 0x0832
    75ea:	77 27       	eor	r23, r23
    75ec:	67 fd       	sbrc	r22, 7
    75ee:	70 95       	com	r23
    75f0:	0e 94 19 38 	call	0x7032	; 0x7032 <scale32>
				P1_solution = P1_solution + temp2;
    75f4:	e8 0e       	add	r14, r24
    75f6:	f9 1e       	adc	r15, r25
    75f8:	f3 01       	movw	r30, r6
    75fa:	ef 54       	subi	r30, 0x4F	; 79
    75fc:	ff 4f       	sbci	r31, 0xFF	; 255
			}

			// Other sources
			if ((Config.Channel[i].P1_source_a_volume !=0) && (Config.Channel[i].P1_source_a != NOMIX)) // Mix in first extra source
    75fe:	60 81       	ld	r22, Z
    7600:	66 23       	and	r22, r22
    7602:	19 f1       	breq	.+70     	; 0x764a <ProcessMixer+0x5d2>
    7604:	31 97       	sbiw	r30, 0x01	; 1
    7606:	80 81       	ld	r24, Z
    7608:	8f 30       	cpi	r24, 0x0F	; 15
    760a:	f9 f0       	breq	.+62     	; 0x764a <ProcessMixer+0x5d2>
    760c:	e8 2f       	mov	r30, r24
    760e:	ff 27       	eor	r31, r31
    7610:	e7 fd       	sbrc	r30, 7
    7612:	f0 95       	com	r31
			{
				// Is the source a sensor?
				if (Config.Channel[i].P1_source_a > (MAX_RC_CHANNELS - 1))
    7614:	88 30       	cpi	r24, 0x08	; 8
    7616:	64 f0       	brlt	.+24     	; 0x7630 <ProcessMixer+0x5b8>
				{
					temp2 = SensorDataP1[Config.Channel[i].P1_source_a - EXT_SOURCE];
    7618:	38 97       	sbiw	r30, 0x08	; 8
    761a:	ee 0f       	add	r30, r30
    761c:	ff 1f       	adc	r31, r31
    761e:	81 e0       	ldi	r24, 0x01	; 1
    7620:	90 e0       	ldi	r25, 0x00	; 0
    7622:	8c 0f       	add	r24, r28
    7624:	9d 1f       	adc	r25, r29
    7626:	e8 0f       	add	r30, r24
    7628:	f9 1f       	adc	r31, r25
    762a:	86 85       	ldd	r24, Z+14	; 0x0e
    762c:	97 85       	ldd	r25, Z+15	; 0x0f
    762e:	06 c0       	rjmp	.+12     	; 0x763c <ProcessMixer+0x5c4>
				}
				// Is the source an RC input?
				else
				{
					// Yes, calculate RC channel number from source number and return RC value
					temp2 = RCinputs[Config.Channel[i].P1_source_a];
    7630:	ee 0f       	add	r30, r30
    7632:	ff 1f       	adc	r31, r31
    7634:	e5 5d       	subi	r30, 0xD5	; 213
    7636:	f7 4f       	sbci	r31, 0xF7	; 247
    7638:	80 81       	ld	r24, Z
    763a:	91 81       	ldd	r25, Z+1	; 0x01
				}

				temp2 = scale32(temp2, Config.Channel[i].P1_source_a_volume);
    763c:	77 27       	eor	r23, r23
    763e:	67 fd       	sbrc	r22, 7
    7640:	70 95       	com	r23
    7642:	0e 94 19 38 	call	0x7032	; 0x7032 <scale32>
				P1_solution = P1_solution + temp2;
    7646:	e8 0e       	add	r14, r24
    7648:	f9 1e       	adc	r15, r25
    764a:	f3 01       	movw	r30, r6
    764c:	eb 54       	subi	r30, 0x4B	; 75
    764e:	ff 4f       	sbci	r31, 0xFF	; 255
			}
			if ((Config.Channel[i].P1_source_b_volume !=0) && (Config.Channel[i].P1_source_b != NOMIX)) // Mix in second extra source
    7650:	60 81       	ld	r22, Z
    7652:	66 23       	and	r22, r22
    7654:	19 f1       	breq	.+70     	; 0x769c <ProcessMixer+0x624>
    7656:	31 97       	sbiw	r30, 0x01	; 1
    7658:	80 81       	ld	r24, Z
    765a:	8f 30       	cpi	r24, 0x0F	; 15
    765c:	f9 f0       	breq	.+62     	; 0x769c <ProcessMixer+0x624>
    765e:	e8 2f       	mov	r30, r24
    7660:	ff 27       	eor	r31, r31
    7662:	e7 fd       	sbrc	r30, 7
    7664:	f0 95       	com	r31
			{
				// Is the source a sensor?
				if (Config.Channel[i].P1_source_b > (MAX_RC_CHANNELS - 1))
    7666:	88 30       	cpi	r24, 0x08	; 8
    7668:	64 f0       	brlt	.+24     	; 0x7682 <ProcessMixer+0x60a>
				{
					temp2 = SensorDataP1[Config.Channel[i].P1_source_b - EXT_SOURCE];
    766a:	38 97       	sbiw	r30, 0x08	; 8
    766c:	ee 0f       	add	r30, r30
    766e:	ff 1f       	adc	r31, r31
    7670:	a1 e0       	ldi	r26, 0x01	; 1
    7672:	b0 e0       	ldi	r27, 0x00	; 0
    7674:	ac 0f       	add	r26, r28
    7676:	bd 1f       	adc	r27, r29
    7678:	ea 0f       	add	r30, r26
    767a:	fb 1f       	adc	r31, r27
    767c:	86 85       	ldd	r24, Z+14	; 0x0e
    767e:	97 85       	ldd	r25, Z+15	; 0x0f
    7680:	06 c0       	rjmp	.+12     	; 0x768e <ProcessMixer+0x616>
				}
				// Is the source an RC input?
				else
				{
					temp2 = RCinputs[Config.Channel[i].P1_source_b];
    7682:	ee 0f       	add	r30, r30
    7684:	ff 1f       	adc	r31, r31
    7686:	e5 5d       	subi	r30, 0xD5	; 213
    7688:	f7 4f       	sbci	r31, 0xF7	; 247
    768a:	80 81       	ld	r24, Z
    768c:	91 81       	ldd	r25, Z+1	; 0x01
				}

				temp2 = scale32(temp2, Config.Channel[i].P1_source_b_volume);
    768e:	77 27       	eor	r23, r23
    7690:	67 fd       	sbrc	r22, 7
    7692:	70 95       	com	r23
    7694:	0e 94 19 38 	call	0x7032	; 0x7032 <scale32>
				P1_solution = P1_solution + temp2;
    7698:	e8 0e       	add	r14, r24
    769a:	f9 1e       	adc	r15, r25
			}
		}

		// Mix in other outputs here (P2)
		if (Transition_state > TRANS_P1)	
    769c:	2d 8d       	ldd	r18, Y+29	; 0x1d
    769e:	22 23       	and	r18, r18
    76a0:	09 f4       	brne	.+2      	; 0x76a4 <ProcessMixer+0x62c>
    76a2:	85 c0       	rjmp	.+266    	; 0x77ae <ProcessMixer+0x736>
    76a4:	a6 01       	movw	r20, r12
    76a6:	4f 54       	subi	r20, 0x4F	; 79
    76a8:	5a 4f       	sbci	r21, 0xFA	; 250
    76aa:	3a 01       	movw	r6, r20
    76ac:	fa 01       	movw	r30, r20
    76ae:	e1 56       	subi	r30, 0x61	; 97
    76b0:	ff 4f       	sbci	r31, 0xFF	; 255
		{
			// Mix in dedicated RC sources - aileron, elevator and rudder
			if (Config.Channel[i].P2_aileron_volume !=0) 					// Mix in dedicated aileron
    76b2:	60 81       	ld	r22, Z
    76b4:	66 23       	and	r22, r22
    76b6:	59 f0       	breq	.+22     	; 0x76ce <ProcessMixer+0x656>
			{
				temp2 = scale32(RCinputs[AILERON], Config.Channel[i].P2_aileron_volume);
    76b8:	80 91 2d 08 	lds	r24, 0x082D
    76bc:	90 91 2e 08 	lds	r25, 0x082E
    76c0:	77 27       	eor	r23, r23
    76c2:	67 fd       	sbrc	r22, 7
    76c4:	70 95       	com	r23
    76c6:	0e 94 19 38 	call	0x7032	; 0x7032 <scale32>
				P2_solution = P2_solution + temp2;
    76ca:	08 0f       	add	r16, r24
    76cc:	19 1f       	adc	r17, r25
    76ce:	f3 01       	movw	r30, r6
    76d0:	ef 55       	subi	r30, 0x5F	; 95
    76d2:	ff 4f       	sbci	r31, 0xFF	; 255
			}
			if (Config.Channel[i].P2_elevator_volume !=0) 					// Mix in dedicated elevator
    76d4:	60 81       	ld	r22, Z
    76d6:	66 23       	and	r22, r22
    76d8:	59 f0       	breq	.+22     	; 0x76f0 <ProcessMixer+0x678>
			{
				temp2 = scale32(RCinputs[ELEVATOR], Config.Channel[i].P2_elevator_volume);
    76da:	80 91 2f 08 	lds	r24, 0x082F
    76de:	90 91 30 08 	lds	r25, 0x0830
    76e2:	77 27       	eor	r23, r23
    76e4:	67 fd       	sbrc	r22, 7
    76e6:	70 95       	com	r23
    76e8:	0e 94 19 38 	call	0x7032	; 0x7032 <scale32>
				P2_solution = P2_solution + temp2;
    76ec:	08 0f       	add	r16, r24
    76ee:	19 1f       	adc	r17, r25
    76f0:	f3 01       	movw	r30, r6
    76f2:	ed 55       	subi	r30, 0x5D	; 93
    76f4:	ff 4f       	sbci	r31, 0xFF	; 255
			}
			if (Config.Channel[i].P2_rudder_volume !=0) 					// Mix in dedicated rudder
    76f6:	60 81       	ld	r22, Z
    76f8:	66 23       	and	r22, r22
    76fa:	59 f0       	breq	.+22     	; 0x7712 <ProcessMixer+0x69a>
			{
				temp2 = scale32(RCinputs[RUDDER], Config.Channel[i].P2_rudder_volume);
    76fc:	80 91 31 08 	lds	r24, 0x0831
    7700:	90 91 32 08 	lds	r25, 0x0832
    7704:	77 27       	eor	r23, r23
    7706:	67 fd       	sbrc	r22, 7
    7708:	70 95       	com	r23
    770a:	0e 94 19 38 	call	0x7032	; 0x7032 <scale32>
				P2_solution = P2_solution + temp2;
    770e:	08 0f       	add	r16, r24
    7710:	19 1f       	adc	r17, r25
    7712:	f3 01       	movw	r30, r6
    7714:	ed 54       	subi	r30, 0x4D	; 77
    7716:	ff 4f       	sbci	r31, 0xFF	; 255
			}

			// Other sources
			if ((Config.Channel[i].P2_source_a_volume !=0) && (Config.Channel[i].P2_source_a != NOMIX)) // Mix in first extra source
    7718:	60 81       	ld	r22, Z
    771a:	66 23       	and	r22, r22
    771c:	09 f1       	breq	.+66     	; 0x7760 <ProcessMixer+0x6e8>
    771e:	31 97       	sbiw	r30, 0x01	; 1
    7720:	80 81       	ld	r24, Z
    7722:	8f 30       	cpi	r24, 0x0F	; 15
    7724:	e9 f0       	breq	.+58     	; 0x7760 <ProcessMixer+0x6e8>
    7726:	e8 2f       	mov	r30, r24
    7728:	ff 27       	eor	r31, r31
    772a:	e7 fd       	sbrc	r30, 7
    772c:	f0 95       	com	r31
			{
				// Is the source a sensor?
				if (Config.Channel[i].P2_source_a > (MAX_RC_CHANNELS - 1))
    772e:	88 30       	cpi	r24, 0x08	; 8
    7730:	54 f0       	brlt	.+20     	; 0x7746 <ProcessMixer+0x6ce>
				{
					temp2 = SensorDataP2[Config.Channel[i].P2_source_a - EXT_SOURCE];
    7732:	38 97       	sbiw	r30, 0x08	; 8
    7734:	ee 0f       	add	r30, r30
    7736:	ff 1f       	adc	r31, r31
    7738:	81 e0       	ldi	r24, 0x01	; 1
    773a:	90 e0       	ldi	r25, 0x00	; 0
    773c:	8c 0f       	add	r24, r28
    773e:	9d 1f       	adc	r25, r29
    7740:	e8 0f       	add	r30, r24
    7742:	f9 1f       	adc	r31, r25
    7744:	04 c0       	rjmp	.+8      	; 0x774e <ProcessMixer+0x6d6>
				}
				// Is the source an RC input?
				else 
				{
					temp2 = RCinputs[Config.Channel[i].P2_source_a];
    7746:	ee 0f       	add	r30, r30
    7748:	ff 1f       	adc	r31, r31
    774a:	e5 5d       	subi	r30, 0xD5	; 213
    774c:	f7 4f       	sbci	r31, 0xF7	; 247
    774e:	80 81       	ld	r24, Z
    7750:	91 81       	ldd	r25, Z+1	; 0x01
				}

				temp2 = scale32(temp2, Config.Channel[i].P2_source_a_volume);
    7752:	77 27       	eor	r23, r23
    7754:	67 fd       	sbrc	r22, 7
    7756:	70 95       	com	r23
    7758:	0e 94 19 38 	call	0x7032	; 0x7032 <scale32>
				P2_solution = P2_solution + temp2;
    775c:	08 0f       	add	r16, r24
    775e:	19 1f       	adc	r17, r25
    7760:	f3 01       	movw	r30, r6
    7762:	e9 54       	subi	r30, 0x49	; 73
    7764:	ff 4f       	sbci	r31, 0xFF	; 255
			}
			if ((Config.Channel[i].P2_source_b_volume !=0) && (Config.Channel[i].P2_source_b != NOMIX)) // Mix in second extra source
    7766:	60 81       	ld	r22, Z
    7768:	66 23       	and	r22, r22
    776a:	09 f1       	breq	.+66     	; 0x77ae <ProcessMixer+0x736>
    776c:	31 97       	sbiw	r30, 0x01	; 1
    776e:	80 81       	ld	r24, Z
    7770:	8f 30       	cpi	r24, 0x0F	; 15
    7772:	e9 f0       	breq	.+58     	; 0x77ae <ProcessMixer+0x736>
    7774:	e8 2f       	mov	r30, r24
    7776:	ff 27       	eor	r31, r31
    7778:	e7 fd       	sbrc	r30, 7
    777a:	f0 95       	com	r31
			{
				// Is the source a sensor?
				if (Config.Channel[i].P2_source_b > (MAX_RC_CHANNELS - 1))
    777c:	88 30       	cpi	r24, 0x08	; 8
    777e:	54 f0       	brlt	.+20     	; 0x7794 <ProcessMixer+0x71c>
				{
					temp2 = SensorDataP2[Config.Channel[i].P2_source_b - EXT_SOURCE];
    7780:	38 97       	sbiw	r30, 0x08	; 8
    7782:	ee 0f       	add	r30, r30
    7784:	ff 1f       	adc	r31, r31
    7786:	a1 e0       	ldi	r26, 0x01	; 1
    7788:	b0 e0       	ldi	r27, 0x00	; 0
    778a:	ac 0f       	add	r26, r28
    778c:	bd 1f       	adc	r27, r29
    778e:	ea 0f       	add	r30, r26
    7790:	fb 1f       	adc	r31, r27
    7792:	04 c0       	rjmp	.+8      	; 0x779c <ProcessMixer+0x724>
				}
				// Is the source an RC input?
				else
				{
					temp2 = RCinputs[Config.Channel[i].P2_source_b];
    7794:	ee 0f       	add	r30, r30
    7796:	ff 1f       	adc	r31, r31
    7798:	e5 5d       	subi	r30, 0xD5	; 213
    779a:	f7 4f       	sbci	r31, 0xF7	; 247
    779c:	80 81       	ld	r24, Z
    779e:	91 81       	ldd	r25, Z+1	; 0x01
				}

				temp2 = scale32(temp2, Config.Channel[i].P2_source_b_volume);
    77a0:	77 27       	eor	r23, r23
    77a2:	67 fd       	sbrc	r22, 7
    77a4:	70 95       	com	r23
    77a6:	0e 94 19 38 	call	0x7032	; 0x7032 <scale32>
				P2_solution = P2_solution + temp2;
    77aa:	08 0f       	add	r16, r24
    77ac:	19 1f       	adc	r17, r25
    77ae:	c6 01       	movw	r24, r12
    77b0:	8f 54       	subi	r24, 0x4F	; 79
    77b2:	9a 4f       	sbci	r25, 0xFA	; 250
    77b4:	fc 01       	movw	r30, r24
    77b6:	ee 56       	subi	r30, 0x6E	; 110
    77b8:	ff 4f       	sbci	r31, 0xFF	; 255
			}
		}
			
		// Save solution for this channel. Note that this contains cross-mixed data from the *last* cycle
		Config.Channel[i].P1_value = P1_solution;
    77ba:	f1 82       	std	Z+1, r15	; 0x01
    77bc:	e0 82       	st	Z, r14
    77be:	32 96       	adiw	r30, 0x02	; 2
		Config.Channel[i].P2_value = P2_solution;
    77c0:	11 83       	std	Z+1, r17	; 0x01
    77c2:	00 83       	st	Z, r16
    77c4:	b6 e2       	ldi	r27, 0x26	; 38
    77c6:	cb 0e       	add	r12, r27
    77c8:	d1 1c       	adc	r13, r1

	//************************************************************
	// Main mix loop - sensors, RC inputs and other channels
	//************************************************************

	for (i = 0; i < MIX_OUTPUTS; i++)
    77ca:	e0 e3       	ldi	r30, 0x30	; 48
    77cc:	ce 16       	cp	r12, r30
    77ce:	e1 e0       	ldi	r30, 0x01	; 1
    77d0:	de 06       	cpc	r13, r30
    77d2:	09 f0       	breq	.+2      	; 0x77d6 <ProcessMixer+0x75e>
    77d4:	f8 cc       	rjmp	.-1552   	; 0x71c6 <ProcessMixer+0x14e>
	//************************************************************
	// Mixer transition code
	//************************************************************ 

	// Convert number to percentage (0 to 100%)
	if (Config.TransitionSpeed != 0) 
    77d6:	80 91 df 05 	lds	r24, 0x05DF
    77da:	88 23       	and	r24, r24
    77dc:	41 f0       	breq	.+16     	; 0x77ee <ProcessMixer+0x776>
	{
		// transition_counter counts from 0 to 100 (101 steps)
		transition = transition_counter;
    77de:	80 91 26 05 	lds	r24, 0x0526
    77e2:	90 91 27 05 	lds	r25, 0x0527
    77e6:	90 93 24 05 	sts	0x0524, r25
    77ea:	80 93 23 05 	sts	0x0523, r24

	// Recalculate P1 values based on transition stage
	for (i = 0; i < MIX_OUTPUTS; i++)
	{
		// Speed up the easy ones :)
		if (transition == 0)
    77ee:	00 91 23 05 	lds	r16, 0x0523
    77f2:	10 91 24 05 	lds	r17, 0x0524
		}
		else
		{
			// Get source channel value
			temp1 = Config.Channel[i].P1_value;
			temp1 = scale32(temp1, (100 - transition));
    77f6:	b4 e6       	ldi	r27, 0x64	; 100
    77f8:	cb 2e       	mov	r12, r27
    77fa:	d1 2c       	mov	r13, r1
    77fc:	c0 1a       	sub	r12, r16
    77fe:	d1 0a       	sbc	r13, r17
    7800:	83 e4       	ldi	r24, 0x43	; 67
    7802:	e8 2e       	mov	r14, r24
    7804:	86 e0       	ldi	r24, 0x06	; 6
    7806:	f8 2e       	mov	r15, r24

	// Recalculate P1 values based on transition stage
	for (i = 0; i < MIX_OUTPUTS; i++)
	{
		// Speed up the easy ones :)
		if (transition == 0)
    7808:	01 15       	cp	r16, r1
    780a:	11 05       	cpc	r17, r1
    780c:	21 f4       	brne	.+8      	; 0x7816 <ProcessMixer+0x79e>
		{
			temp1 = Config.Channel[i].P1_value;
    780e:	d7 01       	movw	r26, r14
    7810:	8d 91       	ld	r24, X+
    7812:	9c 91       	ld	r25, X
    7814:	16 c0       	rjmp	.+44     	; 0x7842 <ProcessMixer+0x7ca>
		}
		else if (transition >= 100)
    7816:	04 36       	cpi	r16, 0x64	; 100
    7818:	11 05       	cpc	r17, r1
    781a:	24 f0       	brlt	.+8      	; 0x7824 <ProcessMixer+0x7ac>
		{
			temp1 = Config.Channel[i].P2_value;
    781c:	f7 01       	movw	r30, r14
    781e:	82 81       	ldd	r24, Z+2	; 0x02
    7820:	93 81       	ldd	r25, Z+3	; 0x03
    7822:	0f c0       	rjmp	.+30     	; 0x7842 <ProcessMixer+0x7ca>
		}
		else
		{
			// Get source channel value
			temp1 = Config.Channel[i].P1_value;
			temp1 = scale32(temp1, (100 - transition));
    7824:	b6 01       	movw	r22, r12
    7826:	d7 01       	movw	r26, r14
    7828:	8d 91       	ld	r24, X+
    782a:	9c 91       	ld	r25, X
    782c:	0e 94 19 38 	call	0x7032	; 0x7032 <scale32>
    7830:	5c 01       	movw	r10, r24

			// Get destination channel value
			temp2 = Config.Channel[i].P2_value;
			temp2 = scale32(temp2, transition);
    7832:	b8 01       	movw	r22, r16
    7834:	f7 01       	movw	r30, r14
    7836:	82 81       	ldd	r24, Z+2	; 0x02
    7838:	93 81       	ldd	r25, Z+3	; 0x03
    783a:	0e 94 19 38 	call	0x7032	; 0x7032 <scale32>

			// Sum the mixers
			temp1 = temp1 + temp2;
    783e:	8a 0d       	add	r24, r10
    7840:	9b 1d       	adc	r25, r11
		}
		// Save transitioned solution into P1
		Config.Channel[i].P1_value = temp1;
    7842:	d7 01       	movw	r26, r14
    7844:	8d 93       	st	X+, r24
    7846:	9c 93       	st	X, r25
    7848:	b6 e2       	ldi	r27, 0x26	; 38
    784a:	eb 0e       	add	r14, r27
    784c:	f1 1c       	adc	r15, r1
		// transition_counter counts from 0 to 100 (101 steps)
		transition = transition_counter;
	}

	// Recalculate P1 values based on transition stage
	for (i = 0; i < MIX_OUTPUTS; i++)
    784e:	e3 e7       	ldi	r30, 0x73	; 115
    7850:	ee 16       	cp	r14, r30
    7852:	e7 e0       	ldi	r30, 0x07	; 7
    7854:	fe 06       	cpc	r15, r30
    7856:	c1 f6       	brne	.-80     	; 0x7808 <ProcessMixer+0x790>
    7858:	6d e4       	ldi	r22, 0x4D	; 77
    785a:	c6 2e       	mov	r12, r22
    785c:	66 e0       	ldi	r22, 0x06	; 6
    785e:	d6 2e       	mov	r13, r22
    7860:	7e e4       	ldi	r23, 0x4E	; 78
    7862:	87 2e       	mov	r8, r23
    7864:	76 e0       	ldi	r23, 0x06	; 6
    7866:	97 2e       	mov	r9, r23
    7868:	e3 e4       	ldi	r30, 0x43	; 67
    786a:	ee 2e       	mov	r14, r30
    786c:	e6 e0       	ldi	r30, 0x06	; 6
    786e:	fe 2e       	mov	r15, r30
			if (Config.Channel[i].P1_throttle_volume != Config.Channel[i].P2_throttle_volume)
			{
				// Calculate step difference in 1/100ths and round
				temp1 = (Config.Channel[i].P2_throttle_volume - Config.Channel[i].P1_throttle_volume);
				temp1 = temp1 << 7; 						// Multiply by 128 so divide gives reasonable step values
				Step1 = temp1 / 100;	
    7870:	f4 e6       	ldi	r31, 0x64	; 100
    7872:	af 2e       	mov	r10, r31
    7874:	b1 2c       	mov	r11, r1
    7876:	80 2f       	mov	r24, r16
    7878:	99 27       	eor	r25, r25
    787a:	87 fd       	sbrc	r24, 7
    787c:	90 95       	com	r25
					}
					// If P2 greater than P1, SINE is the one we want
					else
					{
						// Multiply SQRTSIN[transition] steps (0 to 100)
						temp3 = (int8_t)pgm_read_byte(&SQRTSIN[(int8_t)transition]);
    787e:	9c 01       	movw	r18, r24
    7880:	29 55       	subi	r18, 0x59	; 89
    7882:	36 4e       	sbci	r19, 0xE6	; 230
    7884:	3e 8f       	std	Y+30, r19	; 0x1e
    7886:	2d 8f       	std	Y+29, r18	; 0x1d
					// Choose between SQRT SINE and SQRT COSINE
					// If P2 less than P1, COSINE (reverse SINE) is the one we want
					if (Step1 < 0)
					{ 
						// Multiply SQRTSIN[100 - transition] steps (0 to 100)
						temp3 = 100 - (int8_t)pgm_read_byte(&SQRTSIN[100 - (int8_t)transition]);
    7888:	95 01       	movw	r18, r10
    788a:	28 1b       	sub	r18, r24
    788c:	39 0b       	sbc	r19, r25
    788e:	a9 01       	movw	r20, r18
    7890:	49 55       	subi	r20, 0x59	; 89
    7892:	56 4e       	sbci	r21, 0xE6	; 230
    7894:	58 a3       	std	Y+32, r21	; 0x20
    7896:	4f 8f       	std	Y+31, r20	; 0x1f
					}
					// If P2 greater than P1, SINE is the one we want
					else
					{
						// Multiply SIN[transition] steps (0 to 100)
						temp3 = (int8_t)pgm_read_byte(&SIN[(int8_t)transition]);
    7898:	dc 01       	movw	r26, r24
    789a:	a4 5f       	subi	r26, 0xF4	; 244
    789c:	b5 4e       	sbci	r27, 0xE5	; 229
    789e:	1d 01       	movw	r2, r26
					// Choose between SINE and COSINE
					// If P2 less than P1, COSINE (reverse SINE) is the one we want
					if (Step1 < 0)
					{ 
						// Multiply SIN[100 - transition] steps (0 to 100)
						temp3 = 100 - (int8_t)pgm_read_byte(&SIN[100 - (int8_t)transition]);
    78a0:	f9 01       	movw	r30, r18
    78a2:	e4 5f       	subi	r30, 0xF4	; 244
    78a4:	f5 4e       	sbci	r31, 0xE5	; 229
    78a6:	2f 01       	movw	r4, r30
		} // No throttle
		
		// No throttles, so clamp to THROTTLEMIN if flagged as a motor
		else if (Config.Channel[i].Motor_marker == MOTOR)
		{
			Config.Channel[i].P1_value = -THROTTLEOFFSET; // 3750-1250 = 2500 = 1.0ms
    78a8:	ae e1       	ldi	r26, 0x1E	; 30
    78aa:	6a 2e       	mov	r6, r26
    78ac:	ab ef       	ldi	r26, 0xFB	; 251
    78ae:	7a 2e       	mov	r7, r26
    78b0:	f6 01       	movw	r30, r12
    78b2:	31 97       	sbiw	r30, 0x01	; 1
	//************************************************************ 

	for (i = 0; i < MIX_OUTPUTS; i++)
	{
		// Ignore if both throttle volumes are 0% (no throttle)
		if 	(!((Config.Channel[i].P1_throttle_volume == 0) && 
    78b4:	90 81       	ld	r25, Z
    78b6:	d6 01       	movw	r26, r12
    78b8:	8c 91       	ld	r24, X
    78ba:	91 11       	cpse	r25, r1
    78bc:	03 c0       	rjmp	.+6      	; 0x78c4 <ProcessMixer+0x84c>
    78be:	88 23       	and	r24, r24
    78c0:	09 f4       	brne	.+2      	; 0x78c4 <ProcessMixer+0x84c>
    78c2:	61 c0       	rjmp	.+194    	; 0x7986 <ProcessMixer+0x90e>
    78c4:	29 2f       	mov	r18, r25
    78c6:	33 27       	eor	r19, r19
    78c8:	27 fd       	sbrc	r18, 7
    78ca:	30 95       	com	r19
			(Config.Channel[i].P2_throttle_volume == 0)))
		{
			// Only process if there is a curve
			if (Config.Channel[i].P1_throttle_volume != Config.Channel[i].P2_throttle_volume)
    78cc:	98 17       	cp	r25, r24
    78ce:	09 f4       	brne	.+2      	; 0x78d2 <ProcessMixer+0x85a>
    78d0:	48 c0       	rjmp	.+144    	; 0x7962 <ProcessMixer+0x8ea>
			{
				// Calculate step difference in 1/100ths and round
				temp1 = (Config.Channel[i].P2_throttle_volume - Config.Channel[i].P1_throttle_volume);
    78d2:	99 27       	eor	r25, r25
    78d4:	87 fd       	sbrc	r24, 7
    78d6:	90 95       	com	r25
    78d8:	82 1b       	sub	r24, r18
    78da:	93 0b       	sbc	r25, r19
				temp1 = temp1 << 7; 						// Multiply by 128 so divide gives reasonable step values
    78dc:	96 95       	lsr	r25
    78de:	98 2f       	mov	r25, r24
    78e0:	88 27       	eor	r24, r24
    78e2:	97 95       	ror	r25
    78e4:	87 95       	ror	r24
				Step1 = temp1 / 100;	
    78e6:	b5 01       	movw	r22, r10
    78e8:	0e 94 78 48 	call	0x90f0	; 0x90f0 <__divmodhi4>

				// Set start (P1) point
				temp2 = Config.Channel[i].P1_throttle_volume; // Promote to 16 bits
				temp2 = temp2 << 7;
    78ec:	36 95       	lsr	r19
    78ee:	32 2f       	mov	r19, r18
    78f0:	22 27       	eor	r18, r18
    78f2:	37 95       	ror	r19
    78f4:	27 95       	ror	r18

				// Linear vs. Sinusoidal calculation
				if (Config.Channel[i].Throttle_curve == LINEAR)
    78f6:	f4 01       	movw	r30, r8
    78f8:	80 81       	ld	r24, Z
    78fa:	81 11       	cpse	r24, r1
    78fc:	08 c0       	rjmp	.+16     	; 0x790e <ProcessMixer+0x896>
				{
					// Multiply [transition] steps (0 to 100)
					temp3 = temp2 + (Step1 * transition);
    78fe:	60 9f       	mul	r22, r16
    7900:	c0 01       	movw	r24, r0
    7902:	61 9f       	mul	r22, r17
    7904:	90 0d       	add	r25, r0
    7906:	70 9f       	mul	r23, r16
    7908:	90 0d       	add	r25, r0
    790a:	11 24       	eor	r1, r1
    790c:	20 c0       	rjmp	.+64     	; 0x794e <ProcessMixer+0x8d6>
				}

				// SINE
				else if (Config.Channel[i].Throttle_curve == SINE)
    790e:	81 30       	cpi	r24, 0x01	; 1
    7910:	31 f4       	brne	.+12     	; 0x791e <ProcessMixer+0x8a6>
				{
					// Choose between SINE and COSINE
					// If P2 less than P1, COSINE (reverse SINE) is the one we want
					if (Step1 < 0)
    7912:	77 ff       	sbrs	r23, 7
    7914:	02 c0       	rjmp	.+4      	; 0x791a <ProcessMixer+0x8a2>
					{ 
						// Multiply SIN[100 - transition] steps (0 to 100)
						temp3 = 100 - (int8_t)pgm_read_byte(&SIN[100 - (int8_t)transition]);
    7916:	f2 01       	movw	r30, r4
    7918:	06 c0       	rjmp	.+12     	; 0x7926 <ProcessMixer+0x8ae>
					}
					// If P2 greater than P1, SINE is the one we want
					else
					{
						// Multiply SIN[transition] steps (0 to 100)
						temp3 = (int8_t)pgm_read_byte(&SIN[(int8_t)transition]);
    791a:	f1 01       	movw	r30, r2
    791c:	0d c0       	rjmp	.+26     	; 0x7938 <ProcessMixer+0x8c0>
				// SQRT SINE
				else
				{
					// Choose between SQRT SINE and SQRT COSINE
					// If P2 less than P1, COSINE (reverse SINE) is the one we want
					if (Step1 < 0)
    791e:	77 ff       	sbrs	r23, 7
    7920:	09 c0       	rjmp	.+18     	; 0x7934 <ProcessMixer+0x8bc>
					{ 
						// Multiply SQRTSIN[100 - transition] steps (0 to 100)
						temp3 = 100 - (int8_t)pgm_read_byte(&SQRTSIN[100 - (int8_t)transition]);
    7922:	ef 8d       	ldd	r30, Y+31	; 0x1f
    7924:	f8 a1       	ldd	r31, Y+32	; 0x20
    7926:	84 91       	lpm	r24, Z
    7928:	a5 01       	movw	r20, r10
    792a:	48 1b       	sub	r20, r24
    792c:	51 09       	sbc	r21, r1
    792e:	87 fd       	sbrc	r24, 7
    7930:	53 95       	inc	r21
    7932:	06 c0       	rjmp	.+12     	; 0x7940 <ProcessMixer+0x8c8>
					}
					// If P2 greater than P1, SINE is the one we want
					else
					{
						// Multiply SQRTSIN[transition] steps (0 to 100)
						temp3 = (int8_t)pgm_read_byte(&SQRTSIN[(int8_t)transition]);
    7934:	ed 8d       	ldd	r30, Y+29	; 0x1d
    7936:	fe 8d       	ldd	r31, Y+30	; 0x1e
    7938:	44 91       	lpm	r20, Z
    793a:	55 27       	eor	r21, r21
    793c:	47 fd       	sbrc	r20, 7
    793e:	50 95       	com	r21
					}

					// Get SINE% (temp2) of difference in volumes (Step1)
					// Step1 is already in 100ths of the difference * 128
					// temp1 is the start volume * 128
					temp3 = temp2 + (Step1 * temp3);
    7940:	64 9f       	mul	r22, r20
    7942:	c0 01       	movw	r24, r0
    7944:	65 9f       	mul	r22, r21
    7946:	90 0d       	add	r25, r0
    7948:	74 9f       	mul	r23, r20
    794a:	90 0d       	add	r25, r0
    794c:	11 24       	eor	r1, r1
    794e:	82 0f       	add	r24, r18
    7950:	93 1f       	adc	r25, r19
				}

				// Round, then rescale to normal value
				temp3 = temp3 + 64;
    7952:	bc 01       	movw	r22, r24
    7954:	60 5c       	subi	r22, 0xC0	; 192
    7956:	7f 4f       	sbci	r23, 0xFF	; 255
				temp3 = temp3 >> 7;
    7958:	66 0f       	add	r22, r22
    795a:	67 2f       	mov	r22, r23
    795c:	66 1f       	adc	r22, r22
    795e:	77 0b       	sbc	r23, r23
    7960:	01 c0       	rjmp	.+2      	; 0x7964 <ProcessMixer+0x8ec>
			
			// No curve
			else
			{
				// Just use the value of P1 volume as there is no curve
				temp3 = Config.Channel[i].P1_throttle_volume; // Promote to 16 bits
    7962:	b9 01       	movw	r22, r18
			}

			// Calculate actual throttle value to the curve
			temp3 = scale32(MonopolarThrottle, temp3);
    7964:	80 91 29 08 	lds	r24, 0x0829
    7968:	90 91 2a 08 	lds	r25, 0x082A
    796c:	0e 94 19 38 	call	0x7032	; 0x7032 <scale32>

			// At this point, the throttle values are 0 to 2500 (+/-150%)
			// Re-scale throttle values back to neutral-centered system values (+/-1250) 
			// and set the minimum throttle point to 1.1ms.
			// A THROTTLEMIN value of 1000 will result in 2750, or 1.1ms
			temp3 = temp3 - THROTTLEMIN;
    7970:	88 5e       	subi	r24, 0xE8	; 232
    7972:	93 40       	sbci	r25, 0x03	; 3

			// Add offset to channel value
			Config.Channel[i].P1_value += temp3;
    7974:	d7 01       	movw	r26, r14
    7976:	2d 91       	ld	r18, X+
    7978:	3c 91       	ld	r19, X
    797a:	11 97       	sbiw	r26, 0x01	; 1
    797c:	28 0f       	add	r18, r24
    797e:	39 1f       	adc	r19, r25
    7980:	2d 93       	st	X+, r18
    7982:	3c 93       	st	X, r19
    7984:	08 c0       	rjmp	.+16     	; 0x7996 <ProcessMixer+0x91e>
    7986:	f6 01       	movw	r30, r12
    7988:	36 97       	sbiw	r30, 0x06	; 6

		} // No throttle
		
		// No throttles, so clamp to THROTTLEMIN if flagged as a motor
		else if (Config.Channel[i].Motor_marker == MOTOR)
    798a:	80 81       	ld	r24, Z
    798c:	82 30       	cpi	r24, 0x02	; 2
    798e:	19 f4       	brne	.+6      	; 0x7996 <ProcessMixer+0x91e>
		{
			Config.Channel[i].P1_value = -THROTTLEOFFSET; // 3750-1250 = 2500 = 1.0ms
    7990:	f7 01       	movw	r30, r14
    7992:	71 82       	std	Z+1, r7	; 0x01
    7994:	60 82       	st	Z, r6
    7996:	f6 e2       	ldi	r31, 0x26	; 38
    7998:	ef 0e       	add	r14, r31
    799a:	f1 1c       	adc	r15, r1
    799c:	26 e2       	ldi	r18, 0x26	; 38
    799e:	c2 0e       	add	r12, r18
    79a0:	d1 1c       	adc	r13, r1
    79a2:	36 e2       	ldi	r19, 0x26	; 38
    79a4:	83 0e       	add	r8, r19
    79a6:	91 1c       	adc	r9, r1
	// Groovy throttle curve handling. Must be after the transition.
	// Uses the transition value, but is not part of the transition
	// mixer. Linear or Sine curve. Reverse Sine done automatically
	//************************************************************ 

	for (i = 0; i < MIX_OUTPUTS; i++)
    79a8:	43 e7       	ldi	r20, 0x73	; 115
    79aa:	e4 16       	cp	r14, r20
    79ac:	47 e0       	ldi	r20, 0x07	; 7
    79ae:	f4 06       	cpc	r15, r20
    79b0:	09 f0       	breq	.+2      	; 0x79b4 <ProcessMixer+0x93c>
    79b2:	7e cf       	rjmp	.-260    	; 0x78b0 <ProcessMixer+0x838>
    79b4:	eb e4       	ldi	r30, 0x4B	; 75
    79b6:	f6 e0       	ldi	r31, 0x06	; 6
    79b8:	23 e4       	ldi	r18, 0x43	; 67
    79ba:	36 e0       	ldi	r19, 0x06	; 6
			// Work out distance to cover over stage 2 (P1.n to P2)
			temp2 = Config.Channel[i].P2_offset - Config.Channel[i].P1n_offset;
			temp2 = temp2 << 7;

			// Divide distance into steps
			temp1 = (100 - Config.Channel[i].P1n_position); 
    79bc:	94 e6       	ldi	r25, 0x64	; 100
    79be:	69 2e       	mov	r6, r25
    79c0:	71 2c       	mov	r7, r1
    79c2:	df 01       	movw	r26, r30
    79c4:	13 97       	sbiw	r26, 0x03	; 3
	//************************************************************ 

	for (i = 0; i < MIX_OUTPUTS; i++)
	{
		// Simplify if all are the same
		if (!((Config.Channel[i].P1_offset == Config.Channel[i].P1n_offset) &&
    79c6:	cc 90       	ld	r12, X
    79c8:	12 96       	adiw	r26, 0x02	; 2
    79ca:	ac 90       	ld	r10, X
    79cc:	50 80       	ld	r5, Z
    79ce:	ca 10       	cpse	r12, r10
    79d0:	03 c0       	rjmp	.+6      	; 0x79d8 <ProcessMixer+0x960>
    79d2:	5c 14       	cp	r5, r12
    79d4:	09 f4       	brne	.+2      	; 0x79d8 <ProcessMixer+0x960>
    79d6:	53 c0       	rjmp	.+166    	; 0x7a7e <ProcessMixer+0xa06>
		 	 (Config.Channel[i].P2_offset == Config.Channel[i].P1n_offset)))
		{
			// Work out distance to cover over stage 1 (P1 to P1.n)
			temp1 = Config.Channel[i].P1n_offset - Config.Channel[i].P1_offset;
    79d8:	bb 24       	eor	r11, r11
    79da:	a7 fc       	sbrc	r10, 7
    79dc:	b0 94       	com	r11
    79de:	dd 24       	eor	r13, r13
    79e0:	c7 fc       	sbrc	r12, 7
    79e2:	d0 94       	com	r13
    79e4:	c5 01       	movw	r24, r10
    79e6:	8c 19       	sub	r24, r12
    79e8:	9d 09       	sbc	r25, r13
    79ea:	df 01       	movw	r26, r30
    79ec:	12 97       	sbiw	r26, 0x02	; 2
			temp1 = temp1 << 7; // Multiply by 128 so divide gives reasonable step values

			// Divide distance into steps
			temp2 = Config.Channel[i].P1n_position; 
    79ee:	ec 90       	ld	r14, X
    79f0:	ff 24       	eor	r15, r15
    79f2:	e7 fc       	sbrc	r14, 7
    79f4:	f0 94       	com	r15
		if (!((Config.Channel[i].P1_offset == Config.Channel[i].P1n_offset) &&
		 	 (Config.Channel[i].P2_offset == Config.Channel[i].P1n_offset)))
		{
			// Work out distance to cover over stage 1 (P1 to P1.n)
			temp1 = Config.Channel[i].P1n_offset - Config.Channel[i].P1_offset;
			temp1 = temp1 << 7; // Multiply by 128 so divide gives reasonable step values
    79f6:	96 95       	lsr	r25
    79f8:	98 2f       	mov	r25, r24
    79fa:	88 27       	eor	r24, r24
    79fc:	97 95       	ror	r25
    79fe:	87 95       	ror	r24

			// Divide distance into steps
			temp2 = Config.Channel[i].P1n_position; 
			Step1 = ((temp1 + (temp2 >> 1)) / temp2) ; // Divide and round result
    7a00:	a7 01       	movw	r20, r14
    7a02:	55 95       	asr	r21
    7a04:	47 95       	ror	r20
    7a06:	84 0f       	add	r24, r20
    7a08:	95 1f       	adc	r25, r21
    7a0a:	b7 01       	movw	r22, r14
    7a0c:	0e 94 78 48 	call	0x90f0	; 0x90f0 <__divmodhi4>
    7a10:	4b 01       	movw	r8, r22
		
			// Work out distance to cover over stage 2 (P1.n to P2)
			temp2 = Config.Channel[i].P2_offset - Config.Channel[i].P1n_offset;
    7a12:	85 2d       	mov	r24, r5
    7a14:	99 27       	eor	r25, r25
    7a16:	87 fd       	sbrc	r24, 7
    7a18:	90 95       	com	r25
    7a1a:	8a 19       	sub	r24, r10
    7a1c:	9b 09       	sbc	r25, r11
			temp2 = temp2 << 7;

			// Divide distance into steps
			temp1 = (100 - Config.Channel[i].P1n_position); 
    7a1e:	b3 01       	movw	r22, r6
    7a20:	6e 19       	sub	r22, r14
    7a22:	7f 09       	sbc	r23, r15
			temp2 = Config.Channel[i].P1n_position; 
			Step1 = ((temp1 + (temp2 >> 1)) / temp2) ; // Divide and round result
		
			// Work out distance to cover over stage 2 (P1.n to P2)
			temp2 = Config.Channel[i].P2_offset - Config.Channel[i].P1n_offset;
			temp2 = temp2 << 7;
    7a24:	96 95       	lsr	r25
    7a26:	98 2f       	mov	r25, r24
    7a28:	88 27       	eor	r24, r24
    7a2a:	97 95       	ror	r25
    7a2c:	87 95       	ror	r24

			// Divide distance into steps
			temp1 = (100 - Config.Channel[i].P1n_position); 
			Step2 = ((temp2 + (temp1 >> 1)) / temp1) ; // Divide and round result	
    7a2e:	ab 01       	movw	r20, r22
    7a30:	55 95       	asr	r21
    7a32:	47 95       	ror	r20
    7a34:	84 0f       	add	r24, r20
    7a36:	95 1f       	adc	r25, r21
    7a38:	0e 94 78 48 	call	0x90f0	; 0x90f0 <__divmodhi4>

			// Set start (P1) point
			temp3 = Config.Channel[i].P1_offset; // Promote to 16bits
			temp3 = temp3 << 7;
    7a3c:	d6 94       	lsr	r13
    7a3e:	dc 2c       	mov	r13, r12
    7a40:	cc 24       	eor	r12, r12
    7a42:	d7 94       	ror	r13
    7a44:	c7 94       	ror	r12

			// Count up transition steps of the appropriate step size
			for (j = 0; j < transition; j++)
    7a46:	40 e0       	ldi	r20, 0x00	; 0
    7a48:	84 2f       	mov	r24, r20
    7a4a:	90 e0       	ldi	r25, 0x00	; 0
    7a4c:	80 17       	cp	r24, r16
    7a4e:	91 07       	cpc	r25, r17
    7a50:	54 f4       	brge	.+20     	; 0x7a66 <ProcessMixer+0x9ee>
			{
				// If in stage 1 use Step1 size
				if (j < Config.Channel[i].P1n_position)
    7a52:	8e 15       	cp	r24, r14
    7a54:	9f 05       	cpc	r25, r15
    7a56:	1c f4       	brge	.+6      	; 0x7a5e <ProcessMixer+0x9e6>
				{
					temp3 += Step1;
    7a58:	c8 0c       	add	r12, r8
    7a5a:	d9 1c       	adc	r13, r9
    7a5c:	02 c0       	rjmp	.+4      	; 0x7a62 <ProcessMixer+0x9ea>
				}
				// If in stage 2 use Step2 size
				else
				{
					temp3 += Step2;
    7a5e:	c6 0e       	add	r12, r22
    7a60:	d7 1e       	adc	r13, r23
			// Set start (P1) point
			temp3 = Config.Channel[i].P1_offset; // Promote to 16bits
			temp3 = temp3 << 7;

			// Count up transition steps of the appropriate step size
			for (j = 0; j < transition; j++)
    7a62:	4f 5f       	subi	r20, 0xFF	; 255
    7a64:	f1 cf       	rjmp	.-30     	; 0x7a48 <ProcessMixer+0x9d0>
					temp3 += Step2;
				}
			}

			// Reformat into a system-compatible value
			itemp8 = (int8_t)((temp3 + 64) >> 7);							// Round then divide by 128
    7a66:	c6 01       	movw	r24, r12
    7a68:	80 5c       	subi	r24, 0xC0	; 192
    7a6a:	9f 4f       	sbci	r25, 0xFF	; 255
    7a6c:	88 0f       	add	r24, r24
    7a6e:	89 2f       	mov	r24, r25
    7a70:	88 1f       	adc	r24, r24
    7a72:	99 0b       	sbc	r25, r25
int16_t scale_percent_nooffset(int8_t value)
{
	int16_t temp16_1, temp16_2;

	temp16_1 = value; // Promote
	temp16_2 = (temp16_1 * (int16_t)10);
    7a74:	5a e0       	ldi	r21, 0x0A	; 10
    7a76:	85 02       	muls	r24, r21
    7a78:	60 01       	movw	r12, r0
    7a7a:	11 24       	eor	r1, r1
				}
			}

			// Reformat into a system-compatible value
			itemp8 = (int8_t)((temp3 + 64) >> 7);							// Round then divide by 128
			P1_solution = scale_percent_nooffset(itemp8);	
    7a7c:	05 c0       	rjmp	.+10     	; 0x7a88 <ProcessMixer+0xa10>
int16_t scale_percent_nooffset(int8_t value)
{
	int16_t temp16_1, temp16_2;

	temp16_1 = value; // Promote
	temp16_2 = (temp16_1 * (int16_t)10);
    7a7e:	85 2d       	mov	r24, r5
    7a80:	9a e0       	ldi	r25, 0x0A	; 10
    7a82:	89 02       	muls	r24, r25
    7a84:	60 01       	movw	r12, r0
    7a86:	11 24       	eor	r1, r1
		{
			P1_solution = scale_percent_nooffset(Config.Channel[i].P1_offset);
		}

		// Add offset to channel value
		Config.Channel[i].P1_value += P1_solution;
    7a88:	d9 01       	movw	r26, r18
    7a8a:	4d 91       	ld	r20, X+
    7a8c:	5c 91       	ld	r21, X
    7a8e:	11 97       	sbiw	r26, 0x01	; 1
    7a90:	4c 0d       	add	r20, r12
    7a92:	5d 1d       	adc	r21, r13
    7a94:	4d 93       	st	X+, r20
    7a96:	5c 93       	st	X, r21
    7a98:	2a 5d       	subi	r18, 0xDA	; 218
    7a9a:	3f 4f       	sbci	r19, 0xFF	; 255
    7a9c:	b6 96       	adiw	r30, 0x26	; 38
	//************************************************************
	// Per-channel 3-point offset needs to be after the transition  
	// loop as it is non-linear, unlike the transition.
	//************************************************************ 

	for (i = 0; i < MIX_OUTPUTS; i++)
    7a9e:	b7 e0       	ldi	r27, 0x07	; 7
    7aa0:	eb 37       	cpi	r30, 0x7B	; 123
    7aa2:	fb 07       	cpc	r31, r27
    7aa4:	09 f0       	breq	.+2      	; 0x7aa8 <ProcessMixer+0xa30>
    7aa6:	8d cf       	rjmp	.-230    	; 0x79c2 <ProcessMixer+0x94a>

		// Add offset to channel value
		Config.Channel[i].P1_value += P1_solution;
	}

} // ProcessMixer()
    7aa8:	e2 96       	adiw	r28, 0x32	; 50
    7aaa:	0f b6       	in	r0, 0x3f	; 63
    7aac:	f8 94       	cli
    7aae:	de bf       	out	0x3e, r29	; 62
    7ab0:	0f be       	out	0x3f, r0	; 63
    7ab2:	cd bf       	out	0x3d, r28	; 61
    7ab4:	df 91       	pop	r29
    7ab6:	cf 91       	pop	r28
    7ab8:	1f 91       	pop	r17
    7aba:	0f 91       	pop	r16
    7abc:	ff 90       	pop	r15
    7abe:	ef 90       	pop	r14
    7ac0:	df 90       	pop	r13
    7ac2:	cf 90       	pop	r12
    7ac4:	bf 90       	pop	r11
    7ac6:	af 90       	pop	r10
    7ac8:	9f 90       	pop	r9
    7aca:	8f 90       	pop	r8
    7acc:	7f 90       	pop	r7
    7ace:	6f 90       	pop	r6
    7ad0:	5f 90       	pop	r5
    7ad2:	4f 90       	pop	r4
    7ad4:	3f 90       	pop	r3
    7ad6:	2f 90       	pop	r2
    7ad8:	08 95       	ret

00007ada <scale_percent>:
int16_t scale_percent(int8_t value)
{
	int16_t temp16_1, temp16_2;

	temp16_1 = value; // Promote
	temp16_2 = ((temp16_1 * (int16_t)10) + 3750);
    7ada:	2a e0       	ldi	r18, 0x0A	; 10
    7adc:	82 02       	muls	r24, r18
    7ade:	c0 01       	movw	r24, r0
    7ae0:	11 24       	eor	r1, r1

	return temp16_2;
}
    7ae2:	8a 55       	subi	r24, 0x5A	; 90
    7ae4:	91 4f       	sbci	r25, 0xF1	; 241
    7ae6:	08 95       	ret

00007ae8 <mugui_text_sizestring>:
	\return void
	\date 	12.08.2009
*/
/************************************************************************/
void mugui_text_sizestring(mugui_char_t *s, const unsigned char* font, mugui_size16_t *size)
{
    7ae8:	df 92       	push	r13
    7aea:	ef 92       	push	r14
    7aec:	ff 92       	push	r15
    7aee:	0f 93       	push	r16
    7af0:	1f 93       	push	r17
    7af2:	cf 93       	push	r28
    7af4:	df 93       	push	r29
	mugui_uint8_t  indexhighbyte = 0; 		//high byte of the bitmap address in the array
	mugui_uint32_t indexaddress = 0;		//bitmap address in the array (derived from low and high byte)

	/* read header of the font          */
	/* pgm_read_byte is ATMega specific */
	length = strlen(s);
    7af6:	dc 01       	movw	r26, r24
    7af8:	0d 90       	ld	r0, X+
    7afa:	00 20       	and	r0, r0
    7afc:	e9 f7       	brne	.-6      	; 0x7af8 <mugui_text_sizestring+0x10>
    7afe:	11 97       	sbiw	r26, 0x01	; 1
    7b00:	a8 1b       	sub	r26, r24
    7b02:	b9 0b       	sbc	r27, r25
	height = pgm_read_byte(&font[4]);
    7b04:	fb 01       	movw	r30, r22
    7b06:	34 96       	adiw	r30, 0x04	; 4
    7b08:	e4 90       	lpm	r14, Z
    7b0a:	f1 2c       	mov	r15, r1

	startcharacter = pgm_read_byte(&font[2]);
    7b0c:	32 97       	sbiw	r30, 0x02	; 2
    7b0e:	d4 90       	lpm	r13, Z
    7b10:	ec 01       	movw	r28, r24
    7b12:	a8 0f       	add	r26, r24
    7b14:	b9 1f       	adc	r27, r25
	mugui_uint8_t  distance = 1;			//distance between characters
	mugui_uint16_t length = 0;				//temporary length of string
	mugui_uint16_t i = 0;					//counter variable
	mugui_uint16_t startcharacter = 0; 	    //startcharacter of the font
	mugui_uint16_t height = 0;				//height of the bitmap
	mugui_uint16_t width = 0; 				//width of the bitmap
    7b16:	80 e0       	ldi	r24, 0x00	; 0
    7b18:	90 e0       	ldi	r25, 0x00	; 0
	/* pgm_read_byte is ATMega specific */
	length = strlen(s);
	height = pgm_read_byte(&font[4]);

	startcharacter = pgm_read_byte(&font[2]);
	for(i=0;i<length;i++) //every character in prop fonts has its own width
    7b1a:	ca 17       	cp	r28, r26
    7b1c:	db 07       	cpc	r29, r27
    7b1e:	29 f1       	breq	.+74     	; 0x7b6a <mugui_text_sizestring+0x82>
	{
		index = s[i] - startcharacter;
    7b20:	29 91       	ld	r18, Y+
    7b22:	2d 19       	sub	r18, r13
		indexhighbyte = pgm_read_byte(&font[index*2 + 5]);
    7b24:	30 e0       	ldi	r19, 0x00	; 0
    7b26:	22 0f       	add	r18, r18
    7b28:	33 1f       	adc	r19, r19
    7b2a:	f9 01       	movw	r30, r18
    7b2c:	35 96       	adiw	r30, 0x05	; 5
    7b2e:	e6 0f       	add	r30, r22
    7b30:	f7 1f       	adc	r31, r23
    7b32:	04 91       	lpm	r16, Z
		indexlowbyte = pgm_read_byte(&font[index*2 + 6]);
    7b34:	f9 01       	movw	r30, r18
    7b36:	36 96       	adiw	r30, 0x06	; 6
    7b38:	e6 0f       	add	r30, r22
    7b3a:	f7 1f       	adc	r31, r23
    7b3c:	e4 91       	lpm	r30, Z
		indexaddress = (mugui_int64_t)indexhighbyte;
    7b3e:	10 e0       	ldi	r17, 0x00	; 0
    7b40:	20 e0       	ldi	r18, 0x00	; 0
    7b42:	30 e0       	ldi	r19, 0x00	; 0
		indexaddress = indexaddress << 8;
    7b44:	32 2f       	mov	r19, r18
    7b46:	21 2f       	mov	r18, r17
    7b48:	10 2f       	mov	r17, r16
    7b4a:	00 27       	eor	r16, r16
		indexaddress += indexlowbyte;
    7b4c:	0e 0f       	add	r16, r30
    7b4e:	11 1d       	adc	r17, r1
    7b50:	21 1d       	adc	r18, r1
    7b52:	31 1d       	adc	r19, r1
		width += pgm_read_byte(&font[indexaddress]) + distance;
    7b54:	fb 01       	movw	r30, r22
    7b56:	e0 0f       	add	r30, r16
    7b58:	f1 1f       	adc	r31, r17
    7b5a:	04 91       	lpm	r16, Z
    7b5c:	20 2f       	mov	r18, r16
    7b5e:	30 e0       	ldi	r19, 0x00	; 0
    7b60:	2f 5f       	subi	r18, 0xFF	; 255
    7b62:	3f 4f       	sbci	r19, 0xFF	; 255
    7b64:	82 0f       	add	r24, r18
    7b66:	93 1f       	adc	r25, r19
    7b68:	d8 cf       	rjmp	.-80     	; 0x7b1a <mugui_text_sizestring+0x32>
	}

	/* prepare return value */
	size->x = width;
    7b6a:	fa 01       	movw	r30, r20
    7b6c:	91 83       	std	Z+1, r25	; 0x01
    7b6e:	80 83       	st	Z, r24
	size->y = height;
    7b70:	f3 82       	std	Z+3, r15	; 0x03
    7b72:	e2 82       	std	Z+2, r14	; 0x02
}
    7b74:	df 91       	pop	r29
    7b76:	cf 91       	pop	r28
    7b78:	1f 91       	pop	r17
    7b7a:	0f 91       	pop	r16
    7b7c:	ff 90       	pop	r15
    7b7e:	ef 90       	pop	r14
    7b80:	df 90       	pop	r13
    7b82:	08 95       	ret

00007b84 <pgm_mugui_scopy>:
	\date 	30.07.2012
	\Created by D. Thompson
*/
/************************************************************************/
void pgm_mugui_scopy(const char *s)
{
    7b84:	a3 e6       	ldi	r26, 0x63	; 99
    7b86:	b5 e0       	ldi	r27, 0x05	; 5
	int i = 0;
    7b88:	20 e0       	ldi	r18, 0x00	; 0
    7b8a:	30 e0       	ldi	r19, 0x00	; 0
    7b8c:	fc 01       	movw	r30, r24
    7b8e:	e2 0f       	add	r30, r18
    7b90:	f3 1f       	adc	r31, r19

	// Copy string until terminator but don't over-write buffer
	while((pgm_read_byte(s) != 0x00) && (i < (PBUFFER_SIZE - 1)))
    7b92:	44 91       	lpm	r20, Z
    7b94:	44 23       	and	r20, r20
    7b96:	41 f0       	breq	.+16     	; 0x7ba8 <pgm_mugui_scopy+0x24>
    7b98:	2f 30       	cpi	r18, 0x0F	; 15
    7b9a:	31 05       	cpc	r19, r1
    7b9c:	29 f0       	breq	.+10     	; 0x7ba8 <pgm_mugui_scopy+0x24>
	{
		pBuffer[i] = pgm_read_byte(s++);
    7b9e:	e4 91       	lpm	r30, Z
    7ba0:	ed 93       	st	X+, r30
		i++;
    7ba2:	2f 5f       	subi	r18, 0xFF	; 255
    7ba4:	3f 4f       	sbci	r19, 0xFF	; 255
    7ba6:	f2 cf       	rjmp	.-28     	; 0x7b8c <pgm_mugui_scopy+0x8>
	}
	
	// Add the terminator regardless of the amount copied
	pBuffer[i] = 0x00;
    7ba8:	f9 01       	movw	r30, r18
    7baa:	ed 59       	subi	r30, 0x9D	; 157
    7bac:	fa 4f       	sbci	r31, 0xFA	; 250
    7bae:	10 82       	st	Z, r1
    7bb0:	08 95       	ret

00007bb2 <mugui_lcd_putc>:
	\date 	13.11.2009
	\Modified by D. Thompson 14/08/2012 - Now hard-coded for proportional, type 2 (verticalCeiling)
*/
/************************************************************************/
mugui_uint16_t mugui_lcd_putc(mugui_char_t c, const unsigned char* font,mugui_uint16_t x, mugui_uint16_t y)
{
    7bb2:	2f 92       	push	r2
    7bb4:	3f 92       	push	r3
    7bb6:	4f 92       	push	r4
    7bb8:	5f 92       	push	r5
    7bba:	6f 92       	push	r6
    7bbc:	7f 92       	push	r7
    7bbe:	8f 92       	push	r8
    7bc0:	9f 92       	push	r9
    7bc2:	af 92       	push	r10
    7bc4:	bf 92       	push	r11
    7bc6:	cf 92       	push	r12
    7bc8:	df 92       	push	r13
    7bca:	ef 92       	push	r14
    7bcc:	ff 92       	push	r15
    7bce:	0f 93       	push	r16
    7bd0:	1f 93       	push	r17
    7bd2:	cf 93       	push	r28
    7bd4:	df 93       	push	r29
    7bd6:	cd b7       	in	r28, 0x3d	; 61
    7bd8:	de b7       	in	r29, 0x3e	; 62
    7bda:	29 97       	sbiw	r28, 0x09	; 9
    7bdc:	0f b6       	in	r0, 0x3f	; 63
    7bde:	f8 94       	cli
    7be0:	de bf       	out	0x3e, r29	; 62
    7be2:	0f be       	out	0x3f, r0	; 63
    7be4:	cd bf       	out	0x3d, r28	; 61
    7be6:	4c 83       	std	Y+4, r20	; 0x04
    7be8:	2d 83       	std	Y+5, r18	; 0x05
	mugui_uint8_t  tc= 0;	 				//temorary count
	mugui_uint8_t  bytes= 0;  				//bytes per line or row

	/* Read header of the font          */
	/* pgm_read_byte is ATMega specific */
	startcharacter = pgm_read_byte(&font[2]);
    7bea:	fb 01       	movw	r30, r22
    7bec:	32 96       	adiw	r30, 0x02	; 2
    7bee:	94 91       	lpm	r25, Z
	height = pgm_read_byte(&font[4]);
    7bf0:	32 96       	adiw	r30, 0x02	; 2
    7bf2:	e4 91       	lpm	r30, Z
    7bf4:	2e 2e       	mov	r2, r30
    7bf6:	31 2c       	mov	r3, r1

	/* Read the rest of the header */
	index = c - startcharacter;
    7bf8:	89 1b       	sub	r24, r25
	indexhighbyte = pgm_read_byte(&font[index*2 + 5]);
    7bfa:	90 e0       	ldi	r25, 0x00	; 0
    7bfc:	88 0f       	add	r24, r24
    7bfe:	99 1f       	adc	r25, r25
    7c00:	fc 01       	movw	r30, r24
    7c02:	35 96       	adiw	r30, 0x05	; 5
    7c04:	e6 0f       	add	r30, r22
    7c06:	f7 1f       	adc	r31, r23
    7c08:	64 90       	lpm	r6, Z
	indexlowbyte = pgm_read_byte(&font[index*2 + 6]);
    7c0a:	fc 01       	movw	r30, r24
    7c0c:	36 96       	adiw	r30, 0x06	; 6
    7c0e:	e6 0f       	add	r30, r22
    7c10:	f7 1f       	adc	r31, r23
    7c12:	84 91       	lpm	r24, Z
	indexaddress = (mugui_int64_t)indexhighbyte;
    7c14:	06 2d       	mov	r16, r6
    7c16:	10 e0       	ldi	r17, 0x00	; 0
    7c18:	20 e0       	ldi	r18, 0x00	; 0
    7c1a:	30 e0       	ldi	r19, 0x00	; 0
	indexaddress = indexaddress << 8;
    7c1c:	32 2f       	mov	r19, r18
    7c1e:	21 2f       	mov	r18, r17
    7c20:	10 2f       	mov	r17, r16
    7c22:	00 27       	eor	r16, r16
	indexaddress += indexlowbyte;
    7c24:	08 0f       	add	r16, r24
    7c26:	11 1d       	adc	r17, r1
    7c28:	21 1d       	adc	r18, r1
    7c2a:	31 1d       	adc	r19, r1
	width = pgm_read_byte(&font[indexaddress]);
    7c2c:	c8 01       	movw	r24, r16
    7c2e:	fb 01       	movw	r30, r22
    7c30:	e0 0f       	add	r30, r16
    7c32:	f1 1f       	adc	r31, r17
    7c34:	64 90       	lpm	r6, Z
    7c36:	71 2c       	mov	r7, r1

	/* Determine the number of bytes for given width */ 
	bytes = ((height-1)>>3)+1;
    7c38:	21 01       	movw	r4, r2
    7c3a:	21 e0       	ldi	r18, 0x01	; 1
    7c3c:	42 1a       	sub	r4, r18
    7c3e:	51 08       	sbc	r5, r1
    7c40:	13 e0       	ldi	r17, 0x03	; 3
    7c42:	56 94       	lsr	r5
    7c44:	47 94       	ror	r4
    7c46:	1a 95       	dec	r17
    7c48:	e1 f7       	brne	.-8      	; 0x7c42 <mugui_lcd_putc+0x90>
    7c4a:	43 94       	inc	r4
    7c4c:	a4 2d       	mov	r26, r4
    7c4e:	b0 e0       	ldi	r27, 0x00	; 0
    7c50:	ba 83       	std	Y+2, r27	; 0x02
    7c52:	a9 83       	std	Y+1, r26	; 0x01
	/* For every column */
	for(tx= 0; tx < width; tx++) //for every row
    7c54:	a1 2c       	mov	r10, r1
    7c56:	b1 2c       	mov	r11, r1
    7c58:	00 e0       	ldi	r16, 0x00	; 0
    7c5a:	10 e0       	ldi	r17, 0x00	; 0
    7c5c:	4b 01       	movw	r8, r22
    7c5e:	bf ef       	ldi	r27, 0xFF	; 255
    7c60:	8b 1a       	sub	r8, r27
    7c62:	9b 0a       	sbc	r9, r27
    7c64:	88 0e       	add	r8, r24
    7c66:	99 1e       	adc	r9, r25
    7c68:	06 15       	cp	r16, r6
    7c6a:	17 05       	cpc	r17, r7
    7c6c:	08 f0       	brcs	.+2      	; 0x7c70 <mugui_lcd_putc+0xbe>
    7c6e:	43 c0       	rjmp	.+134    	; 0x7cf6 <mugui_lcd_putc+0x144>
    7c70:	c1 2c       	mov	r12, r1
    7c72:	d1 2c       	mov	r13, r1
    7c74:	e1 2c       	mov	r14, r1
    7c76:	f1 2c       	mov	r15, r1
    7c78:	94 01       	movw	r18, r8
    7c7a:	2a 0d       	add	r18, r10
    7c7c:	3b 1d       	adc	r19, r11
    7c7e:	3f 83       	std	Y+7, r19	; 0x07
    7c80:	2e 83       	std	Y+6, r18	; 0x06
    7c82:	5c 80       	ldd	r5, Y+4	; 0x04
    7c84:	50 0e       	add	r5, r16
	{
		ty = 0;
		/* For every byte */
		for(tb = 0; tb < bytes; tb ++)
    7c86:	c4 14       	cp	r12, r4
    7c88:	78 f5       	brcc	.+94     	; 0x7ce8 <mugui_lcd_putc+0x136>
    7c8a:	ee 81       	ldd	r30, Y+6	; 0x06
    7c8c:	ff 81       	ldd	r31, Y+7	; 0x07
    7c8e:	ec 0d       	add	r30, r12
    7c90:	fd 1d       	adc	r31, r13
		{
			/* Read bytes from program memory - ATMega specific */
			data = pgm_read_byte(&font[indexaddress + 1 + bytes*tx + tb]);
    7c92:	34 91       	lpm	r19, Z
    7c94:	3b 83       	std	Y+3, r19	; 0x03
    7c96:	19 86       	std	Y+9, r1	; 0x09
    7c98:	18 86       	std	Y+8, r1	; 0x08
			/* For every bit within the height */
			for(tc = 0;  ( (tc < 8) && (ty < height) ); tc ++)
    7c9a:	e2 14       	cp	r14, r2
    7c9c:	f3 04       	cpc	r15, r3
    7c9e:	00 f5       	brcc	.+64     	; 0x7ce0 <mugui_lcd_putc+0x12e>
			{
					/* Determine the bit mask */
					mask = 1<<(tc);
    7ca0:	81 e0       	ldi	r24, 0x01	; 1
    7ca2:	90 e0       	ldi	r25, 0x00	; 0
    7ca4:	08 84       	ldd	r0, Y+8	; 0x08
    7ca6:	02 c0       	rjmp	.+4      	; 0x7cac <mugui_lcd_putc+0xfa>
    7ca8:	88 0f       	add	r24, r24
    7caa:	99 1f       	adc	r25, r25
    7cac:	0a 94       	dec	r0
    7cae:	e2 f7       	brpl	.-8      	; 0x7ca8 <mugui_lcd_putc+0xf6>
					bit = data & mask;
    7cb0:	3b 81       	ldd	r19, Y+3	; 0x03
    7cb2:	83 23       	and	r24, r19
    7cb4:	4d 81       	ldd	r20, Y+5	; 0x05
    7cb6:	4e 0d       	add	r20, r14
					if(bit)
    7cb8:	88 23       	and	r24, r24
    7cba:	11 f0       	breq	.+4      	; 0x7cc0 <mugui_lcd_putc+0x10e>
					{
						setpixel(buffer,tx+x,ty+y,1);
    7cbc:	21 e0       	ldi	r18, 0x01	; 1
    7cbe:	01 c0       	rjmp	.+2      	; 0x7cc2 <mugui_lcd_putc+0x110>
					}
					else
					{
						setpixel(buffer,tx+x,ty+y,0);
    7cc0:	20 e0       	ldi	r18, 0x00	; 0
    7cc2:	65 2d       	mov	r22, r5
    7cc4:	85 e0       	ldi	r24, 0x05	; 5
    7cc6:	91 e0       	ldi	r25, 0x01	; 1
    7cc8:	0e 94 ce 20 	call	0x419c	; 0x419c <setpixel>
					}
					ty++;
    7ccc:	8f ef       	ldi	r24, 0xFF	; 255
    7cce:	e8 1a       	sub	r14, r24
    7cd0:	f8 0a       	sbc	r15, r24
    7cd2:	a8 85       	ldd	r26, Y+8	; 0x08
    7cd4:	b9 85       	ldd	r27, Y+9	; 0x09
    7cd6:	11 96       	adiw	r26, 0x01	; 1
    7cd8:	b9 87       	std	Y+9, r27	; 0x09
    7cda:	a8 87       	std	Y+8, r26	; 0x08
		for(tb = 0; tb < bytes; tb ++)
		{
			/* Read bytes from program memory - ATMega specific */
			data = pgm_read_byte(&font[indexaddress + 1 + bytes*tx + tb]);
			/* For every bit within the height */
			for(tc = 0;  ( (tc < 8) && (ty < height) ); tc ++)
    7cdc:	18 97       	sbiw	r26, 0x08	; 8
    7cde:	e9 f6       	brne	.-70     	; 0x7c9a <mugui_lcd_putc+0xe8>
    7ce0:	bf ef       	ldi	r27, 0xFF	; 255
    7ce2:	cb 1a       	sub	r12, r27
    7ce4:	db 0a       	sbc	r13, r27
    7ce6:	cf cf       	rjmp	.-98     	; 0x7c86 <mugui_lcd_putc+0xd4>
	width = pgm_read_byte(&font[indexaddress]);

	/* Determine the number of bytes for given width */ 
	bytes = ((height-1)>>3)+1;
	/* For every column */
	for(tx= 0; tx < width; tx++) //for every row
    7ce8:	0f 5f       	subi	r16, 0xFF	; 255
    7cea:	1f 4f       	sbci	r17, 0xFF	; 255
    7cec:	e9 81       	ldd	r30, Y+1	; 0x01
    7cee:	fa 81       	ldd	r31, Y+2	; 0x02
    7cf0:	ae 0e       	add	r10, r30
    7cf2:	bf 1e       	adc	r11, r31
    7cf4:	b9 cf       	rjmp	.-142    	; 0x7c68 <mugui_lcd_putc+0xb6>
			}
		}
	}

	return width;
}
    7cf6:	c3 01       	movw	r24, r6
    7cf8:	29 96       	adiw	r28, 0x09	; 9
    7cfa:	0f b6       	in	r0, 0x3f	; 63
    7cfc:	f8 94       	cli
    7cfe:	de bf       	out	0x3e, r29	; 62
    7d00:	0f be       	out	0x3f, r0	; 63
    7d02:	cd bf       	out	0x3d, r28	; 61
    7d04:	df 91       	pop	r29
    7d06:	cf 91       	pop	r28
    7d08:	1f 91       	pop	r17
    7d0a:	0f 91       	pop	r16
    7d0c:	ff 90       	pop	r15
    7d0e:	ef 90       	pop	r14
    7d10:	df 90       	pop	r13
    7d12:	cf 90       	pop	r12
    7d14:	bf 90       	pop	r11
    7d16:	af 90       	pop	r10
    7d18:	9f 90       	pop	r9
    7d1a:	8f 90       	pop	r8
    7d1c:	7f 90       	pop	r7
    7d1e:	6f 90       	pop	r6
    7d20:	5f 90       	pop	r5
    7d22:	4f 90       	pop	r4
    7d24:	3f 90       	pop	r3
    7d26:	2f 90       	pop	r2
    7d28:	08 95       	ret

00007d2a <pgm_mugui_lcd_puts>:
	\date 	12.08.2009
	\Modified by D. Thompson 27/07/2012
*/
/************************************************************************/
void pgm_mugui_lcd_puts(const unsigned char* s, const unsigned char* font,mugui_uint16_t x, mugui_uint16_t y)
{
    7d2a:	af 92       	push	r10
    7d2c:	bf 92       	push	r11
    7d2e:	cf 92       	push	r12
    7d30:	df 92       	push	r13
    7d32:	ef 92       	push	r14
    7d34:	ff 92       	push	r15
    7d36:	0f 93       	push	r16
    7d38:	1f 93       	push	r17
    7d3a:	cf 93       	push	r28
    7d3c:	df 93       	push	r29
    7d3e:	ec 01       	movw	r28, r24
    7d40:	7b 01       	movw	r14, r22
    7d42:	6a 01       	movw	r12, r20
    7d44:	59 01       	movw	r10, r18
	mugui_uint8_t distance  = 1;			// Distance between characters
	mugui_uint16_t xpos     = 0;			// Relative xpos of character
    7d46:	00 e0       	ldi	r16, 0x00	; 0
    7d48:	10 e0       	ldi	r17, 0x00	; 0

	while(pgm_read_byte(s) != 0x00) 
    7d4a:	ce 01       	movw	r24, r28
    7d4c:	fe 01       	movw	r30, r28
    7d4e:	24 91       	lpm	r18, Z
    7d50:	22 23       	and	r18, r18
    7d52:	71 f0       	breq	.+28     	; 0x7d70 <pgm_mugui_lcd_puts+0x46>
	{
		xpos += mugui_lcd_putc(pgm_read_byte(s++), font, x + xpos, y) + distance;
    7d54:	21 96       	adiw	r28, 0x01	; 1
    7d56:	fc 01       	movw	r30, r24
    7d58:	84 91       	lpm	r24, Z
    7d5a:	a8 01       	movw	r20, r16
    7d5c:	4c 0d       	add	r20, r12
    7d5e:	5d 1d       	adc	r21, r13
    7d60:	95 01       	movw	r18, r10
    7d62:	b7 01       	movw	r22, r14
    7d64:	0e 94 d9 3d 	call	0x7bb2	; 0x7bb2 <mugui_lcd_putc>
    7d68:	01 96       	adiw	r24, 0x01	; 1
    7d6a:	08 0f       	add	r16, r24
    7d6c:	19 1f       	adc	r17, r25
    7d6e:	ed cf       	rjmp	.-38     	; 0x7d4a <pgm_mugui_lcd_puts+0x20>
	}
}
    7d70:	df 91       	pop	r29
    7d72:	cf 91       	pop	r28
    7d74:	1f 91       	pop	r17
    7d76:	0f 91       	pop	r16
    7d78:	ff 90       	pop	r15
    7d7a:	ef 90       	pop	r14
    7d7c:	df 90       	pop	r13
    7d7e:	cf 90       	pop	r12
    7d80:	bf 90       	pop	r11
    7d82:	af 90       	pop	r10
    7d84:	08 95       	ret

00007d86 <mugui_lcd_puts>:
	\return void
	\date 	12.08.2009
*/
/************************************************************************/
void mugui_lcd_puts(mugui_char_t *s, const unsigned char* font,mugui_uint16_t x, mugui_uint16_t y)
{
    7d86:	8f 92       	push	r8
    7d88:	9f 92       	push	r9
    7d8a:	af 92       	push	r10
    7d8c:	bf 92       	push	r11
    7d8e:	cf 92       	push	r12
    7d90:	df 92       	push	r13
    7d92:	ef 92       	push	r14
    7d94:	ff 92       	push	r15
    7d96:	0f 93       	push	r16
    7d98:	1f 93       	push	r17
    7d9a:	cf 93       	push	r28
    7d9c:	df 93       	push	r29
    7d9e:	6b 01       	movw	r12, r22
    7da0:	5a 01       	movw	r10, r20
    7da2:	49 01       	movw	r8, r18
	mugui_uint8_t distance  = 1;			//distance between characters
	mugui_uint16_t xpos     = 0;			//relativ xpos of character
	mugui_uint16_t length 	= 0;			//temporary length of string
	mugui_uint16_t i 		= 0;			//counter variable
	
	length = strlen(s);
    7da4:	ec 01       	movw	r28, r24
    7da6:	09 90       	ld	r0, Y+
    7da8:	00 20       	and	r0, r0
    7daa:	e9 f7       	brne	.-6      	; 0x7da6 <mugui_lcd_puts+0x20>
    7dac:	8c 01       	movw	r16, r24
    7dae:	21 97       	sbiw	r28, 0x01	; 1
*/
/************************************************************************/
void mugui_lcd_puts(mugui_char_t *s, const unsigned char* font,mugui_uint16_t x, mugui_uint16_t y)
{
	mugui_uint8_t distance  = 1;			//distance between characters
	mugui_uint16_t xpos     = 0;			//relativ xpos of character
    7db0:	e1 2c       	mov	r14, r1
    7db2:	f1 2c       	mov	r15, r1
	mugui_uint16_t length 	= 0;			//temporary length of string
	mugui_uint16_t i 		= 0;			//counter variable
	
	length = strlen(s);
	for(i=0; i<length; i++)
    7db4:	0c 17       	cp	r16, r28
    7db6:	1d 07       	cpc	r17, r29
    7db8:	71 f0       	breq	.+28     	; 0x7dd6 <mugui_lcd_puts+0x50>
	{
		xpos += mugui_lcd_putc(s[i], font, x + xpos, y) + distance;
    7dba:	a7 01       	movw	r20, r14
    7dbc:	4a 0d       	add	r20, r10
    7dbe:	5b 1d       	adc	r21, r11
    7dc0:	94 01       	movw	r18, r8
    7dc2:	b6 01       	movw	r22, r12
    7dc4:	f8 01       	movw	r30, r16
    7dc6:	81 91       	ld	r24, Z+
    7dc8:	8f 01       	movw	r16, r30
    7dca:	0e 94 d9 3d 	call	0x7bb2	; 0x7bb2 <mugui_lcd_putc>
    7dce:	01 96       	adiw	r24, 0x01	; 1
    7dd0:	e8 0e       	add	r14, r24
    7dd2:	f9 1e       	adc	r15, r25
    7dd4:	ef cf       	rjmp	.-34     	; 0x7db4 <mugui_lcd_puts+0x2e>
	}
}
    7dd6:	df 91       	pop	r29
    7dd8:	cf 91       	pop	r28
    7dda:	1f 91       	pop	r17
    7ddc:	0f 91       	pop	r16
    7dde:	ff 90       	pop	r15
    7de0:	ef 90       	pop	r14
    7de2:	df 90       	pop	r13
    7de4:	cf 90       	pop	r12
    7de6:	bf 90       	pop	r11
    7de8:	af 90       	pop	r10
    7dea:	9f 90       	pop	r9
    7dec:	8f 90       	pop	r8
    7dee:	08 95       	ret

00007df0 <Sensor_PID>:
int32_t PID_AvgAccVert = 0;
float 	gyroSmooth[NUMBEROFAXIS];					// Filtered gyro data
	
// Run each loop to average gyro data and also accVert data
void Sensor_PID(void)
{
    7df0:	2f 92       	push	r2
    7df2:	3f 92       	push	r3
    7df4:	4f 92       	push	r4
    7df6:	5f 92       	push	r5
    7df8:	6f 92       	push	r6
    7dfa:	7f 92       	push	r7
    7dfc:	8f 92       	push	r8
    7dfe:	9f 92       	push	r9
    7e00:	af 92       	push	r10
    7e02:	bf 92       	push	r11
    7e04:	cf 92       	push	r12
    7e06:	df 92       	push	r13
    7e08:	ef 92       	push	r14
    7e0a:	ff 92       	push	r15
    7e0c:	0f 93       	push	r16
    7e0e:	1f 93       	push	r17
    7e10:	cf 93       	push	r28
    7e12:	df 93       	push	r29
    7e14:	cd b7       	in	r28, 0x3d	; 61
    7e16:	de b7       	in	r29, 0x3e	; 62
    7e18:	6d 97       	sbiw	r28, 0x1d	; 29
    7e1a:	0f b6       	in	r0, 0x3f	; 63
    7e1c:	f8 94       	cli
    7e1e:	de bf       	out	0x3e, r29	; 62
    7e20:	0f be       	out	0x3f, r0	; 63
    7e22:	cd bf       	out	0x3d, r28	; 61
	// RIGHT roll = +ve gyro, UP pitch = +ve gyro and LEFT yaw = +ve gyro.
	// However the way we have organised stick polarity, RIGHT roll and yaw are +ve, and DOWN elevator is too.
	// When combining with the gyro signals, the sticks have to be in the opposite polarity as the gyros.
	// As described above, pitch and yaw are already opposed, but roll needs to be reversed.

	int16_t	RCinputsAxis[NUMBEROFAXIS] = {-RCinputs[AILERON], RCinputs[ELEVATOR], RCinputs[RUDDER]};
    7e24:	80 91 2d 08 	lds	r24, 0x082D
    7e28:	90 91 2e 08 	lds	r25, 0x082E
    7e2c:	91 95       	neg	r25
    7e2e:	81 95       	neg	r24
    7e30:	91 09       	sbc	r25, r1
    7e32:	98 87       	std	Y+8, r25	; 0x08
    7e34:	8f 83       	std	Y+7, r24	; 0x07
    7e36:	80 91 2f 08 	lds	r24, 0x082F
    7e3a:	90 91 30 08 	lds	r25, 0x0830
    7e3e:	9a 87       	std	Y+10, r25	; 0x0a
    7e40:	89 87       	std	Y+9, r24	; 0x09
    7e42:	80 91 31 08 	lds	r24, 0x0831
    7e46:	90 91 32 08 	lds	r25, 0x0832
    7e4a:	9c 87       	std	Y+12, r25	; 0x0c
    7e4c:	8b 87       	std	Y+11, r24	; 0x0b
	
	int8_t Stick_rates[FLIGHT_MODES][NUMBEROFAXIS] =
    7e4e:	80 91 e6 05 	lds	r24, 0x05E6
    7e52:	89 83       	std	Y+1, r24	; 0x01
    7e54:	80 91 ec 05 	lds	r24, 0x05EC
    7e58:	8a 83       	std	Y+2, r24	; 0x02
    7e5a:	80 91 f2 05 	lds	r24, 0x05F2
    7e5e:	8b 83       	std	Y+3, r24	; 0x03
    7e60:	80 91 f8 05 	lds	r24, 0x05F8
    7e64:	8c 83       	std	Y+4, r24	; 0x04
    7e66:	80 91 fe 05 	lds	r24, 0x05FE
    7e6a:	8d 83       	std	Y+5, r24	; 0x05
    7e6c:	80 91 04 06 	lds	r24, 0x0604
    7e70:	8e 83       	std	Y+6, r24	; 0x06
		{Config.FlightMode[P1].Roll_Rate, Config.FlightMode[P1].Pitch_Rate, Config.FlightMode[P1].Yaw_Rate},
		{Config.FlightMode[P2].Roll_Rate, Config.FlightMode[P2].Pitch_Rate, Config.FlightMode[P2].Yaw_Rate}
	};
	
	// Gyro LPF scale
	tempf = pgm_read_byte(&LPF_lookup[Config.Gyro_LPF]); // Lookup actual LPF value and promote
    7e72:	60 91 40 06 	lds	r22, 0x0640
    7e76:	e6 2f       	mov	r30, r22
    7e78:	ff 27       	eor	r31, r31
    7e7a:	e7 fd       	sbrc	r30, 7
    7e7c:	f0 95       	com	r31
    7e7e:	ef 52       	subi	r30, 0x2F	; 47
    7e80:	f8 4e       	sbci	r31, 0xE8	; 232
    7e82:	64 91       	lpm	r22, Z
    7e84:	70 e0       	ldi	r23, 0x00	; 0
    7e86:	80 e0       	ldi	r24, 0x00	; 0
    7e88:	90 e0       	ldi	r25, 0x00	; 0
    7e8a:	0e 94 4b 47 	call	0x8e96	; 0x8e96 <__floatunsisf>
    7e8e:	6b 01       	movw	r12, r22
    7e90:	7c 01       	movw	r14, r24
    7e92:	83 e7       	ldi	r24, 0x73	; 115
    7e94:	a8 2e       	mov	r10, r24
    7e96:	85 e0       	ldi	r24, 0x05	; 5
    7e98:	b8 2e       	mov	r11, r24
    7e9a:	95 e0       	ldi	r25, 0x05	; 5
    7e9c:	89 2e       	mov	r8, r25
    7e9e:	98 e0       	ldi	r25, 0x08	; 8
    7ea0:	99 2e       	mov	r9, r25
    7ea2:	0d ee       	ldi	r16, 0xED	; 237
    7ea4:	17 e0       	ldi	r17, 0x07	; 7
    7ea6:	2b e2       	ldi	r18, 0x2B	; 43
    7ea8:	36 e0       	ldi	r19, 0x06	; 6
    7eaa:	3b 8b       	std	Y+19, r19	; 0x13
    7eac:	2a 8b       	std	Y+18, r18	; 0x12
    7eae:	ae 01       	movw	r20, r28
    7eb0:	49 5f       	subi	r20, 0xF9	; 249
    7eb2:	5f 4f       	sbci	r21, 0xFF	; 255
    7eb4:	5d 8b       	std	Y+21, r21	; 0x15
    7eb6:	4c 8b       	std	Y+20, r20	; 0x14
    7eb8:	be 01       	movw	r22, r28
    7eba:	6f 5f       	subi	r22, 0xFF	; 255
    7ebc:	7f 4f       	sbci	r23, 0xFF	; 255
    7ebe:	7f 8b       	std	Y+23, r23	; 0x17
    7ec0:	6e 8b       	std	Y+22, r22	; 0x16
    7ec2:	ce 01       	movw	r24, r28
    7ec4:	04 96       	adiw	r24, 0x04	; 4
    7ec6:	99 8b       	std	Y+17, r25	; 0x11
    7ec8:	88 8b       	std	Y+16, r24	; 0x10
    7eca:	af e1       	ldi	r26, 0x1F	; 31
    7ecc:	b6 e0       	ldi	r27, 0x06	; 6
    7ece:	bf 87       	std	Y+15, r27	; 0x0f
    7ed0:	ae 87       	std	Y+14, r26	; 0x0e
	
	for (axis = 0; axis <= YAW; axis ++)
    7ed2:	1d 86       	std	Y+13, r1	; 0x0d
			gyroADC[axis] = 0;
		}
		
		// Work out stick rate divider. 0 is slowest, 4 is fastest.
		// /64 (15.25), /32 (30.5), /16 (61*), /8 (122), /4 (244)
		stick_P1 = RCinputsAxis[axis] >> (4 - (Stick_rates[P1][axis] - 2));
    7ed4:	26 e0       	ldi	r18, 0x06	; 6
    7ed6:	62 2e       	mov	r6, r18
    7ed8:	71 2c       	mov	r7, r1
		//************************************************************
		// Increment and limit gyro I-terms, handle heading hold nicely
		//************************************************************

		// Reduce Gyro drift noise before adding into I-term
		if ((gyroADC[axis] > -GYRO_DEADBAND) && (gyroADC[axis] < GYRO_DEADBAND)) 
    7eda:	f5 01       	movw	r30, r10
    7edc:	80 81       	ld	r24, Z
    7ede:	91 81       	ldd	r25, Z+1	; 0x01
    7ee0:	04 96       	adiw	r24, 0x04	; 4
    7ee2:	09 97       	sbiw	r24, 0x09	; 9
    7ee4:	10 f4       	brcc	.+4      	; 0x7eea <Sensor_PID+0xfa>
		{
			gyroADC[axis] = 0;
    7ee6:	11 82       	std	Z+1, r1	; 0x01
    7ee8:	10 82       	st	Z, r1
		}
		
		// Work out stick rate divider. 0 is slowest, 4 is fastest.
		// /64 (15.25), /32 (30.5), /16 (61*), /8 (122), /4 (244)
		stick_P1 = RCinputsAxis[axis] >> (4 - (Stick_rates[P1][axis] - 2));
    7eea:	ac 89       	ldd	r26, Y+20	; 0x14
    7eec:	bd 89       	ldd	r27, Y+21	; 0x15
    7eee:	2d 91       	ld	r18, X+
    7ef0:	3d 91       	ld	r19, X+
    7ef2:	bd 8b       	std	Y+21, r27	; 0x15
    7ef4:	ac 8b       	std	Y+20, r26	; 0x14
    7ef6:	ee 89       	ldd	r30, Y+22	; 0x16
    7ef8:	ff 89       	ldd	r31, Y+23	; 0x17
    7efa:	41 91       	ld	r20, Z+
    7efc:	ff 8b       	std	Y+23, r31	; 0x17
    7efe:	ee 8b       	std	Y+22, r30	; 0x16
		stick_P2 = RCinputsAxis[axis] >> (4 - (Stick_rates[P2][axis] - 2));
    7f00:	a8 89       	ldd	r26, Y+16	; 0x10
    7f02:	b9 89       	ldd	r27, Y+17	; 0x11
    7f04:	ed 91       	ld	r30, X+
    7f06:	b9 8b       	std	Y+17, r27	; 0x11
    7f08:	a8 8b       	std	Y+16, r26	; 0x10

		// Calculate I-term from gyro and stick data 
		// These may look similar, but they are constrained quite differently.
		IntegralGyro[P1][axis] += (gyroADC[axis] + stick_P1);
    7f0a:	d5 01       	movw	r26, r10
    7f0c:	0d 90       	ld	r0, X+
    7f0e:	bc 91       	ld	r27, X
    7f10:	a0 2d       	mov	r26, r0
    7f12:	bd 8f       	std	Y+29, r27	; 0x1d
    7f14:	ac 8f       	std	Y+28, r26	; 0x1c
			gyroADC[axis] = 0;
		}
		
		// Work out stick rate divider. 0 is slowest, 4 is fastest.
		// /64 (15.25), /32 (30.5), /16 (61*), /8 (122), /4 (244)
		stick_P1 = RCinputsAxis[axis] >> (4 - (Stick_rates[P1][axis] - 2));
    7f16:	b3 01       	movw	r22, r6
    7f18:	64 1b       	sub	r22, r20
    7f1a:	71 09       	sbc	r23, r1
    7f1c:	47 fd       	sbrc	r20, 7
    7f1e:	73 95       	inc	r23
    7f20:	c9 01       	movw	r24, r18
    7f22:	02 c0       	rjmp	.+4      	; 0x7f28 <Sensor_PID+0x138>
    7f24:	95 95       	asr	r25
    7f26:	87 95       	ror	r24
    7f28:	6a 95       	dec	r22
    7f2a:	e2 f7       	brpl	.-8      	; 0x7f24 <Sensor_PID+0x134>
    7f2c:	ac 01       	movw	r20, r24
		stick_P2 = RCinputsAxis[axis] >> (4 - (Stick_rates[P2][axis] - 2));

		// Calculate I-term from gyro and stick data 
		// These may look similar, but they are constrained quite differently.
		IntegralGyro[P1][axis] += (gyroADC[axis] + stick_P1);
    7f2e:	4a 0f       	add	r20, r26
    7f30:	5b 1f       	adc	r21, r27
    7f32:	66 27       	eor	r22, r22
    7f34:	57 fd       	sbrc	r21, 7
    7f36:	60 95       	com	r22
    7f38:	76 2f       	mov	r23, r22
    7f3a:	d8 01       	movw	r26, r16
    7f3c:	2d 90       	ld	r2, X+
    7f3e:	3d 90       	ld	r3, X+
    7f40:	4d 90       	ld	r4, X+
    7f42:	5c 90       	ld	r5, X
    7f44:	13 97       	sbiw	r26, 0x03	; 3
    7f46:	24 0e       	add	r2, r20
    7f48:	35 1e       	adc	r3, r21
    7f4a:	46 1e       	adc	r4, r22
    7f4c:	57 1e       	adc	r5, r23
    7f4e:	2d 92       	st	X+, r2
    7f50:	3d 92       	st	X+, r3
    7f52:	4d 92       	st	X+, r4
    7f54:	5c 92       	st	X, r5
    7f56:	13 97       	sbiw	r26, 0x03	; 3
		}
		
		// Work out stick rate divider. 0 is slowest, 4 is fastest.
		// /64 (15.25), /32 (30.5), /16 (61*), /8 (122), /4 (244)
		stick_P1 = RCinputsAxis[axis] >> (4 - (Stick_rates[P1][axis] - 2));
		stick_P2 = RCinputsAxis[axis] >> (4 - (Stick_rates[P2][axis] - 2));
    7f58:	a3 01       	movw	r20, r6
    7f5a:	4e 1b       	sub	r20, r30
    7f5c:	51 09       	sbc	r21, r1
    7f5e:	e7 fd       	sbrc	r30, 7
    7f60:	53 95       	inc	r21
    7f62:	02 c0       	rjmp	.+4      	; 0x7f68 <Sensor_PID+0x178>
    7f64:	35 95       	asr	r19
    7f66:	27 95       	ror	r18
    7f68:	4a 95       	dec	r20
    7f6a:	e2 f7       	brpl	.-8      	; 0x7f64 <Sensor_PID+0x174>

		// Calculate I-term from gyro and stick data 
		// These may look similar, but they are constrained quite differently.
		IntegralGyro[P1][axis] += (gyroADC[axis] + stick_P1);
		IntegralGyro[P2][axis] += (gyroADC[axis] + stick_P2);
    7f6c:	ec 8d       	ldd	r30, Y+28	; 0x1c
    7f6e:	fd 8d       	ldd	r31, Y+29	; 0x1d
    7f70:	2e 0f       	add	r18, r30
    7f72:	3f 1f       	adc	r19, r31
    7f74:	a9 01       	movw	r20, r18
    7f76:	66 27       	eor	r22, r22
    7f78:	57 fd       	sbrc	r21, 7
    7f7a:	60 95       	com	r22
    7f7c:	76 2f       	mov	r23, r22
    7f7e:	48 8f       	std	Y+24, r20	; 0x18
    7f80:	59 8f       	std	Y+25, r21	; 0x19
    7f82:	6a 8f       	std	Y+26, r22	; 0x1a
    7f84:	7b 8f       	std	Y+27, r23	; 0x1b
    7f86:	1c 96       	adiw	r26, 0x0c	; 12
    7f88:	4d 91       	ld	r20, X+
    7f8a:	5d 91       	ld	r21, X+
    7f8c:	6d 91       	ld	r22, X+
    7f8e:	7c 91       	ld	r23, X
    7f90:	1f 97       	sbiw	r26, 0x0f	; 15
    7f92:	88 8d       	ldd	r24, Y+24	; 0x18
    7f94:	99 8d       	ldd	r25, Y+25	; 0x19
    7f96:	aa 8d       	ldd	r26, Y+26	; 0x1a
    7f98:	bb 8d       	ldd	r27, Y+27	; 0x1b
    7f9a:	48 0f       	add	r20, r24
    7f9c:	59 1f       	adc	r21, r25
    7f9e:	6a 1f       	adc	r22, r26
    7fa0:	7b 1f       	adc	r23, r27
    7fa2:	d8 01       	movw	r26, r16
    7fa4:	1c 96       	adiw	r26, 0x0c	; 12
    7fa6:	4d 93       	st	X+, r20
    7fa8:	5d 93       	st	X+, r21
    7faa:	6d 93       	st	X+, r22
    7fac:	7c 93       	st	X, r23
    7fae:	1f 97       	sbiw	r26, 0x0f	; 15

		// Limit the I-terms to the user-set limits
		for (i = P1; i <= P2; i++)
		{
			if (IntegralGyro[i][axis] > Config.Raw_I_Constrain[i][axis])
    7fb0:	ee 85       	ldd	r30, Y+14	; 0x0e
    7fb2:	ff 85       	ldd	r31, Y+15	; 0x0f
    7fb4:	41 91       	ld	r20, Z+
    7fb6:	51 91       	ld	r21, Z+
    7fb8:	61 91       	ld	r22, Z+
    7fba:	71 91       	ld	r23, Z+
    7fbc:	ff 87       	std	Y+15, r31	; 0x0f
    7fbe:	ee 87       	std	Y+14, r30	; 0x0e
    7fc0:	42 15       	cp	r20, r2
    7fc2:	53 05       	cpc	r21, r3
    7fc4:	64 05       	cpc	r22, r4
    7fc6:	75 05       	cpc	r23, r5
    7fc8:	2c f4       	brge	.+10     	; 0x7fd4 <Sensor_PID+0x1e4>
			{
				IntegralGyro[i][axis] = Config.Raw_I_Constrain[i][axis];
    7fca:	4d 93       	st	X+, r20
    7fcc:	5d 93       	st	X+, r21
    7fce:	6d 93       	st	X+, r22
    7fd0:	7c 93       	st	X, r23
    7fd2:	13 97       	sbiw	r26, 0x03	; 3
			}
			if (IntegralGyro[i][axis] < -Config.Raw_I_Constrain[i][axis])
    7fd4:	70 95       	com	r23
    7fd6:	60 95       	com	r22
    7fd8:	50 95       	com	r21
    7fda:	41 95       	neg	r20
    7fdc:	5f 4f       	sbci	r21, 0xFF	; 255
    7fde:	6f 4f       	sbci	r22, 0xFF	; 255
    7fe0:	7f 4f       	sbci	r23, 0xFF	; 255
    7fe2:	f8 01       	movw	r30, r16
    7fe4:	20 80       	ld	r2, Z
    7fe6:	31 80       	ldd	r3, Z+1	; 0x01
    7fe8:	42 80       	ldd	r4, Z+2	; 0x02
    7fea:	53 80       	ldd	r5, Z+3	; 0x03
    7fec:	24 16       	cp	r2, r20
    7fee:	35 06       	cpc	r3, r21
    7ff0:	46 06       	cpc	r4, r22
    7ff2:	57 06       	cpc	r5, r23
    7ff4:	24 f4       	brge	.+8      	; 0x7ffe <Sensor_PID+0x20e>
			{
				IntegralGyro[i][axis] = -Config.Raw_I_Constrain[i][axis];
    7ff6:	40 83       	st	Z, r20
    7ff8:	51 83       	std	Z+1, r21	; 0x01
    7ffa:	62 83       	std	Z+2, r22	; 0x02
    7ffc:	73 83       	std	Z+3, r23	; 0x03
		IntegralGyro[P2][axis] += (gyroADC[axis] + stick_P2);

		// Limit the I-terms to the user-set limits
		for (i = P1; i <= P2; i++)
		{
			if (IntegralGyro[i][axis] > Config.Raw_I_Constrain[i][axis])
    7ffe:	ea 89       	ldd	r30, Y+18	; 0x12
    8000:	fb 89       	ldd	r31, Y+19	; 0x13
    8002:	41 91       	ld	r20, Z+
    8004:	51 91       	ld	r21, Z+
    8006:	61 91       	ld	r22, Z+
    8008:	71 91       	ld	r23, Z+
    800a:	fb 8b       	std	Y+19, r31	; 0x13
    800c:	ea 8b       	std	Y+18, r30	; 0x12
    800e:	d8 01       	movw	r26, r16
    8010:	1c 96       	adiw	r26, 0x0c	; 12
    8012:	2d 90       	ld	r2, X+
    8014:	3d 90       	ld	r3, X+
    8016:	4d 90       	ld	r4, X+
    8018:	5c 90       	ld	r5, X
    801a:	1f 97       	sbiw	r26, 0x0f	; 15
    801c:	42 15       	cp	r20, r2
    801e:	53 05       	cpc	r21, r3
    8020:	64 05       	cpc	r22, r4
    8022:	75 05       	cpc	r23, r5
    8024:	2c f4       	brge	.+10     	; 0x8030 <Sensor_PID+0x240>
			{
				IntegralGyro[i][axis] = Config.Raw_I_Constrain[i][axis];
    8026:	f8 01       	movw	r30, r16
    8028:	44 87       	std	Z+12, r20	; 0x0c
    802a:	55 87       	std	Z+13, r21	; 0x0d
    802c:	66 87       	std	Z+14, r22	; 0x0e
    802e:	77 87       	std	Z+15, r23	; 0x0f
			}
			if (IntegralGyro[i][axis] < -Config.Raw_I_Constrain[i][axis])
    8030:	70 95       	com	r23
    8032:	60 95       	com	r22
    8034:	50 95       	com	r21
    8036:	41 95       	neg	r20
    8038:	5f 4f       	sbci	r21, 0xFF	; 255
    803a:	6f 4f       	sbci	r22, 0xFF	; 255
    803c:	7f 4f       	sbci	r23, 0xFF	; 255
    803e:	d8 01       	movw	r26, r16
    8040:	1c 96       	adiw	r26, 0x0c	; 12
    8042:	2d 90       	ld	r2, X+
    8044:	3d 90       	ld	r3, X+
    8046:	4d 90       	ld	r4, X+
    8048:	5c 90       	ld	r5, X
    804a:	1f 97       	sbiw	r26, 0x0f	; 15
    804c:	24 16       	cp	r2, r20
    804e:	35 06       	cpc	r3, r21
    8050:	46 06       	cpc	r4, r22
    8052:	57 06       	cpc	r5, r23
    8054:	2c f4       	brge	.+10     	; 0x8060 <Sensor_PID+0x270>
			{
				IntegralGyro[i][axis] = -Config.Raw_I_Constrain[i][axis];
    8056:	f8 01       	movw	r30, r16
    8058:	44 87       	std	Z+12, r20	; 0x0c
    805a:	55 87       	std	Z+13, r21	; 0x0d
    805c:	66 87       	std	Z+14, r22	; 0x0e
    805e:	77 87       	std	Z+15, r23	; 0x0f

		//************************************************************
		// Gyro LPF
		//************************************************************	
			
		gyroADCf = gyroADC[axis]; // Promote
    8060:	2c 8d       	ldd	r18, Y+28	; 0x1c
    8062:	3d 8d       	ldd	r19, Y+29	; 0x1d
    8064:	b9 01       	movw	r22, r18
    8066:	88 27       	eor	r24, r24
    8068:	77 fd       	sbrc	r23, 7
    806a:	80 95       	com	r24
    806c:	98 2f       	mov	r25, r24
    806e:	0e 94 4d 47 	call	0x8e9a	; 0x8e9a <__floatsisf>
    8072:	1b 01       	movw	r2, r22
    8074:	2c 01       	movw	r4, r24

		if (tempf > 1)
    8076:	20 e0       	ldi	r18, 0x00	; 0
    8078:	30 e0       	ldi	r19, 0x00	; 0
    807a:	40 e8       	ldi	r20, 0x80	; 128
    807c:	5f e3       	ldi	r21, 0x3F	; 63
    807e:	c7 01       	movw	r24, r14
    8080:	b6 01       	movw	r22, r12
    8082:	0e 94 fd 47 	call	0x8ffa	; 0x8ffa <__gesf2>
    8086:	18 16       	cp	r1, r24
    8088:	ec f4       	brge	.+58     	; 0x80c4 <Sensor_PID+0x2d4>
		{
			// Gyro LPF
			gyroSmooth[axis] = (gyroSmooth[axis] * (tempf - 1.0f) + gyroADCf) / tempf;
    808a:	20 e0       	ldi	r18, 0x00	; 0
    808c:	30 e0       	ldi	r19, 0x00	; 0
    808e:	40 e8       	ldi	r20, 0x80	; 128
    8090:	5f e3       	ldi	r21, 0x3F	; 63
    8092:	c7 01       	movw	r24, r14
    8094:	b6 01       	movw	r22, r12
    8096:	0e 94 49 46 	call	0x8c92	; 0x8c92 <__subsf3>
    809a:	d4 01       	movw	r26, r8
    809c:	2d 91       	ld	r18, X+
    809e:	3d 91       	ld	r19, X+
    80a0:	4d 91       	ld	r20, X+
    80a2:	5c 91       	ld	r21, X
    80a4:	0e 94 01 48 	call	0x9002	; 0x9002 <__mulsf3>
    80a8:	a2 01       	movw	r20, r4
    80aa:	91 01       	movw	r18, r2
    80ac:	0e 94 4a 46 	call	0x8c94	; 0x8c94 <__addsf3>
    80b0:	a7 01       	movw	r20, r14
    80b2:	96 01       	movw	r18, r12
    80b4:	0e 94 b2 46 	call	0x8d64	; 0x8d64 <__divsf3>
    80b8:	f4 01       	movw	r30, r8
    80ba:	60 83       	st	Z, r22
    80bc:	71 83       	std	Z+1, r23	; 0x01
    80be:	82 83       	std	Z+2, r24	; 0x02
    80c0:	93 83       	std	Z+3, r25	; 0x03
    80c2:	06 c0       	rjmp	.+12     	; 0x80d0 <Sensor_PID+0x2e0>
		}
		else
		{
			// Use raw gyroADC[axis] as source for gyro values
			gyroSmooth[axis] =  gyroADCf;
    80c4:	d4 01       	movw	r26, r8
    80c6:	2d 92       	st	X+, r2
    80c8:	3d 92       	st	X+, r3
    80ca:	4d 92       	st	X+, r4
    80cc:	5c 92       	st	X, r5
    80ce:	13 97       	sbiw	r26, 0x03	; 3
		}		
		
		// Demote back to int16_t
		gyroADC[axis] = (int16_t)gyroSmooth[axis];		
    80d0:	f4 01       	movw	r30, r8
    80d2:	61 91       	ld	r22, Z+
    80d4:	71 91       	ld	r23, Z+
    80d6:	81 91       	ld	r24, Z+
    80d8:	91 91       	ld	r25, Z+
    80da:	4f 01       	movw	r8, r30
    80dc:	0e 94 1a 47 	call	0x8e34	; 0x8e34 <__fixsfsi>
    80e0:	d5 01       	movw	r26, r10
    80e2:	6d 93       	st	X+, r22
    80e4:	7d 93       	st	X+, r23
    80e6:	5d 01       	movw	r10, r26
    80e8:	bd 85       	ldd	r27, Y+13	; 0x0d
    80ea:	bf 5f       	subi	r27, 0xFF	; 255
    80ec:	bd 87       	std	Y+13, r27	; 0x0d
    80ee:	0c 5f       	subi	r16, 0xFC	; 252
    80f0:	1f 4f       	sbci	r17, 0xFF	; 255
	};
	
	// Gyro LPF scale
	tempf = pgm_read_byte(&LPF_lookup[Config.Gyro_LPF]); // Lookup actual LPF value and promote
	
	for (axis = 0; axis <= YAW; axis ++)
    80f2:	b3 30       	cpi	r27, 0x03	; 3
    80f4:	09 f0       	breq	.+2      	; 0x80f8 <Sensor_PID+0x308>
    80f6:	f1 ce       	rjmp	.-542    	; 0x7eda <Sensor_PID+0xea>
		// Demote back to int16_t
		gyroADC[axis] = (int16_t)gyroSmooth[axis];		
	}
	
	// Average accVert prior to Calculate_PID()
	PID_AvgAccVert += accVert;
    80f8:	40 91 12 05 	lds	r20, 0x0512
    80fc:	50 91 13 05 	lds	r21, 0x0513
    8100:	66 27       	eor	r22, r22
    8102:	57 fd       	sbrc	r21, 7
    8104:	60 95       	com	r22
    8106:	76 2f       	mov	r23, r22
    8108:	80 91 3e 05 	lds	r24, 0x053E
    810c:	90 91 3f 05 	lds	r25, 0x053F
    8110:	a0 91 40 05 	lds	r26, 0x0540
    8114:	b0 91 41 05 	lds	r27, 0x0541
    8118:	84 0f       	add	r24, r20
    811a:	95 1f       	adc	r25, r21
    811c:	a6 1f       	adc	r26, r22
    811e:	b7 1f       	adc	r27, r23
    8120:	80 93 3e 05 	sts	0x053E, r24
    8124:	90 93 3f 05 	sts	0x053F, r25
    8128:	a0 93 40 05 	sts	0x0540, r26
    812c:	b0 93 41 05 	sts	0x0541, r27
			
}
    8130:	6d 96       	adiw	r28, 0x1d	; 29
    8132:	0f b6       	in	r0, 0x3f	; 63
    8134:	f8 94       	cli
    8136:	de bf       	out	0x3e, r29	; 62
    8138:	0f be       	out	0x3f, r0	; 63
    813a:	cd bf       	out	0x3d, r28	; 61
    813c:	df 91       	pop	r29
    813e:	cf 91       	pop	r28
    8140:	1f 91       	pop	r17
    8142:	0f 91       	pop	r16
    8144:	ff 90       	pop	r15
    8146:	ef 90       	pop	r14
    8148:	df 90       	pop	r13
    814a:	cf 90       	pop	r12
    814c:	bf 90       	pop	r11
    814e:	af 90       	pop	r10
    8150:	9f 90       	pop	r9
    8152:	8f 90       	pop	r8
    8154:	7f 90       	pop	r7
    8156:	6f 90       	pop	r6
    8158:	5f 90       	pop	r5
    815a:	4f 90       	pop	r4
    815c:	3f 90       	pop	r3
    815e:	2f 90       	pop	r2
    8160:	08 95       	ret

00008162 <Calculate_PID>:

// Run just before PWM output, using averaged data
void Calculate_PID(void)
{
    8162:	2f 92       	push	r2
    8164:	3f 92       	push	r3
    8166:	4f 92       	push	r4
    8168:	5f 92       	push	r5
    816a:	6f 92       	push	r6
    816c:	7f 92       	push	r7
    816e:	8f 92       	push	r8
    8170:	9f 92       	push	r9
    8172:	af 92       	push	r10
    8174:	bf 92       	push	r11
    8176:	cf 92       	push	r12
    8178:	df 92       	push	r13
    817a:	ef 92       	push	r14
    817c:	ff 92       	push	r15
    817e:	0f 93       	push	r16
    8180:	1f 93       	push	r17
    8182:	cf 93       	push	r28
    8184:	df 93       	push	r29
    8186:	cd b7       	in	r28, 0x3d	; 61
    8188:	de b7       	in	r29, 0x3e	; 62
    818a:	ca 54       	subi	r28, 0x4A	; 74
    818c:	d1 09       	sbc	r29, r1
    818e:	0f b6       	in	r0, 0x3f	; 63
    8190:	f8 94       	cli
    8192:	de bf       	out	0x3e, r29	; 62
    8194:	0f be       	out	0x3f, r0	; 63
    8196:	cd bf       	out	0x3d, r28	; 61
	int16_t AvAccVert = 0;
	int8_t	axis = 0;
	int8_t i = 0;

	// Initialise arrays with gain values.
	int8_t 	P_gain[FLIGHT_MODES][NUMBEROFAXIS] = 
    8198:	80 91 e3 05 	lds	r24, 0x05E3
    819c:	8d 8b       	std	Y+21, r24	; 0x15
    819e:	80 91 e9 05 	lds	r24, 0x05E9
    81a2:	8e 8b       	std	Y+22, r24	; 0x16
    81a4:	80 91 ef 05 	lds	r24, 0x05EF
    81a8:	8f 8b       	std	Y+23, r24	; 0x17
    81aa:	80 91 f5 05 	lds	r24, 0x05F5
    81ae:	88 8f       	std	Y+24, r24	; 0x18
    81b0:	80 91 fb 05 	lds	r24, 0x05FB
    81b4:	89 8f       	std	Y+25, r24	; 0x19
    81b6:	80 91 01 06 	lds	r24, 0x0601
    81ba:	8a 8f       	std	Y+26, r24	; 0x1a
		{
			{Config.FlightMode[P1].Roll_P_mult, Config.FlightMode[P1].Pitch_P_mult, Config.FlightMode[P1].Yaw_P_mult},
		 	{Config.FlightMode[P2].Roll_P_mult, Config.FlightMode[P2].Pitch_P_mult, Config.FlightMode[P2].Yaw_P_mult}
		};

	int8_t 	I_gain[FLIGHT_MODES][NUMBEROFAXIS] = 
    81bc:	80 91 e4 05 	lds	r24, 0x05E4
    81c0:	8f 87       	std	Y+15, r24	; 0x0f
    81c2:	80 91 ea 05 	lds	r24, 0x05EA
    81c6:	88 8b       	std	Y+16, r24	; 0x10
    81c8:	80 91 f0 05 	lds	r24, 0x05F0
    81cc:	89 8b       	std	Y+17, r24	; 0x11
    81ce:	80 91 f6 05 	lds	r24, 0x05F6
    81d2:	8a 8b       	std	Y+18, r24	; 0x12
    81d4:	80 91 fc 05 	lds	r24, 0x05FC
    81d8:	8b 8b       	std	Y+19, r24	; 0x13
    81da:	80 91 02 06 	lds	r24, 0x0602
    81de:	8c 8b       	std	Y+20, r24	; 0x14
		{
			{Config.FlightMode[P1].Roll_I_mult, Config.FlightMode[P1].Pitch_I_mult, Config.FlightMode[P1].Yaw_I_mult},
			{Config.FlightMode[P2].Roll_I_mult, Config.FlightMode[P2].Pitch_I_mult, Config.FlightMode[P2].Yaw_I_mult}
		};

	int8_t 	L_gain[FLIGHT_MODES][NUMBEROFAXIS] = 
    81e0:	80 91 e7 05 	lds	r24, 0x05E7
    81e4:	89 87       	std	Y+9, r24	; 0x09
    81e6:	80 91 ed 05 	lds	r24, 0x05ED
    81ea:	8a 87       	std	Y+10, r24	; 0x0a
		{
			{Config.FlightMode[P1].A_Roll_P_mult, Config.FlightMode[P1].A_Pitch_P_mult, Config.FlightMode[P1].A_Zed_P_mult},
    81ec:	20 91 f4 05 	lds	r18, 0x05F4
    81f0:	29 a7       	std	Y+41, r18	; 0x29
		{
			{Config.FlightMode[P1].Roll_I_mult, Config.FlightMode[P1].Pitch_I_mult, Config.FlightMode[P1].Yaw_I_mult},
			{Config.FlightMode[P2].Roll_I_mult, Config.FlightMode[P2].Pitch_I_mult, Config.FlightMode[P2].Yaw_I_mult}
		};

	int8_t 	L_gain[FLIGHT_MODES][NUMBEROFAXIS] = 
    81f2:	2b 87       	std	Y+11, r18	; 0x0b
    81f4:	80 91 f9 05 	lds	r24, 0x05F9
    81f8:	8c 87       	std	Y+12, r24	; 0x0c
    81fa:	80 91 ff 05 	lds	r24, 0x05FF
    81fe:	8d 87       	std	Y+13, r24	; 0x0d
		{
			{Config.FlightMode[P1].A_Roll_P_mult, Config.FlightMode[P1].A_Pitch_P_mult, Config.FlightMode[P1].A_Zed_P_mult},
			{Config.FlightMode[P2].A_Roll_P_mult, Config.FlightMode[P2].A_Pitch_P_mult, Config.FlightMode[P2].A_Zed_P_mult}
    8200:	30 91 06 06 	lds	r19, 0x0606
    8204:	3a a7       	std	Y+42, r19	; 0x2a
		{
			{Config.FlightMode[P1].Roll_I_mult, Config.FlightMode[P1].Pitch_I_mult, Config.FlightMode[P1].Yaw_I_mult},
			{Config.FlightMode[P2].Roll_I_mult, Config.FlightMode[P2].Pitch_I_mult, Config.FlightMode[P2].Yaw_I_mult}
		};

	int8_t 	L_gain[FLIGHT_MODES][NUMBEROFAXIS] = 
    8206:	3e 87       	std	Y+14, r19	; 0x0e
			{Config.FlightMode[P1].A_Roll_P_mult, Config.FlightMode[P1].A_Pitch_P_mult, Config.FlightMode[P1].A_Zed_P_mult},
			{Config.FlightMode[P2].A_Roll_P_mult, Config.FlightMode[P2].A_Pitch_P_mult, Config.FlightMode[P2].A_Zed_P_mult}
		};

	// Only for roll and pitch acc trim
	int16_t	L_trim[FLIGHT_MODES][2] =
    8208:	80 91 b0 07 	lds	r24, 0x07B0
    820c:	90 91 b1 07 	lds	r25, 0x07B1
    8210:	9a 83       	std	Y+2, r25	; 0x02
    8212:	89 83       	std	Y+1, r24	; 0x01
    8214:	80 91 b4 07 	lds	r24, 0x07B4
    8218:	90 91 b5 07 	lds	r25, 0x07B5
    821c:	9c 83       	std	Y+4, r25	; 0x04
    821e:	8b 83       	std	Y+3, r24	; 0x03
    8220:	80 91 b2 07 	lds	r24, 0x07B2
    8224:	90 91 b3 07 	lds	r25, 0x07B3
    8228:	9e 83       	std	Y+6, r25	; 0x06
    822a:	8d 83       	std	Y+5, r24	; 0x05
    822c:	80 91 b6 07 	lds	r24, 0x07B6
    8230:	90 91 b7 07 	lds	r25, 0x07B7
    8234:	98 87       	std	Y+8, r25	; 0x08
    8236:	8f 83       	std	Y+7, r24	; 0x07
			{Config.Rolltrim[P1], Config.Pitchtrim[P1]},
			{Config.Rolltrim[P2], Config.Pitchtrim[P2]}
		};

	// Average accVert
	AvAccVert = (int16_t)(PID_AvgAccVert / LoopCount);
    8238:	20 91 1a 05 	lds	r18, 0x051A
    823c:	30 e0       	ldi	r19, 0x00	; 0
    823e:	40 e0       	ldi	r20, 0x00	; 0
    8240:	50 e0       	ldi	r21, 0x00	; 0
    8242:	60 91 3e 05 	lds	r22, 0x053E
    8246:	70 91 3f 05 	lds	r23, 0x053F
    824a:	80 91 40 05 	lds	r24, 0x0540
    824e:	90 91 41 05 	lds	r25, 0x0541
    8252:	0e 94 ae 48 	call	0x915c	; 0x915c <__divmodsi4>
    8256:	29 96       	adiw	r28, 0x09	; 9
    8258:	2c af       	std	Y+60, r18	; 0x3c
    825a:	3d af       	std	Y+61, r19	; 0x3d
    825c:	4e af       	std	Y+62, r20	; 0x3e
    825e:	5f af       	std	Y+63, r21	; 0x3f
    8260:	29 97       	sbiw	r28, 0x09	; 9
	PID_AvgAccVert = 0;							// Reset average
    8262:	10 92 3e 05 	sts	0x053E, r1
    8266:	10 92 3f 05 	sts	0x053F, r1
    826a:	10 92 40 05 	sts	0x0540, r1
    826e:	10 92 41 05 	sts	0x0541, r1
		// Add in gyro Yaw trim
		//************************************************************

		if (axis == YAW)
		{
			PID_gyro_temp1 = (int32_t)(Config.FlightMode[P1].Yaw_trim << 6);
    8272:	80 91 f3 05 	lds	r24, 0x05F3
    8276:	40 e4       	ldi	r20, 0x40	; 64
    8278:	84 02       	muls	r24, r20
    827a:	c0 01       	movw	r24, r0
    827c:	11 24       	eor	r1, r1
    827e:	9c 01       	movw	r18, r24
    8280:	44 27       	eor	r20, r20
    8282:	37 fd       	sbrc	r19, 7
    8284:	40 95       	com	r20
    8286:	54 2f       	mov	r21, r20
    8288:	29 af       	std	Y+57, r18	; 0x39
    828a:	3a af       	std	Y+58, r19	; 0x3a
    828c:	4b af       	std	Y+59, r20	; 0x3b
    828e:	5c af       	std	Y+60, r21	; 0x3c
			PID_gyro_temp2 = (int32_t)(Config.FlightMode[P2].Yaw_trim << 6);
    8290:	80 91 05 06 	lds	r24, 0x0605
    8294:	30 e4       	ldi	r19, 0x40	; 64
    8296:	83 02       	muls	r24, r19
    8298:	c0 01       	movw	r24, r0
    829a:	11 24       	eor	r1, r1
    829c:	9c 01       	movw	r18, r24
    829e:	44 27       	eor	r20, r20
    82a0:	37 fd       	sbrc	r19, 7
    82a2:	40 95       	com	r20
    82a4:	54 2f       	mov	r21, r20
    82a6:	21 96       	adiw	r28, 0x01	; 1
    82a8:	2c af       	std	Y+60, r18	; 0x3c
    82aa:	3d af       	std	Y+61, r19	; 0x3d
    82ac:	4e af       	std	Y+62, r20	; 0x3e
    82ae:	5f af       	std	Y+63, r21	; 0x3f
    82b0:	21 97       	sbiw	r28, 0x01	; 1
    82b2:	e3 e7       	ldi	r30, 0x73	; 115
    82b4:	f5 e0       	ldi	r31, 0x05	; 5
    82b6:	f8 af       	std	Y+56, r31	; 0x38
    82b8:	ef ab       	std	Y+55, r30	; 0x37
    82ba:	fe 01       	movw	r30, r28
    82bc:	75 96       	adiw	r30, 0x15	; 21
    82be:	fe ab       	std	Y+54, r31	; 0x36
    82c0:	ed ab       	std	Y+53, r30	; 0x35
    82c2:	ed ee       	ldi	r30, 0xED	; 237
    82c4:	f7 e0       	ldi	r31, 0x07	; 7
    82c6:	fe a3       	std	Y+38, r31	; 0x26
    82c8:	ed a3       	std	Y+37, r30	; 0x25
    82ca:	fe 01       	movw	r30, r28
    82cc:	3f 96       	adiw	r30, 0x0f	; 15
    82ce:	fc ab       	std	Y+52, r31	; 0x34
    82d0:	eb ab       	std	Y+51, r30	; 0x33
    82d2:	39 96       	adiw	r30, 0x09	; 9
    82d4:	fa ab       	std	Y+50, r31	; 0x32
    82d6:	e9 ab       	std	Y+49, r30	; 0x31
    82d8:	36 97       	sbiw	r30, 0x06	; 6
    82da:	f8 ab       	std	Y+48, r31	; 0x30
    82dc:	ef a7       	std	Y+47, r30	; 0x2f
    82de:	e7 e0       	ldi	r30, 0x07	; 7
    82e0:	f6 e0       	ldi	r31, 0x06	; 6
    82e2:	fe a7       	std	Y+46, r31	; 0x2e
    82e4:	ed a7       	std	Y+45, r30	; 0x2d
    82e6:	e1 e1       	ldi	r30, 0x11	; 17
    82e8:	f8 e0       	ldi	r31, 0x08	; 8
    82ea:	fc a3       	std	Y+36, r31	; 0x24
    82ec:	eb a3       	std	Y+35, r30	; 0x23
    82ee:	e1 e9       	ldi	r30, 0x91	; 145
    82f0:	f5 e0       	ldi	r31, 0x05	; 5
    82f2:	f8 a7       	std	Y+40, r31	; 0x28
    82f4:	ef a3       	std	Y+39, r30	; 0x27
    82f6:	fe 01       	movw	r30, r28
    82f8:	31 96       	adiw	r30, 0x01	; 1
    82fa:	fa a3       	std	Y+34, r31	; 0x22
    82fc:	e9 a3       	std	Y+33, r30	; 0x21
    82fe:	ed e1       	ldi	r30, 0x1D	; 29
    8300:	f8 e0       	ldi	r31, 0x08	; 8
    8302:	f8 a3       	std	Y+32, r31	; 0x20
    8304:	ef 8f       	std	Y+31, r30	; 0x1f
    8306:	1e 01       	movw	r2, r28
    8308:	fc e0       	ldi	r31, 0x0C	; 12
    830a:	2f 0e       	add	r2, r31
    830c:	31 1c       	adc	r3, r1
    830e:	e3 e1       	ldi	r30, 0x13	; 19
    8310:	f6 e0       	ldi	r31, 0x06	; 6
    8312:	fc a7       	std	Y+44, r31	; 0x2c
    8314:	eb a7       	std	Y+43, r30	; 0x2b
    8316:	2b 96       	adiw	r28, 0x0b	; 11
    8318:	1f ae       	std	Y+63, r1	; 0x3f
    831a:	1e ae       	std	Y+62, r1	; 0x3e
    831c:	2b 97       	sbiw	r28, 0x0b	; 11
		}
		// Reset PID_gyro variables to that data does not accumulate cross-axis
		else
		{
			PID_gyro_temp1 = 0;
			PID_gyro_temp2 = 0;
    831e:	81 2c       	mov	r8, r1
    8320:	91 2c       	mov	r9, r1
    8322:	54 01       	movw	r10, r8
			PID_gyro_temp2 = (int32_t)(Config.FlightMode[P2].Yaw_trim << 6);
		}
		// Reset PID_gyro variables to that data does not accumulate cross-axis
		else
		{
			PID_gyro_temp1 = 0;
    8324:	80 e0       	ldi	r24, 0x00	; 0
    8326:	90 e0       	ldi	r25, 0x00	; 0
    8328:	dc 01       	movw	r26, r24
		//************************************************************
		// Calculate PID gains
		//************************************************************

		// Gyro P-term													// Profile P1
		PID_gyro_temp1 += gyroADC[axis] * P_gain[P1][axis];				// Multiply P-term (Max gain of 127)
    832a:	ef a9       	ldd	r30, Y+55	; 0x37
    832c:	f8 ad       	ldd	r31, Y+56	; 0x38
    832e:	01 91       	ld	r16, Z+
    8330:	11 91       	ld	r17, Z+
    8332:	f8 af       	std	Y+56, r31	; 0x38
    8334:	ef ab       	std	Y+55, r30	; 0x37
    8336:	ed a9       	ldd	r30, Y+53	; 0x35
    8338:	fe a9       	ldd	r31, Y+54	; 0x36
    833a:	41 91       	ld	r20, Z+
    833c:	fe ab       	std	Y+54, r31	; 0x36
    833e:	ed ab       	std	Y+53, r30	; 0x35
    8340:	40 03       	mulsu	r20, r16
    8342:	90 01       	movw	r18, r0
    8344:	41 9f       	mul	r20, r17
    8346:	30 0d       	add	r19, r0
    8348:	11 24       	eor	r1, r1
    834a:	44 27       	eor	r20, r20
    834c:	37 fd       	sbrc	r19, 7
    834e:	40 95       	com	r20
    8350:	54 2f       	mov	r21, r20
    8352:	28 0f       	add	r18, r24
    8354:	39 1f       	adc	r19, r25
    8356:	4a 1f       	adc	r20, r26
    8358:	5b 1f       	adc	r21, r27
		PID_gyro_temp1 = PID_gyro_temp1 * (int32_t)3;					// Multiply by 3
    835a:	a3 e0       	ldi	r26, 0x03	; 3
    835c:	b0 e0       	ldi	r27, 0x00	; 0
    835e:	0e 94 f1 48 	call	0x91e2	; 0x91e2 <__muluhisi3>
    8362:	25 96       	adiw	r28, 0x05	; 5
    8364:	6c af       	std	Y+60, r22	; 0x3c
    8366:	7d af       	std	Y+61, r23	; 0x3d
    8368:	8e af       	std	Y+62, r24	; 0x3e
    836a:	9f af       	std	Y+63, r25	; 0x3f
    836c:	25 97       	sbiw	r28, 0x05	; 5

		// Gyro I-term
		PID_Gyro_I_actual1 = IntegralGyro[P1][axis] * I_gain[P1][axis];	// Multiply I-term (Max gain of 127)
    836e:	eb a9       	ldd	r30, Y+51	; 0x33
    8370:	fc a9       	ldd	r31, Y+52	; 0x34
    8372:	a1 91       	ld	r26, Z+
    8374:	fc ab       	std	Y+52, r31	; 0x34
    8376:	eb ab       	std	Y+51, r30	; 0x33
    8378:	ed a1       	ldd	r30, Y+37	; 0x25
    837a:	fe a1       	ldd	r31, Y+38	; 0x26
    837c:	20 81       	ld	r18, Z
    837e:	31 81       	ldd	r19, Z+1	; 0x01
    8380:	42 81       	ldd	r20, Z+2	; 0x02
    8382:	53 81       	ldd	r21, Z+3	; 0x03
    8384:	bb 27       	eor	r27, r27
    8386:	a7 fd       	sbrc	r26, 7
    8388:	b0 95       	com	r27
    838a:	0e 94 fc 48 	call	0x91f8	; 0x91f8 <__mulshisi3>
    838e:	2b 01       	movw	r4, r22
    8390:	3c 01       	movw	r6, r24
		PID_Gyro_I_actual1 = PID_Gyro_I_actual1 >> 5;					// Divide by 32
    8392:	85 e0       	ldi	r24, 0x05	; 5
    8394:	75 94       	asr	r7
    8396:	67 94       	ror	r6
    8398:	57 94       	ror	r5
    839a:	47 94       	ror	r4
    839c:	8a 95       	dec	r24
    839e:	d1 f7       	brne	.-12     	; 0x8394 <Calculate_PID+0x232>

		// Gyro P-term
		PID_gyro_temp2 += gyroADC[axis] * P_gain[P2][axis];				// Profile P2
    83a0:	e9 a9       	ldd	r30, Y+49	; 0x31
    83a2:	fa a9       	ldd	r31, Y+50	; 0x32
    83a4:	41 91       	ld	r20, Z+
    83a6:	fa ab       	std	Y+50, r31	; 0x32
    83a8:	e9 ab       	std	Y+49, r30	; 0x31
    83aa:	40 03       	mulsu	r20, r16
    83ac:	90 01       	movw	r18, r0
    83ae:	41 9f       	mul	r20, r17
    83b0:	30 0d       	add	r19, r0
    83b2:	11 24       	eor	r1, r1
    83b4:	44 27       	eor	r20, r20
    83b6:	37 fd       	sbrc	r19, 7
    83b8:	40 95       	com	r20
    83ba:	54 2f       	mov	r21, r20
    83bc:	28 0d       	add	r18, r8
    83be:	39 1d       	adc	r19, r9
    83c0:	4a 1d       	adc	r20, r10
    83c2:	5b 1d       	adc	r21, r11
		PID_gyro_temp2 = PID_gyro_temp2 * (int32_t)3;
    83c4:	a3 e0       	ldi	r26, 0x03	; 3
    83c6:	b0 e0       	ldi	r27, 0x00	; 0
    83c8:	0e 94 f1 48 	call	0x91e2	; 0x91e2 <__muluhisi3>
    83cc:	4b 01       	movw	r8, r22
    83ce:	5c 01       	movw	r10, r24

		// Gyro I-term
		PID_Gyro_I_actual2 = IntegralGyro[P2][axis] * I_gain[P2][axis];
    83d0:	ef a5       	ldd	r30, Y+47	; 0x2f
    83d2:	f8 a9       	ldd	r31, Y+48	; 0x30
    83d4:	a1 91       	ld	r26, Z+
    83d6:	f8 ab       	std	Y+48, r31	; 0x30
    83d8:	ef a7       	std	Y+47, r30	; 0x2f
    83da:	ed a1       	ldd	r30, Y+37	; 0x25
    83dc:	fe a1       	ldd	r31, Y+38	; 0x26
    83de:	24 85       	ldd	r18, Z+12	; 0x0c
    83e0:	35 85       	ldd	r19, Z+13	; 0x0d
    83e2:	46 85       	ldd	r20, Z+14	; 0x0e
    83e4:	57 85       	ldd	r21, Z+15	; 0x0f
    83e6:	bb 27       	eor	r27, r27
    83e8:	a7 fd       	sbrc	r26, 7
    83ea:	b0 95       	com	r27
    83ec:	0e 94 fc 48 	call	0x91f8	; 0x91f8 <__mulshisi3>
		PID_Gyro_I_actual2 = PID_Gyro_I_actual2 >> 5;
    83f0:	25 e0       	ldi	r18, 0x05	; 5
    83f2:	95 95       	asr	r25
    83f4:	87 95       	ror	r24
    83f6:	77 95       	ror	r23
    83f8:	67 95       	ror	r22
    83fa:	2a 95       	dec	r18
    83fc:	d1 f7       	brne	.-12     	; 0x83f2 <Calculate_PID+0x290>
		//************************************************************
		// I-term output limits
		//************************************************************

		// P1 limits
		if (PID_Gyro_I_actual1 > Config.Raw_I_Limits[P1][axis]) 
    83fe:	ed a5       	ldd	r30, Y+45	; 0x2d
    8400:	fe a5       	ldd	r31, Y+46	; 0x2e
    8402:	c1 90       	ld	r12, Z+
    8404:	d1 90       	ld	r13, Z+
    8406:	e1 90       	ld	r14, Z+
    8408:	f1 90       	ld	r15, Z+
    840a:	fe a7       	std	Y+46, r31	; 0x2e
    840c:	ed a7       	std	Y+45, r30	; 0x2d
    840e:	c4 14       	cp	r12, r4
    8410:	d5 04       	cpc	r13, r5
    8412:	e6 04       	cpc	r14, r6
    8414:	f7 04       	cpc	r15, r7
    8416:	84 f0       	brlt	.+32     	; 0x8438 <Calculate_PID+0x2d6>
		{
			PID_Gyro_I_actual1 = Config.Raw_I_Limits[P1][axis];
		}
		else if (PID_Gyro_I_actual1 < -Config.Raw_I_Limits[P1][axis]) 
    8418:	00 27       	eor	r16, r16
    841a:	11 27       	eor	r17, r17
    841c:	98 01       	movw	r18, r16
    841e:	0c 19       	sub	r16, r12
    8420:	1d 09       	sbc	r17, r13
    8422:	2e 09       	sbc	r18, r14
    8424:	3f 09       	sbc	r19, r15
    8426:	73 01       	movw	r14, r6
    8428:	62 01       	movw	r12, r4
    842a:	40 16       	cp	r4, r16
    842c:	51 06       	cpc	r5, r17
    842e:	62 06       	cpc	r6, r18
    8430:	73 06       	cpc	r7, r19
    8432:	14 f4       	brge	.+4      	; 0x8438 <Calculate_PID+0x2d6>
    8434:	68 01       	movw	r12, r16
    8436:	79 01       	movw	r14, r18
		{
			PID_Gyro_I_actual1 = -Config.Raw_I_Limits[P1][axis];	
		}

		// P2 limits
		if (PID_Gyro_I_actual2 > Config.Raw_I_Limits[P2][axis]) 
    8438:	eb a5       	ldd	r30, Y+43	; 0x2b
    843a:	fc a5       	ldd	r31, Y+44	; 0x2c
    843c:	21 91       	ld	r18, Z+
    843e:	31 91       	ld	r19, Z+
    8440:	41 91       	ld	r20, Z+
    8442:	51 91       	ld	r21, Z+
    8444:	fc a7       	std	Y+44, r31	; 0x2c
    8446:	eb a7       	std	Y+43, r30	; 0x2b
    8448:	2b 8f       	std	Y+27, r18	; 0x1b
    844a:	3c 8f       	std	Y+28, r19	; 0x1c
    844c:	4d 8f       	std	Y+29, r20	; 0x1d
    844e:	5e 8f       	std	Y+30, r21	; 0x1e
    8450:	26 17       	cp	r18, r22
    8452:	37 07       	cpc	r19, r23
    8454:	48 07       	cpc	r20, r24
    8456:	59 07       	cpc	r21, r25
    8458:	b4 f0       	brlt	.+44     	; 0x8486 <Calculate_PID+0x324>
		{
			PID_Gyro_I_actual2 = Config.Raw_I_Limits[P2][axis];
		}
		else if (PID_Gyro_I_actual2 < -Config.Raw_I_Limits[P2][axis]) 
    845a:	89 01       	movw	r16, r18
    845c:	9a 01       	movw	r18, r20
    845e:	30 95       	com	r19
    8460:	20 95       	com	r18
    8462:	10 95       	com	r17
    8464:	01 95       	neg	r16
    8466:	1f 4f       	sbci	r17, 0xFF	; 255
    8468:	2f 4f       	sbci	r18, 0xFF	; 255
    846a:	3f 4f       	sbci	r19, 0xFF	; 255
    846c:	6b 8f       	std	Y+27, r22	; 0x1b
    846e:	7c 8f       	std	Y+28, r23	; 0x1c
    8470:	8d 8f       	std	Y+29, r24	; 0x1d
    8472:	9e 8f       	std	Y+30, r25	; 0x1e
    8474:	60 17       	cp	r22, r16
    8476:	71 07       	cpc	r23, r17
    8478:	82 07       	cpc	r24, r18
    847a:	93 07       	cpc	r25, r19
    847c:	24 f4       	brge	.+8      	; 0x8486 <Calculate_PID+0x324>
    847e:	0b 8f       	std	Y+27, r16	; 0x1b
    8480:	1c 8f       	std	Y+28, r17	; 0x1c
    8482:	2d 8f       	std	Y+29, r18	; 0x1d
    8484:	3e 8f       	std	Y+30, r19	; 0x1e

		//************************************************************
		// Sum Gyro P, I and D terms and rescale
		//************************************************************

		PID_Gyros[P1][axis] = (int16_t)((PID_gyro_temp1 + PID_Gyro_I_actual1) >> PID_SCALE);  // PID_SCALE was 6, now 5
    8486:	25 96       	adiw	r28, 0x05	; 5
    8488:	4c ac       	ldd	r4, Y+60	; 0x3c
    848a:	5d ac       	ldd	r5, Y+61	; 0x3d
    848c:	6e ac       	ldd	r6, Y+62	; 0x3e
    848e:	7f ac       	ldd	r7, Y+63	; 0x3f
    8490:	25 97       	sbiw	r28, 0x05	; 5
    8492:	4c 0c       	add	r4, r12
    8494:	5d 1c       	adc	r5, r13
    8496:	6e 1c       	adc	r6, r14
    8498:	7f 1c       	adc	r7, r15
    849a:	a6 e0       	ldi	r26, 0x06	; 6
    849c:	75 94       	asr	r7
    849e:	67 94       	ror	r6
    84a0:	57 94       	ror	r5
    84a2:	47 94       	ror	r4
    84a4:	aa 95       	dec	r26
    84a6:	d1 f7       	brne	.-12     	; 0x849c <Calculate_PID+0x33a>
    84a8:	eb a1       	ldd	r30, Y+35	; 0x23
    84aa:	fc a1       	ldd	r31, Y+36	; 0x24
    84ac:	51 82       	std	Z+1, r5	; 0x01
    84ae:	40 82       	st	Z, r4
		PID_Gyros[P2][axis] = (int16_t)((PID_gyro_temp2 + PID_Gyro_I_actual2) >> PID_SCALE);
    84b0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    84b2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    84b4:	ad 8d       	ldd	r26, Y+29	; 0x1d
    84b6:	be 8d       	ldd	r27, Y+30	; 0x1e
    84b8:	88 0d       	add	r24, r8
    84ba:	99 1d       	adc	r25, r9
    84bc:	aa 1d       	adc	r26, r10
    84be:	bb 1d       	adc	r27, r11
    84c0:	16 e0       	ldi	r17, 0x06	; 6
    84c2:	b5 95       	asr	r27
    84c4:	a7 95       	ror	r26
    84c6:	97 95       	ror	r25
    84c8:	87 95       	ror	r24
    84ca:	1a 95       	dec	r17
    84cc:	d1 f7       	brne	.-12     	; 0x84c2 <Calculate_PID+0x360>
    84ce:	97 83       	std	Z+7, r25	; 0x07
    84d0:	86 83       	std	Z+6, r24	; 0x06

		//************************************************************
		// Calculate error from angle data and trim (roll and pitch only)
		//************************************************************

		if (axis < YAW)
    84d2:	2a 96       	adiw	r28, 0x0a	; 10
    84d4:	ff ad       	ldd	r31, Y+63	; 0x3f
    84d6:	2a 97       	sbiw	r28, 0x0a	; 10
    84d8:	f2 30       	cpi	r31, 0x02	; 2
    84da:	e9 f1       	breq	.+122    	; 0x8556 <Calculate_PID+0x3f4>
		{
			// Do for P1 and P2
			for (i = P1; i <= P2; i++)
			{
				PID_acc_temp1 = angle[axis] - L_trim[i][axis];				// Offset angle with trim
    84dc:	ef a1       	ldd	r30, Y+39	; 0x27
    84de:	f8 a5       	ldd	r31, Y+40	; 0x28
    84e0:	40 81       	ld	r20, Z
    84e2:	51 81       	ldd	r21, Z+1	; 0x01
    84e4:	e9 a1       	ldd	r30, Y+33	; 0x21
    84e6:	fa a1       	ldd	r31, Y+34	; 0x22
    84e8:	80 81       	ld	r24, Z
    84ea:	91 81       	ldd	r25, Z+1	; 0x01
    84ec:	9a 01       	movw	r18, r20
    84ee:	28 1b       	sub	r18, r24
    84f0:	39 0b       	sbc	r19, r25
    84f2:	a9 e0       	ldi	r26, 0x09	; 9
    84f4:	b0 e0       	ldi	r27, 0x00	; 0
    84f6:	ac 0f       	add	r26, r28
    84f8:	bd 1f       	adc	r27, r29
    84fa:	2b 96       	adiw	r28, 0x0b	; 11
    84fc:	ee ad       	ldd	r30, Y+62	; 0x3e
    84fe:	ff ad       	ldd	r31, Y+63	; 0x3f
    8500:	2b 97       	sbiw	r28, 0x0b	; 11
    8502:	ae 0f       	add	r26, r30
    8504:	bf 1f       	adc	r27, r31
				PID_acc_temp1 *= L_gain[i][axis];							// P-term of accelerometer (Max gain of 127)
    8506:	ac 91       	ld	r26, X
    8508:	bb 27       	eor	r27, r27
    850a:	a7 fd       	sbrc	r26, 7
    850c:	b0 95       	com	r27
    850e:	0e 94 d3 48 	call	0x91a6	; 0x91a6 <__mulhisi3>
				PID_ACCs[i][axis] = (int16_t)(PID_acc_temp1 >> 8);			// Reduce and convert to integer
    8512:	bb 27       	eor	r27, r27
    8514:	97 fd       	sbrc	r25, 7
    8516:	ba 95       	dec	r27
    8518:	a9 2f       	mov	r26, r25
    851a:	98 2f       	mov	r25, r24
    851c:	87 2f       	mov	r24, r23
    851e:	ef 8d       	ldd	r30, Y+31	; 0x1f
    8520:	f8 a1       	ldd	r31, Y+32	; 0x20
    8522:	91 83       	std	Z+1, r25	; 0x01
    8524:	80 83       	st	Z, r24
		if (axis < YAW)
		{
			// Do for P1 and P2
			for (i = P1; i <= P2; i++)
			{
				PID_acc_temp1 = angle[axis] - L_trim[i][axis];				// Offset angle with trim
    8526:	e9 a1       	ldd	r30, Y+33	; 0x21
    8528:	fa a1       	ldd	r31, Y+34	; 0x22
    852a:	84 81       	ldd	r24, Z+4	; 0x04
    852c:	95 81       	ldd	r25, Z+5	; 0x05
    852e:	9a 01       	movw	r18, r20
    8530:	28 1b       	sub	r18, r24
    8532:	39 0b       	sbc	r19, r25
				PID_acc_temp1 *= L_gain[i][axis];							// P-term of accelerometer (Max gain of 127)
    8534:	f1 01       	movw	r30, r2
    8536:	a0 81       	ld	r26, Z
    8538:	bb 27       	eor	r27, r27
    853a:	a7 fd       	sbrc	r26, 7
    853c:	b0 95       	com	r27
    853e:	0e 94 d3 48 	call	0x91a6	; 0x91a6 <__mulhisi3>
				PID_ACCs[i][axis] = (int16_t)(PID_acc_temp1 >> 8);			// Reduce and convert to integer
    8542:	bb 27       	eor	r27, r27
    8544:	97 fd       	sbrc	r25, 7
    8546:	ba 95       	dec	r27
    8548:	a9 2f       	mov	r26, r25
    854a:	98 2f       	mov	r25, r24
    854c:	87 2f       	mov	r24, r23
    854e:	ef 8d       	ldd	r30, Y+31	; 0x1f
    8550:	f8 a1       	ldd	r31, Y+32	; 0x20
    8552:	97 83       	std	Z+7, r25	; 0x07
    8554:	86 83       	std	Z+6, r24	; 0x06
	PID_AvgAccVert = 0;							// Reset average

	//************************************************************
	// PID loop
	//************************************************************
	for (axis = 0; axis <= YAW; axis ++)
    8556:	2b 96       	adiw	r28, 0x0b	; 11
    8558:	ee ad       	ldd	r30, Y+62	; 0x3e
    855a:	ff ad       	ldd	r31, Y+63	; 0x3f
    855c:	2b 97       	sbiw	r28, 0x0b	; 11
    855e:	32 97       	sbiw	r30, 0x02	; 2
    8560:	e1 f1       	breq	.+120    	; 0x85da <Calculate_PID+0x478>
	{
		//************************************************************
		// Add in gyro Yaw trim
		//************************************************************

		if (axis == YAW)
    8562:	2a 96       	adiw	r28, 0x0a	; 10
    8564:	ff ad       	ldd	r31, Y+63	; 0x3f
    8566:	2a 97       	sbiw	r28, 0x0a	; 10
    8568:	f1 30       	cpi	r31, 0x01	; 1
    856a:	39 f0       	breq	.+14     	; 0x857a <Calculate_PID+0x418>
		}
		// Reset PID_gyro variables to that data does not accumulate cross-axis
		else
		{
			PID_gyro_temp1 = 0;
			PID_gyro_temp2 = 0;
    856c:	81 2c       	mov	r8, r1
    856e:	91 2c       	mov	r9, r1
    8570:	54 01       	movw	r10, r8
			PID_gyro_temp2 = (int32_t)(Config.FlightMode[P2].Yaw_trim << 6);
		}
		// Reset PID_gyro variables to that data does not accumulate cross-axis
		else
		{
			PID_gyro_temp1 = 0;
    8572:	80 e0       	ldi	r24, 0x00	; 0
    8574:	90 e0       	ldi	r25, 0x00	; 0
    8576:	dc 01       	movw	r26, r24
    8578:	0a c0       	rjmp	.+20     	; 0x858e <Calculate_PID+0x42c>
		//************************************************************

		if (axis == YAW)
		{
			PID_gyro_temp1 = (int32_t)(Config.FlightMode[P1].Yaw_trim << 6);
			PID_gyro_temp2 = (int32_t)(Config.FlightMode[P2].Yaw_trim << 6);
    857a:	21 96       	adiw	r28, 0x01	; 1
    857c:	8c ac       	ldd	r8, Y+60	; 0x3c
    857e:	9d ac       	ldd	r9, Y+61	; 0x3d
    8580:	ae ac       	ldd	r10, Y+62	; 0x3e
    8582:	bf ac       	ldd	r11, Y+63	; 0x3f
    8584:	21 97       	sbiw	r28, 0x01	; 1
		// Add in gyro Yaw trim
		//************************************************************

		if (axis == YAW)
		{
			PID_gyro_temp1 = (int32_t)(Config.FlightMode[P1].Yaw_trim << 6);
    8586:	89 ad       	ldd	r24, Y+57	; 0x39
    8588:	9a ad       	ldd	r25, Y+58	; 0x3a
    858a:	ab ad       	ldd	r26, Y+59	; 0x3b
    858c:	bc ad       	ldd	r27, Y+60	; 0x3c
    858e:	2b 96       	adiw	r28, 0x0b	; 11
    8590:	ee ad       	ldd	r30, Y+62	; 0x3e
    8592:	ff ad       	ldd	r31, Y+63	; 0x3f
    8594:	2b 97       	sbiw	r28, 0x0b	; 11
    8596:	31 96       	adiw	r30, 0x01	; 1
    8598:	2b 96       	adiw	r28, 0x0b	; 11
    859a:	ff af       	std	Y+63, r31	; 0x3f
    859c:	ee af       	std	Y+62, r30	; 0x3e
    859e:	2b 97       	sbiw	r28, 0x0b	; 11
    85a0:	ed a1       	ldd	r30, Y+37	; 0x25
    85a2:	fe a1       	ldd	r31, Y+38	; 0x26
    85a4:	34 96       	adiw	r30, 0x04	; 4
    85a6:	fe a3       	std	Y+38, r31	; 0x26
    85a8:	ed a3       	std	Y+37, r30	; 0x25
    85aa:	eb a1       	ldd	r30, Y+35	; 0x23
    85ac:	fc a1       	ldd	r31, Y+36	; 0x24
    85ae:	32 96       	adiw	r30, 0x02	; 2
    85b0:	fc a3       	std	Y+36, r31	; 0x24
    85b2:	eb a3       	std	Y+35, r30	; 0x23
    85b4:	ef a1       	ldd	r30, Y+39	; 0x27
    85b6:	f8 a5       	ldd	r31, Y+40	; 0x28
    85b8:	32 96       	adiw	r30, 0x02	; 2
    85ba:	f8 a7       	std	Y+40, r31	; 0x28
    85bc:	ef a3       	std	Y+39, r30	; 0x27
    85be:	e9 a1       	ldd	r30, Y+33	; 0x21
    85c0:	fa a1       	ldd	r31, Y+34	; 0x22
    85c2:	32 96       	adiw	r30, 0x02	; 2
    85c4:	fa a3       	std	Y+34, r31	; 0x22
    85c6:	e9 a3       	std	Y+33, r30	; 0x21
    85c8:	ef 8d       	ldd	r30, Y+31	; 0x1f
    85ca:	f8 a1       	ldd	r31, Y+32	; 0x20
    85cc:	32 96       	adiw	r30, 0x02	; 2
    85ce:	f8 a3       	std	Y+32, r31	; 0x20
    85d0:	ef 8f       	std	Y+31, r30	; 0x1f
    85d2:	ff ef       	ldi	r31, 0xFF	; 255
    85d4:	2f 1a       	sub	r2, r31
    85d6:	3f 0a       	sbc	r3, r31
    85d8:	a8 ce       	rjmp	.-688    	; 0x832a <Calculate_PID+0x1c8>
	//************************************************************

	// Do for P1 and P2
	for (i = P1; i <= P2; i++)
	{
		PID_acc_temp1 = -AvAccVert;				// Get and copy Z-acc value. Negate to oppose G
    85da:	27 96       	adiw	r28, 0x07	; 7
    85dc:	ce ac       	ldd	r12, Y+62	; 0x3e
    85de:	df ac       	ldd	r13, Y+63	; 0x3f
    85e0:	27 97       	sbiw	r28, 0x07	; 7
    85e2:	d1 94       	neg	r13
    85e4:	c1 94       	neg	r12
    85e6:	d1 08       	sbc	r13, r1

		PID_acc_temp1 *= L_gain[i][YAW];		// Multiply P-term (Max gain of 127)
    85e8:	96 01       	movw	r18, r12
    85ea:	f9 a5       	ldd	r31, Y+41	; 0x29
    85ec:	af 2f       	mov	r26, r31
    85ee:	bb 27       	eor	r27, r27
    85f0:	a7 fd       	sbrc	r26, 7
    85f2:	b0 95       	com	r27
    85f4:	0e 94 d3 48 	call	0x91a6	; 0x91a6 <__mulhisi3>

		PID_acc_temp1 = PID_acc_temp1 >> 4;		// Moderate Z-acc to reasonable values
    85f8:	44 e0       	ldi	r20, 0x04	; 4
    85fa:	95 95       	asr	r25
    85fc:	87 95       	ror	r24
    85fe:	77 95       	ror	r23
    8600:	67 95       	ror	r22
    8602:	4a 95       	dec	r20
    8604:	d1 f7       	brne	.-12     	; 0x85fa <Calculate_PID+0x498>

		if (PID_acc_temp1 > MAX_ZGAIN)			// Limit to +/-MAX_ZGAIN
    8606:	65 3f       	cpi	r22, 0xF5	; 245
    8608:	21 e0       	ldi	r18, 0x01	; 1
    860a:	72 07       	cpc	r23, r18
    860c:	81 05       	cpc	r24, r1
    860e:	91 05       	cpc	r25, r1
    8610:	64 f4       	brge	.+24     	; 0x862a <Calculate_PID+0x4c8>
		{
			PID_acc_temp1 = MAX_ZGAIN;
		}
		if (PID_acc_temp1 < -MAX_ZGAIN)
    8612:	6c 30       	cpi	r22, 0x0C	; 12
    8614:	3e ef       	ldi	r19, 0xFE	; 254
    8616:	73 07       	cpc	r23, r19
    8618:	3f ef       	ldi	r19, 0xFF	; 255
    861a:	83 07       	cpc	r24, r19
    861c:	93 07       	cpc	r25, r19
    861e:	4c f4       	brge	.+18     	; 0x8632 <Calculate_PID+0x4d0>
		{
			PID_acc_temp1 = -MAX_ZGAIN;
    8620:	6c e0       	ldi	r22, 0x0C	; 12
    8622:	7e ef       	ldi	r23, 0xFE	; 254
    8624:	8f ef       	ldi	r24, 0xFF	; 255
    8626:	9f ef       	ldi	r25, 0xFF	; 255
    8628:	04 c0       	rjmp	.+8      	; 0x8632 <Calculate_PID+0x4d0>

		PID_acc_temp1 = PID_acc_temp1 >> 4;		// Moderate Z-acc to reasonable values

		if (PID_acc_temp1 > MAX_ZGAIN)			// Limit to +/-MAX_ZGAIN
		{
			PID_acc_temp1 = MAX_ZGAIN;
    862a:	64 ef       	ldi	r22, 0xF4	; 244
    862c:	71 e0       	ldi	r23, 0x01	; 1
    862e:	80 e0       	ldi	r24, 0x00	; 0
    8630:	90 e0       	ldi	r25, 0x00	; 0
		if (PID_acc_temp1 < -MAX_ZGAIN)
		{
			PID_acc_temp1 = -MAX_ZGAIN;
		}

		PID_ACCs[i][YAW] = (int16_t)PID_acc_temp1; // Copy to global values
    8632:	70 93 22 08 	sts	0x0822, r23
    8636:	60 93 21 08 	sts	0x0821, r22
	// Do for P1 and P2
	for (i = P1; i <= P2; i++)
	{
		PID_acc_temp1 = -AvAccVert;				// Get and copy Z-acc value. Negate to oppose G

		PID_acc_temp1 *= L_gain[i][YAW];		// Multiply P-term (Max gain of 127)
    863a:	96 01       	movw	r18, r12
    863c:	4a a5       	ldd	r20, Y+42	; 0x2a
    863e:	a4 2f       	mov	r26, r20
    8640:	bb 27       	eor	r27, r27
    8642:	a7 fd       	sbrc	r26, 7
    8644:	b0 95       	com	r27
    8646:	0e 94 d3 48 	call	0x91a6	; 0x91a6 <__mulhisi3>

		PID_acc_temp1 = PID_acc_temp1 >> 4;		// Moderate Z-acc to reasonable values
    864a:	34 e0       	ldi	r19, 0x04	; 4
    864c:	95 95       	asr	r25
    864e:	87 95       	ror	r24
    8650:	77 95       	ror	r23
    8652:	67 95       	ror	r22
    8654:	3a 95       	dec	r19
    8656:	d1 f7       	brne	.-12     	; 0x864c <Calculate_PID+0x4ea>

		if (PID_acc_temp1 > MAX_ZGAIN)			// Limit to +/-MAX_ZGAIN
    8658:	65 3f       	cpi	r22, 0xF5	; 245
    865a:	51 e0       	ldi	r21, 0x01	; 1
    865c:	75 07       	cpc	r23, r21
    865e:	81 05       	cpc	r24, r1
    8660:	91 05       	cpc	r25, r1
    8662:	64 f4       	brge	.+24     	; 0x867c <Calculate_PID+0x51a>
		{
			PID_acc_temp1 = MAX_ZGAIN;
		}
		if (PID_acc_temp1 < -MAX_ZGAIN)
    8664:	6c 30       	cpi	r22, 0x0C	; 12
    8666:	ae ef       	ldi	r26, 0xFE	; 254
    8668:	7a 07       	cpc	r23, r26
    866a:	af ef       	ldi	r26, 0xFF	; 255
    866c:	8a 07       	cpc	r24, r26
    866e:	9a 07       	cpc	r25, r26
    8670:	4c f4       	brge	.+18     	; 0x8684 <Calculate_PID+0x522>
		{
			PID_acc_temp1 = -MAX_ZGAIN;
    8672:	6c e0       	ldi	r22, 0x0C	; 12
    8674:	7e ef       	ldi	r23, 0xFE	; 254
    8676:	8f ef       	ldi	r24, 0xFF	; 255
    8678:	9f ef       	ldi	r25, 0xFF	; 255
    867a:	04 c0       	rjmp	.+8      	; 0x8684 <Calculate_PID+0x522>

		PID_acc_temp1 = PID_acc_temp1 >> 4;		// Moderate Z-acc to reasonable values

		if (PID_acc_temp1 > MAX_ZGAIN)			// Limit to +/-MAX_ZGAIN
		{
			PID_acc_temp1 = MAX_ZGAIN;
    867c:	64 ef       	ldi	r22, 0xF4	; 244
    867e:	71 e0       	ldi	r23, 0x01	; 1
    8680:	80 e0       	ldi	r24, 0x00	; 0
    8682:	90 e0       	ldi	r25, 0x00	; 0
		if (PID_acc_temp1 < -MAX_ZGAIN)
		{
			PID_acc_temp1 = -MAX_ZGAIN;
		}

		PID_ACCs[i][YAW] = (int16_t)PID_acc_temp1; // Copy to global values
    8684:	70 93 28 08 	sts	0x0828, r23
    8688:	60 93 27 08 	sts	0x0827, r22
	}
}
    868c:	c6 5b       	subi	r28, 0xB6	; 182
    868e:	df 4f       	sbci	r29, 0xFF	; 255
    8690:	0f b6       	in	r0, 0x3f	; 63
    8692:	f8 94       	cli
    8694:	de bf       	out	0x3e, r29	; 62
    8696:	0f be       	out	0x3f, r0	; 63
    8698:	cd bf       	out	0x3d, r28	; 61
    869a:	df 91       	pop	r29
    869c:	cf 91       	pop	r28
    869e:	1f 91       	pop	r17
    86a0:	0f 91       	pop	r16
    86a2:	ff 90       	pop	r15
    86a4:	ef 90       	pop	r14
    86a6:	df 90       	pop	r13
    86a8:	cf 90       	pop	r12
    86aa:	bf 90       	pop	r11
    86ac:	af 90       	pop	r10
    86ae:	9f 90       	pop	r9
    86b0:	8f 90       	pop	r8
    86b2:	7f 90       	pop	r7
    86b4:	6f 90       	pop	r6
    86b6:	5f 90       	pop	r5
    86b8:	4f 90       	pop	r4
    86ba:	3f 90       	pop	r3
    86bc:	2f 90       	pop	r2
    86be:	08 95       	ret

000086c0 <RxGetChannels>:
volatile int16_t MonopolarThrottle;				// Monopolar throttle

// Get raw flight channel data (~2500 to 5000) and remove zero offset
// Use channel mapping for reconfigurability
void RxGetChannels(void)
{
    86c0:	eb e8       	ldi	r30, 0x8B	; 139
    86c2:	f7 e0       	ldi	r31, 0x07	; 7
	static	int16_t	OldRxSum;			// Sum of all major channels
	int16_t	RxSumDiff;
	int16_t	RxSum, i;

	// Remove zero offsets
	for (i=0; i < MAX_RC_CHANNELS; i++)
    86c4:	80 e0       	ldi	r24, 0x00	; 0
    86c6:	90 e0       	ldi	r25, 0x00	; 0
	{
		RCinputs[i]	= RxChannel[i] - Config.RxChannelZeroOffset[i];
    86c8:	ac 01       	movw	r20, r24
    86ca:	44 0f       	add	r20, r20
    86cc:	55 1f       	adc	r21, r21
    86ce:	da 01       	movw	r26, r20
    86d0:	a6 54       	subi	r26, 0x46	; 70
    86d2:	b8 4f       	sbci	r27, 0xF8	; 248
    86d4:	2d 91       	ld	r18, X+
    86d6:	3c 91       	ld	r19, X
    86d8:	61 91       	ld	r22, Z+
    86da:	71 91       	ld	r23, Z+
    86dc:	26 1b       	sub	r18, r22
    86de:	37 0b       	sbc	r19, r23
    86e0:	da 01       	movw	r26, r20
    86e2:	a5 5d       	subi	r26, 0xD5	; 213
    86e4:	b7 4f       	sbci	r27, 0xF7	; 247
    86e6:	11 96       	adiw	r26, 0x01	; 1
    86e8:	3c 93       	st	X, r19
    86ea:	2e 93       	st	-X, r18
	static	int16_t	OldRxSum;			// Sum of all major channels
	int16_t	RxSumDiff;
	int16_t	RxSum, i;

	// Remove zero offsets
	for (i=0; i < MAX_RC_CHANNELS; i++)
    86ec:	01 96       	adiw	r24, 0x01	; 1
    86ee:	88 30       	cpi	r24, 0x08	; 8
    86f0:	91 05       	cpc	r25, r1
    86f2:	51 f7       	brne	.-44     	; 0x86c8 <RxGetChannels+0x8>
	{
		RCinputs[i]	= RxChannel[i] - Config.RxChannelZeroOffset[i];
	}

	// Special handling for monopolar throttle
	MonopolarThrottle = RxChannel[THROTTLE] - Config.RxChannelZeroOffset[THROTTLE];
    86f4:	80 91 ba 07 	lds	r24, 0x07BA
    86f8:	90 91 bb 07 	lds	r25, 0x07BB
    86fc:	20 91 8b 07 	lds	r18, 0x078B
    8700:	30 91 8c 07 	lds	r19, 0x078C
    8704:	82 1b       	sub	r24, r18
    8706:	93 0b       	sbc	r25, r19
    8708:	90 93 2a 08 	sts	0x082A, r25
    870c:	80 93 29 08 	sts	0x0829, r24

	// Bipolar throttle must use the nominal mid-point
	RCinputs[THROTTLE] = RxChannel[THROTTLE] - 3750; 
    8710:	80 91 ba 07 	lds	r24, 0x07BA
    8714:	90 91 bb 07 	lds	r25, 0x07BB
    8718:	86 5a       	subi	r24, 0xA6	; 166
    871a:	9e 40       	sbci	r25, 0x0E	; 14
    871c:	90 93 2c 08 	sts	0x082C, r25
    8720:	80 93 2b 08 	sts	0x082B, r24

	// Reverse primary channels as requested
	if (Config.AileronPol == REVERSED)
    8724:	80 91 e1 05 	lds	r24, 0x05E1
    8728:	81 30       	cpi	r24, 0x01	; 1
    872a:	59 f4       	brne	.+22     	; 0x8742 <RxGetChannels+0x82>
	{
		RCinputs[AILERON] = -RCinputs[AILERON];
    872c:	80 91 2d 08 	lds	r24, 0x082D
    8730:	90 91 2e 08 	lds	r25, 0x082E
    8734:	91 95       	neg	r25
    8736:	81 95       	neg	r24
    8738:	91 09       	sbc	r25, r1
    873a:	90 93 2e 08 	sts	0x082E, r25
    873e:	80 93 2d 08 	sts	0x082D, r24
	}

	if (Config.ElevatorPol == REVERSED)
    8742:	80 91 e2 05 	lds	r24, 0x05E2
    8746:	81 30       	cpi	r24, 0x01	; 1
    8748:	59 f4       	brne	.+22     	; 0x8760 <RxGetChannels+0xa0>
	{
		RCinputs[ELEVATOR] = -RCinputs[ELEVATOR];
    874a:	80 91 2f 08 	lds	r24, 0x082F
    874e:	90 91 30 08 	lds	r25, 0x0830
    8752:	91 95       	neg	r25
    8754:	81 95       	neg	r24
    8756:	91 09       	sbc	r25, r1
    8758:	90 93 30 08 	sts	0x0830, r25
    875c:	80 93 2f 08 	sts	0x082F, r24
	}

	if (Config.RudderPol == REVERSED)
    8760:	80 91 42 06 	lds	r24, 0x0642
    8764:	81 30       	cpi	r24, 0x01	; 1
    8766:	59 f4       	brne	.+22     	; 0x877e <RxGetChannels+0xbe>
	{
		RCinputs[RUDDER] = -RCinputs[RUDDER];
    8768:	80 91 31 08 	lds	r24, 0x0831
    876c:	90 91 32 08 	lds	r25, 0x0832
    8770:	91 95       	neg	r25
    8772:	81 95       	neg	r24
    8774:	91 09       	sbc	r25, r1
    8776:	90 93 32 08 	sts	0x0832, r25
    877a:	80 93 31 08 	sts	0x0831, r24
	}

	// Calculate RX activity
	RxSum = RCinputs[AILERON] + RCinputs[ELEVATOR] + RCinputs[RUDDER];
    877e:	80 91 2d 08 	lds	r24, 0x082D
    8782:	90 91 2e 08 	lds	r25, 0x082E
    8786:	40 91 2f 08 	lds	r20, 0x082F
    878a:	50 91 30 08 	lds	r21, 0x0830
    878e:	20 91 31 08 	lds	r18, 0x0831
    8792:	30 91 32 08 	lds	r19, 0x0832
    8796:	84 0f       	add	r24, r20
    8798:	95 1f       	adc	r25, r21
    879a:	82 0f       	add	r24, r18
    879c:	93 1f       	adc	r25, r19
	RxSumDiff = RxSum - OldRxSum;
    879e:	20 91 42 05 	lds	r18, 0x0542
    87a2:	30 91 43 05 	lds	r19, 0x0543
    87a6:	ac 01       	movw	r20, r24
    87a8:	42 1b       	sub	r20, r18
    87aa:	53 0b       	sbc	r21, r19
    87ac:	9a 01       	movw	r18, r20

	// Set RX activity flag if movement above noise floor or throttle above minimum
	if ((RxSumDiff > NOISE_THRESH) || (RxSumDiff < -NOISE_THRESH) || (MonopolarThrottle > THROTTLEIDLE)) 
    87ae:	2b 5f       	subi	r18, 0xFB	; 251
    87b0:	3f 4f       	sbci	r19, 0xFF	; 255
    87b2:	2b 30       	cpi	r18, 0x0B	; 11
    87b4:	31 05       	cpc	r19, r1
    87b6:	38 f4       	brcc	.+14     	; 0x87c6 <RxGetChannels+0x106>
    87b8:	20 91 29 08 	lds	r18, 0x0829
    87bc:	30 91 2a 08 	lds	r19, 0x082A
    87c0:	23 33       	cpi	r18, 0x33	; 51
    87c2:	31 05       	cpc	r19, r1
    87c4:	24 f0       	brlt	.+8      	; 0x87ce <RxGetChannels+0x10e>
	{
		Flight_flags |= (1 << RxActivity);
    87c6:	20 91 21 05 	lds	r18, 0x0521
    87ca:	21 60       	ori	r18, 0x01	; 1
    87cc:	03 c0       	rjmp	.+6      	; 0x87d4 <RxGetChannels+0x114>
	}
	else 
	{
		Flight_flags &= ~(1 << RxActivity);
    87ce:	20 91 21 05 	lds	r18, 0x0521
    87d2:	2e 7f       	andi	r18, 0xFE	; 254
    87d4:	20 93 21 05 	sts	0x0521, r18
	}
	
	// Preset RCinputs[NOCHAN] for sanity
	RCinputs[NOCHAN] = 0;
    87d8:	10 92 3c 08 	sts	0x083C, r1
    87dc:	10 92 3b 08 	sts	0x083B, r1

	OldRxSum = RxSum;
    87e0:	90 93 43 05 	sts	0x0543, r25
    87e4:	80 93 42 05 	sts	0x0542, r24
    87e8:	08 95       	ret

000087ea <CenterSticks>:
}

// Center sticks on request from Menu
void CenterSticks(void)		
{
    87ea:	0f 93       	push	r16
    87ec:	1f 93       	push	r17
    87ee:	cf 93       	push	r28
    87f0:	df 93       	push	r29
    87f2:	cd b7       	in	r28, 0x3d	; 61
    87f4:	de b7       	in	r29, 0x3e	; 62
    87f6:	60 97       	sbiw	r28, 0x10	; 16
    87f8:	0f b6       	in	r0, 0x3f	; 63
    87fa:	f8 94       	cli
    87fc:	de bf       	out	0x3e, r29	; 62
    87fe:	0f be       	out	0x3f, r0	; 63
    8800:	cd bf       	out	0x3d, r28	; 61
	uint8_t i, j;
	uint16_t RxChannelZeroOffset[MAX_RC_CHANNELS] = {0,0,0,0,0,0,0,0};
    8802:	8e 01       	movw	r16, r28
    8804:	0f 5f       	subi	r16, 0xFF	; 255
    8806:	1f 4f       	sbci	r17, 0xFF	; 255
    8808:	80 e1       	ldi	r24, 0x10	; 16
    880a:	d8 01       	movw	r26, r16
    880c:	1d 92       	st	X+, r1
    880e:	8a 95       	dec	r24
    8810:	e9 f7       	brne	.-6      	; 0x880c <CenterSticks+0x22>
    8812:	68 e0       	ldi	r22, 0x08	; 8
	OldRxSum = RxSum;
}

// Center sticks on request from Menu
void CenterSticks(void)		
{
    8814:	d8 01       	movw	r26, r16
    8816:	80 e0       	ldi	r24, 0x00	; 0
    8818:	90 e0       	ldi	r25, 0x00	; 0
	// RxChannel will auto-update every RC frame (normally 46Hz or so)
	for (i=0; i<8; i++)
	{
		for (j=0; j<MAX_RC_CHANNELS; j++)
		{
			RxChannelZeroOffset[j] += RxChannel[j];
    881a:	9c 01       	movw	r18, r24
    881c:	22 0f       	add	r18, r18
    881e:	33 1f       	adc	r19, r19
    8820:	26 54       	subi	r18, 0x46	; 70
    8822:	38 4f       	sbci	r19, 0xF8	; 248
    8824:	f9 01       	movw	r30, r18
    8826:	40 81       	ld	r20, Z
    8828:	51 81       	ldd	r21, Z+1	; 0x01
    882a:	2d 91       	ld	r18, X+
    882c:	3c 91       	ld	r19, X
    882e:	11 97       	sbiw	r26, 0x01	; 1
    8830:	24 0f       	add	r18, r20
    8832:	35 1f       	adc	r19, r21
    8834:	2d 93       	st	X+, r18
    8836:	3d 93       	st	X+, r19
    8838:	01 96       	adiw	r24, 0x01	; 1

	// Take an average of eight readings
	// RxChannel will auto-update every RC frame (normally 46Hz or so)
	for (i=0; i<8; i++)
	{
		for (j=0; j<MAX_RC_CHANNELS; j++)
    883a:	88 30       	cpi	r24, 0x08	; 8
    883c:	91 05       	cpc	r25, r1
    883e:	69 f7       	brne	.-38     	; 0x881a <CenterSticks+0x30>
    8840:	ff e7       	ldi	r31, 0x7F	; 127
    8842:	2a e1       	ldi	r18, 0x1A	; 26
    8844:	86 e0       	ldi	r24, 0x06	; 6
    8846:	f1 50       	subi	r31, 0x01	; 1
    8848:	20 40       	sbci	r18, 0x00	; 0
    884a:	80 40       	sbci	r24, 0x00	; 0
    884c:	e1 f7       	brne	.-8      	; 0x8846 <CenterSticks+0x5c>
    884e:	00 c0       	rjmp	.+0      	; 0x8850 <CenterSticks+0x66>
    8850:	00 00       	nop
    8852:	61 50       	subi	r22, 0x01	; 1
	uint8_t i, j;
	uint16_t RxChannelZeroOffset[MAX_RC_CHANNELS] = {0,0,0,0,0,0,0,0};

	// Take an average of eight readings
	// RxChannel will auto-update every RC frame (normally 46Hz or so)
	for (i=0; i<8; i++)
    8854:	f9 f6       	brne	.-66     	; 0x8814 <CenterSticks+0x2a>
    8856:	ab e8       	ldi	r26, 0x8B	; 139
    8858:	b7 e0       	ldi	r27, 0x07	; 7
    885a:	9e 01       	movw	r18, r28
    885c:	2f 5e       	subi	r18, 0xEF	; 239
    885e:	3f 4f       	sbci	r19, 0xFF	; 255
    8860:	f8 01       	movw	r30, r16
		_delay_ms(100); // Wait for a new frame
	}

	for (i=0;i<MAX_RC_CHANNELS;i++)
	{
		Config.RxChannelZeroOffset[i] = ((RxChannelZeroOffset[i] + 4) >> 3); // Round and divide by 8
    8862:	81 91       	ld	r24, Z+
    8864:	91 91       	ld	r25, Z+
    8866:	04 96       	adiw	r24, 0x04	; 4
    8868:	43 e0       	ldi	r20, 0x03	; 3
    886a:	96 95       	lsr	r25
    886c:	87 95       	ror	r24
    886e:	4a 95       	dec	r20
    8870:	e1 f7       	brne	.-8      	; 0x886a <CenterSticks+0x80>
    8872:	8d 93       	st	X+, r24
    8874:	9d 93       	st	X+, r25
			RxChannelZeroOffset[j] += RxChannel[j];
		}
		_delay_ms(100); // Wait for a new frame
	}

	for (i=0;i<MAX_RC_CHANNELS;i++)
    8876:	e2 17       	cp	r30, r18
    8878:	f3 07       	cpc	r31, r19
    887a:	99 f7       	brne	.-26     	; 0x8862 <CenterSticks+0x78>
	{
		Config.RxChannelZeroOffset[i] = ((RxChannelZeroOffset[i] + 4) >> 3); // Round and divide by 8
	}

	Save_Config_to_EEPROM();
}
    887c:	60 96       	adiw	r28, 0x10	; 16
    887e:	0f b6       	in	r0, 0x3f	; 63
    8880:	f8 94       	cli
    8882:	de bf       	out	0x3e, r29	; 62
    8884:	0f be       	out	0x3f, r0	; 63
    8886:	cd bf       	out	0x3d, r28	; 61
    8888:	df 91       	pop	r29
    888a:	cf 91       	pop	r28
    888c:	1f 91       	pop	r17
    888e:	0f 91       	pop	r16
	for (i=0;i<MAX_RC_CHANNELS;i++)
	{
		Config.RxChannelZeroOffset[i] = ((RxChannelZeroOffset[i] + 4) >> 3); // Round and divide by 8
	}

	Save_Config_to_EEPROM();
    8890:	0c 94 6b 16 	jmp	0x2cd6	; 0x2cd6 <Save_Config_to_EEPROM>

00008894 <output_servo_ppm>:
//************************************************************

volatile uint16_t ServoOut[MAX_OUTPUTS];

void output_servo_ppm(uint8_t ServoFlag)
{
    8894:	8f 92       	push	r8
    8896:	9f 92       	push	r9
    8898:	af 92       	push	r10
    889a:	bf 92       	push	r11
    889c:	df 92       	push	r13
    889e:	ef 92       	push	r14
    88a0:	ff 92       	push	r15
    88a2:	0f 93       	push	r16
    88a4:	1f 93       	push	r17
    88a6:	cf 93       	push	r28
    88a8:	df 93       	push	r29
    88aa:	d8 2e       	mov	r13, r24
    88ac:	07 e4       	ldi	r16, 0x47	; 71
    88ae:	16 e0       	ldi	r17, 0x06	; 6
    88b0:	c0 e0       	ldi	r28, 0x00	; 0
    88b2:	d0 e0       	ldi	r29, 0x00	; 0
			temp = ((temp - 3750) >> 1) + 1500;
		}
		else
		{
			// Scale motor from 2500~5000 to 1000~2000
			temp = ((temp << 2) + 5) / 10; 	// Round and convert	
    88b4:	ea e0       	ldi	r30, 0x0A	; 10
    88b6:	8e 2e       	mov	r8, r30
    88b8:	91 2c       	mov	r9, r1
    88ba:	a1 2c       	mov	r10, r1
    88bc:	b1 2c       	mov	r11, r1
	{
		// Debug - test limits
		//ServoOut[i] = 2500; //2500 to 5000
		//ServoOut[i] = 5000;
		
		temp = ServoOut[i];					// Promote to 32 bits
    88be:	7e 01       	movw	r14, r28
    88c0:	ee 0c       	add	r14, r14
    88c2:	ff 1c       	adc	r15, r15
    88c4:	f7 01       	movw	r30, r14
    88c6:	e3 5c       	subi	r30, 0xC3	; 195
    88c8:	f7 4f       	sbci	r31, 0xF7	; 247
    88ca:	20 81       	ld	r18, Z
    88cc:	31 81       	ldd	r19, Z+1	; 0x01
    88ce:	a9 01       	movw	r20, r18
    88d0:	60 e0       	ldi	r22, 0x00	; 0
    88d2:	70 e0       	ldi	r23, 0x00	; 0

		// Check for motor marker and ignore if set
		if (Config.Channel[i].Motor_marker != MOTOR)
    88d4:	f8 01       	movw	r30, r16
    88d6:	80 81       	ld	r24, Z
    88d8:	82 30       	cpi	r24, 0x02	; 2
    88da:	79 f0       	breq	.+30     	; 0x88fa <output_servo_ppm+0x66>
		{
			// Scale servo from 2500~5000 to 875~2125
			temp = ((temp - 3750) >> 1) + 1500;
    88dc:	9a 01       	movw	r18, r20
    88de:	ab 01       	movw	r20, r22
    88e0:	26 5a       	subi	r18, 0xA6	; 166
    88e2:	3e 40       	sbci	r19, 0x0E	; 14
    88e4:	41 09       	sbc	r20, r1
    88e6:	51 09       	sbc	r21, r1
    88e8:	56 95       	lsr	r21
    88ea:	47 95       	ror	r20
    88ec:	37 95       	ror	r19
    88ee:	27 95       	ror	r18
    88f0:	24 52       	subi	r18, 0x24	; 36
    88f2:	3a 4f       	sbci	r19, 0xFA	; 250
    88f4:	4f 4f       	sbci	r20, 0xFF	; 255
    88f6:	5f 4f       	sbci	r21, 0xFF	; 255
    88f8:	11 c0       	rjmp	.+34     	; 0x891c <output_servo_ppm+0x88>
		}
		else
		{
			// Scale motor from 2500~5000 to 1000~2000
			temp = ((temp << 2) + 5) / 10; 	// Round and convert	
    88fa:	cb 01       	movw	r24, r22
    88fc:	ba 01       	movw	r22, r20
    88fe:	52 e0       	ldi	r21, 0x02	; 2
    8900:	66 0f       	add	r22, r22
    8902:	77 1f       	adc	r23, r23
    8904:	88 1f       	adc	r24, r24
    8906:	99 1f       	adc	r25, r25
    8908:	5a 95       	dec	r21
    890a:	d1 f7       	brne	.-12     	; 0x8900 <output_servo_ppm+0x6c>
    890c:	6b 5f       	subi	r22, 0xFB	; 251
    890e:	7f 4f       	sbci	r23, 0xFF	; 255
    8910:	8f 4f       	sbci	r24, 0xFF	; 255
    8912:	9f 4f       	sbci	r25, 0xFF	; 255
    8914:	a5 01       	movw	r20, r10
    8916:	94 01       	movw	r18, r8
    8918:	0e 94 8c 48 	call	0x9118	; 0x9118 <__udivmodsi4>
		}
		
		ServoOut[i] = (uint16_t)temp;
    891c:	f7 01       	movw	r30, r14
    891e:	e3 5c       	subi	r30, 0xC3	; 195
    8920:	f7 4f       	sbci	r31, 0xF7	; 247
    8922:	31 83       	std	Z+1, r19	; 0x01
    8924:	20 83       	st	Z, r18
    8926:	21 96       	adiw	r28, 0x01	; 1
    8928:	0a 5d       	subi	r16, 0xDA	; 218
    892a:	1f 4f       	sbci	r17, 0xFF	; 255
{
	uint32_t temp;
	uint8_t i = 0;

	// Re-span numbers from internal values to microseconds
	for (i = 0; i < MAX_OUTPUTS; i++)
    892c:	c8 30       	cpi	r28, 0x08	; 8
    892e:	d1 05       	cpc	r29, r1
    8930:	31 f6       	brne	.-116    	; 0x88be <output_servo_ppm+0x2a>
		
		ServoOut[i] = (uint16_t)temp;
	}

	// Re-sample throttle value
	MonopolarThrottle = RxChannel[THROTTLE] - Config.RxChannelZeroOffset[THROTTLE];
    8932:	80 91 ba 07 	lds	r24, 0x07BA
    8936:	90 91 bb 07 	lds	r25, 0x07BB
    893a:	20 91 8b 07 	lds	r18, 0x078B
    893e:	30 91 8c 07 	lds	r19, 0x078C
    8942:	82 1b       	sub	r24, r18
    8944:	93 0b       	sbc	r25, r19
    8946:	90 93 2a 08 	sts	0x082A, r25
    894a:	80 93 29 08 	sts	0x0829, r24

	// Check for motor flags if throttle is below arming minimum or disarmed
	// and set all motors to minimum throttle if so
	if 	(
			(MonopolarThrottle < THROTTLEIDLE) || 
    894e:	80 91 29 08 	lds	r24, 0x0829
    8952:	90 91 2a 08 	lds	r25, 0x082A
	// Re-sample throttle value
	MonopolarThrottle = RxChannel[THROTTLE] - Config.RxChannelZeroOffset[THROTTLE];

	// Check for motor flags if throttle is below arming minimum or disarmed
	// and set all motors to minimum throttle if so
	if 	(
    8956:	c2 97       	sbiw	r24, 0x32	; 50
    8958:	ac f0       	brlt	.+42     	; 0x8984 <output_servo_ppm+0xf0>
			(MonopolarThrottle < THROTTLEIDLE) || 
			((General_error & (1 << DISARMED)) != 0)
    895a:	80 91 22 05 	lds	r24, 0x0522
	MonopolarThrottle = RxChannel[THROTTLE] - Config.RxChannelZeroOffset[THROTTLE];

	// Check for motor flags if throttle is below arming minimum or disarmed
	// and set all motors to minimum throttle if so
	if 	(
			(MonopolarThrottle < THROTTLEIDLE) || 
    895e:	82 fd       	sbrc	r24, 2
    8960:	11 c0       	rjmp	.+34     	; 0x8984 <output_servo_ppm+0xf0>
		}
	}

	// Determine output rate based on device type
	// Suppress outputs during throttle high error
	if((General_error & (1 << THROTTLE_HIGH)) == 0)
    8962:	80 91 22 05 	lds	r24, 0x0522
    8966:	80 fd       	sbrc	r24, 0
    8968:	24 c0       	rjmp	.+72     	; 0x89b2 <output_servo_ppm+0x11e>
	{
		// Reset JitterFlag immediately before PWM generation
		JitterFlag = false;
    896a:	10 92 e5 07 	sts	0x07E5, r1
	
		// We now care about interrupts
		JitterGate = true;
    896e:	81 e0       	ldi	r24, 0x01	; 1
    8970:	80 93 e4 07 	sts	0x07E4, r24

		// Pass address of ServoOut array
		output_servo_ppm_asm(&ServoOut[0], ServoFlag);
    8974:	6d 2d       	mov	r22, r13
    8976:	8d e3       	ldi	r24, 0x3D	; 61
    8978:	98 e0       	ldi	r25, 0x08	; 8
    897a:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <output_servo_ppm_asm>
		
		// We no longer care about interrupts
		JitterGate = false;
    897e:	10 92 e4 07 	sts	0x07E4, r1
    8982:	17 c0       	rjmp	.+46     	; 0x89b2 <output_servo_ppm+0x11e>
//************************************************************

volatile uint16_t ServoOut[MAX_OUTPUTS];

void output_servo_ppm(uint8_t ServoFlag)
{
    8984:	e7 e4       	ldi	r30, 0x47	; 71
    8986:	f6 e0       	ldi	r31, 0x06	; 6
    8988:	80 e0       	ldi	r24, 0x00	; 0
    898a:	90 e0       	ldi	r25, 0x00	; 0
		{
			// Check for motor marker
			if (Config.Channel[i].Motor_marker == MOTOR)
			{
				// Set output to minimum pulse width (1000us)
				ServoOut[i] = MOTORMIN;
    898c:	28 ee       	ldi	r18, 0xE8	; 232
    898e:	33 e0       	ldi	r19, 0x03	; 3
	{
		// For each output
		for (i = 0; i < MAX_OUTPUTS; i++)
		{
			// Check for motor marker
			if (Config.Channel[i].Motor_marker == MOTOR)
    8990:	40 81       	ld	r20, Z
    8992:	42 30       	cpi	r20, 0x02	; 2
    8994:	41 f4       	brne	.+16     	; 0x89a6 <output_servo_ppm+0x112>
			{
				// Set output to minimum pulse width (1000us)
				ServoOut[i] = MOTORMIN;
    8996:	dc 01       	movw	r26, r24
    8998:	aa 0f       	add	r26, r26
    899a:	bb 1f       	adc	r27, r27
    899c:	a3 5c       	subi	r26, 0xC3	; 195
    899e:	b7 4f       	sbci	r27, 0xF7	; 247
    89a0:	11 96       	adiw	r26, 0x01	; 1
    89a2:	3c 93       	st	X, r19
    89a4:	2e 93       	st	-X, r18
    89a6:	01 96       	adiw	r24, 0x01	; 1
    89a8:	b6 96       	adiw	r30, 0x26	; 38
			(MonopolarThrottle < THROTTLEIDLE) || 
			((General_error & (1 << DISARMED)) != 0)
		)
	{
		// For each output
		for (i = 0; i < MAX_OUTPUTS; i++)
    89aa:	88 30       	cpi	r24, 0x08	; 8
    89ac:	91 05       	cpc	r25, r1
    89ae:	81 f7       	brne	.-32     	; 0x8990 <output_servo_ppm+0xfc>
    89b0:	d8 cf       	rjmp	.-80     	; 0x8962 <output_servo_ppm+0xce>
		output_servo_ppm_asm(&ServoOut[0], ServoFlag);
		
		// We no longer care about interrupts
		JitterGate = false;
	}
}
    89b2:	df 91       	pop	r29
    89b4:	cf 91       	pop	r28
    89b6:	1f 91       	pop	r17
    89b8:	0f 91       	pop	r16
    89ba:	ff 90       	pop	r15
    89bc:	ef 90       	pop	r14
    89be:	df 90       	pop	r13
    89c0:	bf 90       	pop	r11
    89c2:	af 90       	pop	r10
    89c4:	9f 90       	pop	r9
    89c6:	8f 90       	pop	r8
    89c8:	08 95       	ret

000089ca <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
  TWSR = 0;                         /* no prescaler */
    89ca:	10 92 b9 00 	sts	0x00B9, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
    89ce:	81 e1       	ldi	r24, 0x11	; 17
    89d0:	80 93 b8 00 	sts	0x00B8, r24
    89d4:	08 95       	ret

000089d6 <i2c_start>:
{
	uint32_t  i2c_timer = 0;
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    89d6:	94 ea       	ldi	r25, 0xA4	; 164
    89d8:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
    89dc:	4f ef       	ldi	r20, 0xFF	; 255
    89de:	50 e0       	ldi	r21, 0x00	; 0
    89e0:	60 e0       	ldi	r22, 0x00	; 0
    89e2:	70 e0       	ldi	r23, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    89e4:	90 91 bc 00 	lds	r25, 0x00BC
    89e8:	97 fd       	sbrc	r25, 7
    89ea:	06 c0       	rjmp	.+12     	; 0x89f8 <i2c_start+0x22>
    89ec:	41 50       	subi	r20, 0x01	; 1
    89ee:	51 09       	sbc	r21, r1
    89f0:	61 09       	sbc	r22, r1
    89f2:	71 09       	sbc	r23, r1
    89f4:	b8 f7       	brcc	.-18     	; 0x89e4 <i2c_start+0xe>
    89f6:	06 c0       	rjmp	.+12     	; 0x8a04 <i2c_start+0x2e>
	if(i2c_timer == 0)
    89f8:	45 2b       	or	r20, r21
    89fa:	46 2b       	or	r20, r22
    89fc:	47 2b       	or	r20, r23
    89fe:	11 f4       	brne	.+4      	; 0x8a04 <i2c_start+0x2e>
		return 1;
    8a00:	81 e0       	ldi	r24, 0x01	; 1
    8a02:	08 95       	ret

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    8a04:	90 91 b9 00 	lds	r25, 0x00B9
    8a08:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
    8a0a:	98 30       	cpi	r25, 0x08	; 8
    8a0c:	11 f0       	breq	.+4      	; 0x8a12 <i2c_start+0x3c>
    8a0e:	90 31       	cpi	r25, 0x10	; 16
    8a10:	b9 f7       	brne	.-18     	; 0x8a00 <i2c_start+0x2a>

	// send device address
	TWDR = address;
    8a12:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    8a16:	84 e8       	ldi	r24, 0x84	; 132
    8a18:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	i2c_timer = I2C_TIMER_DELAY;
    8a1c:	8f ef       	ldi	r24, 0xFF	; 255
    8a1e:	90 e0       	ldi	r25, 0x00	; 0
    8a20:	a0 e0       	ldi	r26, 0x00	; 0
    8a22:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    8a24:	20 91 bc 00 	lds	r18, 0x00BC
    8a28:	27 fd       	sbrc	r18, 7
    8a2a:	05 c0       	rjmp	.+10     	; 0x8a36 <i2c_start+0x60>
    8a2c:	01 97       	sbiw	r24, 0x01	; 1
    8a2e:	a1 09       	sbc	r26, r1
    8a30:	b1 09       	sbc	r27, r1
    8a32:	c0 f7       	brcc	.-16     	; 0x8a24 <i2c_start+0x4e>
    8a34:	04 c0       	rjmp	.+8      	; 0x8a3e <i2c_start+0x68>
	if(i2c_timer == 0)
    8a36:	89 2b       	or	r24, r25
    8a38:	8a 2b       	or	r24, r26
    8a3a:	8b 2b       	or	r24, r27
    8a3c:	09 f3       	breq	.-62     	; 0x8a00 <i2c_start+0x2a>
		return 1;

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    8a3e:	80 91 b9 00 	lds	r24, 0x00B9
    8a42:	88 7f       	andi	r24, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
    8a44:	88 31       	cpi	r24, 0x18	; 24
    8a46:	11 f0       	breq	.+4      	; 0x8a4c <i2c_start+0x76>
    8a48:	80 34       	cpi	r24, 0x40	; 64
    8a4a:	d1 f6       	brne	.-76     	; 0x8a00 <i2c_start+0x2a>

	return 0;
    8a4c:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */
    8a4e:	08 95       	ret

00008a50 <i2c_start_wait>:
	uint8_t   twst;

    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    8a50:	44 ea       	ldi	r20, 0xA4	; 164
    	twst = TW_STATUS & 0xF8;
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
    	TWCR = (1<<TWINT) | (1<<TWEN);
    8a52:	54 e8       	ldi	r21, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    8a54:	64 e9       	ldi	r22, 0x94	; 148
	uint8_t   twst;

    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    8a56:	40 93 bc 00 	sts	0x00BC, r20
    
    	// wait until transmission completed
	    i2c_timer = I2C_TIMER_DELAY;
    	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    8a5a:	20 e0       	ldi	r18, 0x00	; 0
    8a5c:	30 e0       	ldi	r19, 0x00	; 0
    8a5e:	90 91 bc 00 	lds	r25, 0x00BC
    8a62:	97 fd       	sbrc	r25, 7
    8a64:	06 c0       	rjmp	.+12     	; 0x8a72 <i2c_start_wait+0x22>
    8a66:	2f 5f       	subi	r18, 0xFF	; 255
    8a68:	3f 4f       	sbci	r19, 0xFF	; 255
    8a6a:	21 15       	cp	r18, r1
    8a6c:	91 e0       	ldi	r25, 0x01	; 1
    8a6e:	39 07       	cpc	r19, r25
    8a70:	b1 f7       	brne	.-20     	; 0x8a5e <i2c_start_wait+0xe>

    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    8a72:	90 91 b9 00 	lds	r25, 0x00B9
    8a76:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    8a78:	98 30       	cpi	r25, 0x08	; 8
    8a7a:	11 f0       	breq	.+4      	; 0x8a80 <i2c_start_wait+0x30>
    8a7c:	90 31       	cpi	r25, 0x10	; 16
    8a7e:	59 f7       	brne	.-42     	; 0x8a56 <i2c_start_wait+0x6>
    
    	// send device address
    	TWDR = address;
    8a80:	80 93 bb 00 	sts	0x00BB, r24
    	TWCR = (1<<TWINT) | (1<<TWEN);
    8a84:	50 93 bc 00 	sts	0x00BC, r21
    
    	// wail until transmission completed
    	i2c_timer = I2C_TIMER_DELAY;
    	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    8a88:	20 e0       	ldi	r18, 0x00	; 0
    8a8a:	30 e0       	ldi	r19, 0x00	; 0
    8a8c:	90 91 bc 00 	lds	r25, 0x00BC
    8a90:	97 fd       	sbrc	r25, 7
    8a92:	06 c0       	rjmp	.+12     	; 0x8aa0 <i2c_start_wait+0x50>
    8a94:	2f 5f       	subi	r18, 0xFF	; 255
    8a96:	3f 4f       	sbci	r19, 0xFF	; 255
    8a98:	21 15       	cp	r18, r1
    8a9a:	91 e0       	ldi	r25, 0x01	; 1
    8a9c:	39 07       	cpc	r19, r25
    8a9e:	b1 f7       	brne	.-20     	; 0x8a8c <i2c_start_wait+0x3c>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    8aa0:	90 91 b9 00 	lds	r25, 0x00B9
    8aa4:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    8aa6:	90 32       	cpi	r25, 0x20	; 32
    8aa8:	11 f0       	breq	.+4      	; 0x8aae <i2c_start_wait+0x5e>
    8aaa:	98 35       	cpi	r25, 0x58	; 88
    8aac:	79 f4       	brne	.+30     	; 0x8acc <i2c_start_wait+0x7c>
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    8aae:	60 93 bc 00 	sts	0x00BC, r22
	        
	        // wait until stop condition is executed and bus released
	        i2c_timer = I2C_TIMER_DELAY;
	        while((TWCR & (1<<TWSTO)) && i2c_timer--);
    8ab2:	20 e0       	ldi	r18, 0x00	; 0
    8ab4:	30 e0       	ldi	r19, 0x00	; 0
    8ab6:	90 91 bc 00 	lds	r25, 0x00BC
    8aba:	94 ff       	sbrs	r25, 4
    8abc:	cc cf       	rjmp	.-104    	; 0x8a56 <i2c_start_wait+0x6>
    8abe:	2f 5f       	subi	r18, 0xFF	; 255
    8ac0:	3f 4f       	sbci	r19, 0xFF	; 255
    8ac2:	21 15       	cp	r18, r1
    8ac4:	91 e0       	ldi	r25, 0x01	; 1
    8ac6:	39 07       	cpc	r19, r25
    8ac8:	b1 f7       	brne	.-20     	; 0x8ab6 <i2c_start_wait+0x66>
    8aca:	c5 cf       	rjmp	.-118    	; 0x8a56 <i2c_start_wait+0x6>
    8acc:	08 95       	ret

00008ace <i2c_rep_start>:
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );
    8ace:	0c 94 eb 44 	jmp	0x89d6	; 0x89d6 <i2c_start>

00008ad2 <i2c_stop>:
void i2c_stop(void)
{
	uint32_t  i2c_timer = 0;

    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    8ad2:	84 e9       	ldi	r24, 0x94	; 148
    8ad4:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait until stop condition is executed and bus released
	i2c_timer = I2C_TIMER_DELAY;
	while((TWCR & (1<<TWSTO)) && i2c_timer--);
    8ad8:	80 e0       	ldi	r24, 0x00	; 0
    8ada:	90 e0       	ldi	r25, 0x00	; 0
    8adc:	20 91 bc 00 	lds	r18, 0x00BC
    8ae0:	24 ff       	sbrs	r18, 4
    8ae2:	05 c0       	rjmp	.+10     	; 0x8aee <i2c_stop+0x1c>
    8ae4:	01 96       	adiw	r24, 0x01	; 1
    8ae6:	81 15       	cp	r24, r1
    8ae8:	21 e0       	ldi	r18, 0x01	; 1
    8aea:	92 07       	cpc	r25, r18
    8aec:	b9 f7       	brne	.-18     	; 0x8adc <i2c_stop+0xa>
    8aee:	08 95       	ret

00008af0 <i2c_write>:
{	
	uint32_t  i2c_timer = 0;
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    8af0:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    8af4:	84 e8       	ldi	r24, 0x84	; 132
    8af6:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
    8afa:	8f ef       	ldi	r24, 0xFF	; 255
    8afc:	90 e0       	ldi	r25, 0x00	; 0
    8afe:	a0 e0       	ldi	r26, 0x00	; 0
    8b00:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    8b02:	20 91 bc 00 	lds	r18, 0x00BC
    8b06:	27 fd       	sbrc	r18, 7
    8b08:	05 c0       	rjmp	.+10     	; 0x8b14 <i2c_write+0x24>
    8b0a:	01 97       	sbiw	r24, 0x01	; 1
    8b0c:	a1 09       	sbc	r26, r1
    8b0e:	b1 09       	sbc	r27, r1
    8b10:	c0 f7       	brcc	.-16     	; 0x8b02 <i2c_write+0x12>
    8b12:	04 c0       	rjmp	.+8      	; 0x8b1c <i2c_write+0x2c>
	if(i2c_timer == 0)
    8b14:	89 2b       	or	r24, r25
    8b16:	8a 2b       	or	r24, r26
    8b18:	8b 2b       	or	r24, r27
    8b1a:	41 f0       	breq	.+16     	; 0x8b2c <i2c_write+0x3c>
		return 1;

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    8b1c:	90 91 b9 00 	lds	r25, 0x00B9
    8b20:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
    8b22:	81 e0       	ldi	r24, 0x01	; 1
    8b24:	98 32       	cpi	r25, 0x28	; 40
    8b26:	19 f4       	brne	.+6      	; 0x8b2e <i2c_write+0x3e>
    8b28:	80 e0       	ldi	r24, 0x00	; 0
    8b2a:	08 95       	ret

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 1;
    8b2c:	81 e0       	ldi	r24, 0x01	; 1
	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
    8b2e:	08 95       	ret

00008b30 <i2c_readAck>:
*************************************************************************/
unsigned char i2c_readAck(void)
{
	uint32_t  i2c_timer = 0;

	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    8b30:	84 ec       	ldi	r24, 0xC4	; 196
    8b32:	80 93 bc 00 	sts	0x00BC, r24
	i2c_timer = I2C_TIMER_DELAY;
    8b36:	8f ef       	ldi	r24, 0xFF	; 255
    8b38:	90 e0       	ldi	r25, 0x00	; 0
    8b3a:	a0 e0       	ldi	r26, 0x00	; 0
    8b3c:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    8b3e:	20 91 bc 00 	lds	r18, 0x00BC
    8b42:	27 fd       	sbrc	r18, 7
    8b44:	05 c0       	rjmp	.+10     	; 0x8b50 <i2c_readAck+0x20>
    8b46:	01 97       	sbiw	r24, 0x01	; 1
    8b48:	a1 09       	sbc	r26, r1
    8b4a:	b1 09       	sbc	r27, r1
    8b4c:	c0 f7       	brcc	.-16     	; 0x8b3e <i2c_readAck+0xe>
    8b4e:	04 c0       	rjmp	.+8      	; 0x8b58 <i2c_readAck+0x28>
	if(i2c_timer == 0)
    8b50:	89 2b       	or	r24, r25
    8b52:	8a 2b       	or	r24, r26
    8b54:	8b 2b       	or	r24, r27
    8b56:	19 f0       	breq	.+6      	; 0x8b5e <i2c_readAck+0x2e>
		return 0;

    return TWDR;
    8b58:	80 91 bb 00 	lds	r24, 0x00BB
    8b5c:	08 95       	ret

	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 0;
    8b5e:	80 e0       	ldi	r24, 0x00	; 0

    return TWDR;

}/* i2c_readAck */
    8b60:	08 95       	ret

00008b62 <i2c_readNak>:
*************************************************************************/
unsigned char i2c_readNak(void)
{
	uint32_t  i2c_timer = 0;

	TWCR = (1<<TWINT) | (1<<TWEN);
    8b62:	84 e8       	ldi	r24, 0x84	; 132
    8b64:	80 93 bc 00 	sts	0x00BC, r24
	i2c_timer = I2C_TIMER_DELAY;
    8b68:	8f ef       	ldi	r24, 0xFF	; 255
    8b6a:	90 e0       	ldi	r25, 0x00	; 0
    8b6c:	a0 e0       	ldi	r26, 0x00	; 0
    8b6e:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    8b70:	20 91 bc 00 	lds	r18, 0x00BC
    8b74:	27 fd       	sbrc	r18, 7
    8b76:	05 c0       	rjmp	.+10     	; 0x8b82 <i2c_readNak+0x20>
    8b78:	01 97       	sbiw	r24, 0x01	; 1
    8b7a:	a1 09       	sbc	r26, r1
    8b7c:	b1 09       	sbc	r27, r1
    8b7e:	c0 f7       	brcc	.-16     	; 0x8b70 <i2c_readNak+0xe>
    8b80:	04 c0       	rjmp	.+8      	; 0x8b8a <i2c_readNak+0x28>
	if(i2c_timer == 0)
    8b82:	89 2b       	or	r24, r25
    8b84:	8a 2b       	or	r24, r26
    8b86:	8b 2b       	or	r24, r27
    8b88:	19 f0       	breq	.+6      	; 0x8b90 <i2c_readNak+0x2e>
		return 0;
	
    return TWDR;
    8b8a:	80 91 bb 00 	lds	r24, 0x00BB
    8b8e:	08 95       	ret

	TWCR = (1<<TWINT) | (1<<TWEN);
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 0;
    8b90:	80 e0       	ldi	r24, 0x00	; 0
	
    return TWDR;

}/* i2c_readNak */
    8b92:	08 95       	ret

00008b94 <init_uart>:
#define BAUD_PRESCALE_SPEKTRUM ((F_CPU + USART_BAUDRATE_SPEKTRUM * 8L) / (USART_BAUDRATE_SPEKTRUM * 16L) - 1) // Default RX rate for Spektrum

// Initialise UART with adjusted bitrate
void init_uart(void)
{
	cli();								// Atmel wants global interrupts disabled when changing UART setup on the fly
    8b94:	f8 94       	cli
	
	UCSR0B &= ~(1 << RXCIE0);			// Disable serial interrupt
    8b96:	80 91 c1 00 	lds	r24, 0x00C1
    8b9a:	8f 77       	andi	r24, 0x7F	; 127
    8b9c:	80 93 c1 00 	sts	0x00C1, r24

	while (UCSR0A & (1 << RXC0))		// Make sure there is nothing in the RX0 reg
    8ba0:	80 91 c0 00 	lds	r24, 0x00C0
    8ba4:	87 ff       	sbrs	r24, 7
    8ba6:	05 c0       	rjmp	.+10     	; 0x8bb2 <init_uart+0x1e>
	{
		UCSR0C = UDR0;					// So as not to annoy Studio 6, use UCSR0C as a temp reg until UDR0 empty. Sorry, UCSR0C...
    8ba8:	80 91 c6 00 	lds	r24, 0x00C6
    8bac:	80 93 c2 00 	sts	0x00C2, r24
    8bb0:	f7 cf       	rjmp	.-18     	; 0x8ba0 <init_uart+0xc>
	}
	
	// Reset UART regs to a known state
	UCSR0A = 0; // U2X = 0, no master mode, flags cleared 
    8bb2:	10 92 c0 00 	sts	0x00C0, r1
	UCSR0B = 0; // Clear flags, disable tx/rx, 8 bits
    8bb6:	10 92 c1 00 	sts	0x00C1, r1
	UCSR0C = 6; // 8N1
    8bba:	86 e0       	ldi	r24, 0x06	; 6
    8bbc:	80 93 c2 00 	sts	0x00C2, r24

	switch (Config.RxMode)
    8bc0:	80 91 da 05 	lds	r24, 0x05DA
    8bc4:	82 30       	cpi	r24, 0x02	; 2
    8bc6:	09 f1       	breq	.+66     	; 0x8c0a <init_uart+0x76>
    8bc8:	34 f4       	brge	.+12     	; 0x8bd6 <init_uart+0x42>
    8bca:	87 fd       	sbrc	r24, 7
    8bcc:	41 c0       	rjmp	.+130    	; 0x8c50 <init_uart+0xbc>
			UCSR0B |=  (1 << RXCIE0);					// Enable serial interrupt
			break;

		case CPPM_MODE:
		case PWM:
			UCSR0B &= 	~(1 << RXEN0);					// Disable receiver in PWM and CPPM modes
    8bce:	80 91 c1 00 	lds	r24, 0x00C1
    8bd2:	8f 7e       	andi	r24, 0xEF	; 239
    8bd4:	3b c0       	rjmp	.+118    	; 0x8c4c <init_uart+0xb8>
	// Reset UART regs to a known state
	UCSR0A = 0; // U2X = 0, no master mode, flags cleared 
	UCSR0B = 0; // Clear flags, disable tx/rx, 8 bits
	UCSR0C = 6; // 8N1

	switch (Config.RxMode)
    8bd6:	83 30       	cpi	r24, 0x03	; 3
    8bd8:	d9 f5       	brne	.+118    	; 0x8c50 <init_uart+0xbc>
			UCSR0B |=  (1 << RXCIE0);					// Enable serial interrupt
			break;

		// Spektrum 8N1 (8 data bits / No parity / 1 stop bit / 115.2Kbps)
		case SPEKTRUM: 	
			UCSR0A &=  ~(1 << U2X0);					// Clear the 2x flag
    8bda:	80 91 c0 00 	lds	r24, 0x00C0
    8bde:	8d 7f       	andi	r24, 0xFD	; 253
    8be0:	80 93 c0 00 	sts	0x00C0, r24
			UBRR0H  =  (BAUD_PRESCALE_SPEKTRUM >> 8); 	// Actual = 113636, Error = -1.36%
    8be4:	10 92 c5 00 	sts	0x00C5, r1
			UBRR0L  =   BAUD_PRESCALE_SPEKTRUM & 0xff;	// 0x0A (10.35)	
    8be8:	8a e0       	ldi	r24, 0x0A	; 10
    8bea:	80 93 c4 00 	sts	0x00C4, r24
			UCSR0B |= 	(1 << RXEN0);					// Enable receiver
    8bee:	80 91 c1 00 	lds	r24, 0x00C1
    8bf2:	80 61       	ori	r24, 0x10	; 16
    8bf4:	80 93 c1 00 	sts	0x00C1, r24
			UCSR0C &=  ~(1 << USBS0); 					// 1 stop bit
    8bf8:	80 91 c2 00 	lds	r24, 0x00C2
    8bfc:	87 7f       	andi	r24, 0xF7	; 247
    8bfe:	80 93 c2 00 	sts	0x00C2, r24
			UCSR0C &=  ~(1 << UPM00) | 					// No parity 
    8c02:	80 91 c2 00 	lds	r24, 0x00C2
    8c06:	8f 7e       	andi	r24, 0xEF	; 239
    8c08:	1c c0       	rjmp	.+56     	; 0x8c42 <init_uart+0xae>

	switch (Config.RxMode)
	{
		// Futaba S-Bus 8E2 (8 data bits / Even parity / 2 stop bits / 100Kbps)
		case SBUS: 		
			UCSR0A |=  (1 << U2X0);						// Need to set the 2x flag
    8c0a:	80 91 c0 00 	lds	r24, 0x00C0
    8c0e:	82 60       	ori	r24, 0x02	; 2
    8c10:	80 93 c0 00 	sts	0x00C0, r24
			UBRR0H  = (BAUD_PRESCALE_SBUS >> 8);  		// Actual = 100000 , Error = 0%	
    8c14:	10 92 c5 00 	sts	0x00C5, r1
			UBRR0L  =  BAUD_PRESCALE_SBUS & 0xff;		// 0x18 (24)
    8c18:	88 e1       	ldi	r24, 0x18	; 24
    8c1a:	80 93 c4 00 	sts	0x00C4, r24
			UCSR0B |=  (1 << RXEN0);					// Enable receiver
    8c1e:	80 91 c1 00 	lds	r24, 0x00C1
    8c22:	80 61       	ori	r24, 0x10	; 16
    8c24:	80 93 c1 00 	sts	0x00C1, r24
			UCSR0C |=  (1 << USBS0); 					// 2 stop bits
    8c28:	80 91 c2 00 	lds	r24, 0x00C2
    8c2c:	88 60       	ori	r24, 0x08	; 8
    8c2e:	80 93 c2 00 	sts	0x00C2, r24
			UCSR0C &= ~(1 << UPM00); 					// Even parity 
    8c32:	80 91 c2 00 	lds	r24, 0x00C2
    8c36:	8f 7e       	andi	r24, 0xEF	; 239
    8c38:	80 93 c2 00 	sts	0x00C2, r24
			UCSR0C |=  (1 << UPM01); 
    8c3c:	80 91 c2 00 	lds	r24, 0x00C2
    8c40:	80 62       	ori	r24, 0x20	; 32
			UCSR0A &=  ~(1 << U2X0);					// Clear the 2x flag
			UBRR0H  =  (BAUD_PRESCALE_SPEKTRUM >> 8); 	// Actual = 113636, Error = -1.36%
			UBRR0L  =   BAUD_PRESCALE_SPEKTRUM & 0xff;	// 0x0A (10.35)	
			UCSR0B |= 	(1 << RXEN0);					// Enable receiver
			UCSR0C &=  ~(1 << USBS0); 					// 1 stop bit
			UCSR0C &=  ~(1 << UPM00) | 					// No parity 
    8c42:	80 93 c2 00 	sts	0x00C2, r24
						(1 << UPM01); 
			UCSR0B |=  (1 << RXCIE0);					// Enable serial interrupt
    8c46:	80 91 c1 00 	lds	r24, 0x00C1
    8c4a:	80 68       	ori	r24, 0x80	; 128
			break;

		case CPPM_MODE:
		case PWM:
			UCSR0B &= 	~(1 << RXEN0);					// Disable receiver in PWM and CPPM modes
    8c4c:	80 93 c1 00 	sts	0x00C1, r24
		default:
			break;
	}

	// Re-enable interrupts
	sei();
    8c50:	78 94       	sei
    8c52:	08 95       	ret

00008c54 <GetVbat>:

uint16_t GetVbat(void)				// Get battery voltage (VBAT on ADC3)
{
	uint16_t	vBat;				// Battery voltage
		
	read_adc(AIN_VBAT1);				// Multiplication factor = (Display volts / 1024) / (Vbat / 11 / Vref)
    8c54:	83 e0       	ldi	r24, 0x03	; 3
    8c56:	0e 94 d7 10 	call	0x21ae	; 0x21ae <read_adc>
	// For Vref = 2.45V, Multiplication factor = 2.632
	// For Vref = 2.305V, Multiplication factor = approx 2.5
	// An input voltage of 10V will results in a value of 999.
	// This means that the number represents units of 10mV.

	vBat = ADCW;
    8c5a:	80 91 78 00 	lds	r24, 0x0078
    8c5e:	90 91 79 00 	lds	r25, 0x0079

	// Multiply by 2.578125
	// 2 + 1/2 + 1/16 + 1/64
	vBat = (vBat << 1) + (vBat >> 1) + (vBat >> 4) + (vBat >> 6); // Multiply by 2.578125
    8c62:	9c 01       	movw	r18, r24
    8c64:	36 95       	lsr	r19
    8c66:	27 95       	ror	r18
    8c68:	ac 01       	movw	r20, r24
    8c6a:	44 0f       	add	r20, r20
    8c6c:	55 1f       	adc	r21, r21
    8c6e:	24 0f       	add	r18, r20
    8c70:	35 1f       	adc	r19, r21
    8c72:	ac 01       	movw	r20, r24
    8c74:	74 e0       	ldi	r23, 0x04	; 4
    8c76:	56 95       	lsr	r21
    8c78:	47 95       	ror	r20
    8c7a:	7a 95       	dec	r23
    8c7c:	e1 f7       	brne	.-8      	; 0x8c76 <GetVbat+0x22>
    8c7e:	24 0f       	add	r18, r20
    8c80:	35 1f       	adc	r19, r21
    8c82:	e6 e0       	ldi	r30, 0x06	; 6
    8c84:	96 95       	lsr	r25
    8c86:	87 95       	ror	r24
    8c88:	ea 95       	dec	r30
    8c8a:	e1 f7       	brne	.-8      	; 0x8c84 <GetVbat+0x30>

	return vBat;
}
    8c8c:	82 0f       	add	r24, r18
    8c8e:	93 1f       	adc	r25, r19
    8c90:	08 95       	ret

00008c92 <__subsf3>:
    8c92:	50 58       	subi	r21, 0x80	; 128

00008c94 <__addsf3>:
    8c94:	bb 27       	eor	r27, r27
    8c96:	aa 27       	eor	r26, r26
    8c98:	0e d0       	rcall	.+28     	; 0x8cb6 <__addsf3x>
    8c9a:	75 c1       	rjmp	.+746    	; 0x8f86 <__fp_round>
    8c9c:	66 d1       	rcall	.+716    	; 0x8f6a <__fp_pscA>
    8c9e:	30 f0       	brcs	.+12     	; 0x8cac <__addsf3+0x18>
    8ca0:	6b d1       	rcall	.+726    	; 0x8f78 <__fp_pscB>
    8ca2:	20 f0       	brcs	.+8      	; 0x8cac <__addsf3+0x18>
    8ca4:	31 f4       	brne	.+12     	; 0x8cb2 <__addsf3+0x1e>
    8ca6:	9f 3f       	cpi	r25, 0xFF	; 255
    8ca8:	11 f4       	brne	.+4      	; 0x8cae <__addsf3+0x1a>
    8caa:	1e f4       	brtc	.+6      	; 0x8cb2 <__addsf3+0x1e>
    8cac:	5b c1       	rjmp	.+694    	; 0x8f64 <__fp_nan>
    8cae:	0e f4       	brtc	.+2      	; 0x8cb2 <__addsf3+0x1e>
    8cb0:	e0 95       	com	r30
    8cb2:	e7 fb       	bst	r30, 7
    8cb4:	51 c1       	rjmp	.+674    	; 0x8f58 <__fp_inf>

00008cb6 <__addsf3x>:
    8cb6:	e9 2f       	mov	r30, r25
    8cb8:	77 d1       	rcall	.+750    	; 0x8fa8 <__fp_split3>
    8cba:	80 f3       	brcs	.-32     	; 0x8c9c <__addsf3+0x8>
    8cbc:	ba 17       	cp	r27, r26
    8cbe:	62 07       	cpc	r22, r18
    8cc0:	73 07       	cpc	r23, r19
    8cc2:	84 07       	cpc	r24, r20
    8cc4:	95 07       	cpc	r25, r21
    8cc6:	18 f0       	brcs	.+6      	; 0x8cce <__addsf3x+0x18>
    8cc8:	71 f4       	brne	.+28     	; 0x8ce6 <__addsf3x+0x30>
    8cca:	9e f5       	brtc	.+102    	; 0x8d32 <__addsf3x+0x7c>
    8ccc:	8f c1       	rjmp	.+798    	; 0x8fec <__fp_zero>
    8cce:	0e f4       	brtc	.+2      	; 0x8cd2 <__addsf3x+0x1c>
    8cd0:	e0 95       	com	r30
    8cd2:	0b 2e       	mov	r0, r27
    8cd4:	ba 2f       	mov	r27, r26
    8cd6:	a0 2d       	mov	r26, r0
    8cd8:	0b 01       	movw	r0, r22
    8cda:	b9 01       	movw	r22, r18
    8cdc:	90 01       	movw	r18, r0
    8cde:	0c 01       	movw	r0, r24
    8ce0:	ca 01       	movw	r24, r20
    8ce2:	a0 01       	movw	r20, r0
    8ce4:	11 24       	eor	r1, r1
    8ce6:	ff 27       	eor	r31, r31
    8ce8:	59 1b       	sub	r21, r25
    8cea:	99 f0       	breq	.+38     	; 0x8d12 <__addsf3x+0x5c>
    8cec:	59 3f       	cpi	r21, 0xF9	; 249
    8cee:	50 f4       	brcc	.+20     	; 0x8d04 <__addsf3x+0x4e>
    8cf0:	50 3e       	cpi	r21, 0xE0	; 224
    8cf2:	68 f1       	brcs	.+90     	; 0x8d4e <__addsf3x+0x98>
    8cf4:	1a 16       	cp	r1, r26
    8cf6:	f0 40       	sbci	r31, 0x00	; 0
    8cf8:	a2 2f       	mov	r26, r18
    8cfa:	23 2f       	mov	r18, r19
    8cfc:	34 2f       	mov	r19, r20
    8cfe:	44 27       	eor	r20, r20
    8d00:	58 5f       	subi	r21, 0xF8	; 248
    8d02:	f3 cf       	rjmp	.-26     	; 0x8cea <__addsf3x+0x34>
    8d04:	46 95       	lsr	r20
    8d06:	37 95       	ror	r19
    8d08:	27 95       	ror	r18
    8d0a:	a7 95       	ror	r26
    8d0c:	f0 40       	sbci	r31, 0x00	; 0
    8d0e:	53 95       	inc	r21
    8d10:	c9 f7       	brne	.-14     	; 0x8d04 <__addsf3x+0x4e>
    8d12:	7e f4       	brtc	.+30     	; 0x8d32 <__addsf3x+0x7c>
    8d14:	1f 16       	cp	r1, r31
    8d16:	ba 0b       	sbc	r27, r26
    8d18:	62 0b       	sbc	r22, r18
    8d1a:	73 0b       	sbc	r23, r19
    8d1c:	84 0b       	sbc	r24, r20
    8d1e:	ba f0       	brmi	.+46     	; 0x8d4e <__addsf3x+0x98>
    8d20:	91 50       	subi	r25, 0x01	; 1
    8d22:	a1 f0       	breq	.+40     	; 0x8d4c <__addsf3x+0x96>
    8d24:	ff 0f       	add	r31, r31
    8d26:	bb 1f       	adc	r27, r27
    8d28:	66 1f       	adc	r22, r22
    8d2a:	77 1f       	adc	r23, r23
    8d2c:	88 1f       	adc	r24, r24
    8d2e:	c2 f7       	brpl	.-16     	; 0x8d20 <__addsf3x+0x6a>
    8d30:	0e c0       	rjmp	.+28     	; 0x8d4e <__addsf3x+0x98>
    8d32:	ba 0f       	add	r27, r26
    8d34:	62 1f       	adc	r22, r18
    8d36:	73 1f       	adc	r23, r19
    8d38:	84 1f       	adc	r24, r20
    8d3a:	48 f4       	brcc	.+18     	; 0x8d4e <__addsf3x+0x98>
    8d3c:	87 95       	ror	r24
    8d3e:	77 95       	ror	r23
    8d40:	67 95       	ror	r22
    8d42:	b7 95       	ror	r27
    8d44:	f7 95       	ror	r31
    8d46:	9e 3f       	cpi	r25, 0xFE	; 254
    8d48:	08 f0       	brcs	.+2      	; 0x8d4c <__addsf3x+0x96>
    8d4a:	b3 cf       	rjmp	.-154    	; 0x8cb2 <__addsf3+0x1e>
    8d4c:	93 95       	inc	r25
    8d4e:	88 0f       	add	r24, r24
    8d50:	08 f0       	brcs	.+2      	; 0x8d54 <__addsf3x+0x9e>
    8d52:	99 27       	eor	r25, r25
    8d54:	ee 0f       	add	r30, r30
    8d56:	97 95       	ror	r25
    8d58:	87 95       	ror	r24
    8d5a:	08 95       	ret

00008d5c <__cmpsf2>:
    8d5c:	d9 d0       	rcall	.+434    	; 0x8f10 <__fp_cmp>
    8d5e:	08 f4       	brcc	.+2      	; 0x8d62 <__cmpsf2+0x6>
    8d60:	81 e0       	ldi	r24, 0x01	; 1
    8d62:	08 95       	ret

00008d64 <__divsf3>:
    8d64:	0c d0       	rcall	.+24     	; 0x8d7e <__divsf3x>
    8d66:	0f c1       	rjmp	.+542    	; 0x8f86 <__fp_round>
    8d68:	07 d1       	rcall	.+526    	; 0x8f78 <__fp_pscB>
    8d6a:	40 f0       	brcs	.+16     	; 0x8d7c <__divsf3+0x18>
    8d6c:	fe d0       	rcall	.+508    	; 0x8f6a <__fp_pscA>
    8d6e:	30 f0       	brcs	.+12     	; 0x8d7c <__divsf3+0x18>
    8d70:	21 f4       	brne	.+8      	; 0x8d7a <__divsf3+0x16>
    8d72:	5f 3f       	cpi	r21, 0xFF	; 255
    8d74:	19 f0       	breq	.+6      	; 0x8d7c <__divsf3+0x18>
    8d76:	f0 c0       	rjmp	.+480    	; 0x8f58 <__fp_inf>
    8d78:	51 11       	cpse	r21, r1
    8d7a:	39 c1       	rjmp	.+626    	; 0x8fee <__fp_szero>
    8d7c:	f3 c0       	rjmp	.+486    	; 0x8f64 <__fp_nan>

00008d7e <__divsf3x>:
    8d7e:	14 d1       	rcall	.+552    	; 0x8fa8 <__fp_split3>
    8d80:	98 f3       	brcs	.-26     	; 0x8d68 <__divsf3+0x4>

00008d82 <__divsf3_pse>:
    8d82:	99 23       	and	r25, r25
    8d84:	c9 f3       	breq	.-14     	; 0x8d78 <__divsf3+0x14>
    8d86:	55 23       	and	r21, r21
    8d88:	b1 f3       	breq	.-20     	; 0x8d76 <__divsf3+0x12>
    8d8a:	95 1b       	sub	r25, r21
    8d8c:	55 0b       	sbc	r21, r21
    8d8e:	bb 27       	eor	r27, r27
    8d90:	aa 27       	eor	r26, r26
    8d92:	62 17       	cp	r22, r18
    8d94:	73 07       	cpc	r23, r19
    8d96:	84 07       	cpc	r24, r20
    8d98:	38 f0       	brcs	.+14     	; 0x8da8 <__divsf3_pse+0x26>
    8d9a:	9f 5f       	subi	r25, 0xFF	; 255
    8d9c:	5f 4f       	sbci	r21, 0xFF	; 255
    8d9e:	22 0f       	add	r18, r18
    8da0:	33 1f       	adc	r19, r19
    8da2:	44 1f       	adc	r20, r20
    8da4:	aa 1f       	adc	r26, r26
    8da6:	a9 f3       	breq	.-22     	; 0x8d92 <__divsf3_pse+0x10>
    8da8:	33 d0       	rcall	.+102    	; 0x8e10 <__divsf3_pse+0x8e>
    8daa:	0e 2e       	mov	r0, r30
    8dac:	3a f0       	brmi	.+14     	; 0x8dbc <__divsf3_pse+0x3a>
    8dae:	e0 e8       	ldi	r30, 0x80	; 128
    8db0:	30 d0       	rcall	.+96     	; 0x8e12 <__divsf3_pse+0x90>
    8db2:	91 50       	subi	r25, 0x01	; 1
    8db4:	50 40       	sbci	r21, 0x00	; 0
    8db6:	e6 95       	lsr	r30
    8db8:	00 1c       	adc	r0, r0
    8dba:	ca f7       	brpl	.-14     	; 0x8dae <__divsf3_pse+0x2c>
    8dbc:	29 d0       	rcall	.+82     	; 0x8e10 <__divsf3_pse+0x8e>
    8dbe:	fe 2f       	mov	r31, r30
    8dc0:	27 d0       	rcall	.+78     	; 0x8e10 <__divsf3_pse+0x8e>
    8dc2:	66 0f       	add	r22, r22
    8dc4:	77 1f       	adc	r23, r23
    8dc6:	88 1f       	adc	r24, r24
    8dc8:	bb 1f       	adc	r27, r27
    8dca:	26 17       	cp	r18, r22
    8dcc:	37 07       	cpc	r19, r23
    8dce:	48 07       	cpc	r20, r24
    8dd0:	ab 07       	cpc	r26, r27
    8dd2:	b0 e8       	ldi	r27, 0x80	; 128
    8dd4:	09 f0       	breq	.+2      	; 0x8dd8 <__divsf3_pse+0x56>
    8dd6:	bb 0b       	sbc	r27, r27
    8dd8:	80 2d       	mov	r24, r0
    8dda:	bf 01       	movw	r22, r30
    8ddc:	ff 27       	eor	r31, r31
    8dde:	93 58       	subi	r25, 0x83	; 131
    8de0:	5f 4f       	sbci	r21, 0xFF	; 255
    8de2:	2a f0       	brmi	.+10     	; 0x8dee <__divsf3_pse+0x6c>
    8de4:	9e 3f       	cpi	r25, 0xFE	; 254
    8de6:	51 05       	cpc	r21, r1
    8de8:	68 f0       	brcs	.+26     	; 0x8e04 <__divsf3_pse+0x82>
    8dea:	b6 c0       	rjmp	.+364    	; 0x8f58 <__fp_inf>
    8dec:	00 c1       	rjmp	.+512    	; 0x8fee <__fp_szero>
    8dee:	5f 3f       	cpi	r21, 0xFF	; 255
    8df0:	ec f3       	brlt	.-6      	; 0x8dec <__divsf3_pse+0x6a>
    8df2:	98 3e       	cpi	r25, 0xE8	; 232
    8df4:	dc f3       	brlt	.-10     	; 0x8dec <__divsf3_pse+0x6a>
    8df6:	86 95       	lsr	r24
    8df8:	77 95       	ror	r23
    8dfa:	67 95       	ror	r22
    8dfc:	b7 95       	ror	r27
    8dfe:	f7 95       	ror	r31
    8e00:	9f 5f       	subi	r25, 0xFF	; 255
    8e02:	c9 f7       	brne	.-14     	; 0x8df6 <__divsf3_pse+0x74>
    8e04:	88 0f       	add	r24, r24
    8e06:	91 1d       	adc	r25, r1
    8e08:	96 95       	lsr	r25
    8e0a:	87 95       	ror	r24
    8e0c:	97 f9       	bld	r25, 7
    8e0e:	08 95       	ret
    8e10:	e1 e0       	ldi	r30, 0x01	; 1
    8e12:	66 0f       	add	r22, r22
    8e14:	77 1f       	adc	r23, r23
    8e16:	88 1f       	adc	r24, r24
    8e18:	bb 1f       	adc	r27, r27
    8e1a:	62 17       	cp	r22, r18
    8e1c:	73 07       	cpc	r23, r19
    8e1e:	84 07       	cpc	r24, r20
    8e20:	ba 07       	cpc	r27, r26
    8e22:	20 f0       	brcs	.+8      	; 0x8e2c <__divsf3_pse+0xaa>
    8e24:	62 1b       	sub	r22, r18
    8e26:	73 0b       	sbc	r23, r19
    8e28:	84 0b       	sbc	r24, r20
    8e2a:	ba 0b       	sbc	r27, r26
    8e2c:	ee 1f       	adc	r30, r30
    8e2e:	88 f7       	brcc	.-30     	; 0x8e12 <__divsf3_pse+0x90>
    8e30:	e0 95       	com	r30
    8e32:	08 95       	ret

00008e34 <__fixsfsi>:
    8e34:	04 d0       	rcall	.+8      	; 0x8e3e <__fixunssfsi>
    8e36:	68 94       	set
    8e38:	b1 11       	cpse	r27, r1
    8e3a:	d9 c0       	rjmp	.+434    	; 0x8fee <__fp_szero>
    8e3c:	08 95       	ret

00008e3e <__fixunssfsi>:
    8e3e:	bc d0       	rcall	.+376    	; 0x8fb8 <__fp_splitA>
    8e40:	88 f0       	brcs	.+34     	; 0x8e64 <__fixunssfsi+0x26>
    8e42:	9f 57       	subi	r25, 0x7F	; 127
    8e44:	90 f0       	brcs	.+36     	; 0x8e6a <__fixunssfsi+0x2c>
    8e46:	b9 2f       	mov	r27, r25
    8e48:	99 27       	eor	r25, r25
    8e4a:	b7 51       	subi	r27, 0x17	; 23
    8e4c:	a0 f0       	brcs	.+40     	; 0x8e76 <__fixunssfsi+0x38>
    8e4e:	d1 f0       	breq	.+52     	; 0x8e84 <__fixunssfsi+0x46>
    8e50:	66 0f       	add	r22, r22
    8e52:	77 1f       	adc	r23, r23
    8e54:	88 1f       	adc	r24, r24
    8e56:	99 1f       	adc	r25, r25
    8e58:	1a f0       	brmi	.+6      	; 0x8e60 <__fixunssfsi+0x22>
    8e5a:	ba 95       	dec	r27
    8e5c:	c9 f7       	brne	.-14     	; 0x8e50 <__fixunssfsi+0x12>
    8e5e:	12 c0       	rjmp	.+36     	; 0x8e84 <__fixunssfsi+0x46>
    8e60:	b1 30       	cpi	r27, 0x01	; 1
    8e62:	81 f0       	breq	.+32     	; 0x8e84 <__fixunssfsi+0x46>
    8e64:	c3 d0       	rcall	.+390    	; 0x8fec <__fp_zero>
    8e66:	b1 e0       	ldi	r27, 0x01	; 1
    8e68:	08 95       	ret
    8e6a:	c0 c0       	rjmp	.+384    	; 0x8fec <__fp_zero>
    8e6c:	67 2f       	mov	r22, r23
    8e6e:	78 2f       	mov	r23, r24
    8e70:	88 27       	eor	r24, r24
    8e72:	b8 5f       	subi	r27, 0xF8	; 248
    8e74:	39 f0       	breq	.+14     	; 0x8e84 <__fixunssfsi+0x46>
    8e76:	b9 3f       	cpi	r27, 0xF9	; 249
    8e78:	cc f3       	brlt	.-14     	; 0x8e6c <__fixunssfsi+0x2e>
    8e7a:	86 95       	lsr	r24
    8e7c:	77 95       	ror	r23
    8e7e:	67 95       	ror	r22
    8e80:	b3 95       	inc	r27
    8e82:	d9 f7       	brne	.-10     	; 0x8e7a <__fixunssfsi+0x3c>
    8e84:	3e f4       	brtc	.+14     	; 0x8e94 <__fixunssfsi+0x56>
    8e86:	90 95       	com	r25
    8e88:	80 95       	com	r24
    8e8a:	70 95       	com	r23
    8e8c:	61 95       	neg	r22
    8e8e:	7f 4f       	sbci	r23, 0xFF	; 255
    8e90:	8f 4f       	sbci	r24, 0xFF	; 255
    8e92:	9f 4f       	sbci	r25, 0xFF	; 255
    8e94:	08 95       	ret

00008e96 <__floatunsisf>:
    8e96:	e8 94       	clt
    8e98:	09 c0       	rjmp	.+18     	; 0x8eac <__floatsisf+0x12>

00008e9a <__floatsisf>:
    8e9a:	97 fb       	bst	r25, 7
    8e9c:	3e f4       	brtc	.+14     	; 0x8eac <__floatsisf+0x12>
    8e9e:	90 95       	com	r25
    8ea0:	80 95       	com	r24
    8ea2:	70 95       	com	r23
    8ea4:	61 95       	neg	r22
    8ea6:	7f 4f       	sbci	r23, 0xFF	; 255
    8ea8:	8f 4f       	sbci	r24, 0xFF	; 255
    8eaa:	9f 4f       	sbci	r25, 0xFF	; 255
    8eac:	99 23       	and	r25, r25
    8eae:	a9 f0       	breq	.+42     	; 0x8eda <__floatsisf+0x40>
    8eb0:	f9 2f       	mov	r31, r25
    8eb2:	96 e9       	ldi	r25, 0x96	; 150
    8eb4:	bb 27       	eor	r27, r27
    8eb6:	93 95       	inc	r25
    8eb8:	f6 95       	lsr	r31
    8eba:	87 95       	ror	r24
    8ebc:	77 95       	ror	r23
    8ebe:	67 95       	ror	r22
    8ec0:	b7 95       	ror	r27
    8ec2:	f1 11       	cpse	r31, r1
    8ec4:	f8 cf       	rjmp	.-16     	; 0x8eb6 <__floatsisf+0x1c>
    8ec6:	fa f4       	brpl	.+62     	; 0x8f06 <__floatsisf+0x6c>
    8ec8:	bb 0f       	add	r27, r27
    8eca:	11 f4       	brne	.+4      	; 0x8ed0 <__floatsisf+0x36>
    8ecc:	60 ff       	sbrs	r22, 0
    8ece:	1b c0       	rjmp	.+54     	; 0x8f06 <__floatsisf+0x6c>
    8ed0:	6f 5f       	subi	r22, 0xFF	; 255
    8ed2:	7f 4f       	sbci	r23, 0xFF	; 255
    8ed4:	8f 4f       	sbci	r24, 0xFF	; 255
    8ed6:	9f 4f       	sbci	r25, 0xFF	; 255
    8ed8:	16 c0       	rjmp	.+44     	; 0x8f06 <__floatsisf+0x6c>
    8eda:	88 23       	and	r24, r24
    8edc:	11 f0       	breq	.+4      	; 0x8ee2 <__floatsisf+0x48>
    8ede:	96 e9       	ldi	r25, 0x96	; 150
    8ee0:	11 c0       	rjmp	.+34     	; 0x8f04 <__floatsisf+0x6a>
    8ee2:	77 23       	and	r23, r23
    8ee4:	21 f0       	breq	.+8      	; 0x8eee <__floatsisf+0x54>
    8ee6:	9e e8       	ldi	r25, 0x8E	; 142
    8ee8:	87 2f       	mov	r24, r23
    8eea:	76 2f       	mov	r23, r22
    8eec:	05 c0       	rjmp	.+10     	; 0x8ef8 <__floatsisf+0x5e>
    8eee:	66 23       	and	r22, r22
    8ef0:	71 f0       	breq	.+28     	; 0x8f0e <__floatsisf+0x74>
    8ef2:	96 e8       	ldi	r25, 0x86	; 134
    8ef4:	86 2f       	mov	r24, r22
    8ef6:	70 e0       	ldi	r23, 0x00	; 0
    8ef8:	60 e0       	ldi	r22, 0x00	; 0
    8efa:	2a f0       	brmi	.+10     	; 0x8f06 <__floatsisf+0x6c>
    8efc:	9a 95       	dec	r25
    8efe:	66 0f       	add	r22, r22
    8f00:	77 1f       	adc	r23, r23
    8f02:	88 1f       	adc	r24, r24
    8f04:	da f7       	brpl	.-10     	; 0x8efc <__floatsisf+0x62>
    8f06:	88 0f       	add	r24, r24
    8f08:	96 95       	lsr	r25
    8f0a:	87 95       	ror	r24
    8f0c:	97 f9       	bld	r25, 7
    8f0e:	08 95       	ret

00008f10 <__fp_cmp>:
    8f10:	99 0f       	add	r25, r25
    8f12:	00 08       	sbc	r0, r0
    8f14:	55 0f       	add	r21, r21
    8f16:	aa 0b       	sbc	r26, r26
    8f18:	e0 e8       	ldi	r30, 0x80	; 128
    8f1a:	fe ef       	ldi	r31, 0xFE	; 254
    8f1c:	16 16       	cp	r1, r22
    8f1e:	17 06       	cpc	r1, r23
    8f20:	e8 07       	cpc	r30, r24
    8f22:	f9 07       	cpc	r31, r25
    8f24:	c0 f0       	brcs	.+48     	; 0x8f56 <__fp_cmp+0x46>
    8f26:	12 16       	cp	r1, r18
    8f28:	13 06       	cpc	r1, r19
    8f2a:	e4 07       	cpc	r30, r20
    8f2c:	f5 07       	cpc	r31, r21
    8f2e:	98 f0       	brcs	.+38     	; 0x8f56 <__fp_cmp+0x46>
    8f30:	62 1b       	sub	r22, r18
    8f32:	73 0b       	sbc	r23, r19
    8f34:	84 0b       	sbc	r24, r20
    8f36:	95 0b       	sbc	r25, r21
    8f38:	39 f4       	brne	.+14     	; 0x8f48 <__fp_cmp+0x38>
    8f3a:	0a 26       	eor	r0, r26
    8f3c:	61 f0       	breq	.+24     	; 0x8f56 <__fp_cmp+0x46>
    8f3e:	23 2b       	or	r18, r19
    8f40:	24 2b       	or	r18, r20
    8f42:	25 2b       	or	r18, r21
    8f44:	21 f4       	brne	.+8      	; 0x8f4e <__fp_cmp+0x3e>
    8f46:	08 95       	ret
    8f48:	0a 26       	eor	r0, r26
    8f4a:	09 f4       	brne	.+2      	; 0x8f4e <__fp_cmp+0x3e>
    8f4c:	a1 40       	sbci	r26, 0x01	; 1
    8f4e:	a6 95       	lsr	r26
    8f50:	8f ef       	ldi	r24, 0xFF	; 255
    8f52:	81 1d       	adc	r24, r1
    8f54:	81 1d       	adc	r24, r1
    8f56:	08 95       	ret

00008f58 <__fp_inf>:
    8f58:	97 f9       	bld	r25, 7
    8f5a:	9f 67       	ori	r25, 0x7F	; 127
    8f5c:	80 e8       	ldi	r24, 0x80	; 128
    8f5e:	70 e0       	ldi	r23, 0x00	; 0
    8f60:	60 e0       	ldi	r22, 0x00	; 0
    8f62:	08 95       	ret

00008f64 <__fp_nan>:
    8f64:	9f ef       	ldi	r25, 0xFF	; 255
    8f66:	80 ec       	ldi	r24, 0xC0	; 192
    8f68:	08 95       	ret

00008f6a <__fp_pscA>:
    8f6a:	00 24       	eor	r0, r0
    8f6c:	0a 94       	dec	r0
    8f6e:	16 16       	cp	r1, r22
    8f70:	17 06       	cpc	r1, r23
    8f72:	18 06       	cpc	r1, r24
    8f74:	09 06       	cpc	r0, r25
    8f76:	08 95       	ret

00008f78 <__fp_pscB>:
    8f78:	00 24       	eor	r0, r0
    8f7a:	0a 94       	dec	r0
    8f7c:	12 16       	cp	r1, r18
    8f7e:	13 06       	cpc	r1, r19
    8f80:	14 06       	cpc	r1, r20
    8f82:	05 06       	cpc	r0, r21
    8f84:	08 95       	ret

00008f86 <__fp_round>:
    8f86:	09 2e       	mov	r0, r25
    8f88:	03 94       	inc	r0
    8f8a:	00 0c       	add	r0, r0
    8f8c:	11 f4       	brne	.+4      	; 0x8f92 <__fp_round+0xc>
    8f8e:	88 23       	and	r24, r24
    8f90:	52 f0       	brmi	.+20     	; 0x8fa6 <__fp_round+0x20>
    8f92:	bb 0f       	add	r27, r27
    8f94:	40 f4       	brcc	.+16     	; 0x8fa6 <__fp_round+0x20>
    8f96:	bf 2b       	or	r27, r31
    8f98:	11 f4       	brne	.+4      	; 0x8f9e <__fp_round+0x18>
    8f9a:	60 ff       	sbrs	r22, 0
    8f9c:	04 c0       	rjmp	.+8      	; 0x8fa6 <__fp_round+0x20>
    8f9e:	6f 5f       	subi	r22, 0xFF	; 255
    8fa0:	7f 4f       	sbci	r23, 0xFF	; 255
    8fa2:	8f 4f       	sbci	r24, 0xFF	; 255
    8fa4:	9f 4f       	sbci	r25, 0xFF	; 255
    8fa6:	08 95       	ret

00008fa8 <__fp_split3>:
    8fa8:	57 fd       	sbrc	r21, 7
    8faa:	90 58       	subi	r25, 0x80	; 128
    8fac:	44 0f       	add	r20, r20
    8fae:	55 1f       	adc	r21, r21
    8fb0:	59 f0       	breq	.+22     	; 0x8fc8 <__fp_splitA+0x10>
    8fb2:	5f 3f       	cpi	r21, 0xFF	; 255
    8fb4:	71 f0       	breq	.+28     	; 0x8fd2 <__fp_splitA+0x1a>
    8fb6:	47 95       	ror	r20

00008fb8 <__fp_splitA>:
    8fb8:	88 0f       	add	r24, r24
    8fba:	97 fb       	bst	r25, 7
    8fbc:	99 1f       	adc	r25, r25
    8fbe:	61 f0       	breq	.+24     	; 0x8fd8 <__fp_splitA+0x20>
    8fc0:	9f 3f       	cpi	r25, 0xFF	; 255
    8fc2:	79 f0       	breq	.+30     	; 0x8fe2 <__fp_splitA+0x2a>
    8fc4:	87 95       	ror	r24
    8fc6:	08 95       	ret
    8fc8:	12 16       	cp	r1, r18
    8fca:	13 06       	cpc	r1, r19
    8fcc:	14 06       	cpc	r1, r20
    8fce:	55 1f       	adc	r21, r21
    8fd0:	f2 cf       	rjmp	.-28     	; 0x8fb6 <__fp_split3+0xe>
    8fd2:	46 95       	lsr	r20
    8fd4:	f1 df       	rcall	.-30     	; 0x8fb8 <__fp_splitA>
    8fd6:	08 c0       	rjmp	.+16     	; 0x8fe8 <__fp_splitA+0x30>
    8fd8:	16 16       	cp	r1, r22
    8fda:	17 06       	cpc	r1, r23
    8fdc:	18 06       	cpc	r1, r24
    8fde:	99 1f       	adc	r25, r25
    8fe0:	f1 cf       	rjmp	.-30     	; 0x8fc4 <__fp_splitA+0xc>
    8fe2:	86 95       	lsr	r24
    8fe4:	71 05       	cpc	r23, r1
    8fe6:	61 05       	cpc	r22, r1
    8fe8:	08 94       	sec
    8fea:	08 95       	ret

00008fec <__fp_zero>:
    8fec:	e8 94       	clt

00008fee <__fp_szero>:
    8fee:	bb 27       	eor	r27, r27
    8ff0:	66 27       	eor	r22, r22
    8ff2:	77 27       	eor	r23, r23
    8ff4:	cb 01       	movw	r24, r22
    8ff6:	97 f9       	bld	r25, 7
    8ff8:	08 95       	ret

00008ffa <__gesf2>:
    8ffa:	8a df       	rcall	.-236    	; 0x8f10 <__fp_cmp>
    8ffc:	08 f4       	brcc	.+2      	; 0x9000 <__gesf2+0x6>
    8ffe:	8f ef       	ldi	r24, 0xFF	; 255
    9000:	08 95       	ret

00009002 <__mulsf3>:
    9002:	0b d0       	rcall	.+22     	; 0x901a <__mulsf3x>
    9004:	c0 cf       	rjmp	.-128    	; 0x8f86 <__fp_round>
    9006:	b1 df       	rcall	.-158    	; 0x8f6a <__fp_pscA>
    9008:	28 f0       	brcs	.+10     	; 0x9014 <__mulsf3+0x12>
    900a:	b6 df       	rcall	.-148    	; 0x8f78 <__fp_pscB>
    900c:	18 f0       	brcs	.+6      	; 0x9014 <__mulsf3+0x12>
    900e:	95 23       	and	r25, r21
    9010:	09 f0       	breq	.+2      	; 0x9014 <__mulsf3+0x12>
    9012:	a2 cf       	rjmp	.-188    	; 0x8f58 <__fp_inf>
    9014:	a7 cf       	rjmp	.-178    	; 0x8f64 <__fp_nan>
    9016:	11 24       	eor	r1, r1
    9018:	ea cf       	rjmp	.-44     	; 0x8fee <__fp_szero>

0000901a <__mulsf3x>:
    901a:	c6 df       	rcall	.-116    	; 0x8fa8 <__fp_split3>
    901c:	a0 f3       	brcs	.-24     	; 0x9006 <__mulsf3+0x4>

0000901e <__mulsf3_pse>:
    901e:	95 9f       	mul	r25, r21
    9020:	d1 f3       	breq	.-12     	; 0x9016 <__mulsf3+0x14>
    9022:	95 0f       	add	r25, r21
    9024:	50 e0       	ldi	r21, 0x00	; 0
    9026:	55 1f       	adc	r21, r21
    9028:	62 9f       	mul	r22, r18
    902a:	f0 01       	movw	r30, r0
    902c:	72 9f       	mul	r23, r18
    902e:	bb 27       	eor	r27, r27
    9030:	f0 0d       	add	r31, r0
    9032:	b1 1d       	adc	r27, r1
    9034:	63 9f       	mul	r22, r19
    9036:	aa 27       	eor	r26, r26
    9038:	f0 0d       	add	r31, r0
    903a:	b1 1d       	adc	r27, r1
    903c:	aa 1f       	adc	r26, r26
    903e:	64 9f       	mul	r22, r20
    9040:	66 27       	eor	r22, r22
    9042:	b0 0d       	add	r27, r0
    9044:	a1 1d       	adc	r26, r1
    9046:	66 1f       	adc	r22, r22
    9048:	82 9f       	mul	r24, r18
    904a:	22 27       	eor	r18, r18
    904c:	b0 0d       	add	r27, r0
    904e:	a1 1d       	adc	r26, r1
    9050:	62 1f       	adc	r22, r18
    9052:	73 9f       	mul	r23, r19
    9054:	b0 0d       	add	r27, r0
    9056:	a1 1d       	adc	r26, r1
    9058:	62 1f       	adc	r22, r18
    905a:	83 9f       	mul	r24, r19
    905c:	a0 0d       	add	r26, r0
    905e:	61 1d       	adc	r22, r1
    9060:	22 1f       	adc	r18, r18
    9062:	74 9f       	mul	r23, r20
    9064:	33 27       	eor	r19, r19
    9066:	a0 0d       	add	r26, r0
    9068:	61 1d       	adc	r22, r1
    906a:	23 1f       	adc	r18, r19
    906c:	84 9f       	mul	r24, r20
    906e:	60 0d       	add	r22, r0
    9070:	21 1d       	adc	r18, r1
    9072:	82 2f       	mov	r24, r18
    9074:	76 2f       	mov	r23, r22
    9076:	6a 2f       	mov	r22, r26
    9078:	11 24       	eor	r1, r1
    907a:	9f 57       	subi	r25, 0x7F	; 127
    907c:	50 40       	sbci	r21, 0x00	; 0
    907e:	8a f0       	brmi	.+34     	; 0x90a2 <__mulsf3_pse+0x84>
    9080:	e1 f0       	breq	.+56     	; 0x90ba <__mulsf3_pse+0x9c>
    9082:	88 23       	and	r24, r24
    9084:	4a f0       	brmi	.+18     	; 0x9098 <__mulsf3_pse+0x7a>
    9086:	ee 0f       	add	r30, r30
    9088:	ff 1f       	adc	r31, r31
    908a:	bb 1f       	adc	r27, r27
    908c:	66 1f       	adc	r22, r22
    908e:	77 1f       	adc	r23, r23
    9090:	88 1f       	adc	r24, r24
    9092:	91 50       	subi	r25, 0x01	; 1
    9094:	50 40       	sbci	r21, 0x00	; 0
    9096:	a9 f7       	brne	.-22     	; 0x9082 <__mulsf3_pse+0x64>
    9098:	9e 3f       	cpi	r25, 0xFE	; 254
    909a:	51 05       	cpc	r21, r1
    909c:	70 f0       	brcs	.+28     	; 0x90ba <__mulsf3_pse+0x9c>
    909e:	5c cf       	rjmp	.-328    	; 0x8f58 <__fp_inf>
    90a0:	a6 cf       	rjmp	.-180    	; 0x8fee <__fp_szero>
    90a2:	5f 3f       	cpi	r21, 0xFF	; 255
    90a4:	ec f3       	brlt	.-6      	; 0x90a0 <__mulsf3_pse+0x82>
    90a6:	98 3e       	cpi	r25, 0xE8	; 232
    90a8:	dc f3       	brlt	.-10     	; 0x90a0 <__mulsf3_pse+0x82>
    90aa:	86 95       	lsr	r24
    90ac:	77 95       	ror	r23
    90ae:	67 95       	ror	r22
    90b0:	b7 95       	ror	r27
    90b2:	f7 95       	ror	r31
    90b4:	e7 95       	ror	r30
    90b6:	9f 5f       	subi	r25, 0xFF	; 255
    90b8:	c1 f7       	brne	.-16     	; 0x90aa <__mulsf3_pse+0x8c>
    90ba:	fe 2b       	or	r31, r30
    90bc:	88 0f       	add	r24, r24
    90be:	91 1d       	adc	r25, r1
    90c0:	96 95       	lsr	r25
    90c2:	87 95       	ror	r24
    90c4:	97 f9       	bld	r25, 7
    90c6:	08 95       	ret

000090c8 <__udivmodhi4>:
    90c8:	aa 1b       	sub	r26, r26
    90ca:	bb 1b       	sub	r27, r27
    90cc:	51 e1       	ldi	r21, 0x11	; 17
    90ce:	07 c0       	rjmp	.+14     	; 0x90de <__udivmodhi4_ep>

000090d0 <__udivmodhi4_loop>:
    90d0:	aa 1f       	adc	r26, r26
    90d2:	bb 1f       	adc	r27, r27
    90d4:	a6 17       	cp	r26, r22
    90d6:	b7 07       	cpc	r27, r23
    90d8:	10 f0       	brcs	.+4      	; 0x90de <__udivmodhi4_ep>
    90da:	a6 1b       	sub	r26, r22
    90dc:	b7 0b       	sbc	r27, r23

000090de <__udivmodhi4_ep>:
    90de:	88 1f       	adc	r24, r24
    90e0:	99 1f       	adc	r25, r25
    90e2:	5a 95       	dec	r21
    90e4:	a9 f7       	brne	.-22     	; 0x90d0 <__udivmodhi4_loop>
    90e6:	80 95       	com	r24
    90e8:	90 95       	com	r25
    90ea:	bc 01       	movw	r22, r24
    90ec:	cd 01       	movw	r24, r26
    90ee:	08 95       	ret

000090f0 <__divmodhi4>:
    90f0:	97 fb       	bst	r25, 7
    90f2:	07 2e       	mov	r0, r23
    90f4:	16 f4       	brtc	.+4      	; 0x90fa <__divmodhi4+0xa>
    90f6:	00 94       	com	r0
    90f8:	07 d0       	rcall	.+14     	; 0x9108 <__divmodhi4_neg1>
    90fa:	77 fd       	sbrc	r23, 7
    90fc:	09 d0       	rcall	.+18     	; 0x9110 <__divmodhi4_neg2>
    90fe:	0e 94 64 48 	call	0x90c8	; 0x90c8 <__udivmodhi4>
    9102:	07 fc       	sbrc	r0, 7
    9104:	05 d0       	rcall	.+10     	; 0x9110 <__divmodhi4_neg2>
    9106:	3e f4       	brtc	.+14     	; 0x9116 <__divmodhi4_exit>

00009108 <__divmodhi4_neg1>:
    9108:	90 95       	com	r25
    910a:	81 95       	neg	r24
    910c:	9f 4f       	sbci	r25, 0xFF	; 255
    910e:	08 95       	ret

00009110 <__divmodhi4_neg2>:
    9110:	70 95       	com	r23
    9112:	61 95       	neg	r22
    9114:	7f 4f       	sbci	r23, 0xFF	; 255

00009116 <__divmodhi4_exit>:
    9116:	08 95       	ret

00009118 <__udivmodsi4>:
    9118:	a1 e2       	ldi	r26, 0x21	; 33
    911a:	1a 2e       	mov	r1, r26
    911c:	aa 1b       	sub	r26, r26
    911e:	bb 1b       	sub	r27, r27
    9120:	fd 01       	movw	r30, r26
    9122:	0d c0       	rjmp	.+26     	; 0x913e <__udivmodsi4_ep>

00009124 <__udivmodsi4_loop>:
    9124:	aa 1f       	adc	r26, r26
    9126:	bb 1f       	adc	r27, r27
    9128:	ee 1f       	adc	r30, r30
    912a:	ff 1f       	adc	r31, r31
    912c:	a2 17       	cp	r26, r18
    912e:	b3 07       	cpc	r27, r19
    9130:	e4 07       	cpc	r30, r20
    9132:	f5 07       	cpc	r31, r21
    9134:	20 f0       	brcs	.+8      	; 0x913e <__udivmodsi4_ep>
    9136:	a2 1b       	sub	r26, r18
    9138:	b3 0b       	sbc	r27, r19
    913a:	e4 0b       	sbc	r30, r20
    913c:	f5 0b       	sbc	r31, r21

0000913e <__udivmodsi4_ep>:
    913e:	66 1f       	adc	r22, r22
    9140:	77 1f       	adc	r23, r23
    9142:	88 1f       	adc	r24, r24
    9144:	99 1f       	adc	r25, r25
    9146:	1a 94       	dec	r1
    9148:	69 f7       	brne	.-38     	; 0x9124 <__udivmodsi4_loop>
    914a:	60 95       	com	r22
    914c:	70 95       	com	r23
    914e:	80 95       	com	r24
    9150:	90 95       	com	r25
    9152:	9b 01       	movw	r18, r22
    9154:	ac 01       	movw	r20, r24
    9156:	bd 01       	movw	r22, r26
    9158:	cf 01       	movw	r24, r30
    915a:	08 95       	ret

0000915c <__divmodsi4>:
    915c:	05 2e       	mov	r0, r21
    915e:	97 fb       	bst	r25, 7
    9160:	1e f4       	brtc	.+6      	; 0x9168 <__divmodsi4+0xc>
    9162:	00 94       	com	r0
    9164:	0e 94 c5 48 	call	0x918a	; 0x918a <__negsi2>
    9168:	57 fd       	sbrc	r21, 7
    916a:	07 d0       	rcall	.+14     	; 0x917a <__divmodsi4_neg2>
    916c:	0e 94 8c 48 	call	0x9118	; 0x9118 <__udivmodsi4>
    9170:	07 fc       	sbrc	r0, 7
    9172:	03 d0       	rcall	.+6      	; 0x917a <__divmodsi4_neg2>
    9174:	4e f4       	brtc	.+18     	; 0x9188 <__divmodsi4_exit>
    9176:	0c 94 c5 48 	jmp	0x918a	; 0x918a <__negsi2>

0000917a <__divmodsi4_neg2>:
    917a:	50 95       	com	r21
    917c:	40 95       	com	r20
    917e:	30 95       	com	r19
    9180:	21 95       	neg	r18
    9182:	3f 4f       	sbci	r19, 0xFF	; 255
    9184:	4f 4f       	sbci	r20, 0xFF	; 255
    9186:	5f 4f       	sbci	r21, 0xFF	; 255

00009188 <__divmodsi4_exit>:
    9188:	08 95       	ret

0000918a <__negsi2>:
    918a:	90 95       	com	r25
    918c:	80 95       	com	r24
    918e:	70 95       	com	r23
    9190:	61 95       	neg	r22
    9192:	7f 4f       	sbci	r23, 0xFF	; 255
    9194:	8f 4f       	sbci	r24, 0xFF	; 255
    9196:	9f 4f       	sbci	r25, 0xFF	; 255
    9198:	08 95       	ret

0000919a <__tablejump2__>:
    919a:	ee 0f       	add	r30, r30
    919c:	ff 1f       	adc	r31, r31

0000919e <__tablejump__>:
    919e:	05 90       	lpm	r0, Z+
    91a0:	f4 91       	lpm	r31, Z
    91a2:	e0 2d       	mov	r30, r0
    91a4:	09 94       	ijmp

000091a6 <__mulhisi3>:
    91a6:	0e 94 db 48 	call	0x91b6	; 0x91b6 <__umulhisi3>
    91aa:	33 23       	and	r19, r19
    91ac:	12 f4       	brpl	.+4      	; 0x91b2 <__mulhisi3+0xc>
    91ae:	8a 1b       	sub	r24, r26
    91b0:	9b 0b       	sbc	r25, r27
    91b2:	0c 94 ec 48 	jmp	0x91d8	; 0x91d8 <__usmulhisi3_tail>

000091b6 <__umulhisi3>:
    91b6:	a2 9f       	mul	r26, r18
    91b8:	b0 01       	movw	r22, r0
    91ba:	b3 9f       	mul	r27, r19
    91bc:	c0 01       	movw	r24, r0
    91be:	a3 9f       	mul	r26, r19
    91c0:	70 0d       	add	r23, r0
    91c2:	81 1d       	adc	r24, r1
    91c4:	11 24       	eor	r1, r1
    91c6:	91 1d       	adc	r25, r1
    91c8:	b2 9f       	mul	r27, r18
    91ca:	70 0d       	add	r23, r0
    91cc:	81 1d       	adc	r24, r1
    91ce:	11 24       	eor	r1, r1
    91d0:	91 1d       	adc	r25, r1
    91d2:	08 95       	ret

000091d4 <__usmulhisi3>:
    91d4:	0e 94 db 48 	call	0x91b6	; 0x91b6 <__umulhisi3>

000091d8 <__usmulhisi3_tail>:
    91d8:	b7 ff       	sbrs	r27, 7
    91da:	08 95       	ret
    91dc:	82 1b       	sub	r24, r18
    91de:	93 0b       	sbc	r25, r19
    91e0:	08 95       	ret

000091e2 <__muluhisi3>:
    91e2:	0e 94 db 48 	call	0x91b6	; 0x91b6 <__umulhisi3>
    91e6:	a5 9f       	mul	r26, r21
    91e8:	90 0d       	add	r25, r0
    91ea:	b4 9f       	mul	r27, r20
    91ec:	90 0d       	add	r25, r0
    91ee:	a4 9f       	mul	r26, r20
    91f0:	80 0d       	add	r24, r0
    91f2:	91 1d       	adc	r25, r1
    91f4:	11 24       	eor	r1, r1
    91f6:	08 95       	ret

000091f8 <__mulshisi3>:
    91f8:	b7 ff       	sbrs	r27, 7
    91fa:	0c 94 f1 48 	jmp	0x91e2	; 0x91e2 <__muluhisi3>

000091fe <__mulohisi3>:
    91fe:	0e 94 f1 48 	call	0x91e2	; 0x91e2 <__muluhisi3>
    9202:	82 1b       	sub	r24, r18
    9204:	93 0b       	sbc	r25, r19
    9206:	08 95       	ret

00009208 <memcpy_P>:
    9208:	fb 01       	movw	r30, r22
    920a:	dc 01       	movw	r26, r24
    920c:	02 c0       	rjmp	.+4      	; 0x9212 <memcpy_P+0xa>
    920e:	05 90       	lpm	r0, Z+
    9210:	0d 92       	st	X+, r0
    9212:	41 50       	subi	r20, 0x01	; 1
    9214:	50 40       	sbci	r21, 0x00	; 0
    9216:	d8 f7       	brcc	.-10     	; 0x920e <memcpy_P+0x6>
    9218:	08 95       	ret

0000921a <memmove>:
    921a:	68 17       	cp	r22, r24
    921c:	79 07       	cpc	r23, r25
    921e:	68 f4       	brcc	.+26     	; 0x923a <memmove+0x20>
    9220:	fb 01       	movw	r30, r22
    9222:	dc 01       	movw	r26, r24
    9224:	e4 0f       	add	r30, r20
    9226:	f5 1f       	adc	r31, r21
    9228:	a4 0f       	add	r26, r20
    922a:	b5 1f       	adc	r27, r21
    922c:	02 c0       	rjmp	.+4      	; 0x9232 <memmove+0x18>
    922e:	02 90       	ld	r0, -Z
    9230:	0e 92       	st	-X, r0
    9232:	41 50       	subi	r20, 0x01	; 1
    9234:	50 40       	sbci	r21, 0x00	; 0
    9236:	d8 f7       	brcc	.-10     	; 0x922e <memmove+0x14>
    9238:	08 95       	ret
    923a:	0c 94 6a 49 	jmp	0x92d4	; 0x92d4 <memcpy>

0000923e <__itoa_ncheck>:
    923e:	bb 27       	eor	r27, r27
    9240:	4a 30       	cpi	r20, 0x0A	; 10
    9242:	31 f4       	brne	.+12     	; 0x9250 <__itoa_ncheck+0x12>
    9244:	99 23       	and	r25, r25
    9246:	22 f4       	brpl	.+8      	; 0x9250 <__itoa_ncheck+0x12>
    9248:	bd e2       	ldi	r27, 0x2D	; 45
    924a:	90 95       	com	r25
    924c:	81 95       	neg	r24
    924e:	9f 4f       	sbci	r25, 0xFF	; 255
    9250:	0c 94 2b 49 	jmp	0x9256	; 0x9256 <__utoa_common>

00009254 <__utoa_ncheck>:
    9254:	bb 27       	eor	r27, r27

00009256 <__utoa_common>:
    9256:	fb 01       	movw	r30, r22
    9258:	55 27       	eor	r21, r21
    925a:	aa 27       	eor	r26, r26
    925c:	88 0f       	add	r24, r24
    925e:	99 1f       	adc	r25, r25
    9260:	aa 1f       	adc	r26, r26
    9262:	a4 17       	cp	r26, r20
    9264:	10 f0       	brcs	.+4      	; 0x926a <__utoa_common+0x14>
    9266:	a4 1b       	sub	r26, r20
    9268:	83 95       	inc	r24
    926a:	50 51       	subi	r21, 0x10	; 16
    926c:	b9 f7       	brne	.-18     	; 0x925c <__utoa_common+0x6>
    926e:	a0 5d       	subi	r26, 0xD0	; 208
    9270:	aa 33       	cpi	r26, 0x3A	; 58
    9272:	08 f0       	brcs	.+2      	; 0x9276 <__utoa_common+0x20>
    9274:	a9 5d       	subi	r26, 0xD9	; 217
    9276:	a1 93       	st	Z+, r26
    9278:	00 97       	sbiw	r24, 0x00	; 0
    927a:	79 f7       	brne	.-34     	; 0x925a <__utoa_common+0x4>
    927c:	b1 11       	cpse	r27, r1
    927e:	b1 93       	st	Z+, r27
    9280:	11 92       	st	Z+, r1
    9282:	cb 01       	movw	r24, r22
    9284:	0c 94 73 49 	jmp	0x92e6	; 0x92e6 <strrev>

00009288 <__eerd_block_m644pa>:
    9288:	dc 01       	movw	r26, r24
    928a:	cb 01       	movw	r24, r22

0000928c <__eerd_blraw_m644pa>:
    928c:	fc 01       	movw	r30, r24
    928e:	f9 99       	sbic	0x1f, 1	; 31
    9290:	fe cf       	rjmp	.-4      	; 0x928e <__eerd_blraw_m644pa+0x2>
    9292:	06 c0       	rjmp	.+12     	; 0x92a0 <__eerd_blraw_m644pa+0x14>
    9294:	f2 bd       	out	0x22, r31	; 34
    9296:	e1 bd       	out	0x21, r30	; 33
    9298:	f8 9a       	sbi	0x1f, 0	; 31
    929a:	31 96       	adiw	r30, 0x01	; 1
    929c:	00 b4       	in	r0, 0x20	; 32
    929e:	0d 92       	st	X+, r0
    92a0:	41 50       	subi	r20, 0x01	; 1
    92a2:	50 40       	sbci	r21, 0x00	; 0
    92a4:	b8 f7       	brcc	.-18     	; 0x9294 <__eerd_blraw_m644pa+0x8>
    92a6:	08 95       	ret

000092a8 <__eerd_byte_m644pa>:
    92a8:	f9 99       	sbic	0x1f, 1	; 31
    92aa:	fe cf       	rjmp	.-4      	; 0x92a8 <__eerd_byte_m644pa>
    92ac:	92 bd       	out	0x22, r25	; 34
    92ae:	81 bd       	out	0x21, r24	; 33
    92b0:	f8 9a       	sbi	0x1f, 0	; 31
    92b2:	99 27       	eor	r25, r25
    92b4:	80 b5       	in	r24, 0x20	; 32
    92b6:	08 95       	ret

000092b8 <__eewr_byte_m644pa>:
    92b8:	26 2f       	mov	r18, r22

000092ba <__eewr_r18_m644pa>:
    92ba:	f9 99       	sbic	0x1f, 1	; 31
    92bc:	fe cf       	rjmp	.-4      	; 0x92ba <__eewr_r18_m644pa>
    92be:	1f ba       	out	0x1f, r1	; 31
    92c0:	92 bd       	out	0x22, r25	; 34
    92c2:	81 bd       	out	0x21, r24	; 33
    92c4:	20 bd       	out	0x20, r18	; 32
    92c6:	0f b6       	in	r0, 0x3f	; 63
    92c8:	f8 94       	cli
    92ca:	fa 9a       	sbi	0x1f, 2	; 31
    92cc:	f9 9a       	sbi	0x1f, 1	; 31
    92ce:	0f be       	out	0x3f, r0	; 63
    92d0:	01 96       	adiw	r24, 0x01	; 1
    92d2:	08 95       	ret

000092d4 <memcpy>:
    92d4:	fb 01       	movw	r30, r22
    92d6:	dc 01       	movw	r26, r24
    92d8:	02 c0       	rjmp	.+4      	; 0x92de <memcpy+0xa>
    92da:	01 90       	ld	r0, Z+
    92dc:	0d 92       	st	X+, r0
    92de:	41 50       	subi	r20, 0x01	; 1
    92e0:	50 40       	sbci	r21, 0x00	; 0
    92e2:	d8 f7       	brcc	.-10     	; 0x92da <memcpy+0x6>
    92e4:	08 95       	ret

000092e6 <strrev>:
    92e6:	dc 01       	movw	r26, r24
    92e8:	fc 01       	movw	r30, r24
    92ea:	67 2f       	mov	r22, r23
    92ec:	71 91       	ld	r23, Z+
    92ee:	77 23       	and	r23, r23
    92f0:	e1 f7       	brne	.-8      	; 0x92ea <strrev+0x4>
    92f2:	32 97       	sbiw	r30, 0x02	; 2
    92f4:	04 c0       	rjmp	.+8      	; 0x92fe <strrev+0x18>
    92f6:	7c 91       	ld	r23, X
    92f8:	6d 93       	st	X+, r22
    92fa:	70 83       	st	Z, r23
    92fc:	62 91       	ld	r22, -Z
    92fe:	ae 17       	cp	r26, r30
    9300:	bf 07       	cpc	r27, r31
    9302:	c8 f3       	brcs	.-14     	; 0x92f6 <strrev+0x10>
    9304:	08 95       	ret

00009306 <_exit>:
    9306:	f8 94       	cli

00009308 <__stop_program>:
    9308:	ff cf       	rjmp	.-2      	; 0x9308 <__stop_program>
