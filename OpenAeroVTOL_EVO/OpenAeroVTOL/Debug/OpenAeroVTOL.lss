
OpenAeroVTOL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000040c  00800100  0000923e  000092d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000923e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000331  0080050c  0080050c  000096de  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000096de  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000660  00000000  00000000  00009710  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0001413f  00000000  00000000  00009d70  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000355f  00000000  00000000  0001deaf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00003db3  00000000  00000000  0002140e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00001440  00000000  00000000  000251c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00002789  00000000  00000000  00026604  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000090d3  00000000  00000000  00028d8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000518  00000000  00000000  00031e60  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5a 0d 	jmp	0x1ab4	; 0x1ab4 <__ctors_end>
       4:	0c 94 f1 2a 	jmp	0x55e2	; 0x55e2 <__vector_1>
       8:	0c 94 b9 2a 	jmp	0x5572	; 0x5572 <__vector_2>
       c:	0c 94 a4 2b 	jmp	0x5748	; 0x5748 <__vector_3>
      10:	0c 94 80 0d 	jmp	0x1b00	; 0x1b00 <__bad_interrupt>
      14:	0c 94 63 2b 	jmp	0x56c6	; 0x56c6 <__vector_5>
      18:	0c 94 80 0d 	jmp	0x1b00	; 0x1b00 <__bad_interrupt>
      1c:	0c 94 2a 2b 	jmp	0x5654	; 0x5654 <__vector_7>
      20:	0c 94 80 0d 	jmp	0x1b00	; 0x1b00 <__bad_interrupt>
      24:	0c 94 80 0d 	jmp	0x1b00	; 0x1b00 <__bad_interrupt>
      28:	0c 94 80 0d 	jmp	0x1b00	; 0x1b00 <__bad_interrupt>
      2c:	0c 94 80 0d 	jmp	0x1b00	; 0x1b00 <__bad_interrupt>
      30:	0c 94 80 0d 	jmp	0x1b00	; 0x1b00 <__bad_interrupt>
      34:	0c 94 80 0d 	jmp	0x1b00	; 0x1b00 <__bad_interrupt>
      38:	0c 94 80 0d 	jmp	0x1b00	; 0x1b00 <__bad_interrupt>
      3c:	0c 94 80 0d 	jmp	0x1b00	; 0x1b00 <__bad_interrupt>
      40:	0c 94 80 0d 	jmp	0x1b00	; 0x1b00 <__bad_interrupt>
      44:	0c 94 80 0d 	jmp	0x1b00	; 0x1b00 <__bad_interrupt>
      48:	0c 94 a2 2a 	jmp	0x5544	; 0x5544 <__vector_18>
      4c:	0c 94 80 0d 	jmp	0x1b00	; 0x1b00 <__bad_interrupt>
      50:	0c 94 60 2c 	jmp	0x58c0	; 0x58c0 <__vector_20>
      54:	0c 94 80 0d 	jmp	0x1b00	; 0x1b00 <__bad_interrupt>
      58:	0c 94 80 0d 	jmp	0x1b00	; 0x1b00 <__bad_interrupt>
      5c:	0c 94 80 0d 	jmp	0x1b00	; 0x1b00 <__bad_interrupt>
      60:	0c 94 80 0d 	jmp	0x1b00	; 0x1b00 <__bad_interrupt>
      64:	0c 94 80 0d 	jmp	0x1b00	; 0x1b00 <__bad_interrupt>
      68:	0c 94 80 0d 	jmp	0x1b00	; 0x1b00 <__bad_interrupt>
      6c:	0c 94 80 0d 	jmp	0x1b00	; 0x1b00 <__bad_interrupt>
      70:	0c 94 80 0d 	jmp	0x1b00	; 0x1b00 <__bad_interrupt>
      74:	0c 94 80 0d 	jmp	0x1b00	; 0x1b00 <__bad_interrupt>
      78:	0c 94 80 0d 	jmp	0x1b00	; 0x1b00 <__bad_interrupt>
      7c:	4a 1a       	sub	r4, r26
      7e:	ba 1a       	sub	r11, r26
      80:	ba 1a       	sub	r11, r26
      82:	5b 1a       	sub	r5, r27
      84:	68 1a       	sub	r6, r24
      86:	72 1a       	sub	r7, r18
      88:	6e 1a       	sub	r6, r30
      8a:	7e 1a       	sub	r7, r30
      8c:	8a 1a       	sub	r8, r26
      8e:	8e 1a       	sub	r8, r30
      90:	9a 1a       	sub	r9, r26
      92:	c6 32       	cpi	r28, 0x26	; 38
      94:	c8 32       	cpi	r28, 0x28	; 40
      96:	cb 32       	cpi	r28, 0x2B	; 43
      98:	cd 32       	cpi	r28, 0x2D	; 45
      9a:	cf 32       	cpi	r28, 0x2F	; 47
      9c:	d1 32       	cpi	r29, 0x21	; 33
      9e:	d3 32       	cpi	r29, 0x23	; 35
      a0:	d5 32       	cpi	r29, 0x25	; 37
      a2:	d8 32       	cpi	r29, 0x28	; 40
      a4:	da 32       	cpi	r29, 0x2A	; 42
      a6:	dc 32       	cpi	r29, 0x2C	; 44
      a8:	de 32       	cpi	r29, 0x2E	; 46
      aa:	e0 32       	cpi	r30, 0x20	; 32
      ac:	e2 32       	cpi	r30, 0x22	; 34
      ae:	e4 32       	cpi	r30, 0x24	; 36
      b0:	e6 32       	cpi	r30, 0x26	; 38
      b2:	e9 32       	cpi	r30, 0x29	; 41
      b4:	eb 32       	cpi	r30, 0x2B	; 43
      b6:	ed 32       	cpi	r30, 0x2D	; 45

000000b8 <Acc_Pol>:
      b8:	ff ff 01 ff 01 ff 01 ff ff 01 01 01 ff 01 01 ff     ................
      c8:	ff ff                                               ..

000000ca <ACC_RPY_Order>:
      ca:	00 01 02 02 00 01 00 01 02 00 01 02 01 00 02 00     ................
      da:	02 01                                               ..

000000dc <FUTABA>:
      dc:	01 02 00 03 04 05 06 07                             ........

000000e4 <JR>:
      e4:	00 01 02 03 04 05 06 07                             ........

000000ec <Trans_Matrix>:
      ec:	05 02 06 01 05 08 03 07 05                          .........

000000f5 <Wingdings>:
      f5:	01 02 41 05 0d 00 0f 00 22 00 33 00 44 00 4f 09     ..A.....".3.D.O.
     105:	01 00 03 00 07 00 0f 00 1f 00 0f 00 07 00 03 00     ................
     115:	01 00 08 1c 00 1c 00 1c 00 1c 00 7f 00 3e 00 1c     .............>..
     125:	00 08 00 08 08 00 1c 00 3e 00 7f 00 1c 00 1c 00     ........>.......
     135:	1c 00 1c 00 05 ff 01 fe 00 7c 00 38 00 10 00 0d     .........|.8....
     145:	40 00 60 00 70 00 78 00 7c 00 7e 00 7f 00 7e 00     @.`.p.x.|.~...~.
     155:	7c 00 78 00 70 00 60 00 40 00                       |.x.p.`.@.

0000015f <Verdana14>:
     15f:	01 02 20 5b 13 00 bb 00 c5 00 cc 00 cc 00 cc 00     .. [............
     16f:	cc 01 03 01 03 01 03 01 16 01 29 01 29 01 29 01     ..........).).).
     17f:	36 01 49 01 50 01 50 01 6f 01 88 01 a4 01 c0 01     6.I.P.P.o.......
     18f:	df 01 fb 02 1a 02 36 02 55 02 74 02 7b 02 7b 02     ......6.U.t.{.{.
     19f:	7b 02 7b 02 7b 02 94 02 94 02 bc 02 db 02 fd 03     {.{.{...........
     1af:	22 03 3e 03 5a 03 82 03 a1 03 b4 03 ca 03 ec 04     ".>.Z...........
     1bf:	08 04 2d 04 4c 04 74 04 8d 04 b5 04 d7 04 f9 05     ..-.L.t.........
     1cf:	1e 05 3d 05 65 05 99 05 bb 05 e0 06 02 06 02 06     ..=.e...........
     1df:	1b 06 1b 06 1b 06 1b 06 1b 06 34 06 50 06 69 06     ..........4.P.i.
     1ef:	85 06 a1 06 b4 06 d0 06 e9 06 f0 07 00 07 1c 07     ................
     1ff:	23 07 4e 07 67 07 86 07 a2 07 be 07 d1 07 ea 07     #.N.g...........
     20f:	fd 08 16 08 32 08 5d 08 79 08 95 03 00 00 00 00     ....2.].y.......
     21f:	00 00 00 00 00 02 fe 67 00 fe 67 00 12 78 00 00     .......g..g..x..
     22f:	fe 01 00 02 01 00 02 01 00 02 01 00 fe 41 00 78     .............A.x
     23f:	70 00 00 1c 00 00 07 00 e0 00 00 38 00 00 0e 1e     p..........8....
     24f:	00 82 7f 00 80 40 00 80 40 00 80 40 00 80 7f 00     .....@..@..@....
     25f:	00 1e 00 06 c0 1f 00 f8 ff 00 3c e0 01 07 00 07     ..........<.....
     26f:	03 00 06 01 00 04 06 01 00 04 03 00 06 07 00 07     ................
     27f:	3c e0 01 f8 ff 00 c0 1f 00 04 00 00 03 00 f0 03     <...............
     28f:	00 70 00 00 10 00 06 00 03 00 00 03 00 00 03 00     .p..............
     29f:	00 03 00 00 03 00 00 03 00 02 00 70 00 00 70 00     ...........p..p.
     2af:	0a f0 0f 00 fc 3f 00 0c 30 00 06 60 00 06 60 00     .....?..0..`..`.
     2bf:	06 60 00 06 60 00 0c 30 00 fc 3f 00 f0 0f 00 08     .`..`..0..?.....
     2cf:	18 60 00 18 60 00 18 60 00 fe 7f 00 fe 7f 00 00     .`..`..`........
     2df:	60 00 00 60 00 00 60 00 09 0c 70 00 06 78 00 06     `..`..`...p..x..
     2ef:	6c 00 06 66 00 06 63 00 8e 61 00 fc 60 00 78 60     l..f..c..a..`.x`
     2ff:	00 00 60 00 09 0c 30 00 06 60 00 06 60 00 86 61     ..`...0..`..`..a
     30f:	00 86 61 00 86 61 00 ce 73 00 7c 3f 00 38 1e 00     ..a..a..s.|?.8..
     31f:	0a 00 07 00 80 07 00 c0 07 00 f0 06 00 38 06 00     .............8..
     32f:	1c 06 00 fe 7f 00 fe 7f 00 00 06 00 00 06 00 09     ................
     33f:	00 30 00 fe 60 00 fe 60 00 c6 60 00 c6 60 00 c6     .0..`..`..`..`..
     34f:	60 00 c6 31 00 86 3f 00 06 0f 00 0a e0 0f 00 f0     `..1..?.........
     35f:	3f 00 9c 30 00 cc 60 00 c6 60 00 c6 60 00 c6 60     ?..0..`..`..`..`
     36f:	00 c6 31 00 86 3f 00 00 0f 00 09 06 00 00 06 40     ..1..?.........@
     37f:	00 06 70 00 06 7c 00 06 0f 00 c6 03 00 f6 00 00     ..p..|..........
     38f:	3e 00 00 0e 00 00 0a 38 1e 00 7c 3f 00 ce 71 00     >......8..|?..q.
     39f:	c6 60 00 c6 60 00 86 61 00 86 61 00 4e 73 00 7c     .`..`..a..a.Ns.|
     3af:	3f 00 38 1e 00 0a f0 00 00 fc 61 00 8c 63 00 06     ?.8.......a..c..
     3bf:	63 00 06 63 00 06 63 00 06 33 00 0c 39 00 fc 1f     c..c..c..3..9...
     3cf:	00 f0 07 00 02 70 70 00 70 70 00 08 0c 00 00 06     .....pp.pp......
     3df:	00 00 06 67 00 06 67 00 86 01 00 ce 00 00 fc 00     ...g..g.........
     3ef:	00 38 00 00 0d 00 40 00 00 78 00 00 3f 00 c0 07     .8....@..x..?...
     3ff:	00 f8 06 00 3e 06 00 06 06 00 3e 06 00 f8 06 00     ....>.....>.....
     40f:	c0 07 00 00 3f 00 00 78 00 00 40 00 0a fe 7f 00     ....?..x..@.....
     41f:	fe 7f 00 86 61 00 86 61 00 86 61 00 86 61 00 c6     ....a..a..a..a..
     42f:	61 00 7c 73 00 3c 3f 00 00 1e 00 0b e0 07 00 f8     a.|s.<?.........
     43f:	1f 00 1c 38 00 0c 30 00 06 60 00 06 60 00 06 60     ...8..0..`..`..`
     44f:	00 06 60 00 06 60 00 06 20 00 0c 30 00 0c fe 7f     ..`..`.. ..0....
     45f:	00 fe 7f 00 06 60 00 06 60 00 06 60 00 06 60 00     .....`..`..`..`.
     46f:	06 60 00 0e 70 00 0c 30 00 38 1c 00 f8 0f 00 e0     .`..p..0.8......
     47f:	07 00 09 fe 7f 00 fe 7f 00 c6 60 00 c6 60 00 c6     ..........`..`..
     48f:	60 00 c6 60 00 c6 60 00 c6 60 00 c6 60 00 09 fe     `..`..`..`..`...
     49f:	7f 00 fe 7f 00 86 01 00 86 01 00 86 01 00 86 01     ................
     4af:	00 86 01 00 86 01 00 06 00 00 0d e0 07 00 f8 1f     ................
     4bf:	00 3c 3c 00 0c 30 00 0e 70 00 06 60 00 06 60 00     .<<..0..p..`..`.
     4cf:	06 63 00 06 63 00 06 63 00 06 63 00 0c 3f 00 0c     .c..c..c..c..?..
     4df:	3f 00 0a fe 7f 00 fe 7f 00 c0 00 00 c0 00 00 c0     ?...............
     4ef:	00 00 c0 00 00 c0 00 00 c0 00 00 fe 7f 00 fe 7f     ................
     4ff:	00 06 06 60 00 06 60 00 fe 7f 00 fe 7f 00 06 60     ...`..`........`
     50f:	00 06 60 00 07 00 60 00 00 60 00 06 60 00 06 60     ..`...`..`..`..`
     51f:	00 06 70 00 fe 3f 00 fe 1f 00 0b fe 7f 00 fe 7f     ..p..?..........
     52f:	00 80 03 00 c0 01 00 e0 03 00 70 07 00 38 1c 00     ..........p..8..
     53f:	1c 38 00 0e 70 00 06 60 00 02 40 00 09 fe 7f 00     .8..p..`..@.....
     54f:	fe 7f 00 00 60 00 00 60 00 00 60 00 00 60 00 00     ....`..`..`..`..
     55f:	60 00 00 60 00 00 60 00 0c fe 7f 00 fe 7f 00 0e     `..`..`.........
     56f:	00 00 38 00 00 e0 01 00 80 07 00 00 07 00 e0 01     ..8.............
     57f:	00 38 00 00 0e 00 00 fe 7f 00 fe 7f 00 0a fe 7f     .8..............
     58f:	00 fe 7f 00 0e 00 00 3c 00 00 e0 00 00 80 03 00     .......<........
     59f:	00 1e 00 00 78 00 fe 7f 00 fe 7f 00 0d e0 07 00     ....x...........
     5af:	f8 1f 00 1c 38 00 0c 30 00 06 60 00 06 60 00 06     ....8..0..`..`..
     5bf:	60 00 06 60 00 06 60 00 0c 30 00 1c 38 00 f8 1f     `..`..`..0..8...
     5cf:	00 e0 07 00 08 fe 7f 00 fe 7f 00 06 03 00 06 03     ................
     5df:	00 06 03 00 8e 03 00 fc 01 00 f8 00 00 0d e0 07     ................
     5ef:	00 f8 1f 00 1c 38 00 0c 30 00 06 60 00 06 60 00     .....8..0..`..`.
     5ff:	06 60 00 06 e0 01 06 e0 03 0c 30 07 1c 38 06 f8     .`........0..8..
     60f:	1f 06 e0 07 06 0b fe 7f 00 fe 7f 00 86 01 00 86     ................
     61f:	01 00 86 01 00 86 07 00 ce 0e 00 fc 1c 00 78 70     ..............xp
     62f:	00 00 60 00 00 40 00 0b 78 30 00 fc 70 00 ce 60     ..`..@..x0..p..`
     63f:	00 86 61 00 86 61 00 86 61 00 86 61 00 86 61 00     ..a..a..a..a..a.
     64f:	06 33 00 0c 3f 00 00 1e 00 0c 06 00 00 06 00 00     .3..?...........
     65f:	06 00 00 06 00 00 06 00 00 fe 7f 00 fe 7f 00 06     ................
     66f:	00 00 06 00 00 06 00 00 06 00 00 06 00 00 0a fe     ................
     67f:	0f 00 fe 3f 00 00 70 00 00 60 00 00 60 00 00 60     ...?..p..`..`..`
     68f:	00 00 60 00 00 70 00 fe 3f 00 fe 0f 00 0d 02 00     ..`..p..?.......
     69f:	00 1e 00 00 fc 00 00 e0 03 00 80 1f 00 00 7c 00     ..............|.
     6af:	00 60 00 00 7c 00 80 1f 00 e0 03 00 fc 00 00 1e     .`..|...........
     6bf:	00 00 02 00 00 11 06 00 00 7e 00 00 f8 07 00 80     .........~......
     6cf:	3f 00 00 78 00 00 7c 00 c0 0f 00 7e 00 00 06 00     ?..x..|....~....
     6df:	00 7e 00 00 e0 07 00 00 7e 00 00 70 00 80 7f 00     .~......~..p....
     6ef:	f8 07 00 7e 00 00 06 00 00 0b 02 40 00 06 60 00     ...~.......@..`.
     6ff:	1e 78 00 38 1c 00 e0 07 00 80 01 00 e0 07 00 38     .x.8...........8
     70f:	1e 00 1e 78 00 06 60 00 02 40 00 0c 02 00 00 06     ...x..`..@......
     71f:	00 00 1e 00 00 78 00 00 e0 00 00 c0 7f 00 c0 7f     .....x..........
     72f:	00 e0 00 00 78 00 00 1e 00 00 06 00 00 02 00 00     ....x...........
     73f:	0b 06 70 00 06 78 00 06 7c 00 06 6e 00 06 67 00     ..p..x..|..n..g.
     74f:	c6 63 00 e6 60 00 76 60 00 3e 60 00 1e 60 00 0e     .c..`.v`.>`..`..
     75f:	60 00 08 03 00 00 1f 00 00 fe 00 00 f0 07 00 80     `...............
     76f:	3f 00 00 fc 01 00 e0 03 00 00 03 08 00 3c 00 30     ?............<.0
     77f:	7e 00 30 67 00 30 63 00 30 63 00 30 33 00 e0 7f     ~.0g.0c.0c.03...
     78f:	00 e0 7f 00 09 ff 7f 00 ff 7f 00 60 20 00 30 60     ...........` .0`
     79f:	00 30 60 00 30 60 00 70 70 00 e0 3f 00 c0 0f 00     .0`.0`.pp..?....
     7af:	08 80 0f 00 e0 3f 00 60 30 00 30 60 00 30 60 00     .....?.`0.0`.0`.
     7bf:	30 60 00 30 60 00 60 30 00 09 80 1f 00 e0 3f 00     0`.0`.`0......?.
     7cf:	70 70 00 30 60 00 30 60 00 30 60 00 30 30 00 ff     pp.0`.0`.0`.00..
     7df:	7f 00 ff 7f 00 09 80 0f 00 e0 3f 00 60 33 00 30     ..........?.`3.0
     7ef:	63 00 30 63 00 30 63 00 70 63 00 e0 63 00 c0 33     c.0c.0c.pc..c..3
     7ff:	00 06 30 00 00 fe 7f 00 ff 7f 00 33 00 00 33 00     ..0........3..3.
     80f:	00 03 00 00 09 80 1f 00 e0 3f 06 70 70 06 30 60     .........?.pp.0`
     81f:	06 30 60 06 30 60 06 30 30 07 f0 ff 03 f0 ff 01     .0`.0`.00.......
     82f:	08 ff 7f 00 ff 7f 00 60 00 00 30 00 00 30 00 00     .......`..0..0..
     83f:	30 00 00 f0 7f 00 e0 7f 00 02 f6 7f 00 f6 7f 00     0...............
     84f:	05 00 00 06 30 00 06 30 00 06 f6 ff 07 f6 ff 03     ....0..0........
     85f:	09 ff 7f 00 ff 7f 00 00 06 00 00 07 00 80 0f 00     ................
     86f:	c0 38 00 70 70 00 30 60 00 10 40 00 02 ff 7f 00     .8.pp.0`..@.....
     87f:	ff 7f 00 0e f0 7f 00 f0 7f 00 60 00 00 30 00 00     ..........`..0..
     88f:	30 00 00 30 00 00 f0 7f 00 e0 7f 00 60 00 00 30     0..0........`..0
     89f:	00 00 30 00 00 30 00 00 f0 7f 00 e0 7f 00 08 f0     ..0..0..........
     8af:	7f 00 f0 7f 00 60 00 00 30 00 00 30 00 00 30 00     .....`..0..0..0.
     8bf:	00 f0 7f 00 e0 7f 00 0a 80 0f 00 e0 3f 00 60 30     ............?.`0
     8cf:	00 30 60 00 30 60 00 30 60 00 30 60 00 60 30 00     .0`.0`.0`.0`.`0.
     8df:	e0 3f 00 80 0f 00 09 f0 ff 07 f0 ff 07 60 60 00     .?...........``.
     8ef:	30 60 00 30 60 00 30 60 00 70 70 00 e0 3f 00 c0     0`.0`.0`.pp..?..
     8ff:	0f 00 09 80 1f 00 e0 3f 00 70 70 00 30 60 00 30     .......?.pp.0`.0
     90f:	60 00 30 60 00 30 30 00 f0 ff 07 f0 ff 07 06 f0     `.0`.00.........
     91f:	7f 00 f0 7f 00 60 00 00 30 00 00 30 00 00 30 00     .....`..0..0..0.
     92f:	00 08 c0 31 00 e0 63 00 30 63 00 30 63 00 30 66     ...1..c.0c.0c.0f
     93f:	00 30 66 00 30 3e 00 60 1c 00 06 30 00 00 fe 3f     .0f.0>.`...0...?
     94f:	00 fe 7f 00 30 60 00 30 60 00 30 60 00 08 f0 1f     ....0`.0`.0`....
     95f:	00 f0 7f 00 00 60 00 00 60 00 00 60 00 00 30 00     .....`..`..`..0.
     96f:	f0 7f 00 f0 7f 00 09 10 00 00 f0 00 00 e0 07 00     ................
     97f:	00 3e 00 00 60 00 00 3e 00 e0 07 00 f0 00 00 10     .>..`..>........
     98f:	00 00 0e 30 00 00 f0 03 00 c0 3f 00 00 78 00 00     ...0......?..x..
     99f:	7c 00 80 07 00 f0 00 00 f0 00 00 c0 07 00 00 3c     |..............<
     9af:	00 00 70 00 c0 3f 00 f0 03 00 30 00 00 09 10 40     ..p..?....0....@
     9bf:	00 30 60 00 f0 78 00 c0 1d 00 00 07 00 c0 1d 00     .0`..x..........
     9cf:	f0 78 00 30 60 00 10 40 00 09 10 00 00 f0 00 00     .x.0`..@........
     9df:	e0 07 06 00 bf 07 00 f0 01 00 3f 00 e0 07 00 f0     ..........?.....
     9ef:	00 00 10 00 00 08 30 70 00 30 78 00 30 7c 00 30     ......0p.0x.0|.0
     9ff:	66 00 30 63 00 f0 61 00 f0 60 00 70 60 00           f.0c..a..`.p`.

00000a0d <Verdana8>:
     a0d:	01 02 20 5b 0b 00 bb 00 be 00 c1 00 c1 00 c1 00     .. [............
     a1d:	c1 00 d6 00 d6 00 d6 00 dd 00 e4 00 e4 00 e4 00     ................
     a2d:	e9 00 f0 00 f3 00 f3 00 fe 01 09 01 14 01 1f 01     ................
     a3d:	2c 01 37 01 42 01 4d 01 58 01 63 01 66 01 66 01     ,.7.B.M.X.c.f.f.
     a4d:	66 01 66 01 66 01 6f 01 6f 01 7c 01 89 01 98 01     f.f.f.o.o.|.....
     a5d:	a7 01 b2 01 bd 01 cc 01 d9 01 e0 01 e9 01 f6 02     ................
     a6d:	01 02 10 02 1d 02 2c 02 37 02 46 02 53 02 60 02     ......,.7.F.S.`.
     a7d:	6f 02 7c 02 89 02 9c 02 a9 02 b8 02 c5 02 c5 02     o.|.............
     a8d:	c5 02 c5 02 c5 02 c5 02 c5 02 d0 02 db 02 e6 02     ................
     a9d:	f1 02 fc 03 05 03 10 03 1b 03 1e 03 25 03 30 03     ............%.0.
     aad:	33 03 46 03 51 03 5c 03 67 03 72 03 7b 03 84 03     3.F.Q.\.g.r.{...
     abd:	8d 03 98 03 a3 03 b2 03 bd 03 c8 01 00 00 01 7e     ...............~
     acd:	01 0a 0c 00 12 00 12 00 8c 01 60 00 18 00 c6 00     ..........`.....
     add:	20 01 20 01 c0 00 03 f8 00 06 03 01 04 03 01 04      . .............
     aed:	06 03 f8 00 02 00 04 80 03 03 20 00 20 00 20 00     .......... . . .
     afd:	01 80 01 05 fc 00 02 01 02 01 02 01 fc 00 05 04     ................
     b0d:	01 04 01 fe 01 00 01 00 01 05 84 01 42 01 22 01     ............B.".
     b1d:	12 01 0c 01 05 84 00 02 01 12 01 12 01 ec 00 06     ................
     b2d:	60 00 50 00 48 00 44 00 fe 01 40 00 05 9e 00 12     `.P.H.D...@.....
     b3d:	01 12 01 12 01 e2 00 05 f8 00 14 01 12 01 12 01     ................
     b4d:	e0 00 05 02 00 82 01 62 00 1a 00 06 00 05 ec 00     .......b........
     b5d:	12 01 12 01 12 01 ec 00 05 1c 00 22 01 22 01 a2     ..........."."..
     b6d:	00 7c 00 01 98 01 04 02 00 62 01 12 00 0c 00 06     .|.......b......
     b7d:	c0 01 78 00 46 00 46 00 78 00 c0 01 06 fe 01 12     ..x.F.F.x.......
     b8d:	01 12 01 12 01 1c 01 e0 00 07 78 00 84 00 02 01     ..........x.....
     b9d:	02 01 02 01 02 01 84 00 07 fe 01 02 01 02 01 02     ................
     bad:	01 02 01 84 00 78 00 05 fe 01 12 01 12 01 12 01     .....x..........
     bbd:	12 01 05 fe 01 12 00 12 00 12 00 02 00 07 78 00     ..............x.
     bcd:	84 00 02 01 02 01 22 01 22 01 e4 00 06 fe 01 10     ......".".......
     bdd:	00 10 00 10 00 10 00 fe 01 03 02 01 fe 01 02 01     ................
     bed:	04 00 01 02 01 02 01 fe 00 06 fe 01 20 00 30 00     ............ .0.
     bfd:	48 00 84 00 02 01 05 fe 01 00 01 00 01 00 01 00     H...............
     c0d:	01 07 fe 01 06 00 18 00 60 00 18 00 06 00 fe 01     ........`.......
     c1d:	06 fe 01 06 00 18 00 60 00 80 01 fe 01 07 78 00     .......`......x.
     c2d:	84 00 02 01 02 01 02 01 84 00 78 00 05 fe 01 22     ..........x...."
     c3d:	00 22 00 22 00 1c 00 07 78 00 84 00 02 01 02 01     ."."....x.......
     c4d:	02 03 84 04 78 04 06 fe 01 22 00 22 00 62 00 9c     ....x....".".b..
     c5d:	00 00 01 06 8c 00 12 01 12 01 22 01 22 01 c4 00     .........."."...
     c6d:	07 02 00 02 00 02 00 fe 01 02 00 02 00 02 00 06     ................
     c7d:	fe 00 00 01 00 01 00 01 00 01 fe 00 06 0e 00 70     ...............p
     c8d:	00 80 01 80 01 70 00 0e 00 09 06 00 78 00 80 01     .....p......x...
     c9d:	78 00 06 00 78 00 80 01 78 00 06 00 06 86 01 48     x...x...x......H
     cad:	00 30 00 30 00 48 00 86 01 07 02 00 04 00 08 00     .0.0.H..........
     cbd:	f0 01 08 00 04 00 02 00 06 82 01 42 01 22 01 12     ...........B."..
     ccd:	01 0a 01 06 01 05 c0 00 28 01 28 01 28 01 f0 01     ........(.(.(...
     cdd:	05 ff 01 08 01 08 01 08 01 f0 00 05 f0 00 08 01     ................
     ced:	08 01 08 01 90 00 05 f0 00 08 01 08 01 08 01 ff     ................
     cfd:	01 05 f0 00 28 01 28 01 28 01 b0 00 04 08 00 fe     ....(.(.(.......
     d0d:	01 09 00 09 00 05 f0 00 08 05 08 05 08 05 f8 03     ................
     d1d:	05 ff 01 08 00 08 00 08 00 f0 01 01 f9 01 03 00     ................
     d2d:	04 08 04 f9 03 05 ff 01 40 00 60 00 90 00 08 01     ........@.`.....
     d3d:	01 ff 01 09 f8 01 08 00 08 00 08 00 f0 01 08 00     ................
     d4d:	08 00 08 00 f0 01 05 f8 01 08 00 08 00 08 00 f0     ................
     d5d:	01 05 f0 00 08 01 08 01 08 01 f0 00 05 f8 07 08     ................
     d6d:	01 08 01 08 01 f0 00 05 f0 00 08 01 08 01 08 01     ................
     d7d:	f8 07 04 f8 01 10 00 08 00 08 00 04 30 01 28 01     ............0.(.
     d8d:	48 01 c8 00 04 08 00 fe 00 08 01 08 01 05 f8 00     H...............
     d9d:	00 01 00 01 00 01 f8 01 05 18 00 60 00 80 01 60     ...........`...`
     dad:	00 18 00 07 78 00 80 01 60 00 18 00 60 00 80 01     ....x...`...`...
     dbd:	78 00 05 08 01 90 00 60 00 90 00 08 01 05 08 00     x......`........
     dcd:	70 04 80 03 70 00 08 00 04 88 01 48 01 28 01 18     p...p......H.(..
     ddd:	01                                                  .

00000dde <lcd_commmands>:
     dde:	af 40 a0 a6 a4 a2 ee c8 2f 24 ac 00 f8 00           .@....../$....

00000dec <pagemap>:
     dec:	07 06 05 04 03 02 01 00                             ........

00000df4 <text_menu>:
     df4:	23 15 2a 10 25 10 20 10 1b 10 16 10 2f 10 2f 10     #.*.%. ....././.
     e04:	2f 10 7c 17 74 17 7a 17 78 17 76 17 6f 17 6a 17     /.|.t.z.x.v.o.j.
     e14:	65 17 60 17 a5 11 c5 11 c0 11 ba 11 e8 14 86 17     e.`.............
     e24:	7e 17 f2 15 0f 16 0a 16 04 16 00 16 fc 15 2f 10     ~............./.
     e34:	0b 12 02 12 13 12 fb 11 f6 11 50 10 4b 10 46 10     ..........P.K.F.
     e44:	41 10 3c 10 36 10 30 10 e2 11 2f 10 3f 12 37 12     A.<.6.0.../.?.7.
     e54:	4e 14 49 14 46 14 3c 14 32 14 92 10 8a 10 85 10     N.I.F.<.2.......
     e64:	2a 12 25 12 1c 12 7b 11 f7 15 6f 11 d7 14 d3 14     *.%...{...o.....
     e74:	cd 14 c4 14 2f 10 2f 10 23 15 20 15 aa 10 b1 10     ...././.#. .....
     e84:	a0 10 2f 10 2f 10 d2 11 cb 11 55 17 43 17 30 17     .././.....U.C.0.
     e94:	1e 17 08 17 f9 16 e5 16 d1 16 c3 16 b4 16 a5 16     ................
     ea4:	96 16 87 16 78 16 69 16 5a 16 46 16 2d 16 14 16     ....x.i.Z.F.-...
     eb4:	2f 10 2f 10 50 10 4b 10 61 10 66 10 6b 10 70 10     /./.P.K.a.f.k.p.
     ec4:	e2 11 13 12 0b 12 02 12 fb 11 f6 11 f1 11 ec 11     ................
     ed4:	e7 11 e2 11 db 11 d5 11 bb 14 b4 14 ae 11 98 10     ................
     ee4:	85 10 37 11 2b 11 2f 10 e8 10 df 10 d6 10 d2 10     ..7.+./.........
     ef4:	c9 10 c1 10 2f 10 2f 10 2f 10 8b 17 b2 11 50 11     ..../././.....P.
     f04:	42 11 3d 11 23 11 18 11 2f 10 ba 10 b1 10 2f 10     B.=.#.../...../.
     f14:	2f 10 2f 10 0a 16 04 16 00 16 17 15 7e 14 0d 15     /./.........~...
     f24:	02 15 f3 14 e8 14 dc 14 2f 10 2f 10 a7 14 9d 14     .......././.....
     f34:	95 14 88 14 51 14 54 10 74 14 6a 14 5e 14 54 10     ....Q.T.t.j.^.T.
     f44:	2f 10 2f 10 de 15 d6 15 c8 15 bb 15 ad 15 a2 15     /./.............
     f54:	99 15 90 15 81 15 73 15 64 15 58 15 51 15 4a 15     ......s.d.X.Q.J.
     f64:	3d 15 31 15 27 15 e6 15 2f 10 2f 10 2a 14 1f 14     =.1.'..././.*...
     f74:	0e 14 01 14 f6 13 e6 13 d6 13 c7 13 b7 13 a7 13     ................
     f84:	97 13 87 13 77 13 67 13 59 13 4b 13 3c 13 2d 13     ....w.g.Y.K.<.-.
     f94:	20 13 13 13 07 13 fb 12 ef 12 e2 12 d8 12 ce 12      ...............
     fa4:	c1 12 b6 12 a9 12 9e 12 91 12 b6 12 84 12 9e 12     ................
     fb4:	2f 10 2f 10 3f 12 37 12 31 12 2f 10 13 11 0e 11     /./.?.7.1./.....
     fc4:	09 11 04 11 ff 10 fa 10 f5 10 f0 10 13 12 0b 12     ................
     fd4:	02 12 fb 11 f6 11 f1 11 ec 11 e7 11 7b 12 71 12     ............{.q.
     fe4:	69 12 61 12 58 12 50 12 47 12 e2 11 3f 12 37 12     i.a.X.P.G...?.7.
     ff4:	31 12 2f 10 2f 10 66 11 5d 11 9b 11 95 11 89 11     1././.f.].......
    1004:	a7 17 a1 17 17 15 98 17 96 17 94 17 80 10 7c 10     ..............|.
    1014:	75 10                                               u.

00001016 <VBAT39>:
    1016:	33 2e 39 56 00                                      3.9V.

0000101b <VBAT38>:
    101b:	33 2e 38 56 00                                      3.8V.

00001020 <VBAT37>:
    1020:	33 2e 37 56 00                                      3.7V.

00001025 <VBAT36>:
    1025:	33 2e 36 56 00                                      3.6V.

0000102a <VBAT35>:
    102a:	33 2e 35 56 00                                      3.5V.

0000102f <Dummy0>:
	...

00001030 <MPU6050LPF7>:
    1030:	32 36 30 48 7a 00                                   260Hz.

00001036 <MPU6050LPF6>:
    1036:	31 38 34 48 7a 00                                   184Hz.

0000103c <MPU6050LPF5>:
    103c:	39 34 48 7a 00                                      94Hz.

00001041 <MPU6050LPF4>:
    1041:	34 34 48 7a 00                                      44Hz.

00001046 <MPU6050LPF3>:
    1046:	32 31 48 7a 00                                      21Hz.

0000104b <MPU6050LPF2>:
    104b:	31 30 48 7a 00                                      10Hz.

00001050 <MPU6050LPF1>:
    1050:	35 48 7a 00                                         5Hz.

00001054 <GeneralText10>:
    1054:	4d 50 55 36 30 35 30 20 4c 50 46 3a 00              MPU6050 LPF:.

00001061 <SWLPF4>:
    1061:	31 37 48 7a 00                                      17Hz.

00001066 <SWLPF3>:
    1066:	32 37 48 7a 00                                      27Hz.

0000106b <SWLPF2>:
    106b:	33 38 48 7a 00                                      38Hz.

00001070 <SWLPF1>:
    1070:	36 37 48 7a 00                                      67Hz.

00001075 <Random12>:
    1075:	73 69 67 6e 61 6c 00                                signal.

0000107c <Random11>:
    107c:	6c 6f 77 00                                         low.

00001080 <Random10>:
    1080:	68 69 67 68 00                                      high.

00001085 <Random1>:
    1085:	48 69 67 68 00                                      High.

0000108a <Safety2>:
    108a:	41 72 6d 61 62 6c 65 00                             Armable.

00001092 <Safety1>:
    1092:	41 72 6d 65 64 00                                   Armed.

00001098 <GeneralText5>:
    1098:	53 79 6e 63 20 52 43 00                             Sync RC.

000010a0 <MixerItem16>:
    10a0:	52 65 76 53 63 61 6c 65 64 00                       RevScaled.

000010aa <MixerItem15>:
    10aa:	53 63 61 6c 65 64 00                                Scaled.

000010b1 <MixerItem12>:
    10b1:	52 65 76 65 72 73 65 64 00                          Reversed.

000010ba <MixerItem11>:
    10ba:	4e 6f 72 6d 61 6c 00                                Normal.

000010c1 <MixerMenuItem7>:
    10c1:	50 69 74 63 68 55 70 00                             PitchUp.

000010c9 <MixerMenuItem6>:
    10c9:	53 69 64 65 77 61 79 73 00                          Sideways.

000010d2 <MixerMenuItem5>:
    10d2:	41 66 74 00                                         Aft.

000010d6 <MixerMenuItem4>:
    10d6:	49 6e 76 65 72 74 65 64 00                          Inverted.

000010df <MixerMenuItem3>:
    10df:	56 65 72 74 69 63 61 6c 00                          Vertical.

000010e8 <MixerMenuItem2>:
    10e8:	46 6f 72 77 61 72 64 00                             Forward.

000010f0 <MOUT8>:
    10f0:	4f 55 54 38 00                                      OUT8.

000010f5 <MOUT7>:
    10f5:	4f 55 54 37 00                                      OUT7.

000010fa <MOUT6>:
    10fa:	4f 55 54 36 00                                      OUT6.

000010ff <MOUT5>:
    10ff:	4f 55 54 35 00                                      OUT5.

00001104 <MOUT4>:
    1104:	4f 55 54 34 00                                      OUT4.

00001109 <MOUT3>:
    1109:	4f 55 54 33 00                                      OUT3.

0000110e <MOUT2>:
    110e:	4f 55 54 32 00                                      OUT2.

00001113 <MOUT1>:
    1113:	4f 55 54 31 00                                      OUT1.

00001118 <Status5>:
    1118:	28 44 69 73 61 72 6d 65 64 29 00                    (Disarmed).

00001123 <Status4>:
    1123:	28 41 72 6d 65 64 29 00                             (Armed).

0000112b <Status2>:
    112b:	66 6f 72 20 73 74 61 74 75 73 2e 00                 for status..

00001137 <Status0>:
    1137:	50 72 65 73 73 00                                   Press.

0000113d <WizardText2>:
    113d:	44 6f 6e 65 00                                      Done.

00001142 <WizardText1>:
    1142:	48 6f 6c 64 20 61 73 20 73 68 6f 77 6e 00           Hold as shown.

00001150 <WizardText0>:
    1150:	4e 6f 20 52 58 20 73 69 67 6e 61 6c 00              No RX signal.

0000115d <PText6>:
    115d:	73 65 74 74 69 6e 67 73 00                          settings.

00001166 <PText5>:
    1166:	55 70 64 61 74 69 6e 67 00                          Updating.

0000116f <PText4>:
    116f:	43 61 6c 2e 20 66 61 69 6c 65 64 00                 Cal. failed.

0000117b <PText3>:
    117b:	45 53 43 20 43 61 6c 69 62 72 61 74 65 00           ESC Calibrate.

00001189 <PText2>:
    1189:	48 6f 6c 64 20 73 74 65 61 64 79 00                 Hold steady.

00001195 <PText1>:
    1195:	52 65 73 65 74 00                                   Reset.

0000119b <PText0>:
    119b:	4f 70 65 6e 41 65 72 6f 32 00                       OpenAero2.

000011a5 <Disarmed>:
    11a5:	44 69 73 61 72 6d 65 64 00                          Disarmed.

000011ae <ErrorText10>:
    11ae:	4c 6f 77 00                                         Low.

000011b2 <Status3>:
    11b2:	42 61 74 74 65 72 79 00                             Battery.

000011ba <ErrorText7>:
    11ba:	4d 6f 64 65 6c 00                                   Model.

000011c0 <ErrorText6>:
    11c0:	4c 6f 73 74 00                                      Lost.

000011c5 <ErrorText5>:
    11c5:	45 72 72 6f 72 00                                   Error.

000011cb <ErrorText4>:
    11cb:	53 69 67 6e 61 6c 00                                Signal.

000011d2 <ErrorText3>:
    11d2:	4e 6f 00                                            No.

000011d5 <ChannelRef12>:
    11d5:	45 6c 65 76 2e 00                                   Elev..

000011db <ChannelRef10>:
    11db:	54 68 72 6f 74 2e 00                                Throt..

000011e2 <ChannelRef8>:
    11e2:	4e 6f 6e 65 00                                      None.

000011e7 <ChannelRef7>:
    11e7:	41 55 58 33 00                                      AUX3.

000011ec <ChannelRef6>:
    11ec:	41 55 58 32 00                                      AUX2.

000011f1 <ChannelRef5>:
    11f1:	41 55 58 31 00                                      AUX1.

000011f6 <ChannelRef4>:
    11f6:	47 65 61 72 00                                      Gear.

000011fb <ChannelRef3>:
    11fb:	52 75 64 64 65 72 00                                Rudder.

00001202 <ChannelRef2>:
    1202:	45 6c 65 76 61 74 6f 72 00                          Elevator.

0000120b <ChannelRef1>:
    120b:	41 69 6c 65 72 6f 6e 00                             Aileron.

00001213 <ChannelRef0>:
    1213:	54 68 72 6f 74 74 6c 65 00                          Throttle.

0000121c <MixerItem62>:
    121c:	53 71 72 74 53 69 6e 65 00                          SqrtSine.

00001225 <MixerItem61>:
    1225:	53 69 6e 65 00                                      Sine.

0000122a <MixerItem60>:
    122a:	4c 69 6e 65 61 72 00                                Linear.

00001231 <MixerItem49>:
    1231:	4d 6f 74 6f 72 00                                   Motor.

00001237 <MixerItem41>:
    1237:	44 2e 53 65 72 76 6f 00                             D.Servo.

0000123f <MixerItem40>:
    123f:	41 2e 53 65 72 76 6f 00                             A.Servo.

00001247 <MixerItem81>:
    1247:	41 4c 20 50 69 74 63 68 00                          AL Pitch.

00001250 <MixerItem80>:
    1250:	41 4c 20 52 6f 6c 6c 00                             AL Roll.

00001258 <MixerItem74>:
    1258:	41 63 63 50 69 74 63 68 00                          AccPitch.

00001261 <MixerItem73>:
    1261:	41 63 63 52 6f 6c 6c 00                             AccRoll.

00001269 <MixerItem72>:
    1269:	47 79 72 6f 59 61 77 00                             GyroYaw.

00001271 <MixerItem71>:
    1271:	47 79 72 6f 50 69 74 63 68 00                       GyroPitch.

0000127b <MixerItem70>:
    127b:	47 79 72 6f 52 6f 6c 6c 00                          GyroRoll.

00001284 <MixerItem31>:
    1284:	50 32 20 53 6f 75 72 63 65 20 42 3a 00              P2 Source B:.

00001291 <MixerItem21>:
    1291:	50 31 20 53 6f 75 72 63 65 20 42 3a 00              P1 Source B:.

0000129e <MixerItem30>:
    129e:	50 32 20 56 6f 6c 75 6d 65 3a 00                    P2 Volume:.

000012a9 <MixerItem29>:
    12a9:	50 32 20 53 6f 75 72 63 65 20 41 3a 00              P2 Source A:.

000012b6 <MixerItem2>:
    12b6:	50 31 20 56 6f 6c 75 6d 65 3a 00                    P1 Volume:.

000012c1 <MixerItem0>:
    12c1:	50 31 20 53 6f 75 72 63 65 20 41 3a 00              P1 Source A:.

000012ce <MixerItem43>:
    12ce:	50 32 20 5a 20 61 63 63 3a 00                       P2 Z acc:.

000012d8 <MixerItem42>:
    12d8:	50 31 20 5a 20 61 63 63 3a 00                       P1 Z acc:.

000012e2 <MixerItem28>:
    12e2:	50 32 20 50 69 74 63 68 20 41 4c 3a 00              P2 Pitch AL:.

000012ef <MixerItem3>:
    12ef:	50 31 20 50 69 74 63 68 20 41 4c 00                 P1 Pitch AL.

000012fb <MixerItem27>:
    12fb:	50 32 20 52 6f 6c 6c 20 41 4c 3a 00                 P2 Roll AL:.

00001307 <MixerItem7>:
    1307:	50 31 20 52 6f 6c 6c 20 41 4c 3a 00                 P1 Roll AL:.

00001313 <MixerItem26>:
    1313:	50 32 20 59 61 77 20 67 79 72 6f 3a 00              P2 Yaw gyro:.

00001320 <MixerItem6>:
    1320:	50 31 20 59 61 77 20 67 79 72 6f 3a 00              P1 Yaw gyro:.

0000132d <MixerItem25>:
    132d:	50 32 20 50 69 74 63 68 20 67 79 72 6f 3a 00        P2 Pitch gyro:.

0000133c <MixerItem5>:
    133c:	50 31 20 50 69 74 63 68 20 67 79 72 6f 3a 00        P1 Pitch gyro:.

0000134b <MixerItem24>:
    134b:	50 32 20 52 6f 6c 6c 20 67 79 72 6f 3a 00           P2 Roll gyro:.

00001359 <MixerItem4>:
    1359:	50 31 20 52 6f 6c 6c 20 67 79 72 6f 3a 00           P1 Roll gyro:.

00001367 <MixerItem56>:
    1367:	50 32 20 52 75 64 2e 20 76 6f 6c 75 6d 65 3a 00     P2 Rud. volume:.

00001377 <MixerItem53>:
    1377:	50 31 20 52 75 64 2e 20 76 6f 6c 75 6d 65 3a 00     P1 Rud. volume:.

00001387 <MixerItem55>:
    1387:	50 32 20 45 6c 65 2e 20 76 6f 6c 75 6d 65 3a 00     P2 Ele. volume:.

00001397 <MixerItem52>:
    1397:	50 31 20 45 6c 65 2e 20 76 6f 6c 75 6d 65 3a 00     P1 Ele. volume:.

000013a7 <MixerItem54>:
    13a7:	50 32 20 41 69 6c 2e 20 76 6f 6c 75 6d 65 3a 00     P2 Ail. volume:.

000013b7 <MixerItem51>:
    13b7:	50 31 20 41 69 6c 2e 20 76 6f 6c 75 6d 65 3a 00     P1 Ail. volume:.

000013c7 <Mixeritem50>:
    13c7:	54 68 72 6f 74 74 6c 65 20 63 75 72 76 65 00        Throttle curve.

000013d6 <MixerItem33>:
    13d6:	50 32 20 54 68 72 2e 20 76 6f 6c 75 6d 65 3a 00     P2 Thr. volume:.

000013e6 <MixerItem23>:
    13e6:	50 31 20 54 68 72 2e 20 76 6f 6c 75 6d 65 3a 00     P1 Thr. volume:.

000013f6 <MixerItem34>:
    13f6:	50 32 20 4f 66 66 73 65 74 3a 00                    P2 Offset:.

00001401 <MixerItem35>:
    1401:	50 31 2e 6e 20 4f 66 66 73 65 74 3a 00              P1.n Offset:.

0000140e <MixerItem36>:
    140e:	50 31 2e 6e 20 25 20 6f 66 20 74 72 61 6e 73 3a     P1.n % of trans:
	...

0000141f <MixerItem20>:
    141f:	50 31 20 4f 66 66 73 65 74 3a 00                    P1 Offset:.

0000142a <MixerItem1>:
    142a:	44 65 76 69 63 65 3a 00                             Device:.

00001432 <P5text>:
    1432:	50 31 2e 6e 20 2d 20 50 32 00                       P1.n - P2.

0000143c <P4text>:
    143c:	50 31 20 2d 20 50 31 2e 6e 00                       P1 - P1.n.

00001446 <P3text>:
    1446:	50 32 00                                            P2.

00001449 <P2text>:
    1449:	50 31 2e 6e 00                                      P1.n.

0000144e <P1text>:
    144e:	50 31 00                                            P1.

00001451 <BattMenuItem2>:
    1451:	4c 6f 77 20 56 20 41 6c 61 72 6d 3a 00              Low V Alarm:.

0000145e <GeneralText7>:
    145e:	41 4c 20 63 6f 72 72 65 63 74 3a 00                 AL correct:.

0000146a <GeneralText16>:
    146a:	47 79 72 6f 20 4c 50 46 3a 00                       Gyro LPF:.

00001474 <GeneralText6>:
    1474:	41 63 63 2e 20 4c 50 46 3a 00                       Acc. LPF:.

0000147e <GeneralText3>:
    147e:	50 57 4d 20 72 61 74 65 3a 00                       PWM rate:.

00001488 <GeneralText2>:
    1488:	44 69 73 61 72 6d 20 74 69 6d 65 3a 00              Disarm time:.

00001495 <AutoMenuItem2>:
    1495:	53 61 66 65 74 79 3a 00                             Safety:.

0000149d <Contrast>:
    149d:	43 6f 6e 74 72 61 73 74 3a 00                       Contrast:.

000014a7 <MixerMenuItem0>:
    14a7:	4f 72 69 65 6e 74 61 74 69 6f 6e 3a 00              Orientation:.

000014b4 <RCMenuItem7>:
    14b4:	46 75 74 61 62 61 00                                Futaba.

000014bb <RCMenuItem6>:
    14bb:	4a 52 2c 53 70 6b 74 6d 00                          JR,Spktm.

000014c4 <RXMode3>:
    14c4:	53 70 65 6b 74 72 75 6d 00                          Spektrum.

000014cd <RXMode2>:
    14cd:	53 2d 42 75 73 00                                   S-Bus.

000014d3 <RXMode1>:
    14d3:	50 57 4d 00                                         PWM.

000014d7 <RXMode0>:
    14d7:	43 50 50 4d 00                                      CPPM.

000014dc <Transition_P1n>:
    14dc:	54 72 61 6e 73 2e 20 50 31 6e 3a 00                 Trans. P1n:.

000014e8 <Transition>:
    14e8:	54 72 61 6e 73 69 74 69 6f 6e 00                    Transition.

000014f3 <RCMenuItem2>:
    14f3:	50 72 6f 66 69 6c 65 20 43 68 61 6e 2e 3a 00        Profile Chan.:.

00001502 <RCMenuItem0>:
    1502:	43 68 2e 20 6f 72 64 65 72 3a 00                    Ch. order:.

0000150d <RCMenuItem20>:
    150d:	50 57 4d 20 73 79 6e 63 3a 00                       PWM sync:.

00001517 <RCMenuItem1>:
    1517:	52 58 20 74 79 70 65 3a 00                          RX type:.

00001520 <AutoMenuItem15>:
    1520:	4f 4e 00                                            ON.

00001523 <AutoMenuItem11>:
    1523:	4f 46 46 00                                         OFF.

00001527 <StabMenuItem30>:
    1527:	59 61 77 20 74 72 69 6d 3a 00                       Yaw trim:.

00001531 <StabMenuItem9>:
    1531:	59 61 77 20 49 20 72 61 74 65 3a 00                 Yaw I rate:.

0000153d <StabMenuItem12>:
    153d:	59 61 77 20 49 20 4c 69 6d 69 74 3a 00              Yaw I Limit:.

0000154a <StabMenuItem8>:
    154a:	59 61 77 20 49 3a 00                                Yaw I:.

00001551 <StabMenuItem7>:
    1551:	59 61 77 20 50 3a 00                                Yaw P:.

00001558 <AutoMenuItem8>:
    1558:	50 69 74 63 68 20 74 72 69 6d 3a 00                 Pitch trim:.

00001564 <AutoMenuItem21>:
    1564:	50 69 74 63 68 20 41 75 74 6f 4c 76 6c 3a 00        Pitch AutoLvl:.

00001573 <StabMenuItem6>:
    1573:	50 69 74 63 68 20 49 20 72 61 74 65 3a 00           Pitch I rate:.

00001581 <StabMenuItem11>:
    1581:	50 69 74 63 68 20 49 20 4c 69 6d 69 74 3a 00        Pitch I Limit:.

00001590 <StabMenuItem5>:
    1590:	50 69 74 63 68 20 49 3a 00                          Pitch I:.

00001599 <AutoMenuItem4>:
    1599:	50 69 74 63 68 20 50 3a 00                          Pitch P:.

000015a2 <AutoMenuItem7>:
    15a2:	52 6f 6c 6c 20 74 72 69 6d 3a 00                    Roll trim:.

000015ad <AutoMenuItem20>:
    15ad:	52 6f 6c 6c 20 41 75 74 6f 4c 76 6c 3a 00           Roll AutoLvl:.

000015bb <StabMenuItem3>:
    15bb:	52 6f 6c 6c 20 49 20 72 61 74 65 3a 00              Roll I rate:.

000015c8 <StabMenuItem10>:
    15c8:	52 6f 6c 6c 20 49 20 4c 69 6d 69 74 3a 00           Roll I Limit:.

000015d6 <StabMenuItem2>:
    15d6:	52 6f 6c 6c 20 49 3a 00                             Roll I:.

000015de <AutoMenuItem1>:
    15de:	52 6f 6c 6c 20 50 3a 00                             Roll P:.

000015e6 <StabMenuItem13>:
    15e6:	41 63 63 20 56 65 72 74 20 50 3a 00                 Acc Vert P:.

000015f2 <SensorMenuItem2>:
    15f2:	49 6e 76 2e 00                                      Inv..

000015f7 <SensorMenuItem1>:
    15f7:	43 61 6c 2e 00                                      Cal..

000015fc <PText19>:
    15fc:	41 63 63 00                                         Acc.

00001600 <PText18>:
    1600:	59 61 77 00                                         Yaw.

00001604 <PText17>:
    1604:	50 69 74 63 68 00                                   Pitch.

0000160a <PText16>:
    160a:	52 6f 6c 6c 00                                      Roll.

0000160f <PText15>:
    160f:	47 79 72 6f 00                                      Gyro.

00001614 <MainMenuItem23>:
    1614:	31 39 2e 20 50 6f 73 2e 20 53 65 72 76 6f 20 74     19. Pos. Servo t
    1624:	72 76 6c 2e 20 28 25 29 00                          rvl. (%).

0000162d <MainMenuItem22>:
    162d:	31 38 2e 20 4e 65 67 2e 20 53 65 72 76 6f 20 74     18. Neg. Servo t
    163d:	72 76 6c 2e 20 28 25 29 00                          rvl. (%).

00001646 <MainMenuItem20>:
    1646:	31 37 2e 20 53 65 72 76 6f 20 64 69 72 65 63 74     17. Servo direct
    1656:	69 6f 6e 00                                         ion.

0000165a <MainMenuItem18>:
    165a:	31 36 2e 20 4f 55 54 38 20 4d 69 78 65 72 00        16. OUT8 Mixer.

00001669 <MainMenuItem17>:
    1669:	31 35 2e 20 4f 55 54 37 20 4d 69 78 65 72 00        15. OUT7 Mixer.

00001678 <MainMenuItem16>:
    1678:	31 34 2e 20 4f 55 54 36 20 4d 69 78 65 72 00        14. OUT6 Mixer.

00001687 <MainMenuItem15>:
    1687:	31 33 2e 20 4f 55 54 35 20 4d 69 78 65 72 00        13. OUT5 Mixer.

00001696 <MainMenuItem14>:
    1696:	31 32 2e 20 4f 55 54 34 20 4d 69 78 65 72 00        12. OUT4 Mixer.

000016a5 <MainMenuItem13>:
    16a5:	31 31 2e 20 4f 55 54 33 20 4d 69 78 65 72 00        11. OUT3 Mixer.

000016b4 <MainMenuItem12>:
    16b4:	31 30 2e 20 4f 55 54 32 20 4d 69 78 65 72 00        10. OUT2 Mixer.

000016c3 <MainMenuItem11>:
    16c3:	39 2e 20 4f 55 54 31 20 4d 69 78 65 72 00           9. OUT1 Mixer.

000016d1 <MainMenuItem3>:
    16d1:	38 2e 20 46 6c 69 67 68 74 20 70 72 6f 66 69 6c     8. Flight profil
    16e1:	65 20 32 00                                         e 2.

000016e5 <MainMenuItem2>:
    16e5:	37 2e 20 46 6c 69 67 68 74 20 70 72 6f 66 69 6c     7. Flight profil
    16f5:	65 20 31 00                                         e 1.

000016f9 <MainMenuItem10>:
    16f9:	36 2e 20 4c 65 76 65 6c 20 6d 65 74 65 72 00        6. Level meter.

00001708 <MainMenuItem8>:
    1708:	35 2e 20 53 65 6e 73 6f 72 20 63 61 6c 69 62 72     5. Sensor calibr
    1718:	61 74 69 6f 6e 00                                   ation.

0000171e <MainMenuItem7>:
    171e:	34 2e 20 53 74 69 63 6b 20 70 6f 6c 61 72 69 74     4. Stick polarit
    172e:	79 00                                               y.

00001730 <MainMenuItem9>:
    1730:	33 2e 20 52 65 63 65 69 76 65 72 20 69 6e 70 75     3. Receiver inpu
    1740:	74 73 00                                            ts.

00001743 <MainMenuItem1>:
    1743:	32 2e 20 52 65 63 65 69 76 65 72 20 73 65 74 75     2. Receiver setu
    1753:	70 00                                               p.

00001755 <MainMenuItem0>:
    1755:	31 2e 20 47 65 6e 65 72 61 6c 00                    1. General.

00001760 <MenuFrame8>:
    1760:	53 61 76 65 00                                      Save.

00001765 <MenuFrame7>:
    1765:	44 65 66 2e 00                                      Def..

0000176a <MenuFrame6>:
    176a:	42 61 63 6b 00                                      Back.

0000176f <MenuFrame5>:
    176f:	4d 65 6e 75 00                                      Menu.

00001774 <MenuFrame1>:
    1774:	45 00                                               E.

00001776 <MenuFrame4>:
    1776:	44 00                                               D.

00001778 <MenuFrame3>:
    1778:	43 00                                               C.

0000177a <MenuFrame2>:
    177a:	42 00                                               B.

0000177c <MenuFrame0>:
    177c:	41 00                                               A.

0000177e <StatusText9>:
    177e:	4a 69 74 74 65 72 3a 00                             Jitter:.

00001786 <StatusText8>:
    1786:	50 6f 73 3a 00                                      Pos:.

0000178b <StatusText7>:
    178b:	42 61 74 74 65 72 79 3a 00                          Battery:.

00001794 <StatusText5>:
    1794:	30 00                                               0.

00001796 <StatusText4>:
    1796:	2e 00                                               ..

00001798 <StatusText3>:
    1798:	50 72 6f 66 69 6c 65 3a 00                          Profile:.

000017a1 <StatusText1>:
    17a1:	4d 6f 64 65 3a 00                                   Mode:.

000017a7 <StatusText0>:
    17a7:	56 65 72 73 69 6f 6e 3a 20 31 2e 31 20 42 39 00     Version: 1.1 B9.

000017b7 <Gyro_Pol>:
    17b7:	01 01 01 01 01 01 01 ff ff ff ff 01 01 ff 01 ff     ................
    17c7:	01 01                                               ..

000017c9 <Gyro_RPY_Order>:
    17c9:	00 01 02 01 02 00 00 01 02 00 01 02 01 00 02 02     ................
    17d9:	01 00                                               ..

000017db <LPF_lookup_HS>:
    17db:	00 00 38 41 00 00 c0 40 9a 99 49 40 29 5c ef 3f     ..8A...@..I@)\.?
    17eb:	71 3d aa 3f 9a 99 99 3f 3d 0a 97 3f 00 00 80 3f     q=.?...?=..?...?

000017fb <LPF_lookup>:
    17fb:	33 33 97 41 33 33 1b 41 cd cc 9c 40 cd cc 2c 40     33.A33.A...@..,@
    180b:	85 eb d1 3f 0a d7 a3 3f 48 e1 9a 3f 00 00 80 3f     ...?...?H..?...?

0000181b <lines>:
    181b:	03 0f 1b 27                                         ...'

0000181f <flight_menu_ranges>:
    181f:	00 7f 01 00 3c 00 7f 01 00 28 00 7d 01 00 0a 00     ....<....(.}....
    182f:	04 01 00 02 00 7f 01 00 05 81 7f 01 00 00 00 7f     ................
    183f:	01 00 3c 00 7f 01 00 28 00 7d 01 00 0a 00 04 01     ..<....(.}......
    184f:	00 02 00 7f 01 00 05 81 7f 01 00 00 00 7f 01 00     ................
    185f:	50 00 7f 01 00 00 00 7d 01 00 00 00 04 01 00 01     P......}........
    186f:	81 7f 01 00 00 00 7f 01 00 00                       ..........

00001879 <FlightMenuText>:
	...

0000188b <mixer_menu_ranges>:
    188b:	00 02 01 01 00 83 7d 01 00 00 01 63 01 00 32 83     ......}....c..2.
    189b:	7d 01 00 00 83 7d 01 00 00 00 7d 01 00 64 00 7d     }....}....}..d.}
    18ab:	01 00 64 00 02 01 01 00 83 7d 01 00 00 83 7d 01     ..d......}....}.
    18bb:	00 00 83 7d 01 00 00 83 7d 01 00 00 83 7d 01 00     ...}....}....}..
    18cb:	00 83 7d 01 00 00 00 02 01 01 00 00 02 01 01 00     ..}.............
    18db:	00 02 01 01 00 00 02 01 01 00 00 02 01 01 00 00     ................
    18eb:	02 01 01 00 00 02 01 01 00 00 02 01 01 00 00 02     ................
    18fb:	01 01 00 00 02 01 01 00 00 02 01 01 00 00 02 01     ................
    190b:	01 00 00 0f 01 01 0f 83 7d 01 00 00 00 0f 01 01     ........}.......
    191b:	0f 83 7d 01 00 00 00 0f 01 01 0f 83 7d 01 00 00     ..}.........}...
    192b:	00 0f 01 01 0f 83 7d 01 00 00                       ......}...

00001935 <MixerMenuText>:
    1935:	e2 00 00 00 00 00 00 38 00 00 00 00 00 00 44 44     .......8......DD
    1945:	44 44 44 44 44 44 44 44 44 44 ee 00 ee 00 ee 00     DDDDDDDDDD......
    1955:	ee 00                                               ..

00001957 <servo_menu_ranges>:
    1957:	00 01 01 01 00 83 00 01 03 9c 00 7d 01 03 64        ...........}..d

00001966 <ServoMenuText>:
    1966:	8d 8d 8d 8d 8d 8d 8d 8d 00 00 00 00 00 00 00 00     ................
	...

0000197e <rc_menu_ranges>:
    197e:	00 03 01 01 01 00 02 01 01 00 00 04 01 01 04 00     ................
    198e:	01 01 01 00 00 07 01 01 04 00 28 01 00 00 01 63     ..........(....c
    199e:	01 00 32 00 00 00 00 00 00 00 00 00 00 00 05 01     ..2.............
    19ae:	01 00 1c 32 01 00 24 00 01 01 01 01 00 7f 01 00     ...2..$.........
    19be:	1e 00 05 01 01 00 00 06 01 01 02 00 07 01 01 02     ................
    19ce:	00 07 01 01 07 01 0a 01 00 07                       ..........

000019d8 <RCMenuText>:
    19d8:	3e 76 69 74 69 00 00 00 00 7c 00 35 00 00 25 25     >viti....|.5..%%
    19e8:	25 00                                               %.

000019ea <SQRTSIN>:
    19ea:	00 0d 12 16 19 1c 1f 21 23 26 28 29 2b 2d 2f 30     .......!#&()+-/0
    19fa:	32 33 35 36 38 39 3a 3b 3d 3e 3f 40 41 42 43 44     235689:;=>?@ABCD
    1a0a:	45 46 47 48 49 4a 4b 4c 4d 4d 4e 4f 50 51 51 52     EFGHIJKLMMNOPQQR
    1a1a:	53 53 54 55 55 56 57 57 58 58 59 59 5a 5a 5b 5b     SSTUUVWWXXYYZZ[[
    1a2a:	5c 5c 5d 5d 5e 5e 5e 5f 5f 5f 60 60 60 61 61 61     \\]]^^^___```aaa
    1a3a:	62 62 62 62 62 63 63 63 63 63 63 63 64 64 64 64     bbbbbcccccccdddd
    1a4a:	64 64 64 64 64                                      ddddd

00001a4f <SIN>:
    1a4f:	00 02 03 05 06 08 0a 0b 0d 0e 10 11 13 14 16 17     ................
    1a5f:	19 1a 1c 1d 1f 20 22 23 25 26 28 29 2b 2c 2d 2f     ..... "#%&()+,-/
    1a6f:	30 32 33 34 36 37 38 3a 3b 3c 3d 3f 40 41 42 43     0234678:;<=?@ABC
    1a7f:	44 46 47 48 49 4a 4b 4c 4d 4e 4f 50 51 52 53 54     DFGHIJKLMNOPQRST
    1a8f:	54 55 56 57 58 58 59 5a 5a 5b 5c 5c 5d 5e 5e 5f     TUVWXXYZZ[\\]^^_
    1a9f:	5f 60 60 60 61 61 62 62 62 63 63 63 63 63 64 64     _```aabbbcccccdd
    1aaf:	64 64 64 64 64                                      ddddd

00001ab4 <__ctors_end>:
    1ab4:	11 24       	eor	r1, r1
    1ab6:	1f be       	out	0x3f, r1	; 63
    1ab8:	cf ef       	ldi	r28, 0xFF	; 255
    1aba:	d0 e1       	ldi	r29, 0x10	; 16
    1abc:	de bf       	out	0x3e, r29	; 62
    1abe:	cd bf       	out	0x3d, r28	; 61

00001ac0 <wdt_init>:
// WDT reset prototype. Placed before main() in code to prevent wdt re-firing
void wdt_init(void) __attribute__((naked)) __attribute__((section(".init3")));

void wdt_init(void)
{
	MCUSR = 0;
    1ac0:	14 be       	out	0x34, r1	; 52
	wdt_disable();
    1ac2:	88 e1       	ldi	r24, 0x18	; 24
    1ac4:	0f b6       	in	r0, 0x3f	; 63
    1ac6:	f8 94       	cli
    1ac8:	80 93 60 00 	sts	0x0060, r24
    1acc:	10 92 60 00 	sts	0x0060, r1
    1ad0:	0f be       	out	0x3f, r0	; 63

00001ad2 <__do_copy_data>:
    1ad2:	15 e0       	ldi	r17, 0x05	; 5
    1ad4:	a0 e0       	ldi	r26, 0x00	; 0
    1ad6:	b1 e0       	ldi	r27, 0x01	; 1
    1ad8:	ee e3       	ldi	r30, 0x3E	; 62
    1ada:	f2 e9       	ldi	r31, 0x92	; 146
    1adc:	02 c0       	rjmp	.+4      	; 0x1ae2 <__do_copy_data+0x10>
    1ade:	05 90       	lpm	r0, Z+
    1ae0:	0d 92       	st	X+, r0
    1ae2:	ac 30       	cpi	r26, 0x0C	; 12
    1ae4:	b1 07       	cpc	r27, r17
    1ae6:	d9 f7       	brne	.-10     	; 0x1ade <__do_copy_data+0xc>

00001ae8 <__do_clear_bss>:
    1ae8:	28 e0       	ldi	r18, 0x08	; 8
    1aea:	ac e0       	ldi	r26, 0x0C	; 12
    1aec:	b5 e0       	ldi	r27, 0x05	; 5
    1aee:	01 c0       	rjmp	.+2      	; 0x1af2 <.do_clear_bss_start>

00001af0 <.do_clear_bss_loop>:
    1af0:	1d 92       	st	X+, r1

00001af2 <.do_clear_bss_start>:
    1af2:	ad 33       	cpi	r26, 0x3D	; 61
    1af4:	b2 07       	cpc	r27, r18
    1af6:	e1 f7       	brne	.-8      	; 0x1af0 <.do_clear_bss_loop>
    1af8:	0e 94 d3 19 	call	0x33a6	; 0x33a6 <main>
    1afc:	0c 94 1d 49 	jmp	0x923a	; 0x923a <_exit>

00001b00 <__bad_interrupt>:
    1b00:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00001b04 <glcd_delay>:
;*************************************************************************

	.global glcd_delay
	.func   glcd_delay
glcd_delay:
	nop					// 1 5 * 50ns = 250ns = 4MHz
    1b04:	00 00       	nop
	ret					// 4 (5 cycles)
    1b06:	08 95       	ret

00001b08 <glcd_delay_1us>:
;*************************************************************************

	.global glcd_delay_1us
	.func   glcd_delay_1us
glcd_delay_1us:
	rcall	glcd_delay
    1b08:	fd df       	rcall	.-6      	; 0x1b04 <glcd_delay>
	rcall	glcd_delay
    1b0a:	fc df       	rcall	.-8      	; 0x1b04 <glcd_delay>
	rcall	glcd_delay
    1b0c:	fb df       	rcall	.-10     	; 0x1b04 <glcd_delay>
	rcall	glcd_delay
    1b0e:	fa df       	rcall	.-12     	; 0x1b04 <glcd_delay>
	ret
    1b10:	08 95       	ret

00001b12 <bind_master>:
;*************************************************************************

	.global bind_master
	.func   bind_master
bind_master:
	push	YL			//	1
    1b12:	cf 93       	push	r28
	push	XL			//	1
    1b14:	af 93       	push	r26

	ldi		XL,0x5		// 	1 Master is 5 pulses
    1b16:	a5 e0       	ldi	r26, 0x05	; 5

00001b18 <master_loop>:
master_loop:
	cbi 	BIND		//	2
    1b18:	58 98       	cbi	0x0b, 0	; 11
	ldi		YL,0x76		// 	1 		118us
    1b1a:	c6 e7       	ldi	r28, 0x76	; 118
	call	VarDelay	//	4
    1b1c:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <VarDelay>
	sbi		BIND		//	2
    1b20:	58 9a       	sbi	0x0b, 0	; 11
	ldi		YL,0x7A		// 	1 		122us
    1b22:	ca e7       	ldi	r28, 0x7A	; 122
	call	VarDelay	//	4
    1b24:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <VarDelay>
	dec		XL			//	1
    1b28:	aa 95       	dec	r26
	brne	master_loop	//  2 1
    1b2a:	b1 f7       	brne	.-20     	; 0x1b18 <master_loop>

	pop		XL			//	  1
    1b2c:	af 91       	pop	r26
	pop		YL			//	  1
    1b2e:	cf 91       	pop	r28
	ret					//	  4 
    1b30:	08 95       	ret

00001b32 <VarDelay>:
; 5 cycles to configure and call, 4 to return and 2 to change bit afterwards = 11
; 20 cycles makes 1.0us
;*************************************************************************

VarDelay:
	rjmp .+0			// 2
    1b32:	00 c0       	rjmp	.+0      	; 0x1b34 <VarDelay+0x2>
	rjmp .+0			// 2
    1b34:	00 c0       	rjmp	.+0      	; 0x1b36 <VarDelay+0x4>
	rjmp .+0			// 2
    1b36:	00 c0       	rjmp	.+0      	; 0x1b38 <VarDelay+0x6>
	rjmp .+0			// 2
    1b38:	00 c0       	rjmp	.+0      	; 0x1b3a <VarDelay+0x8>
	rjmp .+0			// 2
    1b3a:	00 c0       	rjmp	.+0      	; 0x1b3c <VarDelay+0xa>
	rjmp .+0			// 2
    1b3c:	00 c0       	rjmp	.+0      	; 0x1b3e <VarDelay+0xc>
	rjmp .+0			// 2
    1b3e:	00 c0       	rjmp	.+0      	; 0x1b40 <VarDelay+0xe>
	rjmp .+0			// 2
    1b40:	00 c0       	rjmp	.+0      	; 0x1b42 <VarDelay+0x10>
	nop					// 1
    1b42:	00 00       	nop
	dec 	YL			// 1
    1b44:	ca 95       	dec	r28
	brne	VarDelay	// 2 1
    1b46:	a9 f7       	brne	.-22     	; 0x1b32 <VarDelay>
	ret					//   4 
    1b48:	08 95       	ret

00001b4a <output_servo_ppm_asm>:

	.global output_servo_ppm_asm
	.func   output_servo_ppm_asm
output_servo_ppm_asm:
// Copy r22 (containing ServoFlag) into r15
	mov		r15, r22	
    1b4a:	f6 2e       	mov	r15, r22
// Save regs
	push	ZL			// 2			
    1b4c:	ef 93       	push	r30
	push	ZH			// 2
    1b4e:	ff 93       	push	r31
	push	XL			// 2
    1b50:	af 93       	push	r26
	push	XH			// 2
    1b52:	bf 93       	push	r27
	push	YL			// 2
    1b54:	cf 93       	push	r28
	push	YH			// 2
    1b56:	df 93       	push	r29
	push	16			// 2
    1b58:	0f 93       	push	r16
	push	17			// 2
    1b5a:	1f 93       	push	r17
	push	18			// 2
    1b5c:	2f 93       	push	r18
	push	19			// 2
    1b5e:	3f 93       	push	r19
	push	20			// 2
    1b60:	4f 93       	push	r20
	push	21			// 2
    1b62:	5f 93       	push	r21
	push	22			// 2
    1b64:	6f 93       	push	r22
	push	23			// 2
    1b66:	7f 93       	push	r23

// Get start address of ServoOut[0] into Z
	mov		ZL, r24		// 1 Low byte
    1b68:	e8 2f       	mov	r30, r24
	mov		ZH, r25		// 1 High byte
    1b6a:	f9 2f       	mov	r31, r25

// Save initial address for later
	push	24			// 2
    1b6c:	8f 93       	push	r24
	push	25			// 2
    1b6e:	9f 93       	push	r25

// Trim 16-bit values to suit individual needs, 
// Save result and copy lower 3 bits to r16 to r23 (96 cycles)

// M1
	ld		XL, Z+ 		// 2			Load XL with data at address in Z
    1b70:	a1 91       	ld	r26, Z+
	ld		XH, Z+		// 2			Load XH with data at address in Z+1
    1b72:	b1 91       	ld	r27, Z+
	subi	XL,	0xc6	// 1 			Trim servo pulse (was 34a)
    1b74:	a6 5c       	subi	r26, 0xC6	; 198
	sbci 	XH,	0x00	// 1
    1b76:	b0 40       	sbci	r27, 0x00	; 0
	push	XL 			// 2			Save trimmed value to the stack
    1b78:	af 93       	push	r26
	push	XH 			// 2
    1b7a:	bf 93       	push	r27
	andi	XL,	0x07	// 1			And all but first 3 bits
    1b7c:	a7 70       	andi	r26, 0x07	; 7
	mov		r23,XL		// 1 (12)		Copy 8-bit result to regs
    1b7e:	7a 2f       	mov	r23, r26
// M2
	ld		XL, Z+
    1b80:	a1 91       	ld	r26, Z+
	ld		XH, Z+
    1b82:	b1 91       	ld	r27, Z+
	subi	XL,	0xbe  // was 2e6
    1b84:	ae 5b       	subi	r26, 0xBE	; 190
	sbci 	XH,	0x00
    1b86:	b0 40       	sbci	r27, 0x00	; 0
	push	XL 		
    1b88:	af 93       	push	r26
	push	XH 		
    1b8a:	bf 93       	push	r27
	andi	XL,	0x07
    1b8c:	a7 70       	andi	r26, 0x07	; 7
	mov		r22,XL	
    1b8e:	6a 2f       	mov	r22, r26
// M3
	ld		XL, Z+
    1b90:	a1 91       	ld	r26, Z+
	ld		XH, Z+
    1b92:	b1 91       	ld	r27, Z+
	subi	XL,	0xb6 // was 282
    1b94:	a6 5b       	subi	r26, 0xB6	; 182
	sbci 	XH,	0x00
    1b96:	b0 40       	sbci	r27, 0x00	; 0
	push	XL 		
    1b98:	af 93       	push	r26
	push	XH 		
    1b9a:	bf 93       	push	r27
	andi	XL,	0x07
    1b9c:	a7 70       	andi	r26, 0x07	; 7
	mov		r21,XL	
    1b9e:	5a 2f       	mov	r21, r26
// M4
	ld		XL, Z+
    1ba0:	a1 91       	ld	r26, Z+
	ld		XH, Z+
    1ba2:	b1 91       	ld	r27, Z+
	subi	XL,	0xae // was 21e
    1ba4:	ae 5a       	subi	r26, 0xAE	; 174
	sbci 	XH,	0x00
    1ba6:	b0 40       	sbci	r27, 0x00	; 0
	push	XL 	
    1ba8:	af 93       	push	r26
	push	XH 	
    1baa:	bf 93       	push	r27
	andi	XL,	0x07
    1bac:	a7 70       	andi	r26, 0x07	; 7
	mov		r20,XL	
    1bae:	4a 2f       	mov	r20, r26
// M5
	ld		XL, Z+
    1bb0:	a1 91       	ld	r26, Z+
	ld		XH, Z+
    1bb2:	b1 91       	ld	r27, Z+
	subi	XL,	0xa5 // was 1ba
    1bb4:	a5 5a       	subi	r26, 0xA5	; 165
	sbci 	XH,	0x00
    1bb6:	b0 40       	sbci	r27, 0x00	; 0
	push	XL 	
    1bb8:	af 93       	push	r26
	push	XH 	
    1bba:	bf 93       	push	r27
	andi	XL,	0x07
    1bbc:	a7 70       	andi	r26, 0x07	; 7
	mov		r19,XL	
    1bbe:	3a 2f       	mov	r19, r26
// M6
	ld		XL, Z+
    1bc0:	a1 91       	ld	r26, Z+
	ld		XH, Z+
    1bc2:	b1 91       	ld	r27, Z+
	subi	XL,	0x9D // was 155
    1bc4:	ad 59       	subi	r26, 0x9D	; 157
	sbci 	XH,	0x00
    1bc6:	b0 40       	sbci	r27, 0x00	; 0
	push	XL 	
    1bc8:	af 93       	push	r26
	push	XH 	
    1bca:	bf 93       	push	r27
	andi	XL,	0x07
    1bcc:	a7 70       	andi	r26, 0x07	; 7
	mov		r18,XL
    1bce:	2a 2f       	mov	r18, r26
// M7
	ld		XL, Z+
    1bd0:	a1 91       	ld	r26, Z+
	ld		XH, Z+
    1bd2:	b1 91       	ld	r27, Z+
	subi	XL,	0x95 // was f1
    1bd4:	a5 59       	subi	r26, 0x95	; 149
	sbci 	XH,	0x00
    1bd6:	b0 40       	sbci	r27, 0x00	; 0
	push	XL 	
    1bd8:	af 93       	push	r26
	push	XH 
    1bda:	bf 93       	push	r27
	andi	XL,	0x07
    1bdc:	a7 70       	andi	r26, 0x07	; 7
	mov		r17,XL
    1bde:	1a 2f       	mov	r17, r26
// M8
	ld		XL, Z+
    1be0:	a1 91       	ld	r26, Z+
	ld		XH, Z+
    1be2:	b1 91       	ld	r27, Z+
	subi	XL,	0x8d // Was 8d
    1be4:	ad 58       	subi	r26, 0x8D	; 141
	sbci 	XH,	0x00
    1be6:	b0 40       	sbci	r27, 0x00	; 0
	push	XL
    1be8:	af 93       	push	r26
	push	XH 
    1bea:	bf 93       	push	r27
	andi	XL,	0x07
    1bec:	a7 70       	andi	r26, 0x07	; 7
	mov		r16,XL
    1bee:	0a 2f       	mov	r16, r26
// Time out lower 3 bits of pulse value (Zero to 7us)
// Each chunk is always executed in 1+10+1+147 = 159 cycles or 7.95us
// This does affect the inter-pulse delay, but not the pulsewidth.

// M1
	mov		r25,r23		// 1
    1bf0:	97 2f       	mov	r25, r23
	call	DelayHigh	// 10 (where r25 = 7)
    1bf2:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <DelayHigh>
	sbrc	r15,0		// 1 (False),	2 if true
    1bf6:	f0 fc       	sbrc	r15, 0
	sbi 	M1			// 1,			0
    1bf8:	46 9a       	sbi	0x08, 6	; 8
	call	DelayLow	// 7 + 140 (where r25 = 0)
    1bfa:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <DelayLow>
	//call    pwm_delay   // 100us
	//call    pwm_delay

// M2
	mov		r25,r22
    1bfe:	96 2f       	mov	r25, r22
	call	DelayHigh
    1c00:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <DelayHigh>
	sbrc	r15,1		// Don't switch on if if ServoFlag bit is cleared
    1c04:	f1 fc       	sbrc	r15, 1
	sbi 	M2
    1c06:	44 9a       	sbi	0x08, 4	; 8
	call	DelayLow
    1c08:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <DelayLow>
	//call    pwm_delay   // 100us
	//call    pwm_delay

// M3
	mov		r25,r21
    1c0c:	95 2f       	mov	r25, r21
	call	DelayHigh
    1c0e:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <DelayHigh>
	sbrc	r15,2		// Don't switch on if if ServoFlag bit is cleared
    1c12:	f2 fc       	sbrc	r15, 2
	sbi 	M3
    1c14:	42 9a       	sbi	0x08, 2	; 8
	call	DelayLow
    1c16:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <DelayLow>
	//call    pwm_delay   // 100us
	//call    pwm_delay

// M4
	mov		r25,r20
    1c1a:	94 2f       	mov	r25, r20
	call	DelayHigh
    1c1c:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <DelayHigh>
	sbrc	r15,3		// Don't switch on if if ServoFlag bit is cleared
    1c20:	f3 fc       	sbrc	r15, 3
	sbi 	M4
    1c22:	43 9a       	sbi	0x08, 3	; 8
	call	DelayLow
    1c24:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <DelayLow>
	//call    pwm_delay   // 100us
	//call    pwm_delay

// M5
	mov		r25,r19
    1c28:	93 2f       	mov	r25, r19
	call	DelayHigh
    1c2a:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <DelayHigh>
	sbrc	r15,4		// Don't switch on if if ServoFlag bit is cleared
    1c2e:	f4 fc       	sbrc	r15, 4
	sbi 	M5
    1c30:	14 9a       	sbi	0x02, 4	; 2
	call	DelayLow
    1c32:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <DelayLow>
	//call    pwm_delay   // 100us
	//call    pwm_delay

// M6
	mov		r25,r18
    1c36:	92 2f       	mov	r25, r18
	call	DelayHigh
    1c38:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <DelayHigh>
	sbrc	r15,5		// Don't switch on if if ServoFlag bit is cleared
    1c3c:	f5 fc       	sbrc	r15, 5
	sbi 	M6
    1c3e:	15 9a       	sbi	0x02, 5	; 2
	call	DelayLow
    1c40:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <DelayLow>
	//call    pwm_delay   // 100us
	//call    pwm_delay

// M7
	mov		r25,r17
    1c44:	91 2f       	mov	r25, r17
	call	DelayHigh
    1c46:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <DelayHigh>
	sbrc	r15,6		// Don't switch on if if ServoFlag bit is cleared
    1c4a:	f6 fc       	sbrc	r15, 6
	sbi 	M7
    1c4c:	45 9a       	sbi	0x08, 5	; 8
	call	DelayLow
    1c4e:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <DelayLow>
	//call    pwm_delay   // 100us
	//call    pwm_delay

// M8
	mov		r25,r16
    1c52:	90 2f       	mov	r25, r16
	call	DelayHigh
    1c54:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <DelayHigh>
	sbrc	r15,7		// Don't switch on if if ServoFlag bit is cleared
    1c58:	f7 fc       	sbrc	r15, 7
	sbi 	M8			// 1
    1c5a:	47 9a       	sbi	0x08, 7	; 8
	call	DelayLow
    1c5c:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <DelayLow>
// At this point, the largest pulse that we can generate is 256 * 8 = 2.048ms
// However we would like to be able to generate up to 2.100ms (150%) - an extra 52us
// So we can fluff it out another 200us so that we can subtract enough to keep r16 under 0xff or 256 :)
// With this setup, M1 can go down to 850 and M8 can go up to 2150

	call    pwm_delay   // 150us
    1c60:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <pwm_delay>
	call    pwm_delay
    1c64:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <pwm_delay>
	call    pwm_delay
    1c68:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <pwm_delay>

// Copy trimmed array data into regs
// This now represents steps of 8us chunks
	pop		XH			// M8
    1c6c:	bf 91       	pop	r27
	pop		XL
    1c6e:	af 91       	pop	r26
	call	shuffle_8
    1c70:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <shuffle_8>
	mov		r16,XL
    1c74:	0a 2f       	mov	r16, r26
	pop		XH			// M7
    1c76:	bf 91       	pop	r27
	pop		XL
    1c78:	af 91       	pop	r26
	call	shuffle_8
    1c7a:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <shuffle_8>
	mov		r17,XL
    1c7e:	1a 2f       	mov	r17, r26
	pop		XH			// M6
    1c80:	bf 91       	pop	r27
	pop		XL
    1c82:	af 91       	pop	r26
	call	shuffle_8
    1c84:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <shuffle_8>
	mov		r18,XL
    1c88:	2a 2f       	mov	r18, r26
	pop		XH			// M5
    1c8a:	bf 91       	pop	r27
	pop		XL
    1c8c:	af 91       	pop	r26
	call	shuffle_8
    1c8e:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <shuffle_8>
	mov		r19,XL
    1c92:	3a 2f       	mov	r19, r26
	pop		XH			// M4
    1c94:	bf 91       	pop	r27
	pop		XL
    1c96:	af 91       	pop	r26
	call	shuffle_8
    1c98:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <shuffle_8>
	mov		r20,XL
    1c9c:	4a 2f       	mov	r20, r26
	pop		XH			// M3
    1c9e:	bf 91       	pop	r27
	pop		XL
    1ca0:	af 91       	pop	r26
	call	shuffle_8
    1ca2:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <shuffle_8>
	mov		r21,XL
    1ca6:	5a 2f       	mov	r21, r26
	pop		XH			// M2
    1ca8:	bf 91       	pop	r27
	pop		XL
    1caa:	af 91       	pop	r26
	call	shuffle_8
    1cac:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <shuffle_8>
	mov		r22,XL
    1cb0:	6a 2f       	mov	r22, r26
	pop		XH			// M1
    1cb2:	bf 91       	pop	r27
	pop		XL
    1cb4:	af 91       	pop	r26
	call	shuffle_8
    1cb6:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <shuffle_8>
	mov		r23,XL
    1cba:	7a 2f       	mov	r23, r26

// Loop prep
	ldi 	YL,0xFF		// 1			Set loop count to ffh or 255 (255 * 8us = 2040us + 150us = 2190us)
    1cbc:	cf ef       	ldi	r28, 0xFF	; 255
	ldi		YH,0x00		// 1
    1cbe:	d0 e0       	ldi	r29, 0x00	; 0
	clr		0			// 1 (7)
    1cc0:	00 24       	eor	r0, r0

00001cc2 <nloop>:

// Ninja loop - 7 cycles each side (8 x 7 = 56 + 6 to loop + 98 pad = 160 cycles)
// 20 cyles = 1us, 160 cycles = 8us

nloop:
	subi	r23,1		// 1 			ServoOut1
    1cc2:	71 50       	subi	r23, 0x01	; 1
	brne	j1			// 2	1	
    1cc4:	19 f4       	brne	.+6      	; 0x1ccc <j1>
	cbi 	M1			// 		2		Clear output M1 if done (+5 = 1448 = 72.4us = 48)
    1cc6:	46 98       	cbi	0x08, 6	; 8
	jmp		jj1			//		3
    1cc8:	0c 94 68 0e 	jmp	0x1cd0	; 0x1cd0 <jj1>

00001ccc <j1>:
j1:
	rjmp 	.+0			// 2
    1ccc:	00 c0       	rjmp	.+0      	; 0x1cce <j1+0x2>
	rjmp 	.+0			// 2
    1cce:	00 c0       	rjmp	.+0      	; 0x1cd0 <jj1>

00001cd0 <jj1>:
jj1:
	subi	r22,1		// 1			ServoOut2
    1cd0:	61 50       	subi	r22, 0x01	; 1
	brne	j2			// 2	1
    1cd2:	19 f4       	brne	.+6      	; 0x1cda <j2>
	cbi 	M2			// 		2		Clear output M2 if done (+11 = 1285 = 64.25us = 40)
    1cd4:	44 98       	cbi	0x08, 4	; 8
	jmp		jj2			//		3
    1cd6:	0c 94 6f 0e 	jmp	0x1cde	; 0x1cde <jj2>

00001cda <j2>:
j2:
	rjmp	.+0
    1cda:	00 c0       	rjmp	.+0      	; 0x1cdc <j2+0x2>
	rjmp	.+0
    1cdc:	00 c0       	rjmp	.+0      	; 0x1cde <jj2>

00001cde <jj2>:
jj2:
	subi	r21,1
    1cde:	51 50       	subi	r21, 0x01	; 1
	brne	j3
    1ce0:	19 f4       	brne	.+6      	; 0x1ce8 <j3>
	cbi 	M3
    1ce2:	42 98       	cbi	0x08, 2	; 8
	jmp		jj3
    1ce4:	0c 94 76 0e 	jmp	0x1cec	; 0x1cec <jj3>

00001ce8 <j3>:
j3:
	rjmp	.+0
    1ce8:	00 c0       	rjmp	.+0      	; 0x1cea <j3+0x2>
	rjmp	.+0
    1cea:	00 c0       	rjmp	.+0      	; 0x1cec <jj3>

00001cec <jj3>:
jj3:
	subi 	r20,1
    1cec:	41 50       	subi	r20, 0x01	; 1
	brne	j4
    1cee:	19 f4       	brne	.+6      	; 0x1cf6 <j4>
	cbi 	M4
    1cf0:	43 98       	cbi	0x08, 3	; 8
	jmp		jj4	
    1cf2:	0c 94 7d 0e 	jmp	0x1cfa	; 0x1cfa <jj4>

00001cf6 <j4>:
j4:
	rjmp 	.+0
    1cf6:	00 c0       	rjmp	.+0      	; 0x1cf8 <j4+0x2>
	rjmp 	.+0
    1cf8:	00 c0       	rjmp	.+0      	; 0x1cfa <jj4>

00001cfa <jj4>:
jj4:
	subi	r19,1
    1cfa:	31 50       	subi	r19, 0x01	; 1
	brne	j5
    1cfc:	19 f4       	brne	.+6      	; 0x1d04 <j5>
	cbi 	M5
    1cfe:	14 98       	cbi	0x02, 4	; 2
	jmp		jj5
    1d00:	0c 94 84 0e 	jmp	0x1d08	; 0x1d08 <jj5>

00001d04 <j5>:
j5:
	rjmp 	.+0
    1d04:	00 c0       	rjmp	.+0      	; 0x1d06 <j5+0x2>
	rjmp 	.+0
    1d06:	00 c0       	rjmp	.+0      	; 0x1d08 <jj5>

00001d08 <jj5>:
jj5:
	subi	r18,1
    1d08:	21 50       	subi	r18, 0x01	; 1
	brne	j6
    1d0a:	19 f4       	brne	.+6      	; 0x1d12 <j6>
	cbi 	M6
    1d0c:	15 98       	cbi	0x02, 5	; 2
	jmp		jj6
    1d0e:	0c 94 8b 0e 	jmp	0x1d16	; 0x1d16 <jj6>

00001d12 <j6>:
j6:
	rjmp 	.+0
    1d12:	00 c0       	rjmp	.+0      	; 0x1d14 <j6+0x2>
	rjmp	.+0
    1d14:	00 c0       	rjmp	.+0      	; 0x1d16 <jj6>

00001d16 <jj6>:
jj6:
	subi	r17,1
    1d16:	11 50       	subi	r17, 0x01	; 1
	brne	j7
    1d18:	19 f4       	brne	.+6      	; 0x1d20 <j7>
	cbi 	M7
    1d1a:	45 98       	cbi	0x08, 5	; 8
	jmp		jj7
    1d1c:	0c 94 92 0e 	jmp	0x1d24	; 0x1d24 <jj7>

00001d20 <j7>:
j7:
	rjmp 	.+0
    1d20:	00 c0       	rjmp	.+0      	; 0x1d22 <j7+0x2>
	rjmp 	.+0
    1d22:	00 c0       	rjmp	.+0      	; 0x1d24 <jj7>

00001d24 <jj7>:
jj7:
	subi 	r16,1		// ServoOut 8
    1d24:	01 50       	subi	r16, 0x01	; 1
	brne	j8
    1d26:	19 f4       	brne	.+6      	; 0x1d2e <j8>
	cbi 	M8
    1d28:	47 98       	cbi	0x08, 7	; 8
	jmp		jj8
    1d2a:	0c 94 99 0e 	jmp	0x1d32	; 0x1d32 <jj8>

00001d2e <j8>:
j8:
	rjmp 	.+0
    1d2e:	00 c0       	rjmp	.+0      	; 0x1d30 <j8+0x2>
	rjmp 	.+0
    1d30:	00 c0       	rjmp	.+0      	; 0x1d32 <jj8>

00001d32 <jj8>:
jj8:
	call	pad_100_delay // (100)
    1d32:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <pad_100_delay>

	subi 	YL,1		// 1
    1d36:	c1 50       	subi	r28, 0x01	; 1
	sbc 	YH,0		// 1
    1d38:	d0 09       	sbc	r29, r0
	breq	skiploop	// 1	2		Loop until zero - 1 false 2 true
    1d3a:	11 f0       	breq	.+4      	; 0x1d40 <skiploop>
	jmp		nloop		// 3			Can't reach nloop with a brne alone
    1d3c:	0c 94 61 0e 	jmp	0x1cc2	; 0x1cc2 <nloop>

00001d40 <skiploop>:

skiploop:
	pop		25			// 		2		Restore regs
    1d40:	9f 91       	pop	r25
	pop		24			// 		2
    1d42:	8f 91       	pop	r24
	pop		23			//		2
    1d44:	7f 91       	pop	r23
	pop		22			//		2
    1d46:	6f 91       	pop	r22
	pop		21			//		2
    1d48:	5f 91       	pop	r21
	pop		20			//		2
    1d4a:	4f 91       	pop	r20
	pop		19			//		2
    1d4c:	3f 91       	pop	r19
	pop		18			//		2
    1d4e:	2f 91       	pop	r18
	pop		17			//		2
    1d50:	1f 91       	pop	r17
	pop		16			//		2
    1d52:	0f 91       	pop	r16
	pop		YH			//		2
    1d54:	df 91       	pop	r29
	pop		YL			//		2
    1d56:	cf 91       	pop	r28
	pop		XH			//		2
    1d58:	bf 91       	pop	r27
	pop		XL			//		2
    1d5a:	af 91       	pop	r26
	pop		ZH			// 		2
    1d5c:	ff 91       	pop	r31
	pop		ZL			//		2
    1d5e:	ef 91       	pop	r30

	ret					//		4
    1d60:	08 95       	ret

00001d62 <output_servo_ppm_asm3>:
;*************************************************************************

	.global output_servo_ppm_asm3
	.func   output_servo_ppm_asm3
output_servo_ppm_asm3:
	push	16			// Save regs
    1d62:	0f 93       	push	r16
	push	17
    1d64:	1f 93       	push	r17
	push	18
    1d66:	2f 93       	push	r18

	//ldi 	16,0x34		// 1			Set loop count to 834h or 2100
	ldi 	16,0xFC		// 1			Set loop count to 8FCh or 2300(us)
    1d68:	0c ef       	ldi	r16, 0xFC	; 252
	ldi		17,0x08	
    1d6a:	18 e0       	ldi	r17, 0x08	; 8
	clr		0
    1d6c:	00 24       	eor	r0, r0

00001d6e <jump_table>:

jump_table:
	cpi		r24,0x00	; 0				
    1d6e:	80 30       	cpi	r24, 0x00	; 0
	breq	in1
    1d70:	71 f0       	breq	.+28     	; 0x1d8e <in1>
	cpi		r24,0x01	; 1
    1d72:	81 30       	cpi	r24, 0x01	; 1
	breq	in2
    1d74:	79 f0       	breq	.+30     	; 0x1d94 <in2>
	cpi		r24,0x02	; 2
    1d76:	82 30       	cpi	r24, 0x02	; 2
	breq	in3
    1d78:	81 f0       	breq	.+32     	; 0x1d9a <in3>
	cpi		r24,0x03	; 3
    1d7a:	83 30       	cpi	r24, 0x03	; 3
	breq	in4
    1d7c:	89 f0       	breq	.+34     	; 0x1da0 <in4>
	cpi		r24,0x04	; 4
    1d7e:	84 30       	cpi	r24, 0x04	; 4
	breq	in5
    1d80:	91 f0       	breq	.+36     	; 0x1da6 <in5>
	cpi		r24,0x05	; 5
    1d82:	85 30       	cpi	r24, 0x05	; 5
	breq	in6
    1d84:	99 f0       	breq	.+38     	; 0x1dac <in6>
	cpi		r24,0x06	; 6
    1d86:	86 30       	cpi	r24, 0x06	; 6
	breq	in7
    1d88:	a1 f0       	breq	.+40     	; 0x1db2 <in7>
	cpi		r24,0x07	; 7
    1d8a:	87 30       	cpi	r24, 0x07	; 7
	breq	in8
    1d8c:	a9 f0       	breq	.+42     	; 0x1db8 <in8>

00001d8e <in1>:

in1:sbi 	M1			// Set output high
    1d8e:	46 9a       	sbi	0x08, 6	; 8
	jmp		loopin
    1d90:	0c 94 df 0e 	jmp	0x1dbe	; 0x1dbe <loopin>

00001d94 <in2>:
in2:sbi 	M2
    1d94:	44 9a       	sbi	0x08, 4	; 8
	jmp		loopin
    1d96:	0c 94 df 0e 	jmp	0x1dbe	; 0x1dbe <loopin>

00001d9a <in3>:
in3:sbi 	M3	
    1d9a:	42 9a       	sbi	0x08, 2	; 8
	jmp		loopin
    1d9c:	0c 94 df 0e 	jmp	0x1dbe	; 0x1dbe <loopin>

00001da0 <in4>:
in4:sbi 	M4
    1da0:	43 9a       	sbi	0x08, 3	; 8
	jmp		loopin
    1da2:	0c 94 df 0e 	jmp	0x1dbe	; 0x1dbe <loopin>

00001da6 <in5>:
in5:sbi 	M5
    1da6:	14 9a       	sbi	0x02, 4	; 2
	jmp		loopin
    1da8:	0c 94 df 0e 	jmp	0x1dbe	; 0x1dbe <loopin>

00001dac <in6>:
in6:sbi 	M6
    1dac:	15 9a       	sbi	0x02, 5	; 2
	jmp		loopin
    1dae:	0c 94 df 0e 	jmp	0x1dbe	; 0x1dbe <loopin>

00001db2 <in7>:
in7:sbi 	M7
    1db2:	45 9a       	sbi	0x08, 5	; 8
	jmp		loopin
    1db4:	0c 94 df 0e 	jmp	0x1dbe	; 0x1dbe <loopin>

00001db8 <in8>:
in8:sbi 	M8
    1db8:	47 9a       	sbi	0x08, 7	; 8
	jmp		loopin
    1dba:	0c 94 df 0e 	jmp	0x1dbe	; 0x1dbe <loopin>

00001dbe <loopin>:

// Loop - 20 cycles = 1us
loopin:
						// <---------	Left column is skip execution path
	rjmp .+0			// 2 	<----	Right column is pulse end execution path
    1dbe:	00 c0       	rjmp	.+0      	; 0x1dc0 <loopin+0x2>
	rjmp .+0			// 2
    1dc0:	00 c0       	rjmp	.+0      	; 0x1dc2 <loopin+0x4>
	rjmp .+0			// 2
    1dc2:	00 c0       	rjmp	.+0      	; 0x1dc4 <loopin+0x6>
	rjmp .+0			// 2
    1dc4:	00 c0       	rjmp	.+0      	; 0x1dc6 <loopin+0x8>
	rjmp .+0			// 2
    1dc6:	00 c0       	rjmp	.+0      	; 0x1dc8 <loopin+0xa>
	rjmp .+0			// 2
    1dc8:	00 c0       	rjmp	.+0      	; 0x1dca <loopin+0xc>

	subi	r22,1		// 1 			Time servo pulse
    1dca:	61 50       	subi	r22, 0x01	; 1
	sbc 	r23,0		// 1
    1dcc:	70 09       	sbc	r23, r0
	brne	loopout		// 2	1
    1dce:	19 f4       	brne	.+6      	; 0x1dd6 <loopout>

// Clear outputs if done
	ldi		r18,0x00	 // 1
    1dd0:	20 e0       	ldi	r18, 0x00	; 0
	out 	SERVO_OUT_KK20,r18// 1			Boom.
    1dd2:	28 b9       	out	0x08, r18	; 8
	out 	SERVO_OUT_KK21,r18// 1			KK2.1 has a couple of outputs on Port A also.
    1dd4:	22 b9       	out	0x02, r18	; 2

00001dd6 <loopout>:

// Exit
loopout:
	subi 	16,1		// 1			+4 cycles = total 20 cycles
    1dd6:	01 50       	subi	r16, 0x01	; 1
	sbc 	17,0		// 1
    1dd8:	10 09       	sbc	r17, r0
	brne	loopin		// 2	1		Loop until zero
    1dda:	89 f7       	brne	.-30     	; 0x1dbe <loopin>

	pop		18
    1ddc:	2f 91       	pop	r18
	pop		17			// Restore regs
    1dde:	1f 91       	pop	r17
	pop		16
    1de0:	0f 91       	pop	r16
	ret	
    1de2:	08 95       	ret

00001de4 <pwm_delay>:
;*************************************************************************	
; void pwm_delay(void) 50us output spacing delay (8 cycle loop - 400ns)
;*************************************************************************

pwm_delay:				// 4 to call
	push	16			// 1
    1de4:	0f 93       	push	r16
	ldi 	16,0x65		// 1
    1de6:	05 e6       	ldi	r16, 0x65	; 101

00001de8 <pwm_loop>:

pwm_loop:
	rjmp .+0			// 2
    1de8:	00 c0       	rjmp	.+0      	; 0x1dea <pwm_loop+0x2>
	rjmp .+0			// 2
    1dea:	00 c0       	rjmp	.+0      	; 0x1dec <pwm_loop+0x4>
	rjmp .+0			// 2
    1dec:	00 c0       	rjmp	.+0      	; 0x1dee <pwm_loop+0x6>
	subi	r16,1		// 1
    1dee:	01 50       	subi	r16, 0x01	; 1
	brne	pwm_loop	// 2  1
    1df0:	d9 f7       	brne	.-10     	; 0x1de8 <pwm_loop>

00001df2 <pwm_exit>:

pwm_exit:
	pop		16			//    1
    1df2:	0f 91       	pop	r16
	ret					//    4 to return
    1df4:	08 95       	ret

00001df6 <pad_100_delay>:
; pad_100_delay 98 cycle padding delay
; Takes 4 to call, so we need 94 cycles burnt here
;*************************************************************************

pad_100_delay:
	push	16			// 		2		Save regs
    1df6:	0f 93       	push	r16
	ldi 	16,0x09		// 		1		Set loop count to 09h or 9
    1df8:	09 e0       	ldi	r16, 0x09	; 9

00001dfa <pad_100>:

pad_100:				//				9 cycles, 8 on last
	rjmp .+0			// 2
    1dfa:	00 c0       	rjmp	.+0      	; 0x1dfc <pad_100+0x2>
	rjmp .+0			// 2			8 x 9cyc + 8 = 80
    1dfc:	00 c0       	rjmp	.+0      	; 0x1dfe <pad_100+0x4>
	rjmp .+0			// 2
    1dfe:	00 c0       	rjmp	.+0      	; 0x1e00 <pad_100+0x6>

	subi 	16,1		// 1
    1e00:	01 50       	subi	r16, 0x01	; 1
	brne	pad_100		// 2	1		Loop until zero	
    1e02:	d9 f7       	brne	.-10     	; 0x1dfa <pad_100>

	nop					// 		1		Trim to precisely the right value
    1e04:	00 00       	nop
	rjmp .+0			// 		2
    1e06:	00 c0       	rjmp	.+0      	; 0x1e08 <pad_100+0xe>
	rjmp .+0			// 		2
    1e08:	00 c0       	rjmp	.+0      	; 0x1e0a <pad_100+0x10>

	pop		16			// 		2		Restore regs
    1e0a:	0f 91       	pop	r16
	ret					// 		4 (94 cycles)
    1e0c:	08 95       	ret

00001e0e <us_delay>:
; void us_delay(void) 1us delay for ninja skills
; Takes 4 to call, 4 to return, so we need 12 cycles burnt here
;*************************************************************************

us_delay:
	rjmp .+0			// 2
    1e0e:	00 c0       	rjmp	.+0      	; 0x1e10 <us_delay+0x2>
	rjmp .+0			// 2
    1e10:	00 c0       	rjmp	.+0      	; 0x1e12 <us_delay+0x4>
	rjmp .+0			// 2
    1e12:	00 c0       	rjmp	.+0      	; 0x1e14 <us_delay+0x6>
	rjmp .+0			// 2
    1e14:	00 c0       	rjmp	.+0      	; 0x1e16 <us_delay+0x8>
	ret					// 4 (16 cycles)
    1e16:	08 95       	ret

00001e18 <shuffle_8>:
;*************************************************************************	
; Space-saving macro-ish suroutines
;*************************************************************************

shuffle_8: // (10 cycles)
	lsr		XH			// 1 Rotate right into carry
    1e18:	b6 95       	lsr	r27
	ror		XL			// 1 Rotate right with carry from MSB
    1e1a:	a7 95       	ror	r26
	lsr		XH			// 1
    1e1c:	b6 95       	lsr	r27
	ror		XL			// 1
    1e1e:	a7 95       	ror	r26
	lsr		XH			// 1
    1e20:	b6 95       	lsr	r27
	ror		XL			// 1
    1e22:	a7 95       	ror	r26
	ret					// 4
    1e24:	08 95       	ret

00001e26 <DelayHigh>:
; 10 and 150 cycles at 1us intervals per value in r26
; 
;*************************************************************************

DelayHigh:				// (0)	(1)	(2+) each extra is +20
	ldi		YL,0x07		// 1	1	1
    1e26:	c7 e0       	ldi	r28, 0x07	; 7
	andi	r25,0x07	
    1e28:	97 70       	andi	r25, 0x07	; 7
	eor		YL,r25		// 1 	1	1
    1e2a:	c9 27       	eor	r28, r25
	breq	LoopHighOut1// 2	1	1
    1e2c:	31 f0       	breq	.+12     	; 0x1e3a <LoopHighOut1>

00001e2e <LoopHigh>:
LoopHigh:
	call    us_delay	// 		16	16
    1e2e:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <us_delay>
	dec 	YL			// 		1	1
    1e32:	ca 95       	dec	r28
	breq	LoopHighOut2// 		2	1/2
    1e34:	09 f0       	breq	.+2      	; 0x1e38 <LoopHighOut2>
	rjmp	LoopHigh	// 			2
    1e36:	fb cf       	rjmp	.-10     	; 0x1e2e <LoopHigh>

00001e38 <LoopHighOut2>:
LoopHighOut2:
	rjmp .+0			// 		2	2
    1e38:	00 c0       	rjmp	.+0      	; 0x1e3a <LoopHighOut1>

00001e3a <LoopHighOut1>:
LoopHighOut1:
	nop					// 1	1	1
    1e3a:	00 00       	nop
    ret					// 4	4	4
    1e3c:	08 95       	ret

00001e3e <DelayLow>:
; regardless of the value of r25
;
;*************************************************************************

DelayLow:				// (0)	(1)	(2+) each extra is +20
	mov		YL,r25		// 1	1	
    1e3e:	c9 2f       	mov	r28, r25
	andi	YL,0x07	
    1e40:	c7 70       	andi	r28, 0x07	; 7
	breq	LoopLowOut1	// 2	1	1
    1e42:	31 f0       	breq	.+12     	; 0x1e50 <LoopLowOut1>

00001e44 <LoopLow>:
LoopLow:
	call    us_delay	//		16	16
    1e44:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <us_delay>
	dec 	YL			//		1	1
    1e48:	ca 95       	dec	r28
	breq	LoopLowOut2	//		2	1/2
    1e4a:	09 f0       	breq	.+2      	; 0x1e4e <LoopLowOut2>
	rjmp	LoopLow		//			2
    1e4c:	fb cf       	rjmp	.-10     	; 0x1e44 <LoopLow>

00001e4e <LoopLowOut2>:
LoopLowOut2:
	rjmp .+0			// 		2	2
    1e4e:	00 c0       	rjmp	.+0      	; 0x1e50 <LoopLowOut1>

00001e50 <LoopLowOut1>:
LoopLowOut1:
    ret					// 4	4	4
    1e50:	08 95       	ret

00001e52 <get_raw_accs>:
//***************************************************************
// Fill accADC with RPY data appropriate to the board orientation
//***************************************************************

void get_raw_accs(void)
{
    1e52:	cf 93       	push	r28
    1e54:	df 93       	push	r29
    1e56:	cd b7       	in	r28, 0x3d	; 61
    1e58:	de b7       	in	r29, 0x3e	; 62
    1e5a:	2c 97       	sbiw	r28, 0x0c	; 12
    1e5c:	0f b6       	in	r0, 0x3f	; 63
    1e5e:	f8 94       	cli
    1e60:	de bf       	out	0x3e, r29	; 62
    1e62:	0f be       	out	0x3f, r0	; 63
    1e64:	cd bf       	out	0x3d, r28	; 61
	// Get data from MPU6050
	uint8_t Accs[6];
	int16_t temp1, temp2;

	// Get the i2c data from the MPU6050
	readI2CbyteArray(MPU60X0_DEFAULT_ADDRESS,MPU60X0_RA_ACCEL_XOUT_H,(uint8_t *)Accs,6);
    1e66:	26 e0       	ldi	r18, 0x06	; 6
    1e68:	ae 01       	movw	r20, r28
    1e6a:	4f 5f       	subi	r20, 0xFF	; 255
    1e6c:	5f 4f       	sbci	r21, 0xFF	; 255
    1e6e:	6b e3       	ldi	r22, 0x3B	; 59
    1e70:	80 ed       	ldi	r24, 0xD0	; 208
    1e72:	0e 94 55 24 	call	0x48aa	; 0x48aa <readI2CbyteArray>

	// Reassemble data into accADC array and down sample to reduce resolution and noise
	// This notation is true to the chip, but not the board orientation

	temp1 = Accs[0] << 8;					// Accel X
    1e76:	89 81       	ldd	r24, Y+1	; 0x01
    1e78:	90 e0       	ldi	r25, 0x00	; 0
    1e7a:	98 2f       	mov	r25, r24
    1e7c:	88 27       	eor	r24, r24
	temp2 = Accs[1];
    1e7e:	2a 81       	ldd	r18, Y+2	; 0x02
	RawADC[ROLL] = (temp1 + temp2) >> 6;
    1e80:	82 0f       	add	r24, r18
    1e82:	91 1d       	adc	r25, r1
    1e84:	36 e0       	ldi	r19, 0x06	; 6
    1e86:	95 95       	asr	r25
    1e88:	87 95       	ror	r24
    1e8a:	3a 95       	dec	r19
    1e8c:	e1 f7       	brne	.-8      	; 0x1e86 <get_raw_accs+0x34>
    1e8e:	98 87       	std	Y+8, r25	; 0x08
    1e90:	8f 83       	std	Y+7, r24	; 0x07

	temp1 = Accs[2] << 8;					// Accel Y
    1e92:	8b 81       	ldd	r24, Y+3	; 0x03
    1e94:	90 e0       	ldi	r25, 0x00	; 0
    1e96:	98 2f       	mov	r25, r24
    1e98:	88 27       	eor	r24, r24
	temp2 = Accs[3];
    1e9a:	2c 81       	ldd	r18, Y+4	; 0x04
	RawADC[PITCH] = -((temp1 + temp2) >> 6);
    1e9c:	82 0f       	add	r24, r18
    1e9e:	91 1d       	adc	r25, r1
    1ea0:	56 e0       	ldi	r21, 0x06	; 6
    1ea2:	95 95       	asr	r25
    1ea4:	87 95       	ror	r24
    1ea6:	5a 95       	dec	r21
    1ea8:	e1 f7       	brne	.-8      	; 0x1ea2 <get_raw_accs+0x50>
    1eaa:	91 95       	neg	r25
    1eac:	81 95       	neg	r24
    1eae:	91 09       	sbc	r25, r1
    1eb0:	9a 87       	std	Y+10, r25	; 0x0a
    1eb2:	89 87       	std	Y+9, r24	; 0x09

	temp1 = Accs[4] << 8;					// Accel Z
    1eb4:	8d 81       	ldd	r24, Y+5	; 0x05
    1eb6:	90 e0       	ldi	r25, 0x00	; 0
    1eb8:	98 2f       	mov	r25, r24
    1eba:	88 27       	eor	r24, r24
	temp2 = Accs[5];
    1ebc:	2e 81       	ldd	r18, Y+6	; 0x06
	RawADC[YAW] = (temp1 + temp2) >> 6;
    1ebe:	82 0f       	add	r24, r18
    1ec0:	91 1d       	adc	r25, r1
    1ec2:	76 e0       	ldi	r23, 0x06	; 6
    1ec4:	95 95       	asr	r25
    1ec6:	87 95       	ror	r24
    1ec8:	7a 95       	dec	r23
    1eca:	e1 f7       	brne	.-8      	; 0x1ec4 <get_raw_accs+0x72>
    1ecc:	9c 87       	std	Y+12, r25	; 0x0c
    1ece:	8b 87       	std	Y+11, r24	; 0x0b

	// Reorient the data as per the board orientation	
	for (i=0; i<NUMBEROFAXIS; i++)
	{
		// Rearrange the sensors
		accADC[i] = RawADC[(int8_t)pgm_read_byte(&ACC_RPY_Order[Config.Orientation][i])];
    1ed0:	20 91 29 06 	lds	r18, 0x0629
    1ed4:	a4 e3       	ldi	r26, 0x34	; 52
    1ed6:	b5 e0       	ldi	r27, 0x05	; 5
    1ed8:	43 e0       	ldi	r20, 0x03	; 3
    1eda:	24 02       	muls	r18, r20
    1edc:	90 01       	movw	r18, r0
    1ede:	11 24       	eor	r1, r1
    1ee0:	80 e0       	ldi	r24, 0x00	; 0
    1ee2:	90 e0       	ldi	r25, 0x00	; 0
    1ee4:	26 53       	subi	r18, 0x36	; 54
    1ee6:	3f 4f       	sbci	r19, 0xFF	; 255
    1ee8:	f9 01       	movw	r30, r18
    1eea:	e8 0f       	add	r30, r24
    1eec:	f9 1f       	adc	r31, r25
    1eee:	e4 91       	lpm	r30, Z
    1ef0:	ee 0f       	add	r30, r30
    1ef2:	ff 0b       	sbc	r31, r31
    1ef4:	41 e0       	ldi	r20, 0x01	; 1
    1ef6:	50 e0       	ldi	r21, 0x00	; 0
    1ef8:	4c 0f       	add	r20, r28
    1efa:	5d 1f       	adc	r21, r29
    1efc:	e4 0f       	add	r30, r20
    1efe:	f5 1f       	adc	r31, r21
    1f00:	46 81       	ldd	r20, Z+6	; 0x06
    1f02:	57 81       	ldd	r21, Z+7	; 0x07
    1f04:	4d 93       	st	X+, r20
    1f06:	5d 93       	st	X+, r21
    1f08:	01 96       	adiw	r24, 0x01	; 1
	temp1 = Accs[4] << 8;					// Accel Z
	temp2 = Accs[5];
	RawADC[YAW] = (temp1 + temp2) >> 6;

	// Reorient the data as per the board orientation	
	for (i=0; i<NUMBEROFAXIS; i++)
    1f0a:	83 30       	cpi	r24, 0x03	; 3
    1f0c:	91 05       	cpc	r25, r1
    1f0e:	61 f7       	brne	.-40     	; 0x1ee8 <get_raw_accs+0x96>
	{
		// Rearrange the sensors
		accADC[i] = RawADC[(int8_t)pgm_read_byte(&ACC_RPY_Order[Config.Orientation][i])];
	}
}
    1f10:	2c 96       	adiw	r28, 0x0c	; 12
    1f12:	0f b6       	in	r0, 0x3f	; 63
    1f14:	f8 94       	cli
    1f16:	de bf       	out	0x3e, r29	; 62
    1f18:	0f be       	out	0x3f, r0	; 63
    1f1a:	cd bf       	out	0x3d, r28	; 61
    1f1c:	df 91       	pop	r29
    1f1e:	cf 91       	pop	r28
    1f20:	08 95       	ret

00001f22 <ReadAcc>:

int16_t accADC[NUMBEROFAXIS];	// Holds Acc ADC values - always in RPY order
int16_t accVert = 0;			// Holds the level-zeroed Z-acc value. Used for height damping in hover only.

void ReadAcc()
{
    1f22:	1f 93       	push	r17
    1f24:	cf 93       	push	r28
    1f26:	df 93       	push	r29
	uint8_t i;

	get_raw_accs();				// Updates accADC[] (RPY)
    1f28:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <get_raw_accs>

	// Use default Config.AccZero for Acc-Z if inverse calibration not done yet
	// Actual zero is held in Config.AccZeroNormZ waiting for inv calibration
	if (!(Config.Main_flags & (1 << inv_cal_done)))
    1f2c:	80 91 a8 07 	lds	r24, 0x07A8
    1f30:	80 fd       	sbrc	r24, 0
    1f32:	05 c0       	rjmp	.+10     	; 0x1f3e <ReadAcc+0x1c>
	{
		Config.AccZero[YAW] = 0;
    1f34:	10 92 90 07 	sts	0x0790, r1
    1f38:	10 92 8f 07 	sts	0x078F, r1
    1f3c:	0e c0       	rjmp	.+28     	; 0x1f5a <ReadAcc+0x38>

	// If inverted cal done, Config.AccZeroNormZ and Config.AccZeroDiff have
	// valid values
	else
	{
		Config.AccZero[YAW] = Config.AccZeroNormZ - Config.AccZeroDiff;
    1f3e:	80 91 91 07 	lds	r24, 0x0791
    1f42:	90 91 92 07 	lds	r25, 0x0792
    1f46:	20 91 95 07 	lds	r18, 0x0795
    1f4a:	30 91 96 07 	lds	r19, 0x0796
    1f4e:	82 1b       	sub	r24, r18
    1f50:	93 0b       	sbc	r25, r19
    1f52:	90 93 90 07 	sts	0x0790, r25
    1f56:	80 93 8f 07 	sts	0x078F, r24
	{
		// Remove offsets from acc outputs
		accADC[i] -= Config.AccZero[i];

		// Change polarity
		accADC[i] *= (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation][i]);
    1f5a:	20 91 29 06 	lds	r18, 0x0629
    1f5e:	cb e8       	ldi	r28, 0x8B	; 139
    1f60:	d7 e0       	ldi	r29, 0x07	; 7
    1f62:	a4 e3       	ldi	r26, 0x34	; 52
    1f64:	b5 e0       	ldi	r27, 0x05	; 5
    1f66:	83 e0       	ldi	r24, 0x03	; 3
    1f68:	28 02       	muls	r18, r24
    1f6a:	90 01       	movw	r18, r0
    1f6c:	11 24       	eor	r1, r1
    1f6e:	80 e0       	ldi	r24, 0x00	; 0
    1f70:	90 e0       	ldi	r25, 0x00	; 0
    1f72:	28 54       	subi	r18, 0x48	; 72
    1f74:	3f 4f       	sbci	r19, 0xFF	; 255
	}

	for (i=0; i < NUMBEROFAXIS; i++)
	{
		// Remove offsets from acc outputs
		accADC[i] -= Config.AccZero[i];
    1f76:	69 91       	ld	r22, Y+
    1f78:	79 91       	ld	r23, Y+
    1f7a:	f9 01       	movw	r30, r18
    1f7c:	e8 0f       	add	r30, r24
    1f7e:	f9 1f       	adc	r31, r25

		// Change polarity
		accADC[i] *= (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation][i]);
    1f80:	14 91       	lpm	r17, Z
	}

	for (i=0; i < NUMBEROFAXIS; i++)
	{
		// Remove offsets from acc outputs
		accADC[i] -= Config.AccZero[i];
    1f82:	4d 91       	ld	r20, X+
    1f84:	5c 91       	ld	r21, X
    1f86:	11 97       	sbiw	r26, 0x01	; 1
    1f88:	46 1b       	sub	r20, r22
    1f8a:	57 0b       	sbc	r21, r23

		// Change polarity
		accADC[i] *= (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation][i]);
    1f8c:	14 03       	mulsu	r17, r20
    1f8e:	b0 01       	movw	r22, r0
    1f90:	15 9f       	mul	r17, r21
    1f92:	70 0d       	add	r23, r0
    1f94:	11 24       	eor	r1, r1
    1f96:	6d 93       	st	X+, r22
    1f98:	7d 93       	st	X+, r23
    1f9a:	01 96       	adiw	r24, 0x01	; 1
	else
	{
		Config.AccZero[YAW] = Config.AccZeroNormZ - Config.AccZeroDiff;
	}

	for (i=0; i < NUMBEROFAXIS; i++)
    1f9c:	83 30       	cpi	r24, 0x03	; 3
    1f9e:	91 05       	cpc	r25, r1
    1fa0:	51 f7       	brne	.-44     	; 0x1f76 <ReadAcc+0x54>
	}

	// Recalculate current accVert using filtered acc value
	// Note that AccSmooth[YAW] is already zeroed around 1G so we have to re-add 
	// the zero back here so that Config.AccZeroNormZ subtracts the correct amount
	 accVert = accSmooth[YAW] + (Config.AccZeroNormZ - Config.AccZero[YAW]);
    1fa2:	60 91 91 07 	lds	r22, 0x0791
    1fa6:	70 91 92 07 	lds	r23, 0x0792
    1faa:	80 91 8f 07 	lds	r24, 0x078F
    1fae:	90 91 90 07 	lds	r25, 0x0790
    1fb2:	68 1b       	sub	r22, r24
    1fb4:	79 0b       	sbc	r23, r25
    1fb6:	88 27       	eor	r24, r24
    1fb8:	77 fd       	sbrc	r23, 7
    1fba:	80 95       	com	r24
    1fbc:	98 2f       	mov	r25, r24
    1fbe:	0e 94 e7 46 	call	0x8dce	; 0x8dce <__floatsisf>
    1fc2:	20 91 91 05 	lds	r18, 0x0591
    1fc6:	30 91 92 05 	lds	r19, 0x0592
    1fca:	40 91 93 05 	lds	r20, 0x0593
    1fce:	50 91 94 05 	lds	r21, 0x0594
    1fd2:	0e 94 e4 45 	call	0x8bc8	; 0x8bc8 <__addsf3>
    1fd6:	0e 94 b4 46 	call	0x8d68	; 0x8d68 <__fixsfsi>
    1fda:	70 93 0d 05 	sts	0x050D, r23
    1fde:	60 93 0c 05 	sts	0x050C, r22
}
    1fe2:	df 91       	pop	r29
    1fe4:	cf 91       	pop	r28
    1fe6:	1f 91       	pop	r17
    1fe8:	08 95       	ret

00001fea <CalibrateAcc>:
//***************************************************************
// Calibration routines
//***************************************************************

void CalibrateAcc(int8_t type)
{
    1fea:	1f 93       	push	r17
    1fec:	cf 93       	push	r28
    1fee:	df 93       	push	r29
    1ff0:	00 d0       	rcall	.+0      	; 0x1ff2 <CalibrateAcc+0x8>
    1ff2:	00 d0       	rcall	.+0      	; 0x1ff4 <CalibrateAcc+0xa>
    1ff4:	00 d0       	rcall	.+0      	; 0x1ff6 <CalibrateAcc+0xc>
    1ff6:	cd b7       	in	r28, 0x3d	; 61
    1ff8:	de b7       	in	r29, 0x3e	; 62
	uint8_t i;
	int16_t accZero[NUMBEROFAXIS] = {0,0,0};	// Used for calibrating Accs on ground
    1ffa:	1a 82       	std	Y+2, r1	; 0x02
    1ffc:	19 82       	std	Y+1, r1	; 0x01
    1ffe:	1c 82       	std	Y+4, r1	; 0x04
    2000:	1b 82       	std	Y+3, r1	; 0x03
    2002:	1e 82       	std	Y+6, r1	; 0x06
    2004:	1d 82       	std	Y+5, r1	; 0x05

	// Calibrate acc
	if (type == NORMAL)
    2006:	81 11       	cpse	r24, r1
    2008:	6f c0       	rjmp	.+222    	; 0x20e8 <CalibrateAcc+0xfe>
    200a:	10 e2       	ldi	r17, 0x20	; 32
	{
		// Get average zero value (over 32 readings)
		for (i = 0; i < 32; i++)
		{
			get_raw_accs();						// Updates accADC[] with signals reoriented into (RPY)
    200c:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <get_raw_accs>

			accZero[ROLL] += accADC[ROLL];
    2010:	89 81       	ldd	r24, Y+1	; 0x01
    2012:	9a 81       	ldd	r25, Y+2	; 0x02
    2014:	20 91 34 05 	lds	r18, 0x0534
    2018:	30 91 35 05 	lds	r19, 0x0535
    201c:	82 0f       	add	r24, r18
    201e:	93 1f       	adc	r25, r19
    2020:	9a 83       	std	Y+2, r25	; 0x02
    2022:	89 83       	std	Y+1, r24	; 0x01
			accZero[PITCH] += accADC[PITCH];						
    2024:	8b 81       	ldd	r24, Y+3	; 0x03
    2026:	9c 81       	ldd	r25, Y+4	; 0x04
    2028:	20 91 36 05 	lds	r18, 0x0536
    202c:	30 91 37 05 	lds	r19, 0x0537
    2030:	82 0f       	add	r24, r18
    2032:	93 1f       	adc	r25, r19
    2034:	9c 83       	std	Y+4, r25	; 0x04
    2036:	8b 83       	std	Y+3, r24	; 0x03
			accZero[YAW] += accADC[YAW];		
    2038:	8d 81       	ldd	r24, Y+5	; 0x05
    203a:	9e 81       	ldd	r25, Y+6	; 0x06
    203c:	20 91 38 05 	lds	r18, 0x0538
    2040:	30 91 39 05 	lds	r19, 0x0539
    2044:	82 0f       	add	r24, r18
    2046:	93 1f       	adc	r25, r19
    2048:	9e 83       	std	Y+6, r25	; 0x06
    204a:	8d 83       	std	Y+5, r24	; 0x05
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    204c:	8f e4       	ldi	r24, 0x4F	; 79
    204e:	93 ec       	ldi	r25, 0xC3	; 195
    2050:	01 97       	sbiw	r24, 0x01	; 1
    2052:	f1 f7       	brne	.-4      	; 0x2050 <CalibrateAcc+0x66>
    2054:	00 c0       	rjmp	.+0      	; 0x2056 <CalibrateAcc+0x6c>
    2056:	00 00       	nop
    2058:	11 50       	subi	r17, 0x01	; 1

	// Calibrate acc
	if (type == NORMAL)
	{
		// Get average zero value (over 32 readings)
		for (i = 0; i < 32; i++)
    205a:	c1 f6       	brne	.-80     	; 0x200c <CalibrateAcc+0x22>
    205c:	fe 01       	movw	r30, r28
    205e:	31 96       	adiw	r30, 0x01	; 1
    2060:	9e 01       	movw	r18, r28
    2062:	29 5f       	subi	r18, 0xF9	; 249
    2064:	3f 4f       	sbci	r19, 0xFF	; 255
		}

		for (i = 0; i < NUMBEROFAXIS; i++)		// For selected axis in RPY order
		{
			// Round and divide by 32
			accZero[i] = ((accZero[i] + 16) >> 5);
    2066:	80 81       	ld	r24, Z
    2068:	91 81       	ldd	r25, Z+1	; 0x01
    206a:	40 96       	adiw	r24, 0x10	; 16
    206c:	45 e0       	ldi	r20, 0x05	; 5
    206e:	95 95       	asr	r25
    2070:	87 95       	ror	r24
    2072:	4a 95       	dec	r20
    2074:	e1 f7       	brne	.-8      	; 0x206e <CalibrateAcc+0x84>
    2076:	81 93       	st	Z+, r24
    2078:	91 93       	st	Z+, r25
			accZero[YAW] += accADC[YAW];		

			_delay_ms(10);						// Get a better acc average over time
		}

		for (i = 0; i < NUMBEROFAXIS; i++)		// For selected axis in RPY order
    207a:	e2 17       	cp	r30, r18
    207c:	f3 07       	cpc	r31, r19
    207e:	99 f7       	brne	.-26     	; 0x2066 <CalibrateAcc+0x7c>
			// Round and divide by 32
			accZero[i] = ((accZero[i] + 16) >> 5);
		}

		// Reset zeros to normal cal
		Config.AccZero[ROLL] = accZero[ROLL]; 
    2080:	89 81       	ldd	r24, Y+1	; 0x01
    2082:	9a 81       	ldd	r25, Y+2	; 0x02
    2084:	90 93 8c 07 	sts	0x078C, r25
    2088:	80 93 8b 07 	sts	0x078B, r24
		Config.AccZero[PITCH] = accZero[PITCH]; 
    208c:	8b 81       	ldd	r24, Y+3	; 0x03
    208e:	9c 81       	ldd	r25, Y+4	; 0x04
    2090:	90 93 8e 07 	sts	0x078E, r25
    2094:	80 93 8d 07 	sts	0x078D, r24
		Config.AccZeroNormZ = accZero[YAW]; 
			
		// Correct polarity of AccZeroNormZ as per orientation
		Config.AccZeroNormZ *= (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation][YAW]);
    2098:	80 91 29 06 	lds	r24, 0x0629
    209c:	99 27       	eor	r25, r25
    209e:	87 fd       	sbrc	r24, 7
    20a0:	90 95       	com	r25
    20a2:	fc 01       	movw	r30, r24
    20a4:	ee 0f       	add	r30, r30
    20a6:	ff 1f       	adc	r31, r31
    20a8:	e8 0f       	add	r30, r24
    20aa:	f9 1f       	adc	r31, r25
    20ac:	e6 54       	subi	r30, 0x46	; 70
    20ae:	ff 4f       	sbci	r31, 0xFF	; 255
    20b0:	44 91       	lpm	r20, Z
    20b2:	2d 81       	ldd	r18, Y+5	; 0x05
    20b4:	3e 81       	ldd	r19, Y+6	; 0x06
    20b6:	42 03       	mulsu	r20, r18
    20b8:	c0 01       	movw	r24, r0
    20ba:	43 9f       	mul	r20, r19
    20bc:	90 0d       	add	r25, r0
    20be:	11 24       	eor	r1, r1
    20c0:	90 93 92 07 	sts	0x0792, r25
    20c4:	80 93 91 07 	sts	0x0791, r24
			
		// Flag that normal cal done
		Config.Main_flags |= (1 << normal_cal_done);
    20c8:	80 91 a8 07 	lds	r24, 0x07A8
    20cc:	82 60       	ori	r24, 0x02	; 2
    20ce:	80 93 a8 07 	sts	0x07A8, r24
	
		// Save new calibration and flash LED for confirmation
		Save_Config_to_EEPROM();
    20d2:	0e 94 88 16 	call	0x2d10	; 0x2d10 <Save_Config_to_EEPROM>
		LED1 = 1;
    20d6:	2b 9a       	sbi	0x05, 3	; 5
    20d8:	9f e7       	ldi	r25, 0x7F	; 127
    20da:	24 e8       	ldi	r18, 0x84	; 132
    20dc:	4e e1       	ldi	r20, 0x1E	; 30
    20de:	91 50       	subi	r25, 0x01	; 1
    20e0:	20 40       	sbci	r18, 0x00	; 0
    20e2:	40 40       	sbci	r20, 0x00	; 0
    20e4:	e1 f7       	brne	.-8      	; 0x20de <CalibrateAcc+0xf4>
    20e6:	67 c0       	rjmp	.+206    	; 0x21b6 <CalibrateAcc+0x1cc>

	else
	// Calibrate inverted acc
	{
		// Only update the inverted cal value if preceded by a normal calibration
		if (Config.Main_flags & (1 << normal_cal_done))
    20e8:	80 91 a8 07 	lds	r24, 0x07A8
    20ec:	81 ff       	sbrs	r24, 1
    20ee:	66 c0       	rjmp	.+204    	; 0x21bc <CalibrateAcc+0x1d2>
		{
			// Get average zero value (over 32 readings)
			Config.AccZeroInvZ = 0;
    20f0:	10 92 94 07 	sts	0x0794, r1
    20f4:	10 92 93 07 	sts	0x0793, r1
    20f8:	10 e2       	ldi	r17, 0x20	; 32

			for (i = 0; i < 32; i++)
			{
				get_raw_accs();					// Updates gyroADC[] with reoriented vales
    20fa:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <get_raw_accs>
				Config.AccZeroInvZ += accADC[YAW];		
    20fe:	80 91 93 07 	lds	r24, 0x0793
    2102:	90 91 94 07 	lds	r25, 0x0794
    2106:	20 91 38 05 	lds	r18, 0x0538
    210a:	30 91 39 05 	lds	r19, 0x0539
    210e:	82 0f       	add	r24, r18
    2110:	93 1f       	adc	r25, r19
    2112:	90 93 94 07 	sts	0x0794, r25
    2116:	80 93 93 07 	sts	0x0793, r24
    211a:	8f e4       	ldi	r24, 0x4F	; 79
    211c:	93 ec       	ldi	r25, 0xC3	; 195
    211e:	01 97       	sbiw	r24, 0x01	; 1
    2120:	f1 f7       	brne	.-4      	; 0x211e <CalibrateAcc+0x134>
    2122:	00 c0       	rjmp	.+0      	; 0x2124 <CalibrateAcc+0x13a>
    2124:	00 00       	nop
    2126:	11 50       	subi	r17, 0x01	; 1
		if (Config.Main_flags & (1 << normal_cal_done))
		{
			// Get average zero value (over 32 readings)
			Config.AccZeroInvZ = 0;

			for (i = 0; i < 32; i++)
    2128:	41 f7       	brne	.-48     	; 0x20fa <CalibrateAcc+0x110>

			// Round and divide by 32
			Config.AccZeroInvZ = ((Config.AccZeroInvZ + 16) >> 5);		// Inverted zero point
			
			// Correct polarity of AccZeroInvZ as per orientation
			Config.AccZeroInvZ *= (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation][YAW]);
    212a:	80 91 29 06 	lds	r24, 0x0629
    212e:	99 27       	eor	r25, r25
    2130:	87 fd       	sbrc	r24, 7
    2132:	90 95       	com	r25
    2134:	fc 01       	movw	r30, r24
    2136:	ee 0f       	add	r30, r30
    2138:	ff 1f       	adc	r31, r31
    213a:	e8 0f       	add	r30, r24
    213c:	f9 1f       	adc	r31, r25
    213e:	e6 54       	subi	r30, 0x46	; 70
    2140:	ff 4f       	sbci	r31, 0xFF	; 255
    2142:	44 91       	lpm	r20, Z
				Config.AccZeroInvZ += accADC[YAW];		
				_delay_ms(10);					// Get a better acc average over time
			}

			// Round and divide by 32
			Config.AccZeroInvZ = ((Config.AccZeroInvZ + 16) >> 5);		// Inverted zero point
    2144:	20 91 93 07 	lds	r18, 0x0793
    2148:	30 91 94 07 	lds	r19, 0x0794
    214c:	20 5f       	subi	r18, 0xF0	; 240
    214e:	3f 4f       	sbci	r19, 0xFF	; 255
    2150:	b5 e0       	ldi	r27, 0x05	; 5
    2152:	35 95       	asr	r19
    2154:	27 95       	ror	r18
    2156:	ba 95       	dec	r27
    2158:	e1 f7       	brne	.-8      	; 0x2152 <CalibrateAcc+0x168>
			
			// Correct polarity of AccZeroInvZ as per orientation
			Config.AccZeroInvZ *= (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation][YAW]);
    215a:	42 03       	mulsu	r20, r18
    215c:	c0 01       	movw	r24, r0
    215e:	43 9f       	mul	r20, r19
    2160:	90 0d       	add	r25, r0
    2162:	11 24       	eor	r1, r1
    2164:	90 93 94 07 	sts	0x0794, r25
    2168:	80 93 93 07 	sts	0x0793, r24

			// Test if board is actually inverted relative to board orientation.
			if (Config.AccZeroInvZ < 0)
    216c:	97 ff       	sbrs	r25, 7
    216e:	26 c0       	rjmp	.+76     	; 0x21bc <CalibrateAcc+0x1d2>
			{

				// Reset zero to halfway between min and max Z
				Config.AccZeroDiff = ((Config.AccZeroNormZ - Config.AccZeroInvZ) >> 1);
    2170:	20 91 91 07 	lds	r18, 0x0791
    2174:	30 91 92 07 	lds	r19, 0x0792
    2178:	a9 01       	movw	r20, r18
    217a:	48 1b       	sub	r20, r24
    217c:	59 0b       	sbc	r21, r25
    217e:	ca 01       	movw	r24, r20
    2180:	95 95       	asr	r25
    2182:	87 95       	ror	r24
    2184:	90 93 96 07 	sts	0x0796, r25
    2188:	80 93 95 07 	sts	0x0795, r24
				Config.AccZero[YAW] = Config.AccZeroNormZ - Config.AccZeroDiff; // Config.AccZero[YAW] is now valid to use
    218c:	28 1b       	sub	r18, r24
    218e:	39 0b       	sbc	r19, r25
    2190:	30 93 90 07 	sts	0x0790, r19
    2194:	20 93 8f 07 	sts	0x078F, r18

				// Flag that inverted cal done
				Config.Main_flags |= (1 << inv_cal_done);
    2198:	80 91 a8 07 	lds	r24, 0x07A8
    219c:	81 60       	ori	r24, 0x01	; 1
    219e:	80 93 a8 07 	sts	0x07A8, r24

				// Save new calibration and flash LED for confirmation
				Save_Config_to_EEPROM();
    21a2:	0e 94 88 16 	call	0x2d10	; 0x2d10 <Save_Config_to_EEPROM>
				LED1 = 1;
    21a6:	2b 9a       	sbi	0x05, 3	; 5
    21a8:	5f e7       	ldi	r21, 0x7F	; 127
    21aa:	84 e8       	ldi	r24, 0x84	; 132
    21ac:	9e e1       	ldi	r25, 0x1E	; 30
    21ae:	51 50       	subi	r21, 0x01	; 1
    21b0:	80 40       	sbci	r24, 0x00	; 0
    21b2:	90 40       	sbci	r25, 0x00	; 0
    21b4:	e1 f7       	brne	.-8      	; 0x21ae <CalibrateAcc+0x1c4>
    21b6:	00 c0       	rjmp	.+0      	; 0x21b8 <CalibrateAcc+0x1ce>
    21b8:	00 00       	nop
				_delay_ms(500);
				LED1 = 0;
    21ba:	2b 98       	cbi	0x05, 3	; 5
			}
		}
	}
}
    21bc:	26 96       	adiw	r28, 0x06	; 6
    21be:	0f b6       	in	r0, 0x3f	; 63
    21c0:	f8 94       	cli
    21c2:	de bf       	out	0x3e, r29	; 62
    21c4:	0f be       	out	0x3f, r0	; 63
    21c6:	cd bf       	out	0x3d, r28	; 61
    21c8:	df 91       	pop	r29
    21ca:	cf 91       	pop	r28
    21cc:	1f 91       	pop	r17
    21ce:	08 95       	ret

000021d0 <init_i2c_accs>:
// Set up the MPU6050 (Acc)
//***************************************************************

void init_i2c_accs(void)
{
	writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_PWR_MGMT_1, 0x01); // Gyro X clock, awake
    21d0:	41 e0       	ldi	r20, 0x01	; 1
    21d2:	6b e6       	ldi	r22, 0x6B	; 107
    21d4:	80 ed       	ldi	r24, 0xD0	; 208
    21d6:	0e 94 3e 24 	call	0x487c	; 0x487c <writeI2Cbyte>
	writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_ACCEL_CONFIG, ACCFS4G); // 4G full scale
    21da:	48 e0       	ldi	r20, 0x08	; 8
    21dc:	6c e1       	ldi	r22, 0x1C	; 28
    21de:	80 ed       	ldi	r24, 0xD0	; 208
    21e0:	0c 94 3e 24 	jmp	0x487c	; 0x487c <writeI2Cbyte>

000021e4 <Init_ADC>:
//***********************************************************

void Init_ADC(void)
{
	// Digital Input Disable Register - ADC0~7 Digital Input Disable
	DIDR0 	= (1<<ADC0D)|(1<<ADC1D)|(1<<ADC2D)|(1<<ADC3D)|(1<<ADC4D)|(1<<ADC5D)|(1<<ADC6D)|(1<<ADC7D);
    21e4:	8f ef       	ldi	r24, 0xFF	; 255
    21e6:	80 93 7e 00 	sts	0x007E, r24
	
	// ADC Control and Status Register B - ADTS2:0
	ADCSRB 	= 0x00;
    21ea:	10 92 7b 00 	sts	0x007B, r1
    21ee:	08 95       	ret

000021f0 <read_adc>:
}

void read_adc(uint8_t channel)
{
	ADMUX	= channel;
    21f0:	80 93 7c 00 	sts	0x007C, r24
	
	// ADEN, ADSC, ADPS1,2
	ADCSRA 	= (1<<ADEN)|(1<<ADSC)|(1<<ADPS1)|(1<<ADPS2);
    21f4:	86 ec       	ldi	r24, 0xC6	; 198
    21f6:	80 93 7a 00 	sts	0x007A, r24

	// Wait to complete. Result is in ADCW
	while (ADCSRA & (1 << ADSC));
    21fa:	80 91 7a 00 	lds	r24, 0x007A
    21fe:	86 fd       	sbrc	r24, 6
    2200:	fc cf       	rjmp	.-8      	; 0x21fa <read_adc+0xa>
}
    2202:	08 95       	ret

00002204 <Display_balance>:
//************************************************************
// Code
//************************************************************

void Display_balance(void)
{
    2204:	cf 92       	push	r12
    2206:	df 92       	push	r13
    2208:	ef 92       	push	r14
    220a:	0f 93       	push	r16
    220c:	cf 93       	push	r28
    220e:	df 93       	push	r29
			y_pos = accSmooth[ROLL] + 64;

			if (x_pos < 0) x_pos = 0;
			if (x_pos > 64) x_pos = 64;
			if (y_pos < 0) y_pos = 0;
			if (y_pos > 128) y_pos = 128;
    2210:	cb e0       	ldi	r28, 0x0B	; 11
    2212:	d0 e0       	ldi	r29, 0x00	; 0

	#ifdef KK2Mini
	st7565_set_brightness(28);
	#endif

	while(BUTTON1 != 0)
    2214:	1f 9b       	sbis	0x03, 7	; 3
    2216:	7f c0       	rjmp	.+254    	; 0x2316 <Display_balance+0x112>
	{
		// Read accs
		ReadAcc();
    2218:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <ReadAcc>

		// Refresh accSmooth values
		// Fake the IMU period as accSmooth doesn't need that
		simple_imu_update(0);
    221c:	60 e0       	ldi	r22, 0x00	; 0
    221e:	70 e0       	ldi	r23, 0x00	; 0
    2220:	cb 01       	movw	r24, r22
    2222:	0e 94 b6 26 	call	0x4d6c	; 0x4d6c <simple_imu_update>
    2226:	21 97       	sbiw	r28, 0x01	; 1

		count++;
		
		// Only display once per 10 loops
		if (count > 10)
    2228:	20 97       	sbiw	r28, 0x00	; 0
    222a:	a1 f7       	brne	.-24     	; 0x2214 <Display_balance+0x10>
		{
			// Convert acc signal to a pixel position
			x_pos = accSmooth[PITCH] + 32;
    222c:	20 e0       	ldi	r18, 0x00	; 0
    222e:	30 e0       	ldi	r19, 0x00	; 0
    2230:	40 e0       	ldi	r20, 0x00	; 0
    2232:	52 e4       	ldi	r21, 0x42	; 66
    2234:	60 91 8d 05 	lds	r22, 0x058D
    2238:	70 91 8e 05 	lds	r23, 0x058E
    223c:	80 91 8f 05 	lds	r24, 0x058F
    2240:	90 91 90 05 	lds	r25, 0x0590
    2244:	0e 94 e4 45 	call	0x8bc8	; 0x8bc8 <__addsf3>
    2248:	0e 94 b4 46 	call	0x8d68	; 0x8d68 <__fixsfsi>
    224c:	eb 01       	movw	r28, r22
			y_pos = accSmooth[ROLL] + 64;
    224e:	20 e0       	ldi	r18, 0x00	; 0
    2250:	30 e0       	ldi	r19, 0x00	; 0
    2252:	40 e8       	ldi	r20, 0x80	; 128
    2254:	52 e4       	ldi	r21, 0x42	; 66
    2256:	60 91 89 05 	lds	r22, 0x0589
    225a:	70 91 8a 05 	lds	r23, 0x058A
    225e:	80 91 8b 05 	lds	r24, 0x058B
    2262:	90 91 8c 05 	lds	r25, 0x058C
    2266:	0e 94 e4 45 	call	0x8bc8	; 0x8bc8 <__addsf3>
    226a:	0e 94 b4 46 	call	0x8d68	; 0x8d68 <__fixsfsi>
    226e:	6b 01       	movw	r12, r22

			if (x_pos < 0) x_pos = 0;
    2270:	d7 fd       	sbrc	r29, 7
    2272:	06 c0       	rjmp	.+12     	; 0x2280 <Display_balance+0x7c>
			if (x_pos > 64) x_pos = 64;
    2274:	c1 34       	cpi	r28, 0x41	; 65
    2276:	d1 05       	cpc	r29, r1
    2278:	2c f0       	brlt	.+10     	; 0x2284 <Display_balance+0x80>
    227a:	c0 e4       	ldi	r28, 0x40	; 64
    227c:	d0 e0       	ldi	r29, 0x00	; 0
    227e:	02 c0       	rjmp	.+4      	; 0x2284 <Display_balance+0x80>
		{
			// Convert acc signal to a pixel position
			x_pos = accSmooth[PITCH] + 32;
			y_pos = accSmooth[ROLL] + 64;

			if (x_pos < 0) x_pos = 0;
    2280:	c0 e0       	ldi	r28, 0x00	; 0
    2282:	d0 e0       	ldi	r29, 0x00	; 0
			if (x_pos > 64) x_pos = 64;
			if (y_pos < 0) y_pos = 0;
    2284:	d7 fc       	sbrc	r13, 7
    2286:	08 c0       	rjmp	.+16     	; 0x2298 <Display_balance+0x94>
			if (y_pos > 128) y_pos = 128;
    2288:	81 e8       	ldi	r24, 0x81	; 129
    228a:	c8 16       	cp	r12, r24
    228c:	d1 04       	cpc	r13, r1
    228e:	34 f0       	brlt	.+12     	; 0x229c <Display_balance+0x98>
    2290:	80 e8       	ldi	r24, 0x80	; 128
    2292:	c8 2e       	mov	r12, r24
    2294:	d1 2c       	mov	r13, r1
    2296:	02 c0       	rjmp	.+4      	; 0x229c <Display_balance+0x98>
			x_pos = accSmooth[PITCH] + 32;
			y_pos = accSmooth[ROLL] + 64;

			if (x_pos < 0) x_pos = 0;
			if (x_pos > 64) x_pos = 64;
			if (y_pos < 0) y_pos = 0;
    2298:	c1 2c       	mov	r12, r1
    229a:	d1 2c       	mov	r13, r1
			if (y_pos > 128) y_pos = 128;

			// Print bottom markers
			LCD_Display_Text(12, (const unsigned char*)Wingdings, 2, 55); 	// Left
    229c:	27 e3       	ldi	r18, 0x37	; 55
    229e:	30 e0       	ldi	r19, 0x00	; 0
    22a0:	42 e0       	ldi	r20, 0x02	; 2
    22a2:	50 e0       	ldi	r21, 0x00	; 0
    22a4:	65 ef       	ldi	r22, 0xF5	; 245
    22a6:	70 e0       	ldi	r23, 0x00	; 0
    22a8:	8c e0       	ldi	r24, 0x0C	; 12
    22aa:	90 e0       	ldi	r25, 0x00	; 0
    22ac:	0e 94 e0 21 	call	0x43c0	; 0x43c0 <LCD_Display_Text>

			// Draw balance meter
			drawrect(buffer, 0, 0, 128, 64, 1);		// Border
    22b0:	ee 24       	eor	r14, r14
    22b2:	e3 94       	inc	r14
    22b4:	00 e4       	ldi	r16, 0x40	; 64
    22b6:	20 e8       	ldi	r18, 0x80	; 128
    22b8:	40 e0       	ldi	r20, 0x00	; 0
    22ba:	60 e0       	ldi	r22, 0x00	; 0
    22bc:	80 e0       	ldi	r24, 0x00	; 0
    22be:	91 e0       	ldi	r25, 0x01	; 1
    22c0:	0e 94 fd 20 	call	0x41fa	; 0x41fa <drawrect>
			drawrect(buffer, 54, 22, 21, 21, 1);	// Target
    22c4:	05 e1       	ldi	r16, 0x15	; 21
    22c6:	25 e1       	ldi	r18, 0x15	; 21
    22c8:	46 e1       	ldi	r20, 0x16	; 22
    22ca:	66 e3       	ldi	r22, 0x36	; 54
    22cc:	80 e0       	ldi	r24, 0x00	; 0
    22ce:	91 e0       	ldi	r25, 0x01	; 1
    22d0:	0e 94 fd 20 	call	0x41fa	; 0x41fa <drawrect>
			drawline(buffer, 64, 8, 64, 56, 1); 	// Crosshairs
    22d4:	08 e3       	ldi	r16, 0x38	; 56
    22d6:	20 e4       	ldi	r18, 0x40	; 64
    22d8:	48 e0       	ldi	r20, 0x08	; 8
    22da:	60 e4       	ldi	r22, 0x40	; 64
    22dc:	80 e0       	ldi	r24, 0x00	; 0
    22de:	91 e0       	ldi	r25, 0x01	; 1
    22e0:	0e 94 93 20 	call	0x4126	; 0x4126 <drawline>
			drawline(buffer, 32, 32, 96, 32, 1);
    22e4:	00 e2       	ldi	r16, 0x20	; 32
    22e6:	20 e6       	ldi	r18, 0x60	; 96
    22e8:	40 e2       	ldi	r20, 0x20	; 32
    22ea:	60 e2       	ldi	r22, 0x20	; 32
    22ec:	80 e0       	ldi	r24, 0x00	; 0
    22ee:	91 e0       	ldi	r25, 0x01	; 1
    22f0:	0e 94 93 20 	call	0x4126	; 0x4126 <drawline>
			fillcircle(buffer, y_pos, x_pos, 8, 1);	// Bubble
    22f4:	01 e0       	ldi	r16, 0x01	; 1
    22f6:	28 e0       	ldi	r18, 0x08	; 8
    22f8:	4c 2f       	mov	r20, r28
    22fa:	6c 2d       	mov	r22, r12
    22fc:	80 e0       	ldi	r24, 0x00	; 0
    22fe:	91 e0       	ldi	r25, 0x01	; 1
    2300:	0e 94 4f 21 	call	0x429e	; 0x429e <fillcircle>

			// Refresh GLCD
			write_buffer(buffer);
    2304:	80 e0       	ldi	r24, 0x00	; 0
    2306:	91 e0       	ldi	r25, 0x01	; 1
    2308:	0e 94 01 20 	call	0x4002	; 0x4002 <write_buffer>
			clear_buffer(buffer);
    230c:	80 e0       	ldi	r24, 0x00	; 0
    230e:	91 e0       	ldi	r25, 0x01	; 1
    2310:	0e 94 33 20 	call	0x4066	; 0x4066 <clear_buffer>
    2314:	7d cf       	rjmp	.-262    	; 0x2210 <Display_balance+0xc>
	#ifdef KK2Mini
	clear_buffer(buffer);
	write_buffer(buffer);
	st7565_set_brightness(Config.Contrast);
	#endif
}
    2316:	df 91       	pop	r29
    2318:	cf 91       	pop	r28
    231a:	0f 91       	pop	r16
    231c:	ef 90       	pop	r14
    231e:	df 90       	pop	r13
    2320:	cf 90       	pop	r12
    2322:	08 95       	ret

00002324 <Display_rcinput>:
//************************************************************

void Display_rcinput(void)
{
	// Re-enable interrupts. High seed mode may have left them off
	init_int();
    2324:	0e 94 e1 2d 	call	0x5bc2	; 0x5bc2 <init_int>
	
	while(BUTTON1 != 0)
    2328:	1f 9b       	sbis	0x03, 7	; 3
    232a:	fa c0       	rjmp	.+500    	; 0x2520 <Display_rcinput+0x1fc>
	{
		if (BUTTON4 == 0)
    232c:	1c 9b       	sbis	0x03, 4	; 3
		{
			CenterSticks();
    232e:	0e 94 8f 43 	call	0x871e	; 0x871e <CenterSticks>
		}

		RxGetChannels();
    2332:	0e 94 fa 42 	call	0x85f4	; 0x85f4 <RxGetChannels>

		LCD_Display_Text(114,(const unsigned char*)Verdana8,0,0); // Throttle
    2336:	20 e0       	ldi	r18, 0x00	; 0
    2338:	30 e0       	ldi	r19, 0x00	; 0
    233a:	40 e0       	ldi	r20, 0x00	; 0
    233c:	50 e0       	ldi	r21, 0x00	; 0
    233e:	6d e0       	ldi	r22, 0x0D	; 13
    2340:	7a e0       	ldi	r23, 0x0A	; 10
    2342:	82 e7       	ldi	r24, 0x72	; 114
    2344:	90 e0       	ldi	r25, 0x00	; 0
    2346:	0e 94 e0 21 	call	0x43c0	; 0x43c0 <LCD_Display_Text>
		LCD_Display_Text(32,(const unsigned char*)Verdana8,0,10);
    234a:	2a e0       	ldi	r18, 0x0A	; 10
    234c:	30 e0       	ldi	r19, 0x00	; 0
    234e:	40 e0       	ldi	r20, 0x00	; 0
    2350:	50 e0       	ldi	r21, 0x00	; 0
    2352:	6d e0       	ldi	r22, 0x0D	; 13
    2354:	7a e0       	ldi	r23, 0x0A	; 10
    2356:	80 e2       	ldi	r24, 0x20	; 32
    2358:	90 e0       	ldi	r25, 0x00	; 0
    235a:	0e 94 e0 21 	call	0x43c0	; 0x43c0 <LCD_Display_Text>
		LCD_Display_Text(115,(const unsigned char*)Verdana8,0,20);
    235e:	24 e1       	ldi	r18, 0x14	; 20
    2360:	30 e0       	ldi	r19, 0x00	; 0
    2362:	40 e0       	ldi	r20, 0x00	; 0
    2364:	50 e0       	ldi	r21, 0x00	; 0
    2366:	6d e0       	ldi	r22, 0x0D	; 13
    2368:	7a e0       	ldi	r23, 0x0A	; 10
    236a:	83 e7       	ldi	r24, 0x73	; 115
    236c:	90 e0       	ldi	r25, 0x00	; 0
    236e:	0e 94 e0 21 	call	0x43c0	; 0x43c0 <LCD_Display_Text>
		LCD_Display_Text(35,(const unsigned char*)Verdana8,0,30);
    2372:	2e e1       	ldi	r18, 0x1E	; 30
    2374:	30 e0       	ldi	r19, 0x00	; 0
    2376:	40 e0       	ldi	r20, 0x00	; 0
    2378:	50 e0       	ldi	r21, 0x00	; 0
    237a:	6d e0       	ldi	r22, 0x0D	; 13
    237c:	7a e0       	ldi	r23, 0x0A	; 10
    237e:	83 e2       	ldi	r24, 0x23	; 35
    2380:	90 e0       	ldi	r25, 0x00	; 0
    2382:	0e 94 e0 21 	call	0x43c0	; 0x43c0 <LCD_Display_Text>

		LCD_Display_Text(109,(const unsigned char*)Verdana8,70,0); // Gear
    2386:	20 e0       	ldi	r18, 0x00	; 0
    2388:	30 e0       	ldi	r19, 0x00	; 0
    238a:	46 e4       	ldi	r20, 0x46	; 70
    238c:	50 e0       	ldi	r21, 0x00	; 0
    238e:	6d e0       	ldi	r22, 0x0D	; 13
    2390:	7a e0       	ldi	r23, 0x0A	; 10
    2392:	8d e6       	ldi	r24, 0x6D	; 109
    2394:	90 e0       	ldi	r25, 0x00	; 0
    2396:	0e 94 e0 21 	call	0x43c0	; 0x43c0 <LCD_Display_Text>
		LCD_Display_Text(110,(const unsigned char*)Verdana8,70,10);
    239a:	2a e0       	ldi	r18, 0x0A	; 10
    239c:	30 e0       	ldi	r19, 0x00	; 0
    239e:	46 e4       	ldi	r20, 0x46	; 70
    23a0:	50 e0       	ldi	r21, 0x00	; 0
    23a2:	6d e0       	ldi	r22, 0x0D	; 13
    23a4:	7a e0       	ldi	r23, 0x0A	; 10
    23a6:	8e e6       	ldi	r24, 0x6E	; 110
    23a8:	90 e0       	ldi	r25, 0x00	; 0
    23aa:	0e 94 e0 21 	call	0x43c0	; 0x43c0 <LCD_Display_Text>
		LCD_Display_Text(111,(const unsigned char*)Verdana8,70,20);
    23ae:	24 e1       	ldi	r18, 0x14	; 20
    23b0:	30 e0       	ldi	r19, 0x00	; 0
    23b2:	46 e4       	ldi	r20, 0x46	; 70
    23b4:	50 e0       	ldi	r21, 0x00	; 0
    23b6:	6d e0       	ldi	r22, 0x0D	; 13
    23b8:	7a e0       	ldi	r23, 0x0A	; 10
    23ba:	8f e6       	ldi	r24, 0x6F	; 111
    23bc:	90 e0       	ldi	r25, 0x00	; 0
    23be:	0e 94 e0 21 	call	0x43c0	; 0x43c0 <LCD_Display_Text>
		LCD_Display_Text(112,(const unsigned char*)Verdana8,70,30);
    23c2:	2e e1       	ldi	r18, 0x1E	; 30
    23c4:	30 e0       	ldi	r19, 0x00	; 0
    23c6:	46 e4       	ldi	r20, 0x46	; 70
    23c8:	50 e0       	ldi	r21, 0x00	; 0
    23ca:	6d e0       	ldi	r22, 0x0D	; 13
    23cc:	7a e0       	ldi	r23, 0x0A	; 10
    23ce:	80 e7       	ldi	r24, 0x70	; 112
    23d0:	90 e0       	ldi	r25, 0x00	; 0
    23d2:	0e 94 e0 21 	call	0x43c0	; 0x43c0 <LCD_Display_Text>

		mugui_lcd_puts(itoa(MonopolarThrottle,pBuffer,10),(const unsigned char*)Verdana8,37,0);
    23d6:	80 91 19 08 	lds	r24, 0x0819
    23da:	90 91 1a 08 	lds	r25, 0x081A
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    23de:	4a e0       	ldi	r20, 0x0A	; 10
    23e0:	63 e5       	ldi	r22, 0x53	; 83
    23e2:	75 e0       	ldi	r23, 0x05	; 5
    23e4:	0e 94 b9 48 	call	0x9172	; 0x9172 <__itoa_ncheck>
    23e8:	20 e0       	ldi	r18, 0x00	; 0
    23ea:	30 e0       	ldi	r19, 0x00	; 0
    23ec:	45 e2       	ldi	r20, 0x25	; 37
    23ee:	50 e0       	ldi	r21, 0x00	; 0
    23f0:	6d e0       	ldi	r22, 0x0D	; 13
    23f2:	7a e0       	ldi	r23, 0x0A	; 10
    23f4:	0e 94 56 3e 	call	0x7cac	; 0x7cac <mugui_lcd_puts>
		mugui_lcd_puts(itoa(RCinputs[AILERON],pBuffer,10),(const unsigned char*)Verdana8,37,10);
    23f8:	80 91 1d 08 	lds	r24, 0x081D
    23fc:	90 91 1e 08 	lds	r25, 0x081E
    2400:	4a e0       	ldi	r20, 0x0A	; 10
    2402:	63 e5       	ldi	r22, 0x53	; 83
    2404:	75 e0       	ldi	r23, 0x05	; 5
    2406:	0e 94 b9 48 	call	0x9172	; 0x9172 <__itoa_ncheck>
    240a:	2a e0       	ldi	r18, 0x0A	; 10
    240c:	30 e0       	ldi	r19, 0x00	; 0
    240e:	45 e2       	ldi	r20, 0x25	; 37
    2410:	50 e0       	ldi	r21, 0x00	; 0
    2412:	6d e0       	ldi	r22, 0x0D	; 13
    2414:	7a e0       	ldi	r23, 0x0A	; 10
    2416:	0e 94 56 3e 	call	0x7cac	; 0x7cac <mugui_lcd_puts>
		mugui_lcd_puts(itoa(RCinputs[ELEVATOR],pBuffer,10),(const unsigned char*)Verdana8,37,20);
    241a:	80 91 1f 08 	lds	r24, 0x081F
    241e:	90 91 20 08 	lds	r25, 0x0820
    2422:	4a e0       	ldi	r20, 0x0A	; 10
    2424:	63 e5       	ldi	r22, 0x53	; 83
    2426:	75 e0       	ldi	r23, 0x05	; 5
    2428:	0e 94 b9 48 	call	0x9172	; 0x9172 <__itoa_ncheck>
    242c:	24 e1       	ldi	r18, 0x14	; 20
    242e:	30 e0       	ldi	r19, 0x00	; 0
    2430:	45 e2       	ldi	r20, 0x25	; 37
    2432:	50 e0       	ldi	r21, 0x00	; 0
    2434:	6d e0       	ldi	r22, 0x0D	; 13
    2436:	7a e0       	ldi	r23, 0x0A	; 10
    2438:	0e 94 56 3e 	call	0x7cac	; 0x7cac <mugui_lcd_puts>
		mugui_lcd_puts(itoa(RCinputs[RUDDER],pBuffer,10),(const unsigned char*)Verdana8,37,30);
    243c:	80 91 21 08 	lds	r24, 0x0821
    2440:	90 91 22 08 	lds	r25, 0x0822
    2444:	4a e0       	ldi	r20, 0x0A	; 10
    2446:	63 e5       	ldi	r22, 0x53	; 83
    2448:	75 e0       	ldi	r23, 0x05	; 5
    244a:	0e 94 b9 48 	call	0x9172	; 0x9172 <__itoa_ncheck>
    244e:	2e e1       	ldi	r18, 0x1E	; 30
    2450:	30 e0       	ldi	r19, 0x00	; 0
    2452:	45 e2       	ldi	r20, 0x25	; 37
    2454:	50 e0       	ldi	r21, 0x00	; 0
    2456:	6d e0       	ldi	r22, 0x0D	; 13
    2458:	7a e0       	ldi	r23, 0x0A	; 10
    245a:	0e 94 56 3e 	call	0x7cac	; 0x7cac <mugui_lcd_puts>

		mugui_lcd_puts(itoa(RCinputs[GEAR],pBuffer,10),(const unsigned char*)Verdana8,100,0);
    245e:	80 91 23 08 	lds	r24, 0x0823
    2462:	90 91 24 08 	lds	r25, 0x0824
    2466:	4a e0       	ldi	r20, 0x0A	; 10
    2468:	63 e5       	ldi	r22, 0x53	; 83
    246a:	75 e0       	ldi	r23, 0x05	; 5
    246c:	0e 94 b9 48 	call	0x9172	; 0x9172 <__itoa_ncheck>
    2470:	20 e0       	ldi	r18, 0x00	; 0
    2472:	30 e0       	ldi	r19, 0x00	; 0
    2474:	44 e6       	ldi	r20, 0x64	; 100
    2476:	50 e0       	ldi	r21, 0x00	; 0
    2478:	6d e0       	ldi	r22, 0x0D	; 13
    247a:	7a e0       	ldi	r23, 0x0A	; 10
    247c:	0e 94 56 3e 	call	0x7cac	; 0x7cac <mugui_lcd_puts>
		mugui_lcd_puts(itoa(RCinputs[AUX1],pBuffer,10),(const unsigned char*)Verdana8,100,10);
    2480:	80 91 25 08 	lds	r24, 0x0825
    2484:	90 91 26 08 	lds	r25, 0x0826
    2488:	4a e0       	ldi	r20, 0x0A	; 10
    248a:	63 e5       	ldi	r22, 0x53	; 83
    248c:	75 e0       	ldi	r23, 0x05	; 5
    248e:	0e 94 b9 48 	call	0x9172	; 0x9172 <__itoa_ncheck>
    2492:	2a e0       	ldi	r18, 0x0A	; 10
    2494:	30 e0       	ldi	r19, 0x00	; 0
    2496:	44 e6       	ldi	r20, 0x64	; 100
    2498:	50 e0       	ldi	r21, 0x00	; 0
    249a:	6d e0       	ldi	r22, 0x0D	; 13
    249c:	7a e0       	ldi	r23, 0x0A	; 10
    249e:	0e 94 56 3e 	call	0x7cac	; 0x7cac <mugui_lcd_puts>
		mugui_lcd_puts(itoa(RCinputs[AUX2],pBuffer,10),(const unsigned char*)Verdana8,100,20);
    24a2:	80 91 27 08 	lds	r24, 0x0827
    24a6:	90 91 28 08 	lds	r25, 0x0828
    24aa:	4a e0       	ldi	r20, 0x0A	; 10
    24ac:	63 e5       	ldi	r22, 0x53	; 83
    24ae:	75 e0       	ldi	r23, 0x05	; 5
    24b0:	0e 94 b9 48 	call	0x9172	; 0x9172 <__itoa_ncheck>
    24b4:	24 e1       	ldi	r18, 0x14	; 20
    24b6:	30 e0       	ldi	r19, 0x00	; 0
    24b8:	44 e6       	ldi	r20, 0x64	; 100
    24ba:	50 e0       	ldi	r21, 0x00	; 0
    24bc:	6d e0       	ldi	r22, 0x0D	; 13
    24be:	7a e0       	ldi	r23, 0x0A	; 10
    24c0:	0e 94 56 3e 	call	0x7cac	; 0x7cac <mugui_lcd_puts>
		mugui_lcd_puts(itoa(RCinputs[AUX3],pBuffer,10),(const unsigned char*)Verdana8,100,30);
    24c4:	80 91 29 08 	lds	r24, 0x0829
    24c8:	90 91 2a 08 	lds	r25, 0x082A
    24cc:	4a e0       	ldi	r20, 0x0A	; 10
    24ce:	63 e5       	ldi	r22, 0x53	; 83
    24d0:	75 e0       	ldi	r23, 0x05	; 5
    24d2:	0e 94 b9 48 	call	0x9172	; 0x9172 <__itoa_ncheck>
    24d6:	2e e1       	ldi	r18, 0x1E	; 30
    24d8:	30 e0       	ldi	r19, 0x00	; 0
    24da:	44 e6       	ldi	r20, 0x64	; 100
    24dc:	50 e0       	ldi	r21, 0x00	; 0
    24de:	6d e0       	ldi	r22, 0x0D	; 13
    24e0:	7a e0       	ldi	r23, 0x0A	; 10
    24e2:	0e 94 56 3e 	call	0x7cac	; 0x7cac <mugui_lcd_puts>

		// Print bottom text and markers
		LCD_Display_Text(12, (const unsigned char*)Wingdings, 0, 57); 	// Left
    24e6:	29 e3       	ldi	r18, 0x39	; 57
    24e8:	30 e0       	ldi	r19, 0x00	; 0
    24ea:	40 e0       	ldi	r20, 0x00	; 0
    24ec:	50 e0       	ldi	r21, 0x00	; 0
    24ee:	65 ef       	ldi	r22, 0xF5	; 245
    24f0:	70 e0       	ldi	r23, 0x00	; 0
    24f2:	8c e0       	ldi	r24, 0x0C	; 12
    24f4:	90 e0       	ldi	r25, 0x00	; 0
    24f6:	0e 94 e0 21 	call	0x43c0	; 0x43c0 <LCD_Display_Text>
		LCD_Display_Text(60, (const unsigned char*)Verdana8, 110, 55); 	// Cal.
    24fa:	27 e3       	ldi	r18, 0x37	; 55
    24fc:	30 e0       	ldi	r19, 0x00	; 0
    24fe:	4e e6       	ldi	r20, 0x6E	; 110
    2500:	50 e0       	ldi	r21, 0x00	; 0
    2502:	6d e0       	ldi	r22, 0x0D	; 13
    2504:	7a e0       	ldi	r23, 0x0A	; 10
    2506:	8c e3       	ldi	r24, 0x3C	; 60
    2508:	90 e0       	ldi	r25, 0x00	; 0
    250a:	0e 94 e0 21 	call	0x43c0	; 0x43c0 <LCD_Display_Text>

		// Update buffer
		write_buffer(buffer);
    250e:	80 e0       	ldi	r24, 0x00	; 0
    2510:	91 e0       	ldi	r25, 0x01	; 1
    2512:	0e 94 01 20 	call	0x4002	; 0x4002 <write_buffer>
		clear_buffer(buffer);
    2516:	80 e0       	ldi	r24, 0x00	; 0
    2518:	91 e0       	ldi	r25, 0x01	; 1
    251a:	0e 94 33 20 	call	0x4066	; 0x4066 <clear_buffer>
    251e:	04 cf       	rjmp	.-504    	; 0x2328 <Display_rcinput+0x4>
	}
}
    2520:	08 95       	ret

00002522 <Display_sensors>:
// Code
//************************************************************

void Display_sensors(void)
{
	while(BUTTON1 != 0)
    2522:	1f 9b       	sbis	0x03, 7	; 3
    2524:	ed c0       	rjmp	.+474    	; 0x2700 <Display_sensors+0x1de>
	{
	
		// Normal calibrate button pressed
		if (BUTTON4 == 0)
    2526:	1c 99       	sbic	0x03, 4	; 3
    2528:	1a c0       	rjmp	.+52     	; 0x255e <Display_sensors+0x3c>
		{
			// Wait until finger off button
			while(BUTTON4 == 0)
    252a:	1c 99       	sbic	0x03, 4	; 3
    252c:	0a c0       	rjmp	.+20     	; 0x2542 <Display_sensors+0x20>
    252e:	2f e3       	ldi	r18, 0x3F	; 63
    2530:	8d e0       	ldi	r24, 0x0D	; 13
    2532:	93 e0       	ldi	r25, 0x03	; 3
    2534:	21 50       	subi	r18, 0x01	; 1
    2536:	80 40       	sbci	r24, 0x00	; 0
    2538:	90 40       	sbci	r25, 0x00	; 0
    253a:	e1 f7       	brne	.-8      	; 0x2534 <Display_sensors+0x12>
    253c:	00 c0       	rjmp	.+0      	; 0x253e <Display_sensors+0x1c>
    253e:	00 00       	nop
    2540:	f4 cf       	rjmp	.-24     	; 0x252a <Display_sensors+0x8>
    2542:	2f e3       	ldi	r18, 0x3F	; 63
    2544:	82 e4       	ldi	r24, 0x42	; 66
    2546:	9f e0       	ldi	r25, 0x0F	; 15
    2548:	21 50       	subi	r18, 0x01	; 1
    254a:	80 40       	sbci	r24, 0x00	; 0
    254c:	90 40       	sbci	r25, 0x00	; 0
    254e:	e1 f7       	brne	.-8      	; 0x2548 <Display_sensors+0x26>
    2550:	00 c0       	rjmp	.+0      	; 0x2552 <Display_sensors+0x30>
    2552:	00 00       	nop
			
			// Pause until steady		
			_delay_ms(250);
			
			// Calibrate sensors
			CalibrateGyrosFast();		
    2554:	0e 94 f3 22 	call	0x45e6	; 0x45e6 <CalibrateGyrosFast>
			CalibrateAcc(NORMAL);
    2558:	80 e0       	ldi	r24, 0x00	; 0
    255a:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <CalibrateAcc>
		}

		// Inverted calibrate button pressed
		if (BUTTON3 == 0)
    255e:	1d 99       	sbic	0x03, 5	; 3
    2560:	0c c0       	rjmp	.+24     	; 0x257a <Display_sensors+0x58>
    2562:	2f e3       	ldi	r18, 0x3F	; 63
    2564:	82 e4       	ldi	r24, 0x42	; 66
    2566:	9f e0       	ldi	r25, 0x0F	; 15
    2568:	21 50       	subi	r18, 0x01	; 1
    256a:	80 40       	sbci	r24, 0x00	; 0
    256c:	90 40       	sbci	r25, 0x00	; 0
    256e:	e1 f7       	brne	.-8      	; 0x2568 <Display_sensors+0x46>
    2570:	00 c0       	rjmp	.+0      	; 0x2572 <Display_sensors+0x50>
    2572:	00 00       	nop
		{
			// Wait until button snap dissipated
			_delay_ms(250);
			CalibrateAcc(REVERSED);
    2574:	81 e0       	ldi	r24, 0x01	; 1
    2576:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <CalibrateAcc>
		}

		ReadGyros();
    257a:	0e 94 c6 22 	call	0x458c	; 0x458c <ReadGyros>
		ReadAcc();
    257e:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <ReadAcc>

		LCD_Display_Text(26,(const unsigned char*)Verdana8,37,0); 	// Gyro
    2582:	20 e0       	ldi	r18, 0x00	; 0
    2584:	30 e0       	ldi	r19, 0x00	; 0
    2586:	45 e2       	ldi	r20, 0x25	; 37
    2588:	50 e0       	ldi	r21, 0x00	; 0
    258a:	6d e0       	ldi	r22, 0x0D	; 13
    258c:	7a e0       	ldi	r23, 0x0A	; 10
    258e:	8a e1       	ldi	r24, 0x1A	; 26
    2590:	90 e0       	ldi	r25, 0x00	; 0
    2592:	0e 94 e0 21 	call	0x43c0	; 0x43c0 <LCD_Display_Text>
		LCD_Display_Text(30,(const unsigned char*)Verdana8,77,0); 	// Acc
    2596:	20 e0       	ldi	r18, 0x00	; 0
    2598:	30 e0       	ldi	r19, 0x00	; 0
    259a:	4d e4       	ldi	r20, 0x4D	; 77
    259c:	50 e0       	ldi	r21, 0x00	; 0
    259e:	6d e0       	ldi	r22, 0x0D	; 13
    25a0:	7a e0       	ldi	r23, 0x0A	; 10
    25a2:	8e e1       	ldi	r24, 0x1E	; 30
    25a4:	90 e0       	ldi	r25, 0x00	; 0
    25a6:	0e 94 e0 21 	call	0x43c0	; 0x43c0 <LCD_Display_Text>
		//
		LCD_Display_Text(27,(const unsigned char*)Verdana8,5,13);	// Roll
    25aa:	2d e0       	ldi	r18, 0x0D	; 13
    25ac:	30 e0       	ldi	r19, 0x00	; 0
    25ae:	45 e0       	ldi	r20, 0x05	; 5
    25b0:	50 e0       	ldi	r21, 0x00	; 0
    25b2:	6d e0       	ldi	r22, 0x0D	; 13
    25b4:	7a e0       	ldi	r23, 0x0A	; 10
    25b6:	8b e1       	ldi	r24, 0x1B	; 27
    25b8:	90 e0       	ldi	r25, 0x00	; 0
    25ba:	0e 94 e0 21 	call	0x43c0	; 0x43c0 <LCD_Display_Text>
		LCD_Display_Text(28,(const unsigned char*)Verdana8,5,23);	// Pitch
    25be:	27 e1       	ldi	r18, 0x17	; 23
    25c0:	30 e0       	ldi	r19, 0x00	; 0
    25c2:	45 e0       	ldi	r20, 0x05	; 5
    25c4:	50 e0       	ldi	r21, 0x00	; 0
    25c6:	6d e0       	ldi	r22, 0x0D	; 13
    25c8:	7a e0       	ldi	r23, 0x0A	; 10
    25ca:	8c e1       	ldi	r24, 0x1C	; 28
    25cc:	90 e0       	ldi	r25, 0x00	; 0
    25ce:	0e 94 e0 21 	call	0x43c0	; 0x43c0 <LCD_Display_Text>
		LCD_Display_Text(29,(const unsigned char*)Verdana8,5,33);	// Yaw/Z
    25d2:	21 e2       	ldi	r18, 0x21	; 33
    25d4:	30 e0       	ldi	r19, 0x00	; 0
    25d6:	45 e0       	ldi	r20, 0x05	; 5
    25d8:	50 e0       	ldi	r21, 0x00	; 0
    25da:	6d e0       	ldi	r22, 0x0D	; 13
    25dc:	7a e0       	ldi	r23, 0x0A	; 10
    25de:	8d e1       	ldi	r24, 0x1D	; 29
    25e0:	90 e0       	ldi	r25, 0x00	; 0
    25e2:	0e 94 e0 21 	call	0x43c0	; 0x43c0 <LCD_Display_Text>
    25e6:	4a e0       	ldi	r20, 0x0A	; 10
    25e8:	63 e5       	ldi	r22, 0x53	; 83
    25ea:	75 e0       	ldi	r23, 0x05	; 5
    25ec:	80 91 63 05 	lds	r24, 0x0563
    25f0:	90 91 64 05 	lds	r25, 0x0564
    25f4:	0e 94 b9 48 	call	0x9172	; 0x9172 <__itoa_ncheck>
		//
		mugui_lcd_puts(itoa(gyroADC[ROLL],pBuffer,10),(const unsigned char*)Verdana8,40,13);
    25f8:	2d e0       	ldi	r18, 0x0D	; 13
    25fa:	30 e0       	ldi	r19, 0x00	; 0
    25fc:	48 e2       	ldi	r20, 0x28	; 40
    25fe:	50 e0       	ldi	r21, 0x00	; 0
    2600:	6d e0       	ldi	r22, 0x0D	; 13
    2602:	7a e0       	ldi	r23, 0x0A	; 10
    2604:	0e 94 56 3e 	call	0x7cac	; 0x7cac <mugui_lcd_puts>
    2608:	4a e0       	ldi	r20, 0x0A	; 10
    260a:	63 e5       	ldi	r22, 0x53	; 83
    260c:	75 e0       	ldi	r23, 0x05	; 5
    260e:	80 91 65 05 	lds	r24, 0x0565
    2612:	90 91 66 05 	lds	r25, 0x0566
    2616:	0e 94 b9 48 	call	0x9172	; 0x9172 <__itoa_ncheck>
		mugui_lcd_puts(itoa(gyroADC[PITCH],pBuffer,10),(const unsigned char*)Verdana8,40,23);
    261a:	27 e1       	ldi	r18, 0x17	; 23
    261c:	30 e0       	ldi	r19, 0x00	; 0
    261e:	48 e2       	ldi	r20, 0x28	; 40
    2620:	50 e0       	ldi	r21, 0x00	; 0
    2622:	6d e0       	ldi	r22, 0x0D	; 13
    2624:	7a e0       	ldi	r23, 0x0A	; 10
    2626:	0e 94 56 3e 	call	0x7cac	; 0x7cac <mugui_lcd_puts>
    262a:	4a e0       	ldi	r20, 0x0A	; 10
    262c:	63 e5       	ldi	r22, 0x53	; 83
    262e:	75 e0       	ldi	r23, 0x05	; 5
    2630:	80 91 67 05 	lds	r24, 0x0567
    2634:	90 91 68 05 	lds	r25, 0x0568
    2638:	0e 94 b9 48 	call	0x9172	; 0x9172 <__itoa_ncheck>
		mugui_lcd_puts(itoa(gyroADC[YAW],pBuffer,10),(const unsigned char*)Verdana8,40,33);
    263c:	21 e2       	ldi	r18, 0x21	; 33
    263e:	30 e0       	ldi	r19, 0x00	; 0
    2640:	48 e2       	ldi	r20, 0x28	; 40
    2642:	50 e0       	ldi	r21, 0x00	; 0
    2644:	6d e0       	ldi	r22, 0x0D	; 13
    2646:	7a e0       	ldi	r23, 0x0A	; 10
    2648:	0e 94 56 3e 	call	0x7cac	; 0x7cac <mugui_lcd_puts>
    264c:	4a e0       	ldi	r20, 0x0A	; 10
    264e:	63 e5       	ldi	r22, 0x53	; 83
    2650:	75 e0       	ldi	r23, 0x05	; 5
    2652:	80 91 34 05 	lds	r24, 0x0534
    2656:	90 91 35 05 	lds	r25, 0x0535
    265a:	0e 94 b9 48 	call	0x9172	; 0x9172 <__itoa_ncheck>
		mugui_lcd_puts(itoa(accADC[ROLL],pBuffer,10),(const unsigned char*)Verdana8,80,13);
    265e:	2d e0       	ldi	r18, 0x0D	; 13
    2660:	30 e0       	ldi	r19, 0x00	; 0
    2662:	40 e5       	ldi	r20, 0x50	; 80
    2664:	50 e0       	ldi	r21, 0x00	; 0
    2666:	6d e0       	ldi	r22, 0x0D	; 13
    2668:	7a e0       	ldi	r23, 0x0A	; 10
    266a:	0e 94 56 3e 	call	0x7cac	; 0x7cac <mugui_lcd_puts>
    266e:	4a e0       	ldi	r20, 0x0A	; 10
    2670:	63 e5       	ldi	r22, 0x53	; 83
    2672:	75 e0       	ldi	r23, 0x05	; 5
    2674:	80 91 36 05 	lds	r24, 0x0536
    2678:	90 91 37 05 	lds	r25, 0x0537
    267c:	0e 94 b9 48 	call	0x9172	; 0x9172 <__itoa_ncheck>
		mugui_lcd_puts(itoa(accADC[PITCH],pBuffer,10),(const unsigned char*)Verdana8,80,23);
    2680:	27 e1       	ldi	r18, 0x17	; 23
    2682:	30 e0       	ldi	r19, 0x00	; 0
    2684:	40 e5       	ldi	r20, 0x50	; 80
    2686:	50 e0       	ldi	r21, 0x00	; 0
    2688:	6d e0       	ldi	r22, 0x0D	; 13
    268a:	7a e0       	ldi	r23, 0x0A	; 10
    268c:	0e 94 56 3e 	call	0x7cac	; 0x7cac <mugui_lcd_puts>
    2690:	4a e0       	ldi	r20, 0x0A	; 10
    2692:	63 e5       	ldi	r22, 0x53	; 83
    2694:	75 e0       	ldi	r23, 0x05	; 5
    2696:	80 91 38 05 	lds	r24, 0x0538
    269a:	90 91 39 05 	lds	r25, 0x0539
    269e:	0e 94 b9 48 	call	0x9172	; 0x9172 <__itoa_ncheck>
		mugui_lcd_puts(itoa(accADC[YAW],pBuffer,10),(const unsigned char*)Verdana8,80,33);
    26a2:	21 e2       	ldi	r18, 0x21	; 33
    26a4:	30 e0       	ldi	r19, 0x00	; 0
    26a6:	40 e5       	ldi	r20, 0x50	; 80
    26a8:	50 e0       	ldi	r21, 0x00	; 0
    26aa:	6d e0       	ldi	r22, 0x0D	; 13
    26ac:	7a e0       	ldi	r23, 0x0A	; 10
    26ae:	0e 94 56 3e 	call	0x7cac	; 0x7cac <mugui_lcd_puts>

		// Print bottom markers
		LCD_Display_Text(12, (const unsigned char*)Wingdings, 0, 57); 	// Left
    26b2:	29 e3       	ldi	r18, 0x39	; 57
    26b4:	30 e0       	ldi	r19, 0x00	; 0
    26b6:	40 e0       	ldi	r20, 0x00	; 0
    26b8:	50 e0       	ldi	r21, 0x00	; 0
    26ba:	65 ef       	ldi	r22, 0xF5	; 245
    26bc:	70 e0       	ldi	r23, 0x00	; 0
    26be:	8c e0       	ldi	r24, 0x0C	; 12
    26c0:	90 e0       	ldi	r25, 0x00	; 0
    26c2:	0e 94 e0 21 	call	0x43c0	; 0x43c0 <LCD_Display_Text>
		LCD_Display_Text(60, (const unsigned char*)Verdana8, 108, 55); 	// Calibrate
    26c6:	27 e3       	ldi	r18, 0x37	; 55
    26c8:	30 e0       	ldi	r19, 0x00	; 0
    26ca:	4c e6       	ldi	r20, 0x6C	; 108
    26cc:	50 e0       	ldi	r21, 0x00	; 0
    26ce:	6d e0       	ldi	r22, 0x0D	; 13
    26d0:	7a e0       	ldi	r23, 0x0A	; 10
    26d2:	8c e3       	ldi	r24, 0x3C	; 60
    26d4:	90 e0       	ldi	r25, 0x00	; 0
    26d6:	0e 94 e0 21 	call	0x43c0	; 0x43c0 <LCD_Display_Text>
		LCD_Display_Text(25, (const unsigned char*)Verdana8, 75, 55); 	// Inverted Calibrate		
    26da:	27 e3       	ldi	r18, 0x37	; 55
    26dc:	30 e0       	ldi	r19, 0x00	; 0
    26de:	4b e4       	ldi	r20, 0x4B	; 75
    26e0:	50 e0       	ldi	r21, 0x00	; 0
    26e2:	6d e0       	ldi	r22, 0x0D	; 13
    26e4:	7a e0       	ldi	r23, 0x0A	; 10
    26e6:	89 e1       	ldi	r24, 0x19	; 25
    26e8:	90 e0       	ldi	r25, 0x00	; 0
    26ea:	0e 94 e0 21 	call	0x43c0	; 0x43c0 <LCD_Display_Text>

		// Update buffer
		write_buffer(buffer);
    26ee:	80 e0       	ldi	r24, 0x00	; 0
    26f0:	91 e0       	ldi	r25, 0x01	; 1
    26f2:	0e 94 01 20 	call	0x4002	; 0x4002 <write_buffer>
		clear_buffer(buffer);
    26f6:	80 e0       	ldi	r24, 0x00	; 0
    26f8:	91 e0       	ldi	r25, 0x01	; 1
    26fa:	0e 94 33 20 	call	0x4066	; 0x4066 <clear_buffer>
    26fe:	11 cf       	rjmp	.-478    	; 0x2522 <Display_sensors>
	}
}
    2700:	08 95       	ret

00002702 <Display_status>:
//************************************************************
// Code
//************************************************************

void Display_status(void)
{
    2702:	bf 92       	push	r11
    2704:	cf 92       	push	r12
    2706:	df 92       	push	r13
    2708:	ef 92       	push	r14
    270a:	ff 92       	push	r15
    270c:	0f 93       	push	r16
    270e:	1f 93       	push	r17
    2710:	cf 93       	push	r28
    2712:	df 93       	push	r29
    2714:	00 d0       	rcall	.+0      	; 0x2716 <Display_status+0x14>
    2716:	00 d0       	rcall	.+0      	; 0x2718 <Display_status+0x16>
    2718:	cd b7       	in	r28, 0x3d	; 61
    271a:	de b7       	in	r29, 0x3e	; 62
	int16_t temp;
	uint16_t vbat_temp; 
	int8_t	pos1, pos2, pos3;
	mugui_size16_t size;

	clear_buffer(buffer);
    271c:	80 e0       	ldi	r24, 0x00	; 0
    271e:	91 e0       	ldi	r25, 0x01	; 1
    2720:	0e 94 33 20 	call	0x4066	; 0x4066 <clear_buffer>

	// Display text
	LCD_Display_Text(264,(const unsigned char*)Verdana8,0,0); 	// Version text
    2724:	20 e0       	ldi	r18, 0x00	; 0
    2726:	30 e0       	ldi	r19, 0x00	; 0
    2728:	40 e0       	ldi	r20, 0x00	; 0
    272a:	50 e0       	ldi	r21, 0x00	; 0
    272c:	6d e0       	ldi	r22, 0x0D	; 13
    272e:	7a e0       	ldi	r23, 0x0A	; 10
    2730:	88 e0       	ldi	r24, 0x08	; 8
    2732:	91 e0       	ldi	r25, 0x01	; 1
    2734:	0e 94 e0 21 	call	0x43c0	; 0x43c0 <LCD_Display_Text>
	LCD_Display_Text(266,(const unsigned char*)Verdana8,0,12); 	// RX sync
    2738:	2c e0       	ldi	r18, 0x0C	; 12
    273a:	30 e0       	ldi	r19, 0x00	; 0
    273c:	40 e0       	ldi	r20, 0x00	; 0
    273e:	50 e0       	ldi	r21, 0x00	; 0
    2740:	6d e0       	ldi	r22, 0x0D	; 13
    2742:	7a e0       	ldi	r23, 0x0A	; 10
    2744:	8a e0       	ldi	r24, 0x0A	; 10
    2746:	91 e0       	ldi	r25, 0x01	; 1
    2748:	0e 94 e0 21 	call	0x43c0	; 0x43c0 <LCD_Display_Text>
	LCD_Display_Text(267,(const unsigned char*)Verdana8,0,24); 	// Profile
    274c:	28 e1       	ldi	r18, 0x18	; 24
    274e:	30 e0       	ldi	r19, 0x00	; 0
    2750:	40 e0       	ldi	r20, 0x00	; 0
    2752:	50 e0       	ldi	r21, 0x00	; 0
    2754:	6d e0       	ldi	r22, 0x0D	; 13
    2756:	7a e0       	ldi	r23, 0x0A	; 10
    2758:	8b e0       	ldi	r24, 0x0B	; 11
    275a:	91 e0       	ldi	r25, 0x01	; 1
    275c:	0e 94 e0 21 	call	0x43c0	; 0x43c0 <LCD_Display_Text>
	LCD_Display_Text(23,(const unsigned char*)Verdana8,88,24); 	// Pos
    2760:	28 e1       	ldi	r18, 0x18	; 24
    2762:	30 e0       	ldi	r19, 0x00	; 0
    2764:	48 e5       	ldi	r20, 0x58	; 88
    2766:	50 e0       	ldi	r21, 0x00	; 0
    2768:	6d e0       	ldi	r22, 0x0D	; 13
    276a:	7a e0       	ldi	r23, 0x0A	; 10
    276c:	87 e1       	ldi	r24, 0x17	; 23
    276e:	90 e0       	ldi	r25, 0x00	; 0
    2770:	0e 94 e0 21 	call	0x43c0	; 0x43c0 <LCD_Display_Text>
	
	// Display menu and markers
	LCD_Display_Text(9, (const unsigned char*)Wingdings, 0, 59);// Down
    2774:	2b e3       	ldi	r18, 0x3B	; 59
    2776:	30 e0       	ldi	r19, 0x00	; 0
    2778:	40 e0       	ldi	r20, 0x00	; 0
    277a:	50 e0       	ldi	r21, 0x00	; 0
    277c:	65 ef       	ldi	r22, 0xF5	; 245
    277e:	70 e0       	ldi	r23, 0x00	; 0
    2780:	89 e0       	ldi	r24, 0x09	; 9
    2782:	90 e0       	ldi	r25, 0x00	; 0
    2784:	0e 94 e0 21 	call	0x43c0	; 0x43c0 <LCD_Display_Text>
	LCD_Display_Text(14,(const unsigned char*)Verdana8,10,55);	// Menu
    2788:	27 e3       	ldi	r18, 0x37	; 55
    278a:	30 e0       	ldi	r19, 0x00	; 0
    278c:	4a e0       	ldi	r20, 0x0A	; 10
    278e:	50 e0       	ldi	r21, 0x00	; 0
    2790:	6d e0       	ldi	r22, 0x0D	; 13
    2792:	7a e0       	ldi	r23, 0x0A	; 10
    2794:	8e e0       	ldi	r24, 0x0E	; 14
    2796:	90 e0       	ldi	r25, 0x00	; 0
    2798:	0e 94 e0 21 	call	0x43c0	; 0x43c0 <LCD_Display_Text>

	// Display values
	print_menu_text(0, 1, (62 + Config.RxMode), 45, 12); // Rx mode
    279c:	40 91 ca 05 	lds	r20, 0x05CA
    27a0:	55 27       	eor	r21, r21
    27a2:	47 fd       	sbrc	r20, 7
    27a4:	50 95       	com	r21
    27a6:	42 5c       	subi	r20, 0xC2	; 194
    27a8:	5f 4f       	sbci	r21, 0xFF	; 255
    27aa:	0c e0       	ldi	r16, 0x0C	; 12
    27ac:	2d e2       	ldi	r18, 0x2D	; 45
    27ae:	61 e0       	ldi	r22, 0x01	; 1
    27b0:	80 e0       	ldi	r24, 0x00	; 0
    27b2:	90 e0       	ldi	r25, 0x00	; 0
    27b4:	0e 94 9f 2e 	call	0x5d3e	; 0x5d3e <print_menu_text>
    27b8:	4a e0       	ldi	r20, 0x0A	; 10
    27ba:	63 e5       	ldi	r22, 0x53	; 83
    27bc:	75 e0       	ldi	r23, 0x05	; 5
    27be:	80 91 17 05 	lds	r24, 0x0517
    27c2:	90 91 18 05 	lds	r25, 0x0518
    27c6:	0e 94 b9 48 	call	0x9172	; 0x9172 <__itoa_ncheck>
	mugui_lcd_puts(itoa(transition,pBuffer,10),(const unsigned char*)Verdana8,110,24); // Raw transition value
    27ca:	28 e1       	ldi	r18, 0x18	; 24
    27cc:	30 e0       	ldi	r19, 0x00	; 0
    27ce:	4e e6       	ldi	r20, 0x6E	; 110
    27d0:	50 e0       	ldi	r21, 0x00	; 0
    27d2:	6d e0       	ldi	r22, 0x0D	; 13
    27d4:	7a e0       	ldi	r23, 0x0A	; 10
    27d6:	0e 94 56 3e 	call	0x7cac	; 0x7cac <mugui_lcd_puts>

	if (Config.RxMode == PWM)
    27da:	80 91 ca 05 	lds	r24, 0x05CA
    27de:	81 30       	cpi	r24, 0x01	; 1
    27e0:	d9 f4       	brne	.+54     	; 0x2818 <Display_status+0x116>
	{
		LCD_Display_Text(24,(const unsigned char*)Verdana8,77,12); // Interrupt counter text 
    27e2:	2c e0       	ldi	r18, 0x0C	; 12
    27e4:	30 e0       	ldi	r19, 0x00	; 0
    27e6:	4d e4       	ldi	r20, 0x4D	; 77
    27e8:	50 e0       	ldi	r21, 0x00	; 0
    27ea:	6d e0       	ldi	r22, 0x0D	; 13
    27ec:	7a e0       	ldi	r23, 0x0A	; 10
    27ee:	88 e1       	ldi	r24, 0x18	; 24
    27f0:	90 e0       	ldi	r25, 0x00	; 0
    27f2:	0e 94 e0 21 	call	0x43c0	; 0x43c0 <LCD_Display_Text>
		mugui_lcd_puts(itoa(InterruptCount,pBuffer,10),(const unsigned char*)Verdana8,110,12); // Interrupt counter
    27f6:	80 91 12 05 	lds	r24, 0x0512
    27fa:	90 91 13 05 	lds	r25, 0x0513
    27fe:	4a e0       	ldi	r20, 0x0A	; 10
    2800:	63 e5       	ldi	r22, 0x53	; 83
    2802:	75 e0       	ldi	r23, 0x05	; 5
    2804:	0e 94 b9 48 	call	0x9172	; 0x9172 <__itoa_ncheck>
    2808:	2c e0       	ldi	r18, 0x0C	; 12
    280a:	30 e0       	ldi	r19, 0x00	; 0
    280c:	4e e6       	ldi	r20, 0x6E	; 110
    280e:	50 e0       	ldi	r21, 0x00	; 0
    2810:	6d e0       	ldi	r22, 0x0D	; 13
    2812:	7a e0       	ldi	r23, 0x0A	; 10
    2814:	0e 94 56 3e 	call	0x7cac	; 0x7cac <mugui_lcd_puts>
	}

	// Display transition point
	if (transition <= 0)
    2818:	80 91 17 05 	lds	r24, 0x0517
    281c:	90 91 18 05 	lds	r25, 0x0518
    2820:	18 16       	cp	r1, r24
    2822:	19 06       	cpc	r1, r25
    2824:	4c f0       	brlt	.+18     	; 0x2838 <Display_status+0x136>
	{
		LCD_Display_Text(48,(const unsigned char*)Verdana8,45,24);
    2826:	28 e1       	ldi	r18, 0x18	; 24
    2828:	30 e0       	ldi	r19, 0x00	; 0
    282a:	4d e2       	ldi	r20, 0x2D	; 45
    282c:	50 e0       	ldi	r21, 0x00	; 0
    282e:	6d e0       	ldi	r22, 0x0D	; 13
    2830:	7a e0       	ldi	r23, 0x0A	; 10
    2832:	80 e3       	ldi	r24, 0x30	; 48
    2834:	90 e0       	ldi	r25, 0x00	; 0
    2836:	31 c0       	rjmp	.+98     	; 0x289a <Display_status+0x198>
	}
	else if (transition >= 100)
    2838:	84 36       	cpi	r24, 0x64	; 100
    283a:	91 05       	cpc	r25, r1
    283c:	4c f0       	brlt	.+18     	; 0x2850 <Display_status+0x14e>
	{
		LCD_Display_Text(50,(const unsigned char*)Verdana8,45,24);
    283e:	28 e1       	ldi	r18, 0x18	; 24
    2840:	30 e0       	ldi	r19, 0x00	; 0
    2842:	4d e2       	ldi	r20, 0x2D	; 45
    2844:	50 e0       	ldi	r21, 0x00	; 0
    2846:	6d e0       	ldi	r22, 0x0D	; 13
    2848:	7a e0       	ldi	r23, 0x0A	; 10
    284a:	82 e3       	ldi	r24, 0x32	; 50
    284c:	90 e0       	ldi	r25, 0x00	; 0
    284e:	25 c0       	rjmp	.+74     	; 0x289a <Display_status+0x198>
	}
	else if (transition == Config.Transition_P1n)
    2850:	20 91 d0 05 	lds	r18, 0x05D0
    2854:	33 27       	eor	r19, r19
    2856:	27 fd       	sbrc	r18, 7
    2858:	30 95       	com	r19
    285a:	82 17       	cp	r24, r18
    285c:	93 07       	cpc	r25, r19
    285e:	49 f4       	brne	.+18     	; 0x2872 <Display_status+0x170>
	{
		LCD_Display_Text(49,(const unsigned char*)Verdana8,45,24);
    2860:	28 e1       	ldi	r18, 0x18	; 24
    2862:	30 e0       	ldi	r19, 0x00	; 0
    2864:	4d e2       	ldi	r20, 0x2D	; 45
    2866:	50 e0       	ldi	r21, 0x00	; 0
    2868:	6d e0       	ldi	r22, 0x0D	; 13
    286a:	7a e0       	ldi	r23, 0x0A	; 10
    286c:	81 e3       	ldi	r24, 0x31	; 49
    286e:	90 e0       	ldi	r25, 0x00	; 0
    2870:	14 c0       	rjmp	.+40     	; 0x289a <Display_status+0x198>
	}
	else if (transition < Config.Transition_P1n)
    2872:	82 17       	cp	r24, r18
    2874:	93 07       	cpc	r25, r19
    2876:	4c f4       	brge	.+18     	; 0x288a <Display_status+0x188>
	{
		LCD_Display_Text(51,(const unsigned char*)Verdana8,45,24);
    2878:	28 e1       	ldi	r18, 0x18	; 24
    287a:	30 e0       	ldi	r19, 0x00	; 0
    287c:	4d e2       	ldi	r20, 0x2D	; 45
    287e:	50 e0       	ldi	r21, 0x00	; 0
    2880:	6d e0       	ldi	r22, 0x0D	; 13
    2882:	7a e0       	ldi	r23, 0x0A	; 10
    2884:	83 e3       	ldi	r24, 0x33	; 51
    2886:	90 e0       	ldi	r25, 0x00	; 0
    2888:	08 c0       	rjmp	.+16     	; 0x289a <Display_status+0x198>
	}
	else
	{
		LCD_Display_Text(52,(const unsigned char*)Verdana8,45,24);
    288a:	28 e1       	ldi	r18, 0x18	; 24
    288c:	30 e0       	ldi	r19, 0x00	; 0
    288e:	4d e2       	ldi	r20, 0x2D	; 45
    2890:	50 e0       	ldi	r21, 0x00	; 0
    2892:	6d e0       	ldi	r22, 0x0D	; 13
    2894:	7a e0       	ldi	r23, 0x0A	; 10
    2896:	84 e3       	ldi	r24, 0x34	; 52
    2898:	90 e0       	ldi	r25, 0x00	; 0
    289a:	0e 94 e0 21 	call	0x43c0	; 0x43c0 <LCD_Display_Text>
	}


	// Don't display battery text if there are error messages
	if (General_error == 0)
    289e:	80 91 16 05 	lds	r24, 0x0516
    28a2:	81 11       	cpse	r24, r1
    28a4:	85 c0       	rjmp	.+266    	; 0x29b0 <Display_status+0x2ae>
	{
		// Display voltage
		uint8_t x_loc = 45;		// X location of voltage display
		uint8_t y_loc = 36;		// Y location of voltage display

		LCD_Display_Text(133,(const unsigned char*)Verdana8,0,36); 	// Battery
    28a6:	24 e2       	ldi	r18, 0x24	; 36
    28a8:	30 e0       	ldi	r19, 0x00	; 0
    28aa:	40 e0       	ldi	r20, 0x00	; 0
    28ac:	50 e0       	ldi	r21, 0x00	; 0
    28ae:	6d e0       	ldi	r22, 0x0D	; 13
    28b0:	7a e0       	ldi	r23, 0x0A	; 10
    28b2:	85 e8       	ldi	r24, 0x85	; 133
    28b4:	90 e0       	ldi	r25, 0x00	; 0
    28b6:	0e 94 e0 21 	call	0x43c0	; 0x43c0 <LCD_Display_Text>

		vbat_temp = GetVbat();
    28ba:	0e 94 c4 45 	call	0x8b88	; 0x8b88 <GetVbat>
    28be:	6c 01       	movw	r12, r24
		temp = vbat_temp/100;	// Display whole decimal part first
    28c0:	64 e6       	ldi	r22, 0x64	; 100
    28c2:	70 e0       	ldi	r23, 0x00	; 0
    28c4:	0e 94 fe 47 	call	0x8ffc	; 0x8ffc <__udivmodhi4>
    28c8:	8b 01       	movw	r16, r22
    28ca:	4a e0       	ldi	r20, 0x0A	; 10
    28cc:	63 e5       	ldi	r22, 0x53	; 83
    28ce:	75 e0       	ldi	r23, 0x05	; 5
    28d0:	c8 01       	movw	r24, r16
    28d2:	0e 94 b9 48 	call	0x9172	; 0x9172 <__itoa_ncheck>
		mugui_text_sizestring(itoa(temp,pBuffer,10), (const unsigned char*)Verdana8, &size);
    28d6:	ae 01       	movw	r20, r28
    28d8:	4f 5f       	subi	r20, 0xFF	; 255
    28da:	5f 4f       	sbci	r21, 0xFF	; 255
    28dc:	6d e0       	ldi	r22, 0x0D	; 13
    28de:	7a e0       	ldi	r23, 0x0A	; 10
    28e0:	0e 94 07 3d 	call	0x7a0e	; 0x7a0e <mugui_text_sizestring>
    28e4:	4a e0       	ldi	r20, 0x0A	; 10
    28e6:	63 e5       	ldi	r22, 0x53	; 83
    28e8:	75 e0       	ldi	r23, 0x05	; 5
    28ea:	c8 01       	movw	r24, r16
    28ec:	0e 94 b9 48 	call	0x9172	; 0x9172 <__itoa_ncheck>
		mugui_lcd_puts(itoa(temp,pBuffer,10),(const unsigned char*)Verdana8,x_loc,y_loc);
    28f0:	24 e2       	ldi	r18, 0x24	; 36
    28f2:	30 e0       	ldi	r19, 0x00	; 0
    28f4:	4d e2       	ldi	r20, 0x2D	; 45
    28f6:	50 e0       	ldi	r21, 0x00	; 0
    28f8:	6d e0       	ldi	r22, 0x0D	; 13
    28fa:	7a e0       	ldi	r23, 0x0A	; 10
    28fc:	0e 94 56 3e 	call	0x7cac	; 0x7cac <mugui_lcd_puts>
		pos1 = size.x;

		vbat_temp = vbat_temp - (temp * 100); // Now display the parts to the right of the decimal point
    2900:	2c e9       	ldi	r18, 0x9C	; 156
    2902:	20 03       	mulsu	r18, r16
    2904:	70 01       	movw	r14, r0
    2906:	21 9f       	mul	r18, r17
    2908:	f0 0c       	add	r15, r0
    290a:	11 24       	eor	r1, r1
    290c:	ec 0c       	add	r14, r12
    290e:	fd 1c       	adc	r15, r13

		LCD_Display_Text(268,(const unsigned char*)Verdana8,(x_loc + pos1),y_loc);
    2910:	09 81       	ldd	r16, Y+1	; 0x01
    2912:	11 27       	eor	r17, r17
    2914:	07 fd       	sbrc	r16, 7
    2916:	10 95       	com	r17
    2918:	03 5d       	subi	r16, 0xD3	; 211
    291a:	1f 4f       	sbci	r17, 0xFF	; 255
    291c:	24 e2       	ldi	r18, 0x24	; 36
    291e:	30 e0       	ldi	r19, 0x00	; 0
    2920:	a8 01       	movw	r20, r16
    2922:	6d e0       	ldi	r22, 0x0D	; 13
    2924:	7a e0       	ldi	r23, 0x0A	; 10
    2926:	8c e0       	ldi	r24, 0x0C	; 12
    2928:	91 e0       	ldi	r25, 0x01	; 1
    292a:	0e 94 e0 21 	call	0x43c0	; 0x43c0 <LCD_Display_Text>
		mugui_text_sizestring(".", (const unsigned char*)Verdana8, &size);
    292e:	ae 01       	movw	r20, r28
    2930:	4f 5f       	subi	r20, 0xFF	; 255
    2932:	5f 4f       	sbci	r21, 0xFF	; 255
    2934:	6d e0       	ldi	r22, 0x0D	; 13
    2936:	7a e0       	ldi	r23, 0x0A	; 10
    2938:	88 e0       	ldi	r24, 0x08	; 8
    293a:	95 e0       	ldi	r25, 0x05	; 5
    293c:	0e 94 07 3d 	call	0x7a0e	; 0x7a0e <mugui_text_sizestring>
		pos3 = size.x;
    2940:	c9 80       	ldd	r12, Y+1	; 0x01
		mugui_text_sizestring("0", (const unsigned char*)Verdana8, &size);
    2942:	ae 01       	movw	r20, r28
    2944:	4f 5f       	subi	r20, 0xFF	; 255
    2946:	5f 4f       	sbci	r21, 0xFF	; 255
    2948:	6d e0       	ldi	r22, 0x0D	; 13
    294a:	7a e0       	ldi	r23, 0x0A	; 10
    294c:	8a e0       	ldi	r24, 0x0A	; 10
    294e:	95 e0       	ldi	r25, 0x05	; 5
    2950:	0e 94 07 3d 	call	0x7a0e	; 0x7a0e <mugui_text_sizestring>
		pos2 = size.x;
    2954:	b9 80       	ldd	r11, Y+1	; 0x01
    2956:	dd 24       	eor	r13, r13
    2958:	c7 fc       	sbrc	r12, 7
    295a:	d0 94       	com	r13

		if (vbat_temp >= 10)
    295c:	8a e0       	ldi	r24, 0x0A	; 10
    295e:	e8 16       	cp	r14, r24
    2960:	f1 04       	cpc	r15, r1
    2962:	40 f0       	brcs	.+16     	; 0x2974 <Display_status+0x272>
    2964:	4a e0       	ldi	r20, 0x0A	; 10
    2966:	63 e5       	ldi	r22, 0x53	; 83
    2968:	75 e0       	ldi	r23, 0x05	; 5
    296a:	c7 01       	movw	r24, r14
    296c:	0e 94 b9 48 	call	0x9172	; 0x9172 <__itoa_ncheck>
		{
			mugui_lcd_puts(itoa(vbat_temp,pBuffer,10),(const unsigned char*)Verdana8,(x_loc + pos1 + pos3),y_loc);
    2970:	a8 01       	movw	r20, r16
    2972:	16 c0       	rjmp	.+44     	; 0x29a0 <Display_status+0x29e>
		}
		else
		{
			LCD_Display_Text(269,(const unsigned char*)Verdana8,(x_loc + pos1 + pos3),y_loc);
    2974:	a8 01       	movw	r20, r16
    2976:	4c 0d       	add	r20, r12
    2978:	5d 1d       	adc	r21, r13
    297a:	24 e2       	ldi	r18, 0x24	; 36
    297c:	30 e0       	ldi	r19, 0x00	; 0
    297e:	6d e0       	ldi	r22, 0x0D	; 13
    2980:	7a e0       	ldi	r23, 0x0A	; 10
    2982:	8d e0       	ldi	r24, 0x0D	; 13
    2984:	91 e0       	ldi	r25, 0x01	; 1
    2986:	0e 94 e0 21 	call	0x43c0	; 0x43c0 <LCD_Display_Text>
    298a:	4a e0       	ldi	r20, 0x0A	; 10
    298c:	63 e5       	ldi	r22, 0x53	; 83
    298e:	75 e0       	ldi	r23, 0x05	; 5
    2990:	c7 01       	movw	r24, r14
    2992:	0e 94 b9 48 	call	0x9172	; 0x9172 <__itoa_ncheck>
			mugui_lcd_puts(itoa(vbat_temp,pBuffer,10),(const unsigned char*)Verdana8,(x_loc + pos1 + pos2 + pos3),y_loc);
    2996:	a8 01       	movw	r20, r16
    2998:	4b 0d       	add	r20, r11
    299a:	51 1d       	adc	r21, r1
    299c:	b7 fc       	sbrc	r11, 7
    299e:	5a 95       	dec	r21
    29a0:	4c 0d       	add	r20, r12
    29a2:	5d 1d       	adc	r21, r13
    29a4:	24 e2       	ldi	r18, 0x24	; 36
    29a6:	30 e0       	ldi	r19, 0x00	; 0
    29a8:	6d e0       	ldi	r22, 0x0D	; 13
    29aa:	7a e0       	ldi	r23, 0x0A	; 10
    29ac:	0e 94 56 3e 	call	0x7cac	; 0x7cac <mugui_lcd_puts>
		}
	}
	
	// Display error messages
	if (General_error != 0)
    29b0:	80 91 16 05 	lds	r24, 0x0516
    29b4:	88 23       	and	r24, r24
    29b6:	09 f4       	brne	.+2      	; 0x29ba <Display_status+0x2b8>
    29b8:	53 c0       	rjmp	.+166    	; 0x2a60 <Display_status+0x35e>
	{
		// Prioritise error from top to bottom
		if((General_error & (1 << LVA_ALARM)) != 0)
    29ba:	80 91 16 05 	lds	r24, 0x0516
    29be:	83 ff       	sbrs	r24, 3
    29c0:	13 c0       	rjmp	.+38     	; 0x29e8 <Display_status+0x2e6>
		{
			LCD_Display_Text(134,(const unsigned char*)Verdana14,15,37);	// Battery
    29c2:	25 e2       	ldi	r18, 0x25	; 37
    29c4:	30 e0       	ldi	r19, 0x00	; 0
    29c6:	4f e0       	ldi	r20, 0x0F	; 15
    29c8:	50 e0       	ldi	r21, 0x00	; 0
    29ca:	6f e5       	ldi	r22, 0x5F	; 95
    29cc:	71 e0       	ldi	r23, 0x01	; 1
    29ce:	86 e8       	ldi	r24, 0x86	; 134
    29d0:	90 e0       	ldi	r25, 0x00	; 0
    29d2:	0e 94 e0 21 	call	0x43c0	; 0x43c0 <LCD_Display_Text>
			LCD_Display_Text(271,(const unsigned char*)Verdana14,79,37);	// low
    29d6:	25 e2       	ldi	r18, 0x25	; 37
    29d8:	30 e0       	ldi	r19, 0x00	; 0
    29da:	4f e4       	ldi	r20, 0x4F	; 79
    29dc:	50 e0       	ldi	r21, 0x00	; 0
    29de:	6f e5       	ldi	r22, 0x5F	; 95
    29e0:	71 e0       	ldi	r23, 0x01	; 1
    29e2:	8f e0       	ldi	r24, 0x0F	; 15
    29e4:	91 e0       	ldi	r25, 0x01	; 1
    29e6:	3a c0       	rjmp	.+116    	; 0x2a5c <Display_status+0x35a>
		}
		else if((General_error & (1 << NO_SIGNAL)) != 0)
    29e8:	80 91 16 05 	lds	r24, 0x0516
    29ec:	81 ff       	sbrs	r24, 1
    29ee:	13 c0       	rjmp	.+38     	; 0x2a16 <Display_status+0x314>
		{
			LCD_Display_Text(75,(const unsigned char*)Verdana14,30,37); 	// No
    29f0:	25 e2       	ldi	r18, 0x25	; 37
    29f2:	30 e0       	ldi	r19, 0x00	; 0
    29f4:	4e e1       	ldi	r20, 0x1E	; 30
    29f6:	50 e0       	ldi	r21, 0x00	; 0
    29f8:	6f e5       	ldi	r22, 0x5F	; 95
    29fa:	71 e0       	ldi	r23, 0x01	; 1
    29fc:	8b e4       	ldi	r24, 0x4B	; 75
    29fe:	90 e0       	ldi	r25, 0x00	; 0
    2a00:	0e 94 e0 21 	call	0x43c0	; 0x43c0 <LCD_Display_Text>
			LCD_Display_Text(272,(const unsigned char*)Verdana14,55,37);	// signal
    2a04:	25 e2       	ldi	r18, 0x25	; 37
    2a06:	30 e0       	ldi	r19, 0x00	; 0
    2a08:	47 e3       	ldi	r20, 0x37	; 55
    2a0a:	50 e0       	ldi	r21, 0x00	; 0
    2a0c:	6f e5       	ldi	r22, 0x5F	; 95
    2a0e:	71 e0       	ldi	r23, 0x01	; 1
    2a10:	80 e1       	ldi	r24, 0x10	; 16
    2a12:	91 e0       	ldi	r25, 0x01	; 1
    2a14:	23 c0       	rjmp	.+70     	; 0x2a5c <Display_status+0x35a>
		}
		else if((General_error & (1 << THROTTLE_HIGH)) != 0)
    2a16:	80 91 16 05 	lds	r24, 0x0516
    2a1a:	80 ff       	sbrs	r24, 0
    2a1c:	13 c0       	rjmp	.+38     	; 0x2a44 <Display_status+0x342>
		{
			LCD_Display_Text(105,(const unsigned char*)Verdana14,11,37);	// Throttle
    2a1e:	25 e2       	ldi	r18, 0x25	; 37
    2a20:	30 e0       	ldi	r19, 0x00	; 0
    2a22:	4b e0       	ldi	r20, 0x0B	; 11
    2a24:	50 e0       	ldi	r21, 0x00	; 0
    2a26:	6f e5       	ldi	r22, 0x5F	; 95
    2a28:	71 e0       	ldi	r23, 0x01	; 1
    2a2a:	89 e6       	ldi	r24, 0x69	; 105
    2a2c:	90 e0       	ldi	r25, 0x00	; 0
    2a2e:	0e 94 e0 21 	call	0x43c0	; 0x43c0 <LCD_Display_Text>
			LCD_Display_Text(270,(const unsigned char*)Verdana14,82,37);	// high
    2a32:	25 e2       	ldi	r18, 0x25	; 37
    2a34:	30 e0       	ldi	r19, 0x00	; 0
    2a36:	42 e5       	ldi	r20, 0x52	; 82
    2a38:	50 e0       	ldi	r21, 0x00	; 0
    2a3a:	6f e5       	ldi	r22, 0x5F	; 95
    2a3c:	71 e0       	ldi	r23, 0x01	; 1
    2a3e:	8e e0       	ldi	r24, 0x0E	; 14
    2a40:	91 e0       	ldi	r25, 0x01	; 1
    2a42:	0c c0       	rjmp	.+24     	; 0x2a5c <Display_status+0x35a>
		}
		else if((General_error & (1 << DISARMED)) != 0)
    2a44:	80 91 16 05 	lds	r24, 0x0516
    2a48:	82 ff       	sbrs	r24, 2
    2a4a:	0a c0       	rjmp	.+20     	; 0x2a60 <Display_status+0x35e>
		{
			LCD_Display_Text(18,(const unsigned char*)Verdana14,25,37); 	// Disarmed
    2a4c:	25 e2       	ldi	r18, 0x25	; 37
    2a4e:	30 e0       	ldi	r19, 0x00	; 0
    2a50:	49 e1       	ldi	r20, 0x19	; 25
    2a52:	50 e0       	ldi	r21, 0x00	; 0
    2a54:	6f e5       	ldi	r22, 0x5F	; 95
    2a56:	71 e0       	ldi	r23, 0x01	; 1
    2a58:	82 e1       	ldi	r24, 0x12	; 18
    2a5a:	90 e0       	ldi	r25, 0x00	; 0
    2a5c:	0e 94 e0 21 	call	0x43c0	; 0x43c0 <LCD_Display_Text>
		}
	}

	// Write buffer to complete
	write_buffer(buffer);
    2a60:	80 e0       	ldi	r24, 0x00	; 0
    2a62:	91 e0       	ldi	r25, 0x01	; 1
    2a64:	0e 94 01 20 	call	0x4002	; 0x4002 <write_buffer>
	clear_buffer(buffer);
    2a68:	80 e0       	ldi	r24, 0x00	; 0
    2a6a:	91 e0       	ldi	r25, 0x01	; 1
    2a6c:	0e 94 33 20 	call	0x4066	; 0x4066 <clear_buffer>
}
    2a70:	0f 90       	pop	r0
    2a72:	0f 90       	pop	r0
    2a74:	0f 90       	pop	r0
    2a76:	0f 90       	pop	r0
    2a78:	df 91       	pop	r29
    2a7a:	cf 91       	pop	r28
    2a7c:	1f 91       	pop	r17
    2a7e:	0f 91       	pop	r16
    2a80:	ff 90       	pop	r15
    2a82:	ef 90       	pop	r14
    2a84:	df 90       	pop	r13
    2a86:	cf 90       	pop	r12
    2a88:	bf 90       	pop	r11
    2a8a:	08 95       	ret

00002a8c <Display_sticks>:
//************************************************************
// Code
//************************************************************

void Display_sticks(void)
{
    2a8c:	af 92       	push	r10
    2a8e:	bf 92       	push	r11
    2a90:	cf 92       	push	r12
    2a92:	df 92       	push	r13
    2a94:	ef 92       	push	r14
    2a96:	ff 92       	push	r15
    2a98:	0f 93       	push	r16
    2a9a:	1f 93       	push	r17
    2a9c:	cf 93       	push	r28
    2a9e:	df 93       	push	r29
	int8_t	temp_aileron, temp_elevator, temp_rudder;
	bool	CalibrateDone = false;
	bool	CalibrateStarted = false;

	// Save original settings in case user aborts
	temp_aileron = Config.AileronPol;
    2aa0:	d0 90 d1 05 	lds	r13, 0x05D1
	temp_elevator = Config.ElevatorPol;
    2aa4:	f0 90 d2 05 	lds	r15, 0x05D2
	temp_rudder = Config.RudderPol;
    2aa8:	a0 90 32 06 	lds	r10, 0x0632

	// Reset to defaults - not ideal, but it works
	Config.AileronPol = NORMAL;
    2aac:	10 92 d1 05 	sts	0x05D1, r1
	Config.ElevatorPol =  NORMAL;
    2ab0:	10 92 d2 05 	sts	0x05D2, r1
	Config.RudderPol = NORMAL;
    2ab4:	10 92 32 06 	sts	0x0632, r1
{
	int8_t	i;
	int8_t	offset;
	int8_t	temp_aileron, temp_elevator, temp_rudder;
	bool	CalibrateDone = false;
	bool	CalibrateStarted = false;
    2ab8:	d0 e0       	ldi	r29, 0x00	; 0
void Display_sticks(void)
{
	int8_t	i;
	int8_t	offset;
	int8_t	temp_aileron, temp_elevator, temp_rudder;
	bool	CalibrateDone = false;
    2aba:	c0 e0       	ldi	r28, 0x00	; 0
	Config.AileronPol = NORMAL;
	Config.ElevatorPol =  NORMAL;
	Config.RudderPol = NORMAL;

	// Until exit button pressed or complete
	while((BUTTON1 != 0) && (!CalibrateDone))
    2abc:	1f 9b       	sbis	0x03, 7	; 3
    2abe:	b6 c0       	rjmp	.+364    	; 0x2c2c <Display_sticks+0x1a0>
    2ac0:	c1 11       	cpse	r28, r1
    2ac2:	b6 c0       	rjmp	.+364    	; 0x2c30 <Display_sticks+0x1a4>
	{
		// Draw first stick on the left
		offset = 0;

		// Clear screen buffer
		clear_buffer(buffer);
    2ac4:	80 e0       	ldi	r24, 0x00	; 0
    2ac6:	91 e0       	ldi	r25, 0x01	; 1
    2ac8:	0e 94 33 20 	call	0x4066	; 0x4066 <clear_buffer>
    2acc:	92 e0       	ldi	r25, 0x02	; 2
    2ace:	c9 2e       	mov	r12, r25

	// Until exit button pressed or complete
	while((BUTTON1 != 0) && (!CalibrateDone))
	{
		// Draw first stick on the left
		offset = 0;
    2ad0:	10 e0       	ldi	r17, 0x00	; 0
		clear_buffer(buffer);

		// Draw graphic
		for (i = 0; i < 2; i++)
		{
			drawrect(buffer, 17 + offset, 0, 40, 40, 1);			// Box
    2ad2:	61 e1       	ldi	r22, 0x11	; 17
    2ad4:	61 0f       	add	r22, r17
    2ad6:	ee 24       	eor	r14, r14
    2ad8:	e3 94       	inc	r14
    2ada:	08 e2       	ldi	r16, 0x28	; 40
    2adc:	28 e2       	ldi	r18, 0x28	; 40
    2ade:	40 e0       	ldi	r20, 0x00	; 0
    2ae0:	80 e0       	ldi	r24, 0x00	; 0
    2ae2:	91 e0       	ldi	r25, 0x01	; 1
    2ae4:	0e 94 fd 20 	call	0x41fa	; 0x41fa <drawrect>
			drawline(buffer, 38 + offset,20, 48 + offset,  3, 1); 	// Line 1
    2ae8:	86 e2       	ldi	r24, 0x26	; 38
    2aea:	b8 2e       	mov	r11, r24
    2aec:	b1 0e       	add	r11, r17
    2aee:	20 e3       	ldi	r18, 0x30	; 48
    2af0:	21 0f       	add	r18, r17
    2af2:	03 e0       	ldi	r16, 0x03	; 3
    2af4:	44 e1       	ldi	r20, 0x14	; 20
    2af6:	6b 2d       	mov	r22, r11
    2af8:	80 e0       	ldi	r24, 0x00	; 0
    2afa:	91 e0       	ldi	r25, 0x01	; 1
    2afc:	0e 94 93 20 	call	0x4126	; 0x4126 <drawline>
			drawline(buffer, 41 + offset,21, 56 + offset,  6, 1); 	// Line 2
    2b00:	28 e3       	ldi	r18, 0x38	; 56
    2b02:	21 0f       	add	r18, r17
    2b04:	69 e2       	ldi	r22, 0x29	; 41
    2b06:	61 0f       	add	r22, r17
    2b08:	06 e0       	ldi	r16, 0x06	; 6
    2b0a:	45 e1       	ldi	r20, 0x15	; 21
    2b0c:	80 e0       	ldi	r24, 0x00	; 0
    2b0e:	91 e0       	ldi	r25, 0x01	; 1
    2b10:	0e 94 93 20 	call	0x4126	; 0x4126 <drawline>
			fillcircle(buffer, 38 + offset, 21, 2, 1);				// Center
    2b14:	01 e0       	ldi	r16, 0x01	; 1
    2b16:	22 e0       	ldi	r18, 0x02	; 2
    2b18:	45 e1       	ldi	r20, 0x15	; 21
    2b1a:	6b 2d       	mov	r22, r11
    2b1c:	80 e0       	ldi	r24, 0x00	; 0
    2b1e:	91 e0       	ldi	r25, 0x01	; 1
    2b20:	0e 94 4f 21 	call	0x429e	; 0x429e <fillcircle>
			fillcircle(buffer, 51 + offset, 5, 4, 1);				// End
    2b24:	63 e3       	ldi	r22, 0x33	; 51
    2b26:	61 0f       	add	r22, r17
    2b28:	24 e0       	ldi	r18, 0x04	; 4
    2b2a:	45 e0       	ldi	r20, 0x05	; 5
    2b2c:	80 e0       	ldi	r24, 0x00	; 0
    2b2e:	91 e0       	ldi	r25, 0x01	; 1
    2b30:	0e 94 4f 21 	call	0x429e	; 0x429e <fillcircle>
    2b34:	ca 94       	dec	r12

		// Clear screen buffer
		clear_buffer(buffer);

		// Draw graphic
		for (i = 0; i < 2; i++)
    2b36:	11 f0       	breq	.+4      	; 0x2b3c <Display_sticks+0xb0>
			drawline(buffer, 41 + offset,21, 56 + offset,  6, 1); 	// Line 2
			fillcircle(buffer, 38 + offset, 21, 2, 1);				// Center
			fillcircle(buffer, 51 + offset, 5, 4, 1);				// End

			// Draw second stick on the right
			offset = 52;
    2b38:	14 e3       	ldi	r17, 0x34	; 52
    2b3a:	cb cf       	rjmp	.-106    	; 0x2ad2 <Display_sticks+0x46>
		}

		// Print bottom text and markers
		LCD_Display_Text(12, (const unsigned char*)Wingdings, 0, 57); 		// Left
    2b3c:	29 e3       	ldi	r18, 0x39	; 57
    2b3e:	30 e0       	ldi	r19, 0x00	; 0
    2b40:	40 e0       	ldi	r20, 0x00	; 0
    2b42:	50 e0       	ldi	r21, 0x00	; 0
    2b44:	65 ef       	ldi	r22, 0xF5	; 245
    2b46:	70 e0       	ldi	r23, 0x00	; 0
    2b48:	8c e0       	ldi	r24, 0x0C	; 12
    2b4a:	90 e0       	ldi	r25, 0x00	; 0
    2b4c:	0e 94 e0 21 	call	0x43c0	; 0x43c0 <LCD_Display_Text>

		// If uncalibrated
		if (!CalibrateDone)
		{
			RxGetChannels();
    2b50:	0e 94 fa 42 	call	0x85f4	; 0x85f4 <RxGetChannels>
			
			// Display warning if sticks not centered or no RC signal while not started calibrating
			if (((RCinputs[AILERON] < -2000) || (RCinputs[AILERON] > 2000)) && !CalibrateStarted)
    2b54:	80 91 1d 08 	lds	r24, 0x081D
    2b58:	90 91 1e 08 	lds	r25, 0x081E
    2b5c:	80 33       	cpi	r24, 0x30	; 48
    2b5e:	98 4f       	sbci	r25, 0xF8	; 248
    2b60:	3c f0       	brlt	.+14     	; 0x2b70 <Display_sticks+0xe4>
    2b62:	80 91 1d 08 	lds	r24, 0x081D
    2b66:	90 91 1e 08 	lds	r25, 0x081E
    2b6a:	81 3d       	cpi	r24, 0xD1	; 209
    2b6c:	97 40       	sbci	r25, 0x07	; 7
    2b6e:	6c f0       	brlt	.+26     	; 0x2b8a <Display_sticks+0xfe>
    2b70:	d1 11       	cpse	r29, r1
    2b72:	0b c0       	rjmp	.+22     	; 0x2b8a <Display_sticks+0xfe>
			{
				LCD_Display_Text(135,(const unsigned char*)Verdana14,16,43); 	// "No RX signal?"
    2b74:	2b e2       	ldi	r18, 0x2B	; 43
    2b76:	30 e0       	ldi	r19, 0x00	; 0
    2b78:	40 e1       	ldi	r20, 0x10	; 16
    2b7a:	50 e0       	ldi	r21, 0x00	; 0
    2b7c:	6f e5       	ldi	r22, 0x5F	; 95
    2b7e:	71 e0       	ldi	r23, 0x01	; 1
    2b80:	87 e8       	ldi	r24, 0x87	; 135
    2b82:	90 e0       	ldi	r25, 0x00	; 0
    2b84:	0e 94 e0 21 	call	0x43c0	; 0x43c0 <LCD_Display_Text>
    2b88:	4c c0       	rjmp	.+152    	; 0x2c22 <Display_sticks+0x196>
			}

			// Sticks have not moved far enough but RC being received
			else if ((RCinputs[AILERON] < 500) && (RCinputs[AILERON] > -500))
    2b8a:	80 91 1d 08 	lds	r24, 0x081D
    2b8e:	90 91 1e 08 	lds	r25, 0x081E
    2b92:	84 3f       	cpi	r24, 0xF4	; 244
    2b94:	91 40       	sbci	r25, 0x01	; 1
    2b96:	9c f4       	brge	.+38     	; 0x2bbe <Display_sticks+0x132>
    2b98:	80 91 1d 08 	lds	r24, 0x081D
    2b9c:	90 91 1e 08 	lds	r25, 0x081E
    2ba0:	8d 30       	cpi	r24, 0x0D	; 13
    2ba2:	9e 4f       	sbci	r25, 0xFE	; 254
    2ba4:	64 f0       	brlt	.+24     	; 0x2bbe <Display_sticks+0x132>
			{
				CalibrateStarted = true;
				LCD_Display_Text(136,(const unsigned char*)Verdana14,9,43); 	// "Hold as shown"
    2ba6:	2b e2       	ldi	r18, 0x2B	; 43
    2ba8:	30 e0       	ldi	r19, 0x00	; 0
    2baa:	49 e0       	ldi	r20, 0x09	; 9
    2bac:	50 e0       	ldi	r21, 0x00	; 0
    2bae:	6f e5       	ldi	r22, 0x5F	; 95
    2bb0:	71 e0       	ldi	r23, 0x01	; 1
    2bb2:	88 e8       	ldi	r24, 0x88	; 136
    2bb4:	90 e0       	ldi	r25, 0x00	; 0
    2bb6:	0e 94 e0 21 	call	0x43c0	; 0x43c0 <LCD_Display_Text>
			}

			// Sticks have not moved far enough but RC being received
			else if ((RCinputs[AILERON] < 500) && (RCinputs[AILERON] > -500))
			{
				CalibrateStarted = true;
    2bba:	d1 e0       	ldi	r29, 0x01	; 1
				LCD_Display_Text(136,(const unsigned char*)Verdana14,9,43); 	// "Hold as shown"
    2bbc:	32 c0       	rjmp	.+100    	; 0x2c22 <Display_sticks+0x196>

			// Sticks should now be in the right position
			// Reverse wrong input channels
			else
			{
				if (RCinputs[AILERON] < 0)
    2bbe:	80 91 1d 08 	lds	r24, 0x081D
    2bc2:	90 91 1e 08 	lds	r25, 0x081E
    2bc6:	97 ff       	sbrs	r25, 7
    2bc8:	03 c0       	rjmp	.+6      	; 0x2bd0 <Display_sticks+0x144>
				{
					Config.AileronPol = REVERSED;
    2bca:	81 e0       	ldi	r24, 0x01	; 1
    2bcc:	80 93 d1 05 	sts	0x05D1, r24
				}

				if (RCinputs[ELEVATOR] < 0)
    2bd0:	80 91 1f 08 	lds	r24, 0x081F
    2bd4:	90 91 20 08 	lds	r25, 0x0820
    2bd8:	97 ff       	sbrs	r25, 7
    2bda:	03 c0       	rjmp	.+6      	; 0x2be2 <Display_sticks+0x156>
				{
					Config.ElevatorPol = REVERSED;
    2bdc:	81 e0       	ldi	r24, 0x01	; 1
    2bde:	80 93 d2 05 	sts	0x05D2, r24
				}

				if (RCinputs[RUDDER] < 0)
    2be2:	80 91 21 08 	lds	r24, 0x0821
    2be6:	90 91 22 08 	lds	r25, 0x0822
    2bea:	97 ff       	sbrs	r25, 7
    2bec:	03 c0       	rjmp	.+6      	; 0x2bf4 <Display_sticks+0x168>
				{
					Config.RudderPol = REVERSED;
    2bee:	81 e0       	ldi	r24, 0x01	; 1
    2bf0:	80 93 32 06 	sts	0x0632, r24
				}

				// If all positive - done!
				if ((RCinputs[AILERON] > 0) && (RCinputs[ELEVATOR] > 0) && (RCinputs[RUDDER] > 0))
    2bf4:	80 91 1d 08 	lds	r24, 0x081D
    2bf8:	90 91 1e 08 	lds	r25, 0x081E
    2bfc:	18 16       	cp	r1, r24
    2bfe:	19 06       	cpc	r1, r25
    2c00:	84 f4       	brge	.+32     	; 0x2c22 <Display_sticks+0x196>
    2c02:	80 91 1f 08 	lds	r24, 0x081F
    2c06:	90 91 20 08 	lds	r25, 0x0820
    2c0a:	18 16       	cp	r1, r24
    2c0c:	19 06       	cpc	r1, r25
    2c0e:	4c f4       	brge	.+18     	; 0x2c22 <Display_sticks+0x196>
    2c10:	80 91 21 08 	lds	r24, 0x0821
    2c14:	90 91 22 08 	lds	r25, 0x0822
    2c18:	c1 e0       	ldi	r28, 0x01	; 1
    2c1a:	18 16       	cp	r1, r24
    2c1c:	19 06       	cpc	r1, r25
    2c1e:	0c f0       	brlt	.+2      	; 0x2c22 <Display_sticks+0x196>
    2c20:	c0 e0       	ldi	r28, 0x00	; 0
				}
			}
		}

		// Update buffer
		write_buffer(buffer);
    2c22:	80 e0       	ldi	r24, 0x00	; 0
    2c24:	91 e0       	ldi	r25, 0x01	; 1
    2c26:	0e 94 01 20 	call	0x4002	; 0x4002 <write_buffer>
    2c2a:	48 cf       	rjmp	.-368    	; 0x2abc <Display_sticks+0x30>
	}

	// Save value and return
	if (CalibrateDone)
    2c2c:	cc 23       	and	r28, r28
    2c2e:	39 f1       	breq	.+78     	; 0x2c7e <Display_sticks+0x1f2>
	{
		LCD_Display_Text(137,(const unsigned char*)Verdana14,40,43); 	// "Done!"
    2c30:	2b e2       	ldi	r18, 0x2B	; 43
    2c32:	30 e0       	ldi	r19, 0x00	; 0
    2c34:	48 e2       	ldi	r20, 0x28	; 40
    2c36:	50 e0       	ldi	r21, 0x00	; 0
    2c38:	6f e5       	ldi	r22, 0x5F	; 95
    2c3a:	71 e0       	ldi	r23, 0x01	; 1
    2c3c:	89 e8       	ldi	r24, 0x89	; 137
    2c3e:	90 e0       	ldi	r25, 0x00	; 0
    2c40:	0e 94 e0 21 	call	0x43c0	; 0x43c0 <LCD_Display_Text>
		// Update buffer
		write_buffer(buffer);
    2c44:	80 e0       	ldi	r24, 0x00	; 0
    2c46:	91 e0       	ldi	r25, 0x01	; 1
    2c48:	0e 94 01 20 	call	0x4002	; 0x4002 <write_buffer>
		clear_buffer(buffer);
    2c4c:	80 e0       	ldi	r24, 0x00	; 0
    2c4e:	91 e0       	ldi	r25, 0x01	; 1
    2c50:	0e 94 33 20 	call	0x4066	; 0x4066 <clear_buffer>
    2c54:	8f e7       	ldi	r24, 0x7F	; 127
    2c56:	94 e8       	ldi	r25, 0x84	; 132
    2c58:	2e e1       	ldi	r18, 0x1E	; 30
    2c5a:	81 50       	subi	r24, 0x01	; 1
    2c5c:	90 40       	sbci	r25, 0x00	; 0
    2c5e:	20 40       	sbci	r18, 0x00	; 0
    2c60:	e1 f7       	brne	.-8      	; 0x2c5a <Display_sticks+0x1ce>
    2c62:	00 c0       	rjmp	.+0      	; 0x2c64 <Display_sticks+0x1d8>
    2c64:	00 00       	nop
		// Restore old settings if failed
		Config.AileronPol = temp_aileron;
		Config.ElevatorPol = temp_elevator;
		Config.RudderPol = temp_rudder;
	}
}
    2c66:	df 91       	pop	r29
    2c68:	cf 91       	pop	r28
    2c6a:	1f 91       	pop	r17
    2c6c:	0f 91       	pop	r16
    2c6e:	ff 90       	pop	r15
    2c70:	ef 90       	pop	r14
    2c72:	df 90       	pop	r13
    2c74:	cf 90       	pop	r12
    2c76:	bf 90       	pop	r11
    2c78:	af 90       	pop	r10
		// Update buffer
		write_buffer(buffer);
		clear_buffer(buffer);
		// Pause so that the "Done!" text is readable
		_delay_ms(500);
		Save_Config_to_EEPROM();
    2c7a:	0c 94 88 16 	jmp	0x2d10	; 0x2d10 <Save_Config_to_EEPROM>
 	}
	else
	{
		// Restore old settings if failed
		Config.AileronPol = temp_aileron;
    2c7e:	d0 92 d1 05 	sts	0x05D1, r13
		Config.ElevatorPol = temp_elevator;
    2c82:	f0 92 d2 05 	sts	0x05D2, r15
		Config.RudderPol = temp_rudder;
    2c86:	a0 92 32 06 	sts	0x0632, r10
	}
}
    2c8a:	df 91       	pop	r29
    2c8c:	cf 91       	pop	r28
    2c8e:	1f 91       	pop	r17
    2c90:	0f 91       	pop	r16
    2c92:	ff 90       	pop	r15
    2c94:	ef 90       	pop	r14
    2c96:	df 90       	pop	r13
    2c98:	cf 90       	pop	r12
    2c9a:	bf 90       	pop	r11
    2c9c:	af 90       	pop	r10
    2c9e:	08 95       	ret

00002ca0 <eeprom_write_byte_changed>:
}

// addr is the address in eeprom
// value is the value to be written
void eeprom_write_byte_changed(uint8_t *addr, uint8_t value)
{
    2ca0:	0f 93       	push	r16
    2ca2:	1f 93       	push	r17
    2ca4:	cf 93       	push	r28
    2ca6:	df 93       	push	r29
    2ca8:	1f 92       	push	r1
    2caa:	cd b7       	in	r28, 0x3d	; 61
    2cac:	de b7       	in	r29, 0x3e	; 62
    2cae:	8c 01       	movw	r16, r24
	if (eeprom_read_byte(addr) != value)
    2cb0:	69 83       	std	Y+1, r22	; 0x01
    2cb2:	0e 94 ee 48 	call	0x91dc	; 0x91dc <__eerd_byte_m644pa>
    2cb6:	69 81       	ldd	r22, Y+1	; 0x01
    2cb8:	86 17       	cp	r24, r22
    2cba:	41 f0       	breq	.+16     	; 0x2ccc <eeprom_write_byte_changed+0x2c>
	{
		// void eeprom_write_byte (uint8_t *__p, uint8_t __value);
		eeprom_write_byte(addr, value);
    2cbc:	c8 01       	movw	r24, r16
	}
}
    2cbe:	0f 90       	pop	r0
    2cc0:	df 91       	pop	r29
    2cc2:	cf 91       	pop	r28
    2cc4:	1f 91       	pop	r17
    2cc6:	0f 91       	pop	r16
void eeprom_write_byte_changed(uint8_t *addr, uint8_t value)
{
	if (eeprom_read_byte(addr) != value)
	{
		// void eeprom_write_byte (uint8_t *__p, uint8_t __value);
		eeprom_write_byte(addr, value);
    2cc8:	0c 94 f6 48 	jmp	0x91ec	; 0x91ec <__eewr_byte_m644pa>
	}
}
    2ccc:	0f 90       	pop	r0
    2cce:	df 91       	pop	r29
    2cd0:	cf 91       	pop	r28
    2cd2:	1f 91       	pop	r17
    2cd4:	0f 91       	pop	r16
    2cd6:	08 95       	ret

00002cd8 <eeprom_write_block_changes>:
}

// src is the address in RAM
// dest is the address in eeprom (hence const)
void eeprom_write_block_changes(uint8_t *src, uint8_t *dest, uint16_t size)
{ 
    2cd8:	ef 92       	push	r14
    2cda:	ff 92       	push	r15
    2cdc:	0f 93       	push	r16
    2cde:	1f 93       	push	r17
    2ce0:	cf 93       	push	r28
    2ce2:	df 93       	push	r29
    2ce4:	ec 01       	movw	r28, r24
    2ce6:	8b 01       	movw	r16, r22
    2ce8:	7a 01       	movw	r14, r20
    2cea:	e8 0e       	add	r14, r24
    2cec:	f9 1e       	adc	r15, r25
	uint16_t len;
	uint8_t value;

	for (len=0; len < size; len++)
    2cee:	ce 15       	cp	r28, r14
    2cf0:	df 05       	cpc	r29, r15
    2cf2:	39 f0       	breq	.+14     	; 0x2d02 <eeprom_write_block_changes+0x2a>
	{
		// Get value at src
		value = *src;
		
		// Write the value at src to dest
		eeprom_write_byte_changed(dest, value);
    2cf4:	69 91       	ld	r22, Y+
    2cf6:	c8 01       	movw	r24, r16
    2cf8:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <eeprom_write_byte_changed>
		src++;
		dest++;
    2cfc:	0f 5f       	subi	r16, 0xFF	; 255
    2cfe:	1f 4f       	sbci	r17, 0xFF	; 255
    2d00:	f6 cf       	rjmp	.-20     	; 0x2cee <eeprom_write_block_changes+0x16>
	}
}
    2d02:	df 91       	pop	r29
    2d04:	cf 91       	pop	r28
    2d06:	1f 91       	pop	r17
    2d08:	0f 91       	pop	r16
    2d0a:	ff 90       	pop	r15
    2d0c:	ef 90       	pop	r14
    2d0e:	08 95       	ret

00002d10 <Save_Config_to_EEPROM>:
const uint8_t	FUTABA[MAX_RC_CHANNELS] PROGMEM = {1,2,0,3,4,5,6,7}; 	// Futaba channel sequence (AETRGF12)

void Save_Config_to_EEPROM(void)
{
	// Write to eeProm
	cli();
    2d10:	f8 94       	cli
	eeprom_write_block_changes((uint8_t*)&Config, (uint8_t*)EEPROM_DATA_START_POS, sizeof(CONFIG_STRUCT));	
    2d12:	48 e0       	ldi	r20, 0x08	; 8
    2d14:	52 e0       	ldi	r21, 0x02	; 2
    2d16:	60 e0       	ldi	r22, 0x00	; 0
    2d18:	70 e0       	ldi	r23, 0x00	; 0
    2d1a:	81 ea       	ldi	r24, 0xA1	; 161
    2d1c:	95 e0       	ldi	r25, 0x05	; 5
    2d1e:	0e 94 6c 16 	call	0x2cd8	; 0x2cd8 <eeprom_write_block_changes>
	sei();
    2d22:	78 94       	sei
    2d24:	08 95       	ret

00002d26 <Update_V1_0_to_V1_1>:
// Config data restructure code
//************************************************************

// Upgrade V1.0 structure to V1.1 structure
void Update_V1_0_to_V1_1(void)
{
    2d26:	2f 92       	push	r2
    2d28:	3f 92       	push	r3
    2d2a:	4f 92       	push	r4
    2d2c:	5f 92       	push	r5
    2d2e:	6f 92       	push	r6
    2d30:	7f 92       	push	r7
    2d32:	8f 92       	push	r8
    2d34:	9f 92       	push	r9
    2d36:	af 92       	push	r10
    2d38:	bf 92       	push	r11
    2d3a:	cf 92       	push	r12
    2d3c:	df 92       	push	r13
    2d3e:	ef 92       	push	r14
    2d40:	ff 92       	push	r15
    2d42:	0f 93       	push	r16
    2d44:	1f 93       	push	r17
    2d46:	cf 93       	push	r28
    2d48:	df 93       	push	r29
    2d4a:	cd b7       	in	r28, 0x3d	; 61
    2d4c:	de b7       	in	r29, 0x3e	; 62
    2d4e:	c5 54       	subi	r28, 0x45	; 69
    2d50:	d1 40       	sbci	r29, 0x01	; 1
    2d52:	0f b6       	in	r0, 0x3f	; 63
    2d54:	f8 94       	cli
    2d56:	de bf       	out	0x3e, r29	; 62
    2d58:	0f be       	out	0x3f, r0	; 63
    2d5a:	cd bf       	out	0x3d, r28	; 61
	int8_t		P2_scale;				// P2 sensor scale flags (6)

	// Save old P2 Source B volume. For some reason it gets clobbered.
	// We mustn't use hard-coded values are these change each version.
	// Use an offset from the current Config structure address
	memcpy((void*)&temp,(void*)((&Config.setup) + (377)),1);
    2d5c:	40 91 1a 07 	lds	r20, 0x071A
    2d60:	cf 5b       	subi	r28, 0xBF	; 191
    2d62:	de 4f       	sbci	r29, 0xFE	; 254
    2d64:	48 83       	st	Y, r20
    2d66:	c1 54       	subi	r28, 0x41	; 65
    2d68:	d1 40       	sbci	r29, 0x01	; 1
	 
	// Move data that exists after the channel mixer to new location
	// Hard-coded to V1.0 RAM offset	
	memmove((void*)&Config.Servo_reverse, (void*)((&Config.setup) + (378)), 74);	// RAM location determined empirically
    2d6a:	4a e4       	ldi	r20, 0x4A	; 74
    2d6c:	50 e0       	ldi	r21, 0x00	; 0
    2d6e:	6b e1       	ldi	r22, 0x1B	; 27
    2d70:	77 e0       	ldi	r23, 0x07	; 7
    2d72:	83 e6       	ldi	r24, 0x63	; 99
    2d74:	97 e0       	ldi	r25, 0x07	; 7
    2d76:	0e 94 a7 48 	call	0x914e	; 0x914e <memmove>
    2d7a:	23 e3       	ldi	r18, 0x33	; 51
    2d7c:	36 e0       	ldi	r19, 0x06	; 6
    2d7e:	ae 01       	movw	r20, r28
    2d80:	4f 5c       	subi	r20, 0xCF	; 207
    2d82:	5e 4f       	sbci	r21, 0xFE	; 254
    2d84:	ce 01       	movw	r24, r28
    2d86:	01 96       	adiw	r24, 0x01	; 1
	{
		src = (void*)Config.Channel;	// Same location as old one
		dst = (void*)mixer_buffer;
		src += (i * OLDSIZE);			// Step to next old data in (corrupted) config structure
		dst += (i * NEWSIZE);			// Step to next location for new data in the buffer
		memcpy(dst, src, OLDSIZE);		// Move only the old (smaller) data
    2d88:	6d e1       	ldi	r22, 0x1D	; 29
    2d8a:	f9 01       	movw	r30, r18
    2d8c:	dc 01       	movw	r26, r24
    2d8e:	76 2f       	mov	r23, r22
    2d90:	01 90       	ld	r0, Z+
    2d92:	0d 92       	st	X+, r0
    2d94:	7a 95       	dec	r23
    2d96:	e1 f7       	brne	.-8      	; 0x2d90 <Update_V1_0_to_V1_1+0x6a>
    2d98:	86 96       	adiw	r24, 0x26	; 38
    2d9a:	23 5e       	subi	r18, 0xE3	; 227
    2d9c:	3f 4f       	sbci	r19, 0xFF	; 255
	// Move data that exists after the channel mixer to new location
	// Hard-coded to V1.0 RAM offset	
	memmove((void*)&Config.Servo_reverse, (void*)((&Config.setup) + (378)), 74);	// RAM location determined empirically
	
	// Copy the old channel[] structure into buffer, spaced out to match the new structure
	for (i = 0; i < MAX_OUTPUTS; i++)
    2d9e:	84 17       	cp	r24, r20
    2da0:	95 07       	cpc	r25, r21
    2da2:	99 f7       	brne	.-26     	; 0x2d8a <Update_V1_0_to_V1_1+0x64>
    2da4:	4e 01       	movw	r8, r28
    2da6:	83 e1       	ldi	r24, 0x13	; 19
    2da8:	88 0e       	add	r8, r24
    2daa:	91 1c       	adc	r9, r1
    2dac:	5e 01       	movw	r10, r28
    2dae:	94 e1       	ldi	r25, 0x14	; 20
    2db0:	a9 0e       	add	r10, r25
    2db2:	b1 1c       	adc	r11, r1
    2db4:	6e 01       	movw	r12, r28
    2db6:	e5 e1       	ldi	r30, 0x15	; 21
    2db8:	ce 0e       	add	r12, r30
    2dba:	d1 1c       	adc	r13, r1
    2dbc:	ce 01       	movw	r24, r28
    2dbe:	46 96       	adiw	r24, 0x16	; 22
    2dc0:	cf 5c       	subi	r28, 0xCF	; 207
    2dc2:	de 4f       	sbci	r29, 0xFE	; 254
    2dc4:	99 83       	std	Y+1, r25	; 0x01
    2dc6:	88 83       	st	Y, r24
    2dc8:	c1 53       	subi	r28, 0x31	; 49
    2dca:	d1 40       	sbci	r29, 0x01	; 1
    2dcc:	8e 01       	movw	r16, r28
    2dce:	02 5e       	subi	r16, 0xE2	; 226
    2dd0:	1f 4f       	sbci	r17, 0xFF	; 255
    2dd2:	fe 01       	movw	r30, r28
    2dd4:	7d 96       	adiw	r30, 0x1d	; 29
    2dd6:	c7 5c       	subi	r28, 0xC7	; 199
    2dd8:	de 4f       	sbci	r29, 0xFE	; 254
    2dda:	f9 83       	std	Y+1, r31	; 0x01
    2ddc:	e8 83       	st	Y, r30
    2dde:	c9 53       	subi	r28, 0x39	; 57
    2de0:	d1 40       	sbci	r29, 0x01	; 1
    2de2:	06 96       	adiw	r24, 0x06	; 6
    2de4:	cd 5c       	subi	r28, 0xCD	; 205
    2de6:	de 4f       	sbci	r29, 0xFE	; 254
    2de8:	99 83       	std	Y+1, r25	; 0x01
    2dea:	88 83       	st	Y, r24
    2dec:	c3 53       	subi	r28, 0x33	; 51
    2dee:	d1 40       	sbci	r29, 0x01	; 1
    2df0:	32 97       	sbiw	r30, 0x02	; 2
    2df2:	c3 5c       	subi	r28, 0xC3	; 195
    2df4:	de 4f       	sbci	r29, 0xFE	; 254
    2df6:	f9 83       	std	Y+1, r31	; 0x01
    2df8:	e8 83       	st	Y, r30
    2dfa:	cd 53       	subi	r28, 0x3D	; 61
    2dfc:	d1 40       	sbci	r29, 0x01	; 1
    2dfe:	02 97       	sbiw	r24, 0x02	; 2
    2e00:	c9 5c       	subi	r28, 0xC9	; 201
    2e02:	de 4f       	sbci	r29, 0xFE	; 254
    2e04:	99 83       	std	Y+1, r25	; 0x01
    2e06:	88 83       	st	Y, r24
    2e08:	c7 53       	subi	r28, 0x37	; 55
    2e0a:	d1 40       	sbci	r29, 0x01	; 1
    2e0c:	32 97       	sbiw	r30, 0x02	; 2
    2e0e:	c5 5c       	subi	r28, 0xC5	; 197
    2e10:	de 4f       	sbci	r29, 0xFE	; 254
    2e12:	f9 83       	std	Y+1, r31	; 0x01
    2e14:	e8 83       	st	Y, r30
    2e16:	cb 53       	subi	r28, 0x3B	; 59
    2e18:	d1 40       	sbci	r29, 0x01	; 1
    2e1a:	02 97       	sbiw	r24, 0x02	; 2
    2e1c:	cb 5c       	subi	r28, 0xCB	; 203
    2e1e:	de 4f       	sbci	r29, 0xFE	; 254
    2e20:	99 83       	std	Y+1, r25	; 0x01
    2e22:	88 83       	st	Y, r24
    2e24:	c5 53       	subi	r28, 0x35	; 53
    2e26:	d1 40       	sbci	r29, 0x01	; 1
    2e28:	7e 01       	movw	r14, r28
    2e2a:	97 e1       	ldi	r25, 0x17	; 23
    2e2c:	e9 0e       	add	r14, r25
    2e2e:	f1 1c       	adc	r15, r1
    2e30:	3e 01       	movw	r6, r28
    2e32:	e5 e0       	ldi	r30, 0x05	; 5
    2e34:	6e 0e       	add	r6, r30
    2e36:	71 1c       	adc	r7, r1
    2e38:	81 e0       	ldi	r24, 0x01	; 1
    2e3a:	90 e0       	ldi	r25, 0x00	; 0
    2e3c:	8c 0f       	add	r24, r28
    2e3e:	9d 1f       	adc	r25, r29
    2e40:	83 5b       	subi	r24, 0xB3	; 179
    2e42:	9e 4f       	sbci	r25, 0xFE	; 254
    2e44:	ce 5b       	subi	r28, 0xBE	; 190
    2e46:	de 4f       	sbci	r29, 0xFE	; 254
    2e48:	99 83       	std	Y+1, r25	; 0x01
    2e4a:	88 83       	st	Y, r24
    2e4c:	c2 54       	subi	r28, 0x42	; 66
    2e4e:	d1 40       	sbci	r29, 0x01	; 1
    2e50:	fe 01       	movw	r30, r28
    2e52:	31 96       	adiw	r30, 0x01	; 1
    2e54:	c1 5c       	subi	r28, 0xC1	; 193
    2e56:	de 4f       	sbci	r29, 0xFE	; 254
    2e58:	f9 83       	std	Y+1, r31	; 0x01
    2e5a:	e8 83       	st	Y, r30
    2e5c:	cf 53       	subi	r28, 0x3F	; 63
    2e5e:	d1 40       	sbci	r29, 0x01	; 1
		
		// Take old motor marker switch and convert
		if ((P1_sensors & (1 << MotorMarker)) != 0)
		{
			// Set the new value in the right place
			mixer_buffer[4 + (i * NEWSIZE)] = MOTOR;
    2e60:	82 e0       	ldi	r24, 0x02	; 2
    2e62:	58 2e       	mov	r5, r24
			{
				mixer_buffer[18 + (i * NEWSIZE)] = SCALE;
			}
			else
			{
				mixer_buffer[18 + (i * NEWSIZE)] = ON;
    2e64:	44 24       	eor	r4, r4
    2e66:	43 94       	inc	r4
	for (i = 0; i < MAX_OUTPUTS; i++)
	{
		// Move all bytes from the OLD P1_offset [4] up by one to make space for the Motor_marker byte
		src = &mixer_buffer[4 + (i * NEWSIZE)];	// The old P1_offset byte
		dst = &mixer_buffer[5 + (i * NEWSIZE)];
		memmove(dst, src, (OLDSIZE - 4));// Move all but P1_value, P2_value
    2e68:	49 e1       	ldi	r20, 0x19	; 25
    2e6a:	50 e0       	ldi	r21, 0x00	; 0
    2e6c:	b3 01       	movw	r22, r6
    2e6e:	c8 01       	movw	r24, r16
    2e70:	48 97       	sbiw	r24, 0x18	; 24
    2e72:	0e 94 a7 48 	call	0x914e	; 0x914e <memmove>

		// Save the old switches
		P1_sensors = mixer_buffer[18 + (i * NEWSIZE)];
    2e76:	f4 01       	movw	r30, r8
    2e78:	30 80       	ld	r3, Z
		P2_sensors = mixer_buffer[19 + (i * NEWSIZE)];
    2e7a:	f5 01       	movw	r30, r10
    2e7c:	20 81       	ld	r18, Z
		P1_scale = mixer_buffer[20 + (i * NEWSIZE)];
    2e7e:	f6 01       	movw	r30, r12
    2e80:	30 81       	ld	r19, Z
		P2_scale = mixer_buffer[21 + (i * NEWSIZE)];
    2e82:	cf 5c       	subi	r28, 0xCF	; 207
    2e84:	de 4f       	sbci	r29, 0xFE	; 254
    2e86:	e8 81       	ld	r30, Y
    2e88:	f9 81       	ldd	r31, Y+1	; 0x01
    2e8a:	c1 53       	subi	r28, 0x31	; 49
    2e8c:	d1 40       	sbci	r29, 0x01	; 1
    2e8e:	20 80       	ld	r2, Z
		
		// Take old motor marker switch and convert
		if ((P1_sensors & (1 << MotorMarker)) != 0)
		{
			// Set the new value in the right place
			mixer_buffer[4 + (i * NEWSIZE)] = MOTOR;
    2e90:	f3 01       	movw	r30, r6
		P2_sensors = mixer_buffer[19 + (i * NEWSIZE)];
		P1_scale = mixer_buffer[20 + (i * NEWSIZE)];
		P2_scale = mixer_buffer[21 + (i * NEWSIZE)];
		
		// Take old motor marker switch and convert
		if ((P1_sensors & (1 << MotorMarker)) != 0)
    2e92:	36 fe       	sbrs	r3, 6
    2e94:	02 c0       	rjmp	.+4      	; 0x2e9a <Update_V1_0_to_V1_1+0x174>
		{
			// Set the new value in the right place
			mixer_buffer[4 + (i * NEWSIZE)] = MOTOR;
    2e96:	50 82       	st	Z, r5
    2e98:	01 c0       	rjmp	.+2      	; 0x2e9c <Update_V1_0_to_V1_1+0x176>
		}
		else
		{
			mixer_buffer[4 + (i * NEWSIZE)] = ASERVO;
    2e9a:	10 82       	st	Z, r1
		}

		// Move the universal source bytes (8) up eight bytes
		src = &mixer_buffer[22 + (i * NEWSIZE)]; // 21 + 1
		dst = &mixer_buffer[30 + (i * NEWSIZE)];
		memmove(dst, src, 8);
    2e9c:	48 e0       	ldi	r20, 0x08	; 8
    2e9e:	50 e0       	ldi	r21, 0x00	; 0
    2ea0:	b7 01       	movw	r22, r14
    2ea2:	c8 01       	movw	r24, r16
    2ea4:	01 96       	adiw	r24, 0x01	; 1
    2ea6:	cc 5b       	subi	r28, 0xBC	; 188
    2ea8:	de 4f       	sbci	r29, 0xFE	; 254
    2eaa:	28 83       	st	Y, r18
    2eac:	c4 54       	subi	r28, 0x44	; 68
    2eae:	d1 40       	sbci	r29, 0x01	; 1
    2eb0:	cb 5b       	subi	r28, 0xBB	; 187
    2eb2:	de 4f       	sbci	r29, 0xFE	; 254
    2eb4:	38 83       	st	Y, r19
    2eb6:	c5 54       	subi	r28, 0x45	; 69
    2eb8:	d1 40       	sbci	r29, 0x01	; 1
    2eba:	0e 94 a7 48 	call	0x914e	; 0x914e <memmove>
    2ebe:	80 e0       	ldi	r24, 0x00	; 0
    2ec0:	90 e0       	ldi	r25, 0x00	; 0
    2ec2:	cb 5b       	subi	r28, 0xBB	; 187
    2ec4:	de 4f       	sbci	r29, 0xFE	; 254
    2ec6:	38 81       	ld	r19, Y
    2ec8:	c5 54       	subi	r28, 0x45	; 69
    2eca:	d1 40       	sbci	r29, 0x01	; 1
    2ecc:	cc 5b       	subi	r28, 0xBC	; 188
    2ece:	de 4f       	sbci	r29, 0xFE	; 254
    2ed0:	28 81       	ld	r18, Y
    2ed2:	c4 54       	subi	r28, 0x44	; 68
    2ed4:	d1 40       	sbci	r29, 0x01	; 1
    2ed6:	c1 5c       	subi	r28, 0xC1	; 193
    2ed8:	de 4f       	sbci	r29, 0xFE	; 254
    2eda:	e8 81       	ld	r30, Y
    2edc:	f9 81       	ldd	r31, Y+1	; 0x01
    2ede:	cf 53       	subi	r28, 0x3F	; 63
    2ee0:	d1 40       	sbci	r29, 0x01	; 1
    2ee2:	e8 0f       	add	r30, r24
    2ee4:	f9 1f       	adc	r31, r25
		
		// Convert old "None" settings to new ones
		// Skip every second byte
		for (j = 0; j < 8; j += 2)
		{
			if (mixer_buffer[30 + (i * NEWSIZE) + j] == 13) // 13 was the old "None"
    2ee6:	46 8d       	ldd	r20, Z+30	; 0x1e
    2ee8:	4d 30       	cpi	r20, 0x0D	; 13
    2eea:	11 f4       	brne	.+4      	; 0x2ef0 <Update_V1_0_to_V1_1+0x1ca>
			{
				mixer_buffer[30 + (i * NEWSIZE) + j] = NOMIX;
    2eec:	4f e0       	ldi	r20, 0x0F	; 15
    2eee:	46 8f       	std	Z+30, r20	; 0x1e
    2ef0:	02 96       	adiw	r24, 0x02	; 2
		memmove(dst, src, 8);

		
		// Convert old "None" settings to new ones
		// Skip every second byte
		for (j = 0; j < 8; j += 2)
    2ef2:	88 30       	cpi	r24, 0x08	; 8
    2ef4:	91 05       	cpc	r25, r1
    2ef6:	79 f7       	brne	.-34     	; 0x2ed6 <Update_V1_0_to_V1_1+0x1b0>
		// P1 roll gyro
		if ((P1_sensors & (1 << RollGyro)) != 0)
		{
			if ((P1_scale & (1 << RollScale)) != 0)
			{
				mixer_buffer[18 + (i * NEWSIZE)] = SCALE;
    2ef8:	f4 01       	movw	r30, r8
			}			
		}

		// Expand the old switches into new bytes
		// P1 roll gyro
		if ((P1_sensors & (1 << RollGyro)) != 0)
    2efa:	30 fe       	sbrs	r3, 0
    2efc:	06 c0       	rjmp	.+12     	; 0x2f0a <Update_V1_0_to_V1_1+0x1e4>
		{
			if ((P1_scale & (1 << RollScale)) != 0)
    2efe:	30 ff       	sbrs	r19, 0
    2f00:	02 c0       	rjmp	.+4      	; 0x2f06 <Update_V1_0_to_V1_1+0x1e0>
			{
				mixer_buffer[18 + (i * NEWSIZE)] = SCALE;
    2f02:	50 82       	st	Z, r5
    2f04:	03 c0       	rjmp	.+6      	; 0x2f0c <Update_V1_0_to_V1_1+0x1e6>
			}
			else
			{
				mixer_buffer[18 + (i * NEWSIZE)] = ON;
    2f06:	40 82       	st	Z, r4
    2f08:	01 c0       	rjmp	.+2      	; 0x2f0c <Update_V1_0_to_V1_1+0x1e6>
			}
		}
		else
		{
			mixer_buffer[18 + (i * NEWSIZE)] = OFF;
    2f0a:	10 82       	st	Z, r1
		// P2 roll gyro
		if ((P2_sensors & (1 << RollGyro)) != 0)
		{
			if ((P2_scale & (1 << RollScale)) != 0)
			{
				mixer_buffer[19 + (i * NEWSIZE)] = SCALE;
    2f0c:	f5 01       	movw	r30, r10
		{
			mixer_buffer[18 + (i * NEWSIZE)] = OFF;
		}

		// P2 roll gyro
		if ((P2_sensors & (1 << RollGyro)) != 0)
    2f0e:	20 ff       	sbrs	r18, 0
    2f10:	06 c0       	rjmp	.+12     	; 0x2f1e <Update_V1_0_to_V1_1+0x1f8>
		{
			if ((P2_scale & (1 << RollScale)) != 0)
    2f12:	20 fe       	sbrs	r2, 0
    2f14:	02 c0       	rjmp	.+4      	; 0x2f1a <Update_V1_0_to_V1_1+0x1f4>
			{
				mixer_buffer[19 + (i * NEWSIZE)] = SCALE;
    2f16:	50 82       	st	Z, r5
    2f18:	03 c0       	rjmp	.+6      	; 0x2f20 <Update_V1_0_to_V1_1+0x1fa>
			}
			else
			{
				mixer_buffer[19 + (i * NEWSIZE)] = ON;
    2f1a:	40 82       	st	Z, r4
    2f1c:	01 c0       	rjmp	.+2      	; 0x2f20 <Update_V1_0_to_V1_1+0x1fa>
			}
		}
		else
		{
			mixer_buffer[19 + (i * NEWSIZE)] = OFF;
    2f1e:	10 82       	st	Z, r1
		// P1 pitch gyro
		if ((P1_sensors & (1 << PitchGyro)) != 0)
		{
			if ((P1_scale & (1 << PitchScale)) != 0)
			{
				mixer_buffer[20 + (i * NEWSIZE)] = SCALE;
    2f20:	f6 01       	movw	r30, r12
		{
			mixer_buffer[19 + (i * NEWSIZE)] = OFF;
		}

		// P1 pitch gyro
		if ((P1_sensors & (1 << PitchGyro)) != 0)
    2f22:	31 fe       	sbrs	r3, 1
    2f24:	06 c0       	rjmp	.+12     	; 0x2f32 <Update_V1_0_to_V1_1+0x20c>
		{
			if ((P1_scale & (1 << PitchScale)) != 0)
    2f26:	31 ff       	sbrs	r19, 1
    2f28:	02 c0       	rjmp	.+4      	; 0x2f2e <Update_V1_0_to_V1_1+0x208>
			{
				mixer_buffer[20 + (i * NEWSIZE)] = SCALE;
    2f2a:	50 82       	st	Z, r5
    2f2c:	03 c0       	rjmp	.+6      	; 0x2f34 <Update_V1_0_to_V1_1+0x20e>
			}
			else
			{
				mixer_buffer[20 + (i * NEWSIZE)] = ON;
    2f2e:	40 82       	st	Z, r4
    2f30:	01 c0       	rjmp	.+2      	; 0x2f34 <Update_V1_0_to_V1_1+0x20e>
			}
		}
		else
		{
			mixer_buffer[20 + (i * NEWSIZE)] = OFF;
    2f32:	10 82       	st	Z, r1
		// P2 pitch gyro
		if ((P2_sensors & (1 << PitchGyro)) != 0)
		{
			if ((P2_scale & (1 << PitchScale)) != 0)
			{
				mixer_buffer[21 + (i * NEWSIZE)] = SCALE;
    2f34:	cf 5c       	subi	r28, 0xCF	; 207
    2f36:	de 4f       	sbci	r29, 0xFE	; 254
    2f38:	e8 81       	ld	r30, Y
    2f3a:	f9 81       	ldd	r31, Y+1	; 0x01
    2f3c:	c1 53       	subi	r28, 0x31	; 49
    2f3e:	d1 40       	sbci	r29, 0x01	; 1
		{
			mixer_buffer[20 + (i * NEWSIZE)] = OFF;
		}

		// P2 pitch gyro
		if ((P2_sensors & (1 << PitchGyro)) != 0)
    2f40:	21 ff       	sbrs	r18, 1
    2f42:	06 c0       	rjmp	.+12     	; 0x2f50 <Update_V1_0_to_V1_1+0x22a>
		{
			if ((P2_scale & (1 << PitchScale)) != 0)
    2f44:	21 fe       	sbrs	r2, 1
    2f46:	02 c0       	rjmp	.+4      	; 0x2f4c <Update_V1_0_to_V1_1+0x226>
			{
				mixer_buffer[21 + (i * NEWSIZE)] = SCALE;
    2f48:	50 82       	st	Z, r5
    2f4a:	03 c0       	rjmp	.+6      	; 0x2f52 <Update_V1_0_to_V1_1+0x22c>
			}
			else
			{
				mixer_buffer[21 + (i * NEWSIZE)] = ON;
    2f4c:	40 82       	st	Z, r4
    2f4e:	01 c0       	rjmp	.+2      	; 0x2f52 <Update_V1_0_to_V1_1+0x22c>
			}
		}
		else
		{
			mixer_buffer[21 + (i * NEWSIZE)] = OFF;
    2f50:	10 82       	st	Z, r1
		// P1 yaw_gyro
		if ((P1_sensors & (1 << YawGyro)) != 0)
		{
			if ((P1_scale & (1 << YawScale)) != 0)
			{
				mixer_buffer[22 + (i * NEWSIZE)] = SCALE;
    2f52:	f7 01       	movw	r30, r14
		{
			mixer_buffer[21 + (i * NEWSIZE)] = OFF;
		}

		// P1 yaw_gyro
		if ((P1_sensors & (1 << YawGyro)) != 0)
    2f54:	32 fe       	sbrs	r3, 2
    2f56:	06 c0       	rjmp	.+12     	; 0x2f64 <Update_V1_0_to_V1_1+0x23e>
		{
			if ((P1_scale & (1 << YawScale)) != 0)
    2f58:	32 ff       	sbrs	r19, 2
    2f5a:	02 c0       	rjmp	.+4      	; 0x2f60 <Update_V1_0_to_V1_1+0x23a>
			{
				mixer_buffer[22 + (i * NEWSIZE)] = SCALE;
    2f5c:	50 82       	st	Z, r5
    2f5e:	03 c0       	rjmp	.+6      	; 0x2f66 <Update_V1_0_to_V1_1+0x240>
			}
			else
			{
				mixer_buffer[22 + (i * NEWSIZE)] = ON;
    2f60:	40 82       	st	Z, r4
    2f62:	01 c0       	rjmp	.+2      	; 0x2f66 <Update_V1_0_to_V1_1+0x240>
			}
		}
		else
		{
			mixer_buffer[22 + (i * NEWSIZE)] = OFF;
    2f64:	10 82       	st	Z, r1
		// P2 yaw gyro
		if ((P2_sensors & (1 << YawGyro)) != 0)
		{
			if ((P2_scale & (1 << YawScale)) != 0)
			{
				mixer_buffer[23 + (i * NEWSIZE)] = SCALE;
    2f66:	cb 5c       	subi	r28, 0xCB	; 203
    2f68:	de 4f       	sbci	r29, 0xFE	; 254
    2f6a:	e8 81       	ld	r30, Y
    2f6c:	f9 81       	ldd	r31, Y+1	; 0x01
    2f6e:	c5 53       	subi	r28, 0x35	; 53
    2f70:	d1 40       	sbci	r29, 0x01	; 1
		{
			mixer_buffer[22 + (i * NEWSIZE)] = OFF;
		}

		// P2 yaw gyro
		if ((P2_sensors & (1 << YawGyro)) != 0)
    2f72:	22 ff       	sbrs	r18, 2
    2f74:	06 c0       	rjmp	.+12     	; 0x2f82 <Update_V1_0_to_V1_1+0x25c>
		{
			if ((P2_scale & (1 << YawScale)) != 0)
    2f76:	22 fe       	sbrs	r2, 2
    2f78:	02 c0       	rjmp	.+4      	; 0x2f7e <Update_V1_0_to_V1_1+0x258>
			{
				mixer_buffer[23 + (i * NEWSIZE)] = SCALE;
    2f7a:	50 82       	st	Z, r5
    2f7c:	03 c0       	rjmp	.+6      	; 0x2f84 <Update_V1_0_to_V1_1+0x25e>
			}
			else
			{
				mixer_buffer[23 + (i * NEWSIZE)] = ON;
    2f7e:	40 82       	st	Z, r4
    2f80:	01 c0       	rjmp	.+2      	; 0x2f84 <Update_V1_0_to_V1_1+0x25e>
			}
		}
		else
		{
			mixer_buffer[23 + (i * NEWSIZE)] = OFF;
    2f82:	10 82       	st	Z, r1
		// P1 roll acc
		if ((P1_sensors & (1 << RollAcc)) != 0)
		{
			if ((P1_scale & (1 << AccRollScale)) != 0)
			{
				mixer_buffer[24 + (i * NEWSIZE)] = SCALE;
    2f84:	c5 5c       	subi	r28, 0xC5	; 197
    2f86:	de 4f       	sbci	r29, 0xFE	; 254
    2f88:	e8 81       	ld	r30, Y
    2f8a:	f9 81       	ldd	r31, Y+1	; 0x01
    2f8c:	cb 53       	subi	r28, 0x3B	; 59
    2f8e:	d1 40       	sbci	r29, 0x01	; 1
		{
			mixer_buffer[23 + (i * NEWSIZE)] = OFF;
		}

		// P1 roll acc
		if ((P1_sensors & (1 << RollAcc)) != 0)
    2f90:	33 fe       	sbrs	r3, 3
    2f92:	06 c0       	rjmp	.+12     	; 0x2fa0 <Update_V1_0_to_V1_1+0x27a>
		{
			if ((P1_scale & (1 << AccRollScale)) != 0)
    2f94:	33 ff       	sbrs	r19, 3
    2f96:	02 c0       	rjmp	.+4      	; 0x2f9c <Update_V1_0_to_V1_1+0x276>
			{
				mixer_buffer[24 + (i * NEWSIZE)] = SCALE;
    2f98:	50 82       	st	Z, r5
    2f9a:	03 c0       	rjmp	.+6      	; 0x2fa2 <Update_V1_0_to_V1_1+0x27c>
			}
			else
			{
				mixer_buffer[24 + (i * NEWSIZE)] = ON;
    2f9c:	40 82       	st	Z, r4
    2f9e:	01 c0       	rjmp	.+2      	; 0x2fa2 <Update_V1_0_to_V1_1+0x27c>
			}
		}
		else
		{
			mixer_buffer[24 + (i * NEWSIZE)] = OFF;
    2fa0:	10 82       	st	Z, r1
		// P2 roll acc
		if ((P2_sensors & (1 << RollAcc)) != 0)
		{
			if ((P2_scale & (1 << AccRollScale)) != 0)
			{
				mixer_buffer[25 + (i * NEWSIZE)] = SCALE;
    2fa2:	c9 5c       	subi	r28, 0xC9	; 201
    2fa4:	de 4f       	sbci	r29, 0xFE	; 254
    2fa6:	e8 81       	ld	r30, Y
    2fa8:	f9 81       	ldd	r31, Y+1	; 0x01
    2faa:	c7 53       	subi	r28, 0x37	; 55
    2fac:	d1 40       	sbci	r29, 0x01	; 1
		{
			mixer_buffer[24 + (i * NEWSIZE)] = OFF;
		}

		// P2 roll acc
		if ((P2_sensors & (1 << RollAcc)) != 0)
    2fae:	23 ff       	sbrs	r18, 3
    2fb0:	06 c0       	rjmp	.+12     	; 0x2fbe <Update_V1_0_to_V1_1+0x298>
		{
			if ((P2_scale & (1 << AccRollScale)) != 0)
    2fb2:	23 fe       	sbrs	r2, 3
    2fb4:	02 c0       	rjmp	.+4      	; 0x2fba <Update_V1_0_to_V1_1+0x294>
			{
				mixer_buffer[25 + (i * NEWSIZE)] = SCALE;
    2fb6:	50 82       	st	Z, r5
    2fb8:	03 c0       	rjmp	.+6      	; 0x2fc0 <Update_V1_0_to_V1_1+0x29a>
			}
			else
			{
				mixer_buffer[25 + (i * NEWSIZE)] = ON;
    2fba:	40 82       	st	Z, r4
    2fbc:	01 c0       	rjmp	.+2      	; 0x2fc0 <Update_V1_0_to_V1_1+0x29a>
			}
		}
		else
		{
			mixer_buffer[25 + (i * NEWSIZE)] = OFF;
    2fbe:	10 82       	st	Z, r1
		// P1 pitch acc
		if ((P1_sensors & (1 << PitchAcc)) != 0)
		{
			if ((P1_scale & (1 << AccPitchScale)) != 0)
			{
				mixer_buffer[26 + (i * NEWSIZE)] = SCALE;
    2fc0:	c3 5c       	subi	r28, 0xC3	; 195
    2fc2:	de 4f       	sbci	r29, 0xFE	; 254
    2fc4:	e8 81       	ld	r30, Y
    2fc6:	f9 81       	ldd	r31, Y+1	; 0x01
    2fc8:	cd 53       	subi	r28, 0x3D	; 61
    2fca:	d1 40       	sbci	r29, 0x01	; 1
		{
			mixer_buffer[25 + (i * NEWSIZE)] = OFF;
		}

		// P1 pitch acc
		if ((P1_sensors & (1 << PitchAcc)) != 0)
    2fcc:	34 fe       	sbrs	r3, 4
    2fce:	06 c0       	rjmp	.+12     	; 0x2fdc <Update_V1_0_to_V1_1+0x2b6>
		{
			if ((P1_scale & (1 << AccPitchScale)) != 0)
    2fd0:	34 ff       	sbrs	r19, 4
    2fd2:	02 c0       	rjmp	.+4      	; 0x2fd8 <Update_V1_0_to_V1_1+0x2b2>
			{
				mixer_buffer[26 + (i * NEWSIZE)] = SCALE;
    2fd4:	50 82       	st	Z, r5
    2fd6:	03 c0       	rjmp	.+6      	; 0x2fde <Update_V1_0_to_V1_1+0x2b8>
			}
			else
			{
				mixer_buffer[26 + (i * NEWSIZE)] = ON;
    2fd8:	40 82       	st	Z, r4
    2fda:	01 c0       	rjmp	.+2      	; 0x2fde <Update_V1_0_to_V1_1+0x2b8>
			}
		}
		else
		{
			mixer_buffer[26 + (i * NEWSIZE)] = OFF;
    2fdc:	10 82       	st	Z, r1
		// P2 pitch acc
		if ((P2_sensors & (1 << PitchAcc)) != 0)
		{
			if ((P2_scale & (1 << AccPitchScale)) != 0)
			{
				mixer_buffer[27 + (i * NEWSIZE)] = SCALE;
    2fde:	cd 5c       	subi	r28, 0xCD	; 205
    2fe0:	de 4f       	sbci	r29, 0xFE	; 254
    2fe2:	e8 81       	ld	r30, Y
    2fe4:	f9 81       	ldd	r31, Y+1	; 0x01
    2fe6:	c3 53       	subi	r28, 0x33	; 51
    2fe8:	d1 40       	sbci	r29, 0x01	; 1
		{
			mixer_buffer[26 + (i * NEWSIZE)] = OFF;
		}

		// P2 pitch acc
		if ((P2_sensors & (1 << PitchAcc)) != 0)
    2fea:	24 ff       	sbrs	r18, 4
    2fec:	06 c0       	rjmp	.+12     	; 0x2ffa <Update_V1_0_to_V1_1+0x2d4>
		{
			if ((P2_scale & (1 << AccPitchScale)) != 0)
    2fee:	24 fe       	sbrs	r2, 4
    2ff0:	02 c0       	rjmp	.+4      	; 0x2ff6 <Update_V1_0_to_V1_1+0x2d0>
			{
				mixer_buffer[27 + (i * NEWSIZE)] = SCALE;
    2ff2:	50 82       	st	Z, r5
    2ff4:	03 c0       	rjmp	.+6      	; 0x2ffc <Update_V1_0_to_V1_1+0x2d6>
			}
			else
			{
				mixer_buffer[27 + (i * NEWSIZE)] = ON;
    2ff6:	40 82       	st	Z, r4
    2ff8:	01 c0       	rjmp	.+2      	; 0x2ffc <Update_V1_0_to_V1_1+0x2d6>
			}
		}
		else
		{
			mixer_buffer[27 + (i * NEWSIZE)] = OFF;
    2ffa:	10 82       	st	Z, r1
		// P1 Z delta acc
		if ((P1_sensors & (1 << ZDeltaAcc)) != 0)
		{
			if ((P1_scale & (1 << AccZScale)) != 0)
			{
				mixer_buffer[28 + (i * NEWSIZE)] = SCALE;
    2ffc:	c7 5c       	subi	r28, 0xC7	; 199
    2ffe:	de 4f       	sbci	r29, 0xFE	; 254
    3000:	e8 81       	ld	r30, Y
    3002:	f9 81       	ldd	r31, Y+1	; 0x01
    3004:	c9 53       	subi	r28, 0x39	; 57
    3006:	d1 40       	sbci	r29, 0x01	; 1
		{
			mixer_buffer[27 + (i * NEWSIZE)] = OFF;
		}

		// P1 Z delta acc
		if ((P1_sensors & (1 << ZDeltaAcc)) != 0)
    3008:	35 fe       	sbrs	r3, 5
    300a:	06 c0       	rjmp	.+12     	; 0x3018 <Update_V1_0_to_V1_1+0x2f2>
		{
			if ((P1_scale & (1 << AccZScale)) != 0)
    300c:	35 ff       	sbrs	r19, 5
    300e:	02 c0       	rjmp	.+4      	; 0x3014 <Update_V1_0_to_V1_1+0x2ee>
			{
				mixer_buffer[28 + (i * NEWSIZE)] = SCALE;
    3010:	50 82       	st	Z, r5
    3012:	03 c0       	rjmp	.+6      	; 0x301a <Update_V1_0_to_V1_1+0x2f4>
			}
			else
			{
				mixer_buffer[28 + (i * NEWSIZE)] = ON;
    3014:	40 82       	st	Z, r4
    3016:	01 c0       	rjmp	.+2      	; 0x301a <Update_V1_0_to_V1_1+0x2f4>
			}
		}
		else
		{
			mixer_buffer[28 + (i * NEWSIZE)] = OFF;
    3018:	10 82       	st	Z, r1
		// P2 Z delta acc
		if ((P2_sensors & (1 << ZDeltaAcc)) != 0)
		{
			if ((P2_scale & (1 << AccZScale)) != 0)
			{
				mixer_buffer[29 + (i * NEWSIZE)] = SCALE;
    301a:	f8 01       	movw	r30, r16
		{
			mixer_buffer[28 + (i * NEWSIZE)] = OFF;
		}

		// P2 Z delta acc
		if ((P2_sensors & (1 << ZDeltaAcc)) != 0)
    301c:	25 ff       	sbrs	r18, 5
    301e:	06 c0       	rjmp	.+12     	; 0x302c <Update_V1_0_to_V1_1+0x306>
		{
			if ((P2_scale & (1 << AccZScale)) != 0)
    3020:	25 fe       	sbrs	r2, 5
    3022:	02 c0       	rjmp	.+4      	; 0x3028 <Update_V1_0_to_V1_1+0x302>
			{
				mixer_buffer[29 + (i * NEWSIZE)] = SCALE;
    3024:	50 82       	st	Z, r5
    3026:	03 c0       	rjmp	.+6      	; 0x302e <Update_V1_0_to_V1_1+0x308>
			}
			else
			{
				mixer_buffer[29 + (i * NEWSIZE)] = ON;
    3028:	40 82       	st	Z, r4
    302a:	01 c0       	rjmp	.+2      	; 0x302e <Update_V1_0_to_V1_1+0x308>
			}
		}
		else
		{
			mixer_buffer[29 + (i * NEWSIZE)] = OFF;
    302c:	10 82       	st	Z, r1
    302e:	c1 5c       	subi	r28, 0xC1	; 193
    3030:	de 4f       	sbci	r29, 0xFE	; 254
    3032:	88 81       	ld	r24, Y
    3034:	99 81       	ldd	r25, Y+1	; 0x01
    3036:	cf 53       	subi	r28, 0x3F	; 63
    3038:	d1 40       	sbci	r29, 0x01	; 1
    303a:	86 96       	adiw	r24, 0x26	; 38
    303c:	c1 5c       	subi	r28, 0xC1	; 193
    303e:	de 4f       	sbci	r29, 0xFE	; 254
    3040:	99 83       	std	Y+1, r25	; 0x01
    3042:	88 83       	st	Y, r24
    3044:	cf 53       	subi	r28, 0x3F	; 63
    3046:	d1 40       	sbci	r29, 0x01	; 1
    3048:	96 e2       	ldi	r25, 0x26	; 38
    304a:	89 0e       	add	r8, r25
    304c:	91 1c       	adc	r9, r1
    304e:	e6 e2       	ldi	r30, 0x26	; 38
    3050:	ae 0e       	add	r10, r30
    3052:	b1 1c       	adc	r11, r1
    3054:	f6 e2       	ldi	r31, 0x26	; 38
    3056:	cf 0e       	add	r12, r31
    3058:	d1 1c       	adc	r13, r1
    305a:	cf 5c       	subi	r28, 0xCF	; 207
    305c:	de 4f       	sbci	r29, 0xFE	; 254
    305e:	88 81       	ld	r24, Y
    3060:	99 81       	ldd	r25, Y+1	; 0x01
    3062:	c1 53       	subi	r28, 0x31	; 49
    3064:	d1 40       	sbci	r29, 0x01	; 1
    3066:	86 96       	adiw	r24, 0x26	; 38
    3068:	cf 5c       	subi	r28, 0xCF	; 207
    306a:	de 4f       	sbci	r29, 0xFE	; 254
    306c:	99 83       	std	Y+1, r25	; 0x01
    306e:	88 83       	st	Y, r24
    3070:	c1 53       	subi	r28, 0x31	; 49
    3072:	d1 40       	sbci	r29, 0x01	; 1
    3074:	0a 5d       	subi	r16, 0xDA	; 218
    3076:	1f 4f       	sbci	r17, 0xFF	; 255
    3078:	c7 5c       	subi	r28, 0xC7	; 199
    307a:	de 4f       	sbci	r29, 0xFE	; 254
    307c:	e8 81       	ld	r30, Y
    307e:	f9 81       	ldd	r31, Y+1	; 0x01
    3080:	c9 53       	subi	r28, 0x39	; 57
    3082:	d1 40       	sbci	r29, 0x01	; 1
    3084:	b6 96       	adiw	r30, 0x26	; 38
    3086:	c7 5c       	subi	r28, 0xC7	; 199
    3088:	de 4f       	sbci	r29, 0xFE	; 254
    308a:	f9 83       	std	Y+1, r31	; 0x01
    308c:	e8 83       	st	Y, r30
    308e:	c9 53       	subi	r28, 0x39	; 57
    3090:	d1 40       	sbci	r29, 0x01	; 1
    3092:	cd 5c       	subi	r28, 0xCD	; 205
    3094:	de 4f       	sbci	r29, 0xFE	; 254
    3096:	88 81       	ld	r24, Y
    3098:	99 81       	ldd	r25, Y+1	; 0x01
    309a:	c3 53       	subi	r28, 0x33	; 51
    309c:	d1 40       	sbci	r29, 0x01	; 1
    309e:	86 96       	adiw	r24, 0x26	; 38
    30a0:	cd 5c       	subi	r28, 0xCD	; 205
    30a2:	de 4f       	sbci	r29, 0xFE	; 254
    30a4:	99 83       	std	Y+1, r25	; 0x01
    30a6:	88 83       	st	Y, r24
    30a8:	c3 53       	subi	r28, 0x33	; 51
    30aa:	d1 40       	sbci	r29, 0x01	; 1
    30ac:	c3 5c       	subi	r28, 0xC3	; 195
    30ae:	de 4f       	sbci	r29, 0xFE	; 254
    30b0:	e8 81       	ld	r30, Y
    30b2:	f9 81       	ldd	r31, Y+1	; 0x01
    30b4:	cd 53       	subi	r28, 0x3D	; 61
    30b6:	d1 40       	sbci	r29, 0x01	; 1
    30b8:	b6 96       	adiw	r30, 0x26	; 38
    30ba:	c3 5c       	subi	r28, 0xC3	; 195
    30bc:	de 4f       	sbci	r29, 0xFE	; 254
    30be:	f9 83       	std	Y+1, r31	; 0x01
    30c0:	e8 83       	st	Y, r30
    30c2:	cd 53       	subi	r28, 0x3D	; 61
    30c4:	d1 40       	sbci	r29, 0x01	; 1
    30c6:	c9 5c       	subi	r28, 0xC9	; 201
    30c8:	de 4f       	sbci	r29, 0xFE	; 254
    30ca:	88 81       	ld	r24, Y
    30cc:	99 81       	ldd	r25, Y+1	; 0x01
    30ce:	c7 53       	subi	r28, 0x37	; 55
    30d0:	d1 40       	sbci	r29, 0x01	; 1
    30d2:	86 96       	adiw	r24, 0x26	; 38
    30d4:	c9 5c       	subi	r28, 0xC9	; 201
    30d6:	de 4f       	sbci	r29, 0xFE	; 254
    30d8:	99 83       	std	Y+1, r25	; 0x01
    30da:	88 83       	st	Y, r24
    30dc:	c7 53       	subi	r28, 0x37	; 55
    30de:	d1 40       	sbci	r29, 0x01	; 1
    30e0:	c5 5c       	subi	r28, 0xC5	; 197
    30e2:	de 4f       	sbci	r29, 0xFE	; 254
    30e4:	e8 81       	ld	r30, Y
    30e6:	f9 81       	ldd	r31, Y+1	; 0x01
    30e8:	cb 53       	subi	r28, 0x3B	; 59
    30ea:	d1 40       	sbci	r29, 0x01	; 1
    30ec:	b6 96       	adiw	r30, 0x26	; 38
    30ee:	c5 5c       	subi	r28, 0xC5	; 197
    30f0:	de 4f       	sbci	r29, 0xFE	; 254
    30f2:	f9 83       	std	Y+1, r31	; 0x01
    30f4:	e8 83       	st	Y, r30
    30f6:	cb 53       	subi	r28, 0x3B	; 59
    30f8:	d1 40       	sbci	r29, 0x01	; 1
    30fa:	cb 5c       	subi	r28, 0xCB	; 203
    30fc:	de 4f       	sbci	r29, 0xFE	; 254
    30fe:	88 81       	ld	r24, Y
    3100:	99 81       	ldd	r25, Y+1	; 0x01
    3102:	c5 53       	subi	r28, 0x35	; 53
    3104:	d1 40       	sbci	r29, 0x01	; 1
    3106:	86 96       	adiw	r24, 0x26	; 38
    3108:	cb 5c       	subi	r28, 0xCB	; 203
    310a:	de 4f       	sbci	r29, 0xFE	; 254
    310c:	99 83       	std	Y+1, r25	; 0x01
    310e:	88 83       	st	Y, r24
    3110:	c5 53       	subi	r28, 0x35	; 53
    3112:	d1 40       	sbci	r29, 0x01	; 1
    3114:	96 e2       	ldi	r25, 0x26	; 38
    3116:	e9 0e       	add	r14, r25
    3118:	f1 1c       	adc	r15, r1
    311a:	e6 e2       	ldi	r30, 0x26	; 38
    311c:	6e 0e       	add	r6, r30
    311e:	71 1c       	adc	r7, r1
		dst += (i * NEWSIZE);			// Step to next location for new data in the buffer
		memcpy(dst, src, OLDSIZE);		// Move only the old (smaller) data
	}

	// Rearrange one output at a time	
	for (i = 0; i < MAX_OUTPUTS; i++)
    3120:	ce 5b       	subi	r28, 0xBE	; 190
    3122:	de 4f       	sbci	r29, 0xFE	; 254
    3124:	88 81       	ld	r24, Y
    3126:	99 81       	ldd	r25, Y+1	; 0x01
    3128:	c2 54       	subi	r28, 0x42	; 66
    312a:	d1 40       	sbci	r29, 0x01	; 1
    312c:	08 17       	cp	r16, r24
    312e:	19 07       	cpc	r17, r25
    3130:	09 f0       	breq	.+2      	; 0x3134 <Update_V1_0_to_V1_1+0x40e>
    3132:	9a ce       	rjmp	.-716    	; 0x2e68 <Update_V1_0_to_V1_1+0x142>
	}
		
	// Copy buffer back into new structure
	src = (void*)mixer_buffer;
	dst = (void*)Config.Channel;
	memcpy(dst, src, sizeof(mixer_buffer) - 1); // This appears to be spot on.
    3134:	8f e2       	ldi	r24, 0x2F	; 47
    3136:	91 e0       	ldi	r25, 0x01	; 1
    3138:	fe 01       	movw	r30, r28
    313a:	31 96       	adiw	r30, 0x01	; 1
    313c:	a3 e3       	ldi	r26, 0x33	; 51
    313e:	b6 e0       	ldi	r27, 0x06	; 6
    3140:	01 90       	ld	r0, Z+
    3142:	0d 92       	st	X+, r0
    3144:	01 97       	sbiw	r24, 0x01	; 1
    3146:	e1 f7       	brne	.-8      	; 0x3140 <Update_V1_0_to_V1_1+0x41a>

	// Restore corrupted byte manually
	Config.Channel[7].P2_source_b_volume = temp; 
    3148:	cf 5b       	subi	r28, 0xBF	; 191
    314a:	de 4f       	sbci	r29, 0xFE	; 254
    314c:	98 81       	ld	r25, Y
    314e:	c1 54       	subi	r28, 0x41	; 65
    3150:	d1 40       	sbci	r29, 0x01	; 1
    3152:	90 93 62 07 	sts	0x0762, r25

	// Set magic number to V1.1 signature
	Config.setup = V1_1_SIGNATURE;
    3156:	86 e3       	ldi	r24, 0x36	; 54
    3158:	80 93 a1 05 	sts	0x05A1, r24
}
    315c:	cb 5b       	subi	r28, 0xBB	; 187
    315e:	de 4f       	sbci	r29, 0xFE	; 254
    3160:	0f b6       	in	r0, 0x3f	; 63
    3162:	f8 94       	cli
    3164:	de bf       	out	0x3e, r29	; 62
    3166:	0f be       	out	0x3f, r0	; 63
    3168:	cd bf       	out	0x3d, r28	; 61
    316a:	df 91       	pop	r29
    316c:	cf 91       	pop	r28
    316e:	1f 91       	pop	r17
    3170:	0f 91       	pop	r16
    3172:	ff 90       	pop	r15
    3174:	ef 90       	pop	r14
    3176:	df 90       	pop	r13
    3178:	cf 90       	pop	r12
    317a:	bf 90       	pop	r11
    317c:	af 90       	pop	r10
    317e:	9f 90       	pop	r9
    3180:	8f 90       	pop	r8
    3182:	7f 90       	pop	r7
    3184:	6f 90       	pop	r6
    3186:	5f 90       	pop	r5
    3188:	4f 90       	pop	r4
    318a:	3f 90       	pop	r3
    318c:	2f 90       	pop	r2
    318e:	08 95       	ret

00003190 <Update_V1_1_to_V1_1_B8>:

// Upgrade V1.1 structure to V1.1 Beta 8 structure
void Update_V1_1_to_V1_1_B8(void)
{
    3190:	cf 93       	push	r28
    3192:	df 93       	push	r29
    3194:	cd b7       	in	r28, 0x3d	; 61
    3196:	de b7       	in	r29, 0x3e	; 62
    3198:	28 97       	sbiw	r28, 0x08	; 8
    319a:	0f b6       	in	r0, 0x3f	; 63
    319c:	f8 94       	cli
    319e:	de bf       	out	0x3e, r29	; 62
    31a0:	0f be       	out	0x3f, r0	; 63
    31a2:	cd bf       	out	0x3d, r28	; 61
	int8_t	buffer[8];
	
	// Swap old settings into new
	buffer[0] = Config.RxMode;
    31a4:	80 91 ca 05 	lds	r24, 0x05CA
    31a8:	89 83       	std	Y+1, r24	; 0x01
	buffer[1] = Config.MPU6050_LPF;
    31aa:	80 91 2e 06 	lds	r24, 0x062E
    31ae:	8a 83       	std	Y+2, r24	; 0x02
	buffer[2] = Config.Servo_rate;
    31b0:	80 91 cb 05 	lds	r24, 0x05CB
    31b4:	8b 83       	std	Y+3, r24	; 0x03
	buffer[3] = Config.PWM_Sync;
    31b6:	80 91 cc 05 	lds	r24, 0x05CC
    31ba:	8c 83       	std	Y+4, r24	; 0x04
	buffer[4] = Config.TxSeq;
    31bc:	80 91 cd 05 	lds	r24, 0x05CD
    31c0:	8d 83       	std	Y+5, r24	; 0x05
	buffer[5] = Config.AileronPol;
    31c2:	90 91 d1 05 	lds	r25, 0x05D1
    31c6:	9e 83       	std	Y+6, r25	; 0x06
	buffer[6] = Config.ElevatorPol;
    31c8:	90 91 d2 05 	lds	r25, 0x05D2
    31cc:	9f 83       	std	Y+7, r25	; 0x07
	buffer[7] = Config.RudderPol;
    31ce:	90 91 32 06 	lds	r25, 0x0632
    31d2:	98 87       	std	Y+8, r25	; 0x08
	
	// Copy back to RC items structure
	memcpy(&Config.RxMode, &buffer,7);
    31d4:	27 e0       	ldi	r18, 0x07	; 7
    31d6:	fe 01       	movw	r30, r28
    31d8:	31 96       	adiw	r30, 0x01	; 1
    31da:	aa ec       	ldi	r26, 0xCA	; 202
    31dc:	b5 e0       	ldi	r27, 0x05	; 5
    31de:	01 90       	ld	r0, Z+
    31e0:	0d 92       	st	X+, r0
    31e2:	2a 95       	dec	r18
    31e4:	e1 f7       	brne	.-8      	; 0x31de <Update_V1_1_to_V1_1_B8+0x4e>
	
	// Copy back to General items structure
	Config.MPU6050_LPF = buffer[7];
    31e6:	90 93 2e 06 	sts	0x062E, r25
	
	// "None" no longer an option for this channel
	if (Config.FlightChan == NOCHAN)
    31ea:	88 30       	cpi	r24, 0x08	; 8
    31ec:	19 f4       	brne	.+6      	; 0x31f4 <Update_V1_1_to_V1_1_B8+0x64>
	{
		Config.FlightChan = AUX3;
    31ee:	87 e0       	ldi	r24, 0x07	; 7
    31f0:	80 93 ce 05 	sts	0x05CE, r24
	}
	
	// Set magic number to V1.1 Beta 8 signature
	Config.setup = V1_1_B8_SIGNATURE;
    31f4:	87 e3       	ldi	r24, 0x37	; 55
    31f6:	80 93 a1 05 	sts	0x05A1, r24
}
    31fa:	28 96       	adiw	r28, 0x08	; 8
    31fc:	0f b6       	in	r0, 0x3f	; 63
    31fe:	f8 94       	cli
    3200:	de bf       	out	0x3e, r29	; 62
    3202:	0f be       	out	0x3f, r0	; 63
    3204:	cd bf       	out	0x3d, r28	; 61
    3206:	df 91       	pop	r29
    3208:	cf 91       	pop	r28
    320a:	08 95       	ret

0000320c <Set_EEPROM_Default_Config>:

// Force a factory reset
void Set_EEPROM_Default_Config(void)
{
    320c:	cf 93       	push	r28
    320e:	df 93       	push	r29
	uint8_t i;
	
	// Clear entire Config space first
	memset(&Config.setup,0,(sizeof(Config)));
    3210:	88 e0       	ldi	r24, 0x08	; 8
    3212:	92 e0       	ldi	r25, 0x02	; 2
    3214:	e1 ea       	ldi	r30, 0xA1	; 161
    3216:	f5 e0       	ldi	r31, 0x05	; 5
    3218:	df 01       	movw	r26, r30
    321a:	9c 01       	movw	r18, r24
    321c:	1d 92       	st	X+, r1
    321e:	21 50       	subi	r18, 0x01	; 1
    3220:	30 40       	sbci	r19, 0x00	; 0
    3222:	e1 f7       	brne	.-8      	; 0x321c <Set_EEPROM_Default_Config+0x10>

	// Set magic number to current signature
	Config.setup = MAGIC_NUMBER;
    3224:	87 e3       	ldi	r24, 0x37	; 55
    3226:	80 93 a1 05 	sts	0x05A1, r24

	// Misc settings
	Config.RxMode = PWM;				// Default to PWM
    322a:	81 e0       	ldi	r24, 0x01	; 1
    322c:	80 93 ca 05 	sts	0x05CA, r24
	Config.PWM_Sync = GEAR;
    3230:	84 e0       	ldi	r24, 0x04	; 4
    3232:	80 93 cc 05 	sts	0x05CC, r24
	Config.Acc_LPF = 2;					// Acc LPF around 21Hz (5, 10, 21, 32, 44, 74, None)
    3236:	92 e0       	ldi	r25, 0x02	; 2
    3238:	90 93 2f 06 	sts	0x062F, r25
	Config.Gyro_LPF = 7;				// Gyro LPF off "None" (5, 10, 21, 32, 44, 74, None)
    323c:	97 e0       	ldi	r25, 0x07	; 7
    323e:	90 93 30 06 	sts	0x0630, r25
	Config.CF_factor = 7;
    3242:	90 93 31 06 	sts	0x0631, r25
	Config.FlightChan = GEAR;			// Channel GEAR switches flight mode by default
    3246:	80 93 ce 05 	sts	0x05CE, r24
	Config.Disarm_timer = 30;			// Default to 30 seconds
    324a:	8e e1       	ldi	r24, 0x1E	; 30
    324c:	80 93 2c 06 	sts	0x062C, r24
	Config.Transition_P1n = 50;			// Set P1.n point to 50%
    3250:	82 e3       	ldi	r24, 0x32	; 50
    3252:	80 93 d0 05 	sts	0x05D0, r24
    3256:	e4 ee       	ldi	r30, 0xE4	; 228
    3258:	f0 e0       	ldi	r31, 0x00	; 0
    325a:	c2 ea       	ldi	r28, 0xA2	; 162
    325c:	d5 e0       	ldi	r29, 0x05	; 5
    325e:	ab e7       	ldi	r26, 0x7B	; 123
    3260:	b7 e0       	ldi	r27, 0x07	; 7

	// Servo defaults
	for (i = 0; i < MAX_RC_CHANNELS; i++)
	{
		Config.ChannelOrder[i] = pgm_read_byte(&JR[i]);
		Config.RxChannelZeroOffset[i] = 3750;
    3262:	86 ea       	ldi	r24, 0xA6	; 166
    3264:	9e e0       	ldi	r25, 0x0E	; 14
	Config.Transition_P1n = 50;			// Set P1.n point to 50%

	// Servo defaults
	for (i = 0; i < MAX_RC_CHANNELS; i++)
	{
		Config.ChannelOrder[i] = pgm_read_byte(&JR[i]);
    3266:	24 91       	lpm	r18, Z
    3268:	29 93       	st	Y+, r18
		Config.RxChannelZeroOffset[i] = 3750;
    326a:	8d 93       	st	X+, r24
    326c:	9d 93       	st	X+, r25
    326e:	31 96       	adiw	r30, 0x01	; 1
	Config.FlightChan = GEAR;			// Channel GEAR switches flight mode by default
	Config.Disarm_timer = 30;			// Default to 30 seconds
	Config.Transition_P1n = 50;			// Set P1.n point to 50%

	// Servo defaults
	for (i = 0; i < MAX_RC_CHANNELS; i++)
    3270:	30 e0       	ldi	r19, 0x00	; 0
    3272:	ec 3e       	cpi	r30, 0xEC	; 236
    3274:	f3 07       	cpc	r31, r19
    3276:	b9 f7       	brne	.-18     	; 0x3266 <Set_EEPROM_Default_Config+0x5a>
		Config.ChannelOrder[i] = pgm_read_byte(&JR[i]);
		Config.RxChannelZeroOffset[i] = 3750;
	}
	
	// Monopolar throttle is a special case. Set to -100% or -1000
	Config.RxChannelZeroOffset[THROTTLE] = 2750;
    3278:	8e eb       	ldi	r24, 0xBE	; 190
    327a:	9a e0       	ldi	r25, 0x0A	; 10
    327c:	90 93 7c 07 	sts	0x077C, r25
    3280:	80 93 7b 07 	sts	0x077B, r24
    3284:	e7 e5       	ldi	r30, 0x57	; 87
    3286:	f6 e0       	ldi	r31, 0x06	; 6
    3288:	cb e6       	ldi	r28, 0x6B	; 107
    328a:	d7 e0       	ldi	r29, 0x07	; 7
    328c:	63 e7       	ldi	r22, 0x73	; 115
    328e:	77 e0       	ldi	r23, 0x07	; 7
	}
*/
	// Preset mixers to safe values
	for (i = 0; i < MAX_OUTPUTS; i++)
	{
		Config.Channel[i].P1n_position	= 50;
    3290:	52 e3       	ldi	r21, 0x32	; 50
		Config.Channel[i].P1_source_a 	= NOMIX;
    3292:	2f e0       	ldi	r18, 0x0F	; 15
		Config.Channel[i].P1_source_b 	= NOMIX;
		Config.Channel[i].P2_source_a 	= NOMIX;
		Config.Channel[i].P2_source_b 	= NOMIX;
		Config.min_travel[i] = -100;
    3294:	4c e9       	ldi	r20, 0x9C	; 156
		Config.max_travel[i] = 100;
    3296:	34 e6       	ldi	r19, 0x64	; 100
    3298:	cf 01       	movw	r24, r30
    329a:	4e 97       	sbiw	r24, 0x1e	; 30
	}
*/
	// Preset mixers to safe values
	for (i = 0; i < MAX_OUTPUTS; i++)
	{
		Config.Channel[i].P1n_position	= 50;
    329c:	dc 01       	movw	r26, r24
    329e:	5c 93       	st	X, r21
    32a0:	48 96       	adiw	r24, 0x18	; 24
		Config.Channel[i].P1_source_a 	= NOMIX;
    32a2:	dc 01       	movw	r26, r24
    32a4:	2c 93       	st	X, r18
    32a6:	04 96       	adiw	r24, 0x04	; 4
		Config.Channel[i].P1_source_b 	= NOMIX;
    32a8:	dc 01       	movw	r26, r24
    32aa:	2c 93       	st	X, r18
    32ac:	02 97       	sbiw	r24, 0x02	; 2
		Config.Channel[i].P2_source_a 	= NOMIX;
    32ae:	dc 01       	movw	r26, r24
    32b0:	2c 93       	st	X, r18
		Config.Channel[i].P2_source_b 	= NOMIX;
    32b2:	20 83       	st	Z, r18
		Config.min_travel[i] = -100;
    32b4:	49 93       	st	Y+, r20
		Config.max_travel[i] = 100;
    32b6:	84 e6       	ldi	r24, 0x64	; 100
    32b8:	db 01       	movw	r26, r22
    32ba:	3d 93       	st	X+, r19
    32bc:	bd 01       	movw	r22, r26
    32be:	b6 96       	adiw	r30, 0x26	; 38
		Config.Channel[i].P1_Pitch_acc = ON;
		Config.Channel[i].P1_Z_delta_acc = ON;
	}
*/
	// Preset mixers to safe values
	for (i = 0; i < MAX_OUTPUTS; i++)
    32c0:	b7 e0       	ldi	r27, 0x07	; 7
    32c2:	e7 38       	cpi	r30, 0x87	; 135
    32c4:	fb 07       	cpc	r31, r27
    32c6:	41 f7       	brne	.-48     	; 0x3298 <Set_EEPROM_Default_Config+0x8c>
		Config.min_travel[i] = -100;
		Config.max_travel[i] = 100;
	}

	// Preset simple mixing for primary channels - all models
	Config.Channel[OUT1].P1_throttle_volume = 100;
    32c8:	80 93 3c 06 	sts	0x063C, r24
	Config.Channel[OUT2].P1_aileron_volume = 100;
    32cc:	80 93 65 06 	sts	0x0665, r24
	Config.Channel[OUT3].P1_elevator_volume = 100;
    32d0:	80 93 8d 06 	sts	0x068D, r24
	Config.Channel[OUT4].P1_rudder_volume = 100;
    32d4:	80 93 b5 06 	sts	0x06B5, r24
	
	// Set up profile 1
	Config.FlightMode[P1].Roll_P_mult = 60;			// PID defaults
    32d8:	2c e3       	ldi	r18, 0x3C	; 60
    32da:	20 93 d3 05 	sts	0x05D3, r18
	Config.FlightMode[P1].A_Roll_P_mult = 5;
    32de:	95 e0       	ldi	r25, 0x05	; 5
    32e0:	90 93 d7 05 	sts	0x05D7, r25
	Config.FlightMode[P1].Pitch_P_mult = 60;
    32e4:	20 93 d9 05 	sts	0x05D9, r18
	Config.FlightMode[P1].A_Pitch_P_mult = 5;
    32e8:	90 93 dd 05 	sts	0x05DD, r25
	Config.FlightMode[P1].Yaw_P_mult = 80;
    32ec:	90 e5       	ldi	r25, 0x50	; 80
    32ee:	90 93 df 05 	sts	0x05DF, r25
	Config.FlightMode[P1].Roll_I_mult = 40;
    32f2:	28 e2       	ldi	r18, 0x28	; 40
    32f4:	20 93 d4 05 	sts	0x05D4, r18
	Config.FlightMode[P1].Roll_limit = 10;
    32f8:	9a e0       	ldi	r25, 0x0A	; 10
    32fa:	90 93 d5 05 	sts	0x05D5, r25
	Config.FlightMode[P1].Pitch_I_mult = 40;
    32fe:	20 93 da 05 	sts	0x05DA, r18
	Config.FlightMode[P1].Pitch_limit = 10;
    3302:	90 93 db 05 	sts	0x05DB, r25
	Config.FlightMode[P1].Roll_Rate = 2;
    3306:	92 e0       	ldi	r25, 0x02	; 2
    3308:	90 93 d6 05 	sts	0x05D6, r25
	Config.FlightMode[P1].Pitch_Rate = 2;
    330c:	90 93 dc 05 	sts	0x05DC, r25
	Config.FlightMode[P1].Yaw_Rate = 1;
    3310:	21 e0       	ldi	r18, 0x01	; 1
    3312:	20 93 e2 05 	sts	0x05E2, r18

	// Set up profile 2
	Config.FlightMode[P2].Roll_Rate = 2;
    3316:	90 93 e8 05 	sts	0x05E8, r25
	Config.FlightMode[P2].Pitch_Rate = 2;
    331a:	90 93 ee 05 	sts	0x05EE, r25
	Config.FlightMode[P2].Yaw_Rate = 1;
    331e:	20 93 f4 05 	sts	0x05F4, r18
	
	// Preset stick volumes
	Config.Channel[OUT1].P2_throttle_volume = 100;
    3322:	80 93 3d 06 	sts	0x063D, r24
	Config.Channel[OUT2].P2_aileron_volume = 100;
    3326:	80 93 66 06 	sts	0x0666, r24
	Config.Channel[OUT3].P2_elevator_volume = 100;
    332a:	80 93 8e 06 	sts	0x068E, r24
	Config.Channel[OUT4].P2_rudder_volume = 100;
    332e:	80 93 b6 06 	sts	0x06B6, r24

	// Preset basic axis gyros in P2
	Config.Channel[OUT2].P2_Roll_gyro = ON;
    3332:	20 93 6c 06 	sts	0x066C, r18
	Config.Channel[OUT3].P2_Pitch_gyro = ON;
    3336:	20 93 94 06 	sts	0x0694, r18
	Config.Channel[OUT4].P2_Yaw_gyro = ON;
    333a:	20 93 bc 06 	sts	0x06BC, r18
	Config.Channel[OUT4].P1_Yaw_gyro = ON;
	Config.Channel[OUT4].P2_Yaw_gyro = ON;
#endif
	
	// Set default sensor LPF
	Config.MPU6050_LPF = 2;				// 6 - 2 = 4. MPU6050's internal LPF. Values are 0x06 = 5Hz, (5)10Hz, (4)21Hz*, (3)44Hz, (2)94Hz, (1)184Hz LPF, (0)260Hz
    333e:	90 93 2e 06 	sts	0x062E, r25

	// Preset AccZeroNormZ
	Config.AccZeroNormZ		= 128;
    3342:	80 e8       	ldi	r24, 0x80	; 128
    3344:	90 e0       	ldi	r25, 0x00	; 0
    3346:	90 93 92 07 	sts	0x0792, r25
    334a:	80 93 91 07 	sts	0x0791, r24

	#ifdef KK2Mini
	Config.Contrast = 30;				// Contrast (KK2 Mini)
	#else
	Config.Contrast = 36;				// Contrast (Everything else)
    334e:	84 e2       	ldi	r24, 0x24	; 36
    3350:	80 93 2a 06 	sts	0x062A, r24
	#endif
}
    3354:	df 91       	pop	r29
    3356:	cf 91       	pop	r28
    3358:	08 95       	ret

0000335a <Initial_EEPROM_Config_Load>:
		eeprom_write_byte(addr, value);
	}
}

bool Initial_EEPROM_Config_Load(void)
{
    335a:	cf 93       	push	r28
    335c:	df 93       	push	r29
    335e:	1f 92       	push	r1
    3360:	cd b7       	in	r28, 0x3d	; 61
    3362:	de b7       	in	r29, 0x3e	; 62
	bool	updated = false;
	
	// Read eeProm data into RAM
	eeprom_read_block((void*)&Config, (const void*)EEPROM_DATA_START_POS, sizeof(CONFIG_STRUCT));
    3364:	48 e0       	ldi	r20, 0x08	; 8
    3366:	52 e0       	ldi	r21, 0x02	; 2
    3368:	60 e0       	ldi	r22, 0x00	; 0
    336a:	70 e0       	ldi	r23, 0x00	; 0
    336c:	81 ea       	ldi	r24, 0xA1	; 161
    336e:	95 e0       	ldi	r25, 0x05	; 5
    3370:	0e 94 de 48 	call	0x91bc	; 0x91bc <__eerd_block_m644pa>
	
	// See if we know what to do with the current eeprom data
	// Config.setup holds the magic number from the current EEPROM
	switch(Config.setup)
    3374:	80 91 a1 05 	lds	r24, 0x05A1
    3378:	86 33       	cpi	r24, 0x36	; 54
    337a:	31 f0       	breq	.+12     	; 0x3388 <Initial_EEPROM_Config_Load+0x2e>
    337c:	87 33       	cpi	r24, 0x37	; 55
    337e:	51 f0       	breq	.+20     	; 0x3394 <Initial_EEPROM_Config_Load+0x3a>
    3380:	85 33       	cpi	r24, 0x35	; 53
    3382:	31 f4       	brne	.+12     	; 0x3390 <Initial_EEPROM_Config_Load+0x36>
	{
		case V1_0_SIGNATURE:				// V1.0 detected
			Update_V1_0_to_V1_1();
    3384:	0e 94 93 16 	call	0x2d26	; 0x2d26 <Update_V1_0_to_V1_1>
			// Fall through...

		case V1_1_SIGNATURE:				// V1.1 Beta 7 (or below) detected
			Update_V1_1_to_V1_1_B8();	
    3388:	0e 94 c8 18 	call	0x3190	; 0x3190 <Update_V1_1_to_V1_1_B8>
			updated = true;	
    338c:	81 e0       	ldi	r24, 0x01	; 1
    338e:	03 c0       	rjmp	.+6      	; 0x3396 <Initial_EEPROM_Config_Load+0x3c>
			// Fall through...
			break;

		default:							// Unknown solution - restore to factory defaults
			// Load factory defaults
			Set_EEPROM_Default_Config();
    3390:	0e 94 06 19 	call	0x320c	; 0x320c <Set_EEPROM_Default_Config>
	}
}

bool Initial_EEPROM_Config_Load(void)
{
	bool	updated = false;
    3394:	80 e0       	ldi	r24, 0x00	; 0
			Set_EEPROM_Default_Config();
			break;
	}
	
	// Save back to eeprom	
	Save_Config_to_EEPROM();
    3396:	89 83       	std	Y+1, r24	; 0x01
    3398:	0e 94 88 16 	call	0x2d10	; 0x2d10 <Save_Config_to_EEPROM>
	
	// Return info regarding eeprom structure changes 
	return updated;
}
    339c:	89 81       	ldd	r24, Y+1	; 0x01
    339e:	0f 90       	pop	r0
    33a0:	df 91       	pop	r29
    33a2:	cf 91       	pop	r28
    33a4:	08 95       	ret

000033a6 <main>:
//************************************************************
//* Main loop
//************************************************************

int main(void)
{
    33a6:	cf 93       	push	r28
    33a8:	df 93       	push	r29
    33aa:	cd b7       	in	r28, 0x3d	; 61
    33ac:	de b7       	in	r29, 0x3e	; 62
    33ae:	ab 97       	sbiw	r28, 0x2b	; 43
    33b0:	0f b6       	in	r0, 0x3f	; 63
    33b2:	f8 94       	cli
    33b4:	de bf       	out	0x3e, r29	; 62
    33b6:	0f be       	out	0x3f, r0	; 63
    33b8:	cd bf       	out	0x3d, r28	; 61
	uint8_t i = 0;
	int16_t PWM_pulses = 3; 
	uint32_t interval = 0;			// IMU interval
	
	// Do all init tasks
	init();
    33ba:	0e 94 d5 28 	call	0x51aa	; 0x51aa <init>
	int16_t temp1 = 0;
	uint16_t transition_time = 0;
	uint8_t	old_alarms = 0;
	uint8_t ServoFlag = 0;
	uint8_t i = 0;
	int16_t PWM_pulses = 3; 
    33be:	53 e0       	ldi	r21, 0x03	; 3
    33c0:	65 2e       	mov	r6, r21
    33c2:	71 2c       	mov	r7, r1
	uint8_t Menu_mode = STATUS_TIMEOUT;
	int8_t	old_flight = 3;			// Old flight profile
	int8_t	old_trans_mode = 0;		// Old transition mode
	int16_t temp1 = 0;
	uint16_t transition_time = 0;
	uint8_t	old_alarms = 0;
    33c4:	18 a6       	std	Y+40, r1	; 0x28
	uint16_t InterruptCounter = 0;
	uint8_t	Disarm_seconds = 0;
	uint8_t Status_seconds = 0;
	uint8_t Menu_mode = STATUS_TIMEOUT;
	int8_t	old_flight = 3;			// Old flight profile
	int8_t	old_trans_mode = 0;		// Old transition mode
    33c6:	1f a2       	std	Y+39, r1	; 0x27
	// Locals
	uint16_t InterruptCounter = 0;
	uint8_t	Disarm_seconds = 0;
	uint8_t Status_seconds = 0;
	uint8_t Menu_mode = STATUS_TIMEOUT;
	int8_t	old_flight = 3;			// Old flight profile
    33c8:	63 e0       	ldi	r22, 0x03	; 3
    33ca:	b6 2e       	mov	r11, r22

	// Locals
	uint16_t InterruptCounter = 0;
	uint8_t	Disarm_seconds = 0;
	uint8_t Status_seconds = 0;
	uint8_t Menu_mode = STATUS_TIMEOUT;
    33cc:	18 e0       	ldi	r17, 0x08	; 8
	uint8_t ServoRate_TCNT2 = 0;

	// Locals
	uint16_t InterruptCounter = 0;
	uint8_t	Disarm_seconds = 0;
	uint8_t Status_seconds = 0;
    33ce:	1f 8a       	std	Y+23, r1	; 0x17
	uint8_t Servo_TCNT2 = 0;
	uint8_t ServoRate_TCNT2 = 0;

	// Locals
	uint16_t InterruptCounter = 0;
	uint8_t	Disarm_seconds = 0;
    33d0:	1b 86       	std	Y+11, r1	; 0x0b
	uint8_t Ticker_TCNT2 = 0;
	uint8_t Servo_TCNT2 = 0;
	uint8_t ServoRate_TCNT2 = 0;

	// Locals
	uint16_t InterruptCounter = 0;
    33d2:	1e 8a       	std	Y+22, r1	; 0x16
    33d4:	1d 8a       	std	Y+21, r1	; 0x15
	uint8_t Refresh_TCNT2 = 0;
	uint8_t Disarm_TCNT2 = 0;
	uint8_t Arm_TCNT2 = 0;
	uint8_t Ticker_TCNT2 = 0;
	uint8_t Servo_TCNT2 = 0;
	uint8_t ServoRate_TCNT2 = 0;
    33d6:	1e a2       	std	Y+38, r1	; 0x26
	uint8_t Status_TCNT2 = 0;
	uint8_t Refresh_TCNT2 = 0;
	uint8_t Disarm_TCNT2 = 0;
	uint8_t Arm_TCNT2 = 0;
	uint8_t Ticker_TCNT2 = 0;
	uint8_t Servo_TCNT2 = 0;
    33d8:	1d a2       	std	Y+37, r1	; 0x25
	uint8_t Transition_TCNT2 = 0;
	uint8_t Status_TCNT2 = 0;
	uint8_t Refresh_TCNT2 = 0;
	uint8_t Disarm_TCNT2 = 0;
	uint8_t Arm_TCNT2 = 0;
	uint8_t Ticker_TCNT2 = 0;
    33da:	1c a2       	std	Y+36, r1	; 0x24
	uint16_t RC_Rate_TCNT1 = 0;
	uint8_t Transition_TCNT2 = 0;
	uint8_t Status_TCNT2 = 0;
	uint8_t Refresh_TCNT2 = 0;
	uint8_t Disarm_TCNT2 = 0;
	uint8_t Arm_TCNT2 = 0;
    33dc:	1b a2       	std	Y+35, r1	; 0x23
	// Timer incrementers
	uint16_t RC_Rate_TCNT1 = 0;
	uint8_t Transition_TCNT2 = 0;
	uint8_t Status_TCNT2 = 0;
	uint8_t Refresh_TCNT2 = 0;
	uint8_t Disarm_TCNT2 = 0;
    33de:	1a a2       	std	Y+34, r1	; 0x22

	// Timer incrementers
	uint16_t RC_Rate_TCNT1 = 0;
	uint8_t Transition_TCNT2 = 0;
	uint8_t Status_TCNT2 = 0;
	uint8_t Refresh_TCNT2 = 0;
    33e0:	19 a2       	std	Y+33, r1	; 0x21
	uint16_t ticker_16 = 0;

	// Timer incrementers
	uint16_t RC_Rate_TCNT1 = 0;
	uint8_t Transition_TCNT2 = 0;
	uint8_t Status_TCNT2 = 0;
    33e2:	18 a2       	std	Y+32, r1	; 0x20
	uint16_t Save_TCNT1 = 0;
	uint16_t ticker_16 = 0;

	// Timer incrementers
	uint16_t RC_Rate_TCNT1 = 0;
	uint8_t Transition_TCNT2 = 0;
    33e4:	1f 8e       	std	Y+31, r1	; 0x1f
	uint16_t Disarm_timer = 0;
	uint16_t Save_TCNT1 = 0;
	uint16_t ticker_16 = 0;

	// Timer incrementers
	uint16_t RC_Rate_TCNT1 = 0;
    33e6:	81 2c       	mov	r8, r1
    33e8:	91 2c       	mov	r9, r1
	uint16_t UpdateStatus_timer = 0;
	uint16_t Ticker_Count = 0;
	uint16_t RC_Timeout = 0;
	uint16_t Servo_Rate = 0;
	uint16_t Transition_timeout = 0;
	uint16_t Disarm_timer = 0;
    33ea:	18 86       	std	Y+8, r1	; 0x08
    33ec:	1f 82       	std	Y+7, r1	; 0x07
	uint16_t Status_timeout = 0;
	uint16_t UpdateStatus_timer = 0;
	uint16_t Ticker_Count = 0;
	uint16_t RC_Timeout = 0;
	uint16_t Servo_Rate = 0;
	uint16_t Transition_timeout = 0;
    33ee:	1a 8a       	std	Y+18, r1	; 0x12
    33f0:	19 8a       	std	Y+17, r1	; 0x11
	// 16-bit timers
	uint16_t Status_timeout = 0;
	uint16_t UpdateStatus_timer = 0;
	uint16_t Ticker_Count = 0;
	uint16_t RC_Timeout = 0;
	uint16_t Servo_Rate = 0;
    33f2:	18 8a       	std	Y+16, r1	; 0x10
    33f4:	1f 86       	std	Y+15, r1	; 0x0f
	
	// 16-bit timers
	uint16_t Status_timeout = 0;
	uint16_t UpdateStatus_timer = 0;
	uint16_t Ticker_Count = 0;
	uint16_t RC_Timeout = 0;
    33f6:	1b a6       	std	Y+43, r1	; 0x2b
    33f8:	1a a6       	std	Y+42, r1	; 0x2a
	uint32_t PWM_interval = PWM_PERIOD_WORST;	// Loop period when generating PWM. Initialise with worst case until updated.
	
	// 16-bit timers
	uint16_t Status_timeout = 0;
	uint16_t UpdateStatus_timer = 0;
	uint16_t Ticker_Count = 0;
    33fa:	1d 8e       	std	Y+29, r1	; 0x1d
    33fc:	1c 8e       	std	Y+28, r1	; 0x1c
	uint32_t RC_Rate_Timer = 0;
	uint32_t PWM_interval = PWM_PERIOD_WORST;	// Loop period when generating PWM. Initialise with worst case until updated.
	
	// 16-bit timers
	uint16_t Status_timeout = 0;
	uint16_t UpdateStatus_timer = 0;
    33fe:	19 8e       	std	Y+25, r1	; 0x19
    3400:	18 8e       	std	Y+24, r1	; 0x18
	uint32_t Arm_timer = 0;
	uint32_t RC_Rate_Timer = 0;
	uint32_t PWM_interval = PWM_PERIOD_WORST;	// Loop period when generating PWM. Initialise with worst case until updated.
	
	// 16-bit timers
	uint16_t Status_timeout = 0;
    3402:	1e 86       	std	Y+14, r1	; 0x0e
    3404:	1d 86       	std	Y+13, r1	; 0x0d
	bool SlowRC = true;

	// 32-bit timers
	uint32_t Arm_timer = 0;
	uint32_t RC_Rate_Timer = 0;
	uint32_t PWM_interval = PWM_PERIOD_WORST;	// Loop period when generating PWM. Initialise with worst case until updated.
    3406:	71 e6       	ldi	r23, 0x61	; 97
    3408:	c7 2e       	mov	r12, r23
    340a:	71 e5       	ldi	r23, 0x51	; 81
    340c:	d7 2e       	mov	r13, r23
    340e:	e1 2c       	mov	r14, r1
    3410:	f1 2c       	mov	r15, r1
	bool Interrupted_Clone = false;
	bool SlowRC = true;

	// 32-bit timers
	uint32_t Arm_timer = 0;
	uint32_t RC_Rate_Timer = 0;
    3412:	1b 82       	std	Y+3, r1	; 0x03
    3414:	1c 82       	std	Y+4, r1	; 0x04
    3416:	1d 82       	std	Y+5, r1	; 0x05
    3418:	1e 82       	std	Y+6, r1	; 0x06
	bool PWMOverride = false;
	bool Interrupted_Clone = false;
	bool SlowRC = true;

	// 32-bit timers
	uint32_t Arm_timer = 0;
    341a:	21 2c       	mov	r2, r1
    341c:	31 2c       	mov	r3, r1
    341e:	21 01       	movw	r4, r2
	bool RCInterruptsON = false;
	bool ServoTick = false;
	bool ResampleRCRate = false;
	bool PWMOverride = false;
	bool Interrupted_Clone = false;
	bool SlowRC = true;
    3420:	21 e0       	ldi	r18, 0x01	; 1
    3422:	29 87       	std	Y+9, r18	; 0x09
	bool PWMBlocked = false;
	bool RCInterruptsON = false;
	bool ServoTick = false;
	bool ResampleRCRate = false;
	bool PWMOverride = false;
	bool Interrupted_Clone = false;
    3424:	00 e0       	ldi	r16, 0x00	; 0
	bool TransitionUpdated = false;
	bool RCrateMeasured = false;
	bool PWMBlocked = false;
	bool RCInterruptsON = false;
	bool ServoTick = false;
	bool ResampleRCRate = false;
    3426:	1b 8e       	std	Y+27, r1	; 0x1b
	// Flags
	bool TransitionUpdated = false;
	bool RCrateMeasured = false;
	bool PWMBlocked = false;
	bool RCInterruptsON = false;
	bool ServoTick = false;
    3428:	1a 86       	std	Y+10, r1	; 0x0a
{
	// Flags
	bool TransitionUpdated = false;
	bool RCrateMeasured = false;
	bool PWMBlocked = false;
	bool RCInterruptsON = false;
    342a:	1a 8e       	std	Y+26, r1	; 0x1a
int main(void)
{
	// Flags
	bool TransitionUpdated = false;
	bool RCrateMeasured = false;
	bool PWMBlocked = false;
    342c:	1c 86       	std	Y+12, r1	; 0x0c

int main(void)
{
	// Flags
	bool TransitionUpdated = false;
	bool RCrateMeasured = false;
    342e:	1a 82       	std	Y+2, r1	; 0x02

	// Main loop
	while (1)
	{
		// Increment the loop counter
		LoopCount++;
    3430:	80 91 0e 05 	lds	r24, 0x050E
    3434:	8f 5f       	subi	r24, 0xFF	; 255
    3436:	80 93 0e 05 	sts	0x050E, r24
		//* Check for interruption of PWM generation
		//* The "JitterFlag" flag was reset just before PWM generation.
		//* Being set here means that an interrupt has occurred.
		//************************************************************

		if (JitterFlag == true)
    343a:	80 91 d5 07 	lds	r24, 0x07D5
    343e:	88 23       	and	r24, r24
    3440:	31 f0       	breq	.+12     	; 0x344e <main+0xa8>
		{
			InterruptCounter++;
    3442:	4d 89       	ldd	r20, Y+21	; 0x15
    3444:	5e 89       	ldd	r21, Y+22	; 0x16
    3446:	4f 5f       	subi	r20, 0xFF	; 255
    3448:	5f 4f       	sbci	r21, 0xFF	; 255
    344a:	5e 8b       	std	Y+22, r21	; 0x16
    344c:	4d 8b       	std	Y+21, r20	; 0x15
		//* Increment Status_seconds every second and trigger
		//* a RC rate resample every second
		//************************************************************

		// Count elapsed seconds
		if (Status_timeout > SECOND_TIMER)
    344e:	2d 85       	ldd	r18, Y+13	; 0x0d
    3450:	3e 85       	ldd	r19, Y+14	; 0x0e
    3452:	2c 34       	cpi	r18, 0x4C	; 76
    3454:	3c 44       	sbci	r19, 0x4C	; 76
    3456:	98 f0       	brcs	.+38     	; 0x347e <main+0xd8>
		{
			Status_seconds++;
    3458:	2f 89       	ldd	r18, Y+23	; 0x17
    345a:	2f 5f       	subi	r18, 0xFF	; 255
    345c:	2f 8b       	std	Y+23, r18	; 0x17
			Status_timeout = 0;

			// Update the interrupt count each second
			InterruptCount = InterruptCounter;
    345e:	4d 89       	ldd	r20, Y+21	; 0x15
    3460:	5e 89       	ldd	r21, Y+22	; 0x16
    3462:	50 93 13 05 	sts	0x0513, r21
    3466:	40 93 12 05 	sts	0x0512, r20
			InterruptCounter = 0;
			
			// Re-measure the frame rate in FAST mode every second
			if (Config.Servo_rate == FAST)
    346a:	80 91 cb 05 	lds	r24, 0x05CB
			Status_seconds++;
			Status_timeout = 0;

			// Update the interrupt count each second
			InterruptCount = InterruptCounter;
			InterruptCounter = 0;
    346e:	1e 8a       	std	Y+22, r1	; 0x16
    3470:	1d 8a       	std	Y+21, r1	; 0x15

		// Count elapsed seconds
		if (Status_timeout > SECOND_TIMER)
		{
			Status_seconds++;
			Status_timeout = 0;
    3472:	1e 86       	std	Y+14, r1	; 0x0e
    3474:	1d 86       	std	Y+13, r1	; 0x0d
			// Update the interrupt count each second
			InterruptCount = InterruptCounter;
			InterruptCounter = 0;
			
			// Re-measure the frame rate in FAST mode every second
			if (Config.Servo_rate == FAST)
    3476:	82 30       	cpi	r24, 0x02	; 2
    3478:	11 f4       	brne	.+4      	; 0x347e <main+0xd8>
			{
				ResampleRCRate = true;
    347a:	21 e0       	ldi	r18, 0x01	; 1
    347c:	2b 8f       	std	Y+27, r18	; 0x1b
		// Assume PWM is OK until through the state machine
		// If the state machine requires PWM to be blocked, 
		// it will set this flag
		PWMOverride = false; 

		switch(Menu_mode) 
    347e:	81 2f       	mov	r24, r17
    3480:	90 e0       	ldi	r25, 0x00	; 0
    3482:	8b 30       	cpi	r24, 0x0B	; 11
    3484:	91 05       	cpc	r25, r1
    3486:	08 f0       	brcs	.+2      	; 0x348a <main+0xe4>
    3488:	75 c0       	rjmp	.+234    	; 0x3574 <main+0x1ce>
    348a:	fc 01       	movw	r30, r24
    348c:	e2 5c       	subi	r30, 0xC2	; 194
    348e:	ff 4f       	sbci	r31, 0xFF	; 255
    3490:	0c 94 67 48 	jmp	0x90ce	; 0x90ce <__tablejump2__>
			// In IDLE mode, the text "Press for status" is displayed ONCE.
			// If a button is pressed the mode changes to PRESTATUS, where
			// it will wait for the right time to proceed.
			case IDLE:
				// If any button is pressed
				if((PINB & 0xf0) != 0xf0)
    3494:	83 b1       	in	r24, 0x03	; 3
    3496:	80 7f       	andi	r24, 0xF0	; 240
    3498:	80 3f       	cpi	r24, 0xF0	; 240
    349a:	41 f0       	breq	.+16     	; 0x34ac <main+0x106>
					PWMOverride = false;
					
					// When not in idle mode, enable Timer0 interrupts as loop rate 
					// is slow and we need TMR0 to fully measure it.
					// This may cause PWM generation interruption
					TIMSK0 |= (1 << TOIE0);	
    349c:	80 91 6e 00 	lds	r24, 0x006E
    34a0:	81 60       	ori	r24, 0x01	; 1
    34a2:	80 93 6e 00 	sts	0x006E, r24
			// it will wait for the right time to proceed.
			case IDLE:
				// If any button is pressed
				if((PINB & 0xf0) != 0xf0)
				{
					Menu_mode = PRESTATUS;
    34a6:	13 e0       	ldi	r17, 0x03	; 3
					// Reset the status screen timeout
					Status_seconds = 0;
    34a8:	1f 8a       	std	Y+23, r1	; 0x17
    34aa:	64 c0       	rjmp	.+200    	; 0x3574 <main+0x1ce>
				}
				// Idle mode - fast loop rate so don't need TMR0.
				// We don't want TMR0 to interrupt PWM generation.
				else
				{
					TIMSK0 = 0; 		// Disable Timer0 interrupts
    34ac:	10 92 6e 00 	sts	0x006E, r1
					TIFR0 = 1;			// Clear interrupt flag
    34b0:	81 e0       	ldi	r24, 0x01	; 1
    34b2:	85 bb       	out	0x15, r24	; 21
    34b4:	5f c0       	rjmp	.+190    	; 0x3574 <main+0x1ce>
			// If Interrupted or Interrupted_Clone is true, data must have just completed.
			// If Overdue is true, there is no data to interrupt.
			// PWM activity must stop before we attempt to pop up the status screen.
			case PRESTATUS:
				// If interrupted, or if currently "No signal"
				if (Interrupted || Interrupted_Clone || Overdue)
    34b6:	80 91 ba 07 	lds	r24, 0x07BA
    34ba:	81 11       	cpse	r24, r1
    34bc:	49 c0       	rjmp	.+146    	; 0x3550 <main+0x1aa>
    34be:	01 11       	cpse	r16, r1
    34c0:	4c c0       	rjmp	.+152    	; 0x355a <main+0x1b4>
    34c2:	80 91 0f 05 	lds	r24, 0x050F
    34c6:	88 23       	and	r24, r24
    34c8:	09 f4       	brne	.+2      	; 0x34cc <main+0x126>
    34ca:	54 c0       	rjmp	.+168    	; 0x3574 <main+0x1ce>
				{
					// Ready to move on
					Menu_mode = STATUS;
    34cc:	14 e0       	ldi	r17, 0x04	; 4
    34ce:	54 c0       	rjmp	.+168    	; 0x3578 <main+0x1d2>
			case STATUS:
				// Reset the status screen period
				UpdateStatus_timer = 0;

				// Update status screen
				Display_status();
    34d0:	0e 94 81 13 	call	0x2702	; 0x2702 <Display_status>
				
				// Prevent PWM output just after updating the LCD
				PWMOverride = true;

				// Wait for timeout
				Menu_mode = WAITING_TIMEOUT_BD;
    34d4:	16 e0       	ldi	r17, 0x06	; 6
				break;

			// Status screen first display
			case STATUS:
				// Reset the status screen period
				UpdateStatus_timer = 0;
    34d6:	19 8e       	std	Y+25, r1	; 0x19
    34d8:	18 8e       	std	Y+24, r1	; 0x18
    34da:	41 c0       	rjmp	.+130    	; 0x355e <main+0x1b8>

			// Status screen up, but button still down ;)
			// This is designed to stop the menu appearing instead of the status screen
			// as it will stay in this state until the button is released
			case WAITING_TIMEOUT_BD:
				if(BUTTON1 == 0)
    34dc:	1f 9b       	sbis	0x03, 7	; 3
    34de:	4a c0       	rjmp	.+148    	; 0x3574 <main+0x1ce>
				{
					Menu_mode = WAITING_TIMEOUT_BD;
				}
				else
				{
					Menu_mode = WAITING_TIMEOUT;
    34e0:	15 e0       	ldi	r17, 0x05	; 5
    34e2:	48 c0       	rjmp	.+144    	; 0x3574 <main+0x1ce>
												
			// Status screen up, waiting for timeout or action
			// but button is back up
			case WAITING_TIMEOUT:
				// In status screen, change back to idle after timing out
				if (Status_seconds >= 10)
    34e4:	4f 89       	ldd	r20, Y+23	; 0x17
    34e6:	4a 30       	cpi	r20, 0x0A	; 10
    34e8:	e8 f5       	brcc	.+122    	; 0x3564 <main+0x1be>
					// Enable PWM output
					PWMOverride = false;
				}

				// Jump to menu if button pressed
				else if(BUTTON1 == 0)
    34ea:	1f 9b       	sbis	0x03, 7	; 3
    34ec:	3d c0       	rjmp	.+122    	; 0x3568 <main+0x1c2>
					// Prevent PWM output
					PWMOverride = true; // Debug - not needed yet?
				}

				// Update status screen four times/sec while waiting to time out
				else if (UpdateStatus_timer > (SECOND_TIMER >> 2))
    34ee:	28 8d       	ldd	r18, Y+24	; 0x18
    34f0:	39 8d       	ldd	r19, Y+25	; 0x19
    34f2:	23 31       	cpi	r18, 0x13	; 19
    34f4:	33 41       	sbci	r19, 0x13	; 19
    34f6:	f0 f1       	brcs	.+124    	; 0x3574 <main+0x1ce>
				{
					Menu_mode = PRESTATUS;
    34f8:	13 e0       	ldi	r17, 0x03	; 3
    34fa:	2c c0       	rjmp	.+88     	; 0x3554 <main+0x1ae>
			// If Interrupted or Interrupted_Clone is true, data must have just completed.
			// If Overdue is true, there is no data to interrupt.
			// PWM activity must stop before we attempt to pop up the status screen.
			case PRESTATUS_TIMEOUT:
				// If interrupted, or if currently "No signal"
				if (Interrupted || Interrupted_Clone || Overdue)
    34fc:	80 91 ba 07 	lds	r24, 0x07BA
    3500:	81 11       	cpse	r24, r1
    3502:	34 c0       	rjmp	.+104    	; 0x356c <main+0x1c6>
    3504:	01 11       	cpse	r16, r1
    3506:	32 c0       	rjmp	.+100    	; 0x356c <main+0x1c6>
    3508:	80 91 0f 05 	lds	r24, 0x050F
    350c:	88 23       	and	r24, r24
    350e:	39 f1       	breq	.+78     	; 0x355e <main+0x1b8>
				{
					// Switch to STATUS_TIMEOUT mode
					Menu_mode = STATUS_TIMEOUT;
    3510:	18 e0       	ldi	r17, 0x08	; 8
    3512:	30 c0       	rjmp	.+96     	; 0x3574 <main+0x1ce>

			// In STATUS_TIMEOUT mode, the idle screen is displayed and the mode 
			// changed to POSTSTATUS_TIMEOUT. 
			case STATUS_TIMEOUT:
				// Pop up the Idle screen
				idle_screen();
    3514:	0e 94 eb 21 	call	0x43d6	; 0x43d6 <idle_screen>

				// Switch to IDLE mode
				Menu_mode = POSTSTATUS_TIMEOUT;
    3518:	19 e0       	ldi	r17, 0x09	; 9
    351a:	21 c0       	rjmp	.+66     	; 0x355e <main+0x1b8>

			// In POSTSTATUS_TIMEOUT mode, we wait for a PWM cycle to complete
			// The idle screen has been refreshed and we need to wait.
			case POSTSTATUS_TIMEOUT:
				// If interrupted, or if currently "No signal"
				if (Interrupted || Interrupted_Clone || Overdue)
    351c:	80 91 ba 07 	lds	r24, 0x07BA
    3520:	81 11       	cpse	r24, r1
    3522:	26 c0       	rjmp	.+76     	; 0x3570 <main+0x1ca>
    3524:	01 11       	cpse	r16, r1
    3526:	24 c0       	rjmp	.+72     	; 0x3570 <main+0x1ca>
    3528:	80 91 0f 05 	lds	r24, 0x050F
    352c:	88 23       	and	r24, r24
    352e:	21 f1       	breq	.+72     	; 0x3578 <main+0x1d2>
				{
					// Switch to IDLE mode
					Menu_mode = IDLE;
    3530:	10 e0       	ldi	r17, 0x00	; 0
    3532:	20 c0       	rjmp	.+64     	; 0x3574 <main+0x1ce>
				
				break;

			// In MENU mode, 
			case MENU:
				LVA = 0;	// Make sure buzzer is off :)
    3534:	29 98       	cbi	0x05, 1	; 5
				// Disarm the FC
				General_error |= (1 << DISARMED);
    3536:	80 91 16 05 	lds	r24, 0x0516
    353a:	84 60       	ori	r24, 0x04	; 4
    353c:	80 93 16 05 	sts	0x0516, r24
				LED1 = 0;
    3540:	2b 98       	cbi	0x05, 3	; 5
				// Start the menu system
				menu_main();
    3542:	0e 94 fe 32 	call	0x65fc	; 0x65fc <menu_main>
				// Switch back to status screen when leaving menu
				Menu_mode = STATUS;
				// Reset timeout once back in status screen
				Status_seconds = 0;
				// Reset IMU on return from menu
				reset_IMU();
    3546:	0e 94 8c 28 	call	0x5118	; 0x5118 <reset_IMU>
				General_error |= (1 << DISARMED);
				LED1 = 0;
				// Start the menu system
				menu_main();
				// Switch back to status screen when leaving menu
				Menu_mode = STATUS;
    354a:	14 e0       	ldi	r17, 0x04	; 4
				// Reset timeout once back in status screen
				Status_seconds = 0;
    354c:	1f 8a       	std	Y+23, r1	; 0x17
    354e:	14 c0       	rjmp	.+40     	; 0x3578 <main+0x1d2>
			case PRESTATUS:
				// If interrupted, or if currently "No signal"
				if (Interrupted || Interrupted_Clone || Overdue)
				{
					// Ready to move on
					Menu_mode = STATUS;
    3550:	14 e0       	ldi	r17, 0x04	; 4
							
					// Prevent PWM output
					PWMOverride = true;		
					
					// Clear Interrupted_Clone
					Interrupted_Clone = false;
    3552:	00 e0       	ldi	r16, 0x00	; 0
				{
					// Ready to move on
					Menu_mode = STATUS;
							
					// Prevent PWM output
					PWMOverride = true;		
    3554:	21 e0       	ldi	r18, 0x01	; 1
    3556:	29 83       	std	Y+1, r18	; 0x01
    3558:	11 c0       	rjmp	.+34     	; 0x357c <main+0x1d6>
			case PRESTATUS:
				// If interrupted, or if currently "No signal"
				if (Interrupted || Interrupted_Clone || Overdue)
				{
					// Ready to move on
					Menu_mode = STATUS;
    355a:	14 e0       	ldi	r17, 0x04	; 4
							
					// Prevent PWM output
					PWMOverride = true;		
					
					// Clear Interrupted_Clone
					Interrupted_Clone = false;
    355c:	00 e0       	ldi	r16, 0x00	; 0
				{
					// Ready to move on
					Menu_mode = STATUS;
							
					// Prevent PWM output
					PWMOverride = true;		
    355e:	31 e0       	ldi	r19, 0x01	; 1
    3560:	39 83       	std	Y+1, r19	; 0x01
    3562:	0c c0       	rjmp	.+24     	; 0x357c <main+0x1d6>
			// but button is back up
			case WAITING_TIMEOUT:
				// In status screen, change back to idle after timing out
				if (Status_seconds >= 10)
				{
					Menu_mode = PRESTATUS_TIMEOUT;
    3564:	17 e0       	ldi	r17, 0x07	; 7
    3566:	06 c0       	rjmp	.+12     	; 0x3574 <main+0x1ce>
				}

				// Jump to menu if button pressed
				else if(BUTTON1 == 0)
				{
					Menu_mode = MENU;
    3568:	1a e0       	ldi	r17, 0x0A	; 10
    356a:	f4 cf       	rjmp	.-24     	; 0x3554 <main+0x1ae>
			case PRESTATUS_TIMEOUT:
				// If interrupted, or if currently "No signal"
				if (Interrupted || Interrupted_Clone || Overdue)
				{
					// Switch to STATUS_TIMEOUT mode
					Menu_mode = STATUS_TIMEOUT;
    356c:	18 e0       	ldi	r17, 0x08	; 8
    356e:	01 c0       	rjmp	.+2      	; 0x3572 <main+0x1cc>
			case POSTSTATUS_TIMEOUT:
				// If interrupted, or if currently "No signal"
				if (Interrupted || Interrupted_Clone || Overdue)
				{
					// Switch to IDLE mode
					Menu_mode = IDLE;
    3570:	10 e0       	ldi	r17, 0x00	; 0
					
					// Prevent PWM output
					PWMOverride = false;
					
					// Clear Interrupted_Clone
					Interrupted_Clone = false;
    3572:	00 e0       	ldi	r16, 0x00	; 0
				{
					// Switch to IDLE mode
					Menu_mode = IDLE;
					
					// Prevent PWM output
					PWMOverride = false;
    3574:	19 82       	std	Y+1, r1	; 0x01
    3576:	02 c0       	rjmp	.+4      	; 0x357c <main+0x1d6>
					Interrupted_Clone = false;
				}
				else
				{
					// Enable PWM output
					PWMOverride = true;			
    3578:	41 e0       	ldi	r20, 0x01	; 1
    357a:	49 83       	std	Y+1, r20	; 0x01
		//************************************************************
		//* Alarms
		//************************************************************

		// If RC signal is overdue, signal RX error message and disarm
		if (Overdue)
    357c:	80 91 0f 05 	lds	r24, 0x050F
    3580:	88 23       	and	r24, r24
    3582:	a1 f0       	breq	.+40     	; 0x35ac <main+0x206>
		{
			General_error |= (1 << NO_SIGNAL);		// Set NO_SIGNAL bit
    3584:	80 91 16 05 	lds	r24, 0x0516
    3588:	82 60       	ori	r24, 0x02	; 2
    358a:	80 93 16 05 	sts	0x0516, r24
			
			// If FC is set to "armable" and is currently armed, disarm the FC
			if ((Config.ArmMode == ARMABLE) && ((General_error & (1 << DISARMED)) == 0))
    358e:	80 91 2b 06 	lds	r24, 0x062B
    3592:	81 30       	cpi	r24, 0x01	; 1
    3594:	81 f4       	brne	.+32     	; 0x35b6 <main+0x210>
    3596:	80 91 16 05 	lds	r24, 0x0516
    359a:	82 fd       	sbrc	r24, 2
    359c:	0c c0       	rjmp	.+24     	; 0x35b6 <main+0x210>
			{
				General_error |= (1 << DISARMED);	// Set flags to disarmed
    359e:	80 91 16 05 	lds	r24, 0x0516
    35a2:	84 60       	ori	r24, 0x04	; 4
    35a4:	80 93 16 05 	sts	0x0516, r24
				LED1 = 0;							// Signal that FC is now disarmed
    35a8:	2b 98       	cbi	0x05, 3	; 5
    35aa:	05 c0       	rjmp	.+10     	; 0x35b6 <main+0x210>
			}
		}
		// RC signal received normally
		else
		{
			General_error &= ~(1 << NO_SIGNAL);		// Clear NO_SIGNAL bit
    35ac:	80 91 16 05 	lds	r24, 0x0516
    35b0:	8d 7f       	andi	r24, 0xFD	; 253
    35b2:	80 93 16 05 	sts	0x0516, r24
		}

		// Beep buzzer if Vbat lower than trigger		
		if (GetVbat() < Config.PowerTriggerActual)
    35b6:	0e 94 c4 45 	call	0x8b88	; 0x8b88 <GetVbat>
    35ba:	20 91 27 06 	lds	r18, 0x0627
    35be:	30 91 28 06 	lds	r19, 0x0628
    35c2:	82 17       	cp	r24, r18
    35c4:	93 07       	cpc	r25, r19
    35c6:	20 f4       	brcc	.+8      	; 0x35d0 <main+0x22a>
		{
			General_error |= (1 << LVA_ALARM);	// Set LVA_Alarm flag
    35c8:	80 91 16 05 	lds	r24, 0x0516
    35cc:	88 60       	ori	r24, 0x08	; 8
    35ce:	03 c0       	rjmp	.+6      	; 0x35d6 <main+0x230>
		}
		else 
		{
			General_error &= ~(1 << LVA_ALARM);	// Clear LVA_Alarm flag
    35d0:	80 91 16 05 	lds	r24, 0x0516
    35d4:	87 7f       	andi	r24, 0xF7	; 247
    35d6:	80 93 16 05 	sts	0x0516, r24
		}

		// Turn on buzzer if in alarm state (BUZZER_ON is oscillating)
		if	(
			 (
				(General_error & (1 << LVA_ALARM)) ||		// Low battery
    35da:	80 91 16 05 	lds	r24, 0x0516
		{
			General_error &= ~(1 << LVA_ALARM);	// Clear LVA_Alarm flag
		}

		// Turn on buzzer if in alarm state (BUZZER_ON is oscillating)
		if	(
    35de:	83 fd       	sbrc	r24, 3
    35e0:	08 c0       	rjmp	.+16     	; 0x35f2 <main+0x24c>
			 (
				(General_error & (1 << LVA_ALARM)) ||		// Low battery
				(General_error & (1 << NO_SIGNAL)) ||		// No signal
    35e2:	80 91 16 05 	lds	r24, 0x0516
		}

		// Turn on buzzer if in alarm state (BUZZER_ON is oscillating)
		if	(
			 (
				(General_error & (1 << LVA_ALARM)) ||		// Low battery
    35e6:	81 fd       	sbrc	r24, 1
    35e8:	04 c0       	rjmp	.+8      	; 0x35f2 <main+0x24c>
				(General_error & (1 << NO_SIGNAL)) ||		// No signal
				(General_error & (1 << THROTTLE_HIGH))		// Throttle high
    35ea:	80 91 16 05 	lds	r24, 0x0516

		// Turn on buzzer if in alarm state (BUZZER_ON is oscillating)
		if	(
			 (
				(General_error & (1 << LVA_ALARM)) ||		// Low battery
				(General_error & (1 << NO_SIGNAL)) ||		// No signal
    35ee:	80 ff       	sbrs	r24, 0
    35f0:	06 c0       	rjmp	.+12     	; 0x35fe <main+0x258>
				(General_error & (1 << THROTTLE_HIGH))		// Throttle high
			 ) && 
			  (Alarm_flags & (1 << BUZZER_ON))
    35f2:	80 91 14 05 	lds	r24, 0x0514
		if	(
			 (
				(General_error & (1 << LVA_ALARM)) ||		// Low battery
				(General_error & (1 << NO_SIGNAL)) ||		// No signal
				(General_error & (1 << THROTTLE_HIGH))		// Throttle high
			 ) && 
    35f6:	84 ff       	sbrs	r24, 4
    35f8:	02 c0       	rjmp	.+4      	; 0x35fe <main+0x258>
			  (Alarm_flags & (1 << BUZZER_ON))
			) 
		{
			LVA = 1;
    35fa:	29 9a       	sbi	0x05, 1	; 5
    35fc:	01 c0       	rjmp	.+2      	; 0x3600 <main+0x25a>
		}
		else 
		{
			LVA = 0;
    35fe:	29 98       	cbi	0x05, 1	; 5

		//************************************************************
		//* Arm/disarm handling
		//************************************************************

		if (Config.ArmMode == ARMABLE)
    3600:	80 91 2b 06 	lds	r24, 0x062B
    3604:	81 30       	cpi	r24, 0x01	; 1
    3606:	09 f0       	breq	.+2      	; 0x360a <main+0x264>
    3608:	8e c0       	rjmp	.+284    	; 0x3726 <main+0x380>
		{
			// Manual arm/disarm
			// If sticks not at extremes, reset manual arm/disarm timer
			// Sticks down and centered = armed. Down and outside = disarmed
			if (
				((-ARM_TIMER_RESET_1 < RCinputs[AILERON]) && (RCinputs[AILERON] < ARM_TIMER_RESET_1)) ||
    360a:	80 91 1d 08 	lds	r24, 0x081D
    360e:	90 91 1e 08 	lds	r25, 0x081E
		if (Config.ArmMode == ARMABLE)
		{
			// Manual arm/disarm
			// If sticks not at extremes, reset manual arm/disarm timer
			// Sticks down and centered = armed. Down and outside = disarmed
			if (
    3612:	81 34       	cpi	r24, 0x41	; 65
    3614:	9c 4f       	sbci	r25, 0xFC	; 252
    3616:	44 f0       	brlt	.+16     	; 0x3628 <main+0x282>
				((-ARM_TIMER_RESET_1 < RCinputs[AILERON]) && (RCinputs[AILERON] < ARM_TIMER_RESET_1)) ||
    3618:	80 91 1d 08 	lds	r24, 0x081D
    361c:	90 91 1e 08 	lds	r25, 0x081E
    3620:	80 3c       	cpi	r24, 0xC0	; 192
    3622:	93 40       	sbci	r25, 0x03	; 3
    3624:	0c f4       	brge	.+2      	; 0x3628 <main+0x282>
    3626:	4f c0       	rjmp	.+158    	; 0x36c6 <main+0x320>
				((-ARM_TIMER_RESET_1 < RCinputs[ELEVATOR]) && (RCinputs[ELEVATOR] < ARM_TIMER_RESET_1)) ||
    3628:	80 91 1f 08 	lds	r24, 0x081F
    362c:	90 91 20 08 	lds	r25, 0x0820
		{
			// Manual arm/disarm
			// If sticks not at extremes, reset manual arm/disarm timer
			// Sticks down and centered = armed. Down and outside = disarmed
			if (
				((-ARM_TIMER_RESET_1 < RCinputs[AILERON]) && (RCinputs[AILERON] < ARM_TIMER_RESET_1)) ||
    3630:	81 34       	cpi	r24, 0x41	; 65
    3632:	9c 4f       	sbci	r25, 0xFC	; 252
    3634:	44 f0       	brlt	.+16     	; 0x3646 <main+0x2a0>
				((-ARM_TIMER_RESET_1 < RCinputs[ELEVATOR]) && (RCinputs[ELEVATOR] < ARM_TIMER_RESET_1)) ||
    3636:	80 91 1f 08 	lds	r24, 0x081F
    363a:	90 91 20 08 	lds	r25, 0x0820
    363e:	80 3c       	cpi	r24, 0xC0	; 192
    3640:	93 40       	sbci	r25, 0x03	; 3
    3642:	0c f4       	brge	.+2      	; 0x3646 <main+0x2a0>
    3644:	40 c0       	rjmp	.+128    	; 0x36c6 <main+0x320>
				((-ARM_TIMER_RESET_1 < RCinputs[RUDDER]) && (RCinputs[RUDDER] < ARM_TIMER_RESET_1)) ||
    3646:	80 91 21 08 	lds	r24, 0x0821
    364a:	90 91 22 08 	lds	r25, 0x0822
			// Manual arm/disarm
			// If sticks not at extremes, reset manual arm/disarm timer
			// Sticks down and centered = armed. Down and outside = disarmed
			if (
				((-ARM_TIMER_RESET_1 < RCinputs[AILERON]) && (RCinputs[AILERON] < ARM_TIMER_RESET_1)) ||
				((-ARM_TIMER_RESET_1 < RCinputs[ELEVATOR]) && (RCinputs[ELEVATOR] < ARM_TIMER_RESET_1)) ||
    364e:	81 34       	cpi	r24, 0x41	; 65
    3650:	9c 4f       	sbci	r25, 0xFC	; 252
    3652:	3c f0       	brlt	.+14     	; 0x3662 <main+0x2bc>
				((-ARM_TIMER_RESET_1 < RCinputs[RUDDER]) && (RCinputs[RUDDER] < ARM_TIMER_RESET_1)) ||
    3654:	80 91 21 08 	lds	r24, 0x0821
    3658:	90 91 22 08 	lds	r25, 0x0822
    365c:	80 3c       	cpi	r24, 0xC0	; 192
    365e:	93 40       	sbci	r25, 0x03	; 3
    3660:	94 f1       	brlt	.+100    	; 0x36c6 <main+0x320>
				(ARM_TIMER_RESET_2 < MonopolarThrottle)
    3662:	80 91 19 08 	lds	r24, 0x0819
    3666:	90 91 1a 08 	lds	r25, 0x081A
			// If sticks not at extremes, reset manual arm/disarm timer
			// Sticks down and centered = armed. Down and outside = disarmed
			if (
				((-ARM_TIMER_RESET_1 < RCinputs[AILERON]) && (RCinputs[AILERON] < ARM_TIMER_RESET_1)) ||
				((-ARM_TIMER_RESET_1 < RCinputs[ELEVATOR]) && (RCinputs[ELEVATOR] < ARM_TIMER_RESET_1)) ||
				((-ARM_TIMER_RESET_1 < RCinputs[RUDDER]) && (RCinputs[RUDDER] < ARM_TIMER_RESET_1)) ||
    366a:	c3 97       	sbiw	r24, 0x33	; 51
    366c:	64 f5       	brge	.+88     	; 0x36c6 <main+0x320>
				Arm_timer = 0;
			}

			// If arm timer times out, the sticks must have been at extremes for ARM_TIMER seconds
			// If aileron is at min, arm the FC
			if ((Arm_timer > ARM_TIMER) && (RCinputs[AILERON] < -ARM_TIMER_RESET_1))
    366e:	3c e4       	ldi	r19, 0x4C	; 76
    3670:	23 16       	cp	r2, r19
    3672:	33 06       	cpc	r3, r19
    3674:	41 04       	cpc	r4, r1
    3676:	51 04       	cpc	r5, r1
    3678:	48 f1       	brcs	.+82     	; 0x36cc <main+0x326>
    367a:	80 91 1d 08 	lds	r24, 0x081D
    367e:	90 91 1e 08 	lds	r25, 0x081E
    3682:	80 34       	cpi	r24, 0x40	; 64
    3684:	9c 4f       	sbci	r25, 0xFC	; 252
    3686:	5c f4       	brge	.+22     	; 0x369e <main+0x2f8>
			{
				Arm_timer = 0;
				General_error &= ~(1 << DISARMED);		// Set flags to armed (negate disarmed)
    3688:	80 91 16 05 	lds	r24, 0x0516
    368c:	8b 7f       	andi	r24, 0xFB	; 251
    368e:	80 93 16 05 	sts	0x0516, r24
				CalibrateGyrosSlow();					// Calibrate gyros
    3692:	0e 94 48 23 	call	0x4690	; 0x4690 <CalibrateGyrosSlow>
				LED1 = 1;								// Signal that FC is ready
    3696:	2b 9a       	sbi	0x05, 3	; 5
				reset_IMU();							// Reset IMU just in case...
    3698:	0e 94 8c 28 	call	0x5118	; 0x5118 <reset_IMU>
    369c:	14 c0       	rjmp	.+40     	; 0x36c6 <main+0x320>
			}
			// Else, disarm the FC after DISARM_TIMER seconds if aileron at max
			else if ((Arm_timer > DISARM_TIMER) && (RCinputs[AILERON] > ARM_TIMER_RESET_1))
    369e:	52 ee       	ldi	r21, 0xE2	; 226
    36a0:	25 16       	cp	r2, r21
    36a2:	54 ee       	ldi	r21, 0xE4	; 228
    36a4:	35 06       	cpc	r3, r21
    36a6:	41 04       	cpc	r4, r1
    36a8:	51 04       	cpc	r5, r1
    36aa:	80 f0       	brcs	.+32     	; 0x36cc <main+0x326>
    36ac:	80 91 1d 08 	lds	r24, 0x081D
    36b0:	90 91 1e 08 	lds	r25, 0x081E
    36b4:	81 3c       	cpi	r24, 0xC1	; 193
    36b6:	93 40       	sbci	r25, 0x03	; 3
    36b8:	4c f0       	brlt	.+18     	; 0x36cc <main+0x326>
			{
				Arm_timer = 0;
				General_error |= (1 << DISARMED);		// Set flags to disarmed
    36ba:	80 91 16 05 	lds	r24, 0x0516
    36be:	84 60       	ori	r24, 0x04	; 4
    36c0:	80 93 16 05 	sts	0x0516, r24
				LED1 = 0;								// Signal that FC is now disarmed
    36c4:	2b 98       	cbi	0x05, 3	; 5
    36c6:	21 2c       	mov	r2, r1
    36c8:	31 2c       	mov	r3, r1
    36ca:	21 01       	movw	r4, r2
			}

			// Automatic disarm
			// Reset auto-disarm count if any RX activity or set to zero, or when currently disarmed
			if ((Flight_flags & (1 << RxActivity)) || (Config.Disarm_timer == 0) || (General_error & (1 << DISARMED)))
    36cc:	80 91 15 05 	lds	r24, 0x0515
    36d0:	80 fd       	sbrc	r24, 0
    36d2:	11 c0       	rjmp	.+34     	; 0x36f6 <main+0x350>
    36d4:	80 91 2c 06 	lds	r24, 0x062C
    36d8:	88 23       	and	r24, r24
    36da:	69 f0       	breq	.+26     	; 0x36f6 <main+0x350>
    36dc:	80 91 16 05 	lds	r24, 0x0516
    36e0:	82 fd       	sbrc	r24, 2
    36e2:	09 c0       	rjmp	.+18     	; 0x36f6 <main+0x350>
				Disarm_timer = 0;
				Disarm_seconds = 0;
			}
		
			// Increment disarm timer (seconds) if armed
			if (Disarm_timer > SECOND_TIMER)
    36e4:	2f 81       	ldd	r18, Y+7	; 0x07
    36e6:	38 85       	ldd	r19, Y+8	; 0x08
    36e8:	2c 34       	cpi	r18, 0x4C	; 76
    36ea:	3c 44       	sbci	r19, 0x4C	; 76
    36ec:	38 f0       	brcs	.+14     	; 0x36fc <main+0x356>
			{
				Disarm_seconds++;
    36ee:	2b 85       	ldd	r18, Y+11	; 0x0b
    36f0:	2f 5f       	subi	r18, 0xFF	; 255
    36f2:	2b 87       	std	Y+11, r18	; 0x0b
    36f4:	01 c0       	rjmp	.+2      	; 0x36f8 <main+0x352>
    36f6:	1b 86       	std	Y+11, r1	; 0x0b
    36f8:	18 86       	std	Y+8, r1	; 0x08
    36fa:	1f 82       	std	Y+7, r1	; 0x07
				Disarm_timer = 0;
			}

			// Auto-disarm model if timeout enabled and due
			// Don't allow disarms less than 30 seconds. That's just silly...
			if ((Disarm_seconds >= Config.Disarm_timer) && (Config.Disarm_timer >= 30))	
    36fc:	40 91 2c 06 	lds	r20, 0x062C
    3700:	5b 85       	ldd	r21, Y+11	; 0x0b
    3702:	25 2f       	mov	r18, r21
    3704:	30 e0       	ldi	r19, 0x00	; 0
    3706:	84 2f       	mov	r24, r20
    3708:	99 27       	eor	r25, r25
    370a:	87 fd       	sbrc	r24, 7
    370c:	90 95       	com	r25
    370e:	28 17       	cp	r18, r24
    3710:	39 07       	cpc	r19, r25
    3712:	7c f0       	brlt	.+30     	; 0x3732 <main+0x38c>
    3714:	4e 31       	cpi	r20, 0x1E	; 30
    3716:	6c f0       	brlt	.+26     	; 0x3732 <main+0x38c>
			{
				// Disarm the FC
				General_error |= (1 << DISARMED);		// Set flags to disarmed
    3718:	80 91 16 05 	lds	r24, 0x0516
    371c:	84 60       	ori	r24, 0x04	; 4
    371e:	80 93 16 05 	sts	0x0516, r24
				LED1 = 0;								// Signal that FC is now disarmed
    3722:	2b 98       	cbi	0x05, 3	; 5
    3724:	06 c0       	rjmp	.+12     	; 0x3732 <main+0x38c>
			}
		}
		// Arm when ArmMode is OFF
		else 
		{
			General_error &= ~(1 << DISARMED);			// Set flags to armed
    3726:	80 91 16 05 	lds	r24, 0x0516
    372a:	8b 7f       	andi	r24, 0xFB	; 251
    372c:	80 93 16 05 	sts	0x0516, r24
			LED1 = 1;
    3730:	2b 9a       	sbi	0x05, 3	; 5
		//************************************************************
		//* Get RC data
		//************************************************************

		// Update zeroed RC channel data
		RxGetChannels();
    3732:	0e 94 fa 42 	call	0x85f4	; 0x85f4 <RxGetChannels>

		// Check for throttle reset
		if (MonopolarThrottle < THROTTLEIDLE)
    3736:	80 91 19 08 	lds	r24, 0x0819
    373a:	90 91 1a 08 	lds	r25, 0x081A
    373e:	c2 97       	sbiw	r24, 0x32	; 50
    3740:	5c f4       	brge	.+22     	; 0x3758 <main+0x3b2>
		{
			// Clear throttle high error
			General_error &= ~(1 << THROTTLE_HIGH);	
    3742:	80 91 16 05 	lds	r24, 0x0516
    3746:	8e 7f       	andi	r24, 0xFE	; 254
    3748:	80 93 16 05 	sts	0x0516, r24

			// Reset I-terms at throttle cut. Using memset saves code space
			memset(&IntegralGyro[P1][ROLL], 0, sizeof(int32_t) * 6); 
    374c:	88 e1       	ldi	r24, 0x18	; 24
    374e:	ad ed       	ldi	r26, 0xDD	; 221
    3750:	b7 e0       	ldi	r27, 0x07	; 7
    3752:	1d 92       	st	X+, r1
    3754:	8a 95       	dec	r24
    3756:	e9 f7       	brne	.-6      	; 0x3752 <main+0x3ac>
		//* by the Config.TransitionSpeed setting.
		//* The transition will hold at P1n position if directed to.
		//************************************************************

		// P2 transition point hard-coded to 50% above center
		if 	(RCinputs[Config.FlightChan] > 500)
    3758:	80 91 ce 05 	lds	r24, 0x05CE
    375c:	88 0f       	add	r24, r24
    375e:	99 0b       	sbc	r25, r25
    3760:	fc 01       	movw	r30, r24
    3762:	e5 5e       	subi	r30, 0xE5	; 229
    3764:	f7 4f       	sbci	r31, 0xF7	; 247
    3766:	20 81       	ld	r18, Z
    3768:	31 81       	ldd	r19, Z+1	; 0x01
    376a:	25 3f       	cpi	r18, 0xF5	; 245
    376c:	31 40       	sbci	r19, 0x01	; 1
    376e:	14 f0       	brlt	.+4      	; 0x3774 <main+0x3ce>
		{
			Config.FlightSel = 2;			// Flight mode 2 (P2)
    3770:	22 e0       	ldi	r18, 0x02	; 2
    3772:	06 c0       	rjmp	.+12     	; 0x3780 <main+0x3da>
		}
		// P1.n transition point hard-coded to 50% below center
		else if (RCinputs[Config.FlightChan] > -500)
    3774:	20 81       	ld	r18, Z
    3776:	31 81       	ldd	r19, Z+1	; 0x01
    3778:	2d 30       	cpi	r18, 0x0D	; 13
    377a:	3e 4f       	sbci	r19, 0xFE	; 254
    377c:	24 f0       	brlt	.+8      	; 0x3786 <main+0x3e0>
		{
			Config.FlightSel = 1;			// Flight mode 1 (P1.n)
    377e:	21 e0       	ldi	r18, 0x01	; 1
    3780:	20 93 9f 07 	sts	0x079F, r18
    3784:	02 c0       	rjmp	.+4      	; 0x378a <main+0x3e4>
		}
		// Otherwise the default is P1
		else
		{
			Config.FlightSel = 0;			// Flight mode 0 (P1)
    3786:	10 92 9f 07 	sts	0x079F, r1
		//* Set up the correct state for the current setting.
		//* Check for initial startup - the only time that old_flight should be "3".
		//* Also, re-initialise if the transition setting is changed
		//************************************************************

		if ((old_flight == 3) || (old_trans_mode != Config.TransitionSpeed))
    378a:	f3 e0       	ldi	r31, 0x03	; 3
    378c:	bf 16       	cp	r11, r31
    378e:	29 f0       	breq	.+10     	; 0x379a <main+0x3f4>
    3790:	20 91 cf 05 	lds	r18, 0x05CF
    3794:	3f a1       	ldd	r19, Y+39	; 0x27
    3796:	32 17       	cp	r19, r18
    3798:	51 f1       	breq	.+84     	; 0x37ee <main+0x448>
		{
			switch(Config.FlightSel)
    379a:	b0 90 9f 07 	lds	r11, 0x079F
    379e:	41 e0       	ldi	r20, 0x01	; 1
    37a0:	b4 16       	cp	r11, r20
    37a2:	61 f0       	breq	.+24     	; 0x37bc <main+0x416>
    37a4:	52 e0       	ldi	r21, 0x02	; 2
    37a6:	b5 16       	cp	r11, r21
    37a8:	b1 f0       	breq	.+44     	; 0x37d6 <main+0x430>
    37aa:	b1 10       	cpse	r11, r1
    37ac:	1d c0       	rjmp	.+58     	; 0x37e8 <main+0x442>
			{
				case 0:
					Transition_state = TRANS_P1;
    37ae:	10 92 19 05 	sts	0x0519, r1
					transition_counter = 0;
    37b2:	10 92 1b 05 	sts	0x051B, r1
    37b6:	10 92 1a 05 	sts	0x051A, r1
					break;
    37ba:	16 c0       	rjmp	.+44     	; 0x37e8 <main+0x442>
				case 1:
					Transition_state = TRANS_P1n;
    37bc:	24 e0       	ldi	r18, 0x04	; 4
    37be:	20 93 19 05 	sts	0x0519, r18
					transition_counter = Config.Transition_P1n; // Set transition point to the user-selected point
    37c2:	20 91 d0 05 	lds	r18, 0x05D0
    37c6:	33 27       	eor	r19, r19
    37c8:	27 fd       	sbrc	r18, 7
    37ca:	30 95       	com	r19
    37cc:	30 93 1b 05 	sts	0x051B, r19
    37d0:	20 93 1a 05 	sts	0x051A, r18
					break;
    37d4:	09 c0       	rjmp	.+18     	; 0x37e8 <main+0x442>
				case 2:
					Transition_state = TRANS_P2;
    37d6:	29 e0       	ldi	r18, 0x09	; 9
    37d8:	20 93 19 05 	sts	0x0519, r18
					transition_counter = 100;
    37dc:	a4 e6       	ldi	r26, 0x64	; 100
    37de:	b0 e0       	ldi	r27, 0x00	; 0
    37e0:	b0 93 1b 05 	sts	0x051B, r27
    37e4:	a0 93 1a 05 	sts	0x051A, r26
					break;
				default:
					break;
			}		 
			old_flight = Config.FlightSel;
			old_trans_mode = Config.TransitionSpeed;
    37e8:	20 91 cf 05 	lds	r18, 0x05CF
    37ec:	2f a3       	std	Y+39, r18	; 0x27
		//************************************************************
		//* Transition state handling
		//************************************************************

		// Update timed transition when changing flight modes
		if (Config.FlightSel != old_flight)
    37ee:	30 91 9f 07 	lds	r19, 0x079F
    37f2:	3e 8f       	std	Y+30, r19	; 0x1e
    37f4:	31 e0       	ldi	r19, 0x01	; 1
    37f6:	4e 8d       	ldd	r20, Y+30	; 0x1e
    37f8:	4b 11       	cpse	r20, r11
    37fa:	01 c0       	rjmp	.+2      	; 0x37fe <main+0x458>
    37fc:	30 e0       	ldi	r19, 0x00	; 0
			TransitionUpdated = true;
		}

		// Work out transition number when manually transitioning
		// Convert number to percentage (0 to 100%)
		if (Config.TransitionSpeed == 0)
    37fe:	20 91 cf 05 	lds	r18, 0x05CF
    3802:	21 11       	cpse	r18, r1
    3804:	1b c0       	rjmp	.+54     	; 0x383c <main+0x496>
		{
			// Offset RC input to (approx) -250 to 2250
			temp1 = RCinputs[Config.FlightChan] + 1000;
    3806:	fc 01       	movw	r30, r24
    3808:	e5 5e       	subi	r30, 0xE5	; 229
    380a:	f7 4f       	sbci	r31, 0xF7	; 247
    380c:	80 81       	ld	r24, Z
    380e:	91 81       	ldd	r25, Z+1	; 0x01
    3810:	88 51       	subi	r24, 0x18	; 24
    3812:	9c 4f       	sbci	r25, 0xFC	; 252
    3814:	97 ff       	sbrs	r25, 7
    3816:	02 c0       	rjmp	.+4      	; 0x381c <main+0x476>
    3818:	80 e0       	ldi	r24, 0x00	; 0
    381a:	90 e0       	ldi	r25, 0x00	; 0
			// Trim lower end to zero (0 to 2250)
			if (temp1 < 0) temp1 = 0;

			// Convert 0 to 2250 to 0 to 125. Divide by 20
			// Round to avoid truncation errors
			transition = (temp1 + 10) / 20;
    381c:	0a 96       	adiw	r24, 0x0a	; 10
    381e:	64 e1       	ldi	r22, 0x14	; 20
    3820:	70 e0       	ldi	r23, 0x00	; 0
    3822:	0e 94 12 48 	call	0x9024	; 0x9024 <__divmodhi4>

			// transition now has a range of 0 to 101 for 0 to 2000 input
			// Limit extent of transition value 0 to 100 (101 steps)
			if (transition > 100) transition = 100;
    3826:	65 36       	cpi	r22, 0x65	; 101
    3828:	71 05       	cpc	r23, r1
    382a:	0c f4       	brge	.+2      	; 0x382e <main+0x488>
    382c:	65 c3       	rjmp	.+1738   	; 0x3ef8 <main+0xb52>
    382e:	84 e6       	ldi	r24, 0x64	; 100
    3830:	90 e0       	ldi	r25, 0x00	; 0
    3832:	90 93 18 05 	sts	0x0518, r25
    3836:	80 93 17 05 	sts	0x0517, r24
    383a:	62 c3       	rjmp	.+1732   	; 0x3f00 <main+0xb5a>
		}
		else
		{
			// transition_counter counts from 0 to 100 (101 steps)
			transition = transition_counter;
    383c:	80 91 1a 05 	lds	r24, 0x051A
    3840:	90 91 1b 05 	lds	r25, 0x051B
    3844:	90 93 18 05 	sts	0x0518, r25
    3848:	80 93 17 05 	sts	0x0517, r24
		{
			Transition_state = TRANSITIONING;
		}

		// Update transition state change when control value or flight mode changes
		if (TransitionUpdated)
    384c:	33 23       	and	r19, r19
    384e:	99 f0       	breq	.+38     	; 0x3876 <main+0x4d0>
		{
			// Update transition state from matrix
			Transition_state = (uint8_t)pgm_read_byte(&Trans_Matrix[Config.FlightSel][old_flight]);
    3850:	4e 8d       	ldd	r20, Y+30	; 0x1e
    3852:	84 2f       	mov	r24, r20
    3854:	99 27       	eor	r25, r25
    3856:	87 fd       	sbrc	r24, 7
    3858:	90 95       	com	r25
    385a:	fc 01       	movw	r30, r24
    385c:	ee 0f       	add	r30, r30
    385e:	ff 1f       	adc	r31, r31
    3860:	e8 0f       	add	r30, r24
    3862:	f9 1f       	adc	r31, r25
    3864:	eb 0d       	add	r30, r11
    3866:	f1 1d       	adc	r31, r1
    3868:	b7 fc       	sbrc	r11, 7
    386a:	fa 95       	dec	r31
    386c:	e4 51       	subi	r30, 0x14	; 20
    386e:	ff 4f       	sbci	r31, 0xFF	; 255
    3870:	e4 91       	lpm	r30, Z
    3872:	e0 93 19 05 	sts	0x0519, r30

		// Calculate transition time from user's setting
		transition_time = TRANSITION_TIMER * Config.TransitionSpeed;
		
		// Update state, values and transition_counter every Config.TransitionSpeed if not zero.
		if (((Config.TransitionSpeed != 0) && (Transition_timeout > transition_time)) ||
    3876:	22 23       	and	r18, r18
    3878:	49 f0       	breq	.+18     	; 0x388c <main+0x4e6>
			// Update transition state from matrix
			Transition_state = (uint8_t)pgm_read_byte(&Trans_Matrix[Config.FlightSel][old_flight]);
		}

		// Calculate transition time from user's setting
		transition_time = TRANSITION_TIMER * Config.TransitionSpeed;
    387a:	53 ec       	ldi	r21, 0xC3	; 195
    387c:	25 03       	mulsu	r18, r21
    387e:	c0 01       	movw	r24, r0
    3880:	11 24       	eor	r1, r1
		
		// Update state, values and transition_counter every Config.TransitionSpeed if not zero.
		if (((Config.TransitionSpeed != 0) && (Transition_timeout > transition_time)) ||
    3882:	49 89       	ldd	r20, Y+17	; 0x11
    3884:	5a 89       	ldd	r21, Y+18	; 0x12
    3886:	84 17       	cp	r24, r20
    3888:	95 07       	cpc	r25, r21
    388a:	18 f0       	brcs	.+6      	; 0x3892 <main+0x4ec>
    388c:	33 23       	and	r19, r19
    388e:	09 f4       	brne	.+2      	; 0x3892 <main+0x4ec>
    3890:	a9 c0       	rjmp	.+338    	; 0x39e4 <main+0x63e>
		{
			Transition_timeout = 0;
			TransitionUpdated = false;

			// Fixed, end-point states
			if (Transition_state == TRANS_P1)
    3892:	80 91 19 05 	lds	r24, 0x0519
    3896:	81 11       	cpse	r24, r1
    3898:	05 c0       	rjmp	.+10     	; 0x38a4 <main+0x4fe>
			{
				transition_counter = 0;
    389a:	10 92 1b 05 	sts	0x051B, r1
    389e:	10 92 1a 05 	sts	0x051A, r1
    38a2:	22 c0       	rjmp	.+68     	; 0x38e8 <main+0x542>
			}
			else if (Transition_state == TRANS_P1n)
    38a4:	84 30       	cpi	r24, 0x04	; 4
    38a6:	31 f4       	brne	.+12     	; 0x38b4 <main+0x50e>
			{
				transition_counter = Config.Transition_P1n;
    38a8:	80 91 d0 05 	lds	r24, 0x05D0
    38ac:	99 27       	eor	r25, r25
    38ae:	87 fd       	sbrc	r24, 7
    38b0:	90 95       	com	r25
    38b2:	04 c0       	rjmp	.+8      	; 0x38bc <main+0x516>
			}
			else if (Transition_state == TRANS_P2)
    38b4:	89 30       	cpi	r24, 0x09	; 9
    38b6:	39 f4       	brne	.+14     	; 0x38c6 <main+0x520>
			{
				transition_counter = 100;
    38b8:	84 e6       	ldi	r24, 0x64	; 100
    38ba:	90 e0       	ldi	r25, 0x00	; 0
    38bc:	90 93 1b 05 	sts	0x051B, r25
    38c0:	80 93 1a 05 	sts	0x051A, r24
    38c4:	11 c0       	rjmp	.+34     	; 0x38e8 <main+0x542>
			}		

			// Over-ride users requesting silly states
			// If transition_counter is above P1.n but request is P1 to P1.n or 
			// if transition_counter is below P1.n but request is P2 to P1.n...
			if ((Transition_state == TRANS_P1_to_P1n_start) && (transition_counter > Config.Transition_P1n))
    38c6:	81 30       	cpi	r24, 0x01	; 1
    38c8:	79 f4       	brne	.+30     	; 0x38e8 <main+0x542>
    38ca:	80 91 d0 05 	lds	r24, 0x05D0
    38ce:	99 27       	eor	r25, r25
    38d0:	87 fd       	sbrc	r24, 7
    38d2:	90 95       	com	r25
    38d4:	20 91 1a 05 	lds	r18, 0x051A
    38d8:	30 91 1b 05 	lds	r19, 0x051B
    38dc:	82 17       	cp	r24, r18
    38de:	93 07       	cpc	r25, r19
    38e0:	1c f4       	brge	.+6      	; 0x38e8 <main+0x542>
			{
				// Reset state to a more appropriate one
				Transition_state = TRANS_P2_to_P1n_start;
    38e2:	88 e0       	ldi	r24, 0x08	; 8
    38e4:	80 93 19 05 	sts	0x0519, r24
			}

			if ((Transition_state == TRANS_P2_to_P1n_start) && (transition_counter < Config.Transition_P1n))
    38e8:	80 91 19 05 	lds	r24, 0x0519
    38ec:	88 30       	cpi	r24, 0x08	; 8
    38ee:	79 f4       	brne	.+30     	; 0x390e <main+0x568>
    38f0:	80 91 d0 05 	lds	r24, 0x05D0
    38f4:	99 27       	eor	r25, r25
    38f6:	87 fd       	sbrc	r24, 7
    38f8:	90 95       	com	r25
    38fa:	20 91 1a 05 	lds	r18, 0x051A
    38fe:	30 91 1b 05 	lds	r19, 0x051B
    3902:	28 17       	cp	r18, r24
    3904:	39 07       	cpc	r19, r25
    3906:	1c f4       	brge	.+6      	; 0x390e <main+0x568>
			{
				// Reset state to a more appropriate one
				Transition_state = TRANS_P1_to_P1n_start;
    3908:	81 e0       	ldi	r24, 0x01	; 1
    390a:	80 93 19 05 	sts	0x0519, r24
			}

			// Handle timed transition towards P1
			if ((Transition_state == TRANS_P1n_to_P1_start) || (Transition_state == TRANS_P2_to_P1_start))
    390e:	80 91 19 05 	lds	r24, 0x0519
    3912:	8b 7f       	andi	r24, 0xFB	; 251
    3914:	82 30       	cpi	r24, 0x02	; 2
    3916:	91 f4       	brne	.+36     	; 0x393c <main+0x596>
			{
				transition_counter--;
    3918:	80 91 1a 05 	lds	r24, 0x051A
    391c:	90 91 1b 05 	lds	r25, 0x051B
    3920:	01 97       	sbiw	r24, 0x01	; 1
    3922:	90 93 1b 05 	sts	0x051B, r25
    3926:	80 93 1a 05 	sts	0x051A, r24
				if (transition_counter <= 0)
    392a:	18 16       	cp	r1, r24
    392c:	19 06       	cpc	r1, r25
    392e:	34 f0       	brlt	.+12     	; 0x393c <main+0x596>
				{
					transition_counter = 0;
    3930:	10 92 1b 05 	sts	0x051B, r1
    3934:	10 92 1a 05 	sts	0x051A, r1
					Transition_state = TRANS_P1;
    3938:	10 92 19 05 	sts	0x0519, r1
				}
			}

			// Handle timed transition between P1.n and P1
			if (Transition_state == TRANS_P1_to_P1n_start)
    393c:	80 91 19 05 	lds	r24, 0x0519
    3940:	81 30       	cpi	r24, 0x01	; 1
    3942:	c1 f4       	brne	.+48     	; 0x3974 <main+0x5ce>
			{
				transition_counter++;
    3944:	80 91 1a 05 	lds	r24, 0x051A
    3948:	90 91 1b 05 	lds	r25, 0x051B
    394c:	01 96       	adiw	r24, 0x01	; 1
    394e:	90 93 1b 05 	sts	0x051B, r25
    3952:	80 93 1a 05 	sts	0x051A, r24
				if (transition_counter >= Config.Transition_P1n)
    3956:	20 91 d0 05 	lds	r18, 0x05D0
    395a:	33 27       	eor	r19, r19
    395c:	27 fd       	sbrc	r18, 7
    395e:	30 95       	com	r19
    3960:	82 17       	cp	r24, r18
    3962:	93 07       	cpc	r25, r19
    3964:	3c f0       	brlt	.+14     	; 0x3974 <main+0x5ce>
				{
					transition_counter = Config.Transition_P1n;
    3966:	30 93 1b 05 	sts	0x051B, r19
    396a:	20 93 1a 05 	sts	0x051A, r18
					Transition_state = TRANS_P1n;
    396e:	84 e0       	ldi	r24, 0x04	; 4
    3970:	80 93 19 05 	sts	0x0519, r24
				}
			}			
				
			// Handle timed transition between P1.n and P2
			if (Transition_state == TRANS_P2_to_P1n_start)
    3974:	80 91 19 05 	lds	r24, 0x0519
    3978:	88 30       	cpi	r24, 0x08	; 8
    397a:	c1 f4       	brne	.+48     	; 0x39ac <main+0x606>
			{
				transition_counter--;
    397c:	80 91 1a 05 	lds	r24, 0x051A
    3980:	90 91 1b 05 	lds	r25, 0x051B
    3984:	01 97       	sbiw	r24, 0x01	; 1
    3986:	90 93 1b 05 	sts	0x051B, r25
    398a:	80 93 1a 05 	sts	0x051A, r24
				if (transition_counter <= Config.Transition_P1n)
    398e:	20 91 d0 05 	lds	r18, 0x05D0
    3992:	33 27       	eor	r19, r19
    3994:	27 fd       	sbrc	r18, 7
    3996:	30 95       	com	r19
    3998:	28 17       	cp	r18, r24
    399a:	39 07       	cpc	r19, r25
    399c:	3c f0       	brlt	.+14     	; 0x39ac <main+0x606>
				{
					transition_counter = Config.Transition_P1n;
    399e:	30 93 1b 05 	sts	0x051B, r19
    39a2:	20 93 1a 05 	sts	0x051A, r18
					Transition_state = TRANS_P1n;
    39a6:	84 e0       	ldi	r24, 0x04	; 4
    39a8:	80 93 19 05 	sts	0x0519, r24
				}
			}

			// Handle timed transition towards P2
			if ((Transition_state == TRANS_P1n_to_P2_start) || (Transition_state == TRANS_P1_to_P2_start))
    39ac:	80 91 19 05 	lds	r24, 0x0519
    39b0:	8b 7f       	andi	r24, 0xFB	; 251
    39b2:	83 30       	cpi	r24, 0x03	; 3
    39b4:	a9 f4       	brne	.+42     	; 0x39e0 <main+0x63a>
			{
				transition_counter++;
    39b6:	80 91 1a 05 	lds	r24, 0x051A
    39ba:	90 91 1b 05 	lds	r25, 0x051B
    39be:	01 96       	adiw	r24, 0x01	; 1
    39c0:	90 93 1b 05 	sts	0x051B, r25
    39c4:	80 93 1a 05 	sts	0x051A, r24
				if (transition_counter >= 100)
    39c8:	84 36       	cpi	r24, 0x64	; 100
    39ca:	91 05       	cpc	r25, r1
    39cc:	4c f0       	brlt	.+18     	; 0x39e0 <main+0x63a>
				{
					transition_counter = 100;
    39ce:	a4 e6       	ldi	r26, 0x64	; 100
    39d0:	b0 e0       	ldi	r27, 0x00	; 0
    39d2:	b0 93 1b 05 	sts	0x051B, r27
    39d6:	a0 93 1a 05 	sts	0x051A, r26
					Transition_state = TRANS_P2;
    39da:	89 e0       	ldi	r24, 0x09	; 9
    39dc:	80 93 19 05 	sts	0x0519, r24
		// Update state, values and transition_counter every Config.TransitionSpeed if not zero.
		if (((Config.TransitionSpeed != 0) && (Transition_timeout > transition_time)) ||
			// Update immediately
			TransitionUpdated)
		{
			Transition_timeout = 0;
    39e0:	1a 8a       	std	Y+18, r1	; 0x12
    39e2:	19 8a       	std	Y+17, r1	; 0x11
			}

		} // Update transition_counter

		// Zero the I-terms of the opposite state so as to ensure a bump-less transition
		if ((Transition_state == TRANS_P1) || (transition == 0))
    39e4:	20 91 19 05 	lds	r18, 0x0519
    39e8:	22 23       	and	r18, r18
    39ea:	31 f0       	breq	.+12     	; 0x39f8 <main+0x652>
    39ec:	80 91 17 05 	lds	r24, 0x0517
    39f0:	90 91 18 05 	lds	r25, 0x0518
    39f4:	00 97       	sbiw	r24, 0x00	; 0
    39f6:	39 f4       	brne	.+14     	; 0x3a06 <main+0x660>
		{
			// Clear P2 I-term while fully in P1
			memset(&IntegralGyro[P2][ROLL], 0, sizeof(int32_t) * NUMBEROFAXIS);
    39f8:	8c e0       	ldi	r24, 0x0C	; 12
    39fa:	e9 ee       	ldi	r30, 0xE9	; 233
    39fc:	f7 e0       	ldi	r31, 0x07	; 7
    39fe:	11 92       	st	Z+, r1
    3a00:	8a 95       	dec	r24
    3a02:	e9 f7       	brne	.-6      	; 0x39fe <main+0x658>
    3a04:	0b c0       	rjmp	.+22     	; 0x3a1c <main+0x676>
		}
		else if ((Transition_state == TRANS_P2) || (transition == 100))
    3a06:	29 30       	cpi	r18, 0x09	; 9
    3a08:	19 f0       	breq	.+6      	; 0x3a10 <main+0x66a>
    3a0a:	84 36       	cpi	r24, 0x64	; 100
    3a0c:	91 05       	cpc	r25, r1
    3a0e:	31 f4       	brne	.+12     	; 0x3a1c <main+0x676>
		{
			// Clear P1 I-term while fully in P2
			memset(&IntegralGyro[P1][ROLL], 0, sizeof(int32_t) * NUMBEROFAXIS);
    3a10:	8c e0       	ldi	r24, 0x0C	; 12
    3a12:	ad ed       	ldi	r26, 0xDD	; 221
    3a14:	b7 e0       	ldi	r27, 0x07	; 7
    3a16:	1d 92       	st	X+, r1
    3a18:	8a 95       	dec	r24
    3a1a:	e9 f7       	brne	.-6      	; 0x3a16 <main+0x670>
		//************************************************************
		//* Update timers
		//************************************************************

		// Safely get current value of TCNT1
		Save_TCNT1 = TIM16_ReadTCNT1();
    3a1c:	0e 94 9c 2b 	call	0x5738	; 0x5738 <TIM16_ReadTCNT1>
    3a20:	9c 8b       	std	Y+20, r25	; 0x14
    3a22:	8b 8b       	std	Y+19, r24	; 0x13
		
		// 32-bit timers (Max. 1718s measurement on T1, 220K seconds on T2)

		// Handle TCNT1-based timer correctly - this actually seems necessary...
		// Work out the current RC rate by measuring between incoming RC packets
		if (Save_TCNT1 < RC_Rate_TCNT1)
    3a24:	88 15       	cp	r24, r8
    3a26:	99 05       	cpc	r25, r9
    3a28:	b8 f4       	brcc	.+46     	; 0x3a58 <main+0x6b2>
		{
			RC_Rate_Timer += (65536 - RC_Rate_TCNT1 + Save_TCNT1);
    3a2a:	80 e0       	ldi	r24, 0x00	; 0
    3a2c:	90 e0       	ldi	r25, 0x00	; 0
    3a2e:	a1 e0       	ldi	r26, 0x01	; 1
    3a30:	b0 e0       	ldi	r27, 0x00	; 0
    3a32:	88 19       	sub	r24, r8
    3a34:	99 09       	sbc	r25, r9
    3a36:	a1 09       	sbc	r26, r1
    3a38:	b1 09       	sbc	r27, r1
    3a3a:	2b 89       	ldd	r18, Y+19	; 0x13
    3a3c:	3c 89       	ldd	r19, Y+20	; 0x14
    3a3e:	82 0f       	add	r24, r18
    3a40:	93 1f       	adc	r25, r19
    3a42:	a1 1d       	adc	r26, r1
    3a44:	b1 1d       	adc	r27, r1
    3a46:	2b 81       	ldd	r18, Y+3	; 0x03
    3a48:	3c 81       	ldd	r19, Y+4	; 0x04
    3a4a:	4d 81       	ldd	r20, Y+5	; 0x05
    3a4c:	5e 81       	ldd	r21, Y+6	; 0x06
    3a4e:	28 0f       	add	r18, r24
    3a50:	39 1f       	adc	r19, r25
    3a52:	4a 1f       	adc	r20, r26
    3a54:	5b 1f       	adc	r21, r27
    3a56:	0c c0       	rjmp	.+24     	; 0x3a70 <main+0x6ca>
		}
		else
		{
			RC_Rate_Timer += (Save_TCNT1 - RC_Rate_TCNT1);
    3a58:	8b 89       	ldd	r24, Y+19	; 0x13
    3a5a:	9c 89       	ldd	r25, Y+20	; 0x14
    3a5c:	88 19       	sub	r24, r8
    3a5e:	99 09       	sbc	r25, r9
    3a60:	2b 81       	ldd	r18, Y+3	; 0x03
    3a62:	3c 81       	ldd	r19, Y+4	; 0x04
    3a64:	4d 81       	ldd	r20, Y+5	; 0x05
    3a66:	5e 81       	ldd	r21, Y+6	; 0x06
    3a68:	28 0f       	add	r18, r24
    3a6a:	39 1f       	adc	r19, r25
    3a6c:	41 1d       	adc	r20, r1
    3a6e:	51 1d       	adc	r21, r1
    3a70:	2b 83       	std	Y+3, r18	; 0x03
    3a72:	3c 83       	std	Y+4, r19	; 0x04
    3a74:	4d 83       	std	Y+5, r20	; 0x05
    3a76:	5e 83       	std	Y+6, r21	; 0x06
		}
		
		RC_Rate_TCNT1 = Save_TCNT1;

		// Arm timer for timing stick hold
		Arm_timer += (uint8_t)(TCNT2 - Arm_TCNT2); 
    3a78:	80 91 b2 00 	lds	r24, 0x00B2
    3a7c:	3b a1       	ldd	r19, Y+35	; 0x23
    3a7e:	83 1b       	sub	r24, r19
    3a80:	28 0e       	add	r2, r24
    3a82:	31 1c       	adc	r3, r1
    3a84:	41 1c       	adc	r4, r1
    3a86:	51 1c       	adc	r5, r1
		Arm_TCNT2 = TCNT2;
    3a88:	40 91 b2 00 	lds	r20, 0x00B2
    3a8c:	4b a3       	std	Y+35, r20	; 0x23

		// 16-bit timers (Max. 3.35s measurement on T2)
		// All TCNT2 timers increment at 19.531 kHz

		// Sets the desired SERVO_RATE by flagging ServoTick when PWM due
		Servo_Rate += (uint8_t)(TCNT2 - ServoRate_TCNT2);
    3a8e:	80 91 b2 00 	lds	r24, 0x00B2
    3a92:	2e a1       	ldd	r18, Y+38	; 0x26
    3a94:	82 1b       	sub	r24, r18
    3a96:	4f 85       	ldd	r20, Y+15	; 0x0f
    3a98:	58 89       	ldd	r21, Y+16	; 0x10
    3a9a:	48 0f       	add	r20, r24
    3a9c:	51 1d       	adc	r21, r1
    3a9e:	58 8b       	std	Y+16, r21	; 0x10
    3aa0:	4f 87       	std	Y+15, r20	; 0x0f
		ServoRate_TCNT2 = TCNT2;
    3aa2:	20 91 b2 00 	lds	r18, 0x00B2
    3aa6:	2e a3       	std	Y+38, r18	; 0x26
		
		// Signal RC overdue after RC_OVERDUE time (500ms)
		RC_Timeout += (uint8_t)(TCNT2 - Servo_TCNT2);
    3aa8:	80 91 b2 00 	lds	r24, 0x00B2
    3aac:	3d a1       	ldd	r19, Y+37	; 0x25
    3aae:	83 1b       	sub	r24, r19
    3ab0:	4a a5       	ldd	r20, Y+42	; 0x2a
    3ab2:	5b a5       	ldd	r21, Y+43	; 0x2b
    3ab4:	48 0f       	add	r20, r24
    3ab6:	51 1d       	adc	r21, r1
    3ab8:	5b a7       	std	Y+43, r21	; 0x2b
    3aba:	4a a7       	std	Y+42, r20	; 0x2a
		Servo_TCNT2 = TCNT2;
    3abc:	20 91 b2 00 	lds	r18, 0x00B2
    3ac0:	2d a3       	std	Y+37, r18	; 0x25
		
		// Update transition timer
		Transition_timeout += (uint8_t)(TCNT2 - Transition_TCNT2);
    3ac2:	80 91 b2 00 	lds	r24, 0x00B2
    3ac6:	3f 8d       	ldd	r19, Y+31	; 0x1f
    3ac8:	83 1b       	sub	r24, r19
    3aca:	49 89       	ldd	r20, Y+17	; 0x11
    3acc:	5a 89       	ldd	r21, Y+18	; 0x12
    3ace:	48 0f       	add	r20, r24
    3ad0:	51 1d       	adc	r21, r1
    3ad2:	5a 8b       	std	Y+18, r21	; 0x12
    3ad4:	49 8b       	std	Y+17, r20	; 0x11
		Transition_TCNT2 = TCNT2;
    3ad6:	20 91 b2 00 	lds	r18, 0x00B2
    3ada:	2f 8f       	std	Y+31, r18	; 0x1f

		// Update status timeout
		Status_timeout += (uint8_t)(TCNT2 - Status_TCNT2);
    3adc:	80 91 b2 00 	lds	r24, 0x00B2
    3ae0:	38 a1       	ldd	r19, Y+32	; 0x20
    3ae2:	83 1b       	sub	r24, r19
    3ae4:	4d 85       	ldd	r20, Y+13	; 0x0d
    3ae6:	5e 85       	ldd	r21, Y+14	; 0x0e
    3ae8:	48 0f       	add	r20, r24
    3aea:	51 1d       	adc	r21, r1
    3aec:	5e 87       	std	Y+14, r21	; 0x0e
    3aee:	4d 87       	std	Y+13, r20	; 0x0d
		Status_TCNT2 = TCNT2;
    3af0:	20 91 b2 00 	lds	r18, 0x00B2
    3af4:	28 a3       	std	Y+32, r18	; 0x20
		
		// Status refresh timer
		UpdateStatus_timer += (uint8_t)(TCNT2 - Refresh_TCNT2);
    3af6:	80 91 b2 00 	lds	r24, 0x00B2
    3afa:	39 a1       	ldd	r19, Y+33	; 0x21
    3afc:	83 1b       	sub	r24, r19
    3afe:	48 8d       	ldd	r20, Y+24	; 0x18
    3b00:	59 8d       	ldd	r21, Y+25	; 0x19
    3b02:	48 0f       	add	r20, r24
    3b04:	51 1d       	adc	r21, r1
    3b06:	59 8f       	std	Y+25, r21	; 0x19
    3b08:	48 8f       	std	Y+24, r20	; 0x18
		Refresh_TCNT2 = TCNT2;
    3b0a:	20 91 b2 00 	lds	r18, 0x00B2
    3b0e:	29 a3       	std	Y+33, r18	; 0x21

		// Auto-disarm timer
		Disarm_timer += (uint8_t)(TCNT2 - Disarm_TCNT2);
    3b10:	80 91 b2 00 	lds	r24, 0x00B2
    3b14:	3a a1       	ldd	r19, Y+34	; 0x22
    3b16:	83 1b       	sub	r24, r19
    3b18:	4f 81       	ldd	r20, Y+7	; 0x07
    3b1a:	58 85       	ldd	r21, Y+8	; 0x08
    3b1c:	48 0f       	add	r20, r24
    3b1e:	51 1d       	adc	r21, r1
    3b20:	58 87       	std	Y+8, r21	; 0x08
    3b22:	4f 83       	std	Y+7, r20	; 0x07
		Disarm_TCNT2 = TCNT2;
    3b24:	20 91 b2 00 	lds	r18, 0x00B2
    3b28:	2a a3       	std	Y+34, r18	; 0x22

		// Timer for audible alarms
		Ticker_Count += (uint8_t)(TCNT2 - Ticker_TCNT2);
    3b2a:	80 91 b2 00 	lds	r24, 0x00B2
    3b2e:	3c a1       	ldd	r19, Y+36	; 0x24
    3b30:	83 1b       	sub	r24, r19
    3b32:	4c 8d       	ldd	r20, Y+28	; 0x1c
    3b34:	5d 8d       	ldd	r21, Y+29	; 0x1d
    3b36:	48 0f       	add	r20, r24
    3b38:	51 1d       	adc	r21, r1
    3b3a:	5d 8f       	std	Y+29, r21	; 0x1d
    3b3c:	4c 8f       	std	Y+28, r20	; 0x1c
		Ticker_TCNT2 = TCNT2;
    3b3e:	20 91 b2 00 	lds	r18, 0x00B2
    3b42:	2c a3       	std	Y+36, r18	; 0x24
		//* ((Ticker_Count >> 8) &8) 	= 4.77Hz (Disarm and LVA alarms)
		//************************************************************

		if ((Ticker_Count >> 8) &8) 
		{
			Alarm_flags |= (1 << BUZZER_ON);	// 4.77Hz beep
    3b44:	80 91 14 05 	lds	r24, 0x0514
		//* System ticker - based on TCNT2 (19.531kHz)
		//* 
		//* ((Ticker_Count >> 8) &8) 	= 4.77Hz (Disarm and LVA alarms)
		//************************************************************

		if ((Ticker_Count >> 8) &8) 
    3b48:	53 ff       	sbrs	r21, 3
    3b4a:	02 c0       	rjmp	.+4      	; 0x3b50 <main+0x7aa>
		{
			Alarm_flags |= (1 << BUZZER_ON);	// 4.77Hz beep
    3b4c:	80 61       	ori	r24, 0x10	; 16
    3b4e:	01 c0       	rjmp	.+2      	; 0x3b52 <main+0x7ac>
		}
		else 
		{
			Alarm_flags &= ~(1 << BUZZER_ON);
    3b50:	8f 7e       	andi	r24, 0xEF	; 239
    3b52:	80 93 14 05 	sts	0x0514, r24
		//* Manage desired output update rate when limited by
		//* the PWM rate set to "Low"
		//************************************************************

		// Flag update required based on the variable Servo_Match
		if (Servo_Rate > SERVO_RATE_LOW)
    3b56:	4f 85       	ldd	r20, Y+15	; 0x0f
    3b58:	58 89       	ldd	r21, Y+16	; 0x10
    3b5a:	4d 32       	cpi	r20, 0x2D	; 45
    3b5c:	51 40       	sbci	r21, 0x01	; 1
    3b5e:	20 f0       	brcs	.+8      	; 0x3b68 <main+0x7c2>
		{
			ServoTick = true;	// Slow device is ready for output generation
			Servo_Rate = 0;
    3b60:	18 8a       	std	Y+16, r1	; 0x10
    3b62:	1f 86       	std	Y+15, r1	; 0x0f
		//************************************************************

		// Flag update required based on the variable Servo_Match
		if (Servo_Rate > SERVO_RATE_LOW)
		{
			ServoTick = true;	// Slow device is ready for output generation
    3b64:	21 e0       	ldi	r18, 0x01	; 1
    3b66:	2a 87       	std	Y+10, r18	; 0x0a
		//************************************************************
		//* Measure incoming RC rate and flag no signal
		//************************************************************

		// Check to see if the RC input is overdue (500ms)
		if (RC_Timeout > RC_OVERDUE)
    3b68:	4a a5       	ldd	r20, Y+42	; 0x2a
    3b6a:	5b a5       	ldd	r21, Y+43	; 0x2b
    3b6c:	46 32       	cpi	r20, 0x26	; 38
    3b6e:	56 42       	sbci	r21, 0x26	; 38
    3b70:	18 f0       	brcs	.+6      	; 0x3b78 <main+0x7d2>
		{
			Overdue = true;	// This results in a "No Signal" error
    3b72:	81 e0       	ldi	r24, 0x01	; 1
    3b74:	80 93 0f 05 	sts	0x050F, r24
	
		//************************************************************
		//* Read sensors
		//************************************************************

		ReadGyros();
    3b78:	0e 94 c6 22 	call	0x458c	; 0x458c <ReadGyros>
		ReadAcc();
    3b7c:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <ReadAcc>
		// These two are concatenated to create a virtual timer that can measure up to 
		// 256 x 26.2ms = 6.7072s at which point the "period" is 16,768,000, a 24-bit number
		//************************************************************
		
		// Safely get current value of TCNT1
		Save_TCNT1 = TIM16_ReadTCNT1();
    3b80:	0e 94 9c 2b 	call	0x5738	; 0x5738 <TIM16_ReadTCNT1>
    3b84:	9c 01       	movw	r18, r24
		
		// Reset Timer0 count
		TCNT0 = 0;
    3b86:	16 bc       	out	0x26, r1	; 38

		// Handle TCNT1 overflow correctly - this actually seems necessary...
		// ticker_16 will hold the most recent amount measured by TCNT1
		// Timer1 (16bit) - run @ 2.5MHz (400ns) - max 26.2ms
		if (Save_TCNT1 < LoopStartTCNT1)
    3b88:	80 91 10 05 	lds	r24, 0x0510
    3b8c:	90 91 11 05 	lds	r25, 0x0511
    3b90:	28 17       	cp	r18, r24
    3b92:	39 07       	cpc	r19, r25
    3b94:	48 f4       	brcc	.+18     	; 0x3ba8 <main+0x802>
		{
			ticker_16 = (65536 - LoopStartTCNT1) + Save_TCNT1;
    3b96:	80 91 10 05 	lds	r24, 0x0510
    3b9a:	90 91 11 05 	lds	r25, 0x0511
    3b9e:	d9 01       	movw	r26, r18
    3ba0:	a8 1b       	sub	r26, r24
    3ba2:	b9 0b       	sbc	r27, r25
    3ba4:	cd 01       	movw	r24, r26
    3ba6:	08 c0       	rjmp	.+16     	; 0x3bb8 <main+0x812>
		}
		else
		{
			ticker_16 = (Save_TCNT1 - LoopStartTCNT1);
    3ba8:	80 91 10 05 	lds	r24, 0x0510
    3bac:	90 91 11 05 	lds	r25, 0x0511
    3bb0:	f9 01       	movw	r30, r18
    3bb2:	e8 1b       	sub	r30, r24
    3bb4:	f9 0b       	sbc	r31, r25
    3bb6:	cf 01       	movw	r24, r30
		}
		
		// Store old TCNT for next measurement
		LoopStartTCNT1 = Save_TCNT1;
    3bb8:	30 93 11 05 	sts	0x0511, r19
    3bbc:	20 93 10 05 	sts	0x0510, r18
		
		// Handle both Timer1 under- and over-run cases
		// If TMR0_counter is less than 2, ICNT1 has not overflowed
		if (TMR0_counter < 2)
    3bc0:	20 91 bd 07 	lds	r18, 0x07BD
    3bc4:	30 91 be 07 	lds	r19, 0x07BE
    3bc8:	a0 e0       	ldi	r26, 0x00	; 0
    3bca:	b0 e0       	ldi	r27, 0x00	; 0
    3bcc:	22 30       	cpi	r18, 0x02	; 2
    3bce:	31 05       	cpc	r19, r1
    3bd0:	18 f4       	brcc	.+6      	; 0x3bd8 <main+0x832>
		{
			interval = ticker_16; // uint16_t
    3bd2:	4c 01       	movw	r8, r24
    3bd4:	5d 01       	movw	r10, r26
    3bd6:	11 c0       	rjmp	.+34     	; 0x3bfa <main+0x854>
		// So we use chunks of TCNT0, counted during the loop interval
		// to work out the exact period.
		// Timer0 (8bit) - run @ 20MHz / 1024 = 19.531kHz or 51.2us - max 13.1ms
		else
		{
			interval = ticker_16 + (TMR0_counter * 32768);
    3bd8:	80 90 bd 07 	lds	r8, 0x07BD
    3bdc:	90 90 be 07 	lds	r9, 0x07BE
    3be0:	a1 2c       	mov	r10, r1
    3be2:	b1 2c       	mov	r11, r1
    3be4:	3f e0       	ldi	r19, 0x0F	; 15
    3be6:	88 0c       	add	r8, r8
    3be8:	99 1c       	adc	r9, r9
    3bea:	aa 1c       	adc	r10, r10
    3bec:	bb 1c       	adc	r11, r11
    3bee:	3a 95       	dec	r19
    3bf0:	d1 f7       	brne	.-12     	; 0x3be6 <main+0x840>
    3bf2:	88 0e       	add	r8, r24
    3bf4:	99 1e       	adc	r9, r25
    3bf6:	aa 1e       	adc	r10, r26
    3bf8:	bb 1e       	adc	r11, r27
		}

		TMR0_counter = 0;
    3bfa:	10 92 be 07 	sts	0x07BE, r1
    3bfe:	10 92 bd 07 	sts	0x07BD, r1
				
		// Call IMU with interval
		simple_imu_update(interval);
    3c02:	c5 01       	movw	r24, r10
    3c04:	b4 01       	movw	r22, r8
    3c06:	0e 94 b6 26 	call	0x4d6c	; 0x4d6c <simple_imu_update>

		//************************************************************
		//* Update I-terms, average gyro values each loop
		//************************************************************

		Sensor_PID();
    3c0a:	0e 94 8b 3e 	call	0x7d16	; 0x7d16 <Sensor_PID>
		//* PWM_interval = Copied from Interval, is the current loop rate.
		//* 
		//* 
		//************************************************************

		if (Interrupted)
    3c0e:	80 91 ba 07 	lds	r24, 0x07BA
    3c12:	88 23       	and	r24, r24
    3c14:	09 f4       	brne	.+2      	; 0x3c18 <main+0x872>
    3c16:	c6 c0       	rjmp	.+396    	; 0x3da4 <main+0x9fe>
		{
			// Measure incoming RC rate. Threshold is SLOW_RC_RATE.
			if (Config.Servo_rate < FAST)
    3c18:	80 91 cb 05 	lds	r24, 0x05CB
    3c1c:	82 30       	cpi	r24, 0x02	; 2
    3c1e:	64 f4       	brge	.+24     	; 0x3c38 <main+0x892>
			{
				if (RC_Rate_Timer > SLOW_RC_RATE)
    3c20:	21 e0       	ldi	r18, 0x01	; 1
    3c22:	29 87       	std	Y+9, r18	; 0x09
    3c24:	2b 81       	ldd	r18, Y+3	; 0x03
    3c26:	3c 81       	ldd	r19, Y+4	; 0x04
    3c28:	4d 81       	ldd	r20, Y+5	; 0x05
    3c2a:	5e 81       	ldd	r21, Y+6	; 0x06
    3c2c:	24 3c       	cpi	r18, 0xC4	; 196
    3c2e:	32 4a       	sbci	r19, 0xA2	; 162
    3c30:	41 05       	cpc	r20, r1
    3c32:	51 05       	cpc	r21, r1
    3c34:	08 f4       	brcc	.+2      	; 0x3c38 <main+0x892>
    3c36:	19 86       	std	Y+9, r1	; 0x09
				{
					SlowRC = false;
				}
			}
			
			if ((!RCrateMeasured) && (Config.Servo_rate == FAST))
    3c38:	2a 81       	ldd	r18, Y+2	; 0x02
    3c3a:	21 11       	cpse	r18, r1
    3c3c:	0e c0       	rjmp	.+28     	; 0x3c5a <main+0x8b4>
    3c3e:	82 30       	cpi	r24, 0x02	; 2
    3c40:	09 f0       	breq	.+2      	; 0x3c44 <main+0x89e>
    3c42:	62 c1       	rjmp	.+708    	; 0x3f08 <main+0xb62>
			{
				// In high-speed mode, the RC rate will be unfairly marked as "slow" once measured and interrupt blocking starts.
				// To stop this being a problem, only set SlowRC prior to RCrateMeasured becoming true in this mode
				if (FrameRate > SLOW_RC_RATE)
    3c44:	80 91 d8 07 	lds	r24, 0x07D8
    3c48:	90 91 d9 07 	lds	r25, 0x07D9
    3c4c:	31 e0       	ldi	r19, 0x01	; 1
    3c4e:	39 87       	std	Y+9, r19	; 0x09
    3c50:	84 3c       	cpi	r24, 0xC4	; 196
    3c52:	92 4a       	sbci	r25, 0xA2	; 162
    3c54:	40 f4       	brcc	.+16     	; 0x3c66 <main+0x8c0>
    3c56:	19 86       	std	Y+9, r1	; 0x09
    3c58:	3b c0       	rjmp	.+118    	; 0x3cd0 <main+0x92a>
			//* Work out the high speed mode RC blocking period when requested. 
			//* Only relevant for high speed mode. The slower the PWM rate the fewer
			//* PWM pulses will fit in the S.Bus gap.
			//***********************************************************************

			if (RCrateMeasured && (Config.Servo_rate == FAST))
    3c5a:	82 30       	cpi	r24, 0x02	; 2
    3c5c:	09 f0       	breq	.+2      	; 0x3c60 <main+0x8ba>
    3c5e:	54 c1       	rjmp	.+680    	; 0x3f08 <main+0xb62>
			{
				// Set minimal pulses doable (39.2 - n * cycletime)
				if (SlowRC)
    3c60:	29 85       	ldd	r18, Y+9	; 0x09
    3c62:	22 23       	and	r18, r18
    3c64:	a9 f1       	breq	.+106    	; 0x3cd0 <main+0x92a>
				{
					PWM_pulses = 4;				// Four pulses will fit if interval faster than 102Hz
				
					if (PWM_interval < 19600)	// 19600 = 7.84ms
    3c66:	30 e9       	ldi	r19, 0x90	; 144
    3c68:	c3 16       	cp	r12, r19
    3c6a:	3c e4       	ldi	r19, 0x4C	; 76
    3c6c:	d3 06       	cpc	r13, r19
    3c6e:	e1 04       	cpc	r14, r1
    3c70:	f1 04       	cpc	r15, r1
    3c72:	08 f0       	brcs	.+2      	; 0x3c76 <main+0x8d0>
    3c74:	4d c1       	rjmp	.+666    	; 0x3f10 <main+0xb6a>
					{
						PWM_pulses += 1;		// Five pulses will fit if interval faster than 127Hz
					}
				
					if (PWM_interval < 16333)	// 16333 = 6.53ms
    3c76:	4d ec       	ldi	r20, 0xCD	; 205
    3c78:	c4 16       	cp	r12, r20
    3c7a:	4f e3       	ldi	r20, 0x3F	; 63
    3c7c:	d4 06       	cpc	r13, r20
    3c7e:	e1 04       	cpc	r14, r1
    3c80:	f1 04       	cpc	r15, r1
    3c82:	08 f0       	brcs	.+2      	; 0x3c86 <main+0x8e0>
    3c84:	49 c1       	rjmp	.+658    	; 0x3f18 <main+0xb72>
					{
						PWM_pulses += 1;		// Six pulses will fit if interval faster than 153Hz
					}
				
					if (PWM_interval < 14000)	// 14000 = 5.6ms
    3c86:	50 eb       	ldi	r21, 0xB0	; 176
    3c88:	c5 16       	cp	r12, r21
    3c8a:	56 e3       	ldi	r21, 0x36	; 54
    3c8c:	d5 06       	cpc	r13, r21
    3c8e:	e1 04       	cpc	r14, r1
    3c90:	f1 04       	cpc	r15, r1
    3c92:	08 f0       	brcs	.+2      	; 0x3c96 <main+0x8f0>
    3c94:	45 c1       	rjmp	.+650    	; 0x3f20 <main+0xb7a>
					{
						PWM_pulses += 1;		// Seven pulses will fit if interval faster than 179Hz
					}
				
					if (PWM_interval < 12250)	// 12250 = 4.9ms
    3c96:	8a ed       	ldi	r24, 0xDA	; 218
    3c98:	c8 16       	cp	r12, r24
    3c9a:	8f e2       	ldi	r24, 0x2F	; 47
    3c9c:	d8 06       	cpc	r13, r24
    3c9e:	e1 04       	cpc	r14, r1
    3ca0:	f1 04       	cpc	r15, r1
    3ca2:	08 f0       	brcs	.+2      	; 0x3ca6 <main+0x900>
    3ca4:	41 c1       	rjmp	.+642    	; 0x3f28 <main+0xb82>
					{
						PWM_pulses += 1;		// Eight pulses will fit if interval faster than 204Hz
					}
				
					if (PWM_interval < 10888)	// 10888 = 4.35ms
    3ca6:	98 e8       	ldi	r25, 0x88	; 136
    3ca8:	c9 16       	cp	r12, r25
    3caa:	9a e2       	ldi	r25, 0x2A	; 42
    3cac:	d9 06       	cpc	r13, r25
    3cae:	e1 04       	cpc	r14, r1
    3cb0:	f1 04       	cpc	r15, r1
    3cb2:	08 f0       	brcs	.+2      	; 0x3cb6 <main+0x910>
    3cb4:	3d c1       	rjmp	.+634    	; 0x3f30 <main+0xb8a>
					{
						PWM_pulses += 1;		// Nine pulses will fit if interval faster than 230Hz
					}
				
					if (PWM_interval < 9800)	// 9800 = 3.92ms
    3cb6:	a8 e4       	ldi	r26, 0x48	; 72
    3cb8:	ca 16       	cp	r12, r26
    3cba:	a6 e2       	ldi	r26, 0x26	; 38
    3cbc:	da 06       	cpc	r13, r26
    3cbe:	e1 04       	cpc	r14, r1
    3cc0:	f1 04       	cpc	r15, r1
    3cc2:	98 f5       	brcc	.+102    	; 0x3d2a <main+0x984>
    3cc4:	21 e0       	ldi	r18, 0x01	; 1
    3cc6:	2a 83       	std	Y+2, r18	; 0x02
					{
						PWM_pulses += 1;		// Ten pulses will fit if interval faster than 255Hz
    3cc8:	2a e0       	ldi	r18, 0x0A	; 10
    3cca:	62 2e       	mov	r6, r18
    3ccc:	71 2c       	mov	r7, r1
    3cce:	38 c0       	rjmp	.+112    	; 0x3d40 <main+0x99a>
				}
				else
				{
					PWM_pulses = 3;				// Three pulses will fit if interval faster than 101Hz
				
					if (PWM_interval < 18437)	// 18437 = 7.37ms
    3cd0:	35 e0       	ldi	r19, 0x05	; 5
    3cd2:	c3 16       	cp	r12, r19
    3cd4:	38 e4       	ldi	r19, 0x48	; 72
    3cd6:	d3 06       	cpc	r13, r19
    3cd8:	e1 04       	cpc	r14, r1
    3cda:	f1 04       	cpc	r15, r1
    3cdc:	08 f0       	brcs	.+2      	; 0x3ce0 <main+0x93a>
    3cde:	2e c1       	rjmp	.+604    	; 0x3f3c <main+0xb96>
					{
						PWM_pulses += 1;		// Four pulses will fit if interval faster than 135Hz
					}
				
					if (PWM_interval < 14750)	// 14750 = 5.9ms
    3ce0:	4e e9       	ldi	r20, 0x9E	; 158
    3ce2:	c4 16       	cp	r12, r20
    3ce4:	49 e3       	ldi	r20, 0x39	; 57
    3ce6:	d4 06       	cpc	r13, r20
    3ce8:	e1 04       	cpc	r14, r1
    3cea:	f1 04       	cpc	r15, r1
    3cec:	08 f0       	brcs	.+2      	; 0x3cf0 <main+0x94a>
    3cee:	2a c1       	rjmp	.+596    	; 0x3f44 <main+0xb9e>
					{
						PWM_pulses += 1;		// Five pulses will fit if interval faster than 169Hz
					}
				
					if (PWM_interval < 11886)	// 11886 = 4.75ms
    3cf0:	5e e6       	ldi	r21, 0x6E	; 110
    3cf2:	c5 16       	cp	r12, r21
    3cf4:	5e e2       	ldi	r21, 0x2E	; 46
    3cf6:	d5 06       	cpc	r13, r21
    3cf8:	e1 04       	cpc	r14, r1
    3cfa:	f1 04       	cpc	r15, r1
    3cfc:	08 f0       	brcs	.+2      	; 0x3d00 <main+0x95a>
    3cfe:	26 c1       	rjmp	.+588    	; 0x3f4c <main+0xba6>
					{
						PWM_pulses += 1;		// Six pulses will fit if interval faster than 210Hz
					}
				
					if (PWM_interval < 10142)	// 10142 = 4.05ms
    3d00:	8e e9       	ldi	r24, 0x9E	; 158
    3d02:	c8 16       	cp	r12, r24
    3d04:	87 e2       	ldi	r24, 0x27	; 39
    3d06:	d8 06       	cpc	r13, r24
    3d08:	e1 04       	cpc	r14, r1
    3d0a:	f1 04       	cpc	r15, r1
    3d0c:	08 f0       	brcs	.+2      	; 0x3d10 <main+0x96a>
    3d0e:	22 c1       	rjmp	.+580    	; 0x3f54 <main+0xbae>
					{
						PWM_pulses += 1;		// Five pulses will fit if interval faster than 246Hz
					}
				
					if (PWM_interval < 8859)	// 8859 = 3.5ms
    3d10:	9b e9       	ldi	r25, 0x9B	; 155
    3d12:	c9 16       	cp	r12, r25
    3d14:	92 e2       	ldi	r25, 0x22	; 34
    3d16:	d9 06       	cpc	r13, r25
    3d18:	e1 04       	cpc	r14, r1
    3d1a:	f1 04       	cpc	r15, r1
    3d1c:	60 f4       	brcc	.+24     	; 0x3d36 <main+0x990>
    3d1e:	21 e0       	ldi	r18, 0x01	; 1
    3d20:	2a 83       	std	Y+2, r18	; 0x02
					{
						PWM_pulses += 1;		// Six pulses will fit if interval faster than 282Hz
    3d22:	98 e0       	ldi	r25, 0x08	; 8
    3d24:	69 2e       	mov	r6, r25
    3d26:	71 2c       	mov	r7, r1
    3d28:	0b c0       	rjmp	.+22     	; 0x3d40 <main+0x99a>
    3d2a:	31 e0       	ldi	r19, 0x01	; 1
    3d2c:	3a 83       	std	Y+2, r19	; 0x02
						PWM_pulses += 1;		// Eight pulses will fit if interval faster than 204Hz
					}
				
					if (PWM_interval < 10888)	// 10888 = 4.35ms
					{
						PWM_pulses += 1;		// Nine pulses will fit if interval faster than 230Hz
    3d2e:	89 e0       	ldi	r24, 0x09	; 9
    3d30:	68 2e       	mov	r6, r24
    3d32:	71 2c       	mov	r7, r1
    3d34:	05 c0       	rjmp	.+10     	; 0x3d40 <main+0x99a>
    3d36:	41 e0       	ldi	r20, 0x01	; 1
    3d38:	4a 83       	std	Y+2, r20	; 0x02
						PWM_pulses += 1;		// Six pulses will fit if interval faster than 210Hz
					}
				
					if (PWM_interval < 10142)	// 10142 = 4.05ms
					{
						PWM_pulses += 1;		// Five pulses will fit if interval faster than 246Hz
    3d3a:	b7 e0       	ldi	r27, 0x07	; 7
    3d3c:	6b 2e       	mov	r6, r27
    3d3e:	71 2c       	mov	r7, r1

			// Reset RC timeout now that Interrupt has been received.
			RC_Timeout = 0;

			// No longer overdue. This will cancel the "No signal" alarm
			Overdue = false;
    3d40:	10 92 0f 05 	sts	0x050F, r1
			
			// Reset rate timer once data received. Reset to current time.
			RC_Rate_Timer = 0;
			Save_TCNT1 = TIM16_ReadTCNT1();
    3d44:	0e 94 9c 2b 	call	0x5738	; 0x5738 <TIM16_ReadTCNT1>
    3d48:	9c 8b       	std	Y+20, r25	; 0x14
    3d4a:	8b 8b       	std	Y+19, r24	; 0x13
			//* output when S.Bus is used.
			//************************************************************

			// Block RC interrupts if period has been calculated
			// and PWM mode is FAST.
			if ((Config.Servo_rate == FAST) && RCrateMeasured)
    3d4c:	80 91 cb 05 	lds	r24, 0x05CB
    3d50:	82 30       	cpi	r24, 0x02	; 2
    3d52:	b9 f4       	brne	.+46     	; 0x3d82 <main+0x9dc>
    3d54:	2a 81       	ldd	r18, Y+2	; 0x02
    3d56:	22 23       	and	r18, r18
    3d58:	a1 f0       	breq	.+40     	; 0x3d82 <main+0x9dc>
			{
				// If it's time to resample the RC rate, do it now
				// so as not to disturb PWM generation.
				// This will result in a double gap with just one PWM.
				if (ResampleRCRate)
    3d5a:	3b 8d       	ldd	r19, Y+27	; 0x1b
    3d5c:	31 11       	cpse	r19, r1
    3d5e:	18 c0       	rjmp	.+48     	; 0x3d90 <main+0x9ea>
				// If not, block the RC interrupts until we run out of pulses
				// We need to cancel the Interrupted flag but have to make a copy until 
				// the status screen state machine has seen it.
				else
				{
					if (Interrupted)
    3d60:	80 91 ba 07 	lds	r24, 0x07BA
    3d64:	81 11       	cpse	r24, r1
					{
						Interrupted_Clone = true;	// Hand "Interrupted" baton on to its clone
    3d66:	01 e0       	ldi	r16, 0x01	; 1
					}
					Interrupted = false;		// Cancel pending interrupts
    3d68:	10 92 ba 07 	sts	0x07BA, r1
					Disable_RC_Interrupts();	// Disable RC interrupts
    3d6c:	0e 94 ce 2d 	call	0x5b9c	; 0x5b9c <Disable_RC_Interrupts>
			{
				PWM_pulses = 1;
			}

			// Reset RC timeout now that Interrupt has been received.
			RC_Timeout = 0;
    3d70:	1b a6       	std	Y+43, r1	; 0x2b
    3d72:	1a a6       	std	Y+42, r1	; 0x2a

			// No longer overdue. This will cancel the "No signal" alarm
			Overdue = false;
			
			// Reset rate timer once data received. Reset to current time.
			RC_Rate_Timer = 0;
    3d74:	1b 82       	std	Y+3, r1	; 0x03
    3d76:	1c 82       	std	Y+4, r1	; 0x04
    3d78:	1d 82       	std	Y+5, r1	; 0x05
    3d7a:	1e 82       	std	Y+6, r1	; 0x06
					{
						Interrupted_Clone = true;	// Hand "Interrupted" baton on to its clone
					}
					Interrupted = false;		// Cancel pending interrupts
					Disable_RC_Interrupts();	// Disable RC interrupts
					RCInterruptsON = false;		// Flag it for the rest of the code
    3d7c:	1a 8e       	std	Y+26, r1	; 0x1a
					PWMBlocked = false;			// Enable PWM generation	
    3d7e:	1c 86       	std	Y+12, r1	; 0x0c
    3d80:	11 c0       	rjmp	.+34     	; 0x3da4 <main+0x9fe>
			{
				PWM_pulses = 1;
			}

			// Reset RC timeout now that Interrupt has been received.
			RC_Timeout = 0;
    3d82:	1b a6       	std	Y+43, r1	; 0x2b
    3d84:	1a a6       	std	Y+42, r1	; 0x2a

			// No longer overdue. This will cancel the "No signal" alarm
			Overdue = false;
			
			// Reset rate timer once data received. Reset to current time.
			RC_Rate_Timer = 0;
    3d86:	1b 82       	std	Y+3, r1	; 0x03
    3d88:	1c 82       	std	Y+4, r1	; 0x04
    3d8a:	1d 82       	std	Y+5, r1	; 0x05
    3d8c:	1e 82       	std	Y+6, r1	; 0x06
    3d8e:	0a c0       	rjmp	.+20     	; 0x3da4 <main+0x9fe>
			{
				PWM_pulses = 1;
			}

			// Reset RC timeout now that Interrupt has been received.
			RC_Timeout = 0;
    3d90:	1b a6       	std	Y+43, r1	; 0x2b
    3d92:	1a a6       	std	Y+42, r1	; 0x2a

			// No longer overdue. This will cancel the "No signal" alarm
			Overdue = false;
			
			// Reset rate timer once data received. Reset to current time.
			RC_Rate_Timer = 0;
    3d94:	1b 82       	std	Y+3, r1	; 0x03
    3d96:	1c 82       	std	Y+4, r1	; 0x04
    3d98:	1d 82       	std	Y+5, r1	; 0x05
    3d9a:	1e 82       	std	Y+6, r1	; 0x06
				// This will result in a double gap with just one PWM.
				if (ResampleRCRate)
				{
					RCrateMeasured = false;		// Force remeasure of RC rate
					PWMBlocked = true;			// Disable Fast-mode PWM generation		
					ResampleRCRate = false;		// Reset resample request
    3d9c:	1b 8e       	std	Y+27, r1	; 0x1b
				// so as not to disturb PWM generation.
				// This will result in a double gap with just one PWM.
				if (ResampleRCRate)
				{
					RCrateMeasured = false;		// Force remeasure of RC rate
					PWMBlocked = true;			// Disable Fast-mode PWM generation		
    3d9e:	41 e0       	ldi	r20, 0x01	; 1
    3da0:	4c 87       	std	Y+12, r20	; 0x0c
				// If it's time to resample the RC rate, do it now
				// so as not to disturb PWM generation.
				// This will result in a double gap with just one PWM.
				if (ResampleRCRate)
				{
					RCrateMeasured = false;		// Force remeasure of RC rate
    3da2:	1a 82       	std	Y+2, r1	; 0x02
		//* based on a very specific set of conditions
		//************************************************************

		// Cases where we are ready to output
		if	(
				(Interrupted) ||											// Run at RC rate
    3da4:	80 91 ba 07 	lds	r24, 0x07BA
		//* Output PWM to ESCs/Servos where required, 
		//* based on a very specific set of conditions
		//************************************************************

		// Cases where we are ready to output
		if	(
    3da8:	81 11       	cpse	r24, r1
    3daa:	08 c0       	rjmp	.+16     	; 0x3dbc <main+0xa16>
				(Interrupted) ||											// Run at RC rate
    3dac:	80 91 cb 05 	lds	r24, 0x05CB
    3db0:	82 30       	cpi	r24, 0x02	; 2
    3db2:	09 f0       	breq	.+2      	; 0x3db6 <main+0xa10>
    3db4:	81 c0       	rjmp	.+258    	; 0x3eb8 <main+0xb12>
				((Config.Servo_rate == FAST) && (!PWMBlocked))				// Run at full loop rate if allowed
    3db6:	2c 85       	ldd	r18, Y+12	; 0x0c
    3db8:	21 11       	cpse	r18, r1
    3dba:	7e c0       	rjmp	.+252    	; 0x3eb8 <main+0xb12>
			//* The execution rates are:
			//* The RC rate unless in FAST mode
			//* High speed in FAST mode
			//******************************************************************

			if (Interrupted)
    3dbc:	80 91 ba 07 	lds	r24, 0x07BA
    3dc0:	88 23       	and	r24, r24
    3dc2:	19 f0       	breq	.+6      	; 0x3dca <main+0xa24>
			{
				Interrupted_Clone = true;	// Hand "Interrupted" baton on to its clone
				Interrupted = false;		// Reset interrupted flag if that was the cause of entry			
    3dc4:	10 92 ba 07 	sts	0x07BA, r1
			//* High speed in FAST mode
			//******************************************************************

			if (Interrupted)
			{
				Interrupted_Clone = true;	// Hand "Interrupted" baton on to its clone
    3dc8:	01 e0       	ldi	r16, 0x01	; 1
			// For each output, mark the ones that are to fire this time
			for (i = 0; i < MAX_OUTPUTS; i++)
			{
				// Mark bits depending on the selected output type
				if	(
						((Config.Servo_rate == FAST) && (Config.Channel[i].Motor_marker == ASERVO) && ServoTick) ||					// At ServoTick for A.Servo in FAST mode
    3dca:	90 91 cb 05 	lds	r25, 0x05CB
    3dce:	e7 e3       	ldi	r30, 0x37	; 55
    3dd0:	f6 e0       	ldi	r31, 0x06	; 6
    3dd2:	20 e0       	ldi	r18, 0x00	; 0
    3dd4:	30 e0       	ldi	r19, 0x00	; 0
			}

			// Decide which outputs fire this time, depending on their device setting (A.Servo, D.Servo, Motor)
			// D.Servo, Motor are always ready, but A.Servo must be limited to Servo_rate, flagged by ServoTick

			ServoFlag = 0;
    3dd6:	80 e0       	ldi	r24, 0x00	; 0
				
			// For each output, mark the ones that are to fire this time
			for (i = 0; i < MAX_OUTPUTS; i++)
			{
				// Mark bits depending on the selected output type
				if	(
    3dd8:	92 30       	cpi	r25, 0x02	; 2
    3dda:	29 f4       	brne	.+10     	; 0x3de6 <main+0xa40>
						((Config.Servo_rate == FAST) && (Config.Channel[i].Motor_marker == ASERVO) && ServoTick) ||					// At ServoTick for A.Servo in FAST mode
    3ddc:	40 81       	ld	r20, Z
    3dde:	44 23       	and	r20, r20
    3de0:	09 f4       	brne	.+2      	; 0x3de4 <main+0xa3e>
    3de2:	be c0       	rjmp	.+380    	; 0x3f60 <main+0xbba>
    3de4:	0b c0       	rjmp	.+22     	; 0x3dfc <main+0xa56>
    3de6:	91 30       	cpi	r25, 0x01	; 1
    3de8:	39 f4       	brne	.+14     	; 0x3df8 <main+0xa52>
						((Config.Servo_rate == SYNC) && (Config.Channel[i].Motor_marker == ASERVO) && (!SlowRC) && ServoTick) ||	// At ServoTick for A.Servo in SYNC with Fast RC
    3dea:	40 81       	ld	r20, Z
    3dec:	41 11       	cpse	r20, r1
    3dee:	06 c0       	rjmp	.+12     	; 0x3dfc <main+0xa56>
    3df0:	49 85       	ldd	r20, Y+9	; 0x09
    3df2:	41 11       	cpse	r20, r1
    3df4:	0f c0       	rjmp	.+30     	; 0x3e14 <main+0xa6e>
    3df6:	b4 c0       	rjmp	.+360    	; 0x3f60 <main+0xbba>
						((Config.Servo_rate == SYNC) && (Config.Channel[i].Motor_marker == ASERVO) && (SlowRC)) ||					// At RC rate for A.Servo with slow RC
    3df8:	19 16       	cp	r1, r25
    3dfa:	24 f4       	brge	.+8      	; 0x3e04 <main+0xa5e>
						((Config.Servo_rate >= SYNC) && (Config.Channel[i].Motor_marker > ASERVO)) ||								// Always for D.Servo and Motor in SYNC or FAST modes
    3dfc:	40 81       	ld	r20, Z
    3dfe:	14 16       	cp	r1, r20
    3e00:	4c f0       	brlt	.+18     	; 0x3e14 <main+0xa6e>
    3e02:	10 c0       	rjmp	.+32     	; 0x3e24 <main+0xa7e>
    3e04:	91 11       	cpse	r25, r1
    3e06:	0e c0       	rjmp	.+28     	; 0x3e24 <main+0xa7e>
						((Config.Servo_rate == LOW) && (!SlowRC) && ServoTick) ||													// All outputs at ServoTick in LOW mode with fast RC
    3e08:	49 85       	ldd	r20, Y+9	; 0x09
    3e0a:	41 11       	cpse	r20, r1
    3e0c:	03 c0       	rjmp	.+6      	; 0x3e14 <main+0xa6e>
    3e0e:	4a 85       	ldd	r20, Y+10	; 0x0a
    3e10:	44 23       	and	r20, r20
    3e12:	41 f0       	breq	.+16     	; 0x3e24 <main+0xa7e>
						((Config.Servo_rate == LOW) && (SlowRC))																	// All outputs at  RC rate in LOW mode with slow RC
					)
				{
					ServoFlag |= (1 << i);
    3e14:	41 e0       	ldi	r20, 0x01	; 1
    3e16:	50 e0       	ldi	r21, 0x00	; 0
    3e18:	02 2e       	mov	r0, r18
    3e1a:	01 c0       	rjmp	.+2      	; 0x3e1e <main+0xa78>
    3e1c:	44 0f       	add	r20, r20
    3e1e:	0a 94       	dec	r0
    3e20:	ea f7       	brpl	.-6      	; 0x3e1c <main+0xa76>
    3e22:	84 2b       	or	r24, r20
    3e24:	2f 5f       	subi	r18, 0xFF	; 255
    3e26:	3f 4f       	sbci	r19, 0xFF	; 255
    3e28:	b6 96       	adiw	r30, 0x26	; 38
			// D.Servo, Motor are always ready, but A.Servo must be limited to Servo_rate, flagged by ServoTick

			ServoFlag = 0;
				
			// For each output, mark the ones that are to fire this time
			for (i = 0; i < MAX_OUTPUTS; i++)
    3e2a:	28 30       	cpi	r18, 0x08	; 8
    3e2c:	31 05       	cpc	r19, r1
    3e2e:	a1 f6       	brne	.-88     	; 0x3dd8 <main+0xa32>
					ServoFlag |= (1 << i);
				}
			}
								
			// Reset slow PWM flag if it was just set. It will automatically set again at around 19531/SERVO_RATE_LOW (Hz)
			if (ServoTick)
    3e30:	2a 85       	ldd	r18, Y+10	; 0x0a
    3e32:	22 23       	and	r18, r18
    3e34:	11 f0       	breq	.+4      	; 0x3e3a <main+0xa94>
			{
				ServoTick = false;
				
				// Reset the Servo rate counter here so that it doesn't force an unusually small gap next time
				Servo_Rate = 0;
    3e36:	18 8a       	std	Y+16, r1	; 0x10
    3e38:	1f 86       	std	Y+15, r1	; 0x0f
			}

			// Block PWM generation after last PWM pulse
			if ((PWM_pulses == 1) && (Config.Servo_rate == FAST))
    3e3a:	31 e0       	ldi	r19, 0x01	; 1
    3e3c:	63 16       	cp	r6, r19
    3e3e:	71 04       	cpc	r7, r1
    3e40:	d1 f4       	brne	.+52     	; 0x3e76 <main+0xad0>
    3e42:	92 30       	cpi	r25, 0x02	; 2
    3e44:	c1 f4       	brne	.+48     	; 0x3e76 <main+0xad0>
				
				// Refresh PWM_interval with the actual interval when generating PWM
				// if it lies within believable ranges of 120Hz to 250Hz
				// This is located here to make sure the interval measured
				// is during PWM generation cycles
				if ((interval < PWM_PERIOD_WORST) && (interval > PWM_PERIOD_BEST))
    3e46:	b5 01       	movw	r22, r10
    3e48:	a4 01       	movw	r20, r8
    3e4a:	4e 58       	subi	r20, 0x8E	; 142
    3e4c:	50 42       	sbci	r21, 0x20	; 32
    3e4e:	61 09       	sbc	r22, r1
    3e50:	71 09       	sbc	r23, r1
    3e52:	43 3d       	cpi	r20, 0xD3	; 211
    3e54:	50 43       	sbci	r21, 0x30	; 48
    3e56:	61 05       	cpc	r22, r1
    3e58:	71 05       	cpc	r23, r1
    3e5a:	48 f0       	brcs	.+18     	; 0x3e6e <main+0xac8>
				{
					PWM_interval = interval;
				}
				else
				{
					PWM_interval = PWM_PERIOD_WORST; // 120Hz
    3e5c:	a1 e6       	ldi	r26, 0x61	; 97
    3e5e:	ca 2e       	mov	r12, r26
    3e60:	a1 e5       	ldi	r26, 0x51	; 81
    3e62:	da 2e       	mov	r13, r26
    3e64:	e1 2c       	mov	r14, r1
    3e66:	f1 2c       	mov	r15, r1
			}

			// Block PWM generation after last PWM pulse
			if ((PWM_pulses == 1) && (Config.Servo_rate == FAST))
			{
				PWMBlocked = true;					// Block PWM generation on notification of last call
    3e68:	21 e0       	ldi	r18, 0x01	; 1
    3e6a:	2c 87       	std	Y+12, r18	; 0x0c
    3e6c:	04 c0       	rjmp	.+8      	; 0x3e76 <main+0xad0>
    3e6e:	75 01       	movw	r14, r10
    3e70:	64 01       	movw	r12, r8
    3e72:	31 e0       	ldi	r19, 0x01	; 1
    3e74:	3c 87       	std	Y+12, r19	; 0x0c
				}	
			
				
			}
			
			Calculate_PID();					// Calculate PID values
    3e76:	89 a7       	std	Y+41, r24	; 0x29
    3e78:	0e 94 4b 40 	call	0x8096	; 0x8096 <Calculate_PID>
			ProcessMixer();						// Do all the mixer tasks - can be very slow
    3e7c:	0e 94 cf 37 	call	0x6f9e	; 0x6f9e <ProcessMixer>
			UpdateServos();						// Transfer Config.Channel[i].value data to ServoOut[i] and check servo limits
    3e80:	0e 94 6f 37 	call	0x6ede	; 0x6ede <UpdateServos>
			
			// If, for some reason, a higher power has banned PWM output for this cycle, 
			// just fake a PWM interval. The PWM interval is currently 2.3ms, and doesn't vary.
			if (PWMOverride)
    3e84:	89 a5       	ldd	r24, Y+41	; 0x29
    3e86:	49 81       	ldd	r20, Y+1	; 0x01
    3e88:	44 23       	and	r20, r20
    3e8a:	39 f0       	breq	.+14     	; 0x3e9a <main+0xaf4>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3e8c:	8b ee       	ldi	r24, 0xEB	; 235
    3e8e:	9c e2       	ldi	r25, 0x2C	; 44
    3e90:	01 97       	sbiw	r24, 0x01	; 1
    3e92:	f1 f7       	brne	.-4      	; 0x3e90 <main+0xaea>
    3e94:	00 c0       	rjmp	.+0      	; 0x3e96 <main+0xaf0>
    3e96:	00 00       	nop
    3e98:	02 c0       	rjmp	.+4      	; 0x3e9e <main+0xaf8>
				_delay_us(2300);
			}
			// Otherwise just output PWM normally
			else
			{
				output_servo_ppm(ServoFlag);		// Output servo signal			
    3e9a:	0e 94 e4 43 	call	0x87c8	; 0x87c8 <output_servo_ppm>
			}


			// Decrement PWM pulse sum
			if ((Config.Servo_rate == FAST) && (PWM_pulses > 0))
    3e9e:	80 91 cb 05 	lds	r24, 0x05CB
    3ea2:	82 30       	cpi	r24, 0x02	; 2
    3ea4:	31 f4       	brne	.+12     	; 0x3eb2 <main+0xb0c>
    3ea6:	16 14       	cp	r1, r6
    3ea8:	17 04       	cpc	r1, r7
    3eaa:	1c f4       	brge	.+6      	; 0x3eb2 <main+0xb0c>
			{
				PWM_pulses--;
    3eac:	91 e0       	ldi	r25, 0x01	; 1
    3eae:	69 1a       	sub	r6, r25
    3eb0:	71 08       	sbc	r7, r1
			}
			
			LoopCount = 0;						// Reset loop counter for averaging accVert
    3eb2:	10 92 0e 05 	sts	0x050E, r1
    3eb6:	1a 86       	std	Y+10, r1	; 0x0a
		//************************************************************
		//* Enable RC interrupts when ready (RC rate measured and RC interrupts OFF)
		//* and just one PWM remains
		//************************************************************

		if ((PWM_pulses < 1) && RCrateMeasured && !RCInterruptsON && (Config.Servo_rate == FAST))
    3eb8:	16 14       	cp	r1, r6
    3eba:	17 04       	cpc	r1, r7
    3ebc:	74 f0       	brlt	.+28     	; 0x3eda <main+0xb34>
    3ebe:	2a 81       	ldd	r18, Y+2	; 0x02
    3ec0:	22 23       	and	r18, r18
    3ec2:	59 f0       	breq	.+22     	; 0x3eda <main+0xb34>
    3ec4:	3a 8d       	ldd	r19, Y+26	; 0x1a
    3ec6:	31 11       	cpse	r19, r1
    3ec8:	08 c0       	rjmp	.+16     	; 0x3eda <main+0xb34>
    3eca:	80 91 cb 05 	lds	r24, 0x05CB
    3ece:	82 30       	cpi	r24, 0x02	; 2
    3ed0:	21 f4       	brne	.+8      	; 0x3eda <main+0xb34>
		{
			init_int();					// Re-enable interrupts
    3ed2:	0e 94 e1 2d 	call	0x5bc2	; 0x5bc2 <init_int>
			RCInterruptsON = true;
    3ed6:	41 e0       	ldi	r20, 0x01	; 1
    3ed8:	4a 8f       	std	Y+26, r20	; 0x1a
		//* Carefully update idle screen if error level changed
		//************************************************************	

		// Only update idle when error state has changed.
		// This prevents the continual updating of the LCD disrupting the FC
		if ((old_alarms != General_error) && (Menu_mode == IDLE))
    3eda:	80 91 16 05 	lds	r24, 0x0516
    3ede:	28 a5       	ldd	r18, Y+40	; 0x28
    3ee0:	28 17       	cp	r18, r24
    3ee2:	19 f0       	breq	.+6      	; 0x3eea <main+0xb44>
    3ee4:	11 11       	cpse	r17, r1
    3ee6:	01 c0       	rjmp	.+2      	; 0x3eea <main+0xb44>
		{
			// Force safe update of idle screen
			Menu_mode = PRESTATUS_TIMEOUT;
    3ee8:	17 e0       	ldi	r17, 0x07	; 7
		}
			
		// Save current alarm state into old_alarms
		old_alarms = General_error;
    3eea:	30 91 16 05 	lds	r19, 0x0516
    3eee:	38 a7       	std	Y+40, r19	; 0x28
		//************************************************************
		//* Transition state handling
		//************************************************************

		// Update timed transition when changing flight modes
		if (Config.FlightSel != old_flight)
    3ef0:	be 8c       	ldd	r11, Y+30	; 0x1e
		}
			
		// Save current alarm state into old_alarms
		old_alarms = General_error;
		
	} // while loop
    3ef2:	8b 88       	ldd	r8, Y+19	; 0x13
    3ef4:	9c 88       	ldd	r9, Y+20	; 0x14
    3ef6:	9c ca       	rjmp	.-2760   	; 0x3430 <main+0x8a>
			// Trim lower end to zero (0 to 2250)
			if (temp1 < 0) temp1 = 0;

			// Convert 0 to 2250 to 0 to 125. Divide by 20
			// Round to avoid truncation errors
			transition = (temp1 + 10) / 20;
    3ef8:	70 93 18 05 	sts	0x0518, r23
    3efc:	60 93 17 05 	sts	0x0517, r22

		// Always in the TRANSITIONING state when Config.TransitionSpeed is 0
		// This prevents state changes when controlled by a channel
		if (Config.TransitionSpeed == 0)
		{
			Transition_state = TRANSITIONING;
    3f00:	85 e0       	ldi	r24, 0x05	; 5
    3f02:	80 93 19 05 	sts	0x0519, r24
    3f06:	a2 cc       	rjmp	.-1724   	; 0x384c <main+0x4a6>
			
			// Rate not measured or re-calibrating or not FAST mode
			// In all these other modes, just output one pulse
			else
			{
				PWM_pulses = 1;
    3f08:	66 24       	eor	r6, r6
    3f0a:	63 94       	inc	r6
    3f0c:	71 2c       	mov	r7, r1
    3f0e:	18 cf       	rjmp	.-464    	; 0x3d40 <main+0x99a>
			if (RCrateMeasured && (Config.Servo_rate == FAST))
			{
				// Set minimal pulses doable (39.2 - n * cycletime)
				if (SlowRC)
				{
					PWM_pulses = 4;				// Four pulses will fit if interval faster than 102Hz
    3f10:	e4 e0       	ldi	r30, 0x04	; 4
    3f12:	6e 2e       	mov	r6, r30
    3f14:	71 2c       	mov	r7, r1
    3f16:	0f c0       	rjmp	.+30     	; 0x3f36 <main+0xb90>
				
					if (PWM_interval < 19600)	// 19600 = 7.84ms
					{
						PWM_pulses += 1;		// Five pulses will fit if interval faster than 127Hz
    3f18:	75 e0       	ldi	r23, 0x05	; 5
    3f1a:	67 2e       	mov	r6, r23
    3f1c:	71 2c       	mov	r7, r1
    3f1e:	0b c0       	rjmp	.+22     	; 0x3f36 <main+0xb90>
					}
				
					if (PWM_interval < 16333)	// 16333 = 6.53ms
					{
						PWM_pulses += 1;		// Six pulses will fit if interval faster than 153Hz
    3f20:	66 e0       	ldi	r22, 0x06	; 6
    3f22:	66 2e       	mov	r6, r22
    3f24:	71 2c       	mov	r7, r1
    3f26:	07 c0       	rjmp	.+14     	; 0x3f36 <main+0xb90>
					}
				
					if (PWM_interval < 14000)	// 14000 = 5.6ms
					{
						PWM_pulses += 1;		// Seven pulses will fit if interval faster than 179Hz
    3f28:	57 e0       	ldi	r21, 0x07	; 7
    3f2a:	65 2e       	mov	r6, r21
    3f2c:	71 2c       	mov	r7, r1
    3f2e:	03 c0       	rjmp	.+6      	; 0x3f36 <main+0xb90>
					}
				
					if (PWM_interval < 12250)	// 12250 = 4.9ms
					{
						PWM_pulses += 1;		// Eight pulses will fit if interval faster than 204Hz
    3f30:	48 e0       	ldi	r20, 0x08	; 8
    3f32:	64 2e       	mov	r6, r20
    3f34:	71 2c       	mov	r7, r1
						PWM_pulses += 1;		// Nine pulses will fit if interval faster than 230Hz
					}
				
					if (PWM_interval < 9800)	// 9800 = 3.92ms
					{
						PWM_pulses += 1;		// Ten pulses will fit if interval faster than 255Hz
    3f36:	41 e0       	ldi	r20, 0x01	; 1
    3f38:	4a 83       	std	Y+2, r20	; 0x02
    3f3a:	02 cf       	rjmp	.-508    	; 0x3d40 <main+0x99a>
					}
				}
				else
				{
					PWM_pulses = 3;				// Three pulses will fit if interval faster than 101Hz
    3f3c:	33 e0       	ldi	r19, 0x03	; 3
    3f3e:	63 2e       	mov	r6, r19
    3f40:	71 2c       	mov	r7, r1
    3f42:	0b c0       	rjmp	.+22     	; 0x3f5a <main+0xbb4>
				
					if (PWM_interval < 18437)	// 18437 = 7.37ms
					{
						PWM_pulses += 1;		// Four pulses will fit if interval faster than 135Hz
    3f44:	24 e0       	ldi	r18, 0x04	; 4
    3f46:	62 2e       	mov	r6, r18
    3f48:	71 2c       	mov	r7, r1
    3f4a:	07 c0       	rjmp	.+14     	; 0x3f5a <main+0xbb4>
					}
				
					if (PWM_interval < 14750)	// 14750 = 5.9ms
					{
						PWM_pulses += 1;		// Five pulses will fit if interval faster than 169Hz
    3f4c:	95 e0       	ldi	r25, 0x05	; 5
    3f4e:	69 2e       	mov	r6, r25
    3f50:	71 2c       	mov	r7, r1
    3f52:	03 c0       	rjmp	.+6      	; 0x3f5a <main+0xbb4>
					}
				
					if (PWM_interval < 11886)	// 11886 = 4.75ms
					{
						PWM_pulses += 1;		// Six pulses will fit if interval faster than 210Hz
    3f54:	86 e0       	ldi	r24, 0x06	; 6
    3f56:	68 2e       	mov	r6, r24
    3f58:	71 2c       	mov	r7, r1
		//************************************************************

		// Flag update required based on the variable Servo_Match
		if (Servo_Rate > SERVO_RATE_LOW)
		{
			ServoTick = true;	// Slow device is ready for output generation
    3f5a:	21 e0       	ldi	r18, 0x01	; 1
    3f5c:	2a 83       	std	Y+2, r18	; 0x02
    3f5e:	f0 ce       	rjmp	.-544    	; 0x3d40 <main+0x99a>
			// For each output, mark the ones that are to fire this time
			for (i = 0; i < MAX_OUTPUTS; i++)
			{
				// Mark bits depending on the selected output type
				if	(
						((Config.Servo_rate == FAST) && (Config.Channel[i].Motor_marker == ASERVO) && ServoTick) ||					// At ServoTick for A.Servo in FAST mode
    3f60:	4a 85       	ldd	r20, Y+10	; 0x0a
    3f62:	41 11       	cpse	r20, r1
    3f64:	57 cf       	rjmp	.-338    	; 0x3e14 <main+0xa6e>
    3f66:	4a cf       	rjmp	.-364    	; 0x3dfc <main+0xa56>

00003f68 <spiwrite>:
const uint8_t pagemap[] PROGMEM 		= { 7, 6, 5, 4, 3, 2, 1, 0 }; 
const uint8_t lcd_commmands[] PROGMEM	= {0xAF,0x40,0xA0,0xA6,0xA4,0xA2,0xEE,0xC8,0x2F,0x24,0xAC,0x00,0xF8,0x00};	// LCD command string 14

// Software SPI write
inline void spiwrite(uint8_t c) 
{
    3f68:	0f 93       	push	r16
    3f6a:	1f 93       	push	r17
    3f6c:	cf 93       	push	r28
    3f6e:	df 93       	push	r29
    3f70:	c7 e0       	ldi	r28, 0x07	; 7
    3f72:	d0 e0       	ldi	r29, 0x00	; 0
	int8_t i;
	for (i = 7; i >= 0; i--) 
	{
		LCD_SCL = 0;
		if (c & (1 << (i)))		// Bit set?
    3f74:	08 2f       	mov	r16, r24
    3f76:	10 e0       	ldi	r17, 0x00	; 0
inline void spiwrite(uint8_t c) 
{
	int8_t i;
	for (i = 7; i >= 0; i--) 
	{
		LCD_SCL = 0;
    3f78:	5c 98       	cbi	0x0b, 4	; 11
		if (c & (1 << (i)))		// Bit set?
    3f7a:	c8 01       	movw	r24, r16
    3f7c:	0c 2e       	mov	r0, r28
    3f7e:	02 c0       	rjmp	.+4      	; 0x3f84 <spiwrite+0x1c>
    3f80:	95 95       	asr	r25
    3f82:	87 95       	ror	r24
    3f84:	0a 94       	dec	r0
    3f86:	e2 f7       	brpl	.-8      	; 0x3f80 <spiwrite+0x18>
    3f88:	80 ff       	sbrs	r24, 0
    3f8a:	02 c0       	rjmp	.+4      	; 0x3f90 <spiwrite+0x28>
		{
			LCD_SI = 1;
    3f8c:	59 9a       	sbi	0x0b, 1	; 11
    3f8e:	01 c0       	rjmp	.+2      	; 0x3f92 <spiwrite+0x2a>
		}
		else					// Bit clear?
		{
			LCD_SI = 0;
    3f90:	59 98       	cbi	0x0b, 1	; 11
		}
		
		LCD_SCL = 1;
    3f92:	5c 9a       	sbi	0x0b, 4	; 11

		glcd_delay();			// 250ns
    3f94:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <glcd_delay>
    3f98:	21 97       	sbiw	r28, 0x01	; 1
    3f9a:	70 f7       	brcc	.-36     	; 0x3f78 <spiwrite+0x10>
	}
}
    3f9c:	df 91       	pop	r29
    3f9e:	cf 91       	pop	r28
    3fa0:	1f 91       	pop	r17
    3fa2:	0f 91       	pop	r16
    3fa4:	08 95       	ret

00003fa6 <st7565_command>:

// Send command to LCD
void st7565_command(uint8_t c) 
{
	LCD_A0 = 0;
    3fa6:	5f 98       	cbi	0x0b, 7	; 11
	spiwrite(c);
    3fa8:	0c 94 b4 1f 	jmp	0x3f68	; 0x3f68 <spiwrite>

00003fac <st7565_data>:
}

// Send data to LCD
void st7565_data(uint8_t c) 
{
	LCD_A0 = 1;
    3fac:	5f 9a       	sbi	0x0b, 7	; 11
	spiwrite(c);
    3fae:	0c 94 b4 1f 	jmp	0x3f68	; 0x3f68 <spiwrite>

00003fb2 <st7565_set_brightness>:
}


// Set LCD brightness
void st7565_set_brightness(uint8_t val) 
{
    3fb2:	cf 93       	push	r28
    3fb4:	c8 2f       	mov	r28, r24
	st7565_command(CMD_SET_VOLUME_FIRST);					// 0x81
    3fb6:	81 e8       	ldi	r24, 0x81	; 129
    3fb8:	0e 94 d3 1f 	call	0x3fa6	; 0x3fa6 <st7565_command>
	st7565_command(val);
    3fbc:	8c 2f       	mov	r24, r28
}
    3fbe:	cf 91       	pop	r28

// Set LCD brightness
void st7565_set_brightness(uint8_t val) 
{
	st7565_command(CMD_SET_VOLUME_FIRST);					// 0x81
	st7565_command(val);
    3fc0:	0c 94 d3 1f 	jmp	0x3fa6	; 0x3fa6 <st7565_command>

00003fc4 <st7565_init>:
	spiwrite(c);
}

// Initialise LCD
void st7565_init(void) 
{
    3fc4:	cf 93       	push	r28
    3fc6:	df 93       	push	r29
	// Toggle RST low to reset and CS low so it'll listen to us
	LCD_CSI = 0;
    3fc8:	5d 98       	cbi	0x0b, 5	; 11
	LCD_RES = 0;
    3fca:	5e 98       	cbi	0x0b, 6	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3fcc:	87 e8       	ldi	r24, 0x87	; 135
    3fce:	93 e1       	ldi	r25, 0x13	; 19
    3fd0:	01 97       	sbiw	r24, 0x01	; 1
    3fd2:	f1 f7       	brne	.-4      	; 0x3fd0 <st7565_init+0xc>
    3fd4:	00 c0       	rjmp	.+0      	; 0x3fd6 <st7565_init+0x12>
    3fd6:	00 00       	nop
	_delay_ms(1); // Datasheet says 1us for 3.3V operation
	LCD_RES = 1;
    3fd8:	5e 9a       	sbi	0x0b, 6	; 11
    3fda:	ce ed       	ldi	r28, 0xDE	; 222
    3fdc:	dd e0       	ldi	r29, 0x0D	; 13

	// Send command sequence
	for (int i = 0; i < 14; i++)
	{
		st7565_command((uint8_t)pgm_read_byte(&lcd_commmands[i]));
    3fde:	fe 01       	movw	r30, r28
    3fe0:	84 91       	lpm	r24, Z
    3fe2:	0e 94 d3 1f 	call	0x3fa6	; 0x3fa6 <st7565_command>
    3fe6:	21 96       	adiw	r28, 0x01	; 1
	LCD_RES = 0;
	_delay_ms(1); // Datasheet says 1us for 3.3V operation
	LCD_RES = 1;

	// Send command sequence
	for (int i = 0; i < 14; i++)
    3fe8:	fd e0       	ldi	r31, 0x0D	; 13
    3fea:	cc 3e       	cpi	r28, 0xEC	; 236
    3fec:	df 07       	cpc	r29, r31
    3fee:	b9 f7       	brne	.-18     	; 0x3fde <st7565_init+0x1a>
	{
		st7565_command((uint8_t)pgm_read_byte(&lcd_commmands[i]));
	}

	st7565_set_brightness(Config.Contrast);	
    3ff0:	80 91 2a 06 	lds	r24, 0x062A
    3ff4:	0e 94 d9 1f 	call	0x3fb2	; 0x3fb2 <st7565_set_brightness>
	st7565_command(CMD_SET_COM_REVERSE); 		// For logo	0xC8
    3ff8:	88 ec       	ldi	r24, 0xC8	; 200
}
    3ffa:	df 91       	pop	r29
    3ffc:	cf 91       	pop	r28
	{
		st7565_command((uint8_t)pgm_read_byte(&lcd_commmands[i]));
	}

	st7565_set_brightness(Config.Contrast);	
	st7565_command(CMD_SET_COM_REVERSE); 		// For logo	0xC8
    3ffe:	0c 94 d3 1f 	jmp	0x3fa6	; 0x3fa6 <st7565_command>

00004002 <write_buffer>:
	st7565_command(val);
}

// Write LCD buffer
void write_buffer(uint8_t *buffer) 
{
    4002:	df 92       	push	r13
    4004:	ef 92       	push	r14
    4006:	ff 92       	push	r15
    4008:	0f 93       	push	r16
    400a:	1f 93       	push	r17
    400c:	cf 93       	push	r28
    400e:	df 93       	push	r29
    4010:	cc ee       	ldi	r28, 0xEC	; 236
    4012:	dd e0       	ldi	r29, 0x0D	; 13
    4014:	8c 01       	movw	r16, r24
	uint8_t c, p;
	for(p = 0; p < 8; p++) 
	{
		st7565_command(CMD_SET_PAGE | (uint8_t)pgm_read_byte(&pagemap[p]));		// Page 7 to 0
    4016:	fe 01       	movw	r30, r28
    4018:	84 91       	lpm	r24, Z
    401a:	80 6b       	ori	r24, 0xB0	; 176
    401c:	0e 94 d3 1f 	call	0x3fa6	; 0x3fa6 <st7565_command>
		st7565_command(CMD_SET_COLUMN_LOWER | (0x0 & 0xf));						// Column 0
    4020:	80 e0       	ldi	r24, 0x00	; 0
    4022:	0e 94 d3 1f 	call	0x3fa6	; 0x3fa6 <st7565_command>
		st7565_command(CMD_SET_COLUMN_UPPER | ((0x0 >> 4) & 0xf));				// Column 0
    4026:	80 e1       	ldi	r24, 0x10	; 16
    4028:	0e 94 d3 1f 	call	0x3fa6	; 0x3fa6 <st7565_command>
		st7565_command(CMD_RMW);												// Sets auto-increment
    402c:	80 ee       	ldi	r24, 0xE0	; 224
    402e:	0e 94 d3 1f 	call	0x3fa6	; 0x3fa6 <st7565_command>
    4032:	78 01       	movw	r14, r16

		for(c = 0; c < 128; c++) 
    4034:	d1 2c       	mov	r13, r1
		{
			st7565_data(buffer[(128*p)+c]);
    4036:	f7 01       	movw	r30, r14
    4038:	81 91       	ld	r24, Z+
    403a:	7f 01       	movw	r14, r30
    403c:	0e 94 d6 1f 	call	0x3fac	; 0x3fac <st7565_data>
		st7565_command(CMD_SET_PAGE | (uint8_t)pgm_read_byte(&pagemap[p]));		// Page 7 to 0
		st7565_command(CMD_SET_COLUMN_LOWER | (0x0 & 0xf));						// Column 0
		st7565_command(CMD_SET_COLUMN_UPPER | ((0x0 >> 4) & 0xf));				// Column 0
		st7565_command(CMD_RMW);												// Sets auto-increment

		for(c = 0; c < 128; c++) 
    4040:	d3 94       	inc	r13
    4042:	f0 e8       	ldi	r31, 0x80	; 128
    4044:	df 12       	cpse	r13, r31
    4046:	f7 cf       	rjmp	.-18     	; 0x4036 <write_buffer+0x34>
    4048:	21 96       	adiw	r28, 0x01	; 1
    404a:	00 58       	subi	r16, 0x80	; 128
    404c:	1f 4f       	sbci	r17, 0xFF	; 255

// Write LCD buffer
void write_buffer(uint8_t *buffer) 
{
	uint8_t c, p;
	for(p = 0; p < 8; p++) 
    404e:	8d e0       	ldi	r24, 0x0D	; 13
    4050:	c4 3f       	cpi	r28, 0xF4	; 244
    4052:	d8 07       	cpc	r29, r24
    4054:	01 f7       	brne	.-64     	; 0x4016 <write_buffer+0x14>
		for(c = 0; c < 128; c++) 
		{
			st7565_data(buffer[(128*p)+c]);
		}
	}
}
    4056:	df 91       	pop	r29
    4058:	cf 91       	pop	r28
    405a:	1f 91       	pop	r17
    405c:	0f 91       	pop	r16
    405e:	ff 90       	pop	r15
    4060:	ef 90       	pop	r14
    4062:	df 90       	pop	r13
    4064:	08 95       	ret

00004066 <clear_buffer>:

// Clear buffer
void clear_buffer(uint8_t *buff) 
{
	memset(buff, 0, 1024);
    4066:	20 e0       	ldi	r18, 0x00	; 0
    4068:	34 e0       	ldi	r19, 0x04	; 4
    406a:	fc 01       	movw	r30, r24
    406c:	a9 01       	movw	r20, r18
    406e:	11 92       	st	Z+, r1
    4070:	41 50       	subi	r20, 0x01	; 1
    4072:	50 40       	sbci	r21, 0x00	; 0
    4074:	e1 f7       	brne	.-8      	; 0x406e <clear_buffer+0x8>
    4076:	08 95       	ret

00004078 <clear_screen>:
}

// Clear screen (does not clear buffer)
void clear_screen(void)
{
    4078:	cf 93       	push	r28
    407a:	df 93       	push	r29
	uint8_t p, c;

	for(p = 0; p < 8; p++)
    407c:	d0 e0       	ldi	r29, 0x00	; 0
	{
		st7565_command(CMD_SET_PAGE | p);								// Set page to p
    407e:	8d 2f       	mov	r24, r29
    4080:	80 6b       	ori	r24, 0xB0	; 176
    4082:	0e 94 d3 1f 	call	0x3fa6	; 0x3fa6 <st7565_command>
		for(c = 0; c < 128; c++) 										// Was 129, which I think is wrong...
    4086:	c0 e0       	ldi	r28, 0x00	; 0
		{
			st7565_command(CMD_SET_COLUMN_LOWER | (c & 0xf));
    4088:	8c 2f       	mov	r24, r28
    408a:	8f 70       	andi	r24, 0x0F	; 15
    408c:	0e 94 d3 1f 	call	0x3fa6	; 0x3fa6 <st7565_command>
			st7565_command(CMD_SET_COLUMN_UPPER | ((c >> 4) & 0xf));	// Set column to c
    4090:	8c 2f       	mov	r24, r28
    4092:	82 95       	swap	r24
    4094:	8f 70       	andi	r24, 0x0F	; 15
    4096:	80 61       	ori	r24, 0x10	; 16
    4098:	0e 94 d3 1f 	call	0x3fa6	; 0x3fa6 <st7565_command>
			st7565_data(0x00);											// Clear data
    409c:	80 e0       	ldi	r24, 0x00	; 0
    409e:	0e 94 d6 1f 	call	0x3fac	; 0x3fac <st7565_data>
	uint8_t p, c;

	for(p = 0; p < 8; p++)
	{
		st7565_command(CMD_SET_PAGE | p);								// Set page to p
		for(c = 0; c < 128; c++) 										// Was 129, which I think is wrong...
    40a2:	cf 5f       	subi	r28, 0xFF	; 255
    40a4:	c0 38       	cpi	r28, 0x80	; 128
    40a6:	81 f7       	brne	.-32     	; 0x4088 <clear_screen+0x10>
// Clear screen (does not clear buffer)
void clear_screen(void)
{
	uint8_t p, c;

	for(p = 0; p < 8; p++)
    40a8:	df 5f       	subi	r29, 0xFF	; 255
    40aa:	d8 30       	cpi	r29, 0x08	; 8
    40ac:	41 f7       	brne	.-48     	; 0x407e <clear_screen+0x6>
			st7565_command(CMD_SET_COLUMN_LOWER | (c & 0xf));
			st7565_command(CMD_SET_COLUMN_UPPER | ((c >> 4) & 0xf));	// Set column to c
			st7565_data(0x00);											// Clear data
		}
	}
}
    40ae:	df 91       	pop	r29
    40b0:	cf 91       	pop	r28
    40b2:	08 95       	ret

000040b4 <setpixel>:
//***********************************************************

// Set a single pixel
void setpixel(uint8_t *buff, uint8_t x, uint8_t y, uint8_t color) 
{
	if ((x >= LCDWIDTH) || (y >= LCDHEIGHT))
    40b4:	67 fd       	sbrc	r22, 7
    40b6:	36 c0       	rjmp	.+108    	; 0x4124 <setpixel+0x70>
    40b8:	40 34       	cpi	r20, 0x40	; 64
    40ba:	a0 f5       	brcc	.+104    	; 0x4124 <setpixel+0x70>
    40bc:	34 2f       	mov	r19, r20
    40be:	36 95       	lsr	r19
    40c0:	36 95       	lsr	r19
    40c2:	36 95       	lsr	r19
    40c4:	e6 2f       	mov	r30, r22
    40c6:	f0 e0       	ldi	r31, 0x00	; 0
    40c8:	50 e0       	ldi	r21, 0x00	; 0
	{
		return;
	}
	// x is which column
	if (color)
    40ca:	22 23       	and	r18, r18
    40cc:	a9 f0       	breq	.+42     	; 0x40f8 <setpixel+0x44>
	{
		buff[x+ (y/8)*128] |= (1 << (7-(y%8)));  
    40ce:	20 e8       	ldi	r18, 0x80	; 128
    40d0:	32 9f       	mul	r19, r18
    40d2:	e0 0d       	add	r30, r0
    40d4:	f1 1d       	adc	r31, r1
    40d6:	11 24       	eor	r1, r1
    40d8:	e8 0f       	add	r30, r24
    40da:	f9 1f       	adc	r31, r25
    40dc:	40 95       	com	r20
    40de:	50 95       	com	r21
    40e0:	47 70       	andi	r20, 0x07	; 7
    40e2:	55 27       	eor	r21, r21
    40e4:	81 e0       	ldi	r24, 0x01	; 1
    40e6:	90 e0       	ldi	r25, 0x00	; 0
    40e8:	04 2e       	mov	r0, r20
    40ea:	01 c0       	rjmp	.+2      	; 0x40ee <setpixel+0x3a>
    40ec:	88 0f       	add	r24, r24
    40ee:	0a 94       	dec	r0
    40f0:	ea f7       	brpl	.-6      	; 0x40ec <setpixel+0x38>
    40f2:	90 81       	ld	r25, Z
    40f4:	98 2b       	or	r25, r24
    40f6:	15 c0       	rjmp	.+42     	; 0x4122 <setpixel+0x6e>
	}
	else
	{
		buff[x+ (y/8)*128] &= ~(1 << (7-(y%8))); 
    40f8:	20 e8       	ldi	r18, 0x80	; 128
    40fa:	32 9f       	mul	r19, r18
    40fc:	e0 0d       	add	r30, r0
    40fe:	f1 1d       	adc	r31, r1
    4100:	11 24       	eor	r1, r1
    4102:	e8 0f       	add	r30, r24
    4104:	f9 1f       	adc	r31, r25
    4106:	40 95       	com	r20
    4108:	50 95       	com	r21
    410a:	47 70       	andi	r20, 0x07	; 7
    410c:	55 27       	eor	r21, r21
    410e:	81 e0       	ldi	r24, 0x01	; 1
    4110:	90 e0       	ldi	r25, 0x00	; 0
    4112:	04 2e       	mov	r0, r20
    4114:	01 c0       	rjmp	.+2      	; 0x4118 <setpixel+0x64>
    4116:	88 0f       	add	r24, r24
    4118:	0a 94       	dec	r0
    411a:	ea f7       	brpl	.-6      	; 0x4116 <setpixel+0x62>
    411c:	80 95       	com	r24
    411e:	90 81       	ld	r25, Z
    4120:	98 23       	and	r25, r24
    4122:	90 83       	st	Z, r25
    4124:	08 95       	ret

00004126 <drawline>:
	}
}

// Bresenham's algorithm - From wikipedia
void drawline(uint8_t *buff, uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1, uint8_t color) 
{
    4126:	9f 92       	push	r9
    4128:	af 92       	push	r10
    412a:	bf 92       	push	r11
    412c:	cf 92       	push	r12
    412e:	df 92       	push	r13
    4130:	ef 92       	push	r14
    4132:	ff 92       	push	r15
    4134:	0f 93       	push	r16
    4136:	1f 93       	push	r17
    4138:	cf 93       	push	r28
    413a:	df 93       	push	r29
    413c:	ec 01       	movw	r28, r24
    413e:	16 2f       	mov	r17, r22
    4140:	f4 2e       	mov	r15, r20
    4142:	d2 2e       	mov	r13, r18
	uint8_t steep = abs(y1 - y0) > abs(x1 - x0);
    4144:	a0 2f       	mov	r26, r16
    4146:	b0 e0       	ldi	r27, 0x00	; 0
    4148:	a4 1b       	sub	r26, r20
    414a:	b1 09       	sbc	r27, r1
    414c:	b7 ff       	sbrs	r27, 7
    414e:	03 c0       	rjmp	.+6      	; 0x4156 <drawline+0x30>
    4150:	b1 95       	neg	r27
    4152:	a1 95       	neg	r26
    4154:	b1 09       	sbc	r27, r1
    4156:	ed 2d       	mov	r30, r13
    4158:	f0 e0       	ldi	r31, 0x00	; 0
    415a:	e1 1b       	sub	r30, r17
    415c:	f1 09       	sbc	r31, r1
    415e:	f7 ff       	sbrs	r31, 7
    4160:	03 c0       	rjmp	.+6      	; 0x4168 <drawline+0x42>
    4162:	f1 95       	neg	r31
    4164:	e1 95       	neg	r30
    4166:	f1 09       	sbc	r31, r1
    4168:	bb 24       	eor	r11, r11
    416a:	b3 94       	inc	r11
    416c:	ea 17       	cp	r30, r26
    416e:	fb 07       	cpc	r31, r27
    4170:	14 f0       	brlt	.+4      	; 0x4176 <drawline+0x50>
    4172:	b1 2c       	mov	r11, r1
    4174:	06 c0       	rjmp	.+12     	; 0x4182 <drawline+0x5c>
    4176:	8d 2d       	mov	r24, r13
	if (steep) 
	{
		swap(x0, y0);
		swap(x1, y1);
    4178:	d0 2e       	mov	r13, r16
    417a:	08 2f       	mov	r16, r24
    417c:	81 2f       	mov	r24, r17
void drawline(uint8_t *buff, uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1, uint8_t color) 
{
	uint8_t steep = abs(y1 - y0) > abs(x1 - x0);
	if (steep) 
	{
		swap(x0, y0);
    417e:	1f 2d       	mov	r17, r15
    4180:	f8 2e       	mov	r15, r24
		swap(x1, y1);
	}

	if (x0 > x1) 
    4182:	d1 16       	cp	r13, r17
    4184:	30 f4       	brcc	.+12     	; 0x4192 <drawline+0x6c>
    4186:	8f 2d       	mov	r24, r15
	{
		swap(x0, x1);
		swap(y0, y1);
    4188:	f0 2e       	mov	r15, r16
    418a:	08 2f       	mov	r16, r24
    418c:	81 2f       	mov	r24, r17
    418e:	1d 2d       	mov	r17, r13
    4190:	d8 2e       	mov	r13, r24
	}

	uint8_t dx, dy;
	dx = x1 - x0;
    4192:	ad 2c       	mov	r10, r13
    4194:	a1 1a       	sub	r10, r17
	dy = abs(y1 - y0);
    4196:	e0 2f       	mov	r30, r16
    4198:	f0 e0       	ldi	r31, 0x00	; 0
    419a:	ef 19       	sub	r30, r15
    419c:	f1 09       	sbc	r31, r1
    419e:	f7 ff       	sbrs	r31, 7
    41a0:	03 c0       	rjmp	.+6      	; 0x41a8 <drawline+0x82>
    41a2:	f1 95       	neg	r31
    41a4:	e1 95       	neg	r30
    41a6:	f1 09       	sbc	r31, r1
    41a8:	9e 2e       	mov	r9, r30

	int8_t err = dx / 2;
    41aa:	ca 2c       	mov	r12, r10
    41ac:	c6 94       	lsr	r12
	int8_t ystep;

	if (y0 < y1) 
    41ae:	f0 16       	cp	r15, r16
    41b0:	10 f4       	brcc	.+4      	; 0x41b6 <drawline+0x90>
	{
		ystep = 1;
    41b2:	01 e0       	ldi	r16, 0x01	; 1
    41b4:	10 c0       	rjmp	.+32     	; 0x41d6 <drawline+0xb0>
	} 
	else 
	{
		ystep = -1;
    41b6:	0f ef       	ldi	r16, 0xFF	; 255
    41b8:	0e c0       	rjmp	.+28     	; 0x41d6 <drawline+0xb0>

	for (; x0<x1; x0++) 
	{
		if (steep) 
		{
			setpixel(buff, y0, x0, color);
    41ba:	2e 2d       	mov	r18, r14
		ystep = -1;
	}

	for (; x0<x1; x0++) 
	{
		if (steep) 
    41bc:	bb 20       	and	r11, r11
    41be:	71 f0       	breq	.+28     	; 0x41dc <drawline+0xb6>
		{
			setpixel(buff, y0, x0, color);
    41c0:	41 2f       	mov	r20, r17
    41c2:	6f 2d       	mov	r22, r15
		} 
		else 
		{
			setpixel(buff, x0, y0, color);
    41c4:	ce 01       	movw	r24, r28
    41c6:	0e 94 5a 20 	call	0x40b4	; 0x40b4 <setpixel>
		}
		err -= dy;
    41ca:	c9 18       	sub	r12, r9
		if (err < 0) 
    41cc:	c7 fe       	sbrs	r12, 7
    41ce:	02 c0       	rjmp	.+4      	; 0x41d4 <drawline+0xae>
		{
			y0 += ystep;
    41d0:	f0 0e       	add	r15, r16
			err += dx;
    41d2:	ca 0c       	add	r12, r10
	else 
	{
		ystep = -1;
	}

	for (; x0<x1; x0++) 
    41d4:	1f 5f       	subi	r17, 0xFF	; 255
    41d6:	1d 15       	cp	r17, r13
    41d8:	80 f3       	brcs	.-32     	; 0x41ba <drawline+0x94>
    41da:	03 c0       	rjmp	.+6      	; 0x41e2 <drawline+0xbc>
		{
			setpixel(buff, y0, x0, color);
		} 
		else 
		{
			setpixel(buff, x0, y0, color);
    41dc:	4f 2d       	mov	r20, r15
    41de:	61 2f       	mov	r22, r17
    41e0:	f1 cf       	rjmp	.-30     	; 0x41c4 <drawline+0x9e>
		{
			y0 += ystep;
			err += dx;
		}
	}
}
    41e2:	df 91       	pop	r29
    41e4:	cf 91       	pop	r28
    41e6:	1f 91       	pop	r17
    41e8:	0f 91       	pop	r16
    41ea:	ff 90       	pop	r15
    41ec:	ef 90       	pop	r14
    41ee:	df 90       	pop	r13
    41f0:	cf 90       	pop	r12
    41f2:	bf 90       	pop	r11
    41f4:	af 90       	pop	r10
    41f6:	9f 90       	pop	r9
    41f8:	08 95       	ret

000041fa <drawrect>:
	}
}

// Draw a rectangle
void drawrect(uint8_t *buff, uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color) 
{
    41fa:	9f 92       	push	r9
    41fc:	af 92       	push	r10
    41fe:	bf 92       	push	r11
    4200:	cf 92       	push	r12
    4202:	df 92       	push	r13
    4204:	ef 92       	push	r14
    4206:	ff 92       	push	r15
    4208:	0f 93       	push	r16
    420a:	1f 93       	push	r17
    420c:	cf 93       	push	r28
    420e:	df 93       	push	r29
    4210:	ec 01       	movw	r28, r24
    4212:	f6 2e       	mov	r15, r22
    4214:	b4 2e       	mov	r11, r20
    4216:	92 2e       	mov	r9, r18
	// Stupidest version - just pixels - but fast with internal buffer!
	for (uint8_t i=x; i<x+w; i++) 
    4218:	16 2f       	mov	r17, r22
    421a:	c2 2e       	mov	r12, r18
    421c:	d1 2c       	mov	r13, r1
    421e:	c6 0e       	add	r12, r22
    4220:	d1 1c       	adc	r13, r1
	{
		setpixel(buff, i, y, color);
		setpixel(buff, i, y+h-1, color);
    4222:	aa 24       	eor	r10, r10
    4224:	aa 94       	dec	r10
    4226:	a0 0e       	add	r10, r16
    4228:	a4 0e       	add	r10, r20

// Draw a rectangle
void drawrect(uint8_t *buff, uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color) 
{
	// Stupidest version - just pixels - but fast with internal buffer!
	for (uint8_t i=x; i<x+w; i++) 
    422a:	81 2f       	mov	r24, r17
    422c:	90 e0       	ldi	r25, 0x00	; 0
    422e:	8c 15       	cp	r24, r12
    4230:	9d 05       	cpc	r25, r13
    4232:	74 f4       	brge	.+28     	; 0x4250 <drawrect+0x56>
	{
		setpixel(buff, i, y, color);
    4234:	2e 2d       	mov	r18, r14
    4236:	4b 2d       	mov	r20, r11
    4238:	61 2f       	mov	r22, r17
    423a:	ce 01       	movw	r24, r28
    423c:	0e 94 5a 20 	call	0x40b4	; 0x40b4 <setpixel>
		setpixel(buff, i, y+h-1, color);
    4240:	2e 2d       	mov	r18, r14
    4242:	4a 2d       	mov	r20, r10
    4244:	61 2f       	mov	r22, r17
    4246:	ce 01       	movw	r24, r28
    4248:	0e 94 5a 20 	call	0x40b4	; 0x40b4 <setpixel>

// Draw a rectangle
void drawrect(uint8_t *buff, uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color) 
{
	// Stupidest version - just pixels - but fast with internal buffer!
	for (uint8_t i=x; i<x+w; i++) 
    424c:	1f 5f       	subi	r17, 0xFF	; 255
    424e:	ed cf       	rjmp	.-38     	; 0x422a <drawrect+0x30>
    4250:	db 2c       	mov	r13, r11
	{
		setpixel(buff, i, y, color);
		setpixel(buff, i, y+h-1, color);
	}
	for (uint8_t i=y; i<y+h; i++) 
    4252:	10 e0       	ldi	r17, 0x00	; 0
    4254:	0b 0d       	add	r16, r11
    4256:	11 1d       	adc	r17, r1
	{
		setpixel(buff, x, i, color);
		setpixel(buff, x+w-1, i, color);
    4258:	cc 24       	eor	r12, r12
    425a:	ca 94       	dec	r12
    425c:	c9 0c       	add	r12, r9
    425e:	cf 0c       	add	r12, r15
	for (uint8_t i=x; i<x+w; i++) 
	{
		setpixel(buff, i, y, color);
		setpixel(buff, i, y+h-1, color);
	}
	for (uint8_t i=y; i<y+h; i++) 
    4260:	8d 2d       	mov	r24, r13
    4262:	90 e0       	ldi	r25, 0x00	; 0
    4264:	80 17       	cp	r24, r16
    4266:	91 07       	cpc	r25, r17
    4268:	74 f4       	brge	.+28     	; 0x4286 <drawrect+0x8c>
	{
		setpixel(buff, x, i, color);
    426a:	2e 2d       	mov	r18, r14
    426c:	4d 2d       	mov	r20, r13
    426e:	6f 2d       	mov	r22, r15
    4270:	ce 01       	movw	r24, r28
    4272:	0e 94 5a 20 	call	0x40b4	; 0x40b4 <setpixel>
		setpixel(buff, x+w-1, i, color);
    4276:	2e 2d       	mov	r18, r14
    4278:	4d 2d       	mov	r20, r13
    427a:	6c 2d       	mov	r22, r12
    427c:	ce 01       	movw	r24, r28
    427e:	0e 94 5a 20 	call	0x40b4	; 0x40b4 <setpixel>
	for (uint8_t i=x; i<x+w; i++) 
	{
		setpixel(buff, i, y, color);
		setpixel(buff, i, y+h-1, color);
	}
	for (uint8_t i=y; i<y+h; i++) 
    4282:	d3 94       	inc	r13
    4284:	ed cf       	rjmp	.-38     	; 0x4260 <drawrect+0x66>
	{
		setpixel(buff, x, i, color);
		setpixel(buff, x+w-1, i, color);
	} 
}
    4286:	df 91       	pop	r29
    4288:	cf 91       	pop	r28
    428a:	1f 91       	pop	r17
    428c:	0f 91       	pop	r16
    428e:	ff 90       	pop	r15
    4290:	ef 90       	pop	r14
    4292:	df 90       	pop	r13
    4294:	cf 90       	pop	r12
    4296:	bf 90       	pop	r11
    4298:	af 90       	pop	r10
    429a:	9f 90       	pop	r9
    429c:	08 95       	ret

0000429e <fillcircle>:

// Draw a filled circle
// Edge-clip bug fixed by D. Thompson - 3/2/2014
void fillcircle(uint8_t *buff, uint8_t x0, uint8_t y0, uint8_t r, uint8_t color) 
{
    429e:	4f 92       	push	r4
    42a0:	5f 92       	push	r5
    42a2:	6f 92       	push	r6
    42a4:	7f 92       	push	r7
    42a6:	8f 92       	push	r8
    42a8:	9f 92       	push	r9
    42aa:	af 92       	push	r10
    42ac:	bf 92       	push	r11
    42ae:	cf 92       	push	r12
    42b0:	df 92       	push	r13
    42b2:	ef 92       	push	r14
    42b4:	ff 92       	push	r15
    42b6:	0f 93       	push	r16
    42b8:	1f 93       	push	r17
    42ba:	cf 93       	push	r28
    42bc:	df 93       	push	r29
    42be:	ec 01       	movw	r28, r24
    42c0:	96 2e       	mov	r9, r22
    42c2:	a4 2e       	mov	r10, r20
	int8_t f = 1 - r;
    42c4:	bb 24       	eor	r11, r11
    42c6:	b3 94       	inc	r11
    42c8:	b2 1a       	sub	r11, r18
	int8_t ddF_x = 1;
	int8_t ddF_y = -2 * r;
    42ca:	82 2e       	mov	r8, r18
    42cc:	81 94       	neg	r8
    42ce:	88 0c       	add	r8, r8
	int8_t x = 0;
	int8_t y = r;
    42d0:	12 2f       	mov	r17, r18
	int8_t i = 0;

	for (i=y0-r; i<=y0+r; i++) 
    42d2:	74 2e       	mov	r7, r20
    42d4:	72 1a       	sub	r7, r18
    42d6:	e4 2e       	mov	r14, r20
    42d8:	f1 2c       	mov	r15, r1
    42da:	67 01       	movw	r12, r14
    42dc:	c2 0e       	add	r12, r18
    42de:	d1 1c       	adc	r13, r1
    42e0:	87 2d       	mov	r24, r7
    42e2:	99 27       	eor	r25, r25
    42e4:	87 fd       	sbrc	r24, 7
    42e6:	90 95       	com	r25
    42e8:	c8 16       	cp	r12, r24
    42ea:	d9 06       	cpc	r13, r25
    42ec:	44 f0       	brlt	.+16     	; 0x42fe <fillcircle+0x60>
	{
		setpixel(buff, x0, i, color);
    42ee:	20 2f       	mov	r18, r16
    42f0:	47 2d       	mov	r20, r7
    42f2:	69 2d       	mov	r22, r9
    42f4:	ce 01       	movw	r24, r28
    42f6:	0e 94 5a 20 	call	0x40b4	; 0x40b4 <setpixel>
    42fa:	73 94       	inc	r7
    42fc:	f1 cf       	rjmp	.-30     	; 0x42e0 <fillcircle+0x42>
	int8_t ddF_y = -2 * r;
	int8_t x = 0;
	int8_t y = r;
	int8_t i = 0;

	for (i=y0-r; i<=y0+r; i++) 
    42fe:	71 2c       	mov	r7, r1
	{
		setpixel(buff, x0, i, color);
	}

	while (x<y) 
    4300:	71 16       	cp	r7, r17
    4302:	0c f0       	brlt	.+2      	; 0x4306 <fillcircle+0x68>
    4304:	4c c0       	rjmp	.+152    	; 0x439e <fillcircle+0x100>
	{
		if (f >= 0) 
    4306:	b7 fc       	sbrc	r11, 7
    4308:	04 c0       	rjmp	.+8      	; 0x4312 <fillcircle+0x74>
		{
			y--;
    430a:	11 50       	subi	r17, 0x01	; 1
			ddF_y += 2;
    430c:	83 94       	inc	r8
    430e:	83 94       	inc	r8
			f += ddF_y;
    4310:	b8 0c       	add	r11, r8
    4312:	73 94       	inc	r7
    4314:	87 2d       	mov	r24, r7
    4316:	88 0f       	add	r24, r24
    4318:	8f 5f       	subi	r24, 0xFF	; 255
		}

		x++;
		ddF_x += 2;
		f += ddF_x;
    431a:	b8 0e       	add	r11, r24

		for (i=y0-y; i<=y0+y; i++) 
    431c:	6a 2c       	mov	r6, r10
    431e:	61 1a       	sub	r6, r17
    4320:	67 01       	movw	r12, r14
    4322:	c1 0e       	add	r12, r17
    4324:	d1 1c       	adc	r13, r1
    4326:	17 fd       	sbrc	r17, 7
    4328:	da 94       	dec	r13
    432a:	47 2c       	mov	r4, r7
    432c:	49 0c       	add	r4, r9
    432e:	59 2c       	mov	r5, r9
    4330:	57 18       	sub	r5, r7
    4332:	86 2d       	mov	r24, r6
    4334:	99 27       	eor	r25, r25
    4336:	87 fd       	sbrc	r24, 7
    4338:	90 95       	com	r25
    433a:	c8 16       	cp	r12, r24
    433c:	d9 06       	cpc	r13, r25
    433e:	74 f0       	brlt	.+28     	; 0x435c <fillcircle+0xbe>
		{
			setpixel(buff, x0+x, i, color);
    4340:	20 2f       	mov	r18, r16
    4342:	46 2d       	mov	r20, r6
    4344:	64 2d       	mov	r22, r4
    4346:	ce 01       	movw	r24, r28
    4348:	0e 94 5a 20 	call	0x40b4	; 0x40b4 <setpixel>
			setpixel(buff, x0-x, i, color);
    434c:	20 2f       	mov	r18, r16
    434e:	46 2d       	mov	r20, r6
    4350:	65 2d       	mov	r22, r5
    4352:	ce 01       	movw	r24, r28
    4354:	0e 94 5a 20 	call	0x40b4	; 0x40b4 <setpixel>
    4358:	63 94       	inc	r6
    435a:	eb cf       	rjmp	.-42     	; 0x4332 <fillcircle+0x94>
    435c:	6a 2c       	mov	r6, r10
    435e:	67 18       	sub	r6, r7
		} 
		for (i=y0-x; i<=y0+x; i++) 
    4360:	67 01       	movw	r12, r14
    4362:	c7 0c       	add	r12, r7
    4364:	d1 1c       	adc	r13, r1
    4366:	77 fc       	sbrc	r7, 7
    4368:	da 94       	dec	r13
		{
			setpixel(buff, x0+y, i, color);
    436a:	41 2e       	mov	r4, r17
    436c:	49 0c       	add	r4, r9
			setpixel(buff, x0-y, i, color);
    436e:	59 2c       	mov	r5, r9
    4370:	51 1a       	sub	r5, r17
		for (i=y0-y; i<=y0+y; i++) 
		{
			setpixel(buff, x0+x, i, color);
			setpixel(buff, x0-x, i, color);
		} 
		for (i=y0-x; i<=y0+x; i++) 
    4372:	86 2d       	mov	r24, r6
    4374:	99 27       	eor	r25, r25
    4376:	87 fd       	sbrc	r24, 7
    4378:	90 95       	com	r25
    437a:	c8 16       	cp	r12, r24
    437c:	d9 06       	cpc	r13, r25
    437e:	0c f4       	brge	.+2      	; 0x4382 <fillcircle+0xe4>
    4380:	bf cf       	rjmp	.-130    	; 0x4300 <fillcircle+0x62>
		{
			setpixel(buff, x0+y, i, color);
    4382:	20 2f       	mov	r18, r16
    4384:	46 2d       	mov	r20, r6
    4386:	64 2d       	mov	r22, r4
    4388:	ce 01       	movw	r24, r28
    438a:	0e 94 5a 20 	call	0x40b4	; 0x40b4 <setpixel>
			setpixel(buff, x0-y, i, color);
    438e:	20 2f       	mov	r18, r16
    4390:	46 2d       	mov	r20, r6
    4392:	65 2d       	mov	r22, r5
    4394:	ce 01       	movw	r24, r28
    4396:	0e 94 5a 20 	call	0x40b4	; 0x40b4 <setpixel>
    439a:	63 94       	inc	r6
    439c:	ea cf       	rjmp	.-44     	; 0x4372 <fillcircle+0xd4>
		}    
	}
}
    439e:	df 91       	pop	r29
    43a0:	cf 91       	pop	r28
    43a2:	1f 91       	pop	r17
    43a4:	0f 91       	pop	r16
    43a6:	ff 90       	pop	r15
    43a8:	ef 90       	pop	r14
    43aa:	df 90       	pop	r13
    43ac:	cf 90       	pop	r12
    43ae:	bf 90       	pop	r11
    43b0:	af 90       	pop	r10
    43b2:	9f 90       	pop	r9
    43b4:	8f 90       	pop	r8
    43b6:	7f 90       	pop	r7
    43b8:	6f 90       	pop	r6
    43ba:	5f 90       	pop	r5
    43bc:	4f 90       	pop	r4
    43be:	08 95       	ret

000043c0 <LCD_Display_Text>:
//************************************************************

// Print Menuitem from Program memory at a particular location
void LCD_Display_Text (uint16_t menuitem, const unsigned char* font,uint16_t x, uint16_t y)
{
	gLCDprint_Menu_P((char*)pgm_read_word(&text_menu[menuitem]), font, x, y);
    43c0:	88 0f       	add	r24, r24
    43c2:	99 1f       	adc	r25, r25
    43c4:	8c 50       	subi	r24, 0x0C	; 12
    43c6:	92 4f       	sbci	r25, 0xF2	; 242
    43c8:	fc 01       	movw	r30, r24
    43ca:	85 91       	lpm	r24, Z+
    43cc:	94 91       	lpm	r25, Z
}

// Print a string from RAM at a particular location in a particular font
void gLCDprint_Menu_P(const char *s, const unsigned char* font,uint16_t x, uint16_t y)
{
	pgm_mugui_lcd_puts((const unsigned char*)s, font, x, y);
    43ce:	0c 94 28 3e 	jmp	0x7c50	; 0x7c50 <pgm_mugui_lcd_puts>

000043d2 <gLCDprint_Menu_P>:
    43d2:	0c 94 28 3e 	jmp	0x7c50	; 0x7c50 <pgm_mugui_lcd_puts>

000043d6 <idle_screen>:
}

// Pop up the Idle screen
void idle_screen(void)
{
	clear_buffer(buffer);
    43d6:	80 e0       	ldi	r24, 0x00	; 0
    43d8:	91 e0       	ldi	r25, 0x01	; 1
    43da:	0e 94 33 20 	call	0x4066	; 0x4066 <clear_buffer>

	// Change Status screen depending on arm mode
	LCD_Display_Text(121,(const unsigned char*)Verdana14,41,3); 	// "Press"
    43de:	23 e0       	ldi	r18, 0x03	; 3
    43e0:	30 e0       	ldi	r19, 0x00	; 0
    43e2:	49 e2       	ldi	r20, 0x29	; 41
    43e4:	50 e0       	ldi	r21, 0x00	; 0
    43e6:	6f e5       	ldi	r22, 0x5F	; 95
    43e8:	71 e0       	ldi	r23, 0x01	; 1
    43ea:	89 e7       	ldi	r24, 0x79	; 121
    43ec:	90 e0       	ldi	r25, 0x00	; 0
    43ee:	0e 94 e0 21 	call	0x43c0	; 0x43c0 <LCD_Display_Text>
	LCD_Display_Text(122,(const unsigned char*)Verdana14,24,23);	// "for status."
    43f2:	27 e1       	ldi	r18, 0x17	; 23
    43f4:	30 e0       	ldi	r19, 0x00	; 0
    43f6:	48 e1       	ldi	r20, 0x18	; 24
    43f8:	50 e0       	ldi	r21, 0x00	; 0
    43fa:	6f e5       	ldi	r22, 0x5F	; 95
    43fc:	71 e0       	ldi	r23, 0x01	; 1
    43fe:	8a e7       	ldi	r24, 0x7A	; 122
    4400:	90 e0       	ldi	r25, 0x00	; 0
    4402:	0e 94 e0 21 	call	0x43c0	; 0x43c0 <LCD_Display_Text>

	// Display most important error
	if ((General_error & (1 << LVA_ALARM)) != 0)					// Low voltage
    4406:	80 91 16 05 	lds	r24, 0x0516
    440a:	83 ff       	sbrs	r24, 3
    440c:	13 c0       	rjmp	.+38     	; 0x4434 <idle_screen+0x5e>
	{
		LCD_Display_Text(134,(const unsigned char*)Verdana14,12,43);// "Battery"
    440e:	2b e2       	ldi	r18, 0x2B	; 43
    4410:	30 e0       	ldi	r19, 0x00	; 0
    4412:	4c e0       	ldi	r20, 0x0C	; 12
    4414:	50 e0       	ldi	r21, 0x00	; 0
    4416:	6f e5       	ldi	r22, 0x5F	; 95
    4418:	71 e0       	ldi	r23, 0x01	; 1
    441a:	86 e8       	ldi	r24, 0x86	; 134
    441c:	90 e0       	ldi	r25, 0x00	; 0
    441e:	0e 94 e0 21 	call	0x43c0	; 0x43c0 <LCD_Display_Text>
		LCD_Display_Text(118,(const unsigned char*)Verdana14,80,43); // "Low"
    4422:	2b e2       	ldi	r18, 0x2B	; 43
    4424:	30 e0       	ldi	r19, 0x00	; 0
    4426:	40 e5       	ldi	r20, 0x50	; 80
    4428:	50 e0       	ldi	r21, 0x00	; 0
    442a:	6f e5       	ldi	r22, 0x5F	; 95
    442c:	71 e0       	ldi	r23, 0x01	; 1
    442e:	86 e7       	ldi	r24, 0x76	; 118
    4430:	90 e0       	ldi	r25, 0x00	; 0
    4432:	41 c0       	rjmp	.+130    	; 0x44b6 <idle_screen+0xe0>
	}
	
	else if ((General_error & (1 << NO_SIGNAL)) != 0)				// No signal
    4434:	80 91 16 05 	lds	r24, 0x0516
    4438:	81 ff       	sbrs	r24, 1
    443a:	13 c0       	rjmp	.+38     	; 0x4462 <idle_screen+0x8c>
	{
		LCD_Display_Text(75,(const unsigned char*)Verdana14,28,43); // "No"
    443c:	2b e2       	ldi	r18, 0x2B	; 43
    443e:	30 e0       	ldi	r19, 0x00	; 0
    4440:	4c e1       	ldi	r20, 0x1C	; 28
    4442:	50 e0       	ldi	r21, 0x00	; 0
    4444:	6f e5       	ldi	r22, 0x5F	; 95
    4446:	71 e0       	ldi	r23, 0x01	; 1
    4448:	8b e4       	ldi	r24, 0x4B	; 75
    444a:	90 e0       	ldi	r25, 0x00	; 0
    444c:	0e 94 e0 21 	call	0x43c0	; 0x43c0 <LCD_Display_Text>
		LCD_Display_Text(76,(const unsigned char*)Verdana14,54,43); // "Signal"
    4450:	2b e2       	ldi	r18, 0x2B	; 43
    4452:	30 e0       	ldi	r19, 0x00	; 0
    4454:	46 e3       	ldi	r20, 0x36	; 54
    4456:	50 e0       	ldi	r21, 0x00	; 0
    4458:	6f e5       	ldi	r22, 0x5F	; 95
    445a:	71 e0       	ldi	r23, 0x01	; 1
    445c:	8c e4       	ldi	r24, 0x4C	; 76
    445e:	90 e0       	ldi	r25, 0x00	; 0
    4460:	2a c0       	rjmp	.+84     	; 0x44b6 <idle_screen+0xe0>
	}
	
	else if ((General_error & (1 << THROTTLE_HIGH)) != 0)			// Throttle high
    4462:	80 91 16 05 	lds	r24, 0x0516
    4466:	80 ff       	sbrs	r24, 0
    4468:	13 c0       	rjmp	.+38     	; 0x4490 <idle_screen+0xba>
	{
		LCD_Display_Text(105,(const unsigned char*)Verdana14,10,43);// "Throttle"
    446a:	2b e2       	ldi	r18, 0x2B	; 43
    446c:	30 e0       	ldi	r19, 0x00	; 0
    446e:	4a e0       	ldi	r20, 0x0A	; 10
    4470:	50 e0       	ldi	r21, 0x00	; 0
    4472:	6f e5       	ldi	r22, 0x5F	; 95
    4474:	71 e0       	ldi	r23, 0x01	; 1
    4476:	89 e6       	ldi	r24, 0x69	; 105
    4478:	90 e0       	ldi	r25, 0x00	; 0
    447a:	0e 94 e0 21 	call	0x43c0	; 0x43c0 <LCD_Display_Text>
		LCD_Display_Text(55,(const unsigned char*)Verdana14,81,43);	// "High"
    447e:	2b e2       	ldi	r18, 0x2B	; 43
    4480:	30 e0       	ldi	r19, 0x00	; 0
    4482:	41 e5       	ldi	r20, 0x51	; 81
    4484:	50 e0       	ldi	r21, 0x00	; 0
    4486:	6f e5       	ldi	r22, 0x5F	; 95
    4488:	71 e0       	ldi	r23, 0x01	; 1
    448a:	87 e3       	ldi	r24, 0x37	; 55
    448c:	90 e0       	ldi	r25, 0x00	; 0
    448e:	13 c0       	rjmp	.+38     	; 0x44b6 <idle_screen+0xe0>
	}
	
	else if ((General_error & (1 << DISARMED)) != 0)				// Disarmed
    4490:	80 91 16 05 	lds	r24, 0x0516
	{
		LCD_Display_Text(139,(const unsigned char*)Verdana14,20,43);// "(Disarmed)"
    4494:	2b e2       	ldi	r18, 0x2B	; 43
    4496:	30 e0       	ldi	r19, 0x00	; 0
	{
		LCD_Display_Text(105,(const unsigned char*)Verdana14,10,43);// "Throttle"
		LCD_Display_Text(55,(const unsigned char*)Verdana14,81,43);	// "High"
	}
	
	else if ((General_error & (1 << DISARMED)) != 0)				// Disarmed
    4498:	82 ff       	sbrs	r24, 2
    449a:	07 c0       	rjmp	.+14     	; 0x44aa <idle_screen+0xd4>
	{
		LCD_Display_Text(139,(const unsigned char*)Verdana14,20,43);// "(Disarmed)"
    449c:	44 e1       	ldi	r20, 0x14	; 20
    449e:	50 e0       	ldi	r21, 0x00	; 0
    44a0:	6f e5       	ldi	r22, 0x5F	; 95
    44a2:	71 e0       	ldi	r23, 0x01	; 1
    44a4:	8b e8       	ldi	r24, 0x8B	; 139
    44a6:	90 e0       	ldi	r25, 0x00	; 0
    44a8:	06 c0       	rjmp	.+12     	; 0x44b6 <idle_screen+0xe0>
	}
	else
	{
		LCD_Display_Text(138,(const unsigned char*)Verdana14,28,43);// "(Armed)"
    44aa:	4c e1       	ldi	r20, 0x1C	; 28
    44ac:	50 e0       	ldi	r21, 0x00	; 0
    44ae:	6f e5       	ldi	r22, 0x5F	; 95
    44b0:	71 e0       	ldi	r23, 0x01	; 1
    44b2:	8a e8       	ldi	r24, 0x8A	; 138
    44b4:	90 e0       	ldi	r25, 0x00	; 0
    44b6:	0e 94 e0 21 	call	0x43c0	; 0x43c0 <LCD_Display_Text>
	}

	write_buffer(buffer);
    44ba:	80 e0       	ldi	r24, 0x00	; 0
    44bc:	91 e0       	ldi	r25, 0x01	; 1
    44be:	0c 94 01 20 	jmp	0x4002	; 0x4002 <write_buffer>

000044c2 <get_raw_gyros>:
		gyroADC[i] *= (int8_t)pgm_read_byte(&Gyro_Pol[Config.Orientation][i]);
	}
}

void get_raw_gyros(void)
{
    44c2:	cf 93       	push	r28
    44c4:	df 93       	push	r29
    44c6:	cd b7       	in	r28, 0x3d	; 61
    44c8:	de b7       	in	r29, 0x3e	; 62
    44ca:	2c 97       	sbiw	r28, 0x0c	; 12
    44cc:	0f b6       	in	r0, 0x3f	; 63
    44ce:	f8 94       	cli
    44d0:	de bf       	out	0x3e, r29	; 62
    44d2:	0f be       	out	0x3f, r0	; 63
    44d4:	cd bf       	out	0x3d, r28	; 61
	uint8_t i;
	uint8_t Gyros[6];
	int16_t temp1, temp2;

	// Get the i2c data from the MPU6050
	readI2CbyteArray(MPU60X0_DEFAULT_ADDRESS,MPU60X0_RA_GYRO_XOUT_H,(uint8_t *)Gyros,6);
    44d6:	26 e0       	ldi	r18, 0x06	; 6
    44d8:	ae 01       	movw	r20, r28
    44da:	4f 5f       	subi	r20, 0xFF	; 255
    44dc:	5f 4f       	sbci	r21, 0xFF	; 255
    44de:	63 e4       	ldi	r22, 0x43	; 67
    44e0:	80 ed       	ldi	r24, 0xD0	; 208
    44e2:	0e 94 55 24 	call	0x48aa	; 0x48aa <readI2CbyteArray>

	// Reassemble data into gyroADC array and down-sample to reduce resolution and noise
	temp1 = Gyros[0] << 8;
    44e6:	89 81       	ldd	r24, Y+1	; 0x01
    44e8:	90 e0       	ldi	r25, 0x00	; 0
    44ea:	98 2f       	mov	r25, r24
    44ec:	88 27       	eor	r24, r24
	temp2 = Gyros[1];
    44ee:	2a 81       	ldd	r18, Y+2	; 0x02
	RawADC[PITCH] = (temp1 + temp2) >> GYRODIV;
    44f0:	82 0f       	add	r24, r18
    44f2:	91 1d       	adc	r25, r1
    44f4:	34 e0       	ldi	r19, 0x04	; 4
    44f6:	95 95       	asr	r25
    44f8:	87 95       	ror	r24
    44fa:	3a 95       	dec	r19
    44fc:	e1 f7       	brne	.-8      	; 0x44f6 <get_raw_gyros+0x34>
    44fe:	9a 87       	std	Y+10, r25	; 0x0a
    4500:	89 87       	std	Y+9, r24	; 0x09

	temp1 = Gyros[2] << 8;
    4502:	8b 81       	ldd	r24, Y+3	; 0x03
    4504:	90 e0       	ldi	r25, 0x00	; 0
    4506:	98 2f       	mov	r25, r24
    4508:	88 27       	eor	r24, r24
	temp2 = Gyros[3];
    450a:	2c 81       	ldd	r18, Y+4	; 0x04
	RawADC[ROLL] = (temp1 + temp2) >> GYRODIV;
    450c:	82 0f       	add	r24, r18
    450e:	91 1d       	adc	r25, r1
    4510:	54 e0       	ldi	r21, 0x04	; 4
    4512:	95 95       	asr	r25
    4514:	87 95       	ror	r24
    4516:	5a 95       	dec	r21
    4518:	e1 f7       	brne	.-8      	; 0x4512 <get_raw_gyros+0x50>
    451a:	98 87       	std	Y+8, r25	; 0x08
    451c:	8f 83       	std	Y+7, r24	; 0x07

	temp1 = Gyros[4] << 8;
    451e:	8d 81       	ldd	r24, Y+5	; 0x05
    4520:	90 e0       	ldi	r25, 0x00	; 0
    4522:	98 2f       	mov	r25, r24
    4524:	88 27       	eor	r24, r24
	temp2 = Gyros[5];
    4526:	2e 81       	ldd	r18, Y+6	; 0x06
	RawADC[YAW] = (temp1 + temp2) >> GYRODIV;
    4528:	82 0f       	add	r24, r18
    452a:	91 1d       	adc	r25, r1
    452c:	74 e0       	ldi	r23, 0x04	; 4
    452e:	95 95       	asr	r25
    4530:	87 95       	ror	r24
    4532:	7a 95       	dec	r23
    4534:	e1 f7       	brne	.-8      	; 0x452e <get_raw_gyros+0x6c>
    4536:	9c 87       	std	Y+12, r25	; 0x0c
    4538:	8b 87       	std	Y+11, r24	; 0x0b

	// Reorient the data as per the board orientation	
	for (i=0; i<NUMBEROFAXIS; i++)
	{
		// Rearrange the sensors
		gyroADC[i] 	= RawADC[(int8_t)pgm_read_byte(&Gyro_RPY_Order[Config.Orientation][i])];
    453a:	20 91 29 06 	lds	r18, 0x0629
    453e:	a3 e6       	ldi	r26, 0x63	; 99
    4540:	b5 e0       	ldi	r27, 0x05	; 5
    4542:	43 e0       	ldi	r20, 0x03	; 3
    4544:	24 02       	muls	r18, r20
    4546:	90 01       	movw	r18, r0
    4548:	11 24       	eor	r1, r1
    454a:	80 e0       	ldi	r24, 0x00	; 0
    454c:	90 e0       	ldi	r25, 0x00	; 0
    454e:	27 53       	subi	r18, 0x37	; 55
    4550:	38 4e       	sbci	r19, 0xE8	; 232
    4552:	f9 01       	movw	r30, r18
    4554:	e8 0f       	add	r30, r24
    4556:	f9 1f       	adc	r31, r25
    4558:	e4 91       	lpm	r30, Z
    455a:	ee 0f       	add	r30, r30
    455c:	ff 0b       	sbc	r31, r31
    455e:	41 e0       	ldi	r20, 0x01	; 1
    4560:	50 e0       	ldi	r21, 0x00	; 0
    4562:	4c 0f       	add	r20, r28
    4564:	5d 1f       	adc	r21, r29
    4566:	e4 0f       	add	r30, r20
    4568:	f5 1f       	adc	r31, r21
    456a:	46 81       	ldd	r20, Z+6	; 0x06
    456c:	57 81       	ldd	r21, Z+7	; 0x07
    456e:	4d 93       	st	X+, r20
    4570:	5d 93       	st	X+, r21
    4572:	01 96       	adiw	r24, 0x01	; 1
	temp1 = Gyros[4] << 8;
	temp2 = Gyros[5];
	RawADC[YAW] = (temp1 + temp2) >> GYRODIV;

	// Reorient the data as per the board orientation	
	for (i=0; i<NUMBEROFAXIS; i++)
    4574:	83 30       	cpi	r24, 0x03	; 3
    4576:	91 05       	cpc	r25, r1
    4578:	61 f7       	brne	.-40     	; 0x4552 <get_raw_gyros+0x90>
	{
		// Rearrange the sensors
		gyroADC[i] 	= RawADC[(int8_t)pgm_read_byte(&Gyro_RPY_Order[Config.Orientation][i])];
	}
}
    457a:	2c 96       	adiw	r28, 0x0c	; 12
    457c:	0f b6       	in	r0, 0x3f	; 63
    457e:	f8 94       	cli
    4580:	de bf       	out	0x3e, r29	; 62
    4582:	0f be       	out	0x3f, r0	; 63
    4584:	cd bf       	out	0x3d, r28	; 61
    4586:	df 91       	pop	r29
    4588:	cf 91       	pop	r28
    458a:	08 95       	ret

0000458c <ReadGyros>:
//************************************************************

int16_t gyroADC[NUMBEROFAXIS];			// Holds Gyro ADCs

void ReadGyros(void)					// Conventional orientation
{
    458c:	1f 93       	push	r17
    458e:	cf 93       	push	r28
    4590:	df 93       	push	r29
	uint8_t i;

	get_raw_gyros();					// Updates gyroADC[]
    4592:	0e 94 61 22 	call	0x44c2	; 0x44c2 <get_raw_gyros>
	{
		// Remove offsets from gyro outputs
		gyroADC[i] -= Config.gyroZero[i];

		// Change polarity
		gyroADC[i] *= (int8_t)pgm_read_byte(&Gyro_Pol[Config.Orientation][i]);
    4596:	20 91 29 06 	lds	r18, 0x0629
    459a:	c7 e9       	ldi	r28, 0x97	; 151
    459c:	d7 e0       	ldi	r29, 0x07	; 7
    459e:	a3 e6       	ldi	r26, 0x63	; 99
    45a0:	b5 e0       	ldi	r27, 0x05	; 5
    45a2:	83 e0       	ldi	r24, 0x03	; 3
    45a4:	28 02       	muls	r18, r24
    45a6:	90 01       	movw	r18, r0
    45a8:	11 24       	eor	r1, r1
    45aa:	80 e0       	ldi	r24, 0x00	; 0
    45ac:	90 e0       	ldi	r25, 0x00	; 0
    45ae:	29 54       	subi	r18, 0x49	; 73
    45b0:	38 4e       	sbci	r19, 0xE8	; 232
	get_raw_gyros();					// Updates gyroADC[]

	for (i=0; i<NUMBEROFAXIS; i++)	
	{
		// Remove offsets from gyro outputs
		gyroADC[i] -= Config.gyroZero[i];
    45b2:	69 91       	ld	r22, Y+
    45b4:	79 91       	ld	r23, Y+
    45b6:	f9 01       	movw	r30, r18
    45b8:	e8 0f       	add	r30, r24
    45ba:	f9 1f       	adc	r31, r25

		// Change polarity
		gyroADC[i] *= (int8_t)pgm_read_byte(&Gyro_Pol[Config.Orientation][i]);
    45bc:	14 91       	lpm	r17, Z
	get_raw_gyros();					// Updates gyroADC[]

	for (i=0; i<NUMBEROFAXIS; i++)	
	{
		// Remove offsets from gyro outputs
		gyroADC[i] -= Config.gyroZero[i];
    45be:	4d 91       	ld	r20, X+
    45c0:	5c 91       	ld	r21, X
    45c2:	11 97       	sbiw	r26, 0x01	; 1
    45c4:	46 1b       	sub	r20, r22
    45c6:	57 0b       	sbc	r21, r23

		// Change polarity
		gyroADC[i] *= (int8_t)pgm_read_byte(&Gyro_Pol[Config.Orientation][i]);
    45c8:	14 03       	mulsu	r17, r20
    45ca:	b0 01       	movw	r22, r0
    45cc:	15 9f       	mul	r17, r21
    45ce:	70 0d       	add	r23, r0
    45d0:	11 24       	eor	r1, r1
    45d2:	6d 93       	st	X+, r22
    45d4:	7d 93       	st	X+, r23
    45d6:	01 96       	adiw	r24, 0x01	; 1
{
	uint8_t i;

	get_raw_gyros();					// Updates gyroADC[]

	for (i=0; i<NUMBEROFAXIS; i++)	
    45d8:	83 30       	cpi	r24, 0x03	; 3
    45da:	91 05       	cpc	r25, r1
    45dc:	51 f7       	brne	.-44     	; 0x45b2 <ReadGyros+0x26>
		gyroADC[i] -= Config.gyroZero[i];

		// Change polarity
		gyroADC[i] *= (int8_t)pgm_read_byte(&Gyro_Pol[Config.Orientation][i]);
	}
}
    45de:	df 91       	pop	r29
    45e0:	cf 91       	pop	r28
    45e2:	1f 91       	pop	r17
    45e4:	08 95       	ret

000045e6 <CalibrateGyrosFast>:
//***************************************************************
// Calibration routines
//***************************************************************

void CalibrateGyrosFast(void)
{
    45e6:	cf 93       	push	r28
	uint8_t i;

	// Clear gyro zeros
	memset(&Config.gyroZero[ROLL],0,(sizeof(int16_t) * NUMBEROFAXIS));
    45e8:	86 e0       	ldi	r24, 0x06	; 6
    45ea:	e7 e9       	ldi	r30, 0x97	; 151
    45ec:	f7 e0       	ldi	r31, 0x07	; 7
    45ee:	df 01       	movw	r26, r30
    45f0:	1d 92       	st	X+, r1
    45f2:	8a 95       	dec	r24
    45f4:	e9 f7       	brne	.-6      	; 0x45f0 <CalibrateGyrosFast+0xa>
    45f6:	c0 e2       	ldi	r28, 0x20	; 32

	// Calculate average over 32 reads
	for (i=0; i<32; i++)
	{
		get_raw_gyros();				// Updates gyroADC[]
    45f8:	0e 94 61 22 	call	0x44c2	; 0x44c2 <get_raw_gyros>

		Config.gyroZero[ROLL] 	+= gyroADC[ROLL];						
    45fc:	40 91 97 07 	lds	r20, 0x0797
    4600:	50 91 98 07 	lds	r21, 0x0798
    4604:	80 91 63 05 	lds	r24, 0x0563
    4608:	90 91 64 05 	lds	r25, 0x0564
    460c:	48 0f       	add	r20, r24
    460e:	59 1f       	adc	r21, r25
    4610:	50 93 98 07 	sts	0x0798, r21
    4614:	40 93 97 07 	sts	0x0797, r20
		Config.gyroZero[PITCH] 	+= gyroADC[PITCH];	
    4618:	20 91 99 07 	lds	r18, 0x0799
    461c:	30 91 9a 07 	lds	r19, 0x079A
    4620:	80 91 65 05 	lds	r24, 0x0565
    4624:	90 91 66 05 	lds	r25, 0x0566
    4628:	28 0f       	add	r18, r24
    462a:	39 1f       	adc	r19, r25
    462c:	30 93 9a 07 	sts	0x079A, r19
    4630:	20 93 99 07 	sts	0x0799, r18
		Config.gyroZero[YAW] 	+= gyroADC[YAW];
    4634:	80 91 9b 07 	lds	r24, 0x079B
    4638:	90 91 9c 07 	lds	r25, 0x079C
    463c:	60 91 67 05 	lds	r22, 0x0567
    4640:	70 91 68 05 	lds	r23, 0x0568
    4644:	86 0f       	add	r24, r22
    4646:	97 1f       	adc	r25, r23
    4648:	90 93 9c 07 	sts	0x079C, r25
    464c:	80 93 9b 07 	sts	0x079B, r24
    4650:	c1 50       	subi	r28, 0x01	; 1

	// Clear gyro zeros
	memset(&Config.gyroZero[ROLL],0,(sizeof(int16_t) * NUMBEROFAXIS));

	// Calculate average over 32 reads
	for (i=0; i<32; i++)
    4652:	91 f6       	brne	.-92     	; 0x45f8 <CalibrateGyrosFast+0x12>
	}

	// Average readings for all axis
	for (i=0; i<NUMBEROFAXIS; i++)
	{
		Config.gyroZero[i] 	= (Config.gyroZero[i] >> 5);	// Divide by 32	
    4654:	e5 e0       	ldi	r30, 0x05	; 5
    4656:	55 95       	asr	r21
    4658:	47 95       	ror	r20
    465a:	ea 95       	dec	r30
    465c:	e1 f7       	brne	.-8      	; 0x4656 <CalibrateGyrosFast+0x70>
    465e:	50 93 98 07 	sts	0x0798, r21
    4662:	40 93 97 07 	sts	0x0797, r20
    4666:	f5 e0       	ldi	r31, 0x05	; 5
    4668:	35 95       	asr	r19
    466a:	27 95       	ror	r18
    466c:	fa 95       	dec	r31
    466e:	e1 f7       	brne	.-8      	; 0x4668 <CalibrateGyrosFast+0x82>
    4670:	30 93 9a 07 	sts	0x079A, r19
    4674:	20 93 99 07 	sts	0x0799, r18
    4678:	a5 e0       	ldi	r26, 0x05	; 5
    467a:	95 95       	asr	r25
    467c:	87 95       	ror	r24
    467e:	aa 95       	dec	r26
    4680:	e1 f7       	brne	.-8      	; 0x467a <CalibrateGyrosFast+0x94>
    4682:	90 93 9c 07 	sts	0x079C, r25
    4686:	80 93 9b 07 	sts	0x079B, r24
	}

	Save_Config_to_EEPROM();
}
    468a:	cf 91       	pop	r28
	for (i=0; i<NUMBEROFAXIS; i++)
	{
		Config.gyroZero[i] 	= (Config.gyroZero[i] >> 5);	// Divide by 32	
	}

	Save_Config_to_EEPROM();
    468c:	0c 94 88 16 	jmp	0x2d10	; 0x2d10 <Save_Config_to_EEPROM>

00004690 <CalibrateGyrosSlow>:
}

bool CalibrateGyrosSlow(void)
{
    4690:	2f 92       	push	r2
    4692:	3f 92       	push	r3
    4694:	4f 92       	push	r4
    4696:	5f 92       	push	r5
    4698:	6f 92       	push	r6
    469a:	7f 92       	push	r7
    469c:	8f 92       	push	r8
    469e:	9f 92       	push	r9
    46a0:	af 92       	push	r10
    46a2:	bf 92       	push	r11
    46a4:	cf 92       	push	r12
    46a6:	df 92       	push	r13
    46a8:	ef 92       	push	r14
    46aa:	ff 92       	push	r15
    46ac:	0f 93       	push	r16
    46ae:	1f 93       	push	r17
    46b0:	cf 93       	push	r28
    46b2:	df 93       	push	r29
    46b4:	cd b7       	in	r28, 0x3d	; 61
    46b6:	de b7       	in	r29, 0x3e	; 62
    46b8:	65 97       	sbiw	r28, 0x15	; 21
    46ba:	0f b6       	in	r0, 0x3f	; 63
    46bc:	f8 94       	cli
    46be:	de bf       	out	0x3e, r29	; 62
    46c0:	0f be       	out	0x3f, r0	; 63
    46c2:	cd bf       	out	0x3d, r28	; 61
	float 		GyroSmooth[NUMBEROFAXIS];
	int16_t		GyroOld[NUMBEROFAXIS] = {0,0,0};
    46c4:	1e 86       	std	Y+14, r1	; 0x0e
    46c6:	1d 86       	std	Y+13, r1	; 0x0d
    46c8:	18 8a       	std	Y+16, r1	; 0x10
    46ca:	1f 86       	std	Y+15, r1	; 0x0f
    46cc:	1a 8a       	std	Y+18, r1	; 0x12
    46ce:	19 8a       	std	Y+17, r1	; 0x11
	uint8_t		Gyro_TCNT2 = 0;
	bool		Gyros_Stable = false;

	// Populate Config.gyroZero[] with ballpark figures
	// This makes slow calibrate on much faster
	CalibrateGyrosFast();	
    46d0:	0e 94 f3 22 	call	0x45e6	; 0x45e6 <CalibrateGyrosFast>
	
	// Optimise starting point for each board
	for (axis = 0; axis < NUMBEROFAXIS; axis++)
	{
		GyroSmooth[axis] = Config.gyroZero[axis];			
    46d4:	60 91 97 07 	lds	r22, 0x0797
    46d8:	70 91 98 07 	lds	r23, 0x0798
    46dc:	88 27       	eor	r24, r24
    46de:	77 fd       	sbrc	r23, 7
    46e0:	80 95       	com	r24
    46e2:	98 2f       	mov	r25, r24
    46e4:	0e 94 e7 46 	call	0x8dce	; 0x8dce <__floatsisf>
    46e8:	69 83       	std	Y+1, r22	; 0x01
    46ea:	7a 83       	std	Y+2, r23	; 0x02
    46ec:	8b 83       	std	Y+3, r24	; 0x03
    46ee:	9c 83       	std	Y+4, r25	; 0x04
    46f0:	60 91 99 07 	lds	r22, 0x0799
    46f4:	70 91 9a 07 	lds	r23, 0x079A
    46f8:	88 27       	eor	r24, r24
    46fa:	77 fd       	sbrc	r23, 7
    46fc:	80 95       	com	r24
    46fe:	98 2f       	mov	r25, r24
    4700:	0e 94 e7 46 	call	0x8dce	; 0x8dce <__floatsisf>
    4704:	6d 83       	std	Y+5, r22	; 0x05
    4706:	7e 83       	std	Y+6, r23	; 0x06
    4708:	8f 83       	std	Y+7, r24	; 0x07
    470a:	98 87       	std	Y+8, r25	; 0x08
    470c:	60 91 9b 07 	lds	r22, 0x079B
    4710:	70 91 9c 07 	lds	r23, 0x079C
    4714:	88 27       	eor	r24, r24
    4716:	77 fd       	sbrc	r23, 7
    4718:	80 95       	com	r24
    471a:	98 2f       	mov	r25, r24
    471c:	0e 94 e7 46 	call	0x8dce	; 0x8dce <__floatsisf>
    4720:	69 87       	std	Y+9, r22	; 0x09
    4722:	7a 87       	std	Y+10, r23	; 0x0a
    4724:	8b 87       	std	Y+11, r24	; 0x0b
    4726:	9c 87       	std	Y+12, r25	; 0x0c
    4728:	1d 8a       	std	Y+21, r1	; 0x15
    472a:	1b 8a       	std	Y+19, r1	; 0x13
    472c:	e1 2c       	mov	r14, r1
    472e:	f1 2c       	mov	r15, r1
    4730:	00 e0       	ldi	r16, 0x00	; 0
    4732:	10 e0       	ldi	r17, 0x00	; 0
	
	// Wait until gyros stable. Timeout after CAL_TIMEOUT seconds
	while (!Gyros_Stable && ((Gyro_seconds <= CAL_TIMEOUT)))
	{
		// Update status timeout
		Gyro_timeout += (uint8_t)(TCNT2 - Gyro_TCNT2);
    4734:	80 91 b2 00 	lds	r24, 0x00B2
    4738:	9d 89       	ldd	r25, Y+21	; 0x15
    473a:	89 1b       	sub	r24, r25
    473c:	e8 0e       	add	r14, r24
    473e:	f1 1c       	adc	r15, r1
		Gyro_TCNT2 = TCNT2;
    4740:	e0 91 b2 00 	lds	r30, 0x00B2
    4744:	ed 8b       	std	Y+21, r30	; 0x15

		// Count elapsed seconds
		if (Gyro_timeout > SECOND_TIMER)
    4746:	fc e4       	ldi	r31, 0x4C	; 76
    4748:	ef 16       	cp	r14, r31
    474a:	ff 06       	cpc	r15, r31
    474c:	28 f0       	brcs	.+10     	; 0x4758 <CalibrateGyrosSlow+0xc8>
		{
			Gyro_seconds++;
    474e:	8b 89       	ldd	r24, Y+19	; 0x13
    4750:	8f 5f       	subi	r24, 0xFF	; 255
    4752:	8b 8b       	std	Y+19, r24	; 0x13
			Gyro_timeout = 0;
    4754:	e1 2c       	mov	r14, r1
    4756:	f1 2c       	mov	r15, r1
		}

		get_raw_gyros();
    4758:	0e 94 61 22 	call	0x44c2	; 0x44c2 <get_raw_gyros>
    475c:	fe 01       	movw	r30, r28
    475e:	31 96       	adiw	r30, 0x01	; 1
    4760:	6f 01       	movw	r12, r30
    4762:	b3 e6       	ldi	r27, 0x63	; 99
    4764:	2b 2e       	mov	r2, r27
    4766:	b5 e0       	ldi	r27, 0x05	; 5
    4768:	3b 2e       	mov	r3, r27
    476a:	ce 01       	movw	r24, r28
    476c:	0d 96       	adiw	r24, 0x0d	; 13
    476e:	5c 01       	movw	r10, r24

		// Calculate very long rolling average
		for (axis = 0; axis < NUMBEROFAXIS; axis++) 
    4770:	1c 8a       	std	Y+20, r1	; 0x14
		{
			GyroSmooth[axis] = ((GyroSmooth[axis] * (float)999) + (float)(gyroADC[axis])) / (float)1000;
    4772:	f1 01       	movw	r30, r2
    4774:	81 90       	ld	r8, Z+
    4776:	91 90       	ld	r9, Z+
    4778:	1f 01       	movw	r2, r30
    477a:	20 e0       	ldi	r18, 0x00	; 0
    477c:	30 ec       	ldi	r19, 0xC0	; 192
    477e:	49 e7       	ldi	r20, 0x79	; 121
    4780:	54 e4       	ldi	r21, 0x44	; 68
    4782:	f6 01       	movw	r30, r12
    4784:	60 81       	ld	r22, Z
    4786:	71 81       	ldd	r23, Z+1	; 0x01
    4788:	82 81       	ldd	r24, Z+2	; 0x02
    478a:	93 81       	ldd	r25, Z+3	; 0x03
    478c:	0e 94 9b 47 	call	0x8f36	; 0x8f36 <__mulsf3>
    4790:	2b 01       	movw	r4, r22
    4792:	3c 01       	movw	r6, r24
    4794:	b4 01       	movw	r22, r8
    4796:	88 27       	eor	r24, r24
    4798:	77 fd       	sbrc	r23, 7
    479a:	80 95       	com	r24
    479c:	98 2f       	mov	r25, r24
    479e:	0e 94 e7 46 	call	0x8dce	; 0x8dce <__floatsisf>
    47a2:	9b 01       	movw	r18, r22
    47a4:	ac 01       	movw	r20, r24
    47a6:	c3 01       	movw	r24, r6
    47a8:	b2 01       	movw	r22, r4
    47aa:	0e 94 e4 45 	call	0x8bc8	; 0x8bc8 <__addsf3>
    47ae:	20 e0       	ldi	r18, 0x00	; 0
    47b0:	30 e0       	ldi	r19, 0x00	; 0
    47b2:	4a e7       	ldi	r20, 0x7A	; 122
    47b4:	54 e4       	ldi	r21, 0x44	; 68
    47b6:	0e 94 4c 46 	call	0x8c98	; 0x8c98 <__divsf3>
    47ba:	f6 01       	movw	r30, r12
    47bc:	60 83       	st	Z, r22
    47be:	71 83       	std	Z+1, r23	; 0x01
    47c0:	82 83       	std	Z+2, r24	; 0x02
    47c2:	93 83       	std	Z+3, r25	; 0x03
			
			// See if changing
			if (GyroOld[axis] != (int16_t)GyroSmooth[axis])
    47c4:	0e 94 b4 46 	call	0x8d68	; 0x8d68 <__fixsfsi>
    47c8:	f5 01       	movw	r30, r10
    47ca:	20 81       	ld	r18, Z
    47cc:	31 81       	ldd	r19, Z+1	; 0x01
    47ce:	26 17       	cp	r18, r22
    47d0:	37 07       	cpc	r19, r23
    47d2:	11 f0       	breq	.+4      	; 0x47d8 <CalibrateGyrosSlow+0x148>
			{
				Gyros_Stable = false;
				Stable_counter = 0;
    47d4:	00 e0       	ldi	r16, 0x00	; 0
    47d6:	10 e0       	ldi	r17, 0x00	; 0
			}
		
			// Save old reading
			GyroOld[axis] = (int16_t)GyroSmooth[axis];
    47d8:	f5 01       	movw	r30, r10
    47da:	61 93       	st	Z+, r22
    47dc:	71 93       	st	Z+, r23
    47de:	5f 01       	movw	r10, r30
		}

		get_raw_gyros();

		// Calculate very long rolling average
		for (axis = 0; axis < NUMBEROFAXIS; axis++) 
    47e0:	fc 89       	ldd	r31, Y+20	; 0x14
    47e2:	ff 5f       	subi	r31, 0xFF	; 255
    47e4:	fc 8b       	std	Y+20, r31	; 0x14
    47e6:	84 e0       	ldi	r24, 0x04	; 4
    47e8:	c8 0e       	add	r12, r24
    47ea:	d1 1c       	adc	r13, r1
    47ec:	f3 30       	cpi	r31, 0x03	; 3
    47ee:	09 f6       	brne	.-126    	; 0x4772 <CalibrateGyrosSlow+0xe2>
			// Save old reading
			GyroOld[axis] = (int16_t)GyroSmooth[axis];
		}
		
		// Increment stable counter to measure how long we are still
		Stable_counter++;
    47f0:	0f 5f       	subi	r16, 0xFF	; 255
    47f2:	1f 4f       	sbci	r17, 0xFF	; 255
		
		// If stable for 5 seconds, do a quick calibrate
		if (Stable_counter > CAL_STABLE_TIME)
    47f4:	09 3c       	cpi	r16, 0xC9	; 201
    47f6:	11 05       	cpc	r17, r1
    47f8:	20 f0       	brcs	.+8      	; 0x4802 <CalibrateGyrosSlow+0x172>
		{
			Gyros_Stable = true;	
			CalibrateGyrosFast();		
    47fa:	0e 94 f3 22 	call	0x45e6	; 0x45e6 <CalibrateGyrosFast>
		Stable_counter++;
		
		// If stable for 5 seconds, do a quick calibrate
		if (Stable_counter > CAL_STABLE_TIME)
		{
			Gyros_Stable = true;	
    47fe:	81 e0       	ldi	r24, 0x01	; 1
    4800:	01 c0       	rjmp	.+2      	; 0x4804 <CalibrateGyrosSlow+0x174>
    4802:	80 e0       	ldi	r24, 0x00	; 0
    4804:	e7 e8       	ldi	r30, 0x87	; 135
    4806:	f3 e1       	ldi	r31, 0x13	; 19
    4808:	31 97       	sbiw	r30, 0x01	; 1
    480a:	f1 f7       	brne	.-4      	; 0x4808 <CalibrateGyrosSlow+0x178>
    480c:	00 c0       	rjmp	.+0      	; 0x480e <CalibrateGyrosSlow+0x17e>
    480e:	00 00       	nop
	{
		GyroSmooth[axis] = Config.gyroZero[axis];			
	}
	
	// Wait until gyros stable. Timeout after CAL_TIMEOUT seconds
	while (!Gyros_Stable && ((Gyro_seconds <= CAL_TIMEOUT)))
    4810:	81 11       	cpse	r24, r1
    4812:	04 c0       	rjmp	.+8      	; 0x481c <CalibrateGyrosSlow+0x18c>
    4814:	fb 89       	ldd	r31, Y+19	; 0x13
    4816:	f6 30       	cpi	r31, 0x06	; 6
    4818:	08 f4       	brcc	.+2      	; 0x481c <CalibrateGyrosSlow+0x18c>
    481a:	8c cf       	rjmp	.-232    	; 0x4734 <CalibrateGyrosSlow+0xa4>
		// Otherwise the original saved values are used
	}
	
	// Return success or failure
	return(Gyros_Stable);
}
    481c:	65 96       	adiw	r28, 0x15	; 21
    481e:	0f b6       	in	r0, 0x3f	; 63
    4820:	f8 94       	cli
    4822:	de bf       	out	0x3e, r29	; 62
    4824:	0f be       	out	0x3f, r0	; 63
    4826:	cd bf       	out	0x3d, r28	; 61
    4828:	df 91       	pop	r29
    482a:	cf 91       	pop	r28
    482c:	1f 91       	pop	r17
    482e:	0f 91       	pop	r16
    4830:	ff 90       	pop	r15
    4832:	ef 90       	pop	r14
    4834:	df 90       	pop	r13
    4836:	cf 90       	pop	r12
    4838:	bf 90       	pop	r11
    483a:	af 90       	pop	r10
    483c:	9f 90       	pop	r9
    483e:	8f 90       	pop	r8
    4840:	7f 90       	pop	r7
    4842:	6f 90       	pop	r6
    4844:	5f 90       	pop	r5
    4846:	4f 90       	pop	r4
    4848:	3f 90       	pop	r3
    484a:	2f 90       	pop	r2
    484c:	08 95       	ret

0000484e <init_i2c_gyros>:
//***************************************************************

void init_i2c_gyros(void)
{
	// First, configure the MPU6050
	writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_PWR_MGMT_1, 0x01); 			// Gyro X clock, awake
    484e:	41 e0       	ldi	r20, 0x01	; 1
    4850:	6b e6       	ldi	r22, 0x6B	; 107
    4852:	80 ed       	ldi	r24, 0xD0	; 208
    4854:	0e 94 3e 24 	call	0x487c	; 0x487c <writeI2Cbyte>
	
	// Make INT pin open-drain so that we can connect it straight to the MPU
	writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_INT_PIN_CFG, 0x40);			// INT output is open-drain
    4858:	40 e4       	ldi	r20, 0x40	; 64
    485a:	67 e3       	ldi	r22, 0x37	; 55
    485c:	80 ed       	ldi	r24, 0xD0	; 208
    485e:	0e 94 3e 24 	call	0x487c	; 0x487c <writeI2Cbyte>
	
	// MPU6050's internal LPF. Values are 0x06 = 5Hz, (5)10Hz, (4)21Hz, (3)44Hz, (2)94Hz, (1)184Hz LPF, (0)260Hz
	// Software's values are 0 to 6 = 5Hz to 260Hz, so numbering is reversed here.
	writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_CONFIG, (6 - Config.MPU6050_LPF));
    4862:	46 e0       	ldi	r20, 0x06	; 6
    4864:	80 91 2e 06 	lds	r24, 0x062E
    4868:	48 1b       	sub	r20, r24
    486a:	6a e1       	ldi	r22, 0x1A	; 26
    486c:	80 ed       	ldi	r24, 0xD0	; 208
    486e:	0e 94 3e 24 	call	0x487c	; 0x487c <writeI2Cbyte>
	
	// Now configure gyros
	writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_GYRO_CONFIG, GYROFS2000DEG);	// 2000 deg/sec
    4872:	48 e1       	ldi	r20, 0x18	; 24
    4874:	6b e1       	ldi	r22, 0x1B	; 27
    4876:	80 ed       	ldi	r24, 0xD0	; 208
    4878:	0c 94 3e 24 	jmp	0x487c	; 0x487c <writeI2Cbyte>

0000487c <writeI2Cbyte>:
//************************************************************
// Code
//************************************************************

void writeI2Cbyte(uint8_t address, uint8_t location, uint8_t value)
{
    487c:	cf 93       	push	r28
    487e:	df 93       	push	r29
    4880:	00 d0       	rcall	.+0      	; 0x4882 <writeI2Cbyte+0x6>
    4882:	cd b7       	in	r28, 0x3d	; 61
    4884:	de b7       	in	r29, 0x3e	; 62
    i2c_start_wait(address+I2C_WRITE);				// Set up device address 
    4886:	4a 83       	std	Y+2, r20	; 0x02
    4888:	69 83       	std	Y+1, r22	; 0x01
    488a:	0e 94 c2 44 	call	0x8984	; 0x8984 <i2c_start_wait>
    i2c_write(location);							// Set up register address 
    488e:	69 81       	ldd	r22, Y+1	; 0x01
    4890:	86 2f       	mov	r24, r22
    4892:	0e 94 12 45 	call	0x8a24	; 0x8a24 <i2c_write>
    i2c_write(value); 								// Write byte
    4896:	4a 81       	ldd	r20, Y+2	; 0x02
    4898:	84 2f       	mov	r24, r20
    489a:	0e 94 12 45 	call	0x8a24	; 0x8a24 <i2c_write>
    i2c_stop();
}
    489e:	0f 90       	pop	r0
    48a0:	0f 90       	pop	r0
    48a2:	df 91       	pop	r29
    48a4:	cf 91       	pop	r28
void writeI2Cbyte(uint8_t address, uint8_t location, uint8_t value)
{
    i2c_start_wait(address+I2C_WRITE);				// Set up device address 
    i2c_write(location);							// Set up register address 
    i2c_write(value); 								// Write byte
    i2c_stop();
    48a6:	0c 94 03 45 	jmp	0x8a06	; 0x8a06 <i2c_stop>

000048aa <readI2CbyteArray>:
}

void readI2CbyteArray(uint8_t address, uint8_t location, uint8_t *array,uint8_t size)
{
    48aa:	cf 92       	push	r12
    48ac:	df 92       	push	r13
    48ae:	ef 92       	push	r14
    48b0:	ff 92       	push	r15
    48b2:	0f 93       	push	r16
    48b4:	1f 93       	push	r17
    48b6:	cf 93       	push	r28
    48b8:	df 93       	push	r29
    48ba:	00 d0       	rcall	.+0      	; 0x48bc <readI2CbyteArray+0x12>
    48bc:	1f 92       	push	r1
    48be:	cd b7       	in	r28, 0x3d	; 61
    48c0:	de b7       	in	r29, 0x3e	; 62
    48c2:	18 2f       	mov	r17, r24
    48c4:	e2 2e       	mov	r14, r18
	int i=0;

    i2c_start_wait(address+I2C_WRITE);
    48c6:	4a 83       	std	Y+2, r20	; 0x02
    48c8:	5b 83       	std	Y+3, r21	; 0x03
    48ca:	69 83       	std	Y+1, r22	; 0x01
    48cc:	0e 94 c2 44 	call	0x8984	; 0x8984 <i2c_start_wait>
    i2c_write(location);							// Set up register address 
    48d0:	69 81       	ldd	r22, Y+1	; 0x01
    48d2:	86 2f       	mov	r24, r22
    48d4:	0e 94 12 45 	call	0x8a24	; 0x8a24 <i2c_write>
    i2c_rep_start(address+I2C_READ);
    48d8:	81 e0       	ldi	r24, 0x01	; 1
    48da:	81 0f       	add	r24, r17
    48dc:	0e 94 01 45 	call	0x8a02	; 0x8a02 <i2c_rep_start>
    48e0:	4a 81       	ldd	r20, Y+2	; 0x02
    48e2:	c4 2e       	mov	r12, r20
    48e4:	5b 81       	ldd	r21, Y+3	; 0x03
    48e6:	d5 2e       	mov	r13, r21
    i2c_stop();
}

void readI2CbyteArray(uint8_t address, uint8_t location, uint8_t *array,uint8_t size)
{
	int i=0;
    48e8:	00 e0       	ldi	r16, 0x00	; 0
    48ea:	10 e0       	ldi	r17, 0x00	; 0

    i2c_start_wait(address+I2C_WRITE);
    i2c_write(location);							// Set up register address 
    i2c_rep_start(address+I2C_READ);

	while (i < size)
    48ec:	f1 2c       	mov	r15, r1
    48ee:	0e 15       	cp	r16, r14
    48f0:	1f 05       	cpc	r17, r15
    48f2:	84 f4       	brge	.+32     	; 0x4914 <readI2CbyteArray+0x6a>
	{
		if ((i+1)!=size)
    48f4:	0f 5f       	subi	r16, 0xFF	; 255
    48f6:	1f 4f       	sbci	r17, 0xFF	; 255
    48f8:	0e 15       	cp	r16, r14
    48fa:	1f 05       	cpc	r17, r15
    48fc:	19 f0       	breq	.+6      	; 0x4904 <readI2CbyteArray+0x5a>
		{
			array[i]=i2c_readAck();
    48fe:	0e 94 32 45 	call	0x8a64	; 0x8a64 <i2c_readAck>
    4902:	02 c0       	rjmp	.+4      	; 0x4908 <readI2CbyteArray+0x5e>
		}
		else
		{
			array[i]=i2c_readNak(); 				// Read without ACK on last byte
    4904:	0e 94 4b 45 	call	0x8a96	; 0x8a96 <i2c_readNak>
    4908:	f6 01       	movw	r30, r12
    490a:	80 83       	st	Z, r24
    490c:	ff ef       	ldi	r31, 0xFF	; 255
    490e:	cf 1a       	sub	r12, r31
    4910:	df 0a       	sbc	r13, r31
    4912:	ed cf       	rjmp	.-38     	; 0x48ee <readI2CbyteArray+0x44>
		}
		i++;
	}

    i2c_stop();
}
    4914:	0f 90       	pop	r0
    4916:	0f 90       	pop	r0
    4918:	0f 90       	pop	r0
    491a:	df 91       	pop	r29
    491c:	cf 91       	pop	r28
    491e:	1f 91       	pop	r17
    4920:	0f 91       	pop	r16
    4922:	ff 90       	pop	r15
    4924:	ef 90       	pop	r14
    4926:	df 90       	pop	r13
    4928:	cf 90       	pop	r12
			array[i]=i2c_readNak(); 				// Read without ACK on last byte
		}
		i++;
	}

    i2c_stop();
    492a:	0c 94 03 45 	jmp	0x8a06	; 0x8a06 <i2c_stop>

0000492e <RotateVector>:
	VectorX = VectorNewA;
	VectorY = VectorNewB;
}

void RotateVector(float angle)
{
    492e:	4f 92       	push	r4
    4930:	5f 92       	push	r5
    4932:	6f 92       	push	r6
    4934:	7f 92       	push	r7
    4936:	8f 92       	push	r8
    4938:	9f 92       	push	r9
    493a:	af 92       	push	r10
    493c:	bf 92       	push	r11
    493e:	cf 92       	push	r12
    4940:	df 92       	push	r13
    4942:	ef 92       	push	r14
    4944:	ff 92       	push	r15
    4946:	cf 93       	push	r28
    4948:	df 93       	push	r29
    494a:	cd b7       	in	r28, 0x3d	; 61
    494c:	de b7       	in	r29, 0x3e	; 62
    494e:	28 97       	sbiw	r28, 0x08	; 8
    4950:	0f b6       	in	r0, 0x3f	; 63
    4952:	f8 94       	cli
    4954:	de bf       	out	0x3e, r29	; 62
    4956:	0f be       	out	0x3f, r0	; 63
    4958:	cd bf       	out	0x3d, r28	; 61
    495a:	6b 01       	movw	r12, r22
    495c:	7c 01       	movw	r14, r24
	VectorNewA = VectorA * small_cos(angle) - VectorB * small_sine(angle);
    495e:	80 90 99 05 	lds	r8, 0x0599
    4962:	90 90 9a 05 	lds	r9, 0x059A
    4966:	a0 90 9b 05 	lds	r10, 0x059B
    496a:	b0 90 9c 05 	lds	r11, 0x059C
float small_cos(float angle)
{
	// cos(angle) = (1 - (angle^2 / 2))
	float temp;
	
	temp = (angle * angle) / 2;
    496e:	9b 01       	movw	r18, r22
    4970:	ac 01       	movw	r20, r24
    4972:	0e 94 9b 47 	call	0x8f36	; 0x8f36 <__mulsf3>
    4976:	20 e0       	ldi	r18, 0x00	; 0
    4978:	30 e0       	ldi	r19, 0x00	; 0
    497a:	40 e0       	ldi	r20, 0x00	; 0
    497c:	5f e3       	ldi	r21, 0x3F	; 63
    497e:	0e 94 9b 47 	call	0x8f36	; 0x8f36 <__mulsf3>
    4982:	9b 01       	movw	r18, r22
    4984:	ac 01       	movw	r20, r24
	temp = 1 - temp;
    4986:	60 e0       	ldi	r22, 0x00	; 0
    4988:	70 e0       	ldi	r23, 0x00	; 0
    498a:	80 e8       	ldi	r24, 0x80	; 128
    498c:	9f e3       	ldi	r25, 0x3F	; 63
    498e:	0e 94 e3 45 	call	0x8bc6	; 0x8bc6 <__subsf3>
    4992:	69 83       	std	Y+1, r22	; 0x01
    4994:	7a 83       	std	Y+2, r23	; 0x02
    4996:	8b 83       	std	Y+3, r24	; 0x03
    4998:	9c 83       	std	Y+4, r25	; 0x04
	VectorY = VectorNewB;
}

void RotateVector(float angle)
{
	VectorNewA = VectorA * small_cos(angle) - VectorB * small_sine(angle);
    499a:	40 90 9d 05 	lds	r4, 0x059D
    499e:	50 90 9e 05 	lds	r5, 0x059E
    49a2:	60 90 9f 05 	lds	r6, 0x059F
    49a6:	70 90 a0 05 	lds	r7, 0x05A0
    49aa:	9b 01       	movw	r18, r22
    49ac:	ac 01       	movw	r20, r24
    49ae:	c5 01       	movw	r24, r10
    49b0:	b4 01       	movw	r22, r8
    49b2:	0e 94 9b 47 	call	0x8f36	; 0x8f36 <__mulsf3>
    49b6:	6d 83       	std	Y+5, r22	; 0x05
    49b8:	7e 83       	std	Y+6, r23	; 0x06
    49ba:	8f 83       	std	Y+7, r24	; 0x07
    49bc:	98 87       	std	Y+8, r25	; 0x08
    49be:	a7 01       	movw	r20, r14
    49c0:	96 01       	movw	r18, r12
    49c2:	c3 01       	movw	r24, r6
    49c4:	b2 01       	movw	r22, r4
    49c6:	0e 94 9b 47 	call	0x8f36	; 0x8f36 <__mulsf3>
    49ca:	9b 01       	movw	r18, r22
    49cc:	ac 01       	movw	r20, r24
    49ce:	6d 81       	ldd	r22, Y+5	; 0x05
    49d0:	7e 81       	ldd	r23, Y+6	; 0x06
    49d2:	8f 81       	ldd	r24, Y+7	; 0x07
    49d4:	98 85       	ldd	r25, Y+8	; 0x08
    49d6:	0e 94 e3 45 	call	0x8bc6	; 0x8bc6 <__subsf3>
    49da:	60 93 85 05 	sts	0x0585, r22
    49de:	70 93 86 05 	sts	0x0586, r23
    49e2:	80 93 87 05 	sts	0x0587, r24
    49e6:	90 93 88 05 	sts	0x0588, r25
	VectorNewB = VectorA * small_sine(angle) + VectorB * small_cos(angle);
    49ea:	a7 01       	movw	r20, r14
    49ec:	96 01       	movw	r18, r12
    49ee:	c5 01       	movw	r24, r10
    49f0:	b4 01       	movw	r22, r8
    49f2:	0e 94 9b 47 	call	0x8f36	; 0x8f36 <__mulsf3>
    49f6:	6b 01       	movw	r12, r22
    49f8:	7c 01       	movw	r14, r24
    49fa:	29 81       	ldd	r18, Y+1	; 0x01
    49fc:	3a 81       	ldd	r19, Y+2	; 0x02
    49fe:	4b 81       	ldd	r20, Y+3	; 0x03
    4a00:	5c 81       	ldd	r21, Y+4	; 0x04
    4a02:	c3 01       	movw	r24, r6
    4a04:	b2 01       	movw	r22, r4
    4a06:	0e 94 9b 47 	call	0x8f36	; 0x8f36 <__mulsf3>
    4a0a:	9b 01       	movw	r18, r22
    4a0c:	ac 01       	movw	r20, r24
    4a0e:	c7 01       	movw	r24, r14
    4a10:	b6 01       	movw	r22, r12
    4a12:	0e 94 e4 45 	call	0x8bc8	; 0x8bc8 <__addsf3>
    4a16:	60 93 69 05 	sts	0x0569, r22
    4a1a:	70 93 6a 05 	sts	0x056A, r23
    4a1e:	80 93 6b 05 	sts	0x056B, r24
    4a22:	90 93 6c 05 	sts	0x056C, r25
}
    4a26:	28 96       	adiw	r28, 0x08	; 8
    4a28:	0f b6       	in	r0, 0x3f	; 63
    4a2a:	f8 94       	cli
    4a2c:	de bf       	out	0x3e, r29	; 62
    4a2e:	0f be       	out	0x3f, r0	; 63
    4a30:	cd bf       	out	0x3d, r28	; 61
    4a32:	df 91       	pop	r29
    4a34:	cf 91       	pop	r28
    4a36:	ff 90       	pop	r15
    4a38:	ef 90       	pop	r14
    4a3a:	df 90       	pop	r13
    4a3c:	cf 90       	pop	r12
    4a3e:	bf 90       	pop	r11
    4a40:	af 90       	pop	r10
    4a42:	9f 90       	pop	r9
    4a44:	8f 90       	pop	r8
    4a46:	7f 90       	pop	r7
    4a48:	6f 90       	pop	r6
    4a4a:	5f 90       	pop	r5
    4a4c:	4f 90       	pop	r4
    4a4e:	08 95       	ret

00004a50 <thetascale>:

float thetascale(float gyro, float intervalf)
{
    4a50:	cf 92       	push	r12
    4a52:	df 92       	push	r13
    4a54:	ef 92       	push	r14
    4a56:	ff 92       	push	r15
    4a58:	69 01       	movw	r12, r18
    4a5a:	7a 01       	movw	r14, r20
	
	// intervalf = time in seconds since last measurement
	// GYROSENSRADIANS = conversion from raw gyro data to rad/s
	// theta = actual number of radians moved

	theta = (gyro * GYROSENSRADIANS * intervalf);
    4a5c:	25 ef       	ldi	r18, 0xF5	; 245
    4a5e:	31 ea       	ldi	r19, 0xA1	; 161
    4a60:	4b e8       	ldi	r20, 0x8B	; 139
    4a62:	5c e3       	ldi	r21, 0x3C	; 60
    4a64:	0e 94 9b 47 	call	0x8f36	; 0x8f36 <__mulsf3>
    4a68:	a7 01       	movw	r20, r14
    4a6a:	96 01       	movw	r18, r12
    4a6c:	0e 94 9b 47 	call	0x8f36	; 0x8f36 <__mulsf3>
    4a70:	6b 01       	movw	r12, r22
    4a72:	7c 01       	movw	r14, r24
	
	// The sin() and cos() functions don't appreciate large 
	// input values. Limit the input values to +/-15 degrees. 
	
	if (theta > maxdeltaangle)
    4a74:	26 ea       	ldi	r18, 0xA6	; 166
    4a76:	3a e0       	ldi	r19, 0x0A	; 10
    4a78:	46 e8       	ldi	r20, 0x86	; 134
    4a7a:	5e e3       	ldi	r21, 0x3E	; 62
    4a7c:	0e 94 97 47 	call	0x8f2e	; 0x8f2e <__gesf2>
    4a80:	18 16       	cp	r1, r24
    4a82:	9c f0       	brlt	.+38     	; 0x4aaa <thetascale+0x5a>
	{
		theta = maxdeltaangle;
	}
	
	if (theta < -maxdeltaangle)
    4a84:	26 ea       	ldi	r18, 0xA6	; 166
    4a86:	3a e0       	ldi	r19, 0x0A	; 10
    4a88:	46 e8       	ldi	r20, 0x86	; 134
    4a8a:	5e eb       	ldi	r21, 0xBE	; 190
    4a8c:	c7 01       	movw	r24, r14
    4a8e:	b6 01       	movw	r22, r12
    4a90:	0e 94 48 46 	call	0x8c90	; 0x8c90 <__cmpsf2>
    4a94:	87 ff       	sbrs	r24, 7
    4a96:	11 c0       	rjmp	.+34     	; 0x4aba <thetascale+0x6a>
	{
		theta = -maxdeltaangle;
    4a98:	86 ea       	ldi	r24, 0xA6	; 166
    4a9a:	c8 2e       	mov	r12, r24
    4a9c:	8a e0       	ldi	r24, 0x0A	; 10
    4a9e:	d8 2e       	mov	r13, r24
    4aa0:	86 e8       	ldi	r24, 0x86	; 134
    4aa2:	e8 2e       	mov	r14, r24
    4aa4:	8e eb       	ldi	r24, 0xBE	; 190
    4aa6:	f8 2e       	mov	r15, r24
    4aa8:	08 c0       	rjmp	.+16     	; 0x4aba <thetascale+0x6a>
	// The sin() and cos() functions don't appreciate large 
	// input values. Limit the input values to +/-15 degrees. 
	
	if (theta > maxdeltaangle)
	{
		theta = maxdeltaangle;
    4aaa:	96 ea       	ldi	r25, 0xA6	; 166
    4aac:	c9 2e       	mov	r12, r25
    4aae:	9a e0       	ldi	r25, 0x0A	; 10
    4ab0:	d9 2e       	mov	r13, r25
    4ab2:	96 e8       	ldi	r25, 0x86	; 134
    4ab4:	e9 2e       	mov	r14, r25
    4ab6:	9e e3       	ldi	r25, 0x3E	; 62
    4ab8:	f9 2e       	mov	r15, r25
	{
		theta = -maxdeltaangle;
	}
	
	return theta;
}
    4aba:	c7 01       	movw	r24, r14
    4abc:	b6 01       	movw	r22, r12
    4abe:	ff 90       	pop	r15
    4ac0:	ef 90       	pop	r14
    4ac2:	df 90       	pop	r13
    4ac4:	cf 90       	pop	r12
    4ac6:	08 95       	ret

00004ac8 <Rotate3dVector>:
	angle[ROLL] = (int16_t)(EulerAngleRoll * -100);
	angle[PITCH] = (int16_t)(EulerAnglePitch * -100);
}

void Rotate3dVector(float intervalf)
{
    4ac8:	8f 92       	push	r8
    4aca:	9f 92       	push	r9
    4acc:	af 92       	push	r10
    4ace:	bf 92       	push	r11
    4ad0:	cf 92       	push	r12
    4ad2:	df 92       	push	r13
    4ad4:	ef 92       	push	r14
    4ad6:	ff 92       	push	r15
    4ad8:	0f 93       	push	r16
    4ada:	1f 93       	push	r17
    4adc:	6b 01       	movw	r12, r22
    4ade:	7c 01       	movw	r14, r24
	float theta;
	
	// Rotate around X axis (pitch)
	theta = thetascale(GyroPitchVC, intervalf);
    4ae0:	60 91 79 05 	lds	r22, 0x0579
    4ae4:	70 91 7a 05 	lds	r23, 0x057A
    4ae8:	80 91 7b 05 	lds	r24, 0x057B
    4aec:	90 91 7c 05 	lds	r25, 0x057C
    4af0:	a7 01       	movw	r20, r14
    4af2:	96 01       	movw	r18, r12
    4af4:	0e 94 28 25 	call	0x4a50	; 0x4a50 <thetascale>
	VectorA = VectorY;
    4af8:	00 91 1c 05 	lds	r16, 0x051C
    4afc:	10 91 1d 05 	lds	r17, 0x051D
    4b00:	20 91 1e 05 	lds	r18, 0x051E
    4b04:	30 91 1f 05 	lds	r19, 0x051F
    4b08:	00 93 99 05 	sts	0x0599, r16
    4b0c:	10 93 9a 05 	sts	0x059A, r17
    4b10:	20 93 9b 05 	sts	0x059B, r18
    4b14:	30 93 9c 05 	sts	0x059C, r19
	VectorB = VectorZ;
    4b18:	00 91 00 05 	lds	r16, 0x0500
    4b1c:	10 91 01 05 	lds	r17, 0x0501
    4b20:	20 91 02 05 	lds	r18, 0x0502
    4b24:	30 91 03 05 	lds	r19, 0x0503
    4b28:	00 93 9d 05 	sts	0x059D, r16
    4b2c:	10 93 9e 05 	sts	0x059E, r17
    4b30:	20 93 9f 05 	sts	0x059F, r18
    4b34:	30 93 a0 05 	sts	0x05A0, r19
	RotateVector(theta);
    4b38:	0e 94 97 24 	call	0x492e	; 0x492e <RotateVector>
	VectorY = VectorNewA;
    4b3c:	80 91 85 05 	lds	r24, 0x0585
    4b40:	90 91 86 05 	lds	r25, 0x0586
    4b44:	a0 91 87 05 	lds	r26, 0x0587
    4b48:	b0 91 88 05 	lds	r27, 0x0588
    4b4c:	80 93 1c 05 	sts	0x051C, r24
    4b50:	90 93 1d 05 	sts	0x051D, r25
    4b54:	a0 93 1e 05 	sts	0x051E, r26
    4b58:	b0 93 1f 05 	sts	0x051F, r27
	VectorZ = VectorNewB;
    4b5c:	80 90 69 05 	lds	r8, 0x0569
    4b60:	90 90 6a 05 	lds	r9, 0x056A
    4b64:	a0 90 6b 05 	lds	r10, 0x056B
    4b68:	b0 90 6c 05 	lds	r11, 0x056C
    4b6c:	80 92 00 05 	sts	0x0500, r8
    4b70:	90 92 01 05 	sts	0x0501, r9
    4b74:	a0 92 02 05 	sts	0x0502, r10
    4b78:	b0 92 03 05 	sts	0x0503, r11

	// Rotate around Y axis (roll)
	theta = thetascale (GyroRollVC, intervalf);
    4b7c:	60 91 7d 05 	lds	r22, 0x057D
    4b80:	70 91 7e 05 	lds	r23, 0x057E
    4b84:	80 91 7f 05 	lds	r24, 0x057F
    4b88:	90 91 80 05 	lds	r25, 0x0580
    4b8c:	a7 01       	movw	r20, r14
    4b8e:	96 01       	movw	r18, r12
    4b90:	0e 94 28 25 	call	0x4a50	; 0x4a50 <thetascale>
	VectorA = VectorX;
    4b94:	00 91 20 05 	lds	r16, 0x0520
    4b98:	10 91 21 05 	lds	r17, 0x0521
    4b9c:	20 91 22 05 	lds	r18, 0x0522
    4ba0:	30 91 23 05 	lds	r19, 0x0523
    4ba4:	00 93 99 05 	sts	0x0599, r16
    4ba8:	10 93 9a 05 	sts	0x059A, r17
    4bac:	20 93 9b 05 	sts	0x059B, r18
    4bb0:	30 93 9c 05 	sts	0x059C, r19
	VectorB = VectorZ;
    4bb4:	80 92 9d 05 	sts	0x059D, r8
    4bb8:	90 92 9e 05 	sts	0x059E, r9
    4bbc:	a0 92 9f 05 	sts	0x059F, r10
    4bc0:	b0 92 a0 05 	sts	0x05A0, r11
	RotateVector(theta);
    4bc4:	0e 94 97 24 	call	0x492e	; 0x492e <RotateVector>
	VectorX = VectorNewA;
    4bc8:	80 90 85 05 	lds	r8, 0x0585
    4bcc:	90 90 86 05 	lds	r9, 0x0586
    4bd0:	a0 90 87 05 	lds	r10, 0x0587
    4bd4:	b0 90 88 05 	lds	r11, 0x0588
    4bd8:	80 92 20 05 	sts	0x0520, r8
    4bdc:	90 92 21 05 	sts	0x0521, r9
    4be0:	a0 92 22 05 	sts	0x0522, r10
    4be4:	b0 92 23 05 	sts	0x0523, r11
	VectorZ = VectorNewB;
    4be8:	80 91 69 05 	lds	r24, 0x0569
    4bec:	90 91 6a 05 	lds	r25, 0x056A
    4bf0:	a0 91 6b 05 	lds	r26, 0x056B
    4bf4:	b0 91 6c 05 	lds	r27, 0x056C
    4bf8:	80 93 00 05 	sts	0x0500, r24
    4bfc:	90 93 01 05 	sts	0x0501, r25
    4c00:	a0 93 02 05 	sts	0x0502, r26
    4c04:	b0 93 03 05 	sts	0x0503, r27

	// Rotate around Z axis (yaw)
	theta = thetascale(gyroADC[YAW], intervalf);
    4c08:	60 91 67 05 	lds	r22, 0x0567
    4c0c:	70 91 68 05 	lds	r23, 0x0568
    4c10:	88 27       	eor	r24, r24
    4c12:	77 fd       	sbrc	r23, 7
    4c14:	80 95       	com	r24
    4c16:	98 2f       	mov	r25, r24
    4c18:	0e 94 e7 46 	call	0x8dce	; 0x8dce <__floatsisf>
    4c1c:	a7 01       	movw	r20, r14
    4c1e:	96 01       	movw	r18, r12
    4c20:	0e 94 28 25 	call	0x4a50	; 0x4a50 <thetascale>
	VectorA = VectorX;
    4c24:	80 92 99 05 	sts	0x0599, r8
    4c28:	90 92 9a 05 	sts	0x059A, r9
    4c2c:	a0 92 9b 05 	sts	0x059B, r10
    4c30:	b0 92 9c 05 	sts	0x059C, r11
	VectorB = VectorY;
    4c34:	c0 90 1c 05 	lds	r12, 0x051C
    4c38:	d0 90 1d 05 	lds	r13, 0x051D
    4c3c:	e0 90 1e 05 	lds	r14, 0x051E
    4c40:	f0 90 1f 05 	lds	r15, 0x051F
    4c44:	c0 92 9d 05 	sts	0x059D, r12
    4c48:	d0 92 9e 05 	sts	0x059E, r13
    4c4c:	e0 92 9f 05 	sts	0x059F, r14
    4c50:	f0 92 a0 05 	sts	0x05A0, r15
	RotateVector(theta);
    4c54:	0e 94 97 24 	call	0x492e	; 0x492e <RotateVector>
	VectorX = VectorNewA;
    4c58:	80 91 85 05 	lds	r24, 0x0585
    4c5c:	90 91 86 05 	lds	r25, 0x0586
    4c60:	a0 91 87 05 	lds	r26, 0x0587
    4c64:	b0 91 88 05 	lds	r27, 0x0588
    4c68:	80 93 20 05 	sts	0x0520, r24
    4c6c:	90 93 21 05 	sts	0x0521, r25
    4c70:	a0 93 22 05 	sts	0x0522, r26
    4c74:	b0 93 23 05 	sts	0x0523, r27
	VectorY = VectorNewB;
    4c78:	80 91 69 05 	lds	r24, 0x0569
    4c7c:	90 91 6a 05 	lds	r25, 0x056A
    4c80:	a0 91 6b 05 	lds	r26, 0x056B
    4c84:	b0 91 6c 05 	lds	r27, 0x056C
    4c88:	80 93 1c 05 	sts	0x051C, r24
    4c8c:	90 93 1d 05 	sts	0x051D, r25
    4c90:	a0 93 1e 05 	sts	0x051E, r26
    4c94:	b0 93 1f 05 	sts	0x051F, r27
}
    4c98:	1f 91       	pop	r17
    4c9a:	0f 91       	pop	r16
    4c9c:	ff 90       	pop	r15
    4c9e:	ef 90       	pop	r14
    4ca0:	df 90       	pop	r13
    4ca2:	cf 90       	pop	r12
    4ca4:	bf 90       	pop	r11
    4ca6:	af 90       	pop	r10
    4ca8:	9f 90       	pop	r9
    4caa:	8f 90       	pop	r8
    4cac:	08 95       	ret

00004cae <ext2>:
	EulerAngleRoll = ext2(VectorX);
	EulerAnglePitch = ext2(VectorY);
}

float ext2(float Vector)
{
    4cae:	cf 92       	push	r12
    4cb0:	df 92       	push	r13
    4cb2:	ef 92       	push	r14
    4cb4:	ff 92       	push	r15
	float temp;
	
	// Rough translation to Euler angles
	temp = Vector * 90;
    4cb6:	20 e0       	ldi	r18, 0x00	; 0
    4cb8:	30 e0       	ldi	r19, 0x00	; 0
    4cba:	44 eb       	ldi	r20, 0xB4	; 180
    4cbc:	52 e4       	ldi	r21, 0x42	; 66
    4cbe:	0e 94 9b 47 	call	0x8f36	; 0x8f36 <__mulsf3>
    4cc2:	6b 01       	movw	r12, r22
    4cc4:	7c 01       	movw	r14, r24

	// Change 0-90-0 to 0-90-180 so that
	// swap happens at 100% inverted
	if (VectorZ < 0)
    4cc6:	20 e0       	ldi	r18, 0x00	; 0
    4cc8:	30 e0       	ldi	r19, 0x00	; 0
    4cca:	a9 01       	movw	r20, r18
    4ccc:	60 91 00 05 	lds	r22, 0x0500
    4cd0:	70 91 01 05 	lds	r23, 0x0501
    4cd4:	80 91 02 05 	lds	r24, 0x0502
    4cd8:	90 91 03 05 	lds	r25, 0x0503
    4cdc:	0e 94 48 46 	call	0x8c90	; 0x8c90 <__cmpsf2>
    4ce0:	87 ff       	sbrs	r24, 7
    4ce2:	18 c0       	rjmp	.+48     	; 0x4d14 <ext2+0x66>
	{
		// CW rotations
		if (temp > 0)
    4ce4:	20 e0       	ldi	r18, 0x00	; 0
    4ce6:	30 e0       	ldi	r19, 0x00	; 0
    4ce8:	a9 01       	movw	r20, r18
    4cea:	c7 01       	movw	r24, r14
    4cec:	b6 01       	movw	r22, r12
    4cee:	0e 94 97 47 	call	0x8f2e	; 0x8f2e <__gesf2>
		{
			temp = 180 - temp;
    4cf2:	a7 01       	movw	r20, r14
    4cf4:	96 01       	movw	r18, r12
	// Change 0-90-0 to 0-90-180 so that
	// swap happens at 100% inverted
	if (VectorZ < 0)
	{
		// CW rotations
		if (temp > 0)
    4cf6:	18 16       	cp	r1, r24
    4cf8:	2c f4       	brge	.+10     	; 0x4d04 <ext2+0x56>
		{
			temp = 180 - temp;
    4cfa:	60 e0       	ldi	r22, 0x00	; 0
    4cfc:	70 e0       	ldi	r23, 0x00	; 0
    4cfe:	84 e3       	ldi	r24, 0x34	; 52
    4d00:	93 e4       	ldi	r25, 0x43	; 67
    4d02:	04 c0       	rjmp	.+8      	; 0x4d0c <ext2+0x5e>
		}
		// CCW rotations
		else
		{
			temp = -180 - temp;
    4d04:	60 e0       	ldi	r22, 0x00	; 0
    4d06:	70 e0       	ldi	r23, 0x00	; 0
    4d08:	84 e3       	ldi	r24, 0x34	; 52
    4d0a:	93 ec       	ldi	r25, 0xC3	; 195
    4d0c:	0e 94 e3 45 	call	0x8bc6	; 0x8bc6 <__subsf3>
    4d10:	6b 01       	movw	r12, r22
    4d12:	7c 01       	movw	r14, r24
		}
	}

	return (temp);
}
    4d14:	c7 01       	movw	r24, r14
    4d16:	b6 01       	movw	r22, r12
    4d18:	ff 90       	pop	r15
    4d1a:	ef 90       	pop	r14
    4d1c:	df 90       	pop	r13
    4d1e:	cf 90       	pop	r12
    4d20:	08 95       	ret

00004d22 <ExtractEulerAngles>:
	return temp;
}

void ExtractEulerAngles(void)
{
	EulerAngleRoll = ext2(VectorX);
    4d22:	60 91 20 05 	lds	r22, 0x0520
    4d26:	70 91 21 05 	lds	r23, 0x0521
    4d2a:	80 91 22 05 	lds	r24, 0x0522
    4d2e:	90 91 23 05 	lds	r25, 0x0523
    4d32:	0e 94 57 26 	call	0x4cae	; 0x4cae <ext2>
    4d36:	60 93 95 05 	sts	0x0595, r22
    4d3a:	70 93 96 05 	sts	0x0596, r23
    4d3e:	80 93 97 05 	sts	0x0597, r24
    4d42:	90 93 98 05 	sts	0x0598, r25
	EulerAnglePitch = ext2(VectorY);
    4d46:	60 91 1c 05 	lds	r22, 0x051C
    4d4a:	70 91 1d 05 	lds	r23, 0x051D
    4d4e:	80 91 1e 05 	lds	r24, 0x051E
    4d52:	90 91 1f 05 	lds	r25, 0x051F
    4d56:	0e 94 57 26 	call	0x4cae	; 0x4cae <ext2>
    4d5a:	60 93 6d 05 	sts	0x056D, r22
    4d5e:	70 93 6e 05 	sts	0x056E, r23
    4d62:	80 93 6f 05 	sts	0x056F, r24
    4d66:	90 93 70 05 	sts	0x0570, r25
    4d6a:	08 95       	ret

00004d6c <simple_imu_update>:
//		* = swapped axis
//
//************************************************************

void simple_imu_update(uint32_t period)
{
    4d6c:	4f 92       	push	r4
    4d6e:	5f 92       	push	r5
    4d70:	6f 92       	push	r6
    4d72:	7f 92       	push	r7
    4d74:	8f 92       	push	r8
    4d76:	9f 92       	push	r9
    4d78:	af 92       	push	r10
    4d7a:	bf 92       	push	r11
    4d7c:	cf 92       	push	r12
    4d7e:	df 92       	push	r13
    4d80:	ef 92       	push	r14
    4d82:	ff 92       	push	r15
    4d84:	0f 93       	push	r16
    4d86:	1f 93       	push	r17
    4d88:	cf 93       	push	r28
    4d8a:	df 93       	push	r29
    4d8c:	cd b7       	in	r28, 0x3d	; 61
    4d8e:	de b7       	in	r29, 0x3e	; 62
    4d90:	2c 97       	sbiw	r28, 0x0c	; 12
    4d92:	0f b6       	in	r0, 0x3f	; 63
    4d94:	f8 94       	cli
    4d96:	de bf       	out	0x3e, r29	; 62
    4d98:	0f be       	out	0x3f, r0	; 63
    4d9a:	cd bf       	out	0x3d, r28	; 61
	uint32_t	roll_sq, pitch_sq, yaw_sq;
	uint32_t 	AccMag = 0;
		
	// Work out interval in seconds
	// Convert (period) from units of 400ns (1/2500000) to seconds (1s/400ns = 2500000)
	tempf = period;						// Promote int16_t to float
    4d9c:	0e 94 e5 46 	call	0x8dca	; 0x8dca <__floatunsisf>
	intervalf = tempf/2500000.0f;		// This gives the period in seconds
    4da0:	20 e8       	ldi	r18, 0x80	; 128
    4da2:	36 e9       	ldi	r19, 0x96	; 150
    4da4:	48 e1       	ldi	r20, 0x18	; 24
    4da6:	5a e4       	ldi	r21, 0x4A	; 74
    4da8:	0e 94 4c 46 	call	0x8c98	; 0x8c98 <__divsf3>
    4dac:	69 87       	std	Y+9, r22	; 0x09
    4dae:	7a 87       	std	Y+10, r23	; 0x0a
    4db0:	8b 87       	std	Y+11, r24	; 0x0b
    4db2:	9c 87       	std	Y+12, r25	; 0x0c

	// Lookup actual LPF value and promote
	// Note: Two sets of values for normal and high-speed mode
	if (Config.Servo_rate != FAST)
    4db4:	80 91 cb 05 	lds	r24, 0x05CB
    4db8:	e0 91 2f 06 	lds	r30, 0x062F
    4dbc:	82 30       	cpi	r24, 0x02	; 2
    4dbe:	39 f0       	breq	.+14     	; 0x4dce <simple_imu_update+0x62>
	{
		tempf = pgm_read_float(&LPF_lookup[Config.Acc_LPF]); 
    4dc0:	84 e0       	ldi	r24, 0x04	; 4
    4dc2:	e8 02       	muls	r30, r24
    4dc4:	f0 01       	movw	r30, r0
    4dc6:	11 24       	eor	r1, r1
    4dc8:	e5 50       	subi	r30, 0x05	; 5
    4dca:	f8 4e       	sbci	r31, 0xE8	; 232
    4dcc:	06 c0       	rjmp	.+12     	; 0x4dda <simple_imu_update+0x6e>
	}
	else
	{
		tempf = pgm_read_float(&LPF_lookup_HS[Config.Acc_LPF]); 
    4dce:	94 e0       	ldi	r25, 0x04	; 4
    4dd0:	e9 02       	muls	r30, r25
    4dd2:	f0 01       	movw	r30, r0
    4dd4:	11 24       	eor	r1, r1
    4dd6:	e5 52       	subi	r30, 0x25	; 37
    4dd8:	f8 4e       	sbci	r31, 0xE8	; 232
    4dda:	c5 90       	lpm	r12, Z+
    4ddc:	d5 90       	lpm	r13, Z+
    4dde:	e5 90       	lpm	r14, Z+
    4de0:	f4 90       	lpm	r15, Z
    4de2:	04 e3       	ldi	r16, 0x34	; 52
    4de4:	15 e0       	ldi	r17, 0x05	; 5
    4de6:	29 e8       	ldi	r18, 0x89	; 137
    4de8:	62 2e       	mov	r6, r18
    4dea:	25 e0       	ldi	r18, 0x05	; 5
    4dec:	72 2e       	mov	r7, r18
	}
	
	// Smooth Acc signals - note that accSmooth is in [ROLL, PITCH, YAW] order
	for (axis = 0; axis < NUMBEROFAXIS; axis++)
	{
		accADCf = accADC[axis]; // Promote
    4dee:	d8 01       	movw	r26, r16
    4df0:	6d 91       	ld	r22, X+
    4df2:	7d 91       	ld	r23, X+
    4df4:	8d 01       	movw	r16, r26
    4df6:	88 27       	eor	r24, r24
    4df8:	77 fd       	sbrc	r23, 7
    4dfa:	80 95       	com	r24
    4dfc:	98 2f       	mov	r25, r24
    4dfe:	0e 94 e7 46 	call	0x8dce	; 0x8dce <__floatsisf>
    4e02:	4b 01       	movw	r8, r22
    4e04:	5c 01       	movw	r10, r24
		
		// Acc LPF
		if (tempf > 1)
    4e06:	20 e0       	ldi	r18, 0x00	; 0
    4e08:	30 e0       	ldi	r19, 0x00	; 0
    4e0a:	40 e8       	ldi	r20, 0x80	; 128
    4e0c:	5f e3       	ldi	r21, 0x3F	; 63
    4e0e:	c7 01       	movw	r24, r14
    4e10:	b6 01       	movw	r22, r12
    4e12:	0e 94 97 47 	call	0x8f2e	; 0x8f2e <__gesf2>
    4e16:	18 16       	cp	r1, r24
    4e18:	f4 f4       	brge	.+60     	; 0x4e56 <simple_imu_update+0xea>
		{
			// Acc LPF
			accSmooth[axis] = (accSmooth[axis] * (tempf - 1.0f) - accADCf) / tempf;
    4e1a:	20 e0       	ldi	r18, 0x00	; 0
    4e1c:	30 e0       	ldi	r19, 0x00	; 0
    4e1e:	40 e8       	ldi	r20, 0x80	; 128
    4e20:	5f e3       	ldi	r21, 0x3F	; 63
    4e22:	c7 01       	movw	r24, r14
    4e24:	b6 01       	movw	r22, r12
    4e26:	0e 94 e3 45 	call	0x8bc6	; 0x8bc6 <__subsf3>
    4e2a:	f3 01       	movw	r30, r6
    4e2c:	20 81       	ld	r18, Z
    4e2e:	31 81       	ldd	r19, Z+1	; 0x01
    4e30:	42 81       	ldd	r20, Z+2	; 0x02
    4e32:	53 81       	ldd	r21, Z+3	; 0x03
    4e34:	0e 94 9b 47 	call	0x8f36	; 0x8f36 <__mulsf3>
    4e38:	a5 01       	movw	r20, r10
    4e3a:	94 01       	movw	r18, r8
    4e3c:	0e 94 e3 45 	call	0x8bc6	; 0x8bc6 <__subsf3>
    4e40:	a7 01       	movw	r20, r14
    4e42:	96 01       	movw	r18, r12
    4e44:	0e 94 4c 46 	call	0x8c98	; 0x8c98 <__divsf3>
    4e48:	d3 01       	movw	r26, r6
    4e4a:	6d 93       	st	X+, r22
    4e4c:	7d 93       	st	X+, r23
    4e4e:	8d 93       	st	X+, r24
    4e50:	9c 93       	st	X, r25
    4e52:	13 97       	sbiw	r26, 0x03	; 3
    4e54:	09 c0       	rjmp	.+18     	; 0x4e68 <simple_imu_update+0xfc>
		}
		else
		{
			// Use raw accADC[axis] as source for acc values
			accSmooth[axis] =  -accADCf;
    4e56:	b7 fa       	bst	r11, 7
    4e58:	b0 94       	com	r11
    4e5a:	b7 f8       	bld	r11, 7
    4e5c:	b0 94       	com	r11
    4e5e:	f3 01       	movw	r30, r6
    4e60:	80 82       	st	Z, r8
    4e62:	91 82       	std	Z+1, r9	; 0x01
    4e64:	a2 82       	std	Z+2, r10	; 0x02
    4e66:	b3 82       	std	Z+3, r11	; 0x03
    4e68:	f4 e0       	ldi	r31, 0x04	; 4
    4e6a:	6f 0e       	add	r6, r31
    4e6c:	71 1c       	adc	r7, r1
	{
		tempf = pgm_read_float(&LPF_lookup_HS[Config.Acc_LPF]); 
	}
	
	// Smooth Acc signals - note that accSmooth is in [ROLL, PITCH, YAW] order
	for (axis = 0; axis < NUMBEROFAXIS; axis++)
    4e6e:	85 e0       	ldi	r24, 0x05	; 5
    4e70:	0a 33       	cpi	r16, 0x3A	; 58
    4e72:	18 07       	cpc	r17, r24
    4e74:	09 f0       	breq	.+2      	; 0x4e78 <simple_imu_update+0x10c>
    4e76:	bb cf       	rjmp	.-138    	; 0x4dee <simple_imu_update+0x82>
			accSmooth[axis] =  -accADCf;
		}
	}
	
	// Add correction data to gyro inputs based on difference between Euler angles and acc angles
	AccAngleRoll = accSmooth[ROLL] * SMALLANGLEFACTOR;		// KK2 - AccYfilter
    4e78:	23 ec       	ldi	r18, 0xC3	; 195
    4e7a:	35 ef       	ldi	r19, 0xF5	; 245
    4e7c:	48 e2       	ldi	r20, 0x28	; 40
    4e7e:	5f e3       	ldi	r21, 0x3F	; 63
    4e80:	60 91 89 05 	lds	r22, 0x0589
    4e84:	70 91 8a 05 	lds	r23, 0x058A
    4e88:	80 91 8b 05 	lds	r24, 0x058B
    4e8c:	90 91 8c 05 	lds	r25, 0x058C
    4e90:	0e 94 9b 47 	call	0x8f36	; 0x8f36 <__mulsf3>
    4e94:	69 83       	std	Y+1, r22	; 0x01
    4e96:	7a 83       	std	Y+2, r23	; 0x02
    4e98:	8b 83       	std	Y+3, r24	; 0x03
    4e9a:	9c 83       	std	Y+4, r25	; 0x04
    4e9c:	60 93 71 05 	sts	0x0571, r22
    4ea0:	70 93 72 05 	sts	0x0572, r23
    4ea4:	80 93 73 05 	sts	0x0573, r24
    4ea8:	90 93 74 05 	sts	0x0574, r25
	AccAnglePitch = accSmooth[PITCH] * SMALLANGLEFACTOR;
    4eac:	23 ec       	ldi	r18, 0xC3	; 195
    4eae:	35 ef       	ldi	r19, 0xF5	; 245
    4eb0:	48 e2       	ldi	r20, 0x28	; 40
    4eb2:	5f e3       	ldi	r21, 0x3F	; 63
    4eb4:	60 91 8d 05 	lds	r22, 0x058D
    4eb8:	70 91 8e 05 	lds	r23, 0x058E
    4ebc:	80 91 8f 05 	lds	r24, 0x058F
    4ec0:	90 91 90 05 	lds	r25, 0x0590
    4ec4:	0e 94 9b 47 	call	0x8f36	; 0x8f36 <__mulsf3>
    4ec8:	6d 83       	std	Y+5, r22	; 0x05
    4eca:	7e 83       	std	Y+6, r23	; 0x06
    4ecc:	8f 83       	std	Y+7, r24	; 0x07
    4ece:	98 87       	std	Y+8, r25	; 0x08
    4ed0:	60 93 75 05 	sts	0x0575, r22
    4ed4:	70 93 76 05 	sts	0x0576, r23
    4ed8:	80 93 77 05 	sts	0x0577, r24
    4edc:	90 93 78 05 	sts	0x0578, r25

	// Copy/promote gyro values for rotate
	GyroRollVC = gyroADC[ROLL];								// KK2 - GyroRoll
    4ee0:	60 91 63 05 	lds	r22, 0x0563
    4ee4:	70 91 64 05 	lds	r23, 0x0564
    4ee8:	88 27       	eor	r24, r24
    4eea:	77 fd       	sbrc	r23, 7
    4eec:	80 95       	com	r24
    4eee:	98 2f       	mov	r25, r24
    4ef0:	0e 94 e7 46 	call	0x8dce	; 0x8dce <__floatsisf>
    4ef4:	2b 01       	movw	r4, r22
    4ef6:	3c 01       	movw	r6, r24
    4ef8:	60 93 7d 05 	sts	0x057D, r22
    4efc:	70 93 7e 05 	sts	0x057E, r23
    4f00:	80 93 7f 05 	sts	0x057F, r24
    4f04:	90 93 80 05 	sts	0x0580, r25
	GyroPitchVC = gyroADC[PITCH];
    4f08:	60 91 65 05 	lds	r22, 0x0565
    4f0c:	70 91 66 05 	lds	r23, 0x0566
    4f10:	88 27       	eor	r24, r24
    4f12:	77 fd       	sbrc	r23, 7
    4f14:	80 95       	com	r24
    4f16:	98 2f       	mov	r25, r24
    4f18:	0e 94 e7 46 	call	0x8dce	; 0x8dce <__floatsisf>
    4f1c:	6b 01       	movw	r12, r22
    4f1e:	7c 01       	movw	r14, r24
    4f20:	60 93 79 05 	sts	0x0579, r22
    4f24:	70 93 7a 05 	sts	0x057A, r23
    4f28:	80 93 7b 05 	sts	0x057B, r24
    4f2c:	90 93 7c 05 	sts	0x057C, r25

	// Calculate acceleration magnitude.
	roll_sq = (accADC[ROLL] * accADC[ROLL]);
    4f30:	20 91 34 05 	lds	r18, 0x0534
    4f34:	30 91 35 05 	lds	r19, 0x0535
	pitch_sq = (accADC[PITCH] * accADC[PITCH]);
    4f38:	40 91 36 05 	lds	r20, 0x0536
    4f3c:	50 91 37 05 	lds	r21, 0x0537
	yaw_sq = (accADC[YAW] * accADC[YAW]);
    4f40:	e0 91 38 05 	lds	r30, 0x0538
    4f44:	f0 91 39 05 	lds	r31, 0x0539
	GyroRollVC = gyroADC[ROLL];								// KK2 - GyroRoll
	GyroPitchVC = gyroADC[PITCH];

	// Calculate acceleration magnitude.
	roll_sq = (accADC[ROLL] * accADC[ROLL]);
	pitch_sq = (accADC[PITCH] * accADC[PITCH]);
    4f48:	44 9f       	mul	r20, r20
    4f4a:	40 01       	movw	r8, r0
    4f4c:	45 9f       	mul	r20, r21
    4f4e:	90 0c       	add	r9, r0
    4f50:	90 0c       	add	r9, r0
    4f52:	11 24       	eor	r1, r1
    4f54:	b4 01       	movw	r22, r8
    4f56:	88 27       	eor	r24, r24
    4f58:	77 fd       	sbrc	r23, 7
    4f5a:	80 95       	com	r24
    4f5c:	98 2f       	mov	r25, r24
	// Copy/promote gyro values for rotate
	GyroRollVC = gyroADC[ROLL];								// KK2 - GyroRoll
	GyroPitchVC = gyroADC[PITCH];

	// Calculate acceleration magnitude.
	roll_sq = (accADC[ROLL] * accADC[ROLL]);
    4f5e:	22 9f       	mul	r18, r18
    4f60:	a0 01       	movw	r20, r0
    4f62:	23 9f       	mul	r18, r19
    4f64:	50 0d       	add	r21, r0
    4f66:	50 0d       	add	r21, r0
    4f68:	11 24       	eor	r1, r1
    4f6a:	8a 01       	movw	r16, r20
    4f6c:	22 27       	eor	r18, r18
    4f6e:	17 fd       	sbrc	r17, 7
    4f70:	20 95       	com	r18
    4f72:	32 2f       	mov	r19, r18
	pitch_sq = (accADC[PITCH] * accADC[PITCH]);
	yaw_sq = (accADC[YAW] * accADC[YAW]);
	AccMag = roll_sq + pitch_sq + yaw_sq;
    4f74:	60 0f       	add	r22, r16
    4f76:	71 1f       	adc	r23, r17
    4f78:	82 1f       	adc	r24, r18
    4f7a:	93 1f       	adc	r25, r19
	GyroPitchVC = gyroADC[PITCH];

	// Calculate acceleration magnitude.
	roll_sq = (accADC[ROLL] * accADC[ROLL]);
	pitch_sq = (accADC[PITCH] * accADC[PITCH]);
	yaw_sq = (accADC[YAW] * accADC[YAW]);
    4f7c:	ee 9f       	mul	r30, r30
    4f7e:	90 01       	movw	r18, r0
    4f80:	ef 9f       	mul	r30, r31
    4f82:	30 0d       	add	r19, r0
    4f84:	30 0d       	add	r19, r0
    4f86:	11 24       	eor	r1, r1
    4f88:	89 01       	movw	r16, r18
    4f8a:	22 27       	eor	r18, r18
    4f8c:	17 fd       	sbrc	r17, 7
    4f8e:	20 95       	com	r18
    4f90:	32 2f       	mov	r19, r18
	AccMag = roll_sq + pitch_sq + yaw_sq;
    4f92:	60 0f       	add	r22, r16
    4f94:	71 1f       	adc	r23, r17
    4f96:	82 1f       	adc	r24, r18
    4f98:	93 1f       	adc	r25, r19
	
	// Add acc correction if inside local acceleration bounds and not inverted according to VectorZ
	// This is actually a kind of Complementary Filter
	if	((AccMag > acc_0_85G_SQ) && (AccMag < acc_1_15G_SQ) && (VectorZ > 0.5))
    4f9a:	0e 94 e5 46 	call	0x8dca	; 0x8dca <__floatunsisf>
    4f9e:	4b 01       	movw	r8, r22
    4fa0:	5c 01       	movw	r10, r24
    4fa2:	20 e0       	ldi	r18, 0x00	; 0
    4fa4:	34 ef       	ldi	r19, 0xF4	; 244
    4fa6:	48 e3       	ldi	r20, 0x38	; 56
    4fa8:	56 e4       	ldi	r21, 0x46	; 70
    4faa:	0e 94 97 47 	call	0x8f2e	; 0x8f2e <__gesf2>
    4fae:	18 16       	cp	r1, r24
    4fb0:	0c f0       	brlt	.+2      	; 0x4fb4 <simple_imu_update+0x248>
    4fb2:	6b c0       	rjmp	.+214    	; 0x508a <simple_imu_update+0x31e>
    4fb4:	20 e0       	ldi	r18, 0x00	; 0
    4fb6:	38 e4       	ldi	r19, 0x48	; 72
    4fb8:	49 ea       	ldi	r20, 0xA9	; 169
    4fba:	56 e4       	ldi	r21, 0x46	; 70
    4fbc:	c5 01       	movw	r24, r10
    4fbe:	b4 01       	movw	r22, r8
    4fc0:	0e 94 48 46 	call	0x8c90	; 0x8c90 <__cmpsf2>
    4fc4:	87 ff       	sbrs	r24, 7
    4fc6:	61 c0       	rjmp	.+194    	; 0x508a <simple_imu_update+0x31e>
    4fc8:	20 e0       	ldi	r18, 0x00	; 0
    4fca:	30 e0       	ldi	r19, 0x00	; 0
    4fcc:	40 e0       	ldi	r20, 0x00	; 0
    4fce:	5f e3       	ldi	r21, 0x3F	; 63
    4fd0:	60 91 00 05 	lds	r22, 0x0500
    4fd4:	70 91 01 05 	lds	r23, 0x0501
    4fd8:	80 91 02 05 	lds	r24, 0x0502
    4fdc:	90 91 03 05 	lds	r25, 0x0503
    4fe0:	0e 94 97 47 	call	0x8f2e	; 0x8f2e <__gesf2>
    4fe4:	18 16       	cp	r1, r24
    4fe6:	0c f0       	brlt	.+2      	; 0x4fea <simple_imu_update+0x27e>
    4fe8:	50 c0       	rjmp	.+160    	; 0x508a <simple_imu_update+0x31e>
	{
		tempf = (EulerAngleRoll - AccAngleRoll) / (11 - Config.CF_factor); // Default Config.CF_factor is 7
    4fea:	80 91 31 06 	lds	r24, 0x0631
    4fee:	6b e0       	ldi	r22, 0x0B	; 11
    4ff0:	70 e0       	ldi	r23, 0x00	; 0
    4ff2:	68 1b       	sub	r22, r24
    4ff4:	71 09       	sbc	r23, r1
    4ff6:	87 fd       	sbrc	r24, 7
    4ff8:	73 95       	inc	r23
    4ffa:	88 27       	eor	r24, r24
    4ffc:	77 fd       	sbrc	r23, 7
    4ffe:	80 95       	com	r24
    5000:	98 2f       	mov	r25, r24
    5002:	0e 94 e7 46 	call	0x8dce	; 0x8dce <__floatsisf>
    5006:	4b 01       	movw	r8, r22
    5008:	5c 01       	movw	r10, r24
    500a:	29 81       	ldd	r18, Y+1	; 0x01
    500c:	3a 81       	ldd	r19, Y+2	; 0x02
    500e:	4b 81       	ldd	r20, Y+3	; 0x03
    5010:	5c 81       	ldd	r21, Y+4	; 0x04
    5012:	60 91 95 05 	lds	r22, 0x0595
    5016:	70 91 96 05 	lds	r23, 0x0596
    501a:	80 91 97 05 	lds	r24, 0x0597
    501e:	90 91 98 05 	lds	r25, 0x0598
    5022:	0e 94 e3 45 	call	0x8bc6	; 0x8bc6 <__subsf3>
    5026:	a5 01       	movw	r20, r10
    5028:	94 01       	movw	r18, r8
    502a:	0e 94 4c 46 	call	0x8c98	; 0x8c98 <__divsf3>
    502e:	9b 01       	movw	r18, r22
    5030:	ac 01       	movw	r20, r24
		GyroRollVC = GyroRollVC + tempf;
    5032:	c3 01       	movw	r24, r6
    5034:	b2 01       	movw	r22, r4
    5036:	0e 94 e4 45 	call	0x8bc8	; 0x8bc8 <__addsf3>
    503a:	60 93 7d 05 	sts	0x057D, r22
    503e:	70 93 7e 05 	sts	0x057E, r23
    5042:	80 93 7f 05 	sts	0x057F, r24
    5046:	90 93 80 05 	sts	0x0580, r25
		
		tempf = (EulerAnglePitch - AccAnglePitch) /(11 - Config.CF_factor);
    504a:	2d 81       	ldd	r18, Y+5	; 0x05
    504c:	3e 81       	ldd	r19, Y+6	; 0x06
    504e:	4f 81       	ldd	r20, Y+7	; 0x07
    5050:	58 85       	ldd	r21, Y+8	; 0x08
    5052:	60 91 6d 05 	lds	r22, 0x056D
    5056:	70 91 6e 05 	lds	r23, 0x056E
    505a:	80 91 6f 05 	lds	r24, 0x056F
    505e:	90 91 70 05 	lds	r25, 0x0570
    5062:	0e 94 e3 45 	call	0x8bc6	; 0x8bc6 <__subsf3>
    5066:	a5 01       	movw	r20, r10
    5068:	94 01       	movw	r18, r8
    506a:	0e 94 4c 46 	call	0x8c98	; 0x8c98 <__divsf3>
    506e:	9b 01       	movw	r18, r22
    5070:	ac 01       	movw	r20, r24
		GyroPitchVC = GyroPitchVC + tempf;
    5072:	c7 01       	movw	r24, r14
    5074:	b6 01       	movw	r22, r12
    5076:	0e 94 e4 45 	call	0x8bc8	; 0x8bc8 <__addsf3>
    507a:	60 93 79 05 	sts	0x0579, r22
    507e:	70 93 7a 05 	sts	0x057A, r23
    5082:	80 93 7b 05 	sts	0x057B, r24
    5086:	90 93 7c 05 	sts	0x057C, r25
	}

	// Rotate up-direction 3D vector with gyro inputs
	Rotate3dVector(intervalf);
    508a:	69 85       	ldd	r22, Y+9	; 0x09
    508c:	7a 85       	ldd	r23, Y+10	; 0x0a
    508e:	8b 85       	ldd	r24, Y+11	; 0x0b
    5090:	9c 85       	ldd	r25, Y+12	; 0x0c
    5092:	0e 94 64 25 	call	0x4ac8	; 0x4ac8 <Rotate3dVector>
	ExtractEulerAngles();
    5096:	0e 94 91 26 	call	0x4d22	; 0x4d22 <ExtractEulerAngles>
	
	// Upscale to 0.01 degrees resolution and copy to angle[] for display
	angle[ROLL] = (int16_t)(EulerAngleRoll * -100);
    509a:	20 e0       	ldi	r18, 0x00	; 0
    509c:	30 e0       	ldi	r19, 0x00	; 0
    509e:	48 ec       	ldi	r20, 0xC8	; 200
    50a0:	52 ec       	ldi	r21, 0xC2	; 194
    50a2:	60 91 95 05 	lds	r22, 0x0595
    50a6:	70 91 96 05 	lds	r23, 0x0596
    50aa:	80 91 97 05 	lds	r24, 0x0597
    50ae:	90 91 98 05 	lds	r25, 0x0598
    50b2:	0e 94 9b 47 	call	0x8f36	; 0x8f36 <__mulsf3>
    50b6:	0e 94 b4 46 	call	0x8d68	; 0x8d68 <__fixsfsi>
    50ba:	70 93 82 05 	sts	0x0582, r23
    50be:	60 93 81 05 	sts	0x0581, r22
	angle[PITCH] = (int16_t)(EulerAnglePitch * -100);
    50c2:	20 e0       	ldi	r18, 0x00	; 0
    50c4:	30 e0       	ldi	r19, 0x00	; 0
    50c6:	48 ec       	ldi	r20, 0xC8	; 200
    50c8:	52 ec       	ldi	r21, 0xC2	; 194
    50ca:	60 91 6d 05 	lds	r22, 0x056D
    50ce:	70 91 6e 05 	lds	r23, 0x056E
    50d2:	80 91 6f 05 	lds	r24, 0x056F
    50d6:	90 91 70 05 	lds	r25, 0x0570
    50da:	0e 94 9b 47 	call	0x8f36	; 0x8f36 <__mulsf3>
    50de:	0e 94 b4 46 	call	0x8d68	; 0x8d68 <__fixsfsi>
    50e2:	70 93 84 05 	sts	0x0584, r23
    50e6:	60 93 83 05 	sts	0x0583, r22
}
    50ea:	2c 96       	adiw	r28, 0x0c	; 12
    50ec:	0f b6       	in	r0, 0x3f	; 63
    50ee:	f8 94       	cli
    50f0:	de bf       	out	0x3e, r29	; 62
    50f2:	0f be       	out	0x3f, r0	; 63
    50f4:	cd bf       	out	0x3d, r28	; 61
    50f6:	df 91       	pop	r29
    50f8:	cf 91       	pop	r28
    50fa:	1f 91       	pop	r17
    50fc:	0f 91       	pop	r16
    50fe:	ff 90       	pop	r15
    5100:	ef 90       	pop	r14
    5102:	df 90       	pop	r13
    5104:	cf 90       	pop	r12
    5106:	bf 90       	pop	r11
    5108:	af 90       	pop	r10
    510a:	9f 90       	pop	r9
    510c:	8f 90       	pop	r8
    510e:	7f 90       	pop	r7
    5110:	6f 90       	pop	r6
    5112:	5f 90       	pop	r5
    5114:	4f 90       	pop	r4
    5116:	08 95       	ret

00005118 <reset_IMU>:
}

void reset_IMU(void)
{
	// Initialise the vector to point straight up
	VectorX = 0;
    5118:	10 92 20 05 	sts	0x0520, r1
    511c:	10 92 21 05 	sts	0x0521, r1
    5120:	10 92 22 05 	sts	0x0522, r1
    5124:	10 92 23 05 	sts	0x0523, r1
	VectorY = 0;
    5128:	10 92 1c 05 	sts	0x051C, r1
    512c:	10 92 1d 05 	sts	0x051D, r1
    5130:	10 92 1e 05 	sts	0x051E, r1
    5134:	10 92 1f 05 	sts	0x051F, r1
	VectorZ = 1;
    5138:	80 e0       	ldi	r24, 0x00	; 0
    513a:	90 e0       	ldi	r25, 0x00	; 0
    513c:	a0 e8       	ldi	r26, 0x80	; 128
    513e:	bf e3       	ldi	r27, 0x3F	; 63
    5140:	80 93 00 05 	sts	0x0500, r24
    5144:	90 93 01 05 	sts	0x0501, r25
    5148:	a0 93 02 05 	sts	0x0502, r26
    514c:	b0 93 03 05 	sts	0x0503, r27
	
	// Initialise internal vectors and attitude	
	VectorA = 0;
    5150:	10 92 99 05 	sts	0x0599, r1
    5154:	10 92 9a 05 	sts	0x059A, r1
    5158:	10 92 9b 05 	sts	0x059B, r1
    515c:	10 92 9c 05 	sts	0x059C, r1
	VectorB = 0;
    5160:	10 92 9d 05 	sts	0x059D, r1
    5164:	10 92 9e 05 	sts	0x059E, r1
    5168:	10 92 9f 05 	sts	0x059F, r1
    516c:	10 92 a0 05 	sts	0x05A0, r1
	EulerAngleRoll = 0;
    5170:	10 92 95 05 	sts	0x0595, r1
    5174:	10 92 96 05 	sts	0x0596, r1
    5178:	10 92 97 05 	sts	0x0597, r1
    517c:	10 92 98 05 	sts	0x0598, r1
	EulerAnglePitch = 0;
    5180:	10 92 6d 05 	sts	0x056D, r1
    5184:	10 92 6e 05 	sts	0x056E, r1
    5188:	10 92 6f 05 	sts	0x056F, r1
    518c:	10 92 70 05 	sts	0x0570, r1

	// Reset loop count to zero
	TMR0_counter = 0;	// TMR0 overflow counter
    5190:	10 92 be 07 	sts	0x07BE, r1
    5194:	10 92 bd 07 	sts	0x07BD, r1
	TCNT1 = 0;			// TCNT1 current time
    5198:	10 92 85 00 	sts	0x0085, r1
    519c:	10 92 84 00 	sts	0x0084, r1
	LoopStartTCNT1 = 0;	// TCNT1 last loop time
    51a0:	10 92 11 05 	sts	0x0511, r1
    51a4:	10 92 10 05 	sts	0x0510, r1
    51a8:	08 95       	ret

000051aa <init>:

CONFIG_STRUCT Config;			// eeProm data configuration
uint16_t SystemVoltage = 0;		// Initial voltage measured.

void init(void)
{
    51aa:	cf 93       	push	r28
	
	//***********************************************************
	// I/O setup
	//***********************************************************
	// Set port directions
	DDRA		= 0x30;		// Port A
    51ac:	80 e3       	ldi	r24, 0x30	; 48
    51ae:	81 b9       	out	0x01, r24	; 1
	DDRC		= 0xFC;		// Port C
    51b0:	8c ef       	ldi	r24, 0xFC	; 252
    51b2:	87 b9       	out	0x07, r24	; 7
	DDRB		= 0x0A;		// Port B
    51b4:	8a e0       	ldi	r24, 0x0A	; 10
    51b6:	84 b9       	out	0x04, r24	; 4
	DDRD		= 0xF2;		// Port D
    51b8:	82 ef       	ldi	r24, 0xF2	; 242
    51ba:	8a b9       	out	0x0a, r24	; 10

	// Hold all PWM outputs low to stop glitches
	// M5 and M6 are on PortA for KK2.1
	MOTORS		= 0;
    51bc:	18 b8       	out	0x08, r1	; 8
	M5			= 0;
    51be:	14 98       	cbi	0x02, 4	; 2
	M6			= 0;
    51c0:	15 98       	cbi	0x02, 5	; 2

	// Preset I/O pins
	LED1 		= 0;		// LED1 off
    51c2:	2b 98       	cbi	0x05, 3	; 5
	LVA 		= 0; 		// LVA alarm OFF
    51c4:	29 98       	cbi	0x05, 1	; 5
	LCD_SCL		= 1;		// GLCD clock high
    51c6:	5c 9a       	sbi	0x0b, 4	; 11

	// Set/clear pull-ups (1 = set, 0 = clear)
	PINB		= 0xF5;		// Set PB pull-ups
    51c8:	85 ef       	ldi	r24, 0xF5	; 245
    51ca:	83 b9       	out	0x03, r24	; 3
	PIND		= 0x0C;		// Set PD pull-ups (Don't pull up RX yet)
    51cc:	8c e0       	ldi	r24, 0x0C	; 12
    51ce:	89 b9       	out	0x09, r24	; 9
    51d0:	2f e5       	ldi	r18, 0x5F	; 95
    51d2:	88 ed       	ldi	r24, 0xD8	; 216
    51d4:	93 e0       	ldi	r25, 0x03	; 3
    51d6:	21 50       	subi	r18, 0x01	; 1
    51d8:	80 40       	sbci	r24, 0x00	; 0
    51da:	90 40       	sbci	r25, 0x00	; 0
    51dc:	e1 f7       	brne	.-8      	; 0x51d6 <init+0x2c>
    51de:	00 c0       	rjmp	.+0      	; 0x51e0 <init+0x36>
    51e0:	00 00       	nop
	_delay_ms(63);				// Pause while satellite wakes up	
								// and pull-ups have time to rise.
								// Tweak until bind pulses about 68ms after power-up

	// Bind as master if ONLY button 4 pressed
	if ((PINB & 0xf0) == 0xE0)
    51e2:	83 b1       	in	r24, 0x03	; 3
    51e4:	80 7f       	andi	r24, 0xF0	; 240
    51e6:	80 3e       	cpi	r24, 0xE0	; 224
    51e8:	21 f4       	brne	.+8      	; 0x51f2 <init+0x48>
	{
		DDRD		= 0xF3;		// Switch PD0 to output
    51ea:	83 ef       	ldi	r24, 0xF3	; 243
    51ec:	8a b9       	out	0x0a, r24	; 10
		bind_master();
    51ee:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <bind_master>
	}

	DDRD		= 0xF2;			// Reset Port D directions
    51f2:	82 ef       	ldi	r24, 0xF2	; 242
    51f4:	8a b9       	out	0x0a, r24	; 10

	// Set/clear pull-ups (1 = set, 0 = clear)
	PIND		= 0x0D;			// Set PD pull-ups (now pull up RX as well)
    51f6:	8d e0       	ldi	r24, 0x0D	; 13
    51f8:	89 b9       	out	0x09, r24	; 9
	// Timers
	//***********************************************************

	// Timer0 (8bit) - run @ 20MHz / 1024 = 19.531kHz or 51.2us - max 13.1ms
	// Slow timer to extend Timer 1
	TCCR0A = 0;								// Normal operation
    51fa:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0x05;							// Clk / 1024 = 19.531kHz or 51.2us - max 13.1ms
    51fc:	85 e0       	ldi	r24, 0x05	; 5
    51fe:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= (1 << TOIE0);					// Enable interrupts
    5200:	80 91 6e 00 	lds	r24, 0x006E
    5204:	81 60       	ori	r24, 0x01	; 1
    5206:	80 93 6e 00 	sts	0x006E, r24
	TCNT0 = 0;								// Reset counter
    520a:	16 bc       	out	0x26, r1	; 38
	
	// Timer1 (16bit) - run @ 2.5MHz (400ns) - max 26.2ms
	// Used to measure Rx Signals & control ESC/servo output rate
	TCCR1A = 0;
    520c:	10 92 80 00 	sts	0x0080, r1
	TCCR1B |= (1 << CS11);					// Clk/8 = 2.5MHz
    5210:	80 91 81 00 	lds	r24, 0x0081
    5214:	82 60       	ori	r24, 0x02	; 2
    5216:	80 93 81 00 	sts	0x0081, r24

	// Timer2 8bit - run @ 20MHz / 1024 = 19.531kHz or 51.2us - max 13.1ms
	// Used to time arm/disarm intervals
	TCCR2A = 0;	
    521a:	10 92 b0 00 	sts	0x00B0, r1
	TCCR2B = 0x07;							// Clk/1024 = 19.531kHz
    521e:	87 e0       	ldi	r24, 0x07	; 7
    5220:	80 93 b1 00 	sts	0x00B1, r24
	TIMSK2 = 0;
    5224:	10 92 70 00 	sts	0x0070, r1
	TIFR2 = 0;
    5228:	17 ba       	out	0x17, r1	; 23
	TCNT2 = 0;								// Reset counter
    522a:	10 92 b2 00 	sts	0x00B2, r1
	//***********************************************************
	// Interrupts and pin function setup
	//***********************************************************

	// Pin change interrupt enables PCINT1, PCINT2 and PCINT3 (Throttle, AUX and CPPM input)
	PCICR  = 0x0A;							// PCINT8  to PCINT15 (PCINT1 group - AUX)
    522e:	9a e0       	ldi	r25, 0x0A	; 10
    5230:	90 93 68 00 	sts	0x0068, r25
											// PCINT24 to PCINT31 (PCINT3 group - THR)
	PCIFR  = 0x0F;							// Clear PCIF0 interrupt flag 
    5234:	9f e0       	ldi	r25, 0x0F	; 15
    5236:	9b bb       	out	0x1b, r25	; 27
											// Clear PCIF1 interrupt flag 
											// Clear PCIF2 interrupt flag 
											// Clear PCIF3 interrupt flag 

	// External interrupts INT0 (Elevator) and INT1 (Aileron) and INT2 (Rudder)
	EICRA = 0x15;							// Any change INT0
    5238:	95 e1       	ldi	r25, 0x15	; 21
    523a:	90 93 69 00 	sts	0x0069, r25
											// Any change INT1
											// Any change INT2
	EIFR  = 0x07; 							// Clear INT0 interrupt flag (Elevator)
    523e:	8c bb       	out	0x1c, r24	; 28
	//***********************************************************
	// Start up
	//***********************************************************

	// Preset important flags
	Interrupted = false;						
    5240:	10 92 ba 07 	sts	0x07BA, r1

	// Load EEPROM settings
	updated = Initial_EEPROM_Config_Load(); // Config now contains valid values
    5244:	0e 94 ad 19 	call	0x335a	; 0x335a <Initial_EEPROM_Config_Load>
    5248:	c8 2f       	mov	r28, r24
    524a:	20 e0       	ldi	r18, 0x00	; 0
    524c:	30 e0       	ldi	r19, 0x00	; 0
	//***********************************************************

	for (i = 0; i < MAX_RC_CHANNELS; i++)
	{
		
		RxChannel[i] = 3750;
    524e:	46 ea       	ldi	r20, 0xA6	; 166
    5250:	5e e0       	ldi	r21, 0x0E	; 14
    5252:	f9 01       	movw	r30, r18
    5254:	ee 0f       	add	r30, r30
    5256:	ff 1f       	adc	r31, r31
    5258:	e6 55       	subi	r30, 0x56	; 86
    525a:	f8 4f       	sbci	r31, 0xF8	; 248
    525c:	51 83       	std	Z+1, r21	; 0x01
    525e:	40 83       	st	Z, r20
    5260:	2f 5f       	subi	r18, 0xFF	; 255
    5262:	3f 4f       	sbci	r19, 0xFF	; 255
	// RX channel defaults for when no RC connected
	// Not doing this can result in the FC trying (unsuccessfully) to arm
	// and makes entry into the menus very hard
	//***********************************************************

	for (i = 0; i < MAX_RC_CHANNELS; i++)
    5264:	28 30       	cpi	r18, 0x08	; 8
    5266:	31 05       	cpc	r19, r1
    5268:	a1 f7       	brne	.-24     	; 0x5252 <init+0xa8>
	{
		
		RxChannel[i] = 3750;
	}
	
	RxChannel[THROTTLE] = 2500; // Min throttle
    526a:	24 ec       	ldi	r18, 0xC4	; 196
    526c:	39 e0       	ldi	r19, 0x09	; 9
    526e:	30 93 ab 07 	sts	0x07AB, r19
    5272:	20 93 aa 07 	sts	0x07AA, r18
	//***********************************************************
	// GLCD initialisation
	//***********************************************************

	// Initialise the GLCD
	st7565_init();
    5276:	0e 94 e2 1f 	call	0x3fc4	; 0x3fc4 <st7565_init>

	// Make sure the LCD is blank without clearing buffer (and so no logo)
	clear_screen();
    527a:	0e 94 3c 20 	call	0x4078	; 0x4078 <clear_screen>
	//***********************************************************
	// ESC calibration
	//***********************************************************
	
	// Calibrate ESCs if ONLY buttons 1 and 4 pressed
	if ((PINB & 0xf0) == 0x60)
    527e:	93 b1       	in	r25, 0x03	; 3
    5280:	90 7f       	andi	r25, 0xF0	; 240
    5282:	90 36       	cpi	r25, 0x60	; 96
    5284:	09 f0       	breq	.+2      	; 0x5288 <init+0xde>
    5286:	71 c0       	rjmp	.+226    	; 0x536a <init+0x1c0>
	{
		// Display calibrating message
		st7565_command(CMD_SET_COM_NORMAL); 	// For text (not for logo)
    5288:	80 ec       	ldi	r24, 0xC0	; 192
    528a:	0e 94 d3 1f 	call	0x3fa6	; 0x3fa6 <st7565_command>
		clear_buffer(buffer);
    528e:	80 e0       	ldi	r24, 0x00	; 0
    5290:	91 e0       	ldi	r25, 0x01	; 1
    5292:	0e 94 33 20 	call	0x4066	; 0x4066 <clear_buffer>
		LCD_Display_Text(59,(const unsigned char*)Verdana14,10,25);
    5296:	29 e1       	ldi	r18, 0x19	; 25
    5298:	30 e0       	ldi	r19, 0x00	; 0
    529a:	4a e0       	ldi	r20, 0x0A	; 10
    529c:	50 e0       	ldi	r21, 0x00	; 0
    529e:	6f e5       	ldi	r22, 0x5F	; 95
    52a0:	71 e0       	ldi	r23, 0x01	; 1
    52a2:	8b e3       	ldi	r24, 0x3B	; 59
    52a4:	90 e0       	ldi	r25, 0x00	; 0
    52a6:	0e 94 e0 21 	call	0x43c0	; 0x43c0 <LCD_Display_Text>
		write_buffer(buffer);
    52aa:	80 e0       	ldi	r24, 0x00	; 0
    52ac:	91 e0       	ldi	r25, 0x01	; 1
    52ae:	0e 94 01 20 	call	0x4002	; 0x4002 <write_buffer>
		clear_buffer(buffer);
    52b2:	80 e0       	ldi	r24, 0x00	; 0
    52b4:	91 e0       	ldi	r25, 0x01	; 1
    52b6:	0e 94 33 20 	call	0x4066	; 0x4066 <clear_buffer>
    52ba:	e7 e3       	ldi	r30, 0x37	; 55
    52bc:	f6 e0       	ldi	r31, 0x06	; 6
    52be:	80 e0       	ldi	r24, 0x00	; 0
    52c0:	90 e0       	ldi	r25, 0x00	; 0
				// Set output to maximum pulse width
				ServoOut[i] = MOTOR_100;
			}
			else
			{
				ServoOut[i] = SERVO_CENTER;
    52c2:	4c ed       	ldi	r20, 0xDC	; 220
    52c4:	55 e0       	ldi	r21, 0x05	; 5
		{
			// Check for motor marker
			if (Config.Channel[i].Motor_marker == MOTOR)
			{
				// Set output to maximum pulse width
				ServoOut[i] = MOTOR_100;
    52c6:	6c e6       	ldi	r22, 0x6C	; 108
    52c8:	77 e0       	ldi	r23, 0x07	; 7
				
		// For each output
		for (i = 0; i < MAX_OUTPUTS; i++)
		{
			// Check for motor marker
			if (Config.Channel[i].Motor_marker == MOTOR)
    52ca:	a0 81       	ld	r26, Z
    52cc:	9c 01       	movw	r18, r24
    52ce:	22 0f       	add	r18, r18
    52d0:	33 1f       	adc	r19, r19
    52d2:	a2 30       	cpi	r26, 0x02	; 2
    52d4:	39 f4       	brne	.+14     	; 0x52e4 <init+0x13a>
			{
				// Set output to maximum pulse width
				ServoOut[i] = MOTOR_100;
    52d6:	d9 01       	movw	r26, r18
    52d8:	a3 5d       	subi	r26, 0xD3	; 211
    52da:	b7 4f       	sbci	r27, 0xF7	; 247
    52dc:	11 96       	adiw	r26, 0x01	; 1
    52de:	7c 93       	st	X, r23
    52e0:	6e 93       	st	-X, r22
    52e2:	06 c0       	rjmp	.+12     	; 0x52f0 <init+0x146>
			}
			else
			{
				ServoOut[i] = SERVO_CENTER;
    52e4:	d9 01       	movw	r26, r18
    52e6:	a3 5d       	subi	r26, 0xD3	; 211
    52e8:	b7 4f       	sbci	r27, 0xF7	; 247
    52ea:	11 96       	adiw	r26, 0x01	; 1
    52ec:	5c 93       	st	X, r21
    52ee:	4e 93       	st	-X, r20
    52f0:	01 96       	adiw	r24, 0x01	; 1
    52f2:	b6 96       	adiw	r30, 0x26	; 38
		LCD_Display_Text(59,(const unsigned char*)Verdana14,10,25);
		write_buffer(buffer);
		clear_buffer(buffer);
				
		// For each output
		for (i = 0; i < MAX_OUTPUTS; i++)
    52f4:	88 30       	cpi	r24, 0x08	; 8
    52f6:	91 05       	cpc	r25, r1
    52f8:	41 f7       	brne	.-48     	; 0x52ca <init+0x120>
				ServoOut[i] = SERVO_CENTER;
			}
		}
					
		// Output HIGH pulse (1.9ms) until buttons released
		while ((PINB & 0xf0) == 0x60)
    52fa:	83 b1       	in	r24, 0x03	; 3
    52fc:	80 7f       	andi	r24, 0xF0	; 240
    52fe:	80 36       	cpi	r24, 0x60	; 96
    5300:	79 f4       	brne	.+30     	; 0x5320 <init+0x176>
		{
			// Pass address of ServoOut array and select all outputs
			output_servo_ppm_asm(&ServoOut[0], 0xFF);
    5302:	6f ef       	ldi	r22, 0xFF	; 255
    5304:	8d e2       	ldi	r24, 0x2D	; 45
    5306:	98 e0       	ldi	r25, 0x08	; 8
    5308:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <output_servo_ppm_asm>
    530c:	2f e7       	ldi	r18, 0x7F	; 127
    530e:	88 e3       	ldi	r24, 0x38	; 56
    5310:	91 e0       	ldi	r25, 0x01	; 1
    5312:	21 50       	subi	r18, 0x01	; 1
    5314:	80 40       	sbci	r24, 0x00	; 0
    5316:	90 40       	sbci	r25, 0x00	; 0
    5318:	e1 f7       	brne	.-8      	; 0x5312 <init+0x168>
    531a:	00 c0       	rjmp	.+0      	; 0x531c <init+0x172>
    531c:	00 00       	nop
    531e:	ed cf       	rjmp	.-38     	; 0x52fa <init+0x150>
				ServoOut[i] = SERVO_CENTER;
			}
		}
					
		// Output HIGH pulse (1.9ms) until buttons released
		while ((PINB & 0xf0) == 0x60)
    5320:	e7 e3       	ldi	r30, 0x37	; 55
    5322:	f6 e0       	ldi	r31, 0x06	; 6
    5324:	80 e0       	ldi	r24, 0x00	; 0
    5326:	90 e0       	ldi	r25, 0x00	; 0
		{
			// Check for motor marker
			if (Config.Channel[i].Motor_marker == MOTOR)
			{
				// Set output to maximum pulse width
				ServoOut[i] = MOTOR_0;
    5328:	2c e4       	ldi	r18, 0x4C	; 76
    532a:	34 e0       	ldi	r19, 0x04	; 4
		// Output LOW pulse (1.1ms) after buttons released
		// For each output
		for (i = 0; i < MAX_OUTPUTS; i++)
		{
			// Check for motor marker
			if (Config.Channel[i].Motor_marker == MOTOR)
    532c:	40 81       	ld	r20, Z
    532e:	42 30       	cpi	r20, 0x02	; 2
    5330:	41 f4       	brne	.+16     	; 0x5342 <init+0x198>
			{
				// Set output to maximum pulse width
				ServoOut[i] = MOTOR_0;
    5332:	dc 01       	movw	r26, r24
    5334:	aa 0f       	add	r26, r26
    5336:	bb 1f       	adc	r27, r27
    5338:	a3 5d       	subi	r26, 0xD3	; 211
    533a:	b7 4f       	sbci	r27, 0xF7	; 247
    533c:	11 96       	adiw	r26, 0x01	; 1
    533e:	3c 93       	st	X, r19
    5340:	2e 93       	st	-X, r18
    5342:	01 96       	adiw	r24, 0x01	; 1
    5344:	b6 96       	adiw	r30, 0x26	; 38
			_delay_ms(20);			
		}

		// Output LOW pulse (1.1ms) after buttons released
		// For each output
		for (i = 0; i < MAX_OUTPUTS; i++)
    5346:	88 30       	cpi	r24, 0x08	; 8
    5348:	91 05       	cpc	r25, r1
    534a:	81 f7       	brne	.-32     	; 0x532c <init+0x182>

		// Loop forever here
		while(1)
		{
			// Pass address of ServoOut array and select all outputs
			output_servo_ppm_asm(&ServoOut[0], 0xFF);
    534c:	6f ef       	ldi	r22, 0xFF	; 255
    534e:	8d e2       	ldi	r24, 0x2D	; 45
    5350:	98 e0       	ldi	r25, 0x08	; 8
    5352:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <output_servo_ppm_asm>
    5356:	2f e7       	ldi	r18, 0x7F	; 127
    5358:	88 e3       	ldi	r24, 0x38	; 56
    535a:	91 e0       	ldi	r25, 0x01	; 1
    535c:	21 50       	subi	r18, 0x01	; 1
    535e:	80 40       	sbci	r24, 0x00	; 0
    5360:	90 40       	sbci	r25, 0x00	; 0
    5362:	e1 f7       	brne	.-8      	; 0x535c <init+0x1b2>
    5364:	00 c0       	rjmp	.+0      	; 0x5366 <init+0x1bc>
    5366:	00 00       	nop
    5368:	f1 cf       	rjmp	.-30     	; 0x534c <init+0x1a2>
    536a:	2f e7       	ldi	r18, 0x7F	; 127
    536c:	8f e4       	ldi	r24, 0x4F	; 79
    536e:	92 e1       	ldi	r25, 0x12	; 18
    5370:	21 50       	subi	r18, 0x01	; 1
    5372:	80 40       	sbci	r24, 0x00	; 0
    5374:	90 40       	sbci	r25, 0x00	; 0
    5376:	e1 f7       	brne	.-8      	; 0x5370 <init+0x1c6>
    5378:	00 c0       	rjmp	.+0      	; 0x537a <init+0x1d0>
    537a:	00 00       	nop

	// This delay prevents the GLCD flashing up a ghost image of old data
	_delay_ms(300);

	// Reload default eeprom settings if middle two buttons are pressed
	if ((PINB & 0xf0) == 0x90)
    537c:	93 b1       	in	r25, 0x03	; 3
    537e:	90 7f       	andi	r25, 0xF0	; 240
    5380:	90 39       	cpi	r25, 0x90	; 144
    5382:	51 f5       	brne	.+84     	; 0x53d8 <init+0x22e>
	{
		// Display reset message
		st7565_command(CMD_SET_COM_NORMAL); 	// For text (not for logo)
    5384:	80 ec       	ldi	r24, 0xC0	; 192
    5386:	0e 94 d3 1f 	call	0x3fa6	; 0x3fa6 <st7565_command>
		clear_buffer(buffer);
    538a:	80 e0       	ldi	r24, 0x00	; 0
    538c:	91 e0       	ldi	r25, 0x01	; 1
    538e:	0e 94 33 20 	call	0x4066	; 0x4066 <clear_buffer>
		LCD_Display_Text(262,(const unsigned char*)Verdana14,40,25); // "Reset"
    5392:	29 e1       	ldi	r18, 0x19	; 25
    5394:	30 e0       	ldi	r19, 0x00	; 0
    5396:	48 e2       	ldi	r20, 0x28	; 40
    5398:	50 e0       	ldi	r21, 0x00	; 0
    539a:	6f e5       	ldi	r22, 0x5F	; 95
    539c:	71 e0       	ldi	r23, 0x01	; 1
    539e:	86 e0       	ldi	r24, 0x06	; 6
    53a0:	91 e0       	ldi	r25, 0x01	; 1
    53a2:	0e 94 e0 21 	call	0x43c0	; 0x43c0 <LCD_Display_Text>
		write_buffer(buffer);
    53a6:	80 e0       	ldi	r24, 0x00	; 0
    53a8:	91 e0       	ldi	r25, 0x01	; 1
    53aa:	0e 94 01 20 	call	0x4002	; 0x4002 <write_buffer>
		clear_buffer(buffer);
    53ae:	80 e0       	ldi	r24, 0x00	; 0
    53b0:	91 e0       	ldi	r25, 0x01	; 1
    53b2:	0e 94 33 20 	call	0x4066	; 0x4066 <clear_buffer>
		
		// Reset EEPROM settings
		Set_EEPROM_Default_Config();
    53b6:	0e 94 06 19 	call	0x320c	; 0x320c <Set_EEPROM_Default_Config>
		Save_Config_to_EEPROM();
    53ba:	0e 94 88 16 	call	0x2d10	; 0x2d10 <Save_Config_to_EEPROM>

		// Set contrast to the default value
		st7565_set_brightness(Config.Contrast);
    53be:	80 91 2a 06 	lds	r24, 0x062A
    53c2:	0e 94 d9 1f 	call	0x3fb2	; 0x3fb2 <st7565_set_brightness>
    53c6:	2f e7       	ldi	r18, 0x7F	; 127
    53c8:	84 e8       	ldi	r24, 0x84	; 132
    53ca:	9e e1       	ldi	r25, 0x1E	; 30
    53cc:	21 50       	subi	r18, 0x01	; 1
    53ce:	80 40       	sbci	r24, 0x00	; 0
    53d0:	90 40       	sbci	r25, 0x00	; 0
    53d2:	e1 f7       	brne	.-8      	; 0x53cc <init+0x222>
    53d4:	00 c0       	rjmp	.+0      	; 0x53d6 <init+0x22c>
    53d6:	00 00       	nop

		_delay_ms(500);		// Save is now too fast to show the "Reset" text long enough
	}

	// Display message in place of logo when updating eeprom structure
	if (updated)
    53d8:	cc 23       	and	r28, r28
    53da:	21 f1       	breq	.+72     	; 0x5424 <init+0x27a>
	{
		st7565_command(CMD_SET_COM_NORMAL); 	// For text (not for logo)
    53dc:	80 ec       	ldi	r24, 0xC0	; 192
    53de:	0e 94 d3 1f 	call	0x3fa6	; 0x3fa6 <st7565_command>
		clear_buffer(buffer);
    53e2:	80 e0       	ldi	r24, 0x00	; 0
    53e4:	91 e0       	ldi	r25, 0x01	; 1
    53e6:	0e 94 33 20 	call	0x4066	; 0x4066 <clear_buffer>
		LCD_Display_Text(259,(const unsigned char*)Verdana14,30,13); // "Updating"
    53ea:	2d e0       	ldi	r18, 0x0D	; 13
    53ec:	30 e0       	ldi	r19, 0x00	; 0
    53ee:	4e e1       	ldi	r20, 0x1E	; 30
    53f0:	50 e0       	ldi	r21, 0x00	; 0
    53f2:	6f e5       	ldi	r22, 0x5F	; 95
    53f4:	71 e0       	ldi	r23, 0x01	; 1
    53f6:	83 e0       	ldi	r24, 0x03	; 3
    53f8:	91 e0       	ldi	r25, 0x01	; 1
    53fa:	0e 94 e0 21 	call	0x43c0	; 0x43c0 <LCD_Display_Text>
		LCD_Display_Text(260,(const unsigned char*)Verdana14,33,37); // "settings"
    53fe:	25 e2       	ldi	r18, 0x25	; 37
    5400:	30 e0       	ldi	r19, 0x00	; 0
    5402:	41 e2       	ldi	r20, 0x21	; 33
    5404:	50 e0       	ldi	r21, 0x00	; 0
    5406:	6f e5       	ldi	r22, 0x5F	; 95
    5408:	71 e0       	ldi	r23, 0x01	; 1
    540a:	84 e0       	ldi	r24, 0x04	; 4
    540c:	91 e0       	ldi	r25, 0x01	; 1
    540e:	0e 94 e0 21 	call	0x43c0	; 0x43c0 <LCD_Display_Text>
		write_buffer(buffer);
    5412:	80 e0       	ldi	r24, 0x00	; 0
    5414:	91 e0       	ldi	r25, 0x01	; 1
    5416:	0e 94 01 20 	call	0x4002	; 0x4002 <write_buffer>
		clear_buffer(buffer);		
    541a:	80 e0       	ldi	r24, 0x00	; 0
    541c:	91 e0       	ldi	r25, 0x01	; 1
    541e:	0e 94 33 20 	call	0x4066	; 0x4066 <clear_buffer>
    5422:	04 c0       	rjmp	.+8      	; 0x542c <init+0x282>
		_delay_ms(1000);	
	}
	else
	{
		// Write logo from buffer
		write_buffer(buffer);
    5424:	80 e0       	ldi	r24, 0x00	; 0
    5426:	91 e0       	ldi	r25, 0x01	; 1
    5428:	0e 94 01 20 	call	0x4002	; 0x4002 <write_buffer>
    542c:	2f ef       	ldi	r18, 0xFF	; 255
    542e:	88 e0       	ldi	r24, 0x08	; 8
    5430:	9d e3       	ldi	r25, 0x3D	; 61
    5432:	21 50       	subi	r18, 0x01	; 1
    5434:	80 40       	sbci	r24, 0x00	; 0
    5436:	90 40       	sbci	r25, 0x00	; 0
    5438:	e1 f7       	brne	.-8      	; 0x5432 <init+0x288>
    543a:	00 c0       	rjmp	.+0      	; 0x543c <init+0x292>
    543c:	00 00       	nop
		_delay_ms(1000);
	}

	clear_buffer(buffer);
    543e:	80 e0       	ldi	r24, 0x00	; 0
    5440:	91 e0       	ldi	r25, 0x01	; 1
    5442:	0e 94 33 20 	call	0x4066	; 0x4066 <clear_buffer>
	write_buffer(buffer);
    5446:	80 e0       	ldi	r24, 0x00	; 0
    5448:	91 e0       	ldi	r25, 0x01	; 1
    544a:	0e 94 01 20 	call	0x4002	; 0x4002 <write_buffer>
	
	st7565_init(); // Seems necessary for KK2 mini
    544e:	0e 94 e2 1f 	call	0x3fc4	; 0x3fc4 <st7565_init>
	
	//***********************************************************
	// i2c init
	//***********************************************************	

	i2c_init();
    5452:	0e 94 7f 44 	call	0x88fe	; 0x88fe <i2c_init>
	init_i2c_gyros();
    5456:	0e 94 27 24 	call	0x484e	; 0x484e <init_i2c_gyros>
	init_i2c_accs();
    545a:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <init_i2c_accs>
	//***********************************************************
	// Remaining init tasks
	//***********************************************************

	// Display "Hold steady" message
	clear_buffer(buffer);
    545e:	80 e0       	ldi	r24, 0x00	; 0
    5460:	91 e0       	ldi	r25, 0x01	; 1
    5462:	0e 94 33 20 	call	0x4066	; 0x4066 <clear_buffer>
	st7565_command(CMD_SET_COM_NORMAL); 	// For text (not for logo)
    5466:	80 ec       	ldi	r24, 0xC0	; 192
    5468:	0e 94 d3 1f 	call	0x3fa6	; 0x3fa6 <st7565_command>
	LCD_Display_Text(263,(const unsigned char*)Verdana14,18,25);	// "Hold steady"
    546c:	29 e1       	ldi	r18, 0x19	; 25
    546e:	30 e0       	ldi	r19, 0x00	; 0
    5470:	42 e1       	ldi	r20, 0x12	; 18
    5472:	50 e0       	ldi	r21, 0x00	; 0
    5474:	6f e5       	ldi	r22, 0x5F	; 95
    5476:	71 e0       	ldi	r23, 0x01	; 1
    5478:	87 e0       	ldi	r24, 0x07	; 7
    547a:	91 e0       	ldi	r25, 0x01	; 1
    547c:	0e 94 e0 21 	call	0x43c0	; 0x43c0 <LCD_Display_Text>
	write_buffer(buffer);	
    5480:	80 e0       	ldi	r24, 0x00	; 0
    5482:	91 e0       	ldi	r25, 0x01	; 1
    5484:	0e 94 01 20 	call	0x4002	; 0x4002 <write_buffer>
	clear_buffer(buffer);
    5488:	80 e0       	ldi	r24, 0x00	; 0
    548a:	91 e0       	ldi	r25, 0x01	; 1
    548c:	0e 94 33 20 	call	0x4066	; 0x4066 <clear_buffer>
		
	// Do startup tasks
	Init_ADC();
    5490:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <Init_ADC>
	init_int();								// Initialise interrupts based on RC input mode
    5494:	0e 94 e1 2d 	call	0x5bc2	; 0x5bc2 <init_int>
	init_uart();							// Initialise UART
    5498:	0e 94 64 45 	call	0x8ac8	; 0x8ac8 <init_uart>

	// Initial gyro calibration
	if (!CalibrateGyrosSlow())
    549c:	0e 94 48 23 	call	0x4690	; 0x4690 <CalibrateGyrosSlow>
    54a0:	81 11       	cpse	r24, r1
    54a2:	28 c0       	rjmp	.+80     	; 0x54f4 <init+0x34a>
	{
		clear_buffer(buffer);
    54a4:	80 e0       	ldi	r24, 0x00	; 0
    54a6:	91 e0       	ldi	r25, 0x01	; 1
    54a8:	0e 94 33 20 	call	0x4066	; 0x4066 <clear_buffer>
		LCD_Display_Text(61,(const unsigned char*)Verdana14,25,25); // "Cal. failed"
    54ac:	29 e1       	ldi	r18, 0x19	; 25
    54ae:	30 e0       	ldi	r19, 0x00	; 0
    54b0:	49 e1       	ldi	r20, 0x19	; 25
    54b2:	50 e0       	ldi	r21, 0x00	; 0
    54b4:	6f e5       	ldi	r22, 0x5F	; 95
    54b6:	71 e0       	ldi	r23, 0x01	; 1
    54b8:	8d e3       	ldi	r24, 0x3D	; 61
    54ba:	90 e0       	ldi	r25, 0x00	; 0
    54bc:	0e 94 e0 21 	call	0x43c0	; 0x43c0 <LCD_Display_Text>
		write_buffer(buffer);
    54c0:	80 e0       	ldi	r24, 0x00	; 0
    54c2:	91 e0       	ldi	r25, 0x01	; 1
    54c4:	0e 94 01 20 	call	0x4002	; 0x4002 <write_buffer>
    54c8:	2f ef       	ldi	r18, 0xFF	; 255
    54ca:	88 e0       	ldi	r24, 0x08	; 8
    54cc:	9d e3       	ldi	r25, 0x3D	; 61
    54ce:	21 50       	subi	r18, 0x01	; 1
    54d0:	80 40       	sbci	r24, 0x00	; 0
    54d2:	90 40       	sbci	r25, 0x00	; 0
    54d4:	e1 f7       	brne	.-8      	; 0x54ce <init+0x324>
    54d6:	00 c0       	rjmp	.+0      	; 0x54d8 <init+0x32e>
    54d8:	00 00       	nop
		_delay_ms(1000);
		
		// Reset
		cli();
    54da:	f8 94       	cli
		wdt_enable(WDTO_15MS);				// Watchdog on, 15ms
    54dc:	28 e0       	ldi	r18, 0x08	; 8
    54de:	88 e1       	ldi	r24, 0x18	; 24
    54e0:	90 e0       	ldi	r25, 0x00	; 0
    54e2:	0f b6       	in	r0, 0x3f	; 63
    54e4:	f8 94       	cli
    54e6:	a8 95       	wdr
    54e8:	80 93 60 00 	sts	0x0060, r24
    54ec:	0f be       	out	0x3f, r0	; 63
    54ee:	20 93 60 00 	sts	0x0060, r18
    54f2:	ff cf       	rjmp	.-2      	; 0x54f2 <init+0x348>
		while(1);							// Wait for reboot
	}

	// Update voltage detection
	SystemVoltage = GetVbat();				// Check power-up battery voltage
    54f4:	0e 94 c4 45 	call	0x8b88	; 0x8b88 <GetVbat>
    54f8:	90 93 25 05 	sts	0x0525, r25
    54fc:	80 93 24 05 	sts	0x0524, r24
	UpdateLimits();							// Update travel and trigger limits
    5500:	0e 94 1d 36 	call	0x6c3a	; 0x6c3a <UpdateLimits>

	// Disarm on start-up if Armed setting is ARMABLE
	if (Config.ArmMode == ARMABLE)
    5504:	80 91 2b 06 	lds	r24, 0x062B
    5508:	81 30       	cpi	r24, 0x01	; 1
    550a:	29 f4       	brne	.+10     	; 0x5516 <init+0x36c>
	{
		General_error |= (1 << DISARMED); 	// Set disarmed bit
    550c:	80 91 16 05 	lds	r24, 0x0516
    5510:	84 60       	ori	r24, 0x04	; 4
    5512:	80 93 16 05 	sts	0x0516, r24
	}

	// Check to see that throttle is low if RC detected
	if (Interrupted)
    5516:	80 91 ba 07 	lds	r24, 0x07BA
    551a:	88 23       	and	r24, r24
    551c:	69 f0       	breq	.+26     	; 0x5538 <init+0x38e>
	{
		RxGetChannels();
    551e:	0e 94 fa 42 	call	0x85f4	; 0x85f4 <RxGetChannels>
		if (MonopolarThrottle > THROTTLEIDLE)
    5522:	80 91 19 08 	lds	r24, 0x0819
    5526:	90 91 1a 08 	lds	r25, 0x081A
    552a:	c3 97       	sbiw	r24, 0x33	; 51
    552c:	2c f0       	brlt	.+10     	; 0x5538 <init+0x38e>
		{
			General_error |= (1 << THROTTLE_HIGH); 	// Set throttle high error bit
    552e:	80 91 16 05 	lds	r24, 0x0516
    5532:	81 60       	ori	r24, 0x01	; 1
    5534:	80 93 16 05 	sts	0x0516, r24
		}
	}

	// Reset IMU
	reset_IMU();
    5538:	0e 94 8c 28 	call	0x5118	; 0x5118 <reset_IMU>

	// Beep that init is complete
	menu_beep(1);
    553c:	81 e0       	ldi	r24, 0x01	; 1

} // init()
    553e:	cf 91       	pop	r28

	// Reset IMU
	reset_IMU();

	// Beep that init is complete
	menu_beep(1);
    5540:	0c 94 97 30 	jmp	0x612e	; 0x612e <menu_beep>

00005544 <__vector_18>:
//************************************************************
//* Timer 0 overflow handler for extending TMR1
//************************************************************

ISR(TIMER0_OVF_vect)
{
    5544:	1f 92       	push	r1
    5546:	0f 92       	push	r0
    5548:	0f b6       	in	r0, 0x3f	; 63
    554a:	0f 92       	push	r0
    554c:	11 24       	eor	r1, r1
    554e:	8f 93       	push	r24
    5550:	9f 93       	push	r25
	TMR0_counter++;
    5552:	80 91 bd 07 	lds	r24, 0x07BD
    5556:	90 91 be 07 	lds	r25, 0x07BE
    555a:	01 96       	adiw	r24, 0x01	; 1
    555c:	90 93 be 07 	sts	0x07BE, r25
    5560:	80 93 bd 07 	sts	0x07BD, r24
}
    5564:	9f 91       	pop	r25
    5566:	8f 91       	pop	r24
    5568:	0f 90       	pop	r0
    556a:	0f be       	out	0x3f, r0	; 63
    556c:	0f 90       	pop	r0
    556e:	1f 90       	pop	r1
    5570:	18 95       	reti

00005572 <__vector_2>:
//* Standard PWM mode
//* Sequential PWM inputs from a normal RC receiver
//************************************************************

ISR(INT1_vect)
{
    5572:	1f 92       	push	r1
    5574:	0f 92       	push	r0
    5576:	0f b6       	in	r0, 0x3f	; 63
    5578:	0f 92       	push	r0
    557a:	11 24       	eor	r1, r1
    557c:	2f 93       	push	r18
    557e:	3f 93       	push	r19
    5580:	8f 93       	push	r24
    5582:	9f 93       	push	r25
	// Log interrupts that occur during PWM generation
	if (JitterGate)	JitterFlag = true;	
    5584:	80 91 d4 07 	lds	r24, 0x07D4
    5588:	88 23       	and	r24, r24
    558a:	19 f0       	breq	.+6      	; 0x5592 <__vector_2+0x20>
    558c:	81 e0       	ldi	r24, 0x01	; 1
    558e:	80 93 d5 07 	sts	0x07D5, r24

	if (RX_ROLL)	// Rising
    5592:	4b 9b       	sbis	0x09, 3	; 9
    5594:	09 c0       	rjmp	.+18     	; 0x55a8 <__vector_2+0x36>
	{
		RxChannelStart[AILERON] = TCNT1;
    5596:	80 91 84 00 	lds	r24, 0x0084
    559a:	90 91 85 00 	lds	r25, 0x0085
    559e:	90 93 c2 07 	sts	0x07C2, r25
    55a2:	80 93 c1 07 	sts	0x07C1, r24
    55a6:	14 c0       	rjmp	.+40     	; 0x55d0 <__vector_2+0x5e>
	} 
	else 
	{				// Falling
		RxChannel[AILERON] = TCNT1 - RxChannelStart[AILERON];
    55a8:	80 91 84 00 	lds	r24, 0x0084
    55ac:	90 91 85 00 	lds	r25, 0x0085
    55b0:	20 91 c1 07 	lds	r18, 0x07C1
    55b4:	30 91 c2 07 	lds	r19, 0x07C2
    55b8:	82 1b       	sub	r24, r18
    55ba:	93 0b       	sbc	r25, r19
    55bc:	90 93 ad 07 	sts	0x07AD, r25
    55c0:	80 93 ac 07 	sts	0x07AC, r24
		if (Config.PWM_Sync == AILERON) 
    55c4:	80 91 cc 05 	lds	r24, 0x05CC
    55c8:	81 30       	cpi	r24, 0x01	; 1
    55ca:	11 f4       	brne	.+4      	; 0x55d0 <__vector_2+0x5e>
		{
			Interrupted = true;						// Signal that interrupt block has finished
    55cc:	80 93 ba 07 	sts	0x07BA, r24
		}
	}
}
    55d0:	9f 91       	pop	r25
    55d2:	8f 91       	pop	r24
    55d4:	3f 91       	pop	r19
    55d6:	2f 91       	pop	r18
    55d8:	0f 90       	pop	r0
    55da:	0f be       	out	0x3f, r0	; 63
    55dc:	0f 90       	pop	r0
    55de:	1f 90       	pop	r1
    55e0:	18 95       	reti

000055e2 <__vector_1>:

ISR(INT0_vect)
{
    55e2:	1f 92       	push	r1
    55e4:	0f 92       	push	r0
    55e6:	0f b6       	in	r0, 0x3f	; 63
    55e8:	0f 92       	push	r0
    55ea:	11 24       	eor	r1, r1
    55ec:	2f 93       	push	r18
    55ee:	3f 93       	push	r19
    55f0:	8f 93       	push	r24
    55f2:	9f 93       	push	r25
	if (JitterGate)	JitterFlag = true;	
    55f4:	80 91 d4 07 	lds	r24, 0x07D4
    55f8:	88 23       	and	r24, r24
    55fa:	19 f0       	breq	.+6      	; 0x5602 <__vector_1+0x20>
    55fc:	81 e0       	ldi	r24, 0x01	; 1
    55fe:	80 93 d5 07 	sts	0x07D5, r24

	if (RX_PITCH)	// Rising 
    5602:	4a 9b       	sbis	0x09, 2	; 9
    5604:	09 c0       	rjmp	.+18     	; 0x5618 <__vector_1+0x36>
	{
		RxChannelStart[ELEVATOR] = TCNT1;
    5606:	80 91 84 00 	lds	r24, 0x0084
    560a:	90 91 85 00 	lds	r25, 0x0085
    560e:	90 93 c4 07 	sts	0x07C4, r25
    5612:	80 93 c3 07 	sts	0x07C3, r24
    5616:	15 c0       	rjmp	.+42     	; 0x5642 <__vector_1+0x60>
	} 
	else 
	{				// Falling
		RxChannel[ELEVATOR] = TCNT1 - RxChannelStart[ELEVATOR];
    5618:	80 91 84 00 	lds	r24, 0x0084
    561c:	90 91 85 00 	lds	r25, 0x0085
    5620:	20 91 c3 07 	lds	r18, 0x07C3
    5624:	30 91 c4 07 	lds	r19, 0x07C4
    5628:	82 1b       	sub	r24, r18
    562a:	93 0b       	sbc	r25, r19
    562c:	90 93 af 07 	sts	0x07AF, r25
    5630:	80 93 ae 07 	sts	0x07AE, r24
		if (Config.PWM_Sync == ELEVATOR) 
    5634:	80 91 cc 05 	lds	r24, 0x05CC
    5638:	82 30       	cpi	r24, 0x02	; 2
    563a:	19 f4       	brne	.+6      	; 0x5642 <__vector_1+0x60>
		{
			Interrupted = true;						// Signal that interrupt block has finished
    563c:	81 e0       	ldi	r24, 0x01	; 1
    563e:	80 93 ba 07 	sts	0x07BA, r24
		}
	}
}
    5642:	9f 91       	pop	r25
    5644:	8f 91       	pop	r24
    5646:	3f 91       	pop	r19
    5648:	2f 91       	pop	r18
    564a:	0f 90       	pop	r0
    564c:	0f be       	out	0x3f, r0	; 63
    564e:	0f 90       	pop	r0
    5650:	1f 90       	pop	r1
    5652:	18 95       	reti

00005654 <__vector_7>:

ISR(PCINT3_vect)
{
    5654:	1f 92       	push	r1
    5656:	0f 92       	push	r0
    5658:	0f b6       	in	r0, 0x3f	; 63
    565a:	0f 92       	push	r0
    565c:	11 24       	eor	r1, r1
    565e:	2f 93       	push	r18
    5660:	3f 93       	push	r19
    5662:	8f 93       	push	r24
    5664:	9f 93       	push	r25
	if (JitterGate)	JitterFlag = true;	
    5666:	80 91 d4 07 	lds	r24, 0x07D4
    566a:	88 23       	and	r24, r24
    566c:	19 f0       	breq	.+6      	; 0x5674 <__vector_7+0x20>
    566e:	81 e0       	ldi	r24, 0x01	; 1
    5670:	80 93 d5 07 	sts	0x07D5, r24
		
	if (RX_COLL)	// Rising
    5674:	48 9b       	sbis	0x09, 0	; 9
    5676:	09 c0       	rjmp	.+18     	; 0x568a <__vector_7+0x36>
	{
		RxChannelStart[THROTTLE] = TCNT1;
    5678:	80 91 84 00 	lds	r24, 0x0084
    567c:	90 91 85 00 	lds	r25, 0x0085
    5680:	90 93 c0 07 	sts	0x07C0, r25
    5684:	80 93 bf 07 	sts	0x07BF, r24
    5688:	15 c0       	rjmp	.+42     	; 0x56b4 <__vector_7+0x60>
	} 
	else 
	{				// Falling
		RxChannel[THROTTLE] = TCNT1 - RxChannelStart[THROTTLE];
    568a:	80 91 84 00 	lds	r24, 0x0084
    568e:	90 91 85 00 	lds	r25, 0x0085
    5692:	20 91 bf 07 	lds	r18, 0x07BF
    5696:	30 91 c0 07 	lds	r19, 0x07C0
    569a:	82 1b       	sub	r24, r18
    569c:	93 0b       	sbc	r25, r19
    569e:	90 93 ab 07 	sts	0x07AB, r25
    56a2:	80 93 aa 07 	sts	0x07AA, r24
		if (Config.PWM_Sync == THROTTLE) 
    56a6:	80 91 cc 05 	lds	r24, 0x05CC
    56aa:	81 11       	cpse	r24, r1
    56ac:	03 c0       	rjmp	.+6      	; 0x56b4 <__vector_7+0x60>
		{
			Interrupted = true;						// Signal that interrupt block has finished
    56ae:	81 e0       	ldi	r24, 0x01	; 1
    56b0:	80 93 ba 07 	sts	0x07BA, r24
		}
	}
}
    56b4:	9f 91       	pop	r25
    56b6:	8f 91       	pop	r24
    56b8:	3f 91       	pop	r19
    56ba:	2f 91       	pop	r18
    56bc:	0f 90       	pop	r0
    56be:	0f be       	out	0x3f, r0	; 63
    56c0:	0f 90       	pop	r0
    56c2:	1f 90       	pop	r1
    56c4:	18 95       	reti

000056c6 <__vector_5>:


ISR(PCINT1_vect)
{
    56c6:	1f 92       	push	r1
    56c8:	0f 92       	push	r0
    56ca:	0f b6       	in	r0, 0x3f	; 63
    56cc:	0f 92       	push	r0
    56ce:	11 24       	eor	r1, r1
    56d0:	2f 93       	push	r18
    56d2:	3f 93       	push	r19
    56d4:	8f 93       	push	r24
    56d6:	9f 93       	push	r25
	if (JitterGate)	JitterFlag = true;
    56d8:	80 91 d4 07 	lds	r24, 0x07D4
    56dc:	88 23       	and	r24, r24
    56de:	19 f0       	breq	.+6      	; 0x56e6 <__vector_5+0x20>
    56e0:	81 e0       	ldi	r24, 0x01	; 1
    56e2:	80 93 d5 07 	sts	0x07D5, r24

	if (RX_AUX)	// Rising
    56e6:	18 9b       	sbis	0x03, 0	; 3
    56e8:	09 c0       	rjmp	.+18     	; 0x56fc <__vector_5+0x36>
	{
		RxChannelStart[GEAR] = TCNT1;
    56ea:	80 91 84 00 	lds	r24, 0x0084
    56ee:	90 91 85 00 	lds	r25, 0x0085
    56f2:	90 93 c8 07 	sts	0x07C8, r25
    56f6:	80 93 c7 07 	sts	0x07C7, r24
    56fa:	15 c0       	rjmp	.+42     	; 0x5726 <__vector_5+0x60>
	} 
	else 
	{				// Falling
		RxChannel[GEAR] = TCNT1 - RxChannelStart[GEAR];
    56fc:	80 91 84 00 	lds	r24, 0x0084
    5700:	90 91 85 00 	lds	r25, 0x0085
    5704:	20 91 c7 07 	lds	r18, 0x07C7
    5708:	30 91 c8 07 	lds	r19, 0x07C8
    570c:	82 1b       	sub	r24, r18
    570e:	93 0b       	sbc	r25, r19
    5710:	90 93 b3 07 	sts	0x07B3, r25
    5714:	80 93 b2 07 	sts	0x07B2, r24
		if (Config.PWM_Sync == GEAR) 
    5718:	80 91 cc 05 	lds	r24, 0x05CC
    571c:	84 30       	cpi	r24, 0x04	; 4
    571e:	19 f4       	brne	.+6      	; 0x5726 <__vector_5+0x60>
		{
			Interrupted = true;						// Signal that interrupt block has finished
    5720:	81 e0       	ldi	r24, 0x01	; 1
    5722:	80 93 ba 07 	sts	0x07BA, r24
		}
	}
}
    5726:	9f 91       	pop	r25
    5728:	8f 91       	pop	r24
    572a:	3f 91       	pop	r19
    572c:	2f 91       	pop	r18
    572e:	0f 90       	pop	r0
    5730:	0f be       	out	0x3f, r0	; 63
    5732:	0f 90       	pop	r0
    5734:	1f 90       	pop	r1
    5736:	18 95       	reti

00005738 <TIM16_ReadTCNT1>:
{
	uint8_t sreg;
	uint16_t i;
	
	/* Save global interrupt flag */
	sreg = SREG;
    5738:	2f b7       	in	r18, 0x3f	; 63
	
	/* Disable interrupts */
	cli();
    573a:	f8 94       	cli
	
	/* Read TCNTn into i */
	i = TCNT1;
    573c:	80 91 84 00 	lds	r24, 0x0084
    5740:	90 91 85 00 	lds	r25, 0x0085
	
	/* Restore global interrupt flag */
	SREG = sreg;
    5744:	2f bf       	out	0x3f, r18	; 63
	return i;
}
    5746:	08 95       	ret

00005748 <__vector_3>:
// Compacted CPPM RX code thanks to Edgar
//
//************************************************************

ISR(INT2_vect)
{
    5748:	1f 92       	push	r1
    574a:	0f 92       	push	r0
    574c:	0f b6       	in	r0, 0x3f	; 63
    574e:	0f 92       	push	r0
    5750:	11 24       	eor	r1, r1
    5752:	2f 93       	push	r18
    5754:	3f 93       	push	r19
    5756:	4f 93       	push	r20
    5758:	5f 93       	push	r21
    575a:	6f 93       	push	r22
    575c:	7f 93       	push	r23
    575e:	8f 93       	push	r24
    5760:	9f 93       	push	r25
    5762:	af 93       	push	r26
    5764:	bf 93       	push	r27
    5766:	ef 93       	push	r30
    5768:	ff 93       	push	r31
	if (JitterGate)	JitterFlag = true;	
    576a:	80 91 d4 07 	lds	r24, 0x07D4
    576e:	88 23       	and	r24, r24
    5770:	19 f0       	breq	.+6      	; 0x5778 <__vector_3+0x30>
    5772:	81 e0       	ldi	r24, 0x01	; 1
    5774:	80 93 d5 07 	sts	0x07D5, r24

    // Backup TCNT1
    uint16_t tCount;
	
    tCount = TIM16_ReadTCNT1();
    5778:	0e 94 9c 2b 	call	0x5738	; 0x5738 <TIM16_ReadTCNT1>

	uint8_t curChannel;
	uint8_t prevChannel;

	if (Config.RxMode != CPPM_MODE)
    577c:	20 91 ca 05 	lds	r18, 0x05CA
    5780:	22 23       	and	r18, r18
    5782:	d1 f0       	breq	.+52     	; 0x57b8 <__vector_3+0x70>
	{
		if (RX_YAW)	// Rising
    5784:	1a 9b       	sbis	0x03, 2	; 3
    5786:	05 c0       	rjmp	.+10     	; 0x5792 <__vector_3+0x4a>
		{
			RxChannelStart[RUDDER] = tCount;
    5788:	90 93 c6 07 	sts	0x07C6, r25
    578c:	80 93 c5 07 	sts	0x07C5, r24
    5790:	86 c0       	rjmp	.+268    	; 0x589e <__vector_3+0x156>
		} 
		else 
		{			// Falling
			RxChannel[RUDDER] = tCount - RxChannelStart[RUDDER];
    5792:	20 91 c5 07 	lds	r18, 0x07C5
    5796:	30 91 c6 07 	lds	r19, 0x07C6
    579a:	82 1b       	sub	r24, r18
    579c:	93 0b       	sbc	r25, r19
    579e:	90 93 b1 07 	sts	0x07B1, r25
    57a2:	80 93 b0 07 	sts	0x07B0, r24
			if (Config.PWM_Sync == RUDDER) 
    57a6:	80 91 cc 05 	lds	r24, 0x05CC
    57aa:	83 30       	cpi	r24, 0x03	; 3
    57ac:	09 f0       	breq	.+2      	; 0x57b0 <__vector_3+0x68>
    57ae:	77 c0       	rjmp	.+238    	; 0x589e <__vector_3+0x156>
			{
				Interrupted = true;					// Signal that interrupt block has finished
    57b0:	81 e0       	ldi	r24, 0x01	; 1
    57b2:	80 93 ba 07 	sts	0x07BA, r24
    57b6:	73 c0       	rjmp	.+230    	; 0x589e <__vector_3+0x156>
	// CPPM receivers.
	//************************************************************
	else
	{
		// Only respond to negative-going interrupts
		if (CPPM) return;
    57b8:	1a 99       	sbic	0x03, 2	; 3
    57ba:	71 c0       	rjmp	.+226    	; 0x589e <__vector_3+0x156>

		// Check to see if previous period was a sync pulse or too small to be valid
		// If so, reset the channel number
		if (((tCount - PPMSyncStart) > SYNCPULSEWIDTH) || ((tCount - PPMSyncStart) < MINPULSEWIDTH))
    57bc:	20 91 d2 07 	lds	r18, 0x07D2
    57c0:	30 91 d3 07 	lds	r19, 0x07D3
    57c4:	ac 01       	movw	r20, r24
    57c6:	42 1b       	sub	r20, r18
    57c8:	53 0b       	sbc	r21, r19
    57ca:	9a 01       	movw	r18, r20
    57cc:	2f 35       	cpi	r18, 0x5F	; 95
    57ce:	3a 41       	sbci	r19, 0x1A	; 26
    57d0:	58 f4       	brcc	.+22     	; 0x57e8 <__vector_3+0xa0>
    57d2:	20 91 d2 07 	lds	r18, 0x07D2
    57d6:	30 91 d3 07 	lds	r19, 0x07D3
    57da:	ac 01       	movw	r20, r24
    57dc:	42 1b       	sub	r20, r18
    57de:	53 0b       	sbc	r21, r19
    57e0:	9a 01       	movw	r18, r20
    57e2:	2e 3e       	cpi	r18, 0xEE	; 238
    57e4:	32 40       	sbci	r19, 0x02	; 2
    57e6:	10 f4       	brcc	.+4      	; 0x57ec <__vector_3+0xa4>
		{
			ch_num = 0;
    57e8:	10 92 d1 07 	sts	0x07D1, r1
		}

		// Update PPMSyncStart with current value
		PPMSyncStart = tCount;
    57ec:	90 93 d3 07 	sts	0x07D3, r25
    57f0:	80 93 d2 07 	sts	0x07D2, r24

		// Get the channel number of the current channel in the requested channel order
        curChannel = Config.ChannelOrder[ch_num];
    57f4:	e0 91 d1 07 	lds	r30, 0x07D1
    57f8:	f0 e0       	ldi	r31, 0x00	; 0
    57fa:	ef 55       	subi	r30, 0x5F	; 95
    57fc:	fa 4f       	sbci	r31, 0xFA	; 250
    57fe:	e1 81       	ldd	r30, Z+1	; 0x01

		// Set up previous channel number based on the requested channel order
		if (ch_num > 0)
    5800:	20 91 d1 07 	lds	r18, 0x07D1
    5804:	22 23       	and	r18, r18
    5806:	39 f0       	breq	.+14     	; 0x5816 <__vector_3+0xce>
		{
			prevChannel = Config.ChannelOrder[ch_num-1];
    5808:	a0 91 d1 07 	lds	r26, 0x07D1
    580c:	b0 e0       	ldi	r27, 0x00	; 0
    580e:	af 55       	subi	r26, 0x5F	; 95
    5810:	ba 4f       	sbci	r27, 0xFA	; 250
    5812:	2c 91       	ld	r18, X
    5814:	01 c0       	rjmp	.+2      	; 0x5818 <__vector_3+0xd0>
		}
		else
		{
			prevChannel = 0;
    5816:	20 e0       	ldi	r18, 0x00	; 0
		}

		// Measure the channel data only for the first MAX_CPPM_CHANNELS (currently 8)
		// Prevent code from over-running RxChannelStart[]
        if (ch_num < MAX_CPPM_CHANNELS)
    5818:	30 91 d1 07 	lds	r19, 0x07D1
    581c:	38 30       	cpi	r19, 0x08	; 8
    581e:	38 f4       	brcc	.+14     	; 0x582e <__vector_3+0xe6>
		{
            RxChannelStart[curChannel] = tCount;
    5820:	f0 e0       	ldi	r31, 0x00	; 0
    5822:	ee 0f       	add	r30, r30
    5824:	ff 1f       	adc	r31, r31
    5826:	e1 54       	subi	r30, 0x41	; 65
    5828:	f8 4f       	sbci	r31, 0xF8	; 248
    582a:	91 83       	std	Z+1, r25	; 0x01
    582c:	80 83       	st	Z, r24
		}

		// When ch_num = 0, the first channel has not yet been measured.
		// That only occurs at the second pulse. Prevent code from over-running RxChannel[]
        if ((ch_num > 0) && (ch_num <= MAX_CPPM_CHANNELS))
    582e:	30 91 d1 07 	lds	r19, 0x07D1
    5832:	33 23       	and	r19, r19
    5834:	99 f0       	breq	.+38     	; 0x585c <__vector_3+0x114>
    5836:	30 91 d1 07 	lds	r19, 0x07D1
    583a:	39 30       	cpi	r19, 0x09	; 9
    583c:	78 f4       	brcc	.+30     	; 0x585c <__vector_3+0x114>
        {
		   RxChannel[prevChannel] = tCount - RxChannelStart[prevChannel];
    583e:	30 e0       	ldi	r19, 0x00	; 0
    5840:	22 0f       	add	r18, r18
    5842:	33 1f       	adc	r19, r19
    5844:	f9 01       	movw	r30, r18
    5846:	e1 54       	subi	r30, 0x41	; 65
    5848:	f8 4f       	sbci	r31, 0xF8	; 248
    584a:	40 81       	ld	r20, Z
    584c:	51 81       	ldd	r21, Z+1	; 0x01
    584e:	84 1b       	sub	r24, r20
    5850:	95 0b       	sbc	r25, r21
    5852:	f9 01       	movw	r30, r18
    5854:	e6 55       	subi	r30, 0x56	; 86
    5856:	f8 4f       	sbci	r31, 0xF8	; 248
    5858:	91 83       	std	Z+1, r25	; 0x01
    585a:	80 83       	st	Z, r24
		}

        // Increment to the next channel
		ch_num++;
    585c:	80 91 d1 07 	lds	r24, 0x07D1
    5860:	8f 5f       	subi	r24, 0xFF	; 255
    5862:	80 93 d1 07 	sts	0x07D1, r24

		// Work out the highest channel number automatically.
		// Update the maximum channel seen so far.
		if (ch_num > max_chan) 
    5866:	90 91 d1 07 	lds	r25, 0x07D1
    586a:	80 91 bb 07 	lds	r24, 0x07BB
    586e:	89 17       	cp	r24, r25
    5870:	28 f4       	brcc	.+10     	; 0x587c <__vector_3+0x134>
		{
			max_chan = ch_num;					// Update max channel number
    5872:	80 91 d1 07 	lds	r24, 0x07D1
    5876:	80 93 bb 07 	sts	0x07BB, r24
    587a:	09 c0       	rjmp	.+18     	; 0x588e <__vector_3+0x146>
		}
		// If the current channel is the highest channel, CPPM is complete
		else if (ch_num == max_chan)
    587c:	90 91 d1 07 	lds	r25, 0x07D1
    5880:	80 91 bb 07 	lds	r24, 0x07BB
    5884:	98 13       	cpse	r25, r24
    5886:	03 c0       	rjmp	.+6      	; 0x588e <__vector_3+0x146>
		{
			Interrupted = true;					// Signal that interrupt block has finished
    5888:	81 e0       	ldi	r24, 0x01	; 1
    588a:	80 93 ba 07 	sts	0x07BA, r24
		}
	
		// If the signal is ever lost, reset measured max channel number
		// and force a recalculation
		if (Overdue)
    588e:	80 91 0f 05 	lds	r24, 0x050F
    5892:	88 23       	and	r24, r24
    5894:	21 f0       	breq	.+8      	; 0x589e <__vector_3+0x156>
		{
			max_chan = 0;
    5896:	10 92 bb 07 	sts	0x07BB, r1
			Overdue = false;
    589a:	10 92 0f 05 	sts	0x050F, r1
		}
	}
} // ISR(INT2_vect)
    589e:	ff 91       	pop	r31
    58a0:	ef 91       	pop	r30
    58a2:	bf 91       	pop	r27
    58a4:	af 91       	pop	r26
    58a6:	9f 91       	pop	r25
    58a8:	8f 91       	pop	r24
    58aa:	7f 91       	pop	r23
    58ac:	6f 91       	pop	r22
    58ae:	5f 91       	pop	r21
    58b0:	4f 91       	pop	r20
    58b2:	3f 91       	pop	r19
    58b4:	2f 91       	pop	r18
    58b6:	0f 90       	pop	r0
    58b8:	0f be       	out	0x3f, r0	; 63
    58ba:	0f 90       	pop	r0
    58bc:	1f 90       	pop	r1
    58be:	18 95       	reti

000058c0 <__vector_20>:
//************************************************************
//* Serial receive interrupt
//************************************************************

ISR(USART0_RX_vect)
{
    58c0:	1f 92       	push	r1
    58c2:	0f 92       	push	r0
    58c4:	0f b6       	in	r0, 0x3f	; 63
    58c6:	0f 92       	push	r0
    58c8:	11 24       	eor	r1, r1
    58ca:	2f 93       	push	r18
    58cc:	3f 93       	push	r19
    58ce:	4f 93       	push	r20
    58d0:	5f 93       	push	r21
    58d2:	6f 93       	push	r22
    58d4:	7f 93       	push	r23
    58d6:	8f 93       	push	r24
    58d8:	9f 93       	push	r25
    58da:	af 93       	push	r26
    58dc:	bf 93       	push	r27
    58de:	cf 93       	push	r28
    58e0:	ef 93       	push	r30
    58e2:	ff 93       	push	r31
	//************************************************************
	//* Common entry code
	//************************************************************

	// Log interrupts that occur during PWM generation
	if (JitterGate)	JitterFlag = true;
    58e4:	80 91 d4 07 	lds	r24, 0x07D4
    58e8:	88 23       	and	r24, r24
    58ea:	19 f0       	breq	.+6      	; 0x58f2 <__vector_20+0x32>
    58ec:	81 e0       	ldi	r24, 0x01	; 1
    58ee:	80 93 d5 07 	sts	0x07D5, r24

	// Read byte first
	temp = UDR0;
    58f2:	c0 91 c6 00 	lds	r28, 0x00C6

	// Save current time stamp
	Save_TCNT1 = TIM16_ReadTCNT1();
    58f6:	0e 94 9c 2b 	call	0x5738	; 0x5738 <TIM16_ReadTCNT1>
	
	// Work out frame rate properly
	// Note that CurrentPeriod cannot be larger than 26.2ms
	
	//CurrentPeriod = Save_TCNT1 - PPMSyncStart;
	if (Save_TCNT1 < PPMSyncStart)
    58fa:	20 91 d2 07 	lds	r18, 0x07D2
    58fe:	30 91 d3 07 	lds	r19, 0x07D3
	{
		CurrentPeriod = (65536 - PPMSyncStart + Save_TCNT1);
	}
	else
	{
		CurrentPeriod = (Save_TCNT1 - PPMSyncStart);
    5902:	20 91 d2 07 	lds	r18, 0x07D2
    5906:	30 91 d3 07 	lds	r19, 0x07D3
    590a:	ac 01       	movw	r20, r24
    590c:	42 1b       	sub	r20, r18
    590e:	53 0b       	sbc	r21, r19
    5910:	9a 01       	movw	r18, r20
	}

	// Handle start of new packet
	if (CurrentPeriod > PACKET_TIMER) // 1.0ms
    5912:	25 3c       	cpi	r18, 0xC5	; 197
    5914:	59 e0       	ldi	r21, 0x09	; 9
    5916:	35 07       	cpc	r19, r21
    5918:	90 f0       	brcs	.+36     	; 0x593e <__vector_20+0x7e>
	{
		// Reset variables
		rcindex = 0;
    591a:	10 92 a9 07 	sts	0x07A9, r1
		bytecount = 0;
    591e:	10 92 bc 07 	sts	0x07BC, r1
		ch_num = 0;
    5922:	10 92 d1 07 	sts	0x07D1, r1
		checksum = 0;
    5926:	10 92 d7 07 	sts	0x07D7, r1
    592a:	10 92 d6 07 	sts	0x07D6, r1
		chanmask16 = 0;
    592e:	10 92 d0 07 	sts	0x07D0, r1
    5932:	10 92 cf 07 	sts	0x07CF, r1

		// Save frame rate to global
		FrameRate = CurrentPeriod;
    5936:	30 93 d9 07 	sts	0x07D9, r19
    593a:	20 93 d8 07 	sts	0x07D8, r18
	}

	// Timestamp this interrupt
	PPMSyncStart = Save_TCNT1;
    593e:	90 93 d3 07 	sts	0x07D3, r25
    5942:	80 93 d2 07 	sts	0x07D2, r24
	
	// Put received byte in buffer if space available
	if (rcindex < SBUFFER_SIZE)
    5946:	80 91 a9 07 	lds	r24, 0x07A9
    594a:	89 31       	cpi	r24, 0x19	; 25
    594c:	50 f4       	brcc	.+20     	; 0x5962 <__vector_20+0xa2>
	{
		sBuffer[rcindex++] = temp;			
    594e:	e0 91 a9 07 	lds	r30, 0x07A9
    5952:	81 e0       	ldi	r24, 0x01	; 1
    5954:	8e 0f       	add	r24, r30
    5956:	80 93 a9 07 	sts	0x07A9, r24
    595a:	f0 e0       	ldi	r31, 0x00	; 0
    595c:	e6 5c       	subi	r30, 0xC6	; 198
    595e:	fa 4f       	sbci	r31, 0xFA	; 250
    5960:	c0 83       	st	Z, r28
	//* 	bit0 = n/a
	//* 24 endbyte = 00000000b (SBUS) or (data % 0xCF) (SBUS2)
	//*
	//************************************************************

	if (Config.RxMode == SBUS)
    5962:	80 91 ca 05 	lds	r24, 0x05CA
    5966:	82 30       	cpi	r24, 0x02	; 2
    5968:	09 f0       	breq	.+2      	; 0x596c <__vector_20+0xac>
    596a:	90 c0       	rjmp	.+288    	; 0x5a8c <__vector_20+0x1cc>
	{
		// Flag that packet has completed
		if ((bytecount == 24) && ((temp == 0x00) || ((temp % 0xCF) == 0x04)))
    596c:	80 91 bc 07 	lds	r24, 0x07BC
    5970:	88 31       	cpi	r24, 0x18	; 24
    5972:	09 f0       	breq	.+2      	; 0x5976 <__vector_20+0xb6>
    5974:	fc c0       	rjmp	.+504    	; 0x5b6e <__vector_20+0x2ae>
    5976:	cc 23       	and	r28, r28
    5978:	59 f0       	breq	.+22     	; 0x5990 <__vector_20+0xd0>
    597a:	81 e0       	ldi	r24, 0x01	; 1
    597c:	cf 3c       	cpi	r28, 0xCF	; 207
    597e:	08 f4       	brcc	.+2      	; 0x5982 <__vector_20+0xc2>
    5980:	80 e0       	ldi	r24, 0x00	; 0
    5982:	91 e3       	ldi	r25, 0x31	; 49
    5984:	89 9f       	mul	r24, r25
    5986:	c0 0d       	add	r28, r0
    5988:	11 24       	eor	r1, r1
    598a:	c4 30       	cpi	r28, 0x04	; 4
    598c:	09 f0       	breq	.+2      	; 0x5990 <__vector_20+0xd0>
    598e:	ef c0       	rjmp	.+478    	; 0x5b6e <__vector_20+0x2ae>
		{
			// If frame lost, ignore packet
			if ((sBuffer[23] & 0x20) == 0)
    5990:	80 91 51 05 	lds	r24, 0x0551
    5994:	85 fd       	sbrc	r24, 5
    5996:	eb c0       	rjmp	.+470    	; 0x5b6e <__vector_20+0x2ae>
			{
				// RC sync established
				Interrupted = true;
    5998:	81 e0       	ldi	r24, 0x01	; 1
    599a:	80 93 ba 07 	sts	0x07BA, r24
    599e:	80 e0       	ldi	r24, 0x00	; 0
    59a0:	90 e0       	ldi	r25, 0x00	; 0

				// Clear channel data
				for (j = 0; j < MAX_RC_CHANNELS; j++)
				{
					RxChannel[j] = 0;
    59a2:	fc 01       	movw	r30, r24
    59a4:	ee 0f       	add	r30, r30
    59a6:	ff 1f       	adc	r31, r31
    59a8:	e6 55       	subi	r30, 0x56	; 86
    59aa:	f8 4f       	sbci	r31, 0xF8	; 248
    59ac:	11 82       	std	Z+1, r1	; 0x01
    59ae:	10 82       	st	Z, r1
    59b0:	01 96       	adiw	r24, 0x01	; 1
			{
				// RC sync established
				Interrupted = true;

				// Clear channel data
				for (j = 0; j < MAX_RC_CHANNELS; j++)
    59b2:	88 30       	cpi	r24, 0x08	; 8
    59b4:	91 05       	cpc	r25, r1
    59b6:	a9 f7       	brne	.-22     	; 0x59a2 <__vector_20+0xe2>
    59b8:	a8 e5       	ldi	r26, 0x58	; 88
    59ba:	70 e0       	ldi	r23, 0x00	; 0
    59bc:	c0 e0       	ldi	r28, 0x00	; 0
    59be:	60 e0       	ldi	r22, 0x00	; 0
    59c0:	b1 e0       	ldi	r27, 0x01	; 1
                for (j = 0; j < 88; j++)
                {
                    if (sBuffer[sindex] & (1<<chan_mask))
                    {
						// Place the RC data into the correct channel order for the transmitted system
						RxChannel[Config.ChannelOrder[chan_shift]] |= (1<<data_mask);
    59c2:	21 e0       	ldi	r18, 0x01	; 1
    59c4:	30 e0       	ldi	r19, 0x00	; 0

                // Deconstruct S-Bus data
				// 8 channels * 11 bits = 88 bits
                for (j = 0; j < 88; j++)
                {
                    if (sBuffer[sindex] & (1<<chan_mask))
    59c6:	eb 2f       	mov	r30, r27
    59c8:	f0 e0       	ldi	r31, 0x00	; 0
    59ca:	e6 5c       	subi	r30, 0xC6	; 198
    59cc:	fa 4f       	sbci	r31, 0xFA	; 250
    59ce:	80 81       	ld	r24, Z
    59d0:	90 e0       	ldi	r25, 0x00	; 0
    59d2:	06 2e       	mov	r0, r22
    59d4:	02 c0       	rjmp	.+4      	; 0x59da <__vector_20+0x11a>
    59d6:	95 95       	asr	r25
    59d8:	87 95       	ror	r24
    59da:	0a 94       	dec	r0
    59dc:	e2 f7       	brpl	.-8      	; 0x59d6 <__vector_20+0x116>
    59de:	80 ff       	sbrs	r24, 0
    59e0:	17 c0       	rjmp	.+46     	; 0x5a10 <__vector_20+0x150>
                    {
						// Place the RC data into the correct channel order for the transmitted system
						RxChannel[Config.ChannelOrder[chan_shift]] |= (1<<data_mask);
    59e2:	ec 2f       	mov	r30, r28
    59e4:	f0 e0       	ldi	r31, 0x00	; 0
    59e6:	ef 55       	subi	r30, 0x5F	; 95
    59e8:	fa 4f       	sbci	r31, 0xFA	; 250
    59ea:	e1 81       	ldd	r30, Z+1	; 0x01
    59ec:	f0 e0       	ldi	r31, 0x00	; 0
    59ee:	ee 0f       	add	r30, r30
    59f0:	ff 1f       	adc	r31, r31
    59f2:	e6 55       	subi	r30, 0x56	; 86
    59f4:	f8 4f       	sbci	r31, 0xF8	; 248
    59f6:	80 81       	ld	r24, Z
    59f8:	91 81       	ldd	r25, Z+1	; 0x01
    59fa:	a9 01       	movw	r20, r18
    59fc:	07 2e       	mov	r0, r23
    59fe:	02 c0       	rjmp	.+4      	; 0x5a04 <__vector_20+0x144>
    5a00:	44 0f       	add	r20, r20
    5a02:	55 1f       	adc	r21, r21
    5a04:	0a 94       	dec	r0
    5a06:	e2 f7       	brpl	.-8      	; 0x5a00 <__vector_20+0x140>
    5a08:	84 2b       	or	r24, r20
    5a0a:	95 2b       	or	r25, r21
    5a0c:	91 83       	std	Z+1, r25	; 0x01
    5a0e:	80 83       	st	Z, r24
                    }

                    chan_mask++;
    5a10:	6f 5f       	subi	r22, 0xFF	; 255
                    data_mask++;
    5a12:	7f 5f       	subi	r23, 0xFF	; 255

                    // If we have done 8 bits, move to next byte in buffer
					if (chan_mask == 8)
    5a14:	68 30       	cpi	r22, 0x08	; 8
    5a16:	11 f4       	brne	.+4      	; 0x5a1c <__vector_20+0x15c>
                    {
                        chan_mask =0;
                        sindex++;
    5a18:	bf 5f       	subi	r27, 0xFF	; 255
                    data_mask++;

                    // If we have done 8 bits, move to next byte in buffer
					if (chan_mask == 8)
                    {
                        chan_mask =0;
    5a1a:	60 e0       	ldi	r22, 0x00	; 0
                        sindex++;
                    }

                    // If we have reconstructed all 11 bits of one channel's data (2047)
					// increment the channel number
					if (data_mask == 11)
    5a1c:	7b 30       	cpi	r23, 0x0B	; 11
    5a1e:	11 f4       	brne	.+4      	; 0x5a24 <__vector_20+0x164>
                    {
                        data_mask =0;
                        chan_shift++;
    5a20:	cf 5f       	subi	r28, 0xFF	; 255

                    // If we have reconstructed all 11 bits of one channel's data (2047)
					// increment the channel number
					if (data_mask == 11)
                    {
                        data_mask =0;
    5a22:	70 e0       	ldi	r23, 0x00	; 0
    5a24:	a1 50       	subi	r26, 0x01	; 1
				// Start from second byte
				sindex = 1;

                // Deconstruct S-Bus data
				// 8 channels * 11 bits = 88 bits
                for (j = 0; j < 88; j++)
    5a26:	79 f6       	brne	.-98     	; 0x59c6 <__vector_20+0x106>
    5a28:	40 e0       	ldi	r20, 0x00	; 0
    5a2a:	50 e0       	ldi	r21, 0x00	; 0

				// Convert to  OpenAero2 values (0~2047 -> 2500~4999)
				for (j = 0; j < MAX_RC_CHANNELS; j++)
				{
					// Subtract weird-ass Futaba offset
					itemp16= RxChannel[j] - 1024;	
    5a2c:	fa 01       	movw	r30, r20
    5a2e:	ee 0f       	add	r30, r30
    5a30:	ff 1f       	adc	r31, r31
    5a32:	e6 55       	subi	r30, 0x56	; 86
    5a34:	f8 4f       	sbci	r31, 0xF8	; 248
    5a36:	20 81       	ld	r18, Z
    5a38:	31 81       	ldd	r19, Z+1	; 0x01
    5a3a:	34 50       	subi	r19, 0x04	; 4
					
					// Expand into OpenAero2 units							
					itemp16 = itemp16 + (itemp16 >> 2) + (itemp16 >> 3) + (itemp16 >> 4) + (itemp16 >> 5); 	// Quick multiply by 1.469 :)
    5a3c:	c9 01       	movw	r24, r18
    5a3e:	95 95       	asr	r25
    5a40:	87 95       	ror	r24
    5a42:	95 95       	asr	r25
    5a44:	87 95       	ror	r24
    5a46:	82 0f       	add	r24, r18
    5a48:	93 1f       	adc	r25, r19
    5a4a:	b9 01       	movw	r22, r18
    5a4c:	a3 e0       	ldi	r26, 0x03	; 3
    5a4e:	75 95       	asr	r23
    5a50:	67 95       	ror	r22
    5a52:	aa 95       	dec	r26
    5a54:	e1 f7       	brne	.-8      	; 0x5a4e <__vector_20+0x18e>
    5a56:	86 0f       	add	r24, r22
    5a58:	97 1f       	adc	r25, r23
    5a5a:	b9 01       	movw	r22, r18
    5a5c:	b4 e0       	ldi	r27, 0x04	; 4
    5a5e:	75 95       	asr	r23
    5a60:	67 95       	ror	r22
    5a62:	ba 95       	dec	r27
    5a64:	e1 f7       	brne	.-8      	; 0x5a5e <__vector_20+0x19e>
    5a66:	86 0f       	add	r24, r22
    5a68:	97 1f       	adc	r25, r23
    5a6a:	c5 e0       	ldi	r28, 0x05	; 5
    5a6c:	35 95       	asr	r19
    5a6e:	27 95       	ror	r18
    5a70:	ca 95       	dec	r28
    5a72:	e1 f7       	brne	.-8      	; 0x5a6c <__vector_20+0x1ac>
    5a74:	82 0f       	add	r24, r18
    5a76:	93 1f       	adc	r25, r19
					//itemp16 = itemp16 + (itemp16 >> 1); // Quicker mulitply by 1.5

					// Add back in OpenAero2 offset
					RxChannel[j] = itemp16 + 3750;				
    5a78:	8a 55       	subi	r24, 0x5A	; 90
    5a7a:	91 4f       	sbci	r25, 0xF1	; 241
    5a7c:	91 83       	std	Z+1, r25	; 0x01
    5a7e:	80 83       	st	Z, r24
    5a80:	4f 5f       	subi	r20, 0xFF	; 255
    5a82:	5f 4f       	sbci	r21, 0xFF	; 255
                        chan_shift++;
                    }
                }

				// Convert to  OpenAero2 values (0~2047 -> 2500~4999)
				for (j = 0; j < MAX_RC_CHANNELS; j++)
    5a84:	48 30       	cpi	r20, 0x08	; 8
    5a86:	51 05       	cpc	r21, r1
    5a88:	89 f6       	brne	.-94     	; 0x5a2c <__vector_20+0x16c>
    5a8a:	71 c0       	rjmp	.+226    	; 0x5b6e <__vector_20+0x2ae>
	//* 0 = 750us, 1023/2047 = 2250us
	//*
	//************************************************************

	// Handle Spektrum format
	if (Config.RxMode == SPEKTRUM)
    5a8c:	83 30       	cpi	r24, 0x03	; 3
    5a8e:	09 f0       	breq	.+2      	; 0x5a92 <__vector_20+0x1d2>
    5a90:	6e c0       	rjmp	.+220    	; 0x5b6e <__vector_20+0x2ae>
	{
		// Process data when all packets received
		if (bytecount >= 15)
    5a92:	80 91 bc 07 	lds	r24, 0x07BC
    5a96:	8f 30       	cpi	r24, 0x0F	; 15
    5a98:	08 f4       	brcc	.+2      	; 0x5a9c <__vector_20+0x1dc>
    5a9a:	69 c0       	rjmp	.+210    	; 0x5b6e <__vector_20+0x2ae>
		{
			// Ahem... ah... just stick the last byte into the buffer manually...(hides)
			sBuffer[15] = temp;
    5a9c:	c0 93 49 05 	sts	0x0549, r28

			// Set start of channel data per format
			sindex = 2; // Channel data from byte 3

			// Work out if this is 10 or 11 bit data
			if (sBuffer[1] & 0x10) 	// 0 for 10 bit resolution 1 for 11 bit resolution
    5aa0:	80 91 3b 05 	lds	r24, 0x053B
    5aa4:	84 ff       	sbrs	r24, 4
    5aa6:	04 c0       	rjmp	.+8      	; 0x5ab0 <__vector_20+0x1f0>
			{
				chan_mask = 0x78;	// 11 bit (2048)
				data_mask = 0x07;
    5aa8:	c7 e0       	ldi	r28, 0x07	; 7
				chan_shift = 0x03;
    5aaa:	63 e0       	ldi	r22, 0x03	; 3
			sindex = 2; // Channel data from byte 3

			// Work out if this is 10 or 11 bit data
			if (sBuffer[1] & 0x10) 	// 0 for 10 bit resolution 1 for 11 bit resolution
			{
				chan_mask = 0x78;	// 11 bit (2048)
    5aac:	78 e7       	ldi	r23, 0x78	; 120
    5aae:	03 c0       	rjmp	.+6      	; 0x5ab6 <__vector_20+0x1f6>
				chan_shift = 0x03;
			}
			else
			{
				chan_mask = 0x3C;	// 10 bit (1024)
				data_mask = 0x03;
    5ab0:	c3 e0       	ldi	r28, 0x03	; 3
				chan_shift = 0x02;
    5ab2:	62 e0       	ldi	r22, 0x02	; 2
				data_mask = 0x07;
				chan_shift = 0x03;
			}
			else
			{
				chan_mask = 0x3C;	// 10 bit (1024)
    5ab4:	7c e3       	ldi	r23, 0x3C	; 60
    5ab6:	ed e3       	ldi	r30, 0x3D	; 61
    5ab8:	f5 e0       	ldi	r31, 0x05	; 5
    5aba:	df 01       	movw	r26, r30
    5abc:	11 97       	sbiw	r26, 0x01	; 1
			// Work out which channel the data is intended for from the channel number data
			// Channels can also be in the second packet. Spektrum has 7 channels per packet.
			for (j = 0; j < 7; j++)
			{
				// Extract channel number
				ch_num = (sBuffer[sindex] & chan_mask) >> chan_shift;
    5abe:	2c 91       	ld	r18, X
    5ac0:	82 2f       	mov	r24, r18
    5ac2:	87 23       	and	r24, r23
    5ac4:	90 e0       	ldi	r25, 0x00	; 0
    5ac6:	06 2e       	mov	r0, r22
    5ac8:	02 c0       	rjmp	.+4      	; 0x5ace <__vector_20+0x20e>
    5aca:	95 95       	asr	r25
    5acc:	87 95       	ror	r24
    5ace:	0a 94       	dec	r0
    5ad0:	e2 f7       	brpl	.-8      	; 0x5aca <__vector_20+0x20a>
    5ad2:	80 93 d1 07 	sts	0x07D1, r24

				// Reconstruct channel data
				temp16 = ((sBuffer[sindex] & data_mask) << 8) + sBuffer[sindex + 1];
    5ad6:	80 81       	ld	r24, Z

				// Expand to OpenAero2 units if a valid channel
				// Blank channels have the channel number of 16
				if (ch_num < MAX_RC_CHANNELS)
    5ad8:	90 91 d1 07 	lds	r25, 0x07D1
    5adc:	98 30       	cpi	r25, 0x08	; 8
    5ade:	f0 f5       	brcc	.+124    	; 0x5b5c <__vector_20+0x29c>
			{
				// Extract channel number
				ch_num = (sBuffer[sindex] & chan_mask) >> chan_shift;

				// Reconstruct channel data
				temp16 = ((sBuffer[sindex] & data_mask) << 8) + sBuffer[sindex + 1];
    5ae0:	2c 23       	and	r18, r28
    5ae2:	30 e0       	ldi	r19, 0x00	; 0
    5ae4:	32 2f       	mov	r19, r18
    5ae6:	22 27       	eor	r18, r18
    5ae8:	28 0f       	add	r18, r24
    5aea:	31 1d       	adc	r19, r1
				// Expand to OpenAero2 units if a valid channel
				// Blank channels have the channel number of 16
				if (ch_num < MAX_RC_CHANNELS)
				{
					// Subtract Spektrum center offset
					if (chan_shift == 0x03) // 11-bit
    5aec:	63 30       	cpi	r22, 0x03	; 3
    5aee:	11 f4       	brne	.+4      	; 0x5af4 <__vector_20+0x234>
					{
						itemp16 = temp16 - 1024;
    5af0:	34 50       	subi	r19, 0x04	; 4
    5af2:	01 c0       	rjmp	.+2      	; 0x5af6 <__vector_20+0x236>
					}
					else
					{
						itemp16 = temp16 - 512;	
    5af4:	32 50       	subi	r19, 0x02	; 2
					}					

					// Quick multiply by 2.93
					itemp16 = (itemp16 << 1) + (itemp16 >> 1) + (itemp16 >> 2) + (itemp16 >> 3) + (itemp16 >> 4); 
    5af6:	c9 01       	movw	r24, r18
    5af8:	88 0f       	add	r24, r24
    5afa:	99 1f       	adc	r25, r25
    5afc:	a9 01       	movw	r20, r18
    5afe:	55 95       	asr	r21
    5b00:	47 95       	ror	r20
    5b02:	84 0f       	add	r24, r20
    5b04:	95 1f       	adc	r25, r21
    5b06:	a9 01       	movw	r20, r18
    5b08:	55 95       	asr	r21
    5b0a:	47 95       	ror	r20
    5b0c:	55 95       	asr	r21
    5b0e:	47 95       	ror	r20
    5b10:	84 0f       	add	r24, r20
    5b12:	95 1f       	adc	r25, r21
    5b14:	a9 01       	movw	r20, r18
    5b16:	a3 e0       	ldi	r26, 0x03	; 3
    5b18:	55 95       	asr	r21
    5b1a:	47 95       	ror	r20
    5b1c:	aa 95       	dec	r26
    5b1e:	e1 f7       	brne	.-8      	; 0x5b18 <__vector_20+0x258>
    5b20:	84 0f       	add	r24, r20
    5b22:	95 1f       	adc	r25, r21
    5b24:	b4 e0       	ldi	r27, 0x04	; 4
    5b26:	35 95       	asr	r19
    5b28:	27 95       	ror	r18
    5b2a:	ba 95       	dec	r27
    5b2c:	e1 f7       	brne	.-8      	; 0x5b26 <__vector_20+0x266>
    5b2e:	82 0f       	add	r24, r18
    5b30:	93 1f       	adc	r25, r19

					if (chan_shift == 0x03) // 11-bit
    5b32:	63 30       	cpi	r22, 0x03	; 3
    5b34:	11 f4       	brne	.+4      	; 0x5b3a <__vector_20+0x27a>
					{
						// Divide in case of 11-bit value
						itemp16 = itemp16 >> 1;								
    5b36:	95 95       	asr	r25
    5b38:	87 95       	ror	r24
					}

					// Add back in OpenAero2 offset
					itemp16 += 3750;										

					RxChannel[Config.ChannelOrder[ch_num]] = itemp16;
    5b3a:	a0 91 d1 07 	lds	r26, 0x07D1
    5b3e:	b0 e0       	ldi	r27, 0x00	; 0
    5b40:	af 55       	subi	r26, 0x5F	; 95
    5b42:	ba 4f       	sbci	r27, 0xFA	; 250
    5b44:	11 96       	adiw	r26, 0x01	; 1
    5b46:	ac 91       	ld	r26, X
    5b48:	b0 e0       	ldi	r27, 0x00	; 0
						// Divide in case of 11-bit value
						itemp16 = itemp16 >> 1;								
					}

					// Add back in OpenAero2 offset
					itemp16 += 3750;										
    5b4a:	8a 55       	subi	r24, 0x5A	; 90
    5b4c:	91 4f       	sbci	r25, 0xF1	; 241

					RxChannel[Config.ChannelOrder[ch_num]] = itemp16;
    5b4e:	aa 0f       	add	r26, r26
    5b50:	bb 1f       	adc	r27, r27
    5b52:	a6 55       	subi	r26, 0x56	; 86
    5b54:	b8 4f       	sbci	r27, 0xF8	; 248
    5b56:	11 96       	adiw	r26, 0x01	; 1
    5b58:	9c 93       	st	X, r25
    5b5a:	8e 93       	st	-X, r24
    5b5c:	32 96       	adiw	r30, 0x02	; 2
				chan_shift = 0x02;
			}

			// Work out which channel the data is intended for from the channel number data
			// Channels can also be in the second packet. Spektrum has 7 channels per packet.
			for (j = 0; j < 7; j++)
    5b5e:	45 e0       	ldi	r20, 0x05	; 5
    5b60:	eb 34       	cpi	r30, 0x4B	; 75
    5b62:	f4 07       	cpc	r31, r20
    5b64:	09 f0       	breq	.+2      	; 0x5b68 <__vector_20+0x2a8>
    5b66:	a9 cf       	rjmp	.-174    	; 0x5aba <__vector_20+0x1fa>
				sindex += 2;

			} // For each pair of bytes
			
			// RC sync established
			Interrupted = true;
    5b68:	81 e0       	ldi	r24, 0x01	; 1
    5b6a:	80 93 ba 07 	sts	0x07BA, r24
	//************************************************************
	//* Common exit code
	//************************************************************

	// Increment byte count
	bytecount++;
    5b6e:	80 91 bc 07 	lds	r24, 0x07BC
    5b72:	8f 5f       	subi	r24, 0xFF	; 255
    5b74:	80 93 bc 07 	sts	0x07BC, r24
}
    5b78:	ff 91       	pop	r31
    5b7a:	ef 91       	pop	r30
    5b7c:	cf 91       	pop	r28
    5b7e:	bf 91       	pop	r27
    5b80:	af 91       	pop	r26
    5b82:	9f 91       	pop	r25
    5b84:	8f 91       	pop	r24
    5b86:	7f 91       	pop	r23
    5b88:	6f 91       	pop	r22
    5b8a:	5f 91       	pop	r21
    5b8c:	4f 91       	pop	r20
    5b8e:	3f 91       	pop	r19
    5b90:	2f 91       	pop	r18
    5b92:	0f 90       	pop	r0
    5b94:	0f be       	out	0x3f, r0	; 63
    5b96:	0f 90       	pop	r0
    5b98:	1f 90       	pop	r1
    5b9a:	18 95       	reti

00005b9c <Disable_RC_Interrupts>:
// Disable RC interrupts as required
//***********************************************************

void Disable_RC_Interrupts(void)
{
	cli();	// Disable interrupts
    5b9c:	f8 94       	cli

	// Disable PWM input interrupts
	PCMSK1 = 0;							// Disable AUX
    5b9e:	10 92 6c 00 	sts	0x006C, r1
	PCMSK3 = 0;							// Disable THR
    5ba2:	10 92 73 00 	sts	0x0073, r1
	EIMSK  = 0;							// Disable INT0, 1 and 2
    5ba6:	1d ba       	out	0x1d, r1	; 29

	// Disable receiver (flushes buffer)
	UCSR0B &= ~(1 << RXEN0);	
    5ba8:	e1 ec       	ldi	r30, 0xC1	; 193
    5baa:	f0 e0       	ldi	r31, 0x00	; 0
    5bac:	80 81       	ld	r24, Z
    5bae:	8f 7e       	andi	r24, 0xEF	; 239
    5bb0:	80 83       	st	Z, r24

	// Disable serial interrupt	
	UCSR0B &= ~(1 << RXCIE0);
    5bb2:	80 81       	ld	r24, Z
    5bb4:	8f 77       	andi	r24, 0x7F	; 127
    5bb6:	80 83       	st	Z, r24
	
	// Clear interrupt flags
	PCIFR	= 0x0F;						// Clear PCIF0~PCIF3 interrupt flags
    5bb8:	8f e0       	ldi	r24, 0x0F	; 15
    5bba:	8b bb       	out	0x1b, r24	; 27
	EIFR	= 0x00; 					// Clear INT0~INT2 interrupt flags (Elevator, Aileron, Rudder/CPPM)
    5bbc:	1c ba       	out	0x1c, r1	; 28
	
	sei(); // Re-enable interrupts
    5bbe:	78 94       	sei
    5bc0:	08 95       	ret

00005bc2 <init_int>:
// Reconfigure RC interrupts
//***********************************************************

void init_int(void)
{
	cli();	// Disable interrupts
    5bc2:	f8 94       	cli
	
	switch (Config.RxMode)
    5bc4:	80 91 ca 05 	lds	r24, 0x05CA
    5bc8:	81 30       	cpi	r24, 0x01	; 1
    5bca:	c9 f0       	breq	.+50     	; 0x5bfe <init_int+0x3c>
    5bcc:	44 f4       	brge	.+16     	; 0x5bde <init_int+0x1c>
    5bce:	81 11       	cpse	r24, r1
    5bd0:	2c c0       	rjmp	.+88     	; 0x5c2a <init_int+0x68>
	{
		case CPPM_MODE:
			PCMSK1 = 0;							// Disable AUX
    5bd2:	10 92 6c 00 	sts	0x006C, r1
			PCMSK3 = 0;							// Disable THR
    5bd6:	10 92 73 00 	sts	0x0073, r1
			EIMSK = 0x04;						// Enable INT2 (Rudder/CPPM input)
    5bda:	84 e0       	ldi	r24, 0x04	; 4
    5bdc:	1b c0       	rjmp	.+54     	; 0x5c14 <init_int+0x52>

void init_int(void)
{
	cli();	// Disable interrupts
	
	switch (Config.RxMode)
    5bde:	84 30       	cpi	r24, 0x04	; 4
    5be0:	24 f5       	brge	.+72     	; 0x5c2a <init_int+0x68>
			break;

		case SBUS:
		case SPEKTRUM:
			// Disable PWM input interrupts
			PCMSK1 = 0;							// Disable AUX
    5be2:	10 92 6c 00 	sts	0x006C, r1
			PCMSK3 = 0;							// Disable THR
    5be6:	10 92 73 00 	sts	0x0073, r1
			EIMSK  = 0;							// Disable INT0, 1 and 2 
    5bea:	1d ba       	out	0x1d, r1	; 29
			
			// Enable serial receiver and interrupts
			UCSR0B |= (1 << RXCIE0);			// Enable serial interrupt
    5bec:	80 91 c1 00 	lds	r24, 0x00C1
    5bf0:	80 68       	ori	r24, 0x80	; 128
    5bf2:	80 93 c1 00 	sts	0x00C1, r24
			UCSR0B |= (1 << RXEN0);				// Enable receiver
    5bf6:	80 91 c1 00 	lds	r24, 0x00C1
    5bfa:	80 61       	ori	r24, 0x10	; 16
    5bfc:	14 c0       	rjmp	.+40     	; 0x5c26 <init_int+0x64>
			UCSR0B &= ~(1 << RXCIE0);			// Disable serial interrupt
			UCSR0B &= ~(1 << RXEN0);			// Disable receiver and flush buffer
			break;

		case PWM:
			PCMSK1 |= (1 << PCINT8);			// PB0 (Aux pin change mask)
    5bfe:	80 91 6c 00 	lds	r24, 0x006C
    5c02:	81 60       	ori	r24, 0x01	; 1
    5c04:	80 93 6c 00 	sts	0x006C, r24
			PCMSK3 |= (1 << PCINT24);			// PD0 (Throttle pin change mask)
    5c08:	80 91 73 00 	lds	r24, 0x0073
    5c0c:	81 60       	ori	r24, 0x01	; 1
    5c0e:	80 93 73 00 	sts	0x0073, r24
			EIMSK  = 0x07;						// Enable INT0, 1 and 2 
    5c12:	87 e0       	ldi	r24, 0x07	; 7
    5c14:	8d bb       	out	0x1d, r24	; 29
			UCSR0B &= ~(1 << RXCIE0);			// Disable serial interrupt
    5c16:	80 91 c1 00 	lds	r24, 0x00C1
    5c1a:	8f 77       	andi	r24, 0x7F	; 127
    5c1c:	80 93 c1 00 	sts	0x00C1, r24
			UCSR0B &= ~(1 << RXEN0);			// Disable receiver and flush buffer
    5c20:	80 91 c1 00 	lds	r24, 0x00C1
    5c24:	8f 7e       	andi	r24, 0xEF	; 239
			PCMSK3 = 0;							// Disable THR
			EIMSK  = 0;							// Disable INT0, 1 and 2 
			
			// Enable serial receiver and interrupts
			UCSR0B |= (1 << RXCIE0);			// Enable serial interrupt
			UCSR0B |= (1 << RXEN0);				// Enable receiver
    5c26:	80 93 c1 00 	sts	0x00C1, r24
		default:
			break;	
	}	

	// Clear interrupt flags
	PCIFR	= 0x0F;								// Clear PCIF0~PCIF3 interrupt flags
    5c2a:	8f e0       	ldi	r24, 0x0F	; 15
    5c2c:	8b bb       	out	0x1b, r24	; 27
	EIFR	= 0x00; 							// Clear INT0~INT2 interrupt flags (Elevator, Aileron, Rudder/CPPM)
    5c2e:	1c ba       	out	0x1c, r1	; 28

	sei(); // Re-enable interrupts
    5c30:	78 94       	sei
    5c32:	08 95       	ret

00005c34 <print_menu_frame>:
// style = menu style (0 = main, 1 = sub)
//************************************************************
void print_menu_frame(uint8_t style)
{
	// Print bottom markers
	if (style == 0)
    5c34:	81 11       	cpse	r24, r1
    5c36:	27 c0       	rjmp	.+78     	; 0x5c86 <print_menu_frame+0x52>
	{
		LCD_Display_Text(12, (const unsigned char*)Wingdings, 0, 57); 	// Left
    5c38:	29 e3       	ldi	r18, 0x39	; 57
    5c3a:	30 e0       	ldi	r19, 0x00	; 0
    5c3c:	40 e0       	ldi	r20, 0x00	; 0
    5c3e:	50 e0       	ldi	r21, 0x00	; 0
    5c40:	65 ef       	ldi	r22, 0xF5	; 245
    5c42:	70 e0       	ldi	r23, 0x00	; 0
    5c44:	8c e0       	ldi	r24, 0x0C	; 12
    5c46:	90 e0       	ldi	r25, 0x00	; 0
    5c48:	0e 94 e0 21 	call	0x43c0	; 0x43c0 <LCD_Display_Text>
		LCD_Display_Text(10, (const unsigned char*)Wingdings, 38, 59); 	// Up
    5c4c:	2b e3       	ldi	r18, 0x3B	; 59
    5c4e:	30 e0       	ldi	r19, 0x00	; 0
    5c50:	46 e2       	ldi	r20, 0x26	; 38
    5c52:	50 e0       	ldi	r21, 0x00	; 0
    5c54:	65 ef       	ldi	r22, 0xF5	; 245
    5c56:	70 e0       	ldi	r23, 0x00	; 0
    5c58:	8a e0       	ldi	r24, 0x0A	; 10
    5c5a:	90 e0       	ldi	r25, 0x00	; 0
    5c5c:	0e 94 e0 21 	call	0x43c0	; 0x43c0 <LCD_Display_Text>
		LCD_Display_Text(9, (const unsigned char*)Wingdings, 80, 59); 	// Down
    5c60:	2b e3       	ldi	r18, 0x3B	; 59
    5c62:	30 e0       	ldi	r19, 0x00	; 0
    5c64:	40 e5       	ldi	r20, 0x50	; 80
    5c66:	50 e0       	ldi	r21, 0x00	; 0
    5c68:	65 ef       	ldi	r22, 0xF5	; 245
    5c6a:	70 e0       	ldi	r23, 0x00	; 0
    5c6c:	89 e0       	ldi	r24, 0x09	; 9
    5c6e:	90 e0       	ldi	r25, 0x00	; 0
    5c70:	0e 94 e0 21 	call	0x43c0	; 0x43c0 <LCD_Display_Text>
		LCD_Display_Text(11, (const unsigned char*)Wingdings, 120, 57); // Right
    5c74:	29 e3       	ldi	r18, 0x39	; 57
    5c76:	30 e0       	ldi	r19, 0x00	; 0
    5c78:	48 e7       	ldi	r20, 0x78	; 120
    5c7a:	50 e0       	ldi	r21, 0x00	; 0
    5c7c:	65 ef       	ldi	r22, 0xF5	; 245
    5c7e:	70 e0       	ldi	r23, 0x00	; 0
    5c80:	8b e0       	ldi	r24, 0x0B	; 11
    5c82:	90 e0       	ldi	r25, 0x00	; 0
    5c84:	26 c0       	rjmp	.+76     	; 0x5cd2 <print_menu_frame+0x9e>
	}
	else
	{
		LCD_Display_Text(16, (const unsigned char*)Verdana8, 0, 54); 	// Clear
    5c86:	26 e3       	ldi	r18, 0x36	; 54
    5c88:	30 e0       	ldi	r19, 0x00	; 0
    5c8a:	40 e0       	ldi	r20, 0x00	; 0
    5c8c:	50 e0       	ldi	r21, 0x00	; 0
    5c8e:	6d e0       	ldi	r22, 0x0D	; 13
    5c90:	7a e0       	ldi	r23, 0x0A	; 10
    5c92:	80 e1       	ldi	r24, 0x10	; 16
    5c94:	90 e0       	ldi	r25, 0x00	; 0
    5c96:	0e 94 e0 21 	call	0x43c0	; 0x43c0 <LCD_Display_Text>
		LCD_Display_Text(10, (const unsigned char*)Wingdings, 38, 59);	// Up
    5c9a:	2b e3       	ldi	r18, 0x3B	; 59
    5c9c:	30 e0       	ldi	r19, 0x00	; 0
    5c9e:	46 e2       	ldi	r20, 0x26	; 38
    5ca0:	50 e0       	ldi	r21, 0x00	; 0
    5ca2:	65 ef       	ldi	r22, 0xF5	; 245
    5ca4:	70 e0       	ldi	r23, 0x00	; 0
    5ca6:	8a e0       	ldi	r24, 0x0A	; 10
    5ca8:	90 e0       	ldi	r25, 0x00	; 0
    5caa:	0e 94 e0 21 	call	0x43c0	; 0x43c0 <LCD_Display_Text>
		LCD_Display_Text(9, (const unsigned char*)Wingdings, 80, 59);	// Down
    5cae:	2b e3       	ldi	r18, 0x3B	; 59
    5cb0:	30 e0       	ldi	r19, 0x00	; 0
    5cb2:	40 e5       	ldi	r20, 0x50	; 80
    5cb4:	50 e0       	ldi	r21, 0x00	; 0
    5cb6:	65 ef       	ldi	r22, 0xF5	; 245
    5cb8:	70 e0       	ldi	r23, 0x00	; 0
    5cba:	89 e0       	ldi	r24, 0x09	; 9
    5cbc:	90 e0       	ldi	r25, 0x00	; 0
    5cbe:	0e 94 e0 21 	call	0x43c0	; 0x43c0 <LCD_Display_Text>
		LCD_Display_Text(17, (const unsigned char*)Verdana8, 103, 54);	// Save
    5cc2:	26 e3       	ldi	r18, 0x36	; 54
    5cc4:	30 e0       	ldi	r19, 0x00	; 0
    5cc6:	47 e6       	ldi	r20, 0x67	; 103
    5cc8:	50 e0       	ldi	r21, 0x00	; 0
    5cca:	6d e0       	ldi	r22, 0x0D	; 13
    5ccc:	7a e0       	ldi	r23, 0x0A	; 10
    5cce:	81 e1       	ldi	r24, 0x11	; 17
    5cd0:	90 e0       	ldi	r25, 0x00	; 0
    5cd2:	0e 94 e0 21 	call	0x43c0	; 0x43c0 <LCD_Display_Text>
	}

	// Write from buffer
	write_buffer(buffer);
    5cd6:	80 e0       	ldi	r24, 0x00	; 0
    5cd8:	91 e0       	ldi	r25, 0x01	; 1
    5cda:	0c 94 01 20 	jmp	0x4002	; 0x4002 <write_buffer>

00005cde <get_menu_range>:
//************************************************************
// get_menu_range - Get range info from PROGMEM for a specific item
//************************************************************

menu_range_t get_menu_range(const unsigned char* menu_ranges, uint8_t menuitem)
{
    5cde:	cf 93       	push	r28
    5ce0:	df 93       	push	r29
    5ce2:	cd b7       	in	r28, 0x3d	; 61
    5ce4:	de b7       	in	r29, 0x3e	; 62
    5ce6:	2a 97       	sbiw	r28, 0x0a	; 10
    5ce8:	0f b6       	in	r0, 0x3f	; 63
    5cea:	f8 94       	cli
    5cec:	de bf       	out	0x3e, r29	; 62
    5cee:	0f be       	out	0x3f, r0	; 63
    5cf0:	cd bf       	out	0x3d, r28	; 61
	menu_range_t	range;
	memcpy_P(&range, &menu_ranges[menuitem * sizeof(range)], sizeof(range));
    5cf2:	25 e0       	ldi	r18, 0x05	; 5
    5cf4:	62 9f       	mul	r22, r18
    5cf6:	80 0d       	add	r24, r0
    5cf8:	91 1d       	adc	r25, r1
    5cfa:	11 24       	eor	r1, r1
    5cfc:	bc 01       	movw	r22, r24
    5cfe:	45 e0       	ldi	r20, 0x05	; 5
    5d00:	50 e0       	ldi	r21, 0x00	; 0
    5d02:	ce 01       	movw	r24, r28
    5d04:	06 96       	adiw	r24, 0x06	; 6
    5d06:	0e 94 9e 48 	call	0x913c	; 0x913c <memcpy_P>
	return (range);
    5d0a:	85 e0       	ldi	r24, 0x05	; 5
    5d0c:	fe 01       	movw	r30, r28
    5d0e:	36 96       	adiw	r30, 0x06	; 6
    5d10:	de 01       	movw	r26, r28
    5d12:	11 96       	adiw	r26, 0x01	; 1
    5d14:	01 90       	ld	r0, Z+
    5d16:	0d 92       	st	X+, r0
    5d18:	8a 95       	dec	r24
    5d1a:	e1 f7       	brne	.-8      	; 0x5d14 <get_menu_range+0x36>
    5d1c:	29 81       	ldd	r18, Y+1	; 0x01
    5d1e:	3a 81       	ldd	r19, Y+2	; 0x02
    5d20:	4b 81       	ldd	r20, Y+3	; 0x03
    5d22:	5c 81       	ldd	r21, Y+4	; 0x04
    5d24:	6d 81       	ldd	r22, Y+5	; 0x05
}
    5d26:	70 e0       	ldi	r23, 0x00	; 0
    5d28:	80 e0       	ldi	r24, 0x00	; 0
    5d2a:	90 e0       	ldi	r25, 0x00	; 0
    5d2c:	2a 96       	adiw	r28, 0x0a	; 10
    5d2e:	0f b6       	in	r0, 0x3f	; 63
    5d30:	f8 94       	cli
    5d32:	de bf       	out	0x3e, r29	; 62
    5d34:	0f be       	out	0x3f, r0	; 63
    5d36:	cd bf       	out	0x3d, r28	; 61
    5d38:	df 91       	pop	r29
    5d3a:	cf 91       	pop	r28
    5d3c:	08 95       	ret

00005d3e <print_menu_text>:
// x = horizontal location on screen
// y = vertical location on screen
//************************************************************

void print_menu_text(int16_t values, uint8_t style, uint16_t text_link, uint8_t x, uint8_t y)
{
    5d3e:	0f 93       	push	r16
    5d40:	1f 93       	push	r17
    5d42:	cf 93       	push	r28
    5d44:	df 93       	push	r29
    5d46:	fa 01       	movw	r30, r20
    5d48:	10 e0       	ldi	r17, 0x00	; 0
    5d4a:	c2 2f       	mov	r28, r18
    5d4c:	d0 e0       	ldi	r29, 0x00	; 0
	if ((style == 0) || (style == 2) || (style == 3)) // Numeral
    5d4e:	66 23       	and	r22, r22
    5d50:	19 f0       	breq	.+6      	; 0x5d58 <print_menu_text+0x1a>
    5d52:	62 50       	subi	r22, 0x02	; 2
    5d54:	62 30       	cpi	r22, 0x02	; 2
    5d56:	78 f4       	brcc	.+30     	; 0x5d76 <print_menu_text+0x38>
    5d58:	4a e0       	ldi	r20, 0x0A	; 10
    5d5a:	63 e5       	ldi	r22, 0x53	; 83
    5d5c:	75 e0       	ldi	r23, 0x05	; 5
    5d5e:	0e 94 b9 48 	call	0x9172	; 0x9172 <__itoa_ncheck>
	{
		mugui_lcd_puts(itoa(values,pBuffer,10),(const unsigned char*)Verdana8,x,y);
    5d62:	98 01       	movw	r18, r16
    5d64:	ae 01       	movw	r20, r28
    5d66:	6d e0       	ldi	r22, 0x0D	; 13
    5d68:	7a e0       	ldi	r23, 0x0A	; 10
	}
	else
	{
		LCD_Display_Text(text_link, (const unsigned char*)Verdana8,x,y);
	}
}
    5d6a:	df 91       	pop	r29
    5d6c:	cf 91       	pop	r28
    5d6e:	1f 91       	pop	r17
    5d70:	0f 91       	pop	r16

void print_menu_text(int16_t values, uint8_t style, uint16_t text_link, uint8_t x, uint8_t y)
{
	if ((style == 0) || (style == 2) || (style == 3)) // Numeral
	{
		mugui_lcd_puts(itoa(values,pBuffer,10),(const unsigned char*)Verdana8,x,y);
    5d72:	0c 94 56 3e 	jmp	0x7cac	; 0x7cac <mugui_lcd_puts>
	}
	else
	{
		LCD_Display_Text(text_link, (const unsigned char*)Verdana8,x,y);
    5d76:	98 01       	movw	r18, r16
    5d78:	ae 01       	movw	r20, r28
    5d7a:	6d e0       	ldi	r22, 0x0D	; 13
    5d7c:	7a e0       	ldi	r23, 0x0A	; 10
    5d7e:	cf 01       	movw	r24, r30
	}
}
    5d80:	df 91       	pop	r29
    5d82:	cf 91       	pop	r28
    5d84:	1f 91       	pop	r17
    5d86:	0f 91       	pop	r16
	{
		mugui_lcd_puts(itoa(values,pBuffer,10),(const unsigned char*)Verdana8,x,y);
	}
	else
	{
		LCD_Display_Text(text_link, (const unsigned char*)Verdana8,x,y);
    5d88:	0c 94 e0 21 	jmp	0x43c0	; 0x43c0 <LCD_Display_Text>

00005d8c <poll_buttons>:
// Poll buttons, wait until something pressed, debounce and 
// return button info.
//************************************************************

uint8_t poll_buttons(bool acceleration)
{
    5d8c:	68 2f       	mov	r22, r24
	static uint8_t button_count = 0;
	uint8_t buttons = 0;

	button = (PINB & 0xf0); // button is global, buttons is local
    5d8e:	93 b1       	in	r25, 0x03	; 3
    5d90:	90 7f       	andi	r25, 0xF0	; 240
    5d92:	90 93 da 07 	sts	0x07DA, r25
//************************************************************

uint8_t poll_buttons(bool acceleration)
{
	static uint8_t button_count = 0;
	uint8_t buttons = 0;
    5d96:	80 e0       	ldi	r24, 0x00	; 0
			button = buttons;
		}

		// Reset button acceleration
		button_count = 0;
		button_multiplier = 1;
    5d98:	71 e0       	ldi	r23, 0x01	; 1
	static uint8_t button_count = 0;
	uint8_t buttons = 0;

	button = (PINB & 0xf0); // button is global, buttons is local

	while (button == NONE)					
    5d9a:	90 91 da 07 	lds	r25, 0x07DA
    5d9e:	90 3f       	cpi	r25, 0xF0	; 240
    5da0:	c9 f4       	brne	.+50     	; 0x5dd4 <poll_buttons+0x48>
	{
		buttons = (PINB & 0xf0);	
    5da2:	83 b1       	in	r24, 0x03	; 3
    5da4:	80 7f       	andi	r24, 0xF0	; 240
    5da6:	e7 ea       	ldi	r30, 0xA7	; 167
    5da8:	f1 e6       	ldi	r31, 0x61	; 97
    5daa:	31 97       	sbiw	r30, 0x01	; 1
    5dac:	f1 f7       	brne	.-4      	; 0x5daa <poll_buttons+0x1e>
    5dae:	00 c0       	rjmp	.+0      	; 0x5db0 <poll_buttons+0x24>
    5db0:	00 00       	nop
		_delay_ms(5);

		if (buttons != (PINB & 0xf0))
    5db2:	23 b1       	in	r18, 0x03	; 3
    5db4:	48 2f       	mov	r20, r24
    5db6:	50 e0       	ldi	r21, 0x00	; 0
    5db8:	20 7f       	andi	r18, 0xF0	; 240
    5dba:	30 e0       	ldi	r19, 0x00	; 0
    5dbc:	42 17       	cp	r20, r18
    5dbe:	53 07       	cpc	r21, r19
    5dc0:	19 f4       	brne	.+6      	; 0x5dc8 <poll_buttons+0x3c>
		{
			buttons = 0; // Buttons different
		}
		else // Buttons the same - update global
		{
			button = buttons;
    5dc2:	80 93 da 07 	sts	0x07DA, r24
    5dc6:	01 c0       	rjmp	.+2      	; 0x5dca <poll_buttons+0x3e>
		buttons = (PINB & 0xf0);	
		_delay_ms(5);

		if (buttons != (PINB & 0xf0))
		{
			buttons = 0; // Buttons different
    5dc8:	80 e0       	ldi	r24, 0x00	; 0
		{
			button = buttons;
		}

		// Reset button acceleration
		button_count = 0;
    5dca:	10 92 26 05 	sts	0x0526, r1
		button_multiplier = 1;
    5dce:	70 93 db 07 	sts	0x07DB, r23
    5dd2:	e3 cf       	rjmp	.-58     	; 0x5d9a <poll_buttons+0xe>
	}

	// Check for buttons being held down if requested
	if ((button != NONE) && (acceleration))
    5dd4:	66 23       	and	r22, r22
    5dd6:	71 f0       	breq	.+28     	; 0x5df4 <poll_buttons+0x68>
	{
		// Count the number of times incremented
		button_count++; 
    5dd8:	90 91 26 05 	lds	r25, 0x0526
    5ddc:	9f 5f       	subi	r25, 0xFF	; 255
    5dde:	90 93 26 05 	sts	0x0526, r25
		if (button_count >= 10)
    5de2:	9a 30       	cpi	r25, 0x0A	; 10
    5de4:	38 f0       	brcs	.+14     	; 0x5df4 <poll_buttons+0x68>
		{
			button_count = 0;
    5de6:	10 92 26 05 	sts	0x0526, r1
			button_multiplier ++;
    5dea:	90 91 db 07 	lds	r25, 0x07DB
    5dee:	9f 5f       	subi	r25, 0xFF	; 255
    5df0:	90 93 db 07 	sts	0x07DB, r25
		}
	}

	return buttons;
}
    5df4:	08 95       	ret

00005df6 <do_menu_item>:
// servo_enable = Enable real-time updating of servo position
// servo_number = Servo number to update
//************************************************************

void do_menu_item(uint16_t menuitem, int8_t *values, uint8_t mult, menu_range_t range, int8_t offset, uint16_t text_link, bool servo_enable, int16_t servo_number)
{
    5df6:	2f 92       	push	r2
    5df8:	3f 92       	push	r3
    5dfa:	4f 92       	push	r4
    5dfc:	5f 92       	push	r5
    5dfe:	6f 92       	push	r6
    5e00:	7f 92       	push	r7
    5e02:	8f 92       	push	r8
    5e04:	9f 92       	push	r9
    5e06:	af 92       	push	r10
    5e08:	bf 92       	push	r11
    5e0a:	cf 92       	push	r12
    5e0c:	df 92       	push	r13
    5e0e:	ef 92       	push	r14
    5e10:	ff 92       	push	r15
    5e12:	0f 93       	push	r16
    5e14:	1f 93       	push	r17
    5e16:	cf 93       	push	r28
    5e18:	df 93       	push	r29
    5e1a:	cd b7       	in	r28, 0x3d	; 61
    5e1c:	de b7       	in	r29, 0x3e	; 62
    5e1e:	69 97       	sbiw	r28, 0x19	; 25
    5e20:	0f b6       	in	r0, 0x3f	; 63
    5e22:	f8 94       	cli
    5e24:	de bf       	out	0x3e, r29	; 62
    5e26:	0f be       	out	0x3f, r0	; 63
    5e28:	cd bf       	out	0x3d, r28	; 61
    5e2a:	3c 01       	movw	r6, r24
    5e2c:	79 8b       	std	Y+17, r23	; 0x11
    5e2e:	68 8b       	std	Y+16, r22	; 0x10
    5e30:	4a 87       	std	Y+10, r20	; 0x0a
    5e32:	ed 82       	std	Y+5, r14	; 0x05
    5e34:	fe 82       	std	Y+6, r15	; 0x06
    5e36:	0f 83       	std	Y+7, r16	; 0x07
    5e38:	41 2e       	mov	r4, r17
    5e3a:	18 87       	std	Y+8, r17	; 0x08
    5e3c:	29 87       	std	Y+9, r18	; 0x09
    5e3e:	bd 8a       	std	Y+21, r11	; 0x15
    5e40:	ac 8a       	std	Y+20, r10	; 0x14
    5e42:	4e 2d       	mov	r20, r14
    5e44:	3f 2d       	mov	r19, r15
    5e46:	0d 87       	std	Y+13, r16	; 0x0d
	mugui_size16_t size;
	int16_t temp16;
	int16_t value = (int8_t)*values;
    5e48:	fb 01       	movw	r30, r22
    5e4a:	20 81       	ld	r18, Z
    5e4c:	a2 2e       	mov	r10, r18
    5e4e:	bb 24       	eor	r11, r11
    5e50:	a7 fc       	sbrc	r10, 7
    5e52:	b0 94       	com	r11
	uint8_t button_inc = 0;
	bool	button_lock = false;
	bool	first_time = true;

	// Multiply value for display only if style is 2
	if (range.style == 2)
    5e54:	f2 e0       	ldi	r31, 0x02	; 2
    5e56:	1f 13       	cpse	r17, r31
    5e58:	05 c0       	rjmp	.+10     	; 0x5e64 <do_menu_item+0x6e>
	{
		value = value * mult;
    5e5a:	5a 85       	ldd	r21, Y+10	; 0x0a
    5e5c:	25 03       	mulsu	r18, r21
    5e5e:	50 01       	movw	r10, r0
    5e60:	11 24       	eor	r1, r1
    5e62:	02 c0       	rjmp	.+4      	; 0x5e68 <do_menu_item+0x72>
	}
	else mult = 1;
    5e64:	81 e0       	ldi	r24, 0x01	; 1
    5e66:	8a 87       	std	Y+10, r24	; 0x0a

	button = NONE;
    5e68:	20 ef       	ldi	r18, 0xF0	; 240
    5e6a:	20 93 da 07 	sts	0x07DA, r18
		{
			value = (range.default_value * mult);
		}

		// Limit values to set ranges
		if (value < (range.lower * mult)) 
    5e6e:	fa 85       	ldd	r31, Y+10	; 0x0a
    5e70:	ef 2f       	mov	r30, r31
    5e72:	f0 e0       	ldi	r31, 0x00	; 0
    5e74:	fb 8b       	std	Y+19, r31	; 0x13
    5e76:	ea 8b       	std	Y+18, r30	; 0x12
    5e78:	2a 85       	ldd	r18, Y+10	; 0x0a
    5e7a:	42 03       	mulsu	r20, r18
    5e7c:	10 01       	movw	r2, r0
    5e7e:	11 24       	eor	r1, r1
		{
			value = range.lower * mult;
		}
		
		if (value > (range.upper * mult)) 
    5e80:	32 03       	mulsu	r19, r18
    5e82:	a0 01       	movw	r20, r0
    5e84:	11 24       	eor	r1, r1
    5e86:	5f 87       	std	Y+15, r21	; 0x0f
    5e88:	4e 87       	std	Y+14, r20	; 0x0e
	uint8_t display_update = 0;
	uint8_t servo_update = 0;
	uint8_t button_update = 0;
	uint8_t button_inc = 0;
	bool	button_lock = false;
	bool	first_time = true;
    5e8a:	91 e0       	ldi	r25, 0x01	; 1
	int16_t value = (int8_t)*values;
	uint8_t display_update = 0;
	uint8_t servo_update = 0;
	uint8_t button_update = 0;
	uint8_t button_inc = 0;
	bool	button_lock = false;
    5e8c:	91 2c       	mov	r9, r1
	mugui_size16_t size;
	int16_t temp16;
	int16_t value = (int8_t)*values;
	uint8_t display_update = 0;
	uint8_t servo_update = 0;
	uint8_t button_update = 0;
    5e8e:	51 2c       	mov	r5, r1
void do_menu_item(uint16_t menuitem, int8_t *values, uint8_t mult, menu_range_t range, int8_t offset, uint16_t text_link, bool servo_enable, int16_t servo_number)
{
	mugui_size16_t size;
	int16_t temp16;
	int16_t value = (int8_t)*values;
	uint8_t display_update = 0;
    5e90:	f1 2c       	mov	r15, r1
			first_time = false;

			clear_buffer(buffer);

			// Print title
			gLCDprint_Menu_P((char*)pgm_read_word(&text_menu[menuitem]), (const unsigned char*)Verdana14, 0, 0);
    5e92:	83 01       	movw	r16, r6
    5e94:	00 0f       	add	r16, r16
    5e96:	11 1f       	adc	r17, r17
    5e98:	0c 50       	subi	r16, 0x0C	; 12
    5e9a:	12 4f       	sbci	r17, 0xF2	; 242
			// Print value
			if ((range.style == 0) || (range.style == 2) || (range.style == 3)) // numeric, numeric * 4, servo limits
			{
				// Write numeric value, centered on screen
				mugui_text_sizestring(itoa(value,pBuffer,10), (const unsigned char*)Verdana14, &size);
				mugui_lcd_puts(itoa(value,pBuffer,10),(const unsigned char*)Verdana14,((128-size.x)/2)+offset,25);
    5e9c:	ec 2d       	mov	r30, r12
    5e9e:	ff 27       	eor	r31, r31
    5ea0:	e7 fd       	sbrc	r30, 7
    5ea2:	f0 95       	com	r31
    5ea4:	ff 8b       	std	Y+23, r31	; 0x17
    5ea6:	ee 8b       	std	Y+22, r30	; 0x16
    5ea8:	f0 e8       	ldi	r31, 0x80	; 128
    5eaa:	cf 2e       	mov	r12, r31
    5eac:	d1 2c       	mov	r13, r1

			// Print title
			gLCDprint_Menu_P((char*)pgm_read_word(&text_menu[menuitem]), (const unsigned char*)Verdana14, 0, 0);

			// Print value
			if ((range.style == 0) || (range.style == 2) || (range.style == 3)) // numeric, numeric * 4, servo limits
    5eae:	fe ef       	ldi	r31, 0xFE	; 254
    5eb0:	f4 0d       	add	r31, r4
    5eb2:	f8 8f       	std	Y+24, r31	; 0x18
		else if (range.style == 3)
		{
			// Loop rate = 20ms (50Hz)
			_delay_ms(20);
		}
		else if ((range.style == 0) || (range.style == 2))
    5eb4:	24 2d       	mov	r18, r4
    5eb6:	2d 7f       	andi	r18, 0xFD	; 253
    5eb8:	29 8f       	std	Y+25, r18	; 0x19

		// Set servo position if required
		// Ignore if the output is marked as a motor
		if	(
			(servo_enable) &&
			(Config.Channel[servo_number].Motor_marker != MOTOR)
    5eba:	86 e2       	ldi	r24, 0x26	; 38
    5ebc:	ee a5       	ldd	r30, Y+46	; 0x2e
    5ebe:	ff a5       	ldd	r31, Y+47	; 0x2f
    5ec0:	8e 9f       	mul	r24, r30
    5ec2:	a0 01       	movw	r20, r0
    5ec4:	8f 9f       	mul	r24, r31
    5ec6:	50 0d       	add	r21, r0
    5ec8:	11 24       	eor	r1, r1
    5eca:	49 5c       	subi	r20, 0xC9	; 201
    5ecc:	59 4f       	sbci	r21, 0xF9	; 249
    5ece:	5c 87       	std	Y+12, r21	; 0x0c
    5ed0:	4b 87       	std	Y+11, r20	; 0x0b
	button = NONE;

	// This is a loop that cycles until Button 4 is pressed (Save)
	// The GLCD updating slows servo updates down too much so only update the GLCD periodically
	// When not updating the GLCD the servo should be updated at 50Hz (20ms)
	while (button != ENTER)
    5ed2:	80 91 da 07 	lds	r24, 0x07DA
    5ed6:	80 3e       	cpi	r24, 0xE0	; 224
    5ed8:	09 f4       	brne	.+2      	; 0x5edc <do_menu_item+0xe6>
    5eda:	01 c1       	rjmp	.+514    	; 0x60de <do_menu_item+0x2e8>
		// Increment loopcount so that we can time various things
		display_update++;
		servo_update++;

		// Vary the button increment delay depending on the function
		if (servo_enable)
    5edc:	88 20       	and	r8, r8
    5ede:	11 f0       	breq	.+4      	; 0x5ee4 <do_menu_item+0xee>
		{
			button_inc = 5; // For servos
    5ee0:	25 e0       	ldi	r18, 0x05	; 5
    5ee2:	01 c0       	rjmp	.+2      	; 0x5ee6 <do_menu_item+0xf0>
		}
		else
		{
			button_inc = 1;	// For everything else (numbers)
    5ee4:	21 e0       	ldi	r18, 0x01	; 1
		}

		// Increment button timer when pressed
		if (button != NONE)
    5ee6:	80 3f       	cpi	r24, 0xF0	; 240
    5ee8:	19 f0       	breq	.+6      	; 0x5ef0 <do_menu_item+0xfa>
		{
			button_update++;
    5eea:	53 94       	inc	r5

			// Release button lock after button_inc loops
			if (button_update > button_inc)
    5eec:	25 15       	cp	r18, r5
    5eee:	10 f4       	brcc	.+4      	; 0x5ef4 <do_menu_item+0xfe>
		}
		// Remove lock when not pressed
		else 
		{
			button_update = 0;
			button_lock = false;
    5ef0:	91 2c       	mov	r9, r1
			} 
		}
		// Remove lock when not pressed
		else 
		{
			button_update = 0;
    5ef2:	51 2c       	mov	r5, r1
			button_lock = false;
		}

		// Display update
		if 	(!servo_enable || 									// Non-servo value or
    5ef4:	88 20       	and	r8, r8
    5ef6:	49 f0       	breq	.+18     	; 0x5f0a <do_menu_item+0x114>
	// The GLCD updating slows servo updates down too much so only update the GLCD periodically
	// When not updating the GLCD the servo should be updated at 50Hz (20ms)
	while (button != ENTER)
	{
		// Increment loopcount so that we can time various things
		display_update++;
    5ef8:	f3 94       	inc	r15
			button_update = 0;
			button_lock = false;
		}

		// Display update
		if 	(!servo_enable || 									// Non-servo value or
    5efa:	f7 e0       	ldi	r31, 0x07	; 7
    5efc:	ff 15       	cp	r31, r15
    5efe:	10 f4       	brcc	.+4      	; 0x5f04 <do_menu_item+0x10e>
			((display_update >= 8) && (button != NONE)) || 		// Servo value and 8 cycles passed but only with a button pressed or...
    5f00:	80 3f       	cpi	r24, 0xF0	; 240
    5f02:	19 f4       	brne	.+6      	; 0x5f0a <do_menu_item+0x114>
    5f04:	99 23       	and	r25, r25
    5f06:	09 f4       	brne	.+2      	; 0x5f0a <do_menu_item+0x114>
    5f08:	66 c0       	rjmp	.+204    	; 0x5fd6 <do_menu_item+0x1e0>
			 (first_time))										// First time into routine
		{
			display_update = 0;
			first_time = false;

			clear_buffer(buffer);
    5f0a:	80 e0       	ldi	r24, 0x00	; 0
    5f0c:	91 e0       	ldi	r25, 0x01	; 1
    5f0e:	0e 94 33 20 	call	0x4066	; 0x4066 <clear_buffer>

			// Print title
			gLCDprint_Menu_P((char*)pgm_read_word(&text_menu[menuitem]), (const unsigned char*)Verdana14, 0, 0);
    5f12:	f8 01       	movw	r30, r16
    5f14:	85 91       	lpm	r24, Z+
    5f16:	94 91       	lpm	r25, Z
    5f18:	20 e0       	ldi	r18, 0x00	; 0
    5f1a:	30 e0       	ldi	r19, 0x00	; 0
    5f1c:	40 e0       	ldi	r20, 0x00	; 0
    5f1e:	50 e0       	ldi	r21, 0x00	; 0
    5f20:	6f e5       	ldi	r22, 0x5F	; 95
    5f22:	71 e0       	ldi	r23, 0x01	; 1
    5f24:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <gLCDprint_Menu_P>

			// Print value
			if ((range.style == 0) || (range.style == 2) || (range.style == 3)) // numeric, numeric * 4, servo limits
    5f28:	44 20       	and	r4, r4
    5f2a:	19 f0       	breq	.+6      	; 0x5f32 <do_menu_item+0x13c>
    5f2c:	28 8d       	ldd	r18, Y+24	; 0x18
    5f2e:	22 30       	cpi	r18, 0x02	; 2
    5f30:	30 f5       	brcc	.+76     	; 0x5f7e <do_menu_item+0x188>
    5f32:	4a e0       	ldi	r20, 0x0A	; 10
    5f34:	63 e5       	ldi	r22, 0x53	; 83
    5f36:	75 e0       	ldi	r23, 0x05	; 5
    5f38:	c5 01       	movw	r24, r10
    5f3a:	0e 94 b9 48 	call	0x9172	; 0x9172 <__itoa_ncheck>
			{
				// Write numeric value, centered on screen
				mugui_text_sizestring(itoa(value,pBuffer,10), (const unsigned char*)Verdana14, &size);
    5f3e:	ae 01       	movw	r20, r28
    5f40:	4f 5f       	subi	r20, 0xFF	; 255
    5f42:	5f 4f       	sbci	r21, 0xFF	; 255
    5f44:	6f e5       	ldi	r22, 0x5F	; 95
    5f46:	71 e0       	ldi	r23, 0x01	; 1
    5f48:	0e 94 07 3d 	call	0x7a0e	; 0x7a0e <mugui_text_sizestring>
				mugui_lcd_puts(itoa(value,pBuffer,10),(const unsigned char*)Verdana14,((128-size.x)/2)+offset,25);
    5f4c:	89 81       	ldd	r24, Y+1	; 0x01
    5f4e:	9a 81       	ldd	r25, Y+2	; 0x02
    5f50:	76 01       	movw	r14, r12
    5f52:	e8 1a       	sub	r14, r24
    5f54:	f9 0a       	sbc	r15, r25
    5f56:	f6 94       	lsr	r15
    5f58:	e7 94       	ror	r14
    5f5a:	4e 89       	ldd	r20, Y+22	; 0x16
    5f5c:	5f 89       	ldd	r21, Y+23	; 0x17
    5f5e:	e4 0e       	add	r14, r20
    5f60:	f5 1e       	adc	r15, r21
    5f62:	4a e0       	ldi	r20, 0x0A	; 10
    5f64:	63 e5       	ldi	r22, 0x53	; 83
    5f66:	75 e0       	ldi	r23, 0x05	; 5
    5f68:	c5 01       	movw	r24, r10
    5f6a:	0e 94 b9 48 	call	0x9172	; 0x9172 <__itoa_ncheck>
    5f6e:	29 e1       	ldi	r18, 0x19	; 25
    5f70:	30 e0       	ldi	r19, 0x00	; 0
    5f72:	a7 01       	movw	r20, r14
    5f74:	6f e5       	ldi	r22, 0x5F	; 95
    5f76:	71 e0       	ldi	r23, 0x01	; 1
    5f78:	0e 94 56 3e 	call	0x7cac	; 0x7cac <mugui_lcd_puts>
    5f7c:	24 c0       	rjmp	.+72     	; 0x5fc6 <do_menu_item+0x1d0>
			}
			else // text
			{
				// Write text, centered on screen
				// NB: pBuffer obviously has to be larger than the longest text string printed... duh...
				pgm_mugui_scopy((char*)pgm_read_word(&text_menu[text_link + value])); // Copy string to pBuffer
    5f7e:	ec 88       	ldd	r14, Y+20	; 0x14
    5f80:	fd 88       	ldd	r15, Y+21	; 0x15
    5f82:	ea 0c       	add	r14, r10
    5f84:	fb 1c       	adc	r15, r11
    5f86:	f7 01       	movw	r30, r14
    5f88:	ee 0f       	add	r30, r30
    5f8a:	ff 1f       	adc	r31, r31
    5f8c:	ec 50       	subi	r30, 0x0C	; 12
    5f8e:	f2 4f       	sbci	r31, 0xF2	; 242
    5f90:	85 91       	lpm	r24, Z+
    5f92:	94 91       	lpm	r25, Z
    5f94:	0e 94 55 3d 	call	0x7aaa	; 0x7aaa <pgm_mugui_scopy>

				mugui_text_sizestring((char*)pBuffer, (const unsigned char*)Verdana14, &size);
    5f98:	ae 01       	movw	r20, r28
    5f9a:	4f 5f       	subi	r20, 0xFF	; 255
    5f9c:	5f 4f       	sbci	r21, 0xFF	; 255
    5f9e:	6f e5       	ldi	r22, 0x5F	; 95
    5fa0:	71 e0       	ldi	r23, 0x01	; 1
    5fa2:	83 e5       	ldi	r24, 0x53	; 83
    5fa4:	95 e0       	ldi	r25, 0x05	; 5
    5fa6:	0e 94 07 3d 	call	0x7a0e	; 0x7a0e <mugui_text_sizestring>
				LCD_Display_Text(text_link + value, (const unsigned char*)Verdana14,((128-size.x)/2),25);
    5faa:	89 81       	ldd	r24, Y+1	; 0x01
    5fac:	9a 81       	ldd	r25, Y+2	; 0x02
    5fae:	a6 01       	movw	r20, r12
    5fb0:	48 1b       	sub	r20, r24
    5fb2:	59 0b       	sbc	r21, r25
    5fb4:	56 95       	lsr	r21
    5fb6:	47 95       	ror	r20
    5fb8:	29 e1       	ldi	r18, 0x19	; 25
    5fba:	30 e0       	ldi	r19, 0x00	; 0
    5fbc:	6f e5       	ldi	r22, 0x5F	; 95
    5fbe:	71 e0       	ldi	r23, 0x01	; 1
    5fc0:	c7 01       	movw	r24, r14
    5fc2:	0e 94 e0 21 	call	0x43c0	; 0x43c0 <LCD_Display_Text>
			}

			// Print bottom markers
			print_menu_frame(1);
    5fc6:	81 e0       	ldi	r24, 0x01	; 1
    5fc8:	0e 94 1a 2e 	call	0x5c34	; 0x5c34 <print_menu_frame>

			// Write from buffer
			write_buffer(buffer);
    5fcc:	80 e0       	ldi	r24, 0x00	; 0
    5fce:	91 e0       	ldi	r25, 0x01	; 1
    5fd0:	0e 94 01 20 	call	0x4002	; 0x4002 <write_buffer>
		// Display update
		if 	(!servo_enable || 									// Non-servo value or
			((display_update >= 8) && (button != NONE)) || 		// Servo value and 8 cycles passed but only with a button pressed or...
			 (first_time))										// First time into routine
		{
			display_update = 0;
    5fd4:	f1 2c       	mov	r15, r1
			// Write from buffer
			write_buffer(buffer);
		}
		
		// Slow the loop rate for text items
		if (range.style == 1)
    5fd6:	51 e0       	ldi	r21, 0x01	; 1
    5fd8:	45 12       	cpse	r4, r21
    5fda:	08 c0       	rjmp	.+16     	; 0x5fec <do_menu_item+0x1f6>
    5fdc:	8f e3       	ldi	r24, 0x3F	; 63
    5fde:	92 e4       	ldi	r25, 0x42	; 66
    5fe0:	ef e0       	ldi	r30, 0x0F	; 15
    5fe2:	81 50       	subi	r24, 0x01	; 1
    5fe4:	90 40       	sbci	r25, 0x00	; 0
    5fe6:	e0 40       	sbci	r30, 0x00	; 0
    5fe8:	e1 f7       	brne	.-8      	; 0x5fe2 <do_menu_item+0x1ec>
    5fea:	15 c0       	rjmp	.+42     	; 0x6016 <do_menu_item+0x220>
		{
			// Loop rate = 250ms (4Hz)
			_delay_ms(250);
		}
		else if (range.style == 3)
    5fec:	f3 e0       	ldi	r31, 0x03	; 3
    5fee:	4f 12       	cpse	r4, r31
    5ff0:	08 c0       	rjmp	.+16     	; 0x6002 <do_menu_item+0x20c>
    5ff2:	2f e7       	ldi	r18, 0x7F	; 127
    5ff4:	38 e3       	ldi	r19, 0x38	; 56
    5ff6:	41 e0       	ldi	r20, 0x01	; 1
    5ff8:	21 50       	subi	r18, 0x01	; 1
    5ffa:	30 40       	sbci	r19, 0x00	; 0
    5ffc:	40 40       	sbci	r20, 0x00	; 0
    5ffe:	e1 f7       	brne	.-8      	; 0x5ff8 <do_menu_item+0x202>
    6000:	0a c0       	rjmp	.+20     	; 0x6016 <do_menu_item+0x220>
		{
			// Loop rate = 20ms (50Hz)
			_delay_ms(20);
		}
		else if ((range.style == 0) || (range.style == 2))
    6002:	59 8d       	ldd	r21, Y+25	; 0x19
    6004:	51 11       	cpse	r21, r1
    6006:	09 c0       	rjmp	.+18     	; 0x601a <do_menu_item+0x224>
    6008:	8f e7       	ldi	r24, 0x7F	; 127
    600a:	9a e1       	ldi	r25, 0x1A	; 26
    600c:	e6 e0       	ldi	r30, 0x06	; 6
    600e:	81 50       	subi	r24, 0x01	; 1
    6010:	90 40       	sbci	r25, 0x00	; 0
    6012:	e0 40       	sbci	r30, 0x00	; 0
    6014:	e1 f7       	brne	.-8      	; 0x600e <do_menu_item+0x218>
    6016:	00 c0       	rjmp	.+0      	; 0x6018 <do_menu_item+0x222>
    6018:	00 00       	nop
		}

		// Poll buttons when idle
		// Don't use button acceleration when moving servos
		// And don't block the code with poll_buttons()
		if (servo_enable)
    601a:	88 20       	and	r8, r8
    601c:	41 f0       	breq	.+16     	; 0x602e <do_menu_item+0x238>
		{
			button = (PINB & 0xf0);	
    601e:	83 b1       	in	r24, 0x03	; 3
    6020:	80 7f       	andi	r24, 0xF0	; 240
    6022:	80 93 da 07 	sts	0x07DA, r24
			button_multiplier = 1;
    6026:	81 e0       	ldi	r24, 0x01	; 1
    6028:	80 93 db 07 	sts	0x07DB, r24
    602c:	03 c0       	rjmp	.+6      	; 0x6034 <do_menu_item+0x23e>
		}
		else
		{
			poll_buttons(true);
    602e:	81 e0       	ldi	r24, 0x01	; 1
    6030:	0e 94 c6 2e 	call	0x5d8c	; 0x5d8c <poll_buttons>
		}

		// Release button lock when pressed
		// unless a servo
		if ((button != NONE) && (!servo_enable))
    6034:	80 91 da 07 	lds	r24, 0x07DA
    6038:	80 3f       	cpi	r24, 0xF0	; 240
    603a:	39 f1       	breq	.+78     	; 0x608a <do_menu_item+0x294>
    603c:	88 20       	and	r8, r8
    603e:	c9 f0       	breq	.+50     	; 0x6072 <do_menu_item+0x27c>
		{
				button_lock = false;
		}
		
		// Handle cursor Up/Down limits
		if (button == DOWN)
    6040:	80 3d       	cpi	r24, 0xD0	; 208
    6042:	51 f4       	brne	.+20     	; 0x6058 <do_menu_item+0x262>
		{
			if (button_lock == false)
    6044:	91 10       	cpse	r9, r1
    6046:	70 c0       	rjmp	.+224    	; 0x6128 <do_menu_item+0x332>
			{
				button_lock = true;
				value = value - (range.increment * button_multiplier);
    6048:	80 91 db 07 	lds	r24, 0x07DB
    604c:	fd 85       	ldd	r31, Y+13	; 0x0d
    604e:	f8 9f       	mul	r31, r24
    6050:	a0 18       	sub	r10, r0
    6052:	b1 08       	sbc	r11, r1
    6054:	11 24       	eor	r1, r1
    6056:	0b c0       	rjmp	.+22     	; 0x606e <do_menu_item+0x278>
				button_update = 0;
			}
		}

		if (button == UP)
    6058:	80 3b       	cpi	r24, 0xB0	; 176
    605a:	81 f4       	brne	.+32     	; 0x607c <do_menu_item+0x286>
		{
			if (button_lock == false)
    605c:	91 10       	cpse	r9, r1
    605e:	64 c0       	rjmp	.+200    	; 0x6128 <do_menu_item+0x332>
			{
				button_lock = true;
				value = value + (range.increment * button_multiplier);
    6060:	80 91 db 07 	lds	r24, 0x07DB
    6064:	2d 85       	ldd	r18, Y+13	; 0x0d
    6066:	28 9f       	mul	r18, r24
    6068:	a0 0c       	add	r10, r0
    606a:	b1 1c       	adc	r11, r1
    606c:	11 24       	eor	r1, r1
				button_update = 0;
    606e:	51 2c       	mov	r5, r1
    6070:	5b c0       	rjmp	.+182    	; 0x6128 <do_menu_item+0x332>
		{
				button_lock = false;
		}
		
		// Handle cursor Up/Down limits
		if (button == DOWN)
    6072:	80 3d       	cpi	r24, 0xD0	; 208
    6074:	49 f3       	breq	.-46     	; 0x6048 <do_menu_item+0x252>
				value = value - (range.increment * button_multiplier);
				button_update = 0;
			}
		}

		if (button == UP)
    6076:	80 3b       	cpi	r24, 0xB0	; 176
    6078:	99 f3       	breq	.-26     	; 0x6060 <do_menu_item+0x26a>

		// Release button lock when pressed
		// unless a servo
		if ((button != NONE) && (!servo_enable))
		{
				button_lock = false;
    607a:	91 2c       	mov	r9, r1
				value = value + (range.increment * button_multiplier);
				button_update = 0;
			}
		}

		if (button == BACK)	
    607c:	80 37       	cpi	r24, 0x70	; 112
    607e:	29 f4       	brne	.+10     	; 0x608a <do_menu_item+0x294>
		{
			value = (range.default_value * mult);
    6080:	29 85       	ldd	r18, Y+9	; 0x09
    6082:	3a 85       	ldd	r19, Y+10	; 0x0a
    6084:	23 03       	mulsu	r18, r19
    6086:	50 01       	movw	r10, r0
    6088:	11 24       	eor	r1, r1
    608a:	a2 14       	cp	r10, r2
    608c:	b3 04       	cpc	r11, r3
    608e:	0c f4       	brge	.+2      	; 0x6092 <do_menu_item+0x29c>
    6090:	51 01       	movw	r10, r2
    6092:	4e 85       	ldd	r20, Y+14	; 0x0e
    6094:	5f 85       	ldd	r21, Y+15	; 0x0f
    6096:	4a 15       	cp	r20, r10
    6098:	5b 05       	cpc	r21, r11
    609a:	0c f4       	brge	.+2      	; 0x609e <do_menu_item+0x2a8>
    609c:	5a 01       	movw	r10, r20
		{
			value = range.upper * mult;
		}

		// Update contrast setting
		if (menuitem == CONTRAST)
    609e:	5f e9       	ldi	r21, 0x9F	; 159
    60a0:	65 16       	cp	r6, r21
    60a2:	71 04       	cpc	r7, r1
    60a4:	19 f4       	brne	.+6      	; 0x60ac <do_menu_item+0x2b6>
		{
			st7565_set_brightness(value);
    60a6:	8a 2d       	mov	r24, r10
    60a8:	0e 94 d9 1f 	call	0x3fb2	; 0x3fb2 <st7565_set_brightness>
		}

		// Set servo position if required
		// Ignore if the output is marked as a motor
		if	(
    60ac:	88 20       	and	r8, r8
    60ae:	a9 f0       	breq	.+42     	; 0x60da <do_menu_item+0x2e4>
			(servo_enable) &&
    60b0:	eb 85       	ldd	r30, Y+11	; 0x0b
    60b2:	fc 85       	ldd	r31, Y+12	; 0x0c
    60b4:	80 81       	ld	r24, Z
    60b6:	82 30       	cpi	r24, 0x02	; 2
    60b8:	81 f0       	breq	.+32     	; 0x60da <do_menu_item+0x2e4>
			(Config.Channel[servo_number].Motor_marker != MOTOR)
			)
		{
			servo_update = 0;

			temp16 = scale_percent(value);	// Convert to servo position (from %)
    60ba:	8a 2d       	mov	r24, r10
    60bc:	0e 94 00 3d 	call	0x7a00	; 0x7a00 <scale_percent>

			// Scale servo from 2500~5000 to 875~2125
			temp16 = ((temp16 - 3750) >> 1) + 1500; 
    60c0:	86 5a       	subi	r24, 0xA6	; 166
    60c2:	9e 40       	sbci	r25, 0x0E	; 14
    60c4:	95 95       	asr	r25
    60c6:	87 95       	ror	r24

			cli();
    60c8:	f8 94       	cli
			servo_update = 0;

			temp16 = scale_percent(value);	// Convert to servo position (from %)

			// Scale servo from 2500~5000 to 875~2125
			temp16 = ((temp16 - 3750) >> 1) + 1500; 
    60ca:	bc 01       	movw	r22, r24
    60cc:	64 52       	subi	r22, 0x24	; 36
    60ce:	7a 4f       	sbci	r23, 0xFA	; 250

			cli();
			output_servo_ppm_asm3(servo_number, temp16);
    60d0:	8e a5       	ldd	r24, Y+46	; 0x2e
    60d2:	9f a5       	ldd	r25, Y+47	; 0x2f
    60d4:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <output_servo_ppm_asm3>
			sei();
    60d8:	78 94       	sei
    60da:	90 e0       	ldi	r25, 0x00	; 0
    60dc:	fa ce       	rjmp	.-524    	; 0x5ed2 <do_menu_item+0xdc>

	// Exit
	button = ENTER;

	// Divide value from that displayed if style = 2
	if (range.style == 2)
    60de:	f2 e0       	ldi	r31, 0x02	; 2
    60e0:	4f 12       	cpse	r4, r31
    60e2:	06 c0       	rjmp	.+12     	; 0x60f0 <do_menu_item+0x2fa>
	{
		value = value / mult;
    60e4:	c5 01       	movw	r24, r10
    60e6:	6a 89       	ldd	r22, Y+18	; 0x12
    60e8:	7b 89       	ldd	r23, Y+19	; 0x13
    60ea:	0e 94 12 48 	call	0x9024	; 0x9024 <__divmodhi4>
    60ee:	5b 01       	movw	r10, r22
	}

	*values = (int8_t)value;
    60f0:	e8 89       	ldd	r30, Y+16	; 0x10
    60f2:	f9 89       	ldd	r31, Y+17	; 0x11
    60f4:	a0 82       	st	Z, r10
}
    60f6:	69 96       	adiw	r28, 0x19	; 25
    60f8:	0f b6       	in	r0, 0x3f	; 63
    60fa:	f8 94       	cli
    60fc:	de bf       	out	0x3e, r29	; 62
    60fe:	0f be       	out	0x3f, r0	; 63
    6100:	cd bf       	out	0x3d, r28	; 61
    6102:	df 91       	pop	r29
    6104:	cf 91       	pop	r28
    6106:	1f 91       	pop	r17
    6108:	0f 91       	pop	r16
    610a:	ff 90       	pop	r15
    610c:	ef 90       	pop	r14
    610e:	df 90       	pop	r13
    6110:	cf 90       	pop	r12
    6112:	bf 90       	pop	r11
    6114:	af 90       	pop	r10
    6116:	9f 90       	pop	r9
    6118:	8f 90       	pop	r8
    611a:	7f 90       	pop	r7
    611c:	6f 90       	pop	r6
    611e:	5f 90       	pop	r5
    6120:	4f 90       	pop	r4
    6122:	3f 90       	pop	r3
    6124:	2f 90       	pop	r2
    6126:	08 95       	ret

		// Release button lock when pressed
		// unless a servo
		if ((button != NONE) && (!servo_enable))
		{
				button_lock = false;
    6128:	99 24       	eor	r9, r9
    612a:	93 94       	inc	r9
    612c:	ae cf       	rjmp	.-164    	; 0x608a <do_menu_item+0x294>

0000612e <menu_beep>:

void menu_beep(uint8_t beeps)
{
	uint8_t i;

	for (i=0; i < beeps; i++)
    612e:	90 e0       	ldi	r25, 0x00	; 0
    6130:	98 17       	cp	r25, r24
    6132:	b1 f0       	breq	.+44     	; 0x6160 <menu_beep+0x32>
	{ 
		LVA = 1;
    6134:	29 9a       	sbi	0x05, 1	; 5
    6136:	2f e9       	ldi	r18, 0x9F	; 159
    6138:	36 e8       	ldi	r19, 0x86	; 134
    613a:	41 e0       	ldi	r20, 0x01	; 1
    613c:	21 50       	subi	r18, 0x01	; 1
    613e:	30 40       	sbci	r19, 0x00	; 0
    6140:	40 40       	sbci	r20, 0x00	; 0
    6142:	e1 f7       	brne	.-8      	; 0x613c <menu_beep+0xe>
    6144:	00 c0       	rjmp	.+0      	; 0x6146 <menu_beep+0x18>
    6146:	00 00       	nop
		_delay_ms(25);
		LVA = 0;
    6148:	29 98       	cbi	0x05, 1	; 5
    614a:	2f e9       	ldi	r18, 0x9F	; 159
    614c:	36 e8       	ldi	r19, 0x86	; 134
    614e:	41 e0       	ldi	r20, 0x01	; 1
    6150:	21 50       	subi	r18, 0x01	; 1
    6152:	30 40       	sbci	r19, 0x00	; 0
    6154:	40 40       	sbci	r20, 0x00	; 0
    6156:	e1 f7       	brne	.-8      	; 0x6150 <menu_beep+0x22>
    6158:	00 c0       	rjmp	.+0      	; 0x615a <menu_beep+0x2c>
    615a:	00 00       	nop

void menu_beep(uint8_t beeps)
{
	uint8_t i;

	for (i=0; i < beeps; i++)
    615c:	9f 5f       	subi	r25, 0xFF	; 255
    615e:	e8 cf       	rjmp	.-48     	; 0x6130 <menu_beep+0x2>
		LVA = 1;
		_delay_ms(25);
		LVA = 0;
		_delay_ms(25);
	}
}
    6160:	08 95       	ret

00006162 <update_menu>:
// top*		= Item number currently on top line
// temp*	= Currently selected item number
//************************************************************

void update_menu(uint8_t items, uint8_t start, uint8_t offset, uint8_t button, uint8_t* cursor, uint16_t* top, uint16_t* temp)
{
    6162:	af 92       	push	r10
    6164:	bf 92       	push	r11
    6166:	cf 92       	push	r12
    6168:	df 92       	push	r13
    616a:	ef 92       	push	r14
    616c:	ff 92       	push	r15
    616e:	0f 93       	push	r16
    6170:	1f 93       	push	r17
    6172:	cf 93       	push	r28
    6174:	df 93       	push	r29
    6176:	00 d0       	rcall	.+0      	; 0x6178 <update_menu+0x16>
    6178:	cd b7       	in	r28, 0x3d	; 61
    617a:	de b7       	in	r29, 0x3e	; 62
    617c:	98 2f       	mov	r25, r24
    617e:	58 01       	movw	r10, r16
	// Temporarily add in offset :(
	*top = *top + offset;
    6180:	04 2f       	mov	r16, r20
    6182:	10 e0       	ldi	r17, 0x00	; 0
    6184:	d7 01       	movw	r26, r14
    6186:	ed 91       	ld	r30, X+
    6188:	fc 91       	ld	r31, X
    618a:	11 97       	sbiw	r26, 0x01	; 1
    618c:	e0 0f       	add	r30, r16
    618e:	f1 1f       	adc	r31, r17
    6190:	ed 93       	st	X+, r30
    6192:	fc 93       	st	X, r31
	start = start + offset;
    6194:	64 0f       	add	r22, r20

	// Calculate which function has been requested
	if (button == ENTER)
    6196:	20 3e       	cpi	r18, 0xE0	; 224
    6198:	b1 f4       	brne	.+44     	; 0x61c6 <update_menu+0x64>
	{
		switch(*cursor) 
    619a:	d5 01       	movw	r26, r10
    619c:	8c 91       	ld	r24, X
    619e:	8f 30       	cpi	r24, 0x0F	; 15
    61a0:	59 f0       	breq	.+22     	; 0x61b8 <update_menu+0x56>
    61a2:	18 f4       	brcc	.+6      	; 0x61aa <update_menu+0x48>
    61a4:	83 30       	cpi	r24, 0x03	; 3
    61a6:	49 f0       	breq	.+18     	; 0x61ba <update_menu+0x58>
    61a8:	4d c0       	rjmp	.+154    	; 0x6244 <update_menu+0xe2>
    61aa:	8b 31       	cpi	r24, 0x1B	; 27
    61ac:	51 f0       	breq	.+20     	; 0x61c2 <update_menu+0x60>
    61ae:	87 32       	cpi	r24, 0x27	; 39
    61b0:	09 f0       	breq	.+2      	; 0x61b4 <update_menu+0x52>
    61b2:	48 c0       	rjmp	.+144    	; 0x6244 <update_menu+0xe2>
				break;	
			case LINE2:
				*temp = *top + 2;
				break;
			case LINE3:
				*temp = *top + 3;
    61b4:	33 96       	adiw	r30, 0x03	; 3
    61b6:	01 c0       	rjmp	.+2      	; 0x61ba <update_menu+0x58>
		{
			case LINE0:
				*temp = *top;
				break;
			case LINE1:
				*temp = *top + 1;
    61b8:	31 96       	adiw	r30, 0x01	; 1
    61ba:	d6 01       	movw	r26, r12
    61bc:	ed 93       	st	X+, r30
    61be:	fc 93       	st	X, r31
				break;	
    61c0:	41 c0       	rjmp	.+130    	; 0x6244 <update_menu+0xe2>
			case LINE2:
				*temp = *top + 2;
    61c2:	32 96       	adiw	r30, 0x02	; 2
    61c4:	fa cf       	rjmp	.-12     	; 0x61ba <update_menu+0x58>
				break;
		}
	}

	// Handle cursor Up/Down limits
	if (button == DOWN)	
    61c6:	20 3d       	cpi	r18, 0xD0	; 208
    61c8:	f9 f4       	brne	.+62     	; 0x6208 <update_menu+0xa6>
	{
		switch(*cursor) 
    61ca:	f5 01       	movw	r30, r10
    61cc:	80 81       	ld	r24, Z
    61ce:	8f 30       	cpi	r24, 0x0F	; 15
    61d0:	69 f0       	breq	.+26     	; 0x61ec <update_menu+0x8a>
    61d2:	18 f4       	brcc	.+6      	; 0x61da <update_menu+0x78>
    61d4:	83 30       	cpi	r24, 0x03	; 3
    61d6:	31 f0       	breq	.+12     	; 0x61e4 <update_menu+0x82>
    61d8:	15 c0       	rjmp	.+42     	; 0x6204 <update_menu+0xa2>
    61da:	8b 31       	cpi	r24, 0x1B	; 27
    61dc:	59 f0       	breq	.+22     	; 0x61f4 <update_menu+0x92>
    61de:	87 32       	cpi	r24, 0x27	; 39
    61e0:	69 f0       	breq	.+26     	; 0x61fc <update_menu+0x9a>
    61e2:	10 c0       	rjmp	.+32     	; 0x6204 <update_menu+0xa2>
		{
			case LINE0:
				if (items > 1) *cursor = LINE1;
    61e4:	92 30       	cpi	r25, 0x02	; 2
    61e6:	70 f1       	brcs	.+92     	; 0x6244 <update_menu+0xe2>
    61e8:	8f e0       	ldi	r24, 0x0F	; 15
    61ea:	27 c0       	rjmp	.+78     	; 0x623a <update_menu+0xd8>
				break;	
			case LINE1:
				if (items > 2) *cursor = LINE2;
    61ec:	93 30       	cpi	r25, 0x03	; 3
    61ee:	50 f1       	brcs	.+84     	; 0x6244 <update_menu+0xe2>
    61f0:	8b e1       	ldi	r24, 0x1B	; 27
    61f2:	1f c0       	rjmp	.+62     	; 0x6232 <update_menu+0xd0>
				break;	
			case LINE2:
				if (items > 3) *cursor = LINE3;
    61f4:	94 30       	cpi	r25, 0x04	; 4
    61f6:	30 f1       	brcs	.+76     	; 0x6244 <update_menu+0xe2>
    61f8:	87 e2       	ldi	r24, 0x27	; 39
    61fa:	1f c0       	rjmp	.+62     	; 0x623a <update_menu+0xd8>
				break;
			case LINE3:
				if (items > 4) *cursor = NEXTLINE;
    61fc:	95 30       	cpi	r25, 0x05	; 5
    61fe:	10 f1       	brcs	.+68     	; 0x6244 <update_menu+0xe2>
    6200:	88 e2       	ldi	r24, 0x28	; 40
    6202:	17 c0       	rjmp	.+46     	; 0x6232 <update_menu+0xd0>
				break;
			default:
				*cursor = NEXTLINE;
    6204:	88 e2       	ldi	r24, 0x28	; 40
    6206:	19 c0       	rjmp	.+50     	; 0x623a <update_menu+0xd8>
				break;
		}
	}

	if (button == UP)	
    6208:	20 3b       	cpi	r18, 0xB0	; 176
    620a:	d1 f4       	brne	.+52     	; 0x6240 <update_menu+0xde>
	{
		switch(*cursor) 
    620c:	f5 01       	movw	r30, r10
    620e:	80 81       	ld	r24, Z
    6210:	8f 30       	cpi	r24, 0x0F	; 15
    6212:	69 f0       	breq	.+26     	; 0x622e <update_menu+0xcc>
    6214:	20 f4       	brcc	.+8      	; 0x621e <update_menu+0xbc>
    6216:	83 30       	cpi	r24, 0x03	; 3
    6218:	79 f4       	brne	.+30     	; 0x6238 <update_menu+0xd6>
				break;
			case LINE1:
				*cursor = LINE0;
				break;
			case LINE0:
				*cursor = PREVLINE;
    621a:	82 e0       	ldi	r24, 0x02	; 2
    621c:	0a c0       	rjmp	.+20     	; 0x6232 <update_menu+0xd0>
		}
	}

	if (button == UP)	
	{
		switch(*cursor) 
    621e:	8b 31       	cpi	r24, 0x1B	; 27
    6220:	21 f0       	breq	.+8      	; 0x622a <update_menu+0xc8>
    6222:	87 32       	cpi	r24, 0x27	; 39
    6224:	49 f4       	brne	.+18     	; 0x6238 <update_menu+0xd6>
		{
			case LINE3:
				*cursor = LINE2;
    6226:	8b e1       	ldi	r24, 0x1B	; 27
    6228:	08 c0       	rjmp	.+16     	; 0x623a <update_menu+0xd8>
				break;	
			case LINE2:
				*cursor = LINE1;
    622a:	8f e0       	ldi	r24, 0x0F	; 15
    622c:	02 c0       	rjmp	.+4      	; 0x6232 <update_menu+0xd0>
				break;
			case LINE1:
				*cursor = LINE0;
    622e:	83 e0       	ldi	r24, 0x03	; 3
    6230:	04 c0       	rjmp	.+8      	; 0x623a <update_menu+0xd8>
				break;
			case LINE0:
				*cursor = PREVLINE;
    6232:	f5 01       	movw	r30, r10
    6234:	80 83       	st	Z, r24
				break;
    6236:	06 c0       	rjmp	.+12     	; 0x6244 <update_menu+0xe2>
			default:
				*cursor = PREVLINE;
    6238:	82 e0       	ldi	r24, 0x02	; 2
    623a:	d5 01       	movw	r26, r10
    623c:	8c 93       	st	X, r24
				break;
    623e:	02 c0       	rjmp	.+4      	; 0x6244 <update_menu+0xe2>
		}
	}

	if (button != NONE)	
    6240:	20 3f       	cpi	r18, 0xF0	; 240
    6242:	81 f0       	breq	.+32     	; 0x6264 <update_menu+0x102>
	{
		menu_beep(1);
    6244:	81 e0       	ldi	r24, 0x01	; 1
    6246:	69 83       	std	Y+1, r22	; 0x01
    6248:	9a 83       	std	Y+2, r25	; 0x02
    624a:	0e 94 97 30 	call	0x612e	; 0x612e <menu_beep>
    624e:	bf ef       	ldi	r27, 0xFF	; 255
    6250:	e4 e3       	ldi	r30, 0x34	; 52
    6252:	fc e0       	ldi	r31, 0x0C	; 12
    6254:	b1 50       	subi	r27, 0x01	; 1
    6256:	e0 40       	sbci	r30, 0x00	; 0
    6258:	f0 40       	sbci	r31, 0x00	; 0
    625a:	e1 f7       	brne	.-8      	; 0x6254 <update_menu+0xf2>
    625c:	00 c0       	rjmp	.+0      	; 0x625e <update_menu+0xfc>
    625e:	00 00       	nop
    6260:	9a 81       	ldd	r25, Y+2	; 0x02
    6262:	69 81       	ldd	r22, Y+1	; 0x01
		_delay_ms(200);
	}

	// When cursor is at limits and button pressed
	if (*cursor == PREVLINE)								// Up				
    6264:	d5 01       	movw	r26, r10
    6266:	8c 91       	ld	r24, X
    6268:	82 30       	cpi	r24, 0x02	; 2
    626a:	71 f4       	brne	.+28     	; 0x6288 <update_menu+0x126>
	{
		*cursor  = LINE0;
    626c:	83 e0       	ldi	r24, 0x03	; 3
    626e:	8c 93       	st	X, r24
		if (*top > start) 
    6270:	f7 01       	movw	r30, r14
    6272:	20 81       	ld	r18, Z
    6274:	31 81       	ldd	r19, Z+1	; 0x01
    6276:	46 2f       	mov	r20, r22
    6278:	50 e0       	ldi	r21, 0x00	; 0
    627a:	42 17       	cp	r20, r18
    627c:	53 07       	cpc	r21, r19
    627e:	20 f4       	brcc	.+8      	; 0x6288 <update_menu+0x126>
		{
			*top = *top - 1;								// Shuffle list up
    6280:	21 50       	subi	r18, 0x01	; 1
    6282:	31 09       	sbc	r19, r1
    6284:	31 83       	std	Z+1, r19	; 0x01
    6286:	20 83       	st	Z, r18
		}
	}
	
	if (*cursor == NEXTLINE)								// Down
    6288:	d5 01       	movw	r26, r10
    628a:	8c 91       	ld	r24, X
    628c:	88 32       	cpi	r24, 0x28	; 40
    628e:	a1 f4       	brne	.+40     	; 0x62b8 <update_menu+0x156>
	{
		*cursor  = LINE3;
    6290:	87 e2       	ldi	r24, 0x27	; 39
    6292:	8c 93       	st	X, r24
		if ((*top + 3) < (uint16_t)((start + items) - 1))	// Compiler throws a warning here without the cast. top is uint16_t, start is uint8_t, items = uint8_t
    6294:	f7 01       	movw	r30, r14
    6296:	20 81       	ld	r18, Z
    6298:	31 81       	ldd	r19, Z+1	; 0x01
    629a:	a9 01       	movw	r20, r18
    629c:	4d 5f       	subi	r20, 0xFD	; 253
    629e:	5f 4f       	sbci	r21, 0xFF	; 255
    62a0:	89 2f       	mov	r24, r25
    62a2:	90 e0       	ldi	r25, 0x00	; 0
    62a4:	86 0f       	add	r24, r22
    62a6:	91 1d       	adc	r25, r1
    62a8:	01 97       	sbiw	r24, 0x01	; 1
    62aa:	48 17       	cp	r20, r24
    62ac:	59 07       	cpc	r21, r25
    62ae:	20 f4       	brcc	.+8      	; 0x62b8 <update_menu+0x156>
		{
			*top = *top + 1;								// Shuffle list down
    62b0:	2f 5f       	subi	r18, 0xFF	; 255
    62b2:	3f 4f       	sbci	r19, 0xFF	; 255
    62b4:	31 83       	std	Z+1, r19	; 0x01
    62b6:	20 83       	st	Z, r18
		}
	}

	// Remove temporary offset
	*top = *top - offset;
    62b8:	d7 01       	movw	r26, r14
    62ba:	8d 91       	ld	r24, X+
    62bc:	9c 91       	ld	r25, X
    62be:	11 97       	sbiw	r26, 0x01	; 1
    62c0:	80 1b       	sub	r24, r16
    62c2:	91 0b       	sbc	r25, r17
    62c4:	8d 93       	st	X+, r24
    62c6:	9c 93       	st	X, r25
}
    62c8:	0f 90       	pop	r0
    62ca:	0f 90       	pop	r0
    62cc:	df 91       	pop	r29
    62ce:	cf 91       	pop	r28
    62d0:	1f 91       	pop	r17
    62d2:	0f 91       	pop	r16
    62d4:	ff 90       	pop	r15
    62d6:	ef 90       	pop	r14
    62d8:	df 90       	pop	r13
    62da:	cf 90       	pop	r12
    62dc:	bf 90       	pop	r11
    62de:	af 90       	pop	r10
    62e0:	08 95       	ret

000062e2 <print_cursor>:
// Print cursor on specified line
//************************************************************

void print_cursor(uint8_t line)
{
	LCD_Display_Text(13, (const unsigned char*)Wingdings, CURSOROFFSET, line);
    62e2:	28 2f       	mov	r18, r24
    62e4:	30 e0       	ldi	r19, 0x00	; 0
    62e6:	43 e0       	ldi	r20, 0x03	; 3
    62e8:	50 e0       	ldi	r21, 0x00	; 0
    62ea:	65 ef       	ldi	r22, 0xF5	; 245
    62ec:	70 e0       	ldi	r23, 0x00	; 0
    62ee:	8d e0       	ldi	r24, 0x0D	; 13
    62f0:	90 e0       	ldi	r25, 0x00	; 0
    62f2:	0c 94 e0 21 	jmp	0x43c0	; 0x43c0 <LCD_Display_Text>

000062f6 <print_menu_items>:
// MenuOffsets = originally an array, now just a fixed horizontal offset for the value text
// text_link = pointer to the text list for the values if not numeric
// cursor = cursor position
//**********************************************************************
void print_menu_items(uint16_t top, uint16_t start, int8_t values[], const unsigned char* menu_ranges, uint8_t rangetype, uint8_t MenuOffsets, const unsigned char* text_link, uint8_t cursor)
{
    62f6:	2f 92       	push	r2
    62f8:	3f 92       	push	r3
    62fa:	4f 92       	push	r4
    62fc:	5f 92       	push	r5
    62fe:	6f 92       	push	r6
    6300:	7f 92       	push	r7
    6302:	8f 92       	push	r8
    6304:	9f 92       	push	r9
    6306:	af 92       	push	r10
    6308:	bf 92       	push	r11
    630a:	cf 92       	push	r12
    630c:	df 92       	push	r13
    630e:	ef 92       	push	r14
    6310:	ff 92       	push	r15
    6312:	0f 93       	push	r16
    6314:	1f 93       	push	r17
    6316:	cf 93       	push	r28
    6318:	df 93       	push	r29
    631a:	cd b7       	in	r28, 0x3d	; 61
    631c:	de b7       	in	r29, 0x3e	; 62
    631e:	2a 97       	sbiw	r28, 0x0a	; 10
    6320:	0f b6       	in	r0, 0x3f	; 63
    6322:	f8 94       	cli
    6324:	de bf       	out	0x3e, r29	; 62
    6326:	0f be       	out	0x3f, r0	; 63
    6328:	cd bf       	out	0x3d, r28	; 61
    632a:	2c 01       	movw	r4, r24
    632c:	4a 01       	movw	r8, r20
    632e:	39 01       	movw	r6, r18
    6330:	0e 83       	std	Y+6, r16	; 0x06
    6332:	ef 82       	std	Y+7, r14	; 0x07
    6334:	a8 86       	std	Y+8, r10	; 0x08
	menu_range_t	range1;
		
	// Clear buffer before each update
	clear_buffer(buffer);
    6336:	80 e0       	ldi	r24, 0x00	; 0
    6338:	91 e0       	ldi	r25, 0x01	; 1
    633a:	69 87       	std	Y+9, r22	; 0x09
    633c:	7a 87       	std	Y+10, r23	; 0x0a
    633e:	0e 94 33 20 	call	0x4066	; 0x4066 <clear_buffer>
	print_menu_frame(0);
    6342:	80 e0       	ldi	r24, 0x00	; 0
    6344:	0e 94 1a 2e 	call	0x5c34	; 0x5c34 <print_menu_frame>
    6348:	25 e0       	ldi	r18, 0x05	; 5
    634a:	69 85       	ldd	r22, Y+9	; 0x09
    634c:	7a 85       	ldd	r23, Y+10	; 0x0a
    634e:	26 9f       	mul	r18, r22
    6350:	c0 01       	movw	r24, r0
    6352:	27 9f       	mul	r18, r23
    6354:	90 0d       	add	r25, r0
    6356:	11 24       	eor	r1, r1
    6358:	13 01       	movw	r2, r6
    635a:	28 1a       	sub	r2, r24
    635c:	39 0a       	sbc	r3, r25
    635e:	24 9d       	mul	r18, r4
    6360:	c0 01       	movw	r24, r0
    6362:	25 9d       	mul	r18, r5
    6364:	90 0d       	add	r25, r0
    6366:	11 24       	eor	r1, r1
    6368:	28 0e       	add	r2, r24
    636a:	39 1e       	adc	r3, r25
    636c:	72 01       	movw	r14, r4
    636e:	a1 2c       	mov	r10, r1
    6370:	b1 2c       	mov	r11, r1
    6372:	ab e1       	ldi	r26, 0x1B	; 27
    6374:	4a 2e       	mov	r4, r26
    6376:	a8 e1       	ldi	r26, 0x18	; 24
    6378:	5a 2e       	mov	r5, r26
    637a:	4e 18       	sub	r4, r14
    637c:	5f 08       	sbc	r5, r15
    637e:	c6 1a       	sub	r12, r22
    6380:	d7 0a       	sbc	r13, r23
    6382:	86 1a       	sub	r8, r22
    6384:	97 0a       	sbc	r9, r23
    6386:	82 01       	movw	r16, r4
    6388:	0e 0d       	add	r16, r14
    638a:	1f 1d       	adc	r17, r15
	
	// Print each line
	for (uint8_t i = 0; i < 4; i++)
	{
		LCD_Display_Text(top+i,(const unsigned char*)Verdana8,ITEMOFFSET,(uint8_t)pgm_read_byte(&lines[i]));
    638c:	f8 01       	movw	r30, r16
    638e:	24 91       	lpm	r18, Z
    6390:	30 e0       	ldi	r19, 0x00	; 0
    6392:	4a e0       	ldi	r20, 0x0A	; 10
    6394:	50 e0       	ldi	r21, 0x00	; 0
    6396:	6d e0       	ldi	r22, 0x0D	; 13
    6398:	7a e0       	ldi	r23, 0x0A	; 10
    639a:	c7 01       	movw	r24, r14
    639c:	0e 94 e0 21 	call	0x43c0	; 0x43c0 <LCD_Display_Text>

		// Handle unique or copied ranges (to reduce space)
		if (rangetype == 0)
    63a0:	fe 81       	ldd	r31, Y+6	; 0x06
		{
			// Use each unique entry
			memcpy_P(&range1, &menu_ranges[(top+i - start)* sizeof(range1)], sizeof(range1));
    63a2:	45 e0       	ldi	r20, 0x05	; 5
    63a4:	50 e0       	ldi	r21, 0x00	; 0
	for (uint8_t i = 0; i < 4; i++)
	{
		LCD_Display_Text(top+i,(const unsigned char*)Verdana8,ITEMOFFSET,(uint8_t)pgm_read_byte(&lines[i]));

		// Handle unique or copied ranges (to reduce space)
		if (rangetype == 0)
    63a6:	f1 11       	cpse	r31, r1
    63a8:	04 c0       	rjmp	.+8      	; 0x63b2 <print_menu_items+0xbc>
		{
			// Use each unique entry
			memcpy_P(&range1, &menu_ranges[(top+i - start)* sizeof(range1)], sizeof(range1));
    63aa:	b5 01       	movw	r22, r10
    63ac:	62 0d       	add	r22, r2
    63ae:	73 1d       	adc	r23, r3
    63b0:	01 c0       	rjmp	.+2      	; 0x63b4 <print_menu_items+0xbe>
		}
		else
		{
			// Use just the first entry in array for all 
			memcpy_P(&range1, &menu_ranges[0], sizeof(range1));
    63b2:	b3 01       	movw	r22, r6
    63b4:	ce 01       	movw	r24, r28
    63b6:	01 96       	adiw	r24, 0x01	; 1
    63b8:	0e 94 9e 48 	call	0x913c	; 0x913c <memcpy_P>
		}

		print_menu_text((values[top+i - start]), range1.style, (pgm_read_byte(&text_link[top+i - start]) + values[top+i - start]), MenuOffsets, (uint8_t)pgm_read_byte(&lines[i]));
    63bc:	f8 01       	movw	r30, r16
    63be:	04 91       	lpm	r16, Z
    63c0:	f6 01       	movw	r30, r12
    63c2:	ee 0d       	add	r30, r14
    63c4:	ff 1d       	adc	r31, r15
    63c6:	e4 91       	lpm	r30, Z
    63c8:	d4 01       	movw	r26, r8
    63ca:	ae 0d       	add	r26, r14
    63cc:	bf 1d       	adc	r27, r15
    63ce:	8c 91       	ld	r24, X
    63d0:	99 27       	eor	r25, r25
    63d2:	87 fd       	sbrc	r24, 7
    63d4:	90 95       	com	r25
    63d6:	ac 01       	movw	r20, r24
    63d8:	4e 0f       	add	r20, r30
    63da:	51 1d       	adc	r21, r1
    63dc:	2f 81       	ldd	r18, Y+7	; 0x07
    63de:	6c 81       	ldd	r22, Y+4	; 0x04
    63e0:	0e 94 9f 2e 	call	0x5d3e	; 0x5d3e <print_menu_text>
    63e4:	ff ef       	ldi	r31, 0xFF	; 255
    63e6:	ef 1a       	sub	r14, r31
    63e8:	ff 0a       	sbc	r15, r31
    63ea:	85 e0       	ldi	r24, 0x05	; 5
    63ec:	a8 0e       	add	r10, r24
    63ee:	b1 1c       	adc	r11, r1
	// Clear buffer before each update
	clear_buffer(buffer);
	print_menu_frame(0);
	
	// Print each line
	for (uint8_t i = 0; i < 4; i++)
    63f0:	e4 e1       	ldi	r30, 0x14	; 20
    63f2:	ae 16       	cp	r10, r30
    63f4:	b1 04       	cpc	r11, r1
    63f6:	09 f0       	breq	.+2      	; 0x63fa <print_menu_items+0x104>
    63f8:	c6 cf       	rjmp	.-116    	; 0x6386 <print_menu_items+0x90>
		}

		print_menu_text((values[top+i - start]), range1.style, (pgm_read_byte(&text_link[top+i - start]) + values[top+i - start]), MenuOffsets, (uint8_t)pgm_read_byte(&lines[i]));
	}

	print_cursor(cursor);	// Cursor
    63fa:	88 85       	ldd	r24, Y+8	; 0x08
    63fc:	0e 94 71 31 	call	0x62e2	; 0x62e2 <print_cursor>
	write_buffer(buffer);
    6400:	80 e0       	ldi	r24, 0x00	; 0
    6402:	91 e0       	ldi	r25, 0x01	; 1
    6404:	0e 94 01 20 	call	0x4002	; 0x4002 <write_buffer>
	poll_buttons(true);
    6408:	81 e0       	ldi	r24, 0x01	; 1
    640a:	0e 94 c6 2e 	call	0x5d8c	; 0x5d8c <poll_buttons>
}
    640e:	2a 96       	adiw	r28, 0x0a	; 10
    6410:	0f b6       	in	r0, 0x3f	; 63
    6412:	f8 94       	cli
    6414:	de bf       	out	0x3e, r29	; 62
    6416:	0f be       	out	0x3f, r0	; 63
    6418:	cd bf       	out	0x3d, r28	; 61
    641a:	df 91       	pop	r29
    641c:	cf 91       	pop	r28
    641e:	1f 91       	pop	r17
    6420:	0f 91       	pop	r16
    6422:	ff 90       	pop	r15
    6424:	ef 90       	pop	r14
    6426:	df 90       	pop	r13
    6428:	cf 90       	pop	r12
    642a:	bf 90       	pop	r11
    642c:	af 90       	pop	r10
    642e:	9f 90       	pop	r9
    6430:	8f 90       	pop	r8
    6432:	7f 90       	pop	r7
    6434:	6f 90       	pop	r6
    6436:	5f 90       	pop	r5
    6438:	4f 90       	pop	r4
    643a:	3f 90       	pop	r3
    643c:	2f 90       	pop	r2
    643e:	08 95       	ret

00006440 <menu_flight>:
//************************************************************
// Main menu-specific setup
//************************************************************

void menu_flight(uint8_t mode)
{
    6440:	6f 92       	push	r6
    6442:	7f 92       	push	r7
    6444:	8f 92       	push	r8
    6446:	af 92       	push	r10
    6448:	bf 92       	push	r11
    644a:	cf 92       	push	r12
    644c:	df 92       	push	r13
    644e:	ef 92       	push	r14
    6450:	ff 92       	push	r15
    6452:	0f 93       	push	r16
    6454:	1f 93       	push	r17
    6456:	cf 93       	push	r28
    6458:	df 93       	push	r29
    645a:	00 d0       	rcall	.+0      	; 0x645c <menu_flight+0x1c>
    645c:	00 d0       	rcall	.+0      	; 0x645e <menu_flight+0x1e>
    645e:	1f 92       	push	r1
    6460:	cd b7       	in	r28, 0x3d	; 61
    6462:	de b7       	in	r29, 0x3e	; 62
	int8_t *value_ptr;
	menu_range_t range;
	uint8_t text_link;

	// If sub-menu item has changed, reset sub-menu positions
	if (menu_flag)
    6464:	90 91 dc 07 	lds	r25, 0x07DC
    6468:	99 23       	and	r25, r25
    646a:	41 f0       	breq	.+16     	; 0x647c <menu_flight+0x3c>
	{
		sub_top = FLIGHTSTART;
    646c:	2a ea       	ldi	r18, 0xAA	; 170
    646e:	30 e0       	ldi	r19, 0x00	; 0
    6470:	30 93 2d 05 	sts	0x052D, r19
    6474:	20 93 2c 05 	sts	0x052C, r18
		menu_flag = 0;
    6478:	10 92 dc 07 	sts	0x07DC, r1
	}

	while(button != BACK)
	{
		value_ptr = &Config.FlightMode[mode].Roll_P_mult;
    647c:	92 e1       	ldi	r25, 0x12	; 18
    647e:	89 9f       	mul	r24, r25
    6480:	30 01       	movw	r6, r0
    6482:	11 24       	eor	r1, r1
    6484:	c3 01       	movw	r24, r6
    6486:	8d 52       	subi	r24, 0x2D	; 45
    6488:	9a 4f       	sbci	r25, 0xFA	; 250
    648a:	3c 01       	movw	r6, r24
	{
		sub_top = FLIGHTSTART;
		menu_flag = 0;
	}

	while(button != BACK)
    648c:	80 91 da 07 	lds	r24, 0x07DA
    6490:	80 37       	cpi	r24, 0x70	; 112
    6492:	09 f4       	brne	.+2      	; 0x6496 <menu_flight+0x56>
    6494:	5d c0       	rjmp	.+186    	; 0x6550 <menu_flight+0x110>
	{
		value_ptr = &Config.FlightMode[mode].Roll_P_mult;

		// Print menu
		print_menu_items(sub_top, FLIGHTSTART, value_ptr, (const unsigned char*)flight_menu_ranges, 0, FLIGHTOFFSET, (const unsigned char*)FlightMenuText, cursor);
    6496:	a0 90 04 05 	lds	r10, 0x0504
    649a:	89 e7       	ldi	r24, 0x79	; 121
    649c:	c8 2e       	mov	r12, r24
    649e:	88 e1       	ldi	r24, 0x18	; 24
    64a0:	d8 2e       	mov	r13, r24
    64a2:	9f e4       	ldi	r25, 0x4F	; 79
    64a4:	e9 2e       	mov	r14, r25
    64a6:	00 e0       	ldi	r16, 0x00	; 0
    64a8:	2f e1       	ldi	r18, 0x1F	; 31
    64aa:	38 e1       	ldi	r19, 0x18	; 24
    64ac:	a3 01       	movw	r20, r6
    64ae:	6a ea       	ldi	r22, 0xAA	; 170
    64b0:	70 e0       	ldi	r23, 0x00	; 0
    64b2:	80 91 2c 05 	lds	r24, 0x052C
    64b6:	90 91 2d 05 	lds	r25, 0x052D
    64ba:	0e 94 7b 31 	call	0x62f6	; 0x62f6 <print_menu_items>

		// Handle menu changes
		update_menu(FLIGHTITEMS, FLIGHTSTART, 0, button, &cursor, &sub_top, &menu_temp);
    64be:	27 e2       	ldi	r18, 0x27	; 39
    64c0:	c2 2e       	mov	r12, r18
    64c2:	25 e0       	ldi	r18, 0x05	; 5
    64c4:	d2 2e       	mov	r13, r18
    64c6:	3c e2       	ldi	r19, 0x2C	; 44
    64c8:	e3 2e       	mov	r14, r19
    64ca:	35 e0       	ldi	r19, 0x05	; 5
    64cc:	f3 2e       	mov	r15, r19
    64ce:	04 e0       	ldi	r16, 0x04	; 4
    64d0:	15 e0       	ldi	r17, 0x05	; 5
    64d2:	20 91 da 07 	lds	r18, 0x07DA
    64d6:	40 e0       	ldi	r20, 0x00	; 0
    64d8:	6a ea       	ldi	r22, 0xAA	; 170
    64da:	82 e1       	ldi	r24, 0x12	; 18
    64dc:	0e 94 b1 30 	call	0x6162	; 0x6162 <update_menu>
		range = get_menu_range ((const unsigned char*)flight_menu_ranges, (menu_temp - FLIGHTSTART));
    64e0:	60 91 27 05 	lds	r22, 0x0527
    64e4:	6a 5a       	subi	r22, 0xAA	; 170
    64e6:	8f e1       	ldi	r24, 0x1F	; 31
    64e8:	98 e1       	ldi	r25, 0x18	; 24
    64ea:	0e 94 6f 2e 	call	0x5cde	; 0x5cde <get_menu_range>
    64ee:	29 83       	std	Y+1, r18	; 0x01
    64f0:	3a 83       	std	Y+2, r19	; 0x02
    64f2:	4b 83       	std	Y+3, r20	; 0x03
    64f4:	5c 83       	std	Y+4, r21	; 0x04
    64f6:	6d 83       	std	Y+5, r22	; 0x05

		if (button == ENTER)
    64f8:	80 91 da 07 	lds	r24, 0x07DA
    64fc:	80 3e       	cpi	r24, 0xE0	; 224
    64fe:	e1 f4       	brne	.+56     	; 0x6538 <menu_flight+0xf8>
		{
			text_link = pgm_read_byte(&FlightMenuText[menu_temp - FLIGHTSTART]);
    6500:	80 91 27 05 	lds	r24, 0x0527
    6504:	90 91 28 05 	lds	r25, 0x0528
    6508:	bc 01       	movw	r22, r24
    650a:	6a 5a       	subi	r22, 0xAA	; 170
    650c:	71 09       	sbc	r23, r1
    650e:	fb 01       	movw	r30, r22
    6510:	e7 58       	subi	r30, 0x87	; 135
    6512:	f7 4e       	sbci	r31, 0xE7	; 231
    6514:	a4 90       	lpm	r10, Z
			do_menu_item(menu_temp, value_ptr + (menu_temp - FLIGHTSTART), 1, range, 0, text_link, false, 0);
    6516:	b1 2c       	mov	r11, r1
    6518:	66 0d       	add	r22, r6
    651a:	77 1d       	adc	r23, r7
    651c:	1f 92       	push	r1
    651e:	1f 92       	push	r1
    6520:	81 2c       	mov	r8, r1
    6522:	c1 2c       	mov	r12, r1
    6524:	e9 80       	ldd	r14, Y+1	; 0x01
    6526:	fa 80       	ldd	r15, Y+2	; 0x02
    6528:	0b 81       	ldd	r16, Y+3	; 0x03
    652a:	1c 81       	ldd	r17, Y+4	; 0x04
    652c:	2d 81       	ldd	r18, Y+5	; 0x05
    652e:	41 e0       	ldi	r20, 0x01	; 1
    6530:	0e 94 fb 2e 	call	0x5df6	; 0x5df6 <do_menu_item>
    6534:	0f 90       	pop	r0
    6536:	0f 90       	pop	r0
		}

		// Update limits when exiting
		if (button == ENTER)
    6538:	80 91 da 07 	lds	r24, 0x07DA
    653c:	80 3e       	cpi	r24, 0xE0	; 224
    653e:	09 f0       	breq	.+2      	; 0x6542 <menu_flight+0x102>
    6540:	a5 cf       	rjmp	.-182    	; 0x648c <menu_flight+0x4c>
		{
			UpdateLimits();			 // Update I-term limits and triggers based on percentages
    6542:	0e 94 1d 36 	call	0x6c3a	; 0x6c3a <UpdateLimits>
			Save_Config_to_EEPROM(); // Save value and return
    6546:	0e 94 88 16 	call	0x2d10	; 0x2d10 <Save_Config_to_EEPROM>
			Wait_BUTTON4();			 // Wait for user's finger off the button
    654a:	0e 94 7c 33 	call	0x66f8	; 0x66f8 <Wait_BUTTON4>
    654e:	9e cf       	rjmp	.-196    	; 0x648c <menu_flight+0x4c>
		}
	}
}
    6550:	0f 90       	pop	r0
    6552:	0f 90       	pop	r0
    6554:	0f 90       	pop	r0
    6556:	0f 90       	pop	r0
    6558:	0f 90       	pop	r0
    655a:	df 91       	pop	r29
    655c:	cf 91       	pop	r28
    655e:	1f 91       	pop	r17
    6560:	0f 91       	pop	r16
    6562:	ff 90       	pop	r15
    6564:	ef 90       	pop	r14
    6566:	df 90       	pop	r13
    6568:	cf 90       	pop	r12
    656a:	bf 90       	pop	r11
    656c:	af 90       	pop	r10
    656e:	8f 90       	pop	r8
    6570:	7f 90       	pop	r7
    6572:	6f 90       	pop	r6
    6574:	08 95       	ret

00006576 <do_main_menu_item>:
	}
}

void do_main_menu_item(uint8_t menuitem)
{
	switch(menuitem) 
    6576:	90 e0       	ldi	r25, 0x00	; 0
    6578:	fc 01       	movw	r30, r24
    657a:	ed 54       	subi	r30, 0x4D	; 77
    657c:	f1 09       	sbc	r31, r1
    657e:	e3 31       	cpi	r30, 0x13	; 19
    6580:	f1 05       	cpc	r31, r1
    6582:	70 f5       	brcc	.+92     	; 0x65e0 <do_main_menu_item+0x6a>
    6584:	e7 5b       	subi	r30, 0xB7	; 183
    6586:	ff 4f       	sbci	r31, 0xFF	; 255
    6588:	0c 94 67 48 	jmp	0x90ce	; 0x90ce <__tablejump2__>
	{
		case MAINSTART:
			menu_rc_setup(2); 		// 1.General
    658c:	82 e0       	ldi	r24, 0x02	; 2
    658e:	01 c0       	rjmp	.+2      	; 0x6592 <do_main_menu_item+0x1c>
			break;
		case MAINSTART+1:
			menu_rc_setup(1); 		// 2.RX setup	
    6590:	81 e0       	ldi	r24, 0x01	; 1
    6592:	0c 94 11 35 	jmp	0x6a22	; 0x6a22 <menu_rc_setup>
			break;
		case MAINSTART+2:
			Display_rcinput();		// 3.RX inputs
    6596:	0c 94 92 11 	jmp	0x2324	; 0x2324 <Display_rcinput>
			break;
		case MAINSTART+3:
			Display_sticks(); 		// 4.Stick polarity	
    659a:	0c 94 46 15 	jmp	0x2a8c	; 0x2a8c <Display_sticks>
			break;
		case MAINSTART+4:
			Display_sensors();		// 5.Sensor calibration
    659e:	0c 94 91 12 	jmp	0x2522	; 0x2522 <Display_sensors>
			break;
		case MAINSTART+5:
			Display_balance();		// 6.Level meter
    65a2:	0c 94 02 11 	jmp	0x2204	; 0x2204 <Display_balance>
			break;
		case MAINSTART+6:
			menu_flight(0);			// 7.Flight profile 1
    65a6:	80 e0       	ldi	r24, 0x00	; 0
    65a8:	01 c0       	rjmp	.+2      	; 0x65ac <do_main_menu_item+0x36>
			break;
		case MAINSTART+7:
			menu_flight(1); 		// 8.Flight profile 2
    65aa:	81 e0       	ldi	r24, 0x01	; 1
    65ac:	0c 94 20 32 	jmp	0x6440	; 0x6440 <menu_flight>
			break;
		case MAINSTART+8:
			menu_mixer(0);			// 9.OUT1 Mixer
    65b0:	80 e0       	ldi	r24, 0x00	; 0
    65b2:	0d c0       	rjmp	.+26     	; 0x65ce <do_main_menu_item+0x58>
			break;
		case MAINSTART+9:
			menu_mixer(1);			// 10.OUT2 Mixer
    65b4:	81 e0       	ldi	r24, 0x01	; 1
    65b6:	0b c0       	rjmp	.+22     	; 0x65ce <do_main_menu_item+0x58>
			break;
		case MAINSTART+10:
			menu_mixer(2);			// 11.OUT3 Mixer
    65b8:	82 e0       	ldi	r24, 0x02	; 2
    65ba:	09 c0       	rjmp	.+18     	; 0x65ce <do_main_menu_item+0x58>
			break;
		case MAINSTART+11:
			menu_mixer(3);			// 12.OUT4 Mixer
    65bc:	83 e0       	ldi	r24, 0x03	; 3
    65be:	07 c0       	rjmp	.+14     	; 0x65ce <do_main_menu_item+0x58>
			break;
		case MAINSTART+12:
			menu_mixer(4);			// 13.OUT5 Mixer
    65c0:	84 e0       	ldi	r24, 0x04	; 4
    65c2:	05 c0       	rjmp	.+10     	; 0x65ce <do_main_menu_item+0x58>
			break;
		case MAINSTART+13:
			menu_mixer(5);			// 14.OUT6 Mixer
    65c4:	85 e0       	ldi	r24, 0x05	; 5
    65c6:	03 c0       	rjmp	.+6      	; 0x65ce <do_main_menu_item+0x58>
			break;
		case MAINSTART+14:
			menu_mixer(6);			// 15.OUT7 Mixer
    65c8:	86 e0       	ldi	r24, 0x06	; 6
    65ca:	01 c0       	rjmp	.+2      	; 0x65ce <do_main_menu_item+0x58>
			break;
		case MAINSTART+15:
			menu_mixer(7);			// 16.OUT8 Mixer
    65cc:	87 e0       	ldi	r24, 0x07	; 7
    65ce:	0c 94 89 33 	jmp	0x6712	; 0x6712 <menu_mixer>
			break;
		case MAINSTART+16:
			menu_servo_setup(1);	// 17.Servo direction
    65d2:	81 e0       	ldi	r24, 0x01	; 1
    65d4:	03 c0       	rjmp	.+6      	; 0x65dc <do_main_menu_item+0x66>
			break;
		case MAINSTART+17:
			menu_servo_setup(2); 	// 18.Neg. Servo trvl. (%)
    65d6:	82 e0       	ldi	r24, 0x02	; 2
    65d8:	01 c0       	rjmp	.+2      	; 0x65dc <do_main_menu_item+0x66>
			break;
		case MAINSTART+18:
			menu_servo_setup(3); 	// 19.Pos. Servo trvl. (%)
    65da:	83 e0       	ldi	r24, 0x03	; 3
    65dc:	0c 94 24 34 	jmp	0x6848	; 0x6848 <menu_servo_setup>
    65e0:	08 95       	ret

000065e2 <Wait_BUTTON1>:
	} // Switch
}

void Wait_BUTTON1(void)
{
	while(BUTTON1 == 0)
    65e2:	1f 99       	sbic	0x03, 7	; 3
    65e4:	0a c0       	rjmp	.+20     	; 0x65fa <Wait_BUTTON1+0x18>
    65e6:	2f e3       	ldi	r18, 0x3F	; 63
    65e8:	8d e0       	ldi	r24, 0x0D	; 13
    65ea:	93 e0       	ldi	r25, 0x03	; 3
    65ec:	21 50       	subi	r18, 0x01	; 1
    65ee:	80 40       	sbci	r24, 0x00	; 0
    65f0:	90 40       	sbci	r25, 0x00	; 0
    65f2:	e1 f7       	brne	.-8      	; 0x65ec <Wait_BUTTON1+0xa>
    65f4:	00 c0       	rjmp	.+0      	; 0x65f6 <Wait_BUTTON1+0x14>
    65f6:	00 00       	nop
    65f8:	f4 cf       	rjmp	.-24     	; 0x65e2 <Wait_BUTTON1>
	{
		_delay_ms(50);
	}
}
    65fa:	08 95       	ret

000065fc <menu_main>:
uint16_t main_top = MAINSTART;
uint16_t sub_top = 0;
uint8_t menu_flag;

void menu_main(void)
{
    65fc:	af 92       	push	r10
    65fe:	bf 92       	push	r11
    6600:	cf 92       	push	r12
    6602:	df 92       	push	r13
    6604:	ef 92       	push	r14
    6606:	ff 92       	push	r15
    6608:	0f 93       	push	r16
    660a:	1f 93       	push	r17
    660c:	cf 93       	push	r28
    660e:	df 93       	push	r29
	static uint8_t main_cursor = LINE0;	// These are now static so as to remember the main menu position
	static uint16_t main_temp = 0;
	static uint8_t old_menu = 0;

	button = NONE;
    6610:	80 ef       	ldi	r24, 0xF0	; 240
    6612:	80 93 da 07 	sts	0x07DA, r24

	// Wait until user's finger is off button 1
	Wait_BUTTON1();
    6616:	0e 94 f1 32 	call	0x65e2	; 0x65e2 <Wait_BUTTON1>

		// If main menu item has changed, reset sub-menu positions
		// and flag to sub-menus that positions need to be reset
		if (main_temp != old_menu)
		{
			cursor = LINE0;
    661a:	23 e0       	ldi	r18, 0x03	; 3
    661c:	b2 2e       	mov	r11, r18

		// If ENTER pressed, jump to menu 
		if (button == ENTER)
		{
			do_main_menu_item(main_temp);
			button = NONE;
    661e:	30 ef       	ldi	r19, 0xF0	; 240
    6620:	a3 2e       	mov	r10, r19
	button = NONE;

	// Wait until user's finger is off button 1
	Wait_BUTTON1();
	
	while(button != BACK)
    6622:	80 91 da 07 	lds	r24, 0x07DA
    6626:	80 37       	cpi	r24, 0x70	; 112
    6628:	09 f4       	brne	.+2      	; 0x662c <menu_main+0x30>
    662a:	5b c0       	rjmp	.+182    	; 0x66e2 <menu_main+0xe6>
	{
		// Clear buffer before each update
		clear_buffer(buffer);	
    662c:	80 e0       	ldi	r24, 0x00	; 0
    662e:	91 e0       	ldi	r25, 0x01	; 1
    6630:	0e 94 33 20 	call	0x4066	; 0x4066 <clear_buffer>

		// Print menu
		print_menu_frame(0);													// Frame
    6634:	80 e0       	ldi	r24, 0x00	; 0
    6636:	0e 94 1a 2e 	call	0x5c34	; 0x5c34 <print_menu_frame>
		
		for (uint16_t i = 0; i < 4; i++)
    663a:	c0 e0       	ldi	r28, 0x00	; 0
    663c:	d0 e0       	ldi	r29, 0x00	; 0
    663e:	fe 01       	movw	r30, r28
    6640:	e5 5e       	subi	r30, 0xE5	; 229
    6642:	f7 4e       	sbci	r31, 0xE7	; 231
		{
			LCD_Display_Text(main_top+i,(const unsigned char*)Verdana8,ITEMOFFSET,(uint8_t)pgm_read_byte(&lines[i]));	// Lines
    6644:	24 91       	lpm	r18, Z
    6646:	30 e0       	ldi	r19, 0x00	; 0
    6648:	80 91 06 05 	lds	r24, 0x0506
    664c:	90 91 07 05 	lds	r25, 0x0507
    6650:	4a e0       	ldi	r20, 0x0A	; 10
    6652:	50 e0       	ldi	r21, 0x00	; 0
    6654:	6d e0       	ldi	r22, 0x0D	; 13
    6656:	7a e0       	ldi	r23, 0x0A	; 10
    6658:	8c 0f       	add	r24, r28
    665a:	9d 1f       	adc	r25, r29
    665c:	0e 94 e0 21 	call	0x43c0	; 0x43c0 <LCD_Display_Text>
		clear_buffer(buffer);	

		// Print menu
		print_menu_frame(0);													// Frame
		
		for (uint16_t i = 0; i < 4; i++)
    6660:	21 96       	adiw	r28, 0x01	; 1
    6662:	c4 30       	cpi	r28, 0x04	; 4
    6664:	d1 05       	cpc	r29, r1
    6666:	59 f7       	brne	.-42     	; 0x663e <menu_main+0x42>
		{
			LCD_Display_Text(main_top+i,(const unsigned char*)Verdana8,ITEMOFFSET,(uint8_t)pgm_read_byte(&lines[i]));	// Lines
		}

		print_cursor(main_cursor);												// Cursor
    6668:	80 91 05 05 	lds	r24, 0x0505
    666c:	0e 94 71 31 	call	0x62e2	; 0x62e2 <print_cursor>
		write_buffer(buffer);
    6670:	80 e0       	ldi	r24, 0x00	; 0
    6672:	91 e0       	ldi	r25, 0x01	; 1
    6674:	0e 94 01 20 	call	0x4002	; 0x4002 <write_buffer>

		// Poll buttons when idle
		poll_buttons(true);
    6678:	81 e0       	ldi	r24, 0x01	; 1
    667a:	0e 94 c6 2e 	call	0x5d8c	; 0x5d8c <poll_buttons>

		// Handle menu changes
		update_menu(MAINITEMS, MAINSTART, 0, button, &main_cursor, &main_top, &main_temp);
    667e:	8a e2       	ldi	r24, 0x2A	; 42
    6680:	c8 2e       	mov	r12, r24
    6682:	85 e0       	ldi	r24, 0x05	; 5
    6684:	d8 2e       	mov	r13, r24
    6686:	96 e0       	ldi	r25, 0x06	; 6
    6688:	e9 2e       	mov	r14, r25
    668a:	95 e0       	ldi	r25, 0x05	; 5
    668c:	f9 2e       	mov	r15, r25
    668e:	05 e0       	ldi	r16, 0x05	; 5
    6690:	15 e0       	ldi	r17, 0x05	; 5
    6692:	20 91 da 07 	lds	r18, 0x07DA
    6696:	40 e0       	ldi	r20, 0x00	; 0
    6698:	6d e4       	ldi	r22, 0x4D	; 77
    669a:	83 e1       	ldi	r24, 0x13	; 19
    669c:	0e 94 b1 30 	call	0x6162	; 0x6162 <update_menu>

		// If main menu item has changed, reset sub-menu positions
		// and flag to sub-menus that positions need to be reset
		if (main_temp != old_menu)
    66a0:	80 91 2a 05 	lds	r24, 0x052A
    66a4:	90 91 2b 05 	lds	r25, 0x052B
    66a8:	20 91 29 05 	lds	r18, 0x0529
    66ac:	30 e0       	ldi	r19, 0x00	; 0
    66ae:	82 17       	cp	r24, r18
    66b0:	93 07       	cpc	r25, r19
    66b2:	59 f0       	breq	.+22     	; 0x66ca <menu_main+0xce>
		{
			cursor = LINE0;
    66b4:	b0 92 04 05 	sts	0x0504, r11
			menu_temp = 0;
    66b8:	10 92 28 05 	sts	0x0528, r1
    66bc:	10 92 27 05 	sts	0x0527, r1
			old_menu = main_temp;
    66c0:	80 93 29 05 	sts	0x0529, r24
			menu_flag = 1;
    66c4:	21 e0       	ldi	r18, 0x01	; 1
    66c6:	20 93 dc 07 	sts	0x07DC, r18
		}

		// If ENTER pressed, jump to menu 
		if (button == ENTER)
    66ca:	20 91 da 07 	lds	r18, 0x07DA
    66ce:	20 3e       	cpi	r18, 0xE0	; 224
    66d0:	09 f0       	breq	.+2      	; 0x66d4 <menu_main+0xd8>
    66d2:	a7 cf       	rjmp	.-178    	; 0x6622 <menu_main+0x26>
		{
			do_main_menu_item(main_temp);
    66d4:	0e 94 bb 32 	call	0x6576	; 0x6576 <do_main_menu_item>
			button = NONE;
    66d8:	a0 92 da 07 	sts	0x07DA, r10

			// Wait until user's finger is off button 1
			Wait_BUTTON1();
    66dc:	0e 94 f1 32 	call	0x65e2	; 0x65e2 <Wait_BUTTON1>
    66e0:	a0 cf       	rjmp	.-192    	; 0x6622 <menu_main+0x26>
		}
	}
}
    66e2:	df 91       	pop	r29
    66e4:	cf 91       	pop	r28
    66e6:	1f 91       	pop	r17
    66e8:	0f 91       	pop	r16
    66ea:	ff 90       	pop	r15
    66ec:	ef 90       	pop	r14
    66ee:	df 90       	pop	r13
    66f0:	cf 90       	pop	r12
    66f2:	bf 90       	pop	r11
    66f4:	af 90       	pop	r10
    66f6:	08 95       	ret

000066f8 <Wait_BUTTON4>:
	}
}

void Wait_BUTTON4(void)
{
	while(BUTTON4 == 0)
    66f8:	1c 99       	sbic	0x03, 4	; 3
    66fa:	0a c0       	rjmp	.+20     	; 0x6710 <Wait_BUTTON4+0x18>
    66fc:	2f e3       	ldi	r18, 0x3F	; 63
    66fe:	8d e0       	ldi	r24, 0x0D	; 13
    6700:	93 e0       	ldi	r25, 0x03	; 3
    6702:	21 50       	subi	r18, 0x01	; 1
    6704:	80 40       	sbci	r24, 0x00	; 0
    6706:	90 40       	sbci	r25, 0x00	; 0
    6708:	e1 f7       	brne	.-8      	; 0x6702 <Wait_BUTTON4+0xa>
    670a:	00 c0       	rjmp	.+0      	; 0x670c <Wait_BUTTON4+0x14>
    670c:	00 00       	nop
    670e:	f4 cf       	rjmp	.-24     	; 0x66f8 <Wait_BUTTON4>
	{
		_delay_ms(50);
	}
    6710:	08 95       	ret

00006712 <menu_mixer>:
//************************************************************
// Main menu-specific setup
//************************************************************

void menu_mixer(uint8_t i)
{
    6712:	6f 92       	push	r6
    6714:	7f 92       	push	r7
    6716:	8f 92       	push	r8
    6718:	af 92       	push	r10
    671a:	bf 92       	push	r11
    671c:	cf 92       	push	r12
    671e:	df 92       	push	r13
    6720:	ef 92       	push	r14
    6722:	ff 92       	push	r15
    6724:	0f 93       	push	r16
    6726:	1f 93       	push	r17
    6728:	cf 93       	push	r28
    672a:	df 93       	push	r29
    672c:	00 d0       	rcall	.+0      	; 0x672e <menu_mixer+0x1c>
    672e:	00 d0       	rcall	.+0      	; 0x6730 <menu_mixer+0x1e>
    6730:	1f 92       	push	r1
    6732:	cd b7       	in	r28, 0x3d	; 61
    6734:	de b7       	in	r29, 0x3e	; 62
	int8_t *value_ptr;
	menu_range_t range;
	uint8_t text_link = 0;

	// If sub-menu item has changed, reset sub-menu positions
	if (menu_flag)
    6736:	90 91 dc 07 	lds	r25, 0x07DC
    673a:	99 23       	and	r25, r25
    673c:	41 f0       	breq	.+16     	; 0x674e <menu_mixer+0x3c>
	{
		sub_top = MIXERSTART;
    673e:	2e eb       	ldi	r18, 0xBE	; 190
    6740:	30 e0       	ldi	r19, 0x00	; 0
    6742:	30 93 2d 05 	sts	0x052D, r19
    6746:	20 93 2c 05 	sts	0x052C, r18
		menu_flag = 0;
    674a:	10 92 dc 07 	sts	0x07DC, r1
	}

	while(button != BACK)
	{
		value_ptr = &Config.Channel[i].Motor_marker;
    674e:	96 e2       	ldi	r25, 0x26	; 38
    6750:	89 9f       	mul	r24, r25
    6752:	30 01       	movw	r6, r0
    6754:	11 24       	eor	r1, r1
    6756:	c3 01       	movw	r24, r6
    6758:	89 5c       	subi	r24, 0xC9	; 201
    675a:	99 4f       	sbci	r25, 0xF9	; 249
    675c:	3c 01       	movw	r6, r24
	{
		sub_top = MIXERSTART;
		menu_flag = 0;
	}

	while(button != BACK)
    675e:	80 91 da 07 	lds	r24, 0x07DA
    6762:	80 37       	cpi	r24, 0x70	; 112
    6764:	09 f4       	brne	.+2      	; 0x6768 <menu_mixer+0x56>
    6766:	5d c0       	rjmp	.+186    	; 0x6822 <menu_mixer+0x110>
	{
		value_ptr = &Config.Channel[i].Motor_marker;

		// Print menu
		print_menu_items(sub_top, MIXERSTART, value_ptr, (const unsigned char*)mixer_menu_ranges, 0, MIXOFFSET, (const unsigned char*)MixerMenuText, cursor);
    6768:	a0 90 04 05 	lds	r10, 0x0504
    676c:	85 e3       	ldi	r24, 0x35	; 53
    676e:	c8 2e       	mov	r12, r24
    6770:	89 e1       	ldi	r24, 0x19	; 25
    6772:	d8 2e       	mov	r13, r24
    6774:	99 e5       	ldi	r25, 0x59	; 89
    6776:	e9 2e       	mov	r14, r25
    6778:	00 e0       	ldi	r16, 0x00	; 0
    677a:	2b e8       	ldi	r18, 0x8B	; 139
    677c:	38 e1       	ldi	r19, 0x18	; 24
    677e:	a3 01       	movw	r20, r6
    6780:	6e eb       	ldi	r22, 0xBE	; 190
    6782:	70 e0       	ldi	r23, 0x00	; 0
    6784:	80 91 2c 05 	lds	r24, 0x052C
    6788:	90 91 2d 05 	lds	r25, 0x052D
    678c:	0e 94 7b 31 	call	0x62f6	; 0x62f6 <print_menu_items>

		// Handle menu changes
		update_menu(MIXERITEMS, MIXERSTART, 0, button, &cursor, &sub_top, &menu_temp);
    6790:	27 e2       	ldi	r18, 0x27	; 39
    6792:	c2 2e       	mov	r12, r18
    6794:	25 e0       	ldi	r18, 0x05	; 5
    6796:	d2 2e       	mov	r13, r18
    6798:	3c e2       	ldi	r19, 0x2C	; 44
    679a:	e3 2e       	mov	r14, r19
    679c:	35 e0       	ldi	r19, 0x05	; 5
    679e:	f3 2e       	mov	r15, r19
    67a0:	04 e0       	ldi	r16, 0x04	; 4
    67a2:	15 e0       	ldi	r17, 0x05	; 5
    67a4:	20 91 da 07 	lds	r18, 0x07DA
    67a8:	40 e0       	ldi	r20, 0x00	; 0
    67aa:	6e eb       	ldi	r22, 0xBE	; 190
    67ac:	82 e2       	ldi	r24, 0x22	; 34
    67ae:	0e 94 b1 30 	call	0x6162	; 0x6162 <update_menu>
		range = get_menu_range ((const unsigned char*)mixer_menu_ranges, menu_temp - MIXERSTART);
    67b2:	60 91 27 05 	lds	r22, 0x0527
    67b6:	6e 5b       	subi	r22, 0xBE	; 190
    67b8:	8b e8       	ldi	r24, 0x8B	; 139
    67ba:	98 e1       	ldi	r25, 0x18	; 24
    67bc:	0e 94 6f 2e 	call	0x5cde	; 0x5cde <get_menu_range>
    67c0:	29 83       	std	Y+1, r18	; 0x01
    67c2:	3a 83       	std	Y+2, r19	; 0x02
    67c4:	4b 83       	std	Y+3, r20	; 0x03
    67c6:	5c 83       	std	Y+4, r21	; 0x04
    67c8:	6d 83       	std	Y+5, r22	; 0x05

		if (button == ENTER)
    67ca:	80 91 da 07 	lds	r24, 0x07DA
    67ce:	80 3e       	cpi	r24, 0xE0	; 224
    67d0:	e1 f4       	brne	.+56     	; 0x680a <menu_mixer+0xf8>
		{
			text_link = pgm_read_byte(&MixerMenuText[menu_temp - MIXERSTART]);
    67d2:	80 91 27 05 	lds	r24, 0x0527
    67d6:	90 91 28 05 	lds	r25, 0x0528
    67da:	bc 01       	movw	r22, r24
    67dc:	6e 5b       	subi	r22, 0xBE	; 190
    67de:	71 09       	sbc	r23, r1
    67e0:	fb 01       	movw	r30, r22
    67e2:	eb 5c       	subi	r30, 0xCB	; 203
    67e4:	f6 4e       	sbci	r31, 0xE6	; 230
    67e6:	a4 90       	lpm	r10, Z
			do_menu_item(menu_temp, value_ptr + (menu_temp - MIXERSTART), 1, range, 0, text_link, false, 0);
    67e8:	b1 2c       	mov	r11, r1
    67ea:	66 0d       	add	r22, r6
    67ec:	77 1d       	adc	r23, r7
    67ee:	1f 92       	push	r1
    67f0:	1f 92       	push	r1
    67f2:	81 2c       	mov	r8, r1
    67f4:	c1 2c       	mov	r12, r1
    67f6:	e9 80       	ldd	r14, Y+1	; 0x01
    67f8:	fa 80       	ldd	r15, Y+2	; 0x02
    67fa:	0b 81       	ldd	r16, Y+3	; 0x03
    67fc:	1c 81       	ldd	r17, Y+4	; 0x04
    67fe:	2d 81       	ldd	r18, Y+5	; 0x05
    6800:	41 e0       	ldi	r20, 0x01	; 1
    6802:	0e 94 fb 2e 	call	0x5df6	; 0x5df6 <do_menu_item>
    6806:	0f 90       	pop	r0
    6808:	0f 90       	pop	r0
		}

		// Update limits when exiting
		if (button == ENTER)
    680a:	80 91 da 07 	lds	r24, 0x07DA
    680e:	80 3e       	cpi	r24, 0xE0	; 224
    6810:	09 f0       	breq	.+2      	; 0x6814 <menu_mixer+0x102>
    6812:	a5 cf       	rjmp	.-182    	; 0x675e <menu_mixer+0x4c>
		{
			UpdateLimits();			 // Update travel limits based on percentages
    6814:	0e 94 1d 36 	call	0x6c3a	; 0x6c3a <UpdateLimits>
			Save_Config_to_EEPROM(); // Save value and return
    6818:	0e 94 88 16 	call	0x2d10	; 0x2d10 <Save_Config_to_EEPROM>
			Wait_BUTTON4();			 // Wait for user's finger off the button
    681c:	0e 94 7c 33 	call	0x66f8	; 0x66f8 <Wait_BUTTON4>
    6820:	9e cf       	rjmp	.-196    	; 0x675e <menu_mixer+0x4c>
		}
	}
}
    6822:	0f 90       	pop	r0
    6824:	0f 90       	pop	r0
    6826:	0f 90       	pop	r0
    6828:	0f 90       	pop	r0
    682a:	0f 90       	pop	r0
    682c:	df 91       	pop	r29
    682e:	cf 91       	pop	r28
    6830:	1f 91       	pop	r17
    6832:	0f 91       	pop	r16
    6834:	ff 90       	pop	r15
    6836:	ef 90       	pop	r14
    6838:	df 90       	pop	r13
    683a:	cf 90       	pop	r12
    683c:	bf 90       	pop	r11
    683e:	af 90       	pop	r10
    6840:	8f 90       	pop	r8
    6842:	7f 90       	pop	r7
    6844:	6f 90       	pop	r6
    6846:	08 95       	ret

00006848 <menu_servo_setup>:
//************************************************************
// Main menu-specific setup
//************************************************************

void menu_servo_setup(uint8_t section)
{
    6848:	2f 92       	push	r2
    684a:	3f 92       	push	r3
    684c:	4f 92       	push	r4
    684e:	5f 92       	push	r5
    6850:	6f 92       	push	r6
    6852:	7f 92       	push	r7
    6854:	8f 92       	push	r8
    6856:	9f 92       	push	r9
    6858:	af 92       	push	r10
    685a:	bf 92       	push	r11
    685c:	cf 92       	push	r12
    685e:	df 92       	push	r13
    6860:	ef 92       	push	r14
    6862:	ff 92       	push	r15
    6864:	0f 93       	push	r16
    6866:	1f 93       	push	r17
    6868:	cf 93       	push	r28
    686a:	df 93       	push	r29
    686c:	cd b7       	in	r28, 0x3d	; 61
    686e:	de b7       	in	r29, 0x3e	; 62
    6870:	28 97       	sbiw	r28, 0x08	; 8
    6872:	0f b6       	in	r0, 0x3f	; 63
    6874:	f8 94       	cli
    6876:	de bf       	out	0x3e, r29	; 62
    6878:	0f be       	out	0x3f, r0	; 63
    687a:	cd bf       	out	0x3d, r28	; 61
    687c:	98 2e       	mov	r9, r24
	uint8_t i = 0;
	bool	servo_enable = false;
	bool	zero_setting = false;

	// If submenu item has changed, reset submenu positions
	if (menu_flag)
    687e:	80 91 dc 07 	lds	r24, 0x07DC
    6882:	88 23       	and	r24, r24
    6884:	41 f0       	breq	.+16     	; 0x6896 <menu_servo_setup+0x4e>
	{
		sub_top = SERVOSTART;
    6886:	86 ee       	ldi	r24, 0xE6	; 230
    6888:	90 e0       	ldi	r25, 0x00	; 0
    688a:	90 93 2d 05 	sts	0x052D, r25
    688e:	80 93 2c 05 	sts	0x052C, r24
		menu_flag = 0;
    6892:	10 92 dc 07 	sts	0x07DC, r1
			}

			// Do not allow servo enable for throttle if in CPPM mode
			if ((Config.Channel[menu_temp - SERVOSTART].P1_source_a == THROTTLE) && (Config.RxMode == CPPM_MODE))
			{
				servo_enable = false;
    6896:	1e 82       	std	Y+6, r1	; 0x06
    6898:	53 e6       	ldi	r21, 0x63	; 99
    689a:	65 2e       	mov	r6, r21
    689c:	57 e0       	ldi	r21, 0x07	; 7
    689e:	75 2e       	mov	r7, r21
					break;
			}
		}

		// Print menu
		print_menu_items(sub_top, SERVOSTART, value_ptr, (const unsigned char*)servo_menu_ranges[section - 1], 1, SERVOOFFSET, (const unsigned char*)ServoMenuText[section - 1], cursor);
    68a0:	29 2c       	mov	r2, r9
    68a2:	31 2c       	mov	r3, r1
    68a4:	41 e0       	ldi	r20, 0x01	; 1
    68a6:	24 1a       	sub	r2, r20
    68a8:	31 08       	sbc	r3, r1
    68aa:	85 e0       	ldi	r24, 0x05	; 5
    68ac:	82 9d       	mul	r24, r2
    68ae:	20 01       	movw	r4, r0
    68b0:	83 9d       	mul	r24, r3
    68b2:	50 0c       	add	r5, r0
    68b4:	11 24       	eor	r1, r1
    68b6:	c2 01       	movw	r24, r4
    68b8:	89 5a       	subi	r24, 0xA9	; 169
    68ba:	96 4e       	sbci	r25, 0xE6	; 230
    68bc:	2c 01       	movw	r4, r24
    68be:	63 e0       	ldi	r22, 0x03	; 3
    68c0:	22 0c       	add	r2, r2
    68c2:	33 1c       	adc	r3, r3
    68c4:	6a 95       	dec	r22
    68c6:	e1 f7       	brne	.-8      	; 0x68c0 <menu_servo_setup+0x78>
    68c8:	d1 01       	movw	r26, r2
    68ca:	aa 59       	subi	r26, 0x9A	; 154
    68cc:	b6 4e       	sbci	r27, 0xE6	; 230
    68ce:	b8 87       	std	Y+8, r27	; 0x08
    68d0:	af 83       	std	Y+7, r26	; 0x07
		menu_flag = 0;
	}

	// Get menu offsets
	// 1 = Reverse, 2 = Min, 3 = Max
	while(button != BACK)
    68d2:	80 91 da 07 	lds	r24, 0x07DA
    68d6:	80 37       	cpi	r24, 0x70	; 112
    68d8:	09 f4       	brne	.+2      	; 0x68dc <menu_servo_setup+0x94>
    68da:	8a c0       	rjmp	.+276    	; 0x69f0 <menu_servo_setup+0x1a8>
    68dc:	88 e0       	ldi	r24, 0x08	; 8
    68de:	81 2c       	mov	r8, r1
	{
		// Load values from eeprom
		for (i = 0; i < SERVOITEMS; i++)
		{
			switch(section)
    68e0:	b2 e0       	ldi	r27, 0x02	; 2
    68e2:	9b 16       	cp	r9, r27
    68e4:	61 f0       	breq	.+24     	; 0x68fe <menu_servo_setup+0xb6>
    68e6:	43 e0       	ldi	r20, 0x03	; 3
    68e8:	94 12       	cpse	r9, r20
    68ea:	11 c0       	rjmp	.+34     	; 0x690e <menu_servo_setup+0xc6>
					zero_setting = true;
					break;
				case 3:
					value_ptr = &Config.max_travel[0];
					servo_enable = true;
					zero_setting = true;
    68ec:	a1 e0       	ldi	r26, 0x01	; 1
    68ee:	ae 83       	std	Y+6, r26	; 0x06
					servo_enable = true;
					zero_setting = true;
					break;
				case 3:
					value_ptr = &Config.max_travel[0];
					servo_enable = true;
    68f0:	88 24       	eor	r8, r8
    68f2:	83 94       	inc	r8
					value_ptr = &Config.min_travel[0];
					servo_enable = true;
					zero_setting = true;
					break;
				case 3:
					value_ptr = &Config.max_travel[0];
    68f4:	33 e7       	ldi	r19, 0x73	; 115
    68f6:	63 2e       	mov	r6, r19
    68f8:	37 e0       	ldi	r19, 0x07	; 7
    68fa:	73 2e       	mov	r7, r19
					servo_enable = true;
					zero_setting = true;
					break;
    68fc:	08 c0       	rjmp	.+16     	; 0x690e <menu_servo_setup+0xc6>
				case 1:
					break;
				case 2:
					value_ptr = &Config.min_travel[0];
					servo_enable = true;
					zero_setting = true;
    68fe:	91 e0       	ldi	r25, 0x01	; 1
    6900:	9e 83       	std	Y+6, r25	; 0x06
			{
				case 1:
					break;
				case 2:
					value_ptr = &Config.min_travel[0];
					servo_enable = true;
    6902:	88 24       	eor	r8, r8
    6904:	83 94       	inc	r8
			switch(section)
			{
				case 1:
					break;
				case 2:
					value_ptr = &Config.min_travel[0];
    6906:	4b e6       	ldi	r20, 0x6B	; 107
    6908:	64 2e       	mov	r6, r20
    690a:	47 e0       	ldi	r20, 0x07	; 7
    690c:	74 2e       	mov	r7, r20
    690e:	81 50       	subi	r24, 0x01	; 1
	// Get menu offsets
	// 1 = Reverse, 2 = Min, 3 = Max
	while(button != BACK)
	{
		// Load values from eeprom
		for (i = 0; i < SERVOITEMS; i++)
    6910:	39 f7       	brne	.-50     	; 0x68e0 <menu_servo_setup+0x98>
					break;
			}
		}

		// Print menu
		print_menu_items(sub_top, SERVOSTART, value_ptr, (const unsigned char*)servo_menu_ranges[section - 1], 1, SERVOOFFSET, (const unsigned char*)ServoMenuText[section - 1], cursor);
    6912:	a0 90 04 05 	lds	r10, 0x0504
    6916:	cf 80       	ldd	r12, Y+7	; 0x07
    6918:	d8 84       	ldd	r13, Y+8	; 0x08
    691a:	80 e5       	ldi	r24, 0x50	; 80
    691c:	e8 2e       	mov	r14, r24
    691e:	01 e0       	ldi	r16, 0x01	; 1
    6920:	92 01       	movw	r18, r4
    6922:	a3 01       	movw	r20, r6
    6924:	66 ee       	ldi	r22, 0xE6	; 230
    6926:	70 e0       	ldi	r23, 0x00	; 0
    6928:	80 91 2c 05 	lds	r24, 0x052C
    692c:	90 91 2d 05 	lds	r25, 0x052D
    6930:	0e 94 7b 31 	call	0x62f6	; 0x62f6 <print_menu_items>

		// Handle menu changes
		update_menu(SERVOITEMS, SERVOSTART, 0, button, &cursor, &sub_top, &menu_temp);
    6934:	97 e2       	ldi	r25, 0x27	; 39
    6936:	c9 2e       	mov	r12, r25
    6938:	95 e0       	ldi	r25, 0x05	; 5
    693a:	d9 2e       	mov	r13, r25
    693c:	2c e2       	ldi	r18, 0x2C	; 44
    693e:	e2 2e       	mov	r14, r18
    6940:	25 e0       	ldi	r18, 0x05	; 5
    6942:	f2 2e       	mov	r15, r18
    6944:	04 e0       	ldi	r16, 0x04	; 4
    6946:	15 e0       	ldi	r17, 0x05	; 5
    6948:	20 91 da 07 	lds	r18, 0x07DA
    694c:	40 e0       	ldi	r20, 0x00	; 0
    694e:	66 ee       	ldi	r22, 0xE6	; 230
    6950:	88 e0       	ldi	r24, 0x08	; 8
    6952:	0e 94 b1 30 	call	0x6162	; 0x6162 <update_menu>
		range = get_menu_range ((const unsigned char*)servo_menu_ranges[section - 1], 0);
    6956:	60 e0       	ldi	r22, 0x00	; 0
    6958:	c2 01       	movw	r24, r4
    695a:	0e 94 6f 2e 	call	0x5cde	; 0x5cde <get_menu_range>
    695e:	29 83       	std	Y+1, r18	; 0x01
    6960:	3a 83       	std	Y+2, r19	; 0x02
    6962:	4b 83       	std	Y+3, r20	; 0x03
    6964:	5c 83       	std	Y+4, r21	; 0x04
    6966:	6d 83       	std	Y+5, r22	; 0x05

		if (button == ENTER)
    6968:	80 91 da 07 	lds	r24, 0x07DA
    696c:	80 3e       	cpi	r24, 0xE0	; 224
    696e:	a1 f5       	brne	.+104    	; 0x69d8 <menu_servo_setup+0x190>
		{
			text_link = pgm_read_byte(&ServoMenuText[section - 1][menu_temp - SERVOSTART]);
    6970:	80 91 27 05 	lds	r24, 0x0527
    6974:	90 91 28 05 	lds	r25, 0x0528
    6978:	9c 01       	movw	r18, r24
    697a:	26 5e       	subi	r18, 0xE6	; 230
    697c:	31 09       	sbc	r19, r1
    697e:	f9 01       	movw	r30, r18
    6980:	e2 0d       	add	r30, r2
    6982:	f3 1d       	adc	r31, r3
    6984:	ea 59       	subi	r30, 0x9A	; 154
    6986:	f6 4e       	sbci	r31, 0xE6	; 230
    6988:	e4 91       	lpm	r30, Z
    698a:	b3 01       	movw	r22, r6
    698c:	62 0f       	add	r22, r18
    698e:	73 1f       	adc	r23, r19

			// Zero limits if adjusting
			if (zero_setting)
    6990:	be 81       	ldd	r27, Y+6	; 0x06
    6992:	bb 23       	and	r27, r27
    6994:	11 f0       	breq	.+4      	; 0x699a <menu_servo_setup+0x152>
			{
				value_ptr[menu_temp - SERVOSTART] = 0;
    6996:	db 01       	movw	r26, r22
    6998:	1c 92       	st	X, r1
			}

			// Do not allow servo enable for throttle if in CPPM mode
			if ((Config.Channel[menu_temp - SERVOSTART].P1_source_a == THROTTLE) && (Config.RxMode == CPPM_MODE))
    699a:	46 e2       	ldi	r20, 0x26	; 38
    699c:	42 9f       	mul	r20, r18
    699e:	d0 01       	movw	r26, r0
    69a0:	43 9f       	mul	r20, r19
    69a2:	b0 0d       	add	r27, r0
    69a4:	11 24       	eor	r1, r1
    69a6:	af 5a       	subi	r26, 0xAF	; 175
    69a8:	b9 4f       	sbci	r27, 0xF9	; 249
    69aa:	4c 91       	ld	r20, X
    69ac:	41 11       	cpse	r20, r1
    69ae:	05 c0       	rjmp	.+10     	; 0x69ba <menu_servo_setup+0x172>
    69b0:	40 91 ca 05 	lds	r20, 0x05CA
    69b4:	41 11       	cpse	r20, r1
    69b6:	01 c0       	rjmp	.+2      	; 0x69ba <menu_servo_setup+0x172>
			{
				servo_enable = false;
    69b8:	81 2c       	mov	r8, r1
			}

			do_menu_item(menu_temp, value_ptr + (menu_temp - SERVOSTART), 1, range, 0, text_link, servo_enable, (menu_temp - SERVOSTART));
    69ba:	ae 2e       	mov	r10, r30
    69bc:	b1 2c       	mov	r11, r1
    69be:	3f 93       	push	r19
    69c0:	2f 93       	push	r18
    69c2:	c1 2c       	mov	r12, r1
    69c4:	e9 80       	ldd	r14, Y+1	; 0x01
    69c6:	fa 80       	ldd	r15, Y+2	; 0x02
    69c8:	0b 81       	ldd	r16, Y+3	; 0x03
    69ca:	1c 81       	ldd	r17, Y+4	; 0x04
    69cc:	2d 81       	ldd	r18, Y+5	; 0x05
    69ce:	41 e0       	ldi	r20, 0x01	; 1
    69d0:	0e 94 fb 2e 	call	0x5df6	; 0x5df6 <do_menu_item>
    69d4:	0f 90       	pop	r0
    69d6:	0f 90       	pop	r0
		}

		// Disable servos
		servo_enable = false;

		if (button == ENTER)
    69d8:	80 91 da 07 	lds	r24, 0x07DA
    69dc:	80 3e       	cpi	r24, 0xE0	; 224
    69de:	09 f0       	breq	.+2      	; 0x69e2 <menu_servo_setup+0x19a>
    69e0:	78 cf       	rjmp	.-272    	; 0x68d2 <menu_servo_setup+0x8a>
		{
			UpdateLimits();				// Update actual servo trims
    69e2:	0e 94 1d 36 	call	0x6c3a	; 0x6c3a <UpdateLimits>
			Save_Config_to_EEPROM();	// Save value and return
    69e6:	0e 94 88 16 	call	0x2d10	; 0x2d10 <Save_Config_to_EEPROM>
			Wait_BUTTON4();				// Wait for user's finger off the button
    69ea:	0e 94 7c 33 	call	0x66f8	; 0x66f8 <Wait_BUTTON4>
    69ee:	71 cf       	rjmp	.-286    	; 0x68d2 <menu_servo_setup+0x8a>
		}
	}
}
    69f0:	28 96       	adiw	r28, 0x08	; 8
    69f2:	0f b6       	in	r0, 0x3f	; 63
    69f4:	f8 94       	cli
    69f6:	de bf       	out	0x3e, r29	; 62
    69f8:	0f be       	out	0x3f, r0	; 63
    69fa:	cd bf       	out	0x3d, r28	; 61
    69fc:	df 91       	pop	r29
    69fe:	cf 91       	pop	r28
    6a00:	1f 91       	pop	r17
    6a02:	0f 91       	pop	r16
    6a04:	ff 90       	pop	r15
    6a06:	ef 90       	pop	r14
    6a08:	df 90       	pop	r13
    6a0a:	cf 90       	pop	r12
    6a0c:	bf 90       	pop	r11
    6a0e:	af 90       	pop	r10
    6a10:	9f 90       	pop	r9
    6a12:	8f 90       	pop	r8
    6a14:	7f 90       	pop	r7
    6a16:	6f 90       	pop	r6
    6a18:	5f 90       	pop	r5
    6a1a:	4f 90       	pop	r4
    6a1c:	3f 90       	pop	r3
    6a1e:	2f 90       	pop	r2
    6a20:	08 95       	ret

00006a22 <menu_rc_setup>:
//************************************************************
// Main menu-specific setup
//************************************************************

void menu_rc_setup(uint8_t section)
{
    6a22:	2f 92       	push	r2
    6a24:	3f 92       	push	r3
    6a26:	4f 92       	push	r4
    6a28:	5f 92       	push	r5
    6a2a:	6f 92       	push	r6
    6a2c:	7f 92       	push	r7
    6a2e:	8f 92       	push	r8
    6a30:	9f 92       	push	r9
    6a32:	af 92       	push	r10
    6a34:	bf 92       	push	r11
    6a36:	cf 92       	push	r12
    6a38:	df 92       	push	r13
    6a3a:	ef 92       	push	r14
    6a3c:	ff 92       	push	r15
    6a3e:	0f 93       	push	r16
    6a40:	1f 93       	push	r17
    6a42:	cf 93       	push	r28
    6a44:	df 93       	push	r29
    6a46:	cd b7       	in	r28, 0x3d	; 61
    6a48:	de b7       	in	r29, 0x3e	; 62
    6a4a:	2a 97       	sbiw	r28, 0x0a	; 10
    6a4c:	0f b6       	in	r0, 0x3f	; 63
    6a4e:	f8 94       	cli
    6a50:	de bf       	out	0x3e, r29	; 62
    6a52:	0f be       	out	0x3f, r0	; 63
    6a54:	cd bf       	out	0x3d, r28	; 61
    6a56:	88 87       	std	Y+8, r24	; 0x08
	uint8_t i;
	uint8_t offset = 0;			// Index into channel structure
	uint8_t	items= RCITEMS;		// Items in group
	
	// If submenu item has changed, reset submenu positions
	if (menu_flag)
    6a58:	80 91 dc 07 	lds	r24, 0x07DC
    6a5c:	88 23       	and	r24, r24
    6a5e:	41 f0       	breq	.+16     	; 0x6a70 <menu_rc_setup+0x4e>
	{
		sub_top = RCSTART;
    6a60:	85 e9       	ldi	r24, 0x95	; 149
    6a62:	90 e0       	ldi	r25, 0x00	; 0
    6a64:	90 93 2d 05 	sts	0x052D, r25
    6a68:	80 93 2c 05 	sts	0x052C, r24
		menu_flag = 0;
    6a6c:	10 92 dc 07 	sts	0x07DC, r1
			writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_CONFIG, (6 - Config.MPU6050_LPF));

			// Update channel sequence
			for (i = 0; i < MAX_RC_CHANNELS; i++)
			{
				if (Config.TxSeq == FUTABASEQ)
    6a70:	27 e0       	ldi	r18, 0x07	; 7
    6a72:	2f 83       	std	Y+7, r18	; 0x07
    6a74:	1e 82       	std	Y+6, r1	; 0x06
    6a76:	6a ec       	ldi	r22, 0xCA	; 202
    6a78:	46 2e       	mov	r4, r22
    6a7a:	65 e0       	ldi	r22, 0x05	; 5
    6a7c:	56 2e       	mov	r5, r22
			default:
				break;
		}

		// Print menu
		print_menu_items(sub_top + offset, RCSTART + offset, value_ptr, (const unsigned char*)rc_menu_ranges[section - 1], 0, RCOFFSET, (const unsigned char*)RCMenuText[section - 1], cursor);
    6a7e:	38 85       	ldd	r19, Y+8	; 0x08
    6a80:	83 2f       	mov	r24, r19
    6a82:	90 e0       	ldi	r25, 0x00	; 0
    6a84:	01 97       	sbiw	r24, 0x01	; 1
    6a86:	2d e2       	ldi	r18, 0x2D	; 45
    6a88:	28 9f       	mul	r18, r24
    6a8a:	30 01       	movw	r6, r0
    6a8c:	29 9f       	mul	r18, r25
    6a8e:	70 0c       	add	r7, r0
    6a90:	11 24       	eor	r1, r1
    6a92:	93 01       	movw	r18, r6
    6a94:	22 58       	subi	r18, 0x82	; 130
    6a96:	36 4e       	sbci	r19, 0xE6	; 230
    6a98:	39 01       	movw	r6, r18
    6a9a:	29 e0       	ldi	r18, 0x09	; 9
    6a9c:	28 9f       	mul	r18, r24
    6a9e:	10 01       	movw	r2, r0
    6aa0:	29 9f       	mul	r18, r25
    6aa2:	30 0c       	add	r3, r0
    6aa4:	11 24       	eor	r1, r1
    6aa6:	c1 01       	movw	r24, r2
    6aa8:	88 52       	subi	r24, 0x28	; 40
    6aaa:	96 4e       	sbci	r25, 0xE6	; 230
    6aac:	9a 87       	std	Y+10, r25	; 0x0a
    6aae:	89 87       	std	Y+9, r24	; 0x09
	{
		sub_top = RCSTART;
		menu_flag = 0;
	}

	while(button != BACK)
    6ab0:	80 91 da 07 	lds	r24, 0x07DA
    6ab4:	80 37       	cpi	r24, 0x70	; 112
    6ab6:	09 f4       	brne	.+2      	; 0x6aba <menu_rc_setup+0x98>
    6ab8:	a7 c0       	rjmp	.+334    	; 0x6c08 <menu_rc_setup+0x1e6>
	{
		// Get menu offsets and load values from eeprom
		// 1 = RC, 2 = General
		switch(section)
    6aba:	98 85       	ldd	r25, Y+8	; 0x08
    6abc:	92 30       	cpi	r25, 0x02	; 2
    6abe:	41 f4       	brne	.+16     	; 0x6ad0 <menu_rc_setup+0xae>
		{
			case 1:				// RC setup menu
				break;
			case 2:				// General menu
				offset = RCITEMSOFFSET;
				items = GENERALITEMS;
    6ac0:	29 e0       	ldi	r18, 0x09	; 9
    6ac2:	2f 83       	std	Y+7, r18	; 0x07
		switch(section)
		{
			case 1:				// RC setup menu
				break;
			case 2:				// General menu
				offset = RCITEMSOFFSET;
    6ac4:	39 e0       	ldi	r19, 0x09	; 9
    6ac6:	3e 83       	std	Y+6, r19	; 0x06
				items = GENERALITEMS;
				value_ptr = &Config.Orientation;
    6ac8:	59 e2       	ldi	r21, 0x29	; 41
    6aca:	45 2e       	mov	r4, r21
    6acc:	56 e0       	ldi	r21, 0x06	; 6
    6ace:	55 2e       	mov	r5, r21
			default:
				break;
		}

		// Print menu
		print_menu_items(sub_top + offset, RCSTART + offset, value_ptr, (const unsigned char*)rc_menu_ranges[section - 1], 0, RCOFFSET, (const unsigned char*)RCMenuText[section - 1], cursor);
    6ad0:	8e 81       	ldd	r24, Y+6	; 0x06
    6ad2:	88 2e       	mov	r8, r24
    6ad4:	91 2c       	mov	r9, r1
    6ad6:	b4 01       	movw	r22, r8
    6ad8:	6b 56       	subi	r22, 0x6B	; 107
    6ada:	7f 4f       	sbci	r23, 0xFF	; 255
    6adc:	80 91 2c 05 	lds	r24, 0x052C
    6ae0:	90 91 2d 05 	lds	r25, 0x052D
    6ae4:	a0 90 04 05 	lds	r10, 0x0504
    6ae8:	c9 84       	ldd	r12, Y+9	; 0x09
    6aea:	da 84       	ldd	r13, Y+10	; 0x0a
    6aec:	2f e4       	ldi	r18, 0x4F	; 79
    6aee:	e2 2e       	mov	r14, r18
    6af0:	00 e0       	ldi	r16, 0x00	; 0
    6af2:	93 01       	movw	r18, r6
    6af4:	a2 01       	movw	r20, r4
    6af6:	88 0d       	add	r24, r8
    6af8:	99 1d       	adc	r25, r9
    6afa:	0e 94 7b 31 	call	0x62f6	; 0x62f6 <print_menu_items>

		// Handle menu changes
		update_menu(items, RCSTART, offset, button, &cursor, &sub_top, &menu_temp);
    6afe:	37 e2       	ldi	r19, 0x27	; 39
    6b00:	c3 2e       	mov	r12, r19
    6b02:	35 e0       	ldi	r19, 0x05	; 5
    6b04:	d3 2e       	mov	r13, r19
    6b06:	4c e2       	ldi	r20, 0x2C	; 44
    6b08:	e4 2e       	mov	r14, r20
    6b0a:	45 e0       	ldi	r20, 0x05	; 5
    6b0c:	f4 2e       	mov	r15, r20
    6b0e:	04 e0       	ldi	r16, 0x04	; 4
    6b10:	15 e0       	ldi	r17, 0x05	; 5
    6b12:	20 91 da 07 	lds	r18, 0x07DA
    6b16:	4e 81       	ldd	r20, Y+6	; 0x06
    6b18:	65 e9       	ldi	r22, 0x95	; 149
    6b1a:	8f 81       	ldd	r24, Y+7	; 0x07
    6b1c:	0e 94 b1 30 	call	0x6162	; 0x6162 <update_menu>
		range = get_menu_range ((const unsigned char*)rc_menu_ranges[section - 1], (menu_temp - RCSTART - offset)); 
    6b20:	60 91 27 05 	lds	r22, 0x0527
    6b24:	65 59       	subi	r22, 0x95	; 149
    6b26:	9e 81       	ldd	r25, Y+6	; 0x06
    6b28:	69 1b       	sub	r22, r25
    6b2a:	c3 01       	movw	r24, r6
    6b2c:	0e 94 6f 2e 	call	0x5cde	; 0x5cde <get_menu_range>
    6b30:	29 83       	std	Y+1, r18	; 0x01
    6b32:	3a 83       	std	Y+2, r19	; 0x02
    6b34:	4b 83       	std	Y+3, r20	; 0x03
    6b36:	5c 83       	std	Y+4, r21	; 0x04
    6b38:	6d 83       	std	Y+5, r22	; 0x05

		if (button == ENTER)
    6b3a:	80 91 da 07 	lds	r24, 0x07DA
    6b3e:	80 3e       	cpi	r24, 0xE0	; 224
    6b40:	09 f5       	brne	.+66     	; 0x6b84 <menu_rc_setup+0x162>
		{
			text_link = pgm_read_byte(&RCMenuText[section - 1][menu_temp - RCSTART - offset]);
    6b42:	80 91 27 05 	lds	r24, 0x0527
    6b46:	90 91 28 05 	lds	r25, 0x0528
    6b4a:	bc 01       	movw	r22, r24
    6b4c:	65 59       	subi	r22, 0x95	; 149
    6b4e:	71 09       	sbc	r23, r1
    6b50:	68 19       	sub	r22, r8
    6b52:	79 09       	sbc	r23, r9
    6b54:	fb 01       	movw	r30, r22
    6b56:	e2 0d       	add	r30, r2
    6b58:	f3 1d       	adc	r31, r3
    6b5a:	e8 52       	subi	r30, 0x28	; 40
    6b5c:	f6 4e       	sbci	r31, 0xE6	; 230
    6b5e:	e4 91       	lpm	r30, Z
			do_menu_item(menu_temp, value_ptr + (menu_temp - RCSTART - offset), 1, range, 0, text_link, false, 0);
    6b60:	ae 2e       	mov	r10, r30
    6b62:	b1 2c       	mov	r11, r1
    6b64:	64 0d       	add	r22, r4
    6b66:	75 1d       	adc	r23, r5
    6b68:	1f 92       	push	r1
    6b6a:	1f 92       	push	r1
    6b6c:	81 2c       	mov	r8, r1
    6b6e:	c1 2c       	mov	r12, r1
    6b70:	e9 80       	ldd	r14, Y+1	; 0x01
    6b72:	fa 80       	ldd	r15, Y+2	; 0x02
    6b74:	0b 81       	ldd	r16, Y+3	; 0x03
    6b76:	1c 81       	ldd	r17, Y+4	; 0x04
    6b78:	2d 81       	ldd	r18, Y+5	; 0x05
    6b7a:	41 e0       	ldi	r20, 0x01	; 1
    6b7c:	0e 94 fb 2e 	call	0x5df6	; 0x5df6 <do_menu_item>
    6b80:	0f 90       	pop	r0
    6b82:	0f 90       	pop	r0
		}

		if (button == ENTER)
    6b84:	80 91 da 07 	lds	r24, 0x07DA
    6b88:	80 3e       	cpi	r24, 0xE0	; 224
    6b8a:	09 f0       	breq	.+2      	; 0x6b8e <menu_rc_setup+0x16c>
    6b8c:	91 cf       	rjmp	.-222    	; 0x6ab0 <menu_rc_setup+0x8e>
		{
			init_int();				// In case RC type has changed, reinitialise interrupts
    6b8e:	0e 94 e1 2d 	call	0x5bc2	; 0x5bc2 <init_int>
			init_uart();			// and UART
    6b92:	0e 94 64 45 	call	0x8ac8	; 0x8ac8 <init_uart>
			UpdateLimits();			// Update I-term limits and triggers based on percentages
    6b96:	0e 94 1d 36 	call	0x6c3a	; 0x6c3a <UpdateLimits>

			// Update MPU6050 LPF and reverse sense of menu items
			writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_CONFIG, (6 - Config.MPU6050_LPF));
    6b9a:	80 91 2e 06 	lds	r24, 0x062E
    6b9e:	46 e0       	ldi	r20, 0x06	; 6
    6ba0:	48 1b       	sub	r20, r24
    6ba2:	6a e1       	ldi	r22, 0x1A	; 26
    6ba4:	80 ed       	ldi	r24, 0xD0	; 208
    6ba6:	0e 94 3e 24 	call	0x487c	; 0x487c <writeI2Cbyte>

			// Update channel sequence
			for (i = 0; i < MAX_RC_CHANNELS; i++)
			{
				if (Config.TxSeq == FUTABASEQ)
    6baa:	20 91 cd 05 	lds	r18, 0x05CD
    6bae:	a2 ea       	ldi	r26, 0xA2	; 162
    6bb0:	b5 e0       	ldi	r27, 0x05	; 5
    6bb2:	80 e0       	ldi	r24, 0x00	; 0
    6bb4:	90 e0       	ldi	r25, 0x00	; 0
    6bb6:	fc 01       	movw	r30, r24
    6bb8:	21 30       	cpi	r18, 0x01	; 1
    6bba:	19 f4       	brne	.+6      	; 0x6bc2 <menu_rc_setup+0x1a0>
    6bbc:	e4 52       	subi	r30, 0x24	; 36
    6bbe:	ff 4f       	sbci	r31, 0xFF	; 255
    6bc0:	02 c0       	rjmp	.+4      	; 0x6bc6 <menu_rc_setup+0x1a4>
    6bc2:	ec 51       	subi	r30, 0x1C	; 28
    6bc4:	ff 4f       	sbci	r31, 0xFF	; 255
				{
					Config.ChannelOrder[i] = pgm_read_byte(&FUTABA[i]);
				}
				else
				{
					Config.ChannelOrder[i] = pgm_read_byte(&JR[i]);
    6bc6:	e4 91       	lpm	r30, Z
    6bc8:	ec 93       	st	X, r30
    6bca:	01 96       	adiw	r24, 0x01	; 1
    6bcc:	11 96       	adiw	r26, 0x01	; 1

			// Update MPU6050 LPF and reverse sense of menu items
			writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_CONFIG, (6 - Config.MPU6050_LPF));

			// Update channel sequence
			for (i = 0; i < MAX_RC_CHANNELS; i++)
    6bce:	88 30       	cpi	r24, 0x08	; 8
    6bd0:	91 05       	cpc	r25, r1
    6bd2:	89 f7       	brne	.-30     	; 0x6bb6 <menu_rc_setup+0x194>
				}
			}

			// Check validity of RX type and PWM speed selection
			// If illegal setting, drop down to RC Sync
			if ((Config.RxMode != SBUS) && (Config.Servo_rate == FAST))
    6bd4:	80 91 ca 05 	lds	r24, 0x05CA
    6bd8:	82 30       	cpi	r24, 0x02	; 2
    6bda:	39 f0       	breq	.+14     	; 0x6bea <menu_rc_setup+0x1c8>
    6bdc:	80 91 cb 05 	lds	r24, 0x05CB
    6be0:	82 30       	cpi	r24, 0x02	; 2
    6be2:	19 f4       	brne	.+6      	; 0x6bea <menu_rc_setup+0x1c8>
			{
				Config.Servo_rate = SYNC;
    6be4:	81 e0       	ldi	r24, 0x01	; 1
    6be6:	80 93 cb 05 	sts	0x05CB, r24
			}
			
			if (Config.ArmMode == ARMABLE)
    6bea:	80 91 2b 06 	lds	r24, 0x062B
    6bee:	81 30       	cpi	r24, 0x01	; 1
    6bf0:	31 f4       	brne	.+12     	; 0x6bfe <menu_rc_setup+0x1dc>
			{
				General_error |= (1 << DISARMED);	// Set flags to disarmed
    6bf2:	80 91 16 05 	lds	r24, 0x0516
    6bf6:	84 60       	ori	r24, 0x04	; 4
    6bf8:	80 93 16 05 	sts	0x0516, r24
				LED1 = 0;
    6bfc:	2b 98       	cbi	0x05, 3	; 5
			}

			Save_Config_to_EEPROM(); // Save value and return
    6bfe:	0e 94 88 16 	call	0x2d10	; 0x2d10 <Save_Config_to_EEPROM>
			Wait_BUTTON4();			 // Wait for user's finger off the button
    6c02:	0e 94 7c 33 	call	0x66f8	; 0x66f8 <Wait_BUTTON4>
    6c06:	54 cf       	rjmp	.-344    	; 0x6ab0 <menu_rc_setup+0x8e>
		}
	}
}
    6c08:	2a 96       	adiw	r28, 0x0a	; 10
    6c0a:	0f b6       	in	r0, 0x3f	; 63
    6c0c:	f8 94       	cli
    6c0e:	de bf       	out	0x3e, r29	; 62
    6c10:	0f be       	out	0x3f, r0	; 63
    6c12:	cd bf       	out	0x3d, r28	; 61
    6c14:	df 91       	pop	r29
    6c16:	cf 91       	pop	r28
    6c18:	1f 91       	pop	r17
    6c1a:	0f 91       	pop	r16
    6c1c:	ff 90       	pop	r15
    6c1e:	ef 90       	pop	r14
    6c20:	df 90       	pop	r13
    6c22:	cf 90       	pop	r12
    6c24:	bf 90       	pop	r11
    6c26:	af 90       	pop	r10
    6c28:	9f 90       	pop	r9
    6c2a:	8f 90       	pop	r8
    6c2c:	7f 90       	pop	r7
    6c2e:	6f 90       	pop	r6
    6c30:	5f 90       	pop	r5
    6c32:	4f 90       	pop	r4
    6c34:	3f 90       	pop	r3
    6c36:	2f 90       	pop	r2
    6c38:	08 95       	ret

00006c3a <UpdateLimits>:

// Update actual limits value with that from the mix setting percentages
// This is only done at start-up and whenever the values are changed
// so as to reduce CPU loop load
void UpdateLimits(void)
{
    6c3a:	6f 92       	push	r6
    6c3c:	7f 92       	push	r7
    6c3e:	8f 92       	push	r8
    6c40:	9f 92       	push	r9
    6c42:	af 92       	push	r10
    6c44:	bf 92       	push	r11
    6c46:	cf 92       	push	r12
    6c48:	df 92       	push	r13
    6c4a:	ef 92       	push	r14
    6c4c:	ff 92       	push	r15
    6c4e:	0f 93       	push	r16
    6c50:	1f 93       	push	r17
    6c52:	cf 93       	push	r28
    6c54:	df 93       	push	r29
    6c56:	cd b7       	in	r28, 0x3d	; 61
    6c58:	de b7       	in	r29, 0x3e	; 62
    6c5a:	2c 97       	sbiw	r28, 0x0c	; 12
    6c5c:	0f b6       	in	r0, 0x3f	; 63
    6c5e:	f8 94       	cli
    6c60:	de bf       	out	0x3e, r29	; 62
    6c62:	0f be       	out	0x3f, r0	; 63
    6c64:	cd bf       	out	0x3d, r28	; 61
	uint8_t i,j;
	int32_t temp32, gain32;

	int8_t limits[FLIGHT_MODES][NUMBEROFAXIS] = 
    6c66:	80 91 d5 05 	lds	r24, 0x05D5
    6c6a:	8f 83       	std	Y+7, r24	; 0x07
    6c6c:	80 91 db 05 	lds	r24, 0x05DB
    6c70:	88 87       	std	Y+8, r24	; 0x08
    6c72:	80 91 e1 05 	lds	r24, 0x05E1
    6c76:	89 87       	std	Y+9, r24	; 0x09
    6c78:	80 91 e7 05 	lds	r24, 0x05E7
    6c7c:	8a 87       	std	Y+10, r24	; 0x0a
    6c7e:	80 91 ed 05 	lds	r24, 0x05ED
    6c82:	8b 87       	std	Y+11, r24	; 0x0b
    6c84:	80 91 f3 05 	lds	r24, 0x05F3
    6c88:	8c 87       	std	Y+12, r24	; 0x0c
		{
			{Config.FlightMode[P1].Roll_limit, Config.FlightMode[P1].Pitch_limit, Config.FlightMode[P1].Yaw_limit},
			{Config.FlightMode[P2].Roll_limit, Config.FlightMode[P2].Pitch_limit, Config.FlightMode[P2].Yaw_limit}
		};

	int8_t gains[FLIGHT_MODES][NUMBEROFAXIS] = 
    6c8a:	80 91 d4 05 	lds	r24, 0x05D4
    6c8e:	89 83       	std	Y+1, r24	; 0x01
    6c90:	80 91 da 05 	lds	r24, 0x05DA
    6c94:	8a 83       	std	Y+2, r24	; 0x02
    6c96:	80 91 e0 05 	lds	r24, 0x05E0
    6c9a:	8b 83       	std	Y+3, r24	; 0x03
    6c9c:	80 91 e6 05 	lds	r24, 0x05E6
    6ca0:	8c 83       	std	Y+4, r24	; 0x04
    6ca2:	80 91 ec 05 	lds	r24, 0x05EC
    6ca6:	8d 83       	std	Y+5, r24	; 0x05
    6ca8:	80 91 f2 05 	lds	r24, 0x05F2
    6cac:	8e 83       	std	Y+6, r24	; 0x06
			{Config.FlightMode[P2].Roll_I_mult, Config.FlightMode[P2].Pitch_I_mult, Config.FlightMode[P2].Yaw_I_mult}
		};

	// Update LVA trigger
	// Vbat is measured in units of 10mV, so PowerTriggerActual of 1270 equates to 12.7V
	switch (Config.PowerTrigger)
    6cae:	80 91 2d 06 	lds	r24, 0x062D
    6cb2:	82 30       	cpi	r24, 0x02	; 2
    6cb4:	81 f0       	breq	.+32     	; 0x6cd6 <UpdateLimits+0x9c>
    6cb6:	3c f4       	brge	.+14     	; 0x6cc6 <UpdateLimits+0x8c>
    6cb8:	88 23       	and	r24, r24
    6cba:	d1 f0       	breq	.+52     	; 0x6cf0 <UpdateLimits+0xb6>
    6cbc:	81 30       	cpi	r24, 0x01	; 1
    6cbe:	c1 f4       	brne	.+48     	; 0x6cf0 <UpdateLimits+0xb6>
	{
		case 0:
		Config.PowerTriggerActual = 0;			// Off
		break;
		case 1:
		Config.PowerTriggerActual = 350; 		// 3.5V
    6cc0:	8e e5       	ldi	r24, 0x5E	; 94
    6cc2:	91 e0       	ldi	r25, 0x01	; 1
    6cc4:	10 c0       	rjmp	.+32     	; 0x6ce6 <UpdateLimits+0xac>
			{Config.FlightMode[P2].Roll_I_mult, Config.FlightMode[P2].Pitch_I_mult, Config.FlightMode[P2].Yaw_I_mult}
		};

	// Update LVA trigger
	// Vbat is measured in units of 10mV, so PowerTriggerActual of 1270 equates to 12.7V
	switch (Config.PowerTrigger)
    6cc6:	84 30       	cpi	r24, 0x04	; 4
    6cc8:	61 f0       	breq	.+24     	; 0x6ce2 <UpdateLimits+0xa8>
    6cca:	44 f0       	brlt	.+16     	; 0x6cdc <UpdateLimits+0xa2>
    6ccc:	85 30       	cpi	r24, 0x05	; 5
    6cce:	81 f4       	brne	.+32     	; 0x6cf0 <UpdateLimits+0xb6>
		break;
		case 4:
		Config.PowerTriggerActual = 380; 		// 3.8V
		break;
		case 5:
		Config.PowerTriggerActual = 390; 		// 3.9V
    6cd0:	86 e8       	ldi	r24, 0x86	; 134
    6cd2:	91 e0       	ldi	r25, 0x01	; 1
    6cd4:	08 c0       	rjmp	.+16     	; 0x6ce6 <UpdateLimits+0xac>
		break;
		case 1:
		Config.PowerTriggerActual = 350; 		// 3.5V
		break;
		case 2:
		Config.PowerTriggerActual = 360; 		// 3.6V
    6cd6:	88 e6       	ldi	r24, 0x68	; 104
    6cd8:	91 e0       	ldi	r25, 0x01	; 1
    6cda:	05 c0       	rjmp	.+10     	; 0x6ce6 <UpdateLimits+0xac>
		break;
		case 3:
		Config.PowerTriggerActual = 370; 		// 3.7V
    6cdc:	82 e7       	ldi	r24, 0x72	; 114
    6cde:	91 e0       	ldi	r25, 0x01	; 1
    6ce0:	02 c0       	rjmp	.+4      	; 0x6ce6 <UpdateLimits+0xac>
		break;
		case 4:
		Config.PowerTriggerActual = 380; 		// 3.8V
    6ce2:	8c e7       	ldi	r24, 0x7C	; 124
    6ce4:	91 e0       	ldi	r25, 0x01	; 1
		break;
		case 5:
		Config.PowerTriggerActual = 390; 		// 3.9V
    6ce6:	90 93 28 06 	sts	0x0628, r25
    6cea:	80 93 27 06 	sts	0x0627, r24
		break;
    6cee:	04 c0       	rjmp	.+8      	; 0x6cf8 <UpdateLimits+0xbe>
		default:
		Config.PowerTriggerActual = 0;
    6cf0:	10 92 28 06 	sts	0x0628, r1
    6cf4:	10 92 27 06 	sts	0x0627, r1
		break;
	}
			
	// Determine cell count and use to multiply trigger
	if (SystemVoltage >= 2150)										// 6S - 21.5V or at least 3.58V per cell
    6cf8:	20 91 24 05 	lds	r18, 0x0524
    6cfc:	30 91 25 05 	lds	r19, 0x0525
    6d00:	80 91 27 06 	lds	r24, 0x0627
    6d04:	90 91 28 06 	lds	r25, 0x0628
    6d08:	26 36       	cpi	r18, 0x66	; 102
    6d0a:	48 e0       	ldi	r20, 0x08	; 8
    6d0c:	34 07       	cpc	r19, r20
    6d0e:	88 f0       	brcs	.+34     	; 0x6d32 <UpdateLimits+0xf8>
	{
		Config.PowerTriggerActual *= 6;
    6d10:	46 e0       	ldi	r20, 0x06	; 6
    6d12:	48 9f       	mul	r20, r24
    6d14:	90 01       	movw	r18, r0
    6d16:	49 9f       	mul	r20, r25
    6d18:	30 0d       	add	r19, r0
    6d1a:	11 24       	eor	r1, r1
    6d1c:	30 93 28 06 	sts	0x0628, r19
    6d20:	20 93 27 06 	sts	0x0627, r18
    6d24:	77 ef       	ldi	r23, 0xF7	; 247
    6d26:	a7 2e       	mov	r10, r23
    6d28:	75 e0       	ldi	r23, 0x05	; 5
    6d2a:	b7 2e       	mov	r11, r23

// Update actual limits value with that from the mix setting percentages
// This is only done at start-up and whenever the values are changed
// so as to reduce CPU loop load
void UpdateLimits(void)
{
    6d2c:	00 e0       	ldi	r16, 0x00	; 0
    6d2e:	10 e0       	ldi	r17, 0x00	; 0
    6d30:	25 c0       	rjmp	.+74     	; 0x6d7c <UpdateLimits+0x142>
	// Determine cell count and use to multiply trigger
	if (SystemVoltage >= 2150)										// 6S - 21.5V or at least 3.58V per cell
	{
		Config.PowerTriggerActual *= 6;
	}
	else if ((SystemVoltage >= 1730) && (SystemVoltage < 2150))		// 5S 17.3V to 21.5V or 4.32V(4S) to 3.58V(6S) per cell
    6d32:	a9 01       	movw	r20, r18
    6d34:	42 5c       	subi	r20, 0xC2	; 194
    6d36:	56 40       	sbci	r21, 0x06	; 6
    6d38:	44 3a       	cpi	r20, 0xA4	; 164
    6d3a:	51 40       	sbci	r21, 0x01	; 1
    6d3c:	10 f4       	brcc	.+4      	; 0x6d42 <UpdateLimits+0x108>
	{
		Config.PowerTriggerActual *= 5;
    6d3e:	45 e0       	ldi	r20, 0x05	; 5
    6d40:	e8 cf       	rjmp	.-48     	; 0x6d12 <UpdateLimits+0xd8>
	}
	else if ((SystemVoltage >= 1300) && (SystemVoltage < 1730))		// 4S 13.0V to 17.3V or 4.33V(3S) to 3.46V(5S) per cell
    6d42:	a9 01       	movw	r20, r18
    6d44:	44 51       	subi	r20, 0x14	; 20
    6d46:	55 40       	sbci	r21, 0x05	; 5
    6d48:	4e 3a       	cpi	r20, 0xAE	; 174
    6d4a:	51 40       	sbci	r21, 0x01	; 1
    6d4c:	28 f4       	brcc	.+10     	; 0x6d58 <UpdateLimits+0x11e>
	{
		Config.PowerTriggerActual *= 4;
    6d4e:	88 0f       	add	r24, r24
    6d50:	99 1f       	adc	r25, r25
    6d52:	88 0f       	add	r24, r24
    6d54:	99 1f       	adc	r25, r25
    6d56:	0d c0       	rjmp	.+26     	; 0x6d72 <UpdateLimits+0x138>
	}
	else if ((SystemVoltage >= 900) && (SystemVoltage < 1300))		// 3S 9.0V to 13.0V or 4.5V(2S) to 3.25V(4S) per cell
    6d58:	24 58       	subi	r18, 0x84	; 132
    6d5a:	33 40       	sbci	r19, 0x03	; 3
    6d5c:	20 39       	cpi	r18, 0x90	; 144
    6d5e:	31 40       	sbci	r19, 0x01	; 1
    6d60:	30 f4       	brcc	.+12     	; 0x6d6e <UpdateLimits+0x134>
	{
		Config.PowerTriggerActual *= 3;
    6d62:	9c 01       	movw	r18, r24
    6d64:	22 0f       	add	r18, r18
    6d66:	33 1f       	adc	r19, r19
    6d68:	28 0f       	add	r18, r24
    6d6a:	39 1f       	adc	r19, r25
    6d6c:	d7 cf       	rjmp	.-82     	; 0x6d1c <UpdateLimits+0xe2>
	}
	else if (SystemVoltage < 900)									// 2S Under 9.0V or 3.0V(3S) per cell
	{
		Config.PowerTriggerActual *= 2;
    6d6e:	88 0f       	add	r24, r24
    6d70:	99 1f       	adc	r25, r25
    6d72:	90 93 28 06 	sts	0x0628, r25
    6d76:	80 93 27 06 	sts	0x0627, r24
    6d7a:	d4 cf       	rjmp	.-88     	; 0x6d24 <UpdateLimits+0xea>

// Update actual limits value with that from the mix setting percentages
// This is only done at start-up and whenever the values are changed
// so as to reduce CPU loop load
void UpdateLimits(void)
{
    6d7c:	65 01       	movw	r12, r10
    6d7e:	e1 2c       	mov	r14, r1
    6d80:	f1 2c       	mov	r15, r1
    6d82:	87 e0       	ldi	r24, 0x07	; 7
    6d84:	88 2e       	mov	r8, r24
    6d86:	91 2c       	mov	r9, r1
    6d88:	8c 0e       	add	r8, r28
    6d8a:	9d 1e       	adc	r9, r29
    6d8c:	80 0e       	add	r8, r16
    6d8e:	91 1e       	adc	r9, r17
    6d90:	66 24       	eor	r6, r6
    6d92:	63 94       	inc	r6
    6d94:	71 2c       	mov	r7, r1
    6d96:	6c 0e       	add	r6, r28
    6d98:	7d 1e       	adc	r7, r29
    6d9a:	60 0e       	add	r6, r16
    6d9c:	71 1e       	adc	r7, r17
    6d9e:	f4 01       	movw	r30, r8
    6da0:	ee 0d       	add	r30, r14
    6da2:	ff 1d       	adc	r31, r15
	// Update I_term input constraints for all profiles
	for (j = 0; j < FLIGHT_MODES; j++)
	{
		for (i = 0; i < NUMBEROFAXIS; i++)
		{
			temp32 	= limits[j][i]; 						// Promote limit %
    6da4:	a0 81       	ld	r26, Z

			// I-term output (throw). Convert from % to actual count
			// A value of 80,000 results in +/- 1250 or full throw at the output stage
			// This is because the maximum signal value is +/-1250 after division by 64. 1250 * 64 = 80,000
			Config.Raw_I_Limits[j][i] = temp32 * (int32_t)640;	// 80,000 / 125% = 640
    6da6:	bb 27       	eor	r27, r27
    6da8:	a7 fd       	sbrc	r26, 7
    6daa:	b0 95       	com	r27
    6dac:	20 e8       	ldi	r18, 0x80	; 128
    6dae:	32 e0       	ldi	r19, 0x02	; 2
    6db0:	0e 94 84 48 	call	0x9108	; 0x9108 <__usmulhisi3>
    6db4:	f6 01       	movw	r30, r12
    6db6:	61 93       	st	Z+, r22
    6db8:	71 93       	st	Z+, r23
    6dba:	81 93       	st	Z+, r24
    6dbc:	91 93       	st	Z+, r25
    6dbe:	6f 01       	movw	r12, r30
    6dc0:	f3 01       	movw	r30, r6
    6dc2:	ee 0d       	add	r30, r14
    6dc4:	ff 1d       	adc	r31, r15

			// I-term source limits. These have to be different due to the I-term gain setting
			// I-term = (gyro * gain) / 32, so the gyro count for a particular gain and limit is
			// Gyro = (I-term * 32) / gain :) 

			if (gains[j][i] != 0)
    6dc6:	20 81       	ld	r18, Z
    6dc8:	22 23       	and	r18, r18
    6dca:	b1 f0       	breq	.+44     	; 0x6df8 <UpdateLimits+0x1be>
			{
				gain32 = gains[j][i];						// Promote gain value
				Config.Raw_I_Constrain[j][i] = (Config.Raw_I_Limits[j][i] << 5) / gain32;
    6dcc:	35 e0       	ldi	r19, 0x05	; 5
    6dce:	66 0f       	add	r22, r22
    6dd0:	77 1f       	adc	r23, r23
    6dd2:	88 1f       	adc	r24, r24
    6dd4:	99 1f       	adc	r25, r25
    6dd6:	3a 95       	dec	r19
    6dd8:	d1 f7       	brne	.-12     	; 0x6dce <UpdateLimits+0x194>
			// I-term = (gyro * gain) / 32, so the gyro count for a particular gain and limit is
			// Gyro = (I-term * 32) / gain :) 

			if (gains[j][i] != 0)
			{
				gain32 = gains[j][i];						// Promote gain value
    6dda:	33 27       	eor	r19, r19
    6ddc:	27 fd       	sbrc	r18, 7
    6dde:	30 95       	com	r19
    6de0:	43 2f       	mov	r20, r19
    6de2:	53 2f       	mov	r21, r19
				Config.Raw_I_Constrain[j][i] = (Config.Raw_I_Limits[j][i] << 5) / gain32;
    6de4:	0e 94 48 48 	call	0x9090	; 0x9090 <__divmodsi4>
    6de8:	d6 01       	movw	r26, r12
    6dea:	54 96       	adiw	r26, 0x14	; 20
    6dec:	2d 93       	st	X+, r18
    6dee:	3d 93       	st	X+, r19
    6df0:	4d 93       	st	X+, r20
    6df2:	5c 93       	st	X, r21
    6df4:	57 97       	sbiw	r26, 0x17	; 23
    6df6:	05 c0       	rjmp	.+10     	; 0x6e02 <UpdateLimits+0x1c8>
			}
			else 
			{
				Config.Raw_I_Constrain[j][i] = 0;
    6df8:	f6 01       	movw	r30, r12
    6dfa:	14 8a       	std	Z+20, r1	; 0x14
    6dfc:	15 8a       	std	Z+21, r1	; 0x15
    6dfe:	16 8a       	std	Z+22, r1	; 0x16
    6e00:	17 8a       	std	Z+23, r1	; 0x17
    6e02:	ff ef       	ldi	r31, 0xFF	; 255
    6e04:	ef 1a       	sub	r14, r31
    6e06:	ff 0a       	sbc	r15, r31
	}

	// Update I_term input constraints for all profiles
	for (j = 0; j < FLIGHT_MODES; j++)
	{
		for (i = 0; i < NUMBEROFAXIS; i++)
    6e08:	23 e0       	ldi	r18, 0x03	; 3
    6e0a:	e2 16       	cp	r14, r18
    6e0c:	f1 04       	cpc	r15, r1
    6e0e:	39 f6       	brne	.-114    	; 0x6d9e <UpdateLimits+0x164>
    6e10:	4c e0       	ldi	r20, 0x0C	; 12
    6e12:	a4 0e       	add	r10, r20
    6e14:	b1 1c       	adc	r11, r1
    6e16:	0d 5f       	subi	r16, 0xFD	; 253
    6e18:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		Config.PowerTriggerActual *= 2;
	}

	// Update I_term input constraints for all profiles
	for (j = 0; j < FLIGHT_MODES; j++)
    6e1a:	06 30       	cpi	r16, 0x06	; 6
    6e1c:	11 05       	cpc	r17, r1
    6e1e:	09 f0       	breq	.+2      	; 0x6e22 <UpdateLimits+0x1e8>
    6e20:	ad cf       	rjmp	.-166    	; 0x6d7c <UpdateLimits+0x142>
    6e22:	8b e6       	ldi	r24, 0x6B	; 107
    6e24:	97 e0       	ldi	r25, 0x07	; 7
    6e26:	ea ea       	ldi	r30, 0xAA	; 170
    6e28:	f5 e0       	ldi	r31, 0x05	; 5
    6e2a:	63 e7       	ldi	r22, 0x73	; 115
    6e2c:	77 e0       	ldi	r23, 0x07	; 7
	}

	// Update travel limits
	for (i = 0; i < MIX_OUTPUTS; i++)
	{
		Config.Limits[i].minimum = scale_percent(Config.min_travel[i]);
    6e2e:	dc 01       	movw	r26, r24
    6e30:	2d 91       	ld	r18, X+
    6e32:	cd 01       	movw	r24, r26
int16_t scale_percent(int8_t value)
{
	int16_t temp16_1, temp16_2;

	temp16_1 = value; // Promote
	temp16_2 = ((temp16_1 * (int16_t)10) + 3750);
    6e34:	ba e0       	ldi	r27, 0x0A	; 10
    6e36:	2b 02       	muls	r18, r27
    6e38:	90 01       	movw	r18, r0
    6e3a:	11 24       	eor	r1, r1
    6e3c:	2a 55       	subi	r18, 0x5A	; 90
    6e3e:	31 4f       	sbci	r19, 0xF1	; 241
	}

	// Update travel limits
	for (i = 0; i < MIX_OUTPUTS; i++)
	{
		Config.Limits[i].minimum = scale_percent(Config.min_travel[i]);
    6e40:	31 83       	std	Z+1, r19	; 0x01
    6e42:	20 83       	st	Z, r18
		Config.Limits[i].maximum = scale_percent(Config.max_travel[i]);
    6e44:	db 01       	movw	r26, r22
    6e46:	2d 91       	ld	r18, X+
    6e48:	bd 01       	movw	r22, r26
int16_t scale_percent(int8_t value)
{
	int16_t temp16_1, temp16_2;

	temp16_1 = value; // Promote
	temp16_2 = ((temp16_1 * (int16_t)10) + 3750);
    6e4a:	ba e0       	ldi	r27, 0x0A	; 10
    6e4c:	2b 02       	muls	r18, r27
    6e4e:	90 01       	movw	r18, r0
    6e50:	11 24       	eor	r1, r1
    6e52:	2a 55       	subi	r18, 0x5A	; 90
    6e54:	31 4f       	sbci	r19, 0xF1	; 241

	// Update travel limits
	for (i = 0; i < MIX_OUTPUTS; i++)
	{
		Config.Limits[i].minimum = scale_percent(Config.min_travel[i]);
		Config.Limits[i].maximum = scale_percent(Config.max_travel[i]);
    6e56:	33 83       	std	Z+3, r19	; 0x03
    6e58:	22 83       	std	Z+2, r18	; 0x02
    6e5a:	34 96       	adiw	r30, 0x04	; 4
			}
		}
	}

	// Update travel limits
	for (i = 0; i < MIX_OUTPUTS; i++)
    6e5c:	25 e0       	ldi	r18, 0x05	; 5
    6e5e:	ea 3c       	cpi	r30, 0xCA	; 202
    6e60:	f2 07       	cpc	r31, r18
    6e62:	29 f7       	brne	.-54     	; 0x6e2e <UpdateLimits+0x1f4>

	// Adjust trim to match 0.01 degree resolution
	// A value of 127 multiplied by 10 = 1270 which in 1/100ths of a degree equates to 12.7 degrees
	for (i = P1; i <= P2; i++)
	{
		Config.Rolltrim[i] = Config.FlightMode[i].AccRollZeroTrim * 10;
    6e64:	80 91 d8 05 	lds	r24, 0x05D8
    6e68:	4a e0       	ldi	r20, 0x0A	; 10
    6e6a:	84 02       	muls	r24, r20
    6e6c:	c0 01       	movw	r24, r0
    6e6e:	11 24       	eor	r1, r1
    6e70:	90 93 a1 07 	sts	0x07A1, r25
    6e74:	80 93 a0 07 	sts	0x07A0, r24
		Config.Pitchtrim[i] = Config.FlightMode[i].AccPitchZeroTrim * 10;
    6e78:	80 91 de 05 	lds	r24, 0x05DE
    6e7c:	6a e0       	ldi	r22, 0x0A	; 10
    6e7e:	86 02       	muls	r24, r22
    6e80:	c0 01       	movw	r24, r0
    6e82:	11 24       	eor	r1, r1
    6e84:	90 93 a5 07 	sts	0x07A5, r25
    6e88:	80 93 a4 07 	sts	0x07A4, r24

	// Adjust trim to match 0.01 degree resolution
	// A value of 127 multiplied by 10 = 1270 which in 1/100ths of a degree equates to 12.7 degrees
	for (i = P1; i <= P2; i++)
	{
		Config.Rolltrim[i] = Config.FlightMode[i].AccRollZeroTrim * 10;
    6e8c:	80 91 ea 05 	lds	r24, 0x05EA
    6e90:	aa e0       	ldi	r26, 0x0A	; 10
    6e92:	8a 02       	muls	r24, r26
    6e94:	c0 01       	movw	r24, r0
    6e96:	11 24       	eor	r1, r1
    6e98:	90 93 a3 07 	sts	0x07A3, r25
    6e9c:	80 93 a2 07 	sts	0x07A2, r24
		Config.Pitchtrim[i] = Config.FlightMode[i].AccPitchZeroTrim * 10;
    6ea0:	80 91 f0 05 	lds	r24, 0x05F0
    6ea4:	ba e0       	ldi	r27, 0x0A	; 10
    6ea6:	8b 02       	muls	r24, r27
    6ea8:	c0 01       	movw	r24, r0
    6eaa:	11 24       	eor	r1, r1
    6eac:	90 93 a7 07 	sts	0x07A7, r25
    6eb0:	80 93 a6 07 	sts	0x07A6, r24
	}
}
    6eb4:	2c 96       	adiw	r28, 0x0c	; 12
    6eb6:	0f b6       	in	r0, 0x3f	; 63
    6eb8:	f8 94       	cli
    6eba:	de bf       	out	0x3e, r29	; 62
    6ebc:	0f be       	out	0x3f, r0	; 63
    6ebe:	cd bf       	out	0x3d, r28	; 61
    6ec0:	df 91       	pop	r29
    6ec2:	cf 91       	pop	r28
    6ec4:	1f 91       	pop	r17
    6ec6:	0f 91       	pop	r16
    6ec8:	ff 90       	pop	r15
    6eca:	ef 90       	pop	r14
    6ecc:	df 90       	pop	r13
    6ece:	cf 90       	pop	r12
    6ed0:	bf 90       	pop	r11
    6ed2:	af 90       	pop	r10
    6ed4:	9f 90       	pop	r9
    6ed6:	8f 90       	pop	r8
    6ed8:	7f 90       	pop	r7
    6eda:	6f 90       	pop	r6
    6edc:	08 95       	ret

00006ede <UpdateServos>:

// Update servos from the mixer Config.Channel[i].P1_value data, add offsets and enforce travel limits
void UpdateServos(void)
{
    6ede:	0f 93       	push	r16
    6ee0:	1f 93       	push	r17
    6ee2:	cf 93       	push	r28
    6ee4:	df 93       	push	r29
    6ee6:	a3 e3       	ldi	r26, 0x33	; 51
    6ee8:	b6 e0       	ldi	r27, 0x06	; 6
    6eea:	03 e6       	ldi	r16, 0x63	; 99
    6eec:	17 e0       	ldi	r17, 0x07	; 7
    6eee:	ea ea       	ldi	r30, 0xAA	; 170
    6ef0:	f5 e0       	ldi	r31, 0x05	; 5
    6ef2:	80 e0       	ldi	r24, 0x00	; 0
    6ef4:	90 e0       	ldi	r25, 0x00	; 0
	int16_t temp1 = 0; // Output value

	for (i = 0; i < MIX_OUTPUTS; i++)
	{
		// Servo reverse and trim for the eight physical outputs
		temp1 = Config.Channel[i].P1_value;
    6ef6:	2d 91       	ld	r18, X+
    6ef8:	3c 91       	ld	r19, X
    6efa:	11 97       	sbiw	r26, 0x01	; 1

		// Reverse this channel for the eight physical outputs
		if ((i <= MIX_OUTPUTS) && (Config.Servo_reverse[i] == ON))
    6efc:	e8 01       	movw	r28, r16
    6efe:	49 91       	ld	r20, Y+
    6f00:	8e 01       	movw	r16, r28
    6f02:	41 30       	cpi	r20, 0x01	; 1
    6f04:	19 f4       	brne	.+6      	; 0x6f0c <UpdateServos+0x2e>
		{	
			temp1 = -temp1;
    6f06:	31 95       	neg	r19
    6f08:	21 95       	neg	r18
    6f0a:	31 09       	sbc	r19, r1
		}

		// Add offset value to restore to system compatible value
		temp1 += 3750;
    6f0c:	2a 55       	subi	r18, 0x5A	; 90
    6f0e:	31 4f       	sbci	r19, 0xF1	; 241

		// Enforce min, max travel limits
		if (temp1 > Config.Limits[i].maximum)
    6f10:	62 81       	ldd	r22, Z+2	; 0x02
    6f12:	73 81       	ldd	r23, Z+3	; 0x03
    6f14:	ac 01       	movw	r20, r24
    6f16:	44 0f       	add	r20, r20
    6f18:	55 1f       	adc	r21, r21
    6f1a:	62 17       	cp	r22, r18
    6f1c:	73 07       	cpc	r23, r19
    6f1e:	24 f4       	brge	.+8      	; 0x6f28 <UpdateServos+0x4a>
		{
			ServoOut[i] = Config.Limits[i].maximum;
    6f20:	43 5d       	subi	r20, 0xD3	; 211
    6f22:	57 4f       	sbci	r21, 0xF7	; 247
    6f24:	ea 01       	movw	r28, r20
    6f26:	08 c0       	rjmp	.+16     	; 0x6f38 <UpdateServos+0x5a>
		}

		else if (temp1 < Config.Limits[i].minimum)
    6f28:	60 81       	ld	r22, Z
    6f2a:	71 81       	ldd	r23, Z+1	; 0x01
		{
			ServoOut[i] = Config.Limits[i].minimum;
    6f2c:	43 5d       	subi	r20, 0xD3	; 211
    6f2e:	57 4f       	sbci	r21, 0xF7	; 247
    6f30:	ea 01       	movw	r28, r20
		if (temp1 > Config.Limits[i].maximum)
		{
			ServoOut[i] = Config.Limits[i].maximum;
		}

		else if (temp1 < Config.Limits[i].minimum)
    6f32:	26 17       	cp	r18, r22
    6f34:	37 07       	cpc	r19, r23
    6f36:	1c f4       	brge	.+6      	; 0x6f3e <UpdateServos+0x60>
		{
			ServoOut[i] = Config.Limits[i].minimum;
    6f38:	79 83       	std	Y+1, r23	; 0x01
    6f3a:	68 83       	st	Y, r22
    6f3c:	02 c0       	rjmp	.+4      	; 0x6f42 <UpdateServos+0x64>
		}

		// Transfer value to servo
		else
		{
			ServoOut[i] = temp1;
    6f3e:	39 83       	std	Y+1, r19	; 0x01
    6f40:	28 83       	st	Y, r18
    6f42:	01 96       	adiw	r24, 0x01	; 1
    6f44:	96 96       	adiw	r26, 0x26	; 38
    6f46:	34 96       	adiw	r30, 0x04	; 4
void UpdateServos(void)
{
	uint8_t i;
	int16_t temp1 = 0; // Output value

	for (i = 0; i < MIX_OUTPUTS; i++)
    6f48:	88 30       	cpi	r24, 0x08	; 8
    6f4a:	91 05       	cpc	r25, r1
    6f4c:	a1 f6       	brne	.-88     	; 0x6ef6 <UpdateServos+0x18>
		else
		{
			ServoOut[i] = temp1;
		}
	}
}
    6f4e:	df 91       	pop	r29
    6f50:	cf 91       	pop	r28
    6f52:	1f 91       	pop	r17
    6f54:	0f 91       	pop	r16
    6f56:	08 95       	ret

00006f58 <scale32>:

// 32 bit multiply/scale for broken GCC
// Returns immediately if multiplier is 100, 0 or -100
int16_t scale32(int16_t value16, int16_t multiplier16)
{
    6f58:	9c 01       	movw	r18, r24
	int32_t temp32 = 0;
	int32_t mult32 = 0;

	// No change if 100% (no scaling)
	if (multiplier16 == 100)
    6f5a:	64 36       	cpi	r22, 0x64	; 100
    6f5c:	71 05       	cpc	r23, r1
    6f5e:	e9 f0       	breq	.+58     	; 0x6f9a <scale32+0x42>
	{
		return value16;
	}

	// Reverse if -100%
	else if (multiplier16 == -100)
    6f60:	6c 39       	cpi	r22, 0x9C	; 156
    6f62:	8f ef       	ldi	r24, 0xFF	; 255
    6f64:	78 07       	cpc	r23, r24
    6f66:	29 f4       	brne	.+10     	; 0x6f72 <scale32+0x1a>
	{
		return -value16;	
    6f68:	88 27       	eor	r24, r24
    6f6a:	99 27       	eor	r25, r25
    6f6c:	82 1b       	sub	r24, r18
    6f6e:	93 0b       	sbc	r25, r19
    6f70:	08 95       	ret
	}

	// Zero if 0%
	else if (multiplier16 == 0)
    6f72:	61 15       	cp	r22, r1
    6f74:	71 05       	cpc	r23, r1
    6f76:	71 f0       	breq	.+28     	; 0x6f94 <scale32+0x3c>
	else
	{
		// GCC is broken bad regarding multiplying 32 bit numbers, hence all this crap...
		mult32 = multiplier16;
		temp32 = value16;
		temp32 = temp32 * mult32;
    6f78:	db 01       	movw	r26, r22
    6f7a:	0e 94 6d 48 	call	0x90da	; 0x90da <__mulhisi3>

		// Divide by 100 and round to get scaled value
		temp32 = (temp32 + (int32_t)50) / (int32_t)100; // Constants need to be cast up to 32 bits
    6f7e:	6e 5c       	subi	r22, 0xCE	; 206
    6f80:	7f 4f       	sbci	r23, 0xFF	; 255
    6f82:	8f 4f       	sbci	r24, 0xFF	; 255
    6f84:	9f 4f       	sbci	r25, 0xFF	; 255
    6f86:	24 e6       	ldi	r18, 0x64	; 100
    6f88:	30 e0       	ldi	r19, 0x00	; 0
    6f8a:	40 e0       	ldi	r20, 0x00	; 0
    6f8c:	50 e0       	ldi	r21, 0x00	; 0
    6f8e:	0e 94 48 48 	call	0x9090	; 0x9090 <__divmodsi4>
    6f92:	03 c0       	rjmp	.+6      	; 0x6f9a <scale32+0x42>
	}

	// Zero if 0%
	else if (multiplier16 == 0)
	{
		return 0;	
    6f94:	80 e0       	ldi	r24, 0x00	; 0
    6f96:	90 e0       	ldi	r25, 0x00	; 0
    6f98:	08 95       	ret
	int32_t mult32 = 0;

	// No change if 100% (no scaling)
	if (multiplier16 == 100)
	{
		return value16;
    6f9a:	c9 01       	movw	r24, r18
		temp32 = (temp32 + (int32_t)50) / (int32_t)100; // Constants need to be cast up to 32 bits
		value16 = (int16_t)temp32;
	}

	return value16;
}
    6f9c:	08 95       	ret

00006f9e <ProcessMixer>:
//************************************************************
// Code
//************************************************************

void ProcessMixer(void)
{
    6f9e:	2f 92       	push	r2
    6fa0:	3f 92       	push	r3
    6fa2:	4f 92       	push	r4
    6fa4:	5f 92       	push	r5
    6fa6:	6f 92       	push	r6
    6fa8:	7f 92       	push	r7
    6faa:	8f 92       	push	r8
    6fac:	9f 92       	push	r9
    6fae:	af 92       	push	r10
    6fb0:	bf 92       	push	r11
    6fb2:	cf 92       	push	r12
    6fb4:	df 92       	push	r13
    6fb6:	ef 92       	push	r14
    6fb8:	ff 92       	push	r15
    6fba:	0f 93       	push	r16
    6fbc:	1f 93       	push	r17
    6fbe:	cf 93       	push	r28
    6fc0:	df 93       	push	r29
    6fc2:	cd b7       	in	r28, 0x3d	; 61
    6fc4:	de b7       	in	r29, 0x3e	; 62
    6fc6:	e2 97       	sbiw	r28, 0x32	; 50
    6fc8:	0f b6       	in	r0, 0x3f	; 63
    6fca:	f8 94       	cli
    6fcc:	de bf       	out	0x3e, r29	; 62
    6fce:	0f be       	out	0x3f, r0	; 63
    6fd0:	cd bf       	out	0x3d, r28	; 61
	int16_t	Step1 = 0;
	int16_t	Step2 = 0;
	int8_t	itemp8 = 0;

	// Copy the sensor data to an array for easy indexing - acc data is from accSmooth, increased to reasonable rates
	temp1 = (int16_t)accSmooth[ROLL] << 3;
    6fd2:	60 91 89 05 	lds	r22, 0x0589
    6fd6:	70 91 8a 05 	lds	r23, 0x058A
    6fda:	80 91 8b 05 	lds	r24, 0x058B
    6fde:	90 91 8c 05 	lds	r25, 0x058C
    6fe2:	0e 94 b4 46 	call	0x8d68	; 0x8d68 <__fixsfsi>
    6fe6:	8b 01       	movw	r16, r22
    6fe8:	83 e0       	ldi	r24, 0x03	; 3
    6fea:	00 0f       	add	r16, r16
    6fec:	11 1f       	adc	r17, r17
    6fee:	8a 95       	dec	r24
    6ff0:	e1 f7       	brne	.-8      	; 0x6fea <ProcessMixer+0x4c>
	temp2 = (int16_t)accSmooth[PITCH] << 3;
    6ff2:	60 91 8d 05 	lds	r22, 0x058D
    6ff6:	70 91 8e 05 	lds	r23, 0x058E
    6ffa:	80 91 8f 05 	lds	r24, 0x058F
    6ffe:	90 91 90 05 	lds	r25, 0x0590
    7002:	0e 94 b4 46 	call	0x8d68	; 0x8d68 <__fixsfsi>
    7006:	93 e0       	ldi	r25, 0x03	; 3
    7008:	66 0f       	add	r22, r22
    700a:	77 1f       	adc	r23, r23
    700c:	9a 95       	dec	r25
    700e:	e1 f7       	brne	.-8      	; 0x7008 <ProcessMixer+0x6a>
	int16_t	SensorDataP1[7] = {PID_Gyros[P1][ROLL], PID_Gyros[P1][PITCH], PID_Gyros[P1][YAW], temp1, temp2, PID_ACCs[P1][ROLL], PID_ACCs[P1][PITCH]};
    7010:	40 90 01 08 	lds	r4, 0x0801
    7014:	50 90 02 08 	lds	r5, 0x0802
    7018:	58 8a       	std	Y+16, r5	; 0x10
    701a:	4f 86       	std	Y+15, r4	; 0x0f
    701c:	20 91 03 08 	lds	r18, 0x0803
    7020:	30 91 04 08 	lds	r19, 0x0804
    7024:	38 a3       	std	Y+32, r19	; 0x20
    7026:	2f 8f       	std	Y+31, r18	; 0x1f
    7028:	3a 8b       	std	Y+18, r19	; 0x12
    702a:	29 8b       	std	Y+17, r18	; 0x11
    702c:	40 91 05 08 	lds	r20, 0x0805
    7030:	50 91 06 08 	lds	r21, 0x0806
    7034:	5a a3       	std	Y+34, r21	; 0x22
    7036:	49 a3       	std	Y+33, r20	; 0x21
    7038:	5c 8b       	std	Y+20, r21	; 0x14
    703a:	4b 8b       	std	Y+19, r20	; 0x13
    703c:	1e 8b       	std	Y+22, r17	; 0x16
    703e:	0d 8b       	std	Y+21, r16	; 0x15
    7040:	78 8f       	std	Y+24, r23	; 0x18
    7042:	6f 8b       	std	Y+23, r22	; 0x17
    7044:	20 91 0d 08 	lds	r18, 0x080D
    7048:	30 91 0e 08 	lds	r19, 0x080E
    704c:	3c a3       	std	Y+36, r19	; 0x24
    704e:	2b a3       	std	Y+35, r18	; 0x23
    7050:	3a 8f       	std	Y+26, r19	; 0x1a
    7052:	29 8f       	std	Y+25, r18	; 0x19
    7054:	40 91 0f 08 	lds	r20, 0x080F
    7058:	50 91 10 08 	lds	r21, 0x0810
    705c:	5e a3       	std	Y+38, r21	; 0x26
    705e:	4d a3       	std	Y+37, r20	; 0x25
    7060:	5c 8f       	std	Y+28, r21	; 0x1c
    7062:	4b 8f       	std	Y+27, r20	; 0x1b
	int16_t	SensorDataP2[7] = {PID_Gyros[P2][ROLL], PID_Gyros[P2][PITCH], PID_Gyros[P2][YAW], temp1, temp2, PID_ACCs[P2][ROLL], PID_ACCs[P2][PITCH]}; 
    7064:	20 91 07 08 	lds	r18, 0x0807
    7068:	30 91 08 08 	lds	r19, 0x0808
    706c:	38 a7       	std	Y+40, r19	; 0x28
    706e:	2f a3       	std	Y+39, r18	; 0x27
    7070:	3a 83       	std	Y+2, r19	; 0x02
    7072:	29 83       	std	Y+1, r18	; 0x01
    7074:	40 91 09 08 	lds	r20, 0x0809
    7078:	50 91 0a 08 	lds	r21, 0x080A
    707c:	5a a7       	std	Y+42, r21	; 0x2a
    707e:	49 a7       	std	Y+41, r20	; 0x29
    7080:	5c 83       	std	Y+4, r21	; 0x04
    7082:	4b 83       	std	Y+3, r20	; 0x03
    7084:	20 90 0b 08 	lds	r2, 0x080B
    7088:	30 90 0c 08 	lds	r3, 0x080C
    708c:	3e 82       	std	Y+6, r3	; 0x06
    708e:	2d 82       	std	Y+5, r2	; 0x05
    7090:	18 87       	std	Y+8, r17	; 0x08
    7092:	0f 83       	std	Y+7, r16	; 0x07
    7094:	7a 87       	std	Y+10, r23	; 0x0a
    7096:	69 87       	std	Y+9, r22	; 0x09
    7098:	a0 90 13 08 	lds	r10, 0x0813
    709c:	b0 90 14 08 	lds	r11, 0x0814
    70a0:	bc 86       	std	Y+12, r11	; 0x0c
    70a2:	ab 86       	std	Y+11, r10	; 0x0b
    70a4:	80 90 15 08 	lds	r8, 0x0815
    70a8:	90 90 16 08 	lds	r9, 0x0816
    70ac:	9e 86       	std	Y+14, r9	; 0x0e
    70ae:	8d 86       	std	Y+13, r8	; 0x0d
		//************************************************************
		// Mix in gyros
		//************************************************************ 

		// P1 gyros
		if (Transition_state < TRANS_P2)
    70b0:	50 91 19 05 	lds	r21, 0x0519
    70b4:	5d 8f       	std	Y+29, r21	; 0x1d
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P1_throttle_volume < 0 )
					{
						P1_solution = P1_solution + PID_ACCs[P1][YAW];			// Reverse if volume negative
    70b6:	20 91 11 08 	lds	r18, 0x0811
    70ba:	30 91 12 08 	lds	r19, 0x0812
    70be:	3c a7       	std	Y+44, r19	; 0x2c
    70c0:	2b a7       	std	Y+43, r18	; 0x2b
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P2_throttle_volume < 0 )
					{
						P2_solution = P2_solution + PID_ACCs[P2][YAW];			// Reverse if volume negative
    70c2:	40 91 17 08 	lds	r20, 0x0817
    70c6:	50 91 18 08 	lds	r21, 0x0818
    70ca:	5e a7       	std	Y+46, r21	; 0x2e
    70cc:	4d a7       	std	Y+45, r20	; 0x2d
    70ce:	c1 2c       	mov	r12, r1
    70d0:	d1 2c       	mov	r13, r1
					{
						P2_solution = P2_solution + PID_Gyros[P2][ROLL];		// Reverse if volume negative
					}
					else
					{
						P2_solution = P2_solution - PID_Gyros[P2][ROLL];
    70d2:	2f a1       	ldd	r18, Y+39	; 0x27
    70d4:	38 a5       	ldd	r19, Y+40	; 0x28
    70d6:	31 95       	neg	r19
    70d8:	21 95       	neg	r18
    70da:	31 09       	sbc	r19, r1
    70dc:	38 ab       	std	Y+48, r19	; 0x30
    70de:	2f a7       	std	Y+47, r18	; 0x2f
					{
						P1_solution = P1_solution + PID_Gyros[P1][ROLL];		// Reverse if volume negative
					}
					else
					{
						P1_solution = P1_solution - PID_Gyros[P1][ROLL];
    70e0:	44 27       	eor	r20, r20
    70e2:	55 27       	eor	r21, r21
    70e4:	44 19       	sub	r20, r4
    70e6:	55 09       	sbc	r21, r5
    70e8:	5a ab       	std	Y+50, r21	; 0x32
    70ea:	49 ab       	std	Y+49, r20	; 0x31
		//************************************************************
		// Mix in gyros
		//************************************************************ 

		// P1 gyros
		if (Transition_state < TRANS_P2)
    70ec:	5d 8d       	ldd	r21, Y+29	; 0x1d
    70ee:	59 30       	cpi	r21, 0x09	; 9
    70f0:	08 f0       	brcs	.+2      	; 0x70f4 <ProcessMixer+0x156>
    70f2:	79 c0       	rjmp	.+242    	; 0x71e6 <ProcessMixer+0x248>
    70f4:	86 01       	movw	r16, r12
    70f6:	0f 55       	subi	r16, 0x5F	; 95
    70f8:	1a 4f       	sbci	r17, 0xFA	; 250
    70fa:	f8 01       	movw	r30, r16
    70fc:	ec 55       	subi	r30, 0x5C	; 92
    70fe:	ff 4f       	sbci	r31, 0xFF	; 255
		{
			switch (Config.Channel[i].P1_Roll_gyro) 
    7100:	80 81       	ld	r24, Z
    7102:	81 30       	cpi	r24, 0x01	; 1
    7104:	91 f0       	breq	.+36     	; 0x712a <ProcessMixer+0x18c>
    7106:	82 30       	cpi	r24, 0x02	; 2
    7108:	c9 f4       	brne	.+50     	; 0x713c <ProcessMixer+0x19e>
    710a:	f8 01       	movw	r30, r16
    710c:	e2 56       	subi	r30, 0x62	; 98
    710e:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P1_solution = P1_solution - PID_Gyros[P1][ROLL];
					}
					break;
				case SCALE:
					P1_solution = P1_solution - scale32(PID_Gyros[P1][ROLL], Config.Channel[i].P1_aileron_volume * 5); 
    7110:	60 81       	ld	r22, Z
    7112:	85 e0       	ldi	r24, 0x05	; 5
    7114:	68 02       	muls	r22, r24
    7116:	b0 01       	movw	r22, r0
    7118:	11 24       	eor	r1, r1
    711a:	c2 01       	movw	r24, r4
    711c:	0e 94 ac 37 	call	0x6f58	; 0x6f58 <scale32>
    7120:	ee 24       	eor	r14, r14
    7122:	ff 24       	eor	r15, r15
    7124:	e8 1a       	sub	r14, r24
    7126:	f9 0a       	sbc	r15, r25
					break;
    7128:	0d c0       	rjmp	.+26     	; 0x7144 <ProcessMixer+0x1a6>
    712a:	f8 01       	movw	r30, r16
    712c:	e2 56       	subi	r30, 0x62	; 98
    712e:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P1_Roll_gyro) 
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P1_aileron_volume < 0 )
    7130:	80 81       	ld	r24, Z
    7132:	87 fd       	sbrc	r24, 7
    7134:	06 c0       	rjmp	.+12     	; 0x7142 <ProcessMixer+0x1a4>
					{
						P1_solution = P1_solution + PID_Gyros[P1][ROLL];		// Reverse if volume negative
					}
					else
					{
						P1_solution = P1_solution - PID_Gyros[P1][ROLL];
    7136:	e9 a8       	ldd	r14, Y+49	; 0x31
    7138:	fa a8       	ldd	r15, Y+50	; 0x32
    713a:	04 c0       	rjmp	.+8      	; 0x7144 <ProcessMixer+0x1a6>
	{
		//************************************************************
		// Zero each channel value to start
		//************************************************************

		P1_solution = 0;
    713c:	e1 2c       	mov	r14, r1
    713e:	f1 2c       	mov	r15, r1
    7140:	01 c0       	rjmp	.+2      	; 0x7144 <ProcessMixer+0x1a6>
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P1_aileron_volume < 0 )
					{
						P1_solution = P1_solution + PID_Gyros[P1][ROLL];		// Reverse if volume negative
    7142:	72 01       	movw	r14, r4
    7144:	f8 01       	movw	r30, r16
    7146:	ea 55       	subi	r30, 0x5A	; 90
    7148:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				default:
					break;	
			}

			switch (Config.Channel[i].P1_Pitch_gyro)
    714a:	80 81       	ld	r24, Z
    714c:	81 30       	cpi	r24, 0x01	; 1
    714e:	89 f0       	breq	.+34     	; 0x7172 <ProcessMixer+0x1d4>
    7150:	82 30       	cpi	r24, 0x02	; 2
    7152:	f1 f4       	brne	.+60     	; 0x7190 <ProcessMixer+0x1f2>
    7154:	f8 01       	movw	r30, r16
    7156:	e0 56       	subi	r30, 0x60	; 96
    7158:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P1_solution = P1_solution + PID_Gyros[P1][PITCH];
					}
					break;
				case SCALE:
					P1_solution = P1_solution - scale32(PID_Gyros[P1][PITCH], Config.Channel[i].P1_elevator_volume * 5);
    715a:	60 81       	ld	r22, Z
    715c:	55 e0       	ldi	r21, 0x05	; 5
    715e:	65 02       	muls	r22, r21
    7160:	b0 01       	movw	r22, r0
    7162:	11 24       	eor	r1, r1
    7164:	8f 8d       	ldd	r24, Y+31	; 0x1f
    7166:	98 a1       	ldd	r25, Y+32	; 0x20
    7168:	0e 94 ac 37 	call	0x6f58	; 0x6f58 <scale32>
    716c:	e8 1a       	sub	r14, r24
    716e:	f9 0a       	sbc	r15, r25
					break;
    7170:	0f c0       	rjmp	.+30     	; 0x7190 <ProcessMixer+0x1f2>
    7172:	f8 01       	movw	r30, r16
    7174:	e0 56       	subi	r30, 0x60	; 96
    7176:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P1_Pitch_gyro)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P1_elevator_volume < 0 )
    7178:	80 81       	ld	r24, Z
    717a:	87 ff       	sbrs	r24, 7
    717c:	05 c0       	rjmp	.+10     	; 0x7188 <ProcessMixer+0x1ea>
					{
						P1_solution = P1_solution - PID_Gyros[P1][PITCH];		// Reverse if volume negative
    717e:	2f 8d       	ldd	r18, Y+31	; 0x1f
    7180:	38 a1       	ldd	r19, Y+32	; 0x20
    7182:	e2 1a       	sub	r14, r18
    7184:	f3 0a       	sbc	r15, r19
    7186:	04 c0       	rjmp	.+8      	; 0x7190 <ProcessMixer+0x1f2>
					}
					else
					{
						P1_solution = P1_solution + PID_Gyros[P1][PITCH];
    7188:	4f 8d       	ldd	r20, Y+31	; 0x1f
    718a:	58 a1       	ldd	r21, Y+32	; 0x20
    718c:	e4 0e       	add	r14, r20
    718e:	f5 1e       	adc	r15, r21
    7190:	f8 01       	movw	r30, r16
    7192:	e8 55       	subi	r30, 0x58	; 88
    7194:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				default:
					break;
			}

			switch (Config.Channel[i].P1_Yaw_gyro)
    7196:	80 81       	ld	r24, Z
    7198:	81 30       	cpi	r24, 0x01	; 1
    719a:	89 f0       	breq	.+34     	; 0x71be <ProcessMixer+0x220>
    719c:	82 30       	cpi	r24, 0x02	; 2
    719e:	f1 f4       	brne	.+60     	; 0x71dc <ProcessMixer+0x23e>
    71a0:	f8 01       	movw	r30, r16
    71a2:	ee 55       	subi	r30, 0x5E	; 94
    71a4:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P1_solution = P1_solution + PID_Gyros[P1][YAW];
					}
					break;
				case SCALE:
					P1_solution = P1_solution - scale32(PID_Gyros[P1][YAW], Config.Channel[i].P1_rudder_volume * 5);
    71a6:	60 81       	ld	r22, Z
    71a8:	55 e0       	ldi	r21, 0x05	; 5
    71aa:	65 02       	muls	r22, r21
    71ac:	b0 01       	movw	r22, r0
    71ae:	11 24       	eor	r1, r1
    71b0:	89 a1       	ldd	r24, Y+33	; 0x21
    71b2:	9a a1       	ldd	r25, Y+34	; 0x22
    71b4:	0e 94 ac 37 	call	0x6f58	; 0x6f58 <scale32>
    71b8:	e8 1a       	sub	r14, r24
    71ba:	f9 0a       	sbc	r15, r25
					break;
    71bc:	0f c0       	rjmp	.+30     	; 0x71dc <ProcessMixer+0x23e>
    71be:	f8 01       	movw	r30, r16
    71c0:	ee 55       	subi	r30, 0x5E	; 94
    71c2:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P1_Yaw_gyro)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P1_rudder_volume < 0 )
    71c4:	80 81       	ld	r24, Z
    71c6:	87 ff       	sbrs	r24, 7
    71c8:	05 c0       	rjmp	.+10     	; 0x71d4 <ProcessMixer+0x236>
					{
						P1_solution = P1_solution - PID_Gyros[P1][YAW];			// Reverse if volume negative
    71ca:	29 a1       	ldd	r18, Y+33	; 0x21
    71cc:	3a a1       	ldd	r19, Y+34	; 0x22
    71ce:	e2 1a       	sub	r14, r18
    71d0:	f3 0a       	sbc	r15, r19
    71d2:	04 c0       	rjmp	.+8      	; 0x71dc <ProcessMixer+0x23e>
					}
					else
					{
						P1_solution = P1_solution + PID_Gyros[P1][YAW];
    71d4:	49 a1       	ldd	r20, Y+33	; 0x21
    71d6:	5a a1       	ldd	r21, Y+34	; 0x22
    71d8:	e4 0e       	add	r14, r20
    71da:	f5 1e       	adc	r15, r21
					break;
			}
		}

		// P2 gyros
		if (Transition_state > TRANS_P1)
    71dc:	2d 8d       	ldd	r18, Y+29	; 0x1d
    71de:	22 23       	and	r18, r18
    71e0:	09 f4       	brne	.+2      	; 0x71e4 <ProcessMixer+0x246>
    71e2:	7a c0       	rjmp	.+244    	; 0x72d8 <ProcessMixer+0x33a>
    71e4:	02 c0       	rjmp	.+4      	; 0x71ea <ProcessMixer+0x24c>
	{
		//************************************************************
		// Zero each channel value to start
		//************************************************************

		P1_solution = 0;
    71e6:	e1 2c       	mov	r14, r1
    71e8:	f1 2c       	mov	r15, r1
    71ea:	a6 01       	movw	r20, r12
    71ec:	4f 55       	subi	r20, 0x5F	; 95
    71ee:	5a 4f       	sbci	r21, 0xFA	; 250
    71f0:	3a 01       	movw	r6, r20
    71f2:	fa 01       	movw	r30, r20
    71f4:	eb 55       	subi	r30, 0x5B	; 91
    71f6:	ff 4f       	sbci	r31, 0xFF	; 255
		}

		// P2 gyros
		if (Transition_state > TRANS_P1)
		{
			switch (Config.Channel[i].P2_Roll_gyro)
    71f8:	80 81       	ld	r24, Z
    71fa:	81 30       	cpi	r24, 0x01	; 1
    71fc:	99 f0       	breq	.+38     	; 0x7224 <ProcessMixer+0x286>
    71fe:	82 30       	cpi	r24, 0x02	; 2
    7200:	d1 f4       	brne	.+52     	; 0x7236 <ProcessMixer+0x298>
    7202:	fa 01       	movw	r30, r20
    7204:	e1 56       	subi	r30, 0x61	; 97
    7206:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P2_solution = P2_solution - PID_Gyros[P2][ROLL];
					}
					break;
				case SCALE:
					P2_solution = P2_solution - scale32(PID_Gyros[P2][ROLL], Config.Channel[i].P2_aileron_volume * 5);
    7208:	60 81       	ld	r22, Z
    720a:	55 e0       	ldi	r21, 0x05	; 5
    720c:	65 02       	muls	r22, r21
    720e:	b0 01       	movw	r22, r0
    7210:	11 24       	eor	r1, r1
    7212:	8f a1       	ldd	r24, Y+39	; 0x27
    7214:	98 a5       	ldd	r25, Y+40	; 0x28
    7216:	0e 94 ac 37 	call	0x6f58	; 0x6f58 <scale32>
    721a:	00 27       	eor	r16, r16
    721c:	11 27       	eor	r17, r17
    721e:	08 1b       	sub	r16, r24
    7220:	19 0b       	sbc	r17, r25
					break;
    7222:	0e c0       	rjmp	.+28     	; 0x7240 <ProcessMixer+0x2a2>
    7224:	fa 01       	movw	r30, r20
    7226:	e1 56       	subi	r30, 0x61	; 97
    7228:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P2_Roll_gyro)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P2_aileron_volume < 0 )
    722a:	80 81       	ld	r24, Z
    722c:	87 fd       	sbrc	r24, 7
    722e:	06 c0       	rjmp	.+12     	; 0x723c <ProcessMixer+0x29e>
					{
						P2_solution = P2_solution + PID_Gyros[P2][ROLL];		// Reverse if volume negative
					}
					else
					{
						P2_solution = P2_solution - PID_Gyros[P2][ROLL];
    7230:	0f a5       	ldd	r16, Y+47	; 0x2f
    7232:	18 a9       	ldd	r17, Y+48	; 0x30
    7234:	05 c0       	rjmp	.+10     	; 0x7240 <ProcessMixer+0x2a2>
		//************************************************************
		// Zero each channel value to start
		//************************************************************

		P1_solution = 0;
		P2_solution = 0;
    7236:	00 e0       	ldi	r16, 0x00	; 0
    7238:	10 e0       	ldi	r17, 0x00	; 0
    723a:	02 c0       	rjmp	.+4      	; 0x7240 <ProcessMixer+0x2a2>
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P2_aileron_volume < 0 )
					{
						P2_solution = P2_solution + PID_Gyros[P2][ROLL];		// Reverse if volume negative
    723c:	0f a1       	ldd	r16, Y+39	; 0x27
    723e:	18 a5       	ldd	r17, Y+40	; 0x28
    7240:	f3 01       	movw	r30, r6
    7242:	e9 55       	subi	r30, 0x59	; 89
    7244:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				default:
					break;
			}

			switch (Config.Channel[i].P2_Pitch_gyro)
    7246:	80 81       	ld	r24, Z
    7248:	81 30       	cpi	r24, 0x01	; 1
    724a:	89 f0       	breq	.+34     	; 0x726e <ProcessMixer+0x2d0>
    724c:	82 30       	cpi	r24, 0x02	; 2
    724e:	f1 f4       	brne	.+60     	; 0x728c <ProcessMixer+0x2ee>
    7250:	f3 01       	movw	r30, r6
    7252:	ef 55       	subi	r30, 0x5F	; 95
    7254:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P2_solution = P2_solution + PID_Gyros[P2][PITCH];
					}
					break;
				case SCALE:
					P2_solution = P2_solution - scale32(PID_Gyros[P2][PITCH], Config.Channel[i].P2_elevator_volume * 5);
    7256:	60 81       	ld	r22, Z
    7258:	55 e0       	ldi	r21, 0x05	; 5
    725a:	65 02       	muls	r22, r21
    725c:	b0 01       	movw	r22, r0
    725e:	11 24       	eor	r1, r1
    7260:	89 a5       	ldd	r24, Y+41	; 0x29
    7262:	9a a5       	ldd	r25, Y+42	; 0x2a
    7264:	0e 94 ac 37 	call	0x6f58	; 0x6f58 <scale32>
    7268:	08 1b       	sub	r16, r24
    726a:	19 0b       	sbc	r17, r25
					break;
    726c:	0f c0       	rjmp	.+30     	; 0x728c <ProcessMixer+0x2ee>
    726e:	f3 01       	movw	r30, r6
    7270:	ef 55       	subi	r30, 0x5F	; 95
    7272:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P2_Pitch_gyro)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P2_elevator_volume < 0 )
    7274:	80 81       	ld	r24, Z
    7276:	87 ff       	sbrs	r24, 7
    7278:	05 c0       	rjmp	.+10     	; 0x7284 <ProcessMixer+0x2e6>
					{
						P2_solution = P2_solution - PID_Gyros[P2][PITCH];		// Reverse if volume negative
    727a:	29 a5       	ldd	r18, Y+41	; 0x29
    727c:	3a a5       	ldd	r19, Y+42	; 0x2a
    727e:	02 1b       	sub	r16, r18
    7280:	13 0b       	sbc	r17, r19
    7282:	04 c0       	rjmp	.+8      	; 0x728c <ProcessMixer+0x2ee>
					}
					else
					{
						P2_solution = P2_solution + PID_Gyros[P2][PITCH];
    7284:	49 a5       	ldd	r20, Y+41	; 0x29
    7286:	5a a5       	ldd	r21, Y+42	; 0x2a
    7288:	04 0f       	add	r16, r20
    728a:	15 1f       	adc	r17, r21
    728c:	f3 01       	movw	r30, r6
    728e:	e7 55       	subi	r30, 0x57	; 87
    7290:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				default:
					break;
			}

			switch (Config.Channel[i].P2_Yaw_gyro)
    7292:	80 81       	ld	r24, Z
    7294:	81 30       	cpi	r24, 0x01	; 1
    7296:	81 f0       	breq	.+32     	; 0x72b8 <ProcessMixer+0x31a>
    7298:	82 30       	cpi	r24, 0x02	; 2
    729a:	c9 f4       	brne	.+50     	; 0x72ce <ProcessMixer+0x330>
    729c:	f3 01       	movw	r30, r6
    729e:	ed 55       	subi	r30, 0x5D	; 93
    72a0:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P2_solution = P2_solution + PID_Gyros[P2][YAW];
					}
					break;
				case SCALE:
					P2_solution = P2_solution - scale32(PID_Gyros[P2][YAW], Config.Channel[i].P2_rudder_volume * 5);
    72a2:	60 81       	ld	r22, Z
    72a4:	85 e0       	ldi	r24, 0x05	; 5
    72a6:	68 02       	muls	r22, r24
    72a8:	b0 01       	movw	r22, r0
    72aa:	11 24       	eor	r1, r1
    72ac:	c1 01       	movw	r24, r2
    72ae:	0e 94 ac 37 	call	0x6f58	; 0x6f58 <scale32>
    72b2:	08 1b       	sub	r16, r24
    72b4:	19 0b       	sbc	r17, r25
					break;
    72b6:	0b c0       	rjmp	.+22     	; 0x72ce <ProcessMixer+0x330>
    72b8:	f3 01       	movw	r30, r6
    72ba:	ed 55       	subi	r30, 0x5D	; 93
    72bc:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P2_Yaw_gyro)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P2_rudder_volume < 0 )
    72be:	80 81       	ld	r24, Z
    72c0:	87 ff       	sbrs	r24, 7
    72c2:	03 c0       	rjmp	.+6      	; 0x72ca <ProcessMixer+0x32c>
					{
						P2_solution = P2_solution - PID_Gyros[P2][YAW];			// Reverse if volume negative
    72c4:	02 19       	sub	r16, r2
    72c6:	13 09       	sbc	r17, r3
    72c8:	02 c0       	rjmp	.+4      	; 0x72ce <ProcessMixer+0x330>
					}
					else
					{
						P2_solution = P2_solution + PID_Gyros[P2][YAW];
    72ca:	02 0d       	add	r16, r2
    72cc:	13 1d       	adc	r17, r3

		//************************************************************
		// Mix in accelerometers
		//************************************************************ 
		// P1
		if (Transition_state < TRANS_P2)
    72ce:	2d 8d       	ldd	r18, Y+29	; 0x1d
    72d0:	29 30       	cpi	r18, 0x09	; 9
    72d2:	08 f0       	brcs	.+2      	; 0x72d6 <ProcessMixer+0x338>
    72d4:	7d c0       	rjmp	.+250    	; 0x73d0 <ProcessMixer+0x432>
    72d6:	02 c0       	rjmp	.+4      	; 0x72dc <ProcessMixer+0x33e>
		//************************************************************
		// Zero each channel value to start
		//************************************************************

		P1_solution = 0;
		P2_solution = 0;
    72d8:	00 e0       	ldi	r16, 0x00	; 0
    72da:	10 e0       	ldi	r17, 0x00	; 0
    72dc:	a6 01       	movw	r20, r12
    72de:	4f 55       	subi	r20, 0x5F	; 95
    72e0:	5a 4f       	sbci	r21, 0xFA	; 250
    72e2:	3a 01       	movw	r6, r20
    72e4:	fa 01       	movw	r30, r20
    72e6:	e6 55       	subi	r30, 0x56	; 86
    72e8:	ff 4f       	sbci	r31, 0xFF	; 255
		// Mix in accelerometers
		//************************************************************ 
		// P1
		if (Transition_state < TRANS_P2)
		{
			switch (Config.Channel[i].P1_Roll_acc)
    72ea:	80 81       	ld	r24, Z
    72ec:	81 30       	cpi	r24, 0x01	; 1
    72ee:	89 f0       	breq	.+34     	; 0x7312 <ProcessMixer+0x374>
    72f0:	82 30       	cpi	r24, 0x02	; 2
    72f2:	f1 f4       	brne	.+60     	; 0x7330 <ProcessMixer+0x392>
    72f4:	fa 01       	movw	r30, r20
    72f6:	e2 56       	subi	r30, 0x62	; 98
    72f8:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P1_solution = P1_solution - PID_ACCs[P1][ROLL];			// or simply add
					}
					break;
				case SCALE:
					P1_solution = P1_solution - scale32(PID_ACCs[P1][ROLL], Config.Channel[i].P1_aileron_volume * 5);
    72fa:	60 81       	ld	r22, Z
    72fc:	55 e0       	ldi	r21, 0x05	; 5
    72fe:	65 02       	muls	r22, r21
    7300:	b0 01       	movw	r22, r0
    7302:	11 24       	eor	r1, r1
    7304:	8b a1       	ldd	r24, Y+35	; 0x23
    7306:	9c a1       	ldd	r25, Y+36	; 0x24
    7308:	0e 94 ac 37 	call	0x6f58	; 0x6f58 <scale32>
    730c:	e8 1a       	sub	r14, r24
    730e:	f9 0a       	sbc	r15, r25
					break;
    7310:	0f c0       	rjmp	.+30     	; 0x7330 <ProcessMixer+0x392>
    7312:	fa 01       	movw	r30, r20
    7314:	e2 56       	subi	r30, 0x62	; 98
    7316:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P1_Roll_acc)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P1_aileron_volume < 0 )
    7318:	80 81       	ld	r24, Z
    731a:	87 ff       	sbrs	r24, 7
    731c:	05 c0       	rjmp	.+10     	; 0x7328 <ProcessMixer+0x38a>
					{
						P1_solution = P1_solution + PID_ACCs[P1][ROLL];			// Reverse if volume negative
    731e:	2b a1       	ldd	r18, Y+35	; 0x23
    7320:	3c a1       	ldd	r19, Y+36	; 0x24
    7322:	e2 0e       	add	r14, r18
    7324:	f3 1e       	adc	r15, r19
    7326:	04 c0       	rjmp	.+8      	; 0x7330 <ProcessMixer+0x392>
					}
					else
					{
						P1_solution = P1_solution - PID_ACCs[P1][ROLL];			// or simply add
    7328:	4b a1       	ldd	r20, Y+35	; 0x23
    732a:	5c a1       	ldd	r21, Y+36	; 0x24
    732c:	e4 1a       	sub	r14, r20
    732e:	f5 0a       	sbc	r15, r21
    7330:	f3 01       	movw	r30, r6
    7332:	e4 55       	subi	r30, 0x54	; 84
    7334:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				default:
					break;
			}			

			switch (Config.Channel[i].P1_Pitch_acc)
    7336:	80 81       	ld	r24, Z
    7338:	81 30       	cpi	r24, 0x01	; 1
    733a:	89 f0       	breq	.+34     	; 0x735e <ProcessMixer+0x3c0>
    733c:	82 30       	cpi	r24, 0x02	; 2
    733e:	f1 f4       	brne	.+60     	; 0x737c <ProcessMixer+0x3de>
    7340:	f3 01       	movw	r30, r6
    7342:	e0 56       	subi	r30, 0x60	; 96
    7344:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P1_solution = P1_solution + PID_ACCs[P1][PITCH];
					}
					break;
				case SCALE:
					P1_solution = P1_solution - scale32(PID_ACCs[P1][PITCH], Config.Channel[i].P1_elevator_volume * 5);
    7346:	60 81       	ld	r22, Z
    7348:	55 e0       	ldi	r21, 0x05	; 5
    734a:	65 02       	muls	r22, r21
    734c:	b0 01       	movw	r22, r0
    734e:	11 24       	eor	r1, r1
    7350:	8d a1       	ldd	r24, Y+37	; 0x25
    7352:	9e a1       	ldd	r25, Y+38	; 0x26
    7354:	0e 94 ac 37 	call	0x6f58	; 0x6f58 <scale32>
    7358:	e8 1a       	sub	r14, r24
    735a:	f9 0a       	sbc	r15, r25
					break;
    735c:	0f c0       	rjmp	.+30     	; 0x737c <ProcessMixer+0x3de>
    735e:	f3 01       	movw	r30, r6
    7360:	e0 56       	subi	r30, 0x60	; 96
    7362:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P1_Pitch_acc)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P1_elevator_volume < 0 )
    7364:	80 81       	ld	r24, Z
    7366:	87 ff       	sbrs	r24, 7
    7368:	05 c0       	rjmp	.+10     	; 0x7374 <ProcessMixer+0x3d6>
					{
						P1_solution = P1_solution - PID_ACCs[P1][PITCH];		// Reverse if volume negative
    736a:	2d a1       	ldd	r18, Y+37	; 0x25
    736c:	3e a1       	ldd	r19, Y+38	; 0x26
    736e:	e2 1a       	sub	r14, r18
    7370:	f3 0a       	sbc	r15, r19
    7372:	04 c0       	rjmp	.+8      	; 0x737c <ProcessMixer+0x3de>
					}
					else
					{
						P1_solution = P1_solution + PID_ACCs[P1][PITCH];
    7374:	4d a1       	ldd	r20, Y+37	; 0x25
    7376:	5e a1       	ldd	r21, Y+38	; 0x26
    7378:	e4 0e       	add	r14, r20
    737a:	f5 1e       	adc	r15, r21
    737c:	f3 01       	movw	r30, r6
    737e:	e2 55       	subi	r30, 0x52	; 82
    7380:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				default:
					break;
			}

			switch (Config.Channel[i].P1_Z_delta_acc)
    7382:	80 81       	ld	r24, Z
    7384:	81 30       	cpi	r24, 0x01	; 1
    7386:	89 f0       	breq	.+34     	; 0x73aa <ProcessMixer+0x40c>
    7388:	82 30       	cpi	r24, 0x02	; 2
    738a:	f1 f4       	brne	.+60     	; 0x73c8 <ProcessMixer+0x42a>
    738c:	f3 01       	movw	r30, r6
    738e:	e5 56       	subi	r30, 0x65	; 101
    7390:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P1_solution = P1_solution - PID_ACCs[P1][YAW];
					}
					break;
				case SCALE:
					P1_solution = P1_solution - scale32(PID_ACCs[P1][YAW], Config.Channel[i].P1_throttle_volume * 5);
    7392:	60 81       	ld	r22, Z
    7394:	55 e0       	ldi	r21, 0x05	; 5
    7396:	65 02       	muls	r22, r21
    7398:	b0 01       	movw	r22, r0
    739a:	11 24       	eor	r1, r1
    739c:	8b a5       	ldd	r24, Y+43	; 0x2b
    739e:	9c a5       	ldd	r25, Y+44	; 0x2c
    73a0:	0e 94 ac 37 	call	0x6f58	; 0x6f58 <scale32>
    73a4:	e8 1a       	sub	r14, r24
    73a6:	f9 0a       	sbc	r15, r25
					break;
    73a8:	0f c0       	rjmp	.+30     	; 0x73c8 <ProcessMixer+0x42a>
    73aa:	f3 01       	movw	r30, r6
    73ac:	e5 56       	subi	r30, 0x65	; 101
    73ae:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P1_Z_delta_acc)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P1_throttle_volume < 0 )
    73b0:	80 81       	ld	r24, Z
    73b2:	87 ff       	sbrs	r24, 7
    73b4:	05 c0       	rjmp	.+10     	; 0x73c0 <ProcessMixer+0x422>
					{
						P1_solution = P1_solution + PID_ACCs[P1][YAW];			// Reverse if volume negative
    73b6:	2b a5       	ldd	r18, Y+43	; 0x2b
    73b8:	3c a5       	ldd	r19, Y+44	; 0x2c
    73ba:	e2 0e       	add	r14, r18
    73bc:	f3 1e       	adc	r15, r19
    73be:	04 c0       	rjmp	.+8      	; 0x73c8 <ProcessMixer+0x42a>
					}
					else
					{
						P1_solution = P1_solution - PID_ACCs[P1][YAW];
    73c0:	4b a5       	ldd	r20, Y+43	; 0x2b
    73c2:	5c a5       	ldd	r21, Y+44	; 0x2c
    73c4:	e4 1a       	sub	r14, r20
    73c6:	f5 0a       	sbc	r15, r21
					break;
			}
		}

		// P2
		if (Transition_state > TRANS_P1)
    73c8:	2d 8d       	ldd	r18, Y+29	; 0x1d
    73ca:	22 23       	and	r18, r18
    73cc:	09 f4       	brne	.+2      	; 0x73d0 <ProcessMixer+0x432>
    73ce:	70 c0       	rjmp	.+224    	; 0x74b0 <ProcessMixer+0x512>
    73d0:	a6 01       	movw	r20, r12
    73d2:	4f 55       	subi	r20, 0x5F	; 95
    73d4:	5a 4f       	sbci	r21, 0xFA	; 250
    73d6:	3a 01       	movw	r6, r20
    73d8:	fa 01       	movw	r30, r20
    73da:	e5 55       	subi	r30, 0x55	; 85
    73dc:	ff 4f       	sbci	r31, 0xFF	; 255
		{
			switch (Config.Channel[i].P2_Roll_acc)
    73de:	80 81       	ld	r24, Z
    73e0:	81 30       	cpi	r24, 0x01	; 1
    73e2:	81 f0       	breq	.+32     	; 0x7404 <ProcessMixer+0x466>
    73e4:	82 30       	cpi	r24, 0x02	; 2
    73e6:	c9 f4       	brne	.+50     	; 0x741a <ProcessMixer+0x47c>
    73e8:	fa 01       	movw	r30, r20
    73ea:	e1 56       	subi	r30, 0x61	; 97
    73ec:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P2_solution = P2_solution - PID_ACCs[P2][ROLL];			// or simply add
					}
					break;
				case SCALE:
					P2_solution = P2_solution - scale32(PID_ACCs[P2][ROLL], Config.Channel[i].P2_aileron_volume * 5);
    73ee:	60 81       	ld	r22, Z
    73f0:	55 e0       	ldi	r21, 0x05	; 5
    73f2:	65 02       	muls	r22, r21
    73f4:	b0 01       	movw	r22, r0
    73f6:	11 24       	eor	r1, r1
    73f8:	c5 01       	movw	r24, r10
    73fa:	0e 94 ac 37 	call	0x6f58	; 0x6f58 <scale32>
    73fe:	08 1b       	sub	r16, r24
    7400:	19 0b       	sbc	r17, r25
					break;
    7402:	0b c0       	rjmp	.+22     	; 0x741a <ProcessMixer+0x47c>
    7404:	fa 01       	movw	r30, r20
    7406:	e1 56       	subi	r30, 0x61	; 97
    7408:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P2_Roll_acc)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P2_aileron_volume < 0 )
    740a:	80 81       	ld	r24, Z
    740c:	87 ff       	sbrs	r24, 7
    740e:	03 c0       	rjmp	.+6      	; 0x7416 <ProcessMixer+0x478>
					{
						P2_solution = P2_solution + PID_ACCs[P2][ROLL];			// Reverse if volume negative
    7410:	0a 0d       	add	r16, r10
    7412:	1b 1d       	adc	r17, r11
    7414:	02 c0       	rjmp	.+4      	; 0x741a <ProcessMixer+0x47c>
					}
					else
					{
						P2_solution = P2_solution - PID_ACCs[P2][ROLL];			// or simply add
    7416:	0a 19       	sub	r16, r10
    7418:	1b 09       	sbc	r17, r11
    741a:	f3 01       	movw	r30, r6
    741c:	e3 55       	subi	r30, 0x53	; 83
    741e:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				default:
					break;
			}

			switch (Config.Channel[i].P2_Pitch_acc)
    7420:	80 81       	ld	r24, Z
    7422:	81 30       	cpi	r24, 0x01	; 1
    7424:	81 f0       	breq	.+32     	; 0x7446 <ProcessMixer+0x4a8>
    7426:	82 30       	cpi	r24, 0x02	; 2
    7428:	c9 f4       	brne	.+50     	; 0x745c <ProcessMixer+0x4be>
    742a:	f3 01       	movw	r30, r6
    742c:	ef 55       	subi	r30, 0x5F	; 95
    742e:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P2_solution = P2_solution + PID_ACCs[P2][PITCH];
					}
					break;
				case SCALE:
					P2_solution = P2_solution - scale32(PID_ACCs[P2][PITCH], Config.Channel[i].P2_elevator_volume * 5);
    7430:	60 81       	ld	r22, Z
    7432:	85 e0       	ldi	r24, 0x05	; 5
    7434:	68 02       	muls	r22, r24
    7436:	b0 01       	movw	r22, r0
    7438:	11 24       	eor	r1, r1
    743a:	c4 01       	movw	r24, r8
    743c:	0e 94 ac 37 	call	0x6f58	; 0x6f58 <scale32>
    7440:	08 1b       	sub	r16, r24
    7442:	19 0b       	sbc	r17, r25
					break;
    7444:	0b c0       	rjmp	.+22     	; 0x745c <ProcessMixer+0x4be>
    7446:	f3 01       	movw	r30, r6
    7448:	ef 55       	subi	r30, 0x5F	; 95
    744a:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P2_Pitch_acc)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P2_elevator_volume < 0 )
    744c:	80 81       	ld	r24, Z
    744e:	87 ff       	sbrs	r24, 7
    7450:	03 c0       	rjmp	.+6      	; 0x7458 <ProcessMixer+0x4ba>
					{

						P2_solution = P2_solution - PID_ACCs[P2][PITCH];		// Reverse if volume negative
    7452:	08 19       	sub	r16, r8
    7454:	19 09       	sbc	r17, r9
    7456:	02 c0       	rjmp	.+4      	; 0x745c <ProcessMixer+0x4be>
					}
					else
					{
						P2_solution = P2_solution + PID_ACCs[P2][PITCH];
    7458:	08 0d       	add	r16, r8
    745a:	19 1d       	adc	r17, r9
    745c:	f3 01       	movw	r30, r6
    745e:	e1 55       	subi	r30, 0x51	; 81
    7460:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				default:
					break;
			}

			switch (Config.Channel[i].P2_Z_delta_acc)
    7462:	80 81       	ld	r24, Z
    7464:	81 30       	cpi	r24, 0x01	; 1
    7466:	89 f0       	breq	.+34     	; 0x748a <ProcessMixer+0x4ec>
    7468:	82 30       	cpi	r24, 0x02	; 2
    746a:	f1 f4       	brne	.+60     	; 0x74a8 <ProcessMixer+0x50a>
    746c:	f3 01       	movw	r30, r6
    746e:	e4 56       	subi	r30, 0x64	; 100
    7470:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P2_solution = P2_solution - PID_ACCs[P2][YAW];
					}
					break;
				case SCALE:
					P2_solution = P2_solution - scale32(PID_ACCs[P2][YAW], Config.Channel[i].P2_throttle_volume * 5);
    7472:	60 81       	ld	r22, Z
    7474:	55 e0       	ldi	r21, 0x05	; 5
    7476:	65 02       	muls	r22, r21
    7478:	b0 01       	movw	r22, r0
    747a:	11 24       	eor	r1, r1
    747c:	8d a5       	ldd	r24, Y+45	; 0x2d
    747e:	9e a5       	ldd	r25, Y+46	; 0x2e
    7480:	0e 94 ac 37 	call	0x6f58	; 0x6f58 <scale32>
    7484:	08 1b       	sub	r16, r24
    7486:	19 0b       	sbc	r17, r25
					break;
    7488:	0f c0       	rjmp	.+30     	; 0x74a8 <ProcessMixer+0x50a>
    748a:	f3 01       	movw	r30, r6
    748c:	e4 56       	subi	r30, 0x64	; 100
    748e:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P2_Z_delta_acc)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P2_throttle_volume < 0 )
    7490:	80 81       	ld	r24, Z
    7492:	87 ff       	sbrs	r24, 7
    7494:	05 c0       	rjmp	.+10     	; 0x74a0 <ProcessMixer+0x502>
					{
						P2_solution = P2_solution + PID_ACCs[P2][YAW];			// Reverse if volume negative
    7496:	2d a5       	ldd	r18, Y+45	; 0x2d
    7498:	3e a5       	ldd	r19, Y+46	; 0x2e
    749a:	02 0f       	add	r16, r18
    749c:	13 1f       	adc	r17, r19
    749e:	04 c0       	rjmp	.+8      	; 0x74a8 <ProcessMixer+0x50a>
					}
					else
					{
						P2_solution = P2_solution - PID_ACCs[P2][YAW];
    74a0:	4d a5       	ldd	r20, Y+45	; 0x2d
    74a2:	5e a5       	ldd	r21, Y+46	; 0x2e
    74a4:	04 1b       	sub	r16, r20
    74a6:	15 0b       	sbc	r17, r21
		//************************************************************
		// Process mixers
		//************************************************************ 

		// Mix in other outputs here (P1)
		if (Transition_state < TRANS_P2)
    74a8:	2d 8d       	ldd	r18, Y+29	; 0x1d
    74aa:	29 30       	cpi	r18, 0x09	; 9
    74ac:	08 f0       	brcs	.+2      	; 0x74b0 <ProcessMixer+0x512>
    74ae:	8d c0       	rjmp	.+282    	; 0x75ca <ProcessMixer+0x62c>
    74b0:	a6 01       	movw	r20, r12
    74b2:	4f 55       	subi	r20, 0x5F	; 95
    74b4:	5a 4f       	sbci	r21, 0xFA	; 250
    74b6:	3a 01       	movw	r6, r20
    74b8:	fa 01       	movw	r30, r20
    74ba:	e2 56       	subi	r30, 0x62	; 98
    74bc:	ff 4f       	sbci	r31, 0xFF	; 255
		{
			// Mix in dedicated RC sources - aileron, elevator and rudder
			if (Config.Channel[i].P1_aileron_volume !=0) 					// Mix in dedicated aileron
    74be:	60 81       	ld	r22, Z
    74c0:	66 23       	and	r22, r22
    74c2:	59 f0       	breq	.+22     	; 0x74da <ProcessMixer+0x53c>
			{
				temp2 = scale32(RCinputs[AILERON], Config.Channel[i].P1_aileron_volume);
    74c4:	80 91 1d 08 	lds	r24, 0x081D
    74c8:	90 91 1e 08 	lds	r25, 0x081E
    74cc:	77 27       	eor	r23, r23
    74ce:	67 fd       	sbrc	r22, 7
    74d0:	70 95       	com	r23
    74d2:	0e 94 ac 37 	call	0x6f58	; 0x6f58 <scale32>
				P1_solution = P1_solution + temp2;
    74d6:	e8 0e       	add	r14, r24
    74d8:	f9 1e       	adc	r15, r25
    74da:	f3 01       	movw	r30, r6
    74dc:	e0 56       	subi	r30, 0x60	; 96
    74de:	ff 4f       	sbci	r31, 0xFF	; 255
			}
			if (Config.Channel[i].P1_elevator_volume !=0) 					// Mix in dedicated elevator
    74e0:	60 81       	ld	r22, Z
    74e2:	66 23       	and	r22, r22
    74e4:	59 f0       	breq	.+22     	; 0x74fc <ProcessMixer+0x55e>
			{
				temp2 = scale32(RCinputs[ELEVATOR], Config.Channel[i].P1_elevator_volume);
    74e6:	80 91 1f 08 	lds	r24, 0x081F
    74ea:	90 91 20 08 	lds	r25, 0x0820
    74ee:	77 27       	eor	r23, r23
    74f0:	67 fd       	sbrc	r22, 7
    74f2:	70 95       	com	r23
    74f4:	0e 94 ac 37 	call	0x6f58	; 0x6f58 <scale32>
				P1_solution = P1_solution + temp2;
    74f8:	e8 0e       	add	r14, r24
    74fa:	f9 1e       	adc	r15, r25
    74fc:	f3 01       	movw	r30, r6
    74fe:	ee 55       	subi	r30, 0x5E	; 94
    7500:	ff 4f       	sbci	r31, 0xFF	; 255
			}
			if (Config.Channel[i].P1_rudder_volume !=0) 					// Mix in dedicated rudder
    7502:	60 81       	ld	r22, Z
    7504:	66 23       	and	r22, r22
    7506:	59 f0       	breq	.+22     	; 0x751e <ProcessMixer+0x580>
			{
				temp2 = scale32(RCinputs[RUDDER], Config.Channel[i].P1_rudder_volume);
    7508:	80 91 21 08 	lds	r24, 0x0821
    750c:	90 91 22 08 	lds	r25, 0x0822
    7510:	77 27       	eor	r23, r23
    7512:	67 fd       	sbrc	r22, 7
    7514:	70 95       	com	r23
    7516:	0e 94 ac 37 	call	0x6f58	; 0x6f58 <scale32>
				P1_solution = P1_solution + temp2;
    751a:	e8 0e       	add	r14, r24
    751c:	f9 1e       	adc	r15, r25
    751e:	f3 01       	movw	r30, r6
    7520:	ef 54       	subi	r30, 0x4F	; 79
    7522:	ff 4f       	sbci	r31, 0xFF	; 255
			}

			// Other sources
			if ((Config.Channel[i].P1_source_a_volume !=0) && (Config.Channel[i].P1_source_a != NOMIX)) // Mix in first extra source
    7524:	60 81       	ld	r22, Z
    7526:	66 23       	and	r22, r22
    7528:	19 f1       	breq	.+70     	; 0x7570 <ProcessMixer+0x5d2>
    752a:	31 97       	sbiw	r30, 0x01	; 1
    752c:	80 81       	ld	r24, Z
    752e:	8f 30       	cpi	r24, 0x0F	; 15
    7530:	f9 f0       	breq	.+62     	; 0x7570 <ProcessMixer+0x5d2>
    7532:	e8 2f       	mov	r30, r24
    7534:	ff 27       	eor	r31, r31
    7536:	e7 fd       	sbrc	r30, 7
    7538:	f0 95       	com	r31
			{
				// Is the source a sensor?
				if (Config.Channel[i].P1_source_a > (MAX_RC_CHANNELS - 1))
    753a:	88 30       	cpi	r24, 0x08	; 8
    753c:	64 f0       	brlt	.+24     	; 0x7556 <ProcessMixer+0x5b8>
				{
					temp2 = SensorDataP1[Config.Channel[i].P1_source_a - EXT_SOURCE];
    753e:	38 97       	sbiw	r30, 0x08	; 8
    7540:	ee 0f       	add	r30, r30
    7542:	ff 1f       	adc	r31, r31
    7544:	81 e0       	ldi	r24, 0x01	; 1
    7546:	90 e0       	ldi	r25, 0x00	; 0
    7548:	8c 0f       	add	r24, r28
    754a:	9d 1f       	adc	r25, r29
    754c:	e8 0f       	add	r30, r24
    754e:	f9 1f       	adc	r31, r25
    7550:	86 85       	ldd	r24, Z+14	; 0x0e
    7552:	97 85       	ldd	r25, Z+15	; 0x0f
    7554:	06 c0       	rjmp	.+12     	; 0x7562 <ProcessMixer+0x5c4>
				}
				// Is the source an RC input?
				else
				{
					// Yes, calculate RC channel number from source number and return RC value
					temp2 = RCinputs[Config.Channel[i].P1_source_a];
    7556:	ee 0f       	add	r30, r30
    7558:	ff 1f       	adc	r31, r31
    755a:	e5 5e       	subi	r30, 0xE5	; 229
    755c:	f7 4f       	sbci	r31, 0xF7	; 247
    755e:	80 81       	ld	r24, Z
    7560:	91 81       	ldd	r25, Z+1	; 0x01
				}

				temp2 = scale32(temp2, Config.Channel[i].P1_source_a_volume);
    7562:	77 27       	eor	r23, r23
    7564:	67 fd       	sbrc	r22, 7
    7566:	70 95       	com	r23
    7568:	0e 94 ac 37 	call	0x6f58	; 0x6f58 <scale32>
				P1_solution = P1_solution + temp2;
    756c:	e8 0e       	add	r14, r24
    756e:	f9 1e       	adc	r15, r25
    7570:	f3 01       	movw	r30, r6
    7572:	eb 54       	subi	r30, 0x4B	; 75
    7574:	ff 4f       	sbci	r31, 0xFF	; 255
			}
			if ((Config.Channel[i].P1_source_b_volume !=0) && (Config.Channel[i].P1_source_b != NOMIX)) // Mix in second extra source
    7576:	60 81       	ld	r22, Z
    7578:	66 23       	and	r22, r22
    757a:	19 f1       	breq	.+70     	; 0x75c2 <ProcessMixer+0x624>
    757c:	31 97       	sbiw	r30, 0x01	; 1
    757e:	80 81       	ld	r24, Z
    7580:	8f 30       	cpi	r24, 0x0F	; 15
    7582:	f9 f0       	breq	.+62     	; 0x75c2 <ProcessMixer+0x624>
    7584:	e8 2f       	mov	r30, r24
    7586:	ff 27       	eor	r31, r31
    7588:	e7 fd       	sbrc	r30, 7
    758a:	f0 95       	com	r31
			{
				// Is the source a sensor?
				if (Config.Channel[i].P1_source_b > (MAX_RC_CHANNELS - 1))
    758c:	88 30       	cpi	r24, 0x08	; 8
    758e:	64 f0       	brlt	.+24     	; 0x75a8 <ProcessMixer+0x60a>
				{
					temp2 = SensorDataP1[Config.Channel[i].P1_source_b - EXT_SOURCE];
    7590:	38 97       	sbiw	r30, 0x08	; 8
    7592:	ee 0f       	add	r30, r30
    7594:	ff 1f       	adc	r31, r31
    7596:	a1 e0       	ldi	r26, 0x01	; 1
    7598:	b0 e0       	ldi	r27, 0x00	; 0
    759a:	ac 0f       	add	r26, r28
    759c:	bd 1f       	adc	r27, r29
    759e:	ea 0f       	add	r30, r26
    75a0:	fb 1f       	adc	r31, r27
    75a2:	86 85       	ldd	r24, Z+14	; 0x0e
    75a4:	97 85       	ldd	r25, Z+15	; 0x0f
    75a6:	06 c0       	rjmp	.+12     	; 0x75b4 <ProcessMixer+0x616>
				}
				// Is the source an RC input?
				else
				{
					temp2 = RCinputs[Config.Channel[i].P1_source_b];
    75a8:	ee 0f       	add	r30, r30
    75aa:	ff 1f       	adc	r31, r31
    75ac:	e5 5e       	subi	r30, 0xE5	; 229
    75ae:	f7 4f       	sbci	r31, 0xF7	; 247
    75b0:	80 81       	ld	r24, Z
    75b2:	91 81       	ldd	r25, Z+1	; 0x01
				}

				temp2 = scale32(temp2, Config.Channel[i].P1_source_b_volume);
    75b4:	77 27       	eor	r23, r23
    75b6:	67 fd       	sbrc	r22, 7
    75b8:	70 95       	com	r23
    75ba:	0e 94 ac 37 	call	0x6f58	; 0x6f58 <scale32>
				P1_solution = P1_solution + temp2;
    75be:	e8 0e       	add	r14, r24
    75c0:	f9 1e       	adc	r15, r25
			}
		}

		// Mix in other outputs here (P2)
		if (Transition_state > TRANS_P1)	
    75c2:	2d 8d       	ldd	r18, Y+29	; 0x1d
    75c4:	22 23       	and	r18, r18
    75c6:	09 f4       	brne	.+2      	; 0x75ca <ProcessMixer+0x62c>
    75c8:	85 c0       	rjmp	.+266    	; 0x76d4 <ProcessMixer+0x736>
    75ca:	a6 01       	movw	r20, r12
    75cc:	4f 55       	subi	r20, 0x5F	; 95
    75ce:	5a 4f       	sbci	r21, 0xFA	; 250
    75d0:	3a 01       	movw	r6, r20
    75d2:	fa 01       	movw	r30, r20
    75d4:	e1 56       	subi	r30, 0x61	; 97
    75d6:	ff 4f       	sbci	r31, 0xFF	; 255
		{
			// Mix in dedicated RC sources - aileron, elevator and rudder
			if (Config.Channel[i].P2_aileron_volume !=0) 					// Mix in dedicated aileron
    75d8:	60 81       	ld	r22, Z
    75da:	66 23       	and	r22, r22
    75dc:	59 f0       	breq	.+22     	; 0x75f4 <ProcessMixer+0x656>
			{
				temp2 = scale32(RCinputs[AILERON], Config.Channel[i].P2_aileron_volume);
    75de:	80 91 1d 08 	lds	r24, 0x081D
    75e2:	90 91 1e 08 	lds	r25, 0x081E
    75e6:	77 27       	eor	r23, r23
    75e8:	67 fd       	sbrc	r22, 7
    75ea:	70 95       	com	r23
    75ec:	0e 94 ac 37 	call	0x6f58	; 0x6f58 <scale32>
				P2_solution = P2_solution + temp2;
    75f0:	08 0f       	add	r16, r24
    75f2:	19 1f       	adc	r17, r25
    75f4:	f3 01       	movw	r30, r6
    75f6:	ef 55       	subi	r30, 0x5F	; 95
    75f8:	ff 4f       	sbci	r31, 0xFF	; 255
			}
			if (Config.Channel[i].P2_elevator_volume !=0) 					// Mix in dedicated elevator
    75fa:	60 81       	ld	r22, Z
    75fc:	66 23       	and	r22, r22
    75fe:	59 f0       	breq	.+22     	; 0x7616 <ProcessMixer+0x678>
			{
				temp2 = scale32(RCinputs[ELEVATOR], Config.Channel[i].P2_elevator_volume);
    7600:	80 91 1f 08 	lds	r24, 0x081F
    7604:	90 91 20 08 	lds	r25, 0x0820
    7608:	77 27       	eor	r23, r23
    760a:	67 fd       	sbrc	r22, 7
    760c:	70 95       	com	r23
    760e:	0e 94 ac 37 	call	0x6f58	; 0x6f58 <scale32>
				P2_solution = P2_solution + temp2;
    7612:	08 0f       	add	r16, r24
    7614:	19 1f       	adc	r17, r25
    7616:	f3 01       	movw	r30, r6
    7618:	ed 55       	subi	r30, 0x5D	; 93
    761a:	ff 4f       	sbci	r31, 0xFF	; 255
			}
			if (Config.Channel[i].P2_rudder_volume !=0) 					// Mix in dedicated rudder
    761c:	60 81       	ld	r22, Z
    761e:	66 23       	and	r22, r22
    7620:	59 f0       	breq	.+22     	; 0x7638 <ProcessMixer+0x69a>
			{
				temp2 = scale32(RCinputs[RUDDER], Config.Channel[i].P2_rudder_volume);
    7622:	80 91 21 08 	lds	r24, 0x0821
    7626:	90 91 22 08 	lds	r25, 0x0822
    762a:	77 27       	eor	r23, r23
    762c:	67 fd       	sbrc	r22, 7
    762e:	70 95       	com	r23
    7630:	0e 94 ac 37 	call	0x6f58	; 0x6f58 <scale32>
				P2_solution = P2_solution + temp2;
    7634:	08 0f       	add	r16, r24
    7636:	19 1f       	adc	r17, r25
    7638:	f3 01       	movw	r30, r6
    763a:	ed 54       	subi	r30, 0x4D	; 77
    763c:	ff 4f       	sbci	r31, 0xFF	; 255
			}

			// Other sources
			if ((Config.Channel[i].P2_source_a_volume !=0) && (Config.Channel[i].P2_source_a != NOMIX)) // Mix in first extra source
    763e:	60 81       	ld	r22, Z
    7640:	66 23       	and	r22, r22
    7642:	09 f1       	breq	.+66     	; 0x7686 <ProcessMixer+0x6e8>
    7644:	31 97       	sbiw	r30, 0x01	; 1
    7646:	80 81       	ld	r24, Z
    7648:	8f 30       	cpi	r24, 0x0F	; 15
    764a:	e9 f0       	breq	.+58     	; 0x7686 <ProcessMixer+0x6e8>
    764c:	e8 2f       	mov	r30, r24
    764e:	ff 27       	eor	r31, r31
    7650:	e7 fd       	sbrc	r30, 7
    7652:	f0 95       	com	r31
			{
				// Is the source a sensor?
				if (Config.Channel[i].P2_source_a > (MAX_RC_CHANNELS - 1))
    7654:	88 30       	cpi	r24, 0x08	; 8
    7656:	54 f0       	brlt	.+20     	; 0x766c <ProcessMixer+0x6ce>
				{
					temp2 = SensorDataP2[Config.Channel[i].P2_source_a - EXT_SOURCE];
    7658:	38 97       	sbiw	r30, 0x08	; 8
    765a:	ee 0f       	add	r30, r30
    765c:	ff 1f       	adc	r31, r31
    765e:	81 e0       	ldi	r24, 0x01	; 1
    7660:	90 e0       	ldi	r25, 0x00	; 0
    7662:	8c 0f       	add	r24, r28
    7664:	9d 1f       	adc	r25, r29
    7666:	e8 0f       	add	r30, r24
    7668:	f9 1f       	adc	r31, r25
    766a:	04 c0       	rjmp	.+8      	; 0x7674 <ProcessMixer+0x6d6>
				}
				// Is the source an RC input?
				else 
				{
					temp2 = RCinputs[Config.Channel[i].P2_source_a];
    766c:	ee 0f       	add	r30, r30
    766e:	ff 1f       	adc	r31, r31
    7670:	e5 5e       	subi	r30, 0xE5	; 229
    7672:	f7 4f       	sbci	r31, 0xF7	; 247
    7674:	80 81       	ld	r24, Z
    7676:	91 81       	ldd	r25, Z+1	; 0x01
				}

				temp2 = scale32(temp2, Config.Channel[i].P2_source_a_volume);
    7678:	77 27       	eor	r23, r23
    767a:	67 fd       	sbrc	r22, 7
    767c:	70 95       	com	r23
    767e:	0e 94 ac 37 	call	0x6f58	; 0x6f58 <scale32>
				P2_solution = P2_solution + temp2;
    7682:	08 0f       	add	r16, r24
    7684:	19 1f       	adc	r17, r25
    7686:	f3 01       	movw	r30, r6
    7688:	e9 54       	subi	r30, 0x49	; 73
    768a:	ff 4f       	sbci	r31, 0xFF	; 255
			}
			if ((Config.Channel[i].P2_source_b_volume !=0) && (Config.Channel[i].P2_source_b != NOMIX)) // Mix in second extra source
    768c:	60 81       	ld	r22, Z
    768e:	66 23       	and	r22, r22
    7690:	09 f1       	breq	.+66     	; 0x76d4 <ProcessMixer+0x736>
    7692:	31 97       	sbiw	r30, 0x01	; 1
    7694:	80 81       	ld	r24, Z
    7696:	8f 30       	cpi	r24, 0x0F	; 15
    7698:	e9 f0       	breq	.+58     	; 0x76d4 <ProcessMixer+0x736>
    769a:	e8 2f       	mov	r30, r24
    769c:	ff 27       	eor	r31, r31
    769e:	e7 fd       	sbrc	r30, 7
    76a0:	f0 95       	com	r31
			{
				// Is the source a sensor?
				if (Config.Channel[i].P2_source_b > (MAX_RC_CHANNELS - 1))
    76a2:	88 30       	cpi	r24, 0x08	; 8
    76a4:	54 f0       	brlt	.+20     	; 0x76ba <ProcessMixer+0x71c>
				{
					temp2 = SensorDataP2[Config.Channel[i].P2_source_b - EXT_SOURCE];
    76a6:	38 97       	sbiw	r30, 0x08	; 8
    76a8:	ee 0f       	add	r30, r30
    76aa:	ff 1f       	adc	r31, r31
    76ac:	a1 e0       	ldi	r26, 0x01	; 1
    76ae:	b0 e0       	ldi	r27, 0x00	; 0
    76b0:	ac 0f       	add	r26, r28
    76b2:	bd 1f       	adc	r27, r29
    76b4:	ea 0f       	add	r30, r26
    76b6:	fb 1f       	adc	r31, r27
    76b8:	04 c0       	rjmp	.+8      	; 0x76c2 <ProcessMixer+0x724>
				}
				// Is the source an RC input?
				else
				{
					temp2 = RCinputs[Config.Channel[i].P2_source_b];
    76ba:	ee 0f       	add	r30, r30
    76bc:	ff 1f       	adc	r31, r31
    76be:	e5 5e       	subi	r30, 0xE5	; 229
    76c0:	f7 4f       	sbci	r31, 0xF7	; 247
    76c2:	80 81       	ld	r24, Z
    76c4:	91 81       	ldd	r25, Z+1	; 0x01
				}

				temp2 = scale32(temp2, Config.Channel[i].P2_source_b_volume);
    76c6:	77 27       	eor	r23, r23
    76c8:	67 fd       	sbrc	r22, 7
    76ca:	70 95       	com	r23
    76cc:	0e 94 ac 37 	call	0x6f58	; 0x6f58 <scale32>
				P2_solution = P2_solution + temp2;
    76d0:	08 0f       	add	r16, r24
    76d2:	19 1f       	adc	r17, r25
    76d4:	c6 01       	movw	r24, r12
    76d6:	8f 55       	subi	r24, 0x5F	; 95
    76d8:	9a 4f       	sbci	r25, 0xFA	; 250
    76da:	fc 01       	movw	r30, r24
    76dc:	ee 56       	subi	r30, 0x6E	; 110
    76de:	ff 4f       	sbci	r31, 0xFF	; 255
			}
		}
			
		// Save solution for this channel. Note that this contains cross-mixed data from the *last* cycle
		Config.Channel[i].P1_value = P1_solution;
    76e0:	f1 82       	std	Z+1, r15	; 0x01
    76e2:	e0 82       	st	Z, r14
    76e4:	32 96       	adiw	r30, 0x02	; 2
		Config.Channel[i].P2_value = P2_solution;
    76e6:	11 83       	std	Z+1, r17	; 0x01
    76e8:	00 83       	st	Z, r16
    76ea:	b6 e2       	ldi	r27, 0x26	; 38
    76ec:	cb 0e       	add	r12, r27
    76ee:	d1 1c       	adc	r13, r1

	//************************************************************
	// Main mix loop - sensors, RC inputs and other channels
	//************************************************************

	for (i = 0; i < MIX_OUTPUTS; i++)
    76f0:	e0 e3       	ldi	r30, 0x30	; 48
    76f2:	ce 16       	cp	r12, r30
    76f4:	e1 e0       	ldi	r30, 0x01	; 1
    76f6:	de 06       	cpc	r13, r30
    76f8:	09 f0       	breq	.+2      	; 0x76fc <ProcessMixer+0x75e>
    76fa:	f8 cc       	rjmp	.-1552   	; 0x70ec <ProcessMixer+0x14e>
	//************************************************************
	// Mixer transition code
	//************************************************************ 

	// Convert number to percentage (0 to 100%)
	if (Config.TransitionSpeed != 0) 
    76fc:	80 91 cf 05 	lds	r24, 0x05CF
    7700:	88 23       	and	r24, r24
    7702:	41 f0       	breq	.+16     	; 0x7714 <ProcessMixer+0x776>
	{
		// transition_counter counts from 0 to 100 (101 steps)
		transition = transition_counter;
    7704:	80 91 1a 05 	lds	r24, 0x051A
    7708:	90 91 1b 05 	lds	r25, 0x051B
    770c:	90 93 18 05 	sts	0x0518, r25
    7710:	80 93 17 05 	sts	0x0517, r24

	// Recalculate P1 values based on transition stage
	for (i = 0; i < MIX_OUTPUTS; i++)
	{
		// Speed up the easy ones :)
		if (transition == 0)
    7714:	00 91 17 05 	lds	r16, 0x0517
    7718:	10 91 18 05 	lds	r17, 0x0518
		}
		else
		{
			// Get source channel value
			temp1 = Config.Channel[i].P1_value;
			temp1 = scale32(temp1, (100 - transition));
    771c:	b4 e6       	ldi	r27, 0x64	; 100
    771e:	cb 2e       	mov	r12, r27
    7720:	d1 2c       	mov	r13, r1
    7722:	c0 1a       	sub	r12, r16
    7724:	d1 0a       	sbc	r13, r17
    7726:	83 e3       	ldi	r24, 0x33	; 51
    7728:	e8 2e       	mov	r14, r24
    772a:	86 e0       	ldi	r24, 0x06	; 6
    772c:	f8 2e       	mov	r15, r24

	// Recalculate P1 values based on transition stage
	for (i = 0; i < MIX_OUTPUTS; i++)
	{
		// Speed up the easy ones :)
		if (transition == 0)
    772e:	01 15       	cp	r16, r1
    7730:	11 05       	cpc	r17, r1
    7732:	21 f4       	brne	.+8      	; 0x773c <ProcessMixer+0x79e>
		{
			temp1 = Config.Channel[i].P1_value;
    7734:	d7 01       	movw	r26, r14
    7736:	8d 91       	ld	r24, X+
    7738:	9c 91       	ld	r25, X
    773a:	16 c0       	rjmp	.+44     	; 0x7768 <ProcessMixer+0x7ca>
		}
		else if (transition >= 100)
    773c:	04 36       	cpi	r16, 0x64	; 100
    773e:	11 05       	cpc	r17, r1
    7740:	24 f0       	brlt	.+8      	; 0x774a <ProcessMixer+0x7ac>
		{
			temp1 = Config.Channel[i].P2_value;
    7742:	f7 01       	movw	r30, r14
    7744:	82 81       	ldd	r24, Z+2	; 0x02
    7746:	93 81       	ldd	r25, Z+3	; 0x03
    7748:	0f c0       	rjmp	.+30     	; 0x7768 <ProcessMixer+0x7ca>
		}
		else
		{
			// Get source channel value
			temp1 = Config.Channel[i].P1_value;
			temp1 = scale32(temp1, (100 - transition));
    774a:	b6 01       	movw	r22, r12
    774c:	d7 01       	movw	r26, r14
    774e:	8d 91       	ld	r24, X+
    7750:	9c 91       	ld	r25, X
    7752:	0e 94 ac 37 	call	0x6f58	; 0x6f58 <scale32>
    7756:	5c 01       	movw	r10, r24

			// Get destination channel value
			temp2 = Config.Channel[i].P2_value;
			temp2 = scale32(temp2, transition);
    7758:	b8 01       	movw	r22, r16
    775a:	f7 01       	movw	r30, r14
    775c:	82 81       	ldd	r24, Z+2	; 0x02
    775e:	93 81       	ldd	r25, Z+3	; 0x03
    7760:	0e 94 ac 37 	call	0x6f58	; 0x6f58 <scale32>

			// Sum the mixers
			temp1 = temp1 + temp2;
    7764:	8a 0d       	add	r24, r10
    7766:	9b 1d       	adc	r25, r11
		}
		// Save transitioned solution into P1
		Config.Channel[i].P1_value = temp1;
    7768:	d7 01       	movw	r26, r14
    776a:	8d 93       	st	X+, r24
    776c:	9c 93       	st	X, r25
    776e:	b6 e2       	ldi	r27, 0x26	; 38
    7770:	eb 0e       	add	r14, r27
    7772:	f1 1c       	adc	r15, r1
		// transition_counter counts from 0 to 100 (101 steps)
		transition = transition_counter;
	}

	// Recalculate P1 values based on transition stage
	for (i = 0; i < MIX_OUTPUTS; i++)
    7774:	e3 e6       	ldi	r30, 0x63	; 99
    7776:	ee 16       	cp	r14, r30
    7778:	e7 e0       	ldi	r30, 0x07	; 7
    777a:	fe 06       	cpc	r15, r30
    777c:	c1 f6       	brne	.-80     	; 0x772e <ProcessMixer+0x790>
    777e:	6d e3       	ldi	r22, 0x3D	; 61
    7780:	c6 2e       	mov	r12, r22
    7782:	66 e0       	ldi	r22, 0x06	; 6
    7784:	d6 2e       	mov	r13, r22
    7786:	7e e3       	ldi	r23, 0x3E	; 62
    7788:	87 2e       	mov	r8, r23
    778a:	76 e0       	ldi	r23, 0x06	; 6
    778c:	97 2e       	mov	r9, r23
    778e:	e3 e3       	ldi	r30, 0x33	; 51
    7790:	ee 2e       	mov	r14, r30
    7792:	e6 e0       	ldi	r30, 0x06	; 6
    7794:	fe 2e       	mov	r15, r30
			if (Config.Channel[i].P1_throttle_volume != Config.Channel[i].P2_throttle_volume)
			{
				// Calculate step difference in 1/100ths and round
				temp1 = (Config.Channel[i].P2_throttle_volume - Config.Channel[i].P1_throttle_volume);
				temp1 = temp1 << 7; 						// Multiply by 128 so divide gives reasonable step values
				Step1 = temp1 / 100;	
    7796:	f4 e6       	ldi	r31, 0x64	; 100
    7798:	af 2e       	mov	r10, r31
    779a:	b1 2c       	mov	r11, r1
    779c:	80 2f       	mov	r24, r16
    779e:	99 27       	eor	r25, r25
    77a0:	87 fd       	sbrc	r24, 7
    77a2:	90 95       	com	r25
					}
					// If P2 greater than P1, SINE is the one we want
					else
					{
						// Multiply SQRTSIN[transition] steps (0 to 100)
						temp3 = (int8_t)pgm_read_byte(&SQRTSIN[(int8_t)transition]);
    77a4:	9c 01       	movw	r18, r24
    77a6:	26 51       	subi	r18, 0x16	; 22
    77a8:	36 4e       	sbci	r19, 0xE6	; 230
    77aa:	3e 8f       	std	Y+30, r19	; 0x1e
    77ac:	2d 8f       	std	Y+29, r18	; 0x1d
					// Choose between SQRT SINE and SQRT COSINE
					// If P2 less than P1, COSINE (reverse SINE) is the one we want
					if (Step1 < 0)
					{ 
						// Multiply SQRTSIN[100 - transition] steps (0 to 100)
						temp3 = 100 - (int8_t)pgm_read_byte(&SQRTSIN[100 - (int8_t)transition]);
    77ae:	95 01       	movw	r18, r10
    77b0:	28 1b       	sub	r18, r24
    77b2:	39 0b       	sbc	r19, r25
    77b4:	a9 01       	movw	r20, r18
    77b6:	46 51       	subi	r20, 0x16	; 22
    77b8:	56 4e       	sbci	r21, 0xE6	; 230
    77ba:	58 a3       	std	Y+32, r21	; 0x20
    77bc:	4f 8f       	std	Y+31, r20	; 0x1f
					}
					// If P2 greater than P1, SINE is the one we want
					else
					{
						// Multiply SIN[transition] steps (0 to 100)
						temp3 = (int8_t)pgm_read_byte(&SIN[(int8_t)transition]);
    77be:	dc 01       	movw	r26, r24
    77c0:	a1 5b       	subi	r26, 0xB1	; 177
    77c2:	b5 4e       	sbci	r27, 0xE5	; 229
    77c4:	1d 01       	movw	r2, r26
					// Choose between SINE and COSINE
					// If P2 less than P1, COSINE (reverse SINE) is the one we want
					if (Step1 < 0)
					{ 
						// Multiply SIN[100 - transition] steps (0 to 100)
						temp3 = 100 - (int8_t)pgm_read_byte(&SIN[100 - (int8_t)transition]);
    77c6:	f9 01       	movw	r30, r18
    77c8:	e1 5b       	subi	r30, 0xB1	; 177
    77ca:	f5 4e       	sbci	r31, 0xE5	; 229
    77cc:	2f 01       	movw	r4, r30
		} // No throttle
		
		// No throttles, so clamp to THROTTLEMIN if flagged as a motor
		else if (Config.Channel[i].Motor_marker == MOTOR)
		{
			Config.Channel[i].P1_value = -THROTTLEOFFSET; // 3750-1250 = 2500 = 1.0ms
    77ce:	ae e1       	ldi	r26, 0x1E	; 30
    77d0:	6a 2e       	mov	r6, r26
    77d2:	ab ef       	ldi	r26, 0xFB	; 251
    77d4:	7a 2e       	mov	r7, r26
    77d6:	f6 01       	movw	r30, r12
    77d8:	31 97       	sbiw	r30, 0x01	; 1
	//************************************************************ 

	for (i = 0; i < MIX_OUTPUTS; i++)
	{
		// Ignore if both throttle volumes are 0% (no throttle)
		if 	(!((Config.Channel[i].P1_throttle_volume == 0) && 
    77da:	90 81       	ld	r25, Z
    77dc:	d6 01       	movw	r26, r12
    77de:	8c 91       	ld	r24, X
    77e0:	91 11       	cpse	r25, r1
    77e2:	03 c0       	rjmp	.+6      	; 0x77ea <ProcessMixer+0x84c>
    77e4:	88 23       	and	r24, r24
    77e6:	09 f4       	brne	.+2      	; 0x77ea <ProcessMixer+0x84c>
    77e8:	61 c0       	rjmp	.+194    	; 0x78ac <ProcessMixer+0x90e>
    77ea:	29 2f       	mov	r18, r25
    77ec:	33 27       	eor	r19, r19
    77ee:	27 fd       	sbrc	r18, 7
    77f0:	30 95       	com	r19
			(Config.Channel[i].P2_throttle_volume == 0)))
		{
			// Only process if there is a curve
			if (Config.Channel[i].P1_throttle_volume != Config.Channel[i].P2_throttle_volume)
    77f2:	98 17       	cp	r25, r24
    77f4:	09 f4       	brne	.+2      	; 0x77f8 <ProcessMixer+0x85a>
    77f6:	48 c0       	rjmp	.+144    	; 0x7888 <ProcessMixer+0x8ea>
			{
				// Calculate step difference in 1/100ths and round
				temp1 = (Config.Channel[i].P2_throttle_volume - Config.Channel[i].P1_throttle_volume);
    77f8:	99 27       	eor	r25, r25
    77fa:	87 fd       	sbrc	r24, 7
    77fc:	90 95       	com	r25
    77fe:	82 1b       	sub	r24, r18
    7800:	93 0b       	sbc	r25, r19
				temp1 = temp1 << 7; 						// Multiply by 128 so divide gives reasonable step values
    7802:	96 95       	lsr	r25
    7804:	98 2f       	mov	r25, r24
    7806:	88 27       	eor	r24, r24
    7808:	97 95       	ror	r25
    780a:	87 95       	ror	r24
				Step1 = temp1 / 100;	
    780c:	b5 01       	movw	r22, r10
    780e:	0e 94 12 48 	call	0x9024	; 0x9024 <__divmodhi4>

				// Set start (P1) point
				temp2 = Config.Channel[i].P1_throttle_volume; // Promote to 16 bits
				temp2 = temp2 << 7;
    7812:	36 95       	lsr	r19
    7814:	32 2f       	mov	r19, r18
    7816:	22 27       	eor	r18, r18
    7818:	37 95       	ror	r19
    781a:	27 95       	ror	r18

				// Linear vs. Sinusoidal calculation
				if (Config.Channel[i].Throttle_curve == LINEAR)
    781c:	f4 01       	movw	r30, r8
    781e:	80 81       	ld	r24, Z
    7820:	81 11       	cpse	r24, r1
    7822:	08 c0       	rjmp	.+16     	; 0x7834 <ProcessMixer+0x896>
				{
					// Multiply [transition] steps (0 to 100)
					temp3 = temp2 + (Step1 * transition);
    7824:	60 9f       	mul	r22, r16
    7826:	c0 01       	movw	r24, r0
    7828:	61 9f       	mul	r22, r17
    782a:	90 0d       	add	r25, r0
    782c:	70 9f       	mul	r23, r16
    782e:	90 0d       	add	r25, r0
    7830:	11 24       	eor	r1, r1
    7832:	20 c0       	rjmp	.+64     	; 0x7874 <ProcessMixer+0x8d6>
				}

				// SINE
				else if (Config.Channel[i].Throttle_curve == SINE)
    7834:	81 30       	cpi	r24, 0x01	; 1
    7836:	31 f4       	brne	.+12     	; 0x7844 <ProcessMixer+0x8a6>
				{
					// Choose between SINE and COSINE
					// If P2 less than P1, COSINE (reverse SINE) is the one we want
					if (Step1 < 0)
    7838:	77 ff       	sbrs	r23, 7
    783a:	02 c0       	rjmp	.+4      	; 0x7840 <ProcessMixer+0x8a2>
					{ 
						// Multiply SIN[100 - transition] steps (0 to 100)
						temp3 = 100 - (int8_t)pgm_read_byte(&SIN[100 - (int8_t)transition]);
    783c:	f2 01       	movw	r30, r4
    783e:	06 c0       	rjmp	.+12     	; 0x784c <ProcessMixer+0x8ae>
					}
					// If P2 greater than P1, SINE is the one we want
					else
					{
						// Multiply SIN[transition] steps (0 to 100)
						temp3 = (int8_t)pgm_read_byte(&SIN[(int8_t)transition]);
    7840:	f1 01       	movw	r30, r2
    7842:	0d c0       	rjmp	.+26     	; 0x785e <ProcessMixer+0x8c0>
				// SQRT SINE
				else
				{
					// Choose between SQRT SINE and SQRT COSINE
					// If P2 less than P1, COSINE (reverse SINE) is the one we want
					if (Step1 < 0)
    7844:	77 ff       	sbrs	r23, 7
    7846:	09 c0       	rjmp	.+18     	; 0x785a <ProcessMixer+0x8bc>
					{ 
						// Multiply SQRTSIN[100 - transition] steps (0 to 100)
						temp3 = 100 - (int8_t)pgm_read_byte(&SQRTSIN[100 - (int8_t)transition]);
    7848:	ef 8d       	ldd	r30, Y+31	; 0x1f
    784a:	f8 a1       	ldd	r31, Y+32	; 0x20
    784c:	84 91       	lpm	r24, Z
    784e:	a5 01       	movw	r20, r10
    7850:	48 1b       	sub	r20, r24
    7852:	51 09       	sbc	r21, r1
    7854:	87 fd       	sbrc	r24, 7
    7856:	53 95       	inc	r21
    7858:	06 c0       	rjmp	.+12     	; 0x7866 <ProcessMixer+0x8c8>
					}
					// If P2 greater than P1, SINE is the one we want
					else
					{
						// Multiply SQRTSIN[transition] steps (0 to 100)
						temp3 = (int8_t)pgm_read_byte(&SQRTSIN[(int8_t)transition]);
    785a:	ed 8d       	ldd	r30, Y+29	; 0x1d
    785c:	fe 8d       	ldd	r31, Y+30	; 0x1e
    785e:	44 91       	lpm	r20, Z
    7860:	55 27       	eor	r21, r21
    7862:	47 fd       	sbrc	r20, 7
    7864:	50 95       	com	r21
					}

					// Get SINE% (temp2) of difference in volumes (Step1)
					// Step1 is already in 100ths of the difference * 128
					// temp1 is the start volume * 128
					temp3 = temp2 + (Step1 * temp3);
    7866:	64 9f       	mul	r22, r20
    7868:	c0 01       	movw	r24, r0
    786a:	65 9f       	mul	r22, r21
    786c:	90 0d       	add	r25, r0
    786e:	74 9f       	mul	r23, r20
    7870:	90 0d       	add	r25, r0
    7872:	11 24       	eor	r1, r1
    7874:	82 0f       	add	r24, r18
    7876:	93 1f       	adc	r25, r19
				}

				// Round, then rescale to normal value
				temp3 = temp3 + 64;
    7878:	bc 01       	movw	r22, r24
    787a:	60 5c       	subi	r22, 0xC0	; 192
    787c:	7f 4f       	sbci	r23, 0xFF	; 255
				temp3 = temp3 >> 7;
    787e:	66 0f       	add	r22, r22
    7880:	67 2f       	mov	r22, r23
    7882:	66 1f       	adc	r22, r22
    7884:	77 0b       	sbc	r23, r23
    7886:	01 c0       	rjmp	.+2      	; 0x788a <ProcessMixer+0x8ec>
			
			// No curve
			else
			{
				// Just use the value of P1 volume as there is no curve
				temp3 = Config.Channel[i].P1_throttle_volume; // Promote to 16 bits
    7888:	b9 01       	movw	r22, r18
			}

			// Calculate actual throttle value to the curve
			temp3 = scale32(MonopolarThrottle, temp3);
    788a:	80 91 19 08 	lds	r24, 0x0819
    788e:	90 91 1a 08 	lds	r25, 0x081A
    7892:	0e 94 ac 37 	call	0x6f58	; 0x6f58 <scale32>

			// At this point, the throttle values are 0 to 2500 (+/-150%)
			// Re-scale throttle values back to neutral-centered system values (+/-1250) 
			// and set the minimum throttle point to 1.1ms.
			// A THROTTLEMIN value of 1000 will result in 2750, or 1.1ms
			temp3 = temp3 - THROTTLEMIN;
    7896:	88 5e       	subi	r24, 0xE8	; 232
    7898:	93 40       	sbci	r25, 0x03	; 3

			// Add offset to channel value
			Config.Channel[i].P1_value += temp3;
    789a:	d7 01       	movw	r26, r14
    789c:	2d 91       	ld	r18, X+
    789e:	3c 91       	ld	r19, X
    78a0:	11 97       	sbiw	r26, 0x01	; 1
    78a2:	28 0f       	add	r18, r24
    78a4:	39 1f       	adc	r19, r25
    78a6:	2d 93       	st	X+, r18
    78a8:	3c 93       	st	X, r19
    78aa:	08 c0       	rjmp	.+16     	; 0x78bc <ProcessMixer+0x91e>
    78ac:	f6 01       	movw	r30, r12
    78ae:	36 97       	sbiw	r30, 0x06	; 6

		} // No throttle
		
		// No throttles, so clamp to THROTTLEMIN if flagged as a motor
		else if (Config.Channel[i].Motor_marker == MOTOR)
    78b0:	80 81       	ld	r24, Z
    78b2:	82 30       	cpi	r24, 0x02	; 2
    78b4:	19 f4       	brne	.+6      	; 0x78bc <ProcessMixer+0x91e>
		{
			Config.Channel[i].P1_value = -THROTTLEOFFSET; // 3750-1250 = 2500 = 1.0ms
    78b6:	f7 01       	movw	r30, r14
    78b8:	71 82       	std	Z+1, r7	; 0x01
    78ba:	60 82       	st	Z, r6
    78bc:	f6 e2       	ldi	r31, 0x26	; 38
    78be:	ef 0e       	add	r14, r31
    78c0:	f1 1c       	adc	r15, r1
    78c2:	26 e2       	ldi	r18, 0x26	; 38
    78c4:	c2 0e       	add	r12, r18
    78c6:	d1 1c       	adc	r13, r1
    78c8:	36 e2       	ldi	r19, 0x26	; 38
    78ca:	83 0e       	add	r8, r19
    78cc:	91 1c       	adc	r9, r1
	// Groovy throttle curve handling. Must be after the transition.
	// Uses the transition value, but is not part of the transition
	// mixer. Linear or Sine curve. Reverse Sine done automatically
	//************************************************************ 

	for (i = 0; i < MIX_OUTPUTS; i++)
    78ce:	43 e6       	ldi	r20, 0x63	; 99
    78d0:	e4 16       	cp	r14, r20
    78d2:	47 e0       	ldi	r20, 0x07	; 7
    78d4:	f4 06       	cpc	r15, r20
    78d6:	09 f0       	breq	.+2      	; 0x78da <ProcessMixer+0x93c>
    78d8:	7e cf       	rjmp	.-260    	; 0x77d6 <ProcessMixer+0x838>
    78da:	eb e3       	ldi	r30, 0x3B	; 59
    78dc:	f6 e0       	ldi	r31, 0x06	; 6
    78de:	23 e3       	ldi	r18, 0x33	; 51
    78e0:	36 e0       	ldi	r19, 0x06	; 6
			// Work out distance to cover over stage 2 (P1.n to P2)
			temp2 = Config.Channel[i].P2_offset - Config.Channel[i].P1n_offset;
			temp2 = temp2 << 7;

			// Divide distance into steps
			temp1 = (100 - Config.Channel[i].P1n_position); 
    78e2:	94 e6       	ldi	r25, 0x64	; 100
    78e4:	69 2e       	mov	r6, r25
    78e6:	71 2c       	mov	r7, r1
    78e8:	df 01       	movw	r26, r30
    78ea:	13 97       	sbiw	r26, 0x03	; 3
	//************************************************************ 

	for (i = 0; i < MIX_OUTPUTS; i++)
	{
		// Simplify if all are the same
		if (!((Config.Channel[i].P1_offset == Config.Channel[i].P1n_offset) &&
    78ec:	cc 90       	ld	r12, X
    78ee:	12 96       	adiw	r26, 0x02	; 2
    78f0:	ac 90       	ld	r10, X
    78f2:	50 80       	ld	r5, Z
    78f4:	ca 10       	cpse	r12, r10
    78f6:	03 c0       	rjmp	.+6      	; 0x78fe <ProcessMixer+0x960>
    78f8:	5c 14       	cp	r5, r12
    78fa:	09 f4       	brne	.+2      	; 0x78fe <ProcessMixer+0x960>
    78fc:	53 c0       	rjmp	.+166    	; 0x79a4 <ProcessMixer+0xa06>
		 	 (Config.Channel[i].P2_offset == Config.Channel[i].P1n_offset)))
		{
			// Work out distance to cover over stage 1 (P1 to P1.n)
			temp1 = Config.Channel[i].P1n_offset - Config.Channel[i].P1_offset;
    78fe:	bb 24       	eor	r11, r11
    7900:	a7 fc       	sbrc	r10, 7
    7902:	b0 94       	com	r11
    7904:	dd 24       	eor	r13, r13
    7906:	c7 fc       	sbrc	r12, 7
    7908:	d0 94       	com	r13
    790a:	c5 01       	movw	r24, r10
    790c:	8c 19       	sub	r24, r12
    790e:	9d 09       	sbc	r25, r13
    7910:	df 01       	movw	r26, r30
    7912:	12 97       	sbiw	r26, 0x02	; 2
			temp1 = temp1 << 7; // Multiply by 128 so divide gives reasonable step values

			// Divide distance into steps
			temp2 = Config.Channel[i].P1n_position; 
    7914:	ec 90       	ld	r14, X
    7916:	ff 24       	eor	r15, r15
    7918:	e7 fc       	sbrc	r14, 7
    791a:	f0 94       	com	r15
		if (!((Config.Channel[i].P1_offset == Config.Channel[i].P1n_offset) &&
		 	 (Config.Channel[i].P2_offset == Config.Channel[i].P1n_offset)))
		{
			// Work out distance to cover over stage 1 (P1 to P1.n)
			temp1 = Config.Channel[i].P1n_offset - Config.Channel[i].P1_offset;
			temp1 = temp1 << 7; // Multiply by 128 so divide gives reasonable step values
    791c:	96 95       	lsr	r25
    791e:	98 2f       	mov	r25, r24
    7920:	88 27       	eor	r24, r24
    7922:	97 95       	ror	r25
    7924:	87 95       	ror	r24

			// Divide distance into steps
			temp2 = Config.Channel[i].P1n_position; 
			Step1 = ((temp1 + (temp2 >> 1)) / temp2) ; // Divide and round result
    7926:	a7 01       	movw	r20, r14
    7928:	55 95       	asr	r21
    792a:	47 95       	ror	r20
    792c:	84 0f       	add	r24, r20
    792e:	95 1f       	adc	r25, r21
    7930:	b7 01       	movw	r22, r14
    7932:	0e 94 12 48 	call	0x9024	; 0x9024 <__divmodhi4>
    7936:	4b 01       	movw	r8, r22
		
			// Work out distance to cover over stage 2 (P1.n to P2)
			temp2 = Config.Channel[i].P2_offset - Config.Channel[i].P1n_offset;
    7938:	85 2d       	mov	r24, r5
    793a:	99 27       	eor	r25, r25
    793c:	87 fd       	sbrc	r24, 7
    793e:	90 95       	com	r25
    7940:	8a 19       	sub	r24, r10
    7942:	9b 09       	sbc	r25, r11
			temp2 = temp2 << 7;

			// Divide distance into steps
			temp1 = (100 - Config.Channel[i].P1n_position); 
    7944:	b3 01       	movw	r22, r6
    7946:	6e 19       	sub	r22, r14
    7948:	7f 09       	sbc	r23, r15
			temp2 = Config.Channel[i].P1n_position; 
			Step1 = ((temp1 + (temp2 >> 1)) / temp2) ; // Divide and round result
		
			// Work out distance to cover over stage 2 (P1.n to P2)
			temp2 = Config.Channel[i].P2_offset - Config.Channel[i].P1n_offset;
			temp2 = temp2 << 7;
    794a:	96 95       	lsr	r25
    794c:	98 2f       	mov	r25, r24
    794e:	88 27       	eor	r24, r24
    7950:	97 95       	ror	r25
    7952:	87 95       	ror	r24

			// Divide distance into steps
			temp1 = (100 - Config.Channel[i].P1n_position); 
			Step2 = ((temp2 + (temp1 >> 1)) / temp1) ; // Divide and round result	
    7954:	ab 01       	movw	r20, r22
    7956:	55 95       	asr	r21
    7958:	47 95       	ror	r20
    795a:	84 0f       	add	r24, r20
    795c:	95 1f       	adc	r25, r21
    795e:	0e 94 12 48 	call	0x9024	; 0x9024 <__divmodhi4>

			// Set start (P1) point
			temp3 = Config.Channel[i].P1_offset; // Promote to 16bits
			temp3 = temp3 << 7;
    7962:	d6 94       	lsr	r13
    7964:	dc 2c       	mov	r13, r12
    7966:	cc 24       	eor	r12, r12
    7968:	d7 94       	ror	r13
    796a:	c7 94       	ror	r12

			// Count up transition steps of the appropriate step size
			for (j = 0; j < transition; j++)
    796c:	40 e0       	ldi	r20, 0x00	; 0
    796e:	84 2f       	mov	r24, r20
    7970:	90 e0       	ldi	r25, 0x00	; 0
    7972:	80 17       	cp	r24, r16
    7974:	91 07       	cpc	r25, r17
    7976:	54 f4       	brge	.+20     	; 0x798c <ProcessMixer+0x9ee>
			{
				// If in stage 1 use Step1 size
				if (j < Config.Channel[i].P1n_position)
    7978:	8e 15       	cp	r24, r14
    797a:	9f 05       	cpc	r25, r15
    797c:	1c f4       	brge	.+6      	; 0x7984 <ProcessMixer+0x9e6>
				{
					temp3 += Step1;
    797e:	c8 0c       	add	r12, r8
    7980:	d9 1c       	adc	r13, r9
    7982:	02 c0       	rjmp	.+4      	; 0x7988 <ProcessMixer+0x9ea>
				}
				// If in stage 2 use Step2 size
				else
				{
					temp3 += Step2;
    7984:	c6 0e       	add	r12, r22
    7986:	d7 1e       	adc	r13, r23
			// Set start (P1) point
			temp3 = Config.Channel[i].P1_offset; // Promote to 16bits
			temp3 = temp3 << 7;

			// Count up transition steps of the appropriate step size
			for (j = 0; j < transition; j++)
    7988:	4f 5f       	subi	r20, 0xFF	; 255
    798a:	f1 cf       	rjmp	.-30     	; 0x796e <ProcessMixer+0x9d0>
					temp3 += Step2;
				}
			}

			// Reformat into a system-compatible value
			itemp8 = (int8_t)((temp3 + 64) >> 7);							// Round then divide by 128
    798c:	c6 01       	movw	r24, r12
    798e:	80 5c       	subi	r24, 0xC0	; 192
    7990:	9f 4f       	sbci	r25, 0xFF	; 255
    7992:	88 0f       	add	r24, r24
    7994:	89 2f       	mov	r24, r25
    7996:	88 1f       	adc	r24, r24
    7998:	99 0b       	sbc	r25, r25
int16_t scale_percent_nooffset(int8_t value)
{
	int16_t temp16_1, temp16_2;

	temp16_1 = value; // Promote
	temp16_2 = (temp16_1 * (int16_t)10);
    799a:	5a e0       	ldi	r21, 0x0A	; 10
    799c:	85 02       	muls	r24, r21
    799e:	60 01       	movw	r12, r0
    79a0:	11 24       	eor	r1, r1
				}
			}

			// Reformat into a system-compatible value
			itemp8 = (int8_t)((temp3 + 64) >> 7);							// Round then divide by 128
			P1_solution = scale_percent_nooffset(itemp8);	
    79a2:	05 c0       	rjmp	.+10     	; 0x79ae <ProcessMixer+0xa10>
int16_t scale_percent_nooffset(int8_t value)
{
	int16_t temp16_1, temp16_2;

	temp16_1 = value; // Promote
	temp16_2 = (temp16_1 * (int16_t)10);
    79a4:	85 2d       	mov	r24, r5
    79a6:	9a e0       	ldi	r25, 0x0A	; 10
    79a8:	89 02       	muls	r24, r25
    79aa:	60 01       	movw	r12, r0
    79ac:	11 24       	eor	r1, r1
		{
			P1_solution = scale_percent_nooffset(Config.Channel[i].P1_offset);
		}

		// Add offset to channel value
		Config.Channel[i].P1_value += P1_solution;
    79ae:	d9 01       	movw	r26, r18
    79b0:	4d 91       	ld	r20, X+
    79b2:	5c 91       	ld	r21, X
    79b4:	11 97       	sbiw	r26, 0x01	; 1
    79b6:	4c 0d       	add	r20, r12
    79b8:	5d 1d       	adc	r21, r13
    79ba:	4d 93       	st	X+, r20
    79bc:	5c 93       	st	X, r21
    79be:	2a 5d       	subi	r18, 0xDA	; 218
    79c0:	3f 4f       	sbci	r19, 0xFF	; 255
    79c2:	b6 96       	adiw	r30, 0x26	; 38
	//************************************************************
	// Per-channel 3-point offset needs to be after the transition  
	// loop as it is non-linear, unlike the transition.
	//************************************************************ 

	for (i = 0; i < MIX_OUTPUTS; i++)
    79c4:	b7 e0       	ldi	r27, 0x07	; 7
    79c6:	eb 36       	cpi	r30, 0x6B	; 107
    79c8:	fb 07       	cpc	r31, r27
    79ca:	09 f0       	breq	.+2      	; 0x79ce <ProcessMixer+0xa30>
    79cc:	8d cf       	rjmp	.-230    	; 0x78e8 <ProcessMixer+0x94a>

		// Add offset to channel value
		Config.Channel[i].P1_value += P1_solution;
	}

} // ProcessMixer()
    79ce:	e2 96       	adiw	r28, 0x32	; 50
    79d0:	0f b6       	in	r0, 0x3f	; 63
    79d2:	f8 94       	cli
    79d4:	de bf       	out	0x3e, r29	; 62
    79d6:	0f be       	out	0x3f, r0	; 63
    79d8:	cd bf       	out	0x3d, r28	; 61
    79da:	df 91       	pop	r29
    79dc:	cf 91       	pop	r28
    79de:	1f 91       	pop	r17
    79e0:	0f 91       	pop	r16
    79e2:	ff 90       	pop	r15
    79e4:	ef 90       	pop	r14
    79e6:	df 90       	pop	r13
    79e8:	cf 90       	pop	r12
    79ea:	bf 90       	pop	r11
    79ec:	af 90       	pop	r10
    79ee:	9f 90       	pop	r9
    79f0:	8f 90       	pop	r8
    79f2:	7f 90       	pop	r7
    79f4:	6f 90       	pop	r6
    79f6:	5f 90       	pop	r5
    79f8:	4f 90       	pop	r4
    79fa:	3f 90       	pop	r3
    79fc:	2f 90       	pop	r2
    79fe:	08 95       	ret

00007a00 <scale_percent>:
int16_t scale_percent(int8_t value)
{
	int16_t temp16_1, temp16_2;

	temp16_1 = value; // Promote
	temp16_2 = ((temp16_1 * (int16_t)10) + 3750);
    7a00:	2a e0       	ldi	r18, 0x0A	; 10
    7a02:	82 02       	muls	r24, r18
    7a04:	c0 01       	movw	r24, r0
    7a06:	11 24       	eor	r1, r1

	return temp16_2;
}
    7a08:	8a 55       	subi	r24, 0x5A	; 90
    7a0a:	91 4f       	sbci	r25, 0xF1	; 241
    7a0c:	08 95       	ret

00007a0e <mugui_text_sizestring>:
	\return void
	\date 	12.08.2009
*/
/************************************************************************/
void mugui_text_sizestring(mugui_char_t *s, const unsigned char* font, mugui_size16_t *size)
{
    7a0e:	df 92       	push	r13
    7a10:	ef 92       	push	r14
    7a12:	ff 92       	push	r15
    7a14:	0f 93       	push	r16
    7a16:	1f 93       	push	r17
    7a18:	cf 93       	push	r28
    7a1a:	df 93       	push	r29
	mugui_uint8_t  indexhighbyte = 0; 		//high byte of the bitmap address in the array
	mugui_uint32_t indexaddress = 0;		//bitmap address in the array (derived from low and high byte)

	/* read header of the font          */
	/* pgm_read_byte is ATMega specific */
	length = strlen(s);
    7a1c:	dc 01       	movw	r26, r24
    7a1e:	0d 90       	ld	r0, X+
    7a20:	00 20       	and	r0, r0
    7a22:	e9 f7       	brne	.-6      	; 0x7a1e <mugui_text_sizestring+0x10>
    7a24:	11 97       	sbiw	r26, 0x01	; 1
    7a26:	a8 1b       	sub	r26, r24
    7a28:	b9 0b       	sbc	r27, r25
	height = pgm_read_byte(&font[4]);
    7a2a:	fb 01       	movw	r30, r22
    7a2c:	34 96       	adiw	r30, 0x04	; 4
    7a2e:	e4 90       	lpm	r14, Z
    7a30:	f1 2c       	mov	r15, r1

	startcharacter = pgm_read_byte(&font[2]);
    7a32:	32 97       	sbiw	r30, 0x02	; 2
    7a34:	d4 90       	lpm	r13, Z
    7a36:	ec 01       	movw	r28, r24
    7a38:	a8 0f       	add	r26, r24
    7a3a:	b9 1f       	adc	r27, r25
	mugui_uint8_t  distance = 1;			//distance between characters
	mugui_uint16_t length = 0;				//temporary length of string
	mugui_uint16_t i = 0;					//counter variable
	mugui_uint16_t startcharacter = 0; 	    //startcharacter of the font
	mugui_uint16_t height = 0;				//height of the bitmap
	mugui_uint16_t width = 0; 				//width of the bitmap
    7a3c:	80 e0       	ldi	r24, 0x00	; 0
    7a3e:	90 e0       	ldi	r25, 0x00	; 0
	/* pgm_read_byte is ATMega specific */
	length = strlen(s);
	height = pgm_read_byte(&font[4]);

	startcharacter = pgm_read_byte(&font[2]);
	for(i=0;i<length;i++) //every character in prop fonts has its own width
    7a40:	ca 17       	cp	r28, r26
    7a42:	db 07       	cpc	r29, r27
    7a44:	29 f1       	breq	.+74     	; 0x7a90 <mugui_text_sizestring+0x82>
	{
		index = s[i] - startcharacter;
    7a46:	29 91       	ld	r18, Y+
    7a48:	2d 19       	sub	r18, r13
		indexhighbyte = pgm_read_byte(&font[index*2 + 5]);
    7a4a:	30 e0       	ldi	r19, 0x00	; 0
    7a4c:	22 0f       	add	r18, r18
    7a4e:	33 1f       	adc	r19, r19
    7a50:	f9 01       	movw	r30, r18
    7a52:	35 96       	adiw	r30, 0x05	; 5
    7a54:	e6 0f       	add	r30, r22
    7a56:	f7 1f       	adc	r31, r23
    7a58:	04 91       	lpm	r16, Z
		indexlowbyte = pgm_read_byte(&font[index*2 + 6]);
    7a5a:	f9 01       	movw	r30, r18
    7a5c:	36 96       	adiw	r30, 0x06	; 6
    7a5e:	e6 0f       	add	r30, r22
    7a60:	f7 1f       	adc	r31, r23
    7a62:	e4 91       	lpm	r30, Z
		indexaddress = (mugui_int64_t)indexhighbyte;
    7a64:	10 e0       	ldi	r17, 0x00	; 0
    7a66:	20 e0       	ldi	r18, 0x00	; 0
    7a68:	30 e0       	ldi	r19, 0x00	; 0
		indexaddress = indexaddress << 8;
    7a6a:	32 2f       	mov	r19, r18
    7a6c:	21 2f       	mov	r18, r17
    7a6e:	10 2f       	mov	r17, r16
    7a70:	00 27       	eor	r16, r16
		indexaddress += indexlowbyte;
    7a72:	0e 0f       	add	r16, r30
    7a74:	11 1d       	adc	r17, r1
    7a76:	21 1d       	adc	r18, r1
    7a78:	31 1d       	adc	r19, r1
		width += pgm_read_byte(&font[indexaddress]) + distance;
    7a7a:	fb 01       	movw	r30, r22
    7a7c:	e0 0f       	add	r30, r16
    7a7e:	f1 1f       	adc	r31, r17
    7a80:	04 91       	lpm	r16, Z
    7a82:	20 2f       	mov	r18, r16
    7a84:	30 e0       	ldi	r19, 0x00	; 0
    7a86:	2f 5f       	subi	r18, 0xFF	; 255
    7a88:	3f 4f       	sbci	r19, 0xFF	; 255
    7a8a:	82 0f       	add	r24, r18
    7a8c:	93 1f       	adc	r25, r19
    7a8e:	d8 cf       	rjmp	.-80     	; 0x7a40 <mugui_text_sizestring+0x32>
	}

	/* prepare return value */
	size->x = width;
    7a90:	fa 01       	movw	r30, r20
    7a92:	91 83       	std	Z+1, r25	; 0x01
    7a94:	80 83       	st	Z, r24
	size->y = height;
    7a96:	f3 82       	std	Z+3, r15	; 0x03
    7a98:	e2 82       	std	Z+2, r14	; 0x02
}
    7a9a:	df 91       	pop	r29
    7a9c:	cf 91       	pop	r28
    7a9e:	1f 91       	pop	r17
    7aa0:	0f 91       	pop	r16
    7aa2:	ff 90       	pop	r15
    7aa4:	ef 90       	pop	r14
    7aa6:	df 90       	pop	r13
    7aa8:	08 95       	ret

00007aaa <pgm_mugui_scopy>:
	\date 	30.07.2012
	\Created by D. Thompson
*/
/************************************************************************/
void pgm_mugui_scopy(const char *s)
{
    7aaa:	a3 e5       	ldi	r26, 0x53	; 83
    7aac:	b5 e0       	ldi	r27, 0x05	; 5
	int i = 0;
    7aae:	20 e0       	ldi	r18, 0x00	; 0
    7ab0:	30 e0       	ldi	r19, 0x00	; 0
    7ab2:	fc 01       	movw	r30, r24
    7ab4:	e2 0f       	add	r30, r18
    7ab6:	f3 1f       	adc	r31, r19

	// Copy string until terminator but don't over-write buffer
	while((pgm_read_byte(s) != 0x00) && (i < (PBUFFER_SIZE - 1)))
    7ab8:	44 91       	lpm	r20, Z
    7aba:	44 23       	and	r20, r20
    7abc:	41 f0       	breq	.+16     	; 0x7ace <pgm_mugui_scopy+0x24>
    7abe:	2f 30       	cpi	r18, 0x0F	; 15
    7ac0:	31 05       	cpc	r19, r1
    7ac2:	29 f0       	breq	.+10     	; 0x7ace <pgm_mugui_scopy+0x24>
	{
		pBuffer[i] = pgm_read_byte(s++);
    7ac4:	e4 91       	lpm	r30, Z
    7ac6:	ed 93       	st	X+, r30
		i++;
    7ac8:	2f 5f       	subi	r18, 0xFF	; 255
    7aca:	3f 4f       	sbci	r19, 0xFF	; 255
    7acc:	f2 cf       	rjmp	.-28     	; 0x7ab2 <pgm_mugui_scopy+0x8>
	}
	
	// Add the terminator regardless of the amount copied
	pBuffer[i] = 0x00;
    7ace:	f9 01       	movw	r30, r18
    7ad0:	ed 5a       	subi	r30, 0xAD	; 173
    7ad2:	fa 4f       	sbci	r31, 0xFA	; 250
    7ad4:	10 82       	st	Z, r1
    7ad6:	08 95       	ret

00007ad8 <mugui_lcd_putc>:
	\date 	13.11.2009
	\Modified by D. Thompson 14/08/2012 - Now hard-coded for proportional, type 2 (verticalCeiling)
*/
/************************************************************************/
mugui_uint16_t mugui_lcd_putc(mugui_char_t c, const unsigned char* font,mugui_uint16_t x, mugui_uint16_t y)
{
    7ad8:	2f 92       	push	r2
    7ada:	3f 92       	push	r3
    7adc:	4f 92       	push	r4
    7ade:	5f 92       	push	r5
    7ae0:	6f 92       	push	r6
    7ae2:	7f 92       	push	r7
    7ae4:	8f 92       	push	r8
    7ae6:	9f 92       	push	r9
    7ae8:	af 92       	push	r10
    7aea:	bf 92       	push	r11
    7aec:	cf 92       	push	r12
    7aee:	df 92       	push	r13
    7af0:	ef 92       	push	r14
    7af2:	ff 92       	push	r15
    7af4:	0f 93       	push	r16
    7af6:	1f 93       	push	r17
    7af8:	cf 93       	push	r28
    7afa:	df 93       	push	r29
    7afc:	cd b7       	in	r28, 0x3d	; 61
    7afe:	de b7       	in	r29, 0x3e	; 62
    7b00:	29 97       	sbiw	r28, 0x09	; 9
    7b02:	0f b6       	in	r0, 0x3f	; 63
    7b04:	f8 94       	cli
    7b06:	de bf       	out	0x3e, r29	; 62
    7b08:	0f be       	out	0x3f, r0	; 63
    7b0a:	cd bf       	out	0x3d, r28	; 61
    7b0c:	4c 83       	std	Y+4, r20	; 0x04
    7b0e:	2d 83       	std	Y+5, r18	; 0x05
	mugui_uint8_t  tc= 0;	 				//temorary count
	mugui_uint8_t  bytes= 0;  				//bytes per line or row

	/* Read header of the font          */
	/* pgm_read_byte is ATMega specific */
	startcharacter = pgm_read_byte(&font[2]);
    7b10:	fb 01       	movw	r30, r22
    7b12:	32 96       	adiw	r30, 0x02	; 2
    7b14:	94 91       	lpm	r25, Z
	height = pgm_read_byte(&font[4]);
    7b16:	32 96       	adiw	r30, 0x02	; 2
    7b18:	e4 91       	lpm	r30, Z
    7b1a:	2e 2e       	mov	r2, r30
    7b1c:	31 2c       	mov	r3, r1

	/* Read the rest of the header */
	index = c - startcharacter;
    7b1e:	89 1b       	sub	r24, r25
	indexhighbyte = pgm_read_byte(&font[index*2 + 5]);
    7b20:	90 e0       	ldi	r25, 0x00	; 0
    7b22:	88 0f       	add	r24, r24
    7b24:	99 1f       	adc	r25, r25
    7b26:	fc 01       	movw	r30, r24
    7b28:	35 96       	adiw	r30, 0x05	; 5
    7b2a:	e6 0f       	add	r30, r22
    7b2c:	f7 1f       	adc	r31, r23
    7b2e:	64 90       	lpm	r6, Z
	indexlowbyte = pgm_read_byte(&font[index*2 + 6]);
    7b30:	fc 01       	movw	r30, r24
    7b32:	36 96       	adiw	r30, 0x06	; 6
    7b34:	e6 0f       	add	r30, r22
    7b36:	f7 1f       	adc	r31, r23
    7b38:	84 91       	lpm	r24, Z
	indexaddress = (mugui_int64_t)indexhighbyte;
    7b3a:	06 2d       	mov	r16, r6
    7b3c:	10 e0       	ldi	r17, 0x00	; 0
    7b3e:	20 e0       	ldi	r18, 0x00	; 0
    7b40:	30 e0       	ldi	r19, 0x00	; 0
	indexaddress = indexaddress << 8;
    7b42:	32 2f       	mov	r19, r18
    7b44:	21 2f       	mov	r18, r17
    7b46:	10 2f       	mov	r17, r16
    7b48:	00 27       	eor	r16, r16
	indexaddress += indexlowbyte;
    7b4a:	08 0f       	add	r16, r24
    7b4c:	11 1d       	adc	r17, r1
    7b4e:	21 1d       	adc	r18, r1
    7b50:	31 1d       	adc	r19, r1
	width = pgm_read_byte(&font[indexaddress]);
    7b52:	c8 01       	movw	r24, r16
    7b54:	fb 01       	movw	r30, r22
    7b56:	e0 0f       	add	r30, r16
    7b58:	f1 1f       	adc	r31, r17
    7b5a:	64 90       	lpm	r6, Z
    7b5c:	71 2c       	mov	r7, r1

	/* Determine the number of bytes for given width */ 
	bytes = ((height-1)>>3)+1;
    7b5e:	21 01       	movw	r4, r2
    7b60:	21 e0       	ldi	r18, 0x01	; 1
    7b62:	42 1a       	sub	r4, r18
    7b64:	51 08       	sbc	r5, r1
    7b66:	13 e0       	ldi	r17, 0x03	; 3
    7b68:	56 94       	lsr	r5
    7b6a:	47 94       	ror	r4
    7b6c:	1a 95       	dec	r17
    7b6e:	e1 f7       	brne	.-8      	; 0x7b68 <mugui_lcd_putc+0x90>
    7b70:	43 94       	inc	r4
    7b72:	a4 2d       	mov	r26, r4
    7b74:	b0 e0       	ldi	r27, 0x00	; 0
    7b76:	ba 83       	std	Y+2, r27	; 0x02
    7b78:	a9 83       	std	Y+1, r26	; 0x01
	/* For every column */
	for(tx= 0; tx < width; tx++) //for every row
    7b7a:	a1 2c       	mov	r10, r1
    7b7c:	b1 2c       	mov	r11, r1
    7b7e:	00 e0       	ldi	r16, 0x00	; 0
    7b80:	10 e0       	ldi	r17, 0x00	; 0
    7b82:	4b 01       	movw	r8, r22
    7b84:	bf ef       	ldi	r27, 0xFF	; 255
    7b86:	8b 1a       	sub	r8, r27
    7b88:	9b 0a       	sbc	r9, r27
    7b8a:	88 0e       	add	r8, r24
    7b8c:	99 1e       	adc	r9, r25
    7b8e:	06 15       	cp	r16, r6
    7b90:	17 05       	cpc	r17, r7
    7b92:	08 f0       	brcs	.+2      	; 0x7b96 <mugui_lcd_putc+0xbe>
    7b94:	43 c0       	rjmp	.+134    	; 0x7c1c <mugui_lcd_putc+0x144>
    7b96:	c1 2c       	mov	r12, r1
    7b98:	d1 2c       	mov	r13, r1
    7b9a:	e1 2c       	mov	r14, r1
    7b9c:	f1 2c       	mov	r15, r1
    7b9e:	94 01       	movw	r18, r8
    7ba0:	2a 0d       	add	r18, r10
    7ba2:	3b 1d       	adc	r19, r11
    7ba4:	3f 83       	std	Y+7, r19	; 0x07
    7ba6:	2e 83       	std	Y+6, r18	; 0x06
    7ba8:	5c 80       	ldd	r5, Y+4	; 0x04
    7baa:	50 0e       	add	r5, r16
	{
		ty = 0;
		/* For every byte */
		for(tb = 0; tb < bytes; tb ++)
    7bac:	c4 14       	cp	r12, r4
    7bae:	78 f5       	brcc	.+94     	; 0x7c0e <mugui_lcd_putc+0x136>
    7bb0:	ee 81       	ldd	r30, Y+6	; 0x06
    7bb2:	ff 81       	ldd	r31, Y+7	; 0x07
    7bb4:	ec 0d       	add	r30, r12
    7bb6:	fd 1d       	adc	r31, r13
		{
			/* Read bytes from program memory - ATMega specific */
			data = pgm_read_byte(&font[indexaddress + 1 + bytes*tx + tb]);
    7bb8:	34 91       	lpm	r19, Z
    7bba:	3b 83       	std	Y+3, r19	; 0x03
    7bbc:	19 86       	std	Y+9, r1	; 0x09
    7bbe:	18 86       	std	Y+8, r1	; 0x08
			/* For every bit within the height */
			for(tc = 0;  ( (tc < 8) && (ty < height) ); tc ++)
    7bc0:	e2 14       	cp	r14, r2
    7bc2:	f3 04       	cpc	r15, r3
    7bc4:	00 f5       	brcc	.+64     	; 0x7c06 <mugui_lcd_putc+0x12e>
			{
					/* Determine the bit mask */
					mask = 1<<(tc);
    7bc6:	81 e0       	ldi	r24, 0x01	; 1
    7bc8:	90 e0       	ldi	r25, 0x00	; 0
    7bca:	08 84       	ldd	r0, Y+8	; 0x08
    7bcc:	02 c0       	rjmp	.+4      	; 0x7bd2 <mugui_lcd_putc+0xfa>
    7bce:	88 0f       	add	r24, r24
    7bd0:	99 1f       	adc	r25, r25
    7bd2:	0a 94       	dec	r0
    7bd4:	e2 f7       	brpl	.-8      	; 0x7bce <mugui_lcd_putc+0xf6>
					bit = data & mask;
    7bd6:	3b 81       	ldd	r19, Y+3	; 0x03
    7bd8:	83 23       	and	r24, r19
    7bda:	4d 81       	ldd	r20, Y+5	; 0x05
    7bdc:	4e 0d       	add	r20, r14
					if(bit)
    7bde:	88 23       	and	r24, r24
    7be0:	11 f0       	breq	.+4      	; 0x7be6 <mugui_lcd_putc+0x10e>
					{
						setpixel(buffer,tx+x,ty+y,1);
    7be2:	21 e0       	ldi	r18, 0x01	; 1
    7be4:	01 c0       	rjmp	.+2      	; 0x7be8 <mugui_lcd_putc+0x110>
					}
					else
					{
						setpixel(buffer,tx+x,ty+y,0);
    7be6:	20 e0       	ldi	r18, 0x00	; 0
    7be8:	65 2d       	mov	r22, r5
    7bea:	80 e0       	ldi	r24, 0x00	; 0
    7bec:	91 e0       	ldi	r25, 0x01	; 1
    7bee:	0e 94 5a 20 	call	0x40b4	; 0x40b4 <setpixel>
					}
					ty++;
    7bf2:	8f ef       	ldi	r24, 0xFF	; 255
    7bf4:	e8 1a       	sub	r14, r24
    7bf6:	f8 0a       	sbc	r15, r24
    7bf8:	a8 85       	ldd	r26, Y+8	; 0x08
    7bfa:	b9 85       	ldd	r27, Y+9	; 0x09
    7bfc:	11 96       	adiw	r26, 0x01	; 1
    7bfe:	b9 87       	std	Y+9, r27	; 0x09
    7c00:	a8 87       	std	Y+8, r26	; 0x08
		for(tb = 0; tb < bytes; tb ++)
		{
			/* Read bytes from program memory - ATMega specific */
			data = pgm_read_byte(&font[indexaddress + 1 + bytes*tx + tb]);
			/* For every bit within the height */
			for(tc = 0;  ( (tc < 8) && (ty < height) ); tc ++)
    7c02:	18 97       	sbiw	r26, 0x08	; 8
    7c04:	e9 f6       	brne	.-70     	; 0x7bc0 <mugui_lcd_putc+0xe8>
    7c06:	bf ef       	ldi	r27, 0xFF	; 255
    7c08:	cb 1a       	sub	r12, r27
    7c0a:	db 0a       	sbc	r13, r27
    7c0c:	cf cf       	rjmp	.-98     	; 0x7bac <mugui_lcd_putc+0xd4>
	width = pgm_read_byte(&font[indexaddress]);

	/* Determine the number of bytes for given width */ 
	bytes = ((height-1)>>3)+1;
	/* For every column */
	for(tx= 0; tx < width; tx++) //for every row
    7c0e:	0f 5f       	subi	r16, 0xFF	; 255
    7c10:	1f 4f       	sbci	r17, 0xFF	; 255
    7c12:	e9 81       	ldd	r30, Y+1	; 0x01
    7c14:	fa 81       	ldd	r31, Y+2	; 0x02
    7c16:	ae 0e       	add	r10, r30
    7c18:	bf 1e       	adc	r11, r31
    7c1a:	b9 cf       	rjmp	.-142    	; 0x7b8e <mugui_lcd_putc+0xb6>
			}
		}
	}

	return width;
}
    7c1c:	c3 01       	movw	r24, r6
    7c1e:	29 96       	adiw	r28, 0x09	; 9
    7c20:	0f b6       	in	r0, 0x3f	; 63
    7c22:	f8 94       	cli
    7c24:	de bf       	out	0x3e, r29	; 62
    7c26:	0f be       	out	0x3f, r0	; 63
    7c28:	cd bf       	out	0x3d, r28	; 61
    7c2a:	df 91       	pop	r29
    7c2c:	cf 91       	pop	r28
    7c2e:	1f 91       	pop	r17
    7c30:	0f 91       	pop	r16
    7c32:	ff 90       	pop	r15
    7c34:	ef 90       	pop	r14
    7c36:	df 90       	pop	r13
    7c38:	cf 90       	pop	r12
    7c3a:	bf 90       	pop	r11
    7c3c:	af 90       	pop	r10
    7c3e:	9f 90       	pop	r9
    7c40:	8f 90       	pop	r8
    7c42:	7f 90       	pop	r7
    7c44:	6f 90       	pop	r6
    7c46:	5f 90       	pop	r5
    7c48:	4f 90       	pop	r4
    7c4a:	3f 90       	pop	r3
    7c4c:	2f 90       	pop	r2
    7c4e:	08 95       	ret

00007c50 <pgm_mugui_lcd_puts>:
	\date 	12.08.2009
	\Modified by D. Thompson 27/07/2012
*/
/************************************************************************/
void pgm_mugui_lcd_puts(const unsigned char* s, const unsigned char* font,mugui_uint16_t x, mugui_uint16_t y)
{
    7c50:	af 92       	push	r10
    7c52:	bf 92       	push	r11
    7c54:	cf 92       	push	r12
    7c56:	df 92       	push	r13
    7c58:	ef 92       	push	r14
    7c5a:	ff 92       	push	r15
    7c5c:	0f 93       	push	r16
    7c5e:	1f 93       	push	r17
    7c60:	cf 93       	push	r28
    7c62:	df 93       	push	r29
    7c64:	ec 01       	movw	r28, r24
    7c66:	7b 01       	movw	r14, r22
    7c68:	6a 01       	movw	r12, r20
    7c6a:	59 01       	movw	r10, r18
	mugui_uint8_t distance  = 1;			// Distance between characters
	mugui_uint16_t xpos     = 0;			// Relative xpos of character
    7c6c:	00 e0       	ldi	r16, 0x00	; 0
    7c6e:	10 e0       	ldi	r17, 0x00	; 0

	while(pgm_read_byte(s) != 0x00) 
    7c70:	ce 01       	movw	r24, r28
    7c72:	fe 01       	movw	r30, r28
    7c74:	24 91       	lpm	r18, Z
    7c76:	22 23       	and	r18, r18
    7c78:	71 f0       	breq	.+28     	; 0x7c96 <pgm_mugui_lcd_puts+0x46>
	{
		xpos += mugui_lcd_putc(pgm_read_byte(s++), font, x + xpos, y) + distance;
    7c7a:	21 96       	adiw	r28, 0x01	; 1
    7c7c:	fc 01       	movw	r30, r24
    7c7e:	84 91       	lpm	r24, Z
    7c80:	a8 01       	movw	r20, r16
    7c82:	4c 0d       	add	r20, r12
    7c84:	5d 1d       	adc	r21, r13
    7c86:	95 01       	movw	r18, r10
    7c88:	b7 01       	movw	r22, r14
    7c8a:	0e 94 6c 3d 	call	0x7ad8	; 0x7ad8 <mugui_lcd_putc>
    7c8e:	01 96       	adiw	r24, 0x01	; 1
    7c90:	08 0f       	add	r16, r24
    7c92:	19 1f       	adc	r17, r25
    7c94:	ed cf       	rjmp	.-38     	; 0x7c70 <pgm_mugui_lcd_puts+0x20>
	}
}
    7c96:	df 91       	pop	r29
    7c98:	cf 91       	pop	r28
    7c9a:	1f 91       	pop	r17
    7c9c:	0f 91       	pop	r16
    7c9e:	ff 90       	pop	r15
    7ca0:	ef 90       	pop	r14
    7ca2:	df 90       	pop	r13
    7ca4:	cf 90       	pop	r12
    7ca6:	bf 90       	pop	r11
    7ca8:	af 90       	pop	r10
    7caa:	08 95       	ret

00007cac <mugui_lcd_puts>:
	\return void
	\date 	12.08.2009
*/
/************************************************************************/
void mugui_lcd_puts(mugui_char_t *s, const unsigned char* font,mugui_uint16_t x, mugui_uint16_t y)
{
    7cac:	8f 92       	push	r8
    7cae:	9f 92       	push	r9
    7cb0:	af 92       	push	r10
    7cb2:	bf 92       	push	r11
    7cb4:	cf 92       	push	r12
    7cb6:	df 92       	push	r13
    7cb8:	ef 92       	push	r14
    7cba:	ff 92       	push	r15
    7cbc:	0f 93       	push	r16
    7cbe:	1f 93       	push	r17
    7cc0:	cf 93       	push	r28
    7cc2:	df 93       	push	r29
    7cc4:	6b 01       	movw	r12, r22
    7cc6:	5a 01       	movw	r10, r20
    7cc8:	49 01       	movw	r8, r18
	mugui_uint8_t distance  = 1;			//distance between characters
	mugui_uint16_t xpos     = 0;			//relativ xpos of character
	mugui_uint16_t length 	= 0;			//temporary length of string
	mugui_uint16_t i 		= 0;			//counter variable
	
	length = strlen(s);
    7cca:	ec 01       	movw	r28, r24
    7ccc:	09 90       	ld	r0, Y+
    7cce:	00 20       	and	r0, r0
    7cd0:	e9 f7       	brne	.-6      	; 0x7ccc <mugui_lcd_puts+0x20>
    7cd2:	8c 01       	movw	r16, r24
    7cd4:	21 97       	sbiw	r28, 0x01	; 1
*/
/************************************************************************/
void mugui_lcd_puts(mugui_char_t *s, const unsigned char* font,mugui_uint16_t x, mugui_uint16_t y)
{
	mugui_uint8_t distance  = 1;			//distance between characters
	mugui_uint16_t xpos     = 0;			//relativ xpos of character
    7cd6:	e1 2c       	mov	r14, r1
    7cd8:	f1 2c       	mov	r15, r1
	mugui_uint16_t length 	= 0;			//temporary length of string
	mugui_uint16_t i 		= 0;			//counter variable
	
	length = strlen(s);
	for(i=0; i<length; i++)
    7cda:	0c 17       	cp	r16, r28
    7cdc:	1d 07       	cpc	r17, r29
    7cde:	71 f0       	breq	.+28     	; 0x7cfc <mugui_lcd_puts+0x50>
	{
		xpos += mugui_lcd_putc(s[i], font, x + xpos, y) + distance;
    7ce0:	a7 01       	movw	r20, r14
    7ce2:	4a 0d       	add	r20, r10
    7ce4:	5b 1d       	adc	r21, r11
    7ce6:	94 01       	movw	r18, r8
    7ce8:	b6 01       	movw	r22, r12
    7cea:	f8 01       	movw	r30, r16
    7cec:	81 91       	ld	r24, Z+
    7cee:	8f 01       	movw	r16, r30
    7cf0:	0e 94 6c 3d 	call	0x7ad8	; 0x7ad8 <mugui_lcd_putc>
    7cf4:	01 96       	adiw	r24, 0x01	; 1
    7cf6:	e8 0e       	add	r14, r24
    7cf8:	f9 1e       	adc	r15, r25
    7cfa:	ef cf       	rjmp	.-34     	; 0x7cda <mugui_lcd_puts+0x2e>
	}
}
    7cfc:	df 91       	pop	r29
    7cfe:	cf 91       	pop	r28
    7d00:	1f 91       	pop	r17
    7d02:	0f 91       	pop	r16
    7d04:	ff 90       	pop	r15
    7d06:	ef 90       	pop	r14
    7d08:	df 90       	pop	r13
    7d0a:	cf 90       	pop	r12
    7d0c:	bf 90       	pop	r11
    7d0e:	af 90       	pop	r10
    7d10:	9f 90       	pop	r9
    7d12:	8f 90       	pop	r8
    7d14:	08 95       	ret

00007d16 <Sensor_PID>:
int32_t PID_AvgAccVert = 0;
float 	gyroSmooth[NUMBEROFAXIS];					// Filtered gyro data
	
// Run each loop to average gyro data and also accVert data
void Sensor_PID(void)
{
    7d16:	2f 92       	push	r2
    7d18:	3f 92       	push	r3
    7d1a:	4f 92       	push	r4
    7d1c:	5f 92       	push	r5
    7d1e:	6f 92       	push	r6
    7d20:	7f 92       	push	r7
    7d22:	8f 92       	push	r8
    7d24:	9f 92       	push	r9
    7d26:	af 92       	push	r10
    7d28:	bf 92       	push	r11
    7d2a:	cf 92       	push	r12
    7d2c:	df 92       	push	r13
    7d2e:	ef 92       	push	r14
    7d30:	ff 92       	push	r15
    7d32:	0f 93       	push	r16
    7d34:	1f 93       	push	r17
    7d36:	cf 93       	push	r28
    7d38:	df 93       	push	r29
    7d3a:	cd b7       	in	r28, 0x3d	; 61
    7d3c:	de b7       	in	r29, 0x3e	; 62
    7d3e:	6d 97       	sbiw	r28, 0x1d	; 29
    7d40:	0f b6       	in	r0, 0x3f	; 63
    7d42:	f8 94       	cli
    7d44:	de bf       	out	0x3e, r29	; 62
    7d46:	0f be       	out	0x3f, r0	; 63
    7d48:	cd bf       	out	0x3d, r28	; 61
	// RIGHT roll = +ve gyro, UP pitch = +ve gyro and LEFT yaw = +ve gyro.
	// However the way we have organised stick polarity, RIGHT roll and yaw are +ve, and DOWN elevator is too.
	// When combining with the gyro signals, the sticks have to be in the opposite polarity as the gyros.
	// As described above, pitch and yaw are already opposed, but roll needs to be reversed.

	int16_t	RCinputsAxis[NUMBEROFAXIS] = {-RCinputs[AILERON], RCinputs[ELEVATOR], RCinputs[RUDDER]};
    7d4a:	80 91 1d 08 	lds	r24, 0x081D
    7d4e:	90 91 1e 08 	lds	r25, 0x081E
    7d52:	91 95       	neg	r25
    7d54:	81 95       	neg	r24
    7d56:	91 09       	sbc	r25, r1
    7d58:	98 87       	std	Y+8, r25	; 0x08
    7d5a:	8f 83       	std	Y+7, r24	; 0x07
    7d5c:	80 91 1f 08 	lds	r24, 0x081F
    7d60:	90 91 20 08 	lds	r25, 0x0820
    7d64:	9a 87       	std	Y+10, r25	; 0x0a
    7d66:	89 87       	std	Y+9, r24	; 0x09
    7d68:	80 91 21 08 	lds	r24, 0x0821
    7d6c:	90 91 22 08 	lds	r25, 0x0822
    7d70:	9c 87       	std	Y+12, r25	; 0x0c
    7d72:	8b 87       	std	Y+11, r24	; 0x0b
	
	int8_t Stick_rates[FLIGHT_MODES][NUMBEROFAXIS] =
    7d74:	80 91 d6 05 	lds	r24, 0x05D6
    7d78:	89 83       	std	Y+1, r24	; 0x01
    7d7a:	80 91 dc 05 	lds	r24, 0x05DC
    7d7e:	8a 83       	std	Y+2, r24	; 0x02
    7d80:	80 91 e2 05 	lds	r24, 0x05E2
    7d84:	8b 83       	std	Y+3, r24	; 0x03
    7d86:	80 91 e8 05 	lds	r24, 0x05E8
    7d8a:	8c 83       	std	Y+4, r24	; 0x04
    7d8c:	80 91 ee 05 	lds	r24, 0x05EE
    7d90:	8d 83       	std	Y+5, r24	; 0x05
    7d92:	80 91 f4 05 	lds	r24, 0x05F4
    7d96:	8e 83       	std	Y+6, r24	; 0x06
		{Config.FlightMode[P2].Roll_Rate, Config.FlightMode[P2].Pitch_Rate, Config.FlightMode[P2].Yaw_Rate}
	};

	// Lookup actual LPF value and promote
	// Note: Two sets of values for normal and high-speed mode
	if (Config.Servo_rate != FAST)
    7d98:	80 91 cb 05 	lds	r24, 0x05CB
    7d9c:	60 91 30 06 	lds	r22, 0x0630
	{	
		tempf = pgm_read_byte(&LPF_lookup[Config.Gyro_LPF]); 
    7da0:	e6 2f       	mov	r30, r22
    7da2:	ff 27       	eor	r31, r31
    7da4:	e7 fd       	sbrc	r30, 7
    7da6:	f0 95       	com	r31
		{Config.FlightMode[P2].Roll_Rate, Config.FlightMode[P2].Pitch_Rate, Config.FlightMode[P2].Yaw_Rate}
	};

	// Lookup actual LPF value and promote
	// Note: Two sets of values for normal and high-speed mode
	if (Config.Servo_rate != FAST)
    7da8:	82 30       	cpi	r24, 0x02	; 2
    7daa:	19 f0       	breq	.+6      	; 0x7db2 <Sensor_PID+0x9c>
	{	
		tempf = pgm_read_byte(&LPF_lookup[Config.Gyro_LPF]); 
    7dac:	e5 50       	subi	r30, 0x05	; 5
    7dae:	f8 4e       	sbci	r31, 0xE8	; 232
    7db0:	02 c0       	rjmp	.+4      	; 0x7db6 <Sensor_PID+0xa0>
	}
	else
	{
		tempf = pgm_read_byte(&LPF_lookup_HS[Config.Gyro_LPF]);
    7db2:	e5 52       	subi	r30, 0x25	; 37
    7db4:	f8 4e       	sbci	r31, 0xE8	; 232
    7db6:	64 91       	lpm	r22, Z
    7db8:	70 e0       	ldi	r23, 0x00	; 0
    7dba:	80 e0       	ldi	r24, 0x00	; 0
    7dbc:	90 e0       	ldi	r25, 0x00	; 0
    7dbe:	0e 94 e5 46 	call	0x8dca	; 0x8dca <__floatunsisf>
    7dc2:	6b 01       	movw	r12, r22
    7dc4:	7c 01       	movw	r14, r24
    7dc6:	83 e6       	ldi	r24, 0x63	; 99
    7dc8:	a8 2e       	mov	r10, r24
    7dca:	85 e0       	ldi	r24, 0x05	; 5
    7dcc:	b8 2e       	mov	r11, r24
    7dce:	95 ef       	ldi	r25, 0xF5	; 245
    7dd0:	89 2e       	mov	r8, r25
    7dd2:	97 e0       	ldi	r25, 0x07	; 7
    7dd4:	99 2e       	mov	r9, r25
    7dd6:	0d ed       	ldi	r16, 0xDD	; 221
    7dd8:	17 e0       	ldi	r17, 0x07	; 7
    7dda:	2b e1       	ldi	r18, 0x1B	; 27
    7ddc:	36 e0       	ldi	r19, 0x06	; 6
    7dde:	3b 8b       	std	Y+19, r19	; 0x13
    7de0:	2a 8b       	std	Y+18, r18	; 0x12
    7de2:	ae 01       	movw	r20, r28
    7de4:	49 5f       	subi	r20, 0xF9	; 249
    7de6:	5f 4f       	sbci	r21, 0xFF	; 255
    7de8:	5d 8b       	std	Y+21, r21	; 0x15
    7dea:	4c 8b       	std	Y+20, r20	; 0x14
    7dec:	be 01       	movw	r22, r28
    7dee:	6f 5f       	subi	r22, 0xFF	; 255
    7df0:	7f 4f       	sbci	r23, 0xFF	; 255
    7df2:	7f 8b       	std	Y+23, r23	; 0x17
    7df4:	6e 8b       	std	Y+22, r22	; 0x16
    7df6:	ce 01       	movw	r24, r28
    7df8:	04 96       	adiw	r24, 0x04	; 4
    7dfa:	99 8b       	std	Y+17, r25	; 0x11
    7dfc:	88 8b       	std	Y+16, r24	; 0x10
    7dfe:	af e0       	ldi	r26, 0x0F	; 15
    7e00:	b6 e0       	ldi	r27, 0x06	; 6
    7e02:	bf 87       	std	Y+15, r27	; 0x0f
    7e04:	ae 87       	std	Y+14, r26	; 0x0e
	}

	for (axis = 0; axis <= YAW; axis ++)
    7e06:	1d 86       	std	Y+13, r1	; 0x0d
			gyroADC[axis] = 0;
		}
		
		// Work out stick rate divider. 0 is slowest, 4 is fastest.
		// /64 (15.25), /32 (30.5), /16 (61*), /8 (122), /4 (244)
		stick_P1 = RCinputsAxis[axis] >> (4 - (Stick_rates[P1][axis] - 2));
    7e08:	26 e0       	ldi	r18, 0x06	; 6
    7e0a:	62 2e       	mov	r6, r18
    7e0c:	71 2c       	mov	r7, r1
		//************************************************************
		// Increment and limit gyro I-terms, handle heading hold nicely
		//************************************************************

		// Reduce Gyro drift noise before adding into I-term
		if ((gyroADC[axis] > -GYRO_DEADBAND) && (gyroADC[axis] < GYRO_DEADBAND)) 
    7e0e:	f5 01       	movw	r30, r10
    7e10:	80 81       	ld	r24, Z
    7e12:	91 81       	ldd	r25, Z+1	; 0x01
    7e14:	04 96       	adiw	r24, 0x04	; 4
    7e16:	09 97       	sbiw	r24, 0x09	; 9
    7e18:	10 f4       	brcc	.+4      	; 0x7e1e <Sensor_PID+0x108>
		{
			gyroADC[axis] = 0;
    7e1a:	11 82       	std	Z+1, r1	; 0x01
    7e1c:	10 82       	st	Z, r1
		}
		
		// Work out stick rate divider. 0 is slowest, 4 is fastest.
		// /64 (15.25), /32 (30.5), /16 (61*), /8 (122), /4 (244)
		stick_P1 = RCinputsAxis[axis] >> (4 - (Stick_rates[P1][axis] - 2));
    7e1e:	ac 89       	ldd	r26, Y+20	; 0x14
    7e20:	bd 89       	ldd	r27, Y+21	; 0x15
    7e22:	2d 91       	ld	r18, X+
    7e24:	3d 91       	ld	r19, X+
    7e26:	bd 8b       	std	Y+21, r27	; 0x15
    7e28:	ac 8b       	std	Y+20, r26	; 0x14
    7e2a:	ee 89       	ldd	r30, Y+22	; 0x16
    7e2c:	ff 89       	ldd	r31, Y+23	; 0x17
    7e2e:	41 91       	ld	r20, Z+
    7e30:	ff 8b       	std	Y+23, r31	; 0x17
    7e32:	ee 8b       	std	Y+22, r30	; 0x16
		stick_P2 = RCinputsAxis[axis] >> (4 - (Stick_rates[P2][axis] - 2));
    7e34:	a8 89       	ldd	r26, Y+16	; 0x10
    7e36:	b9 89       	ldd	r27, Y+17	; 0x11
    7e38:	ed 91       	ld	r30, X+
    7e3a:	b9 8b       	std	Y+17, r27	; 0x11
    7e3c:	a8 8b       	std	Y+16, r26	; 0x10

		// Calculate I-term from gyro and stick data 
		// These may look similar, but they are constrained quite differently.
		IntegralGyro[P1][axis] += (gyroADC[axis] + stick_P1);
    7e3e:	d5 01       	movw	r26, r10
    7e40:	0d 90       	ld	r0, X+
    7e42:	bc 91       	ld	r27, X
    7e44:	a0 2d       	mov	r26, r0
    7e46:	bd 8f       	std	Y+29, r27	; 0x1d
    7e48:	ac 8f       	std	Y+28, r26	; 0x1c
			gyroADC[axis] = 0;
		}
		
		// Work out stick rate divider. 0 is slowest, 4 is fastest.
		// /64 (15.25), /32 (30.5), /16 (61*), /8 (122), /4 (244)
		stick_P1 = RCinputsAxis[axis] >> (4 - (Stick_rates[P1][axis] - 2));
    7e4a:	b3 01       	movw	r22, r6
    7e4c:	64 1b       	sub	r22, r20
    7e4e:	71 09       	sbc	r23, r1
    7e50:	47 fd       	sbrc	r20, 7
    7e52:	73 95       	inc	r23
    7e54:	c9 01       	movw	r24, r18
    7e56:	02 c0       	rjmp	.+4      	; 0x7e5c <Sensor_PID+0x146>
    7e58:	95 95       	asr	r25
    7e5a:	87 95       	ror	r24
    7e5c:	6a 95       	dec	r22
    7e5e:	e2 f7       	brpl	.-8      	; 0x7e58 <Sensor_PID+0x142>
    7e60:	ac 01       	movw	r20, r24
		stick_P2 = RCinputsAxis[axis] >> (4 - (Stick_rates[P2][axis] - 2));

		// Calculate I-term from gyro and stick data 
		// These may look similar, but they are constrained quite differently.
		IntegralGyro[P1][axis] += (gyroADC[axis] + stick_P1);
    7e62:	4a 0f       	add	r20, r26
    7e64:	5b 1f       	adc	r21, r27
    7e66:	66 27       	eor	r22, r22
    7e68:	57 fd       	sbrc	r21, 7
    7e6a:	60 95       	com	r22
    7e6c:	76 2f       	mov	r23, r22
    7e6e:	d8 01       	movw	r26, r16
    7e70:	2d 90       	ld	r2, X+
    7e72:	3d 90       	ld	r3, X+
    7e74:	4d 90       	ld	r4, X+
    7e76:	5c 90       	ld	r5, X
    7e78:	13 97       	sbiw	r26, 0x03	; 3
    7e7a:	24 0e       	add	r2, r20
    7e7c:	35 1e       	adc	r3, r21
    7e7e:	46 1e       	adc	r4, r22
    7e80:	57 1e       	adc	r5, r23
    7e82:	2d 92       	st	X+, r2
    7e84:	3d 92       	st	X+, r3
    7e86:	4d 92       	st	X+, r4
    7e88:	5c 92       	st	X, r5
    7e8a:	13 97       	sbiw	r26, 0x03	; 3
		}
		
		// Work out stick rate divider. 0 is slowest, 4 is fastest.
		// /64 (15.25), /32 (30.5), /16 (61*), /8 (122), /4 (244)
		stick_P1 = RCinputsAxis[axis] >> (4 - (Stick_rates[P1][axis] - 2));
		stick_P2 = RCinputsAxis[axis] >> (4 - (Stick_rates[P2][axis] - 2));
    7e8c:	a3 01       	movw	r20, r6
    7e8e:	4e 1b       	sub	r20, r30
    7e90:	51 09       	sbc	r21, r1
    7e92:	e7 fd       	sbrc	r30, 7
    7e94:	53 95       	inc	r21
    7e96:	02 c0       	rjmp	.+4      	; 0x7e9c <Sensor_PID+0x186>
    7e98:	35 95       	asr	r19
    7e9a:	27 95       	ror	r18
    7e9c:	4a 95       	dec	r20
    7e9e:	e2 f7       	brpl	.-8      	; 0x7e98 <Sensor_PID+0x182>

		// Calculate I-term from gyro and stick data 
		// These may look similar, but they are constrained quite differently.
		IntegralGyro[P1][axis] += (gyroADC[axis] + stick_P1);
		IntegralGyro[P2][axis] += (gyroADC[axis] + stick_P2);
    7ea0:	ec 8d       	ldd	r30, Y+28	; 0x1c
    7ea2:	fd 8d       	ldd	r31, Y+29	; 0x1d
    7ea4:	2e 0f       	add	r18, r30
    7ea6:	3f 1f       	adc	r19, r31
    7ea8:	a9 01       	movw	r20, r18
    7eaa:	66 27       	eor	r22, r22
    7eac:	57 fd       	sbrc	r21, 7
    7eae:	60 95       	com	r22
    7eb0:	76 2f       	mov	r23, r22
    7eb2:	48 8f       	std	Y+24, r20	; 0x18
    7eb4:	59 8f       	std	Y+25, r21	; 0x19
    7eb6:	6a 8f       	std	Y+26, r22	; 0x1a
    7eb8:	7b 8f       	std	Y+27, r23	; 0x1b
    7eba:	1c 96       	adiw	r26, 0x0c	; 12
    7ebc:	4d 91       	ld	r20, X+
    7ebe:	5d 91       	ld	r21, X+
    7ec0:	6d 91       	ld	r22, X+
    7ec2:	7c 91       	ld	r23, X
    7ec4:	1f 97       	sbiw	r26, 0x0f	; 15
    7ec6:	88 8d       	ldd	r24, Y+24	; 0x18
    7ec8:	99 8d       	ldd	r25, Y+25	; 0x19
    7eca:	aa 8d       	ldd	r26, Y+26	; 0x1a
    7ecc:	bb 8d       	ldd	r27, Y+27	; 0x1b
    7ece:	48 0f       	add	r20, r24
    7ed0:	59 1f       	adc	r21, r25
    7ed2:	6a 1f       	adc	r22, r26
    7ed4:	7b 1f       	adc	r23, r27
    7ed6:	d8 01       	movw	r26, r16
    7ed8:	1c 96       	adiw	r26, 0x0c	; 12
    7eda:	4d 93       	st	X+, r20
    7edc:	5d 93       	st	X+, r21
    7ede:	6d 93       	st	X+, r22
    7ee0:	7c 93       	st	X, r23
    7ee2:	1f 97       	sbiw	r26, 0x0f	; 15

		// Limit the I-terms to the user-set limits
		for (i = P1; i <= P2; i++)
		{
			if (IntegralGyro[i][axis] > Config.Raw_I_Constrain[i][axis])
    7ee4:	ee 85       	ldd	r30, Y+14	; 0x0e
    7ee6:	ff 85       	ldd	r31, Y+15	; 0x0f
    7ee8:	41 91       	ld	r20, Z+
    7eea:	51 91       	ld	r21, Z+
    7eec:	61 91       	ld	r22, Z+
    7eee:	71 91       	ld	r23, Z+
    7ef0:	ff 87       	std	Y+15, r31	; 0x0f
    7ef2:	ee 87       	std	Y+14, r30	; 0x0e
    7ef4:	42 15       	cp	r20, r2
    7ef6:	53 05       	cpc	r21, r3
    7ef8:	64 05       	cpc	r22, r4
    7efa:	75 05       	cpc	r23, r5
    7efc:	2c f4       	brge	.+10     	; 0x7f08 <Sensor_PID+0x1f2>
			{
				IntegralGyro[i][axis] = Config.Raw_I_Constrain[i][axis];
    7efe:	4d 93       	st	X+, r20
    7f00:	5d 93       	st	X+, r21
    7f02:	6d 93       	st	X+, r22
    7f04:	7c 93       	st	X, r23
    7f06:	13 97       	sbiw	r26, 0x03	; 3
			}
			if (IntegralGyro[i][axis] < -Config.Raw_I_Constrain[i][axis])
    7f08:	70 95       	com	r23
    7f0a:	60 95       	com	r22
    7f0c:	50 95       	com	r21
    7f0e:	41 95       	neg	r20
    7f10:	5f 4f       	sbci	r21, 0xFF	; 255
    7f12:	6f 4f       	sbci	r22, 0xFF	; 255
    7f14:	7f 4f       	sbci	r23, 0xFF	; 255
    7f16:	f8 01       	movw	r30, r16
    7f18:	20 80       	ld	r2, Z
    7f1a:	31 80       	ldd	r3, Z+1	; 0x01
    7f1c:	42 80       	ldd	r4, Z+2	; 0x02
    7f1e:	53 80       	ldd	r5, Z+3	; 0x03
    7f20:	24 16       	cp	r2, r20
    7f22:	35 06       	cpc	r3, r21
    7f24:	46 06       	cpc	r4, r22
    7f26:	57 06       	cpc	r5, r23
    7f28:	24 f4       	brge	.+8      	; 0x7f32 <Sensor_PID+0x21c>
			{
				IntegralGyro[i][axis] = -Config.Raw_I_Constrain[i][axis];
    7f2a:	40 83       	st	Z, r20
    7f2c:	51 83       	std	Z+1, r21	; 0x01
    7f2e:	62 83       	std	Z+2, r22	; 0x02
    7f30:	73 83       	std	Z+3, r23	; 0x03
		IntegralGyro[P2][axis] += (gyroADC[axis] + stick_P2);

		// Limit the I-terms to the user-set limits
		for (i = P1; i <= P2; i++)
		{
			if (IntegralGyro[i][axis] > Config.Raw_I_Constrain[i][axis])
    7f32:	ea 89       	ldd	r30, Y+18	; 0x12
    7f34:	fb 89       	ldd	r31, Y+19	; 0x13
    7f36:	41 91       	ld	r20, Z+
    7f38:	51 91       	ld	r21, Z+
    7f3a:	61 91       	ld	r22, Z+
    7f3c:	71 91       	ld	r23, Z+
    7f3e:	fb 8b       	std	Y+19, r31	; 0x13
    7f40:	ea 8b       	std	Y+18, r30	; 0x12
    7f42:	d8 01       	movw	r26, r16
    7f44:	1c 96       	adiw	r26, 0x0c	; 12
    7f46:	2d 90       	ld	r2, X+
    7f48:	3d 90       	ld	r3, X+
    7f4a:	4d 90       	ld	r4, X+
    7f4c:	5c 90       	ld	r5, X
    7f4e:	1f 97       	sbiw	r26, 0x0f	; 15
    7f50:	42 15       	cp	r20, r2
    7f52:	53 05       	cpc	r21, r3
    7f54:	64 05       	cpc	r22, r4
    7f56:	75 05       	cpc	r23, r5
    7f58:	2c f4       	brge	.+10     	; 0x7f64 <Sensor_PID+0x24e>
			{
				IntegralGyro[i][axis] = Config.Raw_I_Constrain[i][axis];
    7f5a:	f8 01       	movw	r30, r16
    7f5c:	44 87       	std	Z+12, r20	; 0x0c
    7f5e:	55 87       	std	Z+13, r21	; 0x0d
    7f60:	66 87       	std	Z+14, r22	; 0x0e
    7f62:	77 87       	std	Z+15, r23	; 0x0f
			}
			if (IntegralGyro[i][axis] < -Config.Raw_I_Constrain[i][axis])
    7f64:	70 95       	com	r23
    7f66:	60 95       	com	r22
    7f68:	50 95       	com	r21
    7f6a:	41 95       	neg	r20
    7f6c:	5f 4f       	sbci	r21, 0xFF	; 255
    7f6e:	6f 4f       	sbci	r22, 0xFF	; 255
    7f70:	7f 4f       	sbci	r23, 0xFF	; 255
    7f72:	d8 01       	movw	r26, r16
    7f74:	1c 96       	adiw	r26, 0x0c	; 12
    7f76:	2d 90       	ld	r2, X+
    7f78:	3d 90       	ld	r3, X+
    7f7a:	4d 90       	ld	r4, X+
    7f7c:	5c 90       	ld	r5, X
    7f7e:	1f 97       	sbiw	r26, 0x0f	; 15
    7f80:	24 16       	cp	r2, r20
    7f82:	35 06       	cpc	r3, r21
    7f84:	46 06       	cpc	r4, r22
    7f86:	57 06       	cpc	r5, r23
    7f88:	2c f4       	brge	.+10     	; 0x7f94 <Sensor_PID+0x27e>
			{
				IntegralGyro[i][axis] = -Config.Raw_I_Constrain[i][axis];
    7f8a:	f8 01       	movw	r30, r16
    7f8c:	44 87       	std	Z+12, r20	; 0x0c
    7f8e:	55 87       	std	Z+13, r21	; 0x0d
    7f90:	66 87       	std	Z+14, r22	; 0x0e
    7f92:	77 87       	std	Z+15, r23	; 0x0f

		//************************************************************
		// Gyro LPF
		//************************************************************	
			
		gyroADCf = gyroADC[axis]; // Promote
    7f94:	2c 8d       	ldd	r18, Y+28	; 0x1c
    7f96:	3d 8d       	ldd	r19, Y+29	; 0x1d
    7f98:	b9 01       	movw	r22, r18
    7f9a:	88 27       	eor	r24, r24
    7f9c:	77 fd       	sbrc	r23, 7
    7f9e:	80 95       	com	r24
    7fa0:	98 2f       	mov	r25, r24
    7fa2:	0e 94 e7 46 	call	0x8dce	; 0x8dce <__floatsisf>
    7fa6:	1b 01       	movw	r2, r22
    7fa8:	2c 01       	movw	r4, r24

		if (tempf > 1)
    7faa:	20 e0       	ldi	r18, 0x00	; 0
    7fac:	30 e0       	ldi	r19, 0x00	; 0
    7fae:	40 e8       	ldi	r20, 0x80	; 128
    7fb0:	5f e3       	ldi	r21, 0x3F	; 63
    7fb2:	c7 01       	movw	r24, r14
    7fb4:	b6 01       	movw	r22, r12
    7fb6:	0e 94 97 47 	call	0x8f2e	; 0x8f2e <__gesf2>
    7fba:	18 16       	cp	r1, r24
    7fbc:	ec f4       	brge	.+58     	; 0x7ff8 <Sensor_PID+0x2e2>
		{
			// Gyro LPF
			gyroSmooth[axis] = (gyroSmooth[axis] * (tempf - 1.0f) + gyroADCf) / tempf;
    7fbe:	20 e0       	ldi	r18, 0x00	; 0
    7fc0:	30 e0       	ldi	r19, 0x00	; 0
    7fc2:	40 e8       	ldi	r20, 0x80	; 128
    7fc4:	5f e3       	ldi	r21, 0x3F	; 63
    7fc6:	c7 01       	movw	r24, r14
    7fc8:	b6 01       	movw	r22, r12
    7fca:	0e 94 e3 45 	call	0x8bc6	; 0x8bc6 <__subsf3>
    7fce:	d4 01       	movw	r26, r8
    7fd0:	2d 91       	ld	r18, X+
    7fd2:	3d 91       	ld	r19, X+
    7fd4:	4d 91       	ld	r20, X+
    7fd6:	5c 91       	ld	r21, X
    7fd8:	0e 94 9b 47 	call	0x8f36	; 0x8f36 <__mulsf3>
    7fdc:	a2 01       	movw	r20, r4
    7fde:	91 01       	movw	r18, r2
    7fe0:	0e 94 e4 45 	call	0x8bc8	; 0x8bc8 <__addsf3>
    7fe4:	a7 01       	movw	r20, r14
    7fe6:	96 01       	movw	r18, r12
    7fe8:	0e 94 4c 46 	call	0x8c98	; 0x8c98 <__divsf3>
    7fec:	f4 01       	movw	r30, r8
    7fee:	60 83       	st	Z, r22
    7ff0:	71 83       	std	Z+1, r23	; 0x01
    7ff2:	82 83       	std	Z+2, r24	; 0x02
    7ff4:	93 83       	std	Z+3, r25	; 0x03
    7ff6:	06 c0       	rjmp	.+12     	; 0x8004 <Sensor_PID+0x2ee>
		}
		else
		{
			// Use raw gyroADC[axis] as source for gyro values
			gyroSmooth[axis] =  gyroADCf;
    7ff8:	d4 01       	movw	r26, r8
    7ffa:	2d 92       	st	X+, r2
    7ffc:	3d 92       	st	X+, r3
    7ffe:	4d 92       	st	X+, r4
    8000:	5c 92       	st	X, r5
    8002:	13 97       	sbiw	r26, 0x03	; 3
		}		
		
		// Demote back to int16_t
		gyroADC[axis] = (int16_t)gyroSmooth[axis];		
    8004:	f4 01       	movw	r30, r8
    8006:	61 91       	ld	r22, Z+
    8008:	71 91       	ld	r23, Z+
    800a:	81 91       	ld	r24, Z+
    800c:	91 91       	ld	r25, Z+
    800e:	4f 01       	movw	r8, r30
    8010:	0e 94 b4 46 	call	0x8d68	; 0x8d68 <__fixsfsi>
    8014:	d5 01       	movw	r26, r10
    8016:	6d 93       	st	X+, r22
    8018:	7d 93       	st	X+, r23
    801a:	5d 01       	movw	r10, r26
    801c:	bd 85       	ldd	r27, Y+13	; 0x0d
    801e:	bf 5f       	subi	r27, 0xFF	; 255
    8020:	bd 87       	std	Y+13, r27	; 0x0d
    8022:	0c 5f       	subi	r16, 0xFC	; 252
    8024:	1f 4f       	sbci	r17, 0xFF	; 255
	else
	{
		tempf = pgm_read_byte(&LPF_lookup_HS[Config.Gyro_LPF]);
	}

	for (axis = 0; axis <= YAW; axis ++)
    8026:	b3 30       	cpi	r27, 0x03	; 3
    8028:	09 f0       	breq	.+2      	; 0x802c <Sensor_PID+0x316>
    802a:	f1 ce       	rjmp	.-542    	; 0x7e0e <Sensor_PID+0xf8>
		// Demote back to int16_t
		gyroADC[axis] = (int16_t)gyroSmooth[axis];		
	}
	
	// Average accVert prior to Calculate_PID()
	PID_AvgAccVert += accVert;
    802c:	40 91 0c 05 	lds	r20, 0x050C
    8030:	50 91 0d 05 	lds	r21, 0x050D
    8034:	66 27       	eor	r22, r22
    8036:	57 fd       	sbrc	r21, 7
    8038:	60 95       	com	r22
    803a:	76 2f       	mov	r23, r22
    803c:	80 91 2e 05 	lds	r24, 0x052E
    8040:	90 91 2f 05 	lds	r25, 0x052F
    8044:	a0 91 30 05 	lds	r26, 0x0530
    8048:	b0 91 31 05 	lds	r27, 0x0531
    804c:	84 0f       	add	r24, r20
    804e:	95 1f       	adc	r25, r21
    8050:	a6 1f       	adc	r26, r22
    8052:	b7 1f       	adc	r27, r23
    8054:	80 93 2e 05 	sts	0x052E, r24
    8058:	90 93 2f 05 	sts	0x052F, r25
    805c:	a0 93 30 05 	sts	0x0530, r26
    8060:	b0 93 31 05 	sts	0x0531, r27
			
}
    8064:	6d 96       	adiw	r28, 0x1d	; 29
    8066:	0f b6       	in	r0, 0x3f	; 63
    8068:	f8 94       	cli
    806a:	de bf       	out	0x3e, r29	; 62
    806c:	0f be       	out	0x3f, r0	; 63
    806e:	cd bf       	out	0x3d, r28	; 61
    8070:	df 91       	pop	r29
    8072:	cf 91       	pop	r28
    8074:	1f 91       	pop	r17
    8076:	0f 91       	pop	r16
    8078:	ff 90       	pop	r15
    807a:	ef 90       	pop	r14
    807c:	df 90       	pop	r13
    807e:	cf 90       	pop	r12
    8080:	bf 90       	pop	r11
    8082:	af 90       	pop	r10
    8084:	9f 90       	pop	r9
    8086:	8f 90       	pop	r8
    8088:	7f 90       	pop	r7
    808a:	6f 90       	pop	r6
    808c:	5f 90       	pop	r5
    808e:	4f 90       	pop	r4
    8090:	3f 90       	pop	r3
    8092:	2f 90       	pop	r2
    8094:	08 95       	ret

00008096 <Calculate_PID>:

// Run just before PWM output, using averaged data
void Calculate_PID(void)
{
    8096:	2f 92       	push	r2
    8098:	3f 92       	push	r3
    809a:	4f 92       	push	r4
    809c:	5f 92       	push	r5
    809e:	6f 92       	push	r6
    80a0:	7f 92       	push	r7
    80a2:	8f 92       	push	r8
    80a4:	9f 92       	push	r9
    80a6:	af 92       	push	r10
    80a8:	bf 92       	push	r11
    80aa:	cf 92       	push	r12
    80ac:	df 92       	push	r13
    80ae:	ef 92       	push	r14
    80b0:	ff 92       	push	r15
    80b2:	0f 93       	push	r16
    80b4:	1f 93       	push	r17
    80b6:	cf 93       	push	r28
    80b8:	df 93       	push	r29
    80ba:	cd b7       	in	r28, 0x3d	; 61
    80bc:	de b7       	in	r29, 0x3e	; 62
    80be:	ca 54       	subi	r28, 0x4A	; 74
    80c0:	d1 09       	sbc	r29, r1
    80c2:	0f b6       	in	r0, 0x3f	; 63
    80c4:	f8 94       	cli
    80c6:	de bf       	out	0x3e, r29	; 62
    80c8:	0f be       	out	0x3f, r0	; 63
    80ca:	cd bf       	out	0x3d, r28	; 61
	int16_t AvAccVert = 0;
	int8_t	axis = 0;
	int8_t i = 0;

	// Initialise arrays with gain values.
	int8_t 	P_gain[FLIGHT_MODES][NUMBEROFAXIS] = 
    80cc:	80 91 d3 05 	lds	r24, 0x05D3
    80d0:	8d 8b       	std	Y+21, r24	; 0x15
    80d2:	80 91 d9 05 	lds	r24, 0x05D9
    80d6:	8e 8b       	std	Y+22, r24	; 0x16
    80d8:	80 91 df 05 	lds	r24, 0x05DF
    80dc:	8f 8b       	std	Y+23, r24	; 0x17
    80de:	80 91 e5 05 	lds	r24, 0x05E5
    80e2:	88 8f       	std	Y+24, r24	; 0x18
    80e4:	80 91 eb 05 	lds	r24, 0x05EB
    80e8:	89 8f       	std	Y+25, r24	; 0x19
    80ea:	80 91 f1 05 	lds	r24, 0x05F1
    80ee:	8a 8f       	std	Y+26, r24	; 0x1a
		{
			{Config.FlightMode[P1].Roll_P_mult, Config.FlightMode[P1].Pitch_P_mult, Config.FlightMode[P1].Yaw_P_mult},
		 	{Config.FlightMode[P2].Roll_P_mult, Config.FlightMode[P2].Pitch_P_mult, Config.FlightMode[P2].Yaw_P_mult}
		};

	int8_t 	I_gain[FLIGHT_MODES][NUMBEROFAXIS] = 
    80f0:	80 91 d4 05 	lds	r24, 0x05D4
    80f4:	8f 87       	std	Y+15, r24	; 0x0f
    80f6:	80 91 da 05 	lds	r24, 0x05DA
    80fa:	88 8b       	std	Y+16, r24	; 0x10
    80fc:	80 91 e0 05 	lds	r24, 0x05E0
    8100:	89 8b       	std	Y+17, r24	; 0x11
    8102:	80 91 e6 05 	lds	r24, 0x05E6
    8106:	8a 8b       	std	Y+18, r24	; 0x12
    8108:	80 91 ec 05 	lds	r24, 0x05EC
    810c:	8b 8b       	std	Y+19, r24	; 0x13
    810e:	80 91 f2 05 	lds	r24, 0x05F2
    8112:	8c 8b       	std	Y+20, r24	; 0x14
		{
			{Config.FlightMode[P1].Roll_I_mult, Config.FlightMode[P1].Pitch_I_mult, Config.FlightMode[P1].Yaw_I_mult},
			{Config.FlightMode[P2].Roll_I_mult, Config.FlightMode[P2].Pitch_I_mult, Config.FlightMode[P2].Yaw_I_mult}
		};

	int8_t 	L_gain[FLIGHT_MODES][NUMBEROFAXIS] = 
    8114:	80 91 d7 05 	lds	r24, 0x05D7
    8118:	89 87       	std	Y+9, r24	; 0x09
    811a:	80 91 dd 05 	lds	r24, 0x05DD
    811e:	8a 87       	std	Y+10, r24	; 0x0a
		{
			{Config.FlightMode[P1].A_Roll_P_mult, Config.FlightMode[P1].A_Pitch_P_mult, Config.FlightMode[P1].A_Zed_P_mult},
    8120:	20 91 e4 05 	lds	r18, 0x05E4
    8124:	29 a7       	std	Y+41, r18	; 0x29
		{
			{Config.FlightMode[P1].Roll_I_mult, Config.FlightMode[P1].Pitch_I_mult, Config.FlightMode[P1].Yaw_I_mult},
			{Config.FlightMode[P2].Roll_I_mult, Config.FlightMode[P2].Pitch_I_mult, Config.FlightMode[P2].Yaw_I_mult}
		};

	int8_t 	L_gain[FLIGHT_MODES][NUMBEROFAXIS] = 
    8126:	2b 87       	std	Y+11, r18	; 0x0b
    8128:	80 91 e9 05 	lds	r24, 0x05E9
    812c:	8c 87       	std	Y+12, r24	; 0x0c
    812e:	80 91 ef 05 	lds	r24, 0x05EF
    8132:	8d 87       	std	Y+13, r24	; 0x0d
		{
			{Config.FlightMode[P1].A_Roll_P_mult, Config.FlightMode[P1].A_Pitch_P_mult, Config.FlightMode[P1].A_Zed_P_mult},
			{Config.FlightMode[P2].A_Roll_P_mult, Config.FlightMode[P2].A_Pitch_P_mult, Config.FlightMode[P2].A_Zed_P_mult}
    8134:	30 91 f6 05 	lds	r19, 0x05F6
    8138:	3a a7       	std	Y+42, r19	; 0x2a
		{
			{Config.FlightMode[P1].Roll_I_mult, Config.FlightMode[P1].Pitch_I_mult, Config.FlightMode[P1].Yaw_I_mult},
			{Config.FlightMode[P2].Roll_I_mult, Config.FlightMode[P2].Pitch_I_mult, Config.FlightMode[P2].Yaw_I_mult}
		};

	int8_t 	L_gain[FLIGHT_MODES][NUMBEROFAXIS] = 
    813a:	3e 87       	std	Y+14, r19	; 0x0e
			{Config.FlightMode[P1].A_Roll_P_mult, Config.FlightMode[P1].A_Pitch_P_mult, Config.FlightMode[P1].A_Zed_P_mult},
			{Config.FlightMode[P2].A_Roll_P_mult, Config.FlightMode[P2].A_Pitch_P_mult, Config.FlightMode[P2].A_Zed_P_mult}
		};

	// Only for roll and pitch acc trim
	int16_t	L_trim[FLIGHT_MODES][2] =
    813c:	80 91 a0 07 	lds	r24, 0x07A0
    8140:	90 91 a1 07 	lds	r25, 0x07A1
    8144:	9a 83       	std	Y+2, r25	; 0x02
    8146:	89 83       	std	Y+1, r24	; 0x01
    8148:	80 91 a4 07 	lds	r24, 0x07A4
    814c:	90 91 a5 07 	lds	r25, 0x07A5
    8150:	9c 83       	std	Y+4, r25	; 0x04
    8152:	8b 83       	std	Y+3, r24	; 0x03
    8154:	80 91 a2 07 	lds	r24, 0x07A2
    8158:	90 91 a3 07 	lds	r25, 0x07A3
    815c:	9e 83       	std	Y+6, r25	; 0x06
    815e:	8d 83       	std	Y+5, r24	; 0x05
    8160:	80 91 a6 07 	lds	r24, 0x07A6
    8164:	90 91 a7 07 	lds	r25, 0x07A7
    8168:	98 87       	std	Y+8, r25	; 0x08
    816a:	8f 83       	std	Y+7, r24	; 0x07
			{Config.Rolltrim[P1], Config.Pitchtrim[P1]},
			{Config.Rolltrim[P2], Config.Pitchtrim[P2]}
		};

	// Average accVert
	AvAccVert = (int16_t)(PID_AvgAccVert / LoopCount);
    816c:	20 91 0e 05 	lds	r18, 0x050E
    8170:	30 e0       	ldi	r19, 0x00	; 0
    8172:	40 e0       	ldi	r20, 0x00	; 0
    8174:	50 e0       	ldi	r21, 0x00	; 0
    8176:	60 91 2e 05 	lds	r22, 0x052E
    817a:	70 91 2f 05 	lds	r23, 0x052F
    817e:	80 91 30 05 	lds	r24, 0x0530
    8182:	90 91 31 05 	lds	r25, 0x0531
    8186:	0e 94 48 48 	call	0x9090	; 0x9090 <__divmodsi4>
    818a:	29 96       	adiw	r28, 0x09	; 9
    818c:	2c af       	std	Y+60, r18	; 0x3c
    818e:	3d af       	std	Y+61, r19	; 0x3d
    8190:	4e af       	std	Y+62, r20	; 0x3e
    8192:	5f af       	std	Y+63, r21	; 0x3f
    8194:	29 97       	sbiw	r28, 0x09	; 9
	PID_AvgAccVert = 0;							// Reset average
    8196:	10 92 2e 05 	sts	0x052E, r1
    819a:	10 92 2f 05 	sts	0x052F, r1
    819e:	10 92 30 05 	sts	0x0530, r1
    81a2:	10 92 31 05 	sts	0x0531, r1
		// Add in gyro Yaw trim
		//************************************************************

		if (axis == YAW)
		{
			PID_gyro_temp1 = (int32_t)(Config.FlightMode[P1].Yaw_trim << 6);
    81a6:	80 91 e3 05 	lds	r24, 0x05E3
    81aa:	40 e4       	ldi	r20, 0x40	; 64
    81ac:	84 02       	muls	r24, r20
    81ae:	c0 01       	movw	r24, r0
    81b0:	11 24       	eor	r1, r1
    81b2:	9c 01       	movw	r18, r24
    81b4:	44 27       	eor	r20, r20
    81b6:	37 fd       	sbrc	r19, 7
    81b8:	40 95       	com	r20
    81ba:	54 2f       	mov	r21, r20
    81bc:	29 af       	std	Y+57, r18	; 0x39
    81be:	3a af       	std	Y+58, r19	; 0x3a
    81c0:	4b af       	std	Y+59, r20	; 0x3b
    81c2:	5c af       	std	Y+60, r21	; 0x3c
			PID_gyro_temp2 = (int32_t)(Config.FlightMode[P2].Yaw_trim << 6);
    81c4:	80 91 f5 05 	lds	r24, 0x05F5
    81c8:	30 e4       	ldi	r19, 0x40	; 64
    81ca:	83 02       	muls	r24, r19
    81cc:	c0 01       	movw	r24, r0
    81ce:	11 24       	eor	r1, r1
    81d0:	9c 01       	movw	r18, r24
    81d2:	44 27       	eor	r20, r20
    81d4:	37 fd       	sbrc	r19, 7
    81d6:	40 95       	com	r20
    81d8:	54 2f       	mov	r21, r20
    81da:	21 96       	adiw	r28, 0x01	; 1
    81dc:	2c af       	std	Y+60, r18	; 0x3c
    81de:	3d af       	std	Y+61, r19	; 0x3d
    81e0:	4e af       	std	Y+62, r20	; 0x3e
    81e2:	5f af       	std	Y+63, r21	; 0x3f
    81e4:	21 97       	sbiw	r28, 0x01	; 1
    81e6:	e3 e6       	ldi	r30, 0x63	; 99
    81e8:	f5 e0       	ldi	r31, 0x05	; 5
    81ea:	f8 af       	std	Y+56, r31	; 0x38
    81ec:	ef ab       	std	Y+55, r30	; 0x37
    81ee:	fe 01       	movw	r30, r28
    81f0:	75 96       	adiw	r30, 0x15	; 21
    81f2:	fe ab       	std	Y+54, r31	; 0x36
    81f4:	ed ab       	std	Y+53, r30	; 0x35
    81f6:	ed ed       	ldi	r30, 0xDD	; 221
    81f8:	f7 e0       	ldi	r31, 0x07	; 7
    81fa:	fe a3       	std	Y+38, r31	; 0x26
    81fc:	ed a3       	std	Y+37, r30	; 0x25
    81fe:	fe 01       	movw	r30, r28
    8200:	3f 96       	adiw	r30, 0x0f	; 15
    8202:	fc ab       	std	Y+52, r31	; 0x34
    8204:	eb ab       	std	Y+51, r30	; 0x33
    8206:	39 96       	adiw	r30, 0x09	; 9
    8208:	fa ab       	std	Y+50, r31	; 0x32
    820a:	e9 ab       	std	Y+49, r30	; 0x31
    820c:	36 97       	sbiw	r30, 0x06	; 6
    820e:	f8 ab       	std	Y+48, r31	; 0x30
    8210:	ef a7       	std	Y+47, r30	; 0x2f
    8212:	e7 ef       	ldi	r30, 0xF7	; 247
    8214:	f5 e0       	ldi	r31, 0x05	; 5
    8216:	fe a7       	std	Y+46, r31	; 0x2e
    8218:	ed a7       	std	Y+45, r30	; 0x2d
    821a:	e1 e0       	ldi	r30, 0x01	; 1
    821c:	f8 e0       	ldi	r31, 0x08	; 8
    821e:	fc a3       	std	Y+36, r31	; 0x24
    8220:	eb a3       	std	Y+35, r30	; 0x23
    8222:	e1 e8       	ldi	r30, 0x81	; 129
    8224:	f5 e0       	ldi	r31, 0x05	; 5
    8226:	f8 a7       	std	Y+40, r31	; 0x28
    8228:	ef a3       	std	Y+39, r30	; 0x27
    822a:	fe 01       	movw	r30, r28
    822c:	31 96       	adiw	r30, 0x01	; 1
    822e:	fa a3       	std	Y+34, r31	; 0x22
    8230:	e9 a3       	std	Y+33, r30	; 0x21
    8232:	ed e0       	ldi	r30, 0x0D	; 13
    8234:	f8 e0       	ldi	r31, 0x08	; 8
    8236:	f8 a3       	std	Y+32, r31	; 0x20
    8238:	ef 8f       	std	Y+31, r30	; 0x1f
    823a:	1e 01       	movw	r2, r28
    823c:	fc e0       	ldi	r31, 0x0C	; 12
    823e:	2f 0e       	add	r2, r31
    8240:	31 1c       	adc	r3, r1
    8242:	e3 e0       	ldi	r30, 0x03	; 3
    8244:	f6 e0       	ldi	r31, 0x06	; 6
    8246:	fc a7       	std	Y+44, r31	; 0x2c
    8248:	eb a7       	std	Y+43, r30	; 0x2b
    824a:	2b 96       	adiw	r28, 0x0b	; 11
    824c:	1f ae       	std	Y+63, r1	; 0x3f
    824e:	1e ae       	std	Y+62, r1	; 0x3e
    8250:	2b 97       	sbiw	r28, 0x0b	; 11
		}
		// Reset PID_gyro variables to that data does not accumulate cross-axis
		else
		{
			PID_gyro_temp1 = 0;
			PID_gyro_temp2 = 0;
    8252:	81 2c       	mov	r8, r1
    8254:	91 2c       	mov	r9, r1
    8256:	54 01       	movw	r10, r8
			PID_gyro_temp2 = (int32_t)(Config.FlightMode[P2].Yaw_trim << 6);
		}
		// Reset PID_gyro variables to that data does not accumulate cross-axis
		else
		{
			PID_gyro_temp1 = 0;
    8258:	80 e0       	ldi	r24, 0x00	; 0
    825a:	90 e0       	ldi	r25, 0x00	; 0
    825c:	dc 01       	movw	r26, r24
		//************************************************************
		// Calculate PID gains
		//************************************************************

		// Gyro P-term													// Profile P1
		PID_gyro_temp1 += gyroADC[axis] * P_gain[P1][axis];				// Multiply P-term (Max gain of 127)
    825e:	ef a9       	ldd	r30, Y+55	; 0x37
    8260:	f8 ad       	ldd	r31, Y+56	; 0x38
    8262:	01 91       	ld	r16, Z+
    8264:	11 91       	ld	r17, Z+
    8266:	f8 af       	std	Y+56, r31	; 0x38
    8268:	ef ab       	std	Y+55, r30	; 0x37
    826a:	ed a9       	ldd	r30, Y+53	; 0x35
    826c:	fe a9       	ldd	r31, Y+54	; 0x36
    826e:	41 91       	ld	r20, Z+
    8270:	fe ab       	std	Y+54, r31	; 0x36
    8272:	ed ab       	std	Y+53, r30	; 0x35
    8274:	40 03       	mulsu	r20, r16
    8276:	90 01       	movw	r18, r0
    8278:	41 9f       	mul	r20, r17
    827a:	30 0d       	add	r19, r0
    827c:	11 24       	eor	r1, r1
    827e:	44 27       	eor	r20, r20
    8280:	37 fd       	sbrc	r19, 7
    8282:	40 95       	com	r20
    8284:	54 2f       	mov	r21, r20
    8286:	28 0f       	add	r18, r24
    8288:	39 1f       	adc	r19, r25
    828a:	4a 1f       	adc	r20, r26
    828c:	5b 1f       	adc	r21, r27
		PID_gyro_temp1 = PID_gyro_temp1 * (int32_t)3;					// Multiply by 3
    828e:	a3 e0       	ldi	r26, 0x03	; 3
    8290:	b0 e0       	ldi	r27, 0x00	; 0
    8292:	0e 94 8b 48 	call	0x9116	; 0x9116 <__muluhisi3>
    8296:	25 96       	adiw	r28, 0x05	; 5
    8298:	6c af       	std	Y+60, r22	; 0x3c
    829a:	7d af       	std	Y+61, r23	; 0x3d
    829c:	8e af       	std	Y+62, r24	; 0x3e
    829e:	9f af       	std	Y+63, r25	; 0x3f
    82a0:	25 97       	sbiw	r28, 0x05	; 5

		// Gyro I-term
		PID_Gyro_I_actual1 = IntegralGyro[P1][axis] * I_gain[P1][axis];	// Multiply I-term (Max gain of 127)
    82a2:	eb a9       	ldd	r30, Y+51	; 0x33
    82a4:	fc a9       	ldd	r31, Y+52	; 0x34
    82a6:	a1 91       	ld	r26, Z+
    82a8:	fc ab       	std	Y+52, r31	; 0x34
    82aa:	eb ab       	std	Y+51, r30	; 0x33
    82ac:	ed a1       	ldd	r30, Y+37	; 0x25
    82ae:	fe a1       	ldd	r31, Y+38	; 0x26
    82b0:	20 81       	ld	r18, Z
    82b2:	31 81       	ldd	r19, Z+1	; 0x01
    82b4:	42 81       	ldd	r20, Z+2	; 0x02
    82b6:	53 81       	ldd	r21, Z+3	; 0x03
    82b8:	bb 27       	eor	r27, r27
    82ba:	a7 fd       	sbrc	r26, 7
    82bc:	b0 95       	com	r27
    82be:	0e 94 96 48 	call	0x912c	; 0x912c <__mulshisi3>
    82c2:	2b 01       	movw	r4, r22
    82c4:	3c 01       	movw	r6, r24
		PID_Gyro_I_actual1 = PID_Gyro_I_actual1 >> 5;					// Divide by 32
    82c6:	85 e0       	ldi	r24, 0x05	; 5
    82c8:	75 94       	asr	r7
    82ca:	67 94       	ror	r6
    82cc:	57 94       	ror	r5
    82ce:	47 94       	ror	r4
    82d0:	8a 95       	dec	r24
    82d2:	d1 f7       	brne	.-12     	; 0x82c8 <Calculate_PID+0x232>

		// Gyro P-term
		PID_gyro_temp2 += gyroADC[axis] * P_gain[P2][axis];				// Profile P2
    82d4:	e9 a9       	ldd	r30, Y+49	; 0x31
    82d6:	fa a9       	ldd	r31, Y+50	; 0x32
    82d8:	41 91       	ld	r20, Z+
    82da:	fa ab       	std	Y+50, r31	; 0x32
    82dc:	e9 ab       	std	Y+49, r30	; 0x31
    82de:	40 03       	mulsu	r20, r16
    82e0:	90 01       	movw	r18, r0
    82e2:	41 9f       	mul	r20, r17
    82e4:	30 0d       	add	r19, r0
    82e6:	11 24       	eor	r1, r1
    82e8:	44 27       	eor	r20, r20
    82ea:	37 fd       	sbrc	r19, 7
    82ec:	40 95       	com	r20
    82ee:	54 2f       	mov	r21, r20
    82f0:	28 0d       	add	r18, r8
    82f2:	39 1d       	adc	r19, r9
    82f4:	4a 1d       	adc	r20, r10
    82f6:	5b 1d       	adc	r21, r11
		PID_gyro_temp2 = PID_gyro_temp2 * (int32_t)3;
    82f8:	a3 e0       	ldi	r26, 0x03	; 3
    82fa:	b0 e0       	ldi	r27, 0x00	; 0
    82fc:	0e 94 8b 48 	call	0x9116	; 0x9116 <__muluhisi3>
    8300:	4b 01       	movw	r8, r22
    8302:	5c 01       	movw	r10, r24

		// Gyro I-term
		PID_Gyro_I_actual2 = IntegralGyro[P2][axis] * I_gain[P2][axis];
    8304:	ef a5       	ldd	r30, Y+47	; 0x2f
    8306:	f8 a9       	ldd	r31, Y+48	; 0x30
    8308:	a1 91       	ld	r26, Z+
    830a:	f8 ab       	std	Y+48, r31	; 0x30
    830c:	ef a7       	std	Y+47, r30	; 0x2f
    830e:	ed a1       	ldd	r30, Y+37	; 0x25
    8310:	fe a1       	ldd	r31, Y+38	; 0x26
    8312:	24 85       	ldd	r18, Z+12	; 0x0c
    8314:	35 85       	ldd	r19, Z+13	; 0x0d
    8316:	46 85       	ldd	r20, Z+14	; 0x0e
    8318:	57 85       	ldd	r21, Z+15	; 0x0f
    831a:	bb 27       	eor	r27, r27
    831c:	a7 fd       	sbrc	r26, 7
    831e:	b0 95       	com	r27
    8320:	0e 94 96 48 	call	0x912c	; 0x912c <__mulshisi3>
		PID_Gyro_I_actual2 = PID_Gyro_I_actual2 >> 5;
    8324:	25 e0       	ldi	r18, 0x05	; 5
    8326:	95 95       	asr	r25
    8328:	87 95       	ror	r24
    832a:	77 95       	ror	r23
    832c:	67 95       	ror	r22
    832e:	2a 95       	dec	r18
    8330:	d1 f7       	brne	.-12     	; 0x8326 <Calculate_PID+0x290>
		//************************************************************
		// I-term output limits
		//************************************************************

		// P1 limits
		if (PID_Gyro_I_actual1 > Config.Raw_I_Limits[P1][axis]) 
    8332:	ed a5       	ldd	r30, Y+45	; 0x2d
    8334:	fe a5       	ldd	r31, Y+46	; 0x2e
    8336:	c1 90       	ld	r12, Z+
    8338:	d1 90       	ld	r13, Z+
    833a:	e1 90       	ld	r14, Z+
    833c:	f1 90       	ld	r15, Z+
    833e:	fe a7       	std	Y+46, r31	; 0x2e
    8340:	ed a7       	std	Y+45, r30	; 0x2d
    8342:	c4 14       	cp	r12, r4
    8344:	d5 04       	cpc	r13, r5
    8346:	e6 04       	cpc	r14, r6
    8348:	f7 04       	cpc	r15, r7
    834a:	84 f0       	brlt	.+32     	; 0x836c <Calculate_PID+0x2d6>
		{
			PID_Gyro_I_actual1 = Config.Raw_I_Limits[P1][axis];
		}
		else if (PID_Gyro_I_actual1 < -Config.Raw_I_Limits[P1][axis]) 
    834c:	00 27       	eor	r16, r16
    834e:	11 27       	eor	r17, r17
    8350:	98 01       	movw	r18, r16
    8352:	0c 19       	sub	r16, r12
    8354:	1d 09       	sbc	r17, r13
    8356:	2e 09       	sbc	r18, r14
    8358:	3f 09       	sbc	r19, r15
    835a:	73 01       	movw	r14, r6
    835c:	62 01       	movw	r12, r4
    835e:	40 16       	cp	r4, r16
    8360:	51 06       	cpc	r5, r17
    8362:	62 06       	cpc	r6, r18
    8364:	73 06       	cpc	r7, r19
    8366:	14 f4       	brge	.+4      	; 0x836c <Calculate_PID+0x2d6>
    8368:	68 01       	movw	r12, r16
    836a:	79 01       	movw	r14, r18
		{
			PID_Gyro_I_actual1 = -Config.Raw_I_Limits[P1][axis];	
		}

		// P2 limits
		if (PID_Gyro_I_actual2 > Config.Raw_I_Limits[P2][axis]) 
    836c:	eb a5       	ldd	r30, Y+43	; 0x2b
    836e:	fc a5       	ldd	r31, Y+44	; 0x2c
    8370:	21 91       	ld	r18, Z+
    8372:	31 91       	ld	r19, Z+
    8374:	41 91       	ld	r20, Z+
    8376:	51 91       	ld	r21, Z+
    8378:	fc a7       	std	Y+44, r31	; 0x2c
    837a:	eb a7       	std	Y+43, r30	; 0x2b
    837c:	2b 8f       	std	Y+27, r18	; 0x1b
    837e:	3c 8f       	std	Y+28, r19	; 0x1c
    8380:	4d 8f       	std	Y+29, r20	; 0x1d
    8382:	5e 8f       	std	Y+30, r21	; 0x1e
    8384:	26 17       	cp	r18, r22
    8386:	37 07       	cpc	r19, r23
    8388:	48 07       	cpc	r20, r24
    838a:	59 07       	cpc	r21, r25
    838c:	b4 f0       	brlt	.+44     	; 0x83ba <Calculate_PID+0x324>
		{
			PID_Gyro_I_actual2 = Config.Raw_I_Limits[P2][axis];
		}
		else if (PID_Gyro_I_actual2 < -Config.Raw_I_Limits[P2][axis]) 
    838e:	89 01       	movw	r16, r18
    8390:	9a 01       	movw	r18, r20
    8392:	30 95       	com	r19
    8394:	20 95       	com	r18
    8396:	10 95       	com	r17
    8398:	01 95       	neg	r16
    839a:	1f 4f       	sbci	r17, 0xFF	; 255
    839c:	2f 4f       	sbci	r18, 0xFF	; 255
    839e:	3f 4f       	sbci	r19, 0xFF	; 255
    83a0:	6b 8f       	std	Y+27, r22	; 0x1b
    83a2:	7c 8f       	std	Y+28, r23	; 0x1c
    83a4:	8d 8f       	std	Y+29, r24	; 0x1d
    83a6:	9e 8f       	std	Y+30, r25	; 0x1e
    83a8:	60 17       	cp	r22, r16
    83aa:	71 07       	cpc	r23, r17
    83ac:	82 07       	cpc	r24, r18
    83ae:	93 07       	cpc	r25, r19
    83b0:	24 f4       	brge	.+8      	; 0x83ba <Calculate_PID+0x324>
    83b2:	0b 8f       	std	Y+27, r16	; 0x1b
    83b4:	1c 8f       	std	Y+28, r17	; 0x1c
    83b6:	2d 8f       	std	Y+29, r18	; 0x1d
    83b8:	3e 8f       	std	Y+30, r19	; 0x1e

		//************************************************************
		// Sum Gyro P, I and D terms and rescale
		//************************************************************

		PID_Gyros[P1][axis] = (int16_t)((PID_gyro_temp1 + PID_Gyro_I_actual1) >> PID_SCALE);  // PID_SCALE was 6, now 5
    83ba:	25 96       	adiw	r28, 0x05	; 5
    83bc:	4c ac       	ldd	r4, Y+60	; 0x3c
    83be:	5d ac       	ldd	r5, Y+61	; 0x3d
    83c0:	6e ac       	ldd	r6, Y+62	; 0x3e
    83c2:	7f ac       	ldd	r7, Y+63	; 0x3f
    83c4:	25 97       	sbiw	r28, 0x05	; 5
    83c6:	4c 0c       	add	r4, r12
    83c8:	5d 1c       	adc	r5, r13
    83ca:	6e 1c       	adc	r6, r14
    83cc:	7f 1c       	adc	r7, r15
    83ce:	a6 e0       	ldi	r26, 0x06	; 6
    83d0:	75 94       	asr	r7
    83d2:	67 94       	ror	r6
    83d4:	57 94       	ror	r5
    83d6:	47 94       	ror	r4
    83d8:	aa 95       	dec	r26
    83da:	d1 f7       	brne	.-12     	; 0x83d0 <Calculate_PID+0x33a>
    83dc:	eb a1       	ldd	r30, Y+35	; 0x23
    83de:	fc a1       	ldd	r31, Y+36	; 0x24
    83e0:	51 82       	std	Z+1, r5	; 0x01
    83e2:	40 82       	st	Z, r4
		PID_Gyros[P2][axis] = (int16_t)((PID_gyro_temp2 + PID_Gyro_I_actual2) >> PID_SCALE);
    83e4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    83e6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    83e8:	ad 8d       	ldd	r26, Y+29	; 0x1d
    83ea:	be 8d       	ldd	r27, Y+30	; 0x1e
    83ec:	88 0d       	add	r24, r8
    83ee:	99 1d       	adc	r25, r9
    83f0:	aa 1d       	adc	r26, r10
    83f2:	bb 1d       	adc	r27, r11
    83f4:	16 e0       	ldi	r17, 0x06	; 6
    83f6:	b5 95       	asr	r27
    83f8:	a7 95       	ror	r26
    83fa:	97 95       	ror	r25
    83fc:	87 95       	ror	r24
    83fe:	1a 95       	dec	r17
    8400:	d1 f7       	brne	.-12     	; 0x83f6 <Calculate_PID+0x360>
    8402:	97 83       	std	Z+7, r25	; 0x07
    8404:	86 83       	std	Z+6, r24	; 0x06

		//************************************************************
		// Calculate error from angle data and trim (roll and pitch only)
		//************************************************************

		if (axis < YAW)
    8406:	2a 96       	adiw	r28, 0x0a	; 10
    8408:	ff ad       	ldd	r31, Y+63	; 0x3f
    840a:	2a 97       	sbiw	r28, 0x0a	; 10
    840c:	f2 30       	cpi	r31, 0x02	; 2
    840e:	e9 f1       	breq	.+122    	; 0x848a <Calculate_PID+0x3f4>
		{
			// Do for P1 and P2
			for (i = P1; i <= P2; i++)
			{
				PID_acc_temp1 = angle[axis] - L_trim[i][axis];				// Offset angle with trim
    8410:	ef a1       	ldd	r30, Y+39	; 0x27
    8412:	f8 a5       	ldd	r31, Y+40	; 0x28
    8414:	40 81       	ld	r20, Z
    8416:	51 81       	ldd	r21, Z+1	; 0x01
    8418:	e9 a1       	ldd	r30, Y+33	; 0x21
    841a:	fa a1       	ldd	r31, Y+34	; 0x22
    841c:	80 81       	ld	r24, Z
    841e:	91 81       	ldd	r25, Z+1	; 0x01
    8420:	9a 01       	movw	r18, r20
    8422:	28 1b       	sub	r18, r24
    8424:	39 0b       	sbc	r19, r25
    8426:	a9 e0       	ldi	r26, 0x09	; 9
    8428:	b0 e0       	ldi	r27, 0x00	; 0
    842a:	ac 0f       	add	r26, r28
    842c:	bd 1f       	adc	r27, r29
    842e:	2b 96       	adiw	r28, 0x0b	; 11
    8430:	ee ad       	ldd	r30, Y+62	; 0x3e
    8432:	ff ad       	ldd	r31, Y+63	; 0x3f
    8434:	2b 97       	sbiw	r28, 0x0b	; 11
    8436:	ae 0f       	add	r26, r30
    8438:	bf 1f       	adc	r27, r31
				PID_acc_temp1 *= L_gain[i][axis];							// P-term of accelerometer (Max gain of 127)
    843a:	ac 91       	ld	r26, X
    843c:	bb 27       	eor	r27, r27
    843e:	a7 fd       	sbrc	r26, 7
    8440:	b0 95       	com	r27
    8442:	0e 94 6d 48 	call	0x90da	; 0x90da <__mulhisi3>
				PID_ACCs[i][axis] = (int16_t)(PID_acc_temp1 >> 8);			// Reduce and convert to integer
    8446:	bb 27       	eor	r27, r27
    8448:	97 fd       	sbrc	r25, 7
    844a:	ba 95       	dec	r27
    844c:	a9 2f       	mov	r26, r25
    844e:	98 2f       	mov	r25, r24
    8450:	87 2f       	mov	r24, r23
    8452:	ef 8d       	ldd	r30, Y+31	; 0x1f
    8454:	f8 a1       	ldd	r31, Y+32	; 0x20
    8456:	91 83       	std	Z+1, r25	; 0x01
    8458:	80 83       	st	Z, r24
		if (axis < YAW)
		{
			// Do for P1 and P2
			for (i = P1; i <= P2; i++)
			{
				PID_acc_temp1 = angle[axis] - L_trim[i][axis];				// Offset angle with trim
    845a:	e9 a1       	ldd	r30, Y+33	; 0x21
    845c:	fa a1       	ldd	r31, Y+34	; 0x22
    845e:	84 81       	ldd	r24, Z+4	; 0x04
    8460:	95 81       	ldd	r25, Z+5	; 0x05
    8462:	9a 01       	movw	r18, r20
    8464:	28 1b       	sub	r18, r24
    8466:	39 0b       	sbc	r19, r25
				PID_acc_temp1 *= L_gain[i][axis];							// P-term of accelerometer (Max gain of 127)
    8468:	f1 01       	movw	r30, r2
    846a:	a0 81       	ld	r26, Z
    846c:	bb 27       	eor	r27, r27
    846e:	a7 fd       	sbrc	r26, 7
    8470:	b0 95       	com	r27
    8472:	0e 94 6d 48 	call	0x90da	; 0x90da <__mulhisi3>
				PID_ACCs[i][axis] = (int16_t)(PID_acc_temp1 >> 8);			// Reduce and convert to integer
    8476:	bb 27       	eor	r27, r27
    8478:	97 fd       	sbrc	r25, 7
    847a:	ba 95       	dec	r27
    847c:	a9 2f       	mov	r26, r25
    847e:	98 2f       	mov	r25, r24
    8480:	87 2f       	mov	r24, r23
    8482:	ef 8d       	ldd	r30, Y+31	; 0x1f
    8484:	f8 a1       	ldd	r31, Y+32	; 0x20
    8486:	97 83       	std	Z+7, r25	; 0x07
    8488:	86 83       	std	Z+6, r24	; 0x06
	PID_AvgAccVert = 0;							// Reset average

	//************************************************************
	// PID loop
	//************************************************************
	for (axis = 0; axis <= YAW; axis ++)
    848a:	2b 96       	adiw	r28, 0x0b	; 11
    848c:	ee ad       	ldd	r30, Y+62	; 0x3e
    848e:	ff ad       	ldd	r31, Y+63	; 0x3f
    8490:	2b 97       	sbiw	r28, 0x0b	; 11
    8492:	32 97       	sbiw	r30, 0x02	; 2
    8494:	e1 f1       	breq	.+120    	; 0x850e <Calculate_PID+0x478>
	{
		//************************************************************
		// Add in gyro Yaw trim
		//************************************************************

		if (axis == YAW)
    8496:	2a 96       	adiw	r28, 0x0a	; 10
    8498:	ff ad       	ldd	r31, Y+63	; 0x3f
    849a:	2a 97       	sbiw	r28, 0x0a	; 10
    849c:	f1 30       	cpi	r31, 0x01	; 1
    849e:	39 f0       	breq	.+14     	; 0x84ae <Calculate_PID+0x418>
		}
		// Reset PID_gyro variables to that data does not accumulate cross-axis
		else
		{
			PID_gyro_temp1 = 0;
			PID_gyro_temp2 = 0;
    84a0:	81 2c       	mov	r8, r1
    84a2:	91 2c       	mov	r9, r1
    84a4:	54 01       	movw	r10, r8
			PID_gyro_temp2 = (int32_t)(Config.FlightMode[P2].Yaw_trim << 6);
		}
		// Reset PID_gyro variables to that data does not accumulate cross-axis
		else
		{
			PID_gyro_temp1 = 0;
    84a6:	80 e0       	ldi	r24, 0x00	; 0
    84a8:	90 e0       	ldi	r25, 0x00	; 0
    84aa:	dc 01       	movw	r26, r24
    84ac:	0a c0       	rjmp	.+20     	; 0x84c2 <Calculate_PID+0x42c>
		//************************************************************

		if (axis == YAW)
		{
			PID_gyro_temp1 = (int32_t)(Config.FlightMode[P1].Yaw_trim << 6);
			PID_gyro_temp2 = (int32_t)(Config.FlightMode[P2].Yaw_trim << 6);
    84ae:	21 96       	adiw	r28, 0x01	; 1
    84b0:	8c ac       	ldd	r8, Y+60	; 0x3c
    84b2:	9d ac       	ldd	r9, Y+61	; 0x3d
    84b4:	ae ac       	ldd	r10, Y+62	; 0x3e
    84b6:	bf ac       	ldd	r11, Y+63	; 0x3f
    84b8:	21 97       	sbiw	r28, 0x01	; 1
		// Add in gyro Yaw trim
		//************************************************************

		if (axis == YAW)
		{
			PID_gyro_temp1 = (int32_t)(Config.FlightMode[P1].Yaw_trim << 6);
    84ba:	89 ad       	ldd	r24, Y+57	; 0x39
    84bc:	9a ad       	ldd	r25, Y+58	; 0x3a
    84be:	ab ad       	ldd	r26, Y+59	; 0x3b
    84c0:	bc ad       	ldd	r27, Y+60	; 0x3c
    84c2:	2b 96       	adiw	r28, 0x0b	; 11
    84c4:	ee ad       	ldd	r30, Y+62	; 0x3e
    84c6:	ff ad       	ldd	r31, Y+63	; 0x3f
    84c8:	2b 97       	sbiw	r28, 0x0b	; 11
    84ca:	31 96       	adiw	r30, 0x01	; 1
    84cc:	2b 96       	adiw	r28, 0x0b	; 11
    84ce:	ff af       	std	Y+63, r31	; 0x3f
    84d0:	ee af       	std	Y+62, r30	; 0x3e
    84d2:	2b 97       	sbiw	r28, 0x0b	; 11
    84d4:	ed a1       	ldd	r30, Y+37	; 0x25
    84d6:	fe a1       	ldd	r31, Y+38	; 0x26
    84d8:	34 96       	adiw	r30, 0x04	; 4
    84da:	fe a3       	std	Y+38, r31	; 0x26
    84dc:	ed a3       	std	Y+37, r30	; 0x25
    84de:	eb a1       	ldd	r30, Y+35	; 0x23
    84e0:	fc a1       	ldd	r31, Y+36	; 0x24
    84e2:	32 96       	adiw	r30, 0x02	; 2
    84e4:	fc a3       	std	Y+36, r31	; 0x24
    84e6:	eb a3       	std	Y+35, r30	; 0x23
    84e8:	ef a1       	ldd	r30, Y+39	; 0x27
    84ea:	f8 a5       	ldd	r31, Y+40	; 0x28
    84ec:	32 96       	adiw	r30, 0x02	; 2
    84ee:	f8 a7       	std	Y+40, r31	; 0x28
    84f0:	ef a3       	std	Y+39, r30	; 0x27
    84f2:	e9 a1       	ldd	r30, Y+33	; 0x21
    84f4:	fa a1       	ldd	r31, Y+34	; 0x22
    84f6:	32 96       	adiw	r30, 0x02	; 2
    84f8:	fa a3       	std	Y+34, r31	; 0x22
    84fa:	e9 a3       	std	Y+33, r30	; 0x21
    84fc:	ef 8d       	ldd	r30, Y+31	; 0x1f
    84fe:	f8 a1       	ldd	r31, Y+32	; 0x20
    8500:	32 96       	adiw	r30, 0x02	; 2
    8502:	f8 a3       	std	Y+32, r31	; 0x20
    8504:	ef 8f       	std	Y+31, r30	; 0x1f
    8506:	ff ef       	ldi	r31, 0xFF	; 255
    8508:	2f 1a       	sub	r2, r31
    850a:	3f 0a       	sbc	r3, r31
    850c:	a8 ce       	rjmp	.-688    	; 0x825e <Calculate_PID+0x1c8>
	//************************************************************

	// Do for P1 and P2
	for (i = P1; i <= P2; i++)
	{
		PID_acc_temp1 = -AvAccVert;				// Get and copy Z-acc value. Negate to oppose G
    850e:	27 96       	adiw	r28, 0x07	; 7
    8510:	ce ac       	ldd	r12, Y+62	; 0x3e
    8512:	df ac       	ldd	r13, Y+63	; 0x3f
    8514:	27 97       	sbiw	r28, 0x07	; 7
    8516:	d1 94       	neg	r13
    8518:	c1 94       	neg	r12
    851a:	d1 08       	sbc	r13, r1

		PID_acc_temp1 *= L_gain[i][YAW];		// Multiply P-term (Max gain of 127)
    851c:	96 01       	movw	r18, r12
    851e:	f9 a5       	ldd	r31, Y+41	; 0x29
    8520:	af 2f       	mov	r26, r31
    8522:	bb 27       	eor	r27, r27
    8524:	a7 fd       	sbrc	r26, 7
    8526:	b0 95       	com	r27
    8528:	0e 94 6d 48 	call	0x90da	; 0x90da <__mulhisi3>

		PID_acc_temp1 = PID_acc_temp1 >> 4;		// Moderate Z-acc to reasonable values
    852c:	44 e0       	ldi	r20, 0x04	; 4
    852e:	95 95       	asr	r25
    8530:	87 95       	ror	r24
    8532:	77 95       	ror	r23
    8534:	67 95       	ror	r22
    8536:	4a 95       	dec	r20
    8538:	d1 f7       	brne	.-12     	; 0x852e <Calculate_PID+0x498>

		if (PID_acc_temp1 > MAX_ZGAIN)			// Limit to +/-MAX_ZGAIN
    853a:	65 3f       	cpi	r22, 0xF5	; 245
    853c:	21 e0       	ldi	r18, 0x01	; 1
    853e:	72 07       	cpc	r23, r18
    8540:	81 05       	cpc	r24, r1
    8542:	91 05       	cpc	r25, r1
    8544:	64 f4       	brge	.+24     	; 0x855e <Calculate_PID+0x4c8>
		{
			PID_acc_temp1 = MAX_ZGAIN;
		}
		if (PID_acc_temp1 < -MAX_ZGAIN)
    8546:	6c 30       	cpi	r22, 0x0C	; 12
    8548:	3e ef       	ldi	r19, 0xFE	; 254
    854a:	73 07       	cpc	r23, r19
    854c:	3f ef       	ldi	r19, 0xFF	; 255
    854e:	83 07       	cpc	r24, r19
    8550:	93 07       	cpc	r25, r19
    8552:	4c f4       	brge	.+18     	; 0x8566 <Calculate_PID+0x4d0>
		{
			PID_acc_temp1 = -MAX_ZGAIN;
    8554:	6c e0       	ldi	r22, 0x0C	; 12
    8556:	7e ef       	ldi	r23, 0xFE	; 254
    8558:	8f ef       	ldi	r24, 0xFF	; 255
    855a:	9f ef       	ldi	r25, 0xFF	; 255
    855c:	04 c0       	rjmp	.+8      	; 0x8566 <Calculate_PID+0x4d0>

		PID_acc_temp1 = PID_acc_temp1 >> 4;		// Moderate Z-acc to reasonable values

		if (PID_acc_temp1 > MAX_ZGAIN)			// Limit to +/-MAX_ZGAIN
		{
			PID_acc_temp1 = MAX_ZGAIN;
    855e:	64 ef       	ldi	r22, 0xF4	; 244
    8560:	71 e0       	ldi	r23, 0x01	; 1
    8562:	80 e0       	ldi	r24, 0x00	; 0
    8564:	90 e0       	ldi	r25, 0x00	; 0
		if (PID_acc_temp1 < -MAX_ZGAIN)
		{
			PID_acc_temp1 = -MAX_ZGAIN;
		}

		PID_ACCs[i][YAW] = (int16_t)PID_acc_temp1; // Copy to global values
    8566:	70 93 12 08 	sts	0x0812, r23
    856a:	60 93 11 08 	sts	0x0811, r22
	// Do for P1 and P2
	for (i = P1; i <= P2; i++)
	{
		PID_acc_temp1 = -AvAccVert;				// Get and copy Z-acc value. Negate to oppose G

		PID_acc_temp1 *= L_gain[i][YAW];		// Multiply P-term (Max gain of 127)
    856e:	96 01       	movw	r18, r12
    8570:	4a a5       	ldd	r20, Y+42	; 0x2a
    8572:	a4 2f       	mov	r26, r20
    8574:	bb 27       	eor	r27, r27
    8576:	a7 fd       	sbrc	r26, 7
    8578:	b0 95       	com	r27
    857a:	0e 94 6d 48 	call	0x90da	; 0x90da <__mulhisi3>

		PID_acc_temp1 = PID_acc_temp1 >> 4;		// Moderate Z-acc to reasonable values
    857e:	34 e0       	ldi	r19, 0x04	; 4
    8580:	95 95       	asr	r25
    8582:	87 95       	ror	r24
    8584:	77 95       	ror	r23
    8586:	67 95       	ror	r22
    8588:	3a 95       	dec	r19
    858a:	d1 f7       	brne	.-12     	; 0x8580 <Calculate_PID+0x4ea>

		if (PID_acc_temp1 > MAX_ZGAIN)			// Limit to +/-MAX_ZGAIN
    858c:	65 3f       	cpi	r22, 0xF5	; 245
    858e:	51 e0       	ldi	r21, 0x01	; 1
    8590:	75 07       	cpc	r23, r21
    8592:	81 05       	cpc	r24, r1
    8594:	91 05       	cpc	r25, r1
    8596:	64 f4       	brge	.+24     	; 0x85b0 <Calculate_PID+0x51a>
		{
			PID_acc_temp1 = MAX_ZGAIN;
		}
		if (PID_acc_temp1 < -MAX_ZGAIN)
    8598:	6c 30       	cpi	r22, 0x0C	; 12
    859a:	ae ef       	ldi	r26, 0xFE	; 254
    859c:	7a 07       	cpc	r23, r26
    859e:	af ef       	ldi	r26, 0xFF	; 255
    85a0:	8a 07       	cpc	r24, r26
    85a2:	9a 07       	cpc	r25, r26
    85a4:	4c f4       	brge	.+18     	; 0x85b8 <Calculate_PID+0x522>
		{
			PID_acc_temp1 = -MAX_ZGAIN;
    85a6:	6c e0       	ldi	r22, 0x0C	; 12
    85a8:	7e ef       	ldi	r23, 0xFE	; 254
    85aa:	8f ef       	ldi	r24, 0xFF	; 255
    85ac:	9f ef       	ldi	r25, 0xFF	; 255
    85ae:	04 c0       	rjmp	.+8      	; 0x85b8 <Calculate_PID+0x522>

		PID_acc_temp1 = PID_acc_temp1 >> 4;		// Moderate Z-acc to reasonable values

		if (PID_acc_temp1 > MAX_ZGAIN)			// Limit to +/-MAX_ZGAIN
		{
			PID_acc_temp1 = MAX_ZGAIN;
    85b0:	64 ef       	ldi	r22, 0xF4	; 244
    85b2:	71 e0       	ldi	r23, 0x01	; 1
    85b4:	80 e0       	ldi	r24, 0x00	; 0
    85b6:	90 e0       	ldi	r25, 0x00	; 0
		if (PID_acc_temp1 < -MAX_ZGAIN)
		{
			PID_acc_temp1 = -MAX_ZGAIN;
		}

		PID_ACCs[i][YAW] = (int16_t)PID_acc_temp1; // Copy to global values
    85b8:	70 93 18 08 	sts	0x0818, r23
    85bc:	60 93 17 08 	sts	0x0817, r22
	}
}
    85c0:	c6 5b       	subi	r28, 0xB6	; 182
    85c2:	df 4f       	sbci	r29, 0xFF	; 255
    85c4:	0f b6       	in	r0, 0x3f	; 63
    85c6:	f8 94       	cli
    85c8:	de bf       	out	0x3e, r29	; 62
    85ca:	0f be       	out	0x3f, r0	; 63
    85cc:	cd bf       	out	0x3d, r28	; 61
    85ce:	df 91       	pop	r29
    85d0:	cf 91       	pop	r28
    85d2:	1f 91       	pop	r17
    85d4:	0f 91       	pop	r16
    85d6:	ff 90       	pop	r15
    85d8:	ef 90       	pop	r14
    85da:	df 90       	pop	r13
    85dc:	cf 90       	pop	r12
    85de:	bf 90       	pop	r11
    85e0:	af 90       	pop	r10
    85e2:	9f 90       	pop	r9
    85e4:	8f 90       	pop	r8
    85e6:	7f 90       	pop	r7
    85e8:	6f 90       	pop	r6
    85ea:	5f 90       	pop	r5
    85ec:	4f 90       	pop	r4
    85ee:	3f 90       	pop	r3
    85f0:	2f 90       	pop	r2
    85f2:	08 95       	ret

000085f4 <RxGetChannels>:
volatile int16_t MonopolarThrottle;				// Monopolar throttle

// Get raw flight channel data (~2500 to 5000) and remove zero offset
// Use channel mapping for reconfigurability
void RxGetChannels(void)
{
    85f4:	eb e7       	ldi	r30, 0x7B	; 123
    85f6:	f7 e0       	ldi	r31, 0x07	; 7
	static	int16_t	OldRxSum;			// Sum of all major channels
	int16_t	RxSumDiff;
	int16_t	RxSum, i;

	// Remove zero offsets
	for (i=0; i < MAX_RC_CHANNELS; i++)
    85f8:	80 e0       	ldi	r24, 0x00	; 0
    85fa:	90 e0       	ldi	r25, 0x00	; 0
	{
		RCinputs[i]	= RxChannel[i] - Config.RxChannelZeroOffset[i];
    85fc:	ac 01       	movw	r20, r24
    85fe:	44 0f       	add	r20, r20
    8600:	55 1f       	adc	r21, r21
    8602:	da 01       	movw	r26, r20
    8604:	a6 55       	subi	r26, 0x56	; 86
    8606:	b8 4f       	sbci	r27, 0xF8	; 248
    8608:	2d 91       	ld	r18, X+
    860a:	3c 91       	ld	r19, X
    860c:	61 91       	ld	r22, Z+
    860e:	71 91       	ld	r23, Z+
    8610:	26 1b       	sub	r18, r22
    8612:	37 0b       	sbc	r19, r23
    8614:	da 01       	movw	r26, r20
    8616:	a5 5e       	subi	r26, 0xE5	; 229
    8618:	b7 4f       	sbci	r27, 0xF7	; 247
    861a:	11 96       	adiw	r26, 0x01	; 1
    861c:	3c 93       	st	X, r19
    861e:	2e 93       	st	-X, r18
	static	int16_t	OldRxSum;			// Sum of all major channels
	int16_t	RxSumDiff;
	int16_t	RxSum, i;

	// Remove zero offsets
	for (i=0; i < MAX_RC_CHANNELS; i++)
    8620:	01 96       	adiw	r24, 0x01	; 1
    8622:	88 30       	cpi	r24, 0x08	; 8
    8624:	91 05       	cpc	r25, r1
    8626:	51 f7       	brne	.-44     	; 0x85fc <RxGetChannels+0x8>
	{
		RCinputs[i]	= RxChannel[i] - Config.RxChannelZeroOffset[i];
	}

	// Special handling for monopolar throttle
	MonopolarThrottle = RxChannel[THROTTLE] - Config.RxChannelZeroOffset[THROTTLE];
    8628:	80 91 aa 07 	lds	r24, 0x07AA
    862c:	90 91 ab 07 	lds	r25, 0x07AB
    8630:	20 91 7b 07 	lds	r18, 0x077B
    8634:	30 91 7c 07 	lds	r19, 0x077C
    8638:	82 1b       	sub	r24, r18
    863a:	93 0b       	sbc	r25, r19
    863c:	90 93 1a 08 	sts	0x081A, r25
    8640:	80 93 19 08 	sts	0x0819, r24

	// Bipolar throttle must use the nominal mid-point
	RCinputs[THROTTLE] = RxChannel[THROTTLE] - 3750; 
    8644:	80 91 aa 07 	lds	r24, 0x07AA
    8648:	90 91 ab 07 	lds	r25, 0x07AB
    864c:	86 5a       	subi	r24, 0xA6	; 166
    864e:	9e 40       	sbci	r25, 0x0E	; 14
    8650:	90 93 1c 08 	sts	0x081C, r25
    8654:	80 93 1b 08 	sts	0x081B, r24

	// Reverse primary channels as requested
	if (Config.AileronPol == REVERSED)
    8658:	80 91 d1 05 	lds	r24, 0x05D1
    865c:	81 30       	cpi	r24, 0x01	; 1
    865e:	59 f4       	brne	.+22     	; 0x8676 <RxGetChannels+0x82>
	{
		RCinputs[AILERON] = -RCinputs[AILERON];
    8660:	80 91 1d 08 	lds	r24, 0x081D
    8664:	90 91 1e 08 	lds	r25, 0x081E
    8668:	91 95       	neg	r25
    866a:	81 95       	neg	r24
    866c:	91 09       	sbc	r25, r1
    866e:	90 93 1e 08 	sts	0x081E, r25
    8672:	80 93 1d 08 	sts	0x081D, r24
	}

	if (Config.ElevatorPol == REVERSED)
    8676:	80 91 d2 05 	lds	r24, 0x05D2
    867a:	81 30       	cpi	r24, 0x01	; 1
    867c:	59 f4       	brne	.+22     	; 0x8694 <RxGetChannels+0xa0>
	{
		RCinputs[ELEVATOR] = -RCinputs[ELEVATOR];
    867e:	80 91 1f 08 	lds	r24, 0x081F
    8682:	90 91 20 08 	lds	r25, 0x0820
    8686:	91 95       	neg	r25
    8688:	81 95       	neg	r24
    868a:	91 09       	sbc	r25, r1
    868c:	90 93 20 08 	sts	0x0820, r25
    8690:	80 93 1f 08 	sts	0x081F, r24
	}

	if (Config.RudderPol == REVERSED)
    8694:	80 91 32 06 	lds	r24, 0x0632
    8698:	81 30       	cpi	r24, 0x01	; 1
    869a:	59 f4       	brne	.+22     	; 0x86b2 <RxGetChannels+0xbe>
	{
		RCinputs[RUDDER] = -RCinputs[RUDDER];
    869c:	80 91 21 08 	lds	r24, 0x0821
    86a0:	90 91 22 08 	lds	r25, 0x0822
    86a4:	91 95       	neg	r25
    86a6:	81 95       	neg	r24
    86a8:	91 09       	sbc	r25, r1
    86aa:	90 93 22 08 	sts	0x0822, r25
    86ae:	80 93 21 08 	sts	0x0821, r24
	}

	// Calculate RX activity
	RxSum = RCinputs[AILERON] + RCinputs[ELEVATOR] + RCinputs[RUDDER];
    86b2:	80 91 1d 08 	lds	r24, 0x081D
    86b6:	90 91 1e 08 	lds	r25, 0x081E
    86ba:	40 91 1f 08 	lds	r20, 0x081F
    86be:	50 91 20 08 	lds	r21, 0x0820
    86c2:	20 91 21 08 	lds	r18, 0x0821
    86c6:	30 91 22 08 	lds	r19, 0x0822
    86ca:	84 0f       	add	r24, r20
    86cc:	95 1f       	adc	r25, r21
    86ce:	82 0f       	add	r24, r18
    86d0:	93 1f       	adc	r25, r19
	RxSumDiff = RxSum - OldRxSum;
    86d2:	20 91 32 05 	lds	r18, 0x0532
    86d6:	30 91 33 05 	lds	r19, 0x0533
    86da:	ac 01       	movw	r20, r24
    86dc:	42 1b       	sub	r20, r18
    86de:	53 0b       	sbc	r21, r19
    86e0:	9a 01       	movw	r18, r20

	// Set RX activity flag if movement above noise floor or throttle above minimum
	if ((RxSumDiff > NOISE_THRESH) || (RxSumDiff < -NOISE_THRESH) || (MonopolarThrottle > THROTTLEIDLE)) 
    86e2:	2b 5f       	subi	r18, 0xFB	; 251
    86e4:	3f 4f       	sbci	r19, 0xFF	; 255
    86e6:	2b 30       	cpi	r18, 0x0B	; 11
    86e8:	31 05       	cpc	r19, r1
    86ea:	38 f4       	brcc	.+14     	; 0x86fa <RxGetChannels+0x106>
    86ec:	20 91 19 08 	lds	r18, 0x0819
    86f0:	30 91 1a 08 	lds	r19, 0x081A
    86f4:	23 33       	cpi	r18, 0x33	; 51
    86f6:	31 05       	cpc	r19, r1
    86f8:	24 f0       	brlt	.+8      	; 0x8702 <RxGetChannels+0x10e>
	{
		Flight_flags |= (1 << RxActivity);
    86fa:	20 91 15 05 	lds	r18, 0x0515
    86fe:	21 60       	ori	r18, 0x01	; 1
    8700:	03 c0       	rjmp	.+6      	; 0x8708 <RxGetChannels+0x114>
	}
	else 
	{
		Flight_flags &= ~(1 << RxActivity);
    8702:	20 91 15 05 	lds	r18, 0x0515
    8706:	2e 7f       	andi	r18, 0xFE	; 254
    8708:	20 93 15 05 	sts	0x0515, r18
	}
	
	// Preset RCinputs[NOCHAN] for sanity
	RCinputs[NOCHAN] = 0;
    870c:	10 92 2c 08 	sts	0x082C, r1
    8710:	10 92 2b 08 	sts	0x082B, r1

	OldRxSum = RxSum;
    8714:	90 93 33 05 	sts	0x0533, r25
    8718:	80 93 32 05 	sts	0x0532, r24
    871c:	08 95       	ret

0000871e <CenterSticks>:
}

// Center sticks on request from Menu
void CenterSticks(void)		
{
    871e:	0f 93       	push	r16
    8720:	1f 93       	push	r17
    8722:	cf 93       	push	r28
    8724:	df 93       	push	r29
    8726:	cd b7       	in	r28, 0x3d	; 61
    8728:	de b7       	in	r29, 0x3e	; 62
    872a:	60 97       	sbiw	r28, 0x10	; 16
    872c:	0f b6       	in	r0, 0x3f	; 63
    872e:	f8 94       	cli
    8730:	de bf       	out	0x3e, r29	; 62
    8732:	0f be       	out	0x3f, r0	; 63
    8734:	cd bf       	out	0x3d, r28	; 61
	uint8_t i, j;
	uint16_t RxChannelZeroOffset[MAX_RC_CHANNELS] = {0,0,0,0,0,0,0,0};
    8736:	8e 01       	movw	r16, r28
    8738:	0f 5f       	subi	r16, 0xFF	; 255
    873a:	1f 4f       	sbci	r17, 0xFF	; 255
    873c:	80 e1       	ldi	r24, 0x10	; 16
    873e:	d8 01       	movw	r26, r16
    8740:	1d 92       	st	X+, r1
    8742:	8a 95       	dec	r24
    8744:	e9 f7       	brne	.-6      	; 0x8740 <CenterSticks+0x22>
    8746:	68 e0       	ldi	r22, 0x08	; 8
	OldRxSum = RxSum;
}

// Center sticks on request from Menu
void CenterSticks(void)		
{
    8748:	d8 01       	movw	r26, r16
    874a:	80 e0       	ldi	r24, 0x00	; 0
    874c:	90 e0       	ldi	r25, 0x00	; 0
	// RxChannel will auto-update every RC frame (normally 46Hz or so)
	for (i=0; i<8; i++)
	{
		for (j=0; j<MAX_RC_CHANNELS; j++)
		{
			RxChannelZeroOffset[j] += RxChannel[j];
    874e:	9c 01       	movw	r18, r24
    8750:	22 0f       	add	r18, r18
    8752:	33 1f       	adc	r19, r19
    8754:	26 55       	subi	r18, 0x56	; 86
    8756:	38 4f       	sbci	r19, 0xF8	; 248
    8758:	f9 01       	movw	r30, r18
    875a:	40 81       	ld	r20, Z
    875c:	51 81       	ldd	r21, Z+1	; 0x01
    875e:	2d 91       	ld	r18, X+
    8760:	3c 91       	ld	r19, X
    8762:	11 97       	sbiw	r26, 0x01	; 1
    8764:	24 0f       	add	r18, r20
    8766:	35 1f       	adc	r19, r21
    8768:	2d 93       	st	X+, r18
    876a:	3d 93       	st	X+, r19
    876c:	01 96       	adiw	r24, 0x01	; 1

	// Take an average of eight readings
	// RxChannel will auto-update every RC frame (normally 46Hz or so)
	for (i=0; i<8; i++)
	{
		for (j=0; j<MAX_RC_CHANNELS; j++)
    876e:	88 30       	cpi	r24, 0x08	; 8
    8770:	91 05       	cpc	r25, r1
    8772:	69 f7       	brne	.-38     	; 0x874e <CenterSticks+0x30>
    8774:	ff e7       	ldi	r31, 0x7F	; 127
    8776:	2a e1       	ldi	r18, 0x1A	; 26
    8778:	86 e0       	ldi	r24, 0x06	; 6
    877a:	f1 50       	subi	r31, 0x01	; 1
    877c:	20 40       	sbci	r18, 0x00	; 0
    877e:	80 40       	sbci	r24, 0x00	; 0
    8780:	e1 f7       	brne	.-8      	; 0x877a <CenterSticks+0x5c>
    8782:	00 c0       	rjmp	.+0      	; 0x8784 <CenterSticks+0x66>
    8784:	00 00       	nop
    8786:	61 50       	subi	r22, 0x01	; 1
	uint8_t i, j;
	uint16_t RxChannelZeroOffset[MAX_RC_CHANNELS] = {0,0,0,0,0,0,0,0};

	// Take an average of eight readings
	// RxChannel will auto-update every RC frame (normally 46Hz or so)
	for (i=0; i<8; i++)
    8788:	f9 f6       	brne	.-66     	; 0x8748 <CenterSticks+0x2a>
    878a:	ab e7       	ldi	r26, 0x7B	; 123
    878c:	b7 e0       	ldi	r27, 0x07	; 7
    878e:	9e 01       	movw	r18, r28
    8790:	2f 5e       	subi	r18, 0xEF	; 239
    8792:	3f 4f       	sbci	r19, 0xFF	; 255
    8794:	f8 01       	movw	r30, r16
		_delay_ms(100); // Wait for a new frame
	}

	for (i=0;i<MAX_RC_CHANNELS;i++)
	{
		Config.RxChannelZeroOffset[i] = ((RxChannelZeroOffset[i] + 4) >> 3); // Round and divide by 8
    8796:	81 91       	ld	r24, Z+
    8798:	91 91       	ld	r25, Z+
    879a:	04 96       	adiw	r24, 0x04	; 4
    879c:	43 e0       	ldi	r20, 0x03	; 3
    879e:	96 95       	lsr	r25
    87a0:	87 95       	ror	r24
    87a2:	4a 95       	dec	r20
    87a4:	e1 f7       	brne	.-8      	; 0x879e <CenterSticks+0x80>
    87a6:	8d 93       	st	X+, r24
    87a8:	9d 93       	st	X+, r25
			RxChannelZeroOffset[j] += RxChannel[j];
		}
		_delay_ms(100); // Wait for a new frame
	}

	for (i=0;i<MAX_RC_CHANNELS;i++)
    87aa:	e2 17       	cp	r30, r18
    87ac:	f3 07       	cpc	r31, r19
    87ae:	99 f7       	brne	.-26     	; 0x8796 <CenterSticks+0x78>
	{
		Config.RxChannelZeroOffset[i] = ((RxChannelZeroOffset[i] + 4) >> 3); // Round and divide by 8
	}

	Save_Config_to_EEPROM();
}
    87b0:	60 96       	adiw	r28, 0x10	; 16
    87b2:	0f b6       	in	r0, 0x3f	; 63
    87b4:	f8 94       	cli
    87b6:	de bf       	out	0x3e, r29	; 62
    87b8:	0f be       	out	0x3f, r0	; 63
    87ba:	cd bf       	out	0x3d, r28	; 61
    87bc:	df 91       	pop	r29
    87be:	cf 91       	pop	r28
    87c0:	1f 91       	pop	r17
    87c2:	0f 91       	pop	r16
	for (i=0;i<MAX_RC_CHANNELS;i++)
	{
		Config.RxChannelZeroOffset[i] = ((RxChannelZeroOffset[i] + 4) >> 3); // Round and divide by 8
	}

	Save_Config_to_EEPROM();
    87c4:	0c 94 88 16 	jmp	0x2d10	; 0x2d10 <Save_Config_to_EEPROM>

000087c8 <output_servo_ppm>:
//************************************************************

volatile uint16_t ServoOut[MAX_OUTPUTS];

void output_servo_ppm(uint8_t ServoFlag)
{
    87c8:	8f 92       	push	r8
    87ca:	9f 92       	push	r9
    87cc:	af 92       	push	r10
    87ce:	bf 92       	push	r11
    87d0:	df 92       	push	r13
    87d2:	ef 92       	push	r14
    87d4:	ff 92       	push	r15
    87d6:	0f 93       	push	r16
    87d8:	1f 93       	push	r17
    87da:	cf 93       	push	r28
    87dc:	df 93       	push	r29
    87de:	d8 2e       	mov	r13, r24
    87e0:	07 e3       	ldi	r16, 0x37	; 55
    87e2:	16 e0       	ldi	r17, 0x06	; 6
    87e4:	c0 e0       	ldi	r28, 0x00	; 0
    87e6:	d0 e0       	ldi	r29, 0x00	; 0
			temp = ((temp - 3750) >> 1) + 1500;
		}
		else
		{
			// Scale motor from 2500~5000 to 1000~2000
			temp = ((temp << 2) + 5) / 10; 	// Round and convert	
    87e8:	ea e0       	ldi	r30, 0x0A	; 10
    87ea:	8e 2e       	mov	r8, r30
    87ec:	91 2c       	mov	r9, r1
    87ee:	a1 2c       	mov	r10, r1
    87f0:	b1 2c       	mov	r11, r1
	uint8_t i = 0;

	// Re-span numbers from internal values to microseconds
	for (i = 0; i < MAX_OUTPUTS; i++)
	{
		temp = ServoOut[i];					// Promote to 32 bits
    87f2:	7e 01       	movw	r14, r28
    87f4:	ee 0c       	add	r14, r14
    87f6:	ff 1c       	adc	r15, r15
    87f8:	f7 01       	movw	r30, r14
    87fa:	e3 5d       	subi	r30, 0xD3	; 211
    87fc:	f7 4f       	sbci	r31, 0xF7	; 247
    87fe:	20 81       	ld	r18, Z
    8800:	31 81       	ldd	r19, Z+1	; 0x01
    8802:	a9 01       	movw	r20, r18
    8804:	60 e0       	ldi	r22, 0x00	; 0
    8806:	70 e0       	ldi	r23, 0x00	; 0

		// Check for motor marker and ignore if set
		if (Config.Channel[i].Motor_marker != MOTOR)
    8808:	f8 01       	movw	r30, r16
    880a:	80 81       	ld	r24, Z
    880c:	82 30       	cpi	r24, 0x02	; 2
    880e:	79 f0       	breq	.+30     	; 0x882e <output_servo_ppm+0x66>
		{
			// Scale servo from 2500~5000 to 875~2125
			temp = ((temp - 3750) >> 1) + 1500;
    8810:	9a 01       	movw	r18, r20
    8812:	ab 01       	movw	r20, r22
    8814:	26 5a       	subi	r18, 0xA6	; 166
    8816:	3e 40       	sbci	r19, 0x0E	; 14
    8818:	41 09       	sbc	r20, r1
    881a:	51 09       	sbc	r21, r1
    881c:	56 95       	lsr	r21
    881e:	47 95       	ror	r20
    8820:	37 95       	ror	r19
    8822:	27 95       	ror	r18
    8824:	24 52       	subi	r18, 0x24	; 36
    8826:	3a 4f       	sbci	r19, 0xFA	; 250
    8828:	4f 4f       	sbci	r20, 0xFF	; 255
    882a:	5f 4f       	sbci	r21, 0xFF	; 255
    882c:	11 c0       	rjmp	.+34     	; 0x8850 <output_servo_ppm+0x88>
		}
		else
		{
			// Scale motor from 2500~5000 to 1000~2000
			temp = ((temp << 2) + 5) / 10; 	// Round and convert	
    882e:	cb 01       	movw	r24, r22
    8830:	ba 01       	movw	r22, r20
    8832:	52 e0       	ldi	r21, 0x02	; 2
    8834:	66 0f       	add	r22, r22
    8836:	77 1f       	adc	r23, r23
    8838:	88 1f       	adc	r24, r24
    883a:	99 1f       	adc	r25, r25
    883c:	5a 95       	dec	r21
    883e:	d1 f7       	brne	.-12     	; 0x8834 <output_servo_ppm+0x6c>
    8840:	6b 5f       	subi	r22, 0xFB	; 251
    8842:	7f 4f       	sbci	r23, 0xFF	; 255
    8844:	8f 4f       	sbci	r24, 0xFF	; 255
    8846:	9f 4f       	sbci	r25, 0xFF	; 255
    8848:	a5 01       	movw	r20, r10
    884a:	94 01       	movw	r18, r8
    884c:	0e 94 26 48 	call	0x904c	; 0x904c <__udivmodsi4>
		}
		
		ServoOut[i] = (uint16_t)temp;
    8850:	f7 01       	movw	r30, r14
    8852:	e3 5d       	subi	r30, 0xD3	; 211
    8854:	f7 4f       	sbci	r31, 0xF7	; 247
    8856:	31 83       	std	Z+1, r19	; 0x01
    8858:	20 83       	st	Z, r18
    885a:	21 96       	adiw	r28, 0x01	; 1
    885c:	0a 5d       	subi	r16, 0xDA	; 218
    885e:	1f 4f       	sbci	r17, 0xFF	; 255
{
	uint32_t temp;
	uint8_t i = 0;

	// Re-span numbers from internal values to microseconds
	for (i = 0; i < MAX_OUTPUTS; i++)
    8860:	c8 30       	cpi	r28, 0x08	; 8
    8862:	d1 05       	cpc	r29, r1
    8864:	31 f6       	brne	.-116    	; 0x87f2 <output_servo_ppm+0x2a>
		
		ServoOut[i] = (uint16_t)temp;
	}

	// Re-sample throttle value
	MonopolarThrottle = RxChannel[THROTTLE] - Config.RxChannelZeroOffset[THROTTLE];
    8866:	80 91 aa 07 	lds	r24, 0x07AA
    886a:	90 91 ab 07 	lds	r25, 0x07AB
    886e:	20 91 7b 07 	lds	r18, 0x077B
    8872:	30 91 7c 07 	lds	r19, 0x077C
    8876:	82 1b       	sub	r24, r18
    8878:	93 0b       	sbc	r25, r19
    887a:	90 93 1a 08 	sts	0x081A, r25
    887e:	80 93 19 08 	sts	0x0819, r24

	// Check for motor flags if throttle is below arming minimum or disarmed
	// and set all motors to minimum throttle if so
	if 	(
			(MonopolarThrottle < THROTTLEIDLE) || 
    8882:	80 91 19 08 	lds	r24, 0x0819
    8886:	90 91 1a 08 	lds	r25, 0x081A
	// Re-sample throttle value
	MonopolarThrottle = RxChannel[THROTTLE] - Config.RxChannelZeroOffset[THROTTLE];

	// Check for motor flags if throttle is below arming minimum or disarmed
	// and set all motors to minimum throttle if so
	if 	(
    888a:	c2 97       	sbiw	r24, 0x32	; 50
    888c:	ac f0       	brlt	.+42     	; 0x88b8 <output_servo_ppm+0xf0>
			(MonopolarThrottle < THROTTLEIDLE) || 
			((General_error & (1 << DISARMED)) != 0)
    888e:	80 91 16 05 	lds	r24, 0x0516
	MonopolarThrottle = RxChannel[THROTTLE] - Config.RxChannelZeroOffset[THROTTLE];

	// Check for motor flags if throttle is below arming minimum or disarmed
	// and set all motors to minimum throttle if so
	if 	(
			(MonopolarThrottle < THROTTLEIDLE) || 
    8892:	82 fd       	sbrc	r24, 2
    8894:	11 c0       	rjmp	.+34     	; 0x88b8 <output_servo_ppm+0xf0>
		}
	}

	// Determine output rate based on device type
	// Suppress outputs during throttle high error
	if((General_error & (1 << THROTTLE_HIGH)) == 0)
    8896:	80 91 16 05 	lds	r24, 0x0516
    889a:	80 fd       	sbrc	r24, 0
    889c:	24 c0       	rjmp	.+72     	; 0x88e6 <output_servo_ppm+0x11e>
	{
		// Reset JitterFlag immediately before PWM generation
		JitterFlag = false;
    889e:	10 92 d5 07 	sts	0x07D5, r1
	
		// We now care about interrupts
		JitterGate = true;
    88a2:	81 e0       	ldi	r24, 0x01	; 1
    88a4:	80 93 d4 07 	sts	0x07D4, r24

		// Pass address of ServoOut array
		output_servo_ppm_asm(&ServoOut[0], ServoFlag);
    88a8:	6d 2d       	mov	r22, r13
    88aa:	8d e2       	ldi	r24, 0x2D	; 45
    88ac:	98 e0       	ldi	r25, 0x08	; 8
    88ae:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <output_servo_ppm_asm>
		
		// We no longer care about interrupts
		JitterGate = false;
    88b2:	10 92 d4 07 	sts	0x07D4, r1
    88b6:	17 c0       	rjmp	.+46     	; 0x88e6 <output_servo_ppm+0x11e>
//************************************************************

volatile uint16_t ServoOut[MAX_OUTPUTS];

void output_servo_ppm(uint8_t ServoFlag)
{
    88b8:	e7 e3       	ldi	r30, 0x37	; 55
    88ba:	f6 e0       	ldi	r31, 0x06	; 6
    88bc:	80 e0       	ldi	r24, 0x00	; 0
    88be:	90 e0       	ldi	r25, 0x00	; 0
		{
			// Check for motor marker
			if (Config.Channel[i].Motor_marker == MOTOR)
			{
				// Set output to minimum pulse width (1000us)
				ServoOut[i] = MOTORMIN;
    88c0:	28 ee       	ldi	r18, 0xE8	; 232
    88c2:	33 e0       	ldi	r19, 0x03	; 3
	{
		// For each output
		for (i = 0; i < MAX_OUTPUTS; i++)
		{
			// Check for motor marker
			if (Config.Channel[i].Motor_marker == MOTOR)
    88c4:	40 81       	ld	r20, Z
    88c6:	42 30       	cpi	r20, 0x02	; 2
    88c8:	41 f4       	brne	.+16     	; 0x88da <output_servo_ppm+0x112>
			{
				// Set output to minimum pulse width (1000us)
				ServoOut[i] = MOTORMIN;
    88ca:	dc 01       	movw	r26, r24
    88cc:	aa 0f       	add	r26, r26
    88ce:	bb 1f       	adc	r27, r27
    88d0:	a3 5d       	subi	r26, 0xD3	; 211
    88d2:	b7 4f       	sbci	r27, 0xF7	; 247
    88d4:	11 96       	adiw	r26, 0x01	; 1
    88d6:	3c 93       	st	X, r19
    88d8:	2e 93       	st	-X, r18
    88da:	01 96       	adiw	r24, 0x01	; 1
    88dc:	b6 96       	adiw	r30, 0x26	; 38
			(MonopolarThrottle < THROTTLEIDLE) || 
			((General_error & (1 << DISARMED)) != 0)
		)
	{
		// For each output
		for (i = 0; i < MAX_OUTPUTS; i++)
    88de:	88 30       	cpi	r24, 0x08	; 8
    88e0:	91 05       	cpc	r25, r1
    88e2:	81 f7       	brne	.-32     	; 0x88c4 <output_servo_ppm+0xfc>
    88e4:	d8 cf       	rjmp	.-80     	; 0x8896 <output_servo_ppm+0xce>
		output_servo_ppm_asm(&ServoOut[0], ServoFlag);
		
		// We no longer care about interrupts
		JitterGate = false;
	}
}
    88e6:	df 91       	pop	r29
    88e8:	cf 91       	pop	r28
    88ea:	1f 91       	pop	r17
    88ec:	0f 91       	pop	r16
    88ee:	ff 90       	pop	r15
    88f0:	ef 90       	pop	r14
    88f2:	df 90       	pop	r13
    88f4:	bf 90       	pop	r11
    88f6:	af 90       	pop	r10
    88f8:	9f 90       	pop	r9
    88fa:	8f 90       	pop	r8
    88fc:	08 95       	ret

000088fe <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
  TWSR = 0;                         /* no prescaler */
    88fe:	10 92 b9 00 	sts	0x00B9, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
    8902:	81 e1       	ldi	r24, 0x11	; 17
    8904:	80 93 b8 00 	sts	0x00B8, r24
    8908:	08 95       	ret

0000890a <i2c_start>:
{
	uint32_t  i2c_timer = 0;
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    890a:	94 ea       	ldi	r25, 0xA4	; 164
    890c:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
    8910:	4f ef       	ldi	r20, 0xFF	; 255
    8912:	50 e0       	ldi	r21, 0x00	; 0
    8914:	60 e0       	ldi	r22, 0x00	; 0
    8916:	70 e0       	ldi	r23, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    8918:	90 91 bc 00 	lds	r25, 0x00BC
    891c:	97 fd       	sbrc	r25, 7
    891e:	06 c0       	rjmp	.+12     	; 0x892c <i2c_start+0x22>
    8920:	41 50       	subi	r20, 0x01	; 1
    8922:	51 09       	sbc	r21, r1
    8924:	61 09       	sbc	r22, r1
    8926:	71 09       	sbc	r23, r1
    8928:	b8 f7       	brcc	.-18     	; 0x8918 <i2c_start+0xe>
    892a:	06 c0       	rjmp	.+12     	; 0x8938 <i2c_start+0x2e>
	if(i2c_timer == 0)
    892c:	45 2b       	or	r20, r21
    892e:	46 2b       	or	r20, r22
    8930:	47 2b       	or	r20, r23
    8932:	11 f4       	brne	.+4      	; 0x8938 <i2c_start+0x2e>
		return 1;
    8934:	81 e0       	ldi	r24, 0x01	; 1
    8936:	08 95       	ret

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    8938:	90 91 b9 00 	lds	r25, 0x00B9
    893c:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
    893e:	98 30       	cpi	r25, 0x08	; 8
    8940:	11 f0       	breq	.+4      	; 0x8946 <i2c_start+0x3c>
    8942:	90 31       	cpi	r25, 0x10	; 16
    8944:	b9 f7       	brne	.-18     	; 0x8934 <i2c_start+0x2a>

	// send device address
	TWDR = address;
    8946:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    894a:	84 e8       	ldi	r24, 0x84	; 132
    894c:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	i2c_timer = I2C_TIMER_DELAY;
    8950:	8f ef       	ldi	r24, 0xFF	; 255
    8952:	90 e0       	ldi	r25, 0x00	; 0
    8954:	a0 e0       	ldi	r26, 0x00	; 0
    8956:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    8958:	20 91 bc 00 	lds	r18, 0x00BC
    895c:	27 fd       	sbrc	r18, 7
    895e:	05 c0       	rjmp	.+10     	; 0x896a <i2c_start+0x60>
    8960:	01 97       	sbiw	r24, 0x01	; 1
    8962:	a1 09       	sbc	r26, r1
    8964:	b1 09       	sbc	r27, r1
    8966:	c0 f7       	brcc	.-16     	; 0x8958 <i2c_start+0x4e>
    8968:	04 c0       	rjmp	.+8      	; 0x8972 <i2c_start+0x68>
	if(i2c_timer == 0)
    896a:	89 2b       	or	r24, r25
    896c:	8a 2b       	or	r24, r26
    896e:	8b 2b       	or	r24, r27
    8970:	09 f3       	breq	.-62     	; 0x8934 <i2c_start+0x2a>
		return 1;

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    8972:	80 91 b9 00 	lds	r24, 0x00B9
    8976:	88 7f       	andi	r24, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
    8978:	88 31       	cpi	r24, 0x18	; 24
    897a:	11 f0       	breq	.+4      	; 0x8980 <i2c_start+0x76>
    897c:	80 34       	cpi	r24, 0x40	; 64
    897e:	d1 f6       	brne	.-76     	; 0x8934 <i2c_start+0x2a>

	return 0;
    8980:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */
    8982:	08 95       	ret

00008984 <i2c_start_wait>:
	uint8_t   twst;

    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    8984:	44 ea       	ldi	r20, 0xA4	; 164
    	twst = TW_STATUS & 0xF8;
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
    	TWCR = (1<<TWINT) | (1<<TWEN);
    8986:	54 e8       	ldi	r21, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    8988:	64 e9       	ldi	r22, 0x94	; 148
	uint8_t   twst;

    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    898a:	40 93 bc 00 	sts	0x00BC, r20
    
    	// wait until transmission completed
	    i2c_timer = I2C_TIMER_DELAY;
    	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    898e:	20 e0       	ldi	r18, 0x00	; 0
    8990:	30 e0       	ldi	r19, 0x00	; 0
    8992:	90 91 bc 00 	lds	r25, 0x00BC
    8996:	97 fd       	sbrc	r25, 7
    8998:	06 c0       	rjmp	.+12     	; 0x89a6 <i2c_start_wait+0x22>
    899a:	2f 5f       	subi	r18, 0xFF	; 255
    899c:	3f 4f       	sbci	r19, 0xFF	; 255
    899e:	21 15       	cp	r18, r1
    89a0:	91 e0       	ldi	r25, 0x01	; 1
    89a2:	39 07       	cpc	r19, r25
    89a4:	b1 f7       	brne	.-20     	; 0x8992 <i2c_start_wait+0xe>

    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    89a6:	90 91 b9 00 	lds	r25, 0x00B9
    89aa:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    89ac:	98 30       	cpi	r25, 0x08	; 8
    89ae:	11 f0       	breq	.+4      	; 0x89b4 <i2c_start_wait+0x30>
    89b0:	90 31       	cpi	r25, 0x10	; 16
    89b2:	59 f7       	brne	.-42     	; 0x898a <i2c_start_wait+0x6>
    
    	// send device address
    	TWDR = address;
    89b4:	80 93 bb 00 	sts	0x00BB, r24
    	TWCR = (1<<TWINT) | (1<<TWEN);
    89b8:	50 93 bc 00 	sts	0x00BC, r21
    
    	// wail until transmission completed
    	i2c_timer = I2C_TIMER_DELAY;
    	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    89bc:	20 e0       	ldi	r18, 0x00	; 0
    89be:	30 e0       	ldi	r19, 0x00	; 0
    89c0:	90 91 bc 00 	lds	r25, 0x00BC
    89c4:	97 fd       	sbrc	r25, 7
    89c6:	06 c0       	rjmp	.+12     	; 0x89d4 <i2c_start_wait+0x50>
    89c8:	2f 5f       	subi	r18, 0xFF	; 255
    89ca:	3f 4f       	sbci	r19, 0xFF	; 255
    89cc:	21 15       	cp	r18, r1
    89ce:	91 e0       	ldi	r25, 0x01	; 1
    89d0:	39 07       	cpc	r19, r25
    89d2:	b1 f7       	brne	.-20     	; 0x89c0 <i2c_start_wait+0x3c>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    89d4:	90 91 b9 00 	lds	r25, 0x00B9
    89d8:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    89da:	90 32       	cpi	r25, 0x20	; 32
    89dc:	11 f0       	breq	.+4      	; 0x89e2 <i2c_start_wait+0x5e>
    89de:	98 35       	cpi	r25, 0x58	; 88
    89e0:	79 f4       	brne	.+30     	; 0x8a00 <i2c_start_wait+0x7c>
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    89e2:	60 93 bc 00 	sts	0x00BC, r22
	        
	        // wait until stop condition is executed and bus released
	        i2c_timer = I2C_TIMER_DELAY;
	        while((TWCR & (1<<TWSTO)) && i2c_timer--);
    89e6:	20 e0       	ldi	r18, 0x00	; 0
    89e8:	30 e0       	ldi	r19, 0x00	; 0
    89ea:	90 91 bc 00 	lds	r25, 0x00BC
    89ee:	94 ff       	sbrs	r25, 4
    89f0:	cc cf       	rjmp	.-104    	; 0x898a <i2c_start_wait+0x6>
    89f2:	2f 5f       	subi	r18, 0xFF	; 255
    89f4:	3f 4f       	sbci	r19, 0xFF	; 255
    89f6:	21 15       	cp	r18, r1
    89f8:	91 e0       	ldi	r25, 0x01	; 1
    89fa:	39 07       	cpc	r19, r25
    89fc:	b1 f7       	brne	.-20     	; 0x89ea <i2c_start_wait+0x66>
    89fe:	c5 cf       	rjmp	.-118    	; 0x898a <i2c_start_wait+0x6>
    8a00:	08 95       	ret

00008a02 <i2c_rep_start>:
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );
    8a02:	0c 94 85 44 	jmp	0x890a	; 0x890a <i2c_start>

00008a06 <i2c_stop>:
void i2c_stop(void)
{
	uint32_t  i2c_timer = 0;

    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    8a06:	84 e9       	ldi	r24, 0x94	; 148
    8a08:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait until stop condition is executed and bus released
	i2c_timer = I2C_TIMER_DELAY;
	while((TWCR & (1<<TWSTO)) && i2c_timer--);
    8a0c:	80 e0       	ldi	r24, 0x00	; 0
    8a0e:	90 e0       	ldi	r25, 0x00	; 0
    8a10:	20 91 bc 00 	lds	r18, 0x00BC
    8a14:	24 ff       	sbrs	r18, 4
    8a16:	05 c0       	rjmp	.+10     	; 0x8a22 <i2c_stop+0x1c>
    8a18:	01 96       	adiw	r24, 0x01	; 1
    8a1a:	81 15       	cp	r24, r1
    8a1c:	21 e0       	ldi	r18, 0x01	; 1
    8a1e:	92 07       	cpc	r25, r18
    8a20:	b9 f7       	brne	.-18     	; 0x8a10 <i2c_stop+0xa>
    8a22:	08 95       	ret

00008a24 <i2c_write>:
{	
	uint32_t  i2c_timer = 0;
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    8a24:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    8a28:	84 e8       	ldi	r24, 0x84	; 132
    8a2a:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
    8a2e:	8f ef       	ldi	r24, 0xFF	; 255
    8a30:	90 e0       	ldi	r25, 0x00	; 0
    8a32:	a0 e0       	ldi	r26, 0x00	; 0
    8a34:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    8a36:	20 91 bc 00 	lds	r18, 0x00BC
    8a3a:	27 fd       	sbrc	r18, 7
    8a3c:	05 c0       	rjmp	.+10     	; 0x8a48 <i2c_write+0x24>
    8a3e:	01 97       	sbiw	r24, 0x01	; 1
    8a40:	a1 09       	sbc	r26, r1
    8a42:	b1 09       	sbc	r27, r1
    8a44:	c0 f7       	brcc	.-16     	; 0x8a36 <i2c_write+0x12>
    8a46:	04 c0       	rjmp	.+8      	; 0x8a50 <i2c_write+0x2c>
	if(i2c_timer == 0)
    8a48:	89 2b       	or	r24, r25
    8a4a:	8a 2b       	or	r24, r26
    8a4c:	8b 2b       	or	r24, r27
    8a4e:	41 f0       	breq	.+16     	; 0x8a60 <i2c_write+0x3c>
		return 1;

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    8a50:	90 91 b9 00 	lds	r25, 0x00B9
    8a54:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
    8a56:	81 e0       	ldi	r24, 0x01	; 1
    8a58:	98 32       	cpi	r25, 0x28	; 40
    8a5a:	19 f4       	brne	.+6      	; 0x8a62 <i2c_write+0x3e>
    8a5c:	80 e0       	ldi	r24, 0x00	; 0
    8a5e:	08 95       	ret

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 1;
    8a60:	81 e0       	ldi	r24, 0x01	; 1
	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
    8a62:	08 95       	ret

00008a64 <i2c_readAck>:
*************************************************************************/
unsigned char i2c_readAck(void)
{
	uint32_t  i2c_timer = 0;

	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    8a64:	84 ec       	ldi	r24, 0xC4	; 196
    8a66:	80 93 bc 00 	sts	0x00BC, r24
	i2c_timer = I2C_TIMER_DELAY;
    8a6a:	8f ef       	ldi	r24, 0xFF	; 255
    8a6c:	90 e0       	ldi	r25, 0x00	; 0
    8a6e:	a0 e0       	ldi	r26, 0x00	; 0
    8a70:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    8a72:	20 91 bc 00 	lds	r18, 0x00BC
    8a76:	27 fd       	sbrc	r18, 7
    8a78:	05 c0       	rjmp	.+10     	; 0x8a84 <i2c_readAck+0x20>
    8a7a:	01 97       	sbiw	r24, 0x01	; 1
    8a7c:	a1 09       	sbc	r26, r1
    8a7e:	b1 09       	sbc	r27, r1
    8a80:	c0 f7       	brcc	.-16     	; 0x8a72 <i2c_readAck+0xe>
    8a82:	04 c0       	rjmp	.+8      	; 0x8a8c <i2c_readAck+0x28>
	if(i2c_timer == 0)
    8a84:	89 2b       	or	r24, r25
    8a86:	8a 2b       	or	r24, r26
    8a88:	8b 2b       	or	r24, r27
    8a8a:	19 f0       	breq	.+6      	; 0x8a92 <i2c_readAck+0x2e>
		return 0;

    return TWDR;
    8a8c:	80 91 bb 00 	lds	r24, 0x00BB
    8a90:	08 95       	ret

	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 0;
    8a92:	80 e0       	ldi	r24, 0x00	; 0

    return TWDR;

}/* i2c_readAck */
    8a94:	08 95       	ret

00008a96 <i2c_readNak>:
*************************************************************************/
unsigned char i2c_readNak(void)
{
	uint32_t  i2c_timer = 0;

	TWCR = (1<<TWINT) | (1<<TWEN);
    8a96:	84 e8       	ldi	r24, 0x84	; 132
    8a98:	80 93 bc 00 	sts	0x00BC, r24
	i2c_timer = I2C_TIMER_DELAY;
    8a9c:	8f ef       	ldi	r24, 0xFF	; 255
    8a9e:	90 e0       	ldi	r25, 0x00	; 0
    8aa0:	a0 e0       	ldi	r26, 0x00	; 0
    8aa2:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    8aa4:	20 91 bc 00 	lds	r18, 0x00BC
    8aa8:	27 fd       	sbrc	r18, 7
    8aaa:	05 c0       	rjmp	.+10     	; 0x8ab6 <i2c_readNak+0x20>
    8aac:	01 97       	sbiw	r24, 0x01	; 1
    8aae:	a1 09       	sbc	r26, r1
    8ab0:	b1 09       	sbc	r27, r1
    8ab2:	c0 f7       	brcc	.-16     	; 0x8aa4 <i2c_readNak+0xe>
    8ab4:	04 c0       	rjmp	.+8      	; 0x8abe <i2c_readNak+0x28>
	if(i2c_timer == 0)
    8ab6:	89 2b       	or	r24, r25
    8ab8:	8a 2b       	or	r24, r26
    8aba:	8b 2b       	or	r24, r27
    8abc:	19 f0       	breq	.+6      	; 0x8ac4 <i2c_readNak+0x2e>
		return 0;
	
    return TWDR;
    8abe:	80 91 bb 00 	lds	r24, 0x00BB
    8ac2:	08 95       	ret

	TWCR = (1<<TWINT) | (1<<TWEN);
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 0;
    8ac4:	80 e0       	ldi	r24, 0x00	; 0
	
    return TWDR;

}/* i2c_readNak */
    8ac6:	08 95       	ret

00008ac8 <init_uart>:
#define BAUD_PRESCALE_SPEKTRUM ((F_CPU + USART_BAUDRATE_SPEKTRUM * 8L) / (USART_BAUDRATE_SPEKTRUM * 16L) - 1) // Default RX rate for Spektrum

// Initialise UART with adjusted bitrate
void init_uart(void)
{
	cli();								// Atmel wants global interrupts disabled when changing UART setup on the fly
    8ac8:	f8 94       	cli
	
	UCSR0B &= ~(1 << RXCIE0);			// Disable serial interrupt
    8aca:	80 91 c1 00 	lds	r24, 0x00C1
    8ace:	8f 77       	andi	r24, 0x7F	; 127
    8ad0:	80 93 c1 00 	sts	0x00C1, r24

	while (UCSR0A & (1 << RXC0))		// Make sure there is nothing in the RX0 reg
    8ad4:	80 91 c0 00 	lds	r24, 0x00C0
    8ad8:	87 ff       	sbrs	r24, 7
    8ada:	05 c0       	rjmp	.+10     	; 0x8ae6 <init_uart+0x1e>
	{
		UCSR0C = UDR0;					// So as not to annoy Studio 6, use UCSR0C as a temp reg until UDR0 empty. Sorry, UCSR0C...
    8adc:	80 91 c6 00 	lds	r24, 0x00C6
    8ae0:	80 93 c2 00 	sts	0x00C2, r24
    8ae4:	f7 cf       	rjmp	.-18     	; 0x8ad4 <init_uart+0xc>
	}
	
	// Reset UART regs to a known state
	UCSR0A = 0; // U2X = 0, no master mode, flags cleared 
    8ae6:	10 92 c0 00 	sts	0x00C0, r1
	UCSR0B = 0; // Clear flags, disable tx/rx, 8 bits
    8aea:	10 92 c1 00 	sts	0x00C1, r1
	UCSR0C = 6; // 8N1
    8aee:	86 e0       	ldi	r24, 0x06	; 6
    8af0:	80 93 c2 00 	sts	0x00C2, r24

	switch (Config.RxMode)
    8af4:	80 91 ca 05 	lds	r24, 0x05CA
    8af8:	82 30       	cpi	r24, 0x02	; 2
    8afa:	09 f1       	breq	.+66     	; 0x8b3e <init_uart+0x76>
    8afc:	34 f4       	brge	.+12     	; 0x8b0a <init_uart+0x42>
    8afe:	87 fd       	sbrc	r24, 7
    8b00:	41 c0       	rjmp	.+130    	; 0x8b84 <init_uart+0xbc>
			UCSR0B |=  (1 << RXCIE0);					// Enable serial interrupt
			break;

		case CPPM_MODE:
		case PWM:
			UCSR0B &= 	~(1 << RXEN0);					// Disable receiver in PWM and CPPM modes
    8b02:	80 91 c1 00 	lds	r24, 0x00C1
    8b06:	8f 7e       	andi	r24, 0xEF	; 239
    8b08:	3b c0       	rjmp	.+118    	; 0x8b80 <init_uart+0xb8>
	// Reset UART regs to a known state
	UCSR0A = 0; // U2X = 0, no master mode, flags cleared 
	UCSR0B = 0; // Clear flags, disable tx/rx, 8 bits
	UCSR0C = 6; // 8N1

	switch (Config.RxMode)
    8b0a:	83 30       	cpi	r24, 0x03	; 3
    8b0c:	d9 f5       	brne	.+118    	; 0x8b84 <init_uart+0xbc>
			UCSR0B |=  (1 << RXCIE0);					// Enable serial interrupt
			break;

		// Spektrum 8N1 (8 data bits / No parity / 1 stop bit / 115.2Kbps)
		case SPEKTRUM: 	
			UCSR0A &=  ~(1 << U2X0);					// Clear the 2x flag
    8b0e:	80 91 c0 00 	lds	r24, 0x00C0
    8b12:	8d 7f       	andi	r24, 0xFD	; 253
    8b14:	80 93 c0 00 	sts	0x00C0, r24
			UBRR0H  =  (BAUD_PRESCALE_SPEKTRUM >> 8); 	// Actual = 113636, Error = -1.36%
    8b18:	10 92 c5 00 	sts	0x00C5, r1
			UBRR0L  =   BAUD_PRESCALE_SPEKTRUM & 0xff;	// 0x0A (10.35)	
    8b1c:	8a e0       	ldi	r24, 0x0A	; 10
    8b1e:	80 93 c4 00 	sts	0x00C4, r24
			UCSR0B |= 	(1 << RXEN0);					// Enable receiver
    8b22:	80 91 c1 00 	lds	r24, 0x00C1
    8b26:	80 61       	ori	r24, 0x10	; 16
    8b28:	80 93 c1 00 	sts	0x00C1, r24
			UCSR0C &=  ~(1 << USBS0); 					// 1 stop bit
    8b2c:	80 91 c2 00 	lds	r24, 0x00C2
    8b30:	87 7f       	andi	r24, 0xF7	; 247
    8b32:	80 93 c2 00 	sts	0x00C2, r24
			UCSR0C &=  ~(1 << UPM00) | 					// No parity 
    8b36:	80 91 c2 00 	lds	r24, 0x00C2
    8b3a:	8f 7e       	andi	r24, 0xEF	; 239
    8b3c:	1c c0       	rjmp	.+56     	; 0x8b76 <init_uart+0xae>

	switch (Config.RxMode)
	{
		// Futaba S-Bus 8E2 (8 data bits / Even parity / 2 stop bits / 100Kbps)
		case SBUS: 		
			UCSR0A |=  (1 << U2X0);						// Need to set the 2x flag
    8b3e:	80 91 c0 00 	lds	r24, 0x00C0
    8b42:	82 60       	ori	r24, 0x02	; 2
    8b44:	80 93 c0 00 	sts	0x00C0, r24
			UBRR0H  = (BAUD_PRESCALE_SBUS >> 8);  		// Actual = 100000 , Error = 0%	
    8b48:	10 92 c5 00 	sts	0x00C5, r1
			UBRR0L  =  BAUD_PRESCALE_SBUS & 0xff;		// 0x18 (24)
    8b4c:	88 e1       	ldi	r24, 0x18	; 24
    8b4e:	80 93 c4 00 	sts	0x00C4, r24
			UCSR0B |=  (1 << RXEN0);					// Enable receiver
    8b52:	80 91 c1 00 	lds	r24, 0x00C1
    8b56:	80 61       	ori	r24, 0x10	; 16
    8b58:	80 93 c1 00 	sts	0x00C1, r24
			UCSR0C |=  (1 << USBS0); 					// 2 stop bits
    8b5c:	80 91 c2 00 	lds	r24, 0x00C2
    8b60:	88 60       	ori	r24, 0x08	; 8
    8b62:	80 93 c2 00 	sts	0x00C2, r24
			UCSR0C &= ~(1 << UPM00); 					// Even parity 
    8b66:	80 91 c2 00 	lds	r24, 0x00C2
    8b6a:	8f 7e       	andi	r24, 0xEF	; 239
    8b6c:	80 93 c2 00 	sts	0x00C2, r24
			UCSR0C |=  (1 << UPM01); 
    8b70:	80 91 c2 00 	lds	r24, 0x00C2
    8b74:	80 62       	ori	r24, 0x20	; 32
			UCSR0A &=  ~(1 << U2X0);					// Clear the 2x flag
			UBRR0H  =  (BAUD_PRESCALE_SPEKTRUM >> 8); 	// Actual = 113636, Error = -1.36%
			UBRR0L  =   BAUD_PRESCALE_SPEKTRUM & 0xff;	// 0x0A (10.35)	
			UCSR0B |= 	(1 << RXEN0);					// Enable receiver
			UCSR0C &=  ~(1 << USBS0); 					// 1 stop bit
			UCSR0C &=  ~(1 << UPM00) | 					// No parity 
    8b76:	80 93 c2 00 	sts	0x00C2, r24
						(1 << UPM01); 
			UCSR0B |=  (1 << RXCIE0);					// Enable serial interrupt
    8b7a:	80 91 c1 00 	lds	r24, 0x00C1
    8b7e:	80 68       	ori	r24, 0x80	; 128
			break;

		case CPPM_MODE:
		case PWM:
			UCSR0B &= 	~(1 << RXEN0);					// Disable receiver in PWM and CPPM modes
    8b80:	80 93 c1 00 	sts	0x00C1, r24
		default:
			break;
	}

	// Re-enable interrupts
	sei();
    8b84:	78 94       	sei
    8b86:	08 95       	ret

00008b88 <GetVbat>:

uint16_t GetVbat(void)				// Get battery voltage (VBAT on ADC3)
{
	uint16_t	vBat;				// Battery voltage
		
	read_adc(AIN_VBAT1);				// Multiplication factor = (Display volts / 1024) / (Vbat / 11 / Vref)
    8b88:	83 e0       	ldi	r24, 0x03	; 3
    8b8a:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <read_adc>
	// For Vref = 2.45V, Multiplication factor = 2.632
	// For Vref = 2.305V, Multiplication factor = approx 2.5
	// An input voltage of 10V will results in a value of 999.
	// This means that the number represents units of 10mV.

	vBat = ADCW;
    8b8e:	80 91 78 00 	lds	r24, 0x0078
    8b92:	90 91 79 00 	lds	r25, 0x0079

	// Multiply by 2.578125
	// 2 + 1/2 + 1/16 + 1/64
	vBat = (vBat << 1) + (vBat >> 1) + (vBat >> 4) + (vBat >> 6); // Multiply by 2.578125
    8b96:	9c 01       	movw	r18, r24
    8b98:	36 95       	lsr	r19
    8b9a:	27 95       	ror	r18
    8b9c:	ac 01       	movw	r20, r24
    8b9e:	44 0f       	add	r20, r20
    8ba0:	55 1f       	adc	r21, r21
    8ba2:	24 0f       	add	r18, r20
    8ba4:	35 1f       	adc	r19, r21
    8ba6:	ac 01       	movw	r20, r24
    8ba8:	74 e0       	ldi	r23, 0x04	; 4
    8baa:	56 95       	lsr	r21
    8bac:	47 95       	ror	r20
    8bae:	7a 95       	dec	r23
    8bb0:	e1 f7       	brne	.-8      	; 0x8baa <GetVbat+0x22>
    8bb2:	24 0f       	add	r18, r20
    8bb4:	35 1f       	adc	r19, r21
    8bb6:	e6 e0       	ldi	r30, 0x06	; 6
    8bb8:	96 95       	lsr	r25
    8bba:	87 95       	ror	r24
    8bbc:	ea 95       	dec	r30
    8bbe:	e1 f7       	brne	.-8      	; 0x8bb8 <GetVbat+0x30>

	return vBat;
}
    8bc0:	82 0f       	add	r24, r18
    8bc2:	93 1f       	adc	r25, r19
    8bc4:	08 95       	ret

00008bc6 <__subsf3>:
    8bc6:	50 58       	subi	r21, 0x80	; 128

00008bc8 <__addsf3>:
    8bc8:	bb 27       	eor	r27, r27
    8bca:	aa 27       	eor	r26, r26
    8bcc:	0e d0       	rcall	.+28     	; 0x8bea <__addsf3x>
    8bce:	75 c1       	rjmp	.+746    	; 0x8eba <__fp_round>
    8bd0:	66 d1       	rcall	.+716    	; 0x8e9e <__fp_pscA>
    8bd2:	30 f0       	brcs	.+12     	; 0x8be0 <__addsf3+0x18>
    8bd4:	6b d1       	rcall	.+726    	; 0x8eac <__fp_pscB>
    8bd6:	20 f0       	brcs	.+8      	; 0x8be0 <__addsf3+0x18>
    8bd8:	31 f4       	brne	.+12     	; 0x8be6 <__addsf3+0x1e>
    8bda:	9f 3f       	cpi	r25, 0xFF	; 255
    8bdc:	11 f4       	brne	.+4      	; 0x8be2 <__addsf3+0x1a>
    8bde:	1e f4       	brtc	.+6      	; 0x8be6 <__addsf3+0x1e>
    8be0:	5b c1       	rjmp	.+694    	; 0x8e98 <__fp_nan>
    8be2:	0e f4       	brtc	.+2      	; 0x8be6 <__addsf3+0x1e>
    8be4:	e0 95       	com	r30
    8be6:	e7 fb       	bst	r30, 7
    8be8:	51 c1       	rjmp	.+674    	; 0x8e8c <__fp_inf>

00008bea <__addsf3x>:
    8bea:	e9 2f       	mov	r30, r25
    8bec:	77 d1       	rcall	.+750    	; 0x8edc <__fp_split3>
    8bee:	80 f3       	brcs	.-32     	; 0x8bd0 <__addsf3+0x8>
    8bf0:	ba 17       	cp	r27, r26
    8bf2:	62 07       	cpc	r22, r18
    8bf4:	73 07       	cpc	r23, r19
    8bf6:	84 07       	cpc	r24, r20
    8bf8:	95 07       	cpc	r25, r21
    8bfa:	18 f0       	brcs	.+6      	; 0x8c02 <__addsf3x+0x18>
    8bfc:	71 f4       	brne	.+28     	; 0x8c1a <__addsf3x+0x30>
    8bfe:	9e f5       	brtc	.+102    	; 0x8c66 <__addsf3x+0x7c>
    8c00:	8f c1       	rjmp	.+798    	; 0x8f20 <__fp_zero>
    8c02:	0e f4       	brtc	.+2      	; 0x8c06 <__addsf3x+0x1c>
    8c04:	e0 95       	com	r30
    8c06:	0b 2e       	mov	r0, r27
    8c08:	ba 2f       	mov	r27, r26
    8c0a:	a0 2d       	mov	r26, r0
    8c0c:	0b 01       	movw	r0, r22
    8c0e:	b9 01       	movw	r22, r18
    8c10:	90 01       	movw	r18, r0
    8c12:	0c 01       	movw	r0, r24
    8c14:	ca 01       	movw	r24, r20
    8c16:	a0 01       	movw	r20, r0
    8c18:	11 24       	eor	r1, r1
    8c1a:	ff 27       	eor	r31, r31
    8c1c:	59 1b       	sub	r21, r25
    8c1e:	99 f0       	breq	.+38     	; 0x8c46 <__addsf3x+0x5c>
    8c20:	59 3f       	cpi	r21, 0xF9	; 249
    8c22:	50 f4       	brcc	.+20     	; 0x8c38 <__addsf3x+0x4e>
    8c24:	50 3e       	cpi	r21, 0xE0	; 224
    8c26:	68 f1       	brcs	.+90     	; 0x8c82 <__addsf3x+0x98>
    8c28:	1a 16       	cp	r1, r26
    8c2a:	f0 40       	sbci	r31, 0x00	; 0
    8c2c:	a2 2f       	mov	r26, r18
    8c2e:	23 2f       	mov	r18, r19
    8c30:	34 2f       	mov	r19, r20
    8c32:	44 27       	eor	r20, r20
    8c34:	58 5f       	subi	r21, 0xF8	; 248
    8c36:	f3 cf       	rjmp	.-26     	; 0x8c1e <__addsf3x+0x34>
    8c38:	46 95       	lsr	r20
    8c3a:	37 95       	ror	r19
    8c3c:	27 95       	ror	r18
    8c3e:	a7 95       	ror	r26
    8c40:	f0 40       	sbci	r31, 0x00	; 0
    8c42:	53 95       	inc	r21
    8c44:	c9 f7       	brne	.-14     	; 0x8c38 <__addsf3x+0x4e>
    8c46:	7e f4       	brtc	.+30     	; 0x8c66 <__addsf3x+0x7c>
    8c48:	1f 16       	cp	r1, r31
    8c4a:	ba 0b       	sbc	r27, r26
    8c4c:	62 0b       	sbc	r22, r18
    8c4e:	73 0b       	sbc	r23, r19
    8c50:	84 0b       	sbc	r24, r20
    8c52:	ba f0       	brmi	.+46     	; 0x8c82 <__addsf3x+0x98>
    8c54:	91 50       	subi	r25, 0x01	; 1
    8c56:	a1 f0       	breq	.+40     	; 0x8c80 <__addsf3x+0x96>
    8c58:	ff 0f       	add	r31, r31
    8c5a:	bb 1f       	adc	r27, r27
    8c5c:	66 1f       	adc	r22, r22
    8c5e:	77 1f       	adc	r23, r23
    8c60:	88 1f       	adc	r24, r24
    8c62:	c2 f7       	brpl	.-16     	; 0x8c54 <__addsf3x+0x6a>
    8c64:	0e c0       	rjmp	.+28     	; 0x8c82 <__addsf3x+0x98>
    8c66:	ba 0f       	add	r27, r26
    8c68:	62 1f       	adc	r22, r18
    8c6a:	73 1f       	adc	r23, r19
    8c6c:	84 1f       	adc	r24, r20
    8c6e:	48 f4       	brcc	.+18     	; 0x8c82 <__addsf3x+0x98>
    8c70:	87 95       	ror	r24
    8c72:	77 95       	ror	r23
    8c74:	67 95       	ror	r22
    8c76:	b7 95       	ror	r27
    8c78:	f7 95       	ror	r31
    8c7a:	9e 3f       	cpi	r25, 0xFE	; 254
    8c7c:	08 f0       	brcs	.+2      	; 0x8c80 <__addsf3x+0x96>
    8c7e:	b3 cf       	rjmp	.-154    	; 0x8be6 <__addsf3+0x1e>
    8c80:	93 95       	inc	r25
    8c82:	88 0f       	add	r24, r24
    8c84:	08 f0       	brcs	.+2      	; 0x8c88 <__addsf3x+0x9e>
    8c86:	99 27       	eor	r25, r25
    8c88:	ee 0f       	add	r30, r30
    8c8a:	97 95       	ror	r25
    8c8c:	87 95       	ror	r24
    8c8e:	08 95       	ret

00008c90 <__cmpsf2>:
    8c90:	d9 d0       	rcall	.+434    	; 0x8e44 <__fp_cmp>
    8c92:	08 f4       	brcc	.+2      	; 0x8c96 <__cmpsf2+0x6>
    8c94:	81 e0       	ldi	r24, 0x01	; 1
    8c96:	08 95       	ret

00008c98 <__divsf3>:
    8c98:	0c d0       	rcall	.+24     	; 0x8cb2 <__divsf3x>
    8c9a:	0f c1       	rjmp	.+542    	; 0x8eba <__fp_round>
    8c9c:	07 d1       	rcall	.+526    	; 0x8eac <__fp_pscB>
    8c9e:	40 f0       	brcs	.+16     	; 0x8cb0 <__divsf3+0x18>
    8ca0:	fe d0       	rcall	.+508    	; 0x8e9e <__fp_pscA>
    8ca2:	30 f0       	brcs	.+12     	; 0x8cb0 <__divsf3+0x18>
    8ca4:	21 f4       	brne	.+8      	; 0x8cae <__divsf3+0x16>
    8ca6:	5f 3f       	cpi	r21, 0xFF	; 255
    8ca8:	19 f0       	breq	.+6      	; 0x8cb0 <__divsf3+0x18>
    8caa:	f0 c0       	rjmp	.+480    	; 0x8e8c <__fp_inf>
    8cac:	51 11       	cpse	r21, r1
    8cae:	39 c1       	rjmp	.+626    	; 0x8f22 <__fp_szero>
    8cb0:	f3 c0       	rjmp	.+486    	; 0x8e98 <__fp_nan>

00008cb2 <__divsf3x>:
    8cb2:	14 d1       	rcall	.+552    	; 0x8edc <__fp_split3>
    8cb4:	98 f3       	brcs	.-26     	; 0x8c9c <__divsf3+0x4>

00008cb6 <__divsf3_pse>:
    8cb6:	99 23       	and	r25, r25
    8cb8:	c9 f3       	breq	.-14     	; 0x8cac <__divsf3+0x14>
    8cba:	55 23       	and	r21, r21
    8cbc:	b1 f3       	breq	.-20     	; 0x8caa <__divsf3+0x12>
    8cbe:	95 1b       	sub	r25, r21
    8cc0:	55 0b       	sbc	r21, r21
    8cc2:	bb 27       	eor	r27, r27
    8cc4:	aa 27       	eor	r26, r26
    8cc6:	62 17       	cp	r22, r18
    8cc8:	73 07       	cpc	r23, r19
    8cca:	84 07       	cpc	r24, r20
    8ccc:	38 f0       	brcs	.+14     	; 0x8cdc <__divsf3_pse+0x26>
    8cce:	9f 5f       	subi	r25, 0xFF	; 255
    8cd0:	5f 4f       	sbci	r21, 0xFF	; 255
    8cd2:	22 0f       	add	r18, r18
    8cd4:	33 1f       	adc	r19, r19
    8cd6:	44 1f       	adc	r20, r20
    8cd8:	aa 1f       	adc	r26, r26
    8cda:	a9 f3       	breq	.-22     	; 0x8cc6 <__divsf3_pse+0x10>
    8cdc:	33 d0       	rcall	.+102    	; 0x8d44 <__divsf3_pse+0x8e>
    8cde:	0e 2e       	mov	r0, r30
    8ce0:	3a f0       	brmi	.+14     	; 0x8cf0 <__divsf3_pse+0x3a>
    8ce2:	e0 e8       	ldi	r30, 0x80	; 128
    8ce4:	30 d0       	rcall	.+96     	; 0x8d46 <__divsf3_pse+0x90>
    8ce6:	91 50       	subi	r25, 0x01	; 1
    8ce8:	50 40       	sbci	r21, 0x00	; 0
    8cea:	e6 95       	lsr	r30
    8cec:	00 1c       	adc	r0, r0
    8cee:	ca f7       	brpl	.-14     	; 0x8ce2 <__divsf3_pse+0x2c>
    8cf0:	29 d0       	rcall	.+82     	; 0x8d44 <__divsf3_pse+0x8e>
    8cf2:	fe 2f       	mov	r31, r30
    8cf4:	27 d0       	rcall	.+78     	; 0x8d44 <__divsf3_pse+0x8e>
    8cf6:	66 0f       	add	r22, r22
    8cf8:	77 1f       	adc	r23, r23
    8cfa:	88 1f       	adc	r24, r24
    8cfc:	bb 1f       	adc	r27, r27
    8cfe:	26 17       	cp	r18, r22
    8d00:	37 07       	cpc	r19, r23
    8d02:	48 07       	cpc	r20, r24
    8d04:	ab 07       	cpc	r26, r27
    8d06:	b0 e8       	ldi	r27, 0x80	; 128
    8d08:	09 f0       	breq	.+2      	; 0x8d0c <__divsf3_pse+0x56>
    8d0a:	bb 0b       	sbc	r27, r27
    8d0c:	80 2d       	mov	r24, r0
    8d0e:	bf 01       	movw	r22, r30
    8d10:	ff 27       	eor	r31, r31
    8d12:	93 58       	subi	r25, 0x83	; 131
    8d14:	5f 4f       	sbci	r21, 0xFF	; 255
    8d16:	2a f0       	brmi	.+10     	; 0x8d22 <__divsf3_pse+0x6c>
    8d18:	9e 3f       	cpi	r25, 0xFE	; 254
    8d1a:	51 05       	cpc	r21, r1
    8d1c:	68 f0       	brcs	.+26     	; 0x8d38 <__divsf3_pse+0x82>
    8d1e:	b6 c0       	rjmp	.+364    	; 0x8e8c <__fp_inf>
    8d20:	00 c1       	rjmp	.+512    	; 0x8f22 <__fp_szero>
    8d22:	5f 3f       	cpi	r21, 0xFF	; 255
    8d24:	ec f3       	brlt	.-6      	; 0x8d20 <__divsf3_pse+0x6a>
    8d26:	98 3e       	cpi	r25, 0xE8	; 232
    8d28:	dc f3       	brlt	.-10     	; 0x8d20 <__divsf3_pse+0x6a>
    8d2a:	86 95       	lsr	r24
    8d2c:	77 95       	ror	r23
    8d2e:	67 95       	ror	r22
    8d30:	b7 95       	ror	r27
    8d32:	f7 95       	ror	r31
    8d34:	9f 5f       	subi	r25, 0xFF	; 255
    8d36:	c9 f7       	brne	.-14     	; 0x8d2a <__divsf3_pse+0x74>
    8d38:	88 0f       	add	r24, r24
    8d3a:	91 1d       	adc	r25, r1
    8d3c:	96 95       	lsr	r25
    8d3e:	87 95       	ror	r24
    8d40:	97 f9       	bld	r25, 7
    8d42:	08 95       	ret
    8d44:	e1 e0       	ldi	r30, 0x01	; 1
    8d46:	66 0f       	add	r22, r22
    8d48:	77 1f       	adc	r23, r23
    8d4a:	88 1f       	adc	r24, r24
    8d4c:	bb 1f       	adc	r27, r27
    8d4e:	62 17       	cp	r22, r18
    8d50:	73 07       	cpc	r23, r19
    8d52:	84 07       	cpc	r24, r20
    8d54:	ba 07       	cpc	r27, r26
    8d56:	20 f0       	brcs	.+8      	; 0x8d60 <__divsf3_pse+0xaa>
    8d58:	62 1b       	sub	r22, r18
    8d5a:	73 0b       	sbc	r23, r19
    8d5c:	84 0b       	sbc	r24, r20
    8d5e:	ba 0b       	sbc	r27, r26
    8d60:	ee 1f       	adc	r30, r30
    8d62:	88 f7       	brcc	.-30     	; 0x8d46 <__divsf3_pse+0x90>
    8d64:	e0 95       	com	r30
    8d66:	08 95       	ret

00008d68 <__fixsfsi>:
    8d68:	04 d0       	rcall	.+8      	; 0x8d72 <__fixunssfsi>
    8d6a:	68 94       	set
    8d6c:	b1 11       	cpse	r27, r1
    8d6e:	d9 c0       	rjmp	.+434    	; 0x8f22 <__fp_szero>
    8d70:	08 95       	ret

00008d72 <__fixunssfsi>:
    8d72:	bc d0       	rcall	.+376    	; 0x8eec <__fp_splitA>
    8d74:	88 f0       	brcs	.+34     	; 0x8d98 <__fixunssfsi+0x26>
    8d76:	9f 57       	subi	r25, 0x7F	; 127
    8d78:	90 f0       	brcs	.+36     	; 0x8d9e <__fixunssfsi+0x2c>
    8d7a:	b9 2f       	mov	r27, r25
    8d7c:	99 27       	eor	r25, r25
    8d7e:	b7 51       	subi	r27, 0x17	; 23
    8d80:	a0 f0       	brcs	.+40     	; 0x8daa <__fixunssfsi+0x38>
    8d82:	d1 f0       	breq	.+52     	; 0x8db8 <__fixunssfsi+0x46>
    8d84:	66 0f       	add	r22, r22
    8d86:	77 1f       	adc	r23, r23
    8d88:	88 1f       	adc	r24, r24
    8d8a:	99 1f       	adc	r25, r25
    8d8c:	1a f0       	brmi	.+6      	; 0x8d94 <__fixunssfsi+0x22>
    8d8e:	ba 95       	dec	r27
    8d90:	c9 f7       	brne	.-14     	; 0x8d84 <__fixunssfsi+0x12>
    8d92:	12 c0       	rjmp	.+36     	; 0x8db8 <__fixunssfsi+0x46>
    8d94:	b1 30       	cpi	r27, 0x01	; 1
    8d96:	81 f0       	breq	.+32     	; 0x8db8 <__fixunssfsi+0x46>
    8d98:	c3 d0       	rcall	.+390    	; 0x8f20 <__fp_zero>
    8d9a:	b1 e0       	ldi	r27, 0x01	; 1
    8d9c:	08 95       	ret
    8d9e:	c0 c0       	rjmp	.+384    	; 0x8f20 <__fp_zero>
    8da0:	67 2f       	mov	r22, r23
    8da2:	78 2f       	mov	r23, r24
    8da4:	88 27       	eor	r24, r24
    8da6:	b8 5f       	subi	r27, 0xF8	; 248
    8da8:	39 f0       	breq	.+14     	; 0x8db8 <__fixunssfsi+0x46>
    8daa:	b9 3f       	cpi	r27, 0xF9	; 249
    8dac:	cc f3       	brlt	.-14     	; 0x8da0 <__fixunssfsi+0x2e>
    8dae:	86 95       	lsr	r24
    8db0:	77 95       	ror	r23
    8db2:	67 95       	ror	r22
    8db4:	b3 95       	inc	r27
    8db6:	d9 f7       	brne	.-10     	; 0x8dae <__fixunssfsi+0x3c>
    8db8:	3e f4       	brtc	.+14     	; 0x8dc8 <__fixunssfsi+0x56>
    8dba:	90 95       	com	r25
    8dbc:	80 95       	com	r24
    8dbe:	70 95       	com	r23
    8dc0:	61 95       	neg	r22
    8dc2:	7f 4f       	sbci	r23, 0xFF	; 255
    8dc4:	8f 4f       	sbci	r24, 0xFF	; 255
    8dc6:	9f 4f       	sbci	r25, 0xFF	; 255
    8dc8:	08 95       	ret

00008dca <__floatunsisf>:
    8dca:	e8 94       	clt
    8dcc:	09 c0       	rjmp	.+18     	; 0x8de0 <__floatsisf+0x12>

00008dce <__floatsisf>:
    8dce:	97 fb       	bst	r25, 7
    8dd0:	3e f4       	brtc	.+14     	; 0x8de0 <__floatsisf+0x12>
    8dd2:	90 95       	com	r25
    8dd4:	80 95       	com	r24
    8dd6:	70 95       	com	r23
    8dd8:	61 95       	neg	r22
    8dda:	7f 4f       	sbci	r23, 0xFF	; 255
    8ddc:	8f 4f       	sbci	r24, 0xFF	; 255
    8dde:	9f 4f       	sbci	r25, 0xFF	; 255
    8de0:	99 23       	and	r25, r25
    8de2:	a9 f0       	breq	.+42     	; 0x8e0e <__floatsisf+0x40>
    8de4:	f9 2f       	mov	r31, r25
    8de6:	96 e9       	ldi	r25, 0x96	; 150
    8de8:	bb 27       	eor	r27, r27
    8dea:	93 95       	inc	r25
    8dec:	f6 95       	lsr	r31
    8dee:	87 95       	ror	r24
    8df0:	77 95       	ror	r23
    8df2:	67 95       	ror	r22
    8df4:	b7 95       	ror	r27
    8df6:	f1 11       	cpse	r31, r1
    8df8:	f8 cf       	rjmp	.-16     	; 0x8dea <__floatsisf+0x1c>
    8dfa:	fa f4       	brpl	.+62     	; 0x8e3a <__floatsisf+0x6c>
    8dfc:	bb 0f       	add	r27, r27
    8dfe:	11 f4       	brne	.+4      	; 0x8e04 <__floatsisf+0x36>
    8e00:	60 ff       	sbrs	r22, 0
    8e02:	1b c0       	rjmp	.+54     	; 0x8e3a <__floatsisf+0x6c>
    8e04:	6f 5f       	subi	r22, 0xFF	; 255
    8e06:	7f 4f       	sbci	r23, 0xFF	; 255
    8e08:	8f 4f       	sbci	r24, 0xFF	; 255
    8e0a:	9f 4f       	sbci	r25, 0xFF	; 255
    8e0c:	16 c0       	rjmp	.+44     	; 0x8e3a <__floatsisf+0x6c>
    8e0e:	88 23       	and	r24, r24
    8e10:	11 f0       	breq	.+4      	; 0x8e16 <__floatsisf+0x48>
    8e12:	96 e9       	ldi	r25, 0x96	; 150
    8e14:	11 c0       	rjmp	.+34     	; 0x8e38 <__floatsisf+0x6a>
    8e16:	77 23       	and	r23, r23
    8e18:	21 f0       	breq	.+8      	; 0x8e22 <__floatsisf+0x54>
    8e1a:	9e e8       	ldi	r25, 0x8E	; 142
    8e1c:	87 2f       	mov	r24, r23
    8e1e:	76 2f       	mov	r23, r22
    8e20:	05 c0       	rjmp	.+10     	; 0x8e2c <__floatsisf+0x5e>
    8e22:	66 23       	and	r22, r22
    8e24:	71 f0       	breq	.+28     	; 0x8e42 <__floatsisf+0x74>
    8e26:	96 e8       	ldi	r25, 0x86	; 134
    8e28:	86 2f       	mov	r24, r22
    8e2a:	70 e0       	ldi	r23, 0x00	; 0
    8e2c:	60 e0       	ldi	r22, 0x00	; 0
    8e2e:	2a f0       	brmi	.+10     	; 0x8e3a <__floatsisf+0x6c>
    8e30:	9a 95       	dec	r25
    8e32:	66 0f       	add	r22, r22
    8e34:	77 1f       	adc	r23, r23
    8e36:	88 1f       	adc	r24, r24
    8e38:	da f7       	brpl	.-10     	; 0x8e30 <__floatsisf+0x62>
    8e3a:	88 0f       	add	r24, r24
    8e3c:	96 95       	lsr	r25
    8e3e:	87 95       	ror	r24
    8e40:	97 f9       	bld	r25, 7
    8e42:	08 95       	ret

00008e44 <__fp_cmp>:
    8e44:	99 0f       	add	r25, r25
    8e46:	00 08       	sbc	r0, r0
    8e48:	55 0f       	add	r21, r21
    8e4a:	aa 0b       	sbc	r26, r26
    8e4c:	e0 e8       	ldi	r30, 0x80	; 128
    8e4e:	fe ef       	ldi	r31, 0xFE	; 254
    8e50:	16 16       	cp	r1, r22
    8e52:	17 06       	cpc	r1, r23
    8e54:	e8 07       	cpc	r30, r24
    8e56:	f9 07       	cpc	r31, r25
    8e58:	c0 f0       	brcs	.+48     	; 0x8e8a <__fp_cmp+0x46>
    8e5a:	12 16       	cp	r1, r18
    8e5c:	13 06       	cpc	r1, r19
    8e5e:	e4 07       	cpc	r30, r20
    8e60:	f5 07       	cpc	r31, r21
    8e62:	98 f0       	brcs	.+38     	; 0x8e8a <__fp_cmp+0x46>
    8e64:	62 1b       	sub	r22, r18
    8e66:	73 0b       	sbc	r23, r19
    8e68:	84 0b       	sbc	r24, r20
    8e6a:	95 0b       	sbc	r25, r21
    8e6c:	39 f4       	brne	.+14     	; 0x8e7c <__fp_cmp+0x38>
    8e6e:	0a 26       	eor	r0, r26
    8e70:	61 f0       	breq	.+24     	; 0x8e8a <__fp_cmp+0x46>
    8e72:	23 2b       	or	r18, r19
    8e74:	24 2b       	or	r18, r20
    8e76:	25 2b       	or	r18, r21
    8e78:	21 f4       	brne	.+8      	; 0x8e82 <__fp_cmp+0x3e>
    8e7a:	08 95       	ret
    8e7c:	0a 26       	eor	r0, r26
    8e7e:	09 f4       	brne	.+2      	; 0x8e82 <__fp_cmp+0x3e>
    8e80:	a1 40       	sbci	r26, 0x01	; 1
    8e82:	a6 95       	lsr	r26
    8e84:	8f ef       	ldi	r24, 0xFF	; 255
    8e86:	81 1d       	adc	r24, r1
    8e88:	81 1d       	adc	r24, r1
    8e8a:	08 95       	ret

00008e8c <__fp_inf>:
    8e8c:	97 f9       	bld	r25, 7
    8e8e:	9f 67       	ori	r25, 0x7F	; 127
    8e90:	80 e8       	ldi	r24, 0x80	; 128
    8e92:	70 e0       	ldi	r23, 0x00	; 0
    8e94:	60 e0       	ldi	r22, 0x00	; 0
    8e96:	08 95       	ret

00008e98 <__fp_nan>:
    8e98:	9f ef       	ldi	r25, 0xFF	; 255
    8e9a:	80 ec       	ldi	r24, 0xC0	; 192
    8e9c:	08 95       	ret

00008e9e <__fp_pscA>:
    8e9e:	00 24       	eor	r0, r0
    8ea0:	0a 94       	dec	r0
    8ea2:	16 16       	cp	r1, r22
    8ea4:	17 06       	cpc	r1, r23
    8ea6:	18 06       	cpc	r1, r24
    8ea8:	09 06       	cpc	r0, r25
    8eaa:	08 95       	ret

00008eac <__fp_pscB>:
    8eac:	00 24       	eor	r0, r0
    8eae:	0a 94       	dec	r0
    8eb0:	12 16       	cp	r1, r18
    8eb2:	13 06       	cpc	r1, r19
    8eb4:	14 06       	cpc	r1, r20
    8eb6:	05 06       	cpc	r0, r21
    8eb8:	08 95       	ret

00008eba <__fp_round>:
    8eba:	09 2e       	mov	r0, r25
    8ebc:	03 94       	inc	r0
    8ebe:	00 0c       	add	r0, r0
    8ec0:	11 f4       	brne	.+4      	; 0x8ec6 <__fp_round+0xc>
    8ec2:	88 23       	and	r24, r24
    8ec4:	52 f0       	brmi	.+20     	; 0x8eda <__fp_round+0x20>
    8ec6:	bb 0f       	add	r27, r27
    8ec8:	40 f4       	brcc	.+16     	; 0x8eda <__fp_round+0x20>
    8eca:	bf 2b       	or	r27, r31
    8ecc:	11 f4       	brne	.+4      	; 0x8ed2 <__fp_round+0x18>
    8ece:	60 ff       	sbrs	r22, 0
    8ed0:	04 c0       	rjmp	.+8      	; 0x8eda <__fp_round+0x20>
    8ed2:	6f 5f       	subi	r22, 0xFF	; 255
    8ed4:	7f 4f       	sbci	r23, 0xFF	; 255
    8ed6:	8f 4f       	sbci	r24, 0xFF	; 255
    8ed8:	9f 4f       	sbci	r25, 0xFF	; 255
    8eda:	08 95       	ret

00008edc <__fp_split3>:
    8edc:	57 fd       	sbrc	r21, 7
    8ede:	90 58       	subi	r25, 0x80	; 128
    8ee0:	44 0f       	add	r20, r20
    8ee2:	55 1f       	adc	r21, r21
    8ee4:	59 f0       	breq	.+22     	; 0x8efc <__fp_splitA+0x10>
    8ee6:	5f 3f       	cpi	r21, 0xFF	; 255
    8ee8:	71 f0       	breq	.+28     	; 0x8f06 <__fp_splitA+0x1a>
    8eea:	47 95       	ror	r20

00008eec <__fp_splitA>:
    8eec:	88 0f       	add	r24, r24
    8eee:	97 fb       	bst	r25, 7
    8ef0:	99 1f       	adc	r25, r25
    8ef2:	61 f0       	breq	.+24     	; 0x8f0c <__fp_splitA+0x20>
    8ef4:	9f 3f       	cpi	r25, 0xFF	; 255
    8ef6:	79 f0       	breq	.+30     	; 0x8f16 <__fp_splitA+0x2a>
    8ef8:	87 95       	ror	r24
    8efa:	08 95       	ret
    8efc:	12 16       	cp	r1, r18
    8efe:	13 06       	cpc	r1, r19
    8f00:	14 06       	cpc	r1, r20
    8f02:	55 1f       	adc	r21, r21
    8f04:	f2 cf       	rjmp	.-28     	; 0x8eea <__fp_split3+0xe>
    8f06:	46 95       	lsr	r20
    8f08:	f1 df       	rcall	.-30     	; 0x8eec <__fp_splitA>
    8f0a:	08 c0       	rjmp	.+16     	; 0x8f1c <__fp_splitA+0x30>
    8f0c:	16 16       	cp	r1, r22
    8f0e:	17 06       	cpc	r1, r23
    8f10:	18 06       	cpc	r1, r24
    8f12:	99 1f       	adc	r25, r25
    8f14:	f1 cf       	rjmp	.-30     	; 0x8ef8 <__fp_splitA+0xc>
    8f16:	86 95       	lsr	r24
    8f18:	71 05       	cpc	r23, r1
    8f1a:	61 05       	cpc	r22, r1
    8f1c:	08 94       	sec
    8f1e:	08 95       	ret

00008f20 <__fp_zero>:
    8f20:	e8 94       	clt

00008f22 <__fp_szero>:
    8f22:	bb 27       	eor	r27, r27
    8f24:	66 27       	eor	r22, r22
    8f26:	77 27       	eor	r23, r23
    8f28:	cb 01       	movw	r24, r22
    8f2a:	97 f9       	bld	r25, 7
    8f2c:	08 95       	ret

00008f2e <__gesf2>:
    8f2e:	8a df       	rcall	.-236    	; 0x8e44 <__fp_cmp>
    8f30:	08 f4       	brcc	.+2      	; 0x8f34 <__gesf2+0x6>
    8f32:	8f ef       	ldi	r24, 0xFF	; 255
    8f34:	08 95       	ret

00008f36 <__mulsf3>:
    8f36:	0b d0       	rcall	.+22     	; 0x8f4e <__mulsf3x>
    8f38:	c0 cf       	rjmp	.-128    	; 0x8eba <__fp_round>
    8f3a:	b1 df       	rcall	.-158    	; 0x8e9e <__fp_pscA>
    8f3c:	28 f0       	brcs	.+10     	; 0x8f48 <__mulsf3+0x12>
    8f3e:	b6 df       	rcall	.-148    	; 0x8eac <__fp_pscB>
    8f40:	18 f0       	brcs	.+6      	; 0x8f48 <__mulsf3+0x12>
    8f42:	95 23       	and	r25, r21
    8f44:	09 f0       	breq	.+2      	; 0x8f48 <__mulsf3+0x12>
    8f46:	a2 cf       	rjmp	.-188    	; 0x8e8c <__fp_inf>
    8f48:	a7 cf       	rjmp	.-178    	; 0x8e98 <__fp_nan>
    8f4a:	11 24       	eor	r1, r1
    8f4c:	ea cf       	rjmp	.-44     	; 0x8f22 <__fp_szero>

00008f4e <__mulsf3x>:
    8f4e:	c6 df       	rcall	.-116    	; 0x8edc <__fp_split3>
    8f50:	a0 f3       	brcs	.-24     	; 0x8f3a <__mulsf3+0x4>

00008f52 <__mulsf3_pse>:
    8f52:	95 9f       	mul	r25, r21
    8f54:	d1 f3       	breq	.-12     	; 0x8f4a <__mulsf3+0x14>
    8f56:	95 0f       	add	r25, r21
    8f58:	50 e0       	ldi	r21, 0x00	; 0
    8f5a:	55 1f       	adc	r21, r21
    8f5c:	62 9f       	mul	r22, r18
    8f5e:	f0 01       	movw	r30, r0
    8f60:	72 9f       	mul	r23, r18
    8f62:	bb 27       	eor	r27, r27
    8f64:	f0 0d       	add	r31, r0
    8f66:	b1 1d       	adc	r27, r1
    8f68:	63 9f       	mul	r22, r19
    8f6a:	aa 27       	eor	r26, r26
    8f6c:	f0 0d       	add	r31, r0
    8f6e:	b1 1d       	adc	r27, r1
    8f70:	aa 1f       	adc	r26, r26
    8f72:	64 9f       	mul	r22, r20
    8f74:	66 27       	eor	r22, r22
    8f76:	b0 0d       	add	r27, r0
    8f78:	a1 1d       	adc	r26, r1
    8f7a:	66 1f       	adc	r22, r22
    8f7c:	82 9f       	mul	r24, r18
    8f7e:	22 27       	eor	r18, r18
    8f80:	b0 0d       	add	r27, r0
    8f82:	a1 1d       	adc	r26, r1
    8f84:	62 1f       	adc	r22, r18
    8f86:	73 9f       	mul	r23, r19
    8f88:	b0 0d       	add	r27, r0
    8f8a:	a1 1d       	adc	r26, r1
    8f8c:	62 1f       	adc	r22, r18
    8f8e:	83 9f       	mul	r24, r19
    8f90:	a0 0d       	add	r26, r0
    8f92:	61 1d       	adc	r22, r1
    8f94:	22 1f       	adc	r18, r18
    8f96:	74 9f       	mul	r23, r20
    8f98:	33 27       	eor	r19, r19
    8f9a:	a0 0d       	add	r26, r0
    8f9c:	61 1d       	adc	r22, r1
    8f9e:	23 1f       	adc	r18, r19
    8fa0:	84 9f       	mul	r24, r20
    8fa2:	60 0d       	add	r22, r0
    8fa4:	21 1d       	adc	r18, r1
    8fa6:	82 2f       	mov	r24, r18
    8fa8:	76 2f       	mov	r23, r22
    8faa:	6a 2f       	mov	r22, r26
    8fac:	11 24       	eor	r1, r1
    8fae:	9f 57       	subi	r25, 0x7F	; 127
    8fb0:	50 40       	sbci	r21, 0x00	; 0
    8fb2:	8a f0       	brmi	.+34     	; 0x8fd6 <__mulsf3_pse+0x84>
    8fb4:	e1 f0       	breq	.+56     	; 0x8fee <__mulsf3_pse+0x9c>
    8fb6:	88 23       	and	r24, r24
    8fb8:	4a f0       	brmi	.+18     	; 0x8fcc <__mulsf3_pse+0x7a>
    8fba:	ee 0f       	add	r30, r30
    8fbc:	ff 1f       	adc	r31, r31
    8fbe:	bb 1f       	adc	r27, r27
    8fc0:	66 1f       	adc	r22, r22
    8fc2:	77 1f       	adc	r23, r23
    8fc4:	88 1f       	adc	r24, r24
    8fc6:	91 50       	subi	r25, 0x01	; 1
    8fc8:	50 40       	sbci	r21, 0x00	; 0
    8fca:	a9 f7       	brne	.-22     	; 0x8fb6 <__mulsf3_pse+0x64>
    8fcc:	9e 3f       	cpi	r25, 0xFE	; 254
    8fce:	51 05       	cpc	r21, r1
    8fd0:	70 f0       	brcs	.+28     	; 0x8fee <__mulsf3_pse+0x9c>
    8fd2:	5c cf       	rjmp	.-328    	; 0x8e8c <__fp_inf>
    8fd4:	a6 cf       	rjmp	.-180    	; 0x8f22 <__fp_szero>
    8fd6:	5f 3f       	cpi	r21, 0xFF	; 255
    8fd8:	ec f3       	brlt	.-6      	; 0x8fd4 <__mulsf3_pse+0x82>
    8fda:	98 3e       	cpi	r25, 0xE8	; 232
    8fdc:	dc f3       	brlt	.-10     	; 0x8fd4 <__mulsf3_pse+0x82>
    8fde:	86 95       	lsr	r24
    8fe0:	77 95       	ror	r23
    8fe2:	67 95       	ror	r22
    8fe4:	b7 95       	ror	r27
    8fe6:	f7 95       	ror	r31
    8fe8:	e7 95       	ror	r30
    8fea:	9f 5f       	subi	r25, 0xFF	; 255
    8fec:	c1 f7       	brne	.-16     	; 0x8fde <__mulsf3_pse+0x8c>
    8fee:	fe 2b       	or	r31, r30
    8ff0:	88 0f       	add	r24, r24
    8ff2:	91 1d       	adc	r25, r1
    8ff4:	96 95       	lsr	r25
    8ff6:	87 95       	ror	r24
    8ff8:	97 f9       	bld	r25, 7
    8ffa:	08 95       	ret

00008ffc <__udivmodhi4>:
    8ffc:	aa 1b       	sub	r26, r26
    8ffe:	bb 1b       	sub	r27, r27
    9000:	51 e1       	ldi	r21, 0x11	; 17
    9002:	07 c0       	rjmp	.+14     	; 0x9012 <__udivmodhi4_ep>

00009004 <__udivmodhi4_loop>:
    9004:	aa 1f       	adc	r26, r26
    9006:	bb 1f       	adc	r27, r27
    9008:	a6 17       	cp	r26, r22
    900a:	b7 07       	cpc	r27, r23
    900c:	10 f0       	brcs	.+4      	; 0x9012 <__udivmodhi4_ep>
    900e:	a6 1b       	sub	r26, r22
    9010:	b7 0b       	sbc	r27, r23

00009012 <__udivmodhi4_ep>:
    9012:	88 1f       	adc	r24, r24
    9014:	99 1f       	adc	r25, r25
    9016:	5a 95       	dec	r21
    9018:	a9 f7       	brne	.-22     	; 0x9004 <__udivmodhi4_loop>
    901a:	80 95       	com	r24
    901c:	90 95       	com	r25
    901e:	bc 01       	movw	r22, r24
    9020:	cd 01       	movw	r24, r26
    9022:	08 95       	ret

00009024 <__divmodhi4>:
    9024:	97 fb       	bst	r25, 7
    9026:	07 2e       	mov	r0, r23
    9028:	16 f4       	brtc	.+4      	; 0x902e <__divmodhi4+0xa>
    902a:	00 94       	com	r0
    902c:	07 d0       	rcall	.+14     	; 0x903c <__divmodhi4_neg1>
    902e:	77 fd       	sbrc	r23, 7
    9030:	09 d0       	rcall	.+18     	; 0x9044 <__divmodhi4_neg2>
    9032:	0e 94 fe 47 	call	0x8ffc	; 0x8ffc <__udivmodhi4>
    9036:	07 fc       	sbrc	r0, 7
    9038:	05 d0       	rcall	.+10     	; 0x9044 <__divmodhi4_neg2>
    903a:	3e f4       	brtc	.+14     	; 0x904a <__divmodhi4_exit>

0000903c <__divmodhi4_neg1>:
    903c:	90 95       	com	r25
    903e:	81 95       	neg	r24
    9040:	9f 4f       	sbci	r25, 0xFF	; 255
    9042:	08 95       	ret

00009044 <__divmodhi4_neg2>:
    9044:	70 95       	com	r23
    9046:	61 95       	neg	r22
    9048:	7f 4f       	sbci	r23, 0xFF	; 255

0000904a <__divmodhi4_exit>:
    904a:	08 95       	ret

0000904c <__udivmodsi4>:
    904c:	a1 e2       	ldi	r26, 0x21	; 33
    904e:	1a 2e       	mov	r1, r26
    9050:	aa 1b       	sub	r26, r26
    9052:	bb 1b       	sub	r27, r27
    9054:	fd 01       	movw	r30, r26
    9056:	0d c0       	rjmp	.+26     	; 0x9072 <__udivmodsi4_ep>

00009058 <__udivmodsi4_loop>:
    9058:	aa 1f       	adc	r26, r26
    905a:	bb 1f       	adc	r27, r27
    905c:	ee 1f       	adc	r30, r30
    905e:	ff 1f       	adc	r31, r31
    9060:	a2 17       	cp	r26, r18
    9062:	b3 07       	cpc	r27, r19
    9064:	e4 07       	cpc	r30, r20
    9066:	f5 07       	cpc	r31, r21
    9068:	20 f0       	brcs	.+8      	; 0x9072 <__udivmodsi4_ep>
    906a:	a2 1b       	sub	r26, r18
    906c:	b3 0b       	sbc	r27, r19
    906e:	e4 0b       	sbc	r30, r20
    9070:	f5 0b       	sbc	r31, r21

00009072 <__udivmodsi4_ep>:
    9072:	66 1f       	adc	r22, r22
    9074:	77 1f       	adc	r23, r23
    9076:	88 1f       	adc	r24, r24
    9078:	99 1f       	adc	r25, r25
    907a:	1a 94       	dec	r1
    907c:	69 f7       	brne	.-38     	; 0x9058 <__udivmodsi4_loop>
    907e:	60 95       	com	r22
    9080:	70 95       	com	r23
    9082:	80 95       	com	r24
    9084:	90 95       	com	r25
    9086:	9b 01       	movw	r18, r22
    9088:	ac 01       	movw	r20, r24
    908a:	bd 01       	movw	r22, r26
    908c:	cf 01       	movw	r24, r30
    908e:	08 95       	ret

00009090 <__divmodsi4>:
    9090:	05 2e       	mov	r0, r21
    9092:	97 fb       	bst	r25, 7
    9094:	1e f4       	brtc	.+6      	; 0x909c <__divmodsi4+0xc>
    9096:	00 94       	com	r0
    9098:	0e 94 5f 48 	call	0x90be	; 0x90be <__negsi2>
    909c:	57 fd       	sbrc	r21, 7
    909e:	07 d0       	rcall	.+14     	; 0x90ae <__divmodsi4_neg2>
    90a0:	0e 94 26 48 	call	0x904c	; 0x904c <__udivmodsi4>
    90a4:	07 fc       	sbrc	r0, 7
    90a6:	03 d0       	rcall	.+6      	; 0x90ae <__divmodsi4_neg2>
    90a8:	4e f4       	brtc	.+18     	; 0x90bc <__divmodsi4_exit>
    90aa:	0c 94 5f 48 	jmp	0x90be	; 0x90be <__negsi2>

000090ae <__divmodsi4_neg2>:
    90ae:	50 95       	com	r21
    90b0:	40 95       	com	r20
    90b2:	30 95       	com	r19
    90b4:	21 95       	neg	r18
    90b6:	3f 4f       	sbci	r19, 0xFF	; 255
    90b8:	4f 4f       	sbci	r20, 0xFF	; 255
    90ba:	5f 4f       	sbci	r21, 0xFF	; 255

000090bc <__divmodsi4_exit>:
    90bc:	08 95       	ret

000090be <__negsi2>:
    90be:	90 95       	com	r25
    90c0:	80 95       	com	r24
    90c2:	70 95       	com	r23
    90c4:	61 95       	neg	r22
    90c6:	7f 4f       	sbci	r23, 0xFF	; 255
    90c8:	8f 4f       	sbci	r24, 0xFF	; 255
    90ca:	9f 4f       	sbci	r25, 0xFF	; 255
    90cc:	08 95       	ret

000090ce <__tablejump2__>:
    90ce:	ee 0f       	add	r30, r30
    90d0:	ff 1f       	adc	r31, r31

000090d2 <__tablejump__>:
    90d2:	05 90       	lpm	r0, Z+
    90d4:	f4 91       	lpm	r31, Z
    90d6:	e0 2d       	mov	r30, r0
    90d8:	09 94       	ijmp

000090da <__mulhisi3>:
    90da:	0e 94 75 48 	call	0x90ea	; 0x90ea <__umulhisi3>
    90de:	33 23       	and	r19, r19
    90e0:	12 f4       	brpl	.+4      	; 0x90e6 <__mulhisi3+0xc>
    90e2:	8a 1b       	sub	r24, r26
    90e4:	9b 0b       	sbc	r25, r27
    90e6:	0c 94 86 48 	jmp	0x910c	; 0x910c <__usmulhisi3_tail>

000090ea <__umulhisi3>:
    90ea:	a2 9f       	mul	r26, r18
    90ec:	b0 01       	movw	r22, r0
    90ee:	b3 9f       	mul	r27, r19
    90f0:	c0 01       	movw	r24, r0
    90f2:	a3 9f       	mul	r26, r19
    90f4:	70 0d       	add	r23, r0
    90f6:	81 1d       	adc	r24, r1
    90f8:	11 24       	eor	r1, r1
    90fa:	91 1d       	adc	r25, r1
    90fc:	b2 9f       	mul	r27, r18
    90fe:	70 0d       	add	r23, r0
    9100:	81 1d       	adc	r24, r1
    9102:	11 24       	eor	r1, r1
    9104:	91 1d       	adc	r25, r1
    9106:	08 95       	ret

00009108 <__usmulhisi3>:
    9108:	0e 94 75 48 	call	0x90ea	; 0x90ea <__umulhisi3>

0000910c <__usmulhisi3_tail>:
    910c:	b7 ff       	sbrs	r27, 7
    910e:	08 95       	ret
    9110:	82 1b       	sub	r24, r18
    9112:	93 0b       	sbc	r25, r19
    9114:	08 95       	ret

00009116 <__muluhisi3>:
    9116:	0e 94 75 48 	call	0x90ea	; 0x90ea <__umulhisi3>
    911a:	a5 9f       	mul	r26, r21
    911c:	90 0d       	add	r25, r0
    911e:	b4 9f       	mul	r27, r20
    9120:	90 0d       	add	r25, r0
    9122:	a4 9f       	mul	r26, r20
    9124:	80 0d       	add	r24, r0
    9126:	91 1d       	adc	r25, r1
    9128:	11 24       	eor	r1, r1
    912a:	08 95       	ret

0000912c <__mulshisi3>:
    912c:	b7 ff       	sbrs	r27, 7
    912e:	0c 94 8b 48 	jmp	0x9116	; 0x9116 <__muluhisi3>

00009132 <__mulohisi3>:
    9132:	0e 94 8b 48 	call	0x9116	; 0x9116 <__muluhisi3>
    9136:	82 1b       	sub	r24, r18
    9138:	93 0b       	sbc	r25, r19
    913a:	08 95       	ret

0000913c <memcpy_P>:
    913c:	fb 01       	movw	r30, r22
    913e:	dc 01       	movw	r26, r24
    9140:	02 c0       	rjmp	.+4      	; 0x9146 <memcpy_P+0xa>
    9142:	05 90       	lpm	r0, Z+
    9144:	0d 92       	st	X+, r0
    9146:	41 50       	subi	r20, 0x01	; 1
    9148:	50 40       	sbci	r21, 0x00	; 0
    914a:	d8 f7       	brcc	.-10     	; 0x9142 <memcpy_P+0x6>
    914c:	08 95       	ret

0000914e <memmove>:
    914e:	68 17       	cp	r22, r24
    9150:	79 07       	cpc	r23, r25
    9152:	68 f4       	brcc	.+26     	; 0x916e <memmove+0x20>
    9154:	fb 01       	movw	r30, r22
    9156:	dc 01       	movw	r26, r24
    9158:	e4 0f       	add	r30, r20
    915a:	f5 1f       	adc	r31, r21
    915c:	a4 0f       	add	r26, r20
    915e:	b5 1f       	adc	r27, r21
    9160:	02 c0       	rjmp	.+4      	; 0x9166 <memmove+0x18>
    9162:	02 90       	ld	r0, -Z
    9164:	0e 92       	st	-X, r0
    9166:	41 50       	subi	r20, 0x01	; 1
    9168:	50 40       	sbci	r21, 0x00	; 0
    916a:	d8 f7       	brcc	.-10     	; 0x9162 <memmove+0x14>
    916c:	08 95       	ret
    916e:	0c 94 04 49 	jmp	0x9208	; 0x9208 <memcpy>

00009172 <__itoa_ncheck>:
    9172:	bb 27       	eor	r27, r27
    9174:	4a 30       	cpi	r20, 0x0A	; 10
    9176:	31 f4       	brne	.+12     	; 0x9184 <__itoa_ncheck+0x12>
    9178:	99 23       	and	r25, r25
    917a:	22 f4       	brpl	.+8      	; 0x9184 <__itoa_ncheck+0x12>
    917c:	bd e2       	ldi	r27, 0x2D	; 45
    917e:	90 95       	com	r25
    9180:	81 95       	neg	r24
    9182:	9f 4f       	sbci	r25, 0xFF	; 255
    9184:	0c 94 c5 48 	jmp	0x918a	; 0x918a <__utoa_common>

00009188 <__utoa_ncheck>:
    9188:	bb 27       	eor	r27, r27

0000918a <__utoa_common>:
    918a:	fb 01       	movw	r30, r22
    918c:	55 27       	eor	r21, r21
    918e:	aa 27       	eor	r26, r26
    9190:	88 0f       	add	r24, r24
    9192:	99 1f       	adc	r25, r25
    9194:	aa 1f       	adc	r26, r26
    9196:	a4 17       	cp	r26, r20
    9198:	10 f0       	brcs	.+4      	; 0x919e <__utoa_common+0x14>
    919a:	a4 1b       	sub	r26, r20
    919c:	83 95       	inc	r24
    919e:	50 51       	subi	r21, 0x10	; 16
    91a0:	b9 f7       	brne	.-18     	; 0x9190 <__utoa_common+0x6>
    91a2:	a0 5d       	subi	r26, 0xD0	; 208
    91a4:	aa 33       	cpi	r26, 0x3A	; 58
    91a6:	08 f0       	brcs	.+2      	; 0x91aa <__utoa_common+0x20>
    91a8:	a9 5d       	subi	r26, 0xD9	; 217
    91aa:	a1 93       	st	Z+, r26
    91ac:	00 97       	sbiw	r24, 0x00	; 0
    91ae:	79 f7       	brne	.-34     	; 0x918e <__utoa_common+0x4>
    91b0:	b1 11       	cpse	r27, r1
    91b2:	b1 93       	st	Z+, r27
    91b4:	11 92       	st	Z+, r1
    91b6:	cb 01       	movw	r24, r22
    91b8:	0c 94 0d 49 	jmp	0x921a	; 0x921a <strrev>

000091bc <__eerd_block_m644pa>:
    91bc:	dc 01       	movw	r26, r24
    91be:	cb 01       	movw	r24, r22

000091c0 <__eerd_blraw_m644pa>:
    91c0:	fc 01       	movw	r30, r24
    91c2:	f9 99       	sbic	0x1f, 1	; 31
    91c4:	fe cf       	rjmp	.-4      	; 0x91c2 <__eerd_blraw_m644pa+0x2>
    91c6:	06 c0       	rjmp	.+12     	; 0x91d4 <__eerd_blraw_m644pa+0x14>
    91c8:	f2 bd       	out	0x22, r31	; 34
    91ca:	e1 bd       	out	0x21, r30	; 33
    91cc:	f8 9a       	sbi	0x1f, 0	; 31
    91ce:	31 96       	adiw	r30, 0x01	; 1
    91d0:	00 b4       	in	r0, 0x20	; 32
    91d2:	0d 92       	st	X+, r0
    91d4:	41 50       	subi	r20, 0x01	; 1
    91d6:	50 40       	sbci	r21, 0x00	; 0
    91d8:	b8 f7       	brcc	.-18     	; 0x91c8 <__eerd_blraw_m644pa+0x8>
    91da:	08 95       	ret

000091dc <__eerd_byte_m644pa>:
    91dc:	f9 99       	sbic	0x1f, 1	; 31
    91de:	fe cf       	rjmp	.-4      	; 0x91dc <__eerd_byte_m644pa>
    91e0:	92 bd       	out	0x22, r25	; 34
    91e2:	81 bd       	out	0x21, r24	; 33
    91e4:	f8 9a       	sbi	0x1f, 0	; 31
    91e6:	99 27       	eor	r25, r25
    91e8:	80 b5       	in	r24, 0x20	; 32
    91ea:	08 95       	ret

000091ec <__eewr_byte_m644pa>:
    91ec:	26 2f       	mov	r18, r22

000091ee <__eewr_r18_m644pa>:
    91ee:	f9 99       	sbic	0x1f, 1	; 31
    91f0:	fe cf       	rjmp	.-4      	; 0x91ee <__eewr_r18_m644pa>
    91f2:	1f ba       	out	0x1f, r1	; 31
    91f4:	92 bd       	out	0x22, r25	; 34
    91f6:	81 bd       	out	0x21, r24	; 33
    91f8:	20 bd       	out	0x20, r18	; 32
    91fa:	0f b6       	in	r0, 0x3f	; 63
    91fc:	f8 94       	cli
    91fe:	fa 9a       	sbi	0x1f, 2	; 31
    9200:	f9 9a       	sbi	0x1f, 1	; 31
    9202:	0f be       	out	0x3f, r0	; 63
    9204:	01 96       	adiw	r24, 0x01	; 1
    9206:	08 95       	ret

00009208 <memcpy>:
    9208:	fb 01       	movw	r30, r22
    920a:	dc 01       	movw	r26, r24
    920c:	02 c0       	rjmp	.+4      	; 0x9212 <memcpy+0xa>
    920e:	01 90       	ld	r0, Z+
    9210:	0d 92       	st	X+, r0
    9212:	41 50       	subi	r20, 0x01	; 1
    9214:	50 40       	sbci	r21, 0x00	; 0
    9216:	d8 f7       	brcc	.-10     	; 0x920e <memcpy+0x6>
    9218:	08 95       	ret

0000921a <strrev>:
    921a:	dc 01       	movw	r26, r24
    921c:	fc 01       	movw	r30, r24
    921e:	67 2f       	mov	r22, r23
    9220:	71 91       	ld	r23, Z+
    9222:	77 23       	and	r23, r23
    9224:	e1 f7       	brne	.-8      	; 0x921e <strrev+0x4>
    9226:	32 97       	sbiw	r30, 0x02	; 2
    9228:	04 c0       	rjmp	.+8      	; 0x9232 <strrev+0x18>
    922a:	7c 91       	ld	r23, X
    922c:	6d 93       	st	X+, r22
    922e:	70 83       	st	Z, r23
    9230:	62 91       	ld	r22, -Z
    9232:	ae 17       	cp	r26, r30
    9234:	bf 07       	cpc	r27, r31
    9236:	c8 f3       	brcs	.-14     	; 0x922a <strrev+0x10>
    9238:	08 95       	ret

0000923a <_exit>:
    923a:	f8 94       	cli

0000923c <__stop_program>:
    923c:	ff cf       	rjmp	.-2      	; 0x923c <__stop_program>
