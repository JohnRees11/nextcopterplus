
OpenAeroVTOL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000040c  00800100  000084c2  00008556  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000084c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000338  0080050c  0080050c  00008962  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00008962  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000658  00000000  00000000  00008998  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00013cf5  00000000  00000000  00008ff0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00003364  00000000  00000000  0001cce5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00003a98  00000000  00000000  00020049  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000f60  00000000  00000000  00023ae4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000262f  00000000  00000000  00024a44  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00006c4a  00000000  00000000  00027073  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000510  00000000  00000000  0002dcbd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 19 0d 	jmp	0x1a32	; 0x1a32 <__ctors_end>
       4:	0c 94 70 26 	jmp	0x4ce0	; 0x4ce0 <__vector_1>
       8:	0c 94 38 26 	jmp	0x4c70	; 0x4c70 <__vector_2>
       c:	0c 94 1b 27 	jmp	0x4e36	; 0x4e36 <__vector_3>
      10:	0c 94 3f 0d 	jmp	0x1a7e	; 0x1a7e <__bad_interrupt>
      14:	0c 94 e2 26 	jmp	0x4dc4	; 0x4dc4 <__vector_5>
      18:	0c 94 3f 0d 	jmp	0x1a7e	; 0x1a7e <__bad_interrupt>
      1c:	0c 94 a9 26 	jmp	0x4d52	; 0x4d52 <__vector_7>
      20:	0c 94 3f 0d 	jmp	0x1a7e	; 0x1a7e <__bad_interrupt>
      24:	0c 94 3f 0d 	jmp	0x1a7e	; 0x1a7e <__bad_interrupt>
      28:	0c 94 3f 0d 	jmp	0x1a7e	; 0x1a7e <__bad_interrupt>
      2c:	0c 94 3f 0d 	jmp	0x1a7e	; 0x1a7e <__bad_interrupt>
      30:	0c 94 3f 0d 	jmp	0x1a7e	; 0x1a7e <__bad_interrupt>
      34:	0c 94 3f 0d 	jmp	0x1a7e	; 0x1a7e <__bad_interrupt>
      38:	0c 94 3f 0d 	jmp	0x1a7e	; 0x1a7e <__bad_interrupt>
      3c:	0c 94 3f 0d 	jmp	0x1a7e	; 0x1a7e <__bad_interrupt>
      40:	0c 94 3f 0d 	jmp	0x1a7e	; 0x1a7e <__bad_interrupt>
      44:	0c 94 3f 0d 	jmp	0x1a7e	; 0x1a7e <__bad_interrupt>
      48:	0c 94 21 26 	jmp	0x4c42	; 0x4c42 <__vector_18>
      4c:	0c 94 3f 0d 	jmp	0x1a7e	; 0x1a7e <__bad_interrupt>
      50:	0c 94 dd 27 	jmp	0x4fba	; 0x4fba <__vector_20>
      54:	0c 94 3f 0d 	jmp	0x1a7e	; 0x1a7e <__bad_interrupt>
      58:	0c 94 3f 0d 	jmp	0x1a7e	; 0x1a7e <__bad_interrupt>
      5c:	0c 94 3f 0d 	jmp	0x1a7e	; 0x1a7e <__bad_interrupt>
      60:	0c 94 3f 0d 	jmp	0x1a7e	; 0x1a7e <__bad_interrupt>
      64:	0c 94 3f 0d 	jmp	0x1a7e	; 0x1a7e <__bad_interrupt>
      68:	0c 94 3f 0d 	jmp	0x1a7e	; 0x1a7e <__bad_interrupt>
      6c:	0c 94 3f 0d 	jmp	0x1a7e	; 0x1a7e <__bad_interrupt>
      70:	0c 94 dd 27 	jmp	0x4fba	; 0x4fba <__vector_20>
      74:	0c 94 3f 0d 	jmp	0x1a7e	; 0x1a7e <__bad_interrupt>
      78:	0c 94 3f 0d 	jmp	0x1a7e	; 0x1a7e <__bad_interrupt>
      7c:	5b 2d       	mov	r21, r11
      7e:	5d 2d       	mov	r21, r13
      80:	61 2d       	mov	r22, r1
      82:	64 2d       	mov	r22, r4
      84:	67 2d       	mov	r22, r7
      86:	6a 2d       	mov	r22, r10
      88:	6d 2d       	mov	r22, r13
      8a:	6f 2d       	mov	r22, r15
      8c:	73 2d       	mov	r23, r3
      8e:	75 2d       	mov	r23, r5
      90:	77 2d       	mov	r23, r7
      92:	79 2d       	mov	r23, r9
      94:	7b 2d       	mov	r23, r11
      96:	7d 2d       	mov	r23, r13
      98:	7f 2d       	mov	r23, r15
      9a:	81 2d       	mov	r24, r1
      9c:	85 2d       	mov	r24, r5
      9e:	87 2d       	mov	r24, r7
      a0:	89 2d       	mov	r24, r9

000000a2 <Acc_Pol>:
      a2:	ff ff 01 ff 01 ff 01 ff ff 01 01 01 ff 01 01 ff     ................
      b2:	ff ff                                               ..

000000b4 <ACC_RPY_Order>:
      b4:	00 01 02 02 00 01 00 01 02 00 01 02 01 00 02 00     ................
      c4:	02 01                                               ..

000000c6 <FUTABA>:
      c6:	01 02 00 03 04 05 06 07                             ........

000000ce <JR>:
      ce:	00 01 02 03 04 05 06 07                             ........

000000d6 <Trans_Matrix>:
      d6:	05 02 06 01 05 08 03 07 05                          .........

000000df <Wingdings>:
      df:	01 02 41 05 0d 00 0f 00 22 00 33 00 44 00 4f 09     ..A.....".3.D.O.
      ef:	01 00 03 00 07 00 0f 00 1f 00 0f 00 07 00 03 00     ................
      ff:	01 00 08 1c 00 1c 00 1c 00 1c 00 7f 00 3e 00 1c     .............>..
     10f:	00 08 00 08 08 00 1c 00 3e 00 7f 00 1c 00 1c 00     ........>.......
     11f:	1c 00 1c 00 05 ff 01 fe 00 7c 00 38 00 10 00 0d     .........|.8....
     12f:	40 00 60 00 70 00 78 00 7c 00 7e 00 7f 00 7e 00     @.`.p.x.|.~...~.
     13f:	7c 00 78 00 70 00 60 00 40 00                       |.x.p.`.@.

00000149 <Verdana14>:
     149:	01 02 20 5b 13 00 bb 00 c5 00 cc 00 cc 00 cc 00     .. [............
     159:	cc 01 03 01 03 01 03 01 16 01 29 01 29 01 29 01     ..........).).).
     169:	36 01 49 01 50 01 50 01 6f 01 88 01 a4 01 c0 01     6.I.P.P.o.......
     179:	df 01 fb 02 1a 02 36 02 55 02 74 02 7b 02 7b 02     ......6.U.t.{.{.
     189:	7b 02 7b 02 7b 02 94 02 94 02 bc 02 db 02 fd 03     {.{.{...........
     199:	22 03 3e 03 5a 03 82 03 a1 03 b4 03 ca 03 ec 04     ".>.Z...........
     1a9:	08 04 2d 04 4c 04 74 04 8d 04 b5 04 d7 04 f9 05     ..-.L.t.........
     1b9:	1e 05 3d 05 65 05 99 05 bb 05 e0 06 02 06 02 06     ..=.e...........
     1c9:	1b 06 1b 06 1b 06 1b 06 1b 06 34 06 50 06 69 06     ..........4.P.i.
     1d9:	85 06 a1 06 b4 06 d0 06 e9 06 f0 07 00 07 1c 07     ................
     1e9:	23 07 4e 07 67 07 86 07 a2 07 be 07 d1 07 ea 07     #.N.g...........
     1f9:	fd 08 16 08 32 08 5d 08 79 08 95 03 00 00 00 00     ....2.].y.......
     209:	00 00 00 00 00 02 fe 67 00 fe 67 00 12 78 00 00     .......g..g..x..
     219:	fe 01 00 02 01 00 02 01 00 02 01 00 fe 41 00 78     .............A.x
     229:	70 00 00 1c 00 00 07 00 e0 00 00 38 00 00 0e 1e     p..........8....
     239:	00 82 7f 00 80 40 00 80 40 00 80 40 00 80 7f 00     .....@..@..@....
     249:	00 1e 00 06 c0 1f 00 f8 ff 00 3c e0 01 07 00 07     ..........<.....
     259:	03 00 06 01 00 04 06 01 00 04 03 00 06 07 00 07     ................
     269:	3c e0 01 f8 ff 00 c0 1f 00 04 00 00 03 00 f0 03     <...............
     279:	00 70 00 00 10 00 06 00 03 00 00 03 00 00 03 00     .p..............
     289:	00 03 00 00 03 00 00 03 00 02 00 70 00 00 70 00     ...........p..p.
     299:	0a f0 0f 00 fc 3f 00 0c 30 00 06 60 00 06 60 00     .....?..0..`..`.
     2a9:	06 60 00 06 60 00 0c 30 00 fc 3f 00 f0 0f 00 08     .`..`..0..?.....
     2b9:	18 60 00 18 60 00 18 60 00 fe 7f 00 fe 7f 00 00     .`..`..`........
     2c9:	60 00 00 60 00 00 60 00 09 0c 70 00 06 78 00 06     `..`..`...p..x..
     2d9:	6c 00 06 66 00 06 63 00 8e 61 00 fc 60 00 78 60     l..f..c..a..`.x`
     2e9:	00 00 60 00 09 0c 30 00 06 60 00 06 60 00 86 61     ..`...0..`..`..a
     2f9:	00 86 61 00 86 61 00 ce 73 00 7c 3f 00 38 1e 00     ..a..a..s.|?.8..
     309:	0a 00 07 00 80 07 00 c0 07 00 f0 06 00 38 06 00     .............8..
     319:	1c 06 00 fe 7f 00 fe 7f 00 00 06 00 00 06 00 09     ................
     329:	00 30 00 fe 60 00 fe 60 00 c6 60 00 c6 60 00 c6     .0..`..`..`..`..
     339:	60 00 c6 31 00 86 3f 00 06 0f 00 0a e0 0f 00 f0     `..1..?.........
     349:	3f 00 9c 30 00 cc 60 00 c6 60 00 c6 60 00 c6 60     ?..0..`..`..`..`
     359:	00 c6 31 00 86 3f 00 00 0f 00 09 06 00 00 06 40     ..1..?.........@
     369:	00 06 70 00 06 7c 00 06 0f 00 c6 03 00 f6 00 00     ..p..|..........
     379:	3e 00 00 0e 00 00 0a 38 1e 00 7c 3f 00 ce 71 00     >......8..|?..q.
     389:	c6 60 00 c6 60 00 86 61 00 86 61 00 4e 73 00 7c     .`..`..a..a.Ns.|
     399:	3f 00 38 1e 00 0a f0 00 00 fc 61 00 8c 63 00 06     ?.8.......a..c..
     3a9:	63 00 06 63 00 06 63 00 06 33 00 0c 39 00 fc 1f     c..c..c..3..9...
     3b9:	00 f0 07 00 02 70 70 00 70 70 00 08 0c 00 00 06     .....pp.pp......
     3c9:	00 00 06 67 00 06 67 00 86 01 00 ce 00 00 fc 00     ...g..g.........
     3d9:	00 38 00 00 0d 00 40 00 00 78 00 00 3f 00 c0 07     .8....@..x..?...
     3e9:	00 f8 06 00 3e 06 00 06 06 00 3e 06 00 f8 06 00     ....>.....>.....
     3f9:	c0 07 00 00 3f 00 00 78 00 00 40 00 0a fe 7f 00     ....?..x..@.....
     409:	fe 7f 00 86 61 00 86 61 00 86 61 00 86 61 00 c6     ....a..a..a..a..
     419:	61 00 7c 73 00 3c 3f 00 00 1e 00 0b e0 07 00 f8     a.|s.<?.........
     429:	1f 00 1c 38 00 0c 30 00 06 60 00 06 60 00 06 60     ...8..0..`..`..`
     439:	00 06 60 00 06 60 00 06 20 00 0c 30 00 0c fe 7f     ..`..`.. ..0....
     449:	00 fe 7f 00 06 60 00 06 60 00 06 60 00 06 60 00     .....`..`..`..`.
     459:	06 60 00 0e 70 00 0c 30 00 38 1c 00 f8 0f 00 e0     .`..p..0.8......
     469:	07 00 09 fe 7f 00 fe 7f 00 c6 60 00 c6 60 00 c6     ..........`..`..
     479:	60 00 c6 60 00 c6 60 00 c6 60 00 c6 60 00 09 fe     `..`..`..`..`...
     489:	7f 00 fe 7f 00 86 01 00 86 01 00 86 01 00 86 01     ................
     499:	00 86 01 00 86 01 00 06 00 00 0d e0 07 00 f8 1f     ................
     4a9:	00 3c 3c 00 0c 30 00 0e 70 00 06 60 00 06 60 00     .<<..0..p..`..`.
     4b9:	06 63 00 06 63 00 06 63 00 06 63 00 0c 3f 00 0c     .c..c..c..c..?..
     4c9:	3f 00 0a fe 7f 00 fe 7f 00 c0 00 00 c0 00 00 c0     ?...............
     4d9:	00 00 c0 00 00 c0 00 00 c0 00 00 fe 7f 00 fe 7f     ................
     4e9:	00 06 06 60 00 06 60 00 fe 7f 00 fe 7f 00 06 60     ...`..`........`
     4f9:	00 06 60 00 07 00 60 00 00 60 00 06 60 00 06 60     ..`...`..`..`..`
     509:	00 06 70 00 fe 3f 00 fe 1f 00 0b fe 7f 00 fe 7f     ..p..?..........
     519:	00 80 03 00 c0 01 00 e0 03 00 70 07 00 38 1c 00     ..........p..8..
     529:	1c 38 00 0e 70 00 06 60 00 02 40 00 09 fe 7f 00     .8..p..`..@.....
     539:	fe 7f 00 00 60 00 00 60 00 00 60 00 00 60 00 00     ....`..`..`..`..
     549:	60 00 00 60 00 00 60 00 0c fe 7f 00 fe 7f 00 0e     `..`..`.........
     559:	00 00 38 00 00 e0 01 00 80 07 00 00 07 00 e0 01     ..8.............
     569:	00 38 00 00 0e 00 00 fe 7f 00 fe 7f 00 0a fe 7f     .8..............
     579:	00 fe 7f 00 0e 00 00 3c 00 00 e0 00 00 80 03 00     .......<........
     589:	00 1e 00 00 78 00 fe 7f 00 fe 7f 00 0d e0 07 00     ....x...........
     599:	f8 1f 00 1c 38 00 0c 30 00 06 60 00 06 60 00 06     ....8..0..`..`..
     5a9:	60 00 06 60 00 06 60 00 0c 30 00 1c 38 00 f8 1f     `..`..`..0..8...
     5b9:	00 e0 07 00 08 fe 7f 00 fe 7f 00 06 03 00 06 03     ................
     5c9:	00 06 03 00 8e 03 00 fc 01 00 f8 00 00 0d e0 07     ................
     5d9:	00 f8 1f 00 1c 38 00 0c 30 00 06 60 00 06 60 00     .....8..0..`..`.
     5e9:	06 60 00 06 e0 01 06 e0 03 0c 30 07 1c 38 06 f8     .`........0..8..
     5f9:	1f 06 e0 07 06 0b fe 7f 00 fe 7f 00 86 01 00 86     ................
     609:	01 00 86 01 00 86 07 00 ce 0e 00 fc 1c 00 78 70     ..............xp
     619:	00 00 60 00 00 40 00 0b 78 30 00 fc 70 00 ce 60     ..`..@..x0..p..`
     629:	00 86 61 00 86 61 00 86 61 00 86 61 00 86 61 00     ..a..a..a..a..a.
     639:	06 33 00 0c 3f 00 00 1e 00 0c 06 00 00 06 00 00     .3..?...........
     649:	06 00 00 06 00 00 06 00 00 fe 7f 00 fe 7f 00 06     ................
     659:	00 00 06 00 00 06 00 00 06 00 00 06 00 00 0a fe     ................
     669:	0f 00 fe 3f 00 00 70 00 00 60 00 00 60 00 00 60     ...?..p..`..`..`
     679:	00 00 60 00 00 70 00 fe 3f 00 fe 0f 00 0d 02 00     ..`..p..?.......
     689:	00 1e 00 00 fc 00 00 e0 03 00 80 1f 00 00 7c 00     ..............|.
     699:	00 60 00 00 7c 00 80 1f 00 e0 03 00 fc 00 00 1e     .`..|...........
     6a9:	00 00 02 00 00 11 06 00 00 7e 00 00 f8 07 00 80     .........~......
     6b9:	3f 00 00 78 00 00 7c 00 c0 0f 00 7e 00 00 06 00     ?..x..|....~....
     6c9:	00 7e 00 00 e0 07 00 00 7e 00 00 70 00 80 7f 00     .~......~..p....
     6d9:	f8 07 00 7e 00 00 06 00 00 0b 02 40 00 06 60 00     ...~.......@..`.
     6e9:	1e 78 00 38 1c 00 e0 07 00 80 01 00 e0 07 00 38     .x.8...........8
     6f9:	1e 00 1e 78 00 06 60 00 02 40 00 0c 02 00 00 06     ...x..`..@......
     709:	00 00 1e 00 00 78 00 00 e0 00 00 c0 7f 00 c0 7f     .....x..........
     719:	00 e0 00 00 78 00 00 1e 00 00 06 00 00 02 00 00     ....x...........
     729:	0b 06 70 00 06 78 00 06 7c 00 06 6e 00 06 67 00     ..p..x..|..n..g.
     739:	c6 63 00 e6 60 00 76 60 00 3e 60 00 1e 60 00 0e     .c..`.v`.>`..`..
     749:	60 00 08 03 00 00 1f 00 00 fe 00 00 f0 07 00 80     `...............
     759:	3f 00 00 fc 01 00 e0 03 00 00 03 08 00 3c 00 30     ?............<.0
     769:	7e 00 30 67 00 30 63 00 30 63 00 30 33 00 e0 7f     ~.0g.0c.0c.03...
     779:	00 e0 7f 00 09 ff 7f 00 ff 7f 00 60 20 00 30 60     ...........` .0`
     789:	00 30 60 00 30 60 00 70 70 00 e0 3f 00 c0 0f 00     .0`.0`.pp..?....
     799:	08 80 0f 00 e0 3f 00 60 30 00 30 60 00 30 60 00     .....?.`0.0`.0`.
     7a9:	30 60 00 30 60 00 60 30 00 09 80 1f 00 e0 3f 00     0`.0`.`0......?.
     7b9:	70 70 00 30 60 00 30 60 00 30 60 00 30 30 00 ff     pp.0`.0`.0`.00..
     7c9:	7f 00 ff 7f 00 09 80 0f 00 e0 3f 00 60 33 00 30     ..........?.`3.0
     7d9:	63 00 30 63 00 30 63 00 70 63 00 e0 63 00 c0 33     c.0c.0c.pc..c..3
     7e9:	00 06 30 00 00 fe 7f 00 ff 7f 00 33 00 00 33 00     ..0........3..3.
     7f9:	00 03 00 00 09 80 1f 00 e0 3f 06 70 70 06 30 60     .........?.pp.0`
     809:	06 30 60 06 30 60 06 30 30 07 f0 ff 03 f0 ff 01     .0`.0`.00.......
     819:	08 ff 7f 00 ff 7f 00 60 00 00 30 00 00 30 00 00     .......`..0..0..
     829:	30 00 00 f0 7f 00 e0 7f 00 02 f6 7f 00 f6 7f 00     0...............
     839:	05 00 00 06 30 00 06 30 00 06 f6 ff 07 f6 ff 03     ....0..0........
     849:	09 ff 7f 00 ff 7f 00 00 06 00 00 07 00 80 0f 00     ................
     859:	c0 38 00 70 70 00 30 60 00 10 40 00 02 ff 7f 00     .8.pp.0`..@.....
     869:	ff 7f 00 0e f0 7f 00 f0 7f 00 60 00 00 30 00 00     ..........`..0..
     879:	30 00 00 30 00 00 f0 7f 00 e0 7f 00 60 00 00 30     0..0........`..0
     889:	00 00 30 00 00 30 00 00 f0 7f 00 e0 7f 00 08 f0     ..0..0..........
     899:	7f 00 f0 7f 00 60 00 00 30 00 00 30 00 00 30 00     .....`..0..0..0.
     8a9:	00 f0 7f 00 e0 7f 00 0a 80 0f 00 e0 3f 00 60 30     ............?.`0
     8b9:	00 30 60 00 30 60 00 30 60 00 30 60 00 60 30 00     .0`.0`.0`.0`.`0.
     8c9:	e0 3f 00 80 0f 00 09 f0 ff 07 f0 ff 07 60 60 00     .?...........``.
     8d9:	30 60 00 30 60 00 30 60 00 70 70 00 e0 3f 00 c0     0`.0`.0`.pp..?..
     8e9:	0f 00 09 80 1f 00 e0 3f 00 70 70 00 30 60 00 30     .......?.pp.0`.0
     8f9:	60 00 30 60 00 30 30 00 f0 ff 07 f0 ff 07 06 f0     `.0`.00.........
     909:	7f 00 f0 7f 00 60 00 00 30 00 00 30 00 00 30 00     .....`..0..0..0.
     919:	00 08 c0 31 00 e0 63 00 30 63 00 30 63 00 30 66     ...1..c.0c.0c.0f
     929:	00 30 66 00 30 3e 00 60 1c 00 06 30 00 00 fe 3f     .0f.0>.`...0...?
     939:	00 fe 7f 00 30 60 00 30 60 00 30 60 00 08 f0 1f     ....0`.0`.0`....
     949:	00 f0 7f 00 00 60 00 00 60 00 00 60 00 00 30 00     .....`..`..`..0.
     959:	f0 7f 00 f0 7f 00 09 10 00 00 f0 00 00 e0 07 00     ................
     969:	00 3e 00 00 60 00 00 3e 00 e0 07 00 f0 00 00 10     .>..`..>........
     979:	00 00 0e 30 00 00 f0 03 00 c0 3f 00 00 78 00 00     ...0......?..x..
     989:	7c 00 80 07 00 f0 00 00 f0 00 00 c0 07 00 00 3c     |..............<
     999:	00 00 70 00 c0 3f 00 f0 03 00 30 00 00 09 10 40     ..p..?....0....@
     9a9:	00 30 60 00 f0 78 00 c0 1d 00 00 07 00 c0 1d 00     .0`..x..........
     9b9:	f0 78 00 30 60 00 10 40 00 09 10 00 00 f0 00 00     .x.0`..@........
     9c9:	e0 07 06 00 bf 07 00 f0 01 00 3f 00 e0 07 00 f0     ..........?.....
     9d9:	00 00 10 00 00 08 30 70 00 30 78 00 30 7c 00 30     ......0p.0x.0|.0
     9e9:	66 00 30 63 00 f0 61 00 f0 60 00 70 60 00           f.0c..a..`.p`.

000009f7 <Verdana8>:
     9f7:	01 02 20 5b 0b 00 bb 00 be 00 c1 00 c1 00 c1 00     .. [............
     a07:	c1 00 d6 00 d6 00 d6 00 dd 00 e4 00 e4 00 e4 00     ................
     a17:	e9 00 f0 00 f3 00 f3 00 fe 01 09 01 14 01 1f 01     ................
     a27:	2c 01 37 01 42 01 4d 01 58 01 63 01 66 01 66 01     ,.7.B.M.X.c.f.f.
     a37:	66 01 66 01 66 01 6f 01 6f 01 7c 01 89 01 98 01     f.f.f.o.o.|.....
     a47:	a7 01 b2 01 bd 01 cc 01 d9 01 e0 01 e9 01 f6 02     ................
     a57:	01 02 10 02 1d 02 2c 02 37 02 46 02 53 02 60 02     ......,.7.F.S.`.
     a67:	6f 02 7c 02 89 02 9c 02 a9 02 b8 02 c5 02 c5 02     o.|.............
     a77:	c5 02 c5 02 c5 02 c5 02 c5 02 d0 02 db 02 e6 02     ................
     a87:	f1 02 fc 03 05 03 10 03 1b 03 1e 03 25 03 30 03     ............%.0.
     a97:	33 03 46 03 51 03 5c 03 67 03 72 03 7b 03 84 03     3.F.Q.\.g.r.{...
     aa7:	8d 03 98 03 a3 03 b2 03 bd 03 c8 01 00 00 01 7e     ...............~
     ab7:	01 0a 0c 00 12 00 12 00 8c 01 60 00 18 00 c6 00     ..........`.....
     ac7:	20 01 20 01 c0 00 03 f8 00 06 03 01 04 03 01 04      . .............
     ad7:	06 03 f8 00 02 00 04 80 03 03 20 00 20 00 20 00     .......... . . .
     ae7:	01 80 01 05 fc 00 02 01 02 01 02 01 fc 00 05 04     ................
     af7:	01 04 01 fe 01 00 01 00 01 05 84 01 42 01 22 01     ............B.".
     b07:	12 01 0c 01 05 84 00 02 01 12 01 12 01 ec 00 06     ................
     b17:	60 00 50 00 48 00 44 00 fe 01 40 00 05 9e 00 12     `.P.H.D...@.....
     b27:	01 12 01 12 01 e2 00 05 f8 00 14 01 12 01 12 01     ................
     b37:	e0 00 05 02 00 82 01 62 00 1a 00 06 00 05 ec 00     .......b........
     b47:	12 01 12 01 12 01 ec 00 05 1c 00 22 01 22 01 a2     ..........."."..
     b57:	00 7c 00 01 98 01 04 02 00 62 01 12 00 0c 00 06     .|.......b......
     b67:	c0 01 78 00 46 00 46 00 78 00 c0 01 06 fe 01 12     ..x.F.F.x.......
     b77:	01 12 01 12 01 1c 01 e0 00 07 78 00 84 00 02 01     ..........x.....
     b87:	02 01 02 01 02 01 84 00 07 fe 01 02 01 02 01 02     ................
     b97:	01 02 01 84 00 78 00 05 fe 01 12 01 12 01 12 01     .....x..........
     ba7:	12 01 05 fe 01 12 00 12 00 12 00 02 00 07 78 00     ..............x.
     bb7:	84 00 02 01 02 01 22 01 22 01 e4 00 06 fe 01 10     ......".".......
     bc7:	00 10 00 10 00 10 00 fe 01 03 02 01 fe 01 02 01     ................
     bd7:	04 00 01 02 01 02 01 fe 00 06 fe 01 20 00 30 00     ............ .0.
     be7:	48 00 84 00 02 01 05 fe 01 00 01 00 01 00 01 00     H...............
     bf7:	01 07 fe 01 06 00 18 00 60 00 18 00 06 00 fe 01     ........`.......
     c07:	06 fe 01 06 00 18 00 60 00 80 01 fe 01 07 78 00     .......`......x.
     c17:	84 00 02 01 02 01 02 01 84 00 78 00 05 fe 01 22     ..........x...."
     c27:	00 22 00 22 00 1c 00 07 78 00 84 00 02 01 02 01     ."."....x.......
     c37:	02 03 84 04 78 04 06 fe 01 22 00 22 00 62 00 9c     ....x....".".b..
     c47:	00 00 01 06 8c 00 12 01 12 01 22 01 22 01 c4 00     .........."."...
     c57:	07 02 00 02 00 02 00 fe 01 02 00 02 00 02 00 06     ................
     c67:	fe 00 00 01 00 01 00 01 00 01 fe 00 06 0e 00 70     ...............p
     c77:	00 80 01 80 01 70 00 0e 00 09 06 00 78 00 80 01     .....p......x...
     c87:	78 00 06 00 78 00 80 01 78 00 06 00 06 86 01 48     x...x...x......H
     c97:	00 30 00 30 00 48 00 86 01 07 02 00 04 00 08 00     .0.0.H..........
     ca7:	f0 01 08 00 04 00 02 00 06 82 01 42 01 22 01 12     ...........B."..
     cb7:	01 0a 01 06 01 05 c0 00 28 01 28 01 28 01 f0 01     ........(.(.(...
     cc7:	05 ff 01 08 01 08 01 08 01 f0 00 05 f0 00 08 01     ................
     cd7:	08 01 08 01 90 00 05 f0 00 08 01 08 01 08 01 ff     ................
     ce7:	01 05 f0 00 28 01 28 01 28 01 b0 00 04 08 00 fe     ....(.(.(.......
     cf7:	01 09 00 09 00 05 f0 00 08 05 08 05 08 05 f8 03     ................
     d07:	05 ff 01 08 00 08 00 08 00 f0 01 01 f9 01 03 00     ................
     d17:	04 08 04 f9 03 05 ff 01 40 00 60 00 90 00 08 01     ........@.`.....
     d27:	01 ff 01 09 f8 01 08 00 08 00 08 00 f0 01 08 00     ................
     d37:	08 00 08 00 f0 01 05 f8 01 08 00 08 00 08 00 f0     ................
     d47:	01 05 f0 00 08 01 08 01 08 01 f0 00 05 f8 07 08     ................
     d57:	01 08 01 08 01 f0 00 05 f0 00 08 01 08 01 08 01     ................
     d67:	f8 07 04 f8 01 10 00 08 00 08 00 04 30 01 28 01     ............0.(.
     d77:	48 01 c8 00 04 08 00 fe 00 08 01 08 01 05 f8 00     H...............
     d87:	00 01 00 01 00 01 f8 01 05 18 00 60 00 80 01 60     ...........`...`
     d97:	00 18 00 07 78 00 80 01 60 00 18 00 60 00 80 01     ....x...`...`...
     da7:	78 00 05 08 01 90 00 60 00 90 00 08 01 05 08 00     x......`........
     db7:	70 04 80 03 70 00 08 00 04 88 01 48 01 28 01 18     p...p......H.(..
     dc7:	01                                                  .

00000dc8 <lcd_commmands>:
     dc8:	af 40 a0 a6 a4 a2 ee c8 2f 24 ac 00 f8 00           .@....../$....

00000dd6 <pagemap>:
     dd6:	07 06 05 04 03 02 01 00                             ........

00000dde <text_menu>:
     dde:	22 11 1c 11 10 11 51 17 4b 17 c1 14 42 17 40 17     ".....Q.K...B.@.
     dee:	3e 17 26 17 1e 17 24 17 22 17 20 17 19 17 14 17     >.&...$.". .....
     dfe:	0f 17 0a 17 2c 11 4c 11 47 11 41 11 68 14 30 17     ....,.L.G.A.h.0.
     e0e:	28 17 9c 15 b9 15 b4 15 ae 15 aa 15 a6 15 e2 0f     (...............
     e1e:	92 11 89 11 9a 11 82 11 7d 11 f2 0f ed 0f e8 0f     ........}.......
     e2e:	e3 0f 02 10 fc 0f f6 0f 2b 10 23 10 be 11 b8 11     ........+.#.....
     e3e:	cd 13 c8 13 c5 13 bb 13 b1 13 e2 0f e2 0f 1e 10     ................
     e4e:	b1 11 ac 11 a3 11 02 11 a1 15 f6 10 57 14 53 14     ............W.S.
     e5e:	4d 14 44 14 e2 0f e2 0f cd 14 ca 14 4a 10 43 10     M.D.........J.C.
     e6e:	39 10 e2 0f e2 0f 59 11 52 11 ff 16 ed 16 da 16     9.....Y.R.......
     e7e:	c8 16 b2 16 a3 16 8f 16 7b 16 6d 16 5e 16 4f 16     ........{.m.^.O.
     e8e:	40 16 31 16 22 16 13 16 04 16 f0 15 d7 15 be 15     @.1."...........
     e9e:	e2 0f e2 0f f2 0f ed 0f e8 0f 14 10 e3 0f 19 10     ................
     eae:	69 11 9a 11 92 11 89 11 82 11 7d 11 78 11 73 11     i.........}.x.s.
     ebe:	6e 11 69 11 62 11 5c 11 3b 14 34 14 35 11 31 10     n.i.b.\.;.4.5.1.
     ece:	1e 10 d0 10 c4 10 e2 0f 81 10 78 10 6f 10 6b 10     ..........x.o.k.
     ede:	62 10 5a 10 e2 0f e2 0f e2 0f 35 17 39 11 e9 10     b.Z.......5.9...
     eee:	db 10 d6 10 bc 10 b1 10 e2 0f 53 10 4a 10 e2 0f     ..........S.J...
     efe:	e2 0f e2 0f b4 15 ae 15 aa 15 c1 14 b7 14 ac 14     ................
     f0e:	9d 14 8f 14 80 14 73 14 68 14 5c 14 27 14 1d 14     ......s.h.\.'...
     f1e:	15 14 08 14 d0 13 fe 13 f4 13 ea 13 de 13 07 10     ................
     f2e:	e2 0f e2 0f 88 15 80 15 72 15 65 15 57 15 4c 15     ........r.e.W.L.
     f3e:	43 15 3a 15 2b 15 1d 15 0e 15 02 15 fb 14 f4 14     C.:.+...........
     f4e:	e7 14 db 14 d1 14 90 15 e2 0f e2 0f a9 13 9e 13     ................
     f5e:	8d 13 80 13 75 13 65 13 55 13 46 13 36 13 26 13     ....u.e.U.F.6.&.
     f6e:	16 13 06 13 f6 12 e6 12 d8 12 ca 12 bb 12 ac 12     ................
     f7e:	9f 12 92 12 86 12 7a 12 6e 12 61 12 57 12 4d 12     ......z.n.a.W.M.
     f8e:	40 12 35 12 28 12 1d 12 10 12 35 12 03 12 1d 12     @.5.(.....5.....
     f9e:	e2 0f e2 0f e2 0f e2 0f e2 0f e2 0f ac 10 a7 10     ................
     fae:	a2 10 9d 10 98 10 93 10 8e 10 89 10 9a 11 92 11     ................
     fbe:	89 11 82 11 7d 11 78 11 73 11 6e 11 fa 11 f0 11     ....}.x.s.n.....
     fce:	e8 11 e0 11 d7 11 ce 11 c4 11 69 11 e2 0f e2 0f     ..........i.....
     fde:	e2 0f e2 0f                                         ....

00000fe2 <Dummy0>:
	...

00000fe3 <MPU6050LPF4>:
     fe3:	34 34 48 7a 00                                      44Hz.

00000fe8 <MPU6050LPF3>:
     fe8:	32 31 48 7a 00                                      21Hz.

00000fed <MPU6050LPF2>:
     fed:	31 30 48 7a 00                                      10Hz.

00000ff2 <MPU6050LPF1>:
     ff2:	35 48 7a 00                                         5Hz.

00000ff6 <MPU6050LPF7>:
     ff6:	32 36 30 48 7a 00                                   260Hz.

00000ffc <MPU6050LPF6>:
     ffc:	31 38 34 48 7a 00                                   184Hz.

00001002 <MPU6050LPF5>:
    1002:	39 34 48 7a 00                                      94Hz.

00001007 <GeneralText10>:
    1007:	4d 50 55 36 30 35 30 20 4c 50 46 3a 00              MPU6050 LPF:.

00001014 <SWLPF2>:
    1014:	33 32 48 7a 00                                      32Hz.

00001019 <SWLPF1>:
    1019:	37 34 48 7a 00                                      74Hz.

0000101e <Random1>:
    101e:	48 69 67 68 00                                      High.

00001023 <Safety2>:
    1023:	41 72 6d 61 62 6c 65 00                             Armable.

0000102b <Safety1>:
    102b:	41 72 6d 65 64 00                                   Armed.

00001031 <GeneralText5>:
    1031:	53 79 6e 63 20 52 43 00                             Sync RC.

00001039 <MixerItem16>:
    1039:	52 65 76 53 63 61 6c 65 64 00                       RevScaled.

00001043 <MixerItem15>:
    1043:	53 63 61 6c 65 64 00                                Scaled.

0000104a <MixerItem12>:
    104a:	52 65 76 65 72 73 65 64 00                          Reversed.

00001053 <MixerItem11>:
    1053:	4e 6f 72 6d 61 6c 00                                Normal.

0000105a <MixerMenuItem7>:
    105a:	50 69 74 63 68 55 70 00                             PitchUp.

00001062 <MixerMenuItem6>:
    1062:	53 69 64 65 77 61 79 73 00                          Sideways.

0000106b <MixerMenuItem5>:
    106b:	41 66 74 00                                         Aft.

0000106f <MixerMenuItem4>:
    106f:	49 6e 76 65 72 74 65 64 00                          Inverted.

00001078 <MixerMenuItem3>:
    1078:	56 65 72 74 69 63 61 6c 00                          Vertical.

00001081 <MixerMenuItem2>:
    1081:	46 6f 72 77 61 72 64 00                             Forward.

00001089 <MOUT8>:
    1089:	4f 55 54 38 00                                      OUT8.

0000108e <MOUT7>:
    108e:	4f 55 54 37 00                                      OUT7.

00001093 <MOUT6>:
    1093:	4f 55 54 36 00                                      OUT6.

00001098 <MOUT5>:
    1098:	4f 55 54 35 00                                      OUT5.

0000109d <MOUT4>:
    109d:	4f 55 54 34 00                                      OUT4.

000010a2 <MOUT3>:
    10a2:	4f 55 54 33 00                                      OUT3.

000010a7 <MOUT2>:
    10a7:	4f 55 54 32 00                                      OUT2.

000010ac <MOUT1>:
    10ac:	4f 55 54 31 00                                      OUT1.

000010b1 <Status5>:
    10b1:	28 44 69 73 61 72 6d 65 64 29 00                    (Disarmed).

000010bc <Status4>:
    10bc:	28 41 72 6d 65 64 29 00                             (Armed).

000010c4 <Status2>:
    10c4:	66 6f 72 20 73 74 61 74 75 73 2e 00                 for status..

000010d0 <Status0>:
    10d0:	50 72 65 73 73 00                                   Press.

000010d6 <WizardText2>:
    10d6:	44 6f 6e 65 00                                      Done.

000010db <WizardText1>:
    10db:	48 6f 6c 64 20 61 73 20 73 68 6f 77 6e 00           Hold as shown.

000010e9 <WizardText0>:
    10e9:	4e 6f 20 52 58 20 73 69 67 6e 61 6c 00              No RX signal.

000010f6 <PText4>:
    10f6:	43 61 6c 2e 20 66 61 69 6c 65 64 00                 Cal. failed.

00001102 <PText3>:
    1102:	45 53 43 20 43 61 6c 69 62 72 61 74 65 00           ESC Calibrate.

00001110 <PText2>:
    1110:	48 6f 6c 64 20 73 74 65 61 64 79 00                 Hold steady.

0000111c <PText1>:
    111c:	52 65 73 65 74 00                                   Reset.

00001122 <PText0>:
    1122:	4f 70 65 6e 41 65 72 6f 32 00                       OpenAero2.

0000112c <Disarmed>:
    112c:	44 69 73 61 72 6d 65 64 00                          Disarmed.

00001135 <ErrorText10>:
    1135:	4c 6f 77 00                                         Low.

00001139 <Status3>:
    1139:	42 61 74 74 65 72 79 00                             Battery.

00001141 <ErrorText7>:
    1141:	4d 6f 64 65 6c 00                                   Model.

00001147 <ErrorText6>:
    1147:	4c 6f 73 74 00                                      Lost.

0000114c <ErrorText5>:
    114c:	45 72 72 6f 72 00                                   Error.

00001152 <ErrorText4>:
    1152:	53 69 67 6e 61 6c 00                                Signal.

00001159 <ErrorText3>:
    1159:	4e 6f 00                                            No.

0000115c <ChannelRef12>:
    115c:	45 6c 65 76 2e 00                                   Elev..

00001162 <ChannelRef10>:
    1162:	54 68 72 6f 74 2e 00                                Throt..

00001169 <ChannelRef8>:
    1169:	4e 6f 6e 65 00                                      None.

0000116e <ChannelRef7>:
    116e:	41 55 58 33 00                                      AUX3.

00001173 <ChannelRef6>:
    1173:	41 55 58 32 00                                      AUX2.

00001178 <ChannelRef5>:
    1178:	41 55 58 31 00                                      AUX1.

0000117d <ChannelRef4>:
    117d:	47 65 61 72 00                                      Gear.

00001182 <ChannelRef3>:
    1182:	52 75 64 64 65 72 00                                Rudder.

00001189 <ChannelRef2>:
    1189:	45 6c 65 76 61 74 6f 72 00                          Elevator.

00001192 <ChannelRef1>:
    1192:	41 69 6c 65 72 6f 6e 00                             Aileron.

0000119a <ChannelRef0>:
    119a:	54 68 72 6f 74 74 6c 65 00                          Throttle.

000011a3 <MixerItem62>:
    11a3:	53 71 72 74 53 69 6e 65 00                          SqrtSine.

000011ac <MixerItem61>:
    11ac:	53 69 6e 65 00                                      Sine.

000011b1 <MixerItem60>:
    11b1:	4c 69 6e 65 61 72 00                                Linear.

000011b8 <MixerItem41>:
    11b8:	4d 6f 74 6f 72 00                                   Motor.

000011be <MixerItem40>:
    11be:	53 65 72 76 6f 00                                   Servo.

000011c4 <MixerItem81>:
    11c4:	41 4c 20 50 69 74 63 68 3a 00                       AL Pitch:.

000011ce <MixerItem80>:
    11ce:	41 4c 20 52 6f 6c 6c 3a 00                          AL Roll:.

000011d7 <MixerItem74>:
    11d7:	41 63 63 50 69 74 63 68 00                          AccPitch.

000011e0 <MixerItem73>:
    11e0:	41 63 63 52 6f 6c 6c 00                             AccRoll.

000011e8 <MixerItem72>:
    11e8:	47 79 72 6f 59 61 77 00                             GyroYaw.

000011f0 <MixerItem71>:
    11f0:	47 79 72 6f 50 69 74 63 68 00                       GyroPitch.

000011fa <MixerItem70>:
    11fa:	47 79 72 6f 52 6f 6c 6c 00                          GyroRoll.

00001203 <MixerItem31>:
    1203:	50 32 20 53 6f 75 72 63 65 20 42 3a 00              P2 Source B:.

00001210 <MixerItem21>:
    1210:	50 31 20 53 6f 75 72 63 65 20 42 3a 00              P1 Source B:.

0000121d <MixerItem30>:
    121d:	50 32 20 56 6f 6c 75 6d 65 3a 00                    P2 Volume:.

00001228 <MixerItem29>:
    1228:	50 32 20 53 6f 75 72 63 65 20 41 3a 00              P2 Source A:.

00001235 <MixerItem2>:
    1235:	50 31 20 56 6f 6c 75 6d 65 3a 00                    P1 Volume:.

00001240 <MixerItem0>:
    1240:	50 31 20 53 6f 75 72 63 65 20 41 3a 00              P1 Source A:.

0000124d <MixerItem43>:
    124d:	50 32 20 5a 20 61 63 63 3a 00                       P2 Z acc:.

00001257 <MixerItem42>:
    1257:	50 31 20 5a 20 61 63 63 3a 00                       P1 Z acc:.

00001261 <MixerItem28>:
    1261:	50 32 20 50 69 74 63 68 20 41 4c 3a 00              P2 Pitch AL:.

0000126e <MixerItem3>:
    126e:	50 31 20 50 69 74 63 68 20 41 4c 00                 P1 Pitch AL.

0000127a <MixerItem27>:
    127a:	50 32 20 52 6f 6c 6c 20 41 4c 3a 00                 P2 Roll AL:.

00001286 <MixerItem7>:
    1286:	50 31 20 52 6f 6c 6c 20 41 4c 3a 00                 P1 Roll AL:.

00001292 <MixerItem26>:
    1292:	50 32 20 59 61 77 20 67 79 72 6f 3a 00              P2 Yaw gyro:.

0000129f <MixerItem6>:
    129f:	50 31 20 59 61 77 20 67 79 72 6f 3a 00              P1 Yaw gyro:.

000012ac <MixerItem25>:
    12ac:	50 32 20 50 69 74 63 68 20 67 79 72 6f 3a 00        P2 Pitch gyro:.

000012bb <MixerItem5>:
    12bb:	50 31 20 50 69 74 63 68 20 67 79 72 6f 3a 00        P1 Pitch gyro:.

000012ca <MixerItem24>:
    12ca:	50 32 20 52 6f 6c 6c 20 67 79 72 6f 3a 00           P2 Roll gyro:.

000012d8 <MixerItem4>:
    12d8:	50 31 20 52 6f 6c 6c 20 67 79 72 6f 3a 00           P1 Roll gyro:.

000012e6 <MixerItem56>:
    12e6:	50 32 20 52 75 64 2e 20 76 6f 6c 75 6d 65 3a 00     P2 Rud. volume:.

000012f6 <MixerItem53>:
    12f6:	50 31 20 52 75 64 2e 20 76 6f 6c 75 6d 65 3a 00     P1 Rud. volume:.

00001306 <MixerItem55>:
    1306:	50 32 20 45 6c 65 2e 20 76 6f 6c 75 6d 65 3a 00     P2 Ele. volume:.

00001316 <MixerItem52>:
    1316:	50 31 20 45 6c 65 2e 20 76 6f 6c 75 6d 65 3a 00     P1 Ele. volume:.

00001326 <MixerItem54>:
    1326:	50 32 20 41 69 6c 2e 20 76 6f 6c 75 6d 65 3a 00     P2 Ail. volume:.

00001336 <MixerItem51>:
    1336:	50 31 20 41 69 6c 2e 20 76 6f 6c 75 6d 65 3a 00     P1 Ail. volume:.

00001346 <Mixeritem50>:
    1346:	54 68 72 6f 74 74 6c 65 20 63 75 72 76 65 00        Throttle curve.

00001355 <MixerItem33>:
    1355:	50 32 20 54 68 72 2e 20 76 6f 6c 75 6d 65 3a 00     P2 Thr. volume:.

00001365 <MixerItem23>:
    1365:	50 31 20 54 68 72 2e 20 76 6f 6c 75 6d 65 3a 00     P1 Thr. volume:.

00001375 <MixerItem34>:
    1375:	50 32 20 4f 66 66 73 65 74 3a 00                    P2 Offset:.

00001380 <MixerItem35>:
    1380:	50 31 2e 6e 20 4f 66 66 73 65 74 3a 00              P1.n Offset:.

0000138d <MixerItem36>:
    138d:	50 31 2e 6e 20 25 20 6f 66 20 74 72 61 6e 73 3a     P1.n % of trans:
	...

0000139e <MixerItem20>:
    139e:	50 31 20 4f 66 66 73 65 74 3a 00                    P1 Offset:.

000013a9 <MixerItem1>:
    13a9:	44 65 76 69 63 65 3a 00                             Device:.

000013b1 <P5text>:
    13b1:	50 31 2e 6e 20 2d 20 50 32 00                       P1.n - P2.

000013bb <P4text>:
    13bb:	50 31 20 2d 20 50 31 2e 6e 00                       P1 - P1.n.

000013c5 <P3text>:
    13c5:	50 32 00                                            P2.

000013c8 <P2text>:
    13c8:	50 31 2e 6e 00                                      P1.n.

000013cd <P1text>:
    13cd:	50 31 00                                            P1.

000013d0 <BattMenuItem2>:
    13d0:	42 61 74 2e 20 4c 56 41 20 78 31 30 3a 00           Bat. LVA x10:.

000013de <GeneralText7>:
    13de:	41 4c 20 63 6f 72 72 65 63 74 3a 00                 AL correct:.

000013ea <GeneralText16>:
    13ea:	47 79 72 6f 20 4c 50 46 3a 00                       Gyro LPF:.

000013f4 <GeneralText6>:
    13f4:	41 63 63 2e 20 4c 50 46 3a 00                       Acc. LPF:.

000013fe <GeneralText3>:
    13fe:	50 57 4d 20 72 61 74 65 3a 00                       PWM rate:.

00001408 <GeneralText2>:
    1408:	44 69 73 61 72 6d 20 74 69 6d 65 3a 00              Disarm time:.

00001415 <AutoMenuItem2>:
    1415:	53 61 66 65 74 79 3a 00                             Safety:.

0000141d <Contrast>:
    141d:	43 6f 6e 74 72 61 73 74 3a 00                       Contrast:.

00001427 <MixerMenuItem0>:
    1427:	4f 72 69 65 6e 74 61 74 69 6f 6e 3a 00              Orientation:.

00001434 <RCMenuItem7>:
    1434:	46 75 74 61 62 61 00                                Futaba.

0000143b <RCMenuItem6>:
    143b:	4a 52 2c 53 70 6b 74 6d 00                          JR,Spktm.

00001444 <RXMode3>:
    1444:	53 70 65 6b 74 72 75 6d 00                          Spektrum.

0000144d <RXMode2>:
    144d:	53 2d 42 75 73 00                                   S-Bus.

00001453 <RXMode1>:
    1453:	50 57 4d 00                                         PWM.

00001457 <RXMode0>:
    1457:	43 50 50 4d 00                                      CPPM.

0000145c <Transition_P1n>:
    145c:	54 72 61 6e 73 2e 20 50 31 6e 3a 00                 Trans. P1n:.

00001468 <Transition>:
    1468:	54 72 61 6e 73 69 74 69 6f 6e 00                    Transition.

00001473 <RCMenuItem10>:
    1473:	52 75 64 64 65 72 20 70 6f 6c 2e 3a 00              Rudder pol.:.

00001480 <RCMenuItem9>:
    1480:	45 6c 65 76 61 74 6f 72 20 70 6f 6c 2e 3a 00        Elevator pol.:.

0000148f <RCMenuItem8>:
    148f:	41 69 6c 65 72 6f 6e 20 70 6f 6c 2e 3a 00           Aileron pol.:.

0000149d <RCMenuItem2>:
    149d:	50 72 6f 66 69 6c 65 20 43 68 61 6e 2e 3a 00        Profile Chan.:.

000014ac <RCMenuItem0>:
    14ac:	43 68 2e 20 6f 72 64 65 72 3a 00                    Ch. order:.

000014b7 <RCMenuItem20>:
    14b7:	50 57 4d 20 73 79 6e 63 3a 00                       PWM sync:.

000014c1 <RCMenuItem1>:
    14c1:	52 58 20 74 79 70 65 3a 00                          RX type:.

000014ca <AutoMenuItem15>:
    14ca:	4f 4e 00                                            ON.

000014cd <AutoMenuItem11>:
    14cd:	4f 46 46 00                                         OFF.

000014d1 <StabMenuItem30>:
    14d1:	59 61 77 20 74 72 69 6d 3a 00                       Yaw trim:.

000014db <StabMenuItem9>:
    14db:	59 61 77 20 49 20 72 61 74 65 3a 00                 Yaw I rate:.

000014e7 <StabMenuItem12>:
    14e7:	59 61 77 20 49 20 4c 69 6d 69 74 3a 00              Yaw I Limit:.

000014f4 <StabMenuItem8>:
    14f4:	59 61 77 20 49 3a 00                                Yaw I:.

000014fb <StabMenuItem7>:
    14fb:	59 61 77 20 50 3a 00                                Yaw P:.

00001502 <AutoMenuItem8>:
    1502:	50 69 74 63 68 20 74 72 69 6d 3a 00                 Pitch trim:.

0000150e <AutoMenuItem21>:
    150e:	50 69 74 63 68 20 41 75 74 6f 4c 76 6c 3a 00        Pitch AutoLvl:.

0000151d <StabMenuItem6>:
    151d:	50 69 74 63 68 20 49 20 72 61 74 65 3a 00           Pitch I rate:.

0000152b <StabMenuItem11>:
    152b:	50 69 74 63 68 20 49 20 4c 69 6d 69 74 3a 00        Pitch I Limit:.

0000153a <StabMenuItem5>:
    153a:	50 69 74 63 68 20 49 3a 00                          Pitch I:.

00001543 <AutoMenuItem4>:
    1543:	50 69 74 63 68 20 50 3a 00                          Pitch P:.

0000154c <AutoMenuItem7>:
    154c:	52 6f 6c 6c 20 74 72 69 6d 3a 00                    Roll trim:.

00001557 <AutoMenuItem20>:
    1557:	52 6f 6c 6c 20 41 75 74 6f 4c 76 6c 3a 00           Roll AutoLvl:.

00001565 <StabMenuItem3>:
    1565:	52 6f 6c 6c 20 49 20 72 61 74 65 3a 00              Roll I rate:.

00001572 <StabMenuItem10>:
    1572:	52 6f 6c 6c 20 49 20 4c 69 6d 69 74 3a 00           Roll I Limit:.

00001580 <StabMenuItem2>:
    1580:	52 6f 6c 6c 20 49 3a 00                             Roll I:.

00001588 <AutoMenuItem1>:
    1588:	52 6f 6c 6c 20 50 3a 00                             Roll P:.

00001590 <StabMenuItem13>:
    1590:	41 63 63 20 56 65 72 74 20 50 3a 00                 Acc Vert P:.

0000159c <SensorMenuItem2>:
    159c:	49 6e 76 2e 00                                      Inv..

000015a1 <SensorMenuItem1>:
    15a1:	43 61 6c 2e 00                                      Cal..

000015a6 <PText19>:
    15a6:	41 63 63 00                                         Acc.

000015aa <PText18>:
    15aa:	59 61 77 00                                         Yaw.

000015ae <PText17>:
    15ae:	50 69 74 63 68 00                                   Pitch.

000015b4 <PText16>:
    15b4:	52 6f 6c 6c 00                                      Roll.

000015b9 <PText15>:
    15b9:	47 79 72 6f 00                                      Gyro.

000015be <MainMenuItem23>:
    15be:	31 39 2e 20 50 6f 73 2e 20 53 65 72 76 6f 20 74     19. Pos. Servo t
    15ce:	72 76 6c 2e 20 28 25 29 00                          rvl. (%).

000015d7 <MainMenuItem22>:
    15d7:	31 38 2e 20 4e 65 67 2e 20 53 65 72 76 6f 20 74     18. Neg. Servo t
    15e7:	72 76 6c 2e 20 28 25 29 00                          rvl. (%).

000015f0 <MainMenuItem20>:
    15f0:	31 37 2e 20 53 65 72 76 6f 20 64 69 72 65 63 74     17. Servo direct
    1600:	69 6f 6e 00                                         ion.

00001604 <MainMenuItem18>:
    1604:	31 36 2e 20 4f 55 54 38 20 4d 69 78 65 72 00        16. OUT8 Mixer.

00001613 <MainMenuItem17>:
    1613:	31 35 2e 20 4f 55 54 37 20 4d 69 78 65 72 00        15. OUT7 Mixer.

00001622 <MainMenuItem16>:
    1622:	31 34 2e 20 4f 55 54 36 20 4d 69 78 65 72 00        14. OUT6 Mixer.

00001631 <MainMenuItem15>:
    1631:	31 33 2e 20 4f 55 54 35 20 4d 69 78 65 72 00        13. OUT5 Mixer.

00001640 <MainMenuItem14>:
    1640:	31 32 2e 20 4f 55 54 34 20 4d 69 78 65 72 00        12. OUT4 Mixer.

0000164f <MainMenuItem13>:
    164f:	31 31 2e 20 4f 55 54 33 20 4d 69 78 65 72 00        11. OUT3 Mixer.

0000165e <MainMenuItem12>:
    165e:	31 30 2e 20 4f 55 54 32 20 4d 69 78 65 72 00        10. OUT2 Mixer.

0000166d <MainMenuItem11>:
    166d:	39 2e 20 4f 55 54 31 20 4d 69 78 65 72 00           9. OUT1 Mixer.

0000167b <MainMenuItem3>:
    167b:	38 2e 20 46 6c 69 67 68 74 20 70 72 6f 66 69 6c     8. Flight profil
    168b:	65 20 32 00                                         e 2.

0000168f <MainMenuItem2>:
    168f:	37 2e 20 46 6c 69 67 68 74 20 70 72 6f 66 69 6c     7. Flight profil
    169f:	65 20 31 00                                         e 1.

000016a3 <MainMenuItem10>:
    16a3:	36 2e 20 4c 65 76 65 6c 20 6d 65 74 65 72 00        6. Level meter.

000016b2 <MainMenuItem8>:
    16b2:	35 2e 20 53 65 6e 73 6f 72 20 63 61 6c 69 62 72     5. Sensor calibr
    16c2:	61 74 69 6f 6e 00                                   ation.

000016c8 <MainMenuItem7>:
    16c8:	34 2e 20 53 74 69 63 6b 20 70 6f 6c 61 72 69 74     4. Stick polarit
    16d8:	79 00                                               y.

000016da <MainMenuItem9>:
    16da:	33 2e 20 52 65 63 65 69 76 65 72 20 69 6e 70 75     3. Receiver inpu
    16ea:	74 73 00                                            ts.

000016ed <MainMenuItem1>:
    16ed:	32 2e 20 52 65 63 65 69 76 65 72 20 73 65 74 75     2. Receiver setu
    16fd:	70 00                                               p.

000016ff <MainMenuItem0>:
    16ff:	31 2e 20 47 65 6e 65 72 61 6c 00                    1. General.

0000170a <MenuFrame8>:
    170a:	53 61 76 65 00                                      Save.

0000170f <MenuFrame7>:
    170f:	44 65 66 2e 00                                      Def..

00001714 <MenuFrame6>:
    1714:	42 61 63 6b 00                                      Back.

00001719 <MenuFrame5>:
    1719:	4d 65 6e 75 00                                      Menu.

0000171e <MenuFrame1>:
    171e:	45 00                                               E.

00001720 <MenuFrame4>:
    1720:	44 00                                               D.

00001722 <MenuFrame3>:
    1722:	43 00                                               C.

00001724 <MenuFrame2>:
    1724:	42 00                                               B.

00001726 <MenuFrame0>:
    1726:	41 00                                               A.

00001728 <StatusText9>:
    1728:	4a 69 74 74 65 72 3a 00                             Jitter:.

00001730 <StatusText8>:
    1730:	50 6f 73 3a 00                                      Pos:.

00001735 <StatusText7>:
    1735:	42 61 74 74 65 72 79 3a 00                          Battery:.

0000173e <StatusText5>:
    173e:	30 00                                               0.

00001740 <StatusText4>:
    1740:	2e 00                                               ..

00001742 <StatusText3>:
    1742:	50 72 6f 66 69 6c 65 3a 00                          Profile:.

0000174b <StatusText1>:
    174b:	4d 6f 64 65 3a 00                                   Mode:.

00001751 <StatusText0>:
    1751:	56 65 72 73 69 6f 6e 3a 20 31 2e 31 20 42 31 00     Version: 1.1 B1.

00001761 <Gyro_Pol>:
    1761:	01 01 01 01 01 01 01 ff ff ff ff 01 01 ff 01 ff     ................
    1771:	01 01                                               ..

00001773 <Gyro_RPY_Order>:
    1773:	00 01 02 01 02 00 00 01 02 00 01 02 01 00 02 02     ................
    1783:	01 00                                               ..

00001785 <LPF_lookup>:
    1785:	17 0c 06 04 03 02 01                                .......

0000178c <lines>:
    178c:	03 0f 1b 27                                         ...'

00001790 <flight_menu_ranges>:
    1790:	00 7f 01 00 3c 00 7f 01 00 28 00 7d 01 00 0a 00     ....<....(.}....
    17a0:	04 01 00 02 00 7f 01 00 05 81 7f 01 00 00 00 7f     ................
    17b0:	01 00 3c 00 7f 01 00 28 00 7d 01 00 0a 00 04 01     ..<....(.}......
    17c0:	00 02 00 7f 01 00 05 81 7f 01 00 00 00 7f 01 00     ................
    17d0:	50 00 7f 01 00 00 00 7d 01 00 00 00 04 01 00 01     P......}........
    17e0:	81 7f 01 00 00 00 7f 01 00 00                       ..........

000017ea <FlightMenuText>:
	...

000017fc <mixer_menu_ranges>:
    17fc:	00 01 01 01 00 83 7d 01 00 00 01 63 01 00 32 83     ......}....c..2.
    180c:	7d 01 00 00 83 7d 01 00 00 00 7d 01 00 64 00 7d     }....}....}..d.}
    181c:	01 00 64 00 02 01 01 00 83 7d 01 00 00 83 7d 01     ..d......}....}.
    182c:	00 00 83 7d 01 00 00 83 7d 01 00 00 83 7d 01 00     ...}....}....}..
    183c:	00 83 7d 01 00 00 00 04 01 01 00 00 04 01 01 00     ..}.............
    184c:	00 04 01 01 00 00 04 01 01 00 00 04 01 01 00 00     ................
    185c:	04 01 01 00 00 04 01 01 00 00 04 01 01 00 00 04     ................
    186c:	01 01 00 00 04 01 01 00 00 04 01 01 00 00 04 01     ................
    187c:	01 00 00 0f 01 01 0f 83 7d 01 00 00 00 0f 01 01     ........}.......
    188c:	0f 83 7d 01 00 00 00 0f 01 01 0f 83 7d 01 00 00     ..}.........}...
    189c:	00 0f 01 01 0f 83 7d 01 00 00                       ......}...

000018a6 <MixerMenuText>:
    18a6:	2e 00 00 00 00 00 00 38 00 00 00 00 00 00 44 44     .......8......DD
    18b6:	44 44 44 44 44 44 44 44 44 44 ee 00 ee 00 ee 00     DDDDDDDDDD......
    18c6:	ee 00                                               ..

000018c8 <servo_menu_ranges>:
    18c8:	00 01 01 01 00 83 00 01 00 9c 00 7d 01 00 64        ...........}..d

000018d7 <ServoMenuText>:
    18d7:	8d 8d 8d 8d 8d 8d 8d 8d 00 00 00 00 00 00 00 00     ................
	...

000018ef <rc_menu_ranges>:
    18ef:	00 03 01 01 01 00 04 01 01 04 00 01 01 01 00 00     ................
    18ff:	08 01 01 04 00 01 01 01 00 00 01 01 01 00 00 01     ................
    190f:	01 01 00 00 28 01 00 00 01 63 01 00 32 00 00 00     ....(....c..2...
    191f:	00 00 00 05 01 01 00 1c 32 01 00 24 00 01 01 01     ........2..$....
    192f:	01 00 7f 01 00 1e 00 7f 01 00 00 00 01 01 01 00     ................
    193f:	00 06 01 01 02 00 06 01 01 06 01 0a 01 00 07 00     ................
    194f:	06 01 01 02                                         ....

00001953 <RCMenuText>:
    1953:	3e 69 74 69 8d 8d 8d 00 00 00 7c 00 2c 00 00 76     >iti......|.,..v
    1963:	62 62 00 25                                         bb.%

00001967 <SQRTSIN>:
    1967:	00 0d 12 16 19 1c 1f 21 23 26 28 29 2b 2d 2f 30     .......!#&()+-/0
    1977:	32 33 35 36 38 39 3a 3b 3d 3e 3f 40 41 42 43 44     235689:;=>?@ABCD
    1987:	45 46 47 48 49 4a 4b 4c 4d 4d 4e 4f 50 51 51 52     EFGHIJKLMMNOPQQR
    1997:	53 53 54 55 55 56 57 57 58 58 59 59 5a 5a 5b 5b     SSTUUVWWXXYYZZ[[
    19a7:	5c 5c 5d 5d 5e 5e 5e 5f 5f 5f 60 60 60 61 61 61     \\]]^^^___```aaa
    19b7:	62 62 62 62 62 63 63 63 63 63 63 63 64 64 64 64     bbbbbcccccccdddd
    19c7:	64 64 64 64 64                                      ddddd

000019cc <SIN>:
    19cc:	00 02 03 05 06 08 0a 0b 0d 0e 10 11 13 14 16 17     ................
    19dc:	19 1a 1c 1d 1f 20 22 23 25 26 28 29 2b 2c 2d 2f     ..... "#%&()+,-/
    19ec:	30 32 33 34 36 37 38 3a 3b 3c 3d 3f 40 41 42 43     0234678:;<=?@ABC
    19fc:	44 46 47 48 49 4a 4b 4c 4d 4e 4f 50 51 52 53 54     DFGHIJKLMNOPQRST
    1a0c:	54 55 56 57 58 58 59 5a 5a 5b 5c 5c 5d 5e 5e 5f     TUVWXXYZZ[\\]^^_
    1a1c:	5f 60 60 60 61 61 62 62 62 63 63 63 63 63 64 64     _```aabbbcccccdd
    1a2c:	64 64 64 64 64 00                                   ddddd.

00001a32 <__ctors_end>:
    1a32:	11 24       	eor	r1, r1
    1a34:	1f be       	out	0x3f, r1	; 63
    1a36:	cf ef       	ldi	r28, 0xFF	; 255
    1a38:	d0 e1       	ldi	r29, 0x10	; 16
    1a3a:	de bf       	out	0x3e, r29	; 62
    1a3c:	cd bf       	out	0x3d, r28	; 61

00001a3e <wdt_init>:
// WDT reset prototype. Placed before main() in code to prevent wdt re-firing
void wdt_init(void) __attribute__((naked)) __attribute__((section(".init3")));

void wdt_init(void)
{
	MCUSR = 0;
    1a3e:	14 be       	out	0x34, r1	; 52
	wdt_disable();
    1a40:	88 e1       	ldi	r24, 0x18	; 24
    1a42:	0f b6       	in	r0, 0x3f	; 63
    1a44:	f8 94       	cli
    1a46:	80 93 60 00 	sts	0x0060, r24
    1a4a:	10 92 60 00 	sts	0x0060, r1
    1a4e:	0f be       	out	0x3f, r0	; 63

00001a50 <__do_copy_data>:
    1a50:	15 e0       	ldi	r17, 0x05	; 5
    1a52:	a0 e0       	ldi	r26, 0x00	; 0
    1a54:	b1 e0       	ldi	r27, 0x01	; 1
    1a56:	e2 ec       	ldi	r30, 0xC2	; 194
    1a58:	f4 e8       	ldi	r31, 0x84	; 132
    1a5a:	02 c0       	rjmp	.+4      	; 0x1a60 <__do_copy_data+0x10>
    1a5c:	05 90       	lpm	r0, Z+
    1a5e:	0d 92       	st	X+, r0
    1a60:	ac 30       	cpi	r26, 0x0C	; 12
    1a62:	b1 07       	cpc	r27, r17
    1a64:	d9 f7       	brne	.-10     	; 0x1a5c <__do_copy_data+0xc>

00001a66 <__do_clear_bss>:
    1a66:	28 e0       	ldi	r18, 0x08	; 8
    1a68:	ac e0       	ldi	r26, 0x0C	; 12
    1a6a:	b5 e0       	ldi	r27, 0x05	; 5
    1a6c:	01 c0       	rjmp	.+2      	; 0x1a70 <.do_clear_bss_start>

00001a6e <.do_clear_bss_loop>:
    1a6e:	1d 92       	st	X+, r1

00001a70 <.do_clear_bss_start>:
    1a70:	a4 34       	cpi	r26, 0x44	; 68
    1a72:	b2 07       	cpc	r27, r18
    1a74:	e1 f7       	brne	.-8      	; 0x1a6e <.do_clear_bss_loop>
    1a76:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <main>
    1a7a:	0c 94 5f 42 	jmp	0x84be	; 0x84be <_exit>

00001a7e <__bad_interrupt>:
    1a7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00001a82 <glcd_delay>:
;*************************************************************************

	.global glcd_delay
	.func   glcd_delay
glcd_delay:
	nop					// 1 5 * 50ns = 250ns = 4MHz
    1a82:	00 00       	nop
	ret					// 4 (5 cycles)
    1a84:	08 95       	ret

00001a86 <glcd_delay_1us>:
;*************************************************************************

	.global glcd_delay_1us
	.func   glcd_delay_1us
glcd_delay_1us:
	rcall	glcd_delay
    1a86:	fd df       	rcall	.-6      	; 0x1a82 <glcd_delay>
	rcall	glcd_delay
    1a88:	fc df       	rcall	.-8      	; 0x1a82 <glcd_delay>
	rcall	glcd_delay
    1a8a:	fb df       	rcall	.-10     	; 0x1a82 <glcd_delay>
	rcall	glcd_delay
    1a8c:	fa df       	rcall	.-12     	; 0x1a82 <glcd_delay>
	ret
    1a8e:	08 95       	ret

00001a90 <bind_master>:
;*************************************************************************

	.global bind_master
	.func   bind_master
bind_master:
	push	YL			//	1
    1a90:	cf 93       	push	r28
	push	XL			//	1
    1a92:	af 93       	push	r26

	ldi		XL,0x5		// 	1 Master is 5 pulses
    1a94:	a5 e0       	ldi	r26, 0x05	; 5

00001a96 <master_loop>:
master_loop:
	cbi 	BIND		//	2
    1a96:	58 98       	cbi	0x0b, 0	; 11
	ldi		YL,0x76		// 	1 		118us
    1a98:	c6 e7       	ldi	r28, 0x76	; 118
	call	VarDelay	//	4
    1a9a:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <VarDelay>
	sbi		BIND		//	2
    1a9e:	58 9a       	sbi	0x0b, 0	; 11
	ldi		YL,0x7A		// 	1 		122us
    1aa0:	ca e7       	ldi	r28, 0x7A	; 122
	call	VarDelay	//	4
    1aa2:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <VarDelay>
	dec		XL			//	1
    1aa6:	aa 95       	dec	r26
	brne	master_loop	//  2 1
    1aa8:	b1 f7       	brne	.-20     	; 0x1a96 <master_loop>

	pop		XL			//	  1
    1aaa:	af 91       	pop	r26
	pop		YL			//	  1
    1aac:	cf 91       	pop	r28
	ret					//	  4 
    1aae:	08 95       	ret

00001ab0 <VarDelay>:
; 5 cycles to configure and call, 4 to return and 2 to change bit afterwards = 11
; 20 cycles makes 1.0us
;*************************************************************************

VarDelay:
	rjmp .+0			// 2
    1ab0:	00 c0       	rjmp	.+0      	; 0x1ab2 <VarDelay+0x2>
	rjmp .+0			// 2
    1ab2:	00 c0       	rjmp	.+0      	; 0x1ab4 <VarDelay+0x4>
	rjmp .+0			// 2
    1ab4:	00 c0       	rjmp	.+0      	; 0x1ab6 <VarDelay+0x6>
	rjmp .+0			// 2
    1ab6:	00 c0       	rjmp	.+0      	; 0x1ab8 <VarDelay+0x8>
	rjmp .+0			// 2
    1ab8:	00 c0       	rjmp	.+0      	; 0x1aba <VarDelay+0xa>
	rjmp .+0			// 2
    1aba:	00 c0       	rjmp	.+0      	; 0x1abc <VarDelay+0xc>
	rjmp .+0			// 2
    1abc:	00 c0       	rjmp	.+0      	; 0x1abe <VarDelay+0xe>
	rjmp .+0			// 2
    1abe:	00 c0       	rjmp	.+0      	; 0x1ac0 <VarDelay+0x10>
	nop					// 1
    1ac0:	00 00       	nop
	dec 	YL			// 1
    1ac2:	ca 95       	dec	r28
	brne	VarDelay	// 2 1
    1ac4:	a9 f7       	brne	.-22     	; 0x1ab0 <VarDelay>
	ret					//   4 
    1ac6:	08 95       	ret

00001ac8 <output_servo_ppm_asm>:

	.global output_servo_ppm_asm
	.func   output_servo_ppm_asm
output_servo_ppm_asm:
// Save regs
	push	ZL			// 2			
    1ac8:	ef 93       	push	r30
	push	ZH			// 2
    1aca:	ff 93       	push	r31
	push	XL			// 2
    1acc:	af 93       	push	r26
	push	XH			// 2
    1ace:	bf 93       	push	r27
	push	YL			// 2
    1ad0:	cf 93       	push	r28
	push	YH			// 2
    1ad2:	df 93       	push	r29
	push	16			// 2
    1ad4:	0f 93       	push	r16
	push	17			// 2
    1ad6:	1f 93       	push	r17
	push	18			// 2
    1ad8:	2f 93       	push	r18
	push	19			// 2
    1ada:	3f 93       	push	r19
	push	20			// 2
    1adc:	4f 93       	push	r20
	push	21			// 2
    1ade:	5f 93       	push	r21
	push	22			// 2
    1ae0:	6f 93       	push	r22
	push	23			// 2
    1ae2:	7f 93       	push	r23

// Get start address of ServoOut[0] into Z
	mov		ZL, r24		// 1 Low byte
    1ae4:	e8 2f       	mov	r30, r24
	mov		ZH, r25		// 1 High byte
    1ae6:	f9 2f       	mov	r31, r25

// Save initial address for later
	push	24			// 2
    1ae8:	8f 93       	push	r24
	push	25			// 2
    1aea:	9f 93       	push	r25

// Trim 16-bit values to suit individual needs, 
// Save result and copy lower 3 bits to r16 to r23 (96 cycles)

// M1
	ld		XL, Z+ 		// 2			Load XL with data at address in Z
    1aec:	a1 91       	ld	r26, Z+
	ld		XH, Z+		// 2			Load XH with data at address in Z+1
    1aee:	b1 91       	ld	r27, Z+
	subi	XL,	0x4a	// 1 			Trim servo pulse
    1af0:	aa 54       	subi	r26, 0x4A	; 74
	sbci 	XH,	0x03	// 1
    1af2:	b3 40       	sbci	r27, 0x03	; 3
	push	XL 			// 2			Save trimmed value to the stack
    1af4:	af 93       	push	r26
	push	XH 			// 2
    1af6:	bf 93       	push	r27
	andi	XL,	0x07	// 1			And all but first 3 bits
    1af8:	a7 70       	andi	r26, 0x07	; 7
	mov		r23,XL		// 1 (12)		Copy 8-bit result to regs
    1afa:	7a 2f       	mov	r23, r26
// M2
	ld		XL, Z+
    1afc:	a1 91       	ld	r26, Z+
	ld		XH, Z+
    1afe:	b1 91       	ld	r27, Z+
	subi	XL,	0xe6
    1b00:	a6 5e       	subi	r26, 0xE6	; 230
	sbci 	XH,	0x02
    1b02:	b2 40       	sbci	r27, 0x02	; 2
	push	XL 		
    1b04:	af 93       	push	r26
	push	XH 		
    1b06:	bf 93       	push	r27
	andi	XL,	0x07
    1b08:	a7 70       	andi	r26, 0x07	; 7
	mov		r22,XL	
    1b0a:	6a 2f       	mov	r22, r26
// M3
	ld		XL, Z+
    1b0c:	a1 91       	ld	r26, Z+
	ld		XH, Z+
    1b0e:	b1 91       	ld	r27, Z+
	subi	XL,	0x82
    1b10:	a2 58       	subi	r26, 0x82	; 130
	sbci 	XH,	0x02
    1b12:	b2 40       	sbci	r27, 0x02	; 2
	push	XL 		
    1b14:	af 93       	push	r26
	push	XH 		
    1b16:	bf 93       	push	r27
	andi	XL,	0x07
    1b18:	a7 70       	andi	r26, 0x07	; 7
	mov		r21,XL	
    1b1a:	5a 2f       	mov	r21, r26
// M4
	ld		XL, Z+
    1b1c:	a1 91       	ld	r26, Z+
	ld		XH, Z+
    1b1e:	b1 91       	ld	r27, Z+
	subi	XL,	0x1e
    1b20:	ae 51       	subi	r26, 0x1E	; 30
	sbci 	XH,	0x02
    1b22:	b2 40       	sbci	r27, 0x02	; 2
	push	XL 	
    1b24:	af 93       	push	r26
	push	XH 	
    1b26:	bf 93       	push	r27
	andi	XL,	0x07
    1b28:	a7 70       	andi	r26, 0x07	; 7
	mov		r20,XL	
    1b2a:	4a 2f       	mov	r20, r26
// M5
	ld		XL, Z+
    1b2c:	a1 91       	ld	r26, Z+
	ld		XH, Z+
    1b2e:	b1 91       	ld	r27, Z+
	subi	XL,	0xb9
    1b30:	a9 5b       	subi	r26, 0xB9	; 185
	sbci 	XH,	0x01
    1b32:	b1 40       	sbci	r27, 0x01	; 1
	push	XL 	
    1b34:	af 93       	push	r26
	push	XH 	
    1b36:	bf 93       	push	r27
	andi	XL,	0x07
    1b38:	a7 70       	andi	r26, 0x07	; 7
	mov		r19,XL	
    1b3a:	3a 2f       	mov	r19, r26
// M6
	ld		XL, Z+
    1b3c:	a1 91       	ld	r26, Z+
	ld		XH, Z+
    1b3e:	b1 91       	ld	r27, Z+
	subi	XL,	0x55
    1b40:	a5 55       	subi	r26, 0x55	; 85
	sbci 	XH,	0x01
    1b42:	b1 40       	sbci	r27, 0x01	; 1
	push	XL 	
    1b44:	af 93       	push	r26
	push	XH 	
    1b46:	bf 93       	push	r27
	andi	XL,	0x07
    1b48:	a7 70       	andi	r26, 0x07	; 7
	mov		r18,XL
    1b4a:	2a 2f       	mov	r18, r26
// M7
	ld		XL, Z+
    1b4c:	a1 91       	ld	r26, Z+
	ld		XH, Z+
    1b4e:	b1 91       	ld	r27, Z+
	subi	XL,	0xf1
    1b50:	a1 5f       	subi	r26, 0xF1	; 241
	sbci 	XH,	0x00
    1b52:	b0 40       	sbci	r27, 0x00	; 0
	push	XL 	
    1b54:	af 93       	push	r26
	push	XH 
    1b56:	bf 93       	push	r27
	andi	XL,	0x07
    1b58:	a7 70       	andi	r26, 0x07	; 7
	mov		r17,XL
    1b5a:	1a 2f       	mov	r17, r26
// M8
	ld		XL, Z+
    1b5c:	a1 91       	ld	r26, Z+
	ld		XH, Z+
    1b5e:	b1 91       	ld	r27, Z+
	subi	XL,	0x8d
    1b60:	ad 58       	subi	r26, 0x8D	; 141
	sbci 	XH,	0x00
    1b62:	b0 40       	sbci	r27, 0x00	; 0
	push	XL
    1b64:	af 93       	push	r26
	push	XH 
    1b66:	bf 93       	push	r27
	andi	XL,	0x07
    1b68:	a7 70       	andi	r26, 0x07	; 7
	mov		r16,XL
    1b6a:	0a 2f       	mov	r16, r26
// Time out lower 3 bits of pulse value (Zero to 7us)
// Each chunk is always executed in 1+10+1+147 = 159 cycles or 7.95us
// This does affect the inter-pulse delay, but not the pulsewidth.

// M1
	mov		r25,r23		// 1
    1b6c:	97 2f       	mov	r25, r23
	call	DelayHigh	// 10 (where r25 = 7)
    1b6e:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <DelayHigh>
	sbi 	M1			// 1
    1b72:	46 9a       	sbi	0x08, 6	; 8
	call	DelayLow	// 7 + 140 (where r25 = 0)
    1b74:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <DelayLow>
	call    pwm_delay   // 100us
    1b78:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <pwm_delay>
	call    pwm_delay
    1b7c:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <pwm_delay>

// M2
	mov		r25,r22
    1b80:	96 2f       	mov	r25, r22
	call	DelayHigh
    1b82:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <DelayHigh>
	sbi 	M2
    1b86:	44 9a       	sbi	0x08, 4	; 8
	call	DelayLow
    1b88:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <DelayLow>
	call    pwm_delay   // 100us
    1b8c:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <pwm_delay>
	call    pwm_delay
    1b90:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <pwm_delay>

// M3
	mov		r25,r21
    1b94:	95 2f       	mov	r25, r21
	call	DelayHigh
    1b96:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <DelayHigh>
	sbi 	M3
    1b9a:	42 9a       	sbi	0x08, 2	; 8
	call	DelayLow
    1b9c:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <DelayLow>
	call    pwm_delay   // 100us
    1ba0:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <pwm_delay>
	call    pwm_delay
    1ba4:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <pwm_delay>

// M4
	mov		r25,r20
    1ba8:	94 2f       	mov	r25, r20
	call	DelayHigh
    1baa:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <DelayHigh>
	sbi 	M4
    1bae:	43 9a       	sbi	0x08, 3	; 8
	call	DelayLow
    1bb0:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <DelayLow>
	call    pwm_delay   // 100us
    1bb4:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <pwm_delay>
	call    pwm_delay
    1bb8:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <pwm_delay>

// M5
	mov		r25,r19
    1bbc:	93 2f       	mov	r25, r19
	call	DelayHigh
    1bbe:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <DelayHigh>
	sbi 	M5
    1bc2:	14 9a       	sbi	0x02, 4	; 2
	call	DelayLow
    1bc4:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <DelayLow>
	call    pwm_delay   // 100us
    1bc8:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <pwm_delay>
	call    pwm_delay
    1bcc:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <pwm_delay>

// M6
	mov		r25,r18
    1bd0:	92 2f       	mov	r25, r18
	call	DelayHigh
    1bd2:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <DelayHigh>
	sbi 	M6
    1bd6:	15 9a       	sbi	0x02, 5	; 2
	call	DelayLow
    1bd8:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <DelayLow>
	call    pwm_delay   // 100us
    1bdc:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <pwm_delay>
	call    pwm_delay
    1be0:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <pwm_delay>

// M7
	mov		r25,r17
    1be4:	91 2f       	mov	r25, r17
	call	DelayHigh
    1be6:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <DelayHigh>
	sbi 	M7
    1bea:	45 9a       	sbi	0x08, 5	; 8
	call	DelayLow
    1bec:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <DelayLow>
	call    pwm_delay   // 100us
    1bf0:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <pwm_delay>
	call    pwm_delay
    1bf4:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <pwm_delay>

// M8
	mov		r25,r16
    1bf8:	90 2f       	mov	r25, r16
	call	DelayHigh
    1bfa:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <DelayHigh>
	sbi 	M8
    1bfe:	47 9a       	sbi	0x08, 7	; 8
	call	DelayLow
    1c00:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <DelayLow>
// At this point, the largest pulse that we can generate is 256 * 8 = 2.048ms
// However we would like to be able to generate up to 2.100ms (150%) - an extra 52us
// So we can fluff it out another 200us so that we can subtract enough to keep r16 under 0xff or 256 :)
// With this setup, M1 can go down to 850 and M8 can go up to 2150

	call    pwm_delay   // 150us
    1c04:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <pwm_delay>
	call    pwm_delay
    1c08:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <pwm_delay>
	call    pwm_delay
    1c0c:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <pwm_delay>

// Copy trimmed array data into regs
// This now represents steps of 8us chunks
	pop		XH			// M8
    1c10:	bf 91       	pop	r27
	pop		XL
    1c12:	af 91       	pop	r26
	call	shuffle_8
    1c14:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <shuffle_8>
	mov		r16,XL
    1c18:	0a 2f       	mov	r16, r26
	pop		XH			// M7
    1c1a:	bf 91       	pop	r27
	pop		XL
    1c1c:	af 91       	pop	r26
	call	shuffle_8
    1c1e:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <shuffle_8>
	mov		r17,XL
    1c22:	1a 2f       	mov	r17, r26
	pop		XH			// M6
    1c24:	bf 91       	pop	r27
	pop		XL
    1c26:	af 91       	pop	r26
	call	shuffle_8
    1c28:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <shuffle_8>
	mov		r18,XL
    1c2c:	2a 2f       	mov	r18, r26
	pop		XH			// M5
    1c2e:	bf 91       	pop	r27
	pop		XL
    1c30:	af 91       	pop	r26
	call	shuffle_8
    1c32:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <shuffle_8>
	mov		r19,XL
    1c36:	3a 2f       	mov	r19, r26
	pop		XH			// M4
    1c38:	bf 91       	pop	r27
	pop		XL
    1c3a:	af 91       	pop	r26
	call	shuffle_8
    1c3c:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <shuffle_8>
	mov		r20,XL
    1c40:	4a 2f       	mov	r20, r26
	pop		XH			// M3
    1c42:	bf 91       	pop	r27
	pop		XL
    1c44:	af 91       	pop	r26
	call	shuffle_8
    1c46:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <shuffle_8>
	mov		r21,XL
    1c4a:	5a 2f       	mov	r21, r26
	pop		XH			// M2
    1c4c:	bf 91       	pop	r27
	pop		XL
    1c4e:	af 91       	pop	r26
	call	shuffle_8
    1c50:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <shuffle_8>
	mov		r22,XL
    1c54:	6a 2f       	mov	r22, r26
	pop		XH			// M1
    1c56:	bf 91       	pop	r27
	pop		XL
    1c58:	af 91       	pop	r26
	call	shuffle_8
    1c5a:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <shuffle_8>
	mov		r23,XL
    1c5e:	7a 2f       	mov	r23, r26

// Loop prep
	ldi 	YL,0x13		// 1			Set loop count to 113h or 275 (275 * 8us = 2200us)
    1c60:	c3 e1       	ldi	r28, 0x13	; 19
	ldi		YH,0x01		// 1
    1c62:	d1 e0       	ldi	r29, 0x01	; 1
	clr		0			// 1 (7)
    1c64:	00 24       	eor	r0, r0

00001c66 <nloop>:

// Ninja loop - 7 cycles each side (8 x 7 = 56 + 6 to loop + 98 pad = 160 cycles)
// 20 cyles = 1us, 160 cycles = 8us

nloop:
	subi	r23,1		// 1 			ServoOut1
    1c66:	71 50       	subi	r23, 0x01	; 1
	brne	j1			// 2	1	
    1c68:	19 f4       	brne	.+6      	; 0x1c70 <j1>
	cbi 	M1			// 		2		Clear output M1 if done (+5 = 1448 = 72.4us = 48)
    1c6a:	46 98       	cbi	0x08, 6	; 8
	jmp		jj1			//		3
    1c6c:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <jj1>

00001c70 <j1>:
j1:
	rjmp 	.+0			// 2
    1c70:	00 c0       	rjmp	.+0      	; 0x1c72 <j1+0x2>
	rjmp 	.+0			// 2
    1c72:	00 c0       	rjmp	.+0      	; 0x1c74 <jj1>

00001c74 <jj1>:
jj1:
	subi	r22,1		// 1			ServoOut2
    1c74:	61 50       	subi	r22, 0x01	; 1
	brne	j2			// 2	1
    1c76:	19 f4       	brne	.+6      	; 0x1c7e <j2>
	cbi 	M2			// 		2		Clear output M2 if done (+11 = 1285 = 64.25us = 40)
    1c78:	44 98       	cbi	0x08, 4	; 8
	jmp		jj2			//		3
    1c7a:	0c 94 41 0e 	jmp	0x1c82	; 0x1c82 <jj2>

00001c7e <j2>:
j2:
	rjmp	.+0
    1c7e:	00 c0       	rjmp	.+0      	; 0x1c80 <j2+0x2>
	rjmp	.+0
    1c80:	00 c0       	rjmp	.+0      	; 0x1c82 <jj2>

00001c82 <jj2>:
jj2:
	subi	r21,1
    1c82:	51 50       	subi	r21, 0x01	; 1
	brne	j3
    1c84:	19 f4       	brne	.+6      	; 0x1c8c <j3>
	cbi 	M3
    1c86:	42 98       	cbi	0x08, 2	; 8
	jmp		jj3
    1c88:	0c 94 48 0e 	jmp	0x1c90	; 0x1c90 <jj3>

00001c8c <j3>:
j3:
	rjmp	.+0
    1c8c:	00 c0       	rjmp	.+0      	; 0x1c8e <j3+0x2>
	rjmp	.+0
    1c8e:	00 c0       	rjmp	.+0      	; 0x1c90 <jj3>

00001c90 <jj3>:
jj3:
	subi 	r20,1
    1c90:	41 50       	subi	r20, 0x01	; 1
	brne	j4
    1c92:	19 f4       	brne	.+6      	; 0x1c9a <j4>
	cbi 	M4
    1c94:	43 98       	cbi	0x08, 3	; 8
	jmp		jj4	
    1c96:	0c 94 4f 0e 	jmp	0x1c9e	; 0x1c9e <jj4>

00001c9a <j4>:
j4:
	rjmp 	.+0
    1c9a:	00 c0       	rjmp	.+0      	; 0x1c9c <j4+0x2>
	rjmp 	.+0
    1c9c:	00 c0       	rjmp	.+0      	; 0x1c9e <jj4>

00001c9e <jj4>:
jj4:
	subi	r19,1
    1c9e:	31 50       	subi	r19, 0x01	; 1
	brne	j5
    1ca0:	19 f4       	brne	.+6      	; 0x1ca8 <j5>
	cbi 	M5
    1ca2:	14 98       	cbi	0x02, 4	; 2
	jmp		jj5
    1ca4:	0c 94 56 0e 	jmp	0x1cac	; 0x1cac <jj5>

00001ca8 <j5>:
j5:
	rjmp 	.+0
    1ca8:	00 c0       	rjmp	.+0      	; 0x1caa <j5+0x2>
	rjmp 	.+0
    1caa:	00 c0       	rjmp	.+0      	; 0x1cac <jj5>

00001cac <jj5>:
jj5:
	subi	r18,1
    1cac:	21 50       	subi	r18, 0x01	; 1
	brne	j6
    1cae:	19 f4       	brne	.+6      	; 0x1cb6 <j6>
	cbi 	M6
    1cb0:	15 98       	cbi	0x02, 5	; 2
	jmp		jj6
    1cb2:	0c 94 5d 0e 	jmp	0x1cba	; 0x1cba <jj6>

00001cb6 <j6>:
j6:
	rjmp 	.+0
    1cb6:	00 c0       	rjmp	.+0      	; 0x1cb8 <j6+0x2>
	rjmp	.+0
    1cb8:	00 c0       	rjmp	.+0      	; 0x1cba <jj6>

00001cba <jj6>:
jj6:
	subi	r17,1
    1cba:	11 50       	subi	r17, 0x01	; 1
	brne	j7
    1cbc:	19 f4       	brne	.+6      	; 0x1cc4 <j7>
	cbi 	M7
    1cbe:	45 98       	cbi	0x08, 5	; 8
	jmp		jj7
    1cc0:	0c 94 64 0e 	jmp	0x1cc8	; 0x1cc8 <jj7>

00001cc4 <j7>:
j7:
	rjmp 	.+0
    1cc4:	00 c0       	rjmp	.+0      	; 0x1cc6 <j7+0x2>
	rjmp 	.+0
    1cc6:	00 c0       	rjmp	.+0      	; 0x1cc8 <jj7>

00001cc8 <jj7>:
jj7:
	subi 	r16,1		// ServoOut 8
    1cc8:	01 50       	subi	r16, 0x01	; 1
	brne	j8
    1cca:	19 f4       	brne	.+6      	; 0x1cd2 <j8>
	cbi 	M8
    1ccc:	47 98       	cbi	0x08, 7	; 8
	jmp		jj8
    1cce:	0c 94 6b 0e 	jmp	0x1cd6	; 0x1cd6 <jj8>

00001cd2 <j8>:
j8:
	rjmp 	.+0
    1cd2:	00 c0       	rjmp	.+0      	; 0x1cd4 <j8+0x2>
	rjmp 	.+0
    1cd4:	00 c0       	rjmp	.+0      	; 0x1cd6 <jj8>

00001cd6 <jj8>:
jj8:
	call	pad_100_delay // (100)
    1cd6:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <pad_100_delay>

	subi 	YL,1		// 1
    1cda:	c1 50       	subi	r28, 0x01	; 1
	sbc 	YH,0		// 1
    1cdc:	d0 09       	sbc	r29, r0
	breq	skiploop	// 1	2		Loop until zero - 1 false 2 true
    1cde:	11 f0       	breq	.+4      	; 0x1ce4 <skiploop>
	jmp		nloop		// 3			Can't reach nloop with a brne alone
    1ce0:	0c 94 33 0e 	jmp	0x1c66	; 0x1c66 <nloop>

00001ce4 <skiploop>:

skiploop:
	pop		25			// 		2		Restore regs
    1ce4:	9f 91       	pop	r25
	pop		24			// 		2
    1ce6:	8f 91       	pop	r24
	pop		23			//		2
    1ce8:	7f 91       	pop	r23
	pop		22			//		2
    1cea:	6f 91       	pop	r22
	pop		21			//		2
    1cec:	5f 91       	pop	r21
	pop		20			//		2
    1cee:	4f 91       	pop	r20
	pop		19			//		2
    1cf0:	3f 91       	pop	r19
	pop		18			//		2
    1cf2:	2f 91       	pop	r18
	pop		17			//		2
    1cf4:	1f 91       	pop	r17
	pop		16			//		2
    1cf6:	0f 91       	pop	r16
	pop		YH			//		2
    1cf8:	df 91       	pop	r29
	pop		YL			//		2
    1cfa:	cf 91       	pop	r28
	pop		XH			//		2
    1cfc:	bf 91       	pop	r27
	pop		XL			//		2
    1cfe:	af 91       	pop	r26
	pop		ZH			// 		2
    1d00:	ff 91       	pop	r31
	pop		ZL			//		2
    1d02:	ef 91       	pop	r30

	ret					//		4
    1d04:	08 95       	ret

00001d06 <output_servo_ppm_asm3>:
;*************************************************************************

	.global output_servo_ppm_asm3
	.func   output_servo_ppm_asm3
output_servo_ppm_asm3:
	push	16			// Save regs
    1d06:	0f 93       	push	r16
	push	17
    1d08:	1f 93       	push	r17
	push	18
    1d0a:	2f 93       	push	r18

	//ldi 	16,0x34		// 1			Set loop count to 834h or 2100
	ldi 	16,0xFC		// 1			Set loop count to 8FCh or 2300(us)
    1d0c:	0c ef       	ldi	r16, 0xFC	; 252
	ldi		17,0x08	
    1d0e:	18 e0       	ldi	r17, 0x08	; 8
	clr		0
    1d10:	00 24       	eor	r0, r0

00001d12 <jump_table>:

jump_table:
	cpi		r24,0x00	; 0				
    1d12:	80 30       	cpi	r24, 0x00	; 0
	breq	in1
    1d14:	71 f0       	breq	.+28     	; 0x1d32 <in1>
	cpi		r24,0x01	; 1
    1d16:	81 30       	cpi	r24, 0x01	; 1
	breq	in2
    1d18:	79 f0       	breq	.+30     	; 0x1d38 <in2>
	cpi		r24,0x02	; 2
    1d1a:	82 30       	cpi	r24, 0x02	; 2
	breq	in3
    1d1c:	81 f0       	breq	.+32     	; 0x1d3e <in3>
	cpi		r24,0x03	; 3
    1d1e:	83 30       	cpi	r24, 0x03	; 3
	breq	in4
    1d20:	89 f0       	breq	.+34     	; 0x1d44 <in4>
	cpi		r24,0x04	; 4
    1d22:	84 30       	cpi	r24, 0x04	; 4
	breq	in5
    1d24:	91 f0       	breq	.+36     	; 0x1d4a <in5>
	cpi		r24,0x05	; 5
    1d26:	85 30       	cpi	r24, 0x05	; 5
	breq	in6
    1d28:	99 f0       	breq	.+38     	; 0x1d50 <in6>
	cpi		r24,0x06	; 6
    1d2a:	86 30       	cpi	r24, 0x06	; 6
	breq	in7
    1d2c:	a1 f0       	breq	.+40     	; 0x1d56 <in7>
	cpi		r24,0x07	; 7
    1d2e:	87 30       	cpi	r24, 0x07	; 7
	breq	in8
    1d30:	a9 f0       	breq	.+42     	; 0x1d5c <in8>

00001d32 <in1>:

in1:sbi 	M1			// Set output high
    1d32:	46 9a       	sbi	0x08, 6	; 8
	jmp		loopin
    1d34:	0c 94 b1 0e 	jmp	0x1d62	; 0x1d62 <loopin>

00001d38 <in2>:
in2:sbi 	M2
    1d38:	44 9a       	sbi	0x08, 4	; 8
	jmp		loopin
    1d3a:	0c 94 b1 0e 	jmp	0x1d62	; 0x1d62 <loopin>

00001d3e <in3>:
in3:sbi 	M3	
    1d3e:	42 9a       	sbi	0x08, 2	; 8
	jmp		loopin
    1d40:	0c 94 b1 0e 	jmp	0x1d62	; 0x1d62 <loopin>

00001d44 <in4>:
in4:sbi 	M4
    1d44:	43 9a       	sbi	0x08, 3	; 8
	jmp		loopin
    1d46:	0c 94 b1 0e 	jmp	0x1d62	; 0x1d62 <loopin>

00001d4a <in5>:
in5:sbi 	M5
    1d4a:	14 9a       	sbi	0x02, 4	; 2
	jmp		loopin
    1d4c:	0c 94 b1 0e 	jmp	0x1d62	; 0x1d62 <loopin>

00001d50 <in6>:
in6:sbi 	M6
    1d50:	15 9a       	sbi	0x02, 5	; 2
	jmp		loopin
    1d52:	0c 94 b1 0e 	jmp	0x1d62	; 0x1d62 <loopin>

00001d56 <in7>:
in7:sbi 	M7
    1d56:	45 9a       	sbi	0x08, 5	; 8
	jmp		loopin
    1d58:	0c 94 b1 0e 	jmp	0x1d62	; 0x1d62 <loopin>

00001d5c <in8>:
in8:sbi 	M8
    1d5c:	47 9a       	sbi	0x08, 7	; 8
	jmp		loopin
    1d5e:	0c 94 b1 0e 	jmp	0x1d62	; 0x1d62 <loopin>

00001d62 <loopin>:

// Loop - 20 cycles = 1us
loopin:
						// <---------	Left column is skip execution path
	rjmp .+0			// 2 	<----	Right column is pulse end execution path
    1d62:	00 c0       	rjmp	.+0      	; 0x1d64 <loopin+0x2>
	rjmp .+0			// 2
    1d64:	00 c0       	rjmp	.+0      	; 0x1d66 <loopin+0x4>
	rjmp .+0			// 2
    1d66:	00 c0       	rjmp	.+0      	; 0x1d68 <loopin+0x6>
	rjmp .+0			// 2
    1d68:	00 c0       	rjmp	.+0      	; 0x1d6a <loopin+0x8>
	rjmp .+0			// 2
    1d6a:	00 c0       	rjmp	.+0      	; 0x1d6c <loopin+0xa>
	rjmp .+0			// 2
    1d6c:	00 c0       	rjmp	.+0      	; 0x1d6e <loopin+0xc>

	subi	r22,1		// 1 			Time servo pulse
    1d6e:	61 50       	subi	r22, 0x01	; 1
	sbc 	r23,0		// 1
    1d70:	70 09       	sbc	r23, r0
	brne	loopout		// 2	1
    1d72:	19 f4       	brne	.+6      	; 0x1d7a <loopout>

// Clear outputs if done
	ldi		r18,0x00	 // 1
    1d74:	20 e0       	ldi	r18, 0x00	; 0
	out 	SERVO_OUT_KK20,r18// 1			Boom.
    1d76:	28 b9       	out	0x08, r18	; 8
	out 	SERVO_OUT_KK21,r18// 1			KK2.1 has a couple of outputs on Port A also.
    1d78:	22 b9       	out	0x02, r18	; 2

00001d7a <loopout>:

// Exit
loopout:
	subi 	16,1		// 1			+4 cycles = total 20 cycles
    1d7a:	01 50       	subi	r16, 0x01	; 1
	sbc 	17,0		// 1
    1d7c:	10 09       	sbc	r17, r0
	brne	loopin		// 2	1		Loop until zero
    1d7e:	89 f7       	brne	.-30     	; 0x1d62 <loopin>

	pop		18
    1d80:	2f 91       	pop	r18
	pop		17			// Restore regs
    1d82:	1f 91       	pop	r17
	pop		16
    1d84:	0f 91       	pop	r16
	ret	
    1d86:	08 95       	ret

00001d88 <pwm_delay>:
;*************************************************************************	
; void pwm_delay(void) 50us output spacing delay (8 cycle loop - 400ns)
;*************************************************************************

pwm_delay:				// 4 to call
	push	16			// 1
    1d88:	0f 93       	push	r16
	ldi 	16,0x65		// 1
    1d8a:	05 e6       	ldi	r16, 0x65	; 101

00001d8c <pwm_loop>:

pwm_loop:
	rjmp .+0			// 2
    1d8c:	00 c0       	rjmp	.+0      	; 0x1d8e <pwm_loop+0x2>
	rjmp .+0			// 2
    1d8e:	00 c0       	rjmp	.+0      	; 0x1d90 <pwm_loop+0x4>
	rjmp .+0			// 2
    1d90:	00 c0       	rjmp	.+0      	; 0x1d92 <pwm_loop+0x6>
	subi	r16,1		// 1
    1d92:	01 50       	subi	r16, 0x01	; 1
	brne	pwm_loop	// 2  1
    1d94:	d9 f7       	brne	.-10     	; 0x1d8c <pwm_loop>

00001d96 <pwm_exit>:

pwm_exit:
	pop		16			//    1
    1d96:	0f 91       	pop	r16
	ret					//    4 to return
    1d98:	08 95       	ret

00001d9a <pad_100_delay>:
; pad_100_delay 98 cycle padding delay
; Takes 4 to call, so we need 94 cycles burnt here
;*************************************************************************

pad_100_delay:
	push	16			// 		2		Save regs
    1d9a:	0f 93       	push	r16
	ldi 	16,0x09		// 		1		Set loop count to 09h or 9
    1d9c:	09 e0       	ldi	r16, 0x09	; 9

00001d9e <pad_100>:

pad_100:				//				9 cycles, 8 on last
	rjmp .+0			// 2
    1d9e:	00 c0       	rjmp	.+0      	; 0x1da0 <pad_100+0x2>
	rjmp .+0			// 2			8 x 9cyc + 8 = 80
    1da0:	00 c0       	rjmp	.+0      	; 0x1da2 <pad_100+0x4>
	rjmp .+0			// 2
    1da2:	00 c0       	rjmp	.+0      	; 0x1da4 <pad_100+0x6>

	subi 	16,1		// 1
    1da4:	01 50       	subi	r16, 0x01	; 1
	brne	pad_100		// 2	1		Loop until zero	
    1da6:	d9 f7       	brne	.-10     	; 0x1d9e <pad_100>

	nop					// 		1		Trim to precisely the right value
    1da8:	00 00       	nop
	rjmp .+0			// 		2
    1daa:	00 c0       	rjmp	.+0      	; 0x1dac <pad_100+0xe>
	rjmp .+0			// 		2
    1dac:	00 c0       	rjmp	.+0      	; 0x1dae <pad_100+0x10>

	pop		16			// 		2		Restore regs
    1dae:	0f 91       	pop	r16
	ret					// 		4 (94 cycles)
    1db0:	08 95       	ret

00001db2 <us_delay>:
; void us_delay(void) 1us delay for ninja skills
; Takes 4 to call, 4 to return, so we need 12 cycles burnt here
;*************************************************************************

us_delay:
	rjmp .+0			// 2
    1db2:	00 c0       	rjmp	.+0      	; 0x1db4 <us_delay+0x2>
	rjmp .+0			// 2
    1db4:	00 c0       	rjmp	.+0      	; 0x1db6 <us_delay+0x4>
	rjmp .+0			// 2
    1db6:	00 c0       	rjmp	.+0      	; 0x1db8 <us_delay+0x6>
	rjmp .+0			// 2
    1db8:	00 c0       	rjmp	.+0      	; 0x1dba <us_delay+0x8>
	ret					// 4 (16 cycles)
    1dba:	08 95       	ret

00001dbc <shuffle_8>:
;*************************************************************************	
; Space-saving macro-ish suroutines
;*************************************************************************

shuffle_8: // (10 cycles)
	lsr		XH			// 1 Rotate right into carry
    1dbc:	b6 95       	lsr	r27
	ror		XL			// 1 Rotate right with carry from MSB
    1dbe:	a7 95       	ror	r26
	lsr		XH			// 1
    1dc0:	b6 95       	lsr	r27
	ror		XL			// 1
    1dc2:	a7 95       	ror	r26
	lsr		XH			// 1
    1dc4:	b6 95       	lsr	r27
	ror		XL			// 1
    1dc6:	a7 95       	ror	r26
	ret					// 4
    1dc8:	08 95       	ret

00001dca <DelayHigh>:
; 10 and 150 cycles at 1us intervals per value in r26
; 
;*************************************************************************

DelayHigh:				// (0)	(1)	(2+) each extra is +20
	ldi		YL,0x07		// 1	1	1
    1dca:	c7 e0       	ldi	r28, 0x07	; 7
	andi	r25,0x07	
    1dcc:	97 70       	andi	r25, 0x07	; 7
	eor		YL,r25		// 1 	1	1
    1dce:	c9 27       	eor	r28, r25
	breq	LoopHighOut1// 2	1	1
    1dd0:	31 f0       	breq	.+12     	; 0x1dde <LoopHighOut1>

00001dd2 <LoopHigh>:
LoopHigh:
	call    us_delay	// 		16	16
    1dd2:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <us_delay>
	dec 	YL			// 		1	1
    1dd6:	ca 95       	dec	r28
	breq	LoopHighOut2// 		2	1/2
    1dd8:	09 f0       	breq	.+2      	; 0x1ddc <LoopHighOut2>
	rjmp	LoopHigh	// 			2
    1dda:	fb cf       	rjmp	.-10     	; 0x1dd2 <LoopHigh>

00001ddc <LoopHighOut2>:
LoopHighOut2:
	rjmp .+0			// 		2	2
    1ddc:	00 c0       	rjmp	.+0      	; 0x1dde <LoopHighOut1>

00001dde <LoopHighOut1>:
LoopHighOut1:
	nop					// 1	1	1
    1dde:	00 00       	nop
    ret					// 4	4	4
    1de0:	08 95       	ret

00001de2 <DelayLow>:
; regardless of the value of r25
;
;*************************************************************************

DelayLow:				// (0)	(1)	(2+) each extra is +20
	mov		YL,r25		// 1	1	
    1de2:	c9 2f       	mov	r28, r25
	andi	YL,0x07	
    1de4:	c7 70       	andi	r28, 0x07	; 7
	breq	LoopLowOut1	// 2	1	1
    1de6:	31 f0       	breq	.+12     	; 0x1df4 <LoopLowOut1>

00001de8 <LoopLow>:
LoopLow:
	call    us_delay	//		16	16
    1de8:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <us_delay>
	dec 	YL			//		1	1
    1dec:	ca 95       	dec	r28
	breq	LoopLowOut2	//		2	1/2
    1dee:	09 f0       	breq	.+2      	; 0x1df2 <LoopLowOut2>
	rjmp	LoopLow		//			2
    1df0:	fb cf       	rjmp	.-10     	; 0x1de8 <LoopLow>

00001df2 <LoopLowOut2>:
LoopLowOut2:
	rjmp .+0			// 		2	2
    1df2:	00 c0       	rjmp	.+0      	; 0x1df4 <LoopLowOut1>

00001df4 <LoopLowOut1>:
LoopLowOut1:
    ret					// 4	4	4
    1df4:	08 95       	ret

00001df6 <get_raw_accs>:
//***************************************************************
// Fill accADC with RPY data appropriate to the board orientation
//***************************************************************

void get_raw_accs(void)
{
    1df6:	ac e0       	ldi	r26, 0x0C	; 12
    1df8:	b0 e0       	ldi	r27, 0x00	; 0
    1dfa:	e1 e0       	ldi	r30, 0x01	; 1
    1dfc:	ff e0       	ldi	r31, 0x0F	; 15
    1dfe:	0c 94 d4 41 	jmp	0x83a8	; 0x83a8 <__prologue_saves__+0x20>
	// Get data from MPU6050
	uint8_t Accs[6];
	int16_t temp1, temp2;

	// Get the i2c data from the MPU6050
	readI2CbyteArray(MPU60X0_DEFAULT_ADDRESS,MPU60X0_RA_ACCEL_XOUT_H,(uint8_t *)Accs,6);
    1e02:	26 e0       	ldi	r18, 0x06	; 6
    1e04:	ae 01       	movw	r20, r28
    1e06:	4f 5f       	subi	r20, 0xFF	; 255
    1e08:	5f 4f       	sbci	r21, 0xFF	; 255
    1e0a:	6b e3       	ldi	r22, 0x3B	; 59
    1e0c:	80 ed       	ldi	r24, 0xD0	; 208
    1e0e:	0e 94 d8 1f 	call	0x3fb0	; 0x3fb0 <readI2CbyteArray>

	// Reassemble data into accADC array and down sample to reduce resolution and noise
	// This notation is true to the chip, but not the board orientation

	temp1 = Accs[0] << 8;					// Accel X
    1e12:	89 81       	ldd	r24, Y+1	; 0x01
    1e14:	90 e0       	ldi	r25, 0x00	; 0
    1e16:	98 2f       	mov	r25, r24
    1e18:	88 27       	eor	r24, r24
	temp2 = Accs[1];
    1e1a:	2a 81       	ldd	r18, Y+2	; 0x02
	RawADC[ROLL] = (temp1 + temp2) >> 6;
    1e1c:	82 0f       	add	r24, r18
    1e1e:	91 1d       	adc	r25, r1
    1e20:	36 e0       	ldi	r19, 0x06	; 6
    1e22:	95 95       	asr	r25
    1e24:	87 95       	ror	r24
    1e26:	3a 95       	dec	r19
    1e28:	e1 f7       	brne	.-8      	; 0x1e22 <get_raw_accs+0x2c>
    1e2a:	98 87       	std	Y+8, r25	; 0x08
    1e2c:	8f 83       	std	Y+7, r24	; 0x07

	temp1 = Accs[2] << 8;					// Accel Y
    1e2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e30:	90 e0       	ldi	r25, 0x00	; 0
    1e32:	98 2f       	mov	r25, r24
    1e34:	88 27       	eor	r24, r24
	temp2 = Accs[3];
    1e36:	2c 81       	ldd	r18, Y+4	; 0x04
	RawADC[PITCH] = -((temp1 + temp2) >> 6);
    1e38:	82 0f       	add	r24, r18
    1e3a:	91 1d       	adc	r25, r1
    1e3c:	56 e0       	ldi	r21, 0x06	; 6
    1e3e:	95 95       	asr	r25
    1e40:	87 95       	ror	r24
    1e42:	5a 95       	dec	r21
    1e44:	e1 f7       	brne	.-8      	; 0x1e3e <get_raw_accs+0x48>
    1e46:	91 95       	neg	r25
    1e48:	81 95       	neg	r24
    1e4a:	91 09       	sbc	r25, r1
    1e4c:	9a 87       	std	Y+10, r25	; 0x0a
    1e4e:	89 87       	std	Y+9, r24	; 0x09

	temp1 = Accs[4] << 8;					// Accel Z
    1e50:	8d 81       	ldd	r24, Y+5	; 0x05
    1e52:	90 e0       	ldi	r25, 0x00	; 0
    1e54:	98 2f       	mov	r25, r24
    1e56:	88 27       	eor	r24, r24
	temp2 = Accs[5];
    1e58:	2e 81       	ldd	r18, Y+6	; 0x06
	RawADC[YAW] = (temp1 + temp2) >> 6;
    1e5a:	82 0f       	add	r24, r18
    1e5c:	91 1d       	adc	r25, r1
    1e5e:	76 e0       	ldi	r23, 0x06	; 6
    1e60:	95 95       	asr	r25
    1e62:	87 95       	ror	r24
    1e64:	7a 95       	dec	r23
    1e66:	e1 f7       	brne	.-8      	; 0x1e60 <get_raw_accs+0x6a>
    1e68:	9c 87       	std	Y+12, r25	; 0x0c
    1e6a:	8b 87       	std	Y+11, r24	; 0x0b

	// Reorient the data as per the board orientation	
	for (i=0; i<NUMBEROFAXIS; i++)
	{
		// Rearrange the sensors
		accADC[i] = RawADC[(int8_t)pgm_read_byte(&ACC_RPY_Order[Config.Orientation][i])];
    1e6c:	20 91 31 06 	lds	r18, 0x0631
    1e70:	a2 e3       	ldi	r26, 0x32	; 50
    1e72:	b5 e0       	ldi	r27, 0x05	; 5
    1e74:	43 e0       	ldi	r20, 0x03	; 3
    1e76:	24 02       	muls	r18, r20
    1e78:	90 01       	movw	r18, r0
    1e7a:	11 24       	eor	r1, r1
    1e7c:	80 e0       	ldi	r24, 0x00	; 0
    1e7e:	90 e0       	ldi	r25, 0x00	; 0
    1e80:	2c 54       	subi	r18, 0x4C	; 76
    1e82:	3f 4f       	sbci	r19, 0xFF	; 255
    1e84:	f9 01       	movw	r30, r18
    1e86:	e8 0f       	add	r30, r24
    1e88:	f9 1f       	adc	r31, r25
    1e8a:	e4 91       	lpm	r30, Z
    1e8c:	ee 0f       	add	r30, r30
    1e8e:	ff 0b       	sbc	r31, r31
    1e90:	41 e0       	ldi	r20, 0x01	; 1
    1e92:	50 e0       	ldi	r21, 0x00	; 0
    1e94:	4c 0f       	add	r20, r28
    1e96:	5d 1f       	adc	r21, r29
    1e98:	e4 0f       	add	r30, r20
    1e9a:	f5 1f       	adc	r31, r21
    1e9c:	46 81       	ldd	r20, Z+6	; 0x06
    1e9e:	57 81       	ldd	r21, Z+7	; 0x07
    1ea0:	4d 93       	st	X+, r20
    1ea2:	5d 93       	st	X+, r21
    1ea4:	01 96       	adiw	r24, 0x01	; 1
	temp1 = Accs[4] << 8;					// Accel Z
	temp2 = Accs[5];
	RawADC[YAW] = (temp1 + temp2) >> 6;

	// Reorient the data as per the board orientation	
	for (i=0; i<NUMBEROFAXIS; i++)
    1ea6:	83 30       	cpi	r24, 0x03	; 3
    1ea8:	91 05       	cpc	r25, r1
    1eaa:	61 f7       	brne	.-40     	; 0x1e84 <get_raw_accs+0x8e>
	{
		// Rearrange the sensors
		accADC[i] = RawADC[(int8_t)pgm_read_byte(&ACC_RPY_Order[Config.Orientation][i])];
	}
}
    1eac:	2c 96       	adiw	r28, 0x0c	; 12
    1eae:	e2 e0       	ldi	r30, 0x02	; 2
    1eb0:	0c 94 f0 41 	jmp	0x83e0	; 0x83e0 <__epilogue_restores__+0x20>

00001eb4 <ReadAcc>:

int16_t accADC[NUMBEROFAXIS];	// Holds Acc ADC values - always in RPY order
int16_t accVert = 0;			// Holds the level-zeroed Z-acc value. Used for height damping in hover only.

void ReadAcc()
{
    1eb4:	1f 93       	push	r17
    1eb6:	cf 93       	push	r28
    1eb8:	df 93       	push	r29
	uint8_t i;

	get_raw_accs();				// Updates accADC[] (RPY)
    1eba:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <get_raw_accs>

	// Use default Config.AccZero for Acc-Z if inverse calibration not done yet
	// Actual zero is held in Config.AccZeroNormZ waiting for inv calibration
	if (!(Config.Main_flags & (1 << inv_cal_done)))
    1ebe:	80 91 b0 07 	lds	r24, 0x07B0
    1ec2:	80 fd       	sbrc	r24, 0
    1ec4:	05 c0       	rjmp	.+10     	; 0x1ed0 <ReadAcc+0x1c>
	{
		Config.AccZero[YAW] = 0;
    1ec6:	10 92 98 07 	sts	0x0798, r1
    1eca:	10 92 97 07 	sts	0x0797, r1
    1ece:	0e c0       	rjmp	.+28     	; 0x1eec <ReadAcc+0x38>

	// If inverted cal done, Config.AccZeroNormZ and Config.AccZeroDiff have
	// valid values
	else
	{
		Config.AccZero[YAW] = Config.AccZeroNormZ - Config.AccZeroDiff;
    1ed0:	80 91 99 07 	lds	r24, 0x0799
    1ed4:	90 91 9a 07 	lds	r25, 0x079A
    1ed8:	20 91 9d 07 	lds	r18, 0x079D
    1edc:	30 91 9e 07 	lds	r19, 0x079E
    1ee0:	82 1b       	sub	r24, r18
    1ee2:	93 0b       	sbc	r25, r19
    1ee4:	90 93 98 07 	sts	0x0798, r25
    1ee8:	80 93 97 07 	sts	0x0797, r24
	{
		// Remove offsets from acc outputs
		accADC[i] -= Config.AccZero[i];

		// Change polarity
		accADC[i] *= (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation][i]);
    1eec:	20 91 31 06 	lds	r18, 0x0631
    1ef0:	c3 e9       	ldi	r28, 0x93	; 147
    1ef2:	d7 e0       	ldi	r29, 0x07	; 7
    1ef4:	a2 e3       	ldi	r26, 0x32	; 50
    1ef6:	b5 e0       	ldi	r27, 0x05	; 5
    1ef8:	83 e0       	ldi	r24, 0x03	; 3
    1efa:	28 02       	muls	r18, r24
    1efc:	90 01       	movw	r18, r0
    1efe:	11 24       	eor	r1, r1
    1f00:	80 e0       	ldi	r24, 0x00	; 0
    1f02:	90 e0       	ldi	r25, 0x00	; 0
    1f04:	2e 55       	subi	r18, 0x5E	; 94
    1f06:	3f 4f       	sbci	r19, 0xFF	; 255
	}

	for (i=0; i<NUMBEROFAXIS; i++)
	{
		// Remove offsets from acc outputs
		accADC[i] -= Config.AccZero[i];
    1f08:	69 91       	ld	r22, Y+
    1f0a:	79 91       	ld	r23, Y+
    1f0c:	f9 01       	movw	r30, r18
    1f0e:	e8 0f       	add	r30, r24
    1f10:	f9 1f       	adc	r31, r25

		// Change polarity
		accADC[i] *= (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation][i]);
    1f12:	14 91       	lpm	r17, Z
	}

	for (i=0; i<NUMBEROFAXIS; i++)
	{
		// Remove offsets from acc outputs
		accADC[i] -= Config.AccZero[i];
    1f14:	4d 91       	ld	r20, X+
    1f16:	5c 91       	ld	r21, X
    1f18:	11 97       	sbiw	r26, 0x01	; 1
    1f1a:	46 1b       	sub	r20, r22
    1f1c:	57 0b       	sbc	r21, r23

		// Change polarity
		accADC[i] *= (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation][i]);
    1f1e:	14 03       	mulsu	r17, r20
    1f20:	b0 01       	movw	r22, r0
    1f22:	15 9f       	mul	r17, r21
    1f24:	70 0d       	add	r23, r0
    1f26:	11 24       	eor	r1, r1
    1f28:	6d 93       	st	X+, r22
    1f2a:	7d 93       	st	X+, r23
    1f2c:	01 96       	adiw	r24, 0x01	; 1
	else
	{
		Config.AccZero[YAW] = Config.AccZeroNormZ - Config.AccZeroDiff;
	}

	for (i=0; i<NUMBEROFAXIS; i++)
    1f2e:	83 30       	cpi	r24, 0x03	; 3
    1f30:	91 05       	cpc	r25, r1
    1f32:	51 f7       	brne	.-44     	; 0x1f08 <ReadAcc+0x54>
	}

	// Recalculate current accVert using filtered acc value
	// Note that AccSmooth[YAW] is already zeroed around 1G so we have to re-add 
	// the zero back here so that Config.AccZeroNormZ subtracts the correct amount
	 accVert = accSmooth[YAW] + (Config.AccZeroNormZ - Config.AccZero[YAW]);
    1f34:	60 91 99 07 	lds	r22, 0x0799
    1f38:	70 91 9a 07 	lds	r23, 0x079A
    1f3c:	80 91 97 07 	lds	r24, 0x0797
    1f40:	90 91 98 07 	lds	r25, 0x0798
    1f44:	68 1b       	sub	r22, r24
    1f46:	79 0b       	sbc	r23, r25
    1f48:	88 27       	eor	r24, r24
    1f4a:	77 fd       	sbrc	r23, 7
    1f4c:	80 95       	com	r24
    1f4e:	98 2f       	mov	r25, r24
    1f50:	0e 94 0d 40 	call	0x801a	; 0x801a <__floatsisf>
    1f54:	20 91 99 05 	lds	r18, 0x0599
    1f58:	30 91 9a 05 	lds	r19, 0x059A
    1f5c:	40 91 9b 05 	lds	r20, 0x059B
    1f60:	50 91 9c 05 	lds	r21, 0x059C
    1f64:	0e 94 0a 3f 	call	0x7e14	; 0x7e14 <__addsf3>
    1f68:	0e 94 da 3f 	call	0x7fb4	; 0x7fb4 <__fixsfsi>
    1f6c:	70 93 0d 05 	sts	0x050D, r23
    1f70:	60 93 0c 05 	sts	0x050C, r22
}
    1f74:	df 91       	pop	r29
    1f76:	cf 91       	pop	r28
    1f78:	1f 91       	pop	r17
    1f7a:	08 95       	ret

00001f7c <CalibrateAcc>:
//***************************************************************
// Calibration routines
//***************************************************************

void CalibrateAcc(int8_t type)
{
    1f7c:	a6 e0       	ldi	r26, 0x06	; 6
    1f7e:	b0 e0       	ldi	r27, 0x00	; 0
    1f80:	e4 ec       	ldi	r30, 0xC4	; 196
    1f82:	ff e0       	ldi	r31, 0x0F	; 15
    1f84:	0c 94 d3 41 	jmp	0x83a6	; 0x83a6 <__prologue_saves__+0x1e>
	uint8_t i;
	int16_t accZero[NUMBEROFAXIS] = {0,0,0};	// Used for calibrating Accs on ground
    1f88:	1a 82       	std	Y+2, r1	; 0x02
    1f8a:	19 82       	std	Y+1, r1	; 0x01
    1f8c:	1c 82       	std	Y+4, r1	; 0x04
    1f8e:	1b 82       	std	Y+3, r1	; 0x03
    1f90:	1e 82       	std	Y+6, r1	; 0x06
    1f92:	1d 82       	std	Y+5, r1	; 0x05

	// Calibrate acc
	if (type == NORMAL)
    1f94:	81 11       	cpse	r24, r1
    1f96:	6f c0       	rjmp	.+222    	; 0x2076 <CalibrateAcc+0xfa>
    1f98:	10 e2       	ldi	r17, 0x20	; 32
	{
		// Get average zero value (over 32 readings)
		for (i = 0; i < 32; i++)
		{
			get_raw_accs();						// Updates accADC[] with signals reoriented into (RPY)
    1f9a:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <get_raw_accs>

			accZero[ROLL] += accADC[ROLL];
    1f9e:	89 81       	ldd	r24, Y+1	; 0x01
    1fa0:	9a 81       	ldd	r25, Y+2	; 0x02
    1fa2:	20 91 32 05 	lds	r18, 0x0532
    1fa6:	30 91 33 05 	lds	r19, 0x0533
    1faa:	82 0f       	add	r24, r18
    1fac:	93 1f       	adc	r25, r19
    1fae:	9a 83       	std	Y+2, r25	; 0x02
    1fb0:	89 83       	std	Y+1, r24	; 0x01
			accZero[PITCH] += accADC[PITCH];						
    1fb2:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb4:	9c 81       	ldd	r25, Y+4	; 0x04
    1fb6:	20 91 34 05 	lds	r18, 0x0534
    1fba:	30 91 35 05 	lds	r19, 0x0535
    1fbe:	82 0f       	add	r24, r18
    1fc0:	93 1f       	adc	r25, r19
    1fc2:	9c 83       	std	Y+4, r25	; 0x04
    1fc4:	8b 83       	std	Y+3, r24	; 0x03
			accZero[YAW] += accADC[YAW];		
    1fc6:	8d 81       	ldd	r24, Y+5	; 0x05
    1fc8:	9e 81       	ldd	r25, Y+6	; 0x06
    1fca:	20 91 36 05 	lds	r18, 0x0536
    1fce:	30 91 37 05 	lds	r19, 0x0537
    1fd2:	82 0f       	add	r24, r18
    1fd4:	93 1f       	adc	r25, r19
    1fd6:	9e 83       	std	Y+6, r25	; 0x06
    1fd8:	8d 83       	std	Y+5, r24	; 0x05
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1fda:	8f e4       	ldi	r24, 0x4F	; 79
    1fdc:	93 ec       	ldi	r25, 0xC3	; 195
    1fde:	01 97       	sbiw	r24, 0x01	; 1
    1fe0:	f1 f7       	brne	.-4      	; 0x1fde <CalibrateAcc+0x62>
    1fe2:	00 c0       	rjmp	.+0      	; 0x1fe4 <CalibrateAcc+0x68>
    1fe4:	00 00       	nop
    1fe6:	11 50       	subi	r17, 0x01	; 1

	// Calibrate acc
	if (type == NORMAL)
	{
		// Get average zero value (over 32 readings)
		for (i = 0; i < 32; i++)
    1fe8:	c1 f6       	brne	.-80     	; 0x1f9a <CalibrateAcc+0x1e>
    1fea:	fe 01       	movw	r30, r28
    1fec:	31 96       	adiw	r30, 0x01	; 1
    1fee:	9e 01       	movw	r18, r28
    1ff0:	29 5f       	subi	r18, 0xF9	; 249
    1ff2:	3f 4f       	sbci	r19, 0xFF	; 255
		}

		for (i = 0; i < NUMBEROFAXIS; i++)		// For selected axis in RPY order
		{
			// Round and divide by 32
			accZero[i] = ((accZero[i] + 16) >> 5);
    1ff4:	80 81       	ld	r24, Z
    1ff6:	91 81       	ldd	r25, Z+1	; 0x01
    1ff8:	40 96       	adiw	r24, 0x10	; 16
    1ffa:	45 e0       	ldi	r20, 0x05	; 5
    1ffc:	95 95       	asr	r25
    1ffe:	87 95       	ror	r24
    2000:	4a 95       	dec	r20
    2002:	e1 f7       	brne	.-8      	; 0x1ffc <CalibrateAcc+0x80>
    2004:	81 93       	st	Z+, r24
    2006:	91 93       	st	Z+, r25
			accZero[YAW] += accADC[YAW];		

			_delay_ms(10);						// Get a better acc average over time
		}

		for (i = 0; i < NUMBEROFAXIS; i++)		// For selected axis in RPY order
    2008:	e2 17       	cp	r30, r18
    200a:	f3 07       	cpc	r31, r19
    200c:	99 f7       	brne	.-26     	; 0x1ff4 <CalibrateAcc+0x78>
			// Round and divide by 32
			accZero[i] = ((accZero[i] + 16) >> 5);
		}

		// Reset zeros to normal cal
		Config.AccZero[ROLL] = accZero[ROLL]; 
    200e:	89 81       	ldd	r24, Y+1	; 0x01
    2010:	9a 81       	ldd	r25, Y+2	; 0x02
    2012:	90 93 94 07 	sts	0x0794, r25
    2016:	80 93 93 07 	sts	0x0793, r24
		Config.AccZero[PITCH] = accZero[PITCH]; 
    201a:	8b 81       	ldd	r24, Y+3	; 0x03
    201c:	9c 81       	ldd	r25, Y+4	; 0x04
    201e:	90 93 96 07 	sts	0x0796, r25
    2022:	80 93 95 07 	sts	0x0795, r24
		Config.AccZeroNormZ = accZero[YAW]; 
			
		// Correct polarity of AccZeroNormZ as per orientation
		Config.AccZeroNormZ *= (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation][YAW]);
    2026:	80 91 31 06 	lds	r24, 0x0631
    202a:	99 27       	eor	r25, r25
    202c:	87 fd       	sbrc	r24, 7
    202e:	90 95       	com	r25
    2030:	fc 01       	movw	r30, r24
    2032:	ee 0f       	add	r30, r30
    2034:	ff 1f       	adc	r31, r31
    2036:	e8 0f       	add	r30, r24
    2038:	f9 1f       	adc	r31, r25
    203a:	ec 55       	subi	r30, 0x5C	; 92
    203c:	ff 4f       	sbci	r31, 0xFF	; 255
    203e:	44 91       	lpm	r20, Z
    2040:	2d 81       	ldd	r18, Y+5	; 0x05
    2042:	3e 81       	ldd	r19, Y+6	; 0x06
    2044:	42 03       	mulsu	r20, r18
    2046:	c0 01       	movw	r24, r0
    2048:	43 9f       	mul	r20, r19
    204a:	90 0d       	add	r25, r0
    204c:	11 24       	eor	r1, r1
    204e:	90 93 9a 07 	sts	0x079A, r25
    2052:	80 93 99 07 	sts	0x0799, r24
			
		// Flag that normal cal done
		Config.Main_flags |= (1 << normal_cal_done);
    2056:	80 91 b0 07 	lds	r24, 0x07B0
    205a:	82 60       	ori	r24, 0x02	; 2
    205c:	80 93 b0 07 	sts	0x07B0, r24
	
		// Save new calibration and flash LED for confirmation
		Save_Config_to_EEPROM();
    2060:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <Save_Config_to_EEPROM>
		LED1 = 1;
    2064:	2b 9a       	sbi	0x05, 3	; 5
    2066:	9f e7       	ldi	r25, 0x7F	; 127
    2068:	24 e8       	ldi	r18, 0x84	; 132
    206a:	4e e1       	ldi	r20, 0x1E	; 30
    206c:	91 50       	subi	r25, 0x01	; 1
    206e:	20 40       	sbci	r18, 0x00	; 0
    2070:	40 40       	sbci	r20, 0x00	; 0
    2072:	e1 f7       	brne	.-8      	; 0x206c <CalibrateAcc+0xf0>
    2074:	67 c0       	rjmp	.+206    	; 0x2144 <CalibrateAcc+0x1c8>

	else
	// Calibrate inverted acc
	{
		// Only update the inverted cal value if preceded by a normal calibration
		if (Config.Main_flags & (1 << normal_cal_done))
    2076:	80 91 b0 07 	lds	r24, 0x07B0
    207a:	81 ff       	sbrs	r24, 1
    207c:	66 c0       	rjmp	.+204    	; 0x214a <CalibrateAcc+0x1ce>
		{
			// Get average zero value (over 32 readings)
			Config.AccZeroInvZ = 0;
    207e:	10 92 9c 07 	sts	0x079C, r1
    2082:	10 92 9b 07 	sts	0x079B, r1
    2086:	10 e2       	ldi	r17, 0x20	; 32

			for (i = 0; i < 32; i++)
			{
				get_raw_accs();					// Updates gyroADC[] with reoriented vales
    2088:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <get_raw_accs>
				Config.AccZeroInvZ += accADC[YAW];		
    208c:	80 91 9b 07 	lds	r24, 0x079B
    2090:	90 91 9c 07 	lds	r25, 0x079C
    2094:	20 91 36 05 	lds	r18, 0x0536
    2098:	30 91 37 05 	lds	r19, 0x0537
    209c:	82 0f       	add	r24, r18
    209e:	93 1f       	adc	r25, r19
    20a0:	90 93 9c 07 	sts	0x079C, r25
    20a4:	80 93 9b 07 	sts	0x079B, r24
    20a8:	8f e4       	ldi	r24, 0x4F	; 79
    20aa:	93 ec       	ldi	r25, 0xC3	; 195
    20ac:	01 97       	sbiw	r24, 0x01	; 1
    20ae:	f1 f7       	brne	.-4      	; 0x20ac <CalibrateAcc+0x130>
    20b0:	00 c0       	rjmp	.+0      	; 0x20b2 <CalibrateAcc+0x136>
    20b2:	00 00       	nop
    20b4:	11 50       	subi	r17, 0x01	; 1
		if (Config.Main_flags & (1 << normal_cal_done))
		{
			// Get average zero value (over 32 readings)
			Config.AccZeroInvZ = 0;

			for (i = 0; i < 32; i++)
    20b6:	41 f7       	brne	.-48     	; 0x2088 <CalibrateAcc+0x10c>

			// Round and divide by 32
			Config.AccZeroInvZ = ((Config.AccZeroInvZ + 16) >> 5);		// Inverted zero point
			
			// Correct polarity of AccZeroInvZ as per orientation
			Config.AccZeroInvZ *= (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation][YAW]);
    20b8:	80 91 31 06 	lds	r24, 0x0631
    20bc:	99 27       	eor	r25, r25
    20be:	87 fd       	sbrc	r24, 7
    20c0:	90 95       	com	r25
    20c2:	fc 01       	movw	r30, r24
    20c4:	ee 0f       	add	r30, r30
    20c6:	ff 1f       	adc	r31, r31
    20c8:	e8 0f       	add	r30, r24
    20ca:	f9 1f       	adc	r31, r25
    20cc:	ec 55       	subi	r30, 0x5C	; 92
    20ce:	ff 4f       	sbci	r31, 0xFF	; 255
    20d0:	44 91       	lpm	r20, Z
				Config.AccZeroInvZ += accADC[YAW];		
				_delay_ms(10);					// Get a better acc average over time
			}

			// Round and divide by 32
			Config.AccZeroInvZ = ((Config.AccZeroInvZ + 16) >> 5);		// Inverted zero point
    20d2:	20 91 9b 07 	lds	r18, 0x079B
    20d6:	30 91 9c 07 	lds	r19, 0x079C
    20da:	20 5f       	subi	r18, 0xF0	; 240
    20dc:	3f 4f       	sbci	r19, 0xFF	; 255
    20de:	b5 e0       	ldi	r27, 0x05	; 5
    20e0:	35 95       	asr	r19
    20e2:	27 95       	ror	r18
    20e4:	ba 95       	dec	r27
    20e6:	e1 f7       	brne	.-8      	; 0x20e0 <CalibrateAcc+0x164>
			
			// Correct polarity of AccZeroInvZ as per orientation
			Config.AccZeroInvZ *= (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation][YAW]);
    20e8:	42 03       	mulsu	r20, r18
    20ea:	c0 01       	movw	r24, r0
    20ec:	43 9f       	mul	r20, r19
    20ee:	90 0d       	add	r25, r0
    20f0:	11 24       	eor	r1, r1
    20f2:	90 93 9c 07 	sts	0x079C, r25
    20f6:	80 93 9b 07 	sts	0x079B, r24

			// Test if board is actually inverted relative to board orientation.
			if (Config.AccZeroInvZ < 0)
    20fa:	97 ff       	sbrs	r25, 7
    20fc:	26 c0       	rjmp	.+76     	; 0x214a <CalibrateAcc+0x1ce>
			{

				// Reset zero to halfway between min and max Z
				Config.AccZeroDiff = ((Config.AccZeroNormZ - Config.AccZeroInvZ) >> 1);
    20fe:	20 91 99 07 	lds	r18, 0x0799
    2102:	30 91 9a 07 	lds	r19, 0x079A
    2106:	a9 01       	movw	r20, r18
    2108:	48 1b       	sub	r20, r24
    210a:	59 0b       	sbc	r21, r25
    210c:	ca 01       	movw	r24, r20
    210e:	95 95       	asr	r25
    2110:	87 95       	ror	r24
    2112:	90 93 9e 07 	sts	0x079E, r25
    2116:	80 93 9d 07 	sts	0x079D, r24
				Config.AccZero[YAW] = Config.AccZeroNormZ - Config.AccZeroDiff; // Config.AccZero[YAW] is now valid to use
    211a:	28 1b       	sub	r18, r24
    211c:	39 0b       	sbc	r19, r25
    211e:	30 93 98 07 	sts	0x0798, r19
    2122:	20 93 97 07 	sts	0x0797, r18

				// Flag that inverted cal done
				Config.Main_flags |= (1 << inv_cal_done);
    2126:	80 91 b0 07 	lds	r24, 0x07B0
    212a:	81 60       	ori	r24, 0x01	; 1
    212c:	80 93 b0 07 	sts	0x07B0, r24

				// Save new calibration and flash LED for confirmation
				Save_Config_to_EEPROM();
    2130:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <Save_Config_to_EEPROM>
				LED1 = 1;
    2134:	2b 9a       	sbi	0x05, 3	; 5
    2136:	5f e7       	ldi	r21, 0x7F	; 127
    2138:	84 e8       	ldi	r24, 0x84	; 132
    213a:	9e e1       	ldi	r25, 0x1E	; 30
    213c:	51 50       	subi	r21, 0x01	; 1
    213e:	80 40       	sbci	r24, 0x00	; 0
    2140:	90 40       	sbci	r25, 0x00	; 0
    2142:	e1 f7       	brne	.-8      	; 0x213c <CalibrateAcc+0x1c0>
    2144:	00 c0       	rjmp	.+0      	; 0x2146 <CalibrateAcc+0x1ca>
    2146:	00 00       	nop
				_delay_ms(500);
				LED1 = 0;
    2148:	2b 98       	cbi	0x05, 3	; 5
			}
		}
	}
}
    214a:	26 96       	adiw	r28, 0x06	; 6
    214c:	e3 e0       	ldi	r30, 0x03	; 3
    214e:	0c 94 ef 41 	jmp	0x83de	; 0x83de <__epilogue_restores__+0x1e>

00002152 <init_i2c_accs>:
// Set up the MPU6050 (Acc)
//***************************************************************

void init_i2c_accs(void)
{
	writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_PWR_MGMT_1, 0x01); // Gyro X clock, awake
    2152:	41 e0       	ldi	r20, 0x01	; 1
    2154:	6b e6       	ldi	r22, 0x6B	; 107
    2156:	80 ed       	ldi	r24, 0xD0	; 208
    2158:	0e 94 c0 1f 	call	0x3f80	; 0x3f80 <writeI2Cbyte>
	writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_ACCEL_CONFIG, ACCFS4G); // 4G full scale
    215c:	48 e0       	ldi	r20, 0x08	; 8
    215e:	6c e1       	ldi	r22, 0x1C	; 28
    2160:	80 ed       	ldi	r24, 0xD0	; 208
    2162:	0e 94 c0 1f 	call	0x3f80	; 0x3f80 <writeI2Cbyte>
    2166:	08 95       	ret

00002168 <Init_ADC>:
// ADC subroutines
//***********************************************************

void Init_ADC(void)
{
	DIDR0 	= 0b11111111;					// Digital Input Disable Register - ADC0~7 Digital Input Disable
    2168:	8f ef       	ldi	r24, 0xFF	; 255
    216a:	80 93 7e 00 	sts	0x007E, r24
	ADCSRB 	= 0b00000000; 					// ADC Control and Status Register B - ADTS2:0
    216e:	10 92 7b 00 	sts	0x007B, r1
    2172:	08 95       	ret

00002174 <read_adc>:
}

void read_adc(uint8_t channel)
{
	ADMUX = channel;
    2174:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA 	= 0b11000110;					// ADEN, ADSC, ADPS1,2
    2178:	86 ec       	ldi	r24, 0xC6	; 198
    217a:	80 93 7a 00 	sts	0x007A, r24
	while (ADCSRA & (1 << ADSC));			// Wait to complete. Result is in ADCW
    217e:	80 91 7a 00 	lds	r24, 0x007A
    2182:	86 fd       	sbrc	r24, 6
    2184:	fc cf       	rjmp	.-8      	; 0x217e <read_adc+0xa>
}
    2186:	08 95       	ret

00002188 <Display_balance>:
//************************************************************
// Code
//************************************************************

void Display_balance(void)
{
    2188:	cf 92       	push	r12
    218a:	df 92       	push	r13
    218c:	ef 92       	push	r14
    218e:	0f 93       	push	r16
    2190:	cf 93       	push	r28
    2192:	df 93       	push	r29

	#ifdef KK2Mini
	st7565_set_brightness(28);
	#endif

	while(BUTTON1 != 0)
    2194:	1f 9b       	sbis	0x03, 7	; 3
    2196:	86 c0       	rjmp	.+268    	; 0x22a4 <Display_balance+0x11c>
	{
		// Read accs
		ReadAcc();
    2198:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <ReadAcc>

		// Refresh accSmooth values
		// Fake the IMU period as accSmooth doesn't need that
		simple_imu_update(0);
    219c:	60 e0       	ldi	r22, 0x00	; 0
    219e:	70 e0       	ldi	r23, 0x00	; 0
    21a0:	cb 01       	movw	r24, r22
    21a2:	0e 94 75 22 	call	0x44ea	; 0x44ea <simple_imu_update>
		
		// Convert acc signal to a pixel position
		x_pos = accSmooth[PITCH] + 32;
    21a6:	20 e0       	ldi	r18, 0x00	; 0
    21a8:	30 e0       	ldi	r19, 0x00	; 0
    21aa:	40 e0       	ldi	r20, 0x00	; 0
    21ac:	52 e4       	ldi	r21, 0x42	; 66
    21ae:	60 91 95 05 	lds	r22, 0x0595
    21b2:	70 91 96 05 	lds	r23, 0x0596
    21b6:	80 91 97 05 	lds	r24, 0x0597
    21ba:	90 91 98 05 	lds	r25, 0x0598
    21be:	0e 94 0a 3f 	call	0x7e14	; 0x7e14 <__addsf3>
    21c2:	0e 94 da 3f 	call	0x7fb4	; 0x7fb4 <__fixsfsi>
    21c6:	eb 01       	movw	r28, r22
		y_pos = accSmooth[ROLL] + 64;
    21c8:	20 e0       	ldi	r18, 0x00	; 0
    21ca:	30 e0       	ldi	r19, 0x00	; 0
    21cc:	40 e8       	ldi	r20, 0x80	; 128
    21ce:	52 e4       	ldi	r21, 0x42	; 66
    21d0:	60 91 91 05 	lds	r22, 0x0591
    21d4:	70 91 92 05 	lds	r23, 0x0592
    21d8:	80 91 93 05 	lds	r24, 0x0593
    21dc:	90 91 94 05 	lds	r25, 0x0594
    21e0:	0e 94 0a 3f 	call	0x7e14	; 0x7e14 <__addsf3>
    21e4:	0e 94 da 3f 	call	0x7fb4	; 0x7fb4 <__fixsfsi>
    21e8:	6b 01       	movw	r12, r22

		if (x_pos < 0) x_pos = 0;
    21ea:	d7 fd       	sbrc	r29, 7
    21ec:	06 c0       	rjmp	.+12     	; 0x21fa <Display_balance+0x72>
		if (x_pos > 64) x_pos = 64;
    21ee:	c1 34       	cpi	r28, 0x41	; 65
    21f0:	d1 05       	cpc	r29, r1
    21f2:	2c f0       	brlt	.+10     	; 0x21fe <Display_balance+0x76>
    21f4:	c0 e4       	ldi	r28, 0x40	; 64
    21f6:	d0 e0       	ldi	r29, 0x00	; 0
    21f8:	02 c0       	rjmp	.+4      	; 0x21fe <Display_balance+0x76>
		
		// Convert acc signal to a pixel position
		x_pos = accSmooth[PITCH] + 32;
		y_pos = accSmooth[ROLL] + 64;

		if (x_pos < 0) x_pos = 0;
    21fa:	c0 e0       	ldi	r28, 0x00	; 0
    21fc:	d0 e0       	ldi	r29, 0x00	; 0
		if (x_pos > 64) x_pos = 64;
		if (y_pos < 0) y_pos = 0;
    21fe:	d7 fc       	sbrc	r13, 7
    2200:	08 c0       	rjmp	.+16     	; 0x2212 <Display_balance+0x8a>
		if (y_pos > 128) y_pos = 128;
    2202:	21 e8       	ldi	r18, 0x81	; 129
    2204:	c2 16       	cp	r12, r18
    2206:	d1 04       	cpc	r13, r1
    2208:	34 f0       	brlt	.+12     	; 0x2216 <Display_balance+0x8e>
    220a:	80 e8       	ldi	r24, 0x80	; 128
    220c:	c8 2e       	mov	r12, r24
    220e:	d1 2c       	mov	r13, r1
    2210:	02 c0       	rjmp	.+4      	; 0x2216 <Display_balance+0x8e>
		x_pos = accSmooth[PITCH] + 32;
		y_pos = accSmooth[ROLL] + 64;

		if (x_pos < 0) x_pos = 0;
		if (x_pos > 64) x_pos = 64;
		if (y_pos < 0) y_pos = 0;
    2212:	c1 2c       	mov	r12, r1
    2214:	d1 2c       	mov	r13, r1
		if (y_pos > 128) y_pos = 128;

		// Print bottom markers
		LCD_Display_Text(12, (const unsigned char*)Wingdings, 2, 55); 	// Left
    2216:	27 e3       	ldi	r18, 0x37	; 55
    2218:	30 e0       	ldi	r19, 0x00	; 0
    221a:	42 e0       	ldi	r20, 0x02	; 2
    221c:	50 e0       	ldi	r21, 0x00	; 0
    221e:	6f ed       	ldi	r22, 0xDF	; 223
    2220:	70 e0       	ldi	r23, 0x00	; 0
    2222:	8c e0       	ldi	r24, 0x0C	; 12
    2224:	90 e0       	ldi	r25, 0x00	; 0
    2226:	0e 94 a0 1d 	call	0x3b40	; 0x3b40 <LCD_Display_Text>

		// Draw balance meter
		drawrect(buffer, 0, 0, 128, 64, 1);		// Border
    222a:	ee 24       	eor	r14, r14
    222c:	e3 94       	inc	r14
    222e:	00 e4       	ldi	r16, 0x40	; 64
    2230:	20 e8       	ldi	r18, 0x80	; 128
    2232:	40 e0       	ldi	r20, 0x00	; 0
    2234:	60 e0       	ldi	r22, 0x00	; 0
    2236:	80 e0       	ldi	r24, 0x00	; 0
    2238:	91 e0       	ldi	r25, 0x01	; 1
    223a:	0e 94 df 1c 	call	0x39be	; 0x39be <drawrect>
		drawrect(buffer, 54, 22, 21, 21, 1);	// Target
    223e:	05 e1       	ldi	r16, 0x15	; 21
    2240:	25 e1       	ldi	r18, 0x15	; 21
    2242:	46 e1       	ldi	r20, 0x16	; 22
    2244:	66 e3       	ldi	r22, 0x36	; 54
    2246:	80 e0       	ldi	r24, 0x00	; 0
    2248:	91 e0       	ldi	r25, 0x01	; 1
    224a:	0e 94 df 1c 	call	0x39be	; 0x39be <drawrect>
		drawline(buffer, 64, 8, 64, 56, 1); 	// Crosshairs
    224e:	08 e3       	ldi	r16, 0x38	; 56
    2250:	20 e4       	ldi	r18, 0x40	; 64
    2252:	48 e0       	ldi	r20, 0x08	; 8
    2254:	60 e4       	ldi	r22, 0x40	; 64
    2256:	80 e0       	ldi	r24, 0x00	; 0
    2258:	91 e0       	ldi	r25, 0x01	; 1
    225a:	0e 94 57 1c 	call	0x38ae	; 0x38ae <drawline>
		drawline(buffer, 32, 32, 96, 32, 1);
    225e:	00 e2       	ldi	r16, 0x20	; 32
    2260:	20 e6       	ldi	r18, 0x60	; 96
    2262:	40 e2       	ldi	r20, 0x20	; 32
    2264:	60 e2       	ldi	r22, 0x20	; 32
    2266:	80 e0       	ldi	r24, 0x00	; 0
    2268:	91 e0       	ldi	r25, 0x01	; 1
    226a:	0e 94 57 1c 	call	0x38ae	; 0x38ae <drawline>
		fillcircle(buffer, y_pos, x_pos, 8, 1);	// Bubble
    226e:	01 e0       	ldi	r16, 0x01	; 1
    2270:	28 e0       	ldi	r18, 0x08	; 8
    2272:	4c 2f       	mov	r20, r28
    2274:	6c 2d       	mov	r22, r12
    2276:	80 e0       	ldi	r24, 0x00	; 0
    2278:	91 e0       	ldi	r25, 0x01	; 1
    227a:	0e 94 25 1d 	call	0x3a4a	; 0x3a4a <fillcircle>

		// Refresh GLCD
		write_buffer(buffer,1);
    227e:	61 e0       	ldi	r22, 0x01	; 1
    2280:	80 e0       	ldi	r24, 0x00	; 0
    2282:	91 e0       	ldi	r25, 0x01	; 1
    2284:	0e 94 c9 1b 	call	0x3792	; 0x3792 <write_buffer>
		clear_buffer(buffer);
    2288:	80 e0       	ldi	r24, 0x00	; 0
    228a:	91 e0       	ldi	r25, 0x01	; 1
    228c:	0e 94 f7 1b 	call	0x37ee	; 0x37ee <clear_buffer>
    2290:	8f e7       	ldi	r24, 0x7F	; 127
    2292:	98 e3       	ldi	r25, 0x38	; 56
    2294:	21 e0       	ldi	r18, 0x01	; 1
    2296:	81 50       	subi	r24, 0x01	; 1
    2298:	90 40       	sbci	r25, 0x00	; 0
    229a:	20 40       	sbci	r18, 0x00	; 0
    229c:	e1 f7       	brne	.-8      	; 0x2296 <Display_balance+0x10e>
    229e:	00 c0       	rjmp	.+0      	; 0x22a0 <Display_balance+0x118>
    22a0:	00 00       	nop
    22a2:	78 cf       	rjmp	.-272    	; 0x2194 <Display_balance+0xc>
	#ifdef KK2Mini
	clear_buffer(buffer);
	write_buffer(buffer,1);
	st7565_set_brightness((uint8_t)Config.Contrast);
	#endif
}
    22a4:	df 91       	pop	r29
    22a6:	cf 91       	pop	r28
    22a8:	0f 91       	pop	r16
    22aa:	ef 90       	pop	r14
    22ac:	df 90       	pop	r13
    22ae:	cf 90       	pop	r12
    22b0:	08 95       	ret

000022b2 <Display_rcinput>:
// Code
//************************************************************

void Display_rcinput(void)
{
	while(BUTTON1 != 0)
    22b2:	1f 9b       	sbis	0x03, 7	; 3
    22b4:	fb c0       	rjmp	.+502    	; 0x24ac <Display_rcinput+0x1fa>
	{
		if (BUTTON4 == 0)
    22b6:	1c 9b       	sbis	0x03, 4	; 3
		{
			CenterSticks();
    22b8:	0e 94 ee 3c 	call	0x79dc	; 0x79dc <CenterSticks>
		}

		RxGetChannels();
    22bc:	0e 94 5e 3c 	call	0x78bc	; 0x78bc <RxGetChannels>

		LCD_Display_Text(114,(const unsigned char*)Verdana8,0,0); // Throttle
    22c0:	20 e0       	ldi	r18, 0x00	; 0
    22c2:	30 e0       	ldi	r19, 0x00	; 0
    22c4:	40 e0       	ldi	r20, 0x00	; 0
    22c6:	50 e0       	ldi	r21, 0x00	; 0
    22c8:	67 ef       	ldi	r22, 0xF7	; 247
    22ca:	79 e0       	ldi	r23, 0x09	; 9
    22cc:	82 e7       	ldi	r24, 0x72	; 114
    22ce:	90 e0       	ldi	r25, 0x00	; 0
    22d0:	0e 94 a0 1d 	call	0x3b40	; 0x3b40 <LCD_Display_Text>
		LCD_Display_Text(32,(const unsigned char*)Verdana8,0,10);
    22d4:	2a e0       	ldi	r18, 0x0A	; 10
    22d6:	30 e0       	ldi	r19, 0x00	; 0
    22d8:	40 e0       	ldi	r20, 0x00	; 0
    22da:	50 e0       	ldi	r21, 0x00	; 0
    22dc:	67 ef       	ldi	r22, 0xF7	; 247
    22de:	79 e0       	ldi	r23, 0x09	; 9
    22e0:	80 e2       	ldi	r24, 0x20	; 32
    22e2:	90 e0       	ldi	r25, 0x00	; 0
    22e4:	0e 94 a0 1d 	call	0x3b40	; 0x3b40 <LCD_Display_Text>
		LCD_Display_Text(115,(const unsigned char*)Verdana8,0,20);
    22e8:	24 e1       	ldi	r18, 0x14	; 20
    22ea:	30 e0       	ldi	r19, 0x00	; 0
    22ec:	40 e0       	ldi	r20, 0x00	; 0
    22ee:	50 e0       	ldi	r21, 0x00	; 0
    22f0:	67 ef       	ldi	r22, 0xF7	; 247
    22f2:	79 e0       	ldi	r23, 0x09	; 9
    22f4:	83 e7       	ldi	r24, 0x73	; 115
    22f6:	90 e0       	ldi	r25, 0x00	; 0
    22f8:	0e 94 a0 1d 	call	0x3b40	; 0x3b40 <LCD_Display_Text>
		LCD_Display_Text(35,(const unsigned char*)Verdana8,0,30);
    22fc:	2e e1       	ldi	r18, 0x1E	; 30
    22fe:	30 e0       	ldi	r19, 0x00	; 0
    2300:	40 e0       	ldi	r20, 0x00	; 0
    2302:	50 e0       	ldi	r21, 0x00	; 0
    2304:	67 ef       	ldi	r22, 0xF7	; 247
    2306:	79 e0       	ldi	r23, 0x09	; 9
    2308:	83 e2       	ldi	r24, 0x23	; 35
    230a:	90 e0       	ldi	r25, 0x00	; 0
    230c:	0e 94 a0 1d 	call	0x3b40	; 0x3b40 <LCD_Display_Text>

		LCD_Display_Text(109,(const unsigned char*)Verdana8,70,0); // Gear
    2310:	20 e0       	ldi	r18, 0x00	; 0
    2312:	30 e0       	ldi	r19, 0x00	; 0
    2314:	46 e4       	ldi	r20, 0x46	; 70
    2316:	50 e0       	ldi	r21, 0x00	; 0
    2318:	67 ef       	ldi	r22, 0xF7	; 247
    231a:	79 e0       	ldi	r23, 0x09	; 9
    231c:	8d e6       	ldi	r24, 0x6D	; 109
    231e:	90 e0       	ldi	r25, 0x00	; 0
    2320:	0e 94 a0 1d 	call	0x3b40	; 0x3b40 <LCD_Display_Text>
		LCD_Display_Text(110,(const unsigned char*)Verdana8,70,10);
    2324:	2a e0       	ldi	r18, 0x0A	; 10
    2326:	30 e0       	ldi	r19, 0x00	; 0
    2328:	46 e4       	ldi	r20, 0x46	; 70
    232a:	50 e0       	ldi	r21, 0x00	; 0
    232c:	67 ef       	ldi	r22, 0xF7	; 247
    232e:	79 e0       	ldi	r23, 0x09	; 9
    2330:	8e e6       	ldi	r24, 0x6E	; 110
    2332:	90 e0       	ldi	r25, 0x00	; 0
    2334:	0e 94 a0 1d 	call	0x3b40	; 0x3b40 <LCD_Display_Text>
		LCD_Display_Text(111,(const unsigned char*)Verdana8,70,20);
    2338:	24 e1       	ldi	r18, 0x14	; 20
    233a:	30 e0       	ldi	r19, 0x00	; 0
    233c:	46 e4       	ldi	r20, 0x46	; 70
    233e:	50 e0       	ldi	r21, 0x00	; 0
    2340:	67 ef       	ldi	r22, 0xF7	; 247
    2342:	79 e0       	ldi	r23, 0x09	; 9
    2344:	8f e6       	ldi	r24, 0x6F	; 111
    2346:	90 e0       	ldi	r25, 0x00	; 0
    2348:	0e 94 a0 1d 	call	0x3b40	; 0x3b40 <LCD_Display_Text>
		LCD_Display_Text(112,(const unsigned char*)Verdana8,70,30);
    234c:	2e e1       	ldi	r18, 0x1E	; 30
    234e:	30 e0       	ldi	r19, 0x00	; 0
    2350:	46 e4       	ldi	r20, 0x46	; 70
    2352:	50 e0       	ldi	r21, 0x00	; 0
    2354:	67 ef       	ldi	r22, 0xF7	; 247
    2356:	79 e0       	ldi	r23, 0x09	; 9
    2358:	80 e7       	ldi	r24, 0x70	; 112
    235a:	90 e0       	ldi	r25, 0x00	; 0
    235c:	0e 94 a0 1d 	call	0x3b40	; 0x3b40 <LCD_Display_Text>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    2360:	4a e0       	ldi	r20, 0x0A	; 10
    2362:	67 e5       	ldi	r22, 0x57	; 87
    2364:	75 e0       	ldi	r23, 0x05	; 5
    2366:	80 91 20 08 	lds	r24, 0x0820
    236a:	90 91 21 08 	lds	r25, 0x0821
    236e:	0e 94 04 42 	call	0x8408	; 0x8408 <__itoa_ncheck>

		mugui_lcd_puts(itoa(MonopolarThrottle,pBuffer,10),(const unsigned char*)Verdana8,37,0);
    2372:	20 e0       	ldi	r18, 0x00	; 0
    2374:	30 e0       	ldi	r19, 0x00	; 0
    2376:	45 e2       	ldi	r20, 0x25	; 37
    2378:	50 e0       	ldi	r21, 0x00	; 0
    237a:	67 ef       	ldi	r22, 0xF7	; 247
    237c:	79 e0       	ldi	r23, 0x09	; 9
    237e:	0e 94 22 38 	call	0x7044	; 0x7044 <mugui_lcd_puts>
    2382:	4a e0       	ldi	r20, 0x0A	; 10
    2384:	67 e5       	ldi	r22, 0x57	; 87
    2386:	75 e0       	ldi	r23, 0x05	; 5
    2388:	80 91 24 08 	lds	r24, 0x0824
    238c:	90 91 25 08 	lds	r25, 0x0825
    2390:	0e 94 04 42 	call	0x8408	; 0x8408 <__itoa_ncheck>
		mugui_lcd_puts(itoa(RCinputs[AILERON],pBuffer,10),(const unsigned char*)Verdana8,37,10);
    2394:	2a e0       	ldi	r18, 0x0A	; 10
    2396:	30 e0       	ldi	r19, 0x00	; 0
    2398:	45 e2       	ldi	r20, 0x25	; 37
    239a:	50 e0       	ldi	r21, 0x00	; 0
    239c:	67 ef       	ldi	r22, 0xF7	; 247
    239e:	79 e0       	ldi	r23, 0x09	; 9
    23a0:	0e 94 22 38 	call	0x7044	; 0x7044 <mugui_lcd_puts>
    23a4:	4a e0       	ldi	r20, 0x0A	; 10
    23a6:	67 e5       	ldi	r22, 0x57	; 87
    23a8:	75 e0       	ldi	r23, 0x05	; 5
    23aa:	80 91 26 08 	lds	r24, 0x0826
    23ae:	90 91 27 08 	lds	r25, 0x0827
    23b2:	0e 94 04 42 	call	0x8408	; 0x8408 <__itoa_ncheck>
		mugui_lcd_puts(itoa(RCinputs[ELEVATOR],pBuffer,10),(const unsigned char*)Verdana8,37,20);
    23b6:	24 e1       	ldi	r18, 0x14	; 20
    23b8:	30 e0       	ldi	r19, 0x00	; 0
    23ba:	45 e2       	ldi	r20, 0x25	; 37
    23bc:	50 e0       	ldi	r21, 0x00	; 0
    23be:	67 ef       	ldi	r22, 0xF7	; 247
    23c0:	79 e0       	ldi	r23, 0x09	; 9
    23c2:	0e 94 22 38 	call	0x7044	; 0x7044 <mugui_lcd_puts>
    23c6:	4a e0       	ldi	r20, 0x0A	; 10
    23c8:	67 e5       	ldi	r22, 0x57	; 87
    23ca:	75 e0       	ldi	r23, 0x05	; 5
    23cc:	80 91 28 08 	lds	r24, 0x0828
    23d0:	90 91 29 08 	lds	r25, 0x0829
    23d4:	0e 94 04 42 	call	0x8408	; 0x8408 <__itoa_ncheck>
		mugui_lcd_puts(itoa(RCinputs[RUDDER],pBuffer,10),(const unsigned char*)Verdana8,37,30);
    23d8:	2e e1       	ldi	r18, 0x1E	; 30
    23da:	30 e0       	ldi	r19, 0x00	; 0
    23dc:	45 e2       	ldi	r20, 0x25	; 37
    23de:	50 e0       	ldi	r21, 0x00	; 0
    23e0:	67 ef       	ldi	r22, 0xF7	; 247
    23e2:	79 e0       	ldi	r23, 0x09	; 9
    23e4:	0e 94 22 38 	call	0x7044	; 0x7044 <mugui_lcd_puts>
    23e8:	4a e0       	ldi	r20, 0x0A	; 10
    23ea:	67 e5       	ldi	r22, 0x57	; 87
    23ec:	75 e0       	ldi	r23, 0x05	; 5
    23ee:	80 91 2a 08 	lds	r24, 0x082A
    23f2:	90 91 2b 08 	lds	r25, 0x082B
    23f6:	0e 94 04 42 	call	0x8408	; 0x8408 <__itoa_ncheck>

		mugui_lcd_puts(itoa(RCinputs[GEAR],pBuffer,10),(const unsigned char*)Verdana8,100,0);
    23fa:	20 e0       	ldi	r18, 0x00	; 0
    23fc:	30 e0       	ldi	r19, 0x00	; 0
    23fe:	44 e6       	ldi	r20, 0x64	; 100
    2400:	50 e0       	ldi	r21, 0x00	; 0
    2402:	67 ef       	ldi	r22, 0xF7	; 247
    2404:	79 e0       	ldi	r23, 0x09	; 9
    2406:	0e 94 22 38 	call	0x7044	; 0x7044 <mugui_lcd_puts>
    240a:	4a e0       	ldi	r20, 0x0A	; 10
    240c:	67 e5       	ldi	r22, 0x57	; 87
    240e:	75 e0       	ldi	r23, 0x05	; 5
    2410:	80 91 2c 08 	lds	r24, 0x082C
    2414:	90 91 2d 08 	lds	r25, 0x082D
    2418:	0e 94 04 42 	call	0x8408	; 0x8408 <__itoa_ncheck>
		mugui_lcd_puts(itoa(RCinputs[AUX1],pBuffer,10),(const unsigned char*)Verdana8,100,10);
    241c:	2a e0       	ldi	r18, 0x0A	; 10
    241e:	30 e0       	ldi	r19, 0x00	; 0
    2420:	44 e6       	ldi	r20, 0x64	; 100
    2422:	50 e0       	ldi	r21, 0x00	; 0
    2424:	67 ef       	ldi	r22, 0xF7	; 247
    2426:	79 e0       	ldi	r23, 0x09	; 9
    2428:	0e 94 22 38 	call	0x7044	; 0x7044 <mugui_lcd_puts>
    242c:	4a e0       	ldi	r20, 0x0A	; 10
    242e:	67 e5       	ldi	r22, 0x57	; 87
    2430:	75 e0       	ldi	r23, 0x05	; 5
    2432:	80 91 2e 08 	lds	r24, 0x082E
    2436:	90 91 2f 08 	lds	r25, 0x082F
    243a:	0e 94 04 42 	call	0x8408	; 0x8408 <__itoa_ncheck>
		mugui_lcd_puts(itoa(RCinputs[AUX2],pBuffer,10),(const unsigned char*)Verdana8,100,20);
    243e:	24 e1       	ldi	r18, 0x14	; 20
    2440:	30 e0       	ldi	r19, 0x00	; 0
    2442:	44 e6       	ldi	r20, 0x64	; 100
    2444:	50 e0       	ldi	r21, 0x00	; 0
    2446:	67 ef       	ldi	r22, 0xF7	; 247
    2448:	79 e0       	ldi	r23, 0x09	; 9
    244a:	0e 94 22 38 	call	0x7044	; 0x7044 <mugui_lcd_puts>
    244e:	4a e0       	ldi	r20, 0x0A	; 10
    2450:	67 e5       	ldi	r22, 0x57	; 87
    2452:	75 e0       	ldi	r23, 0x05	; 5
    2454:	80 91 30 08 	lds	r24, 0x0830
    2458:	90 91 31 08 	lds	r25, 0x0831
    245c:	0e 94 04 42 	call	0x8408	; 0x8408 <__itoa_ncheck>
		mugui_lcd_puts(itoa(RCinputs[AUX3],pBuffer,10),(const unsigned char*)Verdana8,100,30);
    2460:	2e e1       	ldi	r18, 0x1E	; 30
    2462:	30 e0       	ldi	r19, 0x00	; 0
    2464:	44 e6       	ldi	r20, 0x64	; 100
    2466:	50 e0       	ldi	r21, 0x00	; 0
    2468:	67 ef       	ldi	r22, 0xF7	; 247
    246a:	79 e0       	ldi	r23, 0x09	; 9
    246c:	0e 94 22 38 	call	0x7044	; 0x7044 <mugui_lcd_puts>

		// Print bottom text and markers
		LCD_Display_Text(12, (const unsigned char*)Wingdings, 0, 57); 	// Left
    2470:	29 e3       	ldi	r18, 0x39	; 57
    2472:	30 e0       	ldi	r19, 0x00	; 0
    2474:	40 e0       	ldi	r20, 0x00	; 0
    2476:	50 e0       	ldi	r21, 0x00	; 0
    2478:	6f ed       	ldi	r22, 0xDF	; 223
    247a:	70 e0       	ldi	r23, 0x00	; 0
    247c:	8c e0       	ldi	r24, 0x0C	; 12
    247e:	90 e0       	ldi	r25, 0x00	; 0
    2480:	0e 94 a0 1d 	call	0x3b40	; 0x3b40 <LCD_Display_Text>
		LCD_Display_Text(60, (const unsigned char*)Verdana8, 110, 55); 	// Cal.
    2484:	27 e3       	ldi	r18, 0x37	; 55
    2486:	30 e0       	ldi	r19, 0x00	; 0
    2488:	4e e6       	ldi	r20, 0x6E	; 110
    248a:	50 e0       	ldi	r21, 0x00	; 0
    248c:	67 ef       	ldi	r22, 0xF7	; 247
    248e:	79 e0       	ldi	r23, 0x09	; 9
    2490:	8c e3       	ldi	r24, 0x3C	; 60
    2492:	90 e0       	ldi	r25, 0x00	; 0
    2494:	0e 94 a0 1d 	call	0x3b40	; 0x3b40 <LCD_Display_Text>

		// Update buffer
		write_buffer(buffer,1);
    2498:	61 e0       	ldi	r22, 0x01	; 1
    249a:	80 e0       	ldi	r24, 0x00	; 0
    249c:	91 e0       	ldi	r25, 0x01	; 1
    249e:	0e 94 c9 1b 	call	0x3792	; 0x3792 <write_buffer>
		clear_buffer(buffer);
    24a2:	80 e0       	ldi	r24, 0x00	; 0
    24a4:	91 e0       	ldi	r25, 0x01	; 1
    24a6:	0e 94 f7 1b 	call	0x37ee	; 0x37ee <clear_buffer>
    24aa:	03 cf       	rjmp	.-506    	; 0x22b2 <Display_rcinput>
	}
}
    24ac:	08 95       	ret

000024ae <Display_sensors>:
// Code
//************************************************************

void Display_sensors(void)
{
	while(BUTTON1 != 0)
    24ae:	1f 9b       	sbis	0x03, 7	; 3
    24b0:	ee c0       	rjmp	.+476    	; 0x268e <Display_sensors+0x1e0>
	{
	
		// Normal calibrate button pressed
		if (BUTTON4 == 0)
    24b2:	1c 99       	sbic	0x03, 4	; 3
    24b4:	1a c0       	rjmp	.+52     	; 0x24ea <Display_sensors+0x3c>
		{
			// Wait until finger off button
			while(BUTTON4 == 0)
    24b6:	1c 99       	sbic	0x03, 4	; 3
    24b8:	0a c0       	rjmp	.+20     	; 0x24ce <Display_sensors+0x20>
    24ba:	2f e3       	ldi	r18, 0x3F	; 63
    24bc:	8d e0       	ldi	r24, 0x0D	; 13
    24be:	93 e0       	ldi	r25, 0x03	; 3
    24c0:	21 50       	subi	r18, 0x01	; 1
    24c2:	80 40       	sbci	r24, 0x00	; 0
    24c4:	90 40       	sbci	r25, 0x00	; 0
    24c6:	e1 f7       	brne	.-8      	; 0x24c0 <Display_sensors+0x12>
    24c8:	00 c0       	rjmp	.+0      	; 0x24ca <Display_sensors+0x1c>
    24ca:	00 00       	nop
    24cc:	f4 cf       	rjmp	.-24     	; 0x24b6 <Display_sensors+0x8>
    24ce:	2f e3       	ldi	r18, 0x3F	; 63
    24d0:	82 e4       	ldi	r24, 0x42	; 66
    24d2:	9f e0       	ldi	r25, 0x0F	; 15
    24d4:	21 50       	subi	r18, 0x01	; 1
    24d6:	80 40       	sbci	r24, 0x00	; 0
    24d8:	90 40       	sbci	r25, 0x00	; 0
    24da:	e1 f7       	brne	.-8      	; 0x24d4 <Display_sensors+0x26>
    24dc:	00 c0       	rjmp	.+0      	; 0x24de <Display_sensors+0x30>
    24de:	00 00       	nop
			
			// Pause until steady		
			_delay_ms(250);
			
			// Calibrate sensors
			CalibrateGyrosFast();		
    24e0:	0e 94 a2 1e 	call	0x3d44	; 0x3d44 <CalibrateGyrosFast>
			CalibrateAcc(NORMAL);
    24e4:	80 e0       	ldi	r24, 0x00	; 0
    24e6:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <CalibrateAcc>
		}

		// Inverted calibrate button pressed
		if (BUTTON3 == 0)
    24ea:	1d 99       	sbic	0x03, 5	; 3
    24ec:	0c c0       	rjmp	.+24     	; 0x2506 <Display_sensors+0x58>
    24ee:	2f e3       	ldi	r18, 0x3F	; 63
    24f0:	82 e4       	ldi	r24, 0x42	; 66
    24f2:	9f e0       	ldi	r25, 0x0F	; 15
    24f4:	21 50       	subi	r18, 0x01	; 1
    24f6:	80 40       	sbci	r24, 0x00	; 0
    24f8:	90 40       	sbci	r25, 0x00	; 0
    24fa:	e1 f7       	brne	.-8      	; 0x24f4 <Display_sensors+0x46>
    24fc:	00 c0       	rjmp	.+0      	; 0x24fe <Display_sensors+0x50>
    24fe:	00 00       	nop
		{
			// Wait until button snap dissipated
			_delay_ms(250);
			CalibrateAcc(REVERSED);
    2500:	81 e0       	ldi	r24, 0x01	; 1
    2502:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <CalibrateAcc>
		}

		ReadGyros();
    2506:	0e 94 75 1e 	call	0x3cea	; 0x3cea <ReadGyros>
		ReadAcc();
    250a:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <ReadAcc>

		LCD_Display_Text(26,(const unsigned char*)Verdana8,37,0); 	// Gyro
    250e:	20 e0       	ldi	r18, 0x00	; 0
    2510:	30 e0       	ldi	r19, 0x00	; 0
    2512:	45 e2       	ldi	r20, 0x25	; 37
    2514:	50 e0       	ldi	r21, 0x00	; 0
    2516:	67 ef       	ldi	r22, 0xF7	; 247
    2518:	79 e0       	ldi	r23, 0x09	; 9
    251a:	8a e1       	ldi	r24, 0x1A	; 26
    251c:	90 e0       	ldi	r25, 0x00	; 0
    251e:	0e 94 a0 1d 	call	0x3b40	; 0x3b40 <LCD_Display_Text>
		LCD_Display_Text(30,(const unsigned char*)Verdana8,77,0); 	// Acc
    2522:	20 e0       	ldi	r18, 0x00	; 0
    2524:	30 e0       	ldi	r19, 0x00	; 0
    2526:	4d e4       	ldi	r20, 0x4D	; 77
    2528:	50 e0       	ldi	r21, 0x00	; 0
    252a:	67 ef       	ldi	r22, 0xF7	; 247
    252c:	79 e0       	ldi	r23, 0x09	; 9
    252e:	8e e1       	ldi	r24, 0x1E	; 30
    2530:	90 e0       	ldi	r25, 0x00	; 0
    2532:	0e 94 a0 1d 	call	0x3b40	; 0x3b40 <LCD_Display_Text>
		//
		LCD_Display_Text(27,(const unsigned char*)Verdana8,5,13);	// Roll
    2536:	2d e0       	ldi	r18, 0x0D	; 13
    2538:	30 e0       	ldi	r19, 0x00	; 0
    253a:	45 e0       	ldi	r20, 0x05	; 5
    253c:	50 e0       	ldi	r21, 0x00	; 0
    253e:	67 ef       	ldi	r22, 0xF7	; 247
    2540:	79 e0       	ldi	r23, 0x09	; 9
    2542:	8b e1       	ldi	r24, 0x1B	; 27
    2544:	90 e0       	ldi	r25, 0x00	; 0
    2546:	0e 94 a0 1d 	call	0x3b40	; 0x3b40 <LCD_Display_Text>
		LCD_Display_Text(28,(const unsigned char*)Verdana8,5,23);	// Pitch
    254a:	27 e1       	ldi	r18, 0x17	; 23
    254c:	30 e0       	ldi	r19, 0x00	; 0
    254e:	45 e0       	ldi	r20, 0x05	; 5
    2550:	50 e0       	ldi	r21, 0x00	; 0
    2552:	67 ef       	ldi	r22, 0xF7	; 247
    2554:	79 e0       	ldi	r23, 0x09	; 9
    2556:	8c e1       	ldi	r24, 0x1C	; 28
    2558:	90 e0       	ldi	r25, 0x00	; 0
    255a:	0e 94 a0 1d 	call	0x3b40	; 0x3b40 <LCD_Display_Text>
		LCD_Display_Text(29,(const unsigned char*)Verdana8,5,33);	// Yaw/Z
    255e:	21 e2       	ldi	r18, 0x21	; 33
    2560:	30 e0       	ldi	r19, 0x00	; 0
    2562:	45 e0       	ldi	r20, 0x05	; 5
    2564:	50 e0       	ldi	r21, 0x00	; 0
    2566:	67 ef       	ldi	r22, 0xF7	; 247
    2568:	79 e0       	ldi	r23, 0x09	; 9
    256a:	8d e1       	ldi	r24, 0x1D	; 29
    256c:	90 e0       	ldi	r25, 0x00	; 0
    256e:	0e 94 a0 1d 	call	0x3b40	; 0x3b40 <LCD_Display_Text>
    2572:	4a e0       	ldi	r20, 0x0A	; 10
    2574:	67 e5       	ldi	r22, 0x57	; 87
    2576:	75 e0       	ldi	r23, 0x05	; 5
    2578:	80 91 67 05 	lds	r24, 0x0567
    257c:	90 91 68 05 	lds	r25, 0x0568
    2580:	0e 94 04 42 	call	0x8408	; 0x8408 <__itoa_ncheck>
		//
		mugui_lcd_puts(itoa(gyroADC[ROLL],pBuffer,10),(const unsigned char*)Verdana8,40,13);
    2584:	2d e0       	ldi	r18, 0x0D	; 13
    2586:	30 e0       	ldi	r19, 0x00	; 0
    2588:	48 e2       	ldi	r20, 0x28	; 40
    258a:	50 e0       	ldi	r21, 0x00	; 0
    258c:	67 ef       	ldi	r22, 0xF7	; 247
    258e:	79 e0       	ldi	r23, 0x09	; 9
    2590:	0e 94 22 38 	call	0x7044	; 0x7044 <mugui_lcd_puts>
    2594:	4a e0       	ldi	r20, 0x0A	; 10
    2596:	67 e5       	ldi	r22, 0x57	; 87
    2598:	75 e0       	ldi	r23, 0x05	; 5
    259a:	80 91 69 05 	lds	r24, 0x0569
    259e:	90 91 6a 05 	lds	r25, 0x056A
    25a2:	0e 94 04 42 	call	0x8408	; 0x8408 <__itoa_ncheck>
		mugui_lcd_puts(itoa(gyroADC[PITCH],pBuffer,10),(const unsigned char*)Verdana8,40,23);
    25a6:	27 e1       	ldi	r18, 0x17	; 23
    25a8:	30 e0       	ldi	r19, 0x00	; 0
    25aa:	48 e2       	ldi	r20, 0x28	; 40
    25ac:	50 e0       	ldi	r21, 0x00	; 0
    25ae:	67 ef       	ldi	r22, 0xF7	; 247
    25b0:	79 e0       	ldi	r23, 0x09	; 9
    25b2:	0e 94 22 38 	call	0x7044	; 0x7044 <mugui_lcd_puts>
    25b6:	4a e0       	ldi	r20, 0x0A	; 10
    25b8:	67 e5       	ldi	r22, 0x57	; 87
    25ba:	75 e0       	ldi	r23, 0x05	; 5
    25bc:	80 91 6b 05 	lds	r24, 0x056B
    25c0:	90 91 6c 05 	lds	r25, 0x056C
    25c4:	0e 94 04 42 	call	0x8408	; 0x8408 <__itoa_ncheck>
		mugui_lcd_puts(itoa(gyroADC[YAW],pBuffer,10),(const unsigned char*)Verdana8,40,33);
    25c8:	21 e2       	ldi	r18, 0x21	; 33
    25ca:	30 e0       	ldi	r19, 0x00	; 0
    25cc:	48 e2       	ldi	r20, 0x28	; 40
    25ce:	50 e0       	ldi	r21, 0x00	; 0
    25d0:	67 ef       	ldi	r22, 0xF7	; 247
    25d2:	79 e0       	ldi	r23, 0x09	; 9
    25d4:	0e 94 22 38 	call	0x7044	; 0x7044 <mugui_lcd_puts>
    25d8:	4a e0       	ldi	r20, 0x0A	; 10
    25da:	67 e5       	ldi	r22, 0x57	; 87
    25dc:	75 e0       	ldi	r23, 0x05	; 5
    25de:	80 91 32 05 	lds	r24, 0x0532
    25e2:	90 91 33 05 	lds	r25, 0x0533
    25e6:	0e 94 04 42 	call	0x8408	; 0x8408 <__itoa_ncheck>
		mugui_lcd_puts(itoa(accADC[ROLL],pBuffer,10),(const unsigned char*)Verdana8,80,13);
    25ea:	2d e0       	ldi	r18, 0x0D	; 13
    25ec:	30 e0       	ldi	r19, 0x00	; 0
    25ee:	40 e5       	ldi	r20, 0x50	; 80
    25f0:	50 e0       	ldi	r21, 0x00	; 0
    25f2:	67 ef       	ldi	r22, 0xF7	; 247
    25f4:	79 e0       	ldi	r23, 0x09	; 9
    25f6:	0e 94 22 38 	call	0x7044	; 0x7044 <mugui_lcd_puts>
    25fa:	4a e0       	ldi	r20, 0x0A	; 10
    25fc:	67 e5       	ldi	r22, 0x57	; 87
    25fe:	75 e0       	ldi	r23, 0x05	; 5
    2600:	80 91 34 05 	lds	r24, 0x0534
    2604:	90 91 35 05 	lds	r25, 0x0535
    2608:	0e 94 04 42 	call	0x8408	; 0x8408 <__itoa_ncheck>
		mugui_lcd_puts(itoa(accADC[PITCH],pBuffer,10),(const unsigned char*)Verdana8,80,23);
    260c:	27 e1       	ldi	r18, 0x17	; 23
    260e:	30 e0       	ldi	r19, 0x00	; 0
    2610:	40 e5       	ldi	r20, 0x50	; 80
    2612:	50 e0       	ldi	r21, 0x00	; 0
    2614:	67 ef       	ldi	r22, 0xF7	; 247
    2616:	79 e0       	ldi	r23, 0x09	; 9
    2618:	0e 94 22 38 	call	0x7044	; 0x7044 <mugui_lcd_puts>
    261c:	4a e0       	ldi	r20, 0x0A	; 10
    261e:	67 e5       	ldi	r22, 0x57	; 87
    2620:	75 e0       	ldi	r23, 0x05	; 5
    2622:	80 91 36 05 	lds	r24, 0x0536
    2626:	90 91 37 05 	lds	r25, 0x0537
    262a:	0e 94 04 42 	call	0x8408	; 0x8408 <__itoa_ncheck>
		mugui_lcd_puts(itoa(accADC[YAW],pBuffer,10),(const unsigned char*)Verdana8,80,33);
    262e:	21 e2       	ldi	r18, 0x21	; 33
    2630:	30 e0       	ldi	r19, 0x00	; 0
    2632:	40 e5       	ldi	r20, 0x50	; 80
    2634:	50 e0       	ldi	r21, 0x00	; 0
    2636:	67 ef       	ldi	r22, 0xF7	; 247
    2638:	79 e0       	ldi	r23, 0x09	; 9
    263a:	0e 94 22 38 	call	0x7044	; 0x7044 <mugui_lcd_puts>

		// Print bottom markers
		LCD_Display_Text(12, (const unsigned char*)Wingdings, 0, 57); 	// Left
    263e:	29 e3       	ldi	r18, 0x39	; 57
    2640:	30 e0       	ldi	r19, 0x00	; 0
    2642:	40 e0       	ldi	r20, 0x00	; 0
    2644:	50 e0       	ldi	r21, 0x00	; 0
    2646:	6f ed       	ldi	r22, 0xDF	; 223
    2648:	70 e0       	ldi	r23, 0x00	; 0
    264a:	8c e0       	ldi	r24, 0x0C	; 12
    264c:	90 e0       	ldi	r25, 0x00	; 0
    264e:	0e 94 a0 1d 	call	0x3b40	; 0x3b40 <LCD_Display_Text>
		LCD_Display_Text(60, (const unsigned char*)Verdana8, 108, 55); 	// Calibrate
    2652:	27 e3       	ldi	r18, 0x37	; 55
    2654:	30 e0       	ldi	r19, 0x00	; 0
    2656:	4c e6       	ldi	r20, 0x6C	; 108
    2658:	50 e0       	ldi	r21, 0x00	; 0
    265a:	67 ef       	ldi	r22, 0xF7	; 247
    265c:	79 e0       	ldi	r23, 0x09	; 9
    265e:	8c e3       	ldi	r24, 0x3C	; 60
    2660:	90 e0       	ldi	r25, 0x00	; 0
    2662:	0e 94 a0 1d 	call	0x3b40	; 0x3b40 <LCD_Display_Text>
		LCD_Display_Text(25, (const unsigned char*)Verdana8, 75, 55); 	// Inverted Calibrate		
    2666:	27 e3       	ldi	r18, 0x37	; 55
    2668:	30 e0       	ldi	r19, 0x00	; 0
    266a:	4b e4       	ldi	r20, 0x4B	; 75
    266c:	50 e0       	ldi	r21, 0x00	; 0
    266e:	67 ef       	ldi	r22, 0xF7	; 247
    2670:	79 e0       	ldi	r23, 0x09	; 9
    2672:	89 e1       	ldi	r24, 0x19	; 25
    2674:	90 e0       	ldi	r25, 0x00	; 0
    2676:	0e 94 a0 1d 	call	0x3b40	; 0x3b40 <LCD_Display_Text>

		// Update buffer
		write_buffer(buffer,1);
    267a:	61 e0       	ldi	r22, 0x01	; 1
    267c:	80 e0       	ldi	r24, 0x00	; 0
    267e:	91 e0       	ldi	r25, 0x01	; 1
    2680:	0e 94 c9 1b 	call	0x3792	; 0x3792 <write_buffer>
		clear_buffer(buffer);
    2684:	80 e0       	ldi	r24, 0x00	; 0
    2686:	91 e0       	ldi	r25, 0x01	; 1
    2688:	0e 94 f7 1b 	call	0x37ee	; 0x37ee <clear_buffer>
    268c:	10 cf       	rjmp	.-480    	; 0x24ae <Display_sensors>
	}
}
    268e:	08 95       	ret

00002690 <Display_status>:
//************************************************************
// Code
//************************************************************

void Display_status(void)
{
    2690:	a4 e0       	ldi	r26, 0x04	; 4
    2692:	b0 e0       	ldi	r27, 0x00	; 0
    2694:	ee e4       	ldi	r30, 0x4E	; 78
    2696:	f3 e1       	ldi	r31, 0x13	; 19
    2698:	0c 94 cd 41 	jmp	0x839a	; 0x839a <__prologue_saves__+0x12>
	int16_t temp;
	uint16_t vbat_temp; 
	int8_t	pos1, pos2, pos3;
	mugui_size16_t size;

	clear_buffer(buffer);
    269c:	80 e0       	ldi	r24, 0x00	; 0
    269e:	91 e0       	ldi	r25, 0x01	; 1
    26a0:	0e 94 f7 1b 	call	0x37ee	; 0x37ee <clear_buffer>

	// Display text
	LCD_Display_Text(3,(const unsigned char*)Verdana8,0,0); 	// Version text
    26a4:	20 e0       	ldi	r18, 0x00	; 0
    26a6:	30 e0       	ldi	r19, 0x00	; 0
    26a8:	40 e0       	ldi	r20, 0x00	; 0
    26aa:	50 e0       	ldi	r21, 0x00	; 0
    26ac:	67 ef       	ldi	r22, 0xF7	; 247
    26ae:	79 e0       	ldi	r23, 0x09	; 9
    26b0:	83 e0       	ldi	r24, 0x03	; 3
    26b2:	90 e0       	ldi	r25, 0x00	; 0
    26b4:	0e 94 a0 1d 	call	0x3b40	; 0x3b40 <LCD_Display_Text>
	LCD_Display_Text(5,(const unsigned char*)Verdana8,0,16); 	// RX sync
    26b8:	20 e1       	ldi	r18, 0x10	; 16
    26ba:	30 e0       	ldi	r19, 0x00	; 0
    26bc:	40 e0       	ldi	r20, 0x00	; 0
    26be:	50 e0       	ldi	r21, 0x00	; 0
    26c0:	67 ef       	ldi	r22, 0xF7	; 247
    26c2:	79 e0       	ldi	r23, 0x09	; 9
    26c4:	85 e0       	ldi	r24, 0x05	; 5
    26c6:	90 e0       	ldi	r25, 0x00	; 0
    26c8:	0e 94 a0 1d 	call	0x3b40	; 0x3b40 <LCD_Display_Text>
	LCD_Display_Text(6,(const unsigned char*)Verdana8,0,27); 	// Profile
    26cc:	2b e1       	ldi	r18, 0x1B	; 27
    26ce:	30 e0       	ldi	r19, 0x00	; 0
    26d0:	40 e0       	ldi	r20, 0x00	; 0
    26d2:	50 e0       	ldi	r21, 0x00	; 0
    26d4:	67 ef       	ldi	r22, 0xF7	; 247
    26d6:	79 e0       	ldi	r23, 0x09	; 9
    26d8:	86 e0       	ldi	r24, 0x06	; 6
    26da:	90 e0       	ldi	r25, 0x00	; 0
    26dc:	0e 94 a0 1d 	call	0x3b40	; 0x3b40 <LCD_Display_Text>
	LCD_Display_Text(23,(const unsigned char*)Verdana8,88,27); 	// Pos
    26e0:	2b e1       	ldi	r18, 0x1B	; 27
    26e2:	30 e0       	ldi	r19, 0x00	; 0
    26e4:	48 e5       	ldi	r20, 0x58	; 88
    26e6:	50 e0       	ldi	r21, 0x00	; 0
    26e8:	67 ef       	ldi	r22, 0xF7	; 247
    26ea:	79 e0       	ldi	r23, 0x09	; 9
    26ec:	87 e1       	ldi	r24, 0x17	; 23
    26ee:	90 e0       	ldi	r25, 0x00	; 0
    26f0:	0e 94 a0 1d 	call	0x3b40	; 0x3b40 <LCD_Display_Text>
	LCD_Display_Text(133,(const unsigned char*)Verdana8,0,38); 	// Battery
    26f4:	26 e2       	ldi	r18, 0x26	; 38
    26f6:	30 e0       	ldi	r19, 0x00	; 0
    26f8:	40 e0       	ldi	r20, 0x00	; 0
    26fa:	50 e0       	ldi	r21, 0x00	; 0
    26fc:	67 ef       	ldi	r22, 0xF7	; 247
    26fe:	79 e0       	ldi	r23, 0x09	; 9
    2700:	85 e8       	ldi	r24, 0x85	; 133
    2702:	90 e0       	ldi	r25, 0x00	; 0
    2704:	0e 94 a0 1d 	call	0x3b40	; 0x3b40 <LCD_Display_Text>
	
	// Display menu and markers
	LCD_Display_Text(9, (const unsigned char*)Wingdings, 0, 59);// Down
    2708:	2b e3       	ldi	r18, 0x3B	; 59
    270a:	30 e0       	ldi	r19, 0x00	; 0
    270c:	40 e0       	ldi	r20, 0x00	; 0
    270e:	50 e0       	ldi	r21, 0x00	; 0
    2710:	6f ed       	ldi	r22, 0xDF	; 223
    2712:	70 e0       	ldi	r23, 0x00	; 0
    2714:	89 e0       	ldi	r24, 0x09	; 9
    2716:	90 e0       	ldi	r25, 0x00	; 0
    2718:	0e 94 a0 1d 	call	0x3b40	; 0x3b40 <LCD_Display_Text>
	LCD_Display_Text(14,(const unsigned char*)Verdana8,10,55);	// Menu
    271c:	27 e3       	ldi	r18, 0x37	; 55
    271e:	30 e0       	ldi	r19, 0x00	; 0
    2720:	4a e0       	ldi	r20, 0x0A	; 10
    2722:	50 e0       	ldi	r21, 0x00	; 0
    2724:	67 ef       	ldi	r22, 0xF7	; 247
    2726:	79 e0       	ldi	r23, 0x09	; 9
    2728:	8e e0       	ldi	r24, 0x0E	; 14
    272a:	90 e0       	ldi	r25, 0x00	; 0
    272c:	0e 94 a0 1d 	call	0x3b40	; 0x3b40 <LCD_Display_Text>

	// Display values
	print_menu_text(0, 1, (62 + Config.RxMode), 45, 16); // Rx mode
    2730:	40 91 d2 05 	lds	r20, 0x05D2
    2734:	42 5c       	subi	r20, 0xC2	; 194
    2736:	00 e1       	ldi	r16, 0x10	; 16
    2738:	2d e2       	ldi	r18, 0x2D	; 45
    273a:	61 e0       	ldi	r22, 0x01	; 1
    273c:	80 e0       	ldi	r24, 0x00	; 0
    273e:	90 e0       	ldi	r25, 0x00	; 0
    2740:	0e 94 bf 29 	call	0x537e	; 0x537e <print_menu_text>
    2744:	4a e0       	ldi	r20, 0x0A	; 10
    2746:	67 e5       	ldi	r22, 0x57	; 87
    2748:	75 e0       	ldi	r23, 0x05	; 5
    274a:	80 91 18 05 	lds	r24, 0x0518
    274e:	90 91 19 05 	lds	r25, 0x0519
    2752:	0e 94 04 42 	call	0x8408	; 0x8408 <__itoa_ncheck>
	mugui_lcd_puts(itoa(transition,pBuffer,10),(const unsigned char*)Verdana8,110,27); // Raw transition value
    2756:	2b e1       	ldi	r18, 0x1B	; 27
    2758:	30 e0       	ldi	r19, 0x00	; 0
    275a:	4e e6       	ldi	r20, 0x6E	; 110
    275c:	50 e0       	ldi	r21, 0x00	; 0
    275e:	67 ef       	ldi	r22, 0xF7	; 247
    2760:	79 e0       	ldi	r23, 0x09	; 9
    2762:	0e 94 22 38 	call	0x7044	; 0x7044 <mugui_lcd_puts>

	if (Config.RxMode == PWM)
    2766:	80 91 d2 05 	lds	r24, 0x05D2
    276a:	81 30       	cpi	r24, 0x01	; 1
    276c:	d9 f4       	brne	.+54     	; 0x27a4 <Display_status+0x114>
	{
		LCD_Display_Text(24,(const unsigned char*)Verdana8,77,38); // Interrupt counter text 
    276e:	26 e2       	ldi	r18, 0x26	; 38
    2770:	30 e0       	ldi	r19, 0x00	; 0
    2772:	4d e4       	ldi	r20, 0x4D	; 77
    2774:	50 e0       	ldi	r21, 0x00	; 0
    2776:	67 ef       	ldi	r22, 0xF7	; 247
    2778:	79 e0       	ldi	r23, 0x09	; 9
    277a:	88 e1       	ldi	r24, 0x18	; 24
    277c:	90 e0       	ldi	r25, 0x00	; 0
    277e:	0e 94 a0 1d 	call	0x3b40	; 0x3b40 <LCD_Display_Text>
    2782:	4a e0       	ldi	r20, 0x0A	; 10
    2784:	67 e5       	ldi	r22, 0x57	; 87
    2786:	75 e0       	ldi	r23, 0x05	; 5
    2788:	80 91 12 05 	lds	r24, 0x0512
    278c:	90 91 13 05 	lds	r25, 0x0513
    2790:	0e 94 04 42 	call	0x8408	; 0x8408 <__itoa_ncheck>
		mugui_lcd_puts(itoa(InterruptCount,pBuffer,10),(const unsigned char*)Verdana8,110,38); // Interrupt counter
    2794:	26 e2       	ldi	r18, 0x26	; 38
    2796:	30 e0       	ldi	r19, 0x00	; 0
    2798:	4e e6       	ldi	r20, 0x6E	; 110
    279a:	50 e0       	ldi	r21, 0x00	; 0
    279c:	67 ef       	ldi	r22, 0xF7	; 247
    279e:	79 e0       	ldi	r23, 0x09	; 9
    27a0:	0e 94 22 38 	call	0x7044	; 0x7044 <mugui_lcd_puts>
	}

	// Display transition point
	if (transition <= 0)
    27a4:	80 91 18 05 	lds	r24, 0x0518
    27a8:	90 91 19 05 	lds	r25, 0x0519
    27ac:	18 16       	cp	r1, r24
    27ae:	19 06       	cpc	r1, r25
    27b0:	4c f0       	brlt	.+18     	; 0x27c4 <Display_status+0x134>
	{
		LCD_Display_Text(48,(const unsigned char*)Verdana8,45,27);
    27b2:	2b e1       	ldi	r18, 0x1B	; 27
    27b4:	30 e0       	ldi	r19, 0x00	; 0
    27b6:	4d e2       	ldi	r20, 0x2D	; 45
    27b8:	50 e0       	ldi	r21, 0x00	; 0
    27ba:	67 ef       	ldi	r22, 0xF7	; 247
    27bc:	79 e0       	ldi	r23, 0x09	; 9
    27be:	80 e3       	ldi	r24, 0x30	; 48
    27c0:	90 e0       	ldi	r25, 0x00	; 0
    27c2:	31 c0       	rjmp	.+98     	; 0x2826 <Display_status+0x196>
	}
	else if (transition >= 100)
    27c4:	84 36       	cpi	r24, 0x64	; 100
    27c6:	91 05       	cpc	r25, r1
    27c8:	4c f0       	brlt	.+18     	; 0x27dc <Display_status+0x14c>
	{
		LCD_Display_Text(50,(const unsigned char*)Verdana8,45,27);
    27ca:	2b e1       	ldi	r18, 0x1B	; 27
    27cc:	30 e0       	ldi	r19, 0x00	; 0
    27ce:	4d e2       	ldi	r20, 0x2D	; 45
    27d0:	50 e0       	ldi	r21, 0x00	; 0
    27d2:	67 ef       	ldi	r22, 0xF7	; 247
    27d4:	79 e0       	ldi	r23, 0x09	; 9
    27d6:	82 e3       	ldi	r24, 0x32	; 50
    27d8:	90 e0       	ldi	r25, 0x00	; 0
    27da:	25 c0       	rjmp	.+74     	; 0x2826 <Display_status+0x196>
	}
	else if (transition == Config.Transition_P1n)
    27dc:	20 91 da 05 	lds	r18, 0x05DA
    27e0:	33 27       	eor	r19, r19
    27e2:	27 fd       	sbrc	r18, 7
    27e4:	30 95       	com	r19
    27e6:	82 17       	cp	r24, r18
    27e8:	93 07       	cpc	r25, r19
    27ea:	49 f4       	brne	.+18     	; 0x27fe <Display_status+0x16e>
	{
		LCD_Display_Text(49,(const unsigned char*)Verdana8,45,27);
    27ec:	2b e1       	ldi	r18, 0x1B	; 27
    27ee:	30 e0       	ldi	r19, 0x00	; 0
    27f0:	4d e2       	ldi	r20, 0x2D	; 45
    27f2:	50 e0       	ldi	r21, 0x00	; 0
    27f4:	67 ef       	ldi	r22, 0xF7	; 247
    27f6:	79 e0       	ldi	r23, 0x09	; 9
    27f8:	81 e3       	ldi	r24, 0x31	; 49
    27fa:	90 e0       	ldi	r25, 0x00	; 0
    27fc:	14 c0       	rjmp	.+40     	; 0x2826 <Display_status+0x196>
	}
	else if (transition < Config.Transition_P1n)
    27fe:	82 17       	cp	r24, r18
    2800:	93 07       	cpc	r25, r19
    2802:	4c f4       	brge	.+18     	; 0x2816 <Display_status+0x186>
	{
		LCD_Display_Text(51,(const unsigned char*)Verdana8,45,27);
    2804:	2b e1       	ldi	r18, 0x1B	; 27
    2806:	30 e0       	ldi	r19, 0x00	; 0
    2808:	4d e2       	ldi	r20, 0x2D	; 45
    280a:	50 e0       	ldi	r21, 0x00	; 0
    280c:	67 ef       	ldi	r22, 0xF7	; 247
    280e:	79 e0       	ldi	r23, 0x09	; 9
    2810:	83 e3       	ldi	r24, 0x33	; 51
    2812:	90 e0       	ldi	r25, 0x00	; 0
    2814:	08 c0       	rjmp	.+16     	; 0x2826 <Display_status+0x196>
	}
	else
	{
		LCD_Display_Text(52,(const unsigned char*)Verdana8,45,27);
    2816:	2b e1       	ldi	r18, 0x1B	; 27
    2818:	30 e0       	ldi	r19, 0x00	; 0
    281a:	4d e2       	ldi	r20, 0x2D	; 45
    281c:	50 e0       	ldi	r21, 0x00	; 0
    281e:	67 ef       	ldi	r22, 0xF7	; 247
    2820:	79 e0       	ldi	r23, 0x09	; 9
    2822:	84 e3       	ldi	r24, 0x34	; 52
    2824:	90 e0       	ldi	r25, 0x00	; 0
    2826:	0e 94 a0 1d 	call	0x3b40	; 0x3b40 <LCD_Display_Text>

	// Display voltage
	uint8_t x_loc = 45;		// X location of voltage display
	uint8_t y_loc = 38;		// Y location of voltage display

	vbat_temp = GetVbat();
    282a:	0e 94 fa 3e 	call	0x7df4	; 0x7df4 <GetVbat>
    282e:	6c 01       	movw	r12, r24
	temp = vbat_temp/100;	// Display whole decimal part first
    2830:	64 e6       	ldi	r22, 0x64	; 100
    2832:	70 e0       	ldi	r23, 0x00	; 0
    2834:	0e 94 24 41 	call	0x8248	; 0x8248 <__udivmodhi4>
    2838:	8b 01       	movw	r16, r22
    283a:	4a e0       	ldi	r20, 0x0A	; 10
    283c:	67 e5       	ldi	r22, 0x57	; 87
    283e:	75 e0       	ldi	r23, 0x05	; 5
    2840:	c8 01       	movw	r24, r16
    2842:	0e 94 04 42 	call	0x8408	; 0x8408 <__itoa_ncheck>
	mugui_text_sizestring(itoa(temp,pBuffer,10), (const unsigned char*)Verdana8, &size);
    2846:	ae 01       	movw	r20, r28
    2848:	4f 5f       	subi	r20, 0xFF	; 255
    284a:	5f 4f       	sbci	r21, 0xFF	; 255
    284c:	67 ef       	ldi	r22, 0xF7	; 247
    284e:	79 e0       	ldi	r23, 0x09	; 9
    2850:	0e 94 0a 37 	call	0x6e14	; 0x6e14 <mugui_text_sizestring>
    2854:	4a e0       	ldi	r20, 0x0A	; 10
    2856:	67 e5       	ldi	r22, 0x57	; 87
    2858:	75 e0       	ldi	r23, 0x05	; 5
    285a:	c8 01       	movw	r24, r16
    285c:	0e 94 04 42 	call	0x8408	; 0x8408 <__itoa_ncheck>
	mugui_lcd_puts(itoa(temp,pBuffer,10),(const unsigned char*)Verdana8,x_loc,y_loc);
    2860:	26 e2       	ldi	r18, 0x26	; 38
    2862:	30 e0       	ldi	r19, 0x00	; 0
    2864:	4d e2       	ldi	r20, 0x2D	; 45
    2866:	50 e0       	ldi	r21, 0x00	; 0
    2868:	67 ef       	ldi	r22, 0xF7	; 247
    286a:	79 e0       	ldi	r23, 0x09	; 9
    286c:	0e 94 22 38 	call	0x7044	; 0x7044 <mugui_lcd_puts>
	pos1 = size.x;

	vbat_temp = vbat_temp - (temp * 100); // Now display the parts to the right of the decimal point
    2870:	2c e9       	ldi	r18, 0x9C	; 156
    2872:	20 03       	mulsu	r18, r16
    2874:	70 01       	movw	r14, r0
    2876:	21 9f       	mul	r18, r17
    2878:	f0 0c       	add	r15, r0
    287a:	11 24       	eor	r1, r1
    287c:	ec 0c       	add	r14, r12
    287e:	fd 1c       	adc	r15, r13

	LCD_Display_Text(7,(const unsigned char*)Verdana8,(x_loc + pos1),y_loc);
    2880:	09 81       	ldd	r16, Y+1	; 0x01
    2882:	11 27       	eor	r17, r17
    2884:	07 fd       	sbrc	r16, 7
    2886:	10 95       	com	r17
    2888:	03 5d       	subi	r16, 0xD3	; 211
    288a:	1f 4f       	sbci	r17, 0xFF	; 255
    288c:	26 e2       	ldi	r18, 0x26	; 38
    288e:	30 e0       	ldi	r19, 0x00	; 0
    2890:	a8 01       	movw	r20, r16
    2892:	67 ef       	ldi	r22, 0xF7	; 247
    2894:	79 e0       	ldi	r23, 0x09	; 9
    2896:	87 e0       	ldi	r24, 0x07	; 7
    2898:	90 e0       	ldi	r25, 0x00	; 0
    289a:	0e 94 a0 1d 	call	0x3b40	; 0x3b40 <LCD_Display_Text>
	mugui_text_sizestring(".", (const unsigned char*)Verdana8, &size);
    289e:	ae 01       	movw	r20, r28
    28a0:	4f 5f       	subi	r20, 0xFF	; 255
    28a2:	5f 4f       	sbci	r21, 0xFF	; 255
    28a4:	67 ef       	ldi	r22, 0xF7	; 247
    28a6:	79 e0       	ldi	r23, 0x09	; 9
    28a8:	87 e0       	ldi	r24, 0x07	; 7
    28aa:	95 e0       	ldi	r25, 0x05	; 5
    28ac:	0e 94 0a 37 	call	0x6e14	; 0x6e14 <mugui_text_sizestring>
	pos3 = size.x;
    28b0:	c9 80       	ldd	r12, Y+1	; 0x01
	mugui_text_sizestring("0", (const unsigned char*)Verdana8, &size);
    28b2:	ae 01       	movw	r20, r28
    28b4:	4f 5f       	subi	r20, 0xFF	; 255
    28b6:	5f 4f       	sbci	r21, 0xFF	; 255
    28b8:	67 ef       	ldi	r22, 0xF7	; 247
    28ba:	79 e0       	ldi	r23, 0x09	; 9
    28bc:	89 e0       	ldi	r24, 0x09	; 9
    28be:	95 e0       	ldi	r25, 0x05	; 5
    28c0:	0e 94 0a 37 	call	0x6e14	; 0x6e14 <mugui_text_sizestring>
	pos2 = size.x;
    28c4:	b9 80       	ldd	r11, Y+1	; 0x01
    28c6:	dd 24       	eor	r13, r13
    28c8:	c7 fc       	sbrc	r12, 7
    28ca:	d0 94       	com	r13

	if (vbat_temp >= 10)
    28cc:	8a e0       	ldi	r24, 0x0A	; 10
    28ce:	e8 16       	cp	r14, r24
    28d0:	f1 04       	cpc	r15, r1
    28d2:	40 f0       	brcs	.+16     	; 0x28e4 <Display_status+0x254>
    28d4:	4a e0       	ldi	r20, 0x0A	; 10
    28d6:	67 e5       	ldi	r22, 0x57	; 87
    28d8:	75 e0       	ldi	r23, 0x05	; 5
    28da:	c7 01       	movw	r24, r14
    28dc:	0e 94 04 42 	call	0x8408	; 0x8408 <__itoa_ncheck>
	{
		mugui_lcd_puts(itoa(vbat_temp,pBuffer,10),(const unsigned char*)Verdana8,(x_loc + pos1 + pos3),y_loc);
    28e0:	a8 01       	movw	r20, r16
    28e2:	16 c0       	rjmp	.+44     	; 0x2910 <Display_status+0x280>
	}
	else
	{
		LCD_Display_Text(8,(const unsigned char*)Verdana8,(x_loc + pos1 + pos3),y_loc);
    28e4:	a8 01       	movw	r20, r16
    28e6:	4c 0d       	add	r20, r12
    28e8:	5d 1d       	adc	r21, r13
    28ea:	26 e2       	ldi	r18, 0x26	; 38
    28ec:	30 e0       	ldi	r19, 0x00	; 0
    28ee:	67 ef       	ldi	r22, 0xF7	; 247
    28f0:	79 e0       	ldi	r23, 0x09	; 9
    28f2:	88 e0       	ldi	r24, 0x08	; 8
    28f4:	90 e0       	ldi	r25, 0x00	; 0
    28f6:	0e 94 a0 1d 	call	0x3b40	; 0x3b40 <LCD_Display_Text>
    28fa:	4a e0       	ldi	r20, 0x0A	; 10
    28fc:	67 e5       	ldi	r22, 0x57	; 87
    28fe:	75 e0       	ldi	r23, 0x05	; 5
    2900:	c7 01       	movw	r24, r14
    2902:	0e 94 04 42 	call	0x8408	; 0x8408 <__itoa_ncheck>
		mugui_lcd_puts(itoa(vbat_temp,pBuffer,10),(const unsigned char*)Verdana8,(x_loc + pos1 + pos2 + pos3),y_loc);
    2906:	a8 01       	movw	r20, r16
    2908:	4b 0d       	add	r20, r11
    290a:	51 1d       	adc	r21, r1
    290c:	b7 fc       	sbrc	r11, 7
    290e:	5a 95       	dec	r21
    2910:	4c 0d       	add	r20, r12
    2912:	5d 1d       	adc	r21, r13
    2914:	26 e2       	ldi	r18, 0x26	; 38
    2916:	30 e0       	ldi	r19, 0x00	; 0
    2918:	67 ef       	ldi	r22, 0xF7	; 247
    291a:	79 e0       	ldi	r23, 0x09	; 9
    291c:	0e 94 22 38 	call	0x7044	; 0x7044 <mugui_lcd_puts>
	}

	// Display error messages
	if (General_error != 0)
    2920:	80 91 17 05 	lds	r24, 0x0517
    2924:	88 23       	and	r24, r24
    2926:	09 f4       	brne	.+2      	; 0x292a <Display_status+0x29a>
    2928:	5f c0       	rjmp	.+190    	; 0x29e8 <Display_status+0x358>
	{
		// Create message box
		fillrect(buffer, 14,8, 96, 48, 0);	// White box
    292a:	e1 2c       	mov	r14, r1
    292c:	00 e3       	ldi	r16, 0x30	; 48
    292e:	20 e6       	ldi	r18, 0x60	; 96
    2930:	48 e0       	ldi	r20, 0x08	; 8
    2932:	6e e0       	ldi	r22, 0x0E	; 14
    2934:	80 e0       	ldi	r24, 0x00	; 0
    2936:	91 e0       	ldi	r25, 0x01	; 1
    2938:	0e 94 b5 1c 	call	0x396a	; 0x396a <fillrect>
		drawrect(buffer, 14,8, 96, 48, 1); 	// Outline
    293c:	ee 24       	eor	r14, r14
    293e:	e3 94       	inc	r14
    2940:	20 e6       	ldi	r18, 0x60	; 96
    2942:	48 e0       	ldi	r20, 0x08	; 8
    2944:	6e e0       	ldi	r22, 0x0E	; 14
    2946:	80 e0       	ldi	r24, 0x00	; 0
    2948:	91 e0       	ldi	r25, 0x01	; 1
    294a:	0e 94 df 1c 	call	0x39be	; 0x39be <drawrect>

		// Prioritise error from top to bottom
		if((General_error & (1 << LVA_ALARM)) != 0)
    294e:	80 91 17 05 	lds	r24, 0x0517
    2952:	83 ff       	sbrs	r24, 3
    2954:	13 c0       	rjmp	.+38     	; 0x297c <Display_status+0x2ec>
		{
			LCD_Display_Text(134,(const unsigned char*)Verdana14,33,14);	// Battery
    2956:	2e e0       	ldi	r18, 0x0E	; 14
    2958:	30 e0       	ldi	r19, 0x00	; 0
    295a:	41 e2       	ldi	r20, 0x21	; 33
    295c:	50 e0       	ldi	r21, 0x00	; 0
    295e:	69 e4       	ldi	r22, 0x49	; 73
    2960:	71 e0       	ldi	r23, 0x01	; 1
    2962:	86 e8       	ldi	r24, 0x86	; 134
    2964:	90 e0       	ldi	r25, 0x00	; 0
    2966:	0e 94 a0 1d 	call	0x3b40	; 0x3b40 <LCD_Display_Text>
			LCD_Display_Text(118,(const unsigned char*)Verdana14,46,34);	// Low
    296a:	22 e2       	ldi	r18, 0x22	; 34
    296c:	30 e0       	ldi	r19, 0x00	; 0
    296e:	4e e2       	ldi	r20, 0x2E	; 46
    2970:	50 e0       	ldi	r21, 0x00	; 0
    2972:	69 e4       	ldi	r22, 0x49	; 73
    2974:	71 e0       	ldi	r23, 0x01	; 1
    2976:	86 e7       	ldi	r24, 0x76	; 118
    2978:	90 e0       	ldi	r25, 0x00	; 0
    297a:	34 c0       	rjmp	.+104    	; 0x29e4 <Display_status+0x354>
		}
		else if((General_error & (1 << NO_SIGNAL)) != 0)
    297c:	81 ff       	sbrs	r24, 1
    297e:	13 c0       	rjmp	.+38     	; 0x29a6 <Display_status+0x316>
		{
			LCD_Display_Text(75,(const unsigned char*)Verdana14,51,13); 	// No
    2980:	2d e0       	ldi	r18, 0x0D	; 13
    2982:	30 e0       	ldi	r19, 0x00	; 0
    2984:	43 e3       	ldi	r20, 0x33	; 51
    2986:	50 e0       	ldi	r21, 0x00	; 0
    2988:	69 e4       	ldi	r22, 0x49	; 73
    298a:	71 e0       	ldi	r23, 0x01	; 1
    298c:	8b e4       	ldi	r24, 0x4B	; 75
    298e:	90 e0       	ldi	r25, 0x00	; 0
    2990:	0e 94 a0 1d 	call	0x3b40	; 0x3b40 <LCD_Display_Text>
			LCD_Display_Text(76,(const unsigned char*)Verdana14,39,33);		// Signal
    2994:	21 e2       	ldi	r18, 0x21	; 33
    2996:	30 e0       	ldi	r19, 0x00	; 0
    2998:	47 e2       	ldi	r20, 0x27	; 39
    299a:	50 e0       	ldi	r21, 0x00	; 0
    299c:	69 e4       	ldi	r22, 0x49	; 73
    299e:	71 e0       	ldi	r23, 0x01	; 1
    29a0:	8c e4       	ldi	r24, 0x4C	; 76
    29a2:	90 e0       	ldi	r25, 0x00	; 0
    29a4:	1f c0       	rjmp	.+62     	; 0x29e4 <Display_status+0x354>
		}
		else if((General_error & (1 << THROTTLE_HIGH)) != 0)
    29a6:	80 ff       	sbrs	r24, 0
    29a8:	13 c0       	rjmp	.+38     	; 0x29d0 <Display_status+0x340>
		{
			LCD_Display_Text(105,(const unsigned char*)Verdana14,28,14);	// Throttle
    29aa:	2e e0       	ldi	r18, 0x0E	; 14
    29ac:	30 e0       	ldi	r19, 0x00	; 0
    29ae:	4c e1       	ldi	r20, 0x1C	; 28
    29b0:	50 e0       	ldi	r21, 0x00	; 0
    29b2:	69 e4       	ldi	r22, 0x49	; 73
    29b4:	71 e0       	ldi	r23, 0x01	; 1
    29b6:	89 e6       	ldi	r24, 0x69	; 105
    29b8:	90 e0       	ldi	r25, 0x00	; 0
    29ba:	0e 94 a0 1d 	call	0x3b40	; 0x3b40 <LCD_Display_Text>
			LCD_Display_Text(55,(const unsigned char*)Verdana14,46,34);		// High
    29be:	22 e2       	ldi	r18, 0x22	; 34
    29c0:	30 e0       	ldi	r19, 0x00	; 0
    29c2:	4e e2       	ldi	r20, 0x2E	; 46
    29c4:	50 e0       	ldi	r21, 0x00	; 0
    29c6:	69 e4       	ldi	r22, 0x49	; 73
    29c8:	71 e0       	ldi	r23, 0x01	; 1
    29ca:	87 e3       	ldi	r24, 0x37	; 55
    29cc:	90 e0       	ldi	r25, 0x00	; 0
    29ce:	0a c0       	rjmp	.+20     	; 0x29e4 <Display_status+0x354>
		}
		else if((General_error & (1 << DISARMED)) != 0)
    29d0:	82 ff       	sbrs	r24, 2
    29d2:	0a c0       	rjmp	.+20     	; 0x29e8 <Display_status+0x358>
		{
			LCD_Display_Text(18,(const unsigned char*)Verdana14,25,24); 	// Disarmed
    29d4:	28 e1       	ldi	r18, 0x18	; 24
    29d6:	30 e0       	ldi	r19, 0x00	; 0
    29d8:	49 e1       	ldi	r20, 0x19	; 25
    29da:	50 e0       	ldi	r21, 0x00	; 0
    29dc:	69 e4       	ldi	r22, 0x49	; 73
    29de:	71 e0       	ldi	r23, 0x01	; 1
    29e0:	82 e1       	ldi	r24, 0x12	; 18
    29e2:	90 e0       	ldi	r25, 0x00	; 0
    29e4:	0e 94 a0 1d 	call	0x3b40	; 0x3b40 <LCD_Display_Text>
		}
	}

	// Write buffer to complete
	write_buffer(buffer,1);
    29e8:	61 e0       	ldi	r22, 0x01	; 1
    29ea:	80 e0       	ldi	r24, 0x00	; 0
    29ec:	91 e0       	ldi	r25, 0x01	; 1
    29ee:	0e 94 c9 1b 	call	0x3792	; 0x3792 <write_buffer>
	clear_buffer(buffer);
    29f2:	80 e0       	ldi	r24, 0x00	; 0
    29f4:	91 e0       	ldi	r25, 0x01	; 1
    29f6:	0e 94 f7 1b 	call	0x37ee	; 0x37ee <clear_buffer>
}
    29fa:	24 96       	adiw	r28, 0x04	; 4
    29fc:	e9 e0       	ldi	r30, 0x09	; 9
    29fe:	0c 94 e9 41 	jmp	0x83d2	; 0x83d2 <__epilogue_restores__+0x12>

00002a02 <Display_sticks>:
//************************************************************
// Code
//************************************************************

void Display_sticks(void)
{
    2a02:	a0 e0       	ldi	r26, 0x00	; 0
    2a04:	b0 e0       	ldi	r27, 0x00	; 0
    2a06:	e7 e0       	ldi	r30, 0x07	; 7
    2a08:	f5 e1       	ldi	r31, 0x15	; 21
    2a0a:	0c 94 cc 41 	jmp	0x8398	; 0x8398 <__prologue_saves__+0x10>
	int8_t	temp_aileron, temp_elevator, temp_rudder;
	bool	CalibrateDone = false;
	bool	CalibrateStarted = false;

	// Save original settings in case user aborts
	temp_aileron = Config.AileronPol;
    2a0e:	c0 90 d6 05 	lds	r12, 0x05D6
	temp_elevator = Config.ElevatorPol;
    2a12:	d0 90 d7 05 	lds	r13, 0x05D7
	temp_rudder = Config.RudderPol;
    2a16:	f0 90 d8 05 	lds	r15, 0x05D8

	// Reset to defaults - not ideal, but it works
	Config.AileronPol = NORMAL;
    2a1a:	10 92 d6 05 	sts	0x05D6, r1
	Config.ElevatorPol =  NORMAL;
    2a1e:	10 92 d7 05 	sts	0x05D7, r1
	Config.RudderPol = NORMAL;
    2a22:	10 92 d8 05 	sts	0x05D8, r1
{
	int8_t	i;
	int8_t	offset;
	int8_t	temp_aileron, temp_elevator, temp_rudder;
	bool	CalibrateDone = false;
	bool	CalibrateStarted = false;
    2a26:	10 e0       	ldi	r17, 0x00	; 0
void Display_sticks(void)
{
	int8_t	i;
	int8_t	offset;
	int8_t	temp_aileron, temp_elevator, temp_rudder;
	bool	CalibrateDone = false;
    2a28:	d0 e0       	ldi	r29, 0x00	; 0
	Config.AileronPol = NORMAL;
	Config.ElevatorPol =  NORMAL;
	Config.RudderPol = NORMAL;

	// Until exit button pressed or complete
	while((BUTTON1 != 0) && (!CalibrateDone))
    2a2a:	1f 9b       	sbis	0x03, 7	; 3
    2a2c:	9b c0       	rjmp	.+310    	; 0x2b64 <Display_sticks+0x162>
    2a2e:	d1 11       	cpse	r29, r1
    2a30:	9b c0       	rjmp	.+310    	; 0x2b68 <Display_sticks+0x166>
	{
		// Draw first stick on the left
		offset = 0;

		// Clear screen buffer
		clear_buffer(buffer);
    2a32:	80 e0       	ldi	r24, 0x00	; 0
    2a34:	91 e0       	ldi	r25, 0x01	; 1
    2a36:	0e 94 f7 1b 	call	0x37ee	; 0x37ee <clear_buffer>
    2a3a:	92 e0       	ldi	r25, 0x02	; 2
    2a3c:	b9 2e       	mov	r11, r25

	// Until exit button pressed or complete
	while((BUTTON1 != 0) && (!CalibrateDone))
	{
		// Draw first stick on the left
		offset = 0;
    2a3e:	c0 e0       	ldi	r28, 0x00	; 0
		clear_buffer(buffer);

		// Draw graphic
		for (i = 0; i < 2; i++)
		{
			drawrect(buffer, 17 + offset, 0, 40, 40, 1);			// Box
    2a40:	61 e1       	ldi	r22, 0x11	; 17
    2a42:	6c 0f       	add	r22, r28
    2a44:	ee 24       	eor	r14, r14
    2a46:	e3 94       	inc	r14
    2a48:	08 e2       	ldi	r16, 0x28	; 40
    2a4a:	28 e2       	ldi	r18, 0x28	; 40
    2a4c:	40 e0       	ldi	r20, 0x00	; 0
    2a4e:	80 e0       	ldi	r24, 0x00	; 0
    2a50:	91 e0       	ldi	r25, 0x01	; 1
    2a52:	0e 94 df 1c 	call	0x39be	; 0x39be <drawrect>
			drawline(buffer, 38 + offset,20, 48 + offset,  3, 1); 	// Line 1
    2a56:	86 e2       	ldi	r24, 0x26	; 38
    2a58:	a8 2e       	mov	r10, r24
    2a5a:	ac 0e       	add	r10, r28
    2a5c:	20 e3       	ldi	r18, 0x30	; 48
    2a5e:	2c 0f       	add	r18, r28
    2a60:	03 e0       	ldi	r16, 0x03	; 3
    2a62:	44 e1       	ldi	r20, 0x14	; 20
    2a64:	6a 2d       	mov	r22, r10
    2a66:	80 e0       	ldi	r24, 0x00	; 0
    2a68:	91 e0       	ldi	r25, 0x01	; 1
    2a6a:	0e 94 57 1c 	call	0x38ae	; 0x38ae <drawline>
			drawline(buffer, 41 + offset,21, 56 + offset,  6, 1); 	// Line 2
    2a6e:	28 e3       	ldi	r18, 0x38	; 56
    2a70:	2c 0f       	add	r18, r28
    2a72:	69 e2       	ldi	r22, 0x29	; 41
    2a74:	6c 0f       	add	r22, r28
    2a76:	06 e0       	ldi	r16, 0x06	; 6
    2a78:	45 e1       	ldi	r20, 0x15	; 21
    2a7a:	80 e0       	ldi	r24, 0x00	; 0
    2a7c:	91 e0       	ldi	r25, 0x01	; 1
    2a7e:	0e 94 57 1c 	call	0x38ae	; 0x38ae <drawline>
			fillcircle(buffer, 38 + offset, 21, 2, 1);				// Center
    2a82:	01 e0       	ldi	r16, 0x01	; 1
    2a84:	22 e0       	ldi	r18, 0x02	; 2
    2a86:	45 e1       	ldi	r20, 0x15	; 21
    2a88:	6a 2d       	mov	r22, r10
    2a8a:	80 e0       	ldi	r24, 0x00	; 0
    2a8c:	91 e0       	ldi	r25, 0x01	; 1
    2a8e:	0e 94 25 1d 	call	0x3a4a	; 0x3a4a <fillcircle>
			fillcircle(buffer, 51 + offset, 5, 4, 1);				// End
    2a92:	63 e3       	ldi	r22, 0x33	; 51
    2a94:	6c 0f       	add	r22, r28
    2a96:	24 e0       	ldi	r18, 0x04	; 4
    2a98:	45 e0       	ldi	r20, 0x05	; 5
    2a9a:	80 e0       	ldi	r24, 0x00	; 0
    2a9c:	91 e0       	ldi	r25, 0x01	; 1
    2a9e:	0e 94 25 1d 	call	0x3a4a	; 0x3a4a <fillcircle>
    2aa2:	ba 94       	dec	r11

		// Clear screen buffer
		clear_buffer(buffer);

		// Draw graphic
		for (i = 0; i < 2; i++)
    2aa4:	11 f0       	breq	.+4      	; 0x2aaa <Display_sticks+0xa8>
			drawline(buffer, 41 + offset,21, 56 + offset,  6, 1); 	// Line 2
			fillcircle(buffer, 38 + offset, 21, 2, 1);				// Center
			fillcircle(buffer, 51 + offset, 5, 4, 1);				// End

			// Draw second stick on the right
			offset = 52;
    2aa6:	c4 e3       	ldi	r28, 0x34	; 52
    2aa8:	cb cf       	rjmp	.-106    	; 0x2a40 <Display_sticks+0x3e>
		}

		// Print bottom text and markers
		LCD_Display_Text(12, (const unsigned char*)Wingdings, 0, 57); 		// Left
    2aaa:	29 e3       	ldi	r18, 0x39	; 57
    2aac:	30 e0       	ldi	r19, 0x00	; 0
    2aae:	40 e0       	ldi	r20, 0x00	; 0
    2ab0:	50 e0       	ldi	r21, 0x00	; 0
    2ab2:	6f ed       	ldi	r22, 0xDF	; 223
    2ab4:	70 e0       	ldi	r23, 0x00	; 0
    2ab6:	8c e0       	ldi	r24, 0x0C	; 12
    2ab8:	90 e0       	ldi	r25, 0x00	; 0
    2aba:	0e 94 a0 1d 	call	0x3b40	; 0x3b40 <LCD_Display_Text>

		// If uncalibrated
		if (!CalibrateDone)
		{
			RxGetChannels();
    2abe:	0e 94 5e 3c 	call	0x78bc	; 0x78bc <RxGetChannels>
			
			// Display warning if sticks not centered or no RC signal while not started calibrating
			if (((RCinputs[AILERON] < -2000) || (RCinputs[AILERON] > 2000)) && !CalibrateStarted)
    2ac2:	80 91 24 08 	lds	r24, 0x0824
    2ac6:	90 91 25 08 	lds	r25, 0x0825
    2aca:	9c 01       	movw	r18, r24
    2acc:	20 53       	subi	r18, 0x30	; 48
    2ace:	38 4f       	sbci	r19, 0xF8	; 248
    2ad0:	21 3a       	cpi	r18, 0xA1	; 161
    2ad2:	3f 40       	sbci	r19, 0x0F	; 15
    2ad4:	68 f0       	brcs	.+26     	; 0x2af0 <Display_sticks+0xee>
    2ad6:	11 11       	cpse	r17, r1
    2ad8:	0b c0       	rjmp	.+22     	; 0x2af0 <Display_sticks+0xee>
			{
				LCD_Display_Text(135,(const unsigned char*)Verdana14,16,43); 	// "No RX signal?"
    2ada:	2b e2       	ldi	r18, 0x2B	; 43
    2adc:	30 e0       	ldi	r19, 0x00	; 0
    2ade:	40 e1       	ldi	r20, 0x10	; 16
    2ae0:	50 e0       	ldi	r21, 0x00	; 0
    2ae2:	69 e4       	ldi	r22, 0x49	; 73
    2ae4:	71 e0       	ldi	r23, 0x01	; 1
    2ae6:	87 e8       	ldi	r24, 0x87	; 135
    2ae8:	90 e0       	ldi	r25, 0x00	; 0
    2aea:	0e 94 a0 1d 	call	0x3b40	; 0x3b40 <LCD_Display_Text>
    2aee:	34 c0       	rjmp	.+104    	; 0x2b58 <Display_sticks+0x156>
			}

			// Sticks have not moved far enough but RC being received
			else if ((RCinputs[AILERON] < 500) && (RCinputs[AILERON] > -500))
    2af0:	9c 01       	movw	r18, r24
    2af2:	2d 50       	subi	r18, 0x0D	; 13
    2af4:	3e 4f       	sbci	r19, 0xFE	; 254
    2af6:	27 3e       	cpi	r18, 0xE7	; 231
    2af8:	33 40       	sbci	r19, 0x03	; 3
    2afa:	60 f4       	brcc	.+24     	; 0x2b14 <Display_sticks+0x112>
			{
				CalibrateStarted = true;
				LCD_Display_Text(136,(const unsigned char*)Verdana14,9,43); 	// "Hold as shown"
    2afc:	2b e2       	ldi	r18, 0x2B	; 43
    2afe:	30 e0       	ldi	r19, 0x00	; 0
    2b00:	49 e0       	ldi	r20, 0x09	; 9
    2b02:	50 e0       	ldi	r21, 0x00	; 0
    2b04:	69 e4       	ldi	r22, 0x49	; 73
    2b06:	71 e0       	ldi	r23, 0x01	; 1
    2b08:	88 e8       	ldi	r24, 0x88	; 136
    2b0a:	90 e0       	ldi	r25, 0x00	; 0
    2b0c:	0e 94 a0 1d 	call	0x3b40	; 0x3b40 <LCD_Display_Text>
			}

			// Sticks have not moved far enough but RC being received
			else if ((RCinputs[AILERON] < 500) && (RCinputs[AILERON] > -500))
			{
				CalibrateStarted = true;
    2b10:	11 e0       	ldi	r17, 0x01	; 1
    2b12:	22 c0       	rjmp	.+68     	; 0x2b58 <Display_sticks+0x156>

			// Sticks should now be in the right position
			// Reverse wrong input channels
			else
			{
				if (RCinputs[AILERON] < 0)
    2b14:	97 ff       	sbrs	r25, 7
    2b16:	03 c0       	rjmp	.+6      	; 0x2b1e <Display_sticks+0x11c>
				{
					Config.AileronPol = REVERSED;
    2b18:	21 e0       	ldi	r18, 0x01	; 1
    2b1a:	20 93 d6 05 	sts	0x05D6, r18
				}

				if (RCinputs[ELEVATOR] < 0)
    2b1e:	40 91 26 08 	lds	r20, 0x0826
    2b22:	50 91 27 08 	lds	r21, 0x0827
    2b26:	57 ff       	sbrs	r21, 7
    2b28:	03 c0       	rjmp	.+6      	; 0x2b30 <Display_sticks+0x12e>
				{
					Config.ElevatorPol = REVERSED;
    2b2a:	21 e0       	ldi	r18, 0x01	; 1
    2b2c:	20 93 d7 05 	sts	0x05D7, r18
				}

				if (RCinputs[RUDDER] < 0)
    2b30:	20 91 28 08 	lds	r18, 0x0828
    2b34:	30 91 29 08 	lds	r19, 0x0829
    2b38:	37 ff       	sbrs	r19, 7
    2b3a:	03 c0       	rjmp	.+6      	; 0x2b42 <Display_sticks+0x140>
				{
					Config.RudderPol = REVERSED;
    2b3c:	61 e0       	ldi	r22, 0x01	; 1
    2b3e:	60 93 d8 05 	sts	0x05D8, r22
				}

				// If all positive - done!
				if ((RCinputs[AILERON] > 0) && (RCinputs[ELEVATOR] > 0) && (RCinputs[RUDDER] > 0))
    2b42:	18 16       	cp	r1, r24
    2b44:	19 06       	cpc	r1, r25
    2b46:	44 f4       	brge	.+16     	; 0x2b58 <Display_sticks+0x156>
    2b48:	14 16       	cp	r1, r20
    2b4a:	15 06       	cpc	r1, r21
    2b4c:	2c f4       	brge	.+10     	; 0x2b58 <Display_sticks+0x156>
    2b4e:	d1 e0       	ldi	r29, 0x01	; 1
    2b50:	12 16       	cp	r1, r18
    2b52:	13 06       	cpc	r1, r19
    2b54:	0c f0       	brlt	.+2      	; 0x2b58 <Display_sticks+0x156>
    2b56:	d0 e0       	ldi	r29, 0x00	; 0
				}
			}
		}

		// Update buffer
		write_buffer(buffer,1);
    2b58:	61 e0       	ldi	r22, 0x01	; 1
    2b5a:	80 e0       	ldi	r24, 0x00	; 0
    2b5c:	91 e0       	ldi	r25, 0x01	; 1
    2b5e:	0e 94 c9 1b 	call	0x3792	; 0x3792 <write_buffer>
    2b62:	63 cf       	rjmp	.-314    	; 0x2a2a <Display_sticks+0x28>
	}

	// Save value and return
	if (CalibrateDone)
    2b64:	dd 23       	and	r29, r29
    2b66:	f9 f0       	breq	.+62     	; 0x2ba6 <Display_sticks+0x1a4>
	{
		LCD_Display_Text(137,(const unsigned char*)Verdana14,40,43); 	// "Done!"
    2b68:	2b e2       	ldi	r18, 0x2B	; 43
    2b6a:	30 e0       	ldi	r19, 0x00	; 0
    2b6c:	48 e2       	ldi	r20, 0x28	; 40
    2b6e:	50 e0       	ldi	r21, 0x00	; 0
    2b70:	69 e4       	ldi	r22, 0x49	; 73
    2b72:	71 e0       	ldi	r23, 0x01	; 1
    2b74:	89 e8       	ldi	r24, 0x89	; 137
    2b76:	90 e0       	ldi	r25, 0x00	; 0
    2b78:	0e 94 a0 1d 	call	0x3b40	; 0x3b40 <LCD_Display_Text>
		// Update buffer
		write_buffer(buffer,1);
    2b7c:	61 e0       	ldi	r22, 0x01	; 1
    2b7e:	80 e0       	ldi	r24, 0x00	; 0
    2b80:	91 e0       	ldi	r25, 0x01	; 1
    2b82:	0e 94 c9 1b 	call	0x3792	; 0x3792 <write_buffer>
		clear_buffer(buffer);
    2b86:	80 e0       	ldi	r24, 0x00	; 0
    2b88:	91 e0       	ldi	r25, 0x01	; 1
    2b8a:	0e 94 f7 1b 	call	0x37ee	; 0x37ee <clear_buffer>
    2b8e:	8f e7       	ldi	r24, 0x7F	; 127
    2b90:	94 e8       	ldi	r25, 0x84	; 132
    2b92:	2e e1       	ldi	r18, 0x1E	; 30
    2b94:	81 50       	subi	r24, 0x01	; 1
    2b96:	90 40       	sbci	r25, 0x00	; 0
    2b98:	20 40       	sbci	r18, 0x00	; 0
    2b9a:	e1 f7       	brne	.-8      	; 0x2b94 <Display_sticks+0x192>
    2b9c:	00 c0       	rjmp	.+0      	; 0x2b9e <Display_sticks+0x19c>
    2b9e:	00 00       	nop
		// Pause so that the "Done!" text is readable
		_delay_ms(500);
		Save_Config_to_EEPROM();
    2ba0:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <Save_Config_to_EEPROM>
    2ba4:	06 c0       	rjmp	.+12     	; 0x2bb2 <Display_sticks+0x1b0>
 	}
	else
	{
		// Restore old settings if failed
		Config.AileronPol = temp_aileron;
    2ba6:	c0 92 d6 05 	sts	0x05D6, r12
		Config.ElevatorPol = temp_elevator;
    2baa:	d0 92 d7 05 	sts	0x05D7, r13
		Config.RudderPol = temp_rudder;
    2bae:	f0 92 d8 05 	sts	0x05D8, r15
	}
}
    2bb2:	cd b7       	in	r28, 0x3d	; 61
    2bb4:	de b7       	in	r29, 0x3e	; 62
    2bb6:	ea e0       	ldi	r30, 0x0A	; 10
    2bb8:	0c 94 e8 41 	jmp	0x83d0	; 0x83d0 <__epilogue_restores__+0x10>

00002bbc <Set_EEPROM_Default_Config>:

char *eeprom_start; // EEPROM pointer

// Force a factory reset
void Set_EEPROM_Default_Config(void)
{
    2bbc:	cf 93       	push	r28
    2bbe:	df 93       	push	r29
	uint8_t i;
	
	// Clear entire Config space first
	memset(&Config.setup,0,(sizeof(Config)));
    2bc0:	88 e0       	ldi	r24, 0x08	; 8
    2bc2:	92 e0       	ldi	r25, 0x02	; 2
    2bc4:	e9 ea       	ldi	r30, 0xA9	; 169
    2bc6:	f5 e0       	ldi	r31, 0x05	; 5
    2bc8:	df 01       	movw	r26, r30
    2bca:	9c 01       	movw	r18, r24
    2bcc:	1d 92       	st	X+, r1
    2bce:	21 50       	subi	r18, 0x01	; 1
    2bd0:	30 40       	sbci	r19, 0x00	; 0
    2bd2:	e1 f7       	brne	.-8      	; 0x2bcc <Set_EEPROM_Default_Config+0x10>

	// Set magic number to current signature
	Config.setup = MAGIC_NUMBER;
    2bd4:	86 e3       	ldi	r24, 0x36	; 54
    2bd6:	80 93 a9 05 	sts	0x05A9, r24

	// Misc settings
	Config.RxMode = PWM;				// Default to PWM
    2bda:	81 e0       	ldi	r24, 0x01	; 1
    2bdc:	80 93 d2 05 	sts	0x05D2, r24
	Config.PWM_Sync = GEAR;
    2be0:	84 e0       	ldi	r24, 0x04	; 4
    2be2:	80 93 d3 05 	sts	0x05D3, r24
	Config.Acc_LPF = 2;					// Acc LPF around 21Hz (5, 10, 21, 32, 44, 74, None)
    2be6:	92 e0       	ldi	r25, 0x02	; 2
    2be8:	90 93 37 06 	sts	0x0637, r25
	Config.Gyro_LPF = 6;				// Gyro LPF off "None" (5, 10, 21, 32, 44, 74, None)
    2bec:	96 e0       	ldi	r25, 0x06	; 6
    2bee:	90 93 38 06 	sts	0x0638, r25
	Config.CF_factor = 7;
    2bf2:	97 e0       	ldi	r25, 0x07	; 7
    2bf4:	90 93 39 06 	sts	0x0639, r25
	Config.FlightChan = GEAR;			// Channel GEAR switches flight mode by default
    2bf8:	80 93 d5 05 	sts	0x05D5, r24
	Config.Disarm_timer = 30;			// Default to 30 seconds
    2bfc:	8e e1       	ldi	r24, 0x1E	; 30
    2bfe:	80 93 34 06 	sts	0x0634, r24
	Config.Transition_P1n = 50;			// Set P1.n point to 50%
    2c02:	82 e3       	ldi	r24, 0x32	; 50
    2c04:	80 93 da 05 	sts	0x05DA, r24
    2c08:	ee ec       	ldi	r30, 0xCE	; 206
    2c0a:	f0 e0       	ldi	r31, 0x00	; 0
    2c0c:	ca ea       	ldi	r28, 0xAA	; 170
    2c0e:	d5 e0       	ldi	r29, 0x05	; 5
    2c10:	a3 e8       	ldi	r26, 0x83	; 131
    2c12:	b7 e0       	ldi	r27, 0x07	; 7

	// Servo defaults
	for (i = 0; i < MAX_RC_CHANNELS; i++)
	{
		Config.ChannelOrder[i] = pgm_read_byte(&JR[i]);
		Config.RxChannelZeroOffset[i] = 3750;
    2c14:	86 ea       	ldi	r24, 0xA6	; 166
    2c16:	9e e0       	ldi	r25, 0x0E	; 14
	Config.Transition_P1n = 50;			// Set P1.n point to 50%

	// Servo defaults
	for (i = 0; i < MAX_RC_CHANNELS; i++)
	{
		Config.ChannelOrder[i] = pgm_read_byte(&JR[i]);
    2c18:	24 91       	lpm	r18, Z
    2c1a:	29 93       	st	Y+, r18
		Config.RxChannelZeroOffset[i] = 3750;
    2c1c:	8d 93       	st	X+, r24
    2c1e:	9d 93       	st	X+, r25
    2c20:	31 96       	adiw	r30, 0x01	; 1
	Config.FlightChan = GEAR;			// Channel GEAR switches flight mode by default
	Config.Disarm_timer = 30;			// Default to 30 seconds
	Config.Transition_P1n = 50;			// Set P1.n point to 50%

	// Servo defaults
	for (i = 0; i < MAX_RC_CHANNELS; i++)
    2c22:	30 e0       	ldi	r19, 0x00	; 0
    2c24:	e6 3d       	cpi	r30, 0xD6	; 214
    2c26:	f3 07       	cpc	r31, r19
    2c28:	b9 f7       	brne	.-18     	; 0x2c18 <Set_EEPROM_Default_Config+0x5c>
		Config.ChannelOrder[i] = pgm_read_byte(&JR[i]);
		Config.RxChannelZeroOffset[i] = 3750;
	}
		
	// Monopolar throttle is a special case. Set to -100% or -1000
	Config.RxChannelZeroOffset[THROTTLE] = 2750;
    2c2a:	8e eb       	ldi	r24, 0xBE	; 190
    2c2c:	9a e0       	ldi	r25, 0x0A	; 10
    2c2e:	90 93 84 07 	sts	0x0784, r25
    2c32:	80 93 83 07 	sts	0x0783, r24
    2c36:	ef e5       	ldi	r30, 0x5F	; 95
    2c38:	f6 e0       	ldi	r31, 0x06	; 6
    2c3a:	c3 e7       	ldi	r28, 0x73	; 115
    2c3c:	d7 e0       	ldi	r29, 0x07	; 7
    2c3e:	6b e7       	ldi	r22, 0x7B	; 123
    2c40:	77 e0       	ldi	r23, 0x07	; 7

	// Preset mixers to safe values
	for (i = 0; i < MAX_OUTPUTS; i++)
	{
		Config.Channel[i].P1n_position	= 50;
    2c42:	52 e3       	ldi	r21, 0x32	; 50
		Config.Channel[i].P1_source_a 	= NOMIX;
    2c44:	2f e0       	ldi	r18, 0x0F	; 15
		Config.Channel[i].P1_source_b 	= NOMIX;
		Config.Channel[i].P2_source_a 	= NOMIX;
		Config.Channel[i].P2_source_b 	= NOMIX;
		Config.min_travel[i] = -100;
    2c46:	4c e9       	ldi	r20, 0x9C	; 156
		Config.max_travel[i] = 100;
    2c48:	34 e6       	ldi	r19, 0x64	; 100
    2c4a:	cf 01       	movw	r24, r30
    2c4c:	4e 97       	sbiw	r24, 0x1e	; 30
	Config.RxChannelZeroOffset[THROTTLE] = 2750;

	// Preset mixers to safe values
	for (i = 0; i < MAX_OUTPUTS; i++)
	{
		Config.Channel[i].P1n_position	= 50;
    2c4e:	dc 01       	movw	r26, r24
    2c50:	5c 93       	st	X, r21
    2c52:	48 96       	adiw	r24, 0x18	; 24
		Config.Channel[i].P1_source_a 	= NOMIX;
    2c54:	dc 01       	movw	r26, r24
    2c56:	2c 93       	st	X, r18
    2c58:	04 96       	adiw	r24, 0x04	; 4
		Config.Channel[i].P1_source_b 	= NOMIX;
    2c5a:	dc 01       	movw	r26, r24
    2c5c:	2c 93       	st	X, r18
    2c5e:	02 97       	sbiw	r24, 0x02	; 2
		Config.Channel[i].P2_source_a 	= NOMIX;
    2c60:	dc 01       	movw	r26, r24
    2c62:	2c 93       	st	X, r18
		Config.Channel[i].P2_source_b 	= NOMIX;
    2c64:	20 83       	st	Z, r18
		Config.min_travel[i] = -100;
    2c66:	49 93       	st	Y+, r20
		Config.max_travel[i] = 100;
    2c68:	84 e6       	ldi	r24, 0x64	; 100
    2c6a:	db 01       	movw	r26, r22
    2c6c:	3d 93       	st	X+, r19
    2c6e:	bd 01       	movw	r22, r26
    2c70:	b6 96       	adiw	r30, 0x26	; 38
		
	// Monopolar throttle is a special case. Set to -100% or -1000
	Config.RxChannelZeroOffset[THROTTLE] = 2750;

	// Preset mixers to safe values
	for (i = 0; i < MAX_OUTPUTS; i++)
    2c72:	b7 e0       	ldi	r27, 0x07	; 7
    2c74:	ef 38       	cpi	r30, 0x8F	; 143
    2c76:	fb 07       	cpc	r31, r27
    2c78:	41 f7       	brne	.-48     	; 0x2c4a <Set_EEPROM_Default_Config+0x8e>
		Config.min_travel[i] = -100;
		Config.max_travel[i] = 100;
	}

	// Preset simple mixing for primary channels - all models
	Config.Channel[OUT1].P1_throttle_volume = 100;
    2c7a:	80 93 44 06 	sts	0x0644, r24
	Config.Channel[OUT2].P1_aileron_volume = 100;
    2c7e:	80 93 6d 06 	sts	0x066D, r24
	Config.Channel[OUT3].P1_elevator_volume = 100;
    2c82:	80 93 95 06 	sts	0x0695, r24
	Config.Channel[OUT4].P1_rudder_volume = 100;
    2c86:	80 93 bd 06 	sts	0x06BD, r24
	
	// Set up profile 1
	Config.FlightMode[P1].Roll_P_mult = 60;			// PID defaults
    2c8a:	2c e3       	ldi	r18, 0x3C	; 60
    2c8c:	20 93 db 05 	sts	0x05DB, r18
	Config.FlightMode[P1].A_Roll_P_mult = 5;
    2c90:	95 e0       	ldi	r25, 0x05	; 5
    2c92:	90 93 df 05 	sts	0x05DF, r25
	Config.FlightMode[P1].Pitch_P_mult = 60;
    2c96:	20 93 e1 05 	sts	0x05E1, r18
	Config.FlightMode[P1].A_Pitch_P_mult = 5;
    2c9a:	90 93 e5 05 	sts	0x05E5, r25
	Config.FlightMode[P1].Yaw_P_mult = 80;
    2c9e:	90 e5       	ldi	r25, 0x50	; 80
    2ca0:	90 93 e7 05 	sts	0x05E7, r25
	
	// Preset stick volumes
	Config.Channel[OUT1].P2_throttle_volume = 100;
    2ca4:	80 93 45 06 	sts	0x0645, r24
	Config.Channel[OUT2].P2_aileron_volume = 100;
    2ca8:	80 93 6e 06 	sts	0x066E, r24
	Config.Channel[OUT3].P2_elevator_volume = 100;
    2cac:	80 93 96 06 	sts	0x0696, r24
	Config.Channel[OUT4].P2_rudder_volume = 100;
    2cb0:	80 93 be 06 	sts	0x06BE, r24

	// Preset basic axis gyros in P2
	Config.Channel[OUT2].P2_Roll_gyro = ON;
    2cb4:	91 e0       	ldi	r25, 0x01	; 1
    2cb6:	90 93 74 06 	sts	0x0674, r25
	Config.Channel[OUT3].P2_Pitch_gyro = ON;
    2cba:	90 93 9c 06 	sts	0x069C, r25
	Config.Channel[OUT4].P2_Yaw_gyro = ON;
    2cbe:	90 93 c4 06 	sts	0x06C4, r25

	Config.FlightMode[P1].Roll_I_mult = 40;
    2cc2:	28 e2       	ldi	r18, 0x28	; 40
    2cc4:	20 93 dc 05 	sts	0x05DC, r18
	Config.FlightMode[P1].Roll_limit = 10;
    2cc8:	8a e0       	ldi	r24, 0x0A	; 10
    2cca:	80 93 dd 05 	sts	0x05DD, r24
	Config.FlightMode[P1].Pitch_I_mult = 40;
    2cce:	20 93 e2 05 	sts	0x05E2, r18
	Config.FlightMode[P1].Pitch_limit = 10;
    2cd2:	80 93 e3 05 	sts	0x05E3, r24
	Config.FlightMode[P1].Roll_Rate = 2;
    2cd6:	82 e0       	ldi	r24, 0x02	; 2
    2cd8:	80 93 de 05 	sts	0x05DE, r24
	Config.FlightMode[P1].Pitch_Rate = 2;
    2cdc:	80 93 e4 05 	sts	0x05E4, r24
	Config.FlightMode[P1].Yaw_Rate = 1;
    2ce0:	90 93 ea 05 	sts	0x05EA, r25
	
	// Set up profile 2
	Config.FlightMode[P2].Roll_Rate = 2;
    2ce4:	80 93 f0 05 	sts	0x05F0, r24
	Config.FlightMode[P2].Pitch_Rate = 2;
    2ce8:	80 93 f6 05 	sts	0x05F6, r24
	Config.FlightMode[P2].Yaw_Rate = 1;
    2cec:	90 93 fc 05 	sts	0x05FC, r25
	
	// Set default sensor LPF
	Config.MPU6050_LPF = 2;				// 6 - 2 = 4. MPU6050's internal LPF. Values are 0x06 = 5Hz, (5)10Hz, (4)21Hz*, (3)44Hz, (2)94Hz, (1)184Hz LPF, (0)260Hz
    2cf0:	80 93 3a 06 	sts	0x063A, r24

	// Preset AccZeroNormZ
	Config.AccZeroNormZ		= 128;	
    2cf4:	80 e8       	ldi	r24, 0x80	; 128
    2cf6:	90 e0       	ldi	r25, 0x00	; 0
    2cf8:	90 93 9a 07 	sts	0x079A, r25
    2cfc:	80 93 99 07 	sts	0x0799, r24

#ifdef KK2Mini
	Config.Contrast = 30;				// Contrast (KK2 Mini)
#else
	Config.Contrast = 36;				// Contrast (Everything else)
    2d00:	84 e2       	ldi	r24, 0x24	; 36
    2d02:	80 93 32 06 	sts	0x0632, r24
#endif	
}
    2d06:	df 91       	pop	r29
    2d08:	cf 91       	pop	r28
    2d0a:	08 95       	ret

00002d0c <eeprom_write_byte_changed>:
	eeprom_write_block_changes((const void*) &Config, (void*) EEPROM_DATA_START_POS, sizeof(CONFIG_STRUCT));	
	sei();
}

void eeprom_write_byte_changed( uint8_t * addr, uint8_t value )
{ 
    2d0c:	a1 e0       	ldi	r26, 0x01	; 1
    2d0e:	b0 e0       	ldi	r27, 0x00	; 0
    2d10:	ec e8       	ldi	r30, 0x8C	; 140
    2d12:	f6 e1       	ldi	r31, 0x16	; 22
    2d14:	0c 94 d2 41 	jmp	0x83a4	; 0x83a4 <__prologue_saves__+0x1c>
    2d18:	8c 01       	movw	r16, r24
	if(eeprom_read_byte(addr) != value)
    2d1a:	69 83       	std	Y+1, r22	; 0x01
    2d1c:	0e 94 39 42 	call	0x8472	; 0x8472 <__eerd_byte_m644pa>
    2d20:	69 81       	ldd	r22, Y+1	; 0x01
    2d22:	86 17       	cp	r24, r22
    2d24:	19 f0       	breq	.+6      	; 0x2d2c <eeprom_write_byte_changed+0x20>
	{
		eeprom_write_byte( addr, value );
    2d26:	c8 01       	movw	r24, r16
    2d28:	0e 94 41 42 	call	0x8482	; 0x8482 <__eewr_byte_m644pa>
	}
}
    2d2c:	21 96       	adiw	r28, 0x01	; 1
    2d2e:	e4 e0       	ldi	r30, 0x04	; 4
    2d30:	0c 94 ee 41 	jmp	0x83dc	; 0x83dc <__epilogue_restores__+0x1c>

00002d34 <eeprom_write_block_changes>:

void eeprom_write_block_changes( const uint8_t * src, void * dest, uint16_t size )
{ 
    2d34:	ef 92       	push	r14
    2d36:	ff 92       	push	r15
    2d38:	0f 93       	push	r16
    2d3a:	1f 93       	push	r17
    2d3c:	cf 93       	push	r28
    2d3e:	df 93       	push	r29
    2d40:	ec 01       	movw	r28, r24
    2d42:	8b 01       	movw	r16, r22
    2d44:	7a 01       	movw	r14, r20
    2d46:	e8 0e       	add	r14, r24
    2d48:	f9 1e       	adc	r15, r25
	uint16_t len;

	for(len=0;len<size;len++)
    2d4a:	ce 15       	cp	r28, r14
    2d4c:	df 05       	cpc	r29, r15
    2d4e:	39 f0       	breq	.+14     	; 0x2d5e <eeprom_write_block_changes+0x2a>
	{
		eeprom_write_byte_changed( dest, *src );
    2d50:	69 91       	ld	r22, Y+
    2d52:	c8 01       	movw	r24, r16
    2d54:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <eeprom_write_byte_changed>
		src++;
		dest++;
    2d58:	0f 5f       	subi	r16, 0xFF	; 255
    2d5a:	1f 4f       	sbci	r17, 0xFF	; 255
    2d5c:	f6 cf       	rjmp	.-20     	; 0x2d4a <eeprom_write_block_changes+0x16>
	}
}
    2d5e:	cd b7       	in	r28, 0x3d	; 61
    2d60:	de b7       	in	r29, 0x3e	; 62
    2d62:	e6 e0       	ldi	r30, 0x06	; 6
    2d64:	0c 94 ec 41 	jmp	0x83d8	; 0x83d8 <__epilogue_restores__+0x18>

00002d68 <Save_Config_to_EEPROM>:
}

void Save_Config_to_EEPROM(void)
{
	// Write to eeProm
	cli();
    2d68:	f8 94       	cli
	eeprom_write_block_changes((const void*) &Config, (void*) EEPROM_DATA_START_POS, sizeof(CONFIG_STRUCT));	
    2d6a:	48 e0       	ldi	r20, 0x08	; 8
    2d6c:	52 e0       	ldi	r21, 0x02	; 2
    2d6e:	60 e0       	ldi	r22, 0x00	; 0
    2d70:	70 e0       	ldi	r23, 0x00	; 0
    2d72:	89 ea       	ldi	r24, 0xA9	; 169
    2d74:	95 e0       	ldi	r25, 0x05	; 5
    2d76:	0e 94 9a 16 	call	0x2d34	; 0x2d34 <eeprom_write_block_changes>
	sei();
    2d7a:	78 94       	sei
    2d7c:	08 95       	ret

00002d7e <Update_V1_0_to_V1_1>:
// Config data restructure code
//************************************************************

// Upgrade V1.0 structure to V1.1 structure
void Update_V1_0_to_V1_1(void)
{
    2d7e:	a6 e2       	ldi	r26, 0x26	; 38
    2d80:	b0 e0       	ldi	r27, 0x00	; 0
    2d82:	e5 ec       	ldi	r30, 0xC5	; 197
    2d84:	f6 e1       	ldi	r31, 0x16	; 22
    2d86:	0c 94 cd 41 	jmp	0x839a	; 0x839a <__prologue_saves__+0x12>
	// The new channel_t is 36 bytes * 8 = 288 bytes
	// There are 72 new bytes in the channel structure
	// Shift the rest of the data beyond this up to make space
	src = (char*)&Config.MPU6050_LPF + 1;			// Beginning of old mixer structure (in new one)
	dst = src + SIZEDIFF;
	memcpy(src, dst, SIZEDIFF);
    2d8a:	88 e5       	ldi	r24, 0x58	; 88
    2d8c:	e3 e9       	ldi	r30, 0x93	; 147
    2d8e:	f6 e0       	ldi	r31, 0x06	; 6
    2d90:	ab e3       	ldi	r26, 0x3B	; 59
    2d92:	b6 e0       	ldi	r27, 0x06	; 6
    2d94:	01 90       	ld	r0, Z+
    2d96:	0d 92       	st	X+, r0
    2d98:	8a 95       	dec	r24
    2d9a:	e1 f7       	brne	.-8      	; 0x2d94 <Update_V1_0_to_V1_1+0x16>
    2d9c:	23 e9       	ldi	r18, 0x93	; 147
    2d9e:	36 e0       	ldi	r19, 0x06	; 6
    2da0:	80 e0       	ldi	r24, 0x00	; 0
    2da2:	90 e0       	ldi	r25, 0x00	; 0
		// Calculate the target locations 
		src = (char*)&Config.MPU6050_LPF + 1 + SIZEDIFF + (i * OLDSIZE);
		dst = (char*)&mixer_buffer[0];

		// Copy one old channel structure into buffer
		memcpy(src, dst, OLDSIZE);	
    2da4:	4b e1       	ldi	r20, 0x1B	; 27
    2da6:	e4 2e       	mov	r14, r20
		
		// Move all bytes from P1_offset up by one to make space for the Motor_marker byte
		src = (char*)&mixer_buffer[2]; // The old P1_offset byte
		dst = (char*)&mixer_buffer[3];
		memcpy(src, dst, (OLDSIZE - 2));
    2da8:	59 e1       	ldi	r21, 0x19	; 25
    2daa:	d5 2e       	mov	r13, r21
		
		// Take old motor marker switch and convert (15 + 1 = 16)
		if ((P1_sensors & (1 << MotorMarker)) != 0)
		{
			// Set the new value in the right place
			mixer_buffer[2] = MOTOR;
    2dac:	41 e0       	ldi	r20, 0x01	; 1
		}

		// Move the universal source bytes up 
		src = (char*)&mixer_buffer[20];
		dst = (char*)&mixer_buffer[28];
		memcpy(src, dst, 8);
    2dae:	68 e0       	ldi	r22, 0x08	; 8
    2db0:	c6 2e       	mov	r12, r22
		// P1 roll gyro
		if ((P1_sensors & (1 << RollGyro)) != 0)
		{
			if ((P1_scale & (1 << RollScale)) != 0)
			{
				mixer_buffer[16] = SCALE;
    2db2:	53 e0       	ldi	r21, 0x03	; 3
		}
		
		// Copy buffer back into new structure
		src = (char*)&mixer_buffer[0];
		dst = (char*)&Config.Channel[i].P1_value;
		memcpy(src, dst, NEWSIZE);	
    2db4:	76 e2       	ldi	r23, 0x26	; 38
    2db6:	f7 2e       	mov	r15, r23
		// Calculate the target locations 
		src = (char*)&Config.MPU6050_LPF + 1 + SIZEDIFF + (i * OLDSIZE);
		dst = (char*)&mixer_buffer[0];

		// Copy one old channel structure into buffer
		memcpy(src, dst, OLDSIZE);	
    2db8:	fe 01       	movw	r30, r28
    2dba:	31 96       	adiw	r30, 0x01	; 1
    2dbc:	d9 01       	movw	r26, r18
    2dbe:	6e 2d       	mov	r22, r14
    2dc0:	01 90       	ld	r0, Z+
    2dc2:	0d 92       	st	X+, r0
    2dc4:	6a 95       	dec	r22
    2dc6:	e1 f7       	brne	.-8      	; 0x2dc0 <Update_V1_0_to_V1_1+0x42>
		
		// Move all bytes from P1_offset up by one to make space for the Motor_marker byte
		src = (char*)&mixer_buffer[2]; // The old P1_offset byte
		dst = (char*)&mixer_buffer[3];
		memcpy(src, dst, (OLDSIZE - 2));
    2dc8:	fe 01       	movw	r30, r28
    2dca:	34 96       	adiw	r30, 0x04	; 4
    2dcc:	de 01       	movw	r26, r28
    2dce:	13 96       	adiw	r26, 0x03	; 3
    2dd0:	6d 2d       	mov	r22, r13
    2dd2:	01 90       	ld	r0, Z+
    2dd4:	0d 92       	st	X+, r0
    2dd6:	6a 95       	dec	r22
    2dd8:	e1 f7       	brne	.-8      	; 0x2dd2 <Update_V1_0_to_V1_1+0x54>

		// Save the old switches
		P1_sensors = mixer_buffer[16];
    2dda:	69 89       	ldd	r22, Y+17	; 0x11
		P2_sensors = mixer_buffer[17];
    2ddc:	1a 89       	ldd	r17, Y+18	; 0x12
		P1_scale = mixer_buffer[18];
    2dde:	0b 89       	ldd	r16, Y+19	; 0x13
		P2_scale = mixer_buffer[19];
    2de0:	7c 89       	ldd	r23, Y+20	; 0x14
		
		// Take old motor marker switch and convert (15 + 1 = 16)
		if ((P1_sensors & (1 << MotorMarker)) != 0)
    2de2:	66 ff       	sbrs	r22, 6
    2de4:	02 c0       	rjmp	.+4      	; 0x2dea <Update_V1_0_to_V1_1+0x6c>
		{
			// Set the new value in the right place
			mixer_buffer[2] = MOTOR;
    2de6:	4b 83       	std	Y+3, r20	; 0x03
    2de8:	01 c0       	rjmp	.+2      	; 0x2dec <Update_V1_0_to_V1_1+0x6e>
		}
		else
		{
			mixer_buffer[2] = SERVO;
    2dea:	1b 82       	std	Y+3, r1	; 0x03
		}

		// Move the universal source bytes up 
		src = (char*)&mixer_buffer[20];
		dst = (char*)&mixer_buffer[28];
		memcpy(src, dst, 8);
    2dec:	fe 01       	movw	r30, r28
    2dee:	7d 96       	adiw	r30, 0x1d	; 29
    2df0:	de 01       	movw	r26, r28
    2df2:	55 96       	adiw	r26, 0x15	; 21
    2df4:	bc 2c       	mov	r11, r12
    2df6:	01 90       	ld	r0, Z+
    2df8:	0d 92       	st	X+, r0
    2dfa:	ba 94       	dec	r11
    2dfc:	e1 f7       	brne	.-8      	; 0x2df6 <Update_V1_0_to_V1_1+0x78>

		// Expand the old switches into new bytes
		// P1 roll gyro
		if ((P1_sensors & (1 << RollGyro)) != 0)
    2dfe:	60 ff       	sbrs	r22, 0
    2e00:	06 c0       	rjmp	.+12     	; 0x2e0e <Update_V1_0_to_V1_1+0x90>
		{
			if ((P1_scale & (1 << RollScale)) != 0)
    2e02:	00 ff       	sbrs	r16, 0
    2e04:	02 c0       	rjmp	.+4      	; 0x2e0a <Update_V1_0_to_V1_1+0x8c>
			{
				mixer_buffer[16] = SCALE;
    2e06:	59 8b       	std	Y+17, r21	; 0x11
    2e08:	03 c0       	rjmp	.+6      	; 0x2e10 <Update_V1_0_to_V1_1+0x92>
			}
			else
			{
				mixer_buffer[16] = ON;
    2e0a:	49 8b       	std	Y+17, r20	; 0x11
    2e0c:	01 c0       	rjmp	.+2      	; 0x2e10 <Update_V1_0_to_V1_1+0x92>
			}
		}
		else
		{
			mixer_buffer[16] = OFF;
    2e0e:	19 8a       	std	Y+17, r1	; 0x11
		}

		// P2 roll gyro
		if ((P2_sensors & (1 << RollGyro)) != 0)
    2e10:	10 ff       	sbrs	r17, 0
    2e12:	06 c0       	rjmp	.+12     	; 0x2e20 <Update_V1_0_to_V1_1+0xa2>
		{
			if ((P2_scale & (1 << RollScale)) != 0)
    2e14:	70 ff       	sbrs	r23, 0
    2e16:	02 c0       	rjmp	.+4      	; 0x2e1c <Update_V1_0_to_V1_1+0x9e>
			{
				mixer_buffer[17] = SCALE;
    2e18:	5a 8b       	std	Y+18, r21	; 0x12
    2e1a:	03 c0       	rjmp	.+6      	; 0x2e22 <Update_V1_0_to_V1_1+0xa4>
			}
			else
			{
				mixer_buffer[17] = ON;
    2e1c:	4a 8b       	std	Y+18, r20	; 0x12
    2e1e:	01 c0       	rjmp	.+2      	; 0x2e22 <Update_V1_0_to_V1_1+0xa4>
			}
		}
		else
		{
			mixer_buffer[17] = OFF;
    2e20:	1a 8a       	std	Y+18, r1	; 0x12
		}

		// P1 pitch gyro
		if ((P1_sensors & (1 << PitchGyro)) != 0)
    2e22:	61 ff       	sbrs	r22, 1
    2e24:	06 c0       	rjmp	.+12     	; 0x2e32 <Update_V1_0_to_V1_1+0xb4>
		{
			if ((P1_scale & (1 << PitchScale)) != 0)
    2e26:	01 ff       	sbrs	r16, 1
    2e28:	02 c0       	rjmp	.+4      	; 0x2e2e <Update_V1_0_to_V1_1+0xb0>
			{
				mixer_buffer[18] = SCALE;
    2e2a:	5b 8b       	std	Y+19, r21	; 0x13
    2e2c:	03 c0       	rjmp	.+6      	; 0x2e34 <Update_V1_0_to_V1_1+0xb6>
			}
			else
			{
				mixer_buffer[18] = ON;
    2e2e:	4b 8b       	std	Y+19, r20	; 0x13
    2e30:	01 c0       	rjmp	.+2      	; 0x2e34 <Update_V1_0_to_V1_1+0xb6>
			}
		}
		else
		{
			mixer_buffer[18] = OFF;
    2e32:	1b 8a       	std	Y+19, r1	; 0x13
		}

		// P2 pitch gyro
		if ((P2_sensors & (1 << PitchGyro)) != 0)
    2e34:	11 ff       	sbrs	r17, 1
    2e36:	06 c0       	rjmp	.+12     	; 0x2e44 <Update_V1_0_to_V1_1+0xc6>
		{
			if ((P2_scale & (1 << PitchScale)) != 0)
    2e38:	71 ff       	sbrs	r23, 1
    2e3a:	02 c0       	rjmp	.+4      	; 0x2e40 <Update_V1_0_to_V1_1+0xc2>
			{
				mixer_buffer[19] = SCALE;
    2e3c:	5c 8b       	std	Y+20, r21	; 0x14
    2e3e:	03 c0       	rjmp	.+6      	; 0x2e46 <Update_V1_0_to_V1_1+0xc8>
			}
			else
			{
				mixer_buffer[19] = ON;
    2e40:	4c 8b       	std	Y+20, r20	; 0x14
    2e42:	01 c0       	rjmp	.+2      	; 0x2e46 <Update_V1_0_to_V1_1+0xc8>
			}
		}
		else
		{
			mixer_buffer[19] = OFF;
    2e44:	1c 8a       	std	Y+20, r1	; 0x14
		}

		// P1 yaw_gyro
		if ((P1_sensors & (1 << YawGyro)) != 0)
    2e46:	62 ff       	sbrs	r22, 2
    2e48:	06 c0       	rjmp	.+12     	; 0x2e56 <Update_V1_0_to_V1_1+0xd8>
		{
			if ((P1_scale & (1 << YawScale)) != 0)
    2e4a:	02 ff       	sbrs	r16, 2
    2e4c:	02 c0       	rjmp	.+4      	; 0x2e52 <Update_V1_0_to_V1_1+0xd4>
			{
				mixer_buffer[20] = SCALE;
    2e4e:	5d 8b       	std	Y+21, r21	; 0x15
    2e50:	03 c0       	rjmp	.+6      	; 0x2e58 <Update_V1_0_to_V1_1+0xda>
			}
			else
			{
				mixer_buffer[20] = ON;
    2e52:	4d 8b       	std	Y+21, r20	; 0x15
    2e54:	01 c0       	rjmp	.+2      	; 0x2e58 <Update_V1_0_to_V1_1+0xda>
			}
		}
		else
		{
			mixer_buffer[20] = OFF;
    2e56:	1d 8a       	std	Y+21, r1	; 0x15
		}

		// P2 yaw gyro
		if ((P2_sensors & (1 << YawGyro)) != 0)
    2e58:	12 ff       	sbrs	r17, 2
    2e5a:	06 c0       	rjmp	.+12     	; 0x2e68 <Update_V1_0_to_V1_1+0xea>
		{
			if ((P2_scale & (1 << YawScale)) != 0)
    2e5c:	72 ff       	sbrs	r23, 2
    2e5e:	02 c0       	rjmp	.+4      	; 0x2e64 <Update_V1_0_to_V1_1+0xe6>
			{
				mixer_buffer[21] = SCALE;
    2e60:	5e 8b       	std	Y+22, r21	; 0x16
    2e62:	03 c0       	rjmp	.+6      	; 0x2e6a <Update_V1_0_to_V1_1+0xec>
			}
			else
			{
				mixer_buffer[21] = ON;
    2e64:	4e 8b       	std	Y+22, r20	; 0x16
    2e66:	01 c0       	rjmp	.+2      	; 0x2e6a <Update_V1_0_to_V1_1+0xec>
			}
		}
		else
		{
			mixer_buffer[21] = OFF;
    2e68:	1e 8a       	std	Y+22, r1	; 0x16
		}

		// P1 roll acc
		if ((P1_sensors & (1 << RollAcc)) != 0)
    2e6a:	63 ff       	sbrs	r22, 3
    2e6c:	06 c0       	rjmp	.+12     	; 0x2e7a <Update_V1_0_to_V1_1+0xfc>
		{
			if ((P1_scale & (1 << AccRollScale)) != 0)
    2e6e:	03 ff       	sbrs	r16, 3
    2e70:	02 c0       	rjmp	.+4      	; 0x2e76 <Update_V1_0_to_V1_1+0xf8>
			{
				mixer_buffer[22] = SCALE;
    2e72:	5f 8b       	std	Y+23, r21	; 0x17
    2e74:	03 c0       	rjmp	.+6      	; 0x2e7c <Update_V1_0_to_V1_1+0xfe>
			}
			else
			{
				mixer_buffer[22] = ON;
    2e76:	4f 8b       	std	Y+23, r20	; 0x17
    2e78:	01 c0       	rjmp	.+2      	; 0x2e7c <Update_V1_0_to_V1_1+0xfe>
			}
		}
		else
		{
			mixer_buffer[22] = OFF;
    2e7a:	1f 8a       	std	Y+23, r1	; 0x17
		}

		// P2 roll acc
		if ((P2_sensors & (1 << RollAcc)) != 0)
    2e7c:	13 ff       	sbrs	r17, 3
    2e7e:	06 c0       	rjmp	.+12     	; 0x2e8c <Update_V1_0_to_V1_1+0x10e>
		{
			if ((P2_scale & (1 << AccRollScale)) != 0)
    2e80:	73 ff       	sbrs	r23, 3
    2e82:	02 c0       	rjmp	.+4      	; 0x2e88 <Update_V1_0_to_V1_1+0x10a>
			{
				mixer_buffer[23] = SCALE;
    2e84:	58 8f       	std	Y+24, r21	; 0x18
    2e86:	03 c0       	rjmp	.+6      	; 0x2e8e <Update_V1_0_to_V1_1+0x110>
			}
			else
			{
				mixer_buffer[23] = ON;
    2e88:	48 8f       	std	Y+24, r20	; 0x18
    2e8a:	01 c0       	rjmp	.+2      	; 0x2e8e <Update_V1_0_to_V1_1+0x110>
			}
		}
		else
		{
			mixer_buffer[23] = OFF;
    2e8c:	18 8e       	std	Y+24, r1	; 0x18
		}

		// P1 pitch acc
		if ((P1_sensors & (1 << PitchAcc)) != 0)
    2e8e:	64 ff       	sbrs	r22, 4
    2e90:	06 c0       	rjmp	.+12     	; 0x2e9e <Update_V1_0_to_V1_1+0x120>
		{
			if ((P1_scale & (1 << AccPitchScale)) != 0)
    2e92:	04 ff       	sbrs	r16, 4
    2e94:	02 c0       	rjmp	.+4      	; 0x2e9a <Update_V1_0_to_V1_1+0x11c>
			{
				mixer_buffer[24] = SCALE;
    2e96:	59 8f       	std	Y+25, r21	; 0x19
    2e98:	03 c0       	rjmp	.+6      	; 0x2ea0 <Update_V1_0_to_V1_1+0x122>
			}
			else
			{
				mixer_buffer[24] = ON;
    2e9a:	49 8f       	std	Y+25, r20	; 0x19
    2e9c:	01 c0       	rjmp	.+2      	; 0x2ea0 <Update_V1_0_to_V1_1+0x122>
			}
		}
		else
		{
			mixer_buffer[24] = OFF;
    2e9e:	19 8e       	std	Y+25, r1	; 0x19
		}

		// P2 pitch acc
		if ((P2_sensors & (1 << PitchAcc)) != 0)
    2ea0:	14 ff       	sbrs	r17, 4
    2ea2:	06 c0       	rjmp	.+12     	; 0x2eb0 <Update_V1_0_to_V1_1+0x132>
		{
			if ((P2_scale & (1 << AccPitchScale)) != 0)
    2ea4:	74 ff       	sbrs	r23, 4
    2ea6:	02 c0       	rjmp	.+4      	; 0x2eac <Update_V1_0_to_V1_1+0x12e>
			{
				mixer_buffer[25] = SCALE;
    2ea8:	5a 8f       	std	Y+26, r21	; 0x1a
    2eaa:	03 c0       	rjmp	.+6      	; 0x2eb2 <Update_V1_0_to_V1_1+0x134>
			}
			else
			{
				mixer_buffer[25] = ON;
    2eac:	4a 8f       	std	Y+26, r20	; 0x1a
    2eae:	01 c0       	rjmp	.+2      	; 0x2eb2 <Update_V1_0_to_V1_1+0x134>
			}
		}
		else
		{
			mixer_buffer[25] = OFF;
    2eb0:	1a 8e       	std	Y+26, r1	; 0x1a
    2eb2:	fc 01       	movw	r30, r24
    2eb4:	e5 5c       	subi	r30, 0xC5	; 197
    2eb6:	f9 4f       	sbci	r31, 0xF9	; 249
		}
		
		// Copy buffer back into new structure
		src = (char*)&mixer_buffer[0];
		dst = (char*)&Config.Channel[i].P1_value;
		memcpy(src, dst, NEWSIZE);	
    2eb8:	de 01       	movw	r26, r28
    2eba:	11 96       	adiw	r26, 0x01	; 1
    2ebc:	6f 2d       	mov	r22, r15
    2ebe:	01 90       	ld	r0, Z+
    2ec0:	0d 92       	st	X+, r0
    2ec2:	6a 95       	dec	r22
    2ec4:	e1 f7       	brne	.-8      	; 0x2ebe <Update_V1_0_to_V1_1+0x140>
    2ec6:	25 5e       	subi	r18, 0xE5	; 229
    2ec8:	3f 4f       	sbci	r19, 0xFF	; 255
    2eca:	86 96       	adiw	r24, 0x26	; 38
	dst = src + SIZEDIFF;
	memcpy(src, dst, SIZEDIFF);

	// Copy the old structure into buffer and rearrange
	// one output at a time
	for (i = 0; i < MAX_OUTPUTS; i++)
    2ecc:	80 33       	cpi	r24, 0x30	; 48
    2ece:	61 e0       	ldi	r22, 0x01	; 1
    2ed0:	96 07       	cpc	r25, r22
    2ed2:	09 f0       	breq	.+2      	; 0x2ed6 <Update_V1_0_to_V1_1+0x158>
    2ed4:	71 cf       	rjmp	.-286    	; 0x2db8 <Update_V1_0_to_V1_1+0x3a>
		dst = (char*)&Config.Channel[i].P1_value;
		memcpy(src, dst, NEWSIZE);	
	}
	
	// Set magic number to V1.1 signature
	Config.setup = MAGIC_NUMBER;
    2ed6:	86 e3       	ldi	r24, 0x36	; 54
    2ed8:	80 93 a9 05 	sts	0x05A9, r24
}
    2edc:	a6 96       	adiw	r28, 0x26	; 38
    2ede:	e9 e0       	ldi	r30, 0x09	; 9
    2ee0:	0c 94 e9 41 	jmp	0x83d2	; 0x83d2 <__epilogue_restores__+0x12>

00002ee4 <Initial_EEPROM_Config_Load>:
}

void Initial_EEPROM_Config_Load(void)
{
	// Read eeProm data into RAM
	eeprom_read_block(&Config, (void*) EEPROM_DATA_START_POS, sizeof(CONFIG_STRUCT));
    2ee4:	48 e0       	ldi	r20, 0x08	; 8
    2ee6:	52 e0       	ldi	r21, 0x02	; 2
    2ee8:	60 e0       	ldi	r22, 0x00	; 0
    2eea:	70 e0       	ldi	r23, 0x00	; 0
    2eec:	89 ea       	ldi	r24, 0xA9	; 169
    2eee:	95 e0       	ldi	r25, 0x05	; 5
    2ef0:	0e 94 29 42 	call	0x8452	; 0x8452 <__eerd_block_m644pa>
	
	// Set index to start of eeprom
	eeprom_start = (char*)&Config.setup;
    2ef4:	89 ea       	ldi	r24, 0xA9	; 169
    2ef6:	95 e0       	ldi	r25, 0x05	; 5
    2ef8:	90 93 39 05 	sts	0x0539, r25
    2efc:	80 93 38 05 	sts	0x0538, r24
	
	// See if we know what to do with the current eeprom data
	// Config.setup holds the magic number from the current EEPROM
	switch(Config.setup)
    2f00:	80 91 a9 05 	lds	r24, 0x05A9
    2f04:	85 33       	cpi	r24, 0x35	; 53
    2f06:	29 f0       	breq	.+10     	; 0x2f12 <Initial_EEPROM_Config_Load+0x2e>
    2f08:	86 33       	cpi	r24, 0x36	; 54
    2f0a:	29 f0       	breq	.+10     	; 0x2f16 <Initial_EEPROM_Config_Load+0x32>
*/
			break;

		default:							// Unknown solution - restore to factory defaults
			// Load factory defaults
			Set_EEPROM_Default_Config();
    2f0c:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <Set_EEPROM_Default_Config>
			break;
    2f10:	02 c0       	rjmp	.+4      	; 0x2f16 <Initial_EEPROM_Config_Load+0x32>
	// See if we know what to do with the current eeprom data
	// Config.setup holds the magic number from the current EEPROM
	switch(Config.setup)
	{
		case V1_0_SIGNATURE:				// V1.0 detected
			Update_V1_0_to_V1_1();
    2f12:	0e 94 bf 16 	call	0x2d7e	; 0x2d7e <Update_V1_0_to_V1_1>
			Set_EEPROM_Default_Config();
			break;
	}
	
	// Save back to eeprom	
	Save_Config_to_EEPROM();
    2f16:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <Save_Config_to_EEPROM>
    2f1a:	08 95       	ret

00002f1c <main>:
//************************************************************
//* Main loop
//************************************************************

int main(void)
{
    2f1c:	ac e1       	ldi	r26, 0x1C	; 28
    2f1e:	b0 e0       	ldi	r27, 0x00	; 0
    2f20:	e4 e9       	ldi	r30, 0x94	; 148
    2f22:	f7 e1       	ldi	r31, 0x17	; 23
    2f24:	0c 94 c4 41 	jmp	0x8388	; 0x8388 <__prologue_saves__>
	uint8_t Menu_mode = STATUS_TIMEOUT;
	int8_t	old_flight = 3;			// Old flight profile
	int8_t	old_trans_mode = 0;		// Old transition mode
	int16_t temp1 = 0;
	
	init();							// Do all init tasks
    2f28:	0e 94 94 24 	call	0x4928	; 0x4928 <init>
	uint16_t InterruptCounter = 0;
	uint8_t	Disarm_seconds = 0;
	uint8_t Status_seconds = 0;
	uint8_t Menu_mode = STATUS_TIMEOUT;
	int8_t	old_flight = 3;			// Old flight profile
	int8_t	old_trans_mode = 0;		// Old transition mode
    2f2c:	18 8e       	std	Y+24, r1	; 0x18
	// Locals
	uint16_t InterruptCounter = 0;
	uint8_t	Disarm_seconds = 0;
	uint8_t Status_seconds = 0;
	uint8_t Menu_mode = STATUS_TIMEOUT;
	int8_t	old_flight = 3;			// Old flight profile
    2f2e:	03 e0       	ldi	r16, 0x03	; 3

	// Locals
	uint16_t InterruptCounter = 0;
	uint8_t	Disarm_seconds = 0;
	uint8_t Status_seconds = 0;
	uint8_t Menu_mode = STATUS_TIMEOUT;
    2f30:	16 e0       	ldi	r17, 0x06	; 6
	uint8_t ServoRate_TCNT2 = 0;

	// Locals
	uint16_t InterruptCounter = 0;
	uint8_t	Disarm_seconds = 0;
	uint8_t Status_seconds = 0;
    2f32:	a1 2c       	mov	r10, r1
	uint8_t Servo_TCNT2 = 0;
	uint8_t ServoRate_TCNT2 = 0;

	// Locals
	uint16_t InterruptCounter = 0;
	uint8_t	Disarm_seconds = 0;
    2f34:	b1 2c       	mov	r11, r1
	uint8_t Ticker_TCNT2 = 0;
	uint8_t Servo_TCNT2 = 0;
	uint8_t ServoRate_TCNT2 = 0;

	// Locals
	uint16_t InterruptCounter = 0;
    2f36:	18 86       	std	Y+8, r1	; 0x08
    2f38:	1f 82       	std	Y+7, r1	; 0x07
	uint8_t Refresh_TCNT2 = 0;
	uint8_t Disarm_TCNT2 = 0;
	uint8_t Arm_TCNT2 = 0;
	uint8_t Ticker_TCNT2 = 0;
	uint8_t Servo_TCNT2 = 0;
	uint8_t ServoRate_TCNT2 = 0;
    2f3a:	1f 8a       	std	Y+23, r1	; 0x17
	uint8_t Status_TCNT2 = 0;
	uint8_t Refresh_TCNT2 = 0;
	uint8_t Disarm_TCNT2 = 0;
	uint8_t Arm_TCNT2 = 0;
	uint8_t Ticker_TCNT2 = 0;
	uint8_t Servo_TCNT2 = 0;
    2f3c:	1e 8a       	std	Y+22, r1	; 0x16
	uint8_t Transition_TCNT2 = 0;
	uint8_t Status_TCNT2 = 0;
	uint8_t Refresh_TCNT2 = 0;
	uint8_t Disarm_TCNT2 = 0;
	uint8_t Arm_TCNT2 = 0;
	uint8_t Ticker_TCNT2 = 0;
    2f3e:	1d 8a       	std	Y+21, r1	; 0x15
	uint16_t RC_Rate_TCNT1 = 0;
	uint8_t Transition_TCNT2 = 0;
	uint8_t Status_TCNT2 = 0;
	uint8_t Refresh_TCNT2 = 0;
	uint8_t Disarm_TCNT2 = 0;
	uint8_t Arm_TCNT2 = 0;
    2f40:	1c 8a       	std	Y+20, r1	; 0x14
	// Timer incrementers
	uint16_t RC_Rate_TCNT1 = 0;
	uint8_t Transition_TCNT2 = 0;
	uint8_t Status_TCNT2 = 0;
	uint8_t Refresh_TCNT2 = 0;
	uint8_t Disarm_TCNT2 = 0;
    2f42:	1b 8a       	std	Y+19, r1	; 0x13

	// Timer incrementers
	uint16_t RC_Rate_TCNT1 = 0;
	uint8_t Transition_TCNT2 = 0;
	uint8_t Status_TCNT2 = 0;
	uint8_t Refresh_TCNT2 = 0;
    2f44:	1a 8a       	std	Y+18, r1	; 0x12
	uint16_t ticker_16 = 0;

	// Timer incrementers
	uint16_t RC_Rate_TCNT1 = 0;
	uint8_t Transition_TCNT2 = 0;
	uint8_t Status_TCNT2 = 0;
    2f46:	19 8a       	std	Y+17, r1	; 0x11
	uint16_t Save_TCNT1 = 0;
	uint16_t ticker_16 = 0;

	// Timer incrementers
	uint16_t RC_Rate_TCNT1 = 0;
	uint8_t Transition_TCNT2 = 0;
    2f48:	18 8a       	std	Y+16, r1	; 0x10
	uint16_t Disarm_timer = 0;
	uint16_t Save_TCNT1 = 0;
	uint16_t ticker_16 = 0;

	// Timer incrementers
	uint16_t RC_Rate_TCNT1 = 0;
    2f4a:	1f 86       	std	Y+15, r1	; 0x0f
    2f4c:	1e 86       	std	Y+14, r1	; 0x0e
	uint16_t UpdateStatus_timer = 0;
	uint16_t Ticker_Count = 0;
	uint16_t RC_Timeout = 0;
	uint16_t Servo_Rate = 0;
	uint16_t Transition_timeout = 0;
	uint16_t Disarm_timer = 0;
    2f4e:	21 2c       	mov	r2, r1
    2f50:	31 2c       	mov	r3, r1
	uint16_t Status_timeout = 0;
	uint16_t UpdateStatus_timer = 0;
	uint16_t Ticker_Count = 0;
	uint16_t RC_Timeout = 0;
	uint16_t Servo_Rate = 0;
	uint16_t Transition_timeout = 0;
    2f52:	81 2c       	mov	r8, r1
    2f54:	91 2c       	mov	r9, r1
	// 16-bit timers
	uint16_t Status_timeout = 0;
	uint16_t UpdateStatus_timer = 0;
	uint16_t Ticker_Count = 0;
	uint16_t RC_Timeout = 0;
	uint16_t Servo_Rate = 0;
    2f56:	1c 8e       	std	Y+28, r1	; 0x1c
    2f58:	1b 8e       	std	Y+27, r1	; 0x1b

	// 16-bit timers
	uint16_t Status_timeout = 0;
	uint16_t UpdateStatus_timer = 0;
	uint16_t Ticker_Count = 0;
	uint16_t RC_Timeout = 0;
    2f5a:	1e 82       	std	Y+6, r1	; 0x06
    2f5c:	1d 82       	std	Y+5, r1	; 0x05
	uint32_t RC_Rate_Timer = 0;

	// 16-bit timers
	uint16_t Status_timeout = 0;
	uint16_t UpdateStatus_timer = 0;
	uint16_t Ticker_Count = 0;
    2f5e:	1c 86       	std	Y+12, r1	; 0x0c
    2f60:	1b 86       	std	Y+11, r1	; 0x0b
	uint32_t Arm_timer = 0;
	uint32_t RC_Rate_Timer = 0;

	// 16-bit timers
	uint16_t Status_timeout = 0;
	uint16_t UpdateStatus_timer = 0;
    2f62:	1c 82       	std	Y+4, r1	; 0x04
    2f64:	1b 82       	std	Y+3, r1	; 0x03
	// 32-bit timers
	uint32_t Arm_timer = 0;
	uint32_t RC_Rate_Timer = 0;

	// 16-bit timers
	uint16_t Status_timeout = 0;
    2f66:	1a 82       	std	Y+2, r1	; 0x02
    2f68:	19 82       	std	Y+1, r1	; 0x01
	bool SlowRC = false;
	bool TransitionUpdated = false;

	// 32-bit timers
	uint32_t Arm_timer = 0;
	uint32_t RC_Rate_Timer = 0;
    2f6a:	41 2c       	mov	r4, r1
    2f6c:	51 2c       	mov	r5, r1
    2f6e:	32 01       	movw	r6, r4
	bool ServoTick = false;
	bool SlowRC = false;
	bool TransitionUpdated = false;

	// 32-bit timers
	uint32_t Arm_timer = 0;
    2f70:	c1 2c       	mov	r12, r1
    2f72:	d1 2c       	mov	r13, r1
    2f74:	76 01       	movw	r14, r12
//************************************************************

int main(void)
{
	bool ServoTick = false;
	bool SlowRC = false;
    2f76:	1a 86       	std	Y+10, r1	; 0x0a
//* Main loop
//************************************************************

int main(void)
{
	bool ServoTick = false;
    2f78:	19 86       	std	Y+9, r1	; 0x09

	// Main loop
	while (1)
	{
		// Increment the loop counter
		LoopCount++;
    2f7a:	80 91 0e 05 	lds	r24, 0x050E
    2f7e:	8f 5f       	subi	r24, 0xFF	; 255
    2f80:	80 93 0e 05 	sts	0x050E, r24
		//************************************************************
		//* Check for interruption of PWM generation
		//* The "JitterFlag" flag was reset just before PWM generation
		//************************************************************

		if (JitterFlag == true)
    2f84:	80 91 dd 07 	lds	r24, 0x07DD
    2f88:	88 23       	and	r24, r24
    2f8a:	31 f0       	breq	.+12     	; 0x2f98 <main+0x7c>
		{
			InterruptCounter++;
    2f8c:	2f 81       	ldd	r18, Y+7	; 0x07
    2f8e:	38 85       	ldd	r19, Y+8	; 0x08
    2f90:	2f 5f       	subi	r18, 0xFF	; 255
    2f92:	3f 4f       	sbci	r19, 0xFF	; 255
    2f94:	38 87       	std	Y+8, r19	; 0x08
    2f96:	2f 83       	std	Y+7, r18	; 0x07

		//************************************************************
		//* State machine for switching between screens safely
		//************************************************************

		switch(Menu_mode) 
    2f98:	14 30       	cpi	r17, 0x04	; 4
    2f9a:	b9 f1       	breq	.+110    	; 0x300a <main+0xee>
    2f9c:	68 f4       	brcc	.+26     	; 0x2fb8 <main+0x9c>
    2f9e:	11 23       	and	r17, r17
    2fa0:	f1 f0       	breq	.+60     	; 0x2fde <main+0xc2>
    2fa2:	13 30       	cpi	r17, 0x03	; 3
    2fa4:	09 f0       	breq	.+2      	; 0x2fa8 <main+0x8c>
    2fa6:	4e c0       	rjmp	.+156    	; 0x3044 <main+0x128>
			// Status screen first display
			case STATUS:
				// Reset the status screen period
				UpdateStatus_timer = 0;
				// Update status screen
				Display_status();
    2fa8:	0e 94 48 13 	call	0x2690	; 0x2690 <Display_status>
				// Force resync on next RC packet
				Interrupted = false;	
    2fac:	10 92 c2 07 	sts	0x07C2, r1
				// Wait for timeout
				Menu_mode = WAITING_TIMEOUT_BD;
    2fb0:	15 e0       	ldi	r17, 0x05	; 5
				break;

			// Status screen first display
			case STATUS:
				// Reset the status screen period
				UpdateStatus_timer = 0;
    2fb2:	1c 82       	std	Y+4, r1	; 0x04
    2fb4:	1b 82       	std	Y+3, r1	; 0x03
				Display_status();
				// Force resync on next RC packet
				Interrupted = false;	
				// Wait for timeout
				Menu_mode = WAITING_TIMEOUT_BD;
				break;
    2fb6:	46 c0       	rjmp	.+140    	; 0x3044 <main+0x128>

		//************************************************************
		//* State machine for switching between screens safely
		//************************************************************

		switch(Menu_mode) 
    2fb8:	16 30       	cpi	r17, 0x06	; 6
    2fba:	d1 f1       	breq	.+116    	; 0x3030 <main+0x114>
    2fbc:	10 f1       	brcs	.+68     	; 0x3002 <main+0xe6>
    2fbe:	17 30       	cpi	r17, 0x07	; 7
    2fc0:	09 f0       	breq	.+2      	; 0x2fc4 <main+0xa8>
    2fc2:	40 c0       	rjmp	.+128    	; 0x3044 <main+0x128>
				Menu_mode = IDLE;
				break;

			// In MENU mode, 
			case MENU:
				LVA = 0;	// Make sure buzzer is off :)
    2fc4:	29 98       	cbi	0x05, 1	; 5
				// Disarm the FC
				General_error |= (1 << DISARMED);
    2fc6:	80 91 17 05 	lds	r24, 0x0517
    2fca:	84 60       	ori	r24, 0x04	; 4
    2fcc:	80 93 17 05 	sts	0x0517, r24
				// Start the menu system
				menu_main();
    2fd0:	0e 94 9a 2d 	call	0x5b34	; 0x5b34 <menu_main>
				
				// Force resync on next RC packet
				Interrupted = false;
    2fd4:	10 92 c2 07 	sts	0x07C2, r1
				// Switch back to status screen when leaving menu
				Menu_mode = STATUS;
				// Reset timeout once back in status screen
				Status_seconds = 0;
				// Reset IMU on return from menu
				reset_IMU();
    2fd8:	0e 94 1f 24 	call	0x483e	; 0x483e <reset_IMU>
    2fdc:	2f c0       	rjmp	.+94     	; 0x303c <main+0x120>
		switch(Menu_mode) 
		{
			// In IDLE mode, the text "Press for status" is displayed ONCE.
			// If a button is pressed the mode changes to STATUS
			case IDLE:
				if((PINB & 0xf0) != 0xf0)
    2fde:	83 b1       	in	r24, 0x03	; 3
    2fe0:	80 7f       	andi	r24, 0xF0	; 240
    2fe2:	80 3f       	cpi	r24, 0xF0	; 240
    2fe4:	49 f0       	breq	.+18     	; 0x2ff8 <main+0xdc>
				{
					Menu_mode = STATUS;
					// Reset the status screen timeout
					Status_seconds = 0;
					menu_beep(1);
    2fe6:	81 e0       	ldi	r24, 0x01	; 1
    2fe8:	0e 94 74 2b 	call	0x56e8	; 0x56e8 <menu_beep>
					
					// Enable Timer0 interrupts as loop rate is slow
					// and we need TMR0 to fully measure it.
					TIMSK0 |= (1 << TOIE0);	
    2fec:	80 91 6e 00 	lds	r24, 0x006E
    2ff0:	81 60       	ori	r24, 0x01	; 1
    2ff2:	80 93 6e 00 	sts	0x006E, r24
    2ff6:	22 c0       	rjmp	.+68     	; 0x303c <main+0x120>
				}
				// Idle mode - fast loop rate so don't need TMR0.
				// We don't want TMR0 to interrupt PWM generation.
				else
				{
					TIMSK0 = 0; 		// Disable Timer0 interrupts
    2ff8:	10 92 6e 00 	sts	0x006E, r1
					TIFR0 = 1;			// Clear interrupt flag
    2ffc:	81 e0       	ldi	r24, 0x01	; 1
    2ffe:	85 bb       	out	0x15, r24	; 21
    3000:	21 c0       	rjmp	.+66     	; 0x3044 <main+0x128>

			// Status screen up, but button still down ;)
			// This is designed to stop the menu appearing instead of the status screen
			// as it will stay here until the button is released
			case WAITING_TIMEOUT_BD:
				if(BUTTON1 == 0)
    3002:	1f 9b       	sbis	0x03, 7	; 3
    3004:	1f c0       	rjmp	.+62     	; 0x3044 <main+0x128>
				{
					Menu_mode = WAITING_TIMEOUT_BD;
				}
				else
				{
					Menu_mode = WAITING_TIMEOUT;
    3006:	14 e0       	ldi	r17, 0x04	; 4
    3008:	1d c0       	rjmp	.+58     	; 0x3044 <main+0x128>
												
			// Status screen up, waiting for timeout or action
			// but button is back up
			case WAITING_TIMEOUT:
				// In status screen, change back to idle after timing out
				if (Status_seconds >= 10)
    300a:	39 e0       	ldi	r19, 0x09	; 9
    300c:	3a 15       	cp	r19, r10
    300e:	c8 f0       	brcs	.+50     	; 0x3042 <main+0x126>
				{
					Menu_mode = STATUS_TIMEOUT;
				}

				// Jump to menu if button pressed
				else if(BUTTON1 == 0)
    3010:	1f 99       	sbic	0x03, 7	; 3
    3012:	07 c0       	rjmp	.+14     	; 0x3022 <main+0x106>
				{
					Menu_mode = MENU;
					menu_beep(1);
    3014:	81 e0       	ldi	r24, 0x01	; 1
    3016:	0e 94 74 2b 	call	0x56e8	; 0x56e8 <menu_beep>
					// Force resync on next RC packet
					Interrupted = false;
    301a:	10 92 c2 07 	sts	0x07C2, r1
				}

				// Jump to menu if button pressed
				else if(BUTTON1 == 0)
				{
					Menu_mode = MENU;
    301e:	17 e0       	ldi	r17, 0x07	; 7
    3020:	11 c0       	rjmp	.+34     	; 0x3044 <main+0x128>
					// Force resync on next RC packet
					Interrupted = false;
				}

				// Update status screen while waiting to time out
				else if (UpdateStatus_timer > (SECOND_TIMER >> 2))
    3022:	4b 81       	ldd	r20, Y+3	; 0x03
    3024:	5c 81       	ldd	r21, Y+4	; 0x04
    3026:	43 31       	cpi	r20, 0x13	; 19
    3028:	53 41       	sbci	r21, 0x13	; 19
    302a:	60 f0       	brcs	.+24     	; 0x3044 <main+0x128>
				{
					Menu_mode = STATUS;
    302c:	13 e0       	ldi	r17, 0x03	; 3
    302e:	0a c0       	rjmp	.+20     	; 0x3044 <main+0x128>
				break;

			// In STATUS_TIMEOUT mode, the idle screen is displayed and the mode changed to IDLE
			case STATUS_TIMEOUT:
				// Pop up the Idle screen
				idle_screen();
    3030:	0e 94 ad 1d 	call	0x3b5a	; 0x3b5a <idle_screen>
				// Force resync on next RC packet
				Interrupted = false;
    3034:	10 92 c2 07 	sts	0x07C2, r1
				// Switch to IDLE mode
				Menu_mode = IDLE;
    3038:	10 e0       	ldi	r17, 0x00	; 0
				break;
    303a:	04 c0       	rjmp	.+8      	; 0x3044 <main+0x128>
				menu_main();
				
				// Force resync on next RC packet
				Interrupted = false;
				// Switch back to status screen when leaving menu
				Menu_mode = STATUS;
    303c:	13 e0       	ldi	r17, 0x03	; 3
				// Reset timeout once back in status screen
				Status_seconds = 0;
    303e:	a1 2c       	mov	r10, r1
				// Reset IMU on return from menu
				reset_IMU();
				break;
    3040:	01 c0       	rjmp	.+2      	; 0x3044 <main+0x128>
			// but button is back up
			case WAITING_TIMEOUT:
				// In status screen, change back to idle after timing out
				if (Status_seconds >= 10)
				{
					Menu_mode = STATUS_TIMEOUT;
    3042:	16 e0       	ldi	r17, 0x06	; 6
		//************************************************************
		//* Status menu timing
		//************************************************************

		// Count elapsed seconds
		if (Status_timeout > SECOND_TIMER)
    3044:	29 81       	ldd	r18, Y+1	; 0x01
    3046:	3a 81       	ldd	r19, Y+2	; 0x02
    3048:	2c 34       	cpi	r18, 0x4C	; 76
    304a:	3c 44       	sbci	r19, 0x4C	; 76
    304c:	58 f0       	brcs	.+22     	; 0x3064 <main+0x148>
		{
			Status_seconds++;
    304e:	a3 94       	inc	r10
			Status_timeout = 0;

			// Display the interrupt count each second
			InterruptCount = InterruptCounter;
    3050:	2f 81       	ldd	r18, Y+7	; 0x07
    3052:	38 85       	ldd	r19, Y+8	; 0x08
    3054:	30 93 13 05 	sts	0x0513, r19
    3058:	20 93 12 05 	sts	0x0512, r18
			InterruptCounter = 0;
    305c:	18 86       	std	Y+8, r1	; 0x08
    305e:	1f 82       	std	Y+7, r1	; 0x07

		// Count elapsed seconds
		if (Status_timeout > SECOND_TIMER)
		{
			Status_seconds++;
			Status_timeout = 0;
    3060:	1a 82       	std	Y+2, r1	; 0x02
    3062:	19 82       	std	Y+1, r1	; 0x01
    3064:	80 91 15 05 	lds	r24, 0x0515
		//* System ticker - based on TCNT2 (19.531kHz)
		//* 
		//* ((Ticker_Count >> 8) &8) 	= 4.77Hz (Disarm and LVA alarms)
		//************************************************************

		if ((Ticker_Count >> 8) &8) 
    3068:	4b 85       	ldd	r20, Y+11	; 0x0b
    306a:	5c 85       	ldd	r21, Y+12	; 0x0c
    306c:	53 ff       	sbrs	r21, 3
    306e:	02 c0       	rjmp	.+4      	; 0x3074 <main+0x158>
		{
			Alarm_flags |= (1 << BUZZER_ON);	// 4.77Hz beep
    3070:	80 61       	ori	r24, 0x10	; 16
    3072:	01 c0       	rjmp	.+2      	; 0x3076 <main+0x15a>
		}
		else 
		{
			Alarm_flags &= ~(1 << BUZZER_ON);
    3074:	8f 7e       	andi	r24, 0xEF	; 239
    3076:	80 93 15 05 	sts	0x0515, r24
		//************************************************************
		//* Alarms
		//************************************************************

		// If RC signals overdue, signal RX error message and disarm
		if (Overdue)
    307a:	90 91 0f 05 	lds	r25, 0x050F
    307e:	80 91 17 05 	lds	r24, 0x0517
    3082:	99 23       	and	r25, r25
    3084:	89 f0       	breq	.+34     	; 0x30a8 <main+0x18c>
		{
			General_error |= (1 << NO_SIGNAL);		// Set NO_SIGNAL bit
    3086:	98 2f       	mov	r25, r24
    3088:	92 60       	ori	r25, 0x02	; 2
    308a:	90 93 17 05 	sts	0x0517, r25
			
			// If FC is set to "armable" and is currently armed, disarm the FC
			if ((Config.ArmMode == ARMABLE) && ((General_error & (1 << DISARMED)) == 0))
    308e:	90 91 33 06 	lds	r25, 0x0633
    3092:	91 30       	cpi	r25, 0x01	; 1
    3094:	61 f4       	brne	.+24     	; 0x30ae <main+0x192>
    3096:	82 fd       	sbrc	r24, 2
    3098:	0a c0       	rjmp	.+20     	; 0x30ae <main+0x192>
			{
				General_error |= (1 << DISARMED);	// Set flags to disarmed
    309a:	86 60       	ori	r24, 0x06	; 6
    309c:	80 93 17 05 	sts	0x0517, r24
				menu_beep(1);						// Signal that FC is now disarmed
    30a0:	81 e0       	ldi	r24, 0x01	; 1
    30a2:	0e 94 74 2b 	call	0x56e8	; 0x56e8 <menu_beep>
    30a6:	03 c0       	rjmp	.+6      	; 0x30ae <main+0x192>
			}
		}
		else
		{
			General_error &= ~(1 << NO_SIGNAL);	// Clear NO_SIGNAL bit
    30a8:	8d 7f       	andi	r24, 0xFD	; 253
    30aa:	80 93 17 05 	sts	0x0517, r24
		}

		// Beep buzzer if Vbat lower than trigger
		// Vbat is measured in units of 10mV, so a PowerTrigger of 127 equates to 12.7V
		if (GetVbat() < Config.PowerTriggerActual)
    30ae:	0e 94 fa 3e 	call	0x7df4	; 0x7df4 <GetVbat>
    30b2:	20 91 2f 06 	lds	r18, 0x062F
    30b6:	30 91 30 06 	lds	r19, 0x0630
    30ba:	40 91 17 05 	lds	r20, 0x0517
    30be:	82 17       	cp	r24, r18
    30c0:	93 07       	cpc	r25, r19
    30c2:	10 f4       	brcc	.+4      	; 0x30c8 <main+0x1ac>
		{
			General_error |= (1 << LVA_ALARM);	// Set LVA_Alarm flag
    30c4:	48 60       	ori	r20, 0x08	; 8
    30c6:	01 c0       	rjmp	.+2      	; 0x30ca <main+0x1ae>
		}
		else 
		{
			General_error &= ~(1 << LVA_ALARM);	// Clear LVA_Alarm flag
    30c8:	47 7f       	andi	r20, 0xF7	; 247
    30ca:	40 93 17 05 	sts	0x0517, r20
		}

		// Turn on buzzer if in alarm state (BUZZER_ON is oscillating)
		if	(
			 (
				(General_error & (1 << LVA_ALARM)) ||		// Low battery
    30ce:	80 91 17 05 	lds	r24, 0x0517
		{
			General_error &= ~(1 << LVA_ALARM);	// Clear LVA_Alarm flag
		}

		// Turn on buzzer if in alarm state (BUZZER_ON is oscillating)
		if	(
    30d2:	83 fd       	sbrc	r24, 3
    30d4:	02 c0       	rjmp	.+4      	; 0x30da <main+0x1be>
    30d6:	83 70       	andi	r24, 0x03	; 3
			 (
				(General_error & (1 << LVA_ALARM)) ||		// Low battery
				(General_error & (1 << NO_SIGNAL)) ||		// No signal
    30d8:	31 f0       	breq	.+12     	; 0x30e6 <main+0x1ca>
				(General_error & (1 << THROTTLE_HIGH))		// Throttle high
			 ) && 
			  (Alarm_flags & (1 << BUZZER_ON))
    30da:	80 91 15 05 	lds	r24, 0x0515
		if	(
			 (
				(General_error & (1 << LVA_ALARM)) ||		// Low battery
				(General_error & (1 << NO_SIGNAL)) ||		// No signal
				(General_error & (1 << THROTTLE_HIGH))		// Throttle high
			 ) && 
    30de:	84 ff       	sbrs	r24, 4
    30e0:	02 c0       	rjmp	.+4      	; 0x30e6 <main+0x1ca>
			  (Alarm_flags & (1 << BUZZER_ON))
			) 
		{
			LVA = 1;
    30e2:	29 9a       	sbi	0x05, 1	; 5
    30e4:	01 c0       	rjmp	.+2      	; 0x30e8 <main+0x1cc>
		}
		else 
		{
			LVA = 0;
    30e6:	29 98       	cbi	0x05, 1	; 5

		//************************************************************
		//* Arm/disarm handling
		//************************************************************

		if (Config.ArmMode == ARMABLE)
    30e8:	80 91 33 06 	lds	r24, 0x0633
    30ec:	81 30       	cpi	r24, 0x01	; 1
    30ee:	09 f0       	breq	.+2      	; 0x30f2 <main+0x1d6>
    30f0:	7b c0       	rjmp	.+246    	; 0x31e8 <main+0x2cc>
			// Manual arm/disarm

			// If sticks not at extremes, reset manual arm/disarm timer
			// Sticks down and centered = armed. Down and outside = disarmed
			if (
				((-ARM_TIMER_RESET_1 < RCinputs[AILERON]) && (RCinputs[AILERON] < ARM_TIMER_RESET_1)) ||
    30f2:	80 91 24 08 	lds	r24, 0x0824
    30f6:	90 91 25 08 	lds	r25, 0x0825
    30fa:	9c 01       	movw	r18, r24
    30fc:	21 54       	subi	r18, 0x41	; 65
    30fe:	3c 4f       	sbci	r19, 0xFC	; 252
		{
			// Manual arm/disarm

			// If sticks not at extremes, reset manual arm/disarm timer
			// Sticks down and centered = armed. Down and outside = disarmed
			if (
    3100:	2f 37       	cpi	r18, 0x7F	; 127
    3102:	37 40       	sbci	r19, 0x07	; 7
    3104:	08 f4       	brcc	.+2      	; 0x3108 <main+0x1ec>
    3106:	42 c0       	rjmp	.+132    	; 0x318c <main+0x270>
				((-ARM_TIMER_RESET_1 < RCinputs[AILERON]) && (RCinputs[AILERON] < ARM_TIMER_RESET_1)) ||
				((-ARM_TIMER_RESET_1 < RCinputs[ELEVATOR]) && (RCinputs[ELEVATOR] < ARM_TIMER_RESET_1)) ||
    3108:	20 91 26 08 	lds	r18, 0x0826
    310c:	30 91 27 08 	lds	r19, 0x0827
    3110:	21 54       	subi	r18, 0x41	; 65
    3112:	3c 4f       	sbci	r19, 0xFC	; 252
			// Manual arm/disarm

			// If sticks not at extremes, reset manual arm/disarm timer
			// Sticks down and centered = armed. Down and outside = disarmed
			if (
				((-ARM_TIMER_RESET_1 < RCinputs[AILERON]) && (RCinputs[AILERON] < ARM_TIMER_RESET_1)) ||
    3114:	2f 37       	cpi	r18, 0x7F	; 127
    3116:	37 40       	sbci	r19, 0x07	; 7
    3118:	c8 f1       	brcs	.+114    	; 0x318c <main+0x270>
				((-ARM_TIMER_RESET_1 < RCinputs[ELEVATOR]) && (RCinputs[ELEVATOR] < ARM_TIMER_RESET_1)) ||
				((-ARM_TIMER_RESET_1 < RCinputs[RUDDER]) && (RCinputs[RUDDER] < ARM_TIMER_RESET_1)) ||
    311a:	20 91 28 08 	lds	r18, 0x0828
    311e:	30 91 29 08 	lds	r19, 0x0829
    3122:	21 54       	subi	r18, 0x41	; 65
    3124:	3c 4f       	sbci	r19, 0xFC	; 252

			// If sticks not at extremes, reset manual arm/disarm timer
			// Sticks down and centered = armed. Down and outside = disarmed
			if (
				((-ARM_TIMER_RESET_1 < RCinputs[AILERON]) && (RCinputs[AILERON] < ARM_TIMER_RESET_1)) ||
				((-ARM_TIMER_RESET_1 < RCinputs[ELEVATOR]) && (RCinputs[ELEVATOR] < ARM_TIMER_RESET_1)) ||
    3126:	2f 37       	cpi	r18, 0x7F	; 127
    3128:	37 40       	sbci	r19, 0x07	; 7
    312a:	80 f1       	brcs	.+96     	; 0x318c <main+0x270>
				((-ARM_TIMER_RESET_1 < RCinputs[RUDDER]) && (RCinputs[RUDDER] < ARM_TIMER_RESET_1)) ||
    312c:	20 91 20 08 	lds	r18, 0x0820
    3130:	30 91 21 08 	lds	r19, 0x0821
    3134:	23 33       	cpi	r18, 0x33	; 51
    3136:	31 05       	cpc	r19, r1
    3138:	4c f5       	brge	.+82     	; 0x318c <main+0x270>
				Arm_timer = 0;
			}

			// If arm timer times out, the sticks must have been at extremes for ARM_TIMER seconds
			// If aileron is at min, arm the FC
			if ((Arm_timer > ARM_TIMER) && (RCinputs[AILERON] < -ARM_TIMER_RESET_1))
    313a:	2c e4       	ldi	r18, 0x4C	; 76
    313c:	c2 16       	cp	r12, r18
    313e:	d2 06       	cpc	r13, r18
    3140:	e1 04       	cpc	r14, r1
    3142:	f1 04       	cpc	r15, r1
    3144:	30 f1       	brcs	.+76     	; 0x3192 <main+0x276>
    3146:	80 34       	cpi	r24, 0x40	; 64
    3148:	3c ef       	ldi	r19, 0xFC	; 252
    314a:	93 07       	cpc	r25, r19
    314c:	6c f4       	brge	.+26     	; 0x3168 <main+0x24c>
			{
				Arm_timer = 0;
				General_error &= ~(1 << DISARMED);		// Set flags to armed (negate disarmed)
    314e:	80 91 17 05 	lds	r24, 0x0517
    3152:	8b 7f       	andi	r24, 0xFB	; 251
    3154:	80 93 17 05 	sts	0x0517, r24
				CalibrateGyrosSlow();					// Calibrate gyros
    3158:	0e 94 f8 1e 	call	0x3df0	; 0x3df0 <CalibrateGyrosSlow>
				menu_beep(20);							// Signal that FC is ready
    315c:	84 e1       	ldi	r24, 0x14	; 20
    315e:	0e 94 74 2b 	call	0x56e8	; 0x56e8 <menu_beep>
				reset_IMU();							// Reset IMU just in case...
    3162:	0e 94 1f 24 	call	0x483e	; 0x483e <reset_IMU>
    3166:	12 c0       	rjmp	.+36     	; 0x318c <main+0x270>
			}
			// Else, disarm the FC after DISARM_TIMER seconds if aileron at max
			else if ((Arm_timer > DISARM_TIMER) && (RCinputs[AILERON] > ARM_TIMER_RESET_1))
    3168:	42 ee       	ldi	r20, 0xE2	; 226
    316a:	c4 16       	cp	r12, r20
    316c:	44 ee       	ldi	r20, 0xE4	; 228
    316e:	d4 06       	cpc	r13, r20
    3170:	e1 04       	cpc	r14, r1
    3172:	f1 04       	cpc	r15, r1
    3174:	70 f0       	brcs	.+28     	; 0x3192 <main+0x276>
    3176:	81 3c       	cpi	r24, 0xC1	; 193
    3178:	93 40       	sbci	r25, 0x03	; 3
    317a:	5c f0       	brlt	.+22     	; 0x3192 <main+0x276>
			{
				Arm_timer = 0;
				General_error |= (1 << DISARMED);		// Set flags to disarmed
    317c:	80 91 17 05 	lds	r24, 0x0517
    3180:	84 60       	ori	r24, 0x04	; 4
    3182:	80 93 17 05 	sts	0x0517, r24
				menu_beep(1);							// Signal that FC is now disarmed
    3186:	81 e0       	ldi	r24, 0x01	; 1
    3188:	0e 94 74 2b 	call	0x56e8	; 0x56e8 <menu_beep>
    318c:	c1 2c       	mov	r12, r1
    318e:	d1 2c       	mov	r13, r1
    3190:	76 01       	movw	r14, r12
			}

			// Automatic disarm

			// Reset auto-disarm count if any RX activity or set to zero, or when currently disarmed
			if ((Flight_flags & (1 << RxActivity)) || (Config.Disarm_timer == 0) || (General_error & (1 << DISARMED)))
    3192:	80 91 16 05 	lds	r24, 0x0516
    3196:	80 fd       	sbrc	r24, 0
    3198:	0e c0       	rjmp	.+28     	; 0x31b6 <main+0x29a>
    319a:	80 91 34 06 	lds	r24, 0x0634
    319e:	88 23       	and	r24, r24
    31a0:	51 f0       	breq	.+20     	; 0x31b6 <main+0x29a>
    31a2:	80 91 17 05 	lds	r24, 0x0517
    31a6:	82 fd       	sbrc	r24, 2
    31a8:	06 c0       	rjmp	.+12     	; 0x31b6 <main+0x29a>
				Disarm_timer = 0;
				Disarm_seconds = 0;
			}
		
			// Increment disarm timer (seconds) if armed
			if (Disarm_timer > SECOND_TIMER)
    31aa:	8c e4       	ldi	r24, 0x4C	; 76
    31ac:	28 16       	cp	r2, r24
    31ae:	38 06       	cpc	r3, r24
    31b0:	28 f0       	brcs	.+10     	; 0x31bc <main+0x2a0>
			{
				Disarm_seconds++;
    31b2:	b3 94       	inc	r11
    31b4:	01 c0       	rjmp	.+2      	; 0x31b8 <main+0x29c>
    31b6:	b1 2c       	mov	r11, r1
    31b8:	21 2c       	mov	r2, r1
    31ba:	31 2c       	mov	r3, r1
				Disarm_timer = 0;
			}

			// Auto-disarm model if timeout enabled and due
			if ((Disarm_seconds >= Config.Disarm_timer) && (Config.Disarm_timer >= 30))	
    31bc:	40 91 34 06 	lds	r20, 0x0634
    31c0:	2b 2d       	mov	r18, r11
    31c2:	30 e0       	ldi	r19, 0x00	; 0
    31c4:	84 2f       	mov	r24, r20
    31c6:	99 27       	eor	r25, r25
    31c8:	87 fd       	sbrc	r24, 7
    31ca:	90 95       	com	r25
    31cc:	28 17       	cp	r18, r24
    31ce:	39 07       	cpc	r19, r25
    31d0:	84 f0       	brlt	.+32     	; 0x31f2 <main+0x2d6>
    31d2:	4e 31       	cpi	r20, 0x1E	; 30
    31d4:	74 f0       	brlt	.+28     	; 0x31f2 <main+0x2d6>
			{
				// Disarm the FC
				General_error |= (1 << DISARMED);		// Set flags to disarmed
    31d6:	80 91 17 05 	lds	r24, 0x0517
    31da:	84 60       	ori	r24, 0x04	; 4
    31dc:	80 93 17 05 	sts	0x0517, r24
				menu_beep(1);							// Signal that FC is now disarmed
    31e0:	81 e0       	ldi	r24, 0x01	; 1
    31e2:	0e 94 74 2b 	call	0x56e8	; 0x56e8 <menu_beep>
    31e6:	05 c0       	rjmp	.+10     	; 0x31f2 <main+0x2d6>
			}
		}
		// Arm when ArmMode is OFF
		else 
		{
			General_error &= ~(1 << DISARMED);			// Set flags to armed
    31e8:	80 91 17 05 	lds	r24, 0x0517
    31ec:	8b 7f       	andi	r24, 0xFB	; 251
    31ee:	80 93 17 05 	sts	0x0517, r24
		//************************************************************
		//* Get RC data
		//************************************************************

		// Update zeroed RC channel data
		RxGetChannels();
    31f2:	0e 94 5e 3c 	call	0x78bc	; 0x78bc <RxGetChannels>

		// Check for throttle reset
		if (MonopolarThrottle < THROTTLEIDLE)
    31f6:	80 91 20 08 	lds	r24, 0x0820
    31fa:	90 91 21 08 	lds	r25, 0x0821
    31fe:	c2 97       	sbiw	r24, 0x32	; 50
    3200:	5c f4       	brge	.+22     	; 0x3218 <main+0x2fc>
		{
			// Clear throttle high error
			General_error &= ~(1 << THROTTLE_HIGH);	
    3202:	80 91 17 05 	lds	r24, 0x0517
    3206:	8e 7f       	andi	r24, 0xFE	; 254
    3208:	80 93 17 05 	sts	0x0517, r24

			// Reset I-terms at throttle cut. Using memset saves code space
			memset(&IntegralGyro[P1][ROLL], 0, sizeof(int32_t) * 6); 
    320c:	e4 ee       	ldi	r30, 0xE4	; 228
    320e:	f7 e0       	ldi	r31, 0x07	; 7
    3210:	28 e1       	ldi	r18, 0x18	; 24
    3212:	11 92       	st	Z+, r1
    3214:	2a 95       	dec	r18
    3216:	e9 f7       	brne	.-6      	; 0x3212 <main+0x2f6>
		//* by the Config.TransitionSpeed setting.
		//* The transition will hold at P1n position if directed to
		//************************************************************

		// P2 transition point hard-coded to 50% above center
		if 	(RCinputs[Config.FlightChan] > 500)
    3218:	e0 91 d5 05 	lds	r30, 0x05D5
    321c:	ee 0f       	add	r30, r30
    321e:	ff 0b       	sbc	r31, r31
    3220:	ee 5d       	subi	r30, 0xDE	; 222
    3222:	f7 4f       	sbci	r31, 0xF7	; 247
    3224:	80 81       	ld	r24, Z
    3226:	91 81       	ldd	r25, Z+1	; 0x01
    3228:	85 3f       	cpi	r24, 0xF5	; 245
    322a:	31 e0       	ldi	r19, 0x01	; 1
    322c:	93 07       	cpc	r25, r19
    322e:	24 f0       	brlt	.+8      	; 0x3238 <main+0x31c>
		{
			Config.FlightSel = 2;			// Flight mode 2 (P2)
    3230:	42 e0       	ldi	r20, 0x02	; 2
    3232:	40 93 a7 07 	sts	0x07A7, r20
    3236:	0a c0       	rjmp	.+20     	; 0x324c <main+0x330>
		}
		// P1.n transition point hard-coded to 50% below center
		else if (RCinputs[Config.FlightChan] > -500)
    3238:	8d 30       	cpi	r24, 0x0D	; 13
    323a:	5e ef       	ldi	r21, 0xFE	; 254
    323c:	95 07       	cpc	r25, r21
    323e:	24 f0       	brlt	.+8      	; 0x3248 <main+0x32c>
		{
			Config.FlightSel = 1;			// Flight mode 1 (P1.n)
    3240:	21 e0       	ldi	r18, 0x01	; 1
    3242:	20 93 a7 07 	sts	0x07A7, r18
    3246:	02 c0       	rjmp	.+4      	; 0x324c <main+0x330>
		}
		// Otherwise the default is P1
		else
		{
			Config.FlightSel = 0;			// Flight mode 0 (P1)
    3248:	10 92 a7 07 	sts	0x07A7, r1
		//* Set up the correct state for the current setting.
		//* Check for initial startup - the only time that old_flight should be "3".
		//* Also, re-initialise if the transition setting is changed
		//************************************************************

		if ((old_flight == 3) || (old_trans_mode != Config.TransitionSpeed))
    324c:	03 30       	cpi	r16, 0x03	; 3
    324e:	29 f0       	breq	.+10     	; 0x325a <main+0x33e>
    3250:	20 91 d9 05 	lds	r18, 0x05D9
    3254:	38 8d       	ldd	r19, Y+24	; 0x18
    3256:	32 17       	cp	r19, r18
    3258:	41 f1       	breq	.+80     	; 0x32aa <main+0x38e>
		{
			switch(Config.FlightSel)
    325a:	00 91 a7 07 	lds	r16, 0x07A7
    325e:	01 30       	cpi	r16, 0x01	; 1
    3260:	59 f0       	breq	.+22     	; 0x3278 <main+0x35c>
    3262:	02 30       	cpi	r16, 0x02	; 2
    3264:	b1 f0       	breq	.+44     	; 0x3292 <main+0x376>
    3266:	01 11       	cpse	r16, r1
    3268:	1d c0       	rjmp	.+58     	; 0x32a4 <main+0x388>
			{
				case 0:
					Transition_state = TRANS_P1;
    326a:	10 92 1a 05 	sts	0x051A, r1
					transition_counter = 0;
    326e:	10 92 1c 05 	sts	0x051C, r1
    3272:	10 92 1b 05 	sts	0x051B, r1
					break;
    3276:	16 c0       	rjmp	.+44     	; 0x32a4 <main+0x388>
				case 1:
					Transition_state = TRANS_P1n;
    3278:	44 e0       	ldi	r20, 0x04	; 4
    327a:	40 93 1a 05 	sts	0x051A, r20
					transition_counter = Config.Transition_P1n; // Set transition point to the user-selected point
    327e:	20 91 da 05 	lds	r18, 0x05DA
    3282:	33 27       	eor	r19, r19
    3284:	27 fd       	sbrc	r18, 7
    3286:	30 95       	com	r19
    3288:	30 93 1c 05 	sts	0x051C, r19
    328c:	20 93 1b 05 	sts	0x051B, r18
					break;
    3290:	09 c0       	rjmp	.+18     	; 0x32a4 <main+0x388>
				case 2:
					Transition_state = TRANS_P2;
    3292:	29 e0       	ldi	r18, 0x09	; 9
    3294:	20 93 1a 05 	sts	0x051A, r18
					transition_counter = 100;
    3298:	e4 e6       	ldi	r30, 0x64	; 100
    329a:	f0 e0       	ldi	r31, 0x00	; 0
    329c:	f0 93 1c 05 	sts	0x051C, r31
    32a0:	e0 93 1b 05 	sts	0x051B, r30
					break;
				default:
					break;
			}		 
			old_flight = Config.FlightSel;
			old_trans_mode = Config.TransitionSpeed;
    32a4:	20 91 d9 05 	lds	r18, 0x05D9
    32a8:	28 8f       	std	Y+24, r18	; 0x18
		//************************************************************
		//* Transition state handling
		//************************************************************

		// Update timed transition when changing flight modes
		if (Config.FlightSel != old_flight)
    32aa:	30 91 a7 07 	lds	r19, 0x07A7
    32ae:	3d 87       	std	Y+13, r19	; 0x0d
    32b0:	31 e0       	ldi	r19, 0x01	; 1
    32b2:	4d 85       	ldd	r20, Y+13	; 0x0d
    32b4:	40 13       	cpse	r20, r16
    32b6:	01 c0       	rjmp	.+2      	; 0x32ba <main+0x39e>
    32b8:	30 e0       	ldi	r19, 0x00	; 0
			TransitionUpdated = true;
		}

		// Work out transition number when manually transitioning
		// Convert number to percentage (0 to 100%)
		if (Config.TransitionSpeed == 0)
    32ba:	20 91 d9 05 	lds	r18, 0x05D9
    32be:	21 11       	cpse	r18, r1
    32c0:	16 c0       	rjmp	.+44     	; 0x32ee <main+0x3d2>
    32c2:	88 51       	subi	r24, 0x18	; 24
    32c4:	9c 4f       	sbci	r25, 0xFC	; 252
    32c6:	97 ff       	sbrs	r25, 7
    32c8:	02 c0       	rjmp	.+4      	; 0x32ce <main+0x3b2>
    32ca:	80 e0       	ldi	r24, 0x00	; 0
    32cc:	90 e0       	ldi	r25, 0x00	; 0
			// Trim lower end to zero (0 to 2250)
			if (temp1 < 0) temp1 = 0;

			// Convert 0 to 2250 to 0 to 125. Divide by 20
			// Round to avoid truncation errors
			transition = (temp1 + 10) / 20;
    32ce:	0a 96       	adiw	r24, 0x0a	; 10
    32d0:	64 e1       	ldi	r22, 0x14	; 20
    32d2:	70 e0       	ldi	r23, 0x00	; 0
    32d4:	0e 94 38 41 	call	0x8270	; 0x8270 <__divmodhi4>

			// transition now has a range of 0 to 101 for 0 to 2000 input
			// Limit extent of transition value 0 to 100 (101 steps)
			if (transition > 100) transition = 100;
    32d8:	65 36       	cpi	r22, 0x65	; 101
    32da:	71 05       	cpc	r23, r1
    32dc:	0c f4       	brge	.+2      	; 0x32e0 <main+0x3c4>
    32de:	00 c2       	rjmp	.+1024   	; 0x36e0 <main+0x7c4>
    32e0:	84 e6       	ldi	r24, 0x64	; 100
    32e2:	90 e0       	ldi	r25, 0x00	; 0
    32e4:	90 93 19 05 	sts	0x0519, r25
    32e8:	80 93 18 05 	sts	0x0518, r24
    32ec:	fd c1       	rjmp	.+1018   	; 0x36e8 <main+0x7cc>
		}
		else
		{
			// transition_counter counts from 0 to 100 (101 steps)
			transition = transition_counter;
    32ee:	80 91 1b 05 	lds	r24, 0x051B
    32f2:	90 91 1c 05 	lds	r25, 0x051C
    32f6:	90 93 19 05 	sts	0x0519, r25
    32fa:	80 93 18 05 	sts	0x0518, r24
		{
			Transition_state = TRANSITIONING;
		}

		// Update transition state change when control value or flight mode changes
		if (TransitionUpdated)
    32fe:	33 23       	and	r19, r19
    3300:	99 f0       	breq	.+38     	; 0x3328 <main+0x40c>
		{
			// Update transition state from matrix
			Transition_state = (uint8_t)pgm_read_byte(&Trans_Matrix[Config.FlightSel][old_flight]);
    3302:	4d 85       	ldd	r20, Y+13	; 0x0d
    3304:	84 2f       	mov	r24, r20
    3306:	99 27       	eor	r25, r25
    3308:	87 fd       	sbrc	r24, 7
    330a:	90 95       	com	r25
    330c:	fc 01       	movw	r30, r24
    330e:	ee 0f       	add	r30, r30
    3310:	ff 1f       	adc	r31, r31
    3312:	e8 0f       	add	r30, r24
    3314:	f9 1f       	adc	r31, r25
    3316:	e0 0f       	add	r30, r16
    3318:	f1 1d       	adc	r31, r1
    331a:	07 fd       	sbrc	r16, 7
    331c:	fa 95       	dec	r31
    331e:	ea 52       	subi	r30, 0x2A	; 42
    3320:	ff 4f       	sbci	r31, 0xFF	; 255
    3322:	e4 91       	lpm	r30, Z
    3324:	e0 93 1a 05 	sts	0x051A, r30
		}

		// Update state, values and transition_counter every Config.TransitionSpeed if not zero. 195 = 10ms
		if (((Config.TransitionSpeed != 0) && (Transition_timeout > (TRANSITION_TIMER * Config.TransitionSpeed))) ||
    3328:	22 23       	and	r18, r18
    332a:	39 f0       	breq	.+14     	; 0x333a <main+0x41e>
    332c:	53 ec       	ldi	r21, 0xC3	; 195
    332e:	25 03       	mulsu	r18, r21
    3330:	c0 01       	movw	r24, r0
    3332:	11 24       	eor	r1, r1
    3334:	88 15       	cp	r24, r8
    3336:	99 05       	cpc	r25, r9
    3338:	18 f0       	brcs	.+6      	; 0x3340 <main+0x424>
    333a:	33 23       	and	r19, r19
    333c:	09 f4       	brne	.+2      	; 0x3340 <main+0x424>
    333e:	a9 c0       	rjmp	.+338    	; 0x3492 <main+0x576>
		{
			Transition_timeout = 0;
			TransitionUpdated = false;

			// Fixed, end-point states
			if (Transition_state == TRANS_P1)
    3340:	80 91 1a 05 	lds	r24, 0x051A
    3344:	81 11       	cpse	r24, r1
    3346:	05 c0       	rjmp	.+10     	; 0x3352 <main+0x436>
			{
				transition_counter = 0;
    3348:	10 92 1c 05 	sts	0x051C, r1
    334c:	10 92 1b 05 	sts	0x051B, r1
    3350:	22 c0       	rjmp	.+68     	; 0x3396 <main+0x47a>
			}
			else if (Transition_state == TRANS_P1n)
    3352:	84 30       	cpi	r24, 0x04	; 4
    3354:	31 f4       	brne	.+12     	; 0x3362 <main+0x446>
			{
				transition_counter = Config.Transition_P1n;
    3356:	80 91 da 05 	lds	r24, 0x05DA
    335a:	99 27       	eor	r25, r25
    335c:	87 fd       	sbrc	r24, 7
    335e:	90 95       	com	r25
    3360:	04 c0       	rjmp	.+8      	; 0x336a <main+0x44e>
			}
			else if (Transition_state == TRANS_P2)
    3362:	89 30       	cpi	r24, 0x09	; 9
    3364:	39 f4       	brne	.+14     	; 0x3374 <main+0x458>
			{
				transition_counter = 100;
    3366:	84 e6       	ldi	r24, 0x64	; 100
    3368:	90 e0       	ldi	r25, 0x00	; 0
    336a:	90 93 1c 05 	sts	0x051C, r25
    336e:	80 93 1b 05 	sts	0x051B, r24
    3372:	11 c0       	rjmp	.+34     	; 0x3396 <main+0x47a>
			}		

			// Over-ride users requesting silly states
			// If transition_counter is above P1.n but request is P1 to P1.n or 
			// if transition_counter is below P1.n but request is P2 to P1.n...
			if ((Transition_state == TRANS_P1_to_P1n_start) && (transition_counter > Config.Transition_P1n))
    3374:	81 30       	cpi	r24, 0x01	; 1
    3376:	79 f4       	brne	.+30     	; 0x3396 <main+0x47a>
    3378:	80 91 da 05 	lds	r24, 0x05DA
    337c:	99 27       	eor	r25, r25
    337e:	87 fd       	sbrc	r24, 7
    3380:	90 95       	com	r25
    3382:	20 91 1b 05 	lds	r18, 0x051B
    3386:	30 91 1c 05 	lds	r19, 0x051C
    338a:	82 17       	cp	r24, r18
    338c:	93 07       	cpc	r25, r19
    338e:	1c f4       	brge	.+6      	; 0x3396 <main+0x47a>
			{
				// Reset state to a more appropriate one
				Transition_state = TRANS_P2_to_P1n_start;
    3390:	88 e0       	ldi	r24, 0x08	; 8
    3392:	80 93 1a 05 	sts	0x051A, r24
			}

			if ((Transition_state == TRANS_P2_to_P1n_start) && (transition_counter < Config.Transition_P1n))
    3396:	80 91 1a 05 	lds	r24, 0x051A
    339a:	88 30       	cpi	r24, 0x08	; 8
    339c:	79 f4       	brne	.+30     	; 0x33bc <main+0x4a0>
    339e:	80 91 da 05 	lds	r24, 0x05DA
    33a2:	99 27       	eor	r25, r25
    33a4:	87 fd       	sbrc	r24, 7
    33a6:	90 95       	com	r25
    33a8:	20 91 1b 05 	lds	r18, 0x051B
    33ac:	30 91 1c 05 	lds	r19, 0x051C
    33b0:	28 17       	cp	r18, r24
    33b2:	39 07       	cpc	r19, r25
    33b4:	1c f4       	brge	.+6      	; 0x33bc <main+0x4a0>
			{
				// Reset state to a more appropriate one
				Transition_state = TRANS_P1_to_P1n_start;
    33b6:	81 e0       	ldi	r24, 0x01	; 1
    33b8:	80 93 1a 05 	sts	0x051A, r24
			}

			// Handle timed transition towards P1
			if ((Transition_state == TRANS_P1n_to_P1_start) || (Transition_state == TRANS_P2_to_P1_start))
    33bc:	80 91 1a 05 	lds	r24, 0x051A
    33c0:	8b 7f       	andi	r24, 0xFB	; 251
    33c2:	82 30       	cpi	r24, 0x02	; 2
    33c4:	91 f4       	brne	.+36     	; 0x33ea <main+0x4ce>
			{
				transition_counter--;
    33c6:	80 91 1b 05 	lds	r24, 0x051B
    33ca:	90 91 1c 05 	lds	r25, 0x051C
    33ce:	01 97       	sbiw	r24, 0x01	; 1
    33d0:	90 93 1c 05 	sts	0x051C, r25
    33d4:	80 93 1b 05 	sts	0x051B, r24
				if (transition_counter <= 0)
    33d8:	18 16       	cp	r1, r24
    33da:	19 06       	cpc	r1, r25
    33dc:	34 f0       	brlt	.+12     	; 0x33ea <main+0x4ce>
				{
					transition_counter = 0;
    33de:	10 92 1c 05 	sts	0x051C, r1
    33e2:	10 92 1b 05 	sts	0x051B, r1
					Transition_state = TRANS_P1;
    33e6:	10 92 1a 05 	sts	0x051A, r1
				}
			}

			// Handle timed transition between P1.n and P1
			if (Transition_state == TRANS_P1_to_P1n_start)
    33ea:	80 91 1a 05 	lds	r24, 0x051A
    33ee:	81 30       	cpi	r24, 0x01	; 1
    33f0:	c1 f4       	brne	.+48     	; 0x3422 <main+0x506>
			{
				transition_counter++;
    33f2:	80 91 1b 05 	lds	r24, 0x051B
    33f6:	90 91 1c 05 	lds	r25, 0x051C
    33fa:	01 96       	adiw	r24, 0x01	; 1
    33fc:	90 93 1c 05 	sts	0x051C, r25
    3400:	80 93 1b 05 	sts	0x051B, r24
				if (transition_counter >= Config.Transition_P1n)
    3404:	20 91 da 05 	lds	r18, 0x05DA
    3408:	33 27       	eor	r19, r19
    340a:	27 fd       	sbrc	r18, 7
    340c:	30 95       	com	r19
    340e:	82 17       	cp	r24, r18
    3410:	93 07       	cpc	r25, r19
    3412:	3c f0       	brlt	.+14     	; 0x3422 <main+0x506>
				{
					transition_counter = Config.Transition_P1n;
    3414:	30 93 1c 05 	sts	0x051C, r19
    3418:	20 93 1b 05 	sts	0x051B, r18
					Transition_state = TRANS_P1n;
    341c:	94 e0       	ldi	r25, 0x04	; 4
    341e:	90 93 1a 05 	sts	0x051A, r25
				}
			}			
				
			// Handle timed transition between P1.n and P2
			if (Transition_state == TRANS_P2_to_P1n_start)
    3422:	80 91 1a 05 	lds	r24, 0x051A
    3426:	88 30       	cpi	r24, 0x08	; 8
    3428:	c1 f4       	brne	.+48     	; 0x345a <main+0x53e>
			{
				transition_counter--;
    342a:	80 91 1b 05 	lds	r24, 0x051B
    342e:	90 91 1c 05 	lds	r25, 0x051C
    3432:	01 97       	sbiw	r24, 0x01	; 1
    3434:	90 93 1c 05 	sts	0x051C, r25
    3438:	80 93 1b 05 	sts	0x051B, r24
				if (transition_counter <= Config.Transition_P1n)
    343c:	20 91 da 05 	lds	r18, 0x05DA
    3440:	33 27       	eor	r19, r19
    3442:	27 fd       	sbrc	r18, 7
    3444:	30 95       	com	r19
    3446:	28 17       	cp	r18, r24
    3448:	39 07       	cpc	r19, r25
    344a:	3c f0       	brlt	.+14     	; 0x345a <main+0x53e>
				{
					transition_counter = Config.Transition_P1n;
    344c:	30 93 1c 05 	sts	0x051C, r19
    3450:	20 93 1b 05 	sts	0x051B, r18
					Transition_state = TRANS_P1n;
    3454:	e4 e0       	ldi	r30, 0x04	; 4
    3456:	e0 93 1a 05 	sts	0x051A, r30
				}
			}

			// Handle timed transition towards P2
			if ((Transition_state == TRANS_P1n_to_P2_start) || (Transition_state == TRANS_P1_to_P2_start))
    345a:	80 91 1a 05 	lds	r24, 0x051A
    345e:	8b 7f       	andi	r24, 0xFB	; 251
    3460:	83 30       	cpi	r24, 0x03	; 3
    3462:	a9 f4       	brne	.+42     	; 0x348e <main+0x572>
			{
				transition_counter++;
    3464:	80 91 1b 05 	lds	r24, 0x051B
    3468:	90 91 1c 05 	lds	r25, 0x051C
    346c:	01 96       	adiw	r24, 0x01	; 1
    346e:	90 93 1c 05 	sts	0x051C, r25
    3472:	80 93 1b 05 	sts	0x051B, r24
				if (transition_counter >= 100)
    3476:	84 36       	cpi	r24, 0x64	; 100
    3478:	91 05       	cpc	r25, r1
    347a:	4c f0       	brlt	.+18     	; 0x348e <main+0x572>
				{
					transition_counter = 100;
    347c:	24 e6       	ldi	r18, 0x64	; 100
    347e:	30 e0       	ldi	r19, 0x00	; 0
    3480:	30 93 1c 05 	sts	0x051C, r19
    3484:	20 93 1b 05 	sts	0x051B, r18
					Transition_state = TRANS_P2;
    3488:	89 e0       	ldi	r24, 0x09	; 9
    348a:	80 93 1a 05 	sts	0x051A, r24
		// Update state, values and transition_counter every Config.TransitionSpeed if not zero. 195 = 10ms
		if (((Config.TransitionSpeed != 0) && (Transition_timeout > (TRANSITION_TIMER * Config.TransitionSpeed))) ||
			// Update immediately
			TransitionUpdated)
		{
			Transition_timeout = 0;
    348e:	81 2c       	mov	r8, r1
    3490:	91 2c       	mov	r9, r1
			}

		} // Update transition_counter

		// Zero the I-terms of the opposite state so as to ensure a bump-less transition
		if ((Transition_state == TRANS_P1) || (transition == 0))
    3492:	20 91 1a 05 	lds	r18, 0x051A
    3496:	22 23       	and	r18, r18
    3498:	31 f0       	breq	.+12     	; 0x34a6 <main+0x58a>
    349a:	80 91 18 05 	lds	r24, 0x0518
    349e:	90 91 19 05 	lds	r25, 0x0519
    34a2:	00 97       	sbiw	r24, 0x00	; 0
    34a4:	21 f4       	brne	.+8      	; 0x34ae <main+0x592>
		{
			// Clear P2 I-term while fully in P1
			memset(&IntegralGyro[P2][ROLL], 0, sizeof(int32_t) * NUMBEROFAXIS);
    34a6:	8c e0       	ldi	r24, 0x0C	; 12
    34a8:	e0 ef       	ldi	r30, 0xF0	; 240
    34aa:	f7 e0       	ldi	r31, 0x07	; 7
    34ac:	08 c0       	rjmp	.+16     	; 0x34be <main+0x5a2>
		}
		else if ((Transition_state == TRANS_P2) || (transition == 100))
    34ae:	29 30       	cpi	r18, 0x09	; 9
    34b0:	19 f0       	breq	.+6      	; 0x34b8 <main+0x59c>
    34b2:	84 36       	cpi	r24, 0x64	; 100
    34b4:	91 05       	cpc	r25, r1
    34b6:	31 f4       	brne	.+12     	; 0x34c4 <main+0x5a8>
		{
			// Clear P1 I-term while fully in P2
			memset(&IntegralGyro[P1][ROLL], 0, sizeof(int32_t) * NUMBEROFAXIS);
    34b8:	8c e0       	ldi	r24, 0x0C	; 12
    34ba:	e4 ee       	ldi	r30, 0xE4	; 228
    34bc:	f7 e0       	ldi	r31, 0x07	; 7
    34be:	11 92       	st	Z+, r1
    34c0:	8a 95       	dec	r24
    34c2:	e9 f7       	brne	.-6      	; 0x34be <main+0x5a2>
		//************************************************************
		//* Update timers
		//************************************************************

		// Safely get current value of TCNT1
		Save_TCNT1 = TIM16_ReadTCNT1();
    34c4:	0e 94 d5 27 	call	0x4faa	; 0x4faa <TIM16_ReadTCNT1>
    34c8:	9a 8f       	std	Y+26, r25	; 0x1a
    34ca:	89 8f       	std	Y+25, r24	; 0x19
		
		// 32-bit timers (Max. 1718s measurement on T1, 220K seconds on T2)

		// Work out the current RC rate by measuring between incoming RC packets
		RC_Rate_Timer += (Save_TCNT1 - RC_Rate_TCNT1);
    34cc:	2e 85       	ldd	r18, Y+14	; 0x0e
    34ce:	3f 85       	ldd	r19, Y+15	; 0x0f
    34d0:	82 1b       	sub	r24, r18
    34d2:	93 0b       	sbc	r25, r19
    34d4:	48 0e       	add	r4, r24
    34d6:	59 1e       	adc	r5, r25
    34d8:	61 1c       	adc	r6, r1
    34da:	71 1c       	adc	r7, r1
		RC_Rate_TCNT1 = Save_TCNT1;

		// Arm timer for timing stick hold
		Arm_timer += (uint8_t) (TCNT2 - Arm_TCNT2); 
    34dc:	80 91 b2 00 	lds	r24, 0x00B2
    34e0:	3c 89       	ldd	r19, Y+20	; 0x14
    34e2:	83 1b       	sub	r24, r19
    34e4:	c8 0e       	add	r12, r24
    34e6:	d1 1c       	adc	r13, r1
    34e8:	e1 1c       	adc	r14, r1
    34ea:	f1 1c       	adc	r15, r1
		Arm_TCNT2 = TCNT2;
    34ec:	40 91 b2 00 	lds	r20, 0x00B2
    34f0:	4c 8b       	std	Y+20, r20	; 0x14

		// 16-bit timers (Max. 3.35s measurement on T2)
		// All TCNT2 timers increment at 19.531 kHz

		// Sets the desired SERVO_RATE by flagging ServoTick when PWM due
		Servo_Rate += (uint8_t) (TCNT2 - ServoRate_TCNT2);
    34f2:	80 91 b2 00 	lds	r24, 0x00B2
    34f6:	2f 89       	ldd	r18, Y+23	; 0x17
    34f8:	82 1b       	sub	r24, r18
    34fa:	4b 8d       	ldd	r20, Y+27	; 0x1b
    34fc:	5c 8d       	ldd	r21, Y+28	; 0x1c
    34fe:	48 0f       	add	r20, r24
    3500:	51 1d       	adc	r21, r1
    3502:	5c 8f       	std	Y+28, r21	; 0x1c
    3504:	4b 8f       	std	Y+27, r20	; 0x1b
		ServoRate_TCNT2 = TCNT2;
    3506:	20 91 b2 00 	lds	r18, 0x00B2
    350a:	2f 8b       	std	Y+23, r18	; 0x17
		
		// Signal RC overdue after RC_OVERDUE time (500ms)
		RC_Timeout += (uint8_t) (TCNT2 - Servo_TCNT2);
    350c:	80 91 b2 00 	lds	r24, 0x00B2
    3510:	3e 89       	ldd	r19, Y+22	; 0x16
    3512:	83 1b       	sub	r24, r19
    3514:	4d 81       	ldd	r20, Y+5	; 0x05
    3516:	5e 81       	ldd	r21, Y+6	; 0x06
    3518:	48 0f       	add	r20, r24
    351a:	51 1d       	adc	r21, r1
    351c:	5e 83       	std	Y+6, r21	; 0x06
    351e:	4d 83       	std	Y+5, r20	; 0x05
		Servo_TCNT2 = TCNT2;
    3520:	20 91 b2 00 	lds	r18, 0x00B2
    3524:	2e 8b       	std	Y+22, r18	; 0x16
		
		// Update transition timer
		Transition_timeout += (uint8_t) (TCNT2 - Transition_TCNT2);
    3526:	80 91 b2 00 	lds	r24, 0x00B2
    352a:	38 89       	ldd	r19, Y+16	; 0x10
    352c:	83 1b       	sub	r24, r19
    352e:	88 0e       	add	r8, r24
    3530:	91 1c       	adc	r9, r1
		Transition_TCNT2 = TCNT2;
    3532:	40 91 b2 00 	lds	r20, 0x00B2
    3536:	48 8b       	std	Y+16, r20	; 0x10

		// Update status timeout
		Status_timeout += (uint8_t) (TCNT2 - Status_TCNT2);
    3538:	80 91 b2 00 	lds	r24, 0x00B2
    353c:	29 89       	ldd	r18, Y+17	; 0x11
    353e:	82 1b       	sub	r24, r18
    3540:	49 81       	ldd	r20, Y+1	; 0x01
    3542:	5a 81       	ldd	r21, Y+2	; 0x02
    3544:	48 0f       	add	r20, r24
    3546:	51 1d       	adc	r21, r1
    3548:	5a 83       	std	Y+2, r21	; 0x02
    354a:	49 83       	std	Y+1, r20	; 0x01
		Status_TCNT2 = TCNT2;
    354c:	20 91 b2 00 	lds	r18, 0x00B2
    3550:	29 8b       	std	Y+17, r18	; 0x11
		
		// Status refresh timer
		UpdateStatus_timer += (uint8_t) (TCNT2 - Refresh_TCNT2);
    3552:	80 91 b2 00 	lds	r24, 0x00B2
    3556:	3a 89       	ldd	r19, Y+18	; 0x12
    3558:	83 1b       	sub	r24, r19
    355a:	4b 81       	ldd	r20, Y+3	; 0x03
    355c:	5c 81       	ldd	r21, Y+4	; 0x04
    355e:	48 0f       	add	r20, r24
    3560:	51 1d       	adc	r21, r1
    3562:	5c 83       	std	Y+4, r21	; 0x04
    3564:	4b 83       	std	Y+3, r20	; 0x03
		Refresh_TCNT2 = TCNT2;
    3566:	20 91 b2 00 	lds	r18, 0x00B2
    356a:	2a 8b       	std	Y+18, r18	; 0x12

		// Auto-disarm timer
		Disarm_timer += (uint8_t) (TCNT2 - Disarm_TCNT2);
    356c:	80 91 b2 00 	lds	r24, 0x00B2
    3570:	3b 89       	ldd	r19, Y+19	; 0x13
    3572:	83 1b       	sub	r24, r19
    3574:	28 0e       	add	r2, r24
    3576:	31 1c       	adc	r3, r1
		Disarm_TCNT2 = TCNT2;
    3578:	40 91 b2 00 	lds	r20, 0x00B2
    357c:	4b 8b       	std	Y+19, r20	; 0x13

		// Timer for audible alarms
		Ticker_Count += (uint8_t) (TCNT2 - Ticker_TCNT2);
    357e:	80 91 b2 00 	lds	r24, 0x00B2
    3582:	2d 89       	ldd	r18, Y+21	; 0x15
    3584:	82 1b       	sub	r24, r18
    3586:	4b 85       	ldd	r20, Y+11	; 0x0b
    3588:	5c 85       	ldd	r21, Y+12	; 0x0c
    358a:	48 0f       	add	r20, r24
    358c:	51 1d       	adc	r21, r1
    358e:	5c 87       	std	Y+12, r21	; 0x0c
    3590:	4b 87       	std	Y+11, r20	; 0x0b
		Ticker_TCNT2 = TCNT2;
    3592:	20 91 b2 00 	lds	r18, 0x00B2
    3596:	2d 8b       	std	Y+21, r18	; 0x15

		//************************************************************
		//* Read sensors
		//************************************************************

		ReadGyros();
    3598:	0e 94 75 1e 	call	0x3cea	; 0x3cea <ReadGyros>
		ReadAcc();
    359c:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <ReadAcc>
		// These two are concatenated to create a virtual timer that can measure up to 
		// 256 x 26.2ms = 6.7072s at which point the "period" is 16,768,000, a 24-bit number
		//************************************************************
		
		// Safely get current value of TCNT1
		Save_TCNT1 = TIM16_ReadTCNT1();
    35a0:	0e 94 d5 27 	call	0x4faa	; 0x4faa <TIM16_ReadTCNT1>
		
		// Reset Timer0 count
		TCNT0 = 0;
    35a4:	16 bc       	out	0x26, r1	; 38
		{
			ticker_16 = (65536 - LoopStartTCNT1) + Save_TCNT1;
		}
		else
		{
			ticker_16 = (Save_TCNT1 - LoopStartTCNT1);
    35a6:	20 91 10 05 	lds	r18, 0x0510
    35aa:	30 91 11 05 	lds	r19, 0x0511
    35ae:	ac 01       	movw	r20, r24
    35b0:	42 1b       	sub	r20, r18
    35b2:	53 0b       	sbc	r21, r19
		}
		
		// Store old TCNT for next measurement
		LoopStartTCNT1 = Save_TCNT1;
    35b4:	90 93 11 05 	sts	0x0511, r25
    35b8:	80 93 10 05 	sts	0x0510, r24
		
		// Handle both Timer1 under- and over-run cases
		// If TMR0_counter is less than 2, ICNT1 has not overflowed
		if (TMR0_counter < 2)
    35bc:	80 91 c5 07 	lds	r24, 0x07C5
    35c0:	90 91 c6 07 	lds	r25, 0x07C6
    35c4:	60 e0       	ldi	r22, 0x00	; 0
    35c6:	70 e0       	ldi	r23, 0x00	; 0
    35c8:	02 97       	sbiw	r24, 0x02	; 2
    35ca:	48 f4       	brcc	.+18     	; 0x35de <main+0x6c2>
		{
			interval = ticker_16;
    35cc:	40 93 53 05 	sts	0x0553, r20
    35d0:	50 93 54 05 	sts	0x0554, r21
    35d4:	60 93 55 05 	sts	0x0555, r22
    35d8:	70 93 56 05 	sts	0x0556, r23
    35dc:	19 c0       	rjmp	.+50     	; 0x3610 <main+0x6f4>
		// If TMR0_counter is 2 or more, then TCNT1 has overflowed
		// So we use chunks of TCNT0, counted during the loop interval
		// to work out the exact period.
		else
		{
			interval = ticker_16 + (TMR0_counter * 32768);
    35de:	80 91 c5 07 	lds	r24, 0x07C5
    35e2:	90 91 c6 07 	lds	r25, 0x07C6
    35e6:	a0 e0       	ldi	r26, 0x00	; 0
    35e8:	b0 e0       	ldi	r27, 0x00	; 0
    35ea:	2f e0       	ldi	r18, 0x0F	; 15
    35ec:	88 0f       	add	r24, r24
    35ee:	99 1f       	adc	r25, r25
    35f0:	aa 1f       	adc	r26, r26
    35f2:	bb 1f       	adc	r27, r27
    35f4:	2a 95       	dec	r18
    35f6:	d1 f7       	brne	.-12     	; 0x35ec <main+0x6d0>
    35f8:	84 0f       	add	r24, r20
    35fa:	95 1f       	adc	r25, r21
    35fc:	a6 1f       	adc	r26, r22
    35fe:	b7 1f       	adc	r27, r23
    3600:	80 93 53 05 	sts	0x0553, r24
    3604:	90 93 54 05 	sts	0x0554, r25
    3608:	a0 93 55 05 	sts	0x0555, r26
    360c:	b0 93 56 05 	sts	0x0556, r27
		}

		TMR0_counter = 0;
    3610:	10 92 c6 07 	sts	0x07C6, r1
    3614:	10 92 c5 07 	sts	0x07C5, r1
				
		// Call IMU with interval
		simple_imu_update(interval);
    3618:	60 91 53 05 	lds	r22, 0x0553
    361c:	70 91 54 05 	lds	r23, 0x0554
    3620:	80 91 55 05 	lds	r24, 0x0555
    3624:	90 91 56 05 	lds	r25, 0x0556
    3628:	0e 94 75 22 	call	0x44ea	; 0x44ea <simple_imu_update>

		//************************************************************
		//* Update I-terms, average gyro values
		//************************************************************

		Sensor_PID();
    362c:	0e 94 49 38 	call	0x7092	; 0x7092 <Sensor_PID>
		//************************************************************
		//* Measure incoming RC rate and flag no signal
		//************************************************************

		// Check to see if the RC input is overdue (500ms)
		if (RC_Timeout > RC_OVERDUE)
    3630:	2d 81       	ldd	r18, Y+5	; 0x05
    3632:	3e 81       	ldd	r19, Y+6	; 0x06
    3634:	26 32       	cpi	r18, 0x26	; 38
    3636:	36 42       	sbci	r19, 0x26	; 38
    3638:	18 f0       	brcs	.+6      	; 0x3640 <main+0x724>
		{
			Overdue = true;	// This results in a "No Signal" error
    363a:	81 e0       	ldi	r24, 0x01	; 1
    363c:	80 93 0f 05 	sts	0x050F, r24
		}

		if (Interrupted)
    3640:	80 91 c2 07 	lds	r24, 0x07C2
    3644:	88 23       	and	r24, r24
    3646:	89 f0       	breq	.+34     	; 0x366a <main+0x74e>
		{
			RC_Timeout = 0;					// Reset RC timeout
			Overdue = false;				// No longer overdue			
    3648:	10 92 0f 05 	sts	0x050F, r1
			
			// Measure incoming RC rate. Threshold is 60Hz.
			if (RC_Rate_Timer > SLOW_RC_RATE)
    364c:	21 e0       	ldi	r18, 0x01	; 1
    364e:	2a 87       	std	Y+10, r18	; 0x0a
    3650:	34 ec       	ldi	r19, 0xC4	; 196
    3652:	43 16       	cp	r4, r19
    3654:	32 ea       	ldi	r19, 0xA2	; 162
    3656:	53 06       	cpc	r5, r19
    3658:	61 04       	cpc	r6, r1
    365a:	71 04       	cpc	r7, r1
    365c:	08 f4       	brcc	.+2      	; 0x3660 <main+0x744>
    365e:	1a 86       	std	Y+10, r1	; 0x0a
			Overdue = true;	// This results in a "No Signal" error
		}

		if (Interrupted)
		{
			RC_Timeout = 0;					// Reset RC timeout
    3660:	1e 82       	std	Y+6, r1	; 0x06
    3662:	1d 82       	std	Y+5, r1	; 0x05
			else
			{
				SlowRC = false;
			}

			RC_Rate_Timer = 0;
    3664:	41 2c       	mov	r4, r1
    3666:	51 2c       	mov	r5, r1
    3668:	32 01       	movw	r6, r4
		//* Manage desired output update rate when limited by
		//* the PWM rate set to "Low"
		//************************************************************

		// Flag update required based on SERVO_RATE_LOW (50Hz)
		if (Servo_Rate > SERVO_RATE_LOW)
    366a:	4b 8d       	ldd	r20, Y+27	; 0x1b
    366c:	5c 8d       	ldd	r21, Y+28	; 0x1c
    366e:	47 38       	cpi	r20, 0x87	; 135
    3670:	51 40       	sbci	r21, 0x01	; 1
    3672:	20 f0       	brcs	.+8      	; 0x367c <main+0x760>
		{
			ServoTick = true; // Slow device is ready for output generation
			Servo_Rate = 0;
    3674:	1c 8e       	std	Y+28, r1	; 0x1c
    3676:	1b 8e       	std	Y+27, r1	; 0x1b
		//************************************************************

		// Flag update required based on SERVO_RATE_LOW (50Hz)
		if (Servo_Rate > SERVO_RATE_LOW)
		{
			ServoTick = true; // Slow device is ready for output generation
    3678:	21 e0       	ldi	r18, 0x01	; 1
    367a:	29 87       	std	Y+9, r18	; 0x09
		//************************************************************

		// Cases where we are ready to output
		if	(
				// Interrupted and LOW or SYNC
				Interrupted &&												// Only when interrupted (RC receive completed)
    367c:	80 91 c2 07 	lds	r24, 0x07C2
		//* Output PWM to ESCs/Servos where required, 
		//* based on a very specific set of conditions
		//************************************************************

		// Cases where we are ready to output
		if	(
    3680:	88 23       	and	r24, r24
    3682:	f1 f0       	breq	.+60     	; 0x36c0 <main+0x7a4>
				// Interrupted and LOW or SYNC
				Interrupted &&												// Only when interrupted (RC receive completed)
    3684:	3a 85       	ldd	r19, Y+10	; 0x0a
    3686:	31 11       	cpse	r19, r1
    3688:	03 c0       	rjmp	.+6      	; 0x3690 <main+0x774>
				(
					(SlowRC && (Config.Servo_rate == LOW)) || 				// Plan A (Run as fast as the incoming RC if slow RC detected with LOW selected)
    368a:	49 85       	ldd	r20, Y+9	; 0x09
    368c:	44 23       	and	r20, r20
    368e:	21 f0       	breq	.+8      	; 0x3698 <main+0x77c>
    3690:	80 91 36 06 	lds	r24, 0x0636
    3694:	88 23       	and	r24, r24
    3696:	21 f0       	breq	.+8      	; 0x36a0 <main+0x784>
					(ServoTick && !SlowRC && (Config.Servo_rate == LOW)) ||	// Plan B (Run no faster than the preset rate (ServoTick) if fast RC detected with LOW selected)
    3698:	80 91 36 06 	lds	r24, 0x0636
    369c:	18 16       	cp	r1, r24
    369e:	84 f4       	brge	.+32     	; 0x36c0 <main+0x7a4>
					(Config.Servo_rate >= SYNC)								// Plan C (Run as fast as the incoming RC if in SYNC or MAX modes)
				)
			)
		{
			Interrupted = false;				// Reset interrupted flag
    36a0:	10 92 c2 07 	sts	0x07C2, r1
			ServoTick = false;					// Reset output requested flag
			Servo_Rate = 0;						// Reset servo rate timer
			
			Calculate_PID();					// Calculate PID values
    36a4:	0e 94 d9 39 	call	0x73b2	; 0x73b2 <Calculate_PID>
			ProcessMixer();						// Do all the mixer tasks - can be very slow
    36a8:	0e 94 56 31 	call	0x62ac	; 0x62ac <ProcessMixer>
			UpdateServos();						// Transfer Config.Channel[i].value data to ServoOut[i] and check servo limits
    36ac:	0e 94 02 31 	call	0x6204	; 0x6204 <UpdateServos>
			output_servo_ppm();					// Output servo signal
    36b0:	0e 94 37 3d 	call	0x7a6e	; 0x7a6e <output_servo_ppm>
			
			LoopCount = 0;						// Reset loop counter for averaging accVert
    36b4:	10 92 0e 05 	sts	0x050E, r1
				)
			)
		{
			Interrupted = false;				// Reset interrupted flag
			ServoTick = false;					// Reset output requested flag
			Servo_Rate = 0;						// Reset servo rate timer
    36b8:	1c 8e       	std	Y+28, r1	; 0x1c
    36ba:	1b 8e       	std	Y+27, r1	; 0x1b
					(Config.Servo_rate >= SYNC)								// Plan C (Run as fast as the incoming RC if in SYNC or MAX modes)
				)
			)
		{
			Interrupted = false;				// Reset interrupted flag
			ServoTick = false;					// Reset output requested flag
    36bc:	19 86       	std	Y+9, r1	; 0x09
			Calculate_PID();					// Calculate PID values
			ProcessMixer();						// Do all the mixer tasks - can be very slow
			UpdateServos();						// Transfer Config.Channel[i].value data to ServoOut[i] and check servo limits
			output_servo_ppm();					// Output servo signal
			
			LoopCount = 0;						// Reset loop counter for averaging accVert
    36be:	02 c0       	rjmp	.+4      	; 0x36c4 <main+0x7a8>
		}

		// Not ready for output, so cancel the current interrupt and wait for the next one
		else
		{
			Interrupted = false;				// Reset interrupted flag
    36c0:	10 92 c2 07 	sts	0x07C2, r1
		//* Carefully update idle screen if error level changed
		//************************************************************	

		// Only update idle when error state has changed.
		// This prevents the continual updating of the LCD disrupting the FC
		if (old_alarms != General_error)
    36c4:	80 91 17 05 	lds	r24, 0x0517
    36c8:	90 91 14 05 	lds	r25, 0x0514
    36cc:	98 13       	cpse	r25, r24
		{
			// Force update of idle screen
			Menu_mode = STATUS_TIMEOUT;
    36ce:	16 e0       	ldi	r17, 0x06	; 6
		}
			
		// Save current alarm state into old_alarms
		old_alarms = General_error;
    36d0:	80 93 14 05 	sts	0x0514, r24
		//************************************************************
		//* Transition state handling
		//************************************************************

		// Update timed transition when changing flight modes
		if (Config.FlightSel != old_flight)
    36d4:	0d 85       	ldd	r16, Y+13	; 0x0d
		
		// 32-bit timers (Max. 1718s measurement on T1, 220K seconds on T2)

		// Work out the current RC rate by measuring between incoming RC packets
		RC_Rate_Timer += (Save_TCNT1 - RC_Rate_TCNT1);
		RC_Rate_TCNT1 = Save_TCNT1;
    36d6:	29 8d       	ldd	r18, Y+25	; 0x19
    36d8:	3a 8d       	ldd	r19, Y+26	; 0x1a
    36da:	3f 87       	std	Y+15, r19	; 0x0f
    36dc:	2e 87       	std	Y+14, r18	; 0x0e
		}
			
		// Save current alarm state into old_alarms
		old_alarms = General_error;
		
	} // while loop
    36de:	4d cc       	rjmp	.-1894   	; 0x2f7a <main+0x5e>
			// Trim lower end to zero (0 to 2250)
			if (temp1 < 0) temp1 = 0;

			// Convert 0 to 2250 to 0 to 125. Divide by 20
			// Round to avoid truncation errors
			transition = (temp1 + 10) / 20;
    36e0:	70 93 19 05 	sts	0x0519, r23
    36e4:	60 93 18 05 	sts	0x0518, r22

		// Always in the TRANSITIONING state when Config.TransitionSpeed is 0
		// This prevents state changes when controlled by a channel
		if (Config.TransitionSpeed == 0)
		{
			Transition_state = TRANSITIONING;
    36e8:	45 e0       	ldi	r20, 0x05	; 5
    36ea:	40 93 1a 05 	sts	0x051A, r20
    36ee:	07 ce       	rjmp	.-1010   	; 0x32fe <main+0x3e2>

000036f0 <spiwrite>:
const uint8_t pagemap[] PROGMEM 		= { 7, 6, 5, 4, 3, 2, 1, 0 }; 
const uint8_t lcd_commmands[] PROGMEM	= {0xAF,0x40,0xA0,0xA6,0xA4,0xA2,0xEE,0xC8,0x2F,0x24,0xAC,0x00,0xF8,0x00};	// LCD command string 14

// Software SPI write
inline void spiwrite(uint8_t c) 
{
    36f0:	0f 93       	push	r16
    36f2:	1f 93       	push	r17
    36f4:	cf 93       	push	r28
    36f6:	df 93       	push	r29
    36f8:	c7 e0       	ldi	r28, 0x07	; 7
    36fa:	d0 e0       	ldi	r29, 0x00	; 0
	int8_t i;
	for (i = 7; i >= 0; i--) 
	{
		LCD_SCL = 0;
		if (c & (1 << (i)))		// Bit set?
    36fc:	08 2f       	mov	r16, r24
    36fe:	10 e0       	ldi	r17, 0x00	; 0
inline void spiwrite(uint8_t c) 
{
	int8_t i;
	for (i = 7; i >= 0; i--) 
	{
		LCD_SCL = 0;
    3700:	5c 98       	cbi	0x0b, 4	; 11
		if (c & (1 << (i)))		// Bit set?
    3702:	c8 01       	movw	r24, r16
    3704:	0c 2e       	mov	r0, r28
    3706:	02 c0       	rjmp	.+4      	; 0x370c <spiwrite+0x1c>
    3708:	95 95       	asr	r25
    370a:	87 95       	ror	r24
    370c:	0a 94       	dec	r0
    370e:	e2 f7       	brpl	.-8      	; 0x3708 <spiwrite+0x18>
    3710:	80 ff       	sbrs	r24, 0
    3712:	02 c0       	rjmp	.+4      	; 0x3718 <spiwrite+0x28>
		{
			LCD_SI = 1;
    3714:	59 9a       	sbi	0x0b, 1	; 11
    3716:	01 c0       	rjmp	.+2      	; 0x371a <spiwrite+0x2a>
		}
		else					// Bit clear?
		{
			LCD_SI = 0;
    3718:	59 98       	cbi	0x0b, 1	; 11
		}
		
		LCD_SCL = 1;
    371a:	5c 9a       	sbi	0x0b, 4	; 11

		glcd_delay();			// 250ns
    371c:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <glcd_delay>
    3720:	21 97       	sbiw	r28, 0x01	; 1
    3722:	70 f7       	brcc	.-36     	; 0x3700 <spiwrite+0x10>
	}
}
    3724:	df 91       	pop	r29
    3726:	cf 91       	pop	r28
    3728:	1f 91       	pop	r17
    372a:	0f 91       	pop	r16
    372c:	08 95       	ret

0000372e <st7565_command>:

// Send command to LCD
void st7565_command(uint8_t c) 
{
	LCD_A0 = 0;
    372e:	5f 98       	cbi	0x0b, 7	; 11
	spiwrite(c);
    3730:	0e 94 78 1b 	call	0x36f0	; 0x36f0 <spiwrite>
    3734:	08 95       	ret

00003736 <st7565_data>:
}

// Send data to LCD
void st7565_data(uint8_t c) 
{
	LCD_A0 = 1;
    3736:	5f 9a       	sbi	0x0b, 7	; 11
	spiwrite(c);
    3738:	0e 94 78 1b 	call	0x36f0	; 0x36f0 <spiwrite>
    373c:	08 95       	ret

0000373e <st7565_set_brightness>:
}


// Set LCD brightness
void st7565_set_brightness(uint8_t val) 
{
    373e:	cf 93       	push	r28
    3740:	c8 2f       	mov	r28, r24
	st7565_command(CMD_SET_VOLUME_FIRST);					// 0x81
    3742:	81 e8       	ldi	r24, 0x81	; 129
    3744:	0e 94 97 1b 	call	0x372e	; 0x372e <st7565_command>
	st7565_command(val);
    3748:	8c 2f       	mov	r24, r28
    374a:	0e 94 97 1b 	call	0x372e	; 0x372e <st7565_command>
}
    374e:	cf 91       	pop	r28
    3750:	08 95       	ret

00003752 <st7565_init>:
	spiwrite(c);
}

// Initialise LCD
void st7565_init(void) 
{
    3752:	cf 93       	push	r28
    3754:	df 93       	push	r29
	// Toggle RST low to reset and CS low so it'll listen to us
	LCD_CSI = 0;
    3756:	5d 98       	cbi	0x0b, 5	; 11
	LCD_RES = 0;
    3758:	5e 98       	cbi	0x0b, 6	; 11
    375a:	87 e8       	ldi	r24, 0x87	; 135
    375c:	93 e1       	ldi	r25, 0x13	; 19
    375e:	01 97       	sbiw	r24, 0x01	; 1
    3760:	f1 f7       	brne	.-4      	; 0x375e <st7565_init+0xc>
    3762:	00 c0       	rjmp	.+0      	; 0x3764 <st7565_init+0x12>
    3764:	00 00       	nop
	_delay_ms(1); // Datasheet says 1us for 3.3V operation
	LCD_RES = 1;
    3766:	5e 9a       	sbi	0x0b, 6	; 11
    3768:	c8 ec       	ldi	r28, 0xC8	; 200
    376a:	dd e0       	ldi	r29, 0x0D	; 13

	// Send command sequence
	for (int i = 0; i < 14; i++)
	{
		st7565_command((uint8_t)pgm_read_byte(&lcd_commmands[i]));
    376c:	fe 01       	movw	r30, r28
    376e:	84 91       	lpm	r24, Z
    3770:	0e 94 97 1b 	call	0x372e	; 0x372e <st7565_command>
    3774:	21 96       	adiw	r28, 0x01	; 1
	LCD_RES = 0;
	_delay_ms(1); // Datasheet says 1us for 3.3V operation
	LCD_RES = 1;

	// Send command sequence
	for (int i = 0; i < 14; i++)
    3776:	fd e0       	ldi	r31, 0x0D	; 13
    3778:	c6 3d       	cpi	r28, 0xD6	; 214
    377a:	df 07       	cpc	r29, r31
    377c:	b9 f7       	brne	.-18     	; 0x376c <st7565_init+0x1a>
	{
		st7565_command((uint8_t)pgm_read_byte(&lcd_commmands[i]));
	}

	st7565_set_brightness((uint8_t)Config.Contrast);	
    377e:	80 91 32 06 	lds	r24, 0x0632
    3782:	0e 94 9f 1b 	call	0x373e	; 0x373e <st7565_set_brightness>
	st7565_command(CMD_SET_COM_REVERSE); 		// For logo	0xC8
    3786:	88 ec       	ldi	r24, 0xC8	; 200
    3788:	0e 94 97 1b 	call	0x372e	; 0x372e <st7565_command>
}
    378c:	df 91       	pop	r29
    378e:	cf 91       	pop	r28
    3790:	08 95       	ret

00003792 <write_buffer>:
	st7565_command(val);
}

// Write LCD buffer if type = 1 normal, 0 = logo.
void write_buffer(uint8_t *buffer, uint8_t type) 
{
    3792:	a0 e0       	ldi	r26, 0x00	; 0
    3794:	b0 e0       	ldi	r27, 0x00	; 0
    3796:	ef ec       	ldi	r30, 0xCF	; 207
    3798:	fb e1       	ldi	r31, 0x1B	; 27
    379a:	0c 94 cf 41 	jmp	0x839e	; 0x839e <__prologue_saves__+0x16>
    379e:	c6 ed       	ldi	r28, 0xD6	; 214
    37a0:	dd e0       	ldi	r29, 0x0D	; 13
    37a2:	8c 01       	movw	r16, r24
	uint8_t c, p;
	for(p = 0; p < 8; p++) 
	{
		st7565_command(CMD_SET_PAGE | (uint8_t)pgm_read_byte(&pagemap[p]));		// Page 7 to 0
    37a4:	fe 01       	movw	r30, r28
    37a6:	84 91       	lpm	r24, Z
    37a8:	80 6b       	ori	r24, 0xB0	; 176
    37aa:	0e 94 97 1b 	call	0x372e	; 0x372e <st7565_command>
		st7565_command(CMD_SET_COLUMN_LOWER | (0x0 & 0xf));						// Column 0
    37ae:	80 e0       	ldi	r24, 0x00	; 0
    37b0:	0e 94 97 1b 	call	0x372e	; 0x372e <st7565_command>
		st7565_command(CMD_SET_COLUMN_UPPER | ((0x0 >> 4) & 0xf));				// Column 0
    37b4:	80 e1       	ldi	r24, 0x10	; 16
    37b6:	0e 94 97 1b 	call	0x372e	; 0x372e <st7565_command>
		st7565_command(CMD_RMW);												// Sets auto-increment
    37ba:	80 ee       	ldi	r24, 0xE0	; 224
    37bc:	0e 94 97 1b 	call	0x372e	; 0x372e <st7565_command>
    37c0:	78 01       	movw	r14, r16

		for(c = 0; c < 128; c++) 
    37c2:	d1 2c       	mov	r13, r1
		{
			st7565_data(buffer[(128*p)+c]);
    37c4:	f7 01       	movw	r30, r14
    37c6:	81 91       	ld	r24, Z+
    37c8:	7f 01       	movw	r14, r30
    37ca:	0e 94 9b 1b 	call	0x3736	; 0x3736 <st7565_data>
		st7565_command(CMD_SET_PAGE | (uint8_t)pgm_read_byte(&pagemap[p]));		// Page 7 to 0
		st7565_command(CMD_SET_COLUMN_LOWER | (0x0 & 0xf));						// Column 0
		st7565_command(CMD_SET_COLUMN_UPPER | ((0x0 >> 4) & 0xf));				// Column 0
		st7565_command(CMD_RMW);												// Sets auto-increment

		for(c = 0; c < 128; c++) 
    37ce:	d3 94       	inc	r13
    37d0:	f0 e8       	ldi	r31, 0x80	; 128
    37d2:	df 12       	cpse	r13, r31
    37d4:	f7 cf       	rjmp	.-18     	; 0x37c4 <write_buffer+0x32>
    37d6:	21 96       	adiw	r28, 0x01	; 1
    37d8:	00 58       	subi	r16, 0x80	; 128
    37da:	1f 4f       	sbci	r17, 0xFF	; 255

// Write LCD buffer if type = 1 normal, 0 = logo.
void write_buffer(uint8_t *buffer, uint8_t type) 
{
	uint8_t c, p;
	for(p = 0; p < 8; p++) 
    37dc:	8d e0       	ldi	r24, 0x0D	; 13
    37de:	ce 3d       	cpi	r28, 0xDE	; 222
    37e0:	d8 07       	cpc	r29, r24
    37e2:	01 f7       	brne	.-64     	; 0x37a4 <write_buffer+0x12>
		for(c = 0; c < 128; c++) 
		{
			st7565_data(buffer[(128*p)+c]);
		}
	}
}
    37e4:	cd b7       	in	r28, 0x3d	; 61
    37e6:	de b7       	in	r29, 0x3e	; 62
    37e8:	e7 e0       	ldi	r30, 0x07	; 7
    37ea:	0c 94 eb 41 	jmp	0x83d6	; 0x83d6 <__epilogue_restores__+0x16>

000037ee <clear_buffer>:

// Clear buffer
void clear_buffer(uint8_t *buff) 
{
	memset(buff, 0, 1024);
    37ee:	20 e0       	ldi	r18, 0x00	; 0
    37f0:	34 e0       	ldi	r19, 0x04	; 4
    37f2:	fc 01       	movw	r30, r24
    37f4:	a9 01       	movw	r20, r18
    37f6:	11 92       	st	Z+, r1
    37f8:	41 50       	subi	r20, 0x01	; 1
    37fa:	50 40       	sbci	r21, 0x00	; 0
    37fc:	e1 f7       	brne	.-8      	; 0x37f6 <clear_buffer+0x8>
    37fe:	08 95       	ret

00003800 <clear_screen>:
}

// Clear screen (does not clear buffer)
void clear_screen(void)
{
    3800:	cf 93       	push	r28
    3802:	df 93       	push	r29
	uint8_t p, c;

	for(p = 0; p < 8; p++)
    3804:	d0 e0       	ldi	r29, 0x00	; 0
	{
		st7565_command(CMD_SET_PAGE | p);								// Set page to p
    3806:	8d 2f       	mov	r24, r29
    3808:	80 6b       	ori	r24, 0xB0	; 176
    380a:	0e 94 97 1b 	call	0x372e	; 0x372e <st7565_command>
		for(c = 0; c < 128; c++) 										// Was 129, which I think is wrong...
    380e:	c0 e0       	ldi	r28, 0x00	; 0
		{
			st7565_command(CMD_SET_COLUMN_LOWER | (c & 0xf));
    3810:	8c 2f       	mov	r24, r28
    3812:	8f 70       	andi	r24, 0x0F	; 15
    3814:	0e 94 97 1b 	call	0x372e	; 0x372e <st7565_command>
			st7565_command(CMD_SET_COLUMN_UPPER | ((c >> 4) & 0xf));	// Set column to c
    3818:	8c 2f       	mov	r24, r28
    381a:	82 95       	swap	r24
    381c:	8f 70       	andi	r24, 0x0F	; 15
    381e:	80 61       	ori	r24, 0x10	; 16
    3820:	0e 94 97 1b 	call	0x372e	; 0x372e <st7565_command>
			st7565_data(0x00);											// Clear data
    3824:	80 e0       	ldi	r24, 0x00	; 0
    3826:	0e 94 9b 1b 	call	0x3736	; 0x3736 <st7565_data>
	uint8_t p, c;

	for(p = 0; p < 8; p++)
	{
		st7565_command(CMD_SET_PAGE | p);								// Set page to p
		for(c = 0; c < 128; c++) 										// Was 129, which I think is wrong...
    382a:	cf 5f       	subi	r28, 0xFF	; 255
    382c:	c0 38       	cpi	r28, 0x80	; 128
    382e:	81 f7       	brne	.-32     	; 0x3810 <clear_screen+0x10>
// Clear screen (does not clear buffer)
void clear_screen(void)
{
	uint8_t p, c;

	for(p = 0; p < 8; p++)
    3830:	df 5f       	subi	r29, 0xFF	; 255
    3832:	d8 30       	cpi	r29, 0x08	; 8
    3834:	41 f7       	brne	.-48     	; 0x3806 <clear_screen+0x6>
			st7565_command(CMD_SET_COLUMN_LOWER | (c & 0xf));
			st7565_command(CMD_SET_COLUMN_UPPER | ((c >> 4) & 0xf));	// Set column to c
			st7565_data(0x00);											// Clear data
		}
	}
}
    3836:	df 91       	pop	r29
    3838:	cf 91       	pop	r28
    383a:	08 95       	ret

0000383c <setpixel>:
//***********************************************************

// Set a single pixel
void setpixel(uint8_t *buff, uint8_t x, uint8_t y, uint8_t color) 
{
	if ((x >= LCDWIDTH) || (y >= LCDHEIGHT))
    383c:	67 fd       	sbrc	r22, 7
    383e:	36 c0       	rjmp	.+108    	; 0x38ac <setpixel+0x70>
    3840:	40 34       	cpi	r20, 0x40	; 64
    3842:	a0 f5       	brcc	.+104    	; 0x38ac <setpixel+0x70>
    3844:	34 2f       	mov	r19, r20
    3846:	36 95       	lsr	r19
    3848:	36 95       	lsr	r19
    384a:	36 95       	lsr	r19
    384c:	e6 2f       	mov	r30, r22
    384e:	f0 e0       	ldi	r31, 0x00	; 0
    3850:	50 e0       	ldi	r21, 0x00	; 0
	{
		return;
	}
	// x is which column
	if (color)
    3852:	22 23       	and	r18, r18
    3854:	a9 f0       	breq	.+42     	; 0x3880 <setpixel+0x44>
	{
		buff[x+ (y/8)*128] |= (1 << (7-(y%8)));  
    3856:	20 e8       	ldi	r18, 0x80	; 128
    3858:	32 9f       	mul	r19, r18
    385a:	e0 0d       	add	r30, r0
    385c:	f1 1d       	adc	r31, r1
    385e:	11 24       	eor	r1, r1
    3860:	e8 0f       	add	r30, r24
    3862:	f9 1f       	adc	r31, r25
    3864:	40 95       	com	r20
    3866:	50 95       	com	r21
    3868:	47 70       	andi	r20, 0x07	; 7
    386a:	55 27       	eor	r21, r21
    386c:	81 e0       	ldi	r24, 0x01	; 1
    386e:	90 e0       	ldi	r25, 0x00	; 0
    3870:	04 2e       	mov	r0, r20
    3872:	01 c0       	rjmp	.+2      	; 0x3876 <setpixel+0x3a>
    3874:	88 0f       	add	r24, r24
    3876:	0a 94       	dec	r0
    3878:	ea f7       	brpl	.-6      	; 0x3874 <setpixel+0x38>
    387a:	90 81       	ld	r25, Z
    387c:	98 2b       	or	r25, r24
    387e:	15 c0       	rjmp	.+42     	; 0x38aa <setpixel+0x6e>
	}
	else
	{
		buff[x+ (y/8)*128] &= ~(1 << (7-(y%8))); 
    3880:	20 e8       	ldi	r18, 0x80	; 128
    3882:	32 9f       	mul	r19, r18
    3884:	e0 0d       	add	r30, r0
    3886:	f1 1d       	adc	r31, r1
    3888:	11 24       	eor	r1, r1
    388a:	e8 0f       	add	r30, r24
    388c:	f9 1f       	adc	r31, r25
    388e:	40 95       	com	r20
    3890:	50 95       	com	r21
    3892:	47 70       	andi	r20, 0x07	; 7
    3894:	55 27       	eor	r21, r21
    3896:	81 e0       	ldi	r24, 0x01	; 1
    3898:	90 e0       	ldi	r25, 0x00	; 0
    389a:	04 2e       	mov	r0, r20
    389c:	01 c0       	rjmp	.+2      	; 0x38a0 <setpixel+0x64>
    389e:	88 0f       	add	r24, r24
    38a0:	0a 94       	dec	r0
    38a2:	ea f7       	brpl	.-6      	; 0x389e <setpixel+0x62>
    38a4:	80 95       	com	r24
    38a6:	90 81       	ld	r25, Z
    38a8:	98 23       	and	r25, r24
    38aa:	90 83       	st	Z, r25
    38ac:	08 95       	ret

000038ae <drawline>:
	}
}

// Bresenham's algorithm - From wikipedia
void drawline(uint8_t *buff, uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1, uint8_t color) 
{
    38ae:	a0 e0       	ldi	r26, 0x00	; 0
    38b0:	b0 e0       	ldi	r27, 0x00	; 0
    38b2:	ed e5       	ldi	r30, 0x5D	; 93
    38b4:	fc e1       	ldi	r31, 0x1C	; 28
    38b6:	0c 94 cb 41 	jmp	0x8396	; 0x8396 <__prologue_saves__+0xe>
    38ba:	ec 01       	movw	r28, r24
    38bc:	16 2f       	mov	r17, r22
    38be:	f4 2e       	mov	r15, r20
    38c0:	d2 2e       	mov	r13, r18
	uint8_t steep = abs(y1 - y0) > abs(x1 - x0);
    38c2:	a0 2f       	mov	r26, r16
    38c4:	b0 e0       	ldi	r27, 0x00	; 0
    38c6:	a4 1b       	sub	r26, r20
    38c8:	b1 09       	sbc	r27, r1
    38ca:	b7 ff       	sbrs	r27, 7
    38cc:	03 c0       	rjmp	.+6      	; 0x38d4 <drawline+0x26>
    38ce:	b1 95       	neg	r27
    38d0:	a1 95       	neg	r26
    38d2:	b1 09       	sbc	r27, r1
    38d4:	ed 2d       	mov	r30, r13
    38d6:	f0 e0       	ldi	r31, 0x00	; 0
    38d8:	e1 1b       	sub	r30, r17
    38da:	f1 09       	sbc	r31, r1
    38dc:	f7 ff       	sbrs	r31, 7
    38de:	03 c0       	rjmp	.+6      	; 0x38e6 <drawline+0x38>
    38e0:	f1 95       	neg	r31
    38e2:	e1 95       	neg	r30
    38e4:	f1 09       	sbc	r31, r1
    38e6:	bb 24       	eor	r11, r11
    38e8:	b3 94       	inc	r11
    38ea:	ea 17       	cp	r30, r26
    38ec:	fb 07       	cpc	r31, r27
    38ee:	14 f0       	brlt	.+4      	; 0x38f4 <drawline+0x46>
    38f0:	b1 2c       	mov	r11, r1
    38f2:	06 c0       	rjmp	.+12     	; 0x3900 <drawline+0x52>
    38f4:	8d 2d       	mov	r24, r13
	if (steep) 
	{
		swap(x0, y0);
		swap(x1, y1);
    38f6:	d0 2e       	mov	r13, r16
    38f8:	08 2f       	mov	r16, r24
    38fa:	81 2f       	mov	r24, r17
void drawline(uint8_t *buff, uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1, uint8_t color) 
{
	uint8_t steep = abs(y1 - y0) > abs(x1 - x0);
	if (steep) 
	{
		swap(x0, y0);
    38fc:	1f 2d       	mov	r17, r15
    38fe:	f8 2e       	mov	r15, r24
		swap(x1, y1);
	}

	if (x0 > x1) 
    3900:	d1 16       	cp	r13, r17
    3902:	30 f4       	brcc	.+12     	; 0x3910 <drawline+0x62>
    3904:	8f 2d       	mov	r24, r15
	{
		swap(x0, x1);
		swap(y0, y1);
    3906:	f0 2e       	mov	r15, r16
    3908:	08 2f       	mov	r16, r24
    390a:	81 2f       	mov	r24, r17
    390c:	1d 2d       	mov	r17, r13
    390e:	d8 2e       	mov	r13, r24
	}

	uint8_t dx, dy;
	dx = x1 - x0;
    3910:	ad 2c       	mov	r10, r13
    3912:	a1 1a       	sub	r10, r17
	dy = abs(y1 - y0);
    3914:	e0 2f       	mov	r30, r16
    3916:	f0 e0       	ldi	r31, 0x00	; 0
    3918:	ef 19       	sub	r30, r15
    391a:	f1 09       	sbc	r31, r1
    391c:	f7 ff       	sbrs	r31, 7
    391e:	03 c0       	rjmp	.+6      	; 0x3926 <drawline+0x78>
    3920:	f1 95       	neg	r31
    3922:	e1 95       	neg	r30
    3924:	f1 09       	sbc	r31, r1
    3926:	9e 2e       	mov	r9, r30

	int8_t err = dx / 2;
    3928:	ca 2c       	mov	r12, r10
    392a:	c6 94       	lsr	r12
	int8_t ystep;

	if (y0 < y1) 
    392c:	f0 16       	cp	r15, r16
    392e:	10 f4       	brcc	.+4      	; 0x3934 <drawline+0x86>
	{
		ystep = 1;
    3930:	01 e0       	ldi	r16, 0x01	; 1
    3932:	10 c0       	rjmp	.+32     	; 0x3954 <drawline+0xa6>
	} 
	else 
	{
		ystep = -1;
    3934:	0f ef       	ldi	r16, 0xFF	; 255
    3936:	0e c0       	rjmp	.+28     	; 0x3954 <drawline+0xa6>

	for (; x0<x1; x0++) 
	{
		if (steep) 
		{
			setpixel(buff, y0, x0, color);
    3938:	2e 2d       	mov	r18, r14
		ystep = -1;
	}

	for (; x0<x1; x0++) 
	{
		if (steep) 
    393a:	bb 20       	and	r11, r11
    393c:	71 f0       	breq	.+28     	; 0x395a <drawline+0xac>
		{
			setpixel(buff, y0, x0, color);
    393e:	41 2f       	mov	r20, r17
    3940:	6f 2d       	mov	r22, r15
		} 
		else 
		{
			setpixel(buff, x0, y0, color);
    3942:	ce 01       	movw	r24, r28
    3944:	0e 94 1e 1c 	call	0x383c	; 0x383c <setpixel>
		}
		err -= dy;
    3948:	c9 18       	sub	r12, r9
		if (err < 0) 
    394a:	c7 fe       	sbrs	r12, 7
    394c:	02 c0       	rjmp	.+4      	; 0x3952 <drawline+0xa4>
		{
			y0 += ystep;
    394e:	f0 0e       	add	r15, r16
			err += dx;
    3950:	ca 0c       	add	r12, r10
	else 
	{
		ystep = -1;
	}

	for (; x0<x1; x0++) 
    3952:	1f 5f       	subi	r17, 0xFF	; 255
    3954:	1d 15       	cp	r17, r13
    3956:	80 f3       	brcs	.-32     	; 0x3938 <drawline+0x8a>
    3958:	03 c0       	rjmp	.+6      	; 0x3960 <drawline+0xb2>
		{
			setpixel(buff, y0, x0, color);
		} 
		else 
		{
			setpixel(buff, x0, y0, color);
    395a:	4f 2d       	mov	r20, r15
    395c:	61 2f       	mov	r22, r17
    395e:	f1 cf       	rjmp	.-30     	; 0x3942 <drawline+0x94>
		{
			y0 += ystep;
			err += dx;
		}
	}
}
    3960:	cd b7       	in	r28, 0x3d	; 61
    3962:	de b7       	in	r29, 0x3e	; 62
    3964:	eb e0       	ldi	r30, 0x0B	; 11
    3966:	0c 94 e7 41 	jmp	0x83ce	; 0x83ce <__epilogue_restores__+0xe>

0000396a <fillrect>:

// Filled rectangle
void fillrect(uint8_t *buff, uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color) 
{
    396a:	a0 e0       	ldi	r26, 0x00	; 0
    396c:	b0 e0       	ldi	r27, 0x00	; 0
    396e:	eb eb       	ldi	r30, 0xBB	; 187
    3970:	fc e1       	ldi	r31, 0x1C	; 28
    3972:	0c 94 cc 41 	jmp	0x8398	; 0x8398 <__prologue_saves__+0x10>
    3976:	6c 01       	movw	r12, r24
    3978:	a4 2e       	mov	r10, r20
	// Stupidest version - just pixels - but fast with internal buffer!
	for (uint8_t i=x; i<x+w; i++) 
    397a:	f6 2e       	mov	r15, r22
    397c:	c2 2f       	mov	r28, r18
    397e:	d0 e0       	ldi	r29, 0x00	; 0
    3980:	c6 0f       	add	r28, r22
    3982:	d1 1d       	adc	r29, r1
	{
		for (uint8_t j=y; j<y+h; j++) 
    3984:	10 e0       	ldi	r17, 0x00	; 0
    3986:	04 0f       	add	r16, r20
    3988:	11 1d       	adc	r17, r1

// Filled rectangle
void fillrect(uint8_t *buff, uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color) 
{
	// Stupidest version - just pixels - but fast with internal buffer!
	for (uint8_t i=x; i<x+w; i++) 
    398a:	8f 2d       	mov	r24, r15
    398c:	90 e0       	ldi	r25, 0x00	; 0
    398e:	8c 17       	cp	r24, r28
    3990:	9d 07       	cpc	r25, r29
    3992:	84 f4       	brge	.+32     	; 0x39b4 <fillrect+0x4a>
    3994:	ba 2c       	mov	r11, r10
	{
		for (uint8_t j=y; j<y+h; j++) 
    3996:	8b 2d       	mov	r24, r11
    3998:	90 e0       	ldi	r25, 0x00	; 0
    399a:	80 17       	cp	r24, r16
    399c:	91 07       	cpc	r25, r17
    399e:	44 f4       	brge	.+16     	; 0x39b0 <fillrect+0x46>
		{
			setpixel(buff, i, j, color);
    39a0:	2e 2d       	mov	r18, r14
    39a2:	4b 2d       	mov	r20, r11
    39a4:	6f 2d       	mov	r22, r15
    39a6:	c6 01       	movw	r24, r12
    39a8:	0e 94 1e 1c 	call	0x383c	; 0x383c <setpixel>
void fillrect(uint8_t *buff, uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color) 
{
	// Stupidest version - just pixels - but fast with internal buffer!
	for (uint8_t i=x; i<x+w; i++) 
	{
		for (uint8_t j=y; j<y+h; j++) 
    39ac:	b3 94       	inc	r11
    39ae:	f3 cf       	rjmp	.-26     	; 0x3996 <fillrect+0x2c>

// Filled rectangle
void fillrect(uint8_t *buff, uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color) 
{
	// Stupidest version - just pixels - but fast with internal buffer!
	for (uint8_t i=x; i<x+w; i++) 
    39b0:	f3 94       	inc	r15
    39b2:	eb cf       	rjmp	.-42     	; 0x398a <fillrect+0x20>
		for (uint8_t j=y; j<y+h; j++) 
		{
			setpixel(buff, i, j, color);
		}
	}
}
    39b4:	cd b7       	in	r28, 0x3d	; 61
    39b6:	de b7       	in	r29, 0x3e	; 62
    39b8:	ea e0       	ldi	r30, 0x0A	; 10
    39ba:	0c 94 e8 41 	jmp	0x83d0	; 0x83d0 <__epilogue_restores__+0x10>

000039be <drawrect>:

// Draw a rectangle
void drawrect(uint8_t *buff, uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color) 
{
    39be:	a0 e0       	ldi	r26, 0x00	; 0
    39c0:	b0 e0       	ldi	r27, 0x00	; 0
    39c2:	e5 ee       	ldi	r30, 0xE5	; 229
    39c4:	fc e1       	ldi	r31, 0x1C	; 28
    39c6:	0c 94 cb 41 	jmp	0x8396	; 0x8396 <__prologue_saves__+0xe>
    39ca:	ec 01       	movw	r28, r24
    39cc:	f6 2e       	mov	r15, r22
    39ce:	b4 2e       	mov	r11, r20
    39d0:	92 2e       	mov	r9, r18
	// Stupidest version - just pixels - but fast with internal buffer!
	for (uint8_t i=x; i<x+w; i++) 
    39d2:	16 2f       	mov	r17, r22
    39d4:	c2 2e       	mov	r12, r18
    39d6:	d1 2c       	mov	r13, r1
    39d8:	c6 0e       	add	r12, r22
    39da:	d1 1c       	adc	r13, r1
	{
		setpixel(buff, i, y, color);
		setpixel(buff, i, y+h-1, color);
    39dc:	aa 24       	eor	r10, r10
    39de:	aa 94       	dec	r10
    39e0:	a0 0e       	add	r10, r16
    39e2:	a4 0e       	add	r10, r20

// Draw a rectangle
void drawrect(uint8_t *buff, uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color) 
{
	// Stupidest version - just pixels - but fast with internal buffer!
	for (uint8_t i=x; i<x+w; i++) 
    39e4:	81 2f       	mov	r24, r17
    39e6:	90 e0       	ldi	r25, 0x00	; 0
    39e8:	8c 15       	cp	r24, r12
    39ea:	9d 05       	cpc	r25, r13
    39ec:	74 f4       	brge	.+28     	; 0x3a0a <drawrect+0x4c>
	{
		setpixel(buff, i, y, color);
    39ee:	2e 2d       	mov	r18, r14
    39f0:	4b 2d       	mov	r20, r11
    39f2:	61 2f       	mov	r22, r17
    39f4:	ce 01       	movw	r24, r28
    39f6:	0e 94 1e 1c 	call	0x383c	; 0x383c <setpixel>
		setpixel(buff, i, y+h-1, color);
    39fa:	2e 2d       	mov	r18, r14
    39fc:	4a 2d       	mov	r20, r10
    39fe:	61 2f       	mov	r22, r17
    3a00:	ce 01       	movw	r24, r28
    3a02:	0e 94 1e 1c 	call	0x383c	; 0x383c <setpixel>

// Draw a rectangle
void drawrect(uint8_t *buff, uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color) 
{
	// Stupidest version - just pixels - but fast with internal buffer!
	for (uint8_t i=x; i<x+w; i++) 
    3a06:	1f 5f       	subi	r17, 0xFF	; 255
    3a08:	ed cf       	rjmp	.-38     	; 0x39e4 <drawrect+0x26>
    3a0a:	db 2c       	mov	r13, r11
	{
		setpixel(buff, i, y, color);
		setpixel(buff, i, y+h-1, color);
	}
	for (uint8_t i=y; i<y+h; i++) 
    3a0c:	10 e0       	ldi	r17, 0x00	; 0
    3a0e:	0b 0d       	add	r16, r11
    3a10:	11 1d       	adc	r17, r1
	{
		setpixel(buff, x, i, color);
		setpixel(buff, x+w-1, i, color);
    3a12:	cc 24       	eor	r12, r12
    3a14:	ca 94       	dec	r12
    3a16:	c9 0c       	add	r12, r9
    3a18:	cf 0c       	add	r12, r15
	for (uint8_t i=x; i<x+w; i++) 
	{
		setpixel(buff, i, y, color);
		setpixel(buff, i, y+h-1, color);
	}
	for (uint8_t i=y; i<y+h; i++) 
    3a1a:	8d 2d       	mov	r24, r13
    3a1c:	90 e0       	ldi	r25, 0x00	; 0
    3a1e:	80 17       	cp	r24, r16
    3a20:	91 07       	cpc	r25, r17
    3a22:	74 f4       	brge	.+28     	; 0x3a40 <drawrect+0x82>
	{
		setpixel(buff, x, i, color);
    3a24:	2e 2d       	mov	r18, r14
    3a26:	4d 2d       	mov	r20, r13
    3a28:	6f 2d       	mov	r22, r15
    3a2a:	ce 01       	movw	r24, r28
    3a2c:	0e 94 1e 1c 	call	0x383c	; 0x383c <setpixel>
		setpixel(buff, x+w-1, i, color);
    3a30:	2e 2d       	mov	r18, r14
    3a32:	4d 2d       	mov	r20, r13
    3a34:	6c 2d       	mov	r22, r12
    3a36:	ce 01       	movw	r24, r28
    3a38:	0e 94 1e 1c 	call	0x383c	; 0x383c <setpixel>
	for (uint8_t i=x; i<x+w; i++) 
	{
		setpixel(buff, i, y, color);
		setpixel(buff, i, y+h-1, color);
	}
	for (uint8_t i=y; i<y+h; i++) 
    3a3c:	d3 94       	inc	r13
    3a3e:	ed cf       	rjmp	.-38     	; 0x3a1a <drawrect+0x5c>
	{
		setpixel(buff, x, i, color);
		setpixel(buff, x+w-1, i, color);
	} 
}
    3a40:	cd b7       	in	r28, 0x3d	; 61
    3a42:	de b7       	in	r29, 0x3e	; 62
    3a44:	eb e0       	ldi	r30, 0x0B	; 11
    3a46:	0c 94 e7 41 	jmp	0x83ce	; 0x83ce <__epilogue_restores__+0xe>

00003a4a <fillcircle>:

// Draw a filled circle
// Edge-clip bug fixed by D. Thompson - 3/2/2014
void fillcircle(uint8_t *buff, uint8_t x0, uint8_t y0, uint8_t r, uint8_t color) 
{
    3a4a:	a0 e0       	ldi	r26, 0x00	; 0
    3a4c:	b0 e0       	ldi	r27, 0x00	; 0
    3a4e:	eb e2       	ldi	r30, 0x2B	; 43
    3a50:	fd e1       	ldi	r31, 0x1D	; 29
    3a52:	0c 94 c6 41 	jmp	0x838c	; 0x838c <__prologue_saves__+0x4>
    3a56:	ec 01       	movw	r28, r24
    3a58:	96 2e       	mov	r9, r22
    3a5a:	a4 2e       	mov	r10, r20
	int8_t f = 1 - r;
    3a5c:	bb 24       	eor	r11, r11
    3a5e:	b3 94       	inc	r11
    3a60:	b2 1a       	sub	r11, r18
	int8_t ddF_x = 1;
	int8_t ddF_y = -2 * r;
    3a62:	82 2e       	mov	r8, r18
    3a64:	81 94       	neg	r8
    3a66:	88 0c       	add	r8, r8
	int8_t x = 0;
	int8_t y = r;
    3a68:	12 2f       	mov	r17, r18
	int8_t i = 0;

	for (i=y0-r; i<=y0+r; i++) 
    3a6a:	74 2e       	mov	r7, r20
    3a6c:	72 1a       	sub	r7, r18
    3a6e:	e4 2e       	mov	r14, r20
    3a70:	f1 2c       	mov	r15, r1
    3a72:	67 01       	movw	r12, r14
    3a74:	c2 0e       	add	r12, r18
    3a76:	d1 1c       	adc	r13, r1
    3a78:	87 2d       	mov	r24, r7
    3a7a:	99 27       	eor	r25, r25
    3a7c:	87 fd       	sbrc	r24, 7
    3a7e:	90 95       	com	r25
    3a80:	c8 16       	cp	r12, r24
    3a82:	d9 06       	cpc	r13, r25
    3a84:	44 f0       	brlt	.+16     	; 0x3a96 <fillcircle+0x4c>
	{
		setpixel(buff, x0, i, color);
    3a86:	20 2f       	mov	r18, r16
    3a88:	47 2d       	mov	r20, r7
    3a8a:	69 2d       	mov	r22, r9
    3a8c:	ce 01       	movw	r24, r28
    3a8e:	0e 94 1e 1c 	call	0x383c	; 0x383c <setpixel>
    3a92:	73 94       	inc	r7
    3a94:	f1 cf       	rjmp	.-30     	; 0x3a78 <fillcircle+0x2e>
	int8_t ddF_y = -2 * r;
	int8_t x = 0;
	int8_t y = r;
	int8_t i = 0;

	for (i=y0-r; i<=y0+r; i++) 
    3a96:	71 2c       	mov	r7, r1
	{
		setpixel(buff, x0, i, color);
	}

	while (x<y) 
    3a98:	71 16       	cp	r7, r17
    3a9a:	0c f0       	brlt	.+2      	; 0x3a9e <fillcircle+0x54>
    3a9c:	4c c0       	rjmp	.+152    	; 0x3b36 <fillcircle+0xec>
	{
		if (f >= 0) 
    3a9e:	b7 fc       	sbrc	r11, 7
    3aa0:	04 c0       	rjmp	.+8      	; 0x3aaa <fillcircle+0x60>
		{
			y--;
    3aa2:	11 50       	subi	r17, 0x01	; 1
			ddF_y += 2;
    3aa4:	83 94       	inc	r8
    3aa6:	83 94       	inc	r8
			f += ddF_y;
    3aa8:	b8 0c       	add	r11, r8
    3aaa:	73 94       	inc	r7
    3aac:	87 2d       	mov	r24, r7
    3aae:	88 0f       	add	r24, r24
    3ab0:	8f 5f       	subi	r24, 0xFF	; 255
		}

		x++;
		ddF_x += 2;
		f += ddF_x;
    3ab2:	b8 0e       	add	r11, r24

		for (i=y0-y; i<=y0+y; i++) 
    3ab4:	6a 2c       	mov	r6, r10
    3ab6:	61 1a       	sub	r6, r17
    3ab8:	67 01       	movw	r12, r14
    3aba:	c1 0e       	add	r12, r17
    3abc:	d1 1c       	adc	r13, r1
    3abe:	17 fd       	sbrc	r17, 7
    3ac0:	da 94       	dec	r13
    3ac2:	47 2c       	mov	r4, r7
    3ac4:	49 0c       	add	r4, r9
    3ac6:	59 2c       	mov	r5, r9
    3ac8:	57 18       	sub	r5, r7
    3aca:	86 2d       	mov	r24, r6
    3acc:	99 27       	eor	r25, r25
    3ace:	87 fd       	sbrc	r24, 7
    3ad0:	90 95       	com	r25
    3ad2:	c8 16       	cp	r12, r24
    3ad4:	d9 06       	cpc	r13, r25
    3ad6:	74 f0       	brlt	.+28     	; 0x3af4 <fillcircle+0xaa>
		{
			setpixel(buff, x0+x, i, color);
    3ad8:	20 2f       	mov	r18, r16
    3ada:	46 2d       	mov	r20, r6
    3adc:	64 2d       	mov	r22, r4
    3ade:	ce 01       	movw	r24, r28
    3ae0:	0e 94 1e 1c 	call	0x383c	; 0x383c <setpixel>
			setpixel(buff, x0-x, i, color);
    3ae4:	20 2f       	mov	r18, r16
    3ae6:	46 2d       	mov	r20, r6
    3ae8:	65 2d       	mov	r22, r5
    3aea:	ce 01       	movw	r24, r28
    3aec:	0e 94 1e 1c 	call	0x383c	; 0x383c <setpixel>
    3af0:	63 94       	inc	r6
    3af2:	eb cf       	rjmp	.-42     	; 0x3aca <fillcircle+0x80>
    3af4:	6a 2c       	mov	r6, r10
    3af6:	67 18       	sub	r6, r7
		} 
		for (i=y0-x; i<=y0+x; i++) 
    3af8:	67 01       	movw	r12, r14
    3afa:	c7 0c       	add	r12, r7
    3afc:	d1 1c       	adc	r13, r1
    3afe:	77 fc       	sbrc	r7, 7
    3b00:	da 94       	dec	r13
		{
			setpixel(buff, x0+y, i, color);
    3b02:	41 2e       	mov	r4, r17
    3b04:	49 0c       	add	r4, r9
			setpixel(buff, x0-y, i, color);
    3b06:	59 2c       	mov	r5, r9
    3b08:	51 1a       	sub	r5, r17
		for (i=y0-y; i<=y0+y; i++) 
		{
			setpixel(buff, x0+x, i, color);
			setpixel(buff, x0-x, i, color);
		} 
		for (i=y0-x; i<=y0+x; i++) 
    3b0a:	86 2d       	mov	r24, r6
    3b0c:	99 27       	eor	r25, r25
    3b0e:	87 fd       	sbrc	r24, 7
    3b10:	90 95       	com	r25
    3b12:	c8 16       	cp	r12, r24
    3b14:	d9 06       	cpc	r13, r25
    3b16:	0c f4       	brge	.+2      	; 0x3b1a <fillcircle+0xd0>
    3b18:	bf cf       	rjmp	.-130    	; 0x3a98 <fillcircle+0x4e>
		{
			setpixel(buff, x0+y, i, color);
    3b1a:	20 2f       	mov	r18, r16
    3b1c:	46 2d       	mov	r20, r6
    3b1e:	64 2d       	mov	r22, r4
    3b20:	ce 01       	movw	r24, r28
    3b22:	0e 94 1e 1c 	call	0x383c	; 0x383c <setpixel>
			setpixel(buff, x0-y, i, color);
    3b26:	20 2f       	mov	r18, r16
    3b28:	46 2d       	mov	r20, r6
    3b2a:	65 2d       	mov	r22, r5
    3b2c:	ce 01       	movw	r24, r28
    3b2e:	0e 94 1e 1c 	call	0x383c	; 0x383c <setpixel>
    3b32:	63 94       	inc	r6
    3b34:	ea cf       	rjmp	.-44     	; 0x3b0a <fillcircle+0xc0>
		}    
	}
}
    3b36:	cd b7       	in	r28, 0x3d	; 61
    3b38:	de b7       	in	r29, 0x3e	; 62
    3b3a:	e0 e1       	ldi	r30, 0x10	; 16
    3b3c:	0c 94 e2 41 	jmp	0x83c4	; 0x83c4 <__epilogue_restores__+0x4>

00003b40 <LCD_Display_Text>:
//************************************************************

// Print Menuitem from Program memory at a particular location
void LCD_Display_Text (uint16_t menuitem, const unsigned char* font,uint16_t x, uint16_t y)
{
	gLCDprint_Menu_P((char*)pgm_read_word(&text_menu[menuitem]), font, x, y);
    3b40:	88 0f       	add	r24, r24
    3b42:	99 1f       	adc	r25, r25
    3b44:	82 52       	subi	r24, 0x22	; 34
    3b46:	92 4f       	sbci	r25, 0xF2	; 242
    3b48:	fc 01       	movw	r30, r24
    3b4a:	85 91       	lpm	r24, Z+
    3b4c:	94 91       	lpm	r25, Z
}

// Print a string from RAM at a particular location in a particular font
void gLCDprint_Menu_P(const char *s, const unsigned char* font,uint16_t x, uint16_t y)
{
	pgm_mugui_lcd_puts((const unsigned char*)s, font, x, y);
    3b4e:	0e 94 fe 37 	call	0x6ffc	; 0x6ffc <pgm_mugui_lcd_puts>
    3b52:	08 95       	ret

00003b54 <gLCDprint_Menu_P>:
    3b54:	0e 94 fe 37 	call	0x6ffc	; 0x6ffc <pgm_mugui_lcd_puts>
    3b58:	08 95       	ret

00003b5a <idle_screen>:
}

// Pop up the Idle screen
void idle_screen(void)
{
	clear_buffer(buffer);
    3b5a:	80 e0       	ldi	r24, 0x00	; 0
    3b5c:	91 e0       	ldi	r25, 0x01	; 1
    3b5e:	0e 94 f7 1b 	call	0x37ee	; 0x37ee <clear_buffer>

	// Change Status screen depending on arm mode
	LCD_Display_Text(121,(const unsigned char*)Verdana14,41,3); 	// "Press"
    3b62:	23 e0       	ldi	r18, 0x03	; 3
    3b64:	30 e0       	ldi	r19, 0x00	; 0
    3b66:	49 e2       	ldi	r20, 0x29	; 41
    3b68:	50 e0       	ldi	r21, 0x00	; 0
    3b6a:	69 e4       	ldi	r22, 0x49	; 73
    3b6c:	71 e0       	ldi	r23, 0x01	; 1
    3b6e:	89 e7       	ldi	r24, 0x79	; 121
    3b70:	90 e0       	ldi	r25, 0x00	; 0
    3b72:	0e 94 a0 1d 	call	0x3b40	; 0x3b40 <LCD_Display_Text>
	LCD_Display_Text(122,(const unsigned char*)Verdana14,24,23);	// "for status."
    3b76:	27 e1       	ldi	r18, 0x17	; 23
    3b78:	30 e0       	ldi	r19, 0x00	; 0
    3b7a:	48 e1       	ldi	r20, 0x18	; 24
    3b7c:	50 e0       	ldi	r21, 0x00	; 0
    3b7e:	69 e4       	ldi	r22, 0x49	; 73
    3b80:	71 e0       	ldi	r23, 0x01	; 1
    3b82:	8a e7       	ldi	r24, 0x7A	; 122
    3b84:	90 e0       	ldi	r25, 0x00	; 0
    3b86:	0e 94 a0 1d 	call	0x3b40	; 0x3b40 <LCD_Display_Text>

	// Display most important error
	if ((General_error & (1 << LVA_ALARM)) != 0)					// Low voltage
    3b8a:	80 91 17 05 	lds	r24, 0x0517
	{
		LCD_Display_Text(134,(const unsigned char*)Verdana14,12,43);// "Battery"
    3b8e:	2b e2       	ldi	r18, 0x2B	; 43
    3b90:	30 e0       	ldi	r19, 0x00	; 0
	// Change Status screen depending on arm mode
	LCD_Display_Text(121,(const unsigned char*)Verdana14,41,3); 	// "Press"
	LCD_Display_Text(122,(const unsigned char*)Verdana14,24,23);	// "for status."

	// Display most important error
	if ((General_error & (1 << LVA_ALARM)) != 0)					// Low voltage
    3b92:	83 ff       	sbrs	r24, 3
    3b94:	11 c0       	rjmp	.+34     	; 0x3bb8 <idle_screen+0x5e>
	{
		LCD_Display_Text(134,(const unsigned char*)Verdana14,12,43);// "Battery"
    3b96:	4c e0       	ldi	r20, 0x0C	; 12
    3b98:	50 e0       	ldi	r21, 0x00	; 0
    3b9a:	69 e4       	ldi	r22, 0x49	; 73
    3b9c:	71 e0       	ldi	r23, 0x01	; 1
    3b9e:	86 e8       	ldi	r24, 0x86	; 134
    3ba0:	90 e0       	ldi	r25, 0x00	; 0
    3ba2:	0e 94 a0 1d 	call	0x3b40	; 0x3b40 <LCD_Display_Text>
		LCD_Display_Text(118,(const unsigned char*)Verdana14,80,43); // "Low"
    3ba6:	2b e2       	ldi	r18, 0x2B	; 43
    3ba8:	30 e0       	ldi	r19, 0x00	; 0
    3baa:	40 e5       	ldi	r20, 0x50	; 80
    3bac:	50 e0       	ldi	r21, 0x00	; 0
    3bae:	69 e4       	ldi	r22, 0x49	; 73
    3bb0:	71 e0       	ldi	r23, 0x01	; 1
    3bb2:	86 e7       	ldi	r24, 0x76	; 118
    3bb4:	90 e0       	ldi	r25, 0x00	; 0
    3bb6:	35 c0       	rjmp	.+106    	; 0x3c22 <idle_screen+0xc8>
	}
	
	else if ((General_error & (1 << NO_SIGNAL)) != 0)				// No signal
    3bb8:	81 ff       	sbrs	r24, 1
    3bba:	11 c0       	rjmp	.+34     	; 0x3bde <idle_screen+0x84>
	{
		LCD_Display_Text(75,(const unsigned char*)Verdana14,28,43); // "No"
    3bbc:	4c e1       	ldi	r20, 0x1C	; 28
    3bbe:	50 e0       	ldi	r21, 0x00	; 0
    3bc0:	69 e4       	ldi	r22, 0x49	; 73
    3bc2:	71 e0       	ldi	r23, 0x01	; 1
    3bc4:	8b e4       	ldi	r24, 0x4B	; 75
    3bc6:	90 e0       	ldi	r25, 0x00	; 0
    3bc8:	0e 94 a0 1d 	call	0x3b40	; 0x3b40 <LCD_Display_Text>
		LCD_Display_Text(76,(const unsigned char*)Verdana14,54,43); // "Signal"
    3bcc:	2b e2       	ldi	r18, 0x2B	; 43
    3bce:	30 e0       	ldi	r19, 0x00	; 0
    3bd0:	46 e3       	ldi	r20, 0x36	; 54
    3bd2:	50 e0       	ldi	r21, 0x00	; 0
    3bd4:	69 e4       	ldi	r22, 0x49	; 73
    3bd6:	71 e0       	ldi	r23, 0x01	; 1
    3bd8:	8c e4       	ldi	r24, 0x4C	; 76
    3bda:	90 e0       	ldi	r25, 0x00	; 0
    3bdc:	22 c0       	rjmp	.+68     	; 0x3c22 <idle_screen+0xc8>
	}
	
	else if ((General_error & (1 << THROTTLE_HIGH)) != 0)			// Throttle high
    3bde:	80 ff       	sbrs	r24, 0
    3be0:	11 c0       	rjmp	.+34     	; 0x3c04 <idle_screen+0xaa>
	{
		LCD_Display_Text(105,(const unsigned char*)Verdana14,10,43);// "Throttle"
    3be2:	4a e0       	ldi	r20, 0x0A	; 10
    3be4:	50 e0       	ldi	r21, 0x00	; 0
    3be6:	69 e4       	ldi	r22, 0x49	; 73
    3be8:	71 e0       	ldi	r23, 0x01	; 1
    3bea:	89 e6       	ldi	r24, 0x69	; 105
    3bec:	90 e0       	ldi	r25, 0x00	; 0
    3bee:	0e 94 a0 1d 	call	0x3b40	; 0x3b40 <LCD_Display_Text>
		LCD_Display_Text(55,(const unsigned char*)Verdana14,81,43);	// "High"
    3bf2:	2b e2       	ldi	r18, 0x2B	; 43
    3bf4:	30 e0       	ldi	r19, 0x00	; 0
    3bf6:	41 e5       	ldi	r20, 0x51	; 81
    3bf8:	50 e0       	ldi	r21, 0x00	; 0
    3bfa:	69 e4       	ldi	r22, 0x49	; 73
    3bfc:	71 e0       	ldi	r23, 0x01	; 1
    3bfe:	87 e3       	ldi	r24, 0x37	; 55
    3c00:	90 e0       	ldi	r25, 0x00	; 0
    3c02:	0f c0       	rjmp	.+30     	; 0x3c22 <idle_screen+0xc8>
	}
	
	else if ((General_error & (1 << DISARMED)) != 0)				// Disarmed
    3c04:	82 ff       	sbrs	r24, 2
    3c06:	07 c0       	rjmp	.+14     	; 0x3c16 <idle_screen+0xbc>
	{
		LCD_Display_Text(139,(const unsigned char*)Verdana14,20,43);// "(Disarmed)"
    3c08:	44 e1       	ldi	r20, 0x14	; 20
    3c0a:	50 e0       	ldi	r21, 0x00	; 0
    3c0c:	69 e4       	ldi	r22, 0x49	; 73
    3c0e:	71 e0       	ldi	r23, 0x01	; 1
    3c10:	8b e8       	ldi	r24, 0x8B	; 139
    3c12:	90 e0       	ldi	r25, 0x00	; 0
    3c14:	06 c0       	rjmp	.+12     	; 0x3c22 <idle_screen+0xc8>
	}
	else
	{
		LCD_Display_Text(138,(const unsigned char*)Verdana14,28,43);// "(Armed)"
    3c16:	4c e1       	ldi	r20, 0x1C	; 28
    3c18:	50 e0       	ldi	r21, 0x00	; 0
    3c1a:	69 e4       	ldi	r22, 0x49	; 73
    3c1c:	71 e0       	ldi	r23, 0x01	; 1
    3c1e:	8a e8       	ldi	r24, 0x8A	; 138
    3c20:	90 e0       	ldi	r25, 0x00	; 0
    3c22:	0e 94 a0 1d 	call	0x3b40	; 0x3b40 <LCD_Display_Text>
	}

	write_buffer(buffer,1);
    3c26:	61 e0       	ldi	r22, 0x01	; 1
    3c28:	80 e0       	ldi	r24, 0x00	; 0
    3c2a:	91 e0       	ldi	r25, 0x01	; 1
    3c2c:	0e 94 c9 1b 	call	0x3792	; 0x3792 <write_buffer>
    3c30:	08 95       	ret

00003c32 <get_raw_gyros>:
		gyroADC[i] *= (int8_t)pgm_read_byte(&Gyro_Pol[Config.Orientation][i]);
	}
}

void get_raw_gyros(void)
{
    3c32:	ac e0       	ldi	r26, 0x0C	; 12
    3c34:	b0 e0       	ldi	r27, 0x00	; 0
    3c36:	ef e1       	ldi	r30, 0x1F	; 31
    3c38:	fe e1       	ldi	r31, 0x1E	; 30
    3c3a:	0c 94 d4 41 	jmp	0x83a8	; 0x83a8 <__prologue_saves__+0x20>
	uint8_t i;
	uint8_t Gyros[6];
	int16_t temp1, temp2;

	// Get the i2c data from the MPU6050
	readI2CbyteArray(MPU60X0_DEFAULT_ADDRESS,MPU60X0_RA_GYRO_XOUT_H,(uint8_t *)Gyros,6);
    3c3e:	26 e0       	ldi	r18, 0x06	; 6
    3c40:	ae 01       	movw	r20, r28
    3c42:	4f 5f       	subi	r20, 0xFF	; 255
    3c44:	5f 4f       	sbci	r21, 0xFF	; 255
    3c46:	63 e4       	ldi	r22, 0x43	; 67
    3c48:	80 ed       	ldi	r24, 0xD0	; 208
    3c4a:	0e 94 d8 1f 	call	0x3fb0	; 0x3fb0 <readI2CbyteArray>

	// Reassemble data into gyroADC array and down-sample to reduce resolution and noise
	temp1 = Gyros[0] << 8;
    3c4e:	89 81       	ldd	r24, Y+1	; 0x01
    3c50:	90 e0       	ldi	r25, 0x00	; 0
    3c52:	98 2f       	mov	r25, r24
    3c54:	88 27       	eor	r24, r24
	temp2 = Gyros[1];
    3c56:	2a 81       	ldd	r18, Y+2	; 0x02
	RawADC[PITCH] = (temp1 + temp2) >> GYRODIV;
    3c58:	82 0f       	add	r24, r18
    3c5a:	91 1d       	adc	r25, r1
    3c5c:	34 e0       	ldi	r19, 0x04	; 4
    3c5e:	95 95       	asr	r25
    3c60:	87 95       	ror	r24
    3c62:	3a 95       	dec	r19
    3c64:	e1 f7       	brne	.-8      	; 0x3c5e <get_raw_gyros+0x2c>
    3c66:	9a 87       	std	Y+10, r25	; 0x0a
    3c68:	89 87       	std	Y+9, r24	; 0x09

	temp1 = Gyros[2] << 8;
    3c6a:	8b 81       	ldd	r24, Y+3	; 0x03
    3c6c:	90 e0       	ldi	r25, 0x00	; 0
    3c6e:	98 2f       	mov	r25, r24
    3c70:	88 27       	eor	r24, r24
	temp2 = Gyros[3];
    3c72:	2c 81       	ldd	r18, Y+4	; 0x04
	RawADC[ROLL] = (temp1 + temp2) >> GYRODIV;
    3c74:	82 0f       	add	r24, r18
    3c76:	91 1d       	adc	r25, r1
    3c78:	54 e0       	ldi	r21, 0x04	; 4
    3c7a:	95 95       	asr	r25
    3c7c:	87 95       	ror	r24
    3c7e:	5a 95       	dec	r21
    3c80:	e1 f7       	brne	.-8      	; 0x3c7a <get_raw_gyros+0x48>
    3c82:	98 87       	std	Y+8, r25	; 0x08
    3c84:	8f 83       	std	Y+7, r24	; 0x07

	temp1 = Gyros[4] << 8;
    3c86:	8d 81       	ldd	r24, Y+5	; 0x05
    3c88:	90 e0       	ldi	r25, 0x00	; 0
    3c8a:	98 2f       	mov	r25, r24
    3c8c:	88 27       	eor	r24, r24
	temp2 = Gyros[5];
    3c8e:	2e 81       	ldd	r18, Y+6	; 0x06
	RawADC[YAW] = (temp1 + temp2) >> GYRODIV;
    3c90:	82 0f       	add	r24, r18
    3c92:	91 1d       	adc	r25, r1
    3c94:	74 e0       	ldi	r23, 0x04	; 4
    3c96:	95 95       	asr	r25
    3c98:	87 95       	ror	r24
    3c9a:	7a 95       	dec	r23
    3c9c:	e1 f7       	brne	.-8      	; 0x3c96 <get_raw_gyros+0x64>
    3c9e:	9c 87       	std	Y+12, r25	; 0x0c
    3ca0:	8b 87       	std	Y+11, r24	; 0x0b

	// Reorient the data as per the board orientation	
	for (i=0; i<NUMBEROFAXIS; i++)
	{
		// Rearrange the sensors
		gyroADC[i] 	= RawADC[(int8_t)pgm_read_byte(&Gyro_RPY_Order[Config.Orientation][i])];
    3ca2:	20 91 31 06 	lds	r18, 0x0631
    3ca6:	a7 e6       	ldi	r26, 0x67	; 103
    3ca8:	b5 e0       	ldi	r27, 0x05	; 5
    3caa:	43 e0       	ldi	r20, 0x03	; 3
    3cac:	24 02       	muls	r18, r20
    3cae:	90 01       	movw	r18, r0
    3cb0:	11 24       	eor	r1, r1
    3cb2:	80 e0       	ldi	r24, 0x00	; 0
    3cb4:	90 e0       	ldi	r25, 0x00	; 0
    3cb6:	2d 58       	subi	r18, 0x8D	; 141
    3cb8:	38 4e       	sbci	r19, 0xE8	; 232
    3cba:	f9 01       	movw	r30, r18
    3cbc:	e8 0f       	add	r30, r24
    3cbe:	f9 1f       	adc	r31, r25
    3cc0:	e4 91       	lpm	r30, Z
    3cc2:	ee 0f       	add	r30, r30
    3cc4:	ff 0b       	sbc	r31, r31
    3cc6:	41 e0       	ldi	r20, 0x01	; 1
    3cc8:	50 e0       	ldi	r21, 0x00	; 0
    3cca:	4c 0f       	add	r20, r28
    3ccc:	5d 1f       	adc	r21, r29
    3cce:	e4 0f       	add	r30, r20
    3cd0:	f5 1f       	adc	r31, r21
    3cd2:	46 81       	ldd	r20, Z+6	; 0x06
    3cd4:	57 81       	ldd	r21, Z+7	; 0x07
    3cd6:	4d 93       	st	X+, r20
    3cd8:	5d 93       	st	X+, r21
    3cda:	01 96       	adiw	r24, 0x01	; 1
	temp1 = Gyros[4] << 8;
	temp2 = Gyros[5];
	RawADC[YAW] = (temp1 + temp2) >> GYRODIV;

	// Reorient the data as per the board orientation	
	for (i=0; i<NUMBEROFAXIS; i++)
    3cdc:	83 30       	cpi	r24, 0x03	; 3
    3cde:	91 05       	cpc	r25, r1
    3ce0:	61 f7       	brne	.-40     	; 0x3cba <get_raw_gyros+0x88>
	{
		// Rearrange the sensors
		gyroADC[i] 	= RawADC[(int8_t)pgm_read_byte(&Gyro_RPY_Order[Config.Orientation][i])];
	}
}
    3ce2:	2c 96       	adiw	r28, 0x0c	; 12
    3ce4:	e2 e0       	ldi	r30, 0x02	; 2
    3ce6:	0c 94 f0 41 	jmp	0x83e0	; 0x83e0 <__epilogue_restores__+0x20>

00003cea <ReadGyros>:
//************************************************************

int16_t gyroADC[NUMBEROFAXIS];			// Holds Gyro ADCs

void ReadGyros(void)					// Conventional orientation
{
    3cea:	1f 93       	push	r17
    3cec:	cf 93       	push	r28
    3cee:	df 93       	push	r29
	uint8_t i;

	get_raw_gyros();					// Updates gyroADC[]
    3cf0:	0e 94 19 1e 	call	0x3c32	; 0x3c32 <get_raw_gyros>
	{
		// Remove offsets from gyro outputs
		gyroADC[i] -= Config.gyroZero[i];

		// Change polarity
		gyroADC[i] *= (int8_t)pgm_read_byte(&Gyro_Pol[Config.Orientation][i]);
    3cf4:	20 91 31 06 	lds	r18, 0x0631
    3cf8:	cf e9       	ldi	r28, 0x9F	; 159
    3cfa:	d7 e0       	ldi	r29, 0x07	; 7
    3cfc:	a7 e6       	ldi	r26, 0x67	; 103
    3cfe:	b5 e0       	ldi	r27, 0x05	; 5
    3d00:	83 e0       	ldi	r24, 0x03	; 3
    3d02:	28 02       	muls	r18, r24
    3d04:	90 01       	movw	r18, r0
    3d06:	11 24       	eor	r1, r1
    3d08:	80 e0       	ldi	r24, 0x00	; 0
    3d0a:	90 e0       	ldi	r25, 0x00	; 0
    3d0c:	2f 59       	subi	r18, 0x9F	; 159
    3d0e:	38 4e       	sbci	r19, 0xE8	; 232
	get_raw_gyros();					// Updates gyroADC[]

	for (i=0; i<NUMBEROFAXIS; i++)	
	{
		// Remove offsets from gyro outputs
		gyroADC[i] -= Config.gyroZero[i];
    3d10:	69 91       	ld	r22, Y+
    3d12:	79 91       	ld	r23, Y+
    3d14:	f9 01       	movw	r30, r18
    3d16:	e8 0f       	add	r30, r24
    3d18:	f9 1f       	adc	r31, r25

		// Change polarity
		gyroADC[i] *= (int8_t)pgm_read_byte(&Gyro_Pol[Config.Orientation][i]);
    3d1a:	14 91       	lpm	r17, Z
	get_raw_gyros();					// Updates gyroADC[]

	for (i=0; i<NUMBEROFAXIS; i++)	
	{
		// Remove offsets from gyro outputs
		gyroADC[i] -= Config.gyroZero[i];
    3d1c:	4d 91       	ld	r20, X+
    3d1e:	5c 91       	ld	r21, X
    3d20:	11 97       	sbiw	r26, 0x01	; 1
    3d22:	46 1b       	sub	r20, r22
    3d24:	57 0b       	sbc	r21, r23

		// Change polarity
		gyroADC[i] *= (int8_t)pgm_read_byte(&Gyro_Pol[Config.Orientation][i]);
    3d26:	14 03       	mulsu	r17, r20
    3d28:	b0 01       	movw	r22, r0
    3d2a:	15 9f       	mul	r17, r21
    3d2c:	70 0d       	add	r23, r0
    3d2e:	11 24       	eor	r1, r1
    3d30:	6d 93       	st	X+, r22
    3d32:	7d 93       	st	X+, r23
    3d34:	01 96       	adiw	r24, 0x01	; 1
{
	uint8_t i;

	get_raw_gyros();					// Updates gyroADC[]

	for (i=0; i<NUMBEROFAXIS; i++)	
    3d36:	83 30       	cpi	r24, 0x03	; 3
    3d38:	91 05       	cpc	r25, r1
    3d3a:	51 f7       	brne	.-44     	; 0x3d10 <ReadGyros+0x26>
		gyroADC[i] -= Config.gyroZero[i];

		// Change polarity
		gyroADC[i] *= (int8_t)pgm_read_byte(&Gyro_Pol[Config.Orientation][i]);
	}
}
    3d3c:	df 91       	pop	r29
    3d3e:	cf 91       	pop	r28
    3d40:	1f 91       	pop	r17
    3d42:	08 95       	ret

00003d44 <CalibrateGyrosFast>:
//***************************************************************
// Calibration routines
//***************************************************************

void CalibrateGyrosFast(void)
{
    3d44:	cf 93       	push	r28
	uint8_t i;

	// Clear gyro zeros
	memset(&Config.gyroZero[ROLL],0,(sizeof(int16_t) * NUMBEROFAXIS));
    3d46:	86 e0       	ldi	r24, 0x06	; 6
    3d48:	ef e9       	ldi	r30, 0x9F	; 159
    3d4a:	f7 e0       	ldi	r31, 0x07	; 7
    3d4c:	df 01       	movw	r26, r30
    3d4e:	1d 92       	st	X+, r1
    3d50:	8a 95       	dec	r24
    3d52:	e9 f7       	brne	.-6      	; 0x3d4e <CalibrateGyrosFast+0xa>
    3d54:	c0 e2       	ldi	r28, 0x20	; 32

	// Calculate average over 32 reads
	for (i=0; i<32; i++)
	{
		get_raw_gyros();				// Updates gyroADC[]
    3d56:	0e 94 19 1e 	call	0x3c32	; 0x3c32 <get_raw_gyros>

		Config.gyroZero[ROLL] 	+= gyroADC[ROLL];						
    3d5a:	40 91 9f 07 	lds	r20, 0x079F
    3d5e:	50 91 a0 07 	lds	r21, 0x07A0
    3d62:	80 91 67 05 	lds	r24, 0x0567
    3d66:	90 91 68 05 	lds	r25, 0x0568
    3d6a:	48 0f       	add	r20, r24
    3d6c:	59 1f       	adc	r21, r25
    3d6e:	50 93 a0 07 	sts	0x07A0, r21
    3d72:	40 93 9f 07 	sts	0x079F, r20
		Config.gyroZero[PITCH] 	+= gyroADC[PITCH];	
    3d76:	20 91 a1 07 	lds	r18, 0x07A1
    3d7a:	30 91 a2 07 	lds	r19, 0x07A2
    3d7e:	80 91 69 05 	lds	r24, 0x0569
    3d82:	90 91 6a 05 	lds	r25, 0x056A
    3d86:	28 0f       	add	r18, r24
    3d88:	39 1f       	adc	r19, r25
    3d8a:	30 93 a2 07 	sts	0x07A2, r19
    3d8e:	20 93 a1 07 	sts	0x07A1, r18
		Config.gyroZero[YAW] 	+= gyroADC[YAW];
    3d92:	80 91 a3 07 	lds	r24, 0x07A3
    3d96:	90 91 a4 07 	lds	r25, 0x07A4
    3d9a:	60 91 6b 05 	lds	r22, 0x056B
    3d9e:	70 91 6c 05 	lds	r23, 0x056C
    3da2:	86 0f       	add	r24, r22
    3da4:	97 1f       	adc	r25, r23
    3da6:	90 93 a4 07 	sts	0x07A4, r25
    3daa:	80 93 a3 07 	sts	0x07A3, r24
    3dae:	c1 50       	subi	r28, 0x01	; 1

	// Clear gyro zeros
	memset(&Config.gyroZero[ROLL],0,(sizeof(int16_t) * NUMBEROFAXIS));

	// Calculate average over 32 reads
	for (i=0; i<32; i++)
    3db0:	91 f6       	brne	.-92     	; 0x3d56 <CalibrateGyrosFast+0x12>
	}

	// Average readings for all axis
	for (i=0; i<NUMBEROFAXIS; i++)
	{
		Config.gyroZero[i] 	= (Config.gyroZero[i] >> 5);	// Divide by 32	
    3db2:	e5 e0       	ldi	r30, 0x05	; 5
    3db4:	55 95       	asr	r21
    3db6:	47 95       	ror	r20
    3db8:	ea 95       	dec	r30
    3dba:	e1 f7       	brne	.-8      	; 0x3db4 <CalibrateGyrosFast+0x70>
    3dbc:	50 93 a0 07 	sts	0x07A0, r21
    3dc0:	40 93 9f 07 	sts	0x079F, r20
    3dc4:	f5 e0       	ldi	r31, 0x05	; 5
    3dc6:	35 95       	asr	r19
    3dc8:	27 95       	ror	r18
    3dca:	fa 95       	dec	r31
    3dcc:	e1 f7       	brne	.-8      	; 0x3dc6 <CalibrateGyrosFast+0x82>
    3dce:	30 93 a2 07 	sts	0x07A2, r19
    3dd2:	20 93 a1 07 	sts	0x07A1, r18
    3dd6:	a5 e0       	ldi	r26, 0x05	; 5
    3dd8:	95 95       	asr	r25
    3dda:	87 95       	ror	r24
    3ddc:	aa 95       	dec	r26
    3dde:	e1 f7       	brne	.-8      	; 0x3dd8 <CalibrateGyrosFast+0x94>
    3de0:	90 93 a4 07 	sts	0x07A4, r25
    3de4:	80 93 a3 07 	sts	0x07A3, r24
	}

	Save_Config_to_EEPROM();
    3de8:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <Save_Config_to_EEPROM>
}
    3dec:	cf 91       	pop	r28
    3dee:	08 95       	ret

00003df0 <CalibrateGyrosSlow>:

bool CalibrateGyrosSlow(void)
{
    3df0:	a5 e1       	ldi	r26, 0x15	; 21
    3df2:	b0 e0       	ldi	r27, 0x00	; 0
    3df4:	ee ef       	ldi	r30, 0xFE	; 254
    3df6:	fe e1       	ldi	r31, 0x1E	; 30
    3df8:	0c 94 c4 41 	jmp	0x8388	; 0x8388 <__prologue_saves__>
	uint8_t		Gyro_TCNT2 = 0;
	bool		Gyros_Stable = false;

	// Populate Config.gyroZero[] with ballpark figures
	// This makes slow calibrate on much faster
	CalibrateGyrosFast();	
    3dfc:	0e 94 a2 1e 	call	0x3d44	; 0x3d44 <CalibrateGyrosFast>
	
	// Optimise starting point for each board
	for (axis = 0; axis < NUMBEROFAXIS; axis++)
	{
		GyroSmooth[axis] = Config.gyroZero[axis];			
    3e00:	60 91 9f 07 	lds	r22, 0x079F
    3e04:	70 91 a0 07 	lds	r23, 0x07A0
    3e08:	88 27       	eor	r24, r24
    3e0a:	77 fd       	sbrc	r23, 7
    3e0c:	80 95       	com	r24
    3e0e:	98 2f       	mov	r25, r24
    3e10:	0e 94 0d 40 	call	0x801a	; 0x801a <__floatsisf>
    3e14:	69 83       	std	Y+1, r22	; 0x01
    3e16:	7a 83       	std	Y+2, r23	; 0x02
    3e18:	8b 83       	std	Y+3, r24	; 0x03
    3e1a:	9c 83       	std	Y+4, r25	; 0x04
    3e1c:	60 91 a1 07 	lds	r22, 0x07A1
    3e20:	70 91 a2 07 	lds	r23, 0x07A2
    3e24:	88 27       	eor	r24, r24
    3e26:	77 fd       	sbrc	r23, 7
    3e28:	80 95       	com	r24
    3e2a:	98 2f       	mov	r25, r24
    3e2c:	0e 94 0d 40 	call	0x801a	; 0x801a <__floatsisf>
    3e30:	6d 83       	std	Y+5, r22	; 0x05
    3e32:	7e 83       	std	Y+6, r23	; 0x06
    3e34:	8f 83       	std	Y+7, r24	; 0x07
    3e36:	98 87       	std	Y+8, r25	; 0x08
    3e38:	60 91 a3 07 	lds	r22, 0x07A3
    3e3c:	70 91 a4 07 	lds	r23, 0x07A4
    3e40:	88 27       	eor	r24, r24
    3e42:	77 fd       	sbrc	r23, 7
    3e44:	80 95       	com	r24
    3e46:	98 2f       	mov	r25, r24
    3e48:	0e 94 0d 40 	call	0x801a	; 0x801a <__floatsisf>
    3e4c:	69 87       	std	Y+9, r22	; 0x09
    3e4e:	7a 87       	std	Y+10, r23	; 0x0a
    3e50:	8b 87       	std	Y+11, r24	; 0x0b
    3e52:	9c 87       	std	Y+12, r25	; 0x0c
    3e54:	1d 8a       	std	Y+21, r1	; 0x15
    3e56:	1b 8a       	std	Y+19, r1	; 0x13
    3e58:	e1 2c       	mov	r14, r1
    3e5a:	f1 2c       	mov	r15, r1
    3e5c:	00 e0       	ldi	r16, 0x00	; 0
    3e5e:	10 e0       	ldi	r17, 0x00	; 0
	
	// Wait until gyros stable. Timeout after CAL_TIMEOUT seconds
	while (!Gyros_Stable && ((Gyro_seconds <= CAL_TIMEOUT)))
	{
		// Update status timeout
		Gyro_timeout += (uint8_t) (TCNT2 - Gyro_TCNT2);
    3e60:	80 91 b2 00 	lds	r24, 0x00B2
    3e64:	9d 89       	ldd	r25, Y+21	; 0x15
    3e66:	89 1b       	sub	r24, r25
    3e68:	e8 0e       	add	r14, r24
    3e6a:	f1 1c       	adc	r15, r1
		Gyro_TCNT2 = TCNT2;
    3e6c:	e0 91 b2 00 	lds	r30, 0x00B2
    3e70:	ed 8b       	std	Y+21, r30	; 0x15

		// Count elapsed seconds
		if (Gyro_timeout > SECOND_TIMER)
    3e72:	fc e4       	ldi	r31, 0x4C	; 76
    3e74:	ef 16       	cp	r14, r31
    3e76:	ff 06       	cpc	r15, r31
    3e78:	28 f0       	brcs	.+10     	; 0x3e84 <CalibrateGyrosSlow+0x94>
		{
			Gyro_seconds++;
    3e7a:	8b 89       	ldd	r24, Y+19	; 0x13
    3e7c:	8f 5f       	subi	r24, 0xFF	; 255
    3e7e:	8b 8b       	std	Y+19, r24	; 0x13
			Gyro_timeout = 0;
    3e80:	e1 2c       	mov	r14, r1
    3e82:	f1 2c       	mov	r15, r1
		}

		get_raw_gyros();
    3e84:	0e 94 19 1e 	call	0x3c32	; 0x3c32 <get_raw_gyros>
    3e88:	fe 01       	movw	r30, r28
    3e8a:	31 96       	adiw	r30, 0x01	; 1
    3e8c:	6f 01       	movw	r12, r30
    3e8e:	b7 e6       	ldi	r27, 0x67	; 103
    3e90:	2b 2e       	mov	r2, r27
    3e92:	b5 e0       	ldi	r27, 0x05	; 5
    3e94:	3b 2e       	mov	r3, r27
    3e96:	ce 01       	movw	r24, r28
    3e98:	0d 96       	adiw	r24, 0x0d	; 13
    3e9a:	5c 01       	movw	r10, r24

		// Calculate very long rolling average
		for (axis = 0; axis < NUMBEROFAXIS; axis++) 
    3e9c:	1c 8a       	std	Y+20, r1	; 0x14
		{
			GyroSmooth[axis] = ((GyroSmooth[axis] * (float)999) + (float)(gyroADC[axis])) / (float)1000;
    3e9e:	f1 01       	movw	r30, r2
    3ea0:	81 90       	ld	r8, Z+
    3ea2:	91 90       	ld	r9, Z+
    3ea4:	1f 01       	movw	r2, r30
    3ea6:	20 e0       	ldi	r18, 0x00	; 0
    3ea8:	30 ec       	ldi	r19, 0xC0	; 192
    3eaa:	49 e7       	ldi	r20, 0x79	; 121
    3eac:	54 e4       	ldi	r21, 0x44	; 68
    3eae:	f6 01       	movw	r30, r12
    3eb0:	60 81       	ld	r22, Z
    3eb2:	71 81       	ldd	r23, Z+1	; 0x01
    3eb4:	82 81       	ldd	r24, Z+2	; 0x02
    3eb6:	93 81       	ldd	r25, Z+3	; 0x03
    3eb8:	0e 94 c1 40 	call	0x8182	; 0x8182 <__mulsf3>
    3ebc:	2b 01       	movw	r4, r22
    3ebe:	3c 01       	movw	r6, r24
    3ec0:	b4 01       	movw	r22, r8
    3ec2:	88 27       	eor	r24, r24
    3ec4:	77 fd       	sbrc	r23, 7
    3ec6:	80 95       	com	r24
    3ec8:	98 2f       	mov	r25, r24
    3eca:	0e 94 0d 40 	call	0x801a	; 0x801a <__floatsisf>
    3ece:	9b 01       	movw	r18, r22
    3ed0:	ac 01       	movw	r20, r24
    3ed2:	c3 01       	movw	r24, r6
    3ed4:	b2 01       	movw	r22, r4
    3ed6:	0e 94 0a 3f 	call	0x7e14	; 0x7e14 <__addsf3>
    3eda:	20 e0       	ldi	r18, 0x00	; 0
    3edc:	30 e0       	ldi	r19, 0x00	; 0
    3ede:	4a e7       	ldi	r20, 0x7A	; 122
    3ee0:	54 e4       	ldi	r21, 0x44	; 68
    3ee2:	0e 94 72 3f 	call	0x7ee4	; 0x7ee4 <__divsf3>
    3ee6:	f6 01       	movw	r30, r12
    3ee8:	60 83       	st	Z, r22
    3eea:	71 83       	std	Z+1, r23	; 0x01
    3eec:	82 83       	std	Z+2, r24	; 0x02
    3eee:	93 83       	std	Z+3, r25	; 0x03
			
			// See if changing
			if (GyroOld[axis] != (int16_t)GyroSmooth[axis])
    3ef0:	0e 94 da 3f 	call	0x7fb4	; 0x7fb4 <__fixsfsi>
    3ef4:	f5 01       	movw	r30, r10
    3ef6:	20 81       	ld	r18, Z
    3ef8:	31 81       	ldd	r19, Z+1	; 0x01
    3efa:	26 17       	cp	r18, r22
    3efc:	37 07       	cpc	r19, r23
    3efe:	11 f0       	breq	.+4      	; 0x3f04 <CalibrateGyrosSlow+0x114>
			{
				Gyros_Stable = false;
				Stable_counter = 0;
    3f00:	00 e0       	ldi	r16, 0x00	; 0
    3f02:	10 e0       	ldi	r17, 0x00	; 0
			}
		
			// Save old reading
			GyroOld[axis] = (int16_t)GyroSmooth[axis];
    3f04:	f5 01       	movw	r30, r10
    3f06:	61 93       	st	Z+, r22
    3f08:	71 93       	st	Z+, r23
    3f0a:	5f 01       	movw	r10, r30
		}

		get_raw_gyros();

		// Calculate very long rolling average
		for (axis = 0; axis < NUMBEROFAXIS; axis++) 
    3f0c:	fc 89       	ldd	r31, Y+20	; 0x14
    3f0e:	ff 5f       	subi	r31, 0xFF	; 255
    3f10:	fc 8b       	std	Y+20, r31	; 0x14
    3f12:	84 e0       	ldi	r24, 0x04	; 4
    3f14:	c8 0e       	add	r12, r24
    3f16:	d1 1c       	adc	r13, r1
    3f18:	f3 30       	cpi	r31, 0x03	; 3
    3f1a:	09 f6       	brne	.-126    	; 0x3e9e <CalibrateGyrosSlow+0xae>
			// Save old reading
			GyroOld[axis] = (int16_t)GyroSmooth[axis];
		}
		
		// Increment stable counter to measure how long we are still
		Stable_counter++;
    3f1c:	0f 5f       	subi	r16, 0xFF	; 255
    3f1e:	1f 4f       	sbci	r17, 0xFF	; 255
		
		// If stable for 5 seconds, do a quick calibrate
		if (Stable_counter > CAL_STABLE_TIME)
    3f20:	09 3c       	cpi	r16, 0xC9	; 201
    3f22:	11 05       	cpc	r17, r1
    3f24:	20 f0       	brcs	.+8      	; 0x3f2e <CalibrateGyrosSlow+0x13e>
		{
			Gyros_Stable = true;	
			CalibrateGyrosFast();		
    3f26:	0e 94 a2 1e 	call	0x3d44	; 0x3d44 <CalibrateGyrosFast>
		Stable_counter++;
		
		// If stable for 5 seconds, do a quick calibrate
		if (Stable_counter > CAL_STABLE_TIME)
		{
			Gyros_Stable = true;	
    3f2a:	81 e0       	ldi	r24, 0x01	; 1
    3f2c:	01 c0       	rjmp	.+2      	; 0x3f30 <CalibrateGyrosSlow+0x140>
    3f2e:	80 e0       	ldi	r24, 0x00	; 0
    3f30:	e7 e8       	ldi	r30, 0x87	; 135
    3f32:	f3 e1       	ldi	r31, 0x13	; 19
    3f34:	31 97       	sbiw	r30, 0x01	; 1
    3f36:	f1 f7       	brne	.-4      	; 0x3f34 <CalibrateGyrosSlow+0x144>
    3f38:	00 c0       	rjmp	.+0      	; 0x3f3a <CalibrateGyrosSlow+0x14a>
    3f3a:	00 00       	nop
	{
		GyroSmooth[axis] = Config.gyroZero[axis];			
	}
	
	// Wait until gyros stable. Timeout after CAL_TIMEOUT seconds
	while (!Gyros_Stable && ((Gyro_seconds <= CAL_TIMEOUT)))
    3f3c:	81 11       	cpse	r24, r1
    3f3e:	04 c0       	rjmp	.+8      	; 0x3f48 <CalibrateGyrosSlow+0x158>
    3f40:	fb 89       	ldd	r31, Y+19	; 0x13
    3f42:	f6 30       	cpi	r31, 0x06	; 6
    3f44:	08 f4       	brcc	.+2      	; 0x3f48 <CalibrateGyrosSlow+0x158>
    3f46:	8c cf       	rjmp	.-232    	; 0x3e60 <CalibrateGyrosSlow+0x70>
		// Otherwise the original saved values are used
	}
	
	// Return success or failure
	return(Gyros_Stable);
}
    3f48:	65 96       	adiw	r28, 0x15	; 21
    3f4a:	e2 e1       	ldi	r30, 0x12	; 18
    3f4c:	0c 94 e0 41 	jmp	0x83c0	; 0x83c0 <__epilogue_restores__>

00003f50 <init_i2c_gyros>:
//***************************************************************

void init_i2c_gyros(void)
{
	// First, configure the MPU6050
	writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_PWR_MGMT_1, 0x01); 			// Gyro X clock, awake
    3f50:	41 e0       	ldi	r20, 0x01	; 1
    3f52:	6b e6       	ldi	r22, 0x6B	; 107
    3f54:	80 ed       	ldi	r24, 0xD0	; 208
    3f56:	0e 94 c0 1f 	call	0x3f80	; 0x3f80 <writeI2Cbyte>
	
	// Make INT pin open-drain so that we can connect it straight to the MPU
	writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_INT_PIN_CFG, 0x40);			// INT output is open-drain
    3f5a:	40 e4       	ldi	r20, 0x40	; 64
    3f5c:	67 e3       	ldi	r22, 0x37	; 55
    3f5e:	80 ed       	ldi	r24, 0xD0	; 208
    3f60:	0e 94 c0 1f 	call	0x3f80	; 0x3f80 <writeI2Cbyte>
	
	// MPU6050's internal LPF. Values are 0x06 = 5Hz, (5)10Hz, (4)21Hz, (3)44Hz, (2)94Hz, (1)184Hz LPF, (0)260Hz
	// Software's values are 0 to 6 = 5Hz to 260Hz, so numbering is reversed here.
	writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_CONFIG, (6 - Config.MPU6050_LPF));
    3f64:	46 e0       	ldi	r20, 0x06	; 6
    3f66:	80 91 3a 06 	lds	r24, 0x063A
    3f6a:	48 1b       	sub	r20, r24
    3f6c:	6a e1       	ldi	r22, 0x1A	; 26
    3f6e:	80 ed       	ldi	r24, 0xD0	; 208
    3f70:	0e 94 c0 1f 	call	0x3f80	; 0x3f80 <writeI2Cbyte>
	
	// Now configure gyros
	writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_GYRO_CONFIG, GYROFS2000DEG);	// 2000 deg/sec
    3f74:	48 e1       	ldi	r20, 0x18	; 24
    3f76:	6b e1       	ldi	r22, 0x1B	; 27
    3f78:	80 ed       	ldi	r24, 0xD0	; 208
    3f7a:	0e 94 c0 1f 	call	0x3f80	; 0x3f80 <writeI2Cbyte>
    3f7e:	08 95       	ret

00003f80 <writeI2Cbyte>:
//************************************************************
// Code
//************************************************************

void writeI2Cbyte(uint8_t address, uint8_t location, uint8_t value)
{
    3f80:	a2 e0       	ldi	r26, 0x02	; 2
    3f82:	b0 e0       	ldi	r27, 0x00	; 0
    3f84:	e6 ec       	ldi	r30, 0xC6	; 198
    3f86:	ff e1       	ldi	r31, 0x1F	; 31
    3f88:	0c 94 d4 41 	jmp	0x83a8	; 0x83a8 <__prologue_saves__+0x20>
    i2c_start_wait(address+I2C_WRITE);				// Set up device address 
    3f8c:	4a 83       	std	Y+2, r20	; 0x02
    3f8e:	69 83       	std	Y+1, r22	; 0x01
    3f90:	0e 94 f7 3d 	call	0x7bee	; 0x7bee <i2c_start_wait>
    i2c_write(location);							// Set up register address 
    3f94:	69 81       	ldd	r22, Y+1	; 0x01
    3f96:	86 2f       	mov	r24, r22
    3f98:	0e 94 48 3e 	call	0x7c90	; 0x7c90 <i2c_write>
    i2c_write(value); 								// Write byte
    3f9c:	4a 81       	ldd	r20, Y+2	; 0x02
    3f9e:	84 2f       	mov	r24, r20
    3fa0:	0e 94 48 3e 	call	0x7c90	; 0x7c90 <i2c_write>
    i2c_stop();
    3fa4:	0e 94 39 3e 	call	0x7c72	; 0x7c72 <i2c_stop>
}
    3fa8:	22 96       	adiw	r28, 0x02	; 2
    3faa:	e2 e0       	ldi	r30, 0x02	; 2
    3fac:	0c 94 f0 41 	jmp	0x83e0	; 0x83e0 <__epilogue_restores__+0x20>

00003fb0 <readI2CbyteArray>:

void readI2CbyteArray(uint8_t address, uint8_t location, uint8_t *array,uint8_t size)
{
    3fb0:	a3 e0       	ldi	r26, 0x03	; 3
    3fb2:	b0 e0       	ldi	r27, 0x00	; 0
    3fb4:	ee ed       	ldi	r30, 0xDE	; 222
    3fb6:	ff e1       	ldi	r31, 0x1F	; 31
    3fb8:	0c 94 ce 41 	jmp	0x839c	; 0x839c <__prologue_saves__+0x14>
    3fbc:	18 2f       	mov	r17, r24
    3fbe:	e2 2e       	mov	r14, r18
	int i=0;

    i2c_start_wait(address+I2C_WRITE);
    3fc0:	4a 83       	std	Y+2, r20	; 0x02
    3fc2:	5b 83       	std	Y+3, r21	; 0x03
    3fc4:	69 83       	std	Y+1, r22	; 0x01
    3fc6:	0e 94 f7 3d 	call	0x7bee	; 0x7bee <i2c_start_wait>
    i2c_write(location);							// Set up register address 
    3fca:	69 81       	ldd	r22, Y+1	; 0x01
    3fcc:	86 2f       	mov	r24, r22
    3fce:	0e 94 48 3e 	call	0x7c90	; 0x7c90 <i2c_write>
    i2c_rep_start(address+I2C_READ);
    3fd2:	81 e0       	ldi	r24, 0x01	; 1
    3fd4:	81 0f       	add	r24, r17
    3fd6:	0e 94 36 3e 	call	0x7c6c	; 0x7c6c <i2c_rep_start>
    3fda:	4a 81       	ldd	r20, Y+2	; 0x02
    3fdc:	c4 2e       	mov	r12, r20
    3fde:	5b 81       	ldd	r21, Y+3	; 0x03
    3fe0:	d5 2e       	mov	r13, r21
    i2c_stop();
}

void readI2CbyteArray(uint8_t address, uint8_t location, uint8_t *array,uint8_t size)
{
	int i=0;
    3fe2:	00 e0       	ldi	r16, 0x00	; 0
    3fe4:	10 e0       	ldi	r17, 0x00	; 0

    i2c_start_wait(address+I2C_WRITE);
    i2c_write(location);							// Set up register address 
    i2c_rep_start(address+I2C_READ);

	while (i < size)
    3fe6:	f1 2c       	mov	r15, r1
    3fe8:	0e 15       	cp	r16, r14
    3fea:	1f 05       	cpc	r17, r15
    3fec:	84 f4       	brge	.+32     	; 0x400e <readI2CbyteArray+0x5e>
	{
		if ((i+1)!=size)
    3fee:	0f 5f       	subi	r16, 0xFF	; 255
    3ff0:	1f 4f       	sbci	r17, 0xFF	; 255
    3ff2:	0e 15       	cp	r16, r14
    3ff4:	1f 05       	cpc	r17, r15
    3ff6:	19 f0       	breq	.+6      	; 0x3ffe <readI2CbyteArray+0x4e>
		{
			array[i]=i2c_readAck();
    3ff8:	0e 94 68 3e 	call	0x7cd0	; 0x7cd0 <i2c_readAck>
    3ffc:	02 c0       	rjmp	.+4      	; 0x4002 <readI2CbyteArray+0x52>
		}
		else
		{
			array[i]=i2c_readNak(); 				// Read without ACK on last byte
    3ffe:	0e 94 81 3e 	call	0x7d02	; 0x7d02 <i2c_readNak>
    4002:	f6 01       	movw	r30, r12
    4004:	80 83       	st	Z, r24
    4006:	ff ef       	ldi	r31, 0xFF	; 255
    4008:	cf 1a       	sub	r12, r31
    400a:	df 0a       	sbc	r13, r31
    400c:	ed cf       	rjmp	.-38     	; 0x3fe8 <readI2CbyteArray+0x38>
		}
		i++;
	}

    i2c_stop();
    400e:	0e 94 39 3e 	call	0x7c72	; 0x7c72 <i2c_stop>
}
    4012:	23 96       	adiw	r28, 0x03	; 3
    4014:	e8 e0       	ldi	r30, 0x08	; 8
    4016:	0c 94 ea 41 	jmp	0x83d4	; 0x83d4 <__epilogue_restores__+0x14>

0000401a <RotateVector>:
	VectorX = VectorNewA;
	VectorY = VectorNewB;
}

void RotateVector(float angle)
{
    401a:	4f 92       	push	r4
    401c:	5f 92       	push	r5
    401e:	6f 92       	push	r6
    4020:	7f 92       	push	r7
    4022:	8f 92       	push	r8
    4024:	9f 92       	push	r9
    4026:	af 92       	push	r10
    4028:	bf 92       	push	r11
    402a:	cf 92       	push	r12
    402c:	df 92       	push	r13
    402e:	ef 92       	push	r14
    4030:	ff 92       	push	r15
    4032:	cf 93       	push	r28
    4034:	df 93       	push	r29
    4036:	cd b7       	in	r28, 0x3d	; 61
    4038:	de b7       	in	r29, 0x3e	; 62
    403a:	28 97       	sbiw	r28, 0x08	; 8
    403c:	0f b6       	in	r0, 0x3f	; 63
    403e:	f8 94       	cli
    4040:	de bf       	out	0x3e, r29	; 62
    4042:	0f be       	out	0x3f, r0	; 63
    4044:	cd bf       	out	0x3d, r28	; 61
    4046:	6b 01       	movw	r12, r22
    4048:	7c 01       	movw	r14, r24
	VectorNewA = VectorA * small_cos(angle) - VectorB * small_sine(angle);
    404a:	80 90 a1 05 	lds	r8, 0x05A1
    404e:	90 90 a2 05 	lds	r9, 0x05A2
    4052:	a0 90 a3 05 	lds	r10, 0x05A3
    4056:	b0 90 a4 05 	lds	r11, 0x05A4
float small_cos(float angle)
{
	// cos(angle) = (1 - (angle^2 / 2))
	float temp;
	
	temp = (angle * angle) / 2;
    405a:	9b 01       	movw	r18, r22
    405c:	ac 01       	movw	r20, r24
    405e:	0e 94 c1 40 	call	0x8182	; 0x8182 <__mulsf3>
    4062:	20 e0       	ldi	r18, 0x00	; 0
    4064:	30 e0       	ldi	r19, 0x00	; 0
    4066:	40 e0       	ldi	r20, 0x00	; 0
    4068:	5f e3       	ldi	r21, 0x3F	; 63
    406a:	0e 94 c1 40 	call	0x8182	; 0x8182 <__mulsf3>
    406e:	9b 01       	movw	r18, r22
    4070:	ac 01       	movw	r20, r24
	temp = 1 - temp;
    4072:	60 e0       	ldi	r22, 0x00	; 0
    4074:	70 e0       	ldi	r23, 0x00	; 0
    4076:	80 e8       	ldi	r24, 0x80	; 128
    4078:	9f e3       	ldi	r25, 0x3F	; 63
    407a:	0e 94 09 3f 	call	0x7e12	; 0x7e12 <__subsf3>
    407e:	69 83       	std	Y+1, r22	; 0x01
    4080:	7a 83       	std	Y+2, r23	; 0x02
    4082:	8b 83       	std	Y+3, r24	; 0x03
    4084:	9c 83       	std	Y+4, r25	; 0x04
	VectorY = VectorNewB;
}

void RotateVector(float angle)
{
	VectorNewA = VectorA * small_cos(angle) - VectorB * small_sine(angle);
    4086:	40 90 a5 05 	lds	r4, 0x05A5
    408a:	50 90 a6 05 	lds	r5, 0x05A6
    408e:	60 90 a7 05 	lds	r6, 0x05A7
    4092:	70 90 a8 05 	lds	r7, 0x05A8
    4096:	9b 01       	movw	r18, r22
    4098:	ac 01       	movw	r20, r24
    409a:	c5 01       	movw	r24, r10
    409c:	b4 01       	movw	r22, r8
    409e:	0e 94 c1 40 	call	0x8182	; 0x8182 <__mulsf3>
    40a2:	6d 83       	std	Y+5, r22	; 0x05
    40a4:	7e 83       	std	Y+6, r23	; 0x06
    40a6:	8f 83       	std	Y+7, r24	; 0x07
    40a8:	98 87       	std	Y+8, r25	; 0x08
    40aa:	a7 01       	movw	r20, r14
    40ac:	96 01       	movw	r18, r12
    40ae:	c3 01       	movw	r24, r6
    40b0:	b2 01       	movw	r22, r4
    40b2:	0e 94 c1 40 	call	0x8182	; 0x8182 <__mulsf3>
    40b6:	9b 01       	movw	r18, r22
    40b8:	ac 01       	movw	r20, r24
    40ba:	6d 81       	ldd	r22, Y+5	; 0x05
    40bc:	7e 81       	ldd	r23, Y+6	; 0x06
    40be:	8f 81       	ldd	r24, Y+7	; 0x07
    40c0:	98 85       	ldd	r25, Y+8	; 0x08
    40c2:	0e 94 09 3f 	call	0x7e12	; 0x7e12 <__subsf3>
    40c6:	60 93 8d 05 	sts	0x058D, r22
    40ca:	70 93 8e 05 	sts	0x058E, r23
    40ce:	80 93 8f 05 	sts	0x058F, r24
    40d2:	90 93 90 05 	sts	0x0590, r25
	VectorNewB = VectorA * small_sine(angle) + VectorB * small_cos(angle);
    40d6:	a7 01       	movw	r20, r14
    40d8:	96 01       	movw	r18, r12
    40da:	c5 01       	movw	r24, r10
    40dc:	b4 01       	movw	r22, r8
    40de:	0e 94 c1 40 	call	0x8182	; 0x8182 <__mulsf3>
    40e2:	6b 01       	movw	r12, r22
    40e4:	7c 01       	movw	r14, r24
    40e6:	29 81       	ldd	r18, Y+1	; 0x01
    40e8:	3a 81       	ldd	r19, Y+2	; 0x02
    40ea:	4b 81       	ldd	r20, Y+3	; 0x03
    40ec:	5c 81       	ldd	r21, Y+4	; 0x04
    40ee:	c3 01       	movw	r24, r6
    40f0:	b2 01       	movw	r22, r4
    40f2:	0e 94 c1 40 	call	0x8182	; 0x8182 <__mulsf3>
    40f6:	9b 01       	movw	r18, r22
    40f8:	ac 01       	movw	r20, r24
    40fa:	c7 01       	movw	r24, r14
    40fc:	b6 01       	movw	r22, r12
    40fe:	0e 94 0a 3f 	call	0x7e14	; 0x7e14 <__addsf3>
    4102:	60 93 6d 05 	sts	0x056D, r22
    4106:	70 93 6e 05 	sts	0x056E, r23
    410a:	80 93 6f 05 	sts	0x056F, r24
    410e:	90 93 70 05 	sts	0x0570, r25
}
    4112:	28 96       	adiw	r28, 0x08	; 8
    4114:	0f b6       	in	r0, 0x3f	; 63
    4116:	f8 94       	cli
    4118:	de bf       	out	0x3e, r29	; 62
    411a:	0f be       	out	0x3f, r0	; 63
    411c:	cd bf       	out	0x3d, r28	; 61
    411e:	df 91       	pop	r29
    4120:	cf 91       	pop	r28
    4122:	ff 90       	pop	r15
    4124:	ef 90       	pop	r14
    4126:	df 90       	pop	r13
    4128:	cf 90       	pop	r12
    412a:	bf 90       	pop	r11
    412c:	af 90       	pop	r10
    412e:	9f 90       	pop	r9
    4130:	8f 90       	pop	r8
    4132:	7f 90       	pop	r7
    4134:	6f 90       	pop	r6
    4136:	5f 90       	pop	r5
    4138:	4f 90       	pop	r4
    413a:	08 95       	ret

0000413c <thetascale>:

void thetascale(float gyro, float interval)
{
    413c:	cf 92       	push	r12
    413e:	df 92       	push	r13
    4140:	ef 92       	push	r14
    4142:	ff 92       	push	r15
    4144:	69 01       	movw	r12, r18
    4146:	7a 01       	movw	r14, r20
	// interval = time in seconds since last measurement
	// GYROSENSRADIANS = conversion from raw gyro data to rad/s
	// theta = actual number of radians moved

	theta = (gyro * GYROSENSRADIANS * interval);
    4148:	25 ef       	ldi	r18, 0xF5	; 245
    414a:	31 ea       	ldi	r19, 0xA1	; 161
    414c:	4b e8       	ldi	r20, 0x8B	; 139
    414e:	5c e3       	ldi	r21, 0x3C	; 60
    4150:	0e 94 c1 40 	call	0x8182	; 0x8182 <__mulsf3>
    4154:	a7 01       	movw	r20, r14
    4156:	96 01       	movw	r18, r12
    4158:	0e 94 c1 40 	call	0x8182	; 0x8182 <__mulsf3>
    415c:	6b 01       	movw	r12, r22
    415e:	7c 01       	movw	r14, r24
	
	// The sin() and cos() functions don't appreciate large 
	// input values. Limit the input values to +/-15 degrees. 
	
	if (theta > maxdeltaangle)
    4160:	26 ea       	ldi	r18, 0xA6	; 166
    4162:	3a e0       	ldi	r19, 0x0A	; 10
    4164:	46 e8       	ldi	r20, 0x86	; 134
    4166:	5e e3       	ldi	r21, 0x3E	; 62
    4168:	0e 94 bd 40 	call	0x817a	; 0x817a <__gesf2>
    416c:	18 16       	cp	r1, r24
    416e:	4c f0       	brlt	.+18     	; 0x4182 <thetascale+0x46>
{
	// interval = time in seconds since last measurement
	// GYROSENSRADIANS = conversion from raw gyro data to rad/s
	// theta = actual number of radians moved

	theta = (gyro * GYROSENSRADIANS * interval);
    4170:	c0 92 81 05 	sts	0x0581, r12
    4174:	d0 92 82 05 	sts	0x0582, r13
    4178:	e0 92 83 05 	sts	0x0583, r14
    417c:	f0 92 84 05 	sts	0x0584, r15
    4180:	0c c0       	rjmp	.+24     	; 0x419a <thetascale+0x5e>
	// The sin() and cos() functions don't appreciate large 
	// input values. Limit the input values to +/-15 degrees. 
	
	if (theta > maxdeltaangle)
	{
		theta = maxdeltaangle;
    4182:	86 ea       	ldi	r24, 0xA6	; 166
    4184:	9a e0       	ldi	r25, 0x0A	; 10
    4186:	a6 e8       	ldi	r26, 0x86	; 134
    4188:	be e3       	ldi	r27, 0x3E	; 62
    418a:	80 93 81 05 	sts	0x0581, r24
    418e:	90 93 82 05 	sts	0x0582, r25
    4192:	a0 93 83 05 	sts	0x0583, r26
    4196:	b0 93 84 05 	sts	0x0584, r27
	}
	
	if (theta < -maxdeltaangle)
    419a:	26 ea       	ldi	r18, 0xA6	; 166
    419c:	3a e0       	ldi	r19, 0x0A	; 10
    419e:	46 e8       	ldi	r20, 0x86	; 134
    41a0:	5e eb       	ldi	r21, 0xBE	; 190
    41a2:	60 91 81 05 	lds	r22, 0x0581
    41a6:	70 91 82 05 	lds	r23, 0x0582
    41aa:	80 91 83 05 	lds	r24, 0x0583
    41ae:	90 91 84 05 	lds	r25, 0x0584
    41b2:	0e 94 6e 3f 	call	0x7edc	; 0x7edc <__cmpsf2>
    41b6:	87 ff       	sbrs	r24, 7
    41b8:	0c c0       	rjmp	.+24     	; 0x41d2 <thetascale+0x96>
	{
		theta = -maxdeltaangle;
    41ba:	86 ea       	ldi	r24, 0xA6	; 166
    41bc:	9a e0       	ldi	r25, 0x0A	; 10
    41be:	a6 e8       	ldi	r26, 0x86	; 134
    41c0:	be eb       	ldi	r27, 0xBE	; 190
    41c2:	80 93 81 05 	sts	0x0581, r24
    41c6:	90 93 82 05 	sts	0x0582, r25
    41ca:	a0 93 83 05 	sts	0x0583, r26
    41ce:	b0 93 84 05 	sts	0x0584, r27
	}
}
    41d2:	ff 90       	pop	r15
    41d4:	ef 90       	pop	r14
    41d6:	df 90       	pop	r13
    41d8:	cf 90       	pop	r12
    41da:	08 95       	ret

000041dc <Rotate3dVector>:
	angle[ROLL] = (int16_t)(EulerAngleRoll * -100);
	angle[PITCH] = (int16_t)(EulerAnglePitch * -100);
}

void Rotate3dVector(void)
{
    41dc:	a4 e0       	ldi	r26, 0x04	; 4
    41de:	b0 e0       	ldi	r27, 0x00	; 0
    41e0:	e4 ef       	ldi	r30, 0xF4	; 244
    41e2:	f0 e2       	ldi	r31, 0x20	; 32
    41e4:	0c 94 d4 41 	jmp	0x83a8	; 0x83a8 <__prologue_saves__+0x20>
	// Rotate around X axis (pitch)
	thetascale(GyroPitchVC, interval);
    41e8:	20 91 53 05 	lds	r18, 0x0553
    41ec:	30 91 54 05 	lds	r19, 0x0554
    41f0:	40 91 55 05 	lds	r20, 0x0555
    41f4:	50 91 56 05 	lds	r21, 0x0556
    41f8:	60 91 7d 05 	lds	r22, 0x057D
    41fc:	70 91 7e 05 	lds	r23, 0x057E
    4200:	80 91 7f 05 	lds	r24, 0x057F
    4204:	90 91 80 05 	lds	r25, 0x0580
    4208:	0e 94 9e 20 	call	0x413c	; 0x413c <thetascale>
	VectorA = VectorY;
    420c:	80 91 1d 05 	lds	r24, 0x051D
    4210:	90 91 1e 05 	lds	r25, 0x051E
    4214:	a0 91 1f 05 	lds	r26, 0x051F
    4218:	b0 91 20 05 	lds	r27, 0x0520
    421c:	80 93 a1 05 	sts	0x05A1, r24
    4220:	90 93 a2 05 	sts	0x05A2, r25
    4224:	a0 93 a3 05 	sts	0x05A3, r26
    4228:	b0 93 a4 05 	sts	0x05A4, r27
	VectorB = VectorZ;
    422c:	80 91 00 05 	lds	r24, 0x0500
    4230:	90 91 01 05 	lds	r25, 0x0501
    4234:	a0 91 02 05 	lds	r26, 0x0502
    4238:	b0 91 03 05 	lds	r27, 0x0503
    423c:	80 93 a5 05 	sts	0x05A5, r24
    4240:	90 93 a6 05 	sts	0x05A6, r25
    4244:	a0 93 a7 05 	sts	0x05A7, r26
    4248:	b0 93 a8 05 	sts	0x05A8, r27
	RotateVector(theta);
    424c:	60 91 81 05 	lds	r22, 0x0581
    4250:	70 91 82 05 	lds	r23, 0x0582
    4254:	80 91 83 05 	lds	r24, 0x0583
    4258:	90 91 84 05 	lds	r25, 0x0584
    425c:	0e 94 0d 20 	call	0x401a	; 0x401a <RotateVector>
	VectorY = VectorNewA;
    4260:	80 91 8d 05 	lds	r24, 0x058D
    4264:	90 91 8e 05 	lds	r25, 0x058E
    4268:	a0 91 8f 05 	lds	r26, 0x058F
    426c:	b0 91 90 05 	lds	r27, 0x0590
    4270:	80 93 1d 05 	sts	0x051D, r24
    4274:	90 93 1e 05 	sts	0x051E, r25
    4278:	a0 93 1f 05 	sts	0x051F, r26
    427c:	b0 93 20 05 	sts	0x0520, r27
	VectorZ = VectorNewB;
    4280:	80 91 6d 05 	lds	r24, 0x056D
    4284:	90 91 6e 05 	lds	r25, 0x056E
    4288:	a0 91 6f 05 	lds	r26, 0x056F
    428c:	b0 91 70 05 	lds	r27, 0x0570
    4290:	80 93 00 05 	sts	0x0500, r24
    4294:	90 93 01 05 	sts	0x0501, r25
    4298:	a0 93 02 05 	sts	0x0502, r26
    429c:	b0 93 03 05 	sts	0x0503, r27

	// Rotate around Y axis (roll)
	thetascale (GyroRollVC, interval);
    42a0:	20 91 53 05 	lds	r18, 0x0553
    42a4:	30 91 54 05 	lds	r19, 0x0554
    42a8:	40 91 55 05 	lds	r20, 0x0555
    42ac:	50 91 56 05 	lds	r21, 0x0556
    42b0:	60 91 85 05 	lds	r22, 0x0585
    42b4:	70 91 86 05 	lds	r23, 0x0586
    42b8:	80 91 87 05 	lds	r24, 0x0587
    42bc:	90 91 88 05 	lds	r25, 0x0588
    42c0:	0e 94 9e 20 	call	0x413c	; 0x413c <thetascale>
	VectorA = VectorX;
    42c4:	80 91 21 05 	lds	r24, 0x0521
    42c8:	90 91 22 05 	lds	r25, 0x0522
    42cc:	a0 91 23 05 	lds	r26, 0x0523
    42d0:	b0 91 24 05 	lds	r27, 0x0524
    42d4:	80 93 a1 05 	sts	0x05A1, r24
    42d8:	90 93 a2 05 	sts	0x05A2, r25
    42dc:	a0 93 a3 05 	sts	0x05A3, r26
    42e0:	b0 93 a4 05 	sts	0x05A4, r27
	VectorB = VectorZ;
    42e4:	80 91 00 05 	lds	r24, 0x0500
    42e8:	90 91 01 05 	lds	r25, 0x0501
    42ec:	a0 91 02 05 	lds	r26, 0x0502
    42f0:	b0 91 03 05 	lds	r27, 0x0503
    42f4:	80 93 a5 05 	sts	0x05A5, r24
    42f8:	90 93 a6 05 	sts	0x05A6, r25
    42fc:	a0 93 a7 05 	sts	0x05A7, r26
    4300:	b0 93 a8 05 	sts	0x05A8, r27
	RotateVector(theta);
    4304:	60 91 81 05 	lds	r22, 0x0581
    4308:	70 91 82 05 	lds	r23, 0x0582
    430c:	80 91 83 05 	lds	r24, 0x0583
    4310:	90 91 84 05 	lds	r25, 0x0584
    4314:	0e 94 0d 20 	call	0x401a	; 0x401a <RotateVector>
	VectorX = VectorNewA;
    4318:	80 91 8d 05 	lds	r24, 0x058D
    431c:	90 91 8e 05 	lds	r25, 0x058E
    4320:	a0 91 8f 05 	lds	r26, 0x058F
    4324:	b0 91 90 05 	lds	r27, 0x0590
    4328:	80 93 21 05 	sts	0x0521, r24
    432c:	90 93 22 05 	sts	0x0522, r25
    4330:	a0 93 23 05 	sts	0x0523, r26
    4334:	b0 93 24 05 	sts	0x0524, r27
	VectorZ = VectorNewB;
    4338:	80 91 6d 05 	lds	r24, 0x056D
    433c:	90 91 6e 05 	lds	r25, 0x056E
    4340:	a0 91 6f 05 	lds	r26, 0x056F
    4344:	b0 91 70 05 	lds	r27, 0x0570
    4348:	80 93 00 05 	sts	0x0500, r24
    434c:	90 93 01 05 	sts	0x0501, r25
    4350:	a0 93 02 05 	sts	0x0502, r26
    4354:	b0 93 03 05 	sts	0x0503, r27

	// Rotate around Z axis (yaw)
	thetascale(gyroADC[YAW], interval);
    4358:	20 91 53 05 	lds	r18, 0x0553
    435c:	30 91 54 05 	lds	r19, 0x0554
    4360:	40 91 55 05 	lds	r20, 0x0555
    4364:	50 91 56 05 	lds	r21, 0x0556
    4368:	60 91 6b 05 	lds	r22, 0x056B
    436c:	70 91 6c 05 	lds	r23, 0x056C
    4370:	88 27       	eor	r24, r24
    4372:	77 fd       	sbrc	r23, 7
    4374:	80 95       	com	r24
    4376:	98 2f       	mov	r25, r24
    4378:	29 83       	std	Y+1, r18	; 0x01
    437a:	3a 83       	std	Y+2, r19	; 0x02
    437c:	4b 83       	std	Y+3, r20	; 0x03
    437e:	5c 83       	std	Y+4, r21	; 0x04
    4380:	0e 94 0d 40 	call	0x801a	; 0x801a <__floatsisf>
    4384:	29 81       	ldd	r18, Y+1	; 0x01
    4386:	3a 81       	ldd	r19, Y+2	; 0x02
    4388:	4b 81       	ldd	r20, Y+3	; 0x03
    438a:	5c 81       	ldd	r21, Y+4	; 0x04
    438c:	0e 94 9e 20 	call	0x413c	; 0x413c <thetascale>
	VectorA = VectorX;
    4390:	80 91 21 05 	lds	r24, 0x0521
    4394:	90 91 22 05 	lds	r25, 0x0522
    4398:	a0 91 23 05 	lds	r26, 0x0523
    439c:	b0 91 24 05 	lds	r27, 0x0524
    43a0:	80 93 a1 05 	sts	0x05A1, r24
    43a4:	90 93 a2 05 	sts	0x05A2, r25
    43a8:	a0 93 a3 05 	sts	0x05A3, r26
    43ac:	b0 93 a4 05 	sts	0x05A4, r27
	VectorB = VectorY;
    43b0:	80 91 1d 05 	lds	r24, 0x051D
    43b4:	90 91 1e 05 	lds	r25, 0x051E
    43b8:	a0 91 1f 05 	lds	r26, 0x051F
    43bc:	b0 91 20 05 	lds	r27, 0x0520
    43c0:	80 93 a5 05 	sts	0x05A5, r24
    43c4:	90 93 a6 05 	sts	0x05A6, r25
    43c8:	a0 93 a7 05 	sts	0x05A7, r26
    43cc:	b0 93 a8 05 	sts	0x05A8, r27
	RotateVector(theta);
    43d0:	60 91 81 05 	lds	r22, 0x0581
    43d4:	70 91 82 05 	lds	r23, 0x0582
    43d8:	80 91 83 05 	lds	r24, 0x0583
    43dc:	90 91 84 05 	lds	r25, 0x0584
    43e0:	0e 94 0d 20 	call	0x401a	; 0x401a <RotateVector>
	VectorX = VectorNewA;
    43e4:	80 91 8d 05 	lds	r24, 0x058D
    43e8:	90 91 8e 05 	lds	r25, 0x058E
    43ec:	a0 91 8f 05 	lds	r26, 0x058F
    43f0:	b0 91 90 05 	lds	r27, 0x0590
    43f4:	80 93 21 05 	sts	0x0521, r24
    43f8:	90 93 22 05 	sts	0x0522, r25
    43fc:	a0 93 23 05 	sts	0x0523, r26
    4400:	b0 93 24 05 	sts	0x0524, r27
	VectorY = VectorNewB;
    4404:	80 91 6d 05 	lds	r24, 0x056D
    4408:	90 91 6e 05 	lds	r25, 0x056E
    440c:	a0 91 6f 05 	lds	r26, 0x056F
    4410:	b0 91 70 05 	lds	r27, 0x0570
    4414:	80 93 1d 05 	sts	0x051D, r24
    4418:	90 93 1e 05 	sts	0x051E, r25
    441c:	a0 93 1f 05 	sts	0x051F, r26
    4420:	b0 93 20 05 	sts	0x0520, r27
}
    4424:	24 96       	adiw	r28, 0x04	; 4
    4426:	e2 e0       	ldi	r30, 0x02	; 2
    4428:	0c 94 f0 41 	jmp	0x83e0	; 0x83e0 <__epilogue_restores__+0x20>

0000442c <ext2>:
	EulerAngleRoll = ext2(VectorX);
	EulerAnglePitch = ext2(VectorY);
}

float ext2(float Vector)
{
    442c:	cf 92       	push	r12
    442e:	df 92       	push	r13
    4430:	ef 92       	push	r14
    4432:	ff 92       	push	r15
	float temp;
	
	// Rough translation to Euler angles
	temp = Vector * 90;
    4434:	20 e0       	ldi	r18, 0x00	; 0
    4436:	30 e0       	ldi	r19, 0x00	; 0
    4438:	44 eb       	ldi	r20, 0xB4	; 180
    443a:	52 e4       	ldi	r21, 0x42	; 66
    443c:	0e 94 c1 40 	call	0x8182	; 0x8182 <__mulsf3>
    4440:	6b 01       	movw	r12, r22
    4442:	7c 01       	movw	r14, r24

	// Change 0-90-0 to 0-90-180 so that
	// swap happens at 100% inverted
	if (VectorZ < 0)
    4444:	20 e0       	ldi	r18, 0x00	; 0
    4446:	30 e0       	ldi	r19, 0x00	; 0
    4448:	a9 01       	movw	r20, r18
    444a:	60 91 00 05 	lds	r22, 0x0500
    444e:	70 91 01 05 	lds	r23, 0x0501
    4452:	80 91 02 05 	lds	r24, 0x0502
    4456:	90 91 03 05 	lds	r25, 0x0503
    445a:	0e 94 6e 3f 	call	0x7edc	; 0x7edc <__cmpsf2>
    445e:	87 ff       	sbrs	r24, 7
    4460:	18 c0       	rjmp	.+48     	; 0x4492 <ext2+0x66>
	{
		// CW rotations
		if (temp > 0)
    4462:	20 e0       	ldi	r18, 0x00	; 0
    4464:	30 e0       	ldi	r19, 0x00	; 0
    4466:	a9 01       	movw	r20, r18
    4468:	c7 01       	movw	r24, r14
    446a:	b6 01       	movw	r22, r12
    446c:	0e 94 bd 40 	call	0x817a	; 0x817a <__gesf2>
		{
			temp = 180 - temp;
    4470:	a7 01       	movw	r20, r14
    4472:	96 01       	movw	r18, r12
	// Change 0-90-0 to 0-90-180 so that
	// swap happens at 100% inverted
	if (VectorZ < 0)
	{
		// CW rotations
		if (temp > 0)
    4474:	18 16       	cp	r1, r24
    4476:	2c f4       	brge	.+10     	; 0x4482 <ext2+0x56>
		{
			temp = 180 - temp;
    4478:	60 e0       	ldi	r22, 0x00	; 0
    447a:	70 e0       	ldi	r23, 0x00	; 0
    447c:	84 e3       	ldi	r24, 0x34	; 52
    447e:	93 e4       	ldi	r25, 0x43	; 67
    4480:	04 c0       	rjmp	.+8      	; 0x448a <ext2+0x5e>
		}
		// CCW rotations
		else
		{
			temp = -180 - temp;
    4482:	60 e0       	ldi	r22, 0x00	; 0
    4484:	70 e0       	ldi	r23, 0x00	; 0
    4486:	84 e3       	ldi	r24, 0x34	; 52
    4488:	93 ec       	ldi	r25, 0xC3	; 195
    448a:	0e 94 09 3f 	call	0x7e12	; 0x7e12 <__subsf3>
    448e:	6b 01       	movw	r12, r22
    4490:	7c 01       	movw	r14, r24
		}
	}

	return (temp);
}
    4492:	c7 01       	movw	r24, r14
    4494:	b6 01       	movw	r22, r12
    4496:	ff 90       	pop	r15
    4498:	ef 90       	pop	r14
    449a:	df 90       	pop	r13
    449c:	cf 90       	pop	r12
    449e:	08 95       	ret

000044a0 <ExtractEulerAngles>:
	return temp;
}

void ExtractEulerAngles(void)
{
	EulerAngleRoll = ext2(VectorX);
    44a0:	60 91 21 05 	lds	r22, 0x0521
    44a4:	70 91 22 05 	lds	r23, 0x0522
    44a8:	80 91 23 05 	lds	r24, 0x0523
    44ac:	90 91 24 05 	lds	r25, 0x0524
    44b0:	0e 94 16 22 	call	0x442c	; 0x442c <ext2>
    44b4:	60 93 9d 05 	sts	0x059D, r22
    44b8:	70 93 9e 05 	sts	0x059E, r23
    44bc:	80 93 9f 05 	sts	0x059F, r24
    44c0:	90 93 a0 05 	sts	0x05A0, r25
	EulerAnglePitch = ext2(VectorY);
    44c4:	60 91 1d 05 	lds	r22, 0x051D
    44c8:	70 91 1e 05 	lds	r23, 0x051E
    44cc:	80 91 1f 05 	lds	r24, 0x051F
    44d0:	90 91 20 05 	lds	r25, 0x0520
    44d4:	0e 94 16 22 	call	0x442c	; 0x442c <ext2>
    44d8:	60 93 71 05 	sts	0x0571, r22
    44dc:	70 93 72 05 	sts	0x0572, r23
    44e0:	80 93 73 05 	sts	0x0573, r24
    44e4:	90 93 74 05 	sts	0x0574, r25
    44e8:	08 95       	ret

000044ea <simple_imu_update>:
//		* = swapped axis
//
//************************************************************

void simple_imu_update(uint32_t period)
{
    44ea:	a8 e0       	ldi	r26, 0x08	; 8
    44ec:	b0 e0       	ldi	r27, 0x00	; 0
    44ee:	eb e7       	ldi	r30, 0x7B	; 123
    44f0:	f2 e2       	ldi	r31, 0x22	; 34
    44f2:	0c 94 c6 41 	jmp	0x838c	; 0x838c <__prologue_saves__+0x4>
	uint32_t	roll_sq, pitch_sq, yaw_sq;
	uint32_t 	AccMag = 0;
		
	// Work out interval in seconds
	// Convert (period) from units of 400ns (1/2500000) to seconds (1s/400ns = 2500000)
	tempf = period;						// Promote int16_t to float
    44f6:	0e 94 0b 40 	call	0x8016	; 0x8016 <__floatunsisf>
	interval = tempf/2500000.0f;		// This gives the period in seconds
    44fa:	20 e8       	ldi	r18, 0x80	; 128
    44fc:	36 e9       	ldi	r19, 0x96	; 150
    44fe:	48 e1       	ldi	r20, 0x18	; 24
    4500:	5a e4       	ldi	r21, 0x4A	; 74
    4502:	0e 94 72 3f 	call	0x7ee4	; 0x7ee4 <__divsf3>
    4506:	60 93 53 05 	sts	0x0553, r22
    450a:	70 93 54 05 	sts	0x0554, r23
    450e:	80 93 55 05 	sts	0x0555, r24
    4512:	90 93 56 05 	sts	0x0556, r25

	tempf = pgm_read_byte(&LPF_lookup[Config.Acc_LPF]); // Lookup actual LPF value and promote
    4516:	60 91 37 06 	lds	r22, 0x0637
    451a:	e6 2f       	mov	r30, r22
    451c:	ff 27       	eor	r31, r31
    451e:	e7 fd       	sbrc	r30, 7
    4520:	f0 95       	com	r31
    4522:	eb 57       	subi	r30, 0x7B	; 123
    4524:	f8 4e       	sbci	r31, 0xE8	; 232
    4526:	64 91       	lpm	r22, Z
    4528:	70 e0       	ldi	r23, 0x00	; 0
    452a:	80 e0       	ldi	r24, 0x00	; 0
    452c:	90 e0       	ldi	r25, 0x00	; 0
    452e:	0e 94 0b 40 	call	0x8016	; 0x8016 <__floatunsisf>
    4532:	6b 01       	movw	r12, r22
    4534:	7c 01       	movw	r14, r24
    4536:	02 e3       	ldi	r16, 0x32	; 50
    4538:	15 e0       	ldi	r17, 0x05	; 5
    453a:	81 e9       	ldi	r24, 0x91	; 145
    453c:	68 2e       	mov	r6, r24
    453e:	85 e0       	ldi	r24, 0x05	; 5
    4540:	78 2e       	mov	r7, r24
	
	// Smooth Acc signals - note that accSmooth is in [ROLL, PITCH, YAW] order
	for (axis = 0; axis < NUMBEROFAXIS; axis++)
	{
		accADCf = accADC[axis]; // Promote
    4542:	d8 01       	movw	r26, r16
    4544:	6d 91       	ld	r22, X+
    4546:	7d 91       	ld	r23, X+
    4548:	8d 01       	movw	r16, r26
    454a:	88 27       	eor	r24, r24
    454c:	77 fd       	sbrc	r23, 7
    454e:	80 95       	com	r24
    4550:	98 2f       	mov	r25, r24
    4552:	0e 94 0d 40 	call	0x801a	; 0x801a <__floatsisf>
    4556:	4b 01       	movw	r8, r22
    4558:	5c 01       	movw	r10, r24
		
		// Acc LPF
		if (tempf > 1)
    455a:	20 e0       	ldi	r18, 0x00	; 0
    455c:	30 e0       	ldi	r19, 0x00	; 0
    455e:	40 e8       	ldi	r20, 0x80	; 128
    4560:	5f e3       	ldi	r21, 0x3F	; 63
    4562:	c7 01       	movw	r24, r14
    4564:	b6 01       	movw	r22, r12
    4566:	0e 94 bd 40 	call	0x817a	; 0x817a <__gesf2>
    456a:	18 16       	cp	r1, r24
    456c:	f4 f4       	brge	.+60     	; 0x45aa <simple_imu_update+0xc0>
		{
			// Acc LPF
			accSmooth[axis] = (accSmooth[axis] * (tempf - 1.0f) - accADCf) / tempf;
    456e:	20 e0       	ldi	r18, 0x00	; 0
    4570:	30 e0       	ldi	r19, 0x00	; 0
    4572:	40 e8       	ldi	r20, 0x80	; 128
    4574:	5f e3       	ldi	r21, 0x3F	; 63
    4576:	c7 01       	movw	r24, r14
    4578:	b6 01       	movw	r22, r12
    457a:	0e 94 09 3f 	call	0x7e12	; 0x7e12 <__subsf3>
    457e:	f3 01       	movw	r30, r6
    4580:	20 81       	ld	r18, Z
    4582:	31 81       	ldd	r19, Z+1	; 0x01
    4584:	42 81       	ldd	r20, Z+2	; 0x02
    4586:	53 81       	ldd	r21, Z+3	; 0x03
    4588:	0e 94 c1 40 	call	0x8182	; 0x8182 <__mulsf3>
    458c:	a5 01       	movw	r20, r10
    458e:	94 01       	movw	r18, r8
    4590:	0e 94 09 3f 	call	0x7e12	; 0x7e12 <__subsf3>
    4594:	a7 01       	movw	r20, r14
    4596:	96 01       	movw	r18, r12
    4598:	0e 94 72 3f 	call	0x7ee4	; 0x7ee4 <__divsf3>
    459c:	d3 01       	movw	r26, r6
    459e:	6d 93       	st	X+, r22
    45a0:	7d 93       	st	X+, r23
    45a2:	8d 93       	st	X+, r24
    45a4:	9c 93       	st	X, r25
    45a6:	13 97       	sbiw	r26, 0x03	; 3
    45a8:	09 c0       	rjmp	.+18     	; 0x45bc <simple_imu_update+0xd2>
		}
		else
		{
			// Use raw accADC[axis] as source for acc values
			accSmooth[axis] =  -accADCf;
    45aa:	b7 fa       	bst	r11, 7
    45ac:	b0 94       	com	r11
    45ae:	b7 f8       	bld	r11, 7
    45b0:	b0 94       	com	r11
    45b2:	f3 01       	movw	r30, r6
    45b4:	80 82       	st	Z, r8
    45b6:	91 82       	std	Z+1, r9	; 0x01
    45b8:	a2 82       	std	Z+2, r10	; 0x02
    45ba:	b3 82       	std	Z+3, r11	; 0x03
    45bc:	f4 e0       	ldi	r31, 0x04	; 4
    45be:	6f 0e       	add	r6, r31
    45c0:	71 1c       	adc	r7, r1
	interval = tempf/2500000.0f;		// This gives the period in seconds

	tempf = pgm_read_byte(&LPF_lookup[Config.Acc_LPF]); // Lookup actual LPF value and promote
	
	// Smooth Acc signals - note that accSmooth is in [ROLL, PITCH, YAW] order
	for (axis = 0; axis < NUMBEROFAXIS; axis++)
    45c2:	85 e0       	ldi	r24, 0x05	; 5
    45c4:	08 33       	cpi	r16, 0x38	; 56
    45c6:	18 07       	cpc	r17, r24
    45c8:	09 f0       	breq	.+2      	; 0x45cc <simple_imu_update+0xe2>
    45ca:	bb cf       	rjmp	.-138    	; 0x4542 <simple_imu_update+0x58>
			accSmooth[axis] =  -accADCf;
		}
	}
	
	// Add correction data to gyro inputs based on difference between Euler angles and acc angles
	AccAngleRoll = accSmooth[ROLL] * SMALLANGLEFACTOR;		// KK2 - AccYfilter
    45cc:	23 ec       	ldi	r18, 0xC3	; 195
    45ce:	35 ef       	ldi	r19, 0xF5	; 245
    45d0:	48 e2       	ldi	r20, 0x28	; 40
    45d2:	5f e3       	ldi	r21, 0x3F	; 63
    45d4:	60 91 91 05 	lds	r22, 0x0591
    45d8:	70 91 92 05 	lds	r23, 0x0592
    45dc:	80 91 93 05 	lds	r24, 0x0593
    45e0:	90 91 94 05 	lds	r25, 0x0594
    45e4:	0e 94 c1 40 	call	0x8182	; 0x8182 <__mulsf3>
    45e8:	69 83       	std	Y+1, r22	; 0x01
    45ea:	7a 83       	std	Y+2, r23	; 0x02
    45ec:	8b 83       	std	Y+3, r24	; 0x03
    45ee:	9c 83       	std	Y+4, r25	; 0x04
    45f0:	60 93 75 05 	sts	0x0575, r22
    45f4:	70 93 76 05 	sts	0x0576, r23
    45f8:	80 93 77 05 	sts	0x0577, r24
    45fc:	90 93 78 05 	sts	0x0578, r25
	AccAnglePitch = accSmooth[PITCH] * SMALLANGLEFACTOR;
    4600:	23 ec       	ldi	r18, 0xC3	; 195
    4602:	35 ef       	ldi	r19, 0xF5	; 245
    4604:	48 e2       	ldi	r20, 0x28	; 40
    4606:	5f e3       	ldi	r21, 0x3F	; 63
    4608:	60 91 95 05 	lds	r22, 0x0595
    460c:	70 91 96 05 	lds	r23, 0x0596
    4610:	80 91 97 05 	lds	r24, 0x0597
    4614:	90 91 98 05 	lds	r25, 0x0598
    4618:	0e 94 c1 40 	call	0x8182	; 0x8182 <__mulsf3>
    461c:	6d 83       	std	Y+5, r22	; 0x05
    461e:	7e 83       	std	Y+6, r23	; 0x06
    4620:	8f 83       	std	Y+7, r24	; 0x07
    4622:	98 87       	std	Y+8, r25	; 0x08
    4624:	60 93 79 05 	sts	0x0579, r22
    4628:	70 93 7a 05 	sts	0x057A, r23
    462c:	80 93 7b 05 	sts	0x057B, r24
    4630:	90 93 7c 05 	sts	0x057C, r25

	// Copy/promote gyro values for rotate
	GyroRollVC = gyroADC[ROLL];								// KK2 - GyroRoll
    4634:	60 91 67 05 	lds	r22, 0x0567
    4638:	70 91 68 05 	lds	r23, 0x0568
    463c:	88 27       	eor	r24, r24
    463e:	77 fd       	sbrc	r23, 7
    4640:	80 95       	com	r24
    4642:	98 2f       	mov	r25, r24
    4644:	0e 94 0d 40 	call	0x801a	; 0x801a <__floatsisf>
    4648:	2b 01       	movw	r4, r22
    464a:	3c 01       	movw	r6, r24
    464c:	60 93 85 05 	sts	0x0585, r22
    4650:	70 93 86 05 	sts	0x0586, r23
    4654:	80 93 87 05 	sts	0x0587, r24
    4658:	90 93 88 05 	sts	0x0588, r25
	GyroPitchVC = gyroADC[PITCH];
    465c:	60 91 69 05 	lds	r22, 0x0569
    4660:	70 91 6a 05 	lds	r23, 0x056A
    4664:	88 27       	eor	r24, r24
    4666:	77 fd       	sbrc	r23, 7
    4668:	80 95       	com	r24
    466a:	98 2f       	mov	r25, r24
    466c:	0e 94 0d 40 	call	0x801a	; 0x801a <__floatsisf>
    4670:	6b 01       	movw	r12, r22
    4672:	7c 01       	movw	r14, r24
    4674:	60 93 7d 05 	sts	0x057D, r22
    4678:	70 93 7e 05 	sts	0x057E, r23
    467c:	80 93 7f 05 	sts	0x057F, r24
    4680:	90 93 80 05 	sts	0x0580, r25

	// Calculate acceleration magnitude.
	roll_sq = (accADC[ROLL] * accADC[ROLL]);
    4684:	20 91 32 05 	lds	r18, 0x0532
    4688:	30 91 33 05 	lds	r19, 0x0533
	pitch_sq = (accADC[PITCH] * accADC[PITCH]);
    468c:	40 91 34 05 	lds	r20, 0x0534
    4690:	50 91 35 05 	lds	r21, 0x0535
	yaw_sq = (accADC[YAW] * accADC[YAW]);
    4694:	e0 91 36 05 	lds	r30, 0x0536
    4698:	f0 91 37 05 	lds	r31, 0x0537
	GyroRollVC = gyroADC[ROLL];								// KK2 - GyroRoll
	GyroPitchVC = gyroADC[PITCH];

	// Calculate acceleration magnitude.
	roll_sq = (accADC[ROLL] * accADC[ROLL]);
	pitch_sq = (accADC[PITCH] * accADC[PITCH]);
    469c:	44 9f       	mul	r20, r20
    469e:	40 01       	movw	r8, r0
    46a0:	45 9f       	mul	r20, r21
    46a2:	90 0c       	add	r9, r0
    46a4:	90 0c       	add	r9, r0
    46a6:	11 24       	eor	r1, r1
    46a8:	b4 01       	movw	r22, r8
    46aa:	88 27       	eor	r24, r24
    46ac:	77 fd       	sbrc	r23, 7
    46ae:	80 95       	com	r24
    46b0:	98 2f       	mov	r25, r24
	// Copy/promote gyro values for rotate
	GyroRollVC = gyroADC[ROLL];								// KK2 - GyroRoll
	GyroPitchVC = gyroADC[PITCH];

	// Calculate acceleration magnitude.
	roll_sq = (accADC[ROLL] * accADC[ROLL]);
    46b2:	22 9f       	mul	r18, r18
    46b4:	a0 01       	movw	r20, r0
    46b6:	23 9f       	mul	r18, r19
    46b8:	50 0d       	add	r21, r0
    46ba:	50 0d       	add	r21, r0
    46bc:	11 24       	eor	r1, r1
    46be:	8a 01       	movw	r16, r20
    46c0:	22 27       	eor	r18, r18
    46c2:	17 fd       	sbrc	r17, 7
    46c4:	20 95       	com	r18
    46c6:	32 2f       	mov	r19, r18
	pitch_sq = (accADC[PITCH] * accADC[PITCH]);
	yaw_sq = (accADC[YAW] * accADC[YAW]);
	AccMag = roll_sq + pitch_sq + yaw_sq;
    46c8:	60 0f       	add	r22, r16
    46ca:	71 1f       	adc	r23, r17
    46cc:	82 1f       	adc	r24, r18
    46ce:	93 1f       	adc	r25, r19
	GyroPitchVC = gyroADC[PITCH];

	// Calculate acceleration magnitude.
	roll_sq = (accADC[ROLL] * accADC[ROLL]);
	pitch_sq = (accADC[PITCH] * accADC[PITCH]);
	yaw_sq = (accADC[YAW] * accADC[YAW]);
    46d0:	ee 9f       	mul	r30, r30
    46d2:	90 01       	movw	r18, r0
    46d4:	ef 9f       	mul	r30, r31
    46d6:	30 0d       	add	r19, r0
    46d8:	30 0d       	add	r19, r0
    46da:	11 24       	eor	r1, r1
    46dc:	89 01       	movw	r16, r18
    46de:	22 27       	eor	r18, r18
    46e0:	17 fd       	sbrc	r17, 7
    46e2:	20 95       	com	r18
    46e4:	32 2f       	mov	r19, r18
	AccMag = roll_sq + pitch_sq + yaw_sq;
    46e6:	60 0f       	add	r22, r16
    46e8:	71 1f       	adc	r23, r17
    46ea:	82 1f       	adc	r24, r18
    46ec:	93 1f       	adc	r25, r19
	
	// Add acc correction if inside local acceleration bounds and not inverted according to VectorZ
	// This is actually a kind of Complementary Filter
	if	((AccMag > acc_0_85G_SQ) && (AccMag < acc_1_15G_SQ) && (VectorZ > 0.5))
    46ee:	0e 94 0b 40 	call	0x8016	; 0x8016 <__floatunsisf>
    46f2:	4b 01       	movw	r8, r22
    46f4:	5c 01       	movw	r10, r24
    46f6:	20 e0       	ldi	r18, 0x00	; 0
    46f8:	34 ef       	ldi	r19, 0xF4	; 244
    46fa:	48 e3       	ldi	r20, 0x38	; 56
    46fc:	56 e4       	ldi	r21, 0x46	; 70
    46fe:	0e 94 bd 40 	call	0x817a	; 0x817a <__gesf2>
    4702:	18 16       	cp	r1, r24
    4704:	0c f0       	brlt	.+2      	; 0x4708 <simple_imu_update+0x21e>
    4706:	6b c0       	rjmp	.+214    	; 0x47de <simple_imu_update+0x2f4>
    4708:	20 e0       	ldi	r18, 0x00	; 0
    470a:	38 e4       	ldi	r19, 0x48	; 72
    470c:	49 ea       	ldi	r20, 0xA9	; 169
    470e:	56 e4       	ldi	r21, 0x46	; 70
    4710:	c5 01       	movw	r24, r10
    4712:	b4 01       	movw	r22, r8
    4714:	0e 94 6e 3f 	call	0x7edc	; 0x7edc <__cmpsf2>
    4718:	87 ff       	sbrs	r24, 7
    471a:	61 c0       	rjmp	.+194    	; 0x47de <simple_imu_update+0x2f4>
    471c:	20 e0       	ldi	r18, 0x00	; 0
    471e:	30 e0       	ldi	r19, 0x00	; 0
    4720:	40 e0       	ldi	r20, 0x00	; 0
    4722:	5f e3       	ldi	r21, 0x3F	; 63
    4724:	60 91 00 05 	lds	r22, 0x0500
    4728:	70 91 01 05 	lds	r23, 0x0501
    472c:	80 91 02 05 	lds	r24, 0x0502
    4730:	90 91 03 05 	lds	r25, 0x0503
    4734:	0e 94 bd 40 	call	0x817a	; 0x817a <__gesf2>
    4738:	18 16       	cp	r1, r24
    473a:	0c f0       	brlt	.+2      	; 0x473e <simple_imu_update+0x254>
    473c:	50 c0       	rjmp	.+160    	; 0x47de <simple_imu_update+0x2f4>
	{
		tempf = (EulerAngleRoll - AccAngleRoll) / (11 - Config.CF_factor); // Default Config.CF_factor is 7
    473e:	80 91 39 06 	lds	r24, 0x0639
    4742:	6b e0       	ldi	r22, 0x0B	; 11
    4744:	70 e0       	ldi	r23, 0x00	; 0
    4746:	68 1b       	sub	r22, r24
    4748:	71 09       	sbc	r23, r1
    474a:	87 fd       	sbrc	r24, 7
    474c:	73 95       	inc	r23
    474e:	88 27       	eor	r24, r24
    4750:	77 fd       	sbrc	r23, 7
    4752:	80 95       	com	r24
    4754:	98 2f       	mov	r25, r24
    4756:	0e 94 0d 40 	call	0x801a	; 0x801a <__floatsisf>
    475a:	4b 01       	movw	r8, r22
    475c:	5c 01       	movw	r10, r24
    475e:	29 81       	ldd	r18, Y+1	; 0x01
    4760:	3a 81       	ldd	r19, Y+2	; 0x02
    4762:	4b 81       	ldd	r20, Y+3	; 0x03
    4764:	5c 81       	ldd	r21, Y+4	; 0x04
    4766:	60 91 9d 05 	lds	r22, 0x059D
    476a:	70 91 9e 05 	lds	r23, 0x059E
    476e:	80 91 9f 05 	lds	r24, 0x059F
    4772:	90 91 a0 05 	lds	r25, 0x05A0
    4776:	0e 94 09 3f 	call	0x7e12	; 0x7e12 <__subsf3>
    477a:	a5 01       	movw	r20, r10
    477c:	94 01       	movw	r18, r8
    477e:	0e 94 72 3f 	call	0x7ee4	; 0x7ee4 <__divsf3>
    4782:	9b 01       	movw	r18, r22
    4784:	ac 01       	movw	r20, r24
		GyroRollVC = GyroRollVC + tempf;
    4786:	c3 01       	movw	r24, r6
    4788:	b2 01       	movw	r22, r4
    478a:	0e 94 0a 3f 	call	0x7e14	; 0x7e14 <__addsf3>
    478e:	60 93 85 05 	sts	0x0585, r22
    4792:	70 93 86 05 	sts	0x0586, r23
    4796:	80 93 87 05 	sts	0x0587, r24
    479a:	90 93 88 05 	sts	0x0588, r25
		
		tempf = (EulerAnglePitch - AccAnglePitch) /(11 - Config.CF_factor);
    479e:	2d 81       	ldd	r18, Y+5	; 0x05
    47a0:	3e 81       	ldd	r19, Y+6	; 0x06
    47a2:	4f 81       	ldd	r20, Y+7	; 0x07
    47a4:	58 85       	ldd	r21, Y+8	; 0x08
    47a6:	60 91 71 05 	lds	r22, 0x0571
    47aa:	70 91 72 05 	lds	r23, 0x0572
    47ae:	80 91 73 05 	lds	r24, 0x0573
    47b2:	90 91 74 05 	lds	r25, 0x0574
    47b6:	0e 94 09 3f 	call	0x7e12	; 0x7e12 <__subsf3>
    47ba:	a5 01       	movw	r20, r10
    47bc:	94 01       	movw	r18, r8
    47be:	0e 94 72 3f 	call	0x7ee4	; 0x7ee4 <__divsf3>
    47c2:	9b 01       	movw	r18, r22
    47c4:	ac 01       	movw	r20, r24
		GyroPitchVC = GyroPitchVC + tempf;
    47c6:	c7 01       	movw	r24, r14
    47c8:	b6 01       	movw	r22, r12
    47ca:	0e 94 0a 3f 	call	0x7e14	; 0x7e14 <__addsf3>
    47ce:	60 93 7d 05 	sts	0x057D, r22
    47d2:	70 93 7e 05 	sts	0x057E, r23
    47d6:	80 93 7f 05 	sts	0x057F, r24
    47da:	90 93 80 05 	sts	0x0580, r25
	}

	// Rotate up-direction 3D vector with gyro inputs
	Rotate3dVector();
    47de:	0e 94 ee 20 	call	0x41dc	; 0x41dc <Rotate3dVector>
	ExtractEulerAngles();
    47e2:	0e 94 50 22 	call	0x44a0	; 0x44a0 <ExtractEulerAngles>
	
	// Upscale to 0.01 degrees resolution and copy to angle[] for display
	angle[ROLL] = (int16_t)(EulerAngleRoll * -100);
    47e6:	20 e0       	ldi	r18, 0x00	; 0
    47e8:	30 e0       	ldi	r19, 0x00	; 0
    47ea:	48 ec       	ldi	r20, 0xC8	; 200
    47ec:	52 ec       	ldi	r21, 0xC2	; 194
    47ee:	60 91 9d 05 	lds	r22, 0x059D
    47f2:	70 91 9e 05 	lds	r23, 0x059E
    47f6:	80 91 9f 05 	lds	r24, 0x059F
    47fa:	90 91 a0 05 	lds	r25, 0x05A0
    47fe:	0e 94 c1 40 	call	0x8182	; 0x8182 <__mulsf3>
    4802:	0e 94 da 3f 	call	0x7fb4	; 0x7fb4 <__fixsfsi>
    4806:	70 93 8a 05 	sts	0x058A, r23
    480a:	60 93 89 05 	sts	0x0589, r22
	angle[PITCH] = (int16_t)(EulerAnglePitch * -100);
    480e:	20 e0       	ldi	r18, 0x00	; 0
    4810:	30 e0       	ldi	r19, 0x00	; 0
    4812:	48 ec       	ldi	r20, 0xC8	; 200
    4814:	52 ec       	ldi	r21, 0xC2	; 194
    4816:	60 91 71 05 	lds	r22, 0x0571
    481a:	70 91 72 05 	lds	r23, 0x0572
    481e:	80 91 73 05 	lds	r24, 0x0573
    4822:	90 91 74 05 	lds	r25, 0x0574
    4826:	0e 94 c1 40 	call	0x8182	; 0x8182 <__mulsf3>
    482a:	0e 94 da 3f 	call	0x7fb4	; 0x7fb4 <__fixsfsi>
    482e:	70 93 8c 05 	sts	0x058C, r23
    4832:	60 93 8b 05 	sts	0x058B, r22
}
    4836:	28 96       	adiw	r28, 0x08	; 8
    4838:	e0 e1       	ldi	r30, 0x10	; 16
    483a:	0c 94 e2 41 	jmp	0x83c4	; 0x83c4 <__epilogue_restores__+0x4>

0000483e <reset_IMU>:
}

void reset_IMU(void)
{
	// Initialise the vector to point straight up
	VectorX = 0;
    483e:	10 92 21 05 	sts	0x0521, r1
    4842:	10 92 22 05 	sts	0x0522, r1
    4846:	10 92 23 05 	sts	0x0523, r1
    484a:	10 92 24 05 	sts	0x0524, r1
	VectorY = 0;
    484e:	10 92 1d 05 	sts	0x051D, r1
    4852:	10 92 1e 05 	sts	0x051E, r1
    4856:	10 92 1f 05 	sts	0x051F, r1
    485a:	10 92 20 05 	sts	0x0520, r1
	VectorZ = 1;
    485e:	80 e0       	ldi	r24, 0x00	; 0
    4860:	90 e0       	ldi	r25, 0x00	; 0
    4862:	a0 e8       	ldi	r26, 0x80	; 128
    4864:	bf e3       	ldi	r27, 0x3F	; 63
    4866:	80 93 00 05 	sts	0x0500, r24
    486a:	90 93 01 05 	sts	0x0501, r25
    486e:	a0 93 02 05 	sts	0x0502, r26
    4872:	b0 93 03 05 	sts	0x0503, r27
	
	// Initialise internal vectors and attitude	
	VectorA = 0;
    4876:	10 92 a1 05 	sts	0x05A1, r1
    487a:	10 92 a2 05 	sts	0x05A2, r1
    487e:	10 92 a3 05 	sts	0x05A3, r1
    4882:	10 92 a4 05 	sts	0x05A4, r1
	VectorB = 0;
    4886:	10 92 a5 05 	sts	0x05A5, r1
    488a:	10 92 a6 05 	sts	0x05A6, r1
    488e:	10 92 a7 05 	sts	0x05A7, r1
    4892:	10 92 a8 05 	sts	0x05A8, r1
	EulerAngleRoll = 0;
    4896:	10 92 9d 05 	sts	0x059D, r1
    489a:	10 92 9e 05 	sts	0x059E, r1
    489e:	10 92 9f 05 	sts	0x059F, r1
    48a2:	10 92 a0 05 	sts	0x05A0, r1
	EulerAnglePitch = 0;
    48a6:	10 92 71 05 	sts	0x0571, r1
    48aa:	10 92 72 05 	sts	0x0572, r1
    48ae:	10 92 73 05 	sts	0x0573, r1
    48b2:	10 92 74 05 	sts	0x0574, r1

	// Reset loop count to zero
	TMR0_counter = 0;	// TMR0 overflow counter
    48b6:	10 92 c6 07 	sts	0x07C6, r1
    48ba:	10 92 c5 07 	sts	0x07C5, r1
	TCNT1 = 0;			// TCNT1 current time
    48be:	10 92 85 00 	sts	0x0085, r1
    48c2:	10 92 84 00 	sts	0x0084, r1
	LoopStartTCNT1 = 0;	// TCNT1 last loop time
    48c6:	10 92 11 05 	sts	0x0511, r1
    48ca:	10 92 10 05 	sts	0x0510, r1
    48ce:	08 95       	ret

000048d0 <init_int>:
// Reconfigure interrupts
//***********************************************************

void init_int(void)
{
	cli();	// Disable interrupts
    48d0:	f8 94       	cli

	switch (Config.RxMode)
    48d2:	80 91 d2 05 	lds	r24, 0x05D2
    48d6:	81 30       	cpi	r24, 0x01	; 1
    48d8:	a1 f0       	breq	.+40     	; 0x4902 <init_int+0x32>
    48da:	44 f4       	brge	.+16     	; 0x48ec <init_int+0x1c>
    48dc:	81 11       	cpse	r24, r1
    48de:	22 c0       	rjmp	.+68     	; 0x4924 <init_int+0x54>
	{
		case CPPM_MODE:
			PCMSK1 = 0;							// Disable AUX
    48e0:	10 92 6c 00 	sts	0x006C, r1
			PCMSK3 = 0;							// Disable THR
    48e4:	10 92 73 00 	sts	0x0073, r1
			EIMSK = 0x04;						// Enable INT2 (Rudder/CPPM input)
    48e8:	84 e0       	ldi	r24, 0x04	; 4
    48ea:	16 c0       	rjmp	.+44     	; 0x4918 <init_int+0x48>

void init_int(void)
{
	cli();	// Disable interrupts

	switch (Config.RxMode)
    48ec:	84 30       	cpi	r24, 0x04	; 4
    48ee:	d4 f4       	brge	.+52     	; 0x4924 <init_int+0x54>
			break;

		case SBUS:
		case SPEKTRUM:
			// Disable PWM input interrupts
			PCMSK1 = 0;							// Disable AUX
    48f0:	10 92 6c 00 	sts	0x006C, r1
			PCMSK3 = 0;							// Disable THR
    48f4:	10 92 73 00 	sts	0x0073, r1
			EIMSK  = 0;							// Disable INT0, 1 and 2 
    48f8:	1d ba       	out	0x1d, r1	; 29

			// Enable serial interrupt
			UCSR0B |= (1 << RXCIE0);
    48fa:	80 91 c1 00 	lds	r24, 0x00C1
    48fe:	80 68       	ori	r24, 0x80	; 128
    4900:	0f c0       	rjmp	.+30     	; 0x4920 <init_int+0x50>
			EIMSK = 0x04;						// Enable INT2 (Rudder/CPPM input)
			UCSR0B &= ~(1 << RXCIE0);			// Disable serial interrupt
			break;

		case PWM:
			PCMSK1 |= (1 << PCINT8);			// PB0 (Aux pin change mask)
    4902:	80 91 6c 00 	lds	r24, 0x006C
    4906:	81 60       	ori	r24, 0x01	; 1
    4908:	80 93 6c 00 	sts	0x006C, r24
			PCMSK3 |= (1 << PCINT24);			// PD0 (Throttle pin change mask)
    490c:	80 91 73 00 	lds	r24, 0x0073
    4910:	81 60       	ori	r24, 0x01	; 1
    4912:	80 93 73 00 	sts	0x0073, r24
			EIMSK  = 0x07;						// Enable INT0, 1 and 2 
    4916:	87 e0       	ldi	r24, 0x07	; 7
    4918:	8d bb       	out	0x1d, r24	; 29
			UCSR0B &= ~(1 << RXCIE0);			// Disable serial interrupt
    491a:	80 91 c1 00 	lds	r24, 0x00C1
    491e:	8f 77       	andi	r24, 0x7F	; 127
			PCMSK1 = 0;							// Disable AUX
			PCMSK3 = 0;							// Disable THR
			EIMSK  = 0;							// Disable INT0, 1 and 2 

			// Enable serial interrupt
			UCSR0B |= (1 << RXCIE0);
    4920:	80 93 c1 00 	sts	0x00C1, r24

		default:
			break;	
	}	

	sei(); // Re-enable interrupts
    4924:	78 94       	sei
    4926:	08 95       	ret

00004928 <init>:

	//***********************************************************
	// I/O setup
	//***********************************************************
	// Set port directions
	DDRA		= 0x30;		// Port A
    4928:	80 e3       	ldi	r24, 0x30	; 48
    492a:	81 b9       	out	0x01, r24	; 1
	DDRC		= 0xFC;		// Port C
    492c:	8c ef       	ldi	r24, 0xFC	; 252
    492e:	87 b9       	out	0x07, r24	; 7
	DDRB		= 0x0A;		// Port B
    4930:	8a e0       	ldi	r24, 0x0A	; 10
    4932:	84 b9       	out	0x04, r24	; 4
	DDRD		= 0xF2;		// Port D
    4934:	82 ef       	ldi	r24, 0xF2	; 242
    4936:	8a b9       	out	0x0a, r24	; 10

	// Hold all PWM outputs low to stop glitches
	// M5 and M6 are on PortA for KK2.1
	MOTORS		= 0;
    4938:	18 b8       	out	0x08, r1	; 8
	M5			= 0;
    493a:	14 98       	cbi	0x02, 4	; 2
	M6			= 0;
    493c:	15 98       	cbi	0x02, 5	; 2

	// Preset I/O pins
	LED1 		= 0;		// LED1 off
    493e:	2b 98       	cbi	0x05, 3	; 5
	LVA 		= 0; 		// LVA alarm OFF
    4940:	29 98       	cbi	0x05, 1	; 5
	LCD_SCL		= 1;		// GLCD clock high
    4942:	5c 9a       	sbi	0x0b, 4	; 11

	// Set/clear pull-ups (1 = set, 0 = clear)
	PINB		= 0xF5;		// Set PB pull-ups
    4944:	85 ef       	ldi	r24, 0xF5	; 245
    4946:	83 b9       	out	0x03, r24	; 3
	PIND		= 0x0C;		// Set PD pull-ups (Don't pull up RX yet)
    4948:	8c e0       	ldi	r24, 0x0C	; 12
    494a:	89 b9       	out	0x09, r24	; 9
    494c:	2f e5       	ldi	r18, 0x5F	; 95
    494e:	48 ed       	ldi	r20, 0xD8	; 216
    4950:	83 e0       	ldi	r24, 0x03	; 3
    4952:	21 50       	subi	r18, 0x01	; 1
    4954:	40 40       	sbci	r20, 0x00	; 0
    4956:	80 40       	sbci	r24, 0x00	; 0
    4958:	e1 f7       	brne	.-8      	; 0x4952 <init+0x2a>
    495a:	00 c0       	rjmp	.+0      	; 0x495c <init+0x34>
    495c:	00 00       	nop
	_delay_ms(63);				// Pause while satellite wakes up	
								// and pull-ups have time to rise.
								// Tweak until bind pulses about 68ms after power-up

	// Bind as master if ONLY button 4 pressed
	if ((PINB & 0xf0) == 0xE0)
    495e:	83 b1       	in	r24, 0x03	; 3
    4960:	80 7f       	andi	r24, 0xF0	; 240
    4962:	80 3e       	cpi	r24, 0xE0	; 224
    4964:	21 f4       	brne	.+8      	; 0x496e <init+0x46>
	{
		DDRD		= 0xF3;		// Switch PD0 to output
    4966:	83 ef       	ldi	r24, 0xF3	; 243
    4968:	8a b9       	out	0x0a, r24	; 10
		bind_master();
    496a:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <bind_master>
	}

	DDRD		= 0xF2;			// Reset Port D directions
    496e:	82 ef       	ldi	r24, 0xF2	; 242
    4970:	8a b9       	out	0x0a, r24	; 10

	// Set/clear pull-ups (1 = set, 0 = clear)
	PIND		= 0x0D;			// Set PD pull-ups (now pull up RX as well)
    4972:	8d e0       	ldi	r24, 0x0D	; 13
    4974:	89 b9       	out	0x09, r24	; 9
	// Timers
	//***********************************************************

	// Timer0 (8bit) - run @ 20MHz / 1024 = 19.531kHz or 51.2us - max 13.1ms
	// Slow timer to extend Timer 1
	TCCR0A = 0;								// Normal operation
    4976:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0x05;							// Clk / 1024 = 19.531kHz or 51.2us - max 13.1ms
    4978:	85 e0       	ldi	r24, 0x05	; 5
    497a:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= (1 << TOIE0);					// Enable interrupts
    497c:	80 91 6e 00 	lds	r24, 0x006E
    4980:	81 60       	ori	r24, 0x01	; 1
    4982:	80 93 6e 00 	sts	0x006E, r24
	TCNT0 = 0;								// Reset counter
    4986:	16 bc       	out	0x26, r1	; 38
	
	// Timer1 (16bit) - run @ 2.5MHz (400ns) - max 26.2ms
	// Used to measure Rx Signals & control ESC/servo output rate
	TCCR1A = 0;
    4988:	10 92 80 00 	sts	0x0080, r1
	TCCR1B |= (1 << CS11);					// Clk/8 = 2.5MHz
    498c:	80 91 81 00 	lds	r24, 0x0081
    4990:	82 60       	ori	r24, 0x02	; 2
    4992:	80 93 81 00 	sts	0x0081, r24

	// Timer2 8bit - run @ 20MHz / 1024 = 19.531kHz or 51.2us - max 13.1ms
	// Used to time arm/disarm intervals
	TCCR2A = 0;	
    4996:	10 92 b0 00 	sts	0x00B0, r1
	TCCR2B = 0x07;							// Clk/1024 = 19.531kHz
    499a:	87 e0       	ldi	r24, 0x07	; 7
    499c:	80 93 b1 00 	sts	0x00B1, r24
	TIMSK2 = 0;
    49a0:	10 92 70 00 	sts	0x0070, r1
	TIFR2 = 0;
    49a4:	17 ba       	out	0x17, r1	; 23
	TCNT2 = 0;								// Reset counter
    49a6:	10 92 b2 00 	sts	0x00B2, r1
	//***********************************************************
	// Interrupts and pin function setup
	//***********************************************************

	// Pin change interrupt enables PCINT1, PCINT2 and PCINT3 (Throttle, AUX and CPPM input)
	PCICR  = 0x0A;							// PCINT8  to PCINT15 (PCINT1 group - AUX)
    49aa:	9a e0       	ldi	r25, 0x0A	; 10
    49ac:	90 93 68 00 	sts	0x0068, r25
											// PCINT24 to PCINT31 (PCINT3 group - THR)
	PCIFR  = 0x0F;							// Clear PCIF0 interrupt flag 
    49b0:	9f e0       	ldi	r25, 0x0F	; 15
    49b2:	9b bb       	out	0x1b, r25	; 27
											// Clear PCIF1 interrupt flag 
											// Clear PCIF2 interrupt flag 
											// Clear PCIF3 interrupt flag 

	// External interrupts INT0 (Elevator) and INT1 (Aileron) and INT2 (Rudder)
	EICRA = 0x15;							// Any change INT0
    49b4:	95 e1       	ldi	r25, 0x15	; 21
    49b6:	90 93 69 00 	sts	0x0069, r25
											// Any change INT1
											// Any change INT2
	EIFR  = 0x07; 							// Clear INT0 interrupt flag (Elevator)
    49ba:	8c bb       	out	0x1c, r24	; 28
	//***********************************************************
	// Start up
	//***********************************************************

	// Preset important flags
	Interrupted = false;						
    49bc:	10 92 c2 07 	sts	0x07C2, r1

	// Load EEPROM settings
	Initial_EEPROM_Config_Load(); // Config now contains valid values
    49c0:	0e 94 72 17 	call	0x2ee4	; 0x2ee4 <Initial_EEPROM_Config_Load>
    49c4:	80 e0       	ldi	r24, 0x00	; 0
    49c6:	90 e0       	ldi	r25, 0x00	; 0
	//***********************************************************

	for (i = 0; i < MAX_RC_CHANNELS; i++)
	{
		
		RxChannel[i] = 3750;
    49c8:	26 ea       	ldi	r18, 0xA6	; 166
    49ca:	3e e0       	ldi	r19, 0x0E	; 14
    49cc:	fc 01       	movw	r30, r24
    49ce:	ee 0f       	add	r30, r30
    49d0:	ff 1f       	adc	r31, r31
    49d2:	ee 54       	subi	r30, 0x4E	; 78
    49d4:	f8 4f       	sbci	r31, 0xF8	; 248
    49d6:	31 83       	std	Z+1, r19	; 0x01
    49d8:	20 83       	st	Z, r18
    49da:	01 96       	adiw	r24, 0x01	; 1
	// RX channel defaults for when no RC connected
	// Not doing this can result in the FC trying (unsuccessfully) to arm
	// and makes entry into the menus very hard
	//***********************************************************

	for (i = 0; i < MAX_RC_CHANNELS; i++)
    49dc:	88 30       	cpi	r24, 0x08	; 8
    49de:	91 05       	cpc	r25, r1
    49e0:	a9 f7       	brne	.-22     	; 0x49cc <init+0xa4>
	{
		
		RxChannel[i] = 3750;
	}
	
	RxChannel[THROTTLE] = 2500; // Min throttle
    49e2:	84 ec       	ldi	r24, 0xC4	; 196
    49e4:	99 e0       	ldi	r25, 0x09	; 9
    49e6:	90 93 b3 07 	sts	0x07B3, r25
    49ea:	80 93 b2 07 	sts	0x07B2, r24
	//***********************************************************
	// GLCD initialisation
	//***********************************************************

	// Initialise the GLCD
	st7565_init();
    49ee:	0e 94 a9 1b 	call	0x3752	; 0x3752 <st7565_init>

	// Make sure the LCD is blank without clearing buffer
	clear_screen();
    49f2:	0e 94 00 1c 	call	0x3800	; 0x3800 <clear_screen>
	//***********************************************************
	// ESC calibration
	//***********************************************************
	
	// Calibrate ESCs if ONLY buttons 1 and 4 pressed
	if ((PINB & 0xf0) == 0x60)
    49f6:	83 b1       	in	r24, 0x03	; 3
    49f8:	80 7f       	andi	r24, 0xF0	; 240
    49fa:	80 36       	cpi	r24, 0x60	; 96
    49fc:	09 f0       	breq	.+2      	; 0x4a00 <init+0xd8>
    49fe:	64 c0       	rjmp	.+200    	; 0x4ac8 <init+0x1a0>
	{
		// Display calibrating message
		st7565_command(CMD_SET_COM_NORMAL); 	// For text (not for logo)
    4a00:	80 ec       	ldi	r24, 0xC0	; 192
    4a02:	0e 94 97 1b 	call	0x372e	; 0x372e <st7565_command>
		clear_buffer(buffer);
    4a06:	80 e0       	ldi	r24, 0x00	; 0
    4a08:	91 e0       	ldi	r25, 0x01	; 1
    4a0a:	0e 94 f7 1b 	call	0x37ee	; 0x37ee <clear_buffer>
		LCD_Display_Text(59,(const unsigned char*)Verdana14,10,25);
    4a0e:	29 e1       	ldi	r18, 0x19	; 25
    4a10:	30 e0       	ldi	r19, 0x00	; 0
    4a12:	4a e0       	ldi	r20, 0x0A	; 10
    4a14:	50 e0       	ldi	r21, 0x00	; 0
    4a16:	69 e4       	ldi	r22, 0x49	; 73
    4a18:	71 e0       	ldi	r23, 0x01	; 1
    4a1a:	8b e3       	ldi	r24, 0x3B	; 59
    4a1c:	90 e0       	ldi	r25, 0x00	; 0
    4a1e:	0e 94 a0 1d 	call	0x3b40	; 0x3b40 <LCD_Display_Text>
		write_buffer(buffer,1);
    4a22:	61 e0       	ldi	r22, 0x01	; 1
    4a24:	80 e0       	ldi	r24, 0x00	; 0
    4a26:	91 e0       	ldi	r25, 0x01	; 1
    4a28:	0e 94 c9 1b 	call	0x3792	; 0x3792 <write_buffer>
		clear_buffer(buffer);
    4a2c:	80 e0       	ldi	r24, 0x00	; 0
    4a2e:	91 e0       	ldi	r25, 0x01	; 1
    4a30:	0e 94 f7 1b 	call	0x37ee	; 0x37ee <clear_buffer>
    4a34:	a4 e3       	ldi	r26, 0x34	; 52
    4a36:	b8 e0       	ldi	r27, 0x08	; 8
    4a38:	ef e3       	ldi	r30, 0x3F	; 63
    4a3a:	f6 e0       	ldi	r31, 0x06	; 6
				// Set output to maximum pulse width
				ServoOut[i] = MOTOR_100;
			}
			else
			{
				ServoOut[i] = SERVO_CENTER;
    4a3c:	8c ed       	ldi	r24, 0xDC	; 220
    4a3e:	95 e0       	ldi	r25, 0x05	; 5
		{
			// Check for motor marker
			if (Config.Channel[i].Motor_marker == MOTOR)
			{
				// Set output to maximum pulse width
				ServoOut[i] = MOTOR_100;
    4a40:	2c e6       	ldi	r18, 0x6C	; 108
    4a42:	37 e0       	ldi	r19, 0x07	; 7
				
		// For each output
		for (i = 0; i < MAX_OUTPUTS; i++)
		{
			// Check for motor marker
			if (Config.Channel[i].Motor_marker == MOTOR)
    4a44:	40 81       	ld	r20, Z
    4a46:	41 30       	cpi	r20, 0x01	; 1
    4a48:	21 f4       	brne	.+8      	; 0x4a52 <init+0x12a>
			{
				// Set output to maximum pulse width
				ServoOut[i] = MOTOR_100;
    4a4a:	11 96       	adiw	r26, 0x01	; 1
    4a4c:	3c 93       	st	X, r19
    4a4e:	2e 93       	st	-X, r18
    4a50:	03 c0       	rjmp	.+6      	; 0x4a58 <init+0x130>
			}
			else
			{
				ServoOut[i] = SERVO_CENTER;
    4a52:	11 96       	adiw	r26, 0x01	; 1
    4a54:	9c 93       	st	X, r25
    4a56:	8e 93       	st	-X, r24
    4a58:	b6 96       	adiw	r30, 0x26	; 38
    4a5a:	12 96       	adiw	r26, 0x02	; 2
		LCD_Display_Text(59,(const unsigned char*)Verdana14,10,25);
		write_buffer(buffer,1);
		clear_buffer(buffer);
				
		// For each output
		for (i = 0; i < MAX_OUTPUTS; i++)
    4a5c:	47 e0       	ldi	r20, 0x07	; 7
    4a5e:	ef 36       	cpi	r30, 0x6F	; 111
    4a60:	f4 07       	cpc	r31, r20
    4a62:	81 f7       	brne	.-32     	; 0x4a44 <init+0x11c>
				ServoOut[i] = SERVO_CENTER;
			}
		}
					
		// Output HIGH pulse (1.9ms) until buttons released
		while ((PINB & 0xf0) == 0x60)
    4a64:	83 b1       	in	r24, 0x03	; 3
    4a66:	80 7f       	andi	r24, 0xF0	; 240
    4a68:	80 36       	cpi	r24, 0x60	; 96
    4a6a:	71 f4       	brne	.+28     	; 0x4a88 <init+0x160>
		{
			// Pass address of ServoOut array
			output_servo_ppm_asm(&ServoOut[0]);
    4a6c:	84 e3       	ldi	r24, 0x34	; 52
    4a6e:	98 e0       	ldi	r25, 0x08	; 8
    4a70:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <output_servo_ppm_asm>
    4a74:	8f e7       	ldi	r24, 0x7F	; 127
    4a76:	98 e3       	ldi	r25, 0x38	; 56
    4a78:	21 e0       	ldi	r18, 0x01	; 1
    4a7a:	81 50       	subi	r24, 0x01	; 1
    4a7c:	90 40       	sbci	r25, 0x00	; 0
    4a7e:	20 40       	sbci	r18, 0x00	; 0
    4a80:	e1 f7       	brne	.-8      	; 0x4a7a <init+0x152>
    4a82:	00 c0       	rjmp	.+0      	; 0x4a84 <init+0x15c>
    4a84:	00 00       	nop
    4a86:	ee cf       	rjmp	.-36     	; 0x4a64 <init+0x13c>
				ServoOut[i] = SERVO_CENTER;
			}
		}
					
		// Output HIGH pulse (1.9ms) until buttons released
		while ((PINB & 0xf0) == 0x60)
    4a88:	a4 e3       	ldi	r26, 0x34	; 52
    4a8a:	b8 e0       	ldi	r27, 0x08	; 8
    4a8c:	ef e3       	ldi	r30, 0x3F	; 63
    4a8e:	f6 e0       	ldi	r31, 0x06	; 6
		{
			// Check for motor marker
			if (Config.Channel[i].Motor_marker == MOTOR)
			{
				// Set output to maximum pulse width
				ServoOut[i] = MOTOR_0;
    4a90:	8c e4       	ldi	r24, 0x4C	; 76
    4a92:	94 e0       	ldi	r25, 0x04	; 4
		// Output LOW pulse (1.1ms) after buttons released
		// For each output
		for (i = 0; i < MAX_OUTPUTS; i++)
		{
			// Check for motor marker
			if (Config.Channel[i].Motor_marker == MOTOR)
    4a94:	20 81       	ld	r18, Z
    4a96:	21 30       	cpi	r18, 0x01	; 1
    4a98:	19 f4       	brne	.+6      	; 0x4aa0 <init+0x178>
			{
				// Set output to maximum pulse width
				ServoOut[i] = MOTOR_0;
    4a9a:	11 96       	adiw	r26, 0x01	; 1
    4a9c:	9c 93       	st	X, r25
    4a9e:	8e 93       	st	-X, r24
    4aa0:	b6 96       	adiw	r30, 0x26	; 38
    4aa2:	12 96       	adiw	r26, 0x02	; 2
			_delay_ms(20);			
		}

		// Output LOW pulse (1.1ms) after buttons released
		// For each output
		for (i = 0; i < MAX_OUTPUTS; i++)
    4aa4:	47 e0       	ldi	r20, 0x07	; 7
    4aa6:	ef 36       	cpi	r30, 0x6F	; 111
    4aa8:	f4 07       	cpc	r31, r20
    4aaa:	a1 f7       	brne	.-24     	; 0x4a94 <init+0x16c>

		// Loop forever here
		while(1)
		{
			// Pass address of ServoOut array
			output_servo_ppm_asm(&ServoOut[0]);
    4aac:	84 e3       	ldi	r24, 0x34	; 52
    4aae:	98 e0       	ldi	r25, 0x08	; 8
    4ab0:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <output_servo_ppm_asm>
    4ab4:	8f e7       	ldi	r24, 0x7F	; 127
    4ab6:	98 e3       	ldi	r25, 0x38	; 56
    4ab8:	21 e0       	ldi	r18, 0x01	; 1
    4aba:	81 50       	subi	r24, 0x01	; 1
    4abc:	90 40       	sbci	r25, 0x00	; 0
    4abe:	20 40       	sbci	r18, 0x00	; 0
    4ac0:	e1 f7       	brne	.-8      	; 0x4aba <init+0x192>
    4ac2:	00 c0       	rjmp	.+0      	; 0x4ac4 <init+0x19c>
    4ac4:	00 00       	nop
    4ac6:	f2 cf       	rjmp	.-28     	; 0x4aac <init+0x184>
    4ac8:	4f e7       	ldi	r20, 0x7F	; 127
    4aca:	8f e4       	ldi	r24, 0x4F	; 79
    4acc:	92 e1       	ldi	r25, 0x12	; 18
    4ace:	41 50       	subi	r20, 0x01	; 1
    4ad0:	80 40       	sbci	r24, 0x00	; 0
    4ad2:	90 40       	sbci	r25, 0x00	; 0
    4ad4:	e1 f7       	brne	.-8      	; 0x4ace <init+0x1a6>
    4ad6:	00 c0       	rjmp	.+0      	; 0x4ad8 <init+0x1b0>
    4ad8:	00 00       	nop

	// This delay prevents the GLCD flashing up a ghost image of old data
	_delay_ms(300);

	// Reload default eeprom settings if middle two buttons are pressed
	if ((PINB & 0xf0) == 0x90)
    4ada:	83 b1       	in	r24, 0x03	; 3
    4adc:	80 7f       	andi	r24, 0xF0	; 240
    4ade:	80 39       	cpi	r24, 0x90	; 144
    4ae0:	59 f5       	brne	.+86     	; 0x4b38 <init+0x210>
	{
		// Display reset message
		st7565_command(CMD_SET_COM_NORMAL); 	// For text (not for logo)
    4ae2:	80 ec       	ldi	r24, 0xC0	; 192
    4ae4:	0e 94 97 1b 	call	0x372e	; 0x372e <st7565_command>
		clear_buffer(buffer);
    4ae8:	80 e0       	ldi	r24, 0x00	; 0
    4aea:	91 e0       	ldi	r25, 0x01	; 1
    4aec:	0e 94 f7 1b 	call	0x37ee	; 0x37ee <clear_buffer>
		LCD_Display_Text(1,(const unsigned char*)Verdana14,40,25); // "Reset"
    4af0:	29 e1       	ldi	r18, 0x19	; 25
    4af2:	30 e0       	ldi	r19, 0x00	; 0
    4af4:	48 e2       	ldi	r20, 0x28	; 40
    4af6:	50 e0       	ldi	r21, 0x00	; 0
    4af8:	69 e4       	ldi	r22, 0x49	; 73
    4afa:	71 e0       	ldi	r23, 0x01	; 1
    4afc:	81 e0       	ldi	r24, 0x01	; 1
    4afe:	90 e0       	ldi	r25, 0x00	; 0
    4b00:	0e 94 a0 1d 	call	0x3b40	; 0x3b40 <LCD_Display_Text>
		write_buffer(buffer,1);
    4b04:	61 e0       	ldi	r22, 0x01	; 1
    4b06:	80 e0       	ldi	r24, 0x00	; 0
    4b08:	91 e0       	ldi	r25, 0x01	; 1
    4b0a:	0e 94 c9 1b 	call	0x3792	; 0x3792 <write_buffer>
		clear_buffer(buffer);
    4b0e:	80 e0       	ldi	r24, 0x00	; 0
    4b10:	91 e0       	ldi	r25, 0x01	; 1
    4b12:	0e 94 f7 1b 	call	0x37ee	; 0x37ee <clear_buffer>
		
		// Reset EEPROM settings
		Set_EEPROM_Default_Config();
    4b16:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <Set_EEPROM_Default_Config>
		Save_Config_to_EEPROM();
    4b1a:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <Save_Config_to_EEPROM>

		// Set contrast to the default value
		st7565_set_brightness((uint8_t)Config.Contrast);
    4b1e:	80 91 32 06 	lds	r24, 0x0632
    4b22:	0e 94 9f 1b 	call	0x373e	; 0x373e <st7565_set_brightness>
    4b26:	2f e7       	ldi	r18, 0x7F	; 127
    4b28:	44 e8       	ldi	r20, 0x84	; 132
    4b2a:	8e e1       	ldi	r24, 0x1E	; 30
    4b2c:	21 50       	subi	r18, 0x01	; 1
    4b2e:	40 40       	sbci	r20, 0x00	; 0
    4b30:	80 40       	sbci	r24, 0x00	; 0
    4b32:	e1 f7       	brne	.-8      	; 0x4b2c <init+0x204>
    4b34:	00 c0       	rjmp	.+0      	; 0x4b36 <init+0x20e>
    4b36:	00 00       	nop
		_delay_ms(500);		// Save is now too fast to show the "Reset" text long enough

	}

	// Write logo from buffer
	write_buffer(buffer,1);
    4b38:	61 e0       	ldi	r22, 0x01	; 1
    4b3a:	80 e0       	ldi	r24, 0x00	; 0
    4b3c:	91 e0       	ldi	r25, 0x01	; 1
    4b3e:	0e 94 c9 1b 	call	0x3792	; 0x3792 <write_buffer>
    4b42:	9f ef       	ldi	r25, 0xFF	; 255
    4b44:	28 e0       	ldi	r18, 0x08	; 8
    4b46:	4d e3       	ldi	r20, 0x3D	; 61
    4b48:	91 50       	subi	r25, 0x01	; 1
    4b4a:	20 40       	sbci	r18, 0x00	; 0
    4b4c:	40 40       	sbci	r20, 0x00	; 0
    4b4e:	e1 f7       	brne	.-8      	; 0x4b48 <init+0x220>
    4b50:	00 c0       	rjmp	.+0      	; 0x4b52 <init+0x22a>
    4b52:	00 00       	nop
	_delay_ms(1000);
	st7565_init(); // Seems necessary for KK2 mini
    4b54:	0e 94 a9 1b 	call	0x3752	; 0x3752 <st7565_init>
	
	//***********************************************************
	// i2c init
	//***********************************************************	

	i2c_init();
    4b58:	0e 94 b4 3d 	call	0x7b68	; 0x7b68 <i2c_init>
	init_i2c_gyros();
    4b5c:	0e 94 a8 1f 	call	0x3f50	; 0x3f50 <init_i2c_gyros>
	init_i2c_accs();
    4b60:	0e 94 a9 10 	call	0x2152	; 0x2152 <init_i2c_accs>
	//***********************************************************
	// Remaining init tasks
	//***********************************************************

	// Display "Hold steady" message
	clear_buffer(buffer);
    4b64:	80 e0       	ldi	r24, 0x00	; 0
    4b66:	91 e0       	ldi	r25, 0x01	; 1
    4b68:	0e 94 f7 1b 	call	0x37ee	; 0x37ee <clear_buffer>
	st7565_command(CMD_SET_COM_NORMAL); 	// For text (not for logo)
    4b6c:	80 ec       	ldi	r24, 0xC0	; 192
    4b6e:	0e 94 97 1b 	call	0x372e	; 0x372e <st7565_command>
	//clear_buffer(buffer);
	LCD_Display_Text(2,(const unsigned char*)Verdana14,18,25);	// "Hold steady"
    4b72:	29 e1       	ldi	r18, 0x19	; 25
    4b74:	30 e0       	ldi	r19, 0x00	; 0
    4b76:	42 e1       	ldi	r20, 0x12	; 18
    4b78:	50 e0       	ldi	r21, 0x00	; 0
    4b7a:	69 e4       	ldi	r22, 0x49	; 73
    4b7c:	71 e0       	ldi	r23, 0x01	; 1
    4b7e:	82 e0       	ldi	r24, 0x02	; 2
    4b80:	90 e0       	ldi	r25, 0x00	; 0
    4b82:	0e 94 a0 1d 	call	0x3b40	; 0x3b40 <LCD_Display_Text>
	write_buffer(buffer,1);	
    4b86:	61 e0       	ldi	r22, 0x01	; 1
    4b88:	80 e0       	ldi	r24, 0x00	; 0
    4b8a:	91 e0       	ldi	r25, 0x01	; 1
    4b8c:	0e 94 c9 1b 	call	0x3792	; 0x3792 <write_buffer>
	clear_buffer(buffer);
    4b90:	80 e0       	ldi	r24, 0x00	; 0
    4b92:	91 e0       	ldi	r25, 0x01	; 1
    4b94:	0e 94 f7 1b 	call	0x37ee	; 0x37ee <clear_buffer>
		
	// Do startup tasks
	UpdateLimits();							// Update travel limits	
    4b98:	0e 94 29 30 	call	0x6052	; 0x6052 <UpdateLimits>
	Init_ADC();
    4b9c:	0e 94 b4 10 	call	0x2168	; 0x2168 <Init_ADC>
	init_int();								// Initialise interrupts based on RC input mode
    4ba0:	0e 94 68 24 	call	0x48d0	; 0x48d0 <init_int>
	init_uart();							// Initialise UART
    4ba4:	0e 94 9a 3e 	call	0x7d34	; 0x7d34 <init_uart>

	// Initial gyro calibration
	if (!CalibrateGyrosSlow())
    4ba8:	0e 94 f8 1e 	call	0x3df0	; 0x3df0 <CalibrateGyrosSlow>
    4bac:	81 11       	cpse	r24, r1
    4bae:	29 c0       	rjmp	.+82     	; 0x4c02 <init+0x2da>
	{
		clear_buffer(buffer);
    4bb0:	80 e0       	ldi	r24, 0x00	; 0
    4bb2:	91 e0       	ldi	r25, 0x01	; 1
    4bb4:	0e 94 f7 1b 	call	0x37ee	; 0x37ee <clear_buffer>
		LCD_Display_Text(61,(const unsigned char*)Verdana14,25,25); // "Cal. failed"
    4bb8:	29 e1       	ldi	r18, 0x19	; 25
    4bba:	30 e0       	ldi	r19, 0x00	; 0
    4bbc:	49 e1       	ldi	r20, 0x19	; 25
    4bbe:	50 e0       	ldi	r21, 0x00	; 0
    4bc0:	69 e4       	ldi	r22, 0x49	; 73
    4bc2:	71 e0       	ldi	r23, 0x01	; 1
    4bc4:	8d e3       	ldi	r24, 0x3D	; 61
    4bc6:	90 e0       	ldi	r25, 0x00	; 0
    4bc8:	0e 94 a0 1d 	call	0x3b40	; 0x3b40 <LCD_Display_Text>
		write_buffer(buffer,1);
    4bcc:	61 e0       	ldi	r22, 0x01	; 1
    4bce:	80 e0       	ldi	r24, 0x00	; 0
    4bd0:	91 e0       	ldi	r25, 0x01	; 1
    4bd2:	0e 94 c9 1b 	call	0x3792	; 0x3792 <write_buffer>
    4bd6:	8f ef       	ldi	r24, 0xFF	; 255
    4bd8:	98 e0       	ldi	r25, 0x08	; 8
    4bda:	2d e3       	ldi	r18, 0x3D	; 61
    4bdc:	81 50       	subi	r24, 0x01	; 1
    4bde:	90 40       	sbci	r25, 0x00	; 0
    4be0:	20 40       	sbci	r18, 0x00	; 0
    4be2:	e1 f7       	brne	.-8      	; 0x4bdc <init+0x2b4>
    4be4:	00 c0       	rjmp	.+0      	; 0x4be6 <init+0x2be>
    4be6:	00 00       	nop
		_delay_ms(1000);
		
		// Reset
		cli();
    4be8:	f8 94       	cli
		wdt_enable(WDTO_15MS);				// Watchdog on, 15ms
    4bea:	28 e0       	ldi	r18, 0x08	; 8
    4bec:	88 e1       	ldi	r24, 0x18	; 24
    4bee:	90 e0       	ldi	r25, 0x00	; 0
    4bf0:	0f b6       	in	r0, 0x3f	; 63
    4bf2:	f8 94       	cli
    4bf4:	a8 95       	wdr
    4bf6:	80 93 60 00 	sts	0x0060, r24
    4bfa:	0f be       	out	0x3f, r0	; 63
    4bfc:	20 93 60 00 	sts	0x0060, r18
    4c00:	ff cf       	rjmp	.-2      	; 0x4c00 <init+0x2d8>
		while(1);							// Wait for reboot
	}

	// Disarm on start-up if Armed setting is ARMABLE
	if (Config.ArmMode == ARMABLE)
    4c02:	80 91 33 06 	lds	r24, 0x0633
    4c06:	81 30       	cpi	r24, 0x01	; 1
    4c08:	29 f4       	brne	.+10     	; 0x4c14 <init+0x2ec>
	{
		General_error |= (1 << DISARMED); 	// Set disarmed bit
    4c0a:	80 91 17 05 	lds	r24, 0x0517
    4c0e:	84 60       	ori	r24, 0x04	; 4
    4c10:	80 93 17 05 	sts	0x0517, r24
	}

	// Check to see that throttle is low if RC detected
	if (Interrupted)
    4c14:	80 91 c2 07 	lds	r24, 0x07C2
    4c18:	88 23       	and	r24, r24
    4c1a:	69 f0       	breq	.+26     	; 0x4c36 <init+0x30e>
	{
		RxGetChannels();
    4c1c:	0e 94 5e 3c 	call	0x78bc	; 0x78bc <RxGetChannels>
		if (MonopolarThrottle > THROTTLEIDLE)
    4c20:	80 91 20 08 	lds	r24, 0x0820
    4c24:	90 91 21 08 	lds	r25, 0x0821
    4c28:	c3 97       	sbiw	r24, 0x33	; 51
    4c2a:	2c f0       	brlt	.+10     	; 0x4c36 <init+0x30e>
		{
			General_error |= (1 << THROTTLE_HIGH); 	// Set throttle high error bit
    4c2c:	80 91 17 05 	lds	r24, 0x0517
    4c30:	81 60       	ori	r24, 0x01	; 1
    4c32:	80 93 17 05 	sts	0x0517, r24
		}
	}

	// Reset IMU
	reset_IMU();
    4c36:	0e 94 1f 24 	call	0x483e	; 0x483e <reset_IMU>

	// Beep that init is complete
	menu_beep(1);
    4c3a:	81 e0       	ldi	r24, 0x01	; 1
    4c3c:	0e 94 74 2b 	call	0x56e8	; 0x56e8 <menu_beep>
    4c40:	08 95       	ret

00004c42 <__vector_18>:
//************************************************************
//* Timer 0 overflow handler for extending TMR1
//************************************************************

ISR(TIMER0_OVF_vect)
{
    4c42:	1f 92       	push	r1
    4c44:	0f 92       	push	r0
    4c46:	0f b6       	in	r0, 0x3f	; 63
    4c48:	0f 92       	push	r0
    4c4a:	11 24       	eor	r1, r1
    4c4c:	8f 93       	push	r24
    4c4e:	9f 93       	push	r25
	TMR0_counter++;
    4c50:	80 91 c5 07 	lds	r24, 0x07C5
    4c54:	90 91 c6 07 	lds	r25, 0x07C6
    4c58:	01 96       	adiw	r24, 0x01	; 1
    4c5a:	90 93 c6 07 	sts	0x07C6, r25
    4c5e:	80 93 c5 07 	sts	0x07C5, r24
}
    4c62:	9f 91       	pop	r25
    4c64:	8f 91       	pop	r24
    4c66:	0f 90       	pop	r0
    4c68:	0f be       	out	0x3f, r0	; 63
    4c6a:	0f 90       	pop	r0
    4c6c:	1f 90       	pop	r1
    4c6e:	18 95       	reti

00004c70 <__vector_2>:
//* Standard PWM mode
//* Sequential PWM inputs from a normal RC receiver
//************************************************************

ISR(INT1_vect)
{
    4c70:	1f 92       	push	r1
    4c72:	0f 92       	push	r0
    4c74:	0f b6       	in	r0, 0x3f	; 63
    4c76:	0f 92       	push	r0
    4c78:	11 24       	eor	r1, r1
    4c7a:	2f 93       	push	r18
    4c7c:	3f 93       	push	r19
    4c7e:	8f 93       	push	r24
    4c80:	9f 93       	push	r25
	// Log interrupts that occur during PWM generation
	if (JitterGate)	JitterFlag = true;	
    4c82:	80 91 dc 07 	lds	r24, 0x07DC
    4c86:	88 23       	and	r24, r24
    4c88:	19 f0       	breq	.+6      	; 0x4c90 <__vector_2+0x20>
    4c8a:	81 e0       	ldi	r24, 0x01	; 1
    4c8c:	80 93 dd 07 	sts	0x07DD, r24

	if (RX_ROLL)	// Rising
    4c90:	4b 9b       	sbis	0x09, 3	; 9
    4c92:	09 c0       	rjmp	.+18     	; 0x4ca6 <__vector_2+0x36>
	{
		RxChannelStart[AILERON] = TCNT1;
    4c94:	80 91 84 00 	lds	r24, 0x0084
    4c98:	90 91 85 00 	lds	r25, 0x0085
    4c9c:	90 93 ca 07 	sts	0x07CA, r25
    4ca0:	80 93 c9 07 	sts	0x07C9, r24
    4ca4:	14 c0       	rjmp	.+40     	; 0x4cce <__vector_2+0x5e>
	} 
	else 
	{				// Falling
		RxChannel[AILERON] = TCNT1 - RxChannelStart[AILERON];
    4ca6:	80 91 84 00 	lds	r24, 0x0084
    4caa:	90 91 85 00 	lds	r25, 0x0085
    4cae:	20 91 c9 07 	lds	r18, 0x07C9
    4cb2:	30 91 ca 07 	lds	r19, 0x07CA
    4cb6:	82 1b       	sub	r24, r18
    4cb8:	93 0b       	sbc	r25, r19
    4cba:	90 93 b5 07 	sts	0x07B5, r25
    4cbe:	80 93 b4 07 	sts	0x07B4, r24
		if (Config.PWM_Sync == AILERON) 
    4cc2:	80 91 d3 05 	lds	r24, 0x05D3
    4cc6:	81 30       	cpi	r24, 0x01	; 1
    4cc8:	11 f4       	brne	.+4      	; 0x4cce <__vector_2+0x5e>
		{
			Interrupted = true;						// Signal that interrupt block has finished
    4cca:	80 93 c2 07 	sts	0x07C2, r24
		}
	}
}
    4cce:	9f 91       	pop	r25
    4cd0:	8f 91       	pop	r24
    4cd2:	3f 91       	pop	r19
    4cd4:	2f 91       	pop	r18
    4cd6:	0f 90       	pop	r0
    4cd8:	0f be       	out	0x3f, r0	; 63
    4cda:	0f 90       	pop	r0
    4cdc:	1f 90       	pop	r1
    4cde:	18 95       	reti

00004ce0 <__vector_1>:

ISR(INT0_vect)
{
    4ce0:	1f 92       	push	r1
    4ce2:	0f 92       	push	r0
    4ce4:	0f b6       	in	r0, 0x3f	; 63
    4ce6:	0f 92       	push	r0
    4ce8:	11 24       	eor	r1, r1
    4cea:	2f 93       	push	r18
    4cec:	3f 93       	push	r19
    4cee:	8f 93       	push	r24
    4cf0:	9f 93       	push	r25
	if (JitterGate)	JitterFlag = true;	
    4cf2:	80 91 dc 07 	lds	r24, 0x07DC
    4cf6:	88 23       	and	r24, r24
    4cf8:	19 f0       	breq	.+6      	; 0x4d00 <__vector_1+0x20>
    4cfa:	81 e0       	ldi	r24, 0x01	; 1
    4cfc:	80 93 dd 07 	sts	0x07DD, r24

	if (RX_PITCH)	// Rising 
    4d00:	4a 9b       	sbis	0x09, 2	; 9
    4d02:	09 c0       	rjmp	.+18     	; 0x4d16 <__vector_1+0x36>
	{
		RxChannelStart[ELEVATOR] = TCNT1;
    4d04:	80 91 84 00 	lds	r24, 0x0084
    4d08:	90 91 85 00 	lds	r25, 0x0085
    4d0c:	90 93 cc 07 	sts	0x07CC, r25
    4d10:	80 93 cb 07 	sts	0x07CB, r24
    4d14:	15 c0       	rjmp	.+42     	; 0x4d40 <__vector_1+0x60>
	} 
	else 
	{				// Falling
		RxChannel[ELEVATOR] = TCNT1 - RxChannelStart[ELEVATOR];
    4d16:	80 91 84 00 	lds	r24, 0x0084
    4d1a:	90 91 85 00 	lds	r25, 0x0085
    4d1e:	20 91 cb 07 	lds	r18, 0x07CB
    4d22:	30 91 cc 07 	lds	r19, 0x07CC
    4d26:	82 1b       	sub	r24, r18
    4d28:	93 0b       	sbc	r25, r19
    4d2a:	90 93 b7 07 	sts	0x07B7, r25
    4d2e:	80 93 b6 07 	sts	0x07B6, r24
		if (Config.PWM_Sync == ELEVATOR) 
    4d32:	80 91 d3 05 	lds	r24, 0x05D3
    4d36:	82 30       	cpi	r24, 0x02	; 2
    4d38:	19 f4       	brne	.+6      	; 0x4d40 <__vector_1+0x60>
		{
			Interrupted = true;						// Signal that interrupt block has finished
    4d3a:	81 e0       	ldi	r24, 0x01	; 1
    4d3c:	80 93 c2 07 	sts	0x07C2, r24
		}
	}
}
    4d40:	9f 91       	pop	r25
    4d42:	8f 91       	pop	r24
    4d44:	3f 91       	pop	r19
    4d46:	2f 91       	pop	r18
    4d48:	0f 90       	pop	r0
    4d4a:	0f be       	out	0x3f, r0	; 63
    4d4c:	0f 90       	pop	r0
    4d4e:	1f 90       	pop	r1
    4d50:	18 95       	reti

00004d52 <__vector_7>:

ISR(PCINT3_vect)
{
    4d52:	1f 92       	push	r1
    4d54:	0f 92       	push	r0
    4d56:	0f b6       	in	r0, 0x3f	; 63
    4d58:	0f 92       	push	r0
    4d5a:	11 24       	eor	r1, r1
    4d5c:	2f 93       	push	r18
    4d5e:	3f 93       	push	r19
    4d60:	8f 93       	push	r24
    4d62:	9f 93       	push	r25
	if (JitterGate)	JitterFlag = true;	
    4d64:	80 91 dc 07 	lds	r24, 0x07DC
    4d68:	88 23       	and	r24, r24
    4d6a:	19 f0       	breq	.+6      	; 0x4d72 <__vector_7+0x20>
    4d6c:	81 e0       	ldi	r24, 0x01	; 1
    4d6e:	80 93 dd 07 	sts	0x07DD, r24
		
	if (RX_COLL)	// Rising
    4d72:	48 9b       	sbis	0x09, 0	; 9
    4d74:	09 c0       	rjmp	.+18     	; 0x4d88 <__vector_7+0x36>
	{
		RxChannelStart[THROTTLE] = TCNT1;
    4d76:	80 91 84 00 	lds	r24, 0x0084
    4d7a:	90 91 85 00 	lds	r25, 0x0085
    4d7e:	90 93 c8 07 	sts	0x07C8, r25
    4d82:	80 93 c7 07 	sts	0x07C7, r24
    4d86:	15 c0       	rjmp	.+42     	; 0x4db2 <__vector_7+0x60>
	} 
	else 
	{				// Falling
		RxChannel[THROTTLE] = TCNT1 - RxChannelStart[THROTTLE];
    4d88:	80 91 84 00 	lds	r24, 0x0084
    4d8c:	90 91 85 00 	lds	r25, 0x0085
    4d90:	20 91 c7 07 	lds	r18, 0x07C7
    4d94:	30 91 c8 07 	lds	r19, 0x07C8
    4d98:	82 1b       	sub	r24, r18
    4d9a:	93 0b       	sbc	r25, r19
    4d9c:	90 93 b3 07 	sts	0x07B3, r25
    4da0:	80 93 b2 07 	sts	0x07B2, r24
		if (Config.PWM_Sync == THROTTLE) 
    4da4:	80 91 d3 05 	lds	r24, 0x05D3
    4da8:	81 11       	cpse	r24, r1
    4daa:	03 c0       	rjmp	.+6      	; 0x4db2 <__vector_7+0x60>
		{
			Interrupted = true;						// Signal that interrupt block has finished
    4dac:	81 e0       	ldi	r24, 0x01	; 1
    4dae:	80 93 c2 07 	sts	0x07C2, r24
		}
	}
}
    4db2:	9f 91       	pop	r25
    4db4:	8f 91       	pop	r24
    4db6:	3f 91       	pop	r19
    4db8:	2f 91       	pop	r18
    4dba:	0f 90       	pop	r0
    4dbc:	0f be       	out	0x3f, r0	; 63
    4dbe:	0f 90       	pop	r0
    4dc0:	1f 90       	pop	r1
    4dc2:	18 95       	reti

00004dc4 <__vector_5>:


ISR(PCINT1_vect)
{
    4dc4:	1f 92       	push	r1
    4dc6:	0f 92       	push	r0
    4dc8:	0f b6       	in	r0, 0x3f	; 63
    4dca:	0f 92       	push	r0
    4dcc:	11 24       	eor	r1, r1
    4dce:	2f 93       	push	r18
    4dd0:	3f 93       	push	r19
    4dd2:	8f 93       	push	r24
    4dd4:	9f 93       	push	r25
	if (JitterGate)	JitterFlag = true;
    4dd6:	80 91 dc 07 	lds	r24, 0x07DC
    4dda:	88 23       	and	r24, r24
    4ddc:	19 f0       	breq	.+6      	; 0x4de4 <__vector_5+0x20>
    4dde:	81 e0       	ldi	r24, 0x01	; 1
    4de0:	80 93 dd 07 	sts	0x07DD, r24

	if (RX_AUX)	// Rising
    4de4:	18 9b       	sbis	0x03, 0	; 3
    4de6:	09 c0       	rjmp	.+18     	; 0x4dfa <__vector_5+0x36>
	{
		RxChannelStart[GEAR] = TCNT1;
    4de8:	80 91 84 00 	lds	r24, 0x0084
    4dec:	90 91 85 00 	lds	r25, 0x0085
    4df0:	90 93 d0 07 	sts	0x07D0, r25
    4df4:	80 93 cf 07 	sts	0x07CF, r24
    4df8:	15 c0       	rjmp	.+42     	; 0x4e24 <__vector_5+0x60>
	} 
	else 
	{				// Falling
		RxChannel[GEAR] = TCNT1 - RxChannelStart[GEAR];
    4dfa:	80 91 84 00 	lds	r24, 0x0084
    4dfe:	90 91 85 00 	lds	r25, 0x0085
    4e02:	20 91 cf 07 	lds	r18, 0x07CF
    4e06:	30 91 d0 07 	lds	r19, 0x07D0
    4e0a:	82 1b       	sub	r24, r18
    4e0c:	93 0b       	sbc	r25, r19
    4e0e:	90 93 bb 07 	sts	0x07BB, r25
    4e12:	80 93 ba 07 	sts	0x07BA, r24
		if (Config.PWM_Sync == GEAR) 
    4e16:	80 91 d3 05 	lds	r24, 0x05D3
    4e1a:	84 30       	cpi	r24, 0x04	; 4
    4e1c:	19 f4       	brne	.+6      	; 0x4e24 <__vector_5+0x60>
		{
			Interrupted = true;						// Signal that interrupt block has finished
    4e1e:	81 e0       	ldi	r24, 0x01	; 1
    4e20:	80 93 c2 07 	sts	0x07C2, r24
		}
	}
}
    4e24:	9f 91       	pop	r25
    4e26:	8f 91       	pop	r24
    4e28:	3f 91       	pop	r19
    4e2a:	2f 91       	pop	r18
    4e2c:	0f 90       	pop	r0
    4e2e:	0f be       	out	0x3f, r0	; 63
    4e30:	0f 90       	pop	r0
    4e32:	1f 90       	pop	r1
    4e34:	18 95       	reti

00004e36 <__vector_3>:
// Compacted CPPM RX code thanks to Edgar
//
//************************************************************

ISR(INT2_vect)
{
    4e36:	1f 92       	push	r1
    4e38:	0f 92       	push	r0
    4e3a:	0f b6       	in	r0, 0x3f	; 63
    4e3c:	0f 92       	push	r0
    4e3e:	11 24       	eor	r1, r1
    4e40:	2f 93       	push	r18
    4e42:	3f 93       	push	r19
    4e44:	4f 93       	push	r20
    4e46:	5f 93       	push	r21
    4e48:	8f 93       	push	r24
    4e4a:	9f 93       	push	r25
    4e4c:	af 93       	push	r26
    4e4e:	bf 93       	push	r27
    4e50:	ef 93       	push	r30
    4e52:	ff 93       	push	r31
	if (JitterGate)	JitterFlag = true;	
    4e54:	80 91 dc 07 	lds	r24, 0x07DC
    4e58:	88 23       	and	r24, r24
    4e5a:	19 f0       	breq	.+6      	; 0x4e62 <__vector_3+0x2c>
    4e5c:	81 e0       	ldi	r24, 0x01	; 1
    4e5e:	80 93 dd 07 	sts	0x07DD, r24

    // Backup TCNT1
    uint16_t tCount;
    tCount = TCNT1;
    4e62:	80 91 84 00 	lds	r24, 0x0084
    4e66:	90 91 85 00 	lds	r25, 0x0085

	uint8_t curChannel;
	uint8_t prevChannel;

	if (Config.RxMode != CPPM_MODE)
    4e6a:	20 91 d2 05 	lds	r18, 0x05D2
    4e6e:	22 23       	and	r18, r18
    4e70:	d1 f0       	breq	.+52     	; 0x4ea6 <__vector_3+0x70>
	{
		if (RX_YAW)	// Rising
    4e72:	1a 9b       	sbis	0x03, 2	; 3
    4e74:	05 c0       	rjmp	.+10     	; 0x4e80 <__vector_3+0x4a>
		{
			RxChannelStart[RUDDER] = tCount;
    4e76:	90 93 ce 07 	sts	0x07CE, r25
    4e7a:	80 93 cd 07 	sts	0x07CD, r24
    4e7e:	86 c0       	rjmp	.+268    	; 0x4f8c <__vector_3+0x156>
		} 
		else 
		{			// Falling
			RxChannel[RUDDER] = tCount - RxChannelStart[RUDDER];
    4e80:	20 91 cd 07 	lds	r18, 0x07CD
    4e84:	30 91 ce 07 	lds	r19, 0x07CE
    4e88:	82 1b       	sub	r24, r18
    4e8a:	93 0b       	sbc	r25, r19
    4e8c:	90 93 b9 07 	sts	0x07B9, r25
    4e90:	80 93 b8 07 	sts	0x07B8, r24
			if (Config.PWM_Sync == RUDDER) 
    4e94:	80 91 d3 05 	lds	r24, 0x05D3
    4e98:	83 30       	cpi	r24, 0x03	; 3
    4e9a:	09 f0       	breq	.+2      	; 0x4e9e <__vector_3+0x68>
    4e9c:	77 c0       	rjmp	.+238    	; 0x4f8c <__vector_3+0x156>
			{
				Interrupted = true;					// Signal that interrupt block has finished
    4e9e:	81 e0       	ldi	r24, 0x01	; 1
    4ea0:	80 93 c2 07 	sts	0x07C2, r24
    4ea4:	73 c0       	rjmp	.+230    	; 0x4f8c <__vector_3+0x156>
	// CPPM receivers.
	//************************************************************
	else
	{
		// Only respond to negative-going interrupts
		if (CPPM) return;
    4ea6:	1a 99       	sbic	0x03, 2	; 3
    4ea8:	71 c0       	rjmp	.+226    	; 0x4f8c <__vector_3+0x156>

		// Check to see if previous period was a sync pulse or too small to be valid
		// If so, reset the channel number
		if (((tCount - PPMSyncStart) > SYNCPULSEWIDTH) || ((tCount - PPMSyncStart) < MINPULSEWIDTH))
    4eaa:	20 91 da 07 	lds	r18, 0x07DA
    4eae:	30 91 db 07 	lds	r19, 0x07DB
    4eb2:	ac 01       	movw	r20, r24
    4eb4:	42 1b       	sub	r20, r18
    4eb6:	53 0b       	sbc	r21, r19
    4eb8:	9a 01       	movw	r18, r20
    4eba:	2f 35       	cpi	r18, 0x5F	; 95
    4ebc:	3a 41       	sbci	r19, 0x1A	; 26
    4ebe:	58 f4       	brcc	.+22     	; 0x4ed6 <__vector_3+0xa0>
    4ec0:	20 91 da 07 	lds	r18, 0x07DA
    4ec4:	30 91 db 07 	lds	r19, 0x07DB
    4ec8:	ac 01       	movw	r20, r24
    4eca:	42 1b       	sub	r20, r18
    4ecc:	53 0b       	sbc	r21, r19
    4ece:	9a 01       	movw	r18, r20
    4ed0:	2e 3e       	cpi	r18, 0xEE	; 238
    4ed2:	32 40       	sbci	r19, 0x02	; 2
    4ed4:	10 f4       	brcc	.+4      	; 0x4eda <__vector_3+0xa4>
		{
			ch_num = 0;
    4ed6:	10 92 d9 07 	sts	0x07D9, r1
		}

		// Update PPMSyncStart with current value
		PPMSyncStart = tCount;
    4eda:	90 93 db 07 	sts	0x07DB, r25
    4ede:	80 93 da 07 	sts	0x07DA, r24

		// Get the channel number of the current channel in the requested channel order
        curChannel = Config.ChannelOrder[ch_num];
    4ee2:	e0 91 d9 07 	lds	r30, 0x07D9
    4ee6:	f0 e0       	ldi	r31, 0x00	; 0
    4ee8:	e7 55       	subi	r30, 0x57	; 87
    4eea:	fa 4f       	sbci	r31, 0xFA	; 250
    4eec:	e1 81       	ldd	r30, Z+1	; 0x01

		// Set up previous channel number based on the requested channel order
		if (ch_num > 0)
    4eee:	20 91 d9 07 	lds	r18, 0x07D9
    4ef2:	22 23       	and	r18, r18
    4ef4:	39 f0       	breq	.+14     	; 0x4f04 <__vector_3+0xce>
		{
			prevChannel = Config.ChannelOrder[ch_num-1];
    4ef6:	a0 91 d9 07 	lds	r26, 0x07D9
    4efa:	b0 e0       	ldi	r27, 0x00	; 0
    4efc:	a7 55       	subi	r26, 0x57	; 87
    4efe:	ba 4f       	sbci	r27, 0xFA	; 250
    4f00:	2c 91       	ld	r18, X
    4f02:	01 c0       	rjmp	.+2      	; 0x4f06 <__vector_3+0xd0>
		}
		else
		{
			prevChannel = 0;
    4f04:	20 e0       	ldi	r18, 0x00	; 0
		}

		// Measure the channel data only for the first MAX_CPPM_CHANNELS (currently 8)
		// Prevent code from over-running RxChannelStart[]
        if (ch_num < MAX_CPPM_CHANNELS)
    4f06:	30 91 d9 07 	lds	r19, 0x07D9
    4f0a:	38 30       	cpi	r19, 0x08	; 8
    4f0c:	38 f4       	brcc	.+14     	; 0x4f1c <__vector_3+0xe6>
		{
            RxChannelStart[curChannel] = tCount;
    4f0e:	f0 e0       	ldi	r31, 0x00	; 0
    4f10:	ee 0f       	add	r30, r30
    4f12:	ff 1f       	adc	r31, r31
    4f14:	e9 53       	subi	r30, 0x39	; 57
    4f16:	f8 4f       	sbci	r31, 0xF8	; 248
    4f18:	91 83       	std	Z+1, r25	; 0x01
    4f1a:	80 83       	st	Z, r24
		}

		// When ch_num = 0, the first channel has not yet been measured.
		// That only occurs at the second pulse. Prevent code from over-running RxChannel[]
        if ((ch_num > 0) && (ch_num <= MAX_CPPM_CHANNELS))
    4f1c:	30 91 d9 07 	lds	r19, 0x07D9
    4f20:	33 23       	and	r19, r19
    4f22:	99 f0       	breq	.+38     	; 0x4f4a <__vector_3+0x114>
    4f24:	30 91 d9 07 	lds	r19, 0x07D9
    4f28:	39 30       	cpi	r19, 0x09	; 9
    4f2a:	78 f4       	brcc	.+30     	; 0x4f4a <__vector_3+0x114>
        {
		   RxChannel[prevChannel] = tCount - RxChannelStart[prevChannel];
    4f2c:	30 e0       	ldi	r19, 0x00	; 0
    4f2e:	22 0f       	add	r18, r18
    4f30:	33 1f       	adc	r19, r19
    4f32:	f9 01       	movw	r30, r18
    4f34:	e9 53       	subi	r30, 0x39	; 57
    4f36:	f8 4f       	sbci	r31, 0xF8	; 248
    4f38:	40 81       	ld	r20, Z
    4f3a:	51 81       	ldd	r21, Z+1	; 0x01
    4f3c:	84 1b       	sub	r24, r20
    4f3e:	95 0b       	sbc	r25, r21
    4f40:	f9 01       	movw	r30, r18
    4f42:	ee 54       	subi	r30, 0x4E	; 78
    4f44:	f8 4f       	sbci	r31, 0xF8	; 248
    4f46:	91 83       	std	Z+1, r25	; 0x01
    4f48:	80 83       	st	Z, r24
		}

        // Increment to the next channel
		ch_num++;
    4f4a:	80 91 d9 07 	lds	r24, 0x07D9
    4f4e:	8f 5f       	subi	r24, 0xFF	; 255
    4f50:	80 93 d9 07 	sts	0x07D9, r24

		// Work out the highest channel number automatically.
		// Update the maximum channel seen so far.
		if (ch_num > max_chan) 
    4f54:	90 91 d9 07 	lds	r25, 0x07D9
    4f58:	80 91 c3 07 	lds	r24, 0x07C3
    4f5c:	89 17       	cp	r24, r25
    4f5e:	28 f4       	brcc	.+10     	; 0x4f6a <__vector_3+0x134>
		{
			max_chan = ch_num;					// Update max channel number
    4f60:	80 91 d9 07 	lds	r24, 0x07D9
    4f64:	80 93 c3 07 	sts	0x07C3, r24
    4f68:	09 c0       	rjmp	.+18     	; 0x4f7c <__vector_3+0x146>
		}
		// If the current channel is the highest channel, CPPM is complete
		else if (ch_num == max_chan)
    4f6a:	90 91 d9 07 	lds	r25, 0x07D9
    4f6e:	80 91 c3 07 	lds	r24, 0x07C3
    4f72:	98 13       	cpse	r25, r24
    4f74:	03 c0       	rjmp	.+6      	; 0x4f7c <__vector_3+0x146>
		{
			Interrupted = true;					// Signal that interrupt block has finished
    4f76:	81 e0       	ldi	r24, 0x01	; 1
    4f78:	80 93 c2 07 	sts	0x07C2, r24
		}
	
		// If the signal is ever lost, reset measured max channel number
		// and force a recalculation
		if (Overdue)
    4f7c:	80 91 0f 05 	lds	r24, 0x050F
    4f80:	88 23       	and	r24, r24
    4f82:	21 f0       	breq	.+8      	; 0x4f8c <__vector_3+0x156>
		{
			max_chan = 0;
    4f84:	10 92 c3 07 	sts	0x07C3, r1
			Overdue = false;
    4f88:	10 92 0f 05 	sts	0x050F, r1
		}
	}
} // ISR(INT2_vect)
    4f8c:	ff 91       	pop	r31
    4f8e:	ef 91       	pop	r30
    4f90:	bf 91       	pop	r27
    4f92:	af 91       	pop	r26
    4f94:	9f 91       	pop	r25
    4f96:	8f 91       	pop	r24
    4f98:	5f 91       	pop	r21
    4f9a:	4f 91       	pop	r20
    4f9c:	3f 91       	pop	r19
    4f9e:	2f 91       	pop	r18
    4fa0:	0f 90       	pop	r0
    4fa2:	0f be       	out	0x3f, r0	; 63
    4fa4:	0f 90       	pop	r0
    4fa6:	1f 90       	pop	r1
    4fa8:	18 95       	reti

00004faa <TIM16_ReadTCNT1>:
{
	uint8_t sreg;
	uint16_t i;
	
	/* Save global interrupt flag */
	sreg = SREG;
    4faa:	2f b7       	in	r18, 0x3f	; 63
	
	/* Disable interrupts */
	cli();
    4fac:	f8 94       	cli
	
	/* Read TCNTn into i */
	i = TCNT1;
    4fae:	80 91 84 00 	lds	r24, 0x0084
    4fb2:	90 91 85 00 	lds	r25, 0x0085
	
	/* Restore global interrupt flag */
	SREG = sreg;
    4fb6:	2f bf       	out	0x3f, r18	; 63
	return i;
}
    4fb8:	08 95       	ret

00004fba <__vector_20>:

// Interrupts from both UART0 and UART1 RX will come here
ISR(USART1_RX_vect, ISR_ALIASOF(USART0_RX_vect));

ISR(USART0_RX_vect)
{
    4fba:	1f 92       	push	r1
    4fbc:	0f 92       	push	r0
    4fbe:	0f b6       	in	r0, 0x3f	; 63
    4fc0:	0f 92       	push	r0
    4fc2:	11 24       	eor	r1, r1
    4fc4:	2f 93       	push	r18
    4fc6:	3f 93       	push	r19
    4fc8:	4f 93       	push	r20
    4fca:	5f 93       	push	r21
    4fcc:	6f 93       	push	r22
    4fce:	7f 93       	push	r23
    4fd0:	8f 93       	push	r24
    4fd2:	9f 93       	push	r25
    4fd4:	af 93       	push	r26
    4fd6:	bf 93       	push	r27
    4fd8:	cf 93       	push	r28
    4fda:	ef 93       	push	r30
    4fdc:	ff 93       	push	r31
	//************************************************************
	//* Common entry code
	//************************************************************

	// Read byte first
	temp = UDR0;
    4fde:	c0 91 c6 00 	lds	r28, 0x00C6

	// Save current time stamp
	Save_TCNT1 = TIM16_ReadTCNT1();
    4fe2:	0e 94 d5 27 	call	0x4faa	; 0x4faa <TIM16_ReadTCNT1>
	CurrentPeriod = Save_TCNT1 - PPMSyncStart;
    4fe6:	20 91 da 07 	lds	r18, 0x07DA
    4fea:	30 91 db 07 	lds	r19, 0x07DB
    4fee:	ac 01       	movw	r20, r24
    4ff0:	42 1b       	sub	r20, r18
    4ff2:	53 0b       	sbc	r21, r19
    4ff4:	9a 01       	movw	r18, r20

	// Handle start of new packet
	if (CurrentPeriod > PACKET_TIMER)
    4ff6:	25 3c       	cpi	r18, 0xC5	; 197
    4ff8:	39 40       	sbci	r19, 0x09	; 9
    4ffa:	80 f0       	brcs	.+32     	; 0x501c <__vector_20+0x62>
	{
		// Reset variables
		Interrupted = false;
    4ffc:	10 92 c2 07 	sts	0x07C2, r1
		rcindex = 0;
    5000:	10 92 b1 07 	sts	0x07B1, r1
		bytecount = 0;
    5004:	10 92 c4 07 	sts	0x07C4, r1
		ch_num = 0;
    5008:	10 92 d9 07 	sts	0x07D9, r1
		checksum = 0;
    500c:	10 92 df 07 	sts	0x07DF, r1
    5010:	10 92 de 07 	sts	0x07DE, r1
		chanmask16 = 0;
    5014:	10 92 d8 07 	sts	0x07D8, r1
    5018:	10 92 d7 07 	sts	0x07D7, r1
	}

	// Timestamp this interrupt
	PPMSyncStart = Save_TCNT1;
    501c:	90 93 db 07 	sts	0x07DB, r25
    5020:	80 93 da 07 	sts	0x07DA, r24
	
	// Put received byte in buffer if space available
	if (rcindex < SBUFFER_SIZE)
    5024:	80 91 b1 07 	lds	r24, 0x07B1
    5028:	89 31       	cpi	r24, 0x19	; 25
    502a:	50 f4       	brcc	.+20     	; 0x5040 <__vector_20+0x86>
	{
		sBuffer[rcindex++] = temp;			
    502c:	e0 91 b1 07 	lds	r30, 0x07B1
    5030:	81 e0       	ldi	r24, 0x01	; 1
    5032:	8e 0f       	add	r24, r30
    5034:	80 93 b1 07 	sts	0x07B1, r24
    5038:	f0 e0       	ldi	r31, 0x00	; 0
    503a:	e6 5c       	subi	r30, 0xC6	; 198
    503c:	fa 4f       	sbci	r31, 0xFA	; 250
    503e:	c0 83       	st	Z, r28
	//* 	bit0 = n/a
	//* 24 endbyte = 00000000b (SBUS) or (data % 0xCF) (SBUS2)
	//*
	//************************************************************

	if (Config.RxMode == SBUS)
    5040:	80 91 d2 05 	lds	r24, 0x05D2
    5044:	82 30       	cpi	r24, 0x02	; 2
    5046:	09 f0       	breq	.+2      	; 0x504a <__vector_20+0x90>
    5048:	92 c0       	rjmp	.+292    	; 0x516e <__vector_20+0x1b4>
	{
		// Flag that packet has completed
		if ((bytecount == 24) && ((temp == 0x00) || ((temp % 0xCF) == 0x04)))
    504a:	80 91 c4 07 	lds	r24, 0x07C4
    504e:	88 31       	cpi	r24, 0x18	; 24
    5050:	09 f0       	breq	.+2      	; 0x5054 <__vector_20+0x9a>
    5052:	00 c1       	rjmp	.+512    	; 0x5254 <__vector_20+0x29a>
    5054:	cc 23       	and	r28, r28
    5056:	59 f0       	breq	.+22     	; 0x506e <__vector_20+0xb4>
    5058:	81 e0       	ldi	r24, 0x01	; 1
    505a:	cf 3c       	cpi	r28, 0xCF	; 207
    505c:	08 f4       	brcc	.+2      	; 0x5060 <__vector_20+0xa6>
    505e:	80 e0       	ldi	r24, 0x00	; 0
    5060:	91 e3       	ldi	r25, 0x31	; 49
    5062:	89 9f       	mul	r24, r25
    5064:	c0 0d       	add	r28, r0
    5066:	11 24       	eor	r1, r1
    5068:	c4 30       	cpi	r28, 0x04	; 4
    506a:	09 f0       	breq	.+2      	; 0x506e <__vector_20+0xb4>
    506c:	f3 c0       	rjmp	.+486    	; 0x5254 <__vector_20+0x29a>
		{
			// If frame lost, ignore packet
			if ((sBuffer[23] & 0x20) == 0)
    506e:	80 91 51 05 	lds	r24, 0x0551
    5072:	85 fd       	sbrc	r24, 5
    5074:	ef c0       	rjmp	.+478    	; 0x5254 <__vector_20+0x29a>
			{
				// RC sync established
				Interrupted = true;
    5076:	81 e0       	ldi	r24, 0x01	; 1
    5078:	80 93 c2 07 	sts	0x07C2, r24
				FirstInterrupted = true;				
    507c:	80 93 e0 07 	sts	0x07E0, r24
    5080:	80 e0       	ldi	r24, 0x00	; 0
    5082:	90 e0       	ldi	r25, 0x00	; 0

				// Clear channel data
				for (j = 0; j < MAX_RC_CHANNELS; j++)
				{
					RxChannel[j] = 0;
    5084:	fc 01       	movw	r30, r24
    5086:	ee 0f       	add	r30, r30
    5088:	ff 1f       	adc	r31, r31
    508a:	ee 54       	subi	r30, 0x4E	; 78
    508c:	f8 4f       	sbci	r31, 0xF8	; 248
    508e:	11 82       	std	Z+1, r1	; 0x01
    5090:	10 82       	st	Z, r1
    5092:	01 96       	adiw	r24, 0x01	; 1
				// RC sync established
				Interrupted = true;
				FirstInterrupted = true;				

				// Clear channel data
				for (j = 0; j < MAX_RC_CHANNELS; j++)
    5094:	88 30       	cpi	r24, 0x08	; 8
    5096:	91 05       	cpc	r25, r1
    5098:	a9 f7       	brne	.-22     	; 0x5084 <__vector_20+0xca>
    509a:	a8 e5       	ldi	r26, 0x58	; 88
    509c:	70 e0       	ldi	r23, 0x00	; 0
    509e:	c0 e0       	ldi	r28, 0x00	; 0
    50a0:	60 e0       	ldi	r22, 0x00	; 0
    50a2:	b1 e0       	ldi	r27, 0x01	; 1
                for (j = 0; j < 88; j++)
                {
                    if (sBuffer[sindex] & (1<<chan_mask))
                    {
						// Place the RC data into the correct channel order for the transmitted system
						RxChannel[Config.ChannelOrder[chan_shift]] |= (1<<data_mask);
    50a4:	21 e0       	ldi	r18, 0x01	; 1
    50a6:	30 e0       	ldi	r19, 0x00	; 0

                // Deconstruct S-Bus data
				// 8 channels * 11 bits = 88 bits
                for (j = 0; j < 88; j++)
                {
                    if (sBuffer[sindex] & (1<<chan_mask))
    50a8:	eb 2f       	mov	r30, r27
    50aa:	f0 e0       	ldi	r31, 0x00	; 0
    50ac:	e6 5c       	subi	r30, 0xC6	; 198
    50ae:	fa 4f       	sbci	r31, 0xFA	; 250
    50b0:	80 81       	ld	r24, Z
    50b2:	90 e0       	ldi	r25, 0x00	; 0
    50b4:	06 2e       	mov	r0, r22
    50b6:	02 c0       	rjmp	.+4      	; 0x50bc <__vector_20+0x102>
    50b8:	95 95       	asr	r25
    50ba:	87 95       	ror	r24
    50bc:	0a 94       	dec	r0
    50be:	e2 f7       	brpl	.-8      	; 0x50b8 <__vector_20+0xfe>
    50c0:	80 ff       	sbrs	r24, 0
    50c2:	17 c0       	rjmp	.+46     	; 0x50f2 <__vector_20+0x138>
                    {
						// Place the RC data into the correct channel order for the transmitted system
						RxChannel[Config.ChannelOrder[chan_shift]] |= (1<<data_mask);
    50c4:	ec 2f       	mov	r30, r28
    50c6:	f0 e0       	ldi	r31, 0x00	; 0
    50c8:	e7 55       	subi	r30, 0x57	; 87
    50ca:	fa 4f       	sbci	r31, 0xFA	; 250
    50cc:	e1 81       	ldd	r30, Z+1	; 0x01
    50ce:	f0 e0       	ldi	r31, 0x00	; 0
    50d0:	ee 0f       	add	r30, r30
    50d2:	ff 1f       	adc	r31, r31
    50d4:	ee 54       	subi	r30, 0x4E	; 78
    50d6:	f8 4f       	sbci	r31, 0xF8	; 248
    50d8:	80 81       	ld	r24, Z
    50da:	91 81       	ldd	r25, Z+1	; 0x01
    50dc:	a9 01       	movw	r20, r18
    50de:	07 2e       	mov	r0, r23
    50e0:	02 c0       	rjmp	.+4      	; 0x50e6 <__vector_20+0x12c>
    50e2:	44 0f       	add	r20, r20
    50e4:	55 1f       	adc	r21, r21
    50e6:	0a 94       	dec	r0
    50e8:	e2 f7       	brpl	.-8      	; 0x50e2 <__vector_20+0x128>
    50ea:	84 2b       	or	r24, r20
    50ec:	95 2b       	or	r25, r21
    50ee:	91 83       	std	Z+1, r25	; 0x01
    50f0:	80 83       	st	Z, r24
                    }

                    chan_mask++;
    50f2:	6f 5f       	subi	r22, 0xFF	; 255
                    data_mask++;
    50f4:	7f 5f       	subi	r23, 0xFF	; 255

                    // If we have done 8 bits, move to next byte in buffer
					if (chan_mask == 8)
    50f6:	68 30       	cpi	r22, 0x08	; 8
    50f8:	11 f4       	brne	.+4      	; 0x50fe <__vector_20+0x144>
                    {
                        chan_mask =0;
                        sindex++;
    50fa:	bf 5f       	subi	r27, 0xFF	; 255
                    data_mask++;

                    // If we have done 8 bits, move to next byte in buffer
					if (chan_mask == 8)
                    {
                        chan_mask =0;
    50fc:	60 e0       	ldi	r22, 0x00	; 0
                        sindex++;
                    }

                    // If we have reconstructed all 11 bits of one channel's data (2047)
					// increment the channel number
					if (data_mask == 11)
    50fe:	7b 30       	cpi	r23, 0x0B	; 11
    5100:	11 f4       	brne	.+4      	; 0x5106 <__vector_20+0x14c>
                    {
                        data_mask =0;
                        chan_shift++;
    5102:	cf 5f       	subi	r28, 0xFF	; 255

                    // If we have reconstructed all 11 bits of one channel's data (2047)
					// increment the channel number
					if (data_mask == 11)
                    {
                        data_mask =0;
    5104:	70 e0       	ldi	r23, 0x00	; 0
    5106:	a1 50       	subi	r26, 0x01	; 1
				// Start from second byte
				sindex = 1;

                // Deconstruct S-Bus data
				// 8 channels * 11 bits = 88 bits
                for (j = 0; j < 88; j++)
    5108:	79 f6       	brne	.-98     	; 0x50a8 <__vector_20+0xee>
    510a:	40 e0       	ldi	r20, 0x00	; 0
    510c:	50 e0       	ldi	r21, 0x00	; 0

				// Convert to  OpenAero2 values (0~2047 -> 2500~4999)
				for (j = 0; j < MAX_RC_CHANNELS; j++)
				{
					// Subtract weird-ass Futaba offset
					itemp16= RxChannel[j] - 1024;	
    510e:	fa 01       	movw	r30, r20
    5110:	ee 0f       	add	r30, r30
    5112:	ff 1f       	adc	r31, r31
    5114:	ee 54       	subi	r30, 0x4E	; 78
    5116:	f8 4f       	sbci	r31, 0xF8	; 248
    5118:	20 81       	ld	r18, Z
    511a:	31 81       	ldd	r19, Z+1	; 0x01
    511c:	34 50       	subi	r19, 0x04	; 4
					
					// Expand into OpenAero2 units							
					itemp16 = itemp16 + (itemp16 >> 2) + (itemp16 >> 3) + (itemp16 >> 4) + (itemp16 >> 5); 	// Quick multiply by 1.469 :)
    511e:	c9 01       	movw	r24, r18
    5120:	95 95       	asr	r25
    5122:	87 95       	ror	r24
    5124:	95 95       	asr	r25
    5126:	87 95       	ror	r24
    5128:	82 0f       	add	r24, r18
    512a:	93 1f       	adc	r25, r19
    512c:	b9 01       	movw	r22, r18
    512e:	a3 e0       	ldi	r26, 0x03	; 3
    5130:	75 95       	asr	r23
    5132:	67 95       	ror	r22
    5134:	aa 95       	dec	r26
    5136:	e1 f7       	brne	.-8      	; 0x5130 <__vector_20+0x176>
    5138:	86 0f       	add	r24, r22
    513a:	97 1f       	adc	r25, r23
    513c:	b9 01       	movw	r22, r18
    513e:	b4 e0       	ldi	r27, 0x04	; 4
    5140:	75 95       	asr	r23
    5142:	67 95       	ror	r22
    5144:	ba 95       	dec	r27
    5146:	e1 f7       	brne	.-8      	; 0x5140 <__vector_20+0x186>
    5148:	86 0f       	add	r24, r22
    514a:	97 1f       	adc	r25, r23
    514c:	c5 e0       	ldi	r28, 0x05	; 5
    514e:	35 95       	asr	r19
    5150:	27 95       	ror	r18
    5152:	ca 95       	dec	r28
    5154:	e1 f7       	brne	.-8      	; 0x514e <__vector_20+0x194>
    5156:	82 0f       	add	r24, r18
    5158:	93 1f       	adc	r25, r19
					//itemp16 = itemp16 + (itemp16 >> 1); // Quicker mulitply by 1.5

					// Add back in OpenAero2 offset
					RxChannel[j] = itemp16 + 3750;				
    515a:	8a 55       	subi	r24, 0x5A	; 90
    515c:	91 4f       	sbci	r25, 0xF1	; 241
    515e:	91 83       	std	Z+1, r25	; 0x01
    5160:	80 83       	st	Z, r24
    5162:	4f 5f       	subi	r20, 0xFF	; 255
    5164:	5f 4f       	sbci	r21, 0xFF	; 255
                        chan_shift++;
                    }
                }

				// Convert to  OpenAero2 values (0~2047 -> 2500~4999)
				for (j = 0; j < MAX_RC_CHANNELS; j++)
    5166:	48 30       	cpi	r20, 0x08	; 8
    5168:	51 05       	cpc	r21, r1
    516a:	89 f6       	brne	.-94     	; 0x510e <__vector_20+0x154>
    516c:	73 c0       	rjmp	.+230    	; 0x5254 <__vector_20+0x29a>
	//* 0 = 750us, 1023/2047 = 2250us
	//*
	//************************************************************

	// Handle Spektrum format
	if (Config.RxMode == SPEKTRUM)
    516e:	83 30       	cpi	r24, 0x03	; 3
    5170:	09 f0       	breq	.+2      	; 0x5174 <__vector_20+0x1ba>
    5172:	70 c0       	rjmp	.+224    	; 0x5254 <__vector_20+0x29a>
	{
		// Process data when all packets received
		if (bytecount >= 15)
    5174:	80 91 c4 07 	lds	r24, 0x07C4
    5178:	8f 30       	cpi	r24, 0x0F	; 15
    517a:	08 f4       	brcc	.+2      	; 0x517e <__vector_20+0x1c4>
    517c:	6b c0       	rjmp	.+214    	; 0x5254 <__vector_20+0x29a>
		{
			Interrupted = true;	
    517e:	81 e0       	ldi	r24, 0x01	; 1
    5180:	80 93 c2 07 	sts	0x07C2, r24
			FirstInterrupted = true;
    5184:	80 93 e0 07 	sts	0x07E0, r24

			// Ahem... ah... just stick the last byte into the buffer manually...(hides)
			sBuffer[15] = temp;
    5188:	c0 93 49 05 	sts	0x0549, r28

			// Set start of channel data per format
			sindex = 2; // Channel data from byte 3

			// Work out if this is 10 or 11 bit data
			if (sBuffer[1] & 0x10) 	// 0 for 10 bit resolution 1 for 11 bit resolution
    518c:	80 91 3b 05 	lds	r24, 0x053B
    5190:	84 ff       	sbrs	r24, 4
    5192:	04 c0       	rjmp	.+8      	; 0x519c <__vector_20+0x1e2>
			{
				chan_mask = 0x78;	// 11 bit (2048)
				data_mask = 0x07;
    5194:	c7 e0       	ldi	r28, 0x07	; 7
				chan_shift = 0x03;
    5196:	63 e0       	ldi	r22, 0x03	; 3
			sindex = 2; // Channel data from byte 3

			// Work out if this is 10 or 11 bit data
			if (sBuffer[1] & 0x10) 	// 0 for 10 bit resolution 1 for 11 bit resolution
			{
				chan_mask = 0x78;	// 11 bit (2048)
    5198:	78 e7       	ldi	r23, 0x78	; 120
    519a:	03 c0       	rjmp	.+6      	; 0x51a2 <__vector_20+0x1e8>
				chan_shift = 0x03;
			}
			else
			{
				chan_mask = 0x3C;	// 10 bit (1024)
				data_mask = 0x03;
    519c:	c3 e0       	ldi	r28, 0x03	; 3
				chan_shift = 0x02;
    519e:	62 e0       	ldi	r22, 0x02	; 2
				data_mask = 0x07;
				chan_shift = 0x03;
			}
			else
			{
				chan_mask = 0x3C;	// 10 bit (1024)
    51a0:	7c e3       	ldi	r23, 0x3C	; 60
    51a2:	ed e3       	ldi	r30, 0x3D	; 61
    51a4:	f5 e0       	ldi	r31, 0x05	; 5
    51a6:	df 01       	movw	r26, r30
    51a8:	11 97       	sbiw	r26, 0x01	; 1
			// Work out which channel the data is intended for from the channel number data
			// Channels can also be in the second packet. Spektrum has 7 channels per packet.
			for (j = 0; j < 7; j++)
			{
				// Extract channel number
				ch_num = (sBuffer[sindex] & chan_mask) >> chan_shift;
    51aa:	2c 91       	ld	r18, X
    51ac:	82 2f       	mov	r24, r18
    51ae:	87 23       	and	r24, r23
    51b0:	90 e0       	ldi	r25, 0x00	; 0
    51b2:	06 2e       	mov	r0, r22
    51b4:	02 c0       	rjmp	.+4      	; 0x51ba <__vector_20+0x200>
    51b6:	95 95       	asr	r25
    51b8:	87 95       	ror	r24
    51ba:	0a 94       	dec	r0
    51bc:	e2 f7       	brpl	.-8      	; 0x51b6 <__vector_20+0x1fc>
    51be:	80 93 d9 07 	sts	0x07D9, r24

				// Reconstruct channel data
				temp16 = ((sBuffer[sindex] & data_mask) << 8) + sBuffer[sindex + 1];
    51c2:	80 81       	ld	r24, Z

				// Expand to OpenAero2 units if a valid channel
				// Blank channels have the channel number of 16
				if (ch_num < MAX_RC_CHANNELS)
    51c4:	90 91 d9 07 	lds	r25, 0x07D9
    51c8:	98 30       	cpi	r25, 0x08	; 8
    51ca:	f0 f5       	brcc	.+124    	; 0x5248 <__vector_20+0x28e>
			{
				// Extract channel number
				ch_num = (sBuffer[sindex] & chan_mask) >> chan_shift;

				// Reconstruct channel data
				temp16 = ((sBuffer[sindex] & data_mask) << 8) + sBuffer[sindex + 1];
    51cc:	2c 23       	and	r18, r28
    51ce:	30 e0       	ldi	r19, 0x00	; 0
    51d0:	32 2f       	mov	r19, r18
    51d2:	22 27       	eor	r18, r18
    51d4:	28 0f       	add	r18, r24
    51d6:	31 1d       	adc	r19, r1
				// Expand to OpenAero2 units if a valid channel
				// Blank channels have the channel number of 16
				if (ch_num < MAX_RC_CHANNELS)
				{
					// Subtract Spektrum center offset
					if (chan_shift == 0x03) // 11-bit
    51d8:	63 30       	cpi	r22, 0x03	; 3
    51da:	11 f4       	brne	.+4      	; 0x51e0 <__vector_20+0x226>
					{
						itemp16 = temp16 - 1024;
    51dc:	34 50       	subi	r19, 0x04	; 4
    51de:	01 c0       	rjmp	.+2      	; 0x51e2 <__vector_20+0x228>
					}
					else
					{
						itemp16 = temp16 - 512;	
    51e0:	32 50       	subi	r19, 0x02	; 2
					}					

					// Quick multiply by 2.93
					itemp16 = (itemp16 << 1) + (itemp16 >> 1) + (itemp16 >> 2) + (itemp16 >> 3) + (itemp16 >> 4); 
    51e2:	c9 01       	movw	r24, r18
    51e4:	88 0f       	add	r24, r24
    51e6:	99 1f       	adc	r25, r25
    51e8:	a9 01       	movw	r20, r18
    51ea:	55 95       	asr	r21
    51ec:	47 95       	ror	r20
    51ee:	84 0f       	add	r24, r20
    51f0:	95 1f       	adc	r25, r21
    51f2:	a9 01       	movw	r20, r18
    51f4:	55 95       	asr	r21
    51f6:	47 95       	ror	r20
    51f8:	55 95       	asr	r21
    51fa:	47 95       	ror	r20
    51fc:	84 0f       	add	r24, r20
    51fe:	95 1f       	adc	r25, r21
    5200:	a9 01       	movw	r20, r18
    5202:	a3 e0       	ldi	r26, 0x03	; 3
    5204:	55 95       	asr	r21
    5206:	47 95       	ror	r20
    5208:	aa 95       	dec	r26
    520a:	e1 f7       	brne	.-8      	; 0x5204 <__vector_20+0x24a>
    520c:	84 0f       	add	r24, r20
    520e:	95 1f       	adc	r25, r21
    5210:	b4 e0       	ldi	r27, 0x04	; 4
    5212:	35 95       	asr	r19
    5214:	27 95       	ror	r18
    5216:	ba 95       	dec	r27
    5218:	e1 f7       	brne	.-8      	; 0x5212 <__vector_20+0x258>
    521a:	82 0f       	add	r24, r18
    521c:	93 1f       	adc	r25, r19

					if (chan_shift == 0x03) // 11-bit
    521e:	63 30       	cpi	r22, 0x03	; 3
    5220:	11 f4       	brne	.+4      	; 0x5226 <__vector_20+0x26c>
					{
						// Divide in case of 11-bit value
						itemp16 = itemp16 >> 1;								
    5222:	95 95       	asr	r25
    5224:	87 95       	ror	r24
					}

					// Add back in OpenAero2 offset
					itemp16 += 3750;										

					RxChannel[Config.ChannelOrder[ch_num]] = itemp16;
    5226:	a0 91 d9 07 	lds	r26, 0x07D9
    522a:	b0 e0       	ldi	r27, 0x00	; 0
    522c:	a7 55       	subi	r26, 0x57	; 87
    522e:	ba 4f       	sbci	r27, 0xFA	; 250
    5230:	11 96       	adiw	r26, 0x01	; 1
    5232:	ac 91       	ld	r26, X
    5234:	b0 e0       	ldi	r27, 0x00	; 0
						// Divide in case of 11-bit value
						itemp16 = itemp16 >> 1;								
					}

					// Add back in OpenAero2 offset
					itemp16 += 3750;										
    5236:	8a 55       	subi	r24, 0x5A	; 90
    5238:	91 4f       	sbci	r25, 0xF1	; 241

					RxChannel[Config.ChannelOrder[ch_num]] = itemp16;
    523a:	aa 0f       	add	r26, r26
    523c:	bb 1f       	adc	r27, r27
    523e:	ae 54       	subi	r26, 0x4E	; 78
    5240:	b8 4f       	sbci	r27, 0xF8	; 248
    5242:	11 96       	adiw	r26, 0x01	; 1
    5244:	9c 93       	st	X, r25
    5246:	8e 93       	st	-X, r24
    5248:	32 96       	adiw	r30, 0x02	; 2
				chan_shift = 0x02;
			}

			// Work out which channel the data is intended for from the channel number data
			// Channels can also be in the second packet. Spektrum has 7 channels per packet.
			for (j = 0; j < 7; j++)
    524a:	45 e0       	ldi	r20, 0x05	; 5
    524c:	eb 34       	cpi	r30, 0x4B	; 75
    524e:	f4 07       	cpc	r31, r20
    5250:	09 f0       	breq	.+2      	; 0x5254 <__vector_20+0x29a>
    5252:	a9 cf       	rjmp	.-174    	; 0x51a6 <__vector_20+0x1ec>
	//************************************************************
	//* Common exit code
	//************************************************************

	// Increment byte count
	bytecount++;
    5254:	80 91 c4 07 	lds	r24, 0x07C4
    5258:	8f 5f       	subi	r24, 0xFF	; 255
    525a:	80 93 c4 07 	sts	0x07C4, r24
}
    525e:	ff 91       	pop	r31
    5260:	ef 91       	pop	r30
    5262:	cf 91       	pop	r28
    5264:	bf 91       	pop	r27
    5266:	af 91       	pop	r26
    5268:	9f 91       	pop	r25
    526a:	8f 91       	pop	r24
    526c:	7f 91       	pop	r23
    526e:	6f 91       	pop	r22
    5270:	5f 91       	pop	r21
    5272:	4f 91       	pop	r20
    5274:	3f 91       	pop	r19
    5276:	2f 91       	pop	r18
    5278:	0f 90       	pop	r0
    527a:	0f be       	out	0x3f, r0	; 63
    527c:	0f 90       	pop	r0
    527e:	1f 90       	pop	r1
    5280:	18 95       	reti

00005282 <print_menu_frame>:
// style = menu style (0 = main, 1 = sub)
//************************************************************
void print_menu_frame(uint8_t style)
{
	// Print bottom markers
	if (style == 0)
    5282:	81 11       	cpse	r24, r1
    5284:	27 c0       	rjmp	.+78     	; 0x52d4 <print_menu_frame+0x52>
	{
		LCD_Display_Text(12, (const unsigned char*)Wingdings, 0, 57); 	// Left
    5286:	29 e3       	ldi	r18, 0x39	; 57
    5288:	30 e0       	ldi	r19, 0x00	; 0
    528a:	40 e0       	ldi	r20, 0x00	; 0
    528c:	50 e0       	ldi	r21, 0x00	; 0
    528e:	6f ed       	ldi	r22, 0xDF	; 223
    5290:	70 e0       	ldi	r23, 0x00	; 0
    5292:	8c e0       	ldi	r24, 0x0C	; 12
    5294:	90 e0       	ldi	r25, 0x00	; 0
    5296:	0e 94 a0 1d 	call	0x3b40	; 0x3b40 <LCD_Display_Text>
		LCD_Display_Text(10, (const unsigned char*)Wingdings, 38, 59); 	// Up
    529a:	2b e3       	ldi	r18, 0x3B	; 59
    529c:	30 e0       	ldi	r19, 0x00	; 0
    529e:	46 e2       	ldi	r20, 0x26	; 38
    52a0:	50 e0       	ldi	r21, 0x00	; 0
    52a2:	6f ed       	ldi	r22, 0xDF	; 223
    52a4:	70 e0       	ldi	r23, 0x00	; 0
    52a6:	8a e0       	ldi	r24, 0x0A	; 10
    52a8:	90 e0       	ldi	r25, 0x00	; 0
    52aa:	0e 94 a0 1d 	call	0x3b40	; 0x3b40 <LCD_Display_Text>
		LCD_Display_Text(9, (const unsigned char*)Wingdings, 80, 59); 	// Down
    52ae:	2b e3       	ldi	r18, 0x3B	; 59
    52b0:	30 e0       	ldi	r19, 0x00	; 0
    52b2:	40 e5       	ldi	r20, 0x50	; 80
    52b4:	50 e0       	ldi	r21, 0x00	; 0
    52b6:	6f ed       	ldi	r22, 0xDF	; 223
    52b8:	70 e0       	ldi	r23, 0x00	; 0
    52ba:	89 e0       	ldi	r24, 0x09	; 9
    52bc:	90 e0       	ldi	r25, 0x00	; 0
    52be:	0e 94 a0 1d 	call	0x3b40	; 0x3b40 <LCD_Display_Text>
		LCD_Display_Text(11, (const unsigned char*)Wingdings, 120, 57); // Right
    52c2:	29 e3       	ldi	r18, 0x39	; 57
    52c4:	30 e0       	ldi	r19, 0x00	; 0
    52c6:	48 e7       	ldi	r20, 0x78	; 120
    52c8:	50 e0       	ldi	r21, 0x00	; 0
    52ca:	6f ed       	ldi	r22, 0xDF	; 223
    52cc:	70 e0       	ldi	r23, 0x00	; 0
    52ce:	8b e0       	ldi	r24, 0x0B	; 11
    52d0:	90 e0       	ldi	r25, 0x00	; 0
    52d2:	26 c0       	rjmp	.+76     	; 0x5320 <print_menu_frame+0x9e>
	}
	else
	{
		LCD_Display_Text(16, (const unsigned char*)Verdana8, 0, 54); 	// Clear
    52d4:	26 e3       	ldi	r18, 0x36	; 54
    52d6:	30 e0       	ldi	r19, 0x00	; 0
    52d8:	40 e0       	ldi	r20, 0x00	; 0
    52da:	50 e0       	ldi	r21, 0x00	; 0
    52dc:	67 ef       	ldi	r22, 0xF7	; 247
    52de:	79 e0       	ldi	r23, 0x09	; 9
    52e0:	80 e1       	ldi	r24, 0x10	; 16
    52e2:	90 e0       	ldi	r25, 0x00	; 0
    52e4:	0e 94 a0 1d 	call	0x3b40	; 0x3b40 <LCD_Display_Text>
		LCD_Display_Text(10, (const unsigned char*)Wingdings, 38, 59);	// Up
    52e8:	2b e3       	ldi	r18, 0x3B	; 59
    52ea:	30 e0       	ldi	r19, 0x00	; 0
    52ec:	46 e2       	ldi	r20, 0x26	; 38
    52ee:	50 e0       	ldi	r21, 0x00	; 0
    52f0:	6f ed       	ldi	r22, 0xDF	; 223
    52f2:	70 e0       	ldi	r23, 0x00	; 0
    52f4:	8a e0       	ldi	r24, 0x0A	; 10
    52f6:	90 e0       	ldi	r25, 0x00	; 0
    52f8:	0e 94 a0 1d 	call	0x3b40	; 0x3b40 <LCD_Display_Text>
		LCD_Display_Text(9, (const unsigned char*)Wingdings, 80, 59);	// Down
    52fc:	2b e3       	ldi	r18, 0x3B	; 59
    52fe:	30 e0       	ldi	r19, 0x00	; 0
    5300:	40 e5       	ldi	r20, 0x50	; 80
    5302:	50 e0       	ldi	r21, 0x00	; 0
    5304:	6f ed       	ldi	r22, 0xDF	; 223
    5306:	70 e0       	ldi	r23, 0x00	; 0
    5308:	89 e0       	ldi	r24, 0x09	; 9
    530a:	90 e0       	ldi	r25, 0x00	; 0
    530c:	0e 94 a0 1d 	call	0x3b40	; 0x3b40 <LCD_Display_Text>
		LCD_Display_Text(17, (const unsigned char*)Verdana8, 103, 54);	// Save
    5310:	26 e3       	ldi	r18, 0x36	; 54
    5312:	30 e0       	ldi	r19, 0x00	; 0
    5314:	47 e6       	ldi	r20, 0x67	; 103
    5316:	50 e0       	ldi	r21, 0x00	; 0
    5318:	67 ef       	ldi	r22, 0xF7	; 247
    531a:	79 e0       	ldi	r23, 0x09	; 9
    531c:	81 e1       	ldi	r24, 0x11	; 17
    531e:	90 e0       	ldi	r25, 0x00	; 0
    5320:	0e 94 a0 1d 	call	0x3b40	; 0x3b40 <LCD_Display_Text>
	}

	// Write from buffer
	write_buffer(buffer,1);
    5324:	61 e0       	ldi	r22, 0x01	; 1
    5326:	80 e0       	ldi	r24, 0x00	; 0
    5328:	91 e0       	ldi	r25, 0x01	; 1
    532a:	0e 94 c9 1b 	call	0x3792	; 0x3792 <write_buffer>
    532e:	08 95       	ret

00005330 <get_menu_range>:
//************************************************************
// get_menu_range - Get range info from PROGMEM for a specific item
//************************************************************

menu_range_t get_menu_range(const unsigned char* menu_ranges, uint8_t menuitem)
{
    5330:	aa e0       	ldi	r26, 0x0A	; 10
    5332:	b0 e0       	ldi	r27, 0x00	; 0
    5334:	ee e9       	ldi	r30, 0x9E	; 158
    5336:	f9 e2       	ldi	r31, 0x29	; 41
    5338:	0c 94 d4 41 	jmp	0x83a8	; 0x83a8 <__prologue_saves__+0x20>
	menu_range_t	range;
	memcpy_P(&range, &menu_ranges[menuitem * sizeof(range)], sizeof(range));
    533c:	25 e0       	ldi	r18, 0x05	; 5
    533e:	62 9f       	mul	r22, r18
    5340:	80 0d       	add	r24, r0
    5342:	91 1d       	adc	r25, r1
    5344:	11 24       	eor	r1, r1
    5346:	bc 01       	movw	r22, r24
    5348:	45 e0       	ldi	r20, 0x05	; 5
    534a:	50 e0       	ldi	r21, 0x00	; 0
    534c:	ce 01       	movw	r24, r28
    534e:	06 96       	adiw	r24, 0x06	; 6
    5350:	0e 94 fb 41 	call	0x83f6	; 0x83f6 <memcpy_P>
	return (range);
    5354:	85 e0       	ldi	r24, 0x05	; 5
    5356:	fe 01       	movw	r30, r28
    5358:	36 96       	adiw	r30, 0x06	; 6
    535a:	de 01       	movw	r26, r28
    535c:	11 96       	adiw	r26, 0x01	; 1
    535e:	01 90       	ld	r0, Z+
    5360:	0d 92       	st	X+, r0
    5362:	8a 95       	dec	r24
    5364:	e1 f7       	brne	.-8      	; 0x535e <get_menu_range+0x2e>
    5366:	29 81       	ldd	r18, Y+1	; 0x01
    5368:	3a 81       	ldd	r19, Y+2	; 0x02
    536a:	4b 81       	ldd	r20, Y+3	; 0x03
    536c:	5c 81       	ldd	r21, Y+4	; 0x04
    536e:	6d 81       	ldd	r22, Y+5	; 0x05
}
    5370:	70 e0       	ldi	r23, 0x00	; 0
    5372:	80 e0       	ldi	r24, 0x00	; 0
    5374:	90 e0       	ldi	r25, 0x00	; 0
    5376:	2a 96       	adiw	r28, 0x0a	; 10
    5378:	e2 e0       	ldi	r30, 0x02	; 2
    537a:	0c 94 f0 41 	jmp	0x83e0	; 0x83e0 <__epilogue_restores__+0x20>

0000537e <print_menu_text>:
// x = horizontal location on screen
// y = vertical location on screen
//************************************************************

void print_menu_text(int16_t values, uint8_t style, uint8_t text_link, uint8_t x, uint8_t y)
{
    537e:	0f 93       	push	r16
    5380:	1f 93       	push	r17
    5382:	cf 93       	push	r28
    5384:	df 93       	push	r29
    5386:	e4 2f       	mov	r30, r20
    5388:	10 e0       	ldi	r17, 0x00	; 0
    538a:	c2 2f       	mov	r28, r18
    538c:	d0 e0       	ldi	r29, 0x00	; 0
	if (style == 0) // Numeral
    538e:	61 11       	cpse	r22, r1
    5390:	0c c0       	rjmp	.+24     	; 0x53aa <print_menu_text+0x2c>
    5392:	4a e0       	ldi	r20, 0x0A	; 10
    5394:	67 e5       	ldi	r22, 0x57	; 87
    5396:	75 e0       	ldi	r23, 0x05	; 5
    5398:	0e 94 04 42 	call	0x8408	; 0x8408 <__itoa_ncheck>
	{
		mugui_lcd_puts(itoa(values,pBuffer,10),(const unsigned char*)Verdana8,x,y);
    539c:	98 01       	movw	r18, r16
    539e:	ae 01       	movw	r20, r28
    53a0:	67 ef       	ldi	r22, 0xF7	; 247
    53a2:	79 e0       	ldi	r23, 0x09	; 9
    53a4:	0e 94 22 38 	call	0x7044	; 0x7044 <mugui_lcd_puts>
    53a8:	08 c0       	rjmp	.+16     	; 0x53ba <print_menu_text+0x3c>
	}
	else
	{
		LCD_Display_Text(text_link, (const unsigned char*)Verdana8,x,y);
    53aa:	98 01       	movw	r18, r16
    53ac:	ae 01       	movw	r20, r28
    53ae:	67 ef       	ldi	r22, 0xF7	; 247
    53b0:	79 e0       	ldi	r23, 0x09	; 9
    53b2:	8e 2f       	mov	r24, r30
    53b4:	90 e0       	ldi	r25, 0x00	; 0
    53b6:	0e 94 a0 1d 	call	0x3b40	; 0x3b40 <LCD_Display_Text>
	}
}
    53ba:	df 91       	pop	r29
    53bc:	cf 91       	pop	r28
    53be:	1f 91       	pop	r17
    53c0:	0f 91       	pop	r16
    53c2:	08 95       	ret

000053c4 <poll_buttons>:
// Poll buttons, wait until something pressed, debounce and 
// return button info.
//************************************************************

uint8_t poll_buttons(bool acceleration)
{
    53c4:	68 2f       	mov	r22, r24
	static uint8_t button_count = 0;
	uint8_t buttons = 0;

	button = (PINB & 0xf0); // button is global, buttons is local
    53c6:	93 b1       	in	r25, 0x03	; 3
    53c8:	90 7f       	andi	r25, 0xF0	; 240
    53ca:	90 93 e1 07 	sts	0x07E1, r25
//************************************************************

uint8_t poll_buttons(bool acceleration)
{
	static uint8_t button_count = 0;
	uint8_t buttons = 0;
    53ce:	80 e0       	ldi	r24, 0x00	; 0
			button = buttons;
		}

		// Reset button acceleration
		button_count = 0;
		button_multiplier = 1;
    53d0:	71 e0       	ldi	r23, 0x01	; 1
	static uint8_t button_count = 0;
	uint8_t buttons = 0;

	button = (PINB & 0xf0); // button is global, buttons is local

	while (button == NONE)					
    53d2:	90 91 e1 07 	lds	r25, 0x07E1
    53d6:	90 3f       	cpi	r25, 0xF0	; 240
    53d8:	c9 f4       	brne	.+50     	; 0x540c <poll_buttons+0x48>
	{
		buttons = (PINB & 0xf0);	
    53da:	83 b1       	in	r24, 0x03	; 3
    53dc:	80 7f       	andi	r24, 0xF0	; 240
    53de:	ef e4       	ldi	r30, 0x4F	; 79
    53e0:	f3 ec       	ldi	r31, 0xC3	; 195
    53e2:	31 97       	sbiw	r30, 0x01	; 1
    53e4:	f1 f7       	brne	.-4      	; 0x53e2 <poll_buttons+0x1e>
    53e6:	00 c0       	rjmp	.+0      	; 0x53e8 <poll_buttons+0x24>
    53e8:	00 00       	nop
		_delay_ms(10);

		if (buttons != (PINB & 0xf0))
    53ea:	23 b1       	in	r18, 0x03	; 3
    53ec:	48 2f       	mov	r20, r24
    53ee:	50 e0       	ldi	r21, 0x00	; 0
    53f0:	20 7f       	andi	r18, 0xF0	; 240
    53f2:	30 e0       	ldi	r19, 0x00	; 0
    53f4:	42 17       	cp	r20, r18
    53f6:	53 07       	cpc	r21, r19
    53f8:	19 f4       	brne	.+6      	; 0x5400 <poll_buttons+0x3c>
		{
			buttons = 0; // Buttons different
		}
		else // Buttons the same - update global
		{
			button = buttons;
    53fa:	80 93 e1 07 	sts	0x07E1, r24
    53fe:	01 c0       	rjmp	.+2      	; 0x5402 <poll_buttons+0x3e>
		buttons = (PINB & 0xf0);	
		_delay_ms(10);

		if (buttons != (PINB & 0xf0))
		{
			buttons = 0; // Buttons different
    5400:	80 e0       	ldi	r24, 0x00	; 0
		{
			button = buttons;
		}

		// Reset button acceleration
		button_count = 0;
    5402:	10 92 25 05 	sts	0x0525, r1
		button_multiplier = 1;
    5406:	70 93 e2 07 	sts	0x07E2, r23
    540a:	e3 cf       	rjmp	.-58     	; 0x53d2 <poll_buttons+0xe>
	}

	// Check for buttons being held down if requested
	if ((button != NONE) && (acceleration))
    540c:	66 23       	and	r22, r22
    540e:	71 f0       	breq	.+28     	; 0x542c <poll_buttons+0x68>
	{
		// Count the number of times incremented
		button_count++; 
    5410:	90 91 25 05 	lds	r25, 0x0525
    5414:	9f 5f       	subi	r25, 0xFF	; 255
    5416:	90 93 25 05 	sts	0x0525, r25
		if (button_count >= 10)
    541a:	9a 30       	cpi	r25, 0x0A	; 10
    541c:	38 f0       	brcs	.+14     	; 0x542c <poll_buttons+0x68>
		{
			button_count = 0;
    541e:	10 92 25 05 	sts	0x0525, r1
			button_multiplier ++;
    5422:	90 91 e2 07 	lds	r25, 0x07E2
    5426:	9f 5f       	subi	r25, 0xFF	; 255
    5428:	90 93 e2 07 	sts	0x07E2, r25
		}
	}

	return buttons;
}
    542c:	08 95       	ret

0000542e <do_menu_item>:
// servo_enable = Enable real-time updating of servo position
// servo_number = Servo number to update
//************************************************************

void do_menu_item(uint16_t menuitem, int8_t *values, uint8_t mult, menu_range_t range, int8_t offset, uint8_t text_link, bool servo_enable, int16_t servo_number)
{
    542e:	a8 e1       	ldi	r26, 0x18	; 24
    5430:	b0 e0       	ldi	r27, 0x00	; 0
    5432:	ed e1       	ldi	r30, 0x1D	; 29
    5434:	fa e2       	ldi	r31, 0x2A	; 42
    5436:	0c 94 c4 41 	jmp	0x8388	; 0x8388 <__prologue_saves__>
    543a:	9f 87       	std	Y+15, r25	; 0x0f
    543c:	8e 87       	std	Y+14, r24	; 0x0e
    543e:	79 8b       	std	Y+17, r23	; 0x11
    5440:	68 8b       	std	Y+16, r22	; 0x10
    5442:	4a 87       	std	Y+10, r20	; 0x0a
    5444:	ed 82       	std	Y+5, r14	; 0x05
    5446:	fe 82       	std	Y+6, r15	; 0x06
    5448:	0f 83       	std	Y+7, r16	; 0x07
    544a:	18 87       	std	Y+8, r17	; 0x08
    544c:	29 87       	std	Y+9, r18	; 0x09
    544e:	4e 2d       	mov	r20, r14
    5450:	3f 2d       	mov	r19, r15
    5452:	0d 87       	std	Y+13, r16	; 0x0d
    5454:	1c 87       	std	Y+12, r17	; 0x0c
	mugui_size16_t size;
	int16_t temp16;
	int16_t value = (int8_t)*values;
    5456:	fb 01       	movw	r30, r22
    5458:	20 81       	ld	r18, Z
    545a:	62 2e       	mov	r6, r18
    545c:	77 24       	eor	r7, r7
    545e:	67 fc       	sbrc	r6, 7
    5460:	70 94       	com	r7
	uint8_t button_inc = 0;
	bool	button_lock = false;
	bool	first_time = true;

	// Multiply value for display only if style is 2
	if (range.style == 2)
    5462:	12 30       	cpi	r17, 0x02	; 2
    5464:	29 f4       	brne	.+10     	; 0x5470 <do_menu_item+0x42>
	{
		value = value * mult;
    5466:	5a 85       	ldd	r21, Y+10	; 0x0a
    5468:	25 03       	mulsu	r18, r21
    546a:	30 01       	movw	r6, r0
    546c:	11 24       	eor	r1, r1
    546e:	02 c0       	rjmp	.+4      	; 0x5474 <do_menu_item+0x46>
	}
	else mult = 1;
    5470:	81 e0       	ldi	r24, 0x01	; 1
    5472:	8a 87       	std	Y+10, r24	; 0x0a

	button = NONE;
    5474:	20 ef       	ldi	r18, 0xF0	; 240
    5476:	20 93 e1 07 	sts	0x07E1, r18
		{
			value = (range.default_value * mult);
		}

		// Limit values to set ranges
		if (value < (range.lower * mult)) 
    547a:	fa 85       	ldd	r31, Y+10	; 0x0a
    547c:	ef 2f       	mov	r30, r31
    547e:	f0 e0       	ldi	r31, 0x00	; 0
    5480:	fb 8b       	std	Y+19, r31	; 0x13
    5482:	ea 8b       	std	Y+18, r30	; 0x12
    5484:	2a 85       	ldd	r18, Y+10	; 0x0a
    5486:	42 03       	mulsu	r20, r18
    5488:	10 01       	movw	r2, r0
    548a:	11 24       	eor	r1, r1
		{
			value = range.lower * mult;
		}
		
		if (value > (range.upper * mult)) 
    548c:	32 03       	mulsu	r19, r18
    548e:	20 01       	movw	r4, r0
    5490:	11 24       	eor	r1, r1
	uint8_t display_update = 0;
	uint8_t servo_update = 0;
	uint8_t button_update = 0;
	uint8_t button_inc = 0;
	bool	button_lock = false;
	bool	first_time = true;
    5492:	91 e0       	ldi	r25, 0x01	; 1
	int16_t value = (int8_t)*values;
	uint8_t display_update = 0;
	uint8_t servo_update = 0;
	uint8_t button_update = 0;
	uint8_t button_inc = 0;
	bool	button_lock = false;
    5494:	91 2c       	mov	r9, r1
	mugui_size16_t size;
	int16_t temp16;
	int16_t value = (int8_t)*values;
	uint8_t display_update = 0;
	uint8_t servo_update = 0;
	uint8_t button_update = 0;
    5496:	b1 2c       	mov	r11, r1
{
	mugui_size16_t size;
	int16_t temp16;
	int16_t value = (int8_t)*values;
	uint8_t display_update = 0;
	uint8_t servo_update = 0;
    5498:	1b 86       	std	Y+11, r1	; 0x0b
void do_menu_item(uint16_t menuitem, int8_t *values, uint8_t mult, menu_range_t range, int8_t offset, uint8_t text_link, bool servo_enable, int16_t servo_number)
{
	mugui_size16_t size;
	int16_t temp16;
	int16_t value = (int8_t)*values;
	uint8_t display_update = 0;
    549a:	f1 2c       	mov	r15, r1
			first_time = false;

			clear_buffer(buffer);

			// Print title
			gLCDprint_Menu_P((char*)pgm_read_word(&text_menu[menuitem]), (const unsigned char*)Verdana14, 0, 0);
    549c:	0e 85       	ldd	r16, Y+14	; 0x0e
    549e:	1f 85       	ldd	r17, Y+15	; 0x0f
    54a0:	00 0f       	add	r16, r16
    54a2:	11 1f       	adc	r17, r17
    54a4:	02 52       	subi	r16, 0x22	; 34
    54a6:	12 4f       	sbci	r17, 0xF2	; 242

			// Print value
			if ((range.style == 0) || (range.style == 2)) // numeric and numeric * 4
    54a8:	3c 85       	ldd	r19, Y+12	; 0x0c
    54aa:	3d 7f       	andi	r19, 0xFD	; 253
    54ac:	3c 8b       	std	Y+20, r19	; 0x14
			}
			else // text
			{
				// Write text, centered on screen
				// NB: pBuffer obviously has to be larger than the longest text string printed... duh...
				pgm_mugui_scopy((char*)pgm_read_word(&text_menu[text_link + value])); // Copy string to pBuffer
    54ae:	ea 2d       	mov	r30, r10
    54b0:	f0 e0       	ldi	r31, 0x00	; 0
    54b2:	fe 8b       	std	Y+22, r31	; 0x16
    54b4:	ed 8b       	std	Y+21, r30	; 0x15
			// Print value
			if ((range.style == 0) || (range.style == 2)) // numeric and numeric * 4
			{
				// Write numeric value, centered on screen
				mugui_text_sizestring(itoa(value,pBuffer,10), (const unsigned char*)Verdana14, &size);
				mugui_lcd_puts(itoa(value,pBuffer,10),(const unsigned char*)Verdana14,((128-size.x)/2)+offset,25);
    54b6:	2c 2d       	mov	r18, r12
    54b8:	33 27       	eor	r19, r19
    54ba:	27 fd       	sbrc	r18, 7
    54bc:	30 95       	com	r19
    54be:	38 8f       	std	Y+24, r19	; 0x18
    54c0:	2f 8b       	std	Y+23, r18	; 0x17

		// Set servo position if required and update every 4 * 5ms = 20ms
		// Ignore if the output is marked as a motor
		if	(
			((servo_enable) && (servo_update >= 4)) &&
			(Config.Channel[servo_number].Motor_marker == MOTOR)
    54c2:	86 e2       	ldi	r24, 0x26	; 38
    54c4:	ed a5       	ldd	r30, Y+45	; 0x2d
    54c6:	fe a5       	ldd	r31, Y+46	; 0x2e
    54c8:	8e 9f       	mul	r24, r30
    54ca:	60 01       	movw	r12, r0
    54cc:	8f 9f       	mul	r24, r31
    54ce:	d0 0c       	add	r13, r0
    54d0:	11 24       	eor	r1, r1
    54d2:	96 01       	movw	r18, r12
    54d4:	21 5c       	subi	r18, 0xC1	; 193
    54d6:	39 4f       	sbci	r19, 0xF9	; 249
    54d8:	69 01       	movw	r12, r18
	button = NONE;

	// This is a loop that cycles until Button 4 is pressed (Save)
	// The GLCD updating slows servo updates down too much so only update the GLCD periodically
	// When not updating the GLCD the servo should be updated at 50Hz (20ms)
	while (button != ENTER)
    54da:	80 91 e1 07 	lds	r24, 0x07E1
    54de:	80 3e       	cpi	r24, 0xE0	; 224
    54e0:	09 f4       	brne	.+2      	; 0x54e4 <do_menu_item+0xb6>
    54e2:	ef c0       	rjmp	.+478    	; 0x56c2 <do_menu_item+0x294>
	{
		// Increment loopcount so that we can time various things
		display_update++;
		servo_update++;
    54e4:	3b 85       	ldd	r19, Y+11	; 0x0b
    54e6:	3f 5f       	subi	r19, 0xFF	; 255
    54e8:	3b 87       	std	Y+11, r19	; 0x0b

		// Vary the button increment delay depending on the function
		if (servo_enable)
    54ea:	88 20       	and	r8, r8
    54ec:	11 f0       	breq	.+4      	; 0x54f2 <do_menu_item+0xc4>
		{
			button_inc = 20; // For servos
    54ee:	24 e1       	ldi	r18, 0x14	; 20
    54f0:	01 c0       	rjmp	.+2      	; 0x54f4 <do_menu_item+0xc6>
		}
		else
		{
			button_inc = 1;	// For everything else (numbers)
    54f2:	21 e0       	ldi	r18, 0x01	; 1
		}

		// Increment button timer when pressed
		if (button != NONE)
    54f4:	80 3f       	cpi	r24, 0xF0	; 240
    54f6:	19 f0       	breq	.+6      	; 0x54fe <do_menu_item+0xd0>
		{
			button_update++;
    54f8:	b3 94       	inc	r11

			// Release button lock after button_inc loops
			if (button_update > button_inc)
    54fa:	2b 15       	cp	r18, r11
    54fc:	10 f4       	brcc	.+4      	; 0x5502 <do_menu_item+0xd4>
		}
		// Remove lock when not pressed
		else 
		{
			button_update = 0;
			button_lock = false;
    54fe:	91 2c       	mov	r9, r1
			} 
		}
		// Remove lock when not pressed
		else 
		{
			button_update = 0;
    5500:	b1 2c       	mov	r11, r1
			button_lock = false;
		}

		// Display update
		if 	(!servo_enable || 									// Non-servo value or
    5502:	88 20       	and	r8, r8
    5504:	49 f0       	breq	.+18     	; 0x5518 <do_menu_item+0xea>
	// The GLCD updating slows servo updates down too much so only update the GLCD periodically
	// When not updating the GLCD the servo should be updated at 50Hz (20ms)
	while (button != ENTER)
	{
		// Increment loopcount so that we can time various things
		display_update++;
    5506:	f3 94       	inc	r15
			button_update = 0;
			button_lock = false;
		}

		// Display update
		if 	(!servo_enable || 									// Non-servo value or
    5508:	5f e1       	ldi	r21, 0x1F	; 31
    550a:	5f 15       	cp	r21, r15
    550c:	10 f4       	brcc	.+4      	; 0x5512 <do_menu_item+0xe4>
			((display_update >= 32) && (button != NONE)) || 	// Servo value and 32 cycles passed but only with a button pressed or...
    550e:	80 3f       	cpi	r24, 0xF0	; 240
    5510:	19 f4       	brne	.+6      	; 0x5518 <do_menu_item+0xea>
    5512:	99 23       	and	r25, r25
    5514:	09 f4       	brne	.+2      	; 0x5518 <do_menu_item+0xea>
    5516:	6a c0       	rjmp	.+212    	; 0x55ec <do_menu_item+0x1be>
			 (first_time))										// First time into routine
		{
			display_update = 0;
			first_time = false;

			clear_buffer(buffer);
    5518:	80 e0       	ldi	r24, 0x00	; 0
    551a:	91 e0       	ldi	r25, 0x01	; 1
    551c:	0e 94 f7 1b 	call	0x37ee	; 0x37ee <clear_buffer>

			// Print title
			gLCDprint_Menu_P((char*)pgm_read_word(&text_menu[menuitem]), (const unsigned char*)Verdana14, 0, 0);
    5520:	f8 01       	movw	r30, r16
    5522:	85 91       	lpm	r24, Z+
    5524:	94 91       	lpm	r25, Z
    5526:	20 e0       	ldi	r18, 0x00	; 0
    5528:	30 e0       	ldi	r19, 0x00	; 0
    552a:	40 e0       	ldi	r20, 0x00	; 0
    552c:	50 e0       	ldi	r21, 0x00	; 0
    552e:	69 e4       	ldi	r22, 0x49	; 73
    5530:	71 e0       	ldi	r23, 0x01	; 1
    5532:	0e 94 aa 1d 	call	0x3b54	; 0x3b54 <gLCDprint_Menu_P>

			// Print value
			if ((range.style == 0) || (range.style == 2)) // numeric and numeric * 4
    5536:	8c 89       	ldd	r24, Y+20	; 0x14
    5538:	81 11       	cpse	r24, r1
    553a:	28 c0       	rjmp	.+80     	; 0x558c <do_menu_item+0x15e>
    553c:	4a e0       	ldi	r20, 0x0A	; 10
    553e:	67 e5       	ldi	r22, 0x57	; 87
    5540:	75 e0       	ldi	r23, 0x05	; 5
    5542:	c3 01       	movw	r24, r6
    5544:	0e 94 04 42 	call	0x8408	; 0x8408 <__itoa_ncheck>
			{
				// Write numeric value, centered on screen
				mugui_text_sizestring(itoa(value,pBuffer,10), (const unsigned char*)Verdana14, &size);
    5548:	ae 01       	movw	r20, r28
    554a:	4f 5f       	subi	r20, 0xFF	; 255
    554c:	5f 4f       	sbci	r21, 0xFF	; 255
    554e:	69 e4       	ldi	r22, 0x49	; 73
    5550:	71 e0       	ldi	r23, 0x01	; 1
    5552:	0e 94 0a 37 	call	0x6e14	; 0x6e14 <mugui_text_sizestring>
				mugui_lcd_puts(itoa(value,pBuffer,10),(const unsigned char*)Verdana14,((128-size.x)/2)+offset,25);
    5556:	89 81       	ldd	r24, Y+1	; 0x01
    5558:	9a 81       	ldd	r25, Y+2	; 0x02
    555a:	70 e8       	ldi	r23, 0x80	; 128
    555c:	e7 2e       	mov	r14, r23
    555e:	f1 2c       	mov	r15, r1
    5560:	e8 1a       	sub	r14, r24
    5562:	f9 0a       	sbc	r15, r25
    5564:	f6 94       	lsr	r15
    5566:	e7 94       	ror	r14
    5568:	ef 89       	ldd	r30, Y+23	; 0x17
    556a:	f8 8d       	ldd	r31, Y+24	; 0x18
    556c:	ee 0e       	add	r14, r30
    556e:	ff 1e       	adc	r15, r31
    5570:	4a e0       	ldi	r20, 0x0A	; 10
    5572:	67 e5       	ldi	r22, 0x57	; 87
    5574:	75 e0       	ldi	r23, 0x05	; 5
    5576:	c3 01       	movw	r24, r6
    5578:	0e 94 04 42 	call	0x8408	; 0x8408 <__itoa_ncheck>
    557c:	29 e1       	ldi	r18, 0x19	; 25
    557e:	30 e0       	ldi	r19, 0x00	; 0
    5580:	a7 01       	movw	r20, r14
    5582:	69 e4       	ldi	r22, 0x49	; 73
    5584:	71 e0       	ldi	r23, 0x01	; 1
    5586:	0e 94 22 38 	call	0x7044	; 0x7044 <mugui_lcd_puts>
    558a:	25 c0       	rjmp	.+74     	; 0x55d6 <do_menu_item+0x1a8>
			}
			else // text
			{
				// Write text, centered on screen
				// NB: pBuffer obviously has to be larger than the longest text string printed... duh...
				pgm_mugui_scopy((char*)pgm_read_word(&text_menu[text_link + value])); // Copy string to pBuffer
    558c:	ed 88       	ldd	r14, Y+21	; 0x15
    558e:	fe 88       	ldd	r15, Y+22	; 0x16
    5590:	e6 0c       	add	r14, r6
    5592:	f7 1c       	adc	r15, r7
    5594:	f7 01       	movw	r30, r14
    5596:	ee 0f       	add	r30, r30
    5598:	ff 1f       	adc	r31, r31
    559a:	e2 52       	subi	r30, 0x22	; 34
    559c:	f2 4f       	sbci	r31, 0xF2	; 242
    559e:	85 91       	lpm	r24, Z+
    55a0:	94 91       	lpm	r25, Z
    55a2:	0e 94 54 37 	call	0x6ea8	; 0x6ea8 <pgm_mugui_scopy>

				mugui_text_sizestring((char*)pBuffer, (const unsigned char*)Verdana14, &size);
    55a6:	ae 01       	movw	r20, r28
    55a8:	4f 5f       	subi	r20, 0xFF	; 255
    55aa:	5f 4f       	sbci	r21, 0xFF	; 255
    55ac:	69 e4       	ldi	r22, 0x49	; 73
    55ae:	71 e0       	ldi	r23, 0x01	; 1
    55b0:	87 e5       	ldi	r24, 0x57	; 87
    55b2:	95 e0       	ldi	r25, 0x05	; 5
    55b4:	0e 94 0a 37 	call	0x6e14	; 0x6e14 <mugui_text_sizestring>
				LCD_Display_Text(text_link + value, (const unsigned char*)Verdana14,((128-size.x)/2),25);
    55b8:	89 81       	ldd	r24, Y+1	; 0x01
    55ba:	9a 81       	ldd	r25, Y+2	; 0x02
    55bc:	40 e8       	ldi	r20, 0x80	; 128
    55be:	50 e0       	ldi	r21, 0x00	; 0
    55c0:	48 1b       	sub	r20, r24
    55c2:	59 0b       	sbc	r21, r25
    55c4:	56 95       	lsr	r21
    55c6:	47 95       	ror	r20
    55c8:	29 e1       	ldi	r18, 0x19	; 25
    55ca:	30 e0       	ldi	r19, 0x00	; 0
    55cc:	69 e4       	ldi	r22, 0x49	; 73
    55ce:	71 e0       	ldi	r23, 0x01	; 1
    55d0:	c7 01       	movw	r24, r14
    55d2:	0e 94 a0 1d 	call	0x3b40	; 0x3b40 <LCD_Display_Text>
			}

			// Print bottom markers
			print_menu_frame(1);
    55d6:	81 e0       	ldi	r24, 0x01	; 1
    55d8:	0e 94 41 29 	call	0x5282	; 0x5282 <print_menu_frame>

			// Write from buffer
			write_buffer(buffer,1);
    55dc:	61 e0       	ldi	r22, 0x01	; 1
    55de:	80 e0       	ldi	r24, 0x00	; 0
    55e0:	91 e0       	ldi	r25, 0x01	; 1
    55e2:	0e 94 c9 1b 	call	0x3792	; 0x3792 <write_buffer>
		}

		// Poll buttons when idle
		// Don't use button acceleration when moving servos
		// And don't block the code with poll_buttons()
		if (servo_enable)
    55e6:	88 20       	and	r8, r8
    55e8:	49 f0       	breq	.+18     	; 0x55fc <do_menu_item+0x1ce>
		// Display update
		if 	(!servo_enable || 									// Non-servo value or
			((display_update >= 32) && (button != NONE)) || 	// Servo value and 32 cycles passed but only with a button pressed or...
			 (first_time))										// First time into routine
		{
			display_update = 0;
    55ea:	f1 2c       	mov	r15, r1
		// Poll buttons when idle
		// Don't use button acceleration when moving servos
		// And don't block the code with poll_buttons()
		if (servo_enable)
		{
			button = (PINB & 0xf0);	
    55ec:	83 b1       	in	r24, 0x03	; 3
    55ee:	80 7f       	andi	r24, 0xF0	; 240
    55f0:	80 93 e1 07 	sts	0x07E1, r24
			button_multiplier = 1;
    55f4:	81 e0       	ldi	r24, 0x01	; 1
    55f6:	80 93 e2 07 	sts	0x07E2, r24
    55fa:	04 c0       	rjmp	.+8      	; 0x5604 <do_menu_item+0x1d6>
		}
		else
		{
			poll_buttons(true);
    55fc:	81 e0       	ldi	r24, 0x01	; 1
    55fe:	0e 94 e2 29 	call	0x53c4	; 0x53c4 <poll_buttons>
		// Display update
		if 	(!servo_enable || 									// Non-servo value or
			((display_update >= 32) && (button != NONE)) || 	// Servo value and 32 cycles passed but only with a button pressed or...
			 (first_time))										// First time into routine
		{
			display_update = 0;
    5602:	f1 2c       	mov	r15, r1
		{
			poll_buttons(true);
		}

		// Handle cursor Up/Down limits
		if (button == DOWN)
    5604:	80 91 e1 07 	lds	r24, 0x07E1
    5608:	80 3d       	cpi	r24, 0xD0	; 208
    560a:	51 f4       	brne	.+20     	; 0x5620 <do_menu_item+0x1f2>
		{
			if (button_lock == false)
    560c:	91 10       	cpse	r9, r1
    560e:	69 c0       	rjmp	.+210    	; 0x56e2 <do_menu_item+0x2b4>
			{
				button_lock = true;
				value = value - (range.increment * button_multiplier);
    5610:	80 91 e2 07 	lds	r24, 0x07E2
    5614:	fd 85       	ldd	r31, Y+13	; 0x0d
    5616:	f8 9f       	mul	r31, r24
    5618:	60 18       	sub	r6, r0
    561a:	71 08       	sbc	r7, r1
    561c:	11 24       	eor	r1, r1
    561e:	0b c0       	rjmp	.+22     	; 0x5636 <do_menu_item+0x208>
				button_update = 0;
			}
		}

		if (button == UP)
    5620:	80 3b       	cpi	r24, 0xB0	; 176
    5622:	59 f4       	brne	.+22     	; 0x563a <do_menu_item+0x20c>
		{
			if (button_lock == false)
    5624:	91 10       	cpse	r9, r1
    5626:	5d c0       	rjmp	.+186    	; 0x56e2 <do_menu_item+0x2b4>
			{
				button_lock = true;
				value = value + (range.increment * button_multiplier);
    5628:	80 91 e2 07 	lds	r24, 0x07E2
    562c:	2d 85       	ldd	r18, Y+13	; 0x0d
    562e:	28 9f       	mul	r18, r24
    5630:	60 0c       	add	r6, r0
    5632:	71 1c       	adc	r7, r1
    5634:	11 24       	eor	r1, r1
				button_update = 0;
    5636:	b1 2c       	mov	r11, r1
    5638:	54 c0       	rjmp	.+168    	; 0x56e2 <do_menu_item+0x2b4>
			}
		}

		if (button == BACK)	
    563a:	80 37       	cpi	r24, 0x70	; 112
    563c:	29 f4       	brne	.+10     	; 0x5648 <do_menu_item+0x21a>
		{
			value = (range.default_value * mult);
    563e:	29 85       	ldd	r18, Y+9	; 0x09
    5640:	3a 85       	ldd	r19, Y+10	; 0x0a
    5642:	23 03       	mulsu	r18, r19
    5644:	30 01       	movw	r6, r0
    5646:	11 24       	eor	r1, r1
    5648:	62 14       	cp	r6, r2
    564a:	73 04       	cpc	r7, r3
    564c:	0c f4       	brge	.+2      	; 0x5650 <do_menu_item+0x222>
    564e:	31 01       	movw	r6, r2
    5650:	46 14       	cp	r4, r6
    5652:	57 04       	cpc	r5, r7
    5654:	0c f4       	brge	.+2      	; 0x5658 <do_menu_item+0x22a>
    5656:	32 01       	movw	r6, r4
		{
			value = range.upper * mult;
		}

		// Update contrast setting
		if (menuitem == CONTRAST)
    5658:	8e 85       	ldd	r24, Y+14	; 0x0e
    565a:	9f 85       	ldd	r25, Y+15	; 0x0f
    565c:	8f 39       	cpi	r24, 0x9F	; 159
    565e:	91 05       	cpc	r25, r1
    5660:	19 f4       	brne	.+6      	; 0x5668 <do_menu_item+0x23a>
		{
			st7565_set_brightness(value);
    5662:	86 2d       	mov	r24, r6
    5664:	0e 94 9f 1b 	call	0x373e	; 0x373e <st7565_set_brightness>
		}

		// Set servo position if required and update every 4 * 5ms = 20ms
		// Ignore if the output is marked as a motor
		if	(
    5668:	88 20       	and	r8, r8
    566a:	c1 f0       	breq	.+48     	; 0x569c <do_menu_item+0x26e>
			((servo_enable) && (servo_update >= 4)) &&
    566c:	9b 85       	ldd	r25, Y+11	; 0x0b
    566e:	94 30       	cpi	r25, 0x04	; 4
    5670:	a8 f0       	brcs	.+42     	; 0x569c <do_menu_item+0x26e>
    5672:	f6 01       	movw	r30, r12
    5674:	80 81       	ld	r24, Z
    5676:	81 30       	cpi	r24, 0x01	; 1
    5678:	89 f4       	brne	.+34     	; 0x569c <do_menu_item+0x26e>
			(Config.Channel[servo_number].Motor_marker == MOTOR)
			)
		{
			servo_update = 0;

			temp16 = scale_percent(value);	// Convert to servo position (from %)
    567a:	86 2d       	mov	r24, r6
    567c:	0e 94 03 37 	call	0x6e06	; 0x6e06 <scale_percent>

			// Scale servo from 2500~5000 to 875~2125
			temp16 = ((temp16 - (int16_t)3750) >> 1) + (int16_t)1500; 
    5680:	86 5a       	subi	r24, 0xA6	; 166
    5682:	9e 40       	sbci	r25, 0x0E	; 14
    5684:	95 95       	asr	r25
    5686:	87 95       	ror	r24

			cli();
    5688:	f8 94       	cli
			servo_update = 0;

			temp16 = scale_percent(value);	// Convert to servo position (from %)

			// Scale servo from 2500~5000 to 875~2125
			temp16 = ((temp16 - (int16_t)3750) >> 1) + (int16_t)1500; 
    568a:	bc 01       	movw	r22, r24
    568c:	64 52       	subi	r22, 0x24	; 36
    568e:	7a 4f       	sbci	r23, 0xFA	; 250

			cli();
			output_servo_ppm_asm3(servo_number, temp16);
    5690:	8d a5       	ldd	r24, Y+45	; 0x2d
    5692:	9e a5       	ldd	r25, Y+46	; 0x2e
    5694:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <output_servo_ppm_asm3>
			sei();
    5698:	78 94       	sei
		if	(
			((servo_enable) && (servo_update >= 4)) &&
			(Config.Channel[servo_number].Motor_marker == MOTOR)
			)
		{
			servo_update = 0;
    569a:	1b 86       	std	Y+11, r1	; 0x0b
			output_servo_ppm_asm3(servo_number, temp16);
			sei();
		}

		// Slow the loop rate for text items		
		 if (range.style == 1)
    569c:	fc 85       	ldd	r31, Y+12	; 0x0c
    569e:	f1 30       	cpi	r31, 0x01	; 1
    56a0:	41 f4       	brne	.+16     	; 0x56b2 <do_menu_item+0x284>
    56a2:	2f e7       	ldi	r18, 0x7F	; 127
    56a4:	3a e1       	ldi	r19, 0x1A	; 26
    56a6:	56 e0       	ldi	r21, 0x06	; 6
    56a8:	21 50       	subi	r18, 0x01	; 1
    56aa:	30 40       	sbci	r19, 0x00	; 0
    56ac:	50 40       	sbci	r21, 0x00	; 0
    56ae:	e1 f7       	brne	.-8      	; 0x56a8 <do_menu_item+0x27a>
    56b0:	04 c0       	rjmp	.+8      	; 0x56ba <do_menu_item+0x28c>
    56b2:	87 ea       	ldi	r24, 0xA7	; 167
    56b4:	91 e6       	ldi	r25, 0x61	; 97
    56b6:	01 97       	sbiw	r24, 0x01	; 1
    56b8:	f1 f7       	brne	.-4      	; 0x56b6 <do_menu_item+0x288>
    56ba:	00 c0       	rjmp	.+0      	; 0x56bc <do_menu_item+0x28e>
    56bc:	00 00       	nop
    56be:	90 e0       	ldi	r25, 0x00	; 0
    56c0:	0c cf       	rjmp	.-488    	; 0x54da <do_menu_item+0xac>

	// Exit
	button = ENTER;

	// Divide value from that displayed if style = 2
	if (range.style == 2)
    56c2:	9c 85       	ldd	r25, Y+12	; 0x0c
    56c4:	92 30       	cpi	r25, 0x02	; 2
    56c6:	31 f4       	brne	.+12     	; 0x56d4 <do_menu_item+0x2a6>
	{
		value = value / mult;
    56c8:	c3 01       	movw	r24, r6
    56ca:	6a 89       	ldd	r22, Y+18	; 0x12
    56cc:	7b 89       	ldd	r23, Y+19	; 0x13
    56ce:	0e 94 38 41 	call	0x8270	; 0x8270 <__divmodhi4>
    56d2:	3b 01       	movw	r6, r22
	}

	*values = (int8_t)value;
    56d4:	e8 89       	ldd	r30, Y+16	; 0x10
    56d6:	f9 89       	ldd	r31, Y+17	; 0x11
    56d8:	60 82       	st	Z, r6
}
    56da:	68 96       	adiw	r28, 0x18	; 24
    56dc:	e2 e1       	ldi	r30, 0x12	; 18
    56de:	0c 94 e0 41 	jmp	0x83c0	; 0x83c0 <__epilogue_restores__>
		// Display update
		if 	(!servo_enable || 									// Non-servo value or
			((display_update >= 32) && (button != NONE)) || 	// Servo value and 32 cycles passed but only with a button pressed or...
			 (first_time))										// First time into routine
		{
			display_update = 0;
    56e2:	99 24       	eor	r9, r9
    56e4:	93 94       	inc	r9
    56e6:	b0 cf       	rjmp	.-160    	; 0x5648 <do_menu_item+0x21a>

000056e8 <menu_beep>:

void menu_beep(uint8_t beeps)
{
	uint8_t i;

	for (i=0; i < beeps; i++)
    56e8:	90 e0       	ldi	r25, 0x00	; 0
    56ea:	98 17       	cp	r25, r24
    56ec:	b1 f0       	breq	.+44     	; 0x571a <menu_beep+0x32>
	{ 
		LVA = 1;
    56ee:	29 9a       	sbi	0x05, 1	; 5
    56f0:	2f e9       	ldi	r18, 0x9F	; 159
    56f2:	36 e8       	ldi	r19, 0x86	; 134
    56f4:	41 e0       	ldi	r20, 0x01	; 1
    56f6:	21 50       	subi	r18, 0x01	; 1
    56f8:	30 40       	sbci	r19, 0x00	; 0
    56fa:	40 40       	sbci	r20, 0x00	; 0
    56fc:	e1 f7       	brne	.-8      	; 0x56f6 <menu_beep+0xe>
    56fe:	00 c0       	rjmp	.+0      	; 0x5700 <menu_beep+0x18>
    5700:	00 00       	nop
		_delay_ms(25);
		LVA = 0;
    5702:	29 98       	cbi	0x05, 1	; 5
    5704:	2f e9       	ldi	r18, 0x9F	; 159
    5706:	36 e8       	ldi	r19, 0x86	; 134
    5708:	41 e0       	ldi	r20, 0x01	; 1
    570a:	21 50       	subi	r18, 0x01	; 1
    570c:	30 40       	sbci	r19, 0x00	; 0
    570e:	40 40       	sbci	r20, 0x00	; 0
    5710:	e1 f7       	brne	.-8      	; 0x570a <menu_beep+0x22>
    5712:	00 c0       	rjmp	.+0      	; 0x5714 <menu_beep+0x2c>
    5714:	00 00       	nop

void menu_beep(uint8_t beeps)
{
	uint8_t i;

	for (i=0; i < beeps; i++)
    5716:	9f 5f       	subi	r25, 0xFF	; 255
    5718:	e8 cf       	rjmp	.-48     	; 0x56ea <menu_beep+0x2>
		LVA = 1;
		_delay_ms(25);
		LVA = 0;
		_delay_ms(25);
	}
}
    571a:	08 95       	ret

0000571c <update_menu>:
// top*		= Item number currently on top line
// temp*	= Currently selected item number
//************************************************************

void update_menu(uint8_t items, uint8_t start, uint8_t offset, uint8_t button, uint8_t* cursor, uint8_t* top, uint16_t* temp)
{
    571c:	a3 e0       	ldi	r26, 0x03	; 3
    571e:	b0 e0       	ldi	r27, 0x00	; 0
    5720:	e4 e9       	ldi	r30, 0x94	; 148
    5722:	fb e2       	ldi	r31, 0x2B	; 43
    5724:	0c 94 ce 41 	jmp	0x839c	; 0x839c <__prologue_saves__+0x14>
    5728:	98 2f       	mov	r25, r24
    572a:	f6 01       	movw	r30, r12
	// Temporarily add in offset :(
	*top = *top + offset;
    572c:	d7 01       	movw	r26, r14
    572e:	8c 91       	ld	r24, X
    5730:	84 0f       	add	r24, r20
    5732:	8c 93       	st	X, r24
	start = start + offset;
    5734:	64 0f       	add	r22, r20

	// Calculate which function has been requested
	if (button == ENTER)
    5736:	20 3e       	cpi	r18, 0xE0	; 224
    5738:	09 f5       	brne	.+66     	; 0x577c <update_menu+0x60>
	{
		switch(*cursor) 
    573a:	d8 01       	movw	r26, r16
    573c:	2c 91       	ld	r18, X
    573e:	2f 30       	cpi	r18, 0x0F	; 15
    5740:	89 f0       	breq	.+34     	; 0x5764 <update_menu+0x48>
    5742:	30 f4       	brcc	.+12     	; 0x5750 <update_menu+0x34>
    5744:	23 30       	cpi	r18, 0x03	; 3
    5746:	09 f0       	breq	.+2      	; 0x574a <update_menu+0x2e>
    5748:	58 c0       	rjmp	.+176    	; 0x57fa <update_menu+0xde>
		{
			case LINE0:
				*temp = *top;
    574a:	28 2f       	mov	r18, r24
    574c:	30 e0       	ldi	r19, 0x00	; 0
    574e:	0e c0       	rjmp	.+28     	; 0x576c <update_menu+0x50>
	start = start + offset;

	// Calculate which function has been requested
	if (button == ENTER)
	{
		switch(*cursor) 
    5750:	2b 31       	cpi	r18, 0x1B	; 27
    5752:	79 f0       	breq	.+30     	; 0x5772 <update_menu+0x56>
    5754:	27 32       	cpi	r18, 0x27	; 39
    5756:	09 f0       	breq	.+2      	; 0x575a <update_menu+0x3e>
    5758:	50 c0       	rjmp	.+160    	; 0x57fa <update_menu+0xde>
				break;	
			case LINE2:
				*temp = *top + 2;
				break;
			case LINE3:
				*temp = *top + 3;
    575a:	28 2f       	mov	r18, r24
    575c:	30 e0       	ldi	r19, 0x00	; 0
    575e:	2d 5f       	subi	r18, 0xFD	; 253
    5760:	3f 4f       	sbci	r19, 0xFF	; 255
    5762:	04 c0       	rjmp	.+8      	; 0x576c <update_menu+0x50>
		{
			case LINE0:
				*temp = *top;
				break;
			case LINE1:
				*temp = *top + 1;
    5764:	28 2f       	mov	r18, r24
    5766:	30 e0       	ldi	r19, 0x00	; 0
    5768:	2f 5f       	subi	r18, 0xFF	; 255
    576a:	3f 4f       	sbci	r19, 0xFF	; 255
    576c:	31 83       	std	Z+1, r19	; 0x01
    576e:	20 83       	st	Z, r18
				break;	
    5770:	44 c0       	rjmp	.+136    	; 0x57fa <update_menu+0xde>
			case LINE2:
				*temp = *top + 2;
    5772:	28 2f       	mov	r18, r24
    5774:	30 e0       	ldi	r19, 0x00	; 0
    5776:	2e 5f       	subi	r18, 0xFE	; 254
    5778:	3f 4f       	sbci	r19, 0xFF	; 255
    577a:	f8 cf       	rjmp	.-16     	; 0x576c <update_menu+0x50>
				break;
		}
	}

	// Handle cursor Up/Down limits
	if (button == DOWN)	
    577c:	20 3d       	cpi	r18, 0xD0	; 208
    577e:	f9 f4       	brne	.+62     	; 0x57be <update_menu+0xa2>
	{
		switch(*cursor) 
    5780:	f8 01       	movw	r30, r16
    5782:	80 81       	ld	r24, Z
    5784:	8f 30       	cpi	r24, 0x0F	; 15
    5786:	69 f0       	breq	.+26     	; 0x57a2 <update_menu+0x86>
    5788:	18 f4       	brcc	.+6      	; 0x5790 <update_menu+0x74>
    578a:	83 30       	cpi	r24, 0x03	; 3
    578c:	31 f0       	breq	.+12     	; 0x579a <update_menu+0x7e>
    578e:	15 c0       	rjmp	.+42     	; 0x57ba <update_menu+0x9e>
    5790:	8b 31       	cpi	r24, 0x1B	; 27
    5792:	59 f0       	breq	.+22     	; 0x57aa <update_menu+0x8e>
    5794:	87 32       	cpi	r24, 0x27	; 39
    5796:	69 f0       	breq	.+26     	; 0x57b2 <update_menu+0x96>
    5798:	10 c0       	rjmp	.+32     	; 0x57ba <update_menu+0x9e>
		{
			case LINE0:
				if (items > 1) *cursor = LINE1;
    579a:	92 30       	cpi	r25, 0x02	; 2
    579c:	70 f1       	brcs	.+92     	; 0x57fa <update_menu+0xde>
    579e:	8f e0       	ldi	r24, 0x0F	; 15
    57a0:	27 c0       	rjmp	.+78     	; 0x57f0 <update_menu+0xd4>
				break;	
			case LINE1:
				if (items > 2) *cursor = LINE2;
    57a2:	93 30       	cpi	r25, 0x03	; 3
    57a4:	50 f1       	brcs	.+84     	; 0x57fa <update_menu+0xde>
    57a6:	8b e1       	ldi	r24, 0x1B	; 27
    57a8:	1f c0       	rjmp	.+62     	; 0x57e8 <update_menu+0xcc>
				break;	
			case LINE2:
				if (items > 3) *cursor = LINE3;
    57aa:	94 30       	cpi	r25, 0x04	; 4
    57ac:	30 f1       	brcs	.+76     	; 0x57fa <update_menu+0xde>
    57ae:	87 e2       	ldi	r24, 0x27	; 39
    57b0:	1f c0       	rjmp	.+62     	; 0x57f0 <update_menu+0xd4>
				break;
			case LINE3:
				if (items > 4) *cursor = NEXTLINE;
    57b2:	95 30       	cpi	r25, 0x05	; 5
    57b4:	10 f1       	brcs	.+68     	; 0x57fa <update_menu+0xde>
    57b6:	88 e2       	ldi	r24, 0x28	; 40
    57b8:	17 c0       	rjmp	.+46     	; 0x57e8 <update_menu+0xcc>
				break;
			default:
				*cursor = NEXTLINE;
    57ba:	88 e2       	ldi	r24, 0x28	; 40
    57bc:	19 c0       	rjmp	.+50     	; 0x57f0 <update_menu+0xd4>
				break;
		}
	}

	if (button == UP)	
    57be:	20 3b       	cpi	r18, 0xB0	; 176
    57c0:	d1 f4       	brne	.+52     	; 0x57f6 <update_menu+0xda>
	{
		switch(*cursor) 
    57c2:	f8 01       	movw	r30, r16
    57c4:	80 81       	ld	r24, Z
    57c6:	8f 30       	cpi	r24, 0x0F	; 15
    57c8:	69 f0       	breq	.+26     	; 0x57e4 <update_menu+0xc8>
    57ca:	20 f4       	brcc	.+8      	; 0x57d4 <update_menu+0xb8>
    57cc:	83 30       	cpi	r24, 0x03	; 3
    57ce:	79 f4       	brne	.+30     	; 0x57ee <update_menu+0xd2>
				break;
			case LINE1:
				*cursor = LINE0;
				break;
			case LINE0:
				*cursor = PREVLINE;
    57d0:	82 e0       	ldi	r24, 0x02	; 2
    57d2:	0a c0       	rjmp	.+20     	; 0x57e8 <update_menu+0xcc>
		}
	}

	if (button == UP)	
	{
		switch(*cursor) 
    57d4:	8b 31       	cpi	r24, 0x1B	; 27
    57d6:	21 f0       	breq	.+8      	; 0x57e0 <update_menu+0xc4>
    57d8:	87 32       	cpi	r24, 0x27	; 39
    57da:	49 f4       	brne	.+18     	; 0x57ee <update_menu+0xd2>
		{
			case LINE3:
				*cursor = LINE2;
    57dc:	8b e1       	ldi	r24, 0x1B	; 27
    57de:	08 c0       	rjmp	.+16     	; 0x57f0 <update_menu+0xd4>
				break;	
			case LINE2:
				*cursor = LINE1;
    57e0:	8f e0       	ldi	r24, 0x0F	; 15
    57e2:	02 c0       	rjmp	.+4      	; 0x57e8 <update_menu+0xcc>
				break;
			case LINE1:
				*cursor = LINE0;
    57e4:	83 e0       	ldi	r24, 0x03	; 3
    57e6:	04 c0       	rjmp	.+8      	; 0x57f0 <update_menu+0xd4>
				break;
			case LINE0:
				*cursor = PREVLINE;
    57e8:	f8 01       	movw	r30, r16
    57ea:	80 83       	st	Z, r24
				break;
    57ec:	06 c0       	rjmp	.+12     	; 0x57fa <update_menu+0xde>
			default:
				*cursor = PREVLINE;
    57ee:	82 e0       	ldi	r24, 0x02	; 2
    57f0:	d8 01       	movw	r26, r16
    57f2:	8c 93       	st	X, r24
				break;
    57f4:	02 c0       	rjmp	.+4      	; 0x57fa <update_menu+0xde>
		}
	}

	if (button != NONE)	
    57f6:	20 3f       	cpi	r18, 0xF0	; 240
    57f8:	91 f0       	breq	.+36     	; 0x581e <update_menu+0x102>
	{
		menu_beep(1);
    57fa:	81 e0       	ldi	r24, 0x01	; 1
    57fc:	4b 83       	std	Y+3, r20	; 0x03
    57fe:	69 83       	std	Y+1, r22	; 0x01
    5800:	9a 83       	std	Y+2, r25	; 0x02
    5802:	0e 94 74 2b 	call	0x56e8	; 0x56e8 <menu_beep>
    5806:	bf ef       	ldi	r27, 0xFF	; 255
    5808:	e4 e3       	ldi	r30, 0x34	; 52
    580a:	fc e0       	ldi	r31, 0x0C	; 12
    580c:	b1 50       	subi	r27, 0x01	; 1
    580e:	e0 40       	sbci	r30, 0x00	; 0
    5810:	f0 40       	sbci	r31, 0x00	; 0
    5812:	e1 f7       	brne	.-8      	; 0x580c <update_menu+0xf0>
    5814:	00 c0       	rjmp	.+0      	; 0x5816 <update_menu+0xfa>
    5816:	00 00       	nop
    5818:	9a 81       	ldd	r25, Y+2	; 0x02
    581a:	69 81       	ldd	r22, Y+1	; 0x01
    581c:	4b 81       	ldd	r20, Y+3	; 0x03
		_delay_ms(200);
	}

	// When cursor is at limits and button pressed
	if (*cursor == PREVLINE)								// Up				
    581e:	d8 01       	movw	r26, r16
    5820:	8c 91       	ld	r24, X
    5822:	82 30       	cpi	r24, 0x02	; 2
    5824:	41 f4       	brne	.+16     	; 0x5836 <update_menu+0x11a>
	{
		*cursor  = LINE0;
    5826:	83 e0       	ldi	r24, 0x03	; 3
    5828:	8c 93       	st	X, r24
		if (*top > start) *top = *top - 1;					// Shuffle list up
    582a:	f7 01       	movw	r30, r14
    582c:	80 81       	ld	r24, Z
    582e:	68 17       	cp	r22, r24
    5830:	10 f4       	brcc	.+4      	; 0x5836 <update_menu+0x11a>
    5832:	81 50       	subi	r24, 0x01	; 1
    5834:	80 83       	st	Z, r24
	}
	if (*cursor == NEXTLINE)								// Down
    5836:	d8 01       	movw	r26, r16
    5838:	8c 91       	ld	r24, X
    583a:	88 32       	cpi	r24, 0x28	; 40
    583c:	91 f4       	brne	.+36     	; 0x5862 <update_menu+0x146>
	{
		*cursor  = LINE3;
    583e:	87 e2       	ldi	r24, 0x27	; 39
    5840:	8c 93       	st	X, r24
		if ((*top+3) < ((start + items)-1)) *top = *top + 1;// Shuffle list down
    5842:	f7 01       	movw	r30, r14
    5844:	50 81       	ld	r21, Z
    5846:	25 2f       	mov	r18, r21
    5848:	30 e0       	ldi	r19, 0x00	; 0
    584a:	2d 5f       	subi	r18, 0xFD	; 253
    584c:	3f 4f       	sbci	r19, 0xFF	; 255
    584e:	89 2f       	mov	r24, r25
    5850:	90 e0       	ldi	r25, 0x00	; 0
    5852:	86 0f       	add	r24, r22
    5854:	91 1d       	adc	r25, r1
    5856:	01 97       	sbiw	r24, 0x01	; 1
    5858:	28 17       	cp	r18, r24
    585a:	39 07       	cpc	r19, r25
    585c:	14 f4       	brge	.+4      	; 0x5862 <update_menu+0x146>
    585e:	5f 5f       	subi	r21, 0xFF	; 255
    5860:	50 83       	st	Z, r21
	}

	// Remove temporary offset
	*top = *top - offset;
    5862:	d7 01       	movw	r26, r14
    5864:	8c 91       	ld	r24, X
    5866:	84 1b       	sub	r24, r20
    5868:	8c 93       	st	X, r24
}
    586a:	23 96       	adiw	r28, 0x03	; 3
    586c:	e8 e0       	ldi	r30, 0x08	; 8
    586e:	0c 94 ea 41 	jmp	0x83d4	; 0x83d4 <__epilogue_restores__+0x14>

00005872 <print_cursor>:
// Print cursor on specified line
//************************************************************

void print_cursor(uint8_t line)
{
	LCD_Display_Text(13, (const unsigned char*)Wingdings, CURSOROFFSET, line);
    5872:	28 2f       	mov	r18, r24
    5874:	30 e0       	ldi	r19, 0x00	; 0
    5876:	43 e0       	ldi	r20, 0x03	; 3
    5878:	50 e0       	ldi	r21, 0x00	; 0
    587a:	6f ed       	ldi	r22, 0xDF	; 223
    587c:	70 e0       	ldi	r23, 0x00	; 0
    587e:	8d e0       	ldi	r24, 0x0D	; 13
    5880:	90 e0       	ldi	r25, 0x00	; 0
    5882:	0e 94 a0 1d 	call	0x3b40	; 0x3b40 <LCD_Display_Text>
    5886:	08 95       	ret

00005888 <print_menu_items>:
// MenuOffsets = originally an array, now just a fixed horizontal offset for the value text
// text_link = pointer to the text list for the values if not numeric
// cursor = cursor position
//**********************************************************************
void print_menu_items(uint8_t top, uint8_t start, int8_t values[], const unsigned char* menu_ranges, uint8_t rangetype, uint8_t MenuOffsets, const unsigned char* text_link, uint8_t cursor)
{
    5888:	a9 e0       	ldi	r26, 0x09	; 9
    588a:	b0 e0       	ldi	r27, 0x00	; 0
    588c:	ea e4       	ldi	r30, 0x4A	; 74
    588e:	fc e2       	ldi	r31, 0x2C	; 44
    5890:	0c 94 c4 41 	jmp	0x8388	; 0x8388 <__prologue_saves__>
    5894:	f8 2e       	mov	r15, r24
    5896:	4a 01       	movw	r8, r20
    5898:	39 01       	movw	r6, r18
    589a:	0e 83       	std	Y+6, r16	; 0x06
    589c:	ef 82       	std	Y+7, r14	; 0x07
    589e:	a8 86       	std	Y+8, r10	; 0x08
	menu_range_t	range1;
		
	// Clear buffer before each update
	clear_buffer(buffer);
    58a0:	80 e0       	ldi	r24, 0x00	; 0
    58a2:	91 e0       	ldi	r25, 0x01	; 1
    58a4:	69 87       	std	Y+9, r22	; 0x09
    58a6:	0e 94 f7 1b 	call	0x37ee	; 0x37ee <clear_buffer>
	print_menu_frame(0);
    58aa:	80 e0       	ldi	r24, 0x00	; 0
    58ac:	0e 94 41 29 	call	0x5282	; 0x5282 <print_menu_frame>
    58b0:	4f 2c       	mov	r4, r15
    58b2:	51 2c       	mov	r5, r1
    58b4:	69 85       	ldd	r22, Y+9	; 0x09
    58b6:	86 2f       	mov	r24, r22
    58b8:	90 e0       	ldi	r25, 0x00	; 0
    58ba:	53 01       	movw	r10, r6
    58bc:	25 e0       	ldi	r18, 0x05	; 5
    58be:	62 9f       	mul	r22, r18
    58c0:	a0 18       	sub	r10, r0
    58c2:	b1 08       	sbc	r11, r1
    58c4:	11 24       	eor	r1, r1
    58c6:	35 e0       	ldi	r19, 0x05	; 5
    58c8:	f3 9e       	mul	r15, r19
    58ca:	a0 0c       	add	r10, r0
    58cc:	b1 1c       	adc	r11, r1
    58ce:	11 24       	eor	r1, r1
    58d0:	21 2c       	mov	r2, r1
    58d2:	31 2c       	mov	r3, r1
    58d4:	e1 2c       	mov	r14, r1
    58d6:	f1 2c       	mov	r15, r1
    58d8:	c8 1a       	sub	r12, r24
    58da:	d9 0a       	sbc	r13, r25
    58dc:	c4 0c       	add	r12, r4
    58de:	d5 1c       	adc	r13, r5
    58e0:	f2 01       	movw	r30, r4
    58e2:	e8 1b       	sub	r30, r24
    58e4:	f9 0b       	sbc	r31, r25
    58e6:	8e 0e       	add	r8, r30
    58e8:	9f 1e       	adc	r9, r31
    58ea:	87 01       	movw	r16, r14
    58ec:	04 57       	subi	r16, 0x74	; 116
    58ee:	18 4e       	sbci	r17, 0xE8	; 232
	
	// Print each line
	for (uint8_t i = 0; i < 4; i++)
	{
		LCD_Display_Text(top+i,(const unsigned char*)Verdana8,ITEMOFFSET,(uint8_t)pgm_read_byte(&lines[i]));
    58f0:	f8 01       	movw	r30, r16
    58f2:	24 91       	lpm	r18, Z
    58f4:	30 e0       	ldi	r19, 0x00	; 0
    58f6:	4a e0       	ldi	r20, 0x0A	; 10
    58f8:	50 e0       	ldi	r21, 0x00	; 0
    58fa:	67 ef       	ldi	r22, 0xF7	; 247
    58fc:	79 e0       	ldi	r23, 0x09	; 9
    58fe:	c7 01       	movw	r24, r14
    5900:	84 0d       	add	r24, r4
    5902:	95 1d       	adc	r25, r5
    5904:	0e 94 a0 1d 	call	0x3b40	; 0x3b40 <LCD_Display_Text>

		// Handle unique or copied ranges (to reduce space)
		if (rangetype == 0)
    5908:	fe 81       	ldd	r31, Y+6	; 0x06
		{
			// Use each unique entry
			memcpy_P(&range1, &menu_ranges[(top+i - start)* sizeof(range1)], sizeof(range1));
    590a:	45 e0       	ldi	r20, 0x05	; 5
    590c:	50 e0       	ldi	r21, 0x00	; 0
	for (uint8_t i = 0; i < 4; i++)
	{
		LCD_Display_Text(top+i,(const unsigned char*)Verdana8,ITEMOFFSET,(uint8_t)pgm_read_byte(&lines[i]));

		// Handle unique or copied ranges (to reduce space)
		if (rangetype == 0)
    590e:	f1 11       	cpse	r31, r1
    5910:	04 c0       	rjmp	.+8      	; 0x591a <print_menu_items+0x92>
		{
			// Use each unique entry
			memcpy_P(&range1, &menu_ranges[(top+i - start)* sizeof(range1)], sizeof(range1));
    5912:	b1 01       	movw	r22, r2
    5914:	6a 0d       	add	r22, r10
    5916:	7b 1d       	adc	r23, r11
    5918:	01 c0       	rjmp	.+2      	; 0x591c <print_menu_items+0x94>
		}
		else
		{
			// Use just the first entry in array for all 
			memcpy_P(&range1, &menu_ranges[0], sizeof(range1));
    591a:	b3 01       	movw	r22, r6
    591c:	ce 01       	movw	r24, r28
    591e:	01 96       	adiw	r24, 0x01	; 1
    5920:	0e 94 fb 41 	call	0x83f6	; 0x83f6 <memcpy_P>
		}

		print_menu_text((values[top+i - start]), range1.style, (pgm_read_byte(&text_link[top+i - start]) + values[top+i - start]), MenuOffsets, (uint8_t)pgm_read_byte(&lines[i]));
    5924:	f8 01       	movw	r30, r16
    5926:	04 91       	lpm	r16, Z
    5928:	f6 01       	movw	r30, r12
    592a:	ee 0d       	add	r30, r14
    592c:	ff 1d       	adc	r31, r15
    592e:	44 91       	lpm	r20, Z
    5930:	d4 01       	movw	r26, r8
    5932:	ae 0d       	add	r26, r14
    5934:	bf 1d       	adc	r27, r15
    5936:	8c 91       	ld	r24, X
    5938:	48 0f       	add	r20, r24
    593a:	2f 81       	ldd	r18, Y+7	; 0x07
    593c:	6c 81       	ldd	r22, Y+4	; 0x04
    593e:	99 27       	eor	r25, r25
    5940:	87 fd       	sbrc	r24, 7
    5942:	90 95       	com	r25
    5944:	0e 94 bf 29 	call	0x537e	; 0x537e <print_menu_text>
    5948:	ff ef       	ldi	r31, 0xFF	; 255
    594a:	ef 1a       	sub	r14, r31
    594c:	ff 0a       	sbc	r15, r31
    594e:	25 e0       	ldi	r18, 0x05	; 5
    5950:	22 0e       	add	r2, r18
    5952:	31 1c       	adc	r3, r1
	// Clear buffer before each update
	clear_buffer(buffer);
	print_menu_frame(0);
	
	// Print each line
	for (uint8_t i = 0; i < 4; i++)
    5954:	34 e0       	ldi	r19, 0x04	; 4
    5956:	e3 16       	cp	r14, r19
    5958:	f1 04       	cpc	r15, r1
    595a:	09 f0       	breq	.+2      	; 0x595e <print_menu_items+0xd6>
    595c:	c6 cf       	rjmp	.-116    	; 0x58ea <print_menu_items+0x62>
		}

		print_menu_text((values[top+i - start]), range1.style, (pgm_read_byte(&text_link[top+i - start]) + values[top+i - start]), MenuOffsets, (uint8_t)pgm_read_byte(&lines[i]));
	}

	print_cursor(cursor);	// Cursor
    595e:	88 85       	ldd	r24, Y+8	; 0x08
    5960:	0e 94 39 2c 	call	0x5872	; 0x5872 <print_cursor>
	write_buffer(buffer,1);
    5964:	61 e0       	ldi	r22, 0x01	; 1
    5966:	80 e0       	ldi	r24, 0x00	; 0
    5968:	91 e0       	ldi	r25, 0x01	; 1
    596a:	0e 94 c9 1b 	call	0x3792	; 0x3792 <write_buffer>
	poll_buttons(true);
    596e:	81 e0       	ldi	r24, 0x01	; 1
    5970:	0e 94 e2 29 	call	0x53c4	; 0x53c4 <poll_buttons>
}
    5974:	29 96       	adiw	r28, 0x09	; 9
    5976:	e2 e1       	ldi	r30, 0x12	; 18
    5978:	0c 94 e0 41 	jmp	0x83c0	; 0x83c0 <__epilogue_restores__>

0000597c <menu_flight>:
//************************************************************
// Main menu-specific setup
//************************************************************

void menu_flight(uint8_t mode)
{
    597c:	6f 92       	push	r6
    597e:	7f 92       	push	r7
    5980:	8f 92       	push	r8
    5982:	af 92       	push	r10
    5984:	cf 92       	push	r12
    5986:	df 92       	push	r13
    5988:	ef 92       	push	r14
    598a:	ff 92       	push	r15
    598c:	0f 93       	push	r16
    598e:	1f 93       	push	r17
    5990:	cf 93       	push	r28
    5992:	df 93       	push	r29
    5994:	00 d0       	rcall	.+0      	; 0x5996 <menu_flight+0x1a>
    5996:	00 d0       	rcall	.+0      	; 0x5998 <menu_flight+0x1c>
    5998:	1f 92       	push	r1
    599a:	cd b7       	in	r28, 0x3d	; 61
    599c:	de b7       	in	r29, 0x3e	; 62
	int8_t *value_ptr;
	menu_range_t range;
	uint8_t text_link;

	// If sub-menu item has changed, reset sub-menu positions
	if (menu_flag)
    599e:	90 91 e3 07 	lds	r25, 0x07E3
    59a2:	99 23       	and	r25, r25
    59a4:	29 f0       	breq	.+10     	; 0x59b0 <menu_flight+0x34>
	{
		sub_top = FLIGHTSTART;
    59a6:	9a ea       	ldi	r25, 0xAA	; 170
    59a8:	90 93 2b 05 	sts	0x052B, r25
		menu_flag = 0;
    59ac:	10 92 e3 07 	sts	0x07E3, r1
	}

	while(button != BACK)
	{
		value_ptr = &Config.FlightMode[mode].Roll_P_mult;
    59b0:	92 e1       	ldi	r25, 0x12	; 18
    59b2:	89 9f       	mul	r24, r25
    59b4:	30 01       	movw	r6, r0
    59b6:	11 24       	eor	r1, r1
    59b8:	c3 01       	movw	r24, r6
    59ba:	85 52       	subi	r24, 0x25	; 37
    59bc:	9a 4f       	sbci	r25, 0xFA	; 250
    59be:	3c 01       	movw	r6, r24
	{
		sub_top = FLIGHTSTART;
		menu_flag = 0;
	}

	while(button != BACK)
    59c0:	80 91 e1 07 	lds	r24, 0x07E1
    59c4:	80 37       	cpi	r24, 0x70	; 112
    59c6:	09 f4       	brne	.+2      	; 0x59ca <menu_flight+0x4e>
    59c8:	59 c0       	rjmp	.+178    	; 0x5a7c <menu_flight+0x100>
	{
		value_ptr = &Config.FlightMode[mode].Roll_P_mult;

		// Print menu
		print_menu_items(sub_top, FLIGHTSTART, value_ptr, (const unsigned char*)flight_menu_ranges, 0, FLIGHTOFFSET, (const unsigned char*)FlightMenuText, cursor);
    59ca:	a0 90 04 05 	lds	r10, 0x0504
    59ce:	8a ee       	ldi	r24, 0xEA	; 234
    59d0:	c8 2e       	mov	r12, r24
    59d2:	87 e1       	ldi	r24, 0x17	; 23
    59d4:	d8 2e       	mov	r13, r24
    59d6:	9f e4       	ldi	r25, 0x4F	; 79
    59d8:	e9 2e       	mov	r14, r25
    59da:	00 e0       	ldi	r16, 0x00	; 0
    59dc:	20 e9       	ldi	r18, 0x90	; 144
    59de:	37 e1       	ldi	r19, 0x17	; 23
    59e0:	a3 01       	movw	r20, r6
    59e2:	6a ea       	ldi	r22, 0xAA	; 170
    59e4:	80 91 2b 05 	lds	r24, 0x052B
    59e8:	0e 94 44 2c 	call	0x5888	; 0x5888 <print_menu_items>

		// Handle menu changes
		update_menu(FLIGHTITEMS, FLIGHTSTART, 0, button, &cursor, &sub_top, &menu_temp);
    59ec:	26 e2       	ldi	r18, 0x26	; 38
    59ee:	c2 2e       	mov	r12, r18
    59f0:	25 e0       	ldi	r18, 0x05	; 5
    59f2:	d2 2e       	mov	r13, r18
    59f4:	3b e2       	ldi	r19, 0x2B	; 43
    59f6:	e3 2e       	mov	r14, r19
    59f8:	35 e0       	ldi	r19, 0x05	; 5
    59fa:	f3 2e       	mov	r15, r19
    59fc:	04 e0       	ldi	r16, 0x04	; 4
    59fe:	15 e0       	ldi	r17, 0x05	; 5
    5a00:	20 91 e1 07 	lds	r18, 0x07E1
    5a04:	40 e0       	ldi	r20, 0x00	; 0
    5a06:	6a ea       	ldi	r22, 0xAA	; 170
    5a08:	82 e1       	ldi	r24, 0x12	; 18
    5a0a:	0e 94 8e 2b 	call	0x571c	; 0x571c <update_menu>
		range = get_menu_range ((const unsigned char*)flight_menu_ranges, (menu_temp - FLIGHTSTART));
    5a0e:	60 91 26 05 	lds	r22, 0x0526
    5a12:	6a 5a       	subi	r22, 0xAA	; 170
    5a14:	80 e9       	ldi	r24, 0x90	; 144
    5a16:	97 e1       	ldi	r25, 0x17	; 23
    5a18:	0e 94 98 29 	call	0x5330	; 0x5330 <get_menu_range>
    5a1c:	29 83       	std	Y+1, r18	; 0x01
    5a1e:	3a 83       	std	Y+2, r19	; 0x02
    5a20:	4b 83       	std	Y+3, r20	; 0x03
    5a22:	5c 83       	std	Y+4, r21	; 0x04
    5a24:	6d 83       	std	Y+5, r22	; 0x05

		if (button == ENTER)
    5a26:	80 91 e1 07 	lds	r24, 0x07E1
    5a2a:	80 3e       	cpi	r24, 0xE0	; 224
    5a2c:	d9 f4       	brne	.+54     	; 0x5a64 <menu_flight+0xe8>
		{
			text_link = pgm_read_byte(&FlightMenuText[menu_temp - FLIGHTSTART]);
    5a2e:	80 91 26 05 	lds	r24, 0x0526
    5a32:	90 91 27 05 	lds	r25, 0x0527
    5a36:	bc 01       	movw	r22, r24
    5a38:	6a 5a       	subi	r22, 0xAA	; 170
    5a3a:	71 09       	sbc	r23, r1
    5a3c:	fb 01       	movw	r30, r22
    5a3e:	e6 51       	subi	r30, 0x16	; 22
    5a40:	f8 4e       	sbci	r31, 0xE8	; 232
    5a42:	a4 90       	lpm	r10, Z
			do_menu_item(menu_temp, value_ptr + (menu_temp - FLIGHTSTART), 1, range, 0, text_link, false, 0);
    5a44:	66 0d       	add	r22, r6
    5a46:	77 1d       	adc	r23, r7
    5a48:	1f 92       	push	r1
    5a4a:	1f 92       	push	r1
    5a4c:	81 2c       	mov	r8, r1
    5a4e:	c1 2c       	mov	r12, r1
    5a50:	e9 80       	ldd	r14, Y+1	; 0x01
    5a52:	fa 80       	ldd	r15, Y+2	; 0x02
    5a54:	0b 81       	ldd	r16, Y+3	; 0x03
    5a56:	1c 81       	ldd	r17, Y+4	; 0x04
    5a58:	2d 81       	ldd	r18, Y+5	; 0x05
    5a5a:	41 e0       	ldi	r20, 0x01	; 1
    5a5c:	0e 94 17 2a 	call	0x542e	; 0x542e <do_menu_item>
    5a60:	0f 90       	pop	r0
    5a62:	0f 90       	pop	r0
		}

		// Update limits when exiting
		if (button == ENTER)
    5a64:	80 91 e1 07 	lds	r24, 0x07E1
    5a68:	80 3e       	cpi	r24, 0xE0	; 224
    5a6a:	09 f0       	breq	.+2      	; 0x5a6e <menu_flight+0xf2>
    5a6c:	a9 cf       	rjmp	.-174    	; 0x59c0 <menu_flight+0x44>
		{
			UpdateLimits();			 // Update I-term limits and triggers based on percentages
    5a6e:	0e 94 29 30 	call	0x6052	; 0x6052 <UpdateLimits>
			Save_Config_to_EEPROM(); // Save value and return
    5a72:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <Save_Config_to_EEPROM>
			Wait_BUTTON4();			 // Wait for user's finger off the button
    5a76:	0e 94 0f 2e 	call	0x5c1e	; 0x5c1e <Wait_BUTTON4>
    5a7a:	a2 cf       	rjmp	.-188    	; 0x59c0 <menu_flight+0x44>
		}
	}
}
    5a7c:	0f 90       	pop	r0
    5a7e:	0f 90       	pop	r0
    5a80:	0f 90       	pop	r0
    5a82:	0f 90       	pop	r0
    5a84:	0f 90       	pop	r0
    5a86:	df 91       	pop	r29
    5a88:	cf 91       	pop	r28
    5a8a:	1f 91       	pop	r17
    5a8c:	0f 91       	pop	r16
    5a8e:	ff 90       	pop	r15
    5a90:	ef 90       	pop	r14
    5a92:	df 90       	pop	r13
    5a94:	cf 90       	pop	r12
    5a96:	af 90       	pop	r10
    5a98:	8f 90       	pop	r8
    5a9a:	7f 90       	pop	r7
    5a9c:	6f 90       	pop	r6
    5a9e:	08 95       	ret

00005aa0 <do_main_menu_item>:
	}
}

void do_main_menu_item(uint8_t menuitem)
{
	switch(menuitem) 
    5aa0:	90 e0       	ldi	r25, 0x00	; 0
    5aa2:	fc 01       	movw	r30, r24
    5aa4:	ed 54       	subi	r30, 0x4D	; 77
    5aa6:	f1 09       	sbc	r31, r1
    5aa8:	e3 31       	cpi	r30, 0x13	; 19
    5aaa:	f1 05       	cpc	r31, r1
    5aac:	a8 f5       	brcc	.+106    	; 0x5b18 <do_main_menu_item+0x78>
    5aae:	e2 5c       	subi	r30, 0xC2	; 194
    5ab0:	ff 4f       	sbci	r31, 0xFF	; 255
    5ab2:	0c 94 8d 41 	jmp	0x831a	; 0x831a <__tablejump2__>
	{
		case MAINSTART:
			menu_rc_setup(2); 		// 1.General
    5ab6:	82 e0       	ldi	r24, 0x02	; 2
    5ab8:	01 c0       	rjmp	.+2      	; 0x5abc <do_main_menu_item+0x1c>
			break;
		case MAINSTART+1:
			menu_rc_setup(1); 		// 2.RX setup	
    5aba:	81 e0       	ldi	r24, 0x01	; 1
    5abc:	0e 94 69 2f 	call	0x5ed2	; 0x5ed2 <menu_rc_setup>
			break;
    5ac0:	08 95       	ret
		case MAINSTART+2:
			Display_rcinput();		// 3.RX inputs
    5ac2:	0e 94 59 11 	call	0x22b2	; 0x22b2 <Display_rcinput>
			break;
    5ac6:	08 95       	ret
		case MAINSTART+3:
			Display_sticks(); 		// 4.Stick polarity	
    5ac8:	0e 94 01 15 	call	0x2a02	; 0x2a02 <Display_sticks>
			break;
    5acc:	08 95       	ret
		case MAINSTART+4:
			Display_sensors();		// 5.Sensor calibration
    5ace:	0e 94 57 12 	call	0x24ae	; 0x24ae <Display_sensors>
			break;
    5ad2:	08 95       	ret
		case MAINSTART+5:
			Display_balance();		// 6.Level meter
    5ad4:	0e 94 c4 10 	call	0x2188	; 0x2188 <Display_balance>
			break;
    5ad8:	08 95       	ret
		case MAINSTART+6:
			menu_flight(0);			// 7.Flight profile 1
    5ada:	80 e0       	ldi	r24, 0x00	; 0
    5adc:	01 c0       	rjmp	.+2      	; 0x5ae0 <do_main_menu_item+0x40>
			break;
		case MAINSTART+7:
			menu_flight(1); 		// 8.Flight profile 2
    5ade:	81 e0       	ldi	r24, 0x01	; 1
    5ae0:	0e 94 be 2c 	call	0x597c	; 0x597c <menu_flight>
			break;
    5ae4:	08 95       	ret
		case MAINSTART+8:
			menu_mixer(0);			// 9.OUT1 Mixer
    5ae6:	80 e0       	ldi	r24, 0x00	; 0
    5ae8:	0d c0       	rjmp	.+26     	; 0x5b04 <do_main_menu_item+0x64>
			break;
		case MAINSTART+9:
			menu_mixer(1);			// 10.OUT2 Mixer
    5aea:	81 e0       	ldi	r24, 0x01	; 1
    5aec:	0b c0       	rjmp	.+22     	; 0x5b04 <do_main_menu_item+0x64>
			break;
		case MAINSTART+10:
			menu_mixer(2);			// 11.OUT3 Mixer
    5aee:	82 e0       	ldi	r24, 0x02	; 2
    5af0:	09 c0       	rjmp	.+18     	; 0x5b04 <do_main_menu_item+0x64>
			break;
		case MAINSTART+11:
			menu_mixer(3);			// 12.OUT4 Mixer
    5af2:	83 e0       	ldi	r24, 0x03	; 3
    5af4:	07 c0       	rjmp	.+14     	; 0x5b04 <do_main_menu_item+0x64>
			break;
		case MAINSTART+12:
			menu_mixer(4);			// 13.OUT5 Mixer
    5af6:	84 e0       	ldi	r24, 0x04	; 4
    5af8:	05 c0       	rjmp	.+10     	; 0x5b04 <do_main_menu_item+0x64>
			break;
		case MAINSTART+13:
			menu_mixer(5);			// 14.OUT6 Mixer
    5afa:	85 e0       	ldi	r24, 0x05	; 5
    5afc:	03 c0       	rjmp	.+6      	; 0x5b04 <do_main_menu_item+0x64>
			break;
		case MAINSTART+14:
			menu_mixer(6);			// 15.OUT7 Mixer
    5afe:	86 e0       	ldi	r24, 0x06	; 6
    5b00:	01 c0       	rjmp	.+2      	; 0x5b04 <do_main_menu_item+0x64>
			break;
		case MAINSTART+15:
			menu_mixer(7);			// 16.OUT8 Mixer
    5b02:	87 e0       	ldi	r24, 0x07	; 7
    5b04:	0e 94 1c 2e 	call	0x5c38	; 0x5c38 <menu_mixer>
			break;
    5b08:	08 95       	ret
		case MAINSTART+16:
			menu_servo_setup(1);	// 17.Servo direction
    5b0a:	81 e0       	ldi	r24, 0x01	; 1
    5b0c:	03 c0       	rjmp	.+6      	; 0x5b14 <do_main_menu_item+0x74>
			break;
		case MAINSTART+17:
			menu_servo_setup(2); 	// 18.Neg. Servo trvl. (%)
    5b0e:	82 e0       	ldi	r24, 0x02	; 2
    5b10:	01 c0       	rjmp	.+2      	; 0x5b14 <do_main_menu_item+0x74>
			break;
		case MAINSTART+18:
			menu_servo_setup(3); 	// 19.Pos. Servo trvl. (%)
    5b12:	83 e0       	ldi	r24, 0x03	; 3
    5b14:	0e 94 ae 2e 	call	0x5d5c	; 0x5d5c <menu_servo_setup>
    5b18:	08 95       	ret

00005b1a <Wait_BUTTON1>:
	} // Switch
}

void Wait_BUTTON1(void)
{
	while(BUTTON1 == 0)
    5b1a:	1f 99       	sbic	0x03, 7	; 3
    5b1c:	0a c0       	rjmp	.+20     	; 0x5b32 <Wait_BUTTON1+0x18>
    5b1e:	2f e3       	ldi	r18, 0x3F	; 63
    5b20:	8d e0       	ldi	r24, 0x0D	; 13
    5b22:	93 e0       	ldi	r25, 0x03	; 3
    5b24:	21 50       	subi	r18, 0x01	; 1
    5b26:	80 40       	sbci	r24, 0x00	; 0
    5b28:	90 40       	sbci	r25, 0x00	; 0
    5b2a:	e1 f7       	brne	.-8      	; 0x5b24 <Wait_BUTTON1+0xa>
    5b2c:	00 c0       	rjmp	.+0      	; 0x5b2e <Wait_BUTTON1+0x14>
    5b2e:	00 00       	nop
    5b30:	f4 cf       	rjmp	.-24     	; 0x5b1a <Wait_BUTTON1>
	{
		_delay_ms(50);
	}
}
    5b32:	08 95       	ret

00005b34 <menu_main>:
uint8_t main_top = MAINSTART;
uint8_t sub_top = 0;
uint8_t menu_flag;

void menu_main(void)
{
    5b34:	a0 e0       	ldi	r26, 0x00	; 0
    5b36:	b0 e0       	ldi	r27, 0x00	; 0
    5b38:	e0 ea       	ldi	r30, 0xA0	; 160
    5b3a:	fd e2       	ldi	r31, 0x2D	; 45
    5b3c:	0c 94 cc 41 	jmp	0x8398	; 0x8398 <__prologue_saves__+0x10>
	static uint8_t main_cursor = LINE0;	// These are now static so as to remember the main menu position
	static uint16_t main_temp = 0;
	static uint8_t old_menu = 0;

	button = NONE;
    5b40:	80 ef       	ldi	r24, 0xF0	; 240
    5b42:	80 93 e1 07 	sts	0x07E1, r24

	// Wait until user's finger is off button 1
	Wait_BUTTON1();
    5b46:	0e 94 8d 2d 	call	0x5b1a	; 0x5b1a <Wait_BUTTON1>

		// If main menu item has changed, reset sub-menu positions
		// and flag to sub-menus that positions need to be reset
		if (main_temp != old_menu)
		{
			cursor = LINE0;
    5b4a:	23 e0       	ldi	r18, 0x03	; 3
    5b4c:	b2 2e       	mov	r11, r18

		// If ENTER pressed, jump to menu 
		if (button == ENTER)
		{
			do_main_menu_item(main_temp);
			button = NONE;
    5b4e:	30 ef       	ldi	r19, 0xF0	; 240
    5b50:	a3 2e       	mov	r10, r19
	button = NONE;

	// Wait until user's finger is off button 1
	Wait_BUTTON1();
	
	while(button != BACK)
    5b52:	80 91 e1 07 	lds	r24, 0x07E1
    5b56:	80 37       	cpi	r24, 0x70	; 112
    5b58:	09 f4       	brne	.+2      	; 0x5b5c <menu_main+0x28>
    5b5a:	5c c0       	rjmp	.+184    	; 0x5c14 <menu_main+0xe0>
	{
		// Clear buffer before each update
		clear_buffer(buffer);	
    5b5c:	80 e0       	ldi	r24, 0x00	; 0
    5b5e:	91 e0       	ldi	r25, 0x01	; 1
    5b60:	0e 94 f7 1b 	call	0x37ee	; 0x37ee <clear_buffer>

		// Print menu
		print_menu_frame(0);													// Frame
    5b64:	80 e0       	ldi	r24, 0x00	; 0
    5b66:	0e 94 41 29 	call	0x5282	; 0x5282 <print_menu_frame>
    5b6a:	c0 e0       	ldi	r28, 0x00	; 0
    5b6c:	d0 e0       	ldi	r29, 0x00	; 0
    5b6e:	fe 01       	movw	r30, r28
    5b70:	e4 57       	subi	r30, 0x74	; 116
    5b72:	f8 4e       	sbci	r31, 0xE8	; 232
		
		for (uint8_t i = 0; i < 4; i++)
		{
			LCD_Display_Text(main_top+i,(const unsigned char*)Verdana8,ITEMOFFSET,(uint8_t)pgm_read_byte(&lines[i]));	// Lines
    5b74:	24 91       	lpm	r18, Z
    5b76:	30 e0       	ldi	r19, 0x00	; 0
    5b78:	80 91 06 05 	lds	r24, 0x0506
    5b7c:	4a e0       	ldi	r20, 0x0A	; 10
    5b7e:	50 e0       	ldi	r21, 0x00	; 0
    5b80:	67 ef       	ldi	r22, 0xF7	; 247
    5b82:	79 e0       	ldi	r23, 0x09	; 9
    5b84:	fe 01       	movw	r30, r28
    5b86:	e8 0f       	add	r30, r24
    5b88:	f1 1d       	adc	r31, r1
    5b8a:	cf 01       	movw	r24, r30
    5b8c:	0e 94 a0 1d 	call	0x3b40	; 0x3b40 <LCD_Display_Text>
    5b90:	21 96       	adiw	r28, 0x01	; 1
		clear_buffer(buffer);	

		// Print menu
		print_menu_frame(0);													// Frame
		
		for (uint8_t i = 0; i < 4; i++)
    5b92:	c4 30       	cpi	r28, 0x04	; 4
    5b94:	d1 05       	cpc	r29, r1
    5b96:	59 f7       	brne	.-42     	; 0x5b6e <menu_main+0x3a>
		{
			LCD_Display_Text(main_top+i,(const unsigned char*)Verdana8,ITEMOFFSET,(uint8_t)pgm_read_byte(&lines[i]));	// Lines
		}

		print_cursor(main_cursor);												// Cursor
    5b98:	80 91 05 05 	lds	r24, 0x0505
    5b9c:	0e 94 39 2c 	call	0x5872	; 0x5872 <print_cursor>
		write_buffer(buffer,1);
    5ba0:	61 e0       	ldi	r22, 0x01	; 1
    5ba2:	80 e0       	ldi	r24, 0x00	; 0
    5ba4:	91 e0       	ldi	r25, 0x01	; 1
    5ba6:	0e 94 c9 1b 	call	0x3792	; 0x3792 <write_buffer>

		// Poll buttons when idle
		poll_buttons(true);
    5baa:	81 e0       	ldi	r24, 0x01	; 1
    5bac:	0e 94 e2 29 	call	0x53c4	; 0x53c4 <poll_buttons>

		// Handle menu changes
		update_menu(MAINITEMS, MAINSTART, 0, button, &main_cursor, &main_top, &main_temp);
    5bb0:	89 e2       	ldi	r24, 0x29	; 41
    5bb2:	c8 2e       	mov	r12, r24
    5bb4:	85 e0       	ldi	r24, 0x05	; 5
    5bb6:	d8 2e       	mov	r13, r24
    5bb8:	96 e0       	ldi	r25, 0x06	; 6
    5bba:	e9 2e       	mov	r14, r25
    5bbc:	95 e0       	ldi	r25, 0x05	; 5
    5bbe:	f9 2e       	mov	r15, r25
    5bc0:	05 e0       	ldi	r16, 0x05	; 5
    5bc2:	15 e0       	ldi	r17, 0x05	; 5
    5bc4:	20 91 e1 07 	lds	r18, 0x07E1
    5bc8:	40 e0       	ldi	r20, 0x00	; 0
    5bca:	6d e4       	ldi	r22, 0x4D	; 77
    5bcc:	83 e1       	ldi	r24, 0x13	; 19
    5bce:	0e 94 8e 2b 	call	0x571c	; 0x571c <update_menu>

		// If main menu item has changed, reset sub-menu positions
		// and flag to sub-menus that positions need to be reset
		if (main_temp != old_menu)
    5bd2:	80 91 29 05 	lds	r24, 0x0529
    5bd6:	90 91 2a 05 	lds	r25, 0x052A
    5bda:	20 91 28 05 	lds	r18, 0x0528
    5bde:	30 e0       	ldi	r19, 0x00	; 0
    5be0:	82 17       	cp	r24, r18
    5be2:	93 07       	cpc	r25, r19
    5be4:	59 f0       	breq	.+22     	; 0x5bfc <menu_main+0xc8>
		{
			cursor = LINE0;
    5be6:	b0 92 04 05 	sts	0x0504, r11
			menu_temp = 0;
    5bea:	10 92 27 05 	sts	0x0527, r1
    5bee:	10 92 26 05 	sts	0x0526, r1
			old_menu = main_temp;
    5bf2:	80 93 28 05 	sts	0x0528, r24
			menu_flag = 1;
    5bf6:	21 e0       	ldi	r18, 0x01	; 1
    5bf8:	20 93 e3 07 	sts	0x07E3, r18
		}

		// If ENTER pressed, jump to menu 
		if (button == ENTER)
    5bfc:	20 91 e1 07 	lds	r18, 0x07E1
    5c00:	20 3e       	cpi	r18, 0xE0	; 224
    5c02:	09 f0       	breq	.+2      	; 0x5c06 <menu_main+0xd2>
    5c04:	a6 cf       	rjmp	.-180    	; 0x5b52 <menu_main+0x1e>
		{
			do_main_menu_item(main_temp);
    5c06:	0e 94 50 2d 	call	0x5aa0	; 0x5aa0 <do_main_menu_item>
			button = NONE;
    5c0a:	a0 92 e1 07 	sts	0x07E1, r10

			// Wait until user's finger is off button 1
			Wait_BUTTON1();
    5c0e:	0e 94 8d 2d 	call	0x5b1a	; 0x5b1a <Wait_BUTTON1>
    5c12:	9f cf       	rjmp	.-194    	; 0x5b52 <menu_main+0x1e>
		}
	}
}
    5c14:	cd b7       	in	r28, 0x3d	; 61
    5c16:	de b7       	in	r29, 0x3e	; 62
    5c18:	ea e0       	ldi	r30, 0x0A	; 10
    5c1a:	0c 94 e8 41 	jmp	0x83d0	; 0x83d0 <__epilogue_restores__+0x10>

00005c1e <Wait_BUTTON4>:
	}
}

void Wait_BUTTON4(void)
{
	while(BUTTON4 == 0)
    5c1e:	1c 99       	sbic	0x03, 4	; 3
    5c20:	0a c0       	rjmp	.+20     	; 0x5c36 <Wait_BUTTON4+0x18>
    5c22:	2f e3       	ldi	r18, 0x3F	; 63
    5c24:	8d e0       	ldi	r24, 0x0D	; 13
    5c26:	93 e0       	ldi	r25, 0x03	; 3
    5c28:	21 50       	subi	r18, 0x01	; 1
    5c2a:	80 40       	sbci	r24, 0x00	; 0
    5c2c:	90 40       	sbci	r25, 0x00	; 0
    5c2e:	e1 f7       	brne	.-8      	; 0x5c28 <Wait_BUTTON4+0xa>
    5c30:	00 c0       	rjmp	.+0      	; 0x5c32 <Wait_BUTTON4+0x14>
    5c32:	00 00       	nop
    5c34:	f4 cf       	rjmp	.-24     	; 0x5c1e <Wait_BUTTON4>
	{
		_delay_ms(50);
	}
    5c36:	08 95       	ret

00005c38 <menu_mixer>:
//************************************************************
// Main menu-specific setup
//************************************************************

void menu_mixer(uint8_t i)
{
    5c38:	6f 92       	push	r6
    5c3a:	7f 92       	push	r7
    5c3c:	8f 92       	push	r8
    5c3e:	af 92       	push	r10
    5c40:	cf 92       	push	r12
    5c42:	df 92       	push	r13
    5c44:	ef 92       	push	r14
    5c46:	ff 92       	push	r15
    5c48:	0f 93       	push	r16
    5c4a:	1f 93       	push	r17
    5c4c:	cf 93       	push	r28
    5c4e:	df 93       	push	r29
    5c50:	00 d0       	rcall	.+0      	; 0x5c52 <menu_mixer+0x1a>
    5c52:	00 d0       	rcall	.+0      	; 0x5c54 <menu_mixer+0x1c>
    5c54:	1f 92       	push	r1
    5c56:	cd b7       	in	r28, 0x3d	; 61
    5c58:	de b7       	in	r29, 0x3e	; 62
	int8_t *value_ptr;
	menu_range_t range;
	uint8_t text_link = 0;

	// If sub-menu item has changed, reset sub-menu positions
	if (menu_flag)
    5c5a:	90 91 e3 07 	lds	r25, 0x07E3
    5c5e:	99 23       	and	r25, r25
    5c60:	29 f0       	breq	.+10     	; 0x5c6c <menu_mixer+0x34>
	{
		sub_top = MIXERSTART;
    5c62:	9e eb       	ldi	r25, 0xBE	; 190
    5c64:	90 93 2b 05 	sts	0x052B, r25
		menu_flag = 0;
    5c68:	10 92 e3 07 	sts	0x07E3, r1
	}

	while(button != BACK)
	{
		value_ptr = &Config.Channel[i].Motor_marker;
    5c6c:	96 e2       	ldi	r25, 0x26	; 38
    5c6e:	89 9f       	mul	r24, r25
    5c70:	30 01       	movw	r6, r0
    5c72:	11 24       	eor	r1, r1
    5c74:	c3 01       	movw	r24, r6
    5c76:	81 5c       	subi	r24, 0xC1	; 193
    5c78:	99 4f       	sbci	r25, 0xF9	; 249
    5c7a:	3c 01       	movw	r6, r24
	{
		sub_top = MIXERSTART;
		menu_flag = 0;
	}

	while(button != BACK)
    5c7c:	80 91 e1 07 	lds	r24, 0x07E1
    5c80:	80 37       	cpi	r24, 0x70	; 112
    5c82:	09 f4       	brne	.+2      	; 0x5c86 <menu_mixer+0x4e>
    5c84:	59 c0       	rjmp	.+178    	; 0x5d38 <menu_mixer+0x100>
	{
		value_ptr = &Config.Channel[i].Motor_marker;

		// Print menu
		print_menu_items(sub_top, MIXERSTART, value_ptr, (const unsigned char*)mixer_menu_ranges, 0, MIXOFFSET, (const unsigned char*)MixerMenuText, cursor);
    5c86:	a0 90 04 05 	lds	r10, 0x0504
    5c8a:	86 ea       	ldi	r24, 0xA6	; 166
    5c8c:	c8 2e       	mov	r12, r24
    5c8e:	88 e1       	ldi	r24, 0x18	; 24
    5c90:	d8 2e       	mov	r13, r24
    5c92:	99 e5       	ldi	r25, 0x59	; 89
    5c94:	e9 2e       	mov	r14, r25
    5c96:	00 e0       	ldi	r16, 0x00	; 0
    5c98:	2c ef       	ldi	r18, 0xFC	; 252
    5c9a:	37 e1       	ldi	r19, 0x17	; 23
    5c9c:	a3 01       	movw	r20, r6
    5c9e:	6e eb       	ldi	r22, 0xBE	; 190
    5ca0:	80 91 2b 05 	lds	r24, 0x052B
    5ca4:	0e 94 44 2c 	call	0x5888	; 0x5888 <print_menu_items>

		// Handle menu changes
		update_menu(MIXERITEMS, MIXERSTART, 0, button, &cursor, &sub_top, &menu_temp);
    5ca8:	26 e2       	ldi	r18, 0x26	; 38
    5caa:	c2 2e       	mov	r12, r18
    5cac:	25 e0       	ldi	r18, 0x05	; 5
    5cae:	d2 2e       	mov	r13, r18
    5cb0:	3b e2       	ldi	r19, 0x2B	; 43
    5cb2:	e3 2e       	mov	r14, r19
    5cb4:	35 e0       	ldi	r19, 0x05	; 5
    5cb6:	f3 2e       	mov	r15, r19
    5cb8:	04 e0       	ldi	r16, 0x04	; 4
    5cba:	15 e0       	ldi	r17, 0x05	; 5
    5cbc:	20 91 e1 07 	lds	r18, 0x07E1
    5cc0:	40 e0       	ldi	r20, 0x00	; 0
    5cc2:	6e eb       	ldi	r22, 0xBE	; 190
    5cc4:	82 e2       	ldi	r24, 0x22	; 34
    5cc6:	0e 94 8e 2b 	call	0x571c	; 0x571c <update_menu>
		range = get_menu_range ((const unsigned char*)mixer_menu_ranges, menu_temp - MIXERSTART);
    5cca:	60 91 26 05 	lds	r22, 0x0526
    5cce:	6e 5b       	subi	r22, 0xBE	; 190
    5cd0:	8c ef       	ldi	r24, 0xFC	; 252
    5cd2:	97 e1       	ldi	r25, 0x17	; 23
    5cd4:	0e 94 98 29 	call	0x5330	; 0x5330 <get_menu_range>
    5cd8:	29 83       	std	Y+1, r18	; 0x01
    5cda:	3a 83       	std	Y+2, r19	; 0x02
    5cdc:	4b 83       	std	Y+3, r20	; 0x03
    5cde:	5c 83       	std	Y+4, r21	; 0x04
    5ce0:	6d 83       	std	Y+5, r22	; 0x05

		if (button == ENTER)
    5ce2:	80 91 e1 07 	lds	r24, 0x07E1
    5ce6:	80 3e       	cpi	r24, 0xE0	; 224
    5ce8:	d9 f4       	brne	.+54     	; 0x5d20 <menu_mixer+0xe8>
		{
			text_link = pgm_read_byte(&MixerMenuText[menu_temp - MIXERSTART]);
    5cea:	80 91 26 05 	lds	r24, 0x0526
    5cee:	90 91 27 05 	lds	r25, 0x0527
    5cf2:	bc 01       	movw	r22, r24
    5cf4:	6e 5b       	subi	r22, 0xBE	; 190
    5cf6:	71 09       	sbc	r23, r1
    5cf8:	fb 01       	movw	r30, r22
    5cfa:	ea 55       	subi	r30, 0x5A	; 90
    5cfc:	f7 4e       	sbci	r31, 0xE7	; 231
    5cfe:	a4 90       	lpm	r10, Z
			do_menu_item(menu_temp, value_ptr + (menu_temp - MIXERSTART), 1, range, 0, text_link, false, 0);
    5d00:	66 0d       	add	r22, r6
    5d02:	77 1d       	adc	r23, r7
    5d04:	1f 92       	push	r1
    5d06:	1f 92       	push	r1
    5d08:	81 2c       	mov	r8, r1
    5d0a:	c1 2c       	mov	r12, r1
    5d0c:	e9 80       	ldd	r14, Y+1	; 0x01
    5d0e:	fa 80       	ldd	r15, Y+2	; 0x02
    5d10:	0b 81       	ldd	r16, Y+3	; 0x03
    5d12:	1c 81       	ldd	r17, Y+4	; 0x04
    5d14:	2d 81       	ldd	r18, Y+5	; 0x05
    5d16:	41 e0       	ldi	r20, 0x01	; 1
    5d18:	0e 94 17 2a 	call	0x542e	; 0x542e <do_menu_item>
    5d1c:	0f 90       	pop	r0
    5d1e:	0f 90       	pop	r0
		}

		// Update limits when exiting
		if (button == ENTER)
    5d20:	80 91 e1 07 	lds	r24, 0x07E1
    5d24:	80 3e       	cpi	r24, 0xE0	; 224
    5d26:	09 f0       	breq	.+2      	; 0x5d2a <menu_mixer+0xf2>
    5d28:	a9 cf       	rjmp	.-174    	; 0x5c7c <menu_mixer+0x44>
		{
			UpdateLimits();			 // Update travel limits based on percentages
    5d2a:	0e 94 29 30 	call	0x6052	; 0x6052 <UpdateLimits>
			Save_Config_to_EEPROM(); // Save value and return
    5d2e:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <Save_Config_to_EEPROM>
			Wait_BUTTON4();			 // Wait for user's finger off the button
    5d32:	0e 94 0f 2e 	call	0x5c1e	; 0x5c1e <Wait_BUTTON4>
    5d36:	a2 cf       	rjmp	.-188    	; 0x5c7c <menu_mixer+0x44>
		}
	}
}
    5d38:	0f 90       	pop	r0
    5d3a:	0f 90       	pop	r0
    5d3c:	0f 90       	pop	r0
    5d3e:	0f 90       	pop	r0
    5d40:	0f 90       	pop	r0
    5d42:	df 91       	pop	r29
    5d44:	cf 91       	pop	r28
    5d46:	1f 91       	pop	r17
    5d48:	0f 91       	pop	r16
    5d4a:	ff 90       	pop	r15
    5d4c:	ef 90       	pop	r14
    5d4e:	df 90       	pop	r13
    5d50:	cf 90       	pop	r12
    5d52:	af 90       	pop	r10
    5d54:	8f 90       	pop	r8
    5d56:	7f 90       	pop	r7
    5d58:	6f 90       	pop	r6
    5d5a:	08 95       	ret

00005d5c <menu_servo_setup>:
//************************************************************
// Main menu-specific setup
//************************************************************

void menu_servo_setup(uint8_t section)
{
    5d5c:	a7 e0       	ldi	r26, 0x07	; 7
    5d5e:	b0 e0       	ldi	r27, 0x00	; 0
    5d60:	e4 eb       	ldi	r30, 0xB4	; 180
    5d62:	fe e2       	ldi	r31, 0x2E	; 46
    5d64:	0c 94 c4 41 	jmp	0x8388	; 0x8388 <__prologue_saves__>
    5d68:	b8 2e       	mov	r11, r24
	uint8_t i = 0;
	bool	servo_enable = false;
	bool	zero_setting = false;

	// If submenu item has changed, reset submenu positions
	if (menu_flag)
    5d6a:	80 91 e3 07 	lds	r24, 0x07E3
    5d6e:	88 23       	and	r24, r24
    5d70:	29 f0       	breq	.+10     	; 0x5d7c <menu_servo_setup+0x20>
	{
		sub_top = SERVOSTART;
    5d72:	86 ee       	ldi	r24, 0xE6	; 230
    5d74:	80 93 2b 05 	sts	0x052B, r24
		menu_flag = 0;
    5d78:	10 92 e3 07 	sts	0x07E3, r1
			}

			// Do not allow servo enable for throttle if in CPPM mode
			if ((Config.Channel[menu_temp - SERVOSTART].P1_source_a == THROTTLE) && (Config.RxMode == CPPM_MODE))
			{
				servo_enable = false;
    5d7c:	91 2c       	mov	r9, r1
    5d7e:	5b e6       	ldi	r21, 0x6B	; 107
    5d80:	65 2e       	mov	r6, r21
    5d82:	57 e0       	ldi	r21, 0x07	; 7
    5d84:	75 2e       	mov	r7, r21
					break;
			}
		}

		// Print menu
		print_menu_items(sub_top, SERVOSTART, value_ptr, (const unsigned char*)servo_menu_ranges[section - 1], 1, SERVOOFFSET, (const unsigned char*)ServoMenuText[section - 1], cursor);
    5d86:	2b 2c       	mov	r2, r11
    5d88:	31 2c       	mov	r3, r1
    5d8a:	81 e0       	ldi	r24, 0x01	; 1
    5d8c:	28 1a       	sub	r2, r24
    5d8e:	31 08       	sbc	r3, r1
    5d90:	85 e0       	ldi	r24, 0x05	; 5
    5d92:	82 9d       	mul	r24, r2
    5d94:	20 01       	movw	r4, r0
    5d96:	83 9d       	mul	r24, r3
    5d98:	50 0c       	add	r5, r0
    5d9a:	11 24       	eor	r1, r1
    5d9c:	f2 01       	movw	r30, r4
    5d9e:	e8 53       	subi	r30, 0x38	; 56
    5da0:	f7 4e       	sbci	r31, 0xE7	; 231
    5da2:	2f 01       	movw	r4, r30
    5da4:	63 e0       	ldi	r22, 0x03	; 3
    5da6:	22 0c       	add	r2, r2
    5da8:	33 1c       	adc	r3, r3
    5daa:	6a 95       	dec	r22
    5dac:	e1 f7       	brne	.-8      	; 0x5da6 <menu_servo_setup+0x4a>
    5dae:	c1 01       	movw	r24, r2
    5db0:	89 52       	subi	r24, 0x29	; 41
    5db2:	97 4e       	sbci	r25, 0xE7	; 231
    5db4:	9f 83       	std	Y+7, r25	; 0x07
    5db6:	8e 83       	std	Y+6, r24	; 0x06
		menu_flag = 0;
	}

	// Get menu offsets
	// 1 = Reverse, 2 = Min, 3 = Max
	while(button != BACK)
    5db8:	80 91 e1 07 	lds	r24, 0x07E1
    5dbc:	80 37       	cpi	r24, 0x70	; 112
    5dbe:	09 f4       	brne	.+2      	; 0x5dc2 <menu_servo_setup+0x66>
    5dc0:	84 c0       	rjmp	.+264    	; 0x5eca <menu_servo_setup+0x16e>
    5dc2:	88 e0       	ldi	r24, 0x08	; 8
    5dc4:	81 2c       	mov	r8, r1
	{
		// Load values from eeprom
		for (i = 0; i < SERVOITEMS; i++)
		{
			switch(section)
    5dc6:	92 e0       	ldi	r25, 0x02	; 2
    5dc8:	b9 16       	cp	r11, r25
    5dca:	61 f0       	breq	.+24     	; 0x5de4 <menu_servo_setup+0x88>
    5dcc:	e3 e0       	ldi	r30, 0x03	; 3
    5dce:	be 12       	cpse	r11, r30
    5dd0:	11 c0       	rjmp	.+34     	; 0x5df4 <menu_servo_setup+0x98>
					zero_setting = true;
					break;
				case 3:
					value_ptr = &Config.max_travel[0];
					servo_enable = true;
					zero_setting = true;
    5dd2:	99 24       	eor	r9, r9
    5dd4:	93 94       	inc	r9
					servo_enable = true;
					zero_setting = true;
					break;
				case 3:
					value_ptr = &Config.max_travel[0];
					servo_enable = true;
    5dd6:	88 24       	eor	r8, r8
    5dd8:	83 94       	inc	r8
					value_ptr = &Config.min_travel[0];
					servo_enable = true;
					zero_setting = true;
					break;
				case 3:
					value_ptr = &Config.max_travel[0];
    5dda:	3b e7       	ldi	r19, 0x7B	; 123
    5ddc:	63 2e       	mov	r6, r19
    5dde:	37 e0       	ldi	r19, 0x07	; 7
    5de0:	73 2e       	mov	r7, r19
					servo_enable = true;
					zero_setting = true;
					break;
    5de2:	08 c0       	rjmp	.+16     	; 0x5df4 <menu_servo_setup+0x98>
				case 1:
					break;
				case 2:
					value_ptr = &Config.min_travel[0];
					servo_enable = true;
					zero_setting = true;
    5de4:	99 24       	eor	r9, r9
    5de6:	93 94       	inc	r9
			{
				case 1:
					break;
				case 2:
					value_ptr = &Config.min_travel[0];
					servo_enable = true;
    5de8:	88 24       	eor	r8, r8
    5dea:	83 94       	inc	r8
			switch(section)
			{
				case 1:
					break;
				case 2:
					value_ptr = &Config.min_travel[0];
    5dec:	43 e7       	ldi	r20, 0x73	; 115
    5dee:	64 2e       	mov	r6, r20
    5df0:	47 e0       	ldi	r20, 0x07	; 7
    5df2:	74 2e       	mov	r7, r20
    5df4:	81 50       	subi	r24, 0x01	; 1
	// Get menu offsets
	// 1 = Reverse, 2 = Min, 3 = Max
	while(button != BACK)
	{
		// Load values from eeprom
		for (i = 0; i < SERVOITEMS; i++)
    5df6:	39 f7       	brne	.-50     	; 0x5dc6 <menu_servo_setup+0x6a>
					break;
			}
		}

		// Print menu
		print_menu_items(sub_top, SERVOSTART, value_ptr, (const unsigned char*)servo_menu_ranges[section - 1], 1, SERVOOFFSET, (const unsigned char*)ServoMenuText[section - 1], cursor);
    5df8:	a0 90 04 05 	lds	r10, 0x0504
    5dfc:	ce 80       	ldd	r12, Y+6	; 0x06
    5dfe:	df 80       	ldd	r13, Y+7	; 0x07
    5e00:	80 e5       	ldi	r24, 0x50	; 80
    5e02:	e8 2e       	mov	r14, r24
    5e04:	01 e0       	ldi	r16, 0x01	; 1
    5e06:	92 01       	movw	r18, r4
    5e08:	a3 01       	movw	r20, r6
    5e0a:	66 ee       	ldi	r22, 0xE6	; 230
    5e0c:	80 91 2b 05 	lds	r24, 0x052B
    5e10:	0e 94 44 2c 	call	0x5888	; 0x5888 <print_menu_items>

		// Handle menu changes
		update_menu(SERVOITEMS, SERVOSTART, 0, button, &cursor, &sub_top, &menu_temp);
    5e14:	96 e2       	ldi	r25, 0x26	; 38
    5e16:	c9 2e       	mov	r12, r25
    5e18:	95 e0       	ldi	r25, 0x05	; 5
    5e1a:	d9 2e       	mov	r13, r25
    5e1c:	2b e2       	ldi	r18, 0x2B	; 43
    5e1e:	e2 2e       	mov	r14, r18
    5e20:	25 e0       	ldi	r18, 0x05	; 5
    5e22:	f2 2e       	mov	r15, r18
    5e24:	04 e0       	ldi	r16, 0x04	; 4
    5e26:	15 e0       	ldi	r17, 0x05	; 5
    5e28:	20 91 e1 07 	lds	r18, 0x07E1
    5e2c:	40 e0       	ldi	r20, 0x00	; 0
    5e2e:	66 ee       	ldi	r22, 0xE6	; 230
    5e30:	88 e0       	ldi	r24, 0x08	; 8
    5e32:	0e 94 8e 2b 	call	0x571c	; 0x571c <update_menu>
		range = get_menu_range ((const unsigned char*)servo_menu_ranges[section - 1], 0);
    5e36:	60 e0       	ldi	r22, 0x00	; 0
    5e38:	c2 01       	movw	r24, r4
    5e3a:	0e 94 98 29 	call	0x5330	; 0x5330 <get_menu_range>
    5e3e:	29 83       	std	Y+1, r18	; 0x01
    5e40:	3a 83       	std	Y+2, r19	; 0x02
    5e42:	4b 83       	std	Y+3, r20	; 0x03
    5e44:	5c 83       	std	Y+4, r21	; 0x04
    5e46:	6d 83       	std	Y+5, r22	; 0x05

		if (button == ENTER)
    5e48:	80 91 e1 07 	lds	r24, 0x07E1
    5e4c:	80 3e       	cpi	r24, 0xE0	; 224
    5e4e:	89 f5       	brne	.+98     	; 0x5eb2 <menu_servo_setup+0x156>
		{
			text_link = pgm_read_byte(&ServoMenuText[section - 1][menu_temp - SERVOSTART]);
    5e50:	80 91 26 05 	lds	r24, 0x0526
    5e54:	90 91 27 05 	lds	r25, 0x0527
    5e58:	9c 01       	movw	r18, r24
    5e5a:	26 5e       	subi	r18, 0xE6	; 230
    5e5c:	31 09       	sbc	r19, r1
    5e5e:	f9 01       	movw	r30, r18
    5e60:	e2 0d       	add	r30, r2
    5e62:	f3 1d       	adc	r31, r3
    5e64:	e9 52       	subi	r30, 0x29	; 41
    5e66:	f7 4e       	sbci	r31, 0xE7	; 231
    5e68:	a4 90       	lpm	r10, Z
    5e6a:	b3 01       	movw	r22, r6
    5e6c:	62 0f       	add	r22, r18
    5e6e:	73 1f       	adc	r23, r19

			// Zero limits if adjusting
			if (zero_setting)
    5e70:	99 20       	and	r9, r9
    5e72:	11 f0       	breq	.+4      	; 0x5e78 <menu_servo_setup+0x11c>
			{
				value_ptr[menu_temp - SERVOSTART] = 0;
    5e74:	fb 01       	movw	r30, r22
    5e76:	10 82       	st	Z, r1
			}

			// Do not allow servo enable for throttle if in CPPM mode
			if ((Config.Channel[menu_temp - SERVOSTART].P1_source_a == THROTTLE) && (Config.RxMode == CPPM_MODE))
    5e78:	46 e2       	ldi	r20, 0x26	; 38
    5e7a:	42 9f       	mul	r20, r18
    5e7c:	d0 01       	movw	r26, r0
    5e7e:	43 9f       	mul	r20, r19
    5e80:	b0 0d       	add	r27, r0
    5e82:	11 24       	eor	r1, r1
    5e84:	a7 5a       	subi	r26, 0xA7	; 167
    5e86:	b9 4f       	sbci	r27, 0xF9	; 249
    5e88:	4c 91       	ld	r20, X
    5e8a:	41 11       	cpse	r20, r1
    5e8c:	05 c0       	rjmp	.+10     	; 0x5e98 <menu_servo_setup+0x13c>
    5e8e:	40 91 d2 05 	lds	r20, 0x05D2
    5e92:	41 11       	cpse	r20, r1
    5e94:	01 c0       	rjmp	.+2      	; 0x5e98 <menu_servo_setup+0x13c>
			{
				servo_enable = false;
    5e96:	81 2c       	mov	r8, r1
			}

			do_menu_item(menu_temp, value_ptr + (menu_temp - SERVOSTART), 1, range, 0, text_link, servo_enable, (menu_temp - SERVOSTART));
    5e98:	3f 93       	push	r19
    5e9a:	2f 93       	push	r18
    5e9c:	c1 2c       	mov	r12, r1
    5e9e:	e9 80       	ldd	r14, Y+1	; 0x01
    5ea0:	fa 80       	ldd	r15, Y+2	; 0x02
    5ea2:	0b 81       	ldd	r16, Y+3	; 0x03
    5ea4:	1c 81       	ldd	r17, Y+4	; 0x04
    5ea6:	2d 81       	ldd	r18, Y+5	; 0x05
    5ea8:	41 e0       	ldi	r20, 0x01	; 1
    5eaa:	0e 94 17 2a 	call	0x542e	; 0x542e <do_menu_item>
    5eae:	0f 90       	pop	r0
    5eb0:	0f 90       	pop	r0
		}

		// Disable servos
		servo_enable = false;

		if (button == ENTER)
    5eb2:	80 91 e1 07 	lds	r24, 0x07E1
    5eb6:	80 3e       	cpi	r24, 0xE0	; 224
    5eb8:	09 f0       	breq	.+2      	; 0x5ebc <menu_servo_setup+0x160>
    5eba:	7e cf       	rjmp	.-260    	; 0x5db8 <menu_servo_setup+0x5c>
		{
			UpdateLimits();				// Update actual servo trims
    5ebc:	0e 94 29 30 	call	0x6052	; 0x6052 <UpdateLimits>
			Save_Config_to_EEPROM();	// Save value and return
    5ec0:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <Save_Config_to_EEPROM>
			Wait_BUTTON4();				// Wait for user's finger off the button
    5ec4:	0e 94 0f 2e 	call	0x5c1e	; 0x5c1e <Wait_BUTTON4>
    5ec8:	77 cf       	rjmp	.-274    	; 0x5db8 <menu_servo_setup+0x5c>
		}
	}
}
    5eca:	27 96       	adiw	r28, 0x07	; 7
    5ecc:	e2 e1       	ldi	r30, 0x12	; 18
    5ece:	0c 94 e0 41 	jmp	0x83c0	; 0x83c0 <__epilogue_restores__>

00005ed2 <menu_rc_setup>:
//************************************************************
// Main menu-specific setup
//************************************************************

void menu_rc_setup(uint8_t section)
{
    5ed2:	a8 e0       	ldi	r26, 0x08	; 8
    5ed4:	b0 e0       	ldi	r27, 0x00	; 0
    5ed6:	ef e6       	ldi	r30, 0x6F	; 111
    5ed8:	ff e2       	ldi	r31, 0x2F	; 47
    5eda:	0c 94 c4 41 	jmp	0x8388	; 0x8388 <__prologue_saves__>
    5ede:	98 2e       	mov	r9, r24
	uint8_t i;
	uint8_t offset = 0;			// Index into channel structure
	uint8_t	items= RCITEMS;		// Items in group
	
	// If submenu item has changed, reset submenu positions
	if (menu_flag)
    5ee0:	80 91 e3 07 	lds	r24, 0x07E3
    5ee4:	88 23       	and	r24, r24
    5ee6:	29 f0       	breq	.+10     	; 0x5ef2 <menu_rc_setup+0x20>
	{
		sub_top = RCSTART;
    5ee8:	85 e9       	ldi	r24, 0x95	; 149
    5eea:	80 93 2b 05 	sts	0x052B, r24
		menu_flag = 0;
    5eee:	10 92 e3 07 	sts	0x07E3, r1
			writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_CONFIG, (6 - Config.MPU6050_LPF));

			// Update channel sequence
			for (i = 0; i < MAX_RC_CHANNELS; i++)
			{
				if (Config.TxSeq == FUTABASEQ)
    5ef2:	29 e0       	ldi	r18, 0x09	; 9
    5ef4:	2e 83       	std	Y+6, r18	; 0x06
    5ef6:	b1 2c       	mov	r11, r1
    5ef8:	62 ed       	ldi	r22, 0xD2	; 210
    5efa:	46 2e       	mov	r4, r22
    5efc:	65 e0       	ldi	r22, 0x05	; 5
    5efe:	56 2e       	mov	r5, r22
			default:
				break;
		}

		// Print menu
		print_menu_items(sub_top + offset, RCSTART + offset, value_ptr, (const unsigned char*)rc_menu_ranges[section - 1], 0, RCOFFSET, (const unsigned char*)RCMenuText[section - 1], cursor);
    5f00:	89 2d       	mov	r24, r9
    5f02:	90 e0       	ldi	r25, 0x00	; 0
    5f04:	01 97       	sbiw	r24, 0x01	; 1
    5f06:	22 e3       	ldi	r18, 0x32	; 50
    5f08:	28 9f       	mul	r18, r24
    5f0a:	30 01       	movw	r6, r0
    5f0c:	29 9f       	mul	r18, r25
    5f0e:	70 0c       	add	r7, r0
    5f10:	11 24       	eor	r1, r1
    5f12:	93 01       	movw	r18, r6
    5f14:	21 51       	subi	r18, 0x11	; 17
    5f16:	37 4e       	sbci	r19, 0xE7	; 231
    5f18:	39 01       	movw	r6, r18
    5f1a:	2a e0       	ldi	r18, 0x0A	; 10
    5f1c:	28 9f       	mul	r18, r24
    5f1e:	10 01       	movw	r2, r0
    5f20:	29 9f       	mul	r18, r25
    5f22:	30 0c       	add	r3, r0
    5f24:	11 24       	eor	r1, r1
    5f26:	c1 01       	movw	r24, r2
    5f28:	8d 5a       	subi	r24, 0xAD	; 173
    5f2a:	96 4e       	sbci	r25, 0xE6	; 230
    5f2c:	98 87       	std	Y+8, r25	; 0x08
    5f2e:	8f 83       	std	Y+7, r24	; 0x07
	{
		sub_top = RCSTART;
		menu_flag = 0;
	}

	while(button != BACK)
    5f30:	80 91 e1 07 	lds	r24, 0x07E1
    5f34:	80 37       	cpi	r24, 0x70	; 112
    5f36:	09 f4       	brne	.+2      	; 0x5f3a <menu_rc_setup+0x68>
    5f38:	88 c0       	rjmp	.+272    	; 0x604a <menu_rc_setup+0x178>
	{
		// Get menu offsets and load values from eeprom
		// 1 = RC, 2 = General
		switch(section)
    5f3a:	92 e0       	ldi	r25, 0x02	; 2
    5f3c:	99 12       	cpse	r9, r25
    5f3e:	08 c0       	rjmp	.+16     	; 0x5f50 <menu_rc_setup+0x7e>
		{
			case 1:				// RC setup menu
				break;
			case 2:				// General menu
				offset = RCITEMS;
				items = GENERALITEMS;
    5f40:	2a e0       	ldi	r18, 0x0A	; 10
    5f42:	2e 83       	std	Y+6, r18	; 0x06
		switch(section)
		{
			case 1:				// RC setup menu
				break;
			case 2:				// General menu
				offset = RCITEMS;
    5f44:	49 e0       	ldi	r20, 0x09	; 9
    5f46:	b4 2e       	mov	r11, r20
				items = GENERALITEMS;
				value_ptr = &Config.Orientation;
    5f48:	51 e3       	ldi	r21, 0x31	; 49
    5f4a:	45 2e       	mov	r4, r21
    5f4c:	56 e0       	ldi	r21, 0x06	; 6
    5f4e:	55 2e       	mov	r5, r21
			default:
				break;
		}

		// Print menu
		print_menu_items(sub_top + offset, RCSTART + offset, value_ptr, (const unsigned char*)rc_menu_ranges[section - 1], 0, RCOFFSET, (const unsigned char*)RCMenuText[section - 1], cursor);
    5f50:	80 91 2b 05 	lds	r24, 0x052B
    5f54:	a0 90 04 05 	lds	r10, 0x0504
    5f58:	cf 80       	ldd	r12, Y+7	; 0x07
    5f5a:	d8 84       	ldd	r13, Y+8	; 0x08
    5f5c:	9f e4       	ldi	r25, 0x4F	; 79
    5f5e:	e9 2e       	mov	r14, r25
    5f60:	00 e0       	ldi	r16, 0x00	; 0
    5f62:	93 01       	movw	r18, r6
    5f64:	a2 01       	movw	r20, r4
    5f66:	65 e9       	ldi	r22, 0x95	; 149
    5f68:	6b 0d       	add	r22, r11
    5f6a:	8b 0d       	add	r24, r11
    5f6c:	0e 94 44 2c 	call	0x5888	; 0x5888 <print_menu_items>

		// Handle menu changes
		update_menu(items, RCSTART, offset, button, &cursor, &sub_top, &menu_temp);
    5f70:	26 e2       	ldi	r18, 0x26	; 38
    5f72:	c2 2e       	mov	r12, r18
    5f74:	25 e0       	ldi	r18, 0x05	; 5
    5f76:	d2 2e       	mov	r13, r18
    5f78:	3b e2       	ldi	r19, 0x2B	; 43
    5f7a:	e3 2e       	mov	r14, r19
    5f7c:	35 e0       	ldi	r19, 0x05	; 5
    5f7e:	f3 2e       	mov	r15, r19
    5f80:	04 e0       	ldi	r16, 0x04	; 4
    5f82:	15 e0       	ldi	r17, 0x05	; 5
    5f84:	20 91 e1 07 	lds	r18, 0x07E1
    5f88:	4b 2d       	mov	r20, r11
    5f8a:	65 e9       	ldi	r22, 0x95	; 149
    5f8c:	8e 81       	ldd	r24, Y+6	; 0x06
    5f8e:	0e 94 8e 2b 	call	0x571c	; 0x571c <update_menu>
		range = get_menu_range ((const unsigned char*)rc_menu_ranges[section - 1], (menu_temp - RCSTART - offset)); 
    5f92:	60 91 26 05 	lds	r22, 0x0526
    5f96:	65 59       	subi	r22, 0x95	; 149
    5f98:	6b 19       	sub	r22, r11
    5f9a:	c3 01       	movw	r24, r6
    5f9c:	0e 94 98 29 	call	0x5330	; 0x5330 <get_menu_range>
    5fa0:	29 83       	std	Y+1, r18	; 0x01
    5fa2:	3a 83       	std	Y+2, r19	; 0x02
    5fa4:	4b 83       	std	Y+3, r20	; 0x03
    5fa6:	5c 83       	std	Y+4, r21	; 0x04
    5fa8:	6d 83       	std	Y+5, r22	; 0x05

		if (button == ENTER)
    5faa:	80 91 e1 07 	lds	r24, 0x07E1
    5fae:	80 3e       	cpi	r24, 0xE0	; 224
    5fb0:	f9 f4       	brne	.+62     	; 0x5ff0 <menu_rc_setup+0x11e>
		{
			text_link = pgm_read_byte(&RCMenuText[section - 1][menu_temp - RCSTART - offset]);
    5fb2:	80 91 26 05 	lds	r24, 0x0526
    5fb6:	90 91 27 05 	lds	r25, 0x0527
    5fba:	bc 01       	movw	r22, r24
    5fbc:	65 59       	subi	r22, 0x95	; 149
    5fbe:	71 09       	sbc	r23, r1
    5fc0:	6b 19       	sub	r22, r11
    5fc2:	71 09       	sbc	r23, r1
    5fc4:	fb 01       	movw	r30, r22
    5fc6:	e2 0d       	add	r30, r2
    5fc8:	f3 1d       	adc	r31, r3
    5fca:	ed 5a       	subi	r30, 0xAD	; 173
    5fcc:	f6 4e       	sbci	r31, 0xE6	; 230
    5fce:	a4 90       	lpm	r10, Z
			do_menu_item(menu_temp, value_ptr + (menu_temp - RCSTART - offset), 1, range, 0, text_link, false, 0);
    5fd0:	64 0d       	add	r22, r4
    5fd2:	75 1d       	adc	r23, r5
    5fd4:	1f 92       	push	r1
    5fd6:	1f 92       	push	r1
    5fd8:	81 2c       	mov	r8, r1
    5fda:	c1 2c       	mov	r12, r1
    5fdc:	e9 80       	ldd	r14, Y+1	; 0x01
    5fde:	fa 80       	ldd	r15, Y+2	; 0x02
    5fe0:	0b 81       	ldd	r16, Y+3	; 0x03
    5fe2:	1c 81       	ldd	r17, Y+4	; 0x04
    5fe4:	2d 81       	ldd	r18, Y+5	; 0x05
    5fe6:	41 e0       	ldi	r20, 0x01	; 1
    5fe8:	0e 94 17 2a 	call	0x542e	; 0x542e <do_menu_item>
    5fec:	0f 90       	pop	r0
    5fee:	0f 90       	pop	r0
		}

		if (button == ENTER)
    5ff0:	80 91 e1 07 	lds	r24, 0x07E1
    5ff4:	80 3e       	cpi	r24, 0xE0	; 224
    5ff6:	09 f0       	breq	.+2      	; 0x5ffa <menu_rc_setup+0x128>
    5ff8:	9b cf       	rjmp	.-202    	; 0x5f30 <menu_rc_setup+0x5e>
		{
			init_int();				// In case RC type has changed, reinitialise interrupts
    5ffa:	0e 94 68 24 	call	0x48d0	; 0x48d0 <init_int>
			init_uart();			// and UART
    5ffe:	0e 94 9a 3e 	call	0x7d34	; 0x7d34 <init_uart>
			UpdateLimits();			// Update I-term limits and triggers based on percentages
    6002:	0e 94 29 30 	call	0x6052	; 0x6052 <UpdateLimits>

			// Update MPU6050 LPF and reverse sense of menu items
			writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_CONFIG, (6 - Config.MPU6050_LPF));
    6006:	80 91 3a 06 	lds	r24, 0x063A
    600a:	46 e0       	ldi	r20, 0x06	; 6
    600c:	48 1b       	sub	r20, r24
    600e:	6a e1       	ldi	r22, 0x1A	; 26
    6010:	80 ed       	ldi	r24, 0xD0	; 208
    6012:	0e 94 c0 1f 	call	0x3f80	; 0x3f80 <writeI2Cbyte>

			// Update channel sequence
			for (i = 0; i < MAX_RC_CHANNELS; i++)
			{
				if (Config.TxSeq == FUTABASEQ)
    6016:	20 91 d4 05 	lds	r18, 0x05D4
    601a:	aa ea       	ldi	r26, 0xAA	; 170
    601c:	b5 e0       	ldi	r27, 0x05	; 5
    601e:	80 e0       	ldi	r24, 0x00	; 0
    6020:	90 e0       	ldi	r25, 0x00	; 0
    6022:	fc 01       	movw	r30, r24
    6024:	21 30       	cpi	r18, 0x01	; 1
    6026:	19 f4       	brne	.+6      	; 0x602e <menu_rc_setup+0x15c>
    6028:	ea 53       	subi	r30, 0x3A	; 58
    602a:	ff 4f       	sbci	r31, 0xFF	; 255
    602c:	02 c0       	rjmp	.+4      	; 0x6032 <menu_rc_setup+0x160>
    602e:	e2 53       	subi	r30, 0x32	; 50
    6030:	ff 4f       	sbci	r31, 0xFF	; 255
				{
					Config.ChannelOrder[i] = pgm_read_byte(&FUTABA[i]);
				}
				else
				{
					Config.ChannelOrder[i] = pgm_read_byte(&JR[i]);
    6032:	e4 91       	lpm	r30, Z
    6034:	ec 93       	st	X, r30
    6036:	01 96       	adiw	r24, 0x01	; 1
    6038:	11 96       	adiw	r26, 0x01	; 1

			// Update MPU6050 LPF and reverse sense of menu items
			writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_CONFIG, (6 - Config.MPU6050_LPF));

			// Update channel sequence
			for (i = 0; i < MAX_RC_CHANNELS; i++)
    603a:	88 30       	cpi	r24, 0x08	; 8
    603c:	91 05       	cpc	r25, r1
    603e:	89 f7       	brne	.-30     	; 0x6022 <menu_rc_setup+0x150>
				{
					Config.ChannelOrder[i] = pgm_read_byte(&JR[i]);
				}
			}

			Save_Config_to_EEPROM(); // Save value and return
    6040:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <Save_Config_to_EEPROM>
			Wait_BUTTON4();			 // Wait for user's finger off the button
    6044:	0e 94 0f 2e 	call	0x5c1e	; 0x5c1e <Wait_BUTTON4>
    6048:	73 cf       	rjmp	.-282    	; 0x5f30 <menu_rc_setup+0x5e>
		}
	}
}
    604a:	28 96       	adiw	r28, 0x08	; 8
    604c:	e2 e1       	ldi	r30, 0x12	; 18
    604e:	0c 94 e0 41 	jmp	0x83c0	; 0x83c0 <__epilogue_restores__>

00006052 <UpdateLimits>:

// Update actual limits value with that from the mix setting percentages
// This is only done at start-up and whenever the values are changed
// so as to reduce CPU loop load
void UpdateLimits(void)
{
    6052:	ac e0       	ldi	r26, 0x0C	; 12
    6054:	b0 e0       	ldi	r27, 0x00	; 0
    6056:	ef e2       	ldi	r30, 0x2F	; 47
    6058:	f0 e3       	ldi	r31, 0x30	; 48
    605a:	0c 94 c8 41 	jmp	0x8390	; 0x8390 <__prologue_saves__+0x8>
	uint8_t i,j;
	int32_t temp32, gain32;

	int8_t limits[FLIGHT_MODES][NUMBEROFAXIS] = 
    605e:	80 91 dd 05 	lds	r24, 0x05DD
    6062:	8f 83       	std	Y+7, r24	; 0x07
    6064:	80 91 e3 05 	lds	r24, 0x05E3
    6068:	88 87       	std	Y+8, r24	; 0x08
    606a:	80 91 e9 05 	lds	r24, 0x05E9
    606e:	89 87       	std	Y+9, r24	; 0x09
    6070:	80 91 ef 05 	lds	r24, 0x05EF
    6074:	8a 87       	std	Y+10, r24	; 0x0a
    6076:	80 91 f5 05 	lds	r24, 0x05F5
    607a:	8b 87       	std	Y+11, r24	; 0x0b
    607c:	80 91 fb 05 	lds	r24, 0x05FB
    6080:	8c 87       	std	Y+12, r24	; 0x0c
		{
			{Config.FlightMode[P1].Roll_limit, Config.FlightMode[P1].Pitch_limit, Config.FlightMode[P1].Yaw_limit},
			{Config.FlightMode[P2].Roll_limit, Config.FlightMode[P2].Pitch_limit, Config.FlightMode[P2].Yaw_limit}
		};

	int8_t gains[FLIGHT_MODES][NUMBEROFAXIS] = 
    6082:	80 91 dc 05 	lds	r24, 0x05DC
    6086:	89 83       	std	Y+1, r24	; 0x01
    6088:	80 91 e2 05 	lds	r24, 0x05E2
    608c:	8a 83       	std	Y+2, r24	; 0x02
    608e:	80 91 e8 05 	lds	r24, 0x05E8
    6092:	8b 83       	std	Y+3, r24	; 0x03
    6094:	80 91 ee 05 	lds	r24, 0x05EE
    6098:	8c 83       	std	Y+4, r24	; 0x04
    609a:	80 91 f4 05 	lds	r24, 0x05F4
    609e:	8d 83       	std	Y+5, r24	; 0x05
    60a0:	80 91 fa 05 	lds	r24, 0x05FA
    60a4:	8e 83       	std	Y+6, r24	; 0x06
			{Config.FlightMode[P1].Roll_I_mult, Config.FlightMode[P1].Pitch_I_mult, Config.FlightMode[P1].Yaw_I_mult},
			{Config.FlightMode[P2].Roll_I_mult, Config.FlightMode[P2].Pitch_I_mult, Config.FlightMode[P2].Yaw_I_mult}
		};

	// Update triggers
	Config.PowerTriggerActual = Config.PowerTrigger * 10;
    60a6:	80 91 35 06 	lds	r24, 0x0635
    60aa:	2a e0       	ldi	r18, 0x0A	; 10
    60ac:	82 02       	muls	r24, r18
    60ae:	c0 01       	movw	r24, r0
    60b0:	11 24       	eor	r1, r1
    60b2:	90 93 30 06 	sts	0x0630, r25
    60b6:	80 93 2f 06 	sts	0x062F, r24
    60ba:	4f ef       	ldi	r20, 0xFF	; 255
    60bc:	a4 2e       	mov	r10, r20
    60be:	45 e0       	ldi	r20, 0x05	; 5
    60c0:	b4 2e       	mov	r11, r20
    60c2:	00 e0       	ldi	r16, 0x00	; 0
    60c4:	10 e0       	ldi	r17, 0x00	; 0

// Update actual limits value with that from the mix setting percentages
// This is only done at start-up and whenever the values are changed
// so as to reduce CPU loop load
void UpdateLimits(void)
{
    60c6:	65 01       	movw	r12, r10
    60c8:	e1 2c       	mov	r14, r1
    60ca:	f1 2c       	mov	r15, r1
    60cc:	87 e0       	ldi	r24, 0x07	; 7
    60ce:	88 2e       	mov	r8, r24
    60d0:	91 2c       	mov	r9, r1
    60d2:	8c 0e       	add	r8, r28
    60d4:	9d 1e       	adc	r9, r29
    60d6:	80 0e       	add	r8, r16
    60d8:	91 1e       	adc	r9, r17
    60da:	66 24       	eor	r6, r6
    60dc:	63 94       	inc	r6
    60de:	71 2c       	mov	r7, r1
    60e0:	6c 0e       	add	r6, r28
    60e2:	7d 1e       	adc	r7, r29
    60e4:	60 0e       	add	r6, r16
    60e6:	71 1e       	adc	r7, r17
    60e8:	f4 01       	movw	r30, r8
    60ea:	ee 0d       	add	r30, r14
    60ec:	ff 1d       	adc	r31, r15
	// Update I_term input constraints for all profiles
	for (j = 0; j < FLIGHT_MODES; j++)
	{
		for (i = 0; i < NUMBEROFAXIS; i++)
		{
			temp32 	= limits[j][i]; 						// Promote limit %
    60ee:	a0 81       	ld	r26, Z

			// I-term output (throw). Convert from % to actual count
			// A value of 80,000 results in +/- 1250 or full throw at the output stage
			// This is because the maximum signal value is +/-1250 after division by 64. 1250 * 64 = 80,000
			Config.Raw_I_Limits[j][i] = temp32 * (int32_t)640;	// 80,000 / 125% = 640
    60f0:	bb 27       	eor	r27, r27
    60f2:	a7 fd       	sbrc	r26, 7
    60f4:	b0 95       	com	r27
    60f6:	20 e8       	ldi	r18, 0x80	; 128
    60f8:	32 e0       	ldi	r19, 0x02	; 2
    60fa:	0e 94 aa 41 	call	0x8354	; 0x8354 <__usmulhisi3>
    60fe:	d6 01       	movw	r26, r12
    6100:	6d 93       	st	X+, r22
    6102:	7d 93       	st	X+, r23
    6104:	8d 93       	st	X+, r24
    6106:	9d 93       	st	X+, r25
    6108:	6d 01       	movw	r12, r26
    610a:	f3 01       	movw	r30, r6
    610c:	ee 0d       	add	r30, r14
    610e:	ff 1d       	adc	r31, r15

			// I-term source limits. These have to be different due to the I-term gain setting
			// I-term = (gyro * gain) / 32, so the gyro count for a particular gain and limit is
			// Gyro = (I-term * 32) / gain :) 

			if (gains[j][i] != 0)
    6110:	20 81       	ld	r18, Z
    6112:	22 23       	and	r18, r18
    6114:	a1 f0       	breq	.+40     	; 0x613e <UpdateLimits+0xec>
			{
				gain32 = gains[j][i];						// Promote gain value
				Config.Raw_I_Constrain[j][i] = (Config.Raw_I_Limits[j][i] << 5) / gain32;
    6116:	35 e0       	ldi	r19, 0x05	; 5
    6118:	66 0f       	add	r22, r22
    611a:	77 1f       	adc	r23, r23
    611c:	88 1f       	adc	r24, r24
    611e:	99 1f       	adc	r25, r25
    6120:	3a 95       	dec	r19
    6122:	d1 f7       	brne	.-12     	; 0x6118 <UpdateLimits+0xc6>
			// I-term = (gyro * gain) / 32, so the gyro count for a particular gain and limit is
			// Gyro = (I-term * 32) / gain :) 

			if (gains[j][i] != 0)
			{
				gain32 = gains[j][i];						// Promote gain value
    6124:	33 27       	eor	r19, r19
    6126:	27 fd       	sbrc	r18, 7
    6128:	30 95       	com	r19
    612a:	43 2f       	mov	r20, r19
    612c:	53 2f       	mov	r21, r19
				Config.Raw_I_Constrain[j][i] = (Config.Raw_I_Limits[j][i] << 5) / gain32;
    612e:	0e 94 6e 41 	call	0x82dc	; 0x82dc <__divmodsi4>
    6132:	f6 01       	movw	r30, r12
    6134:	24 8b       	std	Z+20, r18	; 0x14
    6136:	35 8b       	std	Z+21, r19	; 0x15
    6138:	46 8b       	std	Z+22, r20	; 0x16
    613a:	57 8b       	std	Z+23, r21	; 0x17
    613c:	06 c0       	rjmp	.+12     	; 0x614a <UpdateLimits+0xf8>
			}
			else 
			{
				Config.Raw_I_Constrain[j][i] = 0;
    613e:	54 96       	adiw	r26, 0x14	; 20
    6140:	1d 92       	st	X+, r1
    6142:	1d 92       	st	X+, r1
    6144:	1d 92       	st	X+, r1
    6146:	1c 92       	st	X, r1
    6148:	57 97       	sbiw	r26, 0x17	; 23
    614a:	bf ef       	ldi	r27, 0xFF	; 255
    614c:	eb 1a       	sub	r14, r27
    614e:	fb 0a       	sbc	r15, r27
	Config.PowerTriggerActual = Config.PowerTrigger * 10;

	// Update I_term input constraints for all profiles
	for (j = 0; j < FLIGHT_MODES; j++)
	{
		for (i = 0; i < NUMBEROFAXIS; i++)
    6150:	e3 e0       	ldi	r30, 0x03	; 3
    6152:	ee 16       	cp	r14, r30
    6154:	f1 04       	cpc	r15, r1
    6156:	41 f6       	brne	.-112    	; 0x60e8 <UpdateLimits+0x96>
    6158:	fc e0       	ldi	r31, 0x0C	; 12
    615a:	af 0e       	add	r10, r31
    615c:	b1 1c       	adc	r11, r1
    615e:	0d 5f       	subi	r16, 0xFD	; 253
    6160:	1f 4f       	sbci	r17, 0xFF	; 255

	// Update triggers
	Config.PowerTriggerActual = Config.PowerTrigger * 10;

	// Update I_term input constraints for all profiles
	for (j = 0; j < FLIGHT_MODES; j++)
    6162:	06 30       	cpi	r16, 0x06	; 6
    6164:	11 05       	cpc	r17, r1
    6166:	09 f0       	breq	.+2      	; 0x616a <UpdateLimits+0x118>
    6168:	ae cf       	rjmp	.-164    	; 0x60c6 <UpdateLimits+0x74>
    616a:	83 e7       	ldi	r24, 0x73	; 115
    616c:	97 e0       	ldi	r25, 0x07	; 7
    616e:	e2 eb       	ldi	r30, 0xB2	; 178
    6170:	f5 e0       	ldi	r31, 0x05	; 5
    6172:	6b e7       	ldi	r22, 0x7B	; 123
    6174:	77 e0       	ldi	r23, 0x07	; 7
	}

	// Update travel limits
	for (i = 0; i < MIX_OUTPUTS; i++)
	{
		Config.Limits[i].minimum = scale_percent(Config.min_travel[i]);
    6176:	dc 01       	movw	r26, r24
    6178:	2d 91       	ld	r18, X+
    617a:	cd 01       	movw	r24, r26
int16_t scale_percent(int8_t value)
{
	int16_t temp16_1, temp16_2;

	temp16_1 = value; // Promote
	temp16_2 = ((temp16_1 * (int16_t)10) + 3750);
    617c:	ba e0       	ldi	r27, 0x0A	; 10
    617e:	2b 02       	muls	r18, r27
    6180:	90 01       	movw	r18, r0
    6182:	11 24       	eor	r1, r1
    6184:	2a 55       	subi	r18, 0x5A	; 90
    6186:	31 4f       	sbci	r19, 0xF1	; 241
	}

	// Update travel limits
	for (i = 0; i < MIX_OUTPUTS; i++)
	{
		Config.Limits[i].minimum = scale_percent(Config.min_travel[i]);
    6188:	31 83       	std	Z+1, r19	; 0x01
    618a:	20 83       	st	Z, r18
		Config.Limits[i].maximum = scale_percent(Config.max_travel[i]);
    618c:	db 01       	movw	r26, r22
    618e:	2d 91       	ld	r18, X+
    6190:	bd 01       	movw	r22, r26
int16_t scale_percent(int8_t value)
{
	int16_t temp16_1, temp16_2;

	temp16_1 = value; // Promote
	temp16_2 = ((temp16_1 * (int16_t)10) + 3750);
    6192:	ba e0       	ldi	r27, 0x0A	; 10
    6194:	2b 02       	muls	r18, r27
    6196:	90 01       	movw	r18, r0
    6198:	11 24       	eor	r1, r1
    619a:	2a 55       	subi	r18, 0x5A	; 90
    619c:	31 4f       	sbci	r19, 0xF1	; 241

	// Update travel limits
	for (i = 0; i < MIX_OUTPUTS; i++)
	{
		Config.Limits[i].minimum = scale_percent(Config.min_travel[i]);
		Config.Limits[i].maximum = scale_percent(Config.max_travel[i]);
    619e:	33 83       	std	Z+3, r19	; 0x03
    61a0:	22 83       	std	Z+2, r18	; 0x02
    61a2:	34 96       	adiw	r30, 0x04	; 4
			}
		}
	}

	// Update travel limits
	for (i = 0; i < MIX_OUTPUTS; i++)
    61a4:	25 e0       	ldi	r18, 0x05	; 5
    61a6:	e2 3d       	cpi	r30, 0xD2	; 210
    61a8:	f2 07       	cpc	r31, r18
    61aa:	29 f7       	brne	.-54     	; 0x6176 <UpdateLimits+0x124>

	// Adjust trim to match 0.01 degree resolution
	// A value of 127 multiplied by 10 = 1270 which in 1/100ths of a degree equates to 12.7 degrees
	for (i = P1; i <= P2; i++)
	{
		Config.Rolltrim[i] = Config.FlightMode[i].AccRollZeroTrim * 10;
    61ac:	80 91 e0 05 	lds	r24, 0x05E0
    61b0:	4a e0       	ldi	r20, 0x0A	; 10
    61b2:	84 02       	muls	r24, r20
    61b4:	c0 01       	movw	r24, r0
    61b6:	11 24       	eor	r1, r1
    61b8:	90 93 a9 07 	sts	0x07A9, r25
    61bc:	80 93 a8 07 	sts	0x07A8, r24
		Config.Pitchtrim[i] = Config.FlightMode[i].AccPitchZeroTrim * 10;
    61c0:	80 91 e6 05 	lds	r24, 0x05E6
    61c4:	aa e0       	ldi	r26, 0x0A	; 10
    61c6:	8a 02       	muls	r24, r26
    61c8:	c0 01       	movw	r24, r0
    61ca:	11 24       	eor	r1, r1
    61cc:	90 93 ad 07 	sts	0x07AD, r25
    61d0:	80 93 ac 07 	sts	0x07AC, r24

	// Adjust trim to match 0.01 degree resolution
	// A value of 127 multiplied by 10 = 1270 which in 1/100ths of a degree equates to 12.7 degrees
	for (i = P1; i <= P2; i++)
	{
		Config.Rolltrim[i] = Config.FlightMode[i].AccRollZeroTrim * 10;
    61d4:	80 91 f2 05 	lds	r24, 0x05F2
    61d8:	ba e0       	ldi	r27, 0x0A	; 10
    61da:	8b 02       	muls	r24, r27
    61dc:	c0 01       	movw	r24, r0
    61de:	11 24       	eor	r1, r1
    61e0:	90 93 ab 07 	sts	0x07AB, r25
    61e4:	80 93 aa 07 	sts	0x07AA, r24
		Config.Pitchtrim[i] = Config.FlightMode[i].AccPitchZeroTrim * 10;
    61e8:	80 91 f8 05 	lds	r24, 0x05F8
    61ec:	ea e0       	ldi	r30, 0x0A	; 10
    61ee:	8e 02       	muls	r24, r30
    61f0:	c0 01       	movw	r24, r0
    61f2:	11 24       	eor	r1, r1
    61f4:	90 93 af 07 	sts	0x07AF, r25
    61f8:	80 93 ae 07 	sts	0x07AE, r24
	}
}
    61fc:	2c 96       	adiw	r28, 0x0c	; 12
    61fe:	ee e0       	ldi	r30, 0x0E	; 14
    6200:	0c 94 e4 41 	jmp	0x83c8	; 0x83c8 <__epilogue_restores__+0x8>

00006204 <UpdateServos>:

// Update servos from the mixer Config.Channel[i].P1_value data, add offsets and enforce travel limits
void UpdateServos(void)
{
    6204:	cf 93       	push	r28
    6206:	df 93       	push	r29
    6208:	6b e3       	ldi	r22, 0x3B	; 59
    620a:	76 e0       	ldi	r23, 0x06	; 6
    620c:	2b e6       	ldi	r18, 0x6B	; 107
    620e:	37 e0       	ldi	r19, 0x07	; 7
    6210:	e4 e3       	ldi	r30, 0x34	; 52
    6212:	f8 e0       	ldi	r31, 0x08	; 8
    6214:	c2 eb       	ldi	r28, 0xB2	; 178
    6216:	d5 e0       	ldi	r29, 0x05	; 5
	int16_t temp1 = 0; // Output value

	for (i = 0; i < MIX_OUTPUTS; i++)
	{
		// Servo reverse and trim for the eight physical outputs
		temp1 = Config.Channel[i].P1_value;
    6218:	db 01       	movw	r26, r22
    621a:	8d 91       	ld	r24, X+
    621c:	9c 91       	ld	r25, X

		// Reverse this channel for the eight physical outputs
		if ((i <= MIX_OUTPUTS) && (Config.Servo_reverse[i] == ON))
    621e:	d9 01       	movw	r26, r18
    6220:	4d 91       	ld	r20, X+
    6222:	9d 01       	movw	r18, r26
    6224:	41 30       	cpi	r20, 0x01	; 1
    6226:	19 f4       	brne	.+6      	; 0x622e <UpdateServos+0x2a>
		{	
			temp1 = -temp1;
    6228:	91 95       	neg	r25
    622a:	81 95       	neg	r24
    622c:	91 09       	sbc	r25, r1
		}

		// Add offset value to restore to system compatible value
		temp1 += 3750;
    622e:	8a 55       	subi	r24, 0x5A	; 90
    6230:	91 4f       	sbci	r25, 0xF1	; 241

		// Enforce min, max travel limits
		if (temp1 > Config.Limits[i].maximum)
    6232:	4a 81       	ldd	r20, Y+2	; 0x02
    6234:	5b 81       	ldd	r21, Y+3	; 0x03
    6236:	48 17       	cp	r20, r24
    6238:	59 07       	cpc	r21, r25
    623a:	2c f0       	brlt	.+10     	; 0x6246 <UpdateServos+0x42>
		{
			ServoOut[i] = Config.Limits[i].maximum;
		}

		else if (temp1 < Config.Limits[i].minimum)
    623c:	48 81       	ld	r20, Y
    623e:	59 81       	ldd	r21, Y+1	; 0x01
    6240:	84 17       	cp	r24, r20
    6242:	95 07       	cpc	r25, r21
    6244:	1c f4       	brge	.+6      	; 0x624c <UpdateServos+0x48>
		{
			ServoOut[i] = Config.Limits[i].minimum;
    6246:	51 83       	std	Z+1, r21	; 0x01
    6248:	40 83       	st	Z, r20
    624a:	02 c0       	rjmp	.+4      	; 0x6250 <UpdateServos+0x4c>
		}

		// Transfer value to servo
		else
		{
			ServoOut[i] = temp1;
    624c:	91 83       	std	Z+1, r25	; 0x01
    624e:	80 83       	st	Z, r24
    6250:	6a 5d       	subi	r22, 0xDA	; 218
    6252:	7f 4f       	sbci	r23, 0xFF	; 255
    6254:	32 96       	adiw	r30, 0x02	; 2
    6256:	24 96       	adiw	r28, 0x04	; 4
void UpdateServos(void)
{
	uint8_t i;
	int16_t temp1 = 0; // Output value

	for (i = 0; i < MIX_OUTPUTS; i++)
    6258:	b7 e0       	ldi	r27, 0x07	; 7
    625a:	6b 36       	cpi	r22, 0x6B	; 107
    625c:	7b 07       	cpc	r23, r27
    625e:	e1 f6       	brne	.-72     	; 0x6218 <UpdateServos+0x14>
		else
		{
			ServoOut[i] = temp1;
		}
	}
}
    6260:	df 91       	pop	r29
    6262:	cf 91       	pop	r28
    6264:	08 95       	ret

00006266 <scale32>:

// 32 bit multiply/scale for broken GCC
// Returns immediately if multiplier is 100, 0 or -100
int16_t scale32(int16_t value16, int16_t multiplier16)
{
    6266:	9c 01       	movw	r18, r24
	int32_t temp32 = 0;
	int32_t mult32 = 0;

	// No change if 100% (no scaling)
	if (multiplier16 == 100)
    6268:	64 36       	cpi	r22, 0x64	; 100
    626a:	71 05       	cpc	r23, r1
    626c:	e9 f0       	breq	.+58     	; 0x62a8 <scale32+0x42>
	{
		return value16;
	}

	// Reverse if -100%
	else if (multiplier16 == -100)
    626e:	6c 39       	cpi	r22, 0x9C	; 156
    6270:	8f ef       	ldi	r24, 0xFF	; 255
    6272:	78 07       	cpc	r23, r24
    6274:	29 f4       	brne	.+10     	; 0x6280 <scale32+0x1a>
	{
		return -value16;	
    6276:	88 27       	eor	r24, r24
    6278:	99 27       	eor	r25, r25
    627a:	82 1b       	sub	r24, r18
    627c:	93 0b       	sbc	r25, r19
    627e:	08 95       	ret
	}

	// Zero if 0%
	else if (multiplier16 == 0)
    6280:	61 15       	cp	r22, r1
    6282:	71 05       	cpc	r23, r1
    6284:	71 f0       	breq	.+28     	; 0x62a2 <scale32+0x3c>
	else
	{
		// GCC is broken bad regarding multiplying 32 bit numbers, hence all this crap...
		mult32 = multiplier16;
		temp32 = value16;
		temp32 = temp32 * mult32;
    6286:	db 01       	movw	r26, r22
    6288:	0e 94 93 41 	call	0x8326	; 0x8326 <__mulhisi3>

		// Divide by 100 and round to get scaled value
		temp32 = (temp32 + (int32_t)50) / (int32_t)100; // Constants need to be cast up to 32 bits
    628c:	6e 5c       	subi	r22, 0xCE	; 206
    628e:	7f 4f       	sbci	r23, 0xFF	; 255
    6290:	8f 4f       	sbci	r24, 0xFF	; 255
    6292:	9f 4f       	sbci	r25, 0xFF	; 255
    6294:	24 e6       	ldi	r18, 0x64	; 100
    6296:	30 e0       	ldi	r19, 0x00	; 0
    6298:	40 e0       	ldi	r20, 0x00	; 0
    629a:	50 e0       	ldi	r21, 0x00	; 0
    629c:	0e 94 6e 41 	call	0x82dc	; 0x82dc <__divmodsi4>
    62a0:	03 c0       	rjmp	.+6      	; 0x62a8 <scale32+0x42>
	}

	// Zero if 0%
	else if (multiplier16 == 0)
	{
		return 0;	
    62a2:	80 e0       	ldi	r24, 0x00	; 0
    62a4:	90 e0       	ldi	r25, 0x00	; 0
    62a6:	08 95       	ret
	int32_t mult32 = 0;

	// No change if 100% (no scaling)
	if (multiplier16 == 100)
	{
		return value16;
    62a8:	c9 01       	movw	r24, r18
		temp32 = (temp32 + (int32_t)50) / (int32_t)100; // Constants need to be cast up to 32 bits
		value16 = (int16_t) temp32;
	}

	return value16;
}
    62aa:	08 95       	ret

000062ac <ProcessMixer>:
//************************************************************
// Code
//************************************************************

void ProcessMixer(void)
{
    62ac:	a8 e3       	ldi	r26, 0x38	; 56
    62ae:	b0 e0       	ldi	r27, 0x00	; 0
    62b0:	ec e5       	ldi	r30, 0x5C	; 92
    62b2:	f1 e3       	ldi	r31, 0x31	; 49
    62b4:	0c 94 c4 41 	jmp	0x8388	; 0x8388 <__prologue_saves__>
	int16_t	temp3 = 0;
	int16_t	Step1 = 0;
	int16_t	Step2 = 0;

	// Copy the sensor data to an array for easy indexing - acc data is from accSmooth, increased to reasonable rates
	temp1 = (int16_t)accSmooth[ROLL] << 3;
    62b8:	60 91 91 05 	lds	r22, 0x0591
    62bc:	70 91 92 05 	lds	r23, 0x0592
    62c0:	80 91 93 05 	lds	r24, 0x0593
    62c4:	90 91 94 05 	lds	r25, 0x0594
    62c8:	0e 94 da 3f 	call	0x7fb4	; 0x7fb4 <__fixsfsi>
    62cc:	8b 01       	movw	r16, r22
    62ce:	e3 e0       	ldi	r30, 0x03	; 3
    62d0:	00 0f       	add	r16, r16
    62d2:	11 1f       	adc	r17, r17
    62d4:	ea 95       	dec	r30
    62d6:	e1 f7       	brne	.-8      	; 0x62d0 <ProcessMixer+0x24>
	temp2 = (int16_t)accSmooth[PITCH] << 3;
    62d8:	60 91 95 05 	lds	r22, 0x0595
    62dc:	70 91 96 05 	lds	r23, 0x0596
    62e0:	80 91 97 05 	lds	r24, 0x0597
    62e4:	90 91 98 05 	lds	r25, 0x0598
    62e8:	0e 94 da 3f 	call	0x7fb4	; 0x7fb4 <__fixsfsi>
    62ec:	f3 e0       	ldi	r31, 0x03	; 3
    62ee:	66 0f       	add	r22, r22
    62f0:	77 1f       	adc	r23, r23
    62f2:	fa 95       	dec	r31
    62f4:	e1 f7       	brne	.-8      	; 0x62ee <ProcessMixer+0x42>
	int16_t	SensorDataP1[7] = {PID_Gyros[P1][ROLL], PID_Gyros[P1][PITCH], PID_Gyros[P1][YAW], temp1, temp2, PID_ACCs[P1][ROLL], PID_ACCs[P1][PITCH]};
    62f6:	20 91 08 08 	lds	r18, 0x0808
    62fa:	30 91 09 08 	lds	r19, 0x0809
    62fe:	38 a3       	std	Y+32, r19	; 0x20
    6300:	2f 8f       	std	Y+31, r18	; 0x1f
    6302:	38 8b       	std	Y+16, r19	; 0x10
    6304:	2f 87       	std	Y+15, r18	; 0x0f
    6306:	40 91 0a 08 	lds	r20, 0x080A
    630a:	50 91 0b 08 	lds	r21, 0x080B
    630e:	5a a3       	std	Y+34, r21	; 0x22
    6310:	49 a3       	std	Y+33, r20	; 0x21
    6312:	5a 8b       	std	Y+18, r21	; 0x12
    6314:	49 8b       	std	Y+17, r20	; 0x11
    6316:	20 91 0c 08 	lds	r18, 0x080C
    631a:	30 91 0d 08 	lds	r19, 0x080D
    631e:	3c a3       	std	Y+36, r19	; 0x24
    6320:	2b a3       	std	Y+35, r18	; 0x23
    6322:	3c 8b       	std	Y+20, r19	; 0x14
    6324:	2b 8b       	std	Y+19, r18	; 0x13
    6326:	1e 8b       	std	Y+22, r17	; 0x16
    6328:	0d 8b       	std	Y+21, r16	; 0x15
    632a:	78 8f       	std	Y+24, r23	; 0x18
    632c:	6f 8b       	std	Y+23, r22	; 0x17
    632e:	40 91 14 08 	lds	r20, 0x0814
    6332:	50 91 15 08 	lds	r21, 0x0815
    6336:	5e a3       	std	Y+38, r21	; 0x26
    6338:	4d a3       	std	Y+37, r20	; 0x25
    633a:	5a 8f       	std	Y+26, r21	; 0x1a
    633c:	49 8f       	std	Y+25, r20	; 0x19
    633e:	20 91 16 08 	lds	r18, 0x0816
    6342:	30 91 17 08 	lds	r19, 0x0817
    6346:	38 a7       	std	Y+40, r19	; 0x28
    6348:	2f a3       	std	Y+39, r18	; 0x27
    634a:	3c 8f       	std	Y+28, r19	; 0x1c
    634c:	2b 8f       	std	Y+27, r18	; 0x1b
	int16_t	SensorDataP2[7] = {PID_Gyros[P2][ROLL], PID_Gyros[P2][PITCH], PID_Gyros[P2][YAW], temp1, temp2, PID_ACCs[P2][ROLL], PID_ACCs[P2][PITCH]}; 
    634e:	40 91 0e 08 	lds	r20, 0x080E
    6352:	50 91 0f 08 	lds	r21, 0x080F
    6356:	5a a7       	std	Y+42, r21	; 0x2a
    6358:	49 a7       	std	Y+41, r20	; 0x29
    635a:	5a 83       	std	Y+2, r21	; 0x02
    635c:	49 83       	std	Y+1, r20	; 0x01
    635e:	20 90 10 08 	lds	r2, 0x0810
    6362:	30 90 11 08 	lds	r3, 0x0811
    6366:	3c 82       	std	Y+4, r3	; 0x04
    6368:	2b 82       	std	Y+3, r2	; 0x03
    636a:	40 90 12 08 	lds	r4, 0x0812
    636e:	50 90 13 08 	lds	r5, 0x0813
    6372:	5e 82       	std	Y+6, r5	; 0x06
    6374:	4d 82       	std	Y+5, r4	; 0x05
    6376:	18 87       	std	Y+8, r17	; 0x08
    6378:	0f 83       	std	Y+7, r16	; 0x07
    637a:	7a 87       	std	Y+10, r23	; 0x0a
    637c:	69 87       	std	Y+9, r22	; 0x09
    637e:	a0 90 1a 08 	lds	r10, 0x081A
    6382:	b0 90 1b 08 	lds	r11, 0x081B
    6386:	bc 86       	std	Y+12, r11	; 0x0c
    6388:	ab 86       	std	Y+11, r10	; 0x0b
    638a:	80 90 1c 08 	lds	r8, 0x081C
    638e:	90 90 1d 08 	lds	r9, 0x081D
    6392:	9e 86       	std	Y+14, r9	; 0x0e
    6394:	8d 86       	std	Y+13, r8	; 0x0d
		//************************************************************
		// Mix in gyros
		//************************************************************ 

		// P1 gyros
		if (Transition_state < TRANS_P2)
    6396:	50 91 1a 05 	lds	r21, 0x051A
    639a:	5d 8f       	std	Y+29, r21	; 0x1d
			switch (Config.Channel[i].P1_Z_delta_acc)
			{
				case OFF:
					break;
				case ON:
					P1_solution = P1_solution - PID_ACCs[P1][YAW];
    639c:	20 91 18 08 	lds	r18, 0x0818
    63a0:	30 91 19 08 	lds	r19, 0x0819
    63a4:	3c a7       	std	Y+44, r19	; 0x2c
    63a6:	2b a7       	std	Y+43, r18	; 0x2b
			switch (Config.Channel[i].P2_Z_delta_acc)
			{
				case OFF:
					break;
				case ON:
					P2_solution = P2_solution - PID_ACCs[P2][YAW];
    63a8:	40 91 1e 08 	lds	r20, 0x081E
    63ac:	50 91 1f 08 	lds	r21, 0x081F
    63b0:	5e a7       	std	Y+46, r21	; 0x2e
    63b2:	4d a7       	std	Y+45, r20	; 0x2d
		if (Transition_state < TRANS_P2)
		{
			// Mix in dedicated RC sources - aileron, elevator and rudder
			if (Config.Channel[i].P1_aileron_volume !=0) 					// Mix in dedicated aileron
			{
				temp2 = scale32(RCinputs[AILERON], Config.Channel[i].P1_aileron_volume);
    63b4:	20 91 24 08 	lds	r18, 0x0824
    63b8:	30 91 25 08 	lds	r19, 0x0825
    63bc:	38 ab       	std	Y+48, r19	; 0x30
    63be:	2f a7       	std	Y+47, r18	; 0x2f
				P1_solution = P1_solution + temp2;
			}
			if (Config.Channel[i].P1_elevator_volume !=0) 					// Mix in dedicated elevator
			{
				temp2 = scale32(RCinputs[ELEVATOR], Config.Channel[i].P1_elevator_volume);
    63c0:	40 91 26 08 	lds	r20, 0x0826
    63c4:	50 91 27 08 	lds	r21, 0x0827
    63c8:	5a ab       	std	Y+50, r21	; 0x32
    63ca:	49 ab       	std	Y+49, r20	; 0x31
				P1_solution = P1_solution + temp2;
			}
			if (Config.Channel[i].P1_rudder_volume !=0) 					// Mix in dedicated rudder
			{
				temp2 = scale32(RCinputs[RUDDER], Config.Channel[i].P1_rudder_volume);
    63cc:	20 91 28 08 	lds	r18, 0x0828
    63d0:	30 91 29 08 	lds	r19, 0x0829
    63d4:	3c ab       	std	Y+52, r19	; 0x34
    63d6:	2b ab       	std	Y+51, r18	; 0x33
    63d8:	c1 2c       	mov	r12, r1
    63da:	d1 2c       	mov	r13, r1
			switch (Config.Channel[i].P2_Roll_gyro)
			{
				case OFF:
				break;
				case ON:
				P2_solution = P2_solution - PID_Gyros[P2][ROLL];
    63dc:	49 a5       	ldd	r20, Y+41	; 0x29
    63de:	5a a5       	ldd	r21, Y+42	; 0x2a
    63e0:	51 95       	neg	r21
    63e2:	41 95       	neg	r20
    63e4:	51 09       	sbc	r21, r1
    63e6:	5e ab       	std	Y+54, r21	; 0x36
    63e8:	4d ab       	std	Y+53, r20	; 0x35
			switch (Config.Channel[i].P1_Roll_gyro) 
			{
				case OFF:
					break;
				case ON:
					P1_solution = P1_solution - PID_Gyros[P1][ROLL];
    63ea:	2f 8d       	ldd	r18, Y+31	; 0x1f
    63ec:	38 a1       	ldd	r19, Y+32	; 0x20
    63ee:	31 95       	neg	r19
    63f0:	21 95       	neg	r18
    63f2:	31 09       	sbc	r19, r1
    63f4:	38 af       	std	Y+56, r19	; 0x38
    63f6:	2f ab       	std	Y+55, r18	; 0x37
		//************************************************************
		// Mix in gyros
		//************************************************************ 

		// P1 gyros
		if (Transition_state < TRANS_P2)
    63f8:	3d 8d       	ldd	r19, Y+29	; 0x1d
    63fa:	39 30       	cpi	r19, 0x09	; 9
    63fc:	08 f0       	brcs	.+2      	; 0x6400 <ProcessMixer+0x154>
    63fe:	a6 c0       	rjmp	.+332    	; 0x654c <ProcessMixer+0x2a0>
    6400:	a6 01       	movw	r20, r12
    6402:	47 55       	subi	r20, 0x57	; 87
    6404:	5a 4f       	sbci	r21, 0xFA	; 250
    6406:	7a 01       	movw	r14, r20
    6408:	fa 01       	movw	r30, r20
    640a:	ec 55       	subi	r30, 0x5C	; 92
    640c:	ff 4f       	sbci	r31, 0xFF	; 255
		{
			switch (Config.Channel[i].P1_Roll_gyro) 
    640e:	80 81       	ld	r24, Z
    6410:	82 30       	cpi	r24, 0x02	; 2
    6412:	69 f1       	breq	.+90     	; 0x646e <ProcessMixer+0x1c2>
    6414:	1c f4       	brge	.+6      	; 0x641c <ProcessMixer+0x170>
    6416:	81 30       	cpi	r24, 0x01	; 1
    6418:	41 f0       	breq	.+16     	; 0x642a <ProcessMixer+0x17e>
    641a:	04 c0       	rjmp	.+8      	; 0x6424 <ProcessMixer+0x178>
    641c:	83 30       	cpi	r24, 0x03	; 3
    641e:	41 f0       	breq	.+16     	; 0x6430 <ProcessMixer+0x184>
    6420:	84 30       	cpi	r24, 0x04	; 4
    6422:	b9 f0       	breq	.+46     	; 0x6452 <ProcessMixer+0x1a6>
	{
		//************************************************************
		// Zero each channel value to start
		//************************************************************

		P1_solution = 0;
    6424:	00 e0       	ldi	r16, 0x00	; 0
    6426:	10 e0       	ldi	r17, 0x00	; 0
    6428:	24 c0       	rjmp	.+72     	; 0x6472 <ProcessMixer+0x1c6>
			switch (Config.Channel[i].P1_Roll_gyro) 
			{
				case OFF:
					break;
				case ON:
					P1_solution = P1_solution - PID_Gyros[P1][ROLL];
    642a:	0f a9       	ldd	r16, Y+55	; 0x37
    642c:	18 ad       	ldd	r17, Y+56	; 0x38
					break;
    642e:	21 c0       	rjmp	.+66     	; 0x6472 <ProcessMixer+0x1c6>
    6430:	fa 01       	movw	r30, r20
    6432:	e2 56       	subi	r30, 0x62	; 98
    6434:	ff 4f       	sbci	r31, 0xFF	; 255
				case REVERSE:
					P1_solution = P1_solution + PID_Gyros[P1][ROLL];
					break;
				case SCALE:
					P1_solution = P1_solution - scale32(PID_Gyros[P1][ROLL], Config.Channel[i].P1_aileron_volume * 5); 
    6436:	60 81       	ld	r22, Z
    6438:	55 e0       	ldi	r21, 0x05	; 5
    643a:	65 02       	muls	r22, r21
    643c:	b0 01       	movw	r22, r0
    643e:	11 24       	eor	r1, r1
    6440:	8f 8d       	ldd	r24, Y+31	; 0x1f
    6442:	98 a1       	ldd	r25, Y+32	; 0x20
    6444:	0e 94 33 31 	call	0x6266	; 0x6266 <scale32>
    6448:	00 27       	eor	r16, r16
    644a:	11 27       	eor	r17, r17
    644c:	08 1b       	sub	r16, r24
    644e:	19 0b       	sbc	r17, r25
					break;
    6450:	10 c0       	rjmp	.+32     	; 0x6472 <ProcessMixer+0x1c6>
    6452:	fa 01       	movw	r30, r20
    6454:	e2 56       	subi	r30, 0x62	; 98
    6456:	ff 4f       	sbci	r31, 0xFF	; 255
				case REVERSESCALE:
					P1_solution = P1_solution + scale32(PID_Gyros[P1][ROLL], Config.Channel[i].P1_aileron_volume * 5); 
    6458:	60 81       	ld	r22, Z
    645a:	85 e0       	ldi	r24, 0x05	; 5
    645c:	68 02       	muls	r22, r24
    645e:	b0 01       	movw	r22, r0
    6460:	11 24       	eor	r1, r1
    6462:	8f 8d       	ldd	r24, Y+31	; 0x1f
    6464:	98 a1       	ldd	r25, Y+32	; 0x20
    6466:	0e 94 33 31 	call	0x6266	; 0x6266 <scale32>
    646a:	8c 01       	movw	r16, r24
					break;				
    646c:	02 c0       	rjmp	.+4      	; 0x6472 <ProcessMixer+0x1c6>
					break;
				case ON:
					P1_solution = P1_solution - PID_Gyros[P1][ROLL];
					break;
				case REVERSE:
					P1_solution = P1_solution + PID_Gyros[P1][ROLL];
    646e:	0f 8d       	ldd	r16, Y+31	; 0x1f
    6470:	18 a1       	ldd	r17, Y+32	; 0x20
    6472:	f7 01       	movw	r30, r14
    6474:	ea 55       	subi	r30, 0x5A	; 90
    6476:	ff 4f       	sbci	r31, 0xFF	; 255
					break;				
				default:
					break;	
			}

			switch (Config.Channel[i].P1_Pitch_gyro)
    6478:	80 81       	ld	r24, Z
    647a:	82 30       	cpi	r24, 0x02	; 2
    647c:	d9 f0       	breq	.+54     	; 0x64b4 <ProcessMixer+0x208>
    647e:	3c f4       	brge	.+14     	; 0x648e <ProcessMixer+0x1e2>
    6480:	81 30       	cpi	r24, 0x01	; 1
    6482:	59 f5       	brne	.+86     	; 0x64da <ProcessMixer+0x22e>
			{
				case OFF:
					break;
				case ON:
					P1_solution = P1_solution - PID_Gyros[P1][PITCH];
    6484:	29 a1       	ldd	r18, Y+33	; 0x21
    6486:	3a a1       	ldd	r19, Y+34	; 0x22
    6488:	02 1b       	sub	r16, r18
    648a:	13 0b       	sbc	r17, r19
					break;
    648c:	26 c0       	rjmp	.+76     	; 0x64da <ProcessMixer+0x22e>
					break;				
				default:
					break;	
			}

			switch (Config.Channel[i].P1_Pitch_gyro)
    648e:	83 30       	cpi	r24, 0x03	; 3
    6490:	b1 f0       	breq	.+44     	; 0x64be <ProcessMixer+0x212>
    6492:	84 30       	cpi	r24, 0x04	; 4
    6494:	11 f5       	brne	.+68     	; 0x64da <ProcessMixer+0x22e>
    6496:	f7 01       	movw	r30, r14
    6498:	e0 56       	subi	r30, 0x60	; 96
    649a:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				case SCALE:
					P1_solution = P1_solution - scale32(PID_Gyros[P1][PITCH], Config.Channel[i].P1_elevator_volume * 5);
					break;
				case REVERSESCALE:
					P1_solution = P1_solution + scale32(PID_Gyros[P1][PITCH], Config.Channel[i].P1_elevator_volume * 5);
    649c:	60 81       	ld	r22, Z
    649e:	85 e0       	ldi	r24, 0x05	; 5
    64a0:	68 02       	muls	r22, r24
    64a2:	b0 01       	movw	r22, r0
    64a4:	11 24       	eor	r1, r1
    64a6:	89 a1       	ldd	r24, Y+33	; 0x21
    64a8:	9a a1       	ldd	r25, Y+34	; 0x22
    64aa:	0e 94 33 31 	call	0x6266	; 0x6266 <scale32>
    64ae:	08 0f       	add	r16, r24
    64b0:	19 1f       	adc	r17, r25
					break;
    64b2:	13 c0       	rjmp	.+38     	; 0x64da <ProcessMixer+0x22e>
					break;
				case ON:
					P1_solution = P1_solution - PID_Gyros[P1][PITCH];
					break;
				case REVERSE:
					P1_solution = P1_solution + PID_Gyros[P1][PITCH];
    64b4:	49 a1       	ldd	r20, Y+33	; 0x21
    64b6:	5a a1       	ldd	r21, Y+34	; 0x22
    64b8:	04 0f       	add	r16, r20
    64ba:	15 1f       	adc	r17, r21
					break;
    64bc:	0e c0       	rjmp	.+28     	; 0x64da <ProcessMixer+0x22e>
    64be:	f7 01       	movw	r30, r14
    64c0:	e0 56       	subi	r30, 0x60	; 96
    64c2:	ff 4f       	sbci	r31, 0xFF	; 255
				case SCALE:
					P1_solution = P1_solution - scale32(PID_Gyros[P1][PITCH], Config.Channel[i].P1_elevator_volume * 5);
    64c4:	60 81       	ld	r22, Z
    64c6:	55 e0       	ldi	r21, 0x05	; 5
    64c8:	65 02       	muls	r22, r21
    64ca:	b0 01       	movw	r22, r0
    64cc:	11 24       	eor	r1, r1
    64ce:	89 a1       	ldd	r24, Y+33	; 0x21
    64d0:	9a a1       	ldd	r25, Y+34	; 0x22
    64d2:	0e 94 33 31 	call	0x6266	; 0x6266 <scale32>
    64d6:	08 1b       	sub	r16, r24
    64d8:	19 0b       	sbc	r17, r25
    64da:	f7 01       	movw	r30, r14
    64dc:	e8 55       	subi	r30, 0x58	; 88
    64de:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				default:
					break;
			}

			switch (Config.Channel[i].P1_Yaw_gyro)
    64e0:	80 81       	ld	r24, Z
    64e2:	82 30       	cpi	r24, 0x02	; 2
    64e4:	d9 f0       	breq	.+54     	; 0x651c <ProcessMixer+0x270>
    64e6:	3c f4       	brge	.+14     	; 0x64f6 <ProcessMixer+0x24a>
    64e8:	81 30       	cpi	r24, 0x01	; 1
    64ea:	59 f5       	brne	.+86     	; 0x6542 <ProcessMixer+0x296>
			{
				case OFF:
					break;
				case ON:
					P1_solution = P1_solution - PID_Gyros[P1][YAW];
    64ec:	2b a1       	ldd	r18, Y+35	; 0x23
    64ee:	3c a1       	ldd	r19, Y+36	; 0x24
    64f0:	02 1b       	sub	r16, r18
    64f2:	13 0b       	sbc	r17, r19
					break;
    64f4:	26 c0       	rjmp	.+76     	; 0x6542 <ProcessMixer+0x296>
					break;
				default:
					break;
			}

			switch (Config.Channel[i].P1_Yaw_gyro)
    64f6:	83 30       	cpi	r24, 0x03	; 3
    64f8:	b1 f0       	breq	.+44     	; 0x6526 <ProcessMixer+0x27a>
    64fa:	84 30       	cpi	r24, 0x04	; 4
    64fc:	11 f5       	brne	.+68     	; 0x6542 <ProcessMixer+0x296>
    64fe:	f7 01       	movw	r30, r14
    6500:	ee 55       	subi	r30, 0x5E	; 94
    6502:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				case SCALE:
					P1_solution = P1_solution - scale32(PID_Gyros[P1][YAW], Config.Channel[i].P1_rudder_volume * 5);
					break;
				case REVERSESCALE:
					P1_solution = P1_solution + scale32(PID_Gyros[P1][YAW], Config.Channel[i].P1_rudder_volume * 5);
    6504:	60 81       	ld	r22, Z
    6506:	85 e0       	ldi	r24, 0x05	; 5
    6508:	68 02       	muls	r22, r24
    650a:	b0 01       	movw	r22, r0
    650c:	11 24       	eor	r1, r1
    650e:	8b a1       	ldd	r24, Y+35	; 0x23
    6510:	9c a1       	ldd	r25, Y+36	; 0x24
    6512:	0e 94 33 31 	call	0x6266	; 0x6266 <scale32>
    6516:	08 0f       	add	r16, r24
    6518:	19 1f       	adc	r17, r25
					break;
    651a:	13 c0       	rjmp	.+38     	; 0x6542 <ProcessMixer+0x296>
					break;
				case ON:
					P1_solution = P1_solution - PID_Gyros[P1][YAW];
					break;
				case REVERSE:
					P1_solution = P1_solution + PID_Gyros[P1][YAW];
    651c:	4b a1       	ldd	r20, Y+35	; 0x23
    651e:	5c a1       	ldd	r21, Y+36	; 0x24
    6520:	04 0f       	add	r16, r20
    6522:	15 1f       	adc	r17, r21
					break;
    6524:	0e c0       	rjmp	.+28     	; 0x6542 <ProcessMixer+0x296>
    6526:	f7 01       	movw	r30, r14
    6528:	ee 55       	subi	r30, 0x5E	; 94
    652a:	ff 4f       	sbci	r31, 0xFF	; 255
				case SCALE:
					P1_solution = P1_solution - scale32(PID_Gyros[P1][YAW], Config.Channel[i].P1_rudder_volume * 5);
    652c:	60 81       	ld	r22, Z
    652e:	55 e0       	ldi	r21, 0x05	; 5
    6530:	65 02       	muls	r22, r21
    6532:	b0 01       	movw	r22, r0
    6534:	11 24       	eor	r1, r1
    6536:	8b a1       	ldd	r24, Y+35	; 0x23
    6538:	9c a1       	ldd	r25, Y+36	; 0x24
    653a:	0e 94 33 31 	call	0x6266	; 0x6266 <scale32>
    653e:	08 1b       	sub	r16, r24
    6540:	19 0b       	sbc	r17, r25
					break;
			}
		}

		// P2 gyros
		if (Transition_state > TRANS_P1)
    6542:	2d 8d       	ldd	r18, Y+29	; 0x1d
    6544:	22 23       	and	r18, r18
    6546:	09 f4       	brne	.+2      	; 0x654a <ProcessMixer+0x29e>
    6548:	9d c0       	rjmp	.+314    	; 0x6684 <ProcessMixer+0x3d8>
    654a:	02 c0       	rjmp	.+4      	; 0x6550 <ProcessMixer+0x2a4>
	{
		//************************************************************
		// Zero each channel value to start
		//************************************************************

		P1_solution = 0;
    654c:	00 e0       	ldi	r16, 0x00	; 0
    654e:	10 e0       	ldi	r17, 0x00	; 0
    6550:	a6 01       	movw	r20, r12
    6552:	47 55       	subi	r20, 0x57	; 87
    6554:	5a 4f       	sbci	r21, 0xFA	; 250
    6556:	3a 01       	movw	r6, r20
    6558:	fa 01       	movw	r30, r20
    655a:	eb 55       	subi	r30, 0x5B	; 91
    655c:	ff 4f       	sbci	r31, 0xFF	; 255
		}

		// P2 gyros
		if (Transition_state > TRANS_P1)
		{
			switch (Config.Channel[i].P2_Roll_gyro)
    655e:	80 81       	ld	r24, Z
    6560:	82 30       	cpi	r24, 0x02	; 2
    6562:	69 f1       	breq	.+90     	; 0x65be <ProcessMixer+0x312>
    6564:	1c f4       	brge	.+6      	; 0x656c <ProcessMixer+0x2c0>
    6566:	81 30       	cpi	r24, 0x01	; 1
    6568:	41 f0       	breq	.+16     	; 0x657a <ProcessMixer+0x2ce>
    656a:	04 c0       	rjmp	.+8      	; 0x6574 <ProcessMixer+0x2c8>
    656c:	83 30       	cpi	r24, 0x03	; 3
    656e:	41 f0       	breq	.+16     	; 0x6580 <ProcessMixer+0x2d4>
    6570:	84 30       	cpi	r24, 0x04	; 4
    6572:	b9 f0       	breq	.+46     	; 0x65a2 <ProcessMixer+0x2f6>
		//************************************************************
		// Zero each channel value to start
		//************************************************************

		P1_solution = 0;
		P2_solution = 0;
    6574:	e1 2c       	mov	r14, r1
    6576:	f1 2c       	mov	r15, r1
    6578:	24 c0       	rjmp	.+72     	; 0x65c2 <ProcessMixer+0x316>
			switch (Config.Channel[i].P2_Roll_gyro)
			{
				case OFF:
				break;
				case ON:
				P2_solution = P2_solution - PID_Gyros[P2][ROLL];
    657a:	ed a8       	ldd	r14, Y+53	; 0x35
    657c:	fe a8       	ldd	r15, Y+54	; 0x36
				break;
    657e:	21 c0       	rjmp	.+66     	; 0x65c2 <ProcessMixer+0x316>
    6580:	fa 01       	movw	r30, r20
    6582:	e1 56       	subi	r30, 0x61	; 97
    6584:	ff 4f       	sbci	r31, 0xFF	; 255
				case REVERSE:
				P2_solution = P2_solution + PID_Gyros[P2][ROLL];
				break;
				case SCALE:
				P2_solution = P2_solution - scale32(PID_Gyros[P2][ROLL], Config.Channel[i].P2_aileron_volume * 5);
    6586:	60 81       	ld	r22, Z
    6588:	55 e0       	ldi	r21, 0x05	; 5
    658a:	65 02       	muls	r22, r21
    658c:	b0 01       	movw	r22, r0
    658e:	11 24       	eor	r1, r1
    6590:	89 a5       	ldd	r24, Y+41	; 0x29
    6592:	9a a5       	ldd	r25, Y+42	; 0x2a
    6594:	0e 94 33 31 	call	0x6266	; 0x6266 <scale32>
    6598:	ee 24       	eor	r14, r14
    659a:	ff 24       	eor	r15, r15
    659c:	e8 1a       	sub	r14, r24
    659e:	f9 0a       	sbc	r15, r25
				break;
    65a0:	10 c0       	rjmp	.+32     	; 0x65c2 <ProcessMixer+0x316>
    65a2:	fa 01       	movw	r30, r20
    65a4:	e1 56       	subi	r30, 0x61	; 97
    65a6:	ff 4f       	sbci	r31, 0xFF	; 255
				case REVERSESCALE:
				P2_solution = P2_solution + scale32(PID_Gyros[P2][ROLL], Config.Channel[i].P2_aileron_volume * 5);
    65a8:	60 81       	ld	r22, Z
    65aa:	85 e0       	ldi	r24, 0x05	; 5
    65ac:	68 02       	muls	r22, r24
    65ae:	b0 01       	movw	r22, r0
    65b0:	11 24       	eor	r1, r1
    65b2:	89 a5       	ldd	r24, Y+41	; 0x29
    65b4:	9a a5       	ldd	r25, Y+42	; 0x2a
    65b6:	0e 94 33 31 	call	0x6266	; 0x6266 <scale32>
    65ba:	7c 01       	movw	r14, r24
				break;
    65bc:	02 c0       	rjmp	.+4      	; 0x65c2 <ProcessMixer+0x316>
				break;
				case ON:
				P2_solution = P2_solution - PID_Gyros[P2][ROLL];
				break;
				case REVERSE:
				P2_solution = P2_solution + PID_Gyros[P2][ROLL];
    65be:	e9 a4       	ldd	r14, Y+41	; 0x29
    65c0:	fa a4       	ldd	r15, Y+42	; 0x2a
    65c2:	f3 01       	movw	r30, r6
    65c4:	e9 55       	subi	r30, 0x59	; 89
    65c6:	ff 4f       	sbci	r31, 0xFF	; 255
				break;
				default:
				break;
			}

			switch (Config.Channel[i].P2_Pitch_gyro)
    65c8:	80 81       	ld	r24, Z
    65ca:	82 30       	cpi	r24, 0x02	; 2
    65cc:	c1 f0       	breq	.+48     	; 0x65fe <ProcessMixer+0x352>
    65ce:	2c f4       	brge	.+10     	; 0x65da <ProcessMixer+0x32e>
    65d0:	81 30       	cpi	r24, 0x01	; 1
    65d2:	29 f5       	brne	.+74     	; 0x661e <ProcessMixer+0x372>
			{
				case OFF:
				break;
				case ON:
				P2_solution = P2_solution - PID_Gyros[P2][PITCH];
    65d4:	e2 18       	sub	r14, r2
    65d6:	f3 08       	sbc	r15, r3
				break;
    65d8:	22 c0       	rjmp	.+68     	; 0x661e <ProcessMixer+0x372>
				break;
				default:
				break;
			}

			switch (Config.Channel[i].P2_Pitch_gyro)
    65da:	83 30       	cpi	r24, 0x03	; 3
    65dc:	99 f0       	breq	.+38     	; 0x6604 <ProcessMixer+0x358>
    65de:	84 30       	cpi	r24, 0x04	; 4
    65e0:	f1 f4       	brne	.+60     	; 0x661e <ProcessMixer+0x372>
    65e2:	f3 01       	movw	r30, r6
    65e4:	ef 55       	subi	r30, 0x5F	; 95
    65e6:	ff 4f       	sbci	r31, 0xFF	; 255
				break;
				case SCALE:
				P2_solution = P2_solution - scale32(PID_Gyros[P2][PITCH], Config.Channel[i].P2_elevator_volume * 5);
				break;
				case REVERSESCALE:
				P2_solution = P2_solution + scale32(PID_Gyros[P2][PITCH], Config.Channel[i].P2_elevator_volume * 5);
    65e8:	60 81       	ld	r22, Z
    65ea:	a5 e0       	ldi	r26, 0x05	; 5
    65ec:	6a 02       	muls	r22, r26
    65ee:	b0 01       	movw	r22, r0
    65f0:	11 24       	eor	r1, r1
    65f2:	c1 01       	movw	r24, r2
    65f4:	0e 94 33 31 	call	0x6266	; 0x6266 <scale32>
    65f8:	e8 0e       	add	r14, r24
    65fa:	f9 1e       	adc	r15, r25
				break;
    65fc:	10 c0       	rjmp	.+32     	; 0x661e <ProcessMixer+0x372>
				break;
				case ON:
				P2_solution = P2_solution - PID_Gyros[P2][PITCH];
				break;
				case REVERSE:
				P2_solution = P2_solution + PID_Gyros[P2][PITCH];
    65fe:	e2 0c       	add	r14, r2
    6600:	f3 1c       	adc	r15, r3
				break;
    6602:	0d c0       	rjmp	.+26     	; 0x661e <ProcessMixer+0x372>
    6604:	f3 01       	movw	r30, r6
    6606:	ef 55       	subi	r30, 0x5F	; 95
    6608:	ff 4f       	sbci	r31, 0xFF	; 255
				case SCALE:
				P2_solution = P2_solution - scale32(PID_Gyros[P2][PITCH], Config.Channel[i].P2_elevator_volume * 5);
    660a:	60 81       	ld	r22, Z
    660c:	95 e0       	ldi	r25, 0x05	; 5
    660e:	69 02       	muls	r22, r25
    6610:	b0 01       	movw	r22, r0
    6612:	11 24       	eor	r1, r1
    6614:	c1 01       	movw	r24, r2
    6616:	0e 94 33 31 	call	0x6266	; 0x6266 <scale32>
    661a:	e8 1a       	sub	r14, r24
    661c:	f9 0a       	sbc	r15, r25
    661e:	f3 01       	movw	r30, r6
    6620:	e7 55       	subi	r30, 0x57	; 87
    6622:	ff 4f       	sbci	r31, 0xFF	; 255
				break;
				default:
				break;
			}

			switch (Config.Channel[i].P2_Yaw_gyro)
    6624:	80 81       	ld	r24, Z
    6626:	82 30       	cpi	r24, 0x02	; 2
    6628:	c1 f0       	breq	.+48     	; 0x665a <ProcessMixer+0x3ae>
    662a:	2c f4       	brge	.+10     	; 0x6636 <ProcessMixer+0x38a>
    662c:	81 30       	cpi	r24, 0x01	; 1
    662e:	29 f5       	brne	.+74     	; 0x667a <ProcessMixer+0x3ce>
			{
				case OFF:
				break;
				case ON:
				P2_solution = P2_solution - PID_Gyros[P2][YAW];
    6630:	e4 18       	sub	r14, r4
    6632:	f5 08       	sbc	r15, r5
				break;
    6634:	22 c0       	rjmp	.+68     	; 0x667a <ProcessMixer+0x3ce>
				break;
				default:
				break;
			}

			switch (Config.Channel[i].P2_Yaw_gyro)
    6636:	83 30       	cpi	r24, 0x03	; 3
    6638:	99 f0       	breq	.+38     	; 0x6660 <ProcessMixer+0x3b4>
    663a:	84 30       	cpi	r24, 0x04	; 4
    663c:	f1 f4       	brne	.+60     	; 0x667a <ProcessMixer+0x3ce>
    663e:	f3 01       	movw	r30, r6
    6640:	ed 55       	subi	r30, 0x5D	; 93
    6642:	ff 4f       	sbci	r31, 0xFF	; 255
				break;
				case SCALE:
				P2_solution = P2_solution - scale32(PID_Gyros[P2][YAW], Config.Channel[i].P2_rudder_volume * 5);
				break;
				case REVERSESCALE:
				P2_solution = P2_solution + scale32(PID_Gyros[P2][YAW], Config.Channel[i].P2_rudder_volume * 5);
    6644:	60 81       	ld	r22, Z
    6646:	e5 e0       	ldi	r30, 0x05	; 5
    6648:	6e 02       	muls	r22, r30
    664a:	b0 01       	movw	r22, r0
    664c:	11 24       	eor	r1, r1
    664e:	c2 01       	movw	r24, r4
    6650:	0e 94 33 31 	call	0x6266	; 0x6266 <scale32>
    6654:	e8 0e       	add	r14, r24
    6656:	f9 1e       	adc	r15, r25
				break;
    6658:	10 c0       	rjmp	.+32     	; 0x667a <ProcessMixer+0x3ce>
				break;
				case ON:
				P2_solution = P2_solution - PID_Gyros[P2][YAW];
				break;
				case REVERSE:
				P2_solution = P2_solution + PID_Gyros[P2][YAW];
    665a:	e4 0c       	add	r14, r4
    665c:	f5 1c       	adc	r15, r5
				break;
    665e:	0d c0       	rjmp	.+26     	; 0x667a <ProcessMixer+0x3ce>
    6660:	f3 01       	movw	r30, r6
    6662:	ed 55       	subi	r30, 0x5D	; 93
    6664:	ff 4f       	sbci	r31, 0xFF	; 255
				case SCALE:
				P2_solution = P2_solution - scale32(PID_Gyros[P2][YAW], Config.Channel[i].P2_rudder_volume * 5);
    6666:	60 81       	ld	r22, Z
    6668:	b5 e0       	ldi	r27, 0x05	; 5
    666a:	6b 02       	muls	r22, r27
    666c:	b0 01       	movw	r22, r0
    666e:	11 24       	eor	r1, r1
    6670:	c2 01       	movw	r24, r4
    6672:	0e 94 33 31 	call	0x6266	; 0x6266 <scale32>
    6676:	e8 1a       	sub	r14, r24
    6678:	f9 0a       	sbc	r15, r25

		//************************************************************
		// Mix in accelerometers
		//************************************************************ 
		// P1
		if (Transition_state < TRANS_P2)
    667a:	2d 8d       	ldd	r18, Y+29	; 0x1d
    667c:	29 30       	cpi	r18, 0x09	; 9
    667e:	08 f0       	brcs	.+2      	; 0x6682 <ProcessMixer+0x3d6>
    6680:	a7 c0       	rjmp	.+334    	; 0x67d0 <ProcessMixer+0x524>
    6682:	02 c0       	rjmp	.+4      	; 0x6688 <ProcessMixer+0x3dc>
		//************************************************************
		// Zero each channel value to start
		//************************************************************

		P1_solution = 0;
		P2_solution = 0;
    6684:	e1 2c       	mov	r14, r1
    6686:	f1 2c       	mov	r15, r1
    6688:	a6 01       	movw	r20, r12
    668a:	47 55       	subi	r20, 0x57	; 87
    668c:	5a 4f       	sbci	r21, 0xFA	; 250
    668e:	3a 01       	movw	r6, r20
    6690:	fa 01       	movw	r30, r20
    6692:	e6 55       	subi	r30, 0x56	; 86
    6694:	ff 4f       	sbci	r31, 0xFF	; 255
		// Mix in accelerometers
		//************************************************************ 
		// P1
		if (Transition_state < TRANS_P2)
		{
			switch (Config.Channel[i].P1_Roll_acc)
    6696:	80 81       	ld	r24, Z
    6698:	82 30       	cpi	r24, 0x02	; 2
    669a:	d9 f0       	breq	.+54     	; 0x66d2 <ProcessMixer+0x426>
    669c:	3c f4       	brge	.+14     	; 0x66ac <ProcessMixer+0x400>
    669e:	81 30       	cpi	r24, 0x01	; 1
    66a0:	59 f5       	brne	.+86     	; 0x66f8 <ProcessMixer+0x44c>
			{
				case OFF:
					break;
				case ON:
					P1_solution = P1_solution - PID_ACCs[P1][ROLL];
    66a2:	2d a1       	ldd	r18, Y+37	; 0x25
    66a4:	3e a1       	ldd	r19, Y+38	; 0x26
    66a6:	02 1b       	sub	r16, r18
    66a8:	13 0b       	sbc	r17, r19
					break;
    66aa:	26 c0       	rjmp	.+76     	; 0x66f8 <ProcessMixer+0x44c>
		// Mix in accelerometers
		//************************************************************ 
		// P1
		if (Transition_state < TRANS_P2)
		{
			switch (Config.Channel[i].P1_Roll_acc)
    66ac:	83 30       	cpi	r24, 0x03	; 3
    66ae:	b1 f0       	breq	.+44     	; 0x66dc <ProcessMixer+0x430>
    66b0:	84 30       	cpi	r24, 0x04	; 4
    66b2:	11 f5       	brne	.+68     	; 0x66f8 <ProcessMixer+0x44c>
    66b4:	fa 01       	movw	r30, r20
    66b6:	e2 56       	subi	r30, 0x62	; 98
    66b8:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				case SCALE:
					P1_solution = P1_solution - scale32(PID_ACCs[P1][ROLL], Config.Channel[i].P1_aileron_volume * 5);
					break;
				case REVERSESCALE:
					P1_solution = P1_solution + scale32(PID_ACCs[P1][ROLL], Config.Channel[i].P1_aileron_volume * 5);
    66ba:	60 81       	ld	r22, Z
    66bc:	85 e0       	ldi	r24, 0x05	; 5
    66be:	68 02       	muls	r22, r24
    66c0:	b0 01       	movw	r22, r0
    66c2:	11 24       	eor	r1, r1
    66c4:	8d a1       	ldd	r24, Y+37	; 0x25
    66c6:	9e a1       	ldd	r25, Y+38	; 0x26
    66c8:	0e 94 33 31 	call	0x6266	; 0x6266 <scale32>
    66cc:	08 0f       	add	r16, r24
    66ce:	19 1f       	adc	r17, r25
					break;
    66d0:	13 c0       	rjmp	.+38     	; 0x66f8 <ProcessMixer+0x44c>
					break;
				case ON:
					P1_solution = P1_solution - PID_ACCs[P1][ROLL];
					break;
				case REVERSE:
					P1_solution = P1_solution + PID_ACCs[P1][ROLL];
    66d2:	4d a1       	ldd	r20, Y+37	; 0x25
    66d4:	5e a1       	ldd	r21, Y+38	; 0x26
    66d6:	04 0f       	add	r16, r20
    66d8:	15 1f       	adc	r17, r21
					break;
    66da:	0e c0       	rjmp	.+28     	; 0x66f8 <ProcessMixer+0x44c>
    66dc:	fa 01       	movw	r30, r20
    66de:	e2 56       	subi	r30, 0x62	; 98
    66e0:	ff 4f       	sbci	r31, 0xFF	; 255
				case SCALE:
					P1_solution = P1_solution - scale32(PID_ACCs[P1][ROLL], Config.Channel[i].P1_aileron_volume * 5);
    66e2:	60 81       	ld	r22, Z
    66e4:	55 e0       	ldi	r21, 0x05	; 5
    66e6:	65 02       	muls	r22, r21
    66e8:	b0 01       	movw	r22, r0
    66ea:	11 24       	eor	r1, r1
    66ec:	8d a1       	ldd	r24, Y+37	; 0x25
    66ee:	9e a1       	ldd	r25, Y+38	; 0x26
    66f0:	0e 94 33 31 	call	0x6266	; 0x6266 <scale32>
    66f4:	08 1b       	sub	r16, r24
    66f6:	19 0b       	sbc	r17, r25
    66f8:	f3 01       	movw	r30, r6
    66fa:	e4 55       	subi	r30, 0x54	; 84
    66fc:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				default:
					break;
			}			

			switch (Config.Channel[i].P1_Pitch_acc)
    66fe:	80 81       	ld	r24, Z
    6700:	82 30       	cpi	r24, 0x02	; 2
    6702:	d9 f0       	breq	.+54     	; 0x673a <ProcessMixer+0x48e>
    6704:	3c f4       	brge	.+14     	; 0x6714 <ProcessMixer+0x468>
    6706:	81 30       	cpi	r24, 0x01	; 1
    6708:	59 f5       	brne	.+86     	; 0x6760 <ProcessMixer+0x4b4>
			{
				case OFF:
					break;
				case ON:
					P1_solution = P1_solution - PID_ACCs[P1][PITCH];
    670a:	2f a1       	ldd	r18, Y+39	; 0x27
    670c:	38 a5       	ldd	r19, Y+40	; 0x28
    670e:	02 1b       	sub	r16, r18
    6710:	13 0b       	sbc	r17, r19
					break;
    6712:	26 c0       	rjmp	.+76     	; 0x6760 <ProcessMixer+0x4b4>
					break;
				default:
					break;
			}			

			switch (Config.Channel[i].P1_Pitch_acc)
    6714:	83 30       	cpi	r24, 0x03	; 3
    6716:	b1 f0       	breq	.+44     	; 0x6744 <ProcessMixer+0x498>
    6718:	84 30       	cpi	r24, 0x04	; 4
    671a:	11 f5       	brne	.+68     	; 0x6760 <ProcessMixer+0x4b4>
    671c:	f3 01       	movw	r30, r6
    671e:	e0 56       	subi	r30, 0x60	; 96
    6720:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				case SCALE:
					P1_solution = P1_solution - scale32(PID_ACCs[P1][PITCH], Config.Channel[i].P1_elevator_volume * 5);
					break;
				case REVERSESCALE:
					P1_solution = P1_solution + scale32(PID_ACCs[P1][PITCH], Config.Channel[i].P1_elevator_volume * 5);
    6722:	60 81       	ld	r22, Z
    6724:	85 e0       	ldi	r24, 0x05	; 5
    6726:	68 02       	muls	r22, r24
    6728:	b0 01       	movw	r22, r0
    672a:	11 24       	eor	r1, r1
    672c:	8f a1       	ldd	r24, Y+39	; 0x27
    672e:	98 a5       	ldd	r25, Y+40	; 0x28
    6730:	0e 94 33 31 	call	0x6266	; 0x6266 <scale32>
    6734:	08 0f       	add	r16, r24
    6736:	19 1f       	adc	r17, r25
					break;
    6738:	13 c0       	rjmp	.+38     	; 0x6760 <ProcessMixer+0x4b4>
					break;
				case ON:
					P1_solution = P1_solution - PID_ACCs[P1][PITCH];
					break;
				case REVERSE:
					P1_solution = P1_solution + PID_ACCs[P1][PITCH];
    673a:	4f a1       	ldd	r20, Y+39	; 0x27
    673c:	58 a5       	ldd	r21, Y+40	; 0x28
    673e:	04 0f       	add	r16, r20
    6740:	15 1f       	adc	r17, r21
					break;
    6742:	0e c0       	rjmp	.+28     	; 0x6760 <ProcessMixer+0x4b4>
    6744:	f3 01       	movw	r30, r6
    6746:	e0 56       	subi	r30, 0x60	; 96
    6748:	ff 4f       	sbci	r31, 0xFF	; 255
				case SCALE:
					P1_solution = P1_solution - scale32(PID_ACCs[P1][PITCH], Config.Channel[i].P1_elevator_volume * 5);
    674a:	60 81       	ld	r22, Z
    674c:	55 e0       	ldi	r21, 0x05	; 5
    674e:	65 02       	muls	r22, r21
    6750:	b0 01       	movw	r22, r0
    6752:	11 24       	eor	r1, r1
    6754:	8f a1       	ldd	r24, Y+39	; 0x27
    6756:	98 a5       	ldd	r25, Y+40	; 0x28
    6758:	0e 94 33 31 	call	0x6266	; 0x6266 <scale32>
    675c:	08 1b       	sub	r16, r24
    675e:	19 0b       	sbc	r17, r25
    6760:	f3 01       	movw	r30, r6
    6762:	e2 55       	subi	r30, 0x52	; 82
    6764:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				default:
					break;
			}

			switch (Config.Channel[i].P1_Z_delta_acc)
    6766:	80 81       	ld	r24, Z
    6768:	82 30       	cpi	r24, 0x02	; 2
    676a:	d9 f0       	breq	.+54     	; 0x67a2 <ProcessMixer+0x4f6>
    676c:	3c f4       	brge	.+14     	; 0x677c <ProcessMixer+0x4d0>
    676e:	81 30       	cpi	r24, 0x01	; 1
    6770:	59 f5       	brne	.+86     	; 0x67c8 <ProcessMixer+0x51c>
			{
				case OFF:
					break;
				case ON:
					P1_solution = P1_solution - PID_ACCs[P1][YAW];
    6772:	2b a5       	ldd	r18, Y+43	; 0x2b
    6774:	3c a5       	ldd	r19, Y+44	; 0x2c
    6776:	02 1b       	sub	r16, r18
    6778:	13 0b       	sbc	r17, r19
					break;
    677a:	26 c0       	rjmp	.+76     	; 0x67c8 <ProcessMixer+0x51c>
					break;
				default:
					break;
			}

			switch (Config.Channel[i].P1_Z_delta_acc)
    677c:	83 30       	cpi	r24, 0x03	; 3
    677e:	b1 f0       	breq	.+44     	; 0x67ac <ProcessMixer+0x500>
    6780:	84 30       	cpi	r24, 0x04	; 4
    6782:	11 f5       	brne	.+68     	; 0x67c8 <ProcessMixer+0x51c>
    6784:	f3 01       	movw	r30, r6
    6786:	e5 56       	subi	r30, 0x65	; 101
    6788:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				case SCALE:
					P1_solution = P1_solution - scale32(PID_ACCs[P1][YAW], Config.Channel[i].P1_throttle_volume * 5);
					break;
				case REVERSESCALE:
					P1_solution = P1_solution + scale32(PID_ACCs[P1][YAW], Config.Channel[i].P1_throttle_volume * 5);
    678a:	60 81       	ld	r22, Z
    678c:	85 e0       	ldi	r24, 0x05	; 5
    678e:	68 02       	muls	r22, r24
    6790:	b0 01       	movw	r22, r0
    6792:	11 24       	eor	r1, r1
    6794:	8b a5       	ldd	r24, Y+43	; 0x2b
    6796:	9c a5       	ldd	r25, Y+44	; 0x2c
    6798:	0e 94 33 31 	call	0x6266	; 0x6266 <scale32>
    679c:	08 0f       	add	r16, r24
    679e:	19 1f       	adc	r17, r25
					break;
    67a0:	13 c0       	rjmp	.+38     	; 0x67c8 <ProcessMixer+0x51c>
					break;
				case ON:
					P1_solution = P1_solution - PID_ACCs[P1][YAW];
					break;
				case REVERSE:
					P1_solution = P1_solution + PID_ACCs[P1][YAW];
    67a2:	4b a5       	ldd	r20, Y+43	; 0x2b
    67a4:	5c a5       	ldd	r21, Y+44	; 0x2c
    67a6:	04 0f       	add	r16, r20
    67a8:	15 1f       	adc	r17, r21
					break;
    67aa:	0e c0       	rjmp	.+28     	; 0x67c8 <ProcessMixer+0x51c>
    67ac:	f3 01       	movw	r30, r6
    67ae:	e5 56       	subi	r30, 0x65	; 101
    67b0:	ff 4f       	sbci	r31, 0xFF	; 255
				case SCALE:
					P1_solution = P1_solution - scale32(PID_ACCs[P1][YAW], Config.Channel[i].P1_throttle_volume * 5);
    67b2:	60 81       	ld	r22, Z
    67b4:	55 e0       	ldi	r21, 0x05	; 5
    67b6:	65 02       	muls	r22, r21
    67b8:	b0 01       	movw	r22, r0
    67ba:	11 24       	eor	r1, r1
    67bc:	8b a5       	ldd	r24, Y+43	; 0x2b
    67be:	9c a5       	ldd	r25, Y+44	; 0x2c
    67c0:	0e 94 33 31 	call	0x6266	; 0x6266 <scale32>
    67c4:	08 1b       	sub	r16, r24
    67c6:	19 0b       	sbc	r17, r25
					break;
			}
		}

		// P2
		if (Transition_state > TRANS_P1)
    67c8:	2d 8d       	ldd	r18, Y+29	; 0x1d
    67ca:	22 23       	and	r18, r18
    67cc:	09 f4       	brne	.+2      	; 0x67d0 <ProcessMixer+0x524>
    67ce:	98 c0       	rjmp	.+304    	; 0x6900 <ProcessMixer+0x654>
    67d0:	a6 01       	movw	r20, r12
    67d2:	47 55       	subi	r20, 0x57	; 87
    67d4:	5a 4f       	sbci	r21, 0xFA	; 250
    67d6:	3a 01       	movw	r6, r20
    67d8:	fa 01       	movw	r30, r20
    67da:	e5 55       	subi	r30, 0x55	; 85
    67dc:	ff 4f       	sbci	r31, 0xFF	; 255
		{
			switch (Config.Channel[i].P2_Roll_acc)
    67de:	80 81       	ld	r24, Z
    67e0:	82 30       	cpi	r24, 0x02	; 2
    67e2:	c1 f0       	breq	.+48     	; 0x6814 <ProcessMixer+0x568>
    67e4:	2c f4       	brge	.+10     	; 0x67f0 <ProcessMixer+0x544>
    67e6:	81 30       	cpi	r24, 0x01	; 1
    67e8:	29 f5       	brne	.+74     	; 0x6834 <ProcessMixer+0x588>
			{
				case OFF:
					break;
				case ON:
					P2_solution = P2_solution - PID_ACCs[P2][ROLL];
    67ea:	ea 18       	sub	r14, r10
    67ec:	fb 08       	sbc	r15, r11
					break;
    67ee:	22 c0       	rjmp	.+68     	; 0x6834 <ProcessMixer+0x588>
		}

		// P2
		if (Transition_state > TRANS_P1)
		{
			switch (Config.Channel[i].P2_Roll_acc)
    67f0:	83 30       	cpi	r24, 0x03	; 3
    67f2:	99 f0       	breq	.+38     	; 0x681a <ProcessMixer+0x56e>
    67f4:	84 30       	cpi	r24, 0x04	; 4
    67f6:	f1 f4       	brne	.+60     	; 0x6834 <ProcessMixer+0x588>
    67f8:	fa 01       	movw	r30, r20
    67fa:	e1 56       	subi	r30, 0x61	; 97
    67fc:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				case SCALE:
					P2_solution = P2_solution - scale32(PID_ACCs[P2][ROLL], Config.Channel[i].P2_aileron_volume * 5);
					break;
				case REVERSESCALE:
					P2_solution = P2_solution + scale32(PID_ACCs[P2][ROLL], Config.Channel[i].P2_aileron_volume * 5);
    67fe:	60 81       	ld	r22, Z
    6800:	85 e0       	ldi	r24, 0x05	; 5
    6802:	68 02       	muls	r22, r24
    6804:	b0 01       	movw	r22, r0
    6806:	11 24       	eor	r1, r1
    6808:	c5 01       	movw	r24, r10
    680a:	0e 94 33 31 	call	0x6266	; 0x6266 <scale32>
    680e:	e8 0e       	add	r14, r24
    6810:	f9 1e       	adc	r15, r25
					break;
    6812:	10 c0       	rjmp	.+32     	; 0x6834 <ProcessMixer+0x588>
					break;
				case ON:
					P2_solution = P2_solution - PID_ACCs[P2][ROLL];
					break;
				case REVERSE:
					P2_solution = P2_solution + PID_ACCs[P2][ROLL];
    6814:	ea 0c       	add	r14, r10
    6816:	fb 1c       	adc	r15, r11
					break;
    6818:	0d c0       	rjmp	.+26     	; 0x6834 <ProcessMixer+0x588>
    681a:	fa 01       	movw	r30, r20
    681c:	e1 56       	subi	r30, 0x61	; 97
    681e:	ff 4f       	sbci	r31, 0xFF	; 255
				case SCALE:
					P2_solution = P2_solution - scale32(PID_ACCs[P2][ROLL], Config.Channel[i].P2_aileron_volume * 5);
    6820:	60 81       	ld	r22, Z
    6822:	55 e0       	ldi	r21, 0x05	; 5
    6824:	65 02       	muls	r22, r21
    6826:	b0 01       	movw	r22, r0
    6828:	11 24       	eor	r1, r1
    682a:	c5 01       	movw	r24, r10
    682c:	0e 94 33 31 	call	0x6266	; 0x6266 <scale32>
    6830:	e8 1a       	sub	r14, r24
    6832:	f9 0a       	sbc	r15, r25
    6834:	f3 01       	movw	r30, r6
    6836:	e3 55       	subi	r30, 0x53	; 83
    6838:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				default:
					break;
			}

			switch (Config.Channel[i].P2_Pitch_acc)
    683a:	80 81       	ld	r24, Z
    683c:	82 30       	cpi	r24, 0x02	; 2
    683e:	c1 f0       	breq	.+48     	; 0x6870 <ProcessMixer+0x5c4>
    6840:	2c f4       	brge	.+10     	; 0x684c <ProcessMixer+0x5a0>
    6842:	81 30       	cpi	r24, 0x01	; 1
    6844:	29 f5       	brne	.+74     	; 0x6890 <ProcessMixer+0x5e4>
			{
				case OFF:
					break;
				case ON:
					P2_solution = P2_solution - PID_ACCs[P2][PITCH];
    6846:	e8 18       	sub	r14, r8
    6848:	f9 08       	sbc	r15, r9
					break;
    684a:	22 c0       	rjmp	.+68     	; 0x6890 <ProcessMixer+0x5e4>
					break;
				default:
					break;
			}

			switch (Config.Channel[i].P2_Pitch_acc)
    684c:	83 30       	cpi	r24, 0x03	; 3
    684e:	99 f0       	breq	.+38     	; 0x6876 <ProcessMixer+0x5ca>
    6850:	84 30       	cpi	r24, 0x04	; 4
    6852:	f1 f4       	brne	.+60     	; 0x6890 <ProcessMixer+0x5e4>
    6854:	f3 01       	movw	r30, r6
    6856:	ef 55       	subi	r30, 0x5F	; 95
    6858:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				case SCALE:
					P2_solution = P2_solution - scale32(PID_ACCs[P2][PITCH], Config.Channel[i].P2_elevator_volume * 5);
					break;
				case REVERSESCALE:
					P2_solution = P2_solution + scale32(PID_ACCs[P2][PITCH], Config.Channel[i].P2_elevator_volume * 5);
    685a:	60 81       	ld	r22, Z
    685c:	a5 e0       	ldi	r26, 0x05	; 5
    685e:	6a 02       	muls	r22, r26
    6860:	b0 01       	movw	r22, r0
    6862:	11 24       	eor	r1, r1
    6864:	c4 01       	movw	r24, r8
    6866:	0e 94 33 31 	call	0x6266	; 0x6266 <scale32>
    686a:	e8 0e       	add	r14, r24
    686c:	f9 1e       	adc	r15, r25
					break;
    686e:	10 c0       	rjmp	.+32     	; 0x6890 <ProcessMixer+0x5e4>
					break;
				case ON:
					P2_solution = P2_solution - PID_ACCs[P2][PITCH];
					break;
				case REVERSE:
					P2_solution = P2_solution + PID_ACCs[P2][PITCH];
    6870:	e8 0c       	add	r14, r8
    6872:	f9 1c       	adc	r15, r9
					break;
    6874:	0d c0       	rjmp	.+26     	; 0x6890 <ProcessMixer+0x5e4>
    6876:	f3 01       	movw	r30, r6
    6878:	ef 55       	subi	r30, 0x5F	; 95
    687a:	ff 4f       	sbci	r31, 0xFF	; 255
				case SCALE:
					P2_solution = P2_solution - scale32(PID_ACCs[P2][PITCH], Config.Channel[i].P2_elevator_volume * 5);
    687c:	60 81       	ld	r22, Z
    687e:	95 e0       	ldi	r25, 0x05	; 5
    6880:	69 02       	muls	r22, r25
    6882:	b0 01       	movw	r22, r0
    6884:	11 24       	eor	r1, r1
    6886:	c4 01       	movw	r24, r8
    6888:	0e 94 33 31 	call	0x6266	; 0x6266 <scale32>
    688c:	e8 1a       	sub	r14, r24
    688e:	f9 0a       	sbc	r15, r25
    6890:	f3 01       	movw	r30, r6
    6892:	e1 55       	subi	r30, 0x51	; 81
    6894:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				default:
					break;
			}

			switch (Config.Channel[i].P2_Z_delta_acc)
    6896:	80 81       	ld	r24, Z
    6898:	82 30       	cpi	r24, 0x02	; 2
    689a:	d9 f0       	breq	.+54     	; 0x68d2 <ProcessMixer+0x626>
    689c:	3c f4       	brge	.+14     	; 0x68ac <ProcessMixer+0x600>
    689e:	81 30       	cpi	r24, 0x01	; 1
    68a0:	59 f5       	brne	.+86     	; 0x68f8 <ProcessMixer+0x64c>
			{
				case OFF:
					break;
				case ON:
					P2_solution = P2_solution - PID_ACCs[P2][YAW];
    68a2:	2d a5       	ldd	r18, Y+45	; 0x2d
    68a4:	3e a5       	ldd	r19, Y+46	; 0x2e
    68a6:	e2 1a       	sub	r14, r18
    68a8:	f3 0a       	sbc	r15, r19
					break;
    68aa:	26 c0       	rjmp	.+76     	; 0x68f8 <ProcessMixer+0x64c>
					break;
				default:
					break;
			}

			switch (Config.Channel[i].P2_Z_delta_acc)
    68ac:	83 30       	cpi	r24, 0x03	; 3
    68ae:	b1 f0       	breq	.+44     	; 0x68dc <ProcessMixer+0x630>
    68b0:	84 30       	cpi	r24, 0x04	; 4
    68b2:	11 f5       	brne	.+68     	; 0x68f8 <ProcessMixer+0x64c>
    68b4:	f3 01       	movw	r30, r6
    68b6:	e4 56       	subi	r30, 0x64	; 100
    68b8:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				case SCALE:
					P2_solution = P2_solution - scale32(PID_ACCs[P2][YAW], Config.Channel[i].P2_throttle_volume * 5);
					break;
				case REVERSESCALE:
					P2_solution = P2_solution + scale32(PID_ACCs[P2][YAW], Config.Channel[i].P2_throttle_volume * 5);
    68ba:	60 81       	ld	r22, Z
    68bc:	85 e0       	ldi	r24, 0x05	; 5
    68be:	68 02       	muls	r22, r24
    68c0:	b0 01       	movw	r22, r0
    68c2:	11 24       	eor	r1, r1
    68c4:	8d a5       	ldd	r24, Y+45	; 0x2d
    68c6:	9e a5       	ldd	r25, Y+46	; 0x2e
    68c8:	0e 94 33 31 	call	0x6266	; 0x6266 <scale32>
    68cc:	e8 0e       	add	r14, r24
    68ce:	f9 1e       	adc	r15, r25
					break;
    68d0:	13 c0       	rjmp	.+38     	; 0x68f8 <ProcessMixer+0x64c>
					break;
				case ON:
					P2_solution = P2_solution - PID_ACCs[P2][YAW];
					break;
				case REVERSE:
					P2_solution = P2_solution + PID_ACCs[P2][YAW];
    68d2:	4d a5       	ldd	r20, Y+45	; 0x2d
    68d4:	5e a5       	ldd	r21, Y+46	; 0x2e
    68d6:	e4 0e       	add	r14, r20
    68d8:	f5 1e       	adc	r15, r21
					break;
    68da:	0e c0       	rjmp	.+28     	; 0x68f8 <ProcessMixer+0x64c>
    68dc:	f3 01       	movw	r30, r6
    68de:	e4 56       	subi	r30, 0x64	; 100
    68e0:	ff 4f       	sbci	r31, 0xFF	; 255
				case SCALE:
					P2_solution = P2_solution - scale32(PID_ACCs[P2][YAW], Config.Channel[i].P2_throttle_volume * 5);
    68e2:	60 81       	ld	r22, Z
    68e4:	55 e0       	ldi	r21, 0x05	; 5
    68e6:	65 02       	muls	r22, r21
    68e8:	b0 01       	movw	r22, r0
    68ea:	11 24       	eor	r1, r1
    68ec:	8d a5       	ldd	r24, Y+45	; 0x2d
    68ee:	9e a5       	ldd	r25, Y+46	; 0x2e
    68f0:	0e 94 33 31 	call	0x6266	; 0x6266 <scale32>
    68f4:	e8 1a       	sub	r14, r24
    68f6:	f9 0a       	sbc	r15, r25
		//************************************************************
		// Process mixers
		//************************************************************ 

		// Mix in other outputs here (P1)
		if (Transition_state < TRANS_P2)
    68f8:	2d 8d       	ldd	r18, Y+29	; 0x1d
    68fa:	29 30       	cpi	r18, 0x09	; 9
    68fc:	08 f0       	brcs	.+2      	; 0x6900 <ProcessMixer+0x654>
    68fe:	87 c0       	rjmp	.+270    	; 0x6a0e <ProcessMixer+0x762>
    6900:	a6 01       	movw	r20, r12
    6902:	47 55       	subi	r20, 0x57	; 87
    6904:	5a 4f       	sbci	r21, 0xFA	; 250
    6906:	3a 01       	movw	r6, r20
    6908:	fa 01       	movw	r30, r20
    690a:	e2 56       	subi	r30, 0x62	; 98
    690c:	ff 4f       	sbci	r31, 0xFF	; 255
		{
			// Mix in dedicated RC sources - aileron, elevator and rudder
			if (Config.Channel[i].P1_aileron_volume !=0) 					// Mix in dedicated aileron
    690e:	60 81       	ld	r22, Z
    6910:	66 23       	and	r22, r22
    6912:	49 f0       	breq	.+18     	; 0x6926 <ProcessMixer+0x67a>
			{
				temp2 = scale32(RCinputs[AILERON], Config.Channel[i].P1_aileron_volume);
    6914:	77 27       	eor	r23, r23
    6916:	67 fd       	sbrc	r22, 7
    6918:	70 95       	com	r23
    691a:	8f a5       	ldd	r24, Y+47	; 0x2f
    691c:	98 a9       	ldd	r25, Y+48	; 0x30
    691e:	0e 94 33 31 	call	0x6266	; 0x6266 <scale32>
				P1_solution = P1_solution + temp2;
    6922:	08 0f       	add	r16, r24
    6924:	19 1f       	adc	r17, r25
    6926:	f3 01       	movw	r30, r6
    6928:	e0 56       	subi	r30, 0x60	; 96
    692a:	ff 4f       	sbci	r31, 0xFF	; 255
			}
			if (Config.Channel[i].P1_elevator_volume !=0) 					// Mix in dedicated elevator
    692c:	60 81       	ld	r22, Z
    692e:	66 23       	and	r22, r22
    6930:	49 f0       	breq	.+18     	; 0x6944 <ProcessMixer+0x698>
			{
				temp2 = scale32(RCinputs[ELEVATOR], Config.Channel[i].P1_elevator_volume);
    6932:	77 27       	eor	r23, r23
    6934:	67 fd       	sbrc	r22, 7
    6936:	70 95       	com	r23
    6938:	89 a9       	ldd	r24, Y+49	; 0x31
    693a:	9a a9       	ldd	r25, Y+50	; 0x32
    693c:	0e 94 33 31 	call	0x6266	; 0x6266 <scale32>
				P1_solution = P1_solution + temp2;
    6940:	08 0f       	add	r16, r24
    6942:	19 1f       	adc	r17, r25
    6944:	f3 01       	movw	r30, r6
    6946:	ee 55       	subi	r30, 0x5E	; 94
    6948:	ff 4f       	sbci	r31, 0xFF	; 255
			}
			if (Config.Channel[i].P1_rudder_volume !=0) 					// Mix in dedicated rudder
    694a:	60 81       	ld	r22, Z
    694c:	66 23       	and	r22, r22
    694e:	49 f0       	breq	.+18     	; 0x6962 <ProcessMixer+0x6b6>
			{
				temp2 = scale32(RCinputs[RUDDER], Config.Channel[i].P1_rudder_volume);
    6950:	77 27       	eor	r23, r23
    6952:	67 fd       	sbrc	r22, 7
    6954:	70 95       	com	r23
    6956:	8b a9       	ldd	r24, Y+51	; 0x33
    6958:	9c a9       	ldd	r25, Y+52	; 0x34
    695a:	0e 94 33 31 	call	0x6266	; 0x6266 <scale32>
				P1_solution = P1_solution + temp2;
    695e:	08 0f       	add	r16, r24
    6960:	19 1f       	adc	r17, r25
    6962:	f3 01       	movw	r30, r6
    6964:	ef 54       	subi	r30, 0x4F	; 79
    6966:	ff 4f       	sbci	r31, 0xFF	; 255
			}

			// Other sources
			if ((Config.Channel[i].P1_source_a_volume !=0) && (Config.Channel[i].P1_source_a != NOMIX)) // Mix in first extra source
    6968:	60 81       	ld	r22, Z
    696a:	66 23       	and	r22, r22
    696c:	19 f1       	breq	.+70     	; 0x69b4 <ProcessMixer+0x708>
    696e:	31 97       	sbiw	r30, 0x01	; 1
    6970:	80 81       	ld	r24, Z
    6972:	8f 30       	cpi	r24, 0x0F	; 15
    6974:	f9 f0       	breq	.+62     	; 0x69b4 <ProcessMixer+0x708>
    6976:	e8 2f       	mov	r30, r24
    6978:	ff 27       	eor	r31, r31
    697a:	e7 fd       	sbrc	r30, 7
    697c:	f0 95       	com	r31
			{
				// Is the source a sensor?
				if (Config.Channel[i].P1_source_a > (MAX_RC_CHANNELS - 1))
    697e:	88 30       	cpi	r24, 0x08	; 8
    6980:	64 f0       	brlt	.+24     	; 0x699a <ProcessMixer+0x6ee>
				{
					temp2 = SensorDataP1[Config.Channel[i].P1_source_a - EXT_SOURCE];
    6982:	38 97       	sbiw	r30, 0x08	; 8
    6984:	ee 0f       	add	r30, r30
    6986:	ff 1f       	adc	r31, r31
    6988:	81 e0       	ldi	r24, 0x01	; 1
    698a:	90 e0       	ldi	r25, 0x00	; 0
    698c:	8c 0f       	add	r24, r28
    698e:	9d 1f       	adc	r25, r29
    6990:	e8 0f       	add	r30, r24
    6992:	f9 1f       	adc	r31, r25
    6994:	86 85       	ldd	r24, Z+14	; 0x0e
    6996:	97 85       	ldd	r25, Z+15	; 0x0f
    6998:	06 c0       	rjmp	.+12     	; 0x69a6 <ProcessMixer+0x6fa>
				}
				// Is the source an RC input?
				else
				{
					// Yes, calculate RC channel number from source number and return RC value
					temp2 = RCinputs[Config.Channel[i].P1_source_a];
    699a:	ee 0f       	add	r30, r30
    699c:	ff 1f       	adc	r31, r31
    699e:	ee 5d       	subi	r30, 0xDE	; 222
    69a0:	f7 4f       	sbci	r31, 0xF7	; 247
    69a2:	80 81       	ld	r24, Z
    69a4:	91 81       	ldd	r25, Z+1	; 0x01
				}

				temp2 = scale32(temp2, Config.Channel[i].P1_source_a_volume);
    69a6:	77 27       	eor	r23, r23
    69a8:	67 fd       	sbrc	r22, 7
    69aa:	70 95       	com	r23
    69ac:	0e 94 33 31 	call	0x6266	; 0x6266 <scale32>
				P1_solution = P1_solution + temp2;
    69b0:	08 0f       	add	r16, r24
    69b2:	19 1f       	adc	r17, r25
    69b4:	f3 01       	movw	r30, r6
    69b6:	eb 54       	subi	r30, 0x4B	; 75
    69b8:	ff 4f       	sbci	r31, 0xFF	; 255
			}
			if ((Config.Channel[i].P1_source_b_volume !=0) && (Config.Channel[i].P1_source_b != NOMIX)) // Mix in second extra source
    69ba:	60 81       	ld	r22, Z
    69bc:	66 23       	and	r22, r22
    69be:	19 f1       	breq	.+70     	; 0x6a06 <ProcessMixer+0x75a>
    69c0:	31 97       	sbiw	r30, 0x01	; 1
    69c2:	80 81       	ld	r24, Z
    69c4:	8f 30       	cpi	r24, 0x0F	; 15
    69c6:	f9 f0       	breq	.+62     	; 0x6a06 <ProcessMixer+0x75a>
    69c8:	e8 2f       	mov	r30, r24
    69ca:	ff 27       	eor	r31, r31
    69cc:	e7 fd       	sbrc	r30, 7
    69ce:	f0 95       	com	r31
			{
				// Is the source a sensor?
				if (Config.Channel[i].P1_source_b > (MAX_RC_CHANNELS - 1))
    69d0:	88 30       	cpi	r24, 0x08	; 8
    69d2:	64 f0       	brlt	.+24     	; 0x69ec <ProcessMixer+0x740>
				{
					temp2 = SensorDataP1[Config.Channel[i].P1_source_b - EXT_SOURCE];
    69d4:	38 97       	sbiw	r30, 0x08	; 8
    69d6:	ee 0f       	add	r30, r30
    69d8:	ff 1f       	adc	r31, r31
    69da:	a1 e0       	ldi	r26, 0x01	; 1
    69dc:	b0 e0       	ldi	r27, 0x00	; 0
    69de:	ac 0f       	add	r26, r28
    69e0:	bd 1f       	adc	r27, r29
    69e2:	ea 0f       	add	r30, r26
    69e4:	fb 1f       	adc	r31, r27
    69e6:	86 85       	ldd	r24, Z+14	; 0x0e
    69e8:	97 85       	ldd	r25, Z+15	; 0x0f
    69ea:	06 c0       	rjmp	.+12     	; 0x69f8 <ProcessMixer+0x74c>
				}
				// Is the source an RC input?
				else
				{
					temp2 = RCinputs[Config.Channel[i].P1_source_b];
    69ec:	ee 0f       	add	r30, r30
    69ee:	ff 1f       	adc	r31, r31
    69f0:	ee 5d       	subi	r30, 0xDE	; 222
    69f2:	f7 4f       	sbci	r31, 0xF7	; 247
    69f4:	80 81       	ld	r24, Z
    69f6:	91 81       	ldd	r25, Z+1	; 0x01
				}

				temp2 = scale32(temp2, Config.Channel[i].P1_source_b_volume);
    69f8:	77 27       	eor	r23, r23
    69fa:	67 fd       	sbrc	r22, 7
    69fc:	70 95       	com	r23
    69fe:	0e 94 33 31 	call	0x6266	; 0x6266 <scale32>
				P1_solution = P1_solution + temp2;
    6a02:	08 0f       	add	r16, r24
    6a04:	19 1f       	adc	r17, r25
			}
		}

		// Mix in other outputs here (P2)
		if (Transition_state > TRANS_P1)	
    6a06:	2d 8d       	ldd	r18, Y+29	; 0x1d
    6a08:	22 23       	and	r18, r18
    6a0a:	09 f4       	brne	.+2      	; 0x6a0e <ProcessMixer+0x762>
    6a0c:	7f c0       	rjmp	.+254    	; 0x6b0c <ProcessMixer+0x860>
    6a0e:	a6 01       	movw	r20, r12
    6a10:	47 55       	subi	r20, 0x57	; 87
    6a12:	5a 4f       	sbci	r21, 0xFA	; 250
    6a14:	3a 01       	movw	r6, r20
    6a16:	fa 01       	movw	r30, r20
    6a18:	e1 56       	subi	r30, 0x61	; 97
    6a1a:	ff 4f       	sbci	r31, 0xFF	; 255
		{
			// Mix in dedicated RC sources - aileron, elevator and rudder
			if (Config.Channel[i].P2_aileron_volume !=0) 					// Mix in dedicated aileron
    6a1c:	60 81       	ld	r22, Z
    6a1e:	66 23       	and	r22, r22
    6a20:	49 f0       	breq	.+18     	; 0x6a34 <ProcessMixer+0x788>
			{
				temp2 = scale32(RCinputs[AILERON], Config.Channel[i].P2_aileron_volume);
    6a22:	77 27       	eor	r23, r23
    6a24:	67 fd       	sbrc	r22, 7
    6a26:	70 95       	com	r23
    6a28:	8f a5       	ldd	r24, Y+47	; 0x2f
    6a2a:	98 a9       	ldd	r25, Y+48	; 0x30
    6a2c:	0e 94 33 31 	call	0x6266	; 0x6266 <scale32>
				P2_solution = P2_solution + temp2;
    6a30:	e8 0e       	add	r14, r24
    6a32:	f9 1e       	adc	r15, r25
    6a34:	f3 01       	movw	r30, r6
    6a36:	ef 55       	subi	r30, 0x5F	; 95
    6a38:	ff 4f       	sbci	r31, 0xFF	; 255
			}
			if (Config.Channel[i].P2_elevator_volume !=0) 					// Mix in dedicated elevator
    6a3a:	60 81       	ld	r22, Z
    6a3c:	66 23       	and	r22, r22
    6a3e:	49 f0       	breq	.+18     	; 0x6a52 <ProcessMixer+0x7a6>
			{
				temp2 = scale32(RCinputs[ELEVATOR], Config.Channel[i].P2_elevator_volume);
    6a40:	77 27       	eor	r23, r23
    6a42:	67 fd       	sbrc	r22, 7
    6a44:	70 95       	com	r23
    6a46:	89 a9       	ldd	r24, Y+49	; 0x31
    6a48:	9a a9       	ldd	r25, Y+50	; 0x32
    6a4a:	0e 94 33 31 	call	0x6266	; 0x6266 <scale32>
				P2_solution = P2_solution + temp2;
    6a4e:	e8 0e       	add	r14, r24
    6a50:	f9 1e       	adc	r15, r25
    6a52:	f3 01       	movw	r30, r6
    6a54:	ed 55       	subi	r30, 0x5D	; 93
    6a56:	ff 4f       	sbci	r31, 0xFF	; 255
			}
			if (Config.Channel[i].P2_rudder_volume !=0) 					// Mix in dedicated rudder
    6a58:	60 81       	ld	r22, Z
    6a5a:	66 23       	and	r22, r22
    6a5c:	49 f0       	breq	.+18     	; 0x6a70 <ProcessMixer+0x7c4>
			{
				temp2 = scale32(RCinputs[RUDDER], Config.Channel[i].P2_rudder_volume);
    6a5e:	77 27       	eor	r23, r23
    6a60:	67 fd       	sbrc	r22, 7
    6a62:	70 95       	com	r23
    6a64:	8b a9       	ldd	r24, Y+51	; 0x33
    6a66:	9c a9       	ldd	r25, Y+52	; 0x34
    6a68:	0e 94 33 31 	call	0x6266	; 0x6266 <scale32>
				P2_solution = P2_solution + temp2;
    6a6c:	e8 0e       	add	r14, r24
    6a6e:	f9 1e       	adc	r15, r25
    6a70:	f3 01       	movw	r30, r6
    6a72:	ed 54       	subi	r30, 0x4D	; 77
    6a74:	ff 4f       	sbci	r31, 0xFF	; 255
			}

			// Other sources
			if ((Config.Channel[i].P2_source_a_volume !=0) && (Config.Channel[i].P2_source_a != NOMIX)) // Mix in first extra source
    6a76:	60 81       	ld	r22, Z
    6a78:	66 23       	and	r22, r22
    6a7a:	09 f1       	breq	.+66     	; 0x6abe <ProcessMixer+0x812>
    6a7c:	31 97       	sbiw	r30, 0x01	; 1
    6a7e:	80 81       	ld	r24, Z
    6a80:	8f 30       	cpi	r24, 0x0F	; 15
    6a82:	e9 f0       	breq	.+58     	; 0x6abe <ProcessMixer+0x812>
    6a84:	e8 2f       	mov	r30, r24
    6a86:	ff 27       	eor	r31, r31
    6a88:	e7 fd       	sbrc	r30, 7
    6a8a:	f0 95       	com	r31
			{
				// Is the source a sensor?
				if (Config.Channel[i].P2_source_a > (MAX_RC_CHANNELS - 1))
    6a8c:	88 30       	cpi	r24, 0x08	; 8
    6a8e:	54 f0       	brlt	.+20     	; 0x6aa4 <ProcessMixer+0x7f8>
				{
					temp2 = SensorDataP2[Config.Channel[i].P2_source_a - EXT_SOURCE];
    6a90:	38 97       	sbiw	r30, 0x08	; 8
    6a92:	ee 0f       	add	r30, r30
    6a94:	ff 1f       	adc	r31, r31
    6a96:	81 e0       	ldi	r24, 0x01	; 1
    6a98:	90 e0       	ldi	r25, 0x00	; 0
    6a9a:	8c 0f       	add	r24, r28
    6a9c:	9d 1f       	adc	r25, r29
    6a9e:	e8 0f       	add	r30, r24
    6aa0:	f9 1f       	adc	r31, r25
    6aa2:	04 c0       	rjmp	.+8      	; 0x6aac <ProcessMixer+0x800>
				}
				// Is the source an RC input?
				else 
				{
					temp2 = RCinputs[Config.Channel[i].P2_source_a];
    6aa4:	ee 0f       	add	r30, r30
    6aa6:	ff 1f       	adc	r31, r31
    6aa8:	ee 5d       	subi	r30, 0xDE	; 222
    6aaa:	f7 4f       	sbci	r31, 0xF7	; 247
    6aac:	80 81       	ld	r24, Z
    6aae:	91 81       	ldd	r25, Z+1	; 0x01
				}

				temp2 = scale32(temp2, Config.Channel[i].P2_source_a_volume);
    6ab0:	77 27       	eor	r23, r23
    6ab2:	67 fd       	sbrc	r22, 7
    6ab4:	70 95       	com	r23
    6ab6:	0e 94 33 31 	call	0x6266	; 0x6266 <scale32>
				P2_solution = P2_solution + temp2;
    6aba:	e8 0e       	add	r14, r24
    6abc:	f9 1e       	adc	r15, r25
    6abe:	f3 01       	movw	r30, r6
    6ac0:	e9 54       	subi	r30, 0x49	; 73
    6ac2:	ff 4f       	sbci	r31, 0xFF	; 255
			}
			if ((Config.Channel[i].P2_source_b_volume !=0) && (Config.Channel[i].P2_source_b != NOMIX)) // Mix in second extra source
    6ac4:	60 81       	ld	r22, Z
    6ac6:	66 23       	and	r22, r22
    6ac8:	09 f1       	breq	.+66     	; 0x6b0c <ProcessMixer+0x860>
    6aca:	31 97       	sbiw	r30, 0x01	; 1
    6acc:	80 81       	ld	r24, Z
    6ace:	8f 30       	cpi	r24, 0x0F	; 15
    6ad0:	e9 f0       	breq	.+58     	; 0x6b0c <ProcessMixer+0x860>
    6ad2:	e8 2f       	mov	r30, r24
    6ad4:	ff 27       	eor	r31, r31
    6ad6:	e7 fd       	sbrc	r30, 7
    6ad8:	f0 95       	com	r31
			{
				// Is the source a sensor?
				if (Config.Channel[i].P2_source_b > (MAX_RC_CHANNELS - 1))
    6ada:	88 30       	cpi	r24, 0x08	; 8
    6adc:	54 f0       	brlt	.+20     	; 0x6af2 <ProcessMixer+0x846>
				{
					temp2 = SensorDataP2[Config.Channel[i].P2_source_b - EXT_SOURCE];
    6ade:	38 97       	sbiw	r30, 0x08	; 8
    6ae0:	ee 0f       	add	r30, r30
    6ae2:	ff 1f       	adc	r31, r31
    6ae4:	a1 e0       	ldi	r26, 0x01	; 1
    6ae6:	b0 e0       	ldi	r27, 0x00	; 0
    6ae8:	ac 0f       	add	r26, r28
    6aea:	bd 1f       	adc	r27, r29
    6aec:	ea 0f       	add	r30, r26
    6aee:	fb 1f       	adc	r31, r27
    6af0:	04 c0       	rjmp	.+8      	; 0x6afa <ProcessMixer+0x84e>
				}
				// Is the source an RC input?
				else
				{
					temp2 = RCinputs[Config.Channel[i].P2_source_b];
    6af2:	ee 0f       	add	r30, r30
    6af4:	ff 1f       	adc	r31, r31
    6af6:	ee 5d       	subi	r30, 0xDE	; 222
    6af8:	f7 4f       	sbci	r31, 0xF7	; 247
    6afa:	80 81       	ld	r24, Z
    6afc:	91 81       	ldd	r25, Z+1	; 0x01
				}

				temp2 = scale32(temp2, Config.Channel[i].P2_source_b_volume);
    6afe:	77 27       	eor	r23, r23
    6b00:	67 fd       	sbrc	r22, 7
    6b02:	70 95       	com	r23
    6b04:	0e 94 33 31 	call	0x6266	; 0x6266 <scale32>
				P2_solution = P2_solution + temp2;
    6b08:	e8 0e       	add	r14, r24
    6b0a:	f9 1e       	adc	r15, r25
    6b0c:	c6 01       	movw	r24, r12
    6b0e:	87 55       	subi	r24, 0x57	; 87
    6b10:	9a 4f       	sbci	r25, 0xFA	; 250
    6b12:	fc 01       	movw	r30, r24
    6b14:	ee 56       	subi	r30, 0x6E	; 110
    6b16:	ff 4f       	sbci	r31, 0xFF	; 255
			}
		}
			
		// Save solution for this channel. Note that this contains cross-mixed data from the *last* cycle
		Config.Channel[i].P1_value = P1_solution;
    6b18:	11 83       	std	Z+1, r17	; 0x01
    6b1a:	00 83       	st	Z, r16
    6b1c:	32 96       	adiw	r30, 0x02	; 2
		Config.Channel[i].P2_value = P2_solution;
    6b1e:	f1 82       	std	Z+1, r15	; 0x01
    6b20:	e0 82       	st	Z, r14
    6b22:	b6 e2       	ldi	r27, 0x26	; 38
    6b24:	cb 0e       	add	r12, r27
    6b26:	d1 1c       	adc	r13, r1

	//************************************************************
	// Main mix loop - sensors, RC inputs and other channels
	//************************************************************

	for (i = 0; i < MIX_OUTPUTS; i++)
    6b28:	e0 e3       	ldi	r30, 0x30	; 48
    6b2a:	ce 16       	cp	r12, r30
    6b2c:	e1 e0       	ldi	r30, 0x01	; 1
    6b2e:	de 06       	cpc	r13, r30
    6b30:	09 f0       	breq	.+2      	; 0x6b34 <ProcessMixer+0x888>
    6b32:	62 cc       	rjmp	.-1852   	; 0x63f8 <ProcessMixer+0x14c>
	//************************************************************
	// Mixer transition code
	//************************************************************ 

	// Convert number to percentage (0 to 100%)
	if (Config.TransitionSpeed != 0) 
    6b34:	80 91 d9 05 	lds	r24, 0x05D9
    6b38:	88 23       	and	r24, r24
    6b3a:	41 f0       	breq	.+16     	; 0x6b4c <ProcessMixer+0x8a0>
	{
		// transition_counter counts from 0 to 100 (101 steps)
		transition = transition_counter;
    6b3c:	80 91 1b 05 	lds	r24, 0x051B
    6b40:	90 91 1c 05 	lds	r25, 0x051C
    6b44:	90 93 19 05 	sts	0x0519, r25
    6b48:	80 93 18 05 	sts	0x0518, r24

	// Recalculate P1 values based on transition stage
	for (i = 0; i < MIX_OUTPUTS; i++)
	{
		// Speed up the easy ones :)
		if (transition == 0)
    6b4c:	60 90 18 05 	lds	r6, 0x0518
    6b50:	70 90 19 05 	lds	r7, 0x0519
		}
		else
		{
			// Get source channel value
			temp1 = Config.Channel[i].P1_value;
			temp1 = scale32(temp1, (100 - transition));
    6b54:	a4 e6       	ldi	r26, 0x64	; 100
    6b56:	ea 2e       	mov	r14, r26
    6b58:	f1 2c       	mov	r15, r1
    6b5a:	e6 18       	sub	r14, r6
    6b5c:	f7 08       	sbc	r15, r7
    6b5e:	0b e3       	ldi	r16, 0x3B	; 59
    6b60:	16 e0       	ldi	r17, 0x06	; 6

	// Recalculate P1 values based on transition stage
	for (i = 0; i < MIX_OUTPUTS; i++)
	{
		// Speed up the easy ones :)
		if (transition == 0)
    6b62:	61 14       	cp	r6, r1
    6b64:	71 04       	cpc	r7, r1
    6b66:	21 f4       	brne	.+8      	; 0x6b70 <ProcessMixer+0x8c4>
		{
			temp1 = Config.Channel[i].P1_value;
    6b68:	d8 01       	movw	r26, r16
    6b6a:	8d 91       	ld	r24, X+
    6b6c:	9c 91       	ld	r25, X
    6b6e:	17 c0       	rjmp	.+46     	; 0x6b9e <ProcessMixer+0x8f2>
		}
		else if (transition >= 100)
    6b70:	b4 e6       	ldi	r27, 0x64	; 100
    6b72:	6b 16       	cp	r6, r27
    6b74:	71 04       	cpc	r7, r1
    6b76:	24 f0       	brlt	.+8      	; 0x6b80 <ProcessMixer+0x8d4>
		{
			temp1 = Config.Channel[i].P2_value;
    6b78:	f8 01       	movw	r30, r16
    6b7a:	82 81       	ldd	r24, Z+2	; 0x02
    6b7c:	93 81       	ldd	r25, Z+3	; 0x03
    6b7e:	0f c0       	rjmp	.+30     	; 0x6b9e <ProcessMixer+0x8f2>
		}
		else
		{
			// Get source channel value
			temp1 = Config.Channel[i].P1_value;
			temp1 = scale32(temp1, (100 - transition));
    6b80:	b7 01       	movw	r22, r14
    6b82:	d8 01       	movw	r26, r16
    6b84:	8d 91       	ld	r24, X+
    6b86:	9c 91       	ld	r25, X
    6b88:	0e 94 33 31 	call	0x6266	; 0x6266 <scale32>
    6b8c:	6c 01       	movw	r12, r24

			// Get destination channel value
			temp2 = Config.Channel[i].P2_value;
			temp2 = scale32(temp2, transition);
    6b8e:	b3 01       	movw	r22, r6
    6b90:	f8 01       	movw	r30, r16
    6b92:	82 81       	ldd	r24, Z+2	; 0x02
    6b94:	93 81       	ldd	r25, Z+3	; 0x03
    6b96:	0e 94 33 31 	call	0x6266	; 0x6266 <scale32>

			// Sum the mixers
			temp1 = temp1 + temp2;
    6b9a:	8c 0d       	add	r24, r12
    6b9c:	9d 1d       	adc	r25, r13
		}
		// Save transitioned solution into P1
		Config.Channel[i].P1_value = temp1;
    6b9e:	d8 01       	movw	r26, r16
    6ba0:	8d 93       	st	X+, r24
    6ba2:	9c 93       	st	X, r25
    6ba4:	0a 5d       	subi	r16, 0xDA	; 218
    6ba6:	1f 4f       	sbci	r17, 0xFF	; 255
		// transition_counter counts from 0 to 100 (101 steps)
		transition = transition_counter;
	}

	// Recalculate P1 values based on transition stage
	for (i = 0; i < MIX_OUTPUTS; i++)
    6ba8:	b7 e0       	ldi	r27, 0x07	; 7
    6baa:	0b 36       	cpi	r16, 0x6B	; 107
    6bac:	1b 07       	cpc	r17, r27
    6bae:	c9 f6       	brne	.-78     	; 0x6b62 <ProcessMixer+0x8b6>
				// Just use the value of P1 volume as there is no curve
				temp3 = Config.Channel[i].P1_throttle_volume; // Promote to 16 bits
			}

			// Calculate actual throttle value to the curve
			temp3 = scale32(MonopolarThrottle, temp3);
    6bb0:	40 90 20 08 	lds	r4, 0x0820
    6bb4:	50 90 21 08 	lds	r5, 0x0821
    6bb8:	65 e4       	ldi	r22, 0x45	; 69
    6bba:	e6 2e       	mov	r14, r22
    6bbc:	66 e0       	ldi	r22, 0x06	; 6
    6bbe:	f6 2e       	mov	r15, r22
    6bc0:	76 e4       	ldi	r23, 0x46	; 70
    6bc2:	a7 2e       	mov	r10, r23
    6bc4:	76 e0       	ldi	r23, 0x06	; 6
    6bc6:	b7 2e       	mov	r11, r23
    6bc8:	0b e3       	ldi	r16, 0x3B	; 59
    6bca:	16 e0       	ldi	r17, 0x06	; 6
			if (Config.Channel[i].P1_throttle_volume != Config.Channel[i].P2_throttle_volume)
			{
				// Calculate step difference in 1/100ths and round
				temp1 = (Config.Channel[i].P2_throttle_volume - Config.Channel[i].P1_throttle_volume);
				temp1 = temp1 << 7; 						// Multiply by 128 so divide gives reasonable step values
				Step1 = temp1 / 100;	
    6bcc:	e4 e6       	ldi	r30, 0x64	; 100
    6bce:	ce 2e       	mov	r12, r30
    6bd0:	d1 2c       	mov	r13, r1
    6bd2:	86 2d       	mov	r24, r6
    6bd4:	99 27       	eor	r25, r25
    6bd6:	87 fd       	sbrc	r24, 7
    6bd8:	90 95       	com	r25
					}
					// If P2 greater than P1, SINE is the one we want
					else
					{
						// Multiply SQRTSIN[transition] steps (0 to 100)
						temp3 = (int8_t)pgm_read_byte(&SQRTSIN[(int8_t)transition]);
    6bda:	9c 01       	movw	r18, r24
    6bdc:	29 59       	subi	r18, 0x99	; 153
    6bde:	36 4e       	sbci	r19, 0xE6	; 230
    6be0:	3e 8f       	std	Y+30, r19	; 0x1e
    6be2:	2d 8f       	std	Y+29, r18	; 0x1d
					// Choose between SQRT SINE and SQRT COSINE
					// If P2 less than P1, COSINE (reverse SINE) is the one we want
					if (Step1 < 0)
					{ 
						// Multiply SQRTSIN[100 - transition] steps (0 to 100)
						temp3 = 100 - (int8_t)pgm_read_byte(&SQRTSIN[100 - (int8_t)transition]);
    6be4:	96 01       	movw	r18, r12
    6be6:	28 1b       	sub	r18, r24
    6be8:	39 0b       	sbc	r19, r25
    6bea:	a9 01       	movw	r20, r18
    6bec:	49 59       	subi	r20, 0x99	; 153
    6bee:	56 4e       	sbci	r21, 0xE6	; 230
    6bf0:	58 a3       	std	Y+32, r21	; 0x20
    6bf2:	4f 8f       	std	Y+31, r20	; 0x1f
					}
					// If P2 greater than P1, SINE is the one we want
					else
					{
						// Multiply SIN[transition] steps (0 to 100)
						temp3 = (int8_t)pgm_read_byte(&SIN[(int8_t)transition]);
    6bf4:	ac 01       	movw	r20, r24
    6bf6:	44 53       	subi	r20, 0x34	; 52
    6bf8:	56 4e       	sbci	r21, 0xE6	; 230
    6bfa:	5a a3       	std	Y+34, r21	; 0x22
    6bfc:	49 a3       	std	Y+33, r20	; 0x21
					// Choose between SINE and COSINE
					// If P2 less than P1, COSINE (reverse SINE) is the one we want
					if (Step1 < 0)
					{ 
						// Multiply SIN[100 - transition] steps (0 to 100)
						temp3 = 100 - (int8_t)pgm_read_byte(&SIN[100 - (int8_t)transition]);
    6bfe:	c9 01       	movw	r24, r18
    6c00:	84 53       	subi	r24, 0x34	; 52
    6c02:	96 4e       	sbci	r25, 0xE6	; 230
    6c04:	1c 01       	movw	r2, r24
		} // No throttle
		
		// No throttles, so clamp to THROTTLEMIN if flagged as a motor
		else if (Config.Channel[i].Motor_marker == MOTOR)
		{
			Config.Channel[i].P1_value = -THROTTLEOFFSET; // 3750-1250 = 2500 = 1.0ms
    6c06:	fe e1       	ldi	r31, 0x1E	; 30
    6c08:	8f 2e       	mov	r8, r31
    6c0a:	fb ef       	ldi	r31, 0xFB	; 251
    6c0c:	9f 2e       	mov	r9, r31
    6c0e:	f7 01       	movw	r30, r14
    6c10:	31 97       	sbiw	r30, 0x01	; 1
	//************************************************************ 

	for (i = 0; i < MIX_OUTPUTS; i++)
	{
		// Ignore if both throttle volumes are 0% (no throttle)
		if 	(!((Config.Channel[i].P1_throttle_volume == 0) && 
    6c12:	90 81       	ld	r25, Z
    6c14:	d7 01       	movw	r26, r14
    6c16:	8c 91       	ld	r24, X
    6c18:	91 11       	cpse	r25, r1
    6c1a:	03 c0       	rjmp	.+6      	; 0x6c22 <ProcessMixer+0x976>
    6c1c:	88 23       	and	r24, r24
    6c1e:	09 f4       	brne	.+2      	; 0x6c22 <ProcessMixer+0x976>
    6c20:	5f c0       	rjmp	.+190    	; 0x6ce0 <ProcessMixer+0xa34>
    6c22:	29 2f       	mov	r18, r25
    6c24:	33 27       	eor	r19, r19
    6c26:	27 fd       	sbrc	r18, 7
    6c28:	30 95       	com	r19
			(Config.Channel[i].P2_throttle_volume == 0)))
		{
			// Only process if there is a curve
			if (Config.Channel[i].P1_throttle_volume != Config.Channel[i].P2_throttle_volume)
    6c2a:	98 17       	cp	r25, r24
    6c2c:	09 f4       	brne	.+2      	; 0x6c30 <ProcessMixer+0x984>
    6c2e:	49 c0       	rjmp	.+146    	; 0x6cc2 <ProcessMixer+0xa16>
			{
				// Calculate step difference in 1/100ths and round
				temp1 = (Config.Channel[i].P2_throttle_volume - Config.Channel[i].P1_throttle_volume);
    6c30:	99 27       	eor	r25, r25
    6c32:	87 fd       	sbrc	r24, 7
    6c34:	90 95       	com	r25
    6c36:	82 1b       	sub	r24, r18
    6c38:	93 0b       	sbc	r25, r19
				temp1 = temp1 << 7; 						// Multiply by 128 so divide gives reasonable step values
    6c3a:	96 95       	lsr	r25
    6c3c:	98 2f       	mov	r25, r24
    6c3e:	88 27       	eor	r24, r24
    6c40:	97 95       	ror	r25
    6c42:	87 95       	ror	r24
				Step1 = temp1 / 100;	
    6c44:	b6 01       	movw	r22, r12
    6c46:	0e 94 38 41 	call	0x8270	; 0x8270 <__divmodhi4>

				// Set start (P1) point
				temp2 = Config.Channel[i].P1_throttle_volume; // Promote to 16 bits
				temp2 = temp2 << 7;
    6c4a:	36 95       	lsr	r19
    6c4c:	32 2f       	mov	r19, r18
    6c4e:	22 27       	eor	r18, r18
    6c50:	37 95       	ror	r19
    6c52:	27 95       	ror	r18

				// Linear vs. Sinusoidal calculation
				if (Config.Channel[i].Throttle_curve == LINEAR)
    6c54:	f5 01       	movw	r30, r10
    6c56:	80 81       	ld	r24, Z
    6c58:	81 11       	cpse	r24, r1
    6c5a:	08 c0       	rjmp	.+16     	; 0x6c6c <ProcessMixer+0x9c0>
				{
					// Multiply [transition] steps (0 to 100)
					temp3 = temp2 + (Step1 * transition);
    6c5c:	66 9d       	mul	r22, r6
    6c5e:	c0 01       	movw	r24, r0
    6c60:	67 9d       	mul	r22, r7
    6c62:	90 0d       	add	r25, r0
    6c64:	76 9d       	mul	r23, r6
    6c66:	90 0d       	add	r25, r0
    6c68:	11 24       	eor	r1, r1
    6c6a:	21 c0       	rjmp	.+66     	; 0x6cae <ProcessMixer+0xa02>
				}

				// SINE
				else if (Config.Channel[i].Throttle_curve == SINE)
    6c6c:	81 30       	cpi	r24, 0x01	; 1
    6c6e:	39 f4       	brne	.+14     	; 0x6c7e <ProcessMixer+0x9d2>
				{
					// Choose between SINE and COSINE
					// If P2 less than P1, COSINE (reverse SINE) is the one we want
					if (Step1 < 0)
    6c70:	77 ff       	sbrs	r23, 7
    6c72:	02 c0       	rjmp	.+4      	; 0x6c78 <ProcessMixer+0x9cc>
					{ 
						// Multiply SIN[100 - transition] steps (0 to 100)
						temp3 = 100 - (int8_t)pgm_read_byte(&SIN[100 - (int8_t)transition]);
    6c74:	f1 01       	movw	r30, r2
    6c76:	07 c0       	rjmp	.+14     	; 0x6c86 <ProcessMixer+0x9da>
					}
					// If P2 greater than P1, SINE is the one we want
					else
					{
						// Multiply SIN[transition] steps (0 to 100)
						temp3 = (int8_t)pgm_read_byte(&SIN[(int8_t)transition]);
    6c78:	e9 a1       	ldd	r30, Y+33	; 0x21
    6c7a:	fa a1       	ldd	r31, Y+34	; 0x22
    6c7c:	0d c0       	rjmp	.+26     	; 0x6c98 <ProcessMixer+0x9ec>
				// SQRT SINE
				else
				{
					// Choose between SQRT SINE and SQRT COSINE
					// If P2 less than P1, COSINE (reverse SINE) is the one we want
					if (Step1 < 0)
    6c7e:	77 ff       	sbrs	r23, 7
    6c80:	09 c0       	rjmp	.+18     	; 0x6c94 <ProcessMixer+0x9e8>
					{ 
						// Multiply SQRTSIN[100 - transition] steps (0 to 100)
						temp3 = 100 - (int8_t)pgm_read_byte(&SQRTSIN[100 - (int8_t)transition]);
    6c82:	ef 8d       	ldd	r30, Y+31	; 0x1f
    6c84:	f8 a1       	ldd	r31, Y+32	; 0x20
    6c86:	84 91       	lpm	r24, Z
    6c88:	a6 01       	movw	r20, r12
    6c8a:	48 1b       	sub	r20, r24
    6c8c:	51 09       	sbc	r21, r1
    6c8e:	87 fd       	sbrc	r24, 7
    6c90:	53 95       	inc	r21
    6c92:	06 c0       	rjmp	.+12     	; 0x6ca0 <ProcessMixer+0x9f4>
					}
					// If P2 greater than P1, SINE is the one we want
					else
					{
						// Multiply SQRTSIN[transition] steps (0 to 100)
						temp3 = (int8_t)pgm_read_byte(&SQRTSIN[(int8_t)transition]);
    6c94:	ed 8d       	ldd	r30, Y+29	; 0x1d
    6c96:	fe 8d       	ldd	r31, Y+30	; 0x1e
    6c98:	44 91       	lpm	r20, Z
    6c9a:	55 27       	eor	r21, r21
    6c9c:	47 fd       	sbrc	r20, 7
    6c9e:	50 95       	com	r21
					}

					// Get SINE% (temp2) of difference in volumes (Step1)
					// Step1 is already in 100ths of the difference * 128
					// temp1 is the start volume * 128
					temp3 = temp2 + (Step1 * temp3);
    6ca0:	64 9f       	mul	r22, r20
    6ca2:	c0 01       	movw	r24, r0
    6ca4:	65 9f       	mul	r22, r21
    6ca6:	90 0d       	add	r25, r0
    6ca8:	74 9f       	mul	r23, r20
    6caa:	90 0d       	add	r25, r0
    6cac:	11 24       	eor	r1, r1
    6cae:	82 0f       	add	r24, r18
    6cb0:	93 1f       	adc	r25, r19
				}

				// Round, then rescale to normal value
				temp3 = temp3 + 64;
    6cb2:	bc 01       	movw	r22, r24
    6cb4:	60 5c       	subi	r22, 0xC0	; 192
    6cb6:	7f 4f       	sbci	r23, 0xFF	; 255
				temp3 = temp3 >> 7;
    6cb8:	66 0f       	add	r22, r22
    6cba:	67 2f       	mov	r22, r23
    6cbc:	66 1f       	adc	r22, r22
    6cbe:	77 0b       	sbc	r23, r23
    6cc0:	01 c0       	rjmp	.+2      	; 0x6cc4 <ProcessMixer+0xa18>
			
			// No curve
			else
			{
				// Just use the value of P1 volume as there is no curve
				temp3 = Config.Channel[i].P1_throttle_volume; // Promote to 16 bits
    6cc2:	b9 01       	movw	r22, r18
			}

			// Calculate actual throttle value to the curve
			temp3 = scale32(MonopolarThrottle, temp3);
    6cc4:	c2 01       	movw	r24, r4
    6cc6:	0e 94 33 31 	call	0x6266	; 0x6266 <scale32>

			// At this point, the throttle values are 0 to 2500 (+/-150%)
			// Re-scale throttle values back to neutral-centered system values (+/-1250) 
			// and set the minimum throttle point to 1.1ms.
			// A THROTTLEMIN value of 1000 will result in 2750, or 1.1ms
			temp3 = temp3 - THROTTLEMIN;
    6cca:	88 5e       	subi	r24, 0xE8	; 232
    6ccc:	93 40       	sbci	r25, 0x03	; 3

			// Add offset to channel value
			Config.Channel[i].P1_value += temp3;
    6cce:	d8 01       	movw	r26, r16
    6cd0:	2d 91       	ld	r18, X+
    6cd2:	3c 91       	ld	r19, X
    6cd4:	11 97       	sbiw	r26, 0x01	; 1
    6cd6:	28 0f       	add	r18, r24
    6cd8:	39 1f       	adc	r19, r25
    6cda:	2d 93       	st	X+, r18
    6cdc:	3c 93       	st	X, r19
    6cde:	08 c0       	rjmp	.+16     	; 0x6cf0 <ProcessMixer+0xa44>
    6ce0:	f7 01       	movw	r30, r14
    6ce2:	36 97       	sbiw	r30, 0x06	; 6

		} // No throttle
		
		// No throttles, so clamp to THROTTLEMIN if flagged as a motor
		else if (Config.Channel[i].Motor_marker == MOTOR)
    6ce4:	80 81       	ld	r24, Z
    6ce6:	81 30       	cpi	r24, 0x01	; 1
    6ce8:	19 f4       	brne	.+6      	; 0x6cf0 <ProcessMixer+0xa44>
		{
			Config.Channel[i].P1_value = -THROTTLEOFFSET; // 3750-1250 = 2500 = 1.0ms
    6cea:	f8 01       	movw	r30, r16
    6cec:	91 82       	std	Z+1, r9	; 0x01
    6cee:	80 82       	st	Z, r8
    6cf0:	0a 5d       	subi	r16, 0xDA	; 218
    6cf2:	1f 4f       	sbci	r17, 0xFF	; 255
    6cf4:	f6 e2       	ldi	r31, 0x26	; 38
    6cf6:	ef 0e       	add	r14, r31
    6cf8:	f1 1c       	adc	r15, r1
    6cfa:	26 e2       	ldi	r18, 0x26	; 38
    6cfc:	a2 0e       	add	r10, r18
    6cfe:	b1 1c       	adc	r11, r1
	// Groovy throttle curve handling. Must be after the transition.
	// Uses the transition value, but is not part of the transition
	// mixer. Linear or Sine curve. Reverse Sine done automatically
	//************************************************************ 

	for (i = 0; i < MIX_OUTPUTS; i++)
    6d00:	37 e0       	ldi	r19, 0x07	; 7
    6d02:	0b 36       	cpi	r16, 0x6B	; 107
    6d04:	13 07       	cpc	r17, r19
    6d06:	09 f0       	breq	.+2      	; 0x6d0a <ProcessMixer+0xa5e>
    6d08:	82 cf       	rjmp	.-252    	; 0x6c0e <ProcessMixer+0x962>
    6d0a:	e3 e4       	ldi	r30, 0x43	; 67
    6d0c:	f6 e0       	ldi	r31, 0x06	; 6
    6d0e:	2b e3       	ldi	r18, 0x3B	; 59
    6d10:	36 e0       	ldi	r19, 0x06	; 6
			// Work out distance to cover over stage 2 (P1.n to P2)
			temp2 = Config.Channel[i].P2_offset - Config.Channel[i].P1n_offset;
			temp2 = temp2 << 7;

			// Divide distance into steps
			temp1 = (100 - Config.Channel[i].P1n_position); 
    6d12:	94 e6       	ldi	r25, 0x64	; 100
    6d14:	a9 2e       	mov	r10, r25
    6d16:	b1 2c       	mov	r11, r1
    6d18:	df 01       	movw	r26, r30
    6d1a:	13 97       	sbiw	r26, 0x03	; 3
	//************************************************************ 

	for (i = 0; i < MIX_OUTPUTS; i++)
	{
		// Simplify if all are the same
		if (!((Config.Channel[i].P1_offset == Config.Channel[i].P1n_offset) &&
    6d1c:	ec 90       	ld	r14, X
    6d1e:	12 96       	adiw	r26, 0x02	; 2
    6d20:	cc 90       	ld	r12, X
    6d22:	50 80       	ld	r5, Z
    6d24:	ec 10       	cpse	r14, r12
    6d26:	03 c0       	rjmp	.+6      	; 0x6d2e <ProcessMixer+0xa82>
    6d28:	5e 14       	cp	r5, r14
    6d2a:	09 f4       	brne	.+2      	; 0x6d2e <ProcessMixer+0xa82>
    6d2c:	53 c0       	rjmp	.+166    	; 0x6dd4 <ProcessMixer+0xb28>
		 	 (Config.Channel[i].P2_offset == Config.Channel[i].P1n_offset)))
		{
			// Work out distance to cover over stage 1 (P1 to P1.n)
			temp1 = Config.Channel[i].P1n_offset - Config.Channel[i].P1_offset;
    6d2e:	dd 24       	eor	r13, r13
    6d30:	c7 fc       	sbrc	r12, 7
    6d32:	d0 94       	com	r13
    6d34:	ff 24       	eor	r15, r15
    6d36:	e7 fc       	sbrc	r14, 7
    6d38:	f0 94       	com	r15
    6d3a:	c6 01       	movw	r24, r12
    6d3c:	8e 19       	sub	r24, r14
    6d3e:	9f 09       	sbc	r25, r15
    6d40:	df 01       	movw	r26, r30
    6d42:	12 97       	sbiw	r26, 0x02	; 2
			temp1 = temp1 << 7; // Multiply by 128 so divide gives reasonable step values

			// Divide distance into steps
			temp2 = Config.Channel[i].P1n_position; 
    6d44:	0c 91       	ld	r16, X
    6d46:	11 27       	eor	r17, r17
    6d48:	07 fd       	sbrc	r16, 7
    6d4a:	10 95       	com	r17
		if (!((Config.Channel[i].P1_offset == Config.Channel[i].P1n_offset) &&
		 	 (Config.Channel[i].P2_offset == Config.Channel[i].P1n_offset)))
		{
			// Work out distance to cover over stage 1 (P1 to P1.n)
			temp1 = Config.Channel[i].P1n_offset - Config.Channel[i].P1_offset;
			temp1 = temp1 << 7; // Multiply by 128 so divide gives reasonable step values
    6d4c:	96 95       	lsr	r25
    6d4e:	98 2f       	mov	r25, r24
    6d50:	88 27       	eor	r24, r24
    6d52:	97 95       	ror	r25
    6d54:	87 95       	ror	r24

			// Divide distance into steps
			temp2 = Config.Channel[i].P1n_position; 
			Step1 = ((temp1 + (temp2 >> 1)) / temp2) ; // Divide and round result
    6d56:	a8 01       	movw	r20, r16
    6d58:	55 95       	asr	r21
    6d5a:	47 95       	ror	r20
    6d5c:	84 0f       	add	r24, r20
    6d5e:	95 1f       	adc	r25, r21
    6d60:	b8 01       	movw	r22, r16
    6d62:	0e 94 38 41 	call	0x8270	; 0x8270 <__divmodhi4>
    6d66:	4b 01       	movw	r8, r22
		
			// Work out distance to cover over stage 2 (P1.n to P2)
			temp2 = Config.Channel[i].P2_offset - Config.Channel[i].P1n_offset;
    6d68:	85 2d       	mov	r24, r5
    6d6a:	99 27       	eor	r25, r25
    6d6c:	87 fd       	sbrc	r24, 7
    6d6e:	90 95       	com	r25
    6d70:	8c 19       	sub	r24, r12
    6d72:	9d 09       	sbc	r25, r13
			temp2 = temp2 << 7;

			// Divide distance into steps
			temp1 = (100 - Config.Channel[i].P1n_position); 
    6d74:	b5 01       	movw	r22, r10
    6d76:	60 1b       	sub	r22, r16
    6d78:	71 0b       	sbc	r23, r17
			temp2 = Config.Channel[i].P1n_position; 
			Step1 = ((temp1 + (temp2 >> 1)) / temp2) ; // Divide and round result
		
			// Work out distance to cover over stage 2 (P1.n to P2)
			temp2 = Config.Channel[i].P2_offset - Config.Channel[i].P1n_offset;
			temp2 = temp2 << 7;
    6d7a:	96 95       	lsr	r25
    6d7c:	98 2f       	mov	r25, r24
    6d7e:	88 27       	eor	r24, r24
    6d80:	97 95       	ror	r25
    6d82:	87 95       	ror	r24

			// Divide distance into steps
			temp1 = (100 - Config.Channel[i].P1n_position); 
			Step2 = ((temp2 + (temp1 >> 1)) / temp1) ; // Divide and round result	
    6d84:	ab 01       	movw	r20, r22
    6d86:	55 95       	asr	r21
    6d88:	47 95       	ror	r20
    6d8a:	84 0f       	add	r24, r20
    6d8c:	95 1f       	adc	r25, r21
    6d8e:	0e 94 38 41 	call	0x8270	; 0x8270 <__divmodhi4>

			// Set start (P1) point
			temp3 = Config.Channel[i].P1_offset; // Promote to 16bits
			temp3 = temp3 << 7;
    6d92:	f6 94       	lsr	r15
    6d94:	fe 2c       	mov	r15, r14
    6d96:	ee 24       	eor	r14, r14
    6d98:	f7 94       	ror	r15
    6d9a:	e7 94       	ror	r14

			// Count up transition steps of the appropriate step size
			for (j = 0; j < transition; j++)
    6d9c:	40 e0       	ldi	r20, 0x00	; 0
    6d9e:	84 2f       	mov	r24, r20
    6da0:	90 e0       	ldi	r25, 0x00	; 0
    6da2:	86 15       	cp	r24, r6
    6da4:	97 05       	cpc	r25, r7
    6da6:	54 f4       	brge	.+20     	; 0x6dbc <ProcessMixer+0xb10>
			{
				// If in stage 1 use Step1 size
				if (j < Config.Channel[i].P1n_position)
    6da8:	80 17       	cp	r24, r16
    6daa:	91 07       	cpc	r25, r17
    6dac:	1c f4       	brge	.+6      	; 0x6db4 <ProcessMixer+0xb08>
				{
					temp3 += Step1;
    6dae:	e8 0c       	add	r14, r8
    6db0:	f9 1c       	adc	r15, r9
    6db2:	02 c0       	rjmp	.+4      	; 0x6db8 <ProcessMixer+0xb0c>
				}
				// If in stage 2 use Step2 size
				else
				{
					temp3 += Step2;
    6db4:	e6 0e       	add	r14, r22
    6db6:	f7 1e       	adc	r15, r23
			// Set start (P1) point
			temp3 = Config.Channel[i].P1_offset; // Promote to 16bits
			temp3 = temp3 << 7;

			// Count up transition steps of the appropriate step size
			for (j = 0; j < transition; j++)
    6db8:	4f 5f       	subi	r20, 0xFF	; 255
    6dba:	f1 cf       	rjmp	.-30     	; 0x6d9e <ProcessMixer+0xaf2>
					temp3 += Step2;
				}
			}

			// Reformat into a system-compatible value
			temp3 = ((temp3 + 64) >> 7);							// Round then divide by 128
    6dbc:	c7 01       	movw	r24, r14
    6dbe:	80 5c       	subi	r24, 0xC0	; 192
    6dc0:	9f 4f       	sbci	r25, 0xFF	; 255
    6dc2:	88 0f       	add	r24, r24
    6dc4:	89 2f       	mov	r24, r25
    6dc6:	88 1f       	adc	r24, r24
    6dc8:	99 0b       	sbc	r25, r25
int16_t scale_percent_nooffset(int8_t value)
{
	int16_t temp16_1, temp16_2;

	temp16_1 = value; // Promote
	temp16_2 = (temp16_1 * (int16_t)10);
    6dca:	4a e0       	ldi	r20, 0x0A	; 10
    6dcc:	84 02       	muls	r24, r20
    6dce:	70 01       	movw	r14, r0
    6dd0:	11 24       	eor	r1, r1
				}
			}

			// Reformat into a system-compatible value
			temp3 = ((temp3 + 64) >> 7);							// Round then divide by 128
			P1_solution = scale_percent_nooffset((int8_t)temp3);	
    6dd2:	05 c0       	rjmp	.+10     	; 0x6dde <ProcessMixer+0xb32>
int16_t scale_percent_nooffset(int8_t value)
{
	int16_t temp16_1, temp16_2;

	temp16_1 = value; // Promote
	temp16_2 = (temp16_1 * (int16_t)10);
    6dd4:	55 2d       	mov	r21, r5
    6dd6:	8a e0       	ldi	r24, 0x0A	; 10
    6dd8:	58 02       	muls	r21, r24
    6dda:	70 01       	movw	r14, r0
    6ddc:	11 24       	eor	r1, r1
		{
			P1_solution = scale_percent_nooffset(Config.Channel[i].P1_offset);
		}

		// Add offset to channel value
		Config.Channel[i].P1_value += P1_solution;
    6dde:	d9 01       	movw	r26, r18
    6de0:	4d 91       	ld	r20, X+
    6de2:	5c 91       	ld	r21, X
    6de4:	11 97       	sbiw	r26, 0x01	; 1
    6de6:	4e 0d       	add	r20, r14
    6de8:	5f 1d       	adc	r21, r15
    6dea:	4d 93       	st	X+, r20
    6dec:	5c 93       	st	X, r21
    6dee:	2a 5d       	subi	r18, 0xDA	; 218
    6df0:	3f 4f       	sbci	r19, 0xFF	; 255
    6df2:	b6 96       	adiw	r30, 0x26	; 38
	//************************************************************
	// Per-channel 3-point offset needs to be after the transition  
	// loop as it is non-linear, unlike the transition.
	//************************************************************ 

	for (i = 0; i < MIX_OUTPUTS; i++)
    6df4:	b7 e0       	ldi	r27, 0x07	; 7
    6df6:	e3 37       	cpi	r30, 0x73	; 115
    6df8:	fb 07       	cpc	r31, r27
    6dfa:	09 f0       	breq	.+2      	; 0x6dfe <ProcessMixer+0xb52>
    6dfc:	8d cf       	rjmp	.-230    	; 0x6d18 <ProcessMixer+0xa6c>

		// Add offset to channel value
		Config.Channel[i].P1_value += P1_solution;
	}

} // ProcessMixer()
    6dfe:	e8 96       	adiw	r28, 0x38	; 56
    6e00:	e2 e1       	ldi	r30, 0x12	; 18
    6e02:	0c 94 e0 41 	jmp	0x83c0	; 0x83c0 <__epilogue_restores__>

00006e06 <scale_percent>:
int16_t scale_percent(int8_t value)
{
	int16_t temp16_1, temp16_2;

	temp16_1 = value; // Promote
	temp16_2 = ((temp16_1 * (int16_t)10) + 3750);
    6e06:	2a e0       	ldi	r18, 0x0A	; 10
    6e08:	82 02       	muls	r24, r18
    6e0a:	c0 01       	movw	r24, r0
    6e0c:	11 24       	eor	r1, r1

	return temp16_2;
}
    6e0e:	8a 55       	subi	r24, 0x5A	; 90
    6e10:	91 4f       	sbci	r25, 0xF1	; 241
    6e12:	08 95       	ret

00006e14 <mugui_text_sizestring>:
	\return void
	\date 	12.08.2009
*/
/************************************************************************/
void mugui_text_sizestring(mugui_char_t *s, const unsigned char* font, mugui_size16_t *size)
{
    6e14:	a0 e0       	ldi	r26, 0x00	; 0
    6e16:	b0 e0       	ldi	r27, 0x00	; 0
    6e18:	e0 e1       	ldi	r30, 0x10	; 16
    6e1a:	f7 e3       	ldi	r31, 0x37	; 55
    6e1c:	0c 94 cf 41 	jmp	0x839e	; 0x839e <__prologue_saves__+0x16>
	mugui_uint8_t  indexhighbyte = 0; 		//high byte of the bitmap address in the array
	mugui_uint32_t indexaddress = 0;		//bitmap address in the array (derived from low and high byte)

	/* read header of the font          */
	/* pgm_read_byte is ATMega specific */
	length = strlen(s);
    6e20:	dc 01       	movw	r26, r24
    6e22:	0d 90       	ld	r0, X+
    6e24:	00 20       	and	r0, r0
    6e26:	e9 f7       	brne	.-6      	; 0x6e22 <mugui_text_sizestring+0xe>
    6e28:	11 97       	sbiw	r26, 0x01	; 1
    6e2a:	a8 1b       	sub	r26, r24
    6e2c:	b9 0b       	sbc	r27, r25
	height = pgm_read_byte(&font[4]);
    6e2e:	fb 01       	movw	r30, r22
    6e30:	34 96       	adiw	r30, 0x04	; 4
    6e32:	e4 90       	lpm	r14, Z
    6e34:	f1 2c       	mov	r15, r1

	startcharacter = pgm_read_byte(&font[2]);
    6e36:	32 97       	sbiw	r30, 0x02	; 2
    6e38:	d4 90       	lpm	r13, Z
    6e3a:	ec 01       	movw	r28, r24
    6e3c:	a8 0f       	add	r26, r24
    6e3e:	b9 1f       	adc	r27, r25
	mugui_uint8_t  distance = 1;			//distance between characters
	mugui_uint16_t length = 0;				//temporary length of string
	mugui_uint16_t i = 0;					//counter variable
	mugui_uint16_t startcharacter = 0; 	    //startcharacter of the font
	mugui_uint16_t height = 0;				//height of the bitmap
	mugui_uint16_t width = 0; 				//width of the bitmap
    6e40:	80 e0       	ldi	r24, 0x00	; 0
    6e42:	90 e0       	ldi	r25, 0x00	; 0
	/* pgm_read_byte is ATMega specific */
	length = strlen(s);
	height = pgm_read_byte(&font[4]);

	startcharacter = pgm_read_byte(&font[2]);
	for(i=0;i<length;i++) //every character in prop fonts has its own width
    6e44:	ca 17       	cp	r28, r26
    6e46:	db 07       	cpc	r29, r27
    6e48:	29 f1       	breq	.+74     	; 0x6e94 <mugui_text_sizestring+0x80>
	{
		index = s[i] - startcharacter;
    6e4a:	29 91       	ld	r18, Y+
    6e4c:	2d 19       	sub	r18, r13
		indexhighbyte = pgm_read_byte(&font[index*2 + 5]);
    6e4e:	30 e0       	ldi	r19, 0x00	; 0
    6e50:	22 0f       	add	r18, r18
    6e52:	33 1f       	adc	r19, r19
    6e54:	f9 01       	movw	r30, r18
    6e56:	35 96       	adiw	r30, 0x05	; 5
    6e58:	e6 0f       	add	r30, r22
    6e5a:	f7 1f       	adc	r31, r23
    6e5c:	04 91       	lpm	r16, Z
		indexlowbyte = pgm_read_byte(&font[index*2 + 6]);
    6e5e:	f9 01       	movw	r30, r18
    6e60:	36 96       	adiw	r30, 0x06	; 6
    6e62:	e6 0f       	add	r30, r22
    6e64:	f7 1f       	adc	r31, r23
    6e66:	e4 91       	lpm	r30, Z
		indexaddress = (mugui_int64_t)indexhighbyte;
    6e68:	10 e0       	ldi	r17, 0x00	; 0
    6e6a:	20 e0       	ldi	r18, 0x00	; 0
    6e6c:	30 e0       	ldi	r19, 0x00	; 0
		indexaddress = indexaddress << 8;
    6e6e:	32 2f       	mov	r19, r18
    6e70:	21 2f       	mov	r18, r17
    6e72:	10 2f       	mov	r17, r16
    6e74:	00 27       	eor	r16, r16
		indexaddress += indexlowbyte;
    6e76:	0e 0f       	add	r16, r30
    6e78:	11 1d       	adc	r17, r1
    6e7a:	21 1d       	adc	r18, r1
    6e7c:	31 1d       	adc	r19, r1
		width += pgm_read_byte(&font[indexaddress]) + distance;
    6e7e:	fb 01       	movw	r30, r22
    6e80:	e0 0f       	add	r30, r16
    6e82:	f1 1f       	adc	r31, r17
    6e84:	04 91       	lpm	r16, Z
    6e86:	20 2f       	mov	r18, r16
    6e88:	30 e0       	ldi	r19, 0x00	; 0
    6e8a:	2f 5f       	subi	r18, 0xFF	; 255
    6e8c:	3f 4f       	sbci	r19, 0xFF	; 255
    6e8e:	82 0f       	add	r24, r18
    6e90:	93 1f       	adc	r25, r19
    6e92:	d8 cf       	rjmp	.-80     	; 0x6e44 <mugui_text_sizestring+0x30>
	}

	/* prepare return value */
	size->x = width;
    6e94:	fa 01       	movw	r30, r20
    6e96:	91 83       	std	Z+1, r25	; 0x01
    6e98:	80 83       	st	Z, r24
	size->y = height;
    6e9a:	f3 82       	std	Z+3, r15	; 0x03
    6e9c:	e2 82       	std	Z+2, r14	; 0x02
}
    6e9e:	cd b7       	in	r28, 0x3d	; 61
    6ea0:	de b7       	in	r29, 0x3e	; 62
    6ea2:	e7 e0       	ldi	r30, 0x07	; 7
    6ea4:	0c 94 eb 41 	jmp	0x83d6	; 0x83d6 <__epilogue_restores__+0x16>

00006ea8 <pgm_mugui_scopy>:
	\date 	30.07.2012
	\Created by D. Thompson
*/
/************************************************************************/
void pgm_mugui_scopy(const char *s)
{
    6ea8:	a7 e5       	ldi	r26, 0x57	; 87
    6eaa:	b5 e0       	ldi	r27, 0x05	; 5
	int i = 0;
    6eac:	20 e0       	ldi	r18, 0x00	; 0
    6eae:	30 e0       	ldi	r19, 0x00	; 0
    6eb0:	fc 01       	movw	r30, r24
    6eb2:	e2 0f       	add	r30, r18
    6eb4:	f3 1f       	adc	r31, r19

	// Copy string until terminator but don't over-write buffer
	while((pgm_read_byte(s) != 0x00) && (i < (PBUFFER_SIZE - 1)))
    6eb6:	44 91       	lpm	r20, Z
    6eb8:	44 23       	and	r20, r20
    6eba:	41 f0       	breq	.+16     	; 0x6ecc <pgm_mugui_scopy+0x24>
    6ebc:	2f 30       	cpi	r18, 0x0F	; 15
    6ebe:	31 05       	cpc	r19, r1
    6ec0:	29 f0       	breq	.+10     	; 0x6ecc <pgm_mugui_scopy+0x24>
	{
		pBuffer[i] = pgm_read_byte(s++);
    6ec2:	e4 91       	lpm	r30, Z
    6ec4:	ed 93       	st	X+, r30
		i++;
    6ec6:	2f 5f       	subi	r18, 0xFF	; 255
    6ec8:	3f 4f       	sbci	r19, 0xFF	; 255
    6eca:	f2 cf       	rjmp	.-28     	; 0x6eb0 <pgm_mugui_scopy+0x8>
	}
	
	// Add the terminator regardless of the amount copied
	pBuffer[i] = 0x00;
    6ecc:	f9 01       	movw	r30, r18
    6ece:	e9 5a       	subi	r30, 0xA9	; 169
    6ed0:	fa 4f       	sbci	r31, 0xFA	; 250
    6ed2:	10 82       	st	Z, r1
    6ed4:	08 95       	ret

00006ed6 <mugui_lcd_putc>:
	\date 	13.11.2009
	\Modified by D. Thompson 14/08/2012 - Now hard-coded for proportional, type 2 (verticalCeiling)
*/
/************************************************************************/
mugui_uint16_t mugui_lcd_putc(mugui_char_t c, const unsigned char* font,mugui_uint16_t x, mugui_uint16_t y)
{
    6ed6:	a9 e0       	ldi	r26, 0x09	; 9
    6ed8:	b0 e0       	ldi	r27, 0x00	; 0
    6eda:	e1 e7       	ldi	r30, 0x71	; 113
    6edc:	f7 e3       	ldi	r31, 0x37	; 55
    6ede:	0c 94 c4 41 	jmp	0x8388	; 0x8388 <__prologue_saves__>
    6ee2:	4c 83       	std	Y+4, r20	; 0x04
    6ee4:	2d 83       	std	Y+5, r18	; 0x05
	mugui_uint8_t  tc= 0;	 				//temorary count
	mugui_uint8_t  bytes= 0;  				//bytes per line or row

	/* Read header of the font          */
	/* pgm_read_byte is ATMega specific */
	startcharacter = pgm_read_byte(&font[2]);
    6ee6:	fb 01       	movw	r30, r22
    6ee8:	32 96       	adiw	r30, 0x02	; 2
    6eea:	94 91       	lpm	r25, Z
	height = pgm_read_byte(&font[4]);
    6eec:	32 96       	adiw	r30, 0x02	; 2
    6eee:	e4 91       	lpm	r30, Z
    6ef0:	2e 2e       	mov	r2, r30
    6ef2:	31 2c       	mov	r3, r1

	/* Read the rest of the header */
	index = c - startcharacter;
    6ef4:	89 1b       	sub	r24, r25
	indexhighbyte = pgm_read_byte(&font[index*2 + 5]);
    6ef6:	90 e0       	ldi	r25, 0x00	; 0
    6ef8:	88 0f       	add	r24, r24
    6efa:	99 1f       	adc	r25, r25
    6efc:	fc 01       	movw	r30, r24
    6efe:	35 96       	adiw	r30, 0x05	; 5
    6f00:	e6 0f       	add	r30, r22
    6f02:	f7 1f       	adc	r31, r23
    6f04:	64 90       	lpm	r6, Z
	indexlowbyte = pgm_read_byte(&font[index*2 + 6]);
    6f06:	fc 01       	movw	r30, r24
    6f08:	36 96       	adiw	r30, 0x06	; 6
    6f0a:	e6 0f       	add	r30, r22
    6f0c:	f7 1f       	adc	r31, r23
    6f0e:	84 91       	lpm	r24, Z
	indexaddress = (mugui_int64_t)indexhighbyte;
    6f10:	06 2d       	mov	r16, r6
    6f12:	10 e0       	ldi	r17, 0x00	; 0
    6f14:	20 e0       	ldi	r18, 0x00	; 0
    6f16:	30 e0       	ldi	r19, 0x00	; 0
	indexaddress = indexaddress << 8;
    6f18:	32 2f       	mov	r19, r18
    6f1a:	21 2f       	mov	r18, r17
    6f1c:	10 2f       	mov	r17, r16
    6f1e:	00 27       	eor	r16, r16
	indexaddress += indexlowbyte;
    6f20:	08 0f       	add	r16, r24
    6f22:	11 1d       	adc	r17, r1
    6f24:	21 1d       	adc	r18, r1
    6f26:	31 1d       	adc	r19, r1
	width = pgm_read_byte(&font[indexaddress]);
    6f28:	c8 01       	movw	r24, r16
    6f2a:	fb 01       	movw	r30, r22
    6f2c:	e0 0f       	add	r30, r16
    6f2e:	f1 1f       	adc	r31, r17
    6f30:	64 90       	lpm	r6, Z
    6f32:	71 2c       	mov	r7, r1

	/* Determine the number of bytes for given width */ 
	bytes = ((height-1)>>3)+1;
    6f34:	21 01       	movw	r4, r2
    6f36:	21 e0       	ldi	r18, 0x01	; 1
    6f38:	42 1a       	sub	r4, r18
    6f3a:	51 08       	sbc	r5, r1
    6f3c:	13 e0       	ldi	r17, 0x03	; 3
    6f3e:	56 94       	lsr	r5
    6f40:	47 94       	ror	r4
    6f42:	1a 95       	dec	r17
    6f44:	e1 f7       	brne	.-8      	; 0x6f3e <mugui_lcd_putc+0x68>
    6f46:	43 94       	inc	r4
    6f48:	a4 2d       	mov	r26, r4
    6f4a:	b0 e0       	ldi	r27, 0x00	; 0
    6f4c:	ba 83       	std	Y+2, r27	; 0x02
    6f4e:	a9 83       	std	Y+1, r26	; 0x01
	/* For every column */
	for(tx= 0; tx < width; tx++) //for every row
    6f50:	a1 2c       	mov	r10, r1
    6f52:	b1 2c       	mov	r11, r1
    6f54:	00 e0       	ldi	r16, 0x00	; 0
    6f56:	10 e0       	ldi	r17, 0x00	; 0
    6f58:	4b 01       	movw	r8, r22
    6f5a:	bf ef       	ldi	r27, 0xFF	; 255
    6f5c:	8b 1a       	sub	r8, r27
    6f5e:	9b 0a       	sbc	r9, r27
    6f60:	88 0e       	add	r8, r24
    6f62:	99 1e       	adc	r9, r25
    6f64:	06 15       	cp	r16, r6
    6f66:	17 05       	cpc	r17, r7
    6f68:	08 f0       	brcs	.+2      	; 0x6f6c <mugui_lcd_putc+0x96>
    6f6a:	43 c0       	rjmp	.+134    	; 0x6ff2 <mugui_lcd_putc+0x11c>
    6f6c:	c1 2c       	mov	r12, r1
    6f6e:	d1 2c       	mov	r13, r1
    6f70:	e1 2c       	mov	r14, r1
    6f72:	f1 2c       	mov	r15, r1
    6f74:	94 01       	movw	r18, r8
    6f76:	2a 0d       	add	r18, r10
    6f78:	3b 1d       	adc	r19, r11
    6f7a:	3f 83       	std	Y+7, r19	; 0x07
    6f7c:	2e 83       	std	Y+6, r18	; 0x06
    6f7e:	5c 80       	ldd	r5, Y+4	; 0x04
    6f80:	50 0e       	add	r5, r16
	{
		ty = 0;
		/* For every byte */
		for(tb = 0; tb < bytes; tb ++)
    6f82:	c4 14       	cp	r12, r4
    6f84:	78 f5       	brcc	.+94     	; 0x6fe4 <mugui_lcd_putc+0x10e>
    6f86:	ee 81       	ldd	r30, Y+6	; 0x06
    6f88:	ff 81       	ldd	r31, Y+7	; 0x07
    6f8a:	ec 0d       	add	r30, r12
    6f8c:	fd 1d       	adc	r31, r13
		{
			/* Read bytes from program memory - ATMega specific */
			data = pgm_read_byte(&font[indexaddress + 1 + bytes*tx + tb]);
    6f8e:	34 91       	lpm	r19, Z
    6f90:	3b 83       	std	Y+3, r19	; 0x03
    6f92:	19 86       	std	Y+9, r1	; 0x09
    6f94:	18 86       	std	Y+8, r1	; 0x08
			/* For every bit within the height */
			for(tc = 0;  ( (tc < 8) && (ty < height) ); tc ++)
    6f96:	e2 14       	cp	r14, r2
    6f98:	f3 04       	cpc	r15, r3
    6f9a:	00 f5       	brcc	.+64     	; 0x6fdc <mugui_lcd_putc+0x106>
			{
					/* Determine the bit mask */
					mask = 1<<(tc);
    6f9c:	81 e0       	ldi	r24, 0x01	; 1
    6f9e:	90 e0       	ldi	r25, 0x00	; 0
    6fa0:	08 84       	ldd	r0, Y+8	; 0x08
    6fa2:	02 c0       	rjmp	.+4      	; 0x6fa8 <mugui_lcd_putc+0xd2>
    6fa4:	88 0f       	add	r24, r24
    6fa6:	99 1f       	adc	r25, r25
    6fa8:	0a 94       	dec	r0
    6faa:	e2 f7       	brpl	.-8      	; 0x6fa4 <mugui_lcd_putc+0xce>
					bit = data & mask;
    6fac:	3b 81       	ldd	r19, Y+3	; 0x03
    6fae:	83 23       	and	r24, r19
    6fb0:	4d 81       	ldd	r20, Y+5	; 0x05
    6fb2:	4e 0d       	add	r20, r14
					if(bit)
    6fb4:	88 23       	and	r24, r24
    6fb6:	11 f0       	breq	.+4      	; 0x6fbc <mugui_lcd_putc+0xe6>
					{
						setpixel(buffer,tx+x,ty+y,1);
    6fb8:	21 e0       	ldi	r18, 0x01	; 1
    6fba:	01 c0       	rjmp	.+2      	; 0x6fbe <mugui_lcd_putc+0xe8>
					}
					else
					{
						setpixel(buffer,tx+x,ty+y,0);
    6fbc:	20 e0       	ldi	r18, 0x00	; 0
    6fbe:	65 2d       	mov	r22, r5
    6fc0:	80 e0       	ldi	r24, 0x00	; 0
    6fc2:	91 e0       	ldi	r25, 0x01	; 1
    6fc4:	0e 94 1e 1c 	call	0x383c	; 0x383c <setpixel>
					}
					ty++;
    6fc8:	8f ef       	ldi	r24, 0xFF	; 255
    6fca:	e8 1a       	sub	r14, r24
    6fcc:	f8 0a       	sbc	r15, r24
    6fce:	a8 85       	ldd	r26, Y+8	; 0x08
    6fd0:	b9 85       	ldd	r27, Y+9	; 0x09
    6fd2:	11 96       	adiw	r26, 0x01	; 1
    6fd4:	b9 87       	std	Y+9, r27	; 0x09
    6fd6:	a8 87       	std	Y+8, r26	; 0x08
		for(tb = 0; tb < bytes; tb ++)
		{
			/* Read bytes from program memory - ATMega specific */
			data = pgm_read_byte(&font[indexaddress + 1 + bytes*tx + tb]);
			/* For every bit within the height */
			for(tc = 0;  ( (tc < 8) && (ty < height) ); tc ++)
    6fd8:	18 97       	sbiw	r26, 0x08	; 8
    6fda:	e9 f6       	brne	.-70     	; 0x6f96 <mugui_lcd_putc+0xc0>
    6fdc:	bf ef       	ldi	r27, 0xFF	; 255
    6fde:	cb 1a       	sub	r12, r27
    6fe0:	db 0a       	sbc	r13, r27
    6fe2:	cf cf       	rjmp	.-98     	; 0x6f82 <mugui_lcd_putc+0xac>
	width = pgm_read_byte(&font[indexaddress]);

	/* Determine the number of bytes for given width */ 
	bytes = ((height-1)>>3)+1;
	/* For every column */
	for(tx= 0; tx < width; tx++) //for every row
    6fe4:	0f 5f       	subi	r16, 0xFF	; 255
    6fe6:	1f 4f       	sbci	r17, 0xFF	; 255
    6fe8:	e9 81       	ldd	r30, Y+1	; 0x01
    6fea:	fa 81       	ldd	r31, Y+2	; 0x02
    6fec:	ae 0e       	add	r10, r30
    6fee:	bf 1e       	adc	r11, r31
    6ff0:	b9 cf       	rjmp	.-142    	; 0x6f64 <mugui_lcd_putc+0x8e>
			}
		}
	}

	return width;
}
    6ff2:	c3 01       	movw	r24, r6
    6ff4:	29 96       	adiw	r28, 0x09	; 9
    6ff6:	e2 e1       	ldi	r30, 0x12	; 18
    6ff8:	0c 94 e0 41 	jmp	0x83c0	; 0x83c0 <__epilogue_restores__>

00006ffc <pgm_mugui_lcd_puts>:
	\date 	12.08.2009
	\Modified by D. Thompson 27/07/2012
*/
/************************************************************************/
void pgm_mugui_lcd_puts(const unsigned char* s, const unsigned char* font,mugui_uint16_t x, mugui_uint16_t y)
{
    6ffc:	a0 e0       	ldi	r26, 0x00	; 0
    6ffe:	b0 e0       	ldi	r27, 0x00	; 0
    7000:	e4 e0       	ldi	r30, 0x04	; 4
    7002:	f8 e3       	ldi	r31, 0x38	; 56
    7004:	0c 94 cc 41 	jmp	0x8398	; 0x8398 <__prologue_saves__+0x10>
    7008:	ec 01       	movw	r28, r24
    700a:	7b 01       	movw	r14, r22
    700c:	6a 01       	movw	r12, r20
    700e:	59 01       	movw	r10, r18
	mugui_uint8_t distance  = 1;			// Distance between characters
	mugui_uint16_t xpos     = 0;			// Relative xpos of character
    7010:	00 e0       	ldi	r16, 0x00	; 0
    7012:	10 e0       	ldi	r17, 0x00	; 0

	while(pgm_read_byte(s) != 0x00) 
    7014:	ce 01       	movw	r24, r28
    7016:	fe 01       	movw	r30, r28
    7018:	24 91       	lpm	r18, Z
    701a:	22 23       	and	r18, r18
    701c:	71 f0       	breq	.+28     	; 0x703a <pgm_mugui_lcd_puts+0x3e>
	{
		xpos += mugui_lcd_putc(pgm_read_byte(s++), font, x + xpos, y) + distance;
    701e:	21 96       	adiw	r28, 0x01	; 1
    7020:	fc 01       	movw	r30, r24
    7022:	84 91       	lpm	r24, Z
    7024:	a8 01       	movw	r20, r16
    7026:	4c 0d       	add	r20, r12
    7028:	5d 1d       	adc	r21, r13
    702a:	95 01       	movw	r18, r10
    702c:	b7 01       	movw	r22, r14
    702e:	0e 94 6b 37 	call	0x6ed6	; 0x6ed6 <mugui_lcd_putc>
    7032:	01 96       	adiw	r24, 0x01	; 1
    7034:	08 0f       	add	r16, r24
    7036:	19 1f       	adc	r17, r25
    7038:	ed cf       	rjmp	.-38     	; 0x7014 <pgm_mugui_lcd_puts+0x18>
	}
}
    703a:	cd b7       	in	r28, 0x3d	; 61
    703c:	de b7       	in	r29, 0x3e	; 62
    703e:	ea e0       	ldi	r30, 0x0A	; 10
    7040:	0c 94 e8 41 	jmp	0x83d0	; 0x83d0 <__epilogue_restores__+0x10>

00007044 <mugui_lcd_puts>:
	\return void
	\date 	12.08.2009
*/
/************************************************************************/
void mugui_lcd_puts(mugui_char_t *s, const unsigned char* font,mugui_uint16_t x, mugui_uint16_t y)
{
    7044:	a0 e0       	ldi	r26, 0x00	; 0
    7046:	b0 e0       	ldi	r27, 0x00	; 0
    7048:	e8 e2       	ldi	r30, 0x28	; 40
    704a:	f8 e3       	ldi	r31, 0x38	; 56
    704c:	0c 94 ca 41 	jmp	0x8394	; 0x8394 <__prologue_saves__+0xc>
    7050:	6b 01       	movw	r12, r22
    7052:	5a 01       	movw	r10, r20
    7054:	49 01       	movw	r8, r18
	mugui_uint8_t distance  = 1;			//distance between characters
	mugui_uint16_t xpos     = 0;			//relativ xpos of character
	mugui_uint16_t length 	= 0;			//temporary length of string
	mugui_uint16_t i 		= 0;			//counter variable
	
	length = strlen(s);
    7056:	ec 01       	movw	r28, r24
    7058:	09 90       	ld	r0, Y+
    705a:	00 20       	and	r0, r0
    705c:	e9 f7       	brne	.-6      	; 0x7058 <mugui_lcd_puts+0x14>
    705e:	8c 01       	movw	r16, r24
    7060:	21 97       	sbiw	r28, 0x01	; 1
*/
/************************************************************************/
void mugui_lcd_puts(mugui_char_t *s, const unsigned char* font,mugui_uint16_t x, mugui_uint16_t y)
{
	mugui_uint8_t distance  = 1;			//distance between characters
	mugui_uint16_t xpos     = 0;			//relativ xpos of character
    7062:	e1 2c       	mov	r14, r1
    7064:	f1 2c       	mov	r15, r1
	mugui_uint16_t length 	= 0;			//temporary length of string
	mugui_uint16_t i 		= 0;			//counter variable
	
	length = strlen(s);
	for(i=0; i<length; i++)
    7066:	0c 17       	cp	r16, r28
    7068:	1d 07       	cpc	r17, r29
    706a:	71 f0       	breq	.+28     	; 0x7088 <mugui_lcd_puts+0x44>
	{
		xpos += mugui_lcd_putc(s[i], font, x + xpos, y) + distance;
    706c:	a7 01       	movw	r20, r14
    706e:	4a 0d       	add	r20, r10
    7070:	5b 1d       	adc	r21, r11
    7072:	94 01       	movw	r18, r8
    7074:	b6 01       	movw	r22, r12
    7076:	f8 01       	movw	r30, r16
    7078:	81 91       	ld	r24, Z+
    707a:	8f 01       	movw	r16, r30
    707c:	0e 94 6b 37 	call	0x6ed6	; 0x6ed6 <mugui_lcd_putc>
    7080:	01 96       	adiw	r24, 0x01	; 1
    7082:	e8 0e       	add	r14, r24
    7084:	f9 1e       	adc	r15, r25
    7086:	ef cf       	rjmp	.-34     	; 0x7066 <mugui_lcd_puts+0x22>
	}
}
    7088:	cd b7       	in	r28, 0x3d	; 61
    708a:	de b7       	in	r29, 0x3e	; 62
    708c:	ec e0       	ldi	r30, 0x0C	; 12
    708e:	0c 94 e6 41 	jmp	0x83cc	; 0x83cc <__epilogue_restores__+0xc>

00007092 <Sensor_PID>:
int32_t PID_AvgAccVert = 0;
float 	gyroSmooth[NUMBEROFAXIS];					// Filtered gyro data
	
// Run each loop to average gyro data and also accVert data
void Sensor_PID(void)
{
    7092:	ad e1       	ldi	r26, 0x1D	; 29
    7094:	b0 e0       	ldi	r27, 0x00	; 0
    7096:	ef e4       	ldi	r30, 0x4F	; 79
    7098:	f8 e3       	ldi	r31, 0x38	; 56
    709a:	0c 94 c4 41 	jmp	0x8388	; 0x8388 <__prologue_saves__>
	// RIGHT roll = +ve gyro, UP pitch = +ve gyro and LEFT yaw = +ve gyro.
	// However the way we have organised stick polarity, RIGHT roll and yaw are +ve, and DOWN elevator is too.
	// When combining with the gyro signals, the sticks have to be in the opposite polarity as the gyros.
	// As described above, pitch and yaw are already opposed, but roll needs to be reversed.

	int16_t	RCinputsAxis[NUMBEROFAXIS] = {-RCinputs[AILERON], RCinputs[ELEVATOR], RCinputs[RUDDER]};
    709e:	80 91 24 08 	lds	r24, 0x0824
    70a2:	90 91 25 08 	lds	r25, 0x0825
    70a6:	91 95       	neg	r25
    70a8:	81 95       	neg	r24
    70aa:	91 09       	sbc	r25, r1
    70ac:	98 87       	std	Y+8, r25	; 0x08
    70ae:	8f 83       	std	Y+7, r24	; 0x07
    70b0:	80 91 26 08 	lds	r24, 0x0826
    70b4:	90 91 27 08 	lds	r25, 0x0827
    70b8:	9a 87       	std	Y+10, r25	; 0x0a
    70ba:	89 87       	std	Y+9, r24	; 0x09
    70bc:	80 91 28 08 	lds	r24, 0x0828
    70c0:	90 91 29 08 	lds	r25, 0x0829
    70c4:	9c 87       	std	Y+12, r25	; 0x0c
    70c6:	8b 87       	std	Y+11, r24	; 0x0b
	
	int8_t Stick_rates[FLIGHT_MODES][NUMBEROFAXIS] =
    70c8:	80 91 de 05 	lds	r24, 0x05DE
    70cc:	89 83       	std	Y+1, r24	; 0x01
    70ce:	80 91 e4 05 	lds	r24, 0x05E4
    70d2:	8a 83       	std	Y+2, r24	; 0x02
    70d4:	80 91 ea 05 	lds	r24, 0x05EA
    70d8:	8b 83       	std	Y+3, r24	; 0x03
    70da:	80 91 f0 05 	lds	r24, 0x05F0
    70de:	8c 83       	std	Y+4, r24	; 0x04
    70e0:	80 91 f6 05 	lds	r24, 0x05F6
    70e4:	8d 83       	std	Y+5, r24	; 0x05
    70e6:	80 91 fc 05 	lds	r24, 0x05FC
    70ea:	8e 83       	std	Y+6, r24	; 0x06
		{Config.FlightMode[P1].Roll_Rate, Config.FlightMode[P1].Pitch_Rate, Config.FlightMode[P1].Yaw_Rate},
		{Config.FlightMode[P2].Roll_Rate, Config.FlightMode[P2].Pitch_Rate, Config.FlightMode[P2].Yaw_Rate}
	};
	
	// Gyro LPF scale
	tempf = pgm_read_byte(&LPF_lookup[Config.Gyro_LPF]); // Lookup actual LPF value and promote
    70ec:	60 91 38 06 	lds	r22, 0x0638
    70f0:	e6 2f       	mov	r30, r22
    70f2:	ff 27       	eor	r31, r31
    70f4:	e7 fd       	sbrc	r30, 7
    70f6:	f0 95       	com	r31
    70f8:	eb 57       	subi	r30, 0x7B	; 123
    70fa:	f8 4e       	sbci	r31, 0xE8	; 232
    70fc:	64 91       	lpm	r22, Z
    70fe:	70 e0       	ldi	r23, 0x00	; 0
    7100:	80 e0       	ldi	r24, 0x00	; 0
    7102:	90 e0       	ldi	r25, 0x00	; 0
    7104:	0e 94 0b 40 	call	0x8016	; 0x8016 <__floatunsisf>
    7108:	6b 01       	movw	r12, r22
    710a:	7c 01       	movw	r14, r24
    710c:	87 e6       	ldi	r24, 0x67	; 103
    710e:	a8 2e       	mov	r10, r24
    7110:	85 e0       	ldi	r24, 0x05	; 5
    7112:	b8 2e       	mov	r11, r24
    7114:	9c ef       	ldi	r25, 0xFC	; 252
    7116:	89 2e       	mov	r8, r25
    7118:	97 e0       	ldi	r25, 0x07	; 7
    711a:	99 2e       	mov	r9, r25
    711c:	04 ee       	ldi	r16, 0xE4	; 228
    711e:	17 e0       	ldi	r17, 0x07	; 7
    7120:	23 e2       	ldi	r18, 0x23	; 35
    7122:	36 e0       	ldi	r19, 0x06	; 6
    7124:	3b 8b       	std	Y+19, r19	; 0x13
    7126:	2a 8b       	std	Y+18, r18	; 0x12
    7128:	ae 01       	movw	r20, r28
    712a:	49 5f       	subi	r20, 0xF9	; 249
    712c:	5f 4f       	sbci	r21, 0xFF	; 255
    712e:	5d 8b       	std	Y+21, r21	; 0x15
    7130:	4c 8b       	std	Y+20, r20	; 0x14
    7132:	be 01       	movw	r22, r28
    7134:	6f 5f       	subi	r22, 0xFF	; 255
    7136:	7f 4f       	sbci	r23, 0xFF	; 255
    7138:	7f 8b       	std	Y+23, r23	; 0x17
    713a:	6e 8b       	std	Y+22, r22	; 0x16
    713c:	ce 01       	movw	r24, r28
    713e:	04 96       	adiw	r24, 0x04	; 4
    7140:	99 8b       	std	Y+17, r25	; 0x11
    7142:	88 8b       	std	Y+16, r24	; 0x10
    7144:	a7 e1       	ldi	r26, 0x17	; 23
    7146:	b6 e0       	ldi	r27, 0x06	; 6
    7148:	bf 87       	std	Y+15, r27	; 0x0f
    714a:	ae 87       	std	Y+14, r26	; 0x0e
	
	for (axis = 0; axis <= YAW; axis ++)
    714c:	1d 86       	std	Y+13, r1	; 0x0d
			gyroADC[axis] = 0;
		}
		
		// Work out stick rate divider. 0 is slowest, 4 is fastest.
		// /64 (15.25), /32 (30.5), /16 (61*), /8 (122), /4 (244)
		stick_P1 = RCinputsAxis[axis] >> (4 - (Stick_rates[P1][axis] - 2));
    714e:	26 e0       	ldi	r18, 0x06	; 6
    7150:	62 2e       	mov	r6, r18
    7152:	71 2c       	mov	r7, r1
		//************************************************************
		// Increment and limit gyro I-terms, handle heading hold nicely
		//************************************************************

		// Reduce Gyro drift noise before adding into I-term
		if ((gyroADC[axis] > -GYRO_DEADBAND) && (gyroADC[axis] < GYRO_DEADBAND)) 
    7154:	f5 01       	movw	r30, r10
    7156:	80 81       	ld	r24, Z
    7158:	91 81       	ldd	r25, Z+1	; 0x01
    715a:	04 96       	adiw	r24, 0x04	; 4
    715c:	09 97       	sbiw	r24, 0x09	; 9
    715e:	10 f4       	brcc	.+4      	; 0x7164 <Sensor_PID+0xd2>
		{
			gyroADC[axis] = 0;
    7160:	11 82       	std	Z+1, r1	; 0x01
    7162:	10 82       	st	Z, r1
		}
		
		// Work out stick rate divider. 0 is slowest, 4 is fastest.
		// /64 (15.25), /32 (30.5), /16 (61*), /8 (122), /4 (244)
		stick_P1 = RCinputsAxis[axis] >> (4 - (Stick_rates[P1][axis] - 2));
    7164:	ac 89       	ldd	r26, Y+20	; 0x14
    7166:	bd 89       	ldd	r27, Y+21	; 0x15
    7168:	2d 91       	ld	r18, X+
    716a:	3d 91       	ld	r19, X+
    716c:	bd 8b       	std	Y+21, r27	; 0x15
    716e:	ac 8b       	std	Y+20, r26	; 0x14
    7170:	ee 89       	ldd	r30, Y+22	; 0x16
    7172:	ff 89       	ldd	r31, Y+23	; 0x17
    7174:	41 91       	ld	r20, Z+
    7176:	ff 8b       	std	Y+23, r31	; 0x17
    7178:	ee 8b       	std	Y+22, r30	; 0x16
		stick_P2 = RCinputsAxis[axis] >> (4 - (Stick_rates[P2][axis] - 2));
    717a:	a8 89       	ldd	r26, Y+16	; 0x10
    717c:	b9 89       	ldd	r27, Y+17	; 0x11
    717e:	ed 91       	ld	r30, X+
    7180:	b9 8b       	std	Y+17, r27	; 0x11
    7182:	a8 8b       	std	Y+16, r26	; 0x10

		// Calculate I-term from gyro and stick data 
		// These may look similar, but they are constrained quite differently.
		IntegralGyro[P1][axis] += (gyroADC[axis] + stick_P1);
    7184:	d5 01       	movw	r26, r10
    7186:	0d 90       	ld	r0, X+
    7188:	bc 91       	ld	r27, X
    718a:	a0 2d       	mov	r26, r0
    718c:	bd 8f       	std	Y+29, r27	; 0x1d
    718e:	ac 8f       	std	Y+28, r26	; 0x1c
			gyroADC[axis] = 0;
		}
		
		// Work out stick rate divider. 0 is slowest, 4 is fastest.
		// /64 (15.25), /32 (30.5), /16 (61*), /8 (122), /4 (244)
		stick_P1 = RCinputsAxis[axis] >> (4 - (Stick_rates[P1][axis] - 2));
    7190:	b3 01       	movw	r22, r6
    7192:	64 1b       	sub	r22, r20
    7194:	71 09       	sbc	r23, r1
    7196:	47 fd       	sbrc	r20, 7
    7198:	73 95       	inc	r23
    719a:	c9 01       	movw	r24, r18
    719c:	02 c0       	rjmp	.+4      	; 0x71a2 <Sensor_PID+0x110>
    719e:	95 95       	asr	r25
    71a0:	87 95       	ror	r24
    71a2:	6a 95       	dec	r22
    71a4:	e2 f7       	brpl	.-8      	; 0x719e <Sensor_PID+0x10c>
    71a6:	ac 01       	movw	r20, r24
		stick_P2 = RCinputsAxis[axis] >> (4 - (Stick_rates[P2][axis] - 2));

		// Calculate I-term from gyro and stick data 
		// These may look similar, but they are constrained quite differently.
		IntegralGyro[P1][axis] += (gyroADC[axis] + stick_P1);
    71a8:	4a 0f       	add	r20, r26
    71aa:	5b 1f       	adc	r21, r27
    71ac:	66 27       	eor	r22, r22
    71ae:	57 fd       	sbrc	r21, 7
    71b0:	60 95       	com	r22
    71b2:	76 2f       	mov	r23, r22
    71b4:	d8 01       	movw	r26, r16
    71b6:	2d 90       	ld	r2, X+
    71b8:	3d 90       	ld	r3, X+
    71ba:	4d 90       	ld	r4, X+
    71bc:	5c 90       	ld	r5, X
    71be:	13 97       	sbiw	r26, 0x03	; 3
    71c0:	24 0e       	add	r2, r20
    71c2:	35 1e       	adc	r3, r21
    71c4:	46 1e       	adc	r4, r22
    71c6:	57 1e       	adc	r5, r23
    71c8:	2d 92       	st	X+, r2
    71ca:	3d 92       	st	X+, r3
    71cc:	4d 92       	st	X+, r4
    71ce:	5c 92       	st	X, r5
    71d0:	13 97       	sbiw	r26, 0x03	; 3
		}
		
		// Work out stick rate divider. 0 is slowest, 4 is fastest.
		// /64 (15.25), /32 (30.5), /16 (61*), /8 (122), /4 (244)
		stick_P1 = RCinputsAxis[axis] >> (4 - (Stick_rates[P1][axis] - 2));
		stick_P2 = RCinputsAxis[axis] >> (4 - (Stick_rates[P2][axis] - 2));
    71d2:	a3 01       	movw	r20, r6
    71d4:	4e 1b       	sub	r20, r30
    71d6:	51 09       	sbc	r21, r1
    71d8:	e7 fd       	sbrc	r30, 7
    71da:	53 95       	inc	r21
    71dc:	02 c0       	rjmp	.+4      	; 0x71e2 <Sensor_PID+0x150>
    71de:	35 95       	asr	r19
    71e0:	27 95       	ror	r18
    71e2:	4a 95       	dec	r20
    71e4:	e2 f7       	brpl	.-8      	; 0x71de <Sensor_PID+0x14c>

		// Calculate I-term from gyro and stick data 
		// These may look similar, but they are constrained quite differently.
		IntegralGyro[P1][axis] += (gyroADC[axis] + stick_P1);
		IntegralGyro[P2][axis] += (gyroADC[axis] + stick_P2);
    71e6:	ec 8d       	ldd	r30, Y+28	; 0x1c
    71e8:	fd 8d       	ldd	r31, Y+29	; 0x1d
    71ea:	2e 0f       	add	r18, r30
    71ec:	3f 1f       	adc	r19, r31
    71ee:	a9 01       	movw	r20, r18
    71f0:	66 27       	eor	r22, r22
    71f2:	57 fd       	sbrc	r21, 7
    71f4:	60 95       	com	r22
    71f6:	76 2f       	mov	r23, r22
    71f8:	48 8f       	std	Y+24, r20	; 0x18
    71fa:	59 8f       	std	Y+25, r21	; 0x19
    71fc:	6a 8f       	std	Y+26, r22	; 0x1a
    71fe:	7b 8f       	std	Y+27, r23	; 0x1b
    7200:	1c 96       	adiw	r26, 0x0c	; 12
    7202:	4d 91       	ld	r20, X+
    7204:	5d 91       	ld	r21, X+
    7206:	6d 91       	ld	r22, X+
    7208:	7c 91       	ld	r23, X
    720a:	1f 97       	sbiw	r26, 0x0f	; 15
    720c:	88 8d       	ldd	r24, Y+24	; 0x18
    720e:	99 8d       	ldd	r25, Y+25	; 0x19
    7210:	aa 8d       	ldd	r26, Y+26	; 0x1a
    7212:	bb 8d       	ldd	r27, Y+27	; 0x1b
    7214:	48 0f       	add	r20, r24
    7216:	59 1f       	adc	r21, r25
    7218:	6a 1f       	adc	r22, r26
    721a:	7b 1f       	adc	r23, r27
    721c:	d8 01       	movw	r26, r16
    721e:	1c 96       	adiw	r26, 0x0c	; 12
    7220:	4d 93       	st	X+, r20
    7222:	5d 93       	st	X+, r21
    7224:	6d 93       	st	X+, r22
    7226:	7c 93       	st	X, r23
    7228:	1f 97       	sbiw	r26, 0x0f	; 15

		// Limit the I-terms to the user-set limits
		for (i = P1; i <= P2; i++)
		{
			if (IntegralGyro[i][axis] > Config.Raw_I_Constrain[i][axis])
    722a:	ee 85       	ldd	r30, Y+14	; 0x0e
    722c:	ff 85       	ldd	r31, Y+15	; 0x0f
    722e:	41 91       	ld	r20, Z+
    7230:	51 91       	ld	r21, Z+
    7232:	61 91       	ld	r22, Z+
    7234:	71 91       	ld	r23, Z+
    7236:	ff 87       	std	Y+15, r31	; 0x0f
    7238:	ee 87       	std	Y+14, r30	; 0x0e
    723a:	42 15       	cp	r20, r2
    723c:	53 05       	cpc	r21, r3
    723e:	64 05       	cpc	r22, r4
    7240:	75 05       	cpc	r23, r5
    7242:	2c f4       	brge	.+10     	; 0x724e <Sensor_PID+0x1bc>
			{
				IntegralGyro[i][axis] = Config.Raw_I_Constrain[i][axis];
    7244:	4d 93       	st	X+, r20
    7246:	5d 93       	st	X+, r21
    7248:	6d 93       	st	X+, r22
    724a:	7c 93       	st	X, r23
    724c:	13 97       	sbiw	r26, 0x03	; 3
			}
			if (IntegralGyro[i][axis] < -Config.Raw_I_Constrain[i][axis])
    724e:	70 95       	com	r23
    7250:	60 95       	com	r22
    7252:	50 95       	com	r21
    7254:	41 95       	neg	r20
    7256:	5f 4f       	sbci	r21, 0xFF	; 255
    7258:	6f 4f       	sbci	r22, 0xFF	; 255
    725a:	7f 4f       	sbci	r23, 0xFF	; 255
    725c:	f8 01       	movw	r30, r16
    725e:	20 80       	ld	r2, Z
    7260:	31 80       	ldd	r3, Z+1	; 0x01
    7262:	42 80       	ldd	r4, Z+2	; 0x02
    7264:	53 80       	ldd	r5, Z+3	; 0x03
    7266:	24 16       	cp	r2, r20
    7268:	35 06       	cpc	r3, r21
    726a:	46 06       	cpc	r4, r22
    726c:	57 06       	cpc	r5, r23
    726e:	24 f4       	brge	.+8      	; 0x7278 <Sensor_PID+0x1e6>
			{
				IntegralGyro[i][axis] = -Config.Raw_I_Constrain[i][axis];
    7270:	40 83       	st	Z, r20
    7272:	51 83       	std	Z+1, r21	; 0x01
    7274:	62 83       	std	Z+2, r22	; 0x02
    7276:	73 83       	std	Z+3, r23	; 0x03
		IntegralGyro[P2][axis] += (gyroADC[axis] + stick_P2);

		// Limit the I-terms to the user-set limits
		for (i = P1; i <= P2; i++)
		{
			if (IntegralGyro[i][axis] > Config.Raw_I_Constrain[i][axis])
    7278:	ea 89       	ldd	r30, Y+18	; 0x12
    727a:	fb 89       	ldd	r31, Y+19	; 0x13
    727c:	41 91       	ld	r20, Z+
    727e:	51 91       	ld	r21, Z+
    7280:	61 91       	ld	r22, Z+
    7282:	71 91       	ld	r23, Z+
    7284:	fb 8b       	std	Y+19, r31	; 0x13
    7286:	ea 8b       	std	Y+18, r30	; 0x12
    7288:	d8 01       	movw	r26, r16
    728a:	1c 96       	adiw	r26, 0x0c	; 12
    728c:	2d 90       	ld	r2, X+
    728e:	3d 90       	ld	r3, X+
    7290:	4d 90       	ld	r4, X+
    7292:	5c 90       	ld	r5, X
    7294:	1f 97       	sbiw	r26, 0x0f	; 15
    7296:	42 15       	cp	r20, r2
    7298:	53 05       	cpc	r21, r3
    729a:	64 05       	cpc	r22, r4
    729c:	75 05       	cpc	r23, r5
    729e:	2c f4       	brge	.+10     	; 0x72aa <Sensor_PID+0x218>
			{
				IntegralGyro[i][axis] = Config.Raw_I_Constrain[i][axis];
    72a0:	f8 01       	movw	r30, r16
    72a2:	44 87       	std	Z+12, r20	; 0x0c
    72a4:	55 87       	std	Z+13, r21	; 0x0d
    72a6:	66 87       	std	Z+14, r22	; 0x0e
    72a8:	77 87       	std	Z+15, r23	; 0x0f
			}
			if (IntegralGyro[i][axis] < -Config.Raw_I_Constrain[i][axis])
    72aa:	70 95       	com	r23
    72ac:	60 95       	com	r22
    72ae:	50 95       	com	r21
    72b0:	41 95       	neg	r20
    72b2:	5f 4f       	sbci	r21, 0xFF	; 255
    72b4:	6f 4f       	sbci	r22, 0xFF	; 255
    72b6:	7f 4f       	sbci	r23, 0xFF	; 255
    72b8:	d8 01       	movw	r26, r16
    72ba:	1c 96       	adiw	r26, 0x0c	; 12
    72bc:	2d 90       	ld	r2, X+
    72be:	3d 90       	ld	r3, X+
    72c0:	4d 90       	ld	r4, X+
    72c2:	5c 90       	ld	r5, X
    72c4:	1f 97       	sbiw	r26, 0x0f	; 15
    72c6:	24 16       	cp	r2, r20
    72c8:	35 06       	cpc	r3, r21
    72ca:	46 06       	cpc	r4, r22
    72cc:	57 06       	cpc	r5, r23
    72ce:	2c f4       	brge	.+10     	; 0x72da <Sensor_PID+0x248>
			{
				IntegralGyro[i][axis] = -Config.Raw_I_Constrain[i][axis];
    72d0:	f8 01       	movw	r30, r16
    72d2:	44 87       	std	Z+12, r20	; 0x0c
    72d4:	55 87       	std	Z+13, r21	; 0x0d
    72d6:	66 87       	std	Z+14, r22	; 0x0e
    72d8:	77 87       	std	Z+15, r23	; 0x0f

		//************************************************************
		// Gyro LPF
		//************************************************************	
			
		gyroADCf = gyroADC[axis]; // Promote
    72da:	2c 8d       	ldd	r18, Y+28	; 0x1c
    72dc:	3d 8d       	ldd	r19, Y+29	; 0x1d
    72de:	b9 01       	movw	r22, r18
    72e0:	88 27       	eor	r24, r24
    72e2:	77 fd       	sbrc	r23, 7
    72e4:	80 95       	com	r24
    72e6:	98 2f       	mov	r25, r24
    72e8:	0e 94 0d 40 	call	0x801a	; 0x801a <__floatsisf>
    72ec:	1b 01       	movw	r2, r22
    72ee:	2c 01       	movw	r4, r24

		if (tempf > 1)
    72f0:	20 e0       	ldi	r18, 0x00	; 0
    72f2:	30 e0       	ldi	r19, 0x00	; 0
    72f4:	40 e8       	ldi	r20, 0x80	; 128
    72f6:	5f e3       	ldi	r21, 0x3F	; 63
    72f8:	c7 01       	movw	r24, r14
    72fa:	b6 01       	movw	r22, r12
    72fc:	0e 94 bd 40 	call	0x817a	; 0x817a <__gesf2>
    7300:	18 16       	cp	r1, r24
    7302:	ec f4       	brge	.+58     	; 0x733e <Sensor_PID+0x2ac>
		{
			// Gyro LPF
			gyroSmooth[axis] = (gyroSmooth[axis] * (tempf - 1.0f) + gyroADCf) / tempf;
    7304:	20 e0       	ldi	r18, 0x00	; 0
    7306:	30 e0       	ldi	r19, 0x00	; 0
    7308:	40 e8       	ldi	r20, 0x80	; 128
    730a:	5f e3       	ldi	r21, 0x3F	; 63
    730c:	c7 01       	movw	r24, r14
    730e:	b6 01       	movw	r22, r12
    7310:	0e 94 09 3f 	call	0x7e12	; 0x7e12 <__subsf3>
    7314:	d4 01       	movw	r26, r8
    7316:	2d 91       	ld	r18, X+
    7318:	3d 91       	ld	r19, X+
    731a:	4d 91       	ld	r20, X+
    731c:	5c 91       	ld	r21, X
    731e:	0e 94 c1 40 	call	0x8182	; 0x8182 <__mulsf3>
    7322:	a2 01       	movw	r20, r4
    7324:	91 01       	movw	r18, r2
    7326:	0e 94 0a 3f 	call	0x7e14	; 0x7e14 <__addsf3>
    732a:	a7 01       	movw	r20, r14
    732c:	96 01       	movw	r18, r12
    732e:	0e 94 72 3f 	call	0x7ee4	; 0x7ee4 <__divsf3>
    7332:	f4 01       	movw	r30, r8
    7334:	60 83       	st	Z, r22
    7336:	71 83       	std	Z+1, r23	; 0x01
    7338:	82 83       	std	Z+2, r24	; 0x02
    733a:	93 83       	std	Z+3, r25	; 0x03
    733c:	06 c0       	rjmp	.+12     	; 0x734a <Sensor_PID+0x2b8>
		}
		else
		{
			// Use raw gyroADC[axis] as source for gyro values
			gyroSmooth[axis] =  gyroADCf;
    733e:	d4 01       	movw	r26, r8
    7340:	2d 92       	st	X+, r2
    7342:	3d 92       	st	X+, r3
    7344:	4d 92       	st	X+, r4
    7346:	5c 92       	st	X, r5
    7348:	13 97       	sbiw	r26, 0x03	; 3
		}		
		
		// Demote back to int16_t
		gyroADC[axis] = (int16_t)gyroSmooth[axis];		
    734a:	f4 01       	movw	r30, r8
    734c:	61 91       	ld	r22, Z+
    734e:	71 91       	ld	r23, Z+
    7350:	81 91       	ld	r24, Z+
    7352:	91 91       	ld	r25, Z+
    7354:	4f 01       	movw	r8, r30
    7356:	0e 94 da 3f 	call	0x7fb4	; 0x7fb4 <__fixsfsi>
    735a:	d5 01       	movw	r26, r10
    735c:	6d 93       	st	X+, r22
    735e:	7d 93       	st	X+, r23
    7360:	5d 01       	movw	r10, r26
    7362:	bd 85       	ldd	r27, Y+13	; 0x0d
    7364:	bf 5f       	subi	r27, 0xFF	; 255
    7366:	bd 87       	std	Y+13, r27	; 0x0d
    7368:	0c 5f       	subi	r16, 0xFC	; 252
    736a:	1f 4f       	sbci	r17, 0xFF	; 255
	};
	
	// Gyro LPF scale
	tempf = pgm_read_byte(&LPF_lookup[Config.Gyro_LPF]); // Lookup actual LPF value and promote
	
	for (axis = 0; axis <= YAW; axis ++)
    736c:	b3 30       	cpi	r27, 0x03	; 3
    736e:	09 f0       	breq	.+2      	; 0x7372 <Sensor_PID+0x2e0>
    7370:	f1 ce       	rjmp	.-542    	; 0x7154 <Sensor_PID+0xc2>
		// Demote back to int16_t
		gyroADC[axis] = (int16_t)gyroSmooth[axis];		
	}
	
	// Average accVert prior to Calculate_PID()
	PID_AvgAccVert += accVert;
    7372:	40 91 0c 05 	lds	r20, 0x050C
    7376:	50 91 0d 05 	lds	r21, 0x050D
    737a:	66 27       	eor	r22, r22
    737c:	57 fd       	sbrc	r21, 7
    737e:	60 95       	com	r22
    7380:	76 2f       	mov	r23, r22
    7382:	80 91 2c 05 	lds	r24, 0x052C
    7386:	90 91 2d 05 	lds	r25, 0x052D
    738a:	a0 91 2e 05 	lds	r26, 0x052E
    738e:	b0 91 2f 05 	lds	r27, 0x052F
    7392:	84 0f       	add	r24, r20
    7394:	95 1f       	adc	r25, r21
    7396:	a6 1f       	adc	r26, r22
    7398:	b7 1f       	adc	r27, r23
    739a:	80 93 2c 05 	sts	0x052C, r24
    739e:	90 93 2d 05 	sts	0x052D, r25
    73a2:	a0 93 2e 05 	sts	0x052E, r26
    73a6:	b0 93 2f 05 	sts	0x052F, r27
			
}
    73aa:	6d 96       	adiw	r28, 0x1d	; 29
    73ac:	e2 e1       	ldi	r30, 0x12	; 18
    73ae:	0c 94 e0 41 	jmp	0x83c0	; 0x83c0 <__epilogue_restores__>

000073b2 <Calculate_PID>:

// Run just before PWM output, using averaged data
void Calculate_PID(void)
{
    73b2:	aa e4       	ldi	r26, 0x4A	; 74
    73b4:	b0 e0       	ldi	r27, 0x00	; 0
    73b6:	ef ed       	ldi	r30, 0xDF	; 223
    73b8:	f9 e3       	ldi	r31, 0x39	; 57
    73ba:	0c 94 c4 41 	jmp	0x8388	; 0x8388 <__prologue_saves__>
	int16_t AvAccVert = 0;
	int8_t	axis = 0;
	int8_t i = 0;

	// Initialise arrays with gain values.
	int8_t 	P_gain[FLIGHT_MODES][NUMBEROFAXIS] = 
    73be:	80 91 db 05 	lds	r24, 0x05DB
    73c2:	8d 8b       	std	Y+21, r24	; 0x15
    73c4:	80 91 e1 05 	lds	r24, 0x05E1
    73c8:	8e 8b       	std	Y+22, r24	; 0x16
    73ca:	80 91 e7 05 	lds	r24, 0x05E7
    73ce:	8f 8b       	std	Y+23, r24	; 0x17
    73d0:	80 91 ed 05 	lds	r24, 0x05ED
    73d4:	88 8f       	std	Y+24, r24	; 0x18
    73d6:	80 91 f3 05 	lds	r24, 0x05F3
    73da:	89 8f       	std	Y+25, r24	; 0x19
    73dc:	80 91 f9 05 	lds	r24, 0x05F9
    73e0:	8a 8f       	std	Y+26, r24	; 0x1a
		{
			{Config.FlightMode[P1].Roll_P_mult, Config.FlightMode[P1].Pitch_P_mult, Config.FlightMode[P1].Yaw_P_mult},
		 	{Config.FlightMode[P2].Roll_P_mult, Config.FlightMode[P2].Pitch_P_mult, Config.FlightMode[P2].Yaw_P_mult}
		};

	int8_t 	I_gain[FLIGHT_MODES][NUMBEROFAXIS] = 
    73e2:	80 91 dc 05 	lds	r24, 0x05DC
    73e6:	8f 87       	std	Y+15, r24	; 0x0f
    73e8:	80 91 e2 05 	lds	r24, 0x05E2
    73ec:	88 8b       	std	Y+16, r24	; 0x10
    73ee:	80 91 e8 05 	lds	r24, 0x05E8
    73f2:	89 8b       	std	Y+17, r24	; 0x11
    73f4:	80 91 ee 05 	lds	r24, 0x05EE
    73f8:	8a 8b       	std	Y+18, r24	; 0x12
    73fa:	80 91 f4 05 	lds	r24, 0x05F4
    73fe:	8b 8b       	std	Y+19, r24	; 0x13
    7400:	80 91 fa 05 	lds	r24, 0x05FA
    7404:	8c 8b       	std	Y+20, r24	; 0x14
		{
			{Config.FlightMode[P1].Roll_I_mult, Config.FlightMode[P1].Pitch_I_mult, Config.FlightMode[P1].Yaw_I_mult},
			{Config.FlightMode[P2].Roll_I_mult, Config.FlightMode[P2].Pitch_I_mult, Config.FlightMode[P2].Yaw_I_mult}
		};

	int8_t 	L_gain[FLIGHT_MODES][NUMBEROFAXIS] = 
    7406:	80 91 df 05 	lds	r24, 0x05DF
    740a:	89 87       	std	Y+9, r24	; 0x09
    740c:	80 91 e5 05 	lds	r24, 0x05E5
    7410:	8a 87       	std	Y+10, r24	; 0x0a
		{
			{Config.FlightMode[P1].A_Roll_P_mult, Config.FlightMode[P1].A_Pitch_P_mult, Config.FlightMode[P1].A_Zed_P_mult},
    7412:	20 91 ec 05 	lds	r18, 0x05EC
    7416:	29 a7       	std	Y+41, r18	; 0x29
		{
			{Config.FlightMode[P1].Roll_I_mult, Config.FlightMode[P1].Pitch_I_mult, Config.FlightMode[P1].Yaw_I_mult},
			{Config.FlightMode[P2].Roll_I_mult, Config.FlightMode[P2].Pitch_I_mult, Config.FlightMode[P2].Yaw_I_mult}
		};

	int8_t 	L_gain[FLIGHT_MODES][NUMBEROFAXIS] = 
    7418:	2b 87       	std	Y+11, r18	; 0x0b
    741a:	80 91 f1 05 	lds	r24, 0x05F1
    741e:	8c 87       	std	Y+12, r24	; 0x0c
    7420:	80 91 f7 05 	lds	r24, 0x05F7
    7424:	8d 87       	std	Y+13, r24	; 0x0d
		{
			{Config.FlightMode[P1].A_Roll_P_mult, Config.FlightMode[P1].A_Pitch_P_mult, Config.FlightMode[P1].A_Zed_P_mult},
			{Config.FlightMode[P2].A_Roll_P_mult, Config.FlightMode[P2].A_Pitch_P_mult, Config.FlightMode[P2].A_Zed_P_mult}
    7426:	30 91 fe 05 	lds	r19, 0x05FE
    742a:	3a a7       	std	Y+42, r19	; 0x2a
		{
			{Config.FlightMode[P1].Roll_I_mult, Config.FlightMode[P1].Pitch_I_mult, Config.FlightMode[P1].Yaw_I_mult},
			{Config.FlightMode[P2].Roll_I_mult, Config.FlightMode[P2].Pitch_I_mult, Config.FlightMode[P2].Yaw_I_mult}
		};

	int8_t 	L_gain[FLIGHT_MODES][NUMBEROFAXIS] = 
    742c:	3e 87       	std	Y+14, r19	; 0x0e
			{Config.FlightMode[P1].A_Roll_P_mult, Config.FlightMode[P1].A_Pitch_P_mult, Config.FlightMode[P1].A_Zed_P_mult},
			{Config.FlightMode[P2].A_Roll_P_mult, Config.FlightMode[P2].A_Pitch_P_mult, Config.FlightMode[P2].A_Zed_P_mult}
		};

	// Only for roll and pitch acc trim
	int16_t	L_trim[FLIGHT_MODES][2] =
    742e:	80 91 a8 07 	lds	r24, 0x07A8
    7432:	90 91 a9 07 	lds	r25, 0x07A9
    7436:	9a 83       	std	Y+2, r25	; 0x02
    7438:	89 83       	std	Y+1, r24	; 0x01
    743a:	80 91 ac 07 	lds	r24, 0x07AC
    743e:	90 91 ad 07 	lds	r25, 0x07AD
    7442:	9c 83       	std	Y+4, r25	; 0x04
    7444:	8b 83       	std	Y+3, r24	; 0x03
    7446:	80 91 aa 07 	lds	r24, 0x07AA
    744a:	90 91 ab 07 	lds	r25, 0x07AB
    744e:	9e 83       	std	Y+6, r25	; 0x06
    7450:	8d 83       	std	Y+5, r24	; 0x05
    7452:	80 91 ae 07 	lds	r24, 0x07AE
    7456:	90 91 af 07 	lds	r25, 0x07AF
    745a:	98 87       	std	Y+8, r25	; 0x08
    745c:	8f 83       	std	Y+7, r24	; 0x07
			{Config.Rolltrim[P1], Config.Pitchtrim[P1]},
			{Config.Rolltrim[P2], Config.Pitchtrim[P2]}
		};

	// Average accVert
	AvAccVert = (int16_t)(PID_AvgAccVert / LoopCount);
    745e:	20 91 0e 05 	lds	r18, 0x050E
    7462:	30 e0       	ldi	r19, 0x00	; 0
    7464:	40 e0       	ldi	r20, 0x00	; 0
    7466:	50 e0       	ldi	r21, 0x00	; 0
    7468:	60 91 2c 05 	lds	r22, 0x052C
    746c:	70 91 2d 05 	lds	r23, 0x052D
    7470:	80 91 2e 05 	lds	r24, 0x052E
    7474:	90 91 2f 05 	lds	r25, 0x052F
    7478:	0e 94 6e 41 	call	0x82dc	; 0x82dc <__divmodsi4>
    747c:	29 96       	adiw	r28, 0x09	; 9
    747e:	2c af       	std	Y+60, r18	; 0x3c
    7480:	3d af       	std	Y+61, r19	; 0x3d
    7482:	4e af       	std	Y+62, r20	; 0x3e
    7484:	5f af       	std	Y+63, r21	; 0x3f
    7486:	29 97       	sbiw	r28, 0x09	; 9
	PID_AvgAccVert = 0;							// Reset average
    7488:	10 92 2c 05 	sts	0x052C, r1
    748c:	10 92 2d 05 	sts	0x052D, r1
    7490:	10 92 2e 05 	sts	0x052E, r1
    7494:	10 92 2f 05 	sts	0x052F, r1
		// Add in gyro Yaw trim
		//************************************************************

		if (axis == YAW)
		{
			PID_gyro_temp1 = (int32_t)(Config.FlightMode[P1].Yaw_trim << 6);
    7498:	80 91 eb 05 	lds	r24, 0x05EB
    749c:	40 e4       	ldi	r20, 0x40	; 64
    749e:	84 02       	muls	r24, r20
    74a0:	c0 01       	movw	r24, r0
    74a2:	11 24       	eor	r1, r1
    74a4:	9c 01       	movw	r18, r24
    74a6:	44 27       	eor	r20, r20
    74a8:	37 fd       	sbrc	r19, 7
    74aa:	40 95       	com	r20
    74ac:	54 2f       	mov	r21, r20
    74ae:	29 af       	std	Y+57, r18	; 0x39
    74b0:	3a af       	std	Y+58, r19	; 0x3a
    74b2:	4b af       	std	Y+59, r20	; 0x3b
    74b4:	5c af       	std	Y+60, r21	; 0x3c
			PID_gyro_temp2 = (int32_t)(Config.FlightMode[P2].Yaw_trim << 6);
    74b6:	80 91 fd 05 	lds	r24, 0x05FD
    74ba:	30 e4       	ldi	r19, 0x40	; 64
    74bc:	83 02       	muls	r24, r19
    74be:	c0 01       	movw	r24, r0
    74c0:	11 24       	eor	r1, r1
    74c2:	9c 01       	movw	r18, r24
    74c4:	44 27       	eor	r20, r20
    74c6:	37 fd       	sbrc	r19, 7
    74c8:	40 95       	com	r20
    74ca:	54 2f       	mov	r21, r20
    74cc:	21 96       	adiw	r28, 0x01	; 1
    74ce:	2c af       	std	Y+60, r18	; 0x3c
    74d0:	3d af       	std	Y+61, r19	; 0x3d
    74d2:	4e af       	std	Y+62, r20	; 0x3e
    74d4:	5f af       	std	Y+63, r21	; 0x3f
    74d6:	21 97       	sbiw	r28, 0x01	; 1
    74d8:	e7 e6       	ldi	r30, 0x67	; 103
    74da:	f5 e0       	ldi	r31, 0x05	; 5
    74dc:	f8 af       	std	Y+56, r31	; 0x38
    74de:	ef ab       	std	Y+55, r30	; 0x37
    74e0:	fe 01       	movw	r30, r28
    74e2:	75 96       	adiw	r30, 0x15	; 21
    74e4:	fe ab       	std	Y+54, r31	; 0x36
    74e6:	ed ab       	std	Y+53, r30	; 0x35
    74e8:	e4 ee       	ldi	r30, 0xE4	; 228
    74ea:	f7 e0       	ldi	r31, 0x07	; 7
    74ec:	fe a3       	std	Y+38, r31	; 0x26
    74ee:	ed a3       	std	Y+37, r30	; 0x25
    74f0:	fe 01       	movw	r30, r28
    74f2:	3f 96       	adiw	r30, 0x0f	; 15
    74f4:	fc ab       	std	Y+52, r31	; 0x34
    74f6:	eb ab       	std	Y+51, r30	; 0x33
    74f8:	39 96       	adiw	r30, 0x09	; 9
    74fa:	fa ab       	std	Y+50, r31	; 0x32
    74fc:	e9 ab       	std	Y+49, r30	; 0x31
    74fe:	36 97       	sbiw	r30, 0x06	; 6
    7500:	f8 ab       	std	Y+48, r31	; 0x30
    7502:	ef a7       	std	Y+47, r30	; 0x2f
    7504:	ef ef       	ldi	r30, 0xFF	; 255
    7506:	f5 e0       	ldi	r31, 0x05	; 5
    7508:	fe a7       	std	Y+46, r31	; 0x2e
    750a:	ed a7       	std	Y+45, r30	; 0x2d
    750c:	e8 e0       	ldi	r30, 0x08	; 8
    750e:	f8 e0       	ldi	r31, 0x08	; 8
    7510:	fc a3       	std	Y+36, r31	; 0x24
    7512:	eb a3       	std	Y+35, r30	; 0x23
    7514:	e9 e8       	ldi	r30, 0x89	; 137
    7516:	f5 e0       	ldi	r31, 0x05	; 5
    7518:	f8 a7       	std	Y+40, r31	; 0x28
    751a:	ef a3       	std	Y+39, r30	; 0x27
    751c:	fe 01       	movw	r30, r28
    751e:	31 96       	adiw	r30, 0x01	; 1
    7520:	fa a3       	std	Y+34, r31	; 0x22
    7522:	e9 a3       	std	Y+33, r30	; 0x21
    7524:	e4 e1       	ldi	r30, 0x14	; 20
    7526:	f8 e0       	ldi	r31, 0x08	; 8
    7528:	f8 a3       	std	Y+32, r31	; 0x20
    752a:	ef 8f       	std	Y+31, r30	; 0x1f
    752c:	1e 01       	movw	r2, r28
    752e:	fc e0       	ldi	r31, 0x0C	; 12
    7530:	2f 0e       	add	r2, r31
    7532:	31 1c       	adc	r3, r1
    7534:	eb e0       	ldi	r30, 0x0B	; 11
    7536:	f6 e0       	ldi	r31, 0x06	; 6
    7538:	fc a7       	std	Y+44, r31	; 0x2c
    753a:	eb a7       	std	Y+43, r30	; 0x2b
    753c:	2b 96       	adiw	r28, 0x0b	; 11
    753e:	1f ae       	std	Y+63, r1	; 0x3f
    7540:	1e ae       	std	Y+62, r1	; 0x3e
    7542:	2b 97       	sbiw	r28, 0x0b	; 11
		}
		// Reset PID_gyro variables to that data does not accumulate cross-axis
		else
		{
			PID_gyro_temp1 = 0;
			PID_gyro_temp2 = 0;
    7544:	81 2c       	mov	r8, r1
    7546:	91 2c       	mov	r9, r1
    7548:	54 01       	movw	r10, r8
			PID_gyro_temp2 = (int32_t)(Config.FlightMode[P2].Yaw_trim << 6);
		}
		// Reset PID_gyro variables to that data does not accumulate cross-axis
		else
		{
			PID_gyro_temp1 = 0;
    754a:	80 e0       	ldi	r24, 0x00	; 0
    754c:	90 e0       	ldi	r25, 0x00	; 0
    754e:	dc 01       	movw	r26, r24
		//************************************************************
		// Calculate PID gains
		//************************************************************

		// Gyro P-term													// Profile P1
		PID_gyro_temp1 += gyroADC[axis] * P_gain[P1][axis];				// Multiply P-term (Max gain of 127)
    7550:	ef a9       	ldd	r30, Y+55	; 0x37
    7552:	f8 ad       	ldd	r31, Y+56	; 0x38
    7554:	01 91       	ld	r16, Z+
    7556:	11 91       	ld	r17, Z+
    7558:	f8 af       	std	Y+56, r31	; 0x38
    755a:	ef ab       	std	Y+55, r30	; 0x37
    755c:	ed a9       	ldd	r30, Y+53	; 0x35
    755e:	fe a9       	ldd	r31, Y+54	; 0x36
    7560:	41 91       	ld	r20, Z+
    7562:	fe ab       	std	Y+54, r31	; 0x36
    7564:	ed ab       	std	Y+53, r30	; 0x35
    7566:	40 03       	mulsu	r20, r16
    7568:	90 01       	movw	r18, r0
    756a:	41 9f       	mul	r20, r17
    756c:	30 0d       	add	r19, r0
    756e:	11 24       	eor	r1, r1
    7570:	44 27       	eor	r20, r20
    7572:	37 fd       	sbrc	r19, 7
    7574:	40 95       	com	r20
    7576:	54 2f       	mov	r21, r20
    7578:	28 0f       	add	r18, r24
    757a:	39 1f       	adc	r19, r25
    757c:	4a 1f       	adc	r20, r26
    757e:	5b 1f       	adc	r21, r27
		PID_gyro_temp1 = PID_gyro_temp1 * (int32_t)3;					// Multiply by 3
    7580:	a3 e0       	ldi	r26, 0x03	; 3
    7582:	b0 e0       	ldi	r27, 0x00	; 0
    7584:	0e 94 b1 41 	call	0x8362	; 0x8362 <__muluhisi3>
    7588:	25 96       	adiw	r28, 0x05	; 5
    758a:	6c af       	std	Y+60, r22	; 0x3c
    758c:	7d af       	std	Y+61, r23	; 0x3d
    758e:	8e af       	std	Y+62, r24	; 0x3e
    7590:	9f af       	std	Y+63, r25	; 0x3f
    7592:	25 97       	sbiw	r28, 0x05	; 5

		// Gyro I-term
		PID_Gyro_I_actual1 = IntegralGyro[P1][axis] * I_gain[P1][axis];	// Multiply I-term (Max gain of 127)
    7594:	eb a9       	ldd	r30, Y+51	; 0x33
    7596:	fc a9       	ldd	r31, Y+52	; 0x34
    7598:	a1 91       	ld	r26, Z+
    759a:	fc ab       	std	Y+52, r31	; 0x34
    759c:	eb ab       	std	Y+51, r30	; 0x33
    759e:	ed a1       	ldd	r30, Y+37	; 0x25
    75a0:	fe a1       	ldd	r31, Y+38	; 0x26
    75a2:	20 81       	ld	r18, Z
    75a4:	31 81       	ldd	r19, Z+1	; 0x01
    75a6:	42 81       	ldd	r20, Z+2	; 0x02
    75a8:	53 81       	ldd	r21, Z+3	; 0x03
    75aa:	bb 27       	eor	r27, r27
    75ac:	a7 fd       	sbrc	r26, 7
    75ae:	b0 95       	com	r27
    75b0:	0e 94 bc 41 	call	0x8378	; 0x8378 <__mulshisi3>
    75b4:	2b 01       	movw	r4, r22
    75b6:	3c 01       	movw	r6, r24
		PID_Gyro_I_actual1 = PID_Gyro_I_actual1 >> 5;					// Divide by 32
    75b8:	35 e0       	ldi	r19, 0x05	; 5
    75ba:	75 94       	asr	r7
    75bc:	67 94       	ror	r6
    75be:	57 94       	ror	r5
    75c0:	47 94       	ror	r4
    75c2:	3a 95       	dec	r19
    75c4:	d1 f7       	brne	.-12     	; 0x75ba <Calculate_PID+0x208>

		// Gyro P-term
		PID_gyro_temp2 += gyroADC[axis] * P_gain[P2][axis];				// Profile P2
    75c6:	e9 a9       	ldd	r30, Y+49	; 0x31
    75c8:	fa a9       	ldd	r31, Y+50	; 0x32
    75ca:	41 91       	ld	r20, Z+
    75cc:	fa ab       	std	Y+50, r31	; 0x32
    75ce:	e9 ab       	std	Y+49, r30	; 0x31
    75d0:	40 03       	mulsu	r20, r16
    75d2:	90 01       	movw	r18, r0
    75d4:	41 9f       	mul	r20, r17
    75d6:	30 0d       	add	r19, r0
    75d8:	11 24       	eor	r1, r1
    75da:	44 27       	eor	r20, r20
    75dc:	37 fd       	sbrc	r19, 7
    75de:	40 95       	com	r20
    75e0:	54 2f       	mov	r21, r20
    75e2:	28 0d       	add	r18, r8
    75e4:	39 1d       	adc	r19, r9
    75e6:	4a 1d       	adc	r20, r10
    75e8:	5b 1d       	adc	r21, r11
		PID_gyro_temp2 = PID_gyro_temp2 * (int32_t)3;
    75ea:	a3 e0       	ldi	r26, 0x03	; 3
    75ec:	b0 e0       	ldi	r27, 0x00	; 0
    75ee:	0e 94 b1 41 	call	0x8362	; 0x8362 <__muluhisi3>
    75f2:	4b 01       	movw	r8, r22
    75f4:	5c 01       	movw	r10, r24

		// Gyro I-term
		PID_Gyro_I_actual2 = IntegralGyro[P2][axis] * I_gain[P2][axis];
    75f6:	ef a5       	ldd	r30, Y+47	; 0x2f
    75f8:	f8 a9       	ldd	r31, Y+48	; 0x30
    75fa:	a1 91       	ld	r26, Z+
    75fc:	f8 ab       	std	Y+48, r31	; 0x30
    75fe:	ef a7       	std	Y+47, r30	; 0x2f
    7600:	ed a1       	ldd	r30, Y+37	; 0x25
    7602:	fe a1       	ldd	r31, Y+38	; 0x26
    7604:	24 85       	ldd	r18, Z+12	; 0x0c
    7606:	35 85       	ldd	r19, Z+13	; 0x0d
    7608:	46 85       	ldd	r20, Z+14	; 0x0e
    760a:	57 85       	ldd	r21, Z+15	; 0x0f
    760c:	bb 27       	eor	r27, r27
    760e:	a7 fd       	sbrc	r26, 7
    7610:	b0 95       	com	r27
    7612:	0e 94 bc 41 	call	0x8378	; 0x8378 <__mulshisi3>
		PID_Gyro_I_actual2 = PID_Gyro_I_actual2 >> 5;
    7616:	45 e0       	ldi	r20, 0x05	; 5
    7618:	95 95       	asr	r25
    761a:	87 95       	ror	r24
    761c:	77 95       	ror	r23
    761e:	67 95       	ror	r22
    7620:	4a 95       	dec	r20
    7622:	d1 f7       	brne	.-12     	; 0x7618 <Calculate_PID+0x266>
		//************************************************************
		// I-term output limits
		//************************************************************

		// P1 limits
		if (PID_Gyro_I_actual1 > Config.Raw_I_Limits[P1][axis]) 
    7624:	ed a5       	ldd	r30, Y+45	; 0x2d
    7626:	fe a5       	ldd	r31, Y+46	; 0x2e
    7628:	c1 90       	ld	r12, Z+
    762a:	d1 90       	ld	r13, Z+
    762c:	e1 90       	ld	r14, Z+
    762e:	f1 90       	ld	r15, Z+
    7630:	fe a7       	std	Y+46, r31	; 0x2e
    7632:	ed a7       	std	Y+45, r30	; 0x2d
    7634:	c4 14       	cp	r12, r4
    7636:	d5 04       	cpc	r13, r5
    7638:	e6 04       	cpc	r14, r6
    763a:	f7 04       	cpc	r15, r7
    763c:	84 f0       	brlt	.+32     	; 0x765e <Calculate_PID+0x2ac>
		{
			PID_Gyro_I_actual1 = Config.Raw_I_Limits[P1][axis];
		}
		else if (PID_Gyro_I_actual1 < -Config.Raw_I_Limits[P1][axis]) 
    763e:	00 27       	eor	r16, r16
    7640:	11 27       	eor	r17, r17
    7642:	98 01       	movw	r18, r16
    7644:	0c 19       	sub	r16, r12
    7646:	1d 09       	sbc	r17, r13
    7648:	2e 09       	sbc	r18, r14
    764a:	3f 09       	sbc	r19, r15
    764c:	73 01       	movw	r14, r6
    764e:	62 01       	movw	r12, r4
    7650:	40 16       	cp	r4, r16
    7652:	51 06       	cpc	r5, r17
    7654:	62 06       	cpc	r6, r18
    7656:	73 06       	cpc	r7, r19
    7658:	14 f4       	brge	.+4      	; 0x765e <Calculate_PID+0x2ac>
    765a:	68 01       	movw	r12, r16
    765c:	79 01       	movw	r14, r18
		{
			PID_Gyro_I_actual1 = -Config.Raw_I_Limits[P1][axis];	
		}

		// P2 limits
		if (PID_Gyro_I_actual2 > Config.Raw_I_Limits[P2][axis]) 
    765e:	eb a5       	ldd	r30, Y+43	; 0x2b
    7660:	fc a5       	ldd	r31, Y+44	; 0x2c
    7662:	21 91       	ld	r18, Z+
    7664:	31 91       	ld	r19, Z+
    7666:	41 91       	ld	r20, Z+
    7668:	51 91       	ld	r21, Z+
    766a:	fc a7       	std	Y+44, r31	; 0x2c
    766c:	eb a7       	std	Y+43, r30	; 0x2b
    766e:	2b 8f       	std	Y+27, r18	; 0x1b
    7670:	3c 8f       	std	Y+28, r19	; 0x1c
    7672:	4d 8f       	std	Y+29, r20	; 0x1d
    7674:	5e 8f       	std	Y+30, r21	; 0x1e
    7676:	26 17       	cp	r18, r22
    7678:	37 07       	cpc	r19, r23
    767a:	48 07       	cpc	r20, r24
    767c:	59 07       	cpc	r21, r25
    767e:	b4 f0       	brlt	.+44     	; 0x76ac <Calculate_PID+0x2fa>
		{
			PID_Gyro_I_actual2 = Config.Raw_I_Limits[P2][axis];
		}
		else if (PID_Gyro_I_actual2 < -Config.Raw_I_Limits[P2][axis]) 
    7680:	89 01       	movw	r16, r18
    7682:	9a 01       	movw	r18, r20
    7684:	30 95       	com	r19
    7686:	20 95       	com	r18
    7688:	10 95       	com	r17
    768a:	01 95       	neg	r16
    768c:	1f 4f       	sbci	r17, 0xFF	; 255
    768e:	2f 4f       	sbci	r18, 0xFF	; 255
    7690:	3f 4f       	sbci	r19, 0xFF	; 255
    7692:	6b 8f       	std	Y+27, r22	; 0x1b
    7694:	7c 8f       	std	Y+28, r23	; 0x1c
    7696:	8d 8f       	std	Y+29, r24	; 0x1d
    7698:	9e 8f       	std	Y+30, r25	; 0x1e
    769a:	60 17       	cp	r22, r16
    769c:	71 07       	cpc	r23, r17
    769e:	82 07       	cpc	r24, r18
    76a0:	93 07       	cpc	r25, r19
    76a2:	24 f4       	brge	.+8      	; 0x76ac <Calculate_PID+0x2fa>
    76a4:	0b 8f       	std	Y+27, r16	; 0x1b
    76a6:	1c 8f       	std	Y+28, r17	; 0x1c
    76a8:	2d 8f       	std	Y+29, r18	; 0x1d
    76aa:	3e 8f       	std	Y+30, r19	; 0x1e

		//************************************************************
		// Sum Gyro P, I and D terms and rescale
		//************************************************************

		PID_Gyros[P1][axis] = (int16_t)((PID_gyro_temp1 + PID_Gyro_I_actual1) >> PID_SCALE);  // PID_SCALE was 6, now 5
    76ac:	25 96       	adiw	r28, 0x05	; 5
    76ae:	4c ac       	ldd	r4, Y+60	; 0x3c
    76b0:	5d ac       	ldd	r5, Y+61	; 0x3d
    76b2:	6e ac       	ldd	r6, Y+62	; 0x3e
    76b4:	7f ac       	ldd	r7, Y+63	; 0x3f
    76b6:	25 97       	sbiw	r28, 0x05	; 5
    76b8:	4c 0c       	add	r4, r12
    76ba:	5d 1c       	adc	r5, r13
    76bc:	6e 1c       	adc	r6, r14
    76be:	7f 1c       	adc	r7, r15
    76c0:	a6 e0       	ldi	r26, 0x06	; 6
    76c2:	75 94       	asr	r7
    76c4:	67 94       	ror	r6
    76c6:	57 94       	ror	r5
    76c8:	47 94       	ror	r4
    76ca:	aa 95       	dec	r26
    76cc:	d1 f7       	brne	.-12     	; 0x76c2 <Calculate_PID+0x310>
    76ce:	eb a1       	ldd	r30, Y+35	; 0x23
    76d0:	fc a1       	ldd	r31, Y+36	; 0x24
    76d2:	51 82       	std	Z+1, r5	; 0x01
    76d4:	40 82       	st	Z, r4
		PID_Gyros[P2][axis] = (int16_t)((PID_gyro_temp2 + PID_Gyro_I_actual2) >> PID_SCALE);
    76d6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    76d8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    76da:	ad 8d       	ldd	r26, Y+29	; 0x1d
    76dc:	be 8d       	ldd	r27, Y+30	; 0x1e
    76de:	88 0d       	add	r24, r8
    76e0:	99 1d       	adc	r25, r9
    76e2:	aa 1d       	adc	r26, r10
    76e4:	bb 1d       	adc	r27, r11
    76e6:	26 e0       	ldi	r18, 0x06	; 6
    76e8:	b5 95       	asr	r27
    76ea:	a7 95       	ror	r26
    76ec:	97 95       	ror	r25
    76ee:	87 95       	ror	r24
    76f0:	2a 95       	dec	r18
    76f2:	d1 f7       	brne	.-12     	; 0x76e8 <Calculate_PID+0x336>
    76f4:	97 83       	std	Z+7, r25	; 0x07
    76f6:	86 83       	std	Z+6, r24	; 0x06

		//************************************************************
		// Calculate error from angle data and trim (roll and pitch only)
		//************************************************************

		if (axis < YAW)
    76f8:	2a 96       	adiw	r28, 0x0a	; 10
    76fa:	ff ad       	ldd	r31, Y+63	; 0x3f
    76fc:	2a 97       	sbiw	r28, 0x0a	; 10
    76fe:	f2 30       	cpi	r31, 0x02	; 2
    7700:	e9 f1       	breq	.+122    	; 0x777c <Calculate_PID+0x3ca>
		{
			// Do for P1 and P2
			for (i = P1; i <= P2; i++)
			{
				PID_acc_temp1 = angle[axis] - L_trim[i][axis];				// Offset angle with trim
    7702:	ef a1       	ldd	r30, Y+39	; 0x27
    7704:	f8 a5       	ldd	r31, Y+40	; 0x28
    7706:	40 81       	ld	r20, Z
    7708:	51 81       	ldd	r21, Z+1	; 0x01
    770a:	e9 a1       	ldd	r30, Y+33	; 0x21
    770c:	fa a1       	ldd	r31, Y+34	; 0x22
    770e:	80 81       	ld	r24, Z
    7710:	91 81       	ldd	r25, Z+1	; 0x01
    7712:	9a 01       	movw	r18, r20
    7714:	28 1b       	sub	r18, r24
    7716:	39 0b       	sbc	r19, r25
    7718:	a9 e0       	ldi	r26, 0x09	; 9
    771a:	b0 e0       	ldi	r27, 0x00	; 0
    771c:	ac 0f       	add	r26, r28
    771e:	bd 1f       	adc	r27, r29
    7720:	2b 96       	adiw	r28, 0x0b	; 11
    7722:	ee ad       	ldd	r30, Y+62	; 0x3e
    7724:	ff ad       	ldd	r31, Y+63	; 0x3f
    7726:	2b 97       	sbiw	r28, 0x0b	; 11
    7728:	ae 0f       	add	r26, r30
    772a:	bf 1f       	adc	r27, r31
				PID_acc_temp1 *= L_gain[i][axis];							// P-term of accelerometer (Max gain of 127)
    772c:	ac 91       	ld	r26, X
    772e:	bb 27       	eor	r27, r27
    7730:	a7 fd       	sbrc	r26, 7
    7732:	b0 95       	com	r27
    7734:	0e 94 93 41 	call	0x8326	; 0x8326 <__mulhisi3>
				PID_ACCs[i][axis] = (int16_t)(PID_acc_temp1 >> 8);			// Reduce and convert to integer
    7738:	bb 27       	eor	r27, r27
    773a:	97 fd       	sbrc	r25, 7
    773c:	ba 95       	dec	r27
    773e:	a9 2f       	mov	r26, r25
    7740:	98 2f       	mov	r25, r24
    7742:	87 2f       	mov	r24, r23
    7744:	ef 8d       	ldd	r30, Y+31	; 0x1f
    7746:	f8 a1       	ldd	r31, Y+32	; 0x20
    7748:	91 83       	std	Z+1, r25	; 0x01
    774a:	80 83       	st	Z, r24
		if (axis < YAW)
		{
			// Do for P1 and P2
			for (i = P1; i <= P2; i++)
			{
				PID_acc_temp1 = angle[axis] - L_trim[i][axis];				// Offset angle with trim
    774c:	e9 a1       	ldd	r30, Y+33	; 0x21
    774e:	fa a1       	ldd	r31, Y+34	; 0x22
    7750:	84 81       	ldd	r24, Z+4	; 0x04
    7752:	95 81       	ldd	r25, Z+5	; 0x05
    7754:	9a 01       	movw	r18, r20
    7756:	28 1b       	sub	r18, r24
    7758:	39 0b       	sbc	r19, r25
				PID_acc_temp1 *= L_gain[i][axis];							// P-term of accelerometer (Max gain of 127)
    775a:	f1 01       	movw	r30, r2
    775c:	a0 81       	ld	r26, Z
    775e:	bb 27       	eor	r27, r27
    7760:	a7 fd       	sbrc	r26, 7
    7762:	b0 95       	com	r27
    7764:	0e 94 93 41 	call	0x8326	; 0x8326 <__mulhisi3>
				PID_ACCs[i][axis] = (int16_t)(PID_acc_temp1 >> 8);			// Reduce and convert to integer
    7768:	bb 27       	eor	r27, r27
    776a:	97 fd       	sbrc	r25, 7
    776c:	ba 95       	dec	r27
    776e:	a9 2f       	mov	r26, r25
    7770:	98 2f       	mov	r25, r24
    7772:	87 2f       	mov	r24, r23
    7774:	ef 8d       	ldd	r30, Y+31	; 0x1f
    7776:	f8 a1       	ldd	r31, Y+32	; 0x20
    7778:	97 83       	std	Z+7, r25	; 0x07
    777a:	86 83       	std	Z+6, r24	; 0x06
	PID_AvgAccVert = 0;							// Reset average

	//************************************************************
	// PID loop
	//************************************************************
	for (axis = 0; axis <= YAW; axis ++)
    777c:	2b 96       	adiw	r28, 0x0b	; 11
    777e:	ee ad       	ldd	r30, Y+62	; 0x3e
    7780:	ff ad       	ldd	r31, Y+63	; 0x3f
    7782:	2b 97       	sbiw	r28, 0x0b	; 11
    7784:	32 97       	sbiw	r30, 0x02	; 2
    7786:	e1 f1       	breq	.+120    	; 0x7800 <Calculate_PID+0x44e>
	{
		//************************************************************
		// Add in gyro Yaw trim
		//************************************************************

		if (axis == YAW)
    7788:	2a 96       	adiw	r28, 0x0a	; 10
    778a:	ff ad       	ldd	r31, Y+63	; 0x3f
    778c:	2a 97       	sbiw	r28, 0x0a	; 10
    778e:	f1 30       	cpi	r31, 0x01	; 1
    7790:	39 f0       	breq	.+14     	; 0x77a0 <Calculate_PID+0x3ee>
		}
		// Reset PID_gyro variables to that data does not accumulate cross-axis
		else
		{
			PID_gyro_temp1 = 0;
			PID_gyro_temp2 = 0;
    7792:	81 2c       	mov	r8, r1
    7794:	91 2c       	mov	r9, r1
    7796:	54 01       	movw	r10, r8
			PID_gyro_temp2 = (int32_t)(Config.FlightMode[P2].Yaw_trim << 6);
		}
		// Reset PID_gyro variables to that data does not accumulate cross-axis
		else
		{
			PID_gyro_temp1 = 0;
    7798:	80 e0       	ldi	r24, 0x00	; 0
    779a:	90 e0       	ldi	r25, 0x00	; 0
    779c:	dc 01       	movw	r26, r24
    779e:	0a c0       	rjmp	.+20     	; 0x77b4 <Calculate_PID+0x402>
		//************************************************************

		if (axis == YAW)
		{
			PID_gyro_temp1 = (int32_t)(Config.FlightMode[P1].Yaw_trim << 6);
			PID_gyro_temp2 = (int32_t)(Config.FlightMode[P2].Yaw_trim << 6);
    77a0:	21 96       	adiw	r28, 0x01	; 1
    77a2:	8c ac       	ldd	r8, Y+60	; 0x3c
    77a4:	9d ac       	ldd	r9, Y+61	; 0x3d
    77a6:	ae ac       	ldd	r10, Y+62	; 0x3e
    77a8:	bf ac       	ldd	r11, Y+63	; 0x3f
    77aa:	21 97       	sbiw	r28, 0x01	; 1
		// Add in gyro Yaw trim
		//************************************************************

		if (axis == YAW)
		{
			PID_gyro_temp1 = (int32_t)(Config.FlightMode[P1].Yaw_trim << 6);
    77ac:	89 ad       	ldd	r24, Y+57	; 0x39
    77ae:	9a ad       	ldd	r25, Y+58	; 0x3a
    77b0:	ab ad       	ldd	r26, Y+59	; 0x3b
    77b2:	bc ad       	ldd	r27, Y+60	; 0x3c
    77b4:	2b 96       	adiw	r28, 0x0b	; 11
    77b6:	ee ad       	ldd	r30, Y+62	; 0x3e
    77b8:	ff ad       	ldd	r31, Y+63	; 0x3f
    77ba:	2b 97       	sbiw	r28, 0x0b	; 11
    77bc:	31 96       	adiw	r30, 0x01	; 1
    77be:	2b 96       	adiw	r28, 0x0b	; 11
    77c0:	ff af       	std	Y+63, r31	; 0x3f
    77c2:	ee af       	std	Y+62, r30	; 0x3e
    77c4:	2b 97       	sbiw	r28, 0x0b	; 11
    77c6:	ed a1       	ldd	r30, Y+37	; 0x25
    77c8:	fe a1       	ldd	r31, Y+38	; 0x26
    77ca:	34 96       	adiw	r30, 0x04	; 4
    77cc:	fe a3       	std	Y+38, r31	; 0x26
    77ce:	ed a3       	std	Y+37, r30	; 0x25
    77d0:	eb a1       	ldd	r30, Y+35	; 0x23
    77d2:	fc a1       	ldd	r31, Y+36	; 0x24
    77d4:	32 96       	adiw	r30, 0x02	; 2
    77d6:	fc a3       	std	Y+36, r31	; 0x24
    77d8:	eb a3       	std	Y+35, r30	; 0x23
    77da:	ef a1       	ldd	r30, Y+39	; 0x27
    77dc:	f8 a5       	ldd	r31, Y+40	; 0x28
    77de:	32 96       	adiw	r30, 0x02	; 2
    77e0:	f8 a7       	std	Y+40, r31	; 0x28
    77e2:	ef a3       	std	Y+39, r30	; 0x27
    77e4:	e9 a1       	ldd	r30, Y+33	; 0x21
    77e6:	fa a1       	ldd	r31, Y+34	; 0x22
    77e8:	32 96       	adiw	r30, 0x02	; 2
    77ea:	fa a3       	std	Y+34, r31	; 0x22
    77ec:	e9 a3       	std	Y+33, r30	; 0x21
    77ee:	ef 8d       	ldd	r30, Y+31	; 0x1f
    77f0:	f8 a1       	ldd	r31, Y+32	; 0x20
    77f2:	32 96       	adiw	r30, 0x02	; 2
    77f4:	f8 a3       	std	Y+32, r31	; 0x20
    77f6:	ef 8f       	std	Y+31, r30	; 0x1f
    77f8:	ff ef       	ldi	r31, 0xFF	; 255
    77fa:	2f 1a       	sub	r2, r31
    77fc:	3f 0a       	sbc	r3, r31
    77fe:	a8 ce       	rjmp	.-688    	; 0x7550 <Calculate_PID+0x19e>
	//************************************************************

	// Do for P1 and P2
	for (i = P1; i <= P2; i++)
	{
		PID_acc_temp1 = -AvAccVert;				// Get and copy Z-acc value. Negate to oppose G
    7800:	27 96       	adiw	r28, 0x07	; 7
    7802:	ce ac       	ldd	r12, Y+62	; 0x3e
    7804:	df ac       	ldd	r13, Y+63	; 0x3f
    7806:	27 97       	sbiw	r28, 0x07	; 7
    7808:	d1 94       	neg	r13
    780a:	c1 94       	neg	r12
    780c:	d1 08       	sbc	r13, r1

		PID_acc_temp1 *= L_gain[i][YAW];		// Multiply P-term (Max gain of 127)
    780e:	96 01       	movw	r18, r12
    7810:	f9 a5       	ldd	r31, Y+41	; 0x29
    7812:	af 2f       	mov	r26, r31
    7814:	bb 27       	eor	r27, r27
    7816:	a7 fd       	sbrc	r26, 7
    7818:	b0 95       	com	r27
    781a:	0e 94 93 41 	call	0x8326	; 0x8326 <__mulhisi3>

		PID_acc_temp1 = PID_acc_temp1 >> 4;		// Moderate Z-acc to reasonable values
    781e:	44 e0       	ldi	r20, 0x04	; 4
    7820:	95 95       	asr	r25
    7822:	87 95       	ror	r24
    7824:	77 95       	ror	r23
    7826:	67 95       	ror	r22
    7828:	4a 95       	dec	r20
    782a:	d1 f7       	brne	.-12     	; 0x7820 <Calculate_PID+0x46e>

		if (PID_acc_temp1 > MAX_ZGAIN)			// Limit to +/-MAX_ZGAIN
    782c:	65 3f       	cpi	r22, 0xF5	; 245
    782e:	21 e0       	ldi	r18, 0x01	; 1
    7830:	72 07       	cpc	r23, r18
    7832:	81 05       	cpc	r24, r1
    7834:	91 05       	cpc	r25, r1
    7836:	64 f4       	brge	.+24     	; 0x7850 <Calculate_PID+0x49e>
		{
			PID_acc_temp1 = MAX_ZGAIN;
		}
		if (PID_acc_temp1 < -MAX_ZGAIN)
    7838:	6c 30       	cpi	r22, 0x0C	; 12
    783a:	3e ef       	ldi	r19, 0xFE	; 254
    783c:	73 07       	cpc	r23, r19
    783e:	3f ef       	ldi	r19, 0xFF	; 255
    7840:	83 07       	cpc	r24, r19
    7842:	93 07       	cpc	r25, r19
    7844:	4c f4       	brge	.+18     	; 0x7858 <Calculate_PID+0x4a6>
		{
			PID_acc_temp1 = -MAX_ZGAIN;
    7846:	6c e0       	ldi	r22, 0x0C	; 12
    7848:	7e ef       	ldi	r23, 0xFE	; 254
    784a:	8f ef       	ldi	r24, 0xFF	; 255
    784c:	9f ef       	ldi	r25, 0xFF	; 255
    784e:	04 c0       	rjmp	.+8      	; 0x7858 <Calculate_PID+0x4a6>

		PID_acc_temp1 = PID_acc_temp1 >> 4;		// Moderate Z-acc to reasonable values

		if (PID_acc_temp1 > MAX_ZGAIN)			// Limit to +/-MAX_ZGAIN
		{
			PID_acc_temp1 = MAX_ZGAIN;
    7850:	64 ef       	ldi	r22, 0xF4	; 244
    7852:	71 e0       	ldi	r23, 0x01	; 1
    7854:	80 e0       	ldi	r24, 0x00	; 0
    7856:	90 e0       	ldi	r25, 0x00	; 0
		if (PID_acc_temp1 < -MAX_ZGAIN)
		{
			PID_acc_temp1 = -MAX_ZGAIN;
		}

		PID_ACCs[i][YAW] = (int16_t)PID_acc_temp1; // Copy to global values
    7858:	70 93 19 08 	sts	0x0819, r23
    785c:	60 93 18 08 	sts	0x0818, r22
	// Do for P1 and P2
	for (i = P1; i <= P2; i++)
	{
		PID_acc_temp1 = -AvAccVert;				// Get and copy Z-acc value. Negate to oppose G

		PID_acc_temp1 *= L_gain[i][YAW];		// Multiply P-term (Max gain of 127)
    7860:	96 01       	movw	r18, r12
    7862:	4a a5       	ldd	r20, Y+42	; 0x2a
    7864:	a4 2f       	mov	r26, r20
    7866:	bb 27       	eor	r27, r27
    7868:	a7 fd       	sbrc	r26, 7
    786a:	b0 95       	com	r27
    786c:	0e 94 93 41 	call	0x8326	; 0x8326 <__mulhisi3>

		PID_acc_temp1 = PID_acc_temp1 >> 4;		// Moderate Z-acc to reasonable values
    7870:	34 e0       	ldi	r19, 0x04	; 4
    7872:	95 95       	asr	r25
    7874:	87 95       	ror	r24
    7876:	77 95       	ror	r23
    7878:	67 95       	ror	r22
    787a:	3a 95       	dec	r19
    787c:	d1 f7       	brne	.-12     	; 0x7872 <Calculate_PID+0x4c0>

		if (PID_acc_temp1 > MAX_ZGAIN)			// Limit to +/-MAX_ZGAIN
    787e:	65 3f       	cpi	r22, 0xF5	; 245
    7880:	51 e0       	ldi	r21, 0x01	; 1
    7882:	75 07       	cpc	r23, r21
    7884:	81 05       	cpc	r24, r1
    7886:	91 05       	cpc	r25, r1
    7888:	64 f4       	brge	.+24     	; 0x78a2 <Calculate_PID+0x4f0>
		{
			PID_acc_temp1 = MAX_ZGAIN;
		}
		if (PID_acc_temp1 < -MAX_ZGAIN)
    788a:	6c 30       	cpi	r22, 0x0C	; 12
    788c:	ae ef       	ldi	r26, 0xFE	; 254
    788e:	7a 07       	cpc	r23, r26
    7890:	af ef       	ldi	r26, 0xFF	; 255
    7892:	8a 07       	cpc	r24, r26
    7894:	9a 07       	cpc	r25, r26
    7896:	4c f4       	brge	.+18     	; 0x78aa <Calculate_PID+0x4f8>
		{
			PID_acc_temp1 = -MAX_ZGAIN;
    7898:	6c e0       	ldi	r22, 0x0C	; 12
    789a:	7e ef       	ldi	r23, 0xFE	; 254
    789c:	8f ef       	ldi	r24, 0xFF	; 255
    789e:	9f ef       	ldi	r25, 0xFF	; 255
    78a0:	04 c0       	rjmp	.+8      	; 0x78aa <Calculate_PID+0x4f8>

		PID_acc_temp1 = PID_acc_temp1 >> 4;		// Moderate Z-acc to reasonable values

		if (PID_acc_temp1 > MAX_ZGAIN)			// Limit to +/-MAX_ZGAIN
		{
			PID_acc_temp1 = MAX_ZGAIN;
    78a2:	64 ef       	ldi	r22, 0xF4	; 244
    78a4:	71 e0       	ldi	r23, 0x01	; 1
    78a6:	80 e0       	ldi	r24, 0x00	; 0
    78a8:	90 e0       	ldi	r25, 0x00	; 0
		if (PID_acc_temp1 < -MAX_ZGAIN)
		{
			PID_acc_temp1 = -MAX_ZGAIN;
		}

		PID_ACCs[i][YAW] = (int16_t)PID_acc_temp1; // Copy to global values
    78aa:	70 93 1f 08 	sts	0x081F, r23
    78ae:	60 93 1e 08 	sts	0x081E, r22
	}
}
    78b2:	c6 5b       	subi	r28, 0xB6	; 182
    78b4:	df 4f       	sbci	r29, 0xFF	; 255
    78b6:	e2 e1       	ldi	r30, 0x12	; 18
    78b8:	0c 94 e0 41 	jmp	0x83c0	; 0x83c0 <__epilogue_restores__>

000078bc <RxGetChannels>:
int16_t MonopolarThrottle;				// Monopolar throttle

// Get raw flight channel data (~2500 to 5000) and remove zero offset
// Use channel mapping for configurability
void RxGetChannels(void)
{
    78bc:	cf 93       	push	r28
    78be:	df 93       	push	r29
    78c0:	c3 e8       	ldi	r28, 0x83	; 131
    78c2:	d7 e0       	ldi	r29, 0x07	; 7
    78c4:	a2 e2       	ldi	r26, 0x22	; 34
    78c6:	b8 e0       	ldi	r27, 0x08	; 8
	static	int16_t	OldRxSum;			// Sum of all major channels
	int16_t	RxSumDiff;
	int16_t	RxSum, i;

	// Remove zero offsets
	for (i=0;i<MAX_RC_CHANNELS;i++)
    78c8:	80 e0       	ldi	r24, 0x00	; 0
    78ca:	90 e0       	ldi	r25, 0x00	; 0
	{
		RCinputs[i]	= RxChannel[i] - Config.RxChannelZeroOffset[i];
    78cc:	fc 01       	movw	r30, r24
    78ce:	ee 0f       	add	r30, r30
    78d0:	ff 1f       	adc	r31, r31
    78d2:	ee 54       	subi	r30, 0x4E	; 78
    78d4:	f8 4f       	sbci	r31, 0xF8	; 248
    78d6:	20 81       	ld	r18, Z
    78d8:	31 81       	ldd	r19, Z+1	; 0x01
    78da:	49 91       	ld	r20, Y+
    78dc:	59 91       	ld	r21, Y+
    78de:	24 1b       	sub	r18, r20
    78e0:	35 0b       	sbc	r19, r21
    78e2:	2d 93       	st	X+, r18
    78e4:	3d 93       	st	X+, r19
	static	int16_t	OldRxSum;			// Sum of all major channels
	int16_t	RxSumDiff;
	int16_t	RxSum, i;

	// Remove zero offsets
	for (i=0;i<MAX_RC_CHANNELS;i++)
    78e6:	01 96       	adiw	r24, 0x01	; 1
    78e8:	88 30       	cpi	r24, 0x08	; 8
    78ea:	91 05       	cpc	r25, r1
    78ec:	79 f7       	brne	.-34     	; 0x78cc <RxGetChannels+0x10>
	{
		RCinputs[i]	= RxChannel[i] - Config.RxChannelZeroOffset[i];
	}

	// Special handling for monopolar throttle
	MonopolarThrottle = RxChannel[THROTTLE] - Config.RxChannelZeroOffset[THROTTLE];
    78ee:	20 91 b2 07 	lds	r18, 0x07B2
    78f2:	30 91 b3 07 	lds	r19, 0x07B3
    78f6:	80 91 83 07 	lds	r24, 0x0783
    78fa:	90 91 84 07 	lds	r25, 0x0784
    78fe:	28 1b       	sub	r18, r24
    7900:	39 0b       	sbc	r19, r25
    7902:	30 93 21 08 	sts	0x0821, r19
    7906:	20 93 20 08 	sts	0x0820, r18

	// Bipolar throttle must use the nominal mid-point
	RCinputs[THROTTLE] = RxChannel[THROTTLE] - 3750;
    790a:	80 91 b2 07 	lds	r24, 0x07B2
    790e:	90 91 b3 07 	lds	r25, 0x07B3
    7912:	86 5a       	subi	r24, 0xA6	; 166
    7914:	9e 40       	sbci	r25, 0x0E	; 14
    7916:	90 93 23 08 	sts	0x0823, r25
    791a:	80 93 22 08 	sts	0x0822, r24

	// Reverse primary channels as requested
	if (Config.AileronPol == REVERSED)
    791e:	80 91 d6 05 	lds	r24, 0x05D6
    7922:	81 30       	cpi	r24, 0x01	; 1
    7924:	59 f4       	brne	.+22     	; 0x793c <RxGetChannels+0x80>
	{
		RCinputs[AILERON] = -RCinputs[AILERON];
    7926:	80 91 24 08 	lds	r24, 0x0824
    792a:	90 91 25 08 	lds	r25, 0x0825
    792e:	91 95       	neg	r25
    7930:	81 95       	neg	r24
    7932:	91 09       	sbc	r25, r1
    7934:	90 93 25 08 	sts	0x0825, r25
    7938:	80 93 24 08 	sts	0x0824, r24
	}

	if (Config.ElevatorPol == REVERSED)
    793c:	80 91 d7 05 	lds	r24, 0x05D7
    7940:	81 30       	cpi	r24, 0x01	; 1
    7942:	59 f4       	brne	.+22     	; 0x795a <RxGetChannels+0x9e>
	{
		RCinputs[ELEVATOR] = -RCinputs[ELEVATOR];
    7944:	80 91 26 08 	lds	r24, 0x0826
    7948:	90 91 27 08 	lds	r25, 0x0827
    794c:	91 95       	neg	r25
    794e:	81 95       	neg	r24
    7950:	91 09       	sbc	r25, r1
    7952:	90 93 27 08 	sts	0x0827, r25
    7956:	80 93 26 08 	sts	0x0826, r24
	}

	if (Config.RudderPol == REVERSED)
    795a:	80 91 d8 05 	lds	r24, 0x05D8
    795e:	81 30       	cpi	r24, 0x01	; 1
    7960:	59 f4       	brne	.+22     	; 0x7978 <RxGetChannels+0xbc>
	{
		RCinputs[RUDDER] = -RCinputs[RUDDER];
    7962:	80 91 28 08 	lds	r24, 0x0828
    7966:	90 91 29 08 	lds	r25, 0x0829
    796a:	91 95       	neg	r25
    796c:	81 95       	neg	r24
    796e:	91 09       	sbc	r25, r1
    7970:	90 93 29 08 	sts	0x0829, r25
    7974:	80 93 28 08 	sts	0x0828, r24
	}

	// Calculate RX activity
	RxSum = RCinputs[AILERON] + RCinputs[ELEVATOR] + RCinputs[RUDDER];
    7978:	80 91 24 08 	lds	r24, 0x0824
    797c:	90 91 25 08 	lds	r25, 0x0825
    7980:	40 91 26 08 	lds	r20, 0x0826
    7984:	50 91 27 08 	lds	r21, 0x0827
    7988:	84 0f       	add	r24, r20
    798a:	95 1f       	adc	r25, r21
    798c:	40 91 28 08 	lds	r20, 0x0828
    7990:	50 91 29 08 	lds	r21, 0x0829
    7994:	84 0f       	add	r24, r20
    7996:	95 1f       	adc	r25, r21
	RxSumDiff = RxSum - OldRxSum;
    7998:	40 91 30 05 	lds	r20, 0x0530
    799c:	50 91 31 05 	lds	r21, 0x0531
    79a0:	bc 01       	movw	r22, r24
    79a2:	64 1b       	sub	r22, r20
    79a4:	75 0b       	sbc	r23, r21
    79a6:	ab 01       	movw	r20, r22

	// Set RX activity flag if movement above noise floor or throttle above minimum
	if ((RxSumDiff > NOISE_THRESH) || (RxSumDiff < -NOISE_THRESH) || (MonopolarThrottle > THROTTLEIDLE)) 
    79a8:	4b 5f       	subi	r20, 0xFB	; 251
    79aa:	5f 4f       	sbci	r21, 0xFF	; 255
    79ac:	60 91 16 05 	lds	r22, 0x0516
    79b0:	4b 30       	cpi	r20, 0x0B	; 11
    79b2:	51 05       	cpc	r21, r1
    79b4:	18 f4       	brcc	.+6      	; 0x79bc <RxGetChannels+0x100>
    79b6:	23 33       	cpi	r18, 0x33	; 51
    79b8:	31 05       	cpc	r19, r1
    79ba:	14 f0       	brlt	.+4      	; 0x79c0 <RxGetChannels+0x104>
	{
		Flight_flags |= (1 << RxActivity);
    79bc:	61 60       	ori	r22, 0x01	; 1
    79be:	01 c0       	rjmp	.+2      	; 0x79c2 <RxGetChannels+0x106>
	}
	else 
	{
		Flight_flags &= ~(1 << RxActivity);
    79c0:	6e 7f       	andi	r22, 0xFE	; 254
    79c2:	60 93 16 05 	sts	0x0516, r22
	}
	
	// Preset RCinputs[NOCHAN] for sanity
	RCinputs[NOCHAN] = 0;
    79c6:	10 92 33 08 	sts	0x0833, r1
    79ca:	10 92 32 08 	sts	0x0832, r1

	OldRxSum = RxSum;
    79ce:	90 93 31 05 	sts	0x0531, r25
    79d2:	80 93 30 05 	sts	0x0530, r24
}
    79d6:	df 91       	pop	r29
    79d8:	cf 91       	pop	r28
    79da:	08 95       	ret

000079dc <CenterSticks>:

// Center sticks on request from Menu
void CenterSticks(void)		
{
    79dc:	a0 e1       	ldi	r26, 0x10	; 16
    79de:	b0 e0       	ldi	r27, 0x00	; 0
    79e0:	e4 ef       	ldi	r30, 0xF4	; 244
    79e2:	fc e3       	ldi	r31, 0x3C	; 60
    79e4:	0c 94 d2 41 	jmp	0x83a4	; 0x83a4 <__prologue_saves__+0x1c>
	uint8_t i, j;
	uint16_t RxChannelZeroOffset[MAX_RC_CHANNELS] = {0,0,0,0,0,0,0,0};
    79e8:	8e 01       	movw	r16, r28
    79ea:	0f 5f       	subi	r16, 0xFF	; 255
    79ec:	1f 4f       	sbci	r17, 0xFF	; 255
    79ee:	80 e1       	ldi	r24, 0x10	; 16
    79f0:	d8 01       	movw	r26, r16
    79f2:	1d 92       	st	X+, r1
    79f4:	8a 95       	dec	r24
    79f6:	e9 f7       	brne	.-6      	; 0x79f2 <CenterSticks+0x16>
    79f8:	68 e0       	ldi	r22, 0x08	; 8
	OldRxSum = RxSum;
}

// Center sticks on request from Menu
void CenterSticks(void)		
{
    79fa:	d8 01       	movw	r26, r16
    79fc:	80 e0       	ldi	r24, 0x00	; 0
    79fe:	90 e0       	ldi	r25, 0x00	; 0
	// RxChannel will auto-update every RC frame (normally 46Hz or so)
	for (i=0; i<8; i++)
	{
		for (j=0; j<MAX_RC_CHANNELS; j++)
		{
			RxChannelZeroOffset[j] += RxChannel[j];
    7a00:	9c 01       	movw	r18, r24
    7a02:	22 0f       	add	r18, r18
    7a04:	33 1f       	adc	r19, r19
    7a06:	2e 54       	subi	r18, 0x4E	; 78
    7a08:	38 4f       	sbci	r19, 0xF8	; 248
    7a0a:	f9 01       	movw	r30, r18
    7a0c:	40 81       	ld	r20, Z
    7a0e:	51 81       	ldd	r21, Z+1	; 0x01
    7a10:	2d 91       	ld	r18, X+
    7a12:	3c 91       	ld	r19, X
    7a14:	11 97       	sbiw	r26, 0x01	; 1
    7a16:	24 0f       	add	r18, r20
    7a18:	35 1f       	adc	r19, r21
    7a1a:	2d 93       	st	X+, r18
    7a1c:	3d 93       	st	X+, r19
    7a1e:	01 96       	adiw	r24, 0x01	; 1

	// Take an average of eight readings
	// RxChannel will auto-update every RC frame (normally 46Hz or so)
	for (i=0; i<8; i++)
	{
		for (j=0; j<MAX_RC_CHANNELS; j++)
    7a20:	88 30       	cpi	r24, 0x08	; 8
    7a22:	91 05       	cpc	r25, r1
    7a24:	69 f7       	brne	.-38     	; 0x7a00 <CenterSticks+0x24>
    7a26:	ff e7       	ldi	r31, 0x7F	; 127
    7a28:	2a e1       	ldi	r18, 0x1A	; 26
    7a2a:	86 e0       	ldi	r24, 0x06	; 6
    7a2c:	f1 50       	subi	r31, 0x01	; 1
    7a2e:	20 40       	sbci	r18, 0x00	; 0
    7a30:	80 40       	sbci	r24, 0x00	; 0
    7a32:	e1 f7       	brne	.-8      	; 0x7a2c <CenterSticks+0x50>
    7a34:	00 c0       	rjmp	.+0      	; 0x7a36 <CenterSticks+0x5a>
    7a36:	00 00       	nop
    7a38:	61 50       	subi	r22, 0x01	; 1
	uint8_t i, j;
	uint16_t RxChannelZeroOffset[MAX_RC_CHANNELS] = {0,0,0,0,0,0,0,0};

	// Take an average of eight readings
	// RxChannel will auto-update every RC frame (normally 46Hz or so)
	for (i=0; i<8; i++)
    7a3a:	f9 f6       	brne	.-66     	; 0x79fa <CenterSticks+0x1e>
    7a3c:	a3 e8       	ldi	r26, 0x83	; 131
    7a3e:	b7 e0       	ldi	r27, 0x07	; 7
    7a40:	9e 01       	movw	r18, r28
    7a42:	2f 5e       	subi	r18, 0xEF	; 239
    7a44:	3f 4f       	sbci	r19, 0xFF	; 255
    7a46:	f8 01       	movw	r30, r16
		_delay_ms(100); // Wait for a new frame
	}

	for (i=0;i<MAX_RC_CHANNELS;i++)
	{
		Config.RxChannelZeroOffset[i] = ((RxChannelZeroOffset[i] + 4) >> 3); // Round and divide by 8
    7a48:	81 91       	ld	r24, Z+
    7a4a:	91 91       	ld	r25, Z+
    7a4c:	04 96       	adiw	r24, 0x04	; 4
    7a4e:	43 e0       	ldi	r20, 0x03	; 3
    7a50:	96 95       	lsr	r25
    7a52:	87 95       	ror	r24
    7a54:	4a 95       	dec	r20
    7a56:	e1 f7       	brne	.-8      	; 0x7a50 <CenterSticks+0x74>
    7a58:	8d 93       	st	X+, r24
    7a5a:	9d 93       	st	X+, r25
			RxChannelZeroOffset[j] += RxChannel[j];
		}
		_delay_ms(100); // Wait for a new frame
	}

	for (i=0;i<MAX_RC_CHANNELS;i++)
    7a5c:	e2 17       	cp	r30, r18
    7a5e:	f3 07       	cpc	r31, r19
    7a60:	99 f7       	brne	.-26     	; 0x7a48 <CenterSticks+0x6c>
	{
		Config.RxChannelZeroOffset[i] = ((RxChannelZeroOffset[i] + 4) >> 3); // Round and divide by 8
	}

	Save_Config_to_EEPROM();
    7a62:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <Save_Config_to_EEPROM>
}
    7a66:	60 96       	adiw	r28, 0x10	; 16
    7a68:	e4 e0       	ldi	r30, 0x04	; 4
    7a6a:	0c 94 ee 41 	jmp	0x83dc	; 0x83dc <__epilogue_restores__+0x1c>

00007a6e <output_servo_ppm>:
//************************************************************

uint16_t ServoOut[MAX_OUTPUTS];

void output_servo_ppm(void)
{
    7a6e:	a0 e0       	ldi	r26, 0x00	; 0
    7a70:	b0 e0       	ldi	r27, 0x00	; 0
    7a72:	ed e3       	ldi	r30, 0x3D	; 61
    7a74:	fd e3       	ldi	r31, 0x3D	; 61
    7a76:	0c 94 ce 41 	jmp	0x839c	; 0x839c <__prologue_saves__+0x14>
    7a7a:	04 e3       	ldi	r16, 0x34	; 52
    7a7c:	18 e0       	ldi	r17, 0x08	; 8
    7a7e:	cf e3       	ldi	r28, 0x3F	; 63
    7a80:	d6 e0       	ldi	r29, 0x06	; 6
			temp = ((temp - 3750) >> 1) + 1500;
		}
		else
		{
			// Scale servo from 2500~5000 to 1000~2000
			temp = ((temp << 2) + 5) / 10; 	// Round and convert	
    7a82:	7a e0       	ldi	r23, 0x0A	; 10
    7a84:	c7 2e       	mov	r12, r23
    7a86:	d1 2c       	mov	r13, r1
    7a88:	e1 2c       	mov	r14, r1
    7a8a:	f1 2c       	mov	r15, r1
	uint8_t i;

	// Re-span numbers from internal values to microseconds
	for (i = 0; i < MAX_OUTPUTS; i++)
	{
		temp = ServoOut[i];					// Promote to 32 bits
    7a8c:	f8 01       	movw	r30, r16
    7a8e:	20 81       	ld	r18, Z
    7a90:	31 81       	ldd	r19, Z+1	; 0x01
    7a92:	a9 01       	movw	r20, r18
    7a94:	60 e0       	ldi	r22, 0x00	; 0
    7a96:	70 e0       	ldi	r23, 0x00	; 0

		// Check for motor marker and ignore if set
		if (Config.Channel[i].Motor_marker == MOTOR)
    7a98:	88 81       	ld	r24, Y
    7a9a:	81 30       	cpi	r24, 0x01	; 1
    7a9c:	79 f4       	brne	.+30     	; 0x7abc <output_servo_ppm+0x4e>
		{
			// Scale servo from 2500~5000 to 875~2125
			temp = ((temp - 3750) >> 1) + 1500;
    7a9e:	9a 01       	movw	r18, r20
    7aa0:	ab 01       	movw	r20, r22
    7aa2:	26 5a       	subi	r18, 0xA6	; 166
    7aa4:	3e 40       	sbci	r19, 0x0E	; 14
    7aa6:	41 09       	sbc	r20, r1
    7aa8:	51 09       	sbc	r21, r1
    7aaa:	56 95       	lsr	r21
    7aac:	47 95       	ror	r20
    7aae:	37 95       	ror	r19
    7ab0:	27 95       	ror	r18
    7ab2:	24 52       	subi	r18, 0x24	; 36
    7ab4:	3a 4f       	sbci	r19, 0xFA	; 250
    7ab6:	4f 4f       	sbci	r20, 0xFF	; 255
    7ab8:	5f 4f       	sbci	r21, 0xFF	; 255
    7aba:	11 c0       	rjmp	.+34     	; 0x7ade <output_servo_ppm+0x70>
		}
		else
		{
			// Scale servo from 2500~5000 to 1000~2000
			temp = ((temp << 2) + 5) / 10; 	// Round and convert	
    7abc:	cb 01       	movw	r24, r22
    7abe:	ba 01       	movw	r22, r20
    7ac0:	22 e0       	ldi	r18, 0x02	; 2
    7ac2:	66 0f       	add	r22, r22
    7ac4:	77 1f       	adc	r23, r23
    7ac6:	88 1f       	adc	r24, r24
    7ac8:	99 1f       	adc	r25, r25
    7aca:	2a 95       	dec	r18
    7acc:	d1 f7       	brne	.-12     	; 0x7ac2 <output_servo_ppm+0x54>
    7ace:	6b 5f       	subi	r22, 0xFB	; 251
    7ad0:	7f 4f       	sbci	r23, 0xFF	; 255
    7ad2:	8f 4f       	sbci	r24, 0xFF	; 255
    7ad4:	9f 4f       	sbci	r25, 0xFF	; 255
    7ad6:	a7 01       	movw	r20, r14
    7ad8:	96 01       	movw	r18, r12
    7ada:	0e 94 4c 41 	call	0x8298	; 0x8298 <__udivmodsi4>
		}
		
		ServoOut[i] = (uint16_t)temp;
    7ade:	f8 01       	movw	r30, r16
    7ae0:	21 93       	st	Z+, r18
    7ae2:	31 93       	st	Z+, r19
    7ae4:	8f 01       	movw	r16, r30
    7ae6:	a6 96       	adiw	r28, 0x26	; 38
{
	uint32_t temp;
	uint8_t i;

	// Re-span numbers from internal values to microseconds
	for (i = 0; i < MAX_OUTPUTS; i++)
    7ae8:	f7 e0       	ldi	r31, 0x07	; 7
    7aea:	cf 36       	cpi	r28, 0x6F	; 111
    7aec:	df 07       	cpc	r29, r31
    7aee:	71 f6       	brne	.-100    	; 0x7a8c <output_servo_ppm+0x1e>
		
		ServoOut[i] = (uint16_t)temp;
	}

	// Re-sample throttle value
	MonopolarThrottle = RxChannel[THROTTLE] - Config.RxChannelZeroOffset[THROTTLE];
    7af0:	80 91 b2 07 	lds	r24, 0x07B2
    7af4:	90 91 b3 07 	lds	r25, 0x07B3
    7af8:	20 91 83 07 	lds	r18, 0x0783
    7afc:	30 91 84 07 	lds	r19, 0x0784
    7b00:	82 1b       	sub	r24, r18
    7b02:	93 0b       	sbc	r25, r19
    7b04:	90 93 21 08 	sts	0x0821, r25
    7b08:	80 93 20 08 	sts	0x0820, r24

	// Check for motor flags if throttle is below arming minimum or disarmed
	// and set all motors to minimum throttle if so
	if 	(
    7b0c:	c2 97       	sbiw	r24, 0x32	; 50
    7b0e:	a4 f0       	brlt	.+40     	; 0x7b38 <output_servo_ppm+0xca>
			(MonopolarThrottle < THROTTLEIDLE) || 
			((General_error & (1 << DISARMED)) != 0)
    7b10:	80 91 17 05 	lds	r24, 0x0517
	MonopolarThrottle = RxChannel[THROTTLE] - Config.RxChannelZeroOffset[THROTTLE];

	// Check for motor flags if throttle is below arming minimum or disarmed
	// and set all motors to minimum throttle if so
	if 	(
			(MonopolarThrottle < THROTTLEIDLE) || 
    7b14:	82 fd       	sbrc	r24, 2
    7b16:	10 c0       	rjmp	.+32     	; 0x7b38 <output_servo_ppm+0xca>
			}
		}
	}

	// Suppress outputs during throttle high error
	if((General_error & (1 << THROTTLE_HIGH)) == 0)
    7b18:	80 91 17 05 	lds	r24, 0x0517
    7b1c:	80 fd       	sbrc	r24, 0
    7b1e:	1f c0       	rjmp	.+62     	; 0x7b5e <output_servo_ppm+0xf0>
	{
		// Reset JitterFlag immediately before PWM generation
		JitterFlag = false;
    7b20:	10 92 dd 07 	sts	0x07DD, r1

		// We now care about interrupts
		JitterGate = true;
    7b24:	81 e0       	ldi	r24, 0x01	; 1
    7b26:	80 93 dc 07 	sts	0x07DC, r24

		// Pass address of ServoOut array
		output_servo_ppm_asm(&ServoOut[0]);
    7b2a:	84 e3       	ldi	r24, 0x34	; 52
    7b2c:	98 e0       	ldi	r25, 0x08	; 8
    7b2e:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <output_servo_ppm_asm>

		// We no longer care about interrupts
		JitterGate = false;
    7b32:	10 92 dc 07 	sts	0x07DC, r1
    7b36:	13 c0       	rjmp	.+38     	; 0x7b5e <output_servo_ppm+0xf0>
//************************************************************

uint16_t ServoOut[MAX_OUTPUTS];

void output_servo_ppm(void)
{
    7b38:	a4 e3       	ldi	r26, 0x34	; 52
    7b3a:	b8 e0       	ldi	r27, 0x08	; 8
    7b3c:	ef e3       	ldi	r30, 0x3F	; 63
    7b3e:	f6 e0       	ldi	r31, 0x06	; 6
		{
			// Check for motor marker
			if (Config.Channel[i].Motor_marker == MOTOR)
			{
				// Set output to minimum pulse width (1000us)
				ServoOut[i] = MOTORMIN;
    7b40:	88 ee       	ldi	r24, 0xE8	; 232
    7b42:	93 e0       	ldi	r25, 0x03	; 3
	{
		// For each output
		for (i = 0; i < MAX_OUTPUTS; i++)
		{
			// Check for motor marker
			if (Config.Channel[i].Motor_marker == MOTOR)
    7b44:	20 81       	ld	r18, Z
    7b46:	21 30       	cpi	r18, 0x01	; 1
    7b48:	19 f4       	brne	.+6      	; 0x7b50 <output_servo_ppm+0xe2>
			{
				// Set output to minimum pulse width (1000us)
				ServoOut[i] = MOTORMIN;
    7b4a:	11 96       	adiw	r26, 0x01	; 1
    7b4c:	9c 93       	st	X, r25
    7b4e:	8e 93       	st	-X, r24
    7b50:	b6 96       	adiw	r30, 0x26	; 38
    7b52:	12 96       	adiw	r26, 0x02	; 2
			(MonopolarThrottle < THROTTLEIDLE) || 
			((General_error & (1 << DISARMED)) != 0)
		)
	{
		// For each output
		for (i = 0; i < MAX_OUTPUTS; i++)
    7b54:	27 e0       	ldi	r18, 0x07	; 7
    7b56:	ef 36       	cpi	r30, 0x6F	; 111
    7b58:	f2 07       	cpc	r31, r18
    7b5a:	a1 f7       	brne	.-24     	; 0x7b44 <output_servo_ppm+0xd6>
    7b5c:	dd cf       	rjmp	.-70     	; 0x7b18 <output_servo_ppm+0xaa>

		// We no longer care about interrupts
		JitterGate = false;

	}
}
    7b5e:	cd b7       	in	r28, 0x3d	; 61
    7b60:	de b7       	in	r29, 0x3e	; 62
    7b62:	e8 e0       	ldi	r30, 0x08	; 8
    7b64:	0c 94 ea 41 	jmp	0x83d4	; 0x83d4 <__epilogue_restores__+0x14>

00007b68 <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
  TWSR = 0;                         /* no prescaler */
    7b68:	10 92 b9 00 	sts	0x00B9, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
    7b6c:	81 e1       	ldi	r24, 0x11	; 17
    7b6e:	80 93 b8 00 	sts	0x00B8, r24
    7b72:	08 95       	ret

00007b74 <i2c_start>:
{
	uint32_t  i2c_timer = 0;
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    7b74:	94 ea       	ldi	r25, 0xA4	; 164
    7b76:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
    7b7a:	4f ef       	ldi	r20, 0xFF	; 255
    7b7c:	50 e0       	ldi	r21, 0x00	; 0
    7b7e:	60 e0       	ldi	r22, 0x00	; 0
    7b80:	70 e0       	ldi	r23, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    7b82:	90 91 bc 00 	lds	r25, 0x00BC
    7b86:	97 fd       	sbrc	r25, 7
    7b88:	06 c0       	rjmp	.+12     	; 0x7b96 <i2c_start+0x22>
    7b8a:	41 50       	subi	r20, 0x01	; 1
    7b8c:	51 09       	sbc	r21, r1
    7b8e:	61 09       	sbc	r22, r1
    7b90:	71 09       	sbc	r23, r1
    7b92:	b8 f7       	brcc	.-18     	; 0x7b82 <i2c_start+0xe>
    7b94:	06 c0       	rjmp	.+12     	; 0x7ba2 <i2c_start+0x2e>
	if(i2c_timer == 0)
    7b96:	45 2b       	or	r20, r21
    7b98:	46 2b       	or	r20, r22
    7b9a:	47 2b       	or	r20, r23
    7b9c:	11 f4       	brne	.+4      	; 0x7ba2 <i2c_start+0x2e>
		return 1;
    7b9e:	81 e0       	ldi	r24, 0x01	; 1
    7ba0:	08 95       	ret

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    7ba2:	90 91 b9 00 	lds	r25, 0x00B9
    7ba6:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
    7ba8:	98 30       	cpi	r25, 0x08	; 8
    7baa:	11 f0       	breq	.+4      	; 0x7bb0 <i2c_start+0x3c>
    7bac:	90 31       	cpi	r25, 0x10	; 16
    7bae:	b9 f7       	brne	.-18     	; 0x7b9e <i2c_start+0x2a>

	// send device address
	TWDR = address;
    7bb0:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    7bb4:	84 e8       	ldi	r24, 0x84	; 132
    7bb6:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	i2c_timer = I2C_TIMER_DELAY;
    7bba:	8f ef       	ldi	r24, 0xFF	; 255
    7bbc:	90 e0       	ldi	r25, 0x00	; 0
    7bbe:	a0 e0       	ldi	r26, 0x00	; 0
    7bc0:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    7bc2:	20 91 bc 00 	lds	r18, 0x00BC
    7bc6:	27 fd       	sbrc	r18, 7
    7bc8:	05 c0       	rjmp	.+10     	; 0x7bd4 <i2c_start+0x60>
    7bca:	01 97       	sbiw	r24, 0x01	; 1
    7bcc:	a1 09       	sbc	r26, r1
    7bce:	b1 09       	sbc	r27, r1
    7bd0:	c0 f7       	brcc	.-16     	; 0x7bc2 <i2c_start+0x4e>
    7bd2:	04 c0       	rjmp	.+8      	; 0x7bdc <i2c_start+0x68>
	if(i2c_timer == 0)
    7bd4:	89 2b       	or	r24, r25
    7bd6:	8a 2b       	or	r24, r26
    7bd8:	8b 2b       	or	r24, r27
    7bda:	09 f3       	breq	.-62     	; 0x7b9e <i2c_start+0x2a>
		return 1;

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    7bdc:	80 91 b9 00 	lds	r24, 0x00B9
    7be0:	88 7f       	andi	r24, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
    7be2:	88 31       	cpi	r24, 0x18	; 24
    7be4:	11 f0       	breq	.+4      	; 0x7bea <i2c_start+0x76>
    7be6:	80 34       	cpi	r24, 0x40	; 64
    7be8:	d1 f6       	brne	.-76     	; 0x7b9e <i2c_start+0x2a>

	return 0;
    7bea:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */
    7bec:	08 95       	ret

00007bee <i2c_start_wait>:
	uint8_t   twst;

    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    7bee:	44 ea       	ldi	r20, 0xA4	; 164
    	twst = TW_STATUS & 0xF8;
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
    	TWCR = (1<<TWINT) | (1<<TWEN);
    7bf0:	54 e8       	ldi	r21, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    7bf2:	64 e9       	ldi	r22, 0x94	; 148
	uint8_t   twst;

    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    7bf4:	40 93 bc 00 	sts	0x00BC, r20
    
    	// wait until transmission completed
	    i2c_timer = I2C_TIMER_DELAY;
    	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    7bf8:	20 e0       	ldi	r18, 0x00	; 0
    7bfa:	30 e0       	ldi	r19, 0x00	; 0
    7bfc:	90 91 bc 00 	lds	r25, 0x00BC
    7c00:	97 fd       	sbrc	r25, 7
    7c02:	06 c0       	rjmp	.+12     	; 0x7c10 <i2c_start_wait+0x22>
    7c04:	2f 5f       	subi	r18, 0xFF	; 255
    7c06:	3f 4f       	sbci	r19, 0xFF	; 255
    7c08:	21 15       	cp	r18, r1
    7c0a:	91 e0       	ldi	r25, 0x01	; 1
    7c0c:	39 07       	cpc	r19, r25
    7c0e:	b1 f7       	brne	.-20     	; 0x7bfc <i2c_start_wait+0xe>

    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    7c10:	90 91 b9 00 	lds	r25, 0x00B9
    7c14:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    7c16:	98 30       	cpi	r25, 0x08	; 8
    7c18:	11 f0       	breq	.+4      	; 0x7c1e <i2c_start_wait+0x30>
    7c1a:	90 31       	cpi	r25, 0x10	; 16
    7c1c:	59 f7       	brne	.-42     	; 0x7bf4 <i2c_start_wait+0x6>
    
    	// send device address
    	TWDR = address;
    7c1e:	80 93 bb 00 	sts	0x00BB, r24
    	TWCR = (1<<TWINT) | (1<<TWEN);
    7c22:	50 93 bc 00 	sts	0x00BC, r21
    
    	// wail until transmission completed
    	i2c_timer = I2C_TIMER_DELAY;
    	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    7c26:	20 e0       	ldi	r18, 0x00	; 0
    7c28:	30 e0       	ldi	r19, 0x00	; 0
    7c2a:	90 91 bc 00 	lds	r25, 0x00BC
    7c2e:	97 fd       	sbrc	r25, 7
    7c30:	06 c0       	rjmp	.+12     	; 0x7c3e <i2c_start_wait+0x50>
    7c32:	2f 5f       	subi	r18, 0xFF	; 255
    7c34:	3f 4f       	sbci	r19, 0xFF	; 255
    7c36:	21 15       	cp	r18, r1
    7c38:	91 e0       	ldi	r25, 0x01	; 1
    7c3a:	39 07       	cpc	r19, r25
    7c3c:	b1 f7       	brne	.-20     	; 0x7c2a <i2c_start_wait+0x3c>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    7c3e:	90 91 b9 00 	lds	r25, 0x00B9
    7c42:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    7c44:	90 32       	cpi	r25, 0x20	; 32
    7c46:	11 f0       	breq	.+4      	; 0x7c4c <i2c_start_wait+0x5e>
    7c48:	98 35       	cpi	r25, 0x58	; 88
    7c4a:	79 f4       	brne	.+30     	; 0x7c6a <i2c_start_wait+0x7c>
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    7c4c:	60 93 bc 00 	sts	0x00BC, r22
	        
	        // wait until stop condition is executed and bus released
	        i2c_timer = I2C_TIMER_DELAY;
	        while((TWCR & (1<<TWSTO)) && i2c_timer--);
    7c50:	20 e0       	ldi	r18, 0x00	; 0
    7c52:	30 e0       	ldi	r19, 0x00	; 0
    7c54:	90 91 bc 00 	lds	r25, 0x00BC
    7c58:	94 ff       	sbrs	r25, 4
    7c5a:	cc cf       	rjmp	.-104    	; 0x7bf4 <i2c_start_wait+0x6>
    7c5c:	2f 5f       	subi	r18, 0xFF	; 255
    7c5e:	3f 4f       	sbci	r19, 0xFF	; 255
    7c60:	21 15       	cp	r18, r1
    7c62:	91 e0       	ldi	r25, 0x01	; 1
    7c64:	39 07       	cpc	r19, r25
    7c66:	b1 f7       	brne	.-20     	; 0x7c54 <i2c_start_wait+0x66>
    7c68:	c5 cf       	rjmp	.-118    	; 0x7bf4 <i2c_start_wait+0x6>
    7c6a:	08 95       	ret

00007c6c <i2c_rep_start>:
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );
    7c6c:	0e 94 ba 3d 	call	0x7b74	; 0x7b74 <i2c_start>

}/* i2c_rep_start */
    7c70:	08 95       	ret

00007c72 <i2c_stop>:
void i2c_stop(void)
{
	uint32_t  i2c_timer = 0;

    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    7c72:	84 e9       	ldi	r24, 0x94	; 148
    7c74:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait until stop condition is executed and bus released
	i2c_timer = I2C_TIMER_DELAY;
	while((TWCR & (1<<TWSTO)) && i2c_timer--);
    7c78:	80 e0       	ldi	r24, 0x00	; 0
    7c7a:	90 e0       	ldi	r25, 0x00	; 0
    7c7c:	20 91 bc 00 	lds	r18, 0x00BC
    7c80:	24 ff       	sbrs	r18, 4
    7c82:	05 c0       	rjmp	.+10     	; 0x7c8e <i2c_stop+0x1c>
    7c84:	01 96       	adiw	r24, 0x01	; 1
    7c86:	81 15       	cp	r24, r1
    7c88:	21 e0       	ldi	r18, 0x01	; 1
    7c8a:	92 07       	cpc	r25, r18
    7c8c:	b9 f7       	brne	.-18     	; 0x7c7c <i2c_stop+0xa>
    7c8e:	08 95       	ret

00007c90 <i2c_write>:
{	
	uint32_t  i2c_timer = 0;
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    7c90:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    7c94:	84 e8       	ldi	r24, 0x84	; 132
    7c96:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
    7c9a:	8f ef       	ldi	r24, 0xFF	; 255
    7c9c:	90 e0       	ldi	r25, 0x00	; 0
    7c9e:	a0 e0       	ldi	r26, 0x00	; 0
    7ca0:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    7ca2:	20 91 bc 00 	lds	r18, 0x00BC
    7ca6:	27 fd       	sbrc	r18, 7
    7ca8:	05 c0       	rjmp	.+10     	; 0x7cb4 <i2c_write+0x24>
    7caa:	01 97       	sbiw	r24, 0x01	; 1
    7cac:	a1 09       	sbc	r26, r1
    7cae:	b1 09       	sbc	r27, r1
    7cb0:	c0 f7       	brcc	.-16     	; 0x7ca2 <i2c_write+0x12>
    7cb2:	04 c0       	rjmp	.+8      	; 0x7cbc <i2c_write+0x2c>
	if(i2c_timer == 0)
    7cb4:	89 2b       	or	r24, r25
    7cb6:	8a 2b       	or	r24, r26
    7cb8:	8b 2b       	or	r24, r27
    7cba:	41 f0       	breq	.+16     	; 0x7ccc <i2c_write+0x3c>
		return 1;

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    7cbc:	90 91 b9 00 	lds	r25, 0x00B9
    7cc0:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
    7cc2:	81 e0       	ldi	r24, 0x01	; 1
    7cc4:	98 32       	cpi	r25, 0x28	; 40
    7cc6:	19 f4       	brne	.+6      	; 0x7cce <i2c_write+0x3e>
    7cc8:	80 e0       	ldi	r24, 0x00	; 0
    7cca:	08 95       	ret

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 1;
    7ccc:	81 e0       	ldi	r24, 0x01	; 1
	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
    7cce:	08 95       	ret

00007cd0 <i2c_readAck>:
*************************************************************************/
unsigned char i2c_readAck(void)
{
	uint32_t  i2c_timer = 0;

	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    7cd0:	84 ec       	ldi	r24, 0xC4	; 196
    7cd2:	80 93 bc 00 	sts	0x00BC, r24
	i2c_timer = I2C_TIMER_DELAY;
    7cd6:	8f ef       	ldi	r24, 0xFF	; 255
    7cd8:	90 e0       	ldi	r25, 0x00	; 0
    7cda:	a0 e0       	ldi	r26, 0x00	; 0
    7cdc:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    7cde:	20 91 bc 00 	lds	r18, 0x00BC
    7ce2:	27 fd       	sbrc	r18, 7
    7ce4:	05 c0       	rjmp	.+10     	; 0x7cf0 <i2c_readAck+0x20>
    7ce6:	01 97       	sbiw	r24, 0x01	; 1
    7ce8:	a1 09       	sbc	r26, r1
    7cea:	b1 09       	sbc	r27, r1
    7cec:	c0 f7       	brcc	.-16     	; 0x7cde <i2c_readAck+0xe>
    7cee:	04 c0       	rjmp	.+8      	; 0x7cf8 <i2c_readAck+0x28>
	if(i2c_timer == 0)
    7cf0:	89 2b       	or	r24, r25
    7cf2:	8a 2b       	or	r24, r26
    7cf4:	8b 2b       	or	r24, r27
    7cf6:	19 f0       	breq	.+6      	; 0x7cfe <i2c_readAck+0x2e>
		return 0;

    return TWDR;
    7cf8:	80 91 bb 00 	lds	r24, 0x00BB
    7cfc:	08 95       	ret

	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 0;
    7cfe:	80 e0       	ldi	r24, 0x00	; 0

    return TWDR;

}/* i2c_readAck */
    7d00:	08 95       	ret

00007d02 <i2c_readNak>:
*************************************************************************/
unsigned char i2c_readNak(void)
{
	uint32_t  i2c_timer = 0;

	TWCR = (1<<TWINT) | (1<<TWEN);
    7d02:	84 e8       	ldi	r24, 0x84	; 132
    7d04:	80 93 bc 00 	sts	0x00BC, r24
	i2c_timer = I2C_TIMER_DELAY;
    7d08:	8f ef       	ldi	r24, 0xFF	; 255
    7d0a:	90 e0       	ldi	r25, 0x00	; 0
    7d0c:	a0 e0       	ldi	r26, 0x00	; 0
    7d0e:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    7d10:	20 91 bc 00 	lds	r18, 0x00BC
    7d14:	27 fd       	sbrc	r18, 7
    7d16:	05 c0       	rjmp	.+10     	; 0x7d22 <i2c_readNak+0x20>
    7d18:	01 97       	sbiw	r24, 0x01	; 1
    7d1a:	a1 09       	sbc	r26, r1
    7d1c:	b1 09       	sbc	r27, r1
    7d1e:	c0 f7       	brcc	.-16     	; 0x7d10 <i2c_readNak+0xe>
    7d20:	04 c0       	rjmp	.+8      	; 0x7d2a <i2c_readNak+0x28>
	if(i2c_timer == 0)
    7d22:	89 2b       	or	r24, r25
    7d24:	8a 2b       	or	r24, r26
    7d26:	8b 2b       	or	r24, r27
    7d28:	19 f0       	breq	.+6      	; 0x7d30 <i2c_readNak+0x2e>
		return 0;
	
    return TWDR;
    7d2a:	80 91 bb 00 	lds	r24, 0x00BB
    7d2e:	08 95       	ret

	TWCR = (1<<TWINT) | (1<<TWEN);
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 0;
    7d30:	80 e0       	ldi	r24, 0x00	; 0
	
    return TWDR;

}/* i2c_readNak */
    7d32:	08 95       	ret

00007d34 <init_uart>:
#define BAUD_PRESCALE_SPEKTRUM ((F_CPU + USART_BAUDRATE_SPEKTRUM * 8L) / (USART_BAUDRATE_SPEKTRUM * 16L) - 1) // Default RX rate for Spektrum

// Initialise UART with adjusted bitrate
void init_uart(void)
{
	cli();								// Atmel wants global interrupts disabled when changing UART setup on the fly
    7d34:	f8 94       	cli
	
	UCSR0B &= ~(1 << RXCIE0);			// Disable serial interrupt
    7d36:	80 91 c1 00 	lds	r24, 0x00C1
    7d3a:	8f 77       	andi	r24, 0x7F	; 127
    7d3c:	80 93 c1 00 	sts	0x00C1, r24

	while (UCSR0A & (1 << RXC0))		// Make sure there is nothing in the RX0 reg
    7d40:	80 91 c0 00 	lds	r24, 0x00C0
    7d44:	87 ff       	sbrs	r24, 7
    7d46:	05 c0       	rjmp	.+10     	; 0x7d52 <init_uart+0x1e>
	{
		UCSR0C = UDR0;					// So as not to annoy Studio 6, use UCSR0C as a temp reg until UDR0 empty. Sorry, UCSR0C...
    7d48:	80 91 c6 00 	lds	r24, 0x00C6
    7d4c:	80 93 c2 00 	sts	0x00C2, r24
    7d50:	f7 cf       	rjmp	.-18     	; 0x7d40 <init_uart+0xc>
	}
	
	// Reset UART regs to a known state
	UCSR0A = 0; // U2X = 0, no master mode, flags cleared 
    7d52:	10 92 c0 00 	sts	0x00C0, r1
	UCSR0B = 0; // Clear flags, disable tx/rx, 8 bits
    7d56:	10 92 c1 00 	sts	0x00C1, r1
	UCSR0C = 6; // 8N1
    7d5a:	86 e0       	ldi	r24, 0x06	; 6
    7d5c:	80 93 c2 00 	sts	0x00C2, r24

	switch (Config.RxMode)
    7d60:	80 91 d2 05 	lds	r24, 0x05D2
    7d64:	82 30       	cpi	r24, 0x02	; 2
    7d66:	09 f1       	breq	.+66     	; 0x7daa <init_uart+0x76>
    7d68:	34 f4       	brge	.+12     	; 0x7d76 <init_uart+0x42>
    7d6a:	87 fd       	sbrc	r24, 7
    7d6c:	41 c0       	rjmp	.+130    	; 0x7df0 <init_uart+0xbc>
			UCSR0B |=  (1 << RXCIE0);					// Enable serial interrupt
			break;

		case CPPM_MODE:
		case PWM:
			UCSR0B &= 	~(1 << RXEN0);					// Disable receiver in PWM and CPPM modes
    7d6e:	80 91 c1 00 	lds	r24, 0x00C1
    7d72:	8f 7e       	andi	r24, 0xEF	; 239
    7d74:	3b c0       	rjmp	.+118    	; 0x7dec <init_uart+0xb8>
	// Reset UART regs to a known state
	UCSR0A = 0; // U2X = 0, no master mode, flags cleared 
	UCSR0B = 0; // Clear flags, disable tx/rx, 8 bits
	UCSR0C = 6; // 8N1

	switch (Config.RxMode)
    7d76:	83 30       	cpi	r24, 0x03	; 3
    7d78:	d9 f5       	brne	.+118    	; 0x7df0 <init_uart+0xbc>
			UCSR0B |=  (1 << RXCIE0);					// Enable serial interrupt
			break;

		// Spektrum 8N1 (8 data bits / No parity / 1 stop bit / 115.2Kbps)
		case SPEKTRUM: 	
			UCSR0A &=  ~(1 << U2X0);					// Clear the 2x flag
    7d7a:	80 91 c0 00 	lds	r24, 0x00C0
    7d7e:	8d 7f       	andi	r24, 0xFD	; 253
    7d80:	80 93 c0 00 	sts	0x00C0, r24
			UBRR0H  =  (BAUD_PRESCALE_SPEKTRUM >> 8); 	// Actual = 113636, Error = -1.36%
    7d84:	10 92 c5 00 	sts	0x00C5, r1
			UBRR0L  =   BAUD_PRESCALE_SPEKTRUM & 0xff;	// 0x0A (10.35)	
    7d88:	8a e0       	ldi	r24, 0x0A	; 10
    7d8a:	80 93 c4 00 	sts	0x00C4, r24
			UCSR0B |= 	(1 << RXEN0);					// Enable receiver
    7d8e:	80 91 c1 00 	lds	r24, 0x00C1
    7d92:	80 61       	ori	r24, 0x10	; 16
    7d94:	80 93 c1 00 	sts	0x00C1, r24
			UCSR0C &=  ~(1 << USBS0); 					// 1 stop bit
    7d98:	80 91 c2 00 	lds	r24, 0x00C2
    7d9c:	87 7f       	andi	r24, 0xF7	; 247
    7d9e:	80 93 c2 00 	sts	0x00C2, r24
			UCSR0C &=  ~(1 << UPM00) | 					// No parity 
    7da2:	80 91 c2 00 	lds	r24, 0x00C2
    7da6:	8f 7e       	andi	r24, 0xEF	; 239
    7da8:	1c c0       	rjmp	.+56     	; 0x7de2 <init_uart+0xae>

	switch (Config.RxMode)
	{
		// Futaba S-Bus 8E2 (8 data bits / Even parity / 2 stop bits / 100Kbps)
		case SBUS: 		
			UCSR0A |=  (1 << U2X0);						// Need to set the 2x flag
    7daa:	80 91 c0 00 	lds	r24, 0x00C0
    7dae:	82 60       	ori	r24, 0x02	; 2
    7db0:	80 93 c0 00 	sts	0x00C0, r24
			UBRR0H  = (BAUD_PRESCALE_SBUS >> 8);  		// Actual = 100000 , Error = 0%	
    7db4:	10 92 c5 00 	sts	0x00C5, r1
			UBRR0L  =  BAUD_PRESCALE_SBUS & 0xff;		// 0x18 (24)
    7db8:	88 e1       	ldi	r24, 0x18	; 24
    7dba:	80 93 c4 00 	sts	0x00C4, r24
			UCSR0B |=  (1 << RXEN0);					// Enable receiver
    7dbe:	80 91 c1 00 	lds	r24, 0x00C1
    7dc2:	80 61       	ori	r24, 0x10	; 16
    7dc4:	80 93 c1 00 	sts	0x00C1, r24
			UCSR0C |=  (1 << USBS0); 					// 2 stop bits
    7dc8:	80 91 c2 00 	lds	r24, 0x00C2
    7dcc:	88 60       	ori	r24, 0x08	; 8
    7dce:	80 93 c2 00 	sts	0x00C2, r24
			UCSR0C &= ~(1 << UPM00); 					// Even parity 
    7dd2:	80 91 c2 00 	lds	r24, 0x00C2
    7dd6:	8f 7e       	andi	r24, 0xEF	; 239
    7dd8:	80 93 c2 00 	sts	0x00C2, r24
			UCSR0C |=  (1 << UPM01); 
    7ddc:	80 91 c2 00 	lds	r24, 0x00C2
    7de0:	80 62       	ori	r24, 0x20	; 32
			UCSR0A &=  ~(1 << U2X0);					// Clear the 2x flag
			UBRR0H  =  (BAUD_PRESCALE_SPEKTRUM >> 8); 	// Actual = 113636, Error = -1.36%
			UBRR0L  =   BAUD_PRESCALE_SPEKTRUM & 0xff;	// 0x0A (10.35)	
			UCSR0B |= 	(1 << RXEN0);					// Enable receiver
			UCSR0C &=  ~(1 << USBS0); 					// 1 stop bit
			UCSR0C &=  ~(1 << UPM00) | 					// No parity 
    7de2:	80 93 c2 00 	sts	0x00C2, r24
						(1 << UPM01); 
			UCSR0B |=  (1 << RXCIE0);					// Enable serial interrupt
    7de6:	80 91 c1 00 	lds	r24, 0x00C1
    7dea:	80 68       	ori	r24, 0x80	; 128
			break;

		case CPPM_MODE:
		case PWM:
			UCSR0B &= 	~(1 << RXEN0);					// Disable receiver in PWM and CPPM modes
    7dec:	80 93 c1 00 	sts	0x00C1, r24
		default:
			break;
	}

	// Re-enable interrupts
	sei();
    7df0:	78 94       	sei
    7df2:	08 95       	ret

00007df4 <GetVbat>:

uint16_t GetVbat(void)				// Get battery voltage (VBAT on ADC3)
{
	uint16_t	vBat;				// Battery voltage
		
	read_adc(AIN_VBAT1);				// Multiplication factor = (Display volts / 1024) / (Vbat / 11 / Vref)
    7df4:	83 e0       	ldi	r24, 0x03	; 3
    7df6:	0e 94 ba 10 	call	0x2174	; 0x2174 <read_adc>
	// For Vref = 2.45V, Multiplication factor = 2.632
	// For Vref = 2.305V, Multiplication factor = approx 2.5
	// An input voltage of 10V will results in a value of 999.
	// This means that the number represents units of 10mV.

	vBat = ADCW;
    7dfa:	20 91 78 00 	lds	r18, 0x0078
    7dfe:	30 91 79 00 	lds	r19, 0x0079

	// Multiply by 2.500
	// 2 + 1/2
	vBat = (vBat << 1) + (vBat >> 1); // Multiply by 2.500
    7e02:	c9 01       	movw	r24, r18
    7e04:	88 0f       	add	r24, r24
    7e06:	99 1f       	adc	r25, r25
    7e08:	36 95       	lsr	r19
    7e0a:	27 95       	ror	r18

	return vBat;
    7e0c:	82 0f       	add	r24, r18
    7e0e:	93 1f       	adc	r25, r19
    7e10:	08 95       	ret

00007e12 <__subsf3>:
    7e12:	50 58       	subi	r21, 0x80	; 128

00007e14 <__addsf3>:
    7e14:	bb 27       	eor	r27, r27
    7e16:	aa 27       	eor	r26, r26
    7e18:	0e d0       	rcall	.+28     	; 0x7e36 <__addsf3x>
    7e1a:	75 c1       	rjmp	.+746    	; 0x8106 <__fp_round>
    7e1c:	66 d1       	rcall	.+716    	; 0x80ea <__fp_pscA>
    7e1e:	30 f0       	brcs	.+12     	; 0x7e2c <__addsf3+0x18>
    7e20:	6b d1       	rcall	.+726    	; 0x80f8 <__fp_pscB>
    7e22:	20 f0       	brcs	.+8      	; 0x7e2c <__addsf3+0x18>
    7e24:	31 f4       	brne	.+12     	; 0x7e32 <__addsf3+0x1e>
    7e26:	9f 3f       	cpi	r25, 0xFF	; 255
    7e28:	11 f4       	brne	.+4      	; 0x7e2e <__addsf3+0x1a>
    7e2a:	1e f4       	brtc	.+6      	; 0x7e32 <__addsf3+0x1e>
    7e2c:	5b c1       	rjmp	.+694    	; 0x80e4 <__fp_nan>
    7e2e:	0e f4       	brtc	.+2      	; 0x7e32 <__addsf3+0x1e>
    7e30:	e0 95       	com	r30
    7e32:	e7 fb       	bst	r30, 7
    7e34:	51 c1       	rjmp	.+674    	; 0x80d8 <__fp_inf>

00007e36 <__addsf3x>:
    7e36:	e9 2f       	mov	r30, r25
    7e38:	77 d1       	rcall	.+750    	; 0x8128 <__fp_split3>
    7e3a:	80 f3       	brcs	.-32     	; 0x7e1c <__addsf3+0x8>
    7e3c:	ba 17       	cp	r27, r26
    7e3e:	62 07       	cpc	r22, r18
    7e40:	73 07       	cpc	r23, r19
    7e42:	84 07       	cpc	r24, r20
    7e44:	95 07       	cpc	r25, r21
    7e46:	18 f0       	brcs	.+6      	; 0x7e4e <__addsf3x+0x18>
    7e48:	71 f4       	brne	.+28     	; 0x7e66 <__addsf3x+0x30>
    7e4a:	9e f5       	brtc	.+102    	; 0x7eb2 <__addsf3x+0x7c>
    7e4c:	8f c1       	rjmp	.+798    	; 0x816c <__fp_zero>
    7e4e:	0e f4       	brtc	.+2      	; 0x7e52 <__addsf3x+0x1c>
    7e50:	e0 95       	com	r30
    7e52:	0b 2e       	mov	r0, r27
    7e54:	ba 2f       	mov	r27, r26
    7e56:	a0 2d       	mov	r26, r0
    7e58:	0b 01       	movw	r0, r22
    7e5a:	b9 01       	movw	r22, r18
    7e5c:	90 01       	movw	r18, r0
    7e5e:	0c 01       	movw	r0, r24
    7e60:	ca 01       	movw	r24, r20
    7e62:	a0 01       	movw	r20, r0
    7e64:	11 24       	eor	r1, r1
    7e66:	ff 27       	eor	r31, r31
    7e68:	59 1b       	sub	r21, r25
    7e6a:	99 f0       	breq	.+38     	; 0x7e92 <__addsf3x+0x5c>
    7e6c:	59 3f       	cpi	r21, 0xF9	; 249
    7e6e:	50 f4       	brcc	.+20     	; 0x7e84 <__addsf3x+0x4e>
    7e70:	50 3e       	cpi	r21, 0xE0	; 224
    7e72:	68 f1       	brcs	.+90     	; 0x7ece <__addsf3x+0x98>
    7e74:	1a 16       	cp	r1, r26
    7e76:	f0 40       	sbci	r31, 0x00	; 0
    7e78:	a2 2f       	mov	r26, r18
    7e7a:	23 2f       	mov	r18, r19
    7e7c:	34 2f       	mov	r19, r20
    7e7e:	44 27       	eor	r20, r20
    7e80:	58 5f       	subi	r21, 0xF8	; 248
    7e82:	f3 cf       	rjmp	.-26     	; 0x7e6a <__addsf3x+0x34>
    7e84:	46 95       	lsr	r20
    7e86:	37 95       	ror	r19
    7e88:	27 95       	ror	r18
    7e8a:	a7 95       	ror	r26
    7e8c:	f0 40       	sbci	r31, 0x00	; 0
    7e8e:	53 95       	inc	r21
    7e90:	c9 f7       	brne	.-14     	; 0x7e84 <__addsf3x+0x4e>
    7e92:	7e f4       	brtc	.+30     	; 0x7eb2 <__addsf3x+0x7c>
    7e94:	1f 16       	cp	r1, r31
    7e96:	ba 0b       	sbc	r27, r26
    7e98:	62 0b       	sbc	r22, r18
    7e9a:	73 0b       	sbc	r23, r19
    7e9c:	84 0b       	sbc	r24, r20
    7e9e:	ba f0       	brmi	.+46     	; 0x7ece <__addsf3x+0x98>
    7ea0:	91 50       	subi	r25, 0x01	; 1
    7ea2:	a1 f0       	breq	.+40     	; 0x7ecc <__addsf3x+0x96>
    7ea4:	ff 0f       	add	r31, r31
    7ea6:	bb 1f       	adc	r27, r27
    7ea8:	66 1f       	adc	r22, r22
    7eaa:	77 1f       	adc	r23, r23
    7eac:	88 1f       	adc	r24, r24
    7eae:	c2 f7       	brpl	.-16     	; 0x7ea0 <__addsf3x+0x6a>
    7eb0:	0e c0       	rjmp	.+28     	; 0x7ece <__addsf3x+0x98>
    7eb2:	ba 0f       	add	r27, r26
    7eb4:	62 1f       	adc	r22, r18
    7eb6:	73 1f       	adc	r23, r19
    7eb8:	84 1f       	adc	r24, r20
    7eba:	48 f4       	brcc	.+18     	; 0x7ece <__addsf3x+0x98>
    7ebc:	87 95       	ror	r24
    7ebe:	77 95       	ror	r23
    7ec0:	67 95       	ror	r22
    7ec2:	b7 95       	ror	r27
    7ec4:	f7 95       	ror	r31
    7ec6:	9e 3f       	cpi	r25, 0xFE	; 254
    7ec8:	08 f0       	brcs	.+2      	; 0x7ecc <__addsf3x+0x96>
    7eca:	b3 cf       	rjmp	.-154    	; 0x7e32 <__addsf3+0x1e>
    7ecc:	93 95       	inc	r25
    7ece:	88 0f       	add	r24, r24
    7ed0:	08 f0       	brcs	.+2      	; 0x7ed4 <__addsf3x+0x9e>
    7ed2:	99 27       	eor	r25, r25
    7ed4:	ee 0f       	add	r30, r30
    7ed6:	97 95       	ror	r25
    7ed8:	87 95       	ror	r24
    7eda:	08 95       	ret

00007edc <__cmpsf2>:
    7edc:	d9 d0       	rcall	.+434    	; 0x8090 <__fp_cmp>
    7ede:	08 f4       	brcc	.+2      	; 0x7ee2 <__cmpsf2+0x6>
    7ee0:	81 e0       	ldi	r24, 0x01	; 1
    7ee2:	08 95       	ret

00007ee4 <__divsf3>:
    7ee4:	0c d0       	rcall	.+24     	; 0x7efe <__divsf3x>
    7ee6:	0f c1       	rjmp	.+542    	; 0x8106 <__fp_round>
    7ee8:	07 d1       	rcall	.+526    	; 0x80f8 <__fp_pscB>
    7eea:	40 f0       	brcs	.+16     	; 0x7efc <__divsf3+0x18>
    7eec:	fe d0       	rcall	.+508    	; 0x80ea <__fp_pscA>
    7eee:	30 f0       	brcs	.+12     	; 0x7efc <__divsf3+0x18>
    7ef0:	21 f4       	brne	.+8      	; 0x7efa <__divsf3+0x16>
    7ef2:	5f 3f       	cpi	r21, 0xFF	; 255
    7ef4:	19 f0       	breq	.+6      	; 0x7efc <__divsf3+0x18>
    7ef6:	f0 c0       	rjmp	.+480    	; 0x80d8 <__fp_inf>
    7ef8:	51 11       	cpse	r21, r1
    7efa:	39 c1       	rjmp	.+626    	; 0x816e <__fp_szero>
    7efc:	f3 c0       	rjmp	.+486    	; 0x80e4 <__fp_nan>

00007efe <__divsf3x>:
    7efe:	14 d1       	rcall	.+552    	; 0x8128 <__fp_split3>
    7f00:	98 f3       	brcs	.-26     	; 0x7ee8 <__divsf3+0x4>

00007f02 <__divsf3_pse>:
    7f02:	99 23       	and	r25, r25
    7f04:	c9 f3       	breq	.-14     	; 0x7ef8 <__divsf3+0x14>
    7f06:	55 23       	and	r21, r21
    7f08:	b1 f3       	breq	.-20     	; 0x7ef6 <__divsf3+0x12>
    7f0a:	95 1b       	sub	r25, r21
    7f0c:	55 0b       	sbc	r21, r21
    7f0e:	bb 27       	eor	r27, r27
    7f10:	aa 27       	eor	r26, r26
    7f12:	62 17       	cp	r22, r18
    7f14:	73 07       	cpc	r23, r19
    7f16:	84 07       	cpc	r24, r20
    7f18:	38 f0       	brcs	.+14     	; 0x7f28 <__divsf3_pse+0x26>
    7f1a:	9f 5f       	subi	r25, 0xFF	; 255
    7f1c:	5f 4f       	sbci	r21, 0xFF	; 255
    7f1e:	22 0f       	add	r18, r18
    7f20:	33 1f       	adc	r19, r19
    7f22:	44 1f       	adc	r20, r20
    7f24:	aa 1f       	adc	r26, r26
    7f26:	a9 f3       	breq	.-22     	; 0x7f12 <__divsf3_pse+0x10>
    7f28:	33 d0       	rcall	.+102    	; 0x7f90 <__divsf3_pse+0x8e>
    7f2a:	0e 2e       	mov	r0, r30
    7f2c:	3a f0       	brmi	.+14     	; 0x7f3c <__divsf3_pse+0x3a>
    7f2e:	e0 e8       	ldi	r30, 0x80	; 128
    7f30:	30 d0       	rcall	.+96     	; 0x7f92 <__divsf3_pse+0x90>
    7f32:	91 50       	subi	r25, 0x01	; 1
    7f34:	50 40       	sbci	r21, 0x00	; 0
    7f36:	e6 95       	lsr	r30
    7f38:	00 1c       	adc	r0, r0
    7f3a:	ca f7       	brpl	.-14     	; 0x7f2e <__divsf3_pse+0x2c>
    7f3c:	29 d0       	rcall	.+82     	; 0x7f90 <__divsf3_pse+0x8e>
    7f3e:	fe 2f       	mov	r31, r30
    7f40:	27 d0       	rcall	.+78     	; 0x7f90 <__divsf3_pse+0x8e>
    7f42:	66 0f       	add	r22, r22
    7f44:	77 1f       	adc	r23, r23
    7f46:	88 1f       	adc	r24, r24
    7f48:	bb 1f       	adc	r27, r27
    7f4a:	26 17       	cp	r18, r22
    7f4c:	37 07       	cpc	r19, r23
    7f4e:	48 07       	cpc	r20, r24
    7f50:	ab 07       	cpc	r26, r27
    7f52:	b0 e8       	ldi	r27, 0x80	; 128
    7f54:	09 f0       	breq	.+2      	; 0x7f58 <__divsf3_pse+0x56>
    7f56:	bb 0b       	sbc	r27, r27
    7f58:	80 2d       	mov	r24, r0
    7f5a:	bf 01       	movw	r22, r30
    7f5c:	ff 27       	eor	r31, r31
    7f5e:	93 58       	subi	r25, 0x83	; 131
    7f60:	5f 4f       	sbci	r21, 0xFF	; 255
    7f62:	2a f0       	brmi	.+10     	; 0x7f6e <__divsf3_pse+0x6c>
    7f64:	9e 3f       	cpi	r25, 0xFE	; 254
    7f66:	51 05       	cpc	r21, r1
    7f68:	68 f0       	brcs	.+26     	; 0x7f84 <__divsf3_pse+0x82>
    7f6a:	b6 c0       	rjmp	.+364    	; 0x80d8 <__fp_inf>
    7f6c:	00 c1       	rjmp	.+512    	; 0x816e <__fp_szero>
    7f6e:	5f 3f       	cpi	r21, 0xFF	; 255
    7f70:	ec f3       	brlt	.-6      	; 0x7f6c <__divsf3_pse+0x6a>
    7f72:	98 3e       	cpi	r25, 0xE8	; 232
    7f74:	dc f3       	brlt	.-10     	; 0x7f6c <__divsf3_pse+0x6a>
    7f76:	86 95       	lsr	r24
    7f78:	77 95       	ror	r23
    7f7a:	67 95       	ror	r22
    7f7c:	b7 95       	ror	r27
    7f7e:	f7 95       	ror	r31
    7f80:	9f 5f       	subi	r25, 0xFF	; 255
    7f82:	c9 f7       	brne	.-14     	; 0x7f76 <__divsf3_pse+0x74>
    7f84:	88 0f       	add	r24, r24
    7f86:	91 1d       	adc	r25, r1
    7f88:	96 95       	lsr	r25
    7f8a:	87 95       	ror	r24
    7f8c:	97 f9       	bld	r25, 7
    7f8e:	08 95       	ret
    7f90:	e1 e0       	ldi	r30, 0x01	; 1
    7f92:	66 0f       	add	r22, r22
    7f94:	77 1f       	adc	r23, r23
    7f96:	88 1f       	adc	r24, r24
    7f98:	bb 1f       	adc	r27, r27
    7f9a:	62 17       	cp	r22, r18
    7f9c:	73 07       	cpc	r23, r19
    7f9e:	84 07       	cpc	r24, r20
    7fa0:	ba 07       	cpc	r27, r26
    7fa2:	20 f0       	brcs	.+8      	; 0x7fac <__divsf3_pse+0xaa>
    7fa4:	62 1b       	sub	r22, r18
    7fa6:	73 0b       	sbc	r23, r19
    7fa8:	84 0b       	sbc	r24, r20
    7faa:	ba 0b       	sbc	r27, r26
    7fac:	ee 1f       	adc	r30, r30
    7fae:	88 f7       	brcc	.-30     	; 0x7f92 <__divsf3_pse+0x90>
    7fb0:	e0 95       	com	r30
    7fb2:	08 95       	ret

00007fb4 <__fixsfsi>:
    7fb4:	04 d0       	rcall	.+8      	; 0x7fbe <__fixunssfsi>
    7fb6:	68 94       	set
    7fb8:	b1 11       	cpse	r27, r1
    7fba:	d9 c0       	rjmp	.+434    	; 0x816e <__fp_szero>
    7fbc:	08 95       	ret

00007fbe <__fixunssfsi>:
    7fbe:	bc d0       	rcall	.+376    	; 0x8138 <__fp_splitA>
    7fc0:	88 f0       	brcs	.+34     	; 0x7fe4 <__fixunssfsi+0x26>
    7fc2:	9f 57       	subi	r25, 0x7F	; 127
    7fc4:	90 f0       	brcs	.+36     	; 0x7fea <__fixunssfsi+0x2c>
    7fc6:	b9 2f       	mov	r27, r25
    7fc8:	99 27       	eor	r25, r25
    7fca:	b7 51       	subi	r27, 0x17	; 23
    7fcc:	a0 f0       	brcs	.+40     	; 0x7ff6 <__fixunssfsi+0x38>
    7fce:	d1 f0       	breq	.+52     	; 0x8004 <__fixunssfsi+0x46>
    7fd0:	66 0f       	add	r22, r22
    7fd2:	77 1f       	adc	r23, r23
    7fd4:	88 1f       	adc	r24, r24
    7fd6:	99 1f       	adc	r25, r25
    7fd8:	1a f0       	brmi	.+6      	; 0x7fe0 <__fixunssfsi+0x22>
    7fda:	ba 95       	dec	r27
    7fdc:	c9 f7       	brne	.-14     	; 0x7fd0 <__fixunssfsi+0x12>
    7fde:	12 c0       	rjmp	.+36     	; 0x8004 <__fixunssfsi+0x46>
    7fe0:	b1 30       	cpi	r27, 0x01	; 1
    7fe2:	81 f0       	breq	.+32     	; 0x8004 <__fixunssfsi+0x46>
    7fe4:	c3 d0       	rcall	.+390    	; 0x816c <__fp_zero>
    7fe6:	b1 e0       	ldi	r27, 0x01	; 1
    7fe8:	08 95       	ret
    7fea:	c0 c0       	rjmp	.+384    	; 0x816c <__fp_zero>
    7fec:	67 2f       	mov	r22, r23
    7fee:	78 2f       	mov	r23, r24
    7ff0:	88 27       	eor	r24, r24
    7ff2:	b8 5f       	subi	r27, 0xF8	; 248
    7ff4:	39 f0       	breq	.+14     	; 0x8004 <__fixunssfsi+0x46>
    7ff6:	b9 3f       	cpi	r27, 0xF9	; 249
    7ff8:	cc f3       	brlt	.-14     	; 0x7fec <__fixunssfsi+0x2e>
    7ffa:	86 95       	lsr	r24
    7ffc:	77 95       	ror	r23
    7ffe:	67 95       	ror	r22
    8000:	b3 95       	inc	r27
    8002:	d9 f7       	brne	.-10     	; 0x7ffa <__fixunssfsi+0x3c>
    8004:	3e f4       	brtc	.+14     	; 0x8014 <__fixunssfsi+0x56>
    8006:	90 95       	com	r25
    8008:	80 95       	com	r24
    800a:	70 95       	com	r23
    800c:	61 95       	neg	r22
    800e:	7f 4f       	sbci	r23, 0xFF	; 255
    8010:	8f 4f       	sbci	r24, 0xFF	; 255
    8012:	9f 4f       	sbci	r25, 0xFF	; 255
    8014:	08 95       	ret

00008016 <__floatunsisf>:
    8016:	e8 94       	clt
    8018:	09 c0       	rjmp	.+18     	; 0x802c <__floatsisf+0x12>

0000801a <__floatsisf>:
    801a:	97 fb       	bst	r25, 7
    801c:	3e f4       	brtc	.+14     	; 0x802c <__floatsisf+0x12>
    801e:	90 95       	com	r25
    8020:	80 95       	com	r24
    8022:	70 95       	com	r23
    8024:	61 95       	neg	r22
    8026:	7f 4f       	sbci	r23, 0xFF	; 255
    8028:	8f 4f       	sbci	r24, 0xFF	; 255
    802a:	9f 4f       	sbci	r25, 0xFF	; 255
    802c:	99 23       	and	r25, r25
    802e:	a9 f0       	breq	.+42     	; 0x805a <__floatsisf+0x40>
    8030:	f9 2f       	mov	r31, r25
    8032:	96 e9       	ldi	r25, 0x96	; 150
    8034:	bb 27       	eor	r27, r27
    8036:	93 95       	inc	r25
    8038:	f6 95       	lsr	r31
    803a:	87 95       	ror	r24
    803c:	77 95       	ror	r23
    803e:	67 95       	ror	r22
    8040:	b7 95       	ror	r27
    8042:	f1 11       	cpse	r31, r1
    8044:	f8 cf       	rjmp	.-16     	; 0x8036 <__floatsisf+0x1c>
    8046:	fa f4       	brpl	.+62     	; 0x8086 <__floatsisf+0x6c>
    8048:	bb 0f       	add	r27, r27
    804a:	11 f4       	brne	.+4      	; 0x8050 <__floatsisf+0x36>
    804c:	60 ff       	sbrs	r22, 0
    804e:	1b c0       	rjmp	.+54     	; 0x8086 <__floatsisf+0x6c>
    8050:	6f 5f       	subi	r22, 0xFF	; 255
    8052:	7f 4f       	sbci	r23, 0xFF	; 255
    8054:	8f 4f       	sbci	r24, 0xFF	; 255
    8056:	9f 4f       	sbci	r25, 0xFF	; 255
    8058:	16 c0       	rjmp	.+44     	; 0x8086 <__floatsisf+0x6c>
    805a:	88 23       	and	r24, r24
    805c:	11 f0       	breq	.+4      	; 0x8062 <__floatsisf+0x48>
    805e:	96 e9       	ldi	r25, 0x96	; 150
    8060:	11 c0       	rjmp	.+34     	; 0x8084 <__floatsisf+0x6a>
    8062:	77 23       	and	r23, r23
    8064:	21 f0       	breq	.+8      	; 0x806e <__floatsisf+0x54>
    8066:	9e e8       	ldi	r25, 0x8E	; 142
    8068:	87 2f       	mov	r24, r23
    806a:	76 2f       	mov	r23, r22
    806c:	05 c0       	rjmp	.+10     	; 0x8078 <__floatsisf+0x5e>
    806e:	66 23       	and	r22, r22
    8070:	71 f0       	breq	.+28     	; 0x808e <__floatsisf+0x74>
    8072:	96 e8       	ldi	r25, 0x86	; 134
    8074:	86 2f       	mov	r24, r22
    8076:	70 e0       	ldi	r23, 0x00	; 0
    8078:	60 e0       	ldi	r22, 0x00	; 0
    807a:	2a f0       	brmi	.+10     	; 0x8086 <__floatsisf+0x6c>
    807c:	9a 95       	dec	r25
    807e:	66 0f       	add	r22, r22
    8080:	77 1f       	adc	r23, r23
    8082:	88 1f       	adc	r24, r24
    8084:	da f7       	brpl	.-10     	; 0x807c <__floatsisf+0x62>
    8086:	88 0f       	add	r24, r24
    8088:	96 95       	lsr	r25
    808a:	87 95       	ror	r24
    808c:	97 f9       	bld	r25, 7
    808e:	08 95       	ret

00008090 <__fp_cmp>:
    8090:	99 0f       	add	r25, r25
    8092:	00 08       	sbc	r0, r0
    8094:	55 0f       	add	r21, r21
    8096:	aa 0b       	sbc	r26, r26
    8098:	e0 e8       	ldi	r30, 0x80	; 128
    809a:	fe ef       	ldi	r31, 0xFE	; 254
    809c:	16 16       	cp	r1, r22
    809e:	17 06       	cpc	r1, r23
    80a0:	e8 07       	cpc	r30, r24
    80a2:	f9 07       	cpc	r31, r25
    80a4:	c0 f0       	brcs	.+48     	; 0x80d6 <__fp_cmp+0x46>
    80a6:	12 16       	cp	r1, r18
    80a8:	13 06       	cpc	r1, r19
    80aa:	e4 07       	cpc	r30, r20
    80ac:	f5 07       	cpc	r31, r21
    80ae:	98 f0       	brcs	.+38     	; 0x80d6 <__fp_cmp+0x46>
    80b0:	62 1b       	sub	r22, r18
    80b2:	73 0b       	sbc	r23, r19
    80b4:	84 0b       	sbc	r24, r20
    80b6:	95 0b       	sbc	r25, r21
    80b8:	39 f4       	brne	.+14     	; 0x80c8 <__fp_cmp+0x38>
    80ba:	0a 26       	eor	r0, r26
    80bc:	61 f0       	breq	.+24     	; 0x80d6 <__fp_cmp+0x46>
    80be:	23 2b       	or	r18, r19
    80c0:	24 2b       	or	r18, r20
    80c2:	25 2b       	or	r18, r21
    80c4:	21 f4       	brne	.+8      	; 0x80ce <__fp_cmp+0x3e>
    80c6:	08 95       	ret
    80c8:	0a 26       	eor	r0, r26
    80ca:	09 f4       	brne	.+2      	; 0x80ce <__fp_cmp+0x3e>
    80cc:	a1 40       	sbci	r26, 0x01	; 1
    80ce:	a6 95       	lsr	r26
    80d0:	8f ef       	ldi	r24, 0xFF	; 255
    80d2:	81 1d       	adc	r24, r1
    80d4:	81 1d       	adc	r24, r1
    80d6:	08 95       	ret

000080d8 <__fp_inf>:
    80d8:	97 f9       	bld	r25, 7
    80da:	9f 67       	ori	r25, 0x7F	; 127
    80dc:	80 e8       	ldi	r24, 0x80	; 128
    80de:	70 e0       	ldi	r23, 0x00	; 0
    80e0:	60 e0       	ldi	r22, 0x00	; 0
    80e2:	08 95       	ret

000080e4 <__fp_nan>:
    80e4:	9f ef       	ldi	r25, 0xFF	; 255
    80e6:	80 ec       	ldi	r24, 0xC0	; 192
    80e8:	08 95       	ret

000080ea <__fp_pscA>:
    80ea:	00 24       	eor	r0, r0
    80ec:	0a 94       	dec	r0
    80ee:	16 16       	cp	r1, r22
    80f0:	17 06       	cpc	r1, r23
    80f2:	18 06       	cpc	r1, r24
    80f4:	09 06       	cpc	r0, r25
    80f6:	08 95       	ret

000080f8 <__fp_pscB>:
    80f8:	00 24       	eor	r0, r0
    80fa:	0a 94       	dec	r0
    80fc:	12 16       	cp	r1, r18
    80fe:	13 06       	cpc	r1, r19
    8100:	14 06       	cpc	r1, r20
    8102:	05 06       	cpc	r0, r21
    8104:	08 95       	ret

00008106 <__fp_round>:
    8106:	09 2e       	mov	r0, r25
    8108:	03 94       	inc	r0
    810a:	00 0c       	add	r0, r0
    810c:	11 f4       	brne	.+4      	; 0x8112 <__fp_round+0xc>
    810e:	88 23       	and	r24, r24
    8110:	52 f0       	brmi	.+20     	; 0x8126 <__fp_round+0x20>
    8112:	bb 0f       	add	r27, r27
    8114:	40 f4       	brcc	.+16     	; 0x8126 <__fp_round+0x20>
    8116:	bf 2b       	or	r27, r31
    8118:	11 f4       	brne	.+4      	; 0x811e <__fp_round+0x18>
    811a:	60 ff       	sbrs	r22, 0
    811c:	04 c0       	rjmp	.+8      	; 0x8126 <__fp_round+0x20>
    811e:	6f 5f       	subi	r22, 0xFF	; 255
    8120:	7f 4f       	sbci	r23, 0xFF	; 255
    8122:	8f 4f       	sbci	r24, 0xFF	; 255
    8124:	9f 4f       	sbci	r25, 0xFF	; 255
    8126:	08 95       	ret

00008128 <__fp_split3>:
    8128:	57 fd       	sbrc	r21, 7
    812a:	90 58       	subi	r25, 0x80	; 128
    812c:	44 0f       	add	r20, r20
    812e:	55 1f       	adc	r21, r21
    8130:	59 f0       	breq	.+22     	; 0x8148 <__fp_splitA+0x10>
    8132:	5f 3f       	cpi	r21, 0xFF	; 255
    8134:	71 f0       	breq	.+28     	; 0x8152 <__fp_splitA+0x1a>
    8136:	47 95       	ror	r20

00008138 <__fp_splitA>:
    8138:	88 0f       	add	r24, r24
    813a:	97 fb       	bst	r25, 7
    813c:	99 1f       	adc	r25, r25
    813e:	61 f0       	breq	.+24     	; 0x8158 <__fp_splitA+0x20>
    8140:	9f 3f       	cpi	r25, 0xFF	; 255
    8142:	79 f0       	breq	.+30     	; 0x8162 <__fp_splitA+0x2a>
    8144:	87 95       	ror	r24
    8146:	08 95       	ret
    8148:	12 16       	cp	r1, r18
    814a:	13 06       	cpc	r1, r19
    814c:	14 06       	cpc	r1, r20
    814e:	55 1f       	adc	r21, r21
    8150:	f2 cf       	rjmp	.-28     	; 0x8136 <__fp_split3+0xe>
    8152:	46 95       	lsr	r20
    8154:	f1 df       	rcall	.-30     	; 0x8138 <__fp_splitA>
    8156:	08 c0       	rjmp	.+16     	; 0x8168 <__fp_splitA+0x30>
    8158:	16 16       	cp	r1, r22
    815a:	17 06       	cpc	r1, r23
    815c:	18 06       	cpc	r1, r24
    815e:	99 1f       	adc	r25, r25
    8160:	f1 cf       	rjmp	.-30     	; 0x8144 <__fp_splitA+0xc>
    8162:	86 95       	lsr	r24
    8164:	71 05       	cpc	r23, r1
    8166:	61 05       	cpc	r22, r1
    8168:	08 94       	sec
    816a:	08 95       	ret

0000816c <__fp_zero>:
    816c:	e8 94       	clt

0000816e <__fp_szero>:
    816e:	bb 27       	eor	r27, r27
    8170:	66 27       	eor	r22, r22
    8172:	77 27       	eor	r23, r23
    8174:	cb 01       	movw	r24, r22
    8176:	97 f9       	bld	r25, 7
    8178:	08 95       	ret

0000817a <__gesf2>:
    817a:	8a df       	rcall	.-236    	; 0x8090 <__fp_cmp>
    817c:	08 f4       	brcc	.+2      	; 0x8180 <__gesf2+0x6>
    817e:	8f ef       	ldi	r24, 0xFF	; 255
    8180:	08 95       	ret

00008182 <__mulsf3>:
    8182:	0b d0       	rcall	.+22     	; 0x819a <__mulsf3x>
    8184:	c0 cf       	rjmp	.-128    	; 0x8106 <__fp_round>
    8186:	b1 df       	rcall	.-158    	; 0x80ea <__fp_pscA>
    8188:	28 f0       	brcs	.+10     	; 0x8194 <__mulsf3+0x12>
    818a:	b6 df       	rcall	.-148    	; 0x80f8 <__fp_pscB>
    818c:	18 f0       	brcs	.+6      	; 0x8194 <__mulsf3+0x12>
    818e:	95 23       	and	r25, r21
    8190:	09 f0       	breq	.+2      	; 0x8194 <__mulsf3+0x12>
    8192:	a2 cf       	rjmp	.-188    	; 0x80d8 <__fp_inf>
    8194:	a7 cf       	rjmp	.-178    	; 0x80e4 <__fp_nan>
    8196:	11 24       	eor	r1, r1
    8198:	ea cf       	rjmp	.-44     	; 0x816e <__fp_szero>

0000819a <__mulsf3x>:
    819a:	c6 df       	rcall	.-116    	; 0x8128 <__fp_split3>
    819c:	a0 f3       	brcs	.-24     	; 0x8186 <__mulsf3+0x4>

0000819e <__mulsf3_pse>:
    819e:	95 9f       	mul	r25, r21
    81a0:	d1 f3       	breq	.-12     	; 0x8196 <__mulsf3+0x14>
    81a2:	95 0f       	add	r25, r21
    81a4:	50 e0       	ldi	r21, 0x00	; 0
    81a6:	55 1f       	adc	r21, r21
    81a8:	62 9f       	mul	r22, r18
    81aa:	f0 01       	movw	r30, r0
    81ac:	72 9f       	mul	r23, r18
    81ae:	bb 27       	eor	r27, r27
    81b0:	f0 0d       	add	r31, r0
    81b2:	b1 1d       	adc	r27, r1
    81b4:	63 9f       	mul	r22, r19
    81b6:	aa 27       	eor	r26, r26
    81b8:	f0 0d       	add	r31, r0
    81ba:	b1 1d       	adc	r27, r1
    81bc:	aa 1f       	adc	r26, r26
    81be:	64 9f       	mul	r22, r20
    81c0:	66 27       	eor	r22, r22
    81c2:	b0 0d       	add	r27, r0
    81c4:	a1 1d       	adc	r26, r1
    81c6:	66 1f       	adc	r22, r22
    81c8:	82 9f       	mul	r24, r18
    81ca:	22 27       	eor	r18, r18
    81cc:	b0 0d       	add	r27, r0
    81ce:	a1 1d       	adc	r26, r1
    81d0:	62 1f       	adc	r22, r18
    81d2:	73 9f       	mul	r23, r19
    81d4:	b0 0d       	add	r27, r0
    81d6:	a1 1d       	adc	r26, r1
    81d8:	62 1f       	adc	r22, r18
    81da:	83 9f       	mul	r24, r19
    81dc:	a0 0d       	add	r26, r0
    81de:	61 1d       	adc	r22, r1
    81e0:	22 1f       	adc	r18, r18
    81e2:	74 9f       	mul	r23, r20
    81e4:	33 27       	eor	r19, r19
    81e6:	a0 0d       	add	r26, r0
    81e8:	61 1d       	adc	r22, r1
    81ea:	23 1f       	adc	r18, r19
    81ec:	84 9f       	mul	r24, r20
    81ee:	60 0d       	add	r22, r0
    81f0:	21 1d       	adc	r18, r1
    81f2:	82 2f       	mov	r24, r18
    81f4:	76 2f       	mov	r23, r22
    81f6:	6a 2f       	mov	r22, r26
    81f8:	11 24       	eor	r1, r1
    81fa:	9f 57       	subi	r25, 0x7F	; 127
    81fc:	50 40       	sbci	r21, 0x00	; 0
    81fe:	8a f0       	brmi	.+34     	; 0x8222 <__mulsf3_pse+0x84>
    8200:	e1 f0       	breq	.+56     	; 0x823a <__mulsf3_pse+0x9c>
    8202:	88 23       	and	r24, r24
    8204:	4a f0       	brmi	.+18     	; 0x8218 <__mulsf3_pse+0x7a>
    8206:	ee 0f       	add	r30, r30
    8208:	ff 1f       	adc	r31, r31
    820a:	bb 1f       	adc	r27, r27
    820c:	66 1f       	adc	r22, r22
    820e:	77 1f       	adc	r23, r23
    8210:	88 1f       	adc	r24, r24
    8212:	91 50       	subi	r25, 0x01	; 1
    8214:	50 40       	sbci	r21, 0x00	; 0
    8216:	a9 f7       	brne	.-22     	; 0x8202 <__mulsf3_pse+0x64>
    8218:	9e 3f       	cpi	r25, 0xFE	; 254
    821a:	51 05       	cpc	r21, r1
    821c:	70 f0       	brcs	.+28     	; 0x823a <__mulsf3_pse+0x9c>
    821e:	5c cf       	rjmp	.-328    	; 0x80d8 <__fp_inf>
    8220:	a6 cf       	rjmp	.-180    	; 0x816e <__fp_szero>
    8222:	5f 3f       	cpi	r21, 0xFF	; 255
    8224:	ec f3       	brlt	.-6      	; 0x8220 <__mulsf3_pse+0x82>
    8226:	98 3e       	cpi	r25, 0xE8	; 232
    8228:	dc f3       	brlt	.-10     	; 0x8220 <__mulsf3_pse+0x82>
    822a:	86 95       	lsr	r24
    822c:	77 95       	ror	r23
    822e:	67 95       	ror	r22
    8230:	b7 95       	ror	r27
    8232:	f7 95       	ror	r31
    8234:	e7 95       	ror	r30
    8236:	9f 5f       	subi	r25, 0xFF	; 255
    8238:	c1 f7       	brne	.-16     	; 0x822a <__mulsf3_pse+0x8c>
    823a:	fe 2b       	or	r31, r30
    823c:	88 0f       	add	r24, r24
    823e:	91 1d       	adc	r25, r1
    8240:	96 95       	lsr	r25
    8242:	87 95       	ror	r24
    8244:	97 f9       	bld	r25, 7
    8246:	08 95       	ret

00008248 <__udivmodhi4>:
    8248:	aa 1b       	sub	r26, r26
    824a:	bb 1b       	sub	r27, r27
    824c:	51 e1       	ldi	r21, 0x11	; 17
    824e:	07 c0       	rjmp	.+14     	; 0x825e <__udivmodhi4_ep>

00008250 <__udivmodhi4_loop>:
    8250:	aa 1f       	adc	r26, r26
    8252:	bb 1f       	adc	r27, r27
    8254:	a6 17       	cp	r26, r22
    8256:	b7 07       	cpc	r27, r23
    8258:	10 f0       	brcs	.+4      	; 0x825e <__udivmodhi4_ep>
    825a:	a6 1b       	sub	r26, r22
    825c:	b7 0b       	sbc	r27, r23

0000825e <__udivmodhi4_ep>:
    825e:	88 1f       	adc	r24, r24
    8260:	99 1f       	adc	r25, r25
    8262:	5a 95       	dec	r21
    8264:	a9 f7       	brne	.-22     	; 0x8250 <__udivmodhi4_loop>
    8266:	80 95       	com	r24
    8268:	90 95       	com	r25
    826a:	bc 01       	movw	r22, r24
    826c:	cd 01       	movw	r24, r26
    826e:	08 95       	ret

00008270 <__divmodhi4>:
    8270:	97 fb       	bst	r25, 7
    8272:	07 2e       	mov	r0, r23
    8274:	16 f4       	brtc	.+4      	; 0x827a <__divmodhi4+0xa>
    8276:	00 94       	com	r0
    8278:	07 d0       	rcall	.+14     	; 0x8288 <__divmodhi4_neg1>
    827a:	77 fd       	sbrc	r23, 7
    827c:	09 d0       	rcall	.+18     	; 0x8290 <__divmodhi4_neg2>
    827e:	0e 94 24 41 	call	0x8248	; 0x8248 <__udivmodhi4>
    8282:	07 fc       	sbrc	r0, 7
    8284:	05 d0       	rcall	.+10     	; 0x8290 <__divmodhi4_neg2>
    8286:	3e f4       	brtc	.+14     	; 0x8296 <__divmodhi4_exit>

00008288 <__divmodhi4_neg1>:
    8288:	90 95       	com	r25
    828a:	81 95       	neg	r24
    828c:	9f 4f       	sbci	r25, 0xFF	; 255
    828e:	08 95       	ret

00008290 <__divmodhi4_neg2>:
    8290:	70 95       	com	r23
    8292:	61 95       	neg	r22
    8294:	7f 4f       	sbci	r23, 0xFF	; 255

00008296 <__divmodhi4_exit>:
    8296:	08 95       	ret

00008298 <__udivmodsi4>:
    8298:	a1 e2       	ldi	r26, 0x21	; 33
    829a:	1a 2e       	mov	r1, r26
    829c:	aa 1b       	sub	r26, r26
    829e:	bb 1b       	sub	r27, r27
    82a0:	fd 01       	movw	r30, r26
    82a2:	0d c0       	rjmp	.+26     	; 0x82be <__udivmodsi4_ep>

000082a4 <__udivmodsi4_loop>:
    82a4:	aa 1f       	adc	r26, r26
    82a6:	bb 1f       	adc	r27, r27
    82a8:	ee 1f       	adc	r30, r30
    82aa:	ff 1f       	adc	r31, r31
    82ac:	a2 17       	cp	r26, r18
    82ae:	b3 07       	cpc	r27, r19
    82b0:	e4 07       	cpc	r30, r20
    82b2:	f5 07       	cpc	r31, r21
    82b4:	20 f0       	brcs	.+8      	; 0x82be <__udivmodsi4_ep>
    82b6:	a2 1b       	sub	r26, r18
    82b8:	b3 0b       	sbc	r27, r19
    82ba:	e4 0b       	sbc	r30, r20
    82bc:	f5 0b       	sbc	r31, r21

000082be <__udivmodsi4_ep>:
    82be:	66 1f       	adc	r22, r22
    82c0:	77 1f       	adc	r23, r23
    82c2:	88 1f       	adc	r24, r24
    82c4:	99 1f       	adc	r25, r25
    82c6:	1a 94       	dec	r1
    82c8:	69 f7       	brne	.-38     	; 0x82a4 <__udivmodsi4_loop>
    82ca:	60 95       	com	r22
    82cc:	70 95       	com	r23
    82ce:	80 95       	com	r24
    82d0:	90 95       	com	r25
    82d2:	9b 01       	movw	r18, r22
    82d4:	ac 01       	movw	r20, r24
    82d6:	bd 01       	movw	r22, r26
    82d8:	cf 01       	movw	r24, r30
    82da:	08 95       	ret

000082dc <__divmodsi4>:
    82dc:	05 2e       	mov	r0, r21
    82de:	97 fb       	bst	r25, 7
    82e0:	1e f4       	brtc	.+6      	; 0x82e8 <__divmodsi4+0xc>
    82e2:	00 94       	com	r0
    82e4:	0e 94 85 41 	call	0x830a	; 0x830a <__negsi2>
    82e8:	57 fd       	sbrc	r21, 7
    82ea:	07 d0       	rcall	.+14     	; 0x82fa <__divmodsi4_neg2>
    82ec:	0e 94 4c 41 	call	0x8298	; 0x8298 <__udivmodsi4>
    82f0:	07 fc       	sbrc	r0, 7
    82f2:	03 d0       	rcall	.+6      	; 0x82fa <__divmodsi4_neg2>
    82f4:	4e f4       	brtc	.+18     	; 0x8308 <__divmodsi4_exit>
    82f6:	0c 94 85 41 	jmp	0x830a	; 0x830a <__negsi2>

000082fa <__divmodsi4_neg2>:
    82fa:	50 95       	com	r21
    82fc:	40 95       	com	r20
    82fe:	30 95       	com	r19
    8300:	21 95       	neg	r18
    8302:	3f 4f       	sbci	r19, 0xFF	; 255
    8304:	4f 4f       	sbci	r20, 0xFF	; 255
    8306:	5f 4f       	sbci	r21, 0xFF	; 255

00008308 <__divmodsi4_exit>:
    8308:	08 95       	ret

0000830a <__negsi2>:
    830a:	90 95       	com	r25
    830c:	80 95       	com	r24
    830e:	70 95       	com	r23
    8310:	61 95       	neg	r22
    8312:	7f 4f       	sbci	r23, 0xFF	; 255
    8314:	8f 4f       	sbci	r24, 0xFF	; 255
    8316:	9f 4f       	sbci	r25, 0xFF	; 255
    8318:	08 95       	ret

0000831a <__tablejump2__>:
    831a:	ee 0f       	add	r30, r30
    831c:	ff 1f       	adc	r31, r31

0000831e <__tablejump__>:
    831e:	05 90       	lpm	r0, Z+
    8320:	f4 91       	lpm	r31, Z
    8322:	e0 2d       	mov	r30, r0
    8324:	09 94       	ijmp

00008326 <__mulhisi3>:
    8326:	0e 94 9b 41 	call	0x8336	; 0x8336 <__umulhisi3>
    832a:	33 23       	and	r19, r19
    832c:	12 f4       	brpl	.+4      	; 0x8332 <__mulhisi3+0xc>
    832e:	8a 1b       	sub	r24, r26
    8330:	9b 0b       	sbc	r25, r27
    8332:	0c 94 ac 41 	jmp	0x8358	; 0x8358 <__usmulhisi3_tail>

00008336 <__umulhisi3>:
    8336:	a2 9f       	mul	r26, r18
    8338:	b0 01       	movw	r22, r0
    833a:	b3 9f       	mul	r27, r19
    833c:	c0 01       	movw	r24, r0
    833e:	a3 9f       	mul	r26, r19
    8340:	70 0d       	add	r23, r0
    8342:	81 1d       	adc	r24, r1
    8344:	11 24       	eor	r1, r1
    8346:	91 1d       	adc	r25, r1
    8348:	b2 9f       	mul	r27, r18
    834a:	70 0d       	add	r23, r0
    834c:	81 1d       	adc	r24, r1
    834e:	11 24       	eor	r1, r1
    8350:	91 1d       	adc	r25, r1
    8352:	08 95       	ret

00008354 <__usmulhisi3>:
    8354:	0e 94 9b 41 	call	0x8336	; 0x8336 <__umulhisi3>

00008358 <__usmulhisi3_tail>:
    8358:	b7 ff       	sbrs	r27, 7
    835a:	08 95       	ret
    835c:	82 1b       	sub	r24, r18
    835e:	93 0b       	sbc	r25, r19
    8360:	08 95       	ret

00008362 <__muluhisi3>:
    8362:	0e 94 9b 41 	call	0x8336	; 0x8336 <__umulhisi3>
    8366:	a5 9f       	mul	r26, r21
    8368:	90 0d       	add	r25, r0
    836a:	b4 9f       	mul	r27, r20
    836c:	90 0d       	add	r25, r0
    836e:	a4 9f       	mul	r26, r20
    8370:	80 0d       	add	r24, r0
    8372:	91 1d       	adc	r25, r1
    8374:	11 24       	eor	r1, r1
    8376:	08 95       	ret

00008378 <__mulshisi3>:
    8378:	b7 ff       	sbrs	r27, 7
    837a:	0c 94 b1 41 	jmp	0x8362	; 0x8362 <__muluhisi3>

0000837e <__mulohisi3>:
    837e:	0e 94 b1 41 	call	0x8362	; 0x8362 <__muluhisi3>
    8382:	82 1b       	sub	r24, r18
    8384:	93 0b       	sbc	r25, r19
    8386:	08 95       	ret

00008388 <__prologue_saves__>:
    8388:	2f 92       	push	r2
    838a:	3f 92       	push	r3
    838c:	4f 92       	push	r4
    838e:	5f 92       	push	r5
    8390:	6f 92       	push	r6
    8392:	7f 92       	push	r7
    8394:	8f 92       	push	r8
    8396:	9f 92       	push	r9
    8398:	af 92       	push	r10
    839a:	bf 92       	push	r11
    839c:	cf 92       	push	r12
    839e:	df 92       	push	r13
    83a0:	ef 92       	push	r14
    83a2:	ff 92       	push	r15
    83a4:	0f 93       	push	r16
    83a6:	1f 93       	push	r17
    83a8:	cf 93       	push	r28
    83aa:	df 93       	push	r29
    83ac:	cd b7       	in	r28, 0x3d	; 61
    83ae:	de b7       	in	r29, 0x3e	; 62
    83b0:	ca 1b       	sub	r28, r26
    83b2:	db 0b       	sbc	r29, r27
    83b4:	0f b6       	in	r0, 0x3f	; 63
    83b6:	f8 94       	cli
    83b8:	de bf       	out	0x3e, r29	; 62
    83ba:	0f be       	out	0x3f, r0	; 63
    83bc:	cd bf       	out	0x3d, r28	; 61
    83be:	09 94       	ijmp

000083c0 <__epilogue_restores__>:
    83c0:	2a 88       	ldd	r2, Y+18	; 0x12
    83c2:	39 88       	ldd	r3, Y+17	; 0x11
    83c4:	48 88       	ldd	r4, Y+16	; 0x10
    83c6:	5f 84       	ldd	r5, Y+15	; 0x0f
    83c8:	6e 84       	ldd	r6, Y+14	; 0x0e
    83ca:	7d 84       	ldd	r7, Y+13	; 0x0d
    83cc:	8c 84       	ldd	r8, Y+12	; 0x0c
    83ce:	9b 84       	ldd	r9, Y+11	; 0x0b
    83d0:	aa 84       	ldd	r10, Y+10	; 0x0a
    83d2:	b9 84       	ldd	r11, Y+9	; 0x09
    83d4:	c8 84       	ldd	r12, Y+8	; 0x08
    83d6:	df 80       	ldd	r13, Y+7	; 0x07
    83d8:	ee 80       	ldd	r14, Y+6	; 0x06
    83da:	fd 80       	ldd	r15, Y+5	; 0x05
    83dc:	0c 81       	ldd	r16, Y+4	; 0x04
    83de:	1b 81       	ldd	r17, Y+3	; 0x03
    83e0:	aa 81       	ldd	r26, Y+2	; 0x02
    83e2:	b9 81       	ldd	r27, Y+1	; 0x01
    83e4:	ce 0f       	add	r28, r30
    83e6:	d1 1d       	adc	r29, r1
    83e8:	0f b6       	in	r0, 0x3f	; 63
    83ea:	f8 94       	cli
    83ec:	de bf       	out	0x3e, r29	; 62
    83ee:	0f be       	out	0x3f, r0	; 63
    83f0:	cd bf       	out	0x3d, r28	; 61
    83f2:	ed 01       	movw	r28, r26
    83f4:	08 95       	ret

000083f6 <memcpy_P>:
    83f6:	fb 01       	movw	r30, r22
    83f8:	dc 01       	movw	r26, r24
    83fa:	02 c0       	rjmp	.+4      	; 0x8400 <memcpy_P+0xa>
    83fc:	05 90       	lpm	r0, Z+
    83fe:	0d 92       	st	X+, r0
    8400:	41 50       	subi	r20, 0x01	; 1
    8402:	50 40       	sbci	r21, 0x00	; 0
    8404:	d8 f7       	brcc	.-10     	; 0x83fc <memcpy_P+0x6>
    8406:	08 95       	ret

00008408 <__itoa_ncheck>:
    8408:	bb 27       	eor	r27, r27
    840a:	4a 30       	cpi	r20, 0x0A	; 10
    840c:	31 f4       	brne	.+12     	; 0x841a <__itoa_ncheck+0x12>
    840e:	99 23       	and	r25, r25
    8410:	22 f4       	brpl	.+8      	; 0x841a <__itoa_ncheck+0x12>
    8412:	bd e2       	ldi	r27, 0x2D	; 45
    8414:	90 95       	com	r25
    8416:	81 95       	neg	r24
    8418:	9f 4f       	sbci	r25, 0xFF	; 255
    841a:	0c 94 10 42 	jmp	0x8420	; 0x8420 <__utoa_common>

0000841e <__utoa_ncheck>:
    841e:	bb 27       	eor	r27, r27

00008420 <__utoa_common>:
    8420:	fb 01       	movw	r30, r22
    8422:	55 27       	eor	r21, r21
    8424:	aa 27       	eor	r26, r26
    8426:	88 0f       	add	r24, r24
    8428:	99 1f       	adc	r25, r25
    842a:	aa 1f       	adc	r26, r26
    842c:	a4 17       	cp	r26, r20
    842e:	10 f0       	brcs	.+4      	; 0x8434 <__utoa_common+0x14>
    8430:	a4 1b       	sub	r26, r20
    8432:	83 95       	inc	r24
    8434:	50 51       	subi	r21, 0x10	; 16
    8436:	b9 f7       	brne	.-18     	; 0x8426 <__utoa_common+0x6>
    8438:	a0 5d       	subi	r26, 0xD0	; 208
    843a:	aa 33       	cpi	r26, 0x3A	; 58
    843c:	08 f0       	brcs	.+2      	; 0x8440 <__utoa_common+0x20>
    843e:	a9 5d       	subi	r26, 0xD9	; 217
    8440:	a1 93       	st	Z+, r26
    8442:	00 97       	sbiw	r24, 0x00	; 0
    8444:	79 f7       	brne	.-34     	; 0x8424 <__utoa_common+0x4>
    8446:	b1 11       	cpse	r27, r1
    8448:	b1 93       	st	Z+, r27
    844a:	11 92       	st	Z+, r1
    844c:	cb 01       	movw	r24, r22
    844e:	0c 94 4f 42 	jmp	0x849e	; 0x849e <strrev>

00008452 <__eerd_block_m644pa>:
    8452:	dc 01       	movw	r26, r24
    8454:	cb 01       	movw	r24, r22

00008456 <__eerd_blraw_m644pa>:
    8456:	fc 01       	movw	r30, r24
    8458:	f9 99       	sbic	0x1f, 1	; 31
    845a:	fe cf       	rjmp	.-4      	; 0x8458 <__eerd_blraw_m644pa+0x2>
    845c:	06 c0       	rjmp	.+12     	; 0x846a <__eerd_blraw_m644pa+0x14>
    845e:	f2 bd       	out	0x22, r31	; 34
    8460:	e1 bd       	out	0x21, r30	; 33
    8462:	f8 9a       	sbi	0x1f, 0	; 31
    8464:	31 96       	adiw	r30, 0x01	; 1
    8466:	00 b4       	in	r0, 0x20	; 32
    8468:	0d 92       	st	X+, r0
    846a:	41 50       	subi	r20, 0x01	; 1
    846c:	50 40       	sbci	r21, 0x00	; 0
    846e:	b8 f7       	brcc	.-18     	; 0x845e <__eerd_blraw_m644pa+0x8>
    8470:	08 95       	ret

00008472 <__eerd_byte_m644pa>:
    8472:	f9 99       	sbic	0x1f, 1	; 31
    8474:	fe cf       	rjmp	.-4      	; 0x8472 <__eerd_byte_m644pa>
    8476:	92 bd       	out	0x22, r25	; 34
    8478:	81 bd       	out	0x21, r24	; 33
    847a:	f8 9a       	sbi	0x1f, 0	; 31
    847c:	99 27       	eor	r25, r25
    847e:	80 b5       	in	r24, 0x20	; 32
    8480:	08 95       	ret

00008482 <__eewr_byte_m644pa>:
    8482:	26 2f       	mov	r18, r22

00008484 <__eewr_r18_m644pa>:
    8484:	f9 99       	sbic	0x1f, 1	; 31
    8486:	fe cf       	rjmp	.-4      	; 0x8484 <__eewr_r18_m644pa>
    8488:	1f ba       	out	0x1f, r1	; 31
    848a:	92 bd       	out	0x22, r25	; 34
    848c:	81 bd       	out	0x21, r24	; 33
    848e:	20 bd       	out	0x20, r18	; 32
    8490:	0f b6       	in	r0, 0x3f	; 63
    8492:	f8 94       	cli
    8494:	fa 9a       	sbi	0x1f, 2	; 31
    8496:	f9 9a       	sbi	0x1f, 1	; 31
    8498:	0f be       	out	0x3f, r0	; 63
    849a:	01 96       	adiw	r24, 0x01	; 1
    849c:	08 95       	ret

0000849e <strrev>:
    849e:	dc 01       	movw	r26, r24
    84a0:	fc 01       	movw	r30, r24
    84a2:	67 2f       	mov	r22, r23
    84a4:	71 91       	ld	r23, Z+
    84a6:	77 23       	and	r23, r23
    84a8:	e1 f7       	brne	.-8      	; 0x84a2 <strrev+0x4>
    84aa:	32 97       	sbiw	r30, 0x02	; 2
    84ac:	04 c0       	rjmp	.+8      	; 0x84b6 <strrev+0x18>
    84ae:	7c 91       	ld	r23, X
    84b0:	6d 93       	st	X+, r22
    84b2:	70 83       	st	Z, r23
    84b4:	62 91       	ld	r22, -Z
    84b6:	ae 17       	cp	r26, r30
    84b8:	bf 07       	cpc	r27, r31
    84ba:	c8 f3       	brcs	.-14     	; 0x84ae <strrev+0x10>
    84bc:	08 95       	ret

000084be <_exit>:
    84be:	f8 94       	cli

000084c0 <__stop_program>:
    84c0:	ff cf       	rjmp	.-2      	; 0x84c0 <__stop_program>
