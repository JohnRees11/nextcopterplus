
OpenAeroVTOL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000414  00800100  000094d8  0000956c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000094d8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000331  00800514  00800514  00009980  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00009980  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000670  00000000  00000000  000099b0  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000144b1  00000000  00000000  0000a020  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000360b  00000000  00000000  0001e4d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000404e  00000000  00000000  00021adc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00001468  00000000  00000000  00025b2c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00002838  00000000  00000000  00026f94  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000918c  00000000  00000000  000297cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000510  00000000  00000000  00032958  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 75 0d 	jmp	0x1aea	; 0x1aea <__ctors_end>
       4:	0c 94 2c 2c 	jmp	0x5858	; 0x5858 <__vector_1>
       8:	0c 94 f4 2b 	jmp	0x57e8	; 0x57e8 <__vector_2>
       c:	0c 94 df 2c 	jmp	0x59be	; 0x59be <__vector_3>
      10:	0c 94 9b 0d 	jmp	0x1b36	; 0x1b36 <__bad_interrupt>
      14:	0c 94 9e 2c 	jmp	0x593c	; 0x593c <__vector_5>
      18:	0c 94 9b 0d 	jmp	0x1b36	; 0x1b36 <__bad_interrupt>
      1c:	0c 94 65 2c 	jmp	0x58ca	; 0x58ca <__vector_7>
      20:	0c 94 9b 0d 	jmp	0x1b36	; 0x1b36 <__bad_interrupt>
      24:	0c 94 9b 0d 	jmp	0x1b36	; 0x1b36 <__bad_interrupt>
      28:	0c 94 9b 0d 	jmp	0x1b36	; 0x1b36 <__bad_interrupt>
      2c:	0c 94 9b 0d 	jmp	0x1b36	; 0x1b36 <__bad_interrupt>
      30:	0c 94 9b 0d 	jmp	0x1b36	; 0x1b36 <__bad_interrupt>
      34:	0c 94 9b 0d 	jmp	0x1b36	; 0x1b36 <__bad_interrupt>
      38:	0c 94 9b 0d 	jmp	0x1b36	; 0x1b36 <__bad_interrupt>
      3c:	0c 94 9b 0d 	jmp	0x1b36	; 0x1b36 <__bad_interrupt>
      40:	0c 94 9b 0d 	jmp	0x1b36	; 0x1b36 <__bad_interrupt>
      44:	0c 94 9b 0d 	jmp	0x1b36	; 0x1b36 <__bad_interrupt>
      48:	0c 94 dd 2b 	jmp	0x57ba	; 0x57ba <__vector_18>
      4c:	0c 94 9b 0d 	jmp	0x1b36	; 0x1b36 <__bad_interrupt>
      50:	0c 94 9b 2d 	jmp	0x5b36	; 0x5b36 <__vector_20>
      54:	0c 94 9b 0d 	jmp	0x1b36	; 0x1b36 <__bad_interrupt>
      58:	0c 94 9b 0d 	jmp	0x1b36	; 0x1b36 <__bad_interrupt>
      5c:	0c 94 9b 0d 	jmp	0x1b36	; 0x1b36 <__bad_interrupt>
      60:	0c 94 9b 0d 	jmp	0x1b36	; 0x1b36 <__bad_interrupt>
      64:	0c 94 9b 0d 	jmp	0x1b36	; 0x1b36 <__bad_interrupt>
      68:	0c 94 9b 0d 	jmp	0x1b36	; 0x1b36 <__bad_interrupt>
      6c:	0c 94 9b 0d 	jmp	0x1b36	; 0x1b36 <__bad_interrupt>
      70:	0c 94 9b 0d 	jmp	0x1b36	; 0x1b36 <__bad_interrupt>
      74:	0c 94 9b 0d 	jmp	0x1b36	; 0x1b36 <__bad_interrupt>
      78:	0c 94 9b 0d 	jmp	0x1b36	; 0x1b36 <__bad_interrupt>
      7c:	45 1b       	sub	r20, r21
      7e:	ba 1b       	sub	r27, r26
      80:	ba 1b       	sub	r27, r26
      82:	56 1b       	sub	r21, r22
      84:	64 1b       	sub	r22, r20
      86:	6e 1b       	sub	r22, r30
      88:	6a 1b       	sub	r22, r26
      8a:	7c 1b       	sub	r23, r28
      8c:	89 1b       	sub	r24, r25
      8e:	8d 1b       	sub	r24, r29
      90:	9a 1b       	sub	r25, r26
      92:	fb 33       	cpi	r31, 0x3B	; 59
      94:	fd 33       	cpi	r31, 0x3D	; 61
      96:	00 34       	cpi	r16, 0x40	; 64
      98:	02 34       	cpi	r16, 0x42	; 66
      9a:	04 34       	cpi	r16, 0x44	; 68
      9c:	06 34       	cpi	r16, 0x46	; 70
      9e:	08 34       	cpi	r16, 0x48	; 72
      a0:	0a 34       	cpi	r16, 0x4A	; 74
      a2:	0d 34       	cpi	r16, 0x4D	; 77
      a4:	0f 34       	cpi	r16, 0x4F	; 79
      a6:	11 34       	cpi	r17, 0x41	; 65
      a8:	13 34       	cpi	r17, 0x43	; 67
      aa:	15 34       	cpi	r17, 0x45	; 69
      ac:	17 34       	cpi	r17, 0x47	; 71
      ae:	19 34       	cpi	r17, 0x49	; 73
      b0:	1b 34       	cpi	r17, 0x4B	; 75
      b2:	1e 34       	cpi	r17, 0x4E	; 78
      b4:	20 34       	cpi	r18, 0x40	; 64
      b6:	22 34       	cpi	r18, 0x42	; 66
      b8:	b7 37       	cpi	r27, 0x77	; 119
      ba:	9b 37       	cpi	r25, 0x7B	; 123
      bc:	9e 37       	cpi	r25, 0x7E	; 126
      be:	a1 37       	cpi	r26, 0x71	; 113
      c0:	a4 37       	cpi	r26, 0x74	; 116
      c2:	a7 37       	cpi	r26, 0x77	; 119
      c4:	aa 37       	cpi	r26, 0x7A	; 122
      c6:	ad 37       	cpi	r26, 0x7D	; 125
      c8:	b0 37       	cpi	r27, 0x70	; 112

000000ca <Acc_Pol>:
      ca:	ff ff 01 ff 01 ff 01 ff ff 01 01 01 ff 01 01 ff     ................
      da:	ff ff                                               ..

000000dc <ACC_RPY_Order>:
      dc:	00 01 02 02 00 01 00 01 02 00 01 02 01 00 02 00     ................
      ec:	02 01                                               ..

000000ee <FUTABA>:
      ee:	01 02 00 03 04 05 06 07                             ........

000000f6 <JR>:
      f6:	00 01 02 03 04 05 06 07                             ........

000000fe <Trans_Matrix>:
      fe:	05 02 06 01 05 08 03 07 05                          .........

00000107 <Wingdings>:
     107:	01 02 41 05 0d 00 0f 00 22 00 33 00 44 00 4f 09     ..A.....".3.D.O.
     117:	01 00 03 00 07 00 0f 00 1f 00 0f 00 07 00 03 00     ................
     127:	01 00 08 1c 00 1c 00 1c 00 1c 00 7f 00 3e 00 1c     .............>..
     137:	00 08 00 08 08 00 1c 00 3e 00 7f 00 1c 00 1c 00     ........>.......
     147:	1c 00 1c 00 05 ff 01 fe 00 7c 00 38 00 10 00 0d     .........|.8....
     157:	40 00 60 00 70 00 78 00 7c 00 7e 00 7f 00 7e 00     @.`.p.x.|.~...~.
     167:	7c 00 78 00 70 00 60 00 40 00                       |.x.p.`.@.

00000171 <Verdana14>:
     171:	01 02 20 5b 13 00 bb 00 c5 00 cc 00 cc 00 cc 00     .. [............
     181:	cc 01 03 01 03 01 03 01 16 01 29 01 29 01 29 01     ..........).).).
     191:	36 01 49 01 50 01 50 01 6f 01 88 01 a4 01 c0 01     6.I.P.P.o.......
     1a1:	df 01 fb 02 1a 02 36 02 55 02 74 02 7b 02 7b 02     ......6.U.t.{.{.
     1b1:	7b 02 7b 02 7b 02 94 02 94 02 bc 02 db 02 fd 03     {.{.{...........
     1c1:	22 03 3e 03 5a 03 82 03 a1 03 b4 03 ca 03 ec 04     ".>.Z...........
     1d1:	08 04 2d 04 4c 04 74 04 8d 04 b5 04 d7 04 f9 05     ..-.L.t.........
     1e1:	1e 05 3d 05 65 05 99 05 bb 05 e0 06 02 06 02 06     ..=.e...........
     1f1:	1b 06 1b 06 1b 06 1b 06 1b 06 34 06 50 06 69 06     ..........4.P.i.
     201:	85 06 a1 06 b4 06 d0 06 e9 06 f0 07 00 07 1c 07     ................
     211:	23 07 4e 07 67 07 86 07 a2 07 be 07 d1 07 ea 07     #.N.g...........
     221:	fd 08 16 08 32 08 5d 08 79 08 95 03 00 00 00 00     ....2.].y.......
     231:	00 00 00 00 00 02 fe 67 00 fe 67 00 12 78 00 00     .......g..g..x..
     241:	fe 01 00 02 01 00 02 01 00 02 01 00 fe 41 00 78     .............A.x
     251:	70 00 00 1c 00 00 07 00 e0 00 00 38 00 00 0e 1e     p..........8....
     261:	00 82 7f 00 80 40 00 80 40 00 80 40 00 80 7f 00     .....@..@..@....
     271:	00 1e 00 06 c0 1f 00 f8 ff 00 3c e0 01 07 00 07     ..........<.....
     281:	03 00 06 01 00 04 06 01 00 04 03 00 06 07 00 07     ................
     291:	3c e0 01 f8 ff 00 c0 1f 00 04 00 00 03 00 f0 03     <...............
     2a1:	00 70 00 00 10 00 06 00 03 00 00 03 00 00 03 00     .p..............
     2b1:	00 03 00 00 03 00 00 03 00 02 00 70 00 00 70 00     ...........p..p.
     2c1:	0a f0 0f 00 fc 3f 00 0c 30 00 06 60 00 06 60 00     .....?..0..`..`.
     2d1:	06 60 00 06 60 00 0c 30 00 fc 3f 00 f0 0f 00 08     .`..`..0..?.....
     2e1:	18 60 00 18 60 00 18 60 00 fe 7f 00 fe 7f 00 00     .`..`..`........
     2f1:	60 00 00 60 00 00 60 00 09 0c 70 00 06 78 00 06     `..`..`...p..x..
     301:	6c 00 06 66 00 06 63 00 8e 61 00 fc 60 00 78 60     l..f..c..a..`.x`
     311:	00 00 60 00 09 0c 30 00 06 60 00 06 60 00 86 61     ..`...0..`..`..a
     321:	00 86 61 00 86 61 00 ce 73 00 7c 3f 00 38 1e 00     ..a..a..s.|?.8..
     331:	0a 00 07 00 80 07 00 c0 07 00 f0 06 00 38 06 00     .............8..
     341:	1c 06 00 fe 7f 00 fe 7f 00 00 06 00 00 06 00 09     ................
     351:	00 30 00 fe 60 00 fe 60 00 c6 60 00 c6 60 00 c6     .0..`..`..`..`..
     361:	60 00 c6 31 00 86 3f 00 06 0f 00 0a e0 0f 00 f0     `..1..?.........
     371:	3f 00 9c 30 00 cc 60 00 c6 60 00 c6 60 00 c6 60     ?..0..`..`..`..`
     381:	00 c6 31 00 86 3f 00 00 0f 00 09 06 00 00 06 40     ..1..?.........@
     391:	00 06 70 00 06 7c 00 06 0f 00 c6 03 00 f6 00 00     ..p..|..........
     3a1:	3e 00 00 0e 00 00 0a 38 1e 00 7c 3f 00 ce 71 00     >......8..|?..q.
     3b1:	c6 60 00 c6 60 00 86 61 00 86 61 00 4e 73 00 7c     .`..`..a..a.Ns.|
     3c1:	3f 00 38 1e 00 0a f0 00 00 fc 61 00 8c 63 00 06     ?.8.......a..c..
     3d1:	63 00 06 63 00 06 63 00 06 33 00 0c 39 00 fc 1f     c..c..c..3..9...
     3e1:	00 f0 07 00 02 70 70 00 70 70 00 08 0c 00 00 06     .....pp.pp......
     3f1:	00 00 06 67 00 06 67 00 86 01 00 ce 00 00 fc 00     ...g..g.........
     401:	00 38 00 00 0d 00 40 00 00 78 00 00 3f 00 c0 07     .8....@..x..?...
     411:	00 f8 06 00 3e 06 00 06 06 00 3e 06 00 f8 06 00     ....>.....>.....
     421:	c0 07 00 00 3f 00 00 78 00 00 40 00 0a fe 7f 00     ....?..x..@.....
     431:	fe 7f 00 86 61 00 86 61 00 86 61 00 86 61 00 c6     ....a..a..a..a..
     441:	61 00 7c 73 00 3c 3f 00 00 1e 00 0b e0 07 00 f8     a.|s.<?.........
     451:	1f 00 1c 38 00 0c 30 00 06 60 00 06 60 00 06 60     ...8..0..`..`..`
     461:	00 06 60 00 06 60 00 06 20 00 0c 30 00 0c fe 7f     ..`..`.. ..0....
     471:	00 fe 7f 00 06 60 00 06 60 00 06 60 00 06 60 00     .....`..`..`..`.
     481:	06 60 00 0e 70 00 0c 30 00 38 1c 00 f8 0f 00 e0     .`..p..0.8......
     491:	07 00 09 fe 7f 00 fe 7f 00 c6 60 00 c6 60 00 c6     ..........`..`..
     4a1:	60 00 c6 60 00 c6 60 00 c6 60 00 c6 60 00 09 fe     `..`..`..`..`...
     4b1:	7f 00 fe 7f 00 86 01 00 86 01 00 86 01 00 86 01     ................
     4c1:	00 86 01 00 86 01 00 06 00 00 0d e0 07 00 f8 1f     ................
     4d1:	00 3c 3c 00 0c 30 00 0e 70 00 06 60 00 06 60 00     .<<..0..p..`..`.
     4e1:	06 63 00 06 63 00 06 63 00 06 63 00 0c 3f 00 0c     .c..c..c..c..?..
     4f1:	3f 00 0a fe 7f 00 fe 7f 00 c0 00 00 c0 00 00 c0     ?...............
     501:	00 00 c0 00 00 c0 00 00 c0 00 00 fe 7f 00 fe 7f     ................
     511:	00 06 06 60 00 06 60 00 fe 7f 00 fe 7f 00 06 60     ...`..`........`
     521:	00 06 60 00 07 00 60 00 00 60 00 06 60 00 06 60     ..`...`..`..`..`
     531:	00 06 70 00 fe 3f 00 fe 1f 00 0b fe 7f 00 fe 7f     ..p..?..........
     541:	00 80 03 00 c0 01 00 e0 03 00 70 07 00 38 1c 00     ..........p..8..
     551:	1c 38 00 0e 70 00 06 60 00 02 40 00 09 fe 7f 00     .8..p..`..@.....
     561:	fe 7f 00 00 60 00 00 60 00 00 60 00 00 60 00 00     ....`..`..`..`..
     571:	60 00 00 60 00 00 60 00 0c fe 7f 00 fe 7f 00 0e     `..`..`.........
     581:	00 00 38 00 00 e0 01 00 80 07 00 00 07 00 e0 01     ..8.............
     591:	00 38 00 00 0e 00 00 fe 7f 00 fe 7f 00 0a fe 7f     .8..............
     5a1:	00 fe 7f 00 0e 00 00 3c 00 00 e0 00 00 80 03 00     .......<........
     5b1:	00 1e 00 00 78 00 fe 7f 00 fe 7f 00 0d e0 07 00     ....x...........
     5c1:	f8 1f 00 1c 38 00 0c 30 00 06 60 00 06 60 00 06     ....8..0..`..`..
     5d1:	60 00 06 60 00 06 60 00 0c 30 00 1c 38 00 f8 1f     `..`..`..0..8...
     5e1:	00 e0 07 00 08 fe 7f 00 fe 7f 00 06 03 00 06 03     ................
     5f1:	00 06 03 00 8e 03 00 fc 01 00 f8 00 00 0d e0 07     ................
     601:	00 f8 1f 00 1c 38 00 0c 30 00 06 60 00 06 60 00     .....8..0..`..`.
     611:	06 60 00 06 e0 01 06 e0 03 0c 30 07 1c 38 06 f8     .`........0..8..
     621:	1f 06 e0 07 06 0b fe 7f 00 fe 7f 00 86 01 00 86     ................
     631:	01 00 86 01 00 86 07 00 ce 0e 00 fc 1c 00 78 70     ..............xp
     641:	00 00 60 00 00 40 00 0b 78 30 00 fc 70 00 ce 60     ..`..@..x0..p..`
     651:	00 86 61 00 86 61 00 86 61 00 86 61 00 86 61 00     ..a..a..a..a..a.
     661:	06 33 00 0c 3f 00 00 1e 00 0c 06 00 00 06 00 00     .3..?...........
     671:	06 00 00 06 00 00 06 00 00 fe 7f 00 fe 7f 00 06     ................
     681:	00 00 06 00 00 06 00 00 06 00 00 06 00 00 0a fe     ................
     691:	0f 00 fe 3f 00 00 70 00 00 60 00 00 60 00 00 60     ...?..p..`..`..`
     6a1:	00 00 60 00 00 70 00 fe 3f 00 fe 0f 00 0d 02 00     ..`..p..?.......
     6b1:	00 1e 00 00 fc 00 00 e0 03 00 80 1f 00 00 7c 00     ..............|.
     6c1:	00 60 00 00 7c 00 80 1f 00 e0 03 00 fc 00 00 1e     .`..|...........
     6d1:	00 00 02 00 00 11 06 00 00 7e 00 00 f8 07 00 80     .........~......
     6e1:	3f 00 00 78 00 00 7c 00 c0 0f 00 7e 00 00 06 00     ?..x..|....~....
     6f1:	00 7e 00 00 e0 07 00 00 7e 00 00 70 00 80 7f 00     .~......~..p....
     701:	f8 07 00 7e 00 00 06 00 00 0b 02 40 00 06 60 00     ...~.......@..`.
     711:	1e 78 00 38 1c 00 e0 07 00 80 01 00 e0 07 00 38     .x.8...........8
     721:	1e 00 1e 78 00 06 60 00 02 40 00 0c 02 00 00 06     ...x..`..@......
     731:	00 00 1e 00 00 78 00 00 e0 00 00 c0 7f 00 c0 7f     .....x..........
     741:	00 e0 00 00 78 00 00 1e 00 00 06 00 00 02 00 00     ....x...........
     751:	0b 06 70 00 06 78 00 06 7c 00 06 6e 00 06 67 00     ..p..x..|..n..g.
     761:	c6 63 00 e6 60 00 76 60 00 3e 60 00 1e 60 00 0e     .c..`.v`.>`..`..
     771:	60 00 08 03 00 00 1f 00 00 fe 00 00 f0 07 00 80     `...............
     781:	3f 00 00 fc 01 00 e0 03 00 00 03 08 00 3c 00 30     ?............<.0
     791:	7e 00 30 67 00 30 63 00 30 63 00 30 33 00 e0 7f     ~.0g.0c.0c.03...
     7a1:	00 e0 7f 00 09 ff 7f 00 ff 7f 00 60 20 00 30 60     ...........` .0`
     7b1:	00 30 60 00 30 60 00 70 70 00 e0 3f 00 c0 0f 00     .0`.0`.pp..?....
     7c1:	08 80 0f 00 e0 3f 00 60 30 00 30 60 00 30 60 00     .....?.`0.0`.0`.
     7d1:	30 60 00 30 60 00 60 30 00 09 80 1f 00 e0 3f 00     0`.0`.`0......?.
     7e1:	70 70 00 30 60 00 30 60 00 30 60 00 30 30 00 ff     pp.0`.0`.0`.00..
     7f1:	7f 00 ff 7f 00 09 80 0f 00 e0 3f 00 60 33 00 30     ..........?.`3.0
     801:	63 00 30 63 00 30 63 00 70 63 00 e0 63 00 c0 33     c.0c.0c.pc..c..3
     811:	00 06 30 00 00 fe 7f 00 ff 7f 00 33 00 00 33 00     ..0........3..3.
     821:	00 03 00 00 09 80 1f 00 e0 3f 06 70 70 06 30 60     .........?.pp.0`
     831:	06 30 60 06 30 60 06 30 30 07 f0 ff 03 f0 ff 01     .0`.0`.00.......
     841:	08 ff 7f 00 ff 7f 00 60 00 00 30 00 00 30 00 00     .......`..0..0..
     851:	30 00 00 f0 7f 00 e0 7f 00 02 f6 7f 00 f6 7f 00     0...............
     861:	05 00 00 06 30 00 06 30 00 06 f6 ff 07 f6 ff 03     ....0..0........
     871:	09 ff 7f 00 ff 7f 00 00 06 00 00 07 00 80 0f 00     ................
     881:	c0 38 00 70 70 00 30 60 00 10 40 00 02 ff 7f 00     .8.pp.0`..@.....
     891:	ff 7f 00 0e f0 7f 00 f0 7f 00 60 00 00 30 00 00     ..........`..0..
     8a1:	30 00 00 30 00 00 f0 7f 00 e0 7f 00 60 00 00 30     0..0........`..0
     8b1:	00 00 30 00 00 30 00 00 f0 7f 00 e0 7f 00 08 f0     ..0..0..........
     8c1:	7f 00 f0 7f 00 60 00 00 30 00 00 30 00 00 30 00     .....`..0..0..0.
     8d1:	00 f0 7f 00 e0 7f 00 0a 80 0f 00 e0 3f 00 60 30     ............?.`0
     8e1:	00 30 60 00 30 60 00 30 60 00 30 60 00 60 30 00     .0`.0`.0`.0`.`0.
     8f1:	e0 3f 00 80 0f 00 09 f0 ff 07 f0 ff 07 60 60 00     .?...........``.
     901:	30 60 00 30 60 00 30 60 00 70 70 00 e0 3f 00 c0     0`.0`.0`.pp..?..
     911:	0f 00 09 80 1f 00 e0 3f 00 70 70 00 30 60 00 30     .......?.pp.0`.0
     921:	60 00 30 60 00 30 30 00 f0 ff 07 f0 ff 07 06 f0     `.0`.00.........
     931:	7f 00 f0 7f 00 60 00 00 30 00 00 30 00 00 30 00     .....`..0..0..0.
     941:	00 08 c0 31 00 e0 63 00 30 63 00 30 63 00 30 66     ...1..c.0c.0c.0f
     951:	00 30 66 00 30 3e 00 60 1c 00 06 30 00 00 fe 3f     .0f.0>.`...0...?
     961:	00 fe 7f 00 30 60 00 30 60 00 30 60 00 08 f0 1f     ....0`.0`.0`....
     971:	00 f0 7f 00 00 60 00 00 60 00 00 60 00 00 30 00     .....`..`..`..0.
     981:	f0 7f 00 f0 7f 00 09 10 00 00 f0 00 00 e0 07 00     ................
     991:	00 3e 00 00 60 00 00 3e 00 e0 07 00 f0 00 00 10     .>..`..>........
     9a1:	00 00 0e 30 00 00 f0 03 00 c0 3f 00 00 78 00 00     ...0......?..x..
     9b1:	7c 00 80 07 00 f0 00 00 f0 00 00 c0 07 00 00 3c     |..............<
     9c1:	00 00 70 00 c0 3f 00 f0 03 00 30 00 00 09 10 40     ..p..?....0....@
     9d1:	00 30 60 00 f0 78 00 c0 1d 00 00 07 00 c0 1d 00     .0`..x..........
     9e1:	f0 78 00 30 60 00 10 40 00 09 10 00 00 f0 00 00     .x.0`..@........
     9f1:	e0 07 06 00 bf 07 00 f0 01 00 3f 00 e0 07 00 f0     ..........?.....
     a01:	00 00 10 00 00 08 30 70 00 30 78 00 30 7c 00 30     ......0p.0x.0|.0
     a11:	66 00 30 63 00 f0 61 00 f0 60 00 70 60 00           f.0c..a..`.p`.

00000a1f <Verdana8>:
     a1f:	01 02 20 5b 0b 00 bb 00 be 00 c1 00 c1 00 c1 00     .. [............
     a2f:	c1 00 d6 00 d6 00 d6 00 dd 00 e4 00 e4 00 e4 00     ................
     a3f:	e9 00 f0 00 f3 00 f3 00 fe 01 09 01 14 01 1f 01     ................
     a4f:	2c 01 37 01 42 01 4d 01 58 01 63 01 66 01 66 01     ,.7.B.M.X.c.f.f.
     a5f:	66 01 66 01 66 01 6f 01 6f 01 7c 01 89 01 98 01     f.f.f.o.o.|.....
     a6f:	a7 01 b2 01 bd 01 cc 01 d9 01 e0 01 e9 01 f6 02     ................
     a7f:	01 02 10 02 1d 02 2c 02 37 02 46 02 53 02 60 02     ......,.7.F.S.`.
     a8f:	6f 02 7c 02 89 02 9c 02 a9 02 b8 02 c5 02 c5 02     o.|.............
     a9f:	c5 02 c5 02 c5 02 c5 02 c5 02 d0 02 db 02 e6 02     ................
     aaf:	f1 02 fc 03 05 03 10 03 1b 03 1e 03 25 03 30 03     ............%.0.
     abf:	33 03 46 03 51 03 5c 03 67 03 72 03 7b 03 84 03     3.F.Q.\.g.r.{...
     acf:	8d 03 98 03 a3 03 b2 03 bd 03 c8 01 00 00 01 7e     ...............~
     adf:	01 0a 0c 00 12 00 12 00 8c 01 60 00 18 00 c6 00     ..........`.....
     aef:	20 01 20 01 c0 00 03 f8 00 06 03 01 04 03 01 04      . .............
     aff:	06 03 f8 00 02 00 04 80 03 03 20 00 20 00 20 00     .......... . . .
     b0f:	01 80 01 05 fc 00 02 01 02 01 02 01 fc 00 05 04     ................
     b1f:	01 04 01 fe 01 00 01 00 01 05 84 01 42 01 22 01     ............B.".
     b2f:	12 01 0c 01 05 84 00 02 01 12 01 12 01 ec 00 06     ................
     b3f:	60 00 50 00 48 00 44 00 fe 01 40 00 05 9e 00 12     `.P.H.D...@.....
     b4f:	01 12 01 12 01 e2 00 05 f8 00 14 01 12 01 12 01     ................
     b5f:	e0 00 05 02 00 82 01 62 00 1a 00 06 00 05 ec 00     .......b........
     b6f:	12 01 12 01 12 01 ec 00 05 1c 00 22 01 22 01 a2     ..........."."..
     b7f:	00 7c 00 01 98 01 04 02 00 62 01 12 00 0c 00 06     .|.......b......
     b8f:	c0 01 78 00 46 00 46 00 78 00 c0 01 06 fe 01 12     ..x.F.F.x.......
     b9f:	01 12 01 12 01 1c 01 e0 00 07 78 00 84 00 02 01     ..........x.....
     baf:	02 01 02 01 02 01 84 00 07 fe 01 02 01 02 01 02     ................
     bbf:	01 02 01 84 00 78 00 05 fe 01 12 01 12 01 12 01     .....x..........
     bcf:	12 01 05 fe 01 12 00 12 00 12 00 02 00 07 78 00     ..............x.
     bdf:	84 00 02 01 02 01 22 01 22 01 e4 00 06 fe 01 10     ......".".......
     bef:	00 10 00 10 00 10 00 fe 01 03 02 01 fe 01 02 01     ................
     bff:	04 00 01 02 01 02 01 fe 00 06 fe 01 20 00 30 00     ............ .0.
     c0f:	48 00 84 00 02 01 05 fe 01 00 01 00 01 00 01 00     H...............
     c1f:	01 07 fe 01 06 00 18 00 60 00 18 00 06 00 fe 01     ........`.......
     c2f:	06 fe 01 06 00 18 00 60 00 80 01 fe 01 07 78 00     .......`......x.
     c3f:	84 00 02 01 02 01 02 01 84 00 78 00 05 fe 01 22     ..........x...."
     c4f:	00 22 00 22 00 1c 00 07 78 00 84 00 02 01 02 01     ."."....x.......
     c5f:	02 03 84 04 78 04 06 fe 01 22 00 22 00 62 00 9c     ....x....".".b..
     c6f:	00 00 01 06 8c 00 12 01 12 01 22 01 22 01 c4 00     .........."."...
     c7f:	07 02 00 02 00 02 00 fe 01 02 00 02 00 02 00 06     ................
     c8f:	fe 00 00 01 00 01 00 01 00 01 fe 00 06 0e 00 70     ...............p
     c9f:	00 80 01 80 01 70 00 0e 00 09 06 00 78 00 80 01     .....p......x...
     caf:	78 00 06 00 78 00 80 01 78 00 06 00 06 86 01 48     x...x...x......H
     cbf:	00 30 00 30 00 48 00 86 01 07 02 00 04 00 08 00     .0.0.H..........
     ccf:	f0 01 08 00 04 00 02 00 06 82 01 42 01 22 01 12     ...........B."..
     cdf:	01 0a 01 06 01 05 c0 00 28 01 28 01 28 01 f0 01     ........(.(.(...
     cef:	05 ff 01 08 01 08 01 08 01 f0 00 05 f0 00 08 01     ................
     cff:	08 01 08 01 90 00 05 f0 00 08 01 08 01 08 01 ff     ................
     d0f:	01 05 f0 00 28 01 28 01 28 01 b0 00 04 08 00 fe     ....(.(.(.......
     d1f:	01 09 00 09 00 05 f0 00 08 05 08 05 08 05 f8 03     ................
     d2f:	05 ff 01 08 00 08 00 08 00 f0 01 01 f9 01 03 00     ................
     d3f:	04 08 04 f9 03 05 ff 01 40 00 60 00 90 00 08 01     ........@.`.....
     d4f:	01 ff 01 09 f8 01 08 00 08 00 08 00 f0 01 08 00     ................
     d5f:	08 00 08 00 f0 01 05 f8 01 08 00 08 00 08 00 f0     ................
     d6f:	01 05 f0 00 08 01 08 01 08 01 f0 00 05 f8 07 08     ................
     d7f:	01 08 01 08 01 f0 00 05 f0 00 08 01 08 01 08 01     ................
     d8f:	f8 07 04 f8 01 10 00 08 00 08 00 04 30 01 28 01     ............0.(.
     d9f:	48 01 c8 00 04 08 00 fe 00 08 01 08 01 05 f8 00     H...............
     daf:	00 01 00 01 00 01 f8 01 05 18 00 60 00 80 01 60     ...........`...`
     dbf:	00 18 00 07 78 00 80 01 60 00 18 00 60 00 80 01     ....x...`...`...
     dcf:	78 00 05 08 01 90 00 60 00 90 00 08 01 05 08 00     x......`........
     ddf:	70 04 80 03 70 00 08 00 04 88 01 48 01 28 01 18     p...p......H.(..
     def:	01                                                  .

00000df0 <lcd_commmands>:
     df0:	af 40 a0 a6 a4 a2 ee c8 2f 24 ac 00 f8 00           .@....../$....

00000dfe <pagemap>:
     dfe:	07 06 05 04 03 02 01 00                             ........

00000e06 <text_menu>:
     e06:	56 15 5d 10 58 10 53 10 4e 10 49 10 44 10 3f 10     V.].X.S.N.I.D.?.
     e16:	3a 10 af 17 a7 17 ad 17 ab 17 a9 17 a2 17 9d 17     :...............
     e26:	98 17 93 17 d8 11 f8 11 f3 11 ed 11 1b 15 b9 17     ................
     e36:	b1 17 25 16 42 16 3d 16 37 16 33 16 2f 16 62 10     ..%.B.=.7.3./.b.
     e46:	3e 12 35 12 46 12 2e 12 29 12 83 10 7e 10 79 10     >.5.F...)...~.y.
     e56:	74 10 6f 10 69 10 63 10 15 12 62 10 72 12 6a 12     t.o.i.c...b.r.j.
     e66:	81 14 7c 14 79 14 6f 14 65 14 c5 10 bd 10 b8 10     ..|.y.o.e.......
     e76:	5d 12 58 12 4f 12 ae 11 2a 16 a2 11 0a 15 06 15     ].X.O...*.......
     e86:	00 15 f7 14 62 10 62 10 56 15 53 15 dd 10 e4 10     ....b.b.V.S.....
     e96:	d3 10 62 10 62 10 05 12 fe 11 88 17 76 17 63 17     ..b.b.......v.c.
     ea6:	51 17 3b 17 2c 17 18 17 04 17 f6 16 e7 16 d8 16     Q.;.,...........
     eb6:	c9 16 ba 16 ab 16 9c 16 8d 16 79 16 60 16 47 16     ..........y.`.G.
     ec6:	62 10 62 10 83 10 7e 10 94 10 99 10 9e 10 a3 10     b.b...~.........
     ed6:	15 12 46 12 3e 12 35 12 2e 12 29 12 24 12 1f 12     ..F.>.5...).$...
     ee6:	1a 12 15 12 0e 12 08 12 ee 14 e7 14 e1 11 cb 10     ................
     ef6:	b8 10 6a 11 5e 11 62 10 1b 11 12 11 09 11 05 11     ..j.^.b.........
     f06:	fc 10 f4 10 62 10 62 10 62 10 be 17 e5 11 83 11     ....b.b.b.......
     f16:	75 11 70 11 56 11 4b 11 62 10 ed 10 e4 10 62 10     u.p.V.K.b.....b.
     f26:	62 10 62 10 3d 16 37 16 33 16 4a 15 b1 14 40 15     b.b.=.7.3.J...@.
     f36:	35 15 26 15 1b 15 0f 15 62 10 62 10 da 14 d0 14     5.&.....b.b.....
     f46:	c8 14 bb 14 84 14 87 10 a7 14 9d 14 91 14 87 10     ................
     f56:	62 10 62 10 11 16 09 16 fb 15 ee 15 e0 15 d5 15     b.b.............
     f66:	cc 15 c3 15 b4 15 a6 15 97 15 8b 15 84 15 7d 15     ..............}.
     f76:	70 15 64 15 5a 15 19 16 62 10 62 10 5d 14 52 14     p.d.Z...b.b.].R.
     f86:	41 14 34 14 29 14 19 14 09 14 fa 13 ea 13 da 13     A.4.)...........
     f96:	ca 13 ba 13 aa 13 9a 13 8c 13 7e 13 6f 13 60 13     ..........~.o.`.
     fa6:	53 13 46 13 3a 13 2e 13 22 13 15 13 0b 13 01 13     S.F.:...".......
     fb6:	f4 12 e9 12 dc 12 d1 12 c4 12 e9 12 b7 12 d1 12     ................
     fc6:	62 10 62 10 72 12 6a 12 64 12 62 10 46 11 41 11     b.b.r.j.d.b.F.A.
     fd6:	3c 11 37 11 32 11 2d 11 28 11 23 11 46 12 3e 12     <.7.2.-.(.#.F.>.
     fe6:	35 12 2e 12 29 12 24 12 1f 12 1a 12 ae 12 a4 12     5...).$.........
     ff6:	9c 12 94 12 8b 12 83 12 7a 12 15 12 72 12 6a 12     ........z...r.j.
    1006:	64 12 62 10 62 10 99 11 90 11 ce 11 c8 11 bc 11     d.b.b...........
    1016:	da 17 d4 17 4a 15 cb 17 c9 17 c7 17 b3 10 af 10     ....J...........
    1026:	a8 10 33 10 2c 10                                   ..3.,.

0000102c <PRESET_2>:
    102c:	51 75 61 64 20 58 00                                Quad X.

00001033 <PRESET_1>:
    1033:	51 75 61 64 20 50 00                                Quad P.

0000103a <VBAT39>:
    103a:	33 2e 39 56 00                                      3.9V.

0000103f <VBAT38>:
    103f:	33 2e 38 56 00                                      3.8V.

00001044 <VBAT37>:
    1044:	33 2e 37 56 00                                      3.7V.

00001049 <VBAT36>:
    1049:	33 2e 36 56 00                                      3.6V.

0000104e <VBAT35>:
    104e:	33 2e 35 56 00                                      3.5V.

00001053 <VBAT34>:
    1053:	33 2e 34 56 00                                      3.4V.

00001058 <VBAT33>:
    1058:	33 2e 33 56 00                                      3.3V.

0000105d <VBAT32>:
    105d:	33 2e 32 56 00                                      3.2V.

00001062 <Dummy0>:
	...

00001063 <MPU6050LPF7>:
    1063:	32 36 30 48 7a 00                                   260Hz.

00001069 <MPU6050LPF6>:
    1069:	31 38 34 48 7a 00                                   184Hz.

0000106f <MPU6050LPF5>:
    106f:	39 34 48 7a 00                                      94Hz.

00001074 <MPU6050LPF4>:
    1074:	34 34 48 7a 00                                      44Hz.

00001079 <MPU6050LPF3>:
    1079:	32 31 48 7a 00                                      21Hz.

0000107e <MPU6050LPF2>:
    107e:	31 30 48 7a 00                                      10Hz.

00001083 <MPU6050LPF1>:
    1083:	35 48 7a 00                                         5Hz.

00001087 <GeneralText10>:
    1087:	4d 50 55 36 30 35 30 20 4c 50 46 3a 00              MPU6050 LPF:.

00001094 <SWLPF4>:
    1094:	31 37 48 7a 00                                      17Hz.

00001099 <SWLPF3>:
    1099:	32 37 48 7a 00                                      27Hz.

0000109e <SWLPF2>:
    109e:	33 38 48 7a 00                                      38Hz.

000010a3 <SWLPF1>:
    10a3:	36 37 48 7a 00                                      67Hz.

000010a8 <Random12>:
    10a8:	73 69 67 6e 61 6c 00                                signal.

000010af <Random11>:
    10af:	6c 6f 77 00                                         low.

000010b3 <Random10>:
    10b3:	68 69 67 68 00                                      high.

000010b8 <Random1>:
    10b8:	48 69 67 68 00                                      High.

000010bd <Safety2>:
    10bd:	41 72 6d 61 62 6c 65 00                             Armable.

000010c5 <Safety1>:
    10c5:	41 72 6d 65 64 00                                   Armed.

000010cb <GeneralText5>:
    10cb:	53 79 6e 63 20 52 43 00                             Sync RC.

000010d3 <MixerItem16>:
    10d3:	52 65 76 53 63 61 6c 65 64 00                       RevScaled.

000010dd <MixerItem15>:
    10dd:	53 63 61 6c 65 64 00                                Scaled.

000010e4 <MixerItem12>:
    10e4:	52 65 76 65 72 73 65 64 00                          Reversed.

000010ed <MixerItem11>:
    10ed:	4e 6f 72 6d 61 6c 00                                Normal.

000010f4 <MixerMenuItem7>:
    10f4:	50 69 74 63 68 55 70 00                             PitchUp.

000010fc <MixerMenuItem6>:
    10fc:	53 69 64 65 77 61 79 73 00                          Sideways.

00001105 <MixerMenuItem5>:
    1105:	41 66 74 00                                         Aft.

00001109 <MixerMenuItem4>:
    1109:	49 6e 76 65 72 74 65 64 00                          Inverted.

00001112 <MixerMenuItem3>:
    1112:	56 65 72 74 69 63 61 6c 00                          Vertical.

0000111b <MixerMenuItem2>:
    111b:	46 6f 72 77 61 72 64 00                             Forward.

00001123 <MOUT8>:
    1123:	4f 55 54 38 00                                      OUT8.

00001128 <MOUT7>:
    1128:	4f 55 54 37 00                                      OUT7.

0000112d <MOUT6>:
    112d:	4f 55 54 36 00                                      OUT6.

00001132 <MOUT5>:
    1132:	4f 55 54 35 00                                      OUT5.

00001137 <MOUT4>:
    1137:	4f 55 54 34 00                                      OUT4.

0000113c <MOUT3>:
    113c:	4f 55 54 33 00                                      OUT3.

00001141 <MOUT2>:
    1141:	4f 55 54 32 00                                      OUT2.

00001146 <MOUT1>:
    1146:	4f 55 54 31 00                                      OUT1.

0000114b <Status5>:
    114b:	28 44 69 73 61 72 6d 65 64 29 00                    (Disarmed).

00001156 <Status4>:
    1156:	28 41 72 6d 65 64 29 00                             (Armed).

0000115e <Status2>:
    115e:	66 6f 72 20 73 74 61 74 75 73 2e 00                 for status..

0000116a <Status0>:
    116a:	50 72 65 73 73 00                                   Press.

00001170 <WizardText2>:
    1170:	44 6f 6e 65 00                                      Done.

00001175 <WizardText1>:
    1175:	48 6f 6c 64 20 61 73 20 73 68 6f 77 6e 00           Hold as shown.

00001183 <WizardText0>:
    1183:	4e 6f 20 52 58 20 73 69 67 6e 61 6c 00              No RX signal.

00001190 <PText6>:
    1190:	73 65 74 74 69 6e 67 73 00                          settings.

00001199 <PText5>:
    1199:	55 70 64 61 74 69 6e 67 00                          Updating.

000011a2 <PText4>:
    11a2:	43 61 6c 2e 20 66 61 69 6c 65 64 00                 Cal. failed.

000011ae <PText3>:
    11ae:	45 53 43 20 43 61 6c 69 62 72 61 74 65 00           ESC Calibrate.

000011bc <PText2>:
    11bc:	48 6f 6c 64 20 73 74 65 61 64 79 00                 Hold steady.

000011c8 <PText1>:
    11c8:	52 65 73 65 74 00                                   Reset.

000011ce <PText0>:
    11ce:	4f 70 65 6e 41 65 72 6f 32 00                       OpenAero2.

000011d8 <Disarmed>:
    11d8:	44 69 73 61 72 6d 65 64 00                          Disarmed.

000011e1 <ErrorText10>:
    11e1:	4c 6f 77 00                                         Low.

000011e5 <Status3>:
    11e5:	42 61 74 74 65 72 79 00                             Battery.

000011ed <ErrorText7>:
    11ed:	4d 6f 64 65 6c 00                                   Model.

000011f3 <ErrorText6>:
    11f3:	4c 6f 73 74 00                                      Lost.

000011f8 <ErrorText5>:
    11f8:	45 72 72 6f 72 00                                   Error.

000011fe <ErrorText4>:
    11fe:	53 69 67 6e 61 6c 00                                Signal.

00001205 <ErrorText3>:
    1205:	4e 6f 00                                            No.

00001208 <ChannelRef12>:
    1208:	45 6c 65 76 2e 00                                   Elev..

0000120e <ChannelRef10>:
    120e:	54 68 72 6f 74 2e 00                                Throt..

00001215 <ChannelRef8>:
    1215:	4e 6f 6e 65 00                                      None.

0000121a <ChannelRef7>:
    121a:	41 55 58 33 00                                      AUX3.

0000121f <ChannelRef6>:
    121f:	41 55 58 32 00                                      AUX2.

00001224 <ChannelRef5>:
    1224:	41 55 58 31 00                                      AUX1.

00001229 <ChannelRef4>:
    1229:	47 65 61 72 00                                      Gear.

0000122e <ChannelRef3>:
    122e:	52 75 64 64 65 72 00                                Rudder.

00001235 <ChannelRef2>:
    1235:	45 6c 65 76 61 74 6f 72 00                          Elevator.

0000123e <ChannelRef1>:
    123e:	41 69 6c 65 72 6f 6e 00                             Aileron.

00001246 <ChannelRef0>:
    1246:	54 68 72 6f 74 74 6c 65 00                          Throttle.

0000124f <MixerItem62>:
    124f:	53 71 72 74 53 69 6e 65 00                          SqrtSine.

00001258 <MixerItem61>:
    1258:	53 69 6e 65 00                                      Sine.

0000125d <MixerItem60>:
    125d:	4c 69 6e 65 61 72 00                                Linear.

00001264 <MixerItem49>:
    1264:	4d 6f 74 6f 72 00                                   Motor.

0000126a <MixerItem41>:
    126a:	44 2e 53 65 72 76 6f 00                             D.Servo.

00001272 <MixerItem40>:
    1272:	41 2e 53 65 72 76 6f 00                             A.Servo.

0000127a <MixerItem81>:
    127a:	41 4c 20 50 69 74 63 68 00                          AL Pitch.

00001283 <MixerItem80>:
    1283:	41 4c 20 52 6f 6c 6c 00                             AL Roll.

0000128b <MixerItem74>:
    128b:	41 63 63 50 69 74 63 68 00                          AccPitch.

00001294 <MixerItem73>:
    1294:	41 63 63 52 6f 6c 6c 00                             AccRoll.

0000129c <MixerItem72>:
    129c:	47 79 72 6f 59 61 77 00                             GyroYaw.

000012a4 <MixerItem71>:
    12a4:	47 79 72 6f 50 69 74 63 68 00                       GyroPitch.

000012ae <MixerItem70>:
    12ae:	47 79 72 6f 52 6f 6c 6c 00                          GyroRoll.

000012b7 <MixerItem31>:
    12b7:	50 32 20 53 6f 75 72 63 65 20 42 3a 00              P2 Source B:.

000012c4 <MixerItem21>:
    12c4:	50 31 20 53 6f 75 72 63 65 20 42 3a 00              P1 Source B:.

000012d1 <MixerItem30>:
    12d1:	50 32 20 56 6f 6c 75 6d 65 3a 00                    P2 Volume:.

000012dc <MixerItem29>:
    12dc:	50 32 20 53 6f 75 72 63 65 20 41 3a 00              P2 Source A:.

000012e9 <MixerItem2>:
    12e9:	50 31 20 56 6f 6c 75 6d 65 3a 00                    P1 Volume:.

000012f4 <MixerItem0>:
    12f4:	50 31 20 53 6f 75 72 63 65 20 41 3a 00              P1 Source A:.

00001301 <MixerItem43>:
    1301:	50 32 20 5a 20 61 63 63 3a 00                       P2 Z acc:.

0000130b <MixerItem42>:
    130b:	50 31 20 5a 20 61 63 63 3a 00                       P1 Z acc:.

00001315 <MixerItem28>:
    1315:	50 32 20 50 69 74 63 68 20 41 4c 3a 00              P2 Pitch AL:.

00001322 <MixerItem3>:
    1322:	50 31 20 50 69 74 63 68 20 41 4c 00                 P1 Pitch AL.

0000132e <MixerItem27>:
    132e:	50 32 20 52 6f 6c 6c 20 41 4c 3a 00                 P2 Roll AL:.

0000133a <MixerItem7>:
    133a:	50 31 20 52 6f 6c 6c 20 41 4c 3a 00                 P1 Roll AL:.

00001346 <MixerItem26>:
    1346:	50 32 20 59 61 77 20 67 79 72 6f 3a 00              P2 Yaw gyro:.

00001353 <MixerItem6>:
    1353:	50 31 20 59 61 77 20 67 79 72 6f 3a 00              P1 Yaw gyro:.

00001360 <MixerItem25>:
    1360:	50 32 20 50 69 74 63 68 20 67 79 72 6f 3a 00        P2 Pitch gyro:.

0000136f <MixerItem5>:
    136f:	50 31 20 50 69 74 63 68 20 67 79 72 6f 3a 00        P1 Pitch gyro:.

0000137e <MixerItem24>:
    137e:	50 32 20 52 6f 6c 6c 20 67 79 72 6f 3a 00           P2 Roll gyro:.

0000138c <MixerItem4>:
    138c:	50 31 20 52 6f 6c 6c 20 67 79 72 6f 3a 00           P1 Roll gyro:.

0000139a <MixerItem56>:
    139a:	50 32 20 52 75 64 2e 20 76 6f 6c 75 6d 65 3a 00     P2 Rud. volume:.

000013aa <MixerItem53>:
    13aa:	50 31 20 52 75 64 2e 20 76 6f 6c 75 6d 65 3a 00     P1 Rud. volume:.

000013ba <MixerItem55>:
    13ba:	50 32 20 45 6c 65 2e 20 76 6f 6c 75 6d 65 3a 00     P2 Ele. volume:.

000013ca <MixerItem52>:
    13ca:	50 31 20 45 6c 65 2e 20 76 6f 6c 75 6d 65 3a 00     P1 Ele. volume:.

000013da <MixerItem54>:
    13da:	50 32 20 41 69 6c 2e 20 76 6f 6c 75 6d 65 3a 00     P2 Ail. volume:.

000013ea <MixerItem51>:
    13ea:	50 31 20 41 69 6c 2e 20 76 6f 6c 75 6d 65 3a 00     P1 Ail. volume:.

000013fa <Mixeritem50>:
    13fa:	54 68 72 6f 74 74 6c 65 20 63 75 72 76 65 00        Throttle curve.

00001409 <MixerItem33>:
    1409:	50 32 20 54 68 72 2e 20 76 6f 6c 75 6d 65 3a 00     P2 Thr. volume:.

00001419 <MixerItem23>:
    1419:	50 31 20 54 68 72 2e 20 76 6f 6c 75 6d 65 3a 00     P1 Thr. volume:.

00001429 <MixerItem34>:
    1429:	50 32 20 4f 66 66 73 65 74 3a 00                    P2 Offset:.

00001434 <MixerItem35>:
    1434:	50 31 2e 6e 20 4f 66 66 73 65 74 3a 00              P1.n Offset:.

00001441 <MixerItem36>:
    1441:	50 31 2e 6e 20 25 20 6f 66 20 74 72 61 6e 73 3a     P1.n % of trans:
	...

00001452 <MixerItem20>:
    1452:	50 31 20 4f 66 66 73 65 74 3a 00                    P1 Offset:.

0000145d <MixerItem1>:
    145d:	44 65 76 69 63 65 3a 00                             Device:.

00001465 <P5text>:
    1465:	50 31 2e 6e 20 2d 20 50 32 00                       P1.n - P2.

0000146f <P4text>:
    146f:	50 31 20 2d 20 50 31 2e 6e 00                       P1 - P1.n.

00001479 <P3text>:
    1479:	50 32 00                                            P2.

0000147c <P2text>:
    147c:	50 31 2e 6e 00                                      P1.n.

00001481 <P1text>:
    1481:	50 31 00                                            P1.

00001484 <BattMenuItem2>:
    1484:	4c 6f 77 20 56 20 41 6c 61 72 6d 3a 00              Low V Alarm:.

00001491 <GeneralText7>:
    1491:	41 4c 20 63 6f 72 72 65 63 74 3a 00                 AL correct:.

0000149d <GeneralText16>:
    149d:	47 79 72 6f 20 4c 50 46 3a 00                       Gyro LPF:.

000014a7 <GeneralText6>:
    14a7:	41 63 63 2e 20 4c 50 46 3a 00                       Acc. LPF:.

000014b1 <GeneralText3>:
    14b1:	50 57 4d 20 72 61 74 65 3a 00                       PWM rate:.

000014bb <GeneralText2>:
    14bb:	44 69 73 61 72 6d 20 74 69 6d 65 3a 00              Disarm time:.

000014c8 <AutoMenuItem2>:
    14c8:	53 61 66 65 74 79 3a 00                             Safety:.

000014d0 <Contrast>:
    14d0:	43 6f 6e 74 72 61 73 74 3a 00                       Contrast:.

000014da <MixerMenuItem0>:
    14da:	4f 72 69 65 6e 74 61 74 69 6f 6e 3a 00              Orientation:.

000014e7 <RCMenuItem7>:
    14e7:	46 75 74 61 62 61 00                                Futaba.

000014ee <RCMenuItem6>:
    14ee:	4a 52 2c 53 70 6b 74 6d 00                          JR,Spktm.

000014f7 <RXMode3>:
    14f7:	53 70 65 6b 74 72 75 6d 00                          Spektrum.

00001500 <RXMode2>:
    1500:	53 2d 42 75 73 00                                   S-Bus.

00001506 <RXMode1>:
    1506:	50 57 4d 00                                         PWM.

0000150a <RXMode0>:
    150a:	43 50 50 4d 00                                      CPPM.

0000150f <Transition_P1n>:
    150f:	54 72 61 6e 73 2e 20 50 31 6e 3a 00                 Trans. P1n:.

0000151b <Transition>:
    151b:	54 72 61 6e 73 69 74 69 6f 6e 00                    Transition.

00001526 <RCMenuItem2>:
    1526:	50 72 6f 66 69 6c 65 20 43 68 61 6e 2e 3a 00        Profile Chan.:.

00001535 <RCMenuItem0>:
    1535:	43 68 2e 20 6f 72 64 65 72 3a 00                    Ch. order:.

00001540 <RCMenuItem20>:
    1540:	50 57 4d 20 73 79 6e 63 3a 00                       PWM sync:.

0000154a <RCMenuItem1>:
    154a:	52 58 20 74 79 70 65 3a 00                          RX type:.

00001553 <AutoMenuItem15>:
    1553:	4f 4e 00                                            ON.

00001556 <AutoMenuItem11>:
    1556:	4f 46 46 00                                         OFF.

0000155a <StabMenuItem30>:
    155a:	59 61 77 20 74 72 69 6d 3a 00                       Yaw trim:.

00001564 <StabMenuItem9>:
    1564:	59 61 77 20 49 20 72 61 74 65 3a 00                 Yaw I rate:.

00001570 <StabMenuItem12>:
    1570:	59 61 77 20 49 20 4c 69 6d 69 74 3a 00              Yaw I Limit:.

0000157d <StabMenuItem8>:
    157d:	59 61 77 20 49 3a 00                                Yaw I:.

00001584 <StabMenuItem7>:
    1584:	59 61 77 20 50 3a 00                                Yaw P:.

0000158b <AutoMenuItem8>:
    158b:	50 69 74 63 68 20 74 72 69 6d 3a 00                 Pitch trim:.

00001597 <AutoMenuItem21>:
    1597:	50 69 74 63 68 20 41 75 74 6f 4c 76 6c 3a 00        Pitch AutoLvl:.

000015a6 <StabMenuItem6>:
    15a6:	50 69 74 63 68 20 49 20 72 61 74 65 3a 00           Pitch I rate:.

000015b4 <StabMenuItem11>:
    15b4:	50 69 74 63 68 20 49 20 4c 69 6d 69 74 3a 00        Pitch I Limit:.

000015c3 <StabMenuItem5>:
    15c3:	50 69 74 63 68 20 49 3a 00                          Pitch I:.

000015cc <AutoMenuItem4>:
    15cc:	50 69 74 63 68 20 50 3a 00                          Pitch P:.

000015d5 <AutoMenuItem7>:
    15d5:	52 6f 6c 6c 20 74 72 69 6d 3a 00                    Roll trim:.

000015e0 <AutoMenuItem20>:
    15e0:	52 6f 6c 6c 20 41 75 74 6f 4c 76 6c 3a 00           Roll AutoLvl:.

000015ee <StabMenuItem3>:
    15ee:	52 6f 6c 6c 20 49 20 72 61 74 65 3a 00              Roll I rate:.

000015fb <StabMenuItem10>:
    15fb:	52 6f 6c 6c 20 49 20 4c 69 6d 69 74 3a 00           Roll I Limit:.

00001609 <StabMenuItem2>:
    1609:	52 6f 6c 6c 20 49 3a 00                             Roll I:.

00001611 <AutoMenuItem1>:
    1611:	52 6f 6c 6c 20 50 3a 00                             Roll P:.

00001619 <StabMenuItem13>:
    1619:	41 63 63 20 56 65 72 74 20 50 3a 00                 Acc Vert P:.

00001625 <SensorMenuItem2>:
    1625:	49 6e 76 2e 00                                      Inv..

0000162a <SensorMenuItem1>:
    162a:	43 61 6c 2e 00                                      Cal..

0000162f <PText19>:
    162f:	41 63 63 00                                         Acc.

00001633 <PText18>:
    1633:	59 61 77 00                                         Yaw.

00001637 <PText17>:
    1637:	50 69 74 63 68 00                                   Pitch.

0000163d <PText16>:
    163d:	52 6f 6c 6c 00                                      Roll.

00001642 <PText15>:
    1642:	47 79 72 6f 00                                      Gyro.

00001647 <MainMenuItem23>:
    1647:	31 39 2e 20 50 6f 73 2e 20 53 65 72 76 6f 20 74     19. Pos. Servo t
    1657:	72 76 6c 2e 20 28 25 29 00                          rvl. (%).

00001660 <MainMenuItem22>:
    1660:	31 38 2e 20 4e 65 67 2e 20 53 65 72 76 6f 20 74     18. Neg. Servo t
    1670:	72 76 6c 2e 20 28 25 29 00                          rvl. (%).

00001679 <MainMenuItem20>:
    1679:	31 37 2e 20 53 65 72 76 6f 20 64 69 72 65 63 74     17. Servo direct
    1689:	69 6f 6e 00                                         ion.

0000168d <MainMenuItem18>:
    168d:	31 36 2e 20 4f 55 54 38 20 4d 69 78 65 72 00        16. OUT8 Mixer.

0000169c <MainMenuItem17>:
    169c:	31 35 2e 20 4f 55 54 37 20 4d 69 78 65 72 00        15. OUT7 Mixer.

000016ab <MainMenuItem16>:
    16ab:	31 34 2e 20 4f 55 54 36 20 4d 69 78 65 72 00        14. OUT6 Mixer.

000016ba <MainMenuItem15>:
    16ba:	31 33 2e 20 4f 55 54 35 20 4d 69 78 65 72 00        13. OUT5 Mixer.

000016c9 <MainMenuItem14>:
    16c9:	31 32 2e 20 4f 55 54 34 20 4d 69 78 65 72 00        12. OUT4 Mixer.

000016d8 <MainMenuItem13>:
    16d8:	31 31 2e 20 4f 55 54 33 20 4d 69 78 65 72 00        11. OUT3 Mixer.

000016e7 <MainMenuItem12>:
    16e7:	31 30 2e 20 4f 55 54 32 20 4d 69 78 65 72 00        10. OUT2 Mixer.

000016f6 <MainMenuItem11>:
    16f6:	39 2e 20 4f 55 54 31 20 4d 69 78 65 72 00           9. OUT1 Mixer.

00001704 <MainMenuItem3>:
    1704:	38 2e 20 46 6c 69 67 68 74 20 70 72 6f 66 69 6c     8. Flight profil
    1714:	65 20 32 00                                         e 2.

00001718 <MainMenuItem2>:
    1718:	37 2e 20 46 6c 69 67 68 74 20 70 72 6f 66 69 6c     7. Flight profil
    1728:	65 20 31 00                                         e 1.

0000172c <MainMenuItem10>:
    172c:	36 2e 20 4c 65 76 65 6c 20 6d 65 74 65 72 00        6. Level meter.

0000173b <MainMenuItem8>:
    173b:	35 2e 20 53 65 6e 73 6f 72 20 63 61 6c 69 62 72     5. Sensor calibr
    174b:	61 74 69 6f 6e 00                                   ation.

00001751 <MainMenuItem7>:
    1751:	34 2e 20 53 74 69 63 6b 20 70 6f 6c 61 72 69 74     4. Stick polarit
    1761:	79 00                                               y.

00001763 <MainMenuItem9>:
    1763:	33 2e 20 52 65 63 65 69 76 65 72 20 69 6e 70 75     3. Receiver inpu
    1773:	74 73 00                                            ts.

00001776 <MainMenuItem1>:
    1776:	32 2e 20 52 65 63 65 69 76 65 72 20 73 65 74 75     2. Receiver setu
    1786:	70 00                                               p.

00001788 <MainMenuItem0>:
    1788:	31 2e 20 47 65 6e 65 72 61 6c 00                    1. General.

00001793 <MenuFrame8>:
    1793:	53 61 76 65 00                                      Save.

00001798 <MenuFrame7>:
    1798:	44 65 66 2e 00                                      Def..

0000179d <MenuFrame6>:
    179d:	42 61 63 6b 00                                      Back.

000017a2 <MenuFrame5>:
    17a2:	4d 65 6e 75 00                                      Menu.

000017a7 <MenuFrame1>:
    17a7:	45 00                                               E.

000017a9 <MenuFrame4>:
    17a9:	44 00                                               D.

000017ab <MenuFrame3>:
    17ab:	43 00                                               C.

000017ad <MenuFrame2>:
    17ad:	42 00                                               B.

000017af <MenuFrame0>:
    17af:	41 00                                               A.

000017b1 <StatusText9>:
    17b1:	4a 69 74 74 65 72 3a 00                             Jitter:.

000017b9 <StatusText8>:
    17b9:	50 6f 73 3a 00                                      Pos:.

000017be <StatusText7>:
    17be:	42 61 74 74 65 72 79 3a 00                          Battery:.

000017c7 <StatusText5>:
    17c7:	30 00                                               0.

000017c9 <StatusText4>:
    17c9:	2e 00                                               ..

000017cb <StatusText3>:
    17cb:	50 72 6f 66 69 6c 65 3a 00                          Profile:.

000017d4 <StatusText1>:
    17d4:	4d 6f 64 65 3a 00                                   Mode:.

000017da <StatusText0>:
    17da:	56 65 72 73 69 6f 6e 3a 20 20 20 31 2e 31 20 42     Version:   1.1 B
    17ea:	31 31 00                                            11.

000017ed <Gyro_Pol>:
    17ed:	01 01 01 01 01 01 01 ff ff ff ff 01 01 ff 01 ff     ................
    17fd:	01 01                                               ..

000017ff <Gyro_RPY_Order>:
    17ff:	00 01 02 01 02 00 00 01 02 00 01 02 01 00 02 02     ................
    180f:	01 00                                               ..

00001811 <LPF_lookup_HS>:
    1811:	e1 7a 08 41 c3 f5 90 40 29 5c 1f 40 71 3d ca 3f     .z.A...@)\.@q=.?
    1821:	52 b8 9e 3f 00 00 80 3f 00 00 80 3f 00 00 80 3f     R..?...?...?...?

00001831 <LPF_lookup>:
    1831:	00 00 b8 41 ae 47 39 41 33 33 bb 40 66 66 46 40     ...A.G9A33.@ffF@
    1841:	c3 f5 e8 3f cd cc ac 3f 52 b8 9e 3f 00 00 80 3f     ...?...?R..?...?

00001851 <lines>:
    1851:	03 0f 1b 27                                         ...'

00001855 <flight_menu_ranges>:
    1855:	00 7f 01 00 3c 00 7f 01 00 28 00 7d 01 00 0a 00     ....<....(.}....
    1865:	04 01 00 02 00 7f 01 00 05 81 7f 01 00 00 00 7f     ................
    1875:	01 00 3c 00 7f 01 00 28 00 7d 01 00 0a 00 04 01     ..<....(.}......
    1885:	00 02 00 7f 01 00 05 81 7f 01 00 00 00 7f 01 00     ................
    1895:	50 00 7f 01 00 00 00 7d 01 00 00 00 04 01 00 01     P......}........
    18a5:	81 7f 01 00 00 00 7f 01 00 00                       ..........

000018af <FlightMenuText>:
	...

000018c1 <mixer_menu_ranges>:
    18c1:	00 02 01 01 00 83 7d 01 00 00 01 63 01 00 32 83     ......}....c..2.
    18d1:	7d 01 00 00 83 7d 01 00 00 00 7d 01 00 64 00 7d     }....}....}..d.}
    18e1:	01 00 64 00 02 01 01 00 83 7d 01 00 00 83 7d 01     ..d......}....}.
    18f1:	00 00 83 7d 01 00 00 83 7d 01 00 00 83 7d 01 00     ...}....}....}..
    1901:	00 83 7d 01 00 00 00 02 01 01 00 00 02 01 01 00     ..}.............
    1911:	00 02 01 01 00 00 02 01 01 00 00 02 01 01 00 00     ................
    1921:	02 01 01 00 00 02 01 01 00 00 02 01 01 00 00 02     ................
    1931:	01 01 00 00 02 01 01 00 00 02 01 01 00 00 02 01     ................
    1941:	01 00 00 0f 01 01 0f 83 7d 01 00 00 00 0f 01 01     ........}.......
    1951:	0f 83 7d 01 00 00 00 0f 01 01 0f 83 7d 01 00 00     ..}.........}...
    1961:	00 0f 01 01 0f 83 7d 01 00 00                       ......}...

0000196b <MixerMenuText>:
    196b:	e2 00 00 00 00 00 00 38 00 00 00 00 00 00 44 44     .......8......DD
    197b:	44 44 44 44 44 44 44 44 44 44 ee 00 ee 00 ee 00     DDDDDDDDDD......
    198b:	ee 00                                               ..

0000198d <servo_menu_ranges>:
    198d:	00 01 01 01 00 83 00 01 03 9c 00 7d 01 03 64        ...........}..d

0000199c <ServoMenuText>:
    199c:	8d 8d 8d 8d 8d 8d 8d 8d 00 00 00 00 00 00 00 00     ................
	...

000019b4 <rc_menu_ranges>:
    19b4:	00 03 01 01 01 00 02 01 01 00 00 04 01 01 04 00     ................
    19c4:	01 01 01 00 00 07 01 01 04 00 28 01 00 00 01 63     ..........(....c
    19d4:	01 00 32 00 00 00 00 00 00 00 00 00 00 00 05 01     ..2.............
    19e4:	01 00 1c 32 01 00 24 00 01 01 01 01 00 7f 01 00     ...2..$.........
    19f4:	1e 00 08 01 01 00 00 06 01 01 02 00 07 01 01 02     ................
    1a04:	00 07 01 01 07 01 0a 01 00 07                       ..........

00001a0e <RCMenuText>:
    1a0e:	3e 76 69 74 69 00 00 00 00 7c 00 35 00 00 25 25     >viti....|.5..%%
    1a1e:	25 00                                               %.

00001a20 <SQRTSIN>:
    1a20:	00 0d 12 16 19 1c 1f 21 23 26 28 29 2b 2d 2f 30     .......!#&()+-/0
    1a30:	32 33 35 36 38 39 3a 3b 3d 3e 3f 40 41 42 43 44     235689:;=>?@ABCD
    1a40:	45 46 47 48 49 4a 4b 4c 4d 4d 4e 4f 50 51 51 52     EFGHIJKLMMNOPQQR
    1a50:	53 53 54 55 55 56 57 57 58 58 59 59 5a 5a 5b 5b     SSTUUVWWXXYYZZ[[
    1a60:	5c 5c 5d 5d 5e 5e 5e 5f 5f 5f 60 60 60 61 61 61     \\]]^^^___```aaa
    1a70:	62 62 62 62 62 63 63 63 63 63 63 63 64 64 64 64     bbbbbcccccccdddd
    1a80:	64 64 64 64 64                                      ddddd

00001a85 <SIN>:
    1a85:	00 02 03 05 06 08 0a 0b 0d 0e 10 11 13 14 16 17     ................
    1a95:	19 1a 1c 1d 1f 20 22 23 25 26 28 29 2b 2c 2d 2f     ..... "#%&()+,-/
    1aa5:	30 32 33 34 36 37 38 3a 3b 3c 3d 3f 40 41 42 43     0234678:;<=?@ABC
    1ab5:	44 46 47 48 49 4a 4b 4c 4d 4e 4f 50 51 52 53 54     DFGHIJKLMNOPQRST
    1ac5:	54 55 56 57 58 58 59 5a 5a 5b 5c 5c 5d 5e 5e 5f     TUVWXXYZZ[\\]^^_
    1ad5:	5f 60 60 60 61 61 62 62 62 63 63 63 63 63 64 64     _```aabbbcccccdd
    1ae5:	64 64 64 64 64                                      ddddd

00001aea <__ctors_end>:
    1aea:	11 24       	eor	r1, r1
    1aec:	1f be       	out	0x3f, r1	; 63
    1aee:	cf ef       	ldi	r28, 0xFF	; 255
    1af0:	d0 e1       	ldi	r29, 0x10	; 16
    1af2:	de bf       	out	0x3e, r29	; 62
    1af4:	cd bf       	out	0x3d, r28	; 61

00001af6 <wdt_init>:
// WDT reset prototype. Placed before main() in code to prevent wdt re-firing
void wdt_init(void) __attribute__((naked)) __attribute__((section(".init3")));

void wdt_init(void)
{
	MCUSR = 0;
    1af6:	14 be       	out	0x34, r1	; 52
	wdt_disable();
    1af8:	88 e1       	ldi	r24, 0x18	; 24
    1afa:	0f b6       	in	r0, 0x3f	; 63
    1afc:	f8 94       	cli
    1afe:	80 93 60 00 	sts	0x0060, r24
    1b02:	10 92 60 00 	sts	0x0060, r1
    1b06:	0f be       	out	0x3f, r0	; 63

00001b08 <__do_copy_data>:
    1b08:	15 e0       	ldi	r17, 0x05	; 5
    1b0a:	a0 e0       	ldi	r26, 0x00	; 0
    1b0c:	b1 e0       	ldi	r27, 0x01	; 1
    1b0e:	e8 ed       	ldi	r30, 0xD8	; 216
    1b10:	f4 e9       	ldi	r31, 0x94	; 148
    1b12:	02 c0       	rjmp	.+4      	; 0x1b18 <__do_copy_data+0x10>
    1b14:	05 90       	lpm	r0, Z+
    1b16:	0d 92       	st	X+, r0
    1b18:	a4 31       	cpi	r26, 0x14	; 20
    1b1a:	b1 07       	cpc	r27, r17
    1b1c:	d9 f7       	brne	.-10     	; 0x1b14 <__do_copy_data+0xc>

00001b1e <__do_clear_bss>:
    1b1e:	28 e0       	ldi	r18, 0x08	; 8
    1b20:	a4 e1       	ldi	r26, 0x14	; 20
    1b22:	b5 e0       	ldi	r27, 0x05	; 5
    1b24:	01 c0       	rjmp	.+2      	; 0x1b28 <.do_clear_bss_start>

00001b26 <.do_clear_bss_loop>:
    1b26:	1d 92       	st	X+, r1

00001b28 <.do_clear_bss_start>:
    1b28:	a5 34       	cpi	r26, 0x45	; 69
    1b2a:	b2 07       	cpc	r27, r18
    1b2c:	e1 f7       	brne	.-8      	; 0x1b26 <.do_clear_bss_loop>
    1b2e:	0e 94 cd 1a 	call	0x359a	; 0x359a <main>
    1b32:	0c 94 6a 4a 	jmp	0x94d4	; 0x94d4 <_exit>

00001b36 <__bad_interrupt>:
    1b36:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00001b3a <glcd_delay>:
;*************************************************************************

	.global glcd_delay
	.func   glcd_delay
glcd_delay:
	nop					// 1 5 * 50ns = 250ns = 4MHz
    1b3a:	00 00       	nop
	ret					// 4 (5 cycles)
    1b3c:	08 95       	ret

00001b3e <glcd_delay_1us>:
;*************************************************************************

	.global glcd_delay_1us
	.func   glcd_delay_1us
glcd_delay_1us:
	rcall	glcd_delay
    1b3e:	fd df       	rcall	.-6      	; 0x1b3a <glcd_delay>
	rcall	glcd_delay
    1b40:	fc df       	rcall	.-8      	; 0x1b3a <glcd_delay>
	rcall	glcd_delay
    1b42:	fb df       	rcall	.-10     	; 0x1b3a <glcd_delay>
	rcall	glcd_delay
    1b44:	fa df       	rcall	.-12     	; 0x1b3a <glcd_delay>
	ret
    1b46:	08 95       	ret

00001b48 <bind_master>:
;*************************************************************************

	.global bind_master
	.func   bind_master
bind_master:
	push	YL			//	1
    1b48:	cf 93       	push	r28
	push	XL			//	1
    1b4a:	af 93       	push	r26

	ldi		XL,0x5		// 	1 Master is 5 pulses
    1b4c:	a5 e0       	ldi	r26, 0x05	; 5

00001b4e <master_loop>:
master_loop:
	cbi 	BIND		//	2
    1b4e:	58 98       	cbi	0x0b, 0	; 11
	ldi		YL,0x76		// 	1 		118us
    1b50:	c6 e7       	ldi	r28, 0x76	; 118
	call	VarDelay	//	4
    1b52:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <VarDelay>
	sbi		BIND		//	2
    1b56:	58 9a       	sbi	0x0b, 0	; 11
	ldi		YL,0x7A		// 	1 		122us
    1b58:	ca e7       	ldi	r28, 0x7A	; 122
	call	VarDelay	//	4
    1b5a:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <VarDelay>
	dec		XL			//	1
    1b5e:	aa 95       	dec	r26
	brne	master_loop	//  2 1
    1b60:	b1 f7       	brne	.-20     	; 0x1b4e <master_loop>

	pop		XL			//	  1
    1b62:	af 91       	pop	r26
	pop		YL			//	  1
    1b64:	cf 91       	pop	r28
	ret					//	  4 
    1b66:	08 95       	ret

00001b68 <VarDelay>:
; 5 cycles to configure and call, 4 to return and 2 to change bit afterwards = 11
; 20 cycles makes 1.0us
;*************************************************************************

VarDelay:
	rjmp .+0			// 2
    1b68:	00 c0       	rjmp	.+0      	; 0x1b6a <VarDelay+0x2>
	rjmp .+0			// 2
    1b6a:	00 c0       	rjmp	.+0      	; 0x1b6c <VarDelay+0x4>
	rjmp .+0			// 2
    1b6c:	00 c0       	rjmp	.+0      	; 0x1b6e <VarDelay+0x6>
	rjmp .+0			// 2
    1b6e:	00 c0       	rjmp	.+0      	; 0x1b70 <VarDelay+0x8>
	rjmp .+0			// 2
    1b70:	00 c0       	rjmp	.+0      	; 0x1b72 <VarDelay+0xa>
	rjmp .+0			// 2
    1b72:	00 c0       	rjmp	.+0      	; 0x1b74 <VarDelay+0xc>
	rjmp .+0			// 2
    1b74:	00 c0       	rjmp	.+0      	; 0x1b76 <VarDelay+0xe>
	rjmp .+0			// 2
    1b76:	00 c0       	rjmp	.+0      	; 0x1b78 <VarDelay+0x10>
	nop					// 1
    1b78:	00 00       	nop
	dec 	YL			// 1
    1b7a:	ca 95       	dec	r28
	brne	VarDelay	// 2 1
    1b7c:	a9 f7       	brne	.-22     	; 0x1b68 <VarDelay>
	ret					//   4 
    1b7e:	08 95       	ret

00001b80 <output_servo_ppm_asm>:

	.global output_servo_ppm_asm
	.func   output_servo_ppm_asm
output_servo_ppm_asm:
// Copy r22 (containing ServoFlag) into r15
	mov		r15, r22	
    1b80:	f6 2e       	mov	r15, r22
// Save regs
	push	ZL			// 2			
    1b82:	ef 93       	push	r30
	push	ZH			// 2
    1b84:	ff 93       	push	r31
	push	XL			// 2
    1b86:	af 93       	push	r26
	push	XH			// 2
    1b88:	bf 93       	push	r27
	push	YL			// 2
    1b8a:	cf 93       	push	r28
	push	YH			// 2
    1b8c:	df 93       	push	r29
	push	16			// 2
    1b8e:	0f 93       	push	r16
	push	17			// 2
    1b90:	1f 93       	push	r17
	push	18			// 2
    1b92:	2f 93       	push	r18
	push	19			// 2
    1b94:	3f 93       	push	r19
	push	20			// 2
    1b96:	4f 93       	push	r20
	push	21			// 2
    1b98:	5f 93       	push	r21
	push	22			// 2
    1b9a:	6f 93       	push	r22
	push	23			// 2
    1b9c:	7f 93       	push	r23

// Get start address of ServoOut[0] into Z
	mov		ZL, r24		// 1 Low byte
    1b9e:	e8 2f       	mov	r30, r24
	mov		ZH, r25		// 1 High byte
    1ba0:	f9 2f       	mov	r31, r25

// Save initial address for later
	push	24			// 2
    1ba2:	8f 93       	push	r24
	push	25			// 2
    1ba4:	9f 93       	push	r25

// Trim 16-bit values to suit individual needs, 
// Save result and copy lower 3 bits to r16 to r23 (96 cycles)

// M1
	ld		XL, Z+ 		// 2			Load XL with data at address in Z
    1ba6:	a1 91       	ld	r26, Z+
	ld		XH, Z+		// 2			Load XH with data at address in Z+1
    1ba8:	b1 91       	ld	r27, Z+
	subi	XL,	0xc6	// 1 			Trim servo pulse (was 34a)
    1baa:	a6 5c       	subi	r26, 0xC6	; 198
	sbci 	XH,	0x00	// 1
    1bac:	b0 40       	sbci	r27, 0x00	; 0
	push	XL 			// 2			Save trimmed value to the stack
    1bae:	af 93       	push	r26
	push	XH 			// 2
    1bb0:	bf 93       	push	r27
	andi	XL,	0x07	// 1			And all but first 3 bits
    1bb2:	a7 70       	andi	r26, 0x07	; 7
	mov		r23,XL		// 1 (12)		Copy 8-bit result to regs
    1bb4:	7a 2f       	mov	r23, r26
// M2
	ld		XL, Z+
    1bb6:	a1 91       	ld	r26, Z+
	ld		XH, Z+
    1bb8:	b1 91       	ld	r27, Z+
	subi	XL,	0xbe  // was 2e6
    1bba:	ae 5b       	subi	r26, 0xBE	; 190
	sbci 	XH,	0x00
    1bbc:	b0 40       	sbci	r27, 0x00	; 0
	push	XL 		
    1bbe:	af 93       	push	r26
	push	XH 		
    1bc0:	bf 93       	push	r27
	andi	XL,	0x07
    1bc2:	a7 70       	andi	r26, 0x07	; 7
	mov		r22,XL	
    1bc4:	6a 2f       	mov	r22, r26
// M3
	ld		XL, Z+
    1bc6:	a1 91       	ld	r26, Z+
	ld		XH, Z+
    1bc8:	b1 91       	ld	r27, Z+
	subi	XL,	0xb6 // was 282
    1bca:	a6 5b       	subi	r26, 0xB6	; 182
	sbci 	XH,	0x00
    1bcc:	b0 40       	sbci	r27, 0x00	; 0
	push	XL 		
    1bce:	af 93       	push	r26
	push	XH 		
    1bd0:	bf 93       	push	r27
	andi	XL,	0x07
    1bd2:	a7 70       	andi	r26, 0x07	; 7
	mov		r21,XL	
    1bd4:	5a 2f       	mov	r21, r26
// M4
	ld		XL, Z+
    1bd6:	a1 91       	ld	r26, Z+
	ld		XH, Z+
    1bd8:	b1 91       	ld	r27, Z+
	subi	XL,	0xae // was 21e
    1bda:	ae 5a       	subi	r26, 0xAE	; 174
	sbci 	XH,	0x00
    1bdc:	b0 40       	sbci	r27, 0x00	; 0
	push	XL 	
    1bde:	af 93       	push	r26
	push	XH 	
    1be0:	bf 93       	push	r27
	andi	XL,	0x07
    1be2:	a7 70       	andi	r26, 0x07	; 7
	mov		r20,XL	
    1be4:	4a 2f       	mov	r20, r26
// M5
	ld		XL, Z+
    1be6:	a1 91       	ld	r26, Z+
	ld		XH, Z+
    1be8:	b1 91       	ld	r27, Z+
	subi	XL,	0xa5 // was 1ba
    1bea:	a5 5a       	subi	r26, 0xA5	; 165
	sbci 	XH,	0x00
    1bec:	b0 40       	sbci	r27, 0x00	; 0
	push	XL 	
    1bee:	af 93       	push	r26
	push	XH 	
    1bf0:	bf 93       	push	r27
	andi	XL,	0x07
    1bf2:	a7 70       	andi	r26, 0x07	; 7
	mov		r19,XL	
    1bf4:	3a 2f       	mov	r19, r26
// M6
	ld		XL, Z+
    1bf6:	a1 91       	ld	r26, Z+
	ld		XH, Z+
    1bf8:	b1 91       	ld	r27, Z+
	subi	XL,	0x9D // was 155
    1bfa:	ad 59       	subi	r26, 0x9D	; 157
	sbci 	XH,	0x00
    1bfc:	b0 40       	sbci	r27, 0x00	; 0
	push	XL 	
    1bfe:	af 93       	push	r26
	push	XH 	
    1c00:	bf 93       	push	r27
	andi	XL,	0x07
    1c02:	a7 70       	andi	r26, 0x07	; 7
	mov		r18,XL
    1c04:	2a 2f       	mov	r18, r26
// M7
	ld		XL, Z+
    1c06:	a1 91       	ld	r26, Z+
	ld		XH, Z+
    1c08:	b1 91       	ld	r27, Z+
	subi	XL,	0x95 // was f1
    1c0a:	a5 59       	subi	r26, 0x95	; 149
	sbci 	XH,	0x00
    1c0c:	b0 40       	sbci	r27, 0x00	; 0
	push	XL 	
    1c0e:	af 93       	push	r26
	push	XH 
    1c10:	bf 93       	push	r27
	andi	XL,	0x07
    1c12:	a7 70       	andi	r26, 0x07	; 7
	mov		r17,XL
    1c14:	1a 2f       	mov	r17, r26
// M8
	ld		XL, Z+
    1c16:	a1 91       	ld	r26, Z+
	ld		XH, Z+
    1c18:	b1 91       	ld	r27, Z+
	subi	XL,	0x8d // Was 8d
    1c1a:	ad 58       	subi	r26, 0x8D	; 141
	sbci 	XH,	0x00
    1c1c:	b0 40       	sbci	r27, 0x00	; 0
	push	XL
    1c1e:	af 93       	push	r26
	push	XH 
    1c20:	bf 93       	push	r27
	andi	XL,	0x07
    1c22:	a7 70       	andi	r26, 0x07	; 7
	mov		r16,XL
    1c24:	0a 2f       	mov	r16, r26
// Time out lower 3 bits of pulse value (Zero to 7us)
// Each chunk is always executed in 1+10+1+147 = 159 cycles or 7.95us
// This does affect the inter-pulse delay, but not the pulsewidth.

// M1
	mov		r25,r23		// 1
    1c26:	97 2f       	mov	r25, r23
	call	DelayHigh	// 10 (where r25 = 7)
    1c28:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <DelayHigh>
	sbrc	r15,0		// 1 (False),	2 if true
    1c2c:	f0 fc       	sbrc	r15, 0
	sbi 	M1			// 1,			0
    1c2e:	46 9a       	sbi	0x08, 6	; 8
	call	DelayLow	// 7 + 140 (where r25 = 0)
    1c30:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <DelayLow>
	//call    pwm_delay   // 100us
	//call    pwm_delay

// M2
	mov		r25,r22
    1c34:	96 2f       	mov	r25, r22
	call	DelayHigh
    1c36:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <DelayHigh>
	sbrc	r15,1		// Don't switch on if if ServoFlag bit is cleared
    1c3a:	f1 fc       	sbrc	r15, 1
	sbi 	M2
    1c3c:	44 9a       	sbi	0x08, 4	; 8
	call	DelayLow
    1c3e:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <DelayLow>
	//call    pwm_delay   // 100us
	//call    pwm_delay

// M3
	mov		r25,r21
    1c42:	95 2f       	mov	r25, r21
	call	DelayHigh
    1c44:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <DelayHigh>
	sbrc	r15,2		// Don't switch on if if ServoFlag bit is cleared
    1c48:	f2 fc       	sbrc	r15, 2
	sbi 	M3
    1c4a:	42 9a       	sbi	0x08, 2	; 8
	call	DelayLow
    1c4c:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <DelayLow>
	//call    pwm_delay   // 100us
	//call    pwm_delay

// M4
	mov		r25,r20
    1c50:	94 2f       	mov	r25, r20
	call	DelayHigh
    1c52:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <DelayHigh>
	sbrc	r15,3		// Don't switch on if if ServoFlag bit is cleared
    1c56:	f3 fc       	sbrc	r15, 3
	sbi 	M4
    1c58:	43 9a       	sbi	0x08, 3	; 8
	call	DelayLow
    1c5a:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <DelayLow>
	//call    pwm_delay   // 100us
	//call    pwm_delay

// M5
	mov		r25,r19
    1c5e:	93 2f       	mov	r25, r19
	call	DelayHigh
    1c60:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <DelayHigh>
	sbrc	r15,4		// Don't switch on if if ServoFlag bit is cleared
    1c64:	f4 fc       	sbrc	r15, 4
	sbi 	M5
    1c66:	14 9a       	sbi	0x02, 4	; 2
	call	DelayLow
    1c68:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <DelayLow>
	//call    pwm_delay   // 100us
	//call    pwm_delay

// M6
	mov		r25,r18
    1c6c:	92 2f       	mov	r25, r18
	call	DelayHigh
    1c6e:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <DelayHigh>
	sbrc	r15,5		// Don't switch on if if ServoFlag bit is cleared
    1c72:	f5 fc       	sbrc	r15, 5
	sbi 	M6
    1c74:	15 9a       	sbi	0x02, 5	; 2
	call	DelayLow
    1c76:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <DelayLow>
	//call    pwm_delay   // 100us
	//call    pwm_delay

// M7
	mov		r25,r17
    1c7a:	91 2f       	mov	r25, r17
	call	DelayHigh
    1c7c:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <DelayHigh>
	sbrc	r15,6		// Don't switch on if if ServoFlag bit is cleared
    1c80:	f6 fc       	sbrc	r15, 6
	sbi 	M7
    1c82:	45 9a       	sbi	0x08, 5	; 8
	call	DelayLow
    1c84:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <DelayLow>
	//call    pwm_delay   // 100us
	//call    pwm_delay

// M8
	mov		r25,r16
    1c88:	90 2f       	mov	r25, r16
	call	DelayHigh
    1c8a:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <DelayHigh>
	sbrc	r15,7		// Don't switch on if if ServoFlag bit is cleared
    1c8e:	f7 fc       	sbrc	r15, 7
	sbi 	M8			// 1
    1c90:	47 9a       	sbi	0x08, 7	; 8
	call	DelayLow
    1c92:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <DelayLow>
// At this point, the largest pulse that we can generate is 256 * 8 = 2.048ms
// However we would like to be able to generate up to 2.100ms (150%) - an extra 52us
// So we can fluff it out another 200us so that we can subtract enough to keep r16 under 0xff or 256 :)
// With this setup, M1 can go down to 850 and M8 can go up to 2150

	call    pwm_delay   // 150us
    1c96:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <pwm_delay>
	call    pwm_delay
    1c9a:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <pwm_delay>
	call    pwm_delay
    1c9e:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <pwm_delay>

// Copy trimmed array data into regs
// This now represents steps of 8us chunks
	pop		XH			// M8
    1ca2:	bf 91       	pop	r27
	pop		XL
    1ca4:	af 91       	pop	r26
	call	shuffle_8
    1ca6:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <shuffle_8>
	mov		r16,XL
    1caa:	0a 2f       	mov	r16, r26
	pop		XH			// M7
    1cac:	bf 91       	pop	r27
	pop		XL
    1cae:	af 91       	pop	r26
	call	shuffle_8
    1cb0:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <shuffle_8>
	mov		r17,XL
    1cb4:	1a 2f       	mov	r17, r26
	pop		XH			// M6
    1cb6:	bf 91       	pop	r27
	pop		XL
    1cb8:	af 91       	pop	r26
	call	shuffle_8
    1cba:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <shuffle_8>
	mov		r18,XL
    1cbe:	2a 2f       	mov	r18, r26
	pop		XH			// M5
    1cc0:	bf 91       	pop	r27
	pop		XL
    1cc2:	af 91       	pop	r26
	call	shuffle_8
    1cc4:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <shuffle_8>
	mov		r19,XL
    1cc8:	3a 2f       	mov	r19, r26
	pop		XH			// M4
    1cca:	bf 91       	pop	r27
	pop		XL
    1ccc:	af 91       	pop	r26
	call	shuffle_8
    1cce:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <shuffle_8>
	mov		r20,XL
    1cd2:	4a 2f       	mov	r20, r26
	pop		XH			// M3
    1cd4:	bf 91       	pop	r27
	pop		XL
    1cd6:	af 91       	pop	r26
	call	shuffle_8
    1cd8:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <shuffle_8>
	mov		r21,XL
    1cdc:	5a 2f       	mov	r21, r26
	pop		XH			// M2
    1cde:	bf 91       	pop	r27
	pop		XL
    1ce0:	af 91       	pop	r26
	call	shuffle_8
    1ce2:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <shuffle_8>
	mov		r22,XL
    1ce6:	6a 2f       	mov	r22, r26
	pop		XH			// M1
    1ce8:	bf 91       	pop	r27
	pop		XL
    1cea:	af 91       	pop	r26
	call	shuffle_8
    1cec:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <shuffle_8>
	mov		r23,XL
    1cf0:	7a 2f       	mov	r23, r26

// Loop prep
	ldi 	YL,0xFF		// 1			Set loop count to ffh or 255 (255 * 8us = 2040us + 150us = 2190us)
    1cf2:	cf ef       	ldi	r28, 0xFF	; 255
	ldi		YH,0x00		// 1
    1cf4:	d0 e0       	ldi	r29, 0x00	; 0
	clr		0			// 1 (7)
    1cf6:	00 24       	eor	r0, r0

00001cf8 <nloop>:

// Ninja loop - 7 cycles each side (8 x 7 = 56 + 6 to loop + 98 pad = 160 cycles)
// 20 cyles = 1us, 160 cycles = 8us

nloop:
	subi	r23,1		// 1 			ServoOut1
    1cf8:	71 50       	subi	r23, 0x01	; 1
	brne	j1			// 2	1	
    1cfa:	19 f4       	brne	.+6      	; 0x1d02 <j1>
	cbi 	M1			// 		2		Clear output M1 if done (+5 = 1448 = 72.4us = 48)
    1cfc:	46 98       	cbi	0x08, 6	; 8
	jmp		jj1			//		3
    1cfe:	0c 94 83 0e 	jmp	0x1d06	; 0x1d06 <jj1>

00001d02 <j1>:
j1:
	rjmp 	.+0			// 2
    1d02:	00 c0       	rjmp	.+0      	; 0x1d04 <j1+0x2>
	rjmp 	.+0			// 2
    1d04:	00 c0       	rjmp	.+0      	; 0x1d06 <jj1>

00001d06 <jj1>:
jj1:
	subi	r22,1		// 1			ServoOut2
    1d06:	61 50       	subi	r22, 0x01	; 1
	brne	j2			// 2	1
    1d08:	19 f4       	brne	.+6      	; 0x1d10 <j2>
	cbi 	M2			// 		2		Clear output M2 if done (+11 = 1285 = 64.25us = 40)
    1d0a:	44 98       	cbi	0x08, 4	; 8
	jmp		jj2			//		3
    1d0c:	0c 94 8a 0e 	jmp	0x1d14	; 0x1d14 <jj2>

00001d10 <j2>:
j2:
	rjmp	.+0
    1d10:	00 c0       	rjmp	.+0      	; 0x1d12 <j2+0x2>
	rjmp	.+0
    1d12:	00 c0       	rjmp	.+0      	; 0x1d14 <jj2>

00001d14 <jj2>:
jj2:
	subi	r21,1
    1d14:	51 50       	subi	r21, 0x01	; 1
	brne	j3
    1d16:	19 f4       	brne	.+6      	; 0x1d1e <j3>
	cbi 	M3
    1d18:	42 98       	cbi	0x08, 2	; 8
	jmp		jj3
    1d1a:	0c 94 91 0e 	jmp	0x1d22	; 0x1d22 <jj3>

00001d1e <j3>:
j3:
	rjmp	.+0
    1d1e:	00 c0       	rjmp	.+0      	; 0x1d20 <j3+0x2>
	rjmp	.+0
    1d20:	00 c0       	rjmp	.+0      	; 0x1d22 <jj3>

00001d22 <jj3>:
jj3:
	subi 	r20,1
    1d22:	41 50       	subi	r20, 0x01	; 1
	brne	j4
    1d24:	19 f4       	brne	.+6      	; 0x1d2c <j4>
	cbi 	M4
    1d26:	43 98       	cbi	0x08, 3	; 8
	jmp		jj4	
    1d28:	0c 94 98 0e 	jmp	0x1d30	; 0x1d30 <jj4>

00001d2c <j4>:
j4:
	rjmp 	.+0
    1d2c:	00 c0       	rjmp	.+0      	; 0x1d2e <j4+0x2>
	rjmp 	.+0
    1d2e:	00 c0       	rjmp	.+0      	; 0x1d30 <jj4>

00001d30 <jj4>:
jj4:
	subi	r19,1
    1d30:	31 50       	subi	r19, 0x01	; 1
	brne	j5
    1d32:	19 f4       	brne	.+6      	; 0x1d3a <j5>
	cbi 	M5
    1d34:	14 98       	cbi	0x02, 4	; 2
	jmp		jj5
    1d36:	0c 94 9f 0e 	jmp	0x1d3e	; 0x1d3e <jj5>

00001d3a <j5>:
j5:
	rjmp 	.+0
    1d3a:	00 c0       	rjmp	.+0      	; 0x1d3c <j5+0x2>
	rjmp 	.+0
    1d3c:	00 c0       	rjmp	.+0      	; 0x1d3e <jj5>

00001d3e <jj5>:
jj5:
	subi	r18,1
    1d3e:	21 50       	subi	r18, 0x01	; 1
	brne	j6
    1d40:	19 f4       	brne	.+6      	; 0x1d48 <j6>
	cbi 	M6
    1d42:	15 98       	cbi	0x02, 5	; 2
	jmp		jj6
    1d44:	0c 94 a6 0e 	jmp	0x1d4c	; 0x1d4c <jj6>

00001d48 <j6>:
j6:
	rjmp 	.+0
    1d48:	00 c0       	rjmp	.+0      	; 0x1d4a <j6+0x2>
	rjmp	.+0
    1d4a:	00 c0       	rjmp	.+0      	; 0x1d4c <jj6>

00001d4c <jj6>:
jj6:
	subi	r17,1
    1d4c:	11 50       	subi	r17, 0x01	; 1
	brne	j7
    1d4e:	19 f4       	brne	.+6      	; 0x1d56 <j7>
	cbi 	M7
    1d50:	45 98       	cbi	0x08, 5	; 8
	jmp		jj7
    1d52:	0c 94 ad 0e 	jmp	0x1d5a	; 0x1d5a <jj7>

00001d56 <j7>:
j7:
	rjmp 	.+0
    1d56:	00 c0       	rjmp	.+0      	; 0x1d58 <j7+0x2>
	rjmp 	.+0
    1d58:	00 c0       	rjmp	.+0      	; 0x1d5a <jj7>

00001d5a <jj7>:
jj7:
	subi 	r16,1		// ServoOut 8
    1d5a:	01 50       	subi	r16, 0x01	; 1
	brne	j8
    1d5c:	19 f4       	brne	.+6      	; 0x1d64 <j8>
	cbi 	M8
    1d5e:	47 98       	cbi	0x08, 7	; 8
	jmp		jj8
    1d60:	0c 94 b4 0e 	jmp	0x1d68	; 0x1d68 <jj8>

00001d64 <j8>:
j8:
	rjmp 	.+0
    1d64:	00 c0       	rjmp	.+0      	; 0x1d66 <j8+0x2>
	rjmp 	.+0
    1d66:	00 c0       	rjmp	.+0      	; 0x1d68 <jj8>

00001d68 <jj8>:
jj8:
	call	pad_100_delay // (100)
    1d68:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <pad_100_delay>

	subi 	YL,1		// 1
    1d6c:	c1 50       	subi	r28, 0x01	; 1
	sbc 	YH,0		// 1
    1d6e:	d0 09       	sbc	r29, r0
	breq	skiploop	// 1	2		Loop until zero - 1 false 2 true
    1d70:	11 f0       	breq	.+4      	; 0x1d76 <skiploop>
	jmp		nloop		// 3			Can't reach nloop with a brne alone
    1d72:	0c 94 7c 0e 	jmp	0x1cf8	; 0x1cf8 <nloop>

00001d76 <skiploop>:

skiploop:
	pop		25			// 		2		Restore regs
    1d76:	9f 91       	pop	r25
	pop		24			// 		2
    1d78:	8f 91       	pop	r24
	pop		23			//		2
    1d7a:	7f 91       	pop	r23
	pop		22			//		2
    1d7c:	6f 91       	pop	r22
	pop		21			//		2
    1d7e:	5f 91       	pop	r21
	pop		20			//		2
    1d80:	4f 91       	pop	r20
	pop		19			//		2
    1d82:	3f 91       	pop	r19
	pop		18			//		2
    1d84:	2f 91       	pop	r18
	pop		17			//		2
    1d86:	1f 91       	pop	r17
	pop		16			//		2
    1d88:	0f 91       	pop	r16
	pop		YH			//		2
    1d8a:	df 91       	pop	r29
	pop		YL			//		2
    1d8c:	cf 91       	pop	r28
	pop		XH			//		2
    1d8e:	bf 91       	pop	r27
	pop		XL			//		2
    1d90:	af 91       	pop	r26
	pop		ZH			// 		2
    1d92:	ff 91       	pop	r31
	pop		ZL			//		2
    1d94:	ef 91       	pop	r30

	ret					//		4
    1d96:	08 95       	ret

00001d98 <output_servo_ppm_asm3>:
;*************************************************************************

	.global output_servo_ppm_asm3
	.func   output_servo_ppm_asm3
output_servo_ppm_asm3:
	push	16			// Save regs
    1d98:	0f 93       	push	r16
	push	17
    1d9a:	1f 93       	push	r17
	push	18
    1d9c:	2f 93       	push	r18

	//ldi 	16,0x34		// 1			Set loop count to 834h or 2100
	ldi 	16,0xFC		// 1			Set loop count to 8FCh or 2300(us)
    1d9e:	0c ef       	ldi	r16, 0xFC	; 252
	ldi		17,0x08	
    1da0:	18 e0       	ldi	r17, 0x08	; 8
	clr		0
    1da2:	00 24       	eor	r0, r0

00001da4 <jump_table>:

jump_table:
	cpi		r24,0x00	; 0				
    1da4:	80 30       	cpi	r24, 0x00	; 0
	breq	in1
    1da6:	71 f0       	breq	.+28     	; 0x1dc4 <in1>
	cpi		r24,0x01	; 1
    1da8:	81 30       	cpi	r24, 0x01	; 1
	breq	in2
    1daa:	79 f0       	breq	.+30     	; 0x1dca <in2>
	cpi		r24,0x02	; 2
    1dac:	82 30       	cpi	r24, 0x02	; 2
	breq	in3
    1dae:	81 f0       	breq	.+32     	; 0x1dd0 <in3>
	cpi		r24,0x03	; 3
    1db0:	83 30       	cpi	r24, 0x03	; 3
	breq	in4
    1db2:	89 f0       	breq	.+34     	; 0x1dd6 <in4>
	cpi		r24,0x04	; 4
    1db4:	84 30       	cpi	r24, 0x04	; 4
	breq	in5
    1db6:	91 f0       	breq	.+36     	; 0x1ddc <in5>
	cpi		r24,0x05	; 5
    1db8:	85 30       	cpi	r24, 0x05	; 5
	breq	in6
    1dba:	99 f0       	breq	.+38     	; 0x1de2 <in6>
	cpi		r24,0x06	; 6
    1dbc:	86 30       	cpi	r24, 0x06	; 6
	breq	in7
    1dbe:	a1 f0       	breq	.+40     	; 0x1de8 <in7>
	cpi		r24,0x07	; 7
    1dc0:	87 30       	cpi	r24, 0x07	; 7
	breq	in8
    1dc2:	a9 f0       	breq	.+42     	; 0x1dee <in8>

00001dc4 <in1>:

in1:sbi 	M1			// Set output high
    1dc4:	46 9a       	sbi	0x08, 6	; 8
	jmp		loopin
    1dc6:	0c 94 fa 0e 	jmp	0x1df4	; 0x1df4 <loopin>

00001dca <in2>:
in2:sbi 	M2
    1dca:	44 9a       	sbi	0x08, 4	; 8
	jmp		loopin
    1dcc:	0c 94 fa 0e 	jmp	0x1df4	; 0x1df4 <loopin>

00001dd0 <in3>:
in3:sbi 	M3	
    1dd0:	42 9a       	sbi	0x08, 2	; 8
	jmp		loopin
    1dd2:	0c 94 fa 0e 	jmp	0x1df4	; 0x1df4 <loopin>

00001dd6 <in4>:
in4:sbi 	M4
    1dd6:	43 9a       	sbi	0x08, 3	; 8
	jmp		loopin
    1dd8:	0c 94 fa 0e 	jmp	0x1df4	; 0x1df4 <loopin>

00001ddc <in5>:
in5:sbi 	M5
    1ddc:	14 9a       	sbi	0x02, 4	; 2
	jmp		loopin
    1dde:	0c 94 fa 0e 	jmp	0x1df4	; 0x1df4 <loopin>

00001de2 <in6>:
in6:sbi 	M6
    1de2:	15 9a       	sbi	0x02, 5	; 2
	jmp		loopin
    1de4:	0c 94 fa 0e 	jmp	0x1df4	; 0x1df4 <loopin>

00001de8 <in7>:
in7:sbi 	M7
    1de8:	45 9a       	sbi	0x08, 5	; 8
	jmp		loopin
    1dea:	0c 94 fa 0e 	jmp	0x1df4	; 0x1df4 <loopin>

00001dee <in8>:
in8:sbi 	M8
    1dee:	47 9a       	sbi	0x08, 7	; 8
	jmp		loopin
    1df0:	0c 94 fa 0e 	jmp	0x1df4	; 0x1df4 <loopin>

00001df4 <loopin>:

// Loop - 20 cycles = 1us
loopin:
						// <---------	Left column is skip execution path
	rjmp .+0			// 2 	<----	Right column is pulse end execution path
    1df4:	00 c0       	rjmp	.+0      	; 0x1df6 <loopin+0x2>
	rjmp .+0			// 2
    1df6:	00 c0       	rjmp	.+0      	; 0x1df8 <loopin+0x4>
	rjmp .+0			// 2
    1df8:	00 c0       	rjmp	.+0      	; 0x1dfa <loopin+0x6>
	rjmp .+0			// 2
    1dfa:	00 c0       	rjmp	.+0      	; 0x1dfc <loopin+0x8>
	rjmp .+0			// 2
    1dfc:	00 c0       	rjmp	.+0      	; 0x1dfe <loopin+0xa>
	rjmp .+0			// 2
    1dfe:	00 c0       	rjmp	.+0      	; 0x1e00 <loopin+0xc>

	subi	r22,1		// 1 			Time servo pulse
    1e00:	61 50       	subi	r22, 0x01	; 1
	sbc 	r23,0		// 1
    1e02:	70 09       	sbc	r23, r0
	brne	loopout		// 2	1
    1e04:	19 f4       	brne	.+6      	; 0x1e0c <loopout>

// Clear outputs if done
	ldi		r18,0x00	 // 1
    1e06:	20 e0       	ldi	r18, 0x00	; 0
	out 	SERVO_OUT_KK20,r18// 1			Boom.
    1e08:	28 b9       	out	0x08, r18	; 8
	out 	SERVO_OUT_KK21,r18// 1			KK2.1 has a couple of outputs on Port A also.
    1e0a:	22 b9       	out	0x02, r18	; 2

00001e0c <loopout>:

// Exit
loopout:
	subi 	16,1		// 1			+4 cycles = total 20 cycles
    1e0c:	01 50       	subi	r16, 0x01	; 1
	sbc 	17,0		// 1
    1e0e:	10 09       	sbc	r17, r0
	brne	loopin		// 2	1		Loop until zero
    1e10:	89 f7       	brne	.-30     	; 0x1df4 <loopin>

	pop		18
    1e12:	2f 91       	pop	r18
	pop		17			// Restore regs
    1e14:	1f 91       	pop	r17
	pop		16
    1e16:	0f 91       	pop	r16
	ret	
    1e18:	08 95       	ret

00001e1a <pwm_delay>:
;*************************************************************************	
; void pwm_delay(void) 50us output spacing delay (8 cycle loop - 400ns)
;*************************************************************************

pwm_delay:				// 4 to call
	push	16			// 1
    1e1a:	0f 93       	push	r16
	ldi 	16,0x65		// 1
    1e1c:	05 e6       	ldi	r16, 0x65	; 101

00001e1e <pwm_loop>:

pwm_loop:
	rjmp .+0			// 2
    1e1e:	00 c0       	rjmp	.+0      	; 0x1e20 <pwm_loop+0x2>
	rjmp .+0			// 2
    1e20:	00 c0       	rjmp	.+0      	; 0x1e22 <pwm_loop+0x4>
	rjmp .+0			// 2
    1e22:	00 c0       	rjmp	.+0      	; 0x1e24 <pwm_loop+0x6>
	subi	r16,1		// 1
    1e24:	01 50       	subi	r16, 0x01	; 1
	brne	pwm_loop	// 2  1
    1e26:	d9 f7       	brne	.-10     	; 0x1e1e <pwm_loop>

00001e28 <pwm_exit>:

pwm_exit:
	pop		16			//    1
    1e28:	0f 91       	pop	r16
	ret					//    4 to return
    1e2a:	08 95       	ret

00001e2c <pad_100_delay>:
; pad_100_delay 98 cycle padding delay
; Takes 4 to call, so we need 94 cycles burnt here
;*************************************************************************

pad_100_delay:
	push	16			// 		2		Save regs
    1e2c:	0f 93       	push	r16
	ldi 	16,0x09		// 		1		Set loop count to 09h or 9
    1e2e:	09 e0       	ldi	r16, 0x09	; 9

00001e30 <pad_100>:

pad_100:				//				9 cycles, 8 on last
	rjmp .+0			// 2
    1e30:	00 c0       	rjmp	.+0      	; 0x1e32 <pad_100+0x2>
	rjmp .+0			// 2			8 x 9cyc + 8 = 80
    1e32:	00 c0       	rjmp	.+0      	; 0x1e34 <pad_100+0x4>
	rjmp .+0			// 2
    1e34:	00 c0       	rjmp	.+0      	; 0x1e36 <pad_100+0x6>

	subi 	16,1		// 1
    1e36:	01 50       	subi	r16, 0x01	; 1
	brne	pad_100		// 2	1		Loop until zero	
    1e38:	d9 f7       	brne	.-10     	; 0x1e30 <pad_100>

	nop					// 		1		Trim to precisely the right value
    1e3a:	00 00       	nop
	rjmp .+0			// 		2
    1e3c:	00 c0       	rjmp	.+0      	; 0x1e3e <pad_100+0xe>
	rjmp .+0			// 		2
    1e3e:	00 c0       	rjmp	.+0      	; 0x1e40 <pad_100+0x10>

	pop		16			// 		2		Restore regs
    1e40:	0f 91       	pop	r16
	ret					// 		4 (94 cycles)
    1e42:	08 95       	ret

00001e44 <us_delay>:
; void us_delay(void) 1us delay for ninja skills
; Takes 4 to call, 4 to return, so we need 12 cycles burnt here
;*************************************************************************

us_delay:
	rjmp .+0			// 2
    1e44:	00 c0       	rjmp	.+0      	; 0x1e46 <us_delay+0x2>
	rjmp .+0			// 2
    1e46:	00 c0       	rjmp	.+0      	; 0x1e48 <us_delay+0x4>
	rjmp .+0			// 2
    1e48:	00 c0       	rjmp	.+0      	; 0x1e4a <us_delay+0x6>
	rjmp .+0			// 2
    1e4a:	00 c0       	rjmp	.+0      	; 0x1e4c <us_delay+0x8>
	ret					// 4 (16 cycles)
    1e4c:	08 95       	ret

00001e4e <shuffle_8>:
;*************************************************************************	
; Space-saving macro-ish suroutines
;*************************************************************************

shuffle_8: // (10 cycles)
	lsr		XH			// 1 Rotate right into carry
    1e4e:	b6 95       	lsr	r27
	ror		XL			// 1 Rotate right with carry from MSB
    1e50:	a7 95       	ror	r26
	lsr		XH			// 1
    1e52:	b6 95       	lsr	r27
	ror		XL			// 1
    1e54:	a7 95       	ror	r26
	lsr		XH			// 1
    1e56:	b6 95       	lsr	r27
	ror		XL			// 1
    1e58:	a7 95       	ror	r26
	ret					// 4
    1e5a:	08 95       	ret

00001e5c <DelayHigh>:
; 10 and 150 cycles at 1us intervals per value in r26
; 
;*************************************************************************

DelayHigh:				// (0)	(1)	(2+) each extra is +20
	ldi		YL,0x07		// 1	1	1
    1e5c:	c7 e0       	ldi	r28, 0x07	; 7
	andi	r25,0x07	
    1e5e:	97 70       	andi	r25, 0x07	; 7
	eor		YL,r25		// 1 	1	1
    1e60:	c9 27       	eor	r28, r25
	breq	LoopHighOut1// 2	1	1
    1e62:	31 f0       	breq	.+12     	; 0x1e70 <LoopHighOut1>

00001e64 <LoopHigh>:
LoopHigh:
	call    us_delay	// 		16	16
    1e64:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <us_delay>
	dec 	YL			// 		1	1
    1e68:	ca 95       	dec	r28
	breq	LoopHighOut2// 		2	1/2
    1e6a:	09 f0       	breq	.+2      	; 0x1e6e <LoopHighOut2>
	rjmp	LoopHigh	// 			2
    1e6c:	fb cf       	rjmp	.-10     	; 0x1e64 <LoopHigh>

00001e6e <LoopHighOut2>:
LoopHighOut2:
	rjmp .+0			// 		2	2
    1e6e:	00 c0       	rjmp	.+0      	; 0x1e70 <LoopHighOut1>

00001e70 <LoopHighOut1>:
LoopHighOut1:
	nop					// 1	1	1
    1e70:	00 00       	nop
    ret					// 4	4	4
    1e72:	08 95       	ret

00001e74 <DelayLow>:
; regardless of the value of r25
;
;*************************************************************************

DelayLow:				// (0)	(1)	(2+) each extra is +20
	mov		YL,r25		// 1	1	
    1e74:	c9 2f       	mov	r28, r25
	andi	YL,0x07	
    1e76:	c7 70       	andi	r28, 0x07	; 7
	breq	LoopLowOut1	// 2	1	1
    1e78:	31 f0       	breq	.+12     	; 0x1e86 <LoopLowOut1>

00001e7a <LoopLow>:
LoopLow:
	call    us_delay	//		16	16
    1e7a:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <us_delay>
	dec 	YL			//		1	1
    1e7e:	ca 95       	dec	r28
	breq	LoopLowOut2	//		2	1/2
    1e80:	09 f0       	breq	.+2      	; 0x1e84 <LoopLowOut2>
	rjmp	LoopLow		//			2
    1e82:	fb cf       	rjmp	.-10     	; 0x1e7a <LoopLow>

00001e84 <LoopLowOut2>:
LoopLowOut2:
	rjmp .+0			// 		2	2
    1e84:	00 c0       	rjmp	.+0      	; 0x1e86 <LoopLowOut1>

00001e86 <LoopLowOut1>:
LoopLowOut1:
    ret					// 4	4	4
    1e86:	08 95       	ret

00001e88 <get_raw_accs>:
//***************************************************************
// Fill accADC with RPY data appropriate to the board orientation
//***************************************************************

void get_raw_accs(void)
{
    1e88:	cf 93       	push	r28
    1e8a:	df 93       	push	r29
    1e8c:	cd b7       	in	r28, 0x3d	; 61
    1e8e:	de b7       	in	r29, 0x3e	; 62
    1e90:	2c 97       	sbiw	r28, 0x0c	; 12
    1e92:	0f b6       	in	r0, 0x3f	; 63
    1e94:	f8 94       	cli
    1e96:	de bf       	out	0x3e, r29	; 62
    1e98:	0f be       	out	0x3f, r0	; 63
    1e9a:	cd bf       	out	0x3d, r28	; 61
	// Get data from MPU6050
	uint8_t Accs[6];
	int16_t temp1, temp2;

	// Get the i2c data from the MPU6050
	readI2CbyteArray(MPU60X0_DEFAULT_ADDRESS,MPU60X0_RA_ACCEL_XOUT_H,(uint8_t *)Accs,6);
    1e9c:	26 e0       	ldi	r18, 0x06	; 6
    1e9e:	ae 01       	movw	r20, r28
    1ea0:	4f 5f       	subi	r20, 0xFF	; 255
    1ea2:	5f 4f       	sbci	r21, 0xFF	; 255
    1ea4:	6b e3       	ldi	r22, 0x3B	; 59
    1ea6:	80 ed       	ldi	r24, 0xD0	; 208
    1ea8:	0e 94 7f 25 	call	0x4afe	; 0x4afe <readI2CbyteArray>

	// Reassemble data into accADC array and down sample to reduce resolution and noise
	// This notation is true to the chip, but not the board orientation

	temp1 = Accs[0] << 8;					// Accel X
    1eac:	89 81       	ldd	r24, Y+1	; 0x01
    1eae:	90 e0       	ldi	r25, 0x00	; 0
    1eb0:	98 2f       	mov	r25, r24
    1eb2:	88 27       	eor	r24, r24
	temp2 = Accs[1];
    1eb4:	2a 81       	ldd	r18, Y+2	; 0x02
	RawADC[ROLL] = (temp1 + temp2) >> 6;
    1eb6:	82 0f       	add	r24, r18
    1eb8:	91 1d       	adc	r25, r1
    1eba:	36 e0       	ldi	r19, 0x06	; 6
    1ebc:	95 95       	asr	r25
    1ebe:	87 95       	ror	r24
    1ec0:	3a 95       	dec	r19
    1ec2:	e1 f7       	brne	.-8      	; 0x1ebc <get_raw_accs+0x34>
    1ec4:	98 87       	std	Y+8, r25	; 0x08
    1ec6:	8f 83       	std	Y+7, r24	; 0x07

	temp1 = Accs[2] << 8;					// Accel Y
    1ec8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eca:	90 e0       	ldi	r25, 0x00	; 0
    1ecc:	98 2f       	mov	r25, r24
    1ece:	88 27       	eor	r24, r24
	temp2 = Accs[3];
    1ed0:	2c 81       	ldd	r18, Y+4	; 0x04
	RawADC[PITCH] = -((temp1 + temp2) >> 6);
    1ed2:	82 0f       	add	r24, r18
    1ed4:	91 1d       	adc	r25, r1
    1ed6:	56 e0       	ldi	r21, 0x06	; 6
    1ed8:	95 95       	asr	r25
    1eda:	87 95       	ror	r24
    1edc:	5a 95       	dec	r21
    1ede:	e1 f7       	brne	.-8      	; 0x1ed8 <get_raw_accs+0x50>
    1ee0:	91 95       	neg	r25
    1ee2:	81 95       	neg	r24
    1ee4:	91 09       	sbc	r25, r1
    1ee6:	9a 87       	std	Y+10, r25	; 0x0a
    1ee8:	89 87       	std	Y+9, r24	; 0x09

	temp1 = Accs[4] << 8;					// Accel Z
    1eea:	8d 81       	ldd	r24, Y+5	; 0x05
    1eec:	90 e0       	ldi	r25, 0x00	; 0
    1eee:	98 2f       	mov	r25, r24
    1ef0:	88 27       	eor	r24, r24
	temp2 = Accs[5];
    1ef2:	2e 81       	ldd	r18, Y+6	; 0x06
	RawADC[YAW] = (temp1 + temp2) >> 6;
    1ef4:	82 0f       	add	r24, r18
    1ef6:	91 1d       	adc	r25, r1
    1ef8:	76 e0       	ldi	r23, 0x06	; 6
    1efa:	95 95       	asr	r25
    1efc:	87 95       	ror	r24
    1efe:	7a 95       	dec	r23
    1f00:	e1 f7       	brne	.-8      	; 0x1efa <get_raw_accs+0x72>
    1f02:	9c 87       	std	Y+12, r25	; 0x0c
    1f04:	8b 87       	std	Y+11, r24	; 0x0b

	// Reorient the data as per the board orientation	
	for (i=0; i<NUMBEROFAXIS; i++)
	{
		// Rearrange the sensors
		accADC[i] = RawADC[(int8_t)pgm_read_byte(&ACC_RPY_Order[Config.Orientation][i])];
    1f06:	20 91 31 06 	lds	r18, 0x0631
    1f0a:	ac e3       	ldi	r26, 0x3C	; 60
    1f0c:	b5 e0       	ldi	r27, 0x05	; 5
    1f0e:	43 e0       	ldi	r20, 0x03	; 3
    1f10:	24 02       	muls	r18, r20
    1f12:	90 01       	movw	r18, r0
    1f14:	11 24       	eor	r1, r1
    1f16:	80 e0       	ldi	r24, 0x00	; 0
    1f18:	90 e0       	ldi	r25, 0x00	; 0
    1f1a:	24 52       	subi	r18, 0x24	; 36
    1f1c:	3f 4f       	sbci	r19, 0xFF	; 255
    1f1e:	f9 01       	movw	r30, r18
    1f20:	e8 0f       	add	r30, r24
    1f22:	f9 1f       	adc	r31, r25
    1f24:	e4 91       	lpm	r30, Z
    1f26:	ee 0f       	add	r30, r30
    1f28:	ff 0b       	sbc	r31, r31
    1f2a:	41 e0       	ldi	r20, 0x01	; 1
    1f2c:	50 e0       	ldi	r21, 0x00	; 0
    1f2e:	4c 0f       	add	r20, r28
    1f30:	5d 1f       	adc	r21, r29
    1f32:	e4 0f       	add	r30, r20
    1f34:	f5 1f       	adc	r31, r21
    1f36:	46 81       	ldd	r20, Z+6	; 0x06
    1f38:	57 81       	ldd	r21, Z+7	; 0x07
    1f3a:	4d 93       	st	X+, r20
    1f3c:	5d 93       	st	X+, r21
    1f3e:	01 96       	adiw	r24, 0x01	; 1
	temp1 = Accs[4] << 8;					// Accel Z
	temp2 = Accs[5];
	RawADC[YAW] = (temp1 + temp2) >> 6;

	// Reorient the data as per the board orientation	
	for (i=0; i<NUMBEROFAXIS; i++)
    1f40:	83 30       	cpi	r24, 0x03	; 3
    1f42:	91 05       	cpc	r25, r1
    1f44:	61 f7       	brne	.-40     	; 0x1f1e <get_raw_accs+0x96>
	{
		// Rearrange the sensors
		accADC[i] = RawADC[(int8_t)pgm_read_byte(&ACC_RPY_Order[Config.Orientation][i])];
	}
}
    1f46:	2c 96       	adiw	r28, 0x0c	; 12
    1f48:	0f b6       	in	r0, 0x3f	; 63
    1f4a:	f8 94       	cli
    1f4c:	de bf       	out	0x3e, r29	; 62
    1f4e:	0f be       	out	0x3f, r0	; 63
    1f50:	cd bf       	out	0x3d, r28	; 61
    1f52:	df 91       	pop	r29
    1f54:	cf 91       	pop	r28
    1f56:	08 95       	ret

00001f58 <ReadAcc>:

int16_t accADC[NUMBEROFAXIS];	// Holds Acc ADC values - always in RPY order
int16_t accVert = 0;			// Holds the level-zeroed Z-acc value. Used for height damping in hover only.

void ReadAcc()
{
    1f58:	1f 93       	push	r17
    1f5a:	cf 93       	push	r28
    1f5c:	df 93       	push	r29
	uint8_t i;

	get_raw_accs();				// Updates accADC[] (RPY)
    1f5e:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <get_raw_accs>

	// Use default Config.AccZero for Acc-Z if inverse calibration not done yet
	// Actual zero is held in Config.AccZeroNormZ waiting for inv calibration
	if (!(Config.Main_flags & (1 << inv_cal_done)))
    1f62:	80 91 b0 07 	lds	r24, 0x07B0
    1f66:	80 fd       	sbrc	r24, 0
    1f68:	05 c0       	rjmp	.+10     	; 0x1f74 <ReadAcc+0x1c>
	{
		Config.AccZero[YAW] = 0;
    1f6a:	10 92 98 07 	sts	0x0798, r1
    1f6e:	10 92 97 07 	sts	0x0797, r1
    1f72:	0e c0       	rjmp	.+28     	; 0x1f90 <ReadAcc+0x38>

	// If inverted cal done, Config.AccZeroNormZ and Config.AccZeroDiff have
	// valid values
	else
	{
		Config.AccZero[YAW] = Config.AccZeroNormZ - Config.AccZeroDiff;
    1f74:	80 91 99 07 	lds	r24, 0x0799
    1f78:	90 91 9a 07 	lds	r25, 0x079A
    1f7c:	20 91 9d 07 	lds	r18, 0x079D
    1f80:	30 91 9e 07 	lds	r19, 0x079E
    1f84:	82 1b       	sub	r24, r18
    1f86:	93 0b       	sbc	r25, r19
    1f88:	90 93 98 07 	sts	0x0798, r25
    1f8c:	80 93 97 07 	sts	0x0797, r24
	{
		// Remove offsets from acc outputs
		accADC[i] -= Config.AccZero[i];

		// Change polarity
		accADC[i] *= (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation][i]);
    1f90:	20 91 31 06 	lds	r18, 0x0631
    1f94:	c3 e9       	ldi	r28, 0x93	; 147
    1f96:	d7 e0       	ldi	r29, 0x07	; 7
    1f98:	ac e3       	ldi	r26, 0x3C	; 60
    1f9a:	b5 e0       	ldi	r27, 0x05	; 5
    1f9c:	83 e0       	ldi	r24, 0x03	; 3
    1f9e:	28 02       	muls	r18, r24
    1fa0:	90 01       	movw	r18, r0
    1fa2:	11 24       	eor	r1, r1
    1fa4:	80 e0       	ldi	r24, 0x00	; 0
    1fa6:	90 e0       	ldi	r25, 0x00	; 0
    1fa8:	26 53       	subi	r18, 0x36	; 54
    1faa:	3f 4f       	sbci	r19, 0xFF	; 255
	}

	for (i=0; i < NUMBEROFAXIS; i++)
	{
		// Remove offsets from acc outputs
		accADC[i] -= Config.AccZero[i];
    1fac:	69 91       	ld	r22, Y+
    1fae:	79 91       	ld	r23, Y+
    1fb0:	f9 01       	movw	r30, r18
    1fb2:	e8 0f       	add	r30, r24
    1fb4:	f9 1f       	adc	r31, r25

		// Change polarity
		accADC[i] *= (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation][i]);
    1fb6:	14 91       	lpm	r17, Z
	}

	for (i=0; i < NUMBEROFAXIS; i++)
	{
		// Remove offsets from acc outputs
		accADC[i] -= Config.AccZero[i];
    1fb8:	4d 91       	ld	r20, X+
    1fba:	5c 91       	ld	r21, X
    1fbc:	11 97       	sbiw	r26, 0x01	; 1
    1fbe:	46 1b       	sub	r20, r22
    1fc0:	57 0b       	sbc	r21, r23

		// Change polarity
		accADC[i] *= (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation][i]);
    1fc2:	14 03       	mulsu	r17, r20
    1fc4:	b0 01       	movw	r22, r0
    1fc6:	15 9f       	mul	r17, r21
    1fc8:	70 0d       	add	r23, r0
    1fca:	11 24       	eor	r1, r1
    1fcc:	6d 93       	st	X+, r22
    1fce:	7d 93       	st	X+, r23
    1fd0:	01 96       	adiw	r24, 0x01	; 1
	else
	{
		Config.AccZero[YAW] = Config.AccZeroNormZ - Config.AccZeroDiff;
	}

	for (i=0; i < NUMBEROFAXIS; i++)
    1fd2:	83 30       	cpi	r24, 0x03	; 3
    1fd4:	91 05       	cpc	r25, r1
    1fd6:	51 f7       	brne	.-44     	; 0x1fac <ReadAcc+0x54>
	}

	// Recalculate current accVert using filtered acc value
	// Note that AccSmooth[YAW] is already zeroed around 1G so we have to re-add 
	// the zero back here so that Config.AccZeroNormZ subtracts the correct amount
	 accVert = accSmooth[YAW] + (Config.AccZeroNormZ - Config.AccZero[YAW]);
    1fd8:	60 91 99 07 	lds	r22, 0x0799
    1fdc:	70 91 9a 07 	lds	r23, 0x079A
    1fe0:	80 91 97 07 	lds	r24, 0x0797
    1fe4:	90 91 98 07 	lds	r25, 0x0798
    1fe8:	68 1b       	sub	r22, r24
    1fea:	79 0b       	sbc	r23, r25
    1fec:	88 27       	eor	r24, r24
    1fee:	77 fd       	sbrc	r23, 7
    1ff0:	80 95       	com	r24
    1ff2:	98 2f       	mov	r25, r24
    1ff4:	0e 94 34 48 	call	0x9068	; 0x9068 <__floatsisf>
    1ff8:	20 91 99 05 	lds	r18, 0x0599
    1ffc:	30 91 9a 05 	lds	r19, 0x059A
    2000:	40 91 9b 05 	lds	r20, 0x059B
    2004:	50 91 9c 05 	lds	r21, 0x059C
    2008:	0e 94 31 47 	call	0x8e62	; 0x8e62 <__addsf3>
    200c:	0e 94 01 48 	call	0x9002	; 0x9002 <__fixsfsi>
    2010:	70 93 15 05 	sts	0x0515, r23
    2014:	60 93 14 05 	sts	0x0514, r22
}
    2018:	df 91       	pop	r29
    201a:	cf 91       	pop	r28
    201c:	1f 91       	pop	r17
    201e:	08 95       	ret

00002020 <CalibrateAcc>:
//***************************************************************
// Calibration routines
//***************************************************************

void CalibrateAcc(int8_t type)
{
    2020:	1f 93       	push	r17
    2022:	cf 93       	push	r28
    2024:	df 93       	push	r29
    2026:	00 d0       	rcall	.+0      	; 0x2028 <CalibrateAcc+0x8>
    2028:	00 d0       	rcall	.+0      	; 0x202a <CalibrateAcc+0xa>
    202a:	00 d0       	rcall	.+0      	; 0x202c <CalibrateAcc+0xc>
    202c:	cd b7       	in	r28, 0x3d	; 61
    202e:	de b7       	in	r29, 0x3e	; 62
	uint8_t i;
	int16_t accZero[NUMBEROFAXIS] = {0,0,0};	// Used for calibrating Accs on ground
    2030:	1a 82       	std	Y+2, r1	; 0x02
    2032:	19 82       	std	Y+1, r1	; 0x01
    2034:	1c 82       	std	Y+4, r1	; 0x04
    2036:	1b 82       	std	Y+3, r1	; 0x03
    2038:	1e 82       	std	Y+6, r1	; 0x06
    203a:	1d 82       	std	Y+5, r1	; 0x05

	// Calibrate acc
	if (type == NORMAL)
    203c:	81 11       	cpse	r24, r1
    203e:	72 c0       	rjmp	.+228    	; 0x2124 <CalibrateAcc+0x104>
    2040:	10 e2       	ldi	r17, 0x20	; 32
	{
		// Get average zero value (over 32 readings)
		for (i = 0; i < 32; i++)
		{
			get_raw_accs();						// Updates accADC[] with signals reoriented into (RPY)
    2042:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <get_raw_accs>

			accZero[ROLL] += accADC[ROLL];
    2046:	89 81       	ldd	r24, Y+1	; 0x01
    2048:	9a 81       	ldd	r25, Y+2	; 0x02
    204a:	20 91 3c 05 	lds	r18, 0x053C
    204e:	30 91 3d 05 	lds	r19, 0x053D
    2052:	82 0f       	add	r24, r18
    2054:	93 1f       	adc	r25, r19
    2056:	9a 83       	std	Y+2, r25	; 0x02
    2058:	89 83       	std	Y+1, r24	; 0x01
			accZero[PITCH] += accADC[PITCH];						
    205a:	8b 81       	ldd	r24, Y+3	; 0x03
    205c:	9c 81       	ldd	r25, Y+4	; 0x04
    205e:	20 91 3e 05 	lds	r18, 0x053E
    2062:	30 91 3f 05 	lds	r19, 0x053F
    2066:	82 0f       	add	r24, r18
    2068:	93 1f       	adc	r25, r19
    206a:	9c 83       	std	Y+4, r25	; 0x04
    206c:	8b 83       	std	Y+3, r24	; 0x03
			accZero[YAW] += accADC[YAW];		
    206e:	8d 81       	ldd	r24, Y+5	; 0x05
    2070:	9e 81       	ldd	r25, Y+6	; 0x06
    2072:	20 91 40 05 	lds	r18, 0x0540
    2076:	30 91 41 05 	lds	r19, 0x0541
    207a:	82 0f       	add	r24, r18
    207c:	93 1f       	adc	r25, r19
    207e:	9e 83       	std	Y+6, r25	; 0x06
    2080:	8d 83       	std	Y+5, r24	; 0x05
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2082:	8f e4       	ldi	r24, 0x4F	; 79
    2084:	93 ec       	ldi	r25, 0xC3	; 195
    2086:	01 97       	sbiw	r24, 0x01	; 1
    2088:	f1 f7       	brne	.-4      	; 0x2086 <CalibrateAcc+0x66>
    208a:	00 c0       	rjmp	.+0      	; 0x208c <CalibrateAcc+0x6c>
    208c:	00 00       	nop
    208e:	11 50       	subi	r17, 0x01	; 1

	// Calibrate acc
	if (type == NORMAL)
	{
		// Get average zero value (over 32 readings)
		for (i = 0; i < 32; i++)
    2090:	c1 f6       	brne	.-80     	; 0x2042 <CalibrateAcc+0x22>
    2092:	fe 01       	movw	r30, r28
    2094:	31 96       	adiw	r30, 0x01	; 1
    2096:	9e 01       	movw	r18, r28
    2098:	29 5f       	subi	r18, 0xF9	; 249
    209a:	3f 4f       	sbci	r19, 0xFF	; 255
		}

		for (i = 0; i < NUMBEROFAXIS; i++)		// For selected axis in RPY order
		{
			// Round and divide by 32
			accZero[i] = ((accZero[i] + 16) >> 5);
    209c:	80 81       	ld	r24, Z
    209e:	91 81       	ldd	r25, Z+1	; 0x01
    20a0:	40 96       	adiw	r24, 0x10	; 16
    20a2:	45 e0       	ldi	r20, 0x05	; 5
    20a4:	95 95       	asr	r25
    20a6:	87 95       	ror	r24
    20a8:	4a 95       	dec	r20
    20aa:	e1 f7       	brne	.-8      	; 0x20a4 <CalibrateAcc+0x84>
    20ac:	81 93       	st	Z+, r24
    20ae:	91 93       	st	Z+, r25
			accZero[YAW] += accADC[YAW];		

			_delay_ms(10);						// Get a better acc average over time
		}

		for (i = 0; i < NUMBEROFAXIS; i++)		// For selected axis in RPY order
    20b0:	e2 17       	cp	r30, r18
    20b2:	f3 07       	cpc	r31, r19
    20b4:	99 f7       	brne	.-26     	; 0x209c <CalibrateAcc+0x7c>
			// Round and divide by 32
			accZero[i] = ((accZero[i] + 16) >> 5);
		}

		// Reset zeros to normal cal
		Config.AccZero[ROLL] = accZero[ROLL]; 
    20b6:	89 81       	ldd	r24, Y+1	; 0x01
    20b8:	9a 81       	ldd	r25, Y+2	; 0x02
    20ba:	90 93 94 07 	sts	0x0794, r25
    20be:	80 93 93 07 	sts	0x0793, r24
		Config.AccZero[PITCH] = accZero[PITCH]; 
    20c2:	8b 81       	ldd	r24, Y+3	; 0x03
    20c4:	9c 81       	ldd	r25, Y+4	; 0x04
    20c6:	90 93 96 07 	sts	0x0796, r25
    20ca:	80 93 95 07 	sts	0x0795, r24
		Config.AccZeroNormZ = accZero[YAW]; 
			
		// Correct polarity of AccZeroNormZ as per orientation
		Config.AccZeroNormZ *= (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation][YAW]);
    20ce:	80 91 31 06 	lds	r24, 0x0631
    20d2:	99 27       	eor	r25, r25
    20d4:	87 fd       	sbrc	r24, 7
    20d6:	90 95       	com	r25
    20d8:	fc 01       	movw	r30, r24
    20da:	ee 0f       	add	r30, r30
    20dc:	ff 1f       	adc	r31, r31
    20de:	e8 0f       	add	r30, r24
    20e0:	f9 1f       	adc	r31, r25
    20e2:	e4 53       	subi	r30, 0x34	; 52
    20e4:	ff 4f       	sbci	r31, 0xFF	; 255
    20e6:	44 91       	lpm	r20, Z
    20e8:	2d 81       	ldd	r18, Y+5	; 0x05
    20ea:	3e 81       	ldd	r19, Y+6	; 0x06
    20ec:	42 03       	mulsu	r20, r18
    20ee:	c0 01       	movw	r24, r0
    20f0:	43 9f       	mul	r20, r19
    20f2:	90 0d       	add	r25, r0
    20f4:	11 24       	eor	r1, r1
    20f6:	90 93 9a 07 	sts	0x079A, r25
    20fa:	80 93 99 07 	sts	0x0799, r24
			
		// Flag that normal cal done
		Config.Main_flags |= (1 << normal_cal_done);
    20fe:	80 91 b0 07 	lds	r24, 0x07B0
    2102:	82 60       	ori	r24, 0x02	; 2
    2104:	80 93 b0 07 	sts	0x07B0, r24
	
		// Save new calibration and flash LED for confirmation
		Save_Config_to_EEPROM();
    2108:	0e 94 bc 16 	call	0x2d78	; 0x2d78 <Save_Config_to_EEPROM>
		LED1 = 1;
    210c:	2b 9a       	sbi	0x05, 3	; 5
    210e:	9f e7       	ldi	r25, 0x7F	; 127
    2110:	24 e8       	ldi	r18, 0x84	; 132
    2112:	4e e1       	ldi	r20, 0x1E	; 30
    2114:	91 50       	subi	r25, 0x01	; 1
    2116:	20 40       	sbci	r18, 0x00	; 0
    2118:	40 40       	sbci	r20, 0x00	; 0
    211a:	e1 f7       	brne	.-8      	; 0x2114 <CalibrateAcc+0xf4>
    211c:	00 c0       	rjmp	.+0      	; 0x211e <CalibrateAcc+0xfe>
    211e:	00 00       	nop
		_delay_ms(500);
		LED1 = 0;
    2120:	2b 98       	cbi	0x05, 3	; 5
    2122:	76 c0       	rjmp	.+236    	; 0x2210 <CalibrateAcc+0x1f0>

	else
	// Calibrate inverted acc
	{
		// Only update the inverted cal value if preceded by a normal calibration
		if (Config.Main_flags & (1 << normal_cal_done))
    2124:	80 91 b0 07 	lds	r24, 0x07B0
    2128:	81 ff       	sbrs	r24, 1
    212a:	72 c0       	rjmp	.+228    	; 0x2210 <CalibrateAcc+0x1f0>
		{
			// Get average zero value (over 32 readings)
			Config.AccZeroInvZ = 0;
    212c:	10 92 9c 07 	sts	0x079C, r1
    2130:	10 92 9b 07 	sts	0x079B, r1
    2134:	10 e2       	ldi	r17, 0x20	; 32

			for (i = 0; i < 32; i++)
			{
				get_raw_accs();					// Updates gyroADC[] with reoriented vales
    2136:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <get_raw_accs>
				Config.AccZeroInvZ += accADC[YAW];		
    213a:	80 91 9b 07 	lds	r24, 0x079B
    213e:	90 91 9c 07 	lds	r25, 0x079C
    2142:	20 91 40 05 	lds	r18, 0x0540
    2146:	30 91 41 05 	lds	r19, 0x0541
    214a:	82 0f       	add	r24, r18
    214c:	93 1f       	adc	r25, r19
    214e:	90 93 9c 07 	sts	0x079C, r25
    2152:	80 93 9b 07 	sts	0x079B, r24
    2156:	8f e4       	ldi	r24, 0x4F	; 79
    2158:	93 ec       	ldi	r25, 0xC3	; 195
    215a:	01 97       	sbiw	r24, 0x01	; 1
    215c:	f1 f7       	brne	.-4      	; 0x215a <CalibrateAcc+0x13a>
    215e:	00 c0       	rjmp	.+0      	; 0x2160 <CalibrateAcc+0x140>
    2160:	00 00       	nop
    2162:	11 50       	subi	r17, 0x01	; 1
		if (Config.Main_flags & (1 << normal_cal_done))
		{
			// Get average zero value (over 32 readings)
			Config.AccZeroInvZ = 0;

			for (i = 0; i < 32; i++)
    2164:	41 f7       	brne	.-48     	; 0x2136 <CalibrateAcc+0x116>

			// Round and divide by 32
			Config.AccZeroInvZ = ((Config.AccZeroInvZ + 16) >> 5);		// Inverted zero point
			
			// Correct polarity of AccZeroInvZ as per orientation
			Config.AccZeroInvZ *= (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation][YAW]);
    2166:	80 91 31 06 	lds	r24, 0x0631
    216a:	99 27       	eor	r25, r25
    216c:	87 fd       	sbrc	r24, 7
    216e:	90 95       	com	r25
    2170:	fc 01       	movw	r30, r24
    2172:	ee 0f       	add	r30, r30
    2174:	ff 1f       	adc	r31, r31
    2176:	e8 0f       	add	r30, r24
    2178:	f9 1f       	adc	r31, r25
    217a:	e4 53       	subi	r30, 0x34	; 52
    217c:	ff 4f       	sbci	r31, 0xFF	; 255
    217e:	44 91       	lpm	r20, Z
				Config.AccZeroInvZ += accADC[YAW];		
				_delay_ms(10);					// Get a better acc average over time
			}

			// Round and divide by 32
			Config.AccZeroInvZ = ((Config.AccZeroInvZ + 16) >> 5);		// Inverted zero point
    2180:	20 91 9b 07 	lds	r18, 0x079B
    2184:	30 91 9c 07 	lds	r19, 0x079C
    2188:	20 5f       	subi	r18, 0xF0	; 240
    218a:	3f 4f       	sbci	r19, 0xFF	; 255
    218c:	b5 e0       	ldi	r27, 0x05	; 5
    218e:	35 95       	asr	r19
    2190:	27 95       	ror	r18
    2192:	ba 95       	dec	r27
    2194:	e1 f7       	brne	.-8      	; 0x218e <CalibrateAcc+0x16e>
			
			// Correct polarity of AccZeroInvZ as per orientation
			Config.AccZeroInvZ *= (int8_t)pgm_read_byte(&Acc_Pol[Config.Orientation][YAW]);
    2196:	42 03       	mulsu	r20, r18
    2198:	c0 01       	movw	r24, r0
    219a:	43 9f       	mul	r20, r19
    219c:	90 0d       	add	r25, r0
    219e:	11 24       	eor	r1, r1
    21a0:	90 93 9c 07 	sts	0x079C, r25
    21a4:	80 93 9b 07 	sts	0x079B, r24

			// Test if board is actually inverted relative to board orientation.
			if (Config.AccZeroInvZ < 0)
    21a8:	97 ff       	sbrs	r25, 7
    21aa:	32 c0       	rjmp	.+100    	; 0x2210 <CalibrateAcc+0x1f0>
			{

				// Reset zero to halfway between min and max Z
				Config.AccZeroDiff = ((Config.AccZeroNormZ - Config.AccZeroInvZ) >> 1);
    21ac:	20 91 99 07 	lds	r18, 0x0799
    21b0:	30 91 9a 07 	lds	r19, 0x079A
    21b4:	a9 01       	movw	r20, r18
    21b6:	48 1b       	sub	r20, r24
    21b8:	59 0b       	sbc	r21, r25
    21ba:	ca 01       	movw	r24, r20
    21bc:	95 95       	asr	r25
    21be:	87 95       	ror	r24
    21c0:	90 93 9e 07 	sts	0x079E, r25
    21c4:	80 93 9d 07 	sts	0x079D, r24
				Config.AccZero[YAW] = Config.AccZeroNormZ - Config.AccZeroDiff; // Config.AccZero[YAW] is now valid to use
    21c8:	28 1b       	sub	r18, r24
    21ca:	39 0b       	sbc	r19, r25
    21cc:	30 93 98 07 	sts	0x0798, r19
    21d0:	20 93 97 07 	sts	0x0797, r18

				// Flag that inverted cal done
				Config.Main_flags |= (1 << inv_cal_done);
    21d4:	80 91 b0 07 	lds	r24, 0x07B0
    21d8:	81 60       	ori	r24, 0x01	; 1
    21da:	80 93 b0 07 	sts	0x07B0, r24

				// Save new calibration and flash LED for confirmation
				Save_Config_to_EEPROM();
    21de:	0e 94 bc 16 	call	0x2d78	; 0x2d78 <Save_Config_to_EEPROM>
				LED1 = 1;
    21e2:	2b 9a       	sbi	0x05, 3	; 5
    21e4:	5f e7       	ldi	r21, 0x7F	; 127
    21e6:	84 e8       	ldi	r24, 0x84	; 132
    21e8:	9e e1       	ldi	r25, 0x1E	; 30
    21ea:	51 50       	subi	r21, 0x01	; 1
    21ec:	80 40       	sbci	r24, 0x00	; 0
    21ee:	90 40       	sbci	r25, 0x00	; 0
    21f0:	e1 f7       	brne	.-8      	; 0x21ea <CalibrateAcc+0x1ca>
    21f2:	00 c0       	rjmp	.+0      	; 0x21f4 <CalibrateAcc+0x1d4>
    21f4:	00 00       	nop
				_delay_ms(500);
				LED1 = 0;
    21f6:	2b 98       	cbi	0x05, 3	; 5
				
				// Chirp as well. The LED might be hard to see.
				menu_beep(5);
    21f8:	85 e0       	ldi	r24, 0x05	; 5
			}
		}
	}
}
    21fa:	26 96       	adiw	r28, 0x06	; 6
    21fc:	0f b6       	in	r0, 0x3f	; 63
    21fe:	f8 94       	cli
    2200:	de bf       	out	0x3e, r29	; 62
    2202:	0f be       	out	0x3f, r0	; 63
    2204:	cd bf       	out	0x3d, r28	; 61
    2206:	df 91       	pop	r29
    2208:	cf 91       	pop	r28
    220a:	1f 91       	pop	r17
				LED1 = 1;
				_delay_ms(500);
				LED1 = 0;
				
				// Chirp as well. The LED might be hard to see.
				menu_beep(5);
    220c:	0c 94 d2 31 	jmp	0x63a4	; 0x63a4 <menu_beep>
			}
		}
	}
}
    2210:	26 96       	adiw	r28, 0x06	; 6
    2212:	0f b6       	in	r0, 0x3f	; 63
    2214:	f8 94       	cli
    2216:	de bf       	out	0x3e, r29	; 62
    2218:	0f be       	out	0x3f, r0	; 63
    221a:	cd bf       	out	0x3d, r28	; 61
    221c:	df 91       	pop	r29
    221e:	cf 91       	pop	r28
    2220:	1f 91       	pop	r17
    2222:	08 95       	ret

00002224 <init_i2c_accs>:
// Set up the MPU6050 (Acc)
//***************************************************************

void init_i2c_accs(void)
{
	writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_PWR_MGMT_1, 0x01); // Gyro X clock, awake
    2224:	41 e0       	ldi	r20, 0x01	; 1
    2226:	6b e6       	ldi	r22, 0x6B	; 107
    2228:	80 ed       	ldi	r24, 0xD0	; 208
    222a:	0e 94 68 25 	call	0x4ad0	; 0x4ad0 <writeI2Cbyte>
	writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_ACCEL_CONFIG, ACCFS4G); // 4G full scale
    222e:	48 e0       	ldi	r20, 0x08	; 8
    2230:	6c e1       	ldi	r22, 0x1C	; 28
    2232:	80 ed       	ldi	r24, 0xD0	; 208
    2234:	0c 94 68 25 	jmp	0x4ad0	; 0x4ad0 <writeI2Cbyte>

00002238 <Init_ADC>:
//***********************************************************

void Init_ADC(void)
{
	// Digital Input Disable Register - ADC0~7 Digital Input Disable
	DIDR0 	= (1<<ADC0D)|(1<<ADC1D)|(1<<ADC2D)|(1<<ADC3D)|(1<<ADC4D)|(1<<ADC5D)|(1<<ADC6D)|(1<<ADC7D);
    2238:	8f ef       	ldi	r24, 0xFF	; 255
    223a:	80 93 7e 00 	sts	0x007E, r24
	
	// ADC Control and Status Register B - ADTS2:0
	ADCSRB 	= 0x00;
    223e:	10 92 7b 00 	sts	0x007B, r1
    2242:	08 95       	ret

00002244 <read_adc>:
}

void read_adc(uint8_t channel)
{
	ADMUX	= channel;
    2244:	80 93 7c 00 	sts	0x007C, r24
	
	// ADEN, ADSC, ADPS1,2
	ADCSRA 	= (1<<ADEN)|(1<<ADSC)|(1<<ADPS1)|(1<<ADPS2);
    2248:	86 ec       	ldi	r24, 0xC6	; 198
    224a:	80 93 7a 00 	sts	0x007A, r24

	// Wait to complete. Result is in ADCW
	while (ADCSRA & (1 << ADSC));
    224e:	80 91 7a 00 	lds	r24, 0x007A
    2252:	86 fd       	sbrc	r24, 6
    2254:	fc cf       	rjmp	.-8      	; 0x224e <read_adc+0xa>
}
    2256:	08 95       	ret

00002258 <Display_balance>:
//************************************************************
// Code
//************************************************************

void Display_balance(void)
{
    2258:	cf 92       	push	r12
    225a:	df 92       	push	r13
    225c:	ef 92       	push	r14
    225e:	0f 93       	push	r16
    2260:	cf 93       	push	r28
    2262:	df 93       	push	r29
			y_pos = accSmooth[ROLL] + 64;

			if (x_pos < 0) x_pos = 0;
			if (x_pos > 64) x_pos = 64;
			if (y_pos < 0) y_pos = 0;
			if (y_pos > 128) y_pos = 128;
    2264:	cb e0       	ldi	r28, 0x0B	; 11
    2266:	d0 e0       	ldi	r29, 0x00	; 0

	#ifdef KK2Mini
	st7565_set_brightness(28);
	#endif

	while(BUTTON1 != 0)
    2268:	1f 9b       	sbis	0x03, 7	; 3
    226a:	7f c0       	rjmp	.+254    	; 0x236a <Display_balance+0x112>
	{
		// Read accs
		ReadAcc();
    226c:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <ReadAcc>

		// Refresh accSmooth values
		// Fake the IMU period as accSmooth doesn't need that
		imu_update(0);
    2270:	60 e0       	ldi	r22, 0x00	; 0
    2272:	70 e0       	ldi	r23, 0x00	; 0
    2274:	cb 01       	movw	r24, r22
    2276:	0e 94 e0 27 	call	0x4fc0	; 0x4fc0 <imu_update>
    227a:	21 97       	sbiw	r28, 0x01	; 1

		count++;
		
		// Only display once per 10 loops
		if (count > 10)
    227c:	20 97       	sbiw	r28, 0x00	; 0
    227e:	a1 f7       	brne	.-24     	; 0x2268 <Display_balance+0x10>
		{
			// Convert acc signal to a pixel position
			x_pos = accSmooth[PITCH] + 32;
    2280:	20 e0       	ldi	r18, 0x00	; 0
    2282:	30 e0       	ldi	r19, 0x00	; 0
    2284:	40 e0       	ldi	r20, 0x00	; 0
    2286:	52 e4       	ldi	r21, 0x42	; 66
    2288:	60 91 95 05 	lds	r22, 0x0595
    228c:	70 91 96 05 	lds	r23, 0x0596
    2290:	80 91 97 05 	lds	r24, 0x0597
    2294:	90 91 98 05 	lds	r25, 0x0598
    2298:	0e 94 31 47 	call	0x8e62	; 0x8e62 <__addsf3>
    229c:	0e 94 01 48 	call	0x9002	; 0x9002 <__fixsfsi>
    22a0:	eb 01       	movw	r28, r22
			y_pos = accSmooth[ROLL] + 64;
    22a2:	20 e0       	ldi	r18, 0x00	; 0
    22a4:	30 e0       	ldi	r19, 0x00	; 0
    22a6:	40 e8       	ldi	r20, 0x80	; 128
    22a8:	52 e4       	ldi	r21, 0x42	; 66
    22aa:	60 91 91 05 	lds	r22, 0x0591
    22ae:	70 91 92 05 	lds	r23, 0x0592
    22b2:	80 91 93 05 	lds	r24, 0x0593
    22b6:	90 91 94 05 	lds	r25, 0x0594
    22ba:	0e 94 31 47 	call	0x8e62	; 0x8e62 <__addsf3>
    22be:	0e 94 01 48 	call	0x9002	; 0x9002 <__fixsfsi>
    22c2:	6b 01       	movw	r12, r22

			if (x_pos < 0) x_pos = 0;
    22c4:	d7 fd       	sbrc	r29, 7
    22c6:	06 c0       	rjmp	.+12     	; 0x22d4 <Display_balance+0x7c>
			if (x_pos > 64) x_pos = 64;
    22c8:	c1 34       	cpi	r28, 0x41	; 65
    22ca:	d1 05       	cpc	r29, r1
    22cc:	2c f0       	brlt	.+10     	; 0x22d8 <Display_balance+0x80>
    22ce:	c0 e4       	ldi	r28, 0x40	; 64
    22d0:	d0 e0       	ldi	r29, 0x00	; 0
    22d2:	02 c0       	rjmp	.+4      	; 0x22d8 <Display_balance+0x80>
		{
			// Convert acc signal to a pixel position
			x_pos = accSmooth[PITCH] + 32;
			y_pos = accSmooth[ROLL] + 64;

			if (x_pos < 0) x_pos = 0;
    22d4:	c0 e0       	ldi	r28, 0x00	; 0
    22d6:	d0 e0       	ldi	r29, 0x00	; 0
			if (x_pos > 64) x_pos = 64;
			if (y_pos < 0) y_pos = 0;
    22d8:	d7 fc       	sbrc	r13, 7
    22da:	08 c0       	rjmp	.+16     	; 0x22ec <Display_balance+0x94>
			if (y_pos > 128) y_pos = 128;
    22dc:	81 e8       	ldi	r24, 0x81	; 129
    22de:	c8 16       	cp	r12, r24
    22e0:	d1 04       	cpc	r13, r1
    22e2:	34 f0       	brlt	.+12     	; 0x22f0 <Display_balance+0x98>
    22e4:	80 e8       	ldi	r24, 0x80	; 128
    22e6:	c8 2e       	mov	r12, r24
    22e8:	d1 2c       	mov	r13, r1
    22ea:	02 c0       	rjmp	.+4      	; 0x22f0 <Display_balance+0x98>
			x_pos = accSmooth[PITCH] + 32;
			y_pos = accSmooth[ROLL] + 64;

			if (x_pos < 0) x_pos = 0;
			if (x_pos > 64) x_pos = 64;
			if (y_pos < 0) y_pos = 0;
    22ec:	c1 2c       	mov	r12, r1
    22ee:	d1 2c       	mov	r13, r1
			if (y_pos > 128) y_pos = 128;

			// Print bottom markers
			LCD_Display_Text(12, (const unsigned char*)Wingdings, 2, 55); 	// Left
    22f0:	27 e3       	ldi	r18, 0x37	; 55
    22f2:	30 e0       	ldi	r19, 0x00	; 0
    22f4:	42 e0       	ldi	r20, 0x02	; 2
    22f6:	50 e0       	ldi	r21, 0x00	; 0
    22f8:	67 e0       	ldi	r22, 0x07	; 7
    22fa:	71 e0       	ldi	r23, 0x01	; 1
    22fc:	8c e0       	ldi	r24, 0x0C	; 12
    22fe:	90 e0       	ldi	r25, 0x00	; 0
    2300:	0e 94 0a 23 	call	0x4614	; 0x4614 <LCD_Display_Text>

			// Draw balance meter
			drawrect(buffer, 0, 0, 128, 64, 1);		// Border
    2304:	ee 24       	eor	r14, r14
    2306:	e3 94       	inc	r14
    2308:	00 e4       	ldi	r16, 0x40	; 64
    230a:	20 e8       	ldi	r18, 0x80	; 128
    230c:	40 e0       	ldi	r20, 0x00	; 0
    230e:	60 e0       	ldi	r22, 0x00	; 0
    2310:	80 e0       	ldi	r24, 0x00	; 0
    2312:	91 e0       	ldi	r25, 0x01	; 1
    2314:	0e 94 27 22 	call	0x444e	; 0x444e <drawrect>
			drawrect(buffer, 54, 22, 21, 21, 1);	// Target
    2318:	05 e1       	ldi	r16, 0x15	; 21
    231a:	25 e1       	ldi	r18, 0x15	; 21
    231c:	46 e1       	ldi	r20, 0x16	; 22
    231e:	66 e3       	ldi	r22, 0x36	; 54
    2320:	80 e0       	ldi	r24, 0x00	; 0
    2322:	91 e0       	ldi	r25, 0x01	; 1
    2324:	0e 94 27 22 	call	0x444e	; 0x444e <drawrect>
			drawline(buffer, 64, 8, 64, 56, 1); 	// Crosshairs
    2328:	08 e3       	ldi	r16, 0x38	; 56
    232a:	20 e4       	ldi	r18, 0x40	; 64
    232c:	48 e0       	ldi	r20, 0x08	; 8
    232e:	60 e4       	ldi	r22, 0x40	; 64
    2330:	80 e0       	ldi	r24, 0x00	; 0
    2332:	91 e0       	ldi	r25, 0x01	; 1
    2334:	0e 94 bd 21 	call	0x437a	; 0x437a <drawline>
			drawline(buffer, 32, 32, 96, 32, 1);
    2338:	00 e2       	ldi	r16, 0x20	; 32
    233a:	20 e6       	ldi	r18, 0x60	; 96
    233c:	40 e2       	ldi	r20, 0x20	; 32
    233e:	60 e2       	ldi	r22, 0x20	; 32
    2340:	80 e0       	ldi	r24, 0x00	; 0
    2342:	91 e0       	ldi	r25, 0x01	; 1
    2344:	0e 94 bd 21 	call	0x437a	; 0x437a <drawline>
			fillcircle(buffer, y_pos, x_pos, 8, 1);	// Bubble
    2348:	01 e0       	ldi	r16, 0x01	; 1
    234a:	28 e0       	ldi	r18, 0x08	; 8
    234c:	4c 2f       	mov	r20, r28
    234e:	6c 2d       	mov	r22, r12
    2350:	80 e0       	ldi	r24, 0x00	; 0
    2352:	91 e0       	ldi	r25, 0x01	; 1
    2354:	0e 94 79 22 	call	0x44f2	; 0x44f2 <fillcircle>

			// Refresh GLCD
			write_buffer(buffer);
    2358:	80 e0       	ldi	r24, 0x00	; 0
    235a:	91 e0       	ldi	r25, 0x01	; 1
    235c:	0e 94 2b 21 	call	0x4256	; 0x4256 <write_buffer>
			clear_buffer(buffer);
    2360:	80 e0       	ldi	r24, 0x00	; 0
    2362:	91 e0       	ldi	r25, 0x01	; 1
    2364:	0e 94 5d 21 	call	0x42ba	; 0x42ba <clear_buffer>
    2368:	7d cf       	rjmp	.-262    	; 0x2264 <Display_balance+0xc>
	#ifdef KK2Mini
	clear_buffer(buffer);
	write_buffer(buffer);
	st7565_set_brightness(Config.Contrast);
	#endif
}
    236a:	df 91       	pop	r29
    236c:	cf 91       	pop	r28
    236e:	0f 91       	pop	r16
    2370:	ef 90       	pop	r14
    2372:	df 90       	pop	r13
    2374:	cf 90       	pop	r12
    2376:	08 95       	ret

00002378 <Display_rcinput>:
//************************************************************

void Display_rcinput(void)
{
	// Re-enable interrupts. High seed mode may have left them off
	init_int();
    2378:	0e 94 1c 2f 	call	0x5e38	; 0x5e38 <init_int>
	
	while(BUTTON1 != 0)
    237c:	1f 9b       	sbis	0x03, 7	; 3
    237e:	fa c0       	rjmp	.+500    	; 0x2574 <Display_rcinput+0x1fc>
	{
		if (BUTTON4 == 0)
    2380:	1c 9b       	sbis	0x03, 4	; 3
		{
			CenterSticks();
    2382:	0e 94 dc 44 	call	0x89b8	; 0x89b8 <CenterSticks>
		}

		RxGetChannels();
    2386:	0e 94 47 44 	call	0x888e	; 0x888e <RxGetChannels>

		LCD_Display_Text(114,(const unsigned char*)Verdana8,0,0); // Throttle
    238a:	20 e0       	ldi	r18, 0x00	; 0
    238c:	30 e0       	ldi	r19, 0x00	; 0
    238e:	40 e0       	ldi	r20, 0x00	; 0
    2390:	50 e0       	ldi	r21, 0x00	; 0
    2392:	6f e1       	ldi	r22, 0x1F	; 31
    2394:	7a e0       	ldi	r23, 0x0A	; 10
    2396:	82 e7       	ldi	r24, 0x72	; 114
    2398:	90 e0       	ldi	r25, 0x00	; 0
    239a:	0e 94 0a 23 	call	0x4614	; 0x4614 <LCD_Display_Text>
		LCD_Display_Text(32,(const unsigned char*)Verdana8,0,10);
    239e:	2a e0       	ldi	r18, 0x0A	; 10
    23a0:	30 e0       	ldi	r19, 0x00	; 0
    23a2:	40 e0       	ldi	r20, 0x00	; 0
    23a4:	50 e0       	ldi	r21, 0x00	; 0
    23a6:	6f e1       	ldi	r22, 0x1F	; 31
    23a8:	7a e0       	ldi	r23, 0x0A	; 10
    23aa:	80 e2       	ldi	r24, 0x20	; 32
    23ac:	90 e0       	ldi	r25, 0x00	; 0
    23ae:	0e 94 0a 23 	call	0x4614	; 0x4614 <LCD_Display_Text>
		LCD_Display_Text(115,(const unsigned char*)Verdana8,0,20);
    23b2:	24 e1       	ldi	r18, 0x14	; 20
    23b4:	30 e0       	ldi	r19, 0x00	; 0
    23b6:	40 e0       	ldi	r20, 0x00	; 0
    23b8:	50 e0       	ldi	r21, 0x00	; 0
    23ba:	6f e1       	ldi	r22, 0x1F	; 31
    23bc:	7a e0       	ldi	r23, 0x0A	; 10
    23be:	83 e7       	ldi	r24, 0x73	; 115
    23c0:	90 e0       	ldi	r25, 0x00	; 0
    23c2:	0e 94 0a 23 	call	0x4614	; 0x4614 <LCD_Display_Text>
		LCD_Display_Text(35,(const unsigned char*)Verdana8,0,30);
    23c6:	2e e1       	ldi	r18, 0x1E	; 30
    23c8:	30 e0       	ldi	r19, 0x00	; 0
    23ca:	40 e0       	ldi	r20, 0x00	; 0
    23cc:	50 e0       	ldi	r21, 0x00	; 0
    23ce:	6f e1       	ldi	r22, 0x1F	; 31
    23d0:	7a e0       	ldi	r23, 0x0A	; 10
    23d2:	83 e2       	ldi	r24, 0x23	; 35
    23d4:	90 e0       	ldi	r25, 0x00	; 0
    23d6:	0e 94 0a 23 	call	0x4614	; 0x4614 <LCD_Display_Text>

		LCD_Display_Text(109,(const unsigned char*)Verdana8,70,0); // Gear
    23da:	20 e0       	ldi	r18, 0x00	; 0
    23dc:	30 e0       	ldi	r19, 0x00	; 0
    23de:	46 e4       	ldi	r20, 0x46	; 70
    23e0:	50 e0       	ldi	r21, 0x00	; 0
    23e2:	6f e1       	ldi	r22, 0x1F	; 31
    23e4:	7a e0       	ldi	r23, 0x0A	; 10
    23e6:	8d e6       	ldi	r24, 0x6D	; 109
    23e8:	90 e0       	ldi	r25, 0x00	; 0
    23ea:	0e 94 0a 23 	call	0x4614	; 0x4614 <LCD_Display_Text>
		LCD_Display_Text(110,(const unsigned char*)Verdana8,70,10);
    23ee:	2a e0       	ldi	r18, 0x0A	; 10
    23f0:	30 e0       	ldi	r19, 0x00	; 0
    23f2:	46 e4       	ldi	r20, 0x46	; 70
    23f4:	50 e0       	ldi	r21, 0x00	; 0
    23f6:	6f e1       	ldi	r22, 0x1F	; 31
    23f8:	7a e0       	ldi	r23, 0x0A	; 10
    23fa:	8e e6       	ldi	r24, 0x6E	; 110
    23fc:	90 e0       	ldi	r25, 0x00	; 0
    23fe:	0e 94 0a 23 	call	0x4614	; 0x4614 <LCD_Display_Text>
		LCD_Display_Text(111,(const unsigned char*)Verdana8,70,20);
    2402:	24 e1       	ldi	r18, 0x14	; 20
    2404:	30 e0       	ldi	r19, 0x00	; 0
    2406:	46 e4       	ldi	r20, 0x46	; 70
    2408:	50 e0       	ldi	r21, 0x00	; 0
    240a:	6f e1       	ldi	r22, 0x1F	; 31
    240c:	7a e0       	ldi	r23, 0x0A	; 10
    240e:	8f e6       	ldi	r24, 0x6F	; 111
    2410:	90 e0       	ldi	r25, 0x00	; 0
    2412:	0e 94 0a 23 	call	0x4614	; 0x4614 <LCD_Display_Text>
		LCD_Display_Text(112,(const unsigned char*)Verdana8,70,30);
    2416:	2e e1       	ldi	r18, 0x1E	; 30
    2418:	30 e0       	ldi	r19, 0x00	; 0
    241a:	46 e4       	ldi	r20, 0x46	; 70
    241c:	50 e0       	ldi	r21, 0x00	; 0
    241e:	6f e1       	ldi	r22, 0x1F	; 31
    2420:	7a e0       	ldi	r23, 0x0A	; 10
    2422:	80 e7       	ldi	r24, 0x70	; 112
    2424:	90 e0       	ldi	r25, 0x00	; 0
    2426:	0e 94 0a 23 	call	0x4614	; 0x4614 <LCD_Display_Text>

		mugui_lcd_puts(itoa(MonopolarThrottle,pBuffer,10),(const unsigned char*)Verdana8,37,0);
    242a:	80 91 21 08 	lds	r24, 0x0821
    242e:	90 91 22 08 	lds	r25, 0x0822
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    2432:	4a e0       	ldi	r20, 0x0A	; 10
    2434:	6b e5       	ldi	r22, 0x5B	; 91
    2436:	75 e0       	ldi	r23, 0x05	; 5
    2438:	0e 94 06 4a 	call	0x940c	; 0x940c <__itoa_ncheck>
    243c:	20 e0       	ldi	r18, 0x00	; 0
    243e:	30 e0       	ldi	r19, 0x00	; 0
    2440:	45 e2       	ldi	r20, 0x25	; 37
    2442:	50 e0       	ldi	r21, 0x00	; 0
    2444:	6f e1       	ldi	r22, 0x1F	; 31
    2446:	7a e0       	ldi	r23, 0x0A	; 10
    2448:	0e 94 95 3f 	call	0x7f2a	; 0x7f2a <mugui_lcd_puts>
		mugui_lcd_puts(itoa(RCinputs[AILERON],pBuffer,10),(const unsigned char*)Verdana8,37,10);
    244c:	80 91 25 08 	lds	r24, 0x0825
    2450:	90 91 26 08 	lds	r25, 0x0826
    2454:	4a e0       	ldi	r20, 0x0A	; 10
    2456:	6b e5       	ldi	r22, 0x5B	; 91
    2458:	75 e0       	ldi	r23, 0x05	; 5
    245a:	0e 94 06 4a 	call	0x940c	; 0x940c <__itoa_ncheck>
    245e:	2a e0       	ldi	r18, 0x0A	; 10
    2460:	30 e0       	ldi	r19, 0x00	; 0
    2462:	45 e2       	ldi	r20, 0x25	; 37
    2464:	50 e0       	ldi	r21, 0x00	; 0
    2466:	6f e1       	ldi	r22, 0x1F	; 31
    2468:	7a e0       	ldi	r23, 0x0A	; 10
    246a:	0e 94 95 3f 	call	0x7f2a	; 0x7f2a <mugui_lcd_puts>
		mugui_lcd_puts(itoa(RCinputs[ELEVATOR],pBuffer,10),(const unsigned char*)Verdana8,37,20);
    246e:	80 91 27 08 	lds	r24, 0x0827
    2472:	90 91 28 08 	lds	r25, 0x0828
    2476:	4a e0       	ldi	r20, 0x0A	; 10
    2478:	6b e5       	ldi	r22, 0x5B	; 91
    247a:	75 e0       	ldi	r23, 0x05	; 5
    247c:	0e 94 06 4a 	call	0x940c	; 0x940c <__itoa_ncheck>
    2480:	24 e1       	ldi	r18, 0x14	; 20
    2482:	30 e0       	ldi	r19, 0x00	; 0
    2484:	45 e2       	ldi	r20, 0x25	; 37
    2486:	50 e0       	ldi	r21, 0x00	; 0
    2488:	6f e1       	ldi	r22, 0x1F	; 31
    248a:	7a e0       	ldi	r23, 0x0A	; 10
    248c:	0e 94 95 3f 	call	0x7f2a	; 0x7f2a <mugui_lcd_puts>
		mugui_lcd_puts(itoa(RCinputs[RUDDER],pBuffer,10),(const unsigned char*)Verdana8,37,30);
    2490:	80 91 29 08 	lds	r24, 0x0829
    2494:	90 91 2a 08 	lds	r25, 0x082A
    2498:	4a e0       	ldi	r20, 0x0A	; 10
    249a:	6b e5       	ldi	r22, 0x5B	; 91
    249c:	75 e0       	ldi	r23, 0x05	; 5
    249e:	0e 94 06 4a 	call	0x940c	; 0x940c <__itoa_ncheck>
    24a2:	2e e1       	ldi	r18, 0x1E	; 30
    24a4:	30 e0       	ldi	r19, 0x00	; 0
    24a6:	45 e2       	ldi	r20, 0x25	; 37
    24a8:	50 e0       	ldi	r21, 0x00	; 0
    24aa:	6f e1       	ldi	r22, 0x1F	; 31
    24ac:	7a e0       	ldi	r23, 0x0A	; 10
    24ae:	0e 94 95 3f 	call	0x7f2a	; 0x7f2a <mugui_lcd_puts>

		mugui_lcd_puts(itoa(RCinputs[GEAR],pBuffer,10),(const unsigned char*)Verdana8,100,0);
    24b2:	80 91 2b 08 	lds	r24, 0x082B
    24b6:	90 91 2c 08 	lds	r25, 0x082C
    24ba:	4a e0       	ldi	r20, 0x0A	; 10
    24bc:	6b e5       	ldi	r22, 0x5B	; 91
    24be:	75 e0       	ldi	r23, 0x05	; 5
    24c0:	0e 94 06 4a 	call	0x940c	; 0x940c <__itoa_ncheck>
    24c4:	20 e0       	ldi	r18, 0x00	; 0
    24c6:	30 e0       	ldi	r19, 0x00	; 0
    24c8:	44 e6       	ldi	r20, 0x64	; 100
    24ca:	50 e0       	ldi	r21, 0x00	; 0
    24cc:	6f e1       	ldi	r22, 0x1F	; 31
    24ce:	7a e0       	ldi	r23, 0x0A	; 10
    24d0:	0e 94 95 3f 	call	0x7f2a	; 0x7f2a <mugui_lcd_puts>
		mugui_lcd_puts(itoa(RCinputs[AUX1],pBuffer,10),(const unsigned char*)Verdana8,100,10);
    24d4:	80 91 2d 08 	lds	r24, 0x082D
    24d8:	90 91 2e 08 	lds	r25, 0x082E
    24dc:	4a e0       	ldi	r20, 0x0A	; 10
    24de:	6b e5       	ldi	r22, 0x5B	; 91
    24e0:	75 e0       	ldi	r23, 0x05	; 5
    24e2:	0e 94 06 4a 	call	0x940c	; 0x940c <__itoa_ncheck>
    24e6:	2a e0       	ldi	r18, 0x0A	; 10
    24e8:	30 e0       	ldi	r19, 0x00	; 0
    24ea:	44 e6       	ldi	r20, 0x64	; 100
    24ec:	50 e0       	ldi	r21, 0x00	; 0
    24ee:	6f e1       	ldi	r22, 0x1F	; 31
    24f0:	7a e0       	ldi	r23, 0x0A	; 10
    24f2:	0e 94 95 3f 	call	0x7f2a	; 0x7f2a <mugui_lcd_puts>
		mugui_lcd_puts(itoa(RCinputs[AUX2],pBuffer,10),(const unsigned char*)Verdana8,100,20);
    24f6:	80 91 2f 08 	lds	r24, 0x082F
    24fa:	90 91 30 08 	lds	r25, 0x0830
    24fe:	4a e0       	ldi	r20, 0x0A	; 10
    2500:	6b e5       	ldi	r22, 0x5B	; 91
    2502:	75 e0       	ldi	r23, 0x05	; 5
    2504:	0e 94 06 4a 	call	0x940c	; 0x940c <__itoa_ncheck>
    2508:	24 e1       	ldi	r18, 0x14	; 20
    250a:	30 e0       	ldi	r19, 0x00	; 0
    250c:	44 e6       	ldi	r20, 0x64	; 100
    250e:	50 e0       	ldi	r21, 0x00	; 0
    2510:	6f e1       	ldi	r22, 0x1F	; 31
    2512:	7a e0       	ldi	r23, 0x0A	; 10
    2514:	0e 94 95 3f 	call	0x7f2a	; 0x7f2a <mugui_lcd_puts>
		mugui_lcd_puts(itoa(RCinputs[AUX3],pBuffer,10),(const unsigned char*)Verdana8,100,30);
    2518:	80 91 31 08 	lds	r24, 0x0831
    251c:	90 91 32 08 	lds	r25, 0x0832
    2520:	4a e0       	ldi	r20, 0x0A	; 10
    2522:	6b e5       	ldi	r22, 0x5B	; 91
    2524:	75 e0       	ldi	r23, 0x05	; 5
    2526:	0e 94 06 4a 	call	0x940c	; 0x940c <__itoa_ncheck>
    252a:	2e e1       	ldi	r18, 0x1E	; 30
    252c:	30 e0       	ldi	r19, 0x00	; 0
    252e:	44 e6       	ldi	r20, 0x64	; 100
    2530:	50 e0       	ldi	r21, 0x00	; 0
    2532:	6f e1       	ldi	r22, 0x1F	; 31
    2534:	7a e0       	ldi	r23, 0x0A	; 10
    2536:	0e 94 95 3f 	call	0x7f2a	; 0x7f2a <mugui_lcd_puts>

		// Print bottom text and markers
		LCD_Display_Text(12, (const unsigned char*)Wingdings, 0, 57); 	// Left
    253a:	29 e3       	ldi	r18, 0x39	; 57
    253c:	30 e0       	ldi	r19, 0x00	; 0
    253e:	40 e0       	ldi	r20, 0x00	; 0
    2540:	50 e0       	ldi	r21, 0x00	; 0
    2542:	67 e0       	ldi	r22, 0x07	; 7
    2544:	71 e0       	ldi	r23, 0x01	; 1
    2546:	8c e0       	ldi	r24, 0x0C	; 12
    2548:	90 e0       	ldi	r25, 0x00	; 0
    254a:	0e 94 0a 23 	call	0x4614	; 0x4614 <LCD_Display_Text>
		LCD_Display_Text(60, (const unsigned char*)Verdana8, 110, 55); 	// Cal.
    254e:	27 e3       	ldi	r18, 0x37	; 55
    2550:	30 e0       	ldi	r19, 0x00	; 0
    2552:	4e e6       	ldi	r20, 0x6E	; 110
    2554:	50 e0       	ldi	r21, 0x00	; 0
    2556:	6f e1       	ldi	r22, 0x1F	; 31
    2558:	7a e0       	ldi	r23, 0x0A	; 10
    255a:	8c e3       	ldi	r24, 0x3C	; 60
    255c:	90 e0       	ldi	r25, 0x00	; 0
    255e:	0e 94 0a 23 	call	0x4614	; 0x4614 <LCD_Display_Text>

		// Update buffer
		write_buffer(buffer);
    2562:	80 e0       	ldi	r24, 0x00	; 0
    2564:	91 e0       	ldi	r25, 0x01	; 1
    2566:	0e 94 2b 21 	call	0x4256	; 0x4256 <write_buffer>
		clear_buffer(buffer);
    256a:	80 e0       	ldi	r24, 0x00	; 0
    256c:	91 e0       	ldi	r25, 0x01	; 1
    256e:	0e 94 5d 21 	call	0x42ba	; 0x42ba <clear_buffer>
    2572:	04 cf       	rjmp	.-504    	; 0x237c <Display_rcinput+0x4>
	}
}
    2574:	08 95       	ret

00002576 <Display_sensors>:
// Code
//************************************************************

void Display_sensors(void)
{
	while(BUTTON1 != 0)
    2576:	1f 9b       	sbis	0x03, 7	; 3
    2578:	ed c0       	rjmp	.+474    	; 0x2754 <Display_sensors+0x1de>
	{
	
		// Normal calibrate button pressed
		if (BUTTON4 == 0)
    257a:	1c 99       	sbic	0x03, 4	; 3
    257c:	1a c0       	rjmp	.+52     	; 0x25b2 <Display_sensors+0x3c>
		{
			// Wait until finger off button
			while(BUTTON4 == 0)
    257e:	1c 99       	sbic	0x03, 4	; 3
    2580:	0a c0       	rjmp	.+20     	; 0x2596 <Display_sensors+0x20>
    2582:	2f e3       	ldi	r18, 0x3F	; 63
    2584:	8d e0       	ldi	r24, 0x0D	; 13
    2586:	93 e0       	ldi	r25, 0x03	; 3
    2588:	21 50       	subi	r18, 0x01	; 1
    258a:	80 40       	sbci	r24, 0x00	; 0
    258c:	90 40       	sbci	r25, 0x00	; 0
    258e:	e1 f7       	brne	.-8      	; 0x2588 <Display_sensors+0x12>
    2590:	00 c0       	rjmp	.+0      	; 0x2592 <Display_sensors+0x1c>
    2592:	00 00       	nop
    2594:	f4 cf       	rjmp	.-24     	; 0x257e <Display_sensors+0x8>
    2596:	2f e3       	ldi	r18, 0x3F	; 63
    2598:	82 e4       	ldi	r24, 0x42	; 66
    259a:	9f e0       	ldi	r25, 0x0F	; 15
    259c:	21 50       	subi	r18, 0x01	; 1
    259e:	80 40       	sbci	r24, 0x00	; 0
    25a0:	90 40       	sbci	r25, 0x00	; 0
    25a2:	e1 f7       	brne	.-8      	; 0x259c <Display_sensors+0x26>
    25a4:	00 c0       	rjmp	.+0      	; 0x25a6 <Display_sensors+0x30>
    25a6:	00 00       	nop
			
			// Pause until steady		
			_delay_ms(250);
			
			// Calibrate sensors
			CalibrateGyrosFast();		
    25a8:	0e 94 1d 24 	call	0x483a	; 0x483a <CalibrateGyrosFast>
			CalibrateAcc(NORMAL);
    25ac:	80 e0       	ldi	r24, 0x00	; 0
    25ae:	0e 94 10 10 	call	0x2020	; 0x2020 <CalibrateAcc>
		}

		// Inverted calibrate button pressed
		if (BUTTON3 == 0)
    25b2:	1d 99       	sbic	0x03, 5	; 3
    25b4:	0c c0       	rjmp	.+24     	; 0x25ce <Display_sensors+0x58>
    25b6:	2f e3       	ldi	r18, 0x3F	; 63
    25b8:	82 e4       	ldi	r24, 0x42	; 66
    25ba:	9f e0       	ldi	r25, 0x0F	; 15
    25bc:	21 50       	subi	r18, 0x01	; 1
    25be:	80 40       	sbci	r24, 0x00	; 0
    25c0:	90 40       	sbci	r25, 0x00	; 0
    25c2:	e1 f7       	brne	.-8      	; 0x25bc <Display_sensors+0x46>
    25c4:	00 c0       	rjmp	.+0      	; 0x25c6 <Display_sensors+0x50>
    25c6:	00 00       	nop
		{
			// Wait until button snap dissipated
			_delay_ms(250);
			CalibrateAcc(REVERSED);
    25c8:	81 e0       	ldi	r24, 0x01	; 1
    25ca:	0e 94 10 10 	call	0x2020	; 0x2020 <CalibrateAcc>
		}

		ReadGyros();
    25ce:	0e 94 f0 23 	call	0x47e0	; 0x47e0 <ReadGyros>
		ReadAcc();
    25d2:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <ReadAcc>

		LCD_Display_Text(26,(const unsigned char*)Verdana8,37,0); 	// Gyro
    25d6:	20 e0       	ldi	r18, 0x00	; 0
    25d8:	30 e0       	ldi	r19, 0x00	; 0
    25da:	45 e2       	ldi	r20, 0x25	; 37
    25dc:	50 e0       	ldi	r21, 0x00	; 0
    25de:	6f e1       	ldi	r22, 0x1F	; 31
    25e0:	7a e0       	ldi	r23, 0x0A	; 10
    25e2:	8a e1       	ldi	r24, 0x1A	; 26
    25e4:	90 e0       	ldi	r25, 0x00	; 0
    25e6:	0e 94 0a 23 	call	0x4614	; 0x4614 <LCD_Display_Text>
		LCD_Display_Text(30,(const unsigned char*)Verdana8,77,0); 	// Acc
    25ea:	20 e0       	ldi	r18, 0x00	; 0
    25ec:	30 e0       	ldi	r19, 0x00	; 0
    25ee:	4d e4       	ldi	r20, 0x4D	; 77
    25f0:	50 e0       	ldi	r21, 0x00	; 0
    25f2:	6f e1       	ldi	r22, 0x1F	; 31
    25f4:	7a e0       	ldi	r23, 0x0A	; 10
    25f6:	8e e1       	ldi	r24, 0x1E	; 30
    25f8:	90 e0       	ldi	r25, 0x00	; 0
    25fa:	0e 94 0a 23 	call	0x4614	; 0x4614 <LCD_Display_Text>
		//
		LCD_Display_Text(27,(const unsigned char*)Verdana8,5,13);	// Roll
    25fe:	2d e0       	ldi	r18, 0x0D	; 13
    2600:	30 e0       	ldi	r19, 0x00	; 0
    2602:	45 e0       	ldi	r20, 0x05	; 5
    2604:	50 e0       	ldi	r21, 0x00	; 0
    2606:	6f e1       	ldi	r22, 0x1F	; 31
    2608:	7a e0       	ldi	r23, 0x0A	; 10
    260a:	8b e1       	ldi	r24, 0x1B	; 27
    260c:	90 e0       	ldi	r25, 0x00	; 0
    260e:	0e 94 0a 23 	call	0x4614	; 0x4614 <LCD_Display_Text>
		LCD_Display_Text(28,(const unsigned char*)Verdana8,5,23);	// Pitch
    2612:	27 e1       	ldi	r18, 0x17	; 23
    2614:	30 e0       	ldi	r19, 0x00	; 0
    2616:	45 e0       	ldi	r20, 0x05	; 5
    2618:	50 e0       	ldi	r21, 0x00	; 0
    261a:	6f e1       	ldi	r22, 0x1F	; 31
    261c:	7a e0       	ldi	r23, 0x0A	; 10
    261e:	8c e1       	ldi	r24, 0x1C	; 28
    2620:	90 e0       	ldi	r25, 0x00	; 0
    2622:	0e 94 0a 23 	call	0x4614	; 0x4614 <LCD_Display_Text>
		LCD_Display_Text(29,(const unsigned char*)Verdana8,5,33);	// Yaw/Z
    2626:	21 e2       	ldi	r18, 0x21	; 33
    2628:	30 e0       	ldi	r19, 0x00	; 0
    262a:	45 e0       	ldi	r20, 0x05	; 5
    262c:	50 e0       	ldi	r21, 0x00	; 0
    262e:	6f e1       	ldi	r22, 0x1F	; 31
    2630:	7a e0       	ldi	r23, 0x0A	; 10
    2632:	8d e1       	ldi	r24, 0x1D	; 29
    2634:	90 e0       	ldi	r25, 0x00	; 0
    2636:	0e 94 0a 23 	call	0x4614	; 0x4614 <LCD_Display_Text>
    263a:	4a e0       	ldi	r20, 0x0A	; 10
    263c:	6b e5       	ldi	r22, 0x5B	; 91
    263e:	75 e0       	ldi	r23, 0x05	; 5
    2640:	80 91 6b 05 	lds	r24, 0x056B
    2644:	90 91 6c 05 	lds	r25, 0x056C
    2648:	0e 94 06 4a 	call	0x940c	; 0x940c <__itoa_ncheck>
		//
		mugui_lcd_puts(itoa(gyroADC[ROLL],pBuffer,10),(const unsigned char*)Verdana8,40,13);
    264c:	2d e0       	ldi	r18, 0x0D	; 13
    264e:	30 e0       	ldi	r19, 0x00	; 0
    2650:	48 e2       	ldi	r20, 0x28	; 40
    2652:	50 e0       	ldi	r21, 0x00	; 0
    2654:	6f e1       	ldi	r22, 0x1F	; 31
    2656:	7a e0       	ldi	r23, 0x0A	; 10
    2658:	0e 94 95 3f 	call	0x7f2a	; 0x7f2a <mugui_lcd_puts>
    265c:	4a e0       	ldi	r20, 0x0A	; 10
    265e:	6b e5       	ldi	r22, 0x5B	; 91
    2660:	75 e0       	ldi	r23, 0x05	; 5
    2662:	80 91 6d 05 	lds	r24, 0x056D
    2666:	90 91 6e 05 	lds	r25, 0x056E
    266a:	0e 94 06 4a 	call	0x940c	; 0x940c <__itoa_ncheck>
		mugui_lcd_puts(itoa(gyroADC[PITCH],pBuffer,10),(const unsigned char*)Verdana8,40,23);
    266e:	27 e1       	ldi	r18, 0x17	; 23
    2670:	30 e0       	ldi	r19, 0x00	; 0
    2672:	48 e2       	ldi	r20, 0x28	; 40
    2674:	50 e0       	ldi	r21, 0x00	; 0
    2676:	6f e1       	ldi	r22, 0x1F	; 31
    2678:	7a e0       	ldi	r23, 0x0A	; 10
    267a:	0e 94 95 3f 	call	0x7f2a	; 0x7f2a <mugui_lcd_puts>
    267e:	4a e0       	ldi	r20, 0x0A	; 10
    2680:	6b e5       	ldi	r22, 0x5B	; 91
    2682:	75 e0       	ldi	r23, 0x05	; 5
    2684:	80 91 6f 05 	lds	r24, 0x056F
    2688:	90 91 70 05 	lds	r25, 0x0570
    268c:	0e 94 06 4a 	call	0x940c	; 0x940c <__itoa_ncheck>
		mugui_lcd_puts(itoa(gyroADC[YAW],pBuffer,10),(const unsigned char*)Verdana8,40,33);
    2690:	21 e2       	ldi	r18, 0x21	; 33
    2692:	30 e0       	ldi	r19, 0x00	; 0
    2694:	48 e2       	ldi	r20, 0x28	; 40
    2696:	50 e0       	ldi	r21, 0x00	; 0
    2698:	6f e1       	ldi	r22, 0x1F	; 31
    269a:	7a e0       	ldi	r23, 0x0A	; 10
    269c:	0e 94 95 3f 	call	0x7f2a	; 0x7f2a <mugui_lcd_puts>
    26a0:	4a e0       	ldi	r20, 0x0A	; 10
    26a2:	6b e5       	ldi	r22, 0x5B	; 91
    26a4:	75 e0       	ldi	r23, 0x05	; 5
    26a6:	80 91 3c 05 	lds	r24, 0x053C
    26aa:	90 91 3d 05 	lds	r25, 0x053D
    26ae:	0e 94 06 4a 	call	0x940c	; 0x940c <__itoa_ncheck>
		mugui_lcd_puts(itoa(accADC[ROLL],pBuffer,10),(const unsigned char*)Verdana8,80,13);
    26b2:	2d e0       	ldi	r18, 0x0D	; 13
    26b4:	30 e0       	ldi	r19, 0x00	; 0
    26b6:	40 e5       	ldi	r20, 0x50	; 80
    26b8:	50 e0       	ldi	r21, 0x00	; 0
    26ba:	6f e1       	ldi	r22, 0x1F	; 31
    26bc:	7a e0       	ldi	r23, 0x0A	; 10
    26be:	0e 94 95 3f 	call	0x7f2a	; 0x7f2a <mugui_lcd_puts>
    26c2:	4a e0       	ldi	r20, 0x0A	; 10
    26c4:	6b e5       	ldi	r22, 0x5B	; 91
    26c6:	75 e0       	ldi	r23, 0x05	; 5
    26c8:	80 91 3e 05 	lds	r24, 0x053E
    26cc:	90 91 3f 05 	lds	r25, 0x053F
    26d0:	0e 94 06 4a 	call	0x940c	; 0x940c <__itoa_ncheck>
		mugui_lcd_puts(itoa(accADC[PITCH],pBuffer,10),(const unsigned char*)Verdana8,80,23);
    26d4:	27 e1       	ldi	r18, 0x17	; 23
    26d6:	30 e0       	ldi	r19, 0x00	; 0
    26d8:	40 e5       	ldi	r20, 0x50	; 80
    26da:	50 e0       	ldi	r21, 0x00	; 0
    26dc:	6f e1       	ldi	r22, 0x1F	; 31
    26de:	7a e0       	ldi	r23, 0x0A	; 10
    26e0:	0e 94 95 3f 	call	0x7f2a	; 0x7f2a <mugui_lcd_puts>
    26e4:	4a e0       	ldi	r20, 0x0A	; 10
    26e6:	6b e5       	ldi	r22, 0x5B	; 91
    26e8:	75 e0       	ldi	r23, 0x05	; 5
    26ea:	80 91 40 05 	lds	r24, 0x0540
    26ee:	90 91 41 05 	lds	r25, 0x0541
    26f2:	0e 94 06 4a 	call	0x940c	; 0x940c <__itoa_ncheck>
		mugui_lcd_puts(itoa(accADC[YAW],pBuffer,10),(const unsigned char*)Verdana8,80,33);
    26f6:	21 e2       	ldi	r18, 0x21	; 33
    26f8:	30 e0       	ldi	r19, 0x00	; 0
    26fa:	40 e5       	ldi	r20, 0x50	; 80
    26fc:	50 e0       	ldi	r21, 0x00	; 0
    26fe:	6f e1       	ldi	r22, 0x1F	; 31
    2700:	7a e0       	ldi	r23, 0x0A	; 10
    2702:	0e 94 95 3f 	call	0x7f2a	; 0x7f2a <mugui_lcd_puts>

		// Print bottom markers
		LCD_Display_Text(12, (const unsigned char*)Wingdings, 0, 57); 	// Left
    2706:	29 e3       	ldi	r18, 0x39	; 57
    2708:	30 e0       	ldi	r19, 0x00	; 0
    270a:	40 e0       	ldi	r20, 0x00	; 0
    270c:	50 e0       	ldi	r21, 0x00	; 0
    270e:	67 e0       	ldi	r22, 0x07	; 7
    2710:	71 e0       	ldi	r23, 0x01	; 1
    2712:	8c e0       	ldi	r24, 0x0C	; 12
    2714:	90 e0       	ldi	r25, 0x00	; 0
    2716:	0e 94 0a 23 	call	0x4614	; 0x4614 <LCD_Display_Text>
		LCD_Display_Text(60, (const unsigned char*)Verdana8, 108, 55); 	// Calibrate
    271a:	27 e3       	ldi	r18, 0x37	; 55
    271c:	30 e0       	ldi	r19, 0x00	; 0
    271e:	4c e6       	ldi	r20, 0x6C	; 108
    2720:	50 e0       	ldi	r21, 0x00	; 0
    2722:	6f e1       	ldi	r22, 0x1F	; 31
    2724:	7a e0       	ldi	r23, 0x0A	; 10
    2726:	8c e3       	ldi	r24, 0x3C	; 60
    2728:	90 e0       	ldi	r25, 0x00	; 0
    272a:	0e 94 0a 23 	call	0x4614	; 0x4614 <LCD_Display_Text>
		LCD_Display_Text(25, (const unsigned char*)Verdana8, 75, 55); 	// Inverted Calibrate		
    272e:	27 e3       	ldi	r18, 0x37	; 55
    2730:	30 e0       	ldi	r19, 0x00	; 0
    2732:	4b e4       	ldi	r20, 0x4B	; 75
    2734:	50 e0       	ldi	r21, 0x00	; 0
    2736:	6f e1       	ldi	r22, 0x1F	; 31
    2738:	7a e0       	ldi	r23, 0x0A	; 10
    273a:	89 e1       	ldi	r24, 0x19	; 25
    273c:	90 e0       	ldi	r25, 0x00	; 0
    273e:	0e 94 0a 23 	call	0x4614	; 0x4614 <LCD_Display_Text>

		// Update buffer
		write_buffer(buffer);
    2742:	80 e0       	ldi	r24, 0x00	; 0
    2744:	91 e0       	ldi	r25, 0x01	; 1
    2746:	0e 94 2b 21 	call	0x4256	; 0x4256 <write_buffer>
		clear_buffer(buffer);
    274a:	80 e0       	ldi	r24, 0x00	; 0
    274c:	91 e0       	ldi	r25, 0x01	; 1
    274e:	0e 94 5d 21 	call	0x42ba	; 0x42ba <clear_buffer>
    2752:	11 cf       	rjmp	.-478    	; 0x2576 <Display_sensors>
	}
}
    2754:	08 95       	ret

00002756 <Display_status>:
//************************************************************
// Code
//************************************************************

void Display_status(void)
{
    2756:	bf 92       	push	r11
    2758:	cf 92       	push	r12
    275a:	df 92       	push	r13
    275c:	ef 92       	push	r14
    275e:	ff 92       	push	r15
    2760:	0f 93       	push	r16
    2762:	1f 93       	push	r17
    2764:	cf 93       	push	r28
    2766:	df 93       	push	r29
    2768:	00 d0       	rcall	.+0      	; 0x276a <Display_status+0x14>
    276a:	00 d0       	rcall	.+0      	; 0x276c <Display_status+0x16>
    276c:	cd b7       	in	r28, 0x3d	; 61
    276e:	de b7       	in	r29, 0x3e	; 62
	int16_t temp;
	uint16_t vbat_temp; 
	int8_t	pos1, pos2, pos3;
	mugui_size16_t size;

	clear_buffer(buffer);
    2770:	80 e0       	ldi	r24, 0x00	; 0
    2772:	91 e0       	ldi	r25, 0x01	; 1
    2774:	0e 94 5d 21 	call	0x42ba	; 0x42ba <clear_buffer>

	// Display text
	LCD_Display_Text(264,(const unsigned char*)Verdana8,0,0); 	// Version text
    2778:	20 e0       	ldi	r18, 0x00	; 0
    277a:	30 e0       	ldi	r19, 0x00	; 0
    277c:	40 e0       	ldi	r20, 0x00	; 0
    277e:	50 e0       	ldi	r21, 0x00	; 0
    2780:	6f e1       	ldi	r22, 0x1F	; 31
    2782:	7a e0       	ldi	r23, 0x0A	; 10
    2784:	88 e0       	ldi	r24, 0x08	; 8
    2786:	91 e0       	ldi	r25, 0x01	; 1
    2788:	0e 94 0a 23 	call	0x4614	; 0x4614 <LCD_Display_Text>
	LCD_Display_Text(266,(const unsigned char*)Verdana8,0,12); 	// RX sync
    278c:	2c e0       	ldi	r18, 0x0C	; 12
    278e:	30 e0       	ldi	r19, 0x00	; 0
    2790:	40 e0       	ldi	r20, 0x00	; 0
    2792:	50 e0       	ldi	r21, 0x00	; 0
    2794:	6f e1       	ldi	r22, 0x1F	; 31
    2796:	7a e0       	ldi	r23, 0x0A	; 10
    2798:	8a e0       	ldi	r24, 0x0A	; 10
    279a:	91 e0       	ldi	r25, 0x01	; 1
    279c:	0e 94 0a 23 	call	0x4614	; 0x4614 <LCD_Display_Text>
	LCD_Display_Text(267,(const unsigned char*)Verdana8,0,24); 	// Profile
    27a0:	28 e1       	ldi	r18, 0x18	; 24
    27a2:	30 e0       	ldi	r19, 0x00	; 0
    27a4:	40 e0       	ldi	r20, 0x00	; 0
    27a6:	50 e0       	ldi	r21, 0x00	; 0
    27a8:	6f e1       	ldi	r22, 0x1F	; 31
    27aa:	7a e0       	ldi	r23, 0x0A	; 10
    27ac:	8b e0       	ldi	r24, 0x0B	; 11
    27ae:	91 e0       	ldi	r25, 0x01	; 1
    27b0:	0e 94 0a 23 	call	0x4614	; 0x4614 <LCD_Display_Text>
	LCD_Display_Text(23,(const unsigned char*)Verdana8,88,24); 	// Pos
    27b4:	28 e1       	ldi	r18, 0x18	; 24
    27b6:	30 e0       	ldi	r19, 0x00	; 0
    27b8:	48 e5       	ldi	r20, 0x58	; 88
    27ba:	50 e0       	ldi	r21, 0x00	; 0
    27bc:	6f e1       	ldi	r22, 0x1F	; 31
    27be:	7a e0       	ldi	r23, 0x0A	; 10
    27c0:	87 e1       	ldi	r24, 0x17	; 23
    27c2:	90 e0       	ldi	r25, 0x00	; 0
    27c4:	0e 94 0a 23 	call	0x4614	; 0x4614 <LCD_Display_Text>
	#ifdef QUADCOPTERPLUS
	LCD_Display_Text(273,(const unsigned char*)Verdana8,94,0); // Quad +
	#endif
	
	#ifdef QUADCOPTERX
	LCD_Display_Text(274,(const unsigned char*)Verdana8,93,0); // Quad X
    27c8:	20 e0       	ldi	r18, 0x00	; 0
    27ca:	30 e0       	ldi	r19, 0x00	; 0
    27cc:	4d e5       	ldi	r20, 0x5D	; 93
    27ce:	50 e0       	ldi	r21, 0x00	; 0
    27d0:	6f e1       	ldi	r22, 0x1F	; 31
    27d2:	7a e0       	ldi	r23, 0x0A	; 10
    27d4:	82 e1       	ldi	r24, 0x12	; 18
    27d6:	91 e0       	ldi	r25, 0x01	; 1
    27d8:	0e 94 0a 23 	call	0x4614	; 0x4614 <LCD_Display_Text>
	#endif
	
	// Display menu and markers
	LCD_Display_Text(9, (const unsigned char*)Wingdings, 0, 59);// Down
    27dc:	2b e3       	ldi	r18, 0x3B	; 59
    27de:	30 e0       	ldi	r19, 0x00	; 0
    27e0:	40 e0       	ldi	r20, 0x00	; 0
    27e2:	50 e0       	ldi	r21, 0x00	; 0
    27e4:	67 e0       	ldi	r22, 0x07	; 7
    27e6:	71 e0       	ldi	r23, 0x01	; 1
    27e8:	89 e0       	ldi	r24, 0x09	; 9
    27ea:	90 e0       	ldi	r25, 0x00	; 0
    27ec:	0e 94 0a 23 	call	0x4614	; 0x4614 <LCD_Display_Text>
	LCD_Display_Text(14,(const unsigned char*)Verdana8,10,55);	// Menu
    27f0:	27 e3       	ldi	r18, 0x37	; 55
    27f2:	30 e0       	ldi	r19, 0x00	; 0
    27f4:	4a e0       	ldi	r20, 0x0A	; 10
    27f6:	50 e0       	ldi	r21, 0x00	; 0
    27f8:	6f e1       	ldi	r22, 0x1F	; 31
    27fa:	7a e0       	ldi	r23, 0x0A	; 10
    27fc:	8e e0       	ldi	r24, 0x0E	; 14
    27fe:	90 e0       	ldi	r25, 0x00	; 0
    2800:	0e 94 0a 23 	call	0x4614	; 0x4614 <LCD_Display_Text>

	// Display values
	print_menu_text(0, 1, (62 + Config.RxMode), 45, 12); // Rx mode
    2804:	40 91 d2 05 	lds	r20, 0x05D2
    2808:	55 27       	eor	r21, r21
    280a:	47 fd       	sbrc	r20, 7
    280c:	50 95       	com	r21
    280e:	42 5c       	subi	r20, 0xC2	; 194
    2810:	5f 4f       	sbci	r21, 0xFF	; 255
    2812:	0c e0       	ldi	r16, 0x0C	; 12
    2814:	2d e2       	ldi	r18, 0x2D	; 45
    2816:	61 e0       	ldi	r22, 0x01	; 1
    2818:	80 e0       	ldi	r24, 0x00	; 0
    281a:	90 e0       	ldi	r25, 0x00	; 0
    281c:	0e 94 da 2f 	call	0x5fb4	; 0x5fb4 <print_menu_text>
    2820:	4a e0       	ldi	r20, 0x0A	; 10
    2822:	6b e5       	ldi	r22, 0x5B	; 91
    2824:	75 e0       	ldi	r23, 0x05	; 5
    2826:	80 91 1f 05 	lds	r24, 0x051F
    282a:	90 91 20 05 	lds	r25, 0x0520
    282e:	0e 94 06 4a 	call	0x940c	; 0x940c <__itoa_ncheck>
	mugui_lcd_puts(itoa(transition,pBuffer,10),(const unsigned char*)Verdana8,110,24); // Raw transition value
    2832:	28 e1       	ldi	r18, 0x18	; 24
    2834:	30 e0       	ldi	r19, 0x00	; 0
    2836:	4e e6       	ldi	r20, 0x6E	; 110
    2838:	50 e0       	ldi	r21, 0x00	; 0
    283a:	6f e1       	ldi	r22, 0x1F	; 31
    283c:	7a e0       	ldi	r23, 0x0A	; 10
    283e:	0e 94 95 3f 	call	0x7f2a	; 0x7f2a <mugui_lcd_puts>

	if (Config.RxMode == PWM)
    2842:	80 91 d2 05 	lds	r24, 0x05D2
    2846:	81 30       	cpi	r24, 0x01	; 1
    2848:	d9 f4       	brne	.+54     	; 0x2880 <Display_status+0x12a>
	{
		LCD_Display_Text(24,(const unsigned char*)Verdana8,77,12); // Interrupt counter text 
    284a:	2c e0       	ldi	r18, 0x0C	; 12
    284c:	30 e0       	ldi	r19, 0x00	; 0
    284e:	4d e4       	ldi	r20, 0x4D	; 77
    2850:	50 e0       	ldi	r21, 0x00	; 0
    2852:	6f e1       	ldi	r22, 0x1F	; 31
    2854:	7a e0       	ldi	r23, 0x0A	; 10
    2856:	88 e1       	ldi	r24, 0x18	; 24
    2858:	90 e0       	ldi	r25, 0x00	; 0
    285a:	0e 94 0a 23 	call	0x4614	; 0x4614 <LCD_Display_Text>
		mugui_lcd_puts(itoa(InterruptCount,pBuffer,10),(const unsigned char*)Verdana8,110,12); // Interrupt counter
    285e:	80 91 1a 05 	lds	r24, 0x051A
    2862:	90 91 1b 05 	lds	r25, 0x051B
    2866:	4a e0       	ldi	r20, 0x0A	; 10
    2868:	6b e5       	ldi	r22, 0x5B	; 91
    286a:	75 e0       	ldi	r23, 0x05	; 5
    286c:	0e 94 06 4a 	call	0x940c	; 0x940c <__itoa_ncheck>
    2870:	2c e0       	ldi	r18, 0x0C	; 12
    2872:	30 e0       	ldi	r19, 0x00	; 0
    2874:	4e e6       	ldi	r20, 0x6E	; 110
    2876:	50 e0       	ldi	r21, 0x00	; 0
    2878:	6f e1       	ldi	r22, 0x1F	; 31
    287a:	7a e0       	ldi	r23, 0x0A	; 10
    287c:	0e 94 95 3f 	call	0x7f2a	; 0x7f2a <mugui_lcd_puts>
	}

	// Display transition point
	if (transition <= 0)
    2880:	80 91 1f 05 	lds	r24, 0x051F
    2884:	90 91 20 05 	lds	r25, 0x0520
    2888:	18 16       	cp	r1, r24
    288a:	19 06       	cpc	r1, r25
    288c:	4c f0       	brlt	.+18     	; 0x28a0 <Display_status+0x14a>
	{
		LCD_Display_Text(48,(const unsigned char*)Verdana8,45,24);
    288e:	28 e1       	ldi	r18, 0x18	; 24
    2890:	30 e0       	ldi	r19, 0x00	; 0
    2892:	4d e2       	ldi	r20, 0x2D	; 45
    2894:	50 e0       	ldi	r21, 0x00	; 0
    2896:	6f e1       	ldi	r22, 0x1F	; 31
    2898:	7a e0       	ldi	r23, 0x0A	; 10
    289a:	80 e3       	ldi	r24, 0x30	; 48
    289c:	90 e0       	ldi	r25, 0x00	; 0
    289e:	31 c0       	rjmp	.+98     	; 0x2902 <Display_status+0x1ac>
	}
	else if (transition >= 100)
    28a0:	84 36       	cpi	r24, 0x64	; 100
    28a2:	91 05       	cpc	r25, r1
    28a4:	4c f0       	brlt	.+18     	; 0x28b8 <Display_status+0x162>
	{
		LCD_Display_Text(50,(const unsigned char*)Verdana8,45,24);
    28a6:	28 e1       	ldi	r18, 0x18	; 24
    28a8:	30 e0       	ldi	r19, 0x00	; 0
    28aa:	4d e2       	ldi	r20, 0x2D	; 45
    28ac:	50 e0       	ldi	r21, 0x00	; 0
    28ae:	6f e1       	ldi	r22, 0x1F	; 31
    28b0:	7a e0       	ldi	r23, 0x0A	; 10
    28b2:	82 e3       	ldi	r24, 0x32	; 50
    28b4:	90 e0       	ldi	r25, 0x00	; 0
    28b6:	25 c0       	rjmp	.+74     	; 0x2902 <Display_status+0x1ac>
	}
	else if (transition == Config.Transition_P1n)
    28b8:	20 91 d8 05 	lds	r18, 0x05D8
    28bc:	33 27       	eor	r19, r19
    28be:	27 fd       	sbrc	r18, 7
    28c0:	30 95       	com	r19
    28c2:	82 17       	cp	r24, r18
    28c4:	93 07       	cpc	r25, r19
    28c6:	49 f4       	brne	.+18     	; 0x28da <Display_status+0x184>
	{
		LCD_Display_Text(49,(const unsigned char*)Verdana8,45,24);
    28c8:	28 e1       	ldi	r18, 0x18	; 24
    28ca:	30 e0       	ldi	r19, 0x00	; 0
    28cc:	4d e2       	ldi	r20, 0x2D	; 45
    28ce:	50 e0       	ldi	r21, 0x00	; 0
    28d0:	6f e1       	ldi	r22, 0x1F	; 31
    28d2:	7a e0       	ldi	r23, 0x0A	; 10
    28d4:	81 e3       	ldi	r24, 0x31	; 49
    28d6:	90 e0       	ldi	r25, 0x00	; 0
    28d8:	14 c0       	rjmp	.+40     	; 0x2902 <Display_status+0x1ac>
	}
	else if (transition < Config.Transition_P1n)
    28da:	82 17       	cp	r24, r18
    28dc:	93 07       	cpc	r25, r19
    28de:	4c f4       	brge	.+18     	; 0x28f2 <Display_status+0x19c>
	{
		LCD_Display_Text(51,(const unsigned char*)Verdana8,45,24);
    28e0:	28 e1       	ldi	r18, 0x18	; 24
    28e2:	30 e0       	ldi	r19, 0x00	; 0
    28e4:	4d e2       	ldi	r20, 0x2D	; 45
    28e6:	50 e0       	ldi	r21, 0x00	; 0
    28e8:	6f e1       	ldi	r22, 0x1F	; 31
    28ea:	7a e0       	ldi	r23, 0x0A	; 10
    28ec:	83 e3       	ldi	r24, 0x33	; 51
    28ee:	90 e0       	ldi	r25, 0x00	; 0
    28f0:	08 c0       	rjmp	.+16     	; 0x2902 <Display_status+0x1ac>
	}
	else
	{
		LCD_Display_Text(52,(const unsigned char*)Verdana8,45,24);
    28f2:	28 e1       	ldi	r18, 0x18	; 24
    28f4:	30 e0       	ldi	r19, 0x00	; 0
    28f6:	4d e2       	ldi	r20, 0x2D	; 45
    28f8:	50 e0       	ldi	r21, 0x00	; 0
    28fa:	6f e1       	ldi	r22, 0x1F	; 31
    28fc:	7a e0       	ldi	r23, 0x0A	; 10
    28fe:	84 e3       	ldi	r24, 0x34	; 52
    2900:	90 e0       	ldi	r25, 0x00	; 0
    2902:	0e 94 0a 23 	call	0x4614	; 0x4614 <LCD_Display_Text>
	}


	// Don't display battery text if there are error messages
	if (General_error == 0)
    2906:	80 91 1e 05 	lds	r24, 0x051E
    290a:	81 11       	cpse	r24, r1
    290c:	85 c0       	rjmp	.+266    	; 0x2a18 <Display_status+0x2c2>
	{
		// Display voltage
		uint8_t x_loc = 45;		// X location of voltage display
		uint8_t y_loc = 36;		// Y location of voltage display

		LCD_Display_Text(133,(const unsigned char*)Verdana8,0,36); 	// Battery
    290e:	24 e2       	ldi	r18, 0x24	; 36
    2910:	30 e0       	ldi	r19, 0x00	; 0
    2912:	40 e0       	ldi	r20, 0x00	; 0
    2914:	50 e0       	ldi	r21, 0x00	; 0
    2916:	6f e1       	ldi	r22, 0x1F	; 31
    2918:	7a e0       	ldi	r23, 0x0A	; 10
    291a:	85 e8       	ldi	r24, 0x85	; 133
    291c:	90 e0       	ldi	r25, 0x00	; 0
    291e:	0e 94 0a 23 	call	0x4614	; 0x4614 <LCD_Display_Text>

		vbat_temp = GetVbat();
    2922:	0e 94 11 47 	call	0x8e22	; 0x8e22 <GetVbat>
    2926:	6c 01       	movw	r12, r24
		temp = vbat_temp/100;	// Display whole decimal part first
    2928:	64 e6       	ldi	r22, 0x64	; 100
    292a:	70 e0       	ldi	r23, 0x00	; 0
    292c:	0e 94 4b 49 	call	0x9296	; 0x9296 <__udivmodhi4>
    2930:	8b 01       	movw	r16, r22
    2932:	4a e0       	ldi	r20, 0x0A	; 10
    2934:	6b e5       	ldi	r22, 0x5B	; 91
    2936:	75 e0       	ldi	r23, 0x05	; 5
    2938:	c8 01       	movw	r24, r16
    293a:	0e 94 06 4a 	call	0x940c	; 0x940c <__itoa_ncheck>
		mugui_text_sizestring(itoa(temp,pBuffer,10), (const unsigned char*)Verdana8, &size);
    293e:	ae 01       	movw	r20, r28
    2940:	4f 5f       	subi	r20, 0xFF	; 255
    2942:	5f 4f       	sbci	r21, 0xFF	; 255
    2944:	6f e1       	ldi	r22, 0x1F	; 31
    2946:	7a e0       	ldi	r23, 0x0A	; 10
    2948:	0e 94 46 3e 	call	0x7c8c	; 0x7c8c <mugui_text_sizestring>
    294c:	4a e0       	ldi	r20, 0x0A	; 10
    294e:	6b e5       	ldi	r22, 0x5B	; 91
    2950:	75 e0       	ldi	r23, 0x05	; 5
    2952:	c8 01       	movw	r24, r16
    2954:	0e 94 06 4a 	call	0x940c	; 0x940c <__itoa_ncheck>
		mugui_lcd_puts(itoa(temp,pBuffer,10),(const unsigned char*)Verdana8,x_loc,y_loc);
    2958:	24 e2       	ldi	r18, 0x24	; 36
    295a:	30 e0       	ldi	r19, 0x00	; 0
    295c:	4d e2       	ldi	r20, 0x2D	; 45
    295e:	50 e0       	ldi	r21, 0x00	; 0
    2960:	6f e1       	ldi	r22, 0x1F	; 31
    2962:	7a e0       	ldi	r23, 0x0A	; 10
    2964:	0e 94 95 3f 	call	0x7f2a	; 0x7f2a <mugui_lcd_puts>
		pos1 = size.x;

		vbat_temp = vbat_temp - (temp * 100); // Now display the parts to the right of the decimal point
    2968:	2c e9       	ldi	r18, 0x9C	; 156
    296a:	20 03       	mulsu	r18, r16
    296c:	70 01       	movw	r14, r0
    296e:	21 9f       	mul	r18, r17
    2970:	f0 0c       	add	r15, r0
    2972:	11 24       	eor	r1, r1
    2974:	ec 0c       	add	r14, r12
    2976:	fd 1c       	adc	r15, r13

		LCD_Display_Text(268,(const unsigned char*)Verdana8,(x_loc + pos1),y_loc);
    2978:	09 81       	ldd	r16, Y+1	; 0x01
    297a:	11 27       	eor	r17, r17
    297c:	07 fd       	sbrc	r16, 7
    297e:	10 95       	com	r17
    2980:	03 5d       	subi	r16, 0xD3	; 211
    2982:	1f 4f       	sbci	r17, 0xFF	; 255
    2984:	24 e2       	ldi	r18, 0x24	; 36
    2986:	30 e0       	ldi	r19, 0x00	; 0
    2988:	a8 01       	movw	r20, r16
    298a:	6f e1       	ldi	r22, 0x1F	; 31
    298c:	7a e0       	ldi	r23, 0x0A	; 10
    298e:	8c e0       	ldi	r24, 0x0C	; 12
    2990:	91 e0       	ldi	r25, 0x01	; 1
    2992:	0e 94 0a 23 	call	0x4614	; 0x4614 <LCD_Display_Text>
		mugui_text_sizestring(".", (const unsigned char*)Verdana8, &size);
    2996:	ae 01       	movw	r20, r28
    2998:	4f 5f       	subi	r20, 0xFF	; 255
    299a:	5f 4f       	sbci	r21, 0xFF	; 255
    299c:	6f e1       	ldi	r22, 0x1F	; 31
    299e:	7a e0       	ldi	r23, 0x0A	; 10
    29a0:	88 e0       	ldi	r24, 0x08	; 8
    29a2:	95 e0       	ldi	r25, 0x05	; 5
    29a4:	0e 94 46 3e 	call	0x7c8c	; 0x7c8c <mugui_text_sizestring>
		pos3 = size.x;
    29a8:	c9 80       	ldd	r12, Y+1	; 0x01
		mugui_text_sizestring("0", (const unsigned char*)Verdana8, &size);
    29aa:	ae 01       	movw	r20, r28
    29ac:	4f 5f       	subi	r20, 0xFF	; 255
    29ae:	5f 4f       	sbci	r21, 0xFF	; 255
    29b0:	6f e1       	ldi	r22, 0x1F	; 31
    29b2:	7a e0       	ldi	r23, 0x0A	; 10
    29b4:	8a e0       	ldi	r24, 0x0A	; 10
    29b6:	95 e0       	ldi	r25, 0x05	; 5
    29b8:	0e 94 46 3e 	call	0x7c8c	; 0x7c8c <mugui_text_sizestring>
		pos2 = size.x;
    29bc:	b9 80       	ldd	r11, Y+1	; 0x01
    29be:	dd 24       	eor	r13, r13
    29c0:	c7 fc       	sbrc	r12, 7
    29c2:	d0 94       	com	r13

		if (vbat_temp >= 10)
    29c4:	8a e0       	ldi	r24, 0x0A	; 10
    29c6:	e8 16       	cp	r14, r24
    29c8:	f1 04       	cpc	r15, r1
    29ca:	40 f0       	brcs	.+16     	; 0x29dc <Display_status+0x286>
    29cc:	4a e0       	ldi	r20, 0x0A	; 10
    29ce:	6b e5       	ldi	r22, 0x5B	; 91
    29d0:	75 e0       	ldi	r23, 0x05	; 5
    29d2:	c7 01       	movw	r24, r14
    29d4:	0e 94 06 4a 	call	0x940c	; 0x940c <__itoa_ncheck>
		{
			mugui_lcd_puts(itoa(vbat_temp,pBuffer,10),(const unsigned char*)Verdana8,(x_loc + pos1 + pos3),y_loc);
    29d8:	a8 01       	movw	r20, r16
    29da:	16 c0       	rjmp	.+44     	; 0x2a08 <Display_status+0x2b2>
		}
		else
		{
			LCD_Display_Text(269,(const unsigned char*)Verdana8,(x_loc + pos1 + pos3),y_loc);
    29dc:	a8 01       	movw	r20, r16
    29de:	4c 0d       	add	r20, r12
    29e0:	5d 1d       	adc	r21, r13
    29e2:	24 e2       	ldi	r18, 0x24	; 36
    29e4:	30 e0       	ldi	r19, 0x00	; 0
    29e6:	6f e1       	ldi	r22, 0x1F	; 31
    29e8:	7a e0       	ldi	r23, 0x0A	; 10
    29ea:	8d e0       	ldi	r24, 0x0D	; 13
    29ec:	91 e0       	ldi	r25, 0x01	; 1
    29ee:	0e 94 0a 23 	call	0x4614	; 0x4614 <LCD_Display_Text>
    29f2:	4a e0       	ldi	r20, 0x0A	; 10
    29f4:	6b e5       	ldi	r22, 0x5B	; 91
    29f6:	75 e0       	ldi	r23, 0x05	; 5
    29f8:	c7 01       	movw	r24, r14
    29fa:	0e 94 06 4a 	call	0x940c	; 0x940c <__itoa_ncheck>
			mugui_lcd_puts(itoa(vbat_temp,pBuffer,10),(const unsigned char*)Verdana8,(x_loc + pos1 + pos2 + pos3),y_loc);
    29fe:	a8 01       	movw	r20, r16
    2a00:	4b 0d       	add	r20, r11
    2a02:	51 1d       	adc	r21, r1
    2a04:	b7 fc       	sbrc	r11, 7
    2a06:	5a 95       	dec	r21
    2a08:	4c 0d       	add	r20, r12
    2a0a:	5d 1d       	adc	r21, r13
    2a0c:	24 e2       	ldi	r18, 0x24	; 36
    2a0e:	30 e0       	ldi	r19, 0x00	; 0
    2a10:	6f e1       	ldi	r22, 0x1F	; 31
    2a12:	7a e0       	ldi	r23, 0x0A	; 10
    2a14:	0e 94 95 3f 	call	0x7f2a	; 0x7f2a <mugui_lcd_puts>
		}
	}
	
	// Display error messages
	if (General_error != 0)
    2a18:	80 91 1e 05 	lds	r24, 0x051E
    2a1c:	88 23       	and	r24, r24
    2a1e:	09 f4       	brne	.+2      	; 0x2a22 <Display_status+0x2cc>
    2a20:	53 c0       	rjmp	.+166    	; 0x2ac8 <Display_status+0x372>
	{
		// Prioritise error from top to bottom
		if((General_error & (1 << LVA_ALARM)) != 0)
    2a22:	80 91 1e 05 	lds	r24, 0x051E
    2a26:	83 ff       	sbrs	r24, 3
    2a28:	13 c0       	rjmp	.+38     	; 0x2a50 <Display_status+0x2fa>
		{
			LCD_Display_Text(134,(const unsigned char*)Verdana14,15,37);	// Battery
    2a2a:	25 e2       	ldi	r18, 0x25	; 37
    2a2c:	30 e0       	ldi	r19, 0x00	; 0
    2a2e:	4f e0       	ldi	r20, 0x0F	; 15
    2a30:	50 e0       	ldi	r21, 0x00	; 0
    2a32:	61 e7       	ldi	r22, 0x71	; 113
    2a34:	71 e0       	ldi	r23, 0x01	; 1
    2a36:	86 e8       	ldi	r24, 0x86	; 134
    2a38:	90 e0       	ldi	r25, 0x00	; 0
    2a3a:	0e 94 0a 23 	call	0x4614	; 0x4614 <LCD_Display_Text>
			LCD_Display_Text(271,(const unsigned char*)Verdana14,79,37);	// low
    2a3e:	25 e2       	ldi	r18, 0x25	; 37
    2a40:	30 e0       	ldi	r19, 0x00	; 0
    2a42:	4f e4       	ldi	r20, 0x4F	; 79
    2a44:	50 e0       	ldi	r21, 0x00	; 0
    2a46:	61 e7       	ldi	r22, 0x71	; 113
    2a48:	71 e0       	ldi	r23, 0x01	; 1
    2a4a:	8f e0       	ldi	r24, 0x0F	; 15
    2a4c:	91 e0       	ldi	r25, 0x01	; 1
    2a4e:	3a c0       	rjmp	.+116    	; 0x2ac4 <Display_status+0x36e>
		}
		else if((General_error & (1 << NO_SIGNAL)) != 0)
    2a50:	80 91 1e 05 	lds	r24, 0x051E
    2a54:	81 ff       	sbrs	r24, 1
    2a56:	13 c0       	rjmp	.+38     	; 0x2a7e <Display_status+0x328>
		{
			LCD_Display_Text(75,(const unsigned char*)Verdana14,30,37); 	// No
    2a58:	25 e2       	ldi	r18, 0x25	; 37
    2a5a:	30 e0       	ldi	r19, 0x00	; 0
    2a5c:	4e e1       	ldi	r20, 0x1E	; 30
    2a5e:	50 e0       	ldi	r21, 0x00	; 0
    2a60:	61 e7       	ldi	r22, 0x71	; 113
    2a62:	71 e0       	ldi	r23, 0x01	; 1
    2a64:	8b e4       	ldi	r24, 0x4B	; 75
    2a66:	90 e0       	ldi	r25, 0x00	; 0
    2a68:	0e 94 0a 23 	call	0x4614	; 0x4614 <LCD_Display_Text>
			LCD_Display_Text(272,(const unsigned char*)Verdana14,55,37);	// signal
    2a6c:	25 e2       	ldi	r18, 0x25	; 37
    2a6e:	30 e0       	ldi	r19, 0x00	; 0
    2a70:	47 e3       	ldi	r20, 0x37	; 55
    2a72:	50 e0       	ldi	r21, 0x00	; 0
    2a74:	61 e7       	ldi	r22, 0x71	; 113
    2a76:	71 e0       	ldi	r23, 0x01	; 1
    2a78:	80 e1       	ldi	r24, 0x10	; 16
    2a7a:	91 e0       	ldi	r25, 0x01	; 1
    2a7c:	23 c0       	rjmp	.+70     	; 0x2ac4 <Display_status+0x36e>
		}
		else if((General_error & (1 << THROTTLE_HIGH)) != 0)
    2a7e:	80 91 1e 05 	lds	r24, 0x051E
    2a82:	80 ff       	sbrs	r24, 0
    2a84:	13 c0       	rjmp	.+38     	; 0x2aac <Display_status+0x356>
		{
			LCD_Display_Text(105,(const unsigned char*)Verdana14,11,37);	// Throttle
    2a86:	25 e2       	ldi	r18, 0x25	; 37
    2a88:	30 e0       	ldi	r19, 0x00	; 0
    2a8a:	4b e0       	ldi	r20, 0x0B	; 11
    2a8c:	50 e0       	ldi	r21, 0x00	; 0
    2a8e:	61 e7       	ldi	r22, 0x71	; 113
    2a90:	71 e0       	ldi	r23, 0x01	; 1
    2a92:	89 e6       	ldi	r24, 0x69	; 105
    2a94:	90 e0       	ldi	r25, 0x00	; 0
    2a96:	0e 94 0a 23 	call	0x4614	; 0x4614 <LCD_Display_Text>
			LCD_Display_Text(270,(const unsigned char*)Verdana14,82,37);	// high
    2a9a:	25 e2       	ldi	r18, 0x25	; 37
    2a9c:	30 e0       	ldi	r19, 0x00	; 0
    2a9e:	42 e5       	ldi	r20, 0x52	; 82
    2aa0:	50 e0       	ldi	r21, 0x00	; 0
    2aa2:	61 e7       	ldi	r22, 0x71	; 113
    2aa4:	71 e0       	ldi	r23, 0x01	; 1
    2aa6:	8e e0       	ldi	r24, 0x0E	; 14
    2aa8:	91 e0       	ldi	r25, 0x01	; 1
    2aaa:	0c c0       	rjmp	.+24     	; 0x2ac4 <Display_status+0x36e>
		}
		else if((General_error & (1 << DISARMED)) != 0)
    2aac:	80 91 1e 05 	lds	r24, 0x051E
    2ab0:	82 ff       	sbrs	r24, 2
    2ab2:	0a c0       	rjmp	.+20     	; 0x2ac8 <Display_status+0x372>
		{
			LCD_Display_Text(18,(const unsigned char*)Verdana14,25,37); 	// Disarmed
    2ab4:	25 e2       	ldi	r18, 0x25	; 37
    2ab6:	30 e0       	ldi	r19, 0x00	; 0
    2ab8:	49 e1       	ldi	r20, 0x19	; 25
    2aba:	50 e0       	ldi	r21, 0x00	; 0
    2abc:	61 e7       	ldi	r22, 0x71	; 113
    2abe:	71 e0       	ldi	r23, 0x01	; 1
    2ac0:	82 e1       	ldi	r24, 0x12	; 18
    2ac2:	90 e0       	ldi	r25, 0x00	; 0
    2ac4:	0e 94 0a 23 	call	0x4614	; 0x4614 <LCD_Display_Text>
		}
	}

	// Write buffer to complete
	write_buffer(buffer);
    2ac8:	80 e0       	ldi	r24, 0x00	; 0
    2aca:	91 e0       	ldi	r25, 0x01	; 1
    2acc:	0e 94 2b 21 	call	0x4256	; 0x4256 <write_buffer>
	clear_buffer(buffer);
    2ad0:	80 e0       	ldi	r24, 0x00	; 0
    2ad2:	91 e0       	ldi	r25, 0x01	; 1
    2ad4:	0e 94 5d 21 	call	0x42ba	; 0x42ba <clear_buffer>
}
    2ad8:	0f 90       	pop	r0
    2ada:	0f 90       	pop	r0
    2adc:	0f 90       	pop	r0
    2ade:	0f 90       	pop	r0
    2ae0:	df 91       	pop	r29
    2ae2:	cf 91       	pop	r28
    2ae4:	1f 91       	pop	r17
    2ae6:	0f 91       	pop	r16
    2ae8:	ff 90       	pop	r15
    2aea:	ef 90       	pop	r14
    2aec:	df 90       	pop	r13
    2aee:	cf 90       	pop	r12
    2af0:	bf 90       	pop	r11
    2af2:	08 95       	ret

00002af4 <Display_sticks>:
//************************************************************
// Code
//************************************************************

void Display_sticks(void)
{
    2af4:	af 92       	push	r10
    2af6:	bf 92       	push	r11
    2af8:	cf 92       	push	r12
    2afa:	df 92       	push	r13
    2afc:	ef 92       	push	r14
    2afe:	ff 92       	push	r15
    2b00:	0f 93       	push	r16
    2b02:	1f 93       	push	r17
    2b04:	cf 93       	push	r28
    2b06:	df 93       	push	r29
	int8_t	temp_aileron, temp_elevator, temp_rudder;
	bool	CalibrateDone = false;
	bool	CalibrateStarted = false;

	// Save original settings in case user aborts
	temp_aileron = Config.AileronPol;
    2b08:	d0 90 d9 05 	lds	r13, 0x05D9
	temp_elevator = Config.ElevatorPol;
    2b0c:	f0 90 da 05 	lds	r15, 0x05DA
	temp_rudder = Config.RudderPol;
    2b10:	a0 90 3a 06 	lds	r10, 0x063A

	// Reset to defaults - not ideal, but it works
	Config.AileronPol = NORMAL;
    2b14:	10 92 d9 05 	sts	0x05D9, r1
	Config.ElevatorPol =  NORMAL;
    2b18:	10 92 da 05 	sts	0x05DA, r1
	Config.RudderPol = NORMAL;
    2b1c:	10 92 3a 06 	sts	0x063A, r1
{
	int8_t	i;
	int8_t	offset;
	int8_t	temp_aileron, temp_elevator, temp_rudder;
	bool	CalibrateDone = false;
	bool	CalibrateStarted = false;
    2b20:	d0 e0       	ldi	r29, 0x00	; 0
void Display_sticks(void)
{
	int8_t	i;
	int8_t	offset;
	int8_t	temp_aileron, temp_elevator, temp_rudder;
	bool	CalibrateDone = false;
    2b22:	c0 e0       	ldi	r28, 0x00	; 0
	Config.AileronPol = NORMAL;
	Config.ElevatorPol =  NORMAL;
	Config.RudderPol = NORMAL;

	// Until exit button pressed or complete
	while((BUTTON1 != 0) && (!CalibrateDone))
    2b24:	1f 9b       	sbis	0x03, 7	; 3
    2b26:	b6 c0       	rjmp	.+364    	; 0x2c94 <Display_sticks+0x1a0>
    2b28:	c1 11       	cpse	r28, r1
    2b2a:	b6 c0       	rjmp	.+364    	; 0x2c98 <Display_sticks+0x1a4>
	{
		// Draw first stick on the left
		offset = 0;

		// Clear screen buffer
		clear_buffer(buffer);
    2b2c:	80 e0       	ldi	r24, 0x00	; 0
    2b2e:	91 e0       	ldi	r25, 0x01	; 1
    2b30:	0e 94 5d 21 	call	0x42ba	; 0x42ba <clear_buffer>
    2b34:	92 e0       	ldi	r25, 0x02	; 2
    2b36:	c9 2e       	mov	r12, r25

	// Until exit button pressed or complete
	while((BUTTON1 != 0) && (!CalibrateDone))
	{
		// Draw first stick on the left
		offset = 0;
    2b38:	10 e0       	ldi	r17, 0x00	; 0
		clear_buffer(buffer);

		// Draw graphic
		for (i = 0; i < 2; i++)
		{
			drawrect(buffer, 17 + offset, 0, 40, 40, 1);			// Box
    2b3a:	61 e1       	ldi	r22, 0x11	; 17
    2b3c:	61 0f       	add	r22, r17
    2b3e:	ee 24       	eor	r14, r14
    2b40:	e3 94       	inc	r14
    2b42:	08 e2       	ldi	r16, 0x28	; 40
    2b44:	28 e2       	ldi	r18, 0x28	; 40
    2b46:	40 e0       	ldi	r20, 0x00	; 0
    2b48:	80 e0       	ldi	r24, 0x00	; 0
    2b4a:	91 e0       	ldi	r25, 0x01	; 1
    2b4c:	0e 94 27 22 	call	0x444e	; 0x444e <drawrect>
			drawline(buffer, 38 + offset,20, 48 + offset,  3, 1); 	// Line 1
    2b50:	86 e2       	ldi	r24, 0x26	; 38
    2b52:	b8 2e       	mov	r11, r24
    2b54:	b1 0e       	add	r11, r17
    2b56:	20 e3       	ldi	r18, 0x30	; 48
    2b58:	21 0f       	add	r18, r17
    2b5a:	03 e0       	ldi	r16, 0x03	; 3
    2b5c:	44 e1       	ldi	r20, 0x14	; 20
    2b5e:	6b 2d       	mov	r22, r11
    2b60:	80 e0       	ldi	r24, 0x00	; 0
    2b62:	91 e0       	ldi	r25, 0x01	; 1
    2b64:	0e 94 bd 21 	call	0x437a	; 0x437a <drawline>
			drawline(buffer, 41 + offset,21, 56 + offset,  6, 1); 	// Line 2
    2b68:	28 e3       	ldi	r18, 0x38	; 56
    2b6a:	21 0f       	add	r18, r17
    2b6c:	69 e2       	ldi	r22, 0x29	; 41
    2b6e:	61 0f       	add	r22, r17
    2b70:	06 e0       	ldi	r16, 0x06	; 6
    2b72:	45 e1       	ldi	r20, 0x15	; 21
    2b74:	80 e0       	ldi	r24, 0x00	; 0
    2b76:	91 e0       	ldi	r25, 0x01	; 1
    2b78:	0e 94 bd 21 	call	0x437a	; 0x437a <drawline>
			fillcircle(buffer, 38 + offset, 21, 2, 1);				// Center
    2b7c:	01 e0       	ldi	r16, 0x01	; 1
    2b7e:	22 e0       	ldi	r18, 0x02	; 2
    2b80:	45 e1       	ldi	r20, 0x15	; 21
    2b82:	6b 2d       	mov	r22, r11
    2b84:	80 e0       	ldi	r24, 0x00	; 0
    2b86:	91 e0       	ldi	r25, 0x01	; 1
    2b88:	0e 94 79 22 	call	0x44f2	; 0x44f2 <fillcircle>
			fillcircle(buffer, 51 + offset, 5, 4, 1);				// End
    2b8c:	63 e3       	ldi	r22, 0x33	; 51
    2b8e:	61 0f       	add	r22, r17
    2b90:	24 e0       	ldi	r18, 0x04	; 4
    2b92:	45 e0       	ldi	r20, 0x05	; 5
    2b94:	80 e0       	ldi	r24, 0x00	; 0
    2b96:	91 e0       	ldi	r25, 0x01	; 1
    2b98:	0e 94 79 22 	call	0x44f2	; 0x44f2 <fillcircle>
    2b9c:	ca 94       	dec	r12

		// Clear screen buffer
		clear_buffer(buffer);

		// Draw graphic
		for (i = 0; i < 2; i++)
    2b9e:	11 f0       	breq	.+4      	; 0x2ba4 <Display_sticks+0xb0>
			drawline(buffer, 41 + offset,21, 56 + offset,  6, 1); 	// Line 2
			fillcircle(buffer, 38 + offset, 21, 2, 1);				// Center
			fillcircle(buffer, 51 + offset, 5, 4, 1);				// End

			// Draw second stick on the right
			offset = 52;
    2ba0:	14 e3       	ldi	r17, 0x34	; 52
    2ba2:	cb cf       	rjmp	.-106    	; 0x2b3a <Display_sticks+0x46>
		}

		// Print bottom text and markers
		LCD_Display_Text(12, (const unsigned char*)Wingdings, 0, 57); 		// Left
    2ba4:	29 e3       	ldi	r18, 0x39	; 57
    2ba6:	30 e0       	ldi	r19, 0x00	; 0
    2ba8:	40 e0       	ldi	r20, 0x00	; 0
    2baa:	50 e0       	ldi	r21, 0x00	; 0
    2bac:	67 e0       	ldi	r22, 0x07	; 7
    2bae:	71 e0       	ldi	r23, 0x01	; 1
    2bb0:	8c e0       	ldi	r24, 0x0C	; 12
    2bb2:	90 e0       	ldi	r25, 0x00	; 0
    2bb4:	0e 94 0a 23 	call	0x4614	; 0x4614 <LCD_Display_Text>

		// If uncalibrated
		if (!CalibrateDone)
		{
			RxGetChannels();
    2bb8:	0e 94 47 44 	call	0x888e	; 0x888e <RxGetChannels>
			
			// Display warning if sticks not centered or no RC signal while not started calibrating
			if (((RCinputs[AILERON] < -2000) || (RCinputs[AILERON] > 2000)) && !CalibrateStarted)
    2bbc:	80 91 25 08 	lds	r24, 0x0825
    2bc0:	90 91 26 08 	lds	r25, 0x0826
    2bc4:	80 33       	cpi	r24, 0x30	; 48
    2bc6:	98 4f       	sbci	r25, 0xF8	; 248
    2bc8:	3c f0       	brlt	.+14     	; 0x2bd8 <Display_sticks+0xe4>
    2bca:	80 91 25 08 	lds	r24, 0x0825
    2bce:	90 91 26 08 	lds	r25, 0x0826
    2bd2:	81 3d       	cpi	r24, 0xD1	; 209
    2bd4:	97 40       	sbci	r25, 0x07	; 7
    2bd6:	6c f0       	brlt	.+26     	; 0x2bf2 <Display_sticks+0xfe>
    2bd8:	d1 11       	cpse	r29, r1
    2bda:	0b c0       	rjmp	.+22     	; 0x2bf2 <Display_sticks+0xfe>
			{
				LCD_Display_Text(135,(const unsigned char*)Verdana14,16,43); 	// "No RX signal?"
    2bdc:	2b e2       	ldi	r18, 0x2B	; 43
    2bde:	30 e0       	ldi	r19, 0x00	; 0
    2be0:	40 e1       	ldi	r20, 0x10	; 16
    2be2:	50 e0       	ldi	r21, 0x00	; 0
    2be4:	61 e7       	ldi	r22, 0x71	; 113
    2be6:	71 e0       	ldi	r23, 0x01	; 1
    2be8:	87 e8       	ldi	r24, 0x87	; 135
    2bea:	90 e0       	ldi	r25, 0x00	; 0
    2bec:	0e 94 0a 23 	call	0x4614	; 0x4614 <LCD_Display_Text>
    2bf0:	4c c0       	rjmp	.+152    	; 0x2c8a <Display_sticks+0x196>
			}

			// Sticks have not moved far enough but RC being received
			else if ((RCinputs[AILERON] < 500) && (RCinputs[AILERON] > -500))
    2bf2:	80 91 25 08 	lds	r24, 0x0825
    2bf6:	90 91 26 08 	lds	r25, 0x0826
    2bfa:	84 3f       	cpi	r24, 0xF4	; 244
    2bfc:	91 40       	sbci	r25, 0x01	; 1
    2bfe:	9c f4       	brge	.+38     	; 0x2c26 <Display_sticks+0x132>
    2c00:	80 91 25 08 	lds	r24, 0x0825
    2c04:	90 91 26 08 	lds	r25, 0x0826
    2c08:	8d 30       	cpi	r24, 0x0D	; 13
    2c0a:	9e 4f       	sbci	r25, 0xFE	; 254
    2c0c:	64 f0       	brlt	.+24     	; 0x2c26 <Display_sticks+0x132>
			{
				CalibrateStarted = true;
				LCD_Display_Text(136,(const unsigned char*)Verdana14,9,43); 	// "Hold as shown"
    2c0e:	2b e2       	ldi	r18, 0x2B	; 43
    2c10:	30 e0       	ldi	r19, 0x00	; 0
    2c12:	49 e0       	ldi	r20, 0x09	; 9
    2c14:	50 e0       	ldi	r21, 0x00	; 0
    2c16:	61 e7       	ldi	r22, 0x71	; 113
    2c18:	71 e0       	ldi	r23, 0x01	; 1
    2c1a:	88 e8       	ldi	r24, 0x88	; 136
    2c1c:	90 e0       	ldi	r25, 0x00	; 0
    2c1e:	0e 94 0a 23 	call	0x4614	; 0x4614 <LCD_Display_Text>
			}

			// Sticks have not moved far enough but RC being received
			else if ((RCinputs[AILERON] < 500) && (RCinputs[AILERON] > -500))
			{
				CalibrateStarted = true;
    2c22:	d1 e0       	ldi	r29, 0x01	; 1
				LCD_Display_Text(136,(const unsigned char*)Verdana14,9,43); 	// "Hold as shown"
    2c24:	32 c0       	rjmp	.+100    	; 0x2c8a <Display_sticks+0x196>

			// Sticks should now be in the right position
			// Reverse wrong input channels
			else
			{
				if (RCinputs[AILERON] < 0)
    2c26:	80 91 25 08 	lds	r24, 0x0825
    2c2a:	90 91 26 08 	lds	r25, 0x0826
    2c2e:	97 ff       	sbrs	r25, 7
    2c30:	03 c0       	rjmp	.+6      	; 0x2c38 <Display_sticks+0x144>
				{
					Config.AileronPol = REVERSED;
    2c32:	81 e0       	ldi	r24, 0x01	; 1
    2c34:	80 93 d9 05 	sts	0x05D9, r24
				}

				if (RCinputs[ELEVATOR] < 0)
    2c38:	80 91 27 08 	lds	r24, 0x0827
    2c3c:	90 91 28 08 	lds	r25, 0x0828
    2c40:	97 ff       	sbrs	r25, 7
    2c42:	03 c0       	rjmp	.+6      	; 0x2c4a <Display_sticks+0x156>
				{
					Config.ElevatorPol = REVERSED;
    2c44:	81 e0       	ldi	r24, 0x01	; 1
    2c46:	80 93 da 05 	sts	0x05DA, r24
				}

				if (RCinputs[RUDDER] < 0)
    2c4a:	80 91 29 08 	lds	r24, 0x0829
    2c4e:	90 91 2a 08 	lds	r25, 0x082A
    2c52:	97 ff       	sbrs	r25, 7
    2c54:	03 c0       	rjmp	.+6      	; 0x2c5c <Display_sticks+0x168>
				{
					Config.RudderPol = REVERSED;
    2c56:	81 e0       	ldi	r24, 0x01	; 1
    2c58:	80 93 3a 06 	sts	0x063A, r24
				}

				// If all positive - done!
				if ((RCinputs[AILERON] > 0) && (RCinputs[ELEVATOR] > 0) && (RCinputs[RUDDER] > 0))
    2c5c:	80 91 25 08 	lds	r24, 0x0825
    2c60:	90 91 26 08 	lds	r25, 0x0826
    2c64:	18 16       	cp	r1, r24
    2c66:	19 06       	cpc	r1, r25
    2c68:	84 f4       	brge	.+32     	; 0x2c8a <Display_sticks+0x196>
    2c6a:	80 91 27 08 	lds	r24, 0x0827
    2c6e:	90 91 28 08 	lds	r25, 0x0828
    2c72:	18 16       	cp	r1, r24
    2c74:	19 06       	cpc	r1, r25
    2c76:	4c f4       	brge	.+18     	; 0x2c8a <Display_sticks+0x196>
    2c78:	80 91 29 08 	lds	r24, 0x0829
    2c7c:	90 91 2a 08 	lds	r25, 0x082A
    2c80:	c1 e0       	ldi	r28, 0x01	; 1
    2c82:	18 16       	cp	r1, r24
    2c84:	19 06       	cpc	r1, r25
    2c86:	0c f0       	brlt	.+2      	; 0x2c8a <Display_sticks+0x196>
    2c88:	c0 e0       	ldi	r28, 0x00	; 0
				}
			}
		}

		// Update buffer
		write_buffer(buffer);
    2c8a:	80 e0       	ldi	r24, 0x00	; 0
    2c8c:	91 e0       	ldi	r25, 0x01	; 1
    2c8e:	0e 94 2b 21 	call	0x4256	; 0x4256 <write_buffer>
    2c92:	48 cf       	rjmp	.-368    	; 0x2b24 <Display_sticks+0x30>
	}

	// Save value and return
	if (CalibrateDone)
    2c94:	cc 23       	and	r28, r28
    2c96:	39 f1       	breq	.+78     	; 0x2ce6 <Display_sticks+0x1f2>
	{
		LCD_Display_Text(137,(const unsigned char*)Verdana14,40,43); 	// "Done!"
    2c98:	2b e2       	ldi	r18, 0x2B	; 43
    2c9a:	30 e0       	ldi	r19, 0x00	; 0
    2c9c:	48 e2       	ldi	r20, 0x28	; 40
    2c9e:	50 e0       	ldi	r21, 0x00	; 0
    2ca0:	61 e7       	ldi	r22, 0x71	; 113
    2ca2:	71 e0       	ldi	r23, 0x01	; 1
    2ca4:	89 e8       	ldi	r24, 0x89	; 137
    2ca6:	90 e0       	ldi	r25, 0x00	; 0
    2ca8:	0e 94 0a 23 	call	0x4614	; 0x4614 <LCD_Display_Text>
		// Update buffer
		write_buffer(buffer);
    2cac:	80 e0       	ldi	r24, 0x00	; 0
    2cae:	91 e0       	ldi	r25, 0x01	; 1
    2cb0:	0e 94 2b 21 	call	0x4256	; 0x4256 <write_buffer>
		clear_buffer(buffer);
    2cb4:	80 e0       	ldi	r24, 0x00	; 0
    2cb6:	91 e0       	ldi	r25, 0x01	; 1
    2cb8:	0e 94 5d 21 	call	0x42ba	; 0x42ba <clear_buffer>
    2cbc:	8f e7       	ldi	r24, 0x7F	; 127
    2cbe:	94 e8       	ldi	r25, 0x84	; 132
    2cc0:	2e e1       	ldi	r18, 0x1E	; 30
    2cc2:	81 50       	subi	r24, 0x01	; 1
    2cc4:	90 40       	sbci	r25, 0x00	; 0
    2cc6:	20 40       	sbci	r18, 0x00	; 0
    2cc8:	e1 f7       	brne	.-8      	; 0x2cc2 <Display_sticks+0x1ce>
    2cca:	00 c0       	rjmp	.+0      	; 0x2ccc <Display_sticks+0x1d8>
    2ccc:	00 00       	nop
		// Restore old settings if failed
		Config.AileronPol = temp_aileron;
		Config.ElevatorPol = temp_elevator;
		Config.RudderPol = temp_rudder;
	}
}
    2cce:	df 91       	pop	r29
    2cd0:	cf 91       	pop	r28
    2cd2:	1f 91       	pop	r17
    2cd4:	0f 91       	pop	r16
    2cd6:	ff 90       	pop	r15
    2cd8:	ef 90       	pop	r14
    2cda:	df 90       	pop	r13
    2cdc:	cf 90       	pop	r12
    2cde:	bf 90       	pop	r11
    2ce0:	af 90       	pop	r10
		// Update buffer
		write_buffer(buffer);
		clear_buffer(buffer);
		// Pause so that the "Done!" text is readable
		_delay_ms(500);
		Save_Config_to_EEPROM();
    2ce2:	0c 94 bc 16 	jmp	0x2d78	; 0x2d78 <Save_Config_to_EEPROM>
 	}
	else
	{
		// Restore old settings if failed
		Config.AileronPol = temp_aileron;
    2ce6:	d0 92 d9 05 	sts	0x05D9, r13
		Config.ElevatorPol = temp_elevator;
    2cea:	f0 92 da 05 	sts	0x05DA, r15
		Config.RudderPol = temp_rudder;
    2cee:	a0 92 3a 06 	sts	0x063A, r10
	}
}
    2cf2:	df 91       	pop	r29
    2cf4:	cf 91       	pop	r28
    2cf6:	1f 91       	pop	r17
    2cf8:	0f 91       	pop	r16
    2cfa:	ff 90       	pop	r15
    2cfc:	ef 90       	pop	r14
    2cfe:	df 90       	pop	r13
    2d00:	cf 90       	pop	r12
    2d02:	bf 90       	pop	r11
    2d04:	af 90       	pop	r10
    2d06:	08 95       	ret

00002d08 <eeprom_write_byte_changed>:
}

// addr is the address in eeprom
// value is the value to be written
void eeprom_write_byte_changed(uint8_t *addr, uint8_t value)
{
    2d08:	0f 93       	push	r16
    2d0a:	1f 93       	push	r17
    2d0c:	cf 93       	push	r28
    2d0e:	df 93       	push	r29
    2d10:	1f 92       	push	r1
    2d12:	cd b7       	in	r28, 0x3d	; 61
    2d14:	de b7       	in	r29, 0x3e	; 62
    2d16:	8c 01       	movw	r16, r24
	if (eeprom_read_byte(addr) != value)
    2d18:	69 83       	std	Y+1, r22	; 0x01
    2d1a:	0e 94 3b 4a 	call	0x9476	; 0x9476 <__eerd_byte_m644pa>
    2d1e:	69 81       	ldd	r22, Y+1	; 0x01
    2d20:	86 17       	cp	r24, r22
    2d22:	41 f0       	breq	.+16     	; 0x2d34 <eeprom_write_byte_changed+0x2c>
	{
		// void eeprom_write_byte (uint8_t *__p, uint8_t __value);
		eeprom_write_byte(addr, value);
    2d24:	c8 01       	movw	r24, r16
	}
}
    2d26:	0f 90       	pop	r0
    2d28:	df 91       	pop	r29
    2d2a:	cf 91       	pop	r28
    2d2c:	1f 91       	pop	r17
    2d2e:	0f 91       	pop	r16
void eeprom_write_byte_changed(uint8_t *addr, uint8_t value)
{
	if (eeprom_read_byte(addr) != value)
	{
		// void eeprom_write_byte (uint8_t *__p, uint8_t __value);
		eeprom_write_byte(addr, value);
    2d30:	0c 94 43 4a 	jmp	0x9486	; 0x9486 <__eewr_byte_m644pa>
	}
}
    2d34:	0f 90       	pop	r0
    2d36:	df 91       	pop	r29
    2d38:	cf 91       	pop	r28
    2d3a:	1f 91       	pop	r17
    2d3c:	0f 91       	pop	r16
    2d3e:	08 95       	ret

00002d40 <eeprom_write_block_changes>:
}

// src is the address in RAM
// dest is the address in eeprom (hence const)
void eeprom_write_block_changes(uint8_t *src, uint8_t *dest, uint16_t size)
{ 
    2d40:	ef 92       	push	r14
    2d42:	ff 92       	push	r15
    2d44:	0f 93       	push	r16
    2d46:	1f 93       	push	r17
    2d48:	cf 93       	push	r28
    2d4a:	df 93       	push	r29
    2d4c:	ec 01       	movw	r28, r24
    2d4e:	8b 01       	movw	r16, r22
    2d50:	7a 01       	movw	r14, r20
    2d52:	e8 0e       	add	r14, r24
    2d54:	f9 1e       	adc	r15, r25
	uint16_t len;
	uint8_t value;

	for (len=0; len < size; len++)
    2d56:	ce 15       	cp	r28, r14
    2d58:	df 05       	cpc	r29, r15
    2d5a:	39 f0       	breq	.+14     	; 0x2d6a <eeprom_write_block_changes+0x2a>
	{
		// Get value at src
		value = *src;
		
		// Write the value at src to dest
		eeprom_write_byte_changed(dest, value);
    2d5c:	69 91       	ld	r22, Y+
    2d5e:	c8 01       	movw	r24, r16
    2d60:	0e 94 84 16 	call	0x2d08	; 0x2d08 <eeprom_write_byte_changed>
		src++;
		dest++;
    2d64:	0f 5f       	subi	r16, 0xFF	; 255
    2d66:	1f 4f       	sbci	r17, 0xFF	; 255
    2d68:	f6 cf       	rjmp	.-20     	; 0x2d56 <eeprom_write_block_changes+0x16>
	}
}
    2d6a:	df 91       	pop	r29
    2d6c:	cf 91       	pop	r28
    2d6e:	1f 91       	pop	r17
    2d70:	0f 91       	pop	r16
    2d72:	ff 90       	pop	r15
    2d74:	ef 90       	pop	r14
    2d76:	08 95       	ret

00002d78 <Save_Config_to_EEPROM>:
const uint8_t	FUTABA[MAX_RC_CHANNELS] PROGMEM = {1,2,0,3,4,5,6,7}; 	// Futaba channel sequence (AETRGF12)

void Save_Config_to_EEPROM(void)
{
	// Write to eeProm
	cli();
    2d78:	f8 94       	cli
	eeprom_write_block_changes((uint8_t*)&Config, (uint8_t*)EEPROM_DATA_START_POS, sizeof(CONFIG_STRUCT));	
    2d7a:	48 e0       	ldi	r20, 0x08	; 8
    2d7c:	52 e0       	ldi	r21, 0x02	; 2
    2d7e:	60 e0       	ldi	r22, 0x00	; 0
    2d80:	70 e0       	ldi	r23, 0x00	; 0
    2d82:	89 ea       	ldi	r24, 0xA9	; 169
    2d84:	95 e0       	ldi	r25, 0x05	; 5
    2d86:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <eeprom_write_block_changes>
	sei();
    2d8a:	78 94       	sei
    2d8c:	08 95       	ret

00002d8e <Update_V1_0_to_V1_1>:
// Config data restructure code
//************************************************************

// Upgrade V1.0 structure to V1.1 structure
void Update_V1_0_to_V1_1(void)
{
    2d8e:	2f 92       	push	r2
    2d90:	3f 92       	push	r3
    2d92:	4f 92       	push	r4
    2d94:	5f 92       	push	r5
    2d96:	6f 92       	push	r6
    2d98:	7f 92       	push	r7
    2d9a:	8f 92       	push	r8
    2d9c:	9f 92       	push	r9
    2d9e:	af 92       	push	r10
    2da0:	bf 92       	push	r11
    2da2:	cf 92       	push	r12
    2da4:	df 92       	push	r13
    2da6:	ef 92       	push	r14
    2da8:	ff 92       	push	r15
    2daa:	0f 93       	push	r16
    2dac:	1f 93       	push	r17
    2dae:	cf 93       	push	r28
    2db0:	df 93       	push	r29
    2db2:	cd b7       	in	r28, 0x3d	; 61
    2db4:	de b7       	in	r29, 0x3e	; 62
    2db6:	c5 54       	subi	r28, 0x45	; 69
    2db8:	d1 40       	sbci	r29, 0x01	; 1
    2dba:	0f b6       	in	r0, 0x3f	; 63
    2dbc:	f8 94       	cli
    2dbe:	de bf       	out	0x3e, r29	; 62
    2dc0:	0f be       	out	0x3f, r0	; 63
    2dc2:	cd bf       	out	0x3d, r28	; 61
	int8_t		P2_scale;				// P2 sensor scale flags (6)

	// Save old P2 Source B volume. For some reason it gets clobbered.
	// We mustn't use hard-coded values are these change each version.
	// Use an offset from the current Config structure address
	memcpy((void*)&temp,(void*)((&Config.setup) + (377)),1);
    2dc4:	40 91 22 07 	lds	r20, 0x0722
    2dc8:	cf 5b       	subi	r28, 0xBF	; 191
    2dca:	de 4f       	sbci	r29, 0xFE	; 254
    2dcc:	48 83       	st	Y, r20
    2dce:	c1 54       	subi	r28, 0x41	; 65
    2dd0:	d1 40       	sbci	r29, 0x01	; 1
	 
	// Move data that exists after the channel mixer to new location
	// Hard-coded to V1.0 RAM offset	
	memmove((void*)&Config.Servo_reverse, (void*)((&Config.setup) + (378)), 74);	// RAM location determined empirically
    2dd2:	4a e4       	ldi	r20, 0x4A	; 74
    2dd4:	50 e0       	ldi	r21, 0x00	; 0
    2dd6:	63 e2       	ldi	r22, 0x23	; 35
    2dd8:	77 e0       	ldi	r23, 0x07	; 7
    2dda:	8b e6       	ldi	r24, 0x6B	; 107
    2ddc:	97 e0       	ldi	r25, 0x07	; 7
    2dde:	0e 94 f4 49 	call	0x93e8	; 0x93e8 <memmove>
    2de2:	2b e3       	ldi	r18, 0x3B	; 59
    2de4:	36 e0       	ldi	r19, 0x06	; 6
    2de6:	ae 01       	movw	r20, r28
    2de8:	4f 5c       	subi	r20, 0xCF	; 207
    2dea:	5e 4f       	sbci	r21, 0xFE	; 254
    2dec:	ce 01       	movw	r24, r28
    2dee:	01 96       	adiw	r24, 0x01	; 1
	{
		src = (void*)Config.Channel;	// Same location as old one
		dst = (void*)mixer_buffer;
		src += (i * OLDSIZE);			// Step to next old data in (corrupted) config structure
		dst += (i * NEWSIZE);			// Step to next location for new data in the buffer
		memcpy(dst, src, OLDSIZE);		// Move only the old (smaller) data
    2df0:	6d e1       	ldi	r22, 0x1D	; 29
    2df2:	f9 01       	movw	r30, r18
    2df4:	dc 01       	movw	r26, r24
    2df6:	76 2f       	mov	r23, r22
    2df8:	01 90       	ld	r0, Z+
    2dfa:	0d 92       	st	X+, r0
    2dfc:	7a 95       	dec	r23
    2dfe:	e1 f7       	brne	.-8      	; 0x2df8 <Update_V1_0_to_V1_1+0x6a>
    2e00:	86 96       	adiw	r24, 0x26	; 38
    2e02:	23 5e       	subi	r18, 0xE3	; 227
    2e04:	3f 4f       	sbci	r19, 0xFF	; 255
	// Move data that exists after the channel mixer to new location
	// Hard-coded to V1.0 RAM offset	
	memmove((void*)&Config.Servo_reverse, (void*)((&Config.setup) + (378)), 74);	// RAM location determined empirically
	
	// Copy the old channel[] structure into buffer, spaced out to match the new structure
	for (i = 0; i < MAX_OUTPUTS; i++)
    2e06:	84 17       	cp	r24, r20
    2e08:	95 07       	cpc	r25, r21
    2e0a:	99 f7       	brne	.-26     	; 0x2df2 <Update_V1_0_to_V1_1+0x64>
    2e0c:	4e 01       	movw	r8, r28
    2e0e:	83 e1       	ldi	r24, 0x13	; 19
    2e10:	88 0e       	add	r8, r24
    2e12:	91 1c       	adc	r9, r1
    2e14:	5e 01       	movw	r10, r28
    2e16:	94 e1       	ldi	r25, 0x14	; 20
    2e18:	a9 0e       	add	r10, r25
    2e1a:	b1 1c       	adc	r11, r1
    2e1c:	6e 01       	movw	r12, r28
    2e1e:	e5 e1       	ldi	r30, 0x15	; 21
    2e20:	ce 0e       	add	r12, r30
    2e22:	d1 1c       	adc	r13, r1
    2e24:	ce 01       	movw	r24, r28
    2e26:	46 96       	adiw	r24, 0x16	; 22
    2e28:	cf 5c       	subi	r28, 0xCF	; 207
    2e2a:	de 4f       	sbci	r29, 0xFE	; 254
    2e2c:	99 83       	std	Y+1, r25	; 0x01
    2e2e:	88 83       	st	Y, r24
    2e30:	c1 53       	subi	r28, 0x31	; 49
    2e32:	d1 40       	sbci	r29, 0x01	; 1
    2e34:	8e 01       	movw	r16, r28
    2e36:	02 5e       	subi	r16, 0xE2	; 226
    2e38:	1f 4f       	sbci	r17, 0xFF	; 255
    2e3a:	fe 01       	movw	r30, r28
    2e3c:	7d 96       	adiw	r30, 0x1d	; 29
    2e3e:	c7 5c       	subi	r28, 0xC7	; 199
    2e40:	de 4f       	sbci	r29, 0xFE	; 254
    2e42:	f9 83       	std	Y+1, r31	; 0x01
    2e44:	e8 83       	st	Y, r30
    2e46:	c9 53       	subi	r28, 0x39	; 57
    2e48:	d1 40       	sbci	r29, 0x01	; 1
    2e4a:	06 96       	adiw	r24, 0x06	; 6
    2e4c:	cd 5c       	subi	r28, 0xCD	; 205
    2e4e:	de 4f       	sbci	r29, 0xFE	; 254
    2e50:	99 83       	std	Y+1, r25	; 0x01
    2e52:	88 83       	st	Y, r24
    2e54:	c3 53       	subi	r28, 0x33	; 51
    2e56:	d1 40       	sbci	r29, 0x01	; 1
    2e58:	32 97       	sbiw	r30, 0x02	; 2
    2e5a:	c3 5c       	subi	r28, 0xC3	; 195
    2e5c:	de 4f       	sbci	r29, 0xFE	; 254
    2e5e:	f9 83       	std	Y+1, r31	; 0x01
    2e60:	e8 83       	st	Y, r30
    2e62:	cd 53       	subi	r28, 0x3D	; 61
    2e64:	d1 40       	sbci	r29, 0x01	; 1
    2e66:	02 97       	sbiw	r24, 0x02	; 2
    2e68:	c9 5c       	subi	r28, 0xC9	; 201
    2e6a:	de 4f       	sbci	r29, 0xFE	; 254
    2e6c:	99 83       	std	Y+1, r25	; 0x01
    2e6e:	88 83       	st	Y, r24
    2e70:	c7 53       	subi	r28, 0x37	; 55
    2e72:	d1 40       	sbci	r29, 0x01	; 1
    2e74:	32 97       	sbiw	r30, 0x02	; 2
    2e76:	c5 5c       	subi	r28, 0xC5	; 197
    2e78:	de 4f       	sbci	r29, 0xFE	; 254
    2e7a:	f9 83       	std	Y+1, r31	; 0x01
    2e7c:	e8 83       	st	Y, r30
    2e7e:	cb 53       	subi	r28, 0x3B	; 59
    2e80:	d1 40       	sbci	r29, 0x01	; 1
    2e82:	02 97       	sbiw	r24, 0x02	; 2
    2e84:	cb 5c       	subi	r28, 0xCB	; 203
    2e86:	de 4f       	sbci	r29, 0xFE	; 254
    2e88:	99 83       	std	Y+1, r25	; 0x01
    2e8a:	88 83       	st	Y, r24
    2e8c:	c5 53       	subi	r28, 0x35	; 53
    2e8e:	d1 40       	sbci	r29, 0x01	; 1
    2e90:	7e 01       	movw	r14, r28
    2e92:	97 e1       	ldi	r25, 0x17	; 23
    2e94:	e9 0e       	add	r14, r25
    2e96:	f1 1c       	adc	r15, r1
    2e98:	3e 01       	movw	r6, r28
    2e9a:	e5 e0       	ldi	r30, 0x05	; 5
    2e9c:	6e 0e       	add	r6, r30
    2e9e:	71 1c       	adc	r7, r1
    2ea0:	81 e0       	ldi	r24, 0x01	; 1
    2ea2:	90 e0       	ldi	r25, 0x00	; 0
    2ea4:	8c 0f       	add	r24, r28
    2ea6:	9d 1f       	adc	r25, r29
    2ea8:	83 5b       	subi	r24, 0xB3	; 179
    2eaa:	9e 4f       	sbci	r25, 0xFE	; 254
    2eac:	ce 5b       	subi	r28, 0xBE	; 190
    2eae:	de 4f       	sbci	r29, 0xFE	; 254
    2eb0:	99 83       	std	Y+1, r25	; 0x01
    2eb2:	88 83       	st	Y, r24
    2eb4:	c2 54       	subi	r28, 0x42	; 66
    2eb6:	d1 40       	sbci	r29, 0x01	; 1
    2eb8:	fe 01       	movw	r30, r28
    2eba:	31 96       	adiw	r30, 0x01	; 1
    2ebc:	c1 5c       	subi	r28, 0xC1	; 193
    2ebe:	de 4f       	sbci	r29, 0xFE	; 254
    2ec0:	f9 83       	std	Y+1, r31	; 0x01
    2ec2:	e8 83       	st	Y, r30
    2ec4:	cf 53       	subi	r28, 0x3F	; 63
    2ec6:	d1 40       	sbci	r29, 0x01	; 1
		
		// Take old motor marker switch and convert
		if ((P1_sensors & (1 << MotorMarker)) != 0)
		{
			// Set the new value in the right place
			mixer_buffer[4 + (i * NEWSIZE)] = MOTOR;
    2ec8:	82 e0       	ldi	r24, 0x02	; 2
    2eca:	58 2e       	mov	r5, r24
			{
				mixer_buffer[18 + (i * NEWSIZE)] = SCALE;
			}
			else
			{
				mixer_buffer[18 + (i * NEWSIZE)] = ON;
    2ecc:	44 24       	eor	r4, r4
    2ece:	43 94       	inc	r4
	for (i = 0; i < MAX_OUTPUTS; i++)
	{
		// Move all bytes from the OLD P1_offset [4] up by one to make space for the Motor_marker byte
		src = &mixer_buffer[4 + (i * NEWSIZE)];	// The old P1_offset byte
		dst = &mixer_buffer[5 + (i * NEWSIZE)];
		memmove(dst, src, (OLDSIZE - 4));// Move all but P1_value, P2_value
    2ed0:	49 e1       	ldi	r20, 0x19	; 25
    2ed2:	50 e0       	ldi	r21, 0x00	; 0
    2ed4:	b3 01       	movw	r22, r6
    2ed6:	c8 01       	movw	r24, r16
    2ed8:	48 97       	sbiw	r24, 0x18	; 24
    2eda:	0e 94 f4 49 	call	0x93e8	; 0x93e8 <memmove>

		// Save the old switches
		P1_sensors = mixer_buffer[18 + (i * NEWSIZE)];
    2ede:	f4 01       	movw	r30, r8
    2ee0:	30 80       	ld	r3, Z
		P2_sensors = mixer_buffer[19 + (i * NEWSIZE)];
    2ee2:	f5 01       	movw	r30, r10
    2ee4:	20 81       	ld	r18, Z
		P1_scale = mixer_buffer[20 + (i * NEWSIZE)];
    2ee6:	f6 01       	movw	r30, r12
    2ee8:	30 81       	ld	r19, Z
		P2_scale = mixer_buffer[21 + (i * NEWSIZE)];
    2eea:	cf 5c       	subi	r28, 0xCF	; 207
    2eec:	de 4f       	sbci	r29, 0xFE	; 254
    2eee:	e8 81       	ld	r30, Y
    2ef0:	f9 81       	ldd	r31, Y+1	; 0x01
    2ef2:	c1 53       	subi	r28, 0x31	; 49
    2ef4:	d1 40       	sbci	r29, 0x01	; 1
    2ef6:	20 80       	ld	r2, Z
		
		// Take old motor marker switch and convert
		if ((P1_sensors & (1 << MotorMarker)) != 0)
		{
			// Set the new value in the right place
			mixer_buffer[4 + (i * NEWSIZE)] = MOTOR;
    2ef8:	f3 01       	movw	r30, r6
		P2_sensors = mixer_buffer[19 + (i * NEWSIZE)];
		P1_scale = mixer_buffer[20 + (i * NEWSIZE)];
		P2_scale = mixer_buffer[21 + (i * NEWSIZE)];
		
		// Take old motor marker switch and convert
		if ((P1_sensors & (1 << MotorMarker)) != 0)
    2efa:	36 fe       	sbrs	r3, 6
    2efc:	02 c0       	rjmp	.+4      	; 0x2f02 <Update_V1_0_to_V1_1+0x174>
		{
			// Set the new value in the right place
			mixer_buffer[4 + (i * NEWSIZE)] = MOTOR;
    2efe:	50 82       	st	Z, r5
    2f00:	01 c0       	rjmp	.+2      	; 0x2f04 <Update_V1_0_to_V1_1+0x176>
		}
		else
		{
			mixer_buffer[4 + (i * NEWSIZE)] = ASERVO;
    2f02:	10 82       	st	Z, r1
		}

		// Move the universal source bytes (8) up eight bytes
		src = &mixer_buffer[22 + (i * NEWSIZE)]; // 21 + 1
		dst = &mixer_buffer[30 + (i * NEWSIZE)];
		memmove(dst, src, 8);
    2f04:	48 e0       	ldi	r20, 0x08	; 8
    2f06:	50 e0       	ldi	r21, 0x00	; 0
    2f08:	b7 01       	movw	r22, r14
    2f0a:	c8 01       	movw	r24, r16
    2f0c:	01 96       	adiw	r24, 0x01	; 1
    2f0e:	cc 5b       	subi	r28, 0xBC	; 188
    2f10:	de 4f       	sbci	r29, 0xFE	; 254
    2f12:	28 83       	st	Y, r18
    2f14:	c4 54       	subi	r28, 0x44	; 68
    2f16:	d1 40       	sbci	r29, 0x01	; 1
    2f18:	cb 5b       	subi	r28, 0xBB	; 187
    2f1a:	de 4f       	sbci	r29, 0xFE	; 254
    2f1c:	38 83       	st	Y, r19
    2f1e:	c5 54       	subi	r28, 0x45	; 69
    2f20:	d1 40       	sbci	r29, 0x01	; 1
    2f22:	0e 94 f4 49 	call	0x93e8	; 0x93e8 <memmove>
    2f26:	80 e0       	ldi	r24, 0x00	; 0
    2f28:	90 e0       	ldi	r25, 0x00	; 0
    2f2a:	cb 5b       	subi	r28, 0xBB	; 187
    2f2c:	de 4f       	sbci	r29, 0xFE	; 254
    2f2e:	38 81       	ld	r19, Y
    2f30:	c5 54       	subi	r28, 0x45	; 69
    2f32:	d1 40       	sbci	r29, 0x01	; 1
    2f34:	cc 5b       	subi	r28, 0xBC	; 188
    2f36:	de 4f       	sbci	r29, 0xFE	; 254
    2f38:	28 81       	ld	r18, Y
    2f3a:	c4 54       	subi	r28, 0x44	; 68
    2f3c:	d1 40       	sbci	r29, 0x01	; 1
    2f3e:	c1 5c       	subi	r28, 0xC1	; 193
    2f40:	de 4f       	sbci	r29, 0xFE	; 254
    2f42:	e8 81       	ld	r30, Y
    2f44:	f9 81       	ldd	r31, Y+1	; 0x01
    2f46:	cf 53       	subi	r28, 0x3F	; 63
    2f48:	d1 40       	sbci	r29, 0x01	; 1
    2f4a:	e8 0f       	add	r30, r24
    2f4c:	f9 1f       	adc	r31, r25
		
		// Convert old "None" settings to new ones
		// Skip every second byte
		for (j = 0; j < 8; j += 2)
		{
			if (mixer_buffer[30 + (i * NEWSIZE) + j] == 13) // 13 was the old "None"
    2f4e:	46 8d       	ldd	r20, Z+30	; 0x1e
    2f50:	4d 30       	cpi	r20, 0x0D	; 13
    2f52:	11 f4       	brne	.+4      	; 0x2f58 <Update_V1_0_to_V1_1+0x1ca>
			{
				mixer_buffer[30 + (i * NEWSIZE) + j] = NOMIX;
    2f54:	4f e0       	ldi	r20, 0x0F	; 15
    2f56:	46 8f       	std	Z+30, r20	; 0x1e
    2f58:	02 96       	adiw	r24, 0x02	; 2
		memmove(dst, src, 8);

		
		// Convert old "None" settings to new ones
		// Skip every second byte
		for (j = 0; j < 8; j += 2)
    2f5a:	88 30       	cpi	r24, 0x08	; 8
    2f5c:	91 05       	cpc	r25, r1
    2f5e:	79 f7       	brne	.-34     	; 0x2f3e <Update_V1_0_to_V1_1+0x1b0>
		// P1 roll gyro
		if ((P1_sensors & (1 << RollGyro)) != 0)
		{
			if ((P1_scale & (1 << RollScale)) != 0)
			{
				mixer_buffer[18 + (i * NEWSIZE)] = SCALE;
    2f60:	f4 01       	movw	r30, r8
			}			
		}

		// Expand the old switches into new bytes
		// P1 roll gyro
		if ((P1_sensors & (1 << RollGyro)) != 0)
    2f62:	30 fe       	sbrs	r3, 0
    2f64:	06 c0       	rjmp	.+12     	; 0x2f72 <Update_V1_0_to_V1_1+0x1e4>
		{
			if ((P1_scale & (1 << RollScale)) != 0)
    2f66:	30 ff       	sbrs	r19, 0
    2f68:	02 c0       	rjmp	.+4      	; 0x2f6e <Update_V1_0_to_V1_1+0x1e0>
			{
				mixer_buffer[18 + (i * NEWSIZE)] = SCALE;
    2f6a:	50 82       	st	Z, r5
    2f6c:	03 c0       	rjmp	.+6      	; 0x2f74 <Update_V1_0_to_V1_1+0x1e6>
			}
			else
			{
				mixer_buffer[18 + (i * NEWSIZE)] = ON;
    2f6e:	40 82       	st	Z, r4
    2f70:	01 c0       	rjmp	.+2      	; 0x2f74 <Update_V1_0_to_V1_1+0x1e6>
			}
		}
		else
		{
			mixer_buffer[18 + (i * NEWSIZE)] = OFF;
    2f72:	10 82       	st	Z, r1
		// P2 roll gyro
		if ((P2_sensors & (1 << RollGyro)) != 0)
		{
			if ((P2_scale & (1 << RollScale)) != 0)
			{
				mixer_buffer[19 + (i * NEWSIZE)] = SCALE;
    2f74:	f5 01       	movw	r30, r10
		{
			mixer_buffer[18 + (i * NEWSIZE)] = OFF;
		}

		// P2 roll gyro
		if ((P2_sensors & (1 << RollGyro)) != 0)
    2f76:	20 ff       	sbrs	r18, 0
    2f78:	06 c0       	rjmp	.+12     	; 0x2f86 <Update_V1_0_to_V1_1+0x1f8>
		{
			if ((P2_scale & (1 << RollScale)) != 0)
    2f7a:	20 fe       	sbrs	r2, 0
    2f7c:	02 c0       	rjmp	.+4      	; 0x2f82 <Update_V1_0_to_V1_1+0x1f4>
			{
				mixer_buffer[19 + (i * NEWSIZE)] = SCALE;
    2f7e:	50 82       	st	Z, r5
    2f80:	03 c0       	rjmp	.+6      	; 0x2f88 <Update_V1_0_to_V1_1+0x1fa>
			}
			else
			{
				mixer_buffer[19 + (i * NEWSIZE)] = ON;
    2f82:	40 82       	st	Z, r4
    2f84:	01 c0       	rjmp	.+2      	; 0x2f88 <Update_V1_0_to_V1_1+0x1fa>
			}
		}
		else
		{
			mixer_buffer[19 + (i * NEWSIZE)] = OFF;
    2f86:	10 82       	st	Z, r1
		// P1 pitch gyro
		if ((P1_sensors & (1 << PitchGyro)) != 0)
		{
			if ((P1_scale & (1 << PitchScale)) != 0)
			{
				mixer_buffer[20 + (i * NEWSIZE)] = SCALE;
    2f88:	f6 01       	movw	r30, r12
		{
			mixer_buffer[19 + (i * NEWSIZE)] = OFF;
		}

		// P1 pitch gyro
		if ((P1_sensors & (1 << PitchGyro)) != 0)
    2f8a:	31 fe       	sbrs	r3, 1
    2f8c:	06 c0       	rjmp	.+12     	; 0x2f9a <Update_V1_0_to_V1_1+0x20c>
		{
			if ((P1_scale & (1 << PitchScale)) != 0)
    2f8e:	31 ff       	sbrs	r19, 1
    2f90:	02 c0       	rjmp	.+4      	; 0x2f96 <Update_V1_0_to_V1_1+0x208>
			{
				mixer_buffer[20 + (i * NEWSIZE)] = SCALE;
    2f92:	50 82       	st	Z, r5
    2f94:	03 c0       	rjmp	.+6      	; 0x2f9c <Update_V1_0_to_V1_1+0x20e>
			}
			else
			{
				mixer_buffer[20 + (i * NEWSIZE)] = ON;
    2f96:	40 82       	st	Z, r4
    2f98:	01 c0       	rjmp	.+2      	; 0x2f9c <Update_V1_0_to_V1_1+0x20e>
			}
		}
		else
		{
			mixer_buffer[20 + (i * NEWSIZE)] = OFF;
    2f9a:	10 82       	st	Z, r1
		// P2 pitch gyro
		if ((P2_sensors & (1 << PitchGyro)) != 0)
		{
			if ((P2_scale & (1 << PitchScale)) != 0)
			{
				mixer_buffer[21 + (i * NEWSIZE)] = SCALE;
    2f9c:	cf 5c       	subi	r28, 0xCF	; 207
    2f9e:	de 4f       	sbci	r29, 0xFE	; 254
    2fa0:	e8 81       	ld	r30, Y
    2fa2:	f9 81       	ldd	r31, Y+1	; 0x01
    2fa4:	c1 53       	subi	r28, 0x31	; 49
    2fa6:	d1 40       	sbci	r29, 0x01	; 1
		{
			mixer_buffer[20 + (i * NEWSIZE)] = OFF;
		}

		// P2 pitch gyro
		if ((P2_sensors & (1 << PitchGyro)) != 0)
    2fa8:	21 ff       	sbrs	r18, 1
    2faa:	06 c0       	rjmp	.+12     	; 0x2fb8 <Update_V1_0_to_V1_1+0x22a>
		{
			if ((P2_scale & (1 << PitchScale)) != 0)
    2fac:	21 fe       	sbrs	r2, 1
    2fae:	02 c0       	rjmp	.+4      	; 0x2fb4 <Update_V1_0_to_V1_1+0x226>
			{
				mixer_buffer[21 + (i * NEWSIZE)] = SCALE;
    2fb0:	50 82       	st	Z, r5
    2fb2:	03 c0       	rjmp	.+6      	; 0x2fba <Update_V1_0_to_V1_1+0x22c>
			}
			else
			{
				mixer_buffer[21 + (i * NEWSIZE)] = ON;
    2fb4:	40 82       	st	Z, r4
    2fb6:	01 c0       	rjmp	.+2      	; 0x2fba <Update_V1_0_to_V1_1+0x22c>
			}
		}
		else
		{
			mixer_buffer[21 + (i * NEWSIZE)] = OFF;
    2fb8:	10 82       	st	Z, r1
		// P1 yaw_gyro
		if ((P1_sensors & (1 << YawGyro)) != 0)
		{
			if ((P1_scale & (1 << YawScale)) != 0)
			{
				mixer_buffer[22 + (i * NEWSIZE)] = SCALE;
    2fba:	f7 01       	movw	r30, r14
		{
			mixer_buffer[21 + (i * NEWSIZE)] = OFF;
		}

		// P1 yaw_gyro
		if ((P1_sensors & (1 << YawGyro)) != 0)
    2fbc:	32 fe       	sbrs	r3, 2
    2fbe:	06 c0       	rjmp	.+12     	; 0x2fcc <Update_V1_0_to_V1_1+0x23e>
		{
			if ((P1_scale & (1 << YawScale)) != 0)
    2fc0:	32 ff       	sbrs	r19, 2
    2fc2:	02 c0       	rjmp	.+4      	; 0x2fc8 <Update_V1_0_to_V1_1+0x23a>
			{
				mixer_buffer[22 + (i * NEWSIZE)] = SCALE;
    2fc4:	50 82       	st	Z, r5
    2fc6:	03 c0       	rjmp	.+6      	; 0x2fce <Update_V1_0_to_V1_1+0x240>
			}
			else
			{
				mixer_buffer[22 + (i * NEWSIZE)] = ON;
    2fc8:	40 82       	st	Z, r4
    2fca:	01 c0       	rjmp	.+2      	; 0x2fce <Update_V1_0_to_V1_1+0x240>
			}
		}
		else
		{
			mixer_buffer[22 + (i * NEWSIZE)] = OFF;
    2fcc:	10 82       	st	Z, r1
		// P2 yaw gyro
		if ((P2_sensors & (1 << YawGyro)) != 0)
		{
			if ((P2_scale & (1 << YawScale)) != 0)
			{
				mixer_buffer[23 + (i * NEWSIZE)] = SCALE;
    2fce:	cb 5c       	subi	r28, 0xCB	; 203
    2fd0:	de 4f       	sbci	r29, 0xFE	; 254
    2fd2:	e8 81       	ld	r30, Y
    2fd4:	f9 81       	ldd	r31, Y+1	; 0x01
    2fd6:	c5 53       	subi	r28, 0x35	; 53
    2fd8:	d1 40       	sbci	r29, 0x01	; 1
		{
			mixer_buffer[22 + (i * NEWSIZE)] = OFF;
		}

		// P2 yaw gyro
		if ((P2_sensors & (1 << YawGyro)) != 0)
    2fda:	22 ff       	sbrs	r18, 2
    2fdc:	06 c0       	rjmp	.+12     	; 0x2fea <Update_V1_0_to_V1_1+0x25c>
		{
			if ((P2_scale & (1 << YawScale)) != 0)
    2fde:	22 fe       	sbrs	r2, 2
    2fe0:	02 c0       	rjmp	.+4      	; 0x2fe6 <Update_V1_0_to_V1_1+0x258>
			{
				mixer_buffer[23 + (i * NEWSIZE)] = SCALE;
    2fe2:	50 82       	st	Z, r5
    2fe4:	03 c0       	rjmp	.+6      	; 0x2fec <Update_V1_0_to_V1_1+0x25e>
			}
			else
			{
				mixer_buffer[23 + (i * NEWSIZE)] = ON;
    2fe6:	40 82       	st	Z, r4
    2fe8:	01 c0       	rjmp	.+2      	; 0x2fec <Update_V1_0_to_V1_1+0x25e>
			}
		}
		else
		{
			mixer_buffer[23 + (i * NEWSIZE)] = OFF;
    2fea:	10 82       	st	Z, r1
		// P1 roll acc
		if ((P1_sensors & (1 << RollAcc)) != 0)
		{
			if ((P1_scale & (1 << AccRollScale)) != 0)
			{
				mixer_buffer[24 + (i * NEWSIZE)] = SCALE;
    2fec:	c5 5c       	subi	r28, 0xC5	; 197
    2fee:	de 4f       	sbci	r29, 0xFE	; 254
    2ff0:	e8 81       	ld	r30, Y
    2ff2:	f9 81       	ldd	r31, Y+1	; 0x01
    2ff4:	cb 53       	subi	r28, 0x3B	; 59
    2ff6:	d1 40       	sbci	r29, 0x01	; 1
		{
			mixer_buffer[23 + (i * NEWSIZE)] = OFF;
		}

		// P1 roll acc
		if ((P1_sensors & (1 << RollAcc)) != 0)
    2ff8:	33 fe       	sbrs	r3, 3
    2ffa:	06 c0       	rjmp	.+12     	; 0x3008 <Update_V1_0_to_V1_1+0x27a>
		{
			if ((P1_scale & (1 << AccRollScale)) != 0)
    2ffc:	33 ff       	sbrs	r19, 3
    2ffe:	02 c0       	rjmp	.+4      	; 0x3004 <Update_V1_0_to_V1_1+0x276>
			{
				mixer_buffer[24 + (i * NEWSIZE)] = SCALE;
    3000:	50 82       	st	Z, r5
    3002:	03 c0       	rjmp	.+6      	; 0x300a <Update_V1_0_to_V1_1+0x27c>
			}
			else
			{
				mixer_buffer[24 + (i * NEWSIZE)] = ON;
    3004:	40 82       	st	Z, r4
    3006:	01 c0       	rjmp	.+2      	; 0x300a <Update_V1_0_to_V1_1+0x27c>
			}
		}
		else
		{
			mixer_buffer[24 + (i * NEWSIZE)] = OFF;
    3008:	10 82       	st	Z, r1
		// P2 roll acc
		if ((P2_sensors & (1 << RollAcc)) != 0)
		{
			if ((P2_scale & (1 << AccRollScale)) != 0)
			{
				mixer_buffer[25 + (i * NEWSIZE)] = SCALE;
    300a:	c9 5c       	subi	r28, 0xC9	; 201
    300c:	de 4f       	sbci	r29, 0xFE	; 254
    300e:	e8 81       	ld	r30, Y
    3010:	f9 81       	ldd	r31, Y+1	; 0x01
    3012:	c7 53       	subi	r28, 0x37	; 55
    3014:	d1 40       	sbci	r29, 0x01	; 1
		{
			mixer_buffer[24 + (i * NEWSIZE)] = OFF;
		}

		// P2 roll acc
		if ((P2_sensors & (1 << RollAcc)) != 0)
    3016:	23 ff       	sbrs	r18, 3
    3018:	06 c0       	rjmp	.+12     	; 0x3026 <Update_V1_0_to_V1_1+0x298>
		{
			if ((P2_scale & (1 << AccRollScale)) != 0)
    301a:	23 fe       	sbrs	r2, 3
    301c:	02 c0       	rjmp	.+4      	; 0x3022 <Update_V1_0_to_V1_1+0x294>
			{
				mixer_buffer[25 + (i * NEWSIZE)] = SCALE;
    301e:	50 82       	st	Z, r5
    3020:	03 c0       	rjmp	.+6      	; 0x3028 <Update_V1_0_to_V1_1+0x29a>
			}
			else
			{
				mixer_buffer[25 + (i * NEWSIZE)] = ON;
    3022:	40 82       	st	Z, r4
    3024:	01 c0       	rjmp	.+2      	; 0x3028 <Update_V1_0_to_V1_1+0x29a>
			}
		}
		else
		{
			mixer_buffer[25 + (i * NEWSIZE)] = OFF;
    3026:	10 82       	st	Z, r1
		// P1 pitch acc
		if ((P1_sensors & (1 << PitchAcc)) != 0)
		{
			if ((P1_scale & (1 << AccPitchScale)) != 0)
			{
				mixer_buffer[26 + (i * NEWSIZE)] = SCALE;
    3028:	c3 5c       	subi	r28, 0xC3	; 195
    302a:	de 4f       	sbci	r29, 0xFE	; 254
    302c:	e8 81       	ld	r30, Y
    302e:	f9 81       	ldd	r31, Y+1	; 0x01
    3030:	cd 53       	subi	r28, 0x3D	; 61
    3032:	d1 40       	sbci	r29, 0x01	; 1
		{
			mixer_buffer[25 + (i * NEWSIZE)] = OFF;
		}

		// P1 pitch acc
		if ((P1_sensors & (1 << PitchAcc)) != 0)
    3034:	34 fe       	sbrs	r3, 4
    3036:	06 c0       	rjmp	.+12     	; 0x3044 <Update_V1_0_to_V1_1+0x2b6>
		{
			if ((P1_scale & (1 << AccPitchScale)) != 0)
    3038:	34 ff       	sbrs	r19, 4
    303a:	02 c0       	rjmp	.+4      	; 0x3040 <Update_V1_0_to_V1_1+0x2b2>
			{
				mixer_buffer[26 + (i * NEWSIZE)] = SCALE;
    303c:	50 82       	st	Z, r5
    303e:	03 c0       	rjmp	.+6      	; 0x3046 <Update_V1_0_to_V1_1+0x2b8>
			}
			else
			{
				mixer_buffer[26 + (i * NEWSIZE)] = ON;
    3040:	40 82       	st	Z, r4
    3042:	01 c0       	rjmp	.+2      	; 0x3046 <Update_V1_0_to_V1_1+0x2b8>
			}
		}
		else
		{
			mixer_buffer[26 + (i * NEWSIZE)] = OFF;
    3044:	10 82       	st	Z, r1
		// P2 pitch acc
		if ((P2_sensors & (1 << PitchAcc)) != 0)
		{
			if ((P2_scale & (1 << AccPitchScale)) != 0)
			{
				mixer_buffer[27 + (i * NEWSIZE)] = SCALE;
    3046:	cd 5c       	subi	r28, 0xCD	; 205
    3048:	de 4f       	sbci	r29, 0xFE	; 254
    304a:	e8 81       	ld	r30, Y
    304c:	f9 81       	ldd	r31, Y+1	; 0x01
    304e:	c3 53       	subi	r28, 0x33	; 51
    3050:	d1 40       	sbci	r29, 0x01	; 1
		{
			mixer_buffer[26 + (i * NEWSIZE)] = OFF;
		}

		// P2 pitch acc
		if ((P2_sensors & (1 << PitchAcc)) != 0)
    3052:	24 ff       	sbrs	r18, 4
    3054:	06 c0       	rjmp	.+12     	; 0x3062 <Update_V1_0_to_V1_1+0x2d4>
		{
			if ((P2_scale & (1 << AccPitchScale)) != 0)
    3056:	24 fe       	sbrs	r2, 4
    3058:	02 c0       	rjmp	.+4      	; 0x305e <Update_V1_0_to_V1_1+0x2d0>
			{
				mixer_buffer[27 + (i * NEWSIZE)] = SCALE;
    305a:	50 82       	st	Z, r5
    305c:	03 c0       	rjmp	.+6      	; 0x3064 <Update_V1_0_to_V1_1+0x2d6>
			}
			else
			{
				mixer_buffer[27 + (i * NEWSIZE)] = ON;
    305e:	40 82       	st	Z, r4
    3060:	01 c0       	rjmp	.+2      	; 0x3064 <Update_V1_0_to_V1_1+0x2d6>
			}
		}
		else
		{
			mixer_buffer[27 + (i * NEWSIZE)] = OFF;
    3062:	10 82       	st	Z, r1
		// P1 Z delta acc
		if ((P1_sensors & (1 << ZDeltaAcc)) != 0)
		{
			if ((P1_scale & (1 << AccZScale)) != 0)
			{
				mixer_buffer[28 + (i * NEWSIZE)] = SCALE;
    3064:	c7 5c       	subi	r28, 0xC7	; 199
    3066:	de 4f       	sbci	r29, 0xFE	; 254
    3068:	e8 81       	ld	r30, Y
    306a:	f9 81       	ldd	r31, Y+1	; 0x01
    306c:	c9 53       	subi	r28, 0x39	; 57
    306e:	d1 40       	sbci	r29, 0x01	; 1
		{
			mixer_buffer[27 + (i * NEWSIZE)] = OFF;
		}

		// P1 Z delta acc
		if ((P1_sensors & (1 << ZDeltaAcc)) != 0)
    3070:	35 fe       	sbrs	r3, 5
    3072:	06 c0       	rjmp	.+12     	; 0x3080 <Update_V1_0_to_V1_1+0x2f2>
		{
			if ((P1_scale & (1 << AccZScale)) != 0)
    3074:	35 ff       	sbrs	r19, 5
    3076:	02 c0       	rjmp	.+4      	; 0x307c <Update_V1_0_to_V1_1+0x2ee>
			{
				mixer_buffer[28 + (i * NEWSIZE)] = SCALE;
    3078:	50 82       	st	Z, r5
    307a:	03 c0       	rjmp	.+6      	; 0x3082 <Update_V1_0_to_V1_1+0x2f4>
			}
			else
			{
				mixer_buffer[28 + (i * NEWSIZE)] = ON;
    307c:	40 82       	st	Z, r4
    307e:	01 c0       	rjmp	.+2      	; 0x3082 <Update_V1_0_to_V1_1+0x2f4>
			}
		}
		else
		{
			mixer_buffer[28 + (i * NEWSIZE)] = OFF;
    3080:	10 82       	st	Z, r1
		// P2 Z delta acc
		if ((P2_sensors & (1 << ZDeltaAcc)) != 0)
		{
			if ((P2_scale & (1 << AccZScale)) != 0)
			{
				mixer_buffer[29 + (i * NEWSIZE)] = SCALE;
    3082:	f8 01       	movw	r30, r16
		{
			mixer_buffer[28 + (i * NEWSIZE)] = OFF;
		}

		// P2 Z delta acc
		if ((P2_sensors & (1 << ZDeltaAcc)) != 0)
    3084:	25 ff       	sbrs	r18, 5
    3086:	06 c0       	rjmp	.+12     	; 0x3094 <Update_V1_0_to_V1_1+0x306>
		{
			if ((P2_scale & (1 << AccZScale)) != 0)
    3088:	25 fe       	sbrs	r2, 5
    308a:	02 c0       	rjmp	.+4      	; 0x3090 <Update_V1_0_to_V1_1+0x302>
			{
				mixer_buffer[29 + (i * NEWSIZE)] = SCALE;
    308c:	50 82       	st	Z, r5
    308e:	03 c0       	rjmp	.+6      	; 0x3096 <Update_V1_0_to_V1_1+0x308>
			}
			else
			{
				mixer_buffer[29 + (i * NEWSIZE)] = ON;
    3090:	40 82       	st	Z, r4
    3092:	01 c0       	rjmp	.+2      	; 0x3096 <Update_V1_0_to_V1_1+0x308>
			}
		}
		else
		{
			mixer_buffer[29 + (i * NEWSIZE)] = OFF;
    3094:	10 82       	st	Z, r1
    3096:	c1 5c       	subi	r28, 0xC1	; 193
    3098:	de 4f       	sbci	r29, 0xFE	; 254
    309a:	88 81       	ld	r24, Y
    309c:	99 81       	ldd	r25, Y+1	; 0x01
    309e:	cf 53       	subi	r28, 0x3F	; 63
    30a0:	d1 40       	sbci	r29, 0x01	; 1
    30a2:	86 96       	adiw	r24, 0x26	; 38
    30a4:	c1 5c       	subi	r28, 0xC1	; 193
    30a6:	de 4f       	sbci	r29, 0xFE	; 254
    30a8:	99 83       	std	Y+1, r25	; 0x01
    30aa:	88 83       	st	Y, r24
    30ac:	cf 53       	subi	r28, 0x3F	; 63
    30ae:	d1 40       	sbci	r29, 0x01	; 1
    30b0:	96 e2       	ldi	r25, 0x26	; 38
    30b2:	89 0e       	add	r8, r25
    30b4:	91 1c       	adc	r9, r1
    30b6:	e6 e2       	ldi	r30, 0x26	; 38
    30b8:	ae 0e       	add	r10, r30
    30ba:	b1 1c       	adc	r11, r1
    30bc:	f6 e2       	ldi	r31, 0x26	; 38
    30be:	cf 0e       	add	r12, r31
    30c0:	d1 1c       	adc	r13, r1
    30c2:	cf 5c       	subi	r28, 0xCF	; 207
    30c4:	de 4f       	sbci	r29, 0xFE	; 254
    30c6:	88 81       	ld	r24, Y
    30c8:	99 81       	ldd	r25, Y+1	; 0x01
    30ca:	c1 53       	subi	r28, 0x31	; 49
    30cc:	d1 40       	sbci	r29, 0x01	; 1
    30ce:	86 96       	adiw	r24, 0x26	; 38
    30d0:	cf 5c       	subi	r28, 0xCF	; 207
    30d2:	de 4f       	sbci	r29, 0xFE	; 254
    30d4:	99 83       	std	Y+1, r25	; 0x01
    30d6:	88 83       	st	Y, r24
    30d8:	c1 53       	subi	r28, 0x31	; 49
    30da:	d1 40       	sbci	r29, 0x01	; 1
    30dc:	0a 5d       	subi	r16, 0xDA	; 218
    30de:	1f 4f       	sbci	r17, 0xFF	; 255
    30e0:	c7 5c       	subi	r28, 0xC7	; 199
    30e2:	de 4f       	sbci	r29, 0xFE	; 254
    30e4:	e8 81       	ld	r30, Y
    30e6:	f9 81       	ldd	r31, Y+1	; 0x01
    30e8:	c9 53       	subi	r28, 0x39	; 57
    30ea:	d1 40       	sbci	r29, 0x01	; 1
    30ec:	b6 96       	adiw	r30, 0x26	; 38
    30ee:	c7 5c       	subi	r28, 0xC7	; 199
    30f0:	de 4f       	sbci	r29, 0xFE	; 254
    30f2:	f9 83       	std	Y+1, r31	; 0x01
    30f4:	e8 83       	st	Y, r30
    30f6:	c9 53       	subi	r28, 0x39	; 57
    30f8:	d1 40       	sbci	r29, 0x01	; 1
    30fa:	cd 5c       	subi	r28, 0xCD	; 205
    30fc:	de 4f       	sbci	r29, 0xFE	; 254
    30fe:	88 81       	ld	r24, Y
    3100:	99 81       	ldd	r25, Y+1	; 0x01
    3102:	c3 53       	subi	r28, 0x33	; 51
    3104:	d1 40       	sbci	r29, 0x01	; 1
    3106:	86 96       	adiw	r24, 0x26	; 38
    3108:	cd 5c       	subi	r28, 0xCD	; 205
    310a:	de 4f       	sbci	r29, 0xFE	; 254
    310c:	99 83       	std	Y+1, r25	; 0x01
    310e:	88 83       	st	Y, r24
    3110:	c3 53       	subi	r28, 0x33	; 51
    3112:	d1 40       	sbci	r29, 0x01	; 1
    3114:	c3 5c       	subi	r28, 0xC3	; 195
    3116:	de 4f       	sbci	r29, 0xFE	; 254
    3118:	e8 81       	ld	r30, Y
    311a:	f9 81       	ldd	r31, Y+1	; 0x01
    311c:	cd 53       	subi	r28, 0x3D	; 61
    311e:	d1 40       	sbci	r29, 0x01	; 1
    3120:	b6 96       	adiw	r30, 0x26	; 38
    3122:	c3 5c       	subi	r28, 0xC3	; 195
    3124:	de 4f       	sbci	r29, 0xFE	; 254
    3126:	f9 83       	std	Y+1, r31	; 0x01
    3128:	e8 83       	st	Y, r30
    312a:	cd 53       	subi	r28, 0x3D	; 61
    312c:	d1 40       	sbci	r29, 0x01	; 1
    312e:	c9 5c       	subi	r28, 0xC9	; 201
    3130:	de 4f       	sbci	r29, 0xFE	; 254
    3132:	88 81       	ld	r24, Y
    3134:	99 81       	ldd	r25, Y+1	; 0x01
    3136:	c7 53       	subi	r28, 0x37	; 55
    3138:	d1 40       	sbci	r29, 0x01	; 1
    313a:	86 96       	adiw	r24, 0x26	; 38
    313c:	c9 5c       	subi	r28, 0xC9	; 201
    313e:	de 4f       	sbci	r29, 0xFE	; 254
    3140:	99 83       	std	Y+1, r25	; 0x01
    3142:	88 83       	st	Y, r24
    3144:	c7 53       	subi	r28, 0x37	; 55
    3146:	d1 40       	sbci	r29, 0x01	; 1
    3148:	c5 5c       	subi	r28, 0xC5	; 197
    314a:	de 4f       	sbci	r29, 0xFE	; 254
    314c:	e8 81       	ld	r30, Y
    314e:	f9 81       	ldd	r31, Y+1	; 0x01
    3150:	cb 53       	subi	r28, 0x3B	; 59
    3152:	d1 40       	sbci	r29, 0x01	; 1
    3154:	b6 96       	adiw	r30, 0x26	; 38
    3156:	c5 5c       	subi	r28, 0xC5	; 197
    3158:	de 4f       	sbci	r29, 0xFE	; 254
    315a:	f9 83       	std	Y+1, r31	; 0x01
    315c:	e8 83       	st	Y, r30
    315e:	cb 53       	subi	r28, 0x3B	; 59
    3160:	d1 40       	sbci	r29, 0x01	; 1
    3162:	cb 5c       	subi	r28, 0xCB	; 203
    3164:	de 4f       	sbci	r29, 0xFE	; 254
    3166:	88 81       	ld	r24, Y
    3168:	99 81       	ldd	r25, Y+1	; 0x01
    316a:	c5 53       	subi	r28, 0x35	; 53
    316c:	d1 40       	sbci	r29, 0x01	; 1
    316e:	86 96       	adiw	r24, 0x26	; 38
    3170:	cb 5c       	subi	r28, 0xCB	; 203
    3172:	de 4f       	sbci	r29, 0xFE	; 254
    3174:	99 83       	std	Y+1, r25	; 0x01
    3176:	88 83       	st	Y, r24
    3178:	c5 53       	subi	r28, 0x35	; 53
    317a:	d1 40       	sbci	r29, 0x01	; 1
    317c:	96 e2       	ldi	r25, 0x26	; 38
    317e:	e9 0e       	add	r14, r25
    3180:	f1 1c       	adc	r15, r1
    3182:	e6 e2       	ldi	r30, 0x26	; 38
    3184:	6e 0e       	add	r6, r30
    3186:	71 1c       	adc	r7, r1
		dst += (i * NEWSIZE);			// Step to next location for new data in the buffer
		memcpy(dst, src, OLDSIZE);		// Move only the old (smaller) data
	}

	// Rearrange one output at a time	
	for (i = 0; i < MAX_OUTPUTS; i++)
    3188:	ce 5b       	subi	r28, 0xBE	; 190
    318a:	de 4f       	sbci	r29, 0xFE	; 254
    318c:	88 81       	ld	r24, Y
    318e:	99 81       	ldd	r25, Y+1	; 0x01
    3190:	c2 54       	subi	r28, 0x42	; 66
    3192:	d1 40       	sbci	r29, 0x01	; 1
    3194:	08 17       	cp	r16, r24
    3196:	19 07       	cpc	r17, r25
    3198:	09 f0       	breq	.+2      	; 0x319c <Update_V1_0_to_V1_1+0x40e>
    319a:	9a ce       	rjmp	.-716    	; 0x2ed0 <Update_V1_0_to_V1_1+0x142>
	}
		
	// Copy buffer back into new structure
	src = (void*)mixer_buffer;
	dst = (void*)Config.Channel;
	memcpy(dst, src, sizeof(mixer_buffer) - 1); // This appears to be spot on.
    319c:	8f e2       	ldi	r24, 0x2F	; 47
    319e:	91 e0       	ldi	r25, 0x01	; 1
    31a0:	fe 01       	movw	r30, r28
    31a2:	31 96       	adiw	r30, 0x01	; 1
    31a4:	ab e3       	ldi	r26, 0x3B	; 59
    31a6:	b6 e0       	ldi	r27, 0x06	; 6
    31a8:	01 90       	ld	r0, Z+
    31aa:	0d 92       	st	X+, r0
    31ac:	01 97       	sbiw	r24, 0x01	; 1
    31ae:	e1 f7       	brne	.-8      	; 0x31a8 <Update_V1_0_to_V1_1+0x41a>

	// Restore corrupted byte manually
	Config.Channel[7].P2_source_b_volume = temp; 
    31b0:	cf 5b       	subi	r28, 0xBF	; 191
    31b2:	de 4f       	sbci	r29, 0xFE	; 254
    31b4:	98 81       	ld	r25, Y
    31b6:	c1 54       	subi	r28, 0x41	; 65
    31b8:	d1 40       	sbci	r29, 0x01	; 1
    31ba:	90 93 6a 07 	sts	0x076A, r25

	// Set magic number to V1.1 signature
	Config.setup = V1_1_SIGNATURE;
    31be:	86 e3       	ldi	r24, 0x36	; 54
    31c0:	80 93 a9 05 	sts	0x05A9, r24
}
    31c4:	cb 5b       	subi	r28, 0xBB	; 187
    31c6:	de 4f       	sbci	r29, 0xFE	; 254
    31c8:	0f b6       	in	r0, 0x3f	; 63
    31ca:	f8 94       	cli
    31cc:	de bf       	out	0x3e, r29	; 62
    31ce:	0f be       	out	0x3f, r0	; 63
    31d0:	cd bf       	out	0x3d, r28	; 61
    31d2:	df 91       	pop	r29
    31d4:	cf 91       	pop	r28
    31d6:	1f 91       	pop	r17
    31d8:	0f 91       	pop	r16
    31da:	ff 90       	pop	r15
    31dc:	ef 90       	pop	r14
    31de:	df 90       	pop	r13
    31e0:	cf 90       	pop	r12
    31e2:	bf 90       	pop	r11
    31e4:	af 90       	pop	r10
    31e6:	9f 90       	pop	r9
    31e8:	8f 90       	pop	r8
    31ea:	7f 90       	pop	r7
    31ec:	6f 90       	pop	r6
    31ee:	5f 90       	pop	r5
    31f0:	4f 90       	pop	r4
    31f2:	3f 90       	pop	r3
    31f4:	2f 90       	pop	r2
    31f6:	08 95       	ret

000031f8 <Update_V1_1_to_V1_1_B8>:

// Upgrade V1.1 structure to V1.1 Beta 8 structure
void Update_V1_1_to_V1_1_B8(void)
{
    31f8:	cf 93       	push	r28
    31fa:	df 93       	push	r29
    31fc:	cd b7       	in	r28, 0x3d	; 61
    31fe:	de b7       	in	r29, 0x3e	; 62
    3200:	28 97       	sbiw	r28, 0x08	; 8
    3202:	0f b6       	in	r0, 0x3f	; 63
    3204:	f8 94       	cli
    3206:	de bf       	out	0x3e, r29	; 62
    3208:	0f be       	out	0x3f, r0	; 63
    320a:	cd bf       	out	0x3d, r28	; 61
	int8_t	buffer[8];
	
	// Swap old settings into new
	buffer[0] = Config.RxMode;
    320c:	80 91 d2 05 	lds	r24, 0x05D2
    3210:	89 83       	std	Y+1, r24	; 0x01
	buffer[1] = Config.MPU6050_LPF;
    3212:	80 91 36 06 	lds	r24, 0x0636
    3216:	8a 83       	std	Y+2, r24	; 0x02
	buffer[2] = Config.Servo_rate;
    3218:	80 91 d3 05 	lds	r24, 0x05D3
    321c:	8b 83       	std	Y+3, r24	; 0x03
	buffer[3] = Config.PWM_Sync;
    321e:	80 91 d4 05 	lds	r24, 0x05D4
    3222:	8c 83       	std	Y+4, r24	; 0x04
	buffer[4] = Config.TxSeq;
    3224:	80 91 d5 05 	lds	r24, 0x05D5
    3228:	8d 83       	std	Y+5, r24	; 0x05
	buffer[5] = Config.AileronPol;
    322a:	90 91 d9 05 	lds	r25, 0x05D9
    322e:	9e 83       	std	Y+6, r25	; 0x06
	buffer[6] = Config.ElevatorPol;
    3230:	90 91 da 05 	lds	r25, 0x05DA
    3234:	9f 83       	std	Y+7, r25	; 0x07
	buffer[7] = Config.RudderPol;
    3236:	90 91 3a 06 	lds	r25, 0x063A
    323a:	98 87       	std	Y+8, r25	; 0x08
	
	// Copy back to RC items structure
	memcpy(&Config.RxMode, &buffer,7);
    323c:	27 e0       	ldi	r18, 0x07	; 7
    323e:	fe 01       	movw	r30, r28
    3240:	31 96       	adiw	r30, 0x01	; 1
    3242:	a2 ed       	ldi	r26, 0xD2	; 210
    3244:	b5 e0       	ldi	r27, 0x05	; 5
    3246:	01 90       	ld	r0, Z+
    3248:	0d 92       	st	X+, r0
    324a:	2a 95       	dec	r18
    324c:	e1 f7       	brne	.-8      	; 0x3246 <Update_V1_1_to_V1_1_B8+0x4e>
	
	// Copy back to General items structure
	Config.MPU6050_LPF = buffer[7];
    324e:	90 93 36 06 	sts	0x0636, r25
	
	// "None" no longer an option for this channel
	if (Config.FlightChan == NOCHAN)
    3252:	88 30       	cpi	r24, 0x08	; 8
    3254:	19 f4       	brne	.+6      	; 0x325c <Update_V1_1_to_V1_1_B8+0x64>
	{
		Config.FlightChan = AUX3;
    3256:	87 e0       	ldi	r24, 0x07	; 7
    3258:	80 93 d6 05 	sts	0x05D6, r24
	}
	
	// Set magic number to V1.1 Beta 8 signature
	Config.setup = V1_1_B8_SIGNATURE;
    325c:	87 e3       	ldi	r24, 0x37	; 55
    325e:	80 93 a9 05 	sts	0x05A9, r24
}
    3262:	28 96       	adiw	r28, 0x08	; 8
    3264:	0f b6       	in	r0, 0x3f	; 63
    3266:	f8 94       	cli
    3268:	de bf       	out	0x3e, r29	; 62
    326a:	0f be       	out	0x3f, r0	; 63
    326c:	cd bf       	out	0x3d, r28	; 61
    326e:	df 91       	pop	r29
    3270:	cf 91       	pop	r28
    3272:	08 95       	ret

00003274 <Update_V1_1B8_to_V1_1_B10>:

// Upgrade V1.1 B8 settings to V1.1 Beta 10 settings
void Update_V1_1B8_to_V1_1_B10(void)
{
	// Reset filters to more appropriate values
	Config.Acc_LPF = convert_filter_B8_B10(Config.Acc_LPF);
    3274:	e0 91 37 06 	lds	r30, 0x0637
    3278:	e7 30       	cpi	r30, 0x07	; 7
    327a:	28 f4       	brcc	.+10     	; 0x3286 <Update_V1_1B8_to_V1_1_B10+0x12>
    327c:	f0 e0       	ldi	r31, 0x00	; 0
    327e:	e4 5f       	subi	r30, 0xF4	; 244
    3280:	fa 4f       	sbci	r31, 0xFA	; 250
    3282:	80 81       	ld	r24, Z
    3284:	01 c0       	rjmp	.+2      	; 0x3288 <Update_V1_1B8_to_V1_1_B10+0x14>
    3286:	87 e0       	ldi	r24, 0x07	; 7
    3288:	80 93 37 06 	sts	0x0637, r24
	Config.Gyro_LPF = convert_filter_B8_B10(Config.Gyro_LPF);
    328c:	e0 91 38 06 	lds	r30, 0x0638
    3290:	e7 30       	cpi	r30, 0x07	; 7
    3292:	28 f4       	brcc	.+10     	; 0x329e <Update_V1_1B8_to_V1_1_B10+0x2a>
    3294:	f0 e0       	ldi	r31, 0x00	; 0
    3296:	e4 5f       	subi	r30, 0xF4	; 244
    3298:	fa 4f       	sbci	r31, 0xFA	; 250
    329a:	80 81       	ld	r24, Z
    329c:	01 c0       	rjmp	.+2      	; 0x32a0 <Update_V1_1B8_to_V1_1_B10+0x2c>
    329e:	87 e0       	ldi	r24, 0x07	; 7
    32a0:	80 93 38 06 	sts	0x0638, r24

	// Set magic number to V1.1 Beta 10 signature
	Config.setup = V1_1_B10_SIGNATURE;
    32a4:	88 e3       	ldi	r24, 0x38	; 56
    32a6:	80 93 a9 05 	sts	0x05A9, r24
    32aa:	08 95       	ret

000032ac <Set_EEPROM_Default_Config>:
	return new_filter;
}

// Force a factory reset
void Set_EEPROM_Default_Config(void)
{
    32ac:	0f 93       	push	r16
    32ae:	1f 93       	push	r17
    32b0:	cf 93       	push	r28
    32b2:	df 93       	push	r29
	uint8_t i;
	
	// Clear entire Config space first
	memset(&Config.setup,0,(sizeof(Config)));
    32b4:	88 e0       	ldi	r24, 0x08	; 8
    32b6:	92 e0       	ldi	r25, 0x02	; 2
    32b8:	e9 ea       	ldi	r30, 0xA9	; 169
    32ba:	f5 e0       	ldi	r31, 0x05	; 5
    32bc:	df 01       	movw	r26, r30
    32be:	9c 01       	movw	r18, r24
    32c0:	1d 92       	st	X+, r1
    32c2:	21 50       	subi	r18, 0x01	; 1
    32c4:	30 40       	sbci	r19, 0x00	; 0
    32c6:	e1 f7       	brne	.-8      	; 0x32c0 <Set_EEPROM_Default_Config+0x14>

	// Set magic number to current signature
	Config.setup = MAGIC_NUMBER;
    32c8:	88 e3       	ldi	r24, 0x38	; 56
    32ca:	80 93 a9 05 	sts	0x05A9, r24

	// Misc settings
	Config.RxMode = PWM;				// Default to PWM
	Config.PWM_Sync = GEAR;
    32ce:	24 e0       	ldi	r18, 0x04	; 4
    32d0:	20 93 d4 05 	sts	0x05D4, r18
	
	// B8 Software LPF conversion table 5Hz, 10Hz, 21Hz, 32Hz, 44Hz, 74Hz, None
	// B10 Software LPF conversion table 5Hz, 10Hz, 21Hz, 44Hz, 94Hz, 184Hz, 260Hz, None
	Config.Acc_LPF = HZ21;				// Acc LPF around 21Hz
    32d4:	82 e0       	ldi	r24, 0x02	; 2
    32d6:	80 93 37 06 	sts	0x0637, r24
	Config.Gyro_LPF = NOFILTER;			// Gyro LPF off "None"
    32da:	37 e0       	ldi	r19, 0x07	; 7
    32dc:	30 93 38 06 	sts	0x0638, r19
	
	// Set default sensor LPF
	Config.MPU6050_LPF = HZ21;			// 6 - 2 = 4. MPU6050's internal LPF. Values are 0x06 = 5Hz, (5)10Hz, (4)21Hz*, (3)44Hz, (2)94Hz, (1)184Hz LPF, (0)260Hz

	// Preset AccZeroNormZ
	Config.AccZeroNormZ		= 128;
    32e0:	80 e8       	ldi	r24, 0x80	; 128
    32e2:	90 e0       	ldi	r25, 0x00	; 0
    32e4:	90 93 9a 07 	sts	0x079A, r25
    32e8:	80 93 99 07 	sts	0x0799, r24

	#ifdef KK2Mini
	Config.Contrast = 30;				// Contrast (KK2 Mini)
	#else
	Config.Contrast = 36;				// Contrast (Everything else)
    32ec:	84 e2       	ldi	r24, 0x24	; 36
    32ee:	80 93 32 06 	sts	0x0632, r24
	#endif
	
	Config.CF_factor = 7;
    32f2:	30 93 39 06 	sts	0x0639, r19
	Config.FlightChan = GEAR;			// Channel GEAR switches flight mode by default
    32f6:	20 93 d6 05 	sts	0x05D6, r18
	Config.Disarm_timer = 30;			// Default to 30 seconds
    32fa:	8e e1       	ldi	r24, 0x1E	; 30
    32fc:	80 93 34 06 	sts	0x0634, r24
	Config.Transition_P1n = 50;			// Set P1.n point to 50%
    3300:	82 e3       	ldi	r24, 0x32	; 50
    3302:	80 93 d8 05 	sts	0x05D8, r24
    3306:	e6 ef       	ldi	r30, 0xF6	; 246
    3308:	f0 e0       	ldi	r31, 0x00	; 0
    330a:	ca ea       	ldi	r28, 0xAA	; 170
    330c:	d5 e0       	ldi	r29, 0x05	; 5
    330e:	a3 e8       	ldi	r26, 0x83	; 131
    3310:	b7 e0       	ldi	r27, 0x07	; 7

	// Servo defaults
	for (i = 0; i < MAX_RC_CHANNELS; i++)
	{
		Config.ChannelOrder[i] = pgm_read_byte(&JR[i]);
		Config.RxChannelZeroOffset[i] = 3750;
    3312:	86 ea       	ldi	r24, 0xA6	; 166
    3314:	9e e0       	ldi	r25, 0x0E	; 14
	Config.Transition_P1n = 50;			// Set P1.n point to 50%

	// Servo defaults
	for (i = 0; i < MAX_RC_CHANNELS; i++)
	{
		Config.ChannelOrder[i] = pgm_read_byte(&JR[i]);
    3316:	24 91       	lpm	r18, Z
    3318:	29 93       	st	Y+, r18
		Config.RxChannelZeroOffset[i] = 3750;
    331a:	8d 93       	st	X+, r24
    331c:	9d 93       	st	X+, r25
    331e:	31 96       	adiw	r30, 0x01	; 1
	Config.FlightChan = GEAR;			// Channel GEAR switches flight mode by default
	Config.Disarm_timer = 30;			// Default to 30 seconds
	Config.Transition_P1n = 50;			// Set P1.n point to 50%

	// Servo defaults
	for (i = 0; i < MAX_RC_CHANNELS; i++)
    3320:	30 e0       	ldi	r19, 0x00	; 0
    3322:	ee 3f       	cpi	r30, 0xFE	; 254
    3324:	f3 07       	cpc	r31, r19
    3326:	b9 f7       	brne	.-18     	; 0x3316 <Set_EEPROM_Default_Config+0x6a>
		Config.ChannelOrder[i] = pgm_read_byte(&JR[i]);
		Config.RxChannelZeroOffset[i] = 3750;
	}
	
	// Monopolar throttle is a special case. Set to -100% or -1000
	Config.RxChannelZeroOffset[THROTTLE] = 2750;
    3328:	8e eb       	ldi	r24, 0xBE	; 190
    332a:	9a e0       	ldi	r25, 0x0A	; 10
    332c:	90 93 84 07 	sts	0x0784, r25
    3330:	80 93 83 07 	sts	0x0783, r24
    3334:	ef e5       	ldi	r30, 0x5F	; 95
    3336:	f6 e0       	ldi	r31, 0x06	; 6
    3338:	c3 e7       	ldi	r28, 0x73	; 115
    333a:	d7 e0       	ldi	r29, 0x07	; 7
    333c:	0b e7       	ldi	r16, 0x7B	; 123
    333e:	17 e0       	ldi	r17, 0x07	; 7

	// Preset mixers to safe values
	for (i = 0; i < MAX_OUTPUTS; i++)
	{
		Config.Channel[i].P1n_position	= 50;
    3340:	62 e3       	ldi	r22, 0x32	; 50
		Config.Channel[i].P1_source_a 	= NOMIX;
    3342:	2f e0       	ldi	r18, 0x0F	; 15
		Config.Channel[i].P1_source_b 	= NOMIX;
		Config.Channel[i].P2_source_a 	= NOMIX;
		Config.Channel[i].P2_source_b 	= NOMIX;
		Config.min_travel[i] = -100;
    3344:	5c e9       	ldi	r21, 0x9C	; 156
		Config.max_travel[i] = 100;
    3346:	34 e6       	ldi	r19, 0x64	; 100
    3348:	cf 01       	movw	r24, r30
    334a:	4e 97       	sbiw	r24, 0x1e	; 30
	Config.RxChannelZeroOffset[THROTTLE] = 2750;

	// Preset mixers to safe values
	for (i = 0; i < MAX_OUTPUTS; i++)
	{
		Config.Channel[i].P1n_position	= 50;
    334c:	dc 01       	movw	r26, r24
    334e:	6c 93       	st	X, r22
    3350:	48 96       	adiw	r24, 0x18	; 24
		Config.Channel[i].P1_source_a 	= NOMIX;
    3352:	dc 01       	movw	r26, r24
    3354:	2c 93       	st	X, r18
    3356:	04 96       	adiw	r24, 0x04	; 4
		Config.Channel[i].P1_source_b 	= NOMIX;
    3358:	dc 01       	movw	r26, r24
    335a:	2c 93       	st	X, r18
    335c:	02 97       	sbiw	r24, 0x02	; 2
		Config.Channel[i].P2_source_a 	= NOMIX;
    335e:	dc 01       	movw	r26, r24
    3360:	2c 93       	st	X, r18
		Config.Channel[i].P2_source_b 	= NOMIX;
    3362:	20 83       	st	Z, r18
		Config.min_travel[i] = -100;
    3364:	59 93       	st	Y+, r21
		Config.max_travel[i] = 100;
    3366:	44 e6       	ldi	r20, 0x64	; 100
    3368:	d8 01       	movw	r26, r16
    336a:	3d 93       	st	X+, r19
    336c:	8d 01       	movw	r16, r26
    336e:	b6 96       	adiw	r30, 0x26	; 38
	
	// Monopolar throttle is a special case. Set to -100% or -1000
	Config.RxChannelZeroOffset[THROTTLE] = 2750;

	// Preset mixers to safe values
	for (i = 0; i < MAX_OUTPUTS; i++)
    3370:	b7 e0       	ldi	r27, 0x07	; 7
    3372:	ef 38       	cpi	r30, 0x8F	; 143
    3374:	fb 07       	cpc	r31, r27
    3376:	41 f7       	brne	.-48     	; 0x3348 <Set_EEPROM_Default_Config+0x9c>
		Config.min_travel[i] = -100;
		Config.max_travel[i] = 100;
	}

	// Preset simple mixing for primary channels - all models
	Config.Channel[OUT1].P1_throttle_volume = 100;
    3378:	40 93 44 06 	sts	0x0644, r20
	Config.Channel[OUT2].P1_aileron_volume = 100;
	Config.Channel[OUT3].P1_elevator_volume = 100;
	Config.Channel[OUT4].P1_rudder_volume = 100;
	
	// Set up profile 1
	Config.FlightMode[P1].Roll_P_mult = 60;			// PID defaults
    337c:	9c e3       	ldi	r25, 0x3C	; 60
    337e:	90 93 db 05 	sts	0x05DB, r25
	Config.FlightMode[P1].A_Roll_P_mult = 5;
    3382:	35 e0       	ldi	r19, 0x05	; 5
    3384:	30 93 df 05 	sts	0x05DF, r19
	Config.FlightMode[P1].Pitch_P_mult = 60;
    3388:	90 93 e1 05 	sts	0x05E1, r25
	Config.FlightMode[P1].A_Pitch_P_mult = 5;
    338c:	30 93 e5 05 	sts	0x05E5, r19
	Config.FlightMode[P1].Yaw_P_mult = 80;
	Config.FlightMode[P1].Roll_I_mult = 40;
    3390:	28 e2       	ldi	r18, 0x28	; 40
    3392:	20 93 dc 05 	sts	0x05DC, r18
	Config.FlightMode[P1].Roll_limit = 10;
	Config.FlightMode[P1].Pitch_I_mult = 40;
    3396:	20 93 e2 05 	sts	0x05E2, r18
	Config.FlightMode[P1].Pitch_limit = 10;
	Config.FlightMode[P1].Roll_Rate = 2;
	Config.FlightMode[P1].Pitch_Rate = 2;
	Config.FlightMode[P1].Yaw_Rate = 1;
    339a:	81 e0       	ldi	r24, 0x01	; 1
    339c:	80 93 ea 05 	sts	0x05EA, r24

	// Set up profile 2
	Config.FlightMode[P2].Roll_P_mult = 60;			// PID defaults
    33a0:	90 93 ed 05 	sts	0x05ED, r25
	Config.FlightMode[P2].A_Roll_P_mult = 5;
    33a4:	30 93 f1 05 	sts	0x05F1, r19
	Config.FlightMode[P2].Pitch_P_mult = 60;
    33a8:	90 93 f3 05 	sts	0x05F3, r25
	Config.FlightMode[P2].A_Pitch_P_mult = 5;
    33ac:	30 93 f7 05 	sts	0x05F7, r19
	Config.FlightMode[P2].Roll_limit = 10;
	Config.FlightMode[P2].Pitch_I_mult = 40;
	Config.FlightMode[P2].Pitch_limit = 10;
	Config.FlightMode[P2].Roll_Rate = 2;
	Config.FlightMode[P2].Pitch_Rate = 2;
	Config.FlightMode[P2].Yaw_Rate = 1;
    33b0:	80 93 fc 05 	sts	0x05FC, r24
	
	// Preset stick volumes
	Config.Channel[OUT1].P2_throttle_volume = 100;
    33b4:	40 93 45 06 	sts	0x0645, r20
	//**************************************
	//* Quadcopter X defaults for testing
	//**************************************
	
	// General
	Config.RxMode = SBUS;
    33b8:	32 e0       	ldi	r19, 0x02	; 2
    33ba:	30 93 d2 05 	sts	0x05D2, r19
	Config.FlightChan = GEAR;
	Config.ArmMode = ARMABLE;
    33be:	80 93 33 06 	sts	0x0633, r24
	Config.Servo_rate = FAST;
    33c2:	30 93 d3 05 	sts	0x05D3, r19
	Config.MPU6050_LPF = HZ94;
    33c6:	34 e0       	ldi	r19, 0x04	; 4
    33c8:	30 93 36 06 	sts	0x0636, r19
	
	// Profile 1 (Baseline)
	Config.FlightMode[P1].Roll_P_mult = 60;		// Gyro P-terms
	Config.FlightMode[P1].Pitch_P_mult = 60;	
	Config.FlightMode[P1].Yaw_P_mult = 40;
    33cc:	20 93 e7 05 	sts	0x05E7, r18

	Config.FlightMode[P1].A_Roll_P_mult = 5;	// AL P-terms
	Config.FlightMode[P1].A_Pitch_P_mult = 5;
	Config.FlightMode[P1].A_Zed_P_mult = 10;
    33d0:	3a e0       	ldi	r19, 0x0A	; 10
    33d2:	30 93 ec 05 	sts	0x05EC, r19
	
	Config.FlightMode[P1].Roll_I_mult = 40;		// I-terms
	Config.FlightMode[P1].Pitch_I_mult = 40;
	Config.FlightMode[P1].Yaw_I_mult = 60;
    33d6:	90 93 e8 05 	sts	0x05E8, r25
	Config.FlightMode[P1].Roll_limit = 20;		// I-term limits
    33da:	34 e1       	ldi	r19, 0x14	; 20
    33dc:	30 93 dd 05 	sts	0x05DD, r19
	Config.FlightMode[P1].Pitch_limit = 20;
    33e0:	30 93 e3 05 	sts	0x05E3, r19
	Config.FlightMode[P1].Yaw_limit = 50;
    33e4:	32 e3       	ldi	r19, 0x32	; 50
    33e6:	30 93 e9 05 	sts	0x05E9, r19
		
	Config.FlightMode[P1].Roll_Rate = 1;		// Stick rates (into I-terms) 0 is slowest, 4 is fastest.
    33ea:	80 93 de 05 	sts	0x05DE, r24
	Config.FlightMode[P1].Pitch_Rate = 1;
    33ee:	80 93 e4 05 	sts	0x05E4, r24
	Config.FlightMode[P1].Yaw_Rate = 1;
	
	// Profile 2 (For comparison)
	Config.FlightMode[P2].Roll_P_mult = 60;		// Gyro P-terms
	Config.FlightMode[P2].Pitch_P_mult = 60;
	Config.FlightMode[P2].Yaw_P_mult = 40;
    33f2:	20 93 f9 05 	sts	0x05F9, r18
	
	Config.FlightMode[P2].A_Roll_P_mult = 5;	// AL P-terms
	Config.FlightMode[P2].A_Pitch_P_mult = 5;
	Config.FlightMode[P2].A_Zed_P_mult = 0;
		
	Config.FlightMode[P2].Roll_I_mult = 60;		// I-terms
    33f6:	90 93 ee 05 	sts	0x05EE, r25
	Config.FlightMode[P2].Pitch_I_mult = 60;
    33fa:	90 93 f4 05 	sts	0x05F4, r25
	Config.FlightMode[P2].Yaw_I_mult = 40;
    33fe:	20 93 fa 05 	sts	0x05FA, r18
	Config.FlightMode[P2].Roll_limit = 0;		// I-term limits
	Config.FlightMode[P2].Pitch_limit = 0;
	Config.FlightMode[P2].Yaw_limit = 0;
	
	Config.FlightMode[P2].Roll_Rate = 1;		// Stick rates (into I-terms)
    3402:	80 93 f0 05 	sts	0x05F0, r24
	Config.FlightMode[P2].Pitch_Rate = 1;
    3406:	80 93 f6 05 	sts	0x05F6, r24
    340a:	e5 e4       	ldi	r30, 0x45	; 69
    340c:	f6 e0       	ldi	r31, 0x06	; 6
	Config.FlightMode[P2].Yaw_Rate = 1;	
	
	for (i = 0; i <= OUT4; i++)
	{
		Config.Channel[i].P1_throttle_volume = 100;
    340e:	84 e6       	ldi	r24, 0x64	; 100
		Config.Channel[i].P2_throttle_volume = 100;
		Config.Channel[i].Motor_marker = MOTOR;
    3410:	92 e0       	ldi	r25, 0x02	; 2
    3412:	df 01       	movw	r26, r30
    3414:	11 97       	sbiw	r26, 0x01	; 1
	Config.FlightMode[P2].Pitch_Rate = 1;
	Config.FlightMode[P2].Yaw_Rate = 1;	
	
	for (i = 0; i <= OUT4; i++)
	{
		Config.Channel[i].P1_throttle_volume = 100;
    3416:	8c 93       	st	X, r24
		Config.Channel[i].P2_throttle_volume = 100;
    3418:	80 83       	st	Z, r24
    341a:	15 97       	sbiw	r26, 0x05	; 5
		Config.Channel[i].Motor_marker = MOTOR;
    341c:	9c 93       	st	X, r25
    341e:	b6 96       	adiw	r30, 0x26	; 38
	
	Config.FlightMode[P2].Roll_Rate = 1;		// Stick rates (into I-terms)
	Config.FlightMode[P2].Pitch_Rate = 1;
	Config.FlightMode[P2].Yaw_Rate = 1;	
	
	for (i = 0; i <= OUT4; i++)
    3420:	26 e0       	ldi	r18, 0x06	; 6
    3422:	ed 3d       	cpi	r30, 0xDD	; 221
    3424:	f2 07       	cpc	r31, r18
    3426:	a9 f7       	brne	.-22     	; 0x3412 <Set_EEPROM_Default_Config+0x166>
		Config.Channel[i].P2_throttle_volume = 100;
		Config.Channel[i].Motor_marker = MOTOR;
	}

	// OUT1
	Config.Channel[OUT1].P1_elevator_volume = -5;
    3428:	4b ef       	ldi	r20, 0xFB	; 251
    342a:	40 93 49 06 	sts	0x0649, r20
	Config.Channel[OUT1].P2_elevator_volume = -10;
    342e:	26 ef       	ldi	r18, 0xF6	; 246
    3430:	20 93 4a 06 	sts	0x064A, r18
	Config.Channel[OUT1].P1_aileron_volume = 5;
    3434:	35 e0       	ldi	r19, 0x05	; 5
    3436:	30 93 47 06 	sts	0x0647, r19
	Config.Channel[OUT1].P2_aileron_volume = 10;
    343a:	9a e0       	ldi	r25, 0x0A	; 10
    343c:	90 93 48 06 	sts	0x0648, r25
	Config.Channel[OUT1].P1_rudder_volume = -10;
    3440:	20 93 4b 06 	sts	0x064B, r18
	Config.Channel[OUT1].P2_rudder_volume = -20;
    3444:	6c ee       	ldi	r22, 0xEC	; 236
    3446:	60 93 4c 06 	sts	0x064C, r22
	Config.Channel[OUT1].P1_Roll_gyro = ON;
    344a:	81 e0       	ldi	r24, 0x01	; 1
    344c:	80 93 4d 06 	sts	0x064D, r24
	Config.Channel[OUT1].P1_Roll_acc = ON;
    3450:	80 93 53 06 	sts	0x0653, r24
	Config.Channel[OUT1].P2_Roll_gyro = ON;
    3454:	80 93 4e 06 	sts	0x064E, r24
	Config.Channel[OUT1].P2_Roll_acc = ON;
    3458:	80 93 54 06 	sts	0x0654, r24
	Config.Channel[OUT1].P1_Pitch_gyro = ON;
    345c:	80 93 4f 06 	sts	0x064F, r24
	Config.Channel[OUT1].P1_Pitch_acc = ON;
    3460:	80 93 55 06 	sts	0x0655, r24
	Config.Channel[OUT1].P2_Pitch_gyro = ON;
    3464:	80 93 50 06 	sts	0x0650, r24
	Config.Channel[OUT1].P2_Pitch_acc = ON;
    3468:	80 93 56 06 	sts	0x0656, r24
	Config.Channel[OUT1].P1_Yaw_gyro = ON;
    346c:	80 93 51 06 	sts	0x0651, r24
	Config.Channel[OUT1].P2_Yaw_gyro = ON;	
    3470:	80 93 52 06 	sts	0x0652, r24
	
	// OUT2
	Config.Channel[OUT2].P1_elevator_volume = -5;
    3474:	40 93 6f 06 	sts	0x066F, r20
	Config.Channel[OUT2].P2_elevator_volume = -10;	
    3478:	20 93 70 06 	sts	0x0670, r18
	Config.Channel[OUT2].P1_aileron_volume = -5;
    347c:	40 93 6d 06 	sts	0x066D, r20
	Config.Channel[OUT2].P2_aileron_volume = -10;
    3480:	20 93 6e 06 	sts	0x066E, r18
	Config.Channel[OUT2].P1_rudder_volume = 10;
    3484:	90 93 71 06 	sts	0x0671, r25
	Config.Channel[OUT2].P2_rudder_volume = 20;
    3488:	54 e1       	ldi	r21, 0x14	; 20
    348a:	50 93 72 06 	sts	0x0672, r21
	Config.Channel[OUT2].P1_Roll_gyro = ON;
    348e:	80 93 73 06 	sts	0x0673, r24
	Config.Channel[OUT2].P1_Roll_acc = ON;
    3492:	80 93 79 06 	sts	0x0679, r24
	Config.Channel[OUT2].P2_Roll_gyro = ON;
    3496:	80 93 74 06 	sts	0x0674, r24
	Config.Channel[OUT2].P2_Roll_acc = ON;
    349a:	80 93 7a 06 	sts	0x067A, r24
	Config.Channel[OUT2].P1_Pitch_gyro = ON;
    349e:	80 93 75 06 	sts	0x0675, r24
	Config.Channel[OUT2].P1_Pitch_acc = ON;
    34a2:	80 93 7b 06 	sts	0x067B, r24
	Config.Channel[OUT2].P2_Pitch_gyro = ON;
    34a6:	80 93 76 06 	sts	0x0676, r24
	Config.Channel[OUT2].P2_Pitch_acc = ON;
    34aa:	80 93 7c 06 	sts	0x067C, r24
	Config.Channel[OUT2].P1_Yaw_gyro = ON;
    34ae:	80 93 77 06 	sts	0x0677, r24
	Config.Channel[OUT2].P2_Yaw_gyro = ON;
    34b2:	80 93 78 06 	sts	0x0678, r24
	
	// OUT3
	Config.Channel[OUT3].P1_elevator_volume = 5;
    34b6:	30 93 95 06 	sts	0x0695, r19
	Config.Channel[OUT3].P2_elevator_volume = 10;
    34ba:	90 93 96 06 	sts	0x0696, r25
	Config.Channel[OUT3].P1_aileron_volume = -5;
    34be:	40 93 93 06 	sts	0x0693, r20
	Config.Channel[OUT3].P2_aileron_volume = -10;
    34c2:	20 93 94 06 	sts	0x0694, r18
	Config.Channel[OUT3].P1_rudder_volume = -10;
    34c6:	20 93 97 06 	sts	0x0697, r18
	Config.Channel[OUT3].P2_rudder_volume = -20;
    34ca:	60 93 98 06 	sts	0x0698, r22
	Config.Channel[OUT3].P1_Roll_gyro = ON;
    34ce:	80 93 99 06 	sts	0x0699, r24
	Config.Channel[OUT3].P1_Roll_acc = ON;
    34d2:	80 93 9f 06 	sts	0x069F, r24
	Config.Channel[OUT3].P2_Roll_gyro = ON;
    34d6:	80 93 9a 06 	sts	0x069A, r24
	Config.Channel[OUT3].P2_Roll_acc = ON;
    34da:	80 93 a0 06 	sts	0x06A0, r24
	Config.Channel[OUT3].P1_Pitch_gyro = ON;
    34de:	80 93 9b 06 	sts	0x069B, r24
	Config.Channel[OUT3].P1_Pitch_acc = ON;
    34e2:	80 93 a1 06 	sts	0x06A1, r24
	Config.Channel[OUT3].P2_Pitch_gyro = ON;
    34e6:	80 93 9c 06 	sts	0x069C, r24
	Config.Channel[OUT3].P2_Pitch_acc = ON;
    34ea:	80 93 a2 06 	sts	0x06A2, r24
	Config.Channel[OUT3].P1_Yaw_gyro = ON;
    34ee:	80 93 9d 06 	sts	0x069D, r24
	Config.Channel[OUT3].P2_Yaw_gyro = ON;
    34f2:	80 93 9e 06 	sts	0x069E, r24
		
	// OUT4
	Config.Channel[OUT4].P1_elevator_volume = 5;
    34f6:	30 93 bb 06 	sts	0x06BB, r19
	Config.Channel[OUT4].P2_elevator_volume = 10;
    34fa:	90 93 bc 06 	sts	0x06BC, r25
	Config.Channel[OUT4].P1_aileron_volume = 5;
    34fe:	30 93 b9 06 	sts	0x06B9, r19
	Config.Channel[OUT4].P2_aileron_volume = 10;
    3502:	90 93 ba 06 	sts	0x06BA, r25
	Config.Channel[OUT4].P1_rudder_volume = 10;
    3506:	90 93 bd 06 	sts	0x06BD, r25
	Config.Channel[OUT4].P2_rudder_volume = 20;
    350a:	50 93 be 06 	sts	0x06BE, r21
	Config.Channel[OUT4].P1_Roll_gyro = ON;
    350e:	80 93 bf 06 	sts	0x06BF, r24
	Config.Channel[OUT4].P1_Roll_acc = ON;
    3512:	80 93 c5 06 	sts	0x06C5, r24
	Config.Channel[OUT4].P2_Roll_gyro = ON;
    3516:	80 93 c0 06 	sts	0x06C0, r24
	Config.Channel[OUT4].P2_Roll_acc = ON;
    351a:	80 93 c6 06 	sts	0x06C6, r24
	Config.Channel[OUT4].P1_Pitch_gyro = ON;
    351e:	80 93 c1 06 	sts	0x06C1, r24
	Config.Channel[OUT4].P1_Pitch_acc = ON;
    3522:	80 93 c7 06 	sts	0x06C7, r24
	Config.Channel[OUT4].P2_Pitch_gyro = ON;
    3526:	80 93 c2 06 	sts	0x06C2, r24
	Config.Channel[OUT4].P2_Pitch_acc = ON;
    352a:	80 93 c8 06 	sts	0x06C8, r24
	Config.Channel[OUT4].P1_Yaw_gyro = ON;
    352e:	80 93 c3 06 	sts	0x06C3, r24
	Config.Channel[OUT4].P2_Yaw_gyro = ON;
    3532:	80 93 c4 06 	sts	0x06C4, r24
#endif

}
    3536:	df 91       	pop	r29
    3538:	cf 91       	pop	r28
    353a:	1f 91       	pop	r17
    353c:	0f 91       	pop	r16
    353e:	08 95       	ret

00003540 <Initial_EEPROM_Config_Load>:
		eeprom_write_byte(addr, value);
	}
}

bool Initial_EEPROM_Config_Load(void)
{
    3540:	cf 93       	push	r28
    3542:	df 93       	push	r29
    3544:	1f 92       	push	r1
    3546:	cd b7       	in	r28, 0x3d	; 61
    3548:	de b7       	in	r29, 0x3e	; 62
	bool	updated = false;
	
	// Read eeProm data into RAM
	eeprom_read_block((void*)&Config, (const void*)EEPROM_DATA_START_POS, sizeof(CONFIG_STRUCT));
    354a:	48 e0       	ldi	r20, 0x08	; 8
    354c:	52 e0       	ldi	r21, 0x02	; 2
    354e:	60 e0       	ldi	r22, 0x00	; 0
    3550:	70 e0       	ldi	r23, 0x00	; 0
    3552:	89 ea       	ldi	r24, 0xA9	; 169
    3554:	95 e0       	ldi	r25, 0x05	; 5
    3556:	0e 94 2b 4a 	call	0x9456	; 0x9456 <__eerd_block_m644pa>
	
	// See if we know what to do with the current eeprom data
	// Config.setup holds the magic number from the current EEPROM
	switch(Config.setup)
    355a:	80 91 a9 05 	lds	r24, 0x05A9
    355e:	86 33       	cpi	r24, 0x36	; 54
    3560:	59 f0       	breq	.+22     	; 0x3578 <Initial_EEPROM_Config_Load+0x38>
    3562:	28 f4       	brcc	.+10     	; 0x356e <Initial_EEPROM_Config_Load+0x2e>
    3564:	85 33       	cpi	r24, 0x35	; 53
    3566:	71 f4       	brne	.+28     	; 0x3584 <Initial_EEPROM_Config_Load+0x44>
	{
		case V1_0_SIGNATURE:				// V1.0 detected
			Update_V1_0_to_V1_1();
    3568:	0e 94 c7 16 	call	0x2d8e	; 0x2d8e <Update_V1_0_to_V1_1>
    356c:	05 c0       	rjmp	.+10     	; 0x3578 <Initial_EEPROM_Config_Load+0x38>
	// Read eeProm data into RAM
	eeprom_read_block((void*)&Config, (const void*)EEPROM_DATA_START_POS, sizeof(CONFIG_STRUCT));
	
	// See if we know what to do with the current eeprom data
	// Config.setup holds the magic number from the current EEPROM
	switch(Config.setup)
    356e:	87 33       	cpi	r24, 0x37	; 55
    3570:	29 f0       	breq	.+10     	; 0x357c <Initial_EEPROM_Config_Load+0x3c>
    3572:	88 33       	cpi	r24, 0x38	; 56
    3574:	49 f0       	breq	.+18     	; 0x3588 <Initial_EEPROM_Config_Load+0x48>
    3576:	06 c0       	rjmp	.+12     	; 0x3584 <Initial_EEPROM_Config_Load+0x44>
		case V1_0_SIGNATURE:				// V1.0 detected
			Update_V1_0_to_V1_1();
			// Fall through...

		case V1_1_SIGNATURE:				// V1.1 Beta 7 (or below) detected
			Update_V1_1_to_V1_1_B8();	
    3578:	0e 94 fc 18 	call	0x31f8	; 0x31f8 <Update_V1_1_to_V1_1_B8>
			// Fall through...

		case V1_1_B8_SIGNATURE:				// V1.1 Beta 8-9 detected
			Update_V1_1B8_to_V1_1_B10();
    357c:	0e 94 3a 19 	call	0x3274	; 0x3274 <Update_V1_1B8_to_V1_1_B10>
			updated = true;
    3580:	81 e0       	ldi	r24, 0x01	; 1
    3582:	03 c0       	rjmp	.+6      	; 0x358a <Initial_EEPROM_Config_Load+0x4a>
			// Fall through...
			break;

		default:							// Unknown solution - restore to factory defaults
			// Load factory defaults
			Set_EEPROM_Default_Config();
    3584:	0e 94 56 19 	call	0x32ac	; 0x32ac <Set_EEPROM_Default_Config>
	}
}

bool Initial_EEPROM_Config_Load(void)
{
	bool	updated = false;
    3588:	80 e0       	ldi	r24, 0x00	; 0
			Set_EEPROM_Default_Config();
			break;
	}
	
	// Save back to eeprom	
	Save_Config_to_EEPROM();
    358a:	89 83       	std	Y+1, r24	; 0x01
    358c:	0e 94 bc 16 	call	0x2d78	; 0x2d78 <Save_Config_to_EEPROM>
	
	// Return info regarding eeprom structure changes 
	return updated;
}
    3590:	89 81       	ldd	r24, Y+1	; 0x01
    3592:	0f 90       	pop	r0
    3594:	df 91       	pop	r29
    3596:	cf 91       	pop	r28
    3598:	08 95       	ret

0000359a <main>:
//************************************************************
//* Main loop
//************************************************************

int main(void)
{
    359a:	cf 93       	push	r28
    359c:	df 93       	push	r29
    359e:	cd b7       	in	r28, 0x3d	; 61
    35a0:	de b7       	in	r29, 0x3e	; 62
    35a2:	ab 97       	sbiw	r28, 0x2b	; 43
    35a4:	0f b6       	in	r0, 0x3f	; 63
    35a6:	f8 94       	cli
    35a8:	de bf       	out	0x3e, r29	; 62
    35aa:	0f be       	out	0x3f, r0	; 63
    35ac:	cd bf       	out	0x3d, r28	; 61
	uint8_t i = 0;
	int16_t PWM_pulses = 3; 
	uint32_t interval = 0;			// IMU interval
	
	// Do all init tasks
	init();
    35ae:	0e 94 07 2a 	call	0x540e	; 0x540e <init>
	int16_t temp1 = 0;
	uint16_t transition_time = 0;
	uint8_t	old_alarms = 0;
	uint8_t ServoFlag = 0;
	uint8_t i = 0;
	int16_t PWM_pulses = 3; 
    35b2:	23 e0       	ldi	r18, 0x03	; 3
    35b4:	30 e0       	ldi	r19, 0x00	; 0
    35b6:	3b a7       	std	Y+43, r19	; 0x2b
    35b8:	2a a7       	std	Y+42, r18	; 0x2a
	uint8_t Menu_mode = STATUS_TIMEOUT;
	int8_t	old_flight = 3;			// Old flight profile
	int8_t	old_trans_mode = 0;		// Old transition mode
	int16_t temp1 = 0;
	uint16_t transition_time = 0;
	uint8_t	old_alarms = 0;
    35ba:	18 a6       	std	Y+40, r1	; 0x28
	uint16_t InterruptCounter = 0;
	uint8_t	Disarm_seconds = 0;
	uint8_t Status_seconds = 0;
	uint8_t Menu_mode = STATUS_TIMEOUT;
	int8_t	old_flight = 3;			// Old flight profile
	int8_t	old_trans_mode = 0;		// Old transition mode
    35bc:	1f a2       	std	Y+39, r1	; 0x27
	// Locals
	uint16_t InterruptCounter = 0;
	uint8_t	Disarm_seconds = 0;
	uint8_t Status_seconds = 0;
	uint8_t Menu_mode = STATUS_TIMEOUT;
	int8_t	old_flight = 3;			// Old flight profile
    35be:	53 e0       	ldi	r21, 0x03	; 3
    35c0:	75 2e       	mov	r7, r21

	// Locals
	uint16_t InterruptCounter = 0;
	uint8_t	Disarm_seconds = 0;
	uint8_t Status_seconds = 0;
	uint8_t Menu_mode = STATUS_TIMEOUT;
    35c2:	18 e0       	ldi	r17, 0x08	; 8
	uint8_t ServoRate_TCNT2 = 0;

	// Locals
	uint16_t InterruptCounter = 0;
	uint8_t	Disarm_seconds = 0;
	uint8_t Status_seconds = 0;
    35c4:	18 8e       	std	Y+24, r1	; 0x18
	uint8_t Servo_TCNT2 = 0;
	uint8_t ServoRate_TCNT2 = 0;

	// Locals
	uint16_t InterruptCounter = 0;
	uint8_t	Disarm_seconds = 0;
    35c6:	1c 86       	std	Y+12, r1	; 0x0c
	uint8_t Ticker_TCNT2 = 0;
	uint8_t Servo_TCNT2 = 0;
	uint8_t ServoRate_TCNT2 = 0;

	// Locals
	uint16_t InterruptCounter = 0;
    35c8:	1f 8a       	std	Y+23, r1	; 0x17
    35ca:	1e 8a       	std	Y+22, r1	; 0x16
	uint8_t Refresh_TCNT2 = 0;
	uint8_t Disarm_TCNT2 = 0;
	uint8_t Arm_TCNT2 = 0;
	uint8_t Ticker_TCNT2 = 0;
	uint8_t Servo_TCNT2 = 0;
	uint8_t ServoRate_TCNT2 = 0;
    35cc:	1e a2       	std	Y+38, r1	; 0x26
	uint8_t Status_TCNT2 = 0;
	uint8_t Refresh_TCNT2 = 0;
	uint8_t Disarm_TCNT2 = 0;
	uint8_t Arm_TCNT2 = 0;
	uint8_t Ticker_TCNT2 = 0;
	uint8_t Servo_TCNT2 = 0;
    35ce:	1d a2       	std	Y+37, r1	; 0x25
	uint8_t Transition_TCNT2 = 0;
	uint8_t Status_TCNT2 = 0;
	uint8_t Refresh_TCNT2 = 0;
	uint8_t Disarm_TCNT2 = 0;
	uint8_t Arm_TCNT2 = 0;
	uint8_t Ticker_TCNT2 = 0;
    35d0:	1c a2       	std	Y+36, r1	; 0x24
	uint16_t RC_Rate_TCNT1 = 0;
	uint8_t Transition_TCNT2 = 0;
	uint8_t Status_TCNT2 = 0;
	uint8_t Refresh_TCNT2 = 0;
	uint8_t Disarm_TCNT2 = 0;
	uint8_t Arm_TCNT2 = 0;
    35d2:	1b a2       	std	Y+35, r1	; 0x23
	// Timer incrementers
	uint16_t RC_Rate_TCNT1 = 0;
	uint8_t Transition_TCNT2 = 0;
	uint8_t Status_TCNT2 = 0;
	uint8_t Refresh_TCNT2 = 0;
	uint8_t Disarm_TCNT2 = 0;
    35d4:	1a a2       	std	Y+34, r1	; 0x22

	// Timer incrementers
	uint16_t RC_Rate_TCNT1 = 0;
	uint8_t Transition_TCNT2 = 0;
	uint8_t Status_TCNT2 = 0;
	uint8_t Refresh_TCNT2 = 0;
    35d6:	19 a2       	std	Y+33, r1	; 0x21
	uint16_t ticker_16 = 0;

	// Timer incrementers
	uint16_t RC_Rate_TCNT1 = 0;
	uint8_t Transition_TCNT2 = 0;
	uint8_t Status_TCNT2 = 0;
    35d8:	18 a2       	std	Y+32, r1	; 0x20
	uint16_t Save_TCNT1 = 0;
	uint16_t ticker_16 = 0;

	// Timer incrementers
	uint16_t RC_Rate_TCNT1 = 0;
	uint8_t Transition_TCNT2 = 0;
    35da:	1f 8e       	std	Y+31, r1	; 0x1f
	uint16_t Disarm_timer = 0;
	uint16_t Save_TCNT1 = 0;
	uint16_t ticker_16 = 0;

	// Timer incrementers
	uint16_t RC_Rate_TCNT1 = 0;
    35dc:	41 2c       	mov	r4, r1
    35de:	51 2c       	mov	r5, r1
	uint16_t UpdateStatus_timer = 0;
	uint16_t Ticker_Count = 0;
	uint16_t RC_Timeout = 0;
	uint16_t Servo_Rate = 0;
	uint16_t Transition_timeout = 0;
	uint16_t Disarm_timer = 0;
    35e0:	21 2c       	mov	r2, r1
    35e2:	31 2c       	mov	r3, r1
	uint16_t Status_timeout = 0;
	uint16_t UpdateStatus_timer = 0;
	uint16_t Ticker_Count = 0;
	uint16_t RC_Timeout = 0;
	uint16_t Servo_Rate = 0;
	uint16_t Transition_timeout = 0;
    35e4:	1b 8a       	std	Y+19, r1	; 0x13
    35e6:	1a 8a       	std	Y+18, r1	; 0x12
	// 16-bit timers
	uint16_t Status_timeout = 0;
	uint16_t UpdateStatus_timer = 0;
	uint16_t Ticker_Count = 0;
	uint16_t RC_Timeout = 0;
	uint16_t Servo_Rate = 0;
    35e8:	19 8a       	std	Y+17, r1	; 0x11
    35ea:	18 8a       	std	Y+16, r1	; 0x10
	
	// 16-bit timers
	uint16_t Status_timeout = 0;
	uint16_t UpdateStatus_timer = 0;
	uint16_t Ticker_Count = 0;
	uint16_t RC_Timeout = 0;
    35ec:	1a 86       	std	Y+10, r1	; 0x0a
    35ee:	19 86       	std	Y+9, r1	; 0x09
	uint32_t PWM_interval = PWM_PERIOD_WORST;	// Loop period when generating PWM. Initialise with worst case until updated.
	
	// 16-bit timers
	uint16_t Status_timeout = 0;
	uint16_t UpdateStatus_timer = 0;
	uint16_t Ticker_Count = 0;
    35f0:	1e 8e       	std	Y+30, r1	; 0x1e
    35f2:	1d 8e       	std	Y+29, r1	; 0x1d
	uint32_t RC_Rate_Timer = 0;
	uint32_t PWM_interval = PWM_PERIOD_WORST;	// Loop period when generating PWM. Initialise with worst case until updated.
	
	// 16-bit timers
	uint16_t Status_timeout = 0;
	uint16_t UpdateStatus_timer = 0;
    35f4:	1a 8e       	std	Y+26, r1	; 0x1a
    35f6:	19 8e       	std	Y+25, r1	; 0x19
	uint32_t Arm_timer = 0;
	uint32_t RC_Rate_Timer = 0;
	uint32_t PWM_interval = PWM_PERIOD_WORST;	// Loop period when generating PWM. Initialise with worst case until updated.
	
	// 16-bit timers
	uint16_t Status_timeout = 0;
    35f8:	1f 86       	std	Y+15, r1	; 0x0f
    35fa:	1e 86       	std	Y+14, r1	; 0x0e
	bool SlowRC = true;

	// 32-bit timers
	uint32_t Arm_timer = 0;
	uint32_t RC_Rate_Timer = 0;
	uint32_t PWM_interval = PWM_PERIOD_WORST;	// Loop period when generating PWM. Initialise with worst case until updated.
    35fc:	61 e6       	ldi	r22, 0x61	; 97
    35fe:	c6 2e       	mov	r12, r22
    3600:	61 e5       	ldi	r22, 0x51	; 81
    3602:	d6 2e       	mov	r13, r22
    3604:	e1 2c       	mov	r14, r1
    3606:	f1 2c       	mov	r15, r1
	bool Interrupted_Clone = false;
	bool SlowRC = true;

	// 32-bit timers
	uint32_t Arm_timer = 0;
	uint32_t RC_Rate_Timer = 0;
    3608:	1c 82       	std	Y+4, r1	; 0x04
    360a:	1d 82       	std	Y+5, r1	; 0x05
    360c:	1e 82       	std	Y+6, r1	; 0x06
    360e:	1f 82       	std	Y+7, r1	; 0x07
	bool PWMOverride = false;
	bool Interrupted_Clone = false;
	bool SlowRC = true;

	// 32-bit timers
	uint32_t Arm_timer = 0;
    3610:	81 2c       	mov	r8, r1
    3612:	91 2c       	mov	r9, r1
    3614:	54 01       	movw	r10, r8
	bool RCInterruptsON = false;
	bool ServoTick = false;
	bool ResampleRCRate = false;
	bool PWMOverride = false;
	bool Interrupted_Clone = false;
	bool SlowRC = true;
    3616:	31 e0       	ldi	r19, 0x01	; 1
    3618:	38 87       	std	Y+8, r19	; 0x08
	bool PWMBlocked = false;
	bool RCInterruptsON = false;
	bool ServoTick = false;
	bool ResampleRCRate = false;
	bool PWMOverride = false;
	bool Interrupted_Clone = false;
    361a:	1a 82       	std	Y+2, r1	; 0x02
	bool TransitionUpdated = false;
	bool RCrateMeasured = false;
	bool PWMBlocked = false;
	bool RCInterruptsON = false;
	bool ServoTick = false;
	bool ResampleRCRate = false;
    361c:	1c 8e       	std	Y+28, r1	; 0x1c
	// Flags
	bool TransitionUpdated = false;
	bool RCrateMeasured = false;
	bool PWMBlocked = false;
	bool RCInterruptsON = false;
	bool ServoTick = false;
    361e:	1b 86       	std	Y+11, r1	; 0x0b
{
	// Flags
	bool TransitionUpdated = false;
	bool RCrateMeasured = false;
	bool PWMBlocked = false;
	bool RCInterruptsON = false;
    3620:	1b 8e       	std	Y+27, r1	; 0x1b
int main(void)
{
	// Flags
	bool TransitionUpdated = false;
	bool RCrateMeasured = false;
	bool PWMBlocked = false;
    3622:	1d 86       	std	Y+13, r1	; 0x0d

int main(void)
{
	// Flags
	bool TransitionUpdated = false;
	bool RCrateMeasured = false;
    3624:	1b 82       	std	Y+3, r1	; 0x03

	// Main loop
	while (1)
	{
		// Increment the loop counter
		LoopCount++;
    3626:	80 91 16 05 	lds	r24, 0x0516
    362a:	8f 5f       	subi	r24, 0xFF	; 255
    362c:	80 93 16 05 	sts	0x0516, r24
		//* Check for interruption of PWM generation
		//* The "JitterFlag" flag was reset just before PWM generation.
		//* Being set here means that an interrupt has occurred.
		//************************************************************

		if (JitterFlag == true)
    3630:	80 91 dd 07 	lds	r24, 0x07DD
    3634:	88 23       	and	r24, r24
    3636:	31 f0       	breq	.+12     	; 0x3644 <main+0xaa>
		{
			InterruptCounter++;
    3638:	4e 89       	ldd	r20, Y+22	; 0x16
    363a:	5f 89       	ldd	r21, Y+23	; 0x17
    363c:	4f 5f       	subi	r20, 0xFF	; 255
    363e:	5f 4f       	sbci	r21, 0xFF	; 255
    3640:	5f 8b       	std	Y+23, r21	; 0x17
    3642:	4e 8b       	std	Y+22, r20	; 0x16
		//* Increment Status_seconds every second and trigger
		//* a RC rate resample every second
		//************************************************************

		// Count elapsed seconds
		if (Status_timeout > SECOND_TIMER)
    3644:	2e 85       	ldd	r18, Y+14	; 0x0e
    3646:	3f 85       	ldd	r19, Y+15	; 0x0f
    3648:	2c 34       	cpi	r18, 0x4C	; 76
    364a:	3c 44       	sbci	r19, 0x4C	; 76
    364c:	98 f0       	brcs	.+38     	; 0x3674 <main+0xda>
		{
			Status_seconds++;
    364e:	28 8d       	ldd	r18, Y+24	; 0x18
    3650:	2f 5f       	subi	r18, 0xFF	; 255
    3652:	28 8f       	std	Y+24, r18	; 0x18
			Status_timeout = 0;

			// Update the interrupt count each second
			InterruptCount = InterruptCounter;
    3654:	4e 89       	ldd	r20, Y+22	; 0x16
    3656:	5f 89       	ldd	r21, Y+23	; 0x17
    3658:	50 93 1b 05 	sts	0x051B, r21
    365c:	40 93 1a 05 	sts	0x051A, r20
			InterruptCounter = 0;
			
			// Re-measure the frame rate in FAST mode every second
			if (Config.Servo_rate == FAST)
    3660:	80 91 d3 05 	lds	r24, 0x05D3
			Status_seconds++;
			Status_timeout = 0;

			// Update the interrupt count each second
			InterruptCount = InterruptCounter;
			InterruptCounter = 0;
    3664:	1f 8a       	std	Y+23, r1	; 0x17
    3666:	1e 8a       	std	Y+22, r1	; 0x16

		// Count elapsed seconds
		if (Status_timeout > SECOND_TIMER)
		{
			Status_seconds++;
			Status_timeout = 0;
    3668:	1f 86       	std	Y+15, r1	; 0x0f
    366a:	1e 86       	std	Y+14, r1	; 0x0e
			// Update the interrupt count each second
			InterruptCount = InterruptCounter;
			InterruptCounter = 0;
			
			// Re-measure the frame rate in FAST mode every second
			if (Config.Servo_rate == FAST)
    366c:	82 30       	cpi	r24, 0x02	; 2
    366e:	11 f4       	brne	.+4      	; 0x3674 <main+0xda>
			{
				ResampleRCRate = true;
    3670:	21 e0       	ldi	r18, 0x01	; 1
    3672:	2c 8f       	std	Y+28, r18	; 0x1c
		// Assume PWM is OK until through the state machine
		// If the state machine requires PWM to be blocked, 
		// it will set this flag
		PWMOverride = false; 

		switch(Menu_mode) 
    3674:	81 2f       	mov	r24, r17
    3676:	90 e0       	ldi	r25, 0x00	; 0
    3678:	8b 30       	cpi	r24, 0x0B	; 11
    367a:	91 05       	cpc	r25, r1
    367c:	08 f0       	brcs	.+2      	; 0x3680 <main+0xe6>
    367e:	7a c0       	rjmp	.+244    	; 0x3774 <main+0x1da>
    3680:	fc 01       	movw	r30, r24
    3682:	e2 5c       	subi	r30, 0xC2	; 194
    3684:	ff 4f       	sbci	r31, 0xFF	; 255
    3686:	0c 94 b4 49 	jmp	0x9368	; 0x9368 <__tablejump2__>
			// In IDLE mode, the text "Press for status" is displayed ONCE.
			// If a button is pressed the mode changes to PRESTATUS, where
			// it will wait for the right time to proceed.
			case IDLE:
				// If any button is pressed
				if((PINB & 0xf0) != 0xf0)
    368a:	83 b1       	in	r24, 0x03	; 3
    368c:	80 7f       	andi	r24, 0xF0	; 240
    368e:	80 3f       	cpi	r24, 0xF0	; 240
    3690:	41 f0       	breq	.+16     	; 0x36a2 <main+0x108>
					PWMOverride = false;
					
					// When not in idle mode, enable Timer0 interrupts as loop rate 
					// is slow and we need TMR0 to fully measure it.
					// This may cause PWM generation interruption
					TIMSK0 |= (1 << TOIE0);	
    3692:	80 91 6e 00 	lds	r24, 0x006E
    3696:	81 60       	ori	r24, 0x01	; 1
    3698:	80 93 6e 00 	sts	0x006E, r24
			// it will wait for the right time to proceed.
			case IDLE:
				// If any button is pressed
				if((PINB & 0xf0) != 0xf0)
				{
					Menu_mode = PRESTATUS;
    369c:	13 e0       	ldi	r17, 0x03	; 3
					// Reset the status screen timeout
					Status_seconds = 0;
    369e:	18 8e       	std	Y+24, r1	; 0x18
    36a0:	69 c0       	rjmp	.+210    	; 0x3774 <main+0x1da>
				}
				// Idle mode - fast loop rate so don't need TMR0.
				// We don't want TMR0 to interrupt PWM generation.
				else
				{
					TIMSK0 = 0; 		// Disable Timer0 interrupts
    36a2:	10 92 6e 00 	sts	0x006E, r1
					TIFR0 = 1;			// Clear interrupt flag
    36a6:	81 e0       	ldi	r24, 0x01	; 1
    36a8:	85 bb       	out	0x15, r24	; 21
    36aa:	64 c0       	rjmp	.+200    	; 0x3774 <main+0x1da>
			// If Interrupted or Interrupted_Clone is true, data must have just completed.
			// If Overdue is true, there is no data to interrupt.
			// PWM activity must stop before we attempt to pop up the status screen.
			case PRESTATUS:
				// If interrupted, or if currently "No signal"
				if (Interrupted || Interrupted_Clone || Overdue)
    36ac:	80 91 c2 07 	lds	r24, 0x07C2
    36b0:	81 11       	cpse	r24, r1
    36b2:	4e c0       	rjmp	.+156    	; 0x3750 <main+0x1b6>
    36b4:	3a 81       	ldd	r19, Y+2	; 0x02
    36b6:	31 11       	cpse	r19, r1
    36b8:	50 c0       	rjmp	.+160    	; 0x375a <main+0x1c0>
    36ba:	80 91 17 05 	lds	r24, 0x0517
    36be:	88 23       	and	r24, r24
    36c0:	09 f4       	brne	.+2      	; 0x36c4 <main+0x12a>
    36c2:	58 c0       	rjmp	.+176    	; 0x3774 <main+0x1da>
				{
					// Ready to move on
					Menu_mode = STATUS;
    36c4:	14 e0       	ldi	r17, 0x04	; 4
    36c6:	58 c0       	rjmp	.+176    	; 0x3778 <main+0x1de>
			case STATUS:
				// Reset the status screen period
				UpdateStatus_timer = 0;

				// Update status screen
				Display_status();
    36c8:	0e 94 ab 13 	call	0x2756	; 0x2756 <Display_status>
				
				// Prevent PWM output just after updating the LCD
				PWMOverride = true;

				// Wait for timeout
				Menu_mode = WAITING_TIMEOUT_BD;
    36cc:	16 e0       	ldi	r17, 0x06	; 6
				break;

			// Status screen first display
			case STATUS:
				// Reset the status screen period
				UpdateStatus_timer = 0;
    36ce:	1a 8e       	std	Y+26, r1	; 0x1a
    36d0:	19 8e       	std	Y+25, r1	; 0x19
    36d2:	40 c0       	rjmp	.+128    	; 0x3754 <main+0x1ba>

			// Status screen up, but button still down ;)
			// This is designed to stop the menu appearing instead of the status screen
			// as it will stay in this state until the button is released
			case WAITING_TIMEOUT_BD:
				if(BUTTON1 == 0)
    36d4:	1f 9b       	sbis	0x03, 7	; 3
    36d6:	4e c0       	rjmp	.+156    	; 0x3774 <main+0x1da>
				{
					Menu_mode = WAITING_TIMEOUT_BD;
				}
				else
				{
					Menu_mode = WAITING_TIMEOUT;
    36d8:	15 e0       	ldi	r17, 0x05	; 5
    36da:	4c c0       	rjmp	.+152    	; 0x3774 <main+0x1da>
												
			// Status screen up, waiting for timeout or action
			// but button is back up
			case WAITING_TIMEOUT:
				// In status screen, change back to idle after timing out
				if (Status_seconds >= 10)
    36dc:	28 8d       	ldd	r18, Y+24	; 0x18
    36de:	2a 30       	cpi	r18, 0x0A	; 10
    36e0:	08 f0       	brcs	.+2      	; 0x36e4 <main+0x14a>
    36e2:	40 c0       	rjmp	.+128    	; 0x3764 <main+0x1ca>
					// Enable PWM output
					PWMOverride = false;
				}

				// Jump to menu if button pressed
				else if(BUTTON1 == 0)
    36e4:	1f 9b       	sbis	0x03, 7	; 3
    36e6:	40 c0       	rjmp	.+128    	; 0x3768 <main+0x1ce>
					// Prevent PWM output
					PWMOverride = true; // Debug - not needed yet?
				}

				// Update status screen four times/sec while waiting to time out
				else if (UpdateStatus_timer > (SECOND_TIMER >> 2))
    36e8:	49 8d       	ldd	r20, Y+25	; 0x19
    36ea:	5a 8d       	ldd	r21, Y+26	; 0x1a
    36ec:	43 31       	cpi	r20, 0x13	; 19
    36ee:	53 41       	sbci	r21, 0x13	; 19
    36f0:	08 f4       	brcc	.+2      	; 0x36f4 <main+0x15a>
    36f2:	40 c0       	rjmp	.+128    	; 0x3774 <main+0x1da>
				{
					Menu_mode = PRESTATUS;
    36f4:	13 e0       	ldi	r17, 0x03	; 3
    36f6:	33 c0       	rjmp	.+102    	; 0x375e <main+0x1c4>
			// If Interrupted or Interrupted_Clone is true, data must have just completed.
			// If Overdue is true, there is no data to interrupt.
			// PWM activity must stop before we attempt to pop up the status screen.
			case PRESTATUS_TIMEOUT:
				// If interrupted, or if currently "No signal"
				if (Interrupted || Interrupted_Clone || Overdue)
    36f8:	80 91 c2 07 	lds	r24, 0x07C2
    36fc:	81 11       	cpse	r24, r1
    36fe:	36 c0       	rjmp	.+108    	; 0x376c <main+0x1d2>
    3700:	3a 81       	ldd	r19, Y+2	; 0x02
    3702:	31 11       	cpse	r19, r1
    3704:	33 c0       	rjmp	.+102    	; 0x376c <main+0x1d2>
    3706:	80 91 17 05 	lds	r24, 0x0517
    370a:	88 23       	and	r24, r24
    370c:	41 f1       	breq	.+80     	; 0x375e <main+0x1c4>
				{
					// Switch to STATUS_TIMEOUT mode
					Menu_mode = STATUS_TIMEOUT;
    370e:	18 e0       	ldi	r17, 0x08	; 8
    3710:	31 c0       	rjmp	.+98     	; 0x3774 <main+0x1da>

			// In STATUS_TIMEOUT mode, the idle screen is displayed and the mode 
			// changed to POSTSTATUS_TIMEOUT. 
			case STATUS_TIMEOUT:
				// Pop up the Idle screen
				idle_screen();
    3712:	0e 94 15 23 	call	0x462a	; 0x462a <idle_screen>

				// Switch to IDLE mode
				Menu_mode = POSTSTATUS_TIMEOUT;
    3716:	19 e0       	ldi	r17, 0x09	; 9
    3718:	1d c0       	rjmp	.+58     	; 0x3754 <main+0x1ba>

			// In POSTSTATUS_TIMEOUT mode, we wait for a PWM cycle to complete
			// The idle screen has been refreshed and we need to wait.
			case POSTSTATUS_TIMEOUT:
				// If interrupted, or if currently "No signal"
				if (Interrupted || Interrupted_Clone || Overdue)
    371a:	80 91 c2 07 	lds	r24, 0x07C2
    371e:	81 11       	cpse	r24, r1
    3720:	27 c0       	rjmp	.+78     	; 0x3770 <main+0x1d6>
    3722:	2a 81       	ldd	r18, Y+2	; 0x02
    3724:	21 11       	cpse	r18, r1
    3726:	24 c0       	rjmp	.+72     	; 0x3770 <main+0x1d6>
    3728:	80 91 17 05 	lds	r24, 0x0517
    372c:	88 23       	and	r24, r24
    372e:	21 f1       	breq	.+72     	; 0x3778 <main+0x1de>
				{
					// Switch to IDLE mode
					Menu_mode = IDLE;
    3730:	10 e0       	ldi	r17, 0x00	; 0
    3732:	20 c0       	rjmp	.+64     	; 0x3774 <main+0x1da>
				
				break;

			// In MENU mode, 
			case MENU:
				LVA = 0;	// Make sure buzzer is off :)
    3734:	29 98       	cbi	0x05, 1	; 5
				// Disarm the FC
				General_error |= (1 << DISARMED);
    3736:	80 91 1e 05 	lds	r24, 0x051E
    373a:	84 60       	ori	r24, 0x04	; 4
    373c:	80 93 1e 05 	sts	0x051E, r24
				LED1 = 0;
    3740:	2b 98       	cbi	0x05, 3	; 5
				// Start the menu system
				menu_main();
    3742:	0e 94 33 34 	call	0x6866	; 0x6866 <menu_main>
				// Switch back to status screen when leaving menu
				Menu_mode = STATUS;
				// Reset timeout once back in status screen
				Status_seconds = 0;
				// Reset IMU on return from menu
				reset_IMU();
    3746:	0e 94 be 29 	call	0x537c	; 0x537c <reset_IMU>
				General_error |= (1 << DISARMED);
				LED1 = 0;
				// Start the menu system
				menu_main();
				// Switch back to status screen when leaving menu
				Menu_mode = STATUS;
    374a:	14 e0       	ldi	r17, 0x04	; 4
				// Reset timeout once back in status screen
				Status_seconds = 0;
    374c:	18 8e       	std	Y+24, r1	; 0x18
    374e:	14 c0       	rjmp	.+40     	; 0x3778 <main+0x1de>
			case PRESTATUS:
				// If interrupted, or if currently "No signal"
				if (Interrupted || Interrupted_Clone || Overdue)
				{
					// Ready to move on
					Menu_mode = STATUS;
    3750:	14 e0       	ldi	r17, 0x04	; 4
							
					// Prevent PWM output
					PWMOverride = true;		
					
					// Clear Interrupted_Clone
					Interrupted_Clone = false;
    3752:	1a 82       	std	Y+2, r1	; 0x02
				{
					// Ready to move on
					Menu_mode = STATUS;
							
					// Prevent PWM output
					PWMOverride = true;		
    3754:	41 e0       	ldi	r20, 0x01	; 1
    3756:	49 83       	std	Y+1, r20	; 0x01
    3758:	11 c0       	rjmp	.+34     	; 0x377c <main+0x1e2>
			case PRESTATUS:
				// If interrupted, or if currently "No signal"
				if (Interrupted || Interrupted_Clone || Overdue)
				{
					// Ready to move on
					Menu_mode = STATUS;
    375a:	14 e0       	ldi	r17, 0x04	; 4
							
					// Prevent PWM output
					PWMOverride = true;		
					
					// Clear Interrupted_Clone
					Interrupted_Clone = false;
    375c:	1a 82       	std	Y+2, r1	; 0x02
				{
					// Ready to move on
					Menu_mode = STATUS;
							
					// Prevent PWM output
					PWMOverride = true;		
    375e:	21 e0       	ldi	r18, 0x01	; 1
    3760:	29 83       	std	Y+1, r18	; 0x01
    3762:	0c c0       	rjmp	.+24     	; 0x377c <main+0x1e2>
			// but button is back up
			case WAITING_TIMEOUT:
				// In status screen, change back to idle after timing out
				if (Status_seconds >= 10)
				{
					Menu_mode = PRESTATUS_TIMEOUT;
    3764:	17 e0       	ldi	r17, 0x07	; 7
    3766:	06 c0       	rjmp	.+12     	; 0x3774 <main+0x1da>
				}

				// Jump to menu if button pressed
				else if(BUTTON1 == 0)
				{
					Menu_mode = MENU;
    3768:	1a e0       	ldi	r17, 0x0A	; 10
    376a:	f4 cf       	rjmp	.-24     	; 0x3754 <main+0x1ba>
			case PRESTATUS_TIMEOUT:
				// If interrupted, or if currently "No signal"
				if (Interrupted || Interrupted_Clone || Overdue)
				{
					// Switch to STATUS_TIMEOUT mode
					Menu_mode = STATUS_TIMEOUT;
    376c:	18 e0       	ldi	r17, 0x08	; 8
    376e:	01 c0       	rjmp	.+2      	; 0x3772 <main+0x1d8>
			case POSTSTATUS_TIMEOUT:
				// If interrupted, or if currently "No signal"
				if (Interrupted || Interrupted_Clone || Overdue)
				{
					// Switch to IDLE mode
					Menu_mode = IDLE;
    3770:	10 e0       	ldi	r17, 0x00	; 0
					
					// Prevent PWM output
					PWMOverride = false;
					
					// Clear Interrupted_Clone
					Interrupted_Clone = false;
    3772:	1a 82       	std	Y+2, r1	; 0x02
				{
					// Switch to IDLE mode
					Menu_mode = IDLE;
					
					// Prevent PWM output
					PWMOverride = false;
    3774:	19 82       	std	Y+1, r1	; 0x01
    3776:	02 c0       	rjmp	.+4      	; 0x377c <main+0x1e2>
					Interrupted_Clone = false;
				}
				else
				{
					// Enable PWM output
					PWMOverride = true;			
    3778:	31 e0       	ldi	r19, 0x01	; 1
    377a:	39 83       	std	Y+1, r19	; 0x01
		//************************************************************
		//* Alarms
		//************************************************************

		// If RC signal is overdue, signal RX error message and disarm
		if (Overdue)
    377c:	80 91 17 05 	lds	r24, 0x0517
    3780:	88 23       	and	r24, r24
    3782:	a1 f0       	breq	.+40     	; 0x37ac <main+0x212>
		{
			General_error |= (1 << NO_SIGNAL);		// Set NO_SIGNAL bit
    3784:	80 91 1e 05 	lds	r24, 0x051E
    3788:	82 60       	ori	r24, 0x02	; 2
    378a:	80 93 1e 05 	sts	0x051E, r24
			
			// If FC is set to "armable" and is currently armed, disarm the FC
			if ((Config.ArmMode == ARMABLE) && ((General_error & (1 << DISARMED)) == 0))
    378e:	80 91 33 06 	lds	r24, 0x0633
    3792:	81 30       	cpi	r24, 0x01	; 1
    3794:	81 f4       	brne	.+32     	; 0x37b6 <main+0x21c>
    3796:	80 91 1e 05 	lds	r24, 0x051E
    379a:	82 fd       	sbrc	r24, 2
    379c:	0c c0       	rjmp	.+24     	; 0x37b6 <main+0x21c>
			{
				General_error |= (1 << DISARMED);	// Set flags to disarmed
    379e:	80 91 1e 05 	lds	r24, 0x051E
    37a2:	84 60       	ori	r24, 0x04	; 4
    37a4:	80 93 1e 05 	sts	0x051E, r24
				LED1 = 0;							// Signal that FC is now disarmed
    37a8:	2b 98       	cbi	0x05, 3	; 5
    37aa:	05 c0       	rjmp	.+10     	; 0x37b6 <main+0x21c>
			}
		}
		// RC signal received normally
		else
		{
			General_error &= ~(1 << NO_SIGNAL);		// Clear NO_SIGNAL bit
    37ac:	80 91 1e 05 	lds	r24, 0x051E
    37b0:	8d 7f       	andi	r24, 0xFD	; 253
    37b2:	80 93 1e 05 	sts	0x051E, r24
		}

		// Beep buzzer if Vbat lower than trigger		
		if (GetVbat() < Config.PowerTriggerActual)
    37b6:	0e 94 11 47 	call	0x8e22	; 0x8e22 <GetVbat>
    37ba:	20 91 2f 06 	lds	r18, 0x062F
    37be:	30 91 30 06 	lds	r19, 0x0630
    37c2:	82 17       	cp	r24, r18
    37c4:	93 07       	cpc	r25, r19
    37c6:	20 f4       	brcc	.+8      	; 0x37d0 <main+0x236>
		{
			General_error |= (1 << LVA_ALARM);	// Set LVA_Alarm flag
    37c8:	80 91 1e 05 	lds	r24, 0x051E
    37cc:	88 60       	ori	r24, 0x08	; 8
    37ce:	03 c0       	rjmp	.+6      	; 0x37d6 <main+0x23c>
		}
		else 
		{
			General_error &= ~(1 << LVA_ALARM);	// Clear LVA_Alarm flag
    37d0:	80 91 1e 05 	lds	r24, 0x051E
    37d4:	87 7f       	andi	r24, 0xF7	; 247
    37d6:	80 93 1e 05 	sts	0x051E, r24
		}

		// Turn on buzzer if in alarm state (BUZZER_ON is oscillating)
		if	(
			 (
				(General_error & (1 << LVA_ALARM)) ||		// Low battery
    37da:	80 91 1e 05 	lds	r24, 0x051E
		{
			General_error &= ~(1 << LVA_ALARM);	// Clear LVA_Alarm flag
		}

		// Turn on buzzer if in alarm state (BUZZER_ON is oscillating)
		if	(
    37de:	83 fd       	sbrc	r24, 3
    37e0:	08 c0       	rjmp	.+16     	; 0x37f2 <main+0x258>
			 (
				(General_error & (1 << LVA_ALARM)) ||		// Low battery
				(General_error & (1 << NO_SIGNAL)) ||		// No signal
    37e2:	80 91 1e 05 	lds	r24, 0x051E
		}

		// Turn on buzzer if in alarm state (BUZZER_ON is oscillating)
		if	(
			 (
				(General_error & (1 << LVA_ALARM)) ||		// Low battery
    37e6:	81 fd       	sbrc	r24, 1
    37e8:	04 c0       	rjmp	.+8      	; 0x37f2 <main+0x258>
				(General_error & (1 << NO_SIGNAL)) ||		// No signal
				(General_error & (1 << THROTTLE_HIGH))		// Throttle high
    37ea:	80 91 1e 05 	lds	r24, 0x051E

		// Turn on buzzer if in alarm state (BUZZER_ON is oscillating)
		if	(
			 (
				(General_error & (1 << LVA_ALARM)) ||		// Low battery
				(General_error & (1 << NO_SIGNAL)) ||		// No signal
    37ee:	80 ff       	sbrs	r24, 0
    37f0:	06 c0       	rjmp	.+12     	; 0x37fe <main+0x264>
				(General_error & (1 << THROTTLE_HIGH))		// Throttle high
			 ) && 
			  (Alarm_flags & (1 << BUZZER_ON))
    37f2:	80 91 1c 05 	lds	r24, 0x051C
		if	(
			 (
				(General_error & (1 << LVA_ALARM)) ||		// Low battery
				(General_error & (1 << NO_SIGNAL)) ||		// No signal
				(General_error & (1 << THROTTLE_HIGH))		// Throttle high
			 ) && 
    37f6:	84 ff       	sbrs	r24, 4
    37f8:	02 c0       	rjmp	.+4      	; 0x37fe <main+0x264>
			  (Alarm_flags & (1 << BUZZER_ON))
			) 
		{
			LVA = 1;
    37fa:	29 9a       	sbi	0x05, 1	; 5
    37fc:	01 c0       	rjmp	.+2      	; 0x3800 <main+0x266>
		}
		else 
		{
			LVA = 0;
    37fe:	29 98       	cbi	0x05, 1	; 5

		//************************************************************
		//* Arm/disarm handling
		//************************************************************

		if (Config.ArmMode == ARMABLE)
    3800:	80 91 33 06 	lds	r24, 0x0633
    3804:	81 30       	cpi	r24, 0x01	; 1
    3806:	09 f0       	breq	.+2      	; 0x380a <main+0x270>
    3808:	8d c0       	rjmp	.+282    	; 0x3924 <main+0x38a>
		{
			// Manual arm/disarm
			// If sticks not at extremes, reset manual arm/disarm timer
			// Sticks down and centered = armed. Down and outside = disarmed
			if (
				((-ARM_TIMER_RESET_1 < RCinputs[AILERON]) && (RCinputs[AILERON] < ARM_TIMER_RESET_1)) ||
    380a:	80 91 25 08 	lds	r24, 0x0825
    380e:	90 91 26 08 	lds	r25, 0x0826
		if (Config.ArmMode == ARMABLE)
		{
			// Manual arm/disarm
			// If sticks not at extremes, reset manual arm/disarm timer
			// Sticks down and centered = armed. Down and outside = disarmed
			if (
    3812:	81 34       	cpi	r24, 0x41	; 65
    3814:	9c 4f       	sbci	r25, 0xFC	; 252
    3816:	44 f0       	brlt	.+16     	; 0x3828 <main+0x28e>
				((-ARM_TIMER_RESET_1 < RCinputs[AILERON]) && (RCinputs[AILERON] < ARM_TIMER_RESET_1)) ||
    3818:	80 91 25 08 	lds	r24, 0x0825
    381c:	90 91 26 08 	lds	r25, 0x0826
    3820:	80 3c       	cpi	r24, 0xC0	; 192
    3822:	93 40       	sbci	r25, 0x03	; 3
    3824:	0c f4       	brge	.+2      	; 0x3828 <main+0x28e>
    3826:	4f c0       	rjmp	.+158    	; 0x38c6 <main+0x32c>
				((-ARM_TIMER_RESET_1 < RCinputs[ELEVATOR]) && (RCinputs[ELEVATOR] < ARM_TIMER_RESET_1)) ||
    3828:	80 91 27 08 	lds	r24, 0x0827
    382c:	90 91 28 08 	lds	r25, 0x0828
		{
			// Manual arm/disarm
			// If sticks not at extremes, reset manual arm/disarm timer
			// Sticks down and centered = armed. Down and outside = disarmed
			if (
				((-ARM_TIMER_RESET_1 < RCinputs[AILERON]) && (RCinputs[AILERON] < ARM_TIMER_RESET_1)) ||
    3830:	81 34       	cpi	r24, 0x41	; 65
    3832:	9c 4f       	sbci	r25, 0xFC	; 252
    3834:	44 f0       	brlt	.+16     	; 0x3846 <main+0x2ac>
				((-ARM_TIMER_RESET_1 < RCinputs[ELEVATOR]) && (RCinputs[ELEVATOR] < ARM_TIMER_RESET_1)) ||
    3836:	80 91 27 08 	lds	r24, 0x0827
    383a:	90 91 28 08 	lds	r25, 0x0828
    383e:	80 3c       	cpi	r24, 0xC0	; 192
    3840:	93 40       	sbci	r25, 0x03	; 3
    3842:	0c f4       	brge	.+2      	; 0x3846 <main+0x2ac>
    3844:	40 c0       	rjmp	.+128    	; 0x38c6 <main+0x32c>
				((-ARM_TIMER_RESET_1 < RCinputs[RUDDER]) && (RCinputs[RUDDER] < ARM_TIMER_RESET_1)) ||
    3846:	80 91 29 08 	lds	r24, 0x0829
    384a:	90 91 2a 08 	lds	r25, 0x082A
			// Manual arm/disarm
			// If sticks not at extremes, reset manual arm/disarm timer
			// Sticks down and centered = armed. Down and outside = disarmed
			if (
				((-ARM_TIMER_RESET_1 < RCinputs[AILERON]) && (RCinputs[AILERON] < ARM_TIMER_RESET_1)) ||
				((-ARM_TIMER_RESET_1 < RCinputs[ELEVATOR]) && (RCinputs[ELEVATOR] < ARM_TIMER_RESET_1)) ||
    384e:	81 34       	cpi	r24, 0x41	; 65
    3850:	9c 4f       	sbci	r25, 0xFC	; 252
    3852:	3c f0       	brlt	.+14     	; 0x3862 <main+0x2c8>
				((-ARM_TIMER_RESET_1 < RCinputs[RUDDER]) && (RCinputs[RUDDER] < ARM_TIMER_RESET_1)) ||
    3854:	80 91 29 08 	lds	r24, 0x0829
    3858:	90 91 2a 08 	lds	r25, 0x082A
    385c:	80 3c       	cpi	r24, 0xC0	; 192
    385e:	93 40       	sbci	r25, 0x03	; 3
    3860:	94 f1       	brlt	.+100    	; 0x38c6 <main+0x32c>
				(ARM_TIMER_RESET_2 < MonopolarThrottle)
    3862:	80 91 21 08 	lds	r24, 0x0821
    3866:	90 91 22 08 	lds	r25, 0x0822
			// If sticks not at extremes, reset manual arm/disarm timer
			// Sticks down and centered = armed. Down and outside = disarmed
			if (
				((-ARM_TIMER_RESET_1 < RCinputs[AILERON]) && (RCinputs[AILERON] < ARM_TIMER_RESET_1)) ||
				((-ARM_TIMER_RESET_1 < RCinputs[ELEVATOR]) && (RCinputs[ELEVATOR] < ARM_TIMER_RESET_1)) ||
				((-ARM_TIMER_RESET_1 < RCinputs[RUDDER]) && (RCinputs[RUDDER] < ARM_TIMER_RESET_1)) ||
    386a:	c3 97       	sbiw	r24, 0x33	; 51
    386c:	64 f5       	brge	.+88     	; 0x38c6 <main+0x32c>
				Arm_timer = 0;
			}

			// If arm timer times out, the sticks must have been at extremes for ARM_TIMER seconds
			// If aileron is at min, arm the FC
			if ((Arm_timer > ARM_TIMER) && (RCinputs[AILERON] < -ARM_TIMER_RESET_1))
    386e:	2c e4       	ldi	r18, 0x4C	; 76
    3870:	82 16       	cp	r8, r18
    3872:	92 06       	cpc	r9, r18
    3874:	a1 04       	cpc	r10, r1
    3876:	b1 04       	cpc	r11, r1
    3878:	48 f1       	brcs	.+82     	; 0x38cc <main+0x332>
    387a:	80 91 25 08 	lds	r24, 0x0825
    387e:	90 91 26 08 	lds	r25, 0x0826
    3882:	80 34       	cpi	r24, 0x40	; 64
    3884:	9c 4f       	sbci	r25, 0xFC	; 252
    3886:	5c f4       	brge	.+22     	; 0x389e <main+0x304>
			{
				Arm_timer = 0;
				General_error &= ~(1 << DISARMED);		// Set flags to armed (negate disarmed)
    3888:	80 91 1e 05 	lds	r24, 0x051E
    388c:	8b 7f       	andi	r24, 0xFB	; 251
    388e:	80 93 1e 05 	sts	0x051E, r24
				CalibrateGyrosSlow();					// Calibrate gyros
    3892:	0e 94 72 24 	call	0x48e4	; 0x48e4 <CalibrateGyrosSlow>
				LED1 = 1;								// Signal that FC is ready
    3896:	2b 9a       	sbi	0x05, 3	; 5
				reset_IMU();							// Reset IMU just in case...
    3898:	0e 94 be 29 	call	0x537c	; 0x537c <reset_IMU>
    389c:	14 c0       	rjmp	.+40     	; 0x38c6 <main+0x32c>
			}
			// Else, disarm the FC after DISARM_TIMER seconds if aileron at max
			else if ((Arm_timer > DISARM_TIMER) && (RCinputs[AILERON] > ARM_TIMER_RESET_1))
    389e:	42 ee       	ldi	r20, 0xE2	; 226
    38a0:	84 16       	cp	r8, r20
    38a2:	44 ee       	ldi	r20, 0xE4	; 228
    38a4:	94 06       	cpc	r9, r20
    38a6:	a1 04       	cpc	r10, r1
    38a8:	b1 04       	cpc	r11, r1
    38aa:	80 f0       	brcs	.+32     	; 0x38cc <main+0x332>
    38ac:	80 91 25 08 	lds	r24, 0x0825
    38b0:	90 91 26 08 	lds	r25, 0x0826
    38b4:	81 3c       	cpi	r24, 0xC1	; 193
    38b6:	93 40       	sbci	r25, 0x03	; 3
    38b8:	4c f0       	brlt	.+18     	; 0x38cc <main+0x332>
			{
				Arm_timer = 0;
				General_error |= (1 << DISARMED);		// Set flags to disarmed
    38ba:	80 91 1e 05 	lds	r24, 0x051E
    38be:	84 60       	ori	r24, 0x04	; 4
    38c0:	80 93 1e 05 	sts	0x051E, r24
				LED1 = 0;								// Signal that FC is now disarmed
    38c4:	2b 98       	cbi	0x05, 3	; 5
    38c6:	81 2c       	mov	r8, r1
    38c8:	91 2c       	mov	r9, r1
    38ca:	54 01       	movw	r10, r8
			}

			// Automatic disarm
			// Reset auto-disarm count if any RX activity or set to zero, or when currently disarmed
			if ((Flight_flags & (1 << RxActivity)) || (Config.Disarm_timer == 0) || (General_error & (1 << DISARMED)))
    38cc:	80 91 1d 05 	lds	r24, 0x051D
    38d0:	80 fd       	sbrc	r24, 0
    38d2:	10 c0       	rjmp	.+32     	; 0x38f4 <main+0x35a>
    38d4:	80 91 34 06 	lds	r24, 0x0634
    38d8:	88 23       	and	r24, r24
    38da:	61 f0       	breq	.+24     	; 0x38f4 <main+0x35a>
    38dc:	80 91 1e 05 	lds	r24, 0x051E
    38e0:	82 fd       	sbrc	r24, 2
    38e2:	08 c0       	rjmp	.+16     	; 0x38f4 <main+0x35a>
				Disarm_timer = 0;
				Disarm_seconds = 0;
			}
		
			// Increment disarm timer (seconds) if armed
			if (Disarm_timer > SECOND_TIMER)
    38e4:	8c e4       	ldi	r24, 0x4C	; 76
    38e6:	28 16       	cp	r2, r24
    38e8:	38 06       	cpc	r3, r24
    38ea:	38 f0       	brcs	.+14     	; 0x38fa <main+0x360>
			{
				Disarm_seconds++;
    38ec:	2c 85       	ldd	r18, Y+12	; 0x0c
    38ee:	2f 5f       	subi	r18, 0xFF	; 255
    38f0:	2c 87       	std	Y+12, r18	; 0x0c
    38f2:	01 c0       	rjmp	.+2      	; 0x38f6 <main+0x35c>
    38f4:	1c 86       	std	Y+12, r1	; 0x0c
    38f6:	21 2c       	mov	r2, r1
    38f8:	31 2c       	mov	r3, r1
				Disarm_timer = 0;
			}

			// Auto-disarm model if timeout enabled and due
			// Don't allow disarms less than 30 seconds. That's just silly...
			if ((Disarm_seconds >= Config.Disarm_timer) && (Config.Disarm_timer >= 30))	
    38fa:	40 91 34 06 	lds	r20, 0x0634
    38fe:	5c 85       	ldd	r21, Y+12	; 0x0c
    3900:	25 2f       	mov	r18, r21
    3902:	30 e0       	ldi	r19, 0x00	; 0
    3904:	84 2f       	mov	r24, r20
    3906:	99 27       	eor	r25, r25
    3908:	87 fd       	sbrc	r24, 7
    390a:	90 95       	com	r25
    390c:	28 17       	cp	r18, r24
    390e:	39 07       	cpc	r19, r25
    3910:	7c f0       	brlt	.+30     	; 0x3930 <main+0x396>
    3912:	4e 31       	cpi	r20, 0x1E	; 30
    3914:	6c f0       	brlt	.+26     	; 0x3930 <main+0x396>
			{
				// Disarm the FC
				General_error |= (1 << DISARMED);		// Set flags to disarmed
    3916:	80 91 1e 05 	lds	r24, 0x051E
    391a:	84 60       	ori	r24, 0x04	; 4
    391c:	80 93 1e 05 	sts	0x051E, r24
				LED1 = 0;								// Signal that FC is now disarmed
    3920:	2b 98       	cbi	0x05, 3	; 5
    3922:	06 c0       	rjmp	.+12     	; 0x3930 <main+0x396>
			}
		}
		// Arm when ArmMode is OFF
		else 
		{
			General_error &= ~(1 << DISARMED);			// Set flags to armed
    3924:	80 91 1e 05 	lds	r24, 0x051E
    3928:	8b 7f       	andi	r24, 0xFB	; 251
    392a:	80 93 1e 05 	sts	0x051E, r24
			LED1 = 1;
    392e:	2b 9a       	sbi	0x05, 3	; 5
		//************************************************************
		//* Get RC data
		//************************************************************

		// Update zeroed RC channel data
		RxGetChannels();
    3930:	0e 94 47 44 	call	0x888e	; 0x888e <RxGetChannels>

		// Check for throttle reset
		if (MonopolarThrottle < THROTTLEIDLE)
    3934:	80 91 21 08 	lds	r24, 0x0821
    3938:	90 91 22 08 	lds	r25, 0x0822
    393c:	c2 97       	sbiw	r24, 0x32	; 50
    393e:	5c f4       	brge	.+22     	; 0x3956 <main+0x3bc>
		{
			// Clear throttle high error
			General_error &= ~(1 << THROTTLE_HIGH);	
    3940:	80 91 1e 05 	lds	r24, 0x051E
    3944:	8e 7f       	andi	r24, 0xFE	; 254
    3946:	80 93 1e 05 	sts	0x051E, r24

			// Reset I-terms at throttle cut. Using memset saves code space
			memset(&IntegralGyro[P1][ROLL], 0, sizeof(int32_t) * 6); 
    394a:	88 e1       	ldi	r24, 0x18	; 24
    394c:	a5 ee       	ldi	r26, 0xE5	; 229
    394e:	b7 e0       	ldi	r27, 0x07	; 7
    3950:	1d 92       	st	X+, r1
    3952:	8a 95       	dec	r24
    3954:	e9 f7       	brne	.-6      	; 0x3950 <main+0x3b6>
		//* by the Config.TransitionSpeed setting.
		//* The transition will hold at P1n position if directed to.
		//************************************************************

		// P2 transition point hard-coded to 50% above center
		if 	(RCinputs[Config.FlightChan] > 500)
    3956:	80 91 d6 05 	lds	r24, 0x05D6
    395a:	88 0f       	add	r24, r24
    395c:	99 0b       	sbc	r25, r25
    395e:	fc 01       	movw	r30, r24
    3960:	ed 5d       	subi	r30, 0xDD	; 221
    3962:	f7 4f       	sbci	r31, 0xF7	; 247
    3964:	20 81       	ld	r18, Z
    3966:	31 81       	ldd	r19, Z+1	; 0x01
    3968:	25 3f       	cpi	r18, 0xF5	; 245
    396a:	31 40       	sbci	r19, 0x01	; 1
    396c:	14 f0       	brlt	.+4      	; 0x3972 <main+0x3d8>
		{
			Config.FlightSel = 2;			// Flight mode 2 (P2)
    396e:	22 e0       	ldi	r18, 0x02	; 2
    3970:	06 c0       	rjmp	.+12     	; 0x397e <main+0x3e4>
		}
		// P1.n transition point hard-coded to 50% below center
		else if (RCinputs[Config.FlightChan] > -500)
    3972:	20 81       	ld	r18, Z
    3974:	31 81       	ldd	r19, Z+1	; 0x01
    3976:	2d 30       	cpi	r18, 0x0D	; 13
    3978:	3e 4f       	sbci	r19, 0xFE	; 254
    397a:	24 f0       	brlt	.+8      	; 0x3984 <main+0x3ea>
		{
			Config.FlightSel = 1;			// Flight mode 1 (P1.n)
    397c:	21 e0       	ldi	r18, 0x01	; 1
    397e:	20 93 a7 07 	sts	0x07A7, r18
    3982:	02 c0       	rjmp	.+4      	; 0x3988 <main+0x3ee>
		}
		// Otherwise the default is P1
		else
		{
			Config.FlightSel = 0;			// Flight mode 0 (P1)
    3984:	10 92 a7 07 	sts	0x07A7, r1
		//* Set up the correct state for the current setting.
		//* Check for initial startup - the only time that old_flight should be "3".
		//* Also, re-initialise if the transition setting is changed
		//************************************************************

		if ((old_flight == 3) || (old_trans_mode != Config.TransitionSpeed))
    3988:	f3 e0       	ldi	r31, 0x03	; 3
    398a:	7f 16       	cp	r7, r31
    398c:	29 f0       	breq	.+10     	; 0x3998 <main+0x3fe>
    398e:	20 91 d7 05 	lds	r18, 0x05D7
    3992:	3f a1       	ldd	r19, Y+39	; 0x27
    3994:	32 17       	cp	r19, r18
    3996:	51 f1       	breq	.+84     	; 0x39ec <main+0x452>
		{
			switch(Config.FlightSel)
    3998:	70 90 a7 07 	lds	r7, 0x07A7
    399c:	41 e0       	ldi	r20, 0x01	; 1
    399e:	74 16       	cp	r7, r20
    39a0:	61 f0       	breq	.+24     	; 0x39ba <main+0x420>
    39a2:	52 e0       	ldi	r21, 0x02	; 2
    39a4:	75 16       	cp	r7, r21
    39a6:	b1 f0       	breq	.+44     	; 0x39d4 <main+0x43a>
    39a8:	71 10       	cpse	r7, r1
    39aa:	1d c0       	rjmp	.+58     	; 0x39e6 <main+0x44c>
			{
				case 0:
					Transition_state = TRANS_P1;
    39ac:	10 92 21 05 	sts	0x0521, r1
					transition_counter = 0;
    39b0:	10 92 23 05 	sts	0x0523, r1
    39b4:	10 92 22 05 	sts	0x0522, r1
					break;
    39b8:	16 c0       	rjmp	.+44     	; 0x39e6 <main+0x44c>
				case 1:
					Transition_state = TRANS_P1n;
    39ba:	24 e0       	ldi	r18, 0x04	; 4
    39bc:	20 93 21 05 	sts	0x0521, r18
					transition_counter = Config.Transition_P1n; // Set transition point to the user-selected point
    39c0:	20 91 d8 05 	lds	r18, 0x05D8
    39c4:	33 27       	eor	r19, r19
    39c6:	27 fd       	sbrc	r18, 7
    39c8:	30 95       	com	r19
    39ca:	30 93 23 05 	sts	0x0523, r19
    39ce:	20 93 22 05 	sts	0x0522, r18
					break;
    39d2:	09 c0       	rjmp	.+18     	; 0x39e6 <main+0x44c>
				case 2:
					Transition_state = TRANS_P2;
    39d4:	29 e0       	ldi	r18, 0x09	; 9
    39d6:	20 93 21 05 	sts	0x0521, r18
					transition_counter = 100;
    39da:	a4 e6       	ldi	r26, 0x64	; 100
    39dc:	b0 e0       	ldi	r27, 0x00	; 0
    39de:	b0 93 23 05 	sts	0x0523, r27
    39e2:	a0 93 22 05 	sts	0x0522, r26
					break;
				default:
					break;
			}		 
			old_flight = Config.FlightSel;
			old_trans_mode = Config.TransitionSpeed;
    39e6:	20 91 d7 05 	lds	r18, 0x05D7
    39ea:	2f a3       	std	Y+39, r18	; 0x27
		//************************************************************
		//* Transition state handling
		//************************************************************

		// Update timed transition when changing flight modes
		if (Config.FlightSel != old_flight)
    39ec:	00 91 a7 07 	lds	r16, 0x07A7
    39f0:	31 e0       	ldi	r19, 0x01	; 1
    39f2:	07 11       	cpse	r16, r7
    39f4:	01 c0       	rjmp	.+2      	; 0x39f8 <main+0x45e>
    39f6:	30 e0       	ldi	r19, 0x00	; 0
			TransitionUpdated = true;
		}

		// Work out transition number when manually transitioning
		// Convert number to percentage (0 to 100%)
		if (Config.TransitionSpeed == 0)
    39f8:	20 91 d7 05 	lds	r18, 0x05D7
    39fc:	21 11       	cpse	r18, r1
    39fe:	1b c0       	rjmp	.+54     	; 0x3a36 <main+0x49c>
		{
			// Offset RC input to (approx) -250 to 2250
			temp1 = RCinputs[Config.FlightChan] + 1000;
    3a00:	fc 01       	movw	r30, r24
    3a02:	ed 5d       	subi	r30, 0xDD	; 221
    3a04:	f7 4f       	sbci	r31, 0xF7	; 247
    3a06:	80 81       	ld	r24, Z
    3a08:	91 81       	ldd	r25, Z+1	; 0x01
    3a0a:	88 51       	subi	r24, 0x18	; 24
    3a0c:	9c 4f       	sbci	r25, 0xFC	; 252
    3a0e:	97 ff       	sbrs	r25, 7
    3a10:	02 c0       	rjmp	.+4      	; 0x3a16 <main+0x47c>
    3a12:	80 e0       	ldi	r24, 0x00	; 0
    3a14:	90 e0       	ldi	r25, 0x00	; 0
			// Trim lower end to zero (0 to 2250)
			if (temp1 < 0) temp1 = 0;

			// Convert 0 to 2250 to 0 to 125. Divide by 20
			// Round to avoid truncation errors
			transition = (temp1 + 10) / 20;
    3a16:	0a 96       	adiw	r24, 0x0a	; 10
    3a18:	64 e1       	ldi	r22, 0x14	; 20
    3a1a:	70 e0       	ldi	r23, 0x00	; 0
    3a1c:	0e 94 5f 49 	call	0x92be	; 0x92be <__divmodhi4>

			// transition now has a range of 0 to 101 for 0 to 2000 input
			// Limit extent of transition value 0 to 100 (101 steps)
			if (transition > 100) transition = 100;
    3a20:	65 36       	cpi	r22, 0x65	; 101
    3a22:	71 05       	cpc	r23, r1
    3a24:	0c f4       	brge	.+2      	; 0x3a28 <main+0x48e>
    3a26:	b3 c3       	rjmp	.+1894   	; 0x418e <main+0xbf4>
    3a28:	44 e6       	ldi	r20, 0x64	; 100
    3a2a:	50 e0       	ldi	r21, 0x00	; 0
    3a2c:	50 93 20 05 	sts	0x0520, r21
    3a30:	40 93 1f 05 	sts	0x051F, r20
    3a34:	b0 c3       	rjmp	.+1888   	; 0x4196 <main+0xbfc>
		}
		else
		{
			// transition_counter counts from 0 to 100 (101 steps)
			transition = transition_counter;
    3a36:	80 91 22 05 	lds	r24, 0x0522
    3a3a:	90 91 23 05 	lds	r25, 0x0523
    3a3e:	90 93 20 05 	sts	0x0520, r25
    3a42:	80 93 1f 05 	sts	0x051F, r24
		{
			Transition_state = TRANSITIONING;
		}

		// Update transition state change when control value or flight mode changes
		if (TransitionUpdated)
    3a46:	33 23       	and	r19, r19
    3a48:	91 f0       	breq	.+36     	; 0x3a6e <main+0x4d4>
		{
			// Update transition state from matrix
			Transition_state = (uint8_t)pgm_read_byte(&Trans_Matrix[Config.FlightSel][old_flight]);
    3a4a:	80 2f       	mov	r24, r16
    3a4c:	99 27       	eor	r25, r25
    3a4e:	87 fd       	sbrc	r24, 7
    3a50:	90 95       	com	r25
    3a52:	fc 01       	movw	r30, r24
    3a54:	ee 0f       	add	r30, r30
    3a56:	ff 1f       	adc	r31, r31
    3a58:	e8 0f       	add	r30, r24
    3a5a:	f9 1f       	adc	r31, r25
    3a5c:	e7 0d       	add	r30, r7
    3a5e:	f1 1d       	adc	r31, r1
    3a60:	77 fc       	sbrc	r7, 7
    3a62:	fa 95       	dec	r31
    3a64:	e2 50       	subi	r30, 0x02	; 2
    3a66:	ff 4f       	sbci	r31, 0xFF	; 255
    3a68:	e4 91       	lpm	r30, Z
    3a6a:	e0 93 21 05 	sts	0x0521, r30

		// Calculate transition time from user's setting
		transition_time = TRANSITION_TIMER * Config.TransitionSpeed;
		
		// Update state, values and transition_counter every Config.TransitionSpeed if not zero.
		if (((Config.TransitionSpeed != 0) && (Transition_timeout > transition_time)) ||
    3a6e:	22 23       	and	r18, r18
    3a70:	49 f0       	breq	.+18     	; 0x3a84 <main+0x4ea>
			// Update transition state from matrix
			Transition_state = (uint8_t)pgm_read_byte(&Trans_Matrix[Config.FlightSel][old_flight]);
		}

		// Calculate transition time from user's setting
		transition_time = TRANSITION_TIMER * Config.TransitionSpeed;
    3a72:	53 ec       	ldi	r21, 0xC3	; 195
    3a74:	25 03       	mulsu	r18, r21
    3a76:	c0 01       	movw	r24, r0
    3a78:	11 24       	eor	r1, r1
		
		// Update state, values and transition_counter every Config.TransitionSpeed if not zero.
		if (((Config.TransitionSpeed != 0) && (Transition_timeout > transition_time)) ||
    3a7a:	4a 89       	ldd	r20, Y+18	; 0x12
    3a7c:	5b 89       	ldd	r21, Y+19	; 0x13
    3a7e:	84 17       	cp	r24, r20
    3a80:	95 07       	cpc	r25, r21
    3a82:	18 f0       	brcs	.+6      	; 0x3a8a <main+0x4f0>
    3a84:	33 23       	and	r19, r19
    3a86:	09 f4       	brne	.+2      	; 0x3a8a <main+0x4f0>
    3a88:	a9 c0       	rjmp	.+338    	; 0x3bdc <main+0x642>
		{
			Transition_timeout = 0;
			TransitionUpdated = false;

			// Fixed, end-point states
			if (Transition_state == TRANS_P1)
    3a8a:	80 91 21 05 	lds	r24, 0x0521
    3a8e:	81 11       	cpse	r24, r1
    3a90:	05 c0       	rjmp	.+10     	; 0x3a9c <main+0x502>
			{
				transition_counter = 0;
    3a92:	10 92 23 05 	sts	0x0523, r1
    3a96:	10 92 22 05 	sts	0x0522, r1
    3a9a:	22 c0       	rjmp	.+68     	; 0x3ae0 <main+0x546>
			}
			else if (Transition_state == TRANS_P1n)
    3a9c:	84 30       	cpi	r24, 0x04	; 4
    3a9e:	31 f4       	brne	.+12     	; 0x3aac <main+0x512>
			{
				transition_counter = Config.Transition_P1n;
    3aa0:	80 91 d8 05 	lds	r24, 0x05D8
    3aa4:	99 27       	eor	r25, r25
    3aa6:	87 fd       	sbrc	r24, 7
    3aa8:	90 95       	com	r25
    3aaa:	04 c0       	rjmp	.+8      	; 0x3ab4 <main+0x51a>
			}
			else if (Transition_state == TRANS_P2)
    3aac:	89 30       	cpi	r24, 0x09	; 9
    3aae:	39 f4       	brne	.+14     	; 0x3abe <main+0x524>
			{
				transition_counter = 100;
    3ab0:	84 e6       	ldi	r24, 0x64	; 100
    3ab2:	90 e0       	ldi	r25, 0x00	; 0
    3ab4:	90 93 23 05 	sts	0x0523, r25
    3ab8:	80 93 22 05 	sts	0x0522, r24
    3abc:	11 c0       	rjmp	.+34     	; 0x3ae0 <main+0x546>
			}		

			// Over-ride users requesting silly states
			// If transition_counter is above P1.n but request is P1 to P1.n or 
			// if transition_counter is below P1.n but request is P2 to P1.n...
			if ((Transition_state == TRANS_P1_to_P1n_start) && (transition_counter > Config.Transition_P1n))
    3abe:	81 30       	cpi	r24, 0x01	; 1
    3ac0:	79 f4       	brne	.+30     	; 0x3ae0 <main+0x546>
    3ac2:	80 91 d8 05 	lds	r24, 0x05D8
    3ac6:	99 27       	eor	r25, r25
    3ac8:	87 fd       	sbrc	r24, 7
    3aca:	90 95       	com	r25
    3acc:	20 91 22 05 	lds	r18, 0x0522
    3ad0:	30 91 23 05 	lds	r19, 0x0523
    3ad4:	82 17       	cp	r24, r18
    3ad6:	93 07       	cpc	r25, r19
    3ad8:	1c f4       	brge	.+6      	; 0x3ae0 <main+0x546>
			{
				// Reset state to a more appropriate one
				Transition_state = TRANS_P2_to_P1n_start;
    3ada:	88 e0       	ldi	r24, 0x08	; 8
    3adc:	80 93 21 05 	sts	0x0521, r24
			}

			if ((Transition_state == TRANS_P2_to_P1n_start) && (transition_counter < Config.Transition_P1n))
    3ae0:	80 91 21 05 	lds	r24, 0x0521
    3ae4:	88 30       	cpi	r24, 0x08	; 8
    3ae6:	79 f4       	brne	.+30     	; 0x3b06 <main+0x56c>
    3ae8:	80 91 d8 05 	lds	r24, 0x05D8
    3aec:	99 27       	eor	r25, r25
    3aee:	87 fd       	sbrc	r24, 7
    3af0:	90 95       	com	r25
    3af2:	20 91 22 05 	lds	r18, 0x0522
    3af6:	30 91 23 05 	lds	r19, 0x0523
    3afa:	28 17       	cp	r18, r24
    3afc:	39 07       	cpc	r19, r25
    3afe:	1c f4       	brge	.+6      	; 0x3b06 <main+0x56c>
			{
				// Reset state to a more appropriate one
				Transition_state = TRANS_P1_to_P1n_start;
    3b00:	81 e0       	ldi	r24, 0x01	; 1
    3b02:	80 93 21 05 	sts	0x0521, r24
			}

			// Handle timed transition towards P1
			if ((Transition_state == TRANS_P1n_to_P1_start) || (Transition_state == TRANS_P2_to_P1_start))
    3b06:	80 91 21 05 	lds	r24, 0x0521
    3b0a:	8b 7f       	andi	r24, 0xFB	; 251
    3b0c:	82 30       	cpi	r24, 0x02	; 2
    3b0e:	91 f4       	brne	.+36     	; 0x3b34 <main+0x59a>
			{
				transition_counter--;
    3b10:	80 91 22 05 	lds	r24, 0x0522
    3b14:	90 91 23 05 	lds	r25, 0x0523
    3b18:	01 97       	sbiw	r24, 0x01	; 1
    3b1a:	90 93 23 05 	sts	0x0523, r25
    3b1e:	80 93 22 05 	sts	0x0522, r24
				if (transition_counter <= 0)
    3b22:	18 16       	cp	r1, r24
    3b24:	19 06       	cpc	r1, r25
    3b26:	34 f0       	brlt	.+12     	; 0x3b34 <main+0x59a>
				{
					transition_counter = 0;
    3b28:	10 92 23 05 	sts	0x0523, r1
    3b2c:	10 92 22 05 	sts	0x0522, r1
					Transition_state = TRANS_P1;
    3b30:	10 92 21 05 	sts	0x0521, r1
				}
			}

			// Handle timed transition between P1.n and P1
			if (Transition_state == TRANS_P1_to_P1n_start)
    3b34:	80 91 21 05 	lds	r24, 0x0521
    3b38:	81 30       	cpi	r24, 0x01	; 1
    3b3a:	c1 f4       	brne	.+48     	; 0x3b6c <main+0x5d2>
			{
				transition_counter++;
    3b3c:	80 91 22 05 	lds	r24, 0x0522
    3b40:	90 91 23 05 	lds	r25, 0x0523
    3b44:	01 96       	adiw	r24, 0x01	; 1
    3b46:	90 93 23 05 	sts	0x0523, r25
    3b4a:	80 93 22 05 	sts	0x0522, r24
				if (transition_counter >= Config.Transition_P1n)
    3b4e:	20 91 d8 05 	lds	r18, 0x05D8
    3b52:	33 27       	eor	r19, r19
    3b54:	27 fd       	sbrc	r18, 7
    3b56:	30 95       	com	r19
    3b58:	82 17       	cp	r24, r18
    3b5a:	93 07       	cpc	r25, r19
    3b5c:	3c f0       	brlt	.+14     	; 0x3b6c <main+0x5d2>
				{
					transition_counter = Config.Transition_P1n;
    3b5e:	30 93 23 05 	sts	0x0523, r19
    3b62:	20 93 22 05 	sts	0x0522, r18
					Transition_state = TRANS_P1n;
    3b66:	84 e0       	ldi	r24, 0x04	; 4
    3b68:	80 93 21 05 	sts	0x0521, r24
				}
			}			
				
			// Handle timed transition between P1.n and P2
			if (Transition_state == TRANS_P2_to_P1n_start)
    3b6c:	80 91 21 05 	lds	r24, 0x0521
    3b70:	88 30       	cpi	r24, 0x08	; 8
    3b72:	c1 f4       	brne	.+48     	; 0x3ba4 <main+0x60a>
			{
				transition_counter--;
    3b74:	80 91 22 05 	lds	r24, 0x0522
    3b78:	90 91 23 05 	lds	r25, 0x0523
    3b7c:	01 97       	sbiw	r24, 0x01	; 1
    3b7e:	90 93 23 05 	sts	0x0523, r25
    3b82:	80 93 22 05 	sts	0x0522, r24
				if (transition_counter <= Config.Transition_P1n)
    3b86:	20 91 d8 05 	lds	r18, 0x05D8
    3b8a:	33 27       	eor	r19, r19
    3b8c:	27 fd       	sbrc	r18, 7
    3b8e:	30 95       	com	r19
    3b90:	28 17       	cp	r18, r24
    3b92:	39 07       	cpc	r19, r25
    3b94:	3c f0       	brlt	.+14     	; 0x3ba4 <main+0x60a>
				{
					transition_counter = Config.Transition_P1n;
    3b96:	30 93 23 05 	sts	0x0523, r19
    3b9a:	20 93 22 05 	sts	0x0522, r18
					Transition_state = TRANS_P1n;
    3b9e:	84 e0       	ldi	r24, 0x04	; 4
    3ba0:	80 93 21 05 	sts	0x0521, r24
				}
			}

			// Handle timed transition towards P2
			if ((Transition_state == TRANS_P1n_to_P2_start) || (Transition_state == TRANS_P1_to_P2_start))
    3ba4:	80 91 21 05 	lds	r24, 0x0521
    3ba8:	8b 7f       	andi	r24, 0xFB	; 251
    3baa:	83 30       	cpi	r24, 0x03	; 3
    3bac:	a9 f4       	brne	.+42     	; 0x3bd8 <main+0x63e>
			{
				transition_counter++;
    3bae:	80 91 22 05 	lds	r24, 0x0522
    3bb2:	90 91 23 05 	lds	r25, 0x0523
    3bb6:	01 96       	adiw	r24, 0x01	; 1
    3bb8:	90 93 23 05 	sts	0x0523, r25
    3bbc:	80 93 22 05 	sts	0x0522, r24
				if (transition_counter >= 100)
    3bc0:	84 36       	cpi	r24, 0x64	; 100
    3bc2:	91 05       	cpc	r25, r1
    3bc4:	4c f0       	brlt	.+18     	; 0x3bd8 <main+0x63e>
				{
					transition_counter = 100;
    3bc6:	a4 e6       	ldi	r26, 0x64	; 100
    3bc8:	b0 e0       	ldi	r27, 0x00	; 0
    3bca:	b0 93 23 05 	sts	0x0523, r27
    3bce:	a0 93 22 05 	sts	0x0522, r26
					Transition_state = TRANS_P2;
    3bd2:	89 e0       	ldi	r24, 0x09	; 9
    3bd4:	80 93 21 05 	sts	0x0521, r24
		// Update state, values and transition_counter every Config.TransitionSpeed if not zero.
		if (((Config.TransitionSpeed != 0) && (Transition_timeout > transition_time)) ||
			// Update immediately
			TransitionUpdated)
		{
			Transition_timeout = 0;
    3bd8:	1b 8a       	std	Y+19, r1	; 0x13
    3bda:	1a 8a       	std	Y+18, r1	; 0x12
			}

		} // Update transition_counter

		// Zero the I-terms of the opposite state so as to ensure a bump-less transition
		if ((Transition_state == TRANS_P1) || (transition == 0))
    3bdc:	20 91 21 05 	lds	r18, 0x0521
    3be0:	22 23       	and	r18, r18
    3be2:	31 f0       	breq	.+12     	; 0x3bf0 <main+0x656>
    3be4:	80 91 1f 05 	lds	r24, 0x051F
    3be8:	90 91 20 05 	lds	r25, 0x0520
    3bec:	00 97       	sbiw	r24, 0x00	; 0
    3bee:	39 f4       	brne	.+14     	; 0x3bfe <main+0x664>
		{
			// Clear P2 I-term while fully in P1
			memset(&IntegralGyro[P2][ROLL], 0, sizeof(int32_t) * NUMBEROFAXIS);
    3bf0:	8c e0       	ldi	r24, 0x0C	; 12
    3bf2:	e1 ef       	ldi	r30, 0xF1	; 241
    3bf4:	f7 e0       	ldi	r31, 0x07	; 7
    3bf6:	11 92       	st	Z+, r1
    3bf8:	8a 95       	dec	r24
    3bfa:	e9 f7       	brne	.-6      	; 0x3bf6 <main+0x65c>
    3bfc:	0b c0       	rjmp	.+22     	; 0x3c14 <main+0x67a>
		}
		else if ((Transition_state == TRANS_P2) || (transition == 100))
    3bfe:	29 30       	cpi	r18, 0x09	; 9
    3c00:	19 f0       	breq	.+6      	; 0x3c08 <main+0x66e>
    3c02:	84 36       	cpi	r24, 0x64	; 100
    3c04:	91 05       	cpc	r25, r1
    3c06:	31 f4       	brne	.+12     	; 0x3c14 <main+0x67a>
		{
			// Clear P1 I-term while fully in P2
			memset(&IntegralGyro[P1][ROLL], 0, sizeof(int32_t) * NUMBEROFAXIS);
    3c08:	8c e0       	ldi	r24, 0x0C	; 12
    3c0a:	a5 ee       	ldi	r26, 0xE5	; 229
    3c0c:	b7 e0       	ldi	r27, 0x07	; 7
    3c0e:	1d 92       	st	X+, r1
    3c10:	8a 95       	dec	r24
    3c12:	e9 f7       	brne	.-6      	; 0x3c0e <main+0x674>
		//************************************************************
		//* Update timers
		//************************************************************

		// Safely get current value of TCNT1
		Save_TCNT1 = TIM16_ReadTCNT1();
    3c14:	0e 94 d7 2c 	call	0x59ae	; 0x59ae <TIM16_ReadTCNT1>
    3c18:	9d 8b       	std	Y+21, r25	; 0x15
    3c1a:	8c 8b       	std	Y+20, r24	; 0x14
		
		// 32-bit timers (Max. 1718s measurement on T1, 220K seconds on T2)

		// Handle TCNT1-based timer correctly - this actually seems necessary...
		// Work out the current RC rate by measuring between incoming RC packets
		if (Save_TCNT1 < RC_Rate_TCNT1)
    3c1c:	84 15       	cp	r24, r4
    3c1e:	95 05       	cpc	r25, r5
    3c20:	b8 f4       	brcc	.+46     	; 0x3c50 <main+0x6b6>
		{
			RC_Rate_Timer += (65536 - RC_Rate_TCNT1 + Save_TCNT1);
    3c22:	80 e0       	ldi	r24, 0x00	; 0
    3c24:	90 e0       	ldi	r25, 0x00	; 0
    3c26:	a1 e0       	ldi	r26, 0x01	; 1
    3c28:	b0 e0       	ldi	r27, 0x00	; 0
    3c2a:	84 19       	sub	r24, r4
    3c2c:	95 09       	sbc	r25, r5
    3c2e:	a1 09       	sbc	r26, r1
    3c30:	b1 09       	sbc	r27, r1
    3c32:	2c 89       	ldd	r18, Y+20	; 0x14
    3c34:	3d 89       	ldd	r19, Y+21	; 0x15
    3c36:	82 0f       	add	r24, r18
    3c38:	93 1f       	adc	r25, r19
    3c3a:	a1 1d       	adc	r26, r1
    3c3c:	b1 1d       	adc	r27, r1
    3c3e:	2c 81       	ldd	r18, Y+4	; 0x04
    3c40:	3d 81       	ldd	r19, Y+5	; 0x05
    3c42:	4e 81       	ldd	r20, Y+6	; 0x06
    3c44:	5f 81       	ldd	r21, Y+7	; 0x07
    3c46:	28 0f       	add	r18, r24
    3c48:	39 1f       	adc	r19, r25
    3c4a:	4a 1f       	adc	r20, r26
    3c4c:	5b 1f       	adc	r21, r27
    3c4e:	0c c0       	rjmp	.+24     	; 0x3c68 <main+0x6ce>
		}
		else
		{
			RC_Rate_Timer += (Save_TCNT1 - RC_Rate_TCNT1);
    3c50:	8c 89       	ldd	r24, Y+20	; 0x14
    3c52:	9d 89       	ldd	r25, Y+21	; 0x15
    3c54:	84 19       	sub	r24, r4
    3c56:	95 09       	sbc	r25, r5
    3c58:	2c 81       	ldd	r18, Y+4	; 0x04
    3c5a:	3d 81       	ldd	r19, Y+5	; 0x05
    3c5c:	4e 81       	ldd	r20, Y+6	; 0x06
    3c5e:	5f 81       	ldd	r21, Y+7	; 0x07
    3c60:	28 0f       	add	r18, r24
    3c62:	39 1f       	adc	r19, r25
    3c64:	41 1d       	adc	r20, r1
    3c66:	51 1d       	adc	r21, r1
    3c68:	2c 83       	std	Y+4, r18	; 0x04
    3c6a:	3d 83       	std	Y+5, r19	; 0x05
    3c6c:	4e 83       	std	Y+6, r20	; 0x06
    3c6e:	5f 83       	std	Y+7, r21	; 0x07
		}
		
		RC_Rate_TCNT1 = Save_TCNT1;

		// Arm timer for timing stick hold
		Arm_timer += (uint8_t)(TCNT2 - Arm_TCNT2); 
    3c70:	80 91 b2 00 	lds	r24, 0x00B2
    3c74:	3b a1       	ldd	r19, Y+35	; 0x23
    3c76:	83 1b       	sub	r24, r19
    3c78:	88 0e       	add	r8, r24
    3c7a:	91 1c       	adc	r9, r1
    3c7c:	a1 1c       	adc	r10, r1
    3c7e:	b1 1c       	adc	r11, r1
		Arm_TCNT2 = TCNT2;
    3c80:	40 91 b2 00 	lds	r20, 0x00B2
    3c84:	4b a3       	std	Y+35, r20	; 0x23

		// 16-bit timers (Max. 3.35s measurement on T2)
		// All TCNT2 timers increment at 19.531 kHz

		// Sets the desired SERVO_RATE by flagging ServoTick when PWM due
		Servo_Rate += (uint8_t)(TCNT2 - ServoRate_TCNT2);
    3c86:	80 91 b2 00 	lds	r24, 0x00B2
    3c8a:	2e a1       	ldd	r18, Y+38	; 0x26
    3c8c:	82 1b       	sub	r24, r18
    3c8e:	48 89       	ldd	r20, Y+16	; 0x10
    3c90:	59 89       	ldd	r21, Y+17	; 0x11
    3c92:	48 0f       	add	r20, r24
    3c94:	51 1d       	adc	r21, r1
    3c96:	59 8b       	std	Y+17, r21	; 0x11
    3c98:	48 8b       	std	Y+16, r20	; 0x10
		ServoRate_TCNT2 = TCNT2;
    3c9a:	20 91 b2 00 	lds	r18, 0x00B2
    3c9e:	2e a3       	std	Y+38, r18	; 0x26
		
		// Signal RC overdue after RC_OVERDUE time (500ms)
		RC_Timeout += (uint8_t)(TCNT2 - Servo_TCNT2);
    3ca0:	80 91 b2 00 	lds	r24, 0x00B2
    3ca4:	3d a1       	ldd	r19, Y+37	; 0x25
    3ca6:	83 1b       	sub	r24, r19
    3ca8:	49 85       	ldd	r20, Y+9	; 0x09
    3caa:	5a 85       	ldd	r21, Y+10	; 0x0a
    3cac:	48 0f       	add	r20, r24
    3cae:	51 1d       	adc	r21, r1
    3cb0:	5a 87       	std	Y+10, r21	; 0x0a
    3cb2:	49 87       	std	Y+9, r20	; 0x09
		Servo_TCNT2 = TCNT2;
    3cb4:	20 91 b2 00 	lds	r18, 0x00B2
    3cb8:	2d a3       	std	Y+37, r18	; 0x25
		
		// Update transition timer
		Transition_timeout += (uint8_t)(TCNT2 - Transition_TCNT2);
    3cba:	80 91 b2 00 	lds	r24, 0x00B2
    3cbe:	3f 8d       	ldd	r19, Y+31	; 0x1f
    3cc0:	83 1b       	sub	r24, r19
    3cc2:	4a 89       	ldd	r20, Y+18	; 0x12
    3cc4:	5b 89       	ldd	r21, Y+19	; 0x13
    3cc6:	48 0f       	add	r20, r24
    3cc8:	51 1d       	adc	r21, r1
    3cca:	5b 8b       	std	Y+19, r21	; 0x13
    3ccc:	4a 8b       	std	Y+18, r20	; 0x12
		Transition_TCNT2 = TCNT2;
    3cce:	20 91 b2 00 	lds	r18, 0x00B2
    3cd2:	2f 8f       	std	Y+31, r18	; 0x1f

		// Update status timeout
		Status_timeout += (uint8_t)(TCNT2 - Status_TCNT2);
    3cd4:	80 91 b2 00 	lds	r24, 0x00B2
    3cd8:	38 a1       	ldd	r19, Y+32	; 0x20
    3cda:	83 1b       	sub	r24, r19
    3cdc:	4e 85       	ldd	r20, Y+14	; 0x0e
    3cde:	5f 85       	ldd	r21, Y+15	; 0x0f
    3ce0:	48 0f       	add	r20, r24
    3ce2:	51 1d       	adc	r21, r1
    3ce4:	5f 87       	std	Y+15, r21	; 0x0f
    3ce6:	4e 87       	std	Y+14, r20	; 0x0e
		Status_TCNT2 = TCNT2;
    3ce8:	20 91 b2 00 	lds	r18, 0x00B2
    3cec:	28 a3       	std	Y+32, r18	; 0x20
		
		// Status refresh timer
		UpdateStatus_timer += (uint8_t)(TCNT2 - Refresh_TCNT2);
    3cee:	80 91 b2 00 	lds	r24, 0x00B2
    3cf2:	39 a1       	ldd	r19, Y+33	; 0x21
    3cf4:	83 1b       	sub	r24, r19
    3cf6:	49 8d       	ldd	r20, Y+25	; 0x19
    3cf8:	5a 8d       	ldd	r21, Y+26	; 0x1a
    3cfa:	48 0f       	add	r20, r24
    3cfc:	51 1d       	adc	r21, r1
    3cfe:	5a 8f       	std	Y+26, r21	; 0x1a
    3d00:	49 8f       	std	Y+25, r20	; 0x19
		Refresh_TCNT2 = TCNT2;
    3d02:	20 91 b2 00 	lds	r18, 0x00B2
    3d06:	29 a3       	std	Y+33, r18	; 0x21

		// Auto-disarm timer
		Disarm_timer += (uint8_t)(TCNT2 - Disarm_TCNT2);
    3d08:	80 91 b2 00 	lds	r24, 0x00B2
    3d0c:	3a a1       	ldd	r19, Y+34	; 0x22
    3d0e:	83 1b       	sub	r24, r19
    3d10:	28 0e       	add	r2, r24
    3d12:	31 1c       	adc	r3, r1
		Disarm_TCNT2 = TCNT2;
    3d14:	40 91 b2 00 	lds	r20, 0x00B2
    3d18:	4a a3       	std	Y+34, r20	; 0x22

		// Timer for audible alarms
		Ticker_Count += (uint8_t)(TCNT2 - Ticker_TCNT2);
    3d1a:	80 91 b2 00 	lds	r24, 0x00B2
    3d1e:	2c a1       	ldd	r18, Y+36	; 0x24
    3d20:	82 1b       	sub	r24, r18
    3d22:	4d 8d       	ldd	r20, Y+29	; 0x1d
    3d24:	5e 8d       	ldd	r21, Y+30	; 0x1e
    3d26:	48 0f       	add	r20, r24
    3d28:	51 1d       	adc	r21, r1
    3d2a:	5e 8f       	std	Y+30, r21	; 0x1e
    3d2c:	4d 8f       	std	Y+29, r20	; 0x1d
		Ticker_TCNT2 = TCNT2;
    3d2e:	20 91 b2 00 	lds	r18, 0x00B2
    3d32:	2c a3       	std	Y+36, r18	; 0x24
		//* ((Ticker_Count >> 8) &8) 	= 4.77Hz (Disarm and LVA alarms)
		//************************************************************

		if ((Ticker_Count >> 8) &8) 
		{
			Alarm_flags |= (1 << BUZZER_ON);	// 4.77Hz beep
    3d34:	80 91 1c 05 	lds	r24, 0x051C
		//* System ticker - based on TCNT2 (19.531kHz)
		//* 
		//* ((Ticker_Count >> 8) &8) 	= 4.77Hz (Disarm and LVA alarms)
		//************************************************************

		if ((Ticker_Count >> 8) &8) 
    3d38:	53 ff       	sbrs	r21, 3
    3d3a:	02 c0       	rjmp	.+4      	; 0x3d40 <main+0x7a6>
		{
			Alarm_flags |= (1 << BUZZER_ON);	// 4.77Hz beep
    3d3c:	80 61       	ori	r24, 0x10	; 16
    3d3e:	01 c0       	rjmp	.+2      	; 0x3d42 <main+0x7a8>
		}
		else 
		{
			Alarm_flags &= ~(1 << BUZZER_ON);
    3d40:	8f 7e       	andi	r24, 0xEF	; 239
    3d42:	80 93 1c 05 	sts	0x051C, r24
		//* Manage desired output update rate when limited by
		//* the PWM rate set to "Low"
		//************************************************************

		// Flag update required based on the variable Servo_Match
		if (Servo_Rate > SERVO_RATE_LOW)
    3d46:	48 89       	ldd	r20, Y+16	; 0x10
    3d48:	59 89       	ldd	r21, Y+17	; 0x11
    3d4a:	4d 32       	cpi	r20, 0x2D	; 45
    3d4c:	51 40       	sbci	r21, 0x01	; 1
    3d4e:	20 f0       	brcs	.+8      	; 0x3d58 <main+0x7be>
		{
			ServoTick = true;	// Slow device is ready for output generation
			Servo_Rate = 0;
    3d50:	19 8a       	std	Y+17, r1	; 0x11
    3d52:	18 8a       	std	Y+16, r1	; 0x10
		//************************************************************

		// Flag update required based on the variable Servo_Match
		if (Servo_Rate > SERVO_RATE_LOW)
		{
			ServoTick = true;	// Slow device is ready for output generation
    3d54:	21 e0       	ldi	r18, 0x01	; 1
    3d56:	2b 87       	std	Y+11, r18	; 0x0b
		//************************************************************
		//* Measure incoming RC rate and flag no signal
		//************************************************************

		// Check to see if the RC input is overdue (500ms)
		if (RC_Timeout > RC_OVERDUE)
    3d58:	49 85       	ldd	r20, Y+9	; 0x09
    3d5a:	5a 85       	ldd	r21, Y+10	; 0x0a
    3d5c:	46 32       	cpi	r20, 0x26	; 38
    3d5e:	56 42       	sbci	r21, 0x26	; 38
    3d60:	18 f0       	brcs	.+6      	; 0x3d68 <main+0x7ce>
		{
			Overdue = true;	// This results in a "No Signal" error
    3d62:	81 e0       	ldi	r24, 0x01	; 1
    3d64:	80 93 17 05 	sts	0x0517, r24
	
		//************************************************************
		//* Read sensors
		//************************************************************

		ReadGyros();
    3d68:	0e 94 f0 23 	call	0x47e0	; 0x47e0 <ReadGyros>
		ReadAcc();
    3d6c:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <ReadAcc>
		// These two are concatenated to create a virtual timer that can measure up to 
		// 256 x 26.2ms = 6.7072s at which point the "period" is 16,768,000, a 24-bit number
		//************************************************************
		
		// Safely get current value of TCNT1
		Save_TCNT1 = TIM16_ReadTCNT1();
    3d70:	0e 94 d7 2c 	call	0x59ae	; 0x59ae <TIM16_ReadTCNT1>
		
		// Reset Timer0 count
		TCNT0 = 0;
    3d74:	16 bc       	out	0x26, r1	; 38

		// Handle TCNT1 overflow correctly - this actually seems necessary...
		// ticker_16 will hold the most recent amount measured by TCNT1
		// Timer1 (16bit) - run @ 2.5MHz (400ns) - max 26.2ms
		if (Save_TCNT1 < LoopStartTCNT1)
    3d76:	20 91 18 05 	lds	r18, 0x0518
    3d7a:	30 91 19 05 	lds	r19, 0x0519
    3d7e:	82 17       	cp	r24, r18
    3d80:	93 07       	cpc	r25, r19
    3d82:	48 f4       	brcc	.+18     	; 0x3d96 <main+0x7fc>
		{
			ticker_16 = (65536 - LoopStartTCNT1) + Save_TCNT1;
    3d84:	20 91 18 05 	lds	r18, 0x0518
    3d88:	30 91 19 05 	lds	r19, 0x0519
    3d8c:	dc 01       	movw	r26, r24
    3d8e:	a2 1b       	sub	r26, r18
    3d90:	b3 0b       	sbc	r27, r19
    3d92:	9d 01       	movw	r18, r26
    3d94:	08 c0       	rjmp	.+16     	; 0x3da6 <main+0x80c>
		}
		else
		{
			ticker_16 = (Save_TCNT1 - LoopStartTCNT1);
    3d96:	20 91 18 05 	lds	r18, 0x0518
    3d9a:	30 91 19 05 	lds	r19, 0x0519
    3d9e:	fc 01       	movw	r30, r24
    3da0:	e2 1b       	sub	r30, r18
    3da2:	f3 0b       	sbc	r31, r19
    3da4:	9f 01       	movw	r18, r30
		}
		
		// Store old TCNT for next measurement
		LoopStartTCNT1 = Save_TCNT1;
    3da6:	90 93 19 05 	sts	0x0519, r25
    3daa:	80 93 18 05 	sts	0x0518, r24
		
		// Handle both Timer1 under- and over-run cases
		// If TMR0_counter is less than 2, ICNT1 has not overflowed
		if (TMR0_counter < 2)
    3dae:	80 91 c5 07 	lds	r24, 0x07C5
    3db2:	90 91 c6 07 	lds	r25, 0x07C6
    3db6:	a9 01       	movw	r20, r18
    3db8:	60 e0       	ldi	r22, 0x00	; 0
    3dba:	70 e0       	ldi	r23, 0x00	; 0
    3dbc:	02 97       	sbiw	r24, 0x02	; 2
    3dbe:	18 f4       	brcc	.+6      	; 0x3dc6 <main+0x82c>
		{
			interval = ticker_16; // uint16_t
    3dc0:	2a 01       	movw	r4, r20
    3dc2:	3b 01       	movw	r6, r22
    3dc4:	11 c0       	rjmp	.+34     	; 0x3de8 <main+0x84e>
		// So we use chunks of TCNT0, counted during the loop interval
		// to work out the exact period.
		// Timer0 (8bit) - run @ 20MHz / 1024 = 19.531kHz or 51.2us - max 13.1ms
		else
		{
			interval = ticker_16 + (TMR0_counter * 32768);
    3dc6:	40 90 c5 07 	lds	r4, 0x07C5
    3dca:	50 90 c6 07 	lds	r5, 0x07C6
    3dce:	61 2c       	mov	r6, r1
    3dd0:	71 2c       	mov	r7, r1
    3dd2:	2f e0       	ldi	r18, 0x0F	; 15
    3dd4:	44 0c       	add	r4, r4
    3dd6:	55 1c       	adc	r5, r5
    3dd8:	66 1c       	adc	r6, r6
    3dda:	77 1c       	adc	r7, r7
    3ddc:	2a 95       	dec	r18
    3dde:	d1 f7       	brne	.-12     	; 0x3dd4 <main+0x83a>
    3de0:	44 0e       	add	r4, r20
    3de2:	55 1e       	adc	r5, r21
    3de4:	66 1e       	adc	r6, r22
    3de6:	77 1e       	adc	r7, r23
		}

		TMR0_counter = 0;
    3de8:	10 92 c6 07 	sts	0x07C6, r1
    3dec:	10 92 c5 07 	sts	0x07C5, r1
	
		//************************************************************
		//* Update attitude, average acc values each loop
		//************************************************************
				
		imu_update(interval);
    3df0:	c3 01       	movw	r24, r6
    3df2:	b2 01       	movw	r22, r4
    3df4:	0e 94 e0 27 	call	0x4fc0	; 0x4fc0 <imu_update>

		//************************************************************
		//* Update I-terms, average gyro values each loop
		//************************************************************

		Sensor_PID(interval);
    3df8:	c3 01       	movw	r24, r6
    3dfa:	b2 01       	movw	r22, r4
    3dfc:	0e 94 ca 3f 	call	0x7f94	; 0x7f94 <Sensor_PID>
		//* PWM_interval = Copied from Interval, is the current loop rate.
		//* 
		//* 
		//************************************************************

		if (Interrupted)
    3e00:	80 91 c2 07 	lds	r24, 0x07C2
    3e04:	88 23       	and	r24, r24
    3e06:	09 f4       	brne	.+2      	; 0x3e0a <main+0x870>
    3e08:	0a c1       	rjmp	.+532    	; 0x401e <main+0xa84>
		{
			// Measure incoming RC rate. Threshold is SLOW_RC_RATE.
			// Use RC_Rate_Timer is not in FAST mode.
			if (Config.Servo_rate < FAST)
    3e0a:	80 91 d3 05 	lds	r24, 0x05D3
    3e0e:	82 30       	cpi	r24, 0x02	; 2
    3e10:	64 f4       	brge	.+24     	; 0x3e2a <main+0x890>
			{
				if (RC_Rate_Timer > SLOW_RC_RATE)
    3e12:	21 e0       	ldi	r18, 0x01	; 1
    3e14:	28 87       	std	Y+8, r18	; 0x08
    3e16:	2c 81       	ldd	r18, Y+4	; 0x04
    3e18:	3d 81       	ldd	r19, Y+5	; 0x05
    3e1a:	4e 81       	ldd	r20, Y+6	; 0x06
    3e1c:	5f 81       	ldd	r21, Y+7	; 0x07
    3e1e:	24 3c       	cpi	r18, 0xC4	; 196
    3e20:	32 4a       	sbci	r19, 0xA2	; 162
    3e22:	41 05       	cpc	r20, r1
    3e24:	51 05       	cpc	r21, r1
    3e26:	08 f4       	brcc	.+2      	; 0x3e2a <main+0x890>
    3e28:	18 86       	std	Y+8, r1	; 0x08
					SlowRC = false;
				}
			}
			
			// Use Framerate in FAST mode, but only when NOT skipping frames
			if ((!RCrateMeasured) && (Config.Servo_rate == FAST))
    3e2a:	2b 81       	ldd	r18, Y+3	; 0x03
    3e2c:	21 11       	cpse	r18, r1
    3e2e:	0e c0       	rjmp	.+28     	; 0x3e4c <main+0x8b2>
    3e30:	82 30       	cpi	r24, 0x02	; 2
    3e32:	09 f0       	breq	.+2      	; 0x3e36 <main+0x89c>
    3e34:	bc c0       	rjmp	.+376    	; 0x3fae <main+0xa14>
			{
				// In high-speed mode, the RC rate will be unfairly marked as "slow" once measured and interrupt blocking starts.
				// To stop this being a problem, only set SlowRC prior to RCrateMeasured becoming true in this mode
				if (FrameRate > SLOW_RC_RATE)
    3e36:	80 91 e0 07 	lds	r24, 0x07E0
    3e3a:	90 91 e1 07 	lds	r25, 0x07E1
    3e3e:	31 e0       	ldi	r19, 0x01	; 1
    3e40:	38 87       	std	Y+8, r19	; 0x08
    3e42:	84 3c       	cpi	r24, 0xC4	; 196
    3e44:	92 4a       	sbci	r25, 0xA2	; 162
    3e46:	48 f4       	brcc	.+18     	; 0x3e5a <main+0x8c0>
    3e48:	18 86       	std	Y+8, r1	; 0x08
    3e4a:	61 c0       	rjmp	.+194    	; 0x3f0e <main+0x974>
			//* Work out the high speed mode RC blocking period when requested. 
			//* Only relevant for high speed mode. The slower the PWM rate the fewer
			//* PWM pulses will fit in the S.Bus gap.
			//***********************************************************************

			if (RCrateMeasured && (Config.Servo_rate == FAST))
    3e4c:	82 30       	cpi	r24, 0x02	; 2
    3e4e:	09 f0       	breq	.+2      	; 0x3e52 <main+0x8b8>
    3e50:	a6 c1       	rjmp	.+844    	; 0x419e <main+0xc04>
			{
				// Set minimal pulses doable (39.2 - n * cycletime)
				if (SlowRC)
    3e52:	28 85       	ldd	r18, Y+8	; 0x08
    3e54:	22 23       	and	r18, r18
    3e56:	09 f4       	brne	.+2      	; 0x3e5a <main+0x8c0>
    3e58:	5a c0       	rjmp	.+180    	; 0x3f0e <main+0x974>
				{
					if (Config.RxMode == SBUS)
    3e5a:	80 91 d2 05 	lds	r24, 0x05D2
    3e5e:	82 30       	cpi	r24, 0x02	; 2
    3e60:	29 f4       	brne	.+10     	; 0x3e6c <main+0x8d2>
					{
						//PWM_pulses = 4;				// Four pulses will fit if interval faster than 102Hz
						PWM_pulses = 3; // Debug
    3e62:	43 e0       	ldi	r20, 0x03	; 3
    3e64:	50 e0       	ldi	r21, 0x00	; 0
    3e66:	5b a7       	std	Y+43, r21	; 0x2b
    3e68:	4a a7       	std	Y+42, r20	; 0x2a
    3e6a:	04 c0       	rjmp	.+8      	; 0x3e74 <main+0x8da>
					}
					else
					{
						//PWM_pulses = 3;		// Three pulses will fit if interval faster than 101Hz
						PWM_pulses = 2; // Debug
    3e6c:	22 e0       	ldi	r18, 0x02	; 2
    3e6e:	30 e0       	ldi	r19, 0x00	; 0
    3e70:	3b a7       	std	Y+43, r19	; 0x2b
    3e72:	2a a7       	std	Y+42, r18	; 0x2a
					}

				
					if (PWM_interval < 19600)	// 19600 = 7.84ms
    3e74:	30 e9       	ldi	r19, 0x90	; 144
    3e76:	c3 16       	cp	r12, r19
    3e78:	3c e4       	ldi	r19, 0x4C	; 76
    3e7a:	d3 06       	cpc	r13, r19
    3e7c:	e1 04       	cpc	r14, r1
    3e7e:	f1 04       	cpc	r15, r1
    3e80:	08 f0       	brcs	.+2      	; 0x3e84 <main+0x8ea>
    3e82:	92 c1       	rjmp	.+804    	; 0x41a8 <main+0xc0e>
					{
						PWM_pulses += 1;		// Five pulses will fit if interval faster than 127Hz
					}
				
					if (PWM_interval < 16333)	// 16333 = 6.53ms
    3e84:	4d ec       	ldi	r20, 0xCD	; 205
    3e86:	c4 16       	cp	r12, r20
    3e88:	4f e3       	ldi	r20, 0x3F	; 63
    3e8a:	d4 06       	cpc	r13, r20
    3e8c:	e1 04       	cpc	r14, r1
    3e8e:	f1 04       	cpc	r15, r1
    3e90:	28 f0       	brcs	.+10     	; 0x3e9c <main+0x902>
					}

				
					if (PWM_interval < 19600)	// 19600 = 7.84ms
					{
						PWM_pulses += 1;		// Five pulses will fit if interval faster than 127Hz
    3e92:	2a a5       	ldd	r18, Y+42	; 0x2a
    3e94:	3b a5       	ldd	r19, Y+43	; 0x2b
    3e96:	2f 5f       	subi	r18, 0xFF	; 255
    3e98:	3f 4f       	sbci	r19, 0xFF	; 255
    3e9a:	31 c0       	rjmp	.+98     	; 0x3efe <main+0x964>
					if (PWM_interval < 16333)	// 16333 = 6.53ms
					{
						PWM_pulses += 1;		// Six pulses will fit if interval faster than 153Hz
					}
				
					if (PWM_interval < 14000)	// 14000 = 5.6ms
    3e9c:	30 eb       	ldi	r19, 0xB0	; 176
    3e9e:	c3 16       	cp	r12, r19
    3ea0:	36 e3       	ldi	r19, 0x36	; 54
    3ea2:	d3 06       	cpc	r13, r19
    3ea4:	e1 04       	cpc	r14, r1
    3ea6:	f1 04       	cpc	r15, r1
    3ea8:	28 f0       	brcs	.+10     	; 0x3eb4 <main+0x91a>
						PWM_pulses += 1;		// Five pulses will fit if interval faster than 127Hz
					}
				
					if (PWM_interval < 16333)	// 16333 = 6.53ms
					{
						PWM_pulses += 1;		// Six pulses will fit if interval faster than 153Hz
    3eaa:	4a a5       	ldd	r20, Y+42	; 0x2a
    3eac:	5b a5       	ldd	r21, Y+43	; 0x2b
    3eae:	4e 5f       	subi	r20, 0xFE	; 254
    3eb0:	5f 4f       	sbci	r21, 0xFF	; 255
    3eb2:	17 c0       	rjmp	.+46     	; 0x3ee2 <main+0x948>
					if (PWM_interval < 14000)	// 14000 = 5.6ms
					{
						PWM_pulses += 1;		// Seven pulses will fit if interval faster than 179Hz
					}
				
					if (PWM_interval < 12250)	// 12250 = 4.9ms
    3eb4:	5a ed       	ldi	r21, 0xDA	; 218
    3eb6:	c5 16       	cp	r12, r21
    3eb8:	5f e2       	ldi	r21, 0x2F	; 47
    3eba:	d5 06       	cpc	r13, r21
    3ebc:	e1 04       	cpc	r14, r1
    3ebe:	f1 04       	cpc	r15, r1
    3ec0:	28 f0       	brcs	.+10     	; 0x3ecc <main+0x932>
						PWM_pulses += 1;		// Six pulses will fit if interval faster than 153Hz
					}
				
					if (PWM_interval < 14000)	// 14000 = 5.6ms
					{
						PWM_pulses += 1;		// Seven pulses will fit if interval faster than 179Hz
    3ec2:	2a a5       	ldd	r18, Y+42	; 0x2a
    3ec4:	3b a5       	ldd	r19, Y+43	; 0x2b
    3ec6:	2d 5f       	subi	r18, 0xFD	; 253
    3ec8:	3f 4f       	sbci	r19, 0xFF	; 255
    3eca:	19 c0       	rjmp	.+50     	; 0x3efe <main+0x964>
					if (PWM_interval < 12250)	// 12250 = 4.9ms
					{
						PWM_pulses += 1;		// Eight pulses will fit if interval faster than 204Hz
					}
				
					if (PWM_interval < 10888)	// 10888 = 4.35ms
    3ecc:	38 e8       	ldi	r19, 0x88	; 136
    3ece:	c3 16       	cp	r12, r19
    3ed0:	3a e2       	ldi	r19, 0x2A	; 42
    3ed2:	d3 06       	cpc	r13, r19
    3ed4:	e1 04       	cpc	r14, r1
    3ed6:	f1 04       	cpc	r15, r1
    3ed8:	38 f0       	brcs	.+14     	; 0x3ee8 <main+0x94e>
						PWM_pulses += 1;		// Seven pulses will fit if interval faster than 179Hz
					}
				
					if (PWM_interval < 12250)	// 12250 = 4.9ms
					{
						PWM_pulses += 1;		// Eight pulses will fit if interval faster than 204Hz
    3eda:	4a a5       	ldd	r20, Y+42	; 0x2a
    3edc:	5b a5       	ldd	r21, Y+43	; 0x2b
    3ede:	4c 5f       	subi	r20, 0xFC	; 252
    3ee0:	5f 4f       	sbci	r21, 0xFF	; 255
    3ee2:	5b a7       	std	Y+43, r21	; 0x2b
    3ee4:	4a a7       	std	Y+42, r20	; 0x2a
    3ee6:	60 c1       	rjmp	.+704    	; 0x41a8 <main+0xc0e>
					if (PWM_interval < 10888)	// 10888 = 4.35ms
					{
						PWM_pulses += 1;		// Nine pulses will fit if interval faster than 230Hz
					}
				
					if (PWM_interval < 9800)	// 9800 = 3.92ms
    3ee8:	58 e4       	ldi	r21, 0x48	; 72
    3eea:	c5 16       	cp	r12, r21
    3eec:	56 e2       	ldi	r21, 0x26	; 38
    3eee:	d5 06       	cpc	r13, r21
    3ef0:	e1 04       	cpc	r14, r1
    3ef2:	f1 04       	cpc	r15, r1
    3ef4:	38 f0       	brcs	.+14     	; 0x3f04 <main+0x96a>
						PWM_pulses += 1;		// Eight pulses will fit if interval faster than 204Hz
					}
				
					if (PWM_interval < 10888)	// 10888 = 4.35ms
					{
						PWM_pulses += 1;		// Nine pulses will fit if interval faster than 230Hz
    3ef6:	2a a5       	ldd	r18, Y+42	; 0x2a
    3ef8:	3b a5       	ldd	r19, Y+43	; 0x2b
    3efa:	2b 5f       	subi	r18, 0xFB	; 251
    3efc:	3f 4f       	sbci	r19, 0xFF	; 255
    3efe:	3b a7       	std	Y+43, r19	; 0x2b
    3f00:	2a a7       	std	Y+42, r18	; 0x2a
    3f02:	52 c1       	rjmp	.+676    	; 0x41a8 <main+0xc0e>
					}
				
					if (PWM_interval < 9800)	// 9800 = 3.92ms
					{
						PWM_pulses += 1;		// Ten pulses will fit if interval faster than 255Hz
    3f04:	4a a5       	ldd	r20, Y+42	; 0x2a
    3f06:	5b a5       	ldd	r21, Y+43	; 0x2b
    3f08:	4a 5f       	subi	r20, 0xFA	; 250
    3f0a:	5f 4f       	sbci	r21, 0xFF	; 255
    3f0c:	4b c0       	rjmp	.+150    	; 0x3fa4 <main+0xa0a>
					}
				}
				else
				{
					if (Config.RxMode == SBUS)
    3f0e:	80 91 d2 05 	lds	r24, 0x05D2
    3f12:	82 30       	cpi	r24, 0x02	; 2
    3f14:	29 f4       	brne	.+10     	; 0x3f20 <main+0x986>
					{
						//PWM_pulses = 3;		// Three pulses will fit if interval faster than 101Hz
						PWM_pulses = 2; // Debug						
    3f16:	42 e0       	ldi	r20, 0x02	; 2
    3f18:	50 e0       	ldi	r21, 0x00	; 0
    3f1a:	5b a7       	std	Y+43, r21	; 0x2b
    3f1c:	4a a7       	std	Y+42, r20	; 0x2a
    3f1e:	04 c0       	rjmp	.+8      	; 0x3f28 <main+0x98e>
					}
					else
					{
						//PWM_pulses = 2;		// Two pulses will fit if interval faster than 101Hz
						PWM_pulses = 1; // Debug						
    3f20:	21 e0       	ldi	r18, 0x01	; 1
    3f22:	30 e0       	ldi	r19, 0x00	; 0
    3f24:	3b a7       	std	Y+43, r19	; 0x2b
    3f26:	2a a7       	std	Y+42, r18	; 0x2a
					}
				
					if (PWM_interval < 18437)	// 18437 = 7.37ms
    3f28:	35 e0       	ldi	r19, 0x05	; 5
    3f2a:	c3 16       	cp	r12, r19
    3f2c:	38 e4       	ldi	r19, 0x48	; 72
    3f2e:	d3 06       	cpc	r13, r19
    3f30:	e1 04       	cpc	r14, r1
    3f32:	f1 04       	cpc	r15, r1
    3f34:	08 f0       	brcs	.+2      	; 0x3f38 <main+0x99e>
    3f36:	3b c1       	rjmp	.+630    	; 0x41ae <main+0xc14>
					{
						PWM_pulses += 1;		// Four pulses will fit if interval faster than 135Hz
					}
				
					if (PWM_interval < 14750)	// 14750 = 5.9ms
    3f38:	4e e9       	ldi	r20, 0x9E	; 158
    3f3a:	c4 16       	cp	r12, r20
    3f3c:	49 e3       	ldi	r20, 0x39	; 57
    3f3e:	d4 06       	cpc	r13, r20
    3f40:	e1 04       	cpc	r14, r1
    3f42:	f1 04       	cpc	r15, r1
    3f44:	28 f0       	brcs	.+10     	; 0x3f50 <main+0x9b6>
						PWM_pulses = 1; // Debug						
					}
				
					if (PWM_interval < 18437)	// 18437 = 7.37ms
					{
						PWM_pulses += 1;		// Four pulses will fit if interval faster than 135Hz
    3f46:	2a a5       	ldd	r18, Y+42	; 0x2a
    3f48:	3b a5       	ldd	r19, Y+43	; 0x2b
    3f4a:	2f 5f       	subi	r18, 0xFF	; 255
    3f4c:	3f 4f       	sbci	r19, 0xFF	; 255
    3f4e:	19 c0       	rjmp	.+50     	; 0x3f82 <main+0x9e8>
					if (PWM_interval < 14750)	// 14750 = 5.9ms
					{
						PWM_pulses += 1;		// Five pulses will fit if interval faster than 169Hz
					}
				
					if (PWM_interval < 11886)	// 11886 = 4.75ms
    3f50:	3e e6       	ldi	r19, 0x6E	; 110
    3f52:	c3 16       	cp	r12, r19
    3f54:	3e e2       	ldi	r19, 0x2E	; 46
    3f56:	d3 06       	cpc	r13, r19
    3f58:	e1 04       	cpc	r14, r1
    3f5a:	f1 04       	cpc	r15, r1
    3f5c:	38 f0       	brcs	.+14     	; 0x3f6c <main+0x9d2>
						PWM_pulses += 1;		// Four pulses will fit if interval faster than 135Hz
					}
				
					if (PWM_interval < 14750)	// 14750 = 5.9ms
					{
						PWM_pulses += 1;		// Five pulses will fit if interval faster than 169Hz
    3f5e:	4a a5       	ldd	r20, Y+42	; 0x2a
    3f60:	5b a5       	ldd	r21, Y+43	; 0x2b
    3f62:	4e 5f       	subi	r20, 0xFE	; 254
    3f64:	5f 4f       	sbci	r21, 0xFF	; 255
    3f66:	5b a7       	std	Y+43, r21	; 0x2b
    3f68:	4a a7       	std	Y+42, r20	; 0x2a
    3f6a:	21 c1       	rjmp	.+578    	; 0x41ae <main+0xc14>
					if (PWM_interval < 11886)	// 11886 = 4.75ms
					{
						PWM_pulses += 1;		// Six pulses will fit if interval faster than 210Hz
					}
				
					if (PWM_interval < 10142)	// 10142 = 4.05ms
    3f6c:	5e e9       	ldi	r21, 0x9E	; 158
    3f6e:	c5 16       	cp	r12, r21
    3f70:	57 e2       	ldi	r21, 0x27	; 39
    3f72:	d5 06       	cpc	r13, r21
    3f74:	e1 04       	cpc	r14, r1
    3f76:	f1 04       	cpc	r15, r1
    3f78:	38 f0       	brcs	.+14     	; 0x3f88 <main+0x9ee>
						PWM_pulses += 1;		// Five pulses will fit if interval faster than 169Hz
					}
				
					if (PWM_interval < 11886)	// 11886 = 4.75ms
					{
						PWM_pulses += 1;		// Six pulses will fit if interval faster than 210Hz
    3f7a:	2a a5       	ldd	r18, Y+42	; 0x2a
    3f7c:	3b a5       	ldd	r19, Y+43	; 0x2b
    3f7e:	2d 5f       	subi	r18, 0xFD	; 253
    3f80:	3f 4f       	sbci	r19, 0xFF	; 255
    3f82:	3b a7       	std	Y+43, r19	; 0x2b
    3f84:	2a a7       	std	Y+42, r18	; 0x2a
    3f86:	13 c1       	rjmp	.+550    	; 0x41ae <main+0xc14>
						PWM_pulses += 1;		// Five pulses will fit if interval faster than 246Hz
					}
				
					if (PWM_interval < 8859)	// 8859 = 3.5ms
					{
						PWM_pulses += 1;		// Six pulses will fit if interval faster than 282Hz
    3f88:	4a a5       	ldd	r20, Y+42	; 0x2a
    3f8a:	5b a5       	ldd	r21, Y+43	; 0x2b
					if (PWM_interval < 10142)	// 10142 = 4.05ms
					{
						PWM_pulses += 1;		// Five pulses will fit if interval faster than 246Hz
					}
				
					if (PWM_interval < 8859)	// 8859 = 3.5ms
    3f8c:	3b e9       	ldi	r19, 0x9B	; 155
    3f8e:	c3 16       	cp	r12, r19
    3f90:	32 e2       	ldi	r19, 0x22	; 34
    3f92:	d3 06       	cpc	r13, r19
    3f94:	e1 04       	cpc	r14, r1
    3f96:	f1 04       	cpc	r15, r1
    3f98:	18 f0       	brcs	.+6      	; 0x3fa0 <main+0xa06>
						PWM_pulses += 1;		// Six pulses will fit if interval faster than 210Hz
					}
				
					if (PWM_interval < 10142)	// 10142 = 4.05ms
					{
						PWM_pulses += 1;		// Five pulses will fit if interval faster than 246Hz
    3f9a:	4c 5f       	subi	r20, 0xFC	; 252
    3f9c:	5f 4f       	sbci	r21, 0xFF	; 255
    3f9e:	02 c0       	rjmp	.+4      	; 0x3fa4 <main+0xa0a>
					}
				
					if (PWM_interval < 8859)	// 8859 = 3.5ms
					{
						PWM_pulses += 1;		// Six pulses will fit if interval faster than 282Hz
    3fa0:	4b 5f       	subi	r20, 0xFB	; 251
    3fa2:	5f 4f       	sbci	r21, 0xFF	; 255
    3fa4:	5b a7       	std	Y+43, r21	; 0x2b
    3fa6:	4a a7       	std	Y+42, r20	; 0x2a
    3fa8:	21 e0       	ldi	r18, 0x01	; 1
    3faa:	2b 83       	std	Y+3, r18	; 0x03
    3fac:	04 c0       	rjmp	.+8      	; 0x3fb6 <main+0xa1c>
			
			// Rate not measured or re-calibrating or not FAST mode
			// In all these other modes, just output one pulse
			else
			{
				PWM_pulses = 1;
    3fae:	41 e0       	ldi	r20, 0x01	; 1
    3fb0:	50 e0       	ldi	r21, 0x00	; 0
    3fb2:	5b a7       	std	Y+43, r21	; 0x2b
    3fb4:	4a a7       	std	Y+42, r20	; 0x2a

			// Reset RC timeout now that Interrupt has been received.
			RC_Timeout = 0;

			// No longer overdue. This will cancel the "No signal" alarm
			Overdue = false;
    3fb6:	10 92 17 05 	sts	0x0517, r1
			
			// Reset rate timer once data received. Reset to current time.
			RC_Rate_Timer = 0;
			Save_TCNT1 = TIM16_ReadTCNT1();
    3fba:	0e 94 d7 2c 	call	0x59ae	; 0x59ae <TIM16_ReadTCNT1>
    3fbe:	9d 8b       	std	Y+21, r25	; 0x15
    3fc0:	8c 8b       	std	Y+20, r24	; 0x14
			//* output when S.Bus is used.
			//************************************************************

			// Block RC interrupts if period has been calculated
			// and PWM mode is FAST.
			if ((Config.Servo_rate == FAST) && RCrateMeasured)
    3fc2:	80 91 d3 05 	lds	r24, 0x05D3
    3fc6:	82 30       	cpi	r24, 0x02	; 2
    3fc8:	c9 f4       	brne	.+50     	; 0x3ffc <main+0xa62>
    3fca:	2b 81       	ldd	r18, Y+3	; 0x03
    3fcc:	22 23       	and	r18, r18
    3fce:	b1 f0       	breq	.+44     	; 0x3ffc <main+0xa62>
			{
				// If it's time to resample the RC rate, do it now
				// so as not to disturb PWM generation.
				// This will result in a double gap with just one PWM.
				if (ResampleRCRate)
    3fd0:	3c 8d       	ldd	r19, Y+28	; 0x1c
    3fd2:	31 11       	cpse	r19, r1
    3fd4:	1a c0       	rjmp	.+52     	; 0x400a <main+0xa70>
				// If not, block the RC interrupts until we run out of pulses
				// We need to cancel the Interrupted flag but have to make a copy until 
				// the status screen state machine has seen it.
				else
				{
					if (Interrupted)
    3fd6:	80 91 c2 07 	lds	r24, 0x07C2
    3fda:	88 23       	and	r24, r24
    3fdc:	11 f0       	breq	.+4      	; 0x3fe2 <main+0xa48>
					{
						Interrupted_Clone = true;	// Hand "Interrupted" baton on to its clone
    3fde:	41 e0       	ldi	r20, 0x01	; 1
    3fe0:	4a 83       	std	Y+2, r20	; 0x02
					}
					Interrupted = false;		// Cancel pending interrupts
    3fe2:	10 92 c2 07 	sts	0x07C2, r1
					Disable_RC_Interrupts();	// Disable RC interrupts
    3fe6:	0e 94 09 2f 	call	0x5e12	; 0x5e12 <Disable_RC_Interrupts>
			{
				PWM_pulses = 1;
			}

			// Reset RC timeout now that Interrupt has been received.
			RC_Timeout = 0;
    3fea:	1a 86       	std	Y+10, r1	; 0x0a
    3fec:	19 86       	std	Y+9, r1	; 0x09

			// No longer overdue. This will cancel the "No signal" alarm
			Overdue = false;
			
			// Reset rate timer once data received. Reset to current time.
			RC_Rate_Timer = 0;
    3fee:	1c 82       	std	Y+4, r1	; 0x04
    3ff0:	1d 82       	std	Y+5, r1	; 0x05
    3ff2:	1e 82       	std	Y+6, r1	; 0x06
    3ff4:	1f 82       	std	Y+7, r1	; 0x07
					{
						Interrupted_Clone = true;	// Hand "Interrupted" baton on to its clone
					}
					Interrupted = false;		// Cancel pending interrupts
					Disable_RC_Interrupts();	// Disable RC interrupts
					RCInterruptsON = false;		// Flag it for the rest of the code
    3ff6:	1b 8e       	std	Y+27, r1	; 0x1b
					PWMBlocked = false;			// Enable PWM generation	
    3ff8:	1d 86       	std	Y+13, r1	; 0x0d
    3ffa:	11 c0       	rjmp	.+34     	; 0x401e <main+0xa84>
			{
				PWM_pulses = 1;
			}

			// Reset RC timeout now that Interrupt has been received.
			RC_Timeout = 0;
    3ffc:	1a 86       	std	Y+10, r1	; 0x0a
    3ffe:	19 86       	std	Y+9, r1	; 0x09

			// No longer overdue. This will cancel the "No signal" alarm
			Overdue = false;
			
			// Reset rate timer once data received. Reset to current time.
			RC_Rate_Timer = 0;
    4000:	1c 82       	std	Y+4, r1	; 0x04
    4002:	1d 82       	std	Y+5, r1	; 0x05
    4004:	1e 82       	std	Y+6, r1	; 0x06
    4006:	1f 82       	std	Y+7, r1	; 0x07
    4008:	0a c0       	rjmp	.+20     	; 0x401e <main+0xa84>
			{
				PWM_pulses = 1;
			}

			// Reset RC timeout now that Interrupt has been received.
			RC_Timeout = 0;
    400a:	1a 86       	std	Y+10, r1	; 0x0a
    400c:	19 86       	std	Y+9, r1	; 0x09

			// No longer overdue. This will cancel the "No signal" alarm
			Overdue = false;
			
			// Reset rate timer once data received. Reset to current time.
			RC_Rate_Timer = 0;
    400e:	1c 82       	std	Y+4, r1	; 0x04
    4010:	1d 82       	std	Y+5, r1	; 0x05
    4012:	1e 82       	std	Y+6, r1	; 0x06
    4014:	1f 82       	std	Y+7, r1	; 0x07
				// This will result in a double gap with just one PWM.
				if (ResampleRCRate)
				{
					RCrateMeasured = false;		// Force remeasure of RC rate
					PWMBlocked = true;			// Disable Fast-mode PWM generation		
					ResampleRCRate = false;		// Reset resample request
    4016:	1c 8e       	std	Y+28, r1	; 0x1c
				// so as not to disturb PWM generation.
				// This will result in a double gap with just one PWM.
				if (ResampleRCRate)
				{
					RCrateMeasured = false;		// Force remeasure of RC rate
					PWMBlocked = true;			// Disable Fast-mode PWM generation		
    4018:	21 e0       	ldi	r18, 0x01	; 1
    401a:	2d 87       	std	Y+13, r18	; 0x0d
				// If it's time to resample the RC rate, do it now
				// so as not to disturb PWM generation.
				// This will result in a double gap with just one PWM.
				if (ResampleRCRate)
				{
					RCrateMeasured = false;		// Force remeasure of RC rate
    401c:	1b 82       	std	Y+3, r1	; 0x03
		//* based on a very specific set of conditions
		//************************************************************

		// Cases where we are ready to output
		if	(
				(Interrupted) ||											// Run at RC rate
    401e:	80 91 c2 07 	lds	r24, 0x07C2
		//* Output PWM to ESCs/Servos where required, 
		//* based on a very specific set of conditions
		//************************************************************

		// Cases where we are ready to output
		if	(
    4022:	81 11       	cpse	r24, r1
    4024:	08 c0       	rjmp	.+16     	; 0x4036 <main+0xa9c>
				(Interrupted) ||											// Run at RC rate
    4026:	80 91 d3 05 	lds	r24, 0x05D3
    402a:	82 30       	cpi	r24, 0x02	; 2
    402c:	09 f0       	breq	.+2      	; 0x4030 <main+0xa96>
    402e:	8d c0       	rjmp	.+282    	; 0x414a <main+0xbb0>
				((Config.Servo_rate == FAST) && (!PWMBlocked))				// Run at full loop rate if allowed
    4030:	3d 85       	ldd	r19, Y+13	; 0x0d
    4032:	31 11       	cpse	r19, r1
    4034:	84 c0       	rjmp	.+264    	; 0x413e <main+0xba4>
			//* The execution rates are:
			//* The RC rate unless in FAST mode
			//* High speed in FAST mode
			//******************************************************************

			if (Interrupted)
    4036:	80 91 c2 07 	lds	r24, 0x07C2
    403a:	88 23       	and	r24, r24
    403c:	21 f0       	breq	.+8      	; 0x4046 <main+0xaac>
			{
				Interrupted_Clone = true;	// Hand "Interrupted" baton on to its clone
				Interrupted = false;		// Reset interrupted flag if that was the cause of entry			
    403e:	10 92 c2 07 	sts	0x07C2, r1
			//* High speed in FAST mode
			//******************************************************************

			if (Interrupted)
			{
				Interrupted_Clone = true;	// Hand "Interrupted" baton on to its clone
    4042:	41 e0       	ldi	r20, 0x01	; 1
    4044:	4a 83       	std	Y+2, r20	; 0x02
			// For each output, mark the ones that are to fire this time
			for (i = 0; i < MAX_OUTPUTS; i++)
			{
				// Mark bits depending on the selected output type
				if	(
						((Config.Servo_rate == FAST) && (Config.Channel[i].Motor_marker == ASERVO) && ServoTick) ||					// At ServoTick for A.Servo in FAST mode
    4046:	90 91 d3 05 	lds	r25, 0x05D3
    404a:	ef e3       	ldi	r30, 0x3F	; 63
    404c:	f6 e0       	ldi	r31, 0x06	; 6
    404e:	20 e0       	ldi	r18, 0x00	; 0
    4050:	30 e0       	ldi	r19, 0x00	; 0
			}

			// Decide which outputs fire this time, depending on their device setting (A.Servo, D.Servo, Motor)
			// D.Servo, Motor are always ready, but A.Servo must be limited to Servo_rate, flagged by ServoTick

			ServoFlag = 0;
    4052:	80 e0       	ldi	r24, 0x00	; 0
				
			// For each output, mark the ones that are to fire this time
			for (i = 0; i < MAX_OUTPUTS; i++)
			{
				// Mark bits depending on the selected output type
				if	(
    4054:	92 30       	cpi	r25, 0x02	; 2
    4056:	29 f4       	brne	.+10     	; 0x4062 <main+0xac8>
						((Config.Servo_rate == FAST) && (Config.Channel[i].Motor_marker == ASERVO) && ServoTick) ||					// At ServoTick for A.Servo in FAST mode
    4058:	40 81       	ld	r20, Z
    405a:	44 23       	and	r20, r20
    405c:	09 f4       	brne	.+2      	; 0x4060 <main+0xac6>
    405e:	aa c0       	rjmp	.+340    	; 0x41b4 <main+0xc1a>
    4060:	0b c0       	rjmp	.+22     	; 0x4078 <main+0xade>
    4062:	91 30       	cpi	r25, 0x01	; 1
    4064:	39 f4       	brne	.+14     	; 0x4074 <main+0xada>
						((Config.Servo_rate == SYNC) && (Config.Channel[i].Motor_marker == ASERVO) && (!SlowRC) && ServoTick) ||	// At ServoTick for A.Servo in SYNC with Fast RC
    4066:	40 81       	ld	r20, Z
    4068:	41 11       	cpse	r20, r1
    406a:	06 c0       	rjmp	.+12     	; 0x4078 <main+0xade>
    406c:	48 85       	ldd	r20, Y+8	; 0x08
    406e:	41 11       	cpse	r20, r1
    4070:	0f c0       	rjmp	.+30     	; 0x4090 <main+0xaf6>
    4072:	a0 c0       	rjmp	.+320    	; 0x41b4 <main+0xc1a>
						((Config.Servo_rate == SYNC) && (Config.Channel[i].Motor_marker == ASERVO) && (SlowRC)) ||					// At RC rate for A.Servo with slow RC
    4074:	19 16       	cp	r1, r25
    4076:	24 f4       	brge	.+8      	; 0x4080 <main+0xae6>
						((Config.Servo_rate >= SYNC) && (Config.Channel[i].Motor_marker > ASERVO)) ||								// Always for D.Servo and Motor in SYNC or FAST modes
    4078:	40 81       	ld	r20, Z
    407a:	14 16       	cp	r1, r20
    407c:	4c f0       	brlt	.+18     	; 0x4090 <main+0xaf6>
    407e:	10 c0       	rjmp	.+32     	; 0x40a0 <main+0xb06>
    4080:	91 11       	cpse	r25, r1
    4082:	0e c0       	rjmp	.+28     	; 0x40a0 <main+0xb06>
						((Config.Servo_rate == LOW) && (!SlowRC) && ServoTick) ||													// All outputs at ServoTick in LOW mode with fast RC
    4084:	48 85       	ldd	r20, Y+8	; 0x08
    4086:	41 11       	cpse	r20, r1
    4088:	03 c0       	rjmp	.+6      	; 0x4090 <main+0xaf6>
    408a:	4b 85       	ldd	r20, Y+11	; 0x0b
    408c:	44 23       	and	r20, r20
    408e:	41 f0       	breq	.+16     	; 0x40a0 <main+0xb06>
						((Config.Servo_rate == LOW) && (SlowRC))																	// All outputs at  RC rate in LOW mode with slow RC
					)
				{
					ServoFlag |= (1 << i);
    4090:	41 e0       	ldi	r20, 0x01	; 1
    4092:	50 e0       	ldi	r21, 0x00	; 0
    4094:	02 2e       	mov	r0, r18
    4096:	01 c0       	rjmp	.+2      	; 0x409a <main+0xb00>
    4098:	44 0f       	add	r20, r20
    409a:	0a 94       	dec	r0
    409c:	ea f7       	brpl	.-6      	; 0x4098 <main+0xafe>
    409e:	84 2b       	or	r24, r20
    40a0:	2f 5f       	subi	r18, 0xFF	; 255
    40a2:	3f 4f       	sbci	r19, 0xFF	; 255
    40a4:	b6 96       	adiw	r30, 0x26	; 38
			// D.Servo, Motor are always ready, but A.Servo must be limited to Servo_rate, flagged by ServoTick

			ServoFlag = 0;
				
			// For each output, mark the ones that are to fire this time
			for (i = 0; i < MAX_OUTPUTS; i++)
    40a6:	28 30       	cpi	r18, 0x08	; 8
    40a8:	31 05       	cpc	r19, r1
    40aa:	a1 f6       	brne	.-88     	; 0x4054 <main+0xaba>
					ServoFlag |= (1 << i);
				}
			}
								
			// Reset slow PWM flag if it was just set. It will automatically set again at around 19531/SERVO_RATE_LOW (Hz)
			if (ServoTick)
    40ac:	2b 85       	ldd	r18, Y+11	; 0x0b
    40ae:	22 23       	and	r18, r18
    40b0:	11 f0       	breq	.+4      	; 0x40b6 <main+0xb1c>
			{
				ServoTick = false;
				
				// Reset the Servo rate counter here so that it doesn't force an unusually small gap next time
				Servo_Rate = 0;
    40b2:	19 8a       	std	Y+17, r1	; 0x11
    40b4:	18 8a       	std	Y+16, r1	; 0x10
			}

			// Block PWM generation after last PWM pulse
			if ((PWM_pulses == 1) && (Config.Servo_rate == FAST))
    40b6:	4a a5       	ldd	r20, Y+42	; 0x2a
    40b8:	5b a5       	ldd	r21, Y+43	; 0x2b
    40ba:	41 30       	cpi	r20, 0x01	; 1
    40bc:	51 05       	cpc	r21, r1
    40be:	d1 f4       	brne	.+52     	; 0x40f4 <main+0xb5a>
    40c0:	92 30       	cpi	r25, 0x02	; 2
    40c2:	c1 f4       	brne	.+48     	; 0x40f4 <main+0xb5a>
				
				// Refresh PWM_interval with the actual interval when generating PWM
				// if it lies within believable ranges of 120Hz to 250Hz
				// This is located here to make sure the interval measured
				// is during PWM generation cycles
				if ((interval < PWM_PERIOD_WORST) && (interval > PWM_PERIOD_BEST))
    40c4:	b3 01       	movw	r22, r6
    40c6:	a2 01       	movw	r20, r4
    40c8:	4e 58       	subi	r20, 0x8E	; 142
    40ca:	50 42       	sbci	r21, 0x20	; 32
    40cc:	61 09       	sbc	r22, r1
    40ce:	71 09       	sbc	r23, r1
    40d0:	43 3d       	cpi	r20, 0xD3	; 211
    40d2:	50 43       	sbci	r21, 0x30	; 48
    40d4:	61 05       	cpc	r22, r1
    40d6:	71 05       	cpc	r23, r1
    40d8:	48 f0       	brcs	.+18     	; 0x40ec <main+0xb52>
				{
					PWM_interval = interval;
				}
				else
				{
					PWM_interval = PWM_PERIOD_WORST; // 120Hz
    40da:	91 e6       	ldi	r25, 0x61	; 97
    40dc:	c9 2e       	mov	r12, r25
    40de:	91 e5       	ldi	r25, 0x51	; 81
    40e0:	d9 2e       	mov	r13, r25
    40e2:	e1 2c       	mov	r14, r1
    40e4:	f1 2c       	mov	r15, r1
			}

			// Block PWM generation after last PWM pulse
			if ((PWM_pulses == 1) && (Config.Servo_rate == FAST))
			{
				PWMBlocked = true;					// Block PWM generation on notification of last call
    40e6:	21 e0       	ldi	r18, 0x01	; 1
    40e8:	2d 87       	std	Y+13, r18	; 0x0d
    40ea:	04 c0       	rjmp	.+8      	; 0x40f4 <main+0xb5a>
    40ec:	73 01       	movw	r14, r6
    40ee:	62 01       	movw	r12, r4
    40f0:	31 e0       	ldi	r19, 0x01	; 1
    40f2:	3d 87       	std	Y+13, r19	; 0x0d
				}	
			
				
			}
			
			Calculate_PID();					// Calculate PID values
    40f4:	89 a7       	std	Y+41, r24	; 0x29
    40f6:	0e 94 98 41 	call	0x8330	; 0x8330 <Calculate_PID>
			ProcessMixer();						// Do all the mixer tasks - can be very slow
    40fa:	0e 94 0e 39 	call	0x721c	; 0x721c <ProcessMixer>
			UpdateServos();						// Transfer Config.Channel[i].value data to ServoOut[i] and check servo limits
    40fe:	0e 94 ae 38 	call	0x715c	; 0x715c <UpdateServos>
			
			// If, for some reason, a higher power has banned PWM output for this cycle, 
			// just fake a PWM interval. The PWM interval is currently 2.3ms, and doesn't vary.
			// This keeps the cycle time more constant.
			if (PWMOverride)
    4102:	89 a5       	ldd	r24, Y+41	; 0x29
    4104:	49 81       	ldd	r20, Y+1	; 0x01
    4106:	44 23       	and	r20, r20
    4108:	39 f0       	breq	.+14     	; 0x4118 <main+0xb7e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    410a:	8b ee       	ldi	r24, 0xEB	; 235
    410c:	9c e2       	ldi	r25, 0x2C	; 44
    410e:	01 97       	sbiw	r24, 0x01	; 1
    4110:	f1 f7       	brne	.-4      	; 0x410e <main+0xb74>
    4112:	00 c0       	rjmp	.+0      	; 0x4114 <main+0xb7a>
    4114:	00 00       	nop
    4116:	02 c0       	rjmp	.+4      	; 0x411c <main+0xb82>
				_delay_us(2300);
			}
			// Otherwise just output PWM normally
			else
			{
				output_servo_ppm(ServoFlag);		// Output servo signal			
    4118:	0e 94 31 45 	call	0x8a62	; 0x8a62 <output_servo_ppm>
			}


			// Decrement PWM pulse sum
			if ((Config.Servo_rate == FAST) && (PWM_pulses > 0))
    411c:	80 91 d3 05 	lds	r24, 0x05D3
    4120:	82 30       	cpi	r24, 0x02	; 2
    4122:	49 f4       	brne	.+18     	; 0x4136 <main+0xb9c>
    4124:	2a a5       	ldd	r18, Y+42	; 0x2a
    4126:	3b a5       	ldd	r19, Y+43	; 0x2b
    4128:	12 16       	cp	r1, r18
    412a:	13 06       	cpc	r1, r19
    412c:	24 f4       	brge	.+8      	; 0x4136 <main+0xb9c>
			{
				PWM_pulses--;
    412e:	21 50       	subi	r18, 0x01	; 1
    4130:	31 09       	sbc	r19, r1
    4132:	3b a7       	std	Y+43, r19	; 0x2b
    4134:	2a a7       	std	Y+42, r18	; 0x2a
			}
			
			LoopCount = 0;						// Reset loop counter for averaging accVert
    4136:	10 92 16 05 	sts	0x0516, r1
    413a:	1b 86       	std	Y+11, r1	; 0x0b
    413c:	06 c0       	rjmp	.+12     	; 0x414a <main+0xbb0>
    413e:	87 ec       	ldi	r24, 0xC7	; 199
    4140:	92 e3       	ldi	r25, 0x32	; 50
    4142:	01 97       	sbiw	r24, 0x01	; 1
    4144:	f1 f7       	brne	.-4      	; 0x4142 <main+0xba8>
    4146:	00 c0       	rjmp	.+0      	; 0x4148 <main+0xbae>
    4148:	00 00       	nop
		//************************************************************
		//* Enable RC interrupts when ready (RC rate measured and RC interrupts OFF)
		//* and just one PWM remains
		//************************************************************

		if ((PWM_pulses < 1) && RCrateMeasured && !RCInterruptsON && (Config.Servo_rate == FAST))
    414a:	2a a5       	ldd	r18, Y+42	; 0x2a
    414c:	3b a5       	ldd	r19, Y+43	; 0x2b
    414e:	12 16       	cp	r1, r18
    4150:	13 06       	cpc	r1, r19
    4152:	74 f0       	brlt	.+28     	; 0x4170 <main+0xbd6>
    4154:	3b 81       	ldd	r19, Y+3	; 0x03
    4156:	33 23       	and	r19, r19
    4158:	59 f0       	breq	.+22     	; 0x4170 <main+0xbd6>
    415a:	4b 8d       	ldd	r20, Y+27	; 0x1b
    415c:	41 11       	cpse	r20, r1
    415e:	08 c0       	rjmp	.+16     	; 0x4170 <main+0xbd6>
    4160:	80 91 d3 05 	lds	r24, 0x05D3
    4164:	82 30       	cpi	r24, 0x02	; 2
    4166:	21 f4       	brne	.+8      	; 0x4170 <main+0xbd6>
		{
			init_int();					// Re-enable interrupts
    4168:	0e 94 1c 2f 	call	0x5e38	; 0x5e38 <init_int>
			RCInterruptsON = true;
    416c:	21 e0       	ldi	r18, 0x01	; 1
    416e:	2b 8f       	std	Y+27, r18	; 0x1b
		//* Carefully update idle screen if error level changed
		//************************************************************	

		// Only update idle when error state has changed.
		// This prevents the continual updating of the LCD disrupting the FC
		if ((old_alarms != General_error) && (Menu_mode == IDLE))
    4170:	80 91 1e 05 	lds	r24, 0x051E
    4174:	38 a5       	ldd	r19, Y+40	; 0x28
    4176:	38 17       	cp	r19, r24
    4178:	19 f0       	breq	.+6      	; 0x4180 <main+0xbe6>
    417a:	11 11       	cpse	r17, r1
    417c:	01 c0       	rjmp	.+2      	; 0x4180 <main+0xbe6>
		{
			// Force safe update of idle screen
			Menu_mode = PRESTATUS_TIMEOUT;
    417e:	17 e0       	ldi	r17, 0x07	; 7
		}
			
		// Save current alarm state into old_alarms
		old_alarms = General_error;
    4180:	40 91 1e 05 	lds	r20, 0x051E
    4184:	48 a7       	std	Y+40, r20	; 0x28
		//************************************************************
		//* Transition state handling
		//************************************************************

		// Update timed transition when changing flight modes
		if (Config.FlightSel != old_flight)
    4186:	70 2e       	mov	r7, r16
		}
			
		// Save current alarm state into old_alarms
		old_alarms = General_error;
		
	} // while loop
    4188:	4c 88       	ldd	r4, Y+20	; 0x14
    418a:	5d 88       	ldd	r5, Y+21	; 0x15
    418c:	4c ca       	rjmp	.-2920   	; 0x3626 <main+0x8c>
			// Trim lower end to zero (0 to 2250)
			if (temp1 < 0) temp1 = 0;

			// Convert 0 to 2250 to 0 to 125. Divide by 20
			// Round to avoid truncation errors
			transition = (temp1 + 10) / 20;
    418e:	70 93 20 05 	sts	0x0520, r23
    4192:	60 93 1f 05 	sts	0x051F, r22

		// Always in the TRANSITIONING state when Config.TransitionSpeed is 0
		// This prevents state changes when controlled by a channel
		if (Config.TransitionSpeed == 0)
		{
			Transition_state = TRANSITIONING;
    4196:	85 e0       	ldi	r24, 0x05	; 5
    4198:	80 93 21 05 	sts	0x0521, r24
    419c:	54 cc       	rjmp	.-1880   	; 0x3a46 <main+0x4ac>
			
			// Rate not measured or re-calibrating or not FAST mode
			// In all these other modes, just output one pulse
			else
			{
				PWM_pulses = 1;
    419e:	21 e0       	ldi	r18, 0x01	; 1
    41a0:	30 e0       	ldi	r19, 0x00	; 0
    41a2:	3b a7       	std	Y+43, r19	; 0x2b
    41a4:	2a a7       	std	Y+42, r18	; 0x2a
    41a6:	07 cf       	rjmp	.-498    	; 0x3fb6 <main+0xa1c>
						PWM_pulses += 1;		// Nine pulses will fit if interval faster than 230Hz
					}
				
					if (PWM_interval < 9800)	// 9800 = 3.92ms
					{
						PWM_pulses += 1;		// Ten pulses will fit if interval faster than 255Hz
    41a8:	31 e0       	ldi	r19, 0x01	; 1
    41aa:	3b 83       	std	Y+3, r19	; 0x03
    41ac:	04 cf       	rjmp	.-504    	; 0x3fb6 <main+0xa1c>
						PWM_pulses = 2; // Debug						
					}
					else
					{
						//PWM_pulses = 2;		// Two pulses will fit if interval faster than 101Hz
						PWM_pulses = 1; // Debug						
    41ae:	41 e0       	ldi	r20, 0x01	; 1
    41b0:	4b 83       	std	Y+3, r20	; 0x03
    41b2:	01 cf       	rjmp	.-510    	; 0x3fb6 <main+0xa1c>
			// For each output, mark the ones that are to fire this time
			for (i = 0; i < MAX_OUTPUTS; i++)
			{
				// Mark bits depending on the selected output type
				if	(
						((Config.Servo_rate == FAST) && (Config.Channel[i].Motor_marker == ASERVO) && ServoTick) ||					// At ServoTick for A.Servo in FAST mode
    41b4:	4b 85       	ldd	r20, Y+11	; 0x0b
    41b6:	41 11       	cpse	r20, r1
    41b8:	6b cf       	rjmp	.-298    	; 0x4090 <main+0xaf6>
    41ba:	5e cf       	rjmp	.-324    	; 0x4078 <main+0xade>

000041bc <spiwrite>:
const uint8_t pagemap[] PROGMEM 		= { 7, 6, 5, 4, 3, 2, 1, 0 }; 
const uint8_t lcd_commmands[] PROGMEM	= {0xAF,0x40,0xA0,0xA6,0xA4,0xA2,0xEE,0xC8,0x2F,0x24,0xAC,0x00,0xF8,0x00};	// LCD command string 14

// Software SPI write
inline void spiwrite(uint8_t c) 
{
    41bc:	0f 93       	push	r16
    41be:	1f 93       	push	r17
    41c0:	cf 93       	push	r28
    41c2:	df 93       	push	r29
    41c4:	c7 e0       	ldi	r28, 0x07	; 7
    41c6:	d0 e0       	ldi	r29, 0x00	; 0
	int8_t i;
	for (i = 7; i >= 0; i--) 
	{
		LCD_SCL = 0;
		if (c & (1 << (i)))		// Bit set?
    41c8:	08 2f       	mov	r16, r24
    41ca:	10 e0       	ldi	r17, 0x00	; 0
inline void spiwrite(uint8_t c) 
{
	int8_t i;
	for (i = 7; i >= 0; i--) 
	{
		LCD_SCL = 0;
    41cc:	5c 98       	cbi	0x0b, 4	; 11
		if (c & (1 << (i)))		// Bit set?
    41ce:	c8 01       	movw	r24, r16
    41d0:	0c 2e       	mov	r0, r28
    41d2:	02 c0       	rjmp	.+4      	; 0x41d8 <spiwrite+0x1c>
    41d4:	95 95       	asr	r25
    41d6:	87 95       	ror	r24
    41d8:	0a 94       	dec	r0
    41da:	e2 f7       	brpl	.-8      	; 0x41d4 <spiwrite+0x18>
    41dc:	80 ff       	sbrs	r24, 0
    41de:	02 c0       	rjmp	.+4      	; 0x41e4 <spiwrite+0x28>
		{
			LCD_SI = 1;
    41e0:	59 9a       	sbi	0x0b, 1	; 11
    41e2:	01 c0       	rjmp	.+2      	; 0x41e6 <spiwrite+0x2a>
		}
		else					// Bit clear?
		{
			LCD_SI = 0;
    41e4:	59 98       	cbi	0x0b, 1	; 11
		}
		
		LCD_SCL = 1;
    41e6:	5c 9a       	sbi	0x0b, 4	; 11

		glcd_delay();			// 250ns
    41e8:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <glcd_delay>
    41ec:	21 97       	sbiw	r28, 0x01	; 1
    41ee:	70 f7       	brcc	.-36     	; 0x41cc <spiwrite+0x10>
	}
}
    41f0:	df 91       	pop	r29
    41f2:	cf 91       	pop	r28
    41f4:	1f 91       	pop	r17
    41f6:	0f 91       	pop	r16
    41f8:	08 95       	ret

000041fa <st7565_command>:

// Send command to LCD
void st7565_command(uint8_t c) 
{
	LCD_A0 = 0;
    41fa:	5f 98       	cbi	0x0b, 7	; 11
	spiwrite(c);
    41fc:	0c 94 de 20 	jmp	0x41bc	; 0x41bc <spiwrite>

00004200 <st7565_data>:
}

// Send data to LCD
void st7565_data(uint8_t c) 
{
	LCD_A0 = 1;
    4200:	5f 9a       	sbi	0x0b, 7	; 11
	spiwrite(c);
    4202:	0c 94 de 20 	jmp	0x41bc	; 0x41bc <spiwrite>

00004206 <st7565_set_brightness>:
}


// Set LCD brightness
void st7565_set_brightness(uint8_t val) 
{
    4206:	cf 93       	push	r28
    4208:	c8 2f       	mov	r28, r24
	st7565_command(CMD_SET_VOLUME_FIRST);					// 0x81
    420a:	81 e8       	ldi	r24, 0x81	; 129
    420c:	0e 94 fd 20 	call	0x41fa	; 0x41fa <st7565_command>
	st7565_command(val);
    4210:	8c 2f       	mov	r24, r28
}
    4212:	cf 91       	pop	r28

// Set LCD brightness
void st7565_set_brightness(uint8_t val) 
{
	st7565_command(CMD_SET_VOLUME_FIRST);					// 0x81
	st7565_command(val);
    4214:	0c 94 fd 20 	jmp	0x41fa	; 0x41fa <st7565_command>

00004218 <st7565_init>:
	spiwrite(c);
}

// Initialise LCD
void st7565_init(void) 
{
    4218:	cf 93       	push	r28
    421a:	df 93       	push	r29
	// Toggle RST low to reset and CS low so it'll listen to us
	LCD_CSI = 0;
    421c:	5d 98       	cbi	0x0b, 5	; 11
	LCD_RES = 0;
    421e:	5e 98       	cbi	0x0b, 6	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    4220:	87 e8       	ldi	r24, 0x87	; 135
    4222:	93 e1       	ldi	r25, 0x13	; 19
    4224:	01 97       	sbiw	r24, 0x01	; 1
    4226:	f1 f7       	brne	.-4      	; 0x4224 <st7565_init+0xc>
    4228:	00 c0       	rjmp	.+0      	; 0x422a <st7565_init+0x12>
    422a:	00 00       	nop
	_delay_ms(1); // Datasheet says 1us for 3.3V operation
	LCD_RES = 1;
    422c:	5e 9a       	sbi	0x0b, 6	; 11
    422e:	c0 ef       	ldi	r28, 0xF0	; 240
    4230:	dd e0       	ldi	r29, 0x0D	; 13

	// Send command sequence
	for (int i = 0; i < 14; i++)
	{
		st7565_command((uint8_t)pgm_read_byte(&lcd_commmands[i]));
    4232:	fe 01       	movw	r30, r28
    4234:	84 91       	lpm	r24, Z
    4236:	0e 94 fd 20 	call	0x41fa	; 0x41fa <st7565_command>
    423a:	21 96       	adiw	r28, 0x01	; 1
	LCD_RES = 0;
	_delay_ms(1); // Datasheet says 1us for 3.3V operation
	LCD_RES = 1;

	// Send command sequence
	for (int i = 0; i < 14; i++)
    423c:	fd e0       	ldi	r31, 0x0D	; 13
    423e:	ce 3f       	cpi	r28, 0xFE	; 254
    4240:	df 07       	cpc	r29, r31
    4242:	b9 f7       	brne	.-18     	; 0x4232 <st7565_init+0x1a>
	{
		st7565_command((uint8_t)pgm_read_byte(&lcd_commmands[i]));
	}

	st7565_set_brightness(Config.Contrast);	
    4244:	80 91 32 06 	lds	r24, 0x0632
    4248:	0e 94 03 21 	call	0x4206	; 0x4206 <st7565_set_brightness>
	st7565_command(CMD_SET_COM_REVERSE); 		// For logo	0xC8
    424c:	88 ec       	ldi	r24, 0xC8	; 200
}
    424e:	df 91       	pop	r29
    4250:	cf 91       	pop	r28
	{
		st7565_command((uint8_t)pgm_read_byte(&lcd_commmands[i]));
	}

	st7565_set_brightness(Config.Contrast);	
	st7565_command(CMD_SET_COM_REVERSE); 		// For logo	0xC8
    4252:	0c 94 fd 20 	jmp	0x41fa	; 0x41fa <st7565_command>

00004256 <write_buffer>:
	st7565_command(val);
}

// Write LCD buffer
void write_buffer(uint8_t *buffer) 
{
    4256:	df 92       	push	r13
    4258:	ef 92       	push	r14
    425a:	ff 92       	push	r15
    425c:	0f 93       	push	r16
    425e:	1f 93       	push	r17
    4260:	cf 93       	push	r28
    4262:	df 93       	push	r29
    4264:	ce ef       	ldi	r28, 0xFE	; 254
    4266:	dd e0       	ldi	r29, 0x0D	; 13
    4268:	8c 01       	movw	r16, r24
	uint8_t c, p;
	for(p = 0; p < 8; p++) 
	{
		st7565_command(CMD_SET_PAGE | (uint8_t)pgm_read_byte(&pagemap[p]));		// Page 7 to 0
    426a:	fe 01       	movw	r30, r28
    426c:	84 91       	lpm	r24, Z
    426e:	80 6b       	ori	r24, 0xB0	; 176
    4270:	0e 94 fd 20 	call	0x41fa	; 0x41fa <st7565_command>
		st7565_command(CMD_SET_COLUMN_LOWER | (0x0 & 0xf));						// Column 0
    4274:	80 e0       	ldi	r24, 0x00	; 0
    4276:	0e 94 fd 20 	call	0x41fa	; 0x41fa <st7565_command>
		st7565_command(CMD_SET_COLUMN_UPPER | ((0x0 >> 4) & 0xf));				// Column 0
    427a:	80 e1       	ldi	r24, 0x10	; 16
    427c:	0e 94 fd 20 	call	0x41fa	; 0x41fa <st7565_command>
		st7565_command(CMD_RMW);												// Sets auto-increment
    4280:	80 ee       	ldi	r24, 0xE0	; 224
    4282:	0e 94 fd 20 	call	0x41fa	; 0x41fa <st7565_command>
    4286:	78 01       	movw	r14, r16

		for(c = 0; c < 128; c++) 
    4288:	d1 2c       	mov	r13, r1
		{
			st7565_data(buffer[(128*p)+c]);
    428a:	f7 01       	movw	r30, r14
    428c:	81 91       	ld	r24, Z+
    428e:	7f 01       	movw	r14, r30
    4290:	0e 94 00 21 	call	0x4200	; 0x4200 <st7565_data>
		st7565_command(CMD_SET_PAGE | (uint8_t)pgm_read_byte(&pagemap[p]));		// Page 7 to 0
		st7565_command(CMD_SET_COLUMN_LOWER | (0x0 & 0xf));						// Column 0
		st7565_command(CMD_SET_COLUMN_UPPER | ((0x0 >> 4) & 0xf));				// Column 0
		st7565_command(CMD_RMW);												// Sets auto-increment

		for(c = 0; c < 128; c++) 
    4294:	d3 94       	inc	r13
    4296:	f0 e8       	ldi	r31, 0x80	; 128
    4298:	df 12       	cpse	r13, r31
    429a:	f7 cf       	rjmp	.-18     	; 0x428a <write_buffer+0x34>
    429c:	21 96       	adiw	r28, 0x01	; 1
    429e:	00 58       	subi	r16, 0x80	; 128
    42a0:	1f 4f       	sbci	r17, 0xFF	; 255

// Write LCD buffer
void write_buffer(uint8_t *buffer) 
{
	uint8_t c, p;
	for(p = 0; p < 8; p++) 
    42a2:	8e e0       	ldi	r24, 0x0E	; 14
    42a4:	c6 30       	cpi	r28, 0x06	; 6
    42a6:	d8 07       	cpc	r29, r24
    42a8:	01 f7       	brne	.-64     	; 0x426a <write_buffer+0x14>
		for(c = 0; c < 128; c++) 
		{
			st7565_data(buffer[(128*p)+c]);
		}
	}
}
    42aa:	df 91       	pop	r29
    42ac:	cf 91       	pop	r28
    42ae:	1f 91       	pop	r17
    42b0:	0f 91       	pop	r16
    42b2:	ff 90       	pop	r15
    42b4:	ef 90       	pop	r14
    42b6:	df 90       	pop	r13
    42b8:	08 95       	ret

000042ba <clear_buffer>:

// Clear buffer
void clear_buffer(uint8_t *buff) 
{
	memset(buff, 0, 1024);
    42ba:	20 e0       	ldi	r18, 0x00	; 0
    42bc:	34 e0       	ldi	r19, 0x04	; 4
    42be:	fc 01       	movw	r30, r24
    42c0:	a9 01       	movw	r20, r18
    42c2:	11 92       	st	Z+, r1
    42c4:	41 50       	subi	r20, 0x01	; 1
    42c6:	50 40       	sbci	r21, 0x00	; 0
    42c8:	e1 f7       	brne	.-8      	; 0x42c2 <clear_buffer+0x8>
    42ca:	08 95       	ret

000042cc <clear_screen>:
}

// Clear screen (does not clear buffer)
void clear_screen(void)
{
    42cc:	cf 93       	push	r28
    42ce:	df 93       	push	r29
	uint8_t p, c;

	for(p = 0; p < 8; p++)
    42d0:	d0 e0       	ldi	r29, 0x00	; 0
	{
		st7565_command(CMD_SET_PAGE | p);								// Set page to p
    42d2:	8d 2f       	mov	r24, r29
    42d4:	80 6b       	ori	r24, 0xB0	; 176
    42d6:	0e 94 fd 20 	call	0x41fa	; 0x41fa <st7565_command>
		for(c = 0; c < 128; c++) 										// Was 129, which I think is wrong...
    42da:	c0 e0       	ldi	r28, 0x00	; 0
		{
			st7565_command(CMD_SET_COLUMN_LOWER | (c & 0xf));
    42dc:	8c 2f       	mov	r24, r28
    42de:	8f 70       	andi	r24, 0x0F	; 15
    42e0:	0e 94 fd 20 	call	0x41fa	; 0x41fa <st7565_command>
			st7565_command(CMD_SET_COLUMN_UPPER | ((c >> 4) & 0xf));	// Set column to c
    42e4:	8c 2f       	mov	r24, r28
    42e6:	82 95       	swap	r24
    42e8:	8f 70       	andi	r24, 0x0F	; 15
    42ea:	80 61       	ori	r24, 0x10	; 16
    42ec:	0e 94 fd 20 	call	0x41fa	; 0x41fa <st7565_command>
			st7565_data(0x00);											// Clear data
    42f0:	80 e0       	ldi	r24, 0x00	; 0
    42f2:	0e 94 00 21 	call	0x4200	; 0x4200 <st7565_data>
	uint8_t p, c;

	for(p = 0; p < 8; p++)
	{
		st7565_command(CMD_SET_PAGE | p);								// Set page to p
		for(c = 0; c < 128; c++) 										// Was 129, which I think is wrong...
    42f6:	cf 5f       	subi	r28, 0xFF	; 255
    42f8:	c0 38       	cpi	r28, 0x80	; 128
    42fa:	81 f7       	brne	.-32     	; 0x42dc <clear_screen+0x10>
// Clear screen (does not clear buffer)
void clear_screen(void)
{
	uint8_t p, c;

	for(p = 0; p < 8; p++)
    42fc:	df 5f       	subi	r29, 0xFF	; 255
    42fe:	d8 30       	cpi	r29, 0x08	; 8
    4300:	41 f7       	brne	.-48     	; 0x42d2 <clear_screen+0x6>
			st7565_command(CMD_SET_COLUMN_LOWER | (c & 0xf));
			st7565_command(CMD_SET_COLUMN_UPPER | ((c >> 4) & 0xf));	// Set column to c
			st7565_data(0x00);											// Clear data
		}
	}
}
    4302:	df 91       	pop	r29
    4304:	cf 91       	pop	r28
    4306:	08 95       	ret

00004308 <setpixel>:
//***********************************************************

// Set a single pixel
void setpixel(uint8_t *buff, uint8_t x, uint8_t y, uint8_t color) 
{
	if ((x >= LCDWIDTH) || (y >= LCDHEIGHT))
    4308:	67 fd       	sbrc	r22, 7
    430a:	36 c0       	rjmp	.+108    	; 0x4378 <setpixel+0x70>
    430c:	40 34       	cpi	r20, 0x40	; 64
    430e:	a0 f5       	brcc	.+104    	; 0x4378 <setpixel+0x70>
    4310:	34 2f       	mov	r19, r20
    4312:	36 95       	lsr	r19
    4314:	36 95       	lsr	r19
    4316:	36 95       	lsr	r19
    4318:	e6 2f       	mov	r30, r22
    431a:	f0 e0       	ldi	r31, 0x00	; 0
    431c:	50 e0       	ldi	r21, 0x00	; 0
	{
		return;
	}
	// x is which column
	if (color)
    431e:	22 23       	and	r18, r18
    4320:	a9 f0       	breq	.+42     	; 0x434c <setpixel+0x44>
	{
		buff[x+ (y/8)*128] |= (1 << (7-(y%8)));  
    4322:	20 e8       	ldi	r18, 0x80	; 128
    4324:	32 9f       	mul	r19, r18
    4326:	e0 0d       	add	r30, r0
    4328:	f1 1d       	adc	r31, r1
    432a:	11 24       	eor	r1, r1
    432c:	e8 0f       	add	r30, r24
    432e:	f9 1f       	adc	r31, r25
    4330:	40 95       	com	r20
    4332:	50 95       	com	r21
    4334:	47 70       	andi	r20, 0x07	; 7
    4336:	55 27       	eor	r21, r21
    4338:	81 e0       	ldi	r24, 0x01	; 1
    433a:	90 e0       	ldi	r25, 0x00	; 0
    433c:	04 2e       	mov	r0, r20
    433e:	01 c0       	rjmp	.+2      	; 0x4342 <setpixel+0x3a>
    4340:	88 0f       	add	r24, r24
    4342:	0a 94       	dec	r0
    4344:	ea f7       	brpl	.-6      	; 0x4340 <setpixel+0x38>
    4346:	90 81       	ld	r25, Z
    4348:	98 2b       	or	r25, r24
    434a:	15 c0       	rjmp	.+42     	; 0x4376 <setpixel+0x6e>
	}
	else
	{
		buff[x+ (y/8)*128] &= ~(1 << (7-(y%8))); 
    434c:	20 e8       	ldi	r18, 0x80	; 128
    434e:	32 9f       	mul	r19, r18
    4350:	e0 0d       	add	r30, r0
    4352:	f1 1d       	adc	r31, r1
    4354:	11 24       	eor	r1, r1
    4356:	e8 0f       	add	r30, r24
    4358:	f9 1f       	adc	r31, r25
    435a:	40 95       	com	r20
    435c:	50 95       	com	r21
    435e:	47 70       	andi	r20, 0x07	; 7
    4360:	55 27       	eor	r21, r21
    4362:	81 e0       	ldi	r24, 0x01	; 1
    4364:	90 e0       	ldi	r25, 0x00	; 0
    4366:	04 2e       	mov	r0, r20
    4368:	01 c0       	rjmp	.+2      	; 0x436c <setpixel+0x64>
    436a:	88 0f       	add	r24, r24
    436c:	0a 94       	dec	r0
    436e:	ea f7       	brpl	.-6      	; 0x436a <setpixel+0x62>
    4370:	80 95       	com	r24
    4372:	90 81       	ld	r25, Z
    4374:	98 23       	and	r25, r24
    4376:	90 83       	st	Z, r25
    4378:	08 95       	ret

0000437a <drawline>:
	}
}

// Bresenham's algorithm - From wikipedia
void drawline(uint8_t *buff, uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1, uint8_t color) 
{
    437a:	9f 92       	push	r9
    437c:	af 92       	push	r10
    437e:	bf 92       	push	r11
    4380:	cf 92       	push	r12
    4382:	df 92       	push	r13
    4384:	ef 92       	push	r14
    4386:	ff 92       	push	r15
    4388:	0f 93       	push	r16
    438a:	1f 93       	push	r17
    438c:	cf 93       	push	r28
    438e:	df 93       	push	r29
    4390:	ec 01       	movw	r28, r24
    4392:	16 2f       	mov	r17, r22
    4394:	f4 2e       	mov	r15, r20
    4396:	d2 2e       	mov	r13, r18
	uint8_t steep = abs(y1 - y0) > abs(x1 - x0);
    4398:	a0 2f       	mov	r26, r16
    439a:	b0 e0       	ldi	r27, 0x00	; 0
    439c:	a4 1b       	sub	r26, r20
    439e:	b1 09       	sbc	r27, r1
    43a0:	b7 ff       	sbrs	r27, 7
    43a2:	03 c0       	rjmp	.+6      	; 0x43aa <drawline+0x30>
    43a4:	b1 95       	neg	r27
    43a6:	a1 95       	neg	r26
    43a8:	b1 09       	sbc	r27, r1
    43aa:	ed 2d       	mov	r30, r13
    43ac:	f0 e0       	ldi	r31, 0x00	; 0
    43ae:	e1 1b       	sub	r30, r17
    43b0:	f1 09       	sbc	r31, r1
    43b2:	f7 ff       	sbrs	r31, 7
    43b4:	03 c0       	rjmp	.+6      	; 0x43bc <drawline+0x42>
    43b6:	f1 95       	neg	r31
    43b8:	e1 95       	neg	r30
    43ba:	f1 09       	sbc	r31, r1
    43bc:	bb 24       	eor	r11, r11
    43be:	b3 94       	inc	r11
    43c0:	ea 17       	cp	r30, r26
    43c2:	fb 07       	cpc	r31, r27
    43c4:	14 f0       	brlt	.+4      	; 0x43ca <drawline+0x50>
    43c6:	b1 2c       	mov	r11, r1
    43c8:	06 c0       	rjmp	.+12     	; 0x43d6 <drawline+0x5c>
    43ca:	8d 2d       	mov	r24, r13
	if (steep) 
	{
		swap(x0, y0);
		swap(x1, y1);
    43cc:	d0 2e       	mov	r13, r16
    43ce:	08 2f       	mov	r16, r24
    43d0:	81 2f       	mov	r24, r17
void drawline(uint8_t *buff, uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1, uint8_t color) 
{
	uint8_t steep = abs(y1 - y0) > abs(x1 - x0);
	if (steep) 
	{
		swap(x0, y0);
    43d2:	1f 2d       	mov	r17, r15
    43d4:	f8 2e       	mov	r15, r24
		swap(x1, y1);
	}

	if (x0 > x1) 
    43d6:	d1 16       	cp	r13, r17
    43d8:	30 f4       	brcc	.+12     	; 0x43e6 <drawline+0x6c>
    43da:	8f 2d       	mov	r24, r15
	{
		swap(x0, x1);
		swap(y0, y1);
    43dc:	f0 2e       	mov	r15, r16
    43de:	08 2f       	mov	r16, r24
    43e0:	81 2f       	mov	r24, r17
    43e2:	1d 2d       	mov	r17, r13
    43e4:	d8 2e       	mov	r13, r24
	}

	uint8_t dx, dy;
	dx = x1 - x0;
    43e6:	ad 2c       	mov	r10, r13
    43e8:	a1 1a       	sub	r10, r17
	dy = abs(y1 - y0);
    43ea:	e0 2f       	mov	r30, r16
    43ec:	f0 e0       	ldi	r31, 0x00	; 0
    43ee:	ef 19       	sub	r30, r15
    43f0:	f1 09       	sbc	r31, r1
    43f2:	f7 ff       	sbrs	r31, 7
    43f4:	03 c0       	rjmp	.+6      	; 0x43fc <drawline+0x82>
    43f6:	f1 95       	neg	r31
    43f8:	e1 95       	neg	r30
    43fa:	f1 09       	sbc	r31, r1
    43fc:	9e 2e       	mov	r9, r30

	int8_t err = dx / 2;
    43fe:	ca 2c       	mov	r12, r10
    4400:	c6 94       	lsr	r12
	int8_t ystep;

	if (y0 < y1) 
    4402:	f0 16       	cp	r15, r16
    4404:	10 f4       	brcc	.+4      	; 0x440a <drawline+0x90>
	{
		ystep = 1;
    4406:	01 e0       	ldi	r16, 0x01	; 1
    4408:	10 c0       	rjmp	.+32     	; 0x442a <drawline+0xb0>
	} 
	else 
	{
		ystep = -1;
    440a:	0f ef       	ldi	r16, 0xFF	; 255
    440c:	0e c0       	rjmp	.+28     	; 0x442a <drawline+0xb0>

	for (; x0<x1; x0++) 
	{
		if (steep) 
		{
			setpixel(buff, y0, x0, color);
    440e:	2e 2d       	mov	r18, r14
		ystep = -1;
	}

	for (; x0<x1; x0++) 
	{
		if (steep) 
    4410:	bb 20       	and	r11, r11
    4412:	71 f0       	breq	.+28     	; 0x4430 <drawline+0xb6>
		{
			setpixel(buff, y0, x0, color);
    4414:	41 2f       	mov	r20, r17
    4416:	6f 2d       	mov	r22, r15
		} 
		else 
		{
			setpixel(buff, x0, y0, color);
    4418:	ce 01       	movw	r24, r28
    441a:	0e 94 84 21 	call	0x4308	; 0x4308 <setpixel>
		}
		err -= dy;
    441e:	c9 18       	sub	r12, r9
		if (err < 0) 
    4420:	c7 fe       	sbrs	r12, 7
    4422:	02 c0       	rjmp	.+4      	; 0x4428 <drawline+0xae>
		{
			y0 += ystep;
    4424:	f0 0e       	add	r15, r16
			err += dx;
    4426:	ca 0c       	add	r12, r10
	else 
	{
		ystep = -1;
	}

	for (; x0<x1; x0++) 
    4428:	1f 5f       	subi	r17, 0xFF	; 255
    442a:	1d 15       	cp	r17, r13
    442c:	80 f3       	brcs	.-32     	; 0x440e <drawline+0x94>
    442e:	03 c0       	rjmp	.+6      	; 0x4436 <drawline+0xbc>
		{
			setpixel(buff, y0, x0, color);
		} 
		else 
		{
			setpixel(buff, x0, y0, color);
    4430:	4f 2d       	mov	r20, r15
    4432:	61 2f       	mov	r22, r17
    4434:	f1 cf       	rjmp	.-30     	; 0x4418 <drawline+0x9e>
		{
			y0 += ystep;
			err += dx;
		}
	}
}
    4436:	df 91       	pop	r29
    4438:	cf 91       	pop	r28
    443a:	1f 91       	pop	r17
    443c:	0f 91       	pop	r16
    443e:	ff 90       	pop	r15
    4440:	ef 90       	pop	r14
    4442:	df 90       	pop	r13
    4444:	cf 90       	pop	r12
    4446:	bf 90       	pop	r11
    4448:	af 90       	pop	r10
    444a:	9f 90       	pop	r9
    444c:	08 95       	ret

0000444e <drawrect>:
	}
}

// Draw a rectangle
void drawrect(uint8_t *buff, uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color) 
{
    444e:	9f 92       	push	r9
    4450:	af 92       	push	r10
    4452:	bf 92       	push	r11
    4454:	cf 92       	push	r12
    4456:	df 92       	push	r13
    4458:	ef 92       	push	r14
    445a:	ff 92       	push	r15
    445c:	0f 93       	push	r16
    445e:	1f 93       	push	r17
    4460:	cf 93       	push	r28
    4462:	df 93       	push	r29
    4464:	ec 01       	movw	r28, r24
    4466:	f6 2e       	mov	r15, r22
    4468:	b4 2e       	mov	r11, r20
    446a:	92 2e       	mov	r9, r18
	// Stupidest version - just pixels - but fast with internal buffer!
	for (uint8_t i=x; i<x+w; i++) 
    446c:	16 2f       	mov	r17, r22
    446e:	c2 2e       	mov	r12, r18
    4470:	d1 2c       	mov	r13, r1
    4472:	c6 0e       	add	r12, r22
    4474:	d1 1c       	adc	r13, r1
	{
		setpixel(buff, i, y, color);
		setpixel(buff, i, y+h-1, color);
    4476:	aa 24       	eor	r10, r10
    4478:	aa 94       	dec	r10
    447a:	a0 0e       	add	r10, r16
    447c:	a4 0e       	add	r10, r20

// Draw a rectangle
void drawrect(uint8_t *buff, uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color) 
{
	// Stupidest version - just pixels - but fast with internal buffer!
	for (uint8_t i=x; i<x+w; i++) 
    447e:	81 2f       	mov	r24, r17
    4480:	90 e0       	ldi	r25, 0x00	; 0
    4482:	8c 15       	cp	r24, r12
    4484:	9d 05       	cpc	r25, r13
    4486:	74 f4       	brge	.+28     	; 0x44a4 <drawrect+0x56>
	{
		setpixel(buff, i, y, color);
    4488:	2e 2d       	mov	r18, r14
    448a:	4b 2d       	mov	r20, r11
    448c:	61 2f       	mov	r22, r17
    448e:	ce 01       	movw	r24, r28
    4490:	0e 94 84 21 	call	0x4308	; 0x4308 <setpixel>
		setpixel(buff, i, y+h-1, color);
    4494:	2e 2d       	mov	r18, r14
    4496:	4a 2d       	mov	r20, r10
    4498:	61 2f       	mov	r22, r17
    449a:	ce 01       	movw	r24, r28
    449c:	0e 94 84 21 	call	0x4308	; 0x4308 <setpixel>

// Draw a rectangle
void drawrect(uint8_t *buff, uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color) 
{
	// Stupidest version - just pixels - but fast with internal buffer!
	for (uint8_t i=x; i<x+w; i++) 
    44a0:	1f 5f       	subi	r17, 0xFF	; 255
    44a2:	ed cf       	rjmp	.-38     	; 0x447e <drawrect+0x30>
    44a4:	db 2c       	mov	r13, r11
	{
		setpixel(buff, i, y, color);
		setpixel(buff, i, y+h-1, color);
	}
	for (uint8_t i=y; i<y+h; i++) 
    44a6:	10 e0       	ldi	r17, 0x00	; 0
    44a8:	0b 0d       	add	r16, r11
    44aa:	11 1d       	adc	r17, r1
	{
		setpixel(buff, x, i, color);
		setpixel(buff, x+w-1, i, color);
    44ac:	cc 24       	eor	r12, r12
    44ae:	ca 94       	dec	r12
    44b0:	c9 0c       	add	r12, r9
    44b2:	cf 0c       	add	r12, r15
	for (uint8_t i=x; i<x+w; i++) 
	{
		setpixel(buff, i, y, color);
		setpixel(buff, i, y+h-1, color);
	}
	for (uint8_t i=y; i<y+h; i++) 
    44b4:	8d 2d       	mov	r24, r13
    44b6:	90 e0       	ldi	r25, 0x00	; 0
    44b8:	80 17       	cp	r24, r16
    44ba:	91 07       	cpc	r25, r17
    44bc:	74 f4       	brge	.+28     	; 0x44da <drawrect+0x8c>
	{
		setpixel(buff, x, i, color);
    44be:	2e 2d       	mov	r18, r14
    44c0:	4d 2d       	mov	r20, r13
    44c2:	6f 2d       	mov	r22, r15
    44c4:	ce 01       	movw	r24, r28
    44c6:	0e 94 84 21 	call	0x4308	; 0x4308 <setpixel>
		setpixel(buff, x+w-1, i, color);
    44ca:	2e 2d       	mov	r18, r14
    44cc:	4d 2d       	mov	r20, r13
    44ce:	6c 2d       	mov	r22, r12
    44d0:	ce 01       	movw	r24, r28
    44d2:	0e 94 84 21 	call	0x4308	; 0x4308 <setpixel>
	for (uint8_t i=x; i<x+w; i++) 
	{
		setpixel(buff, i, y, color);
		setpixel(buff, i, y+h-1, color);
	}
	for (uint8_t i=y; i<y+h; i++) 
    44d6:	d3 94       	inc	r13
    44d8:	ed cf       	rjmp	.-38     	; 0x44b4 <drawrect+0x66>
	{
		setpixel(buff, x, i, color);
		setpixel(buff, x+w-1, i, color);
	} 
}
    44da:	df 91       	pop	r29
    44dc:	cf 91       	pop	r28
    44de:	1f 91       	pop	r17
    44e0:	0f 91       	pop	r16
    44e2:	ff 90       	pop	r15
    44e4:	ef 90       	pop	r14
    44e6:	df 90       	pop	r13
    44e8:	cf 90       	pop	r12
    44ea:	bf 90       	pop	r11
    44ec:	af 90       	pop	r10
    44ee:	9f 90       	pop	r9
    44f0:	08 95       	ret

000044f2 <fillcircle>:

// Draw a filled circle
// Edge-clip bug fixed by D. Thompson - 3/2/2014
void fillcircle(uint8_t *buff, uint8_t x0, uint8_t y0, uint8_t r, uint8_t color) 
{
    44f2:	4f 92       	push	r4
    44f4:	5f 92       	push	r5
    44f6:	6f 92       	push	r6
    44f8:	7f 92       	push	r7
    44fa:	8f 92       	push	r8
    44fc:	9f 92       	push	r9
    44fe:	af 92       	push	r10
    4500:	bf 92       	push	r11
    4502:	cf 92       	push	r12
    4504:	df 92       	push	r13
    4506:	ef 92       	push	r14
    4508:	ff 92       	push	r15
    450a:	0f 93       	push	r16
    450c:	1f 93       	push	r17
    450e:	cf 93       	push	r28
    4510:	df 93       	push	r29
    4512:	ec 01       	movw	r28, r24
    4514:	96 2e       	mov	r9, r22
    4516:	a4 2e       	mov	r10, r20
	int8_t f = 1 - r;
    4518:	bb 24       	eor	r11, r11
    451a:	b3 94       	inc	r11
    451c:	b2 1a       	sub	r11, r18
	int8_t ddF_x = 1;
	int8_t ddF_y = -2 * r;
    451e:	82 2e       	mov	r8, r18
    4520:	81 94       	neg	r8
    4522:	88 0c       	add	r8, r8
	int8_t x = 0;
	int8_t y = r;
    4524:	12 2f       	mov	r17, r18
	int8_t i = 0;

	for (i=y0-r; i<=y0+r; i++) 
    4526:	74 2e       	mov	r7, r20
    4528:	72 1a       	sub	r7, r18
    452a:	e4 2e       	mov	r14, r20
    452c:	f1 2c       	mov	r15, r1
    452e:	67 01       	movw	r12, r14
    4530:	c2 0e       	add	r12, r18
    4532:	d1 1c       	adc	r13, r1
    4534:	87 2d       	mov	r24, r7
    4536:	99 27       	eor	r25, r25
    4538:	87 fd       	sbrc	r24, 7
    453a:	90 95       	com	r25
    453c:	c8 16       	cp	r12, r24
    453e:	d9 06       	cpc	r13, r25
    4540:	44 f0       	brlt	.+16     	; 0x4552 <fillcircle+0x60>
	{
		setpixel(buff, x0, i, color);
    4542:	20 2f       	mov	r18, r16
    4544:	47 2d       	mov	r20, r7
    4546:	69 2d       	mov	r22, r9
    4548:	ce 01       	movw	r24, r28
    454a:	0e 94 84 21 	call	0x4308	; 0x4308 <setpixel>
    454e:	73 94       	inc	r7
    4550:	f1 cf       	rjmp	.-30     	; 0x4534 <fillcircle+0x42>
	int8_t ddF_y = -2 * r;
	int8_t x = 0;
	int8_t y = r;
	int8_t i = 0;

	for (i=y0-r; i<=y0+r; i++) 
    4552:	71 2c       	mov	r7, r1
	{
		setpixel(buff, x0, i, color);
	}

	while (x<y) 
    4554:	71 16       	cp	r7, r17
    4556:	0c f0       	brlt	.+2      	; 0x455a <fillcircle+0x68>
    4558:	4c c0       	rjmp	.+152    	; 0x45f2 <fillcircle+0x100>
	{
		if (f >= 0) 
    455a:	b7 fc       	sbrc	r11, 7
    455c:	04 c0       	rjmp	.+8      	; 0x4566 <fillcircle+0x74>
		{
			y--;
    455e:	11 50       	subi	r17, 0x01	; 1
			ddF_y += 2;
    4560:	83 94       	inc	r8
    4562:	83 94       	inc	r8
			f += ddF_y;
    4564:	b8 0c       	add	r11, r8
    4566:	73 94       	inc	r7
    4568:	87 2d       	mov	r24, r7
    456a:	88 0f       	add	r24, r24
    456c:	8f 5f       	subi	r24, 0xFF	; 255
		}

		x++;
		ddF_x += 2;
		f += ddF_x;
    456e:	b8 0e       	add	r11, r24

		for (i=y0-y; i<=y0+y; i++) 
    4570:	6a 2c       	mov	r6, r10
    4572:	61 1a       	sub	r6, r17
    4574:	67 01       	movw	r12, r14
    4576:	c1 0e       	add	r12, r17
    4578:	d1 1c       	adc	r13, r1
    457a:	17 fd       	sbrc	r17, 7
    457c:	da 94       	dec	r13
    457e:	47 2c       	mov	r4, r7
    4580:	49 0c       	add	r4, r9
    4582:	59 2c       	mov	r5, r9
    4584:	57 18       	sub	r5, r7
    4586:	86 2d       	mov	r24, r6
    4588:	99 27       	eor	r25, r25
    458a:	87 fd       	sbrc	r24, 7
    458c:	90 95       	com	r25
    458e:	c8 16       	cp	r12, r24
    4590:	d9 06       	cpc	r13, r25
    4592:	74 f0       	brlt	.+28     	; 0x45b0 <fillcircle+0xbe>
		{
			setpixel(buff, x0+x, i, color);
    4594:	20 2f       	mov	r18, r16
    4596:	46 2d       	mov	r20, r6
    4598:	64 2d       	mov	r22, r4
    459a:	ce 01       	movw	r24, r28
    459c:	0e 94 84 21 	call	0x4308	; 0x4308 <setpixel>
			setpixel(buff, x0-x, i, color);
    45a0:	20 2f       	mov	r18, r16
    45a2:	46 2d       	mov	r20, r6
    45a4:	65 2d       	mov	r22, r5
    45a6:	ce 01       	movw	r24, r28
    45a8:	0e 94 84 21 	call	0x4308	; 0x4308 <setpixel>
    45ac:	63 94       	inc	r6
    45ae:	eb cf       	rjmp	.-42     	; 0x4586 <fillcircle+0x94>
    45b0:	6a 2c       	mov	r6, r10
    45b2:	67 18       	sub	r6, r7
		} 
		for (i=y0-x; i<=y0+x; i++) 
    45b4:	67 01       	movw	r12, r14
    45b6:	c7 0c       	add	r12, r7
    45b8:	d1 1c       	adc	r13, r1
    45ba:	77 fc       	sbrc	r7, 7
    45bc:	da 94       	dec	r13
		{
			setpixel(buff, x0+y, i, color);
    45be:	41 2e       	mov	r4, r17
    45c0:	49 0c       	add	r4, r9
			setpixel(buff, x0-y, i, color);
    45c2:	59 2c       	mov	r5, r9
    45c4:	51 1a       	sub	r5, r17
		for (i=y0-y; i<=y0+y; i++) 
		{
			setpixel(buff, x0+x, i, color);
			setpixel(buff, x0-x, i, color);
		} 
		for (i=y0-x; i<=y0+x; i++) 
    45c6:	86 2d       	mov	r24, r6
    45c8:	99 27       	eor	r25, r25
    45ca:	87 fd       	sbrc	r24, 7
    45cc:	90 95       	com	r25
    45ce:	c8 16       	cp	r12, r24
    45d0:	d9 06       	cpc	r13, r25
    45d2:	0c f4       	brge	.+2      	; 0x45d6 <fillcircle+0xe4>
    45d4:	bf cf       	rjmp	.-130    	; 0x4554 <fillcircle+0x62>
		{
			setpixel(buff, x0+y, i, color);
    45d6:	20 2f       	mov	r18, r16
    45d8:	46 2d       	mov	r20, r6
    45da:	64 2d       	mov	r22, r4
    45dc:	ce 01       	movw	r24, r28
    45de:	0e 94 84 21 	call	0x4308	; 0x4308 <setpixel>
			setpixel(buff, x0-y, i, color);
    45e2:	20 2f       	mov	r18, r16
    45e4:	46 2d       	mov	r20, r6
    45e6:	65 2d       	mov	r22, r5
    45e8:	ce 01       	movw	r24, r28
    45ea:	0e 94 84 21 	call	0x4308	; 0x4308 <setpixel>
    45ee:	63 94       	inc	r6
    45f0:	ea cf       	rjmp	.-44     	; 0x45c6 <fillcircle+0xd4>
		}    
	}
}
    45f2:	df 91       	pop	r29
    45f4:	cf 91       	pop	r28
    45f6:	1f 91       	pop	r17
    45f8:	0f 91       	pop	r16
    45fa:	ff 90       	pop	r15
    45fc:	ef 90       	pop	r14
    45fe:	df 90       	pop	r13
    4600:	cf 90       	pop	r12
    4602:	bf 90       	pop	r11
    4604:	af 90       	pop	r10
    4606:	9f 90       	pop	r9
    4608:	8f 90       	pop	r8
    460a:	7f 90       	pop	r7
    460c:	6f 90       	pop	r6
    460e:	5f 90       	pop	r5
    4610:	4f 90       	pop	r4
    4612:	08 95       	ret

00004614 <LCD_Display_Text>:
//************************************************************

// Print Menuitem from Program memory at a particular location
void LCD_Display_Text (uint16_t menuitem, const unsigned char* font,uint16_t x, uint16_t y)
{
	gLCDprint_Menu_P((char*)pgm_read_word(&text_menu[menuitem]), font, x, y);
    4614:	88 0f       	add	r24, r24
    4616:	99 1f       	adc	r25, r25
    4618:	8a 5f       	subi	r24, 0xFA	; 250
    461a:	91 4f       	sbci	r25, 0xF1	; 241
    461c:	fc 01       	movw	r30, r24
    461e:	85 91       	lpm	r24, Z+
    4620:	94 91       	lpm	r25, Z
}

// Print a string from RAM at a particular location in a particular font
void gLCDprint_Menu_P(const char *s, const unsigned char* font,uint16_t x, uint16_t y)
{
	pgm_mugui_lcd_puts((const unsigned char*)s, font, x, y);
    4622:	0c 94 67 3f 	jmp	0x7ece	; 0x7ece <pgm_mugui_lcd_puts>

00004626 <gLCDprint_Menu_P>:
    4626:	0c 94 67 3f 	jmp	0x7ece	; 0x7ece <pgm_mugui_lcd_puts>

0000462a <idle_screen>:
}

// Pop up the Idle screen
void idle_screen(void)
{
	clear_buffer(buffer);
    462a:	80 e0       	ldi	r24, 0x00	; 0
    462c:	91 e0       	ldi	r25, 0x01	; 1
    462e:	0e 94 5d 21 	call	0x42ba	; 0x42ba <clear_buffer>

	// Change Status screen depending on arm mode
	LCD_Display_Text(121,(const unsigned char*)Verdana14,41,3); 	// "Press"
    4632:	23 e0       	ldi	r18, 0x03	; 3
    4634:	30 e0       	ldi	r19, 0x00	; 0
    4636:	49 e2       	ldi	r20, 0x29	; 41
    4638:	50 e0       	ldi	r21, 0x00	; 0
    463a:	61 e7       	ldi	r22, 0x71	; 113
    463c:	71 e0       	ldi	r23, 0x01	; 1
    463e:	89 e7       	ldi	r24, 0x79	; 121
    4640:	90 e0       	ldi	r25, 0x00	; 0
    4642:	0e 94 0a 23 	call	0x4614	; 0x4614 <LCD_Display_Text>
	LCD_Display_Text(122,(const unsigned char*)Verdana14,24,23);	// "for status."
    4646:	27 e1       	ldi	r18, 0x17	; 23
    4648:	30 e0       	ldi	r19, 0x00	; 0
    464a:	48 e1       	ldi	r20, 0x18	; 24
    464c:	50 e0       	ldi	r21, 0x00	; 0
    464e:	61 e7       	ldi	r22, 0x71	; 113
    4650:	71 e0       	ldi	r23, 0x01	; 1
    4652:	8a e7       	ldi	r24, 0x7A	; 122
    4654:	90 e0       	ldi	r25, 0x00	; 0
    4656:	0e 94 0a 23 	call	0x4614	; 0x4614 <LCD_Display_Text>

	// Display most important error
	if ((General_error & (1 << LVA_ALARM)) != 0)					// Low voltage
    465a:	80 91 1e 05 	lds	r24, 0x051E
    465e:	83 ff       	sbrs	r24, 3
    4660:	13 c0       	rjmp	.+38     	; 0x4688 <idle_screen+0x5e>
	{
		LCD_Display_Text(134,(const unsigned char*)Verdana14,12,43);// "Battery"
    4662:	2b e2       	ldi	r18, 0x2B	; 43
    4664:	30 e0       	ldi	r19, 0x00	; 0
    4666:	4c e0       	ldi	r20, 0x0C	; 12
    4668:	50 e0       	ldi	r21, 0x00	; 0
    466a:	61 e7       	ldi	r22, 0x71	; 113
    466c:	71 e0       	ldi	r23, 0x01	; 1
    466e:	86 e8       	ldi	r24, 0x86	; 134
    4670:	90 e0       	ldi	r25, 0x00	; 0
    4672:	0e 94 0a 23 	call	0x4614	; 0x4614 <LCD_Display_Text>
		LCD_Display_Text(118,(const unsigned char*)Verdana14,80,43); // "Low"
    4676:	2b e2       	ldi	r18, 0x2B	; 43
    4678:	30 e0       	ldi	r19, 0x00	; 0
    467a:	40 e5       	ldi	r20, 0x50	; 80
    467c:	50 e0       	ldi	r21, 0x00	; 0
    467e:	61 e7       	ldi	r22, 0x71	; 113
    4680:	71 e0       	ldi	r23, 0x01	; 1
    4682:	86 e7       	ldi	r24, 0x76	; 118
    4684:	90 e0       	ldi	r25, 0x00	; 0
    4686:	41 c0       	rjmp	.+130    	; 0x470a <idle_screen+0xe0>
	}
	
	else if ((General_error & (1 << NO_SIGNAL)) != 0)				// No signal
    4688:	80 91 1e 05 	lds	r24, 0x051E
    468c:	81 ff       	sbrs	r24, 1
    468e:	13 c0       	rjmp	.+38     	; 0x46b6 <idle_screen+0x8c>
	{
		LCD_Display_Text(75,(const unsigned char*)Verdana14,28,43); // "No"
    4690:	2b e2       	ldi	r18, 0x2B	; 43
    4692:	30 e0       	ldi	r19, 0x00	; 0
    4694:	4c e1       	ldi	r20, 0x1C	; 28
    4696:	50 e0       	ldi	r21, 0x00	; 0
    4698:	61 e7       	ldi	r22, 0x71	; 113
    469a:	71 e0       	ldi	r23, 0x01	; 1
    469c:	8b e4       	ldi	r24, 0x4B	; 75
    469e:	90 e0       	ldi	r25, 0x00	; 0
    46a0:	0e 94 0a 23 	call	0x4614	; 0x4614 <LCD_Display_Text>
		LCD_Display_Text(76,(const unsigned char*)Verdana14,54,43); // "Signal"
    46a4:	2b e2       	ldi	r18, 0x2B	; 43
    46a6:	30 e0       	ldi	r19, 0x00	; 0
    46a8:	46 e3       	ldi	r20, 0x36	; 54
    46aa:	50 e0       	ldi	r21, 0x00	; 0
    46ac:	61 e7       	ldi	r22, 0x71	; 113
    46ae:	71 e0       	ldi	r23, 0x01	; 1
    46b0:	8c e4       	ldi	r24, 0x4C	; 76
    46b2:	90 e0       	ldi	r25, 0x00	; 0
    46b4:	2a c0       	rjmp	.+84     	; 0x470a <idle_screen+0xe0>
	}
	
	else if ((General_error & (1 << THROTTLE_HIGH)) != 0)			// Throttle high
    46b6:	80 91 1e 05 	lds	r24, 0x051E
    46ba:	80 ff       	sbrs	r24, 0
    46bc:	13 c0       	rjmp	.+38     	; 0x46e4 <idle_screen+0xba>
	{
		LCD_Display_Text(105,(const unsigned char*)Verdana14,10,43);// "Throttle"
    46be:	2b e2       	ldi	r18, 0x2B	; 43
    46c0:	30 e0       	ldi	r19, 0x00	; 0
    46c2:	4a e0       	ldi	r20, 0x0A	; 10
    46c4:	50 e0       	ldi	r21, 0x00	; 0
    46c6:	61 e7       	ldi	r22, 0x71	; 113
    46c8:	71 e0       	ldi	r23, 0x01	; 1
    46ca:	89 e6       	ldi	r24, 0x69	; 105
    46cc:	90 e0       	ldi	r25, 0x00	; 0
    46ce:	0e 94 0a 23 	call	0x4614	; 0x4614 <LCD_Display_Text>
		LCD_Display_Text(55,(const unsigned char*)Verdana14,81,43);	// "High"
    46d2:	2b e2       	ldi	r18, 0x2B	; 43
    46d4:	30 e0       	ldi	r19, 0x00	; 0
    46d6:	41 e5       	ldi	r20, 0x51	; 81
    46d8:	50 e0       	ldi	r21, 0x00	; 0
    46da:	61 e7       	ldi	r22, 0x71	; 113
    46dc:	71 e0       	ldi	r23, 0x01	; 1
    46de:	87 e3       	ldi	r24, 0x37	; 55
    46e0:	90 e0       	ldi	r25, 0x00	; 0
    46e2:	13 c0       	rjmp	.+38     	; 0x470a <idle_screen+0xe0>
	}
	
	else if ((General_error & (1 << DISARMED)) != 0)				// Disarmed
    46e4:	80 91 1e 05 	lds	r24, 0x051E
	{
		LCD_Display_Text(139,(const unsigned char*)Verdana14,20,43);// "(Disarmed)"
    46e8:	2b e2       	ldi	r18, 0x2B	; 43
    46ea:	30 e0       	ldi	r19, 0x00	; 0
	{
		LCD_Display_Text(105,(const unsigned char*)Verdana14,10,43);// "Throttle"
		LCD_Display_Text(55,(const unsigned char*)Verdana14,81,43);	// "High"
	}
	
	else if ((General_error & (1 << DISARMED)) != 0)				// Disarmed
    46ec:	82 ff       	sbrs	r24, 2
    46ee:	07 c0       	rjmp	.+14     	; 0x46fe <idle_screen+0xd4>
	{
		LCD_Display_Text(139,(const unsigned char*)Verdana14,20,43);// "(Disarmed)"
    46f0:	44 e1       	ldi	r20, 0x14	; 20
    46f2:	50 e0       	ldi	r21, 0x00	; 0
    46f4:	61 e7       	ldi	r22, 0x71	; 113
    46f6:	71 e0       	ldi	r23, 0x01	; 1
    46f8:	8b e8       	ldi	r24, 0x8B	; 139
    46fa:	90 e0       	ldi	r25, 0x00	; 0
    46fc:	06 c0       	rjmp	.+12     	; 0x470a <idle_screen+0xe0>
	}
	else
	{
		LCD_Display_Text(138,(const unsigned char*)Verdana14,28,43);// "(Armed)"
    46fe:	4c e1       	ldi	r20, 0x1C	; 28
    4700:	50 e0       	ldi	r21, 0x00	; 0
    4702:	61 e7       	ldi	r22, 0x71	; 113
    4704:	71 e0       	ldi	r23, 0x01	; 1
    4706:	8a e8       	ldi	r24, 0x8A	; 138
    4708:	90 e0       	ldi	r25, 0x00	; 0
    470a:	0e 94 0a 23 	call	0x4614	; 0x4614 <LCD_Display_Text>
	}

	write_buffer(buffer);
    470e:	80 e0       	ldi	r24, 0x00	; 0
    4710:	91 e0       	ldi	r25, 0x01	; 1
    4712:	0c 94 2b 21 	jmp	0x4256	; 0x4256 <write_buffer>

00004716 <get_raw_gyros>:
		gyroADC[i] *= (int8_t)pgm_read_byte(&Gyro_Pol[Config.Orientation][i]);
	}
}

void get_raw_gyros(void)
{
    4716:	cf 93       	push	r28
    4718:	df 93       	push	r29
    471a:	cd b7       	in	r28, 0x3d	; 61
    471c:	de b7       	in	r29, 0x3e	; 62
    471e:	2c 97       	sbiw	r28, 0x0c	; 12
    4720:	0f b6       	in	r0, 0x3f	; 63
    4722:	f8 94       	cli
    4724:	de bf       	out	0x3e, r29	; 62
    4726:	0f be       	out	0x3f, r0	; 63
    4728:	cd bf       	out	0x3d, r28	; 61
	uint8_t i;
	uint8_t Gyros[6];
	int16_t temp1, temp2;

	// Get the i2c data from the MPU6050
	readI2CbyteArray(MPU60X0_DEFAULT_ADDRESS,MPU60X0_RA_GYRO_XOUT_H,(uint8_t *)Gyros,6);
    472a:	26 e0       	ldi	r18, 0x06	; 6
    472c:	ae 01       	movw	r20, r28
    472e:	4f 5f       	subi	r20, 0xFF	; 255
    4730:	5f 4f       	sbci	r21, 0xFF	; 255
    4732:	63 e4       	ldi	r22, 0x43	; 67
    4734:	80 ed       	ldi	r24, 0xD0	; 208
    4736:	0e 94 7f 25 	call	0x4afe	; 0x4afe <readI2CbyteArray>

	// Reassemble data into gyroADC array and down-sample to reduce resolution and noise
	temp1 = Gyros[0] << 8;
    473a:	89 81       	ldd	r24, Y+1	; 0x01
    473c:	90 e0       	ldi	r25, 0x00	; 0
    473e:	98 2f       	mov	r25, r24
    4740:	88 27       	eor	r24, r24
	temp2 = Gyros[1];
    4742:	2a 81       	ldd	r18, Y+2	; 0x02
	RawADC[PITCH] = (temp1 + temp2) >> GYRODIV;
    4744:	82 0f       	add	r24, r18
    4746:	91 1d       	adc	r25, r1
    4748:	34 e0       	ldi	r19, 0x04	; 4
    474a:	95 95       	asr	r25
    474c:	87 95       	ror	r24
    474e:	3a 95       	dec	r19
    4750:	e1 f7       	brne	.-8      	; 0x474a <get_raw_gyros+0x34>
    4752:	9a 87       	std	Y+10, r25	; 0x0a
    4754:	89 87       	std	Y+9, r24	; 0x09

	temp1 = Gyros[2] << 8;
    4756:	8b 81       	ldd	r24, Y+3	; 0x03
    4758:	90 e0       	ldi	r25, 0x00	; 0
    475a:	98 2f       	mov	r25, r24
    475c:	88 27       	eor	r24, r24
	temp2 = Gyros[3];
    475e:	2c 81       	ldd	r18, Y+4	; 0x04
	RawADC[ROLL] = (temp1 + temp2) >> GYRODIV;
    4760:	82 0f       	add	r24, r18
    4762:	91 1d       	adc	r25, r1
    4764:	54 e0       	ldi	r21, 0x04	; 4
    4766:	95 95       	asr	r25
    4768:	87 95       	ror	r24
    476a:	5a 95       	dec	r21
    476c:	e1 f7       	brne	.-8      	; 0x4766 <get_raw_gyros+0x50>
    476e:	98 87       	std	Y+8, r25	; 0x08
    4770:	8f 83       	std	Y+7, r24	; 0x07

	temp1 = Gyros[4] << 8;
    4772:	8d 81       	ldd	r24, Y+5	; 0x05
    4774:	90 e0       	ldi	r25, 0x00	; 0
    4776:	98 2f       	mov	r25, r24
    4778:	88 27       	eor	r24, r24
	temp2 = Gyros[5];
    477a:	2e 81       	ldd	r18, Y+6	; 0x06
	RawADC[YAW] = (temp1 + temp2) >> GYRODIV;
    477c:	82 0f       	add	r24, r18
    477e:	91 1d       	adc	r25, r1
    4780:	74 e0       	ldi	r23, 0x04	; 4
    4782:	95 95       	asr	r25
    4784:	87 95       	ror	r24
    4786:	7a 95       	dec	r23
    4788:	e1 f7       	brne	.-8      	; 0x4782 <get_raw_gyros+0x6c>
    478a:	9c 87       	std	Y+12, r25	; 0x0c
    478c:	8b 87       	std	Y+11, r24	; 0x0b

	// Reorient the data as per the board orientation	
	for (i=0; i<NUMBEROFAXIS; i++)
	{
		// Rearrange the sensors
		gyroADC[i] 	= RawADC[(int8_t)pgm_read_byte(&Gyro_RPY_Order[Config.Orientation][i])];
    478e:	20 91 31 06 	lds	r18, 0x0631
    4792:	ab e6       	ldi	r26, 0x6B	; 107
    4794:	b5 e0       	ldi	r27, 0x05	; 5
    4796:	43 e0       	ldi	r20, 0x03	; 3
    4798:	24 02       	muls	r18, r20
    479a:	90 01       	movw	r18, r0
    479c:	11 24       	eor	r1, r1
    479e:	80 e0       	ldi	r24, 0x00	; 0
    47a0:	90 e0       	ldi	r25, 0x00	; 0
    47a2:	21 50       	subi	r18, 0x01	; 1
    47a4:	38 4e       	sbci	r19, 0xE8	; 232
    47a6:	f9 01       	movw	r30, r18
    47a8:	e8 0f       	add	r30, r24
    47aa:	f9 1f       	adc	r31, r25
    47ac:	e4 91       	lpm	r30, Z
    47ae:	ee 0f       	add	r30, r30
    47b0:	ff 0b       	sbc	r31, r31
    47b2:	41 e0       	ldi	r20, 0x01	; 1
    47b4:	50 e0       	ldi	r21, 0x00	; 0
    47b6:	4c 0f       	add	r20, r28
    47b8:	5d 1f       	adc	r21, r29
    47ba:	e4 0f       	add	r30, r20
    47bc:	f5 1f       	adc	r31, r21
    47be:	46 81       	ldd	r20, Z+6	; 0x06
    47c0:	57 81       	ldd	r21, Z+7	; 0x07
    47c2:	4d 93       	st	X+, r20
    47c4:	5d 93       	st	X+, r21
    47c6:	01 96       	adiw	r24, 0x01	; 1
	temp1 = Gyros[4] << 8;
	temp2 = Gyros[5];
	RawADC[YAW] = (temp1 + temp2) >> GYRODIV;

	// Reorient the data as per the board orientation	
	for (i=0; i<NUMBEROFAXIS; i++)
    47c8:	83 30       	cpi	r24, 0x03	; 3
    47ca:	91 05       	cpc	r25, r1
    47cc:	61 f7       	brne	.-40     	; 0x47a6 <get_raw_gyros+0x90>
	{
		// Rearrange the sensors
		gyroADC[i] 	= RawADC[(int8_t)pgm_read_byte(&Gyro_RPY_Order[Config.Orientation][i])];
	}
}
    47ce:	2c 96       	adiw	r28, 0x0c	; 12
    47d0:	0f b6       	in	r0, 0x3f	; 63
    47d2:	f8 94       	cli
    47d4:	de bf       	out	0x3e, r29	; 62
    47d6:	0f be       	out	0x3f, r0	; 63
    47d8:	cd bf       	out	0x3d, r28	; 61
    47da:	df 91       	pop	r29
    47dc:	cf 91       	pop	r28
    47de:	08 95       	ret

000047e0 <ReadGyros>:
//************************************************************

int16_t gyroADC[NUMBEROFAXIS];			// Holds Gyro ADCs

void ReadGyros(void)					// Conventional orientation
{
    47e0:	1f 93       	push	r17
    47e2:	cf 93       	push	r28
    47e4:	df 93       	push	r29
	uint8_t i;

	get_raw_gyros();					// Updates gyroADC[]
    47e6:	0e 94 8b 23 	call	0x4716	; 0x4716 <get_raw_gyros>
	{
		// Remove offsets from gyro outputs
		gyroADC[i] -= Config.gyroZero[i];

		// Change polarity
		gyroADC[i] *= (int8_t)pgm_read_byte(&Gyro_Pol[Config.Orientation][i]);
    47ea:	20 91 31 06 	lds	r18, 0x0631
    47ee:	cf e9       	ldi	r28, 0x9F	; 159
    47f0:	d7 e0       	ldi	r29, 0x07	; 7
    47f2:	ab e6       	ldi	r26, 0x6B	; 107
    47f4:	b5 e0       	ldi	r27, 0x05	; 5
    47f6:	83 e0       	ldi	r24, 0x03	; 3
    47f8:	28 02       	muls	r18, r24
    47fa:	90 01       	movw	r18, r0
    47fc:	11 24       	eor	r1, r1
    47fe:	80 e0       	ldi	r24, 0x00	; 0
    4800:	90 e0       	ldi	r25, 0x00	; 0
    4802:	23 51       	subi	r18, 0x13	; 19
    4804:	38 4e       	sbci	r19, 0xE8	; 232
	get_raw_gyros();					// Updates gyroADC[]

	for (i=0; i<NUMBEROFAXIS; i++)	
	{
		// Remove offsets from gyro outputs
		gyroADC[i] -= Config.gyroZero[i];
    4806:	69 91       	ld	r22, Y+
    4808:	79 91       	ld	r23, Y+
    480a:	f9 01       	movw	r30, r18
    480c:	e8 0f       	add	r30, r24
    480e:	f9 1f       	adc	r31, r25

		// Change polarity
		gyroADC[i] *= (int8_t)pgm_read_byte(&Gyro_Pol[Config.Orientation][i]);
    4810:	14 91       	lpm	r17, Z
	get_raw_gyros();					// Updates gyroADC[]

	for (i=0; i<NUMBEROFAXIS; i++)	
	{
		// Remove offsets from gyro outputs
		gyroADC[i] -= Config.gyroZero[i];
    4812:	4d 91       	ld	r20, X+
    4814:	5c 91       	ld	r21, X
    4816:	11 97       	sbiw	r26, 0x01	; 1
    4818:	46 1b       	sub	r20, r22
    481a:	57 0b       	sbc	r21, r23

		// Change polarity
		gyroADC[i] *= (int8_t)pgm_read_byte(&Gyro_Pol[Config.Orientation][i]);
    481c:	14 03       	mulsu	r17, r20
    481e:	b0 01       	movw	r22, r0
    4820:	15 9f       	mul	r17, r21
    4822:	70 0d       	add	r23, r0
    4824:	11 24       	eor	r1, r1
    4826:	6d 93       	st	X+, r22
    4828:	7d 93       	st	X+, r23
    482a:	01 96       	adiw	r24, 0x01	; 1
{
	uint8_t i;

	get_raw_gyros();					// Updates gyroADC[]

	for (i=0; i<NUMBEROFAXIS; i++)	
    482c:	83 30       	cpi	r24, 0x03	; 3
    482e:	91 05       	cpc	r25, r1
    4830:	51 f7       	brne	.-44     	; 0x4806 <ReadGyros+0x26>
		gyroADC[i] -= Config.gyroZero[i];

		// Change polarity
		gyroADC[i] *= (int8_t)pgm_read_byte(&Gyro_Pol[Config.Orientation][i]);
	}
}
    4832:	df 91       	pop	r29
    4834:	cf 91       	pop	r28
    4836:	1f 91       	pop	r17
    4838:	08 95       	ret

0000483a <CalibrateGyrosFast>:
//***************************************************************
// Calibration routines
//***************************************************************

void CalibrateGyrosFast(void)
{
    483a:	cf 93       	push	r28
	uint8_t i;

	// Clear gyro zeros
	memset(&Config.gyroZero[ROLL],0,(sizeof(int16_t) * NUMBEROFAXIS));
    483c:	86 e0       	ldi	r24, 0x06	; 6
    483e:	ef e9       	ldi	r30, 0x9F	; 159
    4840:	f7 e0       	ldi	r31, 0x07	; 7
    4842:	df 01       	movw	r26, r30
    4844:	1d 92       	st	X+, r1
    4846:	8a 95       	dec	r24
    4848:	e9 f7       	brne	.-6      	; 0x4844 <CalibrateGyrosFast+0xa>
    484a:	c0 e2       	ldi	r28, 0x20	; 32

	// Calculate average over 32 reads
	for (i=0; i<32; i++)
	{
		get_raw_gyros();				// Updates gyroADC[]
    484c:	0e 94 8b 23 	call	0x4716	; 0x4716 <get_raw_gyros>

		Config.gyroZero[ROLL] 	+= gyroADC[ROLL];						
    4850:	40 91 9f 07 	lds	r20, 0x079F
    4854:	50 91 a0 07 	lds	r21, 0x07A0
    4858:	80 91 6b 05 	lds	r24, 0x056B
    485c:	90 91 6c 05 	lds	r25, 0x056C
    4860:	48 0f       	add	r20, r24
    4862:	59 1f       	adc	r21, r25
    4864:	50 93 a0 07 	sts	0x07A0, r21
    4868:	40 93 9f 07 	sts	0x079F, r20
		Config.gyroZero[PITCH] 	+= gyroADC[PITCH];	
    486c:	20 91 a1 07 	lds	r18, 0x07A1
    4870:	30 91 a2 07 	lds	r19, 0x07A2
    4874:	80 91 6d 05 	lds	r24, 0x056D
    4878:	90 91 6e 05 	lds	r25, 0x056E
    487c:	28 0f       	add	r18, r24
    487e:	39 1f       	adc	r19, r25
    4880:	30 93 a2 07 	sts	0x07A2, r19
    4884:	20 93 a1 07 	sts	0x07A1, r18
		Config.gyroZero[YAW] 	+= gyroADC[YAW];
    4888:	80 91 a3 07 	lds	r24, 0x07A3
    488c:	90 91 a4 07 	lds	r25, 0x07A4
    4890:	60 91 6f 05 	lds	r22, 0x056F
    4894:	70 91 70 05 	lds	r23, 0x0570
    4898:	86 0f       	add	r24, r22
    489a:	97 1f       	adc	r25, r23
    489c:	90 93 a4 07 	sts	0x07A4, r25
    48a0:	80 93 a3 07 	sts	0x07A3, r24
    48a4:	c1 50       	subi	r28, 0x01	; 1

	// Clear gyro zeros
	memset(&Config.gyroZero[ROLL],0,(sizeof(int16_t) * NUMBEROFAXIS));

	// Calculate average over 32 reads
	for (i=0; i<32; i++)
    48a6:	91 f6       	brne	.-92     	; 0x484c <CalibrateGyrosFast+0x12>
	}

	// Average readings for all axis
	for (i=0; i<NUMBEROFAXIS; i++)
	{
		Config.gyroZero[i] 	= (Config.gyroZero[i] >> 5);	// Divide by 32	
    48a8:	e5 e0       	ldi	r30, 0x05	; 5
    48aa:	55 95       	asr	r21
    48ac:	47 95       	ror	r20
    48ae:	ea 95       	dec	r30
    48b0:	e1 f7       	brne	.-8      	; 0x48aa <CalibrateGyrosFast+0x70>
    48b2:	50 93 a0 07 	sts	0x07A0, r21
    48b6:	40 93 9f 07 	sts	0x079F, r20
    48ba:	f5 e0       	ldi	r31, 0x05	; 5
    48bc:	35 95       	asr	r19
    48be:	27 95       	ror	r18
    48c0:	fa 95       	dec	r31
    48c2:	e1 f7       	brne	.-8      	; 0x48bc <CalibrateGyrosFast+0x82>
    48c4:	30 93 a2 07 	sts	0x07A2, r19
    48c8:	20 93 a1 07 	sts	0x07A1, r18
    48cc:	a5 e0       	ldi	r26, 0x05	; 5
    48ce:	95 95       	asr	r25
    48d0:	87 95       	ror	r24
    48d2:	aa 95       	dec	r26
    48d4:	e1 f7       	brne	.-8      	; 0x48ce <CalibrateGyrosFast+0x94>
    48d6:	90 93 a4 07 	sts	0x07A4, r25
    48da:	80 93 a3 07 	sts	0x07A3, r24
	}

	Save_Config_to_EEPROM();
}
    48de:	cf 91       	pop	r28
	for (i=0; i<NUMBEROFAXIS; i++)
	{
		Config.gyroZero[i] 	= (Config.gyroZero[i] >> 5);	// Divide by 32	
	}

	Save_Config_to_EEPROM();
    48e0:	0c 94 bc 16 	jmp	0x2d78	; 0x2d78 <Save_Config_to_EEPROM>

000048e4 <CalibrateGyrosSlow>:
}

bool CalibrateGyrosSlow(void)
{
    48e4:	2f 92       	push	r2
    48e6:	3f 92       	push	r3
    48e8:	4f 92       	push	r4
    48ea:	5f 92       	push	r5
    48ec:	6f 92       	push	r6
    48ee:	7f 92       	push	r7
    48f0:	8f 92       	push	r8
    48f2:	9f 92       	push	r9
    48f4:	af 92       	push	r10
    48f6:	bf 92       	push	r11
    48f8:	cf 92       	push	r12
    48fa:	df 92       	push	r13
    48fc:	ef 92       	push	r14
    48fe:	ff 92       	push	r15
    4900:	0f 93       	push	r16
    4902:	1f 93       	push	r17
    4904:	cf 93       	push	r28
    4906:	df 93       	push	r29
    4908:	cd b7       	in	r28, 0x3d	; 61
    490a:	de b7       	in	r29, 0x3e	; 62
    490c:	65 97       	sbiw	r28, 0x15	; 21
    490e:	0f b6       	in	r0, 0x3f	; 63
    4910:	f8 94       	cli
    4912:	de bf       	out	0x3e, r29	; 62
    4914:	0f be       	out	0x3f, r0	; 63
    4916:	cd bf       	out	0x3d, r28	; 61
	float 		GyroSmooth[NUMBEROFAXIS];
	int16_t		GyroOld[NUMBEROFAXIS] = {0,0,0};
    4918:	1e 86       	std	Y+14, r1	; 0x0e
    491a:	1d 86       	std	Y+13, r1	; 0x0d
    491c:	18 8a       	std	Y+16, r1	; 0x10
    491e:	1f 86       	std	Y+15, r1	; 0x0f
    4920:	1a 8a       	std	Y+18, r1	; 0x12
    4922:	19 8a       	std	Y+17, r1	; 0x11
	uint8_t		Gyro_TCNT2 = 0;
	bool		Gyros_Stable = false;

	// Populate Config.gyroZero[] with ballpark figures
	// This makes slow calibrate on much faster
	CalibrateGyrosFast();	
    4924:	0e 94 1d 24 	call	0x483a	; 0x483a <CalibrateGyrosFast>
	
	// Optimise starting point for each board
	for (axis = 0; axis < NUMBEROFAXIS; axis++)
	{
		GyroSmooth[axis] = Config.gyroZero[axis];			
    4928:	60 91 9f 07 	lds	r22, 0x079F
    492c:	70 91 a0 07 	lds	r23, 0x07A0
    4930:	88 27       	eor	r24, r24
    4932:	77 fd       	sbrc	r23, 7
    4934:	80 95       	com	r24
    4936:	98 2f       	mov	r25, r24
    4938:	0e 94 34 48 	call	0x9068	; 0x9068 <__floatsisf>
    493c:	69 83       	std	Y+1, r22	; 0x01
    493e:	7a 83       	std	Y+2, r23	; 0x02
    4940:	8b 83       	std	Y+3, r24	; 0x03
    4942:	9c 83       	std	Y+4, r25	; 0x04
    4944:	60 91 a1 07 	lds	r22, 0x07A1
    4948:	70 91 a2 07 	lds	r23, 0x07A2
    494c:	88 27       	eor	r24, r24
    494e:	77 fd       	sbrc	r23, 7
    4950:	80 95       	com	r24
    4952:	98 2f       	mov	r25, r24
    4954:	0e 94 34 48 	call	0x9068	; 0x9068 <__floatsisf>
    4958:	6d 83       	std	Y+5, r22	; 0x05
    495a:	7e 83       	std	Y+6, r23	; 0x06
    495c:	8f 83       	std	Y+7, r24	; 0x07
    495e:	98 87       	std	Y+8, r25	; 0x08
    4960:	60 91 a3 07 	lds	r22, 0x07A3
    4964:	70 91 a4 07 	lds	r23, 0x07A4
    4968:	88 27       	eor	r24, r24
    496a:	77 fd       	sbrc	r23, 7
    496c:	80 95       	com	r24
    496e:	98 2f       	mov	r25, r24
    4970:	0e 94 34 48 	call	0x9068	; 0x9068 <__floatsisf>
    4974:	69 87       	std	Y+9, r22	; 0x09
    4976:	7a 87       	std	Y+10, r23	; 0x0a
    4978:	8b 87       	std	Y+11, r24	; 0x0b
    497a:	9c 87       	std	Y+12, r25	; 0x0c
    497c:	1d 8a       	std	Y+21, r1	; 0x15
    497e:	1b 8a       	std	Y+19, r1	; 0x13
    4980:	e1 2c       	mov	r14, r1
    4982:	f1 2c       	mov	r15, r1
    4984:	00 e0       	ldi	r16, 0x00	; 0
    4986:	10 e0       	ldi	r17, 0x00	; 0
	
	// Wait until gyros stable. Timeout after CAL_TIMEOUT seconds
	while (!Gyros_Stable && ((Gyro_seconds <= CAL_TIMEOUT)))
	{
		// Update status timeout
		Gyro_timeout += (uint8_t)(TCNT2 - Gyro_TCNT2);
    4988:	80 91 b2 00 	lds	r24, 0x00B2
    498c:	9d 89       	ldd	r25, Y+21	; 0x15
    498e:	89 1b       	sub	r24, r25
    4990:	e8 0e       	add	r14, r24
    4992:	f1 1c       	adc	r15, r1
		Gyro_TCNT2 = TCNT2;
    4994:	e0 91 b2 00 	lds	r30, 0x00B2
    4998:	ed 8b       	std	Y+21, r30	; 0x15

		// Count elapsed seconds
		if (Gyro_timeout > SECOND_TIMER)
    499a:	fc e4       	ldi	r31, 0x4C	; 76
    499c:	ef 16       	cp	r14, r31
    499e:	ff 06       	cpc	r15, r31
    49a0:	28 f0       	brcs	.+10     	; 0x49ac <CalibrateGyrosSlow+0xc8>
		{
			Gyro_seconds++;
    49a2:	8b 89       	ldd	r24, Y+19	; 0x13
    49a4:	8f 5f       	subi	r24, 0xFF	; 255
    49a6:	8b 8b       	std	Y+19, r24	; 0x13
			Gyro_timeout = 0;
    49a8:	e1 2c       	mov	r14, r1
    49aa:	f1 2c       	mov	r15, r1
		}

		get_raw_gyros();
    49ac:	0e 94 8b 23 	call	0x4716	; 0x4716 <get_raw_gyros>
    49b0:	fe 01       	movw	r30, r28
    49b2:	31 96       	adiw	r30, 0x01	; 1
    49b4:	6f 01       	movw	r12, r30
    49b6:	bb e6       	ldi	r27, 0x6B	; 107
    49b8:	2b 2e       	mov	r2, r27
    49ba:	b5 e0       	ldi	r27, 0x05	; 5
    49bc:	3b 2e       	mov	r3, r27
    49be:	ce 01       	movw	r24, r28
    49c0:	0d 96       	adiw	r24, 0x0d	; 13
    49c2:	5c 01       	movw	r10, r24

		// Calculate very long rolling average
		for (axis = 0; axis < NUMBEROFAXIS; axis++) 
    49c4:	1c 8a       	std	Y+20, r1	; 0x14
		{
			GyroSmooth[axis] = ((GyroSmooth[axis] * (float)999) + (float)(gyroADC[axis])) / (float)1000;
    49c6:	f1 01       	movw	r30, r2
    49c8:	81 90       	ld	r8, Z+
    49ca:	91 90       	ld	r9, Z+
    49cc:	1f 01       	movw	r2, r30
    49ce:	20 e0       	ldi	r18, 0x00	; 0
    49d0:	30 ec       	ldi	r19, 0xC0	; 192
    49d2:	49 e7       	ldi	r20, 0x79	; 121
    49d4:	54 e4       	ldi	r21, 0x44	; 68
    49d6:	f6 01       	movw	r30, r12
    49d8:	60 81       	ld	r22, Z
    49da:	71 81       	ldd	r23, Z+1	; 0x01
    49dc:	82 81       	ldd	r24, Z+2	; 0x02
    49de:	93 81       	ldd	r25, Z+3	; 0x03
    49e0:	0e 94 e8 48 	call	0x91d0	; 0x91d0 <__mulsf3>
    49e4:	2b 01       	movw	r4, r22
    49e6:	3c 01       	movw	r6, r24
    49e8:	b4 01       	movw	r22, r8
    49ea:	88 27       	eor	r24, r24
    49ec:	77 fd       	sbrc	r23, 7
    49ee:	80 95       	com	r24
    49f0:	98 2f       	mov	r25, r24
    49f2:	0e 94 34 48 	call	0x9068	; 0x9068 <__floatsisf>
    49f6:	9b 01       	movw	r18, r22
    49f8:	ac 01       	movw	r20, r24
    49fa:	c3 01       	movw	r24, r6
    49fc:	b2 01       	movw	r22, r4
    49fe:	0e 94 31 47 	call	0x8e62	; 0x8e62 <__addsf3>
    4a02:	20 e0       	ldi	r18, 0x00	; 0
    4a04:	30 e0       	ldi	r19, 0x00	; 0
    4a06:	4a e7       	ldi	r20, 0x7A	; 122
    4a08:	54 e4       	ldi	r21, 0x44	; 68
    4a0a:	0e 94 99 47 	call	0x8f32	; 0x8f32 <__divsf3>
    4a0e:	f6 01       	movw	r30, r12
    4a10:	60 83       	st	Z, r22
    4a12:	71 83       	std	Z+1, r23	; 0x01
    4a14:	82 83       	std	Z+2, r24	; 0x02
    4a16:	93 83       	std	Z+3, r25	; 0x03
			
			// See if changing
			if (GyroOld[axis] != (int16_t)GyroSmooth[axis])
    4a18:	0e 94 01 48 	call	0x9002	; 0x9002 <__fixsfsi>
    4a1c:	f5 01       	movw	r30, r10
    4a1e:	20 81       	ld	r18, Z
    4a20:	31 81       	ldd	r19, Z+1	; 0x01
    4a22:	26 17       	cp	r18, r22
    4a24:	37 07       	cpc	r19, r23
    4a26:	11 f0       	breq	.+4      	; 0x4a2c <CalibrateGyrosSlow+0x148>
			{
				Gyros_Stable = false;
				Stable_counter = 0;
    4a28:	00 e0       	ldi	r16, 0x00	; 0
    4a2a:	10 e0       	ldi	r17, 0x00	; 0
			}
		
			// Save old reading
			GyroOld[axis] = (int16_t)GyroSmooth[axis];
    4a2c:	f5 01       	movw	r30, r10
    4a2e:	61 93       	st	Z+, r22
    4a30:	71 93       	st	Z+, r23
    4a32:	5f 01       	movw	r10, r30
		}

		get_raw_gyros();

		// Calculate very long rolling average
		for (axis = 0; axis < NUMBEROFAXIS; axis++) 
    4a34:	fc 89       	ldd	r31, Y+20	; 0x14
    4a36:	ff 5f       	subi	r31, 0xFF	; 255
    4a38:	fc 8b       	std	Y+20, r31	; 0x14
    4a3a:	84 e0       	ldi	r24, 0x04	; 4
    4a3c:	c8 0e       	add	r12, r24
    4a3e:	d1 1c       	adc	r13, r1
    4a40:	f3 30       	cpi	r31, 0x03	; 3
    4a42:	09 f6       	brne	.-126    	; 0x49c6 <CalibrateGyrosSlow+0xe2>
			// Save old reading
			GyroOld[axis] = (int16_t)GyroSmooth[axis];
		}
		
		// Increment stable counter to measure how long we are still
		Stable_counter++;
    4a44:	0f 5f       	subi	r16, 0xFF	; 255
    4a46:	1f 4f       	sbci	r17, 0xFF	; 255
		
		// If stable for 5 seconds, do a quick calibrate
		if (Stable_counter > CAL_STABLE_TIME)
    4a48:	09 3c       	cpi	r16, 0xC9	; 201
    4a4a:	11 05       	cpc	r17, r1
    4a4c:	20 f0       	brcs	.+8      	; 0x4a56 <CalibrateGyrosSlow+0x172>
		{
			Gyros_Stable = true;	
			CalibrateGyrosFast();		
    4a4e:	0e 94 1d 24 	call	0x483a	; 0x483a <CalibrateGyrosFast>
		Stable_counter++;
		
		// If stable for 5 seconds, do a quick calibrate
		if (Stable_counter > CAL_STABLE_TIME)
		{
			Gyros_Stable = true;	
    4a52:	81 e0       	ldi	r24, 0x01	; 1
    4a54:	01 c0       	rjmp	.+2      	; 0x4a58 <CalibrateGyrosSlow+0x174>
    4a56:	80 e0       	ldi	r24, 0x00	; 0
    4a58:	e7 e8       	ldi	r30, 0x87	; 135
    4a5a:	f3 e1       	ldi	r31, 0x13	; 19
    4a5c:	31 97       	sbiw	r30, 0x01	; 1
    4a5e:	f1 f7       	brne	.-4      	; 0x4a5c <CalibrateGyrosSlow+0x178>
    4a60:	00 c0       	rjmp	.+0      	; 0x4a62 <CalibrateGyrosSlow+0x17e>
    4a62:	00 00       	nop
	{
		GyroSmooth[axis] = Config.gyroZero[axis];			
	}
	
	// Wait until gyros stable. Timeout after CAL_TIMEOUT seconds
	while (!Gyros_Stable && ((Gyro_seconds <= CAL_TIMEOUT)))
    4a64:	81 11       	cpse	r24, r1
    4a66:	04 c0       	rjmp	.+8      	; 0x4a70 <CalibrateGyrosSlow+0x18c>
    4a68:	fb 89       	ldd	r31, Y+19	; 0x13
    4a6a:	f6 30       	cpi	r31, 0x06	; 6
    4a6c:	08 f4       	brcc	.+2      	; 0x4a70 <CalibrateGyrosSlow+0x18c>
    4a6e:	8c cf       	rjmp	.-232    	; 0x4988 <CalibrateGyrosSlow+0xa4>
		// Otherwise the original saved values are used
	}
	
	// Return success or failure
	return(Gyros_Stable);
}
    4a70:	65 96       	adiw	r28, 0x15	; 21
    4a72:	0f b6       	in	r0, 0x3f	; 63
    4a74:	f8 94       	cli
    4a76:	de bf       	out	0x3e, r29	; 62
    4a78:	0f be       	out	0x3f, r0	; 63
    4a7a:	cd bf       	out	0x3d, r28	; 61
    4a7c:	df 91       	pop	r29
    4a7e:	cf 91       	pop	r28
    4a80:	1f 91       	pop	r17
    4a82:	0f 91       	pop	r16
    4a84:	ff 90       	pop	r15
    4a86:	ef 90       	pop	r14
    4a88:	df 90       	pop	r13
    4a8a:	cf 90       	pop	r12
    4a8c:	bf 90       	pop	r11
    4a8e:	af 90       	pop	r10
    4a90:	9f 90       	pop	r9
    4a92:	8f 90       	pop	r8
    4a94:	7f 90       	pop	r7
    4a96:	6f 90       	pop	r6
    4a98:	5f 90       	pop	r5
    4a9a:	4f 90       	pop	r4
    4a9c:	3f 90       	pop	r3
    4a9e:	2f 90       	pop	r2
    4aa0:	08 95       	ret

00004aa2 <init_i2c_gyros>:
//***************************************************************

void init_i2c_gyros(void)
{
	// First, configure the MPU6050
	writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_PWR_MGMT_1, 0x01); 			// Gyro X clock, awake
    4aa2:	41 e0       	ldi	r20, 0x01	; 1
    4aa4:	6b e6       	ldi	r22, 0x6B	; 107
    4aa6:	80 ed       	ldi	r24, 0xD0	; 208
    4aa8:	0e 94 68 25 	call	0x4ad0	; 0x4ad0 <writeI2Cbyte>
	
	// Make INT pin open-drain so that we can connect it straight to the MPU
	writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_INT_PIN_CFG, 0x40);			// INT output is open-drain
    4aac:	40 e4       	ldi	r20, 0x40	; 64
    4aae:	67 e3       	ldi	r22, 0x37	; 55
    4ab0:	80 ed       	ldi	r24, 0xD0	; 208
    4ab2:	0e 94 68 25 	call	0x4ad0	; 0x4ad0 <writeI2Cbyte>
	
	// MPU6050's internal LPF. Values are 0x06 = 5Hz, (5)10Hz, (4)21Hz, (3)44Hz, (2)94Hz, (1)184Hz LPF, (0)260Hz
	// Software's values are 0 to 6 = 5Hz to 260Hz, so numbering is reversed here.
	writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_CONFIG, (6 - Config.MPU6050_LPF));
    4ab6:	46 e0       	ldi	r20, 0x06	; 6
    4ab8:	80 91 36 06 	lds	r24, 0x0636
    4abc:	48 1b       	sub	r20, r24
    4abe:	6a e1       	ldi	r22, 0x1A	; 26
    4ac0:	80 ed       	ldi	r24, 0xD0	; 208
    4ac2:	0e 94 68 25 	call	0x4ad0	; 0x4ad0 <writeI2Cbyte>
	
	// Now configure gyros
	writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_GYRO_CONFIG, GYROFS2000DEG);	// 2000 deg/sec
    4ac6:	48 e1       	ldi	r20, 0x18	; 24
    4ac8:	6b e1       	ldi	r22, 0x1B	; 27
    4aca:	80 ed       	ldi	r24, 0xD0	; 208
    4acc:	0c 94 68 25 	jmp	0x4ad0	; 0x4ad0 <writeI2Cbyte>

00004ad0 <writeI2Cbyte>:
//************************************************************
// Code
//************************************************************

void writeI2Cbyte(uint8_t address, uint8_t location, uint8_t value)
{
    4ad0:	cf 93       	push	r28
    4ad2:	df 93       	push	r29
    4ad4:	00 d0       	rcall	.+0      	; 0x4ad6 <writeI2Cbyte+0x6>
    4ad6:	cd b7       	in	r28, 0x3d	; 61
    4ad8:	de b7       	in	r29, 0x3e	; 62
    i2c_start_wait(address+I2C_WRITE);				// Set up device address 
    4ada:	4a 83       	std	Y+2, r20	; 0x02
    4adc:	69 83       	std	Y+1, r22	; 0x01
    4ade:	0e 94 0f 46 	call	0x8c1e	; 0x8c1e <i2c_start_wait>
    i2c_write(location);							// Set up register address 
    4ae2:	69 81       	ldd	r22, Y+1	; 0x01
    4ae4:	86 2f       	mov	r24, r22
    4ae6:	0e 94 5f 46 	call	0x8cbe	; 0x8cbe <i2c_write>
    i2c_write(value); 								// Write byte
    4aea:	4a 81       	ldd	r20, Y+2	; 0x02
    4aec:	84 2f       	mov	r24, r20
    4aee:	0e 94 5f 46 	call	0x8cbe	; 0x8cbe <i2c_write>
    i2c_stop();
}
    4af2:	0f 90       	pop	r0
    4af4:	0f 90       	pop	r0
    4af6:	df 91       	pop	r29
    4af8:	cf 91       	pop	r28
void writeI2Cbyte(uint8_t address, uint8_t location, uint8_t value)
{
    i2c_start_wait(address+I2C_WRITE);				// Set up device address 
    i2c_write(location);							// Set up register address 
    i2c_write(value); 								// Write byte
    i2c_stop();
    4afa:	0c 94 50 46 	jmp	0x8ca0	; 0x8ca0 <i2c_stop>

00004afe <readI2CbyteArray>:
}

void readI2CbyteArray(uint8_t address, uint8_t location, uint8_t *array,uint8_t size)
{
    4afe:	cf 92       	push	r12
    4b00:	df 92       	push	r13
    4b02:	ef 92       	push	r14
    4b04:	ff 92       	push	r15
    4b06:	0f 93       	push	r16
    4b08:	1f 93       	push	r17
    4b0a:	cf 93       	push	r28
    4b0c:	df 93       	push	r29
    4b0e:	00 d0       	rcall	.+0      	; 0x4b10 <readI2CbyteArray+0x12>
    4b10:	1f 92       	push	r1
    4b12:	cd b7       	in	r28, 0x3d	; 61
    4b14:	de b7       	in	r29, 0x3e	; 62
    4b16:	18 2f       	mov	r17, r24
    4b18:	e2 2e       	mov	r14, r18
	int i=0;

    i2c_start_wait(address+I2C_WRITE);
    4b1a:	4a 83       	std	Y+2, r20	; 0x02
    4b1c:	5b 83       	std	Y+3, r21	; 0x03
    4b1e:	69 83       	std	Y+1, r22	; 0x01
    4b20:	0e 94 0f 46 	call	0x8c1e	; 0x8c1e <i2c_start_wait>
    i2c_write(location);							// Set up register address 
    4b24:	69 81       	ldd	r22, Y+1	; 0x01
    4b26:	86 2f       	mov	r24, r22
    4b28:	0e 94 5f 46 	call	0x8cbe	; 0x8cbe <i2c_write>
    i2c_rep_start(address+I2C_READ);
    4b2c:	81 e0       	ldi	r24, 0x01	; 1
    4b2e:	81 0f       	add	r24, r17
    4b30:	0e 94 4e 46 	call	0x8c9c	; 0x8c9c <i2c_rep_start>
    4b34:	4a 81       	ldd	r20, Y+2	; 0x02
    4b36:	c4 2e       	mov	r12, r20
    4b38:	5b 81       	ldd	r21, Y+3	; 0x03
    4b3a:	d5 2e       	mov	r13, r21
    i2c_stop();
}

void readI2CbyteArray(uint8_t address, uint8_t location, uint8_t *array,uint8_t size)
{
	int i=0;
    4b3c:	00 e0       	ldi	r16, 0x00	; 0
    4b3e:	10 e0       	ldi	r17, 0x00	; 0

    i2c_start_wait(address+I2C_WRITE);
    i2c_write(location);							// Set up register address 
    i2c_rep_start(address+I2C_READ);

	while (i < size)
    4b40:	f1 2c       	mov	r15, r1
    4b42:	0e 15       	cp	r16, r14
    4b44:	1f 05       	cpc	r17, r15
    4b46:	84 f4       	brge	.+32     	; 0x4b68 <readI2CbyteArray+0x6a>
	{
		if ((i+1)!=size)
    4b48:	0f 5f       	subi	r16, 0xFF	; 255
    4b4a:	1f 4f       	sbci	r17, 0xFF	; 255
    4b4c:	0e 15       	cp	r16, r14
    4b4e:	1f 05       	cpc	r17, r15
    4b50:	19 f0       	breq	.+6      	; 0x4b58 <readI2CbyteArray+0x5a>
		{
			array[i]=i2c_readAck();
    4b52:	0e 94 7f 46 	call	0x8cfe	; 0x8cfe <i2c_readAck>
    4b56:	02 c0       	rjmp	.+4      	; 0x4b5c <readI2CbyteArray+0x5e>
		}
		else
		{
			array[i]=i2c_readNak(); 				// Read without ACK on last byte
    4b58:	0e 94 98 46 	call	0x8d30	; 0x8d30 <i2c_readNak>
    4b5c:	f6 01       	movw	r30, r12
    4b5e:	80 83       	st	Z, r24
    4b60:	ff ef       	ldi	r31, 0xFF	; 255
    4b62:	cf 1a       	sub	r12, r31
    4b64:	df 0a       	sbc	r13, r31
    4b66:	ed cf       	rjmp	.-38     	; 0x4b42 <readI2CbyteArray+0x44>
		}
		i++;
	}

    i2c_stop();
}
    4b68:	0f 90       	pop	r0
    4b6a:	0f 90       	pop	r0
    4b6c:	0f 90       	pop	r0
    4b6e:	df 91       	pop	r29
    4b70:	cf 91       	pop	r28
    4b72:	1f 91       	pop	r17
    4b74:	0f 91       	pop	r16
    4b76:	ff 90       	pop	r15
    4b78:	ef 90       	pop	r14
    4b7a:	df 90       	pop	r13
    4b7c:	cf 90       	pop	r12
			array[i]=i2c_readNak(); 				// Read without ACK on last byte
		}
		i++;
	}

    i2c_stop();
    4b7e:	0c 94 50 46 	jmp	0x8ca0	; 0x8ca0 <i2c_stop>

00004b82 <RotateVector>:
	VectorX = VectorNewA;
	VectorY = VectorNewB;
}

void RotateVector(float angle)
{
    4b82:	4f 92       	push	r4
    4b84:	5f 92       	push	r5
    4b86:	6f 92       	push	r6
    4b88:	7f 92       	push	r7
    4b8a:	8f 92       	push	r8
    4b8c:	9f 92       	push	r9
    4b8e:	af 92       	push	r10
    4b90:	bf 92       	push	r11
    4b92:	cf 92       	push	r12
    4b94:	df 92       	push	r13
    4b96:	ef 92       	push	r14
    4b98:	ff 92       	push	r15
    4b9a:	cf 93       	push	r28
    4b9c:	df 93       	push	r29
    4b9e:	cd b7       	in	r28, 0x3d	; 61
    4ba0:	de b7       	in	r29, 0x3e	; 62
    4ba2:	28 97       	sbiw	r28, 0x08	; 8
    4ba4:	0f b6       	in	r0, 0x3f	; 63
    4ba6:	f8 94       	cli
    4ba8:	de bf       	out	0x3e, r29	; 62
    4baa:	0f be       	out	0x3f, r0	; 63
    4bac:	cd bf       	out	0x3d, r28	; 61
    4bae:	6b 01       	movw	r12, r22
    4bb0:	7c 01       	movw	r14, r24
	VectorNewA = VectorA * small_cos(angle) - VectorB * small_sine(angle);
    4bb2:	80 90 a1 05 	lds	r8, 0x05A1
    4bb6:	90 90 a2 05 	lds	r9, 0x05A2
    4bba:	a0 90 a3 05 	lds	r10, 0x05A3
    4bbe:	b0 90 a4 05 	lds	r11, 0x05A4
float small_cos(float angle)
{
	// cos(angle) = (1 - (angle^2 / 2))
	float temp;
	
	temp = (angle * angle) / 2;
    4bc2:	9b 01       	movw	r18, r22
    4bc4:	ac 01       	movw	r20, r24
    4bc6:	0e 94 e8 48 	call	0x91d0	; 0x91d0 <__mulsf3>
    4bca:	20 e0       	ldi	r18, 0x00	; 0
    4bcc:	30 e0       	ldi	r19, 0x00	; 0
    4bce:	40 e0       	ldi	r20, 0x00	; 0
    4bd0:	5f e3       	ldi	r21, 0x3F	; 63
    4bd2:	0e 94 e8 48 	call	0x91d0	; 0x91d0 <__mulsf3>
    4bd6:	9b 01       	movw	r18, r22
    4bd8:	ac 01       	movw	r20, r24
	temp = 1 - temp;
    4bda:	60 e0       	ldi	r22, 0x00	; 0
    4bdc:	70 e0       	ldi	r23, 0x00	; 0
    4bde:	80 e8       	ldi	r24, 0x80	; 128
    4be0:	9f e3       	ldi	r25, 0x3F	; 63
    4be2:	0e 94 30 47 	call	0x8e60	; 0x8e60 <__subsf3>
    4be6:	69 83       	std	Y+1, r22	; 0x01
    4be8:	7a 83       	std	Y+2, r23	; 0x02
    4bea:	8b 83       	std	Y+3, r24	; 0x03
    4bec:	9c 83       	std	Y+4, r25	; 0x04
	VectorY = VectorNewB;
}

void RotateVector(float angle)
{
	VectorNewA = VectorA * small_cos(angle) - VectorB * small_sine(angle);
    4bee:	40 90 a5 05 	lds	r4, 0x05A5
    4bf2:	50 90 a6 05 	lds	r5, 0x05A6
    4bf6:	60 90 a7 05 	lds	r6, 0x05A7
    4bfa:	70 90 a8 05 	lds	r7, 0x05A8
    4bfe:	9b 01       	movw	r18, r22
    4c00:	ac 01       	movw	r20, r24
    4c02:	c5 01       	movw	r24, r10
    4c04:	b4 01       	movw	r22, r8
    4c06:	0e 94 e8 48 	call	0x91d0	; 0x91d0 <__mulsf3>
    4c0a:	6d 83       	std	Y+5, r22	; 0x05
    4c0c:	7e 83       	std	Y+6, r23	; 0x06
    4c0e:	8f 83       	std	Y+7, r24	; 0x07
    4c10:	98 87       	std	Y+8, r25	; 0x08
    4c12:	a7 01       	movw	r20, r14
    4c14:	96 01       	movw	r18, r12
    4c16:	c3 01       	movw	r24, r6
    4c18:	b2 01       	movw	r22, r4
    4c1a:	0e 94 e8 48 	call	0x91d0	; 0x91d0 <__mulsf3>
    4c1e:	9b 01       	movw	r18, r22
    4c20:	ac 01       	movw	r20, r24
    4c22:	6d 81       	ldd	r22, Y+5	; 0x05
    4c24:	7e 81       	ldd	r23, Y+6	; 0x06
    4c26:	8f 81       	ldd	r24, Y+7	; 0x07
    4c28:	98 85       	ldd	r25, Y+8	; 0x08
    4c2a:	0e 94 30 47 	call	0x8e60	; 0x8e60 <__subsf3>
    4c2e:	60 93 8d 05 	sts	0x058D, r22
    4c32:	70 93 8e 05 	sts	0x058E, r23
    4c36:	80 93 8f 05 	sts	0x058F, r24
    4c3a:	90 93 90 05 	sts	0x0590, r25
	VectorNewB = VectorA * small_sine(angle) + VectorB * small_cos(angle);
    4c3e:	a7 01       	movw	r20, r14
    4c40:	96 01       	movw	r18, r12
    4c42:	c5 01       	movw	r24, r10
    4c44:	b4 01       	movw	r22, r8
    4c46:	0e 94 e8 48 	call	0x91d0	; 0x91d0 <__mulsf3>
    4c4a:	6b 01       	movw	r12, r22
    4c4c:	7c 01       	movw	r14, r24
    4c4e:	29 81       	ldd	r18, Y+1	; 0x01
    4c50:	3a 81       	ldd	r19, Y+2	; 0x02
    4c52:	4b 81       	ldd	r20, Y+3	; 0x03
    4c54:	5c 81       	ldd	r21, Y+4	; 0x04
    4c56:	c3 01       	movw	r24, r6
    4c58:	b2 01       	movw	r22, r4
    4c5a:	0e 94 e8 48 	call	0x91d0	; 0x91d0 <__mulsf3>
    4c5e:	9b 01       	movw	r18, r22
    4c60:	ac 01       	movw	r20, r24
    4c62:	c7 01       	movw	r24, r14
    4c64:	b6 01       	movw	r22, r12
    4c66:	0e 94 31 47 	call	0x8e62	; 0x8e62 <__addsf3>
    4c6a:	60 93 71 05 	sts	0x0571, r22
    4c6e:	70 93 72 05 	sts	0x0572, r23
    4c72:	80 93 73 05 	sts	0x0573, r24
    4c76:	90 93 74 05 	sts	0x0574, r25
}
    4c7a:	28 96       	adiw	r28, 0x08	; 8
    4c7c:	0f b6       	in	r0, 0x3f	; 63
    4c7e:	f8 94       	cli
    4c80:	de bf       	out	0x3e, r29	; 62
    4c82:	0f be       	out	0x3f, r0	; 63
    4c84:	cd bf       	out	0x3d, r28	; 61
    4c86:	df 91       	pop	r29
    4c88:	cf 91       	pop	r28
    4c8a:	ff 90       	pop	r15
    4c8c:	ef 90       	pop	r14
    4c8e:	df 90       	pop	r13
    4c90:	cf 90       	pop	r12
    4c92:	bf 90       	pop	r11
    4c94:	af 90       	pop	r10
    4c96:	9f 90       	pop	r9
    4c98:	8f 90       	pop	r8
    4c9a:	7f 90       	pop	r7
    4c9c:	6f 90       	pop	r6
    4c9e:	5f 90       	pop	r5
    4ca0:	4f 90       	pop	r4
    4ca2:	08 95       	ret

00004ca4 <thetascale>:

float thetascale(float gyro, float intervalf)
{
    4ca4:	cf 92       	push	r12
    4ca6:	df 92       	push	r13
    4ca8:	ef 92       	push	r14
    4caa:	ff 92       	push	r15
    4cac:	69 01       	movw	r12, r18
    4cae:	7a 01       	movw	r14, r20
	
	// intervalf = time in seconds since last measurement
	// GYROSENSRADIANS = conversion from raw gyro data to rad/s
	// theta = actual number of radians moved

	theta = (gyro * GYROSENSRADIANS * intervalf);
    4cb0:	25 ef       	ldi	r18, 0xF5	; 245
    4cb2:	31 ea       	ldi	r19, 0xA1	; 161
    4cb4:	4b e8       	ldi	r20, 0x8B	; 139
    4cb6:	5c e3       	ldi	r21, 0x3C	; 60
    4cb8:	0e 94 e8 48 	call	0x91d0	; 0x91d0 <__mulsf3>
    4cbc:	a7 01       	movw	r20, r14
    4cbe:	96 01       	movw	r18, r12
    4cc0:	0e 94 e8 48 	call	0x91d0	; 0x91d0 <__mulsf3>
    4cc4:	6b 01       	movw	r12, r22
    4cc6:	7c 01       	movw	r14, r24
	
	// The sin() and cos() functions don't appreciate large 
	// input values. Limit the input values to +/-15 degrees. 
	
	if (theta > maxdeltaangle)
    4cc8:	26 ea       	ldi	r18, 0xA6	; 166
    4cca:	3a e0       	ldi	r19, 0x0A	; 10
    4ccc:	46 e8       	ldi	r20, 0x86	; 134
    4cce:	5e e3       	ldi	r21, 0x3E	; 62
    4cd0:	0e 94 e4 48 	call	0x91c8	; 0x91c8 <__gesf2>
    4cd4:	18 16       	cp	r1, r24
    4cd6:	9c f0       	brlt	.+38     	; 0x4cfe <thetascale+0x5a>
	{
		theta = maxdeltaangle;
	}
	
	if (theta < -maxdeltaangle)
    4cd8:	26 ea       	ldi	r18, 0xA6	; 166
    4cda:	3a e0       	ldi	r19, 0x0A	; 10
    4cdc:	46 e8       	ldi	r20, 0x86	; 134
    4cde:	5e eb       	ldi	r21, 0xBE	; 190
    4ce0:	c7 01       	movw	r24, r14
    4ce2:	b6 01       	movw	r22, r12
    4ce4:	0e 94 95 47 	call	0x8f2a	; 0x8f2a <__cmpsf2>
    4ce8:	87 ff       	sbrs	r24, 7
    4cea:	11 c0       	rjmp	.+34     	; 0x4d0e <thetascale+0x6a>
	{
		theta = -maxdeltaangle;
    4cec:	86 ea       	ldi	r24, 0xA6	; 166
    4cee:	c8 2e       	mov	r12, r24
    4cf0:	8a e0       	ldi	r24, 0x0A	; 10
    4cf2:	d8 2e       	mov	r13, r24
    4cf4:	86 e8       	ldi	r24, 0x86	; 134
    4cf6:	e8 2e       	mov	r14, r24
    4cf8:	8e eb       	ldi	r24, 0xBE	; 190
    4cfa:	f8 2e       	mov	r15, r24
    4cfc:	08 c0       	rjmp	.+16     	; 0x4d0e <thetascale+0x6a>
	// The sin() and cos() functions don't appreciate large 
	// input values. Limit the input values to +/-15 degrees. 
	
	if (theta > maxdeltaangle)
	{
		theta = maxdeltaangle;
    4cfe:	96 ea       	ldi	r25, 0xA6	; 166
    4d00:	c9 2e       	mov	r12, r25
    4d02:	9a e0       	ldi	r25, 0x0A	; 10
    4d04:	d9 2e       	mov	r13, r25
    4d06:	96 e8       	ldi	r25, 0x86	; 134
    4d08:	e9 2e       	mov	r14, r25
    4d0a:	9e e3       	ldi	r25, 0x3E	; 62
    4d0c:	f9 2e       	mov	r15, r25
	{
		theta = -maxdeltaangle;
	}
	
	return theta;
}
    4d0e:	c7 01       	movw	r24, r14
    4d10:	b6 01       	movw	r22, r12
    4d12:	ff 90       	pop	r15
    4d14:	ef 90       	pop	r14
    4d16:	df 90       	pop	r13
    4d18:	cf 90       	pop	r12
    4d1a:	08 95       	ret

00004d1c <Rotate3dVector>:
	angle[ROLL] = (int16_t)(EulerAngleRoll * -100);
	angle[PITCH] = (int16_t)(EulerAnglePitch * -100);
}

void Rotate3dVector(float intervalf)
{
    4d1c:	8f 92       	push	r8
    4d1e:	9f 92       	push	r9
    4d20:	af 92       	push	r10
    4d22:	bf 92       	push	r11
    4d24:	cf 92       	push	r12
    4d26:	df 92       	push	r13
    4d28:	ef 92       	push	r14
    4d2a:	ff 92       	push	r15
    4d2c:	0f 93       	push	r16
    4d2e:	1f 93       	push	r17
    4d30:	6b 01       	movw	r12, r22
    4d32:	7c 01       	movw	r14, r24
	float theta;
	
	// Rotate around X axis (pitch)
	theta = thetascale(GyroPitchVC, intervalf);
    4d34:	60 91 81 05 	lds	r22, 0x0581
    4d38:	70 91 82 05 	lds	r23, 0x0582
    4d3c:	80 91 83 05 	lds	r24, 0x0583
    4d40:	90 91 84 05 	lds	r25, 0x0584
    4d44:	a7 01       	movw	r20, r14
    4d46:	96 01       	movw	r18, r12
    4d48:	0e 94 52 26 	call	0x4ca4	; 0x4ca4 <thetascale>
	VectorA = VectorY;
    4d4c:	00 91 24 05 	lds	r16, 0x0524
    4d50:	10 91 25 05 	lds	r17, 0x0525
    4d54:	20 91 26 05 	lds	r18, 0x0526
    4d58:	30 91 27 05 	lds	r19, 0x0527
    4d5c:	00 93 a1 05 	sts	0x05A1, r16
    4d60:	10 93 a2 05 	sts	0x05A2, r17
    4d64:	20 93 a3 05 	sts	0x05A3, r18
    4d68:	30 93 a4 05 	sts	0x05A4, r19
	VectorB = VectorZ;
    4d6c:	00 91 00 05 	lds	r16, 0x0500
    4d70:	10 91 01 05 	lds	r17, 0x0501
    4d74:	20 91 02 05 	lds	r18, 0x0502
    4d78:	30 91 03 05 	lds	r19, 0x0503
    4d7c:	00 93 a5 05 	sts	0x05A5, r16
    4d80:	10 93 a6 05 	sts	0x05A6, r17
    4d84:	20 93 a7 05 	sts	0x05A7, r18
    4d88:	30 93 a8 05 	sts	0x05A8, r19
	RotateVector(theta);
    4d8c:	0e 94 c1 25 	call	0x4b82	; 0x4b82 <RotateVector>
	VectorY = VectorNewA;
    4d90:	80 91 8d 05 	lds	r24, 0x058D
    4d94:	90 91 8e 05 	lds	r25, 0x058E
    4d98:	a0 91 8f 05 	lds	r26, 0x058F
    4d9c:	b0 91 90 05 	lds	r27, 0x0590
    4da0:	80 93 24 05 	sts	0x0524, r24
    4da4:	90 93 25 05 	sts	0x0525, r25
    4da8:	a0 93 26 05 	sts	0x0526, r26
    4dac:	b0 93 27 05 	sts	0x0527, r27
	VectorZ = VectorNewB;
    4db0:	80 90 71 05 	lds	r8, 0x0571
    4db4:	90 90 72 05 	lds	r9, 0x0572
    4db8:	a0 90 73 05 	lds	r10, 0x0573
    4dbc:	b0 90 74 05 	lds	r11, 0x0574
    4dc0:	80 92 00 05 	sts	0x0500, r8
    4dc4:	90 92 01 05 	sts	0x0501, r9
    4dc8:	a0 92 02 05 	sts	0x0502, r10
    4dcc:	b0 92 03 05 	sts	0x0503, r11

	// Rotate around Y axis (roll)
	theta = thetascale (GyroRollVC, intervalf);
    4dd0:	60 91 85 05 	lds	r22, 0x0585
    4dd4:	70 91 86 05 	lds	r23, 0x0586
    4dd8:	80 91 87 05 	lds	r24, 0x0587
    4ddc:	90 91 88 05 	lds	r25, 0x0588
    4de0:	a7 01       	movw	r20, r14
    4de2:	96 01       	movw	r18, r12
    4de4:	0e 94 52 26 	call	0x4ca4	; 0x4ca4 <thetascale>
	VectorA = VectorX;
    4de8:	00 91 28 05 	lds	r16, 0x0528
    4dec:	10 91 29 05 	lds	r17, 0x0529
    4df0:	20 91 2a 05 	lds	r18, 0x052A
    4df4:	30 91 2b 05 	lds	r19, 0x052B
    4df8:	00 93 a1 05 	sts	0x05A1, r16
    4dfc:	10 93 a2 05 	sts	0x05A2, r17
    4e00:	20 93 a3 05 	sts	0x05A3, r18
    4e04:	30 93 a4 05 	sts	0x05A4, r19
	VectorB = VectorZ;
    4e08:	80 92 a5 05 	sts	0x05A5, r8
    4e0c:	90 92 a6 05 	sts	0x05A6, r9
    4e10:	a0 92 a7 05 	sts	0x05A7, r10
    4e14:	b0 92 a8 05 	sts	0x05A8, r11
	RotateVector(theta);
    4e18:	0e 94 c1 25 	call	0x4b82	; 0x4b82 <RotateVector>
	VectorX = VectorNewA;
    4e1c:	80 90 8d 05 	lds	r8, 0x058D
    4e20:	90 90 8e 05 	lds	r9, 0x058E
    4e24:	a0 90 8f 05 	lds	r10, 0x058F
    4e28:	b0 90 90 05 	lds	r11, 0x0590
    4e2c:	80 92 28 05 	sts	0x0528, r8
    4e30:	90 92 29 05 	sts	0x0529, r9
    4e34:	a0 92 2a 05 	sts	0x052A, r10
    4e38:	b0 92 2b 05 	sts	0x052B, r11
	VectorZ = VectorNewB;
    4e3c:	80 91 71 05 	lds	r24, 0x0571
    4e40:	90 91 72 05 	lds	r25, 0x0572
    4e44:	a0 91 73 05 	lds	r26, 0x0573
    4e48:	b0 91 74 05 	lds	r27, 0x0574
    4e4c:	80 93 00 05 	sts	0x0500, r24
    4e50:	90 93 01 05 	sts	0x0501, r25
    4e54:	a0 93 02 05 	sts	0x0502, r26
    4e58:	b0 93 03 05 	sts	0x0503, r27

	// Rotate around Z axis (yaw)
	theta = thetascale(gyroADC[YAW], intervalf);
    4e5c:	60 91 6f 05 	lds	r22, 0x056F
    4e60:	70 91 70 05 	lds	r23, 0x0570
    4e64:	88 27       	eor	r24, r24
    4e66:	77 fd       	sbrc	r23, 7
    4e68:	80 95       	com	r24
    4e6a:	98 2f       	mov	r25, r24
    4e6c:	0e 94 34 48 	call	0x9068	; 0x9068 <__floatsisf>
    4e70:	a7 01       	movw	r20, r14
    4e72:	96 01       	movw	r18, r12
    4e74:	0e 94 52 26 	call	0x4ca4	; 0x4ca4 <thetascale>
	VectorA = VectorX;
    4e78:	80 92 a1 05 	sts	0x05A1, r8
    4e7c:	90 92 a2 05 	sts	0x05A2, r9
    4e80:	a0 92 a3 05 	sts	0x05A3, r10
    4e84:	b0 92 a4 05 	sts	0x05A4, r11
	VectorB = VectorY;
    4e88:	c0 90 24 05 	lds	r12, 0x0524
    4e8c:	d0 90 25 05 	lds	r13, 0x0525
    4e90:	e0 90 26 05 	lds	r14, 0x0526
    4e94:	f0 90 27 05 	lds	r15, 0x0527
    4e98:	c0 92 a5 05 	sts	0x05A5, r12
    4e9c:	d0 92 a6 05 	sts	0x05A6, r13
    4ea0:	e0 92 a7 05 	sts	0x05A7, r14
    4ea4:	f0 92 a8 05 	sts	0x05A8, r15
	RotateVector(theta);
    4ea8:	0e 94 c1 25 	call	0x4b82	; 0x4b82 <RotateVector>
	VectorX = VectorNewA;
    4eac:	80 91 8d 05 	lds	r24, 0x058D
    4eb0:	90 91 8e 05 	lds	r25, 0x058E
    4eb4:	a0 91 8f 05 	lds	r26, 0x058F
    4eb8:	b0 91 90 05 	lds	r27, 0x0590
    4ebc:	80 93 28 05 	sts	0x0528, r24
    4ec0:	90 93 29 05 	sts	0x0529, r25
    4ec4:	a0 93 2a 05 	sts	0x052A, r26
    4ec8:	b0 93 2b 05 	sts	0x052B, r27
	VectorY = VectorNewB;
    4ecc:	80 91 71 05 	lds	r24, 0x0571
    4ed0:	90 91 72 05 	lds	r25, 0x0572
    4ed4:	a0 91 73 05 	lds	r26, 0x0573
    4ed8:	b0 91 74 05 	lds	r27, 0x0574
    4edc:	80 93 24 05 	sts	0x0524, r24
    4ee0:	90 93 25 05 	sts	0x0525, r25
    4ee4:	a0 93 26 05 	sts	0x0526, r26
    4ee8:	b0 93 27 05 	sts	0x0527, r27
}
    4eec:	1f 91       	pop	r17
    4eee:	0f 91       	pop	r16
    4ef0:	ff 90       	pop	r15
    4ef2:	ef 90       	pop	r14
    4ef4:	df 90       	pop	r13
    4ef6:	cf 90       	pop	r12
    4ef8:	bf 90       	pop	r11
    4efa:	af 90       	pop	r10
    4efc:	9f 90       	pop	r9
    4efe:	8f 90       	pop	r8
    4f00:	08 95       	ret

00004f02 <ext2>:
	EulerAngleRoll = ext2(VectorX);
	EulerAnglePitch = ext2(VectorY);
}

float ext2(float Vector)
{
    4f02:	cf 92       	push	r12
    4f04:	df 92       	push	r13
    4f06:	ef 92       	push	r14
    4f08:	ff 92       	push	r15
	float temp;
	
	// Rough translation to Euler angles
	temp = Vector * 90;
    4f0a:	20 e0       	ldi	r18, 0x00	; 0
    4f0c:	30 e0       	ldi	r19, 0x00	; 0
    4f0e:	44 eb       	ldi	r20, 0xB4	; 180
    4f10:	52 e4       	ldi	r21, 0x42	; 66
    4f12:	0e 94 e8 48 	call	0x91d0	; 0x91d0 <__mulsf3>
    4f16:	6b 01       	movw	r12, r22
    4f18:	7c 01       	movw	r14, r24

	// Change 0-90-0 to 0-90-180 so that
	// swap happens at 100% inverted
	if (VectorZ < 0)
    4f1a:	20 e0       	ldi	r18, 0x00	; 0
    4f1c:	30 e0       	ldi	r19, 0x00	; 0
    4f1e:	a9 01       	movw	r20, r18
    4f20:	60 91 00 05 	lds	r22, 0x0500
    4f24:	70 91 01 05 	lds	r23, 0x0501
    4f28:	80 91 02 05 	lds	r24, 0x0502
    4f2c:	90 91 03 05 	lds	r25, 0x0503
    4f30:	0e 94 95 47 	call	0x8f2a	; 0x8f2a <__cmpsf2>
    4f34:	87 ff       	sbrs	r24, 7
    4f36:	18 c0       	rjmp	.+48     	; 0x4f68 <ext2+0x66>
	{
		// CW rotations
		if (temp > 0)
    4f38:	20 e0       	ldi	r18, 0x00	; 0
    4f3a:	30 e0       	ldi	r19, 0x00	; 0
    4f3c:	a9 01       	movw	r20, r18
    4f3e:	c7 01       	movw	r24, r14
    4f40:	b6 01       	movw	r22, r12
    4f42:	0e 94 e4 48 	call	0x91c8	; 0x91c8 <__gesf2>
		{
			temp = 180 - temp;
    4f46:	a7 01       	movw	r20, r14
    4f48:	96 01       	movw	r18, r12
	// Change 0-90-0 to 0-90-180 so that
	// swap happens at 100% inverted
	if (VectorZ < 0)
	{
		// CW rotations
		if (temp > 0)
    4f4a:	18 16       	cp	r1, r24
    4f4c:	2c f4       	brge	.+10     	; 0x4f58 <ext2+0x56>
		{
			temp = 180 - temp;
    4f4e:	60 e0       	ldi	r22, 0x00	; 0
    4f50:	70 e0       	ldi	r23, 0x00	; 0
    4f52:	84 e3       	ldi	r24, 0x34	; 52
    4f54:	93 e4       	ldi	r25, 0x43	; 67
    4f56:	04 c0       	rjmp	.+8      	; 0x4f60 <ext2+0x5e>
		}
		// CCW rotations
		else
		{
			temp = -180 - temp;
    4f58:	60 e0       	ldi	r22, 0x00	; 0
    4f5a:	70 e0       	ldi	r23, 0x00	; 0
    4f5c:	84 e3       	ldi	r24, 0x34	; 52
    4f5e:	93 ec       	ldi	r25, 0xC3	; 195
    4f60:	0e 94 30 47 	call	0x8e60	; 0x8e60 <__subsf3>
    4f64:	6b 01       	movw	r12, r22
    4f66:	7c 01       	movw	r14, r24
		}
	}

	return (temp);
}
    4f68:	c7 01       	movw	r24, r14
    4f6a:	b6 01       	movw	r22, r12
    4f6c:	ff 90       	pop	r15
    4f6e:	ef 90       	pop	r14
    4f70:	df 90       	pop	r13
    4f72:	cf 90       	pop	r12
    4f74:	08 95       	ret

00004f76 <ExtractEulerAngles>:
	return temp;
}

void ExtractEulerAngles(void)
{
	EulerAngleRoll = ext2(VectorX);
    4f76:	60 91 28 05 	lds	r22, 0x0528
    4f7a:	70 91 29 05 	lds	r23, 0x0529
    4f7e:	80 91 2a 05 	lds	r24, 0x052A
    4f82:	90 91 2b 05 	lds	r25, 0x052B
    4f86:	0e 94 81 27 	call	0x4f02	; 0x4f02 <ext2>
    4f8a:	60 93 9d 05 	sts	0x059D, r22
    4f8e:	70 93 9e 05 	sts	0x059E, r23
    4f92:	80 93 9f 05 	sts	0x059F, r24
    4f96:	90 93 a0 05 	sts	0x05A0, r25
	EulerAnglePitch = ext2(VectorY);
    4f9a:	60 91 24 05 	lds	r22, 0x0524
    4f9e:	70 91 25 05 	lds	r23, 0x0525
    4fa2:	80 91 26 05 	lds	r24, 0x0526
    4fa6:	90 91 27 05 	lds	r25, 0x0527
    4faa:	0e 94 81 27 	call	0x4f02	; 0x4f02 <ext2>
    4fae:	60 93 75 05 	sts	0x0575, r22
    4fb2:	70 93 76 05 	sts	0x0576, r23
    4fb6:	80 93 77 05 	sts	0x0577, r24
    4fba:	90 93 78 05 	sts	0x0578, r25
    4fbe:	08 95       	ret

00004fc0 <imu_update>:
//  float_var = both.flt;
//
//

void imu_update(uint32_t period)
{
    4fc0:	4f 92       	push	r4
    4fc2:	5f 92       	push	r5
    4fc4:	6f 92       	push	r6
    4fc6:	7f 92       	push	r7
    4fc8:	8f 92       	push	r8
    4fca:	9f 92       	push	r9
    4fcc:	af 92       	push	r10
    4fce:	bf 92       	push	r11
    4fd0:	cf 92       	push	r12
    4fd2:	df 92       	push	r13
    4fd4:	ef 92       	push	r14
    4fd6:	ff 92       	push	r15
    4fd8:	0f 93       	push	r16
    4fda:	1f 93       	push	r17
    4fdc:	cf 93       	push	r28
    4fde:	df 93       	push	r29
    4fe0:	cd b7       	in	r28, 0x3d	; 61
    4fe2:	de b7       	in	r29, 0x3e	; 62
    4fe4:	60 97       	sbiw	r28, 0x10	; 16
    4fe6:	0f b6       	in	r0, 0x3f	; 63
    4fe8:	f8 94       	cli
    4fea:	de bf       	out	0x3e, r29	; 62
    4fec:	0f be       	out	0x3f, r0	; 63
    4fee:	cd bf       	out	0x3d, r28	; 61
	uint32_t	roll_sq, pitch_sq, yaw_sq;
	uint32_t 	AccMag = 0;
		
	// Work out interval in seconds
	// Convert (period) from units of 400ns (1/2500000) to seconds (1s/400ns = 2500000)
	tempf = period;						// Promote uint32_t to float
    4ff0:	0e 94 32 48 	call	0x9064	; 0x9064 <__floatunsisf>
    4ff4:	69 83       	std	Y+1, r22	; 0x01
    4ff6:	7a 83       	std	Y+2, r23	; 0x02
    4ff8:	8b 83       	std	Y+3, r24	; 0x03
    4ffa:	9c 83       	std	Y+4, r25	; 0x04
	intervalf = tempf/2500000.0f;		// This gives the period in seconds
    4ffc:	20 e8       	ldi	r18, 0x80	; 128
    4ffe:	36 e9       	ldi	r19, 0x96	; 150
    5000:	48 e1       	ldi	r20, 0x18	; 24
    5002:	5a e4       	ldi	r21, 0x4A	; 74
    5004:	0e 94 99 47 	call	0x8f32	; 0x8f32 <__divsf3>
    5008:	6d 87       	std	Y+13, r22	; 0x0d
    500a:	7e 87       	std	Y+14, r23	; 0x0e
    500c:	8f 87       	std	Y+15, r24	; 0x0f
    500e:	98 8b       	std	Y+16, r25	; 0x10

	// Lookup actual LPF value and promote
	// Note: Two sets of values for normal and high-speed mode
	if (Config.Servo_rate != FAST)
    5010:	80 91 d3 05 	lds	r24, 0x05D3
    5014:	60 91 37 06 	lds	r22, 0x0637
    5018:	82 30       	cpi	r24, 0x02	; 2
    501a:	39 f0       	breq	.+14     	; 0x502a <imu_update+0x6a>
	{
		//tempf = pgm_read_float(&LPF_lookup[Config.Acc_LPF]); 
		memcpy_P(&tempf, &LPF_lookup[Config.Acc_LPF], sizeof(float)); 
    501c:	84 e0       	ldi	r24, 0x04	; 4
    501e:	68 02       	muls	r22, r24
    5020:	b0 01       	movw	r22, r0
    5022:	11 24       	eor	r1, r1
    5024:	6f 5c       	subi	r22, 0xCF	; 207
    5026:	77 4e       	sbci	r23, 0xE7	; 231
    5028:	06 c0       	rjmp	.+12     	; 0x5036 <imu_update+0x76>
	}
	else
	{
		//tempf = pgm_read_float(&LPF_lookup_HS[Config.Acc_LPF]); 
		memcpy_P(&tempf, &LPF_lookup_HS[Config.Acc_LPF], sizeof(float)); 
    502a:	94 e0       	ldi	r25, 0x04	; 4
    502c:	69 02       	muls	r22, r25
    502e:	b0 01       	movw	r22, r0
    5030:	11 24       	eor	r1, r1
    5032:	6f 5e       	subi	r22, 0xEF	; 239
    5034:	77 4e       	sbci	r23, 0xE7	; 231
    5036:	44 e0       	ldi	r20, 0x04	; 4
    5038:	50 e0       	ldi	r21, 0x00	; 0
    503a:	ce 01       	movw	r24, r28
    503c:	01 96       	adiw	r24, 0x01	; 1
    503e:	0e 94 eb 49 	call	0x93d6	; 0x93d6 <memcpy_P>
	for (axis = 0; axis < NUMBEROFAXIS; axis++)
	{
		accADCf = accADC[axis]; // Promote
		
		// Acc LPF
		if (Config.Acc_LPF != NOFILTER)
    5042:	50 90 37 06 	lds	r5, 0x0637
		{
			// Acc LPF
			accSmooth[axis] = (accSmooth[axis] * (tempf - 1.0f) - accADCf) / tempf;
    5046:	c9 80       	ldd	r12, Y+1	; 0x01
    5048:	da 80       	ldd	r13, Y+2	; 0x02
    504a:	eb 80       	ldd	r14, Y+3	; 0x03
    504c:	fc 80       	ldd	r15, Y+4	; 0x04
    504e:	2c e3       	ldi	r18, 0x3C	; 60
    5050:	62 2e       	mov	r6, r18
    5052:	25 e0       	ldi	r18, 0x05	; 5
    5054:	72 2e       	mov	r7, r18
    5056:	01 e9       	ldi	r16, 0x91	; 145
    5058:	15 e0       	ldi	r17, 0x05	; 5
	}
	
	// Smooth Acc signals - note that accSmooth is in [ROLL, PITCH, YAW] order
	for (axis = 0; axis < NUMBEROFAXIS; axis++)
	{
		accADCf = accADC[axis]; // Promote
    505a:	d3 01       	movw	r26, r6
    505c:	6d 91       	ld	r22, X+
    505e:	7d 91       	ld	r23, X+
    5060:	3d 01       	movw	r6, r26
    5062:	88 27       	eor	r24, r24
    5064:	77 fd       	sbrc	r23, 7
    5066:	80 95       	com	r24
    5068:	98 2f       	mov	r25, r24
    506a:	0e 94 34 48 	call	0x9068	; 0x9068 <__floatsisf>
    506e:	4b 01       	movw	r8, r22
    5070:	5c 01       	movw	r10, r24
		
		// Acc LPF
		if (Config.Acc_LPF != NOFILTER)
    5072:	b7 e0       	ldi	r27, 0x07	; 7
    5074:	5b 16       	cp	r5, r27
    5076:	f1 f0       	breq	.+60     	; 0x50b4 <imu_update+0xf4>
		{
			// Acc LPF
			accSmooth[axis] = (accSmooth[axis] * (tempf - 1.0f) - accADCf) / tempf;
    5078:	20 e0       	ldi	r18, 0x00	; 0
    507a:	30 e0       	ldi	r19, 0x00	; 0
    507c:	40 e8       	ldi	r20, 0x80	; 128
    507e:	5f e3       	ldi	r21, 0x3F	; 63
    5080:	c7 01       	movw	r24, r14
    5082:	b6 01       	movw	r22, r12
    5084:	0e 94 30 47 	call	0x8e60	; 0x8e60 <__subsf3>
    5088:	f8 01       	movw	r30, r16
    508a:	20 81       	ld	r18, Z
    508c:	31 81       	ldd	r19, Z+1	; 0x01
    508e:	42 81       	ldd	r20, Z+2	; 0x02
    5090:	53 81       	ldd	r21, Z+3	; 0x03
    5092:	0e 94 e8 48 	call	0x91d0	; 0x91d0 <__mulsf3>
    5096:	a5 01       	movw	r20, r10
    5098:	94 01       	movw	r18, r8
    509a:	0e 94 30 47 	call	0x8e60	; 0x8e60 <__subsf3>
    509e:	a7 01       	movw	r20, r14
    50a0:	96 01       	movw	r18, r12
    50a2:	0e 94 99 47 	call	0x8f32	; 0x8f32 <__divsf3>
    50a6:	d8 01       	movw	r26, r16
    50a8:	6d 93       	st	X+, r22
    50aa:	7d 93       	st	X+, r23
    50ac:	8d 93       	st	X+, r24
    50ae:	9c 93       	st	X, r25
    50b0:	13 97       	sbiw	r26, 0x03	; 3
    50b2:	09 c0       	rjmp	.+18     	; 0x50c6 <imu_update+0x106>
		}
		else
		{
			// Use raw accADC[axis] as source for acc values
			accSmooth[axis] =  -accADCf;
    50b4:	b7 fa       	bst	r11, 7
    50b6:	b0 94       	com	r11
    50b8:	b7 f8       	bld	r11, 7
    50ba:	b0 94       	com	r11
    50bc:	f8 01       	movw	r30, r16
    50be:	80 82       	st	Z, r8
    50c0:	91 82       	std	Z+1, r9	; 0x01
    50c2:	a2 82       	std	Z+2, r10	; 0x02
    50c4:	b3 82       	std	Z+3, r11	; 0x03
    50c6:	0c 5f       	subi	r16, 0xFC	; 252
    50c8:	1f 4f       	sbci	r17, 0xFF	; 255
		//tempf = pgm_read_float(&LPF_lookup_HS[Config.Acc_LPF]); 
		memcpy_P(&tempf, &LPF_lookup_HS[Config.Acc_LPF], sizeof(float)); 
	}
	
	// Smooth Acc signals - note that accSmooth is in [ROLL, PITCH, YAW] order
	for (axis = 0; axis < NUMBEROFAXIS; axis++)
    50ca:	f2 e4       	ldi	r31, 0x42	; 66
    50cc:	6f 16       	cp	r6, r31
    50ce:	f5 e0       	ldi	r31, 0x05	; 5
    50d0:	7f 06       	cpc	r7, r31
    50d2:	19 f6       	brne	.-122    	; 0x505a <imu_update+0x9a>
			accSmooth[axis] =  -accADCf;
		}
	}
	
	// Add correction data to gyro inputs based on difference between Euler angles and acc angles
	AccAngleRoll = accSmooth[ROLL] * SMALLANGLEFACTOR;		// KK2 - AccYfilter
    50d4:	23 ec       	ldi	r18, 0xC3	; 195
    50d6:	35 ef       	ldi	r19, 0xF5	; 245
    50d8:	48 e2       	ldi	r20, 0x28	; 40
    50da:	5f e3       	ldi	r21, 0x3F	; 63
    50dc:	60 91 91 05 	lds	r22, 0x0591
    50e0:	70 91 92 05 	lds	r23, 0x0592
    50e4:	80 91 93 05 	lds	r24, 0x0593
    50e8:	90 91 94 05 	lds	r25, 0x0594
    50ec:	0e 94 e8 48 	call	0x91d0	; 0x91d0 <__mulsf3>
    50f0:	6d 83       	std	Y+5, r22	; 0x05
    50f2:	7e 83       	std	Y+6, r23	; 0x06
    50f4:	8f 83       	std	Y+7, r24	; 0x07
    50f6:	98 87       	std	Y+8, r25	; 0x08
    50f8:	60 93 79 05 	sts	0x0579, r22
    50fc:	70 93 7a 05 	sts	0x057A, r23
    5100:	80 93 7b 05 	sts	0x057B, r24
    5104:	90 93 7c 05 	sts	0x057C, r25
	AccAnglePitch = accSmooth[PITCH] * SMALLANGLEFACTOR;
    5108:	23 ec       	ldi	r18, 0xC3	; 195
    510a:	35 ef       	ldi	r19, 0xF5	; 245
    510c:	48 e2       	ldi	r20, 0x28	; 40
    510e:	5f e3       	ldi	r21, 0x3F	; 63
    5110:	60 91 95 05 	lds	r22, 0x0595
    5114:	70 91 96 05 	lds	r23, 0x0596
    5118:	80 91 97 05 	lds	r24, 0x0597
    511c:	90 91 98 05 	lds	r25, 0x0598
    5120:	0e 94 e8 48 	call	0x91d0	; 0x91d0 <__mulsf3>
    5124:	69 87       	std	Y+9, r22	; 0x09
    5126:	7a 87       	std	Y+10, r23	; 0x0a
    5128:	8b 87       	std	Y+11, r24	; 0x0b
    512a:	9c 87       	std	Y+12, r25	; 0x0c
    512c:	60 93 7d 05 	sts	0x057D, r22
    5130:	70 93 7e 05 	sts	0x057E, r23
    5134:	80 93 7f 05 	sts	0x057F, r24
    5138:	90 93 80 05 	sts	0x0580, r25

	// Copy/promote gyro values for rotate
	GyroRollVC = gyroADC[ROLL];								// KK2 - GyroRoll
    513c:	60 91 6b 05 	lds	r22, 0x056B
    5140:	70 91 6c 05 	lds	r23, 0x056C
    5144:	88 27       	eor	r24, r24
    5146:	77 fd       	sbrc	r23, 7
    5148:	80 95       	com	r24
    514a:	98 2f       	mov	r25, r24
    514c:	0e 94 34 48 	call	0x9068	; 0x9068 <__floatsisf>
    5150:	2b 01       	movw	r4, r22
    5152:	3c 01       	movw	r6, r24
    5154:	60 93 85 05 	sts	0x0585, r22
    5158:	70 93 86 05 	sts	0x0586, r23
    515c:	80 93 87 05 	sts	0x0587, r24
    5160:	90 93 88 05 	sts	0x0588, r25
	GyroPitchVC = gyroADC[PITCH];
    5164:	60 91 6d 05 	lds	r22, 0x056D
    5168:	70 91 6e 05 	lds	r23, 0x056E
    516c:	88 27       	eor	r24, r24
    516e:	77 fd       	sbrc	r23, 7
    5170:	80 95       	com	r24
    5172:	98 2f       	mov	r25, r24
    5174:	0e 94 34 48 	call	0x9068	; 0x9068 <__floatsisf>
    5178:	6b 01       	movw	r12, r22
    517a:	7c 01       	movw	r14, r24
    517c:	60 93 81 05 	sts	0x0581, r22
    5180:	70 93 82 05 	sts	0x0582, r23
    5184:	80 93 83 05 	sts	0x0583, r24
    5188:	90 93 84 05 	sts	0x0584, r25

	// Calculate acceleration magnitude.
	roll_sq = (accADC[ROLL] * accADC[ROLL]);
    518c:	20 91 3c 05 	lds	r18, 0x053C
    5190:	30 91 3d 05 	lds	r19, 0x053D
	pitch_sq = (accADC[PITCH] * accADC[PITCH]);
    5194:	40 91 3e 05 	lds	r20, 0x053E
    5198:	50 91 3f 05 	lds	r21, 0x053F
	yaw_sq = (accADC[YAW] * accADC[YAW]);
    519c:	e0 91 40 05 	lds	r30, 0x0540
    51a0:	f0 91 41 05 	lds	r31, 0x0541
	GyroRollVC = gyroADC[ROLL];								// KK2 - GyroRoll
	GyroPitchVC = gyroADC[PITCH];

	// Calculate acceleration magnitude.
	roll_sq = (accADC[ROLL] * accADC[ROLL]);
	pitch_sq = (accADC[PITCH] * accADC[PITCH]);
    51a4:	44 9f       	mul	r20, r20
    51a6:	40 01       	movw	r8, r0
    51a8:	45 9f       	mul	r20, r21
    51aa:	90 0c       	add	r9, r0
    51ac:	90 0c       	add	r9, r0
    51ae:	11 24       	eor	r1, r1
    51b0:	b4 01       	movw	r22, r8
    51b2:	88 27       	eor	r24, r24
    51b4:	77 fd       	sbrc	r23, 7
    51b6:	80 95       	com	r24
    51b8:	98 2f       	mov	r25, r24
	// Copy/promote gyro values for rotate
	GyroRollVC = gyroADC[ROLL];								// KK2 - GyroRoll
	GyroPitchVC = gyroADC[PITCH];

	// Calculate acceleration magnitude.
	roll_sq = (accADC[ROLL] * accADC[ROLL]);
    51ba:	22 9f       	mul	r18, r18
    51bc:	a0 01       	movw	r20, r0
    51be:	23 9f       	mul	r18, r19
    51c0:	50 0d       	add	r21, r0
    51c2:	50 0d       	add	r21, r0
    51c4:	11 24       	eor	r1, r1
    51c6:	8a 01       	movw	r16, r20
    51c8:	22 27       	eor	r18, r18
    51ca:	17 fd       	sbrc	r17, 7
    51cc:	20 95       	com	r18
    51ce:	32 2f       	mov	r19, r18
	pitch_sq = (accADC[PITCH] * accADC[PITCH]);
	yaw_sq = (accADC[YAW] * accADC[YAW]);
	AccMag = roll_sq + pitch_sq + yaw_sq;
    51d0:	60 0f       	add	r22, r16
    51d2:	71 1f       	adc	r23, r17
    51d4:	82 1f       	adc	r24, r18
    51d6:	93 1f       	adc	r25, r19
	GyroPitchVC = gyroADC[PITCH];

	// Calculate acceleration magnitude.
	roll_sq = (accADC[ROLL] * accADC[ROLL]);
	pitch_sq = (accADC[PITCH] * accADC[PITCH]);
	yaw_sq = (accADC[YAW] * accADC[YAW]);
    51d8:	ee 9f       	mul	r30, r30
    51da:	90 01       	movw	r18, r0
    51dc:	ef 9f       	mul	r30, r31
    51de:	30 0d       	add	r19, r0
    51e0:	30 0d       	add	r19, r0
    51e2:	11 24       	eor	r1, r1
    51e4:	89 01       	movw	r16, r18
    51e6:	22 27       	eor	r18, r18
    51e8:	17 fd       	sbrc	r17, 7
    51ea:	20 95       	com	r18
    51ec:	32 2f       	mov	r19, r18
	AccMag = roll_sq + pitch_sq + yaw_sq;
    51ee:	60 0f       	add	r22, r16
    51f0:	71 1f       	adc	r23, r17
    51f2:	82 1f       	adc	r24, r18
    51f4:	93 1f       	adc	r25, r19
	
	// Add acc correction if inside local acceleration bounds and not inverted according to VectorZ
	// This is actually a kind of Complementary Filter
	if	((AccMag > acc_0_85G_SQ) && (AccMag < acc_1_15G_SQ) && (VectorZ > 0.5))
    51f6:	0e 94 32 48 	call	0x9064	; 0x9064 <__floatunsisf>
    51fa:	4b 01       	movw	r8, r22
    51fc:	5c 01       	movw	r10, r24
    51fe:	20 e0       	ldi	r18, 0x00	; 0
    5200:	34 ef       	ldi	r19, 0xF4	; 244
    5202:	48 e3       	ldi	r20, 0x38	; 56
    5204:	56 e4       	ldi	r21, 0x46	; 70
    5206:	0e 94 e4 48 	call	0x91c8	; 0x91c8 <__gesf2>
    520a:	18 16       	cp	r1, r24
    520c:	0c f0       	brlt	.+2      	; 0x5210 <imu_update+0x250>
    520e:	6f c0       	rjmp	.+222    	; 0x52ee <imu_update+0x32e>
    5210:	20 e0       	ldi	r18, 0x00	; 0
    5212:	38 e4       	ldi	r19, 0x48	; 72
    5214:	49 ea       	ldi	r20, 0xA9	; 169
    5216:	56 e4       	ldi	r21, 0x46	; 70
    5218:	c5 01       	movw	r24, r10
    521a:	b4 01       	movw	r22, r8
    521c:	0e 94 95 47 	call	0x8f2a	; 0x8f2a <__cmpsf2>
    5220:	87 ff       	sbrs	r24, 7
    5222:	65 c0       	rjmp	.+202    	; 0x52ee <imu_update+0x32e>
    5224:	20 e0       	ldi	r18, 0x00	; 0
    5226:	30 e0       	ldi	r19, 0x00	; 0
    5228:	40 e0       	ldi	r20, 0x00	; 0
    522a:	5f e3       	ldi	r21, 0x3F	; 63
    522c:	60 91 00 05 	lds	r22, 0x0500
    5230:	70 91 01 05 	lds	r23, 0x0501
    5234:	80 91 02 05 	lds	r24, 0x0502
    5238:	90 91 03 05 	lds	r25, 0x0503
    523c:	0e 94 e4 48 	call	0x91c8	; 0x91c8 <__gesf2>
    5240:	18 16       	cp	r1, r24
    5242:	0c f0       	brlt	.+2      	; 0x5246 <imu_update+0x286>
    5244:	54 c0       	rjmp	.+168    	; 0x52ee <imu_update+0x32e>
	{
		tempf = (EulerAngleRoll - AccAngleRoll) / (11 - Config.CF_factor); // Default Config.CF_factor is 7
    5246:	80 91 39 06 	lds	r24, 0x0639
    524a:	6b e0       	ldi	r22, 0x0B	; 11
    524c:	70 e0       	ldi	r23, 0x00	; 0
    524e:	68 1b       	sub	r22, r24
    5250:	71 09       	sbc	r23, r1
    5252:	87 fd       	sbrc	r24, 7
    5254:	73 95       	inc	r23
    5256:	88 27       	eor	r24, r24
    5258:	77 fd       	sbrc	r23, 7
    525a:	80 95       	com	r24
    525c:	98 2f       	mov	r25, r24
    525e:	0e 94 34 48 	call	0x9068	; 0x9068 <__floatsisf>
    5262:	4b 01       	movw	r8, r22
    5264:	5c 01       	movw	r10, r24
    5266:	2d 81       	ldd	r18, Y+5	; 0x05
    5268:	3e 81       	ldd	r19, Y+6	; 0x06
    526a:	4f 81       	ldd	r20, Y+7	; 0x07
    526c:	58 85       	ldd	r21, Y+8	; 0x08
    526e:	60 91 9d 05 	lds	r22, 0x059D
    5272:	70 91 9e 05 	lds	r23, 0x059E
    5276:	80 91 9f 05 	lds	r24, 0x059F
    527a:	90 91 a0 05 	lds	r25, 0x05A0
    527e:	0e 94 30 47 	call	0x8e60	; 0x8e60 <__subsf3>
    5282:	a5 01       	movw	r20, r10
    5284:	94 01       	movw	r18, r8
    5286:	0e 94 99 47 	call	0x8f32	; 0x8f32 <__divsf3>
    528a:	9b 01       	movw	r18, r22
    528c:	ac 01       	movw	r20, r24
		GyroRollVC = GyroRollVC + tempf;
    528e:	c3 01       	movw	r24, r6
    5290:	b2 01       	movw	r22, r4
    5292:	0e 94 31 47 	call	0x8e62	; 0x8e62 <__addsf3>
    5296:	60 93 85 05 	sts	0x0585, r22
    529a:	70 93 86 05 	sts	0x0586, r23
    529e:	80 93 87 05 	sts	0x0587, r24
    52a2:	90 93 88 05 	sts	0x0588, r25
		
		tempf = (EulerAnglePitch - AccAnglePitch) /(11 - Config.CF_factor);
    52a6:	29 85       	ldd	r18, Y+9	; 0x09
    52a8:	3a 85       	ldd	r19, Y+10	; 0x0a
    52aa:	4b 85       	ldd	r20, Y+11	; 0x0b
    52ac:	5c 85       	ldd	r21, Y+12	; 0x0c
    52ae:	60 91 75 05 	lds	r22, 0x0575
    52b2:	70 91 76 05 	lds	r23, 0x0576
    52b6:	80 91 77 05 	lds	r24, 0x0577
    52ba:	90 91 78 05 	lds	r25, 0x0578
    52be:	0e 94 30 47 	call	0x8e60	; 0x8e60 <__subsf3>
    52c2:	a5 01       	movw	r20, r10
    52c4:	94 01       	movw	r18, r8
    52c6:	0e 94 99 47 	call	0x8f32	; 0x8f32 <__divsf3>
    52ca:	9b 01       	movw	r18, r22
    52cc:	ac 01       	movw	r20, r24
    52ce:	69 83       	std	Y+1, r22	; 0x01
    52d0:	7a 83       	std	Y+2, r23	; 0x02
    52d2:	8b 83       	std	Y+3, r24	; 0x03
    52d4:	9c 83       	std	Y+4, r25	; 0x04
		GyroPitchVC = GyroPitchVC + tempf;
    52d6:	c7 01       	movw	r24, r14
    52d8:	b6 01       	movw	r22, r12
    52da:	0e 94 31 47 	call	0x8e62	; 0x8e62 <__addsf3>
    52de:	60 93 81 05 	sts	0x0581, r22
    52e2:	70 93 82 05 	sts	0x0582, r23
    52e6:	80 93 83 05 	sts	0x0583, r24
    52ea:	90 93 84 05 	sts	0x0584, r25
	}

	// Rotate up-direction 3D vector with gyro inputs
	Rotate3dVector(intervalf);
    52ee:	6d 85       	ldd	r22, Y+13	; 0x0d
    52f0:	7e 85       	ldd	r23, Y+14	; 0x0e
    52f2:	8f 85       	ldd	r24, Y+15	; 0x0f
    52f4:	98 89       	ldd	r25, Y+16	; 0x10
    52f6:	0e 94 8e 26 	call	0x4d1c	; 0x4d1c <Rotate3dVector>
	ExtractEulerAngles();
    52fa:	0e 94 bb 27 	call	0x4f76	; 0x4f76 <ExtractEulerAngles>
	
	// Upscale to 0.01 degrees resolution and copy to angle[] for display
	angle[ROLL] = (int16_t)(EulerAngleRoll * -100);
    52fe:	20 e0       	ldi	r18, 0x00	; 0
    5300:	30 e0       	ldi	r19, 0x00	; 0
    5302:	48 ec       	ldi	r20, 0xC8	; 200
    5304:	52 ec       	ldi	r21, 0xC2	; 194
    5306:	60 91 9d 05 	lds	r22, 0x059D
    530a:	70 91 9e 05 	lds	r23, 0x059E
    530e:	80 91 9f 05 	lds	r24, 0x059F
    5312:	90 91 a0 05 	lds	r25, 0x05A0
    5316:	0e 94 e8 48 	call	0x91d0	; 0x91d0 <__mulsf3>
    531a:	0e 94 01 48 	call	0x9002	; 0x9002 <__fixsfsi>
    531e:	70 93 8a 05 	sts	0x058A, r23
    5322:	60 93 89 05 	sts	0x0589, r22
	angle[PITCH] = (int16_t)(EulerAnglePitch * -100);
    5326:	20 e0       	ldi	r18, 0x00	; 0
    5328:	30 e0       	ldi	r19, 0x00	; 0
    532a:	48 ec       	ldi	r20, 0xC8	; 200
    532c:	52 ec       	ldi	r21, 0xC2	; 194
    532e:	60 91 75 05 	lds	r22, 0x0575
    5332:	70 91 76 05 	lds	r23, 0x0576
    5336:	80 91 77 05 	lds	r24, 0x0577
    533a:	90 91 78 05 	lds	r25, 0x0578
    533e:	0e 94 e8 48 	call	0x91d0	; 0x91d0 <__mulsf3>
    5342:	0e 94 01 48 	call	0x9002	; 0x9002 <__fixsfsi>
    5346:	70 93 8c 05 	sts	0x058C, r23
    534a:	60 93 8b 05 	sts	0x058B, r22
}
    534e:	60 96       	adiw	r28, 0x10	; 16
    5350:	0f b6       	in	r0, 0x3f	; 63
    5352:	f8 94       	cli
    5354:	de bf       	out	0x3e, r29	; 62
    5356:	0f be       	out	0x3f, r0	; 63
    5358:	cd bf       	out	0x3d, r28	; 61
    535a:	df 91       	pop	r29
    535c:	cf 91       	pop	r28
    535e:	1f 91       	pop	r17
    5360:	0f 91       	pop	r16
    5362:	ff 90       	pop	r15
    5364:	ef 90       	pop	r14
    5366:	df 90       	pop	r13
    5368:	cf 90       	pop	r12
    536a:	bf 90       	pop	r11
    536c:	af 90       	pop	r10
    536e:	9f 90       	pop	r9
    5370:	8f 90       	pop	r8
    5372:	7f 90       	pop	r7
    5374:	6f 90       	pop	r6
    5376:	5f 90       	pop	r5
    5378:	4f 90       	pop	r4
    537a:	08 95       	ret

0000537c <reset_IMU>:
}

void reset_IMU(void)
{
	// Initialise the vector to point straight up
	VectorX = 0;
    537c:	10 92 28 05 	sts	0x0528, r1
    5380:	10 92 29 05 	sts	0x0529, r1
    5384:	10 92 2a 05 	sts	0x052A, r1
    5388:	10 92 2b 05 	sts	0x052B, r1
	VectorY = 0;
    538c:	10 92 24 05 	sts	0x0524, r1
    5390:	10 92 25 05 	sts	0x0525, r1
    5394:	10 92 26 05 	sts	0x0526, r1
    5398:	10 92 27 05 	sts	0x0527, r1
	VectorZ = 1;
    539c:	80 e0       	ldi	r24, 0x00	; 0
    539e:	90 e0       	ldi	r25, 0x00	; 0
    53a0:	a0 e8       	ldi	r26, 0x80	; 128
    53a2:	bf e3       	ldi	r27, 0x3F	; 63
    53a4:	80 93 00 05 	sts	0x0500, r24
    53a8:	90 93 01 05 	sts	0x0501, r25
    53ac:	a0 93 02 05 	sts	0x0502, r26
    53b0:	b0 93 03 05 	sts	0x0503, r27
	
	// Initialise internal vectors and attitude	
	VectorA = 0;
    53b4:	10 92 a1 05 	sts	0x05A1, r1
    53b8:	10 92 a2 05 	sts	0x05A2, r1
    53bc:	10 92 a3 05 	sts	0x05A3, r1
    53c0:	10 92 a4 05 	sts	0x05A4, r1
	VectorB = 0;
    53c4:	10 92 a5 05 	sts	0x05A5, r1
    53c8:	10 92 a6 05 	sts	0x05A6, r1
    53cc:	10 92 a7 05 	sts	0x05A7, r1
    53d0:	10 92 a8 05 	sts	0x05A8, r1
	EulerAngleRoll = 0;
    53d4:	10 92 9d 05 	sts	0x059D, r1
    53d8:	10 92 9e 05 	sts	0x059E, r1
    53dc:	10 92 9f 05 	sts	0x059F, r1
    53e0:	10 92 a0 05 	sts	0x05A0, r1
	EulerAnglePitch = 0;
    53e4:	10 92 75 05 	sts	0x0575, r1
    53e8:	10 92 76 05 	sts	0x0576, r1
    53ec:	10 92 77 05 	sts	0x0577, r1
    53f0:	10 92 78 05 	sts	0x0578, r1

	// Reset loop count to zero
	TMR0_counter = 0;	// TMR0 overflow counter
    53f4:	10 92 c6 07 	sts	0x07C6, r1
    53f8:	10 92 c5 07 	sts	0x07C5, r1
	TCNT1 = 0;			// TCNT1 current time
    53fc:	10 92 85 00 	sts	0x0085, r1
    5400:	10 92 84 00 	sts	0x0084, r1
	LoopStartTCNT1 = 0;	// TCNT1 last loop time
    5404:	10 92 19 05 	sts	0x0519, r1
    5408:	10 92 18 05 	sts	0x0518, r1
    540c:	08 95       	ret

0000540e <init>:

CONFIG_STRUCT Config;			// eeProm data configuration
uint16_t SystemVoltage = 0;		// Initial voltage measured.

void init(void)
{
    540e:	cf 93       	push	r28
	
	//***********************************************************
	// I/O setup
	//***********************************************************
	// Set port directions
	DDRA		= 0x30;		// Port A
    5410:	80 e3       	ldi	r24, 0x30	; 48
    5412:	81 b9       	out	0x01, r24	; 1
	DDRC		= 0xFC;		// Port C
    5414:	8c ef       	ldi	r24, 0xFC	; 252
    5416:	87 b9       	out	0x07, r24	; 7
	DDRB		= 0x0A;		// Port B
    5418:	8a e0       	ldi	r24, 0x0A	; 10
    541a:	84 b9       	out	0x04, r24	; 4
	DDRD		= 0xF2;		// Port D
    541c:	82 ef       	ldi	r24, 0xF2	; 242
    541e:	8a b9       	out	0x0a, r24	; 10

	// Hold all PWM outputs low to stop glitches
	// M5 and M6 are on PortA for KK2.1
	MOTORS		= 0;
    5420:	18 b8       	out	0x08, r1	; 8
	M5			= 0;
    5422:	14 98       	cbi	0x02, 4	; 2
	M6			= 0;
    5424:	15 98       	cbi	0x02, 5	; 2

	// Preset I/O pins
	LED1 		= 0;		// LED1 off
    5426:	2b 98       	cbi	0x05, 3	; 5
	LVA 		= 0; 		// LVA alarm OFF
    5428:	29 98       	cbi	0x05, 1	; 5
	LCD_SCL		= 1;		// GLCD clock high
    542a:	5c 9a       	sbi	0x0b, 4	; 11

	// Set/clear pull-ups (1 = set, 0 = clear)
	PINB		= 0xF5;		// Set PB pull-ups
    542c:	85 ef       	ldi	r24, 0xF5	; 245
    542e:	83 b9       	out	0x03, r24	; 3
	PIND		= 0x0C;		// Set PD pull-ups (Don't pull up RX yet)
    5430:	8c e0       	ldi	r24, 0x0C	; 12
    5432:	89 b9       	out	0x09, r24	; 9
    5434:	2f e5       	ldi	r18, 0x5F	; 95
    5436:	88 ed       	ldi	r24, 0xD8	; 216
    5438:	93 e0       	ldi	r25, 0x03	; 3
    543a:	21 50       	subi	r18, 0x01	; 1
    543c:	80 40       	sbci	r24, 0x00	; 0
    543e:	90 40       	sbci	r25, 0x00	; 0
    5440:	e1 f7       	brne	.-8      	; 0x543a <init+0x2c>
    5442:	00 c0       	rjmp	.+0      	; 0x5444 <init+0x36>
    5444:	00 00       	nop
	_delay_ms(63);				// Pause while satellite wakes up	
								// and pull-ups have time to rise.
								// Tweak until bind pulses about 68ms after power-up

	// Bind as master if ONLY button 4 pressed
	if ((PINB & 0xf0) == 0xE0)
    5446:	83 b1       	in	r24, 0x03	; 3
    5448:	80 7f       	andi	r24, 0xF0	; 240
    544a:	80 3e       	cpi	r24, 0xE0	; 224
    544c:	21 f4       	brne	.+8      	; 0x5456 <init+0x48>
	{
		DDRD		= 0xF3;		// Switch PD0 to output
    544e:	83 ef       	ldi	r24, 0xF3	; 243
    5450:	8a b9       	out	0x0a, r24	; 10
		bind_master();
    5452:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <bind_master>
	}

	DDRD		= 0xF2;			// Reset Port D directions
    5456:	82 ef       	ldi	r24, 0xF2	; 242
    5458:	8a b9       	out	0x0a, r24	; 10

	// Set/clear pull-ups (1 = set, 0 = clear)
	PIND		= 0x0D;			// Set PD pull-ups (now pull up RX as well)
    545a:	8d e0       	ldi	r24, 0x0D	; 13
    545c:	89 b9       	out	0x09, r24	; 9
	// Timers
	//***********************************************************

	// Timer0 (8bit) - run @ 20MHz / 1024 = 19.531kHz or 51.2us - max 13.1ms
	// Slow timer to extend Timer 1
	TCCR0A = 0;								// Normal operation
    545e:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0x05;							// Clk / 1024 = 19.531kHz or 51.2us - max 13.1ms
    5460:	85 e0       	ldi	r24, 0x05	; 5
    5462:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= (1 << TOIE0);					// Enable interrupts
    5464:	80 91 6e 00 	lds	r24, 0x006E
    5468:	81 60       	ori	r24, 0x01	; 1
    546a:	80 93 6e 00 	sts	0x006E, r24
	TCNT0 = 0;								// Reset counter
    546e:	16 bc       	out	0x26, r1	; 38
	
	// Timer1 (16bit) - run @ 2.5MHz (400ns) - max 26.2ms
	// Used to measure Rx Signals & control ESC/servo output rate
	TCCR1A = 0;
    5470:	10 92 80 00 	sts	0x0080, r1
	TCCR1B |= (1 << CS11);					// Clk/8 = 2.5MHz
    5474:	80 91 81 00 	lds	r24, 0x0081
    5478:	82 60       	ori	r24, 0x02	; 2
    547a:	80 93 81 00 	sts	0x0081, r24

	// Timer2 8bit - run @ 20MHz / 1024 = 19.531kHz or 51.2us - max 13.1ms
	// Used to time arm/disarm intervals
	TCCR2A = 0;	
    547e:	10 92 b0 00 	sts	0x00B0, r1
	TCCR2B = 0x07;							// Clk/1024 = 19.531kHz
    5482:	87 e0       	ldi	r24, 0x07	; 7
    5484:	80 93 b1 00 	sts	0x00B1, r24
	TIMSK2 = 0;
    5488:	10 92 70 00 	sts	0x0070, r1
	TIFR2 = 0;
    548c:	17 ba       	out	0x17, r1	; 23
	TCNT2 = 0;								// Reset counter
    548e:	10 92 b2 00 	sts	0x00B2, r1
	//***********************************************************
	// Interrupts and pin function setup
	//***********************************************************

	// Pin change interrupt enables PCINT1, PCINT2 and PCINT3 (Throttle, AUX and CPPM input)
	PCICR  = 0x0A;							// PCINT8  to PCINT15 (PCINT1 group - AUX)
    5492:	9a e0       	ldi	r25, 0x0A	; 10
    5494:	90 93 68 00 	sts	0x0068, r25
											// PCINT24 to PCINT31 (PCINT3 group - THR)
	PCIFR  = 0x0F;							// Clear PCIF0 interrupt flag 
    5498:	9f e0       	ldi	r25, 0x0F	; 15
    549a:	9b bb       	out	0x1b, r25	; 27
											// Clear PCIF1 interrupt flag 
											// Clear PCIF2 interrupt flag 
											// Clear PCIF3 interrupt flag 

	// External interrupts INT0 (Elevator) and INT1 (Aileron) and INT2 (Rudder)
	EICRA = 0x15;							// Any change INT0
    549c:	95 e1       	ldi	r25, 0x15	; 21
    549e:	90 93 69 00 	sts	0x0069, r25
											// Any change INT1
											// Any change INT2
	EIFR  = 0x07; 							// Clear INT0 interrupt flag (Elevator)
    54a2:	8c bb       	out	0x1c, r24	; 28
	//***********************************************************
	// Start up
	//***********************************************************

	// Preset important flags
	Interrupted = false;						
    54a4:	10 92 c2 07 	sts	0x07C2, r1

	// Load EEPROM settings
	updated = Initial_EEPROM_Config_Load(); // Config now contains valid values
    54a8:	0e 94 a0 1a 	call	0x3540	; 0x3540 <Initial_EEPROM_Config_Load>
    54ac:	c8 2f       	mov	r28, r24
    54ae:	20 e0       	ldi	r18, 0x00	; 0
    54b0:	30 e0       	ldi	r19, 0x00	; 0
	//***********************************************************

	for (i = 0; i < MAX_RC_CHANNELS; i++)
	{
		
		RxChannel[i] = 3750;
    54b2:	46 ea       	ldi	r20, 0xA6	; 166
    54b4:	5e e0       	ldi	r21, 0x0E	; 14
    54b6:	f9 01       	movw	r30, r18
    54b8:	ee 0f       	add	r30, r30
    54ba:	ff 1f       	adc	r31, r31
    54bc:	ee 54       	subi	r30, 0x4E	; 78
    54be:	f8 4f       	sbci	r31, 0xF8	; 248
    54c0:	51 83       	std	Z+1, r21	; 0x01
    54c2:	40 83       	st	Z, r20
    54c4:	2f 5f       	subi	r18, 0xFF	; 255
    54c6:	3f 4f       	sbci	r19, 0xFF	; 255
	// RX channel defaults for when no RC connected
	// Not doing this can result in the FC trying (unsuccessfully) to arm
	// and makes entry into the menus very hard
	//***********************************************************

	for (i = 0; i < MAX_RC_CHANNELS; i++)
    54c8:	28 30       	cpi	r18, 0x08	; 8
    54ca:	31 05       	cpc	r19, r1
    54cc:	a1 f7       	brne	.-24     	; 0x54b6 <init+0xa8>
	{
		
		RxChannel[i] = 3750;
	}
	
	RxChannel[THROTTLE] = 2500; // Min throttle
    54ce:	24 ec       	ldi	r18, 0xC4	; 196
    54d0:	39 e0       	ldi	r19, 0x09	; 9
    54d2:	30 93 b3 07 	sts	0x07B3, r19
    54d6:	20 93 b2 07 	sts	0x07B2, r18
	//***********************************************************
	// GLCD initialisation
	//***********************************************************

	// Initialise the GLCD
	st7565_init();
    54da:	0e 94 0c 21 	call	0x4218	; 0x4218 <st7565_init>

	// Make sure the LCD is blank without clearing buffer (and so no logo)
	clear_screen();
    54de:	0e 94 66 21 	call	0x42cc	; 0x42cc <clear_screen>
	//***********************************************************
	// ESC calibration
	//***********************************************************
	
	// Calibrate ESCs if ONLY buttons 1 and 4 pressed
	if ((PINB & 0xf0) == 0x60)
    54e2:	93 b1       	in	r25, 0x03	; 3
    54e4:	90 7f       	andi	r25, 0xF0	; 240
    54e6:	90 36       	cpi	r25, 0x60	; 96
    54e8:	09 f0       	breq	.+2      	; 0x54ec <init+0xde>
    54ea:	71 c0       	rjmp	.+226    	; 0x55ce <init+0x1c0>
	{
		// Display calibrating message
		st7565_command(CMD_SET_COM_NORMAL); 	// For text (not for logo)
    54ec:	80 ec       	ldi	r24, 0xC0	; 192
    54ee:	0e 94 fd 20 	call	0x41fa	; 0x41fa <st7565_command>
		clear_buffer(buffer);
    54f2:	80 e0       	ldi	r24, 0x00	; 0
    54f4:	91 e0       	ldi	r25, 0x01	; 1
    54f6:	0e 94 5d 21 	call	0x42ba	; 0x42ba <clear_buffer>
		LCD_Display_Text(59,(const unsigned char*)Verdana14,10,25);
    54fa:	29 e1       	ldi	r18, 0x19	; 25
    54fc:	30 e0       	ldi	r19, 0x00	; 0
    54fe:	4a e0       	ldi	r20, 0x0A	; 10
    5500:	50 e0       	ldi	r21, 0x00	; 0
    5502:	61 e7       	ldi	r22, 0x71	; 113
    5504:	71 e0       	ldi	r23, 0x01	; 1
    5506:	8b e3       	ldi	r24, 0x3B	; 59
    5508:	90 e0       	ldi	r25, 0x00	; 0
    550a:	0e 94 0a 23 	call	0x4614	; 0x4614 <LCD_Display_Text>
		write_buffer(buffer);
    550e:	80 e0       	ldi	r24, 0x00	; 0
    5510:	91 e0       	ldi	r25, 0x01	; 1
    5512:	0e 94 2b 21 	call	0x4256	; 0x4256 <write_buffer>
		clear_buffer(buffer);
    5516:	80 e0       	ldi	r24, 0x00	; 0
    5518:	91 e0       	ldi	r25, 0x01	; 1
    551a:	0e 94 5d 21 	call	0x42ba	; 0x42ba <clear_buffer>
    551e:	ef e3       	ldi	r30, 0x3F	; 63
    5520:	f6 e0       	ldi	r31, 0x06	; 6
    5522:	80 e0       	ldi	r24, 0x00	; 0
    5524:	90 e0       	ldi	r25, 0x00	; 0
				// Set output to maximum pulse width
				ServoOut[i] = MOTOR_100;
			}
			else
			{
				ServoOut[i] = SERVO_CENTER;
    5526:	4c ed       	ldi	r20, 0xDC	; 220
    5528:	55 e0       	ldi	r21, 0x05	; 5
		{
			// Check for motor marker
			if (Config.Channel[i].Motor_marker == MOTOR)
			{
				// Set output to maximum pulse width
				ServoOut[i] = MOTOR_100;
    552a:	6c e6       	ldi	r22, 0x6C	; 108
    552c:	77 e0       	ldi	r23, 0x07	; 7
				
		// For each output
		for (i = 0; i < MAX_OUTPUTS; i++)
		{
			// Check for motor marker
			if (Config.Channel[i].Motor_marker == MOTOR)
    552e:	a0 81       	ld	r26, Z
    5530:	9c 01       	movw	r18, r24
    5532:	22 0f       	add	r18, r18
    5534:	33 1f       	adc	r19, r19
    5536:	a2 30       	cpi	r26, 0x02	; 2
    5538:	39 f4       	brne	.+14     	; 0x5548 <init+0x13a>
			{
				// Set output to maximum pulse width
				ServoOut[i] = MOTOR_100;
    553a:	d9 01       	movw	r26, r18
    553c:	ab 5c       	subi	r26, 0xCB	; 203
    553e:	b7 4f       	sbci	r27, 0xF7	; 247
    5540:	11 96       	adiw	r26, 0x01	; 1
    5542:	7c 93       	st	X, r23
    5544:	6e 93       	st	-X, r22
    5546:	06 c0       	rjmp	.+12     	; 0x5554 <init+0x146>
			}
			else
			{
				ServoOut[i] = SERVO_CENTER;
    5548:	d9 01       	movw	r26, r18
    554a:	ab 5c       	subi	r26, 0xCB	; 203
    554c:	b7 4f       	sbci	r27, 0xF7	; 247
    554e:	11 96       	adiw	r26, 0x01	; 1
    5550:	5c 93       	st	X, r21
    5552:	4e 93       	st	-X, r20
    5554:	01 96       	adiw	r24, 0x01	; 1
    5556:	b6 96       	adiw	r30, 0x26	; 38
		LCD_Display_Text(59,(const unsigned char*)Verdana14,10,25);
		write_buffer(buffer);
		clear_buffer(buffer);
				
		// For each output
		for (i = 0; i < MAX_OUTPUTS; i++)
    5558:	88 30       	cpi	r24, 0x08	; 8
    555a:	91 05       	cpc	r25, r1
    555c:	41 f7       	brne	.-48     	; 0x552e <init+0x120>
				ServoOut[i] = SERVO_CENTER;
			}
		}
					
		// Output HIGH pulse (1.9ms) until buttons released
		while ((PINB & 0xf0) == 0x60)
    555e:	83 b1       	in	r24, 0x03	; 3
    5560:	80 7f       	andi	r24, 0xF0	; 240
    5562:	80 36       	cpi	r24, 0x60	; 96
    5564:	79 f4       	brne	.+30     	; 0x5584 <init+0x176>
		{
			// Pass address of ServoOut array and select all outputs
			output_servo_ppm_asm(&ServoOut[0], 0xFF);
    5566:	6f ef       	ldi	r22, 0xFF	; 255
    5568:	85 e3       	ldi	r24, 0x35	; 53
    556a:	98 e0       	ldi	r25, 0x08	; 8
    556c:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <output_servo_ppm_asm>
    5570:	2f e7       	ldi	r18, 0x7F	; 127
    5572:	88 e3       	ldi	r24, 0x38	; 56
    5574:	91 e0       	ldi	r25, 0x01	; 1
    5576:	21 50       	subi	r18, 0x01	; 1
    5578:	80 40       	sbci	r24, 0x00	; 0
    557a:	90 40       	sbci	r25, 0x00	; 0
    557c:	e1 f7       	brne	.-8      	; 0x5576 <init+0x168>
    557e:	00 c0       	rjmp	.+0      	; 0x5580 <init+0x172>
    5580:	00 00       	nop
    5582:	ed cf       	rjmp	.-38     	; 0x555e <init+0x150>
				ServoOut[i] = SERVO_CENTER;
			}
		}
					
		// Output HIGH pulse (1.9ms) until buttons released
		while ((PINB & 0xf0) == 0x60)
    5584:	ef e3       	ldi	r30, 0x3F	; 63
    5586:	f6 e0       	ldi	r31, 0x06	; 6
    5588:	80 e0       	ldi	r24, 0x00	; 0
    558a:	90 e0       	ldi	r25, 0x00	; 0
		{
			// Check for motor marker
			if (Config.Channel[i].Motor_marker == MOTOR)
			{
				// Set output to maximum pulse width
				ServoOut[i] = MOTOR_0;
    558c:	2c e4       	ldi	r18, 0x4C	; 76
    558e:	34 e0       	ldi	r19, 0x04	; 4
		// Output LOW pulse (1.1ms) after buttons released
		// For each output
		for (i = 0; i < MAX_OUTPUTS; i++)
		{
			// Check for motor marker
			if (Config.Channel[i].Motor_marker == MOTOR)
    5590:	40 81       	ld	r20, Z
    5592:	42 30       	cpi	r20, 0x02	; 2
    5594:	41 f4       	brne	.+16     	; 0x55a6 <init+0x198>
			{
				// Set output to maximum pulse width
				ServoOut[i] = MOTOR_0;
    5596:	dc 01       	movw	r26, r24
    5598:	aa 0f       	add	r26, r26
    559a:	bb 1f       	adc	r27, r27
    559c:	ab 5c       	subi	r26, 0xCB	; 203
    559e:	b7 4f       	sbci	r27, 0xF7	; 247
    55a0:	11 96       	adiw	r26, 0x01	; 1
    55a2:	3c 93       	st	X, r19
    55a4:	2e 93       	st	-X, r18
    55a6:	01 96       	adiw	r24, 0x01	; 1
    55a8:	b6 96       	adiw	r30, 0x26	; 38
			_delay_ms(20);			
		}

		// Output LOW pulse (1.1ms) after buttons released
		// For each output
		for (i = 0; i < MAX_OUTPUTS; i++)
    55aa:	88 30       	cpi	r24, 0x08	; 8
    55ac:	91 05       	cpc	r25, r1
    55ae:	81 f7       	brne	.-32     	; 0x5590 <init+0x182>

		// Loop forever here
		while(1)
		{
			// Pass address of ServoOut array and select all outputs
			output_servo_ppm_asm(&ServoOut[0], 0xFF);
    55b0:	6f ef       	ldi	r22, 0xFF	; 255
    55b2:	85 e3       	ldi	r24, 0x35	; 53
    55b4:	98 e0       	ldi	r25, 0x08	; 8
    55b6:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <output_servo_ppm_asm>
    55ba:	2f e7       	ldi	r18, 0x7F	; 127
    55bc:	88 e3       	ldi	r24, 0x38	; 56
    55be:	91 e0       	ldi	r25, 0x01	; 1
    55c0:	21 50       	subi	r18, 0x01	; 1
    55c2:	80 40       	sbci	r24, 0x00	; 0
    55c4:	90 40       	sbci	r25, 0x00	; 0
    55c6:	e1 f7       	brne	.-8      	; 0x55c0 <init+0x1b2>
    55c8:	00 c0       	rjmp	.+0      	; 0x55ca <init+0x1bc>
    55ca:	00 00       	nop
    55cc:	f1 cf       	rjmp	.-30     	; 0x55b0 <init+0x1a2>
    55ce:	2f e7       	ldi	r18, 0x7F	; 127
    55d0:	8f e4       	ldi	r24, 0x4F	; 79
    55d2:	92 e1       	ldi	r25, 0x12	; 18
    55d4:	21 50       	subi	r18, 0x01	; 1
    55d6:	80 40       	sbci	r24, 0x00	; 0
    55d8:	90 40       	sbci	r25, 0x00	; 0
    55da:	e1 f7       	brne	.-8      	; 0x55d4 <init+0x1c6>
    55dc:	00 c0       	rjmp	.+0      	; 0x55de <init+0x1d0>
    55de:	00 00       	nop

	// This delay prevents the GLCD flashing up a ghost image of old data
	_delay_ms(300);

	// Reload default eeprom settings if middle two buttons are pressed
	if ((PINB & 0xf0) == 0x90)
    55e0:	93 b1       	in	r25, 0x03	; 3
    55e2:	90 7f       	andi	r25, 0xF0	; 240
    55e4:	90 39       	cpi	r25, 0x90	; 144
    55e6:	51 f5       	brne	.+84     	; 0x563c <init+0x22e>
	{
		// Display reset message
		st7565_command(CMD_SET_COM_NORMAL); 	// For text (not for logo)
    55e8:	80 ec       	ldi	r24, 0xC0	; 192
    55ea:	0e 94 fd 20 	call	0x41fa	; 0x41fa <st7565_command>
		clear_buffer(buffer);
    55ee:	80 e0       	ldi	r24, 0x00	; 0
    55f0:	91 e0       	ldi	r25, 0x01	; 1
    55f2:	0e 94 5d 21 	call	0x42ba	; 0x42ba <clear_buffer>
		LCD_Display_Text(262,(const unsigned char*)Verdana14,40,25); // "Reset"
    55f6:	29 e1       	ldi	r18, 0x19	; 25
    55f8:	30 e0       	ldi	r19, 0x00	; 0
    55fa:	48 e2       	ldi	r20, 0x28	; 40
    55fc:	50 e0       	ldi	r21, 0x00	; 0
    55fe:	61 e7       	ldi	r22, 0x71	; 113
    5600:	71 e0       	ldi	r23, 0x01	; 1
    5602:	86 e0       	ldi	r24, 0x06	; 6
    5604:	91 e0       	ldi	r25, 0x01	; 1
    5606:	0e 94 0a 23 	call	0x4614	; 0x4614 <LCD_Display_Text>
		write_buffer(buffer);
    560a:	80 e0       	ldi	r24, 0x00	; 0
    560c:	91 e0       	ldi	r25, 0x01	; 1
    560e:	0e 94 2b 21 	call	0x4256	; 0x4256 <write_buffer>
		clear_buffer(buffer);
    5612:	80 e0       	ldi	r24, 0x00	; 0
    5614:	91 e0       	ldi	r25, 0x01	; 1
    5616:	0e 94 5d 21 	call	0x42ba	; 0x42ba <clear_buffer>
		
		// Reset EEPROM settings
		Set_EEPROM_Default_Config();
    561a:	0e 94 56 19 	call	0x32ac	; 0x32ac <Set_EEPROM_Default_Config>
		Save_Config_to_EEPROM();
    561e:	0e 94 bc 16 	call	0x2d78	; 0x2d78 <Save_Config_to_EEPROM>

		// Set contrast to the default value
		st7565_set_brightness(Config.Contrast);
    5622:	80 91 32 06 	lds	r24, 0x0632
    5626:	0e 94 03 21 	call	0x4206	; 0x4206 <st7565_set_brightness>
    562a:	2f e7       	ldi	r18, 0x7F	; 127
    562c:	84 e8       	ldi	r24, 0x84	; 132
    562e:	9e e1       	ldi	r25, 0x1E	; 30
    5630:	21 50       	subi	r18, 0x01	; 1
    5632:	80 40       	sbci	r24, 0x00	; 0
    5634:	90 40       	sbci	r25, 0x00	; 0
    5636:	e1 f7       	brne	.-8      	; 0x5630 <init+0x222>
    5638:	00 c0       	rjmp	.+0      	; 0x563a <init+0x22c>
    563a:	00 00       	nop

		_delay_ms(500);		// Save is now too fast to show the "Reset" text long enough
	}

	// Display message in place of logo when updating eeprom structure
	if (updated)
    563c:	cc 23       	and	r28, r28
    563e:	21 f1       	breq	.+72     	; 0x5688 <init+0x27a>
	{
		st7565_command(CMD_SET_COM_NORMAL); 	// For text (not for logo)
    5640:	80 ec       	ldi	r24, 0xC0	; 192
    5642:	0e 94 fd 20 	call	0x41fa	; 0x41fa <st7565_command>
		clear_buffer(buffer);
    5646:	80 e0       	ldi	r24, 0x00	; 0
    5648:	91 e0       	ldi	r25, 0x01	; 1
    564a:	0e 94 5d 21 	call	0x42ba	; 0x42ba <clear_buffer>
		LCD_Display_Text(259,(const unsigned char*)Verdana14,30,13); // "Updating"
    564e:	2d e0       	ldi	r18, 0x0D	; 13
    5650:	30 e0       	ldi	r19, 0x00	; 0
    5652:	4e e1       	ldi	r20, 0x1E	; 30
    5654:	50 e0       	ldi	r21, 0x00	; 0
    5656:	61 e7       	ldi	r22, 0x71	; 113
    5658:	71 e0       	ldi	r23, 0x01	; 1
    565a:	83 e0       	ldi	r24, 0x03	; 3
    565c:	91 e0       	ldi	r25, 0x01	; 1
    565e:	0e 94 0a 23 	call	0x4614	; 0x4614 <LCD_Display_Text>
		LCD_Display_Text(260,(const unsigned char*)Verdana14,33,37); // "settings"
    5662:	25 e2       	ldi	r18, 0x25	; 37
    5664:	30 e0       	ldi	r19, 0x00	; 0
    5666:	41 e2       	ldi	r20, 0x21	; 33
    5668:	50 e0       	ldi	r21, 0x00	; 0
    566a:	61 e7       	ldi	r22, 0x71	; 113
    566c:	71 e0       	ldi	r23, 0x01	; 1
    566e:	84 e0       	ldi	r24, 0x04	; 4
    5670:	91 e0       	ldi	r25, 0x01	; 1
    5672:	0e 94 0a 23 	call	0x4614	; 0x4614 <LCD_Display_Text>
		write_buffer(buffer);
    5676:	80 e0       	ldi	r24, 0x00	; 0
    5678:	91 e0       	ldi	r25, 0x01	; 1
    567a:	0e 94 2b 21 	call	0x4256	; 0x4256 <write_buffer>
		clear_buffer(buffer);		
    567e:	80 e0       	ldi	r24, 0x00	; 0
    5680:	91 e0       	ldi	r25, 0x01	; 1
    5682:	0e 94 5d 21 	call	0x42ba	; 0x42ba <clear_buffer>
    5686:	04 c0       	rjmp	.+8      	; 0x5690 <init+0x282>
		_delay_ms(1000);	
	}
	else
	{
		// Write logo from buffer
		write_buffer(buffer);
    5688:	80 e0       	ldi	r24, 0x00	; 0
    568a:	91 e0       	ldi	r25, 0x01	; 1
    568c:	0e 94 2b 21 	call	0x4256	; 0x4256 <write_buffer>
    5690:	2f ef       	ldi	r18, 0xFF	; 255
    5692:	88 e0       	ldi	r24, 0x08	; 8
    5694:	9d e3       	ldi	r25, 0x3D	; 61
    5696:	21 50       	subi	r18, 0x01	; 1
    5698:	80 40       	sbci	r24, 0x00	; 0
    569a:	90 40       	sbci	r25, 0x00	; 0
    569c:	e1 f7       	brne	.-8      	; 0x5696 <init+0x288>
    569e:	00 c0       	rjmp	.+0      	; 0x56a0 <init+0x292>
    56a0:	00 00       	nop
		_delay_ms(1000);
	}

	clear_buffer(buffer);
    56a2:	80 e0       	ldi	r24, 0x00	; 0
    56a4:	91 e0       	ldi	r25, 0x01	; 1
    56a6:	0e 94 5d 21 	call	0x42ba	; 0x42ba <clear_buffer>
	write_buffer(buffer);
    56aa:	80 e0       	ldi	r24, 0x00	; 0
    56ac:	91 e0       	ldi	r25, 0x01	; 1
    56ae:	0e 94 2b 21 	call	0x4256	; 0x4256 <write_buffer>
	
	st7565_init(); // Seems necessary for KK2 mini
    56b2:	0e 94 0c 21 	call	0x4218	; 0x4218 <st7565_init>
	
	//***********************************************************
	// i2c init
	//***********************************************************	

	i2c_init();
    56b6:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <i2c_init>
	init_i2c_gyros();
    56ba:	0e 94 51 25 	call	0x4aa2	; 0x4aa2 <init_i2c_gyros>
	init_i2c_accs();
    56be:	0e 94 12 11 	call	0x2224	; 0x2224 <init_i2c_accs>
	//***********************************************************
	// Remaining init tasks
	//***********************************************************

	// Display "Hold steady" message
	clear_buffer(buffer);
    56c2:	80 e0       	ldi	r24, 0x00	; 0
    56c4:	91 e0       	ldi	r25, 0x01	; 1
    56c6:	0e 94 5d 21 	call	0x42ba	; 0x42ba <clear_buffer>
	st7565_command(CMD_SET_COM_NORMAL); 	// For text (not for logo)
    56ca:	80 ec       	ldi	r24, 0xC0	; 192
    56cc:	0e 94 fd 20 	call	0x41fa	; 0x41fa <st7565_command>
	LCD_Display_Text(263,(const unsigned char*)Verdana14,18,25);	// "Hold steady"
    56d0:	29 e1       	ldi	r18, 0x19	; 25
    56d2:	30 e0       	ldi	r19, 0x00	; 0
    56d4:	42 e1       	ldi	r20, 0x12	; 18
    56d6:	50 e0       	ldi	r21, 0x00	; 0
    56d8:	61 e7       	ldi	r22, 0x71	; 113
    56da:	71 e0       	ldi	r23, 0x01	; 1
    56dc:	87 e0       	ldi	r24, 0x07	; 7
    56de:	91 e0       	ldi	r25, 0x01	; 1
    56e0:	0e 94 0a 23 	call	0x4614	; 0x4614 <LCD_Display_Text>
	write_buffer(buffer);	
    56e4:	80 e0       	ldi	r24, 0x00	; 0
    56e6:	91 e0       	ldi	r25, 0x01	; 1
    56e8:	0e 94 2b 21 	call	0x4256	; 0x4256 <write_buffer>
	clear_buffer(buffer);
    56ec:	80 e0       	ldi	r24, 0x00	; 0
    56ee:	91 e0       	ldi	r25, 0x01	; 1
    56f0:	0e 94 5d 21 	call	0x42ba	; 0x42ba <clear_buffer>
		
	// Do startup tasks
	Init_ADC();
    56f4:	0e 94 1c 11 	call	0x2238	; 0x2238 <Init_ADC>
	init_int();								// Initialise interrupts based on RC input mode
    56f8:	0e 94 1c 2f 	call	0x5e38	; 0x5e38 <init_int>
	init_uart();							// Initialise UART
    56fc:	0e 94 b1 46 	call	0x8d62	; 0x8d62 <init_uart>

	// Initial gyro calibration
	if (!CalibrateGyrosSlow())
    5700:	0e 94 72 24 	call	0x48e4	; 0x48e4 <CalibrateGyrosSlow>
    5704:	81 11       	cpse	r24, r1
    5706:	28 c0       	rjmp	.+80     	; 0x5758 <init+0x34a>
	{
		clear_buffer(buffer);
    5708:	80 e0       	ldi	r24, 0x00	; 0
    570a:	91 e0       	ldi	r25, 0x01	; 1
    570c:	0e 94 5d 21 	call	0x42ba	; 0x42ba <clear_buffer>
		LCD_Display_Text(61,(const unsigned char*)Verdana14,25,25); // "Cal. failed"
    5710:	29 e1       	ldi	r18, 0x19	; 25
    5712:	30 e0       	ldi	r19, 0x00	; 0
    5714:	49 e1       	ldi	r20, 0x19	; 25
    5716:	50 e0       	ldi	r21, 0x00	; 0
    5718:	61 e7       	ldi	r22, 0x71	; 113
    571a:	71 e0       	ldi	r23, 0x01	; 1
    571c:	8d e3       	ldi	r24, 0x3D	; 61
    571e:	90 e0       	ldi	r25, 0x00	; 0
    5720:	0e 94 0a 23 	call	0x4614	; 0x4614 <LCD_Display_Text>
		write_buffer(buffer);
    5724:	80 e0       	ldi	r24, 0x00	; 0
    5726:	91 e0       	ldi	r25, 0x01	; 1
    5728:	0e 94 2b 21 	call	0x4256	; 0x4256 <write_buffer>
    572c:	2f ef       	ldi	r18, 0xFF	; 255
    572e:	88 e0       	ldi	r24, 0x08	; 8
    5730:	9d e3       	ldi	r25, 0x3D	; 61
    5732:	21 50       	subi	r18, 0x01	; 1
    5734:	80 40       	sbci	r24, 0x00	; 0
    5736:	90 40       	sbci	r25, 0x00	; 0
    5738:	e1 f7       	brne	.-8      	; 0x5732 <init+0x324>
    573a:	00 c0       	rjmp	.+0      	; 0x573c <init+0x32e>
    573c:	00 00       	nop
		_delay_ms(1000);
		
		// Reset
		cli();
    573e:	f8 94       	cli
		wdt_enable(WDTO_15MS);				// Watchdog on, 15ms
    5740:	28 e0       	ldi	r18, 0x08	; 8
    5742:	88 e1       	ldi	r24, 0x18	; 24
    5744:	90 e0       	ldi	r25, 0x00	; 0
    5746:	0f b6       	in	r0, 0x3f	; 63
    5748:	f8 94       	cli
    574a:	a8 95       	wdr
    574c:	80 93 60 00 	sts	0x0060, r24
    5750:	0f be       	out	0x3f, r0	; 63
    5752:	20 93 60 00 	sts	0x0060, r18
    5756:	ff cf       	rjmp	.-2      	; 0x5756 <init+0x348>
		while(1);							// Wait for reboot
	}

	// Update voltage detection
	SystemVoltage = GetVbat();				// Check power-up battery voltage
    5758:	0e 94 11 47 	call	0x8e22	; 0x8e22 <GetVbat>
    575c:	90 93 2d 05 	sts	0x052D, r25
    5760:	80 93 2c 05 	sts	0x052C, r24
	UpdateLimits();							// Update travel and trigger limits
    5764:	0e 94 52 37 	call	0x6ea4	; 0x6ea4 <UpdateLimits>

	// Disarm on start-up if Armed setting is ARMABLE
	if (Config.ArmMode == ARMABLE)
    5768:	80 91 33 06 	lds	r24, 0x0633
    576c:	81 30       	cpi	r24, 0x01	; 1
    576e:	29 f4       	brne	.+10     	; 0x577a <init+0x36c>
	{
		General_error |= (1 << DISARMED); 	// Set disarmed bit
    5770:	80 91 1e 05 	lds	r24, 0x051E
    5774:	84 60       	ori	r24, 0x04	; 4
    5776:	80 93 1e 05 	sts	0x051E, r24
	}

	// Check to see that throttle is low if RC detected
	if (Interrupted)
    577a:	80 91 c2 07 	lds	r24, 0x07C2
    577e:	88 23       	and	r24, r24
    5780:	69 f0       	breq	.+26     	; 0x579c <init+0x38e>
	{
		RxGetChannels();
    5782:	0e 94 47 44 	call	0x888e	; 0x888e <RxGetChannels>
		if (MonopolarThrottle > THROTTLEIDLE)
    5786:	80 91 21 08 	lds	r24, 0x0821
    578a:	90 91 22 08 	lds	r25, 0x0822
    578e:	c3 97       	sbiw	r24, 0x33	; 51
    5790:	2c f0       	brlt	.+10     	; 0x579c <init+0x38e>
		{
			General_error |= (1 << THROTTLE_HIGH); 	// Set throttle high error bit
    5792:	80 91 1e 05 	lds	r24, 0x051E
    5796:	81 60       	ori	r24, 0x01	; 1
    5798:	80 93 1e 05 	sts	0x051E, r24
		}
	}

	// Reset IMU
	reset_IMU();
    579c:	0e 94 be 29 	call	0x537c	; 0x537c <reset_IMU>

	// Beep that init is complete
	LVA = 1;
    57a0:	29 9a       	sbi	0x05, 1	; 5
    57a2:	2f e9       	ldi	r18, 0x9F	; 159
    57a4:	86 e8       	ldi	r24, 0x86	; 134
    57a6:	91 e0       	ldi	r25, 0x01	; 1
    57a8:	21 50       	subi	r18, 0x01	; 1
    57aa:	80 40       	sbci	r24, 0x00	; 0
    57ac:	90 40       	sbci	r25, 0x00	; 0
    57ae:	e1 f7       	brne	.-8      	; 0x57a8 <init+0x39a>
    57b0:	00 c0       	rjmp	.+0      	; 0x57b2 <init+0x3a4>
    57b2:	00 00       	nop
	_delay_ms(25);
	LVA = 0;
    57b4:	29 98       	cbi	0x05, 1	; 5

} // init()
    57b6:	cf 91       	pop	r28
    57b8:	08 95       	ret

000057ba <__vector_18>:
//************************************************************
//* Timer 0 overflow handler for extending TMR1
//************************************************************

ISR(TIMER0_OVF_vect)
{
    57ba:	1f 92       	push	r1
    57bc:	0f 92       	push	r0
    57be:	0f b6       	in	r0, 0x3f	; 63
    57c0:	0f 92       	push	r0
    57c2:	11 24       	eor	r1, r1
    57c4:	8f 93       	push	r24
    57c6:	9f 93       	push	r25
	TMR0_counter++;
    57c8:	80 91 c5 07 	lds	r24, 0x07C5
    57cc:	90 91 c6 07 	lds	r25, 0x07C6
    57d0:	01 96       	adiw	r24, 0x01	; 1
    57d2:	90 93 c6 07 	sts	0x07C6, r25
    57d6:	80 93 c5 07 	sts	0x07C5, r24
}
    57da:	9f 91       	pop	r25
    57dc:	8f 91       	pop	r24
    57de:	0f 90       	pop	r0
    57e0:	0f be       	out	0x3f, r0	; 63
    57e2:	0f 90       	pop	r0
    57e4:	1f 90       	pop	r1
    57e6:	18 95       	reti

000057e8 <__vector_2>:
//* Standard PWM mode
//* Sequential PWM inputs from a normal RC receiver
//************************************************************

ISR(INT1_vect)
{
    57e8:	1f 92       	push	r1
    57ea:	0f 92       	push	r0
    57ec:	0f b6       	in	r0, 0x3f	; 63
    57ee:	0f 92       	push	r0
    57f0:	11 24       	eor	r1, r1
    57f2:	2f 93       	push	r18
    57f4:	3f 93       	push	r19
    57f6:	8f 93       	push	r24
    57f8:	9f 93       	push	r25
	// Log interrupts that occur during PWM generation
	if (JitterGate)	JitterFlag = true;	
    57fa:	80 91 dc 07 	lds	r24, 0x07DC
    57fe:	88 23       	and	r24, r24
    5800:	19 f0       	breq	.+6      	; 0x5808 <__vector_2+0x20>
    5802:	81 e0       	ldi	r24, 0x01	; 1
    5804:	80 93 dd 07 	sts	0x07DD, r24

	if (RX_ROLL)	// Rising
    5808:	4b 9b       	sbis	0x09, 3	; 9
    580a:	09 c0       	rjmp	.+18     	; 0x581e <__vector_2+0x36>
	{
		RxChannelStart[AILERON] = TCNT1;
    580c:	80 91 84 00 	lds	r24, 0x0084
    5810:	90 91 85 00 	lds	r25, 0x0085
    5814:	90 93 ca 07 	sts	0x07CA, r25
    5818:	80 93 c9 07 	sts	0x07C9, r24
    581c:	14 c0       	rjmp	.+40     	; 0x5846 <__vector_2+0x5e>
	} 
	else 
	{				// Falling
		RxChannel[AILERON] = TCNT1 - RxChannelStart[AILERON];
    581e:	80 91 84 00 	lds	r24, 0x0084
    5822:	90 91 85 00 	lds	r25, 0x0085
    5826:	20 91 c9 07 	lds	r18, 0x07C9
    582a:	30 91 ca 07 	lds	r19, 0x07CA
    582e:	82 1b       	sub	r24, r18
    5830:	93 0b       	sbc	r25, r19
    5832:	90 93 b5 07 	sts	0x07B5, r25
    5836:	80 93 b4 07 	sts	0x07B4, r24
		if (Config.PWM_Sync == AILERON) 
    583a:	80 91 d4 05 	lds	r24, 0x05D4
    583e:	81 30       	cpi	r24, 0x01	; 1
    5840:	11 f4       	brne	.+4      	; 0x5846 <__vector_2+0x5e>
		{
			Interrupted = true;						// Signal that interrupt block has finished
    5842:	80 93 c2 07 	sts	0x07C2, r24
		}
	}
}
    5846:	9f 91       	pop	r25
    5848:	8f 91       	pop	r24
    584a:	3f 91       	pop	r19
    584c:	2f 91       	pop	r18
    584e:	0f 90       	pop	r0
    5850:	0f be       	out	0x3f, r0	; 63
    5852:	0f 90       	pop	r0
    5854:	1f 90       	pop	r1
    5856:	18 95       	reti

00005858 <__vector_1>:

ISR(INT0_vect)
{
    5858:	1f 92       	push	r1
    585a:	0f 92       	push	r0
    585c:	0f b6       	in	r0, 0x3f	; 63
    585e:	0f 92       	push	r0
    5860:	11 24       	eor	r1, r1
    5862:	2f 93       	push	r18
    5864:	3f 93       	push	r19
    5866:	8f 93       	push	r24
    5868:	9f 93       	push	r25
	if (JitterGate)	JitterFlag = true;	
    586a:	80 91 dc 07 	lds	r24, 0x07DC
    586e:	88 23       	and	r24, r24
    5870:	19 f0       	breq	.+6      	; 0x5878 <__vector_1+0x20>
    5872:	81 e0       	ldi	r24, 0x01	; 1
    5874:	80 93 dd 07 	sts	0x07DD, r24

	if (RX_PITCH)	// Rising 
    5878:	4a 9b       	sbis	0x09, 2	; 9
    587a:	09 c0       	rjmp	.+18     	; 0x588e <__vector_1+0x36>
	{
		RxChannelStart[ELEVATOR] = TCNT1;
    587c:	80 91 84 00 	lds	r24, 0x0084
    5880:	90 91 85 00 	lds	r25, 0x0085
    5884:	90 93 cc 07 	sts	0x07CC, r25
    5888:	80 93 cb 07 	sts	0x07CB, r24
    588c:	15 c0       	rjmp	.+42     	; 0x58b8 <__vector_1+0x60>
	} 
	else 
	{				// Falling
		RxChannel[ELEVATOR] = TCNT1 - RxChannelStart[ELEVATOR];
    588e:	80 91 84 00 	lds	r24, 0x0084
    5892:	90 91 85 00 	lds	r25, 0x0085
    5896:	20 91 cb 07 	lds	r18, 0x07CB
    589a:	30 91 cc 07 	lds	r19, 0x07CC
    589e:	82 1b       	sub	r24, r18
    58a0:	93 0b       	sbc	r25, r19
    58a2:	90 93 b7 07 	sts	0x07B7, r25
    58a6:	80 93 b6 07 	sts	0x07B6, r24
		if (Config.PWM_Sync == ELEVATOR) 
    58aa:	80 91 d4 05 	lds	r24, 0x05D4
    58ae:	82 30       	cpi	r24, 0x02	; 2
    58b0:	19 f4       	brne	.+6      	; 0x58b8 <__vector_1+0x60>
		{
			Interrupted = true;						// Signal that interrupt block has finished
    58b2:	81 e0       	ldi	r24, 0x01	; 1
    58b4:	80 93 c2 07 	sts	0x07C2, r24
		}
	}
}
    58b8:	9f 91       	pop	r25
    58ba:	8f 91       	pop	r24
    58bc:	3f 91       	pop	r19
    58be:	2f 91       	pop	r18
    58c0:	0f 90       	pop	r0
    58c2:	0f be       	out	0x3f, r0	; 63
    58c4:	0f 90       	pop	r0
    58c6:	1f 90       	pop	r1
    58c8:	18 95       	reti

000058ca <__vector_7>:

ISR(PCINT3_vect)
{
    58ca:	1f 92       	push	r1
    58cc:	0f 92       	push	r0
    58ce:	0f b6       	in	r0, 0x3f	; 63
    58d0:	0f 92       	push	r0
    58d2:	11 24       	eor	r1, r1
    58d4:	2f 93       	push	r18
    58d6:	3f 93       	push	r19
    58d8:	8f 93       	push	r24
    58da:	9f 93       	push	r25
	if (JitterGate)	JitterFlag = true;	
    58dc:	80 91 dc 07 	lds	r24, 0x07DC
    58e0:	88 23       	and	r24, r24
    58e2:	19 f0       	breq	.+6      	; 0x58ea <__vector_7+0x20>
    58e4:	81 e0       	ldi	r24, 0x01	; 1
    58e6:	80 93 dd 07 	sts	0x07DD, r24
		
	if (RX_COLL)	// Rising
    58ea:	48 9b       	sbis	0x09, 0	; 9
    58ec:	09 c0       	rjmp	.+18     	; 0x5900 <__vector_7+0x36>
	{
		RxChannelStart[THROTTLE] = TCNT1;
    58ee:	80 91 84 00 	lds	r24, 0x0084
    58f2:	90 91 85 00 	lds	r25, 0x0085
    58f6:	90 93 c8 07 	sts	0x07C8, r25
    58fa:	80 93 c7 07 	sts	0x07C7, r24
    58fe:	15 c0       	rjmp	.+42     	; 0x592a <__vector_7+0x60>
	} 
	else 
	{				// Falling
		RxChannel[THROTTLE] = TCNT1 - RxChannelStart[THROTTLE];
    5900:	80 91 84 00 	lds	r24, 0x0084
    5904:	90 91 85 00 	lds	r25, 0x0085
    5908:	20 91 c7 07 	lds	r18, 0x07C7
    590c:	30 91 c8 07 	lds	r19, 0x07C8
    5910:	82 1b       	sub	r24, r18
    5912:	93 0b       	sbc	r25, r19
    5914:	90 93 b3 07 	sts	0x07B3, r25
    5918:	80 93 b2 07 	sts	0x07B2, r24
		if (Config.PWM_Sync == THROTTLE) 
    591c:	80 91 d4 05 	lds	r24, 0x05D4
    5920:	81 11       	cpse	r24, r1
    5922:	03 c0       	rjmp	.+6      	; 0x592a <__vector_7+0x60>
		{
			Interrupted = true;						// Signal that interrupt block has finished
    5924:	81 e0       	ldi	r24, 0x01	; 1
    5926:	80 93 c2 07 	sts	0x07C2, r24
		}
	}
}
    592a:	9f 91       	pop	r25
    592c:	8f 91       	pop	r24
    592e:	3f 91       	pop	r19
    5930:	2f 91       	pop	r18
    5932:	0f 90       	pop	r0
    5934:	0f be       	out	0x3f, r0	; 63
    5936:	0f 90       	pop	r0
    5938:	1f 90       	pop	r1
    593a:	18 95       	reti

0000593c <__vector_5>:


ISR(PCINT1_vect)
{
    593c:	1f 92       	push	r1
    593e:	0f 92       	push	r0
    5940:	0f b6       	in	r0, 0x3f	; 63
    5942:	0f 92       	push	r0
    5944:	11 24       	eor	r1, r1
    5946:	2f 93       	push	r18
    5948:	3f 93       	push	r19
    594a:	8f 93       	push	r24
    594c:	9f 93       	push	r25
	if (JitterGate)	JitterFlag = true;
    594e:	80 91 dc 07 	lds	r24, 0x07DC
    5952:	88 23       	and	r24, r24
    5954:	19 f0       	breq	.+6      	; 0x595c <__vector_5+0x20>
    5956:	81 e0       	ldi	r24, 0x01	; 1
    5958:	80 93 dd 07 	sts	0x07DD, r24

	if (RX_AUX)	// Rising
    595c:	18 9b       	sbis	0x03, 0	; 3
    595e:	09 c0       	rjmp	.+18     	; 0x5972 <__vector_5+0x36>
	{
		RxChannelStart[GEAR] = TCNT1;
    5960:	80 91 84 00 	lds	r24, 0x0084
    5964:	90 91 85 00 	lds	r25, 0x0085
    5968:	90 93 d0 07 	sts	0x07D0, r25
    596c:	80 93 cf 07 	sts	0x07CF, r24
    5970:	15 c0       	rjmp	.+42     	; 0x599c <__vector_5+0x60>
	} 
	else 
	{				// Falling
		RxChannel[GEAR] = TCNT1 - RxChannelStart[GEAR];
    5972:	80 91 84 00 	lds	r24, 0x0084
    5976:	90 91 85 00 	lds	r25, 0x0085
    597a:	20 91 cf 07 	lds	r18, 0x07CF
    597e:	30 91 d0 07 	lds	r19, 0x07D0
    5982:	82 1b       	sub	r24, r18
    5984:	93 0b       	sbc	r25, r19
    5986:	90 93 bb 07 	sts	0x07BB, r25
    598a:	80 93 ba 07 	sts	0x07BA, r24
		if (Config.PWM_Sync == GEAR) 
    598e:	80 91 d4 05 	lds	r24, 0x05D4
    5992:	84 30       	cpi	r24, 0x04	; 4
    5994:	19 f4       	brne	.+6      	; 0x599c <__vector_5+0x60>
		{
			Interrupted = true;						// Signal that interrupt block has finished
    5996:	81 e0       	ldi	r24, 0x01	; 1
    5998:	80 93 c2 07 	sts	0x07C2, r24
		}
	}
}
    599c:	9f 91       	pop	r25
    599e:	8f 91       	pop	r24
    59a0:	3f 91       	pop	r19
    59a2:	2f 91       	pop	r18
    59a4:	0f 90       	pop	r0
    59a6:	0f be       	out	0x3f, r0	; 63
    59a8:	0f 90       	pop	r0
    59aa:	1f 90       	pop	r1
    59ac:	18 95       	reti

000059ae <TIM16_ReadTCNT1>:
{
	uint8_t sreg;
	uint16_t i;
	
	/* Save global interrupt flag */
	sreg = SREG;
    59ae:	2f b7       	in	r18, 0x3f	; 63
	
	/* Disable interrupts */
	cli();
    59b0:	f8 94       	cli
	
	/* Read TCNTn into i */
	i = TCNT1;
    59b2:	80 91 84 00 	lds	r24, 0x0084
    59b6:	90 91 85 00 	lds	r25, 0x0085
	
	/* Restore global interrupt flag */
	SREG = sreg;
    59ba:	2f bf       	out	0x3f, r18	; 63
	return i;
}
    59bc:	08 95       	ret

000059be <__vector_3>:
// Compacted CPPM RX code thanks to Edgar
//
//************************************************************

ISR(INT2_vect)
{
    59be:	1f 92       	push	r1
    59c0:	0f 92       	push	r0
    59c2:	0f b6       	in	r0, 0x3f	; 63
    59c4:	0f 92       	push	r0
    59c6:	11 24       	eor	r1, r1
    59c8:	2f 93       	push	r18
    59ca:	3f 93       	push	r19
    59cc:	4f 93       	push	r20
    59ce:	5f 93       	push	r21
    59d0:	6f 93       	push	r22
    59d2:	7f 93       	push	r23
    59d4:	8f 93       	push	r24
    59d6:	9f 93       	push	r25
    59d8:	af 93       	push	r26
    59da:	bf 93       	push	r27
    59dc:	ef 93       	push	r30
    59de:	ff 93       	push	r31
	if (JitterGate)	JitterFlag = true;	
    59e0:	80 91 dc 07 	lds	r24, 0x07DC
    59e4:	88 23       	and	r24, r24
    59e6:	19 f0       	breq	.+6      	; 0x59ee <__vector_3+0x30>
    59e8:	81 e0       	ldi	r24, 0x01	; 1
    59ea:	80 93 dd 07 	sts	0x07DD, r24

    // Backup TCNT1
    uint16_t tCount;
	
    tCount = TIM16_ReadTCNT1();
    59ee:	0e 94 d7 2c 	call	0x59ae	; 0x59ae <TIM16_ReadTCNT1>

	uint8_t curChannel;
	uint8_t prevChannel;

	if (Config.RxMode != CPPM_MODE)
    59f2:	20 91 d2 05 	lds	r18, 0x05D2
    59f6:	22 23       	and	r18, r18
    59f8:	d1 f0       	breq	.+52     	; 0x5a2e <__vector_3+0x70>
	{
		if (RX_YAW)	// Rising
    59fa:	1a 9b       	sbis	0x03, 2	; 3
    59fc:	05 c0       	rjmp	.+10     	; 0x5a08 <__vector_3+0x4a>
		{
			RxChannelStart[RUDDER] = tCount;
    59fe:	90 93 ce 07 	sts	0x07CE, r25
    5a02:	80 93 cd 07 	sts	0x07CD, r24
    5a06:	86 c0       	rjmp	.+268    	; 0x5b14 <__vector_3+0x156>
		} 
		else 
		{			// Falling
			RxChannel[RUDDER] = tCount - RxChannelStart[RUDDER];
    5a08:	20 91 cd 07 	lds	r18, 0x07CD
    5a0c:	30 91 ce 07 	lds	r19, 0x07CE
    5a10:	82 1b       	sub	r24, r18
    5a12:	93 0b       	sbc	r25, r19
    5a14:	90 93 b9 07 	sts	0x07B9, r25
    5a18:	80 93 b8 07 	sts	0x07B8, r24
			if (Config.PWM_Sync == RUDDER) 
    5a1c:	80 91 d4 05 	lds	r24, 0x05D4
    5a20:	83 30       	cpi	r24, 0x03	; 3
    5a22:	09 f0       	breq	.+2      	; 0x5a26 <__vector_3+0x68>
    5a24:	77 c0       	rjmp	.+238    	; 0x5b14 <__vector_3+0x156>
			{
				Interrupted = true;					// Signal that interrupt block has finished
    5a26:	81 e0       	ldi	r24, 0x01	; 1
    5a28:	80 93 c2 07 	sts	0x07C2, r24
    5a2c:	73 c0       	rjmp	.+230    	; 0x5b14 <__vector_3+0x156>
	// CPPM receivers.
	//************************************************************
	else
	{
		// Only respond to negative-going interrupts
		if (CPPM) return;
    5a2e:	1a 99       	sbic	0x03, 2	; 3
    5a30:	71 c0       	rjmp	.+226    	; 0x5b14 <__vector_3+0x156>

		// Check to see if previous period was a sync pulse or too small to be valid
		// If so, reset the channel number
		if (((tCount - PPMSyncStart) > SYNCPULSEWIDTH) || ((tCount - PPMSyncStart) < MINPULSEWIDTH))
    5a32:	20 91 da 07 	lds	r18, 0x07DA
    5a36:	30 91 db 07 	lds	r19, 0x07DB
    5a3a:	ac 01       	movw	r20, r24
    5a3c:	42 1b       	sub	r20, r18
    5a3e:	53 0b       	sbc	r21, r19
    5a40:	9a 01       	movw	r18, r20
    5a42:	2f 35       	cpi	r18, 0x5F	; 95
    5a44:	3a 41       	sbci	r19, 0x1A	; 26
    5a46:	58 f4       	brcc	.+22     	; 0x5a5e <__vector_3+0xa0>
    5a48:	20 91 da 07 	lds	r18, 0x07DA
    5a4c:	30 91 db 07 	lds	r19, 0x07DB
    5a50:	ac 01       	movw	r20, r24
    5a52:	42 1b       	sub	r20, r18
    5a54:	53 0b       	sbc	r21, r19
    5a56:	9a 01       	movw	r18, r20
    5a58:	2e 3e       	cpi	r18, 0xEE	; 238
    5a5a:	32 40       	sbci	r19, 0x02	; 2
    5a5c:	10 f4       	brcc	.+4      	; 0x5a62 <__vector_3+0xa4>
		{
			ch_num = 0;
    5a5e:	10 92 d9 07 	sts	0x07D9, r1
		}

		// Update PPMSyncStart with current value
		PPMSyncStart = tCount;
    5a62:	90 93 db 07 	sts	0x07DB, r25
    5a66:	80 93 da 07 	sts	0x07DA, r24

		// Get the channel number of the current channel in the requested channel order
        curChannel = Config.ChannelOrder[ch_num];
    5a6a:	e0 91 d9 07 	lds	r30, 0x07D9
    5a6e:	f0 e0       	ldi	r31, 0x00	; 0
    5a70:	e7 55       	subi	r30, 0x57	; 87
    5a72:	fa 4f       	sbci	r31, 0xFA	; 250
    5a74:	e1 81       	ldd	r30, Z+1	; 0x01

		// Set up previous channel number based on the requested channel order
		if (ch_num > 0)
    5a76:	20 91 d9 07 	lds	r18, 0x07D9
    5a7a:	22 23       	and	r18, r18
    5a7c:	39 f0       	breq	.+14     	; 0x5a8c <__vector_3+0xce>
		{
			prevChannel = Config.ChannelOrder[ch_num-1];
    5a7e:	a0 91 d9 07 	lds	r26, 0x07D9
    5a82:	b0 e0       	ldi	r27, 0x00	; 0
    5a84:	a7 55       	subi	r26, 0x57	; 87
    5a86:	ba 4f       	sbci	r27, 0xFA	; 250
    5a88:	2c 91       	ld	r18, X
    5a8a:	01 c0       	rjmp	.+2      	; 0x5a8e <__vector_3+0xd0>
		}
		else
		{
			prevChannel = 0;
    5a8c:	20 e0       	ldi	r18, 0x00	; 0
		}

		// Measure the channel data only for the first MAX_CPPM_CHANNELS (currently 8)
		// Prevent code from over-running RxChannelStart[]
        if (ch_num < MAX_CPPM_CHANNELS)
    5a8e:	30 91 d9 07 	lds	r19, 0x07D9
    5a92:	38 30       	cpi	r19, 0x08	; 8
    5a94:	38 f4       	brcc	.+14     	; 0x5aa4 <__vector_3+0xe6>
		{
            RxChannelStart[curChannel] = tCount;
    5a96:	f0 e0       	ldi	r31, 0x00	; 0
    5a98:	ee 0f       	add	r30, r30
    5a9a:	ff 1f       	adc	r31, r31
    5a9c:	e9 53       	subi	r30, 0x39	; 57
    5a9e:	f8 4f       	sbci	r31, 0xF8	; 248
    5aa0:	91 83       	std	Z+1, r25	; 0x01
    5aa2:	80 83       	st	Z, r24
		}

		// When ch_num = 0, the first channel has not yet been measured.
		// That only occurs at the second pulse. Prevent code from over-running RxChannel[]
        if ((ch_num > 0) && (ch_num <= MAX_CPPM_CHANNELS))
    5aa4:	30 91 d9 07 	lds	r19, 0x07D9
    5aa8:	33 23       	and	r19, r19
    5aaa:	99 f0       	breq	.+38     	; 0x5ad2 <__vector_3+0x114>
    5aac:	30 91 d9 07 	lds	r19, 0x07D9
    5ab0:	39 30       	cpi	r19, 0x09	; 9
    5ab2:	78 f4       	brcc	.+30     	; 0x5ad2 <__vector_3+0x114>
        {
		   RxChannel[prevChannel] = tCount - RxChannelStart[prevChannel];
    5ab4:	30 e0       	ldi	r19, 0x00	; 0
    5ab6:	22 0f       	add	r18, r18
    5ab8:	33 1f       	adc	r19, r19
    5aba:	f9 01       	movw	r30, r18
    5abc:	e9 53       	subi	r30, 0x39	; 57
    5abe:	f8 4f       	sbci	r31, 0xF8	; 248
    5ac0:	40 81       	ld	r20, Z
    5ac2:	51 81       	ldd	r21, Z+1	; 0x01
    5ac4:	84 1b       	sub	r24, r20
    5ac6:	95 0b       	sbc	r25, r21
    5ac8:	f9 01       	movw	r30, r18
    5aca:	ee 54       	subi	r30, 0x4E	; 78
    5acc:	f8 4f       	sbci	r31, 0xF8	; 248
    5ace:	91 83       	std	Z+1, r25	; 0x01
    5ad0:	80 83       	st	Z, r24
		}

        // Increment to the next channel
		ch_num++;
    5ad2:	80 91 d9 07 	lds	r24, 0x07D9
    5ad6:	8f 5f       	subi	r24, 0xFF	; 255
    5ad8:	80 93 d9 07 	sts	0x07D9, r24

		// Work out the highest channel number automatically.
		// Update the maximum channel seen so far.
		if (ch_num > max_chan) 
    5adc:	90 91 d9 07 	lds	r25, 0x07D9
    5ae0:	80 91 c3 07 	lds	r24, 0x07C3
    5ae4:	89 17       	cp	r24, r25
    5ae6:	28 f4       	brcc	.+10     	; 0x5af2 <__vector_3+0x134>
		{
			max_chan = ch_num;					// Update max channel number
    5ae8:	80 91 d9 07 	lds	r24, 0x07D9
    5aec:	80 93 c3 07 	sts	0x07C3, r24
    5af0:	09 c0       	rjmp	.+18     	; 0x5b04 <__vector_3+0x146>
		}
		// If the current channel is the highest channel, CPPM is complete
		else if (ch_num == max_chan)
    5af2:	90 91 d9 07 	lds	r25, 0x07D9
    5af6:	80 91 c3 07 	lds	r24, 0x07C3
    5afa:	98 13       	cpse	r25, r24
    5afc:	03 c0       	rjmp	.+6      	; 0x5b04 <__vector_3+0x146>
		{
			Interrupted = true;					// Signal that interrupt block has finished
    5afe:	81 e0       	ldi	r24, 0x01	; 1
    5b00:	80 93 c2 07 	sts	0x07C2, r24
		}
	
		// If the signal is ever lost, reset measured max channel number
		// and force a recalculation
		if (Overdue)
    5b04:	80 91 17 05 	lds	r24, 0x0517
    5b08:	88 23       	and	r24, r24
    5b0a:	21 f0       	breq	.+8      	; 0x5b14 <__vector_3+0x156>
		{
			max_chan = 0;
    5b0c:	10 92 c3 07 	sts	0x07C3, r1
			Overdue = false;
    5b10:	10 92 17 05 	sts	0x0517, r1
		}
	}
} // ISR(INT2_vect)
    5b14:	ff 91       	pop	r31
    5b16:	ef 91       	pop	r30
    5b18:	bf 91       	pop	r27
    5b1a:	af 91       	pop	r26
    5b1c:	9f 91       	pop	r25
    5b1e:	8f 91       	pop	r24
    5b20:	7f 91       	pop	r23
    5b22:	6f 91       	pop	r22
    5b24:	5f 91       	pop	r21
    5b26:	4f 91       	pop	r20
    5b28:	3f 91       	pop	r19
    5b2a:	2f 91       	pop	r18
    5b2c:	0f 90       	pop	r0
    5b2e:	0f be       	out	0x3f, r0	; 63
    5b30:	0f 90       	pop	r0
    5b32:	1f 90       	pop	r1
    5b34:	18 95       	reti

00005b36 <__vector_20>:
//************************************************************
//* Serial receive interrupt
//************************************************************

ISR(USART0_RX_vect)
{
    5b36:	1f 92       	push	r1
    5b38:	0f 92       	push	r0
    5b3a:	0f b6       	in	r0, 0x3f	; 63
    5b3c:	0f 92       	push	r0
    5b3e:	11 24       	eor	r1, r1
    5b40:	2f 93       	push	r18
    5b42:	3f 93       	push	r19
    5b44:	4f 93       	push	r20
    5b46:	5f 93       	push	r21
    5b48:	6f 93       	push	r22
    5b4a:	7f 93       	push	r23
    5b4c:	8f 93       	push	r24
    5b4e:	9f 93       	push	r25
    5b50:	af 93       	push	r26
    5b52:	bf 93       	push	r27
    5b54:	cf 93       	push	r28
    5b56:	ef 93       	push	r30
    5b58:	ff 93       	push	r31
	//************************************************************
	//* Common entry code
	//************************************************************

	// Log interrupts that occur during PWM generation
	if (JitterGate)	JitterFlag = true;
    5b5a:	80 91 dc 07 	lds	r24, 0x07DC
    5b5e:	88 23       	and	r24, r24
    5b60:	19 f0       	breq	.+6      	; 0x5b68 <__vector_20+0x32>
    5b62:	81 e0       	ldi	r24, 0x01	; 1
    5b64:	80 93 dd 07 	sts	0x07DD, r24

	// Read byte first
	temp = UDR0;
    5b68:	c0 91 c6 00 	lds	r28, 0x00C6

	// Save current time stamp
	Save_TCNT1 = TIM16_ReadTCNT1();
    5b6c:	0e 94 d7 2c 	call	0x59ae	; 0x59ae <TIM16_ReadTCNT1>
	
	// Work out frame rate properly
	// Note that CurrentPeriod cannot be larger than 26.2ms
	
	//CurrentPeriod = Save_TCNT1 - PPMSyncStart;
	if (Save_TCNT1 < PPMSyncStart)
    5b70:	20 91 da 07 	lds	r18, 0x07DA
    5b74:	30 91 db 07 	lds	r19, 0x07DB
	{
		CurrentPeriod = (65536 - PPMSyncStart + Save_TCNT1);
	}
	else
	{
		CurrentPeriod = (Save_TCNT1 - PPMSyncStart);
    5b78:	20 91 da 07 	lds	r18, 0x07DA
    5b7c:	30 91 db 07 	lds	r19, 0x07DB
    5b80:	ac 01       	movw	r20, r24
    5b82:	42 1b       	sub	r20, r18
    5b84:	53 0b       	sbc	r21, r19
    5b86:	9a 01       	movw	r18, r20
	}

	// Handle start of new packet
	if (CurrentPeriod > PACKET_TIMER) // 1.0ms
    5b88:	25 3c       	cpi	r18, 0xC5	; 197
    5b8a:	59 e0       	ldi	r21, 0x09	; 9
    5b8c:	35 07       	cpc	r19, r21
    5b8e:	90 f0       	brcs	.+36     	; 0x5bb4 <__vector_20+0x7e>
	{
		// Reset variables
		rcindex = 0;
    5b90:	10 92 b1 07 	sts	0x07B1, r1
		bytecount = 0;
    5b94:	10 92 c4 07 	sts	0x07C4, r1
		ch_num = 0;
    5b98:	10 92 d9 07 	sts	0x07D9, r1
		checksum = 0;
    5b9c:	10 92 df 07 	sts	0x07DF, r1
    5ba0:	10 92 de 07 	sts	0x07DE, r1
		chanmask16 = 0;
    5ba4:	10 92 d8 07 	sts	0x07D8, r1
    5ba8:	10 92 d7 07 	sts	0x07D7, r1

		// Save frame rate to global
		FrameRate = CurrentPeriod;
    5bac:	30 93 e1 07 	sts	0x07E1, r19
    5bb0:	20 93 e0 07 	sts	0x07E0, r18
	}

	// Timestamp this interrupt
	PPMSyncStart = Save_TCNT1;
    5bb4:	90 93 db 07 	sts	0x07DB, r25
    5bb8:	80 93 da 07 	sts	0x07DA, r24
	
	// Put received byte in buffer if space available
	if (rcindex < SBUFFER_SIZE)
    5bbc:	80 91 b1 07 	lds	r24, 0x07B1
    5bc0:	89 31       	cpi	r24, 0x19	; 25
    5bc2:	50 f4       	brcc	.+20     	; 0x5bd8 <__vector_20+0xa2>
	{
		sBuffer[rcindex++] = temp;			
    5bc4:	e0 91 b1 07 	lds	r30, 0x07B1
    5bc8:	81 e0       	ldi	r24, 0x01	; 1
    5bca:	8e 0f       	add	r24, r30
    5bcc:	80 93 b1 07 	sts	0x07B1, r24
    5bd0:	f0 e0       	ldi	r31, 0x00	; 0
    5bd2:	ee 5b       	subi	r30, 0xBE	; 190
    5bd4:	fa 4f       	sbci	r31, 0xFA	; 250
    5bd6:	c0 83       	st	Z, r28
	//* 	bit0 = n/a
	//* 24 endbyte = 00000000b (SBUS) or (data % 0xCF) (SBUS2)
	//*
	//************************************************************

	if (Config.RxMode == SBUS)
    5bd8:	80 91 d2 05 	lds	r24, 0x05D2
    5bdc:	82 30       	cpi	r24, 0x02	; 2
    5bde:	09 f0       	breq	.+2      	; 0x5be2 <__vector_20+0xac>
    5be0:	90 c0       	rjmp	.+288    	; 0x5d02 <__vector_20+0x1cc>
	{
		// Flag that packet has completed
		if ((bytecount == 24) && ((temp == 0x00) || ((temp % 0xCF) == 0x04)))
    5be2:	80 91 c4 07 	lds	r24, 0x07C4
    5be6:	88 31       	cpi	r24, 0x18	; 24
    5be8:	09 f0       	breq	.+2      	; 0x5bec <__vector_20+0xb6>
    5bea:	fc c0       	rjmp	.+504    	; 0x5de4 <__vector_20+0x2ae>
    5bec:	cc 23       	and	r28, r28
    5bee:	59 f0       	breq	.+22     	; 0x5c06 <__vector_20+0xd0>
    5bf0:	81 e0       	ldi	r24, 0x01	; 1
    5bf2:	cf 3c       	cpi	r28, 0xCF	; 207
    5bf4:	08 f4       	brcc	.+2      	; 0x5bf8 <__vector_20+0xc2>
    5bf6:	80 e0       	ldi	r24, 0x00	; 0
    5bf8:	91 e3       	ldi	r25, 0x31	; 49
    5bfa:	89 9f       	mul	r24, r25
    5bfc:	c0 0d       	add	r28, r0
    5bfe:	11 24       	eor	r1, r1
    5c00:	c4 30       	cpi	r28, 0x04	; 4
    5c02:	09 f0       	breq	.+2      	; 0x5c06 <__vector_20+0xd0>
    5c04:	ef c0       	rjmp	.+478    	; 0x5de4 <__vector_20+0x2ae>
		{
			// If frame lost, ignore packet
			if ((sBuffer[23] & 0x20) == 0)
    5c06:	80 91 59 05 	lds	r24, 0x0559
    5c0a:	85 fd       	sbrc	r24, 5
    5c0c:	eb c0       	rjmp	.+470    	; 0x5de4 <__vector_20+0x2ae>
			{
				// RC sync established
				Interrupted = true;
    5c0e:	81 e0       	ldi	r24, 0x01	; 1
    5c10:	80 93 c2 07 	sts	0x07C2, r24
    5c14:	80 e0       	ldi	r24, 0x00	; 0
    5c16:	90 e0       	ldi	r25, 0x00	; 0

				// Clear channel data
				for (j = 0; j < MAX_RC_CHANNELS; j++)
				{
					RxChannel[j] = 0;
    5c18:	fc 01       	movw	r30, r24
    5c1a:	ee 0f       	add	r30, r30
    5c1c:	ff 1f       	adc	r31, r31
    5c1e:	ee 54       	subi	r30, 0x4E	; 78
    5c20:	f8 4f       	sbci	r31, 0xF8	; 248
    5c22:	11 82       	std	Z+1, r1	; 0x01
    5c24:	10 82       	st	Z, r1
    5c26:	01 96       	adiw	r24, 0x01	; 1
			{
				// RC sync established
				Interrupted = true;

				// Clear channel data
				for (j = 0; j < MAX_RC_CHANNELS; j++)
    5c28:	88 30       	cpi	r24, 0x08	; 8
    5c2a:	91 05       	cpc	r25, r1
    5c2c:	a9 f7       	brne	.-22     	; 0x5c18 <__vector_20+0xe2>
    5c2e:	a8 e5       	ldi	r26, 0x58	; 88
    5c30:	70 e0       	ldi	r23, 0x00	; 0
    5c32:	c0 e0       	ldi	r28, 0x00	; 0
    5c34:	60 e0       	ldi	r22, 0x00	; 0
    5c36:	b1 e0       	ldi	r27, 0x01	; 1
                for (j = 0; j < 88; j++)
                {
                    if (sBuffer[sindex] & (1<<chan_mask))
                    {
						// Place the RC data into the correct channel order for the transmitted system
						RxChannel[Config.ChannelOrder[chan_shift]] |= (1<<data_mask);
    5c38:	21 e0       	ldi	r18, 0x01	; 1
    5c3a:	30 e0       	ldi	r19, 0x00	; 0

                // Deconstruct S-Bus data
				// 8 channels * 11 bits = 88 bits
                for (j = 0; j < 88; j++)
                {
                    if (sBuffer[sindex] & (1<<chan_mask))
    5c3c:	eb 2f       	mov	r30, r27
    5c3e:	f0 e0       	ldi	r31, 0x00	; 0
    5c40:	ee 5b       	subi	r30, 0xBE	; 190
    5c42:	fa 4f       	sbci	r31, 0xFA	; 250
    5c44:	80 81       	ld	r24, Z
    5c46:	90 e0       	ldi	r25, 0x00	; 0
    5c48:	06 2e       	mov	r0, r22
    5c4a:	02 c0       	rjmp	.+4      	; 0x5c50 <__vector_20+0x11a>
    5c4c:	95 95       	asr	r25
    5c4e:	87 95       	ror	r24
    5c50:	0a 94       	dec	r0
    5c52:	e2 f7       	brpl	.-8      	; 0x5c4c <__vector_20+0x116>
    5c54:	80 ff       	sbrs	r24, 0
    5c56:	17 c0       	rjmp	.+46     	; 0x5c86 <__vector_20+0x150>
                    {
						// Place the RC data into the correct channel order for the transmitted system
						RxChannel[Config.ChannelOrder[chan_shift]] |= (1<<data_mask);
    5c58:	ec 2f       	mov	r30, r28
    5c5a:	f0 e0       	ldi	r31, 0x00	; 0
    5c5c:	e7 55       	subi	r30, 0x57	; 87
    5c5e:	fa 4f       	sbci	r31, 0xFA	; 250
    5c60:	e1 81       	ldd	r30, Z+1	; 0x01
    5c62:	f0 e0       	ldi	r31, 0x00	; 0
    5c64:	ee 0f       	add	r30, r30
    5c66:	ff 1f       	adc	r31, r31
    5c68:	ee 54       	subi	r30, 0x4E	; 78
    5c6a:	f8 4f       	sbci	r31, 0xF8	; 248
    5c6c:	80 81       	ld	r24, Z
    5c6e:	91 81       	ldd	r25, Z+1	; 0x01
    5c70:	a9 01       	movw	r20, r18
    5c72:	07 2e       	mov	r0, r23
    5c74:	02 c0       	rjmp	.+4      	; 0x5c7a <__vector_20+0x144>
    5c76:	44 0f       	add	r20, r20
    5c78:	55 1f       	adc	r21, r21
    5c7a:	0a 94       	dec	r0
    5c7c:	e2 f7       	brpl	.-8      	; 0x5c76 <__vector_20+0x140>
    5c7e:	84 2b       	or	r24, r20
    5c80:	95 2b       	or	r25, r21
    5c82:	91 83       	std	Z+1, r25	; 0x01
    5c84:	80 83       	st	Z, r24
                    }

                    chan_mask++;
    5c86:	6f 5f       	subi	r22, 0xFF	; 255
                    data_mask++;
    5c88:	7f 5f       	subi	r23, 0xFF	; 255

                    // If we have done 8 bits, move to next byte in buffer
					if (chan_mask == 8)
    5c8a:	68 30       	cpi	r22, 0x08	; 8
    5c8c:	11 f4       	brne	.+4      	; 0x5c92 <__vector_20+0x15c>
                    {
                        chan_mask =0;
                        sindex++;
    5c8e:	bf 5f       	subi	r27, 0xFF	; 255
                    data_mask++;

                    // If we have done 8 bits, move to next byte in buffer
					if (chan_mask == 8)
                    {
                        chan_mask =0;
    5c90:	60 e0       	ldi	r22, 0x00	; 0
                        sindex++;
                    }

                    // If we have reconstructed all 11 bits of one channel's data (2047)
					// increment the channel number
					if (data_mask == 11)
    5c92:	7b 30       	cpi	r23, 0x0B	; 11
    5c94:	11 f4       	brne	.+4      	; 0x5c9a <__vector_20+0x164>
                    {
                        data_mask =0;
                        chan_shift++;
    5c96:	cf 5f       	subi	r28, 0xFF	; 255

                    // If we have reconstructed all 11 bits of one channel's data (2047)
					// increment the channel number
					if (data_mask == 11)
                    {
                        data_mask =0;
    5c98:	70 e0       	ldi	r23, 0x00	; 0
    5c9a:	a1 50       	subi	r26, 0x01	; 1
				// Start from second byte
				sindex = 1;

                // Deconstruct S-Bus data
				// 8 channels * 11 bits = 88 bits
                for (j = 0; j < 88; j++)
    5c9c:	79 f6       	brne	.-98     	; 0x5c3c <__vector_20+0x106>
    5c9e:	40 e0       	ldi	r20, 0x00	; 0
    5ca0:	50 e0       	ldi	r21, 0x00	; 0

				// Convert to  OpenAero2 values (0~2047 -> 2500~4999)
				for (j = 0; j < MAX_RC_CHANNELS; j++)
				{
					// Subtract weird-ass Futaba offset
					itemp16= RxChannel[j] - 1024;	
    5ca2:	fa 01       	movw	r30, r20
    5ca4:	ee 0f       	add	r30, r30
    5ca6:	ff 1f       	adc	r31, r31
    5ca8:	ee 54       	subi	r30, 0x4E	; 78
    5caa:	f8 4f       	sbci	r31, 0xF8	; 248
    5cac:	20 81       	ld	r18, Z
    5cae:	31 81       	ldd	r19, Z+1	; 0x01
    5cb0:	34 50       	subi	r19, 0x04	; 4
					
					// Expand into OpenAero2 units							
					itemp16 = itemp16 + (itemp16 >> 2) + (itemp16 >> 3) + (itemp16 >> 4) + (itemp16 >> 5); 	// Quick multiply by 1.469 :)
    5cb2:	c9 01       	movw	r24, r18
    5cb4:	95 95       	asr	r25
    5cb6:	87 95       	ror	r24
    5cb8:	95 95       	asr	r25
    5cba:	87 95       	ror	r24
    5cbc:	82 0f       	add	r24, r18
    5cbe:	93 1f       	adc	r25, r19
    5cc0:	b9 01       	movw	r22, r18
    5cc2:	a3 e0       	ldi	r26, 0x03	; 3
    5cc4:	75 95       	asr	r23
    5cc6:	67 95       	ror	r22
    5cc8:	aa 95       	dec	r26
    5cca:	e1 f7       	brne	.-8      	; 0x5cc4 <__vector_20+0x18e>
    5ccc:	86 0f       	add	r24, r22
    5cce:	97 1f       	adc	r25, r23
    5cd0:	b9 01       	movw	r22, r18
    5cd2:	b4 e0       	ldi	r27, 0x04	; 4
    5cd4:	75 95       	asr	r23
    5cd6:	67 95       	ror	r22
    5cd8:	ba 95       	dec	r27
    5cda:	e1 f7       	brne	.-8      	; 0x5cd4 <__vector_20+0x19e>
    5cdc:	86 0f       	add	r24, r22
    5cde:	97 1f       	adc	r25, r23
    5ce0:	c5 e0       	ldi	r28, 0x05	; 5
    5ce2:	35 95       	asr	r19
    5ce4:	27 95       	ror	r18
    5ce6:	ca 95       	dec	r28
    5ce8:	e1 f7       	brne	.-8      	; 0x5ce2 <__vector_20+0x1ac>
    5cea:	82 0f       	add	r24, r18
    5cec:	93 1f       	adc	r25, r19
					//itemp16 = itemp16 + (itemp16 >> 1); // Quicker mulitply by 1.5

					// Add back in OpenAero2 offset
					RxChannel[j] = itemp16 + 3750;				
    5cee:	8a 55       	subi	r24, 0x5A	; 90
    5cf0:	91 4f       	sbci	r25, 0xF1	; 241
    5cf2:	91 83       	std	Z+1, r25	; 0x01
    5cf4:	80 83       	st	Z, r24
    5cf6:	4f 5f       	subi	r20, 0xFF	; 255
    5cf8:	5f 4f       	sbci	r21, 0xFF	; 255
                        chan_shift++;
                    }
                }

				// Convert to  OpenAero2 values (0~2047 -> 2500~4999)
				for (j = 0; j < MAX_RC_CHANNELS; j++)
    5cfa:	48 30       	cpi	r20, 0x08	; 8
    5cfc:	51 05       	cpc	r21, r1
    5cfe:	89 f6       	brne	.-94     	; 0x5ca2 <__vector_20+0x16c>
    5d00:	71 c0       	rjmp	.+226    	; 0x5de4 <__vector_20+0x2ae>
	//* 0 = 750us, 1023/2047 = 2250us
	//*
	//************************************************************

	// Handle Spektrum format
	if (Config.RxMode == SPEKTRUM)
    5d02:	83 30       	cpi	r24, 0x03	; 3
    5d04:	09 f0       	breq	.+2      	; 0x5d08 <__vector_20+0x1d2>
    5d06:	6e c0       	rjmp	.+220    	; 0x5de4 <__vector_20+0x2ae>
	{
		// Process data when all packets received
		if (bytecount >= 15)
    5d08:	80 91 c4 07 	lds	r24, 0x07C4
    5d0c:	8f 30       	cpi	r24, 0x0F	; 15
    5d0e:	08 f4       	brcc	.+2      	; 0x5d12 <__vector_20+0x1dc>
    5d10:	69 c0       	rjmp	.+210    	; 0x5de4 <__vector_20+0x2ae>
		{
			// Ahem... ah... just stick the last byte into the buffer manually...(hides)
			sBuffer[15] = temp;
    5d12:	c0 93 51 05 	sts	0x0551, r28

			// Set start of channel data per format
			sindex = 2; // Channel data from byte 3

			// Work out if this is 10 or 11 bit data
			if (sBuffer[1] & 0x10) 	// 0 for 10 bit resolution 1 for 11 bit resolution
    5d16:	80 91 43 05 	lds	r24, 0x0543
    5d1a:	84 ff       	sbrs	r24, 4
    5d1c:	04 c0       	rjmp	.+8      	; 0x5d26 <__vector_20+0x1f0>
			{
				chan_mask = 0x78;	// 11 bit (2048)
				data_mask = 0x07;
    5d1e:	c7 e0       	ldi	r28, 0x07	; 7
				chan_shift = 0x03;
    5d20:	63 e0       	ldi	r22, 0x03	; 3
			sindex = 2; // Channel data from byte 3

			// Work out if this is 10 or 11 bit data
			if (sBuffer[1] & 0x10) 	// 0 for 10 bit resolution 1 for 11 bit resolution
			{
				chan_mask = 0x78;	// 11 bit (2048)
    5d22:	78 e7       	ldi	r23, 0x78	; 120
    5d24:	03 c0       	rjmp	.+6      	; 0x5d2c <__vector_20+0x1f6>
				chan_shift = 0x03;
			}
			else
			{
				chan_mask = 0x3C;	// 10 bit (1024)
				data_mask = 0x03;
    5d26:	c3 e0       	ldi	r28, 0x03	; 3
				chan_shift = 0x02;
    5d28:	62 e0       	ldi	r22, 0x02	; 2
				data_mask = 0x07;
				chan_shift = 0x03;
			}
			else
			{
				chan_mask = 0x3C;	// 10 bit (1024)
    5d2a:	7c e3       	ldi	r23, 0x3C	; 60
    5d2c:	e5 e4       	ldi	r30, 0x45	; 69
    5d2e:	f5 e0       	ldi	r31, 0x05	; 5
    5d30:	df 01       	movw	r26, r30
    5d32:	11 97       	sbiw	r26, 0x01	; 1
			// Work out which channel the data is intended for from the channel number data
			// Channels can also be in the second packet. Spektrum has 7 channels per packet.
			for (j = 0; j < 7; j++)
			{
				// Extract channel number
				ch_num = (sBuffer[sindex] & chan_mask) >> chan_shift;
    5d34:	2c 91       	ld	r18, X
    5d36:	82 2f       	mov	r24, r18
    5d38:	87 23       	and	r24, r23
    5d3a:	90 e0       	ldi	r25, 0x00	; 0
    5d3c:	06 2e       	mov	r0, r22
    5d3e:	02 c0       	rjmp	.+4      	; 0x5d44 <__vector_20+0x20e>
    5d40:	95 95       	asr	r25
    5d42:	87 95       	ror	r24
    5d44:	0a 94       	dec	r0
    5d46:	e2 f7       	brpl	.-8      	; 0x5d40 <__vector_20+0x20a>
    5d48:	80 93 d9 07 	sts	0x07D9, r24

				// Reconstruct channel data
				temp16 = ((sBuffer[sindex] & data_mask) << 8) + sBuffer[sindex + 1];
    5d4c:	80 81       	ld	r24, Z

				// Expand to OpenAero2 units if a valid channel
				// Blank channels have the channel number of 16
				if (ch_num < MAX_RC_CHANNELS)
    5d4e:	90 91 d9 07 	lds	r25, 0x07D9
    5d52:	98 30       	cpi	r25, 0x08	; 8
    5d54:	f0 f5       	brcc	.+124    	; 0x5dd2 <__vector_20+0x29c>
			{
				// Extract channel number
				ch_num = (sBuffer[sindex] & chan_mask) >> chan_shift;

				// Reconstruct channel data
				temp16 = ((sBuffer[sindex] & data_mask) << 8) + sBuffer[sindex + 1];
    5d56:	2c 23       	and	r18, r28
    5d58:	30 e0       	ldi	r19, 0x00	; 0
    5d5a:	32 2f       	mov	r19, r18
    5d5c:	22 27       	eor	r18, r18
    5d5e:	28 0f       	add	r18, r24
    5d60:	31 1d       	adc	r19, r1
				// Expand to OpenAero2 units if a valid channel
				// Blank channels have the channel number of 16
				if (ch_num < MAX_RC_CHANNELS)
				{
					// Subtract Spektrum center offset
					if (chan_shift == 0x03) // 11-bit
    5d62:	63 30       	cpi	r22, 0x03	; 3
    5d64:	11 f4       	brne	.+4      	; 0x5d6a <__vector_20+0x234>
					{
						itemp16 = temp16 - 1024;
    5d66:	34 50       	subi	r19, 0x04	; 4
    5d68:	01 c0       	rjmp	.+2      	; 0x5d6c <__vector_20+0x236>
					}
					else
					{
						itemp16 = temp16 - 512;	
    5d6a:	32 50       	subi	r19, 0x02	; 2
					}					

					// Quick multiply by 2.93
					itemp16 = (itemp16 << 1) + (itemp16 >> 1) + (itemp16 >> 2) + (itemp16 >> 3) + (itemp16 >> 4); 
    5d6c:	c9 01       	movw	r24, r18
    5d6e:	88 0f       	add	r24, r24
    5d70:	99 1f       	adc	r25, r25
    5d72:	a9 01       	movw	r20, r18
    5d74:	55 95       	asr	r21
    5d76:	47 95       	ror	r20
    5d78:	84 0f       	add	r24, r20
    5d7a:	95 1f       	adc	r25, r21
    5d7c:	a9 01       	movw	r20, r18
    5d7e:	55 95       	asr	r21
    5d80:	47 95       	ror	r20
    5d82:	55 95       	asr	r21
    5d84:	47 95       	ror	r20
    5d86:	84 0f       	add	r24, r20
    5d88:	95 1f       	adc	r25, r21
    5d8a:	a9 01       	movw	r20, r18
    5d8c:	a3 e0       	ldi	r26, 0x03	; 3
    5d8e:	55 95       	asr	r21
    5d90:	47 95       	ror	r20
    5d92:	aa 95       	dec	r26
    5d94:	e1 f7       	brne	.-8      	; 0x5d8e <__vector_20+0x258>
    5d96:	84 0f       	add	r24, r20
    5d98:	95 1f       	adc	r25, r21
    5d9a:	b4 e0       	ldi	r27, 0x04	; 4
    5d9c:	35 95       	asr	r19
    5d9e:	27 95       	ror	r18
    5da0:	ba 95       	dec	r27
    5da2:	e1 f7       	brne	.-8      	; 0x5d9c <__vector_20+0x266>
    5da4:	82 0f       	add	r24, r18
    5da6:	93 1f       	adc	r25, r19

					if (chan_shift == 0x03) // 11-bit
    5da8:	63 30       	cpi	r22, 0x03	; 3
    5daa:	11 f4       	brne	.+4      	; 0x5db0 <__vector_20+0x27a>
					{
						// Divide in case of 11-bit value
						itemp16 = itemp16 >> 1;								
    5dac:	95 95       	asr	r25
    5dae:	87 95       	ror	r24
					}

					// Add back in OpenAero2 offset
					itemp16 += 3750;										

					RxChannel[Config.ChannelOrder[ch_num]] = itemp16;
    5db0:	a0 91 d9 07 	lds	r26, 0x07D9
    5db4:	b0 e0       	ldi	r27, 0x00	; 0
    5db6:	a7 55       	subi	r26, 0x57	; 87
    5db8:	ba 4f       	sbci	r27, 0xFA	; 250
    5dba:	11 96       	adiw	r26, 0x01	; 1
    5dbc:	ac 91       	ld	r26, X
    5dbe:	b0 e0       	ldi	r27, 0x00	; 0
						// Divide in case of 11-bit value
						itemp16 = itemp16 >> 1;								
					}

					// Add back in OpenAero2 offset
					itemp16 += 3750;										
    5dc0:	8a 55       	subi	r24, 0x5A	; 90
    5dc2:	91 4f       	sbci	r25, 0xF1	; 241

					RxChannel[Config.ChannelOrder[ch_num]] = itemp16;
    5dc4:	aa 0f       	add	r26, r26
    5dc6:	bb 1f       	adc	r27, r27
    5dc8:	ae 54       	subi	r26, 0x4E	; 78
    5dca:	b8 4f       	sbci	r27, 0xF8	; 248
    5dcc:	11 96       	adiw	r26, 0x01	; 1
    5dce:	9c 93       	st	X, r25
    5dd0:	8e 93       	st	-X, r24
    5dd2:	32 96       	adiw	r30, 0x02	; 2
				chan_shift = 0x02;
			}

			// Work out which channel the data is intended for from the channel number data
			// Channels can also be in the second packet. Spektrum has 7 channels per packet.
			for (j = 0; j < 7; j++)
    5dd4:	45 e0       	ldi	r20, 0x05	; 5
    5dd6:	e3 35       	cpi	r30, 0x53	; 83
    5dd8:	f4 07       	cpc	r31, r20
    5dda:	09 f0       	breq	.+2      	; 0x5dde <__vector_20+0x2a8>
    5ddc:	a9 cf       	rjmp	.-174    	; 0x5d30 <__vector_20+0x1fa>
				sindex += 2;

			} // For each pair of bytes
			
			// RC sync established
			Interrupted = true;
    5dde:	81 e0       	ldi	r24, 0x01	; 1
    5de0:	80 93 c2 07 	sts	0x07C2, r24
	//************************************************************
	//* Common exit code
	//************************************************************

	// Increment byte count
	bytecount++;
    5de4:	80 91 c4 07 	lds	r24, 0x07C4
    5de8:	8f 5f       	subi	r24, 0xFF	; 255
    5dea:	80 93 c4 07 	sts	0x07C4, r24
}
    5dee:	ff 91       	pop	r31
    5df0:	ef 91       	pop	r30
    5df2:	cf 91       	pop	r28
    5df4:	bf 91       	pop	r27
    5df6:	af 91       	pop	r26
    5df8:	9f 91       	pop	r25
    5dfa:	8f 91       	pop	r24
    5dfc:	7f 91       	pop	r23
    5dfe:	6f 91       	pop	r22
    5e00:	5f 91       	pop	r21
    5e02:	4f 91       	pop	r20
    5e04:	3f 91       	pop	r19
    5e06:	2f 91       	pop	r18
    5e08:	0f 90       	pop	r0
    5e0a:	0f be       	out	0x3f, r0	; 63
    5e0c:	0f 90       	pop	r0
    5e0e:	1f 90       	pop	r1
    5e10:	18 95       	reti

00005e12 <Disable_RC_Interrupts>:
// Disable RC interrupts as required
//***********************************************************

void Disable_RC_Interrupts(void)
{
	cli();	// Disable interrupts
    5e12:	f8 94       	cli

	// Disable PWM input interrupts
	PCMSK1 = 0;							// Disable AUX
    5e14:	10 92 6c 00 	sts	0x006C, r1
	PCMSK3 = 0;							// Disable THR
    5e18:	10 92 73 00 	sts	0x0073, r1
	EIMSK  = 0;							// Disable INT0, 1 and 2
    5e1c:	1d ba       	out	0x1d, r1	; 29

	// Disable receiver (flushes buffer)
	UCSR0B &= ~(1 << RXEN0);	
    5e1e:	e1 ec       	ldi	r30, 0xC1	; 193
    5e20:	f0 e0       	ldi	r31, 0x00	; 0
    5e22:	80 81       	ld	r24, Z
    5e24:	8f 7e       	andi	r24, 0xEF	; 239
    5e26:	80 83       	st	Z, r24

	// Disable serial interrupt	
	UCSR0B &= ~(1 << RXCIE0);
    5e28:	80 81       	ld	r24, Z
    5e2a:	8f 77       	andi	r24, 0x7F	; 127
    5e2c:	80 83       	st	Z, r24
	
	// Clear interrupt flags
	PCIFR	= 0x0F;						// Clear PCIF0~PCIF3 interrupt flags
    5e2e:	8f e0       	ldi	r24, 0x0F	; 15
    5e30:	8b bb       	out	0x1b, r24	; 27
	EIFR	= 0x00; 					// Clear INT0~INT2 interrupt flags (Elevator, Aileron, Rudder/CPPM)
    5e32:	1c ba       	out	0x1c, r1	; 28
	
	sei(); // Re-enable interrupts
    5e34:	78 94       	sei
    5e36:	08 95       	ret

00005e38 <init_int>:
// Reconfigure RC interrupts
//***********************************************************

void init_int(void)
{
	cli();	// Disable interrupts
    5e38:	f8 94       	cli
	
	switch (Config.RxMode)
    5e3a:	80 91 d2 05 	lds	r24, 0x05D2
    5e3e:	81 30       	cpi	r24, 0x01	; 1
    5e40:	c9 f0       	breq	.+50     	; 0x5e74 <init_int+0x3c>
    5e42:	44 f4       	brge	.+16     	; 0x5e54 <init_int+0x1c>
    5e44:	81 11       	cpse	r24, r1
    5e46:	2c c0       	rjmp	.+88     	; 0x5ea0 <init_int+0x68>
	{
		case CPPM_MODE:
			PCMSK1 = 0;							// Disable AUX
    5e48:	10 92 6c 00 	sts	0x006C, r1
			PCMSK3 = 0;							// Disable THR
    5e4c:	10 92 73 00 	sts	0x0073, r1
			EIMSK = 0x04;						// Enable INT2 (Rudder/CPPM input)
    5e50:	84 e0       	ldi	r24, 0x04	; 4
    5e52:	1b c0       	rjmp	.+54     	; 0x5e8a <init_int+0x52>

void init_int(void)
{
	cli();	// Disable interrupts
	
	switch (Config.RxMode)
    5e54:	84 30       	cpi	r24, 0x04	; 4
    5e56:	24 f5       	brge	.+72     	; 0x5ea0 <init_int+0x68>
			break;

		case SBUS:
		case SPEKTRUM:
			// Disable PWM input interrupts
			PCMSK1 = 0;							// Disable AUX
    5e58:	10 92 6c 00 	sts	0x006C, r1
			PCMSK3 = 0;							// Disable THR
    5e5c:	10 92 73 00 	sts	0x0073, r1
			EIMSK  = 0;							// Disable INT0, 1 and 2 
    5e60:	1d ba       	out	0x1d, r1	; 29
			
			// Enable serial receiver and interrupts
			UCSR0B |= (1 << RXCIE0);			// Enable serial interrupt
    5e62:	80 91 c1 00 	lds	r24, 0x00C1
    5e66:	80 68       	ori	r24, 0x80	; 128
    5e68:	80 93 c1 00 	sts	0x00C1, r24
			UCSR0B |= (1 << RXEN0);				// Enable receiver
    5e6c:	80 91 c1 00 	lds	r24, 0x00C1
    5e70:	80 61       	ori	r24, 0x10	; 16
    5e72:	14 c0       	rjmp	.+40     	; 0x5e9c <init_int+0x64>
			UCSR0B &= ~(1 << RXCIE0);			// Disable serial interrupt
			UCSR0B &= ~(1 << RXEN0);			// Disable receiver and flush buffer
			break;

		case PWM:
			PCMSK1 |= (1 << PCINT8);			// PB0 (Aux pin change mask)
    5e74:	80 91 6c 00 	lds	r24, 0x006C
    5e78:	81 60       	ori	r24, 0x01	; 1
    5e7a:	80 93 6c 00 	sts	0x006C, r24
			PCMSK3 |= (1 << PCINT24);			// PD0 (Throttle pin change mask)
    5e7e:	80 91 73 00 	lds	r24, 0x0073
    5e82:	81 60       	ori	r24, 0x01	; 1
    5e84:	80 93 73 00 	sts	0x0073, r24
			EIMSK  = 0x07;						// Enable INT0, 1 and 2 
    5e88:	87 e0       	ldi	r24, 0x07	; 7
    5e8a:	8d bb       	out	0x1d, r24	; 29
			UCSR0B &= ~(1 << RXCIE0);			// Disable serial interrupt
    5e8c:	80 91 c1 00 	lds	r24, 0x00C1
    5e90:	8f 77       	andi	r24, 0x7F	; 127
    5e92:	80 93 c1 00 	sts	0x00C1, r24
			UCSR0B &= ~(1 << RXEN0);			// Disable receiver and flush buffer
    5e96:	80 91 c1 00 	lds	r24, 0x00C1
    5e9a:	8f 7e       	andi	r24, 0xEF	; 239
			PCMSK3 = 0;							// Disable THR
			EIMSK  = 0;							// Disable INT0, 1 and 2 
			
			// Enable serial receiver and interrupts
			UCSR0B |= (1 << RXCIE0);			// Enable serial interrupt
			UCSR0B |= (1 << RXEN0);				// Enable receiver
    5e9c:	80 93 c1 00 	sts	0x00C1, r24
		default:
			break;	
	}	

	// Clear interrupt flags
	PCIFR	= 0x0F;								// Clear PCIF0~PCIF3 interrupt flags
    5ea0:	8f e0       	ldi	r24, 0x0F	; 15
    5ea2:	8b bb       	out	0x1b, r24	; 27
	EIFR	= 0x00; 							// Clear INT0~INT2 interrupt flags (Elevator, Aileron, Rudder/CPPM)
    5ea4:	1c ba       	out	0x1c, r1	; 28

	sei(); // Re-enable interrupts
    5ea6:	78 94       	sei
    5ea8:	08 95       	ret

00005eaa <print_menu_frame>:
// style = menu style (0 = main, 1 = sub)
//************************************************************
void print_menu_frame(uint8_t style)
{
	// Print bottom markers
	if (style == 0)
    5eaa:	81 11       	cpse	r24, r1
    5eac:	27 c0       	rjmp	.+78     	; 0x5efc <print_menu_frame+0x52>
	{
		LCD_Display_Text(12, (const unsigned char*)Wingdings, 0, 57); 	// Left
    5eae:	29 e3       	ldi	r18, 0x39	; 57
    5eb0:	30 e0       	ldi	r19, 0x00	; 0
    5eb2:	40 e0       	ldi	r20, 0x00	; 0
    5eb4:	50 e0       	ldi	r21, 0x00	; 0
    5eb6:	67 e0       	ldi	r22, 0x07	; 7
    5eb8:	71 e0       	ldi	r23, 0x01	; 1
    5eba:	8c e0       	ldi	r24, 0x0C	; 12
    5ebc:	90 e0       	ldi	r25, 0x00	; 0
    5ebe:	0e 94 0a 23 	call	0x4614	; 0x4614 <LCD_Display_Text>
		LCD_Display_Text(10, (const unsigned char*)Wingdings, 38, 59); 	// Up
    5ec2:	2b e3       	ldi	r18, 0x3B	; 59
    5ec4:	30 e0       	ldi	r19, 0x00	; 0
    5ec6:	46 e2       	ldi	r20, 0x26	; 38
    5ec8:	50 e0       	ldi	r21, 0x00	; 0
    5eca:	67 e0       	ldi	r22, 0x07	; 7
    5ecc:	71 e0       	ldi	r23, 0x01	; 1
    5ece:	8a e0       	ldi	r24, 0x0A	; 10
    5ed0:	90 e0       	ldi	r25, 0x00	; 0
    5ed2:	0e 94 0a 23 	call	0x4614	; 0x4614 <LCD_Display_Text>
		LCD_Display_Text(9, (const unsigned char*)Wingdings, 80, 59); 	// Down
    5ed6:	2b e3       	ldi	r18, 0x3B	; 59
    5ed8:	30 e0       	ldi	r19, 0x00	; 0
    5eda:	40 e5       	ldi	r20, 0x50	; 80
    5edc:	50 e0       	ldi	r21, 0x00	; 0
    5ede:	67 e0       	ldi	r22, 0x07	; 7
    5ee0:	71 e0       	ldi	r23, 0x01	; 1
    5ee2:	89 e0       	ldi	r24, 0x09	; 9
    5ee4:	90 e0       	ldi	r25, 0x00	; 0
    5ee6:	0e 94 0a 23 	call	0x4614	; 0x4614 <LCD_Display_Text>
		LCD_Display_Text(11, (const unsigned char*)Wingdings, 120, 57); // Right
    5eea:	29 e3       	ldi	r18, 0x39	; 57
    5eec:	30 e0       	ldi	r19, 0x00	; 0
    5eee:	48 e7       	ldi	r20, 0x78	; 120
    5ef0:	50 e0       	ldi	r21, 0x00	; 0
    5ef2:	67 e0       	ldi	r22, 0x07	; 7
    5ef4:	71 e0       	ldi	r23, 0x01	; 1
    5ef6:	8b e0       	ldi	r24, 0x0B	; 11
    5ef8:	90 e0       	ldi	r25, 0x00	; 0
    5efa:	26 c0       	rjmp	.+76     	; 0x5f48 <print_menu_frame+0x9e>
	}
	else
	{
		LCD_Display_Text(16, (const unsigned char*)Verdana8, 0, 54); 	// Clear
    5efc:	26 e3       	ldi	r18, 0x36	; 54
    5efe:	30 e0       	ldi	r19, 0x00	; 0
    5f00:	40 e0       	ldi	r20, 0x00	; 0
    5f02:	50 e0       	ldi	r21, 0x00	; 0
    5f04:	6f e1       	ldi	r22, 0x1F	; 31
    5f06:	7a e0       	ldi	r23, 0x0A	; 10
    5f08:	80 e1       	ldi	r24, 0x10	; 16
    5f0a:	90 e0       	ldi	r25, 0x00	; 0
    5f0c:	0e 94 0a 23 	call	0x4614	; 0x4614 <LCD_Display_Text>
		LCD_Display_Text(10, (const unsigned char*)Wingdings, 38, 59);	// Up
    5f10:	2b e3       	ldi	r18, 0x3B	; 59
    5f12:	30 e0       	ldi	r19, 0x00	; 0
    5f14:	46 e2       	ldi	r20, 0x26	; 38
    5f16:	50 e0       	ldi	r21, 0x00	; 0
    5f18:	67 e0       	ldi	r22, 0x07	; 7
    5f1a:	71 e0       	ldi	r23, 0x01	; 1
    5f1c:	8a e0       	ldi	r24, 0x0A	; 10
    5f1e:	90 e0       	ldi	r25, 0x00	; 0
    5f20:	0e 94 0a 23 	call	0x4614	; 0x4614 <LCD_Display_Text>
		LCD_Display_Text(9, (const unsigned char*)Wingdings, 80, 59);	// Down
    5f24:	2b e3       	ldi	r18, 0x3B	; 59
    5f26:	30 e0       	ldi	r19, 0x00	; 0
    5f28:	40 e5       	ldi	r20, 0x50	; 80
    5f2a:	50 e0       	ldi	r21, 0x00	; 0
    5f2c:	67 e0       	ldi	r22, 0x07	; 7
    5f2e:	71 e0       	ldi	r23, 0x01	; 1
    5f30:	89 e0       	ldi	r24, 0x09	; 9
    5f32:	90 e0       	ldi	r25, 0x00	; 0
    5f34:	0e 94 0a 23 	call	0x4614	; 0x4614 <LCD_Display_Text>
		LCD_Display_Text(17, (const unsigned char*)Verdana8, 103, 54);	// Save
    5f38:	26 e3       	ldi	r18, 0x36	; 54
    5f3a:	30 e0       	ldi	r19, 0x00	; 0
    5f3c:	47 e6       	ldi	r20, 0x67	; 103
    5f3e:	50 e0       	ldi	r21, 0x00	; 0
    5f40:	6f e1       	ldi	r22, 0x1F	; 31
    5f42:	7a e0       	ldi	r23, 0x0A	; 10
    5f44:	81 e1       	ldi	r24, 0x11	; 17
    5f46:	90 e0       	ldi	r25, 0x00	; 0
    5f48:	0e 94 0a 23 	call	0x4614	; 0x4614 <LCD_Display_Text>
	}

	// Write from buffer
	write_buffer(buffer);
    5f4c:	80 e0       	ldi	r24, 0x00	; 0
    5f4e:	91 e0       	ldi	r25, 0x01	; 1
    5f50:	0c 94 2b 21 	jmp	0x4256	; 0x4256 <write_buffer>

00005f54 <get_menu_range>:
//************************************************************
// get_menu_range - Get range info from PROGMEM for a specific item
//************************************************************

menu_range_t get_menu_range(const unsigned char* menu_ranges, uint8_t menuitem)
{
    5f54:	cf 93       	push	r28
    5f56:	df 93       	push	r29
    5f58:	cd b7       	in	r28, 0x3d	; 61
    5f5a:	de b7       	in	r29, 0x3e	; 62
    5f5c:	2a 97       	sbiw	r28, 0x0a	; 10
    5f5e:	0f b6       	in	r0, 0x3f	; 63
    5f60:	f8 94       	cli
    5f62:	de bf       	out	0x3e, r29	; 62
    5f64:	0f be       	out	0x3f, r0	; 63
    5f66:	cd bf       	out	0x3d, r28	; 61
	menu_range_t	range;
	memcpy_P(&range, &menu_ranges[menuitem * sizeof(range)], sizeof(range));
    5f68:	25 e0       	ldi	r18, 0x05	; 5
    5f6a:	62 9f       	mul	r22, r18
    5f6c:	80 0d       	add	r24, r0
    5f6e:	91 1d       	adc	r25, r1
    5f70:	11 24       	eor	r1, r1
    5f72:	bc 01       	movw	r22, r24
    5f74:	45 e0       	ldi	r20, 0x05	; 5
    5f76:	50 e0       	ldi	r21, 0x00	; 0
    5f78:	ce 01       	movw	r24, r28
    5f7a:	06 96       	adiw	r24, 0x06	; 6
    5f7c:	0e 94 eb 49 	call	0x93d6	; 0x93d6 <memcpy_P>
	return (range);
    5f80:	85 e0       	ldi	r24, 0x05	; 5
    5f82:	fe 01       	movw	r30, r28
    5f84:	36 96       	adiw	r30, 0x06	; 6
    5f86:	de 01       	movw	r26, r28
    5f88:	11 96       	adiw	r26, 0x01	; 1
    5f8a:	01 90       	ld	r0, Z+
    5f8c:	0d 92       	st	X+, r0
    5f8e:	8a 95       	dec	r24
    5f90:	e1 f7       	brne	.-8      	; 0x5f8a <get_menu_range+0x36>
    5f92:	29 81       	ldd	r18, Y+1	; 0x01
    5f94:	3a 81       	ldd	r19, Y+2	; 0x02
    5f96:	4b 81       	ldd	r20, Y+3	; 0x03
    5f98:	5c 81       	ldd	r21, Y+4	; 0x04
    5f9a:	6d 81       	ldd	r22, Y+5	; 0x05
}
    5f9c:	70 e0       	ldi	r23, 0x00	; 0
    5f9e:	80 e0       	ldi	r24, 0x00	; 0
    5fa0:	90 e0       	ldi	r25, 0x00	; 0
    5fa2:	2a 96       	adiw	r28, 0x0a	; 10
    5fa4:	0f b6       	in	r0, 0x3f	; 63
    5fa6:	f8 94       	cli
    5fa8:	de bf       	out	0x3e, r29	; 62
    5faa:	0f be       	out	0x3f, r0	; 63
    5fac:	cd bf       	out	0x3d, r28	; 61
    5fae:	df 91       	pop	r29
    5fb0:	cf 91       	pop	r28
    5fb2:	08 95       	ret

00005fb4 <print_menu_text>:
// x = horizontal location on screen
// y = vertical location on screen
//************************************************************

void print_menu_text(int16_t values, uint8_t style, uint16_t text_link, uint8_t x, uint8_t y)
{
    5fb4:	0f 93       	push	r16
    5fb6:	1f 93       	push	r17
    5fb8:	cf 93       	push	r28
    5fba:	df 93       	push	r29
    5fbc:	fa 01       	movw	r30, r20
    5fbe:	10 e0       	ldi	r17, 0x00	; 0
    5fc0:	c2 2f       	mov	r28, r18
    5fc2:	d0 e0       	ldi	r29, 0x00	; 0
	if ((style == 0) || (style == 2) || (style == 3)) // Numeral
    5fc4:	66 23       	and	r22, r22
    5fc6:	19 f0       	breq	.+6      	; 0x5fce <print_menu_text+0x1a>
    5fc8:	62 50       	subi	r22, 0x02	; 2
    5fca:	62 30       	cpi	r22, 0x02	; 2
    5fcc:	78 f4       	brcc	.+30     	; 0x5fec <print_menu_text+0x38>
    5fce:	4a e0       	ldi	r20, 0x0A	; 10
    5fd0:	6b e5       	ldi	r22, 0x5B	; 91
    5fd2:	75 e0       	ldi	r23, 0x05	; 5
    5fd4:	0e 94 06 4a 	call	0x940c	; 0x940c <__itoa_ncheck>
	{
		mugui_lcd_puts(itoa(values,pBuffer,10),(const unsigned char*)Verdana8,x,y);
    5fd8:	98 01       	movw	r18, r16
    5fda:	ae 01       	movw	r20, r28
    5fdc:	6f e1       	ldi	r22, 0x1F	; 31
    5fde:	7a e0       	ldi	r23, 0x0A	; 10
	}
	else
	{
		LCD_Display_Text(text_link, (const unsigned char*)Verdana8,x,y);
	}
}
    5fe0:	df 91       	pop	r29
    5fe2:	cf 91       	pop	r28
    5fe4:	1f 91       	pop	r17
    5fe6:	0f 91       	pop	r16

void print_menu_text(int16_t values, uint8_t style, uint16_t text_link, uint8_t x, uint8_t y)
{
	if ((style == 0) || (style == 2) || (style == 3)) // Numeral
	{
		mugui_lcd_puts(itoa(values,pBuffer,10),(const unsigned char*)Verdana8,x,y);
    5fe8:	0c 94 95 3f 	jmp	0x7f2a	; 0x7f2a <mugui_lcd_puts>
	}
	else
	{
		LCD_Display_Text(text_link, (const unsigned char*)Verdana8,x,y);
    5fec:	98 01       	movw	r18, r16
    5fee:	ae 01       	movw	r20, r28
    5ff0:	6f e1       	ldi	r22, 0x1F	; 31
    5ff2:	7a e0       	ldi	r23, 0x0A	; 10
    5ff4:	cf 01       	movw	r24, r30
	}
}
    5ff6:	df 91       	pop	r29
    5ff8:	cf 91       	pop	r28
    5ffa:	1f 91       	pop	r17
    5ffc:	0f 91       	pop	r16
	{
		mugui_lcd_puts(itoa(values,pBuffer,10),(const unsigned char*)Verdana8,x,y);
	}
	else
	{
		LCD_Display_Text(text_link, (const unsigned char*)Verdana8,x,y);
    5ffe:	0c 94 0a 23 	jmp	0x4614	; 0x4614 <LCD_Display_Text>

00006002 <poll_buttons>:
// Poll buttons, wait until something pressed, debounce and 
// return button info.
//************************************************************

uint8_t poll_buttons(bool acceleration)
{
    6002:	68 2f       	mov	r22, r24
	static uint8_t button_count = 0;
	uint8_t buttons = 0;

	button = (PINB & 0xf0); // button is global, buttons is local
    6004:	93 b1       	in	r25, 0x03	; 3
    6006:	90 7f       	andi	r25, 0xF0	; 240
    6008:	90 93 e2 07 	sts	0x07E2, r25
//************************************************************

uint8_t poll_buttons(bool acceleration)
{
	static uint8_t button_count = 0;
	uint8_t buttons = 0;
    600c:	80 e0       	ldi	r24, 0x00	; 0
			button = buttons;
		}

		// Reset button acceleration
		button_count = 0;
		button_multiplier = 1;
    600e:	71 e0       	ldi	r23, 0x01	; 1
	static uint8_t button_count = 0;
	uint8_t buttons = 0;

	button = (PINB & 0xf0); // button is global, buttons is local

	while (button == NONE)					
    6010:	90 91 e2 07 	lds	r25, 0x07E2
    6014:	90 3f       	cpi	r25, 0xF0	; 240
    6016:	c9 f4       	brne	.+50     	; 0x604a <poll_buttons+0x48>
	{
		buttons = (PINB & 0xf0);	
    6018:	83 b1       	in	r24, 0x03	; 3
    601a:	80 7f       	andi	r24, 0xF0	; 240
    601c:	e7 ea       	ldi	r30, 0xA7	; 167
    601e:	f1 e6       	ldi	r31, 0x61	; 97
    6020:	31 97       	sbiw	r30, 0x01	; 1
    6022:	f1 f7       	brne	.-4      	; 0x6020 <poll_buttons+0x1e>
    6024:	00 c0       	rjmp	.+0      	; 0x6026 <poll_buttons+0x24>
    6026:	00 00       	nop
		_delay_ms(5);

		if (buttons != (PINB & 0xf0))
    6028:	23 b1       	in	r18, 0x03	; 3
    602a:	48 2f       	mov	r20, r24
    602c:	50 e0       	ldi	r21, 0x00	; 0
    602e:	20 7f       	andi	r18, 0xF0	; 240
    6030:	30 e0       	ldi	r19, 0x00	; 0
    6032:	42 17       	cp	r20, r18
    6034:	53 07       	cpc	r21, r19
    6036:	19 f4       	brne	.+6      	; 0x603e <poll_buttons+0x3c>
		{
			buttons = 0; // Buttons different
		}
		else // Buttons the same - update global
		{
			button = buttons;
    6038:	80 93 e2 07 	sts	0x07E2, r24
    603c:	01 c0       	rjmp	.+2      	; 0x6040 <poll_buttons+0x3e>
		buttons = (PINB & 0xf0);	
		_delay_ms(5);

		if (buttons != (PINB & 0xf0))
		{
			buttons = 0; // Buttons different
    603e:	80 e0       	ldi	r24, 0x00	; 0
		{
			button = buttons;
		}

		// Reset button acceleration
		button_count = 0;
    6040:	10 92 2e 05 	sts	0x052E, r1
		button_multiplier = 1;
    6044:	70 93 e3 07 	sts	0x07E3, r23
    6048:	e3 cf       	rjmp	.-58     	; 0x6010 <poll_buttons+0xe>
	}

	// Check for buttons being held down if requested
	if ((button != NONE) && (acceleration))
    604a:	66 23       	and	r22, r22
    604c:	71 f0       	breq	.+28     	; 0x606a <poll_buttons+0x68>
	{
		// Count the number of times incremented
		button_count++; 
    604e:	90 91 2e 05 	lds	r25, 0x052E
    6052:	9f 5f       	subi	r25, 0xFF	; 255
    6054:	90 93 2e 05 	sts	0x052E, r25
		if (button_count >= 10)
    6058:	9a 30       	cpi	r25, 0x0A	; 10
    605a:	38 f0       	brcs	.+14     	; 0x606a <poll_buttons+0x68>
		{
			button_count = 0;
    605c:	10 92 2e 05 	sts	0x052E, r1
			button_multiplier ++;
    6060:	90 91 e3 07 	lds	r25, 0x07E3
    6064:	9f 5f       	subi	r25, 0xFF	; 255
    6066:	90 93 e3 07 	sts	0x07E3, r25
		}
	}

	return buttons;
}
    606a:	08 95       	ret

0000606c <do_menu_item>:
// servo_enable = Enable real-time updating of servo position
// servo_number = Servo number to update
//************************************************************

void do_menu_item(uint16_t menuitem, int8_t *values, uint8_t mult, menu_range_t range, int8_t offset, uint16_t text_link, bool servo_enable, int16_t servo_number)
{
    606c:	2f 92       	push	r2
    606e:	3f 92       	push	r3
    6070:	4f 92       	push	r4
    6072:	5f 92       	push	r5
    6074:	6f 92       	push	r6
    6076:	7f 92       	push	r7
    6078:	8f 92       	push	r8
    607a:	9f 92       	push	r9
    607c:	af 92       	push	r10
    607e:	bf 92       	push	r11
    6080:	cf 92       	push	r12
    6082:	df 92       	push	r13
    6084:	ef 92       	push	r14
    6086:	ff 92       	push	r15
    6088:	0f 93       	push	r16
    608a:	1f 93       	push	r17
    608c:	cf 93       	push	r28
    608e:	df 93       	push	r29
    6090:	cd b7       	in	r28, 0x3d	; 61
    6092:	de b7       	in	r29, 0x3e	; 62
    6094:	69 97       	sbiw	r28, 0x19	; 25
    6096:	0f b6       	in	r0, 0x3f	; 63
    6098:	f8 94       	cli
    609a:	de bf       	out	0x3e, r29	; 62
    609c:	0f be       	out	0x3f, r0	; 63
    609e:	cd bf       	out	0x3d, r28	; 61
    60a0:	3c 01       	movw	r6, r24
    60a2:	79 8b       	std	Y+17, r23	; 0x11
    60a4:	68 8b       	std	Y+16, r22	; 0x10
    60a6:	4a 87       	std	Y+10, r20	; 0x0a
    60a8:	ed 82       	std	Y+5, r14	; 0x05
    60aa:	fe 82       	std	Y+6, r15	; 0x06
    60ac:	0f 83       	std	Y+7, r16	; 0x07
    60ae:	41 2e       	mov	r4, r17
    60b0:	18 87       	std	Y+8, r17	; 0x08
    60b2:	29 87       	std	Y+9, r18	; 0x09
    60b4:	bd 8a       	std	Y+21, r11	; 0x15
    60b6:	ac 8a       	std	Y+20, r10	; 0x14
    60b8:	4e 2d       	mov	r20, r14
    60ba:	3f 2d       	mov	r19, r15
    60bc:	0d 87       	std	Y+13, r16	; 0x0d
	mugui_size16_t size;
	int16_t temp16;
	int16_t value = (int8_t)*values;
    60be:	fb 01       	movw	r30, r22
    60c0:	20 81       	ld	r18, Z
    60c2:	a2 2e       	mov	r10, r18
    60c4:	bb 24       	eor	r11, r11
    60c6:	a7 fc       	sbrc	r10, 7
    60c8:	b0 94       	com	r11
	uint8_t button_inc = 0;
	bool	button_lock = false;
	bool	first_time = true;

	// Multiply value for display only if style is 2
	if (range.style == 2)
    60ca:	f2 e0       	ldi	r31, 0x02	; 2
    60cc:	1f 13       	cpse	r17, r31
    60ce:	05 c0       	rjmp	.+10     	; 0x60da <do_menu_item+0x6e>
	{
		value = value * mult;
    60d0:	5a 85       	ldd	r21, Y+10	; 0x0a
    60d2:	25 03       	mulsu	r18, r21
    60d4:	50 01       	movw	r10, r0
    60d6:	11 24       	eor	r1, r1
    60d8:	02 c0       	rjmp	.+4      	; 0x60de <do_menu_item+0x72>
	}
	else mult = 1;
    60da:	81 e0       	ldi	r24, 0x01	; 1
    60dc:	8a 87       	std	Y+10, r24	; 0x0a

	button = NONE;
    60de:	20 ef       	ldi	r18, 0xF0	; 240
    60e0:	20 93 e2 07 	sts	0x07E2, r18
		{
			value = (range.default_value * mult);
		}

		// Limit values to set ranges
		if (value < (range.lower * mult)) 
    60e4:	fa 85       	ldd	r31, Y+10	; 0x0a
    60e6:	ef 2f       	mov	r30, r31
    60e8:	f0 e0       	ldi	r31, 0x00	; 0
    60ea:	fb 8b       	std	Y+19, r31	; 0x13
    60ec:	ea 8b       	std	Y+18, r30	; 0x12
    60ee:	2a 85       	ldd	r18, Y+10	; 0x0a
    60f0:	42 03       	mulsu	r20, r18
    60f2:	10 01       	movw	r2, r0
    60f4:	11 24       	eor	r1, r1
		{
			value = range.lower * mult;
		}
		
		if (value > (range.upper * mult)) 
    60f6:	32 03       	mulsu	r19, r18
    60f8:	a0 01       	movw	r20, r0
    60fa:	11 24       	eor	r1, r1
    60fc:	5f 87       	std	Y+15, r21	; 0x0f
    60fe:	4e 87       	std	Y+14, r20	; 0x0e
	uint8_t display_update = 0;
	uint8_t servo_update = 0;
	uint8_t button_update = 0;
	uint8_t button_inc = 0;
	bool	button_lock = false;
	bool	first_time = true;
    6100:	91 e0       	ldi	r25, 0x01	; 1
	int16_t value = (int8_t)*values;
	uint8_t display_update = 0;
	uint8_t servo_update = 0;
	uint8_t button_update = 0;
	uint8_t button_inc = 0;
	bool	button_lock = false;
    6102:	91 2c       	mov	r9, r1
	mugui_size16_t size;
	int16_t temp16;
	int16_t value = (int8_t)*values;
	uint8_t display_update = 0;
	uint8_t servo_update = 0;
	uint8_t button_update = 0;
    6104:	51 2c       	mov	r5, r1
void do_menu_item(uint16_t menuitem, int8_t *values, uint8_t mult, menu_range_t range, int8_t offset, uint16_t text_link, bool servo_enable, int16_t servo_number)
{
	mugui_size16_t size;
	int16_t temp16;
	int16_t value = (int8_t)*values;
	uint8_t display_update = 0;
    6106:	f1 2c       	mov	r15, r1
			first_time = false;

			clear_buffer(buffer);

			// Print title
			gLCDprint_Menu_P((char*)pgm_read_word(&text_menu[menuitem]), (const unsigned char*)Verdana14, 0, 0);
    6108:	83 01       	movw	r16, r6
    610a:	00 0f       	add	r16, r16
    610c:	11 1f       	adc	r17, r17
    610e:	0a 5f       	subi	r16, 0xFA	; 250
    6110:	11 4f       	sbci	r17, 0xF1	; 241
			// Print value
			if ((range.style == 0) || (range.style == 2) || (range.style == 3)) // numeric, numeric * 4, servo limits
			{
				// Write numeric value, centered on screen
				mugui_text_sizestring(itoa(value,pBuffer,10), (const unsigned char*)Verdana14, &size);
				mugui_lcd_puts(itoa(value,pBuffer,10),(const unsigned char*)Verdana14,((128-size.x)/2)+offset,25);
    6112:	ec 2d       	mov	r30, r12
    6114:	ff 27       	eor	r31, r31
    6116:	e7 fd       	sbrc	r30, 7
    6118:	f0 95       	com	r31
    611a:	ff 8b       	std	Y+23, r31	; 0x17
    611c:	ee 8b       	std	Y+22, r30	; 0x16
    611e:	f0 e8       	ldi	r31, 0x80	; 128
    6120:	cf 2e       	mov	r12, r31
    6122:	d1 2c       	mov	r13, r1

			// Print title
			gLCDprint_Menu_P((char*)pgm_read_word(&text_menu[menuitem]), (const unsigned char*)Verdana14, 0, 0);

			// Print value
			if ((range.style == 0) || (range.style == 2) || (range.style == 3)) // numeric, numeric * 4, servo limits
    6124:	fe ef       	ldi	r31, 0xFE	; 254
    6126:	f4 0d       	add	r31, r4
    6128:	f8 8f       	std	Y+24, r31	; 0x18
		else if (range.style == 3)
		{
			// Loop rate = 20ms (50Hz)
			_delay_ms(20);
		}
		else if ((range.style == 0) || (range.style == 2))
    612a:	24 2d       	mov	r18, r4
    612c:	2d 7f       	andi	r18, 0xFD	; 253
    612e:	29 8f       	std	Y+25, r18	; 0x19

		// Set servo position if required
		// Ignore if the output is marked as a motor
		if	(
			(servo_enable) &&
			(Config.Channel[servo_number].Motor_marker != MOTOR)
    6130:	86 e2       	ldi	r24, 0x26	; 38
    6132:	ee a5       	ldd	r30, Y+46	; 0x2e
    6134:	ff a5       	ldd	r31, Y+47	; 0x2f
    6136:	8e 9f       	mul	r24, r30
    6138:	a0 01       	movw	r20, r0
    613a:	8f 9f       	mul	r24, r31
    613c:	50 0d       	add	r21, r0
    613e:	11 24       	eor	r1, r1
    6140:	41 5c       	subi	r20, 0xC1	; 193
    6142:	59 4f       	sbci	r21, 0xF9	; 249
    6144:	5c 87       	std	Y+12, r21	; 0x0c
    6146:	4b 87       	std	Y+11, r20	; 0x0b
	button = NONE;

	// This is a loop that cycles until Button 4 is pressed (Save)
	// The GLCD updating slows servo updates down too much so only update the GLCD periodically
	// When not updating the GLCD the servo should be updated at 50Hz (20ms)
	while (button != ENTER)
    6148:	80 91 e2 07 	lds	r24, 0x07E2
    614c:	80 3e       	cpi	r24, 0xE0	; 224
    614e:	09 f4       	brne	.+2      	; 0x6152 <do_menu_item+0xe6>
    6150:	01 c1       	rjmp	.+514    	; 0x6354 <do_menu_item+0x2e8>
		// Increment loopcount so that we can time various things
		display_update++;
		servo_update++;

		// Vary the button increment delay depending on the function
		if (servo_enable)
    6152:	88 20       	and	r8, r8
    6154:	11 f0       	breq	.+4      	; 0x615a <do_menu_item+0xee>
		{
			button_inc = 5; // For servos
    6156:	25 e0       	ldi	r18, 0x05	; 5
    6158:	01 c0       	rjmp	.+2      	; 0x615c <do_menu_item+0xf0>
		}
		else
		{
			button_inc = 1;	// For everything else (numbers)
    615a:	21 e0       	ldi	r18, 0x01	; 1
		}

		// Increment button timer when pressed
		if (button != NONE)
    615c:	80 3f       	cpi	r24, 0xF0	; 240
    615e:	19 f0       	breq	.+6      	; 0x6166 <do_menu_item+0xfa>
		{
			button_update++;
    6160:	53 94       	inc	r5

			// Release button lock after button_inc loops
			if (button_update > button_inc)
    6162:	25 15       	cp	r18, r5
    6164:	10 f4       	brcc	.+4      	; 0x616a <do_menu_item+0xfe>
		}
		// Remove lock when not pressed
		else 
		{
			button_update = 0;
			button_lock = false;
    6166:	91 2c       	mov	r9, r1
			} 
		}
		// Remove lock when not pressed
		else 
		{
			button_update = 0;
    6168:	51 2c       	mov	r5, r1
			button_lock = false;
		}

		// Display update
		if 	(!servo_enable || 									// Non-servo value or
    616a:	88 20       	and	r8, r8
    616c:	49 f0       	breq	.+18     	; 0x6180 <do_menu_item+0x114>
	// The GLCD updating slows servo updates down too much so only update the GLCD periodically
	// When not updating the GLCD the servo should be updated at 50Hz (20ms)
	while (button != ENTER)
	{
		// Increment loopcount so that we can time various things
		display_update++;
    616e:	f3 94       	inc	r15
			button_update = 0;
			button_lock = false;
		}

		// Display update
		if 	(!servo_enable || 									// Non-servo value or
    6170:	f7 e0       	ldi	r31, 0x07	; 7
    6172:	ff 15       	cp	r31, r15
    6174:	10 f4       	brcc	.+4      	; 0x617a <do_menu_item+0x10e>
			((display_update >= 8) && (button != NONE)) || 		// Servo value and 8 cycles passed but only with a button pressed or...
    6176:	80 3f       	cpi	r24, 0xF0	; 240
    6178:	19 f4       	brne	.+6      	; 0x6180 <do_menu_item+0x114>
    617a:	99 23       	and	r25, r25
    617c:	09 f4       	brne	.+2      	; 0x6180 <do_menu_item+0x114>
    617e:	66 c0       	rjmp	.+204    	; 0x624c <do_menu_item+0x1e0>
			 (first_time))										// First time into routine
		{
			display_update = 0;
			first_time = false;

			clear_buffer(buffer);
    6180:	80 e0       	ldi	r24, 0x00	; 0
    6182:	91 e0       	ldi	r25, 0x01	; 1
    6184:	0e 94 5d 21 	call	0x42ba	; 0x42ba <clear_buffer>

			// Print title
			gLCDprint_Menu_P((char*)pgm_read_word(&text_menu[menuitem]), (const unsigned char*)Verdana14, 0, 0);
    6188:	f8 01       	movw	r30, r16
    618a:	85 91       	lpm	r24, Z+
    618c:	94 91       	lpm	r25, Z
    618e:	20 e0       	ldi	r18, 0x00	; 0
    6190:	30 e0       	ldi	r19, 0x00	; 0
    6192:	40 e0       	ldi	r20, 0x00	; 0
    6194:	50 e0       	ldi	r21, 0x00	; 0
    6196:	61 e7       	ldi	r22, 0x71	; 113
    6198:	71 e0       	ldi	r23, 0x01	; 1
    619a:	0e 94 13 23 	call	0x4626	; 0x4626 <gLCDprint_Menu_P>

			// Print value
			if ((range.style == 0) || (range.style == 2) || (range.style == 3)) // numeric, numeric * 4, servo limits
    619e:	44 20       	and	r4, r4
    61a0:	19 f0       	breq	.+6      	; 0x61a8 <do_menu_item+0x13c>
    61a2:	28 8d       	ldd	r18, Y+24	; 0x18
    61a4:	22 30       	cpi	r18, 0x02	; 2
    61a6:	30 f5       	brcc	.+76     	; 0x61f4 <do_menu_item+0x188>
    61a8:	4a e0       	ldi	r20, 0x0A	; 10
    61aa:	6b e5       	ldi	r22, 0x5B	; 91
    61ac:	75 e0       	ldi	r23, 0x05	; 5
    61ae:	c5 01       	movw	r24, r10
    61b0:	0e 94 06 4a 	call	0x940c	; 0x940c <__itoa_ncheck>
			{
				// Write numeric value, centered on screen
				mugui_text_sizestring(itoa(value,pBuffer,10), (const unsigned char*)Verdana14, &size);
    61b4:	ae 01       	movw	r20, r28
    61b6:	4f 5f       	subi	r20, 0xFF	; 255
    61b8:	5f 4f       	sbci	r21, 0xFF	; 255
    61ba:	61 e7       	ldi	r22, 0x71	; 113
    61bc:	71 e0       	ldi	r23, 0x01	; 1
    61be:	0e 94 46 3e 	call	0x7c8c	; 0x7c8c <mugui_text_sizestring>
				mugui_lcd_puts(itoa(value,pBuffer,10),(const unsigned char*)Verdana14,((128-size.x)/2)+offset,25);
    61c2:	89 81       	ldd	r24, Y+1	; 0x01
    61c4:	9a 81       	ldd	r25, Y+2	; 0x02
    61c6:	76 01       	movw	r14, r12
    61c8:	e8 1a       	sub	r14, r24
    61ca:	f9 0a       	sbc	r15, r25
    61cc:	f6 94       	lsr	r15
    61ce:	e7 94       	ror	r14
    61d0:	4e 89       	ldd	r20, Y+22	; 0x16
    61d2:	5f 89       	ldd	r21, Y+23	; 0x17
    61d4:	e4 0e       	add	r14, r20
    61d6:	f5 1e       	adc	r15, r21
    61d8:	4a e0       	ldi	r20, 0x0A	; 10
    61da:	6b e5       	ldi	r22, 0x5B	; 91
    61dc:	75 e0       	ldi	r23, 0x05	; 5
    61de:	c5 01       	movw	r24, r10
    61e0:	0e 94 06 4a 	call	0x940c	; 0x940c <__itoa_ncheck>
    61e4:	29 e1       	ldi	r18, 0x19	; 25
    61e6:	30 e0       	ldi	r19, 0x00	; 0
    61e8:	a7 01       	movw	r20, r14
    61ea:	61 e7       	ldi	r22, 0x71	; 113
    61ec:	71 e0       	ldi	r23, 0x01	; 1
    61ee:	0e 94 95 3f 	call	0x7f2a	; 0x7f2a <mugui_lcd_puts>
    61f2:	24 c0       	rjmp	.+72     	; 0x623c <do_menu_item+0x1d0>
			}
			else // text
			{
				// Write text, centered on screen
				// NB: pBuffer obviously has to be larger than the longest text string printed... duh...
				pgm_mugui_scopy((char*)pgm_read_word(&text_menu[text_link + value])); // Copy string to pBuffer
    61f4:	ec 88       	ldd	r14, Y+20	; 0x14
    61f6:	fd 88       	ldd	r15, Y+21	; 0x15
    61f8:	ea 0c       	add	r14, r10
    61fa:	fb 1c       	adc	r15, r11
    61fc:	f7 01       	movw	r30, r14
    61fe:	ee 0f       	add	r30, r30
    6200:	ff 1f       	adc	r31, r31
    6202:	ea 5f       	subi	r30, 0xFA	; 250
    6204:	f1 4f       	sbci	r31, 0xF1	; 241
    6206:	85 91       	lpm	r24, Z+
    6208:	94 91       	lpm	r25, Z
    620a:	0e 94 94 3e 	call	0x7d28	; 0x7d28 <pgm_mugui_scopy>

				mugui_text_sizestring((char*)pBuffer, (const unsigned char*)Verdana14, &size);
    620e:	ae 01       	movw	r20, r28
    6210:	4f 5f       	subi	r20, 0xFF	; 255
    6212:	5f 4f       	sbci	r21, 0xFF	; 255
    6214:	61 e7       	ldi	r22, 0x71	; 113
    6216:	71 e0       	ldi	r23, 0x01	; 1
    6218:	8b e5       	ldi	r24, 0x5B	; 91
    621a:	95 e0       	ldi	r25, 0x05	; 5
    621c:	0e 94 46 3e 	call	0x7c8c	; 0x7c8c <mugui_text_sizestring>
				LCD_Display_Text(text_link + value, (const unsigned char*)Verdana14,((128-size.x)/2),25);
    6220:	89 81       	ldd	r24, Y+1	; 0x01
    6222:	9a 81       	ldd	r25, Y+2	; 0x02
    6224:	a6 01       	movw	r20, r12
    6226:	48 1b       	sub	r20, r24
    6228:	59 0b       	sbc	r21, r25
    622a:	56 95       	lsr	r21
    622c:	47 95       	ror	r20
    622e:	29 e1       	ldi	r18, 0x19	; 25
    6230:	30 e0       	ldi	r19, 0x00	; 0
    6232:	61 e7       	ldi	r22, 0x71	; 113
    6234:	71 e0       	ldi	r23, 0x01	; 1
    6236:	c7 01       	movw	r24, r14
    6238:	0e 94 0a 23 	call	0x4614	; 0x4614 <LCD_Display_Text>
			}

			// Print bottom markers
			print_menu_frame(1);
    623c:	81 e0       	ldi	r24, 0x01	; 1
    623e:	0e 94 55 2f 	call	0x5eaa	; 0x5eaa <print_menu_frame>

			// Write from buffer
			write_buffer(buffer);
    6242:	80 e0       	ldi	r24, 0x00	; 0
    6244:	91 e0       	ldi	r25, 0x01	; 1
    6246:	0e 94 2b 21 	call	0x4256	; 0x4256 <write_buffer>
		// Display update
		if 	(!servo_enable || 									// Non-servo value or
			((display_update >= 8) && (button != NONE)) || 		// Servo value and 8 cycles passed but only with a button pressed or...
			 (first_time))										// First time into routine
		{
			display_update = 0;
    624a:	f1 2c       	mov	r15, r1
			// Write from buffer
			write_buffer(buffer);
		}
		
		// Slow the loop rate for text items
		if (range.style == 1)
    624c:	51 e0       	ldi	r21, 0x01	; 1
    624e:	45 12       	cpse	r4, r21
    6250:	08 c0       	rjmp	.+16     	; 0x6262 <do_menu_item+0x1f6>
    6252:	8f e3       	ldi	r24, 0x3F	; 63
    6254:	92 e4       	ldi	r25, 0x42	; 66
    6256:	ef e0       	ldi	r30, 0x0F	; 15
    6258:	81 50       	subi	r24, 0x01	; 1
    625a:	90 40       	sbci	r25, 0x00	; 0
    625c:	e0 40       	sbci	r30, 0x00	; 0
    625e:	e1 f7       	brne	.-8      	; 0x6258 <do_menu_item+0x1ec>
    6260:	15 c0       	rjmp	.+42     	; 0x628c <do_menu_item+0x220>
		{
			// Loop rate = 250ms (4Hz)
			_delay_ms(250);
		}
		else if (range.style == 3)
    6262:	f3 e0       	ldi	r31, 0x03	; 3
    6264:	4f 12       	cpse	r4, r31
    6266:	08 c0       	rjmp	.+16     	; 0x6278 <do_menu_item+0x20c>
    6268:	2f e7       	ldi	r18, 0x7F	; 127
    626a:	38 e3       	ldi	r19, 0x38	; 56
    626c:	41 e0       	ldi	r20, 0x01	; 1
    626e:	21 50       	subi	r18, 0x01	; 1
    6270:	30 40       	sbci	r19, 0x00	; 0
    6272:	40 40       	sbci	r20, 0x00	; 0
    6274:	e1 f7       	brne	.-8      	; 0x626e <do_menu_item+0x202>
    6276:	0a c0       	rjmp	.+20     	; 0x628c <do_menu_item+0x220>
		{
			// Loop rate = 20ms (50Hz)
			_delay_ms(20);
		}
		else if ((range.style == 0) || (range.style == 2))
    6278:	59 8d       	ldd	r21, Y+25	; 0x19
    627a:	51 11       	cpse	r21, r1
    627c:	09 c0       	rjmp	.+18     	; 0x6290 <do_menu_item+0x224>
    627e:	8f e7       	ldi	r24, 0x7F	; 127
    6280:	9a e1       	ldi	r25, 0x1A	; 26
    6282:	e6 e0       	ldi	r30, 0x06	; 6
    6284:	81 50       	subi	r24, 0x01	; 1
    6286:	90 40       	sbci	r25, 0x00	; 0
    6288:	e0 40       	sbci	r30, 0x00	; 0
    628a:	e1 f7       	brne	.-8      	; 0x6284 <do_menu_item+0x218>
    628c:	00 c0       	rjmp	.+0      	; 0x628e <do_menu_item+0x222>
    628e:	00 00       	nop
		}

		// Poll buttons when idle
		// Don't use button acceleration when moving servos
		// And don't block the code with poll_buttons()
		if (servo_enable)
    6290:	88 20       	and	r8, r8
    6292:	41 f0       	breq	.+16     	; 0x62a4 <do_menu_item+0x238>
		{
			button = (PINB & 0xf0);	
    6294:	83 b1       	in	r24, 0x03	; 3
    6296:	80 7f       	andi	r24, 0xF0	; 240
    6298:	80 93 e2 07 	sts	0x07E2, r24
			button_multiplier = 1;
    629c:	81 e0       	ldi	r24, 0x01	; 1
    629e:	80 93 e3 07 	sts	0x07E3, r24
    62a2:	03 c0       	rjmp	.+6      	; 0x62aa <do_menu_item+0x23e>
		}
		else
		{
			poll_buttons(true);
    62a4:	81 e0       	ldi	r24, 0x01	; 1
    62a6:	0e 94 01 30 	call	0x6002	; 0x6002 <poll_buttons>
		}

		// Release button lock when pressed
		// unless a servo
		if ((button != NONE) && (!servo_enable))
    62aa:	80 91 e2 07 	lds	r24, 0x07E2
    62ae:	80 3f       	cpi	r24, 0xF0	; 240
    62b0:	39 f1       	breq	.+78     	; 0x6300 <do_menu_item+0x294>
    62b2:	88 20       	and	r8, r8
    62b4:	c9 f0       	breq	.+50     	; 0x62e8 <do_menu_item+0x27c>
		{
				button_lock = false;
		}
		
		// Handle cursor Up/Down limits
		if (button == DOWN)
    62b6:	80 3d       	cpi	r24, 0xD0	; 208
    62b8:	51 f4       	brne	.+20     	; 0x62ce <do_menu_item+0x262>
		{
			if (button_lock == false)
    62ba:	91 10       	cpse	r9, r1
    62bc:	70 c0       	rjmp	.+224    	; 0x639e <do_menu_item+0x332>
			{
				button_lock = true;
				value = value - (range.increment * button_multiplier);
    62be:	80 91 e3 07 	lds	r24, 0x07E3
    62c2:	fd 85       	ldd	r31, Y+13	; 0x0d
    62c4:	f8 9f       	mul	r31, r24
    62c6:	a0 18       	sub	r10, r0
    62c8:	b1 08       	sbc	r11, r1
    62ca:	11 24       	eor	r1, r1
    62cc:	0b c0       	rjmp	.+22     	; 0x62e4 <do_menu_item+0x278>
				button_update = 0;
			}
		}

		if (button == UP)
    62ce:	80 3b       	cpi	r24, 0xB0	; 176
    62d0:	81 f4       	brne	.+32     	; 0x62f2 <do_menu_item+0x286>
		{
			if (button_lock == false)
    62d2:	91 10       	cpse	r9, r1
    62d4:	64 c0       	rjmp	.+200    	; 0x639e <do_menu_item+0x332>
			{
				button_lock = true;
				value = value + (range.increment * button_multiplier);
    62d6:	80 91 e3 07 	lds	r24, 0x07E3
    62da:	2d 85       	ldd	r18, Y+13	; 0x0d
    62dc:	28 9f       	mul	r18, r24
    62de:	a0 0c       	add	r10, r0
    62e0:	b1 1c       	adc	r11, r1
    62e2:	11 24       	eor	r1, r1
				button_update = 0;
    62e4:	51 2c       	mov	r5, r1
    62e6:	5b c0       	rjmp	.+182    	; 0x639e <do_menu_item+0x332>
		{
				button_lock = false;
		}
		
		// Handle cursor Up/Down limits
		if (button == DOWN)
    62e8:	80 3d       	cpi	r24, 0xD0	; 208
    62ea:	49 f3       	breq	.-46     	; 0x62be <do_menu_item+0x252>
				value = value - (range.increment * button_multiplier);
				button_update = 0;
			}
		}

		if (button == UP)
    62ec:	80 3b       	cpi	r24, 0xB0	; 176
    62ee:	99 f3       	breq	.-26     	; 0x62d6 <do_menu_item+0x26a>

		// Release button lock when pressed
		// unless a servo
		if ((button != NONE) && (!servo_enable))
		{
				button_lock = false;
    62f0:	91 2c       	mov	r9, r1
				value = value + (range.increment * button_multiplier);
				button_update = 0;
			}
		}

		if (button == BACK)	
    62f2:	80 37       	cpi	r24, 0x70	; 112
    62f4:	29 f4       	brne	.+10     	; 0x6300 <do_menu_item+0x294>
		{
			value = (range.default_value * mult);
    62f6:	29 85       	ldd	r18, Y+9	; 0x09
    62f8:	3a 85       	ldd	r19, Y+10	; 0x0a
    62fa:	23 03       	mulsu	r18, r19
    62fc:	50 01       	movw	r10, r0
    62fe:	11 24       	eor	r1, r1
    6300:	a2 14       	cp	r10, r2
    6302:	b3 04       	cpc	r11, r3
    6304:	0c f4       	brge	.+2      	; 0x6308 <do_menu_item+0x29c>
    6306:	51 01       	movw	r10, r2
    6308:	4e 85       	ldd	r20, Y+14	; 0x0e
    630a:	5f 85       	ldd	r21, Y+15	; 0x0f
    630c:	4a 15       	cp	r20, r10
    630e:	5b 05       	cpc	r21, r11
    6310:	0c f4       	brge	.+2      	; 0x6314 <do_menu_item+0x2a8>
    6312:	5a 01       	movw	r10, r20
		{
			value = range.upper * mult;
		}

		// Update contrast setting
		if (menuitem == CONTRAST)
    6314:	5f e9       	ldi	r21, 0x9F	; 159
    6316:	65 16       	cp	r6, r21
    6318:	71 04       	cpc	r7, r1
    631a:	19 f4       	brne	.+6      	; 0x6322 <do_menu_item+0x2b6>
		{
			st7565_set_brightness(value);
    631c:	8a 2d       	mov	r24, r10
    631e:	0e 94 03 21 	call	0x4206	; 0x4206 <st7565_set_brightness>
		}

		// Set servo position if required
		// Ignore if the output is marked as a motor
		if	(
    6322:	88 20       	and	r8, r8
    6324:	a9 f0       	breq	.+42     	; 0x6350 <do_menu_item+0x2e4>
			(servo_enable) &&
    6326:	eb 85       	ldd	r30, Y+11	; 0x0b
    6328:	fc 85       	ldd	r31, Y+12	; 0x0c
    632a:	80 81       	ld	r24, Z
    632c:	82 30       	cpi	r24, 0x02	; 2
    632e:	81 f0       	breq	.+32     	; 0x6350 <do_menu_item+0x2e4>
			(Config.Channel[servo_number].Motor_marker != MOTOR)
			)
		{
			servo_update = 0;

			temp16 = scale_percent(value);	// Convert to servo position (from %)
    6330:	8a 2d       	mov	r24, r10
    6332:	0e 94 3f 3e 	call	0x7c7e	; 0x7c7e <scale_percent>

			// Scale servo from 2500~5000 to 875~2125
			temp16 = ((temp16 - 3750) >> 1) + 1500; 
    6336:	86 5a       	subi	r24, 0xA6	; 166
    6338:	9e 40       	sbci	r25, 0x0E	; 14
    633a:	95 95       	asr	r25
    633c:	87 95       	ror	r24

			cli();
    633e:	f8 94       	cli
			servo_update = 0;

			temp16 = scale_percent(value);	// Convert to servo position (from %)

			// Scale servo from 2500~5000 to 875~2125
			temp16 = ((temp16 - 3750) >> 1) + 1500; 
    6340:	bc 01       	movw	r22, r24
    6342:	64 52       	subi	r22, 0x24	; 36
    6344:	7a 4f       	sbci	r23, 0xFA	; 250

			cli();
			output_servo_ppm_asm3(servo_number, temp16);
    6346:	8e a5       	ldd	r24, Y+46	; 0x2e
    6348:	9f a5       	ldd	r25, Y+47	; 0x2f
    634a:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <output_servo_ppm_asm3>
			sei();
    634e:	78 94       	sei
    6350:	90 e0       	ldi	r25, 0x00	; 0
    6352:	fa ce       	rjmp	.-524    	; 0x6148 <do_menu_item+0xdc>

	// Exit
	button = ENTER;

	// Divide value from that displayed if style = 2
	if (range.style == 2)
    6354:	f2 e0       	ldi	r31, 0x02	; 2
    6356:	4f 12       	cpse	r4, r31
    6358:	06 c0       	rjmp	.+12     	; 0x6366 <do_menu_item+0x2fa>
	{
		value = value / mult;
    635a:	c5 01       	movw	r24, r10
    635c:	6a 89       	ldd	r22, Y+18	; 0x12
    635e:	7b 89       	ldd	r23, Y+19	; 0x13
    6360:	0e 94 5f 49 	call	0x92be	; 0x92be <__divmodhi4>
    6364:	5b 01       	movw	r10, r22
	}

	*values = (int8_t)value;
    6366:	e8 89       	ldd	r30, Y+16	; 0x10
    6368:	f9 89       	ldd	r31, Y+17	; 0x11
    636a:	a0 82       	st	Z, r10
}
    636c:	69 96       	adiw	r28, 0x19	; 25
    636e:	0f b6       	in	r0, 0x3f	; 63
    6370:	f8 94       	cli
    6372:	de bf       	out	0x3e, r29	; 62
    6374:	0f be       	out	0x3f, r0	; 63
    6376:	cd bf       	out	0x3d, r28	; 61
    6378:	df 91       	pop	r29
    637a:	cf 91       	pop	r28
    637c:	1f 91       	pop	r17
    637e:	0f 91       	pop	r16
    6380:	ff 90       	pop	r15
    6382:	ef 90       	pop	r14
    6384:	df 90       	pop	r13
    6386:	cf 90       	pop	r12
    6388:	bf 90       	pop	r11
    638a:	af 90       	pop	r10
    638c:	9f 90       	pop	r9
    638e:	8f 90       	pop	r8
    6390:	7f 90       	pop	r7
    6392:	6f 90       	pop	r6
    6394:	5f 90       	pop	r5
    6396:	4f 90       	pop	r4
    6398:	3f 90       	pop	r3
    639a:	2f 90       	pop	r2
    639c:	08 95       	ret

		// Release button lock when pressed
		// unless a servo
		if ((button != NONE) && (!servo_enable))
		{
				button_lock = false;
    639e:	99 24       	eor	r9, r9
    63a0:	93 94       	inc	r9
    63a2:	ae cf       	rjmp	.-164    	; 0x6300 <do_menu_item+0x294>

000063a4 <menu_beep>:

void menu_beep(uint8_t beeps)
{
	uint8_t i;

	for (i=0; i < beeps; i++)
    63a4:	90 e0       	ldi	r25, 0x00	; 0
    63a6:	98 17       	cp	r25, r24
    63a8:	81 f0       	breq	.+32     	; 0x63ca <menu_beep+0x26>
	{ 
		LVA = 1;
    63aa:	29 9a       	sbi	0x05, 1	; 5
    63ac:	ef e0       	ldi	r30, 0x0F	; 15
    63ae:	f7 e2       	ldi	r31, 0x27	; 39
    63b0:	31 97       	sbiw	r30, 0x01	; 1
    63b2:	f1 f7       	brne	.-4      	; 0x63b0 <menu_beep+0xc>
    63b4:	00 c0       	rjmp	.+0      	; 0x63b6 <menu_beep+0x12>
    63b6:	00 00       	nop
		_delay_ms(2);
		LVA = 0;
    63b8:	29 98       	cbi	0x05, 1	; 5
    63ba:	ef e0       	ldi	r30, 0x0F	; 15
    63bc:	f7 e2       	ldi	r31, 0x27	; 39
    63be:	31 97       	sbiw	r30, 0x01	; 1
    63c0:	f1 f7       	brne	.-4      	; 0x63be <menu_beep+0x1a>
    63c2:	00 c0       	rjmp	.+0      	; 0x63c4 <menu_beep+0x20>
    63c4:	00 00       	nop

void menu_beep(uint8_t beeps)
{
	uint8_t i;

	for (i=0; i < beeps; i++)
    63c6:	9f 5f       	subi	r25, 0xFF	; 255
    63c8:	ee cf       	rjmp	.-36     	; 0x63a6 <menu_beep+0x2>
		LVA = 1;
		_delay_ms(2);
		LVA = 0;
		_delay_ms(2);
	}
}
    63ca:	08 95       	ret

000063cc <update_menu>:
// top*		= Item number currently on top line
// temp*	= Currently selected item number
//************************************************************

void update_menu(uint8_t items, uint8_t start, uint8_t offset, uint8_t button, uint8_t* cursor, uint16_t* top, uint16_t* temp)
{
    63cc:	af 92       	push	r10
    63ce:	bf 92       	push	r11
    63d0:	cf 92       	push	r12
    63d2:	df 92       	push	r13
    63d4:	ef 92       	push	r14
    63d6:	ff 92       	push	r15
    63d8:	0f 93       	push	r16
    63da:	1f 93       	push	r17
    63dc:	cf 93       	push	r28
    63de:	df 93       	push	r29
    63e0:	00 d0       	rcall	.+0      	; 0x63e2 <update_menu+0x16>
    63e2:	cd b7       	in	r28, 0x3d	; 61
    63e4:	de b7       	in	r29, 0x3e	; 62
    63e6:	98 2f       	mov	r25, r24
    63e8:	58 01       	movw	r10, r16
	// Temporarily add in offset :(
	*top = *top + offset;
    63ea:	04 2f       	mov	r16, r20
    63ec:	10 e0       	ldi	r17, 0x00	; 0
    63ee:	d7 01       	movw	r26, r14
    63f0:	ed 91       	ld	r30, X+
    63f2:	fc 91       	ld	r31, X
    63f4:	11 97       	sbiw	r26, 0x01	; 1
    63f6:	e0 0f       	add	r30, r16
    63f8:	f1 1f       	adc	r31, r17
    63fa:	ed 93       	st	X+, r30
    63fc:	fc 93       	st	X, r31
	start = start + offset;
    63fe:	64 0f       	add	r22, r20

	// Calculate which function has been requested
	if (button == ENTER)
    6400:	20 3e       	cpi	r18, 0xE0	; 224
    6402:	b1 f4       	brne	.+44     	; 0x6430 <update_menu+0x64>
	{
		switch(*cursor) 
    6404:	d5 01       	movw	r26, r10
    6406:	8c 91       	ld	r24, X
    6408:	8f 30       	cpi	r24, 0x0F	; 15
    640a:	59 f0       	breq	.+22     	; 0x6422 <update_menu+0x56>
    640c:	18 f4       	brcc	.+6      	; 0x6414 <update_menu+0x48>
    640e:	83 30       	cpi	r24, 0x03	; 3
    6410:	49 f0       	breq	.+18     	; 0x6424 <update_menu+0x58>
    6412:	4d c0       	rjmp	.+154    	; 0x64ae <update_menu+0xe2>
    6414:	8b 31       	cpi	r24, 0x1B	; 27
    6416:	51 f0       	breq	.+20     	; 0x642c <update_menu+0x60>
    6418:	87 32       	cpi	r24, 0x27	; 39
    641a:	09 f0       	breq	.+2      	; 0x641e <update_menu+0x52>
    641c:	48 c0       	rjmp	.+144    	; 0x64ae <update_menu+0xe2>
				break;	
			case LINE2:
				*temp = *top + 2;
				break;
			case LINE3:
				*temp = *top + 3;
    641e:	33 96       	adiw	r30, 0x03	; 3
    6420:	01 c0       	rjmp	.+2      	; 0x6424 <update_menu+0x58>
		{
			case LINE0:
				*temp = *top;
				break;
			case LINE1:
				*temp = *top + 1;
    6422:	31 96       	adiw	r30, 0x01	; 1
    6424:	d6 01       	movw	r26, r12
    6426:	ed 93       	st	X+, r30
    6428:	fc 93       	st	X, r31
				break;	
    642a:	41 c0       	rjmp	.+130    	; 0x64ae <update_menu+0xe2>
			case LINE2:
				*temp = *top + 2;
    642c:	32 96       	adiw	r30, 0x02	; 2
    642e:	fa cf       	rjmp	.-12     	; 0x6424 <update_menu+0x58>
				break;
		}
	}

	// Handle cursor Up/Down limits
	if (button == DOWN)	
    6430:	20 3d       	cpi	r18, 0xD0	; 208
    6432:	f9 f4       	brne	.+62     	; 0x6472 <update_menu+0xa6>
	{
		switch(*cursor) 
    6434:	f5 01       	movw	r30, r10
    6436:	80 81       	ld	r24, Z
    6438:	8f 30       	cpi	r24, 0x0F	; 15
    643a:	69 f0       	breq	.+26     	; 0x6456 <update_menu+0x8a>
    643c:	18 f4       	brcc	.+6      	; 0x6444 <update_menu+0x78>
    643e:	83 30       	cpi	r24, 0x03	; 3
    6440:	31 f0       	breq	.+12     	; 0x644e <update_menu+0x82>
    6442:	15 c0       	rjmp	.+42     	; 0x646e <update_menu+0xa2>
    6444:	8b 31       	cpi	r24, 0x1B	; 27
    6446:	59 f0       	breq	.+22     	; 0x645e <update_menu+0x92>
    6448:	87 32       	cpi	r24, 0x27	; 39
    644a:	69 f0       	breq	.+26     	; 0x6466 <update_menu+0x9a>
    644c:	10 c0       	rjmp	.+32     	; 0x646e <update_menu+0xa2>
		{
			case LINE0:
				if (items > 1) *cursor = LINE1;
    644e:	92 30       	cpi	r25, 0x02	; 2
    6450:	70 f1       	brcs	.+92     	; 0x64ae <update_menu+0xe2>
    6452:	8f e0       	ldi	r24, 0x0F	; 15
    6454:	27 c0       	rjmp	.+78     	; 0x64a4 <update_menu+0xd8>
				break;	
			case LINE1:
				if (items > 2) *cursor = LINE2;
    6456:	93 30       	cpi	r25, 0x03	; 3
    6458:	50 f1       	brcs	.+84     	; 0x64ae <update_menu+0xe2>
    645a:	8b e1       	ldi	r24, 0x1B	; 27
    645c:	1f c0       	rjmp	.+62     	; 0x649c <update_menu+0xd0>
				break;	
			case LINE2:
				if (items > 3) *cursor = LINE3;
    645e:	94 30       	cpi	r25, 0x04	; 4
    6460:	30 f1       	brcs	.+76     	; 0x64ae <update_menu+0xe2>
    6462:	87 e2       	ldi	r24, 0x27	; 39
    6464:	1f c0       	rjmp	.+62     	; 0x64a4 <update_menu+0xd8>
				break;
			case LINE3:
				if (items > 4) *cursor = NEXTLINE;
    6466:	95 30       	cpi	r25, 0x05	; 5
    6468:	10 f1       	brcs	.+68     	; 0x64ae <update_menu+0xe2>
    646a:	88 e2       	ldi	r24, 0x28	; 40
    646c:	17 c0       	rjmp	.+46     	; 0x649c <update_menu+0xd0>
				break;
			default:
				*cursor = NEXTLINE;
    646e:	88 e2       	ldi	r24, 0x28	; 40
    6470:	19 c0       	rjmp	.+50     	; 0x64a4 <update_menu+0xd8>
				break;
		}
	}

	if (button == UP)	
    6472:	20 3b       	cpi	r18, 0xB0	; 176
    6474:	d1 f4       	brne	.+52     	; 0x64aa <update_menu+0xde>
	{
		switch(*cursor) 
    6476:	f5 01       	movw	r30, r10
    6478:	80 81       	ld	r24, Z
    647a:	8f 30       	cpi	r24, 0x0F	; 15
    647c:	69 f0       	breq	.+26     	; 0x6498 <update_menu+0xcc>
    647e:	20 f4       	brcc	.+8      	; 0x6488 <update_menu+0xbc>
    6480:	83 30       	cpi	r24, 0x03	; 3
    6482:	79 f4       	brne	.+30     	; 0x64a2 <update_menu+0xd6>
				break;
			case LINE1:
				*cursor = LINE0;
				break;
			case LINE0:
				*cursor = PREVLINE;
    6484:	82 e0       	ldi	r24, 0x02	; 2
    6486:	0a c0       	rjmp	.+20     	; 0x649c <update_menu+0xd0>
		}
	}

	if (button == UP)	
	{
		switch(*cursor) 
    6488:	8b 31       	cpi	r24, 0x1B	; 27
    648a:	21 f0       	breq	.+8      	; 0x6494 <update_menu+0xc8>
    648c:	87 32       	cpi	r24, 0x27	; 39
    648e:	49 f4       	brne	.+18     	; 0x64a2 <update_menu+0xd6>
		{
			case LINE3:
				*cursor = LINE2;
    6490:	8b e1       	ldi	r24, 0x1B	; 27
    6492:	08 c0       	rjmp	.+16     	; 0x64a4 <update_menu+0xd8>
				break;	
			case LINE2:
				*cursor = LINE1;
    6494:	8f e0       	ldi	r24, 0x0F	; 15
    6496:	02 c0       	rjmp	.+4      	; 0x649c <update_menu+0xd0>
				break;
			case LINE1:
				*cursor = LINE0;
    6498:	83 e0       	ldi	r24, 0x03	; 3
    649a:	04 c0       	rjmp	.+8      	; 0x64a4 <update_menu+0xd8>
				break;
			case LINE0:
				*cursor = PREVLINE;
    649c:	f5 01       	movw	r30, r10
    649e:	80 83       	st	Z, r24
				break;
    64a0:	06 c0       	rjmp	.+12     	; 0x64ae <update_menu+0xe2>
			default:
				*cursor = PREVLINE;
    64a2:	82 e0       	ldi	r24, 0x02	; 2
    64a4:	d5 01       	movw	r26, r10
    64a6:	8c 93       	st	X, r24
				break;
    64a8:	02 c0       	rjmp	.+4      	; 0x64ae <update_menu+0xe2>
		}
	}

	if (button != NONE)	
    64aa:	20 3f       	cpi	r18, 0xF0	; 240
    64ac:	81 f0       	breq	.+32     	; 0x64ce <update_menu+0x102>
	{
		menu_beep(1);
    64ae:	81 e0       	ldi	r24, 0x01	; 1
    64b0:	69 83       	std	Y+1, r22	; 0x01
    64b2:	9a 83       	std	Y+2, r25	; 0x02
    64b4:	0e 94 d2 31 	call	0x63a4	; 0x63a4 <menu_beep>
    64b8:	bf ef       	ldi	r27, 0xFF	; 255
    64ba:	e4 e3       	ldi	r30, 0x34	; 52
    64bc:	fc e0       	ldi	r31, 0x0C	; 12
    64be:	b1 50       	subi	r27, 0x01	; 1
    64c0:	e0 40       	sbci	r30, 0x00	; 0
    64c2:	f0 40       	sbci	r31, 0x00	; 0
    64c4:	e1 f7       	brne	.-8      	; 0x64be <update_menu+0xf2>
    64c6:	00 c0       	rjmp	.+0      	; 0x64c8 <update_menu+0xfc>
    64c8:	00 00       	nop
    64ca:	9a 81       	ldd	r25, Y+2	; 0x02
    64cc:	69 81       	ldd	r22, Y+1	; 0x01
		_delay_ms(200);
	}

	// When cursor is at limits and button pressed
	if (*cursor == PREVLINE)								// Up				
    64ce:	d5 01       	movw	r26, r10
    64d0:	8c 91       	ld	r24, X
    64d2:	82 30       	cpi	r24, 0x02	; 2
    64d4:	71 f4       	brne	.+28     	; 0x64f2 <update_menu+0x126>
	{
		*cursor  = LINE0;
    64d6:	83 e0       	ldi	r24, 0x03	; 3
    64d8:	8c 93       	st	X, r24
		if (*top > start) 
    64da:	f7 01       	movw	r30, r14
    64dc:	20 81       	ld	r18, Z
    64de:	31 81       	ldd	r19, Z+1	; 0x01
    64e0:	46 2f       	mov	r20, r22
    64e2:	50 e0       	ldi	r21, 0x00	; 0
    64e4:	42 17       	cp	r20, r18
    64e6:	53 07       	cpc	r21, r19
    64e8:	20 f4       	brcc	.+8      	; 0x64f2 <update_menu+0x126>
		{
			*top = *top - 1;								// Shuffle list up
    64ea:	21 50       	subi	r18, 0x01	; 1
    64ec:	31 09       	sbc	r19, r1
    64ee:	31 83       	std	Z+1, r19	; 0x01
    64f0:	20 83       	st	Z, r18
		}
	}
	
	if (*cursor == NEXTLINE)								// Down
    64f2:	d5 01       	movw	r26, r10
    64f4:	8c 91       	ld	r24, X
    64f6:	88 32       	cpi	r24, 0x28	; 40
    64f8:	a1 f4       	brne	.+40     	; 0x6522 <update_menu+0x156>
	{
		*cursor  = LINE3;
    64fa:	87 e2       	ldi	r24, 0x27	; 39
    64fc:	8c 93       	st	X, r24
		if ((*top + 3) < (uint16_t)((start + items) - 1))	// Compiler throws a warning here without the cast. top is uint16_t, start is uint8_t, items = uint8_t
    64fe:	f7 01       	movw	r30, r14
    6500:	20 81       	ld	r18, Z
    6502:	31 81       	ldd	r19, Z+1	; 0x01
    6504:	a9 01       	movw	r20, r18
    6506:	4d 5f       	subi	r20, 0xFD	; 253
    6508:	5f 4f       	sbci	r21, 0xFF	; 255
    650a:	89 2f       	mov	r24, r25
    650c:	90 e0       	ldi	r25, 0x00	; 0
    650e:	86 0f       	add	r24, r22
    6510:	91 1d       	adc	r25, r1
    6512:	01 97       	sbiw	r24, 0x01	; 1
    6514:	48 17       	cp	r20, r24
    6516:	59 07       	cpc	r21, r25
    6518:	20 f4       	brcc	.+8      	; 0x6522 <update_menu+0x156>
		{
			*top = *top + 1;								// Shuffle list down
    651a:	2f 5f       	subi	r18, 0xFF	; 255
    651c:	3f 4f       	sbci	r19, 0xFF	; 255
    651e:	31 83       	std	Z+1, r19	; 0x01
    6520:	20 83       	st	Z, r18
		}
	}

	// Remove temporary offset
	*top = *top - offset;
    6522:	d7 01       	movw	r26, r14
    6524:	8d 91       	ld	r24, X+
    6526:	9c 91       	ld	r25, X
    6528:	11 97       	sbiw	r26, 0x01	; 1
    652a:	80 1b       	sub	r24, r16
    652c:	91 0b       	sbc	r25, r17
    652e:	8d 93       	st	X+, r24
    6530:	9c 93       	st	X, r25
}
    6532:	0f 90       	pop	r0
    6534:	0f 90       	pop	r0
    6536:	df 91       	pop	r29
    6538:	cf 91       	pop	r28
    653a:	1f 91       	pop	r17
    653c:	0f 91       	pop	r16
    653e:	ff 90       	pop	r15
    6540:	ef 90       	pop	r14
    6542:	df 90       	pop	r13
    6544:	cf 90       	pop	r12
    6546:	bf 90       	pop	r11
    6548:	af 90       	pop	r10
    654a:	08 95       	ret

0000654c <print_cursor>:
// Print cursor on specified line
//************************************************************

void print_cursor(uint8_t line)
{
	LCD_Display_Text(13, (const unsigned char*)Wingdings, CURSOROFFSET, line);
    654c:	28 2f       	mov	r18, r24
    654e:	30 e0       	ldi	r19, 0x00	; 0
    6550:	43 e0       	ldi	r20, 0x03	; 3
    6552:	50 e0       	ldi	r21, 0x00	; 0
    6554:	67 e0       	ldi	r22, 0x07	; 7
    6556:	71 e0       	ldi	r23, 0x01	; 1
    6558:	8d e0       	ldi	r24, 0x0D	; 13
    655a:	90 e0       	ldi	r25, 0x00	; 0
    655c:	0c 94 0a 23 	jmp	0x4614	; 0x4614 <LCD_Display_Text>

00006560 <print_menu_items>:
// MenuOffsets = originally an array, now just a fixed horizontal offset for the value text
// text_link = pointer to the text list for the values if not numeric
// cursor = cursor position
//**********************************************************************
void print_menu_items(uint16_t top, uint16_t start, int8_t values[], const unsigned char* menu_ranges, uint8_t rangetype, uint8_t MenuOffsets, const unsigned char* text_link, uint8_t cursor)
{
    6560:	2f 92       	push	r2
    6562:	3f 92       	push	r3
    6564:	4f 92       	push	r4
    6566:	5f 92       	push	r5
    6568:	6f 92       	push	r6
    656a:	7f 92       	push	r7
    656c:	8f 92       	push	r8
    656e:	9f 92       	push	r9
    6570:	af 92       	push	r10
    6572:	bf 92       	push	r11
    6574:	cf 92       	push	r12
    6576:	df 92       	push	r13
    6578:	ef 92       	push	r14
    657a:	ff 92       	push	r15
    657c:	0f 93       	push	r16
    657e:	1f 93       	push	r17
    6580:	cf 93       	push	r28
    6582:	df 93       	push	r29
    6584:	cd b7       	in	r28, 0x3d	; 61
    6586:	de b7       	in	r29, 0x3e	; 62
    6588:	2a 97       	sbiw	r28, 0x0a	; 10
    658a:	0f b6       	in	r0, 0x3f	; 63
    658c:	f8 94       	cli
    658e:	de bf       	out	0x3e, r29	; 62
    6590:	0f be       	out	0x3f, r0	; 63
    6592:	cd bf       	out	0x3d, r28	; 61
    6594:	2c 01       	movw	r4, r24
    6596:	4a 01       	movw	r8, r20
    6598:	39 01       	movw	r6, r18
    659a:	0e 83       	std	Y+6, r16	; 0x06
    659c:	ef 82       	std	Y+7, r14	; 0x07
    659e:	a8 86       	std	Y+8, r10	; 0x08
	menu_range_t	range1;
		
	// Clear buffer before each update
	clear_buffer(buffer);
    65a0:	80 e0       	ldi	r24, 0x00	; 0
    65a2:	91 e0       	ldi	r25, 0x01	; 1
    65a4:	69 87       	std	Y+9, r22	; 0x09
    65a6:	7a 87       	std	Y+10, r23	; 0x0a
    65a8:	0e 94 5d 21 	call	0x42ba	; 0x42ba <clear_buffer>
	print_menu_frame(0);
    65ac:	80 e0       	ldi	r24, 0x00	; 0
    65ae:	0e 94 55 2f 	call	0x5eaa	; 0x5eaa <print_menu_frame>
    65b2:	25 e0       	ldi	r18, 0x05	; 5
    65b4:	69 85       	ldd	r22, Y+9	; 0x09
    65b6:	7a 85       	ldd	r23, Y+10	; 0x0a
    65b8:	26 9f       	mul	r18, r22
    65ba:	c0 01       	movw	r24, r0
    65bc:	27 9f       	mul	r18, r23
    65be:	90 0d       	add	r25, r0
    65c0:	11 24       	eor	r1, r1
    65c2:	13 01       	movw	r2, r6
    65c4:	28 1a       	sub	r2, r24
    65c6:	39 0a       	sbc	r3, r25
    65c8:	24 9d       	mul	r18, r4
    65ca:	c0 01       	movw	r24, r0
    65cc:	25 9d       	mul	r18, r5
    65ce:	90 0d       	add	r25, r0
    65d0:	11 24       	eor	r1, r1
    65d2:	28 0e       	add	r2, r24
    65d4:	39 1e       	adc	r3, r25
    65d6:	72 01       	movw	r14, r4
    65d8:	a1 2c       	mov	r10, r1
    65da:	b1 2c       	mov	r11, r1
    65dc:	a1 e5       	ldi	r26, 0x51	; 81
    65de:	4a 2e       	mov	r4, r26
    65e0:	a8 e1       	ldi	r26, 0x18	; 24
    65e2:	5a 2e       	mov	r5, r26
    65e4:	4e 18       	sub	r4, r14
    65e6:	5f 08       	sbc	r5, r15
    65e8:	c6 1a       	sub	r12, r22
    65ea:	d7 0a       	sbc	r13, r23
    65ec:	86 1a       	sub	r8, r22
    65ee:	97 0a       	sbc	r9, r23
    65f0:	82 01       	movw	r16, r4
    65f2:	0e 0d       	add	r16, r14
    65f4:	1f 1d       	adc	r17, r15
	
	// Print each line
	for (uint8_t i = 0; i < 4; i++)
	{
		LCD_Display_Text(top+i,(const unsigned char*)Verdana8,ITEMOFFSET,(uint8_t)pgm_read_byte(&lines[i]));
    65f6:	f8 01       	movw	r30, r16
    65f8:	24 91       	lpm	r18, Z
    65fa:	30 e0       	ldi	r19, 0x00	; 0
    65fc:	4a e0       	ldi	r20, 0x0A	; 10
    65fe:	50 e0       	ldi	r21, 0x00	; 0
    6600:	6f e1       	ldi	r22, 0x1F	; 31
    6602:	7a e0       	ldi	r23, 0x0A	; 10
    6604:	c7 01       	movw	r24, r14
    6606:	0e 94 0a 23 	call	0x4614	; 0x4614 <LCD_Display_Text>

		// Handle unique or copied ranges (to reduce space)
		if (rangetype == 0)
    660a:	fe 81       	ldd	r31, Y+6	; 0x06
		{
			// Use each unique entry
			memcpy_P(&range1, &menu_ranges[(top+i - start)* sizeof(range1)], sizeof(range1));
    660c:	45 e0       	ldi	r20, 0x05	; 5
    660e:	50 e0       	ldi	r21, 0x00	; 0
	for (uint8_t i = 0; i < 4; i++)
	{
		LCD_Display_Text(top+i,(const unsigned char*)Verdana8,ITEMOFFSET,(uint8_t)pgm_read_byte(&lines[i]));

		// Handle unique or copied ranges (to reduce space)
		if (rangetype == 0)
    6610:	f1 11       	cpse	r31, r1
    6612:	04 c0       	rjmp	.+8      	; 0x661c <print_menu_items+0xbc>
		{
			// Use each unique entry
			memcpy_P(&range1, &menu_ranges[(top+i - start)* sizeof(range1)], sizeof(range1));
    6614:	b5 01       	movw	r22, r10
    6616:	62 0d       	add	r22, r2
    6618:	73 1d       	adc	r23, r3
    661a:	01 c0       	rjmp	.+2      	; 0x661e <print_menu_items+0xbe>
		}
		else
		{
			// Use just the first entry in array for all 
			memcpy_P(&range1, &menu_ranges[0], sizeof(range1));
    661c:	b3 01       	movw	r22, r6
    661e:	ce 01       	movw	r24, r28
    6620:	01 96       	adiw	r24, 0x01	; 1
    6622:	0e 94 eb 49 	call	0x93d6	; 0x93d6 <memcpy_P>
		}

		print_menu_text((values[top+i - start]), range1.style, (pgm_read_byte(&text_link[top+i - start]) + values[top+i - start]), MenuOffsets, (uint8_t)pgm_read_byte(&lines[i]));
    6626:	f8 01       	movw	r30, r16
    6628:	04 91       	lpm	r16, Z
    662a:	f6 01       	movw	r30, r12
    662c:	ee 0d       	add	r30, r14
    662e:	ff 1d       	adc	r31, r15
    6630:	e4 91       	lpm	r30, Z
    6632:	d4 01       	movw	r26, r8
    6634:	ae 0d       	add	r26, r14
    6636:	bf 1d       	adc	r27, r15
    6638:	8c 91       	ld	r24, X
    663a:	99 27       	eor	r25, r25
    663c:	87 fd       	sbrc	r24, 7
    663e:	90 95       	com	r25
    6640:	ac 01       	movw	r20, r24
    6642:	4e 0f       	add	r20, r30
    6644:	51 1d       	adc	r21, r1
    6646:	2f 81       	ldd	r18, Y+7	; 0x07
    6648:	6c 81       	ldd	r22, Y+4	; 0x04
    664a:	0e 94 da 2f 	call	0x5fb4	; 0x5fb4 <print_menu_text>
    664e:	ff ef       	ldi	r31, 0xFF	; 255
    6650:	ef 1a       	sub	r14, r31
    6652:	ff 0a       	sbc	r15, r31
    6654:	85 e0       	ldi	r24, 0x05	; 5
    6656:	a8 0e       	add	r10, r24
    6658:	b1 1c       	adc	r11, r1
	// Clear buffer before each update
	clear_buffer(buffer);
	print_menu_frame(0);
	
	// Print each line
	for (uint8_t i = 0; i < 4; i++)
    665a:	e4 e1       	ldi	r30, 0x14	; 20
    665c:	ae 16       	cp	r10, r30
    665e:	b1 04       	cpc	r11, r1
    6660:	09 f0       	breq	.+2      	; 0x6664 <print_menu_items+0x104>
    6662:	c6 cf       	rjmp	.-116    	; 0x65f0 <print_menu_items+0x90>
		}

		print_menu_text((values[top+i - start]), range1.style, (pgm_read_byte(&text_link[top+i - start]) + values[top+i - start]), MenuOffsets, (uint8_t)pgm_read_byte(&lines[i]));
	}

	print_cursor(cursor);	// Cursor
    6664:	88 85       	ldd	r24, Y+8	; 0x08
    6666:	0e 94 a6 32 	call	0x654c	; 0x654c <print_cursor>
	write_buffer(buffer);
    666a:	80 e0       	ldi	r24, 0x00	; 0
    666c:	91 e0       	ldi	r25, 0x01	; 1
    666e:	0e 94 2b 21 	call	0x4256	; 0x4256 <write_buffer>
	poll_buttons(true);
    6672:	81 e0       	ldi	r24, 0x01	; 1
    6674:	0e 94 01 30 	call	0x6002	; 0x6002 <poll_buttons>
}
    6678:	2a 96       	adiw	r28, 0x0a	; 10
    667a:	0f b6       	in	r0, 0x3f	; 63
    667c:	f8 94       	cli
    667e:	de bf       	out	0x3e, r29	; 62
    6680:	0f be       	out	0x3f, r0	; 63
    6682:	cd bf       	out	0x3d, r28	; 61
    6684:	df 91       	pop	r29
    6686:	cf 91       	pop	r28
    6688:	1f 91       	pop	r17
    668a:	0f 91       	pop	r16
    668c:	ff 90       	pop	r15
    668e:	ef 90       	pop	r14
    6690:	df 90       	pop	r13
    6692:	cf 90       	pop	r12
    6694:	bf 90       	pop	r11
    6696:	af 90       	pop	r10
    6698:	9f 90       	pop	r9
    669a:	8f 90       	pop	r8
    669c:	7f 90       	pop	r7
    669e:	6f 90       	pop	r6
    66a0:	5f 90       	pop	r5
    66a2:	4f 90       	pop	r4
    66a4:	3f 90       	pop	r3
    66a6:	2f 90       	pop	r2
    66a8:	08 95       	ret

000066aa <menu_flight>:
//************************************************************
// Main menu-specific setup
//************************************************************

void menu_flight(uint8_t mode)
{
    66aa:	6f 92       	push	r6
    66ac:	7f 92       	push	r7
    66ae:	8f 92       	push	r8
    66b0:	af 92       	push	r10
    66b2:	bf 92       	push	r11
    66b4:	cf 92       	push	r12
    66b6:	df 92       	push	r13
    66b8:	ef 92       	push	r14
    66ba:	ff 92       	push	r15
    66bc:	0f 93       	push	r16
    66be:	1f 93       	push	r17
    66c0:	cf 93       	push	r28
    66c2:	df 93       	push	r29
    66c4:	00 d0       	rcall	.+0      	; 0x66c6 <menu_flight+0x1c>
    66c6:	00 d0       	rcall	.+0      	; 0x66c8 <menu_flight+0x1e>
    66c8:	1f 92       	push	r1
    66ca:	cd b7       	in	r28, 0x3d	; 61
    66cc:	de b7       	in	r29, 0x3e	; 62
	int8_t *value_ptr;
	menu_range_t range;
	uint8_t text_link;

	// If sub-menu item has changed, reset sub-menu positions
	if (menu_flag)
    66ce:	90 91 e4 07 	lds	r25, 0x07E4
    66d2:	99 23       	and	r25, r25
    66d4:	41 f0       	breq	.+16     	; 0x66e6 <menu_flight+0x3c>
	{
		sub_top = FLIGHTSTART;
    66d6:	2a ea       	ldi	r18, 0xAA	; 170
    66d8:	30 e0       	ldi	r19, 0x00	; 0
    66da:	30 93 35 05 	sts	0x0535, r19
    66de:	20 93 34 05 	sts	0x0534, r18
		menu_flag = 0;
    66e2:	10 92 e4 07 	sts	0x07E4, r1
	}

	while(button != BACK)
	{
		value_ptr = &Config.FlightMode[mode].Roll_P_mult;
    66e6:	92 e1       	ldi	r25, 0x12	; 18
    66e8:	89 9f       	mul	r24, r25
    66ea:	30 01       	movw	r6, r0
    66ec:	11 24       	eor	r1, r1
    66ee:	c3 01       	movw	r24, r6
    66f0:	85 52       	subi	r24, 0x25	; 37
    66f2:	9a 4f       	sbci	r25, 0xFA	; 250
    66f4:	3c 01       	movw	r6, r24
	{
		sub_top = FLIGHTSTART;
		menu_flag = 0;
	}

	while(button != BACK)
    66f6:	80 91 e2 07 	lds	r24, 0x07E2
    66fa:	80 37       	cpi	r24, 0x70	; 112
    66fc:	09 f4       	brne	.+2      	; 0x6700 <menu_flight+0x56>
    66fe:	5d c0       	rjmp	.+186    	; 0x67ba <menu_flight+0x110>
	{
		value_ptr = &Config.FlightMode[mode].Roll_P_mult;

		// Print menu
		print_menu_items(sub_top, FLIGHTSTART, value_ptr, (const unsigned char*)flight_menu_ranges, 0, FLIGHTOFFSET, (const unsigned char*)FlightMenuText, cursor);
    6700:	a0 90 04 05 	lds	r10, 0x0504
    6704:	8f ea       	ldi	r24, 0xAF	; 175
    6706:	c8 2e       	mov	r12, r24
    6708:	88 e1       	ldi	r24, 0x18	; 24
    670a:	d8 2e       	mov	r13, r24
    670c:	9f e4       	ldi	r25, 0x4F	; 79
    670e:	e9 2e       	mov	r14, r25
    6710:	00 e0       	ldi	r16, 0x00	; 0
    6712:	25 e5       	ldi	r18, 0x55	; 85
    6714:	38 e1       	ldi	r19, 0x18	; 24
    6716:	a3 01       	movw	r20, r6
    6718:	6a ea       	ldi	r22, 0xAA	; 170
    671a:	70 e0       	ldi	r23, 0x00	; 0
    671c:	80 91 34 05 	lds	r24, 0x0534
    6720:	90 91 35 05 	lds	r25, 0x0535
    6724:	0e 94 b0 32 	call	0x6560	; 0x6560 <print_menu_items>

		// Handle menu changes
		update_menu(FLIGHTITEMS, FLIGHTSTART, 0, button, &cursor, &sub_top, &menu_temp);
    6728:	2f e2       	ldi	r18, 0x2F	; 47
    672a:	c2 2e       	mov	r12, r18
    672c:	25 e0       	ldi	r18, 0x05	; 5
    672e:	d2 2e       	mov	r13, r18
    6730:	34 e3       	ldi	r19, 0x34	; 52
    6732:	e3 2e       	mov	r14, r19
    6734:	35 e0       	ldi	r19, 0x05	; 5
    6736:	f3 2e       	mov	r15, r19
    6738:	04 e0       	ldi	r16, 0x04	; 4
    673a:	15 e0       	ldi	r17, 0x05	; 5
    673c:	20 91 e2 07 	lds	r18, 0x07E2
    6740:	40 e0       	ldi	r20, 0x00	; 0
    6742:	6a ea       	ldi	r22, 0xAA	; 170
    6744:	82 e1       	ldi	r24, 0x12	; 18
    6746:	0e 94 e6 31 	call	0x63cc	; 0x63cc <update_menu>
		range = get_menu_range ((const unsigned char*)flight_menu_ranges, (menu_temp - FLIGHTSTART));
    674a:	60 91 2f 05 	lds	r22, 0x052F
    674e:	6a 5a       	subi	r22, 0xAA	; 170
    6750:	85 e5       	ldi	r24, 0x55	; 85
    6752:	98 e1       	ldi	r25, 0x18	; 24
    6754:	0e 94 aa 2f 	call	0x5f54	; 0x5f54 <get_menu_range>
    6758:	29 83       	std	Y+1, r18	; 0x01
    675a:	3a 83       	std	Y+2, r19	; 0x02
    675c:	4b 83       	std	Y+3, r20	; 0x03
    675e:	5c 83       	std	Y+4, r21	; 0x04
    6760:	6d 83       	std	Y+5, r22	; 0x05

		if (button == ENTER)
    6762:	80 91 e2 07 	lds	r24, 0x07E2
    6766:	80 3e       	cpi	r24, 0xE0	; 224
    6768:	e1 f4       	brne	.+56     	; 0x67a2 <menu_flight+0xf8>
		{
			text_link = pgm_read_byte(&FlightMenuText[menu_temp - FLIGHTSTART]);
    676a:	80 91 2f 05 	lds	r24, 0x052F
    676e:	90 91 30 05 	lds	r25, 0x0530
    6772:	bc 01       	movw	r22, r24
    6774:	6a 5a       	subi	r22, 0xAA	; 170
    6776:	71 09       	sbc	r23, r1
    6778:	fb 01       	movw	r30, r22
    677a:	e1 55       	subi	r30, 0x51	; 81
    677c:	f7 4e       	sbci	r31, 0xE7	; 231
    677e:	a4 90       	lpm	r10, Z
			do_menu_item(menu_temp, value_ptr + (menu_temp - FLIGHTSTART), 1, range, 0, text_link, false, 0);
    6780:	b1 2c       	mov	r11, r1
    6782:	66 0d       	add	r22, r6
    6784:	77 1d       	adc	r23, r7
    6786:	1f 92       	push	r1
    6788:	1f 92       	push	r1
    678a:	81 2c       	mov	r8, r1
    678c:	c1 2c       	mov	r12, r1
    678e:	e9 80       	ldd	r14, Y+1	; 0x01
    6790:	fa 80       	ldd	r15, Y+2	; 0x02
    6792:	0b 81       	ldd	r16, Y+3	; 0x03
    6794:	1c 81       	ldd	r17, Y+4	; 0x04
    6796:	2d 81       	ldd	r18, Y+5	; 0x05
    6798:	41 e0       	ldi	r20, 0x01	; 1
    679a:	0e 94 36 30 	call	0x606c	; 0x606c <do_menu_item>
    679e:	0f 90       	pop	r0
    67a0:	0f 90       	pop	r0
		}

		// Update limits when exiting
		if (button == ENTER)
    67a2:	80 91 e2 07 	lds	r24, 0x07E2
    67a6:	80 3e       	cpi	r24, 0xE0	; 224
    67a8:	09 f0       	breq	.+2      	; 0x67ac <menu_flight+0x102>
    67aa:	a5 cf       	rjmp	.-182    	; 0x66f6 <menu_flight+0x4c>
		{
			UpdateLimits();			 // Update I-term limits and triggers based on percentages
    67ac:	0e 94 52 37 	call	0x6ea4	; 0x6ea4 <UpdateLimits>
			Save_Config_to_EEPROM(); // Save value and return
    67b0:	0e 94 bc 16 	call	0x2d78	; 0x2d78 <Save_Config_to_EEPROM>
			Wait_BUTTON4();			 // Wait for user's finger off the button
    67b4:	0e 94 b1 34 	call	0x6962	; 0x6962 <Wait_BUTTON4>
    67b8:	9e cf       	rjmp	.-196    	; 0x66f6 <menu_flight+0x4c>
		}
	}
}
    67ba:	0f 90       	pop	r0
    67bc:	0f 90       	pop	r0
    67be:	0f 90       	pop	r0
    67c0:	0f 90       	pop	r0
    67c2:	0f 90       	pop	r0
    67c4:	df 91       	pop	r29
    67c6:	cf 91       	pop	r28
    67c8:	1f 91       	pop	r17
    67ca:	0f 91       	pop	r16
    67cc:	ff 90       	pop	r15
    67ce:	ef 90       	pop	r14
    67d0:	df 90       	pop	r13
    67d2:	cf 90       	pop	r12
    67d4:	bf 90       	pop	r11
    67d6:	af 90       	pop	r10
    67d8:	8f 90       	pop	r8
    67da:	7f 90       	pop	r7
    67dc:	6f 90       	pop	r6
    67de:	08 95       	ret

000067e0 <do_main_menu_item>:
	}
}

void do_main_menu_item(uint8_t menuitem)
{
	switch(menuitem) 
    67e0:	90 e0       	ldi	r25, 0x00	; 0
    67e2:	fc 01       	movw	r30, r24
    67e4:	ed 54       	subi	r30, 0x4D	; 77
    67e6:	f1 09       	sbc	r31, r1
    67e8:	e3 31       	cpi	r30, 0x13	; 19
    67ea:	f1 05       	cpc	r31, r1
    67ec:	70 f5       	brcc	.+92     	; 0x684a <do_main_menu_item+0x6a>
    67ee:	e7 5b       	subi	r30, 0xB7	; 183
    67f0:	ff 4f       	sbci	r31, 0xFF	; 255
    67f2:	0c 94 b4 49 	jmp	0x9368	; 0x9368 <__tablejump2__>
	{
		case MAINSTART:
			menu_rc_setup(2); 		// 1.General
    67f6:	82 e0       	ldi	r24, 0x02	; 2
    67f8:	01 c0       	rjmp	.+2      	; 0x67fc <do_main_menu_item+0x1c>
			break;
		case MAINSTART+1:
			menu_rc_setup(1); 		// 2.RX setup	
    67fa:	81 e0       	ldi	r24, 0x01	; 1
    67fc:	0c 94 46 36 	jmp	0x6c8c	; 0x6c8c <menu_rc_setup>
			break;
		case MAINSTART+2:
			Display_rcinput();		// 3.RX inputs
    6800:	0c 94 bc 11 	jmp	0x2378	; 0x2378 <Display_rcinput>
			break;
		case MAINSTART+3:
			Display_sticks(); 		// 4.Stick polarity	
    6804:	0c 94 7a 15 	jmp	0x2af4	; 0x2af4 <Display_sticks>
			break;
		case MAINSTART+4:
			Display_sensors();		// 5.Sensor calibration
    6808:	0c 94 bb 12 	jmp	0x2576	; 0x2576 <Display_sensors>
			break;
		case MAINSTART+5:
			Display_balance();		// 6.Level meter
    680c:	0c 94 2c 11 	jmp	0x2258	; 0x2258 <Display_balance>
			break;
		case MAINSTART+6:
			menu_flight(0);			// 7.Flight profile 1
    6810:	80 e0       	ldi	r24, 0x00	; 0
    6812:	01 c0       	rjmp	.+2      	; 0x6816 <do_main_menu_item+0x36>
			break;
		case MAINSTART+7:
			menu_flight(1); 		// 8.Flight profile 2
    6814:	81 e0       	ldi	r24, 0x01	; 1
    6816:	0c 94 55 33 	jmp	0x66aa	; 0x66aa <menu_flight>
			break;
		case MAINSTART+8:
			menu_mixer(0);			// 9.OUT1 Mixer
    681a:	80 e0       	ldi	r24, 0x00	; 0
    681c:	0d c0       	rjmp	.+26     	; 0x6838 <do_main_menu_item+0x58>
			break;
		case MAINSTART+9:
			menu_mixer(1);			// 10.OUT2 Mixer
    681e:	81 e0       	ldi	r24, 0x01	; 1
    6820:	0b c0       	rjmp	.+22     	; 0x6838 <do_main_menu_item+0x58>
			break;
		case MAINSTART+10:
			menu_mixer(2);			// 11.OUT3 Mixer
    6822:	82 e0       	ldi	r24, 0x02	; 2
    6824:	09 c0       	rjmp	.+18     	; 0x6838 <do_main_menu_item+0x58>
			break;
		case MAINSTART+11:
			menu_mixer(3);			// 12.OUT4 Mixer
    6826:	83 e0       	ldi	r24, 0x03	; 3
    6828:	07 c0       	rjmp	.+14     	; 0x6838 <do_main_menu_item+0x58>
			break;
		case MAINSTART+12:
			menu_mixer(4);			// 13.OUT5 Mixer
    682a:	84 e0       	ldi	r24, 0x04	; 4
    682c:	05 c0       	rjmp	.+10     	; 0x6838 <do_main_menu_item+0x58>
			break;
		case MAINSTART+13:
			menu_mixer(5);			// 14.OUT6 Mixer
    682e:	85 e0       	ldi	r24, 0x05	; 5
    6830:	03 c0       	rjmp	.+6      	; 0x6838 <do_main_menu_item+0x58>
			break;
		case MAINSTART+14:
			menu_mixer(6);			// 15.OUT7 Mixer
    6832:	86 e0       	ldi	r24, 0x06	; 6
    6834:	01 c0       	rjmp	.+2      	; 0x6838 <do_main_menu_item+0x58>
			break;
		case MAINSTART+15:
			menu_mixer(7);			// 16.OUT8 Mixer
    6836:	87 e0       	ldi	r24, 0x07	; 7
    6838:	0c 94 be 34 	jmp	0x697c	; 0x697c <menu_mixer>
			break;
		case MAINSTART+16:
			menu_servo_setup(1);	// 17.Servo direction
    683c:	81 e0       	ldi	r24, 0x01	; 1
    683e:	03 c0       	rjmp	.+6      	; 0x6846 <do_main_menu_item+0x66>
			break;
		case MAINSTART+17:
			menu_servo_setup(2); 	// 18.Neg. Servo trvl. (%)
    6840:	82 e0       	ldi	r24, 0x02	; 2
    6842:	01 c0       	rjmp	.+2      	; 0x6846 <do_main_menu_item+0x66>
			break;
		case MAINSTART+18:
			menu_servo_setup(3); 	// 19.Pos. Servo trvl. (%)
    6844:	83 e0       	ldi	r24, 0x03	; 3
    6846:	0c 94 59 35 	jmp	0x6ab2	; 0x6ab2 <menu_servo_setup>
    684a:	08 95       	ret

0000684c <Wait_BUTTON1>:
	} // Switch
}

void Wait_BUTTON1(void)
{
	while(BUTTON1 == 0)
    684c:	1f 99       	sbic	0x03, 7	; 3
    684e:	0a c0       	rjmp	.+20     	; 0x6864 <Wait_BUTTON1+0x18>
    6850:	2f e3       	ldi	r18, 0x3F	; 63
    6852:	8d e0       	ldi	r24, 0x0D	; 13
    6854:	93 e0       	ldi	r25, 0x03	; 3
    6856:	21 50       	subi	r18, 0x01	; 1
    6858:	80 40       	sbci	r24, 0x00	; 0
    685a:	90 40       	sbci	r25, 0x00	; 0
    685c:	e1 f7       	brne	.-8      	; 0x6856 <Wait_BUTTON1+0xa>
    685e:	00 c0       	rjmp	.+0      	; 0x6860 <Wait_BUTTON1+0x14>
    6860:	00 00       	nop
    6862:	f4 cf       	rjmp	.-24     	; 0x684c <Wait_BUTTON1>
	{
		_delay_ms(50);
	}
}
    6864:	08 95       	ret

00006866 <menu_main>:
uint16_t main_top = MAINSTART;
uint16_t sub_top = 0;
uint8_t menu_flag;

void menu_main(void)
{
    6866:	af 92       	push	r10
    6868:	bf 92       	push	r11
    686a:	cf 92       	push	r12
    686c:	df 92       	push	r13
    686e:	ef 92       	push	r14
    6870:	ff 92       	push	r15
    6872:	0f 93       	push	r16
    6874:	1f 93       	push	r17
    6876:	cf 93       	push	r28
    6878:	df 93       	push	r29
	static uint8_t main_cursor = LINE0;	// These are now static so as to remember the main menu position
	static uint16_t main_temp = 0;
	static uint8_t old_menu = 0;

	button = NONE;
    687a:	80 ef       	ldi	r24, 0xF0	; 240
    687c:	80 93 e2 07 	sts	0x07E2, r24

	// Wait until user's finger is off button 1
	Wait_BUTTON1();
    6880:	0e 94 26 34 	call	0x684c	; 0x684c <Wait_BUTTON1>

		// If main menu item has changed, reset sub-menu positions
		// and flag to sub-menus that positions need to be reset
		if (main_temp != old_menu)
		{
			cursor = LINE0;
    6884:	23 e0       	ldi	r18, 0x03	; 3
    6886:	b2 2e       	mov	r11, r18

		// If ENTER pressed, jump to menu 
		if (button == ENTER)
		{
			do_main_menu_item(main_temp);
			button = NONE;
    6888:	30 ef       	ldi	r19, 0xF0	; 240
    688a:	a3 2e       	mov	r10, r19
	button = NONE;

	// Wait until user's finger is off button 1
	Wait_BUTTON1();
	
	while(button != BACK)
    688c:	80 91 e2 07 	lds	r24, 0x07E2
    6890:	80 37       	cpi	r24, 0x70	; 112
    6892:	09 f4       	brne	.+2      	; 0x6896 <menu_main+0x30>
    6894:	5b c0       	rjmp	.+182    	; 0x694c <menu_main+0xe6>
	{
		// Clear buffer before each update
		clear_buffer(buffer);	
    6896:	80 e0       	ldi	r24, 0x00	; 0
    6898:	91 e0       	ldi	r25, 0x01	; 1
    689a:	0e 94 5d 21 	call	0x42ba	; 0x42ba <clear_buffer>

		// Print menu
		print_menu_frame(0);													// Frame
    689e:	80 e0       	ldi	r24, 0x00	; 0
    68a0:	0e 94 55 2f 	call	0x5eaa	; 0x5eaa <print_menu_frame>
		
		for (uint16_t i = 0; i < 4; i++)
    68a4:	c0 e0       	ldi	r28, 0x00	; 0
    68a6:	d0 e0       	ldi	r29, 0x00	; 0
    68a8:	fe 01       	movw	r30, r28
    68aa:	ef 5a       	subi	r30, 0xAF	; 175
    68ac:	f7 4e       	sbci	r31, 0xE7	; 231
		{
			LCD_Display_Text(main_top+i,(const unsigned char*)Verdana8,ITEMOFFSET,(uint8_t)pgm_read_byte(&lines[i]));	// Lines
    68ae:	24 91       	lpm	r18, Z
    68b0:	30 e0       	ldi	r19, 0x00	; 0
    68b2:	80 91 06 05 	lds	r24, 0x0506
    68b6:	90 91 07 05 	lds	r25, 0x0507
    68ba:	4a e0       	ldi	r20, 0x0A	; 10
    68bc:	50 e0       	ldi	r21, 0x00	; 0
    68be:	6f e1       	ldi	r22, 0x1F	; 31
    68c0:	7a e0       	ldi	r23, 0x0A	; 10
    68c2:	8c 0f       	add	r24, r28
    68c4:	9d 1f       	adc	r25, r29
    68c6:	0e 94 0a 23 	call	0x4614	; 0x4614 <LCD_Display_Text>
		clear_buffer(buffer);	

		// Print menu
		print_menu_frame(0);													// Frame
		
		for (uint16_t i = 0; i < 4; i++)
    68ca:	21 96       	adiw	r28, 0x01	; 1
    68cc:	c4 30       	cpi	r28, 0x04	; 4
    68ce:	d1 05       	cpc	r29, r1
    68d0:	59 f7       	brne	.-42     	; 0x68a8 <menu_main+0x42>
		{
			LCD_Display_Text(main_top+i,(const unsigned char*)Verdana8,ITEMOFFSET,(uint8_t)pgm_read_byte(&lines[i]));	// Lines
		}

		print_cursor(main_cursor);												// Cursor
    68d2:	80 91 05 05 	lds	r24, 0x0505
    68d6:	0e 94 a6 32 	call	0x654c	; 0x654c <print_cursor>
		write_buffer(buffer);
    68da:	80 e0       	ldi	r24, 0x00	; 0
    68dc:	91 e0       	ldi	r25, 0x01	; 1
    68de:	0e 94 2b 21 	call	0x4256	; 0x4256 <write_buffer>

		// Poll buttons when idle
		poll_buttons(true);
    68e2:	81 e0       	ldi	r24, 0x01	; 1
    68e4:	0e 94 01 30 	call	0x6002	; 0x6002 <poll_buttons>

		// Handle menu changes
		update_menu(MAINITEMS, MAINSTART, 0, button, &main_cursor, &main_top, &main_temp);
    68e8:	82 e3       	ldi	r24, 0x32	; 50
    68ea:	c8 2e       	mov	r12, r24
    68ec:	85 e0       	ldi	r24, 0x05	; 5
    68ee:	d8 2e       	mov	r13, r24
    68f0:	96 e0       	ldi	r25, 0x06	; 6
    68f2:	e9 2e       	mov	r14, r25
    68f4:	95 e0       	ldi	r25, 0x05	; 5
    68f6:	f9 2e       	mov	r15, r25
    68f8:	05 e0       	ldi	r16, 0x05	; 5
    68fa:	15 e0       	ldi	r17, 0x05	; 5
    68fc:	20 91 e2 07 	lds	r18, 0x07E2
    6900:	40 e0       	ldi	r20, 0x00	; 0
    6902:	6d e4       	ldi	r22, 0x4D	; 77
    6904:	83 e1       	ldi	r24, 0x13	; 19
    6906:	0e 94 e6 31 	call	0x63cc	; 0x63cc <update_menu>

		// If main menu item has changed, reset sub-menu positions
		// and flag to sub-menus that positions need to be reset
		if (main_temp != old_menu)
    690a:	80 91 32 05 	lds	r24, 0x0532
    690e:	90 91 33 05 	lds	r25, 0x0533
    6912:	20 91 31 05 	lds	r18, 0x0531
    6916:	30 e0       	ldi	r19, 0x00	; 0
    6918:	82 17       	cp	r24, r18
    691a:	93 07       	cpc	r25, r19
    691c:	59 f0       	breq	.+22     	; 0x6934 <menu_main+0xce>
		{
			cursor = LINE0;
    691e:	b0 92 04 05 	sts	0x0504, r11
			menu_temp = 0;
    6922:	10 92 30 05 	sts	0x0530, r1
    6926:	10 92 2f 05 	sts	0x052F, r1
			old_menu = main_temp;
    692a:	80 93 31 05 	sts	0x0531, r24
			menu_flag = 1;
    692e:	21 e0       	ldi	r18, 0x01	; 1
    6930:	20 93 e4 07 	sts	0x07E4, r18
		}

		// If ENTER pressed, jump to menu 
		if (button == ENTER)
    6934:	20 91 e2 07 	lds	r18, 0x07E2
    6938:	20 3e       	cpi	r18, 0xE0	; 224
    693a:	09 f0       	breq	.+2      	; 0x693e <menu_main+0xd8>
    693c:	a7 cf       	rjmp	.-178    	; 0x688c <menu_main+0x26>
		{
			do_main_menu_item(main_temp);
    693e:	0e 94 f0 33 	call	0x67e0	; 0x67e0 <do_main_menu_item>
			button = NONE;
    6942:	a0 92 e2 07 	sts	0x07E2, r10

			// Wait until user's finger is off button 1
			Wait_BUTTON1();
    6946:	0e 94 26 34 	call	0x684c	; 0x684c <Wait_BUTTON1>
    694a:	a0 cf       	rjmp	.-192    	; 0x688c <menu_main+0x26>
		}
	}
}
    694c:	df 91       	pop	r29
    694e:	cf 91       	pop	r28
    6950:	1f 91       	pop	r17
    6952:	0f 91       	pop	r16
    6954:	ff 90       	pop	r15
    6956:	ef 90       	pop	r14
    6958:	df 90       	pop	r13
    695a:	cf 90       	pop	r12
    695c:	bf 90       	pop	r11
    695e:	af 90       	pop	r10
    6960:	08 95       	ret

00006962 <Wait_BUTTON4>:
	}
}

void Wait_BUTTON4(void)
{
	while(BUTTON4 == 0)
    6962:	1c 99       	sbic	0x03, 4	; 3
    6964:	0a c0       	rjmp	.+20     	; 0x697a <Wait_BUTTON4+0x18>
    6966:	2f e3       	ldi	r18, 0x3F	; 63
    6968:	8d e0       	ldi	r24, 0x0D	; 13
    696a:	93 e0       	ldi	r25, 0x03	; 3
    696c:	21 50       	subi	r18, 0x01	; 1
    696e:	80 40       	sbci	r24, 0x00	; 0
    6970:	90 40       	sbci	r25, 0x00	; 0
    6972:	e1 f7       	brne	.-8      	; 0x696c <Wait_BUTTON4+0xa>
    6974:	00 c0       	rjmp	.+0      	; 0x6976 <Wait_BUTTON4+0x14>
    6976:	00 00       	nop
    6978:	f4 cf       	rjmp	.-24     	; 0x6962 <Wait_BUTTON4>
	{
		_delay_ms(50);
	}
    697a:	08 95       	ret

0000697c <menu_mixer>:
//************************************************************
// Main menu-specific setup
//************************************************************

void menu_mixer(uint8_t i)
{
    697c:	6f 92       	push	r6
    697e:	7f 92       	push	r7
    6980:	8f 92       	push	r8
    6982:	af 92       	push	r10
    6984:	bf 92       	push	r11
    6986:	cf 92       	push	r12
    6988:	df 92       	push	r13
    698a:	ef 92       	push	r14
    698c:	ff 92       	push	r15
    698e:	0f 93       	push	r16
    6990:	1f 93       	push	r17
    6992:	cf 93       	push	r28
    6994:	df 93       	push	r29
    6996:	00 d0       	rcall	.+0      	; 0x6998 <menu_mixer+0x1c>
    6998:	00 d0       	rcall	.+0      	; 0x699a <menu_mixer+0x1e>
    699a:	1f 92       	push	r1
    699c:	cd b7       	in	r28, 0x3d	; 61
    699e:	de b7       	in	r29, 0x3e	; 62
	int8_t *value_ptr;
	menu_range_t range;
	uint8_t text_link = 0;

	// If sub-menu item has changed, reset sub-menu positions
	if (menu_flag)
    69a0:	90 91 e4 07 	lds	r25, 0x07E4
    69a4:	99 23       	and	r25, r25
    69a6:	41 f0       	breq	.+16     	; 0x69b8 <menu_mixer+0x3c>
	{
		sub_top = MIXERSTART;
    69a8:	2e eb       	ldi	r18, 0xBE	; 190
    69aa:	30 e0       	ldi	r19, 0x00	; 0
    69ac:	30 93 35 05 	sts	0x0535, r19
    69b0:	20 93 34 05 	sts	0x0534, r18
		menu_flag = 0;
    69b4:	10 92 e4 07 	sts	0x07E4, r1
	}

	while(button != BACK)
	{
		value_ptr = &Config.Channel[i].Motor_marker;
    69b8:	96 e2       	ldi	r25, 0x26	; 38
    69ba:	89 9f       	mul	r24, r25
    69bc:	30 01       	movw	r6, r0
    69be:	11 24       	eor	r1, r1
    69c0:	c3 01       	movw	r24, r6
    69c2:	81 5c       	subi	r24, 0xC1	; 193
    69c4:	99 4f       	sbci	r25, 0xF9	; 249
    69c6:	3c 01       	movw	r6, r24
	{
		sub_top = MIXERSTART;
		menu_flag = 0;
	}

	while(button != BACK)
    69c8:	80 91 e2 07 	lds	r24, 0x07E2
    69cc:	80 37       	cpi	r24, 0x70	; 112
    69ce:	09 f4       	brne	.+2      	; 0x69d2 <menu_mixer+0x56>
    69d0:	5d c0       	rjmp	.+186    	; 0x6a8c <menu_mixer+0x110>
	{
		value_ptr = &Config.Channel[i].Motor_marker;

		// Print menu
		print_menu_items(sub_top, MIXERSTART, value_ptr, (const unsigned char*)mixer_menu_ranges, 0, MIXOFFSET, (const unsigned char*)MixerMenuText, cursor);
    69d2:	a0 90 04 05 	lds	r10, 0x0504
    69d6:	8b e6       	ldi	r24, 0x6B	; 107
    69d8:	c8 2e       	mov	r12, r24
    69da:	89 e1       	ldi	r24, 0x19	; 25
    69dc:	d8 2e       	mov	r13, r24
    69de:	99 e5       	ldi	r25, 0x59	; 89
    69e0:	e9 2e       	mov	r14, r25
    69e2:	00 e0       	ldi	r16, 0x00	; 0
    69e4:	21 ec       	ldi	r18, 0xC1	; 193
    69e6:	38 e1       	ldi	r19, 0x18	; 24
    69e8:	a3 01       	movw	r20, r6
    69ea:	6e eb       	ldi	r22, 0xBE	; 190
    69ec:	70 e0       	ldi	r23, 0x00	; 0
    69ee:	80 91 34 05 	lds	r24, 0x0534
    69f2:	90 91 35 05 	lds	r25, 0x0535
    69f6:	0e 94 b0 32 	call	0x6560	; 0x6560 <print_menu_items>

		// Handle menu changes
		update_menu(MIXERITEMS, MIXERSTART, 0, button, &cursor, &sub_top, &menu_temp);
    69fa:	2f e2       	ldi	r18, 0x2F	; 47
    69fc:	c2 2e       	mov	r12, r18
    69fe:	25 e0       	ldi	r18, 0x05	; 5
    6a00:	d2 2e       	mov	r13, r18
    6a02:	34 e3       	ldi	r19, 0x34	; 52
    6a04:	e3 2e       	mov	r14, r19
    6a06:	35 e0       	ldi	r19, 0x05	; 5
    6a08:	f3 2e       	mov	r15, r19
    6a0a:	04 e0       	ldi	r16, 0x04	; 4
    6a0c:	15 e0       	ldi	r17, 0x05	; 5
    6a0e:	20 91 e2 07 	lds	r18, 0x07E2
    6a12:	40 e0       	ldi	r20, 0x00	; 0
    6a14:	6e eb       	ldi	r22, 0xBE	; 190
    6a16:	82 e2       	ldi	r24, 0x22	; 34
    6a18:	0e 94 e6 31 	call	0x63cc	; 0x63cc <update_menu>
		range = get_menu_range ((const unsigned char*)mixer_menu_ranges, menu_temp - MIXERSTART);
    6a1c:	60 91 2f 05 	lds	r22, 0x052F
    6a20:	6e 5b       	subi	r22, 0xBE	; 190
    6a22:	81 ec       	ldi	r24, 0xC1	; 193
    6a24:	98 e1       	ldi	r25, 0x18	; 24
    6a26:	0e 94 aa 2f 	call	0x5f54	; 0x5f54 <get_menu_range>
    6a2a:	29 83       	std	Y+1, r18	; 0x01
    6a2c:	3a 83       	std	Y+2, r19	; 0x02
    6a2e:	4b 83       	std	Y+3, r20	; 0x03
    6a30:	5c 83       	std	Y+4, r21	; 0x04
    6a32:	6d 83       	std	Y+5, r22	; 0x05

		if (button == ENTER)
    6a34:	80 91 e2 07 	lds	r24, 0x07E2
    6a38:	80 3e       	cpi	r24, 0xE0	; 224
    6a3a:	e1 f4       	brne	.+56     	; 0x6a74 <menu_mixer+0xf8>
		{
			text_link = pgm_read_byte(&MixerMenuText[menu_temp - MIXERSTART]);
    6a3c:	80 91 2f 05 	lds	r24, 0x052F
    6a40:	90 91 30 05 	lds	r25, 0x0530
    6a44:	bc 01       	movw	r22, r24
    6a46:	6e 5b       	subi	r22, 0xBE	; 190
    6a48:	71 09       	sbc	r23, r1
    6a4a:	fb 01       	movw	r30, r22
    6a4c:	e5 59       	subi	r30, 0x95	; 149
    6a4e:	f6 4e       	sbci	r31, 0xE6	; 230
    6a50:	a4 90       	lpm	r10, Z
			do_menu_item(menu_temp, value_ptr + (menu_temp - MIXERSTART), 1, range, 0, text_link, false, 0);
    6a52:	b1 2c       	mov	r11, r1
    6a54:	66 0d       	add	r22, r6
    6a56:	77 1d       	adc	r23, r7
    6a58:	1f 92       	push	r1
    6a5a:	1f 92       	push	r1
    6a5c:	81 2c       	mov	r8, r1
    6a5e:	c1 2c       	mov	r12, r1
    6a60:	e9 80       	ldd	r14, Y+1	; 0x01
    6a62:	fa 80       	ldd	r15, Y+2	; 0x02
    6a64:	0b 81       	ldd	r16, Y+3	; 0x03
    6a66:	1c 81       	ldd	r17, Y+4	; 0x04
    6a68:	2d 81       	ldd	r18, Y+5	; 0x05
    6a6a:	41 e0       	ldi	r20, 0x01	; 1
    6a6c:	0e 94 36 30 	call	0x606c	; 0x606c <do_menu_item>
    6a70:	0f 90       	pop	r0
    6a72:	0f 90       	pop	r0
		}

		// Update limits when exiting
		if (button == ENTER)
    6a74:	80 91 e2 07 	lds	r24, 0x07E2
    6a78:	80 3e       	cpi	r24, 0xE0	; 224
    6a7a:	09 f0       	breq	.+2      	; 0x6a7e <menu_mixer+0x102>
    6a7c:	a5 cf       	rjmp	.-182    	; 0x69c8 <menu_mixer+0x4c>
		{
			UpdateLimits();			 // Update travel limits based on percentages
    6a7e:	0e 94 52 37 	call	0x6ea4	; 0x6ea4 <UpdateLimits>
			Save_Config_to_EEPROM(); // Save value and return
    6a82:	0e 94 bc 16 	call	0x2d78	; 0x2d78 <Save_Config_to_EEPROM>
			Wait_BUTTON4();			 // Wait for user's finger off the button
    6a86:	0e 94 b1 34 	call	0x6962	; 0x6962 <Wait_BUTTON4>
    6a8a:	9e cf       	rjmp	.-196    	; 0x69c8 <menu_mixer+0x4c>
		}
	}
}
    6a8c:	0f 90       	pop	r0
    6a8e:	0f 90       	pop	r0
    6a90:	0f 90       	pop	r0
    6a92:	0f 90       	pop	r0
    6a94:	0f 90       	pop	r0
    6a96:	df 91       	pop	r29
    6a98:	cf 91       	pop	r28
    6a9a:	1f 91       	pop	r17
    6a9c:	0f 91       	pop	r16
    6a9e:	ff 90       	pop	r15
    6aa0:	ef 90       	pop	r14
    6aa2:	df 90       	pop	r13
    6aa4:	cf 90       	pop	r12
    6aa6:	bf 90       	pop	r11
    6aa8:	af 90       	pop	r10
    6aaa:	8f 90       	pop	r8
    6aac:	7f 90       	pop	r7
    6aae:	6f 90       	pop	r6
    6ab0:	08 95       	ret

00006ab2 <menu_servo_setup>:
//************************************************************
// Main menu-specific setup
//************************************************************

void menu_servo_setup(uint8_t section)
{
    6ab2:	2f 92       	push	r2
    6ab4:	3f 92       	push	r3
    6ab6:	4f 92       	push	r4
    6ab8:	5f 92       	push	r5
    6aba:	6f 92       	push	r6
    6abc:	7f 92       	push	r7
    6abe:	8f 92       	push	r8
    6ac0:	9f 92       	push	r9
    6ac2:	af 92       	push	r10
    6ac4:	bf 92       	push	r11
    6ac6:	cf 92       	push	r12
    6ac8:	df 92       	push	r13
    6aca:	ef 92       	push	r14
    6acc:	ff 92       	push	r15
    6ace:	0f 93       	push	r16
    6ad0:	1f 93       	push	r17
    6ad2:	cf 93       	push	r28
    6ad4:	df 93       	push	r29
    6ad6:	cd b7       	in	r28, 0x3d	; 61
    6ad8:	de b7       	in	r29, 0x3e	; 62
    6ada:	28 97       	sbiw	r28, 0x08	; 8
    6adc:	0f b6       	in	r0, 0x3f	; 63
    6ade:	f8 94       	cli
    6ae0:	de bf       	out	0x3e, r29	; 62
    6ae2:	0f be       	out	0x3f, r0	; 63
    6ae4:	cd bf       	out	0x3d, r28	; 61
    6ae6:	98 2e       	mov	r9, r24
	uint8_t i = 0;
	bool	servo_enable = false;
	bool	zero_setting = false;

	// If submenu item has changed, reset submenu positions
	if (menu_flag)
    6ae8:	80 91 e4 07 	lds	r24, 0x07E4
    6aec:	88 23       	and	r24, r24
    6aee:	41 f0       	breq	.+16     	; 0x6b00 <menu_servo_setup+0x4e>
	{
		sub_top = SERVOSTART;
    6af0:	86 ee       	ldi	r24, 0xE6	; 230
    6af2:	90 e0       	ldi	r25, 0x00	; 0
    6af4:	90 93 35 05 	sts	0x0535, r25
    6af8:	80 93 34 05 	sts	0x0534, r24
		menu_flag = 0;
    6afc:	10 92 e4 07 	sts	0x07E4, r1
			}

			// Do not allow servo enable for throttle if in CPPM mode
			if ((Config.Channel[menu_temp - SERVOSTART].P1_source_a == THROTTLE) && (Config.RxMode == CPPM_MODE))
			{
				servo_enable = false;
    6b00:	1e 82       	std	Y+6, r1	; 0x06
    6b02:	5b e6       	ldi	r21, 0x6B	; 107
    6b04:	65 2e       	mov	r6, r21
    6b06:	57 e0       	ldi	r21, 0x07	; 7
    6b08:	75 2e       	mov	r7, r21
					break;
			}
		}

		// Print menu
		print_menu_items(sub_top, SERVOSTART, value_ptr, (const unsigned char*)servo_menu_ranges[section - 1], 1, SERVOOFFSET, (const unsigned char*)ServoMenuText[section - 1], cursor);
    6b0a:	29 2c       	mov	r2, r9
    6b0c:	31 2c       	mov	r3, r1
    6b0e:	41 e0       	ldi	r20, 0x01	; 1
    6b10:	24 1a       	sub	r2, r20
    6b12:	31 08       	sbc	r3, r1
    6b14:	85 e0       	ldi	r24, 0x05	; 5
    6b16:	82 9d       	mul	r24, r2
    6b18:	20 01       	movw	r4, r0
    6b1a:	83 9d       	mul	r24, r3
    6b1c:	50 0c       	add	r5, r0
    6b1e:	11 24       	eor	r1, r1
    6b20:	c2 01       	movw	r24, r4
    6b22:	83 57       	subi	r24, 0x73	; 115
    6b24:	96 4e       	sbci	r25, 0xE6	; 230
    6b26:	2c 01       	movw	r4, r24
    6b28:	63 e0       	ldi	r22, 0x03	; 3
    6b2a:	22 0c       	add	r2, r2
    6b2c:	33 1c       	adc	r3, r3
    6b2e:	6a 95       	dec	r22
    6b30:	e1 f7       	brne	.-8      	; 0x6b2a <menu_servo_setup+0x78>
    6b32:	d1 01       	movw	r26, r2
    6b34:	a4 56       	subi	r26, 0x64	; 100
    6b36:	b6 4e       	sbci	r27, 0xE6	; 230
    6b38:	b8 87       	std	Y+8, r27	; 0x08
    6b3a:	af 83       	std	Y+7, r26	; 0x07
		menu_flag = 0;
	}

	// Get menu offsets
	// 1 = Reverse, 2 = Min, 3 = Max
	while(button != BACK)
    6b3c:	80 91 e2 07 	lds	r24, 0x07E2
    6b40:	80 37       	cpi	r24, 0x70	; 112
    6b42:	09 f4       	brne	.+2      	; 0x6b46 <menu_servo_setup+0x94>
    6b44:	8a c0       	rjmp	.+276    	; 0x6c5a <menu_servo_setup+0x1a8>
    6b46:	88 e0       	ldi	r24, 0x08	; 8
    6b48:	81 2c       	mov	r8, r1
	{
		// Load values from eeprom
		for (i = 0; i < SERVOITEMS; i++)
		{
			switch(section)
    6b4a:	b2 e0       	ldi	r27, 0x02	; 2
    6b4c:	9b 16       	cp	r9, r27
    6b4e:	61 f0       	breq	.+24     	; 0x6b68 <menu_servo_setup+0xb6>
    6b50:	43 e0       	ldi	r20, 0x03	; 3
    6b52:	94 12       	cpse	r9, r20
    6b54:	11 c0       	rjmp	.+34     	; 0x6b78 <menu_servo_setup+0xc6>
					zero_setting = true;
					break;
				case 3:
					value_ptr = &Config.max_travel[0];
					servo_enable = true;
					zero_setting = true;
    6b56:	a1 e0       	ldi	r26, 0x01	; 1
    6b58:	ae 83       	std	Y+6, r26	; 0x06
					servo_enable = true;
					zero_setting = true;
					break;
				case 3:
					value_ptr = &Config.max_travel[0];
					servo_enable = true;
    6b5a:	88 24       	eor	r8, r8
    6b5c:	83 94       	inc	r8
					value_ptr = &Config.min_travel[0];
					servo_enable = true;
					zero_setting = true;
					break;
				case 3:
					value_ptr = &Config.max_travel[0];
    6b5e:	3b e7       	ldi	r19, 0x7B	; 123
    6b60:	63 2e       	mov	r6, r19
    6b62:	37 e0       	ldi	r19, 0x07	; 7
    6b64:	73 2e       	mov	r7, r19
					servo_enable = true;
					zero_setting = true;
					break;
    6b66:	08 c0       	rjmp	.+16     	; 0x6b78 <menu_servo_setup+0xc6>
				case 1:
					break;
				case 2:
					value_ptr = &Config.min_travel[0];
					servo_enable = true;
					zero_setting = true;
    6b68:	91 e0       	ldi	r25, 0x01	; 1
    6b6a:	9e 83       	std	Y+6, r25	; 0x06
			{
				case 1:
					break;
				case 2:
					value_ptr = &Config.min_travel[0];
					servo_enable = true;
    6b6c:	88 24       	eor	r8, r8
    6b6e:	83 94       	inc	r8
			switch(section)
			{
				case 1:
					break;
				case 2:
					value_ptr = &Config.min_travel[0];
    6b70:	43 e7       	ldi	r20, 0x73	; 115
    6b72:	64 2e       	mov	r6, r20
    6b74:	47 e0       	ldi	r20, 0x07	; 7
    6b76:	74 2e       	mov	r7, r20
    6b78:	81 50       	subi	r24, 0x01	; 1
	// Get menu offsets
	// 1 = Reverse, 2 = Min, 3 = Max
	while(button != BACK)
	{
		// Load values from eeprom
		for (i = 0; i < SERVOITEMS; i++)
    6b7a:	39 f7       	brne	.-50     	; 0x6b4a <menu_servo_setup+0x98>
					break;
			}
		}

		// Print menu
		print_menu_items(sub_top, SERVOSTART, value_ptr, (const unsigned char*)servo_menu_ranges[section - 1], 1, SERVOOFFSET, (const unsigned char*)ServoMenuText[section - 1], cursor);
    6b7c:	a0 90 04 05 	lds	r10, 0x0504
    6b80:	cf 80       	ldd	r12, Y+7	; 0x07
    6b82:	d8 84       	ldd	r13, Y+8	; 0x08
    6b84:	80 e5       	ldi	r24, 0x50	; 80
    6b86:	e8 2e       	mov	r14, r24
    6b88:	01 e0       	ldi	r16, 0x01	; 1
    6b8a:	92 01       	movw	r18, r4
    6b8c:	a3 01       	movw	r20, r6
    6b8e:	66 ee       	ldi	r22, 0xE6	; 230
    6b90:	70 e0       	ldi	r23, 0x00	; 0
    6b92:	80 91 34 05 	lds	r24, 0x0534
    6b96:	90 91 35 05 	lds	r25, 0x0535
    6b9a:	0e 94 b0 32 	call	0x6560	; 0x6560 <print_menu_items>

		// Handle menu changes
		update_menu(SERVOITEMS, SERVOSTART, 0, button, &cursor, &sub_top, &menu_temp);
    6b9e:	9f e2       	ldi	r25, 0x2F	; 47
    6ba0:	c9 2e       	mov	r12, r25
    6ba2:	95 e0       	ldi	r25, 0x05	; 5
    6ba4:	d9 2e       	mov	r13, r25
    6ba6:	24 e3       	ldi	r18, 0x34	; 52
    6ba8:	e2 2e       	mov	r14, r18
    6baa:	25 e0       	ldi	r18, 0x05	; 5
    6bac:	f2 2e       	mov	r15, r18
    6bae:	04 e0       	ldi	r16, 0x04	; 4
    6bb0:	15 e0       	ldi	r17, 0x05	; 5
    6bb2:	20 91 e2 07 	lds	r18, 0x07E2
    6bb6:	40 e0       	ldi	r20, 0x00	; 0
    6bb8:	66 ee       	ldi	r22, 0xE6	; 230
    6bba:	88 e0       	ldi	r24, 0x08	; 8
    6bbc:	0e 94 e6 31 	call	0x63cc	; 0x63cc <update_menu>
		range = get_menu_range ((const unsigned char*)servo_menu_ranges[section - 1], 0);
    6bc0:	60 e0       	ldi	r22, 0x00	; 0
    6bc2:	c2 01       	movw	r24, r4
    6bc4:	0e 94 aa 2f 	call	0x5f54	; 0x5f54 <get_menu_range>
    6bc8:	29 83       	std	Y+1, r18	; 0x01
    6bca:	3a 83       	std	Y+2, r19	; 0x02
    6bcc:	4b 83       	std	Y+3, r20	; 0x03
    6bce:	5c 83       	std	Y+4, r21	; 0x04
    6bd0:	6d 83       	std	Y+5, r22	; 0x05

		if (button == ENTER)
    6bd2:	80 91 e2 07 	lds	r24, 0x07E2
    6bd6:	80 3e       	cpi	r24, 0xE0	; 224
    6bd8:	a1 f5       	brne	.+104    	; 0x6c42 <menu_servo_setup+0x190>
		{
			text_link = pgm_read_byte(&ServoMenuText[section - 1][menu_temp - SERVOSTART]);
    6bda:	80 91 2f 05 	lds	r24, 0x052F
    6bde:	90 91 30 05 	lds	r25, 0x0530
    6be2:	9c 01       	movw	r18, r24
    6be4:	26 5e       	subi	r18, 0xE6	; 230
    6be6:	31 09       	sbc	r19, r1
    6be8:	f9 01       	movw	r30, r18
    6bea:	e2 0d       	add	r30, r2
    6bec:	f3 1d       	adc	r31, r3
    6bee:	e4 56       	subi	r30, 0x64	; 100
    6bf0:	f6 4e       	sbci	r31, 0xE6	; 230
    6bf2:	e4 91       	lpm	r30, Z
    6bf4:	b3 01       	movw	r22, r6
    6bf6:	62 0f       	add	r22, r18
    6bf8:	73 1f       	adc	r23, r19

			// Zero limits if adjusting
			if (zero_setting)
    6bfa:	be 81       	ldd	r27, Y+6	; 0x06
    6bfc:	bb 23       	and	r27, r27
    6bfe:	11 f0       	breq	.+4      	; 0x6c04 <menu_servo_setup+0x152>
			{
				value_ptr[menu_temp - SERVOSTART] = 0;
    6c00:	db 01       	movw	r26, r22
    6c02:	1c 92       	st	X, r1
			}

			// Do not allow servo enable for throttle if in CPPM mode
			if ((Config.Channel[menu_temp - SERVOSTART].P1_source_a == THROTTLE) && (Config.RxMode == CPPM_MODE))
    6c04:	46 e2       	ldi	r20, 0x26	; 38
    6c06:	42 9f       	mul	r20, r18
    6c08:	d0 01       	movw	r26, r0
    6c0a:	43 9f       	mul	r20, r19
    6c0c:	b0 0d       	add	r27, r0
    6c0e:	11 24       	eor	r1, r1
    6c10:	a7 5a       	subi	r26, 0xA7	; 167
    6c12:	b9 4f       	sbci	r27, 0xF9	; 249
    6c14:	4c 91       	ld	r20, X
    6c16:	41 11       	cpse	r20, r1
    6c18:	05 c0       	rjmp	.+10     	; 0x6c24 <menu_servo_setup+0x172>
    6c1a:	40 91 d2 05 	lds	r20, 0x05D2
    6c1e:	41 11       	cpse	r20, r1
    6c20:	01 c0       	rjmp	.+2      	; 0x6c24 <menu_servo_setup+0x172>
			{
				servo_enable = false;
    6c22:	81 2c       	mov	r8, r1
			}

			do_menu_item(menu_temp, value_ptr + (menu_temp - SERVOSTART), 1, range, 0, text_link, servo_enable, (menu_temp - SERVOSTART));
    6c24:	ae 2e       	mov	r10, r30
    6c26:	b1 2c       	mov	r11, r1
    6c28:	3f 93       	push	r19
    6c2a:	2f 93       	push	r18
    6c2c:	c1 2c       	mov	r12, r1
    6c2e:	e9 80       	ldd	r14, Y+1	; 0x01
    6c30:	fa 80       	ldd	r15, Y+2	; 0x02
    6c32:	0b 81       	ldd	r16, Y+3	; 0x03
    6c34:	1c 81       	ldd	r17, Y+4	; 0x04
    6c36:	2d 81       	ldd	r18, Y+5	; 0x05
    6c38:	41 e0       	ldi	r20, 0x01	; 1
    6c3a:	0e 94 36 30 	call	0x606c	; 0x606c <do_menu_item>
    6c3e:	0f 90       	pop	r0
    6c40:	0f 90       	pop	r0
		}

		// Disable servos
		servo_enable = false;

		if (button == ENTER)
    6c42:	80 91 e2 07 	lds	r24, 0x07E2
    6c46:	80 3e       	cpi	r24, 0xE0	; 224
    6c48:	09 f0       	breq	.+2      	; 0x6c4c <menu_servo_setup+0x19a>
    6c4a:	78 cf       	rjmp	.-272    	; 0x6b3c <menu_servo_setup+0x8a>
		{
			UpdateLimits();				// Update actual servo trims
    6c4c:	0e 94 52 37 	call	0x6ea4	; 0x6ea4 <UpdateLimits>
			Save_Config_to_EEPROM();	// Save value and return
    6c50:	0e 94 bc 16 	call	0x2d78	; 0x2d78 <Save_Config_to_EEPROM>
			Wait_BUTTON4();				// Wait for user's finger off the button
    6c54:	0e 94 b1 34 	call	0x6962	; 0x6962 <Wait_BUTTON4>
    6c58:	71 cf       	rjmp	.-286    	; 0x6b3c <menu_servo_setup+0x8a>
		}
	}
}
    6c5a:	28 96       	adiw	r28, 0x08	; 8
    6c5c:	0f b6       	in	r0, 0x3f	; 63
    6c5e:	f8 94       	cli
    6c60:	de bf       	out	0x3e, r29	; 62
    6c62:	0f be       	out	0x3f, r0	; 63
    6c64:	cd bf       	out	0x3d, r28	; 61
    6c66:	df 91       	pop	r29
    6c68:	cf 91       	pop	r28
    6c6a:	1f 91       	pop	r17
    6c6c:	0f 91       	pop	r16
    6c6e:	ff 90       	pop	r15
    6c70:	ef 90       	pop	r14
    6c72:	df 90       	pop	r13
    6c74:	cf 90       	pop	r12
    6c76:	bf 90       	pop	r11
    6c78:	af 90       	pop	r10
    6c7a:	9f 90       	pop	r9
    6c7c:	8f 90       	pop	r8
    6c7e:	7f 90       	pop	r7
    6c80:	6f 90       	pop	r6
    6c82:	5f 90       	pop	r5
    6c84:	4f 90       	pop	r4
    6c86:	3f 90       	pop	r3
    6c88:	2f 90       	pop	r2
    6c8a:	08 95       	ret

00006c8c <menu_rc_setup>:
//************************************************************
// Main menu-specific setup
//************************************************************

void menu_rc_setup(uint8_t section)
{
    6c8c:	2f 92       	push	r2
    6c8e:	3f 92       	push	r3
    6c90:	4f 92       	push	r4
    6c92:	5f 92       	push	r5
    6c94:	6f 92       	push	r6
    6c96:	7f 92       	push	r7
    6c98:	8f 92       	push	r8
    6c9a:	9f 92       	push	r9
    6c9c:	af 92       	push	r10
    6c9e:	bf 92       	push	r11
    6ca0:	cf 92       	push	r12
    6ca2:	df 92       	push	r13
    6ca4:	ef 92       	push	r14
    6ca6:	ff 92       	push	r15
    6ca8:	0f 93       	push	r16
    6caa:	1f 93       	push	r17
    6cac:	cf 93       	push	r28
    6cae:	df 93       	push	r29
    6cb0:	cd b7       	in	r28, 0x3d	; 61
    6cb2:	de b7       	in	r29, 0x3e	; 62
    6cb4:	2a 97       	sbiw	r28, 0x0a	; 10
    6cb6:	0f b6       	in	r0, 0x3f	; 63
    6cb8:	f8 94       	cli
    6cba:	de bf       	out	0x3e, r29	; 62
    6cbc:	0f be       	out	0x3f, r0	; 63
    6cbe:	cd bf       	out	0x3d, r28	; 61
    6cc0:	88 87       	std	Y+8, r24	; 0x08
	uint8_t i;
	uint8_t offset = 0;			// Index into channel structure
	uint8_t	items= RCITEMS;		// Items in group
	
	// If submenu item has changed, reset submenu positions
	if (menu_flag)
    6cc2:	80 91 e4 07 	lds	r24, 0x07E4
    6cc6:	88 23       	and	r24, r24
    6cc8:	41 f0       	breq	.+16     	; 0x6cda <menu_rc_setup+0x4e>
	{
		sub_top = RCSTART;
    6cca:	85 e9       	ldi	r24, 0x95	; 149
    6ccc:	90 e0       	ldi	r25, 0x00	; 0
    6cce:	90 93 35 05 	sts	0x0535, r25
    6cd2:	80 93 34 05 	sts	0x0534, r24
		menu_flag = 0;
    6cd6:	10 92 e4 07 	sts	0x07E4, r1
			writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_CONFIG, (6 - Config.MPU6050_LPF));

			// Update channel sequence
			for (i = 0; i < MAX_RC_CHANNELS; i++)
			{
				if (Config.TxSeq == FUTABASEQ)
    6cda:	27 e0       	ldi	r18, 0x07	; 7
    6cdc:	2f 83       	std	Y+7, r18	; 0x07
    6cde:	1e 82       	std	Y+6, r1	; 0x06
    6ce0:	62 ed       	ldi	r22, 0xD2	; 210
    6ce2:	46 2e       	mov	r4, r22
    6ce4:	65 e0       	ldi	r22, 0x05	; 5
    6ce6:	56 2e       	mov	r5, r22
			default:
				break;
		}

		// Print menu
		print_menu_items(sub_top + offset, RCSTART + offset, value_ptr, (const unsigned char*)rc_menu_ranges[section - 1], 0, RCOFFSET, (const unsigned char*)RCMenuText[section - 1], cursor);
    6ce8:	38 85       	ldd	r19, Y+8	; 0x08
    6cea:	83 2f       	mov	r24, r19
    6cec:	90 e0       	ldi	r25, 0x00	; 0
    6cee:	01 97       	sbiw	r24, 0x01	; 1
    6cf0:	2d e2       	ldi	r18, 0x2D	; 45
    6cf2:	28 9f       	mul	r18, r24
    6cf4:	30 01       	movw	r6, r0
    6cf6:	29 9f       	mul	r18, r25
    6cf8:	70 0c       	add	r7, r0
    6cfa:	11 24       	eor	r1, r1
    6cfc:	93 01       	movw	r18, r6
    6cfe:	2c 54       	subi	r18, 0x4C	; 76
    6d00:	36 4e       	sbci	r19, 0xE6	; 230
    6d02:	39 01       	movw	r6, r18
    6d04:	29 e0       	ldi	r18, 0x09	; 9
    6d06:	28 9f       	mul	r18, r24
    6d08:	10 01       	movw	r2, r0
    6d0a:	29 9f       	mul	r18, r25
    6d0c:	30 0c       	add	r3, r0
    6d0e:	11 24       	eor	r1, r1
    6d10:	c1 01       	movw	r24, r2
    6d12:	82 5f       	subi	r24, 0xF2	; 242
    6d14:	95 4e       	sbci	r25, 0xE5	; 229
    6d16:	9a 87       	std	Y+10, r25	; 0x0a
    6d18:	89 87       	std	Y+9, r24	; 0x09
	{
		sub_top = RCSTART;
		menu_flag = 0;
	}

	while(button != BACK)
    6d1a:	80 91 e2 07 	lds	r24, 0x07E2
    6d1e:	80 37       	cpi	r24, 0x70	; 112
    6d20:	09 f4       	brne	.+2      	; 0x6d24 <menu_rc_setup+0x98>
    6d22:	a7 c0       	rjmp	.+334    	; 0x6e72 <menu_rc_setup+0x1e6>
	{
		// Get menu offsets and load values from eeprom
		// 1 = RC, 2 = General
		switch(section)
    6d24:	98 85       	ldd	r25, Y+8	; 0x08
    6d26:	92 30       	cpi	r25, 0x02	; 2
    6d28:	41 f4       	brne	.+16     	; 0x6d3a <menu_rc_setup+0xae>
		{
			case 1:				// RC setup menu
				break;
			case 2:				// General menu
				offset = RCITEMSOFFSET;
				items = GENERALITEMS;
    6d2a:	29 e0       	ldi	r18, 0x09	; 9
    6d2c:	2f 83       	std	Y+7, r18	; 0x07
		switch(section)
		{
			case 1:				// RC setup menu
				break;
			case 2:				// General menu
				offset = RCITEMSOFFSET;
    6d2e:	39 e0       	ldi	r19, 0x09	; 9
    6d30:	3e 83       	std	Y+6, r19	; 0x06
				items = GENERALITEMS;
				value_ptr = &Config.Orientation;
    6d32:	51 e3       	ldi	r21, 0x31	; 49
    6d34:	45 2e       	mov	r4, r21
    6d36:	56 e0       	ldi	r21, 0x06	; 6
    6d38:	55 2e       	mov	r5, r21
			default:
				break;
		}

		// Print menu
		print_menu_items(sub_top + offset, RCSTART + offset, value_ptr, (const unsigned char*)rc_menu_ranges[section - 1], 0, RCOFFSET, (const unsigned char*)RCMenuText[section - 1], cursor);
    6d3a:	8e 81       	ldd	r24, Y+6	; 0x06
    6d3c:	88 2e       	mov	r8, r24
    6d3e:	91 2c       	mov	r9, r1
    6d40:	b4 01       	movw	r22, r8
    6d42:	6b 56       	subi	r22, 0x6B	; 107
    6d44:	7f 4f       	sbci	r23, 0xFF	; 255
    6d46:	80 91 34 05 	lds	r24, 0x0534
    6d4a:	90 91 35 05 	lds	r25, 0x0535
    6d4e:	a0 90 04 05 	lds	r10, 0x0504
    6d52:	c9 84       	ldd	r12, Y+9	; 0x09
    6d54:	da 84       	ldd	r13, Y+10	; 0x0a
    6d56:	2f e4       	ldi	r18, 0x4F	; 79
    6d58:	e2 2e       	mov	r14, r18
    6d5a:	00 e0       	ldi	r16, 0x00	; 0
    6d5c:	93 01       	movw	r18, r6
    6d5e:	a2 01       	movw	r20, r4
    6d60:	88 0d       	add	r24, r8
    6d62:	99 1d       	adc	r25, r9
    6d64:	0e 94 b0 32 	call	0x6560	; 0x6560 <print_menu_items>

		// Handle menu changes
		update_menu(items, RCSTART, offset, button, &cursor, &sub_top, &menu_temp);
    6d68:	3f e2       	ldi	r19, 0x2F	; 47
    6d6a:	c3 2e       	mov	r12, r19
    6d6c:	35 e0       	ldi	r19, 0x05	; 5
    6d6e:	d3 2e       	mov	r13, r19
    6d70:	44 e3       	ldi	r20, 0x34	; 52
    6d72:	e4 2e       	mov	r14, r20
    6d74:	45 e0       	ldi	r20, 0x05	; 5
    6d76:	f4 2e       	mov	r15, r20
    6d78:	04 e0       	ldi	r16, 0x04	; 4
    6d7a:	15 e0       	ldi	r17, 0x05	; 5
    6d7c:	20 91 e2 07 	lds	r18, 0x07E2
    6d80:	4e 81       	ldd	r20, Y+6	; 0x06
    6d82:	65 e9       	ldi	r22, 0x95	; 149
    6d84:	8f 81       	ldd	r24, Y+7	; 0x07
    6d86:	0e 94 e6 31 	call	0x63cc	; 0x63cc <update_menu>
		range = get_menu_range ((const unsigned char*)rc_menu_ranges[section - 1], (menu_temp - RCSTART - offset)); 
    6d8a:	60 91 2f 05 	lds	r22, 0x052F
    6d8e:	65 59       	subi	r22, 0x95	; 149
    6d90:	9e 81       	ldd	r25, Y+6	; 0x06
    6d92:	69 1b       	sub	r22, r25
    6d94:	c3 01       	movw	r24, r6
    6d96:	0e 94 aa 2f 	call	0x5f54	; 0x5f54 <get_menu_range>
    6d9a:	29 83       	std	Y+1, r18	; 0x01
    6d9c:	3a 83       	std	Y+2, r19	; 0x02
    6d9e:	4b 83       	std	Y+3, r20	; 0x03
    6da0:	5c 83       	std	Y+4, r21	; 0x04
    6da2:	6d 83       	std	Y+5, r22	; 0x05

		if (button == ENTER)
    6da4:	80 91 e2 07 	lds	r24, 0x07E2
    6da8:	80 3e       	cpi	r24, 0xE0	; 224
    6daa:	09 f5       	brne	.+66     	; 0x6dee <menu_rc_setup+0x162>
		{
			text_link = pgm_read_byte(&RCMenuText[section - 1][menu_temp - RCSTART - offset]);
    6dac:	80 91 2f 05 	lds	r24, 0x052F
    6db0:	90 91 30 05 	lds	r25, 0x0530
    6db4:	bc 01       	movw	r22, r24
    6db6:	65 59       	subi	r22, 0x95	; 149
    6db8:	71 09       	sbc	r23, r1
    6dba:	68 19       	sub	r22, r8
    6dbc:	79 09       	sbc	r23, r9
    6dbe:	fb 01       	movw	r30, r22
    6dc0:	e2 0d       	add	r30, r2
    6dc2:	f3 1d       	adc	r31, r3
    6dc4:	e2 5f       	subi	r30, 0xF2	; 242
    6dc6:	f5 4e       	sbci	r31, 0xE5	; 229
    6dc8:	e4 91       	lpm	r30, Z
			do_menu_item(menu_temp, value_ptr + (menu_temp - RCSTART - offset), 1, range, 0, text_link, false, 0);
    6dca:	ae 2e       	mov	r10, r30
    6dcc:	b1 2c       	mov	r11, r1
    6dce:	64 0d       	add	r22, r4
    6dd0:	75 1d       	adc	r23, r5
    6dd2:	1f 92       	push	r1
    6dd4:	1f 92       	push	r1
    6dd6:	81 2c       	mov	r8, r1
    6dd8:	c1 2c       	mov	r12, r1
    6dda:	e9 80       	ldd	r14, Y+1	; 0x01
    6ddc:	fa 80       	ldd	r15, Y+2	; 0x02
    6dde:	0b 81       	ldd	r16, Y+3	; 0x03
    6de0:	1c 81       	ldd	r17, Y+4	; 0x04
    6de2:	2d 81       	ldd	r18, Y+5	; 0x05
    6de4:	41 e0       	ldi	r20, 0x01	; 1
    6de6:	0e 94 36 30 	call	0x606c	; 0x606c <do_menu_item>
    6dea:	0f 90       	pop	r0
    6dec:	0f 90       	pop	r0
		}

		if (button == ENTER)
    6dee:	80 91 e2 07 	lds	r24, 0x07E2
    6df2:	80 3e       	cpi	r24, 0xE0	; 224
    6df4:	09 f0       	breq	.+2      	; 0x6df8 <menu_rc_setup+0x16c>
    6df6:	91 cf       	rjmp	.-222    	; 0x6d1a <menu_rc_setup+0x8e>
		{
			init_int();				// In case RC type has changed, reinitialise interrupts
    6df8:	0e 94 1c 2f 	call	0x5e38	; 0x5e38 <init_int>
			init_uart();			// and UART
    6dfc:	0e 94 b1 46 	call	0x8d62	; 0x8d62 <init_uart>
			UpdateLimits();			// Update I-term limits and triggers based on percentages
    6e00:	0e 94 52 37 	call	0x6ea4	; 0x6ea4 <UpdateLimits>

			// Update MPU6050 LPF and reverse sense of menu items
			writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_CONFIG, (6 - Config.MPU6050_LPF));
    6e04:	80 91 36 06 	lds	r24, 0x0636
    6e08:	46 e0       	ldi	r20, 0x06	; 6
    6e0a:	48 1b       	sub	r20, r24
    6e0c:	6a e1       	ldi	r22, 0x1A	; 26
    6e0e:	80 ed       	ldi	r24, 0xD0	; 208
    6e10:	0e 94 68 25 	call	0x4ad0	; 0x4ad0 <writeI2Cbyte>

			// Update channel sequence
			for (i = 0; i < MAX_RC_CHANNELS; i++)
			{
				if (Config.TxSeq == FUTABASEQ)
    6e14:	20 91 d5 05 	lds	r18, 0x05D5
    6e18:	aa ea       	ldi	r26, 0xAA	; 170
    6e1a:	b5 e0       	ldi	r27, 0x05	; 5
    6e1c:	80 e0       	ldi	r24, 0x00	; 0
    6e1e:	90 e0       	ldi	r25, 0x00	; 0
    6e20:	fc 01       	movw	r30, r24
    6e22:	21 30       	cpi	r18, 0x01	; 1
    6e24:	19 f4       	brne	.+6      	; 0x6e2c <menu_rc_setup+0x1a0>
    6e26:	e2 51       	subi	r30, 0x12	; 18
    6e28:	ff 4f       	sbci	r31, 0xFF	; 255
    6e2a:	02 c0       	rjmp	.+4      	; 0x6e30 <menu_rc_setup+0x1a4>
    6e2c:	ea 50       	subi	r30, 0x0A	; 10
    6e2e:	ff 4f       	sbci	r31, 0xFF	; 255
				{
					Config.ChannelOrder[i] = pgm_read_byte(&FUTABA[i]);
				}
				else
				{
					Config.ChannelOrder[i] = pgm_read_byte(&JR[i]);
    6e30:	e4 91       	lpm	r30, Z
    6e32:	ec 93       	st	X, r30
    6e34:	01 96       	adiw	r24, 0x01	; 1
    6e36:	11 96       	adiw	r26, 0x01	; 1

			// Update MPU6050 LPF and reverse sense of menu items
			writeI2Cbyte(MPU60X0_DEFAULT_ADDRESS, MPU60X0_RA_CONFIG, (6 - Config.MPU6050_LPF));

			// Update channel sequence
			for (i = 0; i < MAX_RC_CHANNELS; i++)
    6e38:	88 30       	cpi	r24, 0x08	; 8
    6e3a:	91 05       	cpc	r25, r1
    6e3c:	89 f7       	brne	.-30     	; 0x6e20 <menu_rc_setup+0x194>
				}
			}

			// Check validity of RX type and PWM speed selection
			// If illegal setting, drop down to RC Sync
			if ((!(Config.RxMode == SBUS) || (Config.RxMode == SPEKTRUM)) && (Config.Servo_rate == FAST))
    6e3e:	80 91 d2 05 	lds	r24, 0x05D2
    6e42:	82 30       	cpi	r24, 0x02	; 2
    6e44:	39 f0       	breq	.+14     	; 0x6e54 <menu_rc_setup+0x1c8>
    6e46:	80 91 d3 05 	lds	r24, 0x05D3
    6e4a:	82 30       	cpi	r24, 0x02	; 2
    6e4c:	19 f4       	brne	.+6      	; 0x6e54 <menu_rc_setup+0x1c8>
			{
				Config.Servo_rate = SYNC;
    6e4e:	81 e0       	ldi	r24, 0x01	; 1
    6e50:	80 93 d3 05 	sts	0x05D3, r24
			}
						
			if (Config.ArmMode == ARMABLE)
    6e54:	80 91 33 06 	lds	r24, 0x0633
    6e58:	81 30       	cpi	r24, 0x01	; 1
    6e5a:	31 f4       	brne	.+12     	; 0x6e68 <menu_rc_setup+0x1dc>
			{
				General_error |= (1 << DISARMED);	// Set flags to disarmed
    6e5c:	80 91 1e 05 	lds	r24, 0x051E
    6e60:	84 60       	ori	r24, 0x04	; 4
    6e62:	80 93 1e 05 	sts	0x051E, r24
				LED1 = 0;
    6e66:	2b 98       	cbi	0x05, 3	; 5
			}

			Save_Config_to_EEPROM(); // Save value and return
    6e68:	0e 94 bc 16 	call	0x2d78	; 0x2d78 <Save_Config_to_EEPROM>
			Wait_BUTTON4();			 // Wait for user's finger off the button
    6e6c:	0e 94 b1 34 	call	0x6962	; 0x6962 <Wait_BUTTON4>
    6e70:	54 cf       	rjmp	.-344    	; 0x6d1a <menu_rc_setup+0x8e>
		}
	}
}
    6e72:	2a 96       	adiw	r28, 0x0a	; 10
    6e74:	0f b6       	in	r0, 0x3f	; 63
    6e76:	f8 94       	cli
    6e78:	de bf       	out	0x3e, r29	; 62
    6e7a:	0f be       	out	0x3f, r0	; 63
    6e7c:	cd bf       	out	0x3d, r28	; 61
    6e7e:	df 91       	pop	r29
    6e80:	cf 91       	pop	r28
    6e82:	1f 91       	pop	r17
    6e84:	0f 91       	pop	r16
    6e86:	ff 90       	pop	r15
    6e88:	ef 90       	pop	r14
    6e8a:	df 90       	pop	r13
    6e8c:	cf 90       	pop	r12
    6e8e:	bf 90       	pop	r11
    6e90:	af 90       	pop	r10
    6e92:	9f 90       	pop	r9
    6e94:	8f 90       	pop	r8
    6e96:	7f 90       	pop	r7
    6e98:	6f 90       	pop	r6
    6e9a:	5f 90       	pop	r5
    6e9c:	4f 90       	pop	r4
    6e9e:	3f 90       	pop	r3
    6ea0:	2f 90       	pop	r2
    6ea2:	08 95       	ret

00006ea4 <UpdateLimits>:

// Update actual limits value with that from the mix setting percentages
// This is only done at start-up and whenever the values are changed
// so as to reduce CPU loop load
void UpdateLimits(void)
{
    6ea4:	6f 92       	push	r6
    6ea6:	7f 92       	push	r7
    6ea8:	8f 92       	push	r8
    6eaa:	9f 92       	push	r9
    6eac:	af 92       	push	r10
    6eae:	bf 92       	push	r11
    6eb0:	cf 92       	push	r12
    6eb2:	df 92       	push	r13
    6eb4:	ef 92       	push	r14
    6eb6:	ff 92       	push	r15
    6eb8:	0f 93       	push	r16
    6eba:	1f 93       	push	r17
    6ebc:	cf 93       	push	r28
    6ebe:	df 93       	push	r29
    6ec0:	cd b7       	in	r28, 0x3d	; 61
    6ec2:	de b7       	in	r29, 0x3e	; 62
    6ec4:	2c 97       	sbiw	r28, 0x0c	; 12
    6ec6:	0f b6       	in	r0, 0x3f	; 63
    6ec8:	f8 94       	cli
    6eca:	de bf       	out	0x3e, r29	; 62
    6ecc:	0f be       	out	0x3f, r0	; 63
    6ece:	cd bf       	out	0x3d, r28	; 61
	uint8_t i,j;
	int32_t temp32, gain32;

	int8_t limits[FLIGHT_MODES][NUMBEROFAXIS] = 
    6ed0:	80 91 dd 05 	lds	r24, 0x05DD
    6ed4:	8f 83       	std	Y+7, r24	; 0x07
    6ed6:	80 91 e3 05 	lds	r24, 0x05E3
    6eda:	88 87       	std	Y+8, r24	; 0x08
    6edc:	80 91 e9 05 	lds	r24, 0x05E9
    6ee0:	89 87       	std	Y+9, r24	; 0x09
    6ee2:	80 91 ef 05 	lds	r24, 0x05EF
    6ee6:	8a 87       	std	Y+10, r24	; 0x0a
    6ee8:	80 91 f5 05 	lds	r24, 0x05F5
    6eec:	8b 87       	std	Y+11, r24	; 0x0b
    6eee:	80 91 fb 05 	lds	r24, 0x05FB
    6ef2:	8c 87       	std	Y+12, r24	; 0x0c
		{
			{Config.FlightMode[P1].Roll_limit, Config.FlightMode[P1].Pitch_limit, Config.FlightMode[P1].Yaw_limit},
			{Config.FlightMode[P2].Roll_limit, Config.FlightMode[P2].Pitch_limit, Config.FlightMode[P2].Yaw_limit}
		};

	int8_t gains[FLIGHT_MODES][NUMBEROFAXIS] = 
    6ef4:	80 91 dc 05 	lds	r24, 0x05DC
    6ef8:	89 83       	std	Y+1, r24	; 0x01
    6efa:	80 91 e2 05 	lds	r24, 0x05E2
    6efe:	8a 83       	std	Y+2, r24	; 0x02
    6f00:	80 91 e8 05 	lds	r24, 0x05E8
    6f04:	8b 83       	std	Y+3, r24	; 0x03
    6f06:	80 91 ee 05 	lds	r24, 0x05EE
    6f0a:	8c 83       	std	Y+4, r24	; 0x04
    6f0c:	80 91 f4 05 	lds	r24, 0x05F4
    6f10:	8d 83       	std	Y+5, r24	; 0x05
    6f12:	80 91 fa 05 	lds	r24, 0x05FA
    6f16:	8e 83       	std	Y+6, r24	; 0x06
			{Config.FlightMode[P2].Roll_I_mult, Config.FlightMode[P2].Pitch_I_mult, Config.FlightMode[P2].Yaw_I_mult}
		};

	// Update LVA trigger
	// Vbat is measured in units of 10mV, so PowerTriggerActual of 1270 equates to 12.7V
	switch (Config.PowerTrigger)
    6f18:	80 91 35 06 	lds	r24, 0x0635
    6f1c:	99 27       	eor	r25, r25
    6f1e:	87 fd       	sbrc	r24, 7
    6f20:	90 95       	com	r25
    6f22:	a9 2f       	mov	r26, r25
    6f24:	b9 2f       	mov	r27, r25
    6f26:	89 30       	cpi	r24, 0x09	; 9
    6f28:	91 05       	cpc	r25, r1
    6f2a:	08 f5       	brcc	.+66     	; 0x6f6e <UpdateLimits+0xca>
    6f2c:	fc 01       	movw	r30, r24
    6f2e:	e4 5a       	subi	r30, 0xA4	; 164
    6f30:	ff 4f       	sbci	r31, 0xFF	; 255
    6f32:	0c 94 b4 49 	jmp	0x9368	; 0x9368 <__tablejump2__>
	{
		case 0:
			Config.PowerTriggerActual = 0;			// Off
			break;
		case 1:
			Config.PowerTriggerActual = 320; 		// 3.2V
    6f36:	80 e4       	ldi	r24, 0x40	; 64
    6f38:	91 e0       	ldi	r25, 0x01	; 1
    6f3a:	14 c0       	rjmp	.+40     	; 0x6f64 <UpdateLimits+0xc0>
			break;
		case 2:
			Config.PowerTriggerActual = 330; 		// 3.3V
    6f3c:	8a e4       	ldi	r24, 0x4A	; 74
    6f3e:	91 e0       	ldi	r25, 0x01	; 1
    6f40:	11 c0       	rjmp	.+34     	; 0x6f64 <UpdateLimits+0xc0>
			break;
		case 3:
			Config.PowerTriggerActual = 340;		// 3.4V
    6f42:	84 e5       	ldi	r24, 0x54	; 84
    6f44:	91 e0       	ldi	r25, 0x01	; 1
    6f46:	0e c0       	rjmp	.+28     	; 0x6f64 <UpdateLimits+0xc0>
			break;
		case 4:
			Config.PowerTriggerActual = 350; 		// 3.5V
    6f48:	8e e5       	ldi	r24, 0x5E	; 94
    6f4a:	91 e0       	ldi	r25, 0x01	; 1
    6f4c:	0b c0       	rjmp	.+22     	; 0x6f64 <UpdateLimits+0xc0>
			break;
		case 5:
			Config.PowerTriggerActual = 360; 		// 3.6V
    6f4e:	88 e6       	ldi	r24, 0x68	; 104
    6f50:	91 e0       	ldi	r25, 0x01	; 1
    6f52:	08 c0       	rjmp	.+16     	; 0x6f64 <UpdateLimits+0xc0>
			break;
		case 6:
			Config.PowerTriggerActual = 370; 		// 3.7V
    6f54:	82 e7       	ldi	r24, 0x72	; 114
    6f56:	91 e0       	ldi	r25, 0x01	; 1
    6f58:	05 c0       	rjmp	.+10     	; 0x6f64 <UpdateLimits+0xc0>
			break;
		case 7:
			Config.PowerTriggerActual = 380; 		// 3.8V
    6f5a:	8c e7       	ldi	r24, 0x7C	; 124
    6f5c:	91 e0       	ldi	r25, 0x01	; 1
    6f5e:	02 c0       	rjmp	.+4      	; 0x6f64 <UpdateLimits+0xc0>
			break;
		case 8:
			Config.PowerTriggerActual = 390; 		// 3.9V
    6f60:	86 e8       	ldi	r24, 0x86	; 134
    6f62:	91 e0       	ldi	r25, 0x01	; 1
    6f64:	90 93 30 06 	sts	0x0630, r25
    6f68:	80 93 2f 06 	sts	0x062F, r24
			break;
    6f6c:	04 c0       	rjmp	.+8      	; 0x6f76 <UpdateLimits+0xd2>
		default:
			Config.PowerTriggerActual = 0;			// Off
    6f6e:	10 92 30 06 	sts	0x0630, r1
    6f72:	10 92 2f 06 	sts	0x062F, r1
			break;
	}
			
	// Determine cell count and use to multiply trigger
	if (SystemVoltage >= 2150)										// 6S - 21.5V or at least 3.58V per cell
    6f76:	20 91 2c 05 	lds	r18, 0x052C
    6f7a:	30 91 2d 05 	lds	r19, 0x052D
    6f7e:	80 91 2f 06 	lds	r24, 0x062F
    6f82:	90 91 30 06 	lds	r25, 0x0630
    6f86:	26 36       	cpi	r18, 0x66	; 102
    6f88:	48 e0       	ldi	r20, 0x08	; 8
    6f8a:	34 07       	cpc	r19, r20
    6f8c:	88 f0       	brcs	.+34     	; 0x6fb0 <UpdateLimits+0x10c>
	{
		Config.PowerTriggerActual *= 6;
    6f8e:	46 e0       	ldi	r20, 0x06	; 6
    6f90:	48 9f       	mul	r20, r24
    6f92:	90 01       	movw	r18, r0
    6f94:	49 9f       	mul	r20, r25
    6f96:	30 0d       	add	r19, r0
    6f98:	11 24       	eor	r1, r1
    6f9a:	30 93 30 06 	sts	0x0630, r19
    6f9e:	20 93 2f 06 	sts	0x062F, r18
    6fa2:	7f ef       	ldi	r23, 0xFF	; 255
    6fa4:	a7 2e       	mov	r10, r23
    6fa6:	75 e0       	ldi	r23, 0x05	; 5
    6fa8:	b7 2e       	mov	r11, r23

// Update actual limits value with that from the mix setting percentages
// This is only done at start-up and whenever the values are changed
// so as to reduce CPU loop load
void UpdateLimits(void)
{
    6faa:	00 e0       	ldi	r16, 0x00	; 0
    6fac:	10 e0       	ldi	r17, 0x00	; 0
    6fae:	25 c0       	rjmp	.+74     	; 0x6ffa <UpdateLimits+0x156>
	// Determine cell count and use to multiply trigger
	if (SystemVoltage >= 2150)										// 6S - 21.5V or at least 3.58V per cell
	{
		Config.PowerTriggerActual *= 6;
	}
	else if ((SystemVoltage >= 1730) && (SystemVoltage < 2150))		// 5S 17.3V to 21.5V or 4.32V(4S) to 3.58V(6S) per cell
    6fb0:	a9 01       	movw	r20, r18
    6fb2:	42 5c       	subi	r20, 0xC2	; 194
    6fb4:	56 40       	sbci	r21, 0x06	; 6
    6fb6:	44 3a       	cpi	r20, 0xA4	; 164
    6fb8:	51 40       	sbci	r21, 0x01	; 1
    6fba:	10 f4       	brcc	.+4      	; 0x6fc0 <UpdateLimits+0x11c>
	{
		Config.PowerTriggerActual *= 5;
    6fbc:	45 e0       	ldi	r20, 0x05	; 5
    6fbe:	e8 cf       	rjmp	.-48     	; 0x6f90 <UpdateLimits+0xec>
	}
	else if ((SystemVoltage >= 1300) && (SystemVoltage < 1730))		// 4S 13.0V to 17.3V or 4.33V(3S) to 3.46V(5S) per cell
    6fc0:	a9 01       	movw	r20, r18
    6fc2:	44 51       	subi	r20, 0x14	; 20
    6fc4:	55 40       	sbci	r21, 0x05	; 5
    6fc6:	4e 3a       	cpi	r20, 0xAE	; 174
    6fc8:	51 40       	sbci	r21, 0x01	; 1
    6fca:	28 f4       	brcc	.+10     	; 0x6fd6 <UpdateLimits+0x132>
	{
		Config.PowerTriggerActual *= 4;
    6fcc:	88 0f       	add	r24, r24
    6fce:	99 1f       	adc	r25, r25
    6fd0:	88 0f       	add	r24, r24
    6fd2:	99 1f       	adc	r25, r25
    6fd4:	0d c0       	rjmp	.+26     	; 0x6ff0 <UpdateLimits+0x14c>
	}
	else if ((SystemVoltage >= 900) && (SystemVoltage < 1300))		// 3S 9.0V to 13.0V or 4.5V(2S) to 3.25V(4S) per cell
    6fd6:	24 58       	subi	r18, 0x84	; 132
    6fd8:	33 40       	sbci	r19, 0x03	; 3
    6fda:	20 39       	cpi	r18, 0x90	; 144
    6fdc:	31 40       	sbci	r19, 0x01	; 1
    6fde:	30 f4       	brcc	.+12     	; 0x6fec <UpdateLimits+0x148>
	{
		Config.PowerTriggerActual *= 3;
    6fe0:	9c 01       	movw	r18, r24
    6fe2:	22 0f       	add	r18, r18
    6fe4:	33 1f       	adc	r19, r19
    6fe6:	28 0f       	add	r18, r24
    6fe8:	39 1f       	adc	r19, r25
    6fea:	d7 cf       	rjmp	.-82     	; 0x6f9a <UpdateLimits+0xf6>
	}
	else if (SystemVoltage < 900)									// 2S Under 9.0V or 3.0V(3S) per cell
	{
		Config.PowerTriggerActual *= 2;
    6fec:	88 0f       	add	r24, r24
    6fee:	99 1f       	adc	r25, r25
    6ff0:	90 93 30 06 	sts	0x0630, r25
    6ff4:	80 93 2f 06 	sts	0x062F, r24
    6ff8:	d4 cf       	rjmp	.-88     	; 0x6fa2 <UpdateLimits+0xfe>

// Update actual limits value with that from the mix setting percentages
// This is only done at start-up and whenever the values are changed
// so as to reduce CPU loop load
void UpdateLimits(void)
{
    6ffa:	65 01       	movw	r12, r10
    6ffc:	e1 2c       	mov	r14, r1
    6ffe:	f1 2c       	mov	r15, r1
    7000:	87 e0       	ldi	r24, 0x07	; 7
    7002:	88 2e       	mov	r8, r24
    7004:	91 2c       	mov	r9, r1
    7006:	8c 0e       	add	r8, r28
    7008:	9d 1e       	adc	r9, r29
    700a:	80 0e       	add	r8, r16
    700c:	91 1e       	adc	r9, r17
    700e:	66 24       	eor	r6, r6
    7010:	63 94       	inc	r6
    7012:	71 2c       	mov	r7, r1
    7014:	6c 0e       	add	r6, r28
    7016:	7d 1e       	adc	r7, r29
    7018:	60 0e       	add	r6, r16
    701a:	71 1e       	adc	r7, r17
    701c:	f4 01       	movw	r30, r8
    701e:	ee 0d       	add	r30, r14
    7020:	ff 1d       	adc	r31, r15
	// Update I_term input constraints for all profiles
	for (j = 0; j < FLIGHT_MODES; j++)
	{
		for (i = 0; i < NUMBEROFAXIS; i++)
		{
			temp32 	= limits[j][i]; 						// Promote limit %
    7022:	a0 81       	ld	r26, Z

			// I-term output (throw). Convert from % to actual count
			// A value of 80,000 results in +/- 1250 or full throw at the output stage
			// This is because the maximum signal value is +/-1250 after division by 64. 1250 * 64 = 80,000
			Config.Raw_I_Limits[j][i] = temp32 * (int32_t)640;	// 80,000 / 125% = 640
    7024:	bb 27       	eor	r27, r27
    7026:	a7 fd       	sbrc	r26, 7
    7028:	b0 95       	com	r27
    702a:	20 e8       	ldi	r18, 0x80	; 128
    702c:	32 e0       	ldi	r19, 0x02	; 2
    702e:	0e 94 d1 49 	call	0x93a2	; 0x93a2 <__usmulhisi3>
    7032:	f6 01       	movw	r30, r12
    7034:	61 93       	st	Z+, r22
    7036:	71 93       	st	Z+, r23
    7038:	81 93       	st	Z+, r24
    703a:	91 93       	st	Z+, r25
    703c:	6f 01       	movw	r12, r30
    703e:	f3 01       	movw	r30, r6
    7040:	ee 0d       	add	r30, r14
    7042:	ff 1d       	adc	r31, r15

			// I-term source limits. These have to be different due to the I-term gain setting
			// I-term = (gyro * gain) / 32, so the gyro count for a particular gain and limit is
			// Gyro = (I-term * 32) / gain :) 

			if (gains[j][i] != 0)
    7044:	20 81       	ld	r18, Z
    7046:	22 23       	and	r18, r18
    7048:	b1 f0       	breq	.+44     	; 0x7076 <UpdateLimits+0x1d2>
			{
				gain32 = gains[j][i];						// Promote gain value
				Config.Raw_I_Constrain[j][i] = (Config.Raw_I_Limits[j][i] << 5) / gain32;
    704a:	35 e0       	ldi	r19, 0x05	; 5
    704c:	66 0f       	add	r22, r22
    704e:	77 1f       	adc	r23, r23
    7050:	88 1f       	adc	r24, r24
    7052:	99 1f       	adc	r25, r25
    7054:	3a 95       	dec	r19
    7056:	d1 f7       	brne	.-12     	; 0x704c <UpdateLimits+0x1a8>
			// I-term = (gyro * gain) / 32, so the gyro count for a particular gain and limit is
			// Gyro = (I-term * 32) / gain :) 

			if (gains[j][i] != 0)
			{
				gain32 = gains[j][i];						// Promote gain value
    7058:	33 27       	eor	r19, r19
    705a:	27 fd       	sbrc	r18, 7
    705c:	30 95       	com	r19
    705e:	43 2f       	mov	r20, r19
    7060:	53 2f       	mov	r21, r19
				Config.Raw_I_Constrain[j][i] = (Config.Raw_I_Limits[j][i] << 5) / gain32;
    7062:	0e 94 95 49 	call	0x932a	; 0x932a <__divmodsi4>
    7066:	d6 01       	movw	r26, r12
    7068:	54 96       	adiw	r26, 0x14	; 20
    706a:	2d 93       	st	X+, r18
    706c:	3d 93       	st	X+, r19
    706e:	4d 93       	st	X+, r20
    7070:	5c 93       	st	X, r21
    7072:	57 97       	sbiw	r26, 0x17	; 23
    7074:	05 c0       	rjmp	.+10     	; 0x7080 <UpdateLimits+0x1dc>
			}
			else 
			{
				Config.Raw_I_Constrain[j][i] = 0;
    7076:	f6 01       	movw	r30, r12
    7078:	14 8a       	std	Z+20, r1	; 0x14
    707a:	15 8a       	std	Z+21, r1	; 0x15
    707c:	16 8a       	std	Z+22, r1	; 0x16
    707e:	17 8a       	std	Z+23, r1	; 0x17
    7080:	ff ef       	ldi	r31, 0xFF	; 255
    7082:	ef 1a       	sub	r14, r31
    7084:	ff 0a       	sbc	r15, r31
	}

	// Update I_term input constraints for all profiles
	for (j = 0; j < FLIGHT_MODES; j++)
	{
		for (i = 0; i < NUMBEROFAXIS; i++)
    7086:	23 e0       	ldi	r18, 0x03	; 3
    7088:	e2 16       	cp	r14, r18
    708a:	f1 04       	cpc	r15, r1
    708c:	39 f6       	brne	.-114    	; 0x701c <UpdateLimits+0x178>
    708e:	4c e0       	ldi	r20, 0x0C	; 12
    7090:	a4 0e       	add	r10, r20
    7092:	b1 1c       	adc	r11, r1
    7094:	0d 5f       	subi	r16, 0xFD	; 253
    7096:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		Config.PowerTriggerActual *= 2;
	}

	// Update I_term input constraints for all profiles
	for (j = 0; j < FLIGHT_MODES; j++)
    7098:	06 30       	cpi	r16, 0x06	; 6
    709a:	11 05       	cpc	r17, r1
    709c:	09 f0       	breq	.+2      	; 0x70a0 <UpdateLimits+0x1fc>
    709e:	ad cf       	rjmp	.-166    	; 0x6ffa <UpdateLimits+0x156>
    70a0:	83 e7       	ldi	r24, 0x73	; 115
    70a2:	97 e0       	ldi	r25, 0x07	; 7
    70a4:	e2 eb       	ldi	r30, 0xB2	; 178
    70a6:	f5 e0       	ldi	r31, 0x05	; 5
    70a8:	6b e7       	ldi	r22, 0x7B	; 123
    70aa:	77 e0       	ldi	r23, 0x07	; 7
	}

	// Update travel limits
	for (i = 0; i < MIX_OUTPUTS; i++)
	{
		Config.Limits[i].minimum = scale_percent(Config.min_travel[i]);
    70ac:	dc 01       	movw	r26, r24
    70ae:	2d 91       	ld	r18, X+
    70b0:	cd 01       	movw	r24, r26
int16_t scale_percent(int8_t value)
{
	int16_t temp16_1, temp16_2;

	temp16_1 = value; // Promote
	temp16_2 = ((temp16_1 * (int16_t)10) + 3750);
    70b2:	ba e0       	ldi	r27, 0x0A	; 10
    70b4:	2b 02       	muls	r18, r27
    70b6:	90 01       	movw	r18, r0
    70b8:	11 24       	eor	r1, r1
    70ba:	2a 55       	subi	r18, 0x5A	; 90
    70bc:	31 4f       	sbci	r19, 0xF1	; 241
	}

	// Update travel limits
	for (i = 0; i < MIX_OUTPUTS; i++)
	{
		Config.Limits[i].minimum = scale_percent(Config.min_travel[i]);
    70be:	31 83       	std	Z+1, r19	; 0x01
    70c0:	20 83       	st	Z, r18
		Config.Limits[i].maximum = scale_percent(Config.max_travel[i]);
    70c2:	db 01       	movw	r26, r22
    70c4:	2d 91       	ld	r18, X+
    70c6:	bd 01       	movw	r22, r26
int16_t scale_percent(int8_t value)
{
	int16_t temp16_1, temp16_2;

	temp16_1 = value; // Promote
	temp16_2 = ((temp16_1 * (int16_t)10) + 3750);
    70c8:	ba e0       	ldi	r27, 0x0A	; 10
    70ca:	2b 02       	muls	r18, r27
    70cc:	90 01       	movw	r18, r0
    70ce:	11 24       	eor	r1, r1
    70d0:	2a 55       	subi	r18, 0x5A	; 90
    70d2:	31 4f       	sbci	r19, 0xF1	; 241

	// Update travel limits
	for (i = 0; i < MIX_OUTPUTS; i++)
	{
		Config.Limits[i].minimum = scale_percent(Config.min_travel[i]);
		Config.Limits[i].maximum = scale_percent(Config.max_travel[i]);
    70d4:	33 83       	std	Z+3, r19	; 0x03
    70d6:	22 83       	std	Z+2, r18	; 0x02
    70d8:	34 96       	adiw	r30, 0x04	; 4
			}
		}
	}

	// Update travel limits
	for (i = 0; i < MIX_OUTPUTS; i++)
    70da:	25 e0       	ldi	r18, 0x05	; 5
    70dc:	e2 3d       	cpi	r30, 0xD2	; 210
    70de:	f2 07       	cpc	r31, r18
    70e0:	29 f7       	brne	.-54     	; 0x70ac <UpdateLimits+0x208>

	// Adjust trim to match 0.01 degree resolution
	// A value of 127 multiplied by 10 = 1270 which in 1/100ths of a degree equates to 12.7 degrees
	for (i = P1; i <= P2; i++)
	{
		Config.Rolltrim[i] = Config.FlightMode[i].AccRollZeroTrim * 10;
    70e2:	80 91 e0 05 	lds	r24, 0x05E0
    70e6:	4a e0       	ldi	r20, 0x0A	; 10
    70e8:	84 02       	muls	r24, r20
    70ea:	c0 01       	movw	r24, r0
    70ec:	11 24       	eor	r1, r1
    70ee:	90 93 a9 07 	sts	0x07A9, r25
    70f2:	80 93 a8 07 	sts	0x07A8, r24
		Config.Pitchtrim[i] = Config.FlightMode[i].AccPitchZeroTrim * 10;
    70f6:	80 91 e6 05 	lds	r24, 0x05E6
    70fa:	6a e0       	ldi	r22, 0x0A	; 10
    70fc:	86 02       	muls	r24, r22
    70fe:	c0 01       	movw	r24, r0
    7100:	11 24       	eor	r1, r1
    7102:	90 93 ad 07 	sts	0x07AD, r25
    7106:	80 93 ac 07 	sts	0x07AC, r24

	// Adjust trim to match 0.01 degree resolution
	// A value of 127 multiplied by 10 = 1270 which in 1/100ths of a degree equates to 12.7 degrees
	for (i = P1; i <= P2; i++)
	{
		Config.Rolltrim[i] = Config.FlightMode[i].AccRollZeroTrim * 10;
    710a:	80 91 f2 05 	lds	r24, 0x05F2
    710e:	aa e0       	ldi	r26, 0x0A	; 10
    7110:	8a 02       	muls	r24, r26
    7112:	c0 01       	movw	r24, r0
    7114:	11 24       	eor	r1, r1
    7116:	90 93 ab 07 	sts	0x07AB, r25
    711a:	80 93 aa 07 	sts	0x07AA, r24
		Config.Pitchtrim[i] = Config.FlightMode[i].AccPitchZeroTrim * 10;
    711e:	80 91 f8 05 	lds	r24, 0x05F8
    7122:	ba e0       	ldi	r27, 0x0A	; 10
    7124:	8b 02       	muls	r24, r27
    7126:	c0 01       	movw	r24, r0
    7128:	11 24       	eor	r1, r1
    712a:	90 93 af 07 	sts	0x07AF, r25
    712e:	80 93 ae 07 	sts	0x07AE, r24
	}
}
    7132:	2c 96       	adiw	r28, 0x0c	; 12
    7134:	0f b6       	in	r0, 0x3f	; 63
    7136:	f8 94       	cli
    7138:	de bf       	out	0x3e, r29	; 62
    713a:	0f be       	out	0x3f, r0	; 63
    713c:	cd bf       	out	0x3d, r28	; 61
    713e:	df 91       	pop	r29
    7140:	cf 91       	pop	r28
    7142:	1f 91       	pop	r17
    7144:	0f 91       	pop	r16
    7146:	ff 90       	pop	r15
    7148:	ef 90       	pop	r14
    714a:	df 90       	pop	r13
    714c:	cf 90       	pop	r12
    714e:	bf 90       	pop	r11
    7150:	af 90       	pop	r10
    7152:	9f 90       	pop	r9
    7154:	8f 90       	pop	r8
    7156:	7f 90       	pop	r7
    7158:	6f 90       	pop	r6
    715a:	08 95       	ret

0000715c <UpdateServos>:

// Update servos from the mixer Config.Channel[i].P1_value data, add offsets and enforce travel limits
void UpdateServos(void)
{
    715c:	0f 93       	push	r16
    715e:	1f 93       	push	r17
    7160:	cf 93       	push	r28
    7162:	df 93       	push	r29
    7164:	ab e3       	ldi	r26, 0x3B	; 59
    7166:	b6 e0       	ldi	r27, 0x06	; 6
    7168:	0b e6       	ldi	r16, 0x6B	; 107
    716a:	17 e0       	ldi	r17, 0x07	; 7
    716c:	e2 eb       	ldi	r30, 0xB2	; 178
    716e:	f5 e0       	ldi	r31, 0x05	; 5
    7170:	80 e0       	ldi	r24, 0x00	; 0
    7172:	90 e0       	ldi	r25, 0x00	; 0
	int16_t temp1 = 0; // Output value

	for (i = 0; i < MIX_OUTPUTS; i++)
	{
		// Servo reverse and trim for the eight physical outputs
		temp1 = Config.Channel[i].P1_value;
    7174:	2d 91       	ld	r18, X+
    7176:	3c 91       	ld	r19, X
    7178:	11 97       	sbiw	r26, 0x01	; 1

		// Reverse this channel for the eight physical outputs
		if ((i <= MIX_OUTPUTS) && (Config.Servo_reverse[i] == ON))
    717a:	e8 01       	movw	r28, r16
    717c:	49 91       	ld	r20, Y+
    717e:	8e 01       	movw	r16, r28
    7180:	41 30       	cpi	r20, 0x01	; 1
    7182:	19 f4       	brne	.+6      	; 0x718a <UpdateServos+0x2e>
		{	
			temp1 = -temp1;
    7184:	31 95       	neg	r19
    7186:	21 95       	neg	r18
    7188:	31 09       	sbc	r19, r1
		}

		// Add offset value to restore to system compatible value
		temp1 += 3750;
    718a:	2a 55       	subi	r18, 0x5A	; 90
    718c:	31 4f       	sbci	r19, 0xF1	; 241

		// Enforce min, max travel limits
		if (temp1 > Config.Limits[i].maximum)
    718e:	62 81       	ldd	r22, Z+2	; 0x02
    7190:	73 81       	ldd	r23, Z+3	; 0x03
    7192:	ac 01       	movw	r20, r24
    7194:	44 0f       	add	r20, r20
    7196:	55 1f       	adc	r21, r21
    7198:	62 17       	cp	r22, r18
    719a:	73 07       	cpc	r23, r19
    719c:	24 f4       	brge	.+8      	; 0x71a6 <UpdateServos+0x4a>
		{
			ServoOut[i] = Config.Limits[i].maximum;
    719e:	4b 5c       	subi	r20, 0xCB	; 203
    71a0:	57 4f       	sbci	r21, 0xF7	; 247
    71a2:	ea 01       	movw	r28, r20
    71a4:	08 c0       	rjmp	.+16     	; 0x71b6 <UpdateServos+0x5a>
		}

		else if (temp1 < Config.Limits[i].minimum)
    71a6:	60 81       	ld	r22, Z
    71a8:	71 81       	ldd	r23, Z+1	; 0x01
		{
			ServoOut[i] = Config.Limits[i].minimum;
    71aa:	4b 5c       	subi	r20, 0xCB	; 203
    71ac:	57 4f       	sbci	r21, 0xF7	; 247
    71ae:	ea 01       	movw	r28, r20
		if (temp1 > Config.Limits[i].maximum)
		{
			ServoOut[i] = Config.Limits[i].maximum;
		}

		else if (temp1 < Config.Limits[i].minimum)
    71b0:	26 17       	cp	r18, r22
    71b2:	37 07       	cpc	r19, r23
    71b4:	1c f4       	brge	.+6      	; 0x71bc <UpdateServos+0x60>
		{
			ServoOut[i] = Config.Limits[i].minimum;
    71b6:	79 83       	std	Y+1, r23	; 0x01
    71b8:	68 83       	st	Y, r22
    71ba:	02 c0       	rjmp	.+4      	; 0x71c0 <UpdateServos+0x64>
		}

		// Transfer value to servo
		else
		{
			ServoOut[i] = temp1;
    71bc:	39 83       	std	Y+1, r19	; 0x01
    71be:	28 83       	st	Y, r18
    71c0:	01 96       	adiw	r24, 0x01	; 1
    71c2:	96 96       	adiw	r26, 0x26	; 38
    71c4:	34 96       	adiw	r30, 0x04	; 4
void UpdateServos(void)
{
	uint8_t i;
	int16_t temp1 = 0; // Output value

	for (i = 0; i < MIX_OUTPUTS; i++)
    71c6:	88 30       	cpi	r24, 0x08	; 8
    71c8:	91 05       	cpc	r25, r1
    71ca:	a1 f6       	brne	.-88     	; 0x7174 <UpdateServos+0x18>
		else
		{
			ServoOut[i] = temp1;
		}
	}
}
    71cc:	df 91       	pop	r29
    71ce:	cf 91       	pop	r28
    71d0:	1f 91       	pop	r17
    71d2:	0f 91       	pop	r16
    71d4:	08 95       	ret

000071d6 <scale32>:

// 32 bit multiply/scale for broken GCC
// Returns immediately if multiplier is 100, 0 or -100
int16_t scale32(int16_t value16, int16_t multiplier16)
{
    71d6:	9c 01       	movw	r18, r24
	int32_t temp32 = 0;
	int32_t mult32 = 0;

	// No change if 100% (no scaling)
	if (multiplier16 == 100)
    71d8:	64 36       	cpi	r22, 0x64	; 100
    71da:	71 05       	cpc	r23, r1
    71dc:	e9 f0       	breq	.+58     	; 0x7218 <scale32+0x42>
	{
		return value16;
	}

	// Reverse if -100%
	else if (multiplier16 == -100)
    71de:	6c 39       	cpi	r22, 0x9C	; 156
    71e0:	8f ef       	ldi	r24, 0xFF	; 255
    71e2:	78 07       	cpc	r23, r24
    71e4:	29 f4       	brne	.+10     	; 0x71f0 <scale32+0x1a>
	{
		return -value16;	
    71e6:	88 27       	eor	r24, r24
    71e8:	99 27       	eor	r25, r25
    71ea:	82 1b       	sub	r24, r18
    71ec:	93 0b       	sbc	r25, r19
    71ee:	08 95       	ret
	}

	// Zero if 0%
	else if (multiplier16 == 0)
    71f0:	61 15       	cp	r22, r1
    71f2:	71 05       	cpc	r23, r1
    71f4:	71 f0       	breq	.+28     	; 0x7212 <scale32+0x3c>
	else
	{
		// GCC is broken bad regarding multiplying 32 bit numbers, hence all this crap...
		mult32 = multiplier16;
		temp32 = value16;
		temp32 = temp32 * mult32;
    71f6:	db 01       	movw	r26, r22
    71f8:	0e 94 ba 49 	call	0x9374	; 0x9374 <__mulhisi3>

		// Divide by 100 and round to get scaled value
		temp32 = (temp32 + (int32_t)50) / (int32_t)100; // Constants need to be cast up to 32 bits
    71fc:	6e 5c       	subi	r22, 0xCE	; 206
    71fe:	7f 4f       	sbci	r23, 0xFF	; 255
    7200:	8f 4f       	sbci	r24, 0xFF	; 255
    7202:	9f 4f       	sbci	r25, 0xFF	; 255
    7204:	24 e6       	ldi	r18, 0x64	; 100
    7206:	30 e0       	ldi	r19, 0x00	; 0
    7208:	40 e0       	ldi	r20, 0x00	; 0
    720a:	50 e0       	ldi	r21, 0x00	; 0
    720c:	0e 94 95 49 	call	0x932a	; 0x932a <__divmodsi4>
    7210:	03 c0       	rjmp	.+6      	; 0x7218 <scale32+0x42>
	}

	// Zero if 0%
	else if (multiplier16 == 0)
	{
		return 0;	
    7212:	80 e0       	ldi	r24, 0x00	; 0
    7214:	90 e0       	ldi	r25, 0x00	; 0
    7216:	08 95       	ret
	int32_t mult32 = 0;

	// No change if 100% (no scaling)
	if (multiplier16 == 100)
	{
		return value16;
    7218:	c9 01       	movw	r24, r18
		temp32 = (temp32 + (int32_t)50) / (int32_t)100; // Constants need to be cast up to 32 bits
		value16 = (int16_t)temp32;
	}

	return value16;
}
    721a:	08 95       	ret

0000721c <ProcessMixer>:
//************************************************************
// Code
//************************************************************

void ProcessMixer(void)
{
    721c:	2f 92       	push	r2
    721e:	3f 92       	push	r3
    7220:	4f 92       	push	r4
    7222:	5f 92       	push	r5
    7224:	6f 92       	push	r6
    7226:	7f 92       	push	r7
    7228:	8f 92       	push	r8
    722a:	9f 92       	push	r9
    722c:	af 92       	push	r10
    722e:	bf 92       	push	r11
    7230:	cf 92       	push	r12
    7232:	df 92       	push	r13
    7234:	ef 92       	push	r14
    7236:	ff 92       	push	r15
    7238:	0f 93       	push	r16
    723a:	1f 93       	push	r17
    723c:	cf 93       	push	r28
    723e:	df 93       	push	r29
    7240:	cd b7       	in	r28, 0x3d	; 61
    7242:	de b7       	in	r29, 0x3e	; 62
    7244:	e2 97       	sbiw	r28, 0x32	; 50
    7246:	0f b6       	in	r0, 0x3f	; 63
    7248:	f8 94       	cli
    724a:	de bf       	out	0x3e, r29	; 62
    724c:	0f be       	out	0x3f, r0	; 63
    724e:	cd bf       	out	0x3d, r28	; 61
	int16_t	Step1 = 0;
	int16_t	Step2 = 0;
	int8_t	itemp8 = 0;

	// Copy the sensor data to an array for easy indexing - acc data is from accSmooth, increased to reasonable rates
	temp1 = (int16_t)accSmooth[ROLL] << 3;
    7250:	60 91 91 05 	lds	r22, 0x0591
    7254:	70 91 92 05 	lds	r23, 0x0592
    7258:	80 91 93 05 	lds	r24, 0x0593
    725c:	90 91 94 05 	lds	r25, 0x0594
    7260:	0e 94 01 48 	call	0x9002	; 0x9002 <__fixsfsi>
    7264:	8b 01       	movw	r16, r22
    7266:	83 e0       	ldi	r24, 0x03	; 3
    7268:	00 0f       	add	r16, r16
    726a:	11 1f       	adc	r17, r17
    726c:	8a 95       	dec	r24
    726e:	e1 f7       	brne	.-8      	; 0x7268 <ProcessMixer+0x4c>
	temp2 = (int16_t)accSmooth[PITCH] << 3;
    7270:	60 91 95 05 	lds	r22, 0x0595
    7274:	70 91 96 05 	lds	r23, 0x0596
    7278:	80 91 97 05 	lds	r24, 0x0597
    727c:	90 91 98 05 	lds	r25, 0x0598
    7280:	0e 94 01 48 	call	0x9002	; 0x9002 <__fixsfsi>
    7284:	93 e0       	ldi	r25, 0x03	; 3
    7286:	66 0f       	add	r22, r22
    7288:	77 1f       	adc	r23, r23
    728a:	9a 95       	dec	r25
    728c:	e1 f7       	brne	.-8      	; 0x7286 <ProcessMixer+0x6a>
	int16_t	SensorDataP1[7] = {PID_Gyros[P1][ROLL], PID_Gyros[P1][PITCH], PID_Gyros[P1][YAW], temp1, temp2, PID_ACCs[P1][ROLL], PID_ACCs[P1][PITCH]};
    728e:	40 90 09 08 	lds	r4, 0x0809
    7292:	50 90 0a 08 	lds	r5, 0x080A
    7296:	58 8a       	std	Y+16, r5	; 0x10
    7298:	4f 86       	std	Y+15, r4	; 0x0f
    729a:	20 91 0b 08 	lds	r18, 0x080B
    729e:	30 91 0c 08 	lds	r19, 0x080C
    72a2:	38 a3       	std	Y+32, r19	; 0x20
    72a4:	2f 8f       	std	Y+31, r18	; 0x1f
    72a6:	3a 8b       	std	Y+18, r19	; 0x12
    72a8:	29 8b       	std	Y+17, r18	; 0x11
    72aa:	40 91 0d 08 	lds	r20, 0x080D
    72ae:	50 91 0e 08 	lds	r21, 0x080E
    72b2:	5a a3       	std	Y+34, r21	; 0x22
    72b4:	49 a3       	std	Y+33, r20	; 0x21
    72b6:	5c 8b       	std	Y+20, r21	; 0x14
    72b8:	4b 8b       	std	Y+19, r20	; 0x13
    72ba:	1e 8b       	std	Y+22, r17	; 0x16
    72bc:	0d 8b       	std	Y+21, r16	; 0x15
    72be:	78 8f       	std	Y+24, r23	; 0x18
    72c0:	6f 8b       	std	Y+23, r22	; 0x17
    72c2:	20 91 15 08 	lds	r18, 0x0815
    72c6:	30 91 16 08 	lds	r19, 0x0816
    72ca:	3c a3       	std	Y+36, r19	; 0x24
    72cc:	2b a3       	std	Y+35, r18	; 0x23
    72ce:	3a 8f       	std	Y+26, r19	; 0x1a
    72d0:	29 8f       	std	Y+25, r18	; 0x19
    72d2:	40 91 17 08 	lds	r20, 0x0817
    72d6:	50 91 18 08 	lds	r21, 0x0818
    72da:	5e a3       	std	Y+38, r21	; 0x26
    72dc:	4d a3       	std	Y+37, r20	; 0x25
    72de:	5c 8f       	std	Y+28, r21	; 0x1c
    72e0:	4b 8f       	std	Y+27, r20	; 0x1b
	int16_t	SensorDataP2[7] = {PID_Gyros[P2][ROLL], PID_Gyros[P2][PITCH], PID_Gyros[P2][YAW], temp1, temp2, PID_ACCs[P2][ROLL], PID_ACCs[P2][PITCH]}; 
    72e2:	20 91 0f 08 	lds	r18, 0x080F
    72e6:	30 91 10 08 	lds	r19, 0x0810
    72ea:	38 a7       	std	Y+40, r19	; 0x28
    72ec:	2f a3       	std	Y+39, r18	; 0x27
    72ee:	3a 83       	std	Y+2, r19	; 0x02
    72f0:	29 83       	std	Y+1, r18	; 0x01
    72f2:	40 91 11 08 	lds	r20, 0x0811
    72f6:	50 91 12 08 	lds	r21, 0x0812
    72fa:	5a a7       	std	Y+42, r21	; 0x2a
    72fc:	49 a7       	std	Y+41, r20	; 0x29
    72fe:	5c 83       	std	Y+4, r21	; 0x04
    7300:	4b 83       	std	Y+3, r20	; 0x03
    7302:	20 90 13 08 	lds	r2, 0x0813
    7306:	30 90 14 08 	lds	r3, 0x0814
    730a:	3e 82       	std	Y+6, r3	; 0x06
    730c:	2d 82       	std	Y+5, r2	; 0x05
    730e:	18 87       	std	Y+8, r17	; 0x08
    7310:	0f 83       	std	Y+7, r16	; 0x07
    7312:	7a 87       	std	Y+10, r23	; 0x0a
    7314:	69 87       	std	Y+9, r22	; 0x09
    7316:	a0 90 1b 08 	lds	r10, 0x081B
    731a:	b0 90 1c 08 	lds	r11, 0x081C
    731e:	bc 86       	std	Y+12, r11	; 0x0c
    7320:	ab 86       	std	Y+11, r10	; 0x0b
    7322:	80 90 1d 08 	lds	r8, 0x081D
    7326:	90 90 1e 08 	lds	r9, 0x081E
    732a:	9e 86       	std	Y+14, r9	; 0x0e
    732c:	8d 86       	std	Y+13, r8	; 0x0d
		//************************************************************
		// Mix in gyros
		//************************************************************ 

		// P1 gyros
		if (Transition_state < TRANS_P2)
    732e:	50 91 21 05 	lds	r21, 0x0521
    7332:	5d 8f       	std	Y+29, r21	; 0x1d
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P1_throttle_volume < 0 )
					{
						P1_solution = P1_solution + PID_ACCs[P1][YAW];			// Reverse if volume negative
    7334:	20 91 19 08 	lds	r18, 0x0819
    7338:	30 91 1a 08 	lds	r19, 0x081A
    733c:	3c a7       	std	Y+44, r19	; 0x2c
    733e:	2b a7       	std	Y+43, r18	; 0x2b
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P2_throttle_volume < 0 )
					{
						P2_solution = P2_solution + PID_ACCs[P2][YAW];			// Reverse if volume negative
    7340:	40 91 1f 08 	lds	r20, 0x081F
    7344:	50 91 20 08 	lds	r21, 0x0820
    7348:	5e a7       	std	Y+46, r21	; 0x2e
    734a:	4d a7       	std	Y+45, r20	; 0x2d
    734c:	c1 2c       	mov	r12, r1
    734e:	d1 2c       	mov	r13, r1
					{
						P2_solution = P2_solution + PID_Gyros[P2][ROLL];		// Reverse if volume negative
					}
					else
					{
						P2_solution = P2_solution - PID_Gyros[P2][ROLL];
    7350:	2f a1       	ldd	r18, Y+39	; 0x27
    7352:	38 a5       	ldd	r19, Y+40	; 0x28
    7354:	31 95       	neg	r19
    7356:	21 95       	neg	r18
    7358:	31 09       	sbc	r19, r1
    735a:	38 ab       	std	Y+48, r19	; 0x30
    735c:	2f a7       	std	Y+47, r18	; 0x2f
					{
						P1_solution = P1_solution + PID_Gyros[P1][ROLL];		// Reverse if volume negative
					}
					else
					{
						P1_solution = P1_solution - PID_Gyros[P1][ROLL];
    735e:	44 27       	eor	r20, r20
    7360:	55 27       	eor	r21, r21
    7362:	44 19       	sub	r20, r4
    7364:	55 09       	sbc	r21, r5
    7366:	5a ab       	std	Y+50, r21	; 0x32
    7368:	49 ab       	std	Y+49, r20	; 0x31
		//************************************************************
		// Mix in gyros
		//************************************************************ 

		// P1 gyros
		if (Transition_state < TRANS_P2)
    736a:	5d 8d       	ldd	r21, Y+29	; 0x1d
    736c:	59 30       	cpi	r21, 0x09	; 9
    736e:	08 f0       	brcs	.+2      	; 0x7372 <ProcessMixer+0x156>
    7370:	79 c0       	rjmp	.+242    	; 0x7464 <ProcessMixer+0x248>
    7372:	86 01       	movw	r16, r12
    7374:	07 55       	subi	r16, 0x57	; 87
    7376:	1a 4f       	sbci	r17, 0xFA	; 250
    7378:	f8 01       	movw	r30, r16
    737a:	ec 55       	subi	r30, 0x5C	; 92
    737c:	ff 4f       	sbci	r31, 0xFF	; 255
		{
			switch (Config.Channel[i].P1_Roll_gyro) 
    737e:	80 81       	ld	r24, Z
    7380:	81 30       	cpi	r24, 0x01	; 1
    7382:	91 f0       	breq	.+36     	; 0x73a8 <ProcessMixer+0x18c>
    7384:	82 30       	cpi	r24, 0x02	; 2
    7386:	c9 f4       	brne	.+50     	; 0x73ba <ProcessMixer+0x19e>
    7388:	f8 01       	movw	r30, r16
    738a:	e2 56       	subi	r30, 0x62	; 98
    738c:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P1_solution = P1_solution - PID_Gyros[P1][ROLL];
					}
					break;
				case SCALE:
					P1_solution = P1_solution - scale32(PID_Gyros[P1][ROLL], Config.Channel[i].P1_aileron_volume * 5); 
    738e:	60 81       	ld	r22, Z
    7390:	85 e0       	ldi	r24, 0x05	; 5
    7392:	68 02       	muls	r22, r24
    7394:	b0 01       	movw	r22, r0
    7396:	11 24       	eor	r1, r1
    7398:	c2 01       	movw	r24, r4
    739a:	0e 94 eb 38 	call	0x71d6	; 0x71d6 <scale32>
    739e:	ee 24       	eor	r14, r14
    73a0:	ff 24       	eor	r15, r15
    73a2:	e8 1a       	sub	r14, r24
    73a4:	f9 0a       	sbc	r15, r25
					break;
    73a6:	0d c0       	rjmp	.+26     	; 0x73c2 <ProcessMixer+0x1a6>
    73a8:	f8 01       	movw	r30, r16
    73aa:	e2 56       	subi	r30, 0x62	; 98
    73ac:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P1_Roll_gyro) 
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P1_aileron_volume < 0 )
    73ae:	80 81       	ld	r24, Z
    73b0:	87 fd       	sbrc	r24, 7
    73b2:	06 c0       	rjmp	.+12     	; 0x73c0 <ProcessMixer+0x1a4>
					{
						P1_solution = P1_solution + PID_Gyros[P1][ROLL];		// Reverse if volume negative
					}
					else
					{
						P1_solution = P1_solution - PID_Gyros[P1][ROLL];
    73b4:	e9 a8       	ldd	r14, Y+49	; 0x31
    73b6:	fa a8       	ldd	r15, Y+50	; 0x32
    73b8:	04 c0       	rjmp	.+8      	; 0x73c2 <ProcessMixer+0x1a6>
	{
		//************************************************************
		// Zero each channel value to start
		//************************************************************

		P1_solution = 0;
    73ba:	e1 2c       	mov	r14, r1
    73bc:	f1 2c       	mov	r15, r1
    73be:	01 c0       	rjmp	.+2      	; 0x73c2 <ProcessMixer+0x1a6>
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P1_aileron_volume < 0 )
					{
						P1_solution = P1_solution + PID_Gyros[P1][ROLL];		// Reverse if volume negative
    73c0:	72 01       	movw	r14, r4
    73c2:	f8 01       	movw	r30, r16
    73c4:	ea 55       	subi	r30, 0x5A	; 90
    73c6:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				default:
					break;	
			}

			switch (Config.Channel[i].P1_Pitch_gyro)
    73c8:	80 81       	ld	r24, Z
    73ca:	81 30       	cpi	r24, 0x01	; 1
    73cc:	89 f0       	breq	.+34     	; 0x73f0 <ProcessMixer+0x1d4>
    73ce:	82 30       	cpi	r24, 0x02	; 2
    73d0:	f1 f4       	brne	.+60     	; 0x740e <ProcessMixer+0x1f2>
    73d2:	f8 01       	movw	r30, r16
    73d4:	e0 56       	subi	r30, 0x60	; 96
    73d6:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P1_solution = P1_solution + PID_Gyros[P1][PITCH];
					}
					break;
				case SCALE:
					P1_solution = P1_solution - scale32(PID_Gyros[P1][PITCH], Config.Channel[i].P1_elevator_volume * 5);
    73d8:	60 81       	ld	r22, Z
    73da:	55 e0       	ldi	r21, 0x05	; 5
    73dc:	65 02       	muls	r22, r21
    73de:	b0 01       	movw	r22, r0
    73e0:	11 24       	eor	r1, r1
    73e2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    73e4:	98 a1       	ldd	r25, Y+32	; 0x20
    73e6:	0e 94 eb 38 	call	0x71d6	; 0x71d6 <scale32>
    73ea:	e8 1a       	sub	r14, r24
    73ec:	f9 0a       	sbc	r15, r25
					break;
    73ee:	0f c0       	rjmp	.+30     	; 0x740e <ProcessMixer+0x1f2>
    73f0:	f8 01       	movw	r30, r16
    73f2:	e0 56       	subi	r30, 0x60	; 96
    73f4:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P1_Pitch_gyro)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P1_elevator_volume < 0 )
    73f6:	80 81       	ld	r24, Z
    73f8:	87 ff       	sbrs	r24, 7
    73fa:	05 c0       	rjmp	.+10     	; 0x7406 <ProcessMixer+0x1ea>
					{
						P1_solution = P1_solution - PID_Gyros[P1][PITCH];		// Reverse if volume negative
    73fc:	2f 8d       	ldd	r18, Y+31	; 0x1f
    73fe:	38 a1       	ldd	r19, Y+32	; 0x20
    7400:	e2 1a       	sub	r14, r18
    7402:	f3 0a       	sbc	r15, r19
    7404:	04 c0       	rjmp	.+8      	; 0x740e <ProcessMixer+0x1f2>
					}
					else
					{
						P1_solution = P1_solution + PID_Gyros[P1][PITCH];
    7406:	4f 8d       	ldd	r20, Y+31	; 0x1f
    7408:	58 a1       	ldd	r21, Y+32	; 0x20
    740a:	e4 0e       	add	r14, r20
    740c:	f5 1e       	adc	r15, r21
    740e:	f8 01       	movw	r30, r16
    7410:	e8 55       	subi	r30, 0x58	; 88
    7412:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				default:
					break;
			}

			switch (Config.Channel[i].P1_Yaw_gyro)
    7414:	80 81       	ld	r24, Z
    7416:	81 30       	cpi	r24, 0x01	; 1
    7418:	89 f0       	breq	.+34     	; 0x743c <ProcessMixer+0x220>
    741a:	82 30       	cpi	r24, 0x02	; 2
    741c:	f1 f4       	brne	.+60     	; 0x745a <ProcessMixer+0x23e>
    741e:	f8 01       	movw	r30, r16
    7420:	ee 55       	subi	r30, 0x5E	; 94
    7422:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P1_solution = P1_solution + PID_Gyros[P1][YAW];
					}
					break;
				case SCALE:
					P1_solution = P1_solution - scale32(PID_Gyros[P1][YAW], Config.Channel[i].P1_rudder_volume * 5);
    7424:	60 81       	ld	r22, Z
    7426:	55 e0       	ldi	r21, 0x05	; 5
    7428:	65 02       	muls	r22, r21
    742a:	b0 01       	movw	r22, r0
    742c:	11 24       	eor	r1, r1
    742e:	89 a1       	ldd	r24, Y+33	; 0x21
    7430:	9a a1       	ldd	r25, Y+34	; 0x22
    7432:	0e 94 eb 38 	call	0x71d6	; 0x71d6 <scale32>
    7436:	e8 1a       	sub	r14, r24
    7438:	f9 0a       	sbc	r15, r25
					break;
    743a:	0f c0       	rjmp	.+30     	; 0x745a <ProcessMixer+0x23e>
    743c:	f8 01       	movw	r30, r16
    743e:	ee 55       	subi	r30, 0x5E	; 94
    7440:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P1_Yaw_gyro)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P1_rudder_volume < 0 )
    7442:	80 81       	ld	r24, Z
    7444:	87 ff       	sbrs	r24, 7
    7446:	05 c0       	rjmp	.+10     	; 0x7452 <ProcessMixer+0x236>
					{
						P1_solution = P1_solution - PID_Gyros[P1][YAW];			// Reverse if volume negative
    7448:	29 a1       	ldd	r18, Y+33	; 0x21
    744a:	3a a1       	ldd	r19, Y+34	; 0x22
    744c:	e2 1a       	sub	r14, r18
    744e:	f3 0a       	sbc	r15, r19
    7450:	04 c0       	rjmp	.+8      	; 0x745a <ProcessMixer+0x23e>
					}
					else
					{
						P1_solution = P1_solution + PID_Gyros[P1][YAW];
    7452:	49 a1       	ldd	r20, Y+33	; 0x21
    7454:	5a a1       	ldd	r21, Y+34	; 0x22
    7456:	e4 0e       	add	r14, r20
    7458:	f5 1e       	adc	r15, r21
					break;
			}
		}

		// P2 gyros
		if (Transition_state > TRANS_P1)
    745a:	2d 8d       	ldd	r18, Y+29	; 0x1d
    745c:	22 23       	and	r18, r18
    745e:	09 f4       	brne	.+2      	; 0x7462 <ProcessMixer+0x246>
    7460:	7a c0       	rjmp	.+244    	; 0x7556 <ProcessMixer+0x33a>
    7462:	02 c0       	rjmp	.+4      	; 0x7468 <ProcessMixer+0x24c>
	{
		//************************************************************
		// Zero each channel value to start
		//************************************************************

		P1_solution = 0;
    7464:	e1 2c       	mov	r14, r1
    7466:	f1 2c       	mov	r15, r1
    7468:	a6 01       	movw	r20, r12
    746a:	47 55       	subi	r20, 0x57	; 87
    746c:	5a 4f       	sbci	r21, 0xFA	; 250
    746e:	3a 01       	movw	r6, r20
    7470:	fa 01       	movw	r30, r20
    7472:	eb 55       	subi	r30, 0x5B	; 91
    7474:	ff 4f       	sbci	r31, 0xFF	; 255
		}

		// P2 gyros
		if (Transition_state > TRANS_P1)
		{
			switch (Config.Channel[i].P2_Roll_gyro)
    7476:	80 81       	ld	r24, Z
    7478:	81 30       	cpi	r24, 0x01	; 1
    747a:	99 f0       	breq	.+38     	; 0x74a2 <ProcessMixer+0x286>
    747c:	82 30       	cpi	r24, 0x02	; 2
    747e:	d1 f4       	brne	.+52     	; 0x74b4 <ProcessMixer+0x298>
    7480:	fa 01       	movw	r30, r20
    7482:	e1 56       	subi	r30, 0x61	; 97
    7484:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P2_solution = P2_solution - PID_Gyros[P2][ROLL];
					}
					break;
				case SCALE:
					P2_solution = P2_solution - scale32(PID_Gyros[P2][ROLL], Config.Channel[i].P2_aileron_volume * 5);
    7486:	60 81       	ld	r22, Z
    7488:	55 e0       	ldi	r21, 0x05	; 5
    748a:	65 02       	muls	r22, r21
    748c:	b0 01       	movw	r22, r0
    748e:	11 24       	eor	r1, r1
    7490:	8f a1       	ldd	r24, Y+39	; 0x27
    7492:	98 a5       	ldd	r25, Y+40	; 0x28
    7494:	0e 94 eb 38 	call	0x71d6	; 0x71d6 <scale32>
    7498:	00 27       	eor	r16, r16
    749a:	11 27       	eor	r17, r17
    749c:	08 1b       	sub	r16, r24
    749e:	19 0b       	sbc	r17, r25
					break;
    74a0:	0e c0       	rjmp	.+28     	; 0x74be <ProcessMixer+0x2a2>
    74a2:	fa 01       	movw	r30, r20
    74a4:	e1 56       	subi	r30, 0x61	; 97
    74a6:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P2_Roll_gyro)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P2_aileron_volume < 0 )
    74a8:	80 81       	ld	r24, Z
    74aa:	87 fd       	sbrc	r24, 7
    74ac:	06 c0       	rjmp	.+12     	; 0x74ba <ProcessMixer+0x29e>
					{
						P2_solution = P2_solution + PID_Gyros[P2][ROLL];		// Reverse if volume negative
					}
					else
					{
						P2_solution = P2_solution - PID_Gyros[P2][ROLL];
    74ae:	0f a5       	ldd	r16, Y+47	; 0x2f
    74b0:	18 a9       	ldd	r17, Y+48	; 0x30
    74b2:	05 c0       	rjmp	.+10     	; 0x74be <ProcessMixer+0x2a2>
		//************************************************************
		// Zero each channel value to start
		//************************************************************

		P1_solution = 0;
		P2_solution = 0;
    74b4:	00 e0       	ldi	r16, 0x00	; 0
    74b6:	10 e0       	ldi	r17, 0x00	; 0
    74b8:	02 c0       	rjmp	.+4      	; 0x74be <ProcessMixer+0x2a2>
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P2_aileron_volume < 0 )
					{
						P2_solution = P2_solution + PID_Gyros[P2][ROLL];		// Reverse if volume negative
    74ba:	0f a1       	ldd	r16, Y+39	; 0x27
    74bc:	18 a5       	ldd	r17, Y+40	; 0x28
    74be:	f3 01       	movw	r30, r6
    74c0:	e9 55       	subi	r30, 0x59	; 89
    74c2:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				default:
					break;
			}

			switch (Config.Channel[i].P2_Pitch_gyro)
    74c4:	80 81       	ld	r24, Z
    74c6:	81 30       	cpi	r24, 0x01	; 1
    74c8:	89 f0       	breq	.+34     	; 0x74ec <ProcessMixer+0x2d0>
    74ca:	82 30       	cpi	r24, 0x02	; 2
    74cc:	f1 f4       	brne	.+60     	; 0x750a <ProcessMixer+0x2ee>
    74ce:	f3 01       	movw	r30, r6
    74d0:	ef 55       	subi	r30, 0x5F	; 95
    74d2:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P2_solution = P2_solution + PID_Gyros[P2][PITCH];
					}
					break;
				case SCALE:
					P2_solution = P2_solution - scale32(PID_Gyros[P2][PITCH], Config.Channel[i].P2_elevator_volume * 5);
    74d4:	60 81       	ld	r22, Z
    74d6:	55 e0       	ldi	r21, 0x05	; 5
    74d8:	65 02       	muls	r22, r21
    74da:	b0 01       	movw	r22, r0
    74dc:	11 24       	eor	r1, r1
    74de:	89 a5       	ldd	r24, Y+41	; 0x29
    74e0:	9a a5       	ldd	r25, Y+42	; 0x2a
    74e2:	0e 94 eb 38 	call	0x71d6	; 0x71d6 <scale32>
    74e6:	08 1b       	sub	r16, r24
    74e8:	19 0b       	sbc	r17, r25
					break;
    74ea:	0f c0       	rjmp	.+30     	; 0x750a <ProcessMixer+0x2ee>
    74ec:	f3 01       	movw	r30, r6
    74ee:	ef 55       	subi	r30, 0x5F	; 95
    74f0:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P2_Pitch_gyro)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P2_elevator_volume < 0 )
    74f2:	80 81       	ld	r24, Z
    74f4:	87 ff       	sbrs	r24, 7
    74f6:	05 c0       	rjmp	.+10     	; 0x7502 <ProcessMixer+0x2e6>
					{
						P2_solution = P2_solution - PID_Gyros[P2][PITCH];		// Reverse if volume negative
    74f8:	29 a5       	ldd	r18, Y+41	; 0x29
    74fa:	3a a5       	ldd	r19, Y+42	; 0x2a
    74fc:	02 1b       	sub	r16, r18
    74fe:	13 0b       	sbc	r17, r19
    7500:	04 c0       	rjmp	.+8      	; 0x750a <ProcessMixer+0x2ee>
					}
					else
					{
						P2_solution = P2_solution + PID_Gyros[P2][PITCH];
    7502:	49 a5       	ldd	r20, Y+41	; 0x29
    7504:	5a a5       	ldd	r21, Y+42	; 0x2a
    7506:	04 0f       	add	r16, r20
    7508:	15 1f       	adc	r17, r21
    750a:	f3 01       	movw	r30, r6
    750c:	e7 55       	subi	r30, 0x57	; 87
    750e:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				default:
					break;
			}

			switch (Config.Channel[i].P2_Yaw_gyro)
    7510:	80 81       	ld	r24, Z
    7512:	81 30       	cpi	r24, 0x01	; 1
    7514:	81 f0       	breq	.+32     	; 0x7536 <ProcessMixer+0x31a>
    7516:	82 30       	cpi	r24, 0x02	; 2
    7518:	c9 f4       	brne	.+50     	; 0x754c <ProcessMixer+0x330>
    751a:	f3 01       	movw	r30, r6
    751c:	ed 55       	subi	r30, 0x5D	; 93
    751e:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P2_solution = P2_solution + PID_Gyros[P2][YAW];
					}
					break;
				case SCALE:
					P2_solution = P2_solution - scale32(PID_Gyros[P2][YAW], Config.Channel[i].P2_rudder_volume * 5);
    7520:	60 81       	ld	r22, Z
    7522:	85 e0       	ldi	r24, 0x05	; 5
    7524:	68 02       	muls	r22, r24
    7526:	b0 01       	movw	r22, r0
    7528:	11 24       	eor	r1, r1
    752a:	c1 01       	movw	r24, r2
    752c:	0e 94 eb 38 	call	0x71d6	; 0x71d6 <scale32>
    7530:	08 1b       	sub	r16, r24
    7532:	19 0b       	sbc	r17, r25
					break;
    7534:	0b c0       	rjmp	.+22     	; 0x754c <ProcessMixer+0x330>
    7536:	f3 01       	movw	r30, r6
    7538:	ed 55       	subi	r30, 0x5D	; 93
    753a:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P2_Yaw_gyro)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P2_rudder_volume < 0 )
    753c:	80 81       	ld	r24, Z
    753e:	87 ff       	sbrs	r24, 7
    7540:	03 c0       	rjmp	.+6      	; 0x7548 <ProcessMixer+0x32c>
					{
						P2_solution = P2_solution - PID_Gyros[P2][YAW];			// Reverse if volume negative
    7542:	02 19       	sub	r16, r2
    7544:	13 09       	sbc	r17, r3
    7546:	02 c0       	rjmp	.+4      	; 0x754c <ProcessMixer+0x330>
					}
					else
					{
						P2_solution = P2_solution + PID_Gyros[P2][YAW];
    7548:	02 0d       	add	r16, r2
    754a:	13 1d       	adc	r17, r3

		//************************************************************
		// Mix in accelerometers
		//************************************************************ 
		// P1
		if (Transition_state < TRANS_P2)
    754c:	2d 8d       	ldd	r18, Y+29	; 0x1d
    754e:	29 30       	cpi	r18, 0x09	; 9
    7550:	08 f0       	brcs	.+2      	; 0x7554 <ProcessMixer+0x338>
    7552:	7d c0       	rjmp	.+250    	; 0x764e <ProcessMixer+0x432>
    7554:	02 c0       	rjmp	.+4      	; 0x755a <ProcessMixer+0x33e>
		//************************************************************
		// Zero each channel value to start
		//************************************************************

		P1_solution = 0;
		P2_solution = 0;
    7556:	00 e0       	ldi	r16, 0x00	; 0
    7558:	10 e0       	ldi	r17, 0x00	; 0
    755a:	a6 01       	movw	r20, r12
    755c:	47 55       	subi	r20, 0x57	; 87
    755e:	5a 4f       	sbci	r21, 0xFA	; 250
    7560:	3a 01       	movw	r6, r20
    7562:	fa 01       	movw	r30, r20
    7564:	e6 55       	subi	r30, 0x56	; 86
    7566:	ff 4f       	sbci	r31, 0xFF	; 255
		// Mix in accelerometers
		//************************************************************ 
		// P1
		if (Transition_state < TRANS_P2)
		{
			switch (Config.Channel[i].P1_Roll_acc)
    7568:	80 81       	ld	r24, Z
    756a:	81 30       	cpi	r24, 0x01	; 1
    756c:	89 f0       	breq	.+34     	; 0x7590 <ProcessMixer+0x374>
    756e:	82 30       	cpi	r24, 0x02	; 2
    7570:	f1 f4       	brne	.+60     	; 0x75ae <ProcessMixer+0x392>
    7572:	fa 01       	movw	r30, r20
    7574:	e2 56       	subi	r30, 0x62	; 98
    7576:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P1_solution = P1_solution - PID_ACCs[P1][ROLL];			// or simply add
					}
					break;
				case SCALE:
					P1_solution = P1_solution - scale32(PID_ACCs[P1][ROLL], Config.Channel[i].P1_aileron_volume * 5);
    7578:	60 81       	ld	r22, Z
    757a:	55 e0       	ldi	r21, 0x05	; 5
    757c:	65 02       	muls	r22, r21
    757e:	b0 01       	movw	r22, r0
    7580:	11 24       	eor	r1, r1
    7582:	8b a1       	ldd	r24, Y+35	; 0x23
    7584:	9c a1       	ldd	r25, Y+36	; 0x24
    7586:	0e 94 eb 38 	call	0x71d6	; 0x71d6 <scale32>
    758a:	e8 1a       	sub	r14, r24
    758c:	f9 0a       	sbc	r15, r25
					break;
    758e:	0f c0       	rjmp	.+30     	; 0x75ae <ProcessMixer+0x392>
    7590:	fa 01       	movw	r30, r20
    7592:	e2 56       	subi	r30, 0x62	; 98
    7594:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P1_Roll_acc)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P1_aileron_volume < 0 )
    7596:	80 81       	ld	r24, Z
    7598:	87 ff       	sbrs	r24, 7
    759a:	05 c0       	rjmp	.+10     	; 0x75a6 <ProcessMixer+0x38a>
					{
						P1_solution = P1_solution + PID_ACCs[P1][ROLL];			// Reverse if volume negative
    759c:	2b a1       	ldd	r18, Y+35	; 0x23
    759e:	3c a1       	ldd	r19, Y+36	; 0x24
    75a0:	e2 0e       	add	r14, r18
    75a2:	f3 1e       	adc	r15, r19
    75a4:	04 c0       	rjmp	.+8      	; 0x75ae <ProcessMixer+0x392>
					}
					else
					{
						P1_solution = P1_solution - PID_ACCs[P1][ROLL];			// or simply add
    75a6:	4b a1       	ldd	r20, Y+35	; 0x23
    75a8:	5c a1       	ldd	r21, Y+36	; 0x24
    75aa:	e4 1a       	sub	r14, r20
    75ac:	f5 0a       	sbc	r15, r21
    75ae:	f3 01       	movw	r30, r6
    75b0:	e4 55       	subi	r30, 0x54	; 84
    75b2:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				default:
					break;
			}			

			switch (Config.Channel[i].P1_Pitch_acc)
    75b4:	80 81       	ld	r24, Z
    75b6:	81 30       	cpi	r24, 0x01	; 1
    75b8:	89 f0       	breq	.+34     	; 0x75dc <ProcessMixer+0x3c0>
    75ba:	82 30       	cpi	r24, 0x02	; 2
    75bc:	f1 f4       	brne	.+60     	; 0x75fa <ProcessMixer+0x3de>
    75be:	f3 01       	movw	r30, r6
    75c0:	e0 56       	subi	r30, 0x60	; 96
    75c2:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P1_solution = P1_solution + PID_ACCs[P1][PITCH];
					}
					break;
				case SCALE:
					P1_solution = P1_solution - scale32(PID_ACCs[P1][PITCH], Config.Channel[i].P1_elevator_volume * 5);
    75c4:	60 81       	ld	r22, Z
    75c6:	55 e0       	ldi	r21, 0x05	; 5
    75c8:	65 02       	muls	r22, r21
    75ca:	b0 01       	movw	r22, r0
    75cc:	11 24       	eor	r1, r1
    75ce:	8d a1       	ldd	r24, Y+37	; 0x25
    75d0:	9e a1       	ldd	r25, Y+38	; 0x26
    75d2:	0e 94 eb 38 	call	0x71d6	; 0x71d6 <scale32>
    75d6:	e8 1a       	sub	r14, r24
    75d8:	f9 0a       	sbc	r15, r25
					break;
    75da:	0f c0       	rjmp	.+30     	; 0x75fa <ProcessMixer+0x3de>
    75dc:	f3 01       	movw	r30, r6
    75de:	e0 56       	subi	r30, 0x60	; 96
    75e0:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P1_Pitch_acc)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P1_elevator_volume < 0 )
    75e2:	80 81       	ld	r24, Z
    75e4:	87 ff       	sbrs	r24, 7
    75e6:	05 c0       	rjmp	.+10     	; 0x75f2 <ProcessMixer+0x3d6>
					{
						P1_solution = P1_solution - PID_ACCs[P1][PITCH];		// Reverse if volume negative
    75e8:	2d a1       	ldd	r18, Y+37	; 0x25
    75ea:	3e a1       	ldd	r19, Y+38	; 0x26
    75ec:	e2 1a       	sub	r14, r18
    75ee:	f3 0a       	sbc	r15, r19
    75f0:	04 c0       	rjmp	.+8      	; 0x75fa <ProcessMixer+0x3de>
					}
					else
					{
						P1_solution = P1_solution + PID_ACCs[P1][PITCH];
    75f2:	4d a1       	ldd	r20, Y+37	; 0x25
    75f4:	5e a1       	ldd	r21, Y+38	; 0x26
    75f6:	e4 0e       	add	r14, r20
    75f8:	f5 1e       	adc	r15, r21
    75fa:	f3 01       	movw	r30, r6
    75fc:	e2 55       	subi	r30, 0x52	; 82
    75fe:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				default:
					break;
			}

			switch (Config.Channel[i].P1_Z_delta_acc)
    7600:	80 81       	ld	r24, Z
    7602:	81 30       	cpi	r24, 0x01	; 1
    7604:	89 f0       	breq	.+34     	; 0x7628 <ProcessMixer+0x40c>
    7606:	82 30       	cpi	r24, 0x02	; 2
    7608:	f1 f4       	brne	.+60     	; 0x7646 <ProcessMixer+0x42a>
    760a:	f3 01       	movw	r30, r6
    760c:	e5 56       	subi	r30, 0x65	; 101
    760e:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P1_solution = P1_solution - PID_ACCs[P1][YAW];
					}
					break;
				case SCALE:
					P1_solution = P1_solution - scale32(PID_ACCs[P1][YAW], Config.Channel[i].P1_throttle_volume * 5);
    7610:	60 81       	ld	r22, Z
    7612:	55 e0       	ldi	r21, 0x05	; 5
    7614:	65 02       	muls	r22, r21
    7616:	b0 01       	movw	r22, r0
    7618:	11 24       	eor	r1, r1
    761a:	8b a5       	ldd	r24, Y+43	; 0x2b
    761c:	9c a5       	ldd	r25, Y+44	; 0x2c
    761e:	0e 94 eb 38 	call	0x71d6	; 0x71d6 <scale32>
    7622:	e8 1a       	sub	r14, r24
    7624:	f9 0a       	sbc	r15, r25
					break;
    7626:	0f c0       	rjmp	.+30     	; 0x7646 <ProcessMixer+0x42a>
    7628:	f3 01       	movw	r30, r6
    762a:	e5 56       	subi	r30, 0x65	; 101
    762c:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P1_Z_delta_acc)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P1_throttle_volume < 0 )
    762e:	80 81       	ld	r24, Z
    7630:	87 ff       	sbrs	r24, 7
    7632:	05 c0       	rjmp	.+10     	; 0x763e <ProcessMixer+0x422>
					{
						P1_solution = P1_solution + PID_ACCs[P1][YAW];			// Reverse if volume negative
    7634:	2b a5       	ldd	r18, Y+43	; 0x2b
    7636:	3c a5       	ldd	r19, Y+44	; 0x2c
    7638:	e2 0e       	add	r14, r18
    763a:	f3 1e       	adc	r15, r19
    763c:	04 c0       	rjmp	.+8      	; 0x7646 <ProcessMixer+0x42a>
					}
					else
					{
						P1_solution = P1_solution - PID_ACCs[P1][YAW];
    763e:	4b a5       	ldd	r20, Y+43	; 0x2b
    7640:	5c a5       	ldd	r21, Y+44	; 0x2c
    7642:	e4 1a       	sub	r14, r20
    7644:	f5 0a       	sbc	r15, r21
					break;
			}
		}

		// P2
		if (Transition_state > TRANS_P1)
    7646:	2d 8d       	ldd	r18, Y+29	; 0x1d
    7648:	22 23       	and	r18, r18
    764a:	09 f4       	brne	.+2      	; 0x764e <ProcessMixer+0x432>
    764c:	70 c0       	rjmp	.+224    	; 0x772e <ProcessMixer+0x512>
    764e:	a6 01       	movw	r20, r12
    7650:	47 55       	subi	r20, 0x57	; 87
    7652:	5a 4f       	sbci	r21, 0xFA	; 250
    7654:	3a 01       	movw	r6, r20
    7656:	fa 01       	movw	r30, r20
    7658:	e5 55       	subi	r30, 0x55	; 85
    765a:	ff 4f       	sbci	r31, 0xFF	; 255
		{
			switch (Config.Channel[i].P2_Roll_acc)
    765c:	80 81       	ld	r24, Z
    765e:	81 30       	cpi	r24, 0x01	; 1
    7660:	81 f0       	breq	.+32     	; 0x7682 <ProcessMixer+0x466>
    7662:	82 30       	cpi	r24, 0x02	; 2
    7664:	c9 f4       	brne	.+50     	; 0x7698 <ProcessMixer+0x47c>
    7666:	fa 01       	movw	r30, r20
    7668:	e1 56       	subi	r30, 0x61	; 97
    766a:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P2_solution = P2_solution - PID_ACCs[P2][ROLL];			// or simply add
					}
					break;
				case SCALE:
					P2_solution = P2_solution - scale32(PID_ACCs[P2][ROLL], Config.Channel[i].P2_aileron_volume * 5);
    766c:	60 81       	ld	r22, Z
    766e:	55 e0       	ldi	r21, 0x05	; 5
    7670:	65 02       	muls	r22, r21
    7672:	b0 01       	movw	r22, r0
    7674:	11 24       	eor	r1, r1
    7676:	c5 01       	movw	r24, r10
    7678:	0e 94 eb 38 	call	0x71d6	; 0x71d6 <scale32>
    767c:	08 1b       	sub	r16, r24
    767e:	19 0b       	sbc	r17, r25
					break;
    7680:	0b c0       	rjmp	.+22     	; 0x7698 <ProcessMixer+0x47c>
    7682:	fa 01       	movw	r30, r20
    7684:	e1 56       	subi	r30, 0x61	; 97
    7686:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P2_Roll_acc)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P2_aileron_volume < 0 )
    7688:	80 81       	ld	r24, Z
    768a:	87 ff       	sbrs	r24, 7
    768c:	03 c0       	rjmp	.+6      	; 0x7694 <ProcessMixer+0x478>
					{
						P2_solution = P2_solution + PID_ACCs[P2][ROLL];			// Reverse if volume negative
    768e:	0a 0d       	add	r16, r10
    7690:	1b 1d       	adc	r17, r11
    7692:	02 c0       	rjmp	.+4      	; 0x7698 <ProcessMixer+0x47c>
					}
					else
					{
						P2_solution = P2_solution - PID_ACCs[P2][ROLL];			// or simply add
    7694:	0a 19       	sub	r16, r10
    7696:	1b 09       	sbc	r17, r11
    7698:	f3 01       	movw	r30, r6
    769a:	e3 55       	subi	r30, 0x53	; 83
    769c:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				default:
					break;
			}

			switch (Config.Channel[i].P2_Pitch_acc)
    769e:	80 81       	ld	r24, Z
    76a0:	81 30       	cpi	r24, 0x01	; 1
    76a2:	81 f0       	breq	.+32     	; 0x76c4 <ProcessMixer+0x4a8>
    76a4:	82 30       	cpi	r24, 0x02	; 2
    76a6:	c9 f4       	brne	.+50     	; 0x76da <ProcessMixer+0x4be>
    76a8:	f3 01       	movw	r30, r6
    76aa:	ef 55       	subi	r30, 0x5F	; 95
    76ac:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P2_solution = P2_solution + PID_ACCs[P2][PITCH];
					}
					break;
				case SCALE:
					P2_solution = P2_solution - scale32(PID_ACCs[P2][PITCH], Config.Channel[i].P2_elevator_volume * 5);
    76ae:	60 81       	ld	r22, Z
    76b0:	85 e0       	ldi	r24, 0x05	; 5
    76b2:	68 02       	muls	r22, r24
    76b4:	b0 01       	movw	r22, r0
    76b6:	11 24       	eor	r1, r1
    76b8:	c4 01       	movw	r24, r8
    76ba:	0e 94 eb 38 	call	0x71d6	; 0x71d6 <scale32>
    76be:	08 1b       	sub	r16, r24
    76c0:	19 0b       	sbc	r17, r25
					break;
    76c2:	0b c0       	rjmp	.+22     	; 0x76da <ProcessMixer+0x4be>
    76c4:	f3 01       	movw	r30, r6
    76c6:	ef 55       	subi	r30, 0x5F	; 95
    76c8:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P2_Pitch_acc)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P2_elevator_volume < 0 )
    76ca:	80 81       	ld	r24, Z
    76cc:	87 ff       	sbrs	r24, 7
    76ce:	03 c0       	rjmp	.+6      	; 0x76d6 <ProcessMixer+0x4ba>
					{

						P2_solution = P2_solution - PID_ACCs[P2][PITCH];		// Reverse if volume negative
    76d0:	08 19       	sub	r16, r8
    76d2:	19 09       	sbc	r17, r9
    76d4:	02 c0       	rjmp	.+4      	; 0x76da <ProcessMixer+0x4be>
					}
					else
					{
						P2_solution = P2_solution + PID_ACCs[P2][PITCH];
    76d6:	08 0d       	add	r16, r8
    76d8:	19 1d       	adc	r17, r9
    76da:	f3 01       	movw	r30, r6
    76dc:	e1 55       	subi	r30, 0x51	; 81
    76de:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				default:
					break;
			}

			switch (Config.Channel[i].P2_Z_delta_acc)
    76e0:	80 81       	ld	r24, Z
    76e2:	81 30       	cpi	r24, 0x01	; 1
    76e4:	89 f0       	breq	.+34     	; 0x7708 <ProcessMixer+0x4ec>
    76e6:	82 30       	cpi	r24, 0x02	; 2
    76e8:	f1 f4       	brne	.+60     	; 0x7726 <ProcessMixer+0x50a>
    76ea:	f3 01       	movw	r30, r6
    76ec:	e4 56       	subi	r30, 0x64	; 100
    76ee:	ff 4f       	sbci	r31, 0xFF	; 255
					{
						P2_solution = P2_solution - PID_ACCs[P2][YAW];
					}
					break;
				case SCALE:
					P2_solution = P2_solution - scale32(PID_ACCs[P2][YAW], Config.Channel[i].P2_throttle_volume * 5);
    76f0:	60 81       	ld	r22, Z
    76f2:	55 e0       	ldi	r21, 0x05	; 5
    76f4:	65 02       	muls	r22, r21
    76f6:	b0 01       	movw	r22, r0
    76f8:	11 24       	eor	r1, r1
    76fa:	8d a5       	ldd	r24, Y+45	; 0x2d
    76fc:	9e a5       	ldd	r25, Y+46	; 0x2e
    76fe:	0e 94 eb 38 	call	0x71d6	; 0x71d6 <scale32>
    7702:	08 1b       	sub	r16, r24
    7704:	19 0b       	sbc	r17, r25
					break;
    7706:	0f c0       	rjmp	.+30     	; 0x7726 <ProcessMixer+0x50a>
    7708:	f3 01       	movw	r30, r6
    770a:	e4 56       	subi	r30, 0x64	; 100
    770c:	ff 4f       	sbci	r31, 0xFF	; 255
			switch (Config.Channel[i].P2_Z_delta_acc)
			{
				case OFF:
					break;
				case ON:
					if (Config.Channel[i].P2_throttle_volume < 0 )
    770e:	80 81       	ld	r24, Z
    7710:	87 ff       	sbrs	r24, 7
    7712:	05 c0       	rjmp	.+10     	; 0x771e <ProcessMixer+0x502>
					{
						P2_solution = P2_solution + PID_ACCs[P2][YAW];			// Reverse if volume negative
    7714:	2d a5       	ldd	r18, Y+45	; 0x2d
    7716:	3e a5       	ldd	r19, Y+46	; 0x2e
    7718:	02 0f       	add	r16, r18
    771a:	13 1f       	adc	r17, r19
    771c:	04 c0       	rjmp	.+8      	; 0x7726 <ProcessMixer+0x50a>
					}
					else
					{
						P2_solution = P2_solution - PID_ACCs[P2][YAW];
    771e:	4d a5       	ldd	r20, Y+45	; 0x2d
    7720:	5e a5       	ldd	r21, Y+46	; 0x2e
    7722:	04 1b       	sub	r16, r20
    7724:	15 0b       	sbc	r17, r21
		//************************************************************
		// Process mixers
		//************************************************************ 

		// Mix in other outputs here (P1)
		if (Transition_state < TRANS_P2)
    7726:	2d 8d       	ldd	r18, Y+29	; 0x1d
    7728:	29 30       	cpi	r18, 0x09	; 9
    772a:	08 f0       	brcs	.+2      	; 0x772e <ProcessMixer+0x512>
    772c:	8d c0       	rjmp	.+282    	; 0x7848 <ProcessMixer+0x62c>
    772e:	a6 01       	movw	r20, r12
    7730:	47 55       	subi	r20, 0x57	; 87
    7732:	5a 4f       	sbci	r21, 0xFA	; 250
    7734:	3a 01       	movw	r6, r20
    7736:	fa 01       	movw	r30, r20
    7738:	e2 56       	subi	r30, 0x62	; 98
    773a:	ff 4f       	sbci	r31, 0xFF	; 255
		{
			// Mix in dedicated RC sources - aileron, elevator and rudder
			if (Config.Channel[i].P1_aileron_volume !=0) 					// Mix in dedicated aileron
    773c:	60 81       	ld	r22, Z
    773e:	66 23       	and	r22, r22
    7740:	59 f0       	breq	.+22     	; 0x7758 <ProcessMixer+0x53c>
			{
				temp2 = scale32(RCinputs[AILERON], Config.Channel[i].P1_aileron_volume);
    7742:	80 91 25 08 	lds	r24, 0x0825
    7746:	90 91 26 08 	lds	r25, 0x0826
    774a:	77 27       	eor	r23, r23
    774c:	67 fd       	sbrc	r22, 7
    774e:	70 95       	com	r23
    7750:	0e 94 eb 38 	call	0x71d6	; 0x71d6 <scale32>
				P1_solution = P1_solution + temp2;
    7754:	e8 0e       	add	r14, r24
    7756:	f9 1e       	adc	r15, r25
    7758:	f3 01       	movw	r30, r6
    775a:	e0 56       	subi	r30, 0x60	; 96
    775c:	ff 4f       	sbci	r31, 0xFF	; 255
			}
			if (Config.Channel[i].P1_elevator_volume !=0) 					// Mix in dedicated elevator
    775e:	60 81       	ld	r22, Z
    7760:	66 23       	and	r22, r22
    7762:	59 f0       	breq	.+22     	; 0x777a <ProcessMixer+0x55e>
			{
				temp2 = scale32(RCinputs[ELEVATOR], Config.Channel[i].P1_elevator_volume);
    7764:	80 91 27 08 	lds	r24, 0x0827
    7768:	90 91 28 08 	lds	r25, 0x0828
    776c:	77 27       	eor	r23, r23
    776e:	67 fd       	sbrc	r22, 7
    7770:	70 95       	com	r23
    7772:	0e 94 eb 38 	call	0x71d6	; 0x71d6 <scale32>
				P1_solution = P1_solution + temp2;
    7776:	e8 0e       	add	r14, r24
    7778:	f9 1e       	adc	r15, r25
    777a:	f3 01       	movw	r30, r6
    777c:	ee 55       	subi	r30, 0x5E	; 94
    777e:	ff 4f       	sbci	r31, 0xFF	; 255
			}
			if (Config.Channel[i].P1_rudder_volume !=0) 					// Mix in dedicated rudder
    7780:	60 81       	ld	r22, Z
    7782:	66 23       	and	r22, r22
    7784:	59 f0       	breq	.+22     	; 0x779c <ProcessMixer+0x580>
			{
				temp2 = scale32(RCinputs[RUDDER], Config.Channel[i].P1_rudder_volume);
    7786:	80 91 29 08 	lds	r24, 0x0829
    778a:	90 91 2a 08 	lds	r25, 0x082A
    778e:	77 27       	eor	r23, r23
    7790:	67 fd       	sbrc	r22, 7
    7792:	70 95       	com	r23
    7794:	0e 94 eb 38 	call	0x71d6	; 0x71d6 <scale32>
				P1_solution = P1_solution + temp2;
    7798:	e8 0e       	add	r14, r24
    779a:	f9 1e       	adc	r15, r25
    779c:	f3 01       	movw	r30, r6
    779e:	ef 54       	subi	r30, 0x4F	; 79
    77a0:	ff 4f       	sbci	r31, 0xFF	; 255
			}

			// Other sources
			if ((Config.Channel[i].P1_source_a_volume !=0) && (Config.Channel[i].P1_source_a != NOMIX)) // Mix in first extra source
    77a2:	60 81       	ld	r22, Z
    77a4:	66 23       	and	r22, r22
    77a6:	19 f1       	breq	.+70     	; 0x77ee <ProcessMixer+0x5d2>
    77a8:	31 97       	sbiw	r30, 0x01	; 1
    77aa:	80 81       	ld	r24, Z
    77ac:	8f 30       	cpi	r24, 0x0F	; 15
    77ae:	f9 f0       	breq	.+62     	; 0x77ee <ProcessMixer+0x5d2>
    77b0:	e8 2f       	mov	r30, r24
    77b2:	ff 27       	eor	r31, r31
    77b4:	e7 fd       	sbrc	r30, 7
    77b6:	f0 95       	com	r31
			{
				// Is the source a sensor?
				if (Config.Channel[i].P1_source_a > (MAX_RC_CHANNELS - 1))
    77b8:	88 30       	cpi	r24, 0x08	; 8
    77ba:	64 f0       	brlt	.+24     	; 0x77d4 <ProcessMixer+0x5b8>
				{
					temp2 = SensorDataP1[Config.Channel[i].P1_source_a - EXT_SOURCE];
    77bc:	38 97       	sbiw	r30, 0x08	; 8
    77be:	ee 0f       	add	r30, r30
    77c0:	ff 1f       	adc	r31, r31
    77c2:	81 e0       	ldi	r24, 0x01	; 1
    77c4:	90 e0       	ldi	r25, 0x00	; 0
    77c6:	8c 0f       	add	r24, r28
    77c8:	9d 1f       	adc	r25, r29
    77ca:	e8 0f       	add	r30, r24
    77cc:	f9 1f       	adc	r31, r25
    77ce:	86 85       	ldd	r24, Z+14	; 0x0e
    77d0:	97 85       	ldd	r25, Z+15	; 0x0f
    77d2:	06 c0       	rjmp	.+12     	; 0x77e0 <ProcessMixer+0x5c4>
				}
				// Is the source an RC input?
				else
				{
					// Yes, calculate RC channel number from source number and return RC value
					temp2 = RCinputs[Config.Channel[i].P1_source_a];
    77d4:	ee 0f       	add	r30, r30
    77d6:	ff 1f       	adc	r31, r31
    77d8:	ed 5d       	subi	r30, 0xDD	; 221
    77da:	f7 4f       	sbci	r31, 0xF7	; 247
    77dc:	80 81       	ld	r24, Z
    77de:	91 81       	ldd	r25, Z+1	; 0x01
				}

				temp2 = scale32(temp2, Config.Channel[i].P1_source_a_volume);
    77e0:	77 27       	eor	r23, r23
    77e2:	67 fd       	sbrc	r22, 7
    77e4:	70 95       	com	r23
    77e6:	0e 94 eb 38 	call	0x71d6	; 0x71d6 <scale32>
				P1_solution = P1_solution + temp2;
    77ea:	e8 0e       	add	r14, r24
    77ec:	f9 1e       	adc	r15, r25
    77ee:	f3 01       	movw	r30, r6
    77f0:	eb 54       	subi	r30, 0x4B	; 75
    77f2:	ff 4f       	sbci	r31, 0xFF	; 255
			}
			if ((Config.Channel[i].P1_source_b_volume !=0) && (Config.Channel[i].P1_source_b != NOMIX)) // Mix in second extra source
    77f4:	60 81       	ld	r22, Z
    77f6:	66 23       	and	r22, r22
    77f8:	19 f1       	breq	.+70     	; 0x7840 <ProcessMixer+0x624>
    77fa:	31 97       	sbiw	r30, 0x01	; 1
    77fc:	80 81       	ld	r24, Z
    77fe:	8f 30       	cpi	r24, 0x0F	; 15
    7800:	f9 f0       	breq	.+62     	; 0x7840 <ProcessMixer+0x624>
    7802:	e8 2f       	mov	r30, r24
    7804:	ff 27       	eor	r31, r31
    7806:	e7 fd       	sbrc	r30, 7
    7808:	f0 95       	com	r31
			{
				// Is the source a sensor?
				if (Config.Channel[i].P1_source_b > (MAX_RC_CHANNELS - 1))
    780a:	88 30       	cpi	r24, 0x08	; 8
    780c:	64 f0       	brlt	.+24     	; 0x7826 <ProcessMixer+0x60a>
				{
					temp2 = SensorDataP1[Config.Channel[i].P1_source_b - EXT_SOURCE];
    780e:	38 97       	sbiw	r30, 0x08	; 8
    7810:	ee 0f       	add	r30, r30
    7812:	ff 1f       	adc	r31, r31
    7814:	a1 e0       	ldi	r26, 0x01	; 1
    7816:	b0 e0       	ldi	r27, 0x00	; 0
    7818:	ac 0f       	add	r26, r28
    781a:	bd 1f       	adc	r27, r29
    781c:	ea 0f       	add	r30, r26
    781e:	fb 1f       	adc	r31, r27
    7820:	86 85       	ldd	r24, Z+14	; 0x0e
    7822:	97 85       	ldd	r25, Z+15	; 0x0f
    7824:	06 c0       	rjmp	.+12     	; 0x7832 <ProcessMixer+0x616>
				}
				// Is the source an RC input?
				else
				{
					temp2 = RCinputs[Config.Channel[i].P1_source_b];
    7826:	ee 0f       	add	r30, r30
    7828:	ff 1f       	adc	r31, r31
    782a:	ed 5d       	subi	r30, 0xDD	; 221
    782c:	f7 4f       	sbci	r31, 0xF7	; 247
    782e:	80 81       	ld	r24, Z
    7830:	91 81       	ldd	r25, Z+1	; 0x01
				}

				temp2 = scale32(temp2, Config.Channel[i].P1_source_b_volume);
    7832:	77 27       	eor	r23, r23
    7834:	67 fd       	sbrc	r22, 7
    7836:	70 95       	com	r23
    7838:	0e 94 eb 38 	call	0x71d6	; 0x71d6 <scale32>
				P1_solution = P1_solution + temp2;
    783c:	e8 0e       	add	r14, r24
    783e:	f9 1e       	adc	r15, r25
			}
		}

		// Mix in other outputs here (P2)
		if (Transition_state > TRANS_P1)	
    7840:	2d 8d       	ldd	r18, Y+29	; 0x1d
    7842:	22 23       	and	r18, r18
    7844:	09 f4       	brne	.+2      	; 0x7848 <ProcessMixer+0x62c>
    7846:	85 c0       	rjmp	.+266    	; 0x7952 <ProcessMixer+0x736>
    7848:	a6 01       	movw	r20, r12
    784a:	47 55       	subi	r20, 0x57	; 87
    784c:	5a 4f       	sbci	r21, 0xFA	; 250
    784e:	3a 01       	movw	r6, r20
    7850:	fa 01       	movw	r30, r20
    7852:	e1 56       	subi	r30, 0x61	; 97
    7854:	ff 4f       	sbci	r31, 0xFF	; 255
		{
			// Mix in dedicated RC sources - aileron, elevator and rudder
			if (Config.Channel[i].P2_aileron_volume !=0) 					// Mix in dedicated aileron
    7856:	60 81       	ld	r22, Z
    7858:	66 23       	and	r22, r22
    785a:	59 f0       	breq	.+22     	; 0x7872 <ProcessMixer+0x656>
			{
				temp2 = scale32(RCinputs[AILERON], Config.Channel[i].P2_aileron_volume);
    785c:	80 91 25 08 	lds	r24, 0x0825
    7860:	90 91 26 08 	lds	r25, 0x0826
    7864:	77 27       	eor	r23, r23
    7866:	67 fd       	sbrc	r22, 7
    7868:	70 95       	com	r23
    786a:	0e 94 eb 38 	call	0x71d6	; 0x71d6 <scale32>
				P2_solution = P2_solution + temp2;
    786e:	08 0f       	add	r16, r24
    7870:	19 1f       	adc	r17, r25
    7872:	f3 01       	movw	r30, r6
    7874:	ef 55       	subi	r30, 0x5F	; 95
    7876:	ff 4f       	sbci	r31, 0xFF	; 255
			}
			if (Config.Channel[i].P2_elevator_volume !=0) 					// Mix in dedicated elevator
    7878:	60 81       	ld	r22, Z
    787a:	66 23       	and	r22, r22
    787c:	59 f0       	breq	.+22     	; 0x7894 <ProcessMixer+0x678>
			{
				temp2 = scale32(RCinputs[ELEVATOR], Config.Channel[i].P2_elevator_volume);
    787e:	80 91 27 08 	lds	r24, 0x0827
    7882:	90 91 28 08 	lds	r25, 0x0828
    7886:	77 27       	eor	r23, r23
    7888:	67 fd       	sbrc	r22, 7
    788a:	70 95       	com	r23
    788c:	0e 94 eb 38 	call	0x71d6	; 0x71d6 <scale32>
				P2_solution = P2_solution + temp2;
    7890:	08 0f       	add	r16, r24
    7892:	19 1f       	adc	r17, r25
    7894:	f3 01       	movw	r30, r6
    7896:	ed 55       	subi	r30, 0x5D	; 93
    7898:	ff 4f       	sbci	r31, 0xFF	; 255
			}
			if (Config.Channel[i].P2_rudder_volume !=0) 					// Mix in dedicated rudder
    789a:	60 81       	ld	r22, Z
    789c:	66 23       	and	r22, r22
    789e:	59 f0       	breq	.+22     	; 0x78b6 <ProcessMixer+0x69a>
			{
				temp2 = scale32(RCinputs[RUDDER], Config.Channel[i].P2_rudder_volume);
    78a0:	80 91 29 08 	lds	r24, 0x0829
    78a4:	90 91 2a 08 	lds	r25, 0x082A
    78a8:	77 27       	eor	r23, r23
    78aa:	67 fd       	sbrc	r22, 7
    78ac:	70 95       	com	r23
    78ae:	0e 94 eb 38 	call	0x71d6	; 0x71d6 <scale32>
				P2_solution = P2_solution + temp2;
    78b2:	08 0f       	add	r16, r24
    78b4:	19 1f       	adc	r17, r25
    78b6:	f3 01       	movw	r30, r6
    78b8:	ed 54       	subi	r30, 0x4D	; 77
    78ba:	ff 4f       	sbci	r31, 0xFF	; 255
			}

			// Other sources
			if ((Config.Channel[i].P2_source_a_volume !=0) && (Config.Channel[i].P2_source_a != NOMIX)) // Mix in first extra source
    78bc:	60 81       	ld	r22, Z
    78be:	66 23       	and	r22, r22
    78c0:	09 f1       	breq	.+66     	; 0x7904 <ProcessMixer+0x6e8>
    78c2:	31 97       	sbiw	r30, 0x01	; 1
    78c4:	80 81       	ld	r24, Z
    78c6:	8f 30       	cpi	r24, 0x0F	; 15
    78c8:	e9 f0       	breq	.+58     	; 0x7904 <ProcessMixer+0x6e8>
    78ca:	e8 2f       	mov	r30, r24
    78cc:	ff 27       	eor	r31, r31
    78ce:	e7 fd       	sbrc	r30, 7
    78d0:	f0 95       	com	r31
			{
				// Is the source a sensor?
				if (Config.Channel[i].P2_source_a > (MAX_RC_CHANNELS - 1))
    78d2:	88 30       	cpi	r24, 0x08	; 8
    78d4:	54 f0       	brlt	.+20     	; 0x78ea <ProcessMixer+0x6ce>
				{
					temp2 = SensorDataP2[Config.Channel[i].P2_source_a - EXT_SOURCE];
    78d6:	38 97       	sbiw	r30, 0x08	; 8
    78d8:	ee 0f       	add	r30, r30
    78da:	ff 1f       	adc	r31, r31
    78dc:	81 e0       	ldi	r24, 0x01	; 1
    78de:	90 e0       	ldi	r25, 0x00	; 0
    78e0:	8c 0f       	add	r24, r28
    78e2:	9d 1f       	adc	r25, r29
    78e4:	e8 0f       	add	r30, r24
    78e6:	f9 1f       	adc	r31, r25
    78e8:	04 c0       	rjmp	.+8      	; 0x78f2 <ProcessMixer+0x6d6>
				}
				// Is the source an RC input?
				else 
				{
					temp2 = RCinputs[Config.Channel[i].P2_source_a];
    78ea:	ee 0f       	add	r30, r30
    78ec:	ff 1f       	adc	r31, r31
    78ee:	ed 5d       	subi	r30, 0xDD	; 221
    78f0:	f7 4f       	sbci	r31, 0xF7	; 247
    78f2:	80 81       	ld	r24, Z
    78f4:	91 81       	ldd	r25, Z+1	; 0x01
				}

				temp2 = scale32(temp2, Config.Channel[i].P2_source_a_volume);
    78f6:	77 27       	eor	r23, r23
    78f8:	67 fd       	sbrc	r22, 7
    78fa:	70 95       	com	r23
    78fc:	0e 94 eb 38 	call	0x71d6	; 0x71d6 <scale32>
				P2_solution = P2_solution + temp2;
    7900:	08 0f       	add	r16, r24
    7902:	19 1f       	adc	r17, r25
    7904:	f3 01       	movw	r30, r6
    7906:	e9 54       	subi	r30, 0x49	; 73
    7908:	ff 4f       	sbci	r31, 0xFF	; 255
			}
			if ((Config.Channel[i].P2_source_b_volume !=0) && (Config.Channel[i].P2_source_b != NOMIX)) // Mix in second extra source
    790a:	60 81       	ld	r22, Z
    790c:	66 23       	and	r22, r22
    790e:	09 f1       	breq	.+66     	; 0x7952 <ProcessMixer+0x736>
    7910:	31 97       	sbiw	r30, 0x01	; 1
    7912:	80 81       	ld	r24, Z
    7914:	8f 30       	cpi	r24, 0x0F	; 15
    7916:	e9 f0       	breq	.+58     	; 0x7952 <ProcessMixer+0x736>
    7918:	e8 2f       	mov	r30, r24
    791a:	ff 27       	eor	r31, r31
    791c:	e7 fd       	sbrc	r30, 7
    791e:	f0 95       	com	r31
			{
				// Is the source a sensor?
				if (Config.Channel[i].P2_source_b > (MAX_RC_CHANNELS - 1))
    7920:	88 30       	cpi	r24, 0x08	; 8
    7922:	54 f0       	brlt	.+20     	; 0x7938 <ProcessMixer+0x71c>
				{
					temp2 = SensorDataP2[Config.Channel[i].P2_source_b - EXT_SOURCE];
    7924:	38 97       	sbiw	r30, 0x08	; 8
    7926:	ee 0f       	add	r30, r30
    7928:	ff 1f       	adc	r31, r31
    792a:	a1 e0       	ldi	r26, 0x01	; 1
    792c:	b0 e0       	ldi	r27, 0x00	; 0
    792e:	ac 0f       	add	r26, r28
    7930:	bd 1f       	adc	r27, r29
    7932:	ea 0f       	add	r30, r26
    7934:	fb 1f       	adc	r31, r27
    7936:	04 c0       	rjmp	.+8      	; 0x7940 <ProcessMixer+0x724>
				}
				// Is the source an RC input?
				else
				{
					temp2 = RCinputs[Config.Channel[i].P2_source_b];
    7938:	ee 0f       	add	r30, r30
    793a:	ff 1f       	adc	r31, r31
    793c:	ed 5d       	subi	r30, 0xDD	; 221
    793e:	f7 4f       	sbci	r31, 0xF7	; 247
    7940:	80 81       	ld	r24, Z
    7942:	91 81       	ldd	r25, Z+1	; 0x01
				}

				temp2 = scale32(temp2, Config.Channel[i].P2_source_b_volume);
    7944:	77 27       	eor	r23, r23
    7946:	67 fd       	sbrc	r22, 7
    7948:	70 95       	com	r23
    794a:	0e 94 eb 38 	call	0x71d6	; 0x71d6 <scale32>
				P2_solution = P2_solution + temp2;
    794e:	08 0f       	add	r16, r24
    7950:	19 1f       	adc	r17, r25
    7952:	c6 01       	movw	r24, r12
    7954:	87 55       	subi	r24, 0x57	; 87
    7956:	9a 4f       	sbci	r25, 0xFA	; 250
    7958:	fc 01       	movw	r30, r24
    795a:	ee 56       	subi	r30, 0x6E	; 110
    795c:	ff 4f       	sbci	r31, 0xFF	; 255
			}
		}
			
		// Save solution for this channel. Note that this contains cross-mixed data from the *last* cycle
		Config.Channel[i].P1_value = P1_solution;
    795e:	f1 82       	std	Z+1, r15	; 0x01
    7960:	e0 82       	st	Z, r14
    7962:	32 96       	adiw	r30, 0x02	; 2
		Config.Channel[i].P2_value = P2_solution;
    7964:	11 83       	std	Z+1, r17	; 0x01
    7966:	00 83       	st	Z, r16
    7968:	b6 e2       	ldi	r27, 0x26	; 38
    796a:	cb 0e       	add	r12, r27
    796c:	d1 1c       	adc	r13, r1

	//************************************************************
	// Main mix loop - sensors, RC inputs and other channels
	//************************************************************

	for (i = 0; i < MIX_OUTPUTS; i++)
    796e:	e0 e3       	ldi	r30, 0x30	; 48
    7970:	ce 16       	cp	r12, r30
    7972:	e1 e0       	ldi	r30, 0x01	; 1
    7974:	de 06       	cpc	r13, r30
    7976:	09 f0       	breq	.+2      	; 0x797a <ProcessMixer+0x75e>
    7978:	f8 cc       	rjmp	.-1552   	; 0x736a <ProcessMixer+0x14e>
	//************************************************************
	// Mixer transition code
	//************************************************************ 

	// Convert number to percentage (0 to 100%)
	if (Config.TransitionSpeed != 0) 
    797a:	80 91 d7 05 	lds	r24, 0x05D7
    797e:	88 23       	and	r24, r24
    7980:	41 f0       	breq	.+16     	; 0x7992 <ProcessMixer+0x776>
	{
		// transition_counter counts from 0 to 100 (101 steps)
		transition = transition_counter;
    7982:	80 91 22 05 	lds	r24, 0x0522
    7986:	90 91 23 05 	lds	r25, 0x0523
    798a:	90 93 20 05 	sts	0x0520, r25
    798e:	80 93 1f 05 	sts	0x051F, r24

	// Recalculate P1 values based on transition stage
	for (i = 0; i < MIX_OUTPUTS; i++)
	{
		// Speed up the easy ones :)
		if (transition == 0)
    7992:	00 91 1f 05 	lds	r16, 0x051F
    7996:	10 91 20 05 	lds	r17, 0x0520
		}
		else
		{
			// Get source channel value
			temp1 = Config.Channel[i].P1_value;
			temp1 = scale32(temp1, (100 - transition));
    799a:	b4 e6       	ldi	r27, 0x64	; 100
    799c:	cb 2e       	mov	r12, r27
    799e:	d1 2c       	mov	r13, r1
    79a0:	c0 1a       	sub	r12, r16
    79a2:	d1 0a       	sbc	r13, r17
    79a4:	8b e3       	ldi	r24, 0x3B	; 59
    79a6:	e8 2e       	mov	r14, r24
    79a8:	86 e0       	ldi	r24, 0x06	; 6
    79aa:	f8 2e       	mov	r15, r24

	// Recalculate P1 values based on transition stage
	for (i = 0; i < MIX_OUTPUTS; i++)
	{
		// Speed up the easy ones :)
		if (transition == 0)
    79ac:	01 15       	cp	r16, r1
    79ae:	11 05       	cpc	r17, r1
    79b0:	21 f4       	brne	.+8      	; 0x79ba <ProcessMixer+0x79e>
		{
			temp1 = Config.Channel[i].P1_value;
    79b2:	d7 01       	movw	r26, r14
    79b4:	8d 91       	ld	r24, X+
    79b6:	9c 91       	ld	r25, X
    79b8:	16 c0       	rjmp	.+44     	; 0x79e6 <ProcessMixer+0x7ca>
		}
		else if (transition >= 100)
    79ba:	04 36       	cpi	r16, 0x64	; 100
    79bc:	11 05       	cpc	r17, r1
    79be:	24 f0       	brlt	.+8      	; 0x79c8 <ProcessMixer+0x7ac>
		{
			temp1 = Config.Channel[i].P2_value;
    79c0:	f7 01       	movw	r30, r14
    79c2:	82 81       	ldd	r24, Z+2	; 0x02
    79c4:	93 81       	ldd	r25, Z+3	; 0x03
    79c6:	0f c0       	rjmp	.+30     	; 0x79e6 <ProcessMixer+0x7ca>
		}
		else
		{
			// Get source channel value
			temp1 = Config.Channel[i].P1_value;
			temp1 = scale32(temp1, (100 - transition));
    79c8:	b6 01       	movw	r22, r12
    79ca:	d7 01       	movw	r26, r14
    79cc:	8d 91       	ld	r24, X+
    79ce:	9c 91       	ld	r25, X
    79d0:	0e 94 eb 38 	call	0x71d6	; 0x71d6 <scale32>
    79d4:	5c 01       	movw	r10, r24

			// Get destination channel value
			temp2 = Config.Channel[i].P2_value;
			temp2 = scale32(temp2, transition);
    79d6:	b8 01       	movw	r22, r16
    79d8:	f7 01       	movw	r30, r14
    79da:	82 81       	ldd	r24, Z+2	; 0x02
    79dc:	93 81       	ldd	r25, Z+3	; 0x03
    79de:	0e 94 eb 38 	call	0x71d6	; 0x71d6 <scale32>

			// Sum the mixers
			temp1 = temp1 + temp2;
    79e2:	8a 0d       	add	r24, r10
    79e4:	9b 1d       	adc	r25, r11
		}
		// Save transitioned solution into P1
		Config.Channel[i].P1_value = temp1;
    79e6:	d7 01       	movw	r26, r14
    79e8:	8d 93       	st	X+, r24
    79ea:	9c 93       	st	X, r25
    79ec:	b6 e2       	ldi	r27, 0x26	; 38
    79ee:	eb 0e       	add	r14, r27
    79f0:	f1 1c       	adc	r15, r1
		// transition_counter counts from 0 to 100 (101 steps)
		transition = transition_counter;
	}

	// Recalculate P1 values based on transition stage
	for (i = 0; i < MIX_OUTPUTS; i++)
    79f2:	eb e6       	ldi	r30, 0x6B	; 107
    79f4:	ee 16       	cp	r14, r30
    79f6:	e7 e0       	ldi	r30, 0x07	; 7
    79f8:	fe 06       	cpc	r15, r30
    79fa:	c1 f6       	brne	.-80     	; 0x79ac <ProcessMixer+0x790>
    79fc:	65 e4       	ldi	r22, 0x45	; 69
    79fe:	c6 2e       	mov	r12, r22
    7a00:	66 e0       	ldi	r22, 0x06	; 6
    7a02:	d6 2e       	mov	r13, r22
    7a04:	76 e4       	ldi	r23, 0x46	; 70
    7a06:	87 2e       	mov	r8, r23
    7a08:	76 e0       	ldi	r23, 0x06	; 6
    7a0a:	97 2e       	mov	r9, r23
    7a0c:	eb e3       	ldi	r30, 0x3B	; 59
    7a0e:	ee 2e       	mov	r14, r30
    7a10:	e6 e0       	ldi	r30, 0x06	; 6
    7a12:	fe 2e       	mov	r15, r30
			if (Config.Channel[i].P1_throttle_volume != Config.Channel[i].P2_throttle_volume)
			{
				// Calculate step difference in 1/100ths and round
				temp1 = (Config.Channel[i].P2_throttle_volume - Config.Channel[i].P1_throttle_volume);
				temp1 = temp1 << 7; 						// Multiply by 128 so divide gives reasonable step values
				Step1 = temp1 / 100;	
    7a14:	f4 e6       	ldi	r31, 0x64	; 100
    7a16:	af 2e       	mov	r10, r31
    7a18:	b1 2c       	mov	r11, r1
    7a1a:	80 2f       	mov	r24, r16
    7a1c:	99 27       	eor	r25, r25
    7a1e:	87 fd       	sbrc	r24, 7
    7a20:	90 95       	com	r25
					}
					// If P2 greater than P1, SINE is the one we want
					else
					{
						// Multiply SQRTSIN[transition] steps (0 to 100)
						temp3 = (int8_t)pgm_read_byte(&SQRTSIN[(int8_t)transition]);
    7a22:	9c 01       	movw	r18, r24
    7a24:	20 5e       	subi	r18, 0xE0	; 224
    7a26:	35 4e       	sbci	r19, 0xE5	; 229
    7a28:	3e 8f       	std	Y+30, r19	; 0x1e
    7a2a:	2d 8f       	std	Y+29, r18	; 0x1d
					// Choose between SQRT SINE and SQRT COSINE
					// If P2 less than P1, COSINE (reverse SINE) is the one we want
					if (Step1 < 0)
					{ 
						// Multiply SQRTSIN[100 - transition] steps (0 to 100)
						temp3 = 100 - (int8_t)pgm_read_byte(&SQRTSIN[100 - (int8_t)transition]);
    7a2c:	95 01       	movw	r18, r10
    7a2e:	28 1b       	sub	r18, r24
    7a30:	39 0b       	sbc	r19, r25
    7a32:	a9 01       	movw	r20, r18
    7a34:	40 5e       	subi	r20, 0xE0	; 224
    7a36:	55 4e       	sbci	r21, 0xE5	; 229
    7a38:	58 a3       	std	Y+32, r21	; 0x20
    7a3a:	4f 8f       	std	Y+31, r20	; 0x1f
					}
					// If P2 greater than P1, SINE is the one we want
					else
					{
						// Multiply SIN[transition] steps (0 to 100)
						temp3 = (int8_t)pgm_read_byte(&SIN[(int8_t)transition]);
    7a3c:	dc 01       	movw	r26, r24
    7a3e:	ab 57       	subi	r26, 0x7B	; 123
    7a40:	b5 4e       	sbci	r27, 0xE5	; 229
    7a42:	1d 01       	movw	r2, r26
					// Choose between SINE and COSINE
					// If P2 less than P1, COSINE (reverse SINE) is the one we want
					if (Step1 < 0)
					{ 
						// Multiply SIN[100 - transition] steps (0 to 100)
						temp3 = 100 - (int8_t)pgm_read_byte(&SIN[100 - (int8_t)transition]);
    7a44:	f9 01       	movw	r30, r18
    7a46:	eb 57       	subi	r30, 0x7B	; 123
    7a48:	f5 4e       	sbci	r31, 0xE5	; 229
    7a4a:	2f 01       	movw	r4, r30
		} // No throttle
		
		// No throttles, so clamp to THROTTLEMIN if flagged as a motor
		else if (Config.Channel[i].Motor_marker == MOTOR)
		{
			Config.Channel[i].P1_value = -THROTTLEOFFSET; // 3750-1250 = 2500 = 1.0ms
    7a4c:	ae e1       	ldi	r26, 0x1E	; 30
    7a4e:	6a 2e       	mov	r6, r26
    7a50:	ab ef       	ldi	r26, 0xFB	; 251
    7a52:	7a 2e       	mov	r7, r26
    7a54:	f6 01       	movw	r30, r12
    7a56:	31 97       	sbiw	r30, 0x01	; 1
	//************************************************************ 

	for (i = 0; i < MIX_OUTPUTS; i++)
	{
		// Ignore if both throttle volumes are 0% (no throttle)
		if 	(!((Config.Channel[i].P1_throttle_volume == 0) && 
    7a58:	90 81       	ld	r25, Z
    7a5a:	d6 01       	movw	r26, r12
    7a5c:	8c 91       	ld	r24, X
    7a5e:	91 11       	cpse	r25, r1
    7a60:	03 c0       	rjmp	.+6      	; 0x7a68 <ProcessMixer+0x84c>
    7a62:	88 23       	and	r24, r24
    7a64:	09 f4       	brne	.+2      	; 0x7a68 <ProcessMixer+0x84c>
    7a66:	61 c0       	rjmp	.+194    	; 0x7b2a <ProcessMixer+0x90e>
    7a68:	29 2f       	mov	r18, r25
    7a6a:	33 27       	eor	r19, r19
    7a6c:	27 fd       	sbrc	r18, 7
    7a6e:	30 95       	com	r19
			(Config.Channel[i].P2_throttle_volume == 0)))
		{
			// Only process if there is a curve
			if (Config.Channel[i].P1_throttle_volume != Config.Channel[i].P2_throttle_volume)
    7a70:	98 17       	cp	r25, r24
    7a72:	09 f4       	brne	.+2      	; 0x7a76 <ProcessMixer+0x85a>
    7a74:	48 c0       	rjmp	.+144    	; 0x7b06 <ProcessMixer+0x8ea>
			{
				// Calculate step difference in 1/100ths and round
				temp1 = (Config.Channel[i].P2_throttle_volume - Config.Channel[i].P1_throttle_volume);
    7a76:	99 27       	eor	r25, r25
    7a78:	87 fd       	sbrc	r24, 7
    7a7a:	90 95       	com	r25
    7a7c:	82 1b       	sub	r24, r18
    7a7e:	93 0b       	sbc	r25, r19
				temp1 = temp1 << 7; 						// Multiply by 128 so divide gives reasonable step values
    7a80:	96 95       	lsr	r25
    7a82:	98 2f       	mov	r25, r24
    7a84:	88 27       	eor	r24, r24
    7a86:	97 95       	ror	r25
    7a88:	87 95       	ror	r24
				Step1 = temp1 / 100;	
    7a8a:	b5 01       	movw	r22, r10
    7a8c:	0e 94 5f 49 	call	0x92be	; 0x92be <__divmodhi4>

				// Set start (P1) point
				temp2 = Config.Channel[i].P1_throttle_volume; // Promote to 16 bits
				temp2 = temp2 << 7;
    7a90:	36 95       	lsr	r19
    7a92:	32 2f       	mov	r19, r18
    7a94:	22 27       	eor	r18, r18
    7a96:	37 95       	ror	r19
    7a98:	27 95       	ror	r18

				// Linear vs. Sinusoidal calculation
				if (Config.Channel[i].Throttle_curve == LINEAR)
    7a9a:	f4 01       	movw	r30, r8
    7a9c:	80 81       	ld	r24, Z
    7a9e:	81 11       	cpse	r24, r1
    7aa0:	08 c0       	rjmp	.+16     	; 0x7ab2 <ProcessMixer+0x896>
				{
					// Multiply [transition] steps (0 to 100)
					temp3 = temp2 + (Step1 * transition);
    7aa2:	60 9f       	mul	r22, r16
    7aa4:	c0 01       	movw	r24, r0
    7aa6:	61 9f       	mul	r22, r17
    7aa8:	90 0d       	add	r25, r0
    7aaa:	70 9f       	mul	r23, r16
    7aac:	90 0d       	add	r25, r0
    7aae:	11 24       	eor	r1, r1
    7ab0:	20 c0       	rjmp	.+64     	; 0x7af2 <ProcessMixer+0x8d6>
				}

				// SINE
				else if (Config.Channel[i].Throttle_curve == SINE)
    7ab2:	81 30       	cpi	r24, 0x01	; 1
    7ab4:	31 f4       	brne	.+12     	; 0x7ac2 <ProcessMixer+0x8a6>
				{
					// Choose between SINE and COSINE
					// If P2 less than P1, COSINE (reverse SINE) is the one we want
					if (Step1 < 0)
    7ab6:	77 ff       	sbrs	r23, 7
    7ab8:	02 c0       	rjmp	.+4      	; 0x7abe <ProcessMixer+0x8a2>
					{ 
						// Multiply SIN[100 - transition] steps (0 to 100)
						temp3 = 100 - (int8_t)pgm_read_byte(&SIN[100 - (int8_t)transition]);
    7aba:	f2 01       	movw	r30, r4
    7abc:	06 c0       	rjmp	.+12     	; 0x7aca <ProcessMixer+0x8ae>
					}
					// If P2 greater than P1, SINE is the one we want
					else
					{
						// Multiply SIN[transition] steps (0 to 100)
						temp3 = (int8_t)pgm_read_byte(&SIN[(int8_t)transition]);
    7abe:	f1 01       	movw	r30, r2
    7ac0:	0d c0       	rjmp	.+26     	; 0x7adc <ProcessMixer+0x8c0>
				// SQRT SINE
				else
				{
					// Choose between SQRT SINE and SQRT COSINE
					// If P2 less than P1, COSINE (reverse SINE) is the one we want
					if (Step1 < 0)
    7ac2:	77 ff       	sbrs	r23, 7
    7ac4:	09 c0       	rjmp	.+18     	; 0x7ad8 <ProcessMixer+0x8bc>
					{ 
						// Multiply SQRTSIN[100 - transition] steps (0 to 100)
						temp3 = 100 - (int8_t)pgm_read_byte(&SQRTSIN[100 - (int8_t)transition]);
    7ac6:	ef 8d       	ldd	r30, Y+31	; 0x1f
    7ac8:	f8 a1       	ldd	r31, Y+32	; 0x20
    7aca:	84 91       	lpm	r24, Z
    7acc:	a5 01       	movw	r20, r10
    7ace:	48 1b       	sub	r20, r24
    7ad0:	51 09       	sbc	r21, r1
    7ad2:	87 fd       	sbrc	r24, 7
    7ad4:	53 95       	inc	r21
    7ad6:	06 c0       	rjmp	.+12     	; 0x7ae4 <ProcessMixer+0x8c8>
					}
					// If P2 greater than P1, SINE is the one we want
					else
					{
						// Multiply SQRTSIN[transition] steps (0 to 100)
						temp3 = (int8_t)pgm_read_byte(&SQRTSIN[(int8_t)transition]);
    7ad8:	ed 8d       	ldd	r30, Y+29	; 0x1d
    7ada:	fe 8d       	ldd	r31, Y+30	; 0x1e
    7adc:	44 91       	lpm	r20, Z
    7ade:	55 27       	eor	r21, r21
    7ae0:	47 fd       	sbrc	r20, 7
    7ae2:	50 95       	com	r21
					}

					// Get SINE% (temp2) of difference in volumes (Step1)
					// Step1 is already in 100ths of the difference * 128
					// temp1 is the start volume * 128
					temp3 = temp2 + (Step1 * temp3);
    7ae4:	64 9f       	mul	r22, r20
    7ae6:	c0 01       	movw	r24, r0
    7ae8:	65 9f       	mul	r22, r21
    7aea:	90 0d       	add	r25, r0
    7aec:	74 9f       	mul	r23, r20
    7aee:	90 0d       	add	r25, r0
    7af0:	11 24       	eor	r1, r1
    7af2:	82 0f       	add	r24, r18
    7af4:	93 1f       	adc	r25, r19
				}

				// Round, then rescale to normal value
				temp3 = temp3 + 64;
    7af6:	bc 01       	movw	r22, r24
    7af8:	60 5c       	subi	r22, 0xC0	; 192
    7afa:	7f 4f       	sbci	r23, 0xFF	; 255
				temp3 = temp3 >> 7;
    7afc:	66 0f       	add	r22, r22
    7afe:	67 2f       	mov	r22, r23
    7b00:	66 1f       	adc	r22, r22
    7b02:	77 0b       	sbc	r23, r23
    7b04:	01 c0       	rjmp	.+2      	; 0x7b08 <ProcessMixer+0x8ec>
			
			// No curve
			else
			{
				// Just use the value of P1 volume as there is no curve
				temp3 = Config.Channel[i].P1_throttle_volume; // Promote to 16 bits
    7b06:	b9 01       	movw	r22, r18
			}

			// Calculate actual throttle value to the curve
			temp3 = scale32(MonopolarThrottle, temp3);
    7b08:	80 91 21 08 	lds	r24, 0x0821
    7b0c:	90 91 22 08 	lds	r25, 0x0822
    7b10:	0e 94 eb 38 	call	0x71d6	; 0x71d6 <scale32>

			// At this point, the throttle values are 0 to 2500 (+/-150%)
			// Re-scale throttle values back to neutral-centered system values (+/-1250) 
			// and set the minimum throttle point to 1.1ms.
			// A THROTTLEMIN value of 1000 will result in 2750, or 1.1ms
			temp3 = temp3 - THROTTLEMIN;
    7b14:	88 5e       	subi	r24, 0xE8	; 232
    7b16:	93 40       	sbci	r25, 0x03	; 3

			// Add offset to channel value
			Config.Channel[i].P1_value += temp3;
    7b18:	d7 01       	movw	r26, r14
    7b1a:	2d 91       	ld	r18, X+
    7b1c:	3c 91       	ld	r19, X
    7b1e:	11 97       	sbiw	r26, 0x01	; 1
    7b20:	28 0f       	add	r18, r24
    7b22:	39 1f       	adc	r19, r25
    7b24:	2d 93       	st	X+, r18
    7b26:	3c 93       	st	X, r19
    7b28:	08 c0       	rjmp	.+16     	; 0x7b3a <ProcessMixer+0x91e>
    7b2a:	f6 01       	movw	r30, r12
    7b2c:	36 97       	sbiw	r30, 0x06	; 6

		} // No throttle
		
		// No throttles, so clamp to THROTTLEMIN if flagged as a motor
		else if (Config.Channel[i].Motor_marker == MOTOR)
    7b2e:	80 81       	ld	r24, Z
    7b30:	82 30       	cpi	r24, 0x02	; 2
    7b32:	19 f4       	brne	.+6      	; 0x7b3a <ProcessMixer+0x91e>
		{
			Config.Channel[i].P1_value = -THROTTLEOFFSET; // 3750-1250 = 2500 = 1.0ms
    7b34:	f7 01       	movw	r30, r14
    7b36:	71 82       	std	Z+1, r7	; 0x01
    7b38:	60 82       	st	Z, r6
    7b3a:	f6 e2       	ldi	r31, 0x26	; 38
    7b3c:	ef 0e       	add	r14, r31
    7b3e:	f1 1c       	adc	r15, r1
    7b40:	26 e2       	ldi	r18, 0x26	; 38
    7b42:	c2 0e       	add	r12, r18
    7b44:	d1 1c       	adc	r13, r1
    7b46:	36 e2       	ldi	r19, 0x26	; 38
    7b48:	83 0e       	add	r8, r19
    7b4a:	91 1c       	adc	r9, r1
	// Groovy throttle curve handling. Must be after the transition.
	// Uses the transition value, but is not part of the transition
	// mixer. Linear or Sine curve. Reverse Sine done automatically
	//************************************************************ 

	for (i = 0; i < MIX_OUTPUTS; i++)
    7b4c:	4b e6       	ldi	r20, 0x6B	; 107
    7b4e:	e4 16       	cp	r14, r20
    7b50:	47 e0       	ldi	r20, 0x07	; 7
    7b52:	f4 06       	cpc	r15, r20
    7b54:	09 f0       	breq	.+2      	; 0x7b58 <ProcessMixer+0x93c>
    7b56:	7e cf       	rjmp	.-260    	; 0x7a54 <ProcessMixer+0x838>
    7b58:	e3 e4       	ldi	r30, 0x43	; 67
    7b5a:	f6 e0       	ldi	r31, 0x06	; 6
    7b5c:	2b e3       	ldi	r18, 0x3B	; 59
    7b5e:	36 e0       	ldi	r19, 0x06	; 6
			// Work out distance to cover over stage 2 (P1.n to P2)
			temp2 = Config.Channel[i].P2_offset - Config.Channel[i].P1n_offset;
			temp2 = temp2 << 7;

			// Divide distance into steps
			temp1 = (100 - Config.Channel[i].P1n_position); 
    7b60:	94 e6       	ldi	r25, 0x64	; 100
    7b62:	69 2e       	mov	r6, r25
    7b64:	71 2c       	mov	r7, r1
    7b66:	df 01       	movw	r26, r30
    7b68:	13 97       	sbiw	r26, 0x03	; 3
	//************************************************************ 

	for (i = 0; i < MIX_OUTPUTS; i++)
	{
		// Simplify if all are the same
		if (!((Config.Channel[i].P1_offset == Config.Channel[i].P1n_offset) &&
    7b6a:	cc 90       	ld	r12, X
    7b6c:	12 96       	adiw	r26, 0x02	; 2
    7b6e:	ac 90       	ld	r10, X
    7b70:	50 80       	ld	r5, Z
    7b72:	ca 10       	cpse	r12, r10
    7b74:	03 c0       	rjmp	.+6      	; 0x7b7c <ProcessMixer+0x960>
    7b76:	5c 14       	cp	r5, r12
    7b78:	09 f4       	brne	.+2      	; 0x7b7c <ProcessMixer+0x960>
    7b7a:	53 c0       	rjmp	.+166    	; 0x7c22 <ProcessMixer+0xa06>
		 	 (Config.Channel[i].P2_offset == Config.Channel[i].P1n_offset)))
		{
			// Work out distance to cover over stage 1 (P1 to P1.n)
			temp1 = Config.Channel[i].P1n_offset - Config.Channel[i].P1_offset;
    7b7c:	bb 24       	eor	r11, r11
    7b7e:	a7 fc       	sbrc	r10, 7
    7b80:	b0 94       	com	r11
    7b82:	dd 24       	eor	r13, r13
    7b84:	c7 fc       	sbrc	r12, 7
    7b86:	d0 94       	com	r13
    7b88:	c5 01       	movw	r24, r10
    7b8a:	8c 19       	sub	r24, r12
    7b8c:	9d 09       	sbc	r25, r13
    7b8e:	df 01       	movw	r26, r30
    7b90:	12 97       	sbiw	r26, 0x02	; 2
			temp1 = temp1 << 7; // Multiply by 128 so divide gives reasonable step values

			// Divide distance into steps
			temp2 = Config.Channel[i].P1n_position; 
    7b92:	ec 90       	ld	r14, X
    7b94:	ff 24       	eor	r15, r15
    7b96:	e7 fc       	sbrc	r14, 7
    7b98:	f0 94       	com	r15
		if (!((Config.Channel[i].P1_offset == Config.Channel[i].P1n_offset) &&
		 	 (Config.Channel[i].P2_offset == Config.Channel[i].P1n_offset)))
		{
			// Work out distance to cover over stage 1 (P1 to P1.n)
			temp1 = Config.Channel[i].P1n_offset - Config.Channel[i].P1_offset;
			temp1 = temp1 << 7; // Multiply by 128 so divide gives reasonable step values
    7b9a:	96 95       	lsr	r25
    7b9c:	98 2f       	mov	r25, r24
    7b9e:	88 27       	eor	r24, r24
    7ba0:	97 95       	ror	r25
    7ba2:	87 95       	ror	r24

			// Divide distance into steps
			temp2 = Config.Channel[i].P1n_position; 
			Step1 = ((temp1 + (temp2 >> 1)) / temp2) ; // Divide and round result
    7ba4:	a7 01       	movw	r20, r14
    7ba6:	55 95       	asr	r21
    7ba8:	47 95       	ror	r20
    7baa:	84 0f       	add	r24, r20
    7bac:	95 1f       	adc	r25, r21
    7bae:	b7 01       	movw	r22, r14
    7bb0:	0e 94 5f 49 	call	0x92be	; 0x92be <__divmodhi4>
    7bb4:	4b 01       	movw	r8, r22
		
			// Work out distance to cover over stage 2 (P1.n to P2)
			temp2 = Config.Channel[i].P2_offset - Config.Channel[i].P1n_offset;
    7bb6:	85 2d       	mov	r24, r5
    7bb8:	99 27       	eor	r25, r25
    7bba:	87 fd       	sbrc	r24, 7
    7bbc:	90 95       	com	r25
    7bbe:	8a 19       	sub	r24, r10
    7bc0:	9b 09       	sbc	r25, r11
			temp2 = temp2 << 7;

			// Divide distance into steps
			temp1 = (100 - Config.Channel[i].P1n_position); 
    7bc2:	b3 01       	movw	r22, r6
    7bc4:	6e 19       	sub	r22, r14
    7bc6:	7f 09       	sbc	r23, r15
			temp2 = Config.Channel[i].P1n_position; 
			Step1 = ((temp1 + (temp2 >> 1)) / temp2) ; // Divide and round result
		
			// Work out distance to cover over stage 2 (P1.n to P2)
			temp2 = Config.Channel[i].P2_offset - Config.Channel[i].P1n_offset;
			temp2 = temp2 << 7;
    7bc8:	96 95       	lsr	r25
    7bca:	98 2f       	mov	r25, r24
    7bcc:	88 27       	eor	r24, r24
    7bce:	97 95       	ror	r25
    7bd0:	87 95       	ror	r24

			// Divide distance into steps
			temp1 = (100 - Config.Channel[i].P1n_position); 
			Step2 = ((temp2 + (temp1 >> 1)) / temp1) ; // Divide and round result	
    7bd2:	ab 01       	movw	r20, r22
    7bd4:	55 95       	asr	r21
    7bd6:	47 95       	ror	r20
    7bd8:	84 0f       	add	r24, r20
    7bda:	95 1f       	adc	r25, r21
    7bdc:	0e 94 5f 49 	call	0x92be	; 0x92be <__divmodhi4>

			// Set start (P1) point
			temp3 = Config.Channel[i].P1_offset; // Promote to 16bits
			temp3 = temp3 << 7;
    7be0:	d6 94       	lsr	r13
    7be2:	dc 2c       	mov	r13, r12
    7be4:	cc 24       	eor	r12, r12
    7be6:	d7 94       	ror	r13
    7be8:	c7 94       	ror	r12

			// Count up transition steps of the appropriate step size
			for (j = 0; j < transition; j++)
    7bea:	40 e0       	ldi	r20, 0x00	; 0
    7bec:	84 2f       	mov	r24, r20
    7bee:	90 e0       	ldi	r25, 0x00	; 0
    7bf0:	80 17       	cp	r24, r16
    7bf2:	91 07       	cpc	r25, r17
    7bf4:	54 f4       	brge	.+20     	; 0x7c0a <ProcessMixer+0x9ee>
			{
				// If in stage 1 use Step1 size
				if (j < Config.Channel[i].P1n_position)
    7bf6:	8e 15       	cp	r24, r14
    7bf8:	9f 05       	cpc	r25, r15
    7bfa:	1c f4       	brge	.+6      	; 0x7c02 <ProcessMixer+0x9e6>
				{
					temp3 += Step1;
    7bfc:	c8 0c       	add	r12, r8
    7bfe:	d9 1c       	adc	r13, r9
    7c00:	02 c0       	rjmp	.+4      	; 0x7c06 <ProcessMixer+0x9ea>
				}
				// If in stage 2 use Step2 size
				else
				{
					temp3 += Step2;
    7c02:	c6 0e       	add	r12, r22
    7c04:	d7 1e       	adc	r13, r23
			// Set start (P1) point
			temp3 = Config.Channel[i].P1_offset; // Promote to 16bits
			temp3 = temp3 << 7;

			// Count up transition steps of the appropriate step size
			for (j = 0; j < transition; j++)
    7c06:	4f 5f       	subi	r20, 0xFF	; 255
    7c08:	f1 cf       	rjmp	.-30     	; 0x7bec <ProcessMixer+0x9d0>
					temp3 += Step2;
				}
			}

			// Reformat into a system-compatible value
			itemp8 = (int8_t)((temp3 + 64) >> 7);							// Round then divide by 128
    7c0a:	c6 01       	movw	r24, r12
    7c0c:	80 5c       	subi	r24, 0xC0	; 192
    7c0e:	9f 4f       	sbci	r25, 0xFF	; 255
    7c10:	88 0f       	add	r24, r24
    7c12:	89 2f       	mov	r24, r25
    7c14:	88 1f       	adc	r24, r24
    7c16:	99 0b       	sbc	r25, r25
int16_t scale_percent_nooffset(int8_t value)
{
	int16_t temp16_1, temp16_2;

	temp16_1 = value; // Promote
	temp16_2 = (temp16_1 * (int16_t)10);
    7c18:	5a e0       	ldi	r21, 0x0A	; 10
    7c1a:	85 02       	muls	r24, r21
    7c1c:	60 01       	movw	r12, r0
    7c1e:	11 24       	eor	r1, r1
				}
			}

			// Reformat into a system-compatible value
			itemp8 = (int8_t)((temp3 + 64) >> 7);							// Round then divide by 128
			P1_solution = scale_percent_nooffset(itemp8);	
    7c20:	05 c0       	rjmp	.+10     	; 0x7c2c <ProcessMixer+0xa10>
int16_t scale_percent_nooffset(int8_t value)
{
	int16_t temp16_1, temp16_2;

	temp16_1 = value; // Promote
	temp16_2 = (temp16_1 * (int16_t)10);
    7c22:	85 2d       	mov	r24, r5
    7c24:	9a e0       	ldi	r25, 0x0A	; 10
    7c26:	89 02       	muls	r24, r25
    7c28:	60 01       	movw	r12, r0
    7c2a:	11 24       	eor	r1, r1
		{
			P1_solution = scale_percent_nooffset(Config.Channel[i].P1_offset);
		}

		// Add offset to channel value
		Config.Channel[i].P1_value += P1_solution;
    7c2c:	d9 01       	movw	r26, r18
    7c2e:	4d 91       	ld	r20, X+
    7c30:	5c 91       	ld	r21, X
    7c32:	11 97       	sbiw	r26, 0x01	; 1
    7c34:	4c 0d       	add	r20, r12
    7c36:	5d 1d       	adc	r21, r13
    7c38:	4d 93       	st	X+, r20
    7c3a:	5c 93       	st	X, r21
    7c3c:	2a 5d       	subi	r18, 0xDA	; 218
    7c3e:	3f 4f       	sbci	r19, 0xFF	; 255
    7c40:	b6 96       	adiw	r30, 0x26	; 38
	//************************************************************
	// Per-channel 3-point offset needs to be after the transition  
	// loop as it is non-linear, unlike the transition.
	//************************************************************ 

	for (i = 0; i < MIX_OUTPUTS; i++)
    7c42:	b7 e0       	ldi	r27, 0x07	; 7
    7c44:	e3 37       	cpi	r30, 0x73	; 115
    7c46:	fb 07       	cpc	r31, r27
    7c48:	09 f0       	breq	.+2      	; 0x7c4c <ProcessMixer+0xa30>
    7c4a:	8d cf       	rjmp	.-230    	; 0x7b66 <ProcessMixer+0x94a>

		// Add offset to channel value
		Config.Channel[i].P1_value += P1_solution;
	}

} // ProcessMixer()
    7c4c:	e2 96       	adiw	r28, 0x32	; 50
    7c4e:	0f b6       	in	r0, 0x3f	; 63
    7c50:	f8 94       	cli
    7c52:	de bf       	out	0x3e, r29	; 62
    7c54:	0f be       	out	0x3f, r0	; 63
    7c56:	cd bf       	out	0x3d, r28	; 61
    7c58:	df 91       	pop	r29
    7c5a:	cf 91       	pop	r28
    7c5c:	1f 91       	pop	r17
    7c5e:	0f 91       	pop	r16
    7c60:	ff 90       	pop	r15
    7c62:	ef 90       	pop	r14
    7c64:	df 90       	pop	r13
    7c66:	cf 90       	pop	r12
    7c68:	bf 90       	pop	r11
    7c6a:	af 90       	pop	r10
    7c6c:	9f 90       	pop	r9
    7c6e:	8f 90       	pop	r8
    7c70:	7f 90       	pop	r7
    7c72:	6f 90       	pop	r6
    7c74:	5f 90       	pop	r5
    7c76:	4f 90       	pop	r4
    7c78:	3f 90       	pop	r3
    7c7a:	2f 90       	pop	r2
    7c7c:	08 95       	ret

00007c7e <scale_percent>:
int16_t scale_percent(int8_t value)
{
	int16_t temp16_1, temp16_2;

	temp16_1 = value; // Promote
	temp16_2 = ((temp16_1 * (int16_t)10) + 3750);
    7c7e:	2a e0       	ldi	r18, 0x0A	; 10
    7c80:	82 02       	muls	r24, r18
    7c82:	c0 01       	movw	r24, r0
    7c84:	11 24       	eor	r1, r1

	return temp16_2;
}
    7c86:	8a 55       	subi	r24, 0x5A	; 90
    7c88:	91 4f       	sbci	r25, 0xF1	; 241
    7c8a:	08 95       	ret

00007c8c <mugui_text_sizestring>:
	\return void
	\date 	12.08.2009
*/
/************************************************************************/
void mugui_text_sizestring(mugui_char_t *s, const unsigned char* font, mugui_size16_t *size)
{
    7c8c:	df 92       	push	r13
    7c8e:	ef 92       	push	r14
    7c90:	ff 92       	push	r15
    7c92:	0f 93       	push	r16
    7c94:	1f 93       	push	r17
    7c96:	cf 93       	push	r28
    7c98:	df 93       	push	r29
	mugui_uint8_t  indexhighbyte = 0; 		//high byte of the bitmap address in the array
	mugui_uint32_t indexaddress = 0;		//bitmap address in the array (derived from low and high byte)

	/* read header of the font          */
	/* pgm_read_byte is ATMega specific */
	length = strlen(s);
    7c9a:	dc 01       	movw	r26, r24
    7c9c:	0d 90       	ld	r0, X+
    7c9e:	00 20       	and	r0, r0
    7ca0:	e9 f7       	brne	.-6      	; 0x7c9c <mugui_text_sizestring+0x10>
    7ca2:	11 97       	sbiw	r26, 0x01	; 1
    7ca4:	a8 1b       	sub	r26, r24
    7ca6:	b9 0b       	sbc	r27, r25
	height = pgm_read_byte(&font[4]);
    7ca8:	fb 01       	movw	r30, r22
    7caa:	34 96       	adiw	r30, 0x04	; 4
    7cac:	e4 90       	lpm	r14, Z
    7cae:	f1 2c       	mov	r15, r1

	startcharacter = pgm_read_byte(&font[2]);
    7cb0:	32 97       	sbiw	r30, 0x02	; 2
    7cb2:	d4 90       	lpm	r13, Z
    7cb4:	ec 01       	movw	r28, r24
    7cb6:	a8 0f       	add	r26, r24
    7cb8:	b9 1f       	adc	r27, r25
	mugui_uint8_t  distance = 1;			//distance between characters
	mugui_uint16_t length = 0;				//temporary length of string
	mugui_uint16_t i = 0;					//counter variable
	mugui_uint16_t startcharacter = 0; 	    //startcharacter of the font
	mugui_uint16_t height = 0;				//height of the bitmap
	mugui_uint16_t width = 0; 				//width of the bitmap
    7cba:	80 e0       	ldi	r24, 0x00	; 0
    7cbc:	90 e0       	ldi	r25, 0x00	; 0
	/* pgm_read_byte is ATMega specific */
	length = strlen(s);
	height = pgm_read_byte(&font[4]);

	startcharacter = pgm_read_byte(&font[2]);
	for(i=0;i<length;i++) //every character in prop fonts has its own width
    7cbe:	ca 17       	cp	r28, r26
    7cc0:	db 07       	cpc	r29, r27
    7cc2:	29 f1       	breq	.+74     	; 0x7d0e <mugui_text_sizestring+0x82>
	{
		index = s[i] - startcharacter;
    7cc4:	29 91       	ld	r18, Y+
    7cc6:	2d 19       	sub	r18, r13
		indexhighbyte = pgm_read_byte(&font[index*2 + 5]);
    7cc8:	30 e0       	ldi	r19, 0x00	; 0
    7cca:	22 0f       	add	r18, r18
    7ccc:	33 1f       	adc	r19, r19
    7cce:	f9 01       	movw	r30, r18
    7cd0:	35 96       	adiw	r30, 0x05	; 5
    7cd2:	e6 0f       	add	r30, r22
    7cd4:	f7 1f       	adc	r31, r23
    7cd6:	04 91       	lpm	r16, Z
		indexlowbyte = pgm_read_byte(&font[index*2 + 6]);
    7cd8:	f9 01       	movw	r30, r18
    7cda:	36 96       	adiw	r30, 0x06	; 6
    7cdc:	e6 0f       	add	r30, r22
    7cde:	f7 1f       	adc	r31, r23
    7ce0:	e4 91       	lpm	r30, Z
		indexaddress = (mugui_int64_t)indexhighbyte;
    7ce2:	10 e0       	ldi	r17, 0x00	; 0
    7ce4:	20 e0       	ldi	r18, 0x00	; 0
    7ce6:	30 e0       	ldi	r19, 0x00	; 0
		indexaddress = indexaddress << 8;
    7ce8:	32 2f       	mov	r19, r18
    7cea:	21 2f       	mov	r18, r17
    7cec:	10 2f       	mov	r17, r16
    7cee:	00 27       	eor	r16, r16
		indexaddress += indexlowbyte;
    7cf0:	0e 0f       	add	r16, r30
    7cf2:	11 1d       	adc	r17, r1
    7cf4:	21 1d       	adc	r18, r1
    7cf6:	31 1d       	adc	r19, r1
		width += pgm_read_byte(&font[indexaddress]) + distance;
    7cf8:	fb 01       	movw	r30, r22
    7cfa:	e0 0f       	add	r30, r16
    7cfc:	f1 1f       	adc	r31, r17
    7cfe:	04 91       	lpm	r16, Z
    7d00:	20 2f       	mov	r18, r16
    7d02:	30 e0       	ldi	r19, 0x00	; 0
    7d04:	2f 5f       	subi	r18, 0xFF	; 255
    7d06:	3f 4f       	sbci	r19, 0xFF	; 255
    7d08:	82 0f       	add	r24, r18
    7d0a:	93 1f       	adc	r25, r19
    7d0c:	d8 cf       	rjmp	.-80     	; 0x7cbe <mugui_text_sizestring+0x32>
	}

	/* prepare return value */
	size->x = width;
    7d0e:	fa 01       	movw	r30, r20
    7d10:	91 83       	std	Z+1, r25	; 0x01
    7d12:	80 83       	st	Z, r24
	size->y = height;
    7d14:	f3 82       	std	Z+3, r15	; 0x03
    7d16:	e2 82       	std	Z+2, r14	; 0x02
}
    7d18:	df 91       	pop	r29
    7d1a:	cf 91       	pop	r28
    7d1c:	1f 91       	pop	r17
    7d1e:	0f 91       	pop	r16
    7d20:	ff 90       	pop	r15
    7d22:	ef 90       	pop	r14
    7d24:	df 90       	pop	r13
    7d26:	08 95       	ret

00007d28 <pgm_mugui_scopy>:
	\date 	30.07.2012
	\Created by D. Thompson
*/
/************************************************************************/
void pgm_mugui_scopy(const char *s)
{
    7d28:	ab e5       	ldi	r26, 0x5B	; 91
    7d2a:	b5 e0       	ldi	r27, 0x05	; 5
	int i = 0;
    7d2c:	20 e0       	ldi	r18, 0x00	; 0
    7d2e:	30 e0       	ldi	r19, 0x00	; 0
    7d30:	fc 01       	movw	r30, r24
    7d32:	e2 0f       	add	r30, r18
    7d34:	f3 1f       	adc	r31, r19

	// Copy string until terminator but don't over-write buffer
	while((pgm_read_byte(s) != 0x00) && (i < (PBUFFER_SIZE - 1)))
    7d36:	44 91       	lpm	r20, Z
    7d38:	44 23       	and	r20, r20
    7d3a:	41 f0       	breq	.+16     	; 0x7d4c <pgm_mugui_scopy+0x24>
    7d3c:	2f 30       	cpi	r18, 0x0F	; 15
    7d3e:	31 05       	cpc	r19, r1
    7d40:	29 f0       	breq	.+10     	; 0x7d4c <pgm_mugui_scopy+0x24>
	{
		pBuffer[i] = pgm_read_byte(s++);
    7d42:	e4 91       	lpm	r30, Z
    7d44:	ed 93       	st	X+, r30
		i++;
    7d46:	2f 5f       	subi	r18, 0xFF	; 255
    7d48:	3f 4f       	sbci	r19, 0xFF	; 255
    7d4a:	f2 cf       	rjmp	.-28     	; 0x7d30 <pgm_mugui_scopy+0x8>
	}
	
	// Add the terminator regardless of the amount copied
	pBuffer[i] = 0x00;
    7d4c:	f9 01       	movw	r30, r18
    7d4e:	e5 5a       	subi	r30, 0xA5	; 165
    7d50:	fa 4f       	sbci	r31, 0xFA	; 250
    7d52:	10 82       	st	Z, r1
    7d54:	08 95       	ret

00007d56 <mugui_lcd_putc>:
	\date 	13.11.2009
	\Modified by D. Thompson 14/08/2012 - Now hard-coded for proportional, type 2 (verticalCeiling)
*/
/************************************************************************/
mugui_uint16_t mugui_lcd_putc(mugui_char_t c, const unsigned char* font,mugui_uint16_t x, mugui_uint16_t y)
{
    7d56:	2f 92       	push	r2
    7d58:	3f 92       	push	r3
    7d5a:	4f 92       	push	r4
    7d5c:	5f 92       	push	r5
    7d5e:	6f 92       	push	r6
    7d60:	7f 92       	push	r7
    7d62:	8f 92       	push	r8
    7d64:	9f 92       	push	r9
    7d66:	af 92       	push	r10
    7d68:	bf 92       	push	r11
    7d6a:	cf 92       	push	r12
    7d6c:	df 92       	push	r13
    7d6e:	ef 92       	push	r14
    7d70:	ff 92       	push	r15
    7d72:	0f 93       	push	r16
    7d74:	1f 93       	push	r17
    7d76:	cf 93       	push	r28
    7d78:	df 93       	push	r29
    7d7a:	cd b7       	in	r28, 0x3d	; 61
    7d7c:	de b7       	in	r29, 0x3e	; 62
    7d7e:	29 97       	sbiw	r28, 0x09	; 9
    7d80:	0f b6       	in	r0, 0x3f	; 63
    7d82:	f8 94       	cli
    7d84:	de bf       	out	0x3e, r29	; 62
    7d86:	0f be       	out	0x3f, r0	; 63
    7d88:	cd bf       	out	0x3d, r28	; 61
    7d8a:	4c 83       	std	Y+4, r20	; 0x04
    7d8c:	2d 83       	std	Y+5, r18	; 0x05
	mugui_uint8_t  tc= 0;	 				//temorary count
	mugui_uint8_t  bytes= 0;  				//bytes per line or row

	/* Read header of the font          */
	/* pgm_read_byte is ATMega specific */
	startcharacter = pgm_read_byte(&font[2]);
    7d8e:	fb 01       	movw	r30, r22
    7d90:	32 96       	adiw	r30, 0x02	; 2
    7d92:	94 91       	lpm	r25, Z
	height = pgm_read_byte(&font[4]);
    7d94:	32 96       	adiw	r30, 0x02	; 2
    7d96:	e4 91       	lpm	r30, Z
    7d98:	2e 2e       	mov	r2, r30
    7d9a:	31 2c       	mov	r3, r1

	/* Read the rest of the header */
	index = c - startcharacter;
    7d9c:	89 1b       	sub	r24, r25
	indexhighbyte = pgm_read_byte(&font[index*2 + 5]);
    7d9e:	90 e0       	ldi	r25, 0x00	; 0
    7da0:	88 0f       	add	r24, r24
    7da2:	99 1f       	adc	r25, r25
    7da4:	fc 01       	movw	r30, r24
    7da6:	35 96       	adiw	r30, 0x05	; 5
    7da8:	e6 0f       	add	r30, r22
    7daa:	f7 1f       	adc	r31, r23
    7dac:	64 90       	lpm	r6, Z
	indexlowbyte = pgm_read_byte(&font[index*2 + 6]);
    7dae:	fc 01       	movw	r30, r24
    7db0:	36 96       	adiw	r30, 0x06	; 6
    7db2:	e6 0f       	add	r30, r22
    7db4:	f7 1f       	adc	r31, r23
    7db6:	84 91       	lpm	r24, Z
	indexaddress = (mugui_int64_t)indexhighbyte;
    7db8:	06 2d       	mov	r16, r6
    7dba:	10 e0       	ldi	r17, 0x00	; 0
    7dbc:	20 e0       	ldi	r18, 0x00	; 0
    7dbe:	30 e0       	ldi	r19, 0x00	; 0
	indexaddress = indexaddress << 8;
    7dc0:	32 2f       	mov	r19, r18
    7dc2:	21 2f       	mov	r18, r17
    7dc4:	10 2f       	mov	r17, r16
    7dc6:	00 27       	eor	r16, r16
	indexaddress += indexlowbyte;
    7dc8:	08 0f       	add	r16, r24
    7dca:	11 1d       	adc	r17, r1
    7dcc:	21 1d       	adc	r18, r1
    7dce:	31 1d       	adc	r19, r1
	width = pgm_read_byte(&font[indexaddress]);
    7dd0:	c8 01       	movw	r24, r16
    7dd2:	fb 01       	movw	r30, r22
    7dd4:	e0 0f       	add	r30, r16
    7dd6:	f1 1f       	adc	r31, r17
    7dd8:	64 90       	lpm	r6, Z
    7dda:	71 2c       	mov	r7, r1

	/* Determine the number of bytes for given width */ 
	bytes = ((height-1)>>3)+1;
    7ddc:	21 01       	movw	r4, r2
    7dde:	21 e0       	ldi	r18, 0x01	; 1
    7de0:	42 1a       	sub	r4, r18
    7de2:	51 08       	sbc	r5, r1
    7de4:	13 e0       	ldi	r17, 0x03	; 3
    7de6:	56 94       	lsr	r5
    7de8:	47 94       	ror	r4
    7dea:	1a 95       	dec	r17
    7dec:	e1 f7       	brne	.-8      	; 0x7de6 <mugui_lcd_putc+0x90>
    7dee:	43 94       	inc	r4
    7df0:	a4 2d       	mov	r26, r4
    7df2:	b0 e0       	ldi	r27, 0x00	; 0
    7df4:	ba 83       	std	Y+2, r27	; 0x02
    7df6:	a9 83       	std	Y+1, r26	; 0x01
	/* For every column */
	for(tx= 0; tx < width; tx++) //for every row
    7df8:	a1 2c       	mov	r10, r1
    7dfa:	b1 2c       	mov	r11, r1
    7dfc:	00 e0       	ldi	r16, 0x00	; 0
    7dfe:	10 e0       	ldi	r17, 0x00	; 0
    7e00:	4b 01       	movw	r8, r22
    7e02:	bf ef       	ldi	r27, 0xFF	; 255
    7e04:	8b 1a       	sub	r8, r27
    7e06:	9b 0a       	sbc	r9, r27
    7e08:	88 0e       	add	r8, r24
    7e0a:	99 1e       	adc	r9, r25
    7e0c:	06 15       	cp	r16, r6
    7e0e:	17 05       	cpc	r17, r7
    7e10:	08 f0       	brcs	.+2      	; 0x7e14 <mugui_lcd_putc+0xbe>
    7e12:	43 c0       	rjmp	.+134    	; 0x7e9a <mugui_lcd_putc+0x144>
    7e14:	c1 2c       	mov	r12, r1
    7e16:	d1 2c       	mov	r13, r1
    7e18:	e1 2c       	mov	r14, r1
    7e1a:	f1 2c       	mov	r15, r1
    7e1c:	94 01       	movw	r18, r8
    7e1e:	2a 0d       	add	r18, r10
    7e20:	3b 1d       	adc	r19, r11
    7e22:	3f 83       	std	Y+7, r19	; 0x07
    7e24:	2e 83       	std	Y+6, r18	; 0x06
    7e26:	5c 80       	ldd	r5, Y+4	; 0x04
    7e28:	50 0e       	add	r5, r16
	{
		ty = 0;
		/* For every byte */
		for(tb = 0; tb < bytes; tb ++)
    7e2a:	c4 14       	cp	r12, r4
    7e2c:	78 f5       	brcc	.+94     	; 0x7e8c <mugui_lcd_putc+0x136>
    7e2e:	ee 81       	ldd	r30, Y+6	; 0x06
    7e30:	ff 81       	ldd	r31, Y+7	; 0x07
    7e32:	ec 0d       	add	r30, r12
    7e34:	fd 1d       	adc	r31, r13
		{
			/* Read bytes from program memory - ATMega specific */
			data = pgm_read_byte(&font[indexaddress + 1 + bytes*tx + tb]);
    7e36:	34 91       	lpm	r19, Z
    7e38:	3b 83       	std	Y+3, r19	; 0x03
    7e3a:	19 86       	std	Y+9, r1	; 0x09
    7e3c:	18 86       	std	Y+8, r1	; 0x08
			/* For every bit within the height */
			for(tc = 0;  ( (tc < 8) && (ty < height) ); tc ++)
    7e3e:	e2 14       	cp	r14, r2
    7e40:	f3 04       	cpc	r15, r3
    7e42:	00 f5       	brcc	.+64     	; 0x7e84 <mugui_lcd_putc+0x12e>
			{
					/* Determine the bit mask */
					mask = 1<<(tc);
    7e44:	81 e0       	ldi	r24, 0x01	; 1
    7e46:	90 e0       	ldi	r25, 0x00	; 0
    7e48:	08 84       	ldd	r0, Y+8	; 0x08
    7e4a:	02 c0       	rjmp	.+4      	; 0x7e50 <mugui_lcd_putc+0xfa>
    7e4c:	88 0f       	add	r24, r24
    7e4e:	99 1f       	adc	r25, r25
    7e50:	0a 94       	dec	r0
    7e52:	e2 f7       	brpl	.-8      	; 0x7e4c <mugui_lcd_putc+0xf6>
					bit = data & mask;
    7e54:	3b 81       	ldd	r19, Y+3	; 0x03
    7e56:	83 23       	and	r24, r19
    7e58:	4d 81       	ldd	r20, Y+5	; 0x05
    7e5a:	4e 0d       	add	r20, r14
					if(bit)
    7e5c:	88 23       	and	r24, r24
    7e5e:	11 f0       	breq	.+4      	; 0x7e64 <mugui_lcd_putc+0x10e>
					{
						setpixel(buffer,tx+x,ty+y,1);
    7e60:	21 e0       	ldi	r18, 0x01	; 1
    7e62:	01 c0       	rjmp	.+2      	; 0x7e66 <mugui_lcd_putc+0x110>
					}
					else
					{
						setpixel(buffer,tx+x,ty+y,0);
    7e64:	20 e0       	ldi	r18, 0x00	; 0
    7e66:	65 2d       	mov	r22, r5
    7e68:	80 e0       	ldi	r24, 0x00	; 0
    7e6a:	91 e0       	ldi	r25, 0x01	; 1
    7e6c:	0e 94 84 21 	call	0x4308	; 0x4308 <setpixel>
					}
					ty++;
    7e70:	8f ef       	ldi	r24, 0xFF	; 255
    7e72:	e8 1a       	sub	r14, r24
    7e74:	f8 0a       	sbc	r15, r24
    7e76:	a8 85       	ldd	r26, Y+8	; 0x08
    7e78:	b9 85       	ldd	r27, Y+9	; 0x09
    7e7a:	11 96       	adiw	r26, 0x01	; 1
    7e7c:	b9 87       	std	Y+9, r27	; 0x09
    7e7e:	a8 87       	std	Y+8, r26	; 0x08
		for(tb = 0; tb < bytes; tb ++)
		{
			/* Read bytes from program memory - ATMega specific */
			data = pgm_read_byte(&font[indexaddress + 1 + bytes*tx + tb]);
			/* For every bit within the height */
			for(tc = 0;  ( (tc < 8) && (ty < height) ); tc ++)
    7e80:	18 97       	sbiw	r26, 0x08	; 8
    7e82:	e9 f6       	brne	.-70     	; 0x7e3e <mugui_lcd_putc+0xe8>
    7e84:	bf ef       	ldi	r27, 0xFF	; 255
    7e86:	cb 1a       	sub	r12, r27
    7e88:	db 0a       	sbc	r13, r27
    7e8a:	cf cf       	rjmp	.-98     	; 0x7e2a <mugui_lcd_putc+0xd4>
	width = pgm_read_byte(&font[indexaddress]);

	/* Determine the number of bytes for given width */ 
	bytes = ((height-1)>>3)+1;
	/* For every column */
	for(tx= 0; tx < width; tx++) //for every row
    7e8c:	0f 5f       	subi	r16, 0xFF	; 255
    7e8e:	1f 4f       	sbci	r17, 0xFF	; 255
    7e90:	e9 81       	ldd	r30, Y+1	; 0x01
    7e92:	fa 81       	ldd	r31, Y+2	; 0x02
    7e94:	ae 0e       	add	r10, r30
    7e96:	bf 1e       	adc	r11, r31
    7e98:	b9 cf       	rjmp	.-142    	; 0x7e0c <mugui_lcd_putc+0xb6>
			}
		}
	}

	return width;
}
    7e9a:	c3 01       	movw	r24, r6
    7e9c:	29 96       	adiw	r28, 0x09	; 9
    7e9e:	0f b6       	in	r0, 0x3f	; 63
    7ea0:	f8 94       	cli
    7ea2:	de bf       	out	0x3e, r29	; 62
    7ea4:	0f be       	out	0x3f, r0	; 63
    7ea6:	cd bf       	out	0x3d, r28	; 61
    7ea8:	df 91       	pop	r29
    7eaa:	cf 91       	pop	r28
    7eac:	1f 91       	pop	r17
    7eae:	0f 91       	pop	r16
    7eb0:	ff 90       	pop	r15
    7eb2:	ef 90       	pop	r14
    7eb4:	df 90       	pop	r13
    7eb6:	cf 90       	pop	r12
    7eb8:	bf 90       	pop	r11
    7eba:	af 90       	pop	r10
    7ebc:	9f 90       	pop	r9
    7ebe:	8f 90       	pop	r8
    7ec0:	7f 90       	pop	r7
    7ec2:	6f 90       	pop	r6
    7ec4:	5f 90       	pop	r5
    7ec6:	4f 90       	pop	r4
    7ec8:	3f 90       	pop	r3
    7eca:	2f 90       	pop	r2
    7ecc:	08 95       	ret

00007ece <pgm_mugui_lcd_puts>:
	\date 	12.08.2009
	\Modified by D. Thompson 27/07/2012
*/
/************************************************************************/
void pgm_mugui_lcd_puts(const unsigned char* s, const unsigned char* font,mugui_uint16_t x, mugui_uint16_t y)
{
    7ece:	af 92       	push	r10
    7ed0:	bf 92       	push	r11
    7ed2:	cf 92       	push	r12
    7ed4:	df 92       	push	r13
    7ed6:	ef 92       	push	r14
    7ed8:	ff 92       	push	r15
    7eda:	0f 93       	push	r16
    7edc:	1f 93       	push	r17
    7ede:	cf 93       	push	r28
    7ee0:	df 93       	push	r29
    7ee2:	ec 01       	movw	r28, r24
    7ee4:	7b 01       	movw	r14, r22
    7ee6:	6a 01       	movw	r12, r20
    7ee8:	59 01       	movw	r10, r18
	mugui_uint8_t distance  = 1;			// Distance between characters
	mugui_uint16_t xpos     = 0;			// Relative xpos of character
    7eea:	00 e0       	ldi	r16, 0x00	; 0
    7eec:	10 e0       	ldi	r17, 0x00	; 0

	while(pgm_read_byte(s) != 0x00) 
    7eee:	ce 01       	movw	r24, r28
    7ef0:	fe 01       	movw	r30, r28
    7ef2:	24 91       	lpm	r18, Z
    7ef4:	22 23       	and	r18, r18
    7ef6:	71 f0       	breq	.+28     	; 0x7f14 <pgm_mugui_lcd_puts+0x46>
	{
		xpos += mugui_lcd_putc(pgm_read_byte(s++), font, x + xpos, y) + distance;
    7ef8:	21 96       	adiw	r28, 0x01	; 1
    7efa:	fc 01       	movw	r30, r24
    7efc:	84 91       	lpm	r24, Z
    7efe:	a8 01       	movw	r20, r16
    7f00:	4c 0d       	add	r20, r12
    7f02:	5d 1d       	adc	r21, r13
    7f04:	95 01       	movw	r18, r10
    7f06:	b7 01       	movw	r22, r14
    7f08:	0e 94 ab 3e 	call	0x7d56	; 0x7d56 <mugui_lcd_putc>
    7f0c:	01 96       	adiw	r24, 0x01	; 1
    7f0e:	08 0f       	add	r16, r24
    7f10:	19 1f       	adc	r17, r25
    7f12:	ed cf       	rjmp	.-38     	; 0x7eee <pgm_mugui_lcd_puts+0x20>
	}
}
    7f14:	df 91       	pop	r29
    7f16:	cf 91       	pop	r28
    7f18:	1f 91       	pop	r17
    7f1a:	0f 91       	pop	r16
    7f1c:	ff 90       	pop	r15
    7f1e:	ef 90       	pop	r14
    7f20:	df 90       	pop	r13
    7f22:	cf 90       	pop	r12
    7f24:	bf 90       	pop	r11
    7f26:	af 90       	pop	r10
    7f28:	08 95       	ret

00007f2a <mugui_lcd_puts>:
	\return void
	\date 	12.08.2009
*/
/************************************************************************/
void mugui_lcd_puts(mugui_char_t *s, const unsigned char* font,mugui_uint16_t x, mugui_uint16_t y)
{
    7f2a:	8f 92       	push	r8
    7f2c:	9f 92       	push	r9
    7f2e:	af 92       	push	r10
    7f30:	bf 92       	push	r11
    7f32:	cf 92       	push	r12
    7f34:	df 92       	push	r13
    7f36:	ef 92       	push	r14
    7f38:	ff 92       	push	r15
    7f3a:	0f 93       	push	r16
    7f3c:	1f 93       	push	r17
    7f3e:	cf 93       	push	r28
    7f40:	df 93       	push	r29
    7f42:	6b 01       	movw	r12, r22
    7f44:	5a 01       	movw	r10, r20
    7f46:	49 01       	movw	r8, r18
	mugui_uint8_t distance  = 1;			//distance between characters
	mugui_uint16_t xpos     = 0;			//relativ xpos of character
	mugui_uint16_t length 	= 0;			//temporary length of string
	mugui_uint16_t i 		= 0;			//counter variable
	
	length = strlen(s);
    7f48:	ec 01       	movw	r28, r24
    7f4a:	09 90       	ld	r0, Y+
    7f4c:	00 20       	and	r0, r0
    7f4e:	e9 f7       	brne	.-6      	; 0x7f4a <mugui_lcd_puts+0x20>
    7f50:	8c 01       	movw	r16, r24
    7f52:	21 97       	sbiw	r28, 0x01	; 1
*/
/************************************************************************/
void mugui_lcd_puts(mugui_char_t *s, const unsigned char* font,mugui_uint16_t x, mugui_uint16_t y)
{
	mugui_uint8_t distance  = 1;			//distance between characters
	mugui_uint16_t xpos     = 0;			//relativ xpos of character
    7f54:	e1 2c       	mov	r14, r1
    7f56:	f1 2c       	mov	r15, r1
	mugui_uint16_t length 	= 0;			//temporary length of string
	mugui_uint16_t i 		= 0;			//counter variable
	
	length = strlen(s);
	for(i=0; i<length; i++)
    7f58:	0c 17       	cp	r16, r28
    7f5a:	1d 07       	cpc	r17, r29
    7f5c:	71 f0       	breq	.+28     	; 0x7f7a <mugui_lcd_puts+0x50>
	{
		xpos += mugui_lcd_putc(s[i], font, x + xpos, y) + distance;
    7f5e:	a7 01       	movw	r20, r14
    7f60:	4a 0d       	add	r20, r10
    7f62:	5b 1d       	adc	r21, r11
    7f64:	94 01       	movw	r18, r8
    7f66:	b6 01       	movw	r22, r12
    7f68:	f8 01       	movw	r30, r16
    7f6a:	81 91       	ld	r24, Z+
    7f6c:	8f 01       	movw	r16, r30
    7f6e:	0e 94 ab 3e 	call	0x7d56	; 0x7d56 <mugui_lcd_putc>
    7f72:	01 96       	adiw	r24, 0x01	; 1
    7f74:	e8 0e       	add	r14, r24
    7f76:	f9 1e       	adc	r15, r25
    7f78:	ef cf       	rjmp	.-34     	; 0x7f58 <mugui_lcd_puts+0x2e>
	}
}
    7f7a:	df 91       	pop	r29
    7f7c:	cf 91       	pop	r28
    7f7e:	1f 91       	pop	r17
    7f80:	0f 91       	pop	r16
    7f82:	ff 90       	pop	r15
    7f84:	ef 90       	pop	r14
    7f86:	df 90       	pop	r13
    7f88:	cf 90       	pop	r12
    7f8a:	bf 90       	pop	r11
    7f8c:	af 90       	pop	r10
    7f8e:	9f 90       	pop	r9
    7f90:	8f 90       	pop	r8
    7f92:	08 95       	ret

00007f94 <Sensor_PID>:
int32_t PID_AvgAccVert = 0;
float 	gyroSmooth[NUMBEROFAXIS];					// Filtered gyro data
	
// Run each loop to average gyro data and also accVert data
void Sensor_PID(uint32_t period)
{
    7f94:	2f 92       	push	r2
    7f96:	3f 92       	push	r3
    7f98:	4f 92       	push	r4
    7f9a:	5f 92       	push	r5
    7f9c:	6f 92       	push	r6
    7f9e:	7f 92       	push	r7
    7fa0:	8f 92       	push	r8
    7fa2:	9f 92       	push	r9
    7fa4:	af 92       	push	r10
    7fa6:	bf 92       	push	r11
    7fa8:	cf 92       	push	r12
    7faa:	df 92       	push	r13
    7fac:	ef 92       	push	r14
    7fae:	ff 92       	push	r15
    7fb0:	0f 93       	push	r16
    7fb2:	1f 93       	push	r17
    7fb4:	cf 93       	push	r28
    7fb6:	df 93       	push	r29
    7fb8:	cd b7       	in	r28, 0x3d	; 61
    7fba:	de b7       	in	r29, 0x3e	; 62
    7fbc:	a0 97       	sbiw	r28, 0x20	; 32
    7fbe:	0f b6       	in	r0, 0x3f	; 63
    7fc0:	f8 94       	cli
    7fc2:	de bf       	out	0x3e, r29	; 62
    7fc4:	0f be       	out	0x3f, r0	; 63
    7fc6:	cd bf       	out	0x3d, r28	; 61
    7fc8:	6b 01       	movw	r12, r22
    7fca:	7c 01       	movw	r14, r24
	float tempf = 0;
    7fcc:	1d 86       	std	Y+13, r1	; 0x0d
    7fce:	1e 86       	std	Y+14, r1	; 0x0e
    7fd0:	1f 86       	std	Y+15, r1	; 0x0f
    7fd2:	18 8a       	std	Y+16, r1	; 0x10
	// RIGHT roll = +ve gyro, UP pitch = +ve gyro and LEFT yaw = +ve gyro.
	// However the way we have organised stick polarity, RIGHT roll and yaw are +ve, and DOWN elevator is too.
	// When combining with the gyro signals, the sticks have to be in the opposite polarity as the gyros.
	// As described above, pitch and yaw are already opposed, but roll needs to be reversed.

	int16_t	RCinputsAxis[NUMBEROFAXIS] = {-RCinputs[AILERON], RCinputs[ELEVATOR], RCinputs[RUDDER]};
    7fd4:	80 91 25 08 	lds	r24, 0x0825
    7fd8:	90 91 26 08 	lds	r25, 0x0826
    7fdc:	91 95       	neg	r25
    7fde:	81 95       	neg	r24
    7fe0:	91 09       	sbc	r25, r1
    7fe2:	98 87       	std	Y+8, r25	; 0x08
    7fe4:	8f 83       	std	Y+7, r24	; 0x07
    7fe6:	80 91 27 08 	lds	r24, 0x0827
    7fea:	90 91 28 08 	lds	r25, 0x0828
    7fee:	9a 87       	std	Y+10, r25	; 0x0a
    7ff0:	89 87       	std	Y+9, r24	; 0x09
    7ff2:	80 91 29 08 	lds	r24, 0x0829
    7ff6:	90 91 2a 08 	lds	r25, 0x082A
    7ffa:	9c 87       	std	Y+12, r25	; 0x0c
    7ffc:	8b 87       	std	Y+11, r24	; 0x0b
	
	int8_t Stick_rates[FLIGHT_MODES][NUMBEROFAXIS] =
    7ffe:	80 91 de 05 	lds	r24, 0x05DE
    8002:	89 83       	std	Y+1, r24	; 0x01
    8004:	80 91 e4 05 	lds	r24, 0x05E4
    8008:	8a 83       	std	Y+2, r24	; 0x02
    800a:	80 91 ea 05 	lds	r24, 0x05EA
    800e:	8b 83       	std	Y+3, r24	; 0x03
    8010:	80 91 f0 05 	lds	r24, 0x05F0
    8014:	8c 83       	std	Y+4, r24	; 0x04
    8016:	80 91 f6 05 	lds	r24, 0x05F6
    801a:	8d 83       	std	Y+5, r24	; 0x05
    801c:	80 91 fc 05 	lds	r24, 0x05FC
    8020:	8e 83       	std	Y+6, r24	; 0x06
		{Config.FlightMode[P2].Roll_Rate, Config.FlightMode[P2].Pitch_Rate, Config.FlightMode[P2].Yaw_Rate}
	};

	// Lookup actual LPF value and promote
	// Note: Two sets of values for normal and high-speed mode
	if (Config.Servo_rate != FAST)
    8022:	80 91 d3 05 	lds	r24, 0x05D3
    8026:	60 91 38 06 	lds	r22, 0x0638
	{	
		//tempf = pgm_read_float(&LPF_lookup[Config.Gyro_LPF]); 
		memcpy_P(&tempf, &LPF_lookup[Config.Gyro_LPF], sizeof(float)); 
    802a:	77 27       	eor	r23, r23
    802c:	67 fd       	sbrc	r22, 7
    802e:	70 95       	com	r23
		{Config.FlightMode[P2].Roll_Rate, Config.FlightMode[P2].Pitch_Rate, Config.FlightMode[P2].Yaw_Rate}
	};

	// Lookup actual LPF value and promote
	// Note: Two sets of values for normal and high-speed mode
	if (Config.Servo_rate != FAST)
    8030:	82 30       	cpi	r24, 0x02	; 2
    8032:	19 f0       	breq	.+6      	; 0x803a <Sensor_PID+0xa6>
	{	
		//tempf = pgm_read_float(&LPF_lookup[Config.Gyro_LPF]); 
		memcpy_P(&tempf, &LPF_lookup[Config.Gyro_LPF], sizeof(float)); 
    8034:	6f 5c       	subi	r22, 0xCF	; 207
    8036:	77 4e       	sbci	r23, 0xE7	; 231
    8038:	02 c0       	rjmp	.+4      	; 0x803e <Sensor_PID+0xaa>
	}
	else
	{
		//tempf = pgm_read_float(&LPF_lookup_HS[Config.Gyro_LPF]);
		memcpy_P(&tempf, &LPF_lookup_HS[Config.Gyro_LPF], sizeof(float)); 
    803a:	6f 5e       	subi	r22, 0xEF	; 239
    803c:	77 4e       	sbci	r23, 0xE7	; 231
    803e:	44 e0       	ldi	r20, 0x04	; 4
    8040:	50 e0       	ldi	r21, 0x00	; 0
    8042:	ce 01       	movw	r24, r28
    8044:	0d 96       	adiw	r24, 0x0d	; 13
    8046:	0e 94 eb 49 	call	0x93d6	; 0x93d6 <memcpy_P>
		//************************************************************
		P1_temp = gyroADC[axis] + stick_P1;
		P2_temp = gyroADC[axis] + stick_P2;
		
		// Work out multiplication factor compared to standard loop time
		tempf = period;								// Promote int32_t to float
    804a:	c7 01       	movw	r24, r14
    804c:	b6 01       	movw	r22, r12
    804e:	0e 94 32 48 	call	0x9064	; 0x9064 <__floatunsisf>
		factor = period/STANDARDLOOP;
    8052:	20 e0       	ldi	r18, 0x00	; 0
    8054:	30 e3       	ldi	r19, 0x30	; 48
    8056:	4f e5       	ldi	r20, 0x5F	; 95
    8058:	55 e4       	ldi	r21, 0x45	; 69
    805a:	0e 94 99 47 	call	0x8f32	; 0x8f32 <__divsf3>
    805e:	2b 01       	movw	r4, r22
    8060:	3c 01       	movw	r6, r24
		// Gyro LPF
		//************************************************************	
			
		gyroADCf = gyroADC[axis]; // Promote

		if (Config.Gyro_LPF != NOFILTER)
    8062:	20 91 38 06 	lds	r18, 0x0638
    8066:	28 a3       	std	Y+32, r18	; 0x20
    8068:	8b e6       	ldi	r24, 0x6B	; 107
    806a:	28 2e       	mov	r2, r24
    806c:	85 e0       	ldi	r24, 0x05	; 5
    806e:	38 2e       	mov	r3, r24
    8070:	8d ef       	ldi	r24, 0xFD	; 253
    8072:	97 e0       	ldi	r25, 0x07	; 7
    8074:	9a 8b       	std	Y+18, r25	; 0x12
    8076:	89 8b       	std	Y+17, r24	; 0x11
    8078:	05 ee       	ldi	r16, 0xE5	; 229
    807a:	17 e0       	ldi	r17, 0x07	; 7
    807c:	e3 e2       	ldi	r30, 0x23	; 35
    807e:	f6 e0       	ldi	r31, 0x06	; 6
    8080:	fb 8f       	std	Y+27, r31	; 0x1b
    8082:	ea 8f       	std	Y+26, r30	; 0x1a
    8084:	9e 01       	movw	r18, r28
    8086:	29 5f       	subi	r18, 0xF9	; 249
    8088:	3f 4f       	sbci	r19, 0xFF	; 255
    808a:	3d 8f       	std	Y+29, r19	; 0x1d
    808c:	2c 8f       	std	Y+28, r18	; 0x1c
    808e:	ce 01       	movw	r24, r28
    8090:	01 96       	adiw	r24, 0x01	; 1
    8092:	9f 8f       	std	Y+31, r25	; 0x1f
    8094:	8e 8f       	std	Y+30, r24	; 0x1e
    8096:	fe 01       	movw	r30, r28
    8098:	34 96       	adiw	r30, 0x04	; 4
    809a:	f9 8f       	std	Y+25, r31	; 0x19
    809c:	e8 8f       	std	Y+24, r30	; 0x18
    809e:	27 e1       	ldi	r18, 0x17	; 23
    80a0:	36 e0       	ldi	r19, 0x06	; 6
    80a2:	3f 8b       	std	Y+23, r19	; 0x17
    80a4:	2e 8b       	std	Y+22, r18	; 0x16
    80a6:	1d 8a       	std	Y+21, r1	; 0x15
		//************************************************************
		// Increment and limit gyro I-terms, handle heading hold nicely
		//************************************************************

		// Reduce Gyro drift noise before adding into I-term
		if ((gyroADC[axis] > -GYRO_DEADBAND) && (gyroADC[axis] < GYRO_DEADBAND)) 
    80a8:	f1 01       	movw	r30, r2
    80aa:	80 81       	ld	r24, Z
    80ac:	91 81       	ldd	r25, Z+1	; 0x01
    80ae:	04 96       	adiw	r24, 0x04	; 4
    80b0:	09 97       	sbiw	r24, 0x09	; 9
    80b2:	10 f4       	brcc	.+4      	; 0x80b8 <Sensor_PID+0x124>
		{
			gyroADC[axis] = 0;
    80b4:	11 82       	std	Z+1, r1	; 0x01
    80b6:	10 82       	st	Z, r1
		}
		
		// Work out stick rate divider. 0 is slowest, 4 is fastest.
		// /64 (15.25), /32 (30.5), /16 (61*), /8 (122), /4 (244)
		stick_P1 = RCinputsAxis[axis] >> (4 - (Stick_rates[P1][axis] - 2));
    80b8:	ec 8d       	ldd	r30, Y+28	; 0x1c
    80ba:	fd 8d       	ldd	r31, Y+29	; 0x1d
    80bc:	81 90       	ld	r8, Z+
    80be:	91 90       	ld	r9, Z+
    80c0:	fd 8f       	std	Y+29, r31	; 0x1d
    80c2:	ec 8f       	std	Y+28, r30	; 0x1c
    80c4:	ee 8d       	ldd	r30, Y+30	; 0x1e
    80c6:	ff 8d       	ldd	r31, Y+31	; 0x1f
    80c8:	b1 90       	ld	r11, Z+
    80ca:	ff 8f       	std	Y+31, r31	; 0x1f
    80cc:	ee 8f       	std	Y+30, r30	; 0x1e
		stick_P2 = RCinputsAxis[axis] >> (4 - (Stick_rates[P2][axis] - 2));
    80ce:	e8 8d       	ldd	r30, Y+24	; 0x18
    80d0:	f9 8d       	ldd	r31, Y+25	; 0x19
    80d2:	81 91       	ld	r24, Z+
    80d4:	f9 8f       	std	Y+25, r31	; 0x19
    80d6:	e8 8f       	std	Y+24, r30	; 0x18
		//************************************************************
		// Magically correlate the I-term value with the loop rate.
		// This keeps the I-term and stick input constant over varying 
		// loop rates 
		//************************************************************
		P1_temp = gyroADC[axis] + stick_P1;
    80d8:	f1 01       	movw	r30, r2
    80da:	01 90       	ld	r0, Z+
    80dc:	f0 81       	ld	r31, Z
    80de:	e0 2d       	mov	r30, r0
    80e0:	fc 8b       	std	Y+20, r31	; 0x14
    80e2:	eb 8b       	std	Y+19, r30	; 0x13
		}
		
		// Work out stick rate divider. 0 is slowest, 4 is fastest.
		// /64 (15.25), /32 (30.5), /16 (61*), /8 (122), /4 (244)
		stick_P1 = RCinputsAxis[axis] >> (4 - (Stick_rates[P1][axis] - 2));
		stick_P2 = RCinputsAxis[axis] >> (4 - (Stick_rates[P2][axis] - 2));
    80e4:	66 e0       	ldi	r22, 0x06	; 6
    80e6:	70 e0       	ldi	r23, 0x00	; 0
    80e8:	68 1b       	sub	r22, r24
    80ea:	71 09       	sbc	r23, r1
    80ec:	87 fd       	sbrc	r24, 7
    80ee:	73 95       	inc	r23
    80f0:	94 01       	movw	r18, r8
    80f2:	02 c0       	rjmp	.+4      	; 0x80f8 <Sensor_PID+0x164>
    80f4:	35 95       	asr	r19
    80f6:	27 95       	ror	r18
    80f8:	6a 95       	dec	r22
    80fa:	e2 f7       	brpl	.-8      	; 0x80f4 <Sensor_PID+0x160>
    80fc:	b9 01       	movw	r22, r18
		// Magically correlate the I-term value with the loop rate.
		// This keeps the I-term and stick input constant over varying 
		// loop rates 
		//************************************************************
		P1_temp = gyroADC[axis] + stick_P1;
		P2_temp = gyroADC[axis] + stick_P2;
    80fe:	6e 0f       	add	r22, r30
    8100:	7f 1f       	adc	r23, r31
		// Adjust gyro and stick values based on factor		
		tempf = P1_temp;							// Promote int32_t to float
		tempf = tempf * factor;
		P1_temp = (int32_t)tempf;					// Demote to int32_t
		
		tempf = P2_temp;
    8102:	88 27       	eor	r24, r24
    8104:	77 fd       	sbrc	r23, 7
    8106:	80 95       	com	r24
    8108:	98 2f       	mov	r25, r24
    810a:	0e 94 34 48 	call	0x9068	; 0x9068 <__floatsisf>
		tempf = tempf * factor;
    810e:	a3 01       	movw	r20, r6
    8110:	92 01       	movw	r18, r4
    8112:	0e 94 e8 48 	call	0x91d0	; 0x91d0 <__mulsf3>
    8116:	6b 01       	movw	r12, r22
    8118:	7c 01       	movw	r14, r24
			gyroADC[axis] = 0;
		}
		
		// Work out stick rate divider. 0 is slowest, 4 is fastest.
		// /64 (15.25), /32 (30.5), /16 (61*), /8 (122), /4 (244)
		stick_P1 = RCinputsAxis[axis] >> (4 - (Stick_rates[P1][axis] - 2));
    811a:	66 e0       	ldi	r22, 0x06	; 6
    811c:	70 e0       	ldi	r23, 0x00	; 0
    811e:	6b 19       	sub	r22, r11
    8120:	71 09       	sbc	r23, r1
    8122:	b7 fc       	sbrc	r11, 7
    8124:	73 95       	inc	r23
    8126:	c4 01       	movw	r24, r8
    8128:	02 c0       	rjmp	.+4      	; 0x812e <Sensor_PID+0x19a>
    812a:	95 95       	asr	r25
    812c:	87 95       	ror	r24
    812e:	6a 95       	dec	r22
    8130:	e2 f7       	brpl	.-8      	; 0x812a <Sensor_PID+0x196>
    8132:	bc 01       	movw	r22, r24
		//************************************************************
		// Magically correlate the I-term value with the loop rate.
		// This keeps the I-term and stick input constant over varying 
		// loop rates 
		//************************************************************
		P1_temp = gyroADC[axis] + stick_P1;
    8134:	eb 89       	ldd	r30, Y+19	; 0x13
    8136:	fc 89       	ldd	r31, Y+20	; 0x14
    8138:	6e 0f       	add	r22, r30
    813a:	7f 1f       	adc	r23, r31
		// Work out multiplication factor compared to standard loop time
		tempf = period;								// Promote int32_t to float
		factor = period/STANDARDLOOP;
		
		// Adjust gyro and stick values based on factor		
		tempf = P1_temp;							// Promote int32_t to float
    813c:	88 27       	eor	r24, r24
    813e:	77 fd       	sbrc	r23, 7
    8140:	80 95       	com	r24
    8142:	98 2f       	mov	r25, r24
    8144:	0e 94 34 48 	call	0x9068	; 0x9068 <__floatsisf>
		tempf = tempf * factor;
    8148:	a3 01       	movw	r20, r6
    814a:	92 01       	movw	r18, r4
    814c:	0e 94 e8 48 	call	0x91d0	; 0x91d0 <__mulsf3>
		P1_temp = (int32_t)tempf;					// Demote to int32_t
    8150:	0e 94 01 48 	call	0x9002	; 0x9002 <__fixsfsi>
		tempf = tempf * factor;
		P2_temp = (int32_t)tempf;
		
		// Calculate I-term from gyro and stick data 
		// These may look similar, but they are constrained quite differently.
		IntegralGyro[P1][axis] += P1_temp;
    8154:	f8 01       	movw	r30, r16
    8156:	80 80       	ld	r8, Z
    8158:	91 80       	ldd	r9, Z+1	; 0x01
    815a:	a2 80       	ldd	r10, Z+2	; 0x02
    815c:	b3 80       	ldd	r11, Z+3	; 0x03
    815e:	86 0e       	add	r8, r22
    8160:	97 1e       	adc	r9, r23
    8162:	a8 1e       	adc	r10, r24
    8164:	b9 1e       	adc	r11, r25
    8166:	80 82       	st	Z, r8
    8168:	91 82       	std	Z+1, r9	; 0x01
    816a:	a2 82       	std	Z+2, r10	; 0x02
    816c:	b3 82       	std	Z+3, r11	; 0x03
		tempf = tempf * factor;
		P1_temp = (int32_t)tempf;					// Demote to int32_t
		
		tempf = P2_temp;
		tempf = tempf * factor;
		P2_temp = (int32_t)tempf;
    816e:	c7 01       	movw	r24, r14
    8170:	b6 01       	movw	r22, r12
    8172:	0e 94 01 48 	call	0x9002	; 0x9002 <__fixsfsi>
		
		// Calculate I-term from gyro and stick data 
		// These may look similar, but they are constrained quite differently.
		IntegralGyro[P1][axis] += P1_temp;
		IntegralGyro[P2][axis] += P2_temp;
    8176:	f8 01       	movw	r30, r16
    8178:	24 85       	ldd	r18, Z+12	; 0x0c
    817a:	35 85       	ldd	r19, Z+13	; 0x0d
    817c:	46 85       	ldd	r20, Z+14	; 0x0e
    817e:	57 85       	ldd	r21, Z+15	; 0x0f
    8180:	26 0f       	add	r18, r22
    8182:	37 1f       	adc	r19, r23
    8184:	48 1f       	adc	r20, r24
    8186:	59 1f       	adc	r21, r25
    8188:	24 87       	std	Z+12, r18	; 0x0c
    818a:	35 87       	std	Z+13, r19	; 0x0d
    818c:	46 87       	std	Z+14, r20	; 0x0e
    818e:	57 87       	std	Z+15, r21	; 0x0f
		//************************************************************
		// Limit the I-terms to the user-set limits
		//************************************************************
		for (i = P1; i <= P2; i++)
		{
			if (IntegralGyro[i][axis] > Config.Raw_I_Constrain[i][axis])
    8190:	ee 89       	ldd	r30, Y+22	; 0x16
    8192:	ff 89       	ldd	r31, Y+23	; 0x17
    8194:	81 91       	ld	r24, Z+
    8196:	91 91       	ld	r25, Z+
    8198:	a1 91       	ld	r26, Z+
    819a:	b1 91       	ld	r27, Z+
    819c:	ff 8b       	std	Y+23, r31	; 0x17
    819e:	ee 8b       	std	Y+22, r30	; 0x16
    81a0:	88 15       	cp	r24, r8
    81a2:	99 05       	cpc	r25, r9
    81a4:	aa 05       	cpc	r26, r10
    81a6:	bb 05       	cpc	r27, r11
    81a8:	2c f4       	brge	.+10     	; 0x81b4 <Sensor_PID+0x220>
			{
				IntegralGyro[i][axis] = Config.Raw_I_Constrain[i][axis];
    81aa:	f8 01       	movw	r30, r16
    81ac:	80 83       	st	Z, r24
    81ae:	91 83       	std	Z+1, r25	; 0x01
    81b0:	a2 83       	std	Z+2, r26	; 0x02
    81b2:	b3 83       	std	Z+3, r27	; 0x03
			}
			if (IntegralGyro[i][axis] < -Config.Raw_I_Constrain[i][axis])
    81b4:	b0 95       	com	r27
    81b6:	a0 95       	com	r26
    81b8:	90 95       	com	r25
    81ba:	81 95       	neg	r24
    81bc:	9f 4f       	sbci	r25, 0xFF	; 255
    81be:	af 4f       	sbci	r26, 0xFF	; 255
    81c0:	bf 4f       	sbci	r27, 0xFF	; 255
    81c2:	f8 01       	movw	r30, r16
    81c4:	40 81       	ld	r20, Z
    81c6:	51 81       	ldd	r21, Z+1	; 0x01
    81c8:	62 81       	ldd	r22, Z+2	; 0x02
    81ca:	73 81       	ldd	r23, Z+3	; 0x03
    81cc:	48 17       	cp	r20, r24
    81ce:	59 07       	cpc	r21, r25
    81d0:	6a 07       	cpc	r22, r26
    81d2:	7b 07       	cpc	r23, r27
    81d4:	24 f4       	brge	.+8      	; 0x81de <Sensor_PID+0x24a>
			{
				IntegralGyro[i][axis] = -Config.Raw_I_Constrain[i][axis];
    81d6:	80 83       	st	Z, r24
    81d8:	91 83       	std	Z+1, r25	; 0x01
    81da:	a2 83       	std	Z+2, r26	; 0x02
    81dc:	b3 83       	std	Z+3, r27	; 0x03
		//************************************************************
		// Limit the I-terms to the user-set limits
		//************************************************************
		for (i = P1; i <= P2; i++)
		{
			if (IntegralGyro[i][axis] > Config.Raw_I_Constrain[i][axis])
    81de:	ea 8d       	ldd	r30, Y+26	; 0x1a
    81e0:	fb 8d       	ldd	r31, Y+27	; 0x1b
    81e2:	81 91       	ld	r24, Z+
    81e4:	91 91       	ld	r25, Z+
    81e6:	a1 91       	ld	r26, Z+
    81e8:	b1 91       	ld	r27, Z+
    81ea:	fb 8f       	std	Y+27, r31	; 0x1b
    81ec:	ea 8f       	std	Y+26, r30	; 0x1a
    81ee:	f8 01       	movw	r30, r16
    81f0:	44 85       	ldd	r20, Z+12	; 0x0c
    81f2:	55 85       	ldd	r21, Z+13	; 0x0d
    81f4:	66 85       	ldd	r22, Z+14	; 0x0e
    81f6:	77 85       	ldd	r23, Z+15	; 0x0f
    81f8:	84 17       	cp	r24, r20
    81fa:	95 07       	cpc	r25, r21
    81fc:	a6 07       	cpc	r26, r22
    81fe:	b7 07       	cpc	r27, r23
    8200:	24 f4       	brge	.+8      	; 0x820a <Sensor_PID+0x276>
			{
				IntegralGyro[i][axis] = Config.Raw_I_Constrain[i][axis];
    8202:	84 87       	std	Z+12, r24	; 0x0c
    8204:	95 87       	std	Z+13, r25	; 0x0d
    8206:	a6 87       	std	Z+14, r26	; 0x0e
    8208:	b7 87       	std	Z+15, r27	; 0x0f
			}
			if (IntegralGyro[i][axis] < -Config.Raw_I_Constrain[i][axis])
    820a:	b0 95       	com	r27
    820c:	a0 95       	com	r26
    820e:	90 95       	com	r25
    8210:	81 95       	neg	r24
    8212:	9f 4f       	sbci	r25, 0xFF	; 255
    8214:	af 4f       	sbci	r26, 0xFF	; 255
    8216:	bf 4f       	sbci	r27, 0xFF	; 255
    8218:	f8 01       	movw	r30, r16
    821a:	44 85       	ldd	r20, Z+12	; 0x0c
    821c:	55 85       	ldd	r21, Z+13	; 0x0d
    821e:	66 85       	ldd	r22, Z+14	; 0x0e
    8220:	77 85       	ldd	r23, Z+15	; 0x0f
    8222:	48 17       	cp	r20, r24
    8224:	59 07       	cpc	r21, r25
    8226:	6a 07       	cpc	r22, r26
    8228:	7b 07       	cpc	r23, r27
    822a:	24 f4       	brge	.+8      	; 0x8234 <Sensor_PID+0x2a0>
			{
				IntegralGyro[i][axis] = -Config.Raw_I_Constrain[i][axis];
    822c:	84 87       	std	Z+12, r24	; 0x0c
    822e:	95 87       	std	Z+13, r25	; 0x0d
    8230:	a6 87       	std	Z+14, r26	; 0x0e
    8232:	b7 87       	std	Z+15, r27	; 0x0f

		//************************************************************
		// Gyro LPF
		//************************************************************	
			
		gyroADCf = gyroADC[axis]; // Promote
    8234:	2b 89       	ldd	r18, Y+19	; 0x13
    8236:	3c 89       	ldd	r19, Y+20	; 0x14
    8238:	b9 01       	movw	r22, r18
    823a:	88 27       	eor	r24, r24
    823c:	77 fd       	sbrc	r23, 7
    823e:	80 95       	com	r24
    8240:	98 2f       	mov	r25, r24
    8242:	0e 94 34 48 	call	0x9068	; 0x9068 <__floatsisf>
    8246:	4b 01       	movw	r8, r22
    8248:	5c 01       	movw	r10, r24

		if (Config.Gyro_LPF != NOFILTER)
    824a:	38 a1       	ldd	r19, Y+32	; 0x20
    824c:	37 30       	cpi	r19, 0x07	; 7
    824e:	f9 f0       	breq	.+62     	; 0x828e <Sensor_PID+0x2fa>
		{
			// Gyro LPF
			gyroSmooth[axis] = (gyroSmooth[axis] * (tempf - 1.0f) + gyroADCf) / tempf;
    8250:	20 e0       	ldi	r18, 0x00	; 0
    8252:	30 e0       	ldi	r19, 0x00	; 0
    8254:	40 e8       	ldi	r20, 0x80	; 128
    8256:	5f e3       	ldi	r21, 0x3F	; 63
    8258:	c7 01       	movw	r24, r14
    825a:	b6 01       	movw	r22, r12
    825c:	0e 94 30 47 	call	0x8e60	; 0x8e60 <__subsf3>
    8260:	e9 89       	ldd	r30, Y+17	; 0x11
    8262:	fa 89       	ldd	r31, Y+18	; 0x12
    8264:	20 81       	ld	r18, Z
    8266:	31 81       	ldd	r19, Z+1	; 0x01
    8268:	42 81       	ldd	r20, Z+2	; 0x02
    826a:	53 81       	ldd	r21, Z+3	; 0x03
    826c:	0e 94 e8 48 	call	0x91d0	; 0x91d0 <__mulsf3>
    8270:	a5 01       	movw	r20, r10
    8272:	94 01       	movw	r18, r8
    8274:	0e 94 31 47 	call	0x8e62	; 0x8e62 <__addsf3>
    8278:	a7 01       	movw	r20, r14
    827a:	96 01       	movw	r18, r12
    827c:	0e 94 99 47 	call	0x8f32	; 0x8f32 <__divsf3>
    8280:	e9 89       	ldd	r30, Y+17	; 0x11
    8282:	fa 89       	ldd	r31, Y+18	; 0x12
    8284:	60 83       	st	Z, r22
    8286:	71 83       	std	Z+1, r23	; 0x01
    8288:	82 83       	std	Z+2, r24	; 0x02
    828a:	93 83       	std	Z+3, r25	; 0x03
    828c:	06 c0       	rjmp	.+12     	; 0x829a <Sensor_PID+0x306>
		}
		else
		{
			// Use raw gyroADC[axis] as source for gyro values
			gyroSmooth[axis] =  gyroADCf;
    828e:	e9 89       	ldd	r30, Y+17	; 0x11
    8290:	fa 89       	ldd	r31, Y+18	; 0x12
    8292:	60 83       	st	Z, r22
    8294:	71 83       	std	Z+1, r23	; 0x01
    8296:	82 83       	std	Z+2, r24	; 0x02
    8298:	93 83       	std	Z+3, r25	; 0x03
		}		
		
		// Demote back to int16_t
		gyroADC[axis] = (int16_t)gyroSmooth[axis];		
    829a:	e9 89       	ldd	r30, Y+17	; 0x11
    829c:	fa 89       	ldd	r31, Y+18	; 0x12
    829e:	61 91       	ld	r22, Z+
    82a0:	71 91       	ld	r23, Z+
    82a2:	81 91       	ld	r24, Z+
    82a4:	91 91       	ld	r25, Z+
    82a6:	fa 8b       	std	Y+18, r31	; 0x12
    82a8:	e9 8b       	std	Y+17, r30	; 0x11
    82aa:	0e 94 01 48 	call	0x9002	; 0x9002 <__fixsfsi>
    82ae:	f1 01       	movw	r30, r2
    82b0:	61 93       	st	Z+, r22
    82b2:	71 93       	st	Z+, r23
    82b4:	1f 01       	movw	r2, r30
    82b6:	fd 89       	ldd	r31, Y+21	; 0x15
    82b8:	ff 5f       	subi	r31, 0xFF	; 255
    82ba:	fd 8b       	std	Y+21, r31	; 0x15
    82bc:	0c 5f       	subi	r16, 0xFC	; 252
    82be:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		//tempf = pgm_read_float(&LPF_lookup_HS[Config.Gyro_LPF]);
		memcpy_P(&tempf, &LPF_lookup_HS[Config.Gyro_LPF], sizeof(float)); 
	}

	for (axis = 0; axis <= YAW; axis ++)
    82c0:	f3 30       	cpi	r31, 0x03	; 3
    82c2:	09 f0       	breq	.+2      	; 0x82c6 <Sensor_PID+0x332>
    82c4:	f1 ce       	rjmp	.-542    	; 0x80a8 <Sensor_PID+0x114>
		// Demote back to int16_t
		gyroADC[axis] = (int16_t)gyroSmooth[axis];		
	}
	
	// Average accVert prior to Calculate_PID()
	PID_AvgAccVert += accVert;
    82c6:	40 91 14 05 	lds	r20, 0x0514
    82ca:	50 91 15 05 	lds	r21, 0x0515
    82ce:	66 27       	eor	r22, r22
    82d0:	57 fd       	sbrc	r21, 7
    82d2:	60 95       	com	r22
    82d4:	76 2f       	mov	r23, r22
    82d6:	80 91 36 05 	lds	r24, 0x0536
    82da:	90 91 37 05 	lds	r25, 0x0537
    82de:	a0 91 38 05 	lds	r26, 0x0538
    82e2:	b0 91 39 05 	lds	r27, 0x0539
    82e6:	84 0f       	add	r24, r20
    82e8:	95 1f       	adc	r25, r21
    82ea:	a6 1f       	adc	r26, r22
    82ec:	b7 1f       	adc	r27, r23
    82ee:	80 93 36 05 	sts	0x0536, r24
    82f2:	90 93 37 05 	sts	0x0537, r25
    82f6:	a0 93 38 05 	sts	0x0538, r26
    82fa:	b0 93 39 05 	sts	0x0539, r27
			
}
    82fe:	a0 96       	adiw	r28, 0x20	; 32
    8300:	0f b6       	in	r0, 0x3f	; 63
    8302:	f8 94       	cli
    8304:	de bf       	out	0x3e, r29	; 62
    8306:	0f be       	out	0x3f, r0	; 63
    8308:	cd bf       	out	0x3d, r28	; 61
    830a:	df 91       	pop	r29
    830c:	cf 91       	pop	r28
    830e:	1f 91       	pop	r17
    8310:	0f 91       	pop	r16
    8312:	ff 90       	pop	r15
    8314:	ef 90       	pop	r14
    8316:	df 90       	pop	r13
    8318:	cf 90       	pop	r12
    831a:	bf 90       	pop	r11
    831c:	af 90       	pop	r10
    831e:	9f 90       	pop	r9
    8320:	8f 90       	pop	r8
    8322:	7f 90       	pop	r7
    8324:	6f 90       	pop	r6
    8326:	5f 90       	pop	r5
    8328:	4f 90       	pop	r4
    832a:	3f 90       	pop	r3
    832c:	2f 90       	pop	r2
    832e:	08 95       	ret

00008330 <Calculate_PID>:

// Run just before PWM output, using averaged data
void Calculate_PID(void)
{
    8330:	2f 92       	push	r2
    8332:	3f 92       	push	r3
    8334:	4f 92       	push	r4
    8336:	5f 92       	push	r5
    8338:	6f 92       	push	r6
    833a:	7f 92       	push	r7
    833c:	8f 92       	push	r8
    833e:	9f 92       	push	r9
    8340:	af 92       	push	r10
    8342:	bf 92       	push	r11
    8344:	cf 92       	push	r12
    8346:	df 92       	push	r13
    8348:	ef 92       	push	r14
    834a:	ff 92       	push	r15
    834c:	0f 93       	push	r16
    834e:	1f 93       	push	r17
    8350:	cf 93       	push	r28
    8352:	df 93       	push	r29
    8354:	cd b7       	in	r28, 0x3d	; 61
    8356:	de b7       	in	r29, 0x3e	; 62
    8358:	ca 54       	subi	r28, 0x4A	; 74
    835a:	d1 09       	sbc	r29, r1
    835c:	0f b6       	in	r0, 0x3f	; 63
    835e:	f8 94       	cli
    8360:	de bf       	out	0x3e, r29	; 62
    8362:	0f be       	out	0x3f, r0	; 63
    8364:	cd bf       	out	0x3d, r28	; 61
	int16_t AvAccVert = 0;
	int8_t	axis = 0;
	int8_t i = 0;

	// Initialise arrays with gain values.
	int8_t 	P_gain[FLIGHT_MODES][NUMBEROFAXIS] = 
    8366:	80 91 db 05 	lds	r24, 0x05DB
    836a:	8d 8b       	std	Y+21, r24	; 0x15
    836c:	80 91 e1 05 	lds	r24, 0x05E1
    8370:	8e 8b       	std	Y+22, r24	; 0x16
    8372:	80 91 e7 05 	lds	r24, 0x05E7
    8376:	8f 8b       	std	Y+23, r24	; 0x17
    8378:	80 91 ed 05 	lds	r24, 0x05ED
    837c:	88 8f       	std	Y+24, r24	; 0x18
    837e:	80 91 f3 05 	lds	r24, 0x05F3
    8382:	89 8f       	std	Y+25, r24	; 0x19
    8384:	80 91 f9 05 	lds	r24, 0x05F9
    8388:	8a 8f       	std	Y+26, r24	; 0x1a
		{
			{Config.FlightMode[P1].Roll_P_mult, Config.FlightMode[P1].Pitch_P_mult, Config.FlightMode[P1].Yaw_P_mult},
		 	{Config.FlightMode[P2].Roll_P_mult, Config.FlightMode[P2].Pitch_P_mult, Config.FlightMode[P2].Yaw_P_mult}
		};

	int8_t 	I_gain[FLIGHT_MODES][NUMBEROFAXIS] = 
    838a:	80 91 dc 05 	lds	r24, 0x05DC
    838e:	8f 87       	std	Y+15, r24	; 0x0f
    8390:	80 91 e2 05 	lds	r24, 0x05E2
    8394:	88 8b       	std	Y+16, r24	; 0x10
    8396:	80 91 e8 05 	lds	r24, 0x05E8
    839a:	89 8b       	std	Y+17, r24	; 0x11
    839c:	80 91 ee 05 	lds	r24, 0x05EE
    83a0:	8a 8b       	std	Y+18, r24	; 0x12
    83a2:	80 91 f4 05 	lds	r24, 0x05F4
    83a6:	8b 8b       	std	Y+19, r24	; 0x13
    83a8:	80 91 fa 05 	lds	r24, 0x05FA
    83ac:	8c 8b       	std	Y+20, r24	; 0x14
		{
			{Config.FlightMode[P1].Roll_I_mult, Config.FlightMode[P1].Pitch_I_mult, Config.FlightMode[P1].Yaw_I_mult},
			{Config.FlightMode[P2].Roll_I_mult, Config.FlightMode[P2].Pitch_I_mult, Config.FlightMode[P2].Yaw_I_mult}
		};

	int8_t 	L_gain[FLIGHT_MODES][NUMBEROFAXIS] = 
    83ae:	80 91 df 05 	lds	r24, 0x05DF
    83b2:	89 87       	std	Y+9, r24	; 0x09
    83b4:	80 91 e5 05 	lds	r24, 0x05E5
    83b8:	8a 87       	std	Y+10, r24	; 0x0a
		{
			{Config.FlightMode[P1].A_Roll_P_mult, Config.FlightMode[P1].A_Pitch_P_mult, Config.FlightMode[P1].A_Zed_P_mult},
    83ba:	20 91 ec 05 	lds	r18, 0x05EC
    83be:	29 a7       	std	Y+41, r18	; 0x29
		{
			{Config.FlightMode[P1].Roll_I_mult, Config.FlightMode[P1].Pitch_I_mult, Config.FlightMode[P1].Yaw_I_mult},
			{Config.FlightMode[P2].Roll_I_mult, Config.FlightMode[P2].Pitch_I_mult, Config.FlightMode[P2].Yaw_I_mult}
		};

	int8_t 	L_gain[FLIGHT_MODES][NUMBEROFAXIS] = 
    83c0:	2b 87       	std	Y+11, r18	; 0x0b
    83c2:	80 91 f1 05 	lds	r24, 0x05F1
    83c6:	8c 87       	std	Y+12, r24	; 0x0c
    83c8:	80 91 f7 05 	lds	r24, 0x05F7
    83cc:	8d 87       	std	Y+13, r24	; 0x0d
		{
			{Config.FlightMode[P1].A_Roll_P_mult, Config.FlightMode[P1].A_Pitch_P_mult, Config.FlightMode[P1].A_Zed_P_mult},
			{Config.FlightMode[P2].A_Roll_P_mult, Config.FlightMode[P2].A_Pitch_P_mult, Config.FlightMode[P2].A_Zed_P_mult}
    83ce:	30 91 fe 05 	lds	r19, 0x05FE
    83d2:	3a a7       	std	Y+42, r19	; 0x2a
		{
			{Config.FlightMode[P1].Roll_I_mult, Config.FlightMode[P1].Pitch_I_mult, Config.FlightMode[P1].Yaw_I_mult},
			{Config.FlightMode[P2].Roll_I_mult, Config.FlightMode[P2].Pitch_I_mult, Config.FlightMode[P2].Yaw_I_mult}
		};

	int8_t 	L_gain[FLIGHT_MODES][NUMBEROFAXIS] = 
    83d4:	3e 87       	std	Y+14, r19	; 0x0e
			{Config.FlightMode[P1].A_Roll_P_mult, Config.FlightMode[P1].A_Pitch_P_mult, Config.FlightMode[P1].A_Zed_P_mult},
			{Config.FlightMode[P2].A_Roll_P_mult, Config.FlightMode[P2].A_Pitch_P_mult, Config.FlightMode[P2].A_Zed_P_mult}
		};

	// Only for roll and pitch acc trim
	int16_t	L_trim[FLIGHT_MODES][2] =
    83d6:	80 91 a8 07 	lds	r24, 0x07A8
    83da:	90 91 a9 07 	lds	r25, 0x07A9
    83de:	9a 83       	std	Y+2, r25	; 0x02
    83e0:	89 83       	std	Y+1, r24	; 0x01
    83e2:	80 91 ac 07 	lds	r24, 0x07AC
    83e6:	90 91 ad 07 	lds	r25, 0x07AD
    83ea:	9c 83       	std	Y+4, r25	; 0x04
    83ec:	8b 83       	std	Y+3, r24	; 0x03
    83ee:	80 91 aa 07 	lds	r24, 0x07AA
    83f2:	90 91 ab 07 	lds	r25, 0x07AB
    83f6:	9e 83       	std	Y+6, r25	; 0x06
    83f8:	8d 83       	std	Y+5, r24	; 0x05
    83fa:	80 91 ae 07 	lds	r24, 0x07AE
    83fe:	90 91 af 07 	lds	r25, 0x07AF
    8402:	98 87       	std	Y+8, r25	; 0x08
    8404:	8f 83       	std	Y+7, r24	; 0x07
			{Config.Rolltrim[P1], Config.Pitchtrim[P1]},
			{Config.Rolltrim[P2], Config.Pitchtrim[P2]}
		};

	// Average accVert
	AvAccVert = (int16_t)(PID_AvgAccVert / LoopCount);
    8406:	20 91 16 05 	lds	r18, 0x0516
    840a:	30 e0       	ldi	r19, 0x00	; 0
    840c:	40 e0       	ldi	r20, 0x00	; 0
    840e:	50 e0       	ldi	r21, 0x00	; 0
    8410:	60 91 36 05 	lds	r22, 0x0536
    8414:	70 91 37 05 	lds	r23, 0x0537
    8418:	80 91 38 05 	lds	r24, 0x0538
    841c:	90 91 39 05 	lds	r25, 0x0539
    8420:	0e 94 95 49 	call	0x932a	; 0x932a <__divmodsi4>
    8424:	29 96       	adiw	r28, 0x09	; 9
    8426:	2c af       	std	Y+60, r18	; 0x3c
    8428:	3d af       	std	Y+61, r19	; 0x3d
    842a:	4e af       	std	Y+62, r20	; 0x3e
    842c:	5f af       	std	Y+63, r21	; 0x3f
    842e:	29 97       	sbiw	r28, 0x09	; 9
	PID_AvgAccVert = 0;							// Reset average
    8430:	10 92 36 05 	sts	0x0536, r1
    8434:	10 92 37 05 	sts	0x0537, r1
    8438:	10 92 38 05 	sts	0x0538, r1
    843c:	10 92 39 05 	sts	0x0539, r1
		// Add in gyro Yaw trim
		//************************************************************

		if (axis == YAW)
		{
			PID_gyro_temp1 = (int32_t)(Config.FlightMode[P1].Yaw_trim << 6);
    8440:	80 91 eb 05 	lds	r24, 0x05EB
    8444:	40 e4       	ldi	r20, 0x40	; 64
    8446:	84 02       	muls	r24, r20
    8448:	c0 01       	movw	r24, r0
    844a:	11 24       	eor	r1, r1
    844c:	9c 01       	movw	r18, r24
    844e:	44 27       	eor	r20, r20
    8450:	37 fd       	sbrc	r19, 7
    8452:	40 95       	com	r20
    8454:	54 2f       	mov	r21, r20
    8456:	29 af       	std	Y+57, r18	; 0x39
    8458:	3a af       	std	Y+58, r19	; 0x3a
    845a:	4b af       	std	Y+59, r20	; 0x3b
    845c:	5c af       	std	Y+60, r21	; 0x3c
			PID_gyro_temp2 = (int32_t)(Config.FlightMode[P2].Yaw_trim << 6);
    845e:	80 91 fd 05 	lds	r24, 0x05FD
    8462:	30 e4       	ldi	r19, 0x40	; 64
    8464:	83 02       	muls	r24, r19
    8466:	c0 01       	movw	r24, r0
    8468:	11 24       	eor	r1, r1
    846a:	9c 01       	movw	r18, r24
    846c:	44 27       	eor	r20, r20
    846e:	37 fd       	sbrc	r19, 7
    8470:	40 95       	com	r20
    8472:	54 2f       	mov	r21, r20
    8474:	21 96       	adiw	r28, 0x01	; 1
    8476:	2c af       	std	Y+60, r18	; 0x3c
    8478:	3d af       	std	Y+61, r19	; 0x3d
    847a:	4e af       	std	Y+62, r20	; 0x3e
    847c:	5f af       	std	Y+63, r21	; 0x3f
    847e:	21 97       	sbiw	r28, 0x01	; 1
    8480:	eb e6       	ldi	r30, 0x6B	; 107
    8482:	f5 e0       	ldi	r31, 0x05	; 5
    8484:	f8 af       	std	Y+56, r31	; 0x38
    8486:	ef ab       	std	Y+55, r30	; 0x37
    8488:	fe 01       	movw	r30, r28
    848a:	75 96       	adiw	r30, 0x15	; 21
    848c:	fe ab       	std	Y+54, r31	; 0x36
    848e:	ed ab       	std	Y+53, r30	; 0x35
    8490:	e5 ee       	ldi	r30, 0xE5	; 229
    8492:	f7 e0       	ldi	r31, 0x07	; 7
    8494:	fe a3       	std	Y+38, r31	; 0x26
    8496:	ed a3       	std	Y+37, r30	; 0x25
    8498:	fe 01       	movw	r30, r28
    849a:	3f 96       	adiw	r30, 0x0f	; 15
    849c:	fc ab       	std	Y+52, r31	; 0x34
    849e:	eb ab       	std	Y+51, r30	; 0x33
    84a0:	39 96       	adiw	r30, 0x09	; 9
    84a2:	fa ab       	std	Y+50, r31	; 0x32
    84a4:	e9 ab       	std	Y+49, r30	; 0x31
    84a6:	36 97       	sbiw	r30, 0x06	; 6
    84a8:	f8 ab       	std	Y+48, r31	; 0x30
    84aa:	ef a7       	std	Y+47, r30	; 0x2f
    84ac:	ef ef       	ldi	r30, 0xFF	; 255
    84ae:	f5 e0       	ldi	r31, 0x05	; 5
    84b0:	fe a7       	std	Y+46, r31	; 0x2e
    84b2:	ed a7       	std	Y+45, r30	; 0x2d
    84b4:	e9 e0       	ldi	r30, 0x09	; 9
    84b6:	f8 e0       	ldi	r31, 0x08	; 8
    84b8:	fc a3       	std	Y+36, r31	; 0x24
    84ba:	eb a3       	std	Y+35, r30	; 0x23
    84bc:	e9 e8       	ldi	r30, 0x89	; 137
    84be:	f5 e0       	ldi	r31, 0x05	; 5
    84c0:	f8 a7       	std	Y+40, r31	; 0x28
    84c2:	ef a3       	std	Y+39, r30	; 0x27
    84c4:	fe 01       	movw	r30, r28
    84c6:	31 96       	adiw	r30, 0x01	; 1
    84c8:	fa a3       	std	Y+34, r31	; 0x22
    84ca:	e9 a3       	std	Y+33, r30	; 0x21
    84cc:	e5 e1       	ldi	r30, 0x15	; 21
    84ce:	f8 e0       	ldi	r31, 0x08	; 8
    84d0:	f8 a3       	std	Y+32, r31	; 0x20
    84d2:	ef 8f       	std	Y+31, r30	; 0x1f
    84d4:	1e 01       	movw	r2, r28
    84d6:	fc e0       	ldi	r31, 0x0C	; 12
    84d8:	2f 0e       	add	r2, r31
    84da:	31 1c       	adc	r3, r1
    84dc:	eb e0       	ldi	r30, 0x0B	; 11
    84de:	f6 e0       	ldi	r31, 0x06	; 6
    84e0:	fc a7       	std	Y+44, r31	; 0x2c
    84e2:	eb a7       	std	Y+43, r30	; 0x2b
    84e4:	2b 96       	adiw	r28, 0x0b	; 11
    84e6:	1f ae       	std	Y+63, r1	; 0x3f
    84e8:	1e ae       	std	Y+62, r1	; 0x3e
    84ea:	2b 97       	sbiw	r28, 0x0b	; 11
		}
		// Reset PID_gyro variables to that data does not accumulate cross-axis
		else
		{
			PID_gyro_temp1 = 0;
			PID_gyro_temp2 = 0;
    84ec:	81 2c       	mov	r8, r1
    84ee:	91 2c       	mov	r9, r1
    84f0:	54 01       	movw	r10, r8
			PID_gyro_temp2 = (int32_t)(Config.FlightMode[P2].Yaw_trim << 6);
		}
		// Reset PID_gyro variables to that data does not accumulate cross-axis
		else
		{
			PID_gyro_temp1 = 0;
    84f2:	80 e0       	ldi	r24, 0x00	; 0
    84f4:	90 e0       	ldi	r25, 0x00	; 0
    84f6:	dc 01       	movw	r26, r24
		//************************************************************
		// Calculate PID gains
		//************************************************************

		// Gyro P-term													// Profile P1
		PID_gyro_temp1 += gyroADC[axis] * P_gain[P1][axis];				// Multiply P-term (Max gain of 127)
    84f8:	ef a9       	ldd	r30, Y+55	; 0x37
    84fa:	f8 ad       	ldd	r31, Y+56	; 0x38
    84fc:	01 91       	ld	r16, Z+
    84fe:	11 91       	ld	r17, Z+
    8500:	f8 af       	std	Y+56, r31	; 0x38
    8502:	ef ab       	std	Y+55, r30	; 0x37
    8504:	ed a9       	ldd	r30, Y+53	; 0x35
    8506:	fe a9       	ldd	r31, Y+54	; 0x36
    8508:	41 91       	ld	r20, Z+
    850a:	fe ab       	std	Y+54, r31	; 0x36
    850c:	ed ab       	std	Y+53, r30	; 0x35
    850e:	40 03       	mulsu	r20, r16
    8510:	90 01       	movw	r18, r0
    8512:	41 9f       	mul	r20, r17
    8514:	30 0d       	add	r19, r0
    8516:	11 24       	eor	r1, r1
    8518:	44 27       	eor	r20, r20
    851a:	37 fd       	sbrc	r19, 7
    851c:	40 95       	com	r20
    851e:	54 2f       	mov	r21, r20
    8520:	28 0f       	add	r18, r24
    8522:	39 1f       	adc	r19, r25
    8524:	4a 1f       	adc	r20, r26
    8526:	5b 1f       	adc	r21, r27
		PID_gyro_temp1 = PID_gyro_temp1 * (int32_t)3;					// Multiply by 3
    8528:	a3 e0       	ldi	r26, 0x03	; 3
    852a:	b0 e0       	ldi	r27, 0x00	; 0
    852c:	0e 94 d8 49 	call	0x93b0	; 0x93b0 <__muluhisi3>
    8530:	25 96       	adiw	r28, 0x05	; 5
    8532:	6c af       	std	Y+60, r22	; 0x3c
    8534:	7d af       	std	Y+61, r23	; 0x3d
    8536:	8e af       	std	Y+62, r24	; 0x3e
    8538:	9f af       	std	Y+63, r25	; 0x3f
    853a:	25 97       	sbiw	r28, 0x05	; 5

		// Gyro I-term
		PID_Gyro_I_actual1 = IntegralGyro[P1][axis] * I_gain[P1][axis];	// Multiply I-term (Max gain of 127)
    853c:	eb a9       	ldd	r30, Y+51	; 0x33
    853e:	fc a9       	ldd	r31, Y+52	; 0x34
    8540:	a1 91       	ld	r26, Z+
    8542:	fc ab       	std	Y+52, r31	; 0x34
    8544:	eb ab       	std	Y+51, r30	; 0x33
    8546:	ed a1       	ldd	r30, Y+37	; 0x25
    8548:	fe a1       	ldd	r31, Y+38	; 0x26
    854a:	20 81       	ld	r18, Z
    854c:	31 81       	ldd	r19, Z+1	; 0x01
    854e:	42 81       	ldd	r20, Z+2	; 0x02
    8550:	53 81       	ldd	r21, Z+3	; 0x03
    8552:	bb 27       	eor	r27, r27
    8554:	a7 fd       	sbrc	r26, 7
    8556:	b0 95       	com	r27
    8558:	0e 94 e3 49 	call	0x93c6	; 0x93c6 <__mulshisi3>
    855c:	2b 01       	movw	r4, r22
    855e:	3c 01       	movw	r6, r24
		PID_Gyro_I_actual1 = PID_Gyro_I_actual1 >> 5;					// Divide by 32
    8560:	85 e0       	ldi	r24, 0x05	; 5
    8562:	75 94       	asr	r7
    8564:	67 94       	ror	r6
    8566:	57 94       	ror	r5
    8568:	47 94       	ror	r4
    856a:	8a 95       	dec	r24
    856c:	d1 f7       	brne	.-12     	; 0x8562 <Calculate_PID+0x232>

		// Gyro P-term
		PID_gyro_temp2 += gyroADC[axis] * P_gain[P2][axis];				// Profile P2
    856e:	e9 a9       	ldd	r30, Y+49	; 0x31
    8570:	fa a9       	ldd	r31, Y+50	; 0x32
    8572:	41 91       	ld	r20, Z+
    8574:	fa ab       	std	Y+50, r31	; 0x32
    8576:	e9 ab       	std	Y+49, r30	; 0x31
    8578:	40 03       	mulsu	r20, r16
    857a:	90 01       	movw	r18, r0
    857c:	41 9f       	mul	r20, r17
    857e:	30 0d       	add	r19, r0
    8580:	11 24       	eor	r1, r1
    8582:	44 27       	eor	r20, r20
    8584:	37 fd       	sbrc	r19, 7
    8586:	40 95       	com	r20
    8588:	54 2f       	mov	r21, r20
    858a:	28 0d       	add	r18, r8
    858c:	39 1d       	adc	r19, r9
    858e:	4a 1d       	adc	r20, r10
    8590:	5b 1d       	adc	r21, r11
		PID_gyro_temp2 = PID_gyro_temp2 * (int32_t)3;
    8592:	a3 e0       	ldi	r26, 0x03	; 3
    8594:	b0 e0       	ldi	r27, 0x00	; 0
    8596:	0e 94 d8 49 	call	0x93b0	; 0x93b0 <__muluhisi3>
    859a:	4b 01       	movw	r8, r22
    859c:	5c 01       	movw	r10, r24

		// Gyro I-term
		PID_Gyro_I_actual2 = IntegralGyro[P2][axis] * I_gain[P2][axis];
    859e:	ef a5       	ldd	r30, Y+47	; 0x2f
    85a0:	f8 a9       	ldd	r31, Y+48	; 0x30
    85a2:	a1 91       	ld	r26, Z+
    85a4:	f8 ab       	std	Y+48, r31	; 0x30
    85a6:	ef a7       	std	Y+47, r30	; 0x2f
    85a8:	ed a1       	ldd	r30, Y+37	; 0x25
    85aa:	fe a1       	ldd	r31, Y+38	; 0x26
    85ac:	24 85       	ldd	r18, Z+12	; 0x0c
    85ae:	35 85       	ldd	r19, Z+13	; 0x0d
    85b0:	46 85       	ldd	r20, Z+14	; 0x0e
    85b2:	57 85       	ldd	r21, Z+15	; 0x0f
    85b4:	bb 27       	eor	r27, r27
    85b6:	a7 fd       	sbrc	r26, 7
    85b8:	b0 95       	com	r27
    85ba:	0e 94 e3 49 	call	0x93c6	; 0x93c6 <__mulshisi3>
		PID_Gyro_I_actual2 = PID_Gyro_I_actual2 >> 5;
    85be:	25 e0       	ldi	r18, 0x05	; 5
    85c0:	95 95       	asr	r25
    85c2:	87 95       	ror	r24
    85c4:	77 95       	ror	r23
    85c6:	67 95       	ror	r22
    85c8:	2a 95       	dec	r18
    85ca:	d1 f7       	brne	.-12     	; 0x85c0 <Calculate_PID+0x290>
		//************************************************************
		// I-term output limits
		//************************************************************

		// P1 limits
		if (PID_Gyro_I_actual1 > Config.Raw_I_Limits[P1][axis]) 
    85cc:	ed a5       	ldd	r30, Y+45	; 0x2d
    85ce:	fe a5       	ldd	r31, Y+46	; 0x2e
    85d0:	c1 90       	ld	r12, Z+
    85d2:	d1 90       	ld	r13, Z+
    85d4:	e1 90       	ld	r14, Z+
    85d6:	f1 90       	ld	r15, Z+
    85d8:	fe a7       	std	Y+46, r31	; 0x2e
    85da:	ed a7       	std	Y+45, r30	; 0x2d
    85dc:	c4 14       	cp	r12, r4
    85de:	d5 04       	cpc	r13, r5
    85e0:	e6 04       	cpc	r14, r6
    85e2:	f7 04       	cpc	r15, r7
    85e4:	84 f0       	brlt	.+32     	; 0x8606 <Calculate_PID+0x2d6>
		{
			PID_Gyro_I_actual1 = Config.Raw_I_Limits[P1][axis];
		}
		else if (PID_Gyro_I_actual1 < -Config.Raw_I_Limits[P1][axis]) 
    85e6:	00 27       	eor	r16, r16
    85e8:	11 27       	eor	r17, r17
    85ea:	98 01       	movw	r18, r16
    85ec:	0c 19       	sub	r16, r12
    85ee:	1d 09       	sbc	r17, r13
    85f0:	2e 09       	sbc	r18, r14
    85f2:	3f 09       	sbc	r19, r15
    85f4:	73 01       	movw	r14, r6
    85f6:	62 01       	movw	r12, r4
    85f8:	40 16       	cp	r4, r16
    85fa:	51 06       	cpc	r5, r17
    85fc:	62 06       	cpc	r6, r18
    85fe:	73 06       	cpc	r7, r19
    8600:	14 f4       	brge	.+4      	; 0x8606 <Calculate_PID+0x2d6>
    8602:	68 01       	movw	r12, r16
    8604:	79 01       	movw	r14, r18
		{
			PID_Gyro_I_actual1 = -Config.Raw_I_Limits[P1][axis];	
		}

		// P2 limits
		if (PID_Gyro_I_actual2 > Config.Raw_I_Limits[P2][axis]) 
    8606:	eb a5       	ldd	r30, Y+43	; 0x2b
    8608:	fc a5       	ldd	r31, Y+44	; 0x2c
    860a:	21 91       	ld	r18, Z+
    860c:	31 91       	ld	r19, Z+
    860e:	41 91       	ld	r20, Z+
    8610:	51 91       	ld	r21, Z+
    8612:	fc a7       	std	Y+44, r31	; 0x2c
    8614:	eb a7       	std	Y+43, r30	; 0x2b
    8616:	2b 8f       	std	Y+27, r18	; 0x1b
    8618:	3c 8f       	std	Y+28, r19	; 0x1c
    861a:	4d 8f       	std	Y+29, r20	; 0x1d
    861c:	5e 8f       	std	Y+30, r21	; 0x1e
    861e:	26 17       	cp	r18, r22
    8620:	37 07       	cpc	r19, r23
    8622:	48 07       	cpc	r20, r24
    8624:	59 07       	cpc	r21, r25
    8626:	b4 f0       	brlt	.+44     	; 0x8654 <Calculate_PID+0x324>
		{
			PID_Gyro_I_actual2 = Config.Raw_I_Limits[P2][axis];
		}
		else if (PID_Gyro_I_actual2 < -Config.Raw_I_Limits[P2][axis]) 
    8628:	89 01       	movw	r16, r18
    862a:	9a 01       	movw	r18, r20
    862c:	30 95       	com	r19
    862e:	20 95       	com	r18
    8630:	10 95       	com	r17
    8632:	01 95       	neg	r16
    8634:	1f 4f       	sbci	r17, 0xFF	; 255
    8636:	2f 4f       	sbci	r18, 0xFF	; 255
    8638:	3f 4f       	sbci	r19, 0xFF	; 255
    863a:	6b 8f       	std	Y+27, r22	; 0x1b
    863c:	7c 8f       	std	Y+28, r23	; 0x1c
    863e:	8d 8f       	std	Y+29, r24	; 0x1d
    8640:	9e 8f       	std	Y+30, r25	; 0x1e
    8642:	60 17       	cp	r22, r16
    8644:	71 07       	cpc	r23, r17
    8646:	82 07       	cpc	r24, r18
    8648:	93 07       	cpc	r25, r19
    864a:	24 f4       	brge	.+8      	; 0x8654 <Calculate_PID+0x324>
    864c:	0b 8f       	std	Y+27, r16	; 0x1b
    864e:	1c 8f       	std	Y+28, r17	; 0x1c
    8650:	2d 8f       	std	Y+29, r18	; 0x1d
    8652:	3e 8f       	std	Y+30, r19	; 0x1e

		//************************************************************
		// Sum Gyro P, I and D terms and rescale
		//************************************************************

		PID_Gyros[P1][axis] = (int16_t)((PID_gyro_temp1 + PID_Gyro_I_actual1) >> PID_SCALE);
    8654:	25 96       	adiw	r28, 0x05	; 5
    8656:	4c ac       	ldd	r4, Y+60	; 0x3c
    8658:	5d ac       	ldd	r5, Y+61	; 0x3d
    865a:	6e ac       	ldd	r6, Y+62	; 0x3e
    865c:	7f ac       	ldd	r7, Y+63	; 0x3f
    865e:	25 97       	sbiw	r28, 0x05	; 5
    8660:	4c 0c       	add	r4, r12
    8662:	5d 1c       	adc	r5, r13
    8664:	6e 1c       	adc	r6, r14
    8666:	7f 1c       	adc	r7, r15
    8668:	a6 e0       	ldi	r26, 0x06	; 6
    866a:	75 94       	asr	r7
    866c:	67 94       	ror	r6
    866e:	57 94       	ror	r5
    8670:	47 94       	ror	r4
    8672:	aa 95       	dec	r26
    8674:	d1 f7       	brne	.-12     	; 0x866a <Calculate_PID+0x33a>
    8676:	eb a1       	ldd	r30, Y+35	; 0x23
    8678:	fc a1       	ldd	r31, Y+36	; 0x24
    867a:	51 82       	std	Z+1, r5	; 0x01
    867c:	40 82       	st	Z, r4
		PID_Gyros[P2][axis] = (int16_t)((PID_gyro_temp2 + PID_Gyro_I_actual2) >> PID_SCALE);
    867e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    8680:	9c 8d       	ldd	r25, Y+28	; 0x1c
    8682:	ad 8d       	ldd	r26, Y+29	; 0x1d
    8684:	be 8d       	ldd	r27, Y+30	; 0x1e
    8686:	88 0d       	add	r24, r8
    8688:	99 1d       	adc	r25, r9
    868a:	aa 1d       	adc	r26, r10
    868c:	bb 1d       	adc	r27, r11
    868e:	16 e0       	ldi	r17, 0x06	; 6
    8690:	b5 95       	asr	r27
    8692:	a7 95       	ror	r26
    8694:	97 95       	ror	r25
    8696:	87 95       	ror	r24
    8698:	1a 95       	dec	r17
    869a:	d1 f7       	brne	.-12     	; 0x8690 <Calculate_PID+0x360>
    869c:	97 83       	std	Z+7, r25	; 0x07
    869e:	86 83       	std	Z+6, r24	; 0x06

		//************************************************************
		// Calculate error from angle data and trim (roll and pitch only)
		//************************************************************

		if (axis < YAW)
    86a0:	2a 96       	adiw	r28, 0x0a	; 10
    86a2:	ff ad       	ldd	r31, Y+63	; 0x3f
    86a4:	2a 97       	sbiw	r28, 0x0a	; 10
    86a6:	f2 30       	cpi	r31, 0x02	; 2
    86a8:	e9 f1       	breq	.+122    	; 0x8724 <Calculate_PID+0x3f4>
		{
			// Do for P1 and P2
			for (i = P1; i <= P2; i++)
			{
				PID_acc_temp1 = angle[axis] - L_trim[i][axis];				// Offset angle with trim
    86aa:	ef a1       	ldd	r30, Y+39	; 0x27
    86ac:	f8 a5       	ldd	r31, Y+40	; 0x28
    86ae:	40 81       	ld	r20, Z
    86b0:	51 81       	ldd	r21, Z+1	; 0x01
    86b2:	e9 a1       	ldd	r30, Y+33	; 0x21
    86b4:	fa a1       	ldd	r31, Y+34	; 0x22
    86b6:	80 81       	ld	r24, Z
    86b8:	91 81       	ldd	r25, Z+1	; 0x01
    86ba:	9a 01       	movw	r18, r20
    86bc:	28 1b       	sub	r18, r24
    86be:	39 0b       	sbc	r19, r25
    86c0:	a9 e0       	ldi	r26, 0x09	; 9
    86c2:	b0 e0       	ldi	r27, 0x00	; 0
    86c4:	ac 0f       	add	r26, r28
    86c6:	bd 1f       	adc	r27, r29
    86c8:	2b 96       	adiw	r28, 0x0b	; 11
    86ca:	ee ad       	ldd	r30, Y+62	; 0x3e
    86cc:	ff ad       	ldd	r31, Y+63	; 0x3f
    86ce:	2b 97       	sbiw	r28, 0x0b	; 11
    86d0:	ae 0f       	add	r26, r30
    86d2:	bf 1f       	adc	r27, r31
				PID_acc_temp1 *= L_gain[i][axis];							// P-term of accelerometer (Max gain of 127)
    86d4:	ac 91       	ld	r26, X
    86d6:	bb 27       	eor	r27, r27
    86d8:	a7 fd       	sbrc	r26, 7
    86da:	b0 95       	com	r27
    86dc:	0e 94 ba 49 	call	0x9374	; 0x9374 <__mulhisi3>
				PID_ACCs[i][axis] = (int16_t)(PID_acc_temp1 >> 8);			// Reduce and convert to integer
    86e0:	bb 27       	eor	r27, r27
    86e2:	97 fd       	sbrc	r25, 7
    86e4:	ba 95       	dec	r27
    86e6:	a9 2f       	mov	r26, r25
    86e8:	98 2f       	mov	r25, r24
    86ea:	87 2f       	mov	r24, r23
    86ec:	ef 8d       	ldd	r30, Y+31	; 0x1f
    86ee:	f8 a1       	ldd	r31, Y+32	; 0x20
    86f0:	91 83       	std	Z+1, r25	; 0x01
    86f2:	80 83       	st	Z, r24
		if (axis < YAW)
		{
			// Do for P1 and P2
			for (i = P1; i <= P2; i++)
			{
				PID_acc_temp1 = angle[axis] - L_trim[i][axis];				// Offset angle with trim
    86f4:	e9 a1       	ldd	r30, Y+33	; 0x21
    86f6:	fa a1       	ldd	r31, Y+34	; 0x22
    86f8:	84 81       	ldd	r24, Z+4	; 0x04
    86fa:	95 81       	ldd	r25, Z+5	; 0x05
    86fc:	9a 01       	movw	r18, r20
    86fe:	28 1b       	sub	r18, r24
    8700:	39 0b       	sbc	r19, r25
				PID_acc_temp1 *= L_gain[i][axis];							// P-term of accelerometer (Max gain of 127)
    8702:	f1 01       	movw	r30, r2
    8704:	a0 81       	ld	r26, Z
    8706:	bb 27       	eor	r27, r27
    8708:	a7 fd       	sbrc	r26, 7
    870a:	b0 95       	com	r27
    870c:	0e 94 ba 49 	call	0x9374	; 0x9374 <__mulhisi3>
				PID_ACCs[i][axis] = (int16_t)(PID_acc_temp1 >> 8);			// Reduce and convert to integer
    8710:	bb 27       	eor	r27, r27
    8712:	97 fd       	sbrc	r25, 7
    8714:	ba 95       	dec	r27
    8716:	a9 2f       	mov	r26, r25
    8718:	98 2f       	mov	r25, r24
    871a:	87 2f       	mov	r24, r23
    871c:	ef 8d       	ldd	r30, Y+31	; 0x1f
    871e:	f8 a1       	ldd	r31, Y+32	; 0x20
    8720:	97 83       	std	Z+7, r25	; 0x07
    8722:	86 83       	std	Z+6, r24	; 0x06
	PID_AvgAccVert = 0;							// Reset average

	//************************************************************
	// PID loop
	//************************************************************
	for (axis = 0; axis <= YAW; axis ++)
    8724:	2b 96       	adiw	r28, 0x0b	; 11
    8726:	ee ad       	ldd	r30, Y+62	; 0x3e
    8728:	ff ad       	ldd	r31, Y+63	; 0x3f
    872a:	2b 97       	sbiw	r28, 0x0b	; 11
    872c:	32 97       	sbiw	r30, 0x02	; 2
    872e:	e1 f1       	breq	.+120    	; 0x87a8 <Calculate_PID+0x478>
	{
		//************************************************************
		// Add in gyro Yaw trim
		//************************************************************

		if (axis == YAW)
    8730:	2a 96       	adiw	r28, 0x0a	; 10
    8732:	ff ad       	ldd	r31, Y+63	; 0x3f
    8734:	2a 97       	sbiw	r28, 0x0a	; 10
    8736:	f1 30       	cpi	r31, 0x01	; 1
    8738:	39 f0       	breq	.+14     	; 0x8748 <Calculate_PID+0x418>
		}
		// Reset PID_gyro variables to that data does not accumulate cross-axis
		else
		{
			PID_gyro_temp1 = 0;
			PID_gyro_temp2 = 0;
    873a:	81 2c       	mov	r8, r1
    873c:	91 2c       	mov	r9, r1
    873e:	54 01       	movw	r10, r8
			PID_gyro_temp2 = (int32_t)(Config.FlightMode[P2].Yaw_trim << 6);
		}
		// Reset PID_gyro variables to that data does not accumulate cross-axis
		else
		{
			PID_gyro_temp1 = 0;
    8740:	80 e0       	ldi	r24, 0x00	; 0
    8742:	90 e0       	ldi	r25, 0x00	; 0
    8744:	dc 01       	movw	r26, r24
    8746:	0a c0       	rjmp	.+20     	; 0x875c <Calculate_PID+0x42c>
		//************************************************************

		if (axis == YAW)
		{
			PID_gyro_temp1 = (int32_t)(Config.FlightMode[P1].Yaw_trim << 6);
			PID_gyro_temp2 = (int32_t)(Config.FlightMode[P2].Yaw_trim << 6);
    8748:	21 96       	adiw	r28, 0x01	; 1
    874a:	8c ac       	ldd	r8, Y+60	; 0x3c
    874c:	9d ac       	ldd	r9, Y+61	; 0x3d
    874e:	ae ac       	ldd	r10, Y+62	; 0x3e
    8750:	bf ac       	ldd	r11, Y+63	; 0x3f
    8752:	21 97       	sbiw	r28, 0x01	; 1
		// Add in gyro Yaw trim
		//************************************************************

		if (axis == YAW)
		{
			PID_gyro_temp1 = (int32_t)(Config.FlightMode[P1].Yaw_trim << 6);
    8754:	89 ad       	ldd	r24, Y+57	; 0x39
    8756:	9a ad       	ldd	r25, Y+58	; 0x3a
    8758:	ab ad       	ldd	r26, Y+59	; 0x3b
    875a:	bc ad       	ldd	r27, Y+60	; 0x3c
    875c:	2b 96       	adiw	r28, 0x0b	; 11
    875e:	ee ad       	ldd	r30, Y+62	; 0x3e
    8760:	ff ad       	ldd	r31, Y+63	; 0x3f
    8762:	2b 97       	sbiw	r28, 0x0b	; 11
    8764:	31 96       	adiw	r30, 0x01	; 1
    8766:	2b 96       	adiw	r28, 0x0b	; 11
    8768:	ff af       	std	Y+63, r31	; 0x3f
    876a:	ee af       	std	Y+62, r30	; 0x3e
    876c:	2b 97       	sbiw	r28, 0x0b	; 11
    876e:	ed a1       	ldd	r30, Y+37	; 0x25
    8770:	fe a1       	ldd	r31, Y+38	; 0x26
    8772:	34 96       	adiw	r30, 0x04	; 4
    8774:	fe a3       	std	Y+38, r31	; 0x26
    8776:	ed a3       	std	Y+37, r30	; 0x25
    8778:	eb a1       	ldd	r30, Y+35	; 0x23
    877a:	fc a1       	ldd	r31, Y+36	; 0x24
    877c:	32 96       	adiw	r30, 0x02	; 2
    877e:	fc a3       	std	Y+36, r31	; 0x24
    8780:	eb a3       	std	Y+35, r30	; 0x23
    8782:	ef a1       	ldd	r30, Y+39	; 0x27
    8784:	f8 a5       	ldd	r31, Y+40	; 0x28
    8786:	32 96       	adiw	r30, 0x02	; 2
    8788:	f8 a7       	std	Y+40, r31	; 0x28
    878a:	ef a3       	std	Y+39, r30	; 0x27
    878c:	e9 a1       	ldd	r30, Y+33	; 0x21
    878e:	fa a1       	ldd	r31, Y+34	; 0x22
    8790:	32 96       	adiw	r30, 0x02	; 2
    8792:	fa a3       	std	Y+34, r31	; 0x22
    8794:	e9 a3       	std	Y+33, r30	; 0x21
    8796:	ef 8d       	ldd	r30, Y+31	; 0x1f
    8798:	f8 a1       	ldd	r31, Y+32	; 0x20
    879a:	32 96       	adiw	r30, 0x02	; 2
    879c:	f8 a3       	std	Y+32, r31	; 0x20
    879e:	ef 8f       	std	Y+31, r30	; 0x1f
    87a0:	ff ef       	ldi	r31, 0xFF	; 255
    87a2:	2f 1a       	sub	r2, r31
    87a4:	3f 0a       	sbc	r3, r31
    87a6:	a8 ce       	rjmp	.-688    	; 0x84f8 <Calculate_PID+0x1c8>
	//************************************************************

	// Do for P1 and P2
	for (i = P1; i <= P2; i++)
	{
		PID_acc_temp1 = -AvAccVert;				// Get and copy Z-acc value. Negate to oppose G
    87a8:	27 96       	adiw	r28, 0x07	; 7
    87aa:	ce ac       	ldd	r12, Y+62	; 0x3e
    87ac:	df ac       	ldd	r13, Y+63	; 0x3f
    87ae:	27 97       	sbiw	r28, 0x07	; 7
    87b0:	d1 94       	neg	r13
    87b2:	c1 94       	neg	r12
    87b4:	d1 08       	sbc	r13, r1

		PID_acc_temp1 *= L_gain[i][YAW];		// Multiply P-term (Max gain of 127)
    87b6:	96 01       	movw	r18, r12
    87b8:	f9 a5       	ldd	r31, Y+41	; 0x29
    87ba:	af 2f       	mov	r26, r31
    87bc:	bb 27       	eor	r27, r27
    87be:	a7 fd       	sbrc	r26, 7
    87c0:	b0 95       	com	r27
    87c2:	0e 94 ba 49 	call	0x9374	; 0x9374 <__mulhisi3>

		PID_acc_temp1 = PID_acc_temp1 >> 4;		// Moderate Z-acc to reasonable values
    87c6:	34 e0       	ldi	r19, 0x04	; 4
    87c8:	95 95       	asr	r25
    87ca:	87 95       	ror	r24
    87cc:	77 95       	ror	r23
    87ce:	67 95       	ror	r22
    87d0:	3a 95       	dec	r19
    87d2:	d1 f7       	brne	.-12     	; 0x87c8 <Calculate_PID+0x498>

		if (PID_acc_temp1 > MAX_ZGAIN)			// Limit to +/-MAX_ZGAIN
    87d4:	65 3f       	cpi	r22, 0xF5	; 245
    87d6:	21 e0       	ldi	r18, 0x01	; 1
    87d8:	72 07       	cpc	r23, r18
    87da:	81 05       	cpc	r24, r1
    87dc:	91 05       	cpc	r25, r1
    87de:	64 f4       	brge	.+24     	; 0x87f8 <Calculate_PID+0x4c8>
		{
			PID_acc_temp1 = MAX_ZGAIN;
		}
		if (PID_acc_temp1 < -MAX_ZGAIN)
    87e0:	6c 30       	cpi	r22, 0x0C	; 12
    87e2:	3e ef       	ldi	r19, 0xFE	; 254
    87e4:	73 07       	cpc	r23, r19
    87e6:	3f ef       	ldi	r19, 0xFF	; 255
    87e8:	83 07       	cpc	r24, r19
    87ea:	93 07       	cpc	r25, r19
    87ec:	4c f4       	brge	.+18     	; 0x8800 <Calculate_PID+0x4d0>
		{
			PID_acc_temp1 = -MAX_ZGAIN;
    87ee:	6c e0       	ldi	r22, 0x0C	; 12
    87f0:	7e ef       	ldi	r23, 0xFE	; 254
    87f2:	8f ef       	ldi	r24, 0xFF	; 255
    87f4:	9f ef       	ldi	r25, 0xFF	; 255
    87f6:	04 c0       	rjmp	.+8      	; 0x8800 <Calculate_PID+0x4d0>

		PID_acc_temp1 = PID_acc_temp1 >> 4;		// Moderate Z-acc to reasonable values

		if (PID_acc_temp1 > MAX_ZGAIN)			// Limit to +/-MAX_ZGAIN
		{
			PID_acc_temp1 = MAX_ZGAIN;
    87f8:	64 ef       	ldi	r22, 0xF4	; 244
    87fa:	71 e0       	ldi	r23, 0x01	; 1
    87fc:	80 e0       	ldi	r24, 0x00	; 0
    87fe:	90 e0       	ldi	r25, 0x00	; 0
		if (PID_acc_temp1 < -MAX_ZGAIN)
		{
			PID_acc_temp1 = -MAX_ZGAIN;
		}

		PID_ACCs[i][YAW] = (int16_t)PID_acc_temp1; // Copy to global values
    8800:	70 93 1a 08 	sts	0x081A, r23
    8804:	60 93 19 08 	sts	0x0819, r22
	// Do for P1 and P2
	for (i = P1; i <= P2; i++)
	{
		PID_acc_temp1 = -AvAccVert;				// Get and copy Z-acc value. Negate to oppose G

		PID_acc_temp1 *= L_gain[i][YAW];		// Multiply P-term (Max gain of 127)
    8808:	96 01       	movw	r18, r12
    880a:	4a a5       	ldd	r20, Y+42	; 0x2a
    880c:	a4 2f       	mov	r26, r20
    880e:	bb 27       	eor	r27, r27
    8810:	a7 fd       	sbrc	r26, 7
    8812:	b0 95       	com	r27
    8814:	0e 94 ba 49 	call	0x9374	; 0x9374 <__mulhisi3>

		PID_acc_temp1 = PID_acc_temp1 >> 4;		// Moderate Z-acc to reasonable values
    8818:	24 e0       	ldi	r18, 0x04	; 4
    881a:	95 95       	asr	r25
    881c:	87 95       	ror	r24
    881e:	77 95       	ror	r23
    8820:	67 95       	ror	r22
    8822:	2a 95       	dec	r18
    8824:	d1 f7       	brne	.-12     	; 0x881a <Calculate_PID+0x4ea>

		if (PID_acc_temp1 > MAX_ZGAIN)			// Limit to +/-MAX_ZGAIN
    8826:	65 3f       	cpi	r22, 0xF5	; 245
    8828:	51 e0       	ldi	r21, 0x01	; 1
    882a:	75 07       	cpc	r23, r21
    882c:	81 05       	cpc	r24, r1
    882e:	91 05       	cpc	r25, r1
    8830:	64 f4       	brge	.+24     	; 0x884a <Calculate_PID+0x51a>
		{
			PID_acc_temp1 = MAX_ZGAIN;
		}
		if (PID_acc_temp1 < -MAX_ZGAIN)
    8832:	6c 30       	cpi	r22, 0x0C	; 12
    8834:	ae ef       	ldi	r26, 0xFE	; 254
    8836:	7a 07       	cpc	r23, r26
    8838:	af ef       	ldi	r26, 0xFF	; 255
    883a:	8a 07       	cpc	r24, r26
    883c:	9a 07       	cpc	r25, r26
    883e:	4c f4       	brge	.+18     	; 0x8852 <Calculate_PID+0x522>
		{
			PID_acc_temp1 = -MAX_ZGAIN;
    8840:	6c e0       	ldi	r22, 0x0C	; 12
    8842:	7e ef       	ldi	r23, 0xFE	; 254
    8844:	8f ef       	ldi	r24, 0xFF	; 255
    8846:	9f ef       	ldi	r25, 0xFF	; 255
    8848:	04 c0       	rjmp	.+8      	; 0x8852 <Calculate_PID+0x522>

		PID_acc_temp1 = PID_acc_temp1 >> 4;		// Moderate Z-acc to reasonable values

		if (PID_acc_temp1 > MAX_ZGAIN)			// Limit to +/-MAX_ZGAIN
		{
			PID_acc_temp1 = MAX_ZGAIN;
    884a:	64 ef       	ldi	r22, 0xF4	; 244
    884c:	71 e0       	ldi	r23, 0x01	; 1
    884e:	80 e0       	ldi	r24, 0x00	; 0
    8850:	90 e0       	ldi	r25, 0x00	; 0
		if (PID_acc_temp1 < -MAX_ZGAIN)
		{
			PID_acc_temp1 = -MAX_ZGAIN;
		}

		PID_ACCs[i][YAW] = (int16_t)PID_acc_temp1; // Copy to global values
    8852:	70 93 20 08 	sts	0x0820, r23
    8856:	60 93 1f 08 	sts	0x081F, r22
	}
}
    885a:	c6 5b       	subi	r28, 0xB6	; 182
    885c:	df 4f       	sbci	r29, 0xFF	; 255
    885e:	0f b6       	in	r0, 0x3f	; 63
    8860:	f8 94       	cli
    8862:	de bf       	out	0x3e, r29	; 62
    8864:	0f be       	out	0x3f, r0	; 63
    8866:	cd bf       	out	0x3d, r28	; 61
    8868:	df 91       	pop	r29
    886a:	cf 91       	pop	r28
    886c:	1f 91       	pop	r17
    886e:	0f 91       	pop	r16
    8870:	ff 90       	pop	r15
    8872:	ef 90       	pop	r14
    8874:	df 90       	pop	r13
    8876:	cf 90       	pop	r12
    8878:	bf 90       	pop	r11
    887a:	af 90       	pop	r10
    887c:	9f 90       	pop	r9
    887e:	8f 90       	pop	r8
    8880:	7f 90       	pop	r7
    8882:	6f 90       	pop	r6
    8884:	5f 90       	pop	r5
    8886:	4f 90       	pop	r4
    8888:	3f 90       	pop	r3
    888a:	2f 90       	pop	r2
    888c:	08 95       	ret

0000888e <RxGetChannels>:
volatile int16_t MonopolarThrottle;				// Monopolar throttle

// Get raw flight channel data (~2500 to 5000) and remove zero offset
// Use channel mapping for reconfigurability
void RxGetChannels(void)
{
    888e:	e3 e8       	ldi	r30, 0x83	; 131
    8890:	f7 e0       	ldi	r31, 0x07	; 7
	static	int16_t	OldRxSum;			// Sum of all major channels
	int16_t	RxSumDiff;
	int16_t	RxSum, i;

	// Remove zero offsets
	for (i=0; i < MAX_RC_CHANNELS; i++)
    8892:	80 e0       	ldi	r24, 0x00	; 0
    8894:	90 e0       	ldi	r25, 0x00	; 0
	{
		RCinputs[i]	= RxChannel[i] - Config.RxChannelZeroOffset[i];
    8896:	ac 01       	movw	r20, r24
    8898:	44 0f       	add	r20, r20
    889a:	55 1f       	adc	r21, r21
    889c:	da 01       	movw	r26, r20
    889e:	ae 54       	subi	r26, 0x4E	; 78
    88a0:	b8 4f       	sbci	r27, 0xF8	; 248
    88a2:	2d 91       	ld	r18, X+
    88a4:	3c 91       	ld	r19, X
    88a6:	61 91       	ld	r22, Z+
    88a8:	71 91       	ld	r23, Z+
    88aa:	26 1b       	sub	r18, r22
    88ac:	37 0b       	sbc	r19, r23
    88ae:	da 01       	movw	r26, r20
    88b0:	ad 5d       	subi	r26, 0xDD	; 221
    88b2:	b7 4f       	sbci	r27, 0xF7	; 247
    88b4:	11 96       	adiw	r26, 0x01	; 1
    88b6:	3c 93       	st	X, r19
    88b8:	2e 93       	st	-X, r18
	static	int16_t	OldRxSum;			// Sum of all major channels
	int16_t	RxSumDiff;
	int16_t	RxSum, i;

	// Remove zero offsets
	for (i=0; i < MAX_RC_CHANNELS; i++)
    88ba:	01 96       	adiw	r24, 0x01	; 1
    88bc:	88 30       	cpi	r24, 0x08	; 8
    88be:	91 05       	cpc	r25, r1
    88c0:	51 f7       	brne	.-44     	; 0x8896 <RxGetChannels+0x8>
	{
		RCinputs[i]	= RxChannel[i] - Config.RxChannelZeroOffset[i];
	}

	// Special handling for monopolar throttle
	MonopolarThrottle = RxChannel[THROTTLE] - Config.RxChannelZeroOffset[THROTTLE];
    88c2:	80 91 b2 07 	lds	r24, 0x07B2
    88c6:	90 91 b3 07 	lds	r25, 0x07B3
    88ca:	20 91 83 07 	lds	r18, 0x0783
    88ce:	30 91 84 07 	lds	r19, 0x0784
    88d2:	82 1b       	sub	r24, r18
    88d4:	93 0b       	sbc	r25, r19
    88d6:	90 93 22 08 	sts	0x0822, r25
    88da:	80 93 21 08 	sts	0x0821, r24

	// Bipolar throttle must use the nominal mid-point
	RCinputs[THROTTLE] = RxChannel[THROTTLE] - 3750; 
    88de:	80 91 b2 07 	lds	r24, 0x07B2
    88e2:	90 91 b3 07 	lds	r25, 0x07B3
    88e6:	86 5a       	subi	r24, 0xA6	; 166
    88e8:	9e 40       	sbci	r25, 0x0E	; 14
    88ea:	90 93 24 08 	sts	0x0824, r25
    88ee:	80 93 23 08 	sts	0x0823, r24

	// Reverse primary channels as requested
	if (Config.AileronPol == REVERSED)
    88f2:	80 91 d9 05 	lds	r24, 0x05D9
    88f6:	81 30       	cpi	r24, 0x01	; 1
    88f8:	59 f4       	brne	.+22     	; 0x8910 <RxGetChannels+0x82>
	{
		RCinputs[AILERON] = -RCinputs[AILERON];
    88fa:	80 91 25 08 	lds	r24, 0x0825
    88fe:	90 91 26 08 	lds	r25, 0x0826
    8902:	91 95       	neg	r25
    8904:	81 95       	neg	r24
    8906:	91 09       	sbc	r25, r1
    8908:	90 93 26 08 	sts	0x0826, r25
    890c:	80 93 25 08 	sts	0x0825, r24
	}

	if (Config.ElevatorPol == REVERSED)
    8910:	80 91 da 05 	lds	r24, 0x05DA
    8914:	81 30       	cpi	r24, 0x01	; 1
    8916:	59 f4       	brne	.+22     	; 0x892e <RxGetChannels+0xa0>
	{
		RCinputs[ELEVATOR] = -RCinputs[ELEVATOR];
    8918:	80 91 27 08 	lds	r24, 0x0827
    891c:	90 91 28 08 	lds	r25, 0x0828
    8920:	91 95       	neg	r25
    8922:	81 95       	neg	r24
    8924:	91 09       	sbc	r25, r1
    8926:	90 93 28 08 	sts	0x0828, r25
    892a:	80 93 27 08 	sts	0x0827, r24
	}

	if (Config.RudderPol == REVERSED)
    892e:	80 91 3a 06 	lds	r24, 0x063A
    8932:	81 30       	cpi	r24, 0x01	; 1
    8934:	59 f4       	brne	.+22     	; 0x894c <RxGetChannels+0xbe>
	{
		RCinputs[RUDDER] = -RCinputs[RUDDER];
    8936:	80 91 29 08 	lds	r24, 0x0829
    893a:	90 91 2a 08 	lds	r25, 0x082A
    893e:	91 95       	neg	r25
    8940:	81 95       	neg	r24
    8942:	91 09       	sbc	r25, r1
    8944:	90 93 2a 08 	sts	0x082A, r25
    8948:	80 93 29 08 	sts	0x0829, r24
	}

	// Calculate RX activity
	RxSum = RCinputs[AILERON] + RCinputs[ELEVATOR] + RCinputs[RUDDER];
    894c:	80 91 25 08 	lds	r24, 0x0825
    8950:	90 91 26 08 	lds	r25, 0x0826
    8954:	40 91 27 08 	lds	r20, 0x0827
    8958:	50 91 28 08 	lds	r21, 0x0828
    895c:	20 91 29 08 	lds	r18, 0x0829
    8960:	30 91 2a 08 	lds	r19, 0x082A
    8964:	84 0f       	add	r24, r20
    8966:	95 1f       	adc	r25, r21
    8968:	82 0f       	add	r24, r18
    896a:	93 1f       	adc	r25, r19
	RxSumDiff = RxSum - OldRxSum;
    896c:	20 91 3a 05 	lds	r18, 0x053A
    8970:	30 91 3b 05 	lds	r19, 0x053B
    8974:	ac 01       	movw	r20, r24
    8976:	42 1b       	sub	r20, r18
    8978:	53 0b       	sbc	r21, r19
    897a:	9a 01       	movw	r18, r20

	// Set RX activity flag if movement above noise floor or throttle above minimum
	if ((RxSumDiff > NOISE_THRESH) || (RxSumDiff < -NOISE_THRESH) || (MonopolarThrottle > THROTTLEIDLE)) 
    897c:	2b 5f       	subi	r18, 0xFB	; 251
    897e:	3f 4f       	sbci	r19, 0xFF	; 255
    8980:	2b 30       	cpi	r18, 0x0B	; 11
    8982:	31 05       	cpc	r19, r1
    8984:	38 f4       	brcc	.+14     	; 0x8994 <RxGetChannels+0x106>
    8986:	20 91 21 08 	lds	r18, 0x0821
    898a:	30 91 22 08 	lds	r19, 0x0822
    898e:	23 33       	cpi	r18, 0x33	; 51
    8990:	31 05       	cpc	r19, r1
    8992:	24 f0       	brlt	.+8      	; 0x899c <RxGetChannels+0x10e>
	{
		Flight_flags |= (1 << RxActivity);
    8994:	20 91 1d 05 	lds	r18, 0x051D
    8998:	21 60       	ori	r18, 0x01	; 1
    899a:	03 c0       	rjmp	.+6      	; 0x89a2 <RxGetChannels+0x114>
	}
	else 
	{
		Flight_flags &= ~(1 << RxActivity);
    899c:	20 91 1d 05 	lds	r18, 0x051D
    89a0:	2e 7f       	andi	r18, 0xFE	; 254
    89a2:	20 93 1d 05 	sts	0x051D, r18
	}
	
	// Preset RCinputs[NOCHAN] for sanity
	RCinputs[NOCHAN] = 0;
    89a6:	10 92 34 08 	sts	0x0834, r1
    89aa:	10 92 33 08 	sts	0x0833, r1

	OldRxSum = RxSum;
    89ae:	90 93 3b 05 	sts	0x053B, r25
    89b2:	80 93 3a 05 	sts	0x053A, r24
    89b6:	08 95       	ret

000089b8 <CenterSticks>:
}

// Center sticks on request from Menu
void CenterSticks(void)		
{
    89b8:	0f 93       	push	r16
    89ba:	1f 93       	push	r17
    89bc:	cf 93       	push	r28
    89be:	df 93       	push	r29
    89c0:	cd b7       	in	r28, 0x3d	; 61
    89c2:	de b7       	in	r29, 0x3e	; 62
    89c4:	60 97       	sbiw	r28, 0x10	; 16
    89c6:	0f b6       	in	r0, 0x3f	; 63
    89c8:	f8 94       	cli
    89ca:	de bf       	out	0x3e, r29	; 62
    89cc:	0f be       	out	0x3f, r0	; 63
    89ce:	cd bf       	out	0x3d, r28	; 61
	uint8_t i, j;
	uint16_t RxChannelZeroOffset[MAX_RC_CHANNELS] = {0,0,0,0,0,0,0,0};
    89d0:	8e 01       	movw	r16, r28
    89d2:	0f 5f       	subi	r16, 0xFF	; 255
    89d4:	1f 4f       	sbci	r17, 0xFF	; 255
    89d6:	80 e1       	ldi	r24, 0x10	; 16
    89d8:	d8 01       	movw	r26, r16
    89da:	1d 92       	st	X+, r1
    89dc:	8a 95       	dec	r24
    89de:	e9 f7       	brne	.-6      	; 0x89da <CenterSticks+0x22>
    89e0:	68 e0       	ldi	r22, 0x08	; 8
	OldRxSum = RxSum;
}

// Center sticks on request from Menu
void CenterSticks(void)		
{
    89e2:	d8 01       	movw	r26, r16
    89e4:	80 e0       	ldi	r24, 0x00	; 0
    89e6:	90 e0       	ldi	r25, 0x00	; 0
	// RxChannel will auto-update every RC frame (normally 46Hz or so)
	for (i=0; i<8; i++)
	{
		for (j=0; j<MAX_RC_CHANNELS; j++)
		{
			RxChannelZeroOffset[j] += RxChannel[j];
    89e8:	9c 01       	movw	r18, r24
    89ea:	22 0f       	add	r18, r18
    89ec:	33 1f       	adc	r19, r19
    89ee:	2e 54       	subi	r18, 0x4E	; 78
    89f0:	38 4f       	sbci	r19, 0xF8	; 248
    89f2:	f9 01       	movw	r30, r18
    89f4:	40 81       	ld	r20, Z
    89f6:	51 81       	ldd	r21, Z+1	; 0x01
    89f8:	2d 91       	ld	r18, X+
    89fa:	3c 91       	ld	r19, X
    89fc:	11 97       	sbiw	r26, 0x01	; 1
    89fe:	24 0f       	add	r18, r20
    8a00:	35 1f       	adc	r19, r21
    8a02:	2d 93       	st	X+, r18
    8a04:	3d 93       	st	X+, r19
    8a06:	01 96       	adiw	r24, 0x01	; 1

	// Take an average of eight readings
	// RxChannel will auto-update every RC frame (normally 46Hz or so)
	for (i=0; i<8; i++)
	{
		for (j=0; j<MAX_RC_CHANNELS; j++)
    8a08:	88 30       	cpi	r24, 0x08	; 8
    8a0a:	91 05       	cpc	r25, r1
    8a0c:	69 f7       	brne	.-38     	; 0x89e8 <CenterSticks+0x30>
    8a0e:	ff e7       	ldi	r31, 0x7F	; 127
    8a10:	2a e1       	ldi	r18, 0x1A	; 26
    8a12:	86 e0       	ldi	r24, 0x06	; 6
    8a14:	f1 50       	subi	r31, 0x01	; 1
    8a16:	20 40       	sbci	r18, 0x00	; 0
    8a18:	80 40       	sbci	r24, 0x00	; 0
    8a1a:	e1 f7       	brne	.-8      	; 0x8a14 <CenterSticks+0x5c>
    8a1c:	00 c0       	rjmp	.+0      	; 0x8a1e <CenterSticks+0x66>
    8a1e:	00 00       	nop
    8a20:	61 50       	subi	r22, 0x01	; 1
	uint8_t i, j;
	uint16_t RxChannelZeroOffset[MAX_RC_CHANNELS] = {0,0,0,0,0,0,0,0};

	// Take an average of eight readings
	// RxChannel will auto-update every RC frame (normally 46Hz or so)
	for (i=0; i<8; i++)
    8a22:	f9 f6       	brne	.-66     	; 0x89e2 <CenterSticks+0x2a>
    8a24:	a3 e8       	ldi	r26, 0x83	; 131
    8a26:	b7 e0       	ldi	r27, 0x07	; 7
    8a28:	9e 01       	movw	r18, r28
    8a2a:	2f 5e       	subi	r18, 0xEF	; 239
    8a2c:	3f 4f       	sbci	r19, 0xFF	; 255
    8a2e:	f8 01       	movw	r30, r16
		_delay_ms(100); // Wait for a new frame
	}

	for (i=0;i<MAX_RC_CHANNELS;i++)
	{
		Config.RxChannelZeroOffset[i] = ((RxChannelZeroOffset[i] + 4) >> 3); // Round and divide by 8
    8a30:	81 91       	ld	r24, Z+
    8a32:	91 91       	ld	r25, Z+
    8a34:	04 96       	adiw	r24, 0x04	; 4
    8a36:	43 e0       	ldi	r20, 0x03	; 3
    8a38:	96 95       	lsr	r25
    8a3a:	87 95       	ror	r24
    8a3c:	4a 95       	dec	r20
    8a3e:	e1 f7       	brne	.-8      	; 0x8a38 <CenterSticks+0x80>
    8a40:	8d 93       	st	X+, r24
    8a42:	9d 93       	st	X+, r25
			RxChannelZeroOffset[j] += RxChannel[j];
		}
		_delay_ms(100); // Wait for a new frame
	}

	for (i=0;i<MAX_RC_CHANNELS;i++)
    8a44:	e2 17       	cp	r30, r18
    8a46:	f3 07       	cpc	r31, r19
    8a48:	99 f7       	brne	.-26     	; 0x8a30 <CenterSticks+0x78>
	{
		Config.RxChannelZeroOffset[i] = ((RxChannelZeroOffset[i] + 4) >> 3); // Round and divide by 8
	}

	Save_Config_to_EEPROM();
}
    8a4a:	60 96       	adiw	r28, 0x10	; 16
    8a4c:	0f b6       	in	r0, 0x3f	; 63
    8a4e:	f8 94       	cli
    8a50:	de bf       	out	0x3e, r29	; 62
    8a52:	0f be       	out	0x3f, r0	; 63
    8a54:	cd bf       	out	0x3d, r28	; 61
    8a56:	df 91       	pop	r29
    8a58:	cf 91       	pop	r28
    8a5a:	1f 91       	pop	r17
    8a5c:	0f 91       	pop	r16
	for (i=0;i<MAX_RC_CHANNELS;i++)
	{
		Config.RxChannelZeroOffset[i] = ((RxChannelZeroOffset[i] + 4) >> 3); // Round and divide by 8
	}

	Save_Config_to_EEPROM();
    8a5e:	0c 94 bc 16 	jmp	0x2d78	; 0x2d78 <Save_Config_to_EEPROM>

00008a62 <output_servo_ppm>:
//************************************************************

volatile uint16_t ServoOut[MAX_OUTPUTS];

void output_servo_ppm(uint8_t ServoFlag)
{
    8a62:	8f 92       	push	r8
    8a64:	9f 92       	push	r9
    8a66:	af 92       	push	r10
    8a68:	bf 92       	push	r11
    8a6a:	df 92       	push	r13
    8a6c:	ef 92       	push	r14
    8a6e:	ff 92       	push	r15
    8a70:	0f 93       	push	r16
    8a72:	1f 93       	push	r17
    8a74:	cf 93       	push	r28
    8a76:	df 93       	push	r29
    8a78:	d8 2e       	mov	r13, r24
    8a7a:	0f e3       	ldi	r16, 0x3F	; 63
    8a7c:	16 e0       	ldi	r17, 0x06	; 6
    8a7e:	c0 e0       	ldi	r28, 0x00	; 0
    8a80:	d0 e0       	ldi	r29, 0x00	; 0
			temp = ((temp - 3750) >> 1) + 1500;
		}
		else
		{
			// Scale motor from 2500~5000 to 1000~2000
			temp = ((temp << 2) + 5) / 10; 	// Round and convert	
    8a82:	ea e0       	ldi	r30, 0x0A	; 10
    8a84:	8e 2e       	mov	r8, r30
    8a86:	91 2c       	mov	r9, r1
    8a88:	a1 2c       	mov	r10, r1
    8a8a:	b1 2c       	mov	r11, r1
	uint8_t i = 0;

	// Re-span numbers from internal values to microseconds
	for (i = 0; i < MAX_OUTPUTS; i++)
	{
		temp = ServoOut[i];					// Promote to 32 bits
    8a8c:	7e 01       	movw	r14, r28
    8a8e:	ee 0c       	add	r14, r14
    8a90:	ff 1c       	adc	r15, r15
    8a92:	f7 01       	movw	r30, r14
    8a94:	eb 5c       	subi	r30, 0xCB	; 203
    8a96:	f7 4f       	sbci	r31, 0xF7	; 247
    8a98:	20 81       	ld	r18, Z
    8a9a:	31 81       	ldd	r19, Z+1	; 0x01
    8a9c:	a9 01       	movw	r20, r18
    8a9e:	60 e0       	ldi	r22, 0x00	; 0
    8aa0:	70 e0       	ldi	r23, 0x00	; 0

		// Check for motor marker and ignore if set
		if (Config.Channel[i].Motor_marker != MOTOR)
    8aa2:	f8 01       	movw	r30, r16
    8aa4:	80 81       	ld	r24, Z
    8aa6:	82 30       	cpi	r24, 0x02	; 2
    8aa8:	79 f0       	breq	.+30     	; 0x8ac8 <output_servo_ppm+0x66>
		{
			// Scale servo from 2500~5000 to 875~2125
			temp = ((temp - 3750) >> 1) + 1500;
    8aaa:	9a 01       	movw	r18, r20
    8aac:	ab 01       	movw	r20, r22
    8aae:	26 5a       	subi	r18, 0xA6	; 166
    8ab0:	3e 40       	sbci	r19, 0x0E	; 14
    8ab2:	41 09       	sbc	r20, r1
    8ab4:	51 09       	sbc	r21, r1
    8ab6:	56 95       	lsr	r21
    8ab8:	47 95       	ror	r20
    8aba:	37 95       	ror	r19
    8abc:	27 95       	ror	r18
    8abe:	24 52       	subi	r18, 0x24	; 36
    8ac0:	3a 4f       	sbci	r19, 0xFA	; 250
    8ac2:	4f 4f       	sbci	r20, 0xFF	; 255
    8ac4:	5f 4f       	sbci	r21, 0xFF	; 255
    8ac6:	11 c0       	rjmp	.+34     	; 0x8aea <output_servo_ppm+0x88>
		}
		else
		{
			// Scale motor from 2500~5000 to 1000~2000
			temp = ((temp << 2) + 5) / 10; 	// Round and convert	
    8ac8:	cb 01       	movw	r24, r22
    8aca:	ba 01       	movw	r22, r20
    8acc:	52 e0       	ldi	r21, 0x02	; 2
    8ace:	66 0f       	add	r22, r22
    8ad0:	77 1f       	adc	r23, r23
    8ad2:	88 1f       	adc	r24, r24
    8ad4:	99 1f       	adc	r25, r25
    8ad6:	5a 95       	dec	r21
    8ad8:	d1 f7       	brne	.-12     	; 0x8ace <output_servo_ppm+0x6c>
    8ada:	6b 5f       	subi	r22, 0xFB	; 251
    8adc:	7f 4f       	sbci	r23, 0xFF	; 255
    8ade:	8f 4f       	sbci	r24, 0xFF	; 255
    8ae0:	9f 4f       	sbci	r25, 0xFF	; 255
    8ae2:	a5 01       	movw	r20, r10
    8ae4:	94 01       	movw	r18, r8
    8ae6:	0e 94 73 49 	call	0x92e6	; 0x92e6 <__udivmodsi4>
		}
		
		ServoOut[i] = (uint16_t)temp;
    8aea:	f7 01       	movw	r30, r14
    8aec:	eb 5c       	subi	r30, 0xCB	; 203
    8aee:	f7 4f       	sbci	r31, 0xF7	; 247
    8af0:	31 83       	std	Z+1, r19	; 0x01
    8af2:	20 83       	st	Z, r18
    8af4:	21 96       	adiw	r28, 0x01	; 1
    8af6:	0a 5d       	subi	r16, 0xDA	; 218
    8af8:	1f 4f       	sbci	r17, 0xFF	; 255
{
	uint32_t temp;
	uint8_t i = 0;

	// Re-span numbers from internal values to microseconds
	for (i = 0; i < MAX_OUTPUTS; i++)
    8afa:	c8 30       	cpi	r28, 0x08	; 8
    8afc:	d1 05       	cpc	r29, r1
    8afe:	31 f6       	brne	.-116    	; 0x8a8c <output_servo_ppm+0x2a>
		
		ServoOut[i] = (uint16_t)temp;
	}

	// Re-sample throttle value
	MonopolarThrottle = RxChannel[THROTTLE] - Config.RxChannelZeroOffset[THROTTLE];
    8b00:	80 91 b2 07 	lds	r24, 0x07B2
    8b04:	90 91 b3 07 	lds	r25, 0x07B3
    8b08:	20 91 83 07 	lds	r18, 0x0783
    8b0c:	30 91 84 07 	lds	r19, 0x0784
    8b10:	82 1b       	sub	r24, r18
    8b12:	93 0b       	sbc	r25, r19
    8b14:	90 93 22 08 	sts	0x0822, r25
    8b18:	80 93 21 08 	sts	0x0821, r24

	// Check for motor flags if throttle is below arming minimum or disarmed
	// and set all motors to minimum throttle if so
	if 	(
			(MonopolarThrottle < THROTTLEIDLE) || 
    8b1c:	80 91 21 08 	lds	r24, 0x0821
    8b20:	90 91 22 08 	lds	r25, 0x0822
	// Re-sample throttle value
	MonopolarThrottle = RxChannel[THROTTLE] - Config.RxChannelZeroOffset[THROTTLE];

	// Check for motor flags if throttle is below arming minimum or disarmed
	// and set all motors to minimum throttle if so
	if 	(
    8b24:	c2 97       	sbiw	r24, 0x32	; 50
    8b26:	ac f0       	brlt	.+42     	; 0x8b52 <output_servo_ppm+0xf0>
			(MonopolarThrottle < THROTTLEIDLE) || 
			((General_error & (1 << DISARMED)) != 0)
    8b28:	80 91 1e 05 	lds	r24, 0x051E
	MonopolarThrottle = RxChannel[THROTTLE] - Config.RxChannelZeroOffset[THROTTLE];

	// Check for motor flags if throttle is below arming minimum or disarmed
	// and set all motors to minimum throttle if so
	if 	(
			(MonopolarThrottle < THROTTLEIDLE) || 
    8b2c:	82 fd       	sbrc	r24, 2
    8b2e:	11 c0       	rjmp	.+34     	; 0x8b52 <output_servo_ppm+0xf0>
		}
	}

	// Determine output rate based on device type
	// Suppress outputs during throttle high error
	if((General_error & (1 << THROTTLE_HIGH)) == 0)
    8b30:	80 91 1e 05 	lds	r24, 0x051E
    8b34:	80 fd       	sbrc	r24, 0
    8b36:	24 c0       	rjmp	.+72     	; 0x8b80 <output_servo_ppm+0x11e>
	{
		// Reset JitterFlag immediately before PWM generation
		JitterFlag = false;
    8b38:	10 92 dd 07 	sts	0x07DD, r1
	
		// We now care about interrupts
		JitterGate = true;
    8b3c:	81 e0       	ldi	r24, 0x01	; 1
    8b3e:	80 93 dc 07 	sts	0x07DC, r24

		// Pass address of ServoOut array
		output_servo_ppm_asm(&ServoOut[0], ServoFlag);
    8b42:	6d 2d       	mov	r22, r13
    8b44:	85 e3       	ldi	r24, 0x35	; 53
    8b46:	98 e0       	ldi	r25, 0x08	; 8
    8b48:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <output_servo_ppm_asm>
		
		// We no longer care about interrupts
		JitterGate = false;
    8b4c:	10 92 dc 07 	sts	0x07DC, r1
    8b50:	17 c0       	rjmp	.+46     	; 0x8b80 <output_servo_ppm+0x11e>
//************************************************************

volatile uint16_t ServoOut[MAX_OUTPUTS];

void output_servo_ppm(uint8_t ServoFlag)
{
    8b52:	ef e3       	ldi	r30, 0x3F	; 63
    8b54:	f6 e0       	ldi	r31, 0x06	; 6
    8b56:	80 e0       	ldi	r24, 0x00	; 0
    8b58:	90 e0       	ldi	r25, 0x00	; 0
		{
			// Check for motor marker
			if (Config.Channel[i].Motor_marker == MOTOR)
			{
				// Set output to minimum pulse width (1000us)
				ServoOut[i] = MOTORMIN;
    8b5a:	28 ee       	ldi	r18, 0xE8	; 232
    8b5c:	33 e0       	ldi	r19, 0x03	; 3
	{
		// For each output
		for (i = 0; i < MAX_OUTPUTS; i++)
		{
			// Check for motor marker
			if (Config.Channel[i].Motor_marker == MOTOR)
    8b5e:	40 81       	ld	r20, Z
    8b60:	42 30       	cpi	r20, 0x02	; 2
    8b62:	41 f4       	brne	.+16     	; 0x8b74 <output_servo_ppm+0x112>
			{
				// Set output to minimum pulse width (1000us)
				ServoOut[i] = MOTORMIN;
    8b64:	dc 01       	movw	r26, r24
    8b66:	aa 0f       	add	r26, r26
    8b68:	bb 1f       	adc	r27, r27
    8b6a:	ab 5c       	subi	r26, 0xCB	; 203
    8b6c:	b7 4f       	sbci	r27, 0xF7	; 247
    8b6e:	11 96       	adiw	r26, 0x01	; 1
    8b70:	3c 93       	st	X, r19
    8b72:	2e 93       	st	-X, r18
    8b74:	01 96       	adiw	r24, 0x01	; 1
    8b76:	b6 96       	adiw	r30, 0x26	; 38
			(MonopolarThrottle < THROTTLEIDLE) || 
			((General_error & (1 << DISARMED)) != 0)
		)
	{
		// For each output
		for (i = 0; i < MAX_OUTPUTS; i++)
    8b78:	88 30       	cpi	r24, 0x08	; 8
    8b7a:	91 05       	cpc	r25, r1
    8b7c:	81 f7       	brne	.-32     	; 0x8b5e <output_servo_ppm+0xfc>
    8b7e:	d8 cf       	rjmp	.-80     	; 0x8b30 <output_servo_ppm+0xce>
		output_servo_ppm_asm(&ServoOut[0], ServoFlag);
		
		// We no longer care about interrupts
		JitterGate = false;
	}
}
    8b80:	df 91       	pop	r29
    8b82:	cf 91       	pop	r28
    8b84:	1f 91       	pop	r17
    8b86:	0f 91       	pop	r16
    8b88:	ff 90       	pop	r15
    8b8a:	ef 90       	pop	r14
    8b8c:	df 90       	pop	r13
    8b8e:	bf 90       	pop	r11
    8b90:	af 90       	pop	r10
    8b92:	9f 90       	pop	r9
    8b94:	8f 90       	pop	r8
    8b96:	08 95       	ret

00008b98 <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
  TWSR = 0;                         /* no prescaler */
    8b98:	10 92 b9 00 	sts	0x00B9, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
    8b9c:	81 e1       	ldi	r24, 0x11	; 17
    8b9e:	80 93 b8 00 	sts	0x00B8, r24
    8ba2:	08 95       	ret

00008ba4 <i2c_start>:
{
	uint32_t  i2c_timer = 0;
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    8ba4:	94 ea       	ldi	r25, 0xA4	; 164
    8ba6:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
    8baa:	4f ef       	ldi	r20, 0xFF	; 255
    8bac:	50 e0       	ldi	r21, 0x00	; 0
    8bae:	60 e0       	ldi	r22, 0x00	; 0
    8bb0:	70 e0       	ldi	r23, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    8bb2:	90 91 bc 00 	lds	r25, 0x00BC
    8bb6:	97 fd       	sbrc	r25, 7
    8bb8:	06 c0       	rjmp	.+12     	; 0x8bc6 <i2c_start+0x22>
    8bba:	41 50       	subi	r20, 0x01	; 1
    8bbc:	51 09       	sbc	r21, r1
    8bbe:	61 09       	sbc	r22, r1
    8bc0:	71 09       	sbc	r23, r1
    8bc2:	b8 f7       	brcc	.-18     	; 0x8bb2 <i2c_start+0xe>
    8bc4:	06 c0       	rjmp	.+12     	; 0x8bd2 <i2c_start+0x2e>
	if(i2c_timer == 0)
    8bc6:	45 2b       	or	r20, r21
    8bc8:	46 2b       	or	r20, r22
    8bca:	47 2b       	or	r20, r23
    8bcc:	11 f4       	brne	.+4      	; 0x8bd2 <i2c_start+0x2e>
		return 1;
    8bce:	81 e0       	ldi	r24, 0x01	; 1
    8bd0:	08 95       	ret

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    8bd2:	90 91 b9 00 	lds	r25, 0x00B9
    8bd6:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
    8bd8:	98 30       	cpi	r25, 0x08	; 8
    8bda:	11 f0       	breq	.+4      	; 0x8be0 <i2c_start+0x3c>
    8bdc:	90 31       	cpi	r25, 0x10	; 16
    8bde:	b9 f7       	brne	.-18     	; 0x8bce <i2c_start+0x2a>

	// send device address
	TWDR = address;
    8be0:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    8be4:	84 e8       	ldi	r24, 0x84	; 132
    8be6:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	i2c_timer = I2C_TIMER_DELAY;
    8bea:	8f ef       	ldi	r24, 0xFF	; 255
    8bec:	90 e0       	ldi	r25, 0x00	; 0
    8bee:	a0 e0       	ldi	r26, 0x00	; 0
    8bf0:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    8bf2:	20 91 bc 00 	lds	r18, 0x00BC
    8bf6:	27 fd       	sbrc	r18, 7
    8bf8:	05 c0       	rjmp	.+10     	; 0x8c04 <i2c_start+0x60>
    8bfa:	01 97       	sbiw	r24, 0x01	; 1
    8bfc:	a1 09       	sbc	r26, r1
    8bfe:	b1 09       	sbc	r27, r1
    8c00:	c0 f7       	brcc	.-16     	; 0x8bf2 <i2c_start+0x4e>
    8c02:	04 c0       	rjmp	.+8      	; 0x8c0c <i2c_start+0x68>
	if(i2c_timer == 0)
    8c04:	89 2b       	or	r24, r25
    8c06:	8a 2b       	or	r24, r26
    8c08:	8b 2b       	or	r24, r27
    8c0a:	09 f3       	breq	.-62     	; 0x8bce <i2c_start+0x2a>
		return 1;

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    8c0c:	80 91 b9 00 	lds	r24, 0x00B9
    8c10:	88 7f       	andi	r24, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
    8c12:	88 31       	cpi	r24, 0x18	; 24
    8c14:	11 f0       	breq	.+4      	; 0x8c1a <i2c_start+0x76>
    8c16:	80 34       	cpi	r24, 0x40	; 64
    8c18:	d1 f6       	brne	.-76     	; 0x8bce <i2c_start+0x2a>

	return 0;
    8c1a:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */
    8c1c:	08 95       	ret

00008c1e <i2c_start_wait>:
	uint8_t   twst;

    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    8c1e:	44 ea       	ldi	r20, 0xA4	; 164
    	twst = TW_STATUS & 0xF8;
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
    	TWCR = (1<<TWINT) | (1<<TWEN);
    8c20:	54 e8       	ldi	r21, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    8c22:	64 e9       	ldi	r22, 0x94	; 148
	uint8_t   twst;

    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    8c24:	40 93 bc 00 	sts	0x00BC, r20
    
    	// wait until transmission completed
	    i2c_timer = I2C_TIMER_DELAY;
    	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    8c28:	20 e0       	ldi	r18, 0x00	; 0
    8c2a:	30 e0       	ldi	r19, 0x00	; 0
    8c2c:	90 91 bc 00 	lds	r25, 0x00BC
    8c30:	97 fd       	sbrc	r25, 7
    8c32:	06 c0       	rjmp	.+12     	; 0x8c40 <i2c_start_wait+0x22>
    8c34:	2f 5f       	subi	r18, 0xFF	; 255
    8c36:	3f 4f       	sbci	r19, 0xFF	; 255
    8c38:	21 15       	cp	r18, r1
    8c3a:	91 e0       	ldi	r25, 0x01	; 1
    8c3c:	39 07       	cpc	r19, r25
    8c3e:	b1 f7       	brne	.-20     	; 0x8c2c <i2c_start_wait+0xe>

    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    8c40:	90 91 b9 00 	lds	r25, 0x00B9
    8c44:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    8c46:	98 30       	cpi	r25, 0x08	; 8
    8c48:	11 f0       	breq	.+4      	; 0x8c4e <i2c_start_wait+0x30>
    8c4a:	90 31       	cpi	r25, 0x10	; 16
    8c4c:	59 f7       	brne	.-42     	; 0x8c24 <i2c_start_wait+0x6>
    
    	// send device address
    	TWDR = address;
    8c4e:	80 93 bb 00 	sts	0x00BB, r24
    	TWCR = (1<<TWINT) | (1<<TWEN);
    8c52:	50 93 bc 00 	sts	0x00BC, r21
    
    	// wail until transmission completed
    	i2c_timer = I2C_TIMER_DELAY;
    	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    8c56:	20 e0       	ldi	r18, 0x00	; 0
    8c58:	30 e0       	ldi	r19, 0x00	; 0
    8c5a:	90 91 bc 00 	lds	r25, 0x00BC
    8c5e:	97 fd       	sbrc	r25, 7
    8c60:	06 c0       	rjmp	.+12     	; 0x8c6e <i2c_start_wait+0x50>
    8c62:	2f 5f       	subi	r18, 0xFF	; 255
    8c64:	3f 4f       	sbci	r19, 0xFF	; 255
    8c66:	21 15       	cp	r18, r1
    8c68:	91 e0       	ldi	r25, 0x01	; 1
    8c6a:	39 07       	cpc	r19, r25
    8c6c:	b1 f7       	brne	.-20     	; 0x8c5a <i2c_start_wait+0x3c>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    8c6e:	90 91 b9 00 	lds	r25, 0x00B9
    8c72:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    8c74:	90 32       	cpi	r25, 0x20	; 32
    8c76:	11 f0       	breq	.+4      	; 0x8c7c <i2c_start_wait+0x5e>
    8c78:	98 35       	cpi	r25, 0x58	; 88
    8c7a:	79 f4       	brne	.+30     	; 0x8c9a <i2c_start_wait+0x7c>
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    8c7c:	60 93 bc 00 	sts	0x00BC, r22
	        
	        // wait until stop condition is executed and bus released
	        i2c_timer = I2C_TIMER_DELAY;
	        while((TWCR & (1<<TWSTO)) && i2c_timer--);
    8c80:	20 e0       	ldi	r18, 0x00	; 0
    8c82:	30 e0       	ldi	r19, 0x00	; 0
    8c84:	90 91 bc 00 	lds	r25, 0x00BC
    8c88:	94 ff       	sbrs	r25, 4
    8c8a:	cc cf       	rjmp	.-104    	; 0x8c24 <i2c_start_wait+0x6>
    8c8c:	2f 5f       	subi	r18, 0xFF	; 255
    8c8e:	3f 4f       	sbci	r19, 0xFF	; 255
    8c90:	21 15       	cp	r18, r1
    8c92:	91 e0       	ldi	r25, 0x01	; 1
    8c94:	39 07       	cpc	r19, r25
    8c96:	b1 f7       	brne	.-20     	; 0x8c84 <i2c_start_wait+0x66>
    8c98:	c5 cf       	rjmp	.-118    	; 0x8c24 <i2c_start_wait+0x6>
    8c9a:	08 95       	ret

00008c9c <i2c_rep_start>:
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );
    8c9c:	0c 94 d2 45 	jmp	0x8ba4	; 0x8ba4 <i2c_start>

00008ca0 <i2c_stop>:
void i2c_stop(void)
{
	uint32_t  i2c_timer = 0;

    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    8ca0:	84 e9       	ldi	r24, 0x94	; 148
    8ca2:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait until stop condition is executed and bus released
	i2c_timer = I2C_TIMER_DELAY;
	while((TWCR & (1<<TWSTO)) && i2c_timer--);
    8ca6:	80 e0       	ldi	r24, 0x00	; 0
    8ca8:	90 e0       	ldi	r25, 0x00	; 0
    8caa:	20 91 bc 00 	lds	r18, 0x00BC
    8cae:	24 ff       	sbrs	r18, 4
    8cb0:	05 c0       	rjmp	.+10     	; 0x8cbc <i2c_stop+0x1c>
    8cb2:	01 96       	adiw	r24, 0x01	; 1
    8cb4:	81 15       	cp	r24, r1
    8cb6:	21 e0       	ldi	r18, 0x01	; 1
    8cb8:	92 07       	cpc	r25, r18
    8cba:	b9 f7       	brne	.-18     	; 0x8caa <i2c_stop+0xa>
    8cbc:	08 95       	ret

00008cbe <i2c_write>:
{	
	uint32_t  i2c_timer = 0;
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    8cbe:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    8cc2:	84 e8       	ldi	r24, 0x84	; 132
    8cc4:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
    8cc8:	8f ef       	ldi	r24, 0xFF	; 255
    8cca:	90 e0       	ldi	r25, 0x00	; 0
    8ccc:	a0 e0       	ldi	r26, 0x00	; 0
    8cce:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    8cd0:	20 91 bc 00 	lds	r18, 0x00BC
    8cd4:	27 fd       	sbrc	r18, 7
    8cd6:	05 c0       	rjmp	.+10     	; 0x8ce2 <i2c_write+0x24>
    8cd8:	01 97       	sbiw	r24, 0x01	; 1
    8cda:	a1 09       	sbc	r26, r1
    8cdc:	b1 09       	sbc	r27, r1
    8cde:	c0 f7       	brcc	.-16     	; 0x8cd0 <i2c_write+0x12>
    8ce0:	04 c0       	rjmp	.+8      	; 0x8cea <i2c_write+0x2c>
	if(i2c_timer == 0)
    8ce2:	89 2b       	or	r24, r25
    8ce4:	8a 2b       	or	r24, r26
    8ce6:	8b 2b       	or	r24, r27
    8ce8:	41 f0       	breq	.+16     	; 0x8cfa <i2c_write+0x3c>
		return 1;

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    8cea:	90 91 b9 00 	lds	r25, 0x00B9
    8cee:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
    8cf0:	81 e0       	ldi	r24, 0x01	; 1
    8cf2:	98 32       	cpi	r25, 0x28	; 40
    8cf4:	19 f4       	brne	.+6      	; 0x8cfc <i2c_write+0x3e>
    8cf6:	80 e0       	ldi	r24, 0x00	; 0
    8cf8:	08 95       	ret

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 1;
    8cfa:	81 e0       	ldi	r24, 0x01	; 1
	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
    8cfc:	08 95       	ret

00008cfe <i2c_readAck>:
*************************************************************************/
unsigned char i2c_readAck(void)
{
	uint32_t  i2c_timer = 0;

	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    8cfe:	84 ec       	ldi	r24, 0xC4	; 196
    8d00:	80 93 bc 00 	sts	0x00BC, r24
	i2c_timer = I2C_TIMER_DELAY;
    8d04:	8f ef       	ldi	r24, 0xFF	; 255
    8d06:	90 e0       	ldi	r25, 0x00	; 0
    8d08:	a0 e0       	ldi	r26, 0x00	; 0
    8d0a:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    8d0c:	20 91 bc 00 	lds	r18, 0x00BC
    8d10:	27 fd       	sbrc	r18, 7
    8d12:	05 c0       	rjmp	.+10     	; 0x8d1e <i2c_readAck+0x20>
    8d14:	01 97       	sbiw	r24, 0x01	; 1
    8d16:	a1 09       	sbc	r26, r1
    8d18:	b1 09       	sbc	r27, r1
    8d1a:	c0 f7       	brcc	.-16     	; 0x8d0c <i2c_readAck+0xe>
    8d1c:	04 c0       	rjmp	.+8      	; 0x8d26 <i2c_readAck+0x28>
	if(i2c_timer == 0)
    8d1e:	89 2b       	or	r24, r25
    8d20:	8a 2b       	or	r24, r26
    8d22:	8b 2b       	or	r24, r27
    8d24:	19 f0       	breq	.+6      	; 0x8d2c <i2c_readAck+0x2e>
		return 0;

    return TWDR;
    8d26:	80 91 bb 00 	lds	r24, 0x00BB
    8d2a:	08 95       	ret

	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 0;
    8d2c:	80 e0       	ldi	r24, 0x00	; 0

    return TWDR;

}/* i2c_readAck */
    8d2e:	08 95       	ret

00008d30 <i2c_readNak>:
*************************************************************************/
unsigned char i2c_readNak(void)
{
	uint32_t  i2c_timer = 0;

	TWCR = (1<<TWINT) | (1<<TWEN);
    8d30:	84 e8       	ldi	r24, 0x84	; 132
    8d32:	80 93 bc 00 	sts	0x00BC, r24
	i2c_timer = I2C_TIMER_DELAY;
    8d36:	8f ef       	ldi	r24, 0xFF	; 255
    8d38:	90 e0       	ldi	r25, 0x00	; 0
    8d3a:	a0 e0       	ldi	r26, 0x00	; 0
    8d3c:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    8d3e:	20 91 bc 00 	lds	r18, 0x00BC
    8d42:	27 fd       	sbrc	r18, 7
    8d44:	05 c0       	rjmp	.+10     	; 0x8d50 <i2c_readNak+0x20>
    8d46:	01 97       	sbiw	r24, 0x01	; 1
    8d48:	a1 09       	sbc	r26, r1
    8d4a:	b1 09       	sbc	r27, r1
    8d4c:	c0 f7       	brcc	.-16     	; 0x8d3e <i2c_readNak+0xe>
    8d4e:	04 c0       	rjmp	.+8      	; 0x8d58 <i2c_readNak+0x28>
	if(i2c_timer == 0)
    8d50:	89 2b       	or	r24, r25
    8d52:	8a 2b       	or	r24, r26
    8d54:	8b 2b       	or	r24, r27
    8d56:	19 f0       	breq	.+6      	; 0x8d5e <i2c_readNak+0x2e>
		return 0;
	
    return TWDR;
    8d58:	80 91 bb 00 	lds	r24, 0x00BB
    8d5c:	08 95       	ret

	TWCR = (1<<TWINT) | (1<<TWEN);
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 0;
    8d5e:	80 e0       	ldi	r24, 0x00	; 0
	
    return TWDR;

}/* i2c_readNak */
    8d60:	08 95       	ret

00008d62 <init_uart>:
#define BAUD_PRESCALE_SPEKTRUM ((F_CPU + USART_BAUDRATE_SPEKTRUM * 8L) / (USART_BAUDRATE_SPEKTRUM * 16L) - 1) // Default RX rate for Spektrum

// Initialise UART with adjusted bitrate
void init_uart(void)
{
	cli();								// Atmel wants global interrupts disabled when changing UART setup on the fly
    8d62:	f8 94       	cli
	
	UCSR0B &= ~(1 << RXCIE0);			// Disable serial interrupt
    8d64:	80 91 c1 00 	lds	r24, 0x00C1
    8d68:	8f 77       	andi	r24, 0x7F	; 127
    8d6a:	80 93 c1 00 	sts	0x00C1, r24

	while (UCSR0A & (1 << RXC0))		// Make sure there is nothing in the RX0 reg
    8d6e:	80 91 c0 00 	lds	r24, 0x00C0
    8d72:	87 ff       	sbrs	r24, 7
    8d74:	05 c0       	rjmp	.+10     	; 0x8d80 <init_uart+0x1e>
	{
		UCSR0C = UDR0;					// So as not to annoy Studio 6, use UCSR0C as a temp reg until UDR0 empty. Sorry, UCSR0C...
    8d76:	80 91 c6 00 	lds	r24, 0x00C6
    8d7a:	80 93 c2 00 	sts	0x00C2, r24
    8d7e:	f7 cf       	rjmp	.-18     	; 0x8d6e <init_uart+0xc>
	}
	
	// Reset UART regs to a known state
	UCSR0A = 0; // U2X = 0, no master mode, flags cleared 
    8d80:	10 92 c0 00 	sts	0x00C0, r1
	UCSR0B = 0; // Clear flags, disable tx/rx, 8 bits
    8d84:	10 92 c1 00 	sts	0x00C1, r1
	UCSR0C = 6; // 8N1
    8d88:	86 e0       	ldi	r24, 0x06	; 6
    8d8a:	80 93 c2 00 	sts	0x00C2, r24

	switch (Config.RxMode)
    8d8e:	80 91 d2 05 	lds	r24, 0x05D2
    8d92:	82 30       	cpi	r24, 0x02	; 2
    8d94:	09 f1       	breq	.+66     	; 0x8dd8 <init_uart+0x76>
    8d96:	34 f4       	brge	.+12     	; 0x8da4 <init_uart+0x42>
    8d98:	87 fd       	sbrc	r24, 7
    8d9a:	41 c0       	rjmp	.+130    	; 0x8e1e <init_uart+0xbc>
			UCSR0B |=  (1 << RXCIE0);					// Enable serial interrupt
			break;

		case CPPM_MODE:
		case PWM:
			UCSR0B &= 	~(1 << RXEN0);					// Disable receiver in PWM and CPPM modes
    8d9c:	80 91 c1 00 	lds	r24, 0x00C1
    8da0:	8f 7e       	andi	r24, 0xEF	; 239
    8da2:	3b c0       	rjmp	.+118    	; 0x8e1a <init_uart+0xb8>
	// Reset UART regs to a known state
	UCSR0A = 0; // U2X = 0, no master mode, flags cleared 
	UCSR0B = 0; // Clear flags, disable tx/rx, 8 bits
	UCSR0C = 6; // 8N1

	switch (Config.RxMode)
    8da4:	83 30       	cpi	r24, 0x03	; 3
    8da6:	d9 f5       	brne	.+118    	; 0x8e1e <init_uart+0xbc>
			UCSR0B |=  (1 << RXCIE0);					// Enable serial interrupt
			break;

		// Spektrum 8N1 (8 data bits / No parity / 1 stop bit / 115.2Kbps)
		case SPEKTRUM: 	
			UCSR0A &=  ~(1 << U2X0);					// Clear the 2x flag
    8da8:	80 91 c0 00 	lds	r24, 0x00C0
    8dac:	8d 7f       	andi	r24, 0xFD	; 253
    8dae:	80 93 c0 00 	sts	0x00C0, r24
			UBRR0H  =  (BAUD_PRESCALE_SPEKTRUM >> 8); 	// Actual = 113636, Error = -1.36%
    8db2:	10 92 c5 00 	sts	0x00C5, r1
			UBRR0L  =   BAUD_PRESCALE_SPEKTRUM & 0xff;	// 0x0A (10.35)	
    8db6:	8a e0       	ldi	r24, 0x0A	; 10
    8db8:	80 93 c4 00 	sts	0x00C4, r24
			UCSR0B |= 	(1 << RXEN0);					// Enable receiver
    8dbc:	80 91 c1 00 	lds	r24, 0x00C1
    8dc0:	80 61       	ori	r24, 0x10	; 16
    8dc2:	80 93 c1 00 	sts	0x00C1, r24
			UCSR0C &=  ~(1 << USBS0); 					// 1 stop bit
    8dc6:	80 91 c2 00 	lds	r24, 0x00C2
    8dca:	87 7f       	andi	r24, 0xF7	; 247
    8dcc:	80 93 c2 00 	sts	0x00C2, r24
			UCSR0C &=  ~(1 << UPM00) | 					// No parity 
    8dd0:	80 91 c2 00 	lds	r24, 0x00C2
    8dd4:	8f 7e       	andi	r24, 0xEF	; 239
    8dd6:	1c c0       	rjmp	.+56     	; 0x8e10 <init_uart+0xae>

	switch (Config.RxMode)
	{
		// Futaba S-Bus 8E2 (8 data bits / Even parity / 2 stop bits / 100Kbps)
		case SBUS: 		
			UCSR0A |=  (1 << U2X0);						// Need to set the 2x flag
    8dd8:	80 91 c0 00 	lds	r24, 0x00C0
    8ddc:	82 60       	ori	r24, 0x02	; 2
    8dde:	80 93 c0 00 	sts	0x00C0, r24
			UBRR0H  = (BAUD_PRESCALE_SBUS >> 8);  		// Actual = 100000 , Error = 0%	
    8de2:	10 92 c5 00 	sts	0x00C5, r1
			UBRR0L  =  BAUD_PRESCALE_SBUS & 0xff;		// 0x18 (24)
    8de6:	88 e1       	ldi	r24, 0x18	; 24
    8de8:	80 93 c4 00 	sts	0x00C4, r24
			UCSR0B |=  (1 << RXEN0);					// Enable receiver
    8dec:	80 91 c1 00 	lds	r24, 0x00C1
    8df0:	80 61       	ori	r24, 0x10	; 16
    8df2:	80 93 c1 00 	sts	0x00C1, r24
			UCSR0C |=  (1 << USBS0); 					// 2 stop bits
    8df6:	80 91 c2 00 	lds	r24, 0x00C2
    8dfa:	88 60       	ori	r24, 0x08	; 8
    8dfc:	80 93 c2 00 	sts	0x00C2, r24
			UCSR0C &= ~(1 << UPM00); 					// Even parity 
    8e00:	80 91 c2 00 	lds	r24, 0x00C2
    8e04:	8f 7e       	andi	r24, 0xEF	; 239
    8e06:	80 93 c2 00 	sts	0x00C2, r24
			UCSR0C |=  (1 << UPM01); 
    8e0a:	80 91 c2 00 	lds	r24, 0x00C2
    8e0e:	80 62       	ori	r24, 0x20	; 32
			UCSR0A &=  ~(1 << U2X0);					// Clear the 2x flag
			UBRR0H  =  (BAUD_PRESCALE_SPEKTRUM >> 8); 	// Actual = 113636, Error = -1.36%
			UBRR0L  =   BAUD_PRESCALE_SPEKTRUM & 0xff;	// 0x0A (10.35)	
			UCSR0B |= 	(1 << RXEN0);					// Enable receiver
			UCSR0C &=  ~(1 << USBS0); 					// 1 stop bit
			UCSR0C &=  ~(1 << UPM00) | 					// No parity 
    8e10:	80 93 c2 00 	sts	0x00C2, r24
						(1 << UPM01); 
			UCSR0B |=  (1 << RXCIE0);					// Enable serial interrupt
    8e14:	80 91 c1 00 	lds	r24, 0x00C1
    8e18:	80 68       	ori	r24, 0x80	; 128
			break;

		case CPPM_MODE:
		case PWM:
			UCSR0B &= 	~(1 << RXEN0);					// Disable receiver in PWM and CPPM modes
    8e1a:	80 93 c1 00 	sts	0x00C1, r24
		default:
			break;
	}

	// Re-enable interrupts
	sei();
    8e1e:	78 94       	sei
    8e20:	08 95       	ret

00008e22 <GetVbat>:

uint16_t GetVbat(void)				// Get battery voltage (VBAT on ADC3)
{
	uint16_t	vBat;				// Battery voltage
		
	read_adc(AIN_VBAT1);				// Multiplication factor = (Display volts / 1024) / (Vbat / 11 / Vref)
    8e22:	83 e0       	ldi	r24, 0x03	; 3
    8e24:	0e 94 22 11 	call	0x2244	; 0x2244 <read_adc>
	// For Vref = 2.45V, Multiplication factor = 2.632
	// For Vref = 2.305V, Multiplication factor = approx 2.5
	// An input voltage of 10V will results in a value of 999.
	// This means that the number represents units of 10mV.

	vBat = ADCW;
    8e28:	80 91 78 00 	lds	r24, 0x0078
    8e2c:	90 91 79 00 	lds	r25, 0x0079

	// Multiply by 2.578125
	// 2 + 1/2 + 1/16 + 1/64
	vBat = (vBat << 1) + (vBat >> 1) + (vBat >> 4) + (vBat >> 6); // Multiply by 2.578125
    8e30:	9c 01       	movw	r18, r24
    8e32:	36 95       	lsr	r19
    8e34:	27 95       	ror	r18
    8e36:	ac 01       	movw	r20, r24
    8e38:	44 0f       	add	r20, r20
    8e3a:	55 1f       	adc	r21, r21
    8e3c:	24 0f       	add	r18, r20
    8e3e:	35 1f       	adc	r19, r21
    8e40:	ac 01       	movw	r20, r24
    8e42:	74 e0       	ldi	r23, 0x04	; 4
    8e44:	56 95       	lsr	r21
    8e46:	47 95       	ror	r20
    8e48:	7a 95       	dec	r23
    8e4a:	e1 f7       	brne	.-8      	; 0x8e44 <GetVbat+0x22>
    8e4c:	24 0f       	add	r18, r20
    8e4e:	35 1f       	adc	r19, r21
    8e50:	e6 e0       	ldi	r30, 0x06	; 6
    8e52:	96 95       	lsr	r25
    8e54:	87 95       	ror	r24
    8e56:	ea 95       	dec	r30
    8e58:	e1 f7       	brne	.-8      	; 0x8e52 <GetVbat+0x30>

	return vBat;
}
    8e5a:	82 0f       	add	r24, r18
    8e5c:	93 1f       	adc	r25, r19
    8e5e:	08 95       	ret

00008e60 <__subsf3>:
    8e60:	50 58       	subi	r21, 0x80	; 128

00008e62 <__addsf3>:
    8e62:	bb 27       	eor	r27, r27
    8e64:	aa 27       	eor	r26, r26
    8e66:	0e d0       	rcall	.+28     	; 0x8e84 <__addsf3x>
    8e68:	75 c1       	rjmp	.+746    	; 0x9154 <__fp_round>
    8e6a:	66 d1       	rcall	.+716    	; 0x9138 <__fp_pscA>
    8e6c:	30 f0       	brcs	.+12     	; 0x8e7a <__addsf3+0x18>
    8e6e:	6b d1       	rcall	.+726    	; 0x9146 <__fp_pscB>
    8e70:	20 f0       	brcs	.+8      	; 0x8e7a <__addsf3+0x18>
    8e72:	31 f4       	brne	.+12     	; 0x8e80 <__addsf3+0x1e>
    8e74:	9f 3f       	cpi	r25, 0xFF	; 255
    8e76:	11 f4       	brne	.+4      	; 0x8e7c <__addsf3+0x1a>
    8e78:	1e f4       	brtc	.+6      	; 0x8e80 <__addsf3+0x1e>
    8e7a:	5b c1       	rjmp	.+694    	; 0x9132 <__fp_nan>
    8e7c:	0e f4       	brtc	.+2      	; 0x8e80 <__addsf3+0x1e>
    8e7e:	e0 95       	com	r30
    8e80:	e7 fb       	bst	r30, 7
    8e82:	51 c1       	rjmp	.+674    	; 0x9126 <__fp_inf>

00008e84 <__addsf3x>:
    8e84:	e9 2f       	mov	r30, r25
    8e86:	77 d1       	rcall	.+750    	; 0x9176 <__fp_split3>
    8e88:	80 f3       	brcs	.-32     	; 0x8e6a <__addsf3+0x8>
    8e8a:	ba 17       	cp	r27, r26
    8e8c:	62 07       	cpc	r22, r18
    8e8e:	73 07       	cpc	r23, r19
    8e90:	84 07       	cpc	r24, r20
    8e92:	95 07       	cpc	r25, r21
    8e94:	18 f0       	brcs	.+6      	; 0x8e9c <__addsf3x+0x18>
    8e96:	71 f4       	brne	.+28     	; 0x8eb4 <__addsf3x+0x30>
    8e98:	9e f5       	brtc	.+102    	; 0x8f00 <__addsf3x+0x7c>
    8e9a:	8f c1       	rjmp	.+798    	; 0x91ba <__fp_zero>
    8e9c:	0e f4       	brtc	.+2      	; 0x8ea0 <__addsf3x+0x1c>
    8e9e:	e0 95       	com	r30
    8ea0:	0b 2e       	mov	r0, r27
    8ea2:	ba 2f       	mov	r27, r26
    8ea4:	a0 2d       	mov	r26, r0
    8ea6:	0b 01       	movw	r0, r22
    8ea8:	b9 01       	movw	r22, r18
    8eaa:	90 01       	movw	r18, r0
    8eac:	0c 01       	movw	r0, r24
    8eae:	ca 01       	movw	r24, r20
    8eb0:	a0 01       	movw	r20, r0
    8eb2:	11 24       	eor	r1, r1
    8eb4:	ff 27       	eor	r31, r31
    8eb6:	59 1b       	sub	r21, r25
    8eb8:	99 f0       	breq	.+38     	; 0x8ee0 <__addsf3x+0x5c>
    8eba:	59 3f       	cpi	r21, 0xF9	; 249
    8ebc:	50 f4       	brcc	.+20     	; 0x8ed2 <__addsf3x+0x4e>
    8ebe:	50 3e       	cpi	r21, 0xE0	; 224
    8ec0:	68 f1       	brcs	.+90     	; 0x8f1c <__addsf3x+0x98>
    8ec2:	1a 16       	cp	r1, r26
    8ec4:	f0 40       	sbci	r31, 0x00	; 0
    8ec6:	a2 2f       	mov	r26, r18
    8ec8:	23 2f       	mov	r18, r19
    8eca:	34 2f       	mov	r19, r20
    8ecc:	44 27       	eor	r20, r20
    8ece:	58 5f       	subi	r21, 0xF8	; 248
    8ed0:	f3 cf       	rjmp	.-26     	; 0x8eb8 <__addsf3x+0x34>
    8ed2:	46 95       	lsr	r20
    8ed4:	37 95       	ror	r19
    8ed6:	27 95       	ror	r18
    8ed8:	a7 95       	ror	r26
    8eda:	f0 40       	sbci	r31, 0x00	; 0
    8edc:	53 95       	inc	r21
    8ede:	c9 f7       	brne	.-14     	; 0x8ed2 <__addsf3x+0x4e>
    8ee0:	7e f4       	brtc	.+30     	; 0x8f00 <__addsf3x+0x7c>
    8ee2:	1f 16       	cp	r1, r31
    8ee4:	ba 0b       	sbc	r27, r26
    8ee6:	62 0b       	sbc	r22, r18
    8ee8:	73 0b       	sbc	r23, r19
    8eea:	84 0b       	sbc	r24, r20
    8eec:	ba f0       	brmi	.+46     	; 0x8f1c <__addsf3x+0x98>
    8eee:	91 50       	subi	r25, 0x01	; 1
    8ef0:	a1 f0       	breq	.+40     	; 0x8f1a <__addsf3x+0x96>
    8ef2:	ff 0f       	add	r31, r31
    8ef4:	bb 1f       	adc	r27, r27
    8ef6:	66 1f       	adc	r22, r22
    8ef8:	77 1f       	adc	r23, r23
    8efa:	88 1f       	adc	r24, r24
    8efc:	c2 f7       	brpl	.-16     	; 0x8eee <__addsf3x+0x6a>
    8efe:	0e c0       	rjmp	.+28     	; 0x8f1c <__addsf3x+0x98>
    8f00:	ba 0f       	add	r27, r26
    8f02:	62 1f       	adc	r22, r18
    8f04:	73 1f       	adc	r23, r19
    8f06:	84 1f       	adc	r24, r20
    8f08:	48 f4       	brcc	.+18     	; 0x8f1c <__addsf3x+0x98>
    8f0a:	87 95       	ror	r24
    8f0c:	77 95       	ror	r23
    8f0e:	67 95       	ror	r22
    8f10:	b7 95       	ror	r27
    8f12:	f7 95       	ror	r31
    8f14:	9e 3f       	cpi	r25, 0xFE	; 254
    8f16:	08 f0       	brcs	.+2      	; 0x8f1a <__addsf3x+0x96>
    8f18:	b3 cf       	rjmp	.-154    	; 0x8e80 <__addsf3+0x1e>
    8f1a:	93 95       	inc	r25
    8f1c:	88 0f       	add	r24, r24
    8f1e:	08 f0       	brcs	.+2      	; 0x8f22 <__addsf3x+0x9e>
    8f20:	99 27       	eor	r25, r25
    8f22:	ee 0f       	add	r30, r30
    8f24:	97 95       	ror	r25
    8f26:	87 95       	ror	r24
    8f28:	08 95       	ret

00008f2a <__cmpsf2>:
    8f2a:	d9 d0       	rcall	.+434    	; 0x90de <__fp_cmp>
    8f2c:	08 f4       	brcc	.+2      	; 0x8f30 <__cmpsf2+0x6>
    8f2e:	81 e0       	ldi	r24, 0x01	; 1
    8f30:	08 95       	ret

00008f32 <__divsf3>:
    8f32:	0c d0       	rcall	.+24     	; 0x8f4c <__divsf3x>
    8f34:	0f c1       	rjmp	.+542    	; 0x9154 <__fp_round>
    8f36:	07 d1       	rcall	.+526    	; 0x9146 <__fp_pscB>
    8f38:	40 f0       	brcs	.+16     	; 0x8f4a <__divsf3+0x18>
    8f3a:	fe d0       	rcall	.+508    	; 0x9138 <__fp_pscA>
    8f3c:	30 f0       	brcs	.+12     	; 0x8f4a <__divsf3+0x18>
    8f3e:	21 f4       	brne	.+8      	; 0x8f48 <__divsf3+0x16>
    8f40:	5f 3f       	cpi	r21, 0xFF	; 255
    8f42:	19 f0       	breq	.+6      	; 0x8f4a <__divsf3+0x18>
    8f44:	f0 c0       	rjmp	.+480    	; 0x9126 <__fp_inf>
    8f46:	51 11       	cpse	r21, r1
    8f48:	39 c1       	rjmp	.+626    	; 0x91bc <__fp_szero>
    8f4a:	f3 c0       	rjmp	.+486    	; 0x9132 <__fp_nan>

00008f4c <__divsf3x>:
    8f4c:	14 d1       	rcall	.+552    	; 0x9176 <__fp_split3>
    8f4e:	98 f3       	brcs	.-26     	; 0x8f36 <__divsf3+0x4>

00008f50 <__divsf3_pse>:
    8f50:	99 23       	and	r25, r25
    8f52:	c9 f3       	breq	.-14     	; 0x8f46 <__divsf3+0x14>
    8f54:	55 23       	and	r21, r21
    8f56:	b1 f3       	breq	.-20     	; 0x8f44 <__divsf3+0x12>
    8f58:	95 1b       	sub	r25, r21
    8f5a:	55 0b       	sbc	r21, r21
    8f5c:	bb 27       	eor	r27, r27
    8f5e:	aa 27       	eor	r26, r26
    8f60:	62 17       	cp	r22, r18
    8f62:	73 07       	cpc	r23, r19
    8f64:	84 07       	cpc	r24, r20
    8f66:	38 f0       	brcs	.+14     	; 0x8f76 <__divsf3_pse+0x26>
    8f68:	9f 5f       	subi	r25, 0xFF	; 255
    8f6a:	5f 4f       	sbci	r21, 0xFF	; 255
    8f6c:	22 0f       	add	r18, r18
    8f6e:	33 1f       	adc	r19, r19
    8f70:	44 1f       	adc	r20, r20
    8f72:	aa 1f       	adc	r26, r26
    8f74:	a9 f3       	breq	.-22     	; 0x8f60 <__divsf3_pse+0x10>
    8f76:	33 d0       	rcall	.+102    	; 0x8fde <__divsf3_pse+0x8e>
    8f78:	0e 2e       	mov	r0, r30
    8f7a:	3a f0       	brmi	.+14     	; 0x8f8a <__divsf3_pse+0x3a>
    8f7c:	e0 e8       	ldi	r30, 0x80	; 128
    8f7e:	30 d0       	rcall	.+96     	; 0x8fe0 <__divsf3_pse+0x90>
    8f80:	91 50       	subi	r25, 0x01	; 1
    8f82:	50 40       	sbci	r21, 0x00	; 0
    8f84:	e6 95       	lsr	r30
    8f86:	00 1c       	adc	r0, r0
    8f88:	ca f7       	brpl	.-14     	; 0x8f7c <__divsf3_pse+0x2c>
    8f8a:	29 d0       	rcall	.+82     	; 0x8fde <__divsf3_pse+0x8e>
    8f8c:	fe 2f       	mov	r31, r30
    8f8e:	27 d0       	rcall	.+78     	; 0x8fde <__divsf3_pse+0x8e>
    8f90:	66 0f       	add	r22, r22
    8f92:	77 1f       	adc	r23, r23
    8f94:	88 1f       	adc	r24, r24
    8f96:	bb 1f       	adc	r27, r27
    8f98:	26 17       	cp	r18, r22
    8f9a:	37 07       	cpc	r19, r23
    8f9c:	48 07       	cpc	r20, r24
    8f9e:	ab 07       	cpc	r26, r27
    8fa0:	b0 e8       	ldi	r27, 0x80	; 128
    8fa2:	09 f0       	breq	.+2      	; 0x8fa6 <__divsf3_pse+0x56>
    8fa4:	bb 0b       	sbc	r27, r27
    8fa6:	80 2d       	mov	r24, r0
    8fa8:	bf 01       	movw	r22, r30
    8faa:	ff 27       	eor	r31, r31
    8fac:	93 58       	subi	r25, 0x83	; 131
    8fae:	5f 4f       	sbci	r21, 0xFF	; 255
    8fb0:	2a f0       	brmi	.+10     	; 0x8fbc <__divsf3_pse+0x6c>
    8fb2:	9e 3f       	cpi	r25, 0xFE	; 254
    8fb4:	51 05       	cpc	r21, r1
    8fb6:	68 f0       	brcs	.+26     	; 0x8fd2 <__divsf3_pse+0x82>
    8fb8:	b6 c0       	rjmp	.+364    	; 0x9126 <__fp_inf>
    8fba:	00 c1       	rjmp	.+512    	; 0x91bc <__fp_szero>
    8fbc:	5f 3f       	cpi	r21, 0xFF	; 255
    8fbe:	ec f3       	brlt	.-6      	; 0x8fba <__divsf3_pse+0x6a>
    8fc0:	98 3e       	cpi	r25, 0xE8	; 232
    8fc2:	dc f3       	brlt	.-10     	; 0x8fba <__divsf3_pse+0x6a>
    8fc4:	86 95       	lsr	r24
    8fc6:	77 95       	ror	r23
    8fc8:	67 95       	ror	r22
    8fca:	b7 95       	ror	r27
    8fcc:	f7 95       	ror	r31
    8fce:	9f 5f       	subi	r25, 0xFF	; 255
    8fd0:	c9 f7       	brne	.-14     	; 0x8fc4 <__divsf3_pse+0x74>
    8fd2:	88 0f       	add	r24, r24
    8fd4:	91 1d       	adc	r25, r1
    8fd6:	96 95       	lsr	r25
    8fd8:	87 95       	ror	r24
    8fda:	97 f9       	bld	r25, 7
    8fdc:	08 95       	ret
    8fde:	e1 e0       	ldi	r30, 0x01	; 1
    8fe0:	66 0f       	add	r22, r22
    8fe2:	77 1f       	adc	r23, r23
    8fe4:	88 1f       	adc	r24, r24
    8fe6:	bb 1f       	adc	r27, r27
    8fe8:	62 17       	cp	r22, r18
    8fea:	73 07       	cpc	r23, r19
    8fec:	84 07       	cpc	r24, r20
    8fee:	ba 07       	cpc	r27, r26
    8ff0:	20 f0       	brcs	.+8      	; 0x8ffa <__divsf3_pse+0xaa>
    8ff2:	62 1b       	sub	r22, r18
    8ff4:	73 0b       	sbc	r23, r19
    8ff6:	84 0b       	sbc	r24, r20
    8ff8:	ba 0b       	sbc	r27, r26
    8ffa:	ee 1f       	adc	r30, r30
    8ffc:	88 f7       	brcc	.-30     	; 0x8fe0 <__divsf3_pse+0x90>
    8ffe:	e0 95       	com	r30
    9000:	08 95       	ret

00009002 <__fixsfsi>:
    9002:	04 d0       	rcall	.+8      	; 0x900c <__fixunssfsi>
    9004:	68 94       	set
    9006:	b1 11       	cpse	r27, r1
    9008:	d9 c0       	rjmp	.+434    	; 0x91bc <__fp_szero>
    900a:	08 95       	ret

0000900c <__fixunssfsi>:
    900c:	bc d0       	rcall	.+376    	; 0x9186 <__fp_splitA>
    900e:	88 f0       	brcs	.+34     	; 0x9032 <__fixunssfsi+0x26>
    9010:	9f 57       	subi	r25, 0x7F	; 127
    9012:	90 f0       	brcs	.+36     	; 0x9038 <__fixunssfsi+0x2c>
    9014:	b9 2f       	mov	r27, r25
    9016:	99 27       	eor	r25, r25
    9018:	b7 51       	subi	r27, 0x17	; 23
    901a:	a0 f0       	brcs	.+40     	; 0x9044 <__fixunssfsi+0x38>
    901c:	d1 f0       	breq	.+52     	; 0x9052 <__fixunssfsi+0x46>
    901e:	66 0f       	add	r22, r22
    9020:	77 1f       	adc	r23, r23
    9022:	88 1f       	adc	r24, r24
    9024:	99 1f       	adc	r25, r25
    9026:	1a f0       	brmi	.+6      	; 0x902e <__fixunssfsi+0x22>
    9028:	ba 95       	dec	r27
    902a:	c9 f7       	brne	.-14     	; 0x901e <__fixunssfsi+0x12>
    902c:	12 c0       	rjmp	.+36     	; 0x9052 <__fixunssfsi+0x46>
    902e:	b1 30       	cpi	r27, 0x01	; 1
    9030:	81 f0       	breq	.+32     	; 0x9052 <__fixunssfsi+0x46>
    9032:	c3 d0       	rcall	.+390    	; 0x91ba <__fp_zero>
    9034:	b1 e0       	ldi	r27, 0x01	; 1
    9036:	08 95       	ret
    9038:	c0 c0       	rjmp	.+384    	; 0x91ba <__fp_zero>
    903a:	67 2f       	mov	r22, r23
    903c:	78 2f       	mov	r23, r24
    903e:	88 27       	eor	r24, r24
    9040:	b8 5f       	subi	r27, 0xF8	; 248
    9042:	39 f0       	breq	.+14     	; 0x9052 <__fixunssfsi+0x46>
    9044:	b9 3f       	cpi	r27, 0xF9	; 249
    9046:	cc f3       	brlt	.-14     	; 0x903a <__fixunssfsi+0x2e>
    9048:	86 95       	lsr	r24
    904a:	77 95       	ror	r23
    904c:	67 95       	ror	r22
    904e:	b3 95       	inc	r27
    9050:	d9 f7       	brne	.-10     	; 0x9048 <__fixunssfsi+0x3c>
    9052:	3e f4       	brtc	.+14     	; 0x9062 <__fixunssfsi+0x56>
    9054:	90 95       	com	r25
    9056:	80 95       	com	r24
    9058:	70 95       	com	r23
    905a:	61 95       	neg	r22
    905c:	7f 4f       	sbci	r23, 0xFF	; 255
    905e:	8f 4f       	sbci	r24, 0xFF	; 255
    9060:	9f 4f       	sbci	r25, 0xFF	; 255
    9062:	08 95       	ret

00009064 <__floatunsisf>:
    9064:	e8 94       	clt
    9066:	09 c0       	rjmp	.+18     	; 0x907a <__floatsisf+0x12>

00009068 <__floatsisf>:
    9068:	97 fb       	bst	r25, 7
    906a:	3e f4       	brtc	.+14     	; 0x907a <__floatsisf+0x12>
    906c:	90 95       	com	r25
    906e:	80 95       	com	r24
    9070:	70 95       	com	r23
    9072:	61 95       	neg	r22
    9074:	7f 4f       	sbci	r23, 0xFF	; 255
    9076:	8f 4f       	sbci	r24, 0xFF	; 255
    9078:	9f 4f       	sbci	r25, 0xFF	; 255
    907a:	99 23       	and	r25, r25
    907c:	a9 f0       	breq	.+42     	; 0x90a8 <__floatsisf+0x40>
    907e:	f9 2f       	mov	r31, r25
    9080:	96 e9       	ldi	r25, 0x96	; 150
    9082:	bb 27       	eor	r27, r27
    9084:	93 95       	inc	r25
    9086:	f6 95       	lsr	r31
    9088:	87 95       	ror	r24
    908a:	77 95       	ror	r23
    908c:	67 95       	ror	r22
    908e:	b7 95       	ror	r27
    9090:	f1 11       	cpse	r31, r1
    9092:	f8 cf       	rjmp	.-16     	; 0x9084 <__floatsisf+0x1c>
    9094:	fa f4       	brpl	.+62     	; 0x90d4 <__floatsisf+0x6c>
    9096:	bb 0f       	add	r27, r27
    9098:	11 f4       	brne	.+4      	; 0x909e <__floatsisf+0x36>
    909a:	60 ff       	sbrs	r22, 0
    909c:	1b c0       	rjmp	.+54     	; 0x90d4 <__floatsisf+0x6c>
    909e:	6f 5f       	subi	r22, 0xFF	; 255
    90a0:	7f 4f       	sbci	r23, 0xFF	; 255
    90a2:	8f 4f       	sbci	r24, 0xFF	; 255
    90a4:	9f 4f       	sbci	r25, 0xFF	; 255
    90a6:	16 c0       	rjmp	.+44     	; 0x90d4 <__floatsisf+0x6c>
    90a8:	88 23       	and	r24, r24
    90aa:	11 f0       	breq	.+4      	; 0x90b0 <__floatsisf+0x48>
    90ac:	96 e9       	ldi	r25, 0x96	; 150
    90ae:	11 c0       	rjmp	.+34     	; 0x90d2 <__floatsisf+0x6a>
    90b0:	77 23       	and	r23, r23
    90b2:	21 f0       	breq	.+8      	; 0x90bc <__floatsisf+0x54>
    90b4:	9e e8       	ldi	r25, 0x8E	; 142
    90b6:	87 2f       	mov	r24, r23
    90b8:	76 2f       	mov	r23, r22
    90ba:	05 c0       	rjmp	.+10     	; 0x90c6 <__floatsisf+0x5e>
    90bc:	66 23       	and	r22, r22
    90be:	71 f0       	breq	.+28     	; 0x90dc <__floatsisf+0x74>
    90c0:	96 e8       	ldi	r25, 0x86	; 134
    90c2:	86 2f       	mov	r24, r22
    90c4:	70 e0       	ldi	r23, 0x00	; 0
    90c6:	60 e0       	ldi	r22, 0x00	; 0
    90c8:	2a f0       	brmi	.+10     	; 0x90d4 <__floatsisf+0x6c>
    90ca:	9a 95       	dec	r25
    90cc:	66 0f       	add	r22, r22
    90ce:	77 1f       	adc	r23, r23
    90d0:	88 1f       	adc	r24, r24
    90d2:	da f7       	brpl	.-10     	; 0x90ca <__floatsisf+0x62>
    90d4:	88 0f       	add	r24, r24
    90d6:	96 95       	lsr	r25
    90d8:	87 95       	ror	r24
    90da:	97 f9       	bld	r25, 7
    90dc:	08 95       	ret

000090de <__fp_cmp>:
    90de:	99 0f       	add	r25, r25
    90e0:	00 08       	sbc	r0, r0
    90e2:	55 0f       	add	r21, r21
    90e4:	aa 0b       	sbc	r26, r26
    90e6:	e0 e8       	ldi	r30, 0x80	; 128
    90e8:	fe ef       	ldi	r31, 0xFE	; 254
    90ea:	16 16       	cp	r1, r22
    90ec:	17 06       	cpc	r1, r23
    90ee:	e8 07       	cpc	r30, r24
    90f0:	f9 07       	cpc	r31, r25
    90f2:	c0 f0       	brcs	.+48     	; 0x9124 <__fp_cmp+0x46>
    90f4:	12 16       	cp	r1, r18
    90f6:	13 06       	cpc	r1, r19
    90f8:	e4 07       	cpc	r30, r20
    90fa:	f5 07       	cpc	r31, r21
    90fc:	98 f0       	brcs	.+38     	; 0x9124 <__fp_cmp+0x46>
    90fe:	62 1b       	sub	r22, r18
    9100:	73 0b       	sbc	r23, r19
    9102:	84 0b       	sbc	r24, r20
    9104:	95 0b       	sbc	r25, r21
    9106:	39 f4       	brne	.+14     	; 0x9116 <__fp_cmp+0x38>
    9108:	0a 26       	eor	r0, r26
    910a:	61 f0       	breq	.+24     	; 0x9124 <__fp_cmp+0x46>
    910c:	23 2b       	or	r18, r19
    910e:	24 2b       	or	r18, r20
    9110:	25 2b       	or	r18, r21
    9112:	21 f4       	brne	.+8      	; 0x911c <__fp_cmp+0x3e>
    9114:	08 95       	ret
    9116:	0a 26       	eor	r0, r26
    9118:	09 f4       	brne	.+2      	; 0x911c <__fp_cmp+0x3e>
    911a:	a1 40       	sbci	r26, 0x01	; 1
    911c:	a6 95       	lsr	r26
    911e:	8f ef       	ldi	r24, 0xFF	; 255
    9120:	81 1d       	adc	r24, r1
    9122:	81 1d       	adc	r24, r1
    9124:	08 95       	ret

00009126 <__fp_inf>:
    9126:	97 f9       	bld	r25, 7
    9128:	9f 67       	ori	r25, 0x7F	; 127
    912a:	80 e8       	ldi	r24, 0x80	; 128
    912c:	70 e0       	ldi	r23, 0x00	; 0
    912e:	60 e0       	ldi	r22, 0x00	; 0
    9130:	08 95       	ret

00009132 <__fp_nan>:
    9132:	9f ef       	ldi	r25, 0xFF	; 255
    9134:	80 ec       	ldi	r24, 0xC0	; 192
    9136:	08 95       	ret

00009138 <__fp_pscA>:
    9138:	00 24       	eor	r0, r0
    913a:	0a 94       	dec	r0
    913c:	16 16       	cp	r1, r22
    913e:	17 06       	cpc	r1, r23
    9140:	18 06       	cpc	r1, r24
    9142:	09 06       	cpc	r0, r25
    9144:	08 95       	ret

00009146 <__fp_pscB>:
    9146:	00 24       	eor	r0, r0
    9148:	0a 94       	dec	r0
    914a:	12 16       	cp	r1, r18
    914c:	13 06       	cpc	r1, r19
    914e:	14 06       	cpc	r1, r20
    9150:	05 06       	cpc	r0, r21
    9152:	08 95       	ret

00009154 <__fp_round>:
    9154:	09 2e       	mov	r0, r25
    9156:	03 94       	inc	r0
    9158:	00 0c       	add	r0, r0
    915a:	11 f4       	brne	.+4      	; 0x9160 <__fp_round+0xc>
    915c:	88 23       	and	r24, r24
    915e:	52 f0       	brmi	.+20     	; 0x9174 <__fp_round+0x20>
    9160:	bb 0f       	add	r27, r27
    9162:	40 f4       	brcc	.+16     	; 0x9174 <__fp_round+0x20>
    9164:	bf 2b       	or	r27, r31
    9166:	11 f4       	brne	.+4      	; 0x916c <__fp_round+0x18>
    9168:	60 ff       	sbrs	r22, 0
    916a:	04 c0       	rjmp	.+8      	; 0x9174 <__fp_round+0x20>
    916c:	6f 5f       	subi	r22, 0xFF	; 255
    916e:	7f 4f       	sbci	r23, 0xFF	; 255
    9170:	8f 4f       	sbci	r24, 0xFF	; 255
    9172:	9f 4f       	sbci	r25, 0xFF	; 255
    9174:	08 95       	ret

00009176 <__fp_split3>:
    9176:	57 fd       	sbrc	r21, 7
    9178:	90 58       	subi	r25, 0x80	; 128
    917a:	44 0f       	add	r20, r20
    917c:	55 1f       	adc	r21, r21
    917e:	59 f0       	breq	.+22     	; 0x9196 <__fp_splitA+0x10>
    9180:	5f 3f       	cpi	r21, 0xFF	; 255
    9182:	71 f0       	breq	.+28     	; 0x91a0 <__fp_splitA+0x1a>
    9184:	47 95       	ror	r20

00009186 <__fp_splitA>:
    9186:	88 0f       	add	r24, r24
    9188:	97 fb       	bst	r25, 7
    918a:	99 1f       	adc	r25, r25
    918c:	61 f0       	breq	.+24     	; 0x91a6 <__fp_splitA+0x20>
    918e:	9f 3f       	cpi	r25, 0xFF	; 255
    9190:	79 f0       	breq	.+30     	; 0x91b0 <__fp_splitA+0x2a>
    9192:	87 95       	ror	r24
    9194:	08 95       	ret
    9196:	12 16       	cp	r1, r18
    9198:	13 06       	cpc	r1, r19
    919a:	14 06       	cpc	r1, r20
    919c:	55 1f       	adc	r21, r21
    919e:	f2 cf       	rjmp	.-28     	; 0x9184 <__fp_split3+0xe>
    91a0:	46 95       	lsr	r20
    91a2:	f1 df       	rcall	.-30     	; 0x9186 <__fp_splitA>
    91a4:	08 c0       	rjmp	.+16     	; 0x91b6 <__fp_splitA+0x30>
    91a6:	16 16       	cp	r1, r22
    91a8:	17 06       	cpc	r1, r23
    91aa:	18 06       	cpc	r1, r24
    91ac:	99 1f       	adc	r25, r25
    91ae:	f1 cf       	rjmp	.-30     	; 0x9192 <__fp_splitA+0xc>
    91b0:	86 95       	lsr	r24
    91b2:	71 05       	cpc	r23, r1
    91b4:	61 05       	cpc	r22, r1
    91b6:	08 94       	sec
    91b8:	08 95       	ret

000091ba <__fp_zero>:
    91ba:	e8 94       	clt

000091bc <__fp_szero>:
    91bc:	bb 27       	eor	r27, r27
    91be:	66 27       	eor	r22, r22
    91c0:	77 27       	eor	r23, r23
    91c2:	cb 01       	movw	r24, r22
    91c4:	97 f9       	bld	r25, 7
    91c6:	08 95       	ret

000091c8 <__gesf2>:
    91c8:	8a df       	rcall	.-236    	; 0x90de <__fp_cmp>
    91ca:	08 f4       	brcc	.+2      	; 0x91ce <__gesf2+0x6>
    91cc:	8f ef       	ldi	r24, 0xFF	; 255
    91ce:	08 95       	ret

000091d0 <__mulsf3>:
    91d0:	0b d0       	rcall	.+22     	; 0x91e8 <__mulsf3x>
    91d2:	c0 cf       	rjmp	.-128    	; 0x9154 <__fp_round>
    91d4:	b1 df       	rcall	.-158    	; 0x9138 <__fp_pscA>
    91d6:	28 f0       	brcs	.+10     	; 0x91e2 <__mulsf3+0x12>
    91d8:	b6 df       	rcall	.-148    	; 0x9146 <__fp_pscB>
    91da:	18 f0       	brcs	.+6      	; 0x91e2 <__mulsf3+0x12>
    91dc:	95 23       	and	r25, r21
    91de:	09 f0       	breq	.+2      	; 0x91e2 <__mulsf3+0x12>
    91e0:	a2 cf       	rjmp	.-188    	; 0x9126 <__fp_inf>
    91e2:	a7 cf       	rjmp	.-178    	; 0x9132 <__fp_nan>
    91e4:	11 24       	eor	r1, r1
    91e6:	ea cf       	rjmp	.-44     	; 0x91bc <__fp_szero>

000091e8 <__mulsf3x>:
    91e8:	c6 df       	rcall	.-116    	; 0x9176 <__fp_split3>
    91ea:	a0 f3       	brcs	.-24     	; 0x91d4 <__mulsf3+0x4>

000091ec <__mulsf3_pse>:
    91ec:	95 9f       	mul	r25, r21
    91ee:	d1 f3       	breq	.-12     	; 0x91e4 <__mulsf3+0x14>
    91f0:	95 0f       	add	r25, r21
    91f2:	50 e0       	ldi	r21, 0x00	; 0
    91f4:	55 1f       	adc	r21, r21
    91f6:	62 9f       	mul	r22, r18
    91f8:	f0 01       	movw	r30, r0
    91fa:	72 9f       	mul	r23, r18
    91fc:	bb 27       	eor	r27, r27
    91fe:	f0 0d       	add	r31, r0
    9200:	b1 1d       	adc	r27, r1
    9202:	63 9f       	mul	r22, r19
    9204:	aa 27       	eor	r26, r26
    9206:	f0 0d       	add	r31, r0
    9208:	b1 1d       	adc	r27, r1
    920a:	aa 1f       	adc	r26, r26
    920c:	64 9f       	mul	r22, r20
    920e:	66 27       	eor	r22, r22
    9210:	b0 0d       	add	r27, r0
    9212:	a1 1d       	adc	r26, r1
    9214:	66 1f       	adc	r22, r22
    9216:	82 9f       	mul	r24, r18
    9218:	22 27       	eor	r18, r18
    921a:	b0 0d       	add	r27, r0
    921c:	a1 1d       	adc	r26, r1
    921e:	62 1f       	adc	r22, r18
    9220:	73 9f       	mul	r23, r19
    9222:	b0 0d       	add	r27, r0
    9224:	a1 1d       	adc	r26, r1
    9226:	62 1f       	adc	r22, r18
    9228:	83 9f       	mul	r24, r19
    922a:	a0 0d       	add	r26, r0
    922c:	61 1d       	adc	r22, r1
    922e:	22 1f       	adc	r18, r18
    9230:	74 9f       	mul	r23, r20
    9232:	33 27       	eor	r19, r19
    9234:	a0 0d       	add	r26, r0
    9236:	61 1d       	adc	r22, r1
    9238:	23 1f       	adc	r18, r19
    923a:	84 9f       	mul	r24, r20
    923c:	60 0d       	add	r22, r0
    923e:	21 1d       	adc	r18, r1
    9240:	82 2f       	mov	r24, r18
    9242:	76 2f       	mov	r23, r22
    9244:	6a 2f       	mov	r22, r26
    9246:	11 24       	eor	r1, r1
    9248:	9f 57       	subi	r25, 0x7F	; 127
    924a:	50 40       	sbci	r21, 0x00	; 0
    924c:	8a f0       	brmi	.+34     	; 0x9270 <__mulsf3_pse+0x84>
    924e:	e1 f0       	breq	.+56     	; 0x9288 <__mulsf3_pse+0x9c>
    9250:	88 23       	and	r24, r24
    9252:	4a f0       	brmi	.+18     	; 0x9266 <__mulsf3_pse+0x7a>
    9254:	ee 0f       	add	r30, r30
    9256:	ff 1f       	adc	r31, r31
    9258:	bb 1f       	adc	r27, r27
    925a:	66 1f       	adc	r22, r22
    925c:	77 1f       	adc	r23, r23
    925e:	88 1f       	adc	r24, r24
    9260:	91 50       	subi	r25, 0x01	; 1
    9262:	50 40       	sbci	r21, 0x00	; 0
    9264:	a9 f7       	brne	.-22     	; 0x9250 <__mulsf3_pse+0x64>
    9266:	9e 3f       	cpi	r25, 0xFE	; 254
    9268:	51 05       	cpc	r21, r1
    926a:	70 f0       	brcs	.+28     	; 0x9288 <__mulsf3_pse+0x9c>
    926c:	5c cf       	rjmp	.-328    	; 0x9126 <__fp_inf>
    926e:	a6 cf       	rjmp	.-180    	; 0x91bc <__fp_szero>
    9270:	5f 3f       	cpi	r21, 0xFF	; 255
    9272:	ec f3       	brlt	.-6      	; 0x926e <__mulsf3_pse+0x82>
    9274:	98 3e       	cpi	r25, 0xE8	; 232
    9276:	dc f3       	brlt	.-10     	; 0x926e <__mulsf3_pse+0x82>
    9278:	86 95       	lsr	r24
    927a:	77 95       	ror	r23
    927c:	67 95       	ror	r22
    927e:	b7 95       	ror	r27
    9280:	f7 95       	ror	r31
    9282:	e7 95       	ror	r30
    9284:	9f 5f       	subi	r25, 0xFF	; 255
    9286:	c1 f7       	brne	.-16     	; 0x9278 <__mulsf3_pse+0x8c>
    9288:	fe 2b       	or	r31, r30
    928a:	88 0f       	add	r24, r24
    928c:	91 1d       	adc	r25, r1
    928e:	96 95       	lsr	r25
    9290:	87 95       	ror	r24
    9292:	97 f9       	bld	r25, 7
    9294:	08 95       	ret

00009296 <__udivmodhi4>:
    9296:	aa 1b       	sub	r26, r26
    9298:	bb 1b       	sub	r27, r27
    929a:	51 e1       	ldi	r21, 0x11	; 17
    929c:	07 c0       	rjmp	.+14     	; 0x92ac <__udivmodhi4_ep>

0000929e <__udivmodhi4_loop>:
    929e:	aa 1f       	adc	r26, r26
    92a0:	bb 1f       	adc	r27, r27
    92a2:	a6 17       	cp	r26, r22
    92a4:	b7 07       	cpc	r27, r23
    92a6:	10 f0       	brcs	.+4      	; 0x92ac <__udivmodhi4_ep>
    92a8:	a6 1b       	sub	r26, r22
    92aa:	b7 0b       	sbc	r27, r23

000092ac <__udivmodhi4_ep>:
    92ac:	88 1f       	adc	r24, r24
    92ae:	99 1f       	adc	r25, r25
    92b0:	5a 95       	dec	r21
    92b2:	a9 f7       	brne	.-22     	; 0x929e <__udivmodhi4_loop>
    92b4:	80 95       	com	r24
    92b6:	90 95       	com	r25
    92b8:	bc 01       	movw	r22, r24
    92ba:	cd 01       	movw	r24, r26
    92bc:	08 95       	ret

000092be <__divmodhi4>:
    92be:	97 fb       	bst	r25, 7
    92c0:	07 2e       	mov	r0, r23
    92c2:	16 f4       	brtc	.+4      	; 0x92c8 <__divmodhi4+0xa>
    92c4:	00 94       	com	r0
    92c6:	07 d0       	rcall	.+14     	; 0x92d6 <__divmodhi4_neg1>
    92c8:	77 fd       	sbrc	r23, 7
    92ca:	09 d0       	rcall	.+18     	; 0x92de <__divmodhi4_neg2>
    92cc:	0e 94 4b 49 	call	0x9296	; 0x9296 <__udivmodhi4>
    92d0:	07 fc       	sbrc	r0, 7
    92d2:	05 d0       	rcall	.+10     	; 0x92de <__divmodhi4_neg2>
    92d4:	3e f4       	brtc	.+14     	; 0x92e4 <__divmodhi4_exit>

000092d6 <__divmodhi4_neg1>:
    92d6:	90 95       	com	r25
    92d8:	81 95       	neg	r24
    92da:	9f 4f       	sbci	r25, 0xFF	; 255
    92dc:	08 95       	ret

000092de <__divmodhi4_neg2>:
    92de:	70 95       	com	r23
    92e0:	61 95       	neg	r22
    92e2:	7f 4f       	sbci	r23, 0xFF	; 255

000092e4 <__divmodhi4_exit>:
    92e4:	08 95       	ret

000092e6 <__udivmodsi4>:
    92e6:	a1 e2       	ldi	r26, 0x21	; 33
    92e8:	1a 2e       	mov	r1, r26
    92ea:	aa 1b       	sub	r26, r26
    92ec:	bb 1b       	sub	r27, r27
    92ee:	fd 01       	movw	r30, r26
    92f0:	0d c0       	rjmp	.+26     	; 0x930c <__udivmodsi4_ep>

000092f2 <__udivmodsi4_loop>:
    92f2:	aa 1f       	adc	r26, r26
    92f4:	bb 1f       	adc	r27, r27
    92f6:	ee 1f       	adc	r30, r30
    92f8:	ff 1f       	adc	r31, r31
    92fa:	a2 17       	cp	r26, r18
    92fc:	b3 07       	cpc	r27, r19
    92fe:	e4 07       	cpc	r30, r20
    9300:	f5 07       	cpc	r31, r21
    9302:	20 f0       	brcs	.+8      	; 0x930c <__udivmodsi4_ep>
    9304:	a2 1b       	sub	r26, r18
    9306:	b3 0b       	sbc	r27, r19
    9308:	e4 0b       	sbc	r30, r20
    930a:	f5 0b       	sbc	r31, r21

0000930c <__udivmodsi4_ep>:
    930c:	66 1f       	adc	r22, r22
    930e:	77 1f       	adc	r23, r23
    9310:	88 1f       	adc	r24, r24
    9312:	99 1f       	adc	r25, r25
    9314:	1a 94       	dec	r1
    9316:	69 f7       	brne	.-38     	; 0x92f2 <__udivmodsi4_loop>
    9318:	60 95       	com	r22
    931a:	70 95       	com	r23
    931c:	80 95       	com	r24
    931e:	90 95       	com	r25
    9320:	9b 01       	movw	r18, r22
    9322:	ac 01       	movw	r20, r24
    9324:	bd 01       	movw	r22, r26
    9326:	cf 01       	movw	r24, r30
    9328:	08 95       	ret

0000932a <__divmodsi4>:
    932a:	05 2e       	mov	r0, r21
    932c:	97 fb       	bst	r25, 7
    932e:	1e f4       	brtc	.+6      	; 0x9336 <__divmodsi4+0xc>
    9330:	00 94       	com	r0
    9332:	0e 94 ac 49 	call	0x9358	; 0x9358 <__negsi2>
    9336:	57 fd       	sbrc	r21, 7
    9338:	07 d0       	rcall	.+14     	; 0x9348 <__divmodsi4_neg2>
    933a:	0e 94 73 49 	call	0x92e6	; 0x92e6 <__udivmodsi4>
    933e:	07 fc       	sbrc	r0, 7
    9340:	03 d0       	rcall	.+6      	; 0x9348 <__divmodsi4_neg2>
    9342:	4e f4       	brtc	.+18     	; 0x9356 <__divmodsi4_exit>
    9344:	0c 94 ac 49 	jmp	0x9358	; 0x9358 <__negsi2>

00009348 <__divmodsi4_neg2>:
    9348:	50 95       	com	r21
    934a:	40 95       	com	r20
    934c:	30 95       	com	r19
    934e:	21 95       	neg	r18
    9350:	3f 4f       	sbci	r19, 0xFF	; 255
    9352:	4f 4f       	sbci	r20, 0xFF	; 255
    9354:	5f 4f       	sbci	r21, 0xFF	; 255

00009356 <__divmodsi4_exit>:
    9356:	08 95       	ret

00009358 <__negsi2>:
    9358:	90 95       	com	r25
    935a:	80 95       	com	r24
    935c:	70 95       	com	r23
    935e:	61 95       	neg	r22
    9360:	7f 4f       	sbci	r23, 0xFF	; 255
    9362:	8f 4f       	sbci	r24, 0xFF	; 255
    9364:	9f 4f       	sbci	r25, 0xFF	; 255
    9366:	08 95       	ret

00009368 <__tablejump2__>:
    9368:	ee 0f       	add	r30, r30
    936a:	ff 1f       	adc	r31, r31

0000936c <__tablejump__>:
    936c:	05 90       	lpm	r0, Z+
    936e:	f4 91       	lpm	r31, Z
    9370:	e0 2d       	mov	r30, r0
    9372:	09 94       	ijmp

00009374 <__mulhisi3>:
    9374:	0e 94 c2 49 	call	0x9384	; 0x9384 <__umulhisi3>
    9378:	33 23       	and	r19, r19
    937a:	12 f4       	brpl	.+4      	; 0x9380 <__mulhisi3+0xc>
    937c:	8a 1b       	sub	r24, r26
    937e:	9b 0b       	sbc	r25, r27
    9380:	0c 94 d3 49 	jmp	0x93a6	; 0x93a6 <__usmulhisi3_tail>

00009384 <__umulhisi3>:
    9384:	a2 9f       	mul	r26, r18
    9386:	b0 01       	movw	r22, r0
    9388:	b3 9f       	mul	r27, r19
    938a:	c0 01       	movw	r24, r0
    938c:	a3 9f       	mul	r26, r19
    938e:	70 0d       	add	r23, r0
    9390:	81 1d       	adc	r24, r1
    9392:	11 24       	eor	r1, r1
    9394:	91 1d       	adc	r25, r1
    9396:	b2 9f       	mul	r27, r18
    9398:	70 0d       	add	r23, r0
    939a:	81 1d       	adc	r24, r1
    939c:	11 24       	eor	r1, r1
    939e:	91 1d       	adc	r25, r1
    93a0:	08 95       	ret

000093a2 <__usmulhisi3>:
    93a2:	0e 94 c2 49 	call	0x9384	; 0x9384 <__umulhisi3>

000093a6 <__usmulhisi3_tail>:
    93a6:	b7 ff       	sbrs	r27, 7
    93a8:	08 95       	ret
    93aa:	82 1b       	sub	r24, r18
    93ac:	93 0b       	sbc	r25, r19
    93ae:	08 95       	ret

000093b0 <__muluhisi3>:
    93b0:	0e 94 c2 49 	call	0x9384	; 0x9384 <__umulhisi3>
    93b4:	a5 9f       	mul	r26, r21
    93b6:	90 0d       	add	r25, r0
    93b8:	b4 9f       	mul	r27, r20
    93ba:	90 0d       	add	r25, r0
    93bc:	a4 9f       	mul	r26, r20
    93be:	80 0d       	add	r24, r0
    93c0:	91 1d       	adc	r25, r1
    93c2:	11 24       	eor	r1, r1
    93c4:	08 95       	ret

000093c6 <__mulshisi3>:
    93c6:	b7 ff       	sbrs	r27, 7
    93c8:	0c 94 d8 49 	jmp	0x93b0	; 0x93b0 <__muluhisi3>

000093cc <__mulohisi3>:
    93cc:	0e 94 d8 49 	call	0x93b0	; 0x93b0 <__muluhisi3>
    93d0:	82 1b       	sub	r24, r18
    93d2:	93 0b       	sbc	r25, r19
    93d4:	08 95       	ret

000093d6 <memcpy_P>:
    93d6:	fb 01       	movw	r30, r22
    93d8:	dc 01       	movw	r26, r24
    93da:	02 c0       	rjmp	.+4      	; 0x93e0 <memcpy_P+0xa>
    93dc:	05 90       	lpm	r0, Z+
    93de:	0d 92       	st	X+, r0
    93e0:	41 50       	subi	r20, 0x01	; 1
    93e2:	50 40       	sbci	r21, 0x00	; 0
    93e4:	d8 f7       	brcc	.-10     	; 0x93dc <memcpy_P+0x6>
    93e6:	08 95       	ret

000093e8 <memmove>:
    93e8:	68 17       	cp	r22, r24
    93ea:	79 07       	cpc	r23, r25
    93ec:	68 f4       	brcc	.+26     	; 0x9408 <memmove+0x20>
    93ee:	fb 01       	movw	r30, r22
    93f0:	dc 01       	movw	r26, r24
    93f2:	e4 0f       	add	r30, r20
    93f4:	f5 1f       	adc	r31, r21
    93f6:	a4 0f       	add	r26, r20
    93f8:	b5 1f       	adc	r27, r21
    93fa:	02 c0       	rjmp	.+4      	; 0x9400 <memmove+0x18>
    93fc:	02 90       	ld	r0, -Z
    93fe:	0e 92       	st	-X, r0
    9400:	41 50       	subi	r20, 0x01	; 1
    9402:	50 40       	sbci	r21, 0x00	; 0
    9404:	d8 f7       	brcc	.-10     	; 0x93fc <memmove+0x14>
    9406:	08 95       	ret
    9408:	0c 94 51 4a 	jmp	0x94a2	; 0x94a2 <memcpy>

0000940c <__itoa_ncheck>:
    940c:	bb 27       	eor	r27, r27
    940e:	4a 30       	cpi	r20, 0x0A	; 10
    9410:	31 f4       	brne	.+12     	; 0x941e <__itoa_ncheck+0x12>
    9412:	99 23       	and	r25, r25
    9414:	22 f4       	brpl	.+8      	; 0x941e <__itoa_ncheck+0x12>
    9416:	bd e2       	ldi	r27, 0x2D	; 45
    9418:	90 95       	com	r25
    941a:	81 95       	neg	r24
    941c:	9f 4f       	sbci	r25, 0xFF	; 255
    941e:	0c 94 12 4a 	jmp	0x9424	; 0x9424 <__utoa_common>

00009422 <__utoa_ncheck>:
    9422:	bb 27       	eor	r27, r27

00009424 <__utoa_common>:
    9424:	fb 01       	movw	r30, r22
    9426:	55 27       	eor	r21, r21
    9428:	aa 27       	eor	r26, r26
    942a:	88 0f       	add	r24, r24
    942c:	99 1f       	adc	r25, r25
    942e:	aa 1f       	adc	r26, r26
    9430:	a4 17       	cp	r26, r20
    9432:	10 f0       	brcs	.+4      	; 0x9438 <__utoa_common+0x14>
    9434:	a4 1b       	sub	r26, r20
    9436:	83 95       	inc	r24
    9438:	50 51       	subi	r21, 0x10	; 16
    943a:	b9 f7       	brne	.-18     	; 0x942a <__utoa_common+0x6>
    943c:	a0 5d       	subi	r26, 0xD0	; 208
    943e:	aa 33       	cpi	r26, 0x3A	; 58
    9440:	08 f0       	brcs	.+2      	; 0x9444 <__utoa_common+0x20>
    9442:	a9 5d       	subi	r26, 0xD9	; 217
    9444:	a1 93       	st	Z+, r26
    9446:	00 97       	sbiw	r24, 0x00	; 0
    9448:	79 f7       	brne	.-34     	; 0x9428 <__utoa_common+0x4>
    944a:	b1 11       	cpse	r27, r1
    944c:	b1 93       	st	Z+, r27
    944e:	11 92       	st	Z+, r1
    9450:	cb 01       	movw	r24, r22
    9452:	0c 94 5a 4a 	jmp	0x94b4	; 0x94b4 <strrev>

00009456 <__eerd_block_m644pa>:
    9456:	dc 01       	movw	r26, r24
    9458:	cb 01       	movw	r24, r22

0000945a <__eerd_blraw_m644pa>:
    945a:	fc 01       	movw	r30, r24
    945c:	f9 99       	sbic	0x1f, 1	; 31
    945e:	fe cf       	rjmp	.-4      	; 0x945c <__eerd_blraw_m644pa+0x2>
    9460:	06 c0       	rjmp	.+12     	; 0x946e <__eerd_blraw_m644pa+0x14>
    9462:	f2 bd       	out	0x22, r31	; 34
    9464:	e1 bd       	out	0x21, r30	; 33
    9466:	f8 9a       	sbi	0x1f, 0	; 31
    9468:	31 96       	adiw	r30, 0x01	; 1
    946a:	00 b4       	in	r0, 0x20	; 32
    946c:	0d 92       	st	X+, r0
    946e:	41 50       	subi	r20, 0x01	; 1
    9470:	50 40       	sbci	r21, 0x00	; 0
    9472:	b8 f7       	brcc	.-18     	; 0x9462 <__eerd_blraw_m644pa+0x8>
    9474:	08 95       	ret

00009476 <__eerd_byte_m644pa>:
    9476:	f9 99       	sbic	0x1f, 1	; 31
    9478:	fe cf       	rjmp	.-4      	; 0x9476 <__eerd_byte_m644pa>
    947a:	92 bd       	out	0x22, r25	; 34
    947c:	81 bd       	out	0x21, r24	; 33
    947e:	f8 9a       	sbi	0x1f, 0	; 31
    9480:	99 27       	eor	r25, r25
    9482:	80 b5       	in	r24, 0x20	; 32
    9484:	08 95       	ret

00009486 <__eewr_byte_m644pa>:
    9486:	26 2f       	mov	r18, r22

00009488 <__eewr_r18_m644pa>:
    9488:	f9 99       	sbic	0x1f, 1	; 31
    948a:	fe cf       	rjmp	.-4      	; 0x9488 <__eewr_r18_m644pa>
    948c:	1f ba       	out	0x1f, r1	; 31
    948e:	92 bd       	out	0x22, r25	; 34
    9490:	81 bd       	out	0x21, r24	; 33
    9492:	20 bd       	out	0x20, r18	; 32
    9494:	0f b6       	in	r0, 0x3f	; 63
    9496:	f8 94       	cli
    9498:	fa 9a       	sbi	0x1f, 2	; 31
    949a:	f9 9a       	sbi	0x1f, 1	; 31
    949c:	0f be       	out	0x3f, r0	; 63
    949e:	01 96       	adiw	r24, 0x01	; 1
    94a0:	08 95       	ret

000094a2 <memcpy>:
    94a2:	fb 01       	movw	r30, r22
    94a4:	dc 01       	movw	r26, r24
    94a6:	02 c0       	rjmp	.+4      	; 0x94ac <memcpy+0xa>
    94a8:	01 90       	ld	r0, Z+
    94aa:	0d 92       	st	X+, r0
    94ac:	41 50       	subi	r20, 0x01	; 1
    94ae:	50 40       	sbci	r21, 0x00	; 0
    94b0:	d8 f7       	brcc	.-10     	; 0x94a8 <memcpy+0x6>
    94b2:	08 95       	ret

000094b4 <strrev>:
    94b4:	dc 01       	movw	r26, r24
    94b6:	fc 01       	movw	r30, r24
    94b8:	67 2f       	mov	r22, r23
    94ba:	71 91       	ld	r23, Z+
    94bc:	77 23       	and	r23, r23
    94be:	e1 f7       	brne	.-8      	; 0x94b8 <strrev+0x4>
    94c0:	32 97       	sbiw	r30, 0x02	; 2
    94c2:	04 c0       	rjmp	.+8      	; 0x94cc <strrev+0x18>
    94c4:	7c 91       	ld	r23, X
    94c6:	6d 93       	st	X+, r22
    94c8:	70 83       	st	Z, r23
    94ca:	62 91       	ld	r22, -Z
    94cc:	ae 17       	cp	r26, r30
    94ce:	bf 07       	cpc	r27, r31
    94d0:	c8 f3       	brcs	.-14     	; 0x94c4 <strrev+0x10>
    94d2:	08 95       	ret

000094d4 <_exit>:
    94d4:	f8 94       	cli

000094d6 <__stop_program>:
    94d6:	ff cf       	rjmp	.-2      	; 0x94d6 <__stop_program>
